// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InGameOn ;
   8: CALL_OW 8
// CreateDeposits ;
  12: CALL 6121 0 0
// LoadEnv ;
  16: CALL 5719 0 0
// LoadCam ;
  20: CALL 6335 0 0
// LoadTech ;
  24: CALL 6411 0 0
// LoadBase ;
  28: CALL 6897 0 0
// PrepareArabian ;
  32: CALL 186 0 0
// PrepareRussian ;
  36: CALL 3050 0 0
// Action ;
  40: CALL 7758 0 0
// end ;
  44: END
// export debug , prefix , time09 , time09c , playerInBase , kamikazeTrained , sibToCollect , apeDriver , missionTime , ruDefeated ; export wave , strength ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 09c_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 09c_
  63: ST_TO_ADDR
// time09 := LoadVariable ( 09_tick , 15 15$00 ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 09_tick
  71: PPUSH
  72: LD_INT 31500
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// time09c := LoadVariable ( 09c_tick , 5 5$00 ) ;
  80: LD_ADDR_EXP 4
  84: PUSH
  85: LD_STRING 09c_tick
  87: PPUSH
  88: LD_INT 10500
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// playerInBase := false ;
  96: LD_ADDR_EXP 5
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// kamikazeTrained := false ;
 104: LD_ADDR_EXP 6
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// apeDriver := false ;
 112: LD_ADDR_EXP 8
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// sibToCollect := [ 120 , 150 , 180 , 220 ] [ Difficulty ] ;
 120: LD_ADDR_EXP 7
 124: PUSH
 125: LD_INT 120
 127: PUSH
 128: LD_INT 150
 130: PUSH
 131: LD_INT 180
 133: PUSH
 134: LD_INT 220
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: LIST
 141: LIST
 142: PUSH
 143: LD_OWVAR 67
 147: ARRAY
 148: ST_TO_ADDR
// missionTime := 0 0$00 ;
 149: LD_ADDR_EXP 9
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// ruDefeated := false ;
 157: LD_ADDR_EXP 10
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// wave := 0 ;
 165: LD_ADDR_EXP 11
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// strength := 0 ;
 173: LD_ADDR_EXP 12
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ; end_of_file
 181: LD_VAR 0 1
 185: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , heikeSecondSquad , schulzSecondSquad , rolfSquad , Rolf ; export function PrepareArabian ; var i , apes , tmp , un , b , j , veh , vehicles ; begin
 186: LD_INT 0
 188: PPUSH
 189: PPUSH
 190: PPUSH
 191: PPUSH
 192: PPUSH
 193: PPUSH
 194: PPUSH
 195: PPUSH
 196: PPUSH
// if LoadVariable ( 05_DrugsTested , debug ) then
 197: LD_STRING 05_DrugsTested
 199: PPUSH
 200: LD_EXP 1
 204: PPUSH
 205: CALL_OW 30
 209: IFFALSE 224
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 211: LD_INT 5
 213: PPUSH
 214: LD_INT 2
 216: PPUSH
 217: LD_INT 2
 219: PPUSH
 220: CALL_OW 322
// uc_side := 2 ;
 224: LD_ADDR_OWVAR 20
 228: PUSH
 229: LD_INT 2
 231: ST_TO_ADDR
// uc_nation := nation_nature ;
 232: LD_ADDR_OWVAR 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// apes := CreateCharacterSet ( 09_apes ) ;
 240: LD_ADDR_VAR 0 3
 244: PUSH
 245: LD_STRING 09_apes
 247: PPUSH
 248: CALL_OW 31
 252: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
 253: LD_ADDR_VAR 0 6
 257: PUSH
 258: LD_INT 22
 260: PUSH
 261: LD_INT 2
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: PUSH
 268: LD_INT 2
 270: PUSH
 271: LD_INT 30
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: PUSH
 281: LD_INT 30
 283: PUSH
 284: LD_INT 1
 286: PUSH
 287: EMPTY
 288: LIST
 289: LIST
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PPUSH
 300: CALL_OW 69
 304: ST_TO_ADDR
// if apes then
 305: LD_VAR 0 3
 309: IFFALSE 388
// for i in apes do
 311: LD_ADDR_VAR 0 2
 315: PUSH
 316: LD_VAR 0 3
 320: PUSH
 321: FOR_IN
 322: IFFALSE 386
// if UnitsInside ( b [ 1 ] ) < 6 then
 324: LD_VAR 0 6
 328: PUSH
 329: LD_INT 1
 331: ARRAY
 332: PPUSH
 333: CALL_OW 313
 337: PUSH
 338: LD_INT 6
 340: LESS
 341: IFFALSE 363
// PlaceHumanInUnit ( i , b [ 1 ] ) else
 343: LD_VAR 0 2
 347: PPUSH
 348: LD_VAR 0 6
 352: PUSH
 353: LD_INT 1
 355: ARRAY
 356: PPUSH
 357: CALL_OW 52
 361: GO 384
// PlaceUnitXYR ( i , 82 , 27 , 6 , false ) ;
 363: LD_VAR 0 2
 367: PPUSH
 368: LD_INT 82
 370: PPUSH
 371: LD_INT 27
 373: PPUSH
 374: LD_INT 6
 376: PPUSH
 377: LD_INT 0
 379: PPUSH
 380: CALL_OW 50
 384: GO 321
 386: POP
 387: POP
// InitHC_All ( ) ;
 388: CALL_OW 584
// uc_nation := nation_arabian ;
 392: LD_ADDR_OWVAR 21
 396: PUSH
 397: LD_INT 2
 399: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
 400: LD_ADDR_VAR 0 6
 404: PUSH
 405: LD_INT 22
 407: PUSH
 408: LD_INT 2
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PUSH
 415: LD_INT 21
 417: PUSH
 418: LD_INT 3
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 2
 427: PUSH
 428: LD_INT 30
 430: PUSH
 431: LD_INT 32
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PUSH
 438: LD_INT 30
 440: PUSH
 441: LD_INT 4
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PUSH
 448: LD_INT 30
 450: PUSH
 451: LD_INT 5
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: PPUSH
 469: CALL_OW 69
 473: ST_TO_ADDR
// Rolf := PrepareUnit ( Rolf , ( not debug ) , 06_ ) ;
 474: LD_ADDR_EXP 33
 478: PUSH
 479: LD_STRING Rolf
 481: PPUSH
 482: LD_EXP 1
 486: NOT
 487: PPUSH
 488: LD_STRING 06_
 490: PPUSH
 491: CALL 10709 0 3
 495: ST_TO_ADDR
// if Rolf then
 496: LD_EXP 33
 500: IFFALSE 709
// begin rolfSquad := CreateCharacterSet ( 06_RolfSquad ) ;
 502: LD_ADDR_EXP 32
 506: PUSH
 507: LD_STRING 06_RolfSquad
 509: PPUSH
 510: CALL_OW 31
 514: ST_TO_ADDR
// if rolfSquad < 3 then
 515: LD_EXP 32
 519: PUSH
 520: LD_INT 3
 522: LESS
 523: IFFALSE 586
// for i := 1 to 3 - Count ( rolfSquad ) do
 525: LD_ADDR_VAR 0 2
 529: PUSH
 530: DOUBLE
 531: LD_INT 1
 533: DEC
 534: ST_TO_ADDR
 535: LD_INT 3
 537: PUSH
 538: LD_EXP 32
 542: PPUSH
 543: CALL 12811 0 1
 547: MINUS
 548: PUSH
 549: FOR_TO
 550: IFFALSE 584
// begin PrepareSoldier ( false , 4 ) ;
 552: LD_INT 0
 554: PPUSH
 555: LD_INT 4
 557: PPUSH
 558: CALL_OW 381
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
 562: LD_ADDR_EXP 32
 566: PUSH
 567: LD_EXP 32
 571: PPUSH
 572: CALL_OW 44
 576: PPUSH
 577: CALL 48144 0 2
 581: ST_TO_ADDR
// end ;
 582: GO 549
 584: POP
 585: POP
// if b then
 586: LD_VAR 0 6
 590: IFFALSE 665
// begin for i in rolfSquad union Rolf do
 592: LD_ADDR_VAR 0 2
 596: PUSH
 597: LD_EXP 32
 601: PUSH
 602: LD_EXP 33
 606: UNION
 607: PUSH
 608: FOR_IN
 609: IFFALSE 661
// begin SetClass ( i , 1 ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: LD_INT 1
 618: PPUSH
 619: CALL_OW 336
// PlaceHumanInUnit ( i , UnitFilter ( b , [ f_not , [ f_full ] ] ) [ 1 ] ) ;
 623: LD_VAR 0 2
 627: PPUSH
 628: LD_VAR 0 6
 632: PPUSH
 633: LD_INT 3
 635: PUSH
 636: LD_INT 62
 638: PUSH
 639: EMPTY
 640: LIST
 641: PUSH
 642: EMPTY
 643: LIST
 644: LIST
 645: PPUSH
 646: CALL_OW 72
 650: PUSH
 651: LD_INT 1
 653: ARRAY
 654: PPUSH
 655: CALL_OW 52
// end ;
 659: GO 608
 661: POP
 662: POP
// end else
 663: GO 709
// for i in rolfSquad union Rolf do
 665: LD_ADDR_VAR 0 2
 669: PUSH
 670: LD_EXP 32
 674: PUSH
 675: LD_EXP 33
 679: UNION
 680: PUSH
 681: FOR_IN
 682: IFFALSE 707
// PlaceUnitXYR ( i , 82 , 27 , 6 , false ) ;
 684: LD_VAR 0 2
 688: PPUSH
 689: LD_INT 82
 691: PPUSH
 692: LD_INT 27
 694: PPUSH
 695: LD_INT 6
 697: PPUSH
 698: LD_INT 0
 700: PPUSH
 701: CALL_OW 50
 705: GO 681
 707: POP
 708: POP
// end ; Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 709: LD_ADDR_EXP 13
 713: PUSH
 714: LD_STRING Heike
 716: PPUSH
 717: LD_EXP 1
 721: NOT
 722: PPUSH
 723: LD_EXP 2
 727: PPUSH
 728: CALL 10709 0 3
 732: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 733: LD_ADDR_EXP 16
 737: PUSH
 738: LD_STRING Ibrahim
 740: PPUSH
 741: LD_EXP 1
 745: NOT
 746: PPUSH
 747: LD_EXP 2
 751: PPUSH
 752: CALL 10709 0 3
 756: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 757: LD_ADDR_EXP 14
 761: PUSH
 762: LD_STRING Givi
 764: PPUSH
 765: LD_EXP 1
 769: NOT
 770: PPUSH
 771: LD_EXP 2
 775: PPUSH
 776: CALL 10709 0 3
 780: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 781: LD_ADDR_EXP 17
 785: PUSH
 786: LD_STRING Kamil
 788: PPUSH
 789: LD_EXP 1
 793: NOT
 794: PPUSH
 795: LD_EXP 2
 799: PPUSH
 800: CALL 10709 0 3
 804: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 805: LD_ADDR_EXP 18
 809: PUSH
 810: LD_STRING Kaia
 812: PPUSH
 813: LD_EXP 1
 817: NOT
 818: PPUSH
 819: LD_EXP 2
 823: PPUSH
 824: CALL 10709 0 3
 828: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 829: LD_ADDR_EXP 19
 833: PUSH
 834: LD_STRING Sophia
 836: PPUSH
 837: LD_EXP 1
 841: NOT
 842: PPUSH
 843: LD_EXP 2
 847: PPUSH
 848: CALL 10709 0 3
 852: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 853: LD_ADDR_EXP 20
 857: PUSH
 858: LD_STRING Markov
 860: PPUSH
 861: LD_EXP 1
 865: NOT
 866: PPUSH
 867: LD_EXP 2
 871: PPUSH
 872: CALL 10709 0 3
 876: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 877: LD_ADDR_EXP 23
 881: PUSH
 882: LD_STRING Aviradze
 884: PPUSH
 885: LD_EXP 1
 889: NOT
 890: PPUSH
 891: LD_EXP 2
 895: PPUSH
 896: CALL 10709 0 3
 900: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 901: LD_ADDR_EXP 22
 905: PUSH
 906: LD_STRING Kurt
 908: PPUSH
 909: LD_EXP 1
 913: NOT
 914: PPUSH
 915: LD_EXP 2
 919: PPUSH
 920: CALL 10709 0 3
 924: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 925: LD_ADDR_EXP 15
 929: PUSH
 930: LD_STRING Mike
 932: PPUSH
 933: LD_EXP 1
 937: NOT
 938: PPUSH
 939: LD_EXP 2
 943: PPUSH
 944: CALL 10709 0 3
 948: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 949: LD_ADDR_EXP 21
 953: PUSH
 954: LD_STRING Olaf
 956: PPUSH
 957: LD_EXP 1
 961: NOT
 962: PPUSH
 963: LD_EXP 2
 967: PPUSH
 968: CALL 10709 0 3
 972: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 09c_heikeSecondSquad ) ;
 973: LD_ADDR_EXP 30
 977: PUSH
 978: LD_STRING 09c_heikeSecondSquad
 980: PPUSH
 981: CALL_OW 31
 985: ST_TO_ADDR
// Schulz := PrepareUnit ( Schulz , ( not debug ) , prefix ) ;
 986: LD_ADDR_EXP 24
 990: PUSH
 991: LD_STRING Schulz
 993: PPUSH
 994: LD_EXP 1
 998: NOT
 999: PPUSH
1000: LD_EXP 2
1004: PPUSH
1005: CALL 10709 0 3
1009: ST_TO_ADDR
// Basim := PrepareUnit ( Basim , ( not debug ) , prefix ) ;
1010: LD_ADDR_EXP 25
1014: PUSH
1015: LD_STRING Basim
1017: PPUSH
1018: LD_EXP 1
1022: NOT
1023: PPUSH
1024: LD_EXP 2
1028: PPUSH
1029: CALL 10709 0 3
1033: ST_TO_ADDR
// Lemmy := PrepareUnit ( Lemmy , ( not debug ) , prefix ) ;
1034: LD_ADDR_EXP 26
1038: PUSH
1039: LD_STRING Lemmy
1041: PPUSH
1042: LD_EXP 1
1046: NOT
1047: PPUSH
1048: LD_EXP 2
1052: PPUSH
1053: CALL 10709 0 3
1057: ST_TO_ADDR
// Mia := PrepareUnit ( Mia , ( not debug ) , prefix ) ;
1058: LD_ADDR_EXP 27
1062: PUSH
1063: LD_STRING Mia
1065: PPUSH
1066: LD_EXP 1
1070: NOT
1071: PPUSH
1072: LD_EXP 2
1076: PPUSH
1077: CALL 10709 0 3
1081: ST_TO_ADDR
// Nia := PrepareUnit ( Nia , ( not debug ) , prefix ) ;
1082: LD_ADDR_EXP 28
1086: PUSH
1087: LD_STRING Nia
1089: PPUSH
1090: LD_EXP 1
1094: NOT
1095: PPUSH
1096: LD_EXP 2
1100: PPUSH
1101: CALL 10709 0 3
1105: ST_TO_ADDR
// Jenna := PrepareUnit ( Jenna , ( not debug ) , prefix ) ;
1106: LD_ADDR_EXP 29
1110: PUSH
1111: LD_STRING Jenna
1113: PPUSH
1114: LD_EXP 1
1118: NOT
1119: PPUSH
1120: LD_EXP 2
1124: PPUSH
1125: CALL 10709 0 3
1129: ST_TO_ADDR
// schulzSecondSquad := CreateCharacterSet ( 09c_schulzSecondSquad ) ;
1130: LD_ADDR_EXP 31
1134: PUSH
1135: LD_STRING 09c_schulzSecondSquad
1137: PPUSH
1138: CALL_OW 31
1142: ST_TO_ADDR
// if debug then
1143: LD_EXP 1
1147: IFFALSE 1227
// begin schulzSecondSquad := [ ] ;
1149: LD_ADDR_EXP 31
1153: PUSH
1154: EMPTY
1155: ST_TO_ADDR
// for i := 1 to 3 do
1156: LD_ADDR_VAR 0 2
1160: PUSH
1161: DOUBLE
1162: LD_INT 1
1164: DEC
1165: ST_TO_ADDR
1166: LD_INT 3
1168: PUSH
1169: FOR_TO
1170: IFFALSE 1225
// begin uc_side := 2 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 2
1179: ST_TO_ADDR
// uc_nation := nation_arabian ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 2
1187: ST_TO_ADDR
// PrepareHuman ( false , i , 0 ) ;
1188: LD_INT 0
1190: PPUSH
1191: LD_VAR 0 2
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: CALL_OW 380
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
1203: LD_ADDR_EXP 31
1207: PUSH
1208: LD_EXP 31
1212: PPUSH
1213: CALL_OW 44
1217: PPUSH
1218: CALL 48144 0 2
1222: ST_TO_ADDR
// end ;
1223: GO 1169
1225: POP
1226: POP
// end ; vehicles := LoadVariable ( 09c_vehicles , [ [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 36 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 41 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 37 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 35 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 34 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 38 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 40 ] , [ 13 , 3 , 1 , 28 , 2 , 0 , 0 , 39 ] ] ) ;
1227: LD_ADDR_VAR 0 9
1231: PUSH
1232: LD_STRING 09c_vehicles
1234: PPUSH
1235: LD_INT 13
1237: PUSH
1238: LD_INT 3
1240: PUSH
1241: LD_INT 1
1243: PUSH
1244: LD_INT 28
1246: PUSH
1247: LD_INT 2
1249: PUSH
1250: LD_INT 0
1252: PUSH
1253: LD_INT 0
1255: PUSH
1256: LD_INT 36
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: LD_INT 13
1271: PUSH
1272: LD_INT 3
1274: PUSH
1275: LD_INT 1
1277: PUSH
1278: LD_INT 28
1280: PUSH
1281: LD_INT 2
1283: PUSH
1284: LD_INT 0
1286: PUSH
1287: LD_INT 0
1289: PUSH
1290: LD_INT 41
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: PUSH
1303: LD_INT 13
1305: PUSH
1306: LD_INT 3
1308: PUSH
1309: LD_INT 1
1311: PUSH
1312: LD_INT 28
1314: PUSH
1315: LD_INT 2
1317: PUSH
1318: LD_INT 0
1320: PUSH
1321: LD_INT 0
1323: PUSH
1324: LD_INT 37
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: PUSH
1337: LD_INT 13
1339: PUSH
1340: LD_INT 3
1342: PUSH
1343: LD_INT 1
1345: PUSH
1346: LD_INT 28
1348: PUSH
1349: LD_INT 2
1351: PUSH
1352: LD_INT 0
1354: PUSH
1355: LD_INT 0
1357: PUSH
1358: LD_INT 35
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: PUSH
1371: LD_INT 13
1373: PUSH
1374: LD_INT 3
1376: PUSH
1377: LD_INT 1
1379: PUSH
1380: LD_INT 28
1382: PUSH
1383: LD_INT 2
1385: PUSH
1386: LD_INT 0
1388: PUSH
1389: LD_INT 0
1391: PUSH
1392: LD_INT 34
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: PUSH
1405: LD_INT 13
1407: PUSH
1408: LD_INT 3
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: LD_INT 28
1416: PUSH
1417: LD_INT 2
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 0
1425: PUSH
1426: LD_INT 38
1428: PUSH
1429: EMPTY
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 13
1441: PUSH
1442: LD_INT 3
1444: PUSH
1445: LD_INT 1
1447: PUSH
1448: LD_INT 28
1450: PUSH
1451: LD_INT 2
1453: PUSH
1454: LD_INT 0
1456: PUSH
1457: LD_INT 0
1459: PUSH
1460: LD_INT 40
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PUSH
1473: LD_INT 13
1475: PUSH
1476: LD_INT 3
1478: PUSH
1479: LD_INT 1
1481: PUSH
1482: LD_INT 28
1484: PUSH
1485: LD_INT 2
1487: PUSH
1488: LD_INT 0
1490: PUSH
1491: LD_INT 0
1493: PUSH
1494: LD_INT 39
1496: PUSH
1497: EMPTY
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: PPUSH
1517: CALL_OW 30
1521: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Heike , LoadVariable ( 09c_Heike_ID , - 1 ) , vehicles ) ;
1522: LD_ADDR_VAR 0 9
1526: PUSH
1527: LD_VAR 0 9
1531: PUSH
1532: LD_EXP 13
1536: PPUSH
1537: LD_STRING 09c_Heike_ID
1539: PPUSH
1540: LD_INT 1
1542: NEG
1543: PPUSH
1544: CALL_OW 30
1548: PPUSH
1549: LD_VAR 0 9
1553: PPUSH
1554: CALL 2764 0 3
1558: DIFF
1559: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Givi , LoadVariable ( 09c_Givi_ID , - 1 ) , vehicles ) ;
1560: LD_ADDR_VAR 0 9
1564: PUSH
1565: LD_VAR 0 9
1569: PUSH
1570: LD_EXP 14
1574: PPUSH
1575: LD_STRING 09c_Givi_ID
1577: PPUSH
1578: LD_INT 1
1580: NEG
1581: PPUSH
1582: CALL_OW 30
1586: PPUSH
1587: LD_VAR 0 9
1591: PPUSH
1592: CALL 2764 0 3
1596: DIFF
1597: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Mike , LoadVariable ( 09c_Mike_ID , - 1 ) , vehicles ) ;
1598: LD_ADDR_VAR 0 9
1602: PUSH
1603: LD_VAR 0 9
1607: PUSH
1608: LD_EXP 15
1612: PPUSH
1613: LD_STRING 09c_Mike_ID
1615: PPUSH
1616: LD_INT 1
1618: NEG
1619: PPUSH
1620: CALL_OW 30
1624: PPUSH
1625: LD_VAR 0 9
1629: PPUSH
1630: CALL 2764 0 3
1634: DIFF
1635: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Ibrahim , LoadVariable ( 09c_Ibrahim_ID , - 1 ) , vehicles ) ;
1636: LD_ADDR_VAR 0 9
1640: PUSH
1641: LD_VAR 0 9
1645: PUSH
1646: LD_EXP 16
1650: PPUSH
1651: LD_STRING 09c_Ibrahim_ID
1653: PPUSH
1654: LD_INT 1
1656: NEG
1657: PPUSH
1658: CALL_OW 30
1662: PPUSH
1663: LD_VAR 0 9
1667: PPUSH
1668: CALL 2764 0 3
1672: DIFF
1673: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kamil , LoadVariable ( 09c_Kamil_ID , - 1 ) , vehicles ) ;
1674: LD_ADDR_VAR 0 9
1678: PUSH
1679: LD_VAR 0 9
1683: PUSH
1684: LD_EXP 17
1688: PPUSH
1689: LD_STRING 09c_Kamil_ID
1691: PPUSH
1692: LD_INT 1
1694: NEG
1695: PPUSH
1696: CALL_OW 30
1700: PPUSH
1701: LD_VAR 0 9
1705: PPUSH
1706: CALL 2764 0 3
1710: DIFF
1711: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kaia , LoadVariable ( 09c_Kaia_ID , - 1 ) , vehicles ) ;
1712: LD_ADDR_VAR 0 9
1716: PUSH
1717: LD_VAR 0 9
1721: PUSH
1722: LD_EXP 18
1726: PPUSH
1727: LD_STRING 09c_Kaia_ID
1729: PPUSH
1730: LD_INT 1
1732: NEG
1733: PPUSH
1734: CALL_OW 30
1738: PPUSH
1739: LD_VAR 0 9
1743: PPUSH
1744: CALL 2764 0 3
1748: DIFF
1749: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Sophia , LoadVariable ( 09c_Sophia_ID , - 1 ) , vehicles ) ;
1750: LD_ADDR_VAR 0 9
1754: PUSH
1755: LD_VAR 0 9
1759: PUSH
1760: LD_EXP 19
1764: PPUSH
1765: LD_STRING 09c_Sophia_ID
1767: PPUSH
1768: LD_INT 1
1770: NEG
1771: PPUSH
1772: CALL_OW 30
1776: PPUSH
1777: LD_VAR 0 9
1781: PPUSH
1782: CALL 2764 0 3
1786: DIFF
1787: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Markov , LoadVariable ( 09c_Markov_ID , - 1 ) , vehicles ) ;
1788: LD_ADDR_VAR 0 9
1792: PUSH
1793: LD_VAR 0 9
1797: PUSH
1798: LD_EXP 20
1802: PPUSH
1803: LD_STRING 09c_Markov_ID
1805: PPUSH
1806: LD_INT 1
1808: NEG
1809: PPUSH
1810: CALL_OW 30
1814: PPUSH
1815: LD_VAR 0 9
1819: PPUSH
1820: CALL 2764 0 3
1824: DIFF
1825: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Olaf , LoadVariable ( 09c_Olaf_ID , - 1 ) , vehicles ) ;
1826: LD_ADDR_VAR 0 9
1830: PUSH
1831: LD_VAR 0 9
1835: PUSH
1836: LD_EXP 21
1840: PPUSH
1841: LD_STRING 09c_Olaf_ID
1843: PPUSH
1844: LD_INT 1
1846: NEG
1847: PPUSH
1848: CALL_OW 30
1852: PPUSH
1853: LD_VAR 0 9
1857: PPUSH
1858: CALL 2764 0 3
1862: DIFF
1863: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Kurt , LoadVariable ( 09c_Kurt_ID , - 1 ) , vehicles ) ;
1864: LD_ADDR_VAR 0 9
1868: PUSH
1869: LD_VAR 0 9
1873: PUSH
1874: LD_EXP 22
1878: PPUSH
1879: LD_STRING 09c_Kurt_ID
1881: PPUSH
1882: LD_INT 1
1884: NEG
1885: PPUSH
1886: CALL_OW 30
1890: PPUSH
1891: LD_VAR 0 9
1895: PPUSH
1896: CALL 2764 0 3
1900: DIFF
1901: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Aviradze , LoadVariable ( 09c_Aviradze_ID , - 1 ) , vehicles ) ;
1902: LD_ADDR_VAR 0 9
1906: PUSH
1907: LD_VAR 0 9
1911: PUSH
1912: LD_EXP 23
1916: PPUSH
1917: LD_STRING 09c_Aviradze_ID
1919: PPUSH
1920: LD_INT 1
1922: NEG
1923: PPUSH
1924: CALL_OW 30
1928: PPUSH
1929: LD_VAR 0 9
1933: PPUSH
1934: CALL 2764 0 3
1938: DIFF
1939: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Schulz , LoadVariable ( 09c_Schulz_ID , 34 ) , vehicles ) ;
1940: LD_ADDR_VAR 0 9
1944: PUSH
1945: LD_VAR 0 9
1949: PUSH
1950: LD_EXP 24
1954: PPUSH
1955: LD_STRING 09c_Schulz_ID
1957: PPUSH
1958: LD_INT 34
1960: PPUSH
1961: CALL_OW 30
1965: PPUSH
1966: LD_VAR 0 9
1970: PPUSH
1971: CALL 2764 0 3
1975: DIFF
1976: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Lemmy , LoadVariable ( 09c_Lemmy_ID , 35 ) , vehicles ) ;
1977: LD_ADDR_VAR 0 9
1981: PUSH
1982: LD_VAR 0 9
1986: PUSH
1987: LD_EXP 26
1991: PPUSH
1992: LD_STRING 09c_Lemmy_ID
1994: PPUSH
1995: LD_INT 35
1997: PPUSH
1998: CALL_OW 30
2002: PPUSH
2003: LD_VAR 0 9
2007: PPUSH
2008: CALL 2764 0 3
2012: DIFF
2013: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Mia , LoadVariable ( 09c_Mia_ID , 36 ) , vehicles ) ;
2014: LD_ADDR_VAR 0 9
2018: PUSH
2019: LD_VAR 0 9
2023: PUSH
2024: LD_EXP 27
2028: PPUSH
2029: LD_STRING 09c_Mia_ID
2031: PPUSH
2032: LD_INT 36
2034: PPUSH
2035: CALL_OW 30
2039: PPUSH
2040: LD_VAR 0 9
2044: PPUSH
2045: CALL 2764 0 3
2049: DIFF
2050: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Nia , LoadVariable ( 09c_Nia_ID , 37 ) , vehicles ) ;
2051: LD_ADDR_VAR 0 9
2055: PUSH
2056: LD_VAR 0 9
2060: PUSH
2061: LD_EXP 28
2065: PPUSH
2066: LD_STRING 09c_Nia_ID
2068: PPUSH
2069: LD_INT 37
2071: PPUSH
2072: CALL_OW 30
2076: PPUSH
2077: LD_VAR 0 9
2081: PPUSH
2082: CALL 2764 0 3
2086: DIFF
2087: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Jenna , LoadVariable ( 09c_Jenna_ID , 38 ) , vehicles ) ;
2088: LD_ADDR_VAR 0 9
2092: PUSH
2093: LD_VAR 0 9
2097: PUSH
2098: LD_EXP 29
2102: PPUSH
2103: LD_STRING 09c_Jenna_ID
2105: PPUSH
2106: LD_INT 38
2108: PPUSH
2109: CALL_OW 30
2113: PPUSH
2114: LD_VAR 0 9
2118: PPUSH
2119: CALL 2764 0 3
2123: DIFF
2124: ST_TO_ADDR
// vehicles := vehicles diff SpawnInto ( Basim , LoadVariable ( 09c_Basim_ID , - 1 ) , vehicles ) ;
2125: LD_ADDR_VAR 0 9
2129: PUSH
2130: LD_VAR 0 9
2134: PUSH
2135: LD_EXP 25
2139: PPUSH
2140: LD_STRING 09c_Basim_ID
2142: PPUSH
2143: LD_INT 1
2145: NEG
2146: PPUSH
2147: CALL_OW 30
2151: PPUSH
2152: LD_VAR 0 9
2156: PPUSH
2157: CALL 2764 0 3
2161: DIFF
2162: ST_TO_ADDR
// for i := 1 to schulzSecondSquad do
2163: LD_ADDR_VAR 0 2
2167: PUSH
2168: DOUBLE
2169: LD_INT 1
2171: DEC
2172: ST_TO_ADDR
2173: LD_EXP 31
2177: PUSH
2178: FOR_TO
2179: IFFALSE 2238
// vehicles := vehicles diff SpawnInto ( schulzSecondSquad [ i ] , LoadVariable ( 09c_random_ID_ & i , 38 + i ) , vehicles ) ;
2181: LD_ADDR_VAR 0 9
2185: PUSH
2186: LD_VAR 0 9
2190: PUSH
2191: LD_EXP 31
2195: PUSH
2196: LD_VAR 0 2
2200: ARRAY
2201: PPUSH
2202: LD_STRING 09c_random_ID_
2204: PUSH
2205: LD_VAR 0 2
2209: STR
2210: PPUSH
2211: LD_INT 38
2213: PUSH
2214: LD_VAR 0 2
2218: PLUS
2219: PPUSH
2220: CALL_OW 30
2224: PPUSH
2225: LD_VAR 0 9
2229: PPUSH
2230: CALL 2764 0 3
2234: DIFF
2235: ST_TO_ADDR
2236: GO 2178
2238: POP
2239: POP
// for i := 1 to heikeSecondSquad do
2240: LD_ADDR_VAR 0 2
2244: PUSH
2245: DOUBLE
2246: LD_INT 1
2248: DEC
2249: ST_TO_ADDR
2250: LD_EXP 30
2254: PUSH
2255: FOR_TO
2256: IFFALSE 2310
// vehicles := vehicles diff SpawnInto ( heikeSecondSquad [ i ] , LoadVariable ( 09c_hrandom_ID_ & i , - 1 ) , vehicles ) ;
2258: LD_ADDR_VAR 0 9
2262: PUSH
2263: LD_VAR 0 9
2267: PUSH
2268: LD_EXP 30
2272: PUSH
2273: LD_VAR 0 2
2277: ARRAY
2278: PPUSH
2279: LD_STRING 09c_hrandom_ID_
2281: PUSH
2282: LD_VAR 0 2
2286: STR
2287: PPUSH
2288: LD_INT 1
2290: NEG
2291: PPUSH
2292: CALL_OW 30
2296: PPUSH
2297: LD_VAR 0 9
2301: PPUSH
2302: CALL 2764 0 3
2306: DIFF
2307: ST_TO_ADDR
2308: GO 2255
2310: POP
2311: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
2312: LD_INT 22
2314: PUSH
2315: LD_INT 2
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: PUSH
2322: LD_INT 34
2324: PUSH
2325: LD_INT 31
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: PPUSH
2336: CALL_OW 69
2340: IFFALSE 2543
// begin for j := Count ( vehicles ) downto 1 do
2342: LD_ADDR_VAR 0 7
2346: PUSH
2347: DOUBLE
2348: LD_VAR 0 9
2352: PPUSH
2353: CALL 12811 0 1
2357: INC
2358: ST_TO_ADDR
2359: LD_INT 1
2361: PUSH
2362: FOR_DOWNTO
2363: IFFALSE 2541
// begin i := vehicles [ j ] ;
2365: LD_ADDR_VAR 0 2
2369: PUSH
2370: LD_VAR 0 9
2374: PUSH
2375: LD_VAR 0 7
2379: ARRAY
2380: ST_TO_ADDR
// if i [ 3 ] = control_remote then
2381: LD_VAR 0 2
2385: PUSH
2386: LD_INT 3
2388: ARRAY
2389: PUSH
2390: LD_INT 2
2392: EQUAL
2393: IFFALSE 2539
// begin uc_side := 2 ;
2395: LD_ADDR_OWVAR 20
2399: PUSH
2400: LD_INT 2
2402: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2403: LD_ADDR_OWVAR 21
2407: PUSH
2408: LD_VAR 0 2
2412: PUSH
2413: LD_INT 5
2415: ARRAY
2416: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2417: LD_VAR 0 2
2421: PUSH
2422: LD_INT 1
2424: ARRAY
2425: PPUSH
2426: LD_VAR 0 2
2430: PUSH
2431: LD_INT 2
2433: ARRAY
2434: PPUSH
2435: LD_VAR 0 2
2439: PUSH
2440: LD_INT 3
2442: ARRAY
2443: PPUSH
2444: LD_VAR 0 2
2448: PUSH
2449: LD_INT 4
2451: ARRAY
2452: PPUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_INT 6
2460: ARRAY
2461: PPUSH
2462: CALL 15692 0 5
// veh := CreateVehicle ;
2466: LD_ADDR_VAR 0 8
2470: PUSH
2471: CALL_OW 45
2475: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2476: LD_VAR 0 8
2480: PPUSH
2481: LD_INT 5
2483: PPUSH
2484: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
2488: LD_VAR 0 8
2492: PPUSH
2493: LD_INT 7
2495: PPUSH
2496: LD_INT 0
2498: PPUSH
2499: CALL_OW 49
// vehicles := Delete ( vehicles , j ) ;
2503: LD_ADDR_VAR 0 9
2507: PUSH
2508: LD_VAR 0 9
2512: PPUSH
2513: LD_VAR 0 7
2517: PPUSH
2518: CALL_OW 3
2522: ST_TO_ADDR
// Connect ( veh ) ;
2523: LD_VAR 0 8
2527: PPUSH
2528: CALL 18783 0 1
// wait ( 0 0$0.3 ) ;
2532: LD_INT 10
2534: PPUSH
2535: CALL_OW 67
// end ; end ;
2539: GO 2362
2541: POP
2542: POP
// end ; vehicles := LoadVariable ( 09_otherVehicles , [ ] ) ;
2543: LD_ADDR_VAR 0 9
2547: PUSH
2548: LD_STRING 09_otherVehicles
2550: PPUSH
2551: EMPTY
2552: PPUSH
2553: CALL_OW 30
2557: ST_TO_ADDR
// if vehicles then
2558: LD_VAR 0 9
2562: IFFALSE 2759
// begin for i in vehicles do
2564: LD_ADDR_VAR 0 2
2568: PUSH
2569: LD_VAR 0 9
2573: PUSH
2574: FOR_IN
2575: IFFALSE 2757
// begin uc_side := 2 ;
2577: LD_ADDR_OWVAR 20
2581: PUSH
2582: LD_INT 2
2584: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2585: LD_ADDR_OWVAR 21
2589: PUSH
2590: LD_VAR 0 2
2594: PUSH
2595: LD_INT 5
2597: ARRAY
2598: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2599: LD_VAR 0 2
2603: PUSH
2604: LD_INT 1
2606: ARRAY
2607: PPUSH
2608: LD_VAR 0 2
2612: PUSH
2613: LD_INT 2
2615: ARRAY
2616: PPUSH
2617: LD_VAR 0 2
2621: PUSH
2622: LD_INT 3
2624: ARRAY
2625: PPUSH
2626: LD_VAR 0 2
2630: PUSH
2631: LD_INT 4
2633: ARRAY
2634: PPUSH
2635: LD_VAR 0 2
2639: PUSH
2640: LD_INT 6
2642: ARRAY
2643: PPUSH
2644: CALL 15692 0 5
// veh := CreateVehicle ;
2648: LD_ADDR_VAR 0 8
2652: PUSH
2653: CALL_OW 45
2657: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2658: LD_VAR 0 8
2662: PPUSH
2663: LD_INT 5
2665: PPUSH
2666: CALL_OW 233
// if i [ 7 ] then
2670: LD_VAR 0 2
2674: PUSH
2675: LD_INT 7
2677: ARRAY
2678: IFFALSE 2698
// SetMark ( veh , i [ 7 ] ) ;
2680: LD_VAR 0 8
2684: PPUSH
2685: LD_VAR 0 2
2689: PUSH
2690: LD_INT 7
2692: ARRAY
2693: PPUSH
2694: CALL_OW 242
// PlaceUnitXYD ( veh , i [ 8 ] , i [ 9 ] , i [ 10 ] , false ) ;
2698: LD_VAR 0 8
2702: PPUSH
2703: LD_VAR 0 2
2707: PUSH
2708: LD_INT 8
2710: ARRAY
2711: PPUSH
2712: LD_VAR 0 2
2716: PUSH
2717: LD_INT 9
2719: ARRAY
2720: PPUSH
2721: LD_VAR 0 2
2725: PUSH
2726: LD_INT 10
2728: ARRAY
2729: PPUSH
2730: LD_INT 0
2732: PPUSH
2733: CALL 50284 0 5
// SetFuel ( veh , i [ 6 ] ) ;
2737: LD_VAR 0 8
2741: PPUSH
2742: LD_VAR 0 2
2746: PUSH
2747: LD_INT 6
2749: ARRAY
2750: PPUSH
2751: CALL_OW 240
// end ;
2755: GO 2574
2757: POP
2758: POP
// end ; end ;
2759: LD_VAR 0 1
2763: RET
// function SpawnInto ( unit , number , vehicles ) ; var i , veh ; begin
2764: LD_INT 0
2766: PPUSH
2767: PPUSH
2768: PPUSH
// for i in vehicles do
2769: LD_ADDR_VAR 0 5
2773: PUSH
2774: LD_VAR 0 3
2778: PUSH
2779: FOR_IN
2780: IFFALSE 3016
// if i [ 8 ] = number and i [ 3 ] = control_manual then
2782: LD_VAR 0 5
2786: PUSH
2787: LD_INT 8
2789: ARRAY
2790: PUSH
2791: LD_VAR 0 2
2795: EQUAL
2796: PUSH
2797: LD_VAR 0 5
2801: PUSH
2802: LD_INT 3
2804: ARRAY
2805: PUSH
2806: LD_INT 1
2808: EQUAL
2809: AND
2810: IFFALSE 3014
// begin result := i ;
2812: LD_ADDR_VAR 0 4
2816: PUSH
2817: LD_VAR 0 5
2821: ST_TO_ADDR
// uc_side := 2 ;
2822: LD_ADDR_OWVAR 20
2826: PUSH
2827: LD_INT 2
2829: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2830: LD_ADDR_OWVAR 21
2834: PUSH
2835: LD_VAR 0 5
2839: PUSH
2840: LD_INT 5
2842: ARRAY
2843: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
2844: LD_VAR 0 5
2848: PUSH
2849: LD_INT 1
2851: ARRAY
2852: PPUSH
2853: LD_VAR 0 5
2857: PUSH
2858: LD_INT 2
2860: ARRAY
2861: PPUSH
2862: LD_VAR 0 5
2866: PUSH
2867: LD_INT 3
2869: ARRAY
2870: PPUSH
2871: LD_VAR 0 5
2875: PUSH
2876: LD_INT 4
2878: ARRAY
2879: PPUSH
2880: LD_VAR 0 5
2884: PUSH
2885: LD_INT 6
2887: ARRAY
2888: PPUSH
2889: CALL 15692 0 5
// veh := CreateVehicle ;
2893: LD_ADDR_VAR 0 6
2897: PUSH
2898: CALL_OW 45
2902: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2903: LD_VAR 0 6
2907: PPUSH
2908: LD_INT 5
2910: PPUSH
2911: CALL_OW 233
// if i [ 7 ] < 0 then
2915: LD_VAR 0 5
2919: PUSH
2920: LD_INT 7
2922: ARRAY
2923: PUSH
2924: LD_INT 0
2926: LESS
2927: IFFALSE 2947
// SetMark ( veh , i [ 7 ] ) ;
2929: LD_VAR 0 6
2933: PPUSH
2934: LD_VAR 0 5
2938: PUSH
2939: LD_INT 7
2941: ARRAY
2942: PPUSH
2943: CALL_OW 242
// if not PlaceUnitInArea ( veh , startArea , false ) then
2947: LD_VAR 0 6
2951: PPUSH
2952: LD_INT 7
2954: PPUSH
2955: LD_INT 0
2957: PPUSH
2958: CALL 47062 0 3
2962: NOT
2963: IFFALSE 2996
// begin SetDir ( unit , 5 ) ;
2965: LD_VAR 0 1
2969: PPUSH
2970: LD_INT 5
2972: PPUSH
2973: CALL_OW 233
// PlaceUnitArea ( unit , startInfArea , false ) ;
2977: LD_VAR 0 1
2981: PPUSH
2982: LD_INT 8
2984: PPUSH
2985: LD_INT 0
2987: PPUSH
2988: CALL_OW 49
// exit ;
2992: POP
2993: POP
2994: GO 3045
// end ; PlaceHumanInUnit ( unit , veh ) ;
2996: LD_VAR 0 1
3000: PPUSH
3001: LD_VAR 0 6
3005: PPUSH
3006: CALL_OW 52
// exit ;
3010: POP
3011: POP
3012: GO 3045
// end ;
3014: GO 2779
3016: POP
3017: POP
// SetDir ( unit , 5 ) ;
3018: LD_VAR 0 1
3022: PPUSH
3023: LD_INT 5
3025: PPUSH
3026: CALL_OW 233
// PlaceUnitArea ( unit , startInfArea , false ) ;
3030: LD_VAR 0 1
3034: PPUSH
3035: LD_INT 8
3037: PPUSH
3038: LD_INT 0
3040: PPUSH
3041: CALL_OW 49
// end ; end_of_file
3045: LD_VAR 0 4
3049: RET
// export function PrepareRussian ; begin
3050: LD_INT 0
3052: PPUSH
// SetTech ( tech_Tech1 , 3 , state_researched ) ;
3053: LD_INT 48
3055: PPUSH
3056: LD_INT 3
3058: PPUSH
3059: LD_INT 2
3061: PPUSH
3062: CALL_OW 322
// SetTech ( tech_Tech2 , 3 , state_researched ) ;
3066: LD_INT 49
3068: PPUSH
3069: LD_INT 3
3071: PPUSH
3072: LD_INT 2
3074: PPUSH
3075: CALL_OW 322
// SetTech ( tech_Tech3 , 3 , state_researched ) ;
3079: LD_INT 50
3081: PPUSH
3082: LD_INT 3
3084: PPUSH
3085: LD_INT 2
3087: PPUSH
3088: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
3092: LD_INT 51
3094: PPUSH
3095: LD_INT 3
3097: PPUSH
3098: LD_INT 2
3100: PPUSH
3101: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
3105: LD_INT 57
3107: PPUSH
3108: LD_INT 3
3110: PPUSH
3111: LD_INT 2
3113: PPUSH
3114: CALL_OW 322
// if Difficulty >= 2 then
3118: LD_OWVAR 67
3122: PUSH
3123: LD_INT 2
3125: GREATEREQUAL
3126: IFFALSE 3167
// begin SetTech ( tech_Weap2 , 3 , state_researched ) ;
3128: LD_INT 52
3130: PPUSH
3131: LD_INT 3
3133: PPUSH
3134: LD_INT 2
3136: PPUSH
3137: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
3141: LD_INT 58
3143: PPUSH
3144: LD_INT 3
3146: PPUSH
3147: LD_INT 2
3149: PPUSH
3150: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
3154: LD_INT 63
3156: PPUSH
3157: LD_INT 3
3159: PPUSH
3160: LD_INT 2
3162: PPUSH
3163: CALL_OW 322
// end ; if Difficulty > 2 then
3167: LD_OWVAR 67
3171: PUSH
3172: LD_INT 2
3174: GREATER
3175: IFFALSE 3216
// begin SetTech ( tech_Weap3 , 3 , state_researched ) ;
3177: LD_INT 53
3179: PPUSH
3180: LD_INT 3
3182: PPUSH
3183: LD_INT 2
3185: PPUSH
3186: CALL_OW 322
// SetTech ( tech_Comp3 , 3 , state_researched ) ;
3190: LD_INT 59
3192: PPUSH
3193: LD_INT 3
3195: PPUSH
3196: LD_INT 2
3198: PPUSH
3199: CALL_OW 322
// SetTech ( tech_ST2 , 3 , state_researched ) ;
3203: LD_INT 64
3205: PPUSH
3206: LD_INT 3
3208: PPUSH
3209: LD_INT 2
3211: PPUSH
3212: CALL_OW 322
// end ; end ;
3216: LD_VAR 0 1
3220: RET
// function PrepareRussianAttack ( spot , strength ) ; var i , tmp , un , veh , skill , area , parking , dir , control ; begin
3221: LD_INT 0
3223: PPUSH
3224: PPUSH
3225: PPUSH
3226: PPUSH
3227: PPUSH
3228: PPUSH
3229: PPUSH
3230: PPUSH
3231: PPUSH
3232: PPUSH
// result := [ ] ;
3233: LD_ADDR_VAR 0 3
3237: PUSH
3238: EMPTY
3239: ST_TO_ADDR
// skill := [ 7 , 8 , 9 , 10 ] [ Difficulty ] ;
3240: LD_ADDR_VAR 0 8
3244: PUSH
3245: LD_INT 7
3247: PUSH
3248: LD_INT 8
3250: PUSH
3251: LD_INT 9
3253: PUSH
3254: LD_INT 10
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: PUSH
3263: LD_OWVAR 67
3267: ARRAY
3268: ST_TO_ADDR
// area := [ ruSpawn1Area , ruSpawn2Area , ruSpawn3Area ] [ spot ] ;
3269: LD_ADDR_VAR 0 9
3273: PUSH
3274: LD_INT 15
3276: PUSH
3277: LD_INT 17
3279: PUSH
3280: LD_INT 19
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: LIST
3287: PUSH
3288: LD_VAR 0 1
3292: ARRAY
3293: ST_TO_ADDR
// parking := [ ruGatPoint1Area , ruGatPoint2Area , ruGatPoint3Area ] [ spot ] ;
3294: LD_ADDR_VAR 0 10
3298: PUSH
3299: LD_INT 16
3301: PUSH
3302: LD_INT 18
3304: PUSH
3305: LD_INT 20
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: LIST
3312: PUSH
3313: LD_VAR 0 1
3317: ARRAY
3318: ST_TO_ADDR
// dir := [ 5 , 0 , 2 ] [ spot ] ;
3319: LD_ADDR_VAR 0 11
3323: PUSH
3324: LD_INT 5
3326: PUSH
3327: LD_INT 0
3329: PUSH
3330: LD_INT 2
3332: PUSH
3333: EMPTY
3334: LIST
3335: LIST
3336: LIST
3337: PUSH
3338: LD_VAR 0 1
3342: ARRAY
3343: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 3 ] ] ) then
3344: LD_VAR 0 9
3348: PPUSH
3349: LD_INT 2
3351: PUSH
3352: LD_INT 22
3354: PUSH
3355: LD_INT 0
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: PUSH
3362: LD_INT 22
3364: PUSH
3365: LD_INT 3
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: PUSH
3372: EMPTY
3373: LIST
3374: LIST
3375: LIST
3376: PPUSH
3377: CALL_OW 70
3381: IFFALSE 3442
// for i in FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 3 ] ] ) do
3383: LD_ADDR_VAR 0 4
3387: PUSH
3388: LD_VAR 0 9
3392: PPUSH
3393: LD_INT 2
3395: PUSH
3396: LD_INT 22
3398: PUSH
3399: LD_INT 0
3401: PUSH
3402: EMPTY
3403: LIST
3404: LIST
3405: PUSH
3406: LD_INT 22
3408: PUSH
3409: LD_INT 3
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: PUSH
3416: EMPTY
3417: LIST
3418: LIST
3419: LIST
3420: PPUSH
3421: CALL_OW 70
3425: PUSH
3426: FOR_IN
3427: IFFALSE 3440
// RemoveUnit ( i ) ;
3429: LD_VAR 0 4
3433: PPUSH
3434: CALL_OW 64
3438: GO 3426
3440: POP
3441: POP
// if FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 2 ] ] ) then
3442: LD_VAR 0 9
3446: PPUSH
3447: LD_INT 3
3449: PUSH
3450: LD_INT 21
3452: PUSH
3453: LD_INT 1
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: PUSH
3460: EMPTY
3461: LIST
3462: LIST
3463: PUSH
3464: LD_INT 22
3466: PUSH
3467: LD_INT 2
3469: PUSH
3470: EMPTY
3471: LIST
3472: LIST
3473: PUSH
3474: EMPTY
3475: LIST
3476: LIST
3477: PPUSH
3478: CALL_OW 70
3482: IFFALSE 3546
// for i in FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 2 ] ] ) do
3484: LD_ADDR_VAR 0 4
3488: PUSH
3489: LD_VAR 0 9
3493: PPUSH
3494: LD_INT 3
3496: PUSH
3497: LD_INT 21
3499: PUSH
3500: LD_INT 1
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PUSH
3507: EMPTY
3508: LIST
3509: LIST
3510: PUSH
3511: LD_INT 22
3513: PUSH
3514: LD_INT 2
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: PPUSH
3525: CALL_OW 70
3529: PUSH
3530: FOR_IN
3531: IFFALSE 3544
// KillUnit ( i ) ;
3533: LD_VAR 0 4
3537: PPUSH
3538: CALL_OW 66
3542: GO 3530
3544: POP
3545: POP
// if FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) then
3546: LD_VAR 0 9
3550: PPUSH
3551: LD_INT 21
3553: PUSH
3554: LD_INT 1
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: PUSH
3561: LD_INT 22
3563: PUSH
3564: LD_INT 2
3566: PUSH
3567: EMPTY
3568: LIST
3569: LIST
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: PPUSH
3575: CALL_OW 70
3579: IFFALSE 3642
// for i in FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 2 ] ] ) do
3581: LD_ADDR_VAR 0 4
3585: PUSH
3586: LD_VAR 0 9
3590: PPUSH
3591: LD_INT 21
3593: PUSH
3594: LD_INT 1
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: PUSH
3601: LD_INT 22
3603: PUSH
3604: LD_INT 2
3606: PUSH
3607: EMPTY
3608: LIST
3609: LIST
3610: PUSH
3611: EMPTY
3612: LIST
3613: LIST
3614: PPUSH
3615: CALL_OW 70
3619: PUSH
3620: FOR_IN
3621: IFFALSE 3640
// ComMoveXY ( i , 91 , 56 ) ;
3623: LD_VAR 0 4
3627: PPUSH
3628: LD_INT 91
3630: PPUSH
3631: LD_INT 56
3633: PPUSH
3634: CALL_OW 111
3638: GO 3620
3640: POP
3641: POP
// repeat wait ( 0 0$1 ) ;
3642: LD_INT 35
3644: PPUSH
3645: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
3649: LD_VAR 0 9
3653: PPUSH
3654: LD_INT 50
3656: PUSH
3657: EMPTY
3658: LIST
3659: PPUSH
3660: CALL_OW 70
3664: NOT
3665: IFFALSE 3642
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] + strength do
3667: LD_ADDR_VAR 0 4
3671: PUSH
3672: DOUBLE
3673: LD_INT 1
3675: DEC
3676: ST_TO_ADDR
3677: LD_INT 5
3679: PUSH
3680: LD_INT 6
3682: PUSH
3683: LD_INT 7
3685: PUSH
3686: LD_INT 8
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: PUSH
3695: LD_OWVAR 67
3699: ARRAY
3700: PUSH
3701: LD_VAR 0 2
3705: PLUS
3706: PUSH
3707: FOR_TO
3708: IFFALSE 4025
// begin uc_side := 3 ;
3710: LD_ADDR_OWVAR 20
3714: PUSH
3715: LD_INT 3
3717: ST_TO_ADDR
// uc_nation := nation_russian ;
3718: LD_ADDR_OWVAR 21
3722: PUSH
3723: LD_INT 3
3725: ST_TO_ADDR
// control := [ control_manual , control_computer , control_computer ] [ rand ( 1 , 3 ) ] ;
3726: LD_ADDR_VAR 0 12
3730: PUSH
3731: LD_INT 1
3733: PUSH
3734: LD_INT 3
3736: PUSH
3737: LD_INT 3
3739: PUSH
3740: EMPTY
3741: LIST
3742: LIST
3743: LIST
3744: PUSH
3745: LD_INT 1
3747: PPUSH
3748: LD_INT 3
3750: PPUSH
3751: CALL_OW 12
3755: ARRAY
3756: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_wheeled ] [ i mod 3 + 1 ] , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control , [ ru_rocket_launcher , ru_heavy_gun , ru_gatling_gun ] [ i mod 3 + 1 ] , 100 ) ;
3757: LD_INT 22
3759: PUSH
3760: LD_INT 24
3762: PUSH
3763: LD_INT 23
3765: PUSH
3766: EMPTY
3767: LIST
3768: LIST
3769: LIST
3770: PUSH
3771: LD_VAR 0 4
3775: PUSH
3776: LD_INT 3
3778: MOD
3779: PUSH
3780: LD_INT 1
3782: PLUS
3783: ARRAY
3784: PPUSH
3785: LD_INT 3
3787: PUSH
3788: LD_INT 1
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: PUSH
3795: LD_INT 1
3797: PPUSH
3798: LD_INT 2
3800: PPUSH
3801: CALL_OW 12
3805: ARRAY
3806: PPUSH
3807: LD_VAR 0 12
3811: PPUSH
3812: LD_INT 45
3814: PUSH
3815: LD_INT 46
3817: PUSH
3818: LD_INT 43
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: LIST
3825: PUSH
3826: LD_VAR 0 4
3830: PUSH
3831: LD_INT 3
3833: MOD
3834: PUSH
3835: LD_INT 1
3837: PLUS
3838: ARRAY
3839: PPUSH
3840: LD_INT 100
3842: PPUSH
3843: CALL 15692 0 5
// veh := CreateVehicle ;
3847: LD_ADDR_VAR 0 7
3851: PUSH
3852: CALL_OW 45
3856: ST_TO_ADDR
// SetDir ( veh , dir ) ;
3857: LD_VAR 0 7
3861: PPUSH
3862: LD_VAR 0 11
3866: PPUSH
3867: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
3871: LD_VAR 0 7
3875: PPUSH
3876: LD_VAR 0 9
3880: PPUSH
3881: LD_INT 0
3883: PPUSH
3884: CALL_OW 49
// if control = control_manual then
3888: LD_VAR 0 12
3892: PUSH
3893: LD_INT 1
3895: EQUAL
3896: IFFALSE 3964
// begin uc_side := 3 ;
3898: LD_ADDR_OWVAR 20
3902: PUSH
3903: LD_INT 3
3905: ST_TO_ADDR
// uc_nation := nation_russian ;
3906: LD_ADDR_OWVAR 21
3910: PUSH
3911: LD_INT 3
3913: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
3914: LD_INT 0
3916: PPUSH
3917: LD_VAR 0 8
3921: PPUSH
3922: CALL_OW 383
// un := CreateHuman ;
3926: LD_ADDR_VAR 0 6
3930: PUSH
3931: CALL_OW 44
3935: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3936: LD_VAR 0 6
3940: PPUSH
3941: LD_VAR 0 7
3945: PPUSH
3946: CALL_OW 52
// SetTag ( un , spot ) ;
3950: LD_VAR 0 6
3954: PPUSH
3955: LD_VAR 0 1
3959: PPUSH
3960: CALL_OW 109
// end ; repeat ComMoveToArea ( veh , parking ) ;
3964: LD_VAR 0 7
3968: PPUSH
3969: LD_VAR 0 10
3973: PPUSH
3974: CALL_OW 113
// wait ( 0 0$3 ) ;
3978: LD_INT 105
3980: PPUSH
3981: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
3985: LD_VAR 0 9
3989: PPUSH
3990: LD_INT 50
3992: PUSH
3993: EMPTY
3994: LIST
3995: PPUSH
3996: CALL_OW 70
4000: NOT
4001: IFFALSE 3964
// result := Join ( result , veh ) ;
4003: LD_ADDR_VAR 0 3
4007: PUSH
4008: LD_VAR 0 3
4012: PPUSH
4013: LD_VAR 0 7
4017: PPUSH
4018: CALL 48144 0 2
4022: ST_TO_ADDR
// end ;
4023: GO 3707
4025: POP
4026: POP
// for i := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] + strength do
4027: LD_ADDR_VAR 0 4
4031: PUSH
4032: DOUBLE
4033: LD_INT 1
4035: DEC
4036: ST_TO_ADDR
4037: LD_INT 2
4039: PUSH
4040: LD_INT 2
4042: PUSH
4043: LD_INT 3
4045: PUSH
4046: LD_INT 3
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: PUSH
4055: LD_OWVAR 67
4059: ARRAY
4060: PUSH
4061: LD_VAR 0 2
4065: PLUS
4066: PUSH
4067: FOR_TO
4068: IFFALSE 4238
// begin uc_side := 3 ;
4070: LD_ADDR_OWVAR 20
4074: PUSH
4075: LD_INT 3
4077: ST_TO_ADDR
// uc_nation := nation_russian ;
4078: LD_ADDR_OWVAR 21
4082: PUSH
4083: LD_INT 3
4085: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
4086: LD_INT 0
4088: PPUSH
4089: LD_VAR 0 8
4093: PPUSH
4094: CALL_OW 381
// un := CreateHuman ;
4098: LD_ADDR_VAR 0 6
4102: PUSH
4103: CALL_OW 44
4107: ST_TO_ADDR
// if Prob ( [ 30 , 40 , 50 , 50 ] [ Difficulty ] ) then
4108: LD_INT 30
4110: PUSH
4111: LD_INT 40
4113: PUSH
4114: LD_INT 50
4116: PUSH
4117: LD_INT 50
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: LIST
4124: LIST
4125: PUSH
4126: LD_OWVAR 67
4130: ARRAY
4131: PPUSH
4132: CALL_OW 13
4136: IFFALSE 4150
// SetClass ( un , class_bazooker ) ;
4138: LD_VAR 0 6
4142: PPUSH
4143: LD_INT 9
4145: PPUSH
4146: CALL_OW 336
// SetDir ( un , dir ) ;
4150: LD_VAR 0 6
4154: PPUSH
4155: LD_VAR 0 11
4159: PPUSH
4160: CALL_OW 233
// SetTag ( un , spot ) ;
4164: LD_VAR 0 6
4168: PPUSH
4169: LD_VAR 0 1
4173: PPUSH
4174: CALL_OW 109
// PlaceUnitArea ( un , area , false ) ;
4178: LD_VAR 0 6
4182: PPUSH
4183: LD_VAR 0 9
4187: PPUSH
4188: LD_INT 0
4190: PPUSH
4191: CALL_OW 49
// ComMoveToArea ( un , parking ) ;
4195: LD_VAR 0 6
4199: PPUSH
4200: LD_VAR 0 10
4204: PPUSH
4205: CALL_OW 113
// wait ( 0 0$1 ) ;
4209: LD_INT 35
4211: PPUSH
4212: CALL_OW 67
// result := Join ( result , un ) ;
4216: LD_ADDR_VAR 0 3
4220: PUSH
4221: LD_VAR 0 3
4225: PPUSH
4226: LD_VAR 0 6
4230: PPUSH
4231: CALL 48144 0 2
4235: ST_TO_ADDR
// end ;
4236: GO 4067
4238: POP
4239: POP
// end ;
4240: LD_VAR 0 3
4244: RET
// function PrepareRussianExtraInfantry ; var i , un ; begin
4245: LD_INT 0
4247: PPUSH
4248: PPUSH
4249: PPUSH
// result := [ ] ;
4250: LD_ADDR_VAR 0 1
4254: PUSH
4255: EMPTY
4256: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty + 1 ] do
4257: LD_ADDR_VAR 0 2
4261: PUSH
4262: DOUBLE
4263: LD_INT 1
4265: DEC
4266: ST_TO_ADDR
4267: LD_INT 3
4269: PUSH
4270: LD_INT 4
4272: PUSH
4273: LD_INT 5
4275: PUSH
4276: EMPTY
4277: LIST
4278: LIST
4279: LIST
4280: PUSH
4281: LD_OWVAR 67
4285: PUSH
4286: LD_INT 1
4288: PLUS
4289: ARRAY
4290: PUSH
4291: FOR_TO
4292: IFFALSE 4430
// begin uc_side := 3 ;
4294: LD_ADDR_OWVAR 20
4298: PUSH
4299: LD_INT 3
4301: ST_TO_ADDR
// uc_nation := nation_russian ;
4302: LD_ADDR_OWVAR 21
4306: PUSH
4307: LD_INT 3
4309: ST_TO_ADDR
// PrepareSoldier ( false , [ 7 , 8 , 9 ] [ Difficulty + 1 ] ) ;
4310: LD_INT 0
4312: PPUSH
4313: LD_INT 7
4315: PUSH
4316: LD_INT 8
4318: PUSH
4319: LD_INT 9
4321: PUSH
4322: EMPTY
4323: LIST
4324: LIST
4325: LIST
4326: PUSH
4327: LD_OWVAR 67
4331: PUSH
4332: LD_INT 1
4334: PLUS
4335: ARRAY
4336: PPUSH
4337: CALL_OW 381
// un := CreateHuman ;
4341: LD_ADDR_VAR 0 3
4345: PUSH
4346: CALL_OW 44
4350: ST_TO_ADDR
// if Prob ( [ 30 , 40 , 50 , 50 ] [ Difficulty ] ) then
4351: LD_INT 30
4353: PUSH
4354: LD_INT 40
4356: PUSH
4357: LD_INT 50
4359: PUSH
4360: LD_INT 50
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: PUSH
4369: LD_OWVAR 67
4373: ARRAY
4374: PPUSH
4375: CALL_OW 13
4379: IFFALSE 4393
// SetClass ( un , class_bazooker ) ;
4381: LD_VAR 0 3
4385: PPUSH
4386: LD_INT 9
4388: PPUSH
4389: CALL_OW 336
// PlaceUnitArea ( un , extraSpawnAttackArea , false ) ;
4393: LD_VAR 0 3
4397: PPUSH
4398: LD_INT 25
4400: PPUSH
4401: LD_INT 0
4403: PPUSH
4404: CALL_OW 49
// result := Join ( result , un ) ;
4408: LD_ADDR_VAR 0 1
4412: PUSH
4413: LD_VAR 0 1
4417: PPUSH
4418: LD_VAR 0 3
4422: PPUSH
4423: CALL 48144 0 2
4427: ST_TO_ADDR
// end ;
4428: GO 4291
4430: POP
4431: POP
// end ;
4432: LD_VAR 0 1
4436: RET
// function SendBulldozer ; var un ; begin
4437: LD_INT 0
4439: PPUSH
4440: PPUSH
// uc_side := 3 ;
4441: LD_ADDR_OWVAR 20
4445: PUSH
4446: LD_INT 3
4448: ST_TO_ADDR
// uc_nation := nation_russian ;
4449: LD_ADDR_OWVAR 21
4453: PUSH
4454: LD_INT 3
4456: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
4457: LD_INT 23
4459: PPUSH
4460: LD_INT 3
4462: PPUSH
4463: LD_INT 3
4465: PPUSH
4466: LD_INT 53
4468: PPUSH
4469: LD_INT 100
4471: PPUSH
4472: CALL 15692 0 5
// un := CreateVehicle ;
4476: LD_ADDR_VAR 0 2
4480: PUSH
4481: CALL_OW 45
4485: ST_TO_ADDR
// PlaceUnitXYD ( un , 7 , 8 , 1 , false ) ;
4486: LD_VAR 0 2
4490: PPUSH
4491: LD_INT 7
4493: PPUSH
4494: LD_INT 8
4496: PPUSH
4497: LD_INT 1
4499: PPUSH
4500: LD_INT 0
4502: PPUSH
4503: CALL 50284 0 5
// wait ( 0 0$1 ) ;
4507: LD_INT 35
4509: PPUSH
4510: CALL_OW 67
// CutTreeInArea ( un , cutTreeWArea ) ;
4514: LD_VAR 0 2
4518: PPUSH
4519: LD_INT 24
4521: PPUSH
4522: CALL 7332 0 2
// end ;
4526: LD_VAR 0 1
4530: RET
// every 0 0$3 trigger wave >= [ 5 , 6 , 6 , 7 ] [ Difficulty ] do
4531: LD_EXP 11
4535: PUSH
4536: LD_INT 5
4538: PUSH
4539: LD_INT 6
4541: PUSH
4542: LD_INT 6
4544: PUSH
4545: LD_INT 7
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: PUSH
4554: LD_OWVAR 67
4558: ARRAY
4559: GREATEREQUAL
4560: IFFALSE 4583
4562: GO 4564
4564: DISABLE
// begin ChangeSideFog ( 3 , 2 ) ;
4565: LD_INT 3
4567: PPUSH
4568: LD_INT 2
4570: PPUSH
4571: CALL_OW 343
// ruDefeated := true ;
4575: LD_ADDR_EXP 10
4579: PUSH
4580: LD_INT 1
4582: ST_TO_ADDR
// end ;
4583: END
// every 3 3$20 + 4 4$00 trigger wave < [ 5 , 6 , 6 , 7 ] [ Difficulty ] do var i , e , attackers , extraAttackers , spot , extraSpot , paths , enemy ;
4584: LD_EXP 11
4588: PUSH
4589: LD_INT 5
4591: PUSH
4592: LD_INT 6
4594: PUSH
4595: LD_INT 6
4597: PUSH
4598: LD_INT 7
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: PUSH
4607: LD_OWVAR 67
4611: ARRAY
4612: LESS
4613: IFFALSE 5716
4615: GO 4617
4617: DISABLE
4618: LD_INT 0
4620: PPUSH
4621: PPUSH
4622: PPUSH
4623: PPUSH
4624: PPUSH
4625: PPUSH
4626: PPUSH
4627: PPUSH
// begin enable ;
4628: ENABLE
// attackers := [ ] ;
4629: LD_ADDR_VAR 0 3
4633: PUSH
4634: EMPTY
4635: ST_TO_ADDR
// extraAttackers := [ ] ;
4636: LD_ADDR_VAR 0 4
4640: PUSH
4641: EMPTY
4642: ST_TO_ADDR
// paths := [ [ [ 176 , 152 ] , [ 157 , 122 ] , [ 146 , 89 ] , [ 125 , 46 ] ] , [ [ 87 , 141 ] , [ 80 , 120 ] , [ 66 , 95 ] , [ 51 , 69 ] , [ 36 , 40 ] , [ 47 , 31 ] , [ 60 , 28 ] ] , [ [ 21 , 17 ] , [ 35 , 30 ] , [ 49 , 31 ] ] ] ;
4643: LD_ADDR_VAR 0 7
4647: PUSH
4648: LD_INT 176
4650: PUSH
4651: LD_INT 152
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: PUSH
4658: LD_INT 157
4660: PUSH
4661: LD_INT 122
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PUSH
4668: LD_INT 146
4670: PUSH
4671: LD_INT 89
4673: PUSH
4674: EMPTY
4675: LIST
4676: LIST
4677: PUSH
4678: LD_INT 125
4680: PUSH
4681: LD_INT 46
4683: PUSH
4684: EMPTY
4685: LIST
4686: LIST
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: PUSH
4694: LD_INT 87
4696: PUSH
4697: LD_INT 141
4699: PUSH
4700: EMPTY
4701: LIST
4702: LIST
4703: PUSH
4704: LD_INT 80
4706: PUSH
4707: LD_INT 120
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: PUSH
4714: LD_INT 66
4716: PUSH
4717: LD_INT 95
4719: PUSH
4720: EMPTY
4721: LIST
4722: LIST
4723: PUSH
4724: LD_INT 51
4726: PUSH
4727: LD_INT 69
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: PUSH
4734: LD_INT 36
4736: PUSH
4737: LD_INT 40
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: PUSH
4744: LD_INT 47
4746: PUSH
4747: LD_INT 31
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: PUSH
4754: LD_INT 60
4756: PUSH
4757: LD_INT 28
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: PUSH
4773: LD_INT 21
4775: PUSH
4776: LD_INT 17
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: PUSH
4783: LD_INT 35
4785: PUSH
4786: LD_INT 30
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PUSH
4793: LD_INT 49
4795: PUSH
4796: LD_INT 31
4798: PUSH
4799: EMPTY
4800: LIST
4801: LIST
4802: PUSH
4803: EMPTY
4804: LIST
4805: LIST
4806: LIST
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: LIST
4812: ST_TO_ADDR
// wave := Inc ( wave ) ;
4813: LD_ADDR_EXP 11
4817: PUSH
4818: LD_EXP 11
4822: PPUSH
4823: CALL 49505 0 1
4827: ST_TO_ADDR
// spot := rand ( 1 , 3 ) ;
4828: LD_ADDR_VAR 0 5
4832: PUSH
4833: LD_INT 1
4835: PPUSH
4836: LD_INT 3
4838: PPUSH
4839: CALL_OW 12
4843: ST_TO_ADDR
// if wave mod 2 = 0 then
4844: LD_EXP 11
4848: PUSH
4849: LD_INT 2
4851: MOD
4852: PUSH
4853: LD_INT 0
4855: EQUAL
4856: IFFALSE 4873
// strength := Inc ( strength ) ;
4858: LD_ADDR_EXP 12
4862: PUSH
4863: LD_EXP 12
4867: PPUSH
4868: CALL 49505 0 1
4872: ST_TO_ADDR
// if Count ( ListEnvironmentArea ( cutTreeWArea ) ) then
4873: LD_INT 24
4875: PPUSH
4876: CALL_OW 353
4880: PPUSH
4881: CALL 12811 0 1
4885: IFFALSE 4891
// SendBulldozer ;
4887: CALL 4437 0 0
// attackers := PrepareRussianAttack ( spot , strength ) ;
4891: LD_ADDR_VAR 0 3
4895: PUSH
4896: LD_VAR 0 5
4900: PPUSH
4901: LD_EXP 12
4905: PPUSH
4906: CALL 3221 0 2
4910: ST_TO_ADDR
// if wave + [ 2 , 2 , 3 , 3 ] [ Difficulty ] >= [ 6 , 7 , 8 , 9 ] [ Difficulty ] then
4911: LD_EXP 11
4915: PUSH
4916: LD_INT 2
4918: PUSH
4919: LD_INT 2
4921: PUSH
4922: LD_INT 3
4924: PUSH
4925: LD_INT 3
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: PUSH
4934: LD_OWVAR 67
4938: ARRAY
4939: PLUS
4940: PUSH
4941: LD_INT 6
4943: PUSH
4944: LD_INT 7
4946: PUSH
4947: LD_INT 8
4949: PUSH
4950: LD_INT 9
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: PUSH
4959: LD_OWVAR 67
4963: ARRAY
4964: GREATEREQUAL
4965: IFFALSE 5033
// begin extraSpot := spot - 1 ;
4967: LD_ADDR_VAR 0 6
4971: PUSH
4972: LD_VAR 0 5
4976: PUSH
4977: LD_INT 1
4979: MINUS
4980: ST_TO_ADDR
// if extraSpot < 1 then
4981: LD_VAR 0 6
4985: PUSH
4986: LD_INT 1
4988: LESS
4989: IFFALSE 4999
// extraSpot := 3 ;
4991: LD_ADDR_VAR 0 6
4995: PUSH
4996: LD_INT 3
4998: ST_TO_ADDR
// extraAttackers := PrepareRussianAttack ( extraSpot , strength ) ;
4999: LD_ADDR_VAR 0 4
5003: PUSH
5004: LD_VAR 0 6
5008: PPUSH
5009: LD_EXP 12
5013: PPUSH
5014: CALL 3221 0 2
5018: ST_TO_ADDR
// if Difficulty > 1 then
5019: LD_OWVAR 67
5023: PUSH
5024: LD_INT 1
5026: GREATER
5027: IFFALSE 5033
// PrepareRussianExtraInfantry ;
5029: CALL 4245 0 0
// end ; repeat wait ( 0 0$2 ) ;
5033: LD_INT 70
5035: PPUSH
5036: CALL_OW 67
// enemy := FilterAllUnits ( [ f_side , 2 ] ) ;
5040: LD_ADDR_VAR 0 8
5044: PUSH
5045: LD_INT 22
5047: PUSH
5048: LD_INT 2
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: PPUSH
5055: CALL_OW 69
5059: ST_TO_ADDR
// for i in attackers do
5060: LD_ADDR_VAR 0 1
5064: PUSH
5065: LD_VAR 0 3
5069: PUSH
5070: FOR_IN
5071: IFFALSE 5376
// begin if not IsOk ( i ) then
5073: LD_VAR 0 1
5077: PPUSH
5078: CALL_OW 302
5082: NOT
5083: IFFALSE 5103
// begin attackers := attackers diff i ;
5085: LD_ADDR_VAR 0 3
5089: PUSH
5090: LD_VAR 0 3
5094: PUSH
5095: LD_VAR 0 1
5099: DIFF
5100: ST_TO_ADDR
// continue ;
5101: GO 5070
// end ; if GetType ( i ) = unit_vehicle then
5103: LD_VAR 0 1
5107: PPUSH
5108: CALL_OW 247
5112: PUSH
5113: LD_INT 2
5115: EQUAL
5116: IFFALSE 5140
// AgressiveMove ( i , paths [ spot ] ) else
5118: LD_VAR 0 1
5122: PPUSH
5123: LD_VAR 0 7
5127: PUSH
5128: LD_VAR 0 5
5132: ARRAY
5133: PPUSH
5134: CALL 50748 0 2
5138: GO 5374
// begin if GetClass ( i ) = class_bazooker then
5140: LD_VAR 0 1
5144: PPUSH
5145: CALL_OW 257
5149: PUSH
5150: LD_INT 9
5152: EQUAL
5153: IFFALSE 5350
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
5155: LD_VAR 0 1
5159: PPUSH
5160: LD_VAR 0 8
5164: PPUSH
5165: LD_VAR 0 1
5169: PPUSH
5170: CALL_OW 74
5174: PPUSH
5175: CALL_OW 296
5179: PUSH
5180: LD_INT 12
5182: GREATER
5183: IFFALSE 5211
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
5185: LD_VAR 0 1
5189: PPUSH
5190: LD_VAR 0 8
5194: PPUSH
5195: LD_VAR 0 1
5199: PPUSH
5200: CALL_OW 74
5204: PPUSH
5205: CALL_OW 115
5209: GO 5348
// begin e := NearestUnitToUnit ( enemy , i ) ;
5211: LD_ADDR_VAR 0 2
5215: PUSH
5216: LD_VAR 0 8
5220: PPUSH
5221: LD_VAR 0 1
5225: PPUSH
5226: CALL_OW 74
5230: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
5231: LD_INT 1
5233: PPUSH
5234: LD_INT 3
5236: PPUSH
5237: CALL_OW 12
5241: PUSH
5242: LD_INT 1
5244: DOUBLE
5245: EQUAL
5246: IFTRUE 5250
5248: GO 5267
5250: POP
// ComAttackUnit ( i , e ) ; 2 :
5251: LD_VAR 0 1
5255: PPUSH
5256: LD_VAR 0 2
5260: PPUSH
5261: CALL_OW 115
5265: GO 5348
5267: LD_INT 2
5269: DOUBLE
5270: EQUAL
5271: IFTRUE 5275
5273: GO 5307
5275: POP
// ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ; 3 :
5276: LD_VAR 0 1
5280: PPUSH
5281: LD_VAR 0 2
5285: PPUSH
5286: CALL_OW 250
5290: PPUSH
5291: LD_VAR 0 2
5295: PPUSH
5296: CALL_OW 251
5300: PPUSH
5301: CALL_OW 153
5305: GO 5348
5307: LD_INT 3
5309: DOUBLE
5310: EQUAL
5311: IFTRUE 5315
5313: GO 5347
5315: POP
// ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ; end ;
5316: LD_VAR 0 1
5320: PPUSH
5321: LD_VAR 0 2
5325: PPUSH
5326: CALL_OW 250
5330: PPUSH
5331: LD_VAR 0 2
5335: PPUSH
5336: CALL_OW 251
5340: PPUSH
5341: CALL_OW 154
5345: GO 5348
5347: POP
// end ; end else
5348: GO 5374
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5350: LD_VAR 0 1
5354: PPUSH
5355: LD_VAR 0 8
5359: PPUSH
5360: LD_VAR 0 1
5364: PPUSH
5365: CALL_OW 74
5369: PPUSH
5370: CALL_OW 115
// end ; end ;
5374: GO 5070
5376: POP
5377: POP
// if extraAttackers then
5378: LD_VAR 0 4
5382: IFFALSE 5702
// begin for i in extraAttackers do
5384: LD_ADDR_VAR 0 1
5388: PUSH
5389: LD_VAR 0 4
5393: PUSH
5394: FOR_IN
5395: IFFALSE 5700
// begin if not IsOk ( i ) then
5397: LD_VAR 0 1
5401: PPUSH
5402: CALL_OW 302
5406: NOT
5407: IFFALSE 5427
// begin extraAttackers := extraAttackers diff i ;
5409: LD_ADDR_VAR 0 4
5413: PUSH
5414: LD_VAR 0 4
5418: PUSH
5419: LD_VAR 0 1
5423: DIFF
5424: ST_TO_ADDR
// continue ;
5425: GO 5394
// end ; if GetType ( i ) = unit_vehicle then
5427: LD_VAR 0 1
5431: PPUSH
5432: CALL_OW 247
5436: PUSH
5437: LD_INT 2
5439: EQUAL
5440: IFFALSE 5464
// AgressiveMove ( i , paths [ extraSpot ] ) else
5442: LD_VAR 0 1
5446: PPUSH
5447: LD_VAR 0 7
5451: PUSH
5452: LD_VAR 0 6
5456: ARRAY
5457: PPUSH
5458: CALL 50748 0 2
5462: GO 5698
// begin if GetClass ( i ) = class_bazooker then
5464: LD_VAR 0 1
5468: PPUSH
5469: CALL_OW 257
5473: PUSH
5474: LD_INT 9
5476: EQUAL
5477: IFFALSE 5674
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
5479: LD_VAR 0 1
5483: PPUSH
5484: LD_VAR 0 8
5488: PPUSH
5489: LD_VAR 0 1
5493: PPUSH
5494: CALL_OW 74
5498: PPUSH
5499: CALL_OW 296
5503: PUSH
5504: LD_INT 12
5506: GREATER
5507: IFFALSE 5535
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
5509: LD_VAR 0 1
5513: PPUSH
5514: LD_VAR 0 8
5518: PPUSH
5519: LD_VAR 0 1
5523: PPUSH
5524: CALL_OW 74
5528: PPUSH
5529: CALL_OW 115
5533: GO 5672
// begin e := NearestUnitToUnit ( enemy , i ) ;
5535: LD_ADDR_VAR 0 2
5539: PUSH
5540: LD_VAR 0 8
5544: PPUSH
5545: LD_VAR 0 1
5549: PPUSH
5550: CALL_OW 74
5554: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
5555: LD_INT 1
5557: PPUSH
5558: LD_INT 3
5560: PPUSH
5561: CALL_OW 12
5565: PUSH
5566: LD_INT 1
5568: DOUBLE
5569: EQUAL
5570: IFTRUE 5574
5572: GO 5591
5574: POP
// ComAttackUnit ( i , e ) ; 2 :
5575: LD_VAR 0 1
5579: PPUSH
5580: LD_VAR 0 2
5584: PPUSH
5585: CALL_OW 115
5589: GO 5672
5591: LD_INT 2
5593: DOUBLE
5594: EQUAL
5595: IFTRUE 5599
5597: GO 5631
5599: POP
// ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ; 3 :
5600: LD_VAR 0 1
5604: PPUSH
5605: LD_VAR 0 2
5609: PPUSH
5610: CALL_OW 250
5614: PPUSH
5615: LD_VAR 0 2
5619: PPUSH
5620: CALL_OW 251
5624: PPUSH
5625: CALL_OW 153
5629: GO 5672
5631: LD_INT 3
5633: DOUBLE
5634: EQUAL
5635: IFTRUE 5639
5637: GO 5671
5639: POP
// ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ; end ;
5640: LD_VAR 0 1
5644: PPUSH
5645: LD_VAR 0 2
5649: PPUSH
5650: CALL_OW 250
5654: PPUSH
5655: LD_VAR 0 2
5659: PPUSH
5660: CALL_OW 251
5664: PPUSH
5665: CALL_OW 154
5669: GO 5672
5671: POP
// end ; end else
5672: GO 5698
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5674: LD_VAR 0 1
5678: PPUSH
5679: LD_VAR 0 8
5683: PPUSH
5684: LD_VAR 0 1
5688: PPUSH
5689: CALL_OW 74
5693: PPUSH
5694: CALL_OW 115
// end ; end ;
5698: GO 5394
5700: POP
5701: POP
// end ; until not attackers and not extraAttackers ;
5702: LD_VAR 0 3
5706: NOT
5707: PUSH
5708: LD_VAR 0 4
5712: NOT
5713: AND
5714: IFFALSE 5033
// end ; end_of_file
5716: PPOPN 8
5718: END
// export function LoadEnv ; var tmp , i , j , un , exist , list ; begin
5719: LD_INT 0
5721: PPUSH
5722: PPUSH
5723: PPUSH
5724: PPUSH
5725: PPUSH
5726: PPUSH
5727: PPUSH
// tmp := LoadVariable ( 09_env , [ ] ) ;
5728: LD_ADDR_VAR 0 2
5732: PUSH
5733: LD_STRING 09_env
5735: PPUSH
5736: EMPTY
5737: PPUSH
5738: CALL_OW 30
5742: ST_TO_ADDR
// if not tmp then
5743: LD_VAR 0 2
5747: NOT
5748: IFFALSE 5752
// exit ;
5750: GO 6116
// list := ListEnvironmentArea ( mapArea ) ;
5752: LD_ADDR_VAR 0 7
5756: PUSH
5757: LD_INT 4
5759: PPUSH
5760: CALL_OW 353
5764: ST_TO_ADDR
// if not list then
5765: LD_VAR 0 7
5769: NOT
5770: IFFALSE 5774
// exit ;
5772: GO 6116
// for i in list do
5774: LD_ADDR_VAR 0 3
5778: PUSH
5779: LD_VAR 0 7
5783: PUSH
5784: FOR_IN
5785: IFFALSE 5893
// begin exist := false ;
5787: LD_ADDR_VAR 0 6
5791: PUSH
5792: LD_INT 0
5794: ST_TO_ADDR
// for j in tmp do
5795: LD_ADDR_VAR 0 4
5799: PUSH
5800: LD_VAR 0 2
5804: PUSH
5805: FOR_IN
5806: IFFALSE 5860
// if i [ 1 ] = j [ 1 ] and i [ 2 ] = j [ 2 ] then
5808: LD_VAR 0 3
5812: PUSH
5813: LD_INT 1
5815: ARRAY
5816: PUSH
5817: LD_VAR 0 4
5821: PUSH
5822: LD_INT 1
5824: ARRAY
5825: EQUAL
5826: PUSH
5827: LD_VAR 0 3
5831: PUSH
5832: LD_INT 2
5834: ARRAY
5835: PUSH
5836: LD_VAR 0 4
5840: PUSH
5841: LD_INT 2
5843: ARRAY
5844: EQUAL
5845: AND
5846: IFFALSE 5858
// begin exist := true ;
5848: LD_ADDR_VAR 0 6
5852: PUSH
5853: LD_INT 1
5855: ST_TO_ADDR
// break ;
5856: GO 5860
// end ;
5858: GO 5805
5860: POP
5861: POP
// if not exist then
5862: LD_VAR 0 6
5866: NOT
5867: IFFALSE 5891
// RemoveEnvironment ( i [ 1 ] , i [ 2 ] ) ;
5869: LD_VAR 0 3
5873: PUSH
5874: LD_INT 1
5876: ARRAY
5877: PPUSH
5878: LD_VAR 0 3
5882: PUSH
5883: LD_INT 2
5885: ARRAY
5886: PPUSH
5887: CALL_OW 347
// end ;
5891: GO 5784
5893: POP
5894: POP
// tmp := LoadVariable ( 09_animals , [ ] ) ;
5895: LD_ADDR_VAR 0 2
5899: PUSH
5900: LD_STRING 09_animals
5902: PPUSH
5903: EMPTY
5904: PPUSH
5905: CALL_OW 30
5909: ST_TO_ADDR
// if not tmp then
5910: LD_VAR 0 2
5914: NOT
5915: IFFALSE 5919
// exit ;
5917: GO 6116
// InitHc_All ( ) ;
5919: CALL_OW 584
// for i in tmp do
5923: LD_ADDR_VAR 0 3
5927: PUSH
5928: LD_VAR 0 2
5932: PUSH
5933: FOR_IN
5934: IFFALSE 6051
// begin uc_side := 0 ;
5936: LD_ADDR_OWVAR 20
5940: PUSH
5941: LD_INT 0
5943: ST_TO_ADDR
// uc_nation := nation_nature ;
5944: LD_ADDR_OWVAR 21
5948: PUSH
5949: LD_INT 0
5951: ST_TO_ADDR
// hc_gallery :=  ;
5952: LD_ADDR_OWVAR 33
5956: PUSH
5957: LD_STRING 
5959: ST_TO_ADDR
// hc_name :=  ;
5960: LD_ADDR_OWVAR 26
5964: PUSH
5965: LD_STRING 
5967: ST_TO_ADDR
// hc_class := i [ 1 ] ;
5968: LD_ADDR_OWVAR 28
5972: PUSH
5973: LD_VAR 0 3
5977: PUSH
5978: LD_INT 1
5980: ARRAY
5981: ST_TO_ADDR
// un := CreateHuman ;
5982: LD_ADDR_VAR 0 5
5986: PUSH
5987: CALL_OW 44
5991: ST_TO_ADDR
// PlaceUnitXYD ( un , i [ 2 ] , i [ 3 ] , i [ 4 ] , false ) ;
5992: LD_VAR 0 5
5996: PPUSH
5997: LD_VAR 0 3
6001: PUSH
6002: LD_INT 2
6004: ARRAY
6005: PPUSH
6006: LD_VAR 0 3
6010: PUSH
6011: LD_INT 3
6013: ARRAY
6014: PPUSH
6015: LD_VAR 0 3
6019: PUSH
6020: LD_INT 4
6022: ARRAY
6023: PPUSH
6024: LD_INT 0
6026: PPUSH
6027: CALL 50284 0 5
// SetLives ( un , i [ 5 ] ) ;
6031: LD_VAR 0 5
6035: PPUSH
6036: LD_VAR 0 3
6040: PUSH
6041: LD_INT 5
6043: ARRAY
6044: PPUSH
6045: CALL_OW 234
// end ;
6049: GO 5933
6051: POP
6052: POP
// for i := 1 to [ 6 , 5 , 4 , 3 ] [ Difficulty ] do
6053: LD_ADDR_VAR 0 3
6057: PUSH
6058: DOUBLE
6059: LD_INT 1
6061: DEC
6062: ST_TO_ADDR
6063: LD_INT 6
6065: PUSH
6066: LD_INT 5
6068: PUSH
6069: LD_INT 4
6071: PUSH
6072: LD_INT 3
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: PUSH
6081: LD_OWVAR 67
6085: ARRAY
6086: PUSH
6087: FOR_TO
6088: IFFALSE 6114
// begin PrepareApeman ( 5 ) ;
6090: LD_INT 5
6092: PPUSH
6093: CALL 44425 0 1
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
6097: CALL_OW 44
6101: PPUSH
6102: LD_INT 5
6104: PPUSH
6105: LD_INT 0
6107: PPUSH
6108: CALL_OW 49
// end ;
6112: GO 6087
6114: POP
6115: POP
// end ;
6116: LD_VAR 0 1
6120: RET
// export function CreateDeposits ; var i , oil , sib ; begin
6121: LD_INT 0
6123: PPUSH
6124: PPUSH
6125: PPUSH
6126: PPUSH
// oil := [ [ 91 , 13 ] , [ 52 , 23 ] , [ 115 , 150 ] ] ;
6127: LD_ADDR_VAR 0 3
6131: PUSH
6132: LD_INT 91
6134: PUSH
6135: LD_INT 13
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: PUSH
6142: LD_INT 52
6144: PUSH
6145: LD_INT 23
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: PUSH
6152: LD_INT 115
6154: PUSH
6155: LD_INT 150
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: LIST
6166: ST_TO_ADDR
// sib := [ [ 82 , 42 ] , [ 128 , 132 ] ] ;
6167: LD_ADDR_VAR 0 4
6171: PUSH
6172: LD_INT 82
6174: PUSH
6175: LD_INT 42
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 128
6184: PUSH
6185: LD_INT 132
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: ST_TO_ADDR
// for i in oil do
6196: LD_ADDR_VAR 0 2
6200: PUSH
6201: LD_VAR 0 3
6205: PUSH
6206: FOR_IN
6207: IFFALSE 6261
// begin CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
6209: LD_VAR 0 2
6213: PUSH
6214: LD_INT 1
6216: ARRAY
6217: PPUSH
6218: LD_VAR 0 2
6222: PUSH
6223: LD_INT 2
6225: ARRAY
6226: PPUSH
6227: LD_INT 2
6229: PPUSH
6230: CALL_OW 62
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 2 ) ;
6234: LD_VAR 0 2
6238: PUSH
6239: LD_INT 1
6241: ARRAY
6242: PPUSH
6243: LD_VAR 0 2
6247: PUSH
6248: LD_INT 2
6250: ARRAY
6251: PPUSH
6252: LD_INT 2
6254: PPUSH
6255: CALL_OW 441
// end ;
6259: GO 6206
6261: POP
6262: POP
// for i in sib do
6263: LD_ADDR_VAR 0 2
6267: PUSH
6268: LD_VAR 0 4
6272: PUSH
6273: FOR_IN
6274: IFFALSE 6328
// begin CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
6276: LD_VAR 0 2
6280: PUSH
6281: LD_INT 1
6283: ARRAY
6284: PPUSH
6285: LD_VAR 0 2
6289: PUSH
6290: LD_INT 2
6292: ARRAY
6293: PPUSH
6294: LD_INT 3
6296: PPUSH
6297: CALL_OW 62
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 2 ) ;
6301: LD_VAR 0 2
6305: PUSH
6306: LD_INT 1
6308: ARRAY
6309: PPUSH
6310: LD_VAR 0 2
6314: PUSH
6315: LD_INT 2
6317: ARRAY
6318: PPUSH
6319: LD_INT 2
6321: PPUSH
6322: CALL_OW 441
// end ;
6326: GO 6273
6328: POP
6329: POP
// end ;
6330: LD_VAR 0 1
6334: RET
// export function LoadCam ; var i , tmp ; begin
6335: LD_INT 0
6337: PPUSH
6338: PPUSH
6339: PPUSH
// tmp := LoadVariable ( 09_cameras , [ ] ) ;
6340: LD_ADDR_VAR 0 3
6344: PUSH
6345: LD_STRING 09_cameras
6347: PPUSH
6348: EMPTY
6349: PPUSH
6350: CALL_OW 30
6354: ST_TO_ADDR
// if not tmp then
6355: LD_VAR 0 3
6359: NOT
6360: IFFALSE 6364
// exit ;
6362: GO 6406
// for i in tmp do
6364: LD_ADDR_VAR 0 2
6368: PUSH
6369: LD_VAR 0 3
6373: PUSH
6374: FOR_IN
6375: IFFALSE 6404
// HiddenCamera ( i [ 1 ] , i [ 2 ] , 2 ) ;
6377: LD_VAR 0 2
6381: PUSH
6382: LD_INT 1
6384: ARRAY
6385: PPUSH
6386: LD_VAR 0 2
6390: PUSH
6391: LD_INT 2
6393: ARRAY
6394: PPUSH
6395: LD_INT 2
6397: PPUSH
6398: CALL_OW 244
6402: GO 6374
6404: POP
6405: POP
// end ;
6406: LD_VAR 0 1
6410: RET
// export function LoadTech ; var i , tmp , default ; begin
6411: LD_INT 0
6413: PPUSH
6414: PPUSH
6415: PPUSH
6416: PPUSH
// default := [ 2 , 2 , 0 , 0 , 0 , 2 , 2 , 0 , 1 , 0 , 2 , 0 , 0 , 0 , 2 , 0 , 2 , 1 , 0 , 2 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 2 , 2 , 2 , 2 , 2 , 2 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 2 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 2 , 2 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 2 , 2 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] ;
6417: LD_ADDR_VAR 0 4
6421: PUSH
6422: LD_INT 2
6424: PUSH
6425: LD_INT 2
6427: PUSH
6428: LD_INT 0
6430: PUSH
6431: LD_INT 0
6433: PUSH
6434: LD_INT 0
6436: PUSH
6437: LD_INT 2
6439: PUSH
6440: LD_INT 2
6442: PUSH
6443: LD_INT 0
6445: PUSH
6446: LD_INT 1
6448: PUSH
6449: LD_INT 0
6451: PUSH
6452: LD_INT 2
6454: PUSH
6455: LD_INT 0
6457: PUSH
6458: LD_INT 0
6460: PUSH
6461: LD_INT 0
6463: PUSH
6464: LD_INT 2
6466: PUSH
6467: LD_INT 0
6469: PUSH
6470: LD_INT 2
6472: PUSH
6473: LD_INT 1
6475: PUSH
6476: LD_INT 0
6478: PUSH
6479: LD_INT 2
6481: PUSH
6482: LD_INT 1
6484: PUSH
6485: LD_INT 1
6487: PUSH
6488: LD_INT 0
6490: PUSH
6491: LD_INT 0
6493: PUSH
6494: LD_INT 0
6496: PUSH
6497: LD_INT 0
6499: PUSH
6500: LD_INT 0
6502: PUSH
6503: LD_INT 0
6505: PUSH
6506: LD_INT 0
6508: PUSH
6509: LD_INT 0
6511: PUSH
6512: LD_INT 0
6514: PUSH
6515: LD_INT 0
6517: PUSH
6518: LD_INT 0
6520: PUSH
6521: LD_INT 0
6523: PUSH
6524: LD_INT 2
6526: PUSH
6527: LD_INT 0
6529: PUSH
6530: LD_INT 0
6532: PUSH
6533: LD_INT 0
6535: PUSH
6536: LD_INT 1
6538: PUSH
6539: LD_INT 1
6541: PUSH
6542: LD_INT 1
6544: PUSH
6545: LD_INT 1
6547: PUSH
6548: LD_INT 0
6550: PUSH
6551: LD_INT 0
6553: PUSH
6554: LD_INT 2
6556: PUSH
6557: LD_INT 2
6559: PUSH
6560: LD_INT 2
6562: PUSH
6563: LD_INT 2
6565: PUSH
6566: LD_INT 2
6568: PUSH
6569: LD_INT 2
6571: PUSH
6572: LD_INT 1
6574: PUSH
6575: LD_INT 1
6577: PUSH
6578: LD_INT 0
6580: PUSH
6581: LD_INT 1
6583: PUSH
6584: LD_INT 0
6586: PUSH
6587: LD_INT 0
6589: PUSH
6590: LD_INT 0
6592: PUSH
6593: LD_INT 0
6595: PUSH
6596: LD_INT 0
6598: PUSH
6599: LD_INT 2
6601: PUSH
6602: LD_INT 1
6604: PUSH
6605: LD_INT 0
6607: PUSH
6608: LD_INT 0
6610: PUSH
6611: LD_INT 0
6613: PUSH
6614: LD_INT 0
6616: PUSH
6617: LD_INT 1
6619: PUSH
6620: LD_INT 0
6622: PUSH
6623: LD_INT 0
6625: PUSH
6626: LD_INT 2
6628: PUSH
6629: LD_INT 2
6631: PUSH
6632: LD_INT 0
6634: PUSH
6635: LD_INT 0
6637: PUSH
6638: LD_INT 1
6640: PUSH
6641: LD_INT 1
6643: PUSH
6644: LD_INT 1
6646: PUSH
6647: LD_INT 1
6649: PUSH
6650: LD_INT 1
6652: PUSH
6653: LD_INT 1
6655: PUSH
6656: LD_INT 1
6658: PUSH
6659: LD_INT 0
6661: PUSH
6662: LD_INT 0
6664: PUSH
6665: LD_INT 2
6667: PUSH
6668: LD_INT 2
6670: PUSH
6671: LD_INT 1
6673: PUSH
6674: LD_INT 1
6676: PUSH
6677: LD_INT 0
6679: PUSH
6680: LD_INT 0
6682: PUSH
6683: LD_INT 0
6685: PUSH
6686: LD_INT 1
6688: PUSH
6689: LD_INT 1
6691: PUSH
6692: LD_INT 1
6694: PUSH
6695: LD_INT 1
6697: PUSH
6698: LD_INT 1
6700: PUSH
6701: LD_INT 1
6703: PUSH
6704: LD_INT 1
6706: PUSH
6707: LD_INT 1
6709: PUSH
6710: LD_INT 1
6712: PUSH
6713: LD_INT 1
6715: PUSH
6716: LD_INT 1
6718: PUSH
6719: LD_INT 1
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: LIST
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: ST_TO_ADDR
// tmp := LoadVariable ( 09_tech , default ) ;
6824: LD_ADDR_VAR 0 3
6828: PUSH
6829: LD_STRING 09_tech
6831: PPUSH
6832: LD_VAR 0 4
6836: PPUSH
6837: CALL_OW 30
6841: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
6842: LD_ADDR_VAR 0 2
6846: PUSH
6847: DOUBLE
6848: LD_INT 1
6850: DEC
6851: ST_TO_ADDR
6852: LD_VAR 0 3
6856: PPUSH
6857: CALL 12811 0 1
6861: PUSH
6862: FOR_TO
6863: IFFALSE 6890
// SetTech ( i , 2 , tmp [ i ] ) ;
6865: LD_VAR 0 2
6869: PPUSH
6870: LD_INT 2
6872: PPUSH
6873: LD_VAR 0 3
6877: PUSH
6878: LD_VAR 0 2
6882: ARRAY
6883: PPUSH
6884: CALL_OW 322
6888: GO 6862
6890: POP
6891: POP
// end ;
6892: LD_VAR 0 1
6896: RET
// export function LoadBase ; var i , tmp , b , j , mat ; begin
6897: LD_INT 0
6899: PPUSH
6900: PPUSH
6901: PPUSH
6902: PPUSH
6903: PPUSH
6904: PPUSH
// tmp := LoadVariable ( 09_buildings , [ ] ) ;
6905: LD_ADDR_VAR 0 3
6909: PUSH
6910: LD_STRING 09_buildings
6912: PPUSH
6913: EMPTY
6914: PPUSH
6915: CALL_OW 30
6919: ST_TO_ADDR
// for i in tmp do
6920: LD_ADDR_VAR 0 2
6924: PUSH
6925: LD_VAR 0 3
6929: PUSH
6930: FOR_IN
6931: IFFALSE 7325
// begin uc_side := 2 ;
6933: LD_ADDR_OWVAR 20
6937: PUSH
6938: LD_INT 2
6940: ST_TO_ADDR
// uc_nation := nation_arabian ;
6941: LD_ADDR_OWVAR 21
6945: PUSH
6946: LD_INT 2
6948: ST_TO_ADDR
// bc_type := i [ 1 ] ;
6949: LD_ADDR_OWVAR 42
6953: PUSH
6954: LD_VAR 0 2
6958: PUSH
6959: LD_INT 1
6961: ARRAY
6962: ST_TO_ADDR
// bc_level := i [ 5 ] ;
6963: LD_ADDR_OWVAR 43
6967: PUSH
6968: LD_VAR 0 2
6972: PUSH
6973: LD_INT 5
6975: ARRAY
6976: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
6977: LD_ADDR_OWVAR 44
6981: PUSH
6982: LD_INT 9
6984: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
6985: LD_ADDR_OWVAR 45
6989: PUSH
6990: LD_INT 9
6992: ST_TO_ADDR
// if i [ 7 ] then
6993: LD_VAR 0 2
6997: PUSH
6998: LD_INT 7
7000: ARRAY
7001: IFFALSE 7041
// begin bc_kind1 := i [ 7 ] ;
7003: LD_ADDR_OWVAR 44
7007: PUSH
7008: LD_VAR 0 2
7012: PUSH
7013: LD_INT 7
7015: ARRAY
7016: ST_TO_ADDR
// if i [ 8 ] then
7017: LD_VAR 0 2
7021: PUSH
7022: LD_INT 8
7024: ARRAY
7025: IFFALSE 7041
// bc_kind2 := i [ 8 ] ;
7027: LD_ADDR_OWVAR 45
7031: PUSH
7032: LD_VAR 0 2
7036: PUSH
7037: LD_INT 8
7039: ARRAY
7040: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
7041: LD_ADDR_VAR 0 4
7045: PUSH
7046: LD_VAR 0 2
7050: PUSH
7051: LD_INT 2
7053: ARRAY
7054: PPUSH
7055: LD_VAR 0 2
7059: PUSH
7060: LD_INT 3
7062: ARRAY
7063: PPUSH
7064: LD_VAR 0 2
7068: PUSH
7069: LD_INT 4
7071: ARRAY
7072: PPUSH
7073: CALL_OW 47
7077: ST_TO_ADDR
// if i [ 8 ] then
7078: LD_VAR 0 2
7082: PUSH
7083: LD_INT 8
7085: ARRAY
7086: IFFALSE 7106
// PlaceWeaponTurret ( b , i [ 8 ] ) ;
7088: LD_VAR 0 4
7092: PPUSH
7093: LD_VAR 0 2
7097: PUSH
7098: LD_INT 8
7100: ARRAY
7101: PPUSH
7102: CALL_OW 431
// if i [ 1 ] in [ b_depot , b_warehouse ] then
7106: LD_VAR 0 2
7110: PUSH
7111: LD_INT 1
7113: ARRAY
7114: PUSH
7115: LD_INT 0
7117: PUSH
7118: LD_INT 1
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: IN
7125: IFFALSE 7323
// begin mat := LoadVariable ( 09_materials , [ [ 100 , 50 , 30 ] ] ) ;
7127: LD_ADDR_VAR 0 6
7131: PUSH
7132: LD_STRING 09_materials
7134: PPUSH
7135: LD_INT 100
7137: PUSH
7138: LD_INT 50
7140: PUSH
7141: LD_INT 30
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: LIST
7148: PUSH
7149: EMPTY
7150: LIST
7151: PPUSH
7152: CALL_OW 30
7156: ST_TO_ADDR
// for j := 1 to 3 do
7157: LD_ADDR_VAR 0 5
7161: PUSH
7162: DOUBLE
7163: LD_INT 1
7165: DEC
7166: ST_TO_ADDR
7167: LD_INT 3
7169: PUSH
7170: FOR_TO
7171: IFFALSE 7321
// if mat [ 1 ] [ j ] then
7173: LD_VAR 0 6
7177: PUSH
7178: LD_INT 1
7180: ARRAY
7181: PUSH
7182: LD_VAR 0 5
7186: ARRAY
7187: IFFALSE 7319
// if j > 1 then
7189: LD_VAR 0 5
7193: PUSH
7194: LD_INT 1
7196: GREATER
7197: IFFALSE 7260
// SetResourceType ( GetBase ( b ) , j , mat [ 1 ] [ j ] + [ 35 , 25 , 20 , 10 ] [ Difficulty ] ) else
7199: LD_VAR 0 4
7203: PPUSH
7204: CALL_OW 274
7208: PPUSH
7209: LD_VAR 0 5
7213: PPUSH
7214: LD_VAR 0 6
7218: PUSH
7219: LD_INT 1
7221: ARRAY
7222: PUSH
7223: LD_VAR 0 5
7227: ARRAY
7228: PUSH
7229: LD_INT 35
7231: PUSH
7232: LD_INT 25
7234: PUSH
7235: LD_INT 20
7237: PUSH
7238: LD_INT 10
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: PUSH
7247: LD_OWVAR 67
7251: ARRAY
7252: PLUS
7253: PPUSH
7254: CALL_OW 277
7258: GO 7319
// SetResourceType ( GetBase ( b ) , j , mat [ 1 ] [ j ] + [ 350 , 250 , 150 , 100 ] [ Difficulty ] ) ;
7260: LD_VAR 0 4
7264: PPUSH
7265: CALL_OW 274
7269: PPUSH
7270: LD_VAR 0 5
7274: PPUSH
7275: LD_VAR 0 6
7279: PUSH
7280: LD_INT 1
7282: ARRAY
7283: PUSH
7284: LD_VAR 0 5
7288: ARRAY
7289: PUSH
7290: LD_INT 350
7292: PUSH
7293: LD_INT 250
7295: PUSH
7296: LD_INT 150
7298: PUSH
7299: LD_INT 100
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: PUSH
7308: LD_OWVAR 67
7312: ARRAY
7313: PLUS
7314: PPUSH
7315: CALL_OW 277
7319: GO 7170
7321: POP
7322: POP
// end ; end ;
7323: GO 6930
7325: POP
7326: POP
// end ;
7327: LD_VAR 0 1
7331: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
7332: LD_INT 0
7334: PPUSH
7335: PPUSH
// area = ListEnvironmentArea ( area ) ;
7336: LD_ADDR_VAR 0 2
7340: PUSH
7341: LD_VAR 0 2
7345: PPUSH
7346: CALL_OW 353
7350: ST_TO_ADDR
// if bulldozer > 0 then
7351: LD_VAR 0 1
7355: PUSH
7356: LD_INT 0
7358: GREATER
7359: IFFALSE 7470
// for i = area downto 1 do
7361: LD_ADDR_VAR 0 4
7365: PUSH
7366: DOUBLE
7367: LD_VAR 0 2
7371: INC
7372: ST_TO_ADDR
7373: LD_INT 1
7375: PUSH
7376: FOR_DOWNTO
7377: IFFALSE 7468
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
7379: LD_VAR 0 2
7383: PUSH
7384: LD_VAR 0 4
7388: ARRAY
7389: PUSH
7390: LD_INT 1
7392: ARRAY
7393: PPUSH
7394: LD_VAR 0 2
7398: PUSH
7399: LD_VAR 0 4
7403: ARRAY
7404: PUSH
7405: LD_INT 2
7407: ARRAY
7408: PPUSH
7409: CALL_OW 351
7413: IFFALSE 7466
// if not HasTask ( bulldozer ) then
7415: LD_VAR 0 1
7419: PPUSH
7420: CALL_OW 314
7424: NOT
7425: IFFALSE 7466
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
7427: LD_VAR 0 1
7431: PPUSH
7432: LD_VAR 0 2
7436: PUSH
7437: LD_VAR 0 4
7441: ARRAY
7442: PUSH
7443: LD_INT 1
7445: ARRAY
7446: PPUSH
7447: LD_VAR 0 2
7451: PUSH
7452: LD_VAR 0 4
7456: ARRAY
7457: PUSH
7458: LD_INT 2
7460: ARRAY
7461: PPUSH
7462: CALL_OW 171
7466: GO 7376
7468: POP
7469: POP
// end ; end_of_file
7470: LD_VAR 0 3
7474: RET
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7475: LD_VAR 0 1
7479: PPUSH
7480: LD_VAR 0 2
7484: PPUSH
7485: CALL 68282 0 2
// if GetControl ( vehicle ) = control_apeman then
7489: LD_VAR 0 1
7493: PPUSH
7494: CALL_OW 263
7498: PUSH
7499: LD_INT 5
7501: EQUAL
7502: IFFALSE 7512
// apeDriver := true ;
7504: LD_ADDR_EXP 8
7508: PUSH
7509: LD_INT 1
7511: ST_TO_ADDR
// end ;
7512: PPOPN 2
7514: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var tag , area ;
7515: LD_INT 0
7517: PPUSH
7518: PPUSH
// begin if GetSide ( driver ) = 3 then
7519: LD_VAR 0 1
7523: PPUSH
7524: CALL_OW 255
7528: PUSH
7529: LD_INT 3
7531: EQUAL
7532: IFFALSE 7669
// begin tag := GetTag ( driver ) ;
7534: LD_ADDR_VAR 0 5
7538: PUSH
7539: LD_VAR 0 1
7543: PPUSH
7544: CALL_OW 110
7548: ST_TO_ADDR
// area := [ ruSpawn1AArea , ruSpawn2AArea , ruSpawn3AArea ] [ tag ] ;
7549: LD_ADDR_VAR 0 6
7553: PUSH
7554: LD_INT 21
7556: PUSH
7557: LD_INT 22
7559: PUSH
7560: LD_INT 23
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: LIST
7567: PUSH
7568: LD_VAR 0 5
7572: ARRAY
7573: ST_TO_ADDR
// if not area then
7574: LD_VAR 0 6
7578: NOT
7579: IFFALSE 7583
// exit ;
7581: GO 7669
// repeat ComMoveToArea ( driver , area ) ;
7583: LD_VAR 0 1
7587: PPUSH
7588: LD_VAR 0 6
7592: PPUSH
7593: CALL_OW 113
// wait ( 0 0$3 ) ;
7597: LD_INT 105
7599: PPUSH
7600: CALL_OW 67
// if not IsOk ( driver ) then
7604: LD_VAR 0 1
7608: PPUSH
7609: CALL_OW 302
7613: NOT
7614: IFFALSE 7618
// exit ;
7616: GO 7669
// until IsInArea ( driver , ruSpawn1Area ) or IsInArea ( driver , ruSpawn2Area ) or IsInArea ( driver , ruSpawn3Area ) ;
7618: LD_VAR 0 1
7622: PPUSH
7623: LD_INT 15
7625: PPUSH
7626: CALL_OW 308
7630: PUSH
7631: LD_VAR 0 1
7635: PPUSH
7636: LD_INT 17
7638: PPUSH
7639: CALL_OW 308
7643: OR
7644: PUSH
7645: LD_VAR 0 1
7649: PPUSH
7650: LD_INT 19
7652: PPUSH
7653: CALL_OW 308
7657: OR
7658: IFFALSE 7583
// RemoveUnit ( driver ) ;
7660: LD_VAR 0 1
7664: PPUSH
7665: CALL_OW 64
// end ; end ;
7669: PPOPN 6
7671: END
// on ClassChanged ( un , oldClass , newClass ) do begin if newClass = class_apeman_kamikaze then
7672: LD_VAR 0 3
7676: PUSH
7677: LD_INT 17
7679: EQUAL
7680: IFFALSE 7690
// kamikazeTrained := true ;
7682: LD_ADDR_EXP 6
7686: PUSH
7687: LD_INT 1
7689: ST_TO_ADDR
// end ;
7690: PPOPN 3
7692: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7693: LD_VAR 0 1
7697: PPUSH
7698: CALL 68162 0 1
// if un = Schulz then
7702: LD_VAR 0 1
7706: PUSH
7707: LD_EXP 24
7711: EQUAL
7712: IFFALSE 7721
// YouLost ( Schulz ) ;
7714: LD_STRING Schulz
7716: PPUSH
7717: CALL_OW 104
// if un = Heike and GetSide ( un ) = 2 then
7721: LD_VAR 0 1
7725: PUSH
7726: LD_EXP 13
7730: EQUAL
7731: PUSH
7732: LD_VAR 0 1
7736: PPUSH
7737: CALL_OW 255
7741: PUSH
7742: LD_INT 2
7744: EQUAL
7745: AND
7746: IFFALSE 7755
// YouLost ( Heike ) ;
7748: LD_STRING Heike
7750: PPUSH
7751: CALL_OW 104
// end ; end_of_file
7755: PPOPN 1
7757: END
// export function Action ; begin
7758: LD_INT 0
7760: PPUSH
// InGameOn ;
7761: CALL_OW 8
// PlaceSeeing ( 1 , 1 , 2 , - 32963 ) ;
7765: LD_INT 1
7767: PPUSH
7768: LD_INT 1
7770: PPUSH
7771: LD_INT 2
7773: PPUSH
7774: LD_INT 32963
7776: NEG
7777: PPUSH
7778: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 2 ) ;
7782: LD_INT 1
7784: PPUSH
7785: LD_INT 1
7787: PPUSH
7788: LD_INT 2
7790: PPUSH
7791: CALL_OW 331
// CenterNowOnXY ( 173 , 149 ) ;
7795: LD_INT 173
7797: PPUSH
7798: LD_INT 149
7800: PPUSH
7801: CALL_OW 86
// wait ( 0 0$2 ) ;
7805: LD_INT 70
7807: PPUSH
7808: CALL_OW 67
// InGameOff ;
7812: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
7816: LD_STRING M6
7818: PPUSH
7819: CALL_OW 337
// if Count ( UnitFilter ( [ Givi , Mike , Kamil , Kaia , Markov , Olaf , Kurt ] , [ f_ok ] ) ) = Count ( [ Givi , Mike , Kamil , Kaia , Markov , Olaf , Kurt ] ) then
7823: LD_EXP 14
7827: PUSH
7828: LD_EXP 15
7832: PUSH
7833: LD_EXP 17
7837: PUSH
7838: LD_EXP 18
7842: PUSH
7843: LD_EXP 20
7847: PUSH
7848: LD_EXP 21
7852: PUSH
7853: LD_EXP 22
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: PPUSH
7867: LD_INT 50
7869: PUSH
7870: EMPTY
7871: LIST
7872: PPUSH
7873: CALL_OW 72
7877: PPUSH
7878: CALL 12811 0 1
7882: PUSH
7883: LD_EXP 14
7887: PUSH
7888: LD_EXP 15
7892: PUSH
7893: LD_EXP 17
7897: PUSH
7898: LD_EXP 18
7902: PUSH
7903: LD_EXP 20
7907: PUSH
7908: LD_EXP 21
7912: PUSH
7913: LD_EXP 22
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: PPUSH
7927: CALL 12811 0 1
7931: EQUAL
7932: IFFALSE 7941
// SetAchievement ( ACH_KNIGHT ) ;
7934: LD_STRING ACH_KNIGHT
7936: PPUSH
7937: CALL_OW 543
// SaveForQuickRestart ;
7941: CALL_OW 22
// end ;
7945: LD_VAR 0 1
7949: RET
// every 0 0$5 + 0 0$3 trigger playerInBase and IsOK ( Rolf ) and IsOk ( Heike ) and ( GetDistUnits ( Heike , Rolf ) < 9 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Heike , 7 ] , [ f_type , unit_building ] ] ) ) do
7950: LD_EXP 5
7954: PUSH
7955: LD_EXP 33
7959: PPUSH
7960: CALL_OW 302
7964: AND
7965: PUSH
7966: LD_EXP 13
7970: PPUSH
7971: CALL_OW 302
7975: AND
7976: PUSH
7977: LD_EXP 13
7981: PPUSH
7982: LD_EXP 33
7986: PPUSH
7987: CALL_OW 296
7991: PUSH
7992: LD_INT 9
7994: LESS
7995: PUSH
7996: LD_INT 22
7998: PUSH
7999: LD_INT 2
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: PUSH
8006: LD_INT 91
8008: PUSH
8009: LD_EXP 13
8013: PUSH
8014: LD_INT 7
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: LIST
8021: PUSH
8022: LD_INT 21
8024: PUSH
8025: LD_INT 3
8027: PUSH
8028: EMPTY
8029: LIST
8030: LIST
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: LIST
8036: PPUSH
8037: CALL_OW 69
8041: OR
8042: AND
8043: IFFALSE 8197
8045: GO 8047
8047: DISABLE
// begin ComExit ( Rolf ) ;
8048: LD_EXP 33
8052: PPUSH
8053: CALL 48542 0 1
// AddComMoveUnit ( Rolf , Heike ) ;
8057: LD_EXP 33
8061: PPUSH
8062: LD_EXP 13
8066: PPUSH
8067: CALL_OW 172
// InGameOn ;
8071: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
8075: LD_EXP 13
8079: PPUSH
8080: CALL_OW 87
// Say ( Rolf , DRf-Reunion-1 ) ;
8084: LD_EXP 33
8088: PPUSH
8089: LD_STRING DRf-Reunion-1
8091: PPUSH
8092: CALL_OW 88
// CenterNowOnUnits ( Rolf ) ;
8096: LD_EXP 33
8100: PPUSH
8101: CALL_OW 87
// ComTurnUnit ( Heike , Rolf ) ;
8105: LD_EXP 13
8109: PPUSH
8110: LD_EXP 33
8114: PPUSH
8115: CALL_OW 119
// ComTurnUnit ( Rolf , Heike ) ;
8119: LD_EXP 33
8123: PPUSH
8124: LD_EXP 13
8128: PPUSH
8129: CALL_OW 119
// Say ( Heike , DH-Reunion-2 ) ;
8133: LD_EXP 13
8137: PPUSH
8138: LD_STRING DH-Reunion-2
8140: PPUSH
8141: CALL_OW 88
// Say ( Rolf , DRf-Reunion-3 ) ;
8145: LD_EXP 33
8149: PPUSH
8150: LD_STRING DRf-Reunion-3
8152: PPUSH
8153: CALL_OW 88
// Say ( Heike , DH-Reunion-4 ) ;
8157: LD_EXP 13
8161: PPUSH
8162: LD_STRING DH-Reunion-4
8164: PPUSH
8165: CALL_OW 88
// Say ( Rolf , DRf-Reunion-5 ) ;
8169: LD_EXP 33
8173: PPUSH
8174: LD_STRING DRf-Reunion-5
8176: PPUSH
8177: CALL_OW 88
// Say ( Heike , DH-Reunion-6 ) ;
8181: LD_EXP 13
8185: PPUSH
8186: LD_STRING DH-Reunion-6
8188: PPUSH
8189: CALL_OW 88
// InGameOff ;
8193: CALL_OW 9
// end ;
8197: END
// every 0 0$2 trigger not playerInBase and FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Schulz , 10 ] , [ f_type , unit_building ] ] ) do
8198: LD_EXP 5
8202: NOT
8203: PUSH
8204: LD_INT 22
8206: PUSH
8207: LD_INT 2
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: PUSH
8214: LD_INT 91
8216: PUSH
8217: LD_EXP 24
8221: PUSH
8222: LD_INT 10
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: LIST
8229: PUSH
8230: LD_INT 21
8232: PUSH
8233: LD_INT 3
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: LIST
8244: PPUSH
8245: CALL_OW 69
8249: AND
8250: IFFALSE 9037
8252: GO 8254
8254: DISABLE
// begin InGameOn ;
8255: CALL_OW 8
// ComExit ( Schulz ) ;
8259: LD_EXP 24
8263: PPUSH
8264: CALL 48542 0 1
// CenterNowOnUnits ( Schulz ) ;
8268: LD_EXP 24
8272: PPUSH
8273: CALL_OW 87
// wait ( 0 0$0.3 ) ;
8277: LD_INT 10
8279: PPUSH
8280: CALL_OW 67
// DialogueOn ;
8284: CALL_OW 6
// Say ( Schulz , DL-Def-1 ) ;
8288: LD_EXP 24
8292: PPUSH
8293: LD_STRING DL-Def-1
8295: PPUSH
8296: CALL_OW 88
// Say ( Schulz , DL-Def-2 ) ;
8300: LD_EXP 24
8304: PPUSH
8305: LD_STRING DL-Def-2
8307: PPUSH
8308: CALL_OW 88
// Say ( Schulz , DL-Def-3 ) ;
8312: LD_EXP 24
8316: PPUSH
8317: LD_STRING DL-Def-3
8319: PPUSH
8320: CALL_OW 88
// if IsOk ( Basim ) and IsOk ( Aviradze ) then
8324: LD_EXP 25
8328: PPUSH
8329: CALL_OW 302
8333: PUSH
8334: LD_EXP 23
8338: PPUSH
8339: CALL_OW 302
8343: AND
8344: IFFALSE 8691
// begin Say ( Basim , DBs-Def-4 ) ;
8346: LD_EXP 25
8350: PPUSH
8351: LD_STRING DBs-Def-4
8353: PPUSH
8354: CALL_OW 88
// Say ( Basim , DBs-Def-5 ) ;
8358: LD_EXP 25
8362: PPUSH
8363: LD_STRING DBs-Def-5
8365: PPUSH
8366: CALL_OW 88
// Say ( Aviradze , DA-Def-6 ) ;
8370: LD_EXP 23
8374: PPUSH
8375: LD_STRING DA-Def-6
8377: PPUSH
8378: CALL_OW 88
// Say ( Basim , DBs-Def-7 ) ;
8382: LD_EXP 25
8386: PPUSH
8387: LD_STRING DBs-Def-7
8389: PPUSH
8390: CALL_OW 88
// Say ( Aviradze , DA-Def-8 ) ;
8394: LD_EXP 23
8398: PPUSH
8399: LD_STRING DA-Def-8
8401: PPUSH
8402: CALL_OW 88
// Say ( Aviradze , DA-Def-9 ) ;
8406: LD_EXP 23
8410: PPUSH
8411: LD_STRING DA-Def-9
8413: PPUSH
8414: CALL_OW 88
// Say ( Basim , DBs-Def-10 ) ;
8418: LD_EXP 25
8422: PPUSH
8423: LD_STRING DBs-Def-10
8425: PPUSH
8426: CALL_OW 88
// Say ( Aviradze , DA-Def-11 ) ;
8430: LD_EXP 23
8434: PPUSH
8435: LD_STRING DA-Def-11
8437: PPUSH
8438: CALL_OW 88
// if Query ( QTech ) = 1 then
8442: LD_STRING QTech
8444: PPUSH
8445: CALL_OW 97
8449: PUSH
8450: LD_INT 1
8452: EQUAL
8453: IFFALSE 8561
// begin Say ( Schulz , DL-Tech-1 ) ;
8455: LD_EXP 24
8459: PPUSH
8460: LD_STRING DL-Tech-1
8462: PPUSH
8463: CALL_OW 88
// Say ( Schulz , DL-Tech-2 ) ;
8467: LD_EXP 24
8471: PPUSH
8472: LD_STRING DL-Tech-2
8474: PPUSH
8475: CALL_OW 88
// Say ( Aviradze , DA-Tech-3 ) ;
8479: LD_EXP 23
8483: PPUSH
8484: LD_STRING DA-Tech-3
8486: PPUSH
8487: CALL_OW 88
// Say ( Kaia , DK-Tech-4 ) ;
8491: LD_EXP 18
8495: PPUSH
8496: LD_STRING DK-Tech-4
8498: PPUSH
8499: CALL_OW 88
// Say ( Kaia , DK-Tech-5 ) ;
8503: LD_EXP 18
8507: PPUSH
8508: LD_STRING DK-Tech-5
8510: PPUSH
8511: CALL_OW 88
// Say ( Basim , DBs-Tech-6 ) ;
8515: LD_EXP 25
8519: PPUSH
8520: LD_STRING DBs-Tech-6
8522: PPUSH
8523: CALL_OW 88
// Say ( Kaia , DK-Tech-7 ) ;
8527: LD_EXP 18
8531: PPUSH
8532: LD_STRING DK-Tech-7
8534: PPUSH
8535: CALL_OW 88
// SetTech ( tech_apeNeural , 2 , state_enabled ) ;
8539: LD_INT 3
8541: PPUSH
8542: LD_INT 2
8544: PPUSH
8545: LD_INT 1
8547: PPUSH
8548: CALL_OW 322
// ChangeMissionObjectives_Silent ( M7a ) ;
8552: LD_STRING M7a
8554: PPUSH
8555: CALL_OW 604
// end else
8559: GO 8689
// begin Say ( Schulz , DL-Tech-a-1 ) ;
8561: LD_EXP 24
8565: PPUSH
8566: LD_STRING DL-Tech-a-1
8568: PPUSH
8569: CALL_OW 88
// Say ( Schulz , DL-Tech-a-2 ) ;
8573: LD_EXP 24
8577: PPUSH
8578: LD_STRING DL-Tech-a-2
8580: PPUSH
8581: CALL_OW 88
// Say ( Basim , DBs-Tech-a-3 ) ;
8585: LD_EXP 25
8589: PPUSH
8590: LD_STRING DBs-Tech-a-3
8592: PPUSH
8593: CALL_OW 88
// Say ( Kaia , DK-Tech-a-4 ) ;
8597: LD_EXP 18
8601: PPUSH
8602: LD_STRING DK-Tech-a-4
8604: PPUSH
8605: CALL_OW 88
// Say ( Kaia , DK-Tech-a-5 ) ;
8609: LD_EXP 18
8613: PPUSH
8614: LD_STRING DK-Tech-a-5
8616: PPUSH
8617: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-6 ) ;
8621: LD_EXP 23
8625: PPUSH
8626: LD_STRING DA-Tech-a-6
8628: PPUSH
8629: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-7 ) ;
8633: LD_EXP 23
8637: PPUSH
8638: LD_STRING DA-Tech-a-7
8640: PPUSH
8641: CALL_OW 88
// Say ( Schulz , DL-Tech-a-8 ) ;
8645: LD_EXP 24
8649: PPUSH
8650: LD_STRING DL-Tech-a-8
8652: PPUSH
8653: CALL_OW 88
// Say ( Aviradze , DA-Tech-a-9 ) ;
8657: LD_EXP 23
8661: PPUSH
8662: LD_STRING DA-Tech-a-9
8664: PPUSH
8665: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
8669: LD_INT 4
8671: PPUSH
8672: LD_INT 2
8674: PPUSH
8675: LD_INT 1
8677: PPUSH
8678: CALL_OW 322
// ChangeMissionObjectives_Silent ( M7b ) ;
8682: LD_STRING M7b
8684: PPUSH
8685: CALL_OW 604
// end ; end else
8689: GO 8739
// if IsOk ( Basim ) then
8691: LD_EXP 25
8695: PPUSH
8696: CALL_OW 302
8700: IFFALSE 8739
// begin Say ( Basim , DBs-Def-4 ) ;
8702: LD_EXP 25
8706: PPUSH
8707: LD_STRING DBs-Def-4
8709: PPUSH
8710: CALL_OW 88
// Say ( Basim , DBs-Def-5 ) ;
8714: LD_EXP 25
8718: PPUSH
8719: LD_STRING DBs-Def-5
8721: PPUSH
8722: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
8726: LD_INT 4
8728: PPUSH
8729: LD_INT 2
8731: PPUSH
8732: LD_INT 1
8734: PPUSH
8735: CALL_OW 322
// end ; DialogueOff ;
8739: CALL_OW 7
// InGameOff ;
8743: CALL_OW 9
// ChangeMissionObjectives ( M7 ) ;
8747: LD_STRING M7
8749: PPUSH
8750: CALL_OW 337
// playerInBase := true ;
8754: LD_ADDR_EXP 5
8758: PUSH
8759: LD_INT 1
8761: ST_TO_ADDR
// wait ( 0 0$30 ) ;
8762: LD_INT 1050
8764: PPUSH
8765: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8769: LD_INT 35
8771: PPUSH
8772: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) ;
8776: LD_INT 22
8778: PUSH
8779: LD_INT 2
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: LD_INT 50
8788: PUSH
8789: EMPTY
8790: LIST
8791: PUSH
8792: LD_INT 3
8794: PUSH
8795: LD_INT 57
8797: PUSH
8798: EMPTY
8799: LIST
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: PUSH
8805: LD_INT 30
8807: PUSH
8808: LD_INT 30
8810: PUSH
8811: EMPTY
8812: LIST
8813: LIST
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: PPUSH
8821: CALL_OW 69
8825: IFFALSE 8769
// if IsOk ( Kurt ) then
8827: LD_EXP 22
8831: PPUSH
8832: CALL_OW 302
8836: IFFALSE 9024
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_siberite_mine ] ] ) [ 1 ] ) ;
8838: LD_INT 22
8840: PUSH
8841: LD_INT 2
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: PUSH
8848: LD_INT 50
8850: PUSH
8851: EMPTY
8852: LIST
8853: PUSH
8854: LD_INT 3
8856: PUSH
8857: LD_INT 57
8859: PUSH
8860: EMPTY
8861: LIST
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: PUSH
8867: LD_INT 30
8869: PUSH
8870: LD_INT 30
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: PPUSH
8883: CALL_OW 69
8887: PUSH
8888: LD_INT 1
8890: ARRAY
8891: PPUSH
8892: CALL_OW 87
// DialogueOn ;
8896: CALL_OW 6
// Say ( Kurt , DKs-Med-1 ) ;
8900: LD_EXP 22
8904: PPUSH
8905: LD_STRING DKs-Med-1
8907: PPUSH
8908: CALL_OW 88
// Say ( Kurt , DKs-Med-2 ) ;
8912: LD_EXP 22
8916: PPUSH
8917: LD_STRING DKs-Med-2
8919: PPUSH
8920: CALL_OW 88
// Say ( Schulz , DL-Med-3 ) ;
8924: LD_EXP 24
8928: PPUSH
8929: LD_STRING DL-Med-3
8931: PPUSH
8932: CALL_OW 88
// Say ( Schulz , DL-Med-4 ) ;
8936: LD_EXP 24
8940: PPUSH
8941: LD_STRING DL-Med-4
8943: PPUSH
8944: CALL_OW 88
// Say ( Kurt , DKs-Med-5 ) ;
8948: LD_EXP 22
8952: PPUSH
8953: LD_STRING DKs-Med-5
8955: PPUSH
8956: CALL_OW 88
// Say ( Kurt , DKs-Med-6 ) ;
8960: LD_EXP 22
8964: PPUSH
8965: LD_STRING DKs-Med-6
8967: PPUSH
8968: CALL_OW 88
// Say ( Kurt , DKs-Med-7 ) ;
8972: LD_EXP 22
8976: PPUSH
8977: LD_STRING DKs-Med-7
8979: PPUSH
8980: CALL_OW 88
// Say ( Kurt , DKs-Med-8 ) ;
8984: LD_EXP 22
8988: PPUSH
8989: LD_STRING DKs-Med-8
8991: PPUSH
8992: CALL_OW 88
// Say ( Schulz , DL-Med-9 ) ;
8996: LD_EXP 24
9000: PPUSH
9001: LD_STRING DL-Med-9
9003: PPUSH
9004: CALL_OW 88
// Say ( Schulz , DL-Med-10 ) ;
9008: LD_EXP 24
9012: PPUSH
9013: LD_STRING DL-Med-10
9015: PPUSH
9016: CALL_OW 88
// DialogueOff ;
9020: CALL_OW 7
// end ; ChangeMissionObjectives ( M8- & Difficulty ) ;
9024: LD_STRING M8-
9026: PUSH
9027: LD_OWVAR 67
9031: STR
9032: PPUSH
9033: CALL_OW 337
// end ;
9037: END
// every 0 0$1 trigger playerInBase do
9038: LD_EXP 5
9042: IFFALSE 9062
9044: GO 9046
9046: DISABLE
// begin enable ;
9047: ENABLE
// missionTime := missionTime + 0 0$1 ;
9048: LD_ADDR_EXP 9
9052: PUSH
9053: LD_EXP 9
9057: PUSH
9058: LD_INT 35
9060: PLUS
9061: ST_TO_ADDR
// end ;
9062: END
// every 0 0$2 trigger playerInBase and apeDriver do
9063: LD_EXP 5
9067: PUSH
9068: LD_EXP 8
9072: AND
9073: IFFALSE 9470
9075: GO 9077
9077: DISABLE
// begin ChangeMissionObjectives ( M7a_out ) ;
9078: LD_STRING M7a_out
9080: PPUSH
9081: CALL_OW 337
// wait ( 0 0$2 ) ;
9085: LD_INT 70
9087: PPUSH
9088: CALL_OW 67
// DialogueOn ;
9092: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) [ 1 ] ) ;
9096: LD_INT 22
9098: PUSH
9099: LD_INT 2
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: PUSH
9106: LD_INT 33
9108: PUSH
9109: LD_INT 5
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PPUSH
9120: CALL_OW 69
9124: PUSH
9125: LD_INT 1
9127: ARRAY
9128: PPUSH
9129: CALL_OW 87
// if IsOk ( Mia ) then
9133: LD_EXP 27
9137: PPUSH
9138: CALL_OW 302
9142: IFFALSE 9168
// begin Say ( Mia , DMm-Apedrive-1 ) ;
9144: LD_EXP 27
9148: PPUSH
9149: LD_STRING DMm-Apedrive-1
9151: PPUSH
9152: CALL_OW 88
// Say ( Mike , DM-Apedrive-2 ) ;
9156: LD_EXP 15
9160: PPUSH
9161: LD_STRING DM-Apedrive-2
9163: PPUSH
9164: CALL_OW 88
// end ; if IsOk ( Jenna ) then
9168: LD_EXP 29
9172: PPUSH
9173: CALL_OW 302
9177: IFFALSE 9466
// begin Say ( Jenna , DJm-Apedrive-3 ) ;
9179: LD_EXP 29
9183: PPUSH
9184: LD_STRING DJm-Apedrive-3
9186: PPUSH
9187: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-4 ) ;
9191: LD_EXP 29
9195: PPUSH
9196: LD_STRING DJm-Apedrive-4
9198: PPUSH
9199: CALL_OW 88
// if IsOk ( Basim ) then
9203: LD_EXP 25
9207: PPUSH
9208: CALL_OW 302
9212: IFFALSE 9466
// begin Say ( Basim , DBs-Apedrive-5 ) ;
9214: LD_EXP 25
9218: PPUSH
9219: LD_STRING DBs-Apedrive-5
9221: PPUSH
9222: CALL_OW 88
// Say ( Basim , DBs-Apedrive-6 ) ;
9226: LD_EXP 25
9230: PPUSH
9231: LD_STRING DBs-Apedrive-6
9233: PPUSH
9234: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-7 ) ;
9238: LD_EXP 29
9242: PPUSH
9243: LD_STRING DJm-Apedrive-7
9245: PPUSH
9246: CALL_OW 88
// Say ( Basim , DBs-Apedrive-8 ) ;
9250: LD_EXP 25
9254: PPUSH
9255: LD_STRING DBs-Apedrive-8
9257: PPUSH
9258: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-9 ) ;
9262: LD_EXP 29
9266: PPUSH
9267: LD_STRING DJm-Apedrive-9
9269: PPUSH
9270: CALL_OW 88
// Say ( Basim , DBs-Apedrive-10 ) ;
9274: LD_EXP 25
9278: PPUSH
9279: LD_STRING DBs-Apedrive-10
9281: PPUSH
9282: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-11 ) ;
9286: LD_EXP 29
9290: PPUSH
9291: LD_STRING DJm-Apedrive-11
9293: PPUSH
9294: CALL_OW 88
// Say ( Kaia , DK-Apedrive-12 ) ;
9298: LD_EXP 18
9302: PPUSH
9303: LD_STRING DK-Apedrive-12
9305: PPUSH
9306: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-13 ) ;
9310: LD_EXP 29
9314: PPUSH
9315: LD_STRING DJm-Apedrive-13
9317: PPUSH
9318: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-14 ) ;
9322: LD_EXP 29
9326: PPUSH
9327: LD_STRING DJm-Apedrive-14
9329: PPUSH
9330: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-15 ) ;
9334: LD_EXP 29
9338: PPUSH
9339: LD_STRING DJm-Apedrive-15
9341: PPUSH
9342: CALL_OW 88
// Say ( Jenna , DJm-Apedrive-16 ) ;
9346: LD_EXP 29
9350: PPUSH
9351: LD_STRING DJm-Apedrive-16
9353: PPUSH
9354: CALL_OW 88
// Say ( Mia , DMm-Apedrive-17 ) ;
9358: LD_EXP 27
9362: PPUSH
9363: LD_STRING DMm-Apedrive-17
9365: PPUSH
9366: CALL_OW 88
// Say ( Mia , DMm-Apedrive-18 ) ;
9370: LD_EXP 27
9374: PPUSH
9375: LD_STRING DMm-Apedrive-18
9377: PPUSH
9378: CALL_OW 88
// Say ( Mia , DMm-Apedrive-19 ) ;
9382: LD_EXP 27
9386: PPUSH
9387: LD_STRING DMm-Apedrive-19
9389: PPUSH
9390: CALL_OW 88
// Say ( Mia , DMm-Apedrive-20 ) ;
9394: LD_EXP 27
9398: PPUSH
9399: LD_STRING DMm-Apedrive-20
9401: PPUSH
9402: CALL_OW 88
// Say ( Kaia , DK-Apedrive-21 ) ;
9406: LD_EXP 18
9410: PPUSH
9411: LD_STRING DK-Apedrive-21
9413: PPUSH
9414: CALL_OW 88
// Say ( Kaia , DK-Apedrive-22 ) ;
9418: LD_EXP 18
9422: PPUSH
9423: LD_STRING DK-Apedrive-22
9425: PPUSH
9426: CALL_OW 88
// Say ( Heike , DH-Apedrive-23 ) ;
9430: LD_EXP 13
9434: PPUSH
9435: LD_STRING DH-Apedrive-23
9437: PPUSH
9438: CALL_OW 88
// Say ( Lemmy , DLt-Apedrive-24 ) ;
9442: LD_EXP 26
9446: PPUSH
9447: LD_STRING DLt-Apedrive-24
9449: PPUSH
9450: CALL_OW 88
// Say ( Lemmy , DLt-Apedrive-25 ) ;
9454: LD_EXP 26
9458: PPUSH
9459: LD_STRING DLt-Apedrive-25
9461: PPUSH
9462: CALL_OW 88
// end ; end ; DialogueOff ;
9466: CALL_OW 7
// end ;
9470: END
// every 0 0$2 trigger playerInBase and kamikazeTrained do
9471: LD_EXP 5
9475: PUSH
9476: LD_EXP 6
9480: AND
9481: IFFALSE 9493
9483: GO 9485
9485: DISABLE
// ChangeMissionObjectives ( M7b_out ) ;
9486: LD_STRING M7b_out
9488: PPUSH
9489: CALL_OW 337
9493: END
// every 0 0$2 trigger playerInBase and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] , [ f_not , [ f_empty ] ] ] ) and IsOk ( Heike ) and IsOk ( Schulz ) do
9494: LD_EXP 5
9498: PUSH
9499: LD_INT 22
9501: PUSH
9502: LD_INT 2
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PUSH
9509: LD_INT 30
9511: PUSH
9512: LD_INT 3
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: PUSH
9519: LD_INT 3
9521: PUSH
9522: LD_INT 58
9524: PUSH
9525: EMPTY
9526: LIST
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: LIST
9536: PPUSH
9537: CALL_OW 69
9541: AND
9542: PUSH
9543: LD_EXP 13
9547: PPUSH
9548: CALL_OW 302
9552: AND
9553: PUSH
9554: LD_EXP 24
9558: PPUSH
9559: CALL_OW 302
9563: AND
9564: IFFALSE 9737
9566: GO 9568
9568: DISABLE
// begin DialogueOn ;
9569: CALL_OW 6
// Say ( Schulz , DL-Mort-1 ) ;
9573: LD_EXP 24
9577: PPUSH
9578: LD_STRING DL-Mort-1
9580: PPUSH
9581: CALL_OW 88
// if IsOk ( Markov ) then
9585: LD_EXP 20
9589: PPUSH
9590: CALL_OW 302
9594: IFFALSE 9647
// begin Say ( Heike , DH-Mort-2 ) ;
9596: LD_EXP 13
9600: PPUSH
9601: LD_STRING DH-Mort-2
9603: PPUSH
9604: CALL_OW 88
// Say ( Markov , DMar-Mort-3 ) ;
9608: LD_EXP 20
9612: PPUSH
9613: LD_STRING DMar-Mort-3
9615: PPUSH
9616: CALL_OW 88
// Say ( Markov , DMar-Mort-4 ) ;
9620: LD_EXP 20
9624: PPUSH
9625: LD_STRING DMar-Mort-4
9627: PPUSH
9628: CALL_OW 88
// SetTech ( tech_MultiBarrels , 2 , state_enabled ) ;
9632: LD_INT 88
9634: PPUSH
9635: LD_INT 2
9637: PPUSH
9638: LD_INT 1
9640: PPUSH
9641: CALL_OW 322
// end else
9645: GO 9733
// if IsOk ( Olaf ) then
9647: LD_EXP 21
9651: PPUSH
9652: CALL_OW 302
9656: IFFALSE 9709
// begin Say ( Heike , DH-Mort-a-2 ) ;
9658: LD_EXP 13
9662: PPUSH
9663: LD_STRING DH-Mort-a-2
9665: PPUSH
9666: CALL_OW 88
// Say ( Olaf , DO-Mort-a-3 ) ;
9670: LD_EXP 21
9674: PPUSH
9675: LD_STRING DO-Mort-a-3
9677: PPUSH
9678: CALL_OW 88
// Say ( Olaf , DO-Mort-a-4 ) ;
9682: LD_EXP 21
9686: PPUSH
9687: LD_STRING DO-Mort-a-4
9689: PPUSH
9690: CALL_OW 88
// SetTech ( tech_MultiBarrels , 2 , state_enabled ) ;
9694: LD_INT 88
9696: PPUSH
9697: LD_INT 2
9699: PPUSH
9700: LD_INT 1
9702: PPUSH
9703: CALL_OW 322
// end else
9707: GO 9733
// begin Say ( Heike , DH-Mort-a-5 ) ;
9709: LD_EXP 13
9713: PPUSH
9714: LD_STRING DH-Mort-a-5
9716: PPUSH
9717: CALL_OW 88
// Say ( Heike , DH-Mort-a-6 ) ;
9721: LD_EXP 13
9725: PPUSH
9726: LD_STRING DH-Mort-a-6
9728: PPUSH
9729: CALL_OW 88
// end ; DialogueOff ;
9733: CALL_OW 7
// end ;
9737: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
9738: LD_EXP 18
9742: PPUSH
9743: CALL_OW 256
9747: PUSH
9748: LD_INT 10
9750: LESS
9751: IFFALSE 9853
9753: GO 9755
9755: DISABLE
// begin DialogueOn ;
9756: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
9760: LD_EXP 18
9764: PPUSH
9765: CALL_OW 87
// ForceSay ( Kaia , DK-Death-1 ) ;
9769: LD_EXP 18
9773: PPUSH
9774: LD_STRING DK-Death-1
9776: PPUSH
9777: CALL_OW 91
// ForceSay ( Kaia , DK-Death-2 ) ;
9781: LD_EXP 18
9785: PPUSH
9786: LD_STRING DK-Death-2
9788: PPUSH
9789: CALL_OW 91
// ForceSay ( Kaia , DK-Death-3 ) ;
9793: LD_EXP 18
9797: PPUSH
9798: LD_STRING DK-Death-3
9800: PPUSH
9801: CALL_OW 91
// Say ( Heike , DH-Death-4 ) ;
9805: LD_EXP 13
9809: PPUSH
9810: LD_STRING DH-Death-4
9812: PPUSH
9813: CALL_OW 88
// if IsOk ( Markov ) then
9817: LD_EXP 20
9821: PPUSH
9822: CALL_OW 302
9826: IFFALSE 9840
// Say ( Markov , DMar-Death-5 ) ;
9828: LD_EXP 20
9832: PPUSH
9833: LD_STRING DMar-Death-5
9835: PPUSH
9836: CALL_OW 88
// DialogueOff ;
9840: CALL_OW 7
// KillUnit ( Kaia ) ;
9844: LD_EXP 18
9848: PPUSH
9849: CALL_OW 66
// end ;
9853: END
// every 0 0$1 trigger ruDefeated and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_ok ] ] ) do var i , sib ;
9854: LD_EXP 10
9858: PUSH
9859: LD_INT 81
9861: PUSH
9862: LD_INT 2
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: PUSH
9869: LD_INT 50
9871: PUSH
9872: EMPTY
9873: LIST
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: PPUSH
9879: CALL_OW 69
9883: NOT
9884: AND
9885: IFFALSE 10598
9887: GO 9889
9889: DISABLE
9890: LD_INT 0
9892: PPUSH
9893: PPUSH
// begin InGameOn ;
9894: CALL_OW 8
// DialogueOn ;
9898: CALL_OW 6
// if time09 + time09c + tick < 80 80$00 then
9902: LD_EXP 3
9906: PUSH
9907: LD_EXP 4
9911: PLUS
9912: PUSH
9913: LD_OWVAR 1
9917: PLUS
9918: PUSH
9919: LD_INT 168000
9921: LESS
9922: IFFALSE 9931
// SetAchievement ( ACH_HSPEED_9 ) ;
9924: LD_STRING ACH_HSPEED_9
9926: PPUSH
9927: CALL_OW 543
// CenterOnNow ( Schulz ) ;
9931: LD_EXP 24
9935: PPUSH
9936: CALL 52097 0 1
// dwait ( 0 0$0.3 ) ;
9940: LD_INT 10
9942: PPUSH
9943: CALL_OW 68
// Say ( Schulz , DL-End-1 ) ;
9947: LD_EXP 24
9951: PPUSH
9952: LD_STRING DL-End-1
9954: PPUSH
9955: CALL_OW 88
// Say ( Heike , DH-End-2 ) ;
9959: LD_EXP 13
9963: PPUSH
9964: LD_STRING DH-End-2
9966: PPUSH
9967: CALL_OW 88
// if IsOk ( Kaia ) then
9971: LD_EXP 18
9975: PPUSH
9976: CALL_OW 302
9980: IFFALSE 10042
// begin SaveCharacters ( Kaia , 09_Kaia ) ;
9982: LD_EXP 18
9986: PPUSH
9987: LD_STRING 09_Kaia
9989: PPUSH
9990: CALL_OW 38
// Say ( Kaia , DK-End-a-3 ) ;
9994: LD_EXP 18
9998: PPUSH
9999: LD_STRING DK-End-a-3
10001: PPUSH
10002: CALL_OW 88
// Say ( Kaia , DK-End-a-4 ) ;
10006: LD_EXP 18
10010: PPUSH
10011: LD_STRING DK-End-a-4
10013: PPUSH
10014: CALL_OW 88
// Say ( Schulz , DL-End-a-5 ) ;
10018: LD_EXP 24
10022: PPUSH
10023: LD_STRING DL-End-a-5
10025: PPUSH
10026: CALL_OW 88
// Say ( Schulz , DL-End-a-6 ) ;
10030: LD_EXP 24
10034: PPUSH
10035: LD_STRING DL-End-a-6
10037: PPUSH
10038: CALL_OW 88
// end ; SaveCharacters ( Heike , 09_Heike ) ;
10042: LD_EXP 13
10046: PPUSH
10047: LD_STRING 09_Heike
10049: PPUSH
10050: CALL_OW 38
// SaveCharacters ( Schulz , 09_Schulz ) ;
10054: LD_EXP 24
10058: PPUSH
10059: LD_STRING 09_Schulz
10061: PPUSH
10062: CALL_OW 38
// if IsOk ( Basim ) then
10066: LD_EXP 25
10070: PPUSH
10071: CALL_OW 302
10075: IFFALSE 10089
// SaveCharacters ( Basim , 09_Basim ) ;
10077: LD_EXP 25
10081: PPUSH
10082: LD_STRING 09_Basim
10084: PPUSH
10085: CALL_OW 38
// if IsOk ( Givi ) then
10089: LD_EXP 14
10093: PPUSH
10094: CALL_OW 302
10098: IFFALSE 10112
// SaveCharacters ( Givi , 09_Givi ) ;
10100: LD_EXP 14
10104: PPUSH
10105: LD_STRING 09_Givi
10107: PPUSH
10108: CALL_OW 38
// if IsOk ( Mike ) then
10112: LD_EXP 15
10116: PPUSH
10117: CALL_OW 302
10121: IFFALSE 10135
// SaveCharacters ( Mike , 09_Mike ) ;
10123: LD_EXP 15
10127: PPUSH
10128: LD_STRING 09_Mike
10130: PPUSH
10131: CALL_OW 38
// if IsOk ( Ibrahim ) then
10135: LD_EXP 16
10139: PPUSH
10140: CALL_OW 302
10144: IFFALSE 10158
// SaveCharacters ( Ibrahim , 09_Ibrahim ) ;
10146: LD_EXP 16
10150: PPUSH
10151: LD_STRING 09_Ibrahim
10153: PPUSH
10154: CALL_OW 38
// if IsOk ( Kamil ) then
10158: LD_EXP 17
10162: PPUSH
10163: CALL_OW 302
10167: IFFALSE 10181
// SaveCharacters ( Kamil , 09_Kamil ) ;
10169: LD_EXP 17
10173: PPUSH
10174: LD_STRING 09_Kamil
10176: PPUSH
10177: CALL_OW 38
// if IsOk ( Sophia ) then
10181: LD_EXP 19
10185: PPUSH
10186: CALL_OW 302
10190: IFFALSE 10204
// SaveCharacters ( Sophia , 09_Sophia ) ;
10192: LD_EXP 19
10196: PPUSH
10197: LD_STRING 09_Sophia
10199: PPUSH
10200: CALL_OW 38
// if IsOk ( Markov ) then
10204: LD_EXP 20
10208: PPUSH
10209: CALL_OW 302
10213: IFFALSE 10227
// SaveCharacters ( Markov , 09_Markov ) ;
10215: LD_EXP 20
10219: PPUSH
10220: LD_STRING 09_Markov
10222: PPUSH
10223: CALL_OW 38
// if IsOk ( Olaf ) then
10227: LD_EXP 21
10231: PPUSH
10232: CALL_OW 302
10236: IFFALSE 10250
// SaveCharacters ( Olaf , 09_Olaf ) ;
10238: LD_EXP 21
10242: PPUSH
10243: LD_STRING 09_Olaf
10245: PPUSH
10246: CALL_OW 38
// if IsOk ( Kurt ) then
10250: LD_EXP 22
10254: PPUSH
10255: CALL_OW 302
10259: IFFALSE 10273
// SaveCharacters ( Kurt , 09_Kurt ) ;
10261: LD_EXP 22
10265: PPUSH
10266: LD_STRING 09_Kurt
10268: PPUSH
10269: CALL_OW 38
// if IsOk ( Aviradze ) then
10273: LD_EXP 23
10277: PPUSH
10278: CALL_OW 302
10282: IFFALSE 10296
// SaveCharacters ( Aviradze , 09_Aviradze ) ;
10284: LD_EXP 23
10288: PPUSH
10289: LD_STRING 09_Aviradze
10291: PPUSH
10292: CALL_OW 38
// SaveCharacters ( UnitFilter ( heikeSecondSquad , [ f_ok ] ) , 09_heikeSecondSquad ) ;
10296: LD_EXP 30
10300: PPUSH
10301: LD_INT 50
10303: PUSH
10304: EMPTY
10305: LIST
10306: PPUSH
10307: CALL_OW 72
10311: PPUSH
10312: LD_STRING 09_heikeSecondSquad
10314: PPUSH
10315: CALL_OW 38
// sib := 0 ;
10319: LD_ADDR_VAR 0 2
10323: PUSH
10324: LD_INT 0
10326: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
10327: LD_ADDR_VAR 0 1
10331: PUSH
10332: LD_INT 22
10334: PUSH
10335: LD_INT 2
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: PUSH
10342: LD_INT 2
10344: PUSH
10345: LD_INT 30
10347: PUSH
10348: LD_INT 0
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PUSH
10355: LD_INT 30
10357: PUSH
10358: LD_INT 1
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: LIST
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: PPUSH
10374: CALL_OW 69
10378: PUSH
10379: FOR_IN
10380: IFFALSE 10413
// sib := sib + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
10382: LD_ADDR_VAR 0 2
10386: PUSH
10387: LD_VAR 0 2
10391: PUSH
10392: LD_VAR 0 1
10396: PPUSH
10397: CALL_OW 274
10401: PPUSH
10402: LD_INT 3
10404: PPUSH
10405: CALL_OW 275
10409: PLUS
10410: ST_TO_ADDR
10411: GO 10379
10413: POP
10414: POP
// if sib >= sibToCollect then
10415: LD_VAR 0 2
10419: PUSH
10420: LD_EXP 7
10424: GREATEREQUAL
10425: IFFALSE 10439
// AddMedal ( med1 , 1 ) else
10427: LD_STRING med1
10429: PPUSH
10430: LD_INT 1
10432: PPUSH
10433: CALL_OW 101
10437: GO 10450
// AddMedal ( med1 , - 1 ) ;
10439: LD_STRING med1
10441: PPUSH
10442: LD_INT 1
10444: NEG
10445: PPUSH
10446: CALL_OW 101
// if apeDriver or kamikazeTrained then
10450: LD_EXP 8
10454: PUSH
10455: LD_EXP 6
10459: OR
10460: IFFALSE 10474
// AddMedal ( med2 , 1 ) else
10462: LD_STRING med2
10464: PPUSH
10465: LD_INT 1
10467: PPUSH
10468: CALL_OW 101
10472: GO 10485
// AddMedal ( med2 , - 1 ) ;
10474: LD_STRING med2
10476: PPUSH
10477: LD_INT 1
10479: NEG
10480: PPUSH
10481: CALL_OW 101
// if not UnitFilter ( [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] , [ f_ok ] ) then
10485: LD_EXP 14
10489: PUSH
10490: LD_EXP 15
10494: PUSH
10495: LD_EXP 16
10499: PUSH
10500: LD_EXP 17
10504: PUSH
10505: LD_EXP 18
10509: PUSH
10510: LD_EXP 19
10514: PUSH
10515: LD_EXP 20
10519: PUSH
10520: LD_EXP 21
10524: PUSH
10525: LD_EXP 22
10529: PUSH
10530: LD_EXP 23
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: PPUSH
10547: LD_INT 50
10549: PUSH
10550: EMPTY
10551: LIST
10552: PPUSH
10553: CALL_OW 72
10557: NOT
10558: IFFALSE 10573
// AddMedal ( med3 , - 1 ) else
10560: LD_STRING med3
10562: PPUSH
10563: LD_INT 1
10565: NEG
10566: PPUSH
10567: CALL_OW 101
10571: GO 10583
// AddMedal ( med3 , 1 ) ;
10573: LD_STRING med3
10575: PPUSH
10576: LD_INT 1
10578: PPUSH
10579: CALL_OW 101
// GiveMedals ( MAIN ) ;
10583: LD_STRING MAIN
10585: PPUSH
10586: CALL_OW 102
// YouWin ;
10590: CALL_OW 103
// DialogueOff ;
10594: CALL_OW 7
// end ; end_of_file
10598: PPOPN 2
10600: END
// every 0 0$30 + 0 0$20 trigger playerInBase do var i , tmp ;
10601: LD_EXP 5
10605: IFFALSE 10706
10607: GO 10609
10609: DISABLE
10610: LD_INT 0
10612: PPUSH
10613: PPUSH
// begin enable ;
10614: ENABLE
// tmp := [ crates1Area , crates2Area , crates3Area , crates4Area , crates5Area , crates6Area ] ;
10615: LD_ADDR_VAR 0 2
10619: PUSH
10620: LD_INT 9
10622: PUSH
10623: LD_INT 10
10625: PUSH
10626: LD_INT 11
10628: PUSH
10629: LD_INT 12
10631: PUSH
10632: LD_INT 13
10634: PUSH
10635: LD_INT 14
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: ST_TO_ADDR
// i := tmp [ rand ( 1 , 6 ) ] ;
10646: LD_ADDR_VAR 0 1
10650: PUSH
10651: LD_VAR 0 2
10655: PUSH
10656: LD_INT 1
10658: PPUSH
10659: LD_INT 6
10661: PPUSH
10662: CALL_OW 12
10666: ARRAY
10667: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 6 then
10668: LD_VAR 0 1
10672: PPUSH
10673: CALL_OW 435
10677: PUSH
10678: LD_INT 6
10680: LESS
10681: IFFALSE 10706
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
10683: LD_INT 1
10685: PPUSH
10686: LD_INT 5
10688: PPUSH
10689: CALL_OW 12
10693: PPUSH
10694: LD_VAR 0 1
10698: PPUSH
10699: LD_INT 1
10701: PPUSH
10702: CALL_OW 55
// end ; end_of_file
10706: PPOPN 2
10708: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10709: LD_INT 0
10711: PPUSH
10712: PPUSH
// if exist_mode then
10713: LD_VAR 0 2
10717: IFFALSE 10742
// unit := CreateCharacter ( prefix & ident ) else
10719: LD_ADDR_VAR 0 5
10723: PUSH
10724: LD_VAR 0 3
10728: PUSH
10729: LD_VAR 0 1
10733: STR
10734: PPUSH
10735: CALL_OW 34
10739: ST_TO_ADDR
10740: GO 10757
// unit := NewCharacter ( ident ) ;
10742: LD_ADDR_VAR 0 5
10746: PUSH
10747: LD_VAR 0 1
10751: PPUSH
10752: CALL_OW 25
10756: ST_TO_ADDR
// result := unit ;
10757: LD_ADDR_VAR 0 4
10761: PUSH
10762: LD_VAR 0 5
10766: ST_TO_ADDR
// end ;
10767: LD_VAR 0 4
10771: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10772: LD_INT 0
10774: PPUSH
10775: PPUSH
// if not side or not nation then
10776: LD_VAR 0 1
10780: NOT
10781: PUSH
10782: LD_VAR 0 2
10786: NOT
10787: OR
10788: IFFALSE 10792
// exit ;
10790: GO 11560
// case nation of nation_american :
10792: LD_VAR 0 2
10796: PUSH
10797: LD_INT 1
10799: DOUBLE
10800: EQUAL
10801: IFTRUE 10805
10803: GO 11019
10805: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
10806: LD_ADDR_VAR 0 4
10810: PUSH
10811: LD_INT 35
10813: PUSH
10814: LD_INT 45
10816: PUSH
10817: LD_INT 46
10819: PUSH
10820: LD_INT 47
10822: PUSH
10823: LD_INT 82
10825: PUSH
10826: LD_INT 83
10828: PUSH
10829: LD_INT 84
10831: PUSH
10832: LD_INT 85
10834: PUSH
10835: LD_INT 86
10837: PUSH
10838: LD_INT 1
10840: PUSH
10841: LD_INT 2
10843: PUSH
10844: LD_INT 6
10846: PUSH
10847: LD_INT 15
10849: PUSH
10850: LD_INT 16
10852: PUSH
10853: LD_INT 7
10855: PUSH
10856: LD_INT 12
10858: PUSH
10859: LD_INT 13
10861: PUSH
10862: LD_INT 10
10864: PUSH
10865: LD_INT 14
10867: PUSH
10868: LD_INT 20
10870: PUSH
10871: LD_INT 21
10873: PUSH
10874: LD_INT 22
10876: PUSH
10877: LD_INT 25
10879: PUSH
10880: LD_INT 32
10882: PUSH
10883: LD_INT 27
10885: PUSH
10886: LD_INT 36
10888: PUSH
10889: LD_INT 69
10891: PUSH
10892: LD_INT 39
10894: PUSH
10895: LD_INT 34
10897: PUSH
10898: LD_INT 40
10900: PUSH
10901: LD_INT 48
10903: PUSH
10904: LD_INT 49
10906: PUSH
10907: LD_INT 50
10909: PUSH
10910: LD_INT 51
10912: PUSH
10913: LD_INT 52
10915: PUSH
10916: LD_INT 53
10918: PUSH
10919: LD_INT 54
10921: PUSH
10922: LD_INT 55
10924: PUSH
10925: LD_INT 56
10927: PUSH
10928: LD_INT 57
10930: PUSH
10931: LD_INT 58
10933: PUSH
10934: LD_INT 59
10936: PUSH
10937: LD_INT 60
10939: PUSH
10940: LD_INT 61
10942: PUSH
10943: LD_INT 62
10945: PUSH
10946: LD_INT 80
10948: PUSH
10949: LD_INT 82
10951: PUSH
10952: LD_INT 83
10954: PUSH
10955: LD_INT 84
10957: PUSH
10958: LD_INT 85
10960: PUSH
10961: LD_INT 86
10963: PUSH
10964: EMPTY
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: ST_TO_ADDR
11017: GO 11484
11019: LD_INT 2
11021: DOUBLE
11022: EQUAL
11023: IFTRUE 11027
11025: GO 11253
11027: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
11028: LD_ADDR_VAR 0 4
11032: PUSH
11033: LD_INT 35
11035: PUSH
11036: LD_INT 45
11038: PUSH
11039: LD_INT 46
11041: PUSH
11042: LD_INT 47
11044: PUSH
11045: LD_INT 82
11047: PUSH
11048: LD_INT 83
11050: PUSH
11051: LD_INT 84
11053: PUSH
11054: LD_INT 85
11056: PUSH
11057: LD_INT 87
11059: PUSH
11060: LD_INT 70
11062: PUSH
11063: LD_INT 1
11065: PUSH
11066: LD_INT 11
11068: PUSH
11069: LD_INT 3
11071: PUSH
11072: LD_INT 4
11074: PUSH
11075: LD_INT 5
11077: PUSH
11078: LD_INT 6
11080: PUSH
11081: LD_INT 15
11083: PUSH
11084: LD_INT 18
11086: PUSH
11087: LD_INT 7
11089: PUSH
11090: LD_INT 17
11092: PUSH
11093: LD_INT 8
11095: PUSH
11096: LD_INT 20
11098: PUSH
11099: LD_INT 21
11101: PUSH
11102: LD_INT 22
11104: PUSH
11105: LD_INT 72
11107: PUSH
11108: LD_INT 26
11110: PUSH
11111: LD_INT 69
11113: PUSH
11114: LD_INT 39
11116: PUSH
11117: LD_INT 40
11119: PUSH
11120: LD_INT 41
11122: PUSH
11123: LD_INT 42
11125: PUSH
11126: LD_INT 43
11128: PUSH
11129: LD_INT 48
11131: PUSH
11132: LD_INT 49
11134: PUSH
11135: LD_INT 50
11137: PUSH
11138: LD_INT 51
11140: PUSH
11141: LD_INT 52
11143: PUSH
11144: LD_INT 53
11146: PUSH
11147: LD_INT 54
11149: PUSH
11150: LD_INT 55
11152: PUSH
11153: LD_INT 56
11155: PUSH
11156: LD_INT 60
11158: PUSH
11159: LD_INT 61
11161: PUSH
11162: LD_INT 62
11164: PUSH
11165: LD_INT 66
11167: PUSH
11168: LD_INT 67
11170: PUSH
11171: LD_INT 68
11173: PUSH
11174: LD_INT 81
11176: PUSH
11177: LD_INT 82
11179: PUSH
11180: LD_INT 83
11182: PUSH
11183: LD_INT 84
11185: PUSH
11186: LD_INT 85
11188: PUSH
11189: LD_INT 87
11191: PUSH
11192: LD_INT 88
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: ST_TO_ADDR
11251: GO 11484
11253: LD_INT 3
11255: DOUBLE
11256: EQUAL
11257: IFTRUE 11261
11259: GO 11483
11261: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
11262: LD_ADDR_VAR 0 4
11266: PUSH
11267: LD_INT 46
11269: PUSH
11270: LD_INT 47
11272: PUSH
11273: LD_INT 1
11275: PUSH
11276: LD_INT 2
11278: PUSH
11279: LD_INT 82
11281: PUSH
11282: LD_INT 83
11284: PUSH
11285: LD_INT 84
11287: PUSH
11288: LD_INT 85
11290: PUSH
11291: LD_INT 86
11293: PUSH
11294: LD_INT 11
11296: PUSH
11297: LD_INT 9
11299: PUSH
11300: LD_INT 20
11302: PUSH
11303: LD_INT 19
11305: PUSH
11306: LD_INT 21
11308: PUSH
11309: LD_INT 24
11311: PUSH
11312: LD_INT 22
11314: PUSH
11315: LD_INT 25
11317: PUSH
11318: LD_INT 28
11320: PUSH
11321: LD_INT 29
11323: PUSH
11324: LD_INT 30
11326: PUSH
11327: LD_INT 31
11329: PUSH
11330: LD_INT 37
11332: PUSH
11333: LD_INT 38
11335: PUSH
11336: LD_INT 32
11338: PUSH
11339: LD_INT 27
11341: PUSH
11342: LD_INT 33
11344: PUSH
11345: LD_INT 69
11347: PUSH
11348: LD_INT 39
11350: PUSH
11351: LD_INT 34
11353: PUSH
11354: LD_INT 40
11356: PUSH
11357: LD_INT 71
11359: PUSH
11360: LD_INT 23
11362: PUSH
11363: LD_INT 44
11365: PUSH
11366: LD_INT 48
11368: PUSH
11369: LD_INT 49
11371: PUSH
11372: LD_INT 50
11374: PUSH
11375: LD_INT 51
11377: PUSH
11378: LD_INT 52
11380: PUSH
11381: LD_INT 53
11383: PUSH
11384: LD_INT 54
11386: PUSH
11387: LD_INT 55
11389: PUSH
11390: LD_INT 56
11392: PUSH
11393: LD_INT 57
11395: PUSH
11396: LD_INT 58
11398: PUSH
11399: LD_INT 59
11401: PUSH
11402: LD_INT 63
11404: PUSH
11405: LD_INT 64
11407: PUSH
11408: LD_INT 65
11410: PUSH
11411: LD_INT 82
11413: PUSH
11414: LD_INT 83
11416: PUSH
11417: LD_INT 84
11419: PUSH
11420: LD_INT 85
11422: PUSH
11423: LD_INT 86
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: ST_TO_ADDR
11481: GO 11484
11483: POP
// if state > - 1 and state < 3 then
11484: LD_VAR 0 3
11488: PUSH
11489: LD_INT 1
11491: NEG
11492: GREATER
11493: PUSH
11494: LD_VAR 0 3
11498: PUSH
11499: LD_INT 3
11501: LESS
11502: AND
11503: IFFALSE 11560
// for i in result do
11505: LD_ADDR_VAR 0 5
11509: PUSH
11510: LD_VAR 0 4
11514: PUSH
11515: FOR_IN
11516: IFFALSE 11558
// if GetTech ( i , side ) <> state then
11518: LD_VAR 0 5
11522: PPUSH
11523: LD_VAR 0 1
11527: PPUSH
11528: CALL_OW 321
11532: PUSH
11533: LD_VAR 0 3
11537: NONEQUAL
11538: IFFALSE 11556
// result := result diff i ;
11540: LD_ADDR_VAR 0 4
11544: PUSH
11545: LD_VAR 0 4
11549: PUSH
11550: LD_VAR 0 5
11554: DIFF
11555: ST_TO_ADDR
11556: GO 11515
11558: POP
11559: POP
// end ;
11560: LD_VAR 0 4
11564: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11565: LD_INT 0
11567: PPUSH
11568: PPUSH
11569: PPUSH
// result := true ;
11570: LD_ADDR_VAR 0 3
11574: PUSH
11575: LD_INT 1
11577: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11578: LD_ADDR_VAR 0 5
11582: PUSH
11583: LD_VAR 0 2
11587: PPUSH
11588: CALL_OW 480
11592: ST_TO_ADDR
// if not tmp then
11593: LD_VAR 0 5
11597: NOT
11598: IFFALSE 11602
// exit ;
11600: GO 11651
// for i in tmp do
11602: LD_ADDR_VAR 0 4
11606: PUSH
11607: LD_VAR 0 5
11611: PUSH
11612: FOR_IN
11613: IFFALSE 11649
// if GetTech ( i , side ) <> state_researched then
11615: LD_VAR 0 4
11619: PPUSH
11620: LD_VAR 0 1
11624: PPUSH
11625: CALL_OW 321
11629: PUSH
11630: LD_INT 2
11632: NONEQUAL
11633: IFFALSE 11647
// begin result := false ;
11635: LD_ADDR_VAR 0 3
11639: PUSH
11640: LD_INT 0
11642: ST_TO_ADDR
// exit ;
11643: POP
11644: POP
11645: GO 11651
// end ;
11647: GO 11612
11649: POP
11650: POP
// end ;
11651: LD_VAR 0 3
11655: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11656: LD_INT 0
11658: PPUSH
11659: PPUSH
11660: PPUSH
11661: PPUSH
11662: PPUSH
11663: PPUSH
11664: PPUSH
11665: PPUSH
11666: PPUSH
11667: PPUSH
11668: PPUSH
11669: PPUSH
11670: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11671: LD_VAR 0 1
11675: NOT
11676: PUSH
11677: LD_VAR 0 1
11681: PPUSH
11682: CALL_OW 257
11686: PUSH
11687: LD_INT 9
11689: NONEQUAL
11690: OR
11691: IFFALSE 11695
// exit ;
11693: GO 12268
// side := GetSide ( unit ) ;
11695: LD_ADDR_VAR 0 9
11699: PUSH
11700: LD_VAR 0 1
11704: PPUSH
11705: CALL_OW 255
11709: ST_TO_ADDR
// tech_space := tech_spacanom ;
11710: LD_ADDR_VAR 0 12
11714: PUSH
11715: LD_INT 29
11717: ST_TO_ADDR
// tech_time := tech_taurad ;
11718: LD_ADDR_VAR 0 13
11722: PUSH
11723: LD_INT 28
11725: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11726: LD_ADDR_VAR 0 11
11730: PUSH
11731: LD_VAR 0 1
11735: PPUSH
11736: CALL_OW 310
11740: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11741: LD_VAR 0 11
11745: PPUSH
11746: CALL_OW 247
11750: PUSH
11751: LD_INT 2
11753: EQUAL
11754: IFFALSE 11758
// exit ;
11756: GO 12268
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11758: LD_ADDR_VAR 0 8
11762: PUSH
11763: LD_INT 81
11765: PUSH
11766: LD_VAR 0 9
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: PUSH
11775: LD_INT 3
11777: PUSH
11778: LD_INT 21
11780: PUSH
11781: LD_INT 3
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: PUSH
11788: EMPTY
11789: LIST
11790: LIST
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: PPUSH
11796: CALL_OW 69
11800: ST_TO_ADDR
// if not tmp then
11801: LD_VAR 0 8
11805: NOT
11806: IFFALSE 11810
// exit ;
11808: GO 12268
// if in_unit then
11810: LD_VAR 0 11
11814: IFFALSE 11838
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11816: LD_ADDR_VAR 0 10
11820: PUSH
11821: LD_VAR 0 8
11825: PPUSH
11826: LD_VAR 0 11
11830: PPUSH
11831: CALL_OW 74
11835: ST_TO_ADDR
11836: GO 11858
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11838: LD_ADDR_VAR 0 10
11842: PUSH
11843: LD_VAR 0 8
11847: PPUSH
11848: LD_VAR 0 1
11852: PPUSH
11853: CALL_OW 74
11857: ST_TO_ADDR
// if not enemy then
11858: LD_VAR 0 10
11862: NOT
11863: IFFALSE 11867
// exit ;
11865: GO 12268
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11867: LD_VAR 0 11
11871: PUSH
11872: LD_VAR 0 11
11876: PPUSH
11877: LD_VAR 0 10
11881: PPUSH
11882: CALL_OW 296
11886: PUSH
11887: LD_INT 13
11889: GREATER
11890: AND
11891: PUSH
11892: LD_VAR 0 1
11896: PPUSH
11897: LD_VAR 0 10
11901: PPUSH
11902: CALL_OW 296
11906: PUSH
11907: LD_INT 12
11909: GREATER
11910: OR
11911: IFFALSE 11915
// exit ;
11913: GO 12268
// missile := [ 1 ] ;
11915: LD_ADDR_VAR 0 14
11919: PUSH
11920: LD_INT 1
11922: PUSH
11923: EMPTY
11924: LIST
11925: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11926: LD_VAR 0 9
11930: PPUSH
11931: LD_VAR 0 12
11935: PPUSH
11936: CALL_OW 325
11940: IFFALSE 11969
// missile := Replace ( missile , missile + 1 , 2 ) ;
11942: LD_ADDR_VAR 0 14
11946: PUSH
11947: LD_VAR 0 14
11951: PPUSH
11952: LD_VAR 0 14
11956: PUSH
11957: LD_INT 1
11959: PLUS
11960: PPUSH
11961: LD_INT 2
11963: PPUSH
11964: CALL_OW 1
11968: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11969: LD_VAR 0 9
11973: PPUSH
11974: LD_VAR 0 13
11978: PPUSH
11979: CALL_OW 325
11983: PUSH
11984: LD_VAR 0 10
11988: PPUSH
11989: CALL_OW 255
11993: PPUSH
11994: LD_VAR 0 13
11998: PPUSH
11999: CALL_OW 325
12003: NOT
12004: AND
12005: IFFALSE 12034
// missile := Replace ( missile , missile + 1 , 3 ) ;
12007: LD_ADDR_VAR 0 14
12011: PUSH
12012: LD_VAR 0 14
12016: PPUSH
12017: LD_VAR 0 14
12021: PUSH
12022: LD_INT 1
12024: PLUS
12025: PPUSH
12026: LD_INT 3
12028: PPUSH
12029: CALL_OW 1
12033: ST_TO_ADDR
// if missile < 2 then
12034: LD_VAR 0 14
12038: PUSH
12039: LD_INT 2
12041: LESS
12042: IFFALSE 12046
// exit ;
12044: GO 12268
// x := GetX ( enemy ) ;
12046: LD_ADDR_VAR 0 4
12050: PUSH
12051: LD_VAR 0 10
12055: PPUSH
12056: CALL_OW 250
12060: ST_TO_ADDR
// y := GetY ( enemy ) ;
12061: LD_ADDR_VAR 0 5
12065: PUSH
12066: LD_VAR 0 10
12070: PPUSH
12071: CALL_OW 251
12075: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
12076: LD_ADDR_VAR 0 6
12080: PUSH
12081: LD_VAR 0 4
12085: PUSH
12086: LD_INT 1
12088: NEG
12089: PPUSH
12090: LD_INT 1
12092: PPUSH
12093: CALL_OW 12
12097: PLUS
12098: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
12099: LD_ADDR_VAR 0 7
12103: PUSH
12104: LD_VAR 0 5
12108: PUSH
12109: LD_INT 1
12111: NEG
12112: PPUSH
12113: LD_INT 1
12115: PPUSH
12116: CALL_OW 12
12120: PLUS
12121: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12122: LD_VAR 0 6
12126: PPUSH
12127: LD_VAR 0 7
12131: PPUSH
12132: CALL_OW 488
12136: NOT
12137: IFFALSE 12159
// begin _x := x ;
12139: LD_ADDR_VAR 0 6
12143: PUSH
12144: LD_VAR 0 4
12148: ST_TO_ADDR
// _y := y ;
12149: LD_ADDR_VAR 0 7
12153: PUSH
12154: LD_VAR 0 5
12158: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12159: LD_ADDR_VAR 0 3
12163: PUSH
12164: LD_INT 1
12166: PPUSH
12167: LD_VAR 0 14
12171: PPUSH
12172: CALL_OW 12
12176: ST_TO_ADDR
// case i of 1 :
12177: LD_VAR 0 3
12181: PUSH
12182: LD_INT 1
12184: DOUBLE
12185: EQUAL
12186: IFTRUE 12190
12188: GO 12207
12190: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12191: LD_VAR 0 1
12195: PPUSH
12196: LD_VAR 0 10
12200: PPUSH
12201: CALL_OW 115
12205: GO 12268
12207: LD_INT 2
12209: DOUBLE
12210: EQUAL
12211: IFTRUE 12215
12213: GO 12237
12215: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12216: LD_VAR 0 1
12220: PPUSH
12221: LD_VAR 0 6
12225: PPUSH
12226: LD_VAR 0 7
12230: PPUSH
12231: CALL_OW 153
12235: GO 12268
12237: LD_INT 3
12239: DOUBLE
12240: EQUAL
12241: IFTRUE 12245
12243: GO 12267
12245: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
12246: LD_VAR 0 1
12250: PPUSH
12251: LD_VAR 0 6
12255: PPUSH
12256: LD_VAR 0 7
12260: PPUSH
12261: CALL_OW 154
12265: GO 12268
12267: POP
// end ;
12268: LD_VAR 0 2
12272: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
12273: LD_INT 0
12275: PPUSH
12276: PPUSH
12277: PPUSH
12278: PPUSH
12279: PPUSH
12280: PPUSH
// if not unit or not building then
12281: LD_VAR 0 1
12285: NOT
12286: PUSH
12287: LD_VAR 0 2
12291: NOT
12292: OR
12293: IFFALSE 12297
// exit ;
12295: GO 12455
// x := GetX ( building ) ;
12297: LD_ADDR_VAR 0 5
12301: PUSH
12302: LD_VAR 0 2
12306: PPUSH
12307: CALL_OW 250
12311: ST_TO_ADDR
// y := GetY ( building ) ;
12312: LD_ADDR_VAR 0 6
12316: PUSH
12317: LD_VAR 0 2
12321: PPUSH
12322: CALL_OW 251
12326: ST_TO_ADDR
// for i = 0 to 5 do
12327: LD_ADDR_VAR 0 4
12331: PUSH
12332: DOUBLE
12333: LD_INT 0
12335: DEC
12336: ST_TO_ADDR
12337: LD_INT 5
12339: PUSH
12340: FOR_TO
12341: IFFALSE 12453
// begin _x := ShiftX ( x , i , 3 ) ;
12343: LD_ADDR_VAR 0 7
12347: PUSH
12348: LD_VAR 0 5
12352: PPUSH
12353: LD_VAR 0 4
12357: PPUSH
12358: LD_INT 3
12360: PPUSH
12361: CALL_OW 272
12365: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
12366: LD_ADDR_VAR 0 8
12370: PUSH
12371: LD_VAR 0 6
12375: PPUSH
12376: LD_VAR 0 4
12380: PPUSH
12381: LD_INT 3
12383: PPUSH
12384: CALL_OW 273
12388: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12389: LD_VAR 0 7
12393: PPUSH
12394: LD_VAR 0 8
12398: PPUSH
12399: CALL_OW 488
12403: NOT
12404: IFFALSE 12408
// continue ;
12406: GO 12340
// if HexInfo ( _x , _y ) = 0 then
12408: LD_VAR 0 7
12412: PPUSH
12413: LD_VAR 0 8
12417: PPUSH
12418: CALL_OW 428
12422: PUSH
12423: LD_INT 0
12425: EQUAL
12426: IFFALSE 12451
// begin ComMoveXY ( unit , _x , _y ) ;
12428: LD_VAR 0 1
12432: PPUSH
12433: LD_VAR 0 7
12437: PPUSH
12438: LD_VAR 0 8
12442: PPUSH
12443: CALL_OW 111
// exit ;
12447: POP
12448: POP
12449: GO 12455
// end ; end ;
12451: GO 12340
12453: POP
12454: POP
// end ;
12455: LD_VAR 0 3
12459: RET
// export function ScanBase ( side , base_area ) ; begin
12460: LD_INT 0
12462: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
12463: LD_ADDR_VAR 0 3
12467: PUSH
12468: LD_VAR 0 2
12472: PPUSH
12473: LD_INT 81
12475: PUSH
12476: LD_VAR 0 1
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: PPUSH
12485: CALL_OW 70
12489: ST_TO_ADDR
// end ;
12490: LD_VAR 0 3
12494: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
12495: LD_INT 0
12497: PPUSH
12498: PPUSH
12499: PPUSH
12500: PPUSH
// result := false ;
12501: LD_ADDR_VAR 0 2
12505: PUSH
12506: LD_INT 0
12508: ST_TO_ADDR
// side := GetSide ( unit ) ;
12509: LD_ADDR_VAR 0 3
12513: PUSH
12514: LD_VAR 0 1
12518: PPUSH
12519: CALL_OW 255
12523: ST_TO_ADDR
// nat := GetNation ( unit ) ;
12524: LD_ADDR_VAR 0 4
12528: PUSH
12529: LD_VAR 0 1
12533: PPUSH
12534: CALL_OW 248
12538: ST_TO_ADDR
// case nat of 1 :
12539: LD_VAR 0 4
12543: PUSH
12544: LD_INT 1
12546: DOUBLE
12547: EQUAL
12548: IFTRUE 12552
12550: GO 12563
12552: POP
// tech := tech_lassight ; 2 :
12553: LD_ADDR_VAR 0 5
12557: PUSH
12558: LD_INT 12
12560: ST_TO_ADDR
12561: GO 12602
12563: LD_INT 2
12565: DOUBLE
12566: EQUAL
12567: IFTRUE 12571
12569: GO 12582
12571: POP
// tech := tech_mortar ; 3 :
12572: LD_ADDR_VAR 0 5
12576: PUSH
12577: LD_INT 41
12579: ST_TO_ADDR
12580: GO 12602
12582: LD_INT 3
12584: DOUBLE
12585: EQUAL
12586: IFTRUE 12590
12588: GO 12601
12590: POP
// tech := tech_bazooka ; end ;
12591: LD_ADDR_VAR 0 5
12595: PUSH
12596: LD_INT 44
12598: ST_TO_ADDR
12599: GO 12602
12601: POP
// if Researched ( side , tech ) then
12602: LD_VAR 0 3
12606: PPUSH
12607: LD_VAR 0 5
12611: PPUSH
12612: CALL_OW 325
12616: IFFALSE 12643
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
12618: LD_ADDR_VAR 0 2
12622: PUSH
12623: LD_INT 5
12625: PUSH
12626: LD_INT 8
12628: PUSH
12629: LD_INT 9
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: LIST
12636: PUSH
12637: LD_VAR 0 4
12641: ARRAY
12642: ST_TO_ADDR
// end ;
12643: LD_VAR 0 2
12647: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
12648: LD_INT 0
12650: PPUSH
12651: PPUSH
12652: PPUSH
// if not mines then
12653: LD_VAR 0 2
12657: NOT
12658: IFFALSE 12662
// exit ;
12660: GO 12806
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12662: LD_ADDR_VAR 0 5
12666: PUSH
12667: LD_INT 81
12669: PUSH
12670: LD_VAR 0 1
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PUSH
12679: LD_INT 3
12681: PUSH
12682: LD_INT 21
12684: PUSH
12685: LD_INT 3
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: PUSH
12692: EMPTY
12693: LIST
12694: LIST
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PPUSH
12700: CALL_OW 69
12704: ST_TO_ADDR
// for i in mines do
12705: LD_ADDR_VAR 0 4
12709: PUSH
12710: LD_VAR 0 2
12714: PUSH
12715: FOR_IN
12716: IFFALSE 12804
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12718: LD_VAR 0 4
12722: PUSH
12723: LD_INT 1
12725: ARRAY
12726: PPUSH
12727: LD_VAR 0 4
12731: PUSH
12732: LD_INT 2
12734: ARRAY
12735: PPUSH
12736: CALL_OW 458
12740: NOT
12741: IFFALSE 12745
// continue ;
12743: GO 12715
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12745: LD_VAR 0 4
12749: PUSH
12750: LD_INT 1
12752: ARRAY
12753: PPUSH
12754: LD_VAR 0 4
12758: PUSH
12759: LD_INT 2
12761: ARRAY
12762: PPUSH
12763: CALL_OW 428
12767: PUSH
12768: LD_VAR 0 5
12772: IN
12773: IFFALSE 12802
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12775: LD_VAR 0 4
12779: PUSH
12780: LD_INT 1
12782: ARRAY
12783: PPUSH
12784: LD_VAR 0 4
12788: PUSH
12789: LD_INT 2
12791: ARRAY
12792: PPUSH
12793: LD_VAR 0 1
12797: PPUSH
12798: CALL_OW 456
// end ;
12802: GO 12715
12804: POP
12805: POP
// end ;
12806: LD_VAR 0 3
12810: RET
// export function Count ( array ) ; begin
12811: LD_INT 0
12813: PPUSH
// result := array + 0 ;
12814: LD_ADDR_VAR 0 2
12818: PUSH
12819: LD_VAR 0 1
12823: PUSH
12824: LD_INT 0
12826: PLUS
12827: ST_TO_ADDR
// end ;
12828: LD_VAR 0 2
12832: RET
// export function IsEmpty ( building ) ; begin
12833: LD_INT 0
12835: PPUSH
// if not building then
12836: LD_VAR 0 1
12840: NOT
12841: IFFALSE 12845
// exit ;
12843: GO 12888
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12845: LD_ADDR_VAR 0 2
12849: PUSH
12850: LD_VAR 0 1
12854: PUSH
12855: LD_INT 22
12857: PUSH
12858: LD_VAR 0 1
12862: PPUSH
12863: CALL_OW 255
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: PUSH
12872: LD_INT 58
12874: PUSH
12875: EMPTY
12876: LIST
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: PPUSH
12882: CALL_OW 69
12886: IN
12887: ST_TO_ADDR
// end ;
12888: LD_VAR 0 2
12892: RET
// export function IsNotFull ( building ) ; var places ; begin
12893: LD_INT 0
12895: PPUSH
12896: PPUSH
// if not building then
12897: LD_VAR 0 1
12901: NOT
12902: IFFALSE 12906
// exit ;
12904: GO 13077
// result := false ;
12906: LD_ADDR_VAR 0 2
12910: PUSH
12911: LD_INT 0
12913: ST_TO_ADDR
// places := 0 ;
12914: LD_ADDR_VAR 0 3
12918: PUSH
12919: LD_INT 0
12921: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
12922: LD_VAR 0 1
12926: PPUSH
12927: CALL_OW 266
12931: PUSH
12932: LD_INT 0
12934: DOUBLE
12935: EQUAL
12936: IFTRUE 12994
12938: LD_INT 1
12940: DOUBLE
12941: EQUAL
12942: IFTRUE 12994
12944: LD_INT 6
12946: DOUBLE
12947: EQUAL
12948: IFTRUE 12994
12950: LD_INT 7
12952: DOUBLE
12953: EQUAL
12954: IFTRUE 12994
12956: LD_INT 8
12958: DOUBLE
12959: EQUAL
12960: IFTRUE 12994
12962: LD_INT 4
12964: DOUBLE
12965: EQUAL
12966: IFTRUE 12994
12968: LD_INT 5
12970: DOUBLE
12971: EQUAL
12972: IFTRUE 12994
12974: LD_INT 2
12976: DOUBLE
12977: EQUAL
12978: IFTRUE 12994
12980: LD_INT 3
12982: DOUBLE
12983: EQUAL
12984: IFTRUE 12994
12986: LD_INT 35
12988: DOUBLE
12989: EQUAL
12990: IFTRUE 12994
12992: GO 13005
12994: POP
// places := 6 ; b_bunker , b_breastwork :
12995: LD_ADDR_VAR 0 3
12999: PUSH
13000: LD_INT 6
13002: ST_TO_ADDR
13003: GO 13050
13005: LD_INT 32
13007: DOUBLE
13008: EQUAL
13009: IFTRUE 13019
13011: LD_INT 31
13013: DOUBLE
13014: EQUAL
13015: IFTRUE 13019
13017: GO 13030
13019: POP
// places := 1 ; b_control_tower :
13020: LD_ADDR_VAR 0 3
13024: PUSH
13025: LD_INT 1
13027: ST_TO_ADDR
13028: GO 13050
13030: LD_INT 36
13032: DOUBLE
13033: EQUAL
13034: IFTRUE 13038
13036: GO 13049
13038: POP
// places := 3 ; end ;
13039: LD_ADDR_VAR 0 3
13043: PUSH
13044: LD_INT 3
13046: ST_TO_ADDR
13047: GO 13050
13049: POP
// if places then
13050: LD_VAR 0 3
13054: IFFALSE 13077
// result := UnitsInside ( building ) < places ;
13056: LD_ADDR_VAR 0 2
13060: PUSH
13061: LD_VAR 0 1
13065: PPUSH
13066: CALL_OW 313
13070: PUSH
13071: LD_VAR 0 3
13075: LESS
13076: ST_TO_ADDR
// end ;
13077: LD_VAR 0 2
13081: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
13082: LD_INT 0
13084: PPUSH
13085: PPUSH
13086: PPUSH
13087: PPUSH
// tmp := [ ] ;
13088: LD_ADDR_VAR 0 3
13092: PUSH
13093: EMPTY
13094: ST_TO_ADDR
// list := [ ] ;
13095: LD_ADDR_VAR 0 5
13099: PUSH
13100: EMPTY
13101: ST_TO_ADDR
// for i = 16 to 25 do
13102: LD_ADDR_VAR 0 4
13106: PUSH
13107: DOUBLE
13108: LD_INT 16
13110: DEC
13111: ST_TO_ADDR
13112: LD_INT 25
13114: PUSH
13115: FOR_TO
13116: IFFALSE 13189
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
13118: LD_ADDR_VAR 0 3
13122: PUSH
13123: LD_VAR 0 3
13127: PUSH
13128: LD_INT 22
13130: PUSH
13131: LD_VAR 0 1
13135: PPUSH
13136: CALL_OW 255
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: PUSH
13145: LD_INT 91
13147: PUSH
13148: LD_VAR 0 1
13152: PUSH
13153: LD_INT 6
13155: PUSH
13156: EMPTY
13157: LIST
13158: LIST
13159: LIST
13160: PUSH
13161: LD_INT 30
13163: PUSH
13164: LD_VAR 0 4
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: LIST
13177: PUSH
13178: EMPTY
13179: LIST
13180: PPUSH
13181: CALL_OW 69
13185: ADD
13186: ST_TO_ADDR
13187: GO 13115
13189: POP
13190: POP
// for i = 1 to tmp do
13191: LD_ADDR_VAR 0 4
13195: PUSH
13196: DOUBLE
13197: LD_INT 1
13199: DEC
13200: ST_TO_ADDR
13201: LD_VAR 0 3
13205: PUSH
13206: FOR_TO
13207: IFFALSE 13295
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
13209: LD_ADDR_VAR 0 5
13213: PUSH
13214: LD_VAR 0 5
13218: PUSH
13219: LD_VAR 0 3
13223: PUSH
13224: LD_VAR 0 4
13228: ARRAY
13229: PPUSH
13230: CALL_OW 266
13234: PUSH
13235: LD_VAR 0 3
13239: PUSH
13240: LD_VAR 0 4
13244: ARRAY
13245: PPUSH
13246: CALL_OW 250
13250: PUSH
13251: LD_VAR 0 3
13255: PUSH
13256: LD_VAR 0 4
13260: ARRAY
13261: PPUSH
13262: CALL_OW 251
13266: PUSH
13267: LD_VAR 0 3
13271: PUSH
13272: LD_VAR 0 4
13276: ARRAY
13277: PPUSH
13278: CALL_OW 254
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: PUSH
13289: EMPTY
13290: LIST
13291: ADD
13292: ST_TO_ADDR
13293: GO 13206
13295: POP
13296: POP
// result := list ;
13297: LD_ADDR_VAR 0 2
13301: PUSH
13302: LD_VAR 0 5
13306: ST_TO_ADDR
// end ;
13307: LD_VAR 0 2
13311: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
13312: LD_INT 0
13314: PPUSH
13315: PPUSH
13316: PPUSH
13317: PPUSH
13318: PPUSH
13319: PPUSH
13320: PPUSH
// if not factory then
13321: LD_VAR 0 1
13325: NOT
13326: IFFALSE 13330
// exit ;
13328: GO 13923
// if control = control_apeman then
13330: LD_VAR 0 4
13334: PUSH
13335: LD_INT 5
13337: EQUAL
13338: IFFALSE 13447
// begin tmp := UnitsInside ( factory ) ;
13340: LD_ADDR_VAR 0 8
13344: PUSH
13345: LD_VAR 0 1
13349: PPUSH
13350: CALL_OW 313
13354: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
13355: LD_VAR 0 8
13359: PPUSH
13360: LD_INT 25
13362: PUSH
13363: LD_INT 12
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: PPUSH
13370: CALL_OW 72
13374: NOT
13375: IFFALSE 13385
// control := control_manual ;
13377: LD_ADDR_VAR 0 4
13381: PUSH
13382: LD_INT 1
13384: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
13385: LD_ADDR_VAR 0 8
13389: PUSH
13390: LD_VAR 0 1
13394: PPUSH
13395: CALL 13082 0 1
13399: ST_TO_ADDR
// if tmp then
13400: LD_VAR 0 8
13404: IFFALSE 13447
// begin for i in tmp do
13406: LD_ADDR_VAR 0 7
13410: PUSH
13411: LD_VAR 0 8
13415: PUSH
13416: FOR_IN
13417: IFFALSE 13445
// if i [ 1 ] = b_ext_radio then
13419: LD_VAR 0 7
13423: PUSH
13424: LD_INT 1
13426: ARRAY
13427: PUSH
13428: LD_INT 22
13430: EQUAL
13431: IFFALSE 13443
// begin control := control_remote ;
13433: LD_ADDR_VAR 0 4
13437: PUSH
13438: LD_INT 2
13440: ST_TO_ADDR
// break ;
13441: GO 13445
// end ;
13443: GO 13416
13445: POP
13446: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13447: LD_VAR 0 1
13451: PPUSH
13452: LD_VAR 0 2
13456: PPUSH
13457: LD_VAR 0 3
13461: PPUSH
13462: LD_VAR 0 4
13466: PPUSH
13467: LD_VAR 0 5
13471: PPUSH
13472: CALL_OW 448
13476: IFFALSE 13511
// begin result := [ chassis , engine , control , weapon ] ;
13478: LD_ADDR_VAR 0 6
13482: PUSH
13483: LD_VAR 0 2
13487: PUSH
13488: LD_VAR 0 3
13492: PUSH
13493: LD_VAR 0 4
13497: PUSH
13498: LD_VAR 0 5
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: ST_TO_ADDR
// exit ;
13509: GO 13923
// end ; _chassis := AvailableChassisList ( factory ) ;
13511: LD_ADDR_VAR 0 9
13515: PUSH
13516: LD_VAR 0 1
13520: PPUSH
13521: CALL_OW 475
13525: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
13526: LD_ADDR_VAR 0 11
13530: PUSH
13531: LD_VAR 0 1
13535: PPUSH
13536: CALL_OW 476
13540: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
13541: LD_ADDR_VAR 0 12
13545: PUSH
13546: LD_VAR 0 1
13550: PPUSH
13551: CALL_OW 477
13555: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
13556: LD_ADDR_VAR 0 10
13560: PUSH
13561: LD_VAR 0 1
13565: PPUSH
13566: CALL_OW 478
13570: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
13571: LD_VAR 0 9
13575: NOT
13576: PUSH
13577: LD_VAR 0 11
13581: NOT
13582: OR
13583: PUSH
13584: LD_VAR 0 12
13588: NOT
13589: OR
13590: PUSH
13591: LD_VAR 0 10
13595: NOT
13596: OR
13597: IFFALSE 13632
// begin result := [ chassis , engine , control , weapon ] ;
13599: LD_ADDR_VAR 0 6
13603: PUSH
13604: LD_VAR 0 2
13608: PUSH
13609: LD_VAR 0 3
13613: PUSH
13614: LD_VAR 0 4
13618: PUSH
13619: LD_VAR 0 5
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: ST_TO_ADDR
// exit ;
13630: GO 13923
// end ; if not chassis in _chassis then
13632: LD_VAR 0 2
13636: PUSH
13637: LD_VAR 0 9
13641: IN
13642: NOT
13643: IFFALSE 13669
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
13645: LD_ADDR_VAR 0 2
13649: PUSH
13650: LD_VAR 0 9
13654: PUSH
13655: LD_INT 1
13657: PPUSH
13658: LD_VAR 0 9
13662: PPUSH
13663: CALL_OW 12
13667: ARRAY
13668: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
13669: LD_VAR 0 2
13673: PPUSH
13674: LD_VAR 0 3
13678: PPUSH
13679: CALL 13928 0 2
13683: NOT
13684: IFFALSE 13743
// repeat engine := _engine [ 1 ] ;
13686: LD_ADDR_VAR 0 3
13690: PUSH
13691: LD_VAR 0 11
13695: PUSH
13696: LD_INT 1
13698: ARRAY
13699: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
13700: LD_ADDR_VAR 0 11
13704: PUSH
13705: LD_VAR 0 11
13709: PPUSH
13710: LD_INT 1
13712: PPUSH
13713: CALL_OW 3
13717: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
13718: LD_VAR 0 2
13722: PPUSH
13723: LD_VAR 0 3
13727: PPUSH
13728: CALL 13928 0 2
13732: PUSH
13733: LD_VAR 0 11
13737: PUSH
13738: EMPTY
13739: EQUAL
13740: OR
13741: IFFALSE 13686
// if not control in _control then
13743: LD_VAR 0 4
13747: PUSH
13748: LD_VAR 0 12
13752: IN
13753: NOT
13754: IFFALSE 13780
// control := _control [ rand ( 1 , _control ) ] ;
13756: LD_ADDR_VAR 0 4
13760: PUSH
13761: LD_VAR 0 12
13765: PUSH
13766: LD_INT 1
13768: PPUSH
13769: LD_VAR 0 12
13773: PPUSH
13774: CALL_OW 12
13778: ARRAY
13779: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13780: LD_VAR 0 2
13784: PPUSH
13785: LD_VAR 0 5
13789: PPUSH
13790: CALL 14148 0 2
13794: NOT
13795: IFFALSE 13854
// repeat weapon := _weapon [ 1 ] ;
13797: LD_ADDR_VAR 0 5
13801: PUSH
13802: LD_VAR 0 10
13806: PUSH
13807: LD_INT 1
13809: ARRAY
13810: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13811: LD_ADDR_VAR 0 10
13815: PUSH
13816: LD_VAR 0 10
13820: PPUSH
13821: LD_INT 1
13823: PPUSH
13824: CALL_OW 3
13828: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13829: LD_VAR 0 2
13833: PPUSH
13834: LD_VAR 0 5
13838: PPUSH
13839: CALL 14148 0 2
13843: PUSH
13844: LD_VAR 0 10
13848: PUSH
13849: EMPTY
13850: EQUAL
13851: OR
13852: IFFALSE 13797
// result := [ ] ;
13854: LD_ADDR_VAR 0 6
13858: PUSH
13859: EMPTY
13860: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13861: LD_VAR 0 1
13865: PPUSH
13866: LD_VAR 0 2
13870: PPUSH
13871: LD_VAR 0 3
13875: PPUSH
13876: LD_VAR 0 4
13880: PPUSH
13881: LD_VAR 0 5
13885: PPUSH
13886: CALL_OW 448
13890: IFFALSE 13923
// result := [ chassis , engine , control , weapon ] ;
13892: LD_ADDR_VAR 0 6
13896: PUSH
13897: LD_VAR 0 2
13901: PUSH
13902: LD_VAR 0 3
13906: PUSH
13907: LD_VAR 0 4
13911: PUSH
13912: LD_VAR 0 5
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: ST_TO_ADDR
// end ;
13923: LD_VAR 0 6
13927: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13928: LD_INT 0
13930: PPUSH
// if not chassis or not engine then
13931: LD_VAR 0 1
13935: NOT
13936: PUSH
13937: LD_VAR 0 2
13941: NOT
13942: OR
13943: IFFALSE 13947
// exit ;
13945: GO 14143
// case engine of engine_solar :
13947: LD_VAR 0 2
13951: PUSH
13952: LD_INT 2
13954: DOUBLE
13955: EQUAL
13956: IFTRUE 13960
13958: GO 13998
13960: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13961: LD_ADDR_VAR 0 3
13965: PUSH
13966: LD_INT 11
13968: PUSH
13969: LD_INT 12
13971: PUSH
13972: LD_INT 13
13974: PUSH
13975: LD_INT 14
13977: PUSH
13978: LD_INT 1
13980: PUSH
13981: LD_INT 2
13983: PUSH
13984: LD_INT 3
13986: PUSH
13987: EMPTY
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: ST_TO_ADDR
13996: GO 14127
13998: LD_INT 1
14000: DOUBLE
14001: EQUAL
14002: IFTRUE 14006
14004: GO 14068
14006: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
14007: LD_ADDR_VAR 0 3
14011: PUSH
14012: LD_INT 11
14014: PUSH
14015: LD_INT 12
14017: PUSH
14018: LD_INT 13
14020: PUSH
14021: LD_INT 14
14023: PUSH
14024: LD_INT 1
14026: PUSH
14027: LD_INT 2
14029: PUSH
14030: LD_INT 3
14032: PUSH
14033: LD_INT 4
14035: PUSH
14036: LD_INT 5
14038: PUSH
14039: LD_INT 21
14041: PUSH
14042: LD_INT 23
14044: PUSH
14045: LD_INT 22
14047: PUSH
14048: LD_INT 24
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: ST_TO_ADDR
14066: GO 14127
14068: LD_INT 3
14070: DOUBLE
14071: EQUAL
14072: IFTRUE 14076
14074: GO 14126
14076: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14077: LD_ADDR_VAR 0 3
14081: PUSH
14082: LD_INT 13
14084: PUSH
14085: LD_INT 14
14087: PUSH
14088: LD_INT 2
14090: PUSH
14091: LD_INT 3
14093: PUSH
14094: LD_INT 4
14096: PUSH
14097: LD_INT 5
14099: PUSH
14100: LD_INT 21
14102: PUSH
14103: LD_INT 22
14105: PUSH
14106: LD_INT 23
14108: PUSH
14109: LD_INT 24
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: ST_TO_ADDR
14124: GO 14127
14126: POP
// result := ( chassis in result ) ;
14127: LD_ADDR_VAR 0 3
14131: PUSH
14132: LD_VAR 0 1
14136: PUSH
14137: LD_VAR 0 3
14141: IN
14142: ST_TO_ADDR
// end ;
14143: LD_VAR 0 3
14147: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
14148: LD_INT 0
14150: PPUSH
// if not chassis or not weapon then
14151: LD_VAR 0 1
14155: NOT
14156: PUSH
14157: LD_VAR 0 2
14161: NOT
14162: OR
14163: IFFALSE 14167
// exit ;
14165: GO 15227
// case weapon of us_machine_gun :
14167: LD_VAR 0 2
14171: PUSH
14172: LD_INT 2
14174: DOUBLE
14175: EQUAL
14176: IFTRUE 14180
14178: GO 14210
14180: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
14181: LD_ADDR_VAR 0 3
14185: PUSH
14186: LD_INT 1
14188: PUSH
14189: LD_INT 2
14191: PUSH
14192: LD_INT 3
14194: PUSH
14195: LD_INT 4
14197: PUSH
14198: LD_INT 5
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: ST_TO_ADDR
14208: GO 15211
14210: LD_INT 3
14212: DOUBLE
14213: EQUAL
14214: IFTRUE 14218
14216: GO 14248
14218: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
14219: LD_ADDR_VAR 0 3
14223: PUSH
14224: LD_INT 1
14226: PUSH
14227: LD_INT 2
14229: PUSH
14230: LD_INT 3
14232: PUSH
14233: LD_INT 4
14235: PUSH
14236: LD_INT 5
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: ST_TO_ADDR
14246: GO 15211
14248: LD_INT 11
14250: DOUBLE
14251: EQUAL
14252: IFTRUE 14256
14254: GO 14286
14256: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
14257: LD_ADDR_VAR 0 3
14261: PUSH
14262: LD_INT 1
14264: PUSH
14265: LD_INT 2
14267: PUSH
14268: LD_INT 3
14270: PUSH
14271: LD_INT 4
14273: PUSH
14274: LD_INT 5
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: ST_TO_ADDR
14284: GO 15211
14286: LD_INT 4
14288: DOUBLE
14289: EQUAL
14290: IFTRUE 14294
14292: GO 14320
14294: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
14295: LD_ADDR_VAR 0 3
14299: PUSH
14300: LD_INT 2
14302: PUSH
14303: LD_INT 3
14305: PUSH
14306: LD_INT 4
14308: PUSH
14309: LD_INT 5
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: ST_TO_ADDR
14318: GO 15211
14320: LD_INT 5
14322: DOUBLE
14323: EQUAL
14324: IFTRUE 14328
14326: GO 14354
14328: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
14329: LD_ADDR_VAR 0 3
14333: PUSH
14334: LD_INT 2
14336: PUSH
14337: LD_INT 3
14339: PUSH
14340: LD_INT 4
14342: PUSH
14343: LD_INT 5
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: ST_TO_ADDR
14352: GO 15211
14354: LD_INT 9
14356: DOUBLE
14357: EQUAL
14358: IFTRUE 14362
14360: GO 14388
14362: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
14363: LD_ADDR_VAR 0 3
14367: PUSH
14368: LD_INT 2
14370: PUSH
14371: LD_INT 3
14373: PUSH
14374: LD_INT 4
14376: PUSH
14377: LD_INT 5
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: ST_TO_ADDR
14386: GO 15211
14388: LD_INT 7
14390: DOUBLE
14391: EQUAL
14392: IFTRUE 14396
14394: GO 14422
14396: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
14397: LD_ADDR_VAR 0 3
14401: PUSH
14402: LD_INT 2
14404: PUSH
14405: LD_INT 3
14407: PUSH
14408: LD_INT 4
14410: PUSH
14411: LD_INT 5
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: ST_TO_ADDR
14420: GO 15211
14422: LD_INT 12
14424: DOUBLE
14425: EQUAL
14426: IFTRUE 14430
14428: GO 14456
14430: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
14431: LD_ADDR_VAR 0 3
14435: PUSH
14436: LD_INT 2
14438: PUSH
14439: LD_INT 3
14441: PUSH
14442: LD_INT 4
14444: PUSH
14445: LD_INT 5
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: ST_TO_ADDR
14454: GO 15211
14456: LD_INT 13
14458: DOUBLE
14459: EQUAL
14460: IFTRUE 14464
14462: GO 14490
14464: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
14465: LD_ADDR_VAR 0 3
14469: PUSH
14470: LD_INT 2
14472: PUSH
14473: LD_INT 3
14475: PUSH
14476: LD_INT 4
14478: PUSH
14479: LD_INT 5
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: ST_TO_ADDR
14488: GO 15211
14490: LD_INT 14
14492: DOUBLE
14493: EQUAL
14494: IFTRUE 14498
14496: GO 14516
14498: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
14499: LD_ADDR_VAR 0 3
14503: PUSH
14504: LD_INT 4
14506: PUSH
14507: LD_INT 5
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: ST_TO_ADDR
14514: GO 15211
14516: LD_INT 6
14518: DOUBLE
14519: EQUAL
14520: IFTRUE 14524
14522: GO 14542
14524: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
14525: LD_ADDR_VAR 0 3
14529: PUSH
14530: LD_INT 4
14532: PUSH
14533: LD_INT 5
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: ST_TO_ADDR
14540: GO 15211
14542: LD_INT 10
14544: DOUBLE
14545: EQUAL
14546: IFTRUE 14550
14548: GO 14568
14550: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
14551: LD_ADDR_VAR 0 3
14555: PUSH
14556: LD_INT 4
14558: PUSH
14559: LD_INT 5
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: ST_TO_ADDR
14566: GO 15211
14568: LD_INT 22
14570: DOUBLE
14571: EQUAL
14572: IFTRUE 14576
14574: GO 14602
14576: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
14577: LD_ADDR_VAR 0 3
14581: PUSH
14582: LD_INT 11
14584: PUSH
14585: LD_INT 12
14587: PUSH
14588: LD_INT 13
14590: PUSH
14591: LD_INT 14
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: ST_TO_ADDR
14600: GO 15211
14602: LD_INT 23
14604: DOUBLE
14605: EQUAL
14606: IFTRUE 14610
14608: GO 14636
14610: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
14611: LD_ADDR_VAR 0 3
14615: PUSH
14616: LD_INT 11
14618: PUSH
14619: LD_INT 12
14621: PUSH
14622: LD_INT 13
14624: PUSH
14625: LD_INT 14
14627: PUSH
14628: EMPTY
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: ST_TO_ADDR
14634: GO 15211
14636: LD_INT 24
14638: DOUBLE
14639: EQUAL
14640: IFTRUE 14644
14642: GO 14670
14644: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
14645: LD_ADDR_VAR 0 3
14649: PUSH
14650: LD_INT 11
14652: PUSH
14653: LD_INT 12
14655: PUSH
14656: LD_INT 13
14658: PUSH
14659: LD_INT 14
14661: PUSH
14662: EMPTY
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: ST_TO_ADDR
14668: GO 15211
14670: LD_INT 30
14672: DOUBLE
14673: EQUAL
14674: IFTRUE 14678
14676: GO 14704
14678: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
14679: LD_ADDR_VAR 0 3
14683: PUSH
14684: LD_INT 11
14686: PUSH
14687: LD_INT 12
14689: PUSH
14690: LD_INT 13
14692: PUSH
14693: LD_INT 14
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: ST_TO_ADDR
14702: GO 15211
14704: LD_INT 25
14706: DOUBLE
14707: EQUAL
14708: IFTRUE 14712
14710: GO 14730
14712: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
14713: LD_ADDR_VAR 0 3
14717: PUSH
14718: LD_INT 13
14720: PUSH
14721: LD_INT 14
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: ST_TO_ADDR
14728: GO 15211
14730: LD_INT 27
14732: DOUBLE
14733: EQUAL
14734: IFTRUE 14738
14736: GO 14756
14738: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
14739: LD_ADDR_VAR 0 3
14743: PUSH
14744: LD_INT 13
14746: PUSH
14747: LD_INT 14
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: ST_TO_ADDR
14754: GO 15211
14756: LD_INT 92
14758: DOUBLE
14759: EQUAL
14760: IFTRUE 14764
14762: GO 14790
14764: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14765: LD_ADDR_VAR 0 3
14769: PUSH
14770: LD_INT 11
14772: PUSH
14773: LD_INT 12
14775: PUSH
14776: LD_INT 13
14778: PUSH
14779: LD_INT 14
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: ST_TO_ADDR
14788: GO 15211
14790: LD_INT 28
14792: DOUBLE
14793: EQUAL
14794: IFTRUE 14798
14796: GO 14816
14798: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14799: LD_ADDR_VAR 0 3
14803: PUSH
14804: LD_INT 13
14806: PUSH
14807: LD_INT 14
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: ST_TO_ADDR
14814: GO 15211
14816: LD_INT 29
14818: DOUBLE
14819: EQUAL
14820: IFTRUE 14824
14822: GO 14842
14824: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14825: LD_ADDR_VAR 0 3
14829: PUSH
14830: LD_INT 13
14832: PUSH
14833: LD_INT 14
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: ST_TO_ADDR
14840: GO 15211
14842: LD_INT 31
14844: DOUBLE
14845: EQUAL
14846: IFTRUE 14850
14848: GO 14868
14850: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14851: LD_ADDR_VAR 0 3
14855: PUSH
14856: LD_INT 13
14858: PUSH
14859: LD_INT 14
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: ST_TO_ADDR
14866: GO 15211
14868: LD_INT 26
14870: DOUBLE
14871: EQUAL
14872: IFTRUE 14876
14874: GO 14894
14876: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14877: LD_ADDR_VAR 0 3
14881: PUSH
14882: LD_INT 13
14884: PUSH
14885: LD_INT 14
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: ST_TO_ADDR
14892: GO 15211
14894: LD_INT 42
14896: DOUBLE
14897: EQUAL
14898: IFTRUE 14902
14900: GO 14928
14902: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14903: LD_ADDR_VAR 0 3
14907: PUSH
14908: LD_INT 21
14910: PUSH
14911: LD_INT 22
14913: PUSH
14914: LD_INT 23
14916: PUSH
14917: LD_INT 24
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: ST_TO_ADDR
14926: GO 15211
14928: LD_INT 43
14930: DOUBLE
14931: EQUAL
14932: IFTRUE 14936
14934: GO 14962
14936: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14937: LD_ADDR_VAR 0 3
14941: PUSH
14942: LD_INT 21
14944: PUSH
14945: LD_INT 22
14947: PUSH
14948: LD_INT 23
14950: PUSH
14951: LD_INT 24
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: ST_TO_ADDR
14960: GO 15211
14962: LD_INT 44
14964: DOUBLE
14965: EQUAL
14966: IFTRUE 14970
14968: GO 14996
14970: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14971: LD_ADDR_VAR 0 3
14975: PUSH
14976: LD_INT 21
14978: PUSH
14979: LD_INT 22
14981: PUSH
14982: LD_INT 23
14984: PUSH
14985: LD_INT 24
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: ST_TO_ADDR
14994: GO 15211
14996: LD_INT 45
14998: DOUBLE
14999: EQUAL
15000: IFTRUE 15004
15002: GO 15030
15004: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
15005: LD_ADDR_VAR 0 3
15009: PUSH
15010: LD_INT 21
15012: PUSH
15013: LD_INT 22
15015: PUSH
15016: LD_INT 23
15018: PUSH
15019: LD_INT 24
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: ST_TO_ADDR
15028: GO 15211
15030: LD_INT 49
15032: DOUBLE
15033: EQUAL
15034: IFTRUE 15038
15036: GO 15064
15038: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
15039: LD_ADDR_VAR 0 3
15043: PUSH
15044: LD_INT 21
15046: PUSH
15047: LD_INT 22
15049: PUSH
15050: LD_INT 23
15052: PUSH
15053: LD_INT 24
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: ST_TO_ADDR
15062: GO 15211
15064: LD_INT 51
15066: DOUBLE
15067: EQUAL
15068: IFTRUE 15072
15070: GO 15098
15072: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
15073: LD_ADDR_VAR 0 3
15077: PUSH
15078: LD_INT 21
15080: PUSH
15081: LD_INT 22
15083: PUSH
15084: LD_INT 23
15086: PUSH
15087: LD_INT 24
15089: PUSH
15090: EMPTY
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: ST_TO_ADDR
15096: GO 15211
15098: LD_INT 52
15100: DOUBLE
15101: EQUAL
15102: IFTRUE 15106
15104: GO 15132
15106: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
15107: LD_ADDR_VAR 0 3
15111: PUSH
15112: LD_INT 21
15114: PUSH
15115: LD_INT 22
15117: PUSH
15118: LD_INT 23
15120: PUSH
15121: LD_INT 24
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: ST_TO_ADDR
15130: GO 15211
15132: LD_INT 53
15134: DOUBLE
15135: EQUAL
15136: IFTRUE 15140
15138: GO 15158
15140: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
15141: LD_ADDR_VAR 0 3
15145: PUSH
15146: LD_INT 23
15148: PUSH
15149: LD_INT 24
15151: PUSH
15152: EMPTY
15153: LIST
15154: LIST
15155: ST_TO_ADDR
15156: GO 15211
15158: LD_INT 46
15160: DOUBLE
15161: EQUAL
15162: IFTRUE 15166
15164: GO 15184
15166: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
15167: LD_ADDR_VAR 0 3
15171: PUSH
15172: LD_INT 23
15174: PUSH
15175: LD_INT 24
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: ST_TO_ADDR
15182: GO 15211
15184: LD_INT 47
15186: DOUBLE
15187: EQUAL
15188: IFTRUE 15192
15190: GO 15210
15192: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15193: LD_ADDR_VAR 0 3
15197: PUSH
15198: LD_INT 23
15200: PUSH
15201: LD_INT 24
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: ST_TO_ADDR
15208: GO 15211
15210: POP
// result := ( chassis in result ) ;
15211: LD_ADDR_VAR 0 3
15215: PUSH
15216: LD_VAR 0 1
15220: PUSH
15221: LD_VAR 0 3
15225: IN
15226: ST_TO_ADDR
// end ;
15227: LD_VAR 0 3
15231: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
15232: LD_INT 0
15234: PPUSH
15235: PPUSH
15236: PPUSH
15237: PPUSH
15238: PPUSH
15239: PPUSH
15240: PPUSH
// result := array ;
15241: LD_ADDR_VAR 0 5
15245: PUSH
15246: LD_VAR 0 1
15250: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
15251: LD_VAR 0 1
15255: NOT
15256: PUSH
15257: LD_VAR 0 2
15261: NOT
15262: OR
15263: PUSH
15264: LD_VAR 0 3
15268: NOT
15269: OR
15270: PUSH
15271: LD_VAR 0 2
15275: PUSH
15276: LD_VAR 0 1
15280: GREATER
15281: OR
15282: PUSH
15283: LD_VAR 0 3
15287: PUSH
15288: LD_VAR 0 1
15292: GREATER
15293: OR
15294: IFFALSE 15298
// exit ;
15296: GO 15594
// if direction then
15298: LD_VAR 0 4
15302: IFFALSE 15366
// begin d := 1 ;
15304: LD_ADDR_VAR 0 9
15308: PUSH
15309: LD_INT 1
15311: ST_TO_ADDR
// if i_from > i_to then
15312: LD_VAR 0 2
15316: PUSH
15317: LD_VAR 0 3
15321: GREATER
15322: IFFALSE 15348
// length := ( array - i_from ) + i_to else
15324: LD_ADDR_VAR 0 11
15328: PUSH
15329: LD_VAR 0 1
15333: PUSH
15334: LD_VAR 0 2
15338: MINUS
15339: PUSH
15340: LD_VAR 0 3
15344: PLUS
15345: ST_TO_ADDR
15346: GO 15364
// length := i_to - i_from ;
15348: LD_ADDR_VAR 0 11
15352: PUSH
15353: LD_VAR 0 3
15357: PUSH
15358: LD_VAR 0 2
15362: MINUS
15363: ST_TO_ADDR
// end else
15364: GO 15427
// begin d := - 1 ;
15366: LD_ADDR_VAR 0 9
15370: PUSH
15371: LD_INT 1
15373: NEG
15374: ST_TO_ADDR
// if i_from > i_to then
15375: LD_VAR 0 2
15379: PUSH
15380: LD_VAR 0 3
15384: GREATER
15385: IFFALSE 15405
// length := i_from - i_to else
15387: LD_ADDR_VAR 0 11
15391: PUSH
15392: LD_VAR 0 2
15396: PUSH
15397: LD_VAR 0 3
15401: MINUS
15402: ST_TO_ADDR
15403: GO 15427
// length := ( array - i_to ) + i_from ;
15405: LD_ADDR_VAR 0 11
15409: PUSH
15410: LD_VAR 0 1
15414: PUSH
15415: LD_VAR 0 3
15419: MINUS
15420: PUSH
15421: LD_VAR 0 2
15425: PLUS
15426: ST_TO_ADDR
// end ; if not length then
15427: LD_VAR 0 11
15431: NOT
15432: IFFALSE 15436
// exit ;
15434: GO 15594
// tmp := array ;
15436: LD_ADDR_VAR 0 10
15440: PUSH
15441: LD_VAR 0 1
15445: ST_TO_ADDR
// for i = 1 to length do
15446: LD_ADDR_VAR 0 6
15450: PUSH
15451: DOUBLE
15452: LD_INT 1
15454: DEC
15455: ST_TO_ADDR
15456: LD_VAR 0 11
15460: PUSH
15461: FOR_TO
15462: IFFALSE 15582
// begin for j = 1 to array do
15464: LD_ADDR_VAR 0 7
15468: PUSH
15469: DOUBLE
15470: LD_INT 1
15472: DEC
15473: ST_TO_ADDR
15474: LD_VAR 0 1
15478: PUSH
15479: FOR_TO
15480: IFFALSE 15568
// begin k := j + d ;
15482: LD_ADDR_VAR 0 8
15486: PUSH
15487: LD_VAR 0 7
15491: PUSH
15492: LD_VAR 0 9
15496: PLUS
15497: ST_TO_ADDR
// if k > array then
15498: LD_VAR 0 8
15502: PUSH
15503: LD_VAR 0 1
15507: GREATER
15508: IFFALSE 15518
// k := 1 ;
15510: LD_ADDR_VAR 0 8
15514: PUSH
15515: LD_INT 1
15517: ST_TO_ADDR
// if not k then
15518: LD_VAR 0 8
15522: NOT
15523: IFFALSE 15535
// k := array ;
15525: LD_ADDR_VAR 0 8
15529: PUSH
15530: LD_VAR 0 1
15534: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
15535: LD_ADDR_VAR 0 10
15539: PUSH
15540: LD_VAR 0 10
15544: PPUSH
15545: LD_VAR 0 8
15549: PPUSH
15550: LD_VAR 0 1
15554: PUSH
15555: LD_VAR 0 7
15559: ARRAY
15560: PPUSH
15561: CALL_OW 1
15565: ST_TO_ADDR
// end ;
15566: GO 15479
15568: POP
15569: POP
// array := tmp ;
15570: LD_ADDR_VAR 0 1
15574: PUSH
15575: LD_VAR 0 10
15579: ST_TO_ADDR
// end ;
15580: GO 15461
15582: POP
15583: POP
// result := array ;
15584: LD_ADDR_VAR 0 5
15588: PUSH
15589: LD_VAR 0 1
15593: ST_TO_ADDR
// end ;
15594: LD_VAR 0 5
15598: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
15599: LD_INT 0
15601: PPUSH
15602: PPUSH
// result := 0 ;
15603: LD_ADDR_VAR 0 3
15607: PUSH
15608: LD_INT 0
15610: ST_TO_ADDR
// if not array or not value in array then
15611: LD_VAR 0 1
15615: NOT
15616: PUSH
15617: LD_VAR 0 2
15621: PUSH
15622: LD_VAR 0 1
15626: IN
15627: NOT
15628: OR
15629: IFFALSE 15633
// exit ;
15631: GO 15687
// for i = 1 to array do
15633: LD_ADDR_VAR 0 4
15637: PUSH
15638: DOUBLE
15639: LD_INT 1
15641: DEC
15642: ST_TO_ADDR
15643: LD_VAR 0 1
15647: PUSH
15648: FOR_TO
15649: IFFALSE 15685
// if value = array [ i ] then
15651: LD_VAR 0 2
15655: PUSH
15656: LD_VAR 0 1
15660: PUSH
15661: LD_VAR 0 4
15665: ARRAY
15666: EQUAL
15667: IFFALSE 15683
// begin result := i ;
15669: LD_ADDR_VAR 0 3
15673: PUSH
15674: LD_VAR 0 4
15678: ST_TO_ADDR
// exit ;
15679: POP
15680: POP
15681: GO 15687
// end ;
15683: GO 15648
15685: POP
15686: POP
// end ;
15687: LD_VAR 0 3
15691: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
15692: LD_INT 0
15694: PPUSH
// vc_chassis := chassis ;
15695: LD_ADDR_OWVAR 37
15699: PUSH
15700: LD_VAR 0 1
15704: ST_TO_ADDR
// vc_engine := engine ;
15705: LD_ADDR_OWVAR 39
15709: PUSH
15710: LD_VAR 0 2
15714: ST_TO_ADDR
// vc_control := control ;
15715: LD_ADDR_OWVAR 38
15719: PUSH
15720: LD_VAR 0 3
15724: ST_TO_ADDR
// vc_weapon := weapon ;
15725: LD_ADDR_OWVAR 40
15729: PUSH
15730: LD_VAR 0 4
15734: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15735: LD_ADDR_OWVAR 41
15739: PUSH
15740: LD_VAR 0 5
15744: ST_TO_ADDR
// end ;
15745: LD_VAR 0 6
15749: RET
// export function WantPlant ( unit ) ; var task ; begin
15750: LD_INT 0
15752: PPUSH
15753: PPUSH
// result := false ;
15754: LD_ADDR_VAR 0 2
15758: PUSH
15759: LD_INT 0
15761: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15762: LD_ADDR_VAR 0 3
15766: PUSH
15767: LD_VAR 0 1
15771: PPUSH
15772: CALL_OW 437
15776: ST_TO_ADDR
// if task then
15777: LD_VAR 0 3
15781: IFFALSE 15809
// if task [ 1 ] [ 1 ] = p then
15783: LD_VAR 0 3
15787: PUSH
15788: LD_INT 1
15790: ARRAY
15791: PUSH
15792: LD_INT 1
15794: ARRAY
15795: PUSH
15796: LD_STRING p
15798: EQUAL
15799: IFFALSE 15809
// result := true ;
15801: LD_ADDR_VAR 0 2
15805: PUSH
15806: LD_INT 1
15808: ST_TO_ADDR
// end ;
15809: LD_VAR 0 2
15813: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15814: LD_INT 0
15816: PPUSH
15817: PPUSH
15818: PPUSH
15819: PPUSH
// if pos < 1 then
15820: LD_VAR 0 2
15824: PUSH
15825: LD_INT 1
15827: LESS
15828: IFFALSE 15832
// exit ;
15830: GO 16135
// if pos = 1 then
15832: LD_VAR 0 2
15836: PUSH
15837: LD_INT 1
15839: EQUAL
15840: IFFALSE 15873
// result := Replace ( arr , pos [ 1 ] , value ) else
15842: LD_ADDR_VAR 0 4
15846: PUSH
15847: LD_VAR 0 1
15851: PPUSH
15852: LD_VAR 0 2
15856: PUSH
15857: LD_INT 1
15859: ARRAY
15860: PPUSH
15861: LD_VAR 0 3
15865: PPUSH
15866: CALL_OW 1
15870: ST_TO_ADDR
15871: GO 16135
// begin tmp := arr ;
15873: LD_ADDR_VAR 0 6
15877: PUSH
15878: LD_VAR 0 1
15882: ST_TO_ADDR
// s_arr := [ tmp ] ;
15883: LD_ADDR_VAR 0 7
15887: PUSH
15888: LD_VAR 0 6
15892: PUSH
15893: EMPTY
15894: LIST
15895: ST_TO_ADDR
// for i = 1 to pos - 1 do
15896: LD_ADDR_VAR 0 5
15900: PUSH
15901: DOUBLE
15902: LD_INT 1
15904: DEC
15905: ST_TO_ADDR
15906: LD_VAR 0 2
15910: PUSH
15911: LD_INT 1
15913: MINUS
15914: PUSH
15915: FOR_TO
15916: IFFALSE 15961
// begin tmp := tmp [ pos [ i ] ] ;
15918: LD_ADDR_VAR 0 6
15922: PUSH
15923: LD_VAR 0 6
15927: PUSH
15928: LD_VAR 0 2
15932: PUSH
15933: LD_VAR 0 5
15937: ARRAY
15938: ARRAY
15939: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15940: LD_ADDR_VAR 0 7
15944: PUSH
15945: LD_VAR 0 7
15949: PUSH
15950: LD_VAR 0 6
15954: PUSH
15955: EMPTY
15956: LIST
15957: ADD
15958: ST_TO_ADDR
// end ;
15959: GO 15915
15961: POP
15962: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15963: LD_ADDR_VAR 0 6
15967: PUSH
15968: LD_VAR 0 6
15972: PPUSH
15973: LD_VAR 0 2
15977: PUSH
15978: LD_VAR 0 2
15982: ARRAY
15983: PPUSH
15984: LD_VAR 0 3
15988: PPUSH
15989: CALL_OW 1
15993: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15994: LD_ADDR_VAR 0 7
15998: PUSH
15999: LD_VAR 0 7
16003: PPUSH
16004: LD_VAR 0 7
16008: PPUSH
16009: LD_VAR 0 6
16013: PPUSH
16014: CALL_OW 1
16018: ST_TO_ADDR
// for i = s_arr downto 2 do
16019: LD_ADDR_VAR 0 5
16023: PUSH
16024: DOUBLE
16025: LD_VAR 0 7
16029: INC
16030: ST_TO_ADDR
16031: LD_INT 2
16033: PUSH
16034: FOR_DOWNTO
16035: IFFALSE 16119
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
16037: LD_ADDR_VAR 0 6
16041: PUSH
16042: LD_VAR 0 7
16046: PUSH
16047: LD_VAR 0 5
16051: PUSH
16052: LD_INT 1
16054: MINUS
16055: ARRAY
16056: PPUSH
16057: LD_VAR 0 2
16061: PUSH
16062: LD_VAR 0 5
16066: PUSH
16067: LD_INT 1
16069: MINUS
16070: ARRAY
16071: PPUSH
16072: LD_VAR 0 7
16076: PUSH
16077: LD_VAR 0 5
16081: ARRAY
16082: PPUSH
16083: CALL_OW 1
16087: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
16088: LD_ADDR_VAR 0 7
16092: PUSH
16093: LD_VAR 0 7
16097: PPUSH
16098: LD_VAR 0 5
16102: PUSH
16103: LD_INT 1
16105: MINUS
16106: PPUSH
16107: LD_VAR 0 6
16111: PPUSH
16112: CALL_OW 1
16116: ST_TO_ADDR
// end ;
16117: GO 16034
16119: POP
16120: POP
// result := s_arr [ 1 ] ;
16121: LD_ADDR_VAR 0 4
16125: PUSH
16126: LD_VAR 0 7
16130: PUSH
16131: LD_INT 1
16133: ARRAY
16134: ST_TO_ADDR
// end ; end ;
16135: LD_VAR 0 4
16139: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
16140: LD_INT 0
16142: PPUSH
16143: PPUSH
// if not list then
16144: LD_VAR 0 1
16148: NOT
16149: IFFALSE 16153
// exit ;
16151: GO 16244
// i := list [ pos1 ] ;
16153: LD_ADDR_VAR 0 5
16157: PUSH
16158: LD_VAR 0 1
16162: PUSH
16163: LD_VAR 0 2
16167: ARRAY
16168: ST_TO_ADDR
// if not i then
16169: LD_VAR 0 5
16173: NOT
16174: IFFALSE 16178
// exit ;
16176: GO 16244
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
16178: LD_ADDR_VAR 0 1
16182: PUSH
16183: LD_VAR 0 1
16187: PPUSH
16188: LD_VAR 0 2
16192: PPUSH
16193: LD_VAR 0 1
16197: PUSH
16198: LD_VAR 0 3
16202: ARRAY
16203: PPUSH
16204: CALL_OW 1
16208: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
16209: LD_ADDR_VAR 0 1
16213: PUSH
16214: LD_VAR 0 1
16218: PPUSH
16219: LD_VAR 0 3
16223: PPUSH
16224: LD_VAR 0 5
16228: PPUSH
16229: CALL_OW 1
16233: ST_TO_ADDR
// result := list ;
16234: LD_ADDR_VAR 0 4
16238: PUSH
16239: LD_VAR 0 1
16243: ST_TO_ADDR
// end ;
16244: LD_VAR 0 4
16248: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
16249: LD_INT 0
16251: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
16252: LD_ADDR_VAR 0 5
16256: PUSH
16257: LD_VAR 0 1
16261: PPUSH
16262: CALL_OW 250
16266: PPUSH
16267: LD_VAR 0 1
16271: PPUSH
16272: CALL_OW 251
16276: PPUSH
16277: LD_VAR 0 2
16281: PPUSH
16282: LD_VAR 0 3
16286: PPUSH
16287: LD_VAR 0 4
16291: PPUSH
16292: CALL 16302 0 5
16296: ST_TO_ADDR
// end ;
16297: LD_VAR 0 5
16301: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
16302: LD_INT 0
16304: PPUSH
16305: PPUSH
16306: PPUSH
16307: PPUSH
// if not list then
16308: LD_VAR 0 3
16312: NOT
16313: IFFALSE 16317
// exit ;
16315: GO 16705
// result := [ ] ;
16317: LD_ADDR_VAR 0 6
16321: PUSH
16322: EMPTY
16323: ST_TO_ADDR
// for i in list do
16324: LD_ADDR_VAR 0 7
16328: PUSH
16329: LD_VAR 0 3
16333: PUSH
16334: FOR_IN
16335: IFFALSE 16537
// begin tmp := GetDistUnitXY ( i , x , y ) ;
16337: LD_ADDR_VAR 0 9
16341: PUSH
16342: LD_VAR 0 7
16346: PPUSH
16347: LD_VAR 0 1
16351: PPUSH
16352: LD_VAR 0 2
16356: PPUSH
16357: CALL_OW 297
16361: ST_TO_ADDR
// if not result then
16362: LD_VAR 0 6
16366: NOT
16367: IFFALSE 16393
// result := [ [ i , tmp ] ] else
16369: LD_ADDR_VAR 0 6
16373: PUSH
16374: LD_VAR 0 7
16378: PUSH
16379: LD_VAR 0 9
16383: PUSH
16384: EMPTY
16385: LIST
16386: LIST
16387: PUSH
16388: EMPTY
16389: LIST
16390: ST_TO_ADDR
16391: GO 16535
// begin if result [ result ] [ 2 ] < tmp then
16393: LD_VAR 0 6
16397: PUSH
16398: LD_VAR 0 6
16402: ARRAY
16403: PUSH
16404: LD_INT 2
16406: ARRAY
16407: PUSH
16408: LD_VAR 0 9
16412: LESS
16413: IFFALSE 16455
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
16415: LD_ADDR_VAR 0 6
16419: PUSH
16420: LD_VAR 0 6
16424: PPUSH
16425: LD_VAR 0 6
16429: PUSH
16430: LD_INT 1
16432: PLUS
16433: PPUSH
16434: LD_VAR 0 7
16438: PUSH
16439: LD_VAR 0 9
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PPUSH
16448: CALL_OW 2
16452: ST_TO_ADDR
16453: GO 16535
// for j = 1 to result do
16455: LD_ADDR_VAR 0 8
16459: PUSH
16460: DOUBLE
16461: LD_INT 1
16463: DEC
16464: ST_TO_ADDR
16465: LD_VAR 0 6
16469: PUSH
16470: FOR_TO
16471: IFFALSE 16533
// begin if tmp < result [ j ] [ 2 ] then
16473: LD_VAR 0 9
16477: PUSH
16478: LD_VAR 0 6
16482: PUSH
16483: LD_VAR 0 8
16487: ARRAY
16488: PUSH
16489: LD_INT 2
16491: ARRAY
16492: LESS
16493: IFFALSE 16531
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16495: LD_ADDR_VAR 0 6
16499: PUSH
16500: LD_VAR 0 6
16504: PPUSH
16505: LD_VAR 0 8
16509: PPUSH
16510: LD_VAR 0 7
16514: PUSH
16515: LD_VAR 0 9
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: PPUSH
16524: CALL_OW 2
16528: ST_TO_ADDR
// break ;
16529: GO 16533
// end ; end ;
16531: GO 16470
16533: POP
16534: POP
// end ; end ;
16535: GO 16334
16537: POP
16538: POP
// if result and not asc then
16539: LD_VAR 0 6
16543: PUSH
16544: LD_VAR 0 4
16548: NOT
16549: AND
16550: IFFALSE 16625
// begin tmp := result ;
16552: LD_ADDR_VAR 0 9
16556: PUSH
16557: LD_VAR 0 6
16561: ST_TO_ADDR
// for i = tmp downto 1 do
16562: LD_ADDR_VAR 0 7
16566: PUSH
16567: DOUBLE
16568: LD_VAR 0 9
16572: INC
16573: ST_TO_ADDR
16574: LD_INT 1
16576: PUSH
16577: FOR_DOWNTO
16578: IFFALSE 16623
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16580: LD_ADDR_VAR 0 6
16584: PUSH
16585: LD_VAR 0 6
16589: PPUSH
16590: LD_VAR 0 9
16594: PUSH
16595: LD_VAR 0 7
16599: MINUS
16600: PUSH
16601: LD_INT 1
16603: PLUS
16604: PPUSH
16605: LD_VAR 0 9
16609: PUSH
16610: LD_VAR 0 7
16614: ARRAY
16615: PPUSH
16616: CALL_OW 1
16620: ST_TO_ADDR
16621: GO 16577
16623: POP
16624: POP
// end ; tmp := [ ] ;
16625: LD_ADDR_VAR 0 9
16629: PUSH
16630: EMPTY
16631: ST_TO_ADDR
// if mode then
16632: LD_VAR 0 5
16636: IFFALSE 16705
// begin for i = 1 to result do
16638: LD_ADDR_VAR 0 7
16642: PUSH
16643: DOUBLE
16644: LD_INT 1
16646: DEC
16647: ST_TO_ADDR
16648: LD_VAR 0 6
16652: PUSH
16653: FOR_TO
16654: IFFALSE 16693
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16656: LD_ADDR_VAR 0 9
16660: PUSH
16661: LD_VAR 0 9
16665: PPUSH
16666: LD_VAR 0 7
16670: PPUSH
16671: LD_VAR 0 6
16675: PUSH
16676: LD_VAR 0 7
16680: ARRAY
16681: PUSH
16682: LD_INT 1
16684: ARRAY
16685: PPUSH
16686: CALL_OW 1
16690: ST_TO_ADDR
16691: GO 16653
16693: POP
16694: POP
// result := tmp ;
16695: LD_ADDR_VAR 0 6
16699: PUSH
16700: LD_VAR 0 9
16704: ST_TO_ADDR
// end ; end ;
16705: LD_VAR 0 6
16709: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16710: LD_INT 0
16712: PPUSH
16713: PPUSH
16714: PPUSH
16715: PPUSH
16716: PPUSH
16717: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16718: LD_ADDR_VAR 0 5
16722: PUSH
16723: LD_INT 0
16725: PUSH
16726: LD_INT 0
16728: PUSH
16729: LD_INT 0
16731: PUSH
16732: EMPTY
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: ST_TO_ADDR
// if not x or not y then
16740: LD_VAR 0 2
16744: NOT
16745: PUSH
16746: LD_VAR 0 3
16750: NOT
16751: OR
16752: IFFALSE 16756
// exit ;
16754: GO 18406
// if not range then
16756: LD_VAR 0 4
16760: NOT
16761: IFFALSE 16771
// range := 10 ;
16763: LD_ADDR_VAR 0 4
16767: PUSH
16768: LD_INT 10
16770: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16771: LD_ADDR_VAR 0 8
16775: PUSH
16776: LD_INT 81
16778: PUSH
16779: LD_VAR 0 1
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: PUSH
16788: LD_INT 92
16790: PUSH
16791: LD_VAR 0 2
16795: PUSH
16796: LD_VAR 0 3
16800: PUSH
16801: LD_VAR 0 4
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: PUSH
16812: LD_INT 3
16814: PUSH
16815: LD_INT 21
16817: PUSH
16818: LD_INT 3
16820: PUSH
16821: EMPTY
16822: LIST
16823: LIST
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: PUSH
16829: EMPTY
16830: LIST
16831: LIST
16832: LIST
16833: PPUSH
16834: CALL_OW 69
16838: ST_TO_ADDR
// if not tmp then
16839: LD_VAR 0 8
16843: NOT
16844: IFFALSE 16848
// exit ;
16846: GO 18406
// for i in tmp do
16848: LD_ADDR_VAR 0 6
16852: PUSH
16853: LD_VAR 0 8
16857: PUSH
16858: FOR_IN
16859: IFFALSE 18381
// begin points := [ 0 , 0 , 0 ] ;
16861: LD_ADDR_VAR 0 9
16865: PUSH
16866: LD_INT 0
16868: PUSH
16869: LD_INT 0
16871: PUSH
16872: LD_INT 0
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: LIST
16879: ST_TO_ADDR
// bpoints := 1 ;
16880: LD_ADDR_VAR 0 10
16884: PUSH
16885: LD_INT 1
16887: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16888: LD_VAR 0 6
16892: PPUSH
16893: CALL_OW 247
16897: PUSH
16898: LD_INT 1
16900: DOUBLE
16901: EQUAL
16902: IFTRUE 16906
16904: GO 17484
16906: POP
// begin if GetClass ( i ) = 1 then
16907: LD_VAR 0 6
16911: PPUSH
16912: CALL_OW 257
16916: PUSH
16917: LD_INT 1
16919: EQUAL
16920: IFFALSE 16941
// points := [ 10 , 5 , 3 ] ;
16922: LD_ADDR_VAR 0 9
16926: PUSH
16927: LD_INT 10
16929: PUSH
16930: LD_INT 5
16932: PUSH
16933: LD_INT 3
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: LIST
16940: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16941: LD_VAR 0 6
16945: PPUSH
16946: CALL_OW 257
16950: PUSH
16951: LD_INT 2
16953: PUSH
16954: LD_INT 3
16956: PUSH
16957: LD_INT 4
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: LIST
16964: IN
16965: IFFALSE 16986
// points := [ 3 , 2 , 1 ] ;
16967: LD_ADDR_VAR 0 9
16971: PUSH
16972: LD_INT 3
16974: PUSH
16975: LD_INT 2
16977: PUSH
16978: LD_INT 1
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: LIST
16985: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16986: LD_VAR 0 6
16990: PPUSH
16991: CALL_OW 257
16995: PUSH
16996: LD_INT 5
16998: EQUAL
16999: IFFALSE 17020
// points := [ 130 , 5 , 2 ] ;
17001: LD_ADDR_VAR 0 9
17005: PUSH
17006: LD_INT 130
17008: PUSH
17009: LD_INT 5
17011: PUSH
17012: LD_INT 2
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: LIST
17019: ST_TO_ADDR
// if GetClass ( i ) = 8 then
17020: LD_VAR 0 6
17024: PPUSH
17025: CALL_OW 257
17029: PUSH
17030: LD_INT 8
17032: EQUAL
17033: IFFALSE 17054
// points := [ 35 , 35 , 30 ] ;
17035: LD_ADDR_VAR 0 9
17039: PUSH
17040: LD_INT 35
17042: PUSH
17043: LD_INT 35
17045: PUSH
17046: LD_INT 30
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: LIST
17053: ST_TO_ADDR
// if GetClass ( i ) = 9 then
17054: LD_VAR 0 6
17058: PPUSH
17059: CALL_OW 257
17063: PUSH
17064: LD_INT 9
17066: EQUAL
17067: IFFALSE 17088
// points := [ 20 , 55 , 40 ] ;
17069: LD_ADDR_VAR 0 9
17073: PUSH
17074: LD_INT 20
17076: PUSH
17077: LD_INT 55
17079: PUSH
17080: LD_INT 40
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: LIST
17087: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
17088: LD_VAR 0 6
17092: PPUSH
17093: CALL_OW 257
17097: PUSH
17098: LD_INT 12
17100: PUSH
17101: LD_INT 16
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: IN
17108: IFFALSE 17129
// points := [ 5 , 3 , 2 ] ;
17110: LD_ADDR_VAR 0 9
17114: PUSH
17115: LD_INT 5
17117: PUSH
17118: LD_INT 3
17120: PUSH
17121: LD_INT 2
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: LIST
17128: ST_TO_ADDR
// if GetClass ( i ) = 17 then
17129: LD_VAR 0 6
17133: PPUSH
17134: CALL_OW 257
17138: PUSH
17139: LD_INT 17
17141: EQUAL
17142: IFFALSE 17163
// points := [ 100 , 50 , 75 ] ;
17144: LD_ADDR_VAR 0 9
17148: PUSH
17149: LD_INT 100
17151: PUSH
17152: LD_INT 50
17154: PUSH
17155: LD_INT 75
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: LIST
17162: ST_TO_ADDR
// if GetClass ( i ) = 15 then
17163: LD_VAR 0 6
17167: PPUSH
17168: CALL_OW 257
17172: PUSH
17173: LD_INT 15
17175: EQUAL
17176: IFFALSE 17197
// points := [ 10 , 5 , 3 ] ;
17178: LD_ADDR_VAR 0 9
17182: PUSH
17183: LD_INT 10
17185: PUSH
17186: LD_INT 5
17188: PUSH
17189: LD_INT 3
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: LIST
17196: ST_TO_ADDR
// if GetClass ( i ) = 14 then
17197: LD_VAR 0 6
17201: PPUSH
17202: CALL_OW 257
17206: PUSH
17207: LD_INT 14
17209: EQUAL
17210: IFFALSE 17231
// points := [ 10 , 0 , 0 ] ;
17212: LD_ADDR_VAR 0 9
17216: PUSH
17217: LD_INT 10
17219: PUSH
17220: LD_INT 0
17222: PUSH
17223: LD_INT 0
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: LIST
17230: ST_TO_ADDR
// if GetClass ( i ) = 11 then
17231: LD_VAR 0 6
17235: PPUSH
17236: CALL_OW 257
17240: PUSH
17241: LD_INT 11
17243: EQUAL
17244: IFFALSE 17265
// points := [ 30 , 10 , 5 ] ;
17246: LD_ADDR_VAR 0 9
17250: PUSH
17251: LD_INT 30
17253: PUSH
17254: LD_INT 10
17256: PUSH
17257: LD_INT 5
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: LIST
17264: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
17265: LD_VAR 0 1
17269: PPUSH
17270: LD_INT 5
17272: PPUSH
17273: CALL_OW 321
17277: PUSH
17278: LD_INT 2
17280: EQUAL
17281: IFFALSE 17298
// bpoints := bpoints * 1.8 ;
17283: LD_ADDR_VAR 0 10
17287: PUSH
17288: LD_VAR 0 10
17292: PUSH
17293: LD_REAL  1.80000000000000E+0000
17296: MUL
17297: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
17298: LD_VAR 0 6
17302: PPUSH
17303: CALL_OW 257
17307: PUSH
17308: LD_INT 1
17310: PUSH
17311: LD_INT 2
17313: PUSH
17314: LD_INT 3
17316: PUSH
17317: LD_INT 4
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: IN
17326: PUSH
17327: LD_VAR 0 1
17331: PPUSH
17332: LD_INT 51
17334: PPUSH
17335: CALL_OW 321
17339: PUSH
17340: LD_INT 2
17342: EQUAL
17343: AND
17344: IFFALSE 17361
// bpoints := bpoints * 1.2 ;
17346: LD_ADDR_VAR 0 10
17350: PUSH
17351: LD_VAR 0 10
17355: PUSH
17356: LD_REAL  1.20000000000000E+0000
17359: MUL
17360: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
17361: LD_VAR 0 6
17365: PPUSH
17366: CALL_OW 257
17370: PUSH
17371: LD_INT 5
17373: PUSH
17374: LD_INT 7
17376: PUSH
17377: LD_INT 9
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: LIST
17384: IN
17385: PUSH
17386: LD_VAR 0 1
17390: PPUSH
17391: LD_INT 52
17393: PPUSH
17394: CALL_OW 321
17398: PUSH
17399: LD_INT 2
17401: EQUAL
17402: AND
17403: IFFALSE 17420
// bpoints := bpoints * 1.5 ;
17405: LD_ADDR_VAR 0 10
17409: PUSH
17410: LD_VAR 0 10
17414: PUSH
17415: LD_REAL  1.50000000000000E+0000
17418: MUL
17419: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
17420: LD_VAR 0 1
17424: PPUSH
17425: LD_INT 66
17427: PPUSH
17428: CALL_OW 321
17432: PUSH
17433: LD_INT 2
17435: EQUAL
17436: IFFALSE 17453
// bpoints := bpoints * 1.1 ;
17438: LD_ADDR_VAR 0 10
17442: PUSH
17443: LD_VAR 0 10
17447: PUSH
17448: LD_REAL  1.10000000000000E+0000
17451: MUL
17452: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
17453: LD_ADDR_VAR 0 10
17457: PUSH
17458: LD_VAR 0 10
17462: PUSH
17463: LD_VAR 0 6
17467: PPUSH
17468: LD_INT 1
17470: PPUSH
17471: CALL_OW 259
17475: PUSH
17476: LD_REAL  1.15000000000000E+0000
17479: MUL
17480: MUL
17481: ST_TO_ADDR
// end ; unit_vehicle :
17482: GO 18310
17484: LD_INT 2
17486: DOUBLE
17487: EQUAL
17488: IFTRUE 17492
17490: GO 18298
17492: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17493: LD_VAR 0 6
17497: PPUSH
17498: CALL_OW 264
17502: PUSH
17503: LD_INT 2
17505: PUSH
17506: LD_INT 42
17508: PUSH
17509: LD_INT 24
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: LIST
17516: IN
17517: IFFALSE 17538
// points := [ 25 , 5 , 3 ] ;
17519: LD_ADDR_VAR 0 9
17523: PUSH
17524: LD_INT 25
17526: PUSH
17527: LD_INT 5
17529: PUSH
17530: LD_INT 3
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: LIST
17537: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17538: LD_VAR 0 6
17542: PPUSH
17543: CALL_OW 264
17547: PUSH
17548: LD_INT 4
17550: PUSH
17551: LD_INT 43
17553: PUSH
17554: LD_INT 25
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: LIST
17561: IN
17562: IFFALSE 17583
// points := [ 40 , 15 , 5 ] ;
17564: LD_ADDR_VAR 0 9
17568: PUSH
17569: LD_INT 40
17571: PUSH
17572: LD_INT 15
17574: PUSH
17575: LD_INT 5
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: LIST
17582: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17583: LD_VAR 0 6
17587: PPUSH
17588: CALL_OW 264
17592: PUSH
17593: LD_INT 3
17595: PUSH
17596: LD_INT 23
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: IN
17603: IFFALSE 17624
// points := [ 7 , 25 , 8 ] ;
17605: LD_ADDR_VAR 0 9
17609: PUSH
17610: LD_INT 7
17612: PUSH
17613: LD_INT 25
17615: PUSH
17616: LD_INT 8
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: LIST
17623: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17624: LD_VAR 0 6
17628: PPUSH
17629: CALL_OW 264
17633: PUSH
17634: LD_INT 5
17636: PUSH
17637: LD_INT 27
17639: PUSH
17640: LD_INT 44
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: LIST
17647: IN
17648: IFFALSE 17669
// points := [ 14 , 50 , 16 ] ;
17650: LD_ADDR_VAR 0 9
17654: PUSH
17655: LD_INT 14
17657: PUSH
17658: LD_INT 50
17660: PUSH
17661: LD_INT 16
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: LIST
17668: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17669: LD_VAR 0 6
17673: PPUSH
17674: CALL_OW 264
17678: PUSH
17679: LD_INT 6
17681: PUSH
17682: LD_INT 46
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: IN
17689: IFFALSE 17710
// points := [ 32 , 120 , 70 ] ;
17691: LD_ADDR_VAR 0 9
17695: PUSH
17696: LD_INT 32
17698: PUSH
17699: LD_INT 120
17701: PUSH
17702: LD_INT 70
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: LIST
17709: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17710: LD_VAR 0 6
17714: PPUSH
17715: CALL_OW 264
17719: PUSH
17720: LD_INT 7
17722: PUSH
17723: LD_INT 28
17725: PUSH
17726: LD_INT 45
17728: PUSH
17729: LD_INT 92
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: IN
17738: IFFALSE 17759
// points := [ 35 , 20 , 45 ] ;
17740: LD_ADDR_VAR 0 9
17744: PUSH
17745: LD_INT 35
17747: PUSH
17748: LD_INT 20
17750: PUSH
17751: LD_INT 45
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: LIST
17758: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17759: LD_VAR 0 6
17763: PPUSH
17764: CALL_OW 264
17768: PUSH
17769: LD_INT 47
17771: PUSH
17772: EMPTY
17773: LIST
17774: IN
17775: IFFALSE 17796
// points := [ 67 , 45 , 75 ] ;
17777: LD_ADDR_VAR 0 9
17781: PUSH
17782: LD_INT 67
17784: PUSH
17785: LD_INT 45
17787: PUSH
17788: LD_INT 75
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: LIST
17795: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17796: LD_VAR 0 6
17800: PPUSH
17801: CALL_OW 264
17805: PUSH
17806: LD_INT 26
17808: PUSH
17809: EMPTY
17810: LIST
17811: IN
17812: IFFALSE 17833
// points := [ 120 , 30 , 80 ] ;
17814: LD_ADDR_VAR 0 9
17818: PUSH
17819: LD_INT 120
17821: PUSH
17822: LD_INT 30
17824: PUSH
17825: LD_INT 80
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: LIST
17832: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17833: LD_VAR 0 6
17837: PPUSH
17838: CALL_OW 264
17842: PUSH
17843: LD_INT 22
17845: PUSH
17846: EMPTY
17847: LIST
17848: IN
17849: IFFALSE 17870
// points := [ 40 , 1 , 1 ] ;
17851: LD_ADDR_VAR 0 9
17855: PUSH
17856: LD_INT 40
17858: PUSH
17859: LD_INT 1
17861: PUSH
17862: LD_INT 1
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: LIST
17869: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17870: LD_VAR 0 6
17874: PPUSH
17875: CALL_OW 264
17879: PUSH
17880: LD_INT 29
17882: PUSH
17883: EMPTY
17884: LIST
17885: IN
17886: IFFALSE 17907
// points := [ 70 , 200 , 400 ] ;
17888: LD_ADDR_VAR 0 9
17892: PUSH
17893: LD_INT 70
17895: PUSH
17896: LD_INT 200
17898: PUSH
17899: LD_INT 400
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: LIST
17906: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17907: LD_VAR 0 6
17911: PPUSH
17912: CALL_OW 264
17916: PUSH
17917: LD_INT 14
17919: PUSH
17920: LD_INT 53
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: IN
17927: IFFALSE 17948
// points := [ 40 , 10 , 20 ] ;
17929: LD_ADDR_VAR 0 9
17933: PUSH
17934: LD_INT 40
17936: PUSH
17937: LD_INT 10
17939: PUSH
17940: LD_INT 20
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: LIST
17947: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17948: LD_VAR 0 6
17952: PPUSH
17953: CALL_OW 264
17957: PUSH
17958: LD_INT 9
17960: PUSH
17961: EMPTY
17962: LIST
17963: IN
17964: IFFALSE 17985
// points := [ 5 , 70 , 20 ] ;
17966: LD_ADDR_VAR 0 9
17970: PUSH
17971: LD_INT 5
17973: PUSH
17974: LD_INT 70
17976: PUSH
17977: LD_INT 20
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: LIST
17984: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17985: LD_VAR 0 6
17989: PPUSH
17990: CALL_OW 264
17994: PUSH
17995: LD_INT 10
17997: PUSH
17998: EMPTY
17999: LIST
18000: IN
18001: IFFALSE 18022
// points := [ 35 , 110 , 70 ] ;
18003: LD_ADDR_VAR 0 9
18007: PUSH
18008: LD_INT 35
18010: PUSH
18011: LD_INT 110
18013: PUSH
18014: LD_INT 70
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: LIST
18021: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
18022: LD_VAR 0 6
18026: PPUSH
18027: CALL_OW 265
18031: PUSH
18032: LD_INT 25
18034: EQUAL
18035: IFFALSE 18056
// points := [ 80 , 65 , 100 ] ;
18037: LD_ADDR_VAR 0 9
18041: PUSH
18042: LD_INT 80
18044: PUSH
18045: LD_INT 65
18047: PUSH
18048: LD_INT 100
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: LIST
18055: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
18056: LD_VAR 0 6
18060: PPUSH
18061: CALL_OW 263
18065: PUSH
18066: LD_INT 1
18068: EQUAL
18069: IFFALSE 18104
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
18071: LD_ADDR_VAR 0 10
18075: PUSH
18076: LD_VAR 0 10
18080: PUSH
18081: LD_VAR 0 6
18085: PPUSH
18086: CALL_OW 311
18090: PPUSH
18091: LD_INT 3
18093: PPUSH
18094: CALL_OW 259
18098: PUSH
18099: LD_INT 4
18101: MUL
18102: MUL
18103: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
18104: LD_VAR 0 6
18108: PPUSH
18109: CALL_OW 263
18113: PUSH
18114: LD_INT 2
18116: EQUAL
18117: IFFALSE 18168
// begin j := IsControledBy ( i ) ;
18119: LD_ADDR_VAR 0 7
18123: PUSH
18124: LD_VAR 0 6
18128: PPUSH
18129: CALL_OW 312
18133: ST_TO_ADDR
// if j then
18134: LD_VAR 0 7
18138: IFFALSE 18168
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
18140: LD_ADDR_VAR 0 10
18144: PUSH
18145: LD_VAR 0 10
18149: PUSH
18150: LD_VAR 0 7
18154: PPUSH
18155: LD_INT 3
18157: PPUSH
18158: CALL_OW 259
18162: PUSH
18163: LD_INT 3
18165: MUL
18166: MUL
18167: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
18168: LD_VAR 0 6
18172: PPUSH
18173: CALL_OW 264
18177: PUSH
18178: LD_INT 5
18180: PUSH
18181: LD_INT 6
18183: PUSH
18184: LD_INT 46
18186: PUSH
18187: LD_INT 44
18189: PUSH
18190: LD_INT 47
18192: PUSH
18193: LD_INT 45
18195: PUSH
18196: LD_INT 28
18198: PUSH
18199: LD_INT 7
18201: PUSH
18202: LD_INT 27
18204: PUSH
18205: LD_INT 29
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: IN
18220: PUSH
18221: LD_VAR 0 1
18225: PPUSH
18226: LD_INT 52
18228: PPUSH
18229: CALL_OW 321
18233: PUSH
18234: LD_INT 2
18236: EQUAL
18237: AND
18238: IFFALSE 18255
// bpoints := bpoints * 1.2 ;
18240: LD_ADDR_VAR 0 10
18244: PUSH
18245: LD_VAR 0 10
18249: PUSH
18250: LD_REAL  1.20000000000000E+0000
18253: MUL
18254: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
18255: LD_VAR 0 6
18259: PPUSH
18260: CALL_OW 264
18264: PUSH
18265: LD_INT 6
18267: PUSH
18268: LD_INT 46
18270: PUSH
18271: LD_INT 47
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: LIST
18278: IN
18279: IFFALSE 18296
// bpoints := bpoints * 1.2 ;
18281: LD_ADDR_VAR 0 10
18285: PUSH
18286: LD_VAR 0 10
18290: PUSH
18291: LD_REAL  1.20000000000000E+0000
18294: MUL
18295: ST_TO_ADDR
// end ; unit_building :
18296: GO 18310
18298: LD_INT 3
18300: DOUBLE
18301: EQUAL
18302: IFTRUE 18306
18304: GO 18309
18306: POP
// ; end ;
18307: GO 18310
18309: POP
// for j = 1 to 3 do
18310: LD_ADDR_VAR 0 7
18314: PUSH
18315: DOUBLE
18316: LD_INT 1
18318: DEC
18319: ST_TO_ADDR
18320: LD_INT 3
18322: PUSH
18323: FOR_TO
18324: IFFALSE 18377
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
18326: LD_ADDR_VAR 0 5
18330: PUSH
18331: LD_VAR 0 5
18335: PPUSH
18336: LD_VAR 0 7
18340: PPUSH
18341: LD_VAR 0 5
18345: PUSH
18346: LD_VAR 0 7
18350: ARRAY
18351: PUSH
18352: LD_VAR 0 9
18356: PUSH
18357: LD_VAR 0 7
18361: ARRAY
18362: PUSH
18363: LD_VAR 0 10
18367: MUL
18368: PLUS
18369: PPUSH
18370: CALL_OW 1
18374: ST_TO_ADDR
18375: GO 18323
18377: POP
18378: POP
// end ;
18379: GO 16858
18381: POP
18382: POP
// result := Replace ( result , 4 , tmp ) ;
18383: LD_ADDR_VAR 0 5
18387: PUSH
18388: LD_VAR 0 5
18392: PPUSH
18393: LD_INT 4
18395: PPUSH
18396: LD_VAR 0 8
18400: PPUSH
18401: CALL_OW 1
18405: ST_TO_ADDR
// end ;
18406: LD_VAR 0 5
18410: RET
// export function DangerAtRange ( unit , range ) ; begin
18411: LD_INT 0
18413: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
18414: LD_ADDR_VAR 0 3
18418: PUSH
18419: LD_VAR 0 1
18423: PPUSH
18424: CALL_OW 255
18428: PPUSH
18429: LD_VAR 0 1
18433: PPUSH
18434: CALL_OW 250
18438: PPUSH
18439: LD_VAR 0 1
18443: PPUSH
18444: CALL_OW 251
18448: PPUSH
18449: LD_VAR 0 2
18453: PPUSH
18454: CALL 16710 0 4
18458: ST_TO_ADDR
// end ;
18459: LD_VAR 0 3
18463: RET
// export function DangerInArea ( side , area ) ; begin
18464: LD_INT 0
18466: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
18467: LD_ADDR_VAR 0 3
18471: PUSH
18472: LD_VAR 0 2
18476: PPUSH
18477: LD_INT 81
18479: PUSH
18480: LD_VAR 0 1
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PPUSH
18489: CALL_OW 70
18493: ST_TO_ADDR
// end ;
18494: LD_VAR 0 3
18498: RET
// export function IsExtension ( b ) ; begin
18499: LD_INT 0
18501: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18502: LD_ADDR_VAR 0 2
18506: PUSH
18507: LD_VAR 0 1
18511: PUSH
18512: LD_INT 23
18514: PUSH
18515: LD_INT 20
18517: PUSH
18518: LD_INT 22
18520: PUSH
18521: LD_INT 17
18523: PUSH
18524: LD_INT 24
18526: PUSH
18527: LD_INT 21
18529: PUSH
18530: LD_INT 19
18532: PUSH
18533: LD_INT 16
18535: PUSH
18536: LD_INT 25
18538: PUSH
18539: LD_INT 18
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: IN
18554: ST_TO_ADDR
// end ;
18555: LD_VAR 0 2
18559: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18560: LD_INT 0
18562: PPUSH
18563: PPUSH
18564: PPUSH
// result := [ ] ;
18565: LD_ADDR_VAR 0 4
18569: PUSH
18570: EMPTY
18571: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18572: LD_ADDR_VAR 0 5
18576: PUSH
18577: LD_VAR 0 2
18581: PPUSH
18582: LD_INT 21
18584: PUSH
18585: LD_INT 3
18587: PUSH
18588: EMPTY
18589: LIST
18590: LIST
18591: PPUSH
18592: CALL_OW 70
18596: ST_TO_ADDR
// if not tmp then
18597: LD_VAR 0 5
18601: NOT
18602: IFFALSE 18606
// exit ;
18604: GO 18670
// if checkLink then
18606: LD_VAR 0 3
18610: IFFALSE 18660
// begin for i in tmp do
18612: LD_ADDR_VAR 0 6
18616: PUSH
18617: LD_VAR 0 5
18621: PUSH
18622: FOR_IN
18623: IFFALSE 18658
// if GetBase ( i ) <> base then
18625: LD_VAR 0 6
18629: PPUSH
18630: CALL_OW 274
18634: PUSH
18635: LD_VAR 0 1
18639: NONEQUAL
18640: IFFALSE 18656
// ComLinkToBase ( base , i ) ;
18642: LD_VAR 0 1
18646: PPUSH
18647: LD_VAR 0 6
18651: PPUSH
18652: CALL_OW 169
18656: GO 18622
18658: POP
18659: POP
// end ; result := tmp ;
18660: LD_ADDR_VAR 0 4
18664: PUSH
18665: LD_VAR 0 5
18669: ST_TO_ADDR
// end ;
18670: LD_VAR 0 4
18674: RET
// export function ComComplete ( units , b ) ; var i ; begin
18675: LD_INT 0
18677: PPUSH
18678: PPUSH
// if not units then
18679: LD_VAR 0 1
18683: NOT
18684: IFFALSE 18688
// exit ;
18686: GO 18778
// for i in units do
18688: LD_ADDR_VAR 0 4
18692: PUSH
18693: LD_VAR 0 1
18697: PUSH
18698: FOR_IN
18699: IFFALSE 18776
// if BuildingStatus ( b ) = bs_build then
18701: LD_VAR 0 2
18705: PPUSH
18706: CALL_OW 461
18710: PUSH
18711: LD_INT 1
18713: EQUAL
18714: IFFALSE 18774
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18716: LD_VAR 0 4
18720: PPUSH
18721: LD_STRING h
18723: PUSH
18724: LD_VAR 0 2
18728: PPUSH
18729: CALL_OW 250
18733: PUSH
18734: LD_VAR 0 2
18738: PPUSH
18739: CALL_OW 251
18743: PUSH
18744: LD_VAR 0 2
18748: PUSH
18749: LD_INT 0
18751: PUSH
18752: LD_INT 0
18754: PUSH
18755: LD_INT 0
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: LIST
18766: PUSH
18767: EMPTY
18768: LIST
18769: PPUSH
18770: CALL_OW 446
18774: GO 18698
18776: POP
18777: POP
// end ;
18778: LD_VAR 0 3
18782: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18783: LD_INT 0
18785: PPUSH
18786: PPUSH
18787: PPUSH
18788: PPUSH
18789: PPUSH
18790: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18791: LD_VAR 0 1
18795: NOT
18796: PUSH
18797: LD_VAR 0 1
18801: PPUSH
18802: CALL_OW 263
18806: PUSH
18807: LD_INT 2
18809: NONEQUAL
18810: OR
18811: IFFALSE 18815
// exit ;
18813: GO 19131
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18815: LD_ADDR_VAR 0 6
18819: PUSH
18820: LD_INT 22
18822: PUSH
18823: LD_VAR 0 1
18827: PPUSH
18828: CALL_OW 255
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: PUSH
18837: LD_INT 2
18839: PUSH
18840: LD_INT 30
18842: PUSH
18843: LD_INT 36
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: LD_INT 34
18852: PUSH
18853: LD_INT 31
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: LIST
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PPUSH
18869: CALL_OW 69
18873: ST_TO_ADDR
// if not tmp then
18874: LD_VAR 0 6
18878: NOT
18879: IFFALSE 18883
// exit ;
18881: GO 19131
// result := [ ] ;
18883: LD_ADDR_VAR 0 2
18887: PUSH
18888: EMPTY
18889: ST_TO_ADDR
// for i in tmp do
18890: LD_ADDR_VAR 0 3
18894: PUSH
18895: LD_VAR 0 6
18899: PUSH
18900: FOR_IN
18901: IFFALSE 18972
// begin t := UnitsInside ( i ) ;
18903: LD_ADDR_VAR 0 4
18907: PUSH
18908: LD_VAR 0 3
18912: PPUSH
18913: CALL_OW 313
18917: ST_TO_ADDR
// if t then
18918: LD_VAR 0 4
18922: IFFALSE 18970
// for j in t do
18924: LD_ADDR_VAR 0 7
18928: PUSH
18929: LD_VAR 0 4
18933: PUSH
18934: FOR_IN
18935: IFFALSE 18968
// result := Replace ( result , result + 1 , j ) ;
18937: LD_ADDR_VAR 0 2
18941: PUSH
18942: LD_VAR 0 2
18946: PPUSH
18947: LD_VAR 0 2
18951: PUSH
18952: LD_INT 1
18954: PLUS
18955: PPUSH
18956: LD_VAR 0 7
18960: PPUSH
18961: CALL_OW 1
18965: ST_TO_ADDR
18966: GO 18934
18968: POP
18969: POP
// end ;
18970: GO 18900
18972: POP
18973: POP
// if not result then
18974: LD_VAR 0 2
18978: NOT
18979: IFFALSE 18983
// exit ;
18981: GO 19131
// mech := result [ 1 ] ;
18983: LD_ADDR_VAR 0 5
18987: PUSH
18988: LD_VAR 0 2
18992: PUSH
18993: LD_INT 1
18995: ARRAY
18996: ST_TO_ADDR
// if result > 1 then
18997: LD_VAR 0 2
19001: PUSH
19002: LD_INT 1
19004: GREATER
19005: IFFALSE 19117
// begin for i = 2 to result do
19007: LD_ADDR_VAR 0 3
19011: PUSH
19012: DOUBLE
19013: LD_INT 2
19015: DEC
19016: ST_TO_ADDR
19017: LD_VAR 0 2
19021: PUSH
19022: FOR_TO
19023: IFFALSE 19115
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
19025: LD_ADDR_VAR 0 4
19029: PUSH
19030: LD_VAR 0 2
19034: PUSH
19035: LD_VAR 0 3
19039: ARRAY
19040: PPUSH
19041: LD_INT 3
19043: PPUSH
19044: CALL_OW 259
19048: PUSH
19049: LD_VAR 0 2
19053: PUSH
19054: LD_VAR 0 3
19058: ARRAY
19059: PPUSH
19060: CALL_OW 432
19064: MINUS
19065: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
19066: LD_VAR 0 4
19070: PUSH
19071: LD_VAR 0 5
19075: PPUSH
19076: LD_INT 3
19078: PPUSH
19079: CALL_OW 259
19083: PUSH
19084: LD_VAR 0 5
19088: PPUSH
19089: CALL_OW 432
19093: MINUS
19094: GREATEREQUAL
19095: IFFALSE 19113
// mech := result [ i ] ;
19097: LD_ADDR_VAR 0 5
19101: PUSH
19102: LD_VAR 0 2
19106: PUSH
19107: LD_VAR 0 3
19111: ARRAY
19112: ST_TO_ADDR
// end ;
19113: GO 19022
19115: POP
19116: POP
// end ; ComLinkTo ( vehicle , mech ) ;
19117: LD_VAR 0 1
19121: PPUSH
19122: LD_VAR 0 5
19126: PPUSH
19127: CALL_OW 135
// end ;
19131: LD_VAR 0 2
19135: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
19136: LD_INT 0
19138: PPUSH
19139: PPUSH
19140: PPUSH
19141: PPUSH
19142: PPUSH
19143: PPUSH
19144: PPUSH
19145: PPUSH
19146: PPUSH
19147: PPUSH
19148: PPUSH
19149: PPUSH
19150: PPUSH
// result := [ ] ;
19151: LD_ADDR_VAR 0 7
19155: PUSH
19156: EMPTY
19157: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
19158: LD_VAR 0 1
19162: PPUSH
19163: CALL_OW 266
19167: PUSH
19168: LD_INT 0
19170: PUSH
19171: LD_INT 1
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: IN
19178: NOT
19179: IFFALSE 19183
// exit ;
19181: GO 20817
// if name then
19183: LD_VAR 0 3
19187: IFFALSE 19203
// SetBName ( base_dep , name ) ;
19189: LD_VAR 0 1
19193: PPUSH
19194: LD_VAR 0 3
19198: PPUSH
19199: CALL_OW 500
// base := GetBase ( base_dep ) ;
19203: LD_ADDR_VAR 0 15
19207: PUSH
19208: LD_VAR 0 1
19212: PPUSH
19213: CALL_OW 274
19217: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
19218: LD_ADDR_VAR 0 16
19222: PUSH
19223: LD_VAR 0 1
19227: PPUSH
19228: CALL_OW 255
19232: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
19233: LD_ADDR_VAR 0 17
19237: PUSH
19238: LD_VAR 0 1
19242: PPUSH
19243: CALL_OW 248
19247: ST_TO_ADDR
// if sources then
19248: LD_VAR 0 5
19252: IFFALSE 19299
// for i = 1 to 3 do
19254: LD_ADDR_VAR 0 8
19258: PUSH
19259: DOUBLE
19260: LD_INT 1
19262: DEC
19263: ST_TO_ADDR
19264: LD_INT 3
19266: PUSH
19267: FOR_TO
19268: IFFALSE 19297
// AddResourceType ( base , i , sources [ i ] ) ;
19270: LD_VAR 0 15
19274: PPUSH
19275: LD_VAR 0 8
19279: PPUSH
19280: LD_VAR 0 5
19284: PUSH
19285: LD_VAR 0 8
19289: ARRAY
19290: PPUSH
19291: CALL_OW 276
19295: GO 19267
19297: POP
19298: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
19299: LD_ADDR_VAR 0 18
19303: PUSH
19304: LD_VAR 0 15
19308: PPUSH
19309: LD_VAR 0 2
19313: PPUSH
19314: LD_INT 1
19316: PPUSH
19317: CALL 18560 0 3
19321: ST_TO_ADDR
// InitHc ;
19322: CALL_OW 19
// InitUc ;
19326: CALL_OW 18
// uc_side := side ;
19330: LD_ADDR_OWVAR 20
19334: PUSH
19335: LD_VAR 0 16
19339: ST_TO_ADDR
// uc_nation := nation ;
19340: LD_ADDR_OWVAR 21
19344: PUSH
19345: LD_VAR 0 17
19349: ST_TO_ADDR
// if buildings then
19350: LD_VAR 0 18
19354: IFFALSE 20676
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
19356: LD_ADDR_VAR 0 19
19360: PUSH
19361: LD_VAR 0 18
19365: PPUSH
19366: LD_INT 2
19368: PUSH
19369: LD_INT 30
19371: PUSH
19372: LD_INT 29
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: PUSH
19379: LD_INT 30
19381: PUSH
19382: LD_INT 30
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: LIST
19393: PPUSH
19394: CALL_OW 72
19398: ST_TO_ADDR
// if tmp then
19399: LD_VAR 0 19
19403: IFFALSE 19451
// for i in tmp do
19405: LD_ADDR_VAR 0 8
19409: PUSH
19410: LD_VAR 0 19
19414: PUSH
19415: FOR_IN
19416: IFFALSE 19449
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
19418: LD_VAR 0 8
19422: PPUSH
19423: CALL_OW 250
19427: PPUSH
19428: LD_VAR 0 8
19432: PPUSH
19433: CALL_OW 251
19437: PPUSH
19438: LD_VAR 0 16
19442: PPUSH
19443: CALL_OW 441
19447: GO 19415
19449: POP
19450: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19451: LD_VAR 0 18
19455: PPUSH
19456: LD_INT 2
19458: PUSH
19459: LD_INT 30
19461: PUSH
19462: LD_INT 32
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PUSH
19469: LD_INT 30
19471: PUSH
19472: LD_INT 33
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: LIST
19483: PPUSH
19484: CALL_OW 72
19488: IFFALSE 19576
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19490: LD_ADDR_VAR 0 8
19494: PUSH
19495: LD_VAR 0 18
19499: PPUSH
19500: LD_INT 2
19502: PUSH
19503: LD_INT 30
19505: PUSH
19506: LD_INT 32
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 30
19515: PUSH
19516: LD_INT 33
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: LIST
19527: PPUSH
19528: CALL_OW 72
19532: PUSH
19533: FOR_IN
19534: IFFALSE 19574
// begin if not GetBWeapon ( i ) then
19536: LD_VAR 0 8
19540: PPUSH
19541: CALL_OW 269
19545: NOT
19546: IFFALSE 19572
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19548: LD_VAR 0 8
19552: PPUSH
19553: LD_VAR 0 8
19557: PPUSH
19558: LD_VAR 0 2
19562: PPUSH
19563: CALL 20822 0 2
19567: PPUSH
19568: CALL_OW 431
// end ;
19572: GO 19533
19574: POP
19575: POP
// end ; for i = 1 to personel do
19576: LD_ADDR_VAR 0 8
19580: PUSH
19581: DOUBLE
19582: LD_INT 1
19584: DEC
19585: ST_TO_ADDR
19586: LD_VAR 0 6
19590: PUSH
19591: FOR_TO
19592: IFFALSE 20656
// begin if i > 4 then
19594: LD_VAR 0 8
19598: PUSH
19599: LD_INT 4
19601: GREATER
19602: IFFALSE 19606
// break ;
19604: GO 20656
// case i of 1 :
19606: LD_VAR 0 8
19610: PUSH
19611: LD_INT 1
19613: DOUBLE
19614: EQUAL
19615: IFTRUE 19619
19617: GO 19699
19619: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19620: LD_ADDR_VAR 0 12
19624: PUSH
19625: LD_VAR 0 18
19629: PPUSH
19630: LD_INT 22
19632: PUSH
19633: LD_VAR 0 16
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: LD_INT 58
19644: PUSH
19645: EMPTY
19646: LIST
19647: PUSH
19648: LD_INT 2
19650: PUSH
19651: LD_INT 30
19653: PUSH
19654: LD_INT 32
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: PUSH
19661: LD_INT 30
19663: PUSH
19664: LD_INT 4
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PUSH
19671: LD_INT 30
19673: PUSH
19674: LD_INT 5
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: LIST
19691: PPUSH
19692: CALL_OW 72
19696: ST_TO_ADDR
19697: GO 19921
19699: LD_INT 2
19701: DOUBLE
19702: EQUAL
19703: IFTRUE 19707
19705: GO 19769
19707: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19708: LD_ADDR_VAR 0 12
19712: PUSH
19713: LD_VAR 0 18
19717: PPUSH
19718: LD_INT 22
19720: PUSH
19721: LD_VAR 0 16
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: PUSH
19730: LD_INT 2
19732: PUSH
19733: LD_INT 30
19735: PUSH
19736: LD_INT 0
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 30
19745: PUSH
19746: LD_INT 1
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: LIST
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PPUSH
19762: CALL_OW 72
19766: ST_TO_ADDR
19767: GO 19921
19769: LD_INT 3
19771: DOUBLE
19772: EQUAL
19773: IFTRUE 19777
19775: GO 19839
19777: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19778: LD_ADDR_VAR 0 12
19782: PUSH
19783: LD_VAR 0 18
19787: PPUSH
19788: LD_INT 22
19790: PUSH
19791: LD_VAR 0 16
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 2
19802: PUSH
19803: LD_INT 30
19805: PUSH
19806: LD_INT 2
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: LD_INT 30
19815: PUSH
19816: LD_INT 3
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: LIST
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: PPUSH
19832: CALL_OW 72
19836: ST_TO_ADDR
19837: GO 19921
19839: LD_INT 4
19841: DOUBLE
19842: EQUAL
19843: IFTRUE 19847
19845: GO 19920
19847: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19848: LD_ADDR_VAR 0 12
19852: PUSH
19853: LD_VAR 0 18
19857: PPUSH
19858: LD_INT 22
19860: PUSH
19861: LD_VAR 0 16
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 2
19872: PUSH
19873: LD_INT 30
19875: PUSH
19876: LD_INT 6
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PUSH
19883: LD_INT 30
19885: PUSH
19886: LD_INT 7
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PUSH
19893: LD_INT 30
19895: PUSH
19896: LD_INT 8
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PPUSH
19913: CALL_OW 72
19917: ST_TO_ADDR
19918: GO 19921
19920: POP
// if i = 1 then
19921: LD_VAR 0 8
19925: PUSH
19926: LD_INT 1
19928: EQUAL
19929: IFFALSE 20040
// begin tmp := [ ] ;
19931: LD_ADDR_VAR 0 19
19935: PUSH
19936: EMPTY
19937: ST_TO_ADDR
// for j in f do
19938: LD_ADDR_VAR 0 9
19942: PUSH
19943: LD_VAR 0 12
19947: PUSH
19948: FOR_IN
19949: IFFALSE 20022
// if GetBType ( j ) = b_bunker then
19951: LD_VAR 0 9
19955: PPUSH
19956: CALL_OW 266
19960: PUSH
19961: LD_INT 32
19963: EQUAL
19964: IFFALSE 19991
// tmp := Insert ( tmp , 1 , j ) else
19966: LD_ADDR_VAR 0 19
19970: PUSH
19971: LD_VAR 0 19
19975: PPUSH
19976: LD_INT 1
19978: PPUSH
19979: LD_VAR 0 9
19983: PPUSH
19984: CALL_OW 2
19988: ST_TO_ADDR
19989: GO 20020
// tmp := Insert ( tmp , tmp + 1 , j ) ;
19991: LD_ADDR_VAR 0 19
19995: PUSH
19996: LD_VAR 0 19
20000: PPUSH
20001: LD_VAR 0 19
20005: PUSH
20006: LD_INT 1
20008: PLUS
20009: PPUSH
20010: LD_VAR 0 9
20014: PPUSH
20015: CALL_OW 2
20019: ST_TO_ADDR
20020: GO 19948
20022: POP
20023: POP
// if tmp then
20024: LD_VAR 0 19
20028: IFFALSE 20040
// f := tmp ;
20030: LD_ADDR_VAR 0 12
20034: PUSH
20035: LD_VAR 0 19
20039: ST_TO_ADDR
// end ; x := personel [ i ] ;
20040: LD_ADDR_VAR 0 13
20044: PUSH
20045: LD_VAR 0 6
20049: PUSH
20050: LD_VAR 0 8
20054: ARRAY
20055: ST_TO_ADDR
// if x = - 1 then
20056: LD_VAR 0 13
20060: PUSH
20061: LD_INT 1
20063: NEG
20064: EQUAL
20065: IFFALSE 20274
// begin for j in f do
20067: LD_ADDR_VAR 0 9
20071: PUSH
20072: LD_VAR 0 12
20076: PUSH
20077: FOR_IN
20078: IFFALSE 20270
// repeat InitHc ;
20080: CALL_OW 19
// if GetBType ( j ) = b_barracks then
20084: LD_VAR 0 9
20088: PPUSH
20089: CALL_OW 266
20093: PUSH
20094: LD_INT 5
20096: EQUAL
20097: IFFALSE 20167
// begin if UnitsInside ( j ) < 3 then
20099: LD_VAR 0 9
20103: PPUSH
20104: CALL_OW 313
20108: PUSH
20109: LD_INT 3
20111: LESS
20112: IFFALSE 20148
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20114: LD_INT 0
20116: PPUSH
20117: LD_INT 5
20119: PUSH
20120: LD_INT 8
20122: PUSH
20123: LD_INT 9
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: LIST
20130: PUSH
20131: LD_VAR 0 17
20135: ARRAY
20136: PPUSH
20137: LD_VAR 0 4
20141: PPUSH
20142: CALL_OW 380
20146: GO 20165
// PrepareHuman ( false , i , skill ) ;
20148: LD_INT 0
20150: PPUSH
20151: LD_VAR 0 8
20155: PPUSH
20156: LD_VAR 0 4
20160: PPUSH
20161: CALL_OW 380
// end else
20165: GO 20184
// PrepareHuman ( false , i , skill ) ;
20167: LD_INT 0
20169: PPUSH
20170: LD_VAR 0 8
20174: PPUSH
20175: LD_VAR 0 4
20179: PPUSH
20180: CALL_OW 380
// un := CreateHuman ;
20184: LD_ADDR_VAR 0 14
20188: PUSH
20189: CALL_OW 44
20193: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20194: LD_ADDR_VAR 0 7
20198: PUSH
20199: LD_VAR 0 7
20203: PPUSH
20204: LD_INT 1
20206: PPUSH
20207: LD_VAR 0 14
20211: PPUSH
20212: CALL_OW 2
20216: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
20217: LD_VAR 0 14
20221: PPUSH
20222: LD_VAR 0 9
20226: PPUSH
20227: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
20231: LD_VAR 0 9
20235: PPUSH
20236: CALL_OW 313
20240: PUSH
20241: LD_INT 6
20243: EQUAL
20244: PUSH
20245: LD_VAR 0 9
20249: PPUSH
20250: CALL_OW 266
20254: PUSH
20255: LD_INT 32
20257: PUSH
20258: LD_INT 31
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: IN
20265: OR
20266: IFFALSE 20080
20268: GO 20077
20270: POP
20271: POP
// end else
20272: GO 20654
// for j = 1 to x do
20274: LD_ADDR_VAR 0 9
20278: PUSH
20279: DOUBLE
20280: LD_INT 1
20282: DEC
20283: ST_TO_ADDR
20284: LD_VAR 0 13
20288: PUSH
20289: FOR_TO
20290: IFFALSE 20652
// begin InitHc ;
20292: CALL_OW 19
// if not f then
20296: LD_VAR 0 12
20300: NOT
20301: IFFALSE 20390
// begin PrepareHuman ( false , i , skill ) ;
20303: LD_INT 0
20305: PPUSH
20306: LD_VAR 0 8
20310: PPUSH
20311: LD_VAR 0 4
20315: PPUSH
20316: CALL_OW 380
// un := CreateHuman ;
20320: LD_ADDR_VAR 0 14
20324: PUSH
20325: CALL_OW 44
20329: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20330: LD_ADDR_VAR 0 7
20334: PUSH
20335: LD_VAR 0 7
20339: PPUSH
20340: LD_INT 1
20342: PPUSH
20343: LD_VAR 0 14
20347: PPUSH
20348: CALL_OW 2
20352: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20353: LD_VAR 0 14
20357: PPUSH
20358: LD_VAR 0 1
20362: PPUSH
20363: CALL_OW 250
20367: PPUSH
20368: LD_VAR 0 1
20372: PPUSH
20373: CALL_OW 251
20377: PPUSH
20378: LD_INT 10
20380: PPUSH
20381: LD_INT 0
20383: PPUSH
20384: CALL_OW 50
// continue ;
20388: GO 20289
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
20390: LD_VAR 0 12
20394: PUSH
20395: LD_INT 1
20397: ARRAY
20398: PPUSH
20399: CALL_OW 313
20403: PUSH
20404: LD_VAR 0 12
20408: PUSH
20409: LD_INT 1
20411: ARRAY
20412: PPUSH
20413: CALL_OW 266
20417: PUSH
20418: LD_INT 32
20420: PUSH
20421: LD_INT 31
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: IN
20428: AND
20429: PUSH
20430: LD_VAR 0 12
20434: PUSH
20435: LD_INT 1
20437: ARRAY
20438: PPUSH
20439: CALL_OW 313
20443: PUSH
20444: LD_INT 6
20446: EQUAL
20447: OR
20448: IFFALSE 20468
// f := Delete ( f , 1 ) ;
20450: LD_ADDR_VAR 0 12
20454: PUSH
20455: LD_VAR 0 12
20459: PPUSH
20460: LD_INT 1
20462: PPUSH
20463: CALL_OW 3
20467: ST_TO_ADDR
// if not f then
20468: LD_VAR 0 12
20472: NOT
20473: IFFALSE 20491
// begin x := x + 2 ;
20475: LD_ADDR_VAR 0 13
20479: PUSH
20480: LD_VAR 0 13
20484: PUSH
20485: LD_INT 2
20487: PLUS
20488: ST_TO_ADDR
// continue ;
20489: GO 20289
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20491: LD_VAR 0 12
20495: PUSH
20496: LD_INT 1
20498: ARRAY
20499: PPUSH
20500: CALL_OW 266
20504: PUSH
20505: LD_INT 5
20507: EQUAL
20508: IFFALSE 20582
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20510: LD_VAR 0 12
20514: PUSH
20515: LD_INT 1
20517: ARRAY
20518: PPUSH
20519: CALL_OW 313
20523: PUSH
20524: LD_INT 3
20526: LESS
20527: IFFALSE 20563
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20529: LD_INT 0
20531: PPUSH
20532: LD_INT 5
20534: PUSH
20535: LD_INT 8
20537: PUSH
20538: LD_INT 9
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: LIST
20545: PUSH
20546: LD_VAR 0 17
20550: ARRAY
20551: PPUSH
20552: LD_VAR 0 4
20556: PPUSH
20557: CALL_OW 380
20561: GO 20580
// PrepareHuman ( false , i , skill ) ;
20563: LD_INT 0
20565: PPUSH
20566: LD_VAR 0 8
20570: PPUSH
20571: LD_VAR 0 4
20575: PPUSH
20576: CALL_OW 380
// end else
20580: GO 20599
// PrepareHuman ( false , i , skill ) ;
20582: LD_INT 0
20584: PPUSH
20585: LD_VAR 0 8
20589: PPUSH
20590: LD_VAR 0 4
20594: PPUSH
20595: CALL_OW 380
// un := CreateHuman ;
20599: LD_ADDR_VAR 0 14
20603: PUSH
20604: CALL_OW 44
20608: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20609: LD_ADDR_VAR 0 7
20613: PUSH
20614: LD_VAR 0 7
20618: PPUSH
20619: LD_INT 1
20621: PPUSH
20622: LD_VAR 0 14
20626: PPUSH
20627: CALL_OW 2
20631: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20632: LD_VAR 0 14
20636: PPUSH
20637: LD_VAR 0 12
20641: PUSH
20642: LD_INT 1
20644: ARRAY
20645: PPUSH
20646: CALL_OW 52
// end ;
20650: GO 20289
20652: POP
20653: POP
// end ;
20654: GO 19591
20656: POP
20657: POP
// result := result ^ buildings ;
20658: LD_ADDR_VAR 0 7
20662: PUSH
20663: LD_VAR 0 7
20667: PUSH
20668: LD_VAR 0 18
20672: ADD
20673: ST_TO_ADDR
// end else
20674: GO 20817
// begin for i = 1 to personel do
20676: LD_ADDR_VAR 0 8
20680: PUSH
20681: DOUBLE
20682: LD_INT 1
20684: DEC
20685: ST_TO_ADDR
20686: LD_VAR 0 6
20690: PUSH
20691: FOR_TO
20692: IFFALSE 20815
// begin if i > 4 then
20694: LD_VAR 0 8
20698: PUSH
20699: LD_INT 4
20701: GREATER
20702: IFFALSE 20706
// break ;
20704: GO 20815
// x := personel [ i ] ;
20706: LD_ADDR_VAR 0 13
20710: PUSH
20711: LD_VAR 0 6
20715: PUSH
20716: LD_VAR 0 8
20720: ARRAY
20721: ST_TO_ADDR
// if x = - 1 then
20722: LD_VAR 0 13
20726: PUSH
20727: LD_INT 1
20729: NEG
20730: EQUAL
20731: IFFALSE 20735
// continue ;
20733: GO 20691
// PrepareHuman ( false , i , skill ) ;
20735: LD_INT 0
20737: PPUSH
20738: LD_VAR 0 8
20742: PPUSH
20743: LD_VAR 0 4
20747: PPUSH
20748: CALL_OW 380
// un := CreateHuman ;
20752: LD_ADDR_VAR 0 14
20756: PUSH
20757: CALL_OW 44
20761: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20762: LD_VAR 0 14
20766: PPUSH
20767: LD_VAR 0 1
20771: PPUSH
20772: CALL_OW 250
20776: PPUSH
20777: LD_VAR 0 1
20781: PPUSH
20782: CALL_OW 251
20786: PPUSH
20787: LD_INT 10
20789: PPUSH
20790: LD_INT 0
20792: PPUSH
20793: CALL_OW 50
// result := result ^ un ;
20797: LD_ADDR_VAR 0 7
20801: PUSH
20802: LD_VAR 0 7
20806: PUSH
20807: LD_VAR 0 14
20811: ADD
20812: ST_TO_ADDR
// end ;
20813: GO 20691
20815: POP
20816: POP
// end ; end ;
20817: LD_VAR 0 7
20821: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20822: LD_INT 0
20824: PPUSH
20825: PPUSH
20826: PPUSH
20827: PPUSH
20828: PPUSH
20829: PPUSH
20830: PPUSH
20831: PPUSH
20832: PPUSH
20833: PPUSH
20834: PPUSH
20835: PPUSH
20836: PPUSH
20837: PPUSH
20838: PPUSH
20839: PPUSH
// result := false ;
20840: LD_ADDR_VAR 0 3
20844: PUSH
20845: LD_INT 0
20847: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20848: LD_VAR 0 1
20852: NOT
20853: PUSH
20854: LD_VAR 0 1
20858: PPUSH
20859: CALL_OW 266
20863: PUSH
20864: LD_INT 32
20866: PUSH
20867: LD_INT 33
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: IN
20874: NOT
20875: OR
20876: IFFALSE 20880
// exit ;
20878: GO 21989
// nat := GetNation ( tower ) ;
20880: LD_ADDR_VAR 0 12
20884: PUSH
20885: LD_VAR 0 1
20889: PPUSH
20890: CALL_OW 248
20894: ST_TO_ADDR
// side := GetSide ( tower ) ;
20895: LD_ADDR_VAR 0 16
20899: PUSH
20900: LD_VAR 0 1
20904: PPUSH
20905: CALL_OW 255
20909: ST_TO_ADDR
// x := GetX ( tower ) ;
20910: LD_ADDR_VAR 0 10
20914: PUSH
20915: LD_VAR 0 1
20919: PPUSH
20920: CALL_OW 250
20924: ST_TO_ADDR
// y := GetY ( tower ) ;
20925: LD_ADDR_VAR 0 11
20929: PUSH
20930: LD_VAR 0 1
20934: PPUSH
20935: CALL_OW 251
20939: ST_TO_ADDR
// if not x or not y then
20940: LD_VAR 0 10
20944: NOT
20945: PUSH
20946: LD_VAR 0 11
20950: NOT
20951: OR
20952: IFFALSE 20956
// exit ;
20954: GO 21989
// weapon := 0 ;
20956: LD_ADDR_VAR 0 18
20960: PUSH
20961: LD_INT 0
20963: ST_TO_ADDR
// fac_list := [ ] ;
20964: LD_ADDR_VAR 0 17
20968: PUSH
20969: EMPTY
20970: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
20971: LD_ADDR_VAR 0 6
20975: PUSH
20976: LD_VAR 0 1
20980: PPUSH
20981: CALL_OW 274
20985: PPUSH
20986: LD_VAR 0 2
20990: PPUSH
20991: LD_INT 0
20993: PPUSH
20994: CALL 18560 0 3
20998: PPUSH
20999: LD_INT 30
21001: PUSH
21002: LD_INT 3
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PPUSH
21009: CALL_OW 72
21013: ST_TO_ADDR
// if not factories then
21014: LD_VAR 0 6
21018: NOT
21019: IFFALSE 21023
// exit ;
21021: GO 21989
// for i in factories do
21023: LD_ADDR_VAR 0 8
21027: PUSH
21028: LD_VAR 0 6
21032: PUSH
21033: FOR_IN
21034: IFFALSE 21059
// fac_list := fac_list union AvailableWeaponList ( i ) ;
21036: LD_ADDR_VAR 0 17
21040: PUSH
21041: LD_VAR 0 17
21045: PUSH
21046: LD_VAR 0 8
21050: PPUSH
21051: CALL_OW 478
21055: UNION
21056: ST_TO_ADDR
21057: GO 21033
21059: POP
21060: POP
// if not fac_list then
21061: LD_VAR 0 17
21065: NOT
21066: IFFALSE 21070
// exit ;
21068: GO 21989
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
21070: LD_ADDR_VAR 0 5
21074: PUSH
21075: LD_INT 4
21077: PUSH
21078: LD_INT 5
21080: PUSH
21081: LD_INT 9
21083: PUSH
21084: LD_INT 10
21086: PUSH
21087: LD_INT 6
21089: PUSH
21090: LD_INT 7
21092: PUSH
21093: LD_INT 11
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: PUSH
21105: LD_INT 27
21107: PUSH
21108: LD_INT 28
21110: PUSH
21111: LD_INT 26
21113: PUSH
21114: LD_INT 30
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: PUSH
21123: LD_INT 43
21125: PUSH
21126: LD_INT 44
21128: PUSH
21129: LD_INT 46
21131: PUSH
21132: LD_INT 45
21134: PUSH
21135: LD_INT 47
21137: PUSH
21138: LD_INT 49
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: LIST
21153: PUSH
21154: LD_VAR 0 12
21158: ARRAY
21159: ST_TO_ADDR
// list := list isect fac_list ;
21160: LD_ADDR_VAR 0 5
21164: PUSH
21165: LD_VAR 0 5
21169: PUSH
21170: LD_VAR 0 17
21174: ISECT
21175: ST_TO_ADDR
// if not list then
21176: LD_VAR 0 5
21180: NOT
21181: IFFALSE 21185
// exit ;
21183: GO 21989
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
21185: LD_VAR 0 12
21189: PUSH
21190: LD_INT 3
21192: EQUAL
21193: PUSH
21194: LD_INT 49
21196: PUSH
21197: LD_VAR 0 5
21201: IN
21202: AND
21203: PUSH
21204: LD_INT 31
21206: PPUSH
21207: LD_VAR 0 16
21211: PPUSH
21212: CALL_OW 321
21216: PUSH
21217: LD_INT 2
21219: EQUAL
21220: AND
21221: IFFALSE 21281
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
21223: LD_INT 22
21225: PUSH
21226: LD_VAR 0 16
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PUSH
21235: LD_INT 35
21237: PUSH
21238: LD_INT 49
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: PUSH
21245: LD_INT 91
21247: PUSH
21248: LD_VAR 0 1
21252: PUSH
21253: LD_INT 10
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: LIST
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: LIST
21265: PPUSH
21266: CALL_OW 69
21270: NOT
21271: IFFALSE 21281
// weapon := ru_time_lapser ;
21273: LD_ADDR_VAR 0 18
21277: PUSH
21278: LD_INT 49
21280: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
21281: LD_VAR 0 12
21285: PUSH
21286: LD_INT 1
21288: PUSH
21289: LD_INT 2
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: IN
21296: PUSH
21297: LD_INT 11
21299: PUSH
21300: LD_VAR 0 5
21304: IN
21305: PUSH
21306: LD_INT 30
21308: PUSH
21309: LD_VAR 0 5
21313: IN
21314: OR
21315: AND
21316: PUSH
21317: LD_INT 6
21319: PPUSH
21320: LD_VAR 0 16
21324: PPUSH
21325: CALL_OW 321
21329: PUSH
21330: LD_INT 2
21332: EQUAL
21333: AND
21334: IFFALSE 21499
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
21336: LD_INT 22
21338: PUSH
21339: LD_VAR 0 16
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: LD_INT 2
21350: PUSH
21351: LD_INT 35
21353: PUSH
21354: LD_INT 11
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: LD_INT 35
21363: PUSH
21364: LD_INT 30
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: LIST
21375: PUSH
21376: LD_INT 91
21378: PUSH
21379: LD_VAR 0 1
21383: PUSH
21384: LD_INT 18
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: LIST
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: LIST
21396: PPUSH
21397: CALL_OW 69
21401: NOT
21402: PUSH
21403: LD_INT 22
21405: PUSH
21406: LD_VAR 0 16
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: LD_INT 2
21417: PUSH
21418: LD_INT 30
21420: PUSH
21421: LD_INT 32
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: PUSH
21428: LD_INT 30
21430: PUSH
21431: LD_INT 33
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: LIST
21442: PUSH
21443: LD_INT 91
21445: PUSH
21446: LD_VAR 0 1
21450: PUSH
21451: LD_INT 12
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: LIST
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: LIST
21463: PUSH
21464: EMPTY
21465: LIST
21466: PPUSH
21467: CALL_OW 69
21471: PUSH
21472: LD_INT 2
21474: GREATER
21475: AND
21476: IFFALSE 21499
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21478: LD_ADDR_VAR 0 18
21482: PUSH
21483: LD_INT 11
21485: PUSH
21486: LD_INT 30
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: LD_VAR 0 12
21497: ARRAY
21498: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21499: LD_VAR 0 18
21503: NOT
21504: PUSH
21505: LD_INT 40
21507: PPUSH
21508: LD_VAR 0 16
21512: PPUSH
21513: CALL_OW 321
21517: PUSH
21518: LD_INT 2
21520: EQUAL
21521: AND
21522: PUSH
21523: LD_INT 7
21525: PUSH
21526: LD_VAR 0 5
21530: IN
21531: PUSH
21532: LD_INT 28
21534: PUSH
21535: LD_VAR 0 5
21539: IN
21540: OR
21541: PUSH
21542: LD_INT 45
21544: PUSH
21545: LD_VAR 0 5
21549: IN
21550: OR
21551: AND
21552: IFFALSE 21806
// begin hex := GetHexInfo ( x , y ) ;
21554: LD_ADDR_VAR 0 4
21558: PUSH
21559: LD_VAR 0 10
21563: PPUSH
21564: LD_VAR 0 11
21568: PPUSH
21569: CALL_OW 546
21573: ST_TO_ADDR
// if hex [ 1 ] then
21574: LD_VAR 0 4
21578: PUSH
21579: LD_INT 1
21581: ARRAY
21582: IFFALSE 21586
// exit ;
21584: GO 21989
// height := hex [ 2 ] ;
21586: LD_ADDR_VAR 0 15
21590: PUSH
21591: LD_VAR 0 4
21595: PUSH
21596: LD_INT 2
21598: ARRAY
21599: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21600: LD_ADDR_VAR 0 14
21604: PUSH
21605: LD_INT 0
21607: PUSH
21608: LD_INT 2
21610: PUSH
21611: LD_INT 3
21613: PUSH
21614: LD_INT 5
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: ST_TO_ADDR
// for i in tmp do
21623: LD_ADDR_VAR 0 8
21627: PUSH
21628: LD_VAR 0 14
21632: PUSH
21633: FOR_IN
21634: IFFALSE 21804
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21636: LD_ADDR_VAR 0 9
21640: PUSH
21641: LD_VAR 0 10
21645: PPUSH
21646: LD_VAR 0 8
21650: PPUSH
21651: LD_INT 5
21653: PPUSH
21654: CALL_OW 272
21658: PUSH
21659: LD_VAR 0 11
21663: PPUSH
21664: LD_VAR 0 8
21668: PPUSH
21669: LD_INT 5
21671: PPUSH
21672: CALL_OW 273
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21681: LD_VAR 0 9
21685: PUSH
21686: LD_INT 1
21688: ARRAY
21689: PPUSH
21690: LD_VAR 0 9
21694: PUSH
21695: LD_INT 2
21697: ARRAY
21698: PPUSH
21699: CALL_OW 488
21703: IFFALSE 21802
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21705: LD_ADDR_VAR 0 4
21709: PUSH
21710: LD_VAR 0 9
21714: PUSH
21715: LD_INT 1
21717: ARRAY
21718: PPUSH
21719: LD_VAR 0 9
21723: PUSH
21724: LD_INT 2
21726: ARRAY
21727: PPUSH
21728: CALL_OW 546
21732: ST_TO_ADDR
// if hex [ 1 ] then
21733: LD_VAR 0 4
21737: PUSH
21738: LD_INT 1
21740: ARRAY
21741: IFFALSE 21745
// continue ;
21743: GO 21633
// h := hex [ 2 ] ;
21745: LD_ADDR_VAR 0 13
21749: PUSH
21750: LD_VAR 0 4
21754: PUSH
21755: LD_INT 2
21757: ARRAY
21758: ST_TO_ADDR
// if h + 7 < height then
21759: LD_VAR 0 13
21763: PUSH
21764: LD_INT 7
21766: PLUS
21767: PUSH
21768: LD_VAR 0 15
21772: LESS
21773: IFFALSE 21802
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21775: LD_ADDR_VAR 0 18
21779: PUSH
21780: LD_INT 7
21782: PUSH
21783: LD_INT 28
21785: PUSH
21786: LD_INT 45
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: LIST
21793: PUSH
21794: LD_VAR 0 12
21798: ARRAY
21799: ST_TO_ADDR
// break ;
21800: GO 21804
// end ; end ; end ;
21802: GO 21633
21804: POP
21805: POP
// end ; if not weapon then
21806: LD_VAR 0 18
21810: NOT
21811: IFFALSE 21871
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21813: LD_ADDR_VAR 0 5
21817: PUSH
21818: LD_VAR 0 5
21822: PUSH
21823: LD_INT 11
21825: PUSH
21826: LD_INT 30
21828: PUSH
21829: LD_INT 49
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: LIST
21836: DIFF
21837: ST_TO_ADDR
// if not list then
21838: LD_VAR 0 5
21842: NOT
21843: IFFALSE 21847
// exit ;
21845: GO 21989
// weapon := list [ rand ( 1 , list ) ] ;
21847: LD_ADDR_VAR 0 18
21851: PUSH
21852: LD_VAR 0 5
21856: PUSH
21857: LD_INT 1
21859: PPUSH
21860: LD_VAR 0 5
21864: PPUSH
21865: CALL_OW 12
21869: ARRAY
21870: ST_TO_ADDR
// end ; if weapon then
21871: LD_VAR 0 18
21875: IFFALSE 21989
// begin tmp := CostOfWeapon ( weapon ) ;
21877: LD_ADDR_VAR 0 14
21881: PUSH
21882: LD_VAR 0 18
21886: PPUSH
21887: CALL_OW 451
21891: ST_TO_ADDR
// j := GetBase ( tower ) ;
21892: LD_ADDR_VAR 0 9
21896: PUSH
21897: LD_VAR 0 1
21901: PPUSH
21902: CALL_OW 274
21906: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21907: LD_VAR 0 9
21911: PPUSH
21912: LD_INT 1
21914: PPUSH
21915: CALL_OW 275
21919: PUSH
21920: LD_VAR 0 14
21924: PUSH
21925: LD_INT 1
21927: ARRAY
21928: GREATEREQUAL
21929: PUSH
21930: LD_VAR 0 9
21934: PPUSH
21935: LD_INT 2
21937: PPUSH
21938: CALL_OW 275
21942: PUSH
21943: LD_VAR 0 14
21947: PUSH
21948: LD_INT 2
21950: ARRAY
21951: GREATEREQUAL
21952: AND
21953: PUSH
21954: LD_VAR 0 9
21958: PPUSH
21959: LD_INT 3
21961: PPUSH
21962: CALL_OW 275
21966: PUSH
21967: LD_VAR 0 14
21971: PUSH
21972: LD_INT 3
21974: ARRAY
21975: GREATEREQUAL
21976: AND
21977: IFFALSE 21989
// result := weapon ;
21979: LD_ADDR_VAR 0 3
21983: PUSH
21984: LD_VAR 0 18
21988: ST_TO_ADDR
// end ; end ;
21989: LD_VAR 0 3
21993: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
21994: LD_INT 0
21996: PPUSH
21997: PPUSH
// result := true ;
21998: LD_ADDR_VAR 0 3
22002: PUSH
22003: LD_INT 1
22005: ST_TO_ADDR
// if array1 = array2 then
22006: LD_VAR 0 1
22010: PUSH
22011: LD_VAR 0 2
22015: EQUAL
22016: IFFALSE 22076
// begin for i = 1 to array1 do
22018: LD_ADDR_VAR 0 4
22022: PUSH
22023: DOUBLE
22024: LD_INT 1
22026: DEC
22027: ST_TO_ADDR
22028: LD_VAR 0 1
22032: PUSH
22033: FOR_TO
22034: IFFALSE 22072
// if array1 [ i ] <> array2 [ i ] then
22036: LD_VAR 0 1
22040: PUSH
22041: LD_VAR 0 4
22045: ARRAY
22046: PUSH
22047: LD_VAR 0 2
22051: PUSH
22052: LD_VAR 0 4
22056: ARRAY
22057: NONEQUAL
22058: IFFALSE 22070
// begin result := false ;
22060: LD_ADDR_VAR 0 3
22064: PUSH
22065: LD_INT 0
22067: ST_TO_ADDR
// break ;
22068: GO 22072
// end ;
22070: GO 22033
22072: POP
22073: POP
// end else
22074: GO 22084
// result := false ;
22076: LD_ADDR_VAR 0 3
22080: PUSH
22081: LD_INT 0
22083: ST_TO_ADDR
// end ;
22084: LD_VAR 0 3
22088: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
22089: LD_INT 0
22091: PPUSH
22092: PPUSH
// if not array1 or not array2 then
22093: LD_VAR 0 1
22097: NOT
22098: PUSH
22099: LD_VAR 0 2
22103: NOT
22104: OR
22105: IFFALSE 22109
// exit ;
22107: GO 22173
// result := true ;
22109: LD_ADDR_VAR 0 3
22113: PUSH
22114: LD_INT 1
22116: ST_TO_ADDR
// for i = 1 to array1 do
22117: LD_ADDR_VAR 0 4
22121: PUSH
22122: DOUBLE
22123: LD_INT 1
22125: DEC
22126: ST_TO_ADDR
22127: LD_VAR 0 1
22131: PUSH
22132: FOR_TO
22133: IFFALSE 22171
// if array1 [ i ] <> array2 [ i ] then
22135: LD_VAR 0 1
22139: PUSH
22140: LD_VAR 0 4
22144: ARRAY
22145: PUSH
22146: LD_VAR 0 2
22150: PUSH
22151: LD_VAR 0 4
22155: ARRAY
22156: NONEQUAL
22157: IFFALSE 22169
// begin result := false ;
22159: LD_ADDR_VAR 0 3
22163: PUSH
22164: LD_INT 0
22166: ST_TO_ADDR
// break ;
22167: GO 22171
// end ;
22169: GO 22132
22171: POP
22172: POP
// end ;
22173: LD_VAR 0 3
22177: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
22178: LD_INT 0
22180: PPUSH
22181: PPUSH
22182: PPUSH
// pom := GetBase ( fac ) ;
22183: LD_ADDR_VAR 0 5
22187: PUSH
22188: LD_VAR 0 1
22192: PPUSH
22193: CALL_OW 274
22197: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
22198: LD_ADDR_VAR 0 4
22202: PUSH
22203: LD_VAR 0 2
22207: PUSH
22208: LD_INT 1
22210: ARRAY
22211: PPUSH
22212: LD_VAR 0 2
22216: PUSH
22217: LD_INT 2
22219: ARRAY
22220: PPUSH
22221: LD_VAR 0 2
22225: PUSH
22226: LD_INT 3
22228: ARRAY
22229: PPUSH
22230: LD_VAR 0 2
22234: PUSH
22235: LD_INT 4
22237: ARRAY
22238: PPUSH
22239: CALL_OW 449
22243: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22244: LD_ADDR_VAR 0 3
22248: PUSH
22249: LD_VAR 0 5
22253: PPUSH
22254: LD_INT 1
22256: PPUSH
22257: CALL_OW 275
22261: PUSH
22262: LD_VAR 0 4
22266: PUSH
22267: LD_INT 1
22269: ARRAY
22270: GREATEREQUAL
22271: PUSH
22272: LD_VAR 0 5
22276: PPUSH
22277: LD_INT 2
22279: PPUSH
22280: CALL_OW 275
22284: PUSH
22285: LD_VAR 0 4
22289: PUSH
22290: LD_INT 2
22292: ARRAY
22293: GREATEREQUAL
22294: AND
22295: PUSH
22296: LD_VAR 0 5
22300: PPUSH
22301: LD_INT 3
22303: PPUSH
22304: CALL_OW 275
22308: PUSH
22309: LD_VAR 0 4
22313: PUSH
22314: LD_INT 3
22316: ARRAY
22317: GREATEREQUAL
22318: AND
22319: ST_TO_ADDR
// end ;
22320: LD_VAR 0 3
22324: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
22325: LD_INT 0
22327: PPUSH
22328: PPUSH
22329: PPUSH
22330: PPUSH
// pom := GetBase ( building ) ;
22331: LD_ADDR_VAR 0 3
22335: PUSH
22336: LD_VAR 0 1
22340: PPUSH
22341: CALL_OW 274
22345: ST_TO_ADDR
// if not pom then
22346: LD_VAR 0 3
22350: NOT
22351: IFFALSE 22355
// exit ;
22353: GO 22525
// btype := GetBType ( building ) ;
22355: LD_ADDR_VAR 0 5
22359: PUSH
22360: LD_VAR 0 1
22364: PPUSH
22365: CALL_OW 266
22369: ST_TO_ADDR
// if btype = b_armoury then
22370: LD_VAR 0 5
22374: PUSH
22375: LD_INT 4
22377: EQUAL
22378: IFFALSE 22388
// btype := b_barracks ;
22380: LD_ADDR_VAR 0 5
22384: PUSH
22385: LD_INT 5
22387: ST_TO_ADDR
// if btype = b_depot then
22388: LD_VAR 0 5
22392: PUSH
22393: LD_INT 0
22395: EQUAL
22396: IFFALSE 22406
// btype := b_warehouse ;
22398: LD_ADDR_VAR 0 5
22402: PUSH
22403: LD_INT 1
22405: ST_TO_ADDR
// if btype = b_workshop then
22406: LD_VAR 0 5
22410: PUSH
22411: LD_INT 2
22413: EQUAL
22414: IFFALSE 22424
// btype := b_factory ;
22416: LD_ADDR_VAR 0 5
22420: PUSH
22421: LD_INT 3
22423: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22424: LD_ADDR_VAR 0 4
22428: PUSH
22429: LD_VAR 0 5
22433: PPUSH
22434: LD_VAR 0 1
22438: PPUSH
22439: CALL_OW 248
22443: PPUSH
22444: CALL_OW 450
22448: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22449: LD_ADDR_VAR 0 2
22453: PUSH
22454: LD_VAR 0 3
22458: PPUSH
22459: LD_INT 1
22461: PPUSH
22462: CALL_OW 275
22466: PUSH
22467: LD_VAR 0 4
22471: PUSH
22472: LD_INT 1
22474: ARRAY
22475: GREATEREQUAL
22476: PUSH
22477: LD_VAR 0 3
22481: PPUSH
22482: LD_INT 2
22484: PPUSH
22485: CALL_OW 275
22489: PUSH
22490: LD_VAR 0 4
22494: PUSH
22495: LD_INT 2
22497: ARRAY
22498: GREATEREQUAL
22499: AND
22500: PUSH
22501: LD_VAR 0 3
22505: PPUSH
22506: LD_INT 3
22508: PPUSH
22509: CALL_OW 275
22513: PUSH
22514: LD_VAR 0 4
22518: PUSH
22519: LD_INT 3
22521: ARRAY
22522: GREATEREQUAL
22523: AND
22524: ST_TO_ADDR
// end ;
22525: LD_VAR 0 2
22529: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22530: LD_INT 0
22532: PPUSH
22533: PPUSH
22534: PPUSH
// pom := GetBase ( building ) ;
22535: LD_ADDR_VAR 0 4
22539: PUSH
22540: LD_VAR 0 1
22544: PPUSH
22545: CALL_OW 274
22549: ST_TO_ADDR
// if not pom then
22550: LD_VAR 0 4
22554: NOT
22555: IFFALSE 22559
// exit ;
22557: GO 22660
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22559: LD_ADDR_VAR 0 5
22563: PUSH
22564: LD_VAR 0 2
22568: PPUSH
22569: LD_VAR 0 1
22573: PPUSH
22574: CALL_OW 248
22578: PPUSH
22579: CALL_OW 450
22583: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22584: LD_ADDR_VAR 0 3
22588: PUSH
22589: LD_VAR 0 4
22593: PPUSH
22594: LD_INT 1
22596: PPUSH
22597: CALL_OW 275
22601: PUSH
22602: LD_VAR 0 5
22606: PUSH
22607: LD_INT 1
22609: ARRAY
22610: GREATEREQUAL
22611: PUSH
22612: LD_VAR 0 4
22616: PPUSH
22617: LD_INT 2
22619: PPUSH
22620: CALL_OW 275
22624: PUSH
22625: LD_VAR 0 5
22629: PUSH
22630: LD_INT 2
22632: ARRAY
22633: GREATEREQUAL
22634: AND
22635: PUSH
22636: LD_VAR 0 4
22640: PPUSH
22641: LD_INT 3
22643: PPUSH
22644: CALL_OW 275
22648: PUSH
22649: LD_VAR 0 5
22653: PUSH
22654: LD_INT 3
22656: ARRAY
22657: GREATEREQUAL
22658: AND
22659: ST_TO_ADDR
// end ;
22660: LD_VAR 0 3
22664: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22665: LD_INT 0
22667: PPUSH
22668: PPUSH
22669: PPUSH
22670: PPUSH
22671: PPUSH
22672: PPUSH
22673: PPUSH
22674: PPUSH
22675: PPUSH
22676: PPUSH
22677: PPUSH
// result := false ;
22678: LD_ADDR_VAR 0 8
22682: PUSH
22683: LD_INT 0
22685: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22686: LD_VAR 0 5
22690: NOT
22691: PUSH
22692: LD_VAR 0 1
22696: NOT
22697: OR
22698: PUSH
22699: LD_VAR 0 2
22703: NOT
22704: OR
22705: PUSH
22706: LD_VAR 0 3
22710: NOT
22711: OR
22712: IFFALSE 22716
// exit ;
22714: GO 23530
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22716: LD_ADDR_VAR 0 14
22720: PUSH
22721: LD_VAR 0 1
22725: PPUSH
22726: LD_VAR 0 2
22730: PPUSH
22731: LD_VAR 0 3
22735: PPUSH
22736: LD_VAR 0 4
22740: PPUSH
22741: LD_VAR 0 5
22745: PUSH
22746: LD_INT 1
22748: ARRAY
22749: PPUSH
22750: CALL_OW 248
22754: PPUSH
22755: LD_INT 0
22757: PPUSH
22758: CALL 24763 0 6
22762: ST_TO_ADDR
// if not hexes then
22763: LD_VAR 0 14
22767: NOT
22768: IFFALSE 22772
// exit ;
22770: GO 23530
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22772: LD_ADDR_VAR 0 17
22776: PUSH
22777: LD_VAR 0 5
22781: PPUSH
22782: LD_INT 22
22784: PUSH
22785: LD_VAR 0 13
22789: PPUSH
22790: CALL_OW 255
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: LD_INT 2
22801: PUSH
22802: LD_INT 30
22804: PUSH
22805: LD_INT 0
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 30
22814: PUSH
22815: LD_INT 1
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: LIST
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PPUSH
22831: CALL_OW 72
22835: ST_TO_ADDR
// for i = 1 to hexes do
22836: LD_ADDR_VAR 0 9
22840: PUSH
22841: DOUBLE
22842: LD_INT 1
22844: DEC
22845: ST_TO_ADDR
22846: LD_VAR 0 14
22850: PUSH
22851: FOR_TO
22852: IFFALSE 23528
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22854: LD_ADDR_VAR 0 13
22858: PUSH
22859: LD_VAR 0 14
22863: PUSH
22864: LD_VAR 0 9
22868: ARRAY
22869: PUSH
22870: LD_INT 1
22872: ARRAY
22873: PPUSH
22874: LD_VAR 0 14
22878: PUSH
22879: LD_VAR 0 9
22883: ARRAY
22884: PUSH
22885: LD_INT 2
22887: ARRAY
22888: PPUSH
22889: CALL_OW 428
22893: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
22894: LD_VAR 0 14
22898: PUSH
22899: LD_VAR 0 9
22903: ARRAY
22904: PUSH
22905: LD_INT 1
22907: ARRAY
22908: PPUSH
22909: LD_VAR 0 14
22913: PUSH
22914: LD_VAR 0 9
22918: ARRAY
22919: PUSH
22920: LD_INT 2
22922: ARRAY
22923: PPUSH
22924: CALL_OW 351
22928: PUSH
22929: LD_VAR 0 14
22933: PUSH
22934: LD_VAR 0 9
22938: ARRAY
22939: PUSH
22940: LD_INT 1
22942: ARRAY
22943: PPUSH
22944: LD_VAR 0 14
22948: PUSH
22949: LD_VAR 0 9
22953: ARRAY
22954: PUSH
22955: LD_INT 2
22957: ARRAY
22958: PPUSH
22959: CALL_OW 488
22963: NOT
22964: OR
22965: PUSH
22966: LD_VAR 0 13
22970: PPUSH
22971: CALL_OW 247
22975: PUSH
22976: LD_INT 3
22978: EQUAL
22979: OR
22980: IFFALSE 22986
// exit ;
22982: POP
22983: POP
22984: GO 23530
// if not tmp then
22986: LD_VAR 0 13
22990: NOT
22991: IFFALSE 22995
// continue ;
22993: GO 22851
// result := true ;
22995: LD_ADDR_VAR 0 8
22999: PUSH
23000: LD_INT 1
23002: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
23003: LD_VAR 0 6
23007: PUSH
23008: LD_VAR 0 13
23012: PPUSH
23013: CALL_OW 247
23017: PUSH
23018: LD_INT 2
23020: EQUAL
23021: AND
23022: PUSH
23023: LD_VAR 0 13
23027: PPUSH
23028: CALL_OW 263
23032: PUSH
23033: LD_INT 1
23035: EQUAL
23036: AND
23037: IFFALSE 23201
// begin if IsDrivenBy ( tmp ) then
23039: LD_VAR 0 13
23043: PPUSH
23044: CALL_OW 311
23048: IFFALSE 23052
// continue ;
23050: GO 22851
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
23052: LD_VAR 0 6
23056: PPUSH
23057: LD_INT 3
23059: PUSH
23060: LD_INT 60
23062: PUSH
23063: EMPTY
23064: LIST
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 3
23072: PUSH
23073: LD_INT 55
23075: PUSH
23076: EMPTY
23077: LIST
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PPUSH
23087: CALL_OW 72
23091: IFFALSE 23199
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
23093: LD_ADDR_VAR 0 18
23097: PUSH
23098: LD_VAR 0 6
23102: PPUSH
23103: LD_INT 3
23105: PUSH
23106: LD_INT 60
23108: PUSH
23109: EMPTY
23110: LIST
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: LD_INT 3
23118: PUSH
23119: LD_INT 55
23121: PUSH
23122: EMPTY
23123: LIST
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: PPUSH
23133: CALL_OW 72
23137: PUSH
23138: LD_INT 1
23140: ARRAY
23141: ST_TO_ADDR
// if IsInUnit ( driver ) then
23142: LD_VAR 0 18
23146: PPUSH
23147: CALL_OW 310
23151: IFFALSE 23162
// ComExit ( driver ) ;
23153: LD_VAR 0 18
23157: PPUSH
23158: CALL 48542 0 1
// AddComEnterUnit ( driver , tmp ) ;
23162: LD_VAR 0 18
23166: PPUSH
23167: LD_VAR 0 13
23171: PPUSH
23172: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
23176: LD_VAR 0 18
23180: PPUSH
23181: LD_VAR 0 7
23185: PPUSH
23186: CALL_OW 173
// AddComExitVehicle ( driver ) ;
23190: LD_VAR 0 18
23194: PPUSH
23195: CALL_OW 181
// end ; continue ;
23199: GO 22851
// end ; if not cleaners or not tmp in cleaners then
23201: LD_VAR 0 6
23205: NOT
23206: PUSH
23207: LD_VAR 0 13
23211: PUSH
23212: LD_VAR 0 6
23216: IN
23217: NOT
23218: OR
23219: IFFALSE 23526
// begin if dep then
23221: LD_VAR 0 17
23225: IFFALSE 23361
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
23227: LD_ADDR_VAR 0 16
23231: PUSH
23232: LD_VAR 0 17
23236: PUSH
23237: LD_INT 1
23239: ARRAY
23240: PPUSH
23241: CALL_OW 250
23245: PPUSH
23246: LD_VAR 0 17
23250: PUSH
23251: LD_INT 1
23253: ARRAY
23254: PPUSH
23255: CALL_OW 254
23259: PPUSH
23260: LD_INT 5
23262: PPUSH
23263: CALL_OW 272
23267: PUSH
23268: LD_VAR 0 17
23272: PUSH
23273: LD_INT 1
23275: ARRAY
23276: PPUSH
23277: CALL_OW 251
23281: PPUSH
23282: LD_VAR 0 17
23286: PUSH
23287: LD_INT 1
23289: ARRAY
23290: PPUSH
23291: CALL_OW 254
23295: PPUSH
23296: LD_INT 5
23298: PPUSH
23299: CALL_OW 273
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
23308: LD_VAR 0 16
23312: PUSH
23313: LD_INT 1
23315: ARRAY
23316: PPUSH
23317: LD_VAR 0 16
23321: PUSH
23322: LD_INT 2
23324: ARRAY
23325: PPUSH
23326: CALL_OW 488
23330: IFFALSE 23361
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
23332: LD_VAR 0 13
23336: PPUSH
23337: LD_VAR 0 16
23341: PUSH
23342: LD_INT 1
23344: ARRAY
23345: PPUSH
23346: LD_VAR 0 16
23350: PUSH
23351: LD_INT 2
23353: ARRAY
23354: PPUSH
23355: CALL_OW 111
// continue ;
23359: GO 22851
// end ; end ; r := GetDir ( tmp ) ;
23361: LD_ADDR_VAR 0 15
23365: PUSH
23366: LD_VAR 0 13
23370: PPUSH
23371: CALL_OW 254
23375: ST_TO_ADDR
// if r = 5 then
23376: LD_VAR 0 15
23380: PUSH
23381: LD_INT 5
23383: EQUAL
23384: IFFALSE 23394
// r := 0 ;
23386: LD_ADDR_VAR 0 15
23390: PUSH
23391: LD_INT 0
23393: ST_TO_ADDR
// for j = r to 5 do
23394: LD_ADDR_VAR 0 10
23398: PUSH
23399: DOUBLE
23400: LD_VAR 0 15
23404: DEC
23405: ST_TO_ADDR
23406: LD_INT 5
23408: PUSH
23409: FOR_TO
23410: IFFALSE 23524
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
23412: LD_ADDR_VAR 0 11
23416: PUSH
23417: LD_VAR 0 13
23421: PPUSH
23422: CALL_OW 250
23426: PPUSH
23427: LD_VAR 0 10
23431: PPUSH
23432: LD_INT 2
23434: PPUSH
23435: CALL_OW 272
23439: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
23440: LD_ADDR_VAR 0 12
23444: PUSH
23445: LD_VAR 0 13
23449: PPUSH
23450: CALL_OW 251
23454: PPUSH
23455: LD_VAR 0 10
23459: PPUSH
23460: LD_INT 2
23462: PPUSH
23463: CALL_OW 273
23467: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23468: LD_VAR 0 11
23472: PPUSH
23473: LD_VAR 0 12
23477: PPUSH
23478: CALL_OW 488
23482: PUSH
23483: LD_VAR 0 11
23487: PPUSH
23488: LD_VAR 0 12
23492: PPUSH
23493: CALL_OW 428
23497: NOT
23498: AND
23499: IFFALSE 23522
// begin ComMoveXY ( tmp , _x , _y ) ;
23501: LD_VAR 0 13
23505: PPUSH
23506: LD_VAR 0 11
23510: PPUSH
23511: LD_VAR 0 12
23515: PPUSH
23516: CALL_OW 111
// break ;
23520: GO 23524
// end ; end ;
23522: GO 23409
23524: POP
23525: POP
// end ; end ;
23526: GO 22851
23528: POP
23529: POP
// end ;
23530: LD_VAR 0 8
23534: RET
// export function BuildingTechInvented ( side , btype ) ; begin
23535: LD_INT 0
23537: PPUSH
// result := true ;
23538: LD_ADDR_VAR 0 3
23542: PUSH
23543: LD_INT 1
23545: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
23546: LD_VAR 0 2
23550: PUSH
23551: LD_INT 24
23553: DOUBLE
23554: EQUAL
23555: IFTRUE 23565
23557: LD_INT 33
23559: DOUBLE
23560: EQUAL
23561: IFTRUE 23565
23563: GO 23590
23565: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
23566: LD_ADDR_VAR 0 3
23570: PUSH
23571: LD_INT 32
23573: PPUSH
23574: LD_VAR 0 1
23578: PPUSH
23579: CALL_OW 321
23583: PUSH
23584: LD_INT 2
23586: EQUAL
23587: ST_TO_ADDR
23588: GO 23906
23590: LD_INT 20
23592: DOUBLE
23593: EQUAL
23594: IFTRUE 23598
23596: GO 23623
23598: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
23599: LD_ADDR_VAR 0 3
23603: PUSH
23604: LD_INT 6
23606: PPUSH
23607: LD_VAR 0 1
23611: PPUSH
23612: CALL_OW 321
23616: PUSH
23617: LD_INT 2
23619: EQUAL
23620: ST_TO_ADDR
23621: GO 23906
23623: LD_INT 22
23625: DOUBLE
23626: EQUAL
23627: IFTRUE 23637
23629: LD_INT 36
23631: DOUBLE
23632: EQUAL
23633: IFTRUE 23637
23635: GO 23662
23637: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
23638: LD_ADDR_VAR 0 3
23642: PUSH
23643: LD_INT 15
23645: PPUSH
23646: LD_VAR 0 1
23650: PPUSH
23651: CALL_OW 321
23655: PUSH
23656: LD_INT 2
23658: EQUAL
23659: ST_TO_ADDR
23660: GO 23906
23662: LD_INT 30
23664: DOUBLE
23665: EQUAL
23666: IFTRUE 23670
23668: GO 23695
23670: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23671: LD_ADDR_VAR 0 3
23675: PUSH
23676: LD_INT 20
23678: PPUSH
23679: LD_VAR 0 1
23683: PPUSH
23684: CALL_OW 321
23688: PUSH
23689: LD_INT 2
23691: EQUAL
23692: ST_TO_ADDR
23693: GO 23906
23695: LD_INT 28
23697: DOUBLE
23698: EQUAL
23699: IFTRUE 23709
23701: LD_INT 21
23703: DOUBLE
23704: EQUAL
23705: IFTRUE 23709
23707: GO 23734
23709: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23710: LD_ADDR_VAR 0 3
23714: PUSH
23715: LD_INT 21
23717: PPUSH
23718: LD_VAR 0 1
23722: PPUSH
23723: CALL_OW 321
23727: PUSH
23728: LD_INT 2
23730: EQUAL
23731: ST_TO_ADDR
23732: GO 23906
23734: LD_INT 16
23736: DOUBLE
23737: EQUAL
23738: IFTRUE 23742
23740: GO 23767
23742: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
23743: LD_ADDR_VAR 0 3
23747: PUSH
23748: LD_INT 84
23750: PPUSH
23751: LD_VAR 0 1
23755: PPUSH
23756: CALL_OW 321
23760: PUSH
23761: LD_INT 2
23763: EQUAL
23764: ST_TO_ADDR
23765: GO 23906
23767: LD_INT 19
23769: DOUBLE
23770: EQUAL
23771: IFTRUE 23781
23773: LD_INT 23
23775: DOUBLE
23776: EQUAL
23777: IFTRUE 23781
23779: GO 23806
23781: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
23782: LD_ADDR_VAR 0 3
23786: PUSH
23787: LD_INT 83
23789: PPUSH
23790: LD_VAR 0 1
23794: PPUSH
23795: CALL_OW 321
23799: PUSH
23800: LD_INT 2
23802: EQUAL
23803: ST_TO_ADDR
23804: GO 23906
23806: LD_INT 17
23808: DOUBLE
23809: EQUAL
23810: IFTRUE 23814
23812: GO 23839
23814: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
23815: LD_ADDR_VAR 0 3
23819: PUSH
23820: LD_INT 39
23822: PPUSH
23823: LD_VAR 0 1
23827: PPUSH
23828: CALL_OW 321
23832: PUSH
23833: LD_INT 2
23835: EQUAL
23836: ST_TO_ADDR
23837: GO 23906
23839: LD_INT 18
23841: DOUBLE
23842: EQUAL
23843: IFTRUE 23847
23845: GO 23872
23847: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
23848: LD_ADDR_VAR 0 3
23852: PUSH
23853: LD_INT 40
23855: PPUSH
23856: LD_VAR 0 1
23860: PPUSH
23861: CALL_OW 321
23865: PUSH
23866: LD_INT 2
23868: EQUAL
23869: ST_TO_ADDR
23870: GO 23906
23872: LD_INT 27
23874: DOUBLE
23875: EQUAL
23876: IFTRUE 23880
23878: GO 23905
23880: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
23881: LD_ADDR_VAR 0 3
23885: PUSH
23886: LD_INT 35
23888: PPUSH
23889: LD_VAR 0 1
23893: PPUSH
23894: CALL_OW 321
23898: PUSH
23899: LD_INT 2
23901: EQUAL
23902: ST_TO_ADDR
23903: GO 23906
23905: POP
// end ;
23906: LD_VAR 0 3
23910: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
23911: LD_INT 0
23913: PPUSH
23914: PPUSH
23915: PPUSH
23916: PPUSH
23917: PPUSH
23918: PPUSH
23919: PPUSH
23920: PPUSH
23921: PPUSH
23922: PPUSH
23923: PPUSH
// result := false ;
23924: LD_ADDR_VAR 0 6
23928: PUSH
23929: LD_INT 0
23931: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
23932: LD_VAR 0 1
23936: NOT
23937: PUSH
23938: LD_VAR 0 1
23942: PPUSH
23943: CALL_OW 266
23947: PUSH
23948: LD_INT 0
23950: PUSH
23951: LD_INT 1
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: IN
23958: NOT
23959: OR
23960: PUSH
23961: LD_VAR 0 2
23965: NOT
23966: OR
23967: PUSH
23968: LD_VAR 0 5
23972: PUSH
23973: LD_INT 0
23975: PUSH
23976: LD_INT 1
23978: PUSH
23979: LD_INT 2
23981: PUSH
23982: LD_INT 3
23984: PUSH
23985: LD_INT 4
23987: PUSH
23988: LD_INT 5
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: IN
23999: NOT
24000: OR
24001: PUSH
24002: LD_VAR 0 3
24006: PPUSH
24007: LD_VAR 0 4
24011: PPUSH
24012: CALL_OW 488
24016: NOT
24017: OR
24018: IFFALSE 24022
// exit ;
24020: GO 24758
// side := GetSide ( depot ) ;
24022: LD_ADDR_VAR 0 9
24026: PUSH
24027: LD_VAR 0 1
24031: PPUSH
24032: CALL_OW 255
24036: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
24037: LD_VAR 0 9
24041: PPUSH
24042: LD_VAR 0 2
24046: PPUSH
24047: CALL 23535 0 2
24051: NOT
24052: IFFALSE 24056
// exit ;
24054: GO 24758
// pom := GetBase ( depot ) ;
24056: LD_ADDR_VAR 0 10
24060: PUSH
24061: LD_VAR 0 1
24065: PPUSH
24066: CALL_OW 274
24070: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
24071: LD_ADDR_VAR 0 11
24075: PUSH
24076: LD_VAR 0 2
24080: PPUSH
24081: LD_VAR 0 1
24085: PPUSH
24086: CALL_OW 248
24090: PPUSH
24091: CALL_OW 450
24095: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
24096: LD_VAR 0 10
24100: PPUSH
24101: LD_INT 1
24103: PPUSH
24104: CALL_OW 275
24108: PUSH
24109: LD_VAR 0 11
24113: PUSH
24114: LD_INT 1
24116: ARRAY
24117: GREATEREQUAL
24118: PUSH
24119: LD_VAR 0 10
24123: PPUSH
24124: LD_INT 2
24126: PPUSH
24127: CALL_OW 275
24131: PUSH
24132: LD_VAR 0 11
24136: PUSH
24137: LD_INT 2
24139: ARRAY
24140: GREATEREQUAL
24141: AND
24142: PUSH
24143: LD_VAR 0 10
24147: PPUSH
24148: LD_INT 3
24150: PPUSH
24151: CALL_OW 275
24155: PUSH
24156: LD_VAR 0 11
24160: PUSH
24161: LD_INT 3
24163: ARRAY
24164: GREATEREQUAL
24165: AND
24166: NOT
24167: IFFALSE 24171
// exit ;
24169: GO 24758
// if GetBType ( depot ) = b_depot then
24171: LD_VAR 0 1
24175: PPUSH
24176: CALL_OW 266
24180: PUSH
24181: LD_INT 0
24183: EQUAL
24184: IFFALSE 24196
// dist := 28 else
24186: LD_ADDR_VAR 0 14
24190: PUSH
24191: LD_INT 28
24193: ST_TO_ADDR
24194: GO 24204
// dist := 36 ;
24196: LD_ADDR_VAR 0 14
24200: PUSH
24201: LD_INT 36
24203: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
24204: LD_VAR 0 1
24208: PPUSH
24209: LD_VAR 0 3
24213: PPUSH
24214: LD_VAR 0 4
24218: PPUSH
24219: CALL_OW 297
24223: PUSH
24224: LD_VAR 0 14
24228: GREATER
24229: IFFALSE 24233
// exit ;
24231: GO 24758
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
24233: LD_ADDR_VAR 0 12
24237: PUSH
24238: LD_VAR 0 2
24242: PPUSH
24243: LD_VAR 0 3
24247: PPUSH
24248: LD_VAR 0 4
24252: PPUSH
24253: LD_VAR 0 5
24257: PPUSH
24258: LD_VAR 0 1
24262: PPUSH
24263: CALL_OW 248
24267: PPUSH
24268: LD_INT 0
24270: PPUSH
24271: CALL 24763 0 6
24275: ST_TO_ADDR
// if not hexes then
24276: LD_VAR 0 12
24280: NOT
24281: IFFALSE 24285
// exit ;
24283: GO 24758
// hex := GetHexInfo ( x , y ) ;
24285: LD_ADDR_VAR 0 15
24289: PUSH
24290: LD_VAR 0 3
24294: PPUSH
24295: LD_VAR 0 4
24299: PPUSH
24300: CALL_OW 546
24304: ST_TO_ADDR
// if hex [ 1 ] then
24305: LD_VAR 0 15
24309: PUSH
24310: LD_INT 1
24312: ARRAY
24313: IFFALSE 24317
// exit ;
24315: GO 24758
// height := hex [ 2 ] ;
24317: LD_ADDR_VAR 0 13
24321: PUSH
24322: LD_VAR 0 15
24326: PUSH
24327: LD_INT 2
24329: ARRAY
24330: ST_TO_ADDR
// for i = 1 to hexes do
24331: LD_ADDR_VAR 0 7
24335: PUSH
24336: DOUBLE
24337: LD_INT 1
24339: DEC
24340: ST_TO_ADDR
24341: LD_VAR 0 12
24345: PUSH
24346: FOR_TO
24347: IFFALSE 24677
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
24349: LD_VAR 0 12
24353: PUSH
24354: LD_VAR 0 7
24358: ARRAY
24359: PUSH
24360: LD_INT 1
24362: ARRAY
24363: PPUSH
24364: LD_VAR 0 12
24368: PUSH
24369: LD_VAR 0 7
24373: ARRAY
24374: PUSH
24375: LD_INT 2
24377: ARRAY
24378: PPUSH
24379: CALL_OW 488
24383: NOT
24384: PUSH
24385: LD_VAR 0 12
24389: PUSH
24390: LD_VAR 0 7
24394: ARRAY
24395: PUSH
24396: LD_INT 1
24398: ARRAY
24399: PPUSH
24400: LD_VAR 0 12
24404: PUSH
24405: LD_VAR 0 7
24409: ARRAY
24410: PUSH
24411: LD_INT 2
24413: ARRAY
24414: PPUSH
24415: CALL_OW 428
24419: PUSH
24420: LD_INT 0
24422: GREATER
24423: OR
24424: PUSH
24425: LD_VAR 0 12
24429: PUSH
24430: LD_VAR 0 7
24434: ARRAY
24435: PUSH
24436: LD_INT 1
24438: ARRAY
24439: PPUSH
24440: LD_VAR 0 12
24444: PUSH
24445: LD_VAR 0 7
24449: ARRAY
24450: PUSH
24451: LD_INT 2
24453: ARRAY
24454: PPUSH
24455: CALL_OW 351
24459: OR
24460: IFFALSE 24466
// exit ;
24462: POP
24463: POP
24464: GO 24758
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24466: LD_ADDR_VAR 0 8
24470: PUSH
24471: LD_VAR 0 12
24475: PUSH
24476: LD_VAR 0 7
24480: ARRAY
24481: PUSH
24482: LD_INT 1
24484: ARRAY
24485: PPUSH
24486: LD_VAR 0 12
24490: PUSH
24491: LD_VAR 0 7
24495: ARRAY
24496: PUSH
24497: LD_INT 2
24499: ARRAY
24500: PPUSH
24501: CALL_OW 546
24505: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24506: LD_VAR 0 8
24510: PUSH
24511: LD_INT 1
24513: ARRAY
24514: PUSH
24515: LD_VAR 0 8
24519: PUSH
24520: LD_INT 2
24522: ARRAY
24523: PUSH
24524: LD_VAR 0 13
24528: PUSH
24529: LD_INT 2
24531: PLUS
24532: GREATER
24533: OR
24534: PUSH
24535: LD_VAR 0 8
24539: PUSH
24540: LD_INT 2
24542: ARRAY
24543: PUSH
24544: LD_VAR 0 13
24548: PUSH
24549: LD_INT 2
24551: MINUS
24552: LESS
24553: OR
24554: PUSH
24555: LD_VAR 0 8
24559: PUSH
24560: LD_INT 3
24562: ARRAY
24563: PUSH
24564: LD_INT 0
24566: PUSH
24567: LD_INT 8
24569: PUSH
24570: LD_INT 9
24572: PUSH
24573: LD_INT 10
24575: PUSH
24576: LD_INT 11
24578: PUSH
24579: LD_INT 12
24581: PUSH
24582: LD_INT 13
24584: PUSH
24585: LD_INT 16
24587: PUSH
24588: LD_INT 17
24590: PUSH
24591: LD_INT 18
24593: PUSH
24594: LD_INT 19
24596: PUSH
24597: LD_INT 20
24599: PUSH
24600: LD_INT 21
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: IN
24618: NOT
24619: OR
24620: PUSH
24621: LD_VAR 0 8
24625: PUSH
24626: LD_INT 5
24628: ARRAY
24629: NOT
24630: OR
24631: PUSH
24632: LD_VAR 0 8
24636: PUSH
24637: LD_INT 6
24639: ARRAY
24640: PUSH
24641: LD_INT 1
24643: PUSH
24644: LD_INT 2
24646: PUSH
24647: LD_INT 7
24649: PUSH
24650: LD_INT 9
24652: PUSH
24653: LD_INT 10
24655: PUSH
24656: LD_INT 11
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: IN
24667: NOT
24668: OR
24669: IFFALSE 24675
// exit ;
24671: POP
24672: POP
24673: GO 24758
// end ;
24675: GO 24346
24677: POP
24678: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24679: LD_VAR 0 9
24683: PPUSH
24684: LD_VAR 0 3
24688: PPUSH
24689: LD_VAR 0 4
24693: PPUSH
24694: LD_INT 20
24696: PPUSH
24697: CALL 16710 0 4
24701: PUSH
24702: LD_INT 4
24704: ARRAY
24705: IFFALSE 24709
// exit ;
24707: GO 24758
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24709: LD_VAR 0 2
24713: PUSH
24714: LD_INT 29
24716: PUSH
24717: LD_INT 30
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: IN
24724: PUSH
24725: LD_VAR 0 3
24729: PPUSH
24730: LD_VAR 0 4
24734: PPUSH
24735: LD_VAR 0 9
24739: PPUSH
24740: CALL_OW 440
24744: NOT
24745: AND
24746: IFFALSE 24750
// exit ;
24748: GO 24758
// result := true ;
24750: LD_ADDR_VAR 0 6
24754: PUSH
24755: LD_INT 1
24757: ST_TO_ADDR
// end ;
24758: LD_VAR 0 6
24762: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
24763: LD_INT 0
24765: PPUSH
24766: PPUSH
24767: PPUSH
24768: PPUSH
24769: PPUSH
24770: PPUSH
24771: PPUSH
24772: PPUSH
24773: PPUSH
24774: PPUSH
24775: PPUSH
24776: PPUSH
24777: PPUSH
24778: PPUSH
24779: PPUSH
24780: PPUSH
24781: PPUSH
24782: PPUSH
24783: PPUSH
24784: PPUSH
24785: PPUSH
24786: PPUSH
24787: PPUSH
24788: PPUSH
24789: PPUSH
24790: PPUSH
24791: PPUSH
24792: PPUSH
24793: PPUSH
24794: PPUSH
24795: PPUSH
24796: PPUSH
24797: PPUSH
24798: PPUSH
24799: PPUSH
24800: PPUSH
24801: PPUSH
24802: PPUSH
24803: PPUSH
24804: PPUSH
24805: PPUSH
24806: PPUSH
24807: PPUSH
24808: PPUSH
24809: PPUSH
24810: PPUSH
24811: PPUSH
24812: PPUSH
24813: PPUSH
24814: PPUSH
24815: PPUSH
24816: PPUSH
24817: PPUSH
24818: PPUSH
24819: PPUSH
24820: PPUSH
24821: PPUSH
24822: PPUSH
// result = [ ] ;
24823: LD_ADDR_VAR 0 7
24827: PUSH
24828: EMPTY
24829: ST_TO_ADDR
// temp_list = [ ] ;
24830: LD_ADDR_VAR 0 9
24834: PUSH
24835: EMPTY
24836: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
24837: LD_VAR 0 4
24841: PUSH
24842: LD_INT 0
24844: PUSH
24845: LD_INT 1
24847: PUSH
24848: LD_INT 2
24850: PUSH
24851: LD_INT 3
24853: PUSH
24854: LD_INT 4
24856: PUSH
24857: LD_INT 5
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: IN
24868: NOT
24869: PUSH
24870: LD_VAR 0 1
24874: PUSH
24875: LD_INT 0
24877: PUSH
24878: LD_INT 1
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: IN
24885: PUSH
24886: LD_VAR 0 5
24890: PUSH
24891: LD_INT 1
24893: PUSH
24894: LD_INT 2
24896: PUSH
24897: LD_INT 3
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: LIST
24904: IN
24905: NOT
24906: AND
24907: OR
24908: IFFALSE 24912
// exit ;
24910: GO 43303
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
24912: LD_VAR 0 1
24916: PUSH
24917: LD_INT 6
24919: PUSH
24920: LD_INT 7
24922: PUSH
24923: LD_INT 8
24925: PUSH
24926: LD_INT 13
24928: PUSH
24929: LD_INT 12
24931: PUSH
24932: LD_INT 15
24934: PUSH
24935: LD_INT 11
24937: PUSH
24938: LD_INT 14
24940: PUSH
24941: LD_INT 10
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: IN
24955: IFFALSE 24965
// btype = b_lab ;
24957: LD_ADDR_VAR 0 1
24961: PUSH
24962: LD_INT 6
24964: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
24965: LD_VAR 0 6
24969: PUSH
24970: LD_INT 0
24972: PUSH
24973: LD_INT 1
24975: PUSH
24976: LD_INT 2
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: LIST
24983: IN
24984: NOT
24985: PUSH
24986: LD_VAR 0 1
24990: PUSH
24991: LD_INT 0
24993: PUSH
24994: LD_INT 1
24996: PUSH
24997: LD_INT 2
24999: PUSH
25000: LD_INT 3
25002: PUSH
25003: LD_INT 6
25005: PUSH
25006: LD_INT 36
25008: PUSH
25009: LD_INT 4
25011: PUSH
25012: LD_INT 5
25014: PUSH
25015: LD_INT 31
25017: PUSH
25018: LD_INT 32
25020: PUSH
25021: LD_INT 33
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: IN
25037: NOT
25038: PUSH
25039: LD_VAR 0 6
25043: PUSH
25044: LD_INT 1
25046: EQUAL
25047: AND
25048: OR
25049: PUSH
25050: LD_VAR 0 1
25054: PUSH
25055: LD_INT 2
25057: PUSH
25058: LD_INT 3
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: IN
25065: NOT
25066: PUSH
25067: LD_VAR 0 6
25071: PUSH
25072: LD_INT 2
25074: EQUAL
25075: AND
25076: OR
25077: IFFALSE 25087
// mode = 0 ;
25079: LD_ADDR_VAR 0 6
25083: PUSH
25084: LD_INT 0
25086: ST_TO_ADDR
// case mode of 0 :
25087: LD_VAR 0 6
25091: PUSH
25092: LD_INT 0
25094: DOUBLE
25095: EQUAL
25096: IFTRUE 25100
25098: GO 36553
25100: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25101: LD_ADDR_VAR 0 11
25105: PUSH
25106: LD_INT 0
25108: PUSH
25109: LD_INT 0
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 0
25118: PUSH
25119: LD_INT 1
25121: NEG
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 1
25129: PUSH
25130: LD_INT 0
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: LD_INT 1
25139: PUSH
25140: LD_INT 1
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 0
25149: PUSH
25150: LD_INT 1
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 1
25159: NEG
25160: PUSH
25161: LD_INT 0
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 1
25170: NEG
25171: PUSH
25172: LD_INT 1
25174: NEG
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 1
25182: NEG
25183: PUSH
25184: LD_INT 2
25186: NEG
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 0
25194: PUSH
25195: LD_INT 2
25197: NEG
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: LD_INT 1
25205: PUSH
25206: LD_INT 1
25208: NEG
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PUSH
25214: LD_INT 1
25216: PUSH
25217: LD_INT 2
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: LD_INT 0
25226: PUSH
25227: LD_INT 2
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 1
25236: NEG
25237: PUSH
25238: LD_INT 1
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 1
25247: PUSH
25248: LD_INT 3
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 0
25257: PUSH
25258: LD_INT 3
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 1
25267: NEG
25268: PUSH
25269: LD_INT 2
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25294: LD_ADDR_VAR 0 12
25298: PUSH
25299: LD_INT 0
25301: PUSH
25302: LD_INT 0
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 0
25311: PUSH
25312: LD_INT 1
25314: NEG
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 1
25322: PUSH
25323: LD_INT 0
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 1
25332: PUSH
25333: LD_INT 1
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 0
25342: PUSH
25343: LD_INT 1
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: LD_INT 1
25352: NEG
25353: PUSH
25354: LD_INT 0
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 1
25363: NEG
25364: PUSH
25365: LD_INT 1
25367: NEG
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: LD_INT 1
25375: PUSH
25376: LD_INT 1
25378: NEG
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 2
25386: PUSH
25387: LD_INT 0
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: LD_INT 2
25396: PUSH
25397: LD_INT 1
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: PUSH
25404: LD_INT 1
25406: NEG
25407: PUSH
25408: LD_INT 1
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: PUSH
25415: LD_INT 2
25417: NEG
25418: PUSH
25419: LD_INT 0
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: PUSH
25426: LD_INT 2
25428: NEG
25429: PUSH
25430: LD_INT 1
25432: NEG
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PUSH
25438: LD_INT 2
25440: NEG
25441: PUSH
25442: LD_INT 1
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 3
25451: NEG
25452: PUSH
25453: LD_INT 0
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 3
25462: NEG
25463: PUSH
25464: LD_INT 1
25466: NEG
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25490: LD_ADDR_VAR 0 13
25494: PUSH
25495: LD_INT 0
25497: PUSH
25498: LD_INT 0
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 0
25507: PUSH
25508: LD_INT 1
25510: NEG
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 1
25518: PUSH
25519: LD_INT 0
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: LD_INT 1
25528: PUSH
25529: LD_INT 1
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 0
25538: PUSH
25539: LD_INT 1
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: LD_INT 1
25548: NEG
25549: PUSH
25550: LD_INT 0
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 1
25559: NEG
25560: PUSH
25561: LD_INT 1
25563: NEG
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 1
25571: NEG
25572: PUSH
25573: LD_INT 2
25575: NEG
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: LD_INT 2
25583: PUSH
25584: LD_INT 1
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: LD_INT 2
25593: PUSH
25594: LD_INT 2
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 1
25603: PUSH
25604: LD_INT 2
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 2
25613: NEG
25614: PUSH
25615: LD_INT 1
25617: NEG
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 2
25625: NEG
25626: PUSH
25627: LD_INT 2
25629: NEG
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 2
25637: NEG
25638: PUSH
25639: LD_INT 3
25641: NEG
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 3
25649: NEG
25650: PUSH
25651: LD_INT 2
25653: NEG
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 3
25661: NEG
25662: PUSH
25663: LD_INT 3
25665: NEG
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25689: LD_ADDR_VAR 0 14
25693: PUSH
25694: LD_INT 0
25696: PUSH
25697: LD_INT 0
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 0
25706: PUSH
25707: LD_INT 1
25709: NEG
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: LD_INT 1
25717: PUSH
25718: LD_INT 0
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: LD_INT 1
25727: PUSH
25728: LD_INT 1
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: LD_INT 0
25737: PUSH
25738: LD_INT 1
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 1
25747: NEG
25748: PUSH
25749: LD_INT 0
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PUSH
25756: LD_INT 1
25758: NEG
25759: PUSH
25760: LD_INT 1
25762: NEG
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: PUSH
25768: LD_INT 1
25770: NEG
25771: PUSH
25772: LD_INT 2
25774: NEG
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 0
25782: PUSH
25783: LD_INT 2
25785: NEG
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: LD_INT 1
25793: PUSH
25794: LD_INT 1
25796: NEG
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 1
25804: PUSH
25805: LD_INT 2
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PUSH
25812: LD_INT 0
25814: PUSH
25815: LD_INT 2
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 1
25824: NEG
25825: PUSH
25826: LD_INT 1
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: LD_INT 1
25835: NEG
25836: PUSH
25837: LD_INT 3
25839: NEG
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 0
25847: PUSH
25848: LD_INT 3
25850: NEG
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PUSH
25856: LD_INT 1
25858: PUSH
25859: LD_INT 2
25861: NEG
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25885: LD_ADDR_VAR 0 15
25889: PUSH
25890: LD_INT 0
25892: PUSH
25893: LD_INT 0
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 0
25902: PUSH
25903: LD_INT 1
25905: NEG
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: LD_INT 1
25913: PUSH
25914: LD_INT 0
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PUSH
25921: LD_INT 1
25923: PUSH
25924: LD_INT 1
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: LD_INT 0
25933: PUSH
25934: LD_INT 1
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 1
25943: NEG
25944: PUSH
25945: LD_INT 0
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 1
25954: NEG
25955: PUSH
25956: LD_INT 1
25958: NEG
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 1
25966: PUSH
25967: LD_INT 1
25969: NEG
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 2
25977: PUSH
25978: LD_INT 0
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 2
25987: PUSH
25988: LD_INT 1
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 1
25997: NEG
25998: PUSH
25999: LD_INT 1
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 2
26008: NEG
26009: PUSH
26010: LD_INT 0
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 2
26019: NEG
26020: PUSH
26021: LD_INT 1
26023: NEG
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 2
26031: PUSH
26032: LD_INT 1
26034: NEG
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 3
26042: PUSH
26043: LD_INT 0
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: LD_INT 3
26052: PUSH
26053: LD_INT 1
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26078: LD_ADDR_VAR 0 16
26082: PUSH
26083: LD_INT 0
26085: PUSH
26086: LD_INT 0
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 0
26095: PUSH
26096: LD_INT 1
26098: NEG
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: LD_INT 1
26106: PUSH
26107: LD_INT 0
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 1
26116: PUSH
26117: LD_INT 1
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: LD_INT 0
26126: PUSH
26127: LD_INT 1
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: LD_INT 1
26136: NEG
26137: PUSH
26138: LD_INT 0
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PUSH
26145: LD_INT 1
26147: NEG
26148: PUSH
26149: LD_INT 1
26151: NEG
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 1
26159: NEG
26160: PUSH
26161: LD_INT 2
26163: NEG
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 2
26171: PUSH
26172: LD_INT 1
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 2
26181: PUSH
26182: LD_INT 2
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 1
26191: PUSH
26192: LD_INT 2
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 2
26201: NEG
26202: PUSH
26203: LD_INT 1
26205: NEG
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 2
26213: NEG
26214: PUSH
26215: LD_INT 2
26217: NEG
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 3
26225: PUSH
26226: LD_INT 2
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 3
26235: PUSH
26236: LD_INT 3
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 2
26245: PUSH
26246: LD_INT 3
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26271: LD_ADDR_VAR 0 17
26275: PUSH
26276: LD_INT 0
26278: PUSH
26279: LD_INT 0
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 0
26288: PUSH
26289: LD_INT 1
26291: NEG
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 1
26299: PUSH
26300: LD_INT 0
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 1
26309: PUSH
26310: LD_INT 1
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 0
26319: PUSH
26320: LD_INT 1
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 1
26329: NEG
26330: PUSH
26331: LD_INT 0
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 1
26340: NEG
26341: PUSH
26342: LD_INT 1
26344: NEG
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 1
26352: NEG
26353: PUSH
26354: LD_INT 2
26356: NEG
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 0
26364: PUSH
26365: LD_INT 2
26367: NEG
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 1
26375: PUSH
26376: LD_INT 1
26378: NEG
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 2
26386: PUSH
26387: LD_INT 0
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 2
26396: PUSH
26397: LD_INT 1
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 2
26406: PUSH
26407: LD_INT 2
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 1
26416: PUSH
26417: LD_INT 2
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: LD_INT 0
26426: PUSH
26427: LD_INT 2
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PUSH
26434: LD_INT 1
26436: NEG
26437: PUSH
26438: LD_INT 1
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 2
26447: NEG
26448: PUSH
26449: LD_INT 0
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 2
26458: NEG
26459: PUSH
26460: LD_INT 1
26462: NEG
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: LD_INT 2
26470: NEG
26471: PUSH
26472: LD_INT 2
26474: NEG
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26501: LD_ADDR_VAR 0 18
26505: PUSH
26506: LD_INT 0
26508: PUSH
26509: LD_INT 0
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PUSH
26516: LD_INT 0
26518: PUSH
26519: LD_INT 1
26521: NEG
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 1
26529: PUSH
26530: LD_INT 0
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 1
26539: PUSH
26540: LD_INT 1
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PUSH
26547: LD_INT 0
26549: PUSH
26550: LD_INT 1
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: PUSH
26557: LD_INT 1
26559: NEG
26560: PUSH
26561: LD_INT 0
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PUSH
26568: LD_INT 1
26570: NEG
26571: PUSH
26572: LD_INT 1
26574: NEG
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 1
26582: NEG
26583: PUSH
26584: LD_INT 2
26586: NEG
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PUSH
26592: LD_INT 0
26594: PUSH
26595: LD_INT 2
26597: NEG
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 1
26605: PUSH
26606: LD_INT 1
26608: NEG
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 2
26616: PUSH
26617: LD_INT 0
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 2
26626: PUSH
26627: LD_INT 1
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: LD_INT 2
26636: PUSH
26637: LD_INT 2
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: LD_INT 1
26646: PUSH
26647: LD_INT 2
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 0
26656: PUSH
26657: LD_INT 2
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 1
26666: NEG
26667: PUSH
26668: LD_INT 1
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 2
26677: NEG
26678: PUSH
26679: LD_INT 0
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 2
26688: NEG
26689: PUSH
26690: LD_INT 1
26692: NEG
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 2
26700: NEG
26701: PUSH
26702: LD_INT 2
26704: NEG
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26731: LD_ADDR_VAR 0 19
26735: PUSH
26736: LD_INT 0
26738: PUSH
26739: LD_INT 0
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: LD_INT 0
26748: PUSH
26749: LD_INT 1
26751: NEG
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 1
26759: PUSH
26760: LD_INT 0
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: LD_INT 1
26769: PUSH
26770: LD_INT 1
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 0
26779: PUSH
26780: LD_INT 1
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 1
26789: NEG
26790: PUSH
26791: LD_INT 0
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 1
26800: NEG
26801: PUSH
26802: LD_INT 1
26804: NEG
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 1
26812: NEG
26813: PUSH
26814: LD_INT 2
26816: NEG
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: LD_INT 0
26824: PUSH
26825: LD_INT 2
26827: NEG
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 1
26835: PUSH
26836: LD_INT 1
26838: NEG
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 2
26846: PUSH
26847: LD_INT 0
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 2
26856: PUSH
26857: LD_INT 1
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 2
26866: PUSH
26867: LD_INT 2
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 1
26876: PUSH
26877: LD_INT 2
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: LD_INT 0
26886: PUSH
26887: LD_INT 2
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 1
26896: NEG
26897: PUSH
26898: LD_INT 1
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 2
26907: NEG
26908: PUSH
26909: LD_INT 0
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 2
26918: NEG
26919: PUSH
26920: LD_INT 1
26922: NEG
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: LD_INT 2
26930: NEG
26931: PUSH
26932: LD_INT 2
26934: NEG
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26961: LD_ADDR_VAR 0 20
26965: PUSH
26966: LD_INT 0
26968: PUSH
26969: LD_INT 0
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 0
26978: PUSH
26979: LD_INT 1
26981: NEG
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 1
26989: PUSH
26990: LD_INT 0
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 1
26999: PUSH
27000: LD_INT 1
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 0
27009: PUSH
27010: LD_INT 1
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 1
27019: NEG
27020: PUSH
27021: LD_INT 0
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 1
27030: NEG
27031: PUSH
27032: LD_INT 1
27034: NEG
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 1
27042: NEG
27043: PUSH
27044: LD_INT 2
27046: NEG
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 0
27054: PUSH
27055: LD_INT 2
27057: NEG
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 1
27065: PUSH
27066: LD_INT 1
27068: NEG
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 2
27076: PUSH
27077: LD_INT 0
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 2
27086: PUSH
27087: LD_INT 1
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: LD_INT 2
27096: PUSH
27097: LD_INT 2
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: LD_INT 1
27106: PUSH
27107: LD_INT 2
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PUSH
27114: LD_INT 0
27116: PUSH
27117: LD_INT 2
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 1
27126: NEG
27127: PUSH
27128: LD_INT 1
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 2
27137: NEG
27138: PUSH
27139: LD_INT 0
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: LD_INT 2
27148: NEG
27149: PUSH
27150: LD_INT 1
27152: NEG
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 2
27160: NEG
27161: PUSH
27162: LD_INT 2
27164: NEG
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27191: LD_ADDR_VAR 0 21
27195: PUSH
27196: LD_INT 0
27198: PUSH
27199: LD_INT 0
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 0
27208: PUSH
27209: LD_INT 1
27211: NEG
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 1
27219: PUSH
27220: LD_INT 0
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 1
27229: PUSH
27230: LD_INT 1
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 0
27239: PUSH
27240: LD_INT 1
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 1
27249: NEG
27250: PUSH
27251: LD_INT 0
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: LD_INT 1
27260: NEG
27261: PUSH
27262: LD_INT 1
27264: NEG
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: LD_INT 1
27272: NEG
27273: PUSH
27274: LD_INT 2
27276: NEG
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 0
27284: PUSH
27285: LD_INT 2
27287: NEG
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 1
27295: PUSH
27296: LD_INT 1
27298: NEG
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 2
27306: PUSH
27307: LD_INT 0
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 2
27316: PUSH
27317: LD_INT 1
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 2
27326: PUSH
27327: LD_INT 2
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 1
27336: PUSH
27337: LD_INT 2
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: LD_INT 0
27346: PUSH
27347: LD_INT 2
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: LD_INT 1
27356: NEG
27357: PUSH
27358: LD_INT 1
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 2
27367: NEG
27368: PUSH
27369: LD_INT 0
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 2
27378: NEG
27379: PUSH
27380: LD_INT 1
27382: NEG
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 2
27390: NEG
27391: PUSH
27392: LD_INT 2
27394: NEG
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27421: LD_ADDR_VAR 0 22
27425: PUSH
27426: LD_INT 0
27428: PUSH
27429: LD_INT 0
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: LD_INT 0
27438: PUSH
27439: LD_INT 1
27441: NEG
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 1
27449: PUSH
27450: LD_INT 0
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: LD_INT 1
27459: PUSH
27460: LD_INT 1
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 0
27469: PUSH
27470: LD_INT 1
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 1
27479: NEG
27480: PUSH
27481: LD_INT 0
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 1
27490: NEG
27491: PUSH
27492: LD_INT 1
27494: NEG
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 1
27502: NEG
27503: PUSH
27504: LD_INT 2
27506: NEG
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: PUSH
27512: LD_INT 0
27514: PUSH
27515: LD_INT 2
27517: NEG
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 1
27525: PUSH
27526: LD_INT 1
27528: NEG
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 2
27536: PUSH
27537: LD_INT 0
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 2
27546: PUSH
27547: LD_INT 1
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: LD_INT 2
27556: PUSH
27557: LD_INT 2
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 1
27566: PUSH
27567: LD_INT 2
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 0
27576: PUSH
27577: LD_INT 2
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 1
27586: NEG
27587: PUSH
27588: LD_INT 1
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 2
27597: NEG
27598: PUSH
27599: LD_INT 0
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: LD_INT 2
27608: NEG
27609: PUSH
27610: LD_INT 1
27612: NEG
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 2
27620: NEG
27621: PUSH
27622: LD_INT 2
27624: NEG
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27651: LD_ADDR_VAR 0 23
27655: PUSH
27656: LD_INT 0
27658: PUSH
27659: LD_INT 0
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 0
27668: PUSH
27669: LD_INT 1
27671: NEG
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 1
27679: PUSH
27680: LD_INT 0
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 1
27689: PUSH
27690: LD_INT 1
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 0
27699: PUSH
27700: LD_INT 1
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 1
27709: NEG
27710: PUSH
27711: LD_INT 0
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: LD_INT 1
27720: NEG
27721: PUSH
27722: LD_INT 1
27724: NEG
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 1
27732: NEG
27733: PUSH
27734: LD_INT 2
27736: NEG
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 0
27744: PUSH
27745: LD_INT 2
27747: NEG
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 1
27755: PUSH
27756: LD_INT 1
27758: NEG
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 2
27766: PUSH
27767: LD_INT 0
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 2
27776: PUSH
27777: LD_INT 1
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 2
27786: PUSH
27787: LD_INT 2
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 1
27796: PUSH
27797: LD_INT 2
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 0
27806: PUSH
27807: LD_INT 2
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: LD_INT 1
27816: NEG
27817: PUSH
27818: LD_INT 1
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 2
27827: NEG
27828: PUSH
27829: LD_INT 0
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PUSH
27836: LD_INT 2
27838: NEG
27839: PUSH
27840: LD_INT 1
27842: NEG
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 2
27850: NEG
27851: PUSH
27852: LD_INT 2
27854: NEG
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 2
27862: NEG
27863: PUSH
27864: LD_INT 3
27866: NEG
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 1
27874: NEG
27875: PUSH
27876: LD_INT 3
27878: NEG
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: LD_INT 1
27886: PUSH
27887: LD_INT 2
27889: NEG
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 2
27897: PUSH
27898: LD_INT 1
27900: NEG
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
27931: LD_ADDR_VAR 0 24
27935: PUSH
27936: LD_INT 0
27938: PUSH
27939: LD_INT 0
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 0
27948: PUSH
27949: LD_INT 1
27951: NEG
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 1
27959: PUSH
27960: LD_INT 0
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 1
27969: PUSH
27970: LD_INT 1
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 0
27979: PUSH
27980: LD_INT 1
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 1
27989: NEG
27990: PUSH
27991: LD_INT 0
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 1
28000: NEG
28001: PUSH
28002: LD_INT 1
28004: NEG
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 1
28012: NEG
28013: PUSH
28014: LD_INT 2
28016: NEG
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: LD_INT 0
28024: PUSH
28025: LD_INT 2
28027: NEG
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 1
28035: PUSH
28036: LD_INT 1
28038: NEG
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: LD_INT 2
28046: PUSH
28047: LD_INT 0
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 2
28056: PUSH
28057: LD_INT 1
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: LD_INT 2
28066: PUSH
28067: LD_INT 2
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 1
28076: PUSH
28077: LD_INT 2
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: LD_INT 0
28086: PUSH
28087: LD_INT 2
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: LD_INT 1
28096: NEG
28097: PUSH
28098: LD_INT 1
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PUSH
28105: LD_INT 2
28107: NEG
28108: PUSH
28109: LD_INT 0
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: LD_INT 2
28118: NEG
28119: PUSH
28120: LD_INT 1
28122: NEG
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: PUSH
28128: LD_INT 2
28130: NEG
28131: PUSH
28132: LD_INT 2
28134: NEG
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: LD_INT 1
28142: PUSH
28143: LD_INT 2
28145: NEG
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 2
28153: PUSH
28154: LD_INT 1
28156: NEG
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: LD_INT 3
28164: PUSH
28165: LD_INT 1
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 3
28174: PUSH
28175: LD_INT 2
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: LIST
28206: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
28207: LD_ADDR_VAR 0 25
28211: PUSH
28212: LD_INT 0
28214: PUSH
28215: LD_INT 0
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 0
28224: PUSH
28225: LD_INT 1
28227: NEG
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: LD_INT 1
28235: PUSH
28236: LD_INT 0
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: LD_INT 1
28245: PUSH
28246: LD_INT 1
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 0
28255: PUSH
28256: LD_INT 1
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 1
28265: NEG
28266: PUSH
28267: LD_INT 0
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: LD_INT 1
28276: NEG
28277: PUSH
28278: LD_INT 1
28280: NEG
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 1
28288: NEG
28289: PUSH
28290: LD_INT 2
28292: NEG
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 0
28300: PUSH
28301: LD_INT 2
28303: NEG
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 1
28311: PUSH
28312: LD_INT 1
28314: NEG
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 2
28322: PUSH
28323: LD_INT 0
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 2
28332: PUSH
28333: LD_INT 1
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 2
28342: PUSH
28343: LD_INT 2
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: LD_INT 1
28352: PUSH
28353: LD_INT 2
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 0
28362: PUSH
28363: LD_INT 2
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: LD_INT 1
28372: NEG
28373: PUSH
28374: LD_INT 1
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: LD_INT 2
28383: NEG
28384: PUSH
28385: LD_INT 0
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PUSH
28392: LD_INT 2
28394: NEG
28395: PUSH
28396: LD_INT 1
28398: NEG
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 2
28406: NEG
28407: PUSH
28408: LD_INT 2
28410: NEG
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: LD_INT 3
28418: PUSH
28419: LD_INT 1
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 3
28428: PUSH
28429: LD_INT 2
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 2
28438: PUSH
28439: LD_INT 3
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 1
28448: PUSH
28449: LD_INT 3
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: LIST
28480: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28481: LD_ADDR_VAR 0 26
28485: PUSH
28486: LD_INT 0
28488: PUSH
28489: LD_INT 0
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 0
28498: PUSH
28499: LD_INT 1
28501: NEG
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 1
28509: PUSH
28510: LD_INT 0
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: LD_INT 1
28519: PUSH
28520: LD_INT 1
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 0
28529: PUSH
28530: LD_INT 1
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: PUSH
28537: LD_INT 1
28539: NEG
28540: PUSH
28541: LD_INT 0
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: LD_INT 1
28550: NEG
28551: PUSH
28552: LD_INT 1
28554: NEG
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 1
28562: NEG
28563: PUSH
28564: LD_INT 2
28566: NEG
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 0
28574: PUSH
28575: LD_INT 2
28577: NEG
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 1
28585: PUSH
28586: LD_INT 1
28588: NEG
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 2
28596: PUSH
28597: LD_INT 0
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: LD_INT 2
28606: PUSH
28607: LD_INT 1
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: LD_INT 2
28616: PUSH
28617: LD_INT 2
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 1
28626: PUSH
28627: LD_INT 2
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 0
28636: PUSH
28637: LD_INT 2
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 1
28646: NEG
28647: PUSH
28648: LD_INT 1
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 2
28657: NEG
28658: PUSH
28659: LD_INT 0
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: LD_INT 2
28668: NEG
28669: PUSH
28670: LD_INT 1
28672: NEG
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 2
28680: NEG
28681: PUSH
28682: LD_INT 2
28684: NEG
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 2
28692: PUSH
28693: LD_INT 3
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 1
28702: PUSH
28703: LD_INT 3
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 1
28712: NEG
28713: PUSH
28714: LD_INT 2
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 2
28723: NEG
28724: PUSH
28725: LD_INT 1
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28757: LD_ADDR_VAR 0 27
28761: PUSH
28762: LD_INT 0
28764: PUSH
28765: LD_INT 0
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 0
28774: PUSH
28775: LD_INT 1
28777: NEG
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 1
28785: PUSH
28786: LD_INT 0
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 1
28795: PUSH
28796: LD_INT 1
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 0
28805: PUSH
28806: LD_INT 1
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 1
28815: NEG
28816: PUSH
28817: LD_INT 0
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 1
28826: NEG
28827: PUSH
28828: LD_INT 1
28830: NEG
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 1
28838: NEG
28839: PUSH
28840: LD_INT 2
28842: NEG
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 0
28850: PUSH
28851: LD_INT 2
28853: NEG
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 1
28861: PUSH
28862: LD_INT 1
28864: NEG
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 2
28872: PUSH
28873: LD_INT 0
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PUSH
28880: LD_INT 2
28882: PUSH
28883: LD_INT 1
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: LD_INT 2
28892: PUSH
28893: LD_INT 2
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 1
28902: PUSH
28903: LD_INT 2
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 0
28912: PUSH
28913: LD_INT 2
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 1
28922: NEG
28923: PUSH
28924: LD_INT 1
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: LD_INT 2
28933: NEG
28934: PUSH
28935: LD_INT 0
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: LD_INT 2
28944: NEG
28945: PUSH
28946: LD_INT 1
28948: NEG
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PUSH
28954: LD_INT 2
28956: NEG
28957: PUSH
28958: LD_INT 2
28960: NEG
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: LD_INT 1
28968: NEG
28969: PUSH
28970: LD_INT 2
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 2
28979: NEG
28980: PUSH
28981: LD_INT 1
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 3
28990: NEG
28991: PUSH
28992: LD_INT 1
28994: NEG
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 3
29002: NEG
29003: PUSH
29004: LD_INT 2
29006: NEG
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29037: LD_ADDR_VAR 0 28
29041: PUSH
29042: LD_INT 0
29044: PUSH
29045: LD_INT 0
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 0
29054: PUSH
29055: LD_INT 1
29057: NEG
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: LD_INT 1
29065: PUSH
29066: LD_INT 0
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PUSH
29073: LD_INT 1
29075: PUSH
29076: LD_INT 1
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PUSH
29083: LD_INT 0
29085: PUSH
29086: LD_INT 1
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: LD_INT 1
29095: NEG
29096: PUSH
29097: LD_INT 0
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: LD_INT 1
29106: NEG
29107: PUSH
29108: LD_INT 1
29110: NEG
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: LD_INT 1
29118: NEG
29119: PUSH
29120: LD_INT 2
29122: NEG
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 0
29130: PUSH
29131: LD_INT 2
29133: NEG
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 1
29141: PUSH
29142: LD_INT 1
29144: NEG
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 2
29152: PUSH
29153: LD_INT 0
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 2
29162: PUSH
29163: LD_INT 1
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 2
29172: PUSH
29173: LD_INT 2
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 1
29182: PUSH
29183: LD_INT 2
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 0
29192: PUSH
29193: LD_INT 2
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 1
29202: NEG
29203: PUSH
29204: LD_INT 1
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 2
29213: NEG
29214: PUSH
29215: LD_INT 0
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 2
29224: NEG
29225: PUSH
29226: LD_INT 1
29228: NEG
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 2
29236: NEG
29237: PUSH
29238: LD_INT 2
29240: NEG
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 2
29248: NEG
29249: PUSH
29250: LD_INT 3
29252: NEG
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 1
29260: NEG
29261: PUSH
29262: LD_INT 3
29264: NEG
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 3
29272: NEG
29273: PUSH
29274: LD_INT 1
29276: NEG
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: LD_INT 3
29284: NEG
29285: PUSH
29286: LD_INT 2
29288: NEG
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29319: LD_ADDR_VAR 0 29
29323: PUSH
29324: LD_INT 0
29326: PUSH
29327: LD_INT 0
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: LD_INT 0
29336: PUSH
29337: LD_INT 1
29339: NEG
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: LD_INT 1
29347: PUSH
29348: LD_INT 0
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 1
29357: PUSH
29358: LD_INT 1
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 0
29367: PUSH
29368: LD_INT 1
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: LD_INT 1
29377: NEG
29378: PUSH
29379: LD_INT 0
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 1
29388: NEG
29389: PUSH
29390: LD_INT 1
29392: NEG
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: LD_INT 1
29400: NEG
29401: PUSH
29402: LD_INT 2
29404: NEG
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 0
29412: PUSH
29413: LD_INT 2
29415: NEG
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 1
29423: PUSH
29424: LD_INT 1
29426: NEG
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: PUSH
29432: LD_INT 2
29434: PUSH
29435: LD_INT 0
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PUSH
29442: LD_INT 2
29444: PUSH
29445: LD_INT 1
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: PUSH
29452: LD_INT 1
29454: PUSH
29455: LD_INT 2
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: LD_INT 0
29464: PUSH
29465: LD_INT 2
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 1
29474: NEG
29475: PUSH
29476: LD_INT 1
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 2
29485: NEG
29486: PUSH
29487: LD_INT 1
29489: NEG
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 2
29497: NEG
29498: PUSH
29499: LD_INT 2
29501: NEG
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 2
29509: NEG
29510: PUSH
29511: LD_INT 3
29513: NEG
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: LD_INT 2
29521: PUSH
29522: LD_INT 1
29524: NEG
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 3
29532: PUSH
29533: LD_INT 1
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 1
29542: PUSH
29543: LD_INT 3
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: LD_INT 1
29552: NEG
29553: PUSH
29554: LD_INT 2
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 3
29563: NEG
29564: PUSH
29565: LD_INT 2
29567: NEG
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29598: LD_ADDR_VAR 0 30
29602: PUSH
29603: LD_INT 0
29605: PUSH
29606: LD_INT 0
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 0
29615: PUSH
29616: LD_INT 1
29618: NEG
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: LD_INT 1
29626: PUSH
29627: LD_INT 0
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 1
29636: PUSH
29637: LD_INT 1
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: LD_INT 0
29646: PUSH
29647: LD_INT 1
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 1
29656: NEG
29657: PUSH
29658: LD_INT 0
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 1
29667: NEG
29668: PUSH
29669: LD_INT 1
29671: NEG
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 1
29679: NEG
29680: PUSH
29681: LD_INT 2
29683: NEG
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: LD_INT 0
29691: PUSH
29692: LD_INT 2
29694: NEG
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 1
29702: PUSH
29703: LD_INT 1
29705: NEG
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 2
29713: PUSH
29714: LD_INT 0
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 2
29723: PUSH
29724: LD_INT 1
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: LD_INT 2
29733: PUSH
29734: LD_INT 2
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 1
29743: PUSH
29744: LD_INT 2
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 1
29753: NEG
29754: PUSH
29755: LD_INT 1
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: LD_INT 2
29764: NEG
29765: PUSH
29766: LD_INT 0
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 2
29775: NEG
29776: PUSH
29777: LD_INT 1
29779: NEG
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 1
29787: NEG
29788: PUSH
29789: LD_INT 3
29791: NEG
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 1
29799: PUSH
29800: LD_INT 2
29802: NEG
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 3
29810: PUSH
29811: LD_INT 2
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 2
29820: PUSH
29821: LD_INT 3
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 2
29830: NEG
29831: PUSH
29832: LD_INT 1
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 3
29841: NEG
29842: PUSH
29843: LD_INT 1
29845: NEG
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29876: LD_ADDR_VAR 0 31
29880: PUSH
29881: LD_INT 0
29883: PUSH
29884: LD_INT 0
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: LD_INT 0
29893: PUSH
29894: LD_INT 1
29896: NEG
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 1
29904: PUSH
29905: LD_INT 0
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 1
29914: PUSH
29915: LD_INT 1
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: LD_INT 0
29924: PUSH
29925: LD_INT 1
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 1
29934: NEG
29935: PUSH
29936: LD_INT 0
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: LD_INT 1
29945: NEG
29946: PUSH
29947: LD_INT 1
29949: NEG
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 1
29957: NEG
29958: PUSH
29959: LD_INT 2
29961: NEG
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: LD_INT 1
29969: PUSH
29970: LD_INT 1
29972: NEG
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: LD_INT 2
29980: PUSH
29981: LD_INT 0
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: LD_INT 2
29990: PUSH
29991: LD_INT 1
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 2
30000: PUSH
30001: LD_INT 2
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 1
30010: PUSH
30011: LD_INT 2
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 0
30020: PUSH
30021: LD_INT 2
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 1
30030: NEG
30031: PUSH
30032: LD_INT 1
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 2
30041: NEG
30042: PUSH
30043: LD_INT 1
30045: NEG
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: LD_INT 2
30053: NEG
30054: PUSH
30055: LD_INT 2
30057: NEG
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 2
30065: NEG
30066: PUSH
30067: LD_INT 3
30069: NEG
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 2
30077: PUSH
30078: LD_INT 1
30080: NEG
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 3
30088: PUSH
30089: LD_INT 1
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 1
30098: PUSH
30099: LD_INT 3
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 1
30108: NEG
30109: PUSH
30110: LD_INT 2
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 3
30119: NEG
30120: PUSH
30121: LD_INT 2
30123: NEG
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30154: LD_ADDR_VAR 0 32
30158: PUSH
30159: LD_INT 0
30161: PUSH
30162: LD_INT 0
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 0
30171: PUSH
30172: LD_INT 1
30174: NEG
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 1
30182: PUSH
30183: LD_INT 0
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 1
30192: PUSH
30193: LD_INT 1
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 0
30202: PUSH
30203: LD_INT 1
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 1
30212: NEG
30213: PUSH
30214: LD_INT 0
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 1
30223: NEG
30224: PUSH
30225: LD_INT 1
30227: NEG
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 1
30235: NEG
30236: PUSH
30237: LD_INT 2
30239: NEG
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 0
30247: PUSH
30248: LD_INT 2
30250: NEG
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 1
30258: PUSH
30259: LD_INT 1
30261: NEG
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: LD_INT 2
30269: PUSH
30270: LD_INT 1
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 2
30279: PUSH
30280: LD_INT 2
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 1
30289: PUSH
30290: LD_INT 2
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 0
30299: PUSH
30300: LD_INT 2
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: LD_INT 1
30309: NEG
30310: PUSH
30311: LD_INT 1
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: LD_INT 2
30320: NEG
30321: PUSH
30322: LD_INT 0
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 2
30331: NEG
30332: PUSH
30333: LD_INT 1
30335: NEG
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: LD_INT 1
30343: NEG
30344: PUSH
30345: LD_INT 3
30347: NEG
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 1
30355: PUSH
30356: LD_INT 2
30358: NEG
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 3
30366: PUSH
30367: LD_INT 2
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 2
30376: PUSH
30377: LD_INT 3
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 2
30386: NEG
30387: PUSH
30388: LD_INT 1
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 3
30397: NEG
30398: PUSH
30399: LD_INT 1
30401: NEG
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30432: LD_ADDR_VAR 0 33
30436: PUSH
30437: LD_INT 0
30439: PUSH
30440: LD_INT 0
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 0
30449: PUSH
30450: LD_INT 1
30452: NEG
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 1
30460: PUSH
30461: LD_INT 0
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 1
30470: PUSH
30471: LD_INT 1
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 0
30480: PUSH
30481: LD_INT 1
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 1
30490: NEG
30491: PUSH
30492: LD_INT 0
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 1
30501: NEG
30502: PUSH
30503: LD_INT 1
30505: NEG
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 1
30513: NEG
30514: PUSH
30515: LD_INT 2
30517: NEG
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 1
30525: PUSH
30526: LD_INT 1
30528: NEG
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 2
30536: PUSH
30537: LD_INT 0
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 2
30546: PUSH
30547: LD_INT 1
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 1
30556: PUSH
30557: LD_INT 2
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: PUSH
30564: LD_INT 0
30566: PUSH
30567: LD_INT 2
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 1
30576: NEG
30577: PUSH
30578: LD_INT 1
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 2
30587: NEG
30588: PUSH
30589: LD_INT 0
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 2
30598: NEG
30599: PUSH
30600: LD_INT 1
30602: NEG
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 2
30610: NEG
30611: PUSH
30612: LD_INT 2
30614: NEG
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 2
30622: NEG
30623: PUSH
30624: LD_INT 3
30626: NEG
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 2
30634: PUSH
30635: LD_INT 1
30637: NEG
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 3
30645: PUSH
30646: LD_INT 1
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 1
30655: PUSH
30656: LD_INT 3
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 1
30665: NEG
30666: PUSH
30667: LD_INT 2
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 3
30676: NEG
30677: PUSH
30678: LD_INT 2
30680: NEG
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30711: LD_ADDR_VAR 0 34
30715: PUSH
30716: LD_INT 0
30718: PUSH
30719: LD_INT 0
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 0
30728: PUSH
30729: LD_INT 1
30731: NEG
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 1
30739: PUSH
30740: LD_INT 0
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 1
30749: PUSH
30750: LD_INT 1
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 0
30759: PUSH
30760: LD_INT 1
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 1
30769: NEG
30770: PUSH
30771: LD_INT 0
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 1
30780: NEG
30781: PUSH
30782: LD_INT 1
30784: NEG
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 1
30792: NEG
30793: PUSH
30794: LD_INT 2
30796: NEG
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: LD_INT 0
30804: PUSH
30805: LD_INT 2
30807: NEG
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 1
30815: PUSH
30816: LD_INT 1
30818: NEG
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 2
30826: PUSH
30827: LD_INT 1
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 2
30836: PUSH
30837: LD_INT 2
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 1
30846: PUSH
30847: LD_INT 2
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 1
30856: NEG
30857: PUSH
30858: LD_INT 1
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 2
30867: NEG
30868: PUSH
30869: LD_INT 0
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 2
30878: NEG
30879: PUSH
30880: LD_INT 1
30882: NEG
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 2
30890: NEG
30891: PUSH
30892: LD_INT 2
30894: NEG
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 1
30902: NEG
30903: PUSH
30904: LD_INT 3
30906: NEG
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 1
30914: PUSH
30915: LD_INT 2
30917: NEG
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: LD_INT 3
30925: PUSH
30926: LD_INT 2
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 2
30935: PUSH
30936: LD_INT 3
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 2
30945: NEG
30946: PUSH
30947: LD_INT 1
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 3
30956: NEG
30957: PUSH
30958: LD_INT 1
30960: NEG
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30991: LD_ADDR_VAR 0 35
30995: PUSH
30996: LD_INT 0
30998: PUSH
30999: LD_INT 0
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 0
31008: PUSH
31009: LD_INT 1
31011: NEG
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 1
31019: PUSH
31020: LD_INT 0
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 1
31029: PUSH
31030: LD_INT 1
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 0
31039: PUSH
31040: LD_INT 1
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: LD_INT 1
31049: NEG
31050: PUSH
31051: LD_INT 0
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 1
31060: NEG
31061: PUSH
31062: LD_INT 1
31064: NEG
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 2
31072: PUSH
31073: LD_INT 1
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 2
31082: NEG
31083: PUSH
31084: LD_INT 1
31086: NEG
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31103: LD_ADDR_VAR 0 36
31107: PUSH
31108: LD_INT 0
31110: PUSH
31111: LD_INT 0
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 0
31120: PUSH
31121: LD_INT 1
31123: NEG
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 1
31131: PUSH
31132: LD_INT 0
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: LD_INT 1
31141: PUSH
31142: LD_INT 1
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 0
31151: PUSH
31152: LD_INT 1
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 1
31161: NEG
31162: PUSH
31163: LD_INT 0
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: LD_INT 1
31172: NEG
31173: PUSH
31174: LD_INT 1
31176: NEG
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: PUSH
31182: LD_INT 1
31184: NEG
31185: PUSH
31186: LD_INT 2
31188: NEG
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 1
31196: PUSH
31197: LD_INT 2
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31215: LD_ADDR_VAR 0 37
31219: PUSH
31220: LD_INT 0
31222: PUSH
31223: LD_INT 0
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 0
31232: PUSH
31233: LD_INT 1
31235: NEG
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 1
31243: PUSH
31244: LD_INT 0
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 1
31253: PUSH
31254: LD_INT 1
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 0
31263: PUSH
31264: LD_INT 1
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 1
31273: NEG
31274: PUSH
31275: LD_INT 0
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 1
31284: NEG
31285: PUSH
31286: LD_INT 1
31288: NEG
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 1
31296: PUSH
31297: LD_INT 1
31299: NEG
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 1
31307: NEG
31308: PUSH
31309: LD_INT 1
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31327: LD_ADDR_VAR 0 38
31331: PUSH
31332: LD_INT 0
31334: PUSH
31335: LD_INT 0
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 0
31344: PUSH
31345: LD_INT 1
31347: NEG
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 1
31355: PUSH
31356: LD_INT 0
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 1
31365: PUSH
31366: LD_INT 1
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 0
31375: PUSH
31376: LD_INT 1
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 1
31385: NEG
31386: PUSH
31387: LD_INT 0
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 1
31396: NEG
31397: PUSH
31398: LD_INT 1
31400: NEG
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 2
31408: PUSH
31409: LD_INT 1
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: LD_INT 2
31418: NEG
31419: PUSH
31420: LD_INT 1
31422: NEG
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31439: LD_ADDR_VAR 0 39
31443: PUSH
31444: LD_INT 0
31446: PUSH
31447: LD_INT 0
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: LD_INT 0
31456: PUSH
31457: LD_INT 1
31459: NEG
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: LD_INT 1
31467: PUSH
31468: LD_INT 0
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 1
31477: PUSH
31478: LD_INT 1
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 0
31487: PUSH
31488: LD_INT 1
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 1
31497: NEG
31498: PUSH
31499: LD_INT 0
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 1
31508: NEG
31509: PUSH
31510: LD_INT 1
31512: NEG
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 1
31520: NEG
31521: PUSH
31522: LD_INT 2
31524: NEG
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 1
31532: PUSH
31533: LD_INT 2
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31551: LD_ADDR_VAR 0 40
31555: PUSH
31556: LD_INT 0
31558: PUSH
31559: LD_INT 0
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 0
31568: PUSH
31569: LD_INT 1
31571: NEG
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 1
31579: PUSH
31580: LD_INT 0
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 1
31589: PUSH
31590: LD_INT 1
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 0
31599: PUSH
31600: LD_INT 1
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 1
31609: NEG
31610: PUSH
31611: LD_INT 0
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 1
31620: NEG
31621: PUSH
31622: LD_INT 1
31624: NEG
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: LD_INT 1
31632: PUSH
31633: LD_INT 1
31635: NEG
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 1
31643: NEG
31644: PUSH
31645: LD_INT 1
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31663: LD_ADDR_VAR 0 41
31667: PUSH
31668: LD_INT 0
31670: PUSH
31671: LD_INT 0
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 0
31680: PUSH
31681: LD_INT 1
31683: NEG
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 1
31691: PUSH
31692: LD_INT 0
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: LD_INT 1
31701: PUSH
31702: LD_INT 1
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 0
31711: PUSH
31712: LD_INT 1
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 1
31721: NEG
31722: PUSH
31723: LD_INT 0
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 1
31732: NEG
31733: PUSH
31734: LD_INT 1
31736: NEG
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 1
31744: NEG
31745: PUSH
31746: LD_INT 2
31748: NEG
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 1
31756: PUSH
31757: LD_INT 1
31759: NEG
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 2
31767: PUSH
31768: LD_INT 0
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 2
31777: PUSH
31778: LD_INT 1
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 2
31787: PUSH
31788: LD_INT 2
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 1
31797: PUSH
31798: LD_INT 2
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 1
31807: NEG
31808: PUSH
31809: LD_INT 1
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 2
31818: NEG
31819: PUSH
31820: LD_INT 0
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 2
31829: NEG
31830: PUSH
31831: LD_INT 1
31833: NEG
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 2
31841: NEG
31842: PUSH
31843: LD_INT 2
31845: NEG
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 2
31853: NEG
31854: PUSH
31855: LD_INT 3
31857: NEG
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 2
31865: PUSH
31866: LD_INT 1
31868: NEG
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 3
31876: PUSH
31877: LD_INT 0
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 3
31886: PUSH
31887: LD_INT 1
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 3
31896: PUSH
31897: LD_INT 2
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 3
31906: PUSH
31907: LD_INT 3
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 2
31916: PUSH
31917: LD_INT 3
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 2
31926: NEG
31927: PUSH
31928: LD_INT 1
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 3
31937: NEG
31938: PUSH
31939: LD_INT 0
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 3
31948: NEG
31949: PUSH
31950: LD_INT 1
31952: NEG
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 3
31960: NEG
31961: PUSH
31962: LD_INT 2
31964: NEG
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 3
31972: NEG
31973: PUSH
31974: LD_INT 3
31976: NEG
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32013: LD_ADDR_VAR 0 42
32017: PUSH
32018: LD_INT 0
32020: PUSH
32021: LD_INT 0
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 0
32030: PUSH
32031: LD_INT 1
32033: NEG
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 1
32041: PUSH
32042: LD_INT 0
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 1
32051: PUSH
32052: LD_INT 1
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PUSH
32059: LD_INT 0
32061: PUSH
32062: LD_INT 1
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 1
32071: NEG
32072: PUSH
32073: LD_INT 0
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 1
32082: NEG
32083: PUSH
32084: LD_INT 1
32086: NEG
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 1
32094: NEG
32095: PUSH
32096: LD_INT 2
32098: NEG
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 0
32106: PUSH
32107: LD_INT 2
32109: NEG
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 1
32117: PUSH
32118: LD_INT 1
32120: NEG
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 2
32128: PUSH
32129: LD_INT 1
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 2
32138: PUSH
32139: LD_INT 2
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 1
32148: PUSH
32149: LD_INT 2
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 0
32158: PUSH
32159: LD_INT 2
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 1
32168: NEG
32169: PUSH
32170: LD_INT 1
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 2
32179: NEG
32180: PUSH
32181: LD_INT 1
32183: NEG
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 2
32191: NEG
32192: PUSH
32193: LD_INT 2
32195: NEG
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 2
32203: NEG
32204: PUSH
32205: LD_INT 3
32207: NEG
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 1
32215: NEG
32216: PUSH
32217: LD_INT 3
32219: NEG
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 0
32227: PUSH
32228: LD_INT 3
32230: NEG
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 1
32238: PUSH
32239: LD_INT 2
32241: NEG
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 3
32249: PUSH
32250: LD_INT 2
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 3
32259: PUSH
32260: LD_INT 3
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 2
32269: PUSH
32270: LD_INT 3
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 1
32279: PUSH
32280: LD_INT 3
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 0
32289: PUSH
32290: LD_INT 3
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 1
32299: NEG
32300: PUSH
32301: LD_INT 2
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 3
32310: NEG
32311: PUSH
32312: LD_INT 2
32314: NEG
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 3
32322: NEG
32323: PUSH
32324: LD_INT 3
32326: NEG
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32363: LD_ADDR_VAR 0 43
32367: PUSH
32368: LD_INT 0
32370: PUSH
32371: LD_INT 0
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 0
32380: PUSH
32381: LD_INT 1
32383: NEG
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 1
32391: PUSH
32392: LD_INT 0
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 1
32401: PUSH
32402: LD_INT 1
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 0
32411: PUSH
32412: LD_INT 1
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 1
32421: NEG
32422: PUSH
32423: LD_INT 0
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 1
32432: NEG
32433: PUSH
32434: LD_INT 1
32436: NEG
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 1
32444: NEG
32445: PUSH
32446: LD_INT 2
32448: NEG
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 0
32456: PUSH
32457: LD_INT 2
32459: NEG
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 1
32467: PUSH
32468: LD_INT 1
32470: NEG
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 2
32478: PUSH
32479: LD_INT 0
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 2
32488: PUSH
32489: LD_INT 1
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 1
32498: PUSH
32499: LD_INT 2
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 0
32508: PUSH
32509: LD_INT 2
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 1
32518: NEG
32519: PUSH
32520: LD_INT 1
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 2
32529: NEG
32530: PUSH
32531: LD_INT 0
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 2
32540: NEG
32541: PUSH
32542: LD_INT 1
32544: NEG
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 1
32552: NEG
32553: PUSH
32554: LD_INT 3
32556: NEG
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PUSH
32562: LD_INT 0
32564: PUSH
32565: LD_INT 3
32567: NEG
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: LD_INT 1
32575: PUSH
32576: LD_INT 2
32578: NEG
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 2
32586: PUSH
32587: LD_INT 1
32589: NEG
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 3
32597: PUSH
32598: LD_INT 0
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 3
32607: PUSH
32608: LD_INT 1
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 1
32617: PUSH
32618: LD_INT 3
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 0
32627: PUSH
32628: LD_INT 3
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 1
32637: NEG
32638: PUSH
32639: LD_INT 2
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 2
32648: NEG
32649: PUSH
32650: LD_INT 1
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 3
32659: NEG
32660: PUSH
32661: LD_INT 0
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 3
32670: NEG
32671: PUSH
32672: LD_INT 1
32674: NEG
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32711: LD_ADDR_VAR 0 44
32715: PUSH
32716: LD_INT 0
32718: PUSH
32719: LD_INT 0
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 0
32728: PUSH
32729: LD_INT 1
32731: NEG
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 1
32739: PUSH
32740: LD_INT 0
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 1
32749: PUSH
32750: LD_INT 1
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 0
32759: PUSH
32760: LD_INT 1
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 1
32769: NEG
32770: PUSH
32771: LD_INT 0
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 1
32780: NEG
32781: PUSH
32782: LD_INT 1
32784: NEG
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 1
32792: NEG
32793: PUSH
32794: LD_INT 2
32796: NEG
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 1
32804: PUSH
32805: LD_INT 1
32807: NEG
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 2
32815: PUSH
32816: LD_INT 0
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 2
32825: PUSH
32826: LD_INT 1
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 2
32835: PUSH
32836: LD_INT 2
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 1
32845: PUSH
32846: LD_INT 2
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 1
32855: NEG
32856: PUSH
32857: LD_INT 1
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 2
32866: NEG
32867: PUSH
32868: LD_INT 0
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 2
32877: NEG
32878: PUSH
32879: LD_INT 1
32881: NEG
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 2
32889: NEG
32890: PUSH
32891: LD_INT 2
32893: NEG
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 2
32901: NEG
32902: PUSH
32903: LD_INT 3
32905: NEG
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 2
32913: PUSH
32914: LD_INT 1
32916: NEG
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 3
32924: PUSH
32925: LD_INT 0
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 3
32934: PUSH
32935: LD_INT 1
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 3
32944: PUSH
32945: LD_INT 2
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 3
32954: PUSH
32955: LD_INT 3
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 2
32964: PUSH
32965: LD_INT 3
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 2
32974: NEG
32975: PUSH
32976: LD_INT 1
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 3
32985: NEG
32986: PUSH
32987: LD_INT 0
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 3
32996: NEG
32997: PUSH
32998: LD_INT 1
33000: NEG
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 3
33008: NEG
33009: PUSH
33010: LD_INT 2
33012: NEG
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 3
33020: NEG
33021: PUSH
33022: LD_INT 3
33024: NEG
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33061: LD_ADDR_VAR 0 45
33065: PUSH
33066: LD_INT 0
33068: PUSH
33069: LD_INT 0
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 0
33078: PUSH
33079: LD_INT 1
33081: NEG
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 1
33089: PUSH
33090: LD_INT 0
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 1
33099: PUSH
33100: LD_INT 1
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 0
33109: PUSH
33110: LD_INT 1
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 1
33119: NEG
33120: PUSH
33121: LD_INT 0
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 1
33130: NEG
33131: PUSH
33132: LD_INT 1
33134: NEG
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 1
33142: NEG
33143: PUSH
33144: LD_INT 2
33146: NEG
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 0
33154: PUSH
33155: LD_INT 2
33157: NEG
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 1
33165: PUSH
33166: LD_INT 1
33168: NEG
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 2
33176: PUSH
33177: LD_INT 1
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 2
33186: PUSH
33187: LD_INT 2
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 1
33196: PUSH
33197: LD_INT 2
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 0
33206: PUSH
33207: LD_INT 2
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: LD_INT 1
33216: NEG
33217: PUSH
33218: LD_INT 1
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 2
33227: NEG
33228: PUSH
33229: LD_INT 1
33231: NEG
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 2
33239: NEG
33240: PUSH
33241: LD_INT 2
33243: NEG
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 2
33251: NEG
33252: PUSH
33253: LD_INT 3
33255: NEG
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 1
33263: NEG
33264: PUSH
33265: LD_INT 3
33267: NEG
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 0
33275: PUSH
33276: LD_INT 3
33278: NEG
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PUSH
33284: LD_INT 1
33286: PUSH
33287: LD_INT 2
33289: NEG
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 3
33297: PUSH
33298: LD_INT 2
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 3
33307: PUSH
33308: LD_INT 3
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 2
33317: PUSH
33318: LD_INT 3
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 1
33327: PUSH
33328: LD_INT 3
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 0
33337: PUSH
33338: LD_INT 3
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 1
33347: NEG
33348: PUSH
33349: LD_INT 2
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 3
33358: NEG
33359: PUSH
33360: LD_INT 2
33362: NEG
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 3
33370: NEG
33371: PUSH
33372: LD_INT 3
33374: NEG
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33411: LD_ADDR_VAR 0 46
33415: PUSH
33416: LD_INT 0
33418: PUSH
33419: LD_INT 0
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: LD_INT 0
33428: PUSH
33429: LD_INT 1
33431: NEG
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 1
33439: PUSH
33440: LD_INT 0
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 1
33449: PUSH
33450: LD_INT 1
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 0
33459: PUSH
33460: LD_INT 1
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 1
33469: NEG
33470: PUSH
33471: LD_INT 0
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 1
33480: NEG
33481: PUSH
33482: LD_INT 1
33484: NEG
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 1
33492: NEG
33493: PUSH
33494: LD_INT 2
33496: NEG
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 0
33504: PUSH
33505: LD_INT 2
33507: NEG
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 1
33515: PUSH
33516: LD_INT 1
33518: NEG
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 2
33526: PUSH
33527: LD_INT 0
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 2
33536: PUSH
33537: LD_INT 1
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 1
33546: PUSH
33547: LD_INT 2
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 0
33556: PUSH
33557: LD_INT 2
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 1
33566: NEG
33567: PUSH
33568: LD_INT 1
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 2
33577: NEG
33578: PUSH
33579: LD_INT 0
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 2
33588: NEG
33589: PUSH
33590: LD_INT 1
33592: NEG
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 1
33600: NEG
33601: PUSH
33602: LD_INT 3
33604: NEG
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 0
33612: PUSH
33613: LD_INT 3
33615: NEG
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 1
33623: PUSH
33624: LD_INT 2
33626: NEG
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 2
33634: PUSH
33635: LD_INT 1
33637: NEG
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 3
33645: PUSH
33646: LD_INT 0
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 3
33655: PUSH
33656: LD_INT 1
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 1
33665: PUSH
33666: LD_INT 3
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 0
33675: PUSH
33676: LD_INT 3
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 1
33685: NEG
33686: PUSH
33687: LD_INT 2
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 2
33696: NEG
33697: PUSH
33698: LD_INT 1
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 3
33707: NEG
33708: PUSH
33709: LD_INT 0
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 3
33718: NEG
33719: PUSH
33720: LD_INT 1
33722: NEG
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33759: LD_ADDR_VAR 0 47
33763: PUSH
33764: LD_INT 0
33766: PUSH
33767: LD_INT 0
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 0
33776: PUSH
33777: LD_INT 1
33779: NEG
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 1
33787: PUSH
33788: LD_INT 0
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 1
33797: PUSH
33798: LD_INT 1
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 0
33807: PUSH
33808: LD_INT 1
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 1
33817: NEG
33818: PUSH
33819: LD_INT 0
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 1
33828: NEG
33829: PUSH
33830: LD_INT 1
33832: NEG
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 1
33840: NEG
33841: PUSH
33842: LD_INT 2
33844: NEG
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 0
33852: PUSH
33853: LD_INT 2
33855: NEG
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 1
33863: PUSH
33864: LD_INT 1
33866: NEG
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 2
33874: NEG
33875: PUSH
33876: LD_INT 1
33878: NEG
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 2
33886: NEG
33887: PUSH
33888: LD_INT 2
33890: NEG
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33910: LD_ADDR_VAR 0 48
33914: PUSH
33915: LD_INT 0
33917: PUSH
33918: LD_INT 0
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 0
33927: PUSH
33928: LD_INT 1
33930: NEG
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 1
33938: PUSH
33939: LD_INT 0
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: LD_INT 1
33948: PUSH
33949: LD_INT 1
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 0
33958: PUSH
33959: LD_INT 1
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 1
33968: NEG
33969: PUSH
33970: LD_INT 0
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 1
33979: NEG
33980: PUSH
33981: LD_INT 1
33983: NEG
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 1
33991: NEG
33992: PUSH
33993: LD_INT 2
33995: NEG
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 0
34003: PUSH
34004: LD_INT 2
34006: NEG
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 1
34014: PUSH
34015: LD_INT 1
34017: NEG
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 2
34025: PUSH
34026: LD_INT 0
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 2
34035: PUSH
34036: LD_INT 1
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34057: LD_ADDR_VAR 0 49
34061: PUSH
34062: LD_INT 0
34064: PUSH
34065: LD_INT 0
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 0
34074: PUSH
34075: LD_INT 1
34077: NEG
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 1
34085: PUSH
34086: LD_INT 0
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 1
34095: PUSH
34096: LD_INT 1
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 0
34105: PUSH
34106: LD_INT 1
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 1
34115: NEG
34116: PUSH
34117: LD_INT 0
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 1
34126: NEG
34127: PUSH
34128: LD_INT 1
34130: NEG
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: PUSH
34136: LD_INT 1
34138: PUSH
34139: LD_INT 1
34141: NEG
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 2
34149: PUSH
34150: LD_INT 0
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 2
34159: PUSH
34160: LD_INT 1
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 2
34169: PUSH
34170: LD_INT 2
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 1
34179: PUSH
34180: LD_INT 2
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34201: LD_ADDR_VAR 0 50
34205: PUSH
34206: LD_INT 0
34208: PUSH
34209: LD_INT 0
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 0
34218: PUSH
34219: LD_INT 1
34221: NEG
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: LD_INT 1
34229: PUSH
34230: LD_INT 0
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 1
34239: PUSH
34240: LD_INT 1
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 0
34249: PUSH
34250: LD_INT 1
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 1
34259: NEG
34260: PUSH
34261: LD_INT 0
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 1
34270: NEG
34271: PUSH
34272: LD_INT 1
34274: NEG
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 2
34282: PUSH
34283: LD_INT 1
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: LD_INT 2
34292: PUSH
34293: LD_INT 2
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 1
34302: PUSH
34303: LD_INT 2
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 0
34312: PUSH
34313: LD_INT 2
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 1
34322: NEG
34323: PUSH
34324: LD_INT 1
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34345: LD_ADDR_VAR 0 51
34349: PUSH
34350: LD_INT 0
34352: PUSH
34353: LD_INT 0
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 0
34362: PUSH
34363: LD_INT 1
34365: NEG
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 1
34373: PUSH
34374: LD_INT 0
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 1
34383: PUSH
34384: LD_INT 1
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 0
34393: PUSH
34394: LD_INT 1
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 1
34403: NEG
34404: PUSH
34405: LD_INT 0
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 1
34414: NEG
34415: PUSH
34416: LD_INT 1
34418: NEG
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 1
34426: PUSH
34427: LD_INT 2
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 0
34436: PUSH
34437: LD_INT 2
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 1
34446: NEG
34447: PUSH
34448: LD_INT 1
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 2
34457: NEG
34458: PUSH
34459: LD_INT 0
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 2
34468: NEG
34469: PUSH
34470: LD_INT 1
34472: NEG
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34492: LD_ADDR_VAR 0 52
34496: PUSH
34497: LD_INT 0
34499: PUSH
34500: LD_INT 0
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 0
34509: PUSH
34510: LD_INT 1
34512: NEG
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 1
34520: PUSH
34521: LD_INT 0
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 1
34530: PUSH
34531: LD_INT 1
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 0
34540: PUSH
34541: LD_INT 1
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 1
34550: NEG
34551: PUSH
34552: LD_INT 0
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 1
34561: NEG
34562: PUSH
34563: LD_INT 1
34565: NEG
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 1
34573: NEG
34574: PUSH
34575: LD_INT 2
34577: NEG
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 1
34585: NEG
34586: PUSH
34587: LD_INT 1
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 2
34596: NEG
34597: PUSH
34598: LD_INT 0
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 2
34607: NEG
34608: PUSH
34609: LD_INT 1
34611: NEG
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 2
34619: NEG
34620: PUSH
34621: LD_INT 2
34623: NEG
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34643: LD_ADDR_VAR 0 53
34647: PUSH
34648: LD_INT 0
34650: PUSH
34651: LD_INT 0
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 0
34660: PUSH
34661: LD_INT 1
34663: NEG
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 1
34671: PUSH
34672: LD_INT 0
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 1
34681: PUSH
34682: LD_INT 1
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 0
34691: PUSH
34692: LD_INT 1
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 1
34701: NEG
34702: PUSH
34703: LD_INT 0
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 1
34712: NEG
34713: PUSH
34714: LD_INT 1
34716: NEG
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 1
34724: NEG
34725: PUSH
34726: LD_INT 2
34728: NEG
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 0
34736: PUSH
34737: LD_INT 2
34739: NEG
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 1
34747: PUSH
34748: LD_INT 1
34750: NEG
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 2
34758: PUSH
34759: LD_INT 0
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 2
34768: PUSH
34769: LD_INT 1
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 2
34778: PUSH
34779: LD_INT 2
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 1
34788: PUSH
34789: LD_INT 2
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 0
34798: PUSH
34799: LD_INT 2
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 1
34808: NEG
34809: PUSH
34810: LD_INT 1
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 2
34819: NEG
34820: PUSH
34821: LD_INT 0
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 2
34830: NEG
34831: PUSH
34832: LD_INT 1
34834: NEG
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 2
34842: NEG
34843: PUSH
34844: LD_INT 2
34846: NEG
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34873: LD_ADDR_VAR 0 54
34877: PUSH
34878: LD_INT 0
34880: PUSH
34881: LD_INT 0
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 0
34890: PUSH
34891: LD_INT 1
34893: NEG
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 1
34901: PUSH
34902: LD_INT 0
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 1
34911: PUSH
34912: LD_INT 1
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 0
34921: PUSH
34922: LD_INT 1
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 1
34931: NEG
34932: PUSH
34933: LD_INT 0
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 1
34942: NEG
34943: PUSH
34944: LD_INT 1
34946: NEG
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 1
34954: NEG
34955: PUSH
34956: LD_INT 2
34958: NEG
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 0
34966: PUSH
34967: LD_INT 2
34969: NEG
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 1
34977: PUSH
34978: LD_INT 1
34980: NEG
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 2
34988: PUSH
34989: LD_INT 0
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: LD_INT 2
34998: PUSH
34999: LD_INT 1
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 2
35008: PUSH
35009: LD_INT 2
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 1
35018: PUSH
35019: LD_INT 2
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 0
35028: PUSH
35029: LD_INT 2
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 1
35038: NEG
35039: PUSH
35040: LD_INT 1
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: LD_INT 2
35049: NEG
35050: PUSH
35051: LD_INT 0
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 2
35060: NEG
35061: PUSH
35062: LD_INT 1
35064: NEG
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 2
35072: NEG
35073: PUSH
35074: LD_INT 2
35076: NEG
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35103: LD_ADDR_VAR 0 55
35107: PUSH
35108: LD_INT 0
35110: PUSH
35111: LD_INT 0
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 0
35120: PUSH
35121: LD_INT 1
35123: NEG
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 1
35131: PUSH
35132: LD_INT 0
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 1
35141: PUSH
35142: LD_INT 1
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 0
35151: PUSH
35152: LD_INT 1
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 1
35161: NEG
35162: PUSH
35163: LD_INT 0
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 1
35172: NEG
35173: PUSH
35174: LD_INT 1
35176: NEG
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 1
35184: NEG
35185: PUSH
35186: LD_INT 2
35188: NEG
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 0
35196: PUSH
35197: LD_INT 2
35199: NEG
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 1
35207: PUSH
35208: LD_INT 1
35210: NEG
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 2
35218: PUSH
35219: LD_INT 0
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 2
35228: PUSH
35229: LD_INT 1
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 2
35238: PUSH
35239: LD_INT 2
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 1
35248: PUSH
35249: LD_INT 2
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 0
35258: PUSH
35259: LD_INT 2
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 1
35268: NEG
35269: PUSH
35270: LD_INT 1
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: LD_INT 2
35279: NEG
35280: PUSH
35281: LD_INT 0
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 2
35290: NEG
35291: PUSH
35292: LD_INT 1
35294: NEG
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 2
35302: NEG
35303: PUSH
35304: LD_INT 2
35306: NEG
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35333: LD_ADDR_VAR 0 56
35337: PUSH
35338: LD_INT 0
35340: PUSH
35341: LD_INT 0
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 0
35350: PUSH
35351: LD_INT 1
35353: NEG
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 1
35361: PUSH
35362: LD_INT 0
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 1
35371: PUSH
35372: LD_INT 1
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 0
35381: PUSH
35382: LD_INT 1
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 1
35391: NEG
35392: PUSH
35393: LD_INT 0
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 1
35402: NEG
35403: PUSH
35404: LD_INT 1
35406: NEG
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 1
35414: NEG
35415: PUSH
35416: LD_INT 2
35418: NEG
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 0
35426: PUSH
35427: LD_INT 2
35429: NEG
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 1
35437: PUSH
35438: LD_INT 1
35440: NEG
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 2
35448: PUSH
35449: LD_INT 0
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 2
35458: PUSH
35459: LD_INT 1
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 2
35468: PUSH
35469: LD_INT 2
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 1
35478: PUSH
35479: LD_INT 2
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 0
35488: PUSH
35489: LD_INT 2
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 1
35498: NEG
35499: PUSH
35500: LD_INT 1
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 2
35509: NEG
35510: PUSH
35511: LD_INT 0
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 2
35520: NEG
35521: PUSH
35522: LD_INT 1
35524: NEG
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 2
35532: NEG
35533: PUSH
35534: LD_INT 2
35536: NEG
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35563: LD_ADDR_VAR 0 57
35567: PUSH
35568: LD_INT 0
35570: PUSH
35571: LD_INT 0
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 0
35580: PUSH
35581: LD_INT 1
35583: NEG
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 1
35591: PUSH
35592: LD_INT 0
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 1
35601: PUSH
35602: LD_INT 1
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: LD_INT 0
35611: PUSH
35612: LD_INT 1
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 1
35621: NEG
35622: PUSH
35623: LD_INT 0
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 1
35632: NEG
35633: PUSH
35634: LD_INT 1
35636: NEG
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 1
35644: NEG
35645: PUSH
35646: LD_INT 2
35648: NEG
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: PUSH
35654: LD_INT 0
35656: PUSH
35657: LD_INT 2
35659: NEG
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: PUSH
35665: LD_INT 1
35667: PUSH
35668: LD_INT 1
35670: NEG
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 2
35678: PUSH
35679: LD_INT 0
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 2
35688: PUSH
35689: LD_INT 1
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 2
35698: PUSH
35699: LD_INT 2
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 1
35708: PUSH
35709: LD_INT 2
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 0
35718: PUSH
35719: LD_INT 2
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 1
35728: NEG
35729: PUSH
35730: LD_INT 1
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 2
35739: NEG
35740: PUSH
35741: LD_INT 0
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 2
35750: NEG
35751: PUSH
35752: LD_INT 1
35754: NEG
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 2
35762: NEG
35763: PUSH
35764: LD_INT 2
35766: NEG
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: LIST
35792: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35793: LD_ADDR_VAR 0 58
35797: PUSH
35798: LD_INT 0
35800: PUSH
35801: LD_INT 0
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 0
35810: PUSH
35811: LD_INT 1
35813: NEG
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 1
35821: PUSH
35822: LD_INT 0
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 1
35831: PUSH
35832: LD_INT 1
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 0
35841: PUSH
35842: LD_INT 1
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 1
35851: NEG
35852: PUSH
35853: LD_INT 0
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 1
35862: NEG
35863: PUSH
35864: LD_INT 1
35866: NEG
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 1
35874: NEG
35875: PUSH
35876: LD_INT 2
35878: NEG
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 0
35886: PUSH
35887: LD_INT 2
35889: NEG
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 1
35897: PUSH
35898: LD_INT 1
35900: NEG
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 2
35908: PUSH
35909: LD_INT 0
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 2
35918: PUSH
35919: LD_INT 1
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 2
35928: PUSH
35929: LD_INT 2
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 1
35938: PUSH
35939: LD_INT 2
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: LD_INT 0
35948: PUSH
35949: LD_INT 2
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 1
35958: NEG
35959: PUSH
35960: LD_INT 1
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: LD_INT 2
35969: NEG
35970: PUSH
35971: LD_INT 0
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 2
35980: NEG
35981: PUSH
35982: LD_INT 1
35984: NEG
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 2
35992: NEG
35993: PUSH
35994: LD_INT 2
35996: NEG
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: LIST
36022: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36023: LD_ADDR_VAR 0 59
36027: PUSH
36028: LD_INT 0
36030: PUSH
36031: LD_INT 0
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 0
36040: PUSH
36041: LD_INT 1
36043: NEG
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 1
36051: PUSH
36052: LD_INT 0
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 1
36061: PUSH
36062: LD_INT 1
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 0
36071: PUSH
36072: LD_INT 1
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 1
36081: NEG
36082: PUSH
36083: LD_INT 0
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 1
36092: NEG
36093: PUSH
36094: LD_INT 1
36096: NEG
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36111: LD_ADDR_VAR 0 60
36115: PUSH
36116: LD_INT 0
36118: PUSH
36119: LD_INT 0
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 0
36128: PUSH
36129: LD_INT 1
36131: NEG
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 1
36139: PUSH
36140: LD_INT 0
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: LD_INT 1
36149: PUSH
36150: LD_INT 1
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 0
36159: PUSH
36160: LD_INT 1
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: LD_INT 1
36169: NEG
36170: PUSH
36171: LD_INT 0
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 1
36180: NEG
36181: PUSH
36182: LD_INT 1
36184: NEG
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36199: LD_ADDR_VAR 0 61
36203: PUSH
36204: LD_INT 0
36206: PUSH
36207: LD_INT 0
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 0
36216: PUSH
36217: LD_INT 1
36219: NEG
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 1
36227: PUSH
36228: LD_INT 0
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 1
36237: PUSH
36238: LD_INT 1
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 0
36247: PUSH
36248: LD_INT 1
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 1
36257: NEG
36258: PUSH
36259: LD_INT 0
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 1
36268: NEG
36269: PUSH
36270: LD_INT 1
36272: NEG
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36287: LD_ADDR_VAR 0 62
36291: PUSH
36292: LD_INT 0
36294: PUSH
36295: LD_INT 0
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 0
36304: PUSH
36305: LD_INT 1
36307: NEG
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 1
36315: PUSH
36316: LD_INT 0
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 1
36325: PUSH
36326: LD_INT 1
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 0
36335: PUSH
36336: LD_INT 1
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 1
36345: NEG
36346: PUSH
36347: LD_INT 0
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 1
36356: NEG
36357: PUSH
36358: LD_INT 1
36360: NEG
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36375: LD_ADDR_VAR 0 63
36379: PUSH
36380: LD_INT 0
36382: PUSH
36383: LD_INT 0
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: LD_INT 0
36392: PUSH
36393: LD_INT 1
36395: NEG
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 1
36403: PUSH
36404: LD_INT 0
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 1
36413: PUSH
36414: LD_INT 1
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 0
36423: PUSH
36424: LD_INT 1
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 1
36433: NEG
36434: PUSH
36435: LD_INT 0
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 1
36444: NEG
36445: PUSH
36446: LD_INT 1
36448: NEG
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36463: LD_ADDR_VAR 0 64
36467: PUSH
36468: LD_INT 0
36470: PUSH
36471: LD_INT 0
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: LD_INT 0
36480: PUSH
36481: LD_INT 1
36483: NEG
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 1
36491: PUSH
36492: LD_INT 0
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 1
36501: PUSH
36502: LD_INT 1
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 0
36511: PUSH
36512: LD_INT 1
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 1
36521: NEG
36522: PUSH
36523: LD_INT 0
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 1
36532: NEG
36533: PUSH
36534: LD_INT 1
36536: NEG
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: ST_TO_ADDR
// end ; 1 :
36551: GO 42448
36553: LD_INT 1
36555: DOUBLE
36556: EQUAL
36557: IFTRUE 36561
36559: GO 39184
36561: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36562: LD_ADDR_VAR 0 11
36566: PUSH
36567: LD_INT 1
36569: NEG
36570: PUSH
36571: LD_INT 3
36573: NEG
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 0
36581: PUSH
36582: LD_INT 3
36584: NEG
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: PUSH
36590: LD_INT 1
36592: PUSH
36593: LD_INT 2
36595: NEG
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: LIST
36605: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36606: LD_ADDR_VAR 0 12
36610: PUSH
36611: LD_INT 2
36613: PUSH
36614: LD_INT 1
36616: NEG
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 3
36624: PUSH
36625: LD_INT 0
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 3
36634: PUSH
36635: LD_INT 1
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: LIST
36646: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36647: LD_ADDR_VAR 0 13
36651: PUSH
36652: LD_INT 3
36654: PUSH
36655: LD_INT 2
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 3
36664: PUSH
36665: LD_INT 3
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 2
36674: PUSH
36675: LD_INT 3
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: LIST
36686: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36687: LD_ADDR_VAR 0 14
36691: PUSH
36692: LD_INT 1
36694: PUSH
36695: LD_INT 3
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 0
36704: PUSH
36705: LD_INT 3
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 1
36714: NEG
36715: PUSH
36716: LD_INT 2
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: LIST
36727: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36728: LD_ADDR_VAR 0 15
36732: PUSH
36733: LD_INT 2
36735: NEG
36736: PUSH
36737: LD_INT 1
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: LD_INT 3
36746: NEG
36747: PUSH
36748: LD_INT 0
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 3
36757: NEG
36758: PUSH
36759: LD_INT 1
36761: NEG
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: LIST
36771: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36772: LD_ADDR_VAR 0 16
36776: PUSH
36777: LD_INT 2
36779: NEG
36780: PUSH
36781: LD_INT 3
36783: NEG
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 3
36791: NEG
36792: PUSH
36793: LD_INT 2
36795: NEG
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: LD_INT 3
36803: NEG
36804: PUSH
36805: LD_INT 3
36807: NEG
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: LIST
36817: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36818: LD_ADDR_VAR 0 17
36822: PUSH
36823: LD_INT 1
36825: NEG
36826: PUSH
36827: LD_INT 3
36829: NEG
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 0
36837: PUSH
36838: LD_INT 3
36840: NEG
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 1
36848: PUSH
36849: LD_INT 2
36851: NEG
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: LIST
36861: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36862: LD_ADDR_VAR 0 18
36866: PUSH
36867: LD_INT 2
36869: PUSH
36870: LD_INT 1
36872: NEG
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 3
36880: PUSH
36881: LD_INT 0
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 3
36890: PUSH
36891: LD_INT 1
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: LIST
36902: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36903: LD_ADDR_VAR 0 19
36907: PUSH
36908: LD_INT 3
36910: PUSH
36911: LD_INT 2
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 3
36920: PUSH
36921: LD_INT 3
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 2
36930: PUSH
36931: LD_INT 3
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: LIST
36942: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36943: LD_ADDR_VAR 0 20
36947: PUSH
36948: LD_INT 1
36950: PUSH
36951: LD_INT 3
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 0
36960: PUSH
36961: LD_INT 3
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 1
36970: NEG
36971: PUSH
36972: LD_INT 2
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: LIST
36983: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36984: LD_ADDR_VAR 0 21
36988: PUSH
36989: LD_INT 2
36991: NEG
36992: PUSH
36993: LD_INT 1
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 3
37002: NEG
37003: PUSH
37004: LD_INT 0
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 3
37013: NEG
37014: PUSH
37015: LD_INT 1
37017: NEG
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: LIST
37027: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37028: LD_ADDR_VAR 0 22
37032: PUSH
37033: LD_INT 2
37035: NEG
37036: PUSH
37037: LD_INT 3
37039: NEG
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 3
37047: NEG
37048: PUSH
37049: LD_INT 2
37051: NEG
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 3
37059: NEG
37060: PUSH
37061: LD_INT 3
37063: NEG
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: LIST
37073: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
37074: LD_ADDR_VAR 0 23
37078: PUSH
37079: LD_INT 0
37081: PUSH
37082: LD_INT 3
37084: NEG
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 1
37092: NEG
37093: PUSH
37094: LD_INT 4
37096: NEG
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 1
37104: PUSH
37105: LD_INT 3
37107: NEG
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: LIST
37117: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
37118: LD_ADDR_VAR 0 24
37122: PUSH
37123: LD_INT 3
37125: PUSH
37126: LD_INT 0
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 3
37135: PUSH
37136: LD_INT 1
37138: NEG
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: LD_INT 4
37146: PUSH
37147: LD_INT 1
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: LIST
37158: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
37159: LD_ADDR_VAR 0 25
37163: PUSH
37164: LD_INT 3
37166: PUSH
37167: LD_INT 3
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 4
37176: PUSH
37177: LD_INT 3
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 3
37186: PUSH
37187: LD_INT 4
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: LIST
37198: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
37199: LD_ADDR_VAR 0 26
37203: PUSH
37204: LD_INT 0
37206: PUSH
37207: LD_INT 3
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 1
37216: PUSH
37217: LD_INT 4
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 1
37226: NEG
37227: PUSH
37228: LD_INT 3
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: LIST
37239: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
37240: LD_ADDR_VAR 0 27
37244: PUSH
37245: LD_INT 3
37247: NEG
37248: PUSH
37249: LD_INT 0
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 3
37258: NEG
37259: PUSH
37260: LD_INT 1
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 4
37269: NEG
37270: PUSH
37271: LD_INT 1
37273: NEG
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: LIST
37283: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
37284: LD_ADDR_VAR 0 28
37288: PUSH
37289: LD_INT 3
37291: NEG
37292: PUSH
37293: LD_INT 3
37295: NEG
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 3
37303: NEG
37304: PUSH
37305: LD_INT 4
37307: NEG
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 4
37315: NEG
37316: PUSH
37317: LD_INT 3
37319: NEG
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: LIST
37329: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
37330: LD_ADDR_VAR 0 29
37334: PUSH
37335: LD_INT 1
37337: NEG
37338: PUSH
37339: LD_INT 3
37341: NEG
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 0
37349: PUSH
37350: LD_INT 3
37352: NEG
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 1
37360: PUSH
37361: LD_INT 2
37363: NEG
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: LD_INT 1
37371: NEG
37372: PUSH
37373: LD_INT 4
37375: NEG
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 0
37383: PUSH
37384: LD_INT 4
37386: NEG
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 1
37394: PUSH
37395: LD_INT 3
37397: NEG
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 1
37405: NEG
37406: PUSH
37407: LD_INT 5
37409: NEG
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 0
37417: PUSH
37418: LD_INT 5
37420: NEG
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 1
37428: PUSH
37429: LD_INT 4
37431: NEG
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 1
37439: NEG
37440: PUSH
37441: LD_INT 6
37443: NEG
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 0
37451: PUSH
37452: LD_INT 6
37454: NEG
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 1
37462: PUSH
37463: LD_INT 5
37465: NEG
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37485: LD_ADDR_VAR 0 30
37489: PUSH
37490: LD_INT 2
37492: PUSH
37493: LD_INT 1
37495: NEG
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 3
37503: PUSH
37504: LD_INT 0
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 3
37513: PUSH
37514: LD_INT 1
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 3
37523: PUSH
37524: LD_INT 1
37526: NEG
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 4
37534: PUSH
37535: LD_INT 0
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 4
37544: PUSH
37545: LD_INT 1
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 4
37554: PUSH
37555: LD_INT 1
37557: NEG
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 5
37565: PUSH
37566: LD_INT 0
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PUSH
37573: LD_INT 5
37575: PUSH
37576: LD_INT 1
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 5
37585: PUSH
37586: LD_INT 1
37588: NEG
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 6
37596: PUSH
37597: LD_INT 0
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 6
37606: PUSH
37607: LD_INT 1
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37628: LD_ADDR_VAR 0 31
37632: PUSH
37633: LD_INT 3
37635: PUSH
37636: LD_INT 2
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 3
37645: PUSH
37646: LD_INT 3
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 2
37655: PUSH
37656: LD_INT 3
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 4
37665: PUSH
37666: LD_INT 3
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 4
37675: PUSH
37676: LD_INT 4
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 3
37685: PUSH
37686: LD_INT 4
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 5
37695: PUSH
37696: LD_INT 4
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 5
37705: PUSH
37706: LD_INT 5
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 4
37715: PUSH
37716: LD_INT 5
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 6
37725: PUSH
37726: LD_INT 5
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 6
37735: PUSH
37736: LD_INT 6
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 5
37745: PUSH
37746: LD_INT 6
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: LIST
37765: LIST
37766: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37767: LD_ADDR_VAR 0 32
37771: PUSH
37772: LD_INT 1
37774: PUSH
37775: LD_INT 3
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 0
37784: PUSH
37785: LD_INT 3
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 1
37794: NEG
37795: PUSH
37796: LD_INT 2
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 1
37805: PUSH
37806: LD_INT 4
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 0
37815: PUSH
37816: LD_INT 4
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 1
37825: NEG
37826: PUSH
37827: LD_INT 3
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 1
37836: PUSH
37837: LD_INT 5
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 0
37846: PUSH
37847: LD_INT 5
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 1
37856: NEG
37857: PUSH
37858: LD_INT 4
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 1
37867: PUSH
37868: LD_INT 6
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 0
37877: PUSH
37878: LD_INT 6
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 1
37887: NEG
37888: PUSH
37889: LD_INT 5
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
37910: LD_ADDR_VAR 0 33
37914: PUSH
37915: LD_INT 2
37917: NEG
37918: PUSH
37919: LD_INT 1
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 3
37928: NEG
37929: PUSH
37930: LD_INT 0
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 3
37939: NEG
37940: PUSH
37941: LD_INT 1
37943: NEG
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 3
37951: NEG
37952: PUSH
37953: LD_INT 1
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 4
37962: NEG
37963: PUSH
37964: LD_INT 0
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 4
37973: NEG
37974: PUSH
37975: LD_INT 1
37977: NEG
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 4
37985: NEG
37986: PUSH
37987: LD_INT 1
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 5
37996: NEG
37997: PUSH
37998: LD_INT 0
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 5
38007: NEG
38008: PUSH
38009: LD_INT 1
38011: NEG
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 5
38019: NEG
38020: PUSH
38021: LD_INT 1
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 6
38030: NEG
38031: PUSH
38032: LD_INT 0
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 6
38041: NEG
38042: PUSH
38043: LD_INT 1
38045: NEG
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
38065: LD_ADDR_VAR 0 34
38069: PUSH
38070: LD_INT 2
38072: NEG
38073: PUSH
38074: LD_INT 3
38076: NEG
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 3
38084: NEG
38085: PUSH
38086: LD_INT 2
38088: NEG
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 3
38096: NEG
38097: PUSH
38098: LD_INT 3
38100: NEG
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 3
38108: NEG
38109: PUSH
38110: LD_INT 4
38112: NEG
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: LD_INT 4
38120: NEG
38121: PUSH
38122: LD_INT 3
38124: NEG
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PUSH
38130: LD_INT 4
38132: NEG
38133: PUSH
38134: LD_INT 4
38136: NEG
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 4
38144: NEG
38145: PUSH
38146: LD_INT 5
38148: NEG
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 5
38156: NEG
38157: PUSH
38158: LD_INT 4
38160: NEG
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 5
38168: NEG
38169: PUSH
38170: LD_INT 5
38172: NEG
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 5
38180: NEG
38181: PUSH
38182: LD_INT 6
38184: NEG
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 6
38192: NEG
38193: PUSH
38194: LD_INT 5
38196: NEG
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 6
38204: NEG
38205: PUSH
38206: LD_INT 6
38208: NEG
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
38228: LD_ADDR_VAR 0 41
38232: PUSH
38233: LD_INT 0
38235: PUSH
38236: LD_INT 2
38238: NEG
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 1
38246: NEG
38247: PUSH
38248: LD_INT 3
38250: NEG
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 1
38258: PUSH
38259: LD_INT 2
38261: NEG
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: LIST
38271: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
38272: LD_ADDR_VAR 0 42
38276: PUSH
38277: LD_INT 2
38279: PUSH
38280: LD_INT 0
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 2
38289: PUSH
38290: LD_INT 1
38292: NEG
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 3
38300: PUSH
38301: LD_INT 1
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: LIST
38312: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
38313: LD_ADDR_VAR 0 43
38317: PUSH
38318: LD_INT 2
38320: PUSH
38321: LD_INT 2
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 3
38330: PUSH
38331: LD_INT 2
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 2
38340: PUSH
38341: LD_INT 3
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: LIST
38352: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
38353: LD_ADDR_VAR 0 44
38357: PUSH
38358: LD_INT 0
38360: PUSH
38361: LD_INT 2
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 1
38370: PUSH
38371: LD_INT 3
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 1
38380: NEG
38381: PUSH
38382: LD_INT 2
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: LIST
38393: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38394: LD_ADDR_VAR 0 45
38398: PUSH
38399: LD_INT 2
38401: NEG
38402: PUSH
38403: LD_INT 0
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 2
38412: NEG
38413: PUSH
38414: LD_INT 1
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 3
38423: NEG
38424: PUSH
38425: LD_INT 1
38427: NEG
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: LIST
38437: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38438: LD_ADDR_VAR 0 46
38442: PUSH
38443: LD_INT 2
38445: NEG
38446: PUSH
38447: LD_INT 2
38449: NEG
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 2
38457: NEG
38458: PUSH
38459: LD_INT 3
38461: NEG
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 3
38469: NEG
38470: PUSH
38471: LD_INT 2
38473: NEG
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: LIST
38483: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38484: LD_ADDR_VAR 0 47
38488: PUSH
38489: LD_INT 2
38491: NEG
38492: PUSH
38493: LD_INT 3
38495: NEG
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 1
38503: NEG
38504: PUSH
38505: LD_INT 3
38507: NEG
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38517: LD_ADDR_VAR 0 48
38521: PUSH
38522: LD_INT 1
38524: PUSH
38525: LD_INT 2
38527: NEG
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 2
38535: PUSH
38536: LD_INT 1
38538: NEG
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38548: LD_ADDR_VAR 0 49
38552: PUSH
38553: LD_INT 3
38555: PUSH
38556: LD_INT 1
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 3
38565: PUSH
38566: LD_INT 2
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38577: LD_ADDR_VAR 0 50
38581: PUSH
38582: LD_INT 2
38584: PUSH
38585: LD_INT 3
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 1
38594: PUSH
38595: LD_INT 3
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38606: LD_ADDR_VAR 0 51
38610: PUSH
38611: LD_INT 1
38613: NEG
38614: PUSH
38615: LD_INT 2
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 2
38624: NEG
38625: PUSH
38626: LD_INT 1
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38637: LD_ADDR_VAR 0 52
38641: PUSH
38642: LD_INT 3
38644: NEG
38645: PUSH
38646: LD_INT 1
38648: NEG
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 3
38656: NEG
38657: PUSH
38658: LD_INT 2
38660: NEG
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38670: LD_ADDR_VAR 0 53
38674: PUSH
38675: LD_INT 1
38677: NEG
38678: PUSH
38679: LD_INT 3
38681: NEG
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 0
38689: PUSH
38690: LD_INT 3
38692: NEG
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 1
38700: PUSH
38701: LD_INT 2
38703: NEG
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: LIST
38713: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38714: LD_ADDR_VAR 0 54
38718: PUSH
38719: LD_INT 2
38721: PUSH
38722: LD_INT 1
38724: NEG
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 3
38732: PUSH
38733: LD_INT 0
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 3
38742: PUSH
38743: LD_INT 1
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: LIST
38754: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38755: LD_ADDR_VAR 0 55
38759: PUSH
38760: LD_INT 3
38762: PUSH
38763: LD_INT 2
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 3
38772: PUSH
38773: LD_INT 3
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 2
38782: PUSH
38783: LD_INT 3
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: LIST
38794: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38795: LD_ADDR_VAR 0 56
38799: PUSH
38800: LD_INT 1
38802: PUSH
38803: LD_INT 3
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 0
38812: PUSH
38813: LD_INT 3
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 1
38822: NEG
38823: PUSH
38824: LD_INT 2
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: LIST
38835: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38836: LD_ADDR_VAR 0 57
38840: PUSH
38841: LD_INT 2
38843: NEG
38844: PUSH
38845: LD_INT 1
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 3
38854: NEG
38855: PUSH
38856: LD_INT 0
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 3
38865: NEG
38866: PUSH
38867: LD_INT 1
38869: NEG
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: LIST
38879: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38880: LD_ADDR_VAR 0 58
38884: PUSH
38885: LD_INT 2
38887: NEG
38888: PUSH
38889: LD_INT 3
38891: NEG
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 3
38899: NEG
38900: PUSH
38901: LD_INT 2
38903: NEG
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 3
38911: NEG
38912: PUSH
38913: LD_INT 3
38915: NEG
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: LIST
38925: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
38926: LD_ADDR_VAR 0 59
38930: PUSH
38931: LD_INT 1
38933: NEG
38934: PUSH
38935: LD_INT 2
38937: NEG
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 0
38945: PUSH
38946: LD_INT 2
38948: NEG
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 1
38956: PUSH
38957: LD_INT 1
38959: NEG
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: LIST
38969: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38970: LD_ADDR_VAR 0 60
38974: PUSH
38975: LD_INT 1
38977: PUSH
38978: LD_INT 1
38980: NEG
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 2
38988: PUSH
38989: LD_INT 0
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 2
38998: PUSH
38999: LD_INT 1
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: LIST
39010: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39011: LD_ADDR_VAR 0 61
39015: PUSH
39016: LD_INT 2
39018: PUSH
39019: LD_INT 1
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 2
39028: PUSH
39029: LD_INT 2
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 1
39038: PUSH
39039: LD_INT 2
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: LIST
39050: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39051: LD_ADDR_VAR 0 62
39055: PUSH
39056: LD_INT 1
39058: PUSH
39059: LD_INT 2
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 0
39068: PUSH
39069: LD_INT 2
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 1
39078: NEG
39079: PUSH
39080: LD_INT 1
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: LIST
39091: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39092: LD_ADDR_VAR 0 63
39096: PUSH
39097: LD_INT 1
39099: NEG
39100: PUSH
39101: LD_INT 1
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 2
39110: NEG
39111: PUSH
39112: LD_INT 0
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 2
39121: NEG
39122: PUSH
39123: LD_INT 1
39125: NEG
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: LIST
39135: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39136: LD_ADDR_VAR 0 64
39140: PUSH
39141: LD_INT 1
39143: NEG
39144: PUSH
39145: LD_INT 2
39147: NEG
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 2
39155: NEG
39156: PUSH
39157: LD_INT 1
39159: NEG
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 2
39167: NEG
39168: PUSH
39169: LD_INT 2
39171: NEG
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: LIST
39181: ST_TO_ADDR
// end ; 2 :
39182: GO 42448
39184: LD_INT 2
39186: DOUBLE
39187: EQUAL
39188: IFTRUE 39192
39190: GO 42447
39192: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
39193: LD_ADDR_VAR 0 29
39197: PUSH
39198: LD_INT 4
39200: PUSH
39201: LD_INT 0
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 4
39210: PUSH
39211: LD_INT 1
39213: NEG
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 5
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 5
39231: PUSH
39232: LD_INT 1
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 4
39241: PUSH
39242: LD_INT 1
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 3
39251: PUSH
39252: LD_INT 0
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 3
39261: PUSH
39262: LD_INT 1
39264: NEG
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 3
39272: PUSH
39273: LD_INT 2
39275: NEG
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 5
39283: PUSH
39284: LD_INT 2
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 3
39293: PUSH
39294: LD_INT 3
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 3
39303: PUSH
39304: LD_INT 2
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 4
39313: PUSH
39314: LD_INT 3
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 4
39323: PUSH
39324: LD_INT 4
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 3
39333: PUSH
39334: LD_INT 4
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 2
39343: PUSH
39344: LD_INT 3
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 2
39353: PUSH
39354: LD_INT 2
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 4
39363: PUSH
39364: LD_INT 2
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 2
39373: PUSH
39374: LD_INT 4
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 0
39383: PUSH
39384: LD_INT 4
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 0
39393: PUSH
39394: LD_INT 3
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 1
39403: PUSH
39404: LD_INT 4
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 1
39413: PUSH
39414: LD_INT 5
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 0
39423: PUSH
39424: LD_INT 5
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 1
39433: NEG
39434: PUSH
39435: LD_INT 4
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 1
39444: NEG
39445: PUSH
39446: LD_INT 3
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 2
39455: PUSH
39456: LD_INT 5
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 2
39465: NEG
39466: PUSH
39467: LD_INT 3
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 3
39476: NEG
39477: PUSH
39478: LD_INT 0
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 3
39487: NEG
39488: PUSH
39489: LD_INT 1
39491: NEG
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 2
39499: NEG
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 2
39510: NEG
39511: PUSH
39512: LD_INT 1
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 3
39521: NEG
39522: PUSH
39523: LD_INT 1
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 4
39532: NEG
39533: PUSH
39534: LD_INT 0
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 4
39543: NEG
39544: PUSH
39545: LD_INT 1
39547: NEG
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 4
39555: NEG
39556: PUSH
39557: LD_INT 2
39559: NEG
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 2
39567: NEG
39568: PUSH
39569: LD_INT 2
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 4
39578: NEG
39579: PUSH
39580: LD_INT 4
39582: NEG
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 4
39590: NEG
39591: PUSH
39592: LD_INT 5
39594: NEG
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 3
39602: NEG
39603: PUSH
39604: LD_INT 4
39606: NEG
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 3
39614: NEG
39615: PUSH
39616: LD_INT 3
39618: NEG
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 4
39626: NEG
39627: PUSH
39628: LD_INT 3
39630: NEG
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 5
39638: NEG
39639: PUSH
39640: LD_INT 4
39642: NEG
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 5
39650: NEG
39651: PUSH
39652: LD_INT 5
39654: NEG
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 3
39662: NEG
39663: PUSH
39664: LD_INT 5
39666: NEG
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 5
39674: NEG
39675: PUSH
39676: LD_INT 3
39678: NEG
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39731: LD_ADDR_VAR 0 30
39735: PUSH
39736: LD_INT 4
39738: PUSH
39739: LD_INT 4
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 4
39748: PUSH
39749: LD_INT 3
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 5
39758: PUSH
39759: LD_INT 4
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 5
39768: PUSH
39769: LD_INT 5
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 4
39778: PUSH
39779: LD_INT 5
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 3
39788: PUSH
39789: LD_INT 4
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 3
39798: PUSH
39799: LD_INT 3
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 5
39808: PUSH
39809: LD_INT 3
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 3
39818: PUSH
39819: LD_INT 5
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 0
39828: PUSH
39829: LD_INT 3
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 0
39838: PUSH
39839: LD_INT 2
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 1
39848: PUSH
39849: LD_INT 3
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 1
39858: PUSH
39859: LD_INT 4
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 0
39868: PUSH
39869: LD_INT 4
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 1
39878: NEG
39879: PUSH
39880: LD_INT 3
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 1
39889: NEG
39890: PUSH
39891: LD_INT 2
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 2
39900: PUSH
39901: LD_INT 4
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 2
39910: NEG
39911: PUSH
39912: LD_INT 2
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 4
39921: NEG
39922: PUSH
39923: LD_INT 0
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 4
39932: NEG
39933: PUSH
39934: LD_INT 1
39936: NEG
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 3
39944: NEG
39945: PUSH
39946: LD_INT 0
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 3
39955: NEG
39956: PUSH
39957: LD_INT 1
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 4
39966: NEG
39967: PUSH
39968: LD_INT 1
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 5
39977: NEG
39978: PUSH
39979: LD_INT 0
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 5
39988: NEG
39989: PUSH
39990: LD_INT 1
39992: NEG
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 5
40000: NEG
40001: PUSH
40002: LD_INT 2
40004: NEG
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 3
40012: NEG
40013: PUSH
40014: LD_INT 2
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 3
40023: NEG
40024: PUSH
40025: LD_INT 3
40027: NEG
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 3
40035: NEG
40036: PUSH
40037: LD_INT 4
40039: NEG
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 2
40047: NEG
40048: PUSH
40049: LD_INT 3
40051: NEG
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 2
40059: NEG
40060: PUSH
40061: LD_INT 2
40063: NEG
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 3
40071: NEG
40072: PUSH
40073: LD_INT 2
40075: NEG
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 4
40083: NEG
40084: PUSH
40085: LD_INT 3
40087: NEG
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 4
40095: NEG
40096: PUSH
40097: LD_INT 4
40099: NEG
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 2
40107: NEG
40108: PUSH
40109: LD_INT 4
40111: NEG
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 4
40119: NEG
40120: PUSH
40121: LD_INT 2
40123: NEG
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 0
40131: PUSH
40132: LD_INT 4
40134: NEG
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 0
40142: PUSH
40143: LD_INT 5
40145: NEG
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 1
40153: PUSH
40154: LD_INT 4
40156: NEG
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 1
40164: PUSH
40165: LD_INT 3
40167: NEG
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 0
40175: PUSH
40176: LD_INT 3
40178: NEG
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 1
40186: NEG
40187: PUSH
40188: LD_INT 4
40190: NEG
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 1
40198: NEG
40199: PUSH
40200: LD_INT 5
40202: NEG
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 2
40210: PUSH
40211: LD_INT 3
40213: NEG
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 2
40221: NEG
40222: PUSH
40223: LD_INT 5
40225: NEG
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
40278: LD_ADDR_VAR 0 31
40282: PUSH
40283: LD_INT 0
40285: PUSH
40286: LD_INT 4
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 0
40295: PUSH
40296: LD_INT 3
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 1
40305: PUSH
40306: LD_INT 4
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 1
40315: PUSH
40316: LD_INT 5
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 0
40325: PUSH
40326: LD_INT 5
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 1
40335: NEG
40336: PUSH
40337: LD_INT 4
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 1
40346: NEG
40347: PUSH
40348: LD_INT 3
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 2
40357: PUSH
40358: LD_INT 5
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 2
40367: NEG
40368: PUSH
40369: LD_INT 3
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 3
40378: NEG
40379: PUSH
40380: LD_INT 0
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 3
40389: NEG
40390: PUSH
40391: LD_INT 1
40393: NEG
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 2
40401: NEG
40402: PUSH
40403: LD_INT 0
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 2
40412: NEG
40413: PUSH
40414: LD_INT 1
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 3
40423: NEG
40424: PUSH
40425: LD_INT 1
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 4
40434: NEG
40435: PUSH
40436: LD_INT 0
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 4
40445: NEG
40446: PUSH
40447: LD_INT 1
40449: NEG
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 4
40457: NEG
40458: PUSH
40459: LD_INT 2
40461: NEG
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 2
40469: NEG
40470: PUSH
40471: LD_INT 2
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 4
40480: NEG
40481: PUSH
40482: LD_INT 4
40484: NEG
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 4
40492: NEG
40493: PUSH
40494: LD_INT 5
40496: NEG
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 3
40504: NEG
40505: PUSH
40506: LD_INT 4
40508: NEG
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 3
40516: NEG
40517: PUSH
40518: LD_INT 3
40520: NEG
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 4
40528: NEG
40529: PUSH
40530: LD_INT 3
40532: NEG
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 5
40540: NEG
40541: PUSH
40542: LD_INT 4
40544: NEG
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 5
40552: NEG
40553: PUSH
40554: LD_INT 5
40556: NEG
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 3
40564: NEG
40565: PUSH
40566: LD_INT 5
40568: NEG
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 5
40576: NEG
40577: PUSH
40578: LD_INT 3
40580: NEG
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 0
40588: PUSH
40589: LD_INT 3
40591: NEG
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 0
40599: PUSH
40600: LD_INT 4
40602: NEG
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 1
40610: PUSH
40611: LD_INT 3
40613: NEG
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 1
40621: PUSH
40622: LD_INT 2
40624: NEG
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 0
40632: PUSH
40633: LD_INT 2
40635: NEG
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 1
40643: NEG
40644: PUSH
40645: LD_INT 3
40647: NEG
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 1
40655: NEG
40656: PUSH
40657: LD_INT 4
40659: NEG
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 2
40667: PUSH
40668: LD_INT 2
40670: NEG
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 2
40678: NEG
40679: PUSH
40680: LD_INT 4
40682: NEG
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 4
40690: PUSH
40691: LD_INT 0
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 4
40700: PUSH
40701: LD_INT 1
40703: NEG
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 5
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 5
40721: PUSH
40722: LD_INT 1
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 4
40731: PUSH
40732: LD_INT 1
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 3
40741: PUSH
40742: LD_INT 0
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 3
40751: PUSH
40752: LD_INT 1
40754: NEG
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 3
40762: PUSH
40763: LD_INT 2
40765: NEG
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 5
40773: PUSH
40774: LD_INT 2
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
40828: LD_ADDR_VAR 0 32
40832: PUSH
40833: LD_INT 4
40835: NEG
40836: PUSH
40837: LD_INT 0
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 4
40846: NEG
40847: PUSH
40848: LD_INT 1
40850: NEG
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 3
40858: NEG
40859: PUSH
40860: LD_INT 0
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 3
40869: NEG
40870: PUSH
40871: LD_INT 1
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 4
40880: NEG
40881: PUSH
40882: LD_INT 1
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 5
40891: NEG
40892: PUSH
40893: LD_INT 0
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 5
40902: NEG
40903: PUSH
40904: LD_INT 1
40906: NEG
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 5
40914: NEG
40915: PUSH
40916: LD_INT 2
40918: NEG
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 3
40926: NEG
40927: PUSH
40928: LD_INT 2
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 3
40937: NEG
40938: PUSH
40939: LD_INT 3
40941: NEG
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 3
40949: NEG
40950: PUSH
40951: LD_INT 4
40953: NEG
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 2
40961: NEG
40962: PUSH
40963: LD_INT 3
40965: NEG
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 2
40973: NEG
40974: PUSH
40975: LD_INT 2
40977: NEG
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 3
40985: NEG
40986: PUSH
40987: LD_INT 2
40989: NEG
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 4
40997: NEG
40998: PUSH
40999: LD_INT 3
41001: NEG
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 4
41009: NEG
41010: PUSH
41011: LD_INT 4
41013: NEG
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 2
41021: NEG
41022: PUSH
41023: LD_INT 4
41025: NEG
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 4
41033: NEG
41034: PUSH
41035: LD_INT 2
41037: NEG
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 0
41045: PUSH
41046: LD_INT 4
41048: NEG
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 0
41056: PUSH
41057: LD_INT 5
41059: NEG
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 1
41067: PUSH
41068: LD_INT 4
41070: NEG
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 1
41078: PUSH
41079: LD_INT 3
41081: NEG
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 0
41089: PUSH
41090: LD_INT 3
41092: NEG
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 1
41100: NEG
41101: PUSH
41102: LD_INT 4
41104: NEG
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 1
41112: NEG
41113: PUSH
41114: LD_INT 5
41116: NEG
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 2
41124: PUSH
41125: LD_INT 3
41127: NEG
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 2
41135: NEG
41136: PUSH
41137: LD_INT 5
41139: NEG
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 3
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 3
41157: PUSH
41158: LD_INT 1
41160: NEG
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 4
41168: PUSH
41169: LD_INT 0
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 4
41178: PUSH
41179: LD_INT 1
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 3
41188: PUSH
41189: LD_INT 1
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 2
41198: PUSH
41199: LD_INT 0
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 2
41208: PUSH
41209: LD_INT 1
41211: NEG
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 2
41219: PUSH
41220: LD_INT 2
41222: NEG
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 4
41230: PUSH
41231: LD_INT 2
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 4
41240: PUSH
41241: LD_INT 4
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 4
41250: PUSH
41251: LD_INT 3
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 5
41260: PUSH
41261: LD_INT 4
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 5
41270: PUSH
41271: LD_INT 5
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 4
41280: PUSH
41281: LD_INT 5
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 3
41290: PUSH
41291: LD_INT 4
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 3
41300: PUSH
41301: LD_INT 3
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 5
41310: PUSH
41311: LD_INT 3
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 3
41320: PUSH
41321: LD_INT 5
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
41375: LD_ADDR_VAR 0 33
41379: PUSH
41380: LD_INT 4
41382: NEG
41383: PUSH
41384: LD_INT 4
41386: NEG
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 4
41394: NEG
41395: PUSH
41396: LD_INT 5
41398: NEG
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 3
41406: NEG
41407: PUSH
41408: LD_INT 4
41410: NEG
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 3
41418: NEG
41419: PUSH
41420: LD_INT 3
41422: NEG
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 4
41430: NEG
41431: PUSH
41432: LD_INT 3
41434: NEG
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 5
41442: NEG
41443: PUSH
41444: LD_INT 4
41446: NEG
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 5
41454: NEG
41455: PUSH
41456: LD_INT 5
41458: NEG
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 3
41466: NEG
41467: PUSH
41468: LD_INT 5
41470: NEG
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 5
41478: NEG
41479: PUSH
41480: LD_INT 3
41482: NEG
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 0
41490: PUSH
41491: LD_INT 3
41493: NEG
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 0
41501: PUSH
41502: LD_INT 4
41504: NEG
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 1
41512: PUSH
41513: LD_INT 3
41515: NEG
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 1
41523: PUSH
41524: LD_INT 2
41526: NEG
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 0
41534: PUSH
41535: LD_INT 2
41537: NEG
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 1
41545: NEG
41546: PUSH
41547: LD_INT 3
41549: NEG
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 1
41557: NEG
41558: PUSH
41559: LD_INT 4
41561: NEG
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: LD_INT 2
41569: PUSH
41570: LD_INT 2
41572: NEG
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 2
41580: NEG
41581: PUSH
41582: LD_INT 4
41584: NEG
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 4
41592: PUSH
41593: LD_INT 0
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 4
41602: PUSH
41603: LD_INT 1
41605: NEG
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 5
41613: PUSH
41614: LD_INT 0
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 5
41623: PUSH
41624: LD_INT 1
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 4
41633: PUSH
41634: LD_INT 1
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 3
41643: PUSH
41644: LD_INT 0
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 3
41653: PUSH
41654: LD_INT 1
41656: NEG
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 3
41664: PUSH
41665: LD_INT 2
41667: NEG
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 5
41675: PUSH
41676: LD_INT 2
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 3
41685: PUSH
41686: LD_INT 3
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 3
41695: PUSH
41696: LD_INT 2
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 4
41705: PUSH
41706: LD_INT 3
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 4
41715: PUSH
41716: LD_INT 4
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 3
41725: PUSH
41726: LD_INT 4
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 2
41735: PUSH
41736: LD_INT 3
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 2
41745: PUSH
41746: LD_INT 2
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 4
41755: PUSH
41756: LD_INT 2
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 2
41765: PUSH
41766: LD_INT 4
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 0
41775: PUSH
41776: LD_INT 4
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 0
41785: PUSH
41786: LD_INT 3
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 1
41795: PUSH
41796: LD_INT 4
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: LD_INT 1
41805: PUSH
41806: LD_INT 5
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 0
41815: PUSH
41816: LD_INT 5
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 1
41825: NEG
41826: PUSH
41827: LD_INT 4
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 1
41836: NEG
41837: PUSH
41838: LD_INT 3
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 2
41847: PUSH
41848: LD_INT 5
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 2
41857: NEG
41858: PUSH
41859: LD_INT 3
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
41913: LD_ADDR_VAR 0 34
41917: PUSH
41918: LD_INT 0
41920: PUSH
41921: LD_INT 4
41923: NEG
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 0
41931: PUSH
41932: LD_INT 5
41934: NEG
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 1
41942: PUSH
41943: LD_INT 4
41945: NEG
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 1
41953: PUSH
41954: LD_INT 3
41956: NEG
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 0
41964: PUSH
41965: LD_INT 3
41967: NEG
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 1
41975: NEG
41976: PUSH
41977: LD_INT 4
41979: NEG
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 1
41987: NEG
41988: PUSH
41989: LD_INT 5
41991: NEG
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 2
41999: PUSH
42000: LD_INT 3
42002: NEG
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 2
42010: NEG
42011: PUSH
42012: LD_INT 5
42014: NEG
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 3
42022: PUSH
42023: LD_INT 0
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 3
42032: PUSH
42033: LD_INT 1
42035: NEG
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 4
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 4
42053: PUSH
42054: LD_INT 1
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 3
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 2
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 2
42083: PUSH
42084: LD_INT 1
42086: NEG
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 2
42094: PUSH
42095: LD_INT 2
42097: NEG
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 4
42105: PUSH
42106: LD_INT 2
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 4
42115: PUSH
42116: LD_INT 4
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 4
42125: PUSH
42126: LD_INT 3
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 5
42135: PUSH
42136: LD_INT 4
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 5
42145: PUSH
42146: LD_INT 5
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 4
42155: PUSH
42156: LD_INT 5
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 3
42165: PUSH
42166: LD_INT 4
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 3
42175: PUSH
42176: LD_INT 3
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 5
42185: PUSH
42186: LD_INT 3
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 3
42195: PUSH
42196: LD_INT 5
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 0
42205: PUSH
42206: LD_INT 3
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 0
42215: PUSH
42216: LD_INT 2
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 1
42225: PUSH
42226: LD_INT 3
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 1
42235: PUSH
42236: LD_INT 4
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 0
42245: PUSH
42246: LD_INT 4
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 1
42255: NEG
42256: PUSH
42257: LD_INT 3
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 1
42266: NEG
42267: PUSH
42268: LD_INT 2
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 2
42277: PUSH
42278: LD_INT 4
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 2
42287: NEG
42288: PUSH
42289: LD_INT 2
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 4
42298: NEG
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 4
42309: NEG
42310: PUSH
42311: LD_INT 1
42313: NEG
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 3
42321: NEG
42322: PUSH
42323: LD_INT 0
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 3
42332: NEG
42333: PUSH
42334: LD_INT 1
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 4
42343: NEG
42344: PUSH
42345: LD_INT 1
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 5
42354: NEG
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 5
42365: NEG
42366: PUSH
42367: LD_INT 1
42369: NEG
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 5
42377: NEG
42378: PUSH
42379: LD_INT 2
42381: NEG
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 3
42389: NEG
42390: PUSH
42391: LD_INT 2
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: ST_TO_ADDR
// end ; end ;
42445: GO 42448
42447: POP
// case btype of b_depot , b_warehouse :
42448: LD_VAR 0 1
42452: PUSH
42453: LD_INT 0
42455: DOUBLE
42456: EQUAL
42457: IFTRUE 42467
42459: LD_INT 1
42461: DOUBLE
42462: EQUAL
42463: IFTRUE 42467
42465: GO 42668
42467: POP
// case nation of nation_american :
42468: LD_VAR 0 5
42472: PUSH
42473: LD_INT 1
42475: DOUBLE
42476: EQUAL
42477: IFTRUE 42481
42479: GO 42537
42481: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
42482: LD_ADDR_VAR 0 9
42486: PUSH
42487: LD_VAR 0 11
42491: PUSH
42492: LD_VAR 0 12
42496: PUSH
42497: LD_VAR 0 13
42501: PUSH
42502: LD_VAR 0 14
42506: PUSH
42507: LD_VAR 0 15
42511: PUSH
42512: LD_VAR 0 16
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: PUSH
42525: LD_VAR 0 4
42529: PUSH
42530: LD_INT 1
42532: PLUS
42533: ARRAY
42534: ST_TO_ADDR
42535: GO 42666
42537: LD_INT 2
42539: DOUBLE
42540: EQUAL
42541: IFTRUE 42545
42543: GO 42601
42545: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
42546: LD_ADDR_VAR 0 9
42550: PUSH
42551: LD_VAR 0 17
42555: PUSH
42556: LD_VAR 0 18
42560: PUSH
42561: LD_VAR 0 19
42565: PUSH
42566: LD_VAR 0 20
42570: PUSH
42571: LD_VAR 0 21
42575: PUSH
42576: LD_VAR 0 22
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: PUSH
42589: LD_VAR 0 4
42593: PUSH
42594: LD_INT 1
42596: PLUS
42597: ARRAY
42598: ST_TO_ADDR
42599: GO 42666
42601: LD_INT 3
42603: DOUBLE
42604: EQUAL
42605: IFTRUE 42609
42607: GO 42665
42609: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42610: LD_ADDR_VAR 0 9
42614: PUSH
42615: LD_VAR 0 23
42619: PUSH
42620: LD_VAR 0 24
42624: PUSH
42625: LD_VAR 0 25
42629: PUSH
42630: LD_VAR 0 26
42634: PUSH
42635: LD_VAR 0 27
42639: PUSH
42640: LD_VAR 0 28
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: PUSH
42653: LD_VAR 0 4
42657: PUSH
42658: LD_INT 1
42660: PLUS
42661: ARRAY
42662: ST_TO_ADDR
42663: GO 42666
42665: POP
42666: GO 43221
42668: LD_INT 2
42670: DOUBLE
42671: EQUAL
42672: IFTRUE 42682
42674: LD_INT 3
42676: DOUBLE
42677: EQUAL
42678: IFTRUE 42682
42680: GO 42738
42682: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42683: LD_ADDR_VAR 0 9
42687: PUSH
42688: LD_VAR 0 29
42692: PUSH
42693: LD_VAR 0 30
42697: PUSH
42698: LD_VAR 0 31
42702: PUSH
42703: LD_VAR 0 32
42707: PUSH
42708: LD_VAR 0 33
42712: PUSH
42713: LD_VAR 0 34
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: PUSH
42726: LD_VAR 0 4
42730: PUSH
42731: LD_INT 1
42733: PLUS
42734: ARRAY
42735: ST_TO_ADDR
42736: GO 43221
42738: LD_INT 16
42740: DOUBLE
42741: EQUAL
42742: IFTRUE 42800
42744: LD_INT 17
42746: DOUBLE
42747: EQUAL
42748: IFTRUE 42800
42750: LD_INT 18
42752: DOUBLE
42753: EQUAL
42754: IFTRUE 42800
42756: LD_INT 19
42758: DOUBLE
42759: EQUAL
42760: IFTRUE 42800
42762: LD_INT 22
42764: DOUBLE
42765: EQUAL
42766: IFTRUE 42800
42768: LD_INT 20
42770: DOUBLE
42771: EQUAL
42772: IFTRUE 42800
42774: LD_INT 21
42776: DOUBLE
42777: EQUAL
42778: IFTRUE 42800
42780: LD_INT 23
42782: DOUBLE
42783: EQUAL
42784: IFTRUE 42800
42786: LD_INT 24
42788: DOUBLE
42789: EQUAL
42790: IFTRUE 42800
42792: LD_INT 25
42794: DOUBLE
42795: EQUAL
42796: IFTRUE 42800
42798: GO 42856
42800: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42801: LD_ADDR_VAR 0 9
42805: PUSH
42806: LD_VAR 0 35
42810: PUSH
42811: LD_VAR 0 36
42815: PUSH
42816: LD_VAR 0 37
42820: PUSH
42821: LD_VAR 0 38
42825: PUSH
42826: LD_VAR 0 39
42830: PUSH
42831: LD_VAR 0 40
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: PUSH
42844: LD_VAR 0 4
42848: PUSH
42849: LD_INT 1
42851: PLUS
42852: ARRAY
42853: ST_TO_ADDR
42854: GO 43221
42856: LD_INT 6
42858: DOUBLE
42859: EQUAL
42860: IFTRUE 42912
42862: LD_INT 7
42864: DOUBLE
42865: EQUAL
42866: IFTRUE 42912
42868: LD_INT 8
42870: DOUBLE
42871: EQUAL
42872: IFTRUE 42912
42874: LD_INT 13
42876: DOUBLE
42877: EQUAL
42878: IFTRUE 42912
42880: LD_INT 12
42882: DOUBLE
42883: EQUAL
42884: IFTRUE 42912
42886: LD_INT 15
42888: DOUBLE
42889: EQUAL
42890: IFTRUE 42912
42892: LD_INT 11
42894: DOUBLE
42895: EQUAL
42896: IFTRUE 42912
42898: LD_INT 14
42900: DOUBLE
42901: EQUAL
42902: IFTRUE 42912
42904: LD_INT 10
42906: DOUBLE
42907: EQUAL
42908: IFTRUE 42912
42910: GO 42968
42912: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
42913: LD_ADDR_VAR 0 9
42917: PUSH
42918: LD_VAR 0 41
42922: PUSH
42923: LD_VAR 0 42
42927: PUSH
42928: LD_VAR 0 43
42932: PUSH
42933: LD_VAR 0 44
42937: PUSH
42938: LD_VAR 0 45
42942: PUSH
42943: LD_VAR 0 46
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: PUSH
42956: LD_VAR 0 4
42960: PUSH
42961: LD_INT 1
42963: PLUS
42964: ARRAY
42965: ST_TO_ADDR
42966: GO 43221
42968: LD_INT 36
42970: DOUBLE
42971: EQUAL
42972: IFTRUE 42976
42974: GO 43032
42976: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
42977: LD_ADDR_VAR 0 9
42981: PUSH
42982: LD_VAR 0 47
42986: PUSH
42987: LD_VAR 0 48
42991: PUSH
42992: LD_VAR 0 49
42996: PUSH
42997: LD_VAR 0 50
43001: PUSH
43002: LD_VAR 0 51
43006: PUSH
43007: LD_VAR 0 52
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: PUSH
43020: LD_VAR 0 4
43024: PUSH
43025: LD_INT 1
43027: PLUS
43028: ARRAY
43029: ST_TO_ADDR
43030: GO 43221
43032: LD_INT 4
43034: DOUBLE
43035: EQUAL
43036: IFTRUE 43058
43038: LD_INT 5
43040: DOUBLE
43041: EQUAL
43042: IFTRUE 43058
43044: LD_INT 34
43046: DOUBLE
43047: EQUAL
43048: IFTRUE 43058
43050: LD_INT 37
43052: DOUBLE
43053: EQUAL
43054: IFTRUE 43058
43056: GO 43114
43058: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
43059: LD_ADDR_VAR 0 9
43063: PUSH
43064: LD_VAR 0 53
43068: PUSH
43069: LD_VAR 0 54
43073: PUSH
43074: LD_VAR 0 55
43078: PUSH
43079: LD_VAR 0 56
43083: PUSH
43084: LD_VAR 0 57
43088: PUSH
43089: LD_VAR 0 58
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: PUSH
43102: LD_VAR 0 4
43106: PUSH
43107: LD_INT 1
43109: PLUS
43110: ARRAY
43111: ST_TO_ADDR
43112: GO 43221
43114: LD_INT 31
43116: DOUBLE
43117: EQUAL
43118: IFTRUE 43164
43120: LD_INT 32
43122: DOUBLE
43123: EQUAL
43124: IFTRUE 43164
43126: LD_INT 33
43128: DOUBLE
43129: EQUAL
43130: IFTRUE 43164
43132: LD_INT 27
43134: DOUBLE
43135: EQUAL
43136: IFTRUE 43164
43138: LD_INT 26
43140: DOUBLE
43141: EQUAL
43142: IFTRUE 43164
43144: LD_INT 28
43146: DOUBLE
43147: EQUAL
43148: IFTRUE 43164
43150: LD_INT 29
43152: DOUBLE
43153: EQUAL
43154: IFTRUE 43164
43156: LD_INT 30
43158: DOUBLE
43159: EQUAL
43160: IFTRUE 43164
43162: GO 43220
43164: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
43165: LD_ADDR_VAR 0 9
43169: PUSH
43170: LD_VAR 0 59
43174: PUSH
43175: LD_VAR 0 60
43179: PUSH
43180: LD_VAR 0 61
43184: PUSH
43185: LD_VAR 0 62
43189: PUSH
43190: LD_VAR 0 63
43194: PUSH
43195: LD_VAR 0 64
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: PUSH
43208: LD_VAR 0 4
43212: PUSH
43213: LD_INT 1
43215: PLUS
43216: ARRAY
43217: ST_TO_ADDR
43218: GO 43221
43220: POP
// temp_list2 = [ ] ;
43221: LD_ADDR_VAR 0 10
43225: PUSH
43226: EMPTY
43227: ST_TO_ADDR
// for i in temp_list do
43228: LD_ADDR_VAR 0 8
43232: PUSH
43233: LD_VAR 0 9
43237: PUSH
43238: FOR_IN
43239: IFFALSE 43291
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
43241: LD_ADDR_VAR 0 10
43245: PUSH
43246: LD_VAR 0 10
43250: PUSH
43251: LD_VAR 0 8
43255: PUSH
43256: LD_INT 1
43258: ARRAY
43259: PUSH
43260: LD_VAR 0 2
43264: PLUS
43265: PUSH
43266: LD_VAR 0 8
43270: PUSH
43271: LD_INT 2
43273: ARRAY
43274: PUSH
43275: LD_VAR 0 3
43279: PLUS
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: EMPTY
43286: LIST
43287: ADD
43288: ST_TO_ADDR
43289: GO 43238
43291: POP
43292: POP
// result = temp_list2 ;
43293: LD_ADDR_VAR 0 7
43297: PUSH
43298: LD_VAR 0 10
43302: ST_TO_ADDR
// end ;
43303: LD_VAR 0 7
43307: RET
// export function EnemyInRange ( unit , dist ) ; begin
43308: LD_INT 0
43310: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
43311: LD_ADDR_VAR 0 3
43315: PUSH
43316: LD_VAR 0 1
43320: PPUSH
43321: CALL_OW 255
43325: PPUSH
43326: LD_VAR 0 1
43330: PPUSH
43331: CALL_OW 250
43335: PPUSH
43336: LD_VAR 0 1
43340: PPUSH
43341: CALL_OW 251
43345: PPUSH
43346: LD_VAR 0 2
43350: PPUSH
43351: CALL 16710 0 4
43355: PUSH
43356: LD_INT 4
43358: ARRAY
43359: ST_TO_ADDR
// end ;
43360: LD_VAR 0 3
43364: RET
// export function PlayerSeeMe ( unit ) ; begin
43365: LD_INT 0
43367: PPUSH
// result := See ( your_side , unit ) ;
43368: LD_ADDR_VAR 0 2
43372: PUSH
43373: LD_OWVAR 2
43377: PPUSH
43378: LD_VAR 0 1
43382: PPUSH
43383: CALL_OW 292
43387: ST_TO_ADDR
// end ;
43388: LD_VAR 0 2
43392: RET
// export function ReverseDir ( unit ) ; begin
43393: LD_INT 0
43395: PPUSH
// if not unit then
43396: LD_VAR 0 1
43400: NOT
43401: IFFALSE 43405
// exit ;
43403: GO 43428
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
43405: LD_ADDR_VAR 0 2
43409: PUSH
43410: LD_VAR 0 1
43414: PPUSH
43415: CALL_OW 254
43419: PUSH
43420: LD_INT 3
43422: PLUS
43423: PUSH
43424: LD_INT 6
43426: MOD
43427: ST_TO_ADDR
// end ;
43428: LD_VAR 0 2
43432: RET
// export function ReverseArray ( array ) ; var i ; begin
43433: LD_INT 0
43435: PPUSH
43436: PPUSH
// if not array then
43437: LD_VAR 0 1
43441: NOT
43442: IFFALSE 43446
// exit ;
43444: GO 43501
// result := [ ] ;
43446: LD_ADDR_VAR 0 2
43450: PUSH
43451: EMPTY
43452: ST_TO_ADDR
// for i := array downto 1 do
43453: LD_ADDR_VAR 0 3
43457: PUSH
43458: DOUBLE
43459: LD_VAR 0 1
43463: INC
43464: ST_TO_ADDR
43465: LD_INT 1
43467: PUSH
43468: FOR_DOWNTO
43469: IFFALSE 43499
// result := Join ( result , array [ i ] ) ;
43471: LD_ADDR_VAR 0 2
43475: PUSH
43476: LD_VAR 0 2
43480: PPUSH
43481: LD_VAR 0 1
43485: PUSH
43486: LD_VAR 0 3
43490: ARRAY
43491: PPUSH
43492: CALL 48144 0 2
43496: ST_TO_ADDR
43497: GO 43468
43499: POP
43500: POP
// end ;
43501: LD_VAR 0 2
43505: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
43506: LD_INT 0
43508: PPUSH
43509: PPUSH
43510: PPUSH
43511: PPUSH
43512: PPUSH
43513: PPUSH
// if not unit or not hexes then
43514: LD_VAR 0 1
43518: NOT
43519: PUSH
43520: LD_VAR 0 2
43524: NOT
43525: OR
43526: IFFALSE 43530
// exit ;
43528: GO 43653
// dist := 9999 ;
43530: LD_ADDR_VAR 0 5
43534: PUSH
43535: LD_INT 9999
43537: ST_TO_ADDR
// for i = 1 to hexes do
43538: LD_ADDR_VAR 0 4
43542: PUSH
43543: DOUBLE
43544: LD_INT 1
43546: DEC
43547: ST_TO_ADDR
43548: LD_VAR 0 2
43552: PUSH
43553: FOR_TO
43554: IFFALSE 43641
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43556: LD_ADDR_VAR 0 6
43560: PUSH
43561: LD_VAR 0 1
43565: PPUSH
43566: LD_VAR 0 2
43570: PUSH
43571: LD_VAR 0 4
43575: ARRAY
43576: PUSH
43577: LD_INT 1
43579: ARRAY
43580: PPUSH
43581: LD_VAR 0 2
43585: PUSH
43586: LD_VAR 0 4
43590: ARRAY
43591: PUSH
43592: LD_INT 2
43594: ARRAY
43595: PPUSH
43596: CALL_OW 297
43600: ST_TO_ADDR
// if tdist < dist then
43601: LD_VAR 0 6
43605: PUSH
43606: LD_VAR 0 5
43610: LESS
43611: IFFALSE 43639
// begin hex := hexes [ i ] ;
43613: LD_ADDR_VAR 0 8
43617: PUSH
43618: LD_VAR 0 2
43622: PUSH
43623: LD_VAR 0 4
43627: ARRAY
43628: ST_TO_ADDR
// dist := tdist ;
43629: LD_ADDR_VAR 0 5
43633: PUSH
43634: LD_VAR 0 6
43638: ST_TO_ADDR
// end ; end ;
43639: GO 43553
43641: POP
43642: POP
// result := hex ;
43643: LD_ADDR_VAR 0 3
43647: PUSH
43648: LD_VAR 0 8
43652: ST_TO_ADDR
// end ;
43653: LD_VAR 0 3
43657: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43658: LD_INT 0
43660: PPUSH
43661: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43662: LD_VAR 0 1
43666: NOT
43667: PUSH
43668: LD_VAR 0 1
43672: PUSH
43673: LD_INT 21
43675: PUSH
43676: LD_INT 2
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 23
43685: PUSH
43686: LD_INT 2
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PPUSH
43697: CALL_OW 69
43701: IN
43702: NOT
43703: OR
43704: IFFALSE 43708
// exit ;
43706: GO 43755
// for i = 1 to 3 do
43708: LD_ADDR_VAR 0 3
43712: PUSH
43713: DOUBLE
43714: LD_INT 1
43716: DEC
43717: ST_TO_ADDR
43718: LD_INT 3
43720: PUSH
43721: FOR_TO
43722: IFFALSE 43753
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43724: LD_VAR 0 1
43728: PPUSH
43729: CALL_OW 250
43733: PPUSH
43734: LD_VAR 0 1
43738: PPUSH
43739: CALL_OW 251
43743: PPUSH
43744: LD_INT 1
43746: PPUSH
43747: CALL_OW 453
43751: GO 43721
43753: POP
43754: POP
// end ;
43755: LD_VAR 0 2
43759: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43760: LD_INT 0
43762: PPUSH
43763: PPUSH
43764: PPUSH
43765: PPUSH
43766: PPUSH
43767: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
43768: LD_VAR 0 1
43772: NOT
43773: PUSH
43774: LD_VAR 0 2
43778: NOT
43779: OR
43780: PUSH
43781: LD_VAR 0 1
43785: PPUSH
43786: CALL_OW 314
43790: OR
43791: IFFALSE 43795
// exit ;
43793: GO 44262
// if GetLives ( i ) < 250 then
43795: LD_VAR 0 4
43799: PPUSH
43800: CALL_OW 256
43804: PUSH
43805: LD_INT 250
43807: LESS
43808: IFFALSE 43821
// begin ComAutodestruct ( i ) ;
43810: LD_VAR 0 4
43814: PPUSH
43815: CALL 43658 0 1
// exit ;
43819: GO 44262
// end ; x := GetX ( enemy_unit ) ;
43821: LD_ADDR_VAR 0 7
43825: PUSH
43826: LD_VAR 0 2
43830: PPUSH
43831: CALL_OW 250
43835: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43836: LD_ADDR_VAR 0 8
43840: PUSH
43841: LD_VAR 0 2
43845: PPUSH
43846: CALL_OW 251
43850: ST_TO_ADDR
// if not x or not y then
43851: LD_VAR 0 7
43855: NOT
43856: PUSH
43857: LD_VAR 0 8
43861: NOT
43862: OR
43863: IFFALSE 43867
// exit ;
43865: GO 44262
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
43867: LD_ADDR_VAR 0 6
43871: PUSH
43872: LD_VAR 0 7
43876: PPUSH
43877: LD_INT 0
43879: PPUSH
43880: LD_INT 4
43882: PPUSH
43883: CALL_OW 272
43887: PUSH
43888: LD_VAR 0 8
43892: PPUSH
43893: LD_INT 0
43895: PPUSH
43896: LD_INT 4
43898: PPUSH
43899: CALL_OW 273
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_VAR 0 7
43912: PPUSH
43913: LD_INT 1
43915: PPUSH
43916: LD_INT 4
43918: PPUSH
43919: CALL_OW 272
43923: PUSH
43924: LD_VAR 0 8
43928: PPUSH
43929: LD_INT 1
43931: PPUSH
43932: LD_INT 4
43934: PPUSH
43935: CALL_OW 273
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_VAR 0 7
43948: PPUSH
43949: LD_INT 2
43951: PPUSH
43952: LD_INT 4
43954: PPUSH
43955: CALL_OW 272
43959: PUSH
43960: LD_VAR 0 8
43964: PPUSH
43965: LD_INT 2
43967: PPUSH
43968: LD_INT 4
43970: PPUSH
43971: CALL_OW 273
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_VAR 0 7
43984: PPUSH
43985: LD_INT 3
43987: PPUSH
43988: LD_INT 4
43990: PPUSH
43991: CALL_OW 272
43995: PUSH
43996: LD_VAR 0 8
44000: PPUSH
44001: LD_INT 3
44003: PPUSH
44004: LD_INT 4
44006: PPUSH
44007: CALL_OW 273
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_VAR 0 7
44020: PPUSH
44021: LD_INT 4
44023: PPUSH
44024: LD_INT 4
44026: PPUSH
44027: CALL_OW 272
44031: PUSH
44032: LD_VAR 0 8
44036: PPUSH
44037: LD_INT 4
44039: PPUSH
44040: LD_INT 4
44042: PPUSH
44043: CALL_OW 273
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_VAR 0 7
44056: PPUSH
44057: LD_INT 5
44059: PPUSH
44060: LD_INT 4
44062: PPUSH
44063: CALL_OW 272
44067: PUSH
44068: LD_VAR 0 8
44072: PPUSH
44073: LD_INT 5
44075: PPUSH
44076: LD_INT 4
44078: PPUSH
44079: CALL_OW 273
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: ST_TO_ADDR
// for i = tmp downto 1 do
44096: LD_ADDR_VAR 0 4
44100: PUSH
44101: DOUBLE
44102: LD_VAR 0 6
44106: INC
44107: ST_TO_ADDR
44108: LD_INT 1
44110: PUSH
44111: FOR_DOWNTO
44112: IFFALSE 44213
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
44114: LD_VAR 0 6
44118: PUSH
44119: LD_VAR 0 4
44123: ARRAY
44124: PUSH
44125: LD_INT 1
44127: ARRAY
44128: PPUSH
44129: LD_VAR 0 6
44133: PUSH
44134: LD_VAR 0 4
44138: ARRAY
44139: PUSH
44140: LD_INT 2
44142: ARRAY
44143: PPUSH
44144: CALL_OW 488
44148: NOT
44149: PUSH
44150: LD_VAR 0 6
44154: PUSH
44155: LD_VAR 0 4
44159: ARRAY
44160: PUSH
44161: LD_INT 1
44163: ARRAY
44164: PPUSH
44165: LD_VAR 0 6
44169: PUSH
44170: LD_VAR 0 4
44174: ARRAY
44175: PUSH
44176: LD_INT 2
44178: ARRAY
44179: PPUSH
44180: CALL_OW 428
44184: PUSH
44185: LD_INT 0
44187: NONEQUAL
44188: OR
44189: IFFALSE 44211
// tmp := Delete ( tmp , i ) ;
44191: LD_ADDR_VAR 0 6
44195: PUSH
44196: LD_VAR 0 6
44200: PPUSH
44201: LD_VAR 0 4
44205: PPUSH
44206: CALL_OW 3
44210: ST_TO_ADDR
44211: GO 44111
44213: POP
44214: POP
// j := GetClosestHex ( unit , tmp ) ;
44215: LD_ADDR_VAR 0 5
44219: PUSH
44220: LD_VAR 0 1
44224: PPUSH
44225: LD_VAR 0 6
44229: PPUSH
44230: CALL 43506 0 2
44234: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
44235: LD_VAR 0 1
44239: PPUSH
44240: LD_VAR 0 5
44244: PUSH
44245: LD_INT 1
44247: ARRAY
44248: PPUSH
44249: LD_VAR 0 5
44253: PUSH
44254: LD_INT 2
44256: ARRAY
44257: PPUSH
44258: CALL_OW 111
// end ;
44262: LD_VAR 0 3
44266: RET
// export function PrepareApemanSoldier ( ) ; begin
44267: LD_INT 0
44269: PPUSH
// uc_nation := 0 ;
44270: LD_ADDR_OWVAR 21
44274: PUSH
44275: LD_INT 0
44277: ST_TO_ADDR
// hc_sex := sex_male ;
44278: LD_ADDR_OWVAR 27
44282: PUSH
44283: LD_INT 1
44285: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
44286: LD_ADDR_OWVAR 28
44290: PUSH
44291: LD_INT 15
44293: ST_TO_ADDR
// hc_gallery :=  ;
44294: LD_ADDR_OWVAR 33
44298: PUSH
44299: LD_STRING 
44301: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44302: LD_ADDR_OWVAR 31
44306: PUSH
44307: LD_INT 0
44309: PPUSH
44310: LD_INT 3
44312: PPUSH
44313: CALL_OW 12
44317: PUSH
44318: LD_INT 0
44320: PPUSH
44321: LD_INT 3
44323: PPUSH
44324: CALL_OW 12
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: LD_INT 0
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: ST_TO_ADDR
// end ;
44341: LD_VAR 0 1
44345: RET
// export function PrepareApemanEngineer ( ) ; begin
44346: LD_INT 0
44348: PPUSH
// uc_nation := 0 ;
44349: LD_ADDR_OWVAR 21
44353: PUSH
44354: LD_INT 0
44356: ST_TO_ADDR
// hc_sex := sex_male ;
44357: LD_ADDR_OWVAR 27
44361: PUSH
44362: LD_INT 1
44364: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
44365: LD_ADDR_OWVAR 28
44369: PUSH
44370: LD_INT 16
44372: ST_TO_ADDR
// hc_gallery :=  ;
44373: LD_ADDR_OWVAR 33
44377: PUSH
44378: LD_STRING 
44380: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44381: LD_ADDR_OWVAR 31
44385: PUSH
44386: LD_INT 0
44388: PPUSH
44389: LD_INT 3
44391: PPUSH
44392: CALL_OW 12
44396: PUSH
44397: LD_INT 0
44399: PPUSH
44400: LD_INT 3
44402: PPUSH
44403: CALL_OW 12
44407: PUSH
44408: LD_INT 0
44410: PUSH
44411: LD_INT 0
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: ST_TO_ADDR
// end ;
44420: LD_VAR 0 1
44424: RET
// export function PrepareApeman ( agressivity ) ; begin
44425: LD_INT 0
44427: PPUSH
// uc_side := 0 ;
44428: LD_ADDR_OWVAR 20
44432: PUSH
44433: LD_INT 0
44435: ST_TO_ADDR
// uc_nation := 0 ;
44436: LD_ADDR_OWVAR 21
44440: PUSH
44441: LD_INT 0
44443: ST_TO_ADDR
// hc_sex := sex_male ;
44444: LD_ADDR_OWVAR 27
44448: PUSH
44449: LD_INT 1
44451: ST_TO_ADDR
// hc_class := class_apeman ;
44452: LD_ADDR_OWVAR 28
44456: PUSH
44457: LD_INT 12
44459: ST_TO_ADDR
// hc_gallery :=  ;
44460: LD_ADDR_OWVAR 33
44464: PUSH
44465: LD_STRING 
44467: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44468: LD_ADDR_OWVAR 35
44472: PUSH
44473: LD_VAR 0 1
44477: NEG
44478: PPUSH
44479: LD_VAR 0 1
44483: PPUSH
44484: CALL_OW 12
44488: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44489: LD_ADDR_OWVAR 31
44493: PUSH
44494: LD_INT 0
44496: PPUSH
44497: LD_INT 3
44499: PPUSH
44500: CALL_OW 12
44504: PUSH
44505: LD_INT 0
44507: PPUSH
44508: LD_INT 3
44510: PPUSH
44511: CALL_OW 12
44515: PUSH
44516: LD_INT 0
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: ST_TO_ADDR
// end ;
44528: LD_VAR 0 2
44532: RET
// export function PrepareTiger ( agressivity ) ; begin
44533: LD_INT 0
44535: PPUSH
// uc_side := 0 ;
44536: LD_ADDR_OWVAR 20
44540: PUSH
44541: LD_INT 0
44543: ST_TO_ADDR
// uc_nation := 0 ;
44544: LD_ADDR_OWVAR 21
44548: PUSH
44549: LD_INT 0
44551: ST_TO_ADDR
// hc_class := class_tiger ;
44552: LD_ADDR_OWVAR 28
44556: PUSH
44557: LD_INT 14
44559: ST_TO_ADDR
// hc_gallery :=  ;
44560: LD_ADDR_OWVAR 33
44564: PUSH
44565: LD_STRING 
44567: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44568: LD_ADDR_OWVAR 35
44572: PUSH
44573: LD_VAR 0 1
44577: NEG
44578: PPUSH
44579: LD_VAR 0 1
44583: PPUSH
44584: CALL_OW 12
44588: ST_TO_ADDR
// end ;
44589: LD_VAR 0 2
44593: RET
// export function PrepareEnchidna ( ) ; begin
44594: LD_INT 0
44596: PPUSH
// uc_side := 0 ;
44597: LD_ADDR_OWVAR 20
44601: PUSH
44602: LD_INT 0
44604: ST_TO_ADDR
// uc_nation := 0 ;
44605: LD_ADDR_OWVAR 21
44609: PUSH
44610: LD_INT 0
44612: ST_TO_ADDR
// hc_class := class_baggie ;
44613: LD_ADDR_OWVAR 28
44617: PUSH
44618: LD_INT 13
44620: ST_TO_ADDR
// hc_gallery :=  ;
44621: LD_ADDR_OWVAR 33
44625: PUSH
44626: LD_STRING 
44628: ST_TO_ADDR
// end ;
44629: LD_VAR 0 1
44633: RET
// export function PrepareFrog ( ) ; begin
44634: LD_INT 0
44636: PPUSH
// uc_side := 0 ;
44637: LD_ADDR_OWVAR 20
44641: PUSH
44642: LD_INT 0
44644: ST_TO_ADDR
// uc_nation := 0 ;
44645: LD_ADDR_OWVAR 21
44649: PUSH
44650: LD_INT 0
44652: ST_TO_ADDR
// hc_class := class_frog ;
44653: LD_ADDR_OWVAR 28
44657: PUSH
44658: LD_INT 19
44660: ST_TO_ADDR
// hc_gallery :=  ;
44661: LD_ADDR_OWVAR 33
44665: PUSH
44666: LD_STRING 
44668: ST_TO_ADDR
// end ;
44669: LD_VAR 0 1
44673: RET
// export function PrepareFish ( ) ; begin
44674: LD_INT 0
44676: PPUSH
// uc_side := 0 ;
44677: LD_ADDR_OWVAR 20
44681: PUSH
44682: LD_INT 0
44684: ST_TO_ADDR
// uc_nation := 0 ;
44685: LD_ADDR_OWVAR 21
44689: PUSH
44690: LD_INT 0
44692: ST_TO_ADDR
// hc_class := class_fish ;
44693: LD_ADDR_OWVAR 28
44697: PUSH
44698: LD_INT 20
44700: ST_TO_ADDR
// hc_gallery :=  ;
44701: LD_ADDR_OWVAR 33
44705: PUSH
44706: LD_STRING 
44708: ST_TO_ADDR
// end ;
44709: LD_VAR 0 1
44713: RET
// export function PrepareBird ( ) ; begin
44714: LD_INT 0
44716: PPUSH
// uc_side := 0 ;
44717: LD_ADDR_OWVAR 20
44721: PUSH
44722: LD_INT 0
44724: ST_TO_ADDR
// uc_nation := 0 ;
44725: LD_ADDR_OWVAR 21
44729: PUSH
44730: LD_INT 0
44732: ST_TO_ADDR
// hc_class := class_phororhacos ;
44733: LD_ADDR_OWVAR 28
44737: PUSH
44738: LD_INT 18
44740: ST_TO_ADDR
// hc_gallery :=  ;
44741: LD_ADDR_OWVAR 33
44745: PUSH
44746: LD_STRING 
44748: ST_TO_ADDR
// end ;
44749: LD_VAR 0 1
44753: RET
// export function PrepareHorse ( ) ; begin
44754: LD_INT 0
44756: PPUSH
// uc_side := 0 ;
44757: LD_ADDR_OWVAR 20
44761: PUSH
44762: LD_INT 0
44764: ST_TO_ADDR
// uc_nation := 0 ;
44765: LD_ADDR_OWVAR 21
44769: PUSH
44770: LD_INT 0
44772: ST_TO_ADDR
// hc_class := class_horse ;
44773: LD_ADDR_OWVAR 28
44777: PUSH
44778: LD_INT 21
44780: ST_TO_ADDR
// hc_gallery :=  ;
44781: LD_ADDR_OWVAR 33
44785: PUSH
44786: LD_STRING 
44788: ST_TO_ADDR
// end ;
44789: LD_VAR 0 1
44793: RET
// export function PrepareMastodont ( ) ; begin
44794: LD_INT 0
44796: PPUSH
// uc_side := 0 ;
44797: LD_ADDR_OWVAR 20
44801: PUSH
44802: LD_INT 0
44804: ST_TO_ADDR
// uc_nation := 0 ;
44805: LD_ADDR_OWVAR 21
44809: PUSH
44810: LD_INT 0
44812: ST_TO_ADDR
// vc_chassis := class_mastodont ;
44813: LD_ADDR_OWVAR 37
44817: PUSH
44818: LD_INT 31
44820: ST_TO_ADDR
// vc_control := control_rider ;
44821: LD_ADDR_OWVAR 38
44825: PUSH
44826: LD_INT 4
44828: ST_TO_ADDR
// end ;
44829: LD_VAR 0 1
44833: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
44834: LD_INT 0
44836: PPUSH
44837: PPUSH
44838: PPUSH
// uc_side = 0 ;
44839: LD_ADDR_OWVAR 20
44843: PUSH
44844: LD_INT 0
44846: ST_TO_ADDR
// uc_nation = 0 ;
44847: LD_ADDR_OWVAR 21
44851: PUSH
44852: LD_INT 0
44854: ST_TO_ADDR
// InitHc_All ( ) ;
44855: CALL_OW 584
// InitVc ;
44859: CALL_OW 20
// if mastodonts then
44863: LD_VAR 0 6
44867: IFFALSE 44934
// for i = 1 to mastodonts do
44869: LD_ADDR_VAR 0 11
44873: PUSH
44874: DOUBLE
44875: LD_INT 1
44877: DEC
44878: ST_TO_ADDR
44879: LD_VAR 0 6
44883: PUSH
44884: FOR_TO
44885: IFFALSE 44932
// begin vc_chassis := 31 ;
44887: LD_ADDR_OWVAR 37
44891: PUSH
44892: LD_INT 31
44894: ST_TO_ADDR
// vc_control := control_rider ;
44895: LD_ADDR_OWVAR 38
44899: PUSH
44900: LD_INT 4
44902: ST_TO_ADDR
// animal := CreateVehicle ;
44903: LD_ADDR_VAR 0 12
44907: PUSH
44908: CALL_OW 45
44912: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44913: LD_VAR 0 12
44917: PPUSH
44918: LD_VAR 0 8
44922: PPUSH
44923: LD_INT 0
44925: PPUSH
44926: CALL 47062 0 3
// end ;
44930: GO 44884
44932: POP
44933: POP
// if horses then
44934: LD_VAR 0 5
44938: IFFALSE 45005
// for i = 1 to horses do
44940: LD_ADDR_VAR 0 11
44944: PUSH
44945: DOUBLE
44946: LD_INT 1
44948: DEC
44949: ST_TO_ADDR
44950: LD_VAR 0 5
44954: PUSH
44955: FOR_TO
44956: IFFALSE 45003
// begin hc_class := 21 ;
44958: LD_ADDR_OWVAR 28
44962: PUSH
44963: LD_INT 21
44965: ST_TO_ADDR
// hc_gallery :=  ;
44966: LD_ADDR_OWVAR 33
44970: PUSH
44971: LD_STRING 
44973: ST_TO_ADDR
// animal := CreateHuman ;
44974: LD_ADDR_VAR 0 12
44978: PUSH
44979: CALL_OW 44
44983: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44984: LD_VAR 0 12
44988: PPUSH
44989: LD_VAR 0 8
44993: PPUSH
44994: LD_INT 0
44996: PPUSH
44997: CALL 47062 0 3
// end ;
45001: GO 44955
45003: POP
45004: POP
// if birds then
45005: LD_VAR 0 1
45009: IFFALSE 45076
// for i = 1 to birds do
45011: LD_ADDR_VAR 0 11
45015: PUSH
45016: DOUBLE
45017: LD_INT 1
45019: DEC
45020: ST_TO_ADDR
45021: LD_VAR 0 1
45025: PUSH
45026: FOR_TO
45027: IFFALSE 45074
// begin hc_class = 18 ;
45029: LD_ADDR_OWVAR 28
45033: PUSH
45034: LD_INT 18
45036: ST_TO_ADDR
// hc_gallery =  ;
45037: LD_ADDR_OWVAR 33
45041: PUSH
45042: LD_STRING 
45044: ST_TO_ADDR
// animal := CreateHuman ;
45045: LD_ADDR_VAR 0 12
45049: PUSH
45050: CALL_OW 44
45054: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45055: LD_VAR 0 12
45059: PPUSH
45060: LD_VAR 0 8
45064: PPUSH
45065: LD_INT 0
45067: PPUSH
45068: CALL 47062 0 3
// end ;
45072: GO 45026
45074: POP
45075: POP
// if tigers then
45076: LD_VAR 0 2
45080: IFFALSE 45164
// for i = 1 to tigers do
45082: LD_ADDR_VAR 0 11
45086: PUSH
45087: DOUBLE
45088: LD_INT 1
45090: DEC
45091: ST_TO_ADDR
45092: LD_VAR 0 2
45096: PUSH
45097: FOR_TO
45098: IFFALSE 45162
// begin hc_class = class_tiger ;
45100: LD_ADDR_OWVAR 28
45104: PUSH
45105: LD_INT 14
45107: ST_TO_ADDR
// hc_gallery =  ;
45108: LD_ADDR_OWVAR 33
45112: PUSH
45113: LD_STRING 
45115: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45116: LD_ADDR_OWVAR 35
45120: PUSH
45121: LD_INT 7
45123: NEG
45124: PPUSH
45125: LD_INT 7
45127: PPUSH
45128: CALL_OW 12
45132: ST_TO_ADDR
// animal := CreateHuman ;
45133: LD_ADDR_VAR 0 12
45137: PUSH
45138: CALL_OW 44
45142: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45143: LD_VAR 0 12
45147: PPUSH
45148: LD_VAR 0 8
45152: PPUSH
45153: LD_INT 0
45155: PPUSH
45156: CALL 47062 0 3
// end ;
45160: GO 45097
45162: POP
45163: POP
// if apemans then
45164: LD_VAR 0 3
45168: IFFALSE 45291
// for i = 1 to apemans do
45170: LD_ADDR_VAR 0 11
45174: PUSH
45175: DOUBLE
45176: LD_INT 1
45178: DEC
45179: ST_TO_ADDR
45180: LD_VAR 0 3
45184: PUSH
45185: FOR_TO
45186: IFFALSE 45289
// begin hc_class = class_apeman ;
45188: LD_ADDR_OWVAR 28
45192: PUSH
45193: LD_INT 12
45195: ST_TO_ADDR
// hc_gallery =  ;
45196: LD_ADDR_OWVAR 33
45200: PUSH
45201: LD_STRING 
45203: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
45204: LD_ADDR_OWVAR 35
45208: PUSH
45209: LD_INT 2
45211: NEG
45212: PPUSH
45213: LD_INT 2
45215: PPUSH
45216: CALL_OW 12
45220: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45221: LD_ADDR_OWVAR 31
45225: PUSH
45226: LD_INT 1
45228: PPUSH
45229: LD_INT 3
45231: PPUSH
45232: CALL_OW 12
45236: PUSH
45237: LD_INT 1
45239: PPUSH
45240: LD_INT 3
45242: PPUSH
45243: CALL_OW 12
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: ST_TO_ADDR
// animal := CreateHuman ;
45260: LD_ADDR_VAR 0 12
45264: PUSH
45265: CALL_OW 44
45269: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45270: LD_VAR 0 12
45274: PPUSH
45275: LD_VAR 0 8
45279: PPUSH
45280: LD_INT 0
45282: PPUSH
45283: CALL 47062 0 3
// end ;
45287: GO 45185
45289: POP
45290: POP
// if enchidnas then
45291: LD_VAR 0 4
45295: IFFALSE 45362
// for i = 1 to enchidnas do
45297: LD_ADDR_VAR 0 11
45301: PUSH
45302: DOUBLE
45303: LD_INT 1
45305: DEC
45306: ST_TO_ADDR
45307: LD_VAR 0 4
45311: PUSH
45312: FOR_TO
45313: IFFALSE 45360
// begin hc_class = 13 ;
45315: LD_ADDR_OWVAR 28
45319: PUSH
45320: LD_INT 13
45322: ST_TO_ADDR
// hc_gallery =  ;
45323: LD_ADDR_OWVAR 33
45327: PUSH
45328: LD_STRING 
45330: ST_TO_ADDR
// animal := CreateHuman ;
45331: LD_ADDR_VAR 0 12
45335: PUSH
45336: CALL_OW 44
45340: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45341: LD_VAR 0 12
45345: PPUSH
45346: LD_VAR 0 8
45350: PPUSH
45351: LD_INT 0
45353: PPUSH
45354: CALL 47062 0 3
// end ;
45358: GO 45312
45360: POP
45361: POP
// if fishes then
45362: LD_VAR 0 7
45366: IFFALSE 45433
// for i = 1 to fishes do
45368: LD_ADDR_VAR 0 11
45372: PUSH
45373: DOUBLE
45374: LD_INT 1
45376: DEC
45377: ST_TO_ADDR
45378: LD_VAR 0 7
45382: PUSH
45383: FOR_TO
45384: IFFALSE 45431
// begin hc_class = 20 ;
45386: LD_ADDR_OWVAR 28
45390: PUSH
45391: LD_INT 20
45393: ST_TO_ADDR
// hc_gallery =  ;
45394: LD_ADDR_OWVAR 33
45398: PUSH
45399: LD_STRING 
45401: ST_TO_ADDR
// animal := CreateHuman ;
45402: LD_ADDR_VAR 0 12
45406: PUSH
45407: CALL_OW 44
45411: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45412: LD_VAR 0 12
45416: PPUSH
45417: LD_VAR 0 9
45421: PPUSH
45422: LD_INT 0
45424: PPUSH
45425: CALL 47062 0 3
// end ;
45429: GO 45383
45431: POP
45432: POP
// end ;
45433: LD_VAR 0 10
45437: RET
// export function WantHeal ( sci , unit ) ; begin
45438: LD_INT 0
45440: PPUSH
// if GetTaskList ( sci ) > 0 then
45441: LD_VAR 0 1
45445: PPUSH
45446: CALL_OW 437
45450: PUSH
45451: LD_INT 0
45453: GREATER
45454: IFFALSE 45524
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45456: LD_VAR 0 1
45460: PPUSH
45461: CALL_OW 437
45465: PUSH
45466: LD_INT 1
45468: ARRAY
45469: PUSH
45470: LD_INT 1
45472: ARRAY
45473: PUSH
45474: LD_STRING l
45476: EQUAL
45477: PUSH
45478: LD_VAR 0 1
45482: PPUSH
45483: CALL_OW 437
45487: PUSH
45488: LD_INT 1
45490: ARRAY
45491: PUSH
45492: LD_INT 4
45494: ARRAY
45495: PUSH
45496: LD_VAR 0 2
45500: EQUAL
45501: AND
45502: IFFALSE 45514
// result := true else
45504: LD_ADDR_VAR 0 3
45508: PUSH
45509: LD_INT 1
45511: ST_TO_ADDR
45512: GO 45522
// result := false ;
45514: LD_ADDR_VAR 0 3
45518: PUSH
45519: LD_INT 0
45521: ST_TO_ADDR
// end else
45522: GO 45532
// result := false ;
45524: LD_ADDR_VAR 0 3
45528: PUSH
45529: LD_INT 0
45531: ST_TO_ADDR
// end ;
45532: LD_VAR 0 3
45536: RET
// export function HealTarget ( sci ) ; begin
45537: LD_INT 0
45539: PPUSH
// if not sci then
45540: LD_VAR 0 1
45544: NOT
45545: IFFALSE 45549
// exit ;
45547: GO 45614
// result := 0 ;
45549: LD_ADDR_VAR 0 2
45553: PUSH
45554: LD_INT 0
45556: ST_TO_ADDR
// if GetTaskList ( sci ) then
45557: LD_VAR 0 1
45561: PPUSH
45562: CALL_OW 437
45566: IFFALSE 45614
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45568: LD_VAR 0 1
45572: PPUSH
45573: CALL_OW 437
45577: PUSH
45578: LD_INT 1
45580: ARRAY
45581: PUSH
45582: LD_INT 1
45584: ARRAY
45585: PUSH
45586: LD_STRING l
45588: EQUAL
45589: IFFALSE 45614
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45591: LD_ADDR_VAR 0 2
45595: PUSH
45596: LD_VAR 0 1
45600: PPUSH
45601: CALL_OW 437
45605: PUSH
45606: LD_INT 1
45608: ARRAY
45609: PUSH
45610: LD_INT 4
45612: ARRAY
45613: ST_TO_ADDR
// end ;
45614: LD_VAR 0 2
45618: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
45619: LD_INT 0
45621: PPUSH
45622: PPUSH
45623: PPUSH
45624: PPUSH
// if not base_units then
45625: LD_VAR 0 1
45629: NOT
45630: IFFALSE 45634
// exit ;
45632: GO 45721
// result := false ;
45634: LD_ADDR_VAR 0 2
45638: PUSH
45639: LD_INT 0
45641: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
45642: LD_ADDR_VAR 0 5
45646: PUSH
45647: LD_VAR 0 1
45651: PPUSH
45652: LD_INT 21
45654: PUSH
45655: LD_INT 3
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PPUSH
45662: CALL_OW 72
45666: ST_TO_ADDR
// if not tmp then
45667: LD_VAR 0 5
45671: NOT
45672: IFFALSE 45676
// exit ;
45674: GO 45721
// for i in tmp do
45676: LD_ADDR_VAR 0 3
45680: PUSH
45681: LD_VAR 0 5
45685: PUSH
45686: FOR_IN
45687: IFFALSE 45719
// begin result := EnemyInRange ( i , 22 ) ;
45689: LD_ADDR_VAR 0 2
45693: PUSH
45694: LD_VAR 0 3
45698: PPUSH
45699: LD_INT 22
45701: PPUSH
45702: CALL 43308 0 2
45706: ST_TO_ADDR
// if result then
45707: LD_VAR 0 2
45711: IFFALSE 45717
// exit ;
45713: POP
45714: POP
45715: GO 45721
// end ;
45717: GO 45686
45719: POP
45720: POP
// end ;
45721: LD_VAR 0 2
45725: RET
// export function FilterByTag ( units , tag ) ; begin
45726: LD_INT 0
45728: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
45729: LD_ADDR_VAR 0 3
45733: PUSH
45734: LD_VAR 0 1
45738: PPUSH
45739: LD_INT 120
45741: PUSH
45742: LD_VAR 0 2
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PPUSH
45751: CALL_OW 72
45755: ST_TO_ADDR
// end ;
45756: LD_VAR 0 3
45760: RET
// export function IsDriver ( un ) ; begin
45761: LD_INT 0
45763: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
45764: LD_ADDR_VAR 0 2
45768: PUSH
45769: LD_VAR 0 1
45773: PUSH
45774: LD_INT 55
45776: PUSH
45777: EMPTY
45778: LIST
45779: PPUSH
45780: CALL_OW 69
45784: IN
45785: ST_TO_ADDR
// end ;
45786: LD_VAR 0 2
45790: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
45791: LD_INT 0
45793: PPUSH
45794: PPUSH
// list := [ ] ;
45795: LD_ADDR_VAR 0 5
45799: PUSH
45800: EMPTY
45801: ST_TO_ADDR
// case d of 0 :
45802: LD_VAR 0 3
45806: PUSH
45807: LD_INT 0
45809: DOUBLE
45810: EQUAL
45811: IFTRUE 45815
45813: GO 45948
45815: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
45816: LD_ADDR_VAR 0 5
45820: PUSH
45821: LD_VAR 0 1
45825: PUSH
45826: LD_INT 4
45828: MINUS
45829: PUSH
45830: LD_VAR 0 2
45834: PUSH
45835: LD_INT 4
45837: MINUS
45838: PUSH
45839: LD_INT 2
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: LIST
45846: PUSH
45847: LD_VAR 0 1
45851: PUSH
45852: LD_INT 3
45854: MINUS
45855: PUSH
45856: LD_VAR 0 2
45860: PUSH
45861: LD_INT 1
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: LIST
45868: PUSH
45869: LD_VAR 0 1
45873: PUSH
45874: LD_INT 4
45876: PLUS
45877: PUSH
45878: LD_VAR 0 2
45882: PUSH
45883: LD_INT 4
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: LIST
45890: PUSH
45891: LD_VAR 0 1
45895: PUSH
45896: LD_INT 3
45898: PLUS
45899: PUSH
45900: LD_VAR 0 2
45904: PUSH
45905: LD_INT 3
45907: PLUS
45908: PUSH
45909: LD_INT 5
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: LIST
45916: PUSH
45917: LD_VAR 0 1
45921: PUSH
45922: LD_VAR 0 2
45926: PUSH
45927: LD_INT 4
45929: PLUS
45930: PUSH
45931: LD_INT 0
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: LIST
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: ST_TO_ADDR
// end ; 1 :
45946: GO 46646
45948: LD_INT 1
45950: DOUBLE
45951: EQUAL
45952: IFTRUE 45956
45954: GO 46089
45956: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
45957: LD_ADDR_VAR 0 5
45961: PUSH
45962: LD_VAR 0 1
45966: PUSH
45967: LD_VAR 0 2
45971: PUSH
45972: LD_INT 4
45974: MINUS
45975: PUSH
45976: LD_INT 3
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: LIST
45983: PUSH
45984: LD_VAR 0 1
45988: PUSH
45989: LD_INT 3
45991: MINUS
45992: PUSH
45993: LD_VAR 0 2
45997: PUSH
45998: LD_INT 3
46000: MINUS
46001: PUSH
46002: LD_INT 2
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: LIST
46009: PUSH
46010: LD_VAR 0 1
46014: PUSH
46015: LD_INT 4
46017: MINUS
46018: PUSH
46019: LD_VAR 0 2
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: LIST
46031: PUSH
46032: LD_VAR 0 1
46036: PUSH
46037: LD_VAR 0 2
46041: PUSH
46042: LD_INT 3
46044: PLUS
46045: PUSH
46046: LD_INT 0
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: LIST
46053: PUSH
46054: LD_VAR 0 1
46058: PUSH
46059: LD_INT 4
46061: PLUS
46062: PUSH
46063: LD_VAR 0 2
46067: PUSH
46068: LD_INT 4
46070: PLUS
46071: PUSH
46072: LD_INT 5
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: LIST
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: ST_TO_ADDR
// end ; 2 :
46087: GO 46646
46089: LD_INT 2
46091: DOUBLE
46092: EQUAL
46093: IFTRUE 46097
46095: GO 46226
46097: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
46098: LD_ADDR_VAR 0 5
46102: PUSH
46103: LD_VAR 0 1
46107: PUSH
46108: LD_VAR 0 2
46112: PUSH
46113: LD_INT 3
46115: MINUS
46116: PUSH
46117: LD_INT 3
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: LIST
46124: PUSH
46125: LD_VAR 0 1
46129: PUSH
46130: LD_INT 4
46132: PLUS
46133: PUSH
46134: LD_VAR 0 2
46138: PUSH
46139: LD_INT 4
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: LIST
46146: PUSH
46147: LD_VAR 0 1
46151: PUSH
46152: LD_VAR 0 2
46156: PUSH
46157: LD_INT 4
46159: PLUS
46160: PUSH
46161: LD_INT 0
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: LIST
46168: PUSH
46169: LD_VAR 0 1
46173: PUSH
46174: LD_INT 3
46176: MINUS
46177: PUSH
46178: LD_VAR 0 2
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: LIST
46190: PUSH
46191: LD_VAR 0 1
46195: PUSH
46196: LD_INT 4
46198: MINUS
46199: PUSH
46200: LD_VAR 0 2
46204: PUSH
46205: LD_INT 4
46207: MINUS
46208: PUSH
46209: LD_INT 2
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: LIST
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: ST_TO_ADDR
// end ; 3 :
46224: GO 46646
46226: LD_INT 3
46228: DOUBLE
46229: EQUAL
46230: IFTRUE 46234
46232: GO 46367
46234: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
46235: LD_ADDR_VAR 0 5
46239: PUSH
46240: LD_VAR 0 1
46244: PUSH
46245: LD_INT 3
46247: PLUS
46248: PUSH
46249: LD_VAR 0 2
46253: PUSH
46254: LD_INT 4
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: LIST
46261: PUSH
46262: LD_VAR 0 1
46266: PUSH
46267: LD_INT 4
46269: PLUS
46270: PUSH
46271: LD_VAR 0 2
46275: PUSH
46276: LD_INT 4
46278: PLUS
46279: PUSH
46280: LD_INT 5
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: LIST
46287: PUSH
46288: LD_VAR 0 1
46292: PUSH
46293: LD_INT 4
46295: MINUS
46296: PUSH
46297: LD_VAR 0 2
46301: PUSH
46302: LD_INT 1
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: LIST
46309: PUSH
46310: LD_VAR 0 1
46314: PUSH
46315: LD_VAR 0 2
46319: PUSH
46320: LD_INT 4
46322: MINUS
46323: PUSH
46324: LD_INT 3
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: LIST
46331: PUSH
46332: LD_VAR 0 1
46336: PUSH
46337: LD_INT 3
46339: MINUS
46340: PUSH
46341: LD_VAR 0 2
46345: PUSH
46346: LD_INT 3
46348: MINUS
46349: PUSH
46350: LD_INT 2
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: LIST
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: ST_TO_ADDR
// end ; 4 :
46365: GO 46646
46367: LD_INT 4
46369: DOUBLE
46370: EQUAL
46371: IFTRUE 46375
46373: GO 46508
46375: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
46376: LD_ADDR_VAR 0 5
46380: PUSH
46381: LD_VAR 0 1
46385: PUSH
46386: LD_VAR 0 2
46390: PUSH
46391: LD_INT 4
46393: PLUS
46394: PUSH
46395: LD_INT 0
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: LIST
46402: PUSH
46403: LD_VAR 0 1
46407: PUSH
46408: LD_INT 3
46410: PLUS
46411: PUSH
46412: LD_VAR 0 2
46416: PUSH
46417: LD_INT 3
46419: PLUS
46420: PUSH
46421: LD_INT 5
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: LIST
46428: PUSH
46429: LD_VAR 0 1
46433: PUSH
46434: LD_INT 4
46436: PLUS
46437: PUSH
46438: LD_VAR 0 2
46442: PUSH
46443: LD_INT 4
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: LIST
46450: PUSH
46451: LD_VAR 0 1
46455: PUSH
46456: LD_VAR 0 2
46460: PUSH
46461: LD_INT 3
46463: MINUS
46464: PUSH
46465: LD_INT 3
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: LIST
46472: PUSH
46473: LD_VAR 0 1
46477: PUSH
46478: LD_INT 4
46480: MINUS
46481: PUSH
46482: LD_VAR 0 2
46486: PUSH
46487: LD_INT 4
46489: MINUS
46490: PUSH
46491: LD_INT 2
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: LIST
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: ST_TO_ADDR
// end ; 5 :
46506: GO 46646
46508: LD_INT 5
46510: DOUBLE
46511: EQUAL
46512: IFTRUE 46516
46514: GO 46645
46516: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
46517: LD_ADDR_VAR 0 5
46521: PUSH
46522: LD_VAR 0 1
46526: PUSH
46527: LD_INT 4
46529: MINUS
46530: PUSH
46531: LD_VAR 0 2
46535: PUSH
46536: LD_INT 1
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: LIST
46543: PUSH
46544: LD_VAR 0 1
46548: PUSH
46549: LD_VAR 0 2
46553: PUSH
46554: LD_INT 4
46556: MINUS
46557: PUSH
46558: LD_INT 3
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: LIST
46565: PUSH
46566: LD_VAR 0 1
46570: PUSH
46571: LD_INT 4
46573: PLUS
46574: PUSH
46575: LD_VAR 0 2
46579: PUSH
46580: LD_INT 4
46582: PLUS
46583: PUSH
46584: LD_INT 5
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: LIST
46591: PUSH
46592: LD_VAR 0 1
46596: PUSH
46597: LD_INT 3
46599: PLUS
46600: PUSH
46601: LD_VAR 0 2
46605: PUSH
46606: LD_INT 4
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: LIST
46613: PUSH
46614: LD_VAR 0 1
46618: PUSH
46619: LD_VAR 0 2
46623: PUSH
46624: LD_INT 3
46626: PLUS
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: LIST
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: ST_TO_ADDR
// end ; end ;
46643: GO 46646
46645: POP
// result := list ;
46646: LD_ADDR_VAR 0 4
46650: PUSH
46651: LD_VAR 0 5
46655: ST_TO_ADDR
// end ;
46656: LD_VAR 0 4
46660: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
46661: LD_INT 0
46663: PPUSH
46664: PPUSH
46665: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
46666: LD_VAR 0 1
46670: NOT
46671: PUSH
46672: LD_VAR 0 2
46676: PUSH
46677: LD_INT 1
46679: PUSH
46680: LD_INT 2
46682: PUSH
46683: LD_INT 3
46685: PUSH
46686: LD_INT 4
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: IN
46695: NOT
46696: OR
46697: IFFALSE 46701
// exit ;
46699: GO 46784
// tmp := [ ] ;
46701: LD_ADDR_VAR 0 5
46705: PUSH
46706: EMPTY
46707: ST_TO_ADDR
// for i in units do
46708: LD_ADDR_VAR 0 4
46712: PUSH
46713: LD_VAR 0 1
46717: PUSH
46718: FOR_IN
46719: IFFALSE 46753
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
46721: LD_ADDR_VAR 0 5
46725: PUSH
46726: LD_VAR 0 5
46730: PPUSH
46731: LD_VAR 0 4
46735: PPUSH
46736: LD_VAR 0 2
46740: PPUSH
46741: CALL_OW 259
46745: PPUSH
46746: CALL 48144 0 2
46750: ST_TO_ADDR
46751: GO 46718
46753: POP
46754: POP
// if not tmp then
46755: LD_VAR 0 5
46759: NOT
46760: IFFALSE 46764
// exit ;
46762: GO 46784
// result := SortListByListDesc ( units , tmp ) ;
46764: LD_ADDR_VAR 0 3
46768: PUSH
46769: LD_VAR 0 1
46773: PPUSH
46774: LD_VAR 0 5
46778: PPUSH
46779: CALL_OW 77
46783: ST_TO_ADDR
// end ;
46784: LD_VAR 0 3
46788: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
46789: LD_INT 0
46791: PPUSH
46792: PPUSH
46793: PPUSH
// result := false ;
46794: LD_ADDR_VAR 0 3
46798: PUSH
46799: LD_INT 0
46801: ST_TO_ADDR
// if not building then
46802: LD_VAR 0 2
46806: NOT
46807: IFFALSE 46811
// exit ;
46809: GO 46949
// x := GetX ( building ) ;
46811: LD_ADDR_VAR 0 4
46815: PUSH
46816: LD_VAR 0 2
46820: PPUSH
46821: CALL_OW 250
46825: ST_TO_ADDR
// y := GetY ( building ) ;
46826: LD_ADDR_VAR 0 5
46830: PUSH
46831: LD_VAR 0 2
46835: PPUSH
46836: CALL_OW 251
46840: ST_TO_ADDR
// if not x or not y then
46841: LD_VAR 0 4
46845: NOT
46846: PUSH
46847: LD_VAR 0 5
46851: NOT
46852: OR
46853: IFFALSE 46857
// exit ;
46855: GO 46949
// if GetTaskList ( unit ) then
46857: LD_VAR 0 1
46861: PPUSH
46862: CALL_OW 437
46866: IFFALSE 46949
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46868: LD_STRING e
46870: PUSH
46871: LD_VAR 0 1
46875: PPUSH
46876: CALL_OW 437
46880: PUSH
46881: LD_INT 1
46883: ARRAY
46884: PUSH
46885: LD_INT 1
46887: ARRAY
46888: EQUAL
46889: PUSH
46890: LD_VAR 0 4
46894: PUSH
46895: LD_VAR 0 1
46899: PPUSH
46900: CALL_OW 437
46904: PUSH
46905: LD_INT 1
46907: ARRAY
46908: PUSH
46909: LD_INT 2
46911: ARRAY
46912: EQUAL
46913: AND
46914: PUSH
46915: LD_VAR 0 5
46919: PUSH
46920: LD_VAR 0 1
46924: PPUSH
46925: CALL_OW 437
46929: PUSH
46930: LD_INT 1
46932: ARRAY
46933: PUSH
46934: LD_INT 3
46936: ARRAY
46937: EQUAL
46938: AND
46939: IFFALSE 46949
// result := true end ;
46941: LD_ADDR_VAR 0 3
46945: PUSH
46946: LD_INT 1
46948: ST_TO_ADDR
// end ;
46949: LD_VAR 0 3
46953: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
46954: LD_INT 0
46956: PPUSH
// result := false ;
46957: LD_ADDR_VAR 0 4
46961: PUSH
46962: LD_INT 0
46964: ST_TO_ADDR
// if GetTaskList ( unit ) then
46965: LD_VAR 0 1
46969: PPUSH
46970: CALL_OW 437
46974: IFFALSE 47057
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46976: LD_STRING M
46978: PUSH
46979: LD_VAR 0 1
46983: PPUSH
46984: CALL_OW 437
46988: PUSH
46989: LD_INT 1
46991: ARRAY
46992: PUSH
46993: LD_INT 1
46995: ARRAY
46996: EQUAL
46997: PUSH
46998: LD_VAR 0 2
47002: PUSH
47003: LD_VAR 0 1
47007: PPUSH
47008: CALL_OW 437
47012: PUSH
47013: LD_INT 1
47015: ARRAY
47016: PUSH
47017: LD_INT 2
47019: ARRAY
47020: EQUAL
47021: AND
47022: PUSH
47023: LD_VAR 0 3
47027: PUSH
47028: LD_VAR 0 1
47032: PPUSH
47033: CALL_OW 437
47037: PUSH
47038: LD_INT 1
47040: ARRAY
47041: PUSH
47042: LD_INT 3
47044: ARRAY
47045: EQUAL
47046: AND
47047: IFFALSE 47057
// result := true ;
47049: LD_ADDR_VAR 0 4
47053: PUSH
47054: LD_INT 1
47056: ST_TO_ADDR
// end ; end ;
47057: LD_VAR 0 4
47061: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
47062: LD_INT 0
47064: PPUSH
47065: PPUSH
47066: PPUSH
47067: PPUSH
// if not unit or not area then
47068: LD_VAR 0 1
47072: NOT
47073: PUSH
47074: LD_VAR 0 2
47078: NOT
47079: OR
47080: IFFALSE 47084
// exit ;
47082: GO 47247
// tmp := AreaToList ( area , i ) ;
47084: LD_ADDR_VAR 0 6
47088: PUSH
47089: LD_VAR 0 2
47093: PPUSH
47094: LD_VAR 0 5
47098: PPUSH
47099: CALL_OW 517
47103: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
47104: LD_ADDR_VAR 0 5
47108: PUSH
47109: DOUBLE
47110: LD_INT 1
47112: DEC
47113: ST_TO_ADDR
47114: LD_VAR 0 6
47118: PUSH
47119: LD_INT 1
47121: ARRAY
47122: PUSH
47123: FOR_TO
47124: IFFALSE 47245
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
47126: LD_ADDR_VAR 0 7
47130: PUSH
47131: LD_VAR 0 6
47135: PUSH
47136: LD_INT 1
47138: ARRAY
47139: PUSH
47140: LD_VAR 0 5
47144: ARRAY
47145: PUSH
47146: LD_VAR 0 6
47150: PUSH
47151: LD_INT 2
47153: ARRAY
47154: PUSH
47155: LD_VAR 0 5
47159: ARRAY
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
47165: LD_INT 92
47167: PUSH
47168: LD_VAR 0 7
47172: PUSH
47173: LD_INT 1
47175: ARRAY
47176: PUSH
47177: LD_VAR 0 7
47181: PUSH
47182: LD_INT 2
47184: ARRAY
47185: PUSH
47186: LD_INT 3
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: PPUSH
47195: CALL_OW 69
47199: PUSH
47200: LD_INT 0
47202: EQUAL
47203: IFFALSE 47243
// begin PlaceUnitArea ( unit , area , mode ) ;
47205: LD_VAR 0 1
47209: PPUSH
47210: LD_VAR 0 2
47214: PPUSH
47215: LD_VAR 0 3
47219: PPUSH
47220: CALL_OW 49
// result := IsPlaced ( unit ) ;
47224: LD_ADDR_VAR 0 4
47228: PUSH
47229: LD_VAR 0 1
47233: PPUSH
47234: CALL_OW 305
47238: ST_TO_ADDR
// exit ;
47239: POP
47240: POP
47241: GO 47247
// end ; end ;
47243: GO 47123
47245: POP
47246: POP
// end ;
47247: LD_VAR 0 4
47251: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
47252: LD_INT 0
47254: PPUSH
47255: PPUSH
47256: PPUSH
// if not side or side > 8 then
47257: LD_VAR 0 1
47261: NOT
47262: PUSH
47263: LD_VAR 0 1
47267: PUSH
47268: LD_INT 8
47270: GREATER
47271: OR
47272: IFFALSE 47276
// exit ;
47274: GO 47463
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
47276: LD_ADDR_VAR 0 4
47280: PUSH
47281: LD_INT 22
47283: PUSH
47284: LD_VAR 0 1
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 21
47295: PUSH
47296: LD_INT 3
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PPUSH
47307: CALL_OW 69
47311: ST_TO_ADDR
// if not tmp then
47312: LD_VAR 0 4
47316: NOT
47317: IFFALSE 47321
// exit ;
47319: GO 47463
// enable_addtolog := true ;
47321: LD_ADDR_OWVAR 81
47325: PUSH
47326: LD_INT 1
47328: ST_TO_ADDR
// AddToLog ( [ ) ;
47329: LD_STRING [
47331: PPUSH
47332: CALL_OW 561
// for i in tmp do
47336: LD_ADDR_VAR 0 3
47340: PUSH
47341: LD_VAR 0 4
47345: PUSH
47346: FOR_IN
47347: IFFALSE 47454
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
47349: LD_STRING [
47351: PUSH
47352: LD_VAR 0 3
47356: PPUSH
47357: CALL_OW 266
47361: STR
47362: PUSH
47363: LD_STRING , 
47365: STR
47366: PUSH
47367: LD_VAR 0 3
47371: PPUSH
47372: CALL_OW 250
47376: STR
47377: PUSH
47378: LD_STRING , 
47380: STR
47381: PUSH
47382: LD_VAR 0 3
47386: PPUSH
47387: CALL_OW 251
47391: STR
47392: PUSH
47393: LD_STRING , 
47395: STR
47396: PUSH
47397: LD_VAR 0 3
47401: PPUSH
47402: CALL_OW 254
47406: STR
47407: PUSH
47408: LD_STRING , 
47410: STR
47411: PUSH
47412: LD_VAR 0 3
47416: PPUSH
47417: LD_INT 1
47419: PPUSH
47420: CALL_OW 268
47424: STR
47425: PUSH
47426: LD_STRING , 
47428: STR
47429: PUSH
47430: LD_VAR 0 3
47434: PPUSH
47435: LD_INT 2
47437: PPUSH
47438: CALL_OW 268
47442: STR
47443: PUSH
47444: LD_STRING ],
47446: STR
47447: PPUSH
47448: CALL_OW 561
// end ;
47452: GO 47346
47454: POP
47455: POP
// AddToLog ( ]; ) ;
47456: LD_STRING ];
47458: PPUSH
47459: CALL_OW 561
// end ;
47463: LD_VAR 0 2
47467: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
47468: LD_INT 0
47470: PPUSH
47471: PPUSH
47472: PPUSH
47473: PPUSH
47474: PPUSH
// if not area or not rate or not max then
47475: LD_VAR 0 1
47479: NOT
47480: PUSH
47481: LD_VAR 0 2
47485: NOT
47486: OR
47487: PUSH
47488: LD_VAR 0 4
47492: NOT
47493: OR
47494: IFFALSE 47498
// exit ;
47496: GO 47687
// while 1 do
47498: LD_INT 1
47500: IFFALSE 47687
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
47502: LD_ADDR_VAR 0 9
47506: PUSH
47507: LD_VAR 0 1
47511: PPUSH
47512: LD_INT 1
47514: PPUSH
47515: CALL_OW 287
47519: PUSH
47520: LD_INT 10
47522: MUL
47523: ST_TO_ADDR
// r := rate / 10 ;
47524: LD_ADDR_VAR 0 7
47528: PUSH
47529: LD_VAR 0 2
47533: PUSH
47534: LD_INT 10
47536: DIVREAL
47537: ST_TO_ADDR
// time := 1 1$00 ;
47538: LD_ADDR_VAR 0 8
47542: PUSH
47543: LD_INT 2100
47545: ST_TO_ADDR
// if amount < min then
47546: LD_VAR 0 9
47550: PUSH
47551: LD_VAR 0 3
47555: LESS
47556: IFFALSE 47574
// r := r * 2 else
47558: LD_ADDR_VAR 0 7
47562: PUSH
47563: LD_VAR 0 7
47567: PUSH
47568: LD_INT 2
47570: MUL
47571: ST_TO_ADDR
47572: GO 47600
// if amount > max then
47574: LD_VAR 0 9
47578: PUSH
47579: LD_VAR 0 4
47583: GREATER
47584: IFFALSE 47600
// r := r / 2 ;
47586: LD_ADDR_VAR 0 7
47590: PUSH
47591: LD_VAR 0 7
47595: PUSH
47596: LD_INT 2
47598: DIVREAL
47599: ST_TO_ADDR
// time := time / r ;
47600: LD_ADDR_VAR 0 8
47604: PUSH
47605: LD_VAR 0 8
47609: PUSH
47610: LD_VAR 0 7
47614: DIVREAL
47615: ST_TO_ADDR
// if time < 0 then
47616: LD_VAR 0 8
47620: PUSH
47621: LD_INT 0
47623: LESS
47624: IFFALSE 47641
// time := time * - 1 ;
47626: LD_ADDR_VAR 0 8
47630: PUSH
47631: LD_VAR 0 8
47635: PUSH
47636: LD_INT 1
47638: NEG
47639: MUL
47640: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
47641: LD_VAR 0 8
47645: PUSH
47646: LD_INT 35
47648: PPUSH
47649: LD_INT 875
47651: PPUSH
47652: CALL_OW 12
47656: PLUS
47657: PPUSH
47658: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
47662: LD_INT 1
47664: PPUSH
47665: LD_INT 5
47667: PPUSH
47668: CALL_OW 12
47672: PPUSH
47673: LD_VAR 0 1
47677: PPUSH
47678: LD_INT 1
47680: PPUSH
47681: CALL_OW 55
// end ;
47685: GO 47498
// end ;
47687: LD_VAR 0 5
47691: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
47692: LD_INT 0
47694: PPUSH
47695: PPUSH
47696: PPUSH
47697: PPUSH
47698: PPUSH
47699: PPUSH
47700: PPUSH
47701: PPUSH
// if not turrets or not factories then
47702: LD_VAR 0 1
47706: NOT
47707: PUSH
47708: LD_VAR 0 2
47712: NOT
47713: OR
47714: IFFALSE 47718
// exit ;
47716: GO 48025
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
47718: LD_ADDR_VAR 0 10
47722: PUSH
47723: LD_INT 5
47725: PUSH
47726: LD_INT 6
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 2
47735: PUSH
47736: LD_INT 4
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 3
47745: PUSH
47746: LD_INT 5
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 24
47760: PUSH
47761: LD_INT 25
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 23
47770: PUSH
47771: LD_INT 27
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 42
47784: PUSH
47785: LD_INT 43
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 44
47794: PUSH
47795: LD_INT 46
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 45
47804: PUSH
47805: LD_INT 47
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: LIST
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: LIST
47821: ST_TO_ADDR
// result := [ ] ;
47822: LD_ADDR_VAR 0 3
47826: PUSH
47827: EMPTY
47828: ST_TO_ADDR
// for i in turrets do
47829: LD_ADDR_VAR 0 4
47833: PUSH
47834: LD_VAR 0 1
47838: PUSH
47839: FOR_IN
47840: IFFALSE 48023
// begin nat := GetNation ( i ) ;
47842: LD_ADDR_VAR 0 7
47846: PUSH
47847: LD_VAR 0 4
47851: PPUSH
47852: CALL_OW 248
47856: ST_TO_ADDR
// weapon := 0 ;
47857: LD_ADDR_VAR 0 8
47861: PUSH
47862: LD_INT 0
47864: ST_TO_ADDR
// if not nat then
47865: LD_VAR 0 7
47869: NOT
47870: IFFALSE 47874
// continue ;
47872: GO 47839
// for j in list [ nat ] do
47874: LD_ADDR_VAR 0 5
47878: PUSH
47879: LD_VAR 0 10
47883: PUSH
47884: LD_VAR 0 7
47888: ARRAY
47889: PUSH
47890: FOR_IN
47891: IFFALSE 47932
// if GetBWeapon ( i ) = j [ 1 ] then
47893: LD_VAR 0 4
47897: PPUSH
47898: CALL_OW 269
47902: PUSH
47903: LD_VAR 0 5
47907: PUSH
47908: LD_INT 1
47910: ARRAY
47911: EQUAL
47912: IFFALSE 47930
// begin weapon := j [ 2 ] ;
47914: LD_ADDR_VAR 0 8
47918: PUSH
47919: LD_VAR 0 5
47923: PUSH
47924: LD_INT 2
47926: ARRAY
47927: ST_TO_ADDR
// break ;
47928: GO 47932
// end ;
47930: GO 47890
47932: POP
47933: POP
// if not weapon then
47934: LD_VAR 0 8
47938: NOT
47939: IFFALSE 47943
// continue ;
47941: GO 47839
// for k in factories do
47943: LD_ADDR_VAR 0 6
47947: PUSH
47948: LD_VAR 0 2
47952: PUSH
47953: FOR_IN
47954: IFFALSE 48019
// begin weapons := AvailableWeaponList ( k ) ;
47956: LD_ADDR_VAR 0 9
47960: PUSH
47961: LD_VAR 0 6
47965: PPUSH
47966: CALL_OW 478
47970: ST_TO_ADDR
// if not weapons then
47971: LD_VAR 0 9
47975: NOT
47976: IFFALSE 47980
// continue ;
47978: GO 47953
// if weapon in weapons then
47980: LD_VAR 0 8
47984: PUSH
47985: LD_VAR 0 9
47989: IN
47990: IFFALSE 48017
// begin result := [ i , weapon ] ;
47992: LD_ADDR_VAR 0 3
47996: PUSH
47997: LD_VAR 0 4
48001: PUSH
48002: LD_VAR 0 8
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: ST_TO_ADDR
// exit ;
48011: POP
48012: POP
48013: POP
48014: POP
48015: GO 48025
// end ; end ;
48017: GO 47953
48019: POP
48020: POP
// end ;
48021: GO 47839
48023: POP
48024: POP
// end ;
48025: LD_VAR 0 3
48029: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
48030: LD_INT 0
48032: PPUSH
// if not side or side > 8 then
48033: LD_VAR 0 3
48037: NOT
48038: PUSH
48039: LD_VAR 0 3
48043: PUSH
48044: LD_INT 8
48046: GREATER
48047: OR
48048: IFFALSE 48052
// exit ;
48050: GO 48111
// if not range then
48052: LD_VAR 0 4
48056: NOT
48057: IFFALSE 48068
// range := - 12 ;
48059: LD_ADDR_VAR 0 4
48063: PUSH
48064: LD_INT 12
48066: NEG
48067: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
48068: LD_VAR 0 1
48072: PPUSH
48073: LD_VAR 0 2
48077: PPUSH
48078: LD_VAR 0 3
48082: PPUSH
48083: LD_VAR 0 4
48087: PPUSH
48088: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
48092: LD_VAR 0 1
48096: PPUSH
48097: LD_VAR 0 2
48101: PPUSH
48102: LD_VAR 0 3
48106: PPUSH
48107: CALL_OW 331
// end ;
48111: LD_VAR 0 5
48115: RET
// export function Video ( mode ) ; begin
48116: LD_INT 0
48118: PPUSH
// ingame_video = mode ;
48119: LD_ADDR_OWVAR 52
48123: PUSH
48124: LD_VAR 0 1
48128: ST_TO_ADDR
// interface_hidden = mode ;
48129: LD_ADDR_OWVAR 54
48133: PUSH
48134: LD_VAR 0 1
48138: ST_TO_ADDR
// end ;
48139: LD_VAR 0 2
48143: RET
// export function Join ( array , element ) ; begin
48144: LD_INT 0
48146: PPUSH
// result := Replace ( array , array + 1 , element ) ;
48147: LD_ADDR_VAR 0 3
48151: PUSH
48152: LD_VAR 0 1
48156: PPUSH
48157: LD_VAR 0 1
48161: PUSH
48162: LD_INT 1
48164: PLUS
48165: PPUSH
48166: LD_VAR 0 2
48170: PPUSH
48171: CALL_OW 1
48175: ST_TO_ADDR
// end ;
48176: LD_VAR 0 3
48180: RET
// export function JoinUnion ( array , element ) ; begin
48181: LD_INT 0
48183: PPUSH
// result := array union element ;
48184: LD_ADDR_VAR 0 3
48188: PUSH
48189: LD_VAR 0 1
48193: PUSH
48194: LD_VAR 0 2
48198: UNION
48199: ST_TO_ADDR
// end ;
48200: LD_VAR 0 3
48204: RET
// export function GetBehemoths ( side ) ; begin
48205: LD_INT 0
48207: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
48208: LD_ADDR_VAR 0 2
48212: PUSH
48213: LD_INT 22
48215: PUSH
48216: LD_VAR 0 1
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 31
48227: PUSH
48228: LD_INT 25
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PPUSH
48239: CALL_OW 69
48243: ST_TO_ADDR
// end ;
48244: LD_VAR 0 2
48248: RET
// export function Shuffle ( array ) ; var i , index ; begin
48249: LD_INT 0
48251: PPUSH
48252: PPUSH
48253: PPUSH
// result := [ ] ;
48254: LD_ADDR_VAR 0 2
48258: PUSH
48259: EMPTY
48260: ST_TO_ADDR
// if not array then
48261: LD_VAR 0 1
48265: NOT
48266: IFFALSE 48270
// exit ;
48268: GO 48369
// Randomize ;
48270: CALL_OW 10
// for i = array downto 1 do
48274: LD_ADDR_VAR 0 3
48278: PUSH
48279: DOUBLE
48280: LD_VAR 0 1
48284: INC
48285: ST_TO_ADDR
48286: LD_INT 1
48288: PUSH
48289: FOR_DOWNTO
48290: IFFALSE 48367
// begin index := rand ( 1 , array ) ;
48292: LD_ADDR_VAR 0 4
48296: PUSH
48297: LD_INT 1
48299: PPUSH
48300: LD_VAR 0 1
48304: PPUSH
48305: CALL_OW 12
48309: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
48310: LD_ADDR_VAR 0 2
48314: PUSH
48315: LD_VAR 0 2
48319: PPUSH
48320: LD_VAR 0 2
48324: PUSH
48325: LD_INT 1
48327: PLUS
48328: PPUSH
48329: LD_VAR 0 1
48333: PUSH
48334: LD_VAR 0 4
48338: ARRAY
48339: PPUSH
48340: CALL_OW 2
48344: ST_TO_ADDR
// array := Delete ( array , index ) ;
48345: LD_ADDR_VAR 0 1
48349: PUSH
48350: LD_VAR 0 1
48354: PPUSH
48355: LD_VAR 0 4
48359: PPUSH
48360: CALL_OW 3
48364: ST_TO_ADDR
// end ;
48365: GO 48289
48367: POP
48368: POP
// end ;
48369: LD_VAR 0 2
48373: RET
// export function GetBaseMaterials ( base ) ; begin
48374: LD_INT 0
48376: PPUSH
// result := [ 0 , 0 , 0 ] ;
48377: LD_ADDR_VAR 0 2
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: LIST
48395: ST_TO_ADDR
// if not base then
48396: LD_VAR 0 1
48400: NOT
48401: IFFALSE 48405
// exit ;
48403: GO 48454
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
48405: LD_ADDR_VAR 0 2
48409: PUSH
48410: LD_VAR 0 1
48414: PPUSH
48415: LD_INT 1
48417: PPUSH
48418: CALL_OW 275
48422: PUSH
48423: LD_VAR 0 1
48427: PPUSH
48428: LD_INT 2
48430: PPUSH
48431: CALL_OW 275
48435: PUSH
48436: LD_VAR 0 1
48440: PPUSH
48441: LD_INT 3
48443: PPUSH
48444: CALL_OW 275
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: LIST
48453: ST_TO_ADDR
// end ;
48454: LD_VAR 0 2
48458: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
48459: LD_INT 0
48461: PPUSH
48462: PPUSH
// result := array ;
48463: LD_ADDR_VAR 0 3
48467: PUSH
48468: LD_VAR 0 1
48472: ST_TO_ADDR
// if size >= result then
48473: LD_VAR 0 2
48477: PUSH
48478: LD_VAR 0 3
48482: GREATEREQUAL
48483: IFFALSE 48487
// exit ;
48485: GO 48537
// if size then
48487: LD_VAR 0 2
48491: IFFALSE 48537
// for i := array downto size do
48493: LD_ADDR_VAR 0 4
48497: PUSH
48498: DOUBLE
48499: LD_VAR 0 1
48503: INC
48504: ST_TO_ADDR
48505: LD_VAR 0 2
48509: PUSH
48510: FOR_DOWNTO
48511: IFFALSE 48535
// result := Delete ( result , result ) ;
48513: LD_ADDR_VAR 0 3
48517: PUSH
48518: LD_VAR 0 3
48522: PPUSH
48523: LD_VAR 0 3
48527: PPUSH
48528: CALL_OW 3
48532: ST_TO_ADDR
48533: GO 48510
48535: POP
48536: POP
// end ;
48537: LD_VAR 0 3
48541: RET
// export function ComExit ( unit ) ; var tmp ; begin
48542: LD_INT 0
48544: PPUSH
48545: PPUSH
// if not IsInUnit ( unit ) then
48546: LD_VAR 0 1
48550: PPUSH
48551: CALL_OW 310
48555: NOT
48556: IFFALSE 48560
// exit ;
48558: GO 48620
// tmp := IsInUnit ( unit ) ;
48560: LD_ADDR_VAR 0 3
48564: PUSH
48565: LD_VAR 0 1
48569: PPUSH
48570: CALL_OW 310
48574: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
48575: LD_VAR 0 3
48579: PPUSH
48580: CALL_OW 247
48584: PUSH
48585: LD_INT 2
48587: EQUAL
48588: IFFALSE 48601
// ComExitVehicle ( unit ) else
48590: LD_VAR 0 1
48594: PPUSH
48595: CALL_OW 121
48599: GO 48610
// ComExitBuilding ( unit ) ;
48601: LD_VAR 0 1
48605: PPUSH
48606: CALL_OW 122
// result := tmp ;
48610: LD_ADDR_VAR 0 2
48614: PUSH
48615: LD_VAR 0 3
48619: ST_TO_ADDR
// end ;
48620: LD_VAR 0 2
48624: RET
// export function ComExitAll ( units ) ; var i ; begin
48625: LD_INT 0
48627: PPUSH
48628: PPUSH
// if not units then
48629: LD_VAR 0 1
48633: NOT
48634: IFFALSE 48638
// exit ;
48636: GO 48664
// for i in units do
48638: LD_ADDR_VAR 0 3
48642: PUSH
48643: LD_VAR 0 1
48647: PUSH
48648: FOR_IN
48649: IFFALSE 48662
// ComExit ( i ) ;
48651: LD_VAR 0 3
48655: PPUSH
48656: CALL 48542 0 1
48660: GO 48648
48662: POP
48663: POP
// end ;
48664: LD_VAR 0 2
48668: RET
// export function ResetHc ; begin
48669: LD_INT 0
48671: PPUSH
// InitHc ;
48672: CALL_OW 19
// hc_importance := 0 ;
48676: LD_ADDR_OWVAR 32
48680: PUSH
48681: LD_INT 0
48683: ST_TO_ADDR
// end ;
48684: LD_VAR 0 1
48688: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
48689: LD_INT 0
48691: PPUSH
48692: PPUSH
48693: PPUSH
// _x := ( x1 + x2 ) div 2 ;
48694: LD_ADDR_VAR 0 6
48698: PUSH
48699: LD_VAR 0 1
48703: PUSH
48704: LD_VAR 0 3
48708: PLUS
48709: PUSH
48710: LD_INT 2
48712: DIV
48713: ST_TO_ADDR
// if _x < 0 then
48714: LD_VAR 0 6
48718: PUSH
48719: LD_INT 0
48721: LESS
48722: IFFALSE 48739
// _x := _x * - 1 ;
48724: LD_ADDR_VAR 0 6
48728: PUSH
48729: LD_VAR 0 6
48733: PUSH
48734: LD_INT 1
48736: NEG
48737: MUL
48738: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
48739: LD_ADDR_VAR 0 7
48743: PUSH
48744: LD_VAR 0 2
48748: PUSH
48749: LD_VAR 0 4
48753: PLUS
48754: PUSH
48755: LD_INT 2
48757: DIV
48758: ST_TO_ADDR
// if _y < 0 then
48759: LD_VAR 0 7
48763: PUSH
48764: LD_INT 0
48766: LESS
48767: IFFALSE 48784
// _y := _y * - 1 ;
48769: LD_ADDR_VAR 0 7
48773: PUSH
48774: LD_VAR 0 7
48778: PUSH
48779: LD_INT 1
48781: NEG
48782: MUL
48783: ST_TO_ADDR
// result := [ _x , _y ] ;
48784: LD_ADDR_VAR 0 5
48788: PUSH
48789: LD_VAR 0 6
48793: PUSH
48794: LD_VAR 0 7
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: ST_TO_ADDR
// end ;
48803: LD_VAR 0 5
48807: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
48808: LD_INT 0
48810: PPUSH
48811: PPUSH
48812: PPUSH
48813: PPUSH
// task := GetTaskList ( unit ) ;
48814: LD_ADDR_VAR 0 7
48818: PUSH
48819: LD_VAR 0 1
48823: PPUSH
48824: CALL_OW 437
48828: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
48829: LD_VAR 0 7
48833: NOT
48834: PUSH
48835: LD_VAR 0 1
48839: PPUSH
48840: LD_VAR 0 2
48844: PPUSH
48845: CALL_OW 308
48849: NOT
48850: AND
48851: IFFALSE 48855
// exit ;
48853: GO 48973
// if IsInArea ( unit , area ) then
48855: LD_VAR 0 1
48859: PPUSH
48860: LD_VAR 0 2
48864: PPUSH
48865: CALL_OW 308
48869: IFFALSE 48887
// begin ComMoveToArea ( unit , goAway ) ;
48871: LD_VAR 0 1
48875: PPUSH
48876: LD_VAR 0 3
48880: PPUSH
48881: CALL_OW 113
// exit ;
48885: GO 48973
// end ; if task [ 1 ] [ 1 ] <> M then
48887: LD_VAR 0 7
48891: PUSH
48892: LD_INT 1
48894: ARRAY
48895: PUSH
48896: LD_INT 1
48898: ARRAY
48899: PUSH
48900: LD_STRING M
48902: NONEQUAL
48903: IFFALSE 48907
// exit ;
48905: GO 48973
// x := task [ 1 ] [ 2 ] ;
48907: LD_ADDR_VAR 0 5
48911: PUSH
48912: LD_VAR 0 7
48916: PUSH
48917: LD_INT 1
48919: ARRAY
48920: PUSH
48921: LD_INT 2
48923: ARRAY
48924: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
48925: LD_ADDR_VAR 0 6
48929: PUSH
48930: LD_VAR 0 7
48934: PUSH
48935: LD_INT 1
48937: ARRAY
48938: PUSH
48939: LD_INT 3
48941: ARRAY
48942: ST_TO_ADDR
// if InArea ( x , y , area ) then
48943: LD_VAR 0 5
48947: PPUSH
48948: LD_VAR 0 6
48952: PPUSH
48953: LD_VAR 0 2
48957: PPUSH
48958: CALL_OW 309
48962: IFFALSE 48973
// ComStop ( unit ) ;
48964: LD_VAR 0 1
48968: PPUSH
48969: CALL_OW 141
// end ;
48973: LD_VAR 0 4
48977: RET
// export function Abs ( value ) ; begin
48978: LD_INT 0
48980: PPUSH
// result := value ;
48981: LD_ADDR_VAR 0 2
48985: PUSH
48986: LD_VAR 0 1
48990: ST_TO_ADDR
// if value < 0 then
48991: LD_VAR 0 1
48995: PUSH
48996: LD_INT 0
48998: LESS
48999: IFFALSE 49016
// result := value * - 1 ;
49001: LD_ADDR_VAR 0 2
49005: PUSH
49006: LD_VAR 0 1
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: MUL
49015: ST_TO_ADDR
// end ;
49016: LD_VAR 0 2
49020: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
49021: LD_INT 0
49023: PPUSH
49024: PPUSH
49025: PPUSH
49026: PPUSH
49027: PPUSH
49028: PPUSH
49029: PPUSH
49030: PPUSH
// if not unit or not building then
49031: LD_VAR 0 1
49035: NOT
49036: PUSH
49037: LD_VAR 0 2
49041: NOT
49042: OR
49043: IFFALSE 49047
// exit ;
49045: GO 49273
// x := GetX ( building ) ;
49047: LD_ADDR_VAR 0 4
49051: PUSH
49052: LD_VAR 0 2
49056: PPUSH
49057: CALL_OW 250
49061: ST_TO_ADDR
// y := GetY ( building ) ;
49062: LD_ADDR_VAR 0 6
49066: PUSH
49067: LD_VAR 0 2
49071: PPUSH
49072: CALL_OW 251
49076: ST_TO_ADDR
// d := GetDir ( building ) ;
49077: LD_ADDR_VAR 0 8
49081: PUSH
49082: LD_VAR 0 2
49086: PPUSH
49087: CALL_OW 254
49091: ST_TO_ADDR
// r := 4 ;
49092: LD_ADDR_VAR 0 9
49096: PUSH
49097: LD_INT 4
49099: ST_TO_ADDR
// for i := 1 to 5 do
49100: LD_ADDR_VAR 0 10
49104: PUSH
49105: DOUBLE
49106: LD_INT 1
49108: DEC
49109: ST_TO_ADDR
49110: LD_INT 5
49112: PUSH
49113: FOR_TO
49114: IFFALSE 49271
// begin _x := ShiftX ( x , d , r + i ) ;
49116: LD_ADDR_VAR 0 5
49120: PUSH
49121: LD_VAR 0 4
49125: PPUSH
49126: LD_VAR 0 8
49130: PPUSH
49131: LD_VAR 0 9
49135: PUSH
49136: LD_VAR 0 10
49140: PLUS
49141: PPUSH
49142: CALL_OW 272
49146: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
49147: LD_ADDR_VAR 0 7
49151: PUSH
49152: LD_VAR 0 6
49156: PPUSH
49157: LD_VAR 0 8
49161: PPUSH
49162: LD_VAR 0 9
49166: PUSH
49167: LD_VAR 0 10
49171: PLUS
49172: PPUSH
49173: CALL_OW 273
49177: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
49178: LD_VAR 0 5
49182: PPUSH
49183: LD_VAR 0 7
49187: PPUSH
49188: CALL_OW 488
49192: PUSH
49193: LD_VAR 0 5
49197: PPUSH
49198: LD_VAR 0 7
49202: PPUSH
49203: CALL_OW 428
49207: PPUSH
49208: CALL_OW 247
49212: PUSH
49213: LD_INT 3
49215: PUSH
49216: LD_INT 2
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: IN
49223: NOT
49224: AND
49225: IFFALSE 49269
// begin ComMoveXY ( unit , _x , _y ) ;
49227: LD_VAR 0 1
49231: PPUSH
49232: LD_VAR 0 5
49236: PPUSH
49237: LD_VAR 0 7
49241: PPUSH
49242: CALL_OW 111
// result := [ _x , _y ] ;
49246: LD_ADDR_VAR 0 3
49250: PUSH
49251: LD_VAR 0 5
49255: PUSH
49256: LD_VAR 0 7
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: ST_TO_ADDR
// exit ;
49265: POP
49266: POP
49267: GO 49273
// end ; end ;
49269: GO 49113
49271: POP
49272: POP
// end ;
49273: LD_VAR 0 3
49277: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
49278: LD_INT 0
49280: PPUSH
49281: PPUSH
49282: PPUSH
// result := 0 ;
49283: LD_ADDR_VAR 0 3
49287: PUSH
49288: LD_INT 0
49290: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
49291: LD_VAR 0 1
49295: PUSH
49296: LD_INT 0
49298: LESS
49299: PUSH
49300: LD_VAR 0 1
49304: PUSH
49305: LD_INT 8
49307: GREATER
49308: OR
49309: PUSH
49310: LD_VAR 0 2
49314: PUSH
49315: LD_INT 0
49317: LESS
49318: OR
49319: PUSH
49320: LD_VAR 0 2
49324: PUSH
49325: LD_INT 8
49327: GREATER
49328: OR
49329: IFFALSE 49333
// exit ;
49331: GO 49408
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
49333: LD_ADDR_VAR 0 4
49337: PUSH
49338: LD_INT 22
49340: PUSH
49341: LD_VAR 0 2
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PPUSH
49350: CALL_OW 69
49354: PUSH
49355: FOR_IN
49356: IFFALSE 49406
// begin un := UnitShoot ( i ) ;
49358: LD_ADDR_VAR 0 5
49362: PUSH
49363: LD_VAR 0 4
49367: PPUSH
49368: CALL_OW 504
49372: ST_TO_ADDR
// if GetSide ( un ) = side1 then
49373: LD_VAR 0 5
49377: PPUSH
49378: CALL_OW 255
49382: PUSH
49383: LD_VAR 0 1
49387: EQUAL
49388: IFFALSE 49404
// begin result := un ;
49390: LD_ADDR_VAR 0 3
49394: PUSH
49395: LD_VAR 0 5
49399: ST_TO_ADDR
// exit ;
49400: POP
49401: POP
49402: GO 49408
// end ; end ;
49404: GO 49355
49406: POP
49407: POP
// end ;
49408: LD_VAR 0 3
49412: RET
// export function GetCargoBay ( units ) ; begin
49413: LD_INT 0
49415: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
49416: LD_ADDR_VAR 0 2
49420: PUSH
49421: LD_VAR 0 1
49425: PPUSH
49426: LD_INT 2
49428: PUSH
49429: LD_INT 34
49431: PUSH
49432: LD_INT 12
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 34
49441: PUSH
49442: LD_INT 51
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 34
49451: PUSH
49452: LD_INT 32
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 34
49461: PUSH
49462: LD_INT 89
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: PPUSH
49476: CALL_OW 72
49480: ST_TO_ADDR
// end ;
49481: LD_VAR 0 2
49485: RET
// export function Negate ( value ) ; begin
49486: LD_INT 0
49488: PPUSH
// result := not value ;
49489: LD_ADDR_VAR 0 2
49493: PUSH
49494: LD_VAR 0 1
49498: NOT
49499: ST_TO_ADDR
// end ;
49500: LD_VAR 0 2
49504: RET
// export function Inc ( value ) ; begin
49505: LD_INT 0
49507: PPUSH
// result := value + 1 ;
49508: LD_ADDR_VAR 0 2
49512: PUSH
49513: LD_VAR 0 1
49517: PUSH
49518: LD_INT 1
49520: PLUS
49521: ST_TO_ADDR
// end ;
49522: LD_VAR 0 2
49526: RET
// export function Dec ( value ) ; begin
49527: LD_INT 0
49529: PPUSH
// result := value - 1 ;
49530: LD_ADDR_VAR 0 2
49534: PUSH
49535: LD_VAR 0 1
49539: PUSH
49540: LD_INT 1
49542: MINUS
49543: ST_TO_ADDR
// end ;
49544: LD_VAR 0 2
49548: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
49549: LD_INT 0
49551: PPUSH
49552: PPUSH
49553: PPUSH
49554: PPUSH
49555: PPUSH
49556: PPUSH
49557: PPUSH
49558: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
49559: LD_VAR 0 1
49563: PPUSH
49564: LD_VAR 0 2
49568: PPUSH
49569: CALL_OW 488
49573: NOT
49574: PUSH
49575: LD_VAR 0 3
49579: PPUSH
49580: LD_VAR 0 4
49584: PPUSH
49585: CALL_OW 488
49589: NOT
49590: OR
49591: IFFALSE 49604
// begin result := - 1 ;
49593: LD_ADDR_VAR 0 5
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: ST_TO_ADDR
// exit ;
49602: GO 49839
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
49604: LD_ADDR_VAR 0 12
49608: PUSH
49609: LD_VAR 0 1
49613: PPUSH
49614: LD_VAR 0 2
49618: PPUSH
49619: LD_VAR 0 3
49623: PPUSH
49624: LD_VAR 0 4
49628: PPUSH
49629: CALL 48689 0 4
49633: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
49634: LD_ADDR_VAR 0 11
49638: PUSH
49639: LD_VAR 0 1
49643: PPUSH
49644: LD_VAR 0 2
49648: PPUSH
49649: LD_VAR 0 12
49653: PUSH
49654: LD_INT 1
49656: ARRAY
49657: PPUSH
49658: LD_VAR 0 12
49662: PUSH
49663: LD_INT 2
49665: ARRAY
49666: PPUSH
49667: CALL_OW 298
49671: ST_TO_ADDR
// distance := 9999 ;
49672: LD_ADDR_VAR 0 10
49676: PUSH
49677: LD_INT 9999
49679: ST_TO_ADDR
// for i := 0 to 5 do
49680: LD_ADDR_VAR 0 6
49684: PUSH
49685: DOUBLE
49686: LD_INT 0
49688: DEC
49689: ST_TO_ADDR
49690: LD_INT 5
49692: PUSH
49693: FOR_TO
49694: IFFALSE 49837
// begin _x := ShiftX ( x1 , i , centerDist ) ;
49696: LD_ADDR_VAR 0 7
49700: PUSH
49701: LD_VAR 0 1
49705: PPUSH
49706: LD_VAR 0 6
49710: PPUSH
49711: LD_VAR 0 11
49715: PPUSH
49716: CALL_OW 272
49720: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
49721: LD_ADDR_VAR 0 8
49725: PUSH
49726: LD_VAR 0 2
49730: PPUSH
49731: LD_VAR 0 6
49735: PPUSH
49736: LD_VAR 0 11
49740: PPUSH
49741: CALL_OW 273
49745: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49746: LD_VAR 0 7
49750: PPUSH
49751: LD_VAR 0 8
49755: PPUSH
49756: CALL_OW 488
49760: NOT
49761: IFFALSE 49765
// continue ;
49763: GO 49693
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
49765: LD_ADDR_VAR 0 9
49769: PUSH
49770: LD_VAR 0 12
49774: PUSH
49775: LD_INT 1
49777: ARRAY
49778: PPUSH
49779: LD_VAR 0 12
49783: PUSH
49784: LD_INT 2
49786: ARRAY
49787: PPUSH
49788: LD_VAR 0 7
49792: PPUSH
49793: LD_VAR 0 8
49797: PPUSH
49798: CALL_OW 298
49802: ST_TO_ADDR
// if tmp < distance then
49803: LD_VAR 0 9
49807: PUSH
49808: LD_VAR 0 10
49812: LESS
49813: IFFALSE 49835
// begin result := i ;
49815: LD_ADDR_VAR 0 5
49819: PUSH
49820: LD_VAR 0 6
49824: ST_TO_ADDR
// distance := tmp ;
49825: LD_ADDR_VAR 0 10
49829: PUSH
49830: LD_VAR 0 9
49834: ST_TO_ADDR
// end ; end ;
49835: GO 49693
49837: POP
49838: POP
// end ;
49839: LD_VAR 0 5
49843: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49844: LD_INT 0
49846: PPUSH
49847: PPUSH
// if not driver or not IsInUnit ( driver ) then
49848: LD_VAR 0 1
49852: NOT
49853: PUSH
49854: LD_VAR 0 1
49858: PPUSH
49859: CALL_OW 310
49863: NOT
49864: OR
49865: IFFALSE 49869
// exit ;
49867: GO 49959
// vehicle := IsInUnit ( driver ) ;
49869: LD_ADDR_VAR 0 3
49873: PUSH
49874: LD_VAR 0 1
49878: PPUSH
49879: CALL_OW 310
49883: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49884: LD_VAR 0 1
49888: PPUSH
49889: LD_STRING \
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: LD_INT 0
49900: PUSH
49901: LD_INT 0
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: LD_INT 0
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: PUSH
49919: LD_STRING E
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: LD_VAR 0 3
49932: PUSH
49933: LD_INT 0
49935: PUSH
49936: LD_INT 0
49938: PUSH
49939: LD_INT 0
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PPUSH
49955: CALL_OW 446
// end ;
49959: LD_VAR 0 2
49963: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49964: LD_INT 0
49966: PPUSH
49967: PPUSH
// if not driver or not IsInUnit ( driver ) then
49968: LD_VAR 0 1
49972: NOT
49973: PUSH
49974: LD_VAR 0 1
49978: PPUSH
49979: CALL_OW 310
49983: NOT
49984: OR
49985: IFFALSE 49989
// exit ;
49987: GO 50079
// vehicle := IsInUnit ( driver ) ;
49989: LD_ADDR_VAR 0 3
49993: PUSH
49994: LD_VAR 0 1
49998: PPUSH
49999: CALL_OW 310
50003: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50004: LD_VAR 0 1
50008: PPUSH
50009: LD_STRING \
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: LD_INT 0
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: PUSH
50039: LD_STRING E
50041: PUSH
50042: LD_INT 0
50044: PUSH
50045: LD_INT 0
50047: PUSH
50048: LD_VAR 0 3
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: LD_INT 0
50058: PUSH
50059: LD_INT 0
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PPUSH
50075: CALL_OW 447
// end ;
50079: LD_VAR 0 2
50083: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
50084: LD_INT 0
50086: PPUSH
50087: PPUSH
50088: PPUSH
// tmp := [ ] ;
50089: LD_ADDR_VAR 0 5
50093: PUSH
50094: EMPTY
50095: ST_TO_ADDR
// for i in units do
50096: LD_ADDR_VAR 0 4
50100: PUSH
50101: LD_VAR 0 1
50105: PUSH
50106: FOR_IN
50107: IFFALSE 50145
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
50109: LD_ADDR_VAR 0 5
50113: PUSH
50114: LD_VAR 0 5
50118: PPUSH
50119: LD_VAR 0 5
50123: PUSH
50124: LD_INT 1
50126: PLUS
50127: PPUSH
50128: LD_VAR 0 4
50132: PPUSH
50133: CALL_OW 256
50137: PPUSH
50138: CALL_OW 2
50142: ST_TO_ADDR
50143: GO 50106
50145: POP
50146: POP
// if not tmp then
50147: LD_VAR 0 5
50151: NOT
50152: IFFALSE 50156
// exit ;
50154: GO 50204
// if asc then
50156: LD_VAR 0 2
50160: IFFALSE 50184
// result := SortListByListAsc ( units , tmp ) else
50162: LD_ADDR_VAR 0 3
50166: PUSH
50167: LD_VAR 0 1
50171: PPUSH
50172: LD_VAR 0 5
50176: PPUSH
50177: CALL_OW 76
50181: ST_TO_ADDR
50182: GO 50204
// result := SortListByListDesc ( units , tmp ) ;
50184: LD_ADDR_VAR 0 3
50188: PUSH
50189: LD_VAR 0 1
50193: PPUSH
50194: LD_VAR 0 5
50198: PPUSH
50199: CALL_OW 77
50203: ST_TO_ADDR
// end ;
50204: LD_VAR 0 3
50208: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
50209: LD_INT 0
50211: PPUSH
50212: PPUSH
// task := GetTaskList ( mech ) ;
50213: LD_ADDR_VAR 0 4
50217: PUSH
50218: LD_VAR 0 1
50222: PPUSH
50223: CALL_OW 437
50227: ST_TO_ADDR
// if not task then
50228: LD_VAR 0 4
50232: NOT
50233: IFFALSE 50237
// exit ;
50235: GO 50279
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
50237: LD_ADDR_VAR 0 3
50241: PUSH
50242: LD_VAR 0 4
50246: PUSH
50247: LD_INT 1
50249: ARRAY
50250: PUSH
50251: LD_INT 1
50253: ARRAY
50254: PUSH
50255: LD_STRING r
50257: EQUAL
50258: PUSH
50259: LD_VAR 0 4
50263: PUSH
50264: LD_INT 1
50266: ARRAY
50267: PUSH
50268: LD_INT 4
50270: ARRAY
50271: PUSH
50272: LD_VAR 0 2
50276: EQUAL
50277: AND
50278: ST_TO_ADDR
// end ;
50279: LD_VAR 0 3
50283: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
50284: LD_INT 0
50286: PPUSH
// SetDir ( unit , d ) ;
50287: LD_VAR 0 1
50291: PPUSH
50292: LD_VAR 0 4
50296: PPUSH
50297: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
50301: LD_VAR 0 1
50305: PPUSH
50306: LD_VAR 0 2
50310: PPUSH
50311: LD_VAR 0 3
50315: PPUSH
50316: LD_VAR 0 5
50320: PPUSH
50321: CALL_OW 48
// end ;
50325: LD_VAR 0 6
50329: RET
// export function ToNaturalNumber ( number ) ; begin
50330: LD_INT 0
50332: PPUSH
// result := number div 1 ;
50333: LD_ADDR_VAR 0 2
50337: PUSH
50338: LD_VAR 0 1
50342: PUSH
50343: LD_INT 1
50345: DIV
50346: ST_TO_ADDR
// if number < 0 then
50347: LD_VAR 0 1
50351: PUSH
50352: LD_INT 0
50354: LESS
50355: IFFALSE 50365
// result := 0 ;
50357: LD_ADDR_VAR 0 2
50361: PUSH
50362: LD_INT 0
50364: ST_TO_ADDR
// end ;
50365: LD_VAR 0 2
50369: RET
// export function SortByClass ( units , class ) ; var un ; begin
50370: LD_INT 0
50372: PPUSH
50373: PPUSH
// if not units or not class then
50374: LD_VAR 0 1
50378: NOT
50379: PUSH
50380: LD_VAR 0 2
50384: NOT
50385: OR
50386: IFFALSE 50390
// exit ;
50388: GO 50485
// result := [ ] ;
50390: LD_ADDR_VAR 0 3
50394: PUSH
50395: EMPTY
50396: ST_TO_ADDR
// for un in units do
50397: LD_ADDR_VAR 0 4
50401: PUSH
50402: LD_VAR 0 1
50406: PUSH
50407: FOR_IN
50408: IFFALSE 50483
// if GetClass ( un ) = class then
50410: LD_VAR 0 4
50414: PPUSH
50415: CALL_OW 257
50419: PUSH
50420: LD_VAR 0 2
50424: EQUAL
50425: IFFALSE 50452
// result := Insert ( result , 1 , un ) else
50427: LD_ADDR_VAR 0 3
50431: PUSH
50432: LD_VAR 0 3
50436: PPUSH
50437: LD_INT 1
50439: PPUSH
50440: LD_VAR 0 4
50444: PPUSH
50445: CALL_OW 2
50449: ST_TO_ADDR
50450: GO 50481
// result := Replace ( result , result + 1 , un ) ;
50452: LD_ADDR_VAR 0 3
50456: PUSH
50457: LD_VAR 0 3
50461: PPUSH
50462: LD_VAR 0 3
50466: PUSH
50467: LD_INT 1
50469: PLUS
50470: PPUSH
50471: LD_VAR 0 4
50475: PPUSH
50476: CALL_OW 1
50480: ST_TO_ADDR
50481: GO 50407
50483: POP
50484: POP
// end ;
50485: LD_VAR 0 3
50489: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
50490: LD_INT 0
50492: PPUSH
50493: PPUSH
50494: PPUSH
50495: PPUSH
50496: PPUSH
50497: PPUSH
50498: PPUSH
// result := [ ] ;
50499: LD_ADDR_VAR 0 4
50503: PUSH
50504: EMPTY
50505: ST_TO_ADDR
// if x - r < 0 then
50506: LD_VAR 0 1
50510: PUSH
50511: LD_VAR 0 3
50515: MINUS
50516: PUSH
50517: LD_INT 0
50519: LESS
50520: IFFALSE 50532
// min_x := 0 else
50522: LD_ADDR_VAR 0 8
50526: PUSH
50527: LD_INT 0
50529: ST_TO_ADDR
50530: GO 50548
// min_x := x - r ;
50532: LD_ADDR_VAR 0 8
50536: PUSH
50537: LD_VAR 0 1
50541: PUSH
50542: LD_VAR 0 3
50546: MINUS
50547: ST_TO_ADDR
// if y - r < 0 then
50548: LD_VAR 0 2
50552: PUSH
50553: LD_VAR 0 3
50557: MINUS
50558: PUSH
50559: LD_INT 0
50561: LESS
50562: IFFALSE 50574
// min_y := 0 else
50564: LD_ADDR_VAR 0 7
50568: PUSH
50569: LD_INT 0
50571: ST_TO_ADDR
50572: GO 50590
// min_y := y - r ;
50574: LD_ADDR_VAR 0 7
50578: PUSH
50579: LD_VAR 0 2
50583: PUSH
50584: LD_VAR 0 3
50588: MINUS
50589: ST_TO_ADDR
// max_x := x + r ;
50590: LD_ADDR_VAR 0 9
50594: PUSH
50595: LD_VAR 0 1
50599: PUSH
50600: LD_VAR 0 3
50604: PLUS
50605: ST_TO_ADDR
// max_y := y + r ;
50606: LD_ADDR_VAR 0 10
50610: PUSH
50611: LD_VAR 0 2
50615: PUSH
50616: LD_VAR 0 3
50620: PLUS
50621: ST_TO_ADDR
// for _x = min_x to max_x do
50622: LD_ADDR_VAR 0 5
50626: PUSH
50627: DOUBLE
50628: LD_VAR 0 8
50632: DEC
50633: ST_TO_ADDR
50634: LD_VAR 0 9
50638: PUSH
50639: FOR_TO
50640: IFFALSE 50741
// for _y = min_y to max_y do
50642: LD_ADDR_VAR 0 6
50646: PUSH
50647: DOUBLE
50648: LD_VAR 0 7
50652: DEC
50653: ST_TO_ADDR
50654: LD_VAR 0 10
50658: PUSH
50659: FOR_TO
50660: IFFALSE 50737
// begin if not ValidHex ( _x , _y ) then
50662: LD_VAR 0 5
50666: PPUSH
50667: LD_VAR 0 6
50671: PPUSH
50672: CALL_OW 488
50676: NOT
50677: IFFALSE 50681
// continue ;
50679: GO 50659
// if GetResourceTypeXY ( _x , _y ) then
50681: LD_VAR 0 5
50685: PPUSH
50686: LD_VAR 0 6
50690: PPUSH
50691: CALL_OW 283
50695: IFFALSE 50735
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
50697: LD_ADDR_VAR 0 4
50701: PUSH
50702: LD_VAR 0 4
50706: PPUSH
50707: LD_VAR 0 4
50711: PUSH
50712: LD_INT 1
50714: PLUS
50715: PPUSH
50716: LD_VAR 0 5
50720: PUSH
50721: LD_VAR 0 6
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PPUSH
50730: CALL_OW 1
50734: ST_TO_ADDR
// end ;
50735: GO 50659
50737: POP
50738: POP
50739: GO 50639
50741: POP
50742: POP
// end ;
50743: LD_VAR 0 4
50747: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
50748: LD_INT 0
50750: PPUSH
50751: PPUSH
50752: PPUSH
50753: PPUSH
50754: PPUSH
50755: PPUSH
50756: PPUSH
50757: PPUSH
// if not units then
50758: LD_VAR 0 1
50762: NOT
50763: IFFALSE 50767
// exit ;
50765: GO 51291
// result := UnitFilter ( units , [ f_ok ] ) ;
50767: LD_ADDR_VAR 0 3
50771: PUSH
50772: LD_VAR 0 1
50776: PPUSH
50777: LD_INT 50
50779: PUSH
50780: EMPTY
50781: LIST
50782: PPUSH
50783: CALL_OW 72
50787: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
50788: LD_ADDR_VAR 0 8
50792: PUSH
50793: LD_VAR 0 1
50797: PUSH
50798: LD_INT 1
50800: ARRAY
50801: PPUSH
50802: CALL_OW 255
50806: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
50807: LD_ADDR_VAR 0 10
50811: PUSH
50812: LD_INT 29
50814: PUSH
50815: LD_INT 91
50817: PUSH
50818: LD_INT 49
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: LIST
50825: ST_TO_ADDR
// if not result then
50826: LD_VAR 0 3
50830: NOT
50831: IFFALSE 50835
// exit ;
50833: GO 51291
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
50835: LD_ADDR_VAR 0 5
50839: PUSH
50840: LD_INT 81
50842: PUSH
50843: LD_VAR 0 8
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PPUSH
50852: CALL_OW 69
50856: ST_TO_ADDR
// for i in result do
50857: LD_ADDR_VAR 0 4
50861: PUSH
50862: LD_VAR 0 3
50866: PUSH
50867: FOR_IN
50868: IFFALSE 51289
// begin tag := GetTag ( i ) + 1 ;
50870: LD_ADDR_VAR 0 9
50874: PUSH
50875: LD_VAR 0 4
50879: PPUSH
50880: CALL_OW 110
50884: PUSH
50885: LD_INT 1
50887: PLUS
50888: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
50889: LD_ADDR_VAR 0 7
50893: PUSH
50894: LD_VAR 0 4
50898: PPUSH
50899: CALL_OW 250
50903: PPUSH
50904: LD_VAR 0 4
50908: PPUSH
50909: CALL_OW 251
50913: PPUSH
50914: LD_INT 6
50916: PPUSH
50917: CALL 50490 0 3
50921: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
50922: LD_VAR 0 4
50926: PPUSH
50927: CALL_OW 247
50931: PUSH
50932: LD_INT 2
50934: EQUAL
50935: PUSH
50936: LD_VAR 0 7
50940: AND
50941: PUSH
50942: LD_VAR 0 4
50946: PPUSH
50947: CALL_OW 264
50951: PUSH
50952: LD_VAR 0 10
50956: IN
50957: NOT
50958: AND
50959: IFFALSE 50998
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
50961: LD_VAR 0 4
50965: PPUSH
50966: LD_VAR 0 7
50970: PUSH
50971: LD_INT 1
50973: ARRAY
50974: PUSH
50975: LD_INT 1
50977: ARRAY
50978: PPUSH
50979: LD_VAR 0 7
50983: PUSH
50984: LD_INT 1
50986: ARRAY
50987: PUSH
50988: LD_INT 2
50990: ARRAY
50991: PPUSH
50992: CALL_OW 116
50996: GO 51287
// if path > tag then
50998: LD_VAR 0 2
51002: PUSH
51003: LD_VAR 0 9
51007: GREATER
51008: IFFALSE 51216
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
51010: LD_ADDR_VAR 0 6
51014: PUSH
51015: LD_VAR 0 5
51019: PPUSH
51020: LD_INT 91
51022: PUSH
51023: LD_VAR 0 4
51027: PUSH
51028: LD_INT 8
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: LIST
51035: PPUSH
51036: CALL_OW 72
51040: ST_TO_ADDR
// if nearEnemy then
51041: LD_VAR 0 6
51045: IFFALSE 51114
// begin if GetWeapon ( i ) = ru_time_lapser then
51047: LD_VAR 0 4
51051: PPUSH
51052: CALL_OW 264
51056: PUSH
51057: LD_INT 49
51059: EQUAL
51060: IFFALSE 51088
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
51062: LD_VAR 0 4
51066: PPUSH
51067: LD_VAR 0 6
51071: PPUSH
51072: LD_VAR 0 4
51076: PPUSH
51077: CALL_OW 74
51081: PPUSH
51082: CALL_OW 112
51086: GO 51112
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
51088: LD_VAR 0 4
51092: PPUSH
51093: LD_VAR 0 6
51097: PPUSH
51098: LD_VAR 0 4
51102: PPUSH
51103: CALL_OW 74
51107: PPUSH
51108: CALL_OW 115
// end else
51112: GO 51214
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
51114: LD_VAR 0 4
51118: PPUSH
51119: LD_VAR 0 2
51123: PUSH
51124: LD_VAR 0 9
51128: ARRAY
51129: PUSH
51130: LD_INT 1
51132: ARRAY
51133: PPUSH
51134: LD_VAR 0 2
51138: PUSH
51139: LD_VAR 0 9
51143: ARRAY
51144: PUSH
51145: LD_INT 2
51147: ARRAY
51148: PPUSH
51149: CALL_OW 297
51153: PUSH
51154: LD_INT 6
51156: GREATER
51157: IFFALSE 51200
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
51159: LD_VAR 0 4
51163: PPUSH
51164: LD_VAR 0 2
51168: PUSH
51169: LD_VAR 0 9
51173: ARRAY
51174: PUSH
51175: LD_INT 1
51177: ARRAY
51178: PPUSH
51179: LD_VAR 0 2
51183: PUSH
51184: LD_VAR 0 9
51188: ARRAY
51189: PUSH
51190: LD_INT 2
51192: ARRAY
51193: PPUSH
51194: CALL_OW 114
51198: GO 51214
// SetTag ( i , tag ) ;
51200: LD_VAR 0 4
51204: PPUSH
51205: LD_VAR 0 9
51209: PPUSH
51210: CALL_OW 109
// end else
51214: GO 51287
// if enemy then
51216: LD_VAR 0 5
51220: IFFALSE 51287
// begin if GetWeapon ( i ) = ru_time_lapser then
51222: LD_VAR 0 4
51226: PPUSH
51227: CALL_OW 264
51231: PUSH
51232: LD_INT 49
51234: EQUAL
51235: IFFALSE 51263
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
51237: LD_VAR 0 4
51241: PPUSH
51242: LD_VAR 0 5
51246: PPUSH
51247: LD_VAR 0 4
51251: PPUSH
51252: CALL_OW 74
51256: PPUSH
51257: CALL_OW 112
51261: GO 51287
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
51263: LD_VAR 0 4
51267: PPUSH
51268: LD_VAR 0 5
51272: PPUSH
51273: LD_VAR 0 4
51277: PPUSH
51278: CALL_OW 74
51282: PPUSH
51283: CALL_OW 115
// end ; end ;
51287: GO 50867
51289: POP
51290: POP
// end ;
51291: LD_VAR 0 3
51295: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
51296: LD_INT 0
51298: PPUSH
51299: PPUSH
51300: PPUSH
// if not unit or IsInUnit ( unit ) then
51301: LD_VAR 0 1
51305: NOT
51306: PUSH
51307: LD_VAR 0 1
51311: PPUSH
51312: CALL_OW 310
51316: OR
51317: IFFALSE 51321
// exit ;
51319: GO 51412
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
51321: LD_ADDR_VAR 0 4
51325: PUSH
51326: LD_VAR 0 1
51330: PPUSH
51331: CALL_OW 250
51335: PPUSH
51336: LD_VAR 0 2
51340: PPUSH
51341: LD_INT 1
51343: PPUSH
51344: CALL_OW 272
51348: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
51349: LD_ADDR_VAR 0 5
51353: PUSH
51354: LD_VAR 0 1
51358: PPUSH
51359: CALL_OW 251
51363: PPUSH
51364: LD_VAR 0 2
51368: PPUSH
51369: LD_INT 1
51371: PPUSH
51372: CALL_OW 273
51376: ST_TO_ADDR
// if ValidHex ( x , y ) then
51377: LD_VAR 0 4
51381: PPUSH
51382: LD_VAR 0 5
51386: PPUSH
51387: CALL_OW 488
51391: IFFALSE 51412
// ComTurnXY ( unit , x , y ) ;
51393: LD_VAR 0 1
51397: PPUSH
51398: LD_VAR 0 4
51402: PPUSH
51403: LD_VAR 0 5
51407: PPUSH
51408: CALL_OW 118
// end ;
51412: LD_VAR 0 3
51416: RET
// export function SeeUnits ( side , units ) ; var i ; begin
51417: LD_INT 0
51419: PPUSH
51420: PPUSH
// result := false ;
51421: LD_ADDR_VAR 0 3
51425: PUSH
51426: LD_INT 0
51428: ST_TO_ADDR
// if not units then
51429: LD_VAR 0 2
51433: NOT
51434: IFFALSE 51438
// exit ;
51436: GO 51483
// for i in units do
51438: LD_ADDR_VAR 0 4
51442: PUSH
51443: LD_VAR 0 2
51447: PUSH
51448: FOR_IN
51449: IFFALSE 51481
// if See ( side , i ) then
51451: LD_VAR 0 1
51455: PPUSH
51456: LD_VAR 0 4
51460: PPUSH
51461: CALL_OW 292
51465: IFFALSE 51479
// begin result := true ;
51467: LD_ADDR_VAR 0 3
51471: PUSH
51472: LD_INT 1
51474: ST_TO_ADDR
// exit ;
51475: POP
51476: POP
51477: GO 51483
// end ;
51479: GO 51448
51481: POP
51482: POP
// end ;
51483: LD_VAR 0 3
51487: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
51488: LD_INT 0
51490: PPUSH
51491: PPUSH
51492: PPUSH
51493: PPUSH
// if not unit or not points then
51494: LD_VAR 0 1
51498: NOT
51499: PUSH
51500: LD_VAR 0 2
51504: NOT
51505: OR
51506: IFFALSE 51510
// exit ;
51508: GO 51600
// dist := 99999 ;
51510: LD_ADDR_VAR 0 5
51514: PUSH
51515: LD_INT 99999
51517: ST_TO_ADDR
// for i in points do
51518: LD_ADDR_VAR 0 4
51522: PUSH
51523: LD_VAR 0 2
51527: PUSH
51528: FOR_IN
51529: IFFALSE 51598
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
51531: LD_ADDR_VAR 0 6
51535: PUSH
51536: LD_VAR 0 1
51540: PPUSH
51541: LD_VAR 0 4
51545: PUSH
51546: LD_INT 1
51548: ARRAY
51549: PPUSH
51550: LD_VAR 0 4
51554: PUSH
51555: LD_INT 2
51557: ARRAY
51558: PPUSH
51559: CALL_OW 297
51563: ST_TO_ADDR
// if tmpDist < dist then
51564: LD_VAR 0 6
51568: PUSH
51569: LD_VAR 0 5
51573: LESS
51574: IFFALSE 51596
// begin result := i ;
51576: LD_ADDR_VAR 0 3
51580: PUSH
51581: LD_VAR 0 4
51585: ST_TO_ADDR
// dist := tmpDist ;
51586: LD_ADDR_VAR 0 5
51590: PUSH
51591: LD_VAR 0 6
51595: ST_TO_ADDR
// end ; end ;
51596: GO 51528
51598: POP
51599: POP
// end ;
51600: LD_VAR 0 3
51604: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
51605: LD_INT 0
51607: PPUSH
// uc_side := side ;
51608: LD_ADDR_OWVAR 20
51612: PUSH
51613: LD_VAR 0 1
51617: ST_TO_ADDR
// uc_nation := 3 ;
51618: LD_ADDR_OWVAR 21
51622: PUSH
51623: LD_INT 3
51625: ST_TO_ADDR
// vc_chassis := 25 ;
51626: LD_ADDR_OWVAR 37
51630: PUSH
51631: LD_INT 25
51633: ST_TO_ADDR
// vc_engine := engine_siberite ;
51634: LD_ADDR_OWVAR 39
51638: PUSH
51639: LD_INT 3
51641: ST_TO_ADDR
// vc_control := control_computer ;
51642: LD_ADDR_OWVAR 38
51646: PUSH
51647: LD_INT 3
51649: ST_TO_ADDR
// vc_weapon := 59 ;
51650: LD_ADDR_OWVAR 40
51654: PUSH
51655: LD_INT 59
51657: ST_TO_ADDR
// result := CreateVehicle ;
51658: LD_ADDR_VAR 0 5
51662: PUSH
51663: CALL_OW 45
51667: ST_TO_ADDR
// SetDir ( result , d ) ;
51668: LD_VAR 0 5
51672: PPUSH
51673: LD_VAR 0 4
51677: PPUSH
51678: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
51682: LD_VAR 0 5
51686: PPUSH
51687: LD_VAR 0 2
51691: PPUSH
51692: LD_VAR 0 3
51696: PPUSH
51697: LD_INT 0
51699: PPUSH
51700: CALL_OW 48
// end ;
51704: LD_VAR 0 5
51708: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
51709: LD_INT 0
51711: PPUSH
51712: PPUSH
51713: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
51714: LD_ADDR_VAR 0 2
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: LD_INT 0
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
51737: LD_VAR 0 1
51741: NOT
51742: PUSH
51743: LD_VAR 0 1
51747: PPUSH
51748: CALL_OW 264
51752: PUSH
51753: LD_INT 12
51755: PUSH
51756: LD_INT 51
51758: PUSH
51759: LD_INT 32
51761: PUSH
51762: LD_INT 89
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: IN
51771: NOT
51772: OR
51773: IFFALSE 51777
// exit ;
51775: GO 51875
// for i := 1 to 3 do
51777: LD_ADDR_VAR 0 3
51781: PUSH
51782: DOUBLE
51783: LD_INT 1
51785: DEC
51786: ST_TO_ADDR
51787: LD_INT 3
51789: PUSH
51790: FOR_TO
51791: IFFALSE 51873
// begin tmp := GetCargo ( cargo , i ) ;
51793: LD_ADDR_VAR 0 4
51797: PUSH
51798: LD_VAR 0 1
51802: PPUSH
51803: LD_VAR 0 3
51807: PPUSH
51808: CALL_OW 289
51812: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
51813: LD_ADDR_VAR 0 2
51817: PUSH
51818: LD_VAR 0 2
51822: PPUSH
51823: LD_VAR 0 3
51827: PPUSH
51828: LD_VAR 0 4
51832: PPUSH
51833: CALL_OW 1
51837: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
51838: LD_ADDR_VAR 0 2
51842: PUSH
51843: LD_VAR 0 2
51847: PPUSH
51848: LD_INT 4
51850: PPUSH
51851: LD_VAR 0 2
51855: PUSH
51856: LD_INT 4
51858: ARRAY
51859: PUSH
51860: LD_VAR 0 4
51864: PLUS
51865: PPUSH
51866: CALL_OW 1
51870: ST_TO_ADDR
// end ;
51871: GO 51790
51873: POP
51874: POP
// end ;
51875: LD_VAR 0 2
51879: RET
// export function Length ( array ) ; begin
51880: LD_INT 0
51882: PPUSH
// result := array + 0 ;
51883: LD_ADDR_VAR 0 2
51887: PUSH
51888: LD_VAR 0 1
51892: PUSH
51893: LD_INT 0
51895: PLUS
51896: ST_TO_ADDR
// end ;
51897: LD_VAR 0 2
51901: RET
// export function PrepareArray ( array ) ; begin
51902: LD_INT 0
51904: PPUSH
// result := array diff 0 ;
51905: LD_ADDR_VAR 0 2
51909: PUSH
51910: LD_VAR 0 1
51914: PUSH
51915: LD_INT 0
51917: DIFF
51918: ST_TO_ADDR
// if not result [ 1 ] then
51919: LD_VAR 0 2
51923: PUSH
51924: LD_INT 1
51926: ARRAY
51927: NOT
51928: IFFALSE 51948
// result := Delete ( result , 1 ) ;
51930: LD_ADDR_VAR 0 2
51934: PUSH
51935: LD_VAR 0 2
51939: PPUSH
51940: LD_INT 1
51942: PPUSH
51943: CALL_OW 3
51947: ST_TO_ADDR
// end ;
51948: LD_VAR 0 2
51952: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
51953: LD_INT 0
51955: PPUSH
51956: PPUSH
51957: PPUSH
51958: PPUSH
// sibRocketRange := 25 ;
51959: LD_ADDR_VAR 0 6
51963: PUSH
51964: LD_INT 25
51966: ST_TO_ADDR
// result := false ;
51967: LD_ADDR_VAR 0 4
51971: PUSH
51972: LD_INT 0
51974: ST_TO_ADDR
// for i := 0 to 5 do
51975: LD_ADDR_VAR 0 5
51979: PUSH
51980: DOUBLE
51981: LD_INT 0
51983: DEC
51984: ST_TO_ADDR
51985: LD_INT 5
51987: PUSH
51988: FOR_TO
51989: IFFALSE 52056
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
51991: LD_VAR 0 1
51995: PPUSH
51996: LD_VAR 0 5
52000: PPUSH
52001: LD_VAR 0 6
52005: PPUSH
52006: CALL_OW 272
52010: PPUSH
52011: LD_VAR 0 2
52015: PPUSH
52016: LD_VAR 0 5
52020: PPUSH
52021: LD_VAR 0 6
52025: PPUSH
52026: CALL_OW 273
52030: PPUSH
52031: LD_VAR 0 3
52035: PPUSH
52036: CALL_OW 309
52040: IFFALSE 52054
// begin result := true ;
52042: LD_ADDR_VAR 0 4
52046: PUSH
52047: LD_INT 1
52049: ST_TO_ADDR
// exit ;
52050: POP
52051: POP
52052: GO 52058
// end ;
52054: GO 51988
52056: POP
52057: POP
// end ;
52058: LD_VAR 0 4
52062: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
52063: LD_INT 0
52065: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
52066: LD_VAR 0 1
52070: PPUSH
52071: LD_VAR 0 2
52075: PPUSH
52076: LD_INT 0
52078: PPUSH
52079: LD_INT 0
52081: PPUSH
52082: LD_INT 1
52084: PPUSH
52085: LD_INT 0
52087: PPUSH
52088: CALL_OW 587
// end ;
52092: LD_VAR 0 3
52096: RET
// export function CenterOnNow ( unit ) ; begin
52097: LD_INT 0
52099: PPUSH
// result := IsInUnit ( unit ) ;
52100: LD_ADDR_VAR 0 2
52104: PUSH
52105: LD_VAR 0 1
52109: PPUSH
52110: CALL_OW 310
52114: ST_TO_ADDR
// if not result then
52115: LD_VAR 0 2
52119: NOT
52120: IFFALSE 52132
// result := unit ;
52122: LD_ADDR_VAR 0 2
52126: PUSH
52127: LD_VAR 0 1
52131: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
52132: LD_VAR 0 1
52136: PPUSH
52137: CALL_OW 87
// end ; end_of_file end_of_file
52141: LD_VAR 0 2
52145: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
52146: LD_VAR 0 1
52150: PPUSH
52151: LD_VAR 0 2
52155: PPUSH
52156: LD_VAR 0 3
52160: PPUSH
52161: LD_VAR 0 4
52165: PPUSH
52166: LD_VAR 0 5
52170: PPUSH
52171: LD_VAR 0 6
52175: PPUSH
52176: CALL 52360 0 6
// end ;
52180: PPOPN 6
52182: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
52183: LD_INT 0
52185: PPUSH
// begin if not units then
52186: LD_VAR 0 1
52190: NOT
52191: IFFALSE 52195
// exit ;
52193: GO 52195
// end ;
52195: PPOPN 7
52197: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
52198: CALL 52264 0 0
// end ; end_of_file
52202: PPOPN 1
52204: END
// export globalGameSaveCounter ; every 0 0$1 do
52205: GO 52207
52207: DISABLE
// begin enable ;
52208: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
52209: LD_STRING updateTimer(
52211: PUSH
52212: LD_OWVAR 1
52216: STR
52217: PUSH
52218: LD_STRING );
52220: STR
52221: PPUSH
52222: CALL_OW 559
// end ;
52226: END
// every 0 0$1 do
52227: GO 52229
52229: DISABLE
// begin globalGameSaveCounter := 0 ;
52230: LD_ADDR_EXP 34
52234: PUSH
52235: LD_INT 0
52237: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
52238: LD_STRING setGameSaveCounter(0)
52240: PPUSH
52241: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
52245: LD_STRING initStreamRollete();
52247: PPUSH
52248: CALL_OW 559
// InitStreamMode ;
52252: CALL 53578 0 0
// DefineStreamItems ( false ) ;
52256: LD_INT 0
52258: PPUSH
52259: CALL 54042 0 1
// end ;
52263: END
// export function SOS_MapStart ( ) ; begin
52264: LD_INT 0
52266: PPUSH
// if streamModeActive then
52267: LD_EXP 35
52271: IFFALSE 52280
// DefineStreamItems ( true ) ;
52273: LD_INT 1
52275: PPUSH
52276: CALL 54042 0 1
// UpdateLuaVariables ( ) ;
52280: CALL 52297 0 0
// UpdateFactoryWaypoints ( ) ;
52284: CALL 66903 0 0
// UpdateWarehouseGatheringPoints ( ) ;
52288: CALL 67160 0 0
// end ;
52292: LD_VAR 0 1
52296: RET
// function UpdateLuaVariables ( ) ; begin
52297: LD_INT 0
52299: PPUSH
// if globalGameSaveCounter then
52300: LD_EXP 34
52304: IFFALSE 52338
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
52306: LD_ADDR_EXP 34
52310: PUSH
52311: LD_EXP 34
52315: PPUSH
52316: CALL 49505 0 1
52320: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
52321: LD_STRING setGameSaveCounter(
52323: PUSH
52324: LD_EXP 34
52328: STR
52329: PUSH
52330: LD_STRING )
52332: STR
52333: PPUSH
52334: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
52338: LD_STRING setGameDifficulty(
52340: PUSH
52341: LD_OWVAR 67
52345: STR
52346: PUSH
52347: LD_STRING )
52349: STR
52350: PPUSH
52351: CALL_OW 559
// end ;
52355: LD_VAR 0 1
52359: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
52360: LD_INT 0
52362: PPUSH
// if p2 = stream_mode then
52363: LD_VAR 0 2
52367: PUSH
52368: LD_INT 100
52370: EQUAL
52371: IFFALSE 53374
// begin if not StreamModeActive then
52373: LD_EXP 35
52377: NOT
52378: IFFALSE 52388
// StreamModeActive := true ;
52380: LD_ADDR_EXP 35
52384: PUSH
52385: LD_INT 1
52387: ST_TO_ADDR
// if p3 = 0 then
52388: LD_VAR 0 3
52392: PUSH
52393: LD_INT 0
52395: EQUAL
52396: IFFALSE 52402
// InitStreamMode ;
52398: CALL 53578 0 0
// if p3 = 1 then
52402: LD_VAR 0 3
52406: PUSH
52407: LD_INT 1
52409: EQUAL
52410: IFFALSE 52420
// sRocket := true ;
52412: LD_ADDR_EXP 40
52416: PUSH
52417: LD_INT 1
52419: ST_TO_ADDR
// if p3 = 2 then
52420: LD_VAR 0 3
52424: PUSH
52425: LD_INT 2
52427: EQUAL
52428: IFFALSE 52438
// sSpeed := true ;
52430: LD_ADDR_EXP 39
52434: PUSH
52435: LD_INT 1
52437: ST_TO_ADDR
// if p3 = 3 then
52438: LD_VAR 0 3
52442: PUSH
52443: LD_INT 3
52445: EQUAL
52446: IFFALSE 52456
// sEngine := true ;
52448: LD_ADDR_EXP 41
52452: PUSH
52453: LD_INT 1
52455: ST_TO_ADDR
// if p3 = 4 then
52456: LD_VAR 0 3
52460: PUSH
52461: LD_INT 4
52463: EQUAL
52464: IFFALSE 52474
// sSpec := true ;
52466: LD_ADDR_EXP 38
52470: PUSH
52471: LD_INT 1
52473: ST_TO_ADDR
// if p3 = 5 then
52474: LD_VAR 0 3
52478: PUSH
52479: LD_INT 5
52481: EQUAL
52482: IFFALSE 52492
// sLevel := true ;
52484: LD_ADDR_EXP 42
52488: PUSH
52489: LD_INT 1
52491: ST_TO_ADDR
// if p3 = 6 then
52492: LD_VAR 0 3
52496: PUSH
52497: LD_INT 6
52499: EQUAL
52500: IFFALSE 52510
// sArmoury := true ;
52502: LD_ADDR_EXP 43
52506: PUSH
52507: LD_INT 1
52509: ST_TO_ADDR
// if p3 = 7 then
52510: LD_VAR 0 3
52514: PUSH
52515: LD_INT 7
52517: EQUAL
52518: IFFALSE 52528
// sRadar := true ;
52520: LD_ADDR_EXP 44
52524: PUSH
52525: LD_INT 1
52527: ST_TO_ADDR
// if p3 = 8 then
52528: LD_VAR 0 3
52532: PUSH
52533: LD_INT 8
52535: EQUAL
52536: IFFALSE 52546
// sBunker := true ;
52538: LD_ADDR_EXP 45
52542: PUSH
52543: LD_INT 1
52545: ST_TO_ADDR
// if p3 = 9 then
52546: LD_VAR 0 3
52550: PUSH
52551: LD_INT 9
52553: EQUAL
52554: IFFALSE 52564
// sHack := true ;
52556: LD_ADDR_EXP 46
52560: PUSH
52561: LD_INT 1
52563: ST_TO_ADDR
// if p3 = 10 then
52564: LD_VAR 0 3
52568: PUSH
52569: LD_INT 10
52571: EQUAL
52572: IFFALSE 52582
// sFire := true ;
52574: LD_ADDR_EXP 47
52578: PUSH
52579: LD_INT 1
52581: ST_TO_ADDR
// if p3 = 11 then
52582: LD_VAR 0 3
52586: PUSH
52587: LD_INT 11
52589: EQUAL
52590: IFFALSE 52600
// sRefresh := true ;
52592: LD_ADDR_EXP 48
52596: PUSH
52597: LD_INT 1
52599: ST_TO_ADDR
// if p3 = 12 then
52600: LD_VAR 0 3
52604: PUSH
52605: LD_INT 12
52607: EQUAL
52608: IFFALSE 52618
// sExp := true ;
52610: LD_ADDR_EXP 49
52614: PUSH
52615: LD_INT 1
52617: ST_TO_ADDR
// if p3 = 13 then
52618: LD_VAR 0 3
52622: PUSH
52623: LD_INT 13
52625: EQUAL
52626: IFFALSE 52636
// sDepot := true ;
52628: LD_ADDR_EXP 50
52632: PUSH
52633: LD_INT 1
52635: ST_TO_ADDR
// if p3 = 14 then
52636: LD_VAR 0 3
52640: PUSH
52641: LD_INT 14
52643: EQUAL
52644: IFFALSE 52654
// sFlag := true ;
52646: LD_ADDR_EXP 51
52650: PUSH
52651: LD_INT 1
52653: ST_TO_ADDR
// if p3 = 15 then
52654: LD_VAR 0 3
52658: PUSH
52659: LD_INT 15
52661: EQUAL
52662: IFFALSE 52672
// sKamikadze := true ;
52664: LD_ADDR_EXP 59
52668: PUSH
52669: LD_INT 1
52671: ST_TO_ADDR
// if p3 = 16 then
52672: LD_VAR 0 3
52676: PUSH
52677: LD_INT 16
52679: EQUAL
52680: IFFALSE 52690
// sTroll := true ;
52682: LD_ADDR_EXP 60
52686: PUSH
52687: LD_INT 1
52689: ST_TO_ADDR
// if p3 = 17 then
52690: LD_VAR 0 3
52694: PUSH
52695: LD_INT 17
52697: EQUAL
52698: IFFALSE 52708
// sSlow := true ;
52700: LD_ADDR_EXP 61
52704: PUSH
52705: LD_INT 1
52707: ST_TO_ADDR
// if p3 = 18 then
52708: LD_VAR 0 3
52712: PUSH
52713: LD_INT 18
52715: EQUAL
52716: IFFALSE 52726
// sLack := true ;
52718: LD_ADDR_EXP 62
52722: PUSH
52723: LD_INT 1
52725: ST_TO_ADDR
// if p3 = 19 then
52726: LD_VAR 0 3
52730: PUSH
52731: LD_INT 19
52733: EQUAL
52734: IFFALSE 52744
// sTank := true ;
52736: LD_ADDR_EXP 64
52740: PUSH
52741: LD_INT 1
52743: ST_TO_ADDR
// if p3 = 20 then
52744: LD_VAR 0 3
52748: PUSH
52749: LD_INT 20
52751: EQUAL
52752: IFFALSE 52762
// sRemote := true ;
52754: LD_ADDR_EXP 65
52758: PUSH
52759: LD_INT 1
52761: ST_TO_ADDR
// if p3 = 21 then
52762: LD_VAR 0 3
52766: PUSH
52767: LD_INT 21
52769: EQUAL
52770: IFFALSE 52780
// sPowell := true ;
52772: LD_ADDR_EXP 66
52776: PUSH
52777: LD_INT 1
52779: ST_TO_ADDR
// if p3 = 22 then
52780: LD_VAR 0 3
52784: PUSH
52785: LD_INT 22
52787: EQUAL
52788: IFFALSE 52798
// sTeleport := true ;
52790: LD_ADDR_EXP 69
52794: PUSH
52795: LD_INT 1
52797: ST_TO_ADDR
// if p3 = 23 then
52798: LD_VAR 0 3
52802: PUSH
52803: LD_INT 23
52805: EQUAL
52806: IFFALSE 52816
// sOilTower := true ;
52808: LD_ADDR_EXP 71
52812: PUSH
52813: LD_INT 1
52815: ST_TO_ADDR
// if p3 = 24 then
52816: LD_VAR 0 3
52820: PUSH
52821: LD_INT 24
52823: EQUAL
52824: IFFALSE 52834
// sShovel := true ;
52826: LD_ADDR_EXP 72
52830: PUSH
52831: LD_INT 1
52833: ST_TO_ADDR
// if p3 = 25 then
52834: LD_VAR 0 3
52838: PUSH
52839: LD_INT 25
52841: EQUAL
52842: IFFALSE 52852
// sSheik := true ;
52844: LD_ADDR_EXP 73
52848: PUSH
52849: LD_INT 1
52851: ST_TO_ADDR
// if p3 = 26 then
52852: LD_VAR 0 3
52856: PUSH
52857: LD_INT 26
52859: EQUAL
52860: IFFALSE 52870
// sEarthquake := true ;
52862: LD_ADDR_EXP 75
52866: PUSH
52867: LD_INT 1
52869: ST_TO_ADDR
// if p3 = 27 then
52870: LD_VAR 0 3
52874: PUSH
52875: LD_INT 27
52877: EQUAL
52878: IFFALSE 52888
// sAI := true ;
52880: LD_ADDR_EXP 76
52884: PUSH
52885: LD_INT 1
52887: ST_TO_ADDR
// if p3 = 28 then
52888: LD_VAR 0 3
52892: PUSH
52893: LD_INT 28
52895: EQUAL
52896: IFFALSE 52906
// sCargo := true ;
52898: LD_ADDR_EXP 79
52902: PUSH
52903: LD_INT 1
52905: ST_TO_ADDR
// if p3 = 29 then
52906: LD_VAR 0 3
52910: PUSH
52911: LD_INT 29
52913: EQUAL
52914: IFFALSE 52924
// sDLaser := true ;
52916: LD_ADDR_EXP 80
52920: PUSH
52921: LD_INT 1
52923: ST_TO_ADDR
// if p3 = 30 then
52924: LD_VAR 0 3
52928: PUSH
52929: LD_INT 30
52931: EQUAL
52932: IFFALSE 52942
// sExchange := true ;
52934: LD_ADDR_EXP 81
52938: PUSH
52939: LD_INT 1
52941: ST_TO_ADDR
// if p3 = 31 then
52942: LD_VAR 0 3
52946: PUSH
52947: LD_INT 31
52949: EQUAL
52950: IFFALSE 52960
// sFac := true ;
52952: LD_ADDR_EXP 82
52956: PUSH
52957: LD_INT 1
52959: ST_TO_ADDR
// if p3 = 32 then
52960: LD_VAR 0 3
52964: PUSH
52965: LD_INT 32
52967: EQUAL
52968: IFFALSE 52978
// sPower := true ;
52970: LD_ADDR_EXP 83
52974: PUSH
52975: LD_INT 1
52977: ST_TO_ADDR
// if p3 = 33 then
52978: LD_VAR 0 3
52982: PUSH
52983: LD_INT 33
52985: EQUAL
52986: IFFALSE 52996
// sRandom := true ;
52988: LD_ADDR_EXP 84
52992: PUSH
52993: LD_INT 1
52995: ST_TO_ADDR
// if p3 = 34 then
52996: LD_VAR 0 3
53000: PUSH
53001: LD_INT 34
53003: EQUAL
53004: IFFALSE 53014
// sShield := true ;
53006: LD_ADDR_EXP 85
53010: PUSH
53011: LD_INT 1
53013: ST_TO_ADDR
// if p3 = 35 then
53014: LD_VAR 0 3
53018: PUSH
53019: LD_INT 35
53021: EQUAL
53022: IFFALSE 53032
// sTime := true ;
53024: LD_ADDR_EXP 86
53028: PUSH
53029: LD_INT 1
53031: ST_TO_ADDR
// if p3 = 36 then
53032: LD_VAR 0 3
53036: PUSH
53037: LD_INT 36
53039: EQUAL
53040: IFFALSE 53050
// sTools := true ;
53042: LD_ADDR_EXP 87
53046: PUSH
53047: LD_INT 1
53049: ST_TO_ADDR
// if p3 = 101 then
53050: LD_VAR 0 3
53054: PUSH
53055: LD_INT 101
53057: EQUAL
53058: IFFALSE 53068
// sSold := true ;
53060: LD_ADDR_EXP 52
53064: PUSH
53065: LD_INT 1
53067: ST_TO_ADDR
// if p3 = 102 then
53068: LD_VAR 0 3
53072: PUSH
53073: LD_INT 102
53075: EQUAL
53076: IFFALSE 53086
// sDiff := true ;
53078: LD_ADDR_EXP 53
53082: PUSH
53083: LD_INT 1
53085: ST_TO_ADDR
// if p3 = 103 then
53086: LD_VAR 0 3
53090: PUSH
53091: LD_INT 103
53093: EQUAL
53094: IFFALSE 53104
// sFog := true ;
53096: LD_ADDR_EXP 56
53100: PUSH
53101: LD_INT 1
53103: ST_TO_ADDR
// if p3 = 104 then
53104: LD_VAR 0 3
53108: PUSH
53109: LD_INT 104
53111: EQUAL
53112: IFFALSE 53122
// sReset := true ;
53114: LD_ADDR_EXP 57
53118: PUSH
53119: LD_INT 1
53121: ST_TO_ADDR
// if p3 = 105 then
53122: LD_VAR 0 3
53126: PUSH
53127: LD_INT 105
53129: EQUAL
53130: IFFALSE 53140
// sSun := true ;
53132: LD_ADDR_EXP 58
53136: PUSH
53137: LD_INT 1
53139: ST_TO_ADDR
// if p3 = 106 then
53140: LD_VAR 0 3
53144: PUSH
53145: LD_INT 106
53147: EQUAL
53148: IFFALSE 53158
// sTiger := true ;
53150: LD_ADDR_EXP 54
53154: PUSH
53155: LD_INT 1
53157: ST_TO_ADDR
// if p3 = 107 then
53158: LD_VAR 0 3
53162: PUSH
53163: LD_INT 107
53165: EQUAL
53166: IFFALSE 53176
// sBomb := true ;
53168: LD_ADDR_EXP 55
53172: PUSH
53173: LD_INT 1
53175: ST_TO_ADDR
// if p3 = 108 then
53176: LD_VAR 0 3
53180: PUSH
53181: LD_INT 108
53183: EQUAL
53184: IFFALSE 53194
// sWound := true ;
53186: LD_ADDR_EXP 63
53190: PUSH
53191: LD_INT 1
53193: ST_TO_ADDR
// if p3 = 109 then
53194: LD_VAR 0 3
53198: PUSH
53199: LD_INT 109
53201: EQUAL
53202: IFFALSE 53212
// sBetray := true ;
53204: LD_ADDR_EXP 67
53208: PUSH
53209: LD_INT 1
53211: ST_TO_ADDR
// if p3 = 110 then
53212: LD_VAR 0 3
53216: PUSH
53217: LD_INT 110
53219: EQUAL
53220: IFFALSE 53230
// sContamin := true ;
53222: LD_ADDR_EXP 68
53226: PUSH
53227: LD_INT 1
53229: ST_TO_ADDR
// if p3 = 111 then
53230: LD_VAR 0 3
53234: PUSH
53235: LD_INT 111
53237: EQUAL
53238: IFFALSE 53248
// sOil := true ;
53240: LD_ADDR_EXP 70
53244: PUSH
53245: LD_INT 1
53247: ST_TO_ADDR
// if p3 = 112 then
53248: LD_VAR 0 3
53252: PUSH
53253: LD_INT 112
53255: EQUAL
53256: IFFALSE 53266
// sStu := true ;
53258: LD_ADDR_EXP 74
53262: PUSH
53263: LD_INT 1
53265: ST_TO_ADDR
// if p3 = 113 then
53266: LD_VAR 0 3
53270: PUSH
53271: LD_INT 113
53273: EQUAL
53274: IFFALSE 53284
// sBazooka := true ;
53276: LD_ADDR_EXP 77
53280: PUSH
53281: LD_INT 1
53283: ST_TO_ADDR
// if p3 = 114 then
53284: LD_VAR 0 3
53288: PUSH
53289: LD_INT 114
53291: EQUAL
53292: IFFALSE 53302
// sMortar := true ;
53294: LD_ADDR_EXP 78
53298: PUSH
53299: LD_INT 1
53301: ST_TO_ADDR
// if p3 = 115 then
53302: LD_VAR 0 3
53306: PUSH
53307: LD_INT 115
53309: EQUAL
53310: IFFALSE 53320
// sRanger := true ;
53312: LD_ADDR_EXP 88
53316: PUSH
53317: LD_INT 1
53319: ST_TO_ADDR
// if p3 = 116 then
53320: LD_VAR 0 3
53324: PUSH
53325: LD_INT 116
53327: EQUAL
53328: IFFALSE 53338
// sComputer := true ;
53330: LD_ADDR_EXP 89
53334: PUSH
53335: LD_INT 1
53337: ST_TO_ADDR
// if p3 = 117 then
53338: LD_VAR 0 3
53342: PUSH
53343: LD_INT 117
53345: EQUAL
53346: IFFALSE 53356
// s30 := true ;
53348: LD_ADDR_EXP 90
53352: PUSH
53353: LD_INT 1
53355: ST_TO_ADDR
// if p3 = 118 then
53356: LD_VAR 0 3
53360: PUSH
53361: LD_INT 118
53363: EQUAL
53364: IFFALSE 53374
// s60 := true ;
53366: LD_ADDR_EXP 91
53370: PUSH
53371: LD_INT 1
53373: ST_TO_ADDR
// end ; if p2 = hack_mode then
53374: LD_VAR 0 2
53378: PUSH
53379: LD_INT 101
53381: EQUAL
53382: IFFALSE 53510
// begin case p3 of 1 :
53384: LD_VAR 0 3
53388: PUSH
53389: LD_INT 1
53391: DOUBLE
53392: EQUAL
53393: IFTRUE 53397
53395: GO 53404
53397: POP
// hHackUnlimitedResources ; 2 :
53398: CALL 65649 0 0
53402: GO 53510
53404: LD_INT 2
53406: DOUBLE
53407: EQUAL
53408: IFTRUE 53412
53410: GO 53419
53412: POP
// hHackSetLevel10 ; 3 :
53413: CALL 65782 0 0
53417: GO 53510
53419: LD_INT 3
53421: DOUBLE
53422: EQUAL
53423: IFTRUE 53427
53425: GO 53434
53427: POP
// hHackSetLevel10YourUnits ; 4 :
53428: CALL 65867 0 0
53432: GO 53510
53434: LD_INT 4
53436: DOUBLE
53437: EQUAL
53438: IFTRUE 53442
53440: GO 53449
53442: POP
// hHackInvincible ; 5 :
53443: CALL 66315 0 0
53447: GO 53510
53449: LD_INT 5
53451: DOUBLE
53452: EQUAL
53453: IFTRUE 53457
53455: GO 53464
53457: POP
// hHackInvisible ; 6 :
53458: CALL 66426 0 0
53462: GO 53510
53464: LD_INT 6
53466: DOUBLE
53467: EQUAL
53468: IFTRUE 53472
53470: GO 53479
53472: POP
// hHackChangeYourSide ; 7 :
53473: CALL 66483 0 0
53477: GO 53510
53479: LD_INT 7
53481: DOUBLE
53482: EQUAL
53483: IFTRUE 53487
53485: GO 53494
53487: POP
// hHackChangeUnitSide ; 8 :
53488: CALL 66525 0 0
53492: GO 53510
53494: LD_INT 8
53496: DOUBLE
53497: EQUAL
53498: IFTRUE 53502
53500: GO 53509
53502: POP
// hHackFog ; end ;
53503: CALL 66626 0 0
53507: GO 53510
53509: POP
// end ; if p2 = game_save_mode then
53510: LD_VAR 0 2
53514: PUSH
53515: LD_INT 102
53517: EQUAL
53518: IFFALSE 53573
// begin if p3 = 1 then
53520: LD_VAR 0 3
53524: PUSH
53525: LD_INT 1
53527: EQUAL
53528: IFFALSE 53540
// globalGameSaveCounter := p4 ;
53530: LD_ADDR_EXP 34
53534: PUSH
53535: LD_VAR 0 4
53539: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
53540: LD_VAR 0 3
53544: PUSH
53545: LD_INT 2
53547: EQUAL
53548: PUSH
53549: LD_EXP 34
53553: AND
53554: IFFALSE 53573
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
53556: LD_STRING setGameSaveCounter(
53558: PUSH
53559: LD_EXP 34
53563: STR
53564: PUSH
53565: LD_STRING )
53567: STR
53568: PPUSH
53569: CALL_OW 559
// end ; end ;
53573: LD_VAR 0 7
53577: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
53578: LD_INT 0
53580: PPUSH
// streamModeActive := false ;
53581: LD_ADDR_EXP 35
53585: PUSH
53586: LD_INT 0
53588: ST_TO_ADDR
// normalCounter := 36 ;
53589: LD_ADDR_EXP 36
53593: PUSH
53594: LD_INT 36
53596: ST_TO_ADDR
// hardcoreCounter := 18 ;
53597: LD_ADDR_EXP 37
53601: PUSH
53602: LD_INT 18
53604: ST_TO_ADDR
// sRocket := false ;
53605: LD_ADDR_EXP 40
53609: PUSH
53610: LD_INT 0
53612: ST_TO_ADDR
// sSpeed := false ;
53613: LD_ADDR_EXP 39
53617: PUSH
53618: LD_INT 0
53620: ST_TO_ADDR
// sEngine := false ;
53621: LD_ADDR_EXP 41
53625: PUSH
53626: LD_INT 0
53628: ST_TO_ADDR
// sSpec := false ;
53629: LD_ADDR_EXP 38
53633: PUSH
53634: LD_INT 0
53636: ST_TO_ADDR
// sLevel := false ;
53637: LD_ADDR_EXP 42
53641: PUSH
53642: LD_INT 0
53644: ST_TO_ADDR
// sArmoury := false ;
53645: LD_ADDR_EXP 43
53649: PUSH
53650: LD_INT 0
53652: ST_TO_ADDR
// sRadar := false ;
53653: LD_ADDR_EXP 44
53657: PUSH
53658: LD_INT 0
53660: ST_TO_ADDR
// sBunker := false ;
53661: LD_ADDR_EXP 45
53665: PUSH
53666: LD_INT 0
53668: ST_TO_ADDR
// sHack := false ;
53669: LD_ADDR_EXP 46
53673: PUSH
53674: LD_INT 0
53676: ST_TO_ADDR
// sFire := false ;
53677: LD_ADDR_EXP 47
53681: PUSH
53682: LD_INT 0
53684: ST_TO_ADDR
// sRefresh := false ;
53685: LD_ADDR_EXP 48
53689: PUSH
53690: LD_INT 0
53692: ST_TO_ADDR
// sExp := false ;
53693: LD_ADDR_EXP 49
53697: PUSH
53698: LD_INT 0
53700: ST_TO_ADDR
// sDepot := false ;
53701: LD_ADDR_EXP 50
53705: PUSH
53706: LD_INT 0
53708: ST_TO_ADDR
// sFlag := false ;
53709: LD_ADDR_EXP 51
53713: PUSH
53714: LD_INT 0
53716: ST_TO_ADDR
// sKamikadze := false ;
53717: LD_ADDR_EXP 59
53721: PUSH
53722: LD_INT 0
53724: ST_TO_ADDR
// sTroll := false ;
53725: LD_ADDR_EXP 60
53729: PUSH
53730: LD_INT 0
53732: ST_TO_ADDR
// sSlow := false ;
53733: LD_ADDR_EXP 61
53737: PUSH
53738: LD_INT 0
53740: ST_TO_ADDR
// sLack := false ;
53741: LD_ADDR_EXP 62
53745: PUSH
53746: LD_INT 0
53748: ST_TO_ADDR
// sTank := false ;
53749: LD_ADDR_EXP 64
53753: PUSH
53754: LD_INT 0
53756: ST_TO_ADDR
// sRemote := false ;
53757: LD_ADDR_EXP 65
53761: PUSH
53762: LD_INT 0
53764: ST_TO_ADDR
// sPowell := false ;
53765: LD_ADDR_EXP 66
53769: PUSH
53770: LD_INT 0
53772: ST_TO_ADDR
// sTeleport := false ;
53773: LD_ADDR_EXP 69
53777: PUSH
53778: LD_INT 0
53780: ST_TO_ADDR
// sOilTower := false ;
53781: LD_ADDR_EXP 71
53785: PUSH
53786: LD_INT 0
53788: ST_TO_ADDR
// sShovel := false ;
53789: LD_ADDR_EXP 72
53793: PUSH
53794: LD_INT 0
53796: ST_TO_ADDR
// sSheik := false ;
53797: LD_ADDR_EXP 73
53801: PUSH
53802: LD_INT 0
53804: ST_TO_ADDR
// sEarthquake := false ;
53805: LD_ADDR_EXP 75
53809: PUSH
53810: LD_INT 0
53812: ST_TO_ADDR
// sAI := false ;
53813: LD_ADDR_EXP 76
53817: PUSH
53818: LD_INT 0
53820: ST_TO_ADDR
// sCargo := false ;
53821: LD_ADDR_EXP 79
53825: PUSH
53826: LD_INT 0
53828: ST_TO_ADDR
// sDLaser := false ;
53829: LD_ADDR_EXP 80
53833: PUSH
53834: LD_INT 0
53836: ST_TO_ADDR
// sExchange := false ;
53837: LD_ADDR_EXP 81
53841: PUSH
53842: LD_INT 0
53844: ST_TO_ADDR
// sFac := false ;
53845: LD_ADDR_EXP 82
53849: PUSH
53850: LD_INT 0
53852: ST_TO_ADDR
// sPower := false ;
53853: LD_ADDR_EXP 83
53857: PUSH
53858: LD_INT 0
53860: ST_TO_ADDR
// sRandom := false ;
53861: LD_ADDR_EXP 84
53865: PUSH
53866: LD_INT 0
53868: ST_TO_ADDR
// sShield := false ;
53869: LD_ADDR_EXP 85
53873: PUSH
53874: LD_INT 0
53876: ST_TO_ADDR
// sTime := false ;
53877: LD_ADDR_EXP 86
53881: PUSH
53882: LD_INT 0
53884: ST_TO_ADDR
// sTools := false ;
53885: LD_ADDR_EXP 87
53889: PUSH
53890: LD_INT 0
53892: ST_TO_ADDR
// sSold := false ;
53893: LD_ADDR_EXP 52
53897: PUSH
53898: LD_INT 0
53900: ST_TO_ADDR
// sDiff := false ;
53901: LD_ADDR_EXP 53
53905: PUSH
53906: LD_INT 0
53908: ST_TO_ADDR
// sFog := false ;
53909: LD_ADDR_EXP 56
53913: PUSH
53914: LD_INT 0
53916: ST_TO_ADDR
// sReset := false ;
53917: LD_ADDR_EXP 57
53921: PUSH
53922: LD_INT 0
53924: ST_TO_ADDR
// sSun := false ;
53925: LD_ADDR_EXP 58
53929: PUSH
53930: LD_INT 0
53932: ST_TO_ADDR
// sTiger := false ;
53933: LD_ADDR_EXP 54
53937: PUSH
53938: LD_INT 0
53940: ST_TO_ADDR
// sBomb := false ;
53941: LD_ADDR_EXP 55
53945: PUSH
53946: LD_INT 0
53948: ST_TO_ADDR
// sWound := false ;
53949: LD_ADDR_EXP 63
53953: PUSH
53954: LD_INT 0
53956: ST_TO_ADDR
// sBetray := false ;
53957: LD_ADDR_EXP 67
53961: PUSH
53962: LD_INT 0
53964: ST_TO_ADDR
// sContamin := false ;
53965: LD_ADDR_EXP 68
53969: PUSH
53970: LD_INT 0
53972: ST_TO_ADDR
// sOil := false ;
53973: LD_ADDR_EXP 70
53977: PUSH
53978: LD_INT 0
53980: ST_TO_ADDR
// sStu := false ;
53981: LD_ADDR_EXP 74
53985: PUSH
53986: LD_INT 0
53988: ST_TO_ADDR
// sBazooka := false ;
53989: LD_ADDR_EXP 77
53993: PUSH
53994: LD_INT 0
53996: ST_TO_ADDR
// sMortar := false ;
53997: LD_ADDR_EXP 78
54001: PUSH
54002: LD_INT 0
54004: ST_TO_ADDR
// sRanger := false ;
54005: LD_ADDR_EXP 88
54009: PUSH
54010: LD_INT 0
54012: ST_TO_ADDR
// sComputer := false ;
54013: LD_ADDR_EXP 89
54017: PUSH
54018: LD_INT 0
54020: ST_TO_ADDR
// s30 := false ;
54021: LD_ADDR_EXP 90
54025: PUSH
54026: LD_INT 0
54028: ST_TO_ADDR
// s60 := false ;
54029: LD_ADDR_EXP 91
54033: PUSH
54034: LD_INT 0
54036: ST_TO_ADDR
// end ;
54037: LD_VAR 0 1
54041: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
54042: LD_INT 0
54044: PPUSH
54045: PPUSH
54046: PPUSH
54047: PPUSH
54048: PPUSH
54049: PPUSH
54050: PPUSH
// result := [ ] ;
54051: LD_ADDR_VAR 0 2
54055: PUSH
54056: EMPTY
54057: ST_TO_ADDR
// if campaign_id = 1 then
54058: LD_OWVAR 69
54062: PUSH
54063: LD_INT 1
54065: EQUAL
54066: IFFALSE 57232
// begin case mission_number of 1 :
54068: LD_OWVAR 70
54072: PUSH
54073: LD_INT 1
54075: DOUBLE
54076: EQUAL
54077: IFTRUE 54081
54079: GO 54157
54081: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
54082: LD_ADDR_VAR 0 2
54086: PUSH
54087: LD_INT 2
54089: PUSH
54090: LD_INT 4
54092: PUSH
54093: LD_INT 11
54095: PUSH
54096: LD_INT 12
54098: PUSH
54099: LD_INT 15
54101: PUSH
54102: LD_INT 16
54104: PUSH
54105: LD_INT 22
54107: PUSH
54108: LD_INT 23
54110: PUSH
54111: LD_INT 26
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 101
54127: PUSH
54128: LD_INT 102
54130: PUSH
54131: LD_INT 106
54133: PUSH
54134: LD_INT 116
54136: PUSH
54137: LD_INT 117
54139: PUSH
54140: LD_INT 118
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: ST_TO_ADDR
54155: GO 57230
54157: LD_INT 2
54159: DOUBLE
54160: EQUAL
54161: IFTRUE 54165
54163: GO 54249
54165: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
54166: LD_ADDR_VAR 0 2
54170: PUSH
54171: LD_INT 2
54173: PUSH
54174: LD_INT 4
54176: PUSH
54177: LD_INT 11
54179: PUSH
54180: LD_INT 12
54182: PUSH
54183: LD_INT 15
54185: PUSH
54186: LD_INT 16
54188: PUSH
54189: LD_INT 22
54191: PUSH
54192: LD_INT 23
54194: PUSH
54195: LD_INT 26
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 101
54211: PUSH
54212: LD_INT 102
54214: PUSH
54215: LD_INT 105
54217: PUSH
54218: LD_INT 106
54220: PUSH
54221: LD_INT 108
54223: PUSH
54224: LD_INT 116
54226: PUSH
54227: LD_INT 117
54229: PUSH
54230: LD_INT 118
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: ST_TO_ADDR
54247: GO 57230
54249: LD_INT 3
54251: DOUBLE
54252: EQUAL
54253: IFTRUE 54257
54255: GO 54345
54257: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
54258: LD_ADDR_VAR 0 2
54262: PUSH
54263: LD_INT 2
54265: PUSH
54266: LD_INT 4
54268: PUSH
54269: LD_INT 5
54271: PUSH
54272: LD_INT 11
54274: PUSH
54275: LD_INT 12
54277: PUSH
54278: LD_INT 15
54280: PUSH
54281: LD_INT 16
54283: PUSH
54284: LD_INT 22
54286: PUSH
54287: LD_INT 26
54289: PUSH
54290: LD_INT 36
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 101
54307: PUSH
54308: LD_INT 102
54310: PUSH
54311: LD_INT 105
54313: PUSH
54314: LD_INT 106
54316: PUSH
54317: LD_INT 108
54319: PUSH
54320: LD_INT 116
54322: PUSH
54323: LD_INT 117
54325: PUSH
54326: LD_INT 118
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: ST_TO_ADDR
54343: GO 57230
54345: LD_INT 4
54347: DOUBLE
54348: EQUAL
54349: IFTRUE 54353
54351: GO 54449
54353: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
54354: LD_ADDR_VAR 0 2
54358: PUSH
54359: LD_INT 2
54361: PUSH
54362: LD_INT 4
54364: PUSH
54365: LD_INT 5
54367: PUSH
54368: LD_INT 8
54370: PUSH
54371: LD_INT 11
54373: PUSH
54374: LD_INT 12
54376: PUSH
54377: LD_INT 15
54379: PUSH
54380: LD_INT 16
54382: PUSH
54383: LD_INT 22
54385: PUSH
54386: LD_INT 23
54388: PUSH
54389: LD_INT 26
54391: PUSH
54392: LD_INT 36
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 101
54411: PUSH
54412: LD_INT 102
54414: PUSH
54415: LD_INT 105
54417: PUSH
54418: LD_INT 106
54420: PUSH
54421: LD_INT 108
54423: PUSH
54424: LD_INT 116
54426: PUSH
54427: LD_INT 117
54429: PUSH
54430: LD_INT 118
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: ST_TO_ADDR
54447: GO 57230
54449: LD_INT 5
54451: DOUBLE
54452: EQUAL
54453: IFTRUE 54457
54455: GO 54569
54457: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
54458: LD_ADDR_VAR 0 2
54462: PUSH
54463: LD_INT 2
54465: PUSH
54466: LD_INT 4
54468: PUSH
54469: LD_INT 5
54471: PUSH
54472: LD_INT 6
54474: PUSH
54475: LD_INT 8
54477: PUSH
54478: LD_INT 11
54480: PUSH
54481: LD_INT 12
54483: PUSH
54484: LD_INT 15
54486: PUSH
54487: LD_INT 16
54489: PUSH
54490: LD_INT 22
54492: PUSH
54493: LD_INT 23
54495: PUSH
54496: LD_INT 25
54498: PUSH
54499: LD_INT 26
54501: PUSH
54502: LD_INT 36
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 101
54523: PUSH
54524: LD_INT 102
54526: PUSH
54527: LD_INT 105
54529: PUSH
54530: LD_INT 106
54532: PUSH
54533: LD_INT 108
54535: PUSH
54536: LD_INT 109
54538: PUSH
54539: LD_INT 112
54541: PUSH
54542: LD_INT 116
54544: PUSH
54545: LD_INT 117
54547: PUSH
54548: LD_INT 118
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: ST_TO_ADDR
54567: GO 57230
54569: LD_INT 6
54571: DOUBLE
54572: EQUAL
54573: IFTRUE 54577
54575: GO 54709
54577: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
54578: LD_ADDR_VAR 0 2
54582: PUSH
54583: LD_INT 2
54585: PUSH
54586: LD_INT 4
54588: PUSH
54589: LD_INT 5
54591: PUSH
54592: LD_INT 6
54594: PUSH
54595: LD_INT 8
54597: PUSH
54598: LD_INT 11
54600: PUSH
54601: LD_INT 12
54603: PUSH
54604: LD_INT 15
54606: PUSH
54607: LD_INT 16
54609: PUSH
54610: LD_INT 20
54612: PUSH
54613: LD_INT 21
54615: PUSH
54616: LD_INT 22
54618: PUSH
54619: LD_INT 23
54621: PUSH
54622: LD_INT 25
54624: PUSH
54625: LD_INT 26
54627: PUSH
54628: LD_INT 30
54630: PUSH
54631: LD_INT 31
54633: PUSH
54634: LD_INT 32
54636: PUSH
54637: LD_INT 36
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 101
54663: PUSH
54664: LD_INT 102
54666: PUSH
54667: LD_INT 105
54669: PUSH
54670: LD_INT 106
54672: PUSH
54673: LD_INT 108
54675: PUSH
54676: LD_INT 109
54678: PUSH
54679: LD_INT 112
54681: PUSH
54682: LD_INT 116
54684: PUSH
54685: LD_INT 117
54687: PUSH
54688: LD_INT 118
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: ST_TO_ADDR
54707: GO 57230
54709: LD_INT 7
54711: DOUBLE
54712: EQUAL
54713: IFTRUE 54717
54715: GO 54829
54717: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
54718: LD_ADDR_VAR 0 2
54722: PUSH
54723: LD_INT 2
54725: PUSH
54726: LD_INT 4
54728: PUSH
54729: LD_INT 5
54731: PUSH
54732: LD_INT 7
54734: PUSH
54735: LD_INT 11
54737: PUSH
54738: LD_INT 12
54740: PUSH
54741: LD_INT 15
54743: PUSH
54744: LD_INT 16
54746: PUSH
54747: LD_INT 20
54749: PUSH
54750: LD_INT 21
54752: PUSH
54753: LD_INT 22
54755: PUSH
54756: LD_INT 23
54758: PUSH
54759: LD_INT 25
54761: PUSH
54762: LD_INT 26
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 101
54783: PUSH
54784: LD_INT 102
54786: PUSH
54787: LD_INT 103
54789: PUSH
54790: LD_INT 105
54792: PUSH
54793: LD_INT 106
54795: PUSH
54796: LD_INT 108
54798: PUSH
54799: LD_INT 112
54801: PUSH
54802: LD_INT 116
54804: PUSH
54805: LD_INT 117
54807: PUSH
54808: LD_INT 118
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: ST_TO_ADDR
54827: GO 57230
54829: LD_INT 8
54831: DOUBLE
54832: EQUAL
54833: IFTRUE 54837
54835: GO 54977
54837: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
54838: LD_ADDR_VAR 0 2
54842: PUSH
54843: LD_INT 2
54845: PUSH
54846: LD_INT 4
54848: PUSH
54849: LD_INT 5
54851: PUSH
54852: LD_INT 6
54854: PUSH
54855: LD_INT 7
54857: PUSH
54858: LD_INT 8
54860: PUSH
54861: LD_INT 11
54863: PUSH
54864: LD_INT 12
54866: PUSH
54867: LD_INT 15
54869: PUSH
54870: LD_INT 16
54872: PUSH
54873: LD_INT 20
54875: PUSH
54876: LD_INT 21
54878: PUSH
54879: LD_INT 22
54881: PUSH
54882: LD_INT 23
54884: PUSH
54885: LD_INT 25
54887: PUSH
54888: LD_INT 26
54890: PUSH
54891: LD_INT 30
54893: PUSH
54894: LD_INT 31
54896: PUSH
54897: LD_INT 32
54899: PUSH
54900: LD_INT 36
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 101
54927: PUSH
54928: LD_INT 102
54930: PUSH
54931: LD_INT 103
54933: PUSH
54934: LD_INT 105
54936: PUSH
54937: LD_INT 106
54939: PUSH
54940: LD_INT 108
54942: PUSH
54943: LD_INT 109
54945: PUSH
54946: LD_INT 112
54948: PUSH
54949: LD_INT 116
54951: PUSH
54952: LD_INT 117
54954: PUSH
54955: LD_INT 118
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: ST_TO_ADDR
54975: GO 57230
54977: LD_INT 9
54979: DOUBLE
54980: EQUAL
54981: IFTRUE 54985
54983: GO 55133
54985: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
54986: LD_ADDR_VAR 0 2
54990: PUSH
54991: LD_INT 2
54993: PUSH
54994: LD_INT 4
54996: PUSH
54997: LD_INT 5
54999: PUSH
55000: LD_INT 6
55002: PUSH
55003: LD_INT 7
55005: PUSH
55006: LD_INT 8
55008: PUSH
55009: LD_INT 11
55011: PUSH
55012: LD_INT 12
55014: PUSH
55015: LD_INT 15
55017: PUSH
55018: LD_INT 16
55020: PUSH
55021: LD_INT 20
55023: PUSH
55024: LD_INT 21
55026: PUSH
55027: LD_INT 22
55029: PUSH
55030: LD_INT 23
55032: PUSH
55033: LD_INT 25
55035: PUSH
55036: LD_INT 26
55038: PUSH
55039: LD_INT 28
55041: PUSH
55042: LD_INT 30
55044: PUSH
55045: LD_INT 31
55047: PUSH
55048: LD_INT 32
55050: PUSH
55051: LD_INT 36
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 101
55079: PUSH
55080: LD_INT 102
55082: PUSH
55083: LD_INT 103
55085: PUSH
55086: LD_INT 105
55088: PUSH
55089: LD_INT 106
55091: PUSH
55092: LD_INT 108
55094: PUSH
55095: LD_INT 109
55097: PUSH
55098: LD_INT 112
55100: PUSH
55101: LD_INT 114
55103: PUSH
55104: LD_INT 116
55106: PUSH
55107: LD_INT 117
55109: PUSH
55110: LD_INT 118
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: ST_TO_ADDR
55131: GO 57230
55133: LD_INT 10
55135: DOUBLE
55136: EQUAL
55137: IFTRUE 55141
55139: GO 55337
55141: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
55142: LD_ADDR_VAR 0 2
55146: PUSH
55147: LD_INT 2
55149: PUSH
55150: LD_INT 4
55152: PUSH
55153: LD_INT 5
55155: PUSH
55156: LD_INT 6
55158: PUSH
55159: LD_INT 7
55161: PUSH
55162: LD_INT 8
55164: PUSH
55165: LD_INT 9
55167: PUSH
55168: LD_INT 10
55170: PUSH
55171: LD_INT 11
55173: PUSH
55174: LD_INT 12
55176: PUSH
55177: LD_INT 13
55179: PUSH
55180: LD_INT 14
55182: PUSH
55183: LD_INT 15
55185: PUSH
55186: LD_INT 16
55188: PUSH
55189: LD_INT 17
55191: PUSH
55192: LD_INT 18
55194: PUSH
55195: LD_INT 19
55197: PUSH
55198: LD_INT 20
55200: PUSH
55201: LD_INT 21
55203: PUSH
55204: LD_INT 22
55206: PUSH
55207: LD_INT 23
55209: PUSH
55210: LD_INT 24
55212: PUSH
55213: LD_INT 25
55215: PUSH
55216: LD_INT 26
55218: PUSH
55219: LD_INT 28
55221: PUSH
55222: LD_INT 30
55224: PUSH
55225: LD_INT 31
55227: PUSH
55228: LD_INT 32
55230: PUSH
55231: LD_INT 36
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 101
55267: PUSH
55268: LD_INT 102
55270: PUSH
55271: LD_INT 103
55273: PUSH
55274: LD_INT 104
55276: PUSH
55277: LD_INT 105
55279: PUSH
55280: LD_INT 106
55282: PUSH
55283: LD_INT 107
55285: PUSH
55286: LD_INT 108
55288: PUSH
55289: LD_INT 109
55291: PUSH
55292: LD_INT 110
55294: PUSH
55295: LD_INT 111
55297: PUSH
55298: LD_INT 112
55300: PUSH
55301: LD_INT 114
55303: PUSH
55304: LD_INT 116
55306: PUSH
55307: LD_INT 117
55309: PUSH
55310: LD_INT 118
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: ST_TO_ADDR
55335: GO 57230
55337: LD_INT 11
55339: DOUBLE
55340: EQUAL
55341: IFTRUE 55345
55343: GO 55549
55345: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
55346: LD_ADDR_VAR 0 2
55350: PUSH
55351: LD_INT 2
55353: PUSH
55354: LD_INT 3
55356: PUSH
55357: LD_INT 4
55359: PUSH
55360: LD_INT 5
55362: PUSH
55363: LD_INT 6
55365: PUSH
55366: LD_INT 7
55368: PUSH
55369: LD_INT 8
55371: PUSH
55372: LD_INT 9
55374: PUSH
55375: LD_INT 10
55377: PUSH
55378: LD_INT 11
55380: PUSH
55381: LD_INT 12
55383: PUSH
55384: LD_INT 13
55386: PUSH
55387: LD_INT 14
55389: PUSH
55390: LD_INT 15
55392: PUSH
55393: LD_INT 16
55395: PUSH
55396: LD_INT 17
55398: PUSH
55399: LD_INT 18
55401: PUSH
55402: LD_INT 19
55404: PUSH
55405: LD_INT 20
55407: PUSH
55408: LD_INT 21
55410: PUSH
55411: LD_INT 22
55413: PUSH
55414: LD_INT 23
55416: PUSH
55417: LD_INT 24
55419: PUSH
55420: LD_INT 25
55422: PUSH
55423: LD_INT 26
55425: PUSH
55426: LD_INT 28
55428: PUSH
55429: LD_INT 30
55431: PUSH
55432: LD_INT 31
55434: PUSH
55435: LD_INT 32
55437: PUSH
55438: LD_INT 34
55440: PUSH
55441: LD_INT 36
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 101
55479: PUSH
55480: LD_INT 102
55482: PUSH
55483: LD_INT 103
55485: PUSH
55486: LD_INT 104
55488: PUSH
55489: LD_INT 105
55491: PUSH
55492: LD_INT 106
55494: PUSH
55495: LD_INT 107
55497: PUSH
55498: LD_INT 108
55500: PUSH
55501: LD_INT 109
55503: PUSH
55504: LD_INT 110
55506: PUSH
55507: LD_INT 111
55509: PUSH
55510: LD_INT 112
55512: PUSH
55513: LD_INT 114
55515: PUSH
55516: LD_INT 116
55518: PUSH
55519: LD_INT 117
55521: PUSH
55522: LD_INT 118
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: ST_TO_ADDR
55547: GO 57230
55549: LD_INT 12
55551: DOUBLE
55552: EQUAL
55553: IFTRUE 55557
55555: GO 55777
55557: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
55558: LD_ADDR_VAR 0 2
55562: PUSH
55563: LD_INT 1
55565: PUSH
55566: LD_INT 2
55568: PUSH
55569: LD_INT 3
55571: PUSH
55572: LD_INT 4
55574: PUSH
55575: LD_INT 5
55577: PUSH
55578: LD_INT 6
55580: PUSH
55581: LD_INT 7
55583: PUSH
55584: LD_INT 8
55586: PUSH
55587: LD_INT 9
55589: PUSH
55590: LD_INT 10
55592: PUSH
55593: LD_INT 11
55595: PUSH
55596: LD_INT 12
55598: PUSH
55599: LD_INT 13
55601: PUSH
55602: LD_INT 14
55604: PUSH
55605: LD_INT 15
55607: PUSH
55608: LD_INT 16
55610: PUSH
55611: LD_INT 17
55613: PUSH
55614: LD_INT 18
55616: PUSH
55617: LD_INT 19
55619: PUSH
55620: LD_INT 20
55622: PUSH
55623: LD_INT 21
55625: PUSH
55626: LD_INT 22
55628: PUSH
55629: LD_INT 23
55631: PUSH
55632: LD_INT 24
55634: PUSH
55635: LD_INT 25
55637: PUSH
55638: LD_INT 26
55640: PUSH
55641: LD_INT 27
55643: PUSH
55644: LD_INT 28
55646: PUSH
55647: LD_INT 30
55649: PUSH
55650: LD_INT 31
55652: PUSH
55653: LD_INT 32
55655: PUSH
55656: LD_INT 33
55658: PUSH
55659: LD_INT 34
55661: PUSH
55662: LD_INT 36
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 101
55703: PUSH
55704: LD_INT 102
55706: PUSH
55707: LD_INT 103
55709: PUSH
55710: LD_INT 104
55712: PUSH
55713: LD_INT 105
55715: PUSH
55716: LD_INT 106
55718: PUSH
55719: LD_INT 107
55721: PUSH
55722: LD_INT 108
55724: PUSH
55725: LD_INT 109
55727: PUSH
55728: LD_INT 110
55730: PUSH
55731: LD_INT 111
55733: PUSH
55734: LD_INT 112
55736: PUSH
55737: LD_INT 113
55739: PUSH
55740: LD_INT 114
55742: PUSH
55743: LD_INT 116
55745: PUSH
55746: LD_INT 117
55748: PUSH
55749: LD_INT 118
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: ST_TO_ADDR
55775: GO 57230
55777: LD_INT 13
55779: DOUBLE
55780: EQUAL
55781: IFTRUE 55785
55783: GO 55993
55785: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
55786: LD_ADDR_VAR 0 2
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: LD_INT 2
55796: PUSH
55797: LD_INT 3
55799: PUSH
55800: LD_INT 4
55802: PUSH
55803: LD_INT 5
55805: PUSH
55806: LD_INT 8
55808: PUSH
55809: LD_INT 9
55811: PUSH
55812: LD_INT 10
55814: PUSH
55815: LD_INT 11
55817: PUSH
55818: LD_INT 12
55820: PUSH
55821: LD_INT 14
55823: PUSH
55824: LD_INT 15
55826: PUSH
55827: LD_INT 16
55829: PUSH
55830: LD_INT 17
55832: PUSH
55833: LD_INT 18
55835: PUSH
55836: LD_INT 19
55838: PUSH
55839: LD_INT 20
55841: PUSH
55842: LD_INT 21
55844: PUSH
55845: LD_INT 22
55847: PUSH
55848: LD_INT 23
55850: PUSH
55851: LD_INT 24
55853: PUSH
55854: LD_INT 25
55856: PUSH
55857: LD_INT 26
55859: PUSH
55860: LD_INT 27
55862: PUSH
55863: LD_INT 28
55865: PUSH
55866: LD_INT 30
55868: PUSH
55869: LD_INT 31
55871: PUSH
55872: LD_INT 32
55874: PUSH
55875: LD_INT 33
55877: PUSH
55878: LD_INT 34
55880: PUSH
55881: LD_INT 36
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 101
55919: PUSH
55920: LD_INT 102
55922: PUSH
55923: LD_INT 103
55925: PUSH
55926: LD_INT 104
55928: PUSH
55929: LD_INT 105
55931: PUSH
55932: LD_INT 106
55934: PUSH
55935: LD_INT 107
55937: PUSH
55938: LD_INT 108
55940: PUSH
55941: LD_INT 109
55943: PUSH
55944: LD_INT 110
55946: PUSH
55947: LD_INT 111
55949: PUSH
55950: LD_INT 112
55952: PUSH
55953: LD_INT 113
55955: PUSH
55956: LD_INT 114
55958: PUSH
55959: LD_INT 116
55961: PUSH
55962: LD_INT 117
55964: PUSH
55965: LD_INT 118
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: ST_TO_ADDR
55991: GO 57230
55993: LD_INT 14
55995: DOUBLE
55996: EQUAL
55997: IFTRUE 56001
55999: GO 56225
56001: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
56002: LD_ADDR_VAR 0 2
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: LD_INT 2
56012: PUSH
56013: LD_INT 3
56015: PUSH
56016: LD_INT 4
56018: PUSH
56019: LD_INT 5
56021: PUSH
56022: LD_INT 6
56024: PUSH
56025: LD_INT 7
56027: PUSH
56028: LD_INT 8
56030: PUSH
56031: LD_INT 9
56033: PUSH
56034: LD_INT 10
56036: PUSH
56037: LD_INT 11
56039: PUSH
56040: LD_INT 12
56042: PUSH
56043: LD_INT 13
56045: PUSH
56046: LD_INT 14
56048: PUSH
56049: LD_INT 15
56051: PUSH
56052: LD_INT 16
56054: PUSH
56055: LD_INT 17
56057: PUSH
56058: LD_INT 18
56060: PUSH
56061: LD_INT 19
56063: PUSH
56064: LD_INT 20
56066: PUSH
56067: LD_INT 21
56069: PUSH
56070: LD_INT 22
56072: PUSH
56073: LD_INT 23
56075: PUSH
56076: LD_INT 24
56078: PUSH
56079: LD_INT 25
56081: PUSH
56082: LD_INT 26
56084: PUSH
56085: LD_INT 27
56087: PUSH
56088: LD_INT 28
56090: PUSH
56091: LD_INT 29
56093: PUSH
56094: LD_INT 30
56096: PUSH
56097: LD_INT 31
56099: PUSH
56100: LD_INT 32
56102: PUSH
56103: LD_INT 33
56105: PUSH
56106: LD_INT 34
56108: PUSH
56109: LD_INT 36
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 101
56151: PUSH
56152: LD_INT 102
56154: PUSH
56155: LD_INT 103
56157: PUSH
56158: LD_INT 104
56160: PUSH
56161: LD_INT 105
56163: PUSH
56164: LD_INT 106
56166: PUSH
56167: LD_INT 107
56169: PUSH
56170: LD_INT 108
56172: PUSH
56173: LD_INT 109
56175: PUSH
56176: LD_INT 110
56178: PUSH
56179: LD_INT 111
56181: PUSH
56182: LD_INT 112
56184: PUSH
56185: LD_INT 113
56187: PUSH
56188: LD_INT 114
56190: PUSH
56191: LD_INT 116
56193: PUSH
56194: LD_INT 117
56196: PUSH
56197: LD_INT 118
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: ST_TO_ADDR
56223: GO 57230
56225: LD_INT 15
56227: DOUBLE
56228: EQUAL
56229: IFTRUE 56233
56231: GO 56457
56233: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
56234: LD_ADDR_VAR 0 2
56238: PUSH
56239: LD_INT 1
56241: PUSH
56242: LD_INT 2
56244: PUSH
56245: LD_INT 3
56247: PUSH
56248: LD_INT 4
56250: PUSH
56251: LD_INT 5
56253: PUSH
56254: LD_INT 6
56256: PUSH
56257: LD_INT 7
56259: PUSH
56260: LD_INT 8
56262: PUSH
56263: LD_INT 9
56265: PUSH
56266: LD_INT 10
56268: PUSH
56269: LD_INT 11
56271: PUSH
56272: LD_INT 12
56274: PUSH
56275: LD_INT 13
56277: PUSH
56278: LD_INT 14
56280: PUSH
56281: LD_INT 15
56283: PUSH
56284: LD_INT 16
56286: PUSH
56287: LD_INT 17
56289: PUSH
56290: LD_INT 18
56292: PUSH
56293: LD_INT 19
56295: PUSH
56296: LD_INT 20
56298: PUSH
56299: LD_INT 21
56301: PUSH
56302: LD_INT 22
56304: PUSH
56305: LD_INT 23
56307: PUSH
56308: LD_INT 24
56310: PUSH
56311: LD_INT 25
56313: PUSH
56314: LD_INT 26
56316: PUSH
56317: LD_INT 27
56319: PUSH
56320: LD_INT 28
56322: PUSH
56323: LD_INT 29
56325: PUSH
56326: LD_INT 30
56328: PUSH
56329: LD_INT 31
56331: PUSH
56332: LD_INT 32
56334: PUSH
56335: LD_INT 33
56337: PUSH
56338: LD_INT 34
56340: PUSH
56341: LD_INT 36
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 101
56383: PUSH
56384: LD_INT 102
56386: PUSH
56387: LD_INT 103
56389: PUSH
56390: LD_INT 104
56392: PUSH
56393: LD_INT 105
56395: PUSH
56396: LD_INT 106
56398: PUSH
56399: LD_INT 107
56401: PUSH
56402: LD_INT 108
56404: PUSH
56405: LD_INT 109
56407: PUSH
56408: LD_INT 110
56410: PUSH
56411: LD_INT 111
56413: PUSH
56414: LD_INT 112
56416: PUSH
56417: LD_INT 113
56419: PUSH
56420: LD_INT 114
56422: PUSH
56423: LD_INT 116
56425: PUSH
56426: LD_INT 117
56428: PUSH
56429: LD_INT 118
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: ST_TO_ADDR
56455: GO 57230
56457: LD_INT 16
56459: DOUBLE
56460: EQUAL
56461: IFTRUE 56465
56463: GO 56601
56465: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
56466: LD_ADDR_VAR 0 2
56470: PUSH
56471: LD_INT 2
56473: PUSH
56474: LD_INT 4
56476: PUSH
56477: LD_INT 5
56479: PUSH
56480: LD_INT 7
56482: PUSH
56483: LD_INT 11
56485: PUSH
56486: LD_INT 12
56488: PUSH
56489: LD_INT 15
56491: PUSH
56492: LD_INT 16
56494: PUSH
56495: LD_INT 20
56497: PUSH
56498: LD_INT 21
56500: PUSH
56501: LD_INT 22
56503: PUSH
56504: LD_INT 23
56506: PUSH
56507: LD_INT 25
56509: PUSH
56510: LD_INT 26
56512: PUSH
56513: LD_INT 30
56515: PUSH
56516: LD_INT 31
56518: PUSH
56519: LD_INT 32
56521: PUSH
56522: LD_INT 33
56524: PUSH
56525: LD_INT 34
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 101
56551: PUSH
56552: LD_INT 102
56554: PUSH
56555: LD_INT 103
56557: PUSH
56558: LD_INT 106
56560: PUSH
56561: LD_INT 108
56563: PUSH
56564: LD_INT 112
56566: PUSH
56567: LD_INT 113
56569: PUSH
56570: LD_INT 114
56572: PUSH
56573: LD_INT 116
56575: PUSH
56576: LD_INT 117
56578: PUSH
56579: LD_INT 118
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: ST_TO_ADDR
56599: GO 57230
56601: LD_INT 17
56603: DOUBLE
56604: EQUAL
56605: IFTRUE 56609
56607: GO 56833
56609: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
56610: LD_ADDR_VAR 0 2
56614: PUSH
56615: LD_INT 1
56617: PUSH
56618: LD_INT 2
56620: PUSH
56621: LD_INT 3
56623: PUSH
56624: LD_INT 4
56626: PUSH
56627: LD_INT 5
56629: PUSH
56630: LD_INT 6
56632: PUSH
56633: LD_INT 7
56635: PUSH
56636: LD_INT 8
56638: PUSH
56639: LD_INT 9
56641: PUSH
56642: LD_INT 10
56644: PUSH
56645: LD_INT 11
56647: PUSH
56648: LD_INT 12
56650: PUSH
56651: LD_INT 13
56653: PUSH
56654: LD_INT 14
56656: PUSH
56657: LD_INT 15
56659: PUSH
56660: LD_INT 16
56662: PUSH
56663: LD_INT 17
56665: PUSH
56666: LD_INT 18
56668: PUSH
56669: LD_INT 19
56671: PUSH
56672: LD_INT 20
56674: PUSH
56675: LD_INT 21
56677: PUSH
56678: LD_INT 22
56680: PUSH
56681: LD_INT 23
56683: PUSH
56684: LD_INT 24
56686: PUSH
56687: LD_INT 25
56689: PUSH
56690: LD_INT 26
56692: PUSH
56693: LD_INT 27
56695: PUSH
56696: LD_INT 28
56698: PUSH
56699: LD_INT 29
56701: PUSH
56702: LD_INT 30
56704: PUSH
56705: LD_INT 31
56707: PUSH
56708: LD_INT 32
56710: PUSH
56711: LD_INT 33
56713: PUSH
56714: LD_INT 34
56716: PUSH
56717: LD_INT 36
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 101
56759: PUSH
56760: LD_INT 102
56762: PUSH
56763: LD_INT 103
56765: PUSH
56766: LD_INT 104
56768: PUSH
56769: LD_INT 105
56771: PUSH
56772: LD_INT 106
56774: PUSH
56775: LD_INT 107
56777: PUSH
56778: LD_INT 108
56780: PUSH
56781: LD_INT 109
56783: PUSH
56784: LD_INT 110
56786: PUSH
56787: LD_INT 111
56789: PUSH
56790: LD_INT 112
56792: PUSH
56793: LD_INT 113
56795: PUSH
56796: LD_INT 114
56798: PUSH
56799: LD_INT 116
56801: PUSH
56802: LD_INT 117
56804: PUSH
56805: LD_INT 118
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: ST_TO_ADDR
56831: GO 57230
56833: LD_INT 18
56835: DOUBLE
56836: EQUAL
56837: IFTRUE 56841
56839: GO 56989
56841: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
56842: LD_ADDR_VAR 0 2
56846: PUSH
56847: LD_INT 2
56849: PUSH
56850: LD_INT 4
56852: PUSH
56853: LD_INT 5
56855: PUSH
56856: LD_INT 7
56858: PUSH
56859: LD_INT 11
56861: PUSH
56862: LD_INT 12
56864: PUSH
56865: LD_INT 15
56867: PUSH
56868: LD_INT 16
56870: PUSH
56871: LD_INT 20
56873: PUSH
56874: LD_INT 21
56876: PUSH
56877: LD_INT 22
56879: PUSH
56880: LD_INT 23
56882: PUSH
56883: LD_INT 25
56885: PUSH
56886: LD_INT 26
56888: PUSH
56889: LD_INT 30
56891: PUSH
56892: LD_INT 31
56894: PUSH
56895: LD_INT 32
56897: PUSH
56898: LD_INT 33
56900: PUSH
56901: LD_INT 34
56903: PUSH
56904: LD_INT 35
56906: PUSH
56907: LD_INT 36
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 101
56935: PUSH
56936: LD_INT 102
56938: PUSH
56939: LD_INT 103
56941: PUSH
56942: LD_INT 106
56944: PUSH
56945: LD_INT 108
56947: PUSH
56948: LD_INT 112
56950: PUSH
56951: LD_INT 113
56953: PUSH
56954: LD_INT 114
56956: PUSH
56957: LD_INT 115
56959: PUSH
56960: LD_INT 116
56962: PUSH
56963: LD_INT 117
56965: PUSH
56966: LD_INT 118
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: ST_TO_ADDR
56987: GO 57230
56989: LD_INT 19
56991: DOUBLE
56992: EQUAL
56993: IFTRUE 56997
56995: GO 57229
56997: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
56998: LD_ADDR_VAR 0 2
57002: PUSH
57003: LD_INT 1
57005: PUSH
57006: LD_INT 2
57008: PUSH
57009: LD_INT 3
57011: PUSH
57012: LD_INT 4
57014: PUSH
57015: LD_INT 5
57017: PUSH
57018: LD_INT 6
57020: PUSH
57021: LD_INT 7
57023: PUSH
57024: LD_INT 8
57026: PUSH
57027: LD_INT 9
57029: PUSH
57030: LD_INT 10
57032: PUSH
57033: LD_INT 11
57035: PUSH
57036: LD_INT 12
57038: PUSH
57039: LD_INT 13
57041: PUSH
57042: LD_INT 14
57044: PUSH
57045: LD_INT 15
57047: PUSH
57048: LD_INT 16
57050: PUSH
57051: LD_INT 17
57053: PUSH
57054: LD_INT 18
57056: PUSH
57057: LD_INT 19
57059: PUSH
57060: LD_INT 20
57062: PUSH
57063: LD_INT 21
57065: PUSH
57066: LD_INT 22
57068: PUSH
57069: LD_INT 23
57071: PUSH
57072: LD_INT 24
57074: PUSH
57075: LD_INT 25
57077: PUSH
57078: LD_INT 26
57080: PUSH
57081: LD_INT 27
57083: PUSH
57084: LD_INT 28
57086: PUSH
57087: LD_INT 29
57089: PUSH
57090: LD_INT 30
57092: PUSH
57093: LD_INT 31
57095: PUSH
57096: LD_INT 32
57098: PUSH
57099: LD_INT 33
57101: PUSH
57102: LD_INT 34
57104: PUSH
57105: LD_INT 35
57107: PUSH
57108: LD_INT 36
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 101
57151: PUSH
57152: LD_INT 102
57154: PUSH
57155: LD_INT 103
57157: PUSH
57158: LD_INT 104
57160: PUSH
57161: LD_INT 105
57163: PUSH
57164: LD_INT 106
57166: PUSH
57167: LD_INT 107
57169: PUSH
57170: LD_INT 108
57172: PUSH
57173: LD_INT 109
57175: PUSH
57176: LD_INT 110
57178: PUSH
57179: LD_INT 111
57181: PUSH
57182: LD_INT 112
57184: PUSH
57185: LD_INT 113
57187: PUSH
57188: LD_INT 114
57190: PUSH
57191: LD_INT 115
57193: PUSH
57194: LD_INT 116
57196: PUSH
57197: LD_INT 117
57199: PUSH
57200: LD_INT 118
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: ST_TO_ADDR
57227: GO 57230
57229: POP
// end else
57230: GO 57461
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
57232: LD_ADDR_VAR 0 2
57236: PUSH
57237: LD_INT 1
57239: PUSH
57240: LD_INT 2
57242: PUSH
57243: LD_INT 3
57245: PUSH
57246: LD_INT 4
57248: PUSH
57249: LD_INT 5
57251: PUSH
57252: LD_INT 6
57254: PUSH
57255: LD_INT 7
57257: PUSH
57258: LD_INT 8
57260: PUSH
57261: LD_INT 9
57263: PUSH
57264: LD_INT 10
57266: PUSH
57267: LD_INT 11
57269: PUSH
57270: LD_INT 12
57272: PUSH
57273: LD_INT 13
57275: PUSH
57276: LD_INT 14
57278: PUSH
57279: LD_INT 15
57281: PUSH
57282: LD_INT 16
57284: PUSH
57285: LD_INT 17
57287: PUSH
57288: LD_INT 18
57290: PUSH
57291: LD_INT 19
57293: PUSH
57294: LD_INT 20
57296: PUSH
57297: LD_INT 21
57299: PUSH
57300: LD_INT 22
57302: PUSH
57303: LD_INT 23
57305: PUSH
57306: LD_INT 24
57308: PUSH
57309: LD_INT 25
57311: PUSH
57312: LD_INT 26
57314: PUSH
57315: LD_INT 27
57317: PUSH
57318: LD_INT 28
57320: PUSH
57321: LD_INT 29
57323: PUSH
57324: LD_INT 30
57326: PUSH
57327: LD_INT 31
57329: PUSH
57330: LD_INT 32
57332: PUSH
57333: LD_INT 33
57335: PUSH
57336: LD_INT 34
57338: PUSH
57339: LD_INT 35
57341: PUSH
57342: LD_INT 36
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 101
57385: PUSH
57386: LD_INT 102
57388: PUSH
57389: LD_INT 103
57391: PUSH
57392: LD_INT 104
57394: PUSH
57395: LD_INT 105
57397: PUSH
57398: LD_INT 106
57400: PUSH
57401: LD_INT 107
57403: PUSH
57404: LD_INT 108
57406: PUSH
57407: LD_INT 109
57409: PUSH
57410: LD_INT 110
57412: PUSH
57413: LD_INT 111
57415: PUSH
57416: LD_INT 112
57418: PUSH
57419: LD_INT 113
57421: PUSH
57422: LD_INT 114
57424: PUSH
57425: LD_INT 115
57427: PUSH
57428: LD_INT 116
57430: PUSH
57431: LD_INT 117
57433: PUSH
57434: LD_INT 118
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: ST_TO_ADDR
// if result then
57461: LD_VAR 0 2
57465: IFFALSE 58251
// begin normal :=  ;
57467: LD_ADDR_VAR 0 5
57471: PUSH
57472: LD_STRING 
57474: ST_TO_ADDR
// hardcore :=  ;
57475: LD_ADDR_VAR 0 6
57479: PUSH
57480: LD_STRING 
57482: ST_TO_ADDR
// active :=  ;
57483: LD_ADDR_VAR 0 7
57487: PUSH
57488: LD_STRING 
57490: ST_TO_ADDR
// for i = 1 to normalCounter do
57491: LD_ADDR_VAR 0 8
57495: PUSH
57496: DOUBLE
57497: LD_INT 1
57499: DEC
57500: ST_TO_ADDR
57501: LD_EXP 36
57505: PUSH
57506: FOR_TO
57507: IFFALSE 57608
// begin tmp := 0 ;
57509: LD_ADDR_VAR 0 3
57513: PUSH
57514: LD_STRING 0
57516: ST_TO_ADDR
// if result [ 1 ] then
57517: LD_VAR 0 2
57521: PUSH
57522: LD_INT 1
57524: ARRAY
57525: IFFALSE 57590
// if result [ 1 ] [ 1 ] = i then
57527: LD_VAR 0 2
57531: PUSH
57532: LD_INT 1
57534: ARRAY
57535: PUSH
57536: LD_INT 1
57538: ARRAY
57539: PUSH
57540: LD_VAR 0 8
57544: EQUAL
57545: IFFALSE 57590
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
57547: LD_ADDR_VAR 0 2
57551: PUSH
57552: LD_VAR 0 2
57556: PPUSH
57557: LD_INT 1
57559: PPUSH
57560: LD_VAR 0 2
57564: PUSH
57565: LD_INT 1
57567: ARRAY
57568: PPUSH
57569: LD_INT 1
57571: PPUSH
57572: CALL_OW 3
57576: PPUSH
57577: CALL_OW 1
57581: ST_TO_ADDR
// tmp := 1 ;
57582: LD_ADDR_VAR 0 3
57586: PUSH
57587: LD_STRING 1
57589: ST_TO_ADDR
// end ; normal := normal & tmp ;
57590: LD_ADDR_VAR 0 5
57594: PUSH
57595: LD_VAR 0 5
57599: PUSH
57600: LD_VAR 0 3
57604: STR
57605: ST_TO_ADDR
// end ;
57606: GO 57506
57608: POP
57609: POP
// for i = 1 to hardcoreCounter do
57610: LD_ADDR_VAR 0 8
57614: PUSH
57615: DOUBLE
57616: LD_INT 1
57618: DEC
57619: ST_TO_ADDR
57620: LD_EXP 37
57624: PUSH
57625: FOR_TO
57626: IFFALSE 57731
// begin tmp := 0 ;
57628: LD_ADDR_VAR 0 3
57632: PUSH
57633: LD_STRING 0
57635: ST_TO_ADDR
// if result [ 2 ] then
57636: LD_VAR 0 2
57640: PUSH
57641: LD_INT 2
57643: ARRAY
57644: IFFALSE 57713
// if result [ 2 ] [ 1 ] = 100 + i then
57646: LD_VAR 0 2
57650: PUSH
57651: LD_INT 2
57653: ARRAY
57654: PUSH
57655: LD_INT 1
57657: ARRAY
57658: PUSH
57659: LD_INT 100
57661: PUSH
57662: LD_VAR 0 8
57666: PLUS
57667: EQUAL
57668: IFFALSE 57713
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
57670: LD_ADDR_VAR 0 2
57674: PUSH
57675: LD_VAR 0 2
57679: PPUSH
57680: LD_INT 2
57682: PPUSH
57683: LD_VAR 0 2
57687: PUSH
57688: LD_INT 2
57690: ARRAY
57691: PPUSH
57692: LD_INT 1
57694: PPUSH
57695: CALL_OW 3
57699: PPUSH
57700: CALL_OW 1
57704: ST_TO_ADDR
// tmp := 1 ;
57705: LD_ADDR_VAR 0 3
57709: PUSH
57710: LD_STRING 1
57712: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
57713: LD_ADDR_VAR 0 6
57717: PUSH
57718: LD_VAR 0 6
57722: PUSH
57723: LD_VAR 0 3
57727: STR
57728: ST_TO_ADDR
// end ;
57729: GO 57625
57731: POP
57732: POP
// if isGameLoad then
57733: LD_VAR 0 1
57737: IFFALSE 58212
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
57739: LD_ADDR_VAR 0 4
57743: PUSH
57744: LD_EXP 40
57748: PUSH
57749: LD_EXP 39
57753: PUSH
57754: LD_EXP 41
57758: PUSH
57759: LD_EXP 38
57763: PUSH
57764: LD_EXP 42
57768: PUSH
57769: LD_EXP 43
57773: PUSH
57774: LD_EXP 44
57778: PUSH
57779: LD_EXP 45
57783: PUSH
57784: LD_EXP 46
57788: PUSH
57789: LD_EXP 47
57793: PUSH
57794: LD_EXP 48
57798: PUSH
57799: LD_EXP 49
57803: PUSH
57804: LD_EXP 50
57808: PUSH
57809: LD_EXP 51
57813: PUSH
57814: LD_EXP 59
57818: PUSH
57819: LD_EXP 60
57823: PUSH
57824: LD_EXP 61
57828: PUSH
57829: LD_EXP 62
57833: PUSH
57834: LD_EXP 64
57838: PUSH
57839: LD_EXP 65
57843: PUSH
57844: LD_EXP 66
57848: PUSH
57849: LD_EXP 69
57853: PUSH
57854: LD_EXP 71
57858: PUSH
57859: LD_EXP 72
57863: PUSH
57864: LD_EXP 73
57868: PUSH
57869: LD_EXP 75
57873: PUSH
57874: LD_EXP 76
57878: PUSH
57879: LD_EXP 79
57883: PUSH
57884: LD_EXP 80
57888: PUSH
57889: LD_EXP 81
57893: PUSH
57894: LD_EXP 82
57898: PUSH
57899: LD_EXP 83
57903: PUSH
57904: LD_EXP 84
57908: PUSH
57909: LD_EXP 85
57913: PUSH
57914: LD_EXP 86
57918: PUSH
57919: LD_EXP 87
57923: PUSH
57924: LD_EXP 52
57928: PUSH
57929: LD_EXP 53
57933: PUSH
57934: LD_EXP 56
57938: PUSH
57939: LD_EXP 57
57943: PUSH
57944: LD_EXP 58
57948: PUSH
57949: LD_EXP 54
57953: PUSH
57954: LD_EXP 55
57958: PUSH
57959: LD_EXP 63
57963: PUSH
57964: LD_EXP 67
57968: PUSH
57969: LD_EXP 68
57973: PUSH
57974: LD_EXP 70
57978: PUSH
57979: LD_EXP 74
57983: PUSH
57984: LD_EXP 77
57988: PUSH
57989: LD_EXP 78
57993: PUSH
57994: LD_EXP 88
57998: PUSH
57999: LD_EXP 89
58003: PUSH
58004: LD_EXP 90
58008: PUSH
58009: LD_EXP 91
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: ST_TO_ADDR
// tmp :=  ;
58070: LD_ADDR_VAR 0 3
58074: PUSH
58075: LD_STRING 
58077: ST_TO_ADDR
// for i = 1 to normalCounter do
58078: LD_ADDR_VAR 0 8
58082: PUSH
58083: DOUBLE
58084: LD_INT 1
58086: DEC
58087: ST_TO_ADDR
58088: LD_EXP 36
58092: PUSH
58093: FOR_TO
58094: IFFALSE 58130
// begin if flags [ i ] then
58096: LD_VAR 0 4
58100: PUSH
58101: LD_VAR 0 8
58105: ARRAY
58106: IFFALSE 58128
// tmp := tmp & i & ; ;
58108: LD_ADDR_VAR 0 3
58112: PUSH
58113: LD_VAR 0 3
58117: PUSH
58118: LD_VAR 0 8
58122: STR
58123: PUSH
58124: LD_STRING ;
58126: STR
58127: ST_TO_ADDR
// end ;
58128: GO 58093
58130: POP
58131: POP
// for i = 1 to hardcoreCounter do
58132: LD_ADDR_VAR 0 8
58136: PUSH
58137: DOUBLE
58138: LD_INT 1
58140: DEC
58141: ST_TO_ADDR
58142: LD_EXP 37
58146: PUSH
58147: FOR_TO
58148: IFFALSE 58194
// begin if flags [ normalCounter + i ] then
58150: LD_VAR 0 4
58154: PUSH
58155: LD_EXP 36
58159: PUSH
58160: LD_VAR 0 8
58164: PLUS
58165: ARRAY
58166: IFFALSE 58192
// tmp := tmp & ( 100 + i ) & ; ;
58168: LD_ADDR_VAR 0 3
58172: PUSH
58173: LD_VAR 0 3
58177: PUSH
58178: LD_INT 100
58180: PUSH
58181: LD_VAR 0 8
58185: PLUS
58186: STR
58187: PUSH
58188: LD_STRING ;
58190: STR
58191: ST_TO_ADDR
// end ;
58192: GO 58147
58194: POP
58195: POP
// if tmp then
58196: LD_VAR 0 3
58200: IFFALSE 58212
// active := tmp ;
58202: LD_ADDR_VAR 0 7
58206: PUSH
58207: LD_VAR 0 3
58211: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
58212: LD_STRING getStreamItemsFromMission("
58214: PUSH
58215: LD_VAR 0 5
58219: STR
58220: PUSH
58221: LD_STRING ","
58223: STR
58224: PUSH
58225: LD_VAR 0 6
58229: STR
58230: PUSH
58231: LD_STRING ","
58233: STR
58234: PUSH
58235: LD_VAR 0 7
58239: STR
58240: PUSH
58241: LD_STRING ")
58243: STR
58244: PPUSH
58245: CALL_OW 559
// end else
58249: GO 58258
// ToLua ( getStreamItemsFromMission("","","") ) ;
58251: LD_STRING getStreamItemsFromMission("","","")
58253: PPUSH
58254: CALL_OW 559
// end ;
58258: LD_VAR 0 2
58262: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
58263: LD_EXP 35
58267: PUSH
58268: LD_EXP 40
58272: AND
58273: IFFALSE 58397
58275: GO 58277
58277: DISABLE
58278: LD_INT 0
58280: PPUSH
58281: PPUSH
// begin enable ;
58282: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
58283: LD_ADDR_VAR 0 2
58287: PUSH
58288: LD_INT 22
58290: PUSH
58291: LD_OWVAR 2
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 2
58302: PUSH
58303: LD_INT 34
58305: PUSH
58306: LD_INT 7
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 34
58315: PUSH
58316: LD_INT 45
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 34
58325: PUSH
58326: LD_INT 28
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 34
58335: PUSH
58336: LD_INT 47
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PPUSH
58354: CALL_OW 69
58358: ST_TO_ADDR
// if not tmp then
58359: LD_VAR 0 2
58363: NOT
58364: IFFALSE 58368
// exit ;
58366: GO 58397
// for i in tmp do
58368: LD_ADDR_VAR 0 1
58372: PUSH
58373: LD_VAR 0 2
58377: PUSH
58378: FOR_IN
58379: IFFALSE 58395
// begin SetLives ( i , 0 ) ;
58381: LD_VAR 0 1
58385: PPUSH
58386: LD_INT 0
58388: PPUSH
58389: CALL_OW 234
// end ;
58393: GO 58378
58395: POP
58396: POP
// end ;
58397: PPOPN 2
58399: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
58400: LD_EXP 35
58404: PUSH
58405: LD_EXP 41
58409: AND
58410: IFFALSE 58494
58412: GO 58414
58414: DISABLE
58415: LD_INT 0
58417: PPUSH
58418: PPUSH
// begin enable ;
58419: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
58420: LD_ADDR_VAR 0 2
58424: PUSH
58425: LD_INT 22
58427: PUSH
58428: LD_OWVAR 2
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 32
58439: PUSH
58440: LD_INT 3
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PPUSH
58451: CALL_OW 69
58455: ST_TO_ADDR
// if not tmp then
58456: LD_VAR 0 2
58460: NOT
58461: IFFALSE 58465
// exit ;
58463: GO 58494
// for i in tmp do
58465: LD_ADDR_VAR 0 1
58469: PUSH
58470: LD_VAR 0 2
58474: PUSH
58475: FOR_IN
58476: IFFALSE 58492
// begin SetLives ( i , 0 ) ;
58478: LD_VAR 0 1
58482: PPUSH
58483: LD_INT 0
58485: PPUSH
58486: CALL_OW 234
// end ;
58490: GO 58475
58492: POP
58493: POP
// end ;
58494: PPOPN 2
58496: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
58497: LD_EXP 35
58501: PUSH
58502: LD_EXP 38
58506: AND
58507: IFFALSE 58600
58509: GO 58511
58511: DISABLE
58512: LD_INT 0
58514: PPUSH
// begin enable ;
58515: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
58516: LD_ADDR_VAR 0 1
58520: PUSH
58521: LD_INT 22
58523: PUSH
58524: LD_OWVAR 2
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 2
58535: PUSH
58536: LD_INT 25
58538: PUSH
58539: LD_INT 5
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 25
58548: PUSH
58549: LD_INT 9
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 25
58558: PUSH
58559: LD_INT 8
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PPUSH
58576: CALL_OW 69
58580: PUSH
58581: FOR_IN
58582: IFFALSE 58598
// begin SetClass ( i , 1 ) ;
58584: LD_VAR 0 1
58588: PPUSH
58589: LD_INT 1
58591: PPUSH
58592: CALL_OW 336
// end ;
58596: GO 58581
58598: POP
58599: POP
// end ;
58600: PPOPN 1
58602: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
58603: LD_EXP 35
58607: PUSH
58608: LD_EXP 39
58612: AND
58613: PUSH
58614: LD_OWVAR 65
58618: PUSH
58619: LD_INT 7
58621: LESS
58622: AND
58623: IFFALSE 58637
58625: GO 58627
58627: DISABLE
// begin enable ;
58628: ENABLE
// game_speed := 7 ;
58629: LD_ADDR_OWVAR 65
58633: PUSH
58634: LD_INT 7
58636: ST_TO_ADDR
// end ;
58637: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
58638: LD_EXP 35
58642: PUSH
58643: LD_EXP 42
58647: AND
58648: IFFALSE 58850
58650: GO 58652
58652: DISABLE
58653: LD_INT 0
58655: PPUSH
58656: PPUSH
58657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
58658: LD_ADDR_VAR 0 3
58662: PUSH
58663: LD_INT 81
58665: PUSH
58666: LD_OWVAR 2
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 21
58677: PUSH
58678: LD_INT 1
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PPUSH
58689: CALL_OW 69
58693: ST_TO_ADDR
// if not tmp then
58694: LD_VAR 0 3
58698: NOT
58699: IFFALSE 58703
// exit ;
58701: GO 58850
// if tmp > 5 then
58703: LD_VAR 0 3
58707: PUSH
58708: LD_INT 5
58710: GREATER
58711: IFFALSE 58723
// k := 5 else
58713: LD_ADDR_VAR 0 2
58717: PUSH
58718: LD_INT 5
58720: ST_TO_ADDR
58721: GO 58733
// k := tmp ;
58723: LD_ADDR_VAR 0 2
58727: PUSH
58728: LD_VAR 0 3
58732: ST_TO_ADDR
// for i := 1 to k do
58733: LD_ADDR_VAR 0 1
58737: PUSH
58738: DOUBLE
58739: LD_INT 1
58741: DEC
58742: ST_TO_ADDR
58743: LD_VAR 0 2
58747: PUSH
58748: FOR_TO
58749: IFFALSE 58848
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
58751: LD_VAR 0 3
58755: PUSH
58756: LD_VAR 0 1
58760: ARRAY
58761: PPUSH
58762: LD_VAR 0 1
58766: PUSH
58767: LD_INT 4
58769: MOD
58770: PUSH
58771: LD_INT 1
58773: PLUS
58774: PPUSH
58775: CALL_OW 259
58779: PUSH
58780: LD_INT 10
58782: LESS
58783: IFFALSE 58846
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
58785: LD_VAR 0 3
58789: PUSH
58790: LD_VAR 0 1
58794: ARRAY
58795: PPUSH
58796: LD_VAR 0 1
58800: PUSH
58801: LD_INT 4
58803: MOD
58804: PUSH
58805: LD_INT 1
58807: PLUS
58808: PPUSH
58809: LD_VAR 0 3
58813: PUSH
58814: LD_VAR 0 1
58818: ARRAY
58819: PPUSH
58820: LD_VAR 0 1
58824: PUSH
58825: LD_INT 4
58827: MOD
58828: PUSH
58829: LD_INT 1
58831: PLUS
58832: PPUSH
58833: CALL_OW 259
58837: PUSH
58838: LD_INT 1
58840: PLUS
58841: PPUSH
58842: CALL_OW 237
58846: GO 58748
58848: POP
58849: POP
// end ;
58850: PPOPN 3
58852: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
58853: LD_EXP 35
58857: PUSH
58858: LD_EXP 43
58862: AND
58863: IFFALSE 58883
58865: GO 58867
58867: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
58868: LD_INT 4
58870: PPUSH
58871: LD_OWVAR 2
58875: PPUSH
58876: LD_INT 0
58878: PPUSH
58879: CALL_OW 324
58883: END
// every 0 0$1 trigger StreamModeActive and sShovel do
58884: LD_EXP 35
58888: PUSH
58889: LD_EXP 72
58893: AND
58894: IFFALSE 58914
58896: GO 58898
58898: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
58899: LD_INT 19
58901: PPUSH
58902: LD_OWVAR 2
58906: PPUSH
58907: LD_INT 0
58909: PPUSH
58910: CALL_OW 324
58914: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
58915: LD_EXP 35
58919: PUSH
58920: LD_EXP 44
58924: AND
58925: IFFALSE 59027
58927: GO 58929
58929: DISABLE
58930: LD_INT 0
58932: PPUSH
58933: PPUSH
// begin enable ;
58934: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
58935: LD_ADDR_VAR 0 2
58939: PUSH
58940: LD_INT 22
58942: PUSH
58943: LD_OWVAR 2
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 2
58954: PUSH
58955: LD_INT 34
58957: PUSH
58958: LD_INT 11
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 34
58967: PUSH
58968: LD_INT 30
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: LIST
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PPUSH
58984: CALL_OW 69
58988: ST_TO_ADDR
// if not tmp then
58989: LD_VAR 0 2
58993: NOT
58994: IFFALSE 58998
// exit ;
58996: GO 59027
// for i in tmp do
58998: LD_ADDR_VAR 0 1
59002: PUSH
59003: LD_VAR 0 2
59007: PUSH
59008: FOR_IN
59009: IFFALSE 59025
// begin SetLives ( i , 0 ) ;
59011: LD_VAR 0 1
59015: PPUSH
59016: LD_INT 0
59018: PPUSH
59019: CALL_OW 234
// end ;
59023: GO 59008
59025: POP
59026: POP
// end ;
59027: PPOPN 2
59029: END
// every 0 0$1 trigger StreamModeActive and sBunker do
59030: LD_EXP 35
59034: PUSH
59035: LD_EXP 45
59039: AND
59040: IFFALSE 59060
59042: GO 59044
59044: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
59045: LD_INT 32
59047: PPUSH
59048: LD_OWVAR 2
59052: PPUSH
59053: LD_INT 0
59055: PPUSH
59056: CALL_OW 324
59060: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
59061: LD_EXP 35
59065: PUSH
59066: LD_EXP 46
59070: AND
59071: IFFALSE 59252
59073: GO 59075
59075: DISABLE
59076: LD_INT 0
59078: PPUSH
59079: PPUSH
59080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
59081: LD_ADDR_VAR 0 2
59085: PUSH
59086: LD_INT 22
59088: PUSH
59089: LD_OWVAR 2
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 33
59100: PUSH
59101: LD_INT 3
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PPUSH
59112: CALL_OW 69
59116: ST_TO_ADDR
// if not tmp then
59117: LD_VAR 0 2
59121: NOT
59122: IFFALSE 59126
// exit ;
59124: GO 59252
// side := 0 ;
59126: LD_ADDR_VAR 0 3
59130: PUSH
59131: LD_INT 0
59133: ST_TO_ADDR
// for i := 1 to 8 do
59134: LD_ADDR_VAR 0 1
59138: PUSH
59139: DOUBLE
59140: LD_INT 1
59142: DEC
59143: ST_TO_ADDR
59144: LD_INT 8
59146: PUSH
59147: FOR_TO
59148: IFFALSE 59196
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
59150: LD_OWVAR 2
59154: PUSH
59155: LD_VAR 0 1
59159: NONEQUAL
59160: PUSH
59161: LD_OWVAR 2
59165: PPUSH
59166: LD_VAR 0 1
59170: PPUSH
59171: CALL_OW 81
59175: PUSH
59176: LD_INT 2
59178: EQUAL
59179: AND
59180: IFFALSE 59194
// begin side := i ;
59182: LD_ADDR_VAR 0 3
59186: PUSH
59187: LD_VAR 0 1
59191: ST_TO_ADDR
// break ;
59192: GO 59196
// end ;
59194: GO 59147
59196: POP
59197: POP
// if not side then
59198: LD_VAR 0 3
59202: NOT
59203: IFFALSE 59207
// exit ;
59205: GO 59252
// for i := 1 to tmp do
59207: LD_ADDR_VAR 0 1
59211: PUSH
59212: DOUBLE
59213: LD_INT 1
59215: DEC
59216: ST_TO_ADDR
59217: LD_VAR 0 2
59221: PUSH
59222: FOR_TO
59223: IFFALSE 59250
// if Prob ( 60 ) then
59225: LD_INT 60
59227: PPUSH
59228: CALL_OW 13
59232: IFFALSE 59248
// SetSide ( i , side ) ;
59234: LD_VAR 0 1
59238: PPUSH
59239: LD_VAR 0 3
59243: PPUSH
59244: CALL_OW 235
59248: GO 59222
59250: POP
59251: POP
// end ;
59252: PPOPN 3
59254: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
59255: LD_EXP 35
59259: PUSH
59260: LD_EXP 48
59264: AND
59265: IFFALSE 59384
59267: GO 59269
59269: DISABLE
59270: LD_INT 0
59272: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
59273: LD_ADDR_VAR 0 1
59277: PUSH
59278: LD_INT 22
59280: PUSH
59281: LD_OWVAR 2
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 21
59292: PUSH
59293: LD_INT 1
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 3
59302: PUSH
59303: LD_INT 23
59305: PUSH
59306: LD_INT 0
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: LIST
59321: PPUSH
59322: CALL_OW 69
59326: PUSH
59327: FOR_IN
59328: IFFALSE 59382
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
59330: LD_VAR 0 1
59334: PPUSH
59335: CALL_OW 257
59339: PUSH
59340: LD_INT 1
59342: PUSH
59343: LD_INT 2
59345: PUSH
59346: LD_INT 3
59348: PUSH
59349: LD_INT 4
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: IN
59358: IFFALSE 59380
// SetClass ( un , rand ( 1 , 4 ) ) ;
59360: LD_VAR 0 1
59364: PPUSH
59365: LD_INT 1
59367: PPUSH
59368: LD_INT 4
59370: PPUSH
59371: CALL_OW 12
59375: PPUSH
59376: CALL_OW 336
59380: GO 59327
59382: POP
59383: POP
// end ;
59384: PPOPN 1
59386: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
59387: LD_EXP 35
59391: PUSH
59392: LD_EXP 47
59396: AND
59397: IFFALSE 59476
59399: GO 59401
59401: DISABLE
59402: LD_INT 0
59404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
59405: LD_ADDR_VAR 0 1
59409: PUSH
59410: LD_INT 22
59412: PUSH
59413: LD_OWVAR 2
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 21
59424: PUSH
59425: LD_INT 3
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PPUSH
59436: CALL_OW 69
59440: ST_TO_ADDR
// if not tmp then
59441: LD_VAR 0 1
59445: NOT
59446: IFFALSE 59450
// exit ;
59448: GO 59476
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
59450: LD_VAR 0 1
59454: PUSH
59455: LD_INT 1
59457: PPUSH
59458: LD_VAR 0 1
59462: PPUSH
59463: CALL_OW 12
59467: ARRAY
59468: PPUSH
59469: LD_INT 100
59471: PPUSH
59472: CALL_OW 234
// end ;
59476: PPOPN 1
59478: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
59479: LD_EXP 35
59483: PUSH
59484: LD_EXP 49
59488: AND
59489: IFFALSE 59587
59491: GO 59493
59493: DISABLE
59494: LD_INT 0
59496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59497: LD_ADDR_VAR 0 1
59501: PUSH
59502: LD_INT 22
59504: PUSH
59505: LD_OWVAR 2
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 21
59516: PUSH
59517: LD_INT 1
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PPUSH
59528: CALL_OW 69
59532: ST_TO_ADDR
// if not tmp then
59533: LD_VAR 0 1
59537: NOT
59538: IFFALSE 59542
// exit ;
59540: GO 59587
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
59542: LD_VAR 0 1
59546: PUSH
59547: LD_INT 1
59549: PPUSH
59550: LD_VAR 0 1
59554: PPUSH
59555: CALL_OW 12
59559: ARRAY
59560: PPUSH
59561: LD_INT 1
59563: PPUSH
59564: LD_INT 4
59566: PPUSH
59567: CALL_OW 12
59571: PPUSH
59572: LD_INT 3000
59574: PPUSH
59575: LD_INT 9000
59577: PPUSH
59578: CALL_OW 12
59582: PPUSH
59583: CALL_OW 492
// end ;
59587: PPOPN 1
59589: END
// every 0 0$1 trigger StreamModeActive and sDepot do
59590: LD_EXP 35
59594: PUSH
59595: LD_EXP 50
59599: AND
59600: IFFALSE 59620
59602: GO 59604
59604: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
59605: LD_INT 1
59607: PPUSH
59608: LD_OWVAR 2
59612: PPUSH
59613: LD_INT 0
59615: PPUSH
59616: CALL_OW 324
59620: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
59621: LD_EXP 35
59625: PUSH
59626: LD_EXP 51
59630: AND
59631: IFFALSE 59714
59633: GO 59635
59635: DISABLE
59636: LD_INT 0
59638: PPUSH
59639: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
59640: LD_ADDR_VAR 0 2
59644: PUSH
59645: LD_INT 22
59647: PUSH
59648: LD_OWVAR 2
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 21
59659: PUSH
59660: LD_INT 3
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PPUSH
59671: CALL_OW 69
59675: ST_TO_ADDR
// if not tmp then
59676: LD_VAR 0 2
59680: NOT
59681: IFFALSE 59685
// exit ;
59683: GO 59714
// for i in tmp do
59685: LD_ADDR_VAR 0 1
59689: PUSH
59690: LD_VAR 0 2
59694: PUSH
59695: FOR_IN
59696: IFFALSE 59712
// SetBLevel ( i , 10 ) ;
59698: LD_VAR 0 1
59702: PPUSH
59703: LD_INT 10
59705: PPUSH
59706: CALL_OW 241
59710: GO 59695
59712: POP
59713: POP
// end ;
59714: PPOPN 2
59716: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
59717: LD_EXP 35
59721: PUSH
59722: LD_EXP 52
59726: AND
59727: IFFALSE 59838
59729: GO 59731
59731: DISABLE
59732: LD_INT 0
59734: PPUSH
59735: PPUSH
59736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59737: LD_ADDR_VAR 0 3
59741: PUSH
59742: LD_INT 22
59744: PUSH
59745: LD_OWVAR 2
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 25
59756: PUSH
59757: LD_INT 1
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PPUSH
59768: CALL_OW 69
59772: ST_TO_ADDR
// if not tmp then
59773: LD_VAR 0 3
59777: NOT
59778: IFFALSE 59782
// exit ;
59780: GO 59838
// un := tmp [ rand ( 1 , tmp ) ] ;
59782: LD_ADDR_VAR 0 2
59786: PUSH
59787: LD_VAR 0 3
59791: PUSH
59792: LD_INT 1
59794: PPUSH
59795: LD_VAR 0 3
59799: PPUSH
59800: CALL_OW 12
59804: ARRAY
59805: ST_TO_ADDR
// if Crawls ( un ) then
59806: LD_VAR 0 2
59810: PPUSH
59811: CALL_OW 318
59815: IFFALSE 59826
// ComWalk ( un ) ;
59817: LD_VAR 0 2
59821: PPUSH
59822: CALL_OW 138
// SetClass ( un , class_sniper ) ;
59826: LD_VAR 0 2
59830: PPUSH
59831: LD_INT 5
59833: PPUSH
59834: CALL_OW 336
// end ;
59838: PPOPN 3
59840: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
59841: LD_EXP 35
59845: PUSH
59846: LD_EXP 53
59850: AND
59851: PUSH
59852: LD_OWVAR 67
59856: PUSH
59857: LD_INT 4
59859: LESS
59860: AND
59861: IFFALSE 59880
59863: GO 59865
59865: DISABLE
// begin Difficulty := Difficulty + 1 ;
59866: LD_ADDR_OWVAR 67
59870: PUSH
59871: LD_OWVAR 67
59875: PUSH
59876: LD_INT 1
59878: PLUS
59879: ST_TO_ADDR
// end ;
59880: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
59881: LD_EXP 35
59885: PUSH
59886: LD_EXP 54
59890: AND
59891: IFFALSE 59994
59893: GO 59895
59895: DISABLE
59896: LD_INT 0
59898: PPUSH
// begin for i := 1 to 5 do
59899: LD_ADDR_VAR 0 1
59903: PUSH
59904: DOUBLE
59905: LD_INT 1
59907: DEC
59908: ST_TO_ADDR
59909: LD_INT 5
59911: PUSH
59912: FOR_TO
59913: IFFALSE 59992
// begin uc_nation := nation_nature ;
59915: LD_ADDR_OWVAR 21
59919: PUSH
59920: LD_INT 0
59922: ST_TO_ADDR
// uc_side := 0 ;
59923: LD_ADDR_OWVAR 20
59927: PUSH
59928: LD_INT 0
59930: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
59931: LD_ADDR_OWVAR 29
59935: PUSH
59936: LD_INT 12
59938: PUSH
59939: LD_INT 12
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: ST_TO_ADDR
// hc_agressivity := 20 ;
59946: LD_ADDR_OWVAR 35
59950: PUSH
59951: LD_INT 20
59953: ST_TO_ADDR
// hc_class := class_tiger ;
59954: LD_ADDR_OWVAR 28
59958: PUSH
59959: LD_INT 14
59961: ST_TO_ADDR
// hc_gallery :=  ;
59962: LD_ADDR_OWVAR 33
59966: PUSH
59967: LD_STRING 
59969: ST_TO_ADDR
// hc_name :=  ;
59970: LD_ADDR_OWVAR 26
59974: PUSH
59975: LD_STRING 
59977: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
59978: CALL_OW 44
59982: PPUSH
59983: LD_INT 0
59985: PPUSH
59986: CALL_OW 51
// end ;
59990: GO 59912
59992: POP
59993: POP
// end ;
59994: PPOPN 1
59996: END
// every 0 0$1 trigger StreamModeActive and sBomb do
59997: LD_EXP 35
60001: PUSH
60002: LD_EXP 55
60006: AND
60007: IFFALSE 60016
60009: GO 60011
60011: DISABLE
// StreamSibBomb ;
60012: CALL 60017 0 0
60016: END
// export function StreamSibBomb ; var i , x , y ; begin
60017: LD_INT 0
60019: PPUSH
60020: PPUSH
60021: PPUSH
60022: PPUSH
// result := false ;
60023: LD_ADDR_VAR 0 1
60027: PUSH
60028: LD_INT 0
60030: ST_TO_ADDR
// for i := 1 to 16 do
60031: LD_ADDR_VAR 0 2
60035: PUSH
60036: DOUBLE
60037: LD_INT 1
60039: DEC
60040: ST_TO_ADDR
60041: LD_INT 16
60043: PUSH
60044: FOR_TO
60045: IFFALSE 60244
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
60047: LD_ADDR_VAR 0 3
60051: PUSH
60052: LD_INT 10
60054: PUSH
60055: LD_INT 20
60057: PUSH
60058: LD_INT 30
60060: PUSH
60061: LD_INT 40
60063: PUSH
60064: LD_INT 50
60066: PUSH
60067: LD_INT 60
60069: PUSH
60070: LD_INT 70
60072: PUSH
60073: LD_INT 80
60075: PUSH
60076: LD_INT 90
60078: PUSH
60079: LD_INT 100
60081: PUSH
60082: LD_INT 110
60084: PUSH
60085: LD_INT 120
60087: PUSH
60088: LD_INT 130
60090: PUSH
60091: LD_INT 140
60093: PUSH
60094: LD_INT 150
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 1
60116: PPUSH
60117: LD_INT 15
60119: PPUSH
60120: CALL_OW 12
60124: ARRAY
60125: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
60126: LD_ADDR_VAR 0 4
60130: PUSH
60131: LD_INT 10
60133: PUSH
60134: LD_INT 20
60136: PUSH
60137: LD_INT 30
60139: PUSH
60140: LD_INT 40
60142: PUSH
60143: LD_INT 50
60145: PUSH
60146: LD_INT 60
60148: PUSH
60149: LD_INT 70
60151: PUSH
60152: LD_INT 80
60154: PUSH
60155: LD_INT 90
60157: PUSH
60158: LD_INT 100
60160: PUSH
60161: LD_INT 110
60163: PUSH
60164: LD_INT 120
60166: PUSH
60167: LD_INT 130
60169: PUSH
60170: LD_INT 140
60172: PUSH
60173: LD_INT 150
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 1
60195: PPUSH
60196: LD_INT 15
60198: PPUSH
60199: CALL_OW 12
60203: ARRAY
60204: ST_TO_ADDR
// if ValidHex ( x , y ) then
60205: LD_VAR 0 3
60209: PPUSH
60210: LD_VAR 0 4
60214: PPUSH
60215: CALL_OW 488
60219: IFFALSE 60242
// begin result := [ x , y ] ;
60221: LD_ADDR_VAR 0 1
60225: PUSH
60226: LD_VAR 0 3
60230: PUSH
60231: LD_VAR 0 4
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: ST_TO_ADDR
// break ;
60240: GO 60244
// end ; end ;
60242: GO 60044
60244: POP
60245: POP
// if result then
60246: LD_VAR 0 1
60250: IFFALSE 60310
// begin ToLua ( playSibBomb() ) ;
60252: LD_STRING playSibBomb()
60254: PPUSH
60255: CALL_OW 559
// wait ( 0 0$14 ) ;
60259: LD_INT 490
60261: PPUSH
60262: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
60266: LD_VAR 0 1
60270: PUSH
60271: LD_INT 1
60273: ARRAY
60274: PPUSH
60275: LD_VAR 0 1
60279: PUSH
60280: LD_INT 2
60282: ARRAY
60283: PPUSH
60284: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
60288: LD_VAR 0 1
60292: PUSH
60293: LD_INT 1
60295: ARRAY
60296: PPUSH
60297: LD_VAR 0 1
60301: PUSH
60302: LD_INT 2
60304: ARRAY
60305: PPUSH
60306: CALL_OW 429
// end ; end ;
60310: LD_VAR 0 1
60314: RET
// every 0 0$1 trigger StreamModeActive and sReset do
60315: LD_EXP 35
60319: PUSH
60320: LD_EXP 57
60324: AND
60325: IFFALSE 60337
60327: GO 60329
60329: DISABLE
// YouLost (  ) ;
60330: LD_STRING 
60332: PPUSH
60333: CALL_OW 104
60337: END
// every 0 0$1 trigger StreamModeActive and sFog do
60338: LD_EXP 35
60342: PUSH
60343: LD_EXP 56
60347: AND
60348: IFFALSE 60362
60350: GO 60352
60352: DISABLE
// FogOff ( your_side ) ;
60353: LD_OWVAR 2
60357: PPUSH
60358: CALL_OW 344
60362: END
// every 0 0$1 trigger StreamModeActive and sSun do
60363: LD_EXP 35
60367: PUSH
60368: LD_EXP 58
60372: AND
60373: IFFALSE 60401
60375: GO 60377
60377: DISABLE
// begin solar_recharge_percent := 0 ;
60378: LD_ADDR_OWVAR 79
60382: PUSH
60383: LD_INT 0
60385: ST_TO_ADDR
// wait ( 5 5$00 ) ;
60386: LD_INT 10500
60388: PPUSH
60389: CALL_OW 67
// solar_recharge_percent := 100 ;
60393: LD_ADDR_OWVAR 79
60397: PUSH
60398: LD_INT 100
60400: ST_TO_ADDR
// end ;
60401: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
60402: LD_EXP 35
60406: PUSH
60407: LD_EXP 59
60411: AND
60412: IFFALSE 60651
60414: GO 60416
60416: DISABLE
60417: LD_INT 0
60419: PPUSH
60420: PPUSH
60421: PPUSH
// begin tmp := [ ] ;
60422: LD_ADDR_VAR 0 3
60426: PUSH
60427: EMPTY
60428: ST_TO_ADDR
// for i := 1 to 6 do
60429: LD_ADDR_VAR 0 1
60433: PUSH
60434: DOUBLE
60435: LD_INT 1
60437: DEC
60438: ST_TO_ADDR
60439: LD_INT 6
60441: PUSH
60442: FOR_TO
60443: IFFALSE 60548
// begin uc_nation := nation_nature ;
60445: LD_ADDR_OWVAR 21
60449: PUSH
60450: LD_INT 0
60452: ST_TO_ADDR
// uc_side := 0 ;
60453: LD_ADDR_OWVAR 20
60457: PUSH
60458: LD_INT 0
60460: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
60461: LD_ADDR_OWVAR 29
60465: PUSH
60466: LD_INT 12
60468: PUSH
60469: LD_INT 12
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: ST_TO_ADDR
// hc_agressivity := 20 ;
60476: LD_ADDR_OWVAR 35
60480: PUSH
60481: LD_INT 20
60483: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
60484: LD_ADDR_OWVAR 28
60488: PUSH
60489: LD_INT 17
60491: ST_TO_ADDR
// hc_gallery :=  ;
60492: LD_ADDR_OWVAR 33
60496: PUSH
60497: LD_STRING 
60499: ST_TO_ADDR
// hc_name :=  ;
60500: LD_ADDR_OWVAR 26
60504: PUSH
60505: LD_STRING 
60507: ST_TO_ADDR
// un := CreateHuman ;
60508: LD_ADDR_VAR 0 2
60512: PUSH
60513: CALL_OW 44
60517: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
60518: LD_VAR 0 2
60522: PPUSH
60523: LD_INT 1
60525: PPUSH
60526: CALL_OW 51
// tmp := tmp ^ un ;
60530: LD_ADDR_VAR 0 3
60534: PUSH
60535: LD_VAR 0 3
60539: PUSH
60540: LD_VAR 0 2
60544: ADD
60545: ST_TO_ADDR
// end ;
60546: GO 60442
60548: POP
60549: POP
// repeat wait ( 0 0$1 ) ;
60550: LD_INT 35
60552: PPUSH
60553: CALL_OW 67
// for un in tmp do
60557: LD_ADDR_VAR 0 2
60561: PUSH
60562: LD_VAR 0 3
60566: PUSH
60567: FOR_IN
60568: IFFALSE 60642
// begin if IsDead ( un ) then
60570: LD_VAR 0 2
60574: PPUSH
60575: CALL_OW 301
60579: IFFALSE 60599
// begin tmp := tmp diff un ;
60581: LD_ADDR_VAR 0 3
60585: PUSH
60586: LD_VAR 0 3
60590: PUSH
60591: LD_VAR 0 2
60595: DIFF
60596: ST_TO_ADDR
// continue ;
60597: GO 60567
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
60599: LD_VAR 0 2
60603: PPUSH
60604: LD_INT 3
60606: PUSH
60607: LD_INT 22
60609: PUSH
60610: LD_INT 0
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PPUSH
60621: CALL_OW 69
60625: PPUSH
60626: LD_VAR 0 2
60630: PPUSH
60631: CALL_OW 74
60635: PPUSH
60636: CALL_OW 115
// end ;
60640: GO 60567
60642: POP
60643: POP
// until not tmp ;
60644: LD_VAR 0 3
60648: NOT
60649: IFFALSE 60550
// end ;
60651: PPOPN 3
60653: END
// every 0 0$1 trigger StreamModeActive and sTroll do
60654: LD_EXP 35
60658: PUSH
60659: LD_EXP 60
60663: AND
60664: IFFALSE 60718
60666: GO 60668
60668: DISABLE
// begin ToLua ( displayTroll(); ) ;
60669: LD_STRING displayTroll();
60671: PPUSH
60672: CALL_OW 559
// wait ( 3 3$00 ) ;
60676: LD_INT 6300
60678: PPUSH
60679: CALL_OW 67
// ToLua ( hideTroll(); ) ;
60683: LD_STRING hideTroll();
60685: PPUSH
60686: CALL_OW 559
// wait ( 1 1$00 ) ;
60690: LD_INT 2100
60692: PPUSH
60693: CALL_OW 67
// ToLua ( displayTroll(); ) ;
60697: LD_STRING displayTroll();
60699: PPUSH
60700: CALL_OW 559
// wait ( 1 1$00 ) ;
60704: LD_INT 2100
60706: PPUSH
60707: CALL_OW 67
// ToLua ( hideTroll(); ) ;
60711: LD_STRING hideTroll();
60713: PPUSH
60714: CALL_OW 559
// end ;
60718: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
60719: LD_EXP 35
60723: PUSH
60724: LD_EXP 61
60728: AND
60729: IFFALSE 60792
60731: GO 60733
60733: DISABLE
60734: LD_INT 0
60736: PPUSH
// begin p := 0 ;
60737: LD_ADDR_VAR 0 1
60741: PUSH
60742: LD_INT 0
60744: ST_TO_ADDR
// repeat game_speed := 1 ;
60745: LD_ADDR_OWVAR 65
60749: PUSH
60750: LD_INT 1
60752: ST_TO_ADDR
// wait ( 0 0$1 ) ;
60753: LD_INT 35
60755: PPUSH
60756: CALL_OW 67
// p := p + 1 ;
60760: LD_ADDR_VAR 0 1
60764: PUSH
60765: LD_VAR 0 1
60769: PUSH
60770: LD_INT 1
60772: PLUS
60773: ST_TO_ADDR
// until p >= 60 ;
60774: LD_VAR 0 1
60778: PUSH
60779: LD_INT 60
60781: GREATEREQUAL
60782: IFFALSE 60745
// game_speed := 4 ;
60784: LD_ADDR_OWVAR 65
60788: PUSH
60789: LD_INT 4
60791: ST_TO_ADDR
// end ;
60792: PPOPN 1
60794: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
60795: LD_EXP 35
60799: PUSH
60800: LD_EXP 62
60804: AND
60805: IFFALSE 60951
60807: GO 60809
60809: DISABLE
60810: LD_INT 0
60812: PPUSH
60813: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60814: LD_ADDR_VAR 0 1
60818: PUSH
60819: LD_INT 22
60821: PUSH
60822: LD_OWVAR 2
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 2
60833: PUSH
60834: LD_INT 30
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 30
60846: PUSH
60847: LD_INT 1
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: LIST
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PPUSH
60863: CALL_OW 69
60867: ST_TO_ADDR
// if not depot then
60868: LD_VAR 0 1
60872: NOT
60873: IFFALSE 60877
// exit ;
60875: GO 60951
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
60877: LD_ADDR_VAR 0 2
60881: PUSH
60882: LD_VAR 0 1
60886: PUSH
60887: LD_INT 1
60889: PPUSH
60890: LD_VAR 0 1
60894: PPUSH
60895: CALL_OW 12
60899: ARRAY
60900: PPUSH
60901: CALL_OW 274
60905: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
60906: LD_VAR 0 2
60910: PPUSH
60911: LD_INT 1
60913: PPUSH
60914: LD_INT 0
60916: PPUSH
60917: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
60921: LD_VAR 0 2
60925: PPUSH
60926: LD_INT 2
60928: PPUSH
60929: LD_INT 0
60931: PPUSH
60932: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
60936: LD_VAR 0 2
60940: PPUSH
60941: LD_INT 3
60943: PPUSH
60944: LD_INT 0
60946: PPUSH
60947: CALL_OW 277
// end ;
60951: PPOPN 2
60953: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
60954: LD_EXP 35
60958: PUSH
60959: LD_EXP 63
60963: AND
60964: IFFALSE 61061
60966: GO 60968
60968: DISABLE
60969: LD_INT 0
60971: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60972: LD_ADDR_VAR 0 1
60976: PUSH
60977: LD_INT 22
60979: PUSH
60980: LD_OWVAR 2
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 21
60991: PUSH
60992: LD_INT 1
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 3
61001: PUSH
61002: LD_INT 23
61004: PUSH
61005: LD_INT 0
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: LIST
61020: PPUSH
61021: CALL_OW 69
61025: ST_TO_ADDR
// if not tmp then
61026: LD_VAR 0 1
61030: NOT
61031: IFFALSE 61035
// exit ;
61033: GO 61061
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
61035: LD_VAR 0 1
61039: PUSH
61040: LD_INT 1
61042: PPUSH
61043: LD_VAR 0 1
61047: PPUSH
61048: CALL_OW 12
61052: ARRAY
61053: PPUSH
61054: LD_INT 200
61056: PPUSH
61057: CALL_OW 234
// end ;
61061: PPOPN 1
61063: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
61064: LD_EXP 35
61068: PUSH
61069: LD_EXP 64
61073: AND
61074: IFFALSE 61153
61076: GO 61078
61078: DISABLE
61079: LD_INT 0
61081: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
61082: LD_ADDR_VAR 0 1
61086: PUSH
61087: LD_INT 22
61089: PUSH
61090: LD_OWVAR 2
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 21
61101: PUSH
61102: LD_INT 2
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PPUSH
61113: CALL_OW 69
61117: ST_TO_ADDR
// if not tmp then
61118: LD_VAR 0 1
61122: NOT
61123: IFFALSE 61127
// exit ;
61125: GO 61153
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
61127: LD_VAR 0 1
61131: PUSH
61132: LD_INT 1
61134: PPUSH
61135: LD_VAR 0 1
61139: PPUSH
61140: CALL_OW 12
61144: ARRAY
61145: PPUSH
61146: LD_INT 60
61148: PPUSH
61149: CALL_OW 234
// end ;
61153: PPOPN 1
61155: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
61156: LD_EXP 35
61160: PUSH
61161: LD_EXP 65
61165: AND
61166: IFFALSE 61265
61168: GO 61170
61170: DISABLE
61171: LD_INT 0
61173: PPUSH
61174: PPUSH
// begin enable ;
61175: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
61176: LD_ADDR_VAR 0 1
61180: PUSH
61181: LD_INT 22
61183: PUSH
61184: LD_OWVAR 2
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 61
61195: PUSH
61196: EMPTY
61197: LIST
61198: PUSH
61199: LD_INT 33
61201: PUSH
61202: LD_INT 2
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: LIST
61213: PPUSH
61214: CALL_OW 69
61218: ST_TO_ADDR
// if not tmp then
61219: LD_VAR 0 1
61223: NOT
61224: IFFALSE 61228
// exit ;
61226: GO 61265
// for i in tmp do
61228: LD_ADDR_VAR 0 2
61232: PUSH
61233: LD_VAR 0 1
61237: PUSH
61238: FOR_IN
61239: IFFALSE 61263
// if IsControledBy ( i ) then
61241: LD_VAR 0 2
61245: PPUSH
61246: CALL_OW 312
61250: IFFALSE 61261
// ComUnlink ( i ) ;
61252: LD_VAR 0 2
61256: PPUSH
61257: CALL_OW 136
61261: GO 61238
61263: POP
61264: POP
// end ;
61265: PPOPN 2
61267: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
61268: LD_EXP 35
61272: PUSH
61273: LD_EXP 66
61277: AND
61278: IFFALSE 61418
61280: GO 61282
61282: DISABLE
61283: LD_INT 0
61285: PPUSH
61286: PPUSH
// begin ToLua ( displayPowell(); ) ;
61287: LD_STRING displayPowell();
61289: PPUSH
61290: CALL_OW 559
// uc_side := 0 ;
61294: LD_ADDR_OWVAR 20
61298: PUSH
61299: LD_INT 0
61301: ST_TO_ADDR
// uc_nation := 2 ;
61302: LD_ADDR_OWVAR 21
61306: PUSH
61307: LD_INT 2
61309: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
61310: LD_ADDR_OWVAR 37
61314: PUSH
61315: LD_INT 14
61317: ST_TO_ADDR
// vc_engine := engine_siberite ;
61318: LD_ADDR_OWVAR 39
61322: PUSH
61323: LD_INT 3
61325: ST_TO_ADDR
// vc_control := control_apeman ;
61326: LD_ADDR_OWVAR 38
61330: PUSH
61331: LD_INT 5
61333: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
61334: LD_ADDR_OWVAR 40
61338: PUSH
61339: LD_INT 29
61341: ST_TO_ADDR
// un := CreateVehicle ;
61342: LD_ADDR_VAR 0 2
61346: PUSH
61347: CALL_OW 45
61351: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
61352: LD_VAR 0 2
61356: PPUSH
61357: LD_INT 1
61359: PPUSH
61360: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
61364: LD_INT 35
61366: PPUSH
61367: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
61371: LD_VAR 0 2
61375: PPUSH
61376: LD_INT 22
61378: PUSH
61379: LD_OWVAR 2
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PPUSH
61388: CALL_OW 69
61392: PPUSH
61393: LD_VAR 0 2
61397: PPUSH
61398: CALL_OW 74
61402: PPUSH
61403: CALL_OW 115
// until IsDead ( un ) ;
61407: LD_VAR 0 2
61411: PPUSH
61412: CALL_OW 301
61416: IFFALSE 61364
// end ;
61418: PPOPN 2
61420: END
// every 0 0$1 trigger StreamModeActive and sStu do
61421: LD_EXP 35
61425: PUSH
61426: LD_EXP 74
61430: AND
61431: IFFALSE 61447
61433: GO 61435
61435: DISABLE
// begin ToLua ( displayStucuk(); ) ;
61436: LD_STRING displayStucuk();
61438: PPUSH
61439: CALL_OW 559
// ResetFog ;
61443: CALL_OW 335
// end ;
61447: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
61448: LD_EXP 35
61452: PUSH
61453: LD_EXP 67
61457: AND
61458: IFFALSE 61599
61460: GO 61462
61462: DISABLE
61463: LD_INT 0
61465: PPUSH
61466: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
61467: LD_ADDR_VAR 0 2
61471: PUSH
61472: LD_INT 22
61474: PUSH
61475: LD_OWVAR 2
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 21
61486: PUSH
61487: LD_INT 1
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PPUSH
61498: CALL_OW 69
61502: ST_TO_ADDR
// if not tmp then
61503: LD_VAR 0 2
61507: NOT
61508: IFFALSE 61512
// exit ;
61510: GO 61599
// un := tmp [ rand ( 1 , tmp ) ] ;
61512: LD_ADDR_VAR 0 1
61516: PUSH
61517: LD_VAR 0 2
61521: PUSH
61522: LD_INT 1
61524: PPUSH
61525: LD_VAR 0 2
61529: PPUSH
61530: CALL_OW 12
61534: ARRAY
61535: ST_TO_ADDR
// SetSide ( un , 0 ) ;
61536: LD_VAR 0 1
61540: PPUSH
61541: LD_INT 0
61543: PPUSH
61544: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
61548: LD_VAR 0 1
61552: PPUSH
61553: LD_OWVAR 3
61557: PUSH
61558: LD_VAR 0 1
61562: DIFF
61563: PPUSH
61564: LD_VAR 0 1
61568: PPUSH
61569: CALL_OW 74
61573: PPUSH
61574: CALL_OW 115
// wait ( 0 0$20 ) ;
61578: LD_INT 700
61580: PPUSH
61581: CALL_OW 67
// SetSide ( un , your_side ) ;
61585: LD_VAR 0 1
61589: PPUSH
61590: LD_OWVAR 2
61594: PPUSH
61595: CALL_OW 235
// end ;
61599: PPOPN 2
61601: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
61602: LD_EXP 35
61606: PUSH
61607: LD_EXP 68
61611: AND
61612: IFFALSE 61718
61614: GO 61616
61616: DISABLE
61617: LD_INT 0
61619: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61620: LD_ADDR_VAR 0 1
61624: PUSH
61625: LD_INT 22
61627: PUSH
61628: LD_OWVAR 2
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 2
61639: PUSH
61640: LD_INT 30
61642: PUSH
61643: LD_INT 0
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 30
61652: PUSH
61653: LD_INT 1
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: LIST
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PPUSH
61669: CALL_OW 69
61673: ST_TO_ADDR
// if not depot then
61674: LD_VAR 0 1
61678: NOT
61679: IFFALSE 61683
// exit ;
61681: GO 61718
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
61683: LD_VAR 0 1
61687: PUSH
61688: LD_INT 1
61690: ARRAY
61691: PPUSH
61692: CALL_OW 250
61696: PPUSH
61697: LD_VAR 0 1
61701: PUSH
61702: LD_INT 1
61704: ARRAY
61705: PPUSH
61706: CALL_OW 251
61710: PPUSH
61711: LD_INT 70
61713: PPUSH
61714: CALL_OW 495
// end ;
61718: PPOPN 1
61720: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
61721: LD_EXP 35
61725: PUSH
61726: LD_EXP 69
61730: AND
61731: IFFALSE 61942
61733: GO 61735
61735: DISABLE
61736: LD_INT 0
61738: PPUSH
61739: PPUSH
61740: PPUSH
61741: PPUSH
61742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
61743: LD_ADDR_VAR 0 5
61747: PUSH
61748: LD_INT 22
61750: PUSH
61751: LD_OWVAR 2
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 21
61762: PUSH
61763: LD_INT 1
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PPUSH
61774: CALL_OW 69
61778: ST_TO_ADDR
// if not tmp then
61779: LD_VAR 0 5
61783: NOT
61784: IFFALSE 61788
// exit ;
61786: GO 61942
// for i in tmp do
61788: LD_ADDR_VAR 0 1
61792: PUSH
61793: LD_VAR 0 5
61797: PUSH
61798: FOR_IN
61799: IFFALSE 61940
// begin d := rand ( 0 , 5 ) ;
61801: LD_ADDR_VAR 0 4
61805: PUSH
61806: LD_INT 0
61808: PPUSH
61809: LD_INT 5
61811: PPUSH
61812: CALL_OW 12
61816: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
61817: LD_ADDR_VAR 0 2
61821: PUSH
61822: LD_VAR 0 1
61826: PPUSH
61827: CALL_OW 250
61831: PPUSH
61832: LD_VAR 0 4
61836: PPUSH
61837: LD_INT 3
61839: PPUSH
61840: LD_INT 12
61842: PPUSH
61843: CALL_OW 12
61847: PPUSH
61848: CALL_OW 272
61852: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
61853: LD_ADDR_VAR 0 3
61857: PUSH
61858: LD_VAR 0 1
61862: PPUSH
61863: CALL_OW 251
61867: PPUSH
61868: LD_VAR 0 4
61872: PPUSH
61873: LD_INT 3
61875: PPUSH
61876: LD_INT 12
61878: PPUSH
61879: CALL_OW 12
61883: PPUSH
61884: CALL_OW 273
61888: ST_TO_ADDR
// if ValidHex ( x , y ) then
61889: LD_VAR 0 2
61893: PPUSH
61894: LD_VAR 0 3
61898: PPUSH
61899: CALL_OW 488
61903: IFFALSE 61938
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
61905: LD_VAR 0 1
61909: PPUSH
61910: LD_VAR 0 2
61914: PPUSH
61915: LD_VAR 0 3
61919: PPUSH
61920: LD_INT 3
61922: PPUSH
61923: LD_INT 6
61925: PPUSH
61926: CALL_OW 12
61930: PPUSH
61931: LD_INT 1
61933: PPUSH
61934: CALL_OW 483
// end ;
61938: GO 61798
61940: POP
61941: POP
// end ;
61942: PPOPN 5
61944: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
61945: LD_EXP 35
61949: PUSH
61950: LD_EXP 70
61954: AND
61955: IFFALSE 62049
61957: GO 61959
61959: DISABLE
61960: LD_INT 0
61962: PPUSH
61963: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
61964: LD_ADDR_VAR 0 2
61968: PUSH
61969: LD_INT 22
61971: PUSH
61972: LD_OWVAR 2
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 32
61983: PUSH
61984: LD_INT 1
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 21
61993: PUSH
61994: LD_INT 2
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: LIST
62005: PPUSH
62006: CALL_OW 69
62010: ST_TO_ADDR
// if not tmp then
62011: LD_VAR 0 2
62015: NOT
62016: IFFALSE 62020
// exit ;
62018: GO 62049
// for i in tmp do
62020: LD_ADDR_VAR 0 1
62024: PUSH
62025: LD_VAR 0 2
62029: PUSH
62030: FOR_IN
62031: IFFALSE 62047
// SetFuel ( i , 0 ) ;
62033: LD_VAR 0 1
62037: PPUSH
62038: LD_INT 0
62040: PPUSH
62041: CALL_OW 240
62045: GO 62030
62047: POP
62048: POP
// end ;
62049: PPOPN 2
62051: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
62052: LD_EXP 35
62056: PUSH
62057: LD_EXP 71
62061: AND
62062: IFFALSE 62128
62064: GO 62066
62066: DISABLE
62067: LD_INT 0
62069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
62070: LD_ADDR_VAR 0 1
62074: PUSH
62075: LD_INT 22
62077: PUSH
62078: LD_OWVAR 2
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 30
62089: PUSH
62090: LD_INT 29
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PPUSH
62101: CALL_OW 69
62105: ST_TO_ADDR
// if not tmp then
62106: LD_VAR 0 1
62110: NOT
62111: IFFALSE 62115
// exit ;
62113: GO 62128
// DestroyUnit ( tmp [ 1 ] ) ;
62115: LD_VAR 0 1
62119: PUSH
62120: LD_INT 1
62122: ARRAY
62123: PPUSH
62124: CALL_OW 65
// end ;
62128: PPOPN 1
62130: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
62131: LD_EXP 35
62135: PUSH
62136: LD_EXP 73
62140: AND
62141: IFFALSE 62270
62143: GO 62145
62145: DISABLE
62146: LD_INT 0
62148: PPUSH
// begin uc_side := 0 ;
62149: LD_ADDR_OWVAR 20
62153: PUSH
62154: LD_INT 0
62156: ST_TO_ADDR
// uc_nation := nation_arabian ;
62157: LD_ADDR_OWVAR 21
62161: PUSH
62162: LD_INT 2
62164: ST_TO_ADDR
// hc_gallery :=  ;
62165: LD_ADDR_OWVAR 33
62169: PUSH
62170: LD_STRING 
62172: ST_TO_ADDR
// hc_name :=  ;
62173: LD_ADDR_OWVAR 26
62177: PUSH
62178: LD_STRING 
62180: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
62181: LD_INT 1
62183: PPUSH
62184: LD_INT 11
62186: PPUSH
62187: LD_INT 10
62189: PPUSH
62190: CALL_OW 380
// un := CreateHuman ;
62194: LD_ADDR_VAR 0 1
62198: PUSH
62199: CALL_OW 44
62203: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62204: LD_VAR 0 1
62208: PPUSH
62209: LD_INT 1
62211: PPUSH
62212: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
62216: LD_INT 35
62218: PPUSH
62219: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
62223: LD_VAR 0 1
62227: PPUSH
62228: LD_INT 22
62230: PUSH
62231: LD_OWVAR 2
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PPUSH
62240: CALL_OW 69
62244: PPUSH
62245: LD_VAR 0 1
62249: PPUSH
62250: CALL_OW 74
62254: PPUSH
62255: CALL_OW 115
// until IsDead ( un ) ;
62259: LD_VAR 0 1
62263: PPUSH
62264: CALL_OW 301
62268: IFFALSE 62216
// end ;
62270: PPOPN 1
62272: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
62273: LD_EXP 35
62277: PUSH
62278: LD_EXP 75
62282: AND
62283: IFFALSE 62295
62285: GO 62287
62287: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
62288: LD_STRING earthquake(getX(game), 0, 32)
62290: PPUSH
62291: CALL_OW 559
62295: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
62296: LD_EXP 35
62300: PUSH
62301: LD_EXP 76
62305: AND
62306: IFFALSE 62397
62308: GO 62310
62310: DISABLE
62311: LD_INT 0
62313: PPUSH
// begin enable ;
62314: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
62315: LD_ADDR_VAR 0 1
62319: PUSH
62320: LD_INT 22
62322: PUSH
62323: LD_OWVAR 2
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 21
62334: PUSH
62335: LD_INT 2
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 33
62344: PUSH
62345: LD_INT 3
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: LIST
62356: PPUSH
62357: CALL_OW 69
62361: ST_TO_ADDR
// if not tmp then
62362: LD_VAR 0 1
62366: NOT
62367: IFFALSE 62371
// exit ;
62369: GO 62397
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
62371: LD_VAR 0 1
62375: PUSH
62376: LD_INT 1
62378: PPUSH
62379: LD_VAR 0 1
62383: PPUSH
62384: CALL_OW 12
62388: ARRAY
62389: PPUSH
62390: LD_INT 1
62392: PPUSH
62393: CALL_OW 234
// end ;
62397: PPOPN 1
62399: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
62400: LD_EXP 35
62404: PUSH
62405: LD_EXP 77
62409: AND
62410: IFFALSE 62551
62412: GO 62414
62414: DISABLE
62415: LD_INT 0
62417: PPUSH
62418: PPUSH
62419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
62420: LD_ADDR_VAR 0 3
62424: PUSH
62425: LD_INT 22
62427: PUSH
62428: LD_OWVAR 2
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 25
62439: PUSH
62440: LD_INT 1
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PPUSH
62451: CALL_OW 69
62455: ST_TO_ADDR
// if not tmp then
62456: LD_VAR 0 3
62460: NOT
62461: IFFALSE 62465
// exit ;
62463: GO 62551
// un := tmp [ rand ( 1 , tmp ) ] ;
62465: LD_ADDR_VAR 0 2
62469: PUSH
62470: LD_VAR 0 3
62474: PUSH
62475: LD_INT 1
62477: PPUSH
62478: LD_VAR 0 3
62482: PPUSH
62483: CALL_OW 12
62487: ARRAY
62488: ST_TO_ADDR
// if Crawls ( un ) then
62489: LD_VAR 0 2
62493: PPUSH
62494: CALL_OW 318
62498: IFFALSE 62509
// ComWalk ( un ) ;
62500: LD_VAR 0 2
62504: PPUSH
62505: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
62509: LD_VAR 0 2
62513: PPUSH
62514: LD_INT 9
62516: PPUSH
62517: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
62521: LD_INT 28
62523: PPUSH
62524: LD_OWVAR 2
62528: PPUSH
62529: LD_INT 2
62531: PPUSH
62532: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
62536: LD_INT 29
62538: PPUSH
62539: LD_OWVAR 2
62543: PPUSH
62544: LD_INT 2
62546: PPUSH
62547: CALL_OW 322
// end ;
62551: PPOPN 3
62553: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
62554: LD_EXP 35
62558: PUSH
62559: LD_EXP 78
62563: AND
62564: IFFALSE 62675
62566: GO 62568
62568: DISABLE
62569: LD_INT 0
62571: PPUSH
62572: PPUSH
62573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
62574: LD_ADDR_VAR 0 3
62578: PUSH
62579: LD_INT 22
62581: PUSH
62582: LD_OWVAR 2
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 25
62593: PUSH
62594: LD_INT 1
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PPUSH
62605: CALL_OW 69
62609: ST_TO_ADDR
// if not tmp then
62610: LD_VAR 0 3
62614: NOT
62615: IFFALSE 62619
// exit ;
62617: GO 62675
// un := tmp [ rand ( 1 , tmp ) ] ;
62619: LD_ADDR_VAR 0 2
62623: PUSH
62624: LD_VAR 0 3
62628: PUSH
62629: LD_INT 1
62631: PPUSH
62632: LD_VAR 0 3
62636: PPUSH
62637: CALL_OW 12
62641: ARRAY
62642: ST_TO_ADDR
// if Crawls ( un ) then
62643: LD_VAR 0 2
62647: PPUSH
62648: CALL_OW 318
62652: IFFALSE 62663
// ComWalk ( un ) ;
62654: LD_VAR 0 2
62658: PPUSH
62659: CALL_OW 138
// SetClass ( un , class_mortar ) ;
62663: LD_VAR 0 2
62667: PPUSH
62668: LD_INT 8
62670: PPUSH
62671: CALL_OW 336
// end ;
62675: PPOPN 3
62677: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
62678: LD_EXP 35
62682: PUSH
62683: LD_EXP 79
62687: AND
62688: IFFALSE 62832
62690: GO 62692
62692: DISABLE
62693: LD_INT 0
62695: PPUSH
62696: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
62697: LD_ADDR_VAR 0 2
62701: PUSH
62702: LD_INT 22
62704: PUSH
62705: LD_OWVAR 2
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 21
62716: PUSH
62717: LD_INT 2
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 2
62726: PUSH
62727: LD_INT 34
62729: PUSH
62730: LD_INT 12
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 34
62739: PUSH
62740: LD_INT 51
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 34
62749: PUSH
62750: LD_INT 32
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: LIST
62767: PPUSH
62768: CALL_OW 69
62772: ST_TO_ADDR
// if not tmp then
62773: LD_VAR 0 2
62777: NOT
62778: IFFALSE 62782
// exit ;
62780: GO 62832
// for i in tmp do
62782: LD_ADDR_VAR 0 1
62786: PUSH
62787: LD_VAR 0 2
62791: PUSH
62792: FOR_IN
62793: IFFALSE 62830
// if GetCargo ( i , mat_artifact ) = 0 then
62795: LD_VAR 0 1
62799: PPUSH
62800: LD_INT 4
62802: PPUSH
62803: CALL_OW 289
62807: PUSH
62808: LD_INT 0
62810: EQUAL
62811: IFFALSE 62828
// SetCargo ( i , mat_siberit , 100 ) ;
62813: LD_VAR 0 1
62817: PPUSH
62818: LD_INT 3
62820: PPUSH
62821: LD_INT 100
62823: PPUSH
62824: CALL_OW 290
62828: GO 62792
62830: POP
62831: POP
// end ;
62832: PPOPN 2
62834: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
62835: LD_EXP 35
62839: PUSH
62840: LD_EXP 80
62844: AND
62845: IFFALSE 63028
62847: GO 62849
62849: DISABLE
62850: LD_INT 0
62852: PPUSH
62853: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62854: LD_ADDR_VAR 0 2
62858: PUSH
62859: LD_INT 22
62861: PUSH
62862: LD_OWVAR 2
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PPUSH
62871: CALL_OW 69
62875: ST_TO_ADDR
// if not tmp then
62876: LD_VAR 0 2
62880: NOT
62881: IFFALSE 62885
// exit ;
62883: GO 63028
// for i := 1 to 2 do
62885: LD_ADDR_VAR 0 1
62889: PUSH
62890: DOUBLE
62891: LD_INT 1
62893: DEC
62894: ST_TO_ADDR
62895: LD_INT 2
62897: PUSH
62898: FOR_TO
62899: IFFALSE 63026
// begin uc_side := your_side ;
62901: LD_ADDR_OWVAR 20
62905: PUSH
62906: LD_OWVAR 2
62910: ST_TO_ADDR
// uc_nation := nation_american ;
62911: LD_ADDR_OWVAR 21
62915: PUSH
62916: LD_INT 1
62918: ST_TO_ADDR
// vc_chassis := us_morphling ;
62919: LD_ADDR_OWVAR 37
62923: PUSH
62924: LD_INT 5
62926: ST_TO_ADDR
// vc_engine := engine_siberite ;
62927: LD_ADDR_OWVAR 39
62931: PUSH
62932: LD_INT 3
62934: ST_TO_ADDR
// vc_control := control_computer ;
62935: LD_ADDR_OWVAR 38
62939: PUSH
62940: LD_INT 3
62942: ST_TO_ADDR
// vc_weapon := us_double_laser ;
62943: LD_ADDR_OWVAR 40
62947: PUSH
62948: LD_INT 10
62950: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
62951: LD_VAR 0 2
62955: PUSH
62956: LD_INT 1
62958: ARRAY
62959: PPUSH
62960: CALL_OW 310
62964: NOT
62965: IFFALSE 63012
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
62967: CALL_OW 45
62971: PPUSH
62972: LD_VAR 0 2
62976: PUSH
62977: LD_INT 1
62979: ARRAY
62980: PPUSH
62981: CALL_OW 250
62985: PPUSH
62986: LD_VAR 0 2
62990: PUSH
62991: LD_INT 1
62993: ARRAY
62994: PPUSH
62995: CALL_OW 251
62999: PPUSH
63000: LD_INT 12
63002: PPUSH
63003: LD_INT 1
63005: PPUSH
63006: CALL_OW 50
63010: GO 63024
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
63012: CALL_OW 45
63016: PPUSH
63017: LD_INT 1
63019: PPUSH
63020: CALL_OW 51
// end ;
63024: GO 62898
63026: POP
63027: POP
// end ;
63028: PPOPN 2
63030: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
63031: LD_EXP 35
63035: PUSH
63036: LD_EXP 81
63040: AND
63041: IFFALSE 63263
63043: GO 63045
63045: DISABLE
63046: LD_INT 0
63048: PPUSH
63049: PPUSH
63050: PPUSH
63051: PPUSH
63052: PPUSH
63053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
63054: LD_ADDR_VAR 0 6
63058: PUSH
63059: LD_INT 22
63061: PUSH
63062: LD_OWVAR 2
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 21
63073: PUSH
63074: LD_INT 1
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 3
63083: PUSH
63084: LD_INT 23
63086: PUSH
63087: LD_INT 0
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: LIST
63102: PPUSH
63103: CALL_OW 69
63107: ST_TO_ADDR
// if not tmp then
63108: LD_VAR 0 6
63112: NOT
63113: IFFALSE 63117
// exit ;
63115: GO 63263
// s1 := rand ( 1 , 4 ) ;
63117: LD_ADDR_VAR 0 2
63121: PUSH
63122: LD_INT 1
63124: PPUSH
63125: LD_INT 4
63127: PPUSH
63128: CALL_OW 12
63132: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
63133: LD_ADDR_VAR 0 4
63137: PUSH
63138: LD_VAR 0 6
63142: PUSH
63143: LD_INT 1
63145: ARRAY
63146: PPUSH
63147: LD_VAR 0 2
63151: PPUSH
63152: CALL_OW 259
63156: ST_TO_ADDR
// if s1 = 1 then
63157: LD_VAR 0 2
63161: PUSH
63162: LD_INT 1
63164: EQUAL
63165: IFFALSE 63185
// s2 := rand ( 2 , 4 ) else
63167: LD_ADDR_VAR 0 3
63171: PUSH
63172: LD_INT 2
63174: PPUSH
63175: LD_INT 4
63177: PPUSH
63178: CALL_OW 12
63182: ST_TO_ADDR
63183: GO 63193
// s2 := 1 ;
63185: LD_ADDR_VAR 0 3
63189: PUSH
63190: LD_INT 1
63192: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
63193: LD_ADDR_VAR 0 5
63197: PUSH
63198: LD_VAR 0 6
63202: PUSH
63203: LD_INT 1
63205: ARRAY
63206: PPUSH
63207: LD_VAR 0 3
63211: PPUSH
63212: CALL_OW 259
63216: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
63217: LD_VAR 0 6
63221: PUSH
63222: LD_INT 1
63224: ARRAY
63225: PPUSH
63226: LD_VAR 0 2
63230: PPUSH
63231: LD_VAR 0 5
63235: PPUSH
63236: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
63240: LD_VAR 0 6
63244: PUSH
63245: LD_INT 1
63247: ARRAY
63248: PPUSH
63249: LD_VAR 0 3
63253: PPUSH
63254: LD_VAR 0 4
63258: PPUSH
63259: CALL_OW 237
// end ;
63263: PPOPN 6
63265: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
63266: LD_EXP 35
63270: PUSH
63271: LD_EXP 82
63275: AND
63276: IFFALSE 63355
63278: GO 63280
63280: DISABLE
63281: LD_INT 0
63283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
63284: LD_ADDR_VAR 0 1
63288: PUSH
63289: LD_INT 22
63291: PUSH
63292: LD_OWVAR 2
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 30
63303: PUSH
63304: LD_INT 3
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PPUSH
63315: CALL_OW 69
63319: ST_TO_ADDR
// if not tmp then
63320: LD_VAR 0 1
63324: NOT
63325: IFFALSE 63329
// exit ;
63327: GO 63355
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
63329: LD_VAR 0 1
63333: PUSH
63334: LD_INT 1
63336: PPUSH
63337: LD_VAR 0 1
63341: PPUSH
63342: CALL_OW 12
63346: ARRAY
63347: PPUSH
63348: LD_INT 1
63350: PPUSH
63351: CALL_OW 234
// end ;
63355: PPOPN 1
63357: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
63358: LD_EXP 35
63362: PUSH
63363: LD_EXP 83
63367: AND
63368: IFFALSE 63480
63370: GO 63372
63372: DISABLE
63373: LD_INT 0
63375: PPUSH
63376: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
63377: LD_ADDR_VAR 0 2
63381: PUSH
63382: LD_INT 22
63384: PUSH
63385: LD_OWVAR 2
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: LD_INT 2
63396: PUSH
63397: LD_INT 30
63399: PUSH
63400: LD_INT 27
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 30
63409: PUSH
63410: LD_INT 26
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 30
63419: PUSH
63420: LD_INT 28
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PPUSH
63437: CALL_OW 69
63441: ST_TO_ADDR
// if not tmp then
63442: LD_VAR 0 2
63446: NOT
63447: IFFALSE 63451
// exit ;
63449: GO 63480
// for i in tmp do
63451: LD_ADDR_VAR 0 1
63455: PUSH
63456: LD_VAR 0 2
63460: PUSH
63461: FOR_IN
63462: IFFALSE 63478
// SetLives ( i , 1 ) ;
63464: LD_VAR 0 1
63468: PPUSH
63469: LD_INT 1
63471: PPUSH
63472: CALL_OW 234
63476: GO 63461
63478: POP
63479: POP
// end ;
63480: PPOPN 2
63482: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
63483: LD_EXP 35
63487: PUSH
63488: LD_EXP 84
63492: AND
63493: IFFALSE 63780
63495: GO 63497
63497: DISABLE
63498: LD_INT 0
63500: PPUSH
63501: PPUSH
63502: PPUSH
// begin i := rand ( 1 , 7 ) ;
63503: LD_ADDR_VAR 0 1
63507: PUSH
63508: LD_INT 1
63510: PPUSH
63511: LD_INT 7
63513: PPUSH
63514: CALL_OW 12
63518: ST_TO_ADDR
// case i of 1 :
63519: LD_VAR 0 1
63523: PUSH
63524: LD_INT 1
63526: DOUBLE
63527: EQUAL
63528: IFTRUE 63532
63530: GO 63542
63532: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
63533: LD_STRING earthquake(getX(game), 0, 32)
63535: PPUSH
63536: CALL_OW 559
63540: GO 63780
63542: LD_INT 2
63544: DOUBLE
63545: EQUAL
63546: IFTRUE 63550
63548: GO 63564
63550: POP
// begin ToLua ( displayStucuk(); ) ;
63551: LD_STRING displayStucuk();
63553: PPUSH
63554: CALL_OW 559
// ResetFog ;
63558: CALL_OW 335
// end ; 3 :
63562: GO 63780
63564: LD_INT 3
63566: DOUBLE
63567: EQUAL
63568: IFTRUE 63572
63570: GO 63676
63572: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63573: LD_ADDR_VAR 0 2
63577: PUSH
63578: LD_INT 22
63580: PUSH
63581: LD_OWVAR 2
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 25
63592: PUSH
63593: LD_INT 1
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PPUSH
63604: CALL_OW 69
63608: ST_TO_ADDR
// if not tmp then
63609: LD_VAR 0 2
63613: NOT
63614: IFFALSE 63618
// exit ;
63616: GO 63780
// un := tmp [ rand ( 1 , tmp ) ] ;
63618: LD_ADDR_VAR 0 3
63622: PUSH
63623: LD_VAR 0 2
63627: PUSH
63628: LD_INT 1
63630: PPUSH
63631: LD_VAR 0 2
63635: PPUSH
63636: CALL_OW 12
63640: ARRAY
63641: ST_TO_ADDR
// if Crawls ( un ) then
63642: LD_VAR 0 3
63646: PPUSH
63647: CALL_OW 318
63651: IFFALSE 63662
// ComWalk ( un ) ;
63653: LD_VAR 0 3
63657: PPUSH
63658: CALL_OW 138
// SetClass ( un , class_mortar ) ;
63662: LD_VAR 0 3
63666: PPUSH
63667: LD_INT 8
63669: PPUSH
63670: CALL_OW 336
// end ; 4 :
63674: GO 63780
63676: LD_INT 4
63678: DOUBLE
63679: EQUAL
63680: IFTRUE 63684
63682: GO 63758
63684: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
63685: LD_ADDR_VAR 0 2
63689: PUSH
63690: LD_INT 22
63692: PUSH
63693: LD_OWVAR 2
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 30
63704: PUSH
63705: LD_INT 29
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PPUSH
63716: CALL_OW 69
63720: ST_TO_ADDR
// if not tmp then
63721: LD_VAR 0 2
63725: NOT
63726: IFFALSE 63730
// exit ;
63728: GO 63780
// CenterNowOnUnits ( tmp [ 1 ] ) ;
63730: LD_VAR 0 2
63734: PUSH
63735: LD_INT 1
63737: ARRAY
63738: PPUSH
63739: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
63743: LD_VAR 0 2
63747: PUSH
63748: LD_INT 1
63750: ARRAY
63751: PPUSH
63752: CALL_OW 65
// end ; 5 .. 7 :
63756: GO 63780
63758: LD_INT 5
63760: DOUBLE
63761: GREATEREQUAL
63762: IFFALSE 63770
63764: LD_INT 7
63766: DOUBLE
63767: LESSEQUAL
63768: IFTRUE 63772
63770: GO 63779
63772: POP
// StreamSibBomb ; end ;
63773: CALL 60017 0 0
63777: GO 63780
63779: POP
// end ;
63780: PPOPN 3
63782: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
63783: LD_EXP 35
63787: PUSH
63788: LD_EXP 85
63792: AND
63793: IFFALSE 63949
63795: GO 63797
63797: DISABLE
63798: LD_INT 0
63800: PPUSH
63801: PPUSH
63802: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
63803: LD_ADDR_VAR 0 2
63807: PUSH
63808: LD_INT 81
63810: PUSH
63811: LD_OWVAR 2
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 2
63822: PUSH
63823: LD_INT 21
63825: PUSH
63826: LD_INT 1
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 21
63835: PUSH
63836: LD_INT 2
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: LIST
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PPUSH
63852: CALL_OW 69
63856: ST_TO_ADDR
// if not tmp then
63857: LD_VAR 0 2
63861: NOT
63862: IFFALSE 63866
// exit ;
63864: GO 63949
// p := 0 ;
63866: LD_ADDR_VAR 0 3
63870: PUSH
63871: LD_INT 0
63873: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
63874: LD_INT 35
63876: PPUSH
63877: CALL_OW 67
// p := p + 1 ;
63881: LD_ADDR_VAR 0 3
63885: PUSH
63886: LD_VAR 0 3
63890: PUSH
63891: LD_INT 1
63893: PLUS
63894: ST_TO_ADDR
// for i in tmp do
63895: LD_ADDR_VAR 0 1
63899: PUSH
63900: LD_VAR 0 2
63904: PUSH
63905: FOR_IN
63906: IFFALSE 63937
// if GetLives ( i ) < 1000 then
63908: LD_VAR 0 1
63912: PPUSH
63913: CALL_OW 256
63917: PUSH
63918: LD_INT 1000
63920: LESS
63921: IFFALSE 63935
// SetLives ( i , 1000 ) ;
63923: LD_VAR 0 1
63927: PPUSH
63928: LD_INT 1000
63930: PPUSH
63931: CALL_OW 234
63935: GO 63905
63937: POP
63938: POP
// until p > 20 ;
63939: LD_VAR 0 3
63943: PUSH
63944: LD_INT 20
63946: GREATER
63947: IFFALSE 63874
// end ;
63949: PPOPN 3
63951: END
// every 0 0$1 trigger StreamModeActive and sTime do
63952: LD_EXP 35
63956: PUSH
63957: LD_EXP 86
63961: AND
63962: IFFALSE 63997
63964: GO 63966
63966: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
63967: LD_INT 28
63969: PPUSH
63970: LD_OWVAR 2
63974: PPUSH
63975: LD_INT 2
63977: PPUSH
63978: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
63982: LD_INT 30
63984: PPUSH
63985: LD_OWVAR 2
63989: PPUSH
63990: LD_INT 2
63992: PPUSH
63993: CALL_OW 322
// end ;
63997: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
63998: LD_EXP 35
64002: PUSH
64003: LD_EXP 87
64007: AND
64008: IFFALSE 64129
64010: GO 64012
64012: DISABLE
64013: LD_INT 0
64015: PPUSH
64016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
64017: LD_ADDR_VAR 0 2
64021: PUSH
64022: LD_INT 22
64024: PUSH
64025: LD_OWVAR 2
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 21
64036: PUSH
64037: LD_INT 1
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 3
64046: PUSH
64047: LD_INT 23
64049: PUSH
64050: LD_INT 0
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: LIST
64065: PPUSH
64066: CALL_OW 69
64070: ST_TO_ADDR
// if not tmp then
64071: LD_VAR 0 2
64075: NOT
64076: IFFALSE 64080
// exit ;
64078: GO 64129
// for i in tmp do
64080: LD_ADDR_VAR 0 1
64084: PUSH
64085: LD_VAR 0 2
64089: PUSH
64090: FOR_IN
64091: IFFALSE 64127
// begin if Crawls ( i ) then
64093: LD_VAR 0 1
64097: PPUSH
64098: CALL_OW 318
64102: IFFALSE 64113
// ComWalk ( i ) ;
64104: LD_VAR 0 1
64108: PPUSH
64109: CALL_OW 138
// SetClass ( i , 2 ) ;
64113: LD_VAR 0 1
64117: PPUSH
64118: LD_INT 2
64120: PPUSH
64121: CALL_OW 336
// end ;
64125: GO 64090
64127: POP
64128: POP
// end ;
64129: PPOPN 2
64131: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
64132: LD_EXP 35
64136: PUSH
64137: LD_EXP 88
64141: AND
64142: IFFALSE 64430
64144: GO 64146
64146: DISABLE
64147: LD_INT 0
64149: PPUSH
64150: PPUSH
64151: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
64152: LD_OWVAR 2
64156: PPUSH
64157: LD_INT 9
64159: PPUSH
64160: LD_INT 1
64162: PPUSH
64163: LD_INT 1
64165: PPUSH
64166: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
64170: LD_INT 9
64172: PPUSH
64173: LD_OWVAR 2
64177: PPUSH
64178: CALL_OW 343
// uc_side := 9 ;
64182: LD_ADDR_OWVAR 20
64186: PUSH
64187: LD_INT 9
64189: ST_TO_ADDR
// uc_nation := 2 ;
64190: LD_ADDR_OWVAR 21
64194: PUSH
64195: LD_INT 2
64197: ST_TO_ADDR
// hc_name := Dark Warrior ;
64198: LD_ADDR_OWVAR 26
64202: PUSH
64203: LD_STRING Dark Warrior
64205: ST_TO_ADDR
// hc_gallery :=  ;
64206: LD_ADDR_OWVAR 33
64210: PUSH
64211: LD_STRING 
64213: ST_TO_ADDR
// hc_noskilllimit := true ;
64214: LD_ADDR_OWVAR 76
64218: PUSH
64219: LD_INT 1
64221: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
64222: LD_ADDR_OWVAR 31
64226: PUSH
64227: LD_INT 30
64229: PUSH
64230: LD_INT 30
64232: PUSH
64233: LD_INT 30
64235: PUSH
64236: LD_INT 30
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: ST_TO_ADDR
// un := CreateHuman ;
64245: LD_ADDR_VAR 0 3
64249: PUSH
64250: CALL_OW 44
64254: ST_TO_ADDR
// hc_noskilllimit := false ;
64255: LD_ADDR_OWVAR 76
64259: PUSH
64260: LD_INT 0
64262: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
64263: LD_VAR 0 3
64267: PPUSH
64268: LD_INT 1
64270: PPUSH
64271: CALL_OW 51
// ToLua ( playRanger() ) ;
64275: LD_STRING playRanger()
64277: PPUSH
64278: CALL_OW 559
// p := 0 ;
64282: LD_ADDR_VAR 0 2
64286: PUSH
64287: LD_INT 0
64289: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
64290: LD_INT 35
64292: PPUSH
64293: CALL_OW 67
// p := p + 1 ;
64297: LD_ADDR_VAR 0 2
64301: PUSH
64302: LD_VAR 0 2
64306: PUSH
64307: LD_INT 1
64309: PLUS
64310: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
64311: LD_VAR 0 3
64315: PPUSH
64316: CALL_OW 256
64320: PUSH
64321: LD_INT 1000
64323: LESS
64324: IFFALSE 64338
// SetLives ( un , 1000 ) ;
64326: LD_VAR 0 3
64330: PPUSH
64331: LD_INT 1000
64333: PPUSH
64334: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
64338: LD_VAR 0 3
64342: PPUSH
64343: LD_INT 81
64345: PUSH
64346: LD_OWVAR 2
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 91
64357: PUSH
64358: LD_VAR 0 3
64362: PUSH
64363: LD_INT 30
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: LIST
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PPUSH
64375: CALL_OW 69
64379: PPUSH
64380: LD_VAR 0 3
64384: PPUSH
64385: CALL_OW 74
64389: PPUSH
64390: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
64394: LD_VAR 0 2
64398: PUSH
64399: LD_INT 80
64401: GREATER
64402: PUSH
64403: LD_VAR 0 3
64407: PPUSH
64408: CALL_OW 301
64412: OR
64413: IFFALSE 64290
// if un then
64415: LD_VAR 0 3
64419: IFFALSE 64430
// RemoveUnit ( un ) ;
64421: LD_VAR 0 3
64425: PPUSH
64426: CALL_OW 64
// end ;
64430: PPOPN 3
64432: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
64433: LD_EXP 89
64437: IFFALSE 64553
64439: GO 64441
64441: DISABLE
64442: LD_INT 0
64444: PPUSH
64445: PPUSH
64446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
64447: LD_ADDR_VAR 0 2
64451: PUSH
64452: LD_INT 81
64454: PUSH
64455: LD_OWVAR 2
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 21
64466: PUSH
64467: LD_INT 1
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PPUSH
64478: CALL_OW 69
64482: ST_TO_ADDR
// ToLua ( playComputer() ) ;
64483: LD_STRING playComputer()
64485: PPUSH
64486: CALL_OW 559
// if not tmp then
64490: LD_VAR 0 2
64494: NOT
64495: IFFALSE 64499
// exit ;
64497: GO 64553
// for i in tmp do
64499: LD_ADDR_VAR 0 1
64503: PUSH
64504: LD_VAR 0 2
64508: PUSH
64509: FOR_IN
64510: IFFALSE 64551
// for j := 1 to 4 do
64512: LD_ADDR_VAR 0 3
64516: PUSH
64517: DOUBLE
64518: LD_INT 1
64520: DEC
64521: ST_TO_ADDR
64522: LD_INT 4
64524: PUSH
64525: FOR_TO
64526: IFFALSE 64547
// SetSkill ( i , j , 10 ) ;
64528: LD_VAR 0 1
64532: PPUSH
64533: LD_VAR 0 3
64537: PPUSH
64538: LD_INT 10
64540: PPUSH
64541: CALL_OW 237
64545: GO 64525
64547: POP
64548: POP
64549: GO 64509
64551: POP
64552: POP
// end ;
64553: PPOPN 3
64555: END
// every 0 0$1 trigger s30 do var i , tmp ;
64556: LD_EXP 90
64560: IFFALSE 64629
64562: GO 64564
64564: DISABLE
64565: LD_INT 0
64567: PPUSH
64568: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
64569: LD_ADDR_VAR 0 2
64573: PUSH
64574: LD_INT 22
64576: PUSH
64577: LD_OWVAR 2
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PPUSH
64586: CALL_OW 69
64590: ST_TO_ADDR
// if not tmp then
64591: LD_VAR 0 2
64595: NOT
64596: IFFALSE 64600
// exit ;
64598: GO 64629
// for i in tmp do
64600: LD_ADDR_VAR 0 1
64604: PUSH
64605: LD_VAR 0 2
64609: PUSH
64610: FOR_IN
64611: IFFALSE 64627
// SetLives ( i , 300 ) ;
64613: LD_VAR 0 1
64617: PPUSH
64618: LD_INT 300
64620: PPUSH
64621: CALL_OW 234
64625: GO 64610
64627: POP
64628: POP
// end ;
64629: PPOPN 2
64631: END
// every 0 0$1 trigger s60 do var i , tmp ;
64632: LD_EXP 91
64636: IFFALSE 64705
64638: GO 64640
64640: DISABLE
64641: LD_INT 0
64643: PPUSH
64644: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
64645: LD_ADDR_VAR 0 2
64649: PUSH
64650: LD_INT 22
64652: PUSH
64653: LD_OWVAR 2
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PPUSH
64662: CALL_OW 69
64666: ST_TO_ADDR
// if not tmp then
64667: LD_VAR 0 2
64671: NOT
64672: IFFALSE 64676
// exit ;
64674: GO 64705
// for i in tmp do
64676: LD_ADDR_VAR 0 1
64680: PUSH
64681: LD_VAR 0 2
64685: PUSH
64686: FOR_IN
64687: IFFALSE 64703
// SetLives ( i , 600 ) ;
64689: LD_VAR 0 1
64693: PPUSH
64694: LD_INT 600
64696: PPUSH
64697: CALL_OW 234
64701: GO 64686
64703: POP
64704: POP
// end ;
64705: PPOPN 2
64707: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64708: LD_INT 0
64710: PPUSH
// case cmd of 301 :
64711: LD_VAR 0 1
64715: PUSH
64716: LD_INT 301
64718: DOUBLE
64719: EQUAL
64720: IFTRUE 64724
64722: GO 64756
64724: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
64725: LD_VAR 0 6
64729: PPUSH
64730: LD_VAR 0 7
64734: PPUSH
64735: LD_VAR 0 8
64739: PPUSH
64740: LD_VAR 0 4
64744: PPUSH
64745: LD_VAR 0 5
64749: PPUSH
64750: CALL 65957 0 5
64754: GO 64877
64756: LD_INT 302
64758: DOUBLE
64759: EQUAL
64760: IFTRUE 64764
64762: GO 64801
64764: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
64765: LD_VAR 0 6
64769: PPUSH
64770: LD_VAR 0 7
64774: PPUSH
64775: LD_VAR 0 8
64779: PPUSH
64780: LD_VAR 0 9
64784: PPUSH
64785: LD_VAR 0 4
64789: PPUSH
64790: LD_VAR 0 5
64794: PPUSH
64795: CALL 66048 0 6
64799: GO 64877
64801: LD_INT 303
64803: DOUBLE
64804: EQUAL
64805: IFTRUE 64809
64807: GO 64846
64809: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
64810: LD_VAR 0 6
64814: PPUSH
64815: LD_VAR 0 7
64819: PPUSH
64820: LD_VAR 0 8
64824: PPUSH
64825: LD_VAR 0 9
64829: PPUSH
64830: LD_VAR 0 4
64834: PPUSH
64835: LD_VAR 0 5
64839: PPUSH
64840: CALL 64882 0 6
64844: GO 64877
64846: LD_INT 304
64848: DOUBLE
64849: EQUAL
64850: IFTRUE 64854
64852: GO 64876
64854: POP
// hHackTeleport ( unit , x , y ) ; end ;
64855: LD_VAR 0 2
64859: PPUSH
64860: LD_VAR 0 4
64864: PPUSH
64865: LD_VAR 0 5
64869: PPUSH
64870: CALL 66641 0 3
64874: GO 64877
64876: POP
// end ;
64877: LD_VAR 0 12
64881: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
64882: LD_INT 0
64884: PPUSH
64885: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
64886: LD_VAR 0 1
64890: PUSH
64891: LD_INT 1
64893: LESS
64894: PUSH
64895: LD_VAR 0 1
64899: PUSH
64900: LD_INT 3
64902: GREATER
64903: OR
64904: PUSH
64905: LD_VAR 0 5
64909: PPUSH
64910: LD_VAR 0 6
64914: PPUSH
64915: CALL_OW 428
64919: OR
64920: IFFALSE 64924
// exit ;
64922: GO 65644
// uc_side := your_side ;
64924: LD_ADDR_OWVAR 20
64928: PUSH
64929: LD_OWVAR 2
64933: ST_TO_ADDR
// uc_nation := nation ;
64934: LD_ADDR_OWVAR 21
64938: PUSH
64939: LD_VAR 0 1
64943: ST_TO_ADDR
// bc_level = 1 ;
64944: LD_ADDR_OWVAR 43
64948: PUSH
64949: LD_INT 1
64951: ST_TO_ADDR
// case btype of 1 :
64952: LD_VAR 0 2
64956: PUSH
64957: LD_INT 1
64959: DOUBLE
64960: EQUAL
64961: IFTRUE 64965
64963: GO 64976
64965: POP
// bc_type := b_depot ; 2 :
64966: LD_ADDR_OWVAR 42
64970: PUSH
64971: LD_INT 0
64973: ST_TO_ADDR
64974: GO 65588
64976: LD_INT 2
64978: DOUBLE
64979: EQUAL
64980: IFTRUE 64984
64982: GO 64995
64984: POP
// bc_type := b_warehouse ; 3 :
64985: LD_ADDR_OWVAR 42
64989: PUSH
64990: LD_INT 1
64992: ST_TO_ADDR
64993: GO 65588
64995: LD_INT 3
64997: DOUBLE
64998: EQUAL
64999: IFTRUE 65003
65001: GO 65014
65003: POP
// bc_type := b_lab ; 4 .. 9 :
65004: LD_ADDR_OWVAR 42
65008: PUSH
65009: LD_INT 6
65011: ST_TO_ADDR
65012: GO 65588
65014: LD_INT 4
65016: DOUBLE
65017: GREATEREQUAL
65018: IFFALSE 65026
65020: LD_INT 9
65022: DOUBLE
65023: LESSEQUAL
65024: IFTRUE 65028
65026: GO 65080
65028: POP
// begin bc_type := b_lab_half ;
65029: LD_ADDR_OWVAR 42
65033: PUSH
65034: LD_INT 7
65036: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
65037: LD_ADDR_OWVAR 44
65041: PUSH
65042: LD_INT 10
65044: PUSH
65045: LD_INT 11
65047: PUSH
65048: LD_INT 12
65050: PUSH
65051: LD_INT 15
65053: PUSH
65054: LD_INT 14
65056: PUSH
65057: LD_INT 13
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: PUSH
65068: LD_VAR 0 2
65072: PUSH
65073: LD_INT 3
65075: MINUS
65076: ARRAY
65077: ST_TO_ADDR
// end ; 10 .. 13 :
65078: GO 65588
65080: LD_INT 10
65082: DOUBLE
65083: GREATEREQUAL
65084: IFFALSE 65092
65086: LD_INT 13
65088: DOUBLE
65089: LESSEQUAL
65090: IFTRUE 65094
65092: GO 65171
65094: POP
// begin bc_type := b_lab_full ;
65095: LD_ADDR_OWVAR 42
65099: PUSH
65100: LD_INT 8
65102: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
65103: LD_ADDR_OWVAR 44
65107: PUSH
65108: LD_INT 10
65110: PUSH
65111: LD_INT 12
65113: PUSH
65114: LD_INT 14
65116: PUSH
65117: LD_INT 13
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: PUSH
65126: LD_VAR 0 2
65130: PUSH
65131: LD_INT 9
65133: MINUS
65134: ARRAY
65135: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
65136: LD_ADDR_OWVAR 45
65140: PUSH
65141: LD_INT 11
65143: PUSH
65144: LD_INT 15
65146: PUSH
65147: LD_INT 12
65149: PUSH
65150: LD_INT 15
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: PUSH
65159: LD_VAR 0 2
65163: PUSH
65164: LD_INT 9
65166: MINUS
65167: ARRAY
65168: ST_TO_ADDR
// end ; 14 :
65169: GO 65588
65171: LD_INT 14
65173: DOUBLE
65174: EQUAL
65175: IFTRUE 65179
65177: GO 65190
65179: POP
// bc_type := b_workshop ; 15 :
65180: LD_ADDR_OWVAR 42
65184: PUSH
65185: LD_INT 2
65187: ST_TO_ADDR
65188: GO 65588
65190: LD_INT 15
65192: DOUBLE
65193: EQUAL
65194: IFTRUE 65198
65196: GO 65209
65198: POP
// bc_type := b_factory ; 16 :
65199: LD_ADDR_OWVAR 42
65203: PUSH
65204: LD_INT 3
65206: ST_TO_ADDR
65207: GO 65588
65209: LD_INT 16
65211: DOUBLE
65212: EQUAL
65213: IFTRUE 65217
65215: GO 65228
65217: POP
// bc_type := b_ext_gun ; 17 :
65218: LD_ADDR_OWVAR 42
65222: PUSH
65223: LD_INT 17
65225: ST_TO_ADDR
65226: GO 65588
65228: LD_INT 17
65230: DOUBLE
65231: EQUAL
65232: IFTRUE 65236
65234: GO 65264
65236: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
65237: LD_ADDR_OWVAR 42
65241: PUSH
65242: LD_INT 19
65244: PUSH
65245: LD_INT 23
65247: PUSH
65248: LD_INT 19
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: LIST
65255: PUSH
65256: LD_VAR 0 1
65260: ARRAY
65261: ST_TO_ADDR
65262: GO 65588
65264: LD_INT 18
65266: DOUBLE
65267: EQUAL
65268: IFTRUE 65272
65270: GO 65283
65272: POP
// bc_type := b_ext_radar ; 19 :
65273: LD_ADDR_OWVAR 42
65277: PUSH
65278: LD_INT 20
65280: ST_TO_ADDR
65281: GO 65588
65283: LD_INT 19
65285: DOUBLE
65286: EQUAL
65287: IFTRUE 65291
65289: GO 65302
65291: POP
// bc_type := b_ext_radio ; 20 :
65292: LD_ADDR_OWVAR 42
65296: PUSH
65297: LD_INT 22
65299: ST_TO_ADDR
65300: GO 65588
65302: LD_INT 20
65304: DOUBLE
65305: EQUAL
65306: IFTRUE 65310
65308: GO 65321
65310: POP
// bc_type := b_ext_siberium ; 21 :
65311: LD_ADDR_OWVAR 42
65315: PUSH
65316: LD_INT 21
65318: ST_TO_ADDR
65319: GO 65588
65321: LD_INT 21
65323: DOUBLE
65324: EQUAL
65325: IFTRUE 65329
65327: GO 65340
65329: POP
// bc_type := b_ext_computer ; 22 :
65330: LD_ADDR_OWVAR 42
65334: PUSH
65335: LD_INT 24
65337: ST_TO_ADDR
65338: GO 65588
65340: LD_INT 22
65342: DOUBLE
65343: EQUAL
65344: IFTRUE 65348
65346: GO 65359
65348: POP
// bc_type := b_ext_track ; 23 :
65349: LD_ADDR_OWVAR 42
65353: PUSH
65354: LD_INT 16
65356: ST_TO_ADDR
65357: GO 65588
65359: LD_INT 23
65361: DOUBLE
65362: EQUAL
65363: IFTRUE 65367
65365: GO 65378
65367: POP
// bc_type := b_ext_laser ; 24 :
65368: LD_ADDR_OWVAR 42
65372: PUSH
65373: LD_INT 25
65375: ST_TO_ADDR
65376: GO 65588
65378: LD_INT 24
65380: DOUBLE
65381: EQUAL
65382: IFTRUE 65386
65384: GO 65397
65386: POP
// bc_type := b_control_tower ; 25 :
65387: LD_ADDR_OWVAR 42
65391: PUSH
65392: LD_INT 36
65394: ST_TO_ADDR
65395: GO 65588
65397: LD_INT 25
65399: DOUBLE
65400: EQUAL
65401: IFTRUE 65405
65403: GO 65416
65405: POP
// bc_type := b_breastwork ; 26 :
65406: LD_ADDR_OWVAR 42
65410: PUSH
65411: LD_INT 31
65413: ST_TO_ADDR
65414: GO 65588
65416: LD_INT 26
65418: DOUBLE
65419: EQUAL
65420: IFTRUE 65424
65422: GO 65435
65424: POP
// bc_type := b_bunker ; 27 :
65425: LD_ADDR_OWVAR 42
65429: PUSH
65430: LD_INT 32
65432: ST_TO_ADDR
65433: GO 65588
65435: LD_INT 27
65437: DOUBLE
65438: EQUAL
65439: IFTRUE 65443
65441: GO 65454
65443: POP
// bc_type := b_turret ; 28 :
65444: LD_ADDR_OWVAR 42
65448: PUSH
65449: LD_INT 33
65451: ST_TO_ADDR
65452: GO 65588
65454: LD_INT 28
65456: DOUBLE
65457: EQUAL
65458: IFTRUE 65462
65460: GO 65473
65462: POP
// bc_type := b_armoury ; 29 :
65463: LD_ADDR_OWVAR 42
65467: PUSH
65468: LD_INT 4
65470: ST_TO_ADDR
65471: GO 65588
65473: LD_INT 29
65475: DOUBLE
65476: EQUAL
65477: IFTRUE 65481
65479: GO 65492
65481: POP
// bc_type := b_barracks ; 30 :
65482: LD_ADDR_OWVAR 42
65486: PUSH
65487: LD_INT 5
65489: ST_TO_ADDR
65490: GO 65588
65492: LD_INT 30
65494: DOUBLE
65495: EQUAL
65496: IFTRUE 65500
65498: GO 65511
65500: POP
// bc_type := b_solar_power ; 31 :
65501: LD_ADDR_OWVAR 42
65505: PUSH
65506: LD_INT 27
65508: ST_TO_ADDR
65509: GO 65588
65511: LD_INT 31
65513: DOUBLE
65514: EQUAL
65515: IFTRUE 65519
65517: GO 65530
65519: POP
// bc_type := b_oil_power ; 32 :
65520: LD_ADDR_OWVAR 42
65524: PUSH
65525: LD_INT 26
65527: ST_TO_ADDR
65528: GO 65588
65530: LD_INT 32
65532: DOUBLE
65533: EQUAL
65534: IFTRUE 65538
65536: GO 65549
65538: POP
// bc_type := b_siberite_power ; 33 :
65539: LD_ADDR_OWVAR 42
65543: PUSH
65544: LD_INT 28
65546: ST_TO_ADDR
65547: GO 65588
65549: LD_INT 33
65551: DOUBLE
65552: EQUAL
65553: IFTRUE 65557
65555: GO 65568
65557: POP
// bc_type := b_oil_mine ; 34 :
65558: LD_ADDR_OWVAR 42
65562: PUSH
65563: LD_INT 29
65565: ST_TO_ADDR
65566: GO 65588
65568: LD_INT 34
65570: DOUBLE
65571: EQUAL
65572: IFTRUE 65576
65574: GO 65587
65576: POP
// bc_type := b_siberite_mine ; end ;
65577: LD_ADDR_OWVAR 42
65581: PUSH
65582: LD_INT 30
65584: ST_TO_ADDR
65585: GO 65588
65587: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
65588: LD_ADDR_VAR 0 8
65592: PUSH
65593: LD_VAR 0 5
65597: PPUSH
65598: LD_VAR 0 6
65602: PPUSH
65603: LD_VAR 0 3
65607: PPUSH
65608: CALL_OW 47
65612: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
65613: LD_OWVAR 42
65617: PUSH
65618: LD_INT 32
65620: PUSH
65621: LD_INT 33
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: IN
65628: IFFALSE 65644
// PlaceWeaponTurret ( b , weapon ) ;
65630: LD_VAR 0 8
65634: PPUSH
65635: LD_VAR 0 4
65639: PPUSH
65640: CALL_OW 431
// end ;
65644: LD_VAR 0 7
65648: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
65649: LD_INT 0
65651: PPUSH
65652: PPUSH
65653: PPUSH
65654: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
65655: LD_ADDR_VAR 0 4
65659: PUSH
65660: LD_INT 22
65662: PUSH
65663: LD_OWVAR 2
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 2
65674: PUSH
65675: LD_INT 30
65677: PUSH
65678: LD_INT 0
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: PUSH
65685: LD_INT 30
65687: PUSH
65688: LD_INT 1
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: LIST
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PPUSH
65704: CALL_OW 69
65708: ST_TO_ADDR
// if not tmp then
65709: LD_VAR 0 4
65713: NOT
65714: IFFALSE 65718
// exit ;
65716: GO 65777
// for i in tmp do
65718: LD_ADDR_VAR 0 2
65722: PUSH
65723: LD_VAR 0 4
65727: PUSH
65728: FOR_IN
65729: IFFALSE 65775
// for j = 1 to 3 do
65731: LD_ADDR_VAR 0 3
65735: PUSH
65736: DOUBLE
65737: LD_INT 1
65739: DEC
65740: ST_TO_ADDR
65741: LD_INT 3
65743: PUSH
65744: FOR_TO
65745: IFFALSE 65771
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
65747: LD_VAR 0 2
65751: PPUSH
65752: CALL_OW 274
65756: PPUSH
65757: LD_VAR 0 3
65761: PPUSH
65762: LD_INT 99999
65764: PPUSH
65765: CALL_OW 277
65769: GO 65744
65771: POP
65772: POP
65773: GO 65728
65775: POP
65776: POP
// end ;
65777: LD_VAR 0 1
65781: RET
// export function hHackSetLevel10 ; var i , j ; begin
65782: LD_INT 0
65784: PPUSH
65785: PPUSH
65786: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
65787: LD_ADDR_VAR 0 2
65791: PUSH
65792: LD_INT 21
65794: PUSH
65795: LD_INT 1
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PPUSH
65802: CALL_OW 69
65806: PUSH
65807: FOR_IN
65808: IFFALSE 65860
// if IsSelected ( i ) then
65810: LD_VAR 0 2
65814: PPUSH
65815: CALL_OW 306
65819: IFFALSE 65858
// begin for j := 1 to 4 do
65821: LD_ADDR_VAR 0 3
65825: PUSH
65826: DOUBLE
65827: LD_INT 1
65829: DEC
65830: ST_TO_ADDR
65831: LD_INT 4
65833: PUSH
65834: FOR_TO
65835: IFFALSE 65856
// SetSkill ( i , j , 10 ) ;
65837: LD_VAR 0 2
65841: PPUSH
65842: LD_VAR 0 3
65846: PPUSH
65847: LD_INT 10
65849: PPUSH
65850: CALL_OW 237
65854: GO 65834
65856: POP
65857: POP
// end ;
65858: GO 65807
65860: POP
65861: POP
// end ;
65862: LD_VAR 0 1
65866: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
65867: LD_INT 0
65869: PPUSH
65870: PPUSH
65871: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
65872: LD_ADDR_VAR 0 2
65876: PUSH
65877: LD_INT 22
65879: PUSH
65880: LD_OWVAR 2
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 21
65891: PUSH
65892: LD_INT 1
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PPUSH
65903: CALL_OW 69
65907: PUSH
65908: FOR_IN
65909: IFFALSE 65950
// begin for j := 1 to 4 do
65911: LD_ADDR_VAR 0 3
65915: PUSH
65916: DOUBLE
65917: LD_INT 1
65919: DEC
65920: ST_TO_ADDR
65921: LD_INT 4
65923: PUSH
65924: FOR_TO
65925: IFFALSE 65946
// SetSkill ( i , j , 10 ) ;
65927: LD_VAR 0 2
65931: PPUSH
65932: LD_VAR 0 3
65936: PPUSH
65937: LD_INT 10
65939: PPUSH
65940: CALL_OW 237
65944: GO 65924
65946: POP
65947: POP
// end ;
65948: GO 65908
65950: POP
65951: POP
// end ;
65952: LD_VAR 0 1
65956: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
65957: LD_INT 0
65959: PPUSH
// uc_side := your_side ;
65960: LD_ADDR_OWVAR 20
65964: PUSH
65965: LD_OWVAR 2
65969: ST_TO_ADDR
// uc_nation := nation ;
65970: LD_ADDR_OWVAR 21
65974: PUSH
65975: LD_VAR 0 1
65979: ST_TO_ADDR
// InitHc ;
65980: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
65984: LD_INT 0
65986: PPUSH
65987: LD_VAR 0 2
65991: PPUSH
65992: LD_VAR 0 3
65996: PPUSH
65997: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
66001: LD_VAR 0 4
66005: PPUSH
66006: LD_VAR 0 5
66010: PPUSH
66011: CALL_OW 428
66015: PUSH
66016: LD_INT 0
66018: EQUAL
66019: IFFALSE 66043
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
66021: CALL_OW 44
66025: PPUSH
66026: LD_VAR 0 4
66030: PPUSH
66031: LD_VAR 0 5
66035: PPUSH
66036: LD_INT 1
66038: PPUSH
66039: CALL_OW 48
// end ;
66043: LD_VAR 0 6
66047: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
66048: LD_INT 0
66050: PPUSH
66051: PPUSH
// uc_side := your_side ;
66052: LD_ADDR_OWVAR 20
66056: PUSH
66057: LD_OWVAR 2
66061: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
66062: LD_VAR 0 1
66066: PUSH
66067: LD_INT 1
66069: PUSH
66070: LD_INT 2
66072: PUSH
66073: LD_INT 3
66075: PUSH
66076: LD_INT 4
66078: PUSH
66079: LD_INT 5
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: IN
66089: IFFALSE 66101
// uc_nation := nation_american else
66091: LD_ADDR_OWVAR 21
66095: PUSH
66096: LD_INT 1
66098: ST_TO_ADDR
66099: GO 66144
// if chassis in [ 11 , 12 , 13 , 14 ] then
66101: LD_VAR 0 1
66105: PUSH
66106: LD_INT 11
66108: PUSH
66109: LD_INT 12
66111: PUSH
66112: LD_INT 13
66114: PUSH
66115: LD_INT 14
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: IN
66124: IFFALSE 66136
// uc_nation := nation_arabian else
66126: LD_ADDR_OWVAR 21
66130: PUSH
66131: LD_INT 2
66133: ST_TO_ADDR
66134: GO 66144
// uc_nation := nation_russian ;
66136: LD_ADDR_OWVAR 21
66140: PUSH
66141: LD_INT 3
66143: ST_TO_ADDR
// vc_chassis := chassis ;
66144: LD_ADDR_OWVAR 37
66148: PUSH
66149: LD_VAR 0 1
66153: ST_TO_ADDR
// vc_engine := engine ;
66154: LD_ADDR_OWVAR 39
66158: PUSH
66159: LD_VAR 0 2
66163: ST_TO_ADDR
// vc_control := control ;
66164: LD_ADDR_OWVAR 38
66168: PUSH
66169: LD_VAR 0 3
66173: ST_TO_ADDR
// vc_weapon := weapon ;
66174: LD_ADDR_OWVAR 40
66178: PUSH
66179: LD_VAR 0 4
66183: ST_TO_ADDR
// un := CreateVehicle ;
66184: LD_ADDR_VAR 0 8
66188: PUSH
66189: CALL_OW 45
66193: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
66194: LD_VAR 0 8
66198: PPUSH
66199: LD_INT 0
66201: PPUSH
66202: LD_INT 5
66204: PPUSH
66205: CALL_OW 12
66209: PPUSH
66210: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
66214: LD_VAR 0 8
66218: PPUSH
66219: LD_VAR 0 5
66223: PPUSH
66224: LD_VAR 0 6
66228: PPUSH
66229: LD_INT 1
66231: PPUSH
66232: CALL_OW 48
// end ;
66236: LD_VAR 0 7
66240: RET
// export hInvincible ; every 1 do
66241: GO 66243
66243: DISABLE
// hInvincible := [ ] ;
66244: LD_ADDR_EXP 92
66248: PUSH
66249: EMPTY
66250: ST_TO_ADDR
66251: END
// every 10 do var i ;
66252: GO 66254
66254: DISABLE
66255: LD_INT 0
66257: PPUSH
// begin enable ;
66258: ENABLE
// if not hInvincible then
66259: LD_EXP 92
66263: NOT
66264: IFFALSE 66268
// exit ;
66266: GO 66312
// for i in hInvincible do
66268: LD_ADDR_VAR 0 1
66272: PUSH
66273: LD_EXP 92
66277: PUSH
66278: FOR_IN
66279: IFFALSE 66310
// if GetLives ( i ) < 1000 then
66281: LD_VAR 0 1
66285: PPUSH
66286: CALL_OW 256
66290: PUSH
66291: LD_INT 1000
66293: LESS
66294: IFFALSE 66308
// SetLives ( i , 1000 ) ;
66296: LD_VAR 0 1
66300: PPUSH
66301: LD_INT 1000
66303: PPUSH
66304: CALL_OW 234
66308: GO 66278
66310: POP
66311: POP
// end ;
66312: PPOPN 1
66314: END
// export function hHackInvincible ; var i ; begin
66315: LD_INT 0
66317: PPUSH
66318: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
66319: LD_ADDR_VAR 0 2
66323: PUSH
66324: LD_INT 2
66326: PUSH
66327: LD_INT 21
66329: PUSH
66330: LD_INT 1
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 21
66339: PUSH
66340: LD_INT 2
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: LIST
66351: PPUSH
66352: CALL_OW 69
66356: PUSH
66357: FOR_IN
66358: IFFALSE 66419
// if IsSelected ( i ) then
66360: LD_VAR 0 2
66364: PPUSH
66365: CALL_OW 306
66369: IFFALSE 66417
// begin if i in hInvincible then
66371: LD_VAR 0 2
66375: PUSH
66376: LD_EXP 92
66380: IN
66381: IFFALSE 66401
// hInvincible := hInvincible diff i else
66383: LD_ADDR_EXP 92
66387: PUSH
66388: LD_EXP 92
66392: PUSH
66393: LD_VAR 0 2
66397: DIFF
66398: ST_TO_ADDR
66399: GO 66417
// hInvincible := hInvincible union i ;
66401: LD_ADDR_EXP 92
66405: PUSH
66406: LD_EXP 92
66410: PUSH
66411: LD_VAR 0 2
66415: UNION
66416: ST_TO_ADDR
// end ;
66417: GO 66357
66419: POP
66420: POP
// end ;
66421: LD_VAR 0 1
66425: RET
// export function hHackInvisible ; var i , j ; begin
66426: LD_INT 0
66428: PPUSH
66429: PPUSH
66430: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
66431: LD_ADDR_VAR 0 2
66435: PUSH
66436: LD_INT 21
66438: PUSH
66439: LD_INT 1
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PPUSH
66446: CALL_OW 69
66450: PUSH
66451: FOR_IN
66452: IFFALSE 66476
// if IsSelected ( i ) then
66454: LD_VAR 0 2
66458: PPUSH
66459: CALL_OW 306
66463: IFFALSE 66474
// ComForceInvisible ( i ) ;
66465: LD_VAR 0 2
66469: PPUSH
66470: CALL_OW 496
66474: GO 66451
66476: POP
66477: POP
// end ;
66478: LD_VAR 0 1
66482: RET
// export function hHackChangeYourSide ; begin
66483: LD_INT 0
66485: PPUSH
// if your_side = 8 then
66486: LD_OWVAR 2
66490: PUSH
66491: LD_INT 8
66493: EQUAL
66494: IFFALSE 66506
// your_side := 0 else
66496: LD_ADDR_OWVAR 2
66500: PUSH
66501: LD_INT 0
66503: ST_TO_ADDR
66504: GO 66520
// your_side := your_side + 1 ;
66506: LD_ADDR_OWVAR 2
66510: PUSH
66511: LD_OWVAR 2
66515: PUSH
66516: LD_INT 1
66518: PLUS
66519: ST_TO_ADDR
// end ;
66520: LD_VAR 0 1
66524: RET
// export function hHackChangeUnitSide ; var i , j ; begin
66525: LD_INT 0
66527: PPUSH
66528: PPUSH
66529: PPUSH
// for i in all_units do
66530: LD_ADDR_VAR 0 2
66534: PUSH
66535: LD_OWVAR 3
66539: PUSH
66540: FOR_IN
66541: IFFALSE 66619
// if IsSelected ( i ) then
66543: LD_VAR 0 2
66547: PPUSH
66548: CALL_OW 306
66552: IFFALSE 66617
// begin j := GetSide ( i ) ;
66554: LD_ADDR_VAR 0 3
66558: PUSH
66559: LD_VAR 0 2
66563: PPUSH
66564: CALL_OW 255
66568: ST_TO_ADDR
// if j = 8 then
66569: LD_VAR 0 3
66573: PUSH
66574: LD_INT 8
66576: EQUAL
66577: IFFALSE 66589
// j := 0 else
66579: LD_ADDR_VAR 0 3
66583: PUSH
66584: LD_INT 0
66586: ST_TO_ADDR
66587: GO 66603
// j := j + 1 ;
66589: LD_ADDR_VAR 0 3
66593: PUSH
66594: LD_VAR 0 3
66598: PUSH
66599: LD_INT 1
66601: PLUS
66602: ST_TO_ADDR
// SetSide ( i , j ) ;
66603: LD_VAR 0 2
66607: PPUSH
66608: LD_VAR 0 3
66612: PPUSH
66613: CALL_OW 235
// end ;
66617: GO 66540
66619: POP
66620: POP
// end ;
66621: LD_VAR 0 1
66625: RET
// export function hHackFog ; begin
66626: LD_INT 0
66628: PPUSH
// FogOff ( true ) ;
66629: LD_INT 1
66631: PPUSH
66632: CALL_OW 344
// end ;
66636: LD_VAR 0 1
66640: RET
// export function hHackTeleport ( unit , x , y ) ; begin
66641: LD_INT 0
66643: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
66644: LD_VAR 0 1
66648: PPUSH
66649: LD_VAR 0 2
66653: PPUSH
66654: LD_VAR 0 3
66658: PPUSH
66659: LD_INT 1
66661: PPUSH
66662: LD_INT 1
66664: PPUSH
66665: CALL_OW 483
// CenterOnXY ( x , y ) ;
66669: LD_VAR 0 2
66673: PPUSH
66674: LD_VAR 0 3
66678: PPUSH
66679: CALL_OW 84
// end ;
66683: LD_VAR 0 4
66687: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
66688: LD_INT 0
66690: PPUSH
66691: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
66692: LD_VAR 0 1
66696: NOT
66697: PUSH
66698: LD_VAR 0 2
66702: PPUSH
66703: LD_VAR 0 3
66707: PPUSH
66708: CALL_OW 488
66712: NOT
66713: OR
66714: PUSH
66715: LD_VAR 0 1
66719: PPUSH
66720: CALL_OW 266
66724: PUSH
66725: LD_INT 3
66727: NONEQUAL
66728: PUSH
66729: LD_VAR 0 1
66733: PPUSH
66734: CALL_OW 247
66738: PUSH
66739: LD_INT 1
66741: EQUAL
66742: NOT
66743: AND
66744: OR
66745: IFFALSE 66749
// exit ;
66747: GO 66898
// if GetType ( factory ) = unit_human then
66749: LD_VAR 0 1
66753: PPUSH
66754: CALL_OW 247
66758: PUSH
66759: LD_INT 1
66761: EQUAL
66762: IFFALSE 66779
// factory := IsInUnit ( factory ) ;
66764: LD_ADDR_VAR 0 1
66768: PUSH
66769: LD_VAR 0 1
66773: PPUSH
66774: CALL_OW 310
66778: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
66779: LD_VAR 0 1
66783: PPUSH
66784: CALL_OW 266
66788: PUSH
66789: LD_INT 3
66791: NONEQUAL
66792: IFFALSE 66796
// exit ;
66794: GO 66898
// if HexInfo ( x , y ) = factory then
66796: LD_VAR 0 2
66800: PPUSH
66801: LD_VAR 0 3
66805: PPUSH
66806: CALL_OW 428
66810: PUSH
66811: LD_VAR 0 1
66815: EQUAL
66816: IFFALSE 66843
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
66818: LD_ADDR_EXP 93
66822: PUSH
66823: LD_EXP 93
66827: PPUSH
66828: LD_VAR 0 1
66832: PPUSH
66833: LD_INT 0
66835: PPUSH
66836: CALL_OW 1
66840: ST_TO_ADDR
66841: GO 66894
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
66843: LD_ADDR_EXP 93
66847: PUSH
66848: LD_EXP 93
66852: PPUSH
66853: LD_VAR 0 1
66857: PPUSH
66858: LD_VAR 0 1
66862: PPUSH
66863: CALL_OW 255
66867: PUSH
66868: LD_VAR 0 1
66872: PUSH
66873: LD_VAR 0 2
66877: PUSH
66878: LD_VAR 0 3
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: PPUSH
66889: CALL_OW 1
66893: ST_TO_ADDR
// UpdateFactoryWaypoints ;
66894: CALL 66903 0 0
// end ;
66898: LD_VAR 0 4
66902: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
66903: LD_INT 0
66905: PPUSH
66906: PPUSH
66907: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
66908: LD_STRING resetFactoryWaypoint();
66910: PPUSH
66911: CALL_OW 559
// if factoryWaypoints then
66915: LD_EXP 93
66919: IFFALSE 67045
// begin list := PrepareArray ( factoryWaypoints ) ;
66921: LD_ADDR_VAR 0 3
66925: PUSH
66926: LD_EXP 93
66930: PPUSH
66931: CALL 51902 0 1
66935: ST_TO_ADDR
// for i := 1 to list do
66936: LD_ADDR_VAR 0 2
66940: PUSH
66941: DOUBLE
66942: LD_INT 1
66944: DEC
66945: ST_TO_ADDR
66946: LD_VAR 0 3
66950: PUSH
66951: FOR_TO
66952: IFFALSE 67043
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
66954: LD_STRING setFactoryWaypointXY(
66956: PUSH
66957: LD_VAR 0 3
66961: PUSH
66962: LD_VAR 0 2
66966: ARRAY
66967: PUSH
66968: LD_INT 1
66970: ARRAY
66971: STR
66972: PUSH
66973: LD_STRING ,
66975: STR
66976: PUSH
66977: LD_VAR 0 3
66981: PUSH
66982: LD_VAR 0 2
66986: ARRAY
66987: PUSH
66988: LD_INT 2
66990: ARRAY
66991: STR
66992: PUSH
66993: LD_STRING ,
66995: STR
66996: PUSH
66997: LD_VAR 0 3
67001: PUSH
67002: LD_VAR 0 2
67006: ARRAY
67007: PUSH
67008: LD_INT 3
67010: ARRAY
67011: STR
67012: PUSH
67013: LD_STRING ,
67015: STR
67016: PUSH
67017: LD_VAR 0 3
67021: PUSH
67022: LD_VAR 0 2
67026: ARRAY
67027: PUSH
67028: LD_INT 4
67030: ARRAY
67031: STR
67032: PUSH
67033: LD_STRING )
67035: STR
67036: PPUSH
67037: CALL_OW 559
67041: GO 66951
67043: POP
67044: POP
// end ; end ;
67045: LD_VAR 0 1
67049: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
67050: LD_INT 0
67052: PPUSH
// if HexInfo ( x , y ) = warehouse then
67053: LD_VAR 0 2
67057: PPUSH
67058: LD_VAR 0 3
67062: PPUSH
67063: CALL_OW 428
67067: PUSH
67068: LD_VAR 0 1
67072: EQUAL
67073: IFFALSE 67100
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
67075: LD_ADDR_EXP 94
67079: PUSH
67080: LD_EXP 94
67084: PPUSH
67085: LD_VAR 0 1
67089: PPUSH
67090: LD_INT 0
67092: PPUSH
67093: CALL_OW 1
67097: ST_TO_ADDR
67098: GO 67151
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
67100: LD_ADDR_EXP 94
67104: PUSH
67105: LD_EXP 94
67109: PPUSH
67110: LD_VAR 0 1
67114: PPUSH
67115: LD_VAR 0 1
67119: PPUSH
67120: CALL_OW 255
67124: PUSH
67125: LD_VAR 0 1
67129: PUSH
67130: LD_VAR 0 2
67134: PUSH
67135: LD_VAR 0 3
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: LIST
67144: LIST
67145: PPUSH
67146: CALL_OW 1
67150: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
67151: CALL 67160 0 0
// end ;
67155: LD_VAR 0 4
67159: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
67160: LD_INT 0
67162: PPUSH
67163: PPUSH
67164: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
67165: LD_STRING resetWarehouseGatheringPoints();
67167: PPUSH
67168: CALL_OW 559
// if warehouseGatheringPoints then
67172: LD_EXP 94
67176: IFFALSE 67302
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
67178: LD_ADDR_VAR 0 3
67182: PUSH
67183: LD_EXP 94
67187: PPUSH
67188: CALL 51902 0 1
67192: ST_TO_ADDR
// for i := 1 to list do
67193: LD_ADDR_VAR 0 2
67197: PUSH
67198: DOUBLE
67199: LD_INT 1
67201: DEC
67202: ST_TO_ADDR
67203: LD_VAR 0 3
67207: PUSH
67208: FOR_TO
67209: IFFALSE 67300
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
67211: LD_STRING setWarehouseGatheringPointXY(
67213: PUSH
67214: LD_VAR 0 3
67218: PUSH
67219: LD_VAR 0 2
67223: ARRAY
67224: PUSH
67225: LD_INT 1
67227: ARRAY
67228: STR
67229: PUSH
67230: LD_STRING ,
67232: STR
67233: PUSH
67234: LD_VAR 0 3
67238: PUSH
67239: LD_VAR 0 2
67243: ARRAY
67244: PUSH
67245: LD_INT 2
67247: ARRAY
67248: STR
67249: PUSH
67250: LD_STRING ,
67252: STR
67253: PUSH
67254: LD_VAR 0 3
67258: PUSH
67259: LD_VAR 0 2
67263: ARRAY
67264: PUSH
67265: LD_INT 3
67267: ARRAY
67268: STR
67269: PUSH
67270: LD_STRING ,
67272: STR
67273: PUSH
67274: LD_VAR 0 3
67278: PUSH
67279: LD_VAR 0 2
67283: ARRAY
67284: PUSH
67285: LD_INT 4
67287: ARRAY
67288: STR
67289: PUSH
67290: LD_STRING )
67292: STR
67293: PPUSH
67294: CALL_OW 559
67298: GO 67208
67300: POP
67301: POP
// end ; end ;
67302: LD_VAR 0 1
67306: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
67307: LD_EXP 94
67311: IFFALSE 67996
67313: GO 67315
67315: DISABLE
67316: LD_INT 0
67318: PPUSH
67319: PPUSH
67320: PPUSH
67321: PPUSH
67322: PPUSH
67323: PPUSH
67324: PPUSH
67325: PPUSH
67326: PPUSH
// begin enable ;
67327: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
67328: LD_ADDR_VAR 0 3
67332: PUSH
67333: LD_EXP 94
67337: PPUSH
67338: CALL 51902 0 1
67342: ST_TO_ADDR
// if not list then
67343: LD_VAR 0 3
67347: NOT
67348: IFFALSE 67352
// exit ;
67350: GO 67996
// for i := 1 to list do
67352: LD_ADDR_VAR 0 1
67356: PUSH
67357: DOUBLE
67358: LD_INT 1
67360: DEC
67361: ST_TO_ADDR
67362: LD_VAR 0 3
67366: PUSH
67367: FOR_TO
67368: IFFALSE 67994
// begin depot := list [ i ] [ 2 ] ;
67370: LD_ADDR_VAR 0 8
67374: PUSH
67375: LD_VAR 0 3
67379: PUSH
67380: LD_VAR 0 1
67384: ARRAY
67385: PUSH
67386: LD_INT 2
67388: ARRAY
67389: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
67390: LD_ADDR_VAR 0 5
67394: PUSH
67395: LD_VAR 0 3
67399: PUSH
67400: LD_VAR 0 1
67404: ARRAY
67405: PUSH
67406: LD_INT 1
67408: ARRAY
67409: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
67410: LD_VAR 0 8
67414: PPUSH
67415: CALL_OW 301
67419: PUSH
67420: LD_VAR 0 5
67424: PUSH
67425: LD_VAR 0 8
67429: PPUSH
67430: CALL_OW 255
67434: NONEQUAL
67435: OR
67436: IFFALSE 67465
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
67438: LD_ADDR_EXP 94
67442: PUSH
67443: LD_EXP 94
67447: PPUSH
67448: LD_VAR 0 8
67452: PPUSH
67453: LD_INT 0
67455: PPUSH
67456: CALL_OW 1
67460: ST_TO_ADDR
// exit ;
67461: POP
67462: POP
67463: GO 67996
// end ; x := list [ i ] [ 3 ] ;
67465: LD_ADDR_VAR 0 6
67469: PUSH
67470: LD_VAR 0 3
67474: PUSH
67475: LD_VAR 0 1
67479: ARRAY
67480: PUSH
67481: LD_INT 3
67483: ARRAY
67484: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
67485: LD_ADDR_VAR 0 7
67489: PUSH
67490: LD_VAR 0 3
67494: PUSH
67495: LD_VAR 0 1
67499: ARRAY
67500: PUSH
67501: LD_INT 4
67503: ARRAY
67504: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
67505: LD_ADDR_VAR 0 9
67509: PUSH
67510: LD_VAR 0 6
67514: PPUSH
67515: LD_VAR 0 7
67519: PPUSH
67520: LD_INT 16
67522: PPUSH
67523: CALL 50490 0 3
67527: ST_TO_ADDR
// if not cratesNearbyPoint then
67528: LD_VAR 0 9
67532: NOT
67533: IFFALSE 67539
// exit ;
67535: POP
67536: POP
67537: GO 67996
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
67539: LD_ADDR_VAR 0 4
67543: PUSH
67544: LD_INT 22
67546: PUSH
67547: LD_VAR 0 5
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: PUSH
67556: LD_INT 3
67558: PUSH
67559: LD_INT 60
67561: PUSH
67562: EMPTY
67563: LIST
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 91
67571: PUSH
67572: LD_VAR 0 8
67576: PUSH
67577: LD_INT 6
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: LIST
67584: PUSH
67585: LD_INT 2
67587: PUSH
67588: LD_INT 25
67590: PUSH
67591: LD_INT 2
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: PUSH
67598: LD_INT 25
67600: PUSH
67601: LD_INT 16
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: LIST
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: LIST
67617: LIST
67618: PPUSH
67619: CALL_OW 69
67623: PUSH
67624: LD_VAR 0 8
67628: PPUSH
67629: CALL_OW 313
67633: PPUSH
67634: LD_INT 3
67636: PUSH
67637: LD_INT 60
67639: PUSH
67640: EMPTY
67641: LIST
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: LD_INT 2
67649: PUSH
67650: LD_INT 25
67652: PUSH
67653: LD_INT 2
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: LD_INT 25
67662: PUSH
67663: LD_INT 16
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: LIST
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PPUSH
67679: CALL_OW 72
67683: UNION
67684: ST_TO_ADDR
// if tmp then
67685: LD_VAR 0 4
67689: IFFALSE 67769
// begin tmp := ShrinkArray ( tmp , 3 ) ;
67691: LD_ADDR_VAR 0 4
67695: PUSH
67696: LD_VAR 0 4
67700: PPUSH
67701: LD_INT 3
67703: PPUSH
67704: CALL 48459 0 2
67708: ST_TO_ADDR
// for j in tmp do
67709: LD_ADDR_VAR 0 2
67713: PUSH
67714: LD_VAR 0 4
67718: PUSH
67719: FOR_IN
67720: IFFALSE 67763
// begin if IsInUnit ( j ) then
67722: LD_VAR 0 2
67726: PPUSH
67727: CALL_OW 310
67731: IFFALSE 67742
// ComExit ( j ) ;
67733: LD_VAR 0 2
67737: PPUSH
67738: CALL 48542 0 1
// AddComCollect ( j , x , y ) ;
67742: LD_VAR 0 2
67746: PPUSH
67747: LD_VAR 0 6
67751: PPUSH
67752: LD_VAR 0 7
67756: PPUSH
67757: CALL_OW 177
// end ;
67761: GO 67719
67763: POP
67764: POP
// exit ;
67765: POP
67766: POP
67767: GO 67996
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
67769: LD_ADDR_VAR 0 4
67773: PUSH
67774: LD_INT 22
67776: PUSH
67777: LD_VAR 0 5
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: PUSH
67786: LD_INT 91
67788: PUSH
67789: LD_VAR 0 8
67793: PUSH
67794: LD_INT 8
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: LIST
67801: PUSH
67802: LD_INT 2
67804: PUSH
67805: LD_INT 34
67807: PUSH
67808: LD_INT 12
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: LD_INT 34
67817: PUSH
67818: LD_INT 51
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 34
67827: PUSH
67828: LD_INT 32
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 34
67837: PUSH
67838: LD_INT 89
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: LIST
67856: PPUSH
67857: CALL_OW 69
67861: ST_TO_ADDR
// if tmp then
67862: LD_VAR 0 4
67866: IFFALSE 67992
// begin for j in tmp do
67868: LD_ADDR_VAR 0 2
67872: PUSH
67873: LD_VAR 0 4
67877: PUSH
67878: FOR_IN
67879: IFFALSE 67990
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
67881: LD_VAR 0 2
67885: PPUSH
67886: CALL_OW 262
67890: PUSH
67891: LD_INT 3
67893: EQUAL
67894: PUSH
67895: LD_VAR 0 2
67899: PPUSH
67900: CALL_OW 261
67904: PUSH
67905: LD_INT 20
67907: GREATER
67908: OR
67909: PUSH
67910: LD_VAR 0 2
67914: PPUSH
67915: CALL_OW 314
67919: NOT
67920: AND
67921: PUSH
67922: LD_VAR 0 2
67926: PPUSH
67927: CALL_OW 263
67931: PUSH
67932: LD_INT 1
67934: NONEQUAL
67935: PUSH
67936: LD_VAR 0 2
67940: PPUSH
67941: CALL_OW 311
67945: OR
67946: AND
67947: IFFALSE 67988
// begin ComCollect ( j , x , y ) ;
67949: LD_VAR 0 2
67953: PPUSH
67954: LD_VAR 0 6
67958: PPUSH
67959: LD_VAR 0 7
67963: PPUSH
67964: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
67968: LD_VAR 0 2
67972: PPUSH
67973: LD_VAR 0 8
67977: PPUSH
67978: CALL_OW 172
// exit ;
67982: POP
67983: POP
67984: POP
67985: POP
67986: GO 67996
// end ;
67988: GO 67878
67990: POP
67991: POP
// end ; end ;
67992: GO 67367
67994: POP
67995: POP
// end ; end_of_file
67996: PPOPN 9
67998: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67999: LD_VAR 0 1
68003: PUSH
68004: LD_INT 200
68006: DOUBLE
68007: GREATEREQUAL
68008: IFFALSE 68016
68010: LD_INT 299
68012: DOUBLE
68013: LESSEQUAL
68014: IFTRUE 68018
68016: GO 68050
68018: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68019: LD_VAR 0 1
68023: PPUSH
68024: LD_VAR 0 2
68028: PPUSH
68029: LD_VAR 0 3
68033: PPUSH
68034: LD_VAR 0 4
68038: PPUSH
68039: LD_VAR 0 5
68043: PPUSH
68044: CALL 68538 0 5
68048: GO 68127
68050: LD_INT 300
68052: DOUBLE
68053: GREATEREQUAL
68054: IFFALSE 68062
68056: LD_INT 399
68058: DOUBLE
68059: LESSEQUAL
68060: IFTRUE 68064
68062: GO 68126
68064: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68065: LD_VAR 0 1
68069: PPUSH
68070: LD_VAR 0 2
68074: PPUSH
68075: LD_VAR 0 3
68079: PPUSH
68080: LD_VAR 0 4
68084: PPUSH
68085: LD_VAR 0 5
68089: PPUSH
68090: LD_VAR 0 6
68094: PPUSH
68095: LD_VAR 0 7
68099: PPUSH
68100: LD_VAR 0 8
68104: PPUSH
68105: LD_VAR 0 9
68109: PPUSH
68110: LD_VAR 0 10
68114: PPUSH
68115: LD_VAR 0 11
68119: PPUSH
68120: CALL 64708 0 11
68124: GO 68127
68126: POP
// end ;
68127: PPOPN 11
68129: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68130: LD_VAR 0 1
68134: PPUSH
68135: LD_VAR 0 2
68139: PPUSH
68140: LD_VAR 0 3
68144: PPUSH
68145: LD_VAR 0 4
68149: PPUSH
68150: LD_VAR 0 5
68154: PPUSH
68155: CALL 68274 0 5
// end ; end_of_file
68159: PPOPN 5
68161: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
68162: LD_INT 0
68164: PPUSH
68165: PPUSH
68166: PPUSH
68167: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
68168: LD_VAR 0 1
68172: PPUSH
68173: CALL_OW 264
68177: PUSH
68178: LD_INT 91
68180: EQUAL
68181: IFFALSE 68253
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
68183: LD_INT 68
68185: PPUSH
68186: LD_VAR 0 1
68190: PPUSH
68191: CALL_OW 255
68195: PPUSH
68196: CALL_OW 321
68200: PUSH
68201: LD_INT 2
68203: EQUAL
68204: IFFALSE 68216
// eff := 70 else
68206: LD_ADDR_VAR 0 4
68210: PUSH
68211: LD_INT 70
68213: ST_TO_ADDR
68214: GO 68224
// eff := 30 ;
68216: LD_ADDR_VAR 0 4
68220: PUSH
68221: LD_INT 30
68223: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
68224: LD_VAR 0 1
68228: PPUSH
68229: CALL_OW 250
68233: PPUSH
68234: LD_VAR 0 1
68238: PPUSH
68239: CALL_OW 251
68243: PPUSH
68244: LD_VAR 0 4
68248: PPUSH
68249: CALL_OW 495
// end ; end ;
68253: LD_VAR 0 2
68257: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
68258: LD_INT 0
68260: PPUSH
// end ;
68261: LD_VAR 0 4
68265: RET
// export function SOS_Command ( cmd ) ; begin
68266: LD_INT 0
68268: PPUSH
// end ;
68269: LD_VAR 0 2
68273: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
68274: LD_INT 0
68276: PPUSH
// end ;
68277: LD_VAR 0 6
68281: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
68282: LD_INT 0
68284: PPUSH
68285: PPUSH
// if not vehicle or not factory then
68286: LD_VAR 0 1
68290: NOT
68291: PUSH
68292: LD_VAR 0 2
68296: NOT
68297: OR
68298: IFFALSE 68302
// exit ;
68300: GO 68533
// if factoryWaypoints >= factory then
68302: LD_EXP 93
68306: PUSH
68307: LD_VAR 0 2
68311: GREATEREQUAL
68312: IFFALSE 68533
// if factoryWaypoints [ factory ] then
68314: LD_EXP 93
68318: PUSH
68319: LD_VAR 0 2
68323: ARRAY
68324: IFFALSE 68533
// begin if GetControl ( vehicle ) = control_manual then
68326: LD_VAR 0 1
68330: PPUSH
68331: CALL_OW 263
68335: PUSH
68336: LD_INT 1
68338: EQUAL
68339: IFFALSE 68420
// begin driver := IsDrivenBy ( vehicle ) ;
68341: LD_ADDR_VAR 0 4
68345: PUSH
68346: LD_VAR 0 1
68350: PPUSH
68351: CALL_OW 311
68355: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
68356: LD_VAR 0 4
68360: PPUSH
68361: LD_EXP 93
68365: PUSH
68366: LD_VAR 0 2
68370: ARRAY
68371: PUSH
68372: LD_INT 3
68374: ARRAY
68375: PPUSH
68376: LD_EXP 93
68380: PUSH
68381: LD_VAR 0 2
68385: ARRAY
68386: PUSH
68387: LD_INT 4
68389: ARRAY
68390: PPUSH
68391: CALL_OW 171
// AddComExitVehicle ( driver ) ;
68395: LD_VAR 0 4
68399: PPUSH
68400: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
68404: LD_VAR 0 4
68408: PPUSH
68409: LD_VAR 0 2
68413: PPUSH
68414: CALL_OW 180
// end else
68418: GO 68533
// if GetControl ( vehicle ) = control_remote then
68420: LD_VAR 0 1
68424: PPUSH
68425: CALL_OW 263
68429: PUSH
68430: LD_INT 2
68432: EQUAL
68433: IFFALSE 68494
// begin wait ( 0 0$2 ) ;
68435: LD_INT 70
68437: PPUSH
68438: CALL_OW 67
// if Connect ( vehicle ) then
68442: LD_VAR 0 1
68446: PPUSH
68447: CALL 18783 0 1
68451: IFFALSE 68492
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
68453: LD_VAR 0 1
68457: PPUSH
68458: LD_EXP 93
68462: PUSH
68463: LD_VAR 0 2
68467: ARRAY
68468: PUSH
68469: LD_INT 3
68471: ARRAY
68472: PPUSH
68473: LD_EXP 93
68477: PUSH
68478: LD_VAR 0 2
68482: ARRAY
68483: PUSH
68484: LD_INT 4
68486: ARRAY
68487: PPUSH
68488: CALL_OW 171
// end else
68492: GO 68533
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
68494: LD_VAR 0 1
68498: PPUSH
68499: LD_EXP 93
68503: PUSH
68504: LD_VAR 0 2
68508: ARRAY
68509: PUSH
68510: LD_INT 3
68512: ARRAY
68513: PPUSH
68514: LD_EXP 93
68518: PUSH
68519: LD_VAR 0 2
68523: ARRAY
68524: PUSH
68525: LD_INT 4
68527: ARRAY
68528: PPUSH
68529: CALL_OW 171
// end ; end ;
68533: LD_VAR 0 3
68537: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
68538: LD_INT 0
68540: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
68541: LD_VAR 0 1
68545: PUSH
68546: LD_INT 250
68548: EQUAL
68549: PUSH
68550: LD_VAR 0 2
68554: PPUSH
68555: CALL_OW 264
68559: PUSH
68560: LD_INT 81
68562: EQUAL
68563: AND
68564: IFFALSE 68585
// MinerPlaceMine ( unit , x , y ) ;
68566: LD_VAR 0 2
68570: PPUSH
68571: LD_VAR 0 4
68575: PPUSH
68576: LD_VAR 0 5
68580: PPUSH
68581: CALL 70970 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
68585: LD_VAR 0 1
68589: PUSH
68590: LD_INT 251
68592: EQUAL
68593: PUSH
68594: LD_VAR 0 2
68598: PPUSH
68599: CALL_OW 264
68603: PUSH
68604: LD_INT 81
68606: EQUAL
68607: AND
68608: IFFALSE 68629
// MinerDetonateMine ( unit , x , y ) ;
68610: LD_VAR 0 2
68614: PPUSH
68615: LD_VAR 0 4
68619: PPUSH
68620: LD_VAR 0 5
68624: PPUSH
68625: CALL 71245 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
68629: LD_VAR 0 1
68633: PUSH
68634: LD_INT 252
68636: EQUAL
68637: PUSH
68638: LD_VAR 0 2
68642: PPUSH
68643: CALL_OW 264
68647: PUSH
68648: LD_INT 81
68650: EQUAL
68651: AND
68652: IFFALSE 68673
// MinerCreateMinefield ( unit , x , y ) ;
68654: LD_VAR 0 2
68658: PPUSH
68659: LD_VAR 0 4
68663: PPUSH
68664: LD_VAR 0 5
68668: PPUSH
68669: CALL 71662 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
68673: LD_VAR 0 1
68677: PUSH
68678: LD_INT 253
68680: EQUAL
68681: PUSH
68682: LD_VAR 0 2
68686: PPUSH
68687: CALL_OW 257
68691: PUSH
68692: LD_INT 5
68694: EQUAL
68695: AND
68696: IFFALSE 68717
// ComBinocular ( unit , x , y ) ;
68698: LD_VAR 0 2
68702: PPUSH
68703: LD_VAR 0 4
68707: PPUSH
68708: LD_VAR 0 5
68712: PPUSH
68713: CALL 72031 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
68717: LD_VAR 0 1
68721: PUSH
68722: LD_INT 254
68724: EQUAL
68725: PUSH
68726: LD_VAR 0 2
68730: PPUSH
68731: CALL_OW 264
68735: PUSH
68736: LD_INT 99
68738: EQUAL
68739: AND
68740: PUSH
68741: LD_VAR 0 3
68745: PPUSH
68746: CALL_OW 263
68750: PUSH
68751: LD_INT 3
68753: EQUAL
68754: AND
68755: IFFALSE 68771
// HackDestroyVehicle ( unit , selectedUnit ) ;
68757: LD_VAR 0 2
68761: PPUSH
68762: LD_VAR 0 3
68766: PPUSH
68767: CALL 70334 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
68771: LD_VAR 0 1
68775: PUSH
68776: LD_INT 255
68778: EQUAL
68779: PUSH
68780: LD_VAR 0 2
68784: PPUSH
68785: CALL_OW 264
68789: PUSH
68790: LD_INT 14
68792: PUSH
68793: LD_INT 53
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: IN
68800: AND
68801: PUSH
68802: LD_VAR 0 4
68806: PPUSH
68807: LD_VAR 0 5
68811: PPUSH
68812: CALL_OW 488
68816: AND
68817: IFFALSE 68841
// CutTreeXYR ( unit , x , y , 12 ) ;
68819: LD_VAR 0 2
68823: PPUSH
68824: LD_VAR 0 4
68828: PPUSH
68829: LD_VAR 0 5
68833: PPUSH
68834: LD_INT 12
68836: PPUSH
68837: CALL 68904 0 4
// if cmd = 256 then
68841: LD_VAR 0 1
68845: PUSH
68846: LD_INT 256
68848: EQUAL
68849: IFFALSE 68870
// SetFactoryWaypoint ( unit , x , y ) ;
68851: LD_VAR 0 2
68855: PPUSH
68856: LD_VAR 0 4
68860: PPUSH
68861: LD_VAR 0 5
68865: PPUSH
68866: CALL 66688 0 3
// if cmd = 257 then
68870: LD_VAR 0 1
68874: PUSH
68875: LD_INT 257
68877: EQUAL
68878: IFFALSE 68899
// SetWarehouseGatheringPoint ( unit , x , y ) ;
68880: LD_VAR 0 2
68884: PPUSH
68885: LD_VAR 0 4
68889: PPUSH
68890: LD_VAR 0 5
68894: PPUSH
68895: CALL 67050 0 3
// end ;
68899: LD_VAR 0 6
68903: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
68904: LD_INT 0
68906: PPUSH
68907: PPUSH
68908: PPUSH
68909: PPUSH
68910: PPUSH
68911: PPUSH
68912: PPUSH
68913: PPUSH
68914: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
68915: LD_VAR 0 1
68919: NOT
68920: PUSH
68921: LD_VAR 0 2
68925: PPUSH
68926: LD_VAR 0 3
68930: PPUSH
68931: CALL_OW 488
68935: NOT
68936: OR
68937: PUSH
68938: LD_VAR 0 4
68942: NOT
68943: OR
68944: IFFALSE 68948
// exit ;
68946: GO 69288
// list := [ ] ;
68948: LD_ADDR_VAR 0 13
68952: PUSH
68953: EMPTY
68954: ST_TO_ADDR
// if x - r < 0 then
68955: LD_VAR 0 2
68959: PUSH
68960: LD_VAR 0 4
68964: MINUS
68965: PUSH
68966: LD_INT 0
68968: LESS
68969: IFFALSE 68981
// min_x := 0 else
68971: LD_ADDR_VAR 0 7
68975: PUSH
68976: LD_INT 0
68978: ST_TO_ADDR
68979: GO 68997
// min_x := x - r ;
68981: LD_ADDR_VAR 0 7
68985: PUSH
68986: LD_VAR 0 2
68990: PUSH
68991: LD_VAR 0 4
68995: MINUS
68996: ST_TO_ADDR
// if y - r < 0 then
68997: LD_VAR 0 3
69001: PUSH
69002: LD_VAR 0 4
69006: MINUS
69007: PUSH
69008: LD_INT 0
69010: LESS
69011: IFFALSE 69023
// min_y := 0 else
69013: LD_ADDR_VAR 0 8
69017: PUSH
69018: LD_INT 0
69020: ST_TO_ADDR
69021: GO 69039
// min_y := y - r ;
69023: LD_ADDR_VAR 0 8
69027: PUSH
69028: LD_VAR 0 3
69032: PUSH
69033: LD_VAR 0 4
69037: MINUS
69038: ST_TO_ADDR
// max_x := x + r ;
69039: LD_ADDR_VAR 0 9
69043: PUSH
69044: LD_VAR 0 2
69048: PUSH
69049: LD_VAR 0 4
69053: PLUS
69054: ST_TO_ADDR
// max_y := y + r ;
69055: LD_ADDR_VAR 0 10
69059: PUSH
69060: LD_VAR 0 3
69064: PUSH
69065: LD_VAR 0 4
69069: PLUS
69070: ST_TO_ADDR
// for _x = min_x to max_x do
69071: LD_ADDR_VAR 0 11
69075: PUSH
69076: DOUBLE
69077: LD_VAR 0 7
69081: DEC
69082: ST_TO_ADDR
69083: LD_VAR 0 9
69087: PUSH
69088: FOR_TO
69089: IFFALSE 69206
// for _y = min_y to max_y do
69091: LD_ADDR_VAR 0 12
69095: PUSH
69096: DOUBLE
69097: LD_VAR 0 8
69101: DEC
69102: ST_TO_ADDR
69103: LD_VAR 0 10
69107: PUSH
69108: FOR_TO
69109: IFFALSE 69202
// begin if not ValidHex ( _x , _y ) then
69111: LD_VAR 0 11
69115: PPUSH
69116: LD_VAR 0 12
69120: PPUSH
69121: CALL_OW 488
69125: NOT
69126: IFFALSE 69130
// continue ;
69128: GO 69108
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
69130: LD_VAR 0 11
69134: PPUSH
69135: LD_VAR 0 12
69139: PPUSH
69140: CALL_OW 351
69144: PUSH
69145: LD_VAR 0 11
69149: PPUSH
69150: LD_VAR 0 12
69154: PPUSH
69155: CALL_OW 554
69159: AND
69160: IFFALSE 69200
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
69162: LD_ADDR_VAR 0 13
69166: PUSH
69167: LD_VAR 0 13
69171: PPUSH
69172: LD_VAR 0 13
69176: PUSH
69177: LD_INT 1
69179: PLUS
69180: PPUSH
69181: LD_VAR 0 11
69185: PUSH
69186: LD_VAR 0 12
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: PPUSH
69195: CALL_OW 2
69199: ST_TO_ADDR
// end ;
69200: GO 69108
69202: POP
69203: POP
69204: GO 69088
69206: POP
69207: POP
// if not list then
69208: LD_VAR 0 13
69212: NOT
69213: IFFALSE 69217
// exit ;
69215: GO 69288
// for i in list do
69217: LD_ADDR_VAR 0 6
69221: PUSH
69222: LD_VAR 0 13
69226: PUSH
69227: FOR_IN
69228: IFFALSE 69286
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
69230: LD_VAR 0 1
69234: PPUSH
69235: LD_STRING M
69237: PUSH
69238: LD_VAR 0 6
69242: PUSH
69243: LD_INT 1
69245: ARRAY
69246: PUSH
69247: LD_VAR 0 6
69251: PUSH
69252: LD_INT 2
69254: ARRAY
69255: PUSH
69256: LD_INT 0
69258: PUSH
69259: LD_INT 0
69261: PUSH
69262: LD_INT 0
69264: PUSH
69265: LD_INT 0
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: LIST
69272: LIST
69273: LIST
69274: LIST
69275: LIST
69276: PUSH
69277: EMPTY
69278: LIST
69279: PPUSH
69280: CALL_OW 447
69284: GO 69227
69286: POP
69287: POP
// end ;
69288: LD_VAR 0 5
69292: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
69293: LD_EXP 96
69297: NOT
69298: IFFALSE 69348
69300: GO 69302
69302: DISABLE
// begin initHack := true ;
69303: LD_ADDR_EXP 96
69307: PUSH
69308: LD_INT 1
69310: ST_TO_ADDR
// hackTanks := [ ] ;
69311: LD_ADDR_EXP 97
69315: PUSH
69316: EMPTY
69317: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
69318: LD_ADDR_EXP 98
69322: PUSH
69323: EMPTY
69324: ST_TO_ADDR
// hackLimit := 3 ;
69325: LD_ADDR_EXP 99
69329: PUSH
69330: LD_INT 3
69332: ST_TO_ADDR
// hackDist := 12 ;
69333: LD_ADDR_EXP 100
69337: PUSH
69338: LD_INT 12
69340: ST_TO_ADDR
// hackCounter := [ ] ;
69341: LD_ADDR_EXP 101
69345: PUSH
69346: EMPTY
69347: ST_TO_ADDR
// end ;
69348: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
69349: LD_EXP 96
69353: PUSH
69354: LD_INT 34
69356: PUSH
69357: LD_INT 99
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: PPUSH
69364: CALL_OW 69
69368: AND
69369: IFFALSE 69622
69371: GO 69373
69373: DISABLE
69374: LD_INT 0
69376: PPUSH
69377: PPUSH
// begin enable ;
69378: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
69379: LD_ADDR_VAR 0 1
69383: PUSH
69384: LD_INT 34
69386: PUSH
69387: LD_INT 99
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PPUSH
69394: CALL_OW 69
69398: PUSH
69399: FOR_IN
69400: IFFALSE 69620
// begin if not i in hackTanks then
69402: LD_VAR 0 1
69406: PUSH
69407: LD_EXP 97
69411: IN
69412: NOT
69413: IFFALSE 69496
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
69415: LD_ADDR_EXP 97
69419: PUSH
69420: LD_EXP 97
69424: PPUSH
69425: LD_EXP 97
69429: PUSH
69430: LD_INT 1
69432: PLUS
69433: PPUSH
69434: LD_VAR 0 1
69438: PPUSH
69439: CALL_OW 1
69443: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
69444: LD_ADDR_EXP 98
69448: PUSH
69449: LD_EXP 98
69453: PPUSH
69454: LD_EXP 98
69458: PUSH
69459: LD_INT 1
69461: PLUS
69462: PPUSH
69463: EMPTY
69464: PPUSH
69465: CALL_OW 1
69469: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
69470: LD_ADDR_EXP 101
69474: PUSH
69475: LD_EXP 101
69479: PPUSH
69480: LD_EXP 101
69484: PUSH
69485: LD_INT 1
69487: PLUS
69488: PPUSH
69489: EMPTY
69490: PPUSH
69491: CALL_OW 1
69495: ST_TO_ADDR
// end ; if not IsOk ( i ) then
69496: LD_VAR 0 1
69500: PPUSH
69501: CALL_OW 302
69505: NOT
69506: IFFALSE 69519
// begin HackUnlinkAll ( i ) ;
69508: LD_VAR 0 1
69512: PPUSH
69513: CALL 69625 0 1
// continue ;
69517: GO 69399
// end ; HackCheckCapturedStatus ( i ) ;
69519: LD_VAR 0 1
69523: PPUSH
69524: CALL 70068 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
69528: LD_ADDR_VAR 0 2
69532: PUSH
69533: LD_INT 81
69535: PUSH
69536: LD_VAR 0 1
69540: PPUSH
69541: CALL_OW 255
69545: PUSH
69546: EMPTY
69547: LIST
69548: LIST
69549: PUSH
69550: LD_INT 33
69552: PUSH
69553: LD_INT 3
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: PUSH
69560: LD_INT 91
69562: PUSH
69563: LD_VAR 0 1
69567: PUSH
69568: LD_EXP 100
69572: PUSH
69573: EMPTY
69574: LIST
69575: LIST
69576: LIST
69577: PUSH
69578: LD_INT 50
69580: PUSH
69581: EMPTY
69582: LIST
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: LIST
69588: LIST
69589: PPUSH
69590: CALL_OW 69
69594: ST_TO_ADDR
// if not tmp then
69595: LD_VAR 0 2
69599: NOT
69600: IFFALSE 69604
// continue ;
69602: GO 69399
// HackLink ( i , tmp ) ;
69604: LD_VAR 0 1
69608: PPUSH
69609: LD_VAR 0 2
69613: PPUSH
69614: CALL 69761 0 2
// end ;
69618: GO 69399
69620: POP
69621: POP
// end ;
69622: PPOPN 2
69624: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
69625: LD_INT 0
69627: PPUSH
69628: PPUSH
69629: PPUSH
// if not hack in hackTanks then
69630: LD_VAR 0 1
69634: PUSH
69635: LD_EXP 97
69639: IN
69640: NOT
69641: IFFALSE 69645
// exit ;
69643: GO 69756
// index := GetElementIndex ( hackTanks , hack ) ;
69645: LD_ADDR_VAR 0 4
69649: PUSH
69650: LD_EXP 97
69654: PPUSH
69655: LD_VAR 0 1
69659: PPUSH
69660: CALL 15599 0 2
69664: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
69665: LD_EXP 98
69669: PUSH
69670: LD_VAR 0 4
69674: ARRAY
69675: IFFALSE 69756
// begin for i in hackTanksCaptured [ index ] do
69677: LD_ADDR_VAR 0 3
69681: PUSH
69682: LD_EXP 98
69686: PUSH
69687: LD_VAR 0 4
69691: ARRAY
69692: PUSH
69693: FOR_IN
69694: IFFALSE 69720
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
69696: LD_VAR 0 3
69700: PUSH
69701: LD_INT 1
69703: ARRAY
69704: PPUSH
69705: LD_VAR 0 3
69709: PUSH
69710: LD_INT 2
69712: ARRAY
69713: PPUSH
69714: CALL_OW 235
69718: GO 69693
69720: POP
69721: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
69722: LD_ADDR_EXP 98
69726: PUSH
69727: LD_EXP 98
69731: PPUSH
69732: LD_VAR 0 4
69736: PPUSH
69737: EMPTY
69738: PPUSH
69739: CALL_OW 1
69743: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
69744: LD_VAR 0 1
69748: PPUSH
69749: LD_INT 0
69751: PPUSH
69752: CALL_OW 505
// end ; end ;
69756: LD_VAR 0 2
69760: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
69761: LD_INT 0
69763: PPUSH
69764: PPUSH
69765: PPUSH
// if not hack in hackTanks or not vehicles then
69766: LD_VAR 0 1
69770: PUSH
69771: LD_EXP 97
69775: IN
69776: NOT
69777: PUSH
69778: LD_VAR 0 2
69782: NOT
69783: OR
69784: IFFALSE 69788
// exit ;
69786: GO 70063
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
69788: LD_ADDR_VAR 0 2
69792: PUSH
69793: LD_VAR 0 1
69797: PPUSH
69798: LD_VAR 0 2
69802: PPUSH
69803: LD_INT 1
69805: PPUSH
69806: LD_INT 1
69808: PPUSH
69809: CALL 16249 0 4
69813: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
69814: LD_ADDR_VAR 0 5
69818: PUSH
69819: LD_EXP 97
69823: PPUSH
69824: LD_VAR 0 1
69828: PPUSH
69829: CALL 15599 0 2
69833: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
69834: LD_EXP 98
69838: PUSH
69839: LD_VAR 0 5
69843: ARRAY
69844: PUSH
69845: LD_EXP 99
69849: LESS
69850: IFFALSE 70039
// begin for i := 1 to vehicles do
69852: LD_ADDR_VAR 0 4
69856: PUSH
69857: DOUBLE
69858: LD_INT 1
69860: DEC
69861: ST_TO_ADDR
69862: LD_VAR 0 2
69866: PUSH
69867: FOR_TO
69868: IFFALSE 70037
// begin if hackTanksCaptured [ index ] = hackLimit then
69870: LD_EXP 98
69874: PUSH
69875: LD_VAR 0 5
69879: ARRAY
69880: PUSH
69881: LD_EXP 99
69885: EQUAL
69886: IFFALSE 69890
// break ;
69888: GO 70037
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
69890: LD_ADDR_EXP 101
69894: PUSH
69895: LD_EXP 101
69899: PPUSH
69900: LD_VAR 0 5
69904: PPUSH
69905: LD_EXP 101
69909: PUSH
69910: LD_VAR 0 5
69914: ARRAY
69915: PUSH
69916: LD_INT 1
69918: PLUS
69919: PPUSH
69920: CALL_OW 1
69924: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
69925: LD_ADDR_EXP 98
69929: PUSH
69930: LD_EXP 98
69934: PPUSH
69935: LD_VAR 0 5
69939: PUSH
69940: LD_EXP 98
69944: PUSH
69945: LD_VAR 0 5
69949: ARRAY
69950: PUSH
69951: LD_INT 1
69953: PLUS
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: PPUSH
69959: LD_VAR 0 2
69963: PUSH
69964: LD_VAR 0 4
69968: ARRAY
69969: PUSH
69970: LD_VAR 0 2
69974: PUSH
69975: LD_VAR 0 4
69979: ARRAY
69980: PPUSH
69981: CALL_OW 255
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: PPUSH
69990: CALL 15814 0 3
69994: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
69995: LD_VAR 0 2
69999: PUSH
70000: LD_VAR 0 4
70004: ARRAY
70005: PPUSH
70006: LD_VAR 0 1
70010: PPUSH
70011: CALL_OW 255
70015: PPUSH
70016: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
70020: LD_VAR 0 2
70024: PUSH
70025: LD_VAR 0 4
70029: ARRAY
70030: PPUSH
70031: CALL_OW 141
// end ;
70035: GO 69867
70037: POP
70038: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
70039: LD_VAR 0 1
70043: PPUSH
70044: LD_EXP 98
70048: PUSH
70049: LD_VAR 0 5
70053: ARRAY
70054: PUSH
70055: LD_INT 0
70057: PLUS
70058: PPUSH
70059: CALL_OW 505
// end ;
70063: LD_VAR 0 3
70067: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
70068: LD_INT 0
70070: PPUSH
70071: PPUSH
70072: PPUSH
70073: PPUSH
// if not hack in hackTanks then
70074: LD_VAR 0 1
70078: PUSH
70079: LD_EXP 97
70083: IN
70084: NOT
70085: IFFALSE 70089
// exit ;
70087: GO 70329
// index := GetElementIndex ( hackTanks , hack ) ;
70089: LD_ADDR_VAR 0 4
70093: PUSH
70094: LD_EXP 97
70098: PPUSH
70099: LD_VAR 0 1
70103: PPUSH
70104: CALL 15599 0 2
70108: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
70109: LD_ADDR_VAR 0 3
70113: PUSH
70114: DOUBLE
70115: LD_EXP 98
70119: PUSH
70120: LD_VAR 0 4
70124: ARRAY
70125: INC
70126: ST_TO_ADDR
70127: LD_INT 1
70129: PUSH
70130: FOR_DOWNTO
70131: IFFALSE 70303
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
70133: LD_ADDR_VAR 0 5
70137: PUSH
70138: LD_EXP 98
70142: PUSH
70143: LD_VAR 0 4
70147: ARRAY
70148: PUSH
70149: LD_VAR 0 3
70153: ARRAY
70154: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
70155: LD_VAR 0 5
70159: PUSH
70160: LD_INT 1
70162: ARRAY
70163: PPUSH
70164: CALL_OW 302
70168: NOT
70169: PUSH
70170: LD_VAR 0 5
70174: PUSH
70175: LD_INT 1
70177: ARRAY
70178: PPUSH
70179: CALL_OW 255
70183: PUSH
70184: LD_VAR 0 1
70188: PPUSH
70189: CALL_OW 255
70193: NONEQUAL
70194: OR
70195: IFFALSE 70301
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
70197: LD_VAR 0 5
70201: PUSH
70202: LD_INT 1
70204: ARRAY
70205: PPUSH
70206: CALL_OW 305
70210: PUSH
70211: LD_VAR 0 5
70215: PUSH
70216: LD_INT 1
70218: ARRAY
70219: PPUSH
70220: CALL_OW 255
70224: PUSH
70225: LD_VAR 0 1
70229: PPUSH
70230: CALL_OW 255
70234: EQUAL
70235: AND
70236: IFFALSE 70260
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
70238: LD_VAR 0 5
70242: PUSH
70243: LD_INT 1
70245: ARRAY
70246: PPUSH
70247: LD_VAR 0 5
70251: PUSH
70252: LD_INT 2
70254: ARRAY
70255: PPUSH
70256: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
70260: LD_ADDR_EXP 98
70264: PUSH
70265: LD_EXP 98
70269: PPUSH
70270: LD_VAR 0 4
70274: PPUSH
70275: LD_EXP 98
70279: PUSH
70280: LD_VAR 0 4
70284: ARRAY
70285: PPUSH
70286: LD_VAR 0 3
70290: PPUSH
70291: CALL_OW 3
70295: PPUSH
70296: CALL_OW 1
70300: ST_TO_ADDR
// end ; end ;
70301: GO 70130
70303: POP
70304: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
70305: LD_VAR 0 1
70309: PPUSH
70310: LD_EXP 98
70314: PUSH
70315: LD_VAR 0 4
70319: ARRAY
70320: PUSH
70321: LD_INT 0
70323: PLUS
70324: PPUSH
70325: CALL_OW 505
// end ;
70329: LD_VAR 0 2
70333: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
70334: LD_INT 0
70336: PPUSH
70337: PPUSH
70338: PPUSH
70339: PPUSH
// if not hack in hackTanks then
70340: LD_VAR 0 1
70344: PUSH
70345: LD_EXP 97
70349: IN
70350: NOT
70351: IFFALSE 70355
// exit ;
70353: GO 70440
// index := GetElementIndex ( hackTanks , hack ) ;
70355: LD_ADDR_VAR 0 5
70359: PUSH
70360: LD_EXP 97
70364: PPUSH
70365: LD_VAR 0 1
70369: PPUSH
70370: CALL 15599 0 2
70374: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
70375: LD_ADDR_VAR 0 4
70379: PUSH
70380: DOUBLE
70381: LD_INT 1
70383: DEC
70384: ST_TO_ADDR
70385: LD_EXP 98
70389: PUSH
70390: LD_VAR 0 5
70394: ARRAY
70395: PUSH
70396: FOR_TO
70397: IFFALSE 70438
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
70399: LD_EXP 98
70403: PUSH
70404: LD_VAR 0 5
70408: ARRAY
70409: PUSH
70410: LD_VAR 0 4
70414: ARRAY
70415: PUSH
70416: LD_INT 1
70418: ARRAY
70419: PUSH
70420: LD_VAR 0 2
70424: EQUAL
70425: IFFALSE 70436
// KillUnit ( vehicle ) ;
70427: LD_VAR 0 2
70431: PPUSH
70432: CALL_OW 66
70436: GO 70396
70438: POP
70439: POP
// end ;
70440: LD_VAR 0 3
70444: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
70445: LD_EXP 102
70449: NOT
70450: IFFALSE 70485
70452: GO 70454
70454: DISABLE
// begin initMiner := true ;
70455: LD_ADDR_EXP 102
70459: PUSH
70460: LD_INT 1
70462: ST_TO_ADDR
// minersList := [ ] ;
70463: LD_ADDR_EXP 103
70467: PUSH
70468: EMPTY
70469: ST_TO_ADDR
// minerMinesList := [ ] ;
70470: LD_ADDR_EXP 104
70474: PUSH
70475: EMPTY
70476: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
70477: LD_ADDR_EXP 105
70481: PUSH
70482: LD_INT 5
70484: ST_TO_ADDR
// end ;
70485: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
70486: LD_EXP 102
70490: PUSH
70491: LD_INT 34
70493: PUSH
70494: LD_INT 81
70496: PUSH
70497: EMPTY
70498: LIST
70499: LIST
70500: PPUSH
70501: CALL_OW 69
70505: AND
70506: IFFALSE 70967
70508: GO 70510
70510: DISABLE
70511: LD_INT 0
70513: PPUSH
70514: PPUSH
70515: PPUSH
70516: PPUSH
// begin enable ;
70517: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
70518: LD_ADDR_VAR 0 1
70522: PUSH
70523: LD_INT 34
70525: PUSH
70526: LD_INT 81
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: PPUSH
70533: CALL_OW 69
70537: PUSH
70538: FOR_IN
70539: IFFALSE 70611
// begin if not i in minersList then
70541: LD_VAR 0 1
70545: PUSH
70546: LD_EXP 103
70550: IN
70551: NOT
70552: IFFALSE 70609
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
70554: LD_ADDR_EXP 103
70558: PUSH
70559: LD_EXP 103
70563: PPUSH
70564: LD_EXP 103
70568: PUSH
70569: LD_INT 1
70571: PLUS
70572: PPUSH
70573: LD_VAR 0 1
70577: PPUSH
70578: CALL_OW 1
70582: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
70583: LD_ADDR_EXP 104
70587: PUSH
70588: LD_EXP 104
70592: PPUSH
70593: LD_EXP 104
70597: PUSH
70598: LD_INT 1
70600: PLUS
70601: PPUSH
70602: EMPTY
70603: PPUSH
70604: CALL_OW 1
70608: ST_TO_ADDR
// end end ;
70609: GO 70538
70611: POP
70612: POP
// for i := minerMinesList downto 1 do
70613: LD_ADDR_VAR 0 1
70617: PUSH
70618: DOUBLE
70619: LD_EXP 104
70623: INC
70624: ST_TO_ADDR
70625: LD_INT 1
70627: PUSH
70628: FOR_DOWNTO
70629: IFFALSE 70965
// begin if IsLive ( minersList [ i ] ) then
70631: LD_EXP 103
70635: PUSH
70636: LD_VAR 0 1
70640: ARRAY
70641: PPUSH
70642: CALL_OW 300
70646: IFFALSE 70674
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
70648: LD_EXP 103
70652: PUSH
70653: LD_VAR 0 1
70657: ARRAY
70658: PPUSH
70659: LD_EXP 104
70663: PUSH
70664: LD_VAR 0 1
70668: ARRAY
70669: PPUSH
70670: CALL_OW 505
// if not minerMinesList [ i ] then
70674: LD_EXP 104
70678: PUSH
70679: LD_VAR 0 1
70683: ARRAY
70684: NOT
70685: IFFALSE 70689
// continue ;
70687: GO 70628
// for j := minerMinesList [ i ] downto 1 do
70689: LD_ADDR_VAR 0 2
70693: PUSH
70694: DOUBLE
70695: LD_EXP 104
70699: PUSH
70700: LD_VAR 0 1
70704: ARRAY
70705: INC
70706: ST_TO_ADDR
70707: LD_INT 1
70709: PUSH
70710: FOR_DOWNTO
70711: IFFALSE 70961
// begin side := GetSide ( minersList [ i ] ) ;
70713: LD_ADDR_VAR 0 3
70717: PUSH
70718: LD_EXP 103
70722: PUSH
70723: LD_VAR 0 1
70727: ARRAY
70728: PPUSH
70729: CALL_OW 255
70733: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
70734: LD_ADDR_VAR 0 4
70738: PUSH
70739: LD_EXP 104
70743: PUSH
70744: LD_VAR 0 1
70748: ARRAY
70749: PUSH
70750: LD_VAR 0 2
70754: ARRAY
70755: PUSH
70756: LD_INT 1
70758: ARRAY
70759: PPUSH
70760: LD_EXP 104
70764: PUSH
70765: LD_VAR 0 1
70769: ARRAY
70770: PUSH
70771: LD_VAR 0 2
70775: ARRAY
70776: PUSH
70777: LD_INT 2
70779: ARRAY
70780: PPUSH
70781: CALL_OW 428
70785: ST_TO_ADDR
// if not tmp then
70786: LD_VAR 0 4
70790: NOT
70791: IFFALSE 70795
// continue ;
70793: GO 70710
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
70795: LD_VAR 0 4
70799: PUSH
70800: LD_INT 81
70802: PUSH
70803: LD_VAR 0 3
70807: PUSH
70808: EMPTY
70809: LIST
70810: LIST
70811: PPUSH
70812: CALL_OW 69
70816: IN
70817: PUSH
70818: LD_EXP 104
70822: PUSH
70823: LD_VAR 0 1
70827: ARRAY
70828: PUSH
70829: LD_VAR 0 2
70833: ARRAY
70834: PUSH
70835: LD_INT 1
70837: ARRAY
70838: PPUSH
70839: LD_EXP 104
70843: PUSH
70844: LD_VAR 0 1
70848: ARRAY
70849: PUSH
70850: LD_VAR 0 2
70854: ARRAY
70855: PUSH
70856: LD_INT 2
70858: ARRAY
70859: PPUSH
70860: CALL_OW 458
70864: AND
70865: IFFALSE 70959
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
70867: LD_EXP 104
70871: PUSH
70872: LD_VAR 0 1
70876: ARRAY
70877: PUSH
70878: LD_VAR 0 2
70882: ARRAY
70883: PUSH
70884: LD_INT 1
70886: ARRAY
70887: PPUSH
70888: LD_EXP 104
70892: PUSH
70893: LD_VAR 0 1
70897: ARRAY
70898: PUSH
70899: LD_VAR 0 2
70903: ARRAY
70904: PUSH
70905: LD_INT 2
70907: ARRAY
70908: PPUSH
70909: LD_VAR 0 3
70913: PPUSH
70914: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
70918: LD_ADDR_EXP 104
70922: PUSH
70923: LD_EXP 104
70927: PPUSH
70928: LD_VAR 0 1
70932: PPUSH
70933: LD_EXP 104
70937: PUSH
70938: LD_VAR 0 1
70942: ARRAY
70943: PPUSH
70944: LD_VAR 0 2
70948: PPUSH
70949: CALL_OW 3
70953: PPUSH
70954: CALL_OW 1
70958: ST_TO_ADDR
// end ; end ;
70959: GO 70710
70961: POP
70962: POP
// end ;
70963: GO 70628
70965: POP
70966: POP
// end ;
70967: PPOPN 4
70969: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
70970: LD_INT 0
70972: PPUSH
70973: PPUSH
// result := false ;
70974: LD_ADDR_VAR 0 4
70978: PUSH
70979: LD_INT 0
70981: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
70982: LD_VAR 0 1
70986: PPUSH
70987: CALL_OW 264
70991: PUSH
70992: LD_INT 81
70994: EQUAL
70995: NOT
70996: IFFALSE 71000
// exit ;
70998: GO 71240
// index := GetElementIndex ( minersList , unit ) ;
71000: LD_ADDR_VAR 0 5
71004: PUSH
71005: LD_EXP 103
71009: PPUSH
71010: LD_VAR 0 1
71014: PPUSH
71015: CALL 15599 0 2
71019: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
71020: LD_EXP 104
71024: PUSH
71025: LD_VAR 0 5
71029: ARRAY
71030: PUSH
71031: LD_EXP 105
71035: GREATEREQUAL
71036: IFFALSE 71040
// exit ;
71038: GO 71240
// ComMoveXY ( unit , x , y ) ;
71040: LD_VAR 0 1
71044: PPUSH
71045: LD_VAR 0 2
71049: PPUSH
71050: LD_VAR 0 3
71054: PPUSH
71055: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
71059: LD_INT 35
71061: PPUSH
71062: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
71066: LD_VAR 0 1
71070: PPUSH
71071: LD_VAR 0 2
71075: PPUSH
71076: LD_VAR 0 3
71080: PPUSH
71081: CALL 46954 0 3
71085: NOT
71086: PUSH
71087: LD_VAR 0 1
71091: PPUSH
71092: CALL_OW 314
71096: AND
71097: IFFALSE 71101
// exit ;
71099: GO 71240
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
71101: LD_VAR 0 2
71105: PPUSH
71106: LD_VAR 0 3
71110: PPUSH
71111: CALL_OW 428
71115: PUSH
71116: LD_VAR 0 1
71120: EQUAL
71121: PUSH
71122: LD_VAR 0 1
71126: PPUSH
71127: CALL_OW 314
71131: NOT
71132: AND
71133: IFFALSE 71059
// PlaySoundXY ( x , y , PlantMine ) ;
71135: LD_VAR 0 2
71139: PPUSH
71140: LD_VAR 0 3
71144: PPUSH
71145: LD_STRING PlantMine
71147: PPUSH
71148: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
71152: LD_VAR 0 2
71156: PPUSH
71157: LD_VAR 0 3
71161: PPUSH
71162: LD_VAR 0 1
71166: PPUSH
71167: CALL_OW 255
71171: PPUSH
71172: LD_INT 0
71174: PPUSH
71175: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
71179: LD_ADDR_EXP 104
71183: PUSH
71184: LD_EXP 104
71188: PPUSH
71189: LD_VAR 0 5
71193: PUSH
71194: LD_EXP 104
71198: PUSH
71199: LD_VAR 0 5
71203: ARRAY
71204: PUSH
71205: LD_INT 1
71207: PLUS
71208: PUSH
71209: EMPTY
71210: LIST
71211: LIST
71212: PPUSH
71213: LD_VAR 0 2
71217: PUSH
71218: LD_VAR 0 3
71222: PUSH
71223: EMPTY
71224: LIST
71225: LIST
71226: PPUSH
71227: CALL 15814 0 3
71231: ST_TO_ADDR
// result := true ;
71232: LD_ADDR_VAR 0 4
71236: PUSH
71237: LD_INT 1
71239: ST_TO_ADDR
// end ;
71240: LD_VAR 0 4
71244: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
71245: LD_INT 0
71247: PPUSH
71248: PPUSH
71249: PPUSH
// if not unit in minersList then
71250: LD_VAR 0 1
71254: PUSH
71255: LD_EXP 103
71259: IN
71260: NOT
71261: IFFALSE 71265
// exit ;
71263: GO 71657
// index := GetElementIndex ( minersList , unit ) ;
71265: LD_ADDR_VAR 0 6
71269: PUSH
71270: LD_EXP 103
71274: PPUSH
71275: LD_VAR 0 1
71279: PPUSH
71280: CALL 15599 0 2
71284: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
71285: LD_ADDR_VAR 0 5
71289: PUSH
71290: DOUBLE
71291: LD_EXP 104
71295: PUSH
71296: LD_VAR 0 6
71300: ARRAY
71301: INC
71302: ST_TO_ADDR
71303: LD_INT 1
71305: PUSH
71306: FOR_DOWNTO
71307: IFFALSE 71468
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
71309: LD_EXP 104
71313: PUSH
71314: LD_VAR 0 6
71318: ARRAY
71319: PUSH
71320: LD_VAR 0 5
71324: ARRAY
71325: PUSH
71326: LD_INT 1
71328: ARRAY
71329: PUSH
71330: LD_VAR 0 2
71334: EQUAL
71335: PUSH
71336: LD_EXP 104
71340: PUSH
71341: LD_VAR 0 6
71345: ARRAY
71346: PUSH
71347: LD_VAR 0 5
71351: ARRAY
71352: PUSH
71353: LD_INT 2
71355: ARRAY
71356: PUSH
71357: LD_VAR 0 3
71361: EQUAL
71362: AND
71363: IFFALSE 71466
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
71365: LD_EXP 104
71369: PUSH
71370: LD_VAR 0 6
71374: ARRAY
71375: PUSH
71376: LD_VAR 0 5
71380: ARRAY
71381: PUSH
71382: LD_INT 1
71384: ARRAY
71385: PPUSH
71386: LD_EXP 104
71390: PUSH
71391: LD_VAR 0 6
71395: ARRAY
71396: PUSH
71397: LD_VAR 0 5
71401: ARRAY
71402: PUSH
71403: LD_INT 2
71405: ARRAY
71406: PPUSH
71407: LD_VAR 0 1
71411: PPUSH
71412: CALL_OW 255
71416: PPUSH
71417: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
71421: LD_ADDR_EXP 104
71425: PUSH
71426: LD_EXP 104
71430: PPUSH
71431: LD_VAR 0 6
71435: PPUSH
71436: LD_EXP 104
71440: PUSH
71441: LD_VAR 0 6
71445: ARRAY
71446: PPUSH
71447: LD_VAR 0 5
71451: PPUSH
71452: CALL_OW 3
71456: PPUSH
71457: CALL_OW 1
71461: ST_TO_ADDR
// exit ;
71462: POP
71463: POP
71464: GO 71657
// end ; end ;
71466: GO 71306
71468: POP
71469: POP
// for i := minerMinesList [ index ] downto 1 do
71470: LD_ADDR_VAR 0 5
71474: PUSH
71475: DOUBLE
71476: LD_EXP 104
71480: PUSH
71481: LD_VAR 0 6
71485: ARRAY
71486: INC
71487: ST_TO_ADDR
71488: LD_INT 1
71490: PUSH
71491: FOR_DOWNTO
71492: IFFALSE 71655
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
71494: LD_EXP 104
71498: PUSH
71499: LD_VAR 0 6
71503: ARRAY
71504: PUSH
71505: LD_VAR 0 5
71509: ARRAY
71510: PUSH
71511: LD_INT 1
71513: ARRAY
71514: PPUSH
71515: LD_EXP 104
71519: PUSH
71520: LD_VAR 0 6
71524: ARRAY
71525: PUSH
71526: LD_VAR 0 5
71530: ARRAY
71531: PUSH
71532: LD_INT 2
71534: ARRAY
71535: PPUSH
71536: LD_VAR 0 2
71540: PPUSH
71541: LD_VAR 0 3
71545: PPUSH
71546: CALL_OW 298
71550: PUSH
71551: LD_INT 6
71553: LESS
71554: IFFALSE 71653
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
71556: LD_EXP 104
71560: PUSH
71561: LD_VAR 0 6
71565: ARRAY
71566: PUSH
71567: LD_VAR 0 5
71571: ARRAY
71572: PUSH
71573: LD_INT 1
71575: ARRAY
71576: PPUSH
71577: LD_EXP 104
71581: PUSH
71582: LD_VAR 0 6
71586: ARRAY
71587: PUSH
71588: LD_VAR 0 5
71592: ARRAY
71593: PUSH
71594: LD_INT 2
71596: ARRAY
71597: PPUSH
71598: LD_VAR 0 1
71602: PPUSH
71603: CALL_OW 255
71607: PPUSH
71608: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
71612: LD_ADDR_EXP 104
71616: PUSH
71617: LD_EXP 104
71621: PPUSH
71622: LD_VAR 0 6
71626: PPUSH
71627: LD_EXP 104
71631: PUSH
71632: LD_VAR 0 6
71636: ARRAY
71637: PPUSH
71638: LD_VAR 0 5
71642: PPUSH
71643: CALL_OW 3
71647: PPUSH
71648: CALL_OW 1
71652: ST_TO_ADDR
// end ; end ;
71653: GO 71491
71655: POP
71656: POP
// end ;
71657: LD_VAR 0 4
71661: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
71662: LD_INT 0
71664: PPUSH
71665: PPUSH
71666: PPUSH
71667: PPUSH
71668: PPUSH
71669: PPUSH
71670: PPUSH
71671: PPUSH
71672: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
71673: LD_VAR 0 1
71677: PPUSH
71678: CALL_OW 264
71682: PUSH
71683: LD_INT 81
71685: EQUAL
71686: NOT
71687: PUSH
71688: LD_VAR 0 1
71692: PUSH
71693: LD_EXP 103
71697: IN
71698: NOT
71699: OR
71700: IFFALSE 71704
// exit ;
71702: GO 72026
// index := GetElementIndex ( minersList , unit ) ;
71704: LD_ADDR_VAR 0 6
71708: PUSH
71709: LD_EXP 103
71713: PPUSH
71714: LD_VAR 0 1
71718: PPUSH
71719: CALL 15599 0 2
71723: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
71724: LD_ADDR_VAR 0 8
71728: PUSH
71729: LD_EXP 105
71733: PUSH
71734: LD_EXP 104
71738: PUSH
71739: LD_VAR 0 6
71743: ARRAY
71744: MINUS
71745: ST_TO_ADDR
// if not minesFreeAmount then
71746: LD_VAR 0 8
71750: NOT
71751: IFFALSE 71755
// exit ;
71753: GO 72026
// tmp := [ ] ;
71755: LD_ADDR_VAR 0 7
71759: PUSH
71760: EMPTY
71761: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
71762: LD_ADDR_VAR 0 5
71766: PUSH
71767: DOUBLE
71768: LD_INT 1
71770: DEC
71771: ST_TO_ADDR
71772: LD_VAR 0 8
71776: PUSH
71777: FOR_TO
71778: IFFALSE 71973
// begin _d := rand ( 0 , 5 ) ;
71780: LD_ADDR_VAR 0 11
71784: PUSH
71785: LD_INT 0
71787: PPUSH
71788: LD_INT 5
71790: PPUSH
71791: CALL_OW 12
71795: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
71796: LD_ADDR_VAR 0 12
71800: PUSH
71801: LD_INT 2
71803: PPUSH
71804: LD_INT 6
71806: PPUSH
71807: CALL_OW 12
71811: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
71812: LD_ADDR_VAR 0 9
71816: PUSH
71817: LD_VAR 0 2
71821: PPUSH
71822: LD_VAR 0 11
71826: PPUSH
71827: LD_VAR 0 12
71831: PPUSH
71832: CALL_OW 272
71836: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
71837: LD_ADDR_VAR 0 10
71841: PUSH
71842: LD_VAR 0 3
71846: PPUSH
71847: LD_VAR 0 11
71851: PPUSH
71852: LD_VAR 0 12
71856: PPUSH
71857: CALL_OW 273
71861: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
71862: LD_VAR 0 9
71866: PPUSH
71867: LD_VAR 0 10
71871: PPUSH
71872: CALL_OW 488
71876: PUSH
71877: LD_VAR 0 9
71881: PUSH
71882: LD_VAR 0 10
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: PUSH
71891: LD_VAR 0 7
71895: IN
71896: NOT
71897: AND
71898: PUSH
71899: LD_VAR 0 9
71903: PPUSH
71904: LD_VAR 0 10
71908: PPUSH
71909: CALL_OW 458
71913: NOT
71914: AND
71915: IFFALSE 71957
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
71917: LD_ADDR_VAR 0 7
71921: PUSH
71922: LD_VAR 0 7
71926: PPUSH
71927: LD_VAR 0 7
71931: PUSH
71932: LD_INT 1
71934: PLUS
71935: PPUSH
71936: LD_VAR 0 9
71940: PUSH
71941: LD_VAR 0 10
71945: PUSH
71946: EMPTY
71947: LIST
71948: LIST
71949: PPUSH
71950: CALL_OW 1
71954: ST_TO_ADDR
71955: GO 71971
// i := i - 1 ;
71957: LD_ADDR_VAR 0 5
71961: PUSH
71962: LD_VAR 0 5
71966: PUSH
71967: LD_INT 1
71969: MINUS
71970: ST_TO_ADDR
// end ;
71971: GO 71777
71973: POP
71974: POP
// for i in tmp do
71975: LD_ADDR_VAR 0 5
71979: PUSH
71980: LD_VAR 0 7
71984: PUSH
71985: FOR_IN
71986: IFFALSE 72024
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
71988: LD_VAR 0 1
71992: PPUSH
71993: LD_VAR 0 5
71997: PUSH
71998: LD_INT 1
72000: ARRAY
72001: PPUSH
72002: LD_VAR 0 5
72006: PUSH
72007: LD_INT 2
72009: ARRAY
72010: PPUSH
72011: CALL 70970 0 3
72015: NOT
72016: IFFALSE 72022
// exit ;
72018: POP
72019: POP
72020: GO 72026
72022: GO 71985
72024: POP
72025: POP
// end ;
72026: LD_VAR 0 4
72030: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
72031: LD_INT 0
72033: PPUSH
72034: PPUSH
72035: PPUSH
72036: PPUSH
72037: PPUSH
72038: PPUSH
72039: PPUSH
// if not GetClass ( unit ) = class_sniper then
72040: LD_VAR 0 1
72044: PPUSH
72045: CALL_OW 257
72049: PUSH
72050: LD_INT 5
72052: EQUAL
72053: NOT
72054: IFFALSE 72058
// exit ;
72056: GO 72446
// dist := 8 ;
72058: LD_ADDR_VAR 0 5
72062: PUSH
72063: LD_INT 8
72065: ST_TO_ADDR
// viewRange := 12 ;
72066: LD_ADDR_VAR 0 7
72070: PUSH
72071: LD_INT 12
72073: ST_TO_ADDR
// side := GetSide ( unit ) ;
72074: LD_ADDR_VAR 0 6
72078: PUSH
72079: LD_VAR 0 1
72083: PPUSH
72084: CALL_OW 255
72088: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
72089: LD_INT 61
72091: PPUSH
72092: LD_VAR 0 6
72096: PPUSH
72097: CALL_OW 321
72101: PUSH
72102: LD_INT 2
72104: EQUAL
72105: IFFALSE 72115
// viewRange := 16 ;
72107: LD_ADDR_VAR 0 7
72111: PUSH
72112: LD_INT 16
72114: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
72115: LD_VAR 0 1
72119: PPUSH
72120: LD_VAR 0 2
72124: PPUSH
72125: LD_VAR 0 3
72129: PPUSH
72130: CALL_OW 297
72134: PUSH
72135: LD_VAR 0 5
72139: GREATER
72140: IFFALSE 72219
// begin ComMoveXY ( unit , x , y ) ;
72142: LD_VAR 0 1
72146: PPUSH
72147: LD_VAR 0 2
72151: PPUSH
72152: LD_VAR 0 3
72156: PPUSH
72157: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
72161: LD_INT 35
72163: PPUSH
72164: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
72168: LD_VAR 0 1
72172: PPUSH
72173: LD_VAR 0 2
72177: PPUSH
72178: LD_VAR 0 3
72182: PPUSH
72183: CALL 46954 0 3
72187: NOT
72188: IFFALSE 72192
// exit ;
72190: GO 72446
// until GetDistUnitXY ( unit , x , y ) < dist ;
72192: LD_VAR 0 1
72196: PPUSH
72197: LD_VAR 0 2
72201: PPUSH
72202: LD_VAR 0 3
72206: PPUSH
72207: CALL_OW 297
72211: PUSH
72212: LD_VAR 0 5
72216: LESS
72217: IFFALSE 72161
// end ; ComTurnXY ( unit , x , y ) ;
72219: LD_VAR 0 1
72223: PPUSH
72224: LD_VAR 0 2
72228: PPUSH
72229: LD_VAR 0 3
72233: PPUSH
72234: CALL_OW 118
// wait ( 5 ) ;
72238: LD_INT 5
72240: PPUSH
72241: CALL_OW 67
// _d := GetDir ( unit ) ;
72245: LD_ADDR_VAR 0 10
72249: PUSH
72250: LD_VAR 0 1
72254: PPUSH
72255: CALL_OW 254
72259: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
72260: LD_ADDR_VAR 0 8
72264: PUSH
72265: LD_VAR 0 1
72269: PPUSH
72270: CALL_OW 250
72274: PPUSH
72275: LD_VAR 0 10
72279: PPUSH
72280: LD_VAR 0 5
72284: PPUSH
72285: CALL_OW 272
72289: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
72290: LD_ADDR_VAR 0 9
72294: PUSH
72295: LD_VAR 0 1
72299: PPUSH
72300: CALL_OW 251
72304: PPUSH
72305: LD_VAR 0 10
72309: PPUSH
72310: LD_VAR 0 5
72314: PPUSH
72315: CALL_OW 273
72319: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72320: LD_VAR 0 8
72324: PPUSH
72325: LD_VAR 0 9
72329: PPUSH
72330: CALL_OW 488
72334: NOT
72335: IFFALSE 72339
// exit ;
72337: GO 72446
// ComAnimCustom ( unit , 1 ) ;
72339: LD_VAR 0 1
72343: PPUSH
72344: LD_INT 1
72346: PPUSH
72347: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
72351: LD_VAR 0 8
72355: PPUSH
72356: LD_VAR 0 9
72360: PPUSH
72361: LD_VAR 0 6
72365: PPUSH
72366: LD_VAR 0 7
72370: PPUSH
72371: CALL_OW 330
// repeat wait ( 1 ) ;
72375: LD_INT 1
72377: PPUSH
72378: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
72382: LD_VAR 0 1
72386: PPUSH
72387: CALL_OW 316
72391: PUSH
72392: LD_VAR 0 1
72396: PPUSH
72397: CALL_OW 314
72401: OR
72402: PUSH
72403: LD_VAR 0 1
72407: PPUSH
72408: CALL_OW 302
72412: NOT
72413: OR
72414: PUSH
72415: LD_VAR 0 1
72419: PPUSH
72420: CALL_OW 301
72424: OR
72425: IFFALSE 72375
// RemoveSeeing ( _x , _y , side ) ;
72427: LD_VAR 0 8
72431: PPUSH
72432: LD_VAR 0 9
72436: PPUSH
72437: LD_VAR 0 6
72441: PPUSH
72442: CALL_OW 331
// end ;
72446: LD_VAR 0 4
72450: RET
