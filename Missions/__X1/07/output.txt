// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 59772 0 0
// Init ;
   8: CALL 21 0 0
// PrepareArabian ;
  12: CALL 1207 0 0
// Action ;
  16: CALL 1948 0 0
// end ;
  20: END
// export debug , prefix , scoutActive ; function Init ; begin
  21: LD_INT 0
  23: PPUSH
// debug := true ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_INT 1
  31: ST_TO_ADDR
// prefix := 06_ ;
  32: LD_ADDR_EXP 2
  36: PUSH
  37: LD_STRING 06_
  39: ST_TO_ADDR
// scoutActive := 0 ;
  40: LD_ADDR_EXP 3
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// end ; end_of_file
  48: LD_VAR 0 1
  52: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
  53: LD_INT 0
  55: PPUSH
// uc_side := side ;
  56: LD_ADDR_OWVAR 20
  60: PUSH
  61: LD_VAR 0 1
  65: ST_TO_ADDR
// uc_nation := nation ;
  66: LD_ADDR_OWVAR 21
  70: PUSH
  71: LD_VAR 0 2
  75: ST_TO_ADDR
// vc_chassis := chassis ;
  76: LD_ADDR_OWVAR 37
  80: PUSH
  81: LD_VAR 0 3
  85: ST_TO_ADDR
// vc_engine := engine ;
  86: LD_ADDR_OWVAR 39
  90: PUSH
  91: LD_VAR 0 4
  95: ST_TO_ADDR
// vc_control := control ;
  96: LD_ADDR_OWVAR 38
 100: PUSH
 101: LD_VAR 0 5
 105: ST_TO_ADDR
// vc_weapon := weapon ;
 106: LD_ADDR_OWVAR 40
 110: PUSH
 111: LD_VAR 0 6
 115: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 116: LD_ADDR_OWVAR 41
 120: PUSH
 121: LD_VAR 0 7
 125: ST_TO_ADDR
// result := CreateVehicle ;
 126: LD_ADDR_VAR 0 8
 130: PUSH
 131: CALL_OW 45
 135: ST_TO_ADDR
// end ;
 136: LD_VAR 0 8
 140: RET
// export function SayX ( units , ident ) ; var i ; begin
 141: LD_INT 0
 143: PPUSH
 144: PPUSH
// result := false ;
 145: LD_ADDR_VAR 0 3
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// if not units then
 153: LD_VAR 0 1
 157: NOT
 158: IFFALSE 162
// exit ;
 160: GO 216
// for i in units do
 162: LD_ADDR_VAR 0 4
 166: PUSH
 167: LD_VAR 0 1
 171: PUSH
 172: FOR_IN
 173: IFFALSE 214
// if IsOk ( i ) then
 175: LD_VAR 0 4
 179: PPUSH
 180: CALL_OW 302
 184: IFFALSE 212
// begin Say ( i , ident ) ;
 186: LD_VAR 0 4
 190: PPUSH
 191: LD_VAR 0 2
 195: PPUSH
 196: CALL_OW 88
// result := i ;
 200: LD_ADDR_VAR 0 3
 204: PUSH
 205: LD_VAR 0 4
 209: ST_TO_ADDR
// break ;
 210: GO 214
// end ;
 212: GO 172
 214: POP
 215: POP
// end ;
 216: LD_VAR 0 3
 220: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 221: LD_INT 0
 223: PPUSH
 224: PPUSH
// InitUc ;
 225: CALL_OW 18
// InitHc ;
 229: CALL_OW 19
// uc_side := 0 ;
 233: LD_ADDR_OWVAR 20
 237: PUSH
 238: LD_INT 0
 240: ST_TO_ADDR
// uc_nation := 0 ;
 241: LD_ADDR_OWVAR 21
 245: PUSH
 246: LD_INT 0
 248: ST_TO_ADDR
// for i = 1 to amount do
 249: LD_ADDR_VAR 0 4
 253: PUSH
 254: DOUBLE
 255: LD_INT 1
 257: DEC
 258: ST_TO_ADDR
 259: LD_VAR 0 2
 263: PUSH
 264: FOR_TO
 265: IFFALSE 347
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 267: LD_ADDR_OWVAR 29
 271: PUSH
 272: LD_INT 9
 274: PPUSH
 275: LD_INT 12
 277: PPUSH
 278: CALL_OW 12
 282: PUSH
 283: LD_INT 9
 285: PPUSH
 286: LD_INT 12
 288: PPUSH
 289: CALL_OW 12
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 298: LD_ADDR_OWVAR 35
 302: PUSH
 303: LD_INT 1
 305: NEG
 306: PPUSH
 307: LD_INT 1
 309: PPUSH
 310: CALL_OW 12
 314: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 315: LD_INT 0
 317: PPUSH
 318: LD_INT 12
 320: PPUSH
 321: LD_INT 1
 323: PPUSH
 324: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 328: CALL_OW 44
 332: PPUSH
 333: LD_VAR 0 1
 337: PPUSH
 338: LD_INT 0
 340: PPUSH
 341: CALL_OW 49
// end ;
 345: GO 264
 347: POP
 348: POP
// InitHc ;
 349: CALL_OW 19
// end ;
 353: LD_VAR 0 3
 357: RET
// export function CreateNature ( apemanArea , forest , swamp ) ; var i ; begin
 358: LD_INT 0
 360: PPUSH
 361: PPUSH
// uc_side := 0 ;
 362: LD_ADDR_OWVAR 20
 366: PUSH
 367: LD_INT 0
 369: ST_TO_ADDR
// uc_nation := 0 ;
 370: LD_ADDR_OWVAR 21
 374: PUSH
 375: LD_INT 0
 377: ST_TO_ADDR
// SpawnApeman ( apemanArea , [ 6 , 5 , 4 ] [ Difficulty ] ) ;
 378: LD_VAR 0 1
 382: PPUSH
 383: LD_INT 6
 385: PUSH
 386: LD_INT 5
 388: PUSH
 389: LD_INT 4
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: LIST
 396: PUSH
 397: LD_OWVAR 67
 401: ARRAY
 402: PPUSH
 403: CALL 221 0 2
// for i = 1 to 2 do
 407: LD_ADDR_VAR 0 5
 411: PUSH
 412: DOUBLE
 413: LD_INT 1
 415: DEC
 416: ST_TO_ADDR
 417: LD_INT 2
 419: PUSH
 420: FOR_TO
 421: IFFALSE 460
// begin vc_chassis := class_mastodont ;
 423: LD_ADDR_OWVAR 37
 427: PUSH
 428: LD_EXP 103
 432: ST_TO_ADDR
// vc_control := control_rider ;
 433: LD_ADDR_OWVAR 38
 437: PUSH
 438: LD_INT 4
 440: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
 441: CALL_OW 45
 445: PPUSH
 446: LD_VAR 0 2
 450: PPUSH
 451: LD_INT 0
 453: PPUSH
 454: CALL 39162 0 3
// end ;
 458: GO 420
 460: POP
 461: POP
// for i := 1 to 4 do
 462: LD_ADDR_VAR 0 5
 466: PUSH
 467: DOUBLE
 468: LD_INT 1
 470: DEC
 471: ST_TO_ADDR
 472: LD_INT 4
 474: PUSH
 475: FOR_TO
 476: IFFALSE 515
// begin hc_class := class_horse ;
 478: LD_ADDR_OWVAR 28
 482: PUSH
 483: LD_EXP 104
 487: ST_TO_ADDR
// hc_gallery :=  ;
 488: LD_ADDR_OWVAR 33
 492: PUSH
 493: LD_STRING 
 495: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 496: CALL_OW 44
 500: PPUSH
 501: LD_VAR 0 2
 505: PPUSH
 506: LD_INT 0
 508: PPUSH
 509: CALL_OW 49
// end ;
 513: GO 475
 515: POP
 516: POP
// for i = 1 to 5 do
 517: LD_ADDR_VAR 0 5
 521: PUSH
 522: DOUBLE
 523: LD_INT 1
 525: DEC
 526: ST_TO_ADDR
 527: LD_INT 5
 529: PUSH
 530: FOR_TO
 531: IFFALSE 585
// begin hc_class = class_tiger ;
 533: LD_ADDR_OWVAR 28
 537: PUSH
 538: LD_INT 14
 540: ST_TO_ADDR
// hc_gallery =  ;
 541: LD_ADDR_OWVAR 33
 545: PUSH
 546: LD_STRING 
 548: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 549: LD_ADDR_OWVAR 35
 553: PUSH
 554: LD_INT 7
 556: NEG
 557: PPUSH
 558: LD_INT 7
 560: PPUSH
 561: CALL_OW 12
 565: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
 566: CALL_OW 44
 570: PPUSH
 571: LD_VAR 0 2
 575: PPUSH
 576: LD_INT 0
 578: PPUSH
 579: CALL 39162 0 3
// end ;
 583: GO 530
 585: POP
 586: POP
// for i := 1 to 4 do
 587: LD_ADDR_VAR 0 5
 591: PUSH
 592: DOUBLE
 593: LD_INT 1
 595: DEC
 596: ST_TO_ADDR
 597: LD_INT 4
 599: PUSH
 600: FOR_TO
 601: IFFALSE 638
// begin hc_class := class_phororhacos ;
 603: LD_ADDR_OWVAR 28
 607: PUSH
 608: LD_INT 18
 610: ST_TO_ADDR
// hc_gallery :=  ;
 611: LD_ADDR_OWVAR 33
 615: PUSH
 616: LD_STRING 
 618: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 619: CALL_OW 44
 623: PPUSH
 624: LD_VAR 0 2
 628: PPUSH
 629: LD_INT 0
 631: PPUSH
 632: CALL_OW 49
// end ;
 636: GO 600
 638: POP
 639: POP
// for i := 1 to 4 do
 640: LD_ADDR_VAR 0 5
 644: PUSH
 645: DOUBLE
 646: LD_INT 1
 648: DEC
 649: ST_TO_ADDR
 650: LD_INT 4
 652: PUSH
 653: FOR_TO
 654: IFFALSE 691
// begin hc_class := class_baggie ;
 656: LD_ADDR_OWVAR 28
 660: PUSH
 661: LD_INT 13
 663: ST_TO_ADDR
// hc_gallery :=  ;
 664: LD_ADDR_OWVAR 33
 668: PUSH
 669: LD_STRING 
 671: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 672: CALL_OW 44
 676: PPUSH
 677: LD_VAR 0 2
 681: PPUSH
 682: LD_INT 0
 684: PPUSH
 685: CALL_OW 49
// end ;
 689: GO 653
 691: POP
 692: POP
// for i := 1 to 7 do
 693: LD_ADDR_VAR 0 5
 697: PUSH
 698: DOUBLE
 699: LD_INT 1
 701: DEC
 702: ST_TO_ADDR
 703: LD_INT 7
 705: PUSH
 706: FOR_TO
 707: IFFALSE 744
// begin hc_class := class_frog ;
 709: LD_ADDR_OWVAR 28
 713: PUSH
 714: LD_INT 19
 716: ST_TO_ADDR
// hc_gallery :=  ;
 717: LD_ADDR_OWVAR 33
 721: PUSH
 722: LD_STRING 
 724: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 725: CALL_OW 44
 729: PPUSH
 730: LD_VAR 0 3
 734: PPUSH
 735: LD_INT 0
 737: PPUSH
 738: CALL_OW 49
// end ;
 742: GO 706
 744: POP
 745: POP
// end ;
 746: LD_VAR 0 4
 750: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 751: LD_INT 0
 753: PPUSH
 754: PPUSH
 755: PPUSH
// if not observer or not unit then
 756: LD_VAR 0 1
 760: NOT
 761: PUSH
 762: LD_VAR 0 2
 766: NOT
 767: OR
 768: IFFALSE 772
// exit ;
 770: GO 820
// if not See ( GetSide ( observer ) , unit ) then
 772: LD_VAR 0 1
 776: PPUSH
 777: CALL_OW 255
 781: PPUSH
 782: LD_VAR 0 2
 786: PPUSH
 787: CALL_OW 292
 791: NOT
 792: IFFALSE 796
// exit ;
 794: GO 820
// result := GetDistUnits ( observer , unit ) < 12 ;
 796: LD_ADDR_VAR 0 3
 800: PUSH
 801: LD_VAR 0 1
 805: PPUSH
 806: LD_VAR 0 2
 810: PPUSH
 811: CALL_OW 296
 815: PUSH
 816: LD_INT 12
 818: LESS
 819: ST_TO_ADDR
// end ;
 820: LD_VAR 0 3
 824: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 825: LD_INT 0
 827: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 828: LD_VAR 0 2
 832: PUSH
 833: LD_INT 1
 835: ARRAY
 836: PPUSH
 837: LD_VAR 0 2
 841: PUSH
 842: LD_INT 2
 844: ARRAY
 845: PPUSH
 846: CALL_OW 488
 850: PUSH
 851: LD_VAR 0 2
 855: PUSH
 856: LD_INT 1
 858: ARRAY
 859: PPUSH
 860: LD_VAR 0 2
 864: PUSH
 865: LD_INT 2
 867: ARRAY
 868: PPUSH
 869: CALL_OW 428
 873: PUSH
 874: LD_INT 0
 876: EQUAL
 877: AND
 878: IFFALSE 912
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 880: LD_VAR 0 1
 884: PPUSH
 885: LD_VAR 0 2
 889: PUSH
 890: LD_INT 1
 892: ARRAY
 893: PPUSH
 894: LD_VAR 0 2
 898: PUSH
 899: LD_INT 2
 901: ARRAY
 902: PPUSH
 903: LD_VAR 0 3
 907: PPUSH
 908: CALL_OW 48
// end ;
 912: LD_VAR 0 4
 916: RET
// export function ReverseArray ( array ) ; var i ; begin
 917: LD_INT 0
 919: PPUSH
 920: PPUSH
// if not array then
 921: LD_VAR 0 1
 925: NOT
 926: IFFALSE 930
// exit ;
 928: GO 988
// result := [ ] ;
 930: LD_ADDR_VAR 0 2
 934: PUSH
 935: EMPTY
 936: ST_TO_ADDR
// for i := 1 to array do
 937: LD_ADDR_VAR 0 3
 941: PUSH
 942: DOUBLE
 943: LD_INT 1
 945: DEC
 946: ST_TO_ADDR
 947: LD_VAR 0 1
 951: PUSH
 952: FOR_TO
 953: IFFALSE 986
// result := Insert ( result , 1 , array [ i ] ) ;
 955: LD_ADDR_VAR 0 2
 959: PUSH
 960: LD_VAR 0 2
 964: PPUSH
 965: LD_INT 1
 967: PPUSH
 968: LD_VAR 0 1
 972: PUSH
 973: LD_VAR 0 3
 977: ARRAY
 978: PPUSH
 979: CALL_OW 2
 983: ST_TO_ADDR
 984: GO 952
 986: POP
 987: POP
// end ;
 988: LD_VAR 0 2
 992: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
 993: LD_INT 0
 995: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
 996: LD_VAR 0 1
1000: PPUSH
1001: LD_VAR 0 2
1005: PPUSH
1006: LD_VAR 0 3
1010: PPUSH
1011: LD_VAR 0 4
1015: PPUSH
1016: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1020: LD_VAR 0 1
1024: PPUSH
1025: LD_VAR 0 2
1029: PPUSH
1030: LD_VAR 0 3
1034: PPUSH
1035: CALL_OW 331
// end ;
1039: LD_VAR 0 5
1043: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1044: LD_INT 0
1046: PPUSH
// if not units then
1047: LD_VAR 0 1
1051: NOT
1052: IFFALSE 1056
// exit ;
1054: GO 1139
// result := true ;
1056: LD_ADDR_VAR 0 4
1060: PUSH
1061: LD_INT 1
1063: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1064: LD_VAR 0 1
1068: PPUSH
1069: LD_INT 26
1071: PUSH
1072: LD_INT 1
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: PPUSH
1079: CALL_OW 72
1083: PUSH
1084: LD_INT 1
1086: ARRAY
1087: PPUSH
1088: LD_VAR 0 2
1092: PPUSH
1093: CALL_OW 88
1097: NOT
1098: IFFALSE 1139
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1100: LD_ADDR_VAR 0 4
1104: PUSH
1105: LD_VAR 0 1
1109: PPUSH
1110: LD_INT 26
1112: PUSH
1113: LD_INT 2
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: PPUSH
1120: CALL_OW 72
1124: PUSH
1125: LD_INT 1
1127: ARRAY
1128: PPUSH
1129: LD_VAR 0 3
1133: PPUSH
1134: CALL_OW 88
1138: ST_TO_ADDR
// end ;
1139: LD_VAR 0 4
1143: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1144: LD_INT 0
1146: PPUSH
1147: PPUSH
// if not group then
1148: LD_VAR 0 2
1152: NOT
1153: IFFALSE 1157
// exit ;
1155: GO 1202
// for i in group do
1157: LD_ADDR_VAR 0 4
1161: PUSH
1162: LD_VAR 0 2
1166: PUSH
1167: FOR_IN
1168: IFFALSE 1200
// if See ( side , i ) then
1170: LD_VAR 0 1
1174: PPUSH
1175: LD_VAR 0 4
1179: PPUSH
1180: CALL_OW 292
1184: IFFALSE 1198
// begin result := true ;
1186: LD_ADDR_VAR 0 3
1190: PUSH
1191: LD_INT 1
1193: ST_TO_ADDR
// exit ;
1194: POP
1195: POP
1196: GO 1202
// end ;
1198: GO 1167
1200: POP
1201: POP
// end ; end_of_file
1202: LD_VAR 0 3
1206: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeApes , heikeVehicles ; export function PrepareArabian ; var i , tmp ; begin
1207: LD_INT 0
1209: PPUSH
1210: PPUSH
1211: PPUSH
// uc_nation := 2 ;
1212: LD_ADDR_OWVAR 21
1216: PUSH
1217: LD_INT 2
1219: ST_TO_ADDR
// uc_side := 5 ;
1220: LD_ADDR_OWVAR 20
1224: PUSH
1225: LD_INT 5
1227: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1228: LD_ADDR_EXP 12
1232: PUSH
1233: LD_STRING Abdul
1235: PPUSH
1236: LD_INT 0
1238: PPUSH
1239: LD_STRING 
1241: PPUSH
1242: CALL 3511 0 3
1246: ST_TO_ADDR
// uc_side := 2 ;
1247: LD_ADDR_OWVAR 20
1251: PUSH
1252: LD_INT 2
1254: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1255: LD_ADDR_EXP 4
1259: PUSH
1260: LD_STRING Heike
1262: PPUSH
1263: LD_EXP 1
1267: NOT
1268: PPUSH
1269: LD_EXP 2
1273: PPUSH
1274: CALL 3511 0 3
1278: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1279: LD_ADDR_EXP 7
1283: PUSH
1284: LD_STRING Ibrahim
1286: PPUSH
1287: LD_EXP 1
1291: NOT
1292: PPUSH
1293: LD_EXP 2
1297: PPUSH
1298: CALL 3511 0 3
1302: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1303: LD_ADDR_EXP 5
1307: PUSH
1308: LD_STRING Givi
1310: PPUSH
1311: LD_EXP 1
1315: NOT
1316: PPUSH
1317: LD_EXP 2
1321: PPUSH
1322: CALL 3511 0 3
1326: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1327: LD_ADDR_EXP 8
1331: PUSH
1332: LD_STRING Kamil
1334: PPUSH
1335: LD_EXP 1
1339: NOT
1340: PPUSH
1341: LD_EXP 2
1345: PPUSH
1346: CALL 3511 0 3
1350: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1351: LD_ADDR_EXP 9
1355: PUSH
1356: LD_STRING Kaia
1358: PPUSH
1359: LD_EXP 1
1363: NOT
1364: PPUSH
1365: LD_EXP 2
1369: PPUSH
1370: CALL 3511 0 3
1374: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1375: LD_ADDR_EXP 10
1379: PUSH
1380: LD_STRING Sophia
1382: PPUSH
1383: LD_EXP 1
1387: NOT
1388: PPUSH
1389: LD_EXP 2
1393: PPUSH
1394: CALL 3511 0 3
1398: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1399: LD_ADDR_EXP 11
1403: PUSH
1404: LD_STRING Markov
1406: PPUSH
1407: LD_EXP 1
1411: NOT
1412: PPUSH
1413: LD_EXP 2
1417: PPUSH
1418: CALL 3511 0 3
1422: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1423: LD_ADDR_EXP 15
1427: PUSH
1428: LD_STRING Aviradze
1430: PPUSH
1431: LD_EXP 1
1435: NOT
1436: PPUSH
1437: LD_EXP 2
1441: PPUSH
1442: CALL 3511 0 3
1446: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1447: LD_ADDR_EXP 14
1451: PUSH
1452: LD_STRING Kurt
1454: PPUSH
1455: LD_EXP 1
1459: NOT
1460: PPUSH
1461: LD_EXP 2
1465: PPUSH
1466: CALL 3511 0 3
1470: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1471: LD_ADDR_EXP 6
1475: PUSH
1476: LD_STRING Mike
1478: PPUSH
1479: LD_EXP 1
1483: NOT
1484: PPUSH
1485: LD_EXP 2
1489: PPUSH
1490: CALL 3511 0 3
1494: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1495: LD_ADDR_EXP 13
1499: PUSH
1500: LD_STRING Olaf
1502: PPUSH
1503: LD_INT 0
1505: PPUSH
1506: LD_STRING 
1508: PPUSH
1509: CALL 3511 0 3
1513: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 06_others ) ;
1514: LD_ADDR_EXP 16
1518: PUSH
1519: LD_STRING 06_others
1521: PPUSH
1522: CALL_OW 31
1526: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 06_apes ) ;
1527: LD_ADDR_EXP 17
1531: PUSH
1532: LD_STRING 06_apes
1534: PPUSH
1535: CALL_OW 31
1539: ST_TO_ADDR
// if debug then
1540: LD_EXP 1
1544: IFFALSE 1819
// begin tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 750 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 900 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 100 , 0 ] ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 50 , 50 ] ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_mortar , 2 , 1000 , 0 ] ] ;
1546: LD_ADDR_VAR 0 3
1550: PUSH
1551: LD_INT 14
1553: PUSH
1554: LD_INT 1
1556: PUSH
1557: LD_INT 2
1559: PUSH
1560: LD_INT 25
1562: PUSH
1563: LD_INT 2
1565: PUSH
1566: LD_INT 1000
1568: PUSH
1569: LD_INT 0
1571: PUSH
1572: EMPTY
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: LIST
1579: LIST
1580: PUSH
1581: LD_INT 14
1583: PUSH
1584: LD_INT 1
1586: PUSH
1587: LD_INT 1
1589: PUSH
1590: LD_INT 31
1592: PUSH
1593: LD_INT 2
1595: PUSH
1596: LD_INT 1000
1598: PUSH
1599: LD_INT 0
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: PUSH
1611: LD_INT 14
1613: PUSH
1614: LD_INT 1
1616: PUSH
1617: LD_INT 1
1619: PUSH
1620: LD_INT 27
1622: PUSH
1623: LD_INT 2
1625: PUSH
1626: LD_INT 750
1628: PUSH
1629: LD_INT 0
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: PUSH
1641: LD_INT 14
1643: PUSH
1644: LD_INT 1
1646: PUSH
1647: LD_INT 1
1649: PUSH
1650: LD_INT 27
1652: PUSH
1653: LD_INT 2
1655: PUSH
1656: LD_INT 900
1658: PUSH
1659: LD_INT 0
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: PUSH
1671: LD_INT 14
1673: PUSH
1674: LD_INT 1
1676: PUSH
1677: LD_INT 1
1679: PUSH
1680: LD_INT 32
1682: PUSH
1683: LD_INT 2
1685: PUSH
1686: LD_INT 1000
1688: PUSH
1689: LD_INT 100
1691: PUSH
1692: LD_INT 0
1694: PUSH
1695: EMPTY
1696: LIST
1697: LIST
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: PUSH
1708: LD_INT 14
1710: PUSH
1711: LD_INT 1
1713: PUSH
1714: LD_INT 1
1716: PUSH
1717: LD_INT 32
1719: PUSH
1720: LD_INT 2
1722: PUSH
1723: LD_INT 1000
1725: PUSH
1726: LD_INT 50
1728: PUSH
1729: LD_INT 50
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_INT 14
1747: PUSH
1748: LD_INT 1
1750: PUSH
1751: LD_INT 2
1753: PUSH
1754: LD_INT 27
1756: PUSH
1757: LD_INT 2
1759: PUSH
1760: LD_INT 1000
1762: PUSH
1763: LD_INT 0
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: PUSH
1775: LD_INT 14
1777: PUSH
1778: LD_INT 1
1780: PUSH
1781: LD_INT 1
1783: PUSH
1784: LD_EXP 91
1788: PUSH
1789: LD_INT 2
1791: PUSH
1792: LD_INT 1000
1794: PUSH
1795: LD_INT 0
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: ST_TO_ADDR
// end else
1817: GO 1826
// tmp := [ ] ;
1819: LD_ADDR_VAR 0 3
1823: PUSH
1824: EMPTY
1825: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 06_Vehicles , tmp ) ;
1826: LD_ADDR_EXP 18
1830: PUSH
1831: LD_STRING 06_Vehicles
1833: PPUSH
1834: LD_VAR 0 3
1838: PPUSH
1839: CALL_OW 30
1843: ST_TO_ADDR
// if heikeVehicles then
1844: LD_EXP 18
1848: IFFALSE 1943
// begin for i := heikeVehicles downto 1 do
1850: LD_ADDR_VAR 0 2
1854: PUSH
1855: DOUBLE
1856: LD_EXP 18
1860: INC
1861: ST_TO_ADDR
1862: LD_INT 1
1864: PUSH
1865: FOR_DOWNTO
1866: IFFALSE 1941
// begin if heikeVehicles [ i ] [ 3 ] = control_remote then
1868: LD_EXP 18
1872: PUSH
1873: LD_VAR 0 2
1877: ARRAY
1878: PUSH
1879: LD_INT 3
1881: ARRAY
1882: PUSH
1883: LD_INT 2
1885: EQUAL
1886: IFFALSE 1939
// begin heikeVehicles := Insert ( heikeVehicles , heikeVehicles , heikeVehicles [ i ] ) ;
1888: LD_ADDR_EXP 18
1892: PUSH
1893: LD_EXP 18
1897: PPUSH
1898: LD_EXP 18
1902: PPUSH
1903: LD_EXP 18
1907: PUSH
1908: LD_VAR 0 2
1912: ARRAY
1913: PPUSH
1914: CALL_OW 2
1918: ST_TO_ADDR
// heikeVehicles := Delete ( heikeVehicles , i ) ;
1919: LD_ADDR_EXP 18
1923: PUSH
1924: LD_EXP 18
1928: PPUSH
1929: LD_VAR 0 2
1933: PPUSH
1934: CALL_OW 3
1938: ST_TO_ADDR
// end ; end ;
1939: GO 1865
1941: POP
1942: POP
// end ; end ; end_of_file end_of_file end_of_file
1943: LD_VAR 0 1
1947: RET
// export function Action ; var i , j , veh , tmp ; begin
1948: LD_INT 0
1950: PPUSH
1951: PPUSH
1952: PPUSH
1953: PPUSH
1954: PPUSH
// Video ( true ) ;
1955: LD_INT 1
1957: PPUSH
1958: CALL 40220 0 1
// music_nat := 1 ;
1962: LD_ADDR_OWVAR 71
1966: PUSH
1967: LD_INT 1
1969: ST_TO_ADDR
// music_class := music_recon ;
1970: LD_ADDR_OWVAR 72
1974: PUSH
1975: LD_INT 3
1977: ST_TO_ADDR
// PlaceSeeing ( 184 , 142 , 2 , - 10 ) ;
1978: LD_INT 184
1980: PPUSH
1981: LD_INT 142
1983: PPUSH
1984: LD_INT 2
1986: PPUSH
1987: LD_INT 10
1989: NEG
1990: PPUSH
1991: CALL_OW 330
// RemoveSeeing ( 184 , 142 , 2 ) ;
1995: LD_INT 184
1997: PPUSH
1998: LD_INT 142
2000: PPUSH
2001: LD_INT 2
2003: PPUSH
2004: CALL_OW 331
// PlaceSeeing ( 204 , 151 , 2 , - 10 ) ;
2008: LD_INT 204
2010: PPUSH
2011: LD_INT 151
2013: PPUSH
2014: LD_INT 2
2016: PPUSH
2017: LD_INT 10
2019: NEG
2020: PPUSH
2021: CALL_OW 330
// RemoveSeeing ( 204 , 151 , 2 ) ;
2025: LD_INT 204
2027: PPUSH
2028: LD_INT 151
2030: PPUSH
2031: LD_INT 2
2033: PPUSH
2034: CALL_OW 331
// CenterNowOnXY ( 184 , 142 ) ;
2038: LD_INT 184
2040: PPUSH
2041: LD_INT 142
2043: PPUSH
2044: CALL_OW 86
// wait ( 0 0$2 ) ;
2048: LD_INT 70
2050: PPUSH
2051: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
2055: LD_ADDR_VAR 0 5
2059: PUSH
2060: LD_EXP 4
2064: PUSH
2065: LD_EXP 5
2069: PUSH
2070: LD_EXP 6
2074: PUSH
2075: LD_EXP 7
2079: PUSH
2080: LD_EXP 8
2084: PUSH
2085: LD_EXP 9
2089: PUSH
2090: LD_EXP 10
2094: PUSH
2095: LD_EXP 11
2099: PUSH
2100: LD_EXP 13
2104: PUSH
2105: LD_EXP 14
2109: PUSH
2110: LD_EXP 15
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: PUSH
2128: LD_EXP 16
2132: UNION
2133: ST_TO_ADDR
// if heikeVehicles then
2134: LD_EXP 18
2138: IFFALSE 2617
// begin tmp := SortByClass ( tmp , class_mechanic ) ;
2140: LD_ADDR_VAR 0 5
2144: PUSH
2145: LD_VAR 0 5
2149: PPUSH
2150: LD_INT 3
2152: PPUSH
2153: CALL 42265 0 2
2157: ST_TO_ADDR
// for i in heikeVehicles do
2158: LD_ADDR_VAR 0 2
2162: PUSH
2163: LD_EXP 18
2167: PUSH
2168: FOR_IN
2169: IFFALSE 2615
// begin if not tmp then
2171: LD_VAR 0 5
2175: NOT
2176: IFFALSE 2180
// break ;
2178: GO 2615
// uc_side := 2 ;
2180: LD_ADDR_OWVAR 20
2184: PUSH
2185: LD_INT 2
2187: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2188: LD_ADDR_OWVAR 21
2192: PUSH
2193: LD_VAR 0 2
2197: PUSH
2198: LD_INT 5
2200: ARRAY
2201: ST_TO_ADDR
// vc_chassis := i [ 1 ] ;
2202: LD_ADDR_OWVAR 37
2206: PUSH
2207: LD_VAR 0 2
2211: PUSH
2212: LD_INT 1
2214: ARRAY
2215: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
2216: LD_ADDR_OWVAR 39
2220: PUSH
2221: LD_VAR 0 2
2225: PUSH
2226: LD_INT 2
2228: ARRAY
2229: ST_TO_ADDR
// vc_control := i [ 3 ] ;
2230: LD_ADDR_OWVAR 38
2234: PUSH
2235: LD_VAR 0 2
2239: PUSH
2240: LD_INT 3
2242: ARRAY
2243: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
2244: LD_ADDR_OWVAR 40
2248: PUSH
2249: LD_VAR 0 2
2253: PUSH
2254: LD_INT 4
2256: ARRAY
2257: ST_TO_ADDR
// veh := CreateVehicle ;
2258: LD_ADDR_VAR 0 4
2262: PUSH
2263: CALL_OW 45
2267: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2268: LD_VAR 0 4
2272: PPUSH
2273: LD_INT 4
2275: PPUSH
2276: CALL_OW 233
// if i [ 3 ] = control_manual then
2280: LD_VAR 0 2
2284: PUSH
2285: LD_INT 3
2287: ARRAY
2288: PUSH
2289: LD_INT 1
2291: EQUAL
2292: IFFALSE 2377
// begin PlaceUnitArea ( veh , startArea , false ) ;
2294: LD_VAR 0 4
2298: PPUSH
2299: LD_INT 1
2301: PPUSH
2302: LD_INT 0
2304: PPUSH
2305: CALL_OW 49
// if i [ 4 ] = ar_control_tower then
2309: LD_VAR 0 2
2313: PUSH
2314: LD_INT 4
2316: ARRAY
2317: PUSH
2318: LD_INT 31
2320: EQUAL
2321: IFFALSE 2339
// SetClass ( tmp [ 1 ] , class_mechanic ) ;
2323: LD_VAR 0 5
2327: PUSH
2328: LD_INT 1
2330: ARRAY
2331: PPUSH
2332: LD_INT 3
2334: PPUSH
2335: CALL_OW 336
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
2339: LD_VAR 0 5
2343: PUSH
2344: LD_INT 1
2346: ARRAY
2347: PPUSH
2348: LD_VAR 0 4
2352: PPUSH
2353: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
2357: LD_ADDR_VAR 0 5
2361: PUSH
2362: LD_VAR 0 5
2366: PPUSH
2367: LD_INT 1
2369: PPUSH
2370: CALL_OW 3
2374: ST_TO_ADDR
// end else
2375: GO 2438
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
2377: LD_INT 22
2379: PUSH
2380: LD_INT 2
2382: PUSH
2383: EMPTY
2384: LIST
2385: LIST
2386: PUSH
2387: LD_INT 34
2389: PUSH
2390: LD_INT 31
2392: PUSH
2393: EMPTY
2394: LIST
2395: LIST
2396: PUSH
2397: EMPTY
2398: LIST
2399: LIST
2400: PPUSH
2401: CALL_OW 69
2405: IFFALSE 2438
// begin PlaceUnitArea ( veh , startArea , false ) ;
2407: LD_VAR 0 4
2411: PPUSH
2412: LD_INT 1
2414: PPUSH
2415: LD_INT 0
2417: PPUSH
2418: CALL_OW 49
// Connect ( veh ) ;
2422: LD_VAR 0 4
2426: PPUSH
2427: CALL 11468 0 1
// wait ( 0 0$2 ) ;
2431: LD_INT 70
2433: PPUSH
2434: CALL_OW 67
// end ; SetLives ( veh , i [ 6 ] ) ;
2438: LD_VAR 0 4
2442: PPUSH
2443: LD_VAR 0 2
2447: PUSH
2448: LD_INT 6
2450: ARRAY
2451: PPUSH
2452: CALL_OW 234
// SetFuel ( veh , 20 ) ;
2456: LD_VAR 0 4
2460: PPUSH
2461: LD_INT 20
2463: PPUSH
2464: CALL_OW 240
// if i [ 7 ] and GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay ] then
2468: LD_VAR 0 2
2472: PUSH
2473: LD_INT 7
2475: ARRAY
2476: PUSH
2477: LD_VAR 0 4
2481: PPUSH
2482: CALL_OW 264
2486: PUSH
2487: LD_INT 51
2489: PUSH
2490: LD_INT 32
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: IN
2497: AND
2498: IFFALSE 2549
// begin for j := 1 to 2 do
2500: LD_ADDR_VAR 0 3
2504: PUSH
2505: DOUBLE
2506: LD_INT 1
2508: DEC
2509: ST_TO_ADDR
2510: LD_INT 2
2512: PUSH
2513: FOR_TO
2514: IFFALSE 2547
// AddCargo ( veh , j , i [ 7 ] [ j ] ) ;
2516: LD_VAR 0 4
2520: PPUSH
2521: LD_VAR 0 3
2525: PPUSH
2526: LD_VAR 0 2
2530: PUSH
2531: LD_INT 7
2533: ARRAY
2534: PUSH
2535: LD_VAR 0 3
2539: ARRAY
2540: PPUSH
2541: CALL_OW 291
2545: GO 2513
2547: POP
2548: POP
// end ; ComMoveXY ( veh , 185 , 144 ) ;
2549: LD_VAR 0 4
2553: PPUSH
2554: LD_INT 185
2556: PPUSH
2557: LD_INT 144
2559: PPUSH
2560: CALL_OW 111
// AddComWait ( veh , 0 0$2 ) ;
2564: LD_VAR 0 4
2568: PPUSH
2569: LD_INT 70
2571: PPUSH
2572: CALL_OW 202
// AddComMoveXY ( veh , 179 , 129 ) ;
2576: LD_VAR 0 4
2580: PPUSH
2581: LD_INT 179
2583: PPUSH
2584: LD_INT 129
2586: PPUSH
2587: CALL_OW 171
// AddComMoveXY ( veh , 170 , 103 ) ;
2591: LD_VAR 0 4
2595: PPUSH
2596: LD_INT 170
2598: PPUSH
2599: LD_INT 103
2601: PPUSH
2602: CALL_OW 171
// wait ( 0 0$2 ) ;
2606: LD_INT 70
2608: PPUSH
2609: CALL_OW 67
// end ;
2613: GO 2168
2615: POP
2616: POP
// end ; if tmp then
2617: LD_VAR 0 5
2621: IFFALSE 2719
// begin for i in tmp do
2623: LD_ADDR_VAR 0 2
2627: PUSH
2628: LD_VAR 0 5
2632: PUSH
2633: FOR_IN
2634: IFFALSE 2717
// begin SetDir ( i , 4 ) ;
2636: LD_VAR 0 2
2640: PPUSH
2641: LD_INT 4
2643: PPUSH
2644: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
2648: LD_VAR 0 2
2652: PPUSH
2653: LD_INT 1
2655: PPUSH
2656: LD_INT 0
2658: PPUSH
2659: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
2663: LD_VAR 0 2
2667: PPUSH
2668: LD_INT 185
2670: PPUSH
2671: LD_INT 144
2673: PPUSH
2674: CALL_OW 111
// AddComMoveXY ( i , 179 , 129 ) ;
2678: LD_VAR 0 2
2682: PPUSH
2683: LD_INT 179
2685: PPUSH
2686: LD_INT 129
2688: PPUSH
2689: CALL_OW 171
// AddComMoveXY ( i , 170 , 103 ) ;
2693: LD_VAR 0 2
2697: PPUSH
2698: LD_INT 170
2700: PPUSH
2701: LD_INT 103
2703: PPUSH
2704: CALL_OW 171
// wait ( 0 0$2 ) ;
2708: LD_INT 70
2710: PPUSH
2711: CALL_OW 67
// end ;
2715: GO 2633
2717: POP
2718: POP
// end ; AddComMoveXY ( Heike , 163 , 89 ) ;
2719: LD_EXP 4
2723: PPUSH
2724: LD_INT 163
2726: PPUSH
2727: LD_INT 89
2729: PPUSH
2730: CALL_OW 171
// wait ( 0 0$2 ) ;
2734: LD_INT 70
2736: PPUSH
2737: CALL_OW 67
// CenterOnXY ( 175 , 117 ) ;
2741: LD_INT 175
2743: PPUSH
2744: LD_INT 117
2746: PPUSH
2747: CALL_OW 84
// CenterOnUnits ( Heike ) ;
2751: LD_EXP 4
2755: PPUSH
2756: CALL_OW 85
// Say ( Heike , DH-Intro-1 ) ;
2760: LD_EXP 4
2764: PPUSH
2765: LD_STRING DH-Intro-1
2767: PPUSH
2768: CALL_OW 88
// if Markov then
2772: LD_EXP 11
2776: IFFALSE 3343
// begin Say ( Markov , DMar-Intro-2 ) ;
2778: LD_EXP 11
2782: PPUSH
2783: LD_STRING DMar-Intro-2
2785: PPUSH
2786: CALL_OW 88
// Say ( Markov , DMar-Intro-3 ) ;
2790: LD_EXP 11
2794: PPUSH
2795: LD_STRING DMar-Intro-3
2797: PPUSH
2798: CALL_OW 88
// wait ( 0 0$1 ) ;
2802: LD_INT 35
2804: PPUSH
2805: CALL_OW 67
// CenterOnUnits ( Heike ) ;
2809: LD_EXP 4
2813: PPUSH
2814: CALL_OW 85
// if Kurt then
2818: LD_EXP 14
2822: IFFALSE 2874
// begin if IsInUnit ( Kurt ) then
2824: LD_EXP 14
2828: PPUSH
2829: CALL_OW 310
2833: IFFALSE 2844
// ComExit ( Kurt ) ;
2835: LD_EXP 14
2839: PPUSH
2840: CALL 40636 0 1
// AddComMoveXY ( Kurt , 130 , 56 ) ;
2844: LD_EXP 14
2848: PPUSH
2849: LD_INT 130
2851: PPUSH
2852: LD_INT 56
2854: PPUSH
2855: CALL_OW 171
// AddComTurnXY ( Kurt , 129 , 56 ) ;
2859: LD_EXP 14
2863: PPUSH
2864: LD_INT 129
2866: PPUSH
2867: LD_INT 56
2869: PPUSH
2870: CALL_OW 178
// end ; if Kaia then
2874: LD_EXP 9
2878: IFFALSE 3058
// begin Say ( Kaia , DK-Intro-4 ) ;
2880: LD_EXP 9
2884: PPUSH
2885: LD_STRING DK-Intro-4
2887: PPUSH
2888: CALL_OW 88
// Say ( Markov , DMar-Intro-5 ) ;
2892: LD_EXP 11
2896: PPUSH
2897: LD_STRING DMar-Intro-5
2899: PPUSH
2900: CALL_OW 88
// Say ( Markov , DMar-Intro-6 ) ;
2904: LD_EXP 11
2908: PPUSH
2909: LD_STRING DMar-Intro-6
2911: PPUSH
2912: CALL_OW 88
// Say ( Olaf , DO-Intro-7 ) ;
2916: LD_EXP 13
2920: PPUSH
2921: LD_STRING DO-Intro-7
2923: PPUSH
2924: CALL_OW 88
// CenterOnXY ( 160 , 85 ) ;
2928: LD_INT 160
2930: PPUSH
2931: LD_INT 85
2933: PPUSH
2934: CALL_OW 84
// Say ( Markov , DMar-Intro-8 ) ;
2938: LD_EXP 11
2942: PPUSH
2943: LD_STRING DMar-Intro-8
2945: PPUSH
2946: CALL_OW 88
// Say ( Markov , DMar-Intro-9 ) ;
2950: LD_EXP 11
2954: PPUSH
2955: LD_STRING DMar-Intro-9
2957: PPUSH
2958: CALL_OW 88
// Say ( Markov , DMar-Intro-10 ) ;
2962: LD_EXP 11
2966: PPUSH
2967: LD_STRING DMar-Intro-10
2969: PPUSH
2970: CALL_OW 88
// Say ( Markov , DMar-Intro-11 ) ;
2974: LD_EXP 11
2978: PPUSH
2979: LD_STRING DMar-Intro-11
2981: PPUSH
2982: CALL_OW 88
// Say ( Givi , DG-Intro-12 ) ;
2986: LD_EXP 5
2990: PPUSH
2991: LD_STRING DG-Intro-12
2993: PPUSH
2994: CALL_OW 88
// Say ( Givi , DG-Intro-13 ) ;
2998: LD_EXP 5
3002: PPUSH
3003: LD_STRING DG-Intro-13
3005: PPUSH
3006: CALL_OW 88
// Say ( Givi , DG-Intro-14 ) ;
3010: LD_EXP 5
3014: PPUSH
3015: LD_STRING DG-Intro-14
3017: PPUSH
3018: CALL_OW 88
// Say ( Givi , DG-Intro-15 ) ;
3022: LD_EXP 5
3026: PPUSH
3027: LD_STRING DG-Intro-15
3029: PPUSH
3030: CALL_OW 88
// Say ( Heike , DH-Intro-16 ) ;
3034: LD_EXP 4
3038: PPUSH
3039: LD_STRING DH-Intro-16
3041: PPUSH
3042: CALL_OW 88
// Say ( Markov , DMar-Intro-17 ) ;
3046: LD_EXP 11
3050: PPUSH
3051: LD_STRING DMar-Intro-17
3053: PPUSH
3054: CALL_OW 88
// end ; if Kurt and Mike then
3058: LD_EXP 14
3062: PUSH
3063: LD_EXP 6
3067: AND
3068: IFFALSE 3343
// begin CenterNowOnUnits ( Kurt ) ;
3070: LD_EXP 14
3074: PPUSH
3075: CALL_OW 87
// ComTurnUnit ( Kurt , Heike ) ;
3079: LD_EXP 14
3083: PPUSH
3084: LD_EXP 4
3088: PPUSH
3089: CALL_OW 119
// Say ( Kurt , DKs-Intro-18 ) ;
3093: LD_EXP 14
3097: PPUSH
3098: LD_STRING DKs-Intro-18
3100: PPUSH
3101: CALL_OW 88
// Say ( Kurt , DKs-Intro-19 ) ;
3105: LD_EXP 14
3109: PPUSH
3110: LD_STRING DKs-Intro-19
3112: PPUSH
3113: CALL_OW 88
// CenterNowOnUnits ( Mike ) ;
3117: LD_EXP 6
3121: PPUSH
3122: CALL_OW 87
// if IsInUnit ( Mike ) then
3126: LD_EXP 6
3130: PPUSH
3131: CALL_OW 310
3135: IFFALSE 3146
// ComExit ( Mike ) ;
3137: LD_EXP 6
3141: PPUSH
3142: CALL 40636 0 1
// AddComMoveXY ( Mike , 129 , 53 ) ;
3146: LD_EXP 6
3150: PPUSH
3151: LD_INT 129
3153: PPUSH
3154: LD_INT 53
3156: PPUSH
3157: CALL_OW 171
// AddComHold ( Mike ) ;
3161: LD_EXP 6
3165: PPUSH
3166: CALL_OW 200
// wait ( 0 0$2 ) ;
3170: LD_INT 70
3172: PPUSH
3173: CALL_OW 67
// Say ( Mike , DM-Intro-20 ) ;
3177: LD_EXP 6
3181: PPUSH
3182: LD_STRING DM-Intro-20
3184: PPUSH
3185: CALL_OW 88
// scoutActive := Query ( Scout ) ;
3189: LD_ADDR_EXP 3
3193: PUSH
3194: LD_STRING Scout
3196: PPUSH
3197: CALL_OW 97
3201: ST_TO_ADDR
// if scoutActive = 1 then
3202: LD_EXP 3
3206: PUSH
3207: LD_INT 1
3209: EQUAL
3210: IFFALSE 3307
// begin CenterNowOnUnits ( Kurt ) ;
3212: LD_EXP 14
3216: PPUSH
3217: CALL_OW 87
// Say ( Heike , DH-Intro-21 ) ;
3221: LD_EXP 4
3225: PPUSH
3226: LD_STRING DH-Intro-21
3228: PPUSH
3229: CALL_OW 88
// Say ( Mike , DM-Intro-22 ) ;
3233: LD_EXP 6
3237: PPUSH
3238: LD_STRING DM-Intro-22
3240: PPUSH
3241: CALL_OW 88
// Say ( Kurt , DKs-Intro-23 ) ;
3245: LD_EXP 14
3249: PPUSH
3250: LD_STRING DKs-Intro-23
3252: PPUSH
3253: CALL_OW 88
// SetSide ( Kurt , 5 ) ;
3257: LD_EXP 14
3261: PPUSH
3262: LD_INT 5
3264: PPUSH
3265: CALL_OW 235
// SetSide ( Mike , 5 ) ;
3269: LD_EXP 6
3273: PPUSH
3274: LD_INT 5
3276: PPUSH
3277: CALL_OW 235
// ComMoveXY ( [ Kurt , Mike ] , 104 , 66 ) ;
3281: LD_EXP 14
3285: PUSH
3286: LD_EXP 6
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PPUSH
3295: LD_INT 104
3297: PPUSH
3298: LD_INT 66
3300: PPUSH
3301: CALL_OW 111
// end else
3305: GO 3343
// begin Say ( Heike , DH-Intro-a-21 ) ;
3307: LD_EXP 4
3311: PPUSH
3312: LD_STRING DH-Intro-a-21
3314: PPUSH
3315: CALL_OW 88
// Say ( Mike , DM-Intro-a-22 ) ;
3319: LD_EXP 6
3323: PPUSH
3324: LD_STRING DM-Intro-a-22
3326: PPUSH
3327: CALL_OW 88
// Say ( Kurt , DKs-Intro-a-23 ) ;
3331: LD_EXP 14
3335: PPUSH
3336: LD_STRING DKs-Intro-a-23
3338: PPUSH
3339: CALL_OW 88
// end ; end ; end ; Video ( false ) ;
3343: LD_INT 0
3345: PPUSH
3346: CALL 40220 0 1
// music_nat := music_auto ;
3350: LD_ADDR_OWVAR 71
3354: PUSH
3355: LD_INT 0
3357: ST_TO_ADDR
// music_class := music_auto ;
3358: LD_ADDR_OWVAR 72
3362: PUSH
3363: LD_INT 0
3365: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
3366: LD_STRING M1
3368: PPUSH
3369: CALL_OW 337
// wait ( 0 0$3 ) ;
3373: LD_INT 105
3375: PPUSH
3376: CALL_OW 67
// Say ( Heike , DH-Base-1 ) ;
3380: LD_EXP 4
3384: PPUSH
3385: LD_STRING DH-Base-1
3387: PPUSH
3388: CALL_OW 88
// if Kaia then
3392: LD_EXP 9
3396: IFFALSE 3506
// begin Say ( Kaia , DK-Base-2 ) ;
3398: LD_EXP 9
3402: PPUSH
3403: LD_STRING DK-Base-2
3405: PPUSH
3406: CALL_OW 88
// Say ( Heike , DH-Base-3 ) ;
3410: LD_EXP 4
3414: PPUSH
3415: LD_STRING DH-Base-3
3417: PPUSH
3418: CALL_OW 88
// if Aviradze then
3422: LD_EXP 15
3426: IFFALSE 3506
// begin Say ( Aviradze , DA-Base-4 ) ;
3428: LD_EXP 15
3432: PPUSH
3433: LD_STRING DA-Base-4
3435: PPUSH
3436: CALL_OW 88
// Say ( Kaia , DK-Base-5 ) ;
3440: LD_EXP 9
3444: PPUSH
3445: LD_STRING DK-Base-5
3447: PPUSH
3448: CALL_OW 88
// if Markov then
3452: LD_EXP 11
3456: IFFALSE 3506
// begin Say ( Markov , DMar-Base-6 ) ;
3458: LD_EXP 11
3462: PPUSH
3463: LD_STRING DMar-Base-6
3465: PPUSH
3466: CALL_OW 88
// Say ( Kaia , DK-Base-7 ) ;
3470: LD_EXP 9
3474: PPUSH
3475: LD_STRING DK-Base-7
3477: PPUSH
3478: CALL_OW 88
// Say ( Markov , DMar-Base-8 ) ;
3482: LD_EXP 11
3486: PPUSH
3487: LD_STRING DMar-Base-8
3489: PPUSH
3490: CALL_OW 88
// Say ( Markov , DMar-Base-9 ) ;
3494: LD_EXP 11
3498: PPUSH
3499: LD_STRING DMar-Base-9
3501: PPUSH
3502: CALL_OW 88
// end ; end ; end ; end ; end_of_file
3506: LD_VAR 0 1
3510: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3511: LD_INT 0
3513: PPUSH
3514: PPUSH
// if exist_mode then
3515: LD_VAR 0 2
3519: IFFALSE 3544
// unit := CreateCharacter ( prefix & ident ) else
3521: LD_ADDR_VAR 0 5
3525: PUSH
3526: LD_VAR 0 3
3530: PUSH
3531: LD_VAR 0 1
3535: STR
3536: PPUSH
3537: CALL_OW 34
3541: ST_TO_ADDR
3542: GO 3559
// unit := NewCharacter ( ident ) ;
3544: LD_ADDR_VAR 0 5
3548: PUSH
3549: LD_VAR 0 1
3553: PPUSH
3554: CALL_OW 25
3558: ST_TO_ADDR
// result := unit ;
3559: LD_ADDR_VAR 0 4
3563: PUSH
3564: LD_VAR 0 5
3568: ST_TO_ADDR
// end ;
3569: LD_VAR 0 4
3573: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3574: LD_INT 0
3576: PPUSH
3577: PPUSH
// if not side or not nation then
3578: LD_VAR 0 1
3582: NOT
3583: PUSH
3584: LD_VAR 0 2
3588: NOT
3589: OR
3590: IFFALSE 3594
// exit ;
3592: GO 4362
// case nation of nation_american :
3594: LD_VAR 0 2
3598: PUSH
3599: LD_INT 1
3601: DOUBLE
3602: EQUAL
3603: IFTRUE 3607
3605: GO 3821
3607: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3608: LD_ADDR_VAR 0 4
3612: PUSH
3613: LD_INT 35
3615: PUSH
3616: LD_INT 45
3618: PUSH
3619: LD_INT 46
3621: PUSH
3622: LD_INT 47
3624: PUSH
3625: LD_INT 82
3627: PUSH
3628: LD_INT 83
3630: PUSH
3631: LD_INT 84
3633: PUSH
3634: LD_INT 85
3636: PUSH
3637: LD_INT 86
3639: PUSH
3640: LD_INT 1
3642: PUSH
3643: LD_INT 2
3645: PUSH
3646: LD_INT 6
3648: PUSH
3649: LD_INT 15
3651: PUSH
3652: LD_INT 16
3654: PUSH
3655: LD_INT 7
3657: PUSH
3658: LD_INT 12
3660: PUSH
3661: LD_INT 13
3663: PUSH
3664: LD_INT 10
3666: PUSH
3667: LD_INT 14
3669: PUSH
3670: LD_INT 20
3672: PUSH
3673: LD_INT 21
3675: PUSH
3676: LD_INT 22
3678: PUSH
3679: LD_INT 25
3681: PUSH
3682: LD_INT 32
3684: PUSH
3685: LD_INT 27
3687: PUSH
3688: LD_INT 36
3690: PUSH
3691: LD_INT 69
3693: PUSH
3694: LD_INT 39
3696: PUSH
3697: LD_INT 34
3699: PUSH
3700: LD_INT 40
3702: PUSH
3703: LD_INT 48
3705: PUSH
3706: LD_INT 49
3708: PUSH
3709: LD_INT 50
3711: PUSH
3712: LD_INT 51
3714: PUSH
3715: LD_INT 52
3717: PUSH
3718: LD_INT 53
3720: PUSH
3721: LD_INT 54
3723: PUSH
3724: LD_INT 55
3726: PUSH
3727: LD_INT 56
3729: PUSH
3730: LD_INT 57
3732: PUSH
3733: LD_INT 58
3735: PUSH
3736: LD_INT 59
3738: PUSH
3739: LD_INT 60
3741: PUSH
3742: LD_INT 61
3744: PUSH
3745: LD_INT 62
3747: PUSH
3748: LD_INT 80
3750: PUSH
3751: LD_INT 82
3753: PUSH
3754: LD_INT 83
3756: PUSH
3757: LD_INT 84
3759: PUSH
3760: LD_INT 85
3762: PUSH
3763: LD_INT 86
3765: PUSH
3766: EMPTY
3767: LIST
3768: LIST
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: LIST
3776: LIST
3777: LIST
3778: LIST
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: ST_TO_ADDR
3819: GO 4286
3821: LD_INT 2
3823: DOUBLE
3824: EQUAL
3825: IFTRUE 3829
3827: GO 4055
3829: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3830: LD_ADDR_VAR 0 4
3834: PUSH
3835: LD_INT 35
3837: PUSH
3838: LD_INT 45
3840: PUSH
3841: LD_INT 46
3843: PUSH
3844: LD_INT 47
3846: PUSH
3847: LD_INT 82
3849: PUSH
3850: LD_INT 83
3852: PUSH
3853: LD_INT 84
3855: PUSH
3856: LD_INT 85
3858: PUSH
3859: LD_INT 87
3861: PUSH
3862: LD_INT 70
3864: PUSH
3865: LD_INT 1
3867: PUSH
3868: LD_INT 11
3870: PUSH
3871: LD_INT 3
3873: PUSH
3874: LD_INT 4
3876: PUSH
3877: LD_INT 5
3879: PUSH
3880: LD_INT 6
3882: PUSH
3883: LD_INT 15
3885: PUSH
3886: LD_INT 18
3888: PUSH
3889: LD_INT 7
3891: PUSH
3892: LD_INT 17
3894: PUSH
3895: LD_INT 8
3897: PUSH
3898: LD_INT 20
3900: PUSH
3901: LD_INT 21
3903: PUSH
3904: LD_INT 22
3906: PUSH
3907: LD_INT 72
3909: PUSH
3910: LD_INT 26
3912: PUSH
3913: LD_INT 69
3915: PUSH
3916: LD_INT 39
3918: PUSH
3919: LD_INT 40
3921: PUSH
3922: LD_INT 41
3924: PUSH
3925: LD_INT 42
3927: PUSH
3928: LD_INT 43
3930: PUSH
3931: LD_INT 48
3933: PUSH
3934: LD_INT 49
3936: PUSH
3937: LD_INT 50
3939: PUSH
3940: LD_INT 51
3942: PUSH
3943: LD_INT 52
3945: PUSH
3946: LD_INT 53
3948: PUSH
3949: LD_INT 54
3951: PUSH
3952: LD_INT 55
3954: PUSH
3955: LD_INT 56
3957: PUSH
3958: LD_INT 60
3960: PUSH
3961: LD_INT 61
3963: PUSH
3964: LD_INT 62
3966: PUSH
3967: LD_INT 66
3969: PUSH
3970: LD_INT 67
3972: PUSH
3973: LD_INT 68
3975: PUSH
3976: LD_INT 81
3978: PUSH
3979: LD_INT 82
3981: PUSH
3982: LD_INT 83
3984: PUSH
3985: LD_INT 84
3987: PUSH
3988: LD_INT 85
3990: PUSH
3991: LD_INT 87
3993: PUSH
3994: LD_INT 88
3996: PUSH
3997: EMPTY
3998: LIST
3999: LIST
4000: LIST
4001: LIST
4002: LIST
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: LIST
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: LIST
4036: LIST
4037: LIST
4038: LIST
4039: LIST
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: ST_TO_ADDR
4053: GO 4286
4055: LD_INT 3
4057: DOUBLE
4058: EQUAL
4059: IFTRUE 4063
4061: GO 4285
4063: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
4064: LD_ADDR_VAR 0 4
4068: PUSH
4069: LD_INT 46
4071: PUSH
4072: LD_INT 47
4074: PUSH
4075: LD_INT 1
4077: PUSH
4078: LD_INT 2
4080: PUSH
4081: LD_INT 82
4083: PUSH
4084: LD_INT 83
4086: PUSH
4087: LD_INT 84
4089: PUSH
4090: LD_INT 85
4092: PUSH
4093: LD_INT 86
4095: PUSH
4096: LD_INT 11
4098: PUSH
4099: LD_INT 9
4101: PUSH
4102: LD_INT 20
4104: PUSH
4105: LD_INT 19
4107: PUSH
4108: LD_INT 21
4110: PUSH
4111: LD_INT 24
4113: PUSH
4114: LD_INT 22
4116: PUSH
4117: LD_INT 25
4119: PUSH
4120: LD_INT 28
4122: PUSH
4123: LD_INT 29
4125: PUSH
4126: LD_INT 30
4128: PUSH
4129: LD_INT 31
4131: PUSH
4132: LD_INT 37
4134: PUSH
4135: LD_INT 38
4137: PUSH
4138: LD_INT 32
4140: PUSH
4141: LD_INT 27
4143: PUSH
4144: LD_INT 33
4146: PUSH
4147: LD_INT 69
4149: PUSH
4150: LD_INT 39
4152: PUSH
4153: LD_INT 34
4155: PUSH
4156: LD_INT 40
4158: PUSH
4159: LD_INT 71
4161: PUSH
4162: LD_INT 23
4164: PUSH
4165: LD_INT 44
4167: PUSH
4168: LD_INT 48
4170: PUSH
4171: LD_INT 49
4173: PUSH
4174: LD_INT 50
4176: PUSH
4177: LD_INT 51
4179: PUSH
4180: LD_INT 52
4182: PUSH
4183: LD_INT 53
4185: PUSH
4186: LD_INT 54
4188: PUSH
4189: LD_INT 55
4191: PUSH
4192: LD_INT 56
4194: PUSH
4195: LD_INT 57
4197: PUSH
4198: LD_INT 58
4200: PUSH
4201: LD_INT 59
4203: PUSH
4204: LD_INT 63
4206: PUSH
4207: LD_INT 64
4209: PUSH
4210: LD_INT 65
4212: PUSH
4213: LD_INT 82
4215: PUSH
4216: LD_INT 83
4218: PUSH
4219: LD_INT 84
4221: PUSH
4222: LD_INT 85
4224: PUSH
4225: LD_INT 86
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: LIST
4244: LIST
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: LIST
4262: LIST
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: LIST
4270: LIST
4271: LIST
4272: LIST
4273: LIST
4274: LIST
4275: LIST
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: ST_TO_ADDR
4283: GO 4286
4285: POP
// if state > - 1 and state < 3 then
4286: LD_VAR 0 3
4290: PUSH
4291: LD_INT 1
4293: NEG
4294: GREATER
4295: PUSH
4296: LD_VAR 0 3
4300: PUSH
4301: LD_INT 3
4303: LESS
4304: AND
4305: IFFALSE 4362
// for i in result do
4307: LD_ADDR_VAR 0 5
4311: PUSH
4312: LD_VAR 0 4
4316: PUSH
4317: FOR_IN
4318: IFFALSE 4360
// if GetTech ( i , side ) <> state then
4320: LD_VAR 0 5
4324: PPUSH
4325: LD_VAR 0 1
4329: PPUSH
4330: CALL_OW 321
4334: PUSH
4335: LD_VAR 0 3
4339: NONEQUAL
4340: IFFALSE 4358
// result := result diff i ;
4342: LD_ADDR_VAR 0 4
4346: PUSH
4347: LD_VAR 0 4
4351: PUSH
4352: LD_VAR 0 5
4356: DIFF
4357: ST_TO_ADDR
4358: GO 4317
4360: POP
4361: POP
// end ;
4362: LD_VAR 0 4
4366: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
4367: LD_INT 0
4369: PPUSH
4370: PPUSH
4371: PPUSH
// result := true ;
4372: LD_ADDR_VAR 0 3
4376: PUSH
4377: LD_INT 1
4379: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
4380: LD_ADDR_VAR 0 5
4384: PUSH
4385: LD_VAR 0 2
4389: PPUSH
4390: CALL_OW 480
4394: ST_TO_ADDR
// if not tmp then
4395: LD_VAR 0 5
4399: NOT
4400: IFFALSE 4404
// exit ;
4402: GO 4453
// for i in tmp do
4404: LD_ADDR_VAR 0 4
4408: PUSH
4409: LD_VAR 0 5
4413: PUSH
4414: FOR_IN
4415: IFFALSE 4451
// if GetTech ( i , side ) <> state_researched then
4417: LD_VAR 0 4
4421: PPUSH
4422: LD_VAR 0 1
4426: PPUSH
4427: CALL_OW 321
4431: PUSH
4432: LD_INT 2
4434: NONEQUAL
4435: IFFALSE 4449
// begin result := false ;
4437: LD_ADDR_VAR 0 3
4441: PUSH
4442: LD_INT 0
4444: ST_TO_ADDR
// exit ;
4445: POP
4446: POP
4447: GO 4453
// end ;
4449: GO 4414
4451: POP
4452: POP
// end ;
4453: LD_VAR 0 3
4457: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4458: LD_INT 0
4460: PPUSH
4461: PPUSH
4462: PPUSH
4463: PPUSH
4464: PPUSH
4465: PPUSH
4466: PPUSH
4467: PPUSH
4468: PPUSH
4469: PPUSH
4470: PPUSH
4471: PPUSH
4472: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4473: LD_VAR 0 1
4477: NOT
4478: PUSH
4479: LD_VAR 0 1
4483: PPUSH
4484: CALL_OW 257
4488: PUSH
4489: LD_INT 9
4491: NONEQUAL
4492: OR
4493: IFFALSE 4497
// exit ;
4495: GO 5070
// side := GetSide ( unit ) ;
4497: LD_ADDR_VAR 0 9
4501: PUSH
4502: LD_VAR 0 1
4506: PPUSH
4507: CALL_OW 255
4511: ST_TO_ADDR
// tech_space := tech_spacanom ;
4512: LD_ADDR_VAR 0 12
4516: PUSH
4517: LD_INT 29
4519: ST_TO_ADDR
// tech_time := tech_taurad ;
4520: LD_ADDR_VAR 0 13
4524: PUSH
4525: LD_INT 28
4527: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4528: LD_ADDR_VAR 0 11
4532: PUSH
4533: LD_VAR 0 1
4537: PPUSH
4538: CALL_OW 310
4542: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4543: LD_VAR 0 11
4547: PPUSH
4548: CALL_OW 247
4552: PUSH
4553: LD_INT 2
4555: EQUAL
4556: IFFALSE 4560
// exit ;
4558: GO 5070
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4560: LD_ADDR_VAR 0 8
4564: PUSH
4565: LD_INT 81
4567: PUSH
4568: LD_VAR 0 9
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: PUSH
4577: LD_INT 3
4579: PUSH
4580: LD_INT 21
4582: PUSH
4583: LD_INT 3
4585: PUSH
4586: EMPTY
4587: LIST
4588: LIST
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: PPUSH
4598: CALL_OW 69
4602: ST_TO_ADDR
// if not tmp then
4603: LD_VAR 0 8
4607: NOT
4608: IFFALSE 4612
// exit ;
4610: GO 5070
// if in_unit then
4612: LD_VAR 0 11
4616: IFFALSE 4640
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4618: LD_ADDR_VAR 0 10
4622: PUSH
4623: LD_VAR 0 8
4627: PPUSH
4628: LD_VAR 0 11
4632: PPUSH
4633: CALL_OW 74
4637: ST_TO_ADDR
4638: GO 4660
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4640: LD_ADDR_VAR 0 10
4644: PUSH
4645: LD_VAR 0 8
4649: PPUSH
4650: LD_VAR 0 1
4654: PPUSH
4655: CALL_OW 74
4659: ST_TO_ADDR
// if not enemy then
4660: LD_VAR 0 10
4664: NOT
4665: IFFALSE 4669
// exit ;
4667: GO 5070
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4669: LD_VAR 0 11
4673: PUSH
4674: LD_VAR 0 11
4678: PPUSH
4679: LD_VAR 0 10
4683: PPUSH
4684: CALL_OW 296
4688: PUSH
4689: LD_INT 13
4691: GREATER
4692: AND
4693: PUSH
4694: LD_VAR 0 1
4698: PPUSH
4699: LD_VAR 0 10
4703: PPUSH
4704: CALL_OW 296
4708: PUSH
4709: LD_INT 12
4711: GREATER
4712: OR
4713: IFFALSE 4717
// exit ;
4715: GO 5070
// missile := [ 1 ] ;
4717: LD_ADDR_VAR 0 14
4721: PUSH
4722: LD_INT 1
4724: PUSH
4725: EMPTY
4726: LIST
4727: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4728: LD_VAR 0 9
4732: PPUSH
4733: LD_VAR 0 12
4737: PPUSH
4738: CALL_OW 325
4742: IFFALSE 4771
// missile := Insert ( missile , missile + 1 , 2 ) ;
4744: LD_ADDR_VAR 0 14
4748: PUSH
4749: LD_VAR 0 14
4753: PPUSH
4754: LD_VAR 0 14
4758: PUSH
4759: LD_INT 1
4761: PLUS
4762: PPUSH
4763: LD_INT 2
4765: PPUSH
4766: CALL_OW 2
4770: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4771: LD_VAR 0 9
4775: PPUSH
4776: LD_VAR 0 13
4780: PPUSH
4781: CALL_OW 325
4785: PUSH
4786: LD_VAR 0 10
4790: PPUSH
4791: CALL_OW 255
4795: PPUSH
4796: LD_VAR 0 13
4800: PPUSH
4801: CALL_OW 325
4805: NOT
4806: AND
4807: IFFALSE 4836
// missile := Insert ( missile , missile + 1 , 3 ) ;
4809: LD_ADDR_VAR 0 14
4813: PUSH
4814: LD_VAR 0 14
4818: PPUSH
4819: LD_VAR 0 14
4823: PUSH
4824: LD_INT 1
4826: PLUS
4827: PPUSH
4828: LD_INT 3
4830: PPUSH
4831: CALL_OW 2
4835: ST_TO_ADDR
// if missile < 2 then
4836: LD_VAR 0 14
4840: PUSH
4841: LD_INT 2
4843: LESS
4844: IFFALSE 4848
// exit ;
4846: GO 5070
// x := GetX ( enemy ) ;
4848: LD_ADDR_VAR 0 4
4852: PUSH
4853: LD_VAR 0 10
4857: PPUSH
4858: CALL_OW 250
4862: ST_TO_ADDR
// y := GetY ( enemy ) ;
4863: LD_ADDR_VAR 0 5
4867: PUSH
4868: LD_VAR 0 10
4872: PPUSH
4873: CALL_OW 251
4877: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4878: LD_ADDR_VAR 0 6
4882: PUSH
4883: LD_VAR 0 4
4887: PUSH
4888: LD_INT 1
4890: NEG
4891: PPUSH
4892: LD_INT 1
4894: PPUSH
4895: CALL_OW 12
4899: PLUS
4900: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4901: LD_ADDR_VAR 0 7
4905: PUSH
4906: LD_VAR 0 5
4910: PUSH
4911: LD_INT 1
4913: NEG
4914: PPUSH
4915: LD_INT 1
4917: PPUSH
4918: CALL_OW 12
4922: PLUS
4923: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4924: LD_VAR 0 6
4928: PPUSH
4929: LD_VAR 0 7
4933: PPUSH
4934: CALL_OW 488
4938: NOT
4939: IFFALSE 4961
// begin _x := x ;
4941: LD_ADDR_VAR 0 6
4945: PUSH
4946: LD_VAR 0 4
4950: ST_TO_ADDR
// _y := y ;
4951: LD_ADDR_VAR 0 7
4955: PUSH
4956: LD_VAR 0 5
4960: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4961: LD_ADDR_VAR 0 3
4965: PUSH
4966: LD_INT 1
4968: PPUSH
4969: LD_VAR 0 14
4973: PPUSH
4974: CALL_OW 12
4978: ST_TO_ADDR
// case i of 1 :
4979: LD_VAR 0 3
4983: PUSH
4984: LD_INT 1
4986: DOUBLE
4987: EQUAL
4988: IFTRUE 4992
4990: GO 5009
4992: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4993: LD_VAR 0 1
4997: PPUSH
4998: LD_VAR 0 10
5002: PPUSH
5003: CALL_OW 115
5007: GO 5070
5009: LD_INT 2
5011: DOUBLE
5012: EQUAL
5013: IFTRUE 5017
5015: GO 5039
5017: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5018: LD_VAR 0 1
5022: PPUSH
5023: LD_VAR 0 6
5027: PPUSH
5028: LD_VAR 0 7
5032: PPUSH
5033: CALL_OW 153
5037: GO 5070
5039: LD_INT 3
5041: DOUBLE
5042: EQUAL
5043: IFTRUE 5047
5045: GO 5069
5047: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5048: LD_VAR 0 1
5052: PPUSH
5053: LD_VAR 0 6
5057: PPUSH
5058: LD_VAR 0 7
5062: PPUSH
5063: CALL_OW 154
5067: GO 5070
5069: POP
// end ;
5070: LD_VAR 0 2
5074: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
5075: LD_INT 0
5077: PPUSH
5078: PPUSH
5079: PPUSH
5080: PPUSH
5081: PPUSH
5082: PPUSH
// if not unit or not building then
5083: LD_VAR 0 1
5087: NOT
5088: PUSH
5089: LD_VAR 0 2
5093: NOT
5094: OR
5095: IFFALSE 5099
// exit ;
5097: GO 5257
// x := GetX ( building ) ;
5099: LD_ADDR_VAR 0 5
5103: PUSH
5104: LD_VAR 0 2
5108: PPUSH
5109: CALL_OW 250
5113: ST_TO_ADDR
// y := GetY ( building ) ;
5114: LD_ADDR_VAR 0 6
5118: PUSH
5119: LD_VAR 0 2
5123: PPUSH
5124: CALL_OW 251
5128: ST_TO_ADDR
// for i = 0 to 5 do
5129: LD_ADDR_VAR 0 4
5133: PUSH
5134: DOUBLE
5135: LD_INT 0
5137: DEC
5138: ST_TO_ADDR
5139: LD_INT 5
5141: PUSH
5142: FOR_TO
5143: IFFALSE 5255
// begin _x := ShiftX ( x , i , 3 ) ;
5145: LD_ADDR_VAR 0 7
5149: PUSH
5150: LD_VAR 0 5
5154: PPUSH
5155: LD_VAR 0 4
5159: PPUSH
5160: LD_INT 3
5162: PPUSH
5163: CALL_OW 272
5167: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5168: LD_ADDR_VAR 0 8
5172: PUSH
5173: LD_VAR 0 6
5177: PPUSH
5178: LD_VAR 0 4
5182: PPUSH
5183: LD_INT 3
5185: PPUSH
5186: CALL_OW 273
5190: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5191: LD_VAR 0 7
5195: PPUSH
5196: LD_VAR 0 8
5200: PPUSH
5201: CALL_OW 488
5205: NOT
5206: IFFALSE 5210
// continue ;
5208: GO 5142
// if HexInfo ( _x , _y ) = 0 then
5210: LD_VAR 0 7
5214: PPUSH
5215: LD_VAR 0 8
5219: PPUSH
5220: CALL_OW 428
5224: PUSH
5225: LD_INT 0
5227: EQUAL
5228: IFFALSE 5253
// begin ComMoveXY ( unit , _x , _y ) ;
5230: LD_VAR 0 1
5234: PPUSH
5235: LD_VAR 0 7
5239: PPUSH
5240: LD_VAR 0 8
5244: PPUSH
5245: CALL_OW 111
// exit ;
5249: POP
5250: POP
5251: GO 5257
// end ; end ;
5253: GO 5142
5255: POP
5256: POP
// end ;
5257: LD_VAR 0 3
5261: RET
// export function ScanBase ( side , base_area ) ; begin
5262: LD_INT 0
5264: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
5265: LD_ADDR_VAR 0 3
5269: PUSH
5270: LD_VAR 0 2
5274: PPUSH
5275: LD_INT 81
5277: PUSH
5278: LD_VAR 0 1
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PPUSH
5287: CALL_OW 70
5291: ST_TO_ADDR
// end ;
5292: LD_VAR 0 3
5296: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
5297: LD_INT 0
5299: PPUSH
5300: PPUSH
5301: PPUSH
5302: PPUSH
// result := false ;
5303: LD_ADDR_VAR 0 2
5307: PUSH
5308: LD_INT 0
5310: ST_TO_ADDR
// side := GetSide ( unit ) ;
5311: LD_ADDR_VAR 0 3
5315: PUSH
5316: LD_VAR 0 1
5320: PPUSH
5321: CALL_OW 255
5325: ST_TO_ADDR
// nat := GetNation ( unit ) ;
5326: LD_ADDR_VAR 0 4
5330: PUSH
5331: LD_VAR 0 1
5335: PPUSH
5336: CALL_OW 248
5340: ST_TO_ADDR
// case nat of 1 :
5341: LD_VAR 0 4
5345: PUSH
5346: LD_INT 1
5348: DOUBLE
5349: EQUAL
5350: IFTRUE 5354
5352: GO 5365
5354: POP
// tech := tech_lassight ; 2 :
5355: LD_ADDR_VAR 0 5
5359: PUSH
5360: LD_INT 12
5362: ST_TO_ADDR
5363: GO 5404
5365: LD_INT 2
5367: DOUBLE
5368: EQUAL
5369: IFTRUE 5373
5371: GO 5384
5373: POP
// tech := tech_mortar ; 3 :
5374: LD_ADDR_VAR 0 5
5378: PUSH
5379: LD_INT 41
5381: ST_TO_ADDR
5382: GO 5404
5384: LD_INT 3
5386: DOUBLE
5387: EQUAL
5388: IFTRUE 5392
5390: GO 5403
5392: POP
// tech := tech_bazooka ; end ;
5393: LD_ADDR_VAR 0 5
5397: PUSH
5398: LD_INT 44
5400: ST_TO_ADDR
5401: GO 5404
5403: POP
// if Researched ( side , tech ) then
5404: LD_VAR 0 3
5408: PPUSH
5409: LD_VAR 0 5
5413: PPUSH
5414: CALL_OW 325
5418: IFFALSE 5445
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5420: LD_ADDR_VAR 0 2
5424: PUSH
5425: LD_INT 5
5427: PUSH
5428: LD_INT 8
5430: PUSH
5431: LD_INT 9
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: LIST
5438: PUSH
5439: LD_VAR 0 4
5443: ARRAY
5444: ST_TO_ADDR
// end ;
5445: LD_VAR 0 2
5449: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5450: LD_INT 0
5452: PPUSH
5453: PPUSH
5454: PPUSH
// if not mines then
5455: LD_VAR 0 2
5459: NOT
5460: IFFALSE 5464
// exit ;
5462: GO 5608
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5464: LD_ADDR_VAR 0 5
5468: PUSH
5469: LD_INT 81
5471: PUSH
5472: LD_VAR 0 1
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: PUSH
5481: LD_INT 3
5483: PUSH
5484: LD_INT 21
5486: PUSH
5487: LD_INT 3
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PUSH
5494: EMPTY
5495: LIST
5496: LIST
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: PPUSH
5502: CALL_OW 69
5506: ST_TO_ADDR
// for i in mines do
5507: LD_ADDR_VAR 0 4
5511: PUSH
5512: LD_VAR 0 2
5516: PUSH
5517: FOR_IN
5518: IFFALSE 5606
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5520: LD_VAR 0 4
5524: PUSH
5525: LD_INT 1
5527: ARRAY
5528: PPUSH
5529: LD_VAR 0 4
5533: PUSH
5534: LD_INT 2
5536: ARRAY
5537: PPUSH
5538: CALL_OW 458
5542: NOT
5543: IFFALSE 5547
// continue ;
5545: GO 5517
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5547: LD_VAR 0 4
5551: PUSH
5552: LD_INT 1
5554: ARRAY
5555: PPUSH
5556: LD_VAR 0 4
5560: PUSH
5561: LD_INT 2
5563: ARRAY
5564: PPUSH
5565: CALL_OW 428
5569: PUSH
5570: LD_VAR 0 5
5574: IN
5575: IFFALSE 5604
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5577: LD_VAR 0 4
5581: PUSH
5582: LD_INT 1
5584: ARRAY
5585: PPUSH
5586: LD_VAR 0 4
5590: PUSH
5591: LD_INT 2
5593: ARRAY
5594: PPUSH
5595: LD_VAR 0 1
5599: PPUSH
5600: CALL_OW 456
// end ;
5604: GO 5517
5606: POP
5607: POP
// end ;
5608: LD_VAR 0 3
5612: RET
// export function Count ( array ) ; var i ; begin
5613: LD_INT 0
5615: PPUSH
5616: PPUSH
// result := 0 ;
5617: LD_ADDR_VAR 0 2
5621: PUSH
5622: LD_INT 0
5624: ST_TO_ADDR
// for i in array do
5625: LD_ADDR_VAR 0 3
5629: PUSH
5630: LD_VAR 0 1
5634: PUSH
5635: FOR_IN
5636: IFFALSE 5660
// if i then
5638: LD_VAR 0 3
5642: IFFALSE 5658
// result := result + 1 ;
5644: LD_ADDR_VAR 0 2
5648: PUSH
5649: LD_VAR 0 2
5653: PUSH
5654: LD_INT 1
5656: PLUS
5657: ST_TO_ADDR
5658: GO 5635
5660: POP
5661: POP
// end ;
5662: LD_VAR 0 2
5666: RET
// export function IsEmpty ( building ) ; begin
5667: LD_INT 0
5669: PPUSH
// if not building then
5670: LD_VAR 0 1
5674: NOT
5675: IFFALSE 5679
// exit ;
5677: GO 5722
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5679: LD_ADDR_VAR 0 2
5683: PUSH
5684: LD_VAR 0 1
5688: PUSH
5689: LD_INT 22
5691: PUSH
5692: LD_VAR 0 1
5696: PPUSH
5697: CALL_OW 255
5701: PUSH
5702: EMPTY
5703: LIST
5704: LIST
5705: PUSH
5706: LD_INT 58
5708: PUSH
5709: EMPTY
5710: LIST
5711: PUSH
5712: EMPTY
5713: LIST
5714: LIST
5715: PPUSH
5716: CALL_OW 69
5720: IN
5721: ST_TO_ADDR
// end ;
5722: LD_VAR 0 2
5726: RET
// export function IsNotFull ( building ) ; begin
5727: LD_INT 0
5729: PPUSH
// if not building then
5730: LD_VAR 0 1
5734: NOT
5735: IFFALSE 5739
// exit ;
5737: GO 5758
// result := UnitsInside ( building ) < 6 ;
5739: LD_ADDR_VAR 0 2
5743: PUSH
5744: LD_VAR 0 1
5748: PPUSH
5749: CALL_OW 313
5753: PUSH
5754: LD_INT 6
5756: LESS
5757: ST_TO_ADDR
// end ;
5758: LD_VAR 0 2
5762: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5763: LD_INT 0
5765: PPUSH
5766: PPUSH
5767: PPUSH
5768: PPUSH
// tmp := [ ] ;
5769: LD_ADDR_VAR 0 3
5773: PUSH
5774: EMPTY
5775: ST_TO_ADDR
// list := [ ] ;
5776: LD_ADDR_VAR 0 5
5780: PUSH
5781: EMPTY
5782: ST_TO_ADDR
// for i = 16 to 25 do
5783: LD_ADDR_VAR 0 4
5787: PUSH
5788: DOUBLE
5789: LD_INT 16
5791: DEC
5792: ST_TO_ADDR
5793: LD_INT 25
5795: PUSH
5796: FOR_TO
5797: IFFALSE 5870
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5799: LD_ADDR_VAR 0 3
5803: PUSH
5804: LD_VAR 0 3
5808: PUSH
5809: LD_INT 22
5811: PUSH
5812: LD_VAR 0 1
5816: PPUSH
5817: CALL_OW 255
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: PUSH
5826: LD_INT 91
5828: PUSH
5829: LD_VAR 0 1
5833: PUSH
5834: LD_INT 6
5836: PUSH
5837: EMPTY
5838: LIST
5839: LIST
5840: LIST
5841: PUSH
5842: LD_INT 30
5844: PUSH
5845: LD_VAR 0 4
5849: PUSH
5850: EMPTY
5851: LIST
5852: LIST
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: LIST
5858: PUSH
5859: EMPTY
5860: LIST
5861: PPUSH
5862: CALL_OW 69
5866: ADD
5867: ST_TO_ADDR
5868: GO 5796
5870: POP
5871: POP
// for i = 1 to tmp do
5872: LD_ADDR_VAR 0 4
5876: PUSH
5877: DOUBLE
5878: LD_INT 1
5880: DEC
5881: ST_TO_ADDR
5882: LD_VAR 0 3
5886: PUSH
5887: FOR_TO
5888: IFFALSE 5976
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5890: LD_ADDR_VAR 0 5
5894: PUSH
5895: LD_VAR 0 5
5899: PUSH
5900: LD_VAR 0 3
5904: PUSH
5905: LD_VAR 0 4
5909: ARRAY
5910: PPUSH
5911: CALL_OW 266
5915: PUSH
5916: LD_VAR 0 3
5920: PUSH
5921: LD_VAR 0 4
5925: ARRAY
5926: PPUSH
5927: CALL_OW 250
5931: PUSH
5932: LD_VAR 0 3
5936: PUSH
5937: LD_VAR 0 4
5941: ARRAY
5942: PPUSH
5943: CALL_OW 251
5947: PUSH
5948: LD_VAR 0 3
5952: PUSH
5953: LD_VAR 0 4
5957: ARRAY
5958: PPUSH
5959: CALL_OW 254
5963: PUSH
5964: EMPTY
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: PUSH
5970: EMPTY
5971: LIST
5972: ADD
5973: ST_TO_ADDR
5974: GO 5887
5976: POP
5977: POP
// result := list ;
5978: LD_ADDR_VAR 0 2
5982: PUSH
5983: LD_VAR 0 5
5987: ST_TO_ADDR
// end ;
5988: LD_VAR 0 2
5992: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5993: LD_INT 0
5995: PPUSH
5996: PPUSH
5997: PPUSH
5998: PPUSH
5999: PPUSH
6000: PPUSH
6001: PPUSH
// if not factory then
6002: LD_VAR 0 1
6006: NOT
6007: IFFALSE 6011
// exit ;
6009: GO 6604
// if control = control_apeman then
6011: LD_VAR 0 4
6015: PUSH
6016: LD_INT 5
6018: EQUAL
6019: IFFALSE 6128
// begin tmp := UnitsInside ( factory ) ;
6021: LD_ADDR_VAR 0 8
6025: PUSH
6026: LD_VAR 0 1
6030: PPUSH
6031: CALL_OW 313
6035: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6036: LD_VAR 0 8
6040: PPUSH
6041: LD_INT 25
6043: PUSH
6044: LD_INT 12
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: PPUSH
6051: CALL_OW 72
6055: NOT
6056: IFFALSE 6066
// control := control_manual ;
6058: LD_ADDR_VAR 0 4
6062: PUSH
6063: LD_INT 1
6065: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
6066: LD_ADDR_VAR 0 8
6070: PUSH
6071: LD_VAR 0 1
6075: PPUSH
6076: CALL 5763 0 1
6080: ST_TO_ADDR
// if tmp then
6081: LD_VAR 0 8
6085: IFFALSE 6128
// begin for i in tmp do
6087: LD_ADDR_VAR 0 7
6091: PUSH
6092: LD_VAR 0 8
6096: PUSH
6097: FOR_IN
6098: IFFALSE 6126
// if i [ 1 ] = b_ext_radio then
6100: LD_VAR 0 7
6104: PUSH
6105: LD_INT 1
6107: ARRAY
6108: PUSH
6109: LD_INT 22
6111: EQUAL
6112: IFFALSE 6124
// begin control := control_remote ;
6114: LD_ADDR_VAR 0 4
6118: PUSH
6119: LD_INT 2
6121: ST_TO_ADDR
// break ;
6122: GO 6126
// end ;
6124: GO 6097
6126: POP
6127: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6128: LD_VAR 0 1
6132: PPUSH
6133: LD_VAR 0 2
6137: PPUSH
6138: LD_VAR 0 3
6142: PPUSH
6143: LD_VAR 0 4
6147: PPUSH
6148: LD_VAR 0 5
6152: PPUSH
6153: CALL_OW 448
6157: IFFALSE 6192
// begin result := [ chassis , engine , control , weapon ] ;
6159: LD_ADDR_VAR 0 6
6163: PUSH
6164: LD_VAR 0 2
6168: PUSH
6169: LD_VAR 0 3
6173: PUSH
6174: LD_VAR 0 4
6178: PUSH
6179: LD_VAR 0 5
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: ST_TO_ADDR
// exit ;
6190: GO 6604
// end ; _chassis := AvailableChassisList ( factory ) ;
6192: LD_ADDR_VAR 0 9
6196: PUSH
6197: LD_VAR 0 1
6201: PPUSH
6202: CALL_OW 475
6206: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
6207: LD_ADDR_VAR 0 11
6211: PUSH
6212: LD_VAR 0 1
6216: PPUSH
6217: CALL_OW 476
6221: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
6222: LD_ADDR_VAR 0 12
6226: PUSH
6227: LD_VAR 0 1
6231: PPUSH
6232: CALL_OW 477
6236: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
6237: LD_ADDR_VAR 0 10
6241: PUSH
6242: LD_VAR 0 1
6246: PPUSH
6247: CALL_OW 478
6251: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
6252: LD_VAR 0 9
6256: NOT
6257: PUSH
6258: LD_VAR 0 11
6262: NOT
6263: OR
6264: PUSH
6265: LD_VAR 0 12
6269: NOT
6270: OR
6271: PUSH
6272: LD_VAR 0 10
6276: NOT
6277: OR
6278: IFFALSE 6313
// begin result := [ chassis , engine , control , weapon ] ;
6280: LD_ADDR_VAR 0 6
6284: PUSH
6285: LD_VAR 0 2
6289: PUSH
6290: LD_VAR 0 3
6294: PUSH
6295: LD_VAR 0 4
6299: PUSH
6300: LD_VAR 0 5
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: ST_TO_ADDR
// exit ;
6311: GO 6604
// end ; if not chassis in _chassis then
6313: LD_VAR 0 2
6317: PUSH
6318: LD_VAR 0 9
6322: IN
6323: NOT
6324: IFFALSE 6350
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
6326: LD_ADDR_VAR 0 2
6330: PUSH
6331: LD_VAR 0 9
6335: PUSH
6336: LD_INT 1
6338: PPUSH
6339: LD_VAR 0 9
6343: PPUSH
6344: CALL_OW 12
6348: ARRAY
6349: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
6350: LD_VAR 0 2
6354: PPUSH
6355: LD_VAR 0 3
6359: PPUSH
6360: CALL 6609 0 2
6364: NOT
6365: IFFALSE 6424
// repeat engine := _engine [ 1 ] ;
6367: LD_ADDR_VAR 0 3
6371: PUSH
6372: LD_VAR 0 11
6376: PUSH
6377: LD_INT 1
6379: ARRAY
6380: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
6381: LD_ADDR_VAR 0 11
6385: PUSH
6386: LD_VAR 0 11
6390: PPUSH
6391: LD_INT 1
6393: PPUSH
6394: CALL_OW 3
6398: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6399: LD_VAR 0 2
6403: PPUSH
6404: LD_VAR 0 3
6408: PPUSH
6409: CALL 6609 0 2
6413: PUSH
6414: LD_VAR 0 11
6418: PUSH
6419: EMPTY
6420: EQUAL
6421: OR
6422: IFFALSE 6367
// if not control in _control then
6424: LD_VAR 0 4
6428: PUSH
6429: LD_VAR 0 12
6433: IN
6434: NOT
6435: IFFALSE 6461
// control := _control [ rand ( 1 , _control ) ] ;
6437: LD_ADDR_VAR 0 4
6441: PUSH
6442: LD_VAR 0 12
6446: PUSH
6447: LD_INT 1
6449: PPUSH
6450: LD_VAR 0 12
6454: PPUSH
6455: CALL_OW 12
6459: ARRAY
6460: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6461: LD_VAR 0 2
6465: PPUSH
6466: LD_VAR 0 5
6470: PPUSH
6471: CALL 6829 0 2
6475: NOT
6476: IFFALSE 6535
// repeat weapon := _weapon [ 1 ] ;
6478: LD_ADDR_VAR 0 5
6482: PUSH
6483: LD_VAR 0 10
6487: PUSH
6488: LD_INT 1
6490: ARRAY
6491: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6492: LD_ADDR_VAR 0 10
6496: PUSH
6497: LD_VAR 0 10
6501: PPUSH
6502: LD_INT 1
6504: PPUSH
6505: CALL_OW 3
6509: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6510: LD_VAR 0 2
6514: PPUSH
6515: LD_VAR 0 5
6519: PPUSH
6520: CALL 6829 0 2
6524: PUSH
6525: LD_VAR 0 10
6529: PUSH
6530: EMPTY
6531: EQUAL
6532: OR
6533: IFFALSE 6478
// result := [ ] ;
6535: LD_ADDR_VAR 0 6
6539: PUSH
6540: EMPTY
6541: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6542: LD_VAR 0 1
6546: PPUSH
6547: LD_VAR 0 2
6551: PPUSH
6552: LD_VAR 0 3
6556: PPUSH
6557: LD_VAR 0 4
6561: PPUSH
6562: LD_VAR 0 5
6566: PPUSH
6567: CALL_OW 448
6571: IFFALSE 6604
// result := [ chassis , engine , control , weapon ] ;
6573: LD_ADDR_VAR 0 6
6577: PUSH
6578: LD_VAR 0 2
6582: PUSH
6583: LD_VAR 0 3
6587: PUSH
6588: LD_VAR 0 4
6592: PUSH
6593: LD_VAR 0 5
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: ST_TO_ADDR
// end ;
6604: LD_VAR 0 6
6608: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6609: LD_INT 0
6611: PPUSH
// if not chassis or not engine then
6612: LD_VAR 0 1
6616: NOT
6617: PUSH
6618: LD_VAR 0 2
6622: NOT
6623: OR
6624: IFFALSE 6628
// exit ;
6626: GO 6824
// case engine of engine_solar :
6628: LD_VAR 0 2
6632: PUSH
6633: LD_INT 2
6635: DOUBLE
6636: EQUAL
6637: IFTRUE 6641
6639: GO 6679
6641: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6642: LD_ADDR_VAR 0 3
6646: PUSH
6647: LD_INT 11
6649: PUSH
6650: LD_INT 12
6652: PUSH
6653: LD_INT 13
6655: PUSH
6656: LD_INT 14
6658: PUSH
6659: LD_INT 1
6661: PUSH
6662: LD_INT 2
6664: PUSH
6665: LD_INT 3
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: ST_TO_ADDR
6677: GO 6808
6679: LD_INT 1
6681: DOUBLE
6682: EQUAL
6683: IFTRUE 6687
6685: GO 6749
6687: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6688: LD_ADDR_VAR 0 3
6692: PUSH
6693: LD_INT 11
6695: PUSH
6696: LD_INT 12
6698: PUSH
6699: LD_INT 13
6701: PUSH
6702: LD_INT 14
6704: PUSH
6705: LD_INT 1
6707: PUSH
6708: LD_INT 2
6710: PUSH
6711: LD_INT 3
6713: PUSH
6714: LD_INT 4
6716: PUSH
6717: LD_INT 5
6719: PUSH
6720: LD_INT 21
6722: PUSH
6723: LD_INT 23
6725: PUSH
6726: LD_INT 22
6728: PUSH
6729: LD_INT 24
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: ST_TO_ADDR
6747: GO 6808
6749: LD_INT 3
6751: DOUBLE
6752: EQUAL
6753: IFTRUE 6757
6755: GO 6807
6757: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6758: LD_ADDR_VAR 0 3
6762: PUSH
6763: LD_INT 13
6765: PUSH
6766: LD_INT 14
6768: PUSH
6769: LD_INT 2
6771: PUSH
6772: LD_INT 3
6774: PUSH
6775: LD_INT 4
6777: PUSH
6778: LD_INT 5
6780: PUSH
6781: LD_INT 21
6783: PUSH
6784: LD_INT 22
6786: PUSH
6787: LD_INT 23
6789: PUSH
6790: LD_INT 24
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: ST_TO_ADDR
6805: GO 6808
6807: POP
// result := ( chassis in result ) ;
6808: LD_ADDR_VAR 0 3
6812: PUSH
6813: LD_VAR 0 1
6817: PUSH
6818: LD_VAR 0 3
6822: IN
6823: ST_TO_ADDR
// end ;
6824: LD_VAR 0 3
6828: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6829: LD_INT 0
6831: PPUSH
// if not chassis or not weapon then
6832: LD_VAR 0 1
6836: NOT
6837: PUSH
6838: LD_VAR 0 2
6842: NOT
6843: OR
6844: IFFALSE 6848
// exit ;
6846: GO 7910
// case weapon of us_machine_gun :
6848: LD_VAR 0 2
6852: PUSH
6853: LD_INT 2
6855: DOUBLE
6856: EQUAL
6857: IFTRUE 6861
6859: GO 6891
6861: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6862: LD_ADDR_VAR 0 3
6866: PUSH
6867: LD_INT 1
6869: PUSH
6870: LD_INT 2
6872: PUSH
6873: LD_INT 3
6875: PUSH
6876: LD_INT 4
6878: PUSH
6879: LD_INT 5
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: ST_TO_ADDR
6889: GO 7894
6891: LD_INT 3
6893: DOUBLE
6894: EQUAL
6895: IFTRUE 6899
6897: GO 6929
6899: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6900: LD_ADDR_VAR 0 3
6904: PUSH
6905: LD_INT 1
6907: PUSH
6908: LD_INT 2
6910: PUSH
6911: LD_INT 3
6913: PUSH
6914: LD_INT 4
6916: PUSH
6917: LD_INT 5
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: ST_TO_ADDR
6927: GO 7894
6929: LD_INT 11
6931: DOUBLE
6932: EQUAL
6933: IFTRUE 6937
6935: GO 6967
6937: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6938: LD_ADDR_VAR 0 3
6942: PUSH
6943: LD_INT 1
6945: PUSH
6946: LD_INT 2
6948: PUSH
6949: LD_INT 3
6951: PUSH
6952: LD_INT 4
6954: PUSH
6955: LD_INT 5
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: ST_TO_ADDR
6965: GO 7894
6967: LD_INT 4
6969: DOUBLE
6970: EQUAL
6971: IFTRUE 6975
6973: GO 7001
6975: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6976: LD_ADDR_VAR 0 3
6980: PUSH
6981: LD_INT 2
6983: PUSH
6984: LD_INT 3
6986: PUSH
6987: LD_INT 4
6989: PUSH
6990: LD_INT 5
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: ST_TO_ADDR
6999: GO 7894
7001: LD_INT 5
7003: DOUBLE
7004: EQUAL
7005: IFTRUE 7009
7007: GO 7035
7009: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7010: LD_ADDR_VAR 0 3
7014: PUSH
7015: LD_INT 2
7017: PUSH
7018: LD_INT 3
7020: PUSH
7021: LD_INT 4
7023: PUSH
7024: LD_INT 5
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: ST_TO_ADDR
7033: GO 7894
7035: LD_INT 9
7037: DOUBLE
7038: EQUAL
7039: IFTRUE 7043
7041: GO 7069
7043: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7044: LD_ADDR_VAR 0 3
7048: PUSH
7049: LD_INT 2
7051: PUSH
7052: LD_INT 3
7054: PUSH
7055: LD_INT 4
7057: PUSH
7058: LD_INT 5
7060: PUSH
7061: EMPTY
7062: LIST
7063: LIST
7064: LIST
7065: LIST
7066: ST_TO_ADDR
7067: GO 7894
7069: LD_INT 7
7071: DOUBLE
7072: EQUAL
7073: IFTRUE 7077
7075: GO 7103
7077: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
7078: LD_ADDR_VAR 0 3
7082: PUSH
7083: LD_INT 2
7085: PUSH
7086: LD_INT 3
7088: PUSH
7089: LD_INT 4
7091: PUSH
7092: LD_INT 5
7094: PUSH
7095: EMPTY
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: ST_TO_ADDR
7101: GO 7894
7103: LD_INT 12
7105: DOUBLE
7106: EQUAL
7107: IFTRUE 7111
7109: GO 7137
7111: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
7112: LD_ADDR_VAR 0 3
7116: PUSH
7117: LD_INT 2
7119: PUSH
7120: LD_INT 3
7122: PUSH
7123: LD_INT 4
7125: PUSH
7126: LD_INT 5
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: LIST
7133: LIST
7134: ST_TO_ADDR
7135: GO 7894
7137: LD_INT 13
7139: DOUBLE
7140: EQUAL
7141: IFTRUE 7145
7143: GO 7171
7145: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
7146: LD_ADDR_VAR 0 3
7150: PUSH
7151: LD_INT 2
7153: PUSH
7154: LD_INT 3
7156: PUSH
7157: LD_INT 4
7159: PUSH
7160: LD_INT 5
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: ST_TO_ADDR
7169: GO 7894
7171: LD_INT 14
7173: DOUBLE
7174: EQUAL
7175: IFTRUE 7179
7177: GO 7197
7179: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
7180: LD_ADDR_VAR 0 3
7184: PUSH
7185: LD_INT 4
7187: PUSH
7188: LD_INT 5
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: ST_TO_ADDR
7195: GO 7894
7197: LD_INT 6
7199: DOUBLE
7200: EQUAL
7201: IFTRUE 7205
7203: GO 7223
7205: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
7206: LD_ADDR_VAR 0 3
7210: PUSH
7211: LD_INT 4
7213: PUSH
7214: LD_INT 5
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: ST_TO_ADDR
7221: GO 7894
7223: LD_INT 10
7225: DOUBLE
7226: EQUAL
7227: IFTRUE 7231
7229: GO 7249
7231: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
7232: LD_ADDR_VAR 0 3
7236: PUSH
7237: LD_INT 4
7239: PUSH
7240: LD_INT 5
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: ST_TO_ADDR
7247: GO 7894
7249: LD_INT 22
7251: DOUBLE
7252: EQUAL
7253: IFTRUE 7257
7255: GO 7283
7257: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
7258: LD_ADDR_VAR 0 3
7262: PUSH
7263: LD_INT 11
7265: PUSH
7266: LD_INT 12
7268: PUSH
7269: LD_INT 13
7271: PUSH
7272: LD_INT 14
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: LIST
7279: LIST
7280: ST_TO_ADDR
7281: GO 7894
7283: LD_INT 23
7285: DOUBLE
7286: EQUAL
7287: IFTRUE 7291
7289: GO 7317
7291: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
7292: LD_ADDR_VAR 0 3
7296: PUSH
7297: LD_INT 11
7299: PUSH
7300: LD_INT 12
7302: PUSH
7303: LD_INT 13
7305: PUSH
7306: LD_INT 14
7308: PUSH
7309: EMPTY
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: ST_TO_ADDR
7315: GO 7894
7317: LD_INT 24
7319: DOUBLE
7320: EQUAL
7321: IFTRUE 7325
7323: GO 7351
7325: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
7326: LD_ADDR_VAR 0 3
7330: PUSH
7331: LD_INT 11
7333: PUSH
7334: LD_INT 12
7336: PUSH
7337: LD_INT 13
7339: PUSH
7340: LD_INT 14
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: ST_TO_ADDR
7349: GO 7894
7351: LD_INT 30
7353: DOUBLE
7354: EQUAL
7355: IFTRUE 7359
7357: GO 7385
7359: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
7360: LD_ADDR_VAR 0 3
7364: PUSH
7365: LD_INT 11
7367: PUSH
7368: LD_INT 12
7370: PUSH
7371: LD_INT 13
7373: PUSH
7374: LD_INT 14
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: ST_TO_ADDR
7383: GO 7894
7385: LD_INT 25
7387: DOUBLE
7388: EQUAL
7389: IFTRUE 7393
7391: GO 7411
7393: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7394: LD_ADDR_VAR 0 3
7398: PUSH
7399: LD_INT 13
7401: PUSH
7402: LD_INT 14
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: ST_TO_ADDR
7409: GO 7894
7411: LD_INT 27
7413: DOUBLE
7414: EQUAL
7415: IFTRUE 7419
7417: GO 7437
7419: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7420: LD_ADDR_VAR 0 3
7424: PUSH
7425: LD_INT 13
7427: PUSH
7428: LD_INT 14
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: ST_TO_ADDR
7435: GO 7894
7437: LD_EXP 91
7441: DOUBLE
7442: EQUAL
7443: IFTRUE 7447
7445: GO 7473
7447: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7448: LD_ADDR_VAR 0 3
7452: PUSH
7453: LD_INT 11
7455: PUSH
7456: LD_INT 12
7458: PUSH
7459: LD_INT 13
7461: PUSH
7462: LD_INT 14
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: ST_TO_ADDR
7471: GO 7894
7473: LD_INT 28
7475: DOUBLE
7476: EQUAL
7477: IFTRUE 7481
7479: GO 7499
7481: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7482: LD_ADDR_VAR 0 3
7486: PUSH
7487: LD_INT 13
7489: PUSH
7490: LD_INT 14
7492: PUSH
7493: EMPTY
7494: LIST
7495: LIST
7496: ST_TO_ADDR
7497: GO 7894
7499: LD_INT 29
7501: DOUBLE
7502: EQUAL
7503: IFTRUE 7507
7505: GO 7525
7507: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7508: LD_ADDR_VAR 0 3
7512: PUSH
7513: LD_INT 13
7515: PUSH
7516: LD_INT 14
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: ST_TO_ADDR
7523: GO 7894
7525: LD_INT 31
7527: DOUBLE
7528: EQUAL
7529: IFTRUE 7533
7531: GO 7551
7533: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7534: LD_ADDR_VAR 0 3
7538: PUSH
7539: LD_INT 13
7541: PUSH
7542: LD_INT 14
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: ST_TO_ADDR
7549: GO 7894
7551: LD_INT 26
7553: DOUBLE
7554: EQUAL
7555: IFTRUE 7559
7557: GO 7577
7559: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7560: LD_ADDR_VAR 0 3
7564: PUSH
7565: LD_INT 13
7567: PUSH
7568: LD_INT 14
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: ST_TO_ADDR
7575: GO 7894
7577: LD_INT 42
7579: DOUBLE
7580: EQUAL
7581: IFTRUE 7585
7583: GO 7611
7585: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7586: LD_ADDR_VAR 0 3
7590: PUSH
7591: LD_INT 21
7593: PUSH
7594: LD_INT 22
7596: PUSH
7597: LD_INT 23
7599: PUSH
7600: LD_INT 24
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: ST_TO_ADDR
7609: GO 7894
7611: LD_INT 43
7613: DOUBLE
7614: EQUAL
7615: IFTRUE 7619
7617: GO 7645
7619: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7620: LD_ADDR_VAR 0 3
7624: PUSH
7625: LD_INT 21
7627: PUSH
7628: LD_INT 22
7630: PUSH
7631: LD_INT 23
7633: PUSH
7634: LD_INT 24
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: ST_TO_ADDR
7643: GO 7894
7645: LD_INT 44
7647: DOUBLE
7648: EQUAL
7649: IFTRUE 7653
7651: GO 7679
7653: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7654: LD_ADDR_VAR 0 3
7658: PUSH
7659: LD_INT 21
7661: PUSH
7662: LD_INT 22
7664: PUSH
7665: LD_INT 23
7667: PUSH
7668: LD_INT 24
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: ST_TO_ADDR
7677: GO 7894
7679: LD_INT 45
7681: DOUBLE
7682: EQUAL
7683: IFTRUE 7687
7685: GO 7713
7687: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7688: LD_ADDR_VAR 0 3
7692: PUSH
7693: LD_INT 21
7695: PUSH
7696: LD_INT 22
7698: PUSH
7699: LD_INT 23
7701: PUSH
7702: LD_INT 24
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: ST_TO_ADDR
7711: GO 7894
7713: LD_INT 49
7715: DOUBLE
7716: EQUAL
7717: IFTRUE 7721
7719: GO 7747
7721: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7722: LD_ADDR_VAR 0 3
7726: PUSH
7727: LD_INT 21
7729: PUSH
7730: LD_INT 22
7732: PUSH
7733: LD_INT 23
7735: PUSH
7736: LD_INT 24
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: ST_TO_ADDR
7745: GO 7894
7747: LD_INT 51
7749: DOUBLE
7750: EQUAL
7751: IFTRUE 7755
7753: GO 7781
7755: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7756: LD_ADDR_VAR 0 3
7760: PUSH
7761: LD_INT 21
7763: PUSH
7764: LD_INT 22
7766: PUSH
7767: LD_INT 23
7769: PUSH
7770: LD_INT 24
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: ST_TO_ADDR
7779: GO 7894
7781: LD_INT 52
7783: DOUBLE
7784: EQUAL
7785: IFTRUE 7789
7787: GO 7815
7789: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7790: LD_ADDR_VAR 0 3
7794: PUSH
7795: LD_INT 21
7797: PUSH
7798: LD_INT 22
7800: PUSH
7801: LD_INT 23
7803: PUSH
7804: LD_INT 24
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: ST_TO_ADDR
7813: GO 7894
7815: LD_INT 53
7817: DOUBLE
7818: EQUAL
7819: IFTRUE 7823
7821: GO 7841
7823: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7824: LD_ADDR_VAR 0 3
7828: PUSH
7829: LD_INT 23
7831: PUSH
7832: LD_INT 24
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: ST_TO_ADDR
7839: GO 7894
7841: LD_INT 46
7843: DOUBLE
7844: EQUAL
7845: IFTRUE 7849
7847: GO 7867
7849: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7850: LD_ADDR_VAR 0 3
7854: PUSH
7855: LD_INT 23
7857: PUSH
7858: LD_INT 24
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: ST_TO_ADDR
7865: GO 7894
7867: LD_INT 47
7869: DOUBLE
7870: EQUAL
7871: IFTRUE 7875
7873: GO 7893
7875: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7876: LD_ADDR_VAR 0 3
7880: PUSH
7881: LD_INT 23
7883: PUSH
7884: LD_INT 24
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: ST_TO_ADDR
7891: GO 7894
7893: POP
// result := ( chassis in result ) ;
7894: LD_ADDR_VAR 0 3
7898: PUSH
7899: LD_VAR 0 1
7903: PUSH
7904: LD_VAR 0 3
7908: IN
7909: ST_TO_ADDR
// end ;
7910: LD_VAR 0 3
7914: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7915: LD_INT 0
7917: PPUSH
7918: PPUSH
7919: PPUSH
7920: PPUSH
7921: PPUSH
7922: PPUSH
7923: PPUSH
// result := array ;
7924: LD_ADDR_VAR 0 5
7928: PUSH
7929: LD_VAR 0 1
7933: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7934: LD_VAR 0 1
7938: NOT
7939: PUSH
7940: LD_VAR 0 2
7944: NOT
7945: OR
7946: PUSH
7947: LD_VAR 0 3
7951: NOT
7952: OR
7953: PUSH
7954: LD_VAR 0 2
7958: PUSH
7959: LD_VAR 0 1
7963: GREATER
7964: OR
7965: PUSH
7966: LD_VAR 0 3
7970: PUSH
7971: LD_VAR 0 1
7975: GREATER
7976: OR
7977: IFFALSE 7981
// exit ;
7979: GO 8277
// if direction then
7981: LD_VAR 0 4
7985: IFFALSE 8049
// begin d := 1 ;
7987: LD_ADDR_VAR 0 9
7991: PUSH
7992: LD_INT 1
7994: ST_TO_ADDR
// if i_from > i_to then
7995: LD_VAR 0 2
7999: PUSH
8000: LD_VAR 0 3
8004: GREATER
8005: IFFALSE 8031
// length := ( array - i_from ) + i_to else
8007: LD_ADDR_VAR 0 11
8011: PUSH
8012: LD_VAR 0 1
8016: PUSH
8017: LD_VAR 0 2
8021: MINUS
8022: PUSH
8023: LD_VAR 0 3
8027: PLUS
8028: ST_TO_ADDR
8029: GO 8047
// length := i_to - i_from ;
8031: LD_ADDR_VAR 0 11
8035: PUSH
8036: LD_VAR 0 3
8040: PUSH
8041: LD_VAR 0 2
8045: MINUS
8046: ST_TO_ADDR
// end else
8047: GO 8110
// begin d := - 1 ;
8049: LD_ADDR_VAR 0 9
8053: PUSH
8054: LD_INT 1
8056: NEG
8057: ST_TO_ADDR
// if i_from > i_to then
8058: LD_VAR 0 2
8062: PUSH
8063: LD_VAR 0 3
8067: GREATER
8068: IFFALSE 8088
// length := i_from - i_to else
8070: LD_ADDR_VAR 0 11
8074: PUSH
8075: LD_VAR 0 2
8079: PUSH
8080: LD_VAR 0 3
8084: MINUS
8085: ST_TO_ADDR
8086: GO 8110
// length := ( array - i_to ) + i_from ;
8088: LD_ADDR_VAR 0 11
8092: PUSH
8093: LD_VAR 0 1
8097: PUSH
8098: LD_VAR 0 3
8102: MINUS
8103: PUSH
8104: LD_VAR 0 2
8108: PLUS
8109: ST_TO_ADDR
// end ; if not length then
8110: LD_VAR 0 11
8114: NOT
8115: IFFALSE 8119
// exit ;
8117: GO 8277
// tmp := array ;
8119: LD_ADDR_VAR 0 10
8123: PUSH
8124: LD_VAR 0 1
8128: ST_TO_ADDR
// for i = 1 to length do
8129: LD_ADDR_VAR 0 6
8133: PUSH
8134: DOUBLE
8135: LD_INT 1
8137: DEC
8138: ST_TO_ADDR
8139: LD_VAR 0 11
8143: PUSH
8144: FOR_TO
8145: IFFALSE 8265
// begin for j = 1 to array do
8147: LD_ADDR_VAR 0 7
8151: PUSH
8152: DOUBLE
8153: LD_INT 1
8155: DEC
8156: ST_TO_ADDR
8157: LD_VAR 0 1
8161: PUSH
8162: FOR_TO
8163: IFFALSE 8251
// begin k := j + d ;
8165: LD_ADDR_VAR 0 8
8169: PUSH
8170: LD_VAR 0 7
8174: PUSH
8175: LD_VAR 0 9
8179: PLUS
8180: ST_TO_ADDR
// if k > array then
8181: LD_VAR 0 8
8185: PUSH
8186: LD_VAR 0 1
8190: GREATER
8191: IFFALSE 8201
// k := 1 ;
8193: LD_ADDR_VAR 0 8
8197: PUSH
8198: LD_INT 1
8200: ST_TO_ADDR
// if not k then
8201: LD_VAR 0 8
8205: NOT
8206: IFFALSE 8218
// k := array ;
8208: LD_ADDR_VAR 0 8
8212: PUSH
8213: LD_VAR 0 1
8217: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
8218: LD_ADDR_VAR 0 10
8222: PUSH
8223: LD_VAR 0 10
8227: PPUSH
8228: LD_VAR 0 8
8232: PPUSH
8233: LD_VAR 0 1
8237: PUSH
8238: LD_VAR 0 7
8242: ARRAY
8243: PPUSH
8244: CALL_OW 1
8248: ST_TO_ADDR
// end ;
8249: GO 8162
8251: POP
8252: POP
// array := tmp ;
8253: LD_ADDR_VAR 0 1
8257: PUSH
8258: LD_VAR 0 10
8262: ST_TO_ADDR
// end ;
8263: GO 8144
8265: POP
8266: POP
// result := array ;
8267: LD_ADDR_VAR 0 5
8271: PUSH
8272: LD_VAR 0 1
8276: ST_TO_ADDR
// end ;
8277: LD_VAR 0 5
8281: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
8282: LD_INT 0
8284: PPUSH
8285: PPUSH
// result := 0 ;
8286: LD_ADDR_VAR 0 3
8290: PUSH
8291: LD_INT 0
8293: ST_TO_ADDR
// if not array or not value in array then
8294: LD_VAR 0 1
8298: NOT
8299: PUSH
8300: LD_VAR 0 2
8304: PUSH
8305: LD_VAR 0 1
8309: IN
8310: NOT
8311: OR
8312: IFFALSE 8316
// exit ;
8314: GO 8370
// for i = 1 to array do
8316: LD_ADDR_VAR 0 4
8320: PUSH
8321: DOUBLE
8322: LD_INT 1
8324: DEC
8325: ST_TO_ADDR
8326: LD_VAR 0 1
8330: PUSH
8331: FOR_TO
8332: IFFALSE 8368
// if value = array [ i ] then
8334: LD_VAR 0 2
8338: PUSH
8339: LD_VAR 0 1
8343: PUSH
8344: LD_VAR 0 4
8348: ARRAY
8349: EQUAL
8350: IFFALSE 8366
// begin result := i ;
8352: LD_ADDR_VAR 0 3
8356: PUSH
8357: LD_VAR 0 4
8361: ST_TO_ADDR
// exit ;
8362: POP
8363: POP
8364: GO 8370
// end ;
8366: GO 8331
8368: POP
8369: POP
// end ;
8370: LD_VAR 0 3
8374: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8375: LD_INT 0
8377: PPUSH
// vc_chassis := chassis ;
8378: LD_ADDR_OWVAR 37
8382: PUSH
8383: LD_VAR 0 1
8387: ST_TO_ADDR
// vc_engine := engine ;
8388: LD_ADDR_OWVAR 39
8392: PUSH
8393: LD_VAR 0 2
8397: ST_TO_ADDR
// vc_control := control ;
8398: LD_ADDR_OWVAR 38
8402: PUSH
8403: LD_VAR 0 3
8407: ST_TO_ADDR
// vc_weapon := weapon ;
8408: LD_ADDR_OWVAR 40
8412: PUSH
8413: LD_VAR 0 4
8417: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8418: LD_ADDR_OWVAR 41
8422: PUSH
8423: LD_VAR 0 5
8427: ST_TO_ADDR
// end ;
8428: LD_VAR 0 6
8432: RET
// export function WantPlant ( unit ) ; var task ; begin
8433: LD_INT 0
8435: PPUSH
8436: PPUSH
// result := false ;
8437: LD_ADDR_VAR 0 2
8441: PUSH
8442: LD_INT 0
8444: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8445: LD_ADDR_VAR 0 3
8449: PUSH
8450: LD_VAR 0 1
8454: PPUSH
8455: CALL_OW 437
8459: ST_TO_ADDR
// if task then
8460: LD_VAR 0 3
8464: IFFALSE 8492
// if task [ 1 ] [ 1 ] = p then
8466: LD_VAR 0 3
8470: PUSH
8471: LD_INT 1
8473: ARRAY
8474: PUSH
8475: LD_INT 1
8477: ARRAY
8478: PUSH
8479: LD_STRING p
8481: EQUAL
8482: IFFALSE 8492
// result := true ;
8484: LD_ADDR_VAR 0 2
8488: PUSH
8489: LD_INT 1
8491: ST_TO_ADDR
// end ;
8492: LD_VAR 0 2
8496: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8497: LD_INT 0
8499: PPUSH
8500: PPUSH
8501: PPUSH
8502: PPUSH
// if pos < 1 then
8503: LD_VAR 0 2
8507: PUSH
8508: LD_INT 1
8510: LESS
8511: IFFALSE 8515
// exit ;
8513: GO 8818
// if pos = 1 then
8515: LD_VAR 0 2
8519: PUSH
8520: LD_INT 1
8522: EQUAL
8523: IFFALSE 8556
// result := Replace ( arr , pos [ 1 ] , value ) else
8525: LD_ADDR_VAR 0 4
8529: PUSH
8530: LD_VAR 0 1
8534: PPUSH
8535: LD_VAR 0 2
8539: PUSH
8540: LD_INT 1
8542: ARRAY
8543: PPUSH
8544: LD_VAR 0 3
8548: PPUSH
8549: CALL_OW 1
8553: ST_TO_ADDR
8554: GO 8818
// begin tmp := arr ;
8556: LD_ADDR_VAR 0 6
8560: PUSH
8561: LD_VAR 0 1
8565: ST_TO_ADDR
// s_arr := [ tmp ] ;
8566: LD_ADDR_VAR 0 7
8570: PUSH
8571: LD_VAR 0 6
8575: PUSH
8576: EMPTY
8577: LIST
8578: ST_TO_ADDR
// for i = 1 to pos - 1 do
8579: LD_ADDR_VAR 0 5
8583: PUSH
8584: DOUBLE
8585: LD_INT 1
8587: DEC
8588: ST_TO_ADDR
8589: LD_VAR 0 2
8593: PUSH
8594: LD_INT 1
8596: MINUS
8597: PUSH
8598: FOR_TO
8599: IFFALSE 8644
// begin tmp := tmp [ pos [ i ] ] ;
8601: LD_ADDR_VAR 0 6
8605: PUSH
8606: LD_VAR 0 6
8610: PUSH
8611: LD_VAR 0 2
8615: PUSH
8616: LD_VAR 0 5
8620: ARRAY
8621: ARRAY
8622: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8623: LD_ADDR_VAR 0 7
8627: PUSH
8628: LD_VAR 0 7
8632: PUSH
8633: LD_VAR 0 6
8637: PUSH
8638: EMPTY
8639: LIST
8640: ADD
8641: ST_TO_ADDR
// end ;
8642: GO 8598
8644: POP
8645: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8646: LD_ADDR_VAR 0 6
8650: PUSH
8651: LD_VAR 0 6
8655: PPUSH
8656: LD_VAR 0 2
8660: PUSH
8661: LD_VAR 0 2
8665: ARRAY
8666: PPUSH
8667: LD_VAR 0 3
8671: PPUSH
8672: CALL_OW 1
8676: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8677: LD_ADDR_VAR 0 7
8681: PUSH
8682: LD_VAR 0 7
8686: PPUSH
8687: LD_VAR 0 7
8691: PPUSH
8692: LD_VAR 0 6
8696: PPUSH
8697: CALL_OW 1
8701: ST_TO_ADDR
// for i = s_arr downto 2 do
8702: LD_ADDR_VAR 0 5
8706: PUSH
8707: DOUBLE
8708: LD_VAR 0 7
8712: INC
8713: ST_TO_ADDR
8714: LD_INT 2
8716: PUSH
8717: FOR_DOWNTO
8718: IFFALSE 8802
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8720: LD_ADDR_VAR 0 6
8724: PUSH
8725: LD_VAR 0 7
8729: PUSH
8730: LD_VAR 0 5
8734: PUSH
8735: LD_INT 1
8737: MINUS
8738: ARRAY
8739: PPUSH
8740: LD_VAR 0 2
8744: PUSH
8745: LD_VAR 0 5
8749: PUSH
8750: LD_INT 1
8752: MINUS
8753: ARRAY
8754: PPUSH
8755: LD_VAR 0 7
8759: PUSH
8760: LD_VAR 0 5
8764: ARRAY
8765: PPUSH
8766: CALL_OW 1
8770: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8771: LD_ADDR_VAR 0 7
8775: PUSH
8776: LD_VAR 0 7
8780: PPUSH
8781: LD_VAR 0 5
8785: PUSH
8786: LD_INT 1
8788: MINUS
8789: PPUSH
8790: LD_VAR 0 6
8794: PPUSH
8795: CALL_OW 1
8799: ST_TO_ADDR
// end ;
8800: GO 8717
8802: POP
8803: POP
// result := s_arr [ 1 ] ;
8804: LD_ADDR_VAR 0 4
8808: PUSH
8809: LD_VAR 0 7
8813: PUSH
8814: LD_INT 1
8816: ARRAY
8817: ST_TO_ADDR
// end ; end ;
8818: LD_VAR 0 4
8822: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8823: LD_INT 0
8825: PPUSH
8826: PPUSH
// if not list then
8827: LD_VAR 0 1
8831: NOT
8832: IFFALSE 8836
// exit ;
8834: GO 8927
// i := list [ pos1 ] ;
8836: LD_ADDR_VAR 0 5
8840: PUSH
8841: LD_VAR 0 1
8845: PUSH
8846: LD_VAR 0 2
8850: ARRAY
8851: ST_TO_ADDR
// if not i then
8852: LD_VAR 0 5
8856: NOT
8857: IFFALSE 8861
// exit ;
8859: GO 8927
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8861: LD_ADDR_VAR 0 1
8865: PUSH
8866: LD_VAR 0 1
8870: PPUSH
8871: LD_VAR 0 2
8875: PPUSH
8876: LD_VAR 0 1
8880: PUSH
8881: LD_VAR 0 3
8885: ARRAY
8886: PPUSH
8887: CALL_OW 1
8891: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8892: LD_ADDR_VAR 0 1
8896: PUSH
8897: LD_VAR 0 1
8901: PPUSH
8902: LD_VAR 0 3
8906: PPUSH
8907: LD_VAR 0 5
8911: PPUSH
8912: CALL_OW 1
8916: ST_TO_ADDR
// result := list ;
8917: LD_ADDR_VAR 0 4
8921: PUSH
8922: LD_VAR 0 1
8926: ST_TO_ADDR
// end ;
8927: LD_VAR 0 4
8931: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8932: LD_INT 0
8934: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8935: LD_ADDR_VAR 0 5
8939: PUSH
8940: LD_VAR 0 1
8944: PPUSH
8945: CALL_OW 250
8949: PPUSH
8950: LD_VAR 0 1
8954: PPUSH
8955: CALL_OW 251
8959: PPUSH
8960: LD_VAR 0 2
8964: PPUSH
8965: LD_VAR 0 3
8969: PPUSH
8970: LD_VAR 0 4
8974: PPUSH
8975: CALL 8985 0 5
8979: ST_TO_ADDR
// end ;
8980: LD_VAR 0 5
8984: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8985: LD_INT 0
8987: PPUSH
8988: PPUSH
8989: PPUSH
8990: PPUSH
// if not list then
8991: LD_VAR 0 3
8995: NOT
8996: IFFALSE 9000
// exit ;
8998: GO 9388
// result := [ ] ;
9000: LD_ADDR_VAR 0 6
9004: PUSH
9005: EMPTY
9006: ST_TO_ADDR
// for i in list do
9007: LD_ADDR_VAR 0 7
9011: PUSH
9012: LD_VAR 0 3
9016: PUSH
9017: FOR_IN
9018: IFFALSE 9220
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9020: LD_ADDR_VAR 0 9
9024: PUSH
9025: LD_VAR 0 7
9029: PPUSH
9030: LD_VAR 0 1
9034: PPUSH
9035: LD_VAR 0 2
9039: PPUSH
9040: CALL_OW 297
9044: ST_TO_ADDR
// if not result then
9045: LD_VAR 0 6
9049: NOT
9050: IFFALSE 9076
// result := [ [ i , tmp ] ] else
9052: LD_ADDR_VAR 0 6
9056: PUSH
9057: LD_VAR 0 7
9061: PUSH
9062: LD_VAR 0 9
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: PUSH
9071: EMPTY
9072: LIST
9073: ST_TO_ADDR
9074: GO 9218
// begin if result [ result ] [ 2 ] < tmp then
9076: LD_VAR 0 6
9080: PUSH
9081: LD_VAR 0 6
9085: ARRAY
9086: PUSH
9087: LD_INT 2
9089: ARRAY
9090: PUSH
9091: LD_VAR 0 9
9095: LESS
9096: IFFALSE 9138
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9098: LD_ADDR_VAR 0 6
9102: PUSH
9103: LD_VAR 0 6
9107: PPUSH
9108: LD_VAR 0 6
9112: PUSH
9113: LD_INT 1
9115: PLUS
9116: PPUSH
9117: LD_VAR 0 7
9121: PUSH
9122: LD_VAR 0 9
9126: PUSH
9127: EMPTY
9128: LIST
9129: LIST
9130: PPUSH
9131: CALL_OW 2
9135: ST_TO_ADDR
9136: GO 9218
// for j = 1 to result do
9138: LD_ADDR_VAR 0 8
9142: PUSH
9143: DOUBLE
9144: LD_INT 1
9146: DEC
9147: ST_TO_ADDR
9148: LD_VAR 0 6
9152: PUSH
9153: FOR_TO
9154: IFFALSE 9216
// begin if tmp < result [ j ] [ 2 ] then
9156: LD_VAR 0 9
9160: PUSH
9161: LD_VAR 0 6
9165: PUSH
9166: LD_VAR 0 8
9170: ARRAY
9171: PUSH
9172: LD_INT 2
9174: ARRAY
9175: LESS
9176: IFFALSE 9214
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9178: LD_ADDR_VAR 0 6
9182: PUSH
9183: LD_VAR 0 6
9187: PPUSH
9188: LD_VAR 0 8
9192: PPUSH
9193: LD_VAR 0 7
9197: PUSH
9198: LD_VAR 0 9
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PPUSH
9207: CALL_OW 2
9211: ST_TO_ADDR
// break ;
9212: GO 9216
// end ; end ;
9214: GO 9153
9216: POP
9217: POP
// end ; end ;
9218: GO 9017
9220: POP
9221: POP
// if result and not asc then
9222: LD_VAR 0 6
9226: PUSH
9227: LD_VAR 0 4
9231: NOT
9232: AND
9233: IFFALSE 9308
// begin tmp := result ;
9235: LD_ADDR_VAR 0 9
9239: PUSH
9240: LD_VAR 0 6
9244: ST_TO_ADDR
// for i = tmp downto 1 do
9245: LD_ADDR_VAR 0 7
9249: PUSH
9250: DOUBLE
9251: LD_VAR 0 9
9255: INC
9256: ST_TO_ADDR
9257: LD_INT 1
9259: PUSH
9260: FOR_DOWNTO
9261: IFFALSE 9306
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9263: LD_ADDR_VAR 0 6
9267: PUSH
9268: LD_VAR 0 6
9272: PPUSH
9273: LD_VAR 0 9
9277: PUSH
9278: LD_VAR 0 7
9282: MINUS
9283: PUSH
9284: LD_INT 1
9286: PLUS
9287: PPUSH
9288: LD_VAR 0 9
9292: PUSH
9293: LD_VAR 0 7
9297: ARRAY
9298: PPUSH
9299: CALL_OW 1
9303: ST_TO_ADDR
9304: GO 9260
9306: POP
9307: POP
// end ; tmp := [ ] ;
9308: LD_ADDR_VAR 0 9
9312: PUSH
9313: EMPTY
9314: ST_TO_ADDR
// if mode then
9315: LD_VAR 0 5
9319: IFFALSE 9388
// begin for i = 1 to result do
9321: LD_ADDR_VAR 0 7
9325: PUSH
9326: DOUBLE
9327: LD_INT 1
9329: DEC
9330: ST_TO_ADDR
9331: LD_VAR 0 6
9335: PUSH
9336: FOR_TO
9337: IFFALSE 9376
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9339: LD_ADDR_VAR 0 9
9343: PUSH
9344: LD_VAR 0 9
9348: PPUSH
9349: LD_VAR 0 7
9353: PPUSH
9354: LD_VAR 0 6
9358: PUSH
9359: LD_VAR 0 7
9363: ARRAY
9364: PUSH
9365: LD_INT 1
9367: ARRAY
9368: PPUSH
9369: CALL_OW 1
9373: ST_TO_ADDR
9374: GO 9336
9376: POP
9377: POP
// result := tmp ;
9378: LD_ADDR_VAR 0 6
9382: PUSH
9383: LD_VAR 0 9
9387: ST_TO_ADDR
// end ; end ;
9388: LD_VAR 0 6
9392: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9393: LD_INT 0
9395: PPUSH
9396: PPUSH
9397: PPUSH
9398: PPUSH
9399: PPUSH
9400: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9401: LD_ADDR_VAR 0 5
9405: PUSH
9406: LD_INT 0
9408: PUSH
9409: LD_INT 0
9411: PUSH
9412: LD_INT 0
9414: PUSH
9415: EMPTY
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: ST_TO_ADDR
// if not x or not y then
9423: LD_VAR 0 2
9427: NOT
9428: PUSH
9429: LD_VAR 0 3
9433: NOT
9434: OR
9435: IFFALSE 9439
// exit ;
9437: GO 11091
// if not range then
9439: LD_VAR 0 4
9443: NOT
9444: IFFALSE 9454
// range := 10 ;
9446: LD_ADDR_VAR 0 4
9450: PUSH
9451: LD_INT 10
9453: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9454: LD_ADDR_VAR 0 8
9458: PUSH
9459: LD_INT 81
9461: PUSH
9462: LD_VAR 0 1
9466: PUSH
9467: EMPTY
9468: LIST
9469: LIST
9470: PUSH
9471: LD_INT 92
9473: PUSH
9474: LD_VAR 0 2
9478: PUSH
9479: LD_VAR 0 3
9483: PUSH
9484: LD_VAR 0 4
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: PUSH
9495: LD_INT 3
9497: PUSH
9498: LD_INT 21
9500: PUSH
9501: LD_INT 3
9503: PUSH
9504: EMPTY
9505: LIST
9506: LIST
9507: PUSH
9508: EMPTY
9509: LIST
9510: LIST
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: LIST
9516: PPUSH
9517: CALL_OW 69
9521: ST_TO_ADDR
// if not tmp then
9522: LD_VAR 0 8
9526: NOT
9527: IFFALSE 9531
// exit ;
9529: GO 11091
// for i in tmp do
9531: LD_ADDR_VAR 0 6
9535: PUSH
9536: LD_VAR 0 8
9540: PUSH
9541: FOR_IN
9542: IFFALSE 11066
// begin points := [ 0 , 0 , 0 ] ;
9544: LD_ADDR_VAR 0 9
9548: PUSH
9549: LD_INT 0
9551: PUSH
9552: LD_INT 0
9554: PUSH
9555: LD_INT 0
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: LIST
9562: ST_TO_ADDR
// bpoints := 1 ;
9563: LD_ADDR_VAR 0 10
9567: PUSH
9568: LD_INT 1
9570: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9571: LD_VAR 0 6
9575: PPUSH
9576: CALL_OW 247
9580: PUSH
9581: LD_INT 1
9583: DOUBLE
9584: EQUAL
9585: IFTRUE 9589
9587: GO 10167
9589: POP
// begin if GetClass ( i ) = 1 then
9590: LD_VAR 0 6
9594: PPUSH
9595: CALL_OW 257
9599: PUSH
9600: LD_INT 1
9602: EQUAL
9603: IFFALSE 9624
// points := [ 10 , 5 , 3 ] ;
9605: LD_ADDR_VAR 0 9
9609: PUSH
9610: LD_INT 10
9612: PUSH
9613: LD_INT 5
9615: PUSH
9616: LD_INT 3
9618: PUSH
9619: EMPTY
9620: LIST
9621: LIST
9622: LIST
9623: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9624: LD_VAR 0 6
9628: PPUSH
9629: CALL_OW 257
9633: PUSH
9634: LD_INT 2
9636: PUSH
9637: LD_INT 3
9639: PUSH
9640: LD_INT 4
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: LIST
9647: IN
9648: IFFALSE 9669
// points := [ 3 , 2 , 1 ] ;
9650: LD_ADDR_VAR 0 9
9654: PUSH
9655: LD_INT 3
9657: PUSH
9658: LD_INT 2
9660: PUSH
9661: LD_INT 1
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: LIST
9668: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9669: LD_VAR 0 6
9673: PPUSH
9674: CALL_OW 257
9678: PUSH
9679: LD_INT 5
9681: EQUAL
9682: IFFALSE 9703
// points := [ 130 , 5 , 2 ] ;
9684: LD_ADDR_VAR 0 9
9688: PUSH
9689: LD_INT 130
9691: PUSH
9692: LD_INT 5
9694: PUSH
9695: LD_INT 2
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: LIST
9702: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9703: LD_VAR 0 6
9707: PPUSH
9708: CALL_OW 257
9712: PUSH
9713: LD_INT 8
9715: EQUAL
9716: IFFALSE 9737
// points := [ 35 , 35 , 30 ] ;
9718: LD_ADDR_VAR 0 9
9722: PUSH
9723: LD_INT 35
9725: PUSH
9726: LD_INT 35
9728: PUSH
9729: LD_INT 30
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: LIST
9736: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9737: LD_VAR 0 6
9741: PPUSH
9742: CALL_OW 257
9746: PUSH
9747: LD_INT 9
9749: EQUAL
9750: IFFALSE 9771
// points := [ 20 , 55 , 40 ] ;
9752: LD_ADDR_VAR 0 9
9756: PUSH
9757: LD_INT 20
9759: PUSH
9760: LD_INT 55
9762: PUSH
9763: LD_INT 40
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: LIST
9770: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9771: LD_VAR 0 6
9775: PPUSH
9776: CALL_OW 257
9780: PUSH
9781: LD_INT 12
9783: PUSH
9784: LD_INT 16
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: IN
9791: IFFALSE 9812
// points := [ 5 , 3 , 2 ] ;
9793: LD_ADDR_VAR 0 9
9797: PUSH
9798: LD_INT 5
9800: PUSH
9801: LD_INT 3
9803: PUSH
9804: LD_INT 2
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: LIST
9811: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9812: LD_VAR 0 6
9816: PPUSH
9817: CALL_OW 257
9821: PUSH
9822: LD_INT 17
9824: EQUAL
9825: IFFALSE 9846
// points := [ 100 , 50 , 75 ] ;
9827: LD_ADDR_VAR 0 9
9831: PUSH
9832: LD_INT 100
9834: PUSH
9835: LD_INT 50
9837: PUSH
9838: LD_INT 75
9840: PUSH
9841: EMPTY
9842: LIST
9843: LIST
9844: LIST
9845: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9846: LD_VAR 0 6
9850: PPUSH
9851: CALL_OW 257
9855: PUSH
9856: LD_INT 15
9858: EQUAL
9859: IFFALSE 9880
// points := [ 10 , 5 , 3 ] ;
9861: LD_ADDR_VAR 0 9
9865: PUSH
9866: LD_INT 10
9868: PUSH
9869: LD_INT 5
9871: PUSH
9872: LD_INT 3
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: LIST
9879: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9880: LD_VAR 0 6
9884: PPUSH
9885: CALL_OW 257
9889: PUSH
9890: LD_INT 14
9892: EQUAL
9893: IFFALSE 9914
// points := [ 10 , 0 , 0 ] ;
9895: LD_ADDR_VAR 0 9
9899: PUSH
9900: LD_INT 10
9902: PUSH
9903: LD_INT 0
9905: PUSH
9906: LD_INT 0
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: LIST
9913: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9914: LD_VAR 0 6
9918: PPUSH
9919: CALL_OW 257
9923: PUSH
9924: LD_INT 11
9926: EQUAL
9927: IFFALSE 9948
// points := [ 30 , 10 , 5 ] ;
9929: LD_ADDR_VAR 0 9
9933: PUSH
9934: LD_INT 30
9936: PUSH
9937: LD_INT 10
9939: PUSH
9940: LD_INT 5
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: LIST
9947: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9948: LD_VAR 0 1
9952: PPUSH
9953: LD_INT 5
9955: PPUSH
9956: CALL_OW 321
9960: PUSH
9961: LD_INT 2
9963: EQUAL
9964: IFFALSE 9981
// bpoints := bpoints * 1.8 ;
9966: LD_ADDR_VAR 0 10
9970: PUSH
9971: LD_VAR 0 10
9975: PUSH
9976: LD_REAL  1.80000000000000E+0000
9979: MUL
9980: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9981: LD_VAR 0 6
9985: PPUSH
9986: CALL_OW 257
9990: PUSH
9991: LD_INT 1
9993: PUSH
9994: LD_INT 2
9996: PUSH
9997: LD_INT 3
9999: PUSH
10000: LD_INT 4
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: IN
10009: PUSH
10010: LD_VAR 0 1
10014: PPUSH
10015: LD_INT 51
10017: PPUSH
10018: CALL_OW 321
10022: PUSH
10023: LD_INT 2
10025: EQUAL
10026: AND
10027: IFFALSE 10044
// bpoints := bpoints * 1.2 ;
10029: LD_ADDR_VAR 0 10
10033: PUSH
10034: LD_VAR 0 10
10038: PUSH
10039: LD_REAL  1.20000000000000E+0000
10042: MUL
10043: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10044: LD_VAR 0 6
10048: PPUSH
10049: CALL_OW 257
10053: PUSH
10054: LD_INT 5
10056: PUSH
10057: LD_INT 7
10059: PUSH
10060: LD_INT 9
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: LIST
10067: IN
10068: PUSH
10069: LD_VAR 0 1
10073: PPUSH
10074: LD_INT 52
10076: PPUSH
10077: CALL_OW 321
10081: PUSH
10082: LD_INT 2
10084: EQUAL
10085: AND
10086: IFFALSE 10103
// bpoints := bpoints * 1.5 ;
10088: LD_ADDR_VAR 0 10
10092: PUSH
10093: LD_VAR 0 10
10097: PUSH
10098: LD_REAL  1.50000000000000E+0000
10101: MUL
10102: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10103: LD_VAR 0 1
10107: PPUSH
10108: LD_INT 66
10110: PPUSH
10111: CALL_OW 321
10115: PUSH
10116: LD_INT 2
10118: EQUAL
10119: IFFALSE 10136
// bpoints := bpoints * 1.1 ;
10121: LD_ADDR_VAR 0 10
10125: PUSH
10126: LD_VAR 0 10
10130: PUSH
10131: LD_REAL  1.10000000000000E+0000
10134: MUL
10135: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10136: LD_ADDR_VAR 0 10
10140: PUSH
10141: LD_VAR 0 10
10145: PUSH
10146: LD_VAR 0 6
10150: PPUSH
10151: LD_INT 1
10153: PPUSH
10154: CALL_OW 259
10158: PUSH
10159: LD_REAL  1.15000000000000E+0000
10162: MUL
10163: MUL
10164: ST_TO_ADDR
// end ; unit_vehicle :
10165: GO 10995
10167: LD_INT 2
10169: DOUBLE
10170: EQUAL
10171: IFTRUE 10175
10173: GO 10983
10175: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10176: LD_VAR 0 6
10180: PPUSH
10181: CALL_OW 264
10185: PUSH
10186: LD_INT 2
10188: PUSH
10189: LD_INT 42
10191: PUSH
10192: LD_INT 24
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: LIST
10199: IN
10200: IFFALSE 10221
// points := [ 25 , 5 , 3 ] ;
10202: LD_ADDR_VAR 0 9
10206: PUSH
10207: LD_INT 25
10209: PUSH
10210: LD_INT 5
10212: PUSH
10213: LD_INT 3
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: LIST
10220: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10221: LD_VAR 0 6
10225: PPUSH
10226: CALL_OW 264
10230: PUSH
10231: LD_INT 4
10233: PUSH
10234: LD_INT 43
10236: PUSH
10237: LD_INT 25
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: LIST
10244: IN
10245: IFFALSE 10266
// points := [ 40 , 15 , 5 ] ;
10247: LD_ADDR_VAR 0 9
10251: PUSH
10252: LD_INT 40
10254: PUSH
10255: LD_INT 15
10257: PUSH
10258: LD_INT 5
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: LIST
10265: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10266: LD_VAR 0 6
10270: PPUSH
10271: CALL_OW 264
10275: PUSH
10276: LD_INT 3
10278: PUSH
10279: LD_INT 23
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: IN
10286: IFFALSE 10307
// points := [ 7 , 25 , 8 ] ;
10288: LD_ADDR_VAR 0 9
10292: PUSH
10293: LD_INT 7
10295: PUSH
10296: LD_INT 25
10298: PUSH
10299: LD_INT 8
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: LIST
10306: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10307: LD_VAR 0 6
10311: PPUSH
10312: CALL_OW 264
10316: PUSH
10317: LD_INT 5
10319: PUSH
10320: LD_INT 27
10322: PUSH
10323: LD_INT 44
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: LIST
10330: IN
10331: IFFALSE 10352
// points := [ 14 , 50 , 16 ] ;
10333: LD_ADDR_VAR 0 9
10337: PUSH
10338: LD_INT 14
10340: PUSH
10341: LD_INT 50
10343: PUSH
10344: LD_INT 16
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: LIST
10351: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10352: LD_VAR 0 6
10356: PPUSH
10357: CALL_OW 264
10361: PUSH
10362: LD_INT 6
10364: PUSH
10365: LD_INT 46
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: IN
10372: IFFALSE 10393
// points := [ 32 , 120 , 70 ] ;
10374: LD_ADDR_VAR 0 9
10378: PUSH
10379: LD_INT 32
10381: PUSH
10382: LD_INT 120
10384: PUSH
10385: LD_INT 70
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: LIST
10392: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10393: LD_VAR 0 6
10397: PPUSH
10398: CALL_OW 264
10402: PUSH
10403: LD_INT 7
10405: PUSH
10406: LD_INT 28
10408: PUSH
10409: LD_INT 45
10411: PUSH
10412: LD_EXP 91
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: IN
10423: IFFALSE 10444
// points := [ 35 , 20 , 45 ] ;
10425: LD_ADDR_VAR 0 9
10429: PUSH
10430: LD_INT 35
10432: PUSH
10433: LD_INT 20
10435: PUSH
10436: LD_INT 45
10438: PUSH
10439: EMPTY
10440: LIST
10441: LIST
10442: LIST
10443: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10444: LD_VAR 0 6
10448: PPUSH
10449: CALL_OW 264
10453: PUSH
10454: LD_INT 47
10456: PUSH
10457: EMPTY
10458: LIST
10459: IN
10460: IFFALSE 10481
// points := [ 67 , 45 , 75 ] ;
10462: LD_ADDR_VAR 0 9
10466: PUSH
10467: LD_INT 67
10469: PUSH
10470: LD_INT 45
10472: PUSH
10473: LD_INT 75
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: LIST
10480: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10481: LD_VAR 0 6
10485: PPUSH
10486: CALL_OW 264
10490: PUSH
10491: LD_INT 26
10493: PUSH
10494: EMPTY
10495: LIST
10496: IN
10497: IFFALSE 10518
// points := [ 120 , 30 , 80 ] ;
10499: LD_ADDR_VAR 0 9
10503: PUSH
10504: LD_INT 120
10506: PUSH
10507: LD_INT 30
10509: PUSH
10510: LD_INT 80
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: LIST
10517: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10518: LD_VAR 0 6
10522: PPUSH
10523: CALL_OW 264
10527: PUSH
10528: LD_INT 22
10530: PUSH
10531: EMPTY
10532: LIST
10533: IN
10534: IFFALSE 10555
// points := [ 40 , 1 , 1 ] ;
10536: LD_ADDR_VAR 0 9
10540: PUSH
10541: LD_INT 40
10543: PUSH
10544: LD_INT 1
10546: PUSH
10547: LD_INT 1
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: LIST
10554: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10555: LD_VAR 0 6
10559: PPUSH
10560: CALL_OW 264
10564: PUSH
10565: LD_INT 29
10567: PUSH
10568: EMPTY
10569: LIST
10570: IN
10571: IFFALSE 10592
// points := [ 70 , 200 , 400 ] ;
10573: LD_ADDR_VAR 0 9
10577: PUSH
10578: LD_INT 70
10580: PUSH
10581: LD_INT 200
10583: PUSH
10584: LD_INT 400
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: LIST
10591: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10592: LD_VAR 0 6
10596: PPUSH
10597: CALL_OW 264
10601: PUSH
10602: LD_INT 14
10604: PUSH
10605: LD_INT 53
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: IN
10612: IFFALSE 10633
// points := [ 40 , 10 , 20 ] ;
10614: LD_ADDR_VAR 0 9
10618: PUSH
10619: LD_INT 40
10621: PUSH
10622: LD_INT 10
10624: PUSH
10625: LD_INT 20
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: LIST
10632: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10633: LD_VAR 0 6
10637: PPUSH
10638: CALL_OW 264
10642: PUSH
10643: LD_INT 9
10645: PUSH
10646: EMPTY
10647: LIST
10648: IN
10649: IFFALSE 10670
// points := [ 5 , 70 , 20 ] ;
10651: LD_ADDR_VAR 0 9
10655: PUSH
10656: LD_INT 5
10658: PUSH
10659: LD_INT 70
10661: PUSH
10662: LD_INT 20
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: LIST
10669: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10670: LD_VAR 0 6
10674: PPUSH
10675: CALL_OW 264
10679: PUSH
10680: LD_INT 10
10682: PUSH
10683: EMPTY
10684: LIST
10685: IN
10686: IFFALSE 10707
// points := [ 35 , 110 , 70 ] ;
10688: LD_ADDR_VAR 0 9
10692: PUSH
10693: LD_INT 35
10695: PUSH
10696: LD_INT 110
10698: PUSH
10699: LD_INT 70
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: LIST
10706: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10707: LD_VAR 0 6
10711: PPUSH
10712: CALL_OW 265
10716: PUSH
10717: LD_INT 25
10719: EQUAL
10720: IFFALSE 10741
// points := [ 80 , 65 , 100 ] ;
10722: LD_ADDR_VAR 0 9
10726: PUSH
10727: LD_INT 80
10729: PUSH
10730: LD_INT 65
10732: PUSH
10733: LD_INT 100
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: LIST
10740: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10741: LD_VAR 0 6
10745: PPUSH
10746: CALL_OW 263
10750: PUSH
10751: LD_INT 1
10753: EQUAL
10754: IFFALSE 10789
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10756: LD_ADDR_VAR 0 10
10760: PUSH
10761: LD_VAR 0 10
10765: PUSH
10766: LD_VAR 0 6
10770: PPUSH
10771: CALL_OW 311
10775: PPUSH
10776: LD_INT 3
10778: PPUSH
10779: CALL_OW 259
10783: PUSH
10784: LD_INT 4
10786: MUL
10787: MUL
10788: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10789: LD_VAR 0 6
10793: PPUSH
10794: CALL_OW 263
10798: PUSH
10799: LD_INT 2
10801: EQUAL
10802: IFFALSE 10853
// begin j := IsControledBy ( i ) ;
10804: LD_ADDR_VAR 0 7
10808: PUSH
10809: LD_VAR 0 6
10813: PPUSH
10814: CALL_OW 312
10818: ST_TO_ADDR
// if j then
10819: LD_VAR 0 7
10823: IFFALSE 10853
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10825: LD_ADDR_VAR 0 10
10829: PUSH
10830: LD_VAR 0 10
10834: PUSH
10835: LD_VAR 0 7
10839: PPUSH
10840: LD_INT 3
10842: PPUSH
10843: CALL_OW 259
10847: PUSH
10848: LD_INT 3
10850: MUL
10851: MUL
10852: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10853: LD_VAR 0 6
10857: PPUSH
10858: CALL_OW 264
10862: PUSH
10863: LD_INT 5
10865: PUSH
10866: LD_INT 6
10868: PUSH
10869: LD_INT 46
10871: PUSH
10872: LD_INT 44
10874: PUSH
10875: LD_INT 47
10877: PUSH
10878: LD_INT 45
10880: PUSH
10881: LD_INT 28
10883: PUSH
10884: LD_INT 7
10886: PUSH
10887: LD_INT 27
10889: PUSH
10890: LD_INT 29
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: IN
10905: PUSH
10906: LD_VAR 0 1
10910: PPUSH
10911: LD_INT 52
10913: PPUSH
10914: CALL_OW 321
10918: PUSH
10919: LD_INT 2
10921: EQUAL
10922: AND
10923: IFFALSE 10940
// bpoints := bpoints * 1.2 ;
10925: LD_ADDR_VAR 0 10
10929: PUSH
10930: LD_VAR 0 10
10934: PUSH
10935: LD_REAL  1.20000000000000E+0000
10938: MUL
10939: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10940: LD_VAR 0 6
10944: PPUSH
10945: CALL_OW 264
10949: PUSH
10950: LD_INT 6
10952: PUSH
10953: LD_INT 46
10955: PUSH
10956: LD_INT 47
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: LIST
10963: IN
10964: IFFALSE 10981
// bpoints := bpoints * 1.2 ;
10966: LD_ADDR_VAR 0 10
10970: PUSH
10971: LD_VAR 0 10
10975: PUSH
10976: LD_REAL  1.20000000000000E+0000
10979: MUL
10980: ST_TO_ADDR
// end ; unit_building :
10981: GO 10995
10983: LD_INT 3
10985: DOUBLE
10986: EQUAL
10987: IFTRUE 10991
10989: GO 10994
10991: POP
// ; end ;
10992: GO 10995
10994: POP
// for j = 1 to 3 do
10995: LD_ADDR_VAR 0 7
10999: PUSH
11000: DOUBLE
11001: LD_INT 1
11003: DEC
11004: ST_TO_ADDR
11005: LD_INT 3
11007: PUSH
11008: FOR_TO
11009: IFFALSE 11062
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11011: LD_ADDR_VAR 0 5
11015: PUSH
11016: LD_VAR 0 5
11020: PPUSH
11021: LD_VAR 0 7
11025: PPUSH
11026: LD_VAR 0 5
11030: PUSH
11031: LD_VAR 0 7
11035: ARRAY
11036: PUSH
11037: LD_VAR 0 9
11041: PUSH
11042: LD_VAR 0 7
11046: ARRAY
11047: PUSH
11048: LD_VAR 0 10
11052: MUL
11053: PLUS
11054: PPUSH
11055: CALL_OW 1
11059: ST_TO_ADDR
11060: GO 11008
11062: POP
11063: POP
// end ;
11064: GO 9541
11066: POP
11067: POP
// result := Replace ( result , 4 , tmp ) ;
11068: LD_ADDR_VAR 0 5
11072: PUSH
11073: LD_VAR 0 5
11077: PPUSH
11078: LD_INT 4
11080: PPUSH
11081: LD_VAR 0 8
11085: PPUSH
11086: CALL_OW 1
11090: ST_TO_ADDR
// end ;
11091: LD_VAR 0 5
11095: RET
// export function DangerAtRange ( unit , range ) ; begin
11096: LD_INT 0
11098: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11099: LD_ADDR_VAR 0 3
11103: PUSH
11104: LD_VAR 0 1
11108: PPUSH
11109: CALL_OW 255
11113: PPUSH
11114: LD_VAR 0 1
11118: PPUSH
11119: CALL_OW 250
11123: PPUSH
11124: LD_VAR 0 1
11128: PPUSH
11129: CALL_OW 251
11133: PPUSH
11134: LD_VAR 0 2
11138: PPUSH
11139: CALL 9393 0 4
11143: ST_TO_ADDR
// end ;
11144: LD_VAR 0 3
11148: RET
// export function DangerInArea ( side , area ) ; begin
11149: LD_INT 0
11151: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11152: LD_ADDR_VAR 0 3
11156: PUSH
11157: LD_VAR 0 2
11161: PPUSH
11162: LD_INT 81
11164: PUSH
11165: LD_VAR 0 1
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PPUSH
11174: CALL_OW 70
11178: ST_TO_ADDR
// end ;
11179: LD_VAR 0 3
11183: RET
// export function IsExtension ( b ) ; begin
11184: LD_INT 0
11186: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11187: LD_ADDR_VAR 0 2
11191: PUSH
11192: LD_VAR 0 1
11196: PUSH
11197: LD_INT 23
11199: PUSH
11200: LD_INT 20
11202: PUSH
11203: LD_INT 22
11205: PUSH
11206: LD_INT 17
11208: PUSH
11209: LD_INT 24
11211: PUSH
11212: LD_INT 21
11214: PUSH
11215: LD_INT 19
11217: PUSH
11218: LD_INT 16
11220: PUSH
11221: LD_INT 25
11223: PUSH
11224: LD_INT 18
11226: PUSH
11227: EMPTY
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: IN
11239: ST_TO_ADDR
// end ;
11240: LD_VAR 0 2
11244: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11245: LD_INT 0
11247: PPUSH
11248: PPUSH
11249: PPUSH
// result := [ ] ;
11250: LD_ADDR_VAR 0 4
11254: PUSH
11255: EMPTY
11256: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11257: LD_ADDR_VAR 0 5
11261: PUSH
11262: LD_VAR 0 2
11266: PPUSH
11267: LD_INT 21
11269: PUSH
11270: LD_INT 3
11272: PUSH
11273: EMPTY
11274: LIST
11275: LIST
11276: PPUSH
11277: CALL_OW 70
11281: ST_TO_ADDR
// if not tmp then
11282: LD_VAR 0 5
11286: NOT
11287: IFFALSE 11291
// exit ;
11289: GO 11355
// if checkLink then
11291: LD_VAR 0 3
11295: IFFALSE 11345
// begin for i in tmp do
11297: LD_ADDR_VAR 0 6
11301: PUSH
11302: LD_VAR 0 5
11306: PUSH
11307: FOR_IN
11308: IFFALSE 11343
// if GetBase ( i ) <> base then
11310: LD_VAR 0 6
11314: PPUSH
11315: CALL_OW 274
11319: PUSH
11320: LD_VAR 0 1
11324: NONEQUAL
11325: IFFALSE 11341
// ComLinkToBase ( base , i ) ;
11327: LD_VAR 0 1
11331: PPUSH
11332: LD_VAR 0 6
11336: PPUSH
11337: CALL_OW 169
11341: GO 11307
11343: POP
11344: POP
// end ; result := tmp ;
11345: LD_ADDR_VAR 0 4
11349: PUSH
11350: LD_VAR 0 5
11354: ST_TO_ADDR
// end ;
11355: LD_VAR 0 4
11359: RET
// export function ComComplete ( units , b ) ; var i ; begin
11360: LD_INT 0
11362: PPUSH
11363: PPUSH
// if not units then
11364: LD_VAR 0 1
11368: NOT
11369: IFFALSE 11373
// exit ;
11371: GO 11463
// for i in units do
11373: LD_ADDR_VAR 0 4
11377: PUSH
11378: LD_VAR 0 1
11382: PUSH
11383: FOR_IN
11384: IFFALSE 11461
// if BuildingStatus ( b ) = bs_build then
11386: LD_VAR 0 2
11390: PPUSH
11391: CALL_OW 461
11395: PUSH
11396: LD_INT 1
11398: EQUAL
11399: IFFALSE 11459
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11401: LD_VAR 0 4
11405: PPUSH
11406: LD_STRING h
11408: PUSH
11409: LD_VAR 0 2
11413: PPUSH
11414: CALL_OW 250
11418: PUSH
11419: LD_VAR 0 2
11423: PPUSH
11424: CALL_OW 251
11428: PUSH
11429: LD_VAR 0 2
11433: PUSH
11434: LD_INT 0
11436: PUSH
11437: LD_INT 0
11439: PUSH
11440: LD_INT 0
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: PUSH
11452: EMPTY
11453: LIST
11454: PPUSH
11455: CALL_OW 446
11459: GO 11383
11461: POP
11462: POP
// end ;
11463: LD_VAR 0 3
11467: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11468: LD_INT 0
11470: PPUSH
11471: PPUSH
11472: PPUSH
11473: PPUSH
11474: PPUSH
11475: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11476: LD_VAR 0 1
11480: NOT
11481: PUSH
11482: LD_VAR 0 1
11486: PPUSH
11487: CALL_OW 263
11491: PUSH
11492: LD_INT 2
11494: NONEQUAL
11495: OR
11496: IFFALSE 11500
// exit ;
11498: GO 11816
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11500: LD_ADDR_VAR 0 6
11504: PUSH
11505: LD_INT 22
11507: PUSH
11508: LD_VAR 0 1
11512: PPUSH
11513: CALL_OW 255
11517: PUSH
11518: EMPTY
11519: LIST
11520: LIST
11521: PUSH
11522: LD_INT 2
11524: PUSH
11525: LD_INT 30
11527: PUSH
11528: LD_INT 36
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: PUSH
11535: LD_INT 34
11537: PUSH
11538: LD_INT 31
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: LIST
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: PPUSH
11554: CALL_OW 69
11558: ST_TO_ADDR
// if not tmp then
11559: LD_VAR 0 6
11563: NOT
11564: IFFALSE 11568
// exit ;
11566: GO 11816
// result := [ ] ;
11568: LD_ADDR_VAR 0 2
11572: PUSH
11573: EMPTY
11574: ST_TO_ADDR
// for i in tmp do
11575: LD_ADDR_VAR 0 3
11579: PUSH
11580: LD_VAR 0 6
11584: PUSH
11585: FOR_IN
11586: IFFALSE 11657
// begin t := UnitsInside ( i ) ;
11588: LD_ADDR_VAR 0 4
11592: PUSH
11593: LD_VAR 0 3
11597: PPUSH
11598: CALL_OW 313
11602: ST_TO_ADDR
// if t then
11603: LD_VAR 0 4
11607: IFFALSE 11655
// for j in t do
11609: LD_ADDR_VAR 0 7
11613: PUSH
11614: LD_VAR 0 4
11618: PUSH
11619: FOR_IN
11620: IFFALSE 11653
// result := Replace ( result , result + 1 , j ) ;
11622: LD_ADDR_VAR 0 2
11626: PUSH
11627: LD_VAR 0 2
11631: PPUSH
11632: LD_VAR 0 2
11636: PUSH
11637: LD_INT 1
11639: PLUS
11640: PPUSH
11641: LD_VAR 0 7
11645: PPUSH
11646: CALL_OW 1
11650: ST_TO_ADDR
11651: GO 11619
11653: POP
11654: POP
// end ;
11655: GO 11585
11657: POP
11658: POP
// if not result then
11659: LD_VAR 0 2
11663: NOT
11664: IFFALSE 11668
// exit ;
11666: GO 11816
// mech := result [ 1 ] ;
11668: LD_ADDR_VAR 0 5
11672: PUSH
11673: LD_VAR 0 2
11677: PUSH
11678: LD_INT 1
11680: ARRAY
11681: ST_TO_ADDR
// if result > 1 then
11682: LD_VAR 0 2
11686: PUSH
11687: LD_INT 1
11689: GREATER
11690: IFFALSE 11802
// begin for i = 2 to result do
11692: LD_ADDR_VAR 0 3
11696: PUSH
11697: DOUBLE
11698: LD_INT 2
11700: DEC
11701: ST_TO_ADDR
11702: LD_VAR 0 2
11706: PUSH
11707: FOR_TO
11708: IFFALSE 11800
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11710: LD_ADDR_VAR 0 4
11714: PUSH
11715: LD_VAR 0 2
11719: PUSH
11720: LD_VAR 0 3
11724: ARRAY
11725: PPUSH
11726: LD_INT 3
11728: PPUSH
11729: CALL_OW 259
11733: PUSH
11734: LD_VAR 0 2
11738: PUSH
11739: LD_VAR 0 3
11743: ARRAY
11744: PPUSH
11745: CALL_OW 432
11749: MINUS
11750: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11751: LD_VAR 0 4
11755: PUSH
11756: LD_VAR 0 5
11760: PPUSH
11761: LD_INT 3
11763: PPUSH
11764: CALL_OW 259
11768: PUSH
11769: LD_VAR 0 5
11773: PPUSH
11774: CALL_OW 432
11778: MINUS
11779: GREATEREQUAL
11780: IFFALSE 11798
// mech := result [ i ] ;
11782: LD_ADDR_VAR 0 5
11786: PUSH
11787: LD_VAR 0 2
11791: PUSH
11792: LD_VAR 0 3
11796: ARRAY
11797: ST_TO_ADDR
// end ;
11798: GO 11707
11800: POP
11801: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11802: LD_VAR 0 1
11806: PPUSH
11807: LD_VAR 0 5
11811: PPUSH
11812: CALL_OW 135
// end ;
11816: LD_VAR 0 2
11820: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11821: LD_INT 0
11823: PPUSH
11824: PPUSH
11825: PPUSH
11826: PPUSH
11827: PPUSH
11828: PPUSH
11829: PPUSH
11830: PPUSH
11831: PPUSH
11832: PPUSH
11833: PPUSH
11834: PPUSH
11835: PPUSH
// result := [ ] ;
11836: LD_ADDR_VAR 0 7
11840: PUSH
11841: EMPTY
11842: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11843: LD_VAR 0 1
11847: PPUSH
11848: CALL_OW 266
11852: PUSH
11853: LD_INT 0
11855: PUSH
11856: LD_INT 1
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: IN
11863: NOT
11864: IFFALSE 11868
// exit ;
11866: GO 13502
// if name then
11868: LD_VAR 0 3
11872: IFFALSE 11888
// SetBName ( base_dep , name ) ;
11874: LD_VAR 0 1
11878: PPUSH
11879: LD_VAR 0 3
11883: PPUSH
11884: CALL_OW 500
// base := GetBase ( base_dep ) ;
11888: LD_ADDR_VAR 0 15
11892: PUSH
11893: LD_VAR 0 1
11897: PPUSH
11898: CALL_OW 274
11902: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11903: LD_ADDR_VAR 0 16
11907: PUSH
11908: LD_VAR 0 1
11912: PPUSH
11913: CALL_OW 255
11917: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11918: LD_ADDR_VAR 0 17
11922: PUSH
11923: LD_VAR 0 1
11927: PPUSH
11928: CALL_OW 248
11932: ST_TO_ADDR
// if sources then
11933: LD_VAR 0 5
11937: IFFALSE 11984
// for i = 1 to 3 do
11939: LD_ADDR_VAR 0 8
11943: PUSH
11944: DOUBLE
11945: LD_INT 1
11947: DEC
11948: ST_TO_ADDR
11949: LD_INT 3
11951: PUSH
11952: FOR_TO
11953: IFFALSE 11982
// AddResourceType ( base , i , sources [ i ] ) ;
11955: LD_VAR 0 15
11959: PPUSH
11960: LD_VAR 0 8
11964: PPUSH
11965: LD_VAR 0 5
11969: PUSH
11970: LD_VAR 0 8
11974: ARRAY
11975: PPUSH
11976: CALL_OW 276
11980: GO 11952
11982: POP
11983: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11984: LD_ADDR_VAR 0 18
11988: PUSH
11989: LD_VAR 0 15
11993: PPUSH
11994: LD_VAR 0 2
11998: PPUSH
11999: LD_INT 1
12001: PPUSH
12002: CALL 11245 0 3
12006: ST_TO_ADDR
// InitHc ;
12007: CALL_OW 19
// InitUc ;
12011: CALL_OW 18
// uc_side := side ;
12015: LD_ADDR_OWVAR 20
12019: PUSH
12020: LD_VAR 0 16
12024: ST_TO_ADDR
// uc_nation := nation ;
12025: LD_ADDR_OWVAR 21
12029: PUSH
12030: LD_VAR 0 17
12034: ST_TO_ADDR
// if buildings then
12035: LD_VAR 0 18
12039: IFFALSE 13361
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12041: LD_ADDR_VAR 0 19
12045: PUSH
12046: LD_VAR 0 18
12050: PPUSH
12051: LD_INT 2
12053: PUSH
12054: LD_INT 30
12056: PUSH
12057: LD_INT 29
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: PUSH
12064: LD_INT 30
12066: PUSH
12067: LD_INT 30
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: PUSH
12074: EMPTY
12075: LIST
12076: LIST
12077: LIST
12078: PPUSH
12079: CALL_OW 72
12083: ST_TO_ADDR
// if tmp then
12084: LD_VAR 0 19
12088: IFFALSE 12136
// for i in tmp do
12090: LD_ADDR_VAR 0 8
12094: PUSH
12095: LD_VAR 0 19
12099: PUSH
12100: FOR_IN
12101: IFFALSE 12134
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12103: LD_VAR 0 8
12107: PPUSH
12108: CALL_OW 250
12112: PPUSH
12113: LD_VAR 0 8
12117: PPUSH
12118: CALL_OW 251
12122: PPUSH
12123: LD_VAR 0 16
12127: PPUSH
12128: CALL_OW 441
12132: GO 12100
12134: POP
12135: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12136: LD_VAR 0 18
12140: PPUSH
12141: LD_INT 2
12143: PUSH
12144: LD_INT 30
12146: PUSH
12147: LD_INT 32
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PUSH
12154: LD_INT 30
12156: PUSH
12157: LD_INT 33
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: LIST
12168: PPUSH
12169: CALL_OW 72
12173: IFFALSE 12261
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12175: LD_ADDR_VAR 0 8
12179: PUSH
12180: LD_VAR 0 18
12184: PPUSH
12185: LD_INT 2
12187: PUSH
12188: LD_INT 30
12190: PUSH
12191: LD_INT 32
12193: PUSH
12194: EMPTY
12195: LIST
12196: LIST
12197: PUSH
12198: LD_INT 30
12200: PUSH
12201: LD_INT 33
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: LIST
12212: PPUSH
12213: CALL_OW 72
12217: PUSH
12218: FOR_IN
12219: IFFALSE 12259
// begin if not GetBWeapon ( i ) then
12221: LD_VAR 0 8
12225: PPUSH
12226: CALL_OW 269
12230: NOT
12231: IFFALSE 12257
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12233: LD_VAR 0 8
12237: PPUSH
12238: LD_VAR 0 8
12242: PPUSH
12243: LD_VAR 0 2
12247: PPUSH
12248: CALL 13507 0 2
12252: PPUSH
12253: CALL_OW 431
// end ;
12257: GO 12218
12259: POP
12260: POP
// end ; for i = 1 to personel do
12261: LD_ADDR_VAR 0 8
12265: PUSH
12266: DOUBLE
12267: LD_INT 1
12269: DEC
12270: ST_TO_ADDR
12271: LD_VAR 0 6
12275: PUSH
12276: FOR_TO
12277: IFFALSE 13341
// begin if i > 4 then
12279: LD_VAR 0 8
12283: PUSH
12284: LD_INT 4
12286: GREATER
12287: IFFALSE 12291
// break ;
12289: GO 13341
// case i of 1 :
12291: LD_VAR 0 8
12295: PUSH
12296: LD_INT 1
12298: DOUBLE
12299: EQUAL
12300: IFTRUE 12304
12302: GO 12384
12304: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12305: LD_ADDR_VAR 0 12
12309: PUSH
12310: LD_VAR 0 18
12314: PPUSH
12315: LD_INT 22
12317: PUSH
12318: LD_VAR 0 16
12322: PUSH
12323: EMPTY
12324: LIST
12325: LIST
12326: PUSH
12327: LD_INT 58
12329: PUSH
12330: EMPTY
12331: LIST
12332: PUSH
12333: LD_INT 2
12335: PUSH
12336: LD_INT 30
12338: PUSH
12339: LD_INT 32
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PUSH
12346: LD_INT 30
12348: PUSH
12349: LD_INT 4
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: PUSH
12356: LD_INT 30
12358: PUSH
12359: LD_INT 5
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: LIST
12376: PPUSH
12377: CALL_OW 72
12381: ST_TO_ADDR
12382: GO 12606
12384: LD_INT 2
12386: DOUBLE
12387: EQUAL
12388: IFTRUE 12392
12390: GO 12454
12392: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12393: LD_ADDR_VAR 0 12
12397: PUSH
12398: LD_VAR 0 18
12402: PPUSH
12403: LD_INT 22
12405: PUSH
12406: LD_VAR 0 16
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PUSH
12415: LD_INT 2
12417: PUSH
12418: LD_INT 30
12420: PUSH
12421: LD_INT 0
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: PUSH
12428: LD_INT 30
12430: PUSH
12431: LD_INT 1
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: LIST
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PPUSH
12447: CALL_OW 72
12451: ST_TO_ADDR
12452: GO 12606
12454: LD_INT 3
12456: DOUBLE
12457: EQUAL
12458: IFTRUE 12462
12460: GO 12524
12462: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12463: LD_ADDR_VAR 0 12
12467: PUSH
12468: LD_VAR 0 18
12472: PPUSH
12473: LD_INT 22
12475: PUSH
12476: LD_VAR 0 16
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: PUSH
12485: LD_INT 2
12487: PUSH
12488: LD_INT 30
12490: PUSH
12491: LD_INT 2
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: PUSH
12498: LD_INT 30
12500: PUSH
12501: LD_INT 3
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: LIST
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: PPUSH
12517: CALL_OW 72
12521: ST_TO_ADDR
12522: GO 12606
12524: LD_INT 4
12526: DOUBLE
12527: EQUAL
12528: IFTRUE 12532
12530: GO 12605
12532: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12533: LD_ADDR_VAR 0 12
12537: PUSH
12538: LD_VAR 0 18
12542: PPUSH
12543: LD_INT 22
12545: PUSH
12546: LD_VAR 0 16
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: PUSH
12555: LD_INT 2
12557: PUSH
12558: LD_INT 30
12560: PUSH
12561: LD_INT 6
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: PUSH
12568: LD_INT 30
12570: PUSH
12571: LD_INT 7
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: PUSH
12578: LD_INT 30
12580: PUSH
12581: LD_INT 8
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: PPUSH
12598: CALL_OW 72
12602: ST_TO_ADDR
12603: GO 12606
12605: POP
// if i = 1 then
12606: LD_VAR 0 8
12610: PUSH
12611: LD_INT 1
12613: EQUAL
12614: IFFALSE 12725
// begin tmp := [ ] ;
12616: LD_ADDR_VAR 0 19
12620: PUSH
12621: EMPTY
12622: ST_TO_ADDR
// for j in f do
12623: LD_ADDR_VAR 0 9
12627: PUSH
12628: LD_VAR 0 12
12632: PUSH
12633: FOR_IN
12634: IFFALSE 12707
// if GetBType ( j ) = b_bunker then
12636: LD_VAR 0 9
12640: PPUSH
12641: CALL_OW 266
12645: PUSH
12646: LD_INT 32
12648: EQUAL
12649: IFFALSE 12676
// tmp := Insert ( tmp , 1 , j ) else
12651: LD_ADDR_VAR 0 19
12655: PUSH
12656: LD_VAR 0 19
12660: PPUSH
12661: LD_INT 1
12663: PPUSH
12664: LD_VAR 0 9
12668: PPUSH
12669: CALL_OW 2
12673: ST_TO_ADDR
12674: GO 12705
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12676: LD_ADDR_VAR 0 19
12680: PUSH
12681: LD_VAR 0 19
12685: PPUSH
12686: LD_VAR 0 19
12690: PUSH
12691: LD_INT 1
12693: PLUS
12694: PPUSH
12695: LD_VAR 0 9
12699: PPUSH
12700: CALL_OW 2
12704: ST_TO_ADDR
12705: GO 12633
12707: POP
12708: POP
// if tmp then
12709: LD_VAR 0 19
12713: IFFALSE 12725
// f := tmp ;
12715: LD_ADDR_VAR 0 12
12719: PUSH
12720: LD_VAR 0 19
12724: ST_TO_ADDR
// end ; x := personel [ i ] ;
12725: LD_ADDR_VAR 0 13
12729: PUSH
12730: LD_VAR 0 6
12734: PUSH
12735: LD_VAR 0 8
12739: ARRAY
12740: ST_TO_ADDR
// if x = - 1 then
12741: LD_VAR 0 13
12745: PUSH
12746: LD_INT 1
12748: NEG
12749: EQUAL
12750: IFFALSE 12959
// begin for j in f do
12752: LD_ADDR_VAR 0 9
12756: PUSH
12757: LD_VAR 0 12
12761: PUSH
12762: FOR_IN
12763: IFFALSE 12955
// repeat InitHc ;
12765: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12769: LD_VAR 0 9
12773: PPUSH
12774: CALL_OW 266
12778: PUSH
12779: LD_INT 5
12781: EQUAL
12782: IFFALSE 12852
// begin if UnitsInside ( j ) < 3 then
12784: LD_VAR 0 9
12788: PPUSH
12789: CALL_OW 313
12793: PUSH
12794: LD_INT 3
12796: LESS
12797: IFFALSE 12833
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12799: LD_INT 0
12801: PPUSH
12802: LD_INT 5
12804: PUSH
12805: LD_INT 8
12807: PUSH
12808: LD_INT 9
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: LIST
12815: PUSH
12816: LD_VAR 0 17
12820: ARRAY
12821: PPUSH
12822: LD_VAR 0 4
12826: PPUSH
12827: CALL_OW 380
12831: GO 12850
// PrepareHuman ( false , i , skill ) ;
12833: LD_INT 0
12835: PPUSH
12836: LD_VAR 0 8
12840: PPUSH
12841: LD_VAR 0 4
12845: PPUSH
12846: CALL_OW 380
// end else
12850: GO 12869
// PrepareHuman ( false , i , skill ) ;
12852: LD_INT 0
12854: PPUSH
12855: LD_VAR 0 8
12859: PPUSH
12860: LD_VAR 0 4
12864: PPUSH
12865: CALL_OW 380
// un := CreateHuman ;
12869: LD_ADDR_VAR 0 14
12873: PUSH
12874: CALL_OW 44
12878: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12879: LD_ADDR_VAR 0 7
12883: PUSH
12884: LD_VAR 0 7
12888: PPUSH
12889: LD_INT 1
12891: PPUSH
12892: LD_VAR 0 14
12896: PPUSH
12897: CALL_OW 2
12901: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12902: LD_VAR 0 14
12906: PPUSH
12907: LD_VAR 0 9
12911: PPUSH
12912: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12916: LD_VAR 0 9
12920: PPUSH
12921: CALL_OW 313
12925: PUSH
12926: LD_INT 6
12928: EQUAL
12929: PUSH
12930: LD_VAR 0 9
12934: PPUSH
12935: CALL_OW 266
12939: PUSH
12940: LD_INT 32
12942: PUSH
12943: LD_INT 31
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: IN
12950: OR
12951: IFFALSE 12765
12953: GO 12762
12955: POP
12956: POP
// end else
12957: GO 13339
// for j = 1 to x do
12959: LD_ADDR_VAR 0 9
12963: PUSH
12964: DOUBLE
12965: LD_INT 1
12967: DEC
12968: ST_TO_ADDR
12969: LD_VAR 0 13
12973: PUSH
12974: FOR_TO
12975: IFFALSE 13337
// begin InitHc ;
12977: CALL_OW 19
// if not f then
12981: LD_VAR 0 12
12985: NOT
12986: IFFALSE 13075
// begin PrepareHuman ( false , i , skill ) ;
12988: LD_INT 0
12990: PPUSH
12991: LD_VAR 0 8
12995: PPUSH
12996: LD_VAR 0 4
13000: PPUSH
13001: CALL_OW 380
// un := CreateHuman ;
13005: LD_ADDR_VAR 0 14
13009: PUSH
13010: CALL_OW 44
13014: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13015: LD_ADDR_VAR 0 7
13019: PUSH
13020: LD_VAR 0 7
13024: PPUSH
13025: LD_INT 1
13027: PPUSH
13028: LD_VAR 0 14
13032: PPUSH
13033: CALL_OW 2
13037: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13038: LD_VAR 0 14
13042: PPUSH
13043: LD_VAR 0 1
13047: PPUSH
13048: CALL_OW 250
13052: PPUSH
13053: LD_VAR 0 1
13057: PPUSH
13058: CALL_OW 251
13062: PPUSH
13063: LD_INT 10
13065: PPUSH
13066: LD_INT 0
13068: PPUSH
13069: CALL_OW 50
// continue ;
13073: GO 12974
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13075: LD_VAR 0 12
13079: PUSH
13080: LD_INT 1
13082: ARRAY
13083: PPUSH
13084: CALL_OW 313
13088: PUSH
13089: LD_VAR 0 12
13093: PUSH
13094: LD_INT 1
13096: ARRAY
13097: PPUSH
13098: CALL_OW 266
13102: PUSH
13103: LD_INT 32
13105: PUSH
13106: LD_INT 31
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: IN
13113: AND
13114: PUSH
13115: LD_VAR 0 12
13119: PUSH
13120: LD_INT 1
13122: ARRAY
13123: PPUSH
13124: CALL_OW 313
13128: PUSH
13129: LD_INT 6
13131: EQUAL
13132: OR
13133: IFFALSE 13153
// f := Delete ( f , 1 ) ;
13135: LD_ADDR_VAR 0 12
13139: PUSH
13140: LD_VAR 0 12
13144: PPUSH
13145: LD_INT 1
13147: PPUSH
13148: CALL_OW 3
13152: ST_TO_ADDR
// if not f then
13153: LD_VAR 0 12
13157: NOT
13158: IFFALSE 13176
// begin x := x + 2 ;
13160: LD_ADDR_VAR 0 13
13164: PUSH
13165: LD_VAR 0 13
13169: PUSH
13170: LD_INT 2
13172: PLUS
13173: ST_TO_ADDR
// continue ;
13174: GO 12974
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13176: LD_VAR 0 12
13180: PUSH
13181: LD_INT 1
13183: ARRAY
13184: PPUSH
13185: CALL_OW 266
13189: PUSH
13190: LD_INT 5
13192: EQUAL
13193: IFFALSE 13267
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13195: LD_VAR 0 12
13199: PUSH
13200: LD_INT 1
13202: ARRAY
13203: PPUSH
13204: CALL_OW 313
13208: PUSH
13209: LD_INT 3
13211: LESS
13212: IFFALSE 13248
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13214: LD_INT 0
13216: PPUSH
13217: LD_INT 5
13219: PUSH
13220: LD_INT 8
13222: PUSH
13223: LD_INT 9
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: LIST
13230: PUSH
13231: LD_VAR 0 17
13235: ARRAY
13236: PPUSH
13237: LD_VAR 0 4
13241: PPUSH
13242: CALL_OW 380
13246: GO 13265
// PrepareHuman ( false , i , skill ) ;
13248: LD_INT 0
13250: PPUSH
13251: LD_VAR 0 8
13255: PPUSH
13256: LD_VAR 0 4
13260: PPUSH
13261: CALL_OW 380
// end else
13265: GO 13284
// PrepareHuman ( false , i , skill ) ;
13267: LD_INT 0
13269: PPUSH
13270: LD_VAR 0 8
13274: PPUSH
13275: LD_VAR 0 4
13279: PPUSH
13280: CALL_OW 380
// un := CreateHuman ;
13284: LD_ADDR_VAR 0 14
13288: PUSH
13289: CALL_OW 44
13293: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13294: LD_ADDR_VAR 0 7
13298: PUSH
13299: LD_VAR 0 7
13303: PPUSH
13304: LD_INT 1
13306: PPUSH
13307: LD_VAR 0 14
13311: PPUSH
13312: CALL_OW 2
13316: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13317: LD_VAR 0 14
13321: PPUSH
13322: LD_VAR 0 12
13326: PUSH
13327: LD_INT 1
13329: ARRAY
13330: PPUSH
13331: CALL_OW 52
// end ;
13335: GO 12974
13337: POP
13338: POP
// end ;
13339: GO 12276
13341: POP
13342: POP
// result := result ^ buildings ;
13343: LD_ADDR_VAR 0 7
13347: PUSH
13348: LD_VAR 0 7
13352: PUSH
13353: LD_VAR 0 18
13357: ADD
13358: ST_TO_ADDR
// end else
13359: GO 13502
// begin for i = 1 to personel do
13361: LD_ADDR_VAR 0 8
13365: PUSH
13366: DOUBLE
13367: LD_INT 1
13369: DEC
13370: ST_TO_ADDR
13371: LD_VAR 0 6
13375: PUSH
13376: FOR_TO
13377: IFFALSE 13500
// begin if i > 4 then
13379: LD_VAR 0 8
13383: PUSH
13384: LD_INT 4
13386: GREATER
13387: IFFALSE 13391
// break ;
13389: GO 13500
// x := personel [ i ] ;
13391: LD_ADDR_VAR 0 13
13395: PUSH
13396: LD_VAR 0 6
13400: PUSH
13401: LD_VAR 0 8
13405: ARRAY
13406: ST_TO_ADDR
// if x = - 1 then
13407: LD_VAR 0 13
13411: PUSH
13412: LD_INT 1
13414: NEG
13415: EQUAL
13416: IFFALSE 13420
// continue ;
13418: GO 13376
// PrepareHuman ( false , i , skill ) ;
13420: LD_INT 0
13422: PPUSH
13423: LD_VAR 0 8
13427: PPUSH
13428: LD_VAR 0 4
13432: PPUSH
13433: CALL_OW 380
// un := CreateHuman ;
13437: LD_ADDR_VAR 0 14
13441: PUSH
13442: CALL_OW 44
13446: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13447: LD_VAR 0 14
13451: PPUSH
13452: LD_VAR 0 1
13456: PPUSH
13457: CALL_OW 250
13461: PPUSH
13462: LD_VAR 0 1
13466: PPUSH
13467: CALL_OW 251
13471: PPUSH
13472: LD_INT 10
13474: PPUSH
13475: LD_INT 0
13477: PPUSH
13478: CALL_OW 50
// result := result ^ un ;
13482: LD_ADDR_VAR 0 7
13486: PUSH
13487: LD_VAR 0 7
13491: PUSH
13492: LD_VAR 0 14
13496: ADD
13497: ST_TO_ADDR
// end ;
13498: GO 13376
13500: POP
13501: POP
// end ; end ;
13502: LD_VAR 0 7
13506: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13507: LD_INT 0
13509: PPUSH
13510: PPUSH
13511: PPUSH
13512: PPUSH
13513: PPUSH
13514: PPUSH
13515: PPUSH
13516: PPUSH
13517: PPUSH
13518: PPUSH
13519: PPUSH
13520: PPUSH
13521: PPUSH
13522: PPUSH
13523: PPUSH
13524: PPUSH
// result := false ;
13525: LD_ADDR_VAR 0 3
13529: PUSH
13530: LD_INT 0
13532: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13533: LD_VAR 0 1
13537: NOT
13538: PUSH
13539: LD_VAR 0 1
13543: PPUSH
13544: CALL_OW 266
13548: PUSH
13549: LD_INT 32
13551: PUSH
13552: LD_INT 33
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: IN
13559: NOT
13560: OR
13561: IFFALSE 13565
// exit ;
13563: GO 14674
// nat := GetNation ( tower ) ;
13565: LD_ADDR_VAR 0 12
13569: PUSH
13570: LD_VAR 0 1
13574: PPUSH
13575: CALL_OW 248
13579: ST_TO_ADDR
// side := GetSide ( tower ) ;
13580: LD_ADDR_VAR 0 16
13584: PUSH
13585: LD_VAR 0 1
13589: PPUSH
13590: CALL_OW 255
13594: ST_TO_ADDR
// x := GetX ( tower ) ;
13595: LD_ADDR_VAR 0 10
13599: PUSH
13600: LD_VAR 0 1
13604: PPUSH
13605: CALL_OW 250
13609: ST_TO_ADDR
// y := GetY ( tower ) ;
13610: LD_ADDR_VAR 0 11
13614: PUSH
13615: LD_VAR 0 1
13619: PPUSH
13620: CALL_OW 251
13624: ST_TO_ADDR
// if not x or not y then
13625: LD_VAR 0 10
13629: NOT
13630: PUSH
13631: LD_VAR 0 11
13635: NOT
13636: OR
13637: IFFALSE 13641
// exit ;
13639: GO 14674
// weapon := 0 ;
13641: LD_ADDR_VAR 0 18
13645: PUSH
13646: LD_INT 0
13648: ST_TO_ADDR
// fac_list := [ ] ;
13649: LD_ADDR_VAR 0 17
13653: PUSH
13654: EMPTY
13655: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13656: LD_ADDR_VAR 0 6
13660: PUSH
13661: LD_VAR 0 1
13665: PPUSH
13666: CALL_OW 274
13670: PPUSH
13671: LD_VAR 0 2
13675: PPUSH
13676: LD_INT 0
13678: PPUSH
13679: CALL 11245 0 3
13683: PPUSH
13684: LD_INT 30
13686: PUSH
13687: LD_INT 3
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: PPUSH
13694: CALL_OW 72
13698: ST_TO_ADDR
// if not factories then
13699: LD_VAR 0 6
13703: NOT
13704: IFFALSE 13708
// exit ;
13706: GO 14674
// for i in factories do
13708: LD_ADDR_VAR 0 8
13712: PUSH
13713: LD_VAR 0 6
13717: PUSH
13718: FOR_IN
13719: IFFALSE 13744
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13721: LD_ADDR_VAR 0 17
13725: PUSH
13726: LD_VAR 0 17
13730: PUSH
13731: LD_VAR 0 8
13735: PPUSH
13736: CALL_OW 478
13740: UNION
13741: ST_TO_ADDR
13742: GO 13718
13744: POP
13745: POP
// if not fac_list then
13746: LD_VAR 0 17
13750: NOT
13751: IFFALSE 13755
// exit ;
13753: GO 14674
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13755: LD_ADDR_VAR 0 5
13759: PUSH
13760: LD_INT 4
13762: PUSH
13763: LD_INT 5
13765: PUSH
13766: LD_INT 9
13768: PUSH
13769: LD_INT 10
13771: PUSH
13772: LD_INT 6
13774: PUSH
13775: LD_INT 7
13777: PUSH
13778: LD_INT 11
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: PUSH
13790: LD_INT 27
13792: PUSH
13793: LD_INT 28
13795: PUSH
13796: LD_INT 26
13798: PUSH
13799: LD_INT 30
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: PUSH
13808: LD_INT 43
13810: PUSH
13811: LD_INT 44
13813: PUSH
13814: LD_INT 46
13816: PUSH
13817: LD_INT 45
13819: PUSH
13820: LD_INT 47
13822: PUSH
13823: LD_INT 49
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: LIST
13838: PUSH
13839: LD_VAR 0 12
13843: ARRAY
13844: ST_TO_ADDR
// list := list isect fac_list ;
13845: LD_ADDR_VAR 0 5
13849: PUSH
13850: LD_VAR 0 5
13854: PUSH
13855: LD_VAR 0 17
13859: ISECT
13860: ST_TO_ADDR
// if not list then
13861: LD_VAR 0 5
13865: NOT
13866: IFFALSE 13870
// exit ;
13868: GO 14674
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13870: LD_VAR 0 12
13874: PUSH
13875: LD_INT 3
13877: EQUAL
13878: PUSH
13879: LD_INT 49
13881: PUSH
13882: LD_VAR 0 5
13886: IN
13887: AND
13888: PUSH
13889: LD_INT 31
13891: PPUSH
13892: LD_VAR 0 16
13896: PPUSH
13897: CALL_OW 321
13901: PUSH
13902: LD_INT 2
13904: EQUAL
13905: AND
13906: IFFALSE 13966
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13908: LD_INT 22
13910: PUSH
13911: LD_VAR 0 16
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PUSH
13920: LD_INT 35
13922: PUSH
13923: LD_INT 49
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: PUSH
13930: LD_INT 91
13932: PUSH
13933: LD_VAR 0 1
13937: PUSH
13938: LD_INT 10
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: LIST
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: LIST
13950: PPUSH
13951: CALL_OW 69
13955: NOT
13956: IFFALSE 13966
// weapon := ru_time_lapser ;
13958: LD_ADDR_VAR 0 18
13962: PUSH
13963: LD_INT 49
13965: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13966: LD_VAR 0 12
13970: PUSH
13971: LD_INT 1
13973: PUSH
13974: LD_INT 2
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: IN
13981: PUSH
13982: LD_INT 11
13984: PUSH
13985: LD_VAR 0 5
13989: IN
13990: PUSH
13991: LD_INT 30
13993: PUSH
13994: LD_VAR 0 5
13998: IN
13999: OR
14000: AND
14001: PUSH
14002: LD_INT 6
14004: PPUSH
14005: LD_VAR 0 16
14009: PPUSH
14010: CALL_OW 321
14014: PUSH
14015: LD_INT 2
14017: EQUAL
14018: AND
14019: IFFALSE 14184
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14021: LD_INT 22
14023: PUSH
14024: LD_VAR 0 16
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: PUSH
14033: LD_INT 2
14035: PUSH
14036: LD_INT 35
14038: PUSH
14039: LD_INT 11
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: PUSH
14046: LD_INT 35
14048: PUSH
14049: LD_INT 30
14051: PUSH
14052: EMPTY
14053: LIST
14054: LIST
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: LIST
14060: PUSH
14061: LD_INT 91
14063: PUSH
14064: LD_VAR 0 1
14068: PUSH
14069: LD_INT 18
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: LIST
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: LIST
14081: PPUSH
14082: CALL_OW 69
14086: NOT
14087: PUSH
14088: LD_INT 22
14090: PUSH
14091: LD_VAR 0 16
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: PUSH
14100: LD_INT 2
14102: PUSH
14103: LD_INT 30
14105: PUSH
14106: LD_INT 32
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PUSH
14113: LD_INT 30
14115: PUSH
14116: LD_INT 33
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: LIST
14127: PUSH
14128: LD_INT 91
14130: PUSH
14131: LD_VAR 0 1
14135: PUSH
14136: LD_INT 12
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: LIST
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: LIST
14148: PUSH
14149: EMPTY
14150: LIST
14151: PPUSH
14152: CALL_OW 69
14156: PUSH
14157: LD_INT 2
14159: GREATER
14160: AND
14161: IFFALSE 14184
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14163: LD_ADDR_VAR 0 18
14167: PUSH
14168: LD_INT 11
14170: PUSH
14171: LD_INT 30
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: PUSH
14178: LD_VAR 0 12
14182: ARRAY
14183: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14184: LD_VAR 0 18
14188: NOT
14189: PUSH
14190: LD_INT 40
14192: PPUSH
14193: LD_VAR 0 16
14197: PPUSH
14198: CALL_OW 321
14202: PUSH
14203: LD_INT 2
14205: EQUAL
14206: AND
14207: PUSH
14208: LD_INT 7
14210: PUSH
14211: LD_VAR 0 5
14215: IN
14216: PUSH
14217: LD_INT 28
14219: PUSH
14220: LD_VAR 0 5
14224: IN
14225: OR
14226: PUSH
14227: LD_INT 45
14229: PUSH
14230: LD_VAR 0 5
14234: IN
14235: OR
14236: AND
14237: IFFALSE 14491
// begin hex := GetHexInfo ( x , y ) ;
14239: LD_ADDR_VAR 0 4
14243: PUSH
14244: LD_VAR 0 10
14248: PPUSH
14249: LD_VAR 0 11
14253: PPUSH
14254: CALL_OW 546
14258: ST_TO_ADDR
// if hex [ 1 ] then
14259: LD_VAR 0 4
14263: PUSH
14264: LD_INT 1
14266: ARRAY
14267: IFFALSE 14271
// exit ;
14269: GO 14674
// height := hex [ 2 ] ;
14271: LD_ADDR_VAR 0 15
14275: PUSH
14276: LD_VAR 0 4
14280: PUSH
14281: LD_INT 2
14283: ARRAY
14284: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14285: LD_ADDR_VAR 0 14
14289: PUSH
14290: LD_INT 0
14292: PUSH
14293: LD_INT 2
14295: PUSH
14296: LD_INT 3
14298: PUSH
14299: LD_INT 5
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: ST_TO_ADDR
// for i in tmp do
14308: LD_ADDR_VAR 0 8
14312: PUSH
14313: LD_VAR 0 14
14317: PUSH
14318: FOR_IN
14319: IFFALSE 14489
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14321: LD_ADDR_VAR 0 9
14325: PUSH
14326: LD_VAR 0 10
14330: PPUSH
14331: LD_VAR 0 8
14335: PPUSH
14336: LD_INT 5
14338: PPUSH
14339: CALL_OW 272
14343: PUSH
14344: LD_VAR 0 11
14348: PPUSH
14349: LD_VAR 0 8
14353: PPUSH
14354: LD_INT 5
14356: PPUSH
14357: CALL_OW 273
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14366: LD_VAR 0 9
14370: PUSH
14371: LD_INT 1
14373: ARRAY
14374: PPUSH
14375: LD_VAR 0 9
14379: PUSH
14380: LD_INT 2
14382: ARRAY
14383: PPUSH
14384: CALL_OW 488
14388: IFFALSE 14487
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14390: LD_ADDR_VAR 0 4
14394: PUSH
14395: LD_VAR 0 9
14399: PUSH
14400: LD_INT 1
14402: ARRAY
14403: PPUSH
14404: LD_VAR 0 9
14408: PUSH
14409: LD_INT 2
14411: ARRAY
14412: PPUSH
14413: CALL_OW 546
14417: ST_TO_ADDR
// if hex [ 1 ] then
14418: LD_VAR 0 4
14422: PUSH
14423: LD_INT 1
14425: ARRAY
14426: IFFALSE 14430
// continue ;
14428: GO 14318
// h := hex [ 2 ] ;
14430: LD_ADDR_VAR 0 13
14434: PUSH
14435: LD_VAR 0 4
14439: PUSH
14440: LD_INT 2
14442: ARRAY
14443: ST_TO_ADDR
// if h + 7 < height then
14444: LD_VAR 0 13
14448: PUSH
14449: LD_INT 7
14451: PLUS
14452: PUSH
14453: LD_VAR 0 15
14457: LESS
14458: IFFALSE 14487
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14460: LD_ADDR_VAR 0 18
14464: PUSH
14465: LD_INT 7
14467: PUSH
14468: LD_INT 28
14470: PUSH
14471: LD_INT 45
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: LIST
14478: PUSH
14479: LD_VAR 0 12
14483: ARRAY
14484: ST_TO_ADDR
// break ;
14485: GO 14489
// end ; end ; end ;
14487: GO 14318
14489: POP
14490: POP
// end ; if not weapon then
14491: LD_VAR 0 18
14495: NOT
14496: IFFALSE 14556
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14498: LD_ADDR_VAR 0 5
14502: PUSH
14503: LD_VAR 0 5
14507: PUSH
14508: LD_INT 11
14510: PUSH
14511: LD_INT 30
14513: PUSH
14514: LD_INT 49
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: LIST
14521: DIFF
14522: ST_TO_ADDR
// if not list then
14523: LD_VAR 0 5
14527: NOT
14528: IFFALSE 14532
// exit ;
14530: GO 14674
// weapon := list [ rand ( 1 , list ) ] ;
14532: LD_ADDR_VAR 0 18
14536: PUSH
14537: LD_VAR 0 5
14541: PUSH
14542: LD_INT 1
14544: PPUSH
14545: LD_VAR 0 5
14549: PPUSH
14550: CALL_OW 12
14554: ARRAY
14555: ST_TO_ADDR
// end ; if weapon then
14556: LD_VAR 0 18
14560: IFFALSE 14674
// begin tmp := CostOfWeapon ( weapon ) ;
14562: LD_ADDR_VAR 0 14
14566: PUSH
14567: LD_VAR 0 18
14571: PPUSH
14572: CALL_OW 451
14576: ST_TO_ADDR
// j := GetBase ( tower ) ;
14577: LD_ADDR_VAR 0 9
14581: PUSH
14582: LD_VAR 0 1
14586: PPUSH
14587: CALL_OW 274
14591: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14592: LD_VAR 0 9
14596: PPUSH
14597: LD_INT 1
14599: PPUSH
14600: CALL_OW 275
14604: PUSH
14605: LD_VAR 0 14
14609: PUSH
14610: LD_INT 1
14612: ARRAY
14613: GREATEREQUAL
14614: PUSH
14615: LD_VAR 0 9
14619: PPUSH
14620: LD_INT 2
14622: PPUSH
14623: CALL_OW 275
14627: PUSH
14628: LD_VAR 0 14
14632: PUSH
14633: LD_INT 2
14635: ARRAY
14636: GREATEREQUAL
14637: AND
14638: PUSH
14639: LD_VAR 0 9
14643: PPUSH
14644: LD_INT 3
14646: PPUSH
14647: CALL_OW 275
14651: PUSH
14652: LD_VAR 0 14
14656: PUSH
14657: LD_INT 3
14659: ARRAY
14660: GREATEREQUAL
14661: AND
14662: IFFALSE 14674
// result := weapon ;
14664: LD_ADDR_VAR 0 3
14668: PUSH
14669: LD_VAR 0 18
14673: ST_TO_ADDR
// end ; end ;
14674: LD_VAR 0 3
14678: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14679: LD_INT 0
14681: PPUSH
14682: PPUSH
// result := true ;
14683: LD_ADDR_VAR 0 3
14687: PUSH
14688: LD_INT 1
14690: ST_TO_ADDR
// if array1 = array2 then
14691: LD_VAR 0 1
14695: PUSH
14696: LD_VAR 0 2
14700: EQUAL
14701: IFFALSE 14761
// begin for i = 1 to array1 do
14703: LD_ADDR_VAR 0 4
14707: PUSH
14708: DOUBLE
14709: LD_INT 1
14711: DEC
14712: ST_TO_ADDR
14713: LD_VAR 0 1
14717: PUSH
14718: FOR_TO
14719: IFFALSE 14757
// if array1 [ i ] <> array2 [ i ] then
14721: LD_VAR 0 1
14725: PUSH
14726: LD_VAR 0 4
14730: ARRAY
14731: PUSH
14732: LD_VAR 0 2
14736: PUSH
14737: LD_VAR 0 4
14741: ARRAY
14742: NONEQUAL
14743: IFFALSE 14755
// begin result := false ;
14745: LD_ADDR_VAR 0 3
14749: PUSH
14750: LD_INT 0
14752: ST_TO_ADDR
// break ;
14753: GO 14757
// end ;
14755: GO 14718
14757: POP
14758: POP
// end else
14759: GO 14769
// result := false ;
14761: LD_ADDR_VAR 0 3
14765: PUSH
14766: LD_INT 0
14768: ST_TO_ADDR
// end ;
14769: LD_VAR 0 3
14773: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14774: LD_INT 0
14776: PPUSH
14777: PPUSH
// if not array1 or not array2 then
14778: LD_VAR 0 1
14782: NOT
14783: PUSH
14784: LD_VAR 0 2
14788: NOT
14789: OR
14790: IFFALSE 14794
// exit ;
14792: GO 14858
// result := true ;
14794: LD_ADDR_VAR 0 3
14798: PUSH
14799: LD_INT 1
14801: ST_TO_ADDR
// for i = 1 to array1 do
14802: LD_ADDR_VAR 0 4
14806: PUSH
14807: DOUBLE
14808: LD_INT 1
14810: DEC
14811: ST_TO_ADDR
14812: LD_VAR 0 1
14816: PUSH
14817: FOR_TO
14818: IFFALSE 14856
// if array1 [ i ] <> array2 [ i ] then
14820: LD_VAR 0 1
14824: PUSH
14825: LD_VAR 0 4
14829: ARRAY
14830: PUSH
14831: LD_VAR 0 2
14835: PUSH
14836: LD_VAR 0 4
14840: ARRAY
14841: NONEQUAL
14842: IFFALSE 14854
// begin result := false ;
14844: LD_ADDR_VAR 0 3
14848: PUSH
14849: LD_INT 0
14851: ST_TO_ADDR
// break ;
14852: GO 14856
// end ;
14854: GO 14817
14856: POP
14857: POP
// end ;
14858: LD_VAR 0 3
14862: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14863: LD_INT 0
14865: PPUSH
14866: PPUSH
14867: PPUSH
// pom := GetBase ( fac ) ;
14868: LD_ADDR_VAR 0 5
14872: PUSH
14873: LD_VAR 0 1
14877: PPUSH
14878: CALL_OW 274
14882: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14883: LD_ADDR_VAR 0 4
14887: PUSH
14888: LD_VAR 0 2
14892: PUSH
14893: LD_INT 1
14895: ARRAY
14896: PPUSH
14897: LD_VAR 0 2
14901: PUSH
14902: LD_INT 2
14904: ARRAY
14905: PPUSH
14906: LD_VAR 0 2
14910: PUSH
14911: LD_INT 3
14913: ARRAY
14914: PPUSH
14915: LD_VAR 0 2
14919: PUSH
14920: LD_INT 4
14922: ARRAY
14923: PPUSH
14924: CALL_OW 449
14928: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14929: LD_ADDR_VAR 0 3
14933: PUSH
14934: LD_VAR 0 5
14938: PPUSH
14939: LD_INT 1
14941: PPUSH
14942: CALL_OW 275
14946: PUSH
14947: LD_VAR 0 4
14951: PUSH
14952: LD_INT 1
14954: ARRAY
14955: GREATEREQUAL
14956: PUSH
14957: LD_VAR 0 5
14961: PPUSH
14962: LD_INT 2
14964: PPUSH
14965: CALL_OW 275
14969: PUSH
14970: LD_VAR 0 4
14974: PUSH
14975: LD_INT 2
14977: ARRAY
14978: GREATEREQUAL
14979: AND
14980: PUSH
14981: LD_VAR 0 5
14985: PPUSH
14986: LD_INT 3
14988: PPUSH
14989: CALL_OW 275
14993: PUSH
14994: LD_VAR 0 4
14998: PUSH
14999: LD_INT 3
15001: ARRAY
15002: GREATEREQUAL
15003: AND
15004: ST_TO_ADDR
// end ;
15005: LD_VAR 0 3
15009: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15010: LD_INT 0
15012: PPUSH
15013: PPUSH
15014: PPUSH
15015: PPUSH
// pom := GetBase ( building ) ;
15016: LD_ADDR_VAR 0 3
15020: PUSH
15021: LD_VAR 0 1
15025: PPUSH
15026: CALL_OW 274
15030: ST_TO_ADDR
// if not pom then
15031: LD_VAR 0 3
15035: NOT
15036: IFFALSE 15040
// exit ;
15038: GO 15210
// btype := GetBType ( building ) ;
15040: LD_ADDR_VAR 0 5
15044: PUSH
15045: LD_VAR 0 1
15049: PPUSH
15050: CALL_OW 266
15054: ST_TO_ADDR
// if btype = b_armoury then
15055: LD_VAR 0 5
15059: PUSH
15060: LD_INT 4
15062: EQUAL
15063: IFFALSE 15073
// btype := b_barracks ;
15065: LD_ADDR_VAR 0 5
15069: PUSH
15070: LD_INT 5
15072: ST_TO_ADDR
// if btype = b_depot then
15073: LD_VAR 0 5
15077: PUSH
15078: LD_INT 0
15080: EQUAL
15081: IFFALSE 15091
// btype := b_warehouse ;
15083: LD_ADDR_VAR 0 5
15087: PUSH
15088: LD_INT 1
15090: ST_TO_ADDR
// if btype = b_workshop then
15091: LD_VAR 0 5
15095: PUSH
15096: LD_INT 2
15098: EQUAL
15099: IFFALSE 15109
// btype := b_factory ;
15101: LD_ADDR_VAR 0 5
15105: PUSH
15106: LD_INT 3
15108: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15109: LD_ADDR_VAR 0 4
15113: PUSH
15114: LD_VAR 0 5
15118: PPUSH
15119: LD_VAR 0 1
15123: PPUSH
15124: CALL_OW 248
15128: PPUSH
15129: CALL_OW 450
15133: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15134: LD_ADDR_VAR 0 2
15138: PUSH
15139: LD_VAR 0 3
15143: PPUSH
15144: LD_INT 1
15146: PPUSH
15147: CALL_OW 275
15151: PUSH
15152: LD_VAR 0 4
15156: PUSH
15157: LD_INT 1
15159: ARRAY
15160: GREATEREQUAL
15161: PUSH
15162: LD_VAR 0 3
15166: PPUSH
15167: LD_INT 2
15169: PPUSH
15170: CALL_OW 275
15174: PUSH
15175: LD_VAR 0 4
15179: PUSH
15180: LD_INT 2
15182: ARRAY
15183: GREATEREQUAL
15184: AND
15185: PUSH
15186: LD_VAR 0 3
15190: PPUSH
15191: LD_INT 3
15193: PPUSH
15194: CALL_OW 275
15198: PUSH
15199: LD_VAR 0 4
15203: PUSH
15204: LD_INT 3
15206: ARRAY
15207: GREATEREQUAL
15208: AND
15209: ST_TO_ADDR
// end ;
15210: LD_VAR 0 2
15214: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15215: LD_INT 0
15217: PPUSH
15218: PPUSH
15219: PPUSH
// pom := GetBase ( building ) ;
15220: LD_ADDR_VAR 0 4
15224: PUSH
15225: LD_VAR 0 1
15229: PPUSH
15230: CALL_OW 274
15234: ST_TO_ADDR
// if not pom then
15235: LD_VAR 0 4
15239: NOT
15240: IFFALSE 15244
// exit ;
15242: GO 15345
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15244: LD_ADDR_VAR 0 5
15248: PUSH
15249: LD_VAR 0 2
15253: PPUSH
15254: LD_VAR 0 1
15258: PPUSH
15259: CALL_OW 248
15263: PPUSH
15264: CALL_OW 450
15268: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15269: LD_ADDR_VAR 0 3
15273: PUSH
15274: LD_VAR 0 4
15278: PPUSH
15279: LD_INT 1
15281: PPUSH
15282: CALL_OW 275
15286: PUSH
15287: LD_VAR 0 5
15291: PUSH
15292: LD_INT 1
15294: ARRAY
15295: GREATEREQUAL
15296: PUSH
15297: LD_VAR 0 4
15301: PPUSH
15302: LD_INT 2
15304: PPUSH
15305: CALL_OW 275
15309: PUSH
15310: LD_VAR 0 5
15314: PUSH
15315: LD_INT 2
15317: ARRAY
15318: GREATEREQUAL
15319: AND
15320: PUSH
15321: LD_VAR 0 4
15325: PPUSH
15326: LD_INT 3
15328: PPUSH
15329: CALL_OW 275
15333: PUSH
15334: LD_VAR 0 5
15338: PUSH
15339: LD_INT 3
15341: ARRAY
15342: GREATEREQUAL
15343: AND
15344: ST_TO_ADDR
// end ;
15345: LD_VAR 0 3
15349: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15350: LD_INT 0
15352: PPUSH
15353: PPUSH
15354: PPUSH
15355: PPUSH
15356: PPUSH
15357: PPUSH
15358: PPUSH
15359: PPUSH
15360: PPUSH
15361: PPUSH
15362: PPUSH
// result := false ;
15363: LD_ADDR_VAR 0 8
15367: PUSH
15368: LD_INT 0
15370: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15371: LD_VAR 0 5
15375: NOT
15376: PUSH
15377: LD_VAR 0 1
15381: NOT
15382: OR
15383: PUSH
15384: LD_VAR 0 2
15388: NOT
15389: OR
15390: PUSH
15391: LD_VAR 0 3
15395: NOT
15396: OR
15397: IFFALSE 15401
// exit ;
15399: GO 16215
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15401: LD_ADDR_VAR 0 14
15405: PUSH
15406: LD_VAR 0 1
15410: PPUSH
15411: LD_VAR 0 2
15415: PPUSH
15416: LD_VAR 0 3
15420: PPUSH
15421: LD_VAR 0 4
15425: PPUSH
15426: LD_VAR 0 5
15430: PUSH
15431: LD_INT 1
15433: ARRAY
15434: PPUSH
15435: CALL_OW 248
15439: PPUSH
15440: LD_INT 0
15442: PPUSH
15443: CALL 17452 0 6
15447: ST_TO_ADDR
// if not hexes then
15448: LD_VAR 0 14
15452: NOT
15453: IFFALSE 15457
// exit ;
15455: GO 16215
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15457: LD_ADDR_VAR 0 17
15461: PUSH
15462: LD_VAR 0 5
15466: PPUSH
15467: LD_INT 22
15469: PUSH
15470: LD_VAR 0 13
15474: PPUSH
15475: CALL_OW 255
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PUSH
15484: LD_INT 2
15486: PUSH
15487: LD_INT 30
15489: PUSH
15490: LD_INT 0
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: LD_INT 30
15499: PUSH
15500: LD_INT 1
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: LIST
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PPUSH
15516: CALL_OW 72
15520: ST_TO_ADDR
// for i = 1 to hexes do
15521: LD_ADDR_VAR 0 9
15525: PUSH
15526: DOUBLE
15527: LD_INT 1
15529: DEC
15530: ST_TO_ADDR
15531: LD_VAR 0 14
15535: PUSH
15536: FOR_TO
15537: IFFALSE 16213
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15539: LD_ADDR_VAR 0 13
15543: PUSH
15544: LD_VAR 0 14
15548: PUSH
15549: LD_VAR 0 9
15553: ARRAY
15554: PUSH
15555: LD_INT 1
15557: ARRAY
15558: PPUSH
15559: LD_VAR 0 14
15563: PUSH
15564: LD_VAR 0 9
15568: ARRAY
15569: PUSH
15570: LD_INT 2
15572: ARRAY
15573: PPUSH
15574: CALL_OW 428
15578: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15579: LD_VAR 0 14
15583: PUSH
15584: LD_VAR 0 9
15588: ARRAY
15589: PUSH
15590: LD_INT 1
15592: ARRAY
15593: PPUSH
15594: LD_VAR 0 14
15598: PUSH
15599: LD_VAR 0 9
15603: ARRAY
15604: PUSH
15605: LD_INT 2
15607: ARRAY
15608: PPUSH
15609: CALL_OW 351
15613: PUSH
15614: LD_VAR 0 14
15618: PUSH
15619: LD_VAR 0 9
15623: ARRAY
15624: PUSH
15625: LD_INT 1
15627: ARRAY
15628: PPUSH
15629: LD_VAR 0 14
15633: PUSH
15634: LD_VAR 0 9
15638: ARRAY
15639: PUSH
15640: LD_INT 2
15642: ARRAY
15643: PPUSH
15644: CALL_OW 488
15648: NOT
15649: OR
15650: PUSH
15651: LD_VAR 0 13
15655: PPUSH
15656: CALL_OW 247
15660: PUSH
15661: LD_INT 3
15663: EQUAL
15664: OR
15665: IFFALSE 15671
// exit ;
15667: POP
15668: POP
15669: GO 16215
// if not tmp then
15671: LD_VAR 0 13
15675: NOT
15676: IFFALSE 15680
// continue ;
15678: GO 15536
// result := true ;
15680: LD_ADDR_VAR 0 8
15684: PUSH
15685: LD_INT 1
15687: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15688: LD_VAR 0 6
15692: PUSH
15693: LD_VAR 0 13
15697: PPUSH
15698: CALL_OW 247
15702: PUSH
15703: LD_INT 2
15705: EQUAL
15706: AND
15707: PUSH
15708: LD_VAR 0 13
15712: PPUSH
15713: CALL_OW 263
15717: PUSH
15718: LD_INT 1
15720: EQUAL
15721: AND
15722: IFFALSE 15886
// begin if IsDrivenBy ( tmp ) then
15724: LD_VAR 0 13
15728: PPUSH
15729: CALL_OW 311
15733: IFFALSE 15737
// continue ;
15735: GO 15536
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15737: LD_VAR 0 6
15741: PPUSH
15742: LD_INT 3
15744: PUSH
15745: LD_INT 60
15747: PUSH
15748: EMPTY
15749: LIST
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: PUSH
15755: LD_INT 3
15757: PUSH
15758: LD_INT 55
15760: PUSH
15761: EMPTY
15762: LIST
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: PPUSH
15772: CALL_OW 72
15776: IFFALSE 15884
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15778: LD_ADDR_VAR 0 18
15782: PUSH
15783: LD_VAR 0 6
15787: PPUSH
15788: LD_INT 3
15790: PUSH
15791: LD_INT 60
15793: PUSH
15794: EMPTY
15795: LIST
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PUSH
15801: LD_INT 3
15803: PUSH
15804: LD_INT 55
15806: PUSH
15807: EMPTY
15808: LIST
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: PPUSH
15818: CALL_OW 72
15822: PUSH
15823: LD_INT 1
15825: ARRAY
15826: ST_TO_ADDR
// if IsInUnit ( driver ) then
15827: LD_VAR 0 18
15831: PPUSH
15832: CALL_OW 310
15836: IFFALSE 15847
// ComExit ( driver ) ;
15838: LD_VAR 0 18
15842: PPUSH
15843: CALL 40636 0 1
// AddComEnterUnit ( driver , tmp ) ;
15847: LD_VAR 0 18
15851: PPUSH
15852: LD_VAR 0 13
15856: PPUSH
15857: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15861: LD_VAR 0 18
15865: PPUSH
15866: LD_VAR 0 7
15870: PPUSH
15871: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15875: LD_VAR 0 18
15879: PPUSH
15880: CALL_OW 181
// end ; continue ;
15884: GO 15536
// end ; if not cleaners or not tmp in cleaners then
15886: LD_VAR 0 6
15890: NOT
15891: PUSH
15892: LD_VAR 0 13
15896: PUSH
15897: LD_VAR 0 6
15901: IN
15902: NOT
15903: OR
15904: IFFALSE 16211
// begin if dep then
15906: LD_VAR 0 17
15910: IFFALSE 16046
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15912: LD_ADDR_VAR 0 16
15916: PUSH
15917: LD_VAR 0 17
15921: PUSH
15922: LD_INT 1
15924: ARRAY
15925: PPUSH
15926: CALL_OW 250
15930: PPUSH
15931: LD_VAR 0 17
15935: PUSH
15936: LD_INT 1
15938: ARRAY
15939: PPUSH
15940: CALL_OW 254
15944: PPUSH
15945: LD_INT 5
15947: PPUSH
15948: CALL_OW 272
15952: PUSH
15953: LD_VAR 0 17
15957: PUSH
15958: LD_INT 1
15960: ARRAY
15961: PPUSH
15962: CALL_OW 251
15966: PPUSH
15967: LD_VAR 0 17
15971: PUSH
15972: LD_INT 1
15974: ARRAY
15975: PPUSH
15976: CALL_OW 254
15980: PPUSH
15981: LD_INT 5
15983: PPUSH
15984: CALL_OW 273
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15993: LD_VAR 0 16
15997: PUSH
15998: LD_INT 1
16000: ARRAY
16001: PPUSH
16002: LD_VAR 0 16
16006: PUSH
16007: LD_INT 2
16009: ARRAY
16010: PPUSH
16011: CALL_OW 488
16015: IFFALSE 16046
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16017: LD_VAR 0 13
16021: PPUSH
16022: LD_VAR 0 16
16026: PUSH
16027: LD_INT 1
16029: ARRAY
16030: PPUSH
16031: LD_VAR 0 16
16035: PUSH
16036: LD_INT 2
16038: ARRAY
16039: PPUSH
16040: CALL_OW 111
// continue ;
16044: GO 15536
// end ; end ; r := GetDir ( tmp ) ;
16046: LD_ADDR_VAR 0 15
16050: PUSH
16051: LD_VAR 0 13
16055: PPUSH
16056: CALL_OW 254
16060: ST_TO_ADDR
// if r = 5 then
16061: LD_VAR 0 15
16065: PUSH
16066: LD_INT 5
16068: EQUAL
16069: IFFALSE 16079
// r := 0 ;
16071: LD_ADDR_VAR 0 15
16075: PUSH
16076: LD_INT 0
16078: ST_TO_ADDR
// for j = r to 5 do
16079: LD_ADDR_VAR 0 10
16083: PUSH
16084: DOUBLE
16085: LD_VAR 0 15
16089: DEC
16090: ST_TO_ADDR
16091: LD_INT 5
16093: PUSH
16094: FOR_TO
16095: IFFALSE 16209
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16097: LD_ADDR_VAR 0 11
16101: PUSH
16102: LD_VAR 0 13
16106: PPUSH
16107: CALL_OW 250
16111: PPUSH
16112: LD_VAR 0 10
16116: PPUSH
16117: LD_INT 2
16119: PPUSH
16120: CALL_OW 272
16124: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16125: LD_ADDR_VAR 0 12
16129: PUSH
16130: LD_VAR 0 13
16134: PPUSH
16135: CALL_OW 251
16139: PPUSH
16140: LD_VAR 0 10
16144: PPUSH
16145: LD_INT 2
16147: PPUSH
16148: CALL_OW 273
16152: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16153: LD_VAR 0 11
16157: PPUSH
16158: LD_VAR 0 12
16162: PPUSH
16163: CALL_OW 488
16167: PUSH
16168: LD_VAR 0 11
16172: PPUSH
16173: LD_VAR 0 12
16177: PPUSH
16178: CALL_OW 428
16182: NOT
16183: AND
16184: IFFALSE 16207
// begin ComMoveXY ( tmp , _x , _y ) ;
16186: LD_VAR 0 13
16190: PPUSH
16191: LD_VAR 0 11
16195: PPUSH
16196: LD_VAR 0 12
16200: PPUSH
16201: CALL_OW 111
// break ;
16205: GO 16209
// end ; end ;
16207: GO 16094
16209: POP
16210: POP
// end ; end ;
16211: GO 15536
16213: POP
16214: POP
// end ;
16215: LD_VAR 0 8
16219: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16220: LD_INT 0
16222: PPUSH
// result := true ;
16223: LD_ADDR_VAR 0 3
16227: PUSH
16228: LD_INT 1
16230: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16231: LD_VAR 0 2
16235: PUSH
16236: LD_INT 24
16238: DOUBLE
16239: EQUAL
16240: IFTRUE 16250
16242: LD_INT 33
16244: DOUBLE
16245: EQUAL
16246: IFTRUE 16250
16248: GO 16275
16250: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16251: LD_ADDR_VAR 0 3
16255: PUSH
16256: LD_INT 32
16258: PPUSH
16259: LD_VAR 0 1
16263: PPUSH
16264: CALL_OW 321
16268: PUSH
16269: LD_INT 2
16271: EQUAL
16272: ST_TO_ADDR
16273: GO 16595
16275: LD_INT 20
16277: DOUBLE
16278: EQUAL
16279: IFTRUE 16283
16281: GO 16308
16283: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16284: LD_ADDR_VAR 0 3
16288: PUSH
16289: LD_INT 6
16291: PPUSH
16292: LD_VAR 0 1
16296: PPUSH
16297: CALL_OW 321
16301: PUSH
16302: LD_INT 2
16304: EQUAL
16305: ST_TO_ADDR
16306: GO 16595
16308: LD_INT 22
16310: DOUBLE
16311: EQUAL
16312: IFTRUE 16322
16314: LD_INT 36
16316: DOUBLE
16317: EQUAL
16318: IFTRUE 16322
16320: GO 16347
16322: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16323: LD_ADDR_VAR 0 3
16327: PUSH
16328: LD_INT 15
16330: PPUSH
16331: LD_VAR 0 1
16335: PPUSH
16336: CALL_OW 321
16340: PUSH
16341: LD_INT 2
16343: EQUAL
16344: ST_TO_ADDR
16345: GO 16595
16347: LD_INT 30
16349: DOUBLE
16350: EQUAL
16351: IFTRUE 16355
16353: GO 16380
16355: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16356: LD_ADDR_VAR 0 3
16360: PUSH
16361: LD_INT 20
16363: PPUSH
16364: LD_VAR 0 1
16368: PPUSH
16369: CALL_OW 321
16373: PUSH
16374: LD_INT 2
16376: EQUAL
16377: ST_TO_ADDR
16378: GO 16595
16380: LD_INT 28
16382: DOUBLE
16383: EQUAL
16384: IFTRUE 16394
16386: LD_INT 21
16388: DOUBLE
16389: EQUAL
16390: IFTRUE 16394
16392: GO 16419
16394: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16395: LD_ADDR_VAR 0 3
16399: PUSH
16400: LD_INT 21
16402: PPUSH
16403: LD_VAR 0 1
16407: PPUSH
16408: CALL_OW 321
16412: PUSH
16413: LD_INT 2
16415: EQUAL
16416: ST_TO_ADDR
16417: GO 16595
16419: LD_INT 16
16421: DOUBLE
16422: EQUAL
16423: IFTRUE 16427
16425: GO 16454
16427: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16428: LD_ADDR_VAR 0 3
16432: PUSH
16433: LD_EXP 98
16437: PPUSH
16438: LD_VAR 0 1
16442: PPUSH
16443: CALL_OW 321
16447: PUSH
16448: LD_INT 2
16450: EQUAL
16451: ST_TO_ADDR
16452: GO 16595
16454: LD_INT 19
16456: DOUBLE
16457: EQUAL
16458: IFTRUE 16468
16460: LD_INT 23
16462: DOUBLE
16463: EQUAL
16464: IFTRUE 16468
16466: GO 16495
16468: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16469: LD_ADDR_VAR 0 3
16473: PUSH
16474: LD_EXP 97
16478: PPUSH
16479: LD_VAR 0 1
16483: PPUSH
16484: CALL_OW 321
16488: PUSH
16489: LD_INT 2
16491: EQUAL
16492: ST_TO_ADDR
16493: GO 16595
16495: LD_INT 17
16497: DOUBLE
16498: EQUAL
16499: IFTRUE 16503
16501: GO 16528
16503: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16504: LD_ADDR_VAR 0 3
16508: PUSH
16509: LD_INT 39
16511: PPUSH
16512: LD_VAR 0 1
16516: PPUSH
16517: CALL_OW 321
16521: PUSH
16522: LD_INT 2
16524: EQUAL
16525: ST_TO_ADDR
16526: GO 16595
16528: LD_INT 18
16530: DOUBLE
16531: EQUAL
16532: IFTRUE 16536
16534: GO 16561
16536: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16537: LD_ADDR_VAR 0 3
16541: PUSH
16542: LD_INT 40
16544: PPUSH
16545: LD_VAR 0 1
16549: PPUSH
16550: CALL_OW 321
16554: PUSH
16555: LD_INT 2
16557: EQUAL
16558: ST_TO_ADDR
16559: GO 16595
16561: LD_INT 27
16563: DOUBLE
16564: EQUAL
16565: IFTRUE 16569
16567: GO 16594
16569: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16570: LD_ADDR_VAR 0 3
16574: PUSH
16575: LD_INT 35
16577: PPUSH
16578: LD_VAR 0 1
16582: PPUSH
16583: CALL_OW 321
16587: PUSH
16588: LD_INT 2
16590: EQUAL
16591: ST_TO_ADDR
16592: GO 16595
16594: POP
// end ;
16595: LD_VAR 0 3
16599: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16600: LD_INT 0
16602: PPUSH
16603: PPUSH
16604: PPUSH
16605: PPUSH
16606: PPUSH
16607: PPUSH
16608: PPUSH
16609: PPUSH
16610: PPUSH
16611: PPUSH
16612: PPUSH
// result := false ;
16613: LD_ADDR_VAR 0 6
16617: PUSH
16618: LD_INT 0
16620: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16621: LD_VAR 0 1
16625: NOT
16626: PUSH
16627: LD_VAR 0 1
16631: PPUSH
16632: CALL_OW 266
16636: PUSH
16637: LD_INT 0
16639: PUSH
16640: LD_INT 1
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: IN
16647: NOT
16648: OR
16649: PUSH
16650: LD_VAR 0 2
16654: NOT
16655: OR
16656: PUSH
16657: LD_VAR 0 5
16661: PUSH
16662: LD_INT 0
16664: PUSH
16665: LD_INT 1
16667: PUSH
16668: LD_INT 2
16670: PUSH
16671: LD_INT 3
16673: PUSH
16674: LD_INT 4
16676: PUSH
16677: LD_INT 5
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: IN
16688: NOT
16689: OR
16690: PUSH
16691: LD_VAR 0 3
16695: PPUSH
16696: LD_VAR 0 4
16700: PPUSH
16701: CALL_OW 488
16705: NOT
16706: OR
16707: IFFALSE 16711
// exit ;
16709: GO 17447
// side := GetSide ( depot ) ;
16711: LD_ADDR_VAR 0 9
16715: PUSH
16716: LD_VAR 0 1
16720: PPUSH
16721: CALL_OW 255
16725: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16726: LD_VAR 0 9
16730: PPUSH
16731: LD_VAR 0 2
16735: PPUSH
16736: CALL 16220 0 2
16740: NOT
16741: IFFALSE 16745
// exit ;
16743: GO 17447
// pom := GetBase ( depot ) ;
16745: LD_ADDR_VAR 0 10
16749: PUSH
16750: LD_VAR 0 1
16754: PPUSH
16755: CALL_OW 274
16759: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16760: LD_ADDR_VAR 0 11
16764: PUSH
16765: LD_VAR 0 2
16769: PPUSH
16770: LD_VAR 0 1
16774: PPUSH
16775: CALL_OW 248
16779: PPUSH
16780: CALL_OW 450
16784: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16785: LD_VAR 0 10
16789: PPUSH
16790: LD_INT 1
16792: PPUSH
16793: CALL_OW 275
16797: PUSH
16798: LD_VAR 0 11
16802: PUSH
16803: LD_INT 1
16805: ARRAY
16806: GREATEREQUAL
16807: PUSH
16808: LD_VAR 0 10
16812: PPUSH
16813: LD_INT 2
16815: PPUSH
16816: CALL_OW 275
16820: PUSH
16821: LD_VAR 0 11
16825: PUSH
16826: LD_INT 2
16828: ARRAY
16829: GREATEREQUAL
16830: AND
16831: PUSH
16832: LD_VAR 0 10
16836: PPUSH
16837: LD_INT 3
16839: PPUSH
16840: CALL_OW 275
16844: PUSH
16845: LD_VAR 0 11
16849: PUSH
16850: LD_INT 3
16852: ARRAY
16853: GREATEREQUAL
16854: AND
16855: NOT
16856: IFFALSE 16860
// exit ;
16858: GO 17447
// if GetBType ( depot ) = b_depot then
16860: LD_VAR 0 1
16864: PPUSH
16865: CALL_OW 266
16869: PUSH
16870: LD_INT 0
16872: EQUAL
16873: IFFALSE 16885
// dist := 28 else
16875: LD_ADDR_VAR 0 14
16879: PUSH
16880: LD_INT 28
16882: ST_TO_ADDR
16883: GO 16893
// dist := 36 ;
16885: LD_ADDR_VAR 0 14
16889: PUSH
16890: LD_INT 36
16892: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16893: LD_VAR 0 1
16897: PPUSH
16898: LD_VAR 0 3
16902: PPUSH
16903: LD_VAR 0 4
16907: PPUSH
16908: CALL_OW 297
16912: PUSH
16913: LD_VAR 0 14
16917: GREATER
16918: IFFALSE 16922
// exit ;
16920: GO 17447
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16922: LD_ADDR_VAR 0 12
16926: PUSH
16927: LD_VAR 0 2
16931: PPUSH
16932: LD_VAR 0 3
16936: PPUSH
16937: LD_VAR 0 4
16941: PPUSH
16942: LD_VAR 0 5
16946: PPUSH
16947: LD_VAR 0 1
16951: PPUSH
16952: CALL_OW 248
16956: PPUSH
16957: LD_INT 0
16959: PPUSH
16960: CALL 17452 0 6
16964: ST_TO_ADDR
// if not hexes then
16965: LD_VAR 0 12
16969: NOT
16970: IFFALSE 16974
// exit ;
16972: GO 17447
// hex := GetHexInfo ( x , y ) ;
16974: LD_ADDR_VAR 0 15
16978: PUSH
16979: LD_VAR 0 3
16983: PPUSH
16984: LD_VAR 0 4
16988: PPUSH
16989: CALL_OW 546
16993: ST_TO_ADDR
// if hex [ 1 ] then
16994: LD_VAR 0 15
16998: PUSH
16999: LD_INT 1
17001: ARRAY
17002: IFFALSE 17006
// exit ;
17004: GO 17447
// height := hex [ 2 ] ;
17006: LD_ADDR_VAR 0 13
17010: PUSH
17011: LD_VAR 0 15
17015: PUSH
17016: LD_INT 2
17018: ARRAY
17019: ST_TO_ADDR
// for i = 1 to hexes do
17020: LD_ADDR_VAR 0 7
17024: PUSH
17025: DOUBLE
17026: LD_INT 1
17028: DEC
17029: ST_TO_ADDR
17030: LD_VAR 0 12
17034: PUSH
17035: FOR_TO
17036: IFFALSE 17366
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17038: LD_VAR 0 12
17042: PUSH
17043: LD_VAR 0 7
17047: ARRAY
17048: PUSH
17049: LD_INT 1
17051: ARRAY
17052: PPUSH
17053: LD_VAR 0 12
17057: PUSH
17058: LD_VAR 0 7
17062: ARRAY
17063: PUSH
17064: LD_INT 2
17066: ARRAY
17067: PPUSH
17068: CALL_OW 488
17072: NOT
17073: PUSH
17074: LD_VAR 0 12
17078: PUSH
17079: LD_VAR 0 7
17083: ARRAY
17084: PUSH
17085: LD_INT 1
17087: ARRAY
17088: PPUSH
17089: LD_VAR 0 12
17093: PUSH
17094: LD_VAR 0 7
17098: ARRAY
17099: PUSH
17100: LD_INT 2
17102: ARRAY
17103: PPUSH
17104: CALL_OW 428
17108: PUSH
17109: LD_INT 0
17111: GREATER
17112: OR
17113: PUSH
17114: LD_VAR 0 12
17118: PUSH
17119: LD_VAR 0 7
17123: ARRAY
17124: PUSH
17125: LD_INT 1
17127: ARRAY
17128: PPUSH
17129: LD_VAR 0 12
17133: PUSH
17134: LD_VAR 0 7
17138: ARRAY
17139: PUSH
17140: LD_INT 2
17142: ARRAY
17143: PPUSH
17144: CALL_OW 351
17148: OR
17149: IFFALSE 17155
// exit ;
17151: POP
17152: POP
17153: GO 17447
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17155: LD_ADDR_VAR 0 8
17159: PUSH
17160: LD_VAR 0 12
17164: PUSH
17165: LD_VAR 0 7
17169: ARRAY
17170: PUSH
17171: LD_INT 1
17173: ARRAY
17174: PPUSH
17175: LD_VAR 0 12
17179: PUSH
17180: LD_VAR 0 7
17184: ARRAY
17185: PUSH
17186: LD_INT 2
17188: ARRAY
17189: PPUSH
17190: CALL_OW 546
17194: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17195: LD_VAR 0 8
17199: PUSH
17200: LD_INT 1
17202: ARRAY
17203: PUSH
17204: LD_VAR 0 8
17208: PUSH
17209: LD_INT 2
17211: ARRAY
17212: PUSH
17213: LD_VAR 0 13
17217: PUSH
17218: LD_INT 2
17220: PLUS
17221: GREATER
17222: OR
17223: PUSH
17224: LD_VAR 0 8
17228: PUSH
17229: LD_INT 2
17231: ARRAY
17232: PUSH
17233: LD_VAR 0 13
17237: PUSH
17238: LD_INT 2
17240: MINUS
17241: LESS
17242: OR
17243: PUSH
17244: LD_VAR 0 8
17248: PUSH
17249: LD_INT 3
17251: ARRAY
17252: PUSH
17253: LD_INT 0
17255: PUSH
17256: LD_INT 8
17258: PUSH
17259: LD_INT 9
17261: PUSH
17262: LD_INT 10
17264: PUSH
17265: LD_INT 11
17267: PUSH
17268: LD_INT 12
17270: PUSH
17271: LD_INT 13
17273: PUSH
17274: LD_INT 16
17276: PUSH
17277: LD_INT 17
17279: PUSH
17280: LD_INT 18
17282: PUSH
17283: LD_INT 19
17285: PUSH
17286: LD_INT 20
17288: PUSH
17289: LD_INT 21
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: IN
17307: NOT
17308: OR
17309: PUSH
17310: LD_VAR 0 8
17314: PUSH
17315: LD_INT 5
17317: ARRAY
17318: NOT
17319: OR
17320: PUSH
17321: LD_VAR 0 8
17325: PUSH
17326: LD_INT 6
17328: ARRAY
17329: PUSH
17330: LD_INT 1
17332: PUSH
17333: LD_INT 2
17335: PUSH
17336: LD_INT 7
17338: PUSH
17339: LD_INT 9
17341: PUSH
17342: LD_INT 10
17344: PUSH
17345: LD_INT 11
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: IN
17356: NOT
17357: OR
17358: IFFALSE 17364
// exit ;
17360: POP
17361: POP
17362: GO 17447
// end ;
17364: GO 17035
17366: POP
17367: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17368: LD_VAR 0 9
17372: PPUSH
17373: LD_VAR 0 3
17377: PPUSH
17378: LD_VAR 0 4
17382: PPUSH
17383: LD_INT 20
17385: PPUSH
17386: CALL 9393 0 4
17390: PUSH
17391: LD_INT 4
17393: ARRAY
17394: IFFALSE 17398
// exit ;
17396: GO 17447
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17398: LD_VAR 0 2
17402: PUSH
17403: LD_INT 29
17405: PUSH
17406: LD_INT 30
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: IN
17413: PUSH
17414: LD_VAR 0 3
17418: PPUSH
17419: LD_VAR 0 4
17423: PPUSH
17424: LD_VAR 0 9
17428: PPUSH
17429: CALL_OW 440
17433: NOT
17434: AND
17435: IFFALSE 17439
// exit ;
17437: GO 17447
// result := true ;
17439: LD_ADDR_VAR 0 6
17443: PUSH
17444: LD_INT 1
17446: ST_TO_ADDR
// end ;
17447: LD_VAR 0 6
17451: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17452: LD_INT 0
17454: PPUSH
17455: PPUSH
17456: PPUSH
17457: PPUSH
17458: PPUSH
17459: PPUSH
17460: PPUSH
17461: PPUSH
17462: PPUSH
17463: PPUSH
17464: PPUSH
17465: PPUSH
17466: PPUSH
17467: PPUSH
17468: PPUSH
17469: PPUSH
17470: PPUSH
17471: PPUSH
17472: PPUSH
17473: PPUSH
17474: PPUSH
17475: PPUSH
17476: PPUSH
17477: PPUSH
17478: PPUSH
17479: PPUSH
17480: PPUSH
17481: PPUSH
17482: PPUSH
17483: PPUSH
17484: PPUSH
17485: PPUSH
17486: PPUSH
17487: PPUSH
17488: PPUSH
17489: PPUSH
17490: PPUSH
17491: PPUSH
17492: PPUSH
17493: PPUSH
17494: PPUSH
17495: PPUSH
17496: PPUSH
17497: PPUSH
17498: PPUSH
17499: PPUSH
17500: PPUSH
17501: PPUSH
17502: PPUSH
17503: PPUSH
17504: PPUSH
17505: PPUSH
17506: PPUSH
17507: PPUSH
17508: PPUSH
17509: PPUSH
17510: PPUSH
17511: PPUSH
// result = [ ] ;
17512: LD_ADDR_VAR 0 7
17516: PUSH
17517: EMPTY
17518: ST_TO_ADDR
// temp_list = [ ] ;
17519: LD_ADDR_VAR 0 9
17523: PUSH
17524: EMPTY
17525: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17526: LD_VAR 0 4
17530: PUSH
17531: LD_INT 0
17533: PUSH
17534: LD_INT 1
17536: PUSH
17537: LD_INT 2
17539: PUSH
17540: LD_INT 3
17542: PUSH
17543: LD_INT 4
17545: PUSH
17546: LD_INT 5
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: IN
17557: NOT
17558: PUSH
17559: LD_VAR 0 1
17563: PUSH
17564: LD_INT 0
17566: PUSH
17567: LD_INT 1
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: IN
17574: PUSH
17575: LD_VAR 0 5
17579: PUSH
17580: LD_INT 1
17582: PUSH
17583: LD_INT 2
17585: PUSH
17586: LD_INT 3
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: LIST
17593: IN
17594: NOT
17595: AND
17596: OR
17597: IFFALSE 17601
// exit ;
17599: GO 35992
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17601: LD_VAR 0 1
17605: PUSH
17606: LD_INT 6
17608: PUSH
17609: LD_INT 7
17611: PUSH
17612: LD_INT 8
17614: PUSH
17615: LD_INT 13
17617: PUSH
17618: LD_INT 12
17620: PUSH
17621: LD_INT 15
17623: PUSH
17624: LD_INT 11
17626: PUSH
17627: LD_INT 14
17629: PUSH
17630: LD_INT 10
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: IN
17644: IFFALSE 17654
// btype = b_lab ;
17646: LD_ADDR_VAR 0 1
17650: PUSH
17651: LD_INT 6
17653: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17654: LD_VAR 0 6
17658: PUSH
17659: LD_INT 0
17661: PUSH
17662: LD_INT 1
17664: PUSH
17665: LD_INT 2
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: LIST
17672: IN
17673: NOT
17674: PUSH
17675: LD_VAR 0 1
17679: PUSH
17680: LD_INT 0
17682: PUSH
17683: LD_INT 1
17685: PUSH
17686: LD_INT 2
17688: PUSH
17689: LD_INT 3
17691: PUSH
17692: LD_INT 6
17694: PUSH
17695: LD_INT 36
17697: PUSH
17698: LD_INT 4
17700: PUSH
17701: LD_INT 5
17703: PUSH
17704: LD_INT 31
17706: PUSH
17707: LD_INT 32
17709: PUSH
17710: LD_INT 33
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: IN
17726: NOT
17727: PUSH
17728: LD_VAR 0 6
17732: PUSH
17733: LD_INT 1
17735: EQUAL
17736: AND
17737: OR
17738: PUSH
17739: LD_VAR 0 1
17743: PUSH
17744: LD_INT 2
17746: PUSH
17747: LD_INT 3
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: IN
17754: NOT
17755: PUSH
17756: LD_VAR 0 6
17760: PUSH
17761: LD_INT 2
17763: EQUAL
17764: AND
17765: OR
17766: IFFALSE 17776
// mode = 0 ;
17768: LD_ADDR_VAR 0 6
17772: PUSH
17773: LD_INT 0
17775: ST_TO_ADDR
// case mode of 0 :
17776: LD_VAR 0 6
17780: PUSH
17781: LD_INT 0
17783: DOUBLE
17784: EQUAL
17785: IFTRUE 17789
17787: GO 29242
17789: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17790: LD_ADDR_VAR 0 11
17794: PUSH
17795: LD_INT 0
17797: PUSH
17798: LD_INT 0
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: LD_INT 0
17807: PUSH
17808: LD_INT 1
17810: NEG
17811: PUSH
17812: EMPTY
17813: LIST
17814: LIST
17815: PUSH
17816: LD_INT 1
17818: PUSH
17819: LD_INT 0
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: PUSH
17826: LD_INT 1
17828: PUSH
17829: LD_INT 1
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: PUSH
17836: LD_INT 0
17838: PUSH
17839: LD_INT 1
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PUSH
17846: LD_INT 1
17848: NEG
17849: PUSH
17850: LD_INT 0
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: PUSH
17857: LD_INT 1
17859: NEG
17860: PUSH
17861: LD_INT 1
17863: NEG
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: PUSH
17869: LD_INT 1
17871: NEG
17872: PUSH
17873: LD_INT 2
17875: NEG
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: PUSH
17881: LD_INT 0
17883: PUSH
17884: LD_INT 2
17886: NEG
17887: PUSH
17888: EMPTY
17889: LIST
17890: LIST
17891: PUSH
17892: LD_INT 1
17894: PUSH
17895: LD_INT 1
17897: NEG
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: PUSH
17903: LD_INT 1
17905: PUSH
17906: LD_INT 2
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: PUSH
17913: LD_INT 0
17915: PUSH
17916: LD_INT 2
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: PUSH
17923: LD_INT 1
17925: NEG
17926: PUSH
17927: LD_INT 1
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 1
17936: PUSH
17937: LD_INT 3
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 0
17946: PUSH
17947: LD_INT 3
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 1
17956: NEG
17957: PUSH
17958: LD_INT 2
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17983: LD_ADDR_VAR 0 12
17987: PUSH
17988: LD_INT 0
17990: PUSH
17991: LD_INT 0
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PUSH
17998: LD_INT 0
18000: PUSH
18001: LD_INT 1
18003: NEG
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 1
18011: PUSH
18012: LD_INT 0
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PUSH
18019: LD_INT 1
18021: PUSH
18022: LD_INT 1
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: PUSH
18029: LD_INT 0
18031: PUSH
18032: LD_INT 1
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PUSH
18039: LD_INT 1
18041: NEG
18042: PUSH
18043: LD_INT 0
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 1
18052: NEG
18053: PUSH
18054: LD_INT 1
18056: NEG
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PUSH
18062: LD_INT 1
18064: PUSH
18065: LD_INT 1
18067: NEG
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 2
18075: PUSH
18076: LD_INT 0
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 2
18085: PUSH
18086: LD_INT 1
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 1
18095: NEG
18096: PUSH
18097: LD_INT 1
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 2
18106: NEG
18107: PUSH
18108: LD_INT 0
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 2
18117: NEG
18118: PUSH
18119: LD_INT 1
18121: NEG
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 2
18129: NEG
18130: PUSH
18131: LD_INT 1
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PUSH
18138: LD_INT 3
18140: NEG
18141: PUSH
18142: LD_INT 0
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 3
18151: NEG
18152: PUSH
18153: LD_INT 1
18155: NEG
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18179: LD_ADDR_VAR 0 13
18183: PUSH
18184: LD_INT 0
18186: PUSH
18187: LD_INT 0
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: LD_INT 0
18196: PUSH
18197: LD_INT 1
18199: NEG
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: LD_INT 1
18207: PUSH
18208: LD_INT 0
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PUSH
18215: LD_INT 1
18217: PUSH
18218: LD_INT 1
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: PUSH
18225: LD_INT 0
18227: PUSH
18228: LD_INT 1
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PUSH
18235: LD_INT 1
18237: NEG
18238: PUSH
18239: LD_INT 0
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: LD_INT 1
18248: NEG
18249: PUSH
18250: LD_INT 1
18252: NEG
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: LD_INT 1
18260: NEG
18261: PUSH
18262: LD_INT 2
18264: NEG
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 2
18272: PUSH
18273: LD_INT 1
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: LD_INT 2
18282: PUSH
18283: LD_INT 2
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 1
18292: PUSH
18293: LD_INT 2
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 2
18302: NEG
18303: PUSH
18304: LD_INT 1
18306: NEG
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: LD_INT 2
18314: NEG
18315: PUSH
18316: LD_INT 2
18318: NEG
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: PUSH
18324: LD_INT 2
18326: NEG
18327: PUSH
18328: LD_INT 3
18330: NEG
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: PUSH
18336: LD_INT 3
18338: NEG
18339: PUSH
18340: LD_INT 2
18342: NEG
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 3
18350: NEG
18351: PUSH
18352: LD_INT 3
18354: NEG
18355: PUSH
18356: EMPTY
18357: LIST
18358: LIST
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18378: LD_ADDR_VAR 0 14
18382: PUSH
18383: LD_INT 0
18385: PUSH
18386: LD_INT 0
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PUSH
18393: LD_INT 0
18395: PUSH
18396: LD_INT 1
18398: NEG
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 1
18406: PUSH
18407: LD_INT 0
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 1
18416: PUSH
18417: LD_INT 1
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 0
18426: PUSH
18427: LD_INT 1
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 1
18436: NEG
18437: PUSH
18438: LD_INT 0
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 1
18447: NEG
18448: PUSH
18449: LD_INT 1
18451: NEG
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 1
18459: NEG
18460: PUSH
18461: LD_INT 2
18463: NEG
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: LD_INT 0
18471: PUSH
18472: LD_INT 2
18474: NEG
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PUSH
18480: LD_INT 1
18482: PUSH
18483: LD_INT 1
18485: NEG
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: PUSH
18491: LD_INT 1
18493: PUSH
18494: LD_INT 2
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: PUSH
18501: LD_INT 0
18503: PUSH
18504: LD_INT 2
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: PUSH
18511: LD_INT 1
18513: NEG
18514: PUSH
18515: LD_INT 1
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PUSH
18522: LD_INT 1
18524: NEG
18525: PUSH
18526: LD_INT 3
18528: NEG
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PUSH
18534: LD_INT 0
18536: PUSH
18537: LD_INT 3
18539: NEG
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PUSH
18545: LD_INT 1
18547: PUSH
18548: LD_INT 2
18550: NEG
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18574: LD_ADDR_VAR 0 15
18578: PUSH
18579: LD_INT 0
18581: PUSH
18582: LD_INT 0
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PUSH
18589: LD_INT 0
18591: PUSH
18592: LD_INT 1
18594: NEG
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 1
18602: PUSH
18603: LD_INT 0
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 1
18612: PUSH
18613: LD_INT 1
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: PUSH
18620: LD_INT 0
18622: PUSH
18623: LD_INT 1
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PUSH
18630: LD_INT 1
18632: NEG
18633: PUSH
18634: LD_INT 0
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: LD_INT 1
18643: NEG
18644: PUSH
18645: LD_INT 1
18647: NEG
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: LD_INT 1
18655: PUSH
18656: LD_INT 1
18658: NEG
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: LD_INT 2
18666: PUSH
18667: LD_INT 0
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: PUSH
18674: LD_INT 2
18676: PUSH
18677: LD_INT 1
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PUSH
18684: LD_INT 1
18686: NEG
18687: PUSH
18688: LD_INT 1
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PUSH
18695: LD_INT 2
18697: NEG
18698: PUSH
18699: LD_INT 0
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: LD_INT 2
18708: NEG
18709: PUSH
18710: LD_INT 1
18712: NEG
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PUSH
18718: LD_INT 2
18720: PUSH
18721: LD_INT 1
18723: NEG
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: LD_INT 3
18731: PUSH
18732: LD_INT 0
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 3
18741: PUSH
18742: LD_INT 1
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: LIST
18766: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18767: LD_ADDR_VAR 0 16
18771: PUSH
18772: LD_INT 0
18774: PUSH
18775: LD_INT 0
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 0
18784: PUSH
18785: LD_INT 1
18787: NEG
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 1
18795: PUSH
18796: LD_INT 0
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 1
18805: PUSH
18806: LD_INT 1
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: LD_INT 0
18815: PUSH
18816: LD_INT 1
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PUSH
18823: LD_INT 1
18825: NEG
18826: PUSH
18827: LD_INT 0
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: LD_INT 1
18836: NEG
18837: PUSH
18838: LD_INT 1
18840: NEG
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 1
18848: NEG
18849: PUSH
18850: LD_INT 2
18852: NEG
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: LD_INT 2
18860: PUSH
18861: LD_INT 1
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 2
18870: PUSH
18871: LD_INT 2
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PUSH
18878: LD_INT 1
18880: PUSH
18881: LD_INT 2
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: LD_INT 2
18890: NEG
18891: PUSH
18892: LD_INT 1
18894: NEG
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PUSH
18900: LD_INT 2
18902: NEG
18903: PUSH
18904: LD_INT 2
18906: NEG
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: PUSH
18912: LD_INT 3
18914: PUSH
18915: LD_INT 2
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 3
18924: PUSH
18925: LD_INT 3
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 2
18934: PUSH
18935: LD_INT 3
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18960: LD_ADDR_VAR 0 17
18964: PUSH
18965: LD_INT 0
18967: PUSH
18968: LD_INT 0
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: PUSH
18975: LD_INT 0
18977: PUSH
18978: LD_INT 1
18980: NEG
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PUSH
18986: LD_INT 1
18988: PUSH
18989: LD_INT 0
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: LD_INT 1
18998: PUSH
18999: LD_INT 1
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: LD_INT 0
19008: PUSH
19009: LD_INT 1
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: LD_INT 1
19018: NEG
19019: PUSH
19020: LD_INT 0
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 1
19029: NEG
19030: PUSH
19031: LD_INT 1
19033: NEG
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: LD_INT 1
19041: NEG
19042: PUSH
19043: LD_INT 2
19045: NEG
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 0
19053: PUSH
19054: LD_INT 2
19056: NEG
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: LD_INT 1
19064: PUSH
19065: LD_INT 1
19067: NEG
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: LD_INT 2
19075: PUSH
19076: LD_INT 0
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: PUSH
19083: LD_INT 2
19085: PUSH
19086: LD_INT 1
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 2
19095: PUSH
19096: LD_INT 2
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: LD_INT 1
19105: PUSH
19106: LD_INT 2
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: LD_INT 0
19115: PUSH
19116: LD_INT 2
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 1
19125: NEG
19126: PUSH
19127: LD_INT 1
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 2
19136: NEG
19137: PUSH
19138: LD_INT 0
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 2
19147: NEG
19148: PUSH
19149: LD_INT 1
19151: NEG
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 2
19159: NEG
19160: PUSH
19161: LD_INT 2
19163: NEG
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19190: LD_ADDR_VAR 0 18
19194: PUSH
19195: LD_INT 0
19197: PUSH
19198: LD_INT 0
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: LD_INT 0
19207: PUSH
19208: LD_INT 1
19210: NEG
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: LD_INT 1
19218: PUSH
19219: LD_INT 0
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: LD_INT 1
19228: PUSH
19229: LD_INT 1
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 0
19238: PUSH
19239: LD_INT 1
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 1
19248: NEG
19249: PUSH
19250: LD_INT 0
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PUSH
19257: LD_INT 1
19259: NEG
19260: PUSH
19261: LD_INT 1
19263: NEG
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PUSH
19269: LD_INT 1
19271: NEG
19272: PUSH
19273: LD_INT 2
19275: NEG
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 0
19283: PUSH
19284: LD_INT 2
19286: NEG
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: LD_INT 1
19294: PUSH
19295: LD_INT 1
19297: NEG
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: LD_INT 2
19305: PUSH
19306: LD_INT 0
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: PUSH
19313: LD_INT 2
19315: PUSH
19316: LD_INT 1
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: PUSH
19323: LD_INT 2
19325: PUSH
19326: LD_INT 2
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PUSH
19333: LD_INT 1
19335: PUSH
19336: LD_INT 2
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 0
19345: PUSH
19346: LD_INT 2
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 1
19355: NEG
19356: PUSH
19357: LD_INT 1
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 2
19366: NEG
19367: PUSH
19368: LD_INT 0
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: LD_INT 2
19377: NEG
19378: PUSH
19379: LD_INT 1
19381: NEG
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: PUSH
19387: LD_INT 2
19389: NEG
19390: PUSH
19391: LD_INT 2
19393: NEG
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19420: LD_ADDR_VAR 0 19
19424: PUSH
19425: LD_INT 0
19427: PUSH
19428: LD_INT 0
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 0
19437: PUSH
19438: LD_INT 1
19440: NEG
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PUSH
19446: LD_INT 1
19448: PUSH
19449: LD_INT 0
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: PUSH
19456: LD_INT 1
19458: PUSH
19459: LD_INT 1
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PUSH
19466: LD_INT 0
19468: PUSH
19469: LD_INT 1
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: PUSH
19476: LD_INT 1
19478: NEG
19479: PUSH
19480: LD_INT 0
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PUSH
19487: LD_INT 1
19489: NEG
19490: PUSH
19491: LD_INT 1
19493: NEG
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 1
19501: NEG
19502: PUSH
19503: LD_INT 2
19505: NEG
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 0
19513: PUSH
19514: LD_INT 2
19516: NEG
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: LD_INT 1
19524: PUSH
19525: LD_INT 1
19527: NEG
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PUSH
19533: LD_INT 2
19535: PUSH
19536: LD_INT 0
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: LD_INT 2
19545: PUSH
19546: LD_INT 1
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: LD_INT 2
19555: PUSH
19556: LD_INT 2
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PUSH
19563: LD_INT 1
19565: PUSH
19566: LD_INT 2
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: LD_INT 0
19575: PUSH
19576: LD_INT 2
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: LD_INT 1
19585: NEG
19586: PUSH
19587: LD_INT 1
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: LD_INT 2
19596: NEG
19597: PUSH
19598: LD_INT 0
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: PUSH
19605: LD_INT 2
19607: NEG
19608: PUSH
19609: LD_INT 1
19611: NEG
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: LD_INT 2
19619: NEG
19620: PUSH
19621: LD_INT 2
19623: NEG
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19650: LD_ADDR_VAR 0 20
19654: PUSH
19655: LD_INT 0
19657: PUSH
19658: LD_INT 0
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: LD_INT 0
19667: PUSH
19668: LD_INT 1
19670: NEG
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 1
19678: PUSH
19679: LD_INT 0
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 1
19688: PUSH
19689: LD_INT 1
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: PUSH
19696: LD_INT 0
19698: PUSH
19699: LD_INT 1
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 1
19708: NEG
19709: PUSH
19710: LD_INT 0
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: PUSH
19717: LD_INT 1
19719: NEG
19720: PUSH
19721: LD_INT 1
19723: NEG
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PUSH
19729: LD_INT 1
19731: NEG
19732: PUSH
19733: LD_INT 2
19735: NEG
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: LD_INT 0
19743: PUSH
19744: LD_INT 2
19746: NEG
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 1
19754: PUSH
19755: LD_INT 1
19757: NEG
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 2
19765: PUSH
19766: LD_INT 0
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 2
19775: PUSH
19776: LD_INT 1
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 2
19785: PUSH
19786: LD_INT 2
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PUSH
19793: LD_INT 1
19795: PUSH
19796: LD_INT 2
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 0
19805: PUSH
19806: LD_INT 2
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: LD_INT 1
19815: NEG
19816: PUSH
19817: LD_INT 1
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 2
19826: NEG
19827: PUSH
19828: LD_INT 0
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PUSH
19835: LD_INT 2
19837: NEG
19838: PUSH
19839: LD_INT 1
19841: NEG
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 2
19849: NEG
19850: PUSH
19851: LD_INT 2
19853: NEG
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19880: LD_ADDR_VAR 0 21
19884: PUSH
19885: LD_INT 0
19887: PUSH
19888: LD_INT 0
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 0
19897: PUSH
19898: LD_INT 1
19900: NEG
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 1
19908: PUSH
19909: LD_INT 0
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: LD_INT 1
19918: PUSH
19919: LD_INT 1
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: LD_INT 0
19928: PUSH
19929: LD_INT 1
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PUSH
19936: LD_INT 1
19938: NEG
19939: PUSH
19940: LD_INT 0
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PUSH
19947: LD_INT 1
19949: NEG
19950: PUSH
19951: LD_INT 1
19953: NEG
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 1
19961: NEG
19962: PUSH
19963: LD_INT 2
19965: NEG
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 0
19973: PUSH
19974: LD_INT 2
19976: NEG
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 1
19984: PUSH
19985: LD_INT 1
19987: NEG
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 2
19995: PUSH
19996: LD_INT 0
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 2
20005: PUSH
20006: LD_INT 1
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: LD_INT 2
20015: PUSH
20016: LD_INT 2
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: LD_INT 1
20025: PUSH
20026: LD_INT 2
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: LD_INT 0
20035: PUSH
20036: LD_INT 2
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: LD_INT 1
20045: NEG
20046: PUSH
20047: LD_INT 1
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PUSH
20054: LD_INT 2
20056: NEG
20057: PUSH
20058: LD_INT 0
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 2
20067: NEG
20068: PUSH
20069: LD_INT 1
20071: NEG
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: LD_INT 2
20079: NEG
20080: PUSH
20081: LD_INT 2
20083: NEG
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20110: LD_ADDR_VAR 0 22
20114: PUSH
20115: LD_INT 0
20117: PUSH
20118: LD_INT 0
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: LD_INT 0
20127: PUSH
20128: LD_INT 1
20130: NEG
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: LD_INT 1
20138: PUSH
20139: LD_INT 0
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 1
20148: PUSH
20149: LD_INT 1
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: LD_INT 0
20158: PUSH
20159: LD_INT 1
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PUSH
20166: LD_INT 1
20168: NEG
20169: PUSH
20170: LD_INT 0
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: PUSH
20177: LD_INT 1
20179: NEG
20180: PUSH
20181: LD_INT 1
20183: NEG
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: LD_INT 1
20191: NEG
20192: PUSH
20193: LD_INT 2
20195: NEG
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PUSH
20201: LD_INT 0
20203: PUSH
20204: LD_INT 2
20206: NEG
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: PUSH
20212: LD_INT 1
20214: PUSH
20215: LD_INT 1
20217: NEG
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: LD_INT 2
20225: PUSH
20226: LD_INT 0
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PUSH
20233: LD_INT 2
20235: PUSH
20236: LD_INT 1
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PUSH
20243: LD_INT 2
20245: PUSH
20246: LD_INT 2
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: PUSH
20253: LD_INT 1
20255: PUSH
20256: LD_INT 2
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PUSH
20263: LD_INT 0
20265: PUSH
20266: LD_INT 2
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 1
20275: NEG
20276: PUSH
20277: LD_INT 1
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: LD_INT 2
20286: NEG
20287: PUSH
20288: LD_INT 0
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: LD_INT 2
20297: NEG
20298: PUSH
20299: LD_INT 1
20301: NEG
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: PUSH
20307: LD_INT 2
20309: NEG
20310: PUSH
20311: LD_INT 2
20313: NEG
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20340: LD_ADDR_VAR 0 23
20344: PUSH
20345: LD_INT 0
20347: PUSH
20348: LD_INT 0
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: LD_INT 0
20357: PUSH
20358: LD_INT 1
20360: NEG
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 1
20368: PUSH
20369: LD_INT 0
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: LD_INT 1
20378: PUSH
20379: LD_INT 1
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: PUSH
20386: LD_INT 0
20388: PUSH
20389: LD_INT 1
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: PUSH
20396: LD_INT 1
20398: NEG
20399: PUSH
20400: LD_INT 0
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: PUSH
20407: LD_INT 1
20409: NEG
20410: PUSH
20411: LD_INT 1
20413: NEG
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: PUSH
20419: LD_INT 1
20421: NEG
20422: PUSH
20423: LD_INT 2
20425: NEG
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 0
20433: PUSH
20434: LD_INT 2
20436: NEG
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: LD_INT 1
20444: PUSH
20445: LD_INT 1
20447: NEG
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 2
20455: PUSH
20456: LD_INT 0
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: LD_INT 2
20465: PUSH
20466: LD_INT 1
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: LD_INT 2
20475: PUSH
20476: LD_INT 2
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PUSH
20483: LD_INT 1
20485: PUSH
20486: LD_INT 2
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PUSH
20493: LD_INT 0
20495: PUSH
20496: LD_INT 2
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 1
20505: NEG
20506: PUSH
20507: LD_INT 1
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 2
20516: NEG
20517: PUSH
20518: LD_INT 0
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 2
20527: NEG
20528: PUSH
20529: LD_INT 1
20531: NEG
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 2
20539: NEG
20540: PUSH
20541: LD_INT 2
20543: NEG
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 2
20551: NEG
20552: PUSH
20553: LD_INT 3
20555: NEG
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: PUSH
20561: LD_INT 1
20563: NEG
20564: PUSH
20565: LD_INT 3
20567: NEG
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: PUSH
20573: LD_INT 1
20575: PUSH
20576: LD_INT 2
20578: NEG
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: LD_INT 2
20586: PUSH
20587: LD_INT 1
20589: NEG
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20620: LD_ADDR_VAR 0 24
20624: PUSH
20625: LD_INT 0
20627: PUSH
20628: LD_INT 0
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: LD_INT 0
20637: PUSH
20638: LD_INT 1
20640: NEG
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: LD_INT 1
20648: PUSH
20649: LD_INT 0
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: PUSH
20656: LD_INT 1
20658: PUSH
20659: LD_INT 1
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: LD_INT 0
20668: PUSH
20669: LD_INT 1
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 1
20678: NEG
20679: PUSH
20680: LD_INT 0
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: LD_INT 1
20689: NEG
20690: PUSH
20691: LD_INT 1
20693: NEG
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PUSH
20699: LD_INT 1
20701: NEG
20702: PUSH
20703: LD_INT 2
20705: NEG
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 0
20713: PUSH
20714: LD_INT 2
20716: NEG
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 1
20724: PUSH
20725: LD_INT 1
20727: NEG
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: LD_INT 2
20735: PUSH
20736: LD_INT 0
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: LD_INT 2
20745: PUSH
20746: LD_INT 1
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: PUSH
20753: LD_INT 2
20755: PUSH
20756: LD_INT 2
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 1
20765: PUSH
20766: LD_INT 2
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PUSH
20773: LD_INT 0
20775: PUSH
20776: LD_INT 2
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: LD_INT 1
20785: NEG
20786: PUSH
20787: LD_INT 1
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 2
20796: NEG
20797: PUSH
20798: LD_INT 0
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PUSH
20805: LD_INT 2
20807: NEG
20808: PUSH
20809: LD_INT 1
20811: NEG
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: PUSH
20817: LD_INT 2
20819: NEG
20820: PUSH
20821: LD_INT 2
20823: NEG
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: LD_INT 1
20831: PUSH
20832: LD_INT 2
20834: NEG
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 2
20842: PUSH
20843: LD_INT 1
20845: NEG
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: LD_INT 3
20853: PUSH
20854: LD_INT 1
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 3
20863: PUSH
20864: LD_INT 2
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20896: LD_ADDR_VAR 0 25
20900: PUSH
20901: LD_INT 0
20903: PUSH
20904: LD_INT 0
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: LD_INT 0
20913: PUSH
20914: LD_INT 1
20916: NEG
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: PUSH
20922: LD_INT 1
20924: PUSH
20925: LD_INT 0
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PUSH
20932: LD_INT 1
20934: PUSH
20935: LD_INT 1
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: PUSH
20942: LD_INT 0
20944: PUSH
20945: LD_INT 1
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: PUSH
20952: LD_INT 1
20954: NEG
20955: PUSH
20956: LD_INT 0
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: LD_INT 1
20965: NEG
20966: PUSH
20967: LD_INT 1
20969: NEG
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: PUSH
20975: LD_INT 1
20977: NEG
20978: PUSH
20979: LD_INT 2
20981: NEG
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 0
20989: PUSH
20990: LD_INT 2
20992: NEG
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: PUSH
20998: LD_INT 1
21000: PUSH
21001: LD_INT 1
21003: NEG
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PUSH
21009: LD_INT 2
21011: PUSH
21012: LD_INT 0
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PUSH
21019: LD_INT 2
21021: PUSH
21022: LD_INT 1
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: PUSH
21029: LD_INT 2
21031: PUSH
21032: LD_INT 2
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: PUSH
21039: LD_INT 1
21041: PUSH
21042: LD_INT 2
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 0
21051: PUSH
21052: LD_INT 2
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 1
21061: NEG
21062: PUSH
21063: LD_INT 1
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PUSH
21070: LD_INT 2
21072: NEG
21073: PUSH
21074: LD_INT 0
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 2
21083: NEG
21084: PUSH
21085: LD_INT 1
21087: NEG
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PUSH
21093: LD_INT 2
21095: NEG
21096: PUSH
21097: LD_INT 2
21099: NEG
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: LD_INT 3
21107: PUSH
21108: LD_INT 1
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 3
21117: PUSH
21118: LD_INT 2
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 2
21127: PUSH
21128: LD_INT 3
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: LD_INT 1
21137: PUSH
21138: LD_INT 3
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21170: LD_ADDR_VAR 0 26
21174: PUSH
21175: LD_INT 0
21177: PUSH
21178: LD_INT 0
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PUSH
21185: LD_INT 0
21187: PUSH
21188: LD_INT 1
21190: NEG
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 1
21198: PUSH
21199: LD_INT 0
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: LD_INT 1
21208: PUSH
21209: LD_INT 1
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: LD_INT 0
21218: PUSH
21219: LD_INT 1
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 1
21228: NEG
21229: PUSH
21230: LD_INT 0
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 1
21239: NEG
21240: PUSH
21241: LD_INT 1
21243: NEG
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 1
21251: NEG
21252: PUSH
21253: LD_INT 2
21255: NEG
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: PUSH
21261: LD_INT 0
21263: PUSH
21264: LD_INT 2
21266: NEG
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: PUSH
21272: LD_INT 1
21274: PUSH
21275: LD_INT 1
21277: NEG
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: PUSH
21283: LD_INT 2
21285: PUSH
21286: LD_INT 0
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: PUSH
21293: LD_INT 2
21295: PUSH
21296: LD_INT 1
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: PUSH
21303: LD_INT 2
21305: PUSH
21306: LD_INT 2
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: PUSH
21313: LD_INT 1
21315: PUSH
21316: LD_INT 2
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PUSH
21323: LD_INT 0
21325: PUSH
21326: LD_INT 2
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: LD_INT 1
21335: NEG
21336: PUSH
21337: LD_INT 1
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 2
21346: NEG
21347: PUSH
21348: LD_INT 0
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: LD_INT 2
21357: NEG
21358: PUSH
21359: LD_INT 1
21361: NEG
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: LD_INT 2
21369: NEG
21370: PUSH
21371: LD_INT 2
21373: NEG
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: LD_INT 2
21381: PUSH
21382: LD_INT 3
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: LD_INT 1
21391: PUSH
21392: LD_INT 3
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 1
21401: NEG
21402: PUSH
21403: LD_INT 2
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: PUSH
21410: LD_INT 2
21412: NEG
21413: PUSH
21414: LD_INT 1
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21446: LD_ADDR_VAR 0 27
21450: PUSH
21451: LD_INT 0
21453: PUSH
21454: LD_INT 0
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: LD_INT 0
21463: PUSH
21464: LD_INT 1
21466: NEG
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: LD_INT 1
21474: PUSH
21475: LD_INT 0
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: PUSH
21482: LD_INT 1
21484: PUSH
21485: LD_INT 1
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: PUSH
21492: LD_INT 0
21494: PUSH
21495: LD_INT 1
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PUSH
21502: LD_INT 1
21504: NEG
21505: PUSH
21506: LD_INT 0
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PUSH
21513: LD_INT 1
21515: NEG
21516: PUSH
21517: LD_INT 1
21519: NEG
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PUSH
21525: LD_INT 1
21527: NEG
21528: PUSH
21529: LD_INT 2
21531: NEG
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: PUSH
21537: LD_INT 0
21539: PUSH
21540: LD_INT 2
21542: NEG
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PUSH
21548: LD_INT 1
21550: PUSH
21551: LD_INT 1
21553: NEG
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: PUSH
21559: LD_INT 2
21561: PUSH
21562: LD_INT 0
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: PUSH
21569: LD_INT 2
21571: PUSH
21572: LD_INT 1
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PUSH
21579: LD_INT 2
21581: PUSH
21582: LD_INT 2
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: PUSH
21589: LD_INT 1
21591: PUSH
21592: LD_INT 2
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: LD_INT 0
21601: PUSH
21602: LD_INT 2
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: LD_INT 1
21611: NEG
21612: PUSH
21613: LD_INT 1
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: LD_INT 2
21622: NEG
21623: PUSH
21624: LD_INT 0
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PUSH
21631: LD_INT 2
21633: NEG
21634: PUSH
21635: LD_INT 1
21637: NEG
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: PUSH
21643: LD_INT 2
21645: NEG
21646: PUSH
21647: LD_INT 2
21649: NEG
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: LD_INT 1
21657: NEG
21658: PUSH
21659: LD_INT 2
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: LD_INT 2
21668: NEG
21669: PUSH
21670: LD_INT 1
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: PUSH
21677: LD_INT 3
21679: NEG
21680: PUSH
21681: LD_INT 1
21683: NEG
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: PUSH
21689: LD_INT 3
21691: NEG
21692: PUSH
21693: LD_INT 2
21695: NEG
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21726: LD_ADDR_VAR 0 28
21730: PUSH
21731: LD_INT 0
21733: PUSH
21734: LD_INT 0
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: LD_INT 0
21743: PUSH
21744: LD_INT 1
21746: NEG
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 1
21754: PUSH
21755: LD_INT 0
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 1
21764: PUSH
21765: LD_INT 1
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 0
21774: PUSH
21775: LD_INT 1
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 1
21784: NEG
21785: PUSH
21786: LD_INT 0
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: LD_INT 1
21795: NEG
21796: PUSH
21797: LD_INT 1
21799: NEG
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 1
21807: NEG
21808: PUSH
21809: LD_INT 2
21811: NEG
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: PUSH
21817: LD_INT 0
21819: PUSH
21820: LD_INT 2
21822: NEG
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: PUSH
21828: LD_INT 1
21830: PUSH
21831: LD_INT 1
21833: NEG
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: PUSH
21839: LD_INT 2
21841: PUSH
21842: LD_INT 0
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: PUSH
21849: LD_INT 2
21851: PUSH
21852: LD_INT 1
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: PUSH
21859: LD_INT 2
21861: PUSH
21862: LD_INT 2
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 1
21871: PUSH
21872: LD_INT 2
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 0
21881: PUSH
21882: LD_INT 2
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: LD_INT 1
21891: NEG
21892: PUSH
21893: LD_INT 1
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 2
21902: NEG
21903: PUSH
21904: LD_INT 0
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PUSH
21911: LD_INT 2
21913: NEG
21914: PUSH
21915: LD_INT 1
21917: NEG
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: PUSH
21923: LD_INT 2
21925: NEG
21926: PUSH
21927: LD_INT 2
21929: NEG
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 2
21937: NEG
21938: PUSH
21939: LD_INT 3
21941: NEG
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: LD_INT 1
21949: NEG
21950: PUSH
21951: LD_INT 3
21953: NEG
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 3
21961: NEG
21962: PUSH
21963: LD_INT 1
21965: NEG
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PUSH
21971: LD_INT 3
21973: NEG
21974: PUSH
21975: LD_INT 2
21977: NEG
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22008: LD_ADDR_VAR 0 29
22012: PUSH
22013: LD_INT 0
22015: PUSH
22016: LD_INT 0
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: PUSH
22023: LD_INT 0
22025: PUSH
22026: LD_INT 1
22028: NEG
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: PUSH
22034: LD_INT 1
22036: PUSH
22037: LD_INT 0
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PUSH
22044: LD_INT 1
22046: PUSH
22047: LD_INT 1
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 0
22056: PUSH
22057: LD_INT 1
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: LD_INT 1
22066: NEG
22067: PUSH
22068: LD_INT 0
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: LD_INT 1
22077: NEG
22078: PUSH
22079: LD_INT 1
22081: NEG
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PUSH
22087: LD_INT 1
22089: NEG
22090: PUSH
22091: LD_INT 2
22093: NEG
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: LD_INT 0
22101: PUSH
22102: LD_INT 2
22104: NEG
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 1
22112: PUSH
22113: LD_INT 1
22115: NEG
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 2
22123: PUSH
22124: LD_INT 0
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 2
22133: PUSH
22134: LD_INT 1
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 1
22143: PUSH
22144: LD_INT 2
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: PUSH
22151: LD_INT 0
22153: PUSH
22154: LD_INT 2
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PUSH
22161: LD_INT 1
22163: NEG
22164: PUSH
22165: LD_INT 1
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PUSH
22172: LD_INT 2
22174: NEG
22175: PUSH
22176: LD_INT 1
22178: NEG
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: PUSH
22184: LD_INT 2
22186: NEG
22187: PUSH
22188: LD_INT 2
22190: NEG
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: PUSH
22196: LD_INT 2
22198: NEG
22199: PUSH
22200: LD_INT 3
22202: NEG
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: LD_INT 2
22210: PUSH
22211: LD_INT 1
22213: NEG
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: PUSH
22219: LD_INT 3
22221: PUSH
22222: LD_INT 1
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PUSH
22229: LD_INT 1
22231: PUSH
22232: LD_INT 3
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: LD_INT 1
22241: NEG
22242: PUSH
22243: LD_INT 2
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 3
22252: NEG
22253: PUSH
22254: LD_INT 2
22256: NEG
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22287: LD_ADDR_VAR 0 30
22291: PUSH
22292: LD_INT 0
22294: PUSH
22295: LD_INT 0
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 0
22304: PUSH
22305: LD_INT 1
22307: NEG
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PUSH
22313: LD_INT 1
22315: PUSH
22316: LD_INT 0
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PUSH
22323: LD_INT 1
22325: PUSH
22326: LD_INT 1
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: LD_INT 0
22335: PUSH
22336: LD_INT 1
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 1
22345: NEG
22346: PUSH
22347: LD_INT 0
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: PUSH
22354: LD_INT 1
22356: NEG
22357: PUSH
22358: LD_INT 1
22360: NEG
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 1
22368: NEG
22369: PUSH
22370: LD_INT 2
22372: NEG
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: PUSH
22378: LD_INT 0
22380: PUSH
22381: LD_INT 2
22383: NEG
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: LD_INT 1
22391: PUSH
22392: LD_INT 1
22394: NEG
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: LD_INT 2
22402: PUSH
22403: LD_INT 0
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: PUSH
22410: LD_INT 2
22412: PUSH
22413: LD_INT 1
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: PUSH
22420: LD_INT 2
22422: PUSH
22423: LD_INT 2
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: PUSH
22430: LD_INT 1
22432: PUSH
22433: LD_INT 2
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 1
22442: NEG
22443: PUSH
22444: LD_INT 1
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: LD_INT 2
22453: NEG
22454: PUSH
22455: LD_INT 0
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PUSH
22462: LD_INT 2
22464: NEG
22465: PUSH
22466: LD_INT 1
22468: NEG
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: PUSH
22474: LD_INT 1
22476: NEG
22477: PUSH
22478: LD_INT 3
22480: NEG
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 1
22488: PUSH
22489: LD_INT 2
22491: NEG
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 3
22499: PUSH
22500: LD_INT 2
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: LD_INT 2
22509: PUSH
22510: LD_INT 3
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 2
22519: NEG
22520: PUSH
22521: LD_INT 1
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PUSH
22528: LD_INT 3
22530: NEG
22531: PUSH
22532: LD_INT 1
22534: NEG
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22565: LD_ADDR_VAR 0 31
22569: PUSH
22570: LD_INT 0
22572: PUSH
22573: LD_INT 0
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 0
22582: PUSH
22583: LD_INT 1
22585: NEG
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 1
22593: PUSH
22594: LD_INT 0
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 1
22603: PUSH
22604: LD_INT 1
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PUSH
22611: LD_INT 0
22613: PUSH
22614: LD_INT 1
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: PUSH
22621: LD_INT 1
22623: NEG
22624: PUSH
22625: LD_INT 0
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: PUSH
22632: LD_INT 1
22634: NEG
22635: PUSH
22636: LD_INT 1
22638: NEG
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 1
22646: NEG
22647: PUSH
22648: LD_INT 2
22650: NEG
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 1
22658: PUSH
22659: LD_INT 1
22661: NEG
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PUSH
22667: LD_INT 2
22669: PUSH
22670: LD_INT 0
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: PUSH
22677: LD_INT 2
22679: PUSH
22680: LD_INT 1
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 2
22689: PUSH
22690: LD_INT 2
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 1
22699: PUSH
22700: LD_INT 2
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: LD_INT 0
22709: PUSH
22710: LD_INT 2
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PUSH
22717: LD_INT 1
22719: NEG
22720: PUSH
22721: LD_INT 1
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PUSH
22728: LD_INT 2
22730: NEG
22731: PUSH
22732: LD_INT 1
22734: NEG
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: LD_INT 2
22742: NEG
22743: PUSH
22744: LD_INT 2
22746: NEG
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: PUSH
22752: LD_INT 2
22754: NEG
22755: PUSH
22756: LD_INT 3
22758: NEG
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PUSH
22764: LD_INT 2
22766: PUSH
22767: LD_INT 1
22769: NEG
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: PUSH
22775: LD_INT 3
22777: PUSH
22778: LD_INT 1
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: LD_INT 1
22787: PUSH
22788: LD_INT 3
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: PUSH
22795: LD_INT 1
22797: NEG
22798: PUSH
22799: LD_INT 2
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: LD_INT 3
22808: NEG
22809: PUSH
22810: LD_INT 2
22812: NEG
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22843: LD_ADDR_VAR 0 32
22847: PUSH
22848: LD_INT 0
22850: PUSH
22851: LD_INT 0
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: PUSH
22858: LD_INT 0
22860: PUSH
22861: LD_INT 1
22863: NEG
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: PUSH
22869: LD_INT 1
22871: PUSH
22872: LD_INT 0
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PUSH
22879: LD_INT 1
22881: PUSH
22882: LD_INT 1
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: PUSH
22889: LD_INT 0
22891: PUSH
22892: LD_INT 1
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: PUSH
22899: LD_INT 1
22901: NEG
22902: PUSH
22903: LD_INT 0
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PUSH
22910: LD_INT 1
22912: NEG
22913: PUSH
22914: LD_INT 1
22916: NEG
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 1
22924: NEG
22925: PUSH
22926: LD_INT 2
22928: NEG
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 0
22936: PUSH
22937: LD_INT 2
22939: NEG
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: LD_INT 1
22947: PUSH
22948: LD_INT 1
22950: NEG
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: PUSH
22956: LD_INT 2
22958: PUSH
22959: LD_INT 1
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: PUSH
22966: LD_INT 2
22968: PUSH
22969: LD_INT 2
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PUSH
22976: LD_INT 1
22978: PUSH
22979: LD_INT 2
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PUSH
22986: LD_INT 0
22988: PUSH
22989: LD_INT 2
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 1
22998: NEG
22999: PUSH
23000: LD_INT 1
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PUSH
23007: LD_INT 2
23009: NEG
23010: PUSH
23011: LD_INT 0
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: LD_INT 2
23020: NEG
23021: PUSH
23022: LD_INT 1
23024: NEG
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 1
23032: NEG
23033: PUSH
23034: LD_INT 3
23036: NEG
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 1
23044: PUSH
23045: LD_INT 2
23047: NEG
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 3
23055: PUSH
23056: LD_INT 2
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: PUSH
23063: LD_INT 2
23065: PUSH
23066: LD_INT 3
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: LD_INT 2
23075: NEG
23076: PUSH
23077: LD_INT 1
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: LD_INT 3
23086: NEG
23087: PUSH
23088: LD_INT 1
23090: NEG
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23121: LD_ADDR_VAR 0 33
23125: PUSH
23126: LD_INT 0
23128: PUSH
23129: LD_INT 0
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: LD_INT 0
23138: PUSH
23139: LD_INT 1
23141: NEG
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: PUSH
23147: LD_INT 1
23149: PUSH
23150: LD_INT 0
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 1
23159: PUSH
23160: LD_INT 1
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: LD_INT 0
23169: PUSH
23170: LD_INT 1
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 1
23179: NEG
23180: PUSH
23181: LD_INT 0
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: PUSH
23188: LD_INT 1
23190: NEG
23191: PUSH
23192: LD_INT 1
23194: NEG
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 1
23202: NEG
23203: PUSH
23204: LD_INT 2
23206: NEG
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 1
23214: PUSH
23215: LD_INT 1
23217: NEG
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 2
23225: PUSH
23226: LD_INT 0
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: LD_INT 2
23235: PUSH
23236: LD_INT 1
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 1
23245: PUSH
23246: LD_INT 2
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 0
23255: PUSH
23256: LD_INT 2
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: LD_INT 1
23265: NEG
23266: PUSH
23267: LD_INT 1
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 2
23276: NEG
23277: PUSH
23278: LD_INT 0
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: PUSH
23285: LD_INT 2
23287: NEG
23288: PUSH
23289: LD_INT 1
23291: NEG
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 2
23299: NEG
23300: PUSH
23301: LD_INT 2
23303: NEG
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: PUSH
23309: LD_INT 2
23311: NEG
23312: PUSH
23313: LD_INT 3
23315: NEG
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: PUSH
23321: LD_INT 2
23323: PUSH
23324: LD_INT 1
23326: NEG
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 3
23334: PUSH
23335: LD_INT 1
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 1
23344: PUSH
23345: LD_INT 3
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: PUSH
23352: LD_INT 1
23354: NEG
23355: PUSH
23356: LD_INT 2
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: LD_INT 3
23365: NEG
23366: PUSH
23367: LD_INT 2
23369: NEG
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23400: LD_ADDR_VAR 0 34
23404: PUSH
23405: LD_INT 0
23407: PUSH
23408: LD_INT 0
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 0
23417: PUSH
23418: LD_INT 1
23420: NEG
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: PUSH
23426: LD_INT 1
23428: PUSH
23429: LD_INT 0
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: PUSH
23436: LD_INT 1
23438: PUSH
23439: LD_INT 1
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: LD_INT 0
23448: PUSH
23449: LD_INT 1
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 1
23458: NEG
23459: PUSH
23460: LD_INT 0
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: PUSH
23467: LD_INT 1
23469: NEG
23470: PUSH
23471: LD_INT 1
23473: NEG
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: PUSH
23479: LD_INT 1
23481: NEG
23482: PUSH
23483: LD_INT 2
23485: NEG
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 0
23493: PUSH
23494: LD_INT 2
23496: NEG
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PUSH
23502: LD_INT 1
23504: PUSH
23505: LD_INT 1
23507: NEG
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: LD_INT 2
23515: PUSH
23516: LD_INT 1
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: LD_INT 2
23525: PUSH
23526: LD_INT 2
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: PUSH
23533: LD_INT 1
23535: PUSH
23536: LD_INT 2
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: PUSH
23543: LD_INT 1
23545: NEG
23546: PUSH
23547: LD_INT 1
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 2
23556: NEG
23557: PUSH
23558: LD_INT 0
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 2
23567: NEG
23568: PUSH
23569: LD_INT 1
23571: NEG
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: LD_INT 2
23579: NEG
23580: PUSH
23581: LD_INT 2
23583: NEG
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: LD_INT 1
23591: NEG
23592: PUSH
23593: LD_INT 3
23595: NEG
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: PUSH
23601: LD_INT 1
23603: PUSH
23604: LD_INT 2
23606: NEG
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PUSH
23612: LD_INT 3
23614: PUSH
23615: LD_INT 2
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 2
23624: PUSH
23625: LD_INT 3
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 2
23634: NEG
23635: PUSH
23636: LD_INT 1
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: PUSH
23643: LD_INT 3
23645: NEG
23646: PUSH
23647: LD_INT 1
23649: NEG
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23680: LD_ADDR_VAR 0 35
23684: PUSH
23685: LD_INT 0
23687: PUSH
23688: LD_INT 0
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 0
23697: PUSH
23698: LD_INT 1
23700: NEG
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 1
23708: PUSH
23709: LD_INT 0
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 1
23718: PUSH
23719: LD_INT 1
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PUSH
23726: LD_INT 0
23728: PUSH
23729: LD_INT 1
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 1
23738: NEG
23739: PUSH
23740: LD_INT 0
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 1
23749: NEG
23750: PUSH
23751: LD_INT 1
23753: NEG
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 2
23761: PUSH
23762: LD_INT 1
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 2
23771: NEG
23772: PUSH
23773: LD_INT 1
23775: NEG
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23792: LD_ADDR_VAR 0 36
23796: PUSH
23797: LD_INT 0
23799: PUSH
23800: LD_INT 0
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: LD_INT 0
23809: PUSH
23810: LD_INT 1
23812: NEG
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PUSH
23818: LD_INT 1
23820: PUSH
23821: LD_INT 0
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 1
23830: PUSH
23831: LD_INT 1
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: PUSH
23838: LD_INT 0
23840: PUSH
23841: LD_INT 1
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PUSH
23848: LD_INT 1
23850: NEG
23851: PUSH
23852: LD_INT 0
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: LD_INT 1
23861: NEG
23862: PUSH
23863: LD_INT 1
23865: NEG
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 1
23873: NEG
23874: PUSH
23875: LD_INT 2
23877: NEG
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: LD_INT 1
23885: PUSH
23886: LD_INT 2
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23904: LD_ADDR_VAR 0 37
23908: PUSH
23909: LD_INT 0
23911: PUSH
23912: LD_INT 0
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 0
23921: PUSH
23922: LD_INT 1
23924: NEG
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 1
23932: PUSH
23933: LD_INT 0
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: LD_INT 1
23942: PUSH
23943: LD_INT 1
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: PUSH
23950: LD_INT 0
23952: PUSH
23953: LD_INT 1
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: LD_INT 1
23962: NEG
23963: PUSH
23964: LD_INT 0
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 1
23973: NEG
23974: PUSH
23975: LD_INT 1
23977: NEG
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: LD_INT 1
23985: PUSH
23986: LD_INT 1
23988: NEG
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 1
23996: NEG
23997: PUSH
23998: LD_INT 1
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24016: LD_ADDR_VAR 0 38
24020: PUSH
24021: LD_INT 0
24023: PUSH
24024: LD_INT 0
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: LD_INT 0
24033: PUSH
24034: LD_INT 1
24036: NEG
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: LD_INT 1
24044: PUSH
24045: LD_INT 0
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: LD_INT 1
24054: PUSH
24055: LD_INT 1
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PUSH
24062: LD_INT 0
24064: PUSH
24065: LD_INT 1
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: PUSH
24072: LD_INT 1
24074: NEG
24075: PUSH
24076: LD_INT 0
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 1
24085: NEG
24086: PUSH
24087: LD_INT 1
24089: NEG
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 2
24097: PUSH
24098: LD_INT 1
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 2
24107: NEG
24108: PUSH
24109: LD_INT 1
24111: NEG
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24128: LD_ADDR_VAR 0 39
24132: PUSH
24133: LD_INT 0
24135: PUSH
24136: LD_INT 0
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 0
24145: PUSH
24146: LD_INT 1
24148: NEG
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 1
24156: PUSH
24157: LD_INT 0
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 1
24166: PUSH
24167: LD_INT 1
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: PUSH
24174: LD_INT 0
24176: PUSH
24177: LD_INT 1
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PUSH
24184: LD_INT 1
24186: NEG
24187: PUSH
24188: LD_INT 0
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: PUSH
24195: LD_INT 1
24197: NEG
24198: PUSH
24199: LD_INT 1
24201: NEG
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PUSH
24207: LD_INT 1
24209: NEG
24210: PUSH
24211: LD_INT 2
24213: NEG
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 1
24221: PUSH
24222: LD_INT 2
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24240: LD_ADDR_VAR 0 40
24244: PUSH
24245: LD_INT 0
24247: PUSH
24248: LD_INT 0
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 0
24257: PUSH
24258: LD_INT 1
24260: NEG
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 1
24268: PUSH
24269: LD_INT 0
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: LD_INT 1
24278: PUSH
24279: LD_INT 1
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 0
24288: PUSH
24289: LD_INT 1
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 1
24298: NEG
24299: PUSH
24300: LD_INT 0
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: LD_INT 1
24309: NEG
24310: PUSH
24311: LD_INT 1
24313: NEG
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 1
24321: PUSH
24322: LD_INT 1
24324: NEG
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 1
24332: NEG
24333: PUSH
24334: LD_INT 1
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24352: LD_ADDR_VAR 0 41
24356: PUSH
24357: LD_INT 0
24359: PUSH
24360: LD_INT 0
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: PUSH
24367: LD_INT 0
24369: PUSH
24370: LD_INT 1
24372: NEG
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: PUSH
24378: LD_INT 1
24380: PUSH
24381: LD_INT 0
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: LD_INT 1
24390: PUSH
24391: LD_INT 1
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: PUSH
24398: LD_INT 0
24400: PUSH
24401: LD_INT 1
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PUSH
24408: LD_INT 1
24410: NEG
24411: PUSH
24412: LD_INT 0
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 1
24421: NEG
24422: PUSH
24423: LD_INT 1
24425: NEG
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PUSH
24431: LD_INT 1
24433: NEG
24434: PUSH
24435: LD_INT 2
24437: NEG
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 1
24445: PUSH
24446: LD_INT 1
24448: NEG
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 2
24456: PUSH
24457: LD_INT 0
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: LD_INT 2
24466: PUSH
24467: LD_INT 1
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 2
24476: PUSH
24477: LD_INT 2
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: PUSH
24484: LD_INT 1
24486: PUSH
24487: LD_INT 2
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: PUSH
24494: LD_INT 1
24496: NEG
24497: PUSH
24498: LD_INT 1
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: LD_INT 2
24507: NEG
24508: PUSH
24509: LD_INT 0
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 2
24518: NEG
24519: PUSH
24520: LD_INT 1
24522: NEG
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 2
24530: NEG
24531: PUSH
24532: LD_INT 2
24534: NEG
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 2
24542: NEG
24543: PUSH
24544: LD_INT 3
24546: NEG
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 2
24554: PUSH
24555: LD_INT 1
24557: NEG
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 3
24565: PUSH
24566: LD_INT 0
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 3
24575: PUSH
24576: LD_INT 1
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 3
24585: PUSH
24586: LD_INT 2
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 3
24595: PUSH
24596: LD_INT 3
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 2
24605: PUSH
24606: LD_INT 3
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PUSH
24613: LD_INT 2
24615: NEG
24616: PUSH
24617: LD_INT 1
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 3
24626: NEG
24627: PUSH
24628: LD_INT 0
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: LD_INT 3
24637: NEG
24638: PUSH
24639: LD_INT 1
24641: NEG
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 3
24649: NEG
24650: PUSH
24651: LD_INT 2
24653: NEG
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PUSH
24659: LD_INT 3
24661: NEG
24662: PUSH
24663: LD_INT 3
24665: NEG
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24702: LD_ADDR_VAR 0 42
24706: PUSH
24707: LD_INT 0
24709: PUSH
24710: LD_INT 0
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: LD_INT 0
24719: PUSH
24720: LD_INT 1
24722: NEG
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 1
24730: PUSH
24731: LD_INT 0
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: PUSH
24738: LD_INT 1
24740: PUSH
24741: LD_INT 1
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: PUSH
24748: LD_INT 0
24750: PUSH
24751: LD_INT 1
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: LD_INT 1
24760: NEG
24761: PUSH
24762: LD_INT 0
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: PUSH
24769: LD_INT 1
24771: NEG
24772: PUSH
24773: LD_INT 1
24775: NEG
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PUSH
24781: LD_INT 1
24783: NEG
24784: PUSH
24785: LD_INT 2
24787: NEG
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: PUSH
24793: LD_INT 0
24795: PUSH
24796: LD_INT 2
24798: NEG
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 1
24806: PUSH
24807: LD_INT 1
24809: NEG
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 2
24817: PUSH
24818: LD_INT 1
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: LD_INT 2
24827: PUSH
24828: LD_INT 2
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PUSH
24835: LD_INT 1
24837: PUSH
24838: LD_INT 2
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: LD_INT 0
24847: PUSH
24848: LD_INT 2
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 1
24857: NEG
24858: PUSH
24859: LD_INT 1
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PUSH
24866: LD_INT 2
24868: NEG
24869: PUSH
24870: LD_INT 1
24872: NEG
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 2
24880: NEG
24881: PUSH
24882: LD_INT 2
24884: NEG
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 2
24892: NEG
24893: PUSH
24894: LD_INT 3
24896: NEG
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 1
24904: NEG
24905: PUSH
24906: LD_INT 3
24908: NEG
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: LD_INT 0
24916: PUSH
24917: LD_INT 3
24919: NEG
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 1
24927: PUSH
24928: LD_INT 2
24930: NEG
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 3
24938: PUSH
24939: LD_INT 2
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: LD_INT 3
24948: PUSH
24949: LD_INT 3
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: LD_INT 2
24958: PUSH
24959: LD_INT 3
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: LD_INT 1
24968: PUSH
24969: LD_INT 3
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 0
24978: PUSH
24979: LD_INT 3
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: LD_INT 1
24988: NEG
24989: PUSH
24990: LD_INT 2
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: LD_INT 3
24999: NEG
25000: PUSH
25001: LD_INT 2
25003: NEG
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 3
25011: NEG
25012: PUSH
25013: LD_INT 3
25015: NEG
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25052: LD_ADDR_VAR 0 43
25056: PUSH
25057: LD_INT 0
25059: PUSH
25060: LD_INT 0
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PUSH
25067: LD_INT 0
25069: PUSH
25070: LD_INT 1
25072: NEG
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: PUSH
25078: LD_INT 1
25080: PUSH
25081: LD_INT 0
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PUSH
25088: LD_INT 1
25090: PUSH
25091: LD_INT 1
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: LD_INT 0
25100: PUSH
25101: LD_INT 1
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: LD_INT 1
25110: NEG
25111: PUSH
25112: LD_INT 0
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 1
25121: NEG
25122: PUSH
25123: LD_INT 1
25125: NEG
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 1
25133: NEG
25134: PUSH
25135: LD_INT 2
25137: NEG
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: LD_INT 0
25145: PUSH
25146: LD_INT 2
25148: NEG
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: PUSH
25154: LD_INT 1
25156: PUSH
25157: LD_INT 1
25159: NEG
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 2
25167: PUSH
25168: LD_INT 0
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PUSH
25175: LD_INT 2
25177: PUSH
25178: LD_INT 1
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 1
25187: PUSH
25188: LD_INT 2
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: PUSH
25195: LD_INT 0
25197: PUSH
25198: LD_INT 2
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 1
25207: NEG
25208: PUSH
25209: LD_INT 1
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 2
25218: NEG
25219: PUSH
25220: LD_INT 0
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 2
25229: NEG
25230: PUSH
25231: LD_INT 1
25233: NEG
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 1
25241: NEG
25242: PUSH
25243: LD_INT 3
25245: NEG
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 0
25253: PUSH
25254: LD_INT 3
25256: NEG
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 1
25264: PUSH
25265: LD_INT 2
25267: NEG
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 2
25275: PUSH
25276: LD_INT 1
25278: NEG
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: LD_INT 3
25286: PUSH
25287: LD_INT 0
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: LD_INT 3
25296: PUSH
25297: LD_INT 1
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 1
25306: PUSH
25307: LD_INT 3
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 0
25316: PUSH
25317: LD_INT 3
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: LD_INT 1
25326: NEG
25327: PUSH
25328: LD_INT 2
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 2
25337: NEG
25338: PUSH
25339: LD_INT 1
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: LD_INT 3
25348: NEG
25349: PUSH
25350: LD_INT 0
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 3
25359: NEG
25360: PUSH
25361: LD_INT 1
25363: NEG
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25400: LD_ADDR_VAR 0 44
25404: PUSH
25405: LD_INT 0
25407: PUSH
25408: LD_INT 0
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: PUSH
25415: LD_INT 0
25417: PUSH
25418: LD_INT 1
25420: NEG
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: PUSH
25426: LD_INT 1
25428: PUSH
25429: LD_INT 0
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 1
25438: PUSH
25439: LD_INT 1
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 0
25448: PUSH
25449: LD_INT 1
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 1
25458: NEG
25459: PUSH
25460: LD_INT 0
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: LD_INT 1
25469: NEG
25470: PUSH
25471: LD_INT 1
25473: NEG
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 1
25481: NEG
25482: PUSH
25483: LD_INT 2
25485: NEG
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 1
25493: PUSH
25494: LD_INT 1
25496: NEG
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PUSH
25502: LD_INT 2
25504: PUSH
25505: LD_INT 0
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 2
25514: PUSH
25515: LD_INT 1
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 2
25524: PUSH
25525: LD_INT 2
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PUSH
25532: LD_INT 1
25534: PUSH
25535: LD_INT 2
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: LD_INT 1
25544: NEG
25545: PUSH
25546: LD_INT 1
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 2
25555: NEG
25556: PUSH
25557: LD_INT 0
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 2
25566: NEG
25567: PUSH
25568: LD_INT 1
25570: NEG
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 2
25578: NEG
25579: PUSH
25580: LD_INT 2
25582: NEG
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 2
25590: NEG
25591: PUSH
25592: LD_INT 3
25594: NEG
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 2
25602: PUSH
25603: LD_INT 1
25605: NEG
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 3
25613: PUSH
25614: LD_INT 0
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 3
25623: PUSH
25624: LD_INT 1
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 3
25633: PUSH
25634: LD_INT 2
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 3
25643: PUSH
25644: LD_INT 3
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: LD_INT 2
25653: PUSH
25654: LD_INT 3
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 2
25663: NEG
25664: PUSH
25665: LD_INT 1
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 3
25674: NEG
25675: PUSH
25676: LD_INT 0
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 3
25685: NEG
25686: PUSH
25687: LD_INT 1
25689: NEG
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 3
25697: NEG
25698: PUSH
25699: LD_INT 2
25701: NEG
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 3
25709: NEG
25710: PUSH
25711: LD_INT 3
25713: NEG
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25750: LD_ADDR_VAR 0 45
25754: PUSH
25755: LD_INT 0
25757: PUSH
25758: LD_INT 0
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PUSH
25765: LD_INT 0
25767: PUSH
25768: LD_INT 1
25770: NEG
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PUSH
25776: LD_INT 1
25778: PUSH
25779: LD_INT 0
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 1
25788: PUSH
25789: LD_INT 1
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 0
25798: PUSH
25799: LD_INT 1
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 1
25808: NEG
25809: PUSH
25810: LD_INT 0
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 1
25819: NEG
25820: PUSH
25821: LD_INT 1
25823: NEG
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 1
25831: NEG
25832: PUSH
25833: LD_INT 2
25835: NEG
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 0
25843: PUSH
25844: LD_INT 2
25846: NEG
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: LD_INT 1
25854: PUSH
25855: LD_INT 1
25857: NEG
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 2
25865: PUSH
25866: LD_INT 1
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: LD_INT 2
25875: PUSH
25876: LD_INT 2
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: LD_INT 1
25885: PUSH
25886: LD_INT 2
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 0
25895: PUSH
25896: LD_INT 2
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 1
25905: NEG
25906: PUSH
25907: LD_INT 1
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 2
25916: NEG
25917: PUSH
25918: LD_INT 1
25920: NEG
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 2
25928: NEG
25929: PUSH
25930: LD_INT 2
25932: NEG
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 2
25940: NEG
25941: PUSH
25942: LD_INT 3
25944: NEG
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 1
25952: NEG
25953: PUSH
25954: LD_INT 3
25956: NEG
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 0
25964: PUSH
25965: LD_INT 3
25967: NEG
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 1
25975: PUSH
25976: LD_INT 2
25978: NEG
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 3
25986: PUSH
25987: LD_INT 2
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: PUSH
25994: LD_INT 3
25996: PUSH
25997: LD_INT 3
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 2
26006: PUSH
26007: LD_INT 3
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 1
26016: PUSH
26017: LD_INT 3
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 0
26026: PUSH
26027: LD_INT 3
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: LD_INT 1
26036: NEG
26037: PUSH
26038: LD_INT 2
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 3
26047: NEG
26048: PUSH
26049: LD_INT 2
26051: NEG
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 3
26059: NEG
26060: PUSH
26061: LD_INT 3
26063: NEG
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26100: LD_ADDR_VAR 0 46
26104: PUSH
26105: LD_INT 0
26107: PUSH
26108: LD_INT 0
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: LD_INT 0
26117: PUSH
26118: LD_INT 1
26120: NEG
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 1
26128: PUSH
26129: LD_INT 0
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 1
26138: PUSH
26139: LD_INT 1
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 0
26148: PUSH
26149: LD_INT 1
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: LD_INT 1
26158: NEG
26159: PUSH
26160: LD_INT 0
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 1
26169: NEG
26170: PUSH
26171: LD_INT 1
26173: NEG
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 1
26181: NEG
26182: PUSH
26183: LD_INT 2
26185: NEG
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 0
26193: PUSH
26194: LD_INT 2
26196: NEG
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: LD_INT 1
26204: PUSH
26205: LD_INT 1
26207: NEG
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 2
26215: PUSH
26216: LD_INT 0
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 2
26225: PUSH
26226: LD_INT 1
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 1
26235: PUSH
26236: LD_INT 2
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 0
26245: PUSH
26246: LD_INT 2
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 1
26255: NEG
26256: PUSH
26257: LD_INT 1
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PUSH
26264: LD_INT 2
26266: NEG
26267: PUSH
26268: LD_INT 0
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: LD_INT 2
26277: NEG
26278: PUSH
26279: LD_INT 1
26281: NEG
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 1
26289: NEG
26290: PUSH
26291: LD_INT 3
26293: NEG
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 0
26301: PUSH
26302: LD_INT 3
26304: NEG
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PUSH
26310: LD_INT 1
26312: PUSH
26313: LD_INT 2
26315: NEG
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: LD_INT 2
26323: PUSH
26324: LD_INT 1
26326: NEG
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 3
26334: PUSH
26335: LD_INT 0
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 3
26344: PUSH
26345: LD_INT 1
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 1
26354: PUSH
26355: LD_INT 3
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 0
26364: PUSH
26365: LD_INT 3
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: LD_INT 1
26374: NEG
26375: PUSH
26376: LD_INT 2
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 2
26385: NEG
26386: PUSH
26387: LD_INT 1
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 3
26396: NEG
26397: PUSH
26398: LD_INT 0
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 3
26407: NEG
26408: PUSH
26409: LD_INT 1
26411: NEG
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26448: LD_ADDR_VAR 0 47
26452: PUSH
26453: LD_INT 0
26455: PUSH
26456: LD_INT 0
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 0
26465: PUSH
26466: LD_INT 1
26468: NEG
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: LD_INT 1
26476: PUSH
26477: LD_INT 0
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: LD_INT 1
26486: PUSH
26487: LD_INT 1
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PUSH
26494: LD_INT 0
26496: PUSH
26497: LD_INT 1
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 1
26506: NEG
26507: PUSH
26508: LD_INT 0
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 1
26517: NEG
26518: PUSH
26519: LD_INT 1
26521: NEG
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 1
26529: NEG
26530: PUSH
26531: LD_INT 2
26533: NEG
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 0
26541: PUSH
26542: LD_INT 2
26544: NEG
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: LD_INT 1
26552: PUSH
26553: LD_INT 1
26555: NEG
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 2
26563: NEG
26564: PUSH
26565: LD_INT 1
26567: NEG
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 2
26575: NEG
26576: PUSH
26577: LD_INT 2
26579: NEG
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26599: LD_ADDR_VAR 0 48
26603: PUSH
26604: LD_INT 0
26606: PUSH
26607: LD_INT 0
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 0
26616: PUSH
26617: LD_INT 1
26619: NEG
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: LD_INT 1
26627: PUSH
26628: LD_INT 0
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 1
26637: PUSH
26638: LD_INT 1
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: LD_INT 0
26647: PUSH
26648: LD_INT 1
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: LD_INT 1
26657: NEG
26658: PUSH
26659: LD_INT 0
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: LD_INT 1
26668: NEG
26669: PUSH
26670: LD_INT 1
26672: NEG
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: LD_INT 1
26680: NEG
26681: PUSH
26682: LD_INT 2
26684: NEG
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: LD_INT 0
26692: PUSH
26693: LD_INT 2
26695: NEG
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PUSH
26701: LD_INT 1
26703: PUSH
26704: LD_INT 1
26706: NEG
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PUSH
26712: LD_INT 2
26714: PUSH
26715: LD_INT 0
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: LD_INT 2
26724: PUSH
26725: LD_INT 1
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26746: LD_ADDR_VAR 0 49
26750: PUSH
26751: LD_INT 0
26753: PUSH
26754: LD_INT 0
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 0
26763: PUSH
26764: LD_INT 1
26766: NEG
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: PUSH
26772: LD_INT 1
26774: PUSH
26775: LD_INT 0
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: LD_INT 1
26784: PUSH
26785: LD_INT 1
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 0
26794: PUSH
26795: LD_INT 1
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 1
26804: NEG
26805: PUSH
26806: LD_INT 0
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 1
26815: NEG
26816: PUSH
26817: LD_INT 1
26819: NEG
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 1
26827: PUSH
26828: LD_INT 1
26830: NEG
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: LD_INT 2
26838: PUSH
26839: LD_INT 0
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 2
26848: PUSH
26849: LD_INT 1
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 2
26858: PUSH
26859: LD_INT 2
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 1
26868: PUSH
26869: LD_INT 2
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26890: LD_ADDR_VAR 0 50
26894: PUSH
26895: LD_INT 0
26897: PUSH
26898: LD_INT 0
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 0
26907: PUSH
26908: LD_INT 1
26910: NEG
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 1
26918: PUSH
26919: LD_INT 0
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 1
26928: PUSH
26929: LD_INT 1
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 0
26938: PUSH
26939: LD_INT 1
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 1
26948: NEG
26949: PUSH
26950: LD_INT 0
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 1
26959: NEG
26960: PUSH
26961: LD_INT 1
26963: NEG
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: LD_INT 2
26971: PUSH
26972: LD_INT 1
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 2
26981: PUSH
26982: LD_INT 2
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 1
26991: PUSH
26992: LD_INT 2
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 0
27001: PUSH
27002: LD_INT 2
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 1
27011: NEG
27012: PUSH
27013: LD_INT 1
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27034: LD_ADDR_VAR 0 51
27038: PUSH
27039: LD_INT 0
27041: PUSH
27042: LD_INT 0
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 0
27051: PUSH
27052: LD_INT 1
27054: NEG
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: LD_INT 1
27062: PUSH
27063: LD_INT 0
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: LD_INT 1
27072: PUSH
27073: LD_INT 1
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PUSH
27080: LD_INT 0
27082: PUSH
27083: LD_INT 1
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PUSH
27090: LD_INT 1
27092: NEG
27093: PUSH
27094: LD_INT 0
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 1
27103: NEG
27104: PUSH
27105: LD_INT 1
27107: NEG
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 1
27115: PUSH
27116: LD_INT 2
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 0
27125: PUSH
27126: LD_INT 2
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 1
27135: NEG
27136: PUSH
27137: LD_INT 1
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 2
27146: NEG
27147: PUSH
27148: LD_INT 0
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 2
27157: NEG
27158: PUSH
27159: LD_INT 1
27161: NEG
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27181: LD_ADDR_VAR 0 52
27185: PUSH
27186: LD_INT 0
27188: PUSH
27189: LD_INT 0
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 0
27198: PUSH
27199: LD_INT 1
27201: NEG
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 1
27209: PUSH
27210: LD_INT 0
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 1
27219: PUSH
27220: LD_INT 1
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 0
27229: PUSH
27230: LD_INT 1
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 1
27239: NEG
27240: PUSH
27241: LD_INT 0
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: LD_INT 1
27250: NEG
27251: PUSH
27252: LD_INT 1
27254: NEG
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PUSH
27260: LD_INT 1
27262: NEG
27263: PUSH
27264: LD_INT 2
27266: NEG
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 1
27274: NEG
27275: PUSH
27276: LD_INT 1
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 2
27285: NEG
27286: PUSH
27287: LD_INT 0
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 2
27296: NEG
27297: PUSH
27298: LD_INT 1
27300: NEG
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 2
27308: NEG
27309: PUSH
27310: LD_INT 2
27312: NEG
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27332: LD_ADDR_VAR 0 53
27336: PUSH
27337: LD_INT 0
27339: PUSH
27340: LD_INT 0
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 0
27349: PUSH
27350: LD_INT 1
27352: NEG
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: LD_INT 1
27360: PUSH
27361: LD_INT 0
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: LD_INT 1
27370: PUSH
27371: LD_INT 1
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 0
27380: PUSH
27381: LD_INT 1
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 1
27390: NEG
27391: PUSH
27392: LD_INT 0
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: LD_INT 1
27401: NEG
27402: PUSH
27403: LD_INT 1
27405: NEG
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 1
27413: NEG
27414: PUSH
27415: LD_INT 2
27417: NEG
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 0
27425: PUSH
27426: LD_INT 2
27428: NEG
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PUSH
27434: LD_INT 1
27436: PUSH
27437: LD_INT 1
27439: NEG
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: LD_INT 2
27447: PUSH
27448: LD_INT 0
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: LD_INT 2
27457: PUSH
27458: LD_INT 1
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 2
27467: PUSH
27468: LD_INT 2
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 1
27477: PUSH
27478: LD_INT 2
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 0
27487: PUSH
27488: LD_INT 2
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 1
27497: NEG
27498: PUSH
27499: LD_INT 1
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 2
27508: NEG
27509: PUSH
27510: LD_INT 0
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 2
27519: NEG
27520: PUSH
27521: LD_INT 1
27523: NEG
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: LD_INT 2
27531: NEG
27532: PUSH
27533: LD_INT 2
27535: NEG
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27562: LD_ADDR_VAR 0 54
27566: PUSH
27567: LD_INT 0
27569: PUSH
27570: LD_INT 0
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 0
27579: PUSH
27580: LD_INT 1
27582: NEG
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: LD_INT 1
27590: PUSH
27591: LD_INT 0
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 1
27600: PUSH
27601: LD_INT 1
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 0
27610: PUSH
27611: LD_INT 1
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 1
27620: NEG
27621: PUSH
27622: LD_INT 0
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 1
27631: NEG
27632: PUSH
27633: LD_INT 1
27635: NEG
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 1
27643: NEG
27644: PUSH
27645: LD_INT 2
27647: NEG
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 0
27655: PUSH
27656: LD_INT 2
27658: NEG
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 1
27666: PUSH
27667: LD_INT 1
27669: NEG
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 2
27677: PUSH
27678: LD_INT 0
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 2
27687: PUSH
27688: LD_INT 1
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 2
27697: PUSH
27698: LD_INT 2
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 1
27707: PUSH
27708: LD_INT 2
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: LD_INT 0
27717: PUSH
27718: LD_INT 2
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 1
27727: NEG
27728: PUSH
27729: LD_INT 1
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 2
27738: NEG
27739: PUSH
27740: LD_INT 0
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 2
27749: NEG
27750: PUSH
27751: LD_INT 1
27753: NEG
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 2
27761: NEG
27762: PUSH
27763: LD_INT 2
27765: NEG
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27792: LD_ADDR_VAR 0 55
27796: PUSH
27797: LD_INT 0
27799: PUSH
27800: LD_INT 0
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 0
27809: PUSH
27810: LD_INT 1
27812: NEG
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 1
27820: PUSH
27821: LD_INT 0
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 1
27830: PUSH
27831: LD_INT 1
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 0
27840: PUSH
27841: LD_INT 1
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 1
27850: NEG
27851: PUSH
27852: LD_INT 0
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 1
27861: NEG
27862: PUSH
27863: LD_INT 1
27865: NEG
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 1
27873: NEG
27874: PUSH
27875: LD_INT 2
27877: NEG
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 0
27885: PUSH
27886: LD_INT 2
27888: NEG
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: LD_INT 1
27896: PUSH
27897: LD_INT 1
27899: NEG
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 2
27907: PUSH
27908: LD_INT 0
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 2
27917: PUSH
27918: LD_INT 1
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 2
27927: PUSH
27928: LD_INT 2
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: LD_INT 1
27937: PUSH
27938: LD_INT 2
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: LD_INT 0
27947: PUSH
27948: LD_INT 2
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 1
27957: NEG
27958: PUSH
27959: LD_INT 1
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 2
27968: NEG
27969: PUSH
27970: LD_INT 0
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 2
27979: NEG
27980: PUSH
27981: LD_INT 1
27983: NEG
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 2
27991: NEG
27992: PUSH
27993: LD_INT 2
27995: NEG
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28022: LD_ADDR_VAR 0 56
28026: PUSH
28027: LD_INT 0
28029: PUSH
28030: LD_INT 0
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 0
28039: PUSH
28040: LD_INT 1
28042: NEG
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 1
28050: PUSH
28051: LD_INT 0
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: LD_INT 1
28060: PUSH
28061: LD_INT 1
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: LD_INT 0
28070: PUSH
28071: LD_INT 1
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: LD_INT 1
28080: NEG
28081: PUSH
28082: LD_INT 0
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 1
28091: NEG
28092: PUSH
28093: LD_INT 1
28095: NEG
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 1
28103: NEG
28104: PUSH
28105: LD_INT 2
28107: NEG
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 0
28115: PUSH
28116: LD_INT 2
28118: NEG
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 1
28126: PUSH
28127: LD_INT 1
28129: NEG
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 2
28137: PUSH
28138: LD_INT 0
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 2
28147: PUSH
28148: LD_INT 1
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 2
28157: PUSH
28158: LD_INT 2
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 1
28167: PUSH
28168: LD_INT 2
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 0
28177: PUSH
28178: LD_INT 2
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: LD_INT 1
28187: NEG
28188: PUSH
28189: LD_INT 1
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 2
28198: NEG
28199: PUSH
28200: LD_INT 0
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 2
28209: NEG
28210: PUSH
28211: LD_INT 1
28213: NEG
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 2
28221: NEG
28222: PUSH
28223: LD_INT 2
28225: NEG
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28252: LD_ADDR_VAR 0 57
28256: PUSH
28257: LD_INT 0
28259: PUSH
28260: LD_INT 0
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 0
28269: PUSH
28270: LD_INT 1
28272: NEG
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: LD_INT 1
28280: PUSH
28281: LD_INT 0
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 1
28290: PUSH
28291: LD_INT 1
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 0
28300: PUSH
28301: LD_INT 1
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 1
28310: NEG
28311: PUSH
28312: LD_INT 0
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: LD_INT 1
28321: NEG
28322: PUSH
28323: LD_INT 1
28325: NEG
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 1
28333: NEG
28334: PUSH
28335: LD_INT 2
28337: NEG
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 0
28345: PUSH
28346: LD_INT 2
28348: NEG
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 1
28356: PUSH
28357: LD_INT 1
28359: NEG
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: LD_INT 2
28367: PUSH
28368: LD_INT 0
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: LD_INT 2
28377: PUSH
28378: LD_INT 1
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 2
28387: PUSH
28388: LD_INT 2
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 1
28397: PUSH
28398: LD_INT 2
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 0
28407: PUSH
28408: LD_INT 2
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: LD_INT 1
28417: NEG
28418: PUSH
28419: LD_INT 1
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 2
28428: NEG
28429: PUSH
28430: LD_INT 0
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 2
28439: NEG
28440: PUSH
28441: LD_INT 1
28443: NEG
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 2
28451: NEG
28452: PUSH
28453: LD_INT 2
28455: NEG
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: LIST
28480: LIST
28481: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28482: LD_ADDR_VAR 0 58
28486: PUSH
28487: LD_INT 0
28489: PUSH
28490: LD_INT 0
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 0
28499: PUSH
28500: LD_INT 1
28502: NEG
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PUSH
28508: LD_INT 1
28510: PUSH
28511: LD_INT 0
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_INT 1
28520: PUSH
28521: LD_INT 1
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: PUSH
28528: LD_INT 0
28530: PUSH
28531: LD_INT 1
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 1
28540: NEG
28541: PUSH
28542: LD_INT 0
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 1
28551: NEG
28552: PUSH
28553: LD_INT 1
28555: NEG
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 1
28563: NEG
28564: PUSH
28565: LD_INT 2
28567: NEG
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 0
28575: PUSH
28576: LD_INT 2
28578: NEG
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: LD_INT 1
28586: PUSH
28587: LD_INT 1
28589: NEG
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 2
28597: PUSH
28598: LD_INT 0
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 2
28607: PUSH
28608: LD_INT 1
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 2
28617: PUSH
28618: LD_INT 2
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: LD_INT 1
28627: PUSH
28628: LD_INT 2
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: LD_INT 0
28637: PUSH
28638: LD_INT 2
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 1
28647: NEG
28648: PUSH
28649: LD_INT 1
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 2
28658: NEG
28659: PUSH
28660: LD_INT 0
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 2
28669: NEG
28670: PUSH
28671: LD_INT 1
28673: NEG
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 2
28681: NEG
28682: PUSH
28683: LD_INT 2
28685: NEG
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28712: LD_ADDR_VAR 0 59
28716: PUSH
28717: LD_INT 0
28719: PUSH
28720: LD_INT 0
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 0
28729: PUSH
28730: LD_INT 1
28732: NEG
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 1
28740: PUSH
28741: LD_INT 0
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 1
28750: PUSH
28751: LD_INT 1
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 0
28760: PUSH
28761: LD_INT 1
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 1
28770: NEG
28771: PUSH
28772: LD_INT 0
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 1
28781: NEG
28782: PUSH
28783: LD_INT 1
28785: NEG
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28800: LD_ADDR_VAR 0 60
28804: PUSH
28805: LD_INT 0
28807: PUSH
28808: LD_INT 0
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 0
28817: PUSH
28818: LD_INT 1
28820: NEG
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PUSH
28826: LD_INT 1
28828: PUSH
28829: LD_INT 0
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 1
28838: PUSH
28839: LD_INT 1
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 0
28848: PUSH
28849: LD_INT 1
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: LD_INT 1
28858: NEG
28859: PUSH
28860: LD_INT 0
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: LD_INT 1
28869: NEG
28870: PUSH
28871: LD_INT 1
28873: NEG
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28888: LD_ADDR_VAR 0 61
28892: PUSH
28893: LD_INT 0
28895: PUSH
28896: LD_INT 0
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 0
28905: PUSH
28906: LD_INT 1
28908: NEG
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PUSH
28914: LD_INT 1
28916: PUSH
28917: LD_INT 0
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 1
28926: PUSH
28927: LD_INT 1
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: LD_INT 0
28936: PUSH
28937: LD_INT 1
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 1
28946: NEG
28947: PUSH
28948: LD_INT 0
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 1
28957: NEG
28958: PUSH
28959: LD_INT 1
28961: NEG
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28976: LD_ADDR_VAR 0 62
28980: PUSH
28981: LD_INT 0
28983: PUSH
28984: LD_INT 0
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 0
28993: PUSH
28994: LD_INT 1
28996: NEG
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 1
29004: PUSH
29005: LD_INT 0
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 1
29014: PUSH
29015: LD_INT 1
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 0
29024: PUSH
29025: LD_INT 1
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: LD_INT 1
29034: NEG
29035: PUSH
29036: LD_INT 0
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: LD_INT 1
29045: NEG
29046: PUSH
29047: LD_INT 1
29049: NEG
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29064: LD_ADDR_VAR 0 63
29068: PUSH
29069: LD_INT 0
29071: PUSH
29072: LD_INT 0
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: LD_INT 0
29081: PUSH
29082: LD_INT 1
29084: NEG
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 1
29092: PUSH
29093: LD_INT 0
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 1
29102: PUSH
29103: LD_INT 1
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 0
29112: PUSH
29113: LD_INT 1
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 1
29122: NEG
29123: PUSH
29124: LD_INT 0
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 1
29133: NEG
29134: PUSH
29135: LD_INT 1
29137: NEG
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29152: LD_ADDR_VAR 0 64
29156: PUSH
29157: LD_INT 0
29159: PUSH
29160: LD_INT 0
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 0
29169: PUSH
29170: LD_INT 1
29172: NEG
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: LD_INT 1
29180: PUSH
29181: LD_INT 0
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 1
29190: PUSH
29191: LD_INT 1
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: LD_INT 0
29200: PUSH
29201: LD_INT 1
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 1
29210: NEG
29211: PUSH
29212: LD_INT 0
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 1
29221: NEG
29222: PUSH
29223: LD_INT 1
29225: NEG
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: ST_TO_ADDR
// end ; 1 :
29240: GO 35137
29242: LD_INT 1
29244: DOUBLE
29245: EQUAL
29246: IFTRUE 29250
29248: GO 31873
29250: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29251: LD_ADDR_VAR 0 11
29255: PUSH
29256: LD_INT 1
29258: NEG
29259: PUSH
29260: LD_INT 3
29262: NEG
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 0
29270: PUSH
29271: LD_INT 3
29273: NEG
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 1
29281: PUSH
29282: LD_INT 2
29284: NEG
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: LIST
29294: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29295: LD_ADDR_VAR 0 12
29299: PUSH
29300: LD_INT 2
29302: PUSH
29303: LD_INT 1
29305: NEG
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 3
29313: PUSH
29314: LD_INT 0
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 3
29323: PUSH
29324: LD_INT 1
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: LIST
29335: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29336: LD_ADDR_VAR 0 13
29340: PUSH
29341: LD_INT 3
29343: PUSH
29344: LD_INT 2
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 3
29353: PUSH
29354: LD_INT 3
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 2
29363: PUSH
29364: LD_INT 3
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: LIST
29375: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29376: LD_ADDR_VAR 0 14
29380: PUSH
29381: LD_INT 1
29383: PUSH
29384: LD_INT 3
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PUSH
29391: LD_INT 0
29393: PUSH
29394: LD_INT 3
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 1
29403: NEG
29404: PUSH
29405: LD_INT 2
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: LIST
29416: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29417: LD_ADDR_VAR 0 15
29421: PUSH
29422: LD_INT 2
29424: NEG
29425: PUSH
29426: LD_INT 1
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 3
29435: NEG
29436: PUSH
29437: LD_INT 0
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: LD_INT 3
29446: NEG
29447: PUSH
29448: LD_INT 1
29450: NEG
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: LIST
29460: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29461: LD_ADDR_VAR 0 16
29465: PUSH
29466: LD_INT 2
29468: NEG
29469: PUSH
29470: LD_INT 3
29472: NEG
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: LD_INT 3
29480: NEG
29481: PUSH
29482: LD_INT 2
29484: NEG
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 3
29492: NEG
29493: PUSH
29494: LD_INT 3
29496: NEG
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: LIST
29506: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29507: LD_ADDR_VAR 0 17
29511: PUSH
29512: LD_INT 1
29514: NEG
29515: PUSH
29516: LD_INT 3
29518: NEG
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 0
29526: PUSH
29527: LD_INT 3
29529: NEG
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 1
29537: PUSH
29538: LD_INT 2
29540: NEG
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: LIST
29550: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29551: LD_ADDR_VAR 0 18
29555: PUSH
29556: LD_INT 2
29558: PUSH
29559: LD_INT 1
29561: NEG
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: LD_INT 3
29569: PUSH
29570: LD_INT 0
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 3
29579: PUSH
29580: LD_INT 1
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: LIST
29591: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29592: LD_ADDR_VAR 0 19
29596: PUSH
29597: LD_INT 3
29599: PUSH
29600: LD_INT 2
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PUSH
29607: LD_INT 3
29609: PUSH
29610: LD_INT 3
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: LD_INT 2
29619: PUSH
29620: LD_INT 3
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: LIST
29631: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29632: LD_ADDR_VAR 0 20
29636: PUSH
29637: LD_INT 1
29639: PUSH
29640: LD_INT 3
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 0
29649: PUSH
29650: LD_INT 3
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 1
29659: NEG
29660: PUSH
29661: LD_INT 2
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: LIST
29672: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29673: LD_ADDR_VAR 0 21
29677: PUSH
29678: LD_INT 2
29680: NEG
29681: PUSH
29682: LD_INT 1
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: LD_INT 3
29691: NEG
29692: PUSH
29693: LD_INT 0
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 3
29702: NEG
29703: PUSH
29704: LD_INT 1
29706: NEG
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: LIST
29716: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29717: LD_ADDR_VAR 0 22
29721: PUSH
29722: LD_INT 2
29724: NEG
29725: PUSH
29726: LD_INT 3
29728: NEG
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 3
29736: NEG
29737: PUSH
29738: LD_INT 2
29740: NEG
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: PUSH
29746: LD_INT 3
29748: NEG
29749: PUSH
29750: LD_INT 3
29752: NEG
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: LIST
29762: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29763: LD_ADDR_VAR 0 23
29767: PUSH
29768: LD_INT 0
29770: PUSH
29771: LD_INT 3
29773: NEG
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 1
29781: NEG
29782: PUSH
29783: LD_INT 4
29785: NEG
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: LD_INT 1
29793: PUSH
29794: LD_INT 3
29796: NEG
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: LIST
29806: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29807: LD_ADDR_VAR 0 24
29811: PUSH
29812: LD_INT 3
29814: PUSH
29815: LD_INT 0
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: LD_INT 3
29824: PUSH
29825: LD_INT 1
29827: NEG
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 4
29835: PUSH
29836: LD_INT 1
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: LIST
29847: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29848: LD_ADDR_VAR 0 25
29852: PUSH
29853: LD_INT 3
29855: PUSH
29856: LD_INT 3
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 4
29865: PUSH
29866: LD_INT 3
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 3
29875: PUSH
29876: LD_INT 4
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: LIST
29887: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29888: LD_ADDR_VAR 0 26
29892: PUSH
29893: LD_INT 0
29895: PUSH
29896: LD_INT 3
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: LD_INT 1
29905: PUSH
29906: LD_INT 4
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 1
29915: NEG
29916: PUSH
29917: LD_INT 3
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: LIST
29928: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29929: LD_ADDR_VAR 0 27
29933: PUSH
29934: LD_INT 3
29936: NEG
29937: PUSH
29938: LD_INT 0
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 3
29947: NEG
29948: PUSH
29949: LD_INT 1
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: LD_INT 4
29958: NEG
29959: PUSH
29960: LD_INT 1
29962: NEG
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: LIST
29972: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29973: LD_ADDR_VAR 0 28
29977: PUSH
29978: LD_INT 3
29980: NEG
29981: PUSH
29982: LD_INT 3
29984: NEG
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 3
29992: NEG
29993: PUSH
29994: LD_INT 4
29996: NEG
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 4
30004: NEG
30005: PUSH
30006: LD_INT 3
30008: NEG
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: LIST
30018: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30019: LD_ADDR_VAR 0 29
30023: PUSH
30024: LD_INT 1
30026: NEG
30027: PUSH
30028: LD_INT 3
30030: NEG
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 0
30038: PUSH
30039: LD_INT 3
30041: NEG
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 1
30049: PUSH
30050: LD_INT 2
30052: NEG
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 1
30060: NEG
30061: PUSH
30062: LD_INT 4
30064: NEG
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 0
30072: PUSH
30073: LD_INT 4
30075: NEG
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 1
30083: PUSH
30084: LD_INT 3
30086: NEG
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 1
30094: NEG
30095: PUSH
30096: LD_INT 5
30098: NEG
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 0
30106: PUSH
30107: LD_INT 5
30109: NEG
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: LD_INT 1
30117: PUSH
30118: LD_INT 4
30120: NEG
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PUSH
30126: LD_INT 1
30128: NEG
30129: PUSH
30130: LD_INT 6
30132: NEG
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 0
30140: PUSH
30141: LD_INT 6
30143: NEG
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 1
30151: PUSH
30152: LD_INT 5
30154: NEG
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30174: LD_ADDR_VAR 0 30
30178: PUSH
30179: LD_INT 2
30181: PUSH
30182: LD_INT 1
30184: NEG
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 3
30192: PUSH
30193: LD_INT 0
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 3
30202: PUSH
30203: LD_INT 1
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 3
30212: PUSH
30213: LD_INT 1
30215: NEG
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 4
30223: PUSH
30224: LD_INT 0
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 4
30233: PUSH
30234: LD_INT 1
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 4
30243: PUSH
30244: LD_INT 1
30246: NEG
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 5
30254: PUSH
30255: LD_INT 0
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 5
30264: PUSH
30265: LD_INT 1
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 5
30274: PUSH
30275: LD_INT 1
30277: NEG
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 6
30285: PUSH
30286: LD_INT 0
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 6
30295: PUSH
30296: LD_INT 1
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30317: LD_ADDR_VAR 0 31
30321: PUSH
30322: LD_INT 3
30324: PUSH
30325: LD_INT 2
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 3
30334: PUSH
30335: LD_INT 3
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: LD_INT 2
30344: PUSH
30345: LD_INT 3
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: LD_INT 4
30354: PUSH
30355: LD_INT 3
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: LD_INT 4
30364: PUSH
30365: LD_INT 4
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 3
30374: PUSH
30375: LD_INT 4
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 5
30384: PUSH
30385: LD_INT 4
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 5
30394: PUSH
30395: LD_INT 5
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 4
30404: PUSH
30405: LD_INT 5
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 6
30414: PUSH
30415: LD_INT 5
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 6
30424: PUSH
30425: LD_INT 6
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PUSH
30432: LD_INT 5
30434: PUSH
30435: LD_INT 6
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30456: LD_ADDR_VAR 0 32
30460: PUSH
30461: LD_INT 1
30463: PUSH
30464: LD_INT 3
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 0
30473: PUSH
30474: LD_INT 3
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 1
30483: NEG
30484: PUSH
30485: LD_INT 2
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 1
30494: PUSH
30495: LD_INT 4
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: PUSH
30502: LD_INT 0
30504: PUSH
30505: LD_INT 4
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 1
30514: NEG
30515: PUSH
30516: LD_INT 3
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 1
30525: PUSH
30526: LD_INT 5
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 0
30535: PUSH
30536: LD_INT 5
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 1
30545: NEG
30546: PUSH
30547: LD_INT 4
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 1
30556: PUSH
30557: LD_INT 6
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: PUSH
30564: LD_INT 0
30566: PUSH
30567: LD_INT 6
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 1
30576: NEG
30577: PUSH
30578: LD_INT 5
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30599: LD_ADDR_VAR 0 33
30603: PUSH
30604: LD_INT 2
30606: NEG
30607: PUSH
30608: LD_INT 1
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 3
30617: NEG
30618: PUSH
30619: LD_INT 0
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 3
30628: NEG
30629: PUSH
30630: LD_INT 1
30632: NEG
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 3
30640: NEG
30641: PUSH
30642: LD_INT 1
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 4
30651: NEG
30652: PUSH
30653: LD_INT 0
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 4
30662: NEG
30663: PUSH
30664: LD_INT 1
30666: NEG
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 4
30674: NEG
30675: PUSH
30676: LD_INT 1
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 5
30685: NEG
30686: PUSH
30687: LD_INT 0
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 5
30696: NEG
30697: PUSH
30698: LD_INT 1
30700: NEG
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: LD_INT 5
30708: NEG
30709: PUSH
30710: LD_INT 1
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 6
30719: NEG
30720: PUSH
30721: LD_INT 0
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 6
30730: NEG
30731: PUSH
30732: LD_INT 1
30734: NEG
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30754: LD_ADDR_VAR 0 34
30758: PUSH
30759: LD_INT 2
30761: NEG
30762: PUSH
30763: LD_INT 3
30765: NEG
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 3
30773: NEG
30774: PUSH
30775: LD_INT 2
30777: NEG
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 3
30785: NEG
30786: PUSH
30787: LD_INT 3
30789: NEG
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 3
30797: NEG
30798: PUSH
30799: LD_INT 4
30801: NEG
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 4
30809: NEG
30810: PUSH
30811: LD_INT 3
30813: NEG
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 4
30821: NEG
30822: PUSH
30823: LD_INT 4
30825: NEG
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 4
30833: NEG
30834: PUSH
30835: LD_INT 5
30837: NEG
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 5
30845: NEG
30846: PUSH
30847: LD_INT 4
30849: NEG
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 5
30857: NEG
30858: PUSH
30859: LD_INT 5
30861: NEG
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 5
30869: NEG
30870: PUSH
30871: LD_INT 6
30873: NEG
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 6
30881: NEG
30882: PUSH
30883: LD_INT 5
30885: NEG
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: LD_INT 6
30893: NEG
30894: PUSH
30895: LD_INT 6
30897: NEG
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30917: LD_ADDR_VAR 0 41
30921: PUSH
30922: LD_INT 0
30924: PUSH
30925: LD_INT 2
30927: NEG
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 1
30935: NEG
30936: PUSH
30937: LD_INT 3
30939: NEG
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 1
30947: PUSH
30948: LD_INT 2
30950: NEG
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: LIST
30960: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30961: LD_ADDR_VAR 0 42
30965: PUSH
30966: LD_INT 2
30968: PUSH
30969: LD_INT 0
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 2
30978: PUSH
30979: LD_INT 1
30981: NEG
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 3
30989: PUSH
30990: LD_INT 1
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: LIST
31001: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31002: LD_ADDR_VAR 0 43
31006: PUSH
31007: LD_INT 2
31009: PUSH
31010: LD_INT 2
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 3
31019: PUSH
31020: LD_INT 2
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 2
31029: PUSH
31030: LD_INT 3
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: LIST
31041: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31042: LD_ADDR_VAR 0 44
31046: PUSH
31047: LD_INT 0
31049: PUSH
31050: LD_INT 2
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: LD_INT 1
31059: PUSH
31060: LD_INT 3
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 1
31069: NEG
31070: PUSH
31071: LD_INT 2
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: LIST
31082: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31083: LD_ADDR_VAR 0 45
31087: PUSH
31088: LD_INT 2
31090: NEG
31091: PUSH
31092: LD_INT 0
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 2
31101: NEG
31102: PUSH
31103: LD_INT 1
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 3
31112: NEG
31113: PUSH
31114: LD_INT 1
31116: NEG
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: LIST
31126: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31127: LD_ADDR_VAR 0 46
31131: PUSH
31132: LD_INT 2
31134: NEG
31135: PUSH
31136: LD_INT 2
31138: NEG
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 2
31146: NEG
31147: PUSH
31148: LD_INT 3
31150: NEG
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 3
31158: NEG
31159: PUSH
31160: LD_INT 2
31162: NEG
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: LIST
31172: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31173: LD_ADDR_VAR 0 47
31177: PUSH
31178: LD_INT 2
31180: NEG
31181: PUSH
31182: LD_INT 3
31184: NEG
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 1
31192: NEG
31193: PUSH
31194: LD_INT 3
31196: NEG
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31206: LD_ADDR_VAR 0 48
31210: PUSH
31211: LD_INT 1
31213: PUSH
31214: LD_INT 2
31216: NEG
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: LD_INT 2
31224: PUSH
31225: LD_INT 1
31227: NEG
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31237: LD_ADDR_VAR 0 49
31241: PUSH
31242: LD_INT 3
31244: PUSH
31245: LD_INT 1
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 3
31254: PUSH
31255: LD_INT 2
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31266: LD_ADDR_VAR 0 50
31270: PUSH
31271: LD_INT 2
31273: PUSH
31274: LD_INT 3
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 1
31283: PUSH
31284: LD_INT 3
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31295: LD_ADDR_VAR 0 51
31299: PUSH
31300: LD_INT 1
31302: NEG
31303: PUSH
31304: LD_INT 2
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 2
31313: NEG
31314: PUSH
31315: LD_INT 1
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31326: LD_ADDR_VAR 0 52
31330: PUSH
31331: LD_INT 3
31333: NEG
31334: PUSH
31335: LD_INT 1
31337: NEG
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 3
31345: NEG
31346: PUSH
31347: LD_INT 2
31349: NEG
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31359: LD_ADDR_VAR 0 53
31363: PUSH
31364: LD_INT 1
31366: NEG
31367: PUSH
31368: LD_INT 3
31370: NEG
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: LD_INT 0
31378: PUSH
31379: LD_INT 3
31381: NEG
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 1
31389: PUSH
31390: LD_INT 2
31392: NEG
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: LIST
31402: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31403: LD_ADDR_VAR 0 54
31407: PUSH
31408: LD_INT 2
31410: PUSH
31411: LD_INT 1
31413: NEG
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 3
31421: PUSH
31422: LD_INT 0
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 3
31431: PUSH
31432: LD_INT 1
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: LIST
31443: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31444: LD_ADDR_VAR 0 55
31448: PUSH
31449: LD_INT 3
31451: PUSH
31452: LD_INT 2
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: LD_INT 3
31461: PUSH
31462: LD_INT 3
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 2
31471: PUSH
31472: LD_INT 3
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: LIST
31483: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31484: LD_ADDR_VAR 0 56
31488: PUSH
31489: LD_INT 1
31491: PUSH
31492: LD_INT 3
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PUSH
31499: LD_INT 0
31501: PUSH
31502: LD_INT 3
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 1
31511: NEG
31512: PUSH
31513: LD_INT 2
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: LIST
31524: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31525: LD_ADDR_VAR 0 57
31529: PUSH
31530: LD_INT 2
31532: NEG
31533: PUSH
31534: LD_INT 1
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 3
31543: NEG
31544: PUSH
31545: LD_INT 0
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 3
31554: NEG
31555: PUSH
31556: LD_INT 1
31558: NEG
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: LIST
31568: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31569: LD_ADDR_VAR 0 58
31573: PUSH
31574: LD_INT 2
31576: NEG
31577: PUSH
31578: LD_INT 3
31580: NEG
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 3
31588: NEG
31589: PUSH
31590: LD_INT 2
31592: NEG
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 3
31600: NEG
31601: PUSH
31602: LD_INT 3
31604: NEG
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: LIST
31614: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31615: LD_ADDR_VAR 0 59
31619: PUSH
31620: LD_INT 1
31622: NEG
31623: PUSH
31624: LD_INT 2
31626: NEG
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 0
31634: PUSH
31635: LD_INT 2
31637: NEG
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 1
31645: PUSH
31646: LD_INT 1
31648: NEG
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: LIST
31658: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31659: LD_ADDR_VAR 0 60
31663: PUSH
31664: LD_INT 1
31666: PUSH
31667: LD_INT 1
31669: NEG
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 2
31677: PUSH
31678: LD_INT 0
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 2
31687: PUSH
31688: LD_INT 1
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: LIST
31699: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31700: LD_ADDR_VAR 0 61
31704: PUSH
31705: LD_INT 2
31707: PUSH
31708: LD_INT 1
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 2
31717: PUSH
31718: LD_INT 2
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 1
31727: PUSH
31728: LD_INT 2
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: LIST
31739: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31740: LD_ADDR_VAR 0 62
31744: PUSH
31745: LD_INT 1
31747: PUSH
31748: LD_INT 2
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 0
31757: PUSH
31758: LD_INT 2
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 1
31767: NEG
31768: PUSH
31769: LD_INT 1
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: LIST
31780: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31781: LD_ADDR_VAR 0 63
31785: PUSH
31786: LD_INT 1
31788: NEG
31789: PUSH
31790: LD_INT 1
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 2
31799: NEG
31800: PUSH
31801: LD_INT 0
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 2
31810: NEG
31811: PUSH
31812: LD_INT 1
31814: NEG
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: LIST
31824: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31825: LD_ADDR_VAR 0 64
31829: PUSH
31830: LD_INT 1
31832: NEG
31833: PUSH
31834: LD_INT 2
31836: NEG
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 2
31844: NEG
31845: PUSH
31846: LD_INT 1
31848: NEG
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 2
31856: NEG
31857: PUSH
31858: LD_INT 2
31860: NEG
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: LIST
31870: ST_TO_ADDR
// end ; 2 :
31871: GO 35137
31873: LD_INT 2
31875: DOUBLE
31876: EQUAL
31877: IFTRUE 31881
31879: GO 35136
31881: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31882: LD_ADDR_VAR 0 29
31886: PUSH
31887: LD_INT 4
31889: PUSH
31890: LD_INT 0
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 4
31899: PUSH
31900: LD_INT 1
31902: NEG
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 5
31910: PUSH
31911: LD_INT 0
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 5
31920: PUSH
31921: LD_INT 1
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 4
31930: PUSH
31931: LD_INT 1
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 3
31940: PUSH
31941: LD_INT 0
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 3
31950: PUSH
31951: LD_INT 1
31953: NEG
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 3
31961: PUSH
31962: LD_INT 2
31964: NEG
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 5
31972: PUSH
31973: LD_INT 2
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 3
31982: PUSH
31983: LD_INT 3
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 3
31992: PUSH
31993: LD_INT 2
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 4
32002: PUSH
32003: LD_INT 3
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 4
32012: PUSH
32013: LD_INT 4
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 3
32022: PUSH
32023: LD_INT 4
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 2
32032: PUSH
32033: LD_INT 3
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 2
32042: PUSH
32043: LD_INT 2
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 4
32052: PUSH
32053: LD_INT 2
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 2
32062: PUSH
32063: LD_INT 4
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 0
32072: PUSH
32073: LD_INT 4
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 0
32082: PUSH
32083: LD_INT 3
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 1
32092: PUSH
32093: LD_INT 4
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: LD_INT 1
32102: PUSH
32103: LD_INT 5
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 0
32112: PUSH
32113: LD_INT 5
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 1
32122: NEG
32123: PUSH
32124: LD_INT 4
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 1
32133: NEG
32134: PUSH
32135: LD_INT 3
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 2
32144: PUSH
32145: LD_INT 5
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 2
32154: NEG
32155: PUSH
32156: LD_INT 3
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 3
32165: NEG
32166: PUSH
32167: LD_INT 0
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 3
32176: NEG
32177: PUSH
32178: LD_INT 1
32180: NEG
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 2
32188: NEG
32189: PUSH
32190: LD_INT 0
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 2
32199: NEG
32200: PUSH
32201: LD_INT 1
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 3
32210: NEG
32211: PUSH
32212: LD_INT 1
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 4
32221: NEG
32222: PUSH
32223: LD_INT 0
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 4
32232: NEG
32233: PUSH
32234: LD_INT 1
32236: NEG
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 4
32244: NEG
32245: PUSH
32246: LD_INT 2
32248: NEG
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 2
32256: NEG
32257: PUSH
32258: LD_INT 2
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 4
32267: NEG
32268: PUSH
32269: LD_INT 4
32271: NEG
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 4
32279: NEG
32280: PUSH
32281: LD_INT 5
32283: NEG
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 3
32291: NEG
32292: PUSH
32293: LD_INT 4
32295: NEG
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 3
32303: NEG
32304: PUSH
32305: LD_INT 3
32307: NEG
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 4
32315: NEG
32316: PUSH
32317: LD_INT 3
32319: NEG
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 5
32327: NEG
32328: PUSH
32329: LD_INT 4
32331: NEG
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 5
32339: NEG
32340: PUSH
32341: LD_INT 5
32343: NEG
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 3
32351: NEG
32352: PUSH
32353: LD_INT 5
32355: NEG
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 5
32363: NEG
32364: PUSH
32365: LD_INT 3
32367: NEG
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32420: LD_ADDR_VAR 0 30
32424: PUSH
32425: LD_INT 4
32427: PUSH
32428: LD_INT 4
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 4
32437: PUSH
32438: LD_INT 3
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 5
32447: PUSH
32448: LD_INT 4
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 5
32457: PUSH
32458: LD_INT 5
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 4
32467: PUSH
32468: LD_INT 5
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 3
32477: PUSH
32478: LD_INT 4
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 3
32487: PUSH
32488: LD_INT 3
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 5
32497: PUSH
32498: LD_INT 3
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 3
32507: PUSH
32508: LD_INT 5
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 0
32517: PUSH
32518: LD_INT 3
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 0
32527: PUSH
32528: LD_INT 2
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 1
32537: PUSH
32538: LD_INT 3
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 1
32547: PUSH
32548: LD_INT 4
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 0
32557: PUSH
32558: LD_INT 4
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 1
32567: NEG
32568: PUSH
32569: LD_INT 3
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 1
32578: NEG
32579: PUSH
32580: LD_INT 2
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 2
32589: PUSH
32590: LD_INT 4
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 2
32599: NEG
32600: PUSH
32601: LD_INT 2
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 4
32610: NEG
32611: PUSH
32612: LD_INT 0
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: LD_INT 4
32621: NEG
32622: PUSH
32623: LD_INT 1
32625: NEG
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 3
32633: NEG
32634: PUSH
32635: LD_INT 0
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 3
32644: NEG
32645: PUSH
32646: LD_INT 1
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: LD_INT 4
32655: NEG
32656: PUSH
32657: LD_INT 1
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 5
32666: NEG
32667: PUSH
32668: LD_INT 0
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: LD_INT 5
32677: NEG
32678: PUSH
32679: LD_INT 1
32681: NEG
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: PUSH
32687: LD_INT 5
32689: NEG
32690: PUSH
32691: LD_INT 2
32693: NEG
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 3
32701: NEG
32702: PUSH
32703: LD_INT 2
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 3
32712: NEG
32713: PUSH
32714: LD_INT 3
32716: NEG
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 3
32724: NEG
32725: PUSH
32726: LD_INT 4
32728: NEG
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 2
32736: NEG
32737: PUSH
32738: LD_INT 3
32740: NEG
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 2
32748: NEG
32749: PUSH
32750: LD_INT 2
32752: NEG
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 3
32760: NEG
32761: PUSH
32762: LD_INT 2
32764: NEG
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 4
32772: NEG
32773: PUSH
32774: LD_INT 3
32776: NEG
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 4
32784: NEG
32785: PUSH
32786: LD_INT 4
32788: NEG
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 2
32796: NEG
32797: PUSH
32798: LD_INT 4
32800: NEG
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 4
32808: NEG
32809: PUSH
32810: LD_INT 2
32812: NEG
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 0
32820: PUSH
32821: LD_INT 4
32823: NEG
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 0
32831: PUSH
32832: LD_INT 5
32834: NEG
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 1
32842: PUSH
32843: LD_INT 4
32845: NEG
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 1
32853: PUSH
32854: LD_INT 3
32856: NEG
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 0
32864: PUSH
32865: LD_INT 3
32867: NEG
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: LD_INT 1
32875: NEG
32876: PUSH
32877: LD_INT 4
32879: NEG
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 1
32887: NEG
32888: PUSH
32889: LD_INT 5
32891: NEG
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 2
32899: PUSH
32900: LD_INT 3
32902: NEG
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 2
32910: NEG
32911: PUSH
32912: LD_INT 5
32914: NEG
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32967: LD_ADDR_VAR 0 31
32971: PUSH
32972: LD_INT 0
32974: PUSH
32975: LD_INT 4
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 0
32984: PUSH
32985: LD_INT 3
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 1
32994: PUSH
32995: LD_INT 4
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 1
33004: PUSH
33005: LD_INT 5
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 0
33014: PUSH
33015: LD_INT 5
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 1
33024: NEG
33025: PUSH
33026: LD_INT 4
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 1
33035: NEG
33036: PUSH
33037: LD_INT 3
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 2
33046: PUSH
33047: LD_INT 5
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 2
33056: NEG
33057: PUSH
33058: LD_INT 3
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 3
33067: NEG
33068: PUSH
33069: LD_INT 0
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 3
33078: NEG
33079: PUSH
33080: LD_INT 1
33082: NEG
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 2
33090: NEG
33091: PUSH
33092: LD_INT 0
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 2
33101: NEG
33102: PUSH
33103: LD_INT 1
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 3
33112: NEG
33113: PUSH
33114: LD_INT 1
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 4
33123: NEG
33124: PUSH
33125: LD_INT 0
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 4
33134: NEG
33135: PUSH
33136: LD_INT 1
33138: NEG
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 4
33146: NEG
33147: PUSH
33148: LD_INT 2
33150: NEG
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 2
33158: NEG
33159: PUSH
33160: LD_INT 2
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 4
33169: NEG
33170: PUSH
33171: LD_INT 4
33173: NEG
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 4
33181: NEG
33182: PUSH
33183: LD_INT 5
33185: NEG
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 3
33193: NEG
33194: PUSH
33195: LD_INT 4
33197: NEG
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 3
33205: NEG
33206: PUSH
33207: LD_INT 3
33209: NEG
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 4
33217: NEG
33218: PUSH
33219: LD_INT 3
33221: NEG
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 5
33229: NEG
33230: PUSH
33231: LD_INT 4
33233: NEG
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 5
33241: NEG
33242: PUSH
33243: LD_INT 5
33245: NEG
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 3
33253: NEG
33254: PUSH
33255: LD_INT 5
33257: NEG
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 5
33265: NEG
33266: PUSH
33267: LD_INT 3
33269: NEG
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 0
33277: PUSH
33278: LD_INT 3
33280: NEG
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 0
33288: PUSH
33289: LD_INT 4
33291: NEG
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 1
33299: PUSH
33300: LD_INT 3
33302: NEG
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 1
33310: PUSH
33311: LD_INT 2
33313: NEG
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 0
33321: PUSH
33322: LD_INT 2
33324: NEG
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 1
33332: NEG
33333: PUSH
33334: LD_INT 3
33336: NEG
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 1
33344: NEG
33345: PUSH
33346: LD_INT 4
33348: NEG
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 2
33356: PUSH
33357: LD_INT 2
33359: NEG
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 2
33367: NEG
33368: PUSH
33369: LD_INT 4
33371: NEG
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 4
33379: PUSH
33380: LD_INT 0
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 4
33389: PUSH
33390: LD_INT 1
33392: NEG
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 5
33400: PUSH
33401: LD_INT 0
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 5
33410: PUSH
33411: LD_INT 1
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 4
33420: PUSH
33421: LD_INT 1
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 3
33430: PUSH
33431: LD_INT 0
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 3
33440: PUSH
33441: LD_INT 1
33443: NEG
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 3
33451: PUSH
33452: LD_INT 2
33454: NEG
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 5
33462: PUSH
33463: LD_INT 2
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33517: LD_ADDR_VAR 0 32
33521: PUSH
33522: LD_INT 4
33524: NEG
33525: PUSH
33526: LD_INT 0
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 4
33535: NEG
33536: PUSH
33537: LD_INT 1
33539: NEG
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 3
33547: NEG
33548: PUSH
33549: LD_INT 0
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 3
33558: NEG
33559: PUSH
33560: LD_INT 1
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: LD_INT 4
33569: NEG
33570: PUSH
33571: LD_INT 1
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 5
33580: NEG
33581: PUSH
33582: LD_INT 0
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 5
33591: NEG
33592: PUSH
33593: LD_INT 1
33595: NEG
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 5
33603: NEG
33604: PUSH
33605: LD_INT 2
33607: NEG
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 3
33615: NEG
33616: PUSH
33617: LD_INT 2
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 3
33626: NEG
33627: PUSH
33628: LD_INT 3
33630: NEG
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 3
33638: NEG
33639: PUSH
33640: LD_INT 4
33642: NEG
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 2
33650: NEG
33651: PUSH
33652: LD_INT 3
33654: NEG
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 2
33662: NEG
33663: PUSH
33664: LD_INT 2
33666: NEG
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 3
33674: NEG
33675: PUSH
33676: LD_INT 2
33678: NEG
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: LD_INT 4
33686: NEG
33687: PUSH
33688: LD_INT 3
33690: NEG
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 4
33698: NEG
33699: PUSH
33700: LD_INT 4
33702: NEG
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: LD_INT 2
33710: NEG
33711: PUSH
33712: LD_INT 4
33714: NEG
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 4
33722: NEG
33723: PUSH
33724: LD_INT 2
33726: NEG
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 0
33734: PUSH
33735: LD_INT 4
33737: NEG
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 0
33745: PUSH
33746: LD_INT 5
33748: NEG
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 1
33756: PUSH
33757: LD_INT 4
33759: NEG
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 1
33767: PUSH
33768: LD_INT 3
33770: NEG
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 0
33778: PUSH
33779: LD_INT 3
33781: NEG
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 1
33789: NEG
33790: PUSH
33791: LD_INT 4
33793: NEG
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 1
33801: NEG
33802: PUSH
33803: LD_INT 5
33805: NEG
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 2
33813: PUSH
33814: LD_INT 3
33816: NEG
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 2
33824: NEG
33825: PUSH
33826: LD_INT 5
33828: NEG
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 3
33836: PUSH
33837: LD_INT 0
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 3
33846: PUSH
33847: LD_INT 1
33849: NEG
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 4
33857: PUSH
33858: LD_INT 0
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 4
33867: PUSH
33868: LD_INT 1
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 3
33877: PUSH
33878: LD_INT 1
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 2
33887: PUSH
33888: LD_INT 0
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: LD_INT 2
33897: PUSH
33898: LD_INT 1
33900: NEG
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: LD_INT 2
33908: PUSH
33909: LD_INT 2
33911: NEG
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 4
33919: PUSH
33920: LD_INT 2
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 4
33929: PUSH
33930: LD_INT 4
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 4
33939: PUSH
33940: LD_INT 3
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 5
33949: PUSH
33950: LD_INT 4
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: PUSH
33957: LD_INT 5
33959: PUSH
33960: LD_INT 5
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 4
33969: PUSH
33970: LD_INT 5
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 3
33979: PUSH
33980: LD_INT 4
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: LD_INT 3
33989: PUSH
33990: LD_INT 3
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: LD_INT 5
33999: PUSH
34000: LD_INT 3
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 3
34009: PUSH
34010: LD_INT 5
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34064: LD_ADDR_VAR 0 33
34068: PUSH
34069: LD_INT 4
34071: NEG
34072: PUSH
34073: LD_INT 4
34075: NEG
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 4
34083: NEG
34084: PUSH
34085: LD_INT 5
34087: NEG
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 3
34095: NEG
34096: PUSH
34097: LD_INT 4
34099: NEG
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 3
34107: NEG
34108: PUSH
34109: LD_INT 3
34111: NEG
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 4
34119: NEG
34120: PUSH
34121: LD_INT 3
34123: NEG
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 5
34131: NEG
34132: PUSH
34133: LD_INT 4
34135: NEG
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 5
34143: NEG
34144: PUSH
34145: LD_INT 5
34147: NEG
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: LD_INT 3
34155: NEG
34156: PUSH
34157: LD_INT 5
34159: NEG
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 5
34167: NEG
34168: PUSH
34169: LD_INT 3
34171: NEG
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 0
34179: PUSH
34180: LD_INT 3
34182: NEG
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: LD_INT 0
34190: PUSH
34191: LD_INT 4
34193: NEG
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 1
34201: PUSH
34202: LD_INT 3
34204: NEG
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 1
34212: PUSH
34213: LD_INT 2
34215: NEG
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 0
34223: PUSH
34224: LD_INT 2
34226: NEG
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 1
34234: NEG
34235: PUSH
34236: LD_INT 3
34238: NEG
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 1
34246: NEG
34247: PUSH
34248: LD_INT 4
34250: NEG
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 2
34258: PUSH
34259: LD_INT 2
34261: NEG
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 2
34269: NEG
34270: PUSH
34271: LD_INT 4
34273: NEG
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: LD_INT 4
34281: PUSH
34282: LD_INT 0
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 4
34291: PUSH
34292: LD_INT 1
34294: NEG
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 5
34302: PUSH
34303: LD_INT 0
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 5
34312: PUSH
34313: LD_INT 1
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 4
34322: PUSH
34323: LD_INT 1
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 3
34332: PUSH
34333: LD_INT 0
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 3
34342: PUSH
34343: LD_INT 1
34345: NEG
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: LD_INT 3
34353: PUSH
34354: LD_INT 2
34356: NEG
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 5
34364: PUSH
34365: LD_INT 2
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 3
34374: PUSH
34375: LD_INT 3
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 3
34384: PUSH
34385: LD_INT 2
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 4
34394: PUSH
34395: LD_INT 3
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 4
34404: PUSH
34405: LD_INT 4
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 3
34414: PUSH
34415: LD_INT 4
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 2
34424: PUSH
34425: LD_INT 3
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: LD_INT 2
34434: PUSH
34435: LD_INT 2
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 4
34444: PUSH
34445: LD_INT 2
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 2
34454: PUSH
34455: LD_INT 4
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 0
34464: PUSH
34465: LD_INT 4
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_INT 0
34474: PUSH
34475: LD_INT 3
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 1
34484: PUSH
34485: LD_INT 4
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: PUSH
34492: LD_INT 1
34494: PUSH
34495: LD_INT 5
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 0
34504: PUSH
34505: LD_INT 5
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 1
34514: NEG
34515: PUSH
34516: LD_INT 4
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: LD_INT 1
34525: NEG
34526: PUSH
34527: LD_INT 3
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 2
34536: PUSH
34537: LD_INT 5
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 2
34546: NEG
34547: PUSH
34548: LD_INT 3
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34602: LD_ADDR_VAR 0 34
34606: PUSH
34607: LD_INT 0
34609: PUSH
34610: LD_INT 4
34612: NEG
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 0
34620: PUSH
34621: LD_INT 5
34623: NEG
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 1
34631: PUSH
34632: LD_INT 4
34634: NEG
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 1
34642: PUSH
34643: LD_INT 3
34645: NEG
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 0
34653: PUSH
34654: LD_INT 3
34656: NEG
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 1
34664: NEG
34665: PUSH
34666: LD_INT 4
34668: NEG
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 1
34676: NEG
34677: PUSH
34678: LD_INT 5
34680: NEG
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 2
34688: PUSH
34689: LD_INT 3
34691: NEG
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 2
34699: NEG
34700: PUSH
34701: LD_INT 5
34703: NEG
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: LD_INT 3
34711: PUSH
34712: LD_INT 0
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: LD_INT 3
34721: PUSH
34722: LD_INT 1
34724: NEG
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 4
34732: PUSH
34733: LD_INT 0
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 4
34742: PUSH
34743: LD_INT 1
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 3
34752: PUSH
34753: LD_INT 1
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 2
34762: PUSH
34763: LD_INT 0
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: LD_INT 2
34772: PUSH
34773: LD_INT 1
34775: NEG
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 2
34783: PUSH
34784: LD_INT 2
34786: NEG
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 4
34794: PUSH
34795: LD_INT 2
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 4
34804: PUSH
34805: LD_INT 4
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 4
34814: PUSH
34815: LD_INT 3
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 5
34824: PUSH
34825: LD_INT 4
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: LD_INT 5
34834: PUSH
34835: LD_INT 5
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 4
34844: PUSH
34845: LD_INT 5
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 3
34854: PUSH
34855: LD_INT 4
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 3
34864: PUSH
34865: LD_INT 3
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 5
34874: PUSH
34875: LD_INT 3
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 3
34884: PUSH
34885: LD_INT 5
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 0
34894: PUSH
34895: LD_INT 3
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 0
34904: PUSH
34905: LD_INT 2
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 1
34914: PUSH
34915: LD_INT 3
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_INT 1
34924: PUSH
34925: LD_INT 4
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 0
34934: PUSH
34935: LD_INT 4
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 1
34944: NEG
34945: PUSH
34946: LD_INT 3
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 1
34955: NEG
34956: PUSH
34957: LD_INT 2
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 2
34966: PUSH
34967: LD_INT 4
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 2
34976: NEG
34977: PUSH
34978: LD_INT 2
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 4
34987: NEG
34988: PUSH
34989: LD_INT 0
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: LD_INT 4
34998: NEG
34999: PUSH
35000: LD_INT 1
35002: NEG
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 3
35010: NEG
35011: PUSH
35012: LD_INT 0
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 3
35021: NEG
35022: PUSH
35023: LD_INT 1
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 4
35032: NEG
35033: PUSH
35034: LD_INT 1
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 5
35043: NEG
35044: PUSH
35045: LD_INT 0
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 5
35054: NEG
35055: PUSH
35056: LD_INT 1
35058: NEG
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 5
35066: NEG
35067: PUSH
35068: LD_INT 2
35070: NEG
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PUSH
35076: LD_INT 3
35078: NEG
35079: PUSH
35080: LD_INT 2
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: ST_TO_ADDR
// end ; end ;
35134: GO 35137
35136: POP
// case btype of b_depot , b_warehouse :
35137: LD_VAR 0 1
35141: PUSH
35142: LD_INT 0
35144: DOUBLE
35145: EQUAL
35146: IFTRUE 35156
35148: LD_INT 1
35150: DOUBLE
35151: EQUAL
35152: IFTRUE 35156
35154: GO 35357
35156: POP
// case nation of nation_american :
35157: LD_VAR 0 5
35161: PUSH
35162: LD_INT 1
35164: DOUBLE
35165: EQUAL
35166: IFTRUE 35170
35168: GO 35226
35170: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35171: LD_ADDR_VAR 0 9
35175: PUSH
35176: LD_VAR 0 11
35180: PUSH
35181: LD_VAR 0 12
35185: PUSH
35186: LD_VAR 0 13
35190: PUSH
35191: LD_VAR 0 14
35195: PUSH
35196: LD_VAR 0 15
35200: PUSH
35201: LD_VAR 0 16
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: PUSH
35214: LD_VAR 0 4
35218: PUSH
35219: LD_INT 1
35221: PLUS
35222: ARRAY
35223: ST_TO_ADDR
35224: GO 35355
35226: LD_INT 2
35228: DOUBLE
35229: EQUAL
35230: IFTRUE 35234
35232: GO 35290
35234: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35235: LD_ADDR_VAR 0 9
35239: PUSH
35240: LD_VAR 0 17
35244: PUSH
35245: LD_VAR 0 18
35249: PUSH
35250: LD_VAR 0 19
35254: PUSH
35255: LD_VAR 0 20
35259: PUSH
35260: LD_VAR 0 21
35264: PUSH
35265: LD_VAR 0 22
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: PUSH
35278: LD_VAR 0 4
35282: PUSH
35283: LD_INT 1
35285: PLUS
35286: ARRAY
35287: ST_TO_ADDR
35288: GO 35355
35290: LD_INT 3
35292: DOUBLE
35293: EQUAL
35294: IFTRUE 35298
35296: GO 35354
35298: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35299: LD_ADDR_VAR 0 9
35303: PUSH
35304: LD_VAR 0 23
35308: PUSH
35309: LD_VAR 0 24
35313: PUSH
35314: LD_VAR 0 25
35318: PUSH
35319: LD_VAR 0 26
35323: PUSH
35324: LD_VAR 0 27
35328: PUSH
35329: LD_VAR 0 28
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: PUSH
35342: LD_VAR 0 4
35346: PUSH
35347: LD_INT 1
35349: PLUS
35350: ARRAY
35351: ST_TO_ADDR
35352: GO 35355
35354: POP
35355: GO 35910
35357: LD_INT 2
35359: DOUBLE
35360: EQUAL
35361: IFTRUE 35371
35363: LD_INT 3
35365: DOUBLE
35366: EQUAL
35367: IFTRUE 35371
35369: GO 35427
35371: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35372: LD_ADDR_VAR 0 9
35376: PUSH
35377: LD_VAR 0 29
35381: PUSH
35382: LD_VAR 0 30
35386: PUSH
35387: LD_VAR 0 31
35391: PUSH
35392: LD_VAR 0 32
35396: PUSH
35397: LD_VAR 0 33
35401: PUSH
35402: LD_VAR 0 34
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: PUSH
35415: LD_VAR 0 4
35419: PUSH
35420: LD_INT 1
35422: PLUS
35423: ARRAY
35424: ST_TO_ADDR
35425: GO 35910
35427: LD_INT 16
35429: DOUBLE
35430: EQUAL
35431: IFTRUE 35489
35433: LD_INT 17
35435: DOUBLE
35436: EQUAL
35437: IFTRUE 35489
35439: LD_INT 18
35441: DOUBLE
35442: EQUAL
35443: IFTRUE 35489
35445: LD_INT 19
35447: DOUBLE
35448: EQUAL
35449: IFTRUE 35489
35451: LD_INT 22
35453: DOUBLE
35454: EQUAL
35455: IFTRUE 35489
35457: LD_INT 20
35459: DOUBLE
35460: EQUAL
35461: IFTRUE 35489
35463: LD_INT 21
35465: DOUBLE
35466: EQUAL
35467: IFTRUE 35489
35469: LD_INT 23
35471: DOUBLE
35472: EQUAL
35473: IFTRUE 35489
35475: LD_INT 24
35477: DOUBLE
35478: EQUAL
35479: IFTRUE 35489
35481: LD_INT 25
35483: DOUBLE
35484: EQUAL
35485: IFTRUE 35489
35487: GO 35545
35489: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35490: LD_ADDR_VAR 0 9
35494: PUSH
35495: LD_VAR 0 35
35499: PUSH
35500: LD_VAR 0 36
35504: PUSH
35505: LD_VAR 0 37
35509: PUSH
35510: LD_VAR 0 38
35514: PUSH
35515: LD_VAR 0 39
35519: PUSH
35520: LD_VAR 0 40
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: PUSH
35533: LD_VAR 0 4
35537: PUSH
35538: LD_INT 1
35540: PLUS
35541: ARRAY
35542: ST_TO_ADDR
35543: GO 35910
35545: LD_INT 6
35547: DOUBLE
35548: EQUAL
35549: IFTRUE 35601
35551: LD_INT 7
35553: DOUBLE
35554: EQUAL
35555: IFTRUE 35601
35557: LD_INT 8
35559: DOUBLE
35560: EQUAL
35561: IFTRUE 35601
35563: LD_INT 13
35565: DOUBLE
35566: EQUAL
35567: IFTRUE 35601
35569: LD_INT 12
35571: DOUBLE
35572: EQUAL
35573: IFTRUE 35601
35575: LD_INT 15
35577: DOUBLE
35578: EQUAL
35579: IFTRUE 35601
35581: LD_INT 11
35583: DOUBLE
35584: EQUAL
35585: IFTRUE 35601
35587: LD_INT 14
35589: DOUBLE
35590: EQUAL
35591: IFTRUE 35601
35593: LD_INT 10
35595: DOUBLE
35596: EQUAL
35597: IFTRUE 35601
35599: GO 35657
35601: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35602: LD_ADDR_VAR 0 9
35606: PUSH
35607: LD_VAR 0 41
35611: PUSH
35612: LD_VAR 0 42
35616: PUSH
35617: LD_VAR 0 43
35621: PUSH
35622: LD_VAR 0 44
35626: PUSH
35627: LD_VAR 0 45
35631: PUSH
35632: LD_VAR 0 46
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: PUSH
35645: LD_VAR 0 4
35649: PUSH
35650: LD_INT 1
35652: PLUS
35653: ARRAY
35654: ST_TO_ADDR
35655: GO 35910
35657: LD_INT 36
35659: DOUBLE
35660: EQUAL
35661: IFTRUE 35665
35663: GO 35721
35665: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35666: LD_ADDR_VAR 0 9
35670: PUSH
35671: LD_VAR 0 47
35675: PUSH
35676: LD_VAR 0 48
35680: PUSH
35681: LD_VAR 0 49
35685: PUSH
35686: LD_VAR 0 50
35690: PUSH
35691: LD_VAR 0 51
35695: PUSH
35696: LD_VAR 0 52
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: PUSH
35709: LD_VAR 0 4
35713: PUSH
35714: LD_INT 1
35716: PLUS
35717: ARRAY
35718: ST_TO_ADDR
35719: GO 35910
35721: LD_INT 4
35723: DOUBLE
35724: EQUAL
35725: IFTRUE 35747
35727: LD_INT 5
35729: DOUBLE
35730: EQUAL
35731: IFTRUE 35747
35733: LD_INT 34
35735: DOUBLE
35736: EQUAL
35737: IFTRUE 35747
35739: LD_INT 37
35741: DOUBLE
35742: EQUAL
35743: IFTRUE 35747
35745: GO 35803
35747: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35748: LD_ADDR_VAR 0 9
35752: PUSH
35753: LD_VAR 0 53
35757: PUSH
35758: LD_VAR 0 54
35762: PUSH
35763: LD_VAR 0 55
35767: PUSH
35768: LD_VAR 0 56
35772: PUSH
35773: LD_VAR 0 57
35777: PUSH
35778: LD_VAR 0 58
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: PUSH
35791: LD_VAR 0 4
35795: PUSH
35796: LD_INT 1
35798: PLUS
35799: ARRAY
35800: ST_TO_ADDR
35801: GO 35910
35803: LD_INT 31
35805: DOUBLE
35806: EQUAL
35807: IFTRUE 35853
35809: LD_INT 32
35811: DOUBLE
35812: EQUAL
35813: IFTRUE 35853
35815: LD_INT 33
35817: DOUBLE
35818: EQUAL
35819: IFTRUE 35853
35821: LD_INT 27
35823: DOUBLE
35824: EQUAL
35825: IFTRUE 35853
35827: LD_INT 26
35829: DOUBLE
35830: EQUAL
35831: IFTRUE 35853
35833: LD_INT 28
35835: DOUBLE
35836: EQUAL
35837: IFTRUE 35853
35839: LD_INT 29
35841: DOUBLE
35842: EQUAL
35843: IFTRUE 35853
35845: LD_INT 30
35847: DOUBLE
35848: EQUAL
35849: IFTRUE 35853
35851: GO 35909
35853: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35854: LD_ADDR_VAR 0 9
35858: PUSH
35859: LD_VAR 0 59
35863: PUSH
35864: LD_VAR 0 60
35868: PUSH
35869: LD_VAR 0 61
35873: PUSH
35874: LD_VAR 0 62
35878: PUSH
35879: LD_VAR 0 63
35883: PUSH
35884: LD_VAR 0 64
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: PUSH
35897: LD_VAR 0 4
35901: PUSH
35902: LD_INT 1
35904: PLUS
35905: ARRAY
35906: ST_TO_ADDR
35907: GO 35910
35909: POP
// temp_list2 = [ ] ;
35910: LD_ADDR_VAR 0 10
35914: PUSH
35915: EMPTY
35916: ST_TO_ADDR
// for i in temp_list do
35917: LD_ADDR_VAR 0 8
35921: PUSH
35922: LD_VAR 0 9
35926: PUSH
35927: FOR_IN
35928: IFFALSE 35980
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35930: LD_ADDR_VAR 0 10
35934: PUSH
35935: LD_VAR 0 10
35939: PUSH
35940: LD_VAR 0 8
35944: PUSH
35945: LD_INT 1
35947: ARRAY
35948: PUSH
35949: LD_VAR 0 2
35953: PLUS
35954: PUSH
35955: LD_VAR 0 8
35959: PUSH
35960: LD_INT 2
35962: ARRAY
35963: PUSH
35964: LD_VAR 0 3
35968: PLUS
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: EMPTY
35975: LIST
35976: ADD
35977: ST_TO_ADDR
35978: GO 35927
35980: POP
35981: POP
// result = temp_list2 ;
35982: LD_ADDR_VAR 0 7
35986: PUSH
35987: LD_VAR 0 10
35991: ST_TO_ADDR
// end ;
35992: LD_VAR 0 7
35996: RET
// export function EnemyInRange ( unit , dist ) ; begin
35997: LD_INT 0
35999: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36000: LD_ADDR_VAR 0 3
36004: PUSH
36005: LD_VAR 0 1
36009: PPUSH
36010: CALL_OW 255
36014: PPUSH
36015: LD_VAR 0 1
36019: PPUSH
36020: CALL_OW 250
36024: PPUSH
36025: LD_VAR 0 1
36029: PPUSH
36030: CALL_OW 251
36034: PPUSH
36035: LD_VAR 0 2
36039: PPUSH
36040: CALL 9393 0 4
36044: PUSH
36045: LD_INT 4
36047: ARRAY
36048: ST_TO_ADDR
// end ;
36049: LD_VAR 0 3
36053: RET
// export function PlayerSeeMe ( unit ) ; begin
36054: LD_INT 0
36056: PPUSH
// result := See ( your_side , unit ) ;
36057: LD_ADDR_VAR 0 2
36061: PUSH
36062: LD_OWVAR 2
36066: PPUSH
36067: LD_VAR 0 1
36071: PPUSH
36072: CALL_OW 292
36076: ST_TO_ADDR
// end ;
36077: LD_VAR 0 2
36081: RET
// export function ReverseDir ( unit ) ; begin
36082: LD_INT 0
36084: PPUSH
// if not unit then
36085: LD_VAR 0 1
36089: NOT
36090: IFFALSE 36094
// exit ;
36092: GO 36117
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36094: LD_ADDR_VAR 0 2
36098: PUSH
36099: LD_VAR 0 1
36103: PPUSH
36104: CALL_OW 254
36108: PUSH
36109: LD_INT 3
36111: PLUS
36112: PUSH
36113: LD_INT 6
36115: MOD
36116: ST_TO_ADDR
// end ;
36117: LD_VAR 0 2
36121: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
36122: LD_INT 0
36124: PPUSH
36125: PPUSH
36126: PPUSH
36127: PPUSH
36128: PPUSH
// if not hexes then
36129: LD_VAR 0 2
36133: NOT
36134: IFFALSE 36138
// exit ;
36136: GO 36286
// dist := 9999 ;
36138: LD_ADDR_VAR 0 5
36142: PUSH
36143: LD_INT 9999
36145: ST_TO_ADDR
// for i = 1 to hexes do
36146: LD_ADDR_VAR 0 4
36150: PUSH
36151: DOUBLE
36152: LD_INT 1
36154: DEC
36155: ST_TO_ADDR
36156: LD_VAR 0 2
36160: PUSH
36161: FOR_TO
36162: IFFALSE 36274
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
36164: LD_VAR 0 1
36168: PPUSH
36169: LD_VAR 0 2
36173: PUSH
36174: LD_VAR 0 4
36178: ARRAY
36179: PUSH
36180: LD_INT 1
36182: ARRAY
36183: PPUSH
36184: LD_VAR 0 2
36188: PUSH
36189: LD_VAR 0 4
36193: ARRAY
36194: PUSH
36195: LD_INT 2
36197: ARRAY
36198: PPUSH
36199: CALL_OW 297
36203: PUSH
36204: LD_VAR 0 5
36208: LESS
36209: IFFALSE 36272
// begin hex := hexes [ i ] ;
36211: LD_ADDR_VAR 0 7
36215: PUSH
36216: LD_VAR 0 2
36220: PUSH
36221: LD_VAR 0 4
36225: ARRAY
36226: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36227: LD_ADDR_VAR 0 5
36231: PUSH
36232: LD_VAR 0 1
36236: PPUSH
36237: LD_VAR 0 2
36241: PUSH
36242: LD_VAR 0 4
36246: ARRAY
36247: PUSH
36248: LD_INT 1
36250: ARRAY
36251: PPUSH
36252: LD_VAR 0 2
36256: PUSH
36257: LD_VAR 0 4
36261: ARRAY
36262: PUSH
36263: LD_INT 2
36265: ARRAY
36266: PPUSH
36267: CALL_OW 297
36271: ST_TO_ADDR
// end ; end ;
36272: GO 36161
36274: POP
36275: POP
// result := hex ;
36276: LD_ADDR_VAR 0 3
36280: PUSH
36281: LD_VAR 0 7
36285: ST_TO_ADDR
// end ;
36286: LD_VAR 0 3
36290: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36291: LD_INT 0
36293: PPUSH
36294: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36295: LD_VAR 0 1
36299: NOT
36300: PUSH
36301: LD_VAR 0 1
36305: PUSH
36306: LD_INT 21
36308: PUSH
36309: LD_INT 2
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 23
36318: PUSH
36319: LD_INT 2
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PPUSH
36330: CALL_OW 69
36334: IN
36335: NOT
36336: OR
36337: IFFALSE 36341
// exit ;
36339: GO 36388
// for i = 1 to 3 do
36341: LD_ADDR_VAR 0 3
36345: PUSH
36346: DOUBLE
36347: LD_INT 1
36349: DEC
36350: ST_TO_ADDR
36351: LD_INT 3
36353: PUSH
36354: FOR_TO
36355: IFFALSE 36386
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36357: LD_VAR 0 1
36361: PPUSH
36362: CALL_OW 250
36366: PPUSH
36367: LD_VAR 0 1
36371: PPUSH
36372: CALL_OW 251
36376: PPUSH
36377: LD_INT 1
36379: PPUSH
36380: CALL_OW 453
36384: GO 36354
36386: POP
36387: POP
// end ;
36388: LD_VAR 0 2
36392: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36393: LD_INT 0
36395: PPUSH
36396: PPUSH
36397: PPUSH
36398: PPUSH
36399: PPUSH
36400: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
36401: LD_VAR 0 1
36405: NOT
36406: PUSH
36407: LD_VAR 0 2
36411: NOT
36412: OR
36413: PUSH
36414: LD_VAR 0 1
36418: PPUSH
36419: CALL_OW 314
36423: OR
36424: IFFALSE 36428
// exit ;
36426: GO 36869
// x := GetX ( enemy_unit ) ;
36428: LD_ADDR_VAR 0 7
36432: PUSH
36433: LD_VAR 0 2
36437: PPUSH
36438: CALL_OW 250
36442: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36443: LD_ADDR_VAR 0 8
36447: PUSH
36448: LD_VAR 0 2
36452: PPUSH
36453: CALL_OW 251
36457: ST_TO_ADDR
// if not x or not y then
36458: LD_VAR 0 7
36462: NOT
36463: PUSH
36464: LD_VAR 0 8
36468: NOT
36469: OR
36470: IFFALSE 36474
// exit ;
36472: GO 36869
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36474: LD_ADDR_VAR 0 6
36478: PUSH
36479: LD_VAR 0 7
36483: PPUSH
36484: LD_INT 0
36486: PPUSH
36487: LD_INT 4
36489: PPUSH
36490: CALL_OW 272
36494: PUSH
36495: LD_VAR 0 8
36499: PPUSH
36500: LD_INT 0
36502: PPUSH
36503: LD_INT 4
36505: PPUSH
36506: CALL_OW 273
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_VAR 0 7
36519: PPUSH
36520: LD_INT 1
36522: PPUSH
36523: LD_INT 4
36525: PPUSH
36526: CALL_OW 272
36530: PUSH
36531: LD_VAR 0 8
36535: PPUSH
36536: LD_INT 1
36538: PPUSH
36539: LD_INT 4
36541: PPUSH
36542: CALL_OW 273
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_VAR 0 7
36555: PPUSH
36556: LD_INT 2
36558: PPUSH
36559: LD_INT 4
36561: PPUSH
36562: CALL_OW 272
36566: PUSH
36567: LD_VAR 0 8
36571: PPUSH
36572: LD_INT 2
36574: PPUSH
36575: LD_INT 4
36577: PPUSH
36578: CALL_OW 273
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: LD_VAR 0 7
36591: PPUSH
36592: LD_INT 3
36594: PPUSH
36595: LD_INT 4
36597: PPUSH
36598: CALL_OW 272
36602: PUSH
36603: LD_VAR 0 8
36607: PPUSH
36608: LD_INT 3
36610: PPUSH
36611: LD_INT 4
36613: PPUSH
36614: CALL_OW 273
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_VAR 0 7
36627: PPUSH
36628: LD_INT 4
36630: PPUSH
36631: LD_INT 4
36633: PPUSH
36634: CALL_OW 272
36638: PUSH
36639: LD_VAR 0 8
36643: PPUSH
36644: LD_INT 4
36646: PPUSH
36647: LD_INT 4
36649: PPUSH
36650: CALL_OW 273
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_VAR 0 7
36663: PPUSH
36664: LD_INT 5
36666: PPUSH
36667: LD_INT 4
36669: PPUSH
36670: CALL_OW 272
36674: PUSH
36675: LD_VAR 0 8
36679: PPUSH
36680: LD_INT 5
36682: PPUSH
36683: LD_INT 4
36685: PPUSH
36686: CALL_OW 273
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: ST_TO_ADDR
// for i = tmp downto 1 do
36703: LD_ADDR_VAR 0 4
36707: PUSH
36708: DOUBLE
36709: LD_VAR 0 6
36713: INC
36714: ST_TO_ADDR
36715: LD_INT 1
36717: PUSH
36718: FOR_DOWNTO
36719: IFFALSE 36820
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36721: LD_VAR 0 6
36725: PUSH
36726: LD_VAR 0 4
36730: ARRAY
36731: PUSH
36732: LD_INT 1
36734: ARRAY
36735: PPUSH
36736: LD_VAR 0 6
36740: PUSH
36741: LD_VAR 0 4
36745: ARRAY
36746: PUSH
36747: LD_INT 2
36749: ARRAY
36750: PPUSH
36751: CALL_OW 488
36755: NOT
36756: PUSH
36757: LD_VAR 0 6
36761: PUSH
36762: LD_VAR 0 4
36766: ARRAY
36767: PUSH
36768: LD_INT 1
36770: ARRAY
36771: PPUSH
36772: LD_VAR 0 6
36776: PUSH
36777: LD_VAR 0 4
36781: ARRAY
36782: PUSH
36783: LD_INT 2
36785: ARRAY
36786: PPUSH
36787: CALL_OW 428
36791: PUSH
36792: LD_INT 0
36794: NONEQUAL
36795: OR
36796: IFFALSE 36818
// tmp := Delete ( tmp , i ) ;
36798: LD_ADDR_VAR 0 6
36802: PUSH
36803: LD_VAR 0 6
36807: PPUSH
36808: LD_VAR 0 4
36812: PPUSH
36813: CALL_OW 3
36817: ST_TO_ADDR
36818: GO 36718
36820: POP
36821: POP
// j := GetClosestHex ( unit , tmp ) ;
36822: LD_ADDR_VAR 0 5
36826: PUSH
36827: LD_VAR 0 1
36831: PPUSH
36832: LD_VAR 0 6
36836: PPUSH
36837: CALL 36122 0 2
36841: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36842: LD_VAR 0 1
36846: PPUSH
36847: LD_VAR 0 5
36851: PUSH
36852: LD_INT 1
36854: ARRAY
36855: PPUSH
36856: LD_VAR 0 5
36860: PUSH
36861: LD_INT 2
36863: ARRAY
36864: PPUSH
36865: CALL_OW 111
// end ;
36869: LD_VAR 0 3
36873: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36874: LD_INT 0
36876: PPUSH
36877: PPUSH
36878: PPUSH
// uc_side = 0 ;
36879: LD_ADDR_OWVAR 20
36883: PUSH
36884: LD_INT 0
36886: ST_TO_ADDR
// uc_nation = 0 ;
36887: LD_ADDR_OWVAR 21
36891: PUSH
36892: LD_INT 0
36894: ST_TO_ADDR
// InitHc_All ( ) ;
36895: CALL_OW 584
// InitVc ;
36899: CALL_OW 20
// if mastodonts then
36903: LD_VAR 0 6
36907: IFFALSE 36974
// for i = 1 to mastodonts do
36909: LD_ADDR_VAR 0 11
36913: PUSH
36914: DOUBLE
36915: LD_INT 1
36917: DEC
36918: ST_TO_ADDR
36919: LD_VAR 0 6
36923: PUSH
36924: FOR_TO
36925: IFFALSE 36972
// begin vc_chassis := 31 ;
36927: LD_ADDR_OWVAR 37
36931: PUSH
36932: LD_INT 31
36934: ST_TO_ADDR
// vc_control := control_rider ;
36935: LD_ADDR_OWVAR 38
36939: PUSH
36940: LD_INT 4
36942: ST_TO_ADDR
// animal := CreateVehicle ;
36943: LD_ADDR_VAR 0 12
36947: PUSH
36948: CALL_OW 45
36952: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36953: LD_VAR 0 12
36957: PPUSH
36958: LD_VAR 0 8
36962: PPUSH
36963: LD_INT 0
36965: PPUSH
36966: CALL 39162 0 3
// end ;
36970: GO 36924
36972: POP
36973: POP
// if horses then
36974: LD_VAR 0 5
36978: IFFALSE 37045
// for i = 1 to horses do
36980: LD_ADDR_VAR 0 11
36984: PUSH
36985: DOUBLE
36986: LD_INT 1
36988: DEC
36989: ST_TO_ADDR
36990: LD_VAR 0 5
36994: PUSH
36995: FOR_TO
36996: IFFALSE 37043
// begin hc_class := 21 ;
36998: LD_ADDR_OWVAR 28
37002: PUSH
37003: LD_INT 21
37005: ST_TO_ADDR
// hc_gallery :=  ;
37006: LD_ADDR_OWVAR 33
37010: PUSH
37011: LD_STRING 
37013: ST_TO_ADDR
// animal := CreateHuman ;
37014: LD_ADDR_VAR 0 12
37018: PUSH
37019: CALL_OW 44
37023: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37024: LD_VAR 0 12
37028: PPUSH
37029: LD_VAR 0 8
37033: PPUSH
37034: LD_INT 0
37036: PPUSH
37037: CALL 39162 0 3
// end ;
37041: GO 36995
37043: POP
37044: POP
// if birds then
37045: LD_VAR 0 1
37049: IFFALSE 37116
// for i = 1 to birds do
37051: LD_ADDR_VAR 0 11
37055: PUSH
37056: DOUBLE
37057: LD_INT 1
37059: DEC
37060: ST_TO_ADDR
37061: LD_VAR 0 1
37065: PUSH
37066: FOR_TO
37067: IFFALSE 37114
// begin hc_class = 18 ;
37069: LD_ADDR_OWVAR 28
37073: PUSH
37074: LD_INT 18
37076: ST_TO_ADDR
// hc_gallery =  ;
37077: LD_ADDR_OWVAR 33
37081: PUSH
37082: LD_STRING 
37084: ST_TO_ADDR
// animal := CreateHuman ;
37085: LD_ADDR_VAR 0 12
37089: PUSH
37090: CALL_OW 44
37094: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37095: LD_VAR 0 12
37099: PPUSH
37100: LD_VAR 0 8
37104: PPUSH
37105: LD_INT 0
37107: PPUSH
37108: CALL 39162 0 3
// end ;
37112: GO 37066
37114: POP
37115: POP
// if tigers then
37116: LD_VAR 0 2
37120: IFFALSE 37204
// for i = 1 to tigers do
37122: LD_ADDR_VAR 0 11
37126: PUSH
37127: DOUBLE
37128: LD_INT 1
37130: DEC
37131: ST_TO_ADDR
37132: LD_VAR 0 2
37136: PUSH
37137: FOR_TO
37138: IFFALSE 37202
// begin hc_class = class_tiger ;
37140: LD_ADDR_OWVAR 28
37144: PUSH
37145: LD_INT 14
37147: ST_TO_ADDR
// hc_gallery =  ;
37148: LD_ADDR_OWVAR 33
37152: PUSH
37153: LD_STRING 
37155: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37156: LD_ADDR_OWVAR 35
37160: PUSH
37161: LD_INT 7
37163: NEG
37164: PPUSH
37165: LD_INT 7
37167: PPUSH
37168: CALL_OW 12
37172: ST_TO_ADDR
// animal := CreateHuman ;
37173: LD_ADDR_VAR 0 12
37177: PUSH
37178: CALL_OW 44
37182: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37183: LD_VAR 0 12
37187: PPUSH
37188: LD_VAR 0 8
37192: PPUSH
37193: LD_INT 0
37195: PPUSH
37196: CALL 39162 0 3
// end ;
37200: GO 37137
37202: POP
37203: POP
// if apemans then
37204: LD_VAR 0 3
37208: IFFALSE 37331
// for i = 1 to apemans do
37210: LD_ADDR_VAR 0 11
37214: PUSH
37215: DOUBLE
37216: LD_INT 1
37218: DEC
37219: ST_TO_ADDR
37220: LD_VAR 0 3
37224: PUSH
37225: FOR_TO
37226: IFFALSE 37329
// begin hc_class = class_apeman ;
37228: LD_ADDR_OWVAR 28
37232: PUSH
37233: LD_INT 12
37235: ST_TO_ADDR
// hc_gallery =  ;
37236: LD_ADDR_OWVAR 33
37240: PUSH
37241: LD_STRING 
37243: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37244: LD_ADDR_OWVAR 35
37248: PUSH
37249: LD_INT 2
37251: NEG
37252: PPUSH
37253: LD_INT 2
37255: PPUSH
37256: CALL_OW 12
37260: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37261: LD_ADDR_OWVAR 31
37265: PUSH
37266: LD_INT 1
37268: PPUSH
37269: LD_INT 3
37271: PPUSH
37272: CALL_OW 12
37276: PUSH
37277: LD_INT 1
37279: PPUSH
37280: LD_INT 3
37282: PPUSH
37283: CALL_OW 12
37287: PUSH
37288: LD_INT 0
37290: PUSH
37291: LD_INT 0
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: ST_TO_ADDR
// animal := CreateHuman ;
37300: LD_ADDR_VAR 0 12
37304: PUSH
37305: CALL_OW 44
37309: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37310: LD_VAR 0 12
37314: PPUSH
37315: LD_VAR 0 8
37319: PPUSH
37320: LD_INT 0
37322: PPUSH
37323: CALL 39162 0 3
// end ;
37327: GO 37225
37329: POP
37330: POP
// if enchidnas then
37331: LD_VAR 0 4
37335: IFFALSE 37402
// for i = 1 to enchidnas do
37337: LD_ADDR_VAR 0 11
37341: PUSH
37342: DOUBLE
37343: LD_INT 1
37345: DEC
37346: ST_TO_ADDR
37347: LD_VAR 0 4
37351: PUSH
37352: FOR_TO
37353: IFFALSE 37400
// begin hc_class = 13 ;
37355: LD_ADDR_OWVAR 28
37359: PUSH
37360: LD_INT 13
37362: ST_TO_ADDR
// hc_gallery =  ;
37363: LD_ADDR_OWVAR 33
37367: PUSH
37368: LD_STRING 
37370: ST_TO_ADDR
// animal := CreateHuman ;
37371: LD_ADDR_VAR 0 12
37375: PUSH
37376: CALL_OW 44
37380: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37381: LD_VAR 0 12
37385: PPUSH
37386: LD_VAR 0 8
37390: PPUSH
37391: LD_INT 0
37393: PPUSH
37394: CALL 39162 0 3
// end ;
37398: GO 37352
37400: POP
37401: POP
// if fishes then
37402: LD_VAR 0 7
37406: IFFALSE 37473
// for i = 1 to fishes do
37408: LD_ADDR_VAR 0 11
37412: PUSH
37413: DOUBLE
37414: LD_INT 1
37416: DEC
37417: ST_TO_ADDR
37418: LD_VAR 0 7
37422: PUSH
37423: FOR_TO
37424: IFFALSE 37471
// begin hc_class = 20 ;
37426: LD_ADDR_OWVAR 28
37430: PUSH
37431: LD_INT 20
37433: ST_TO_ADDR
// hc_gallery =  ;
37434: LD_ADDR_OWVAR 33
37438: PUSH
37439: LD_STRING 
37441: ST_TO_ADDR
// animal := CreateHuman ;
37442: LD_ADDR_VAR 0 12
37446: PUSH
37447: CALL_OW 44
37451: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37452: LD_VAR 0 12
37456: PPUSH
37457: LD_VAR 0 9
37461: PPUSH
37462: LD_INT 0
37464: PPUSH
37465: CALL 39162 0 3
// end ;
37469: GO 37423
37471: POP
37472: POP
// end ;
37473: LD_VAR 0 10
37477: RET
// export function WantHeal ( sci , unit ) ; begin
37478: LD_INT 0
37480: PPUSH
// if GetTaskList ( sci ) > 0 then
37481: LD_VAR 0 1
37485: PPUSH
37486: CALL_OW 437
37490: PUSH
37491: LD_INT 0
37493: GREATER
37494: IFFALSE 37564
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37496: LD_VAR 0 1
37500: PPUSH
37501: CALL_OW 437
37505: PUSH
37506: LD_INT 1
37508: ARRAY
37509: PUSH
37510: LD_INT 1
37512: ARRAY
37513: PUSH
37514: LD_STRING l
37516: EQUAL
37517: PUSH
37518: LD_VAR 0 1
37522: PPUSH
37523: CALL_OW 437
37527: PUSH
37528: LD_INT 1
37530: ARRAY
37531: PUSH
37532: LD_INT 4
37534: ARRAY
37535: PUSH
37536: LD_VAR 0 2
37540: EQUAL
37541: AND
37542: IFFALSE 37554
// result := true else
37544: LD_ADDR_VAR 0 3
37548: PUSH
37549: LD_INT 1
37551: ST_TO_ADDR
37552: GO 37562
// result := false ;
37554: LD_ADDR_VAR 0 3
37558: PUSH
37559: LD_INT 0
37561: ST_TO_ADDR
// end else
37562: GO 37572
// result := false ;
37564: LD_ADDR_VAR 0 3
37568: PUSH
37569: LD_INT 0
37571: ST_TO_ADDR
// end ;
37572: LD_VAR 0 3
37576: RET
// export function HealTarget ( sci ) ; begin
37577: LD_INT 0
37579: PPUSH
// if not sci then
37580: LD_VAR 0 1
37584: NOT
37585: IFFALSE 37589
// exit ;
37587: GO 37654
// result := 0 ;
37589: LD_ADDR_VAR 0 2
37593: PUSH
37594: LD_INT 0
37596: ST_TO_ADDR
// if GetTaskList ( sci ) then
37597: LD_VAR 0 1
37601: PPUSH
37602: CALL_OW 437
37606: IFFALSE 37654
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37608: LD_VAR 0 1
37612: PPUSH
37613: CALL_OW 437
37617: PUSH
37618: LD_INT 1
37620: ARRAY
37621: PUSH
37622: LD_INT 1
37624: ARRAY
37625: PUSH
37626: LD_STRING l
37628: EQUAL
37629: IFFALSE 37654
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37631: LD_ADDR_VAR 0 2
37635: PUSH
37636: LD_VAR 0 1
37640: PPUSH
37641: CALL_OW 437
37645: PUSH
37646: LD_INT 1
37648: ARRAY
37649: PUSH
37650: LD_INT 4
37652: ARRAY
37653: ST_TO_ADDR
// end ;
37654: LD_VAR 0 2
37658: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37659: LD_INT 0
37661: PPUSH
37662: PPUSH
37663: PPUSH
37664: PPUSH
// if not base_units then
37665: LD_VAR 0 1
37669: NOT
37670: IFFALSE 37674
// exit ;
37672: GO 37761
// result := false ;
37674: LD_ADDR_VAR 0 2
37678: PUSH
37679: LD_INT 0
37681: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37682: LD_ADDR_VAR 0 5
37686: PUSH
37687: LD_VAR 0 1
37691: PPUSH
37692: LD_INT 21
37694: PUSH
37695: LD_INT 3
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PPUSH
37702: CALL_OW 72
37706: ST_TO_ADDR
// if not tmp then
37707: LD_VAR 0 5
37711: NOT
37712: IFFALSE 37716
// exit ;
37714: GO 37761
// for i in tmp do
37716: LD_ADDR_VAR 0 3
37720: PUSH
37721: LD_VAR 0 5
37725: PUSH
37726: FOR_IN
37727: IFFALSE 37759
// begin result := EnemyInRange ( i , 22 ) ;
37729: LD_ADDR_VAR 0 2
37733: PUSH
37734: LD_VAR 0 3
37738: PPUSH
37739: LD_INT 22
37741: PPUSH
37742: CALL 35997 0 2
37746: ST_TO_ADDR
// if result then
37747: LD_VAR 0 2
37751: IFFALSE 37757
// exit ;
37753: POP
37754: POP
37755: GO 37761
// end ;
37757: GO 37726
37759: POP
37760: POP
// end ;
37761: LD_VAR 0 2
37765: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
37766: LD_INT 0
37768: PPUSH
37769: PPUSH
// if not units then
37770: LD_VAR 0 1
37774: NOT
37775: IFFALSE 37779
// exit ;
37777: GO 37849
// result := [ ] ;
37779: LD_ADDR_VAR 0 3
37783: PUSH
37784: EMPTY
37785: ST_TO_ADDR
// for i in units do
37786: LD_ADDR_VAR 0 4
37790: PUSH
37791: LD_VAR 0 1
37795: PUSH
37796: FOR_IN
37797: IFFALSE 37847
// if GetTag ( i ) = tag then
37799: LD_VAR 0 4
37803: PPUSH
37804: CALL_OW 110
37808: PUSH
37809: LD_VAR 0 2
37813: EQUAL
37814: IFFALSE 37845
// result := Insert ( result , result + 1 , i ) ;
37816: LD_ADDR_VAR 0 3
37820: PUSH
37821: LD_VAR 0 3
37825: PPUSH
37826: LD_VAR 0 3
37830: PUSH
37831: LD_INT 1
37833: PLUS
37834: PPUSH
37835: LD_VAR 0 4
37839: PPUSH
37840: CALL_OW 2
37844: ST_TO_ADDR
37845: GO 37796
37847: POP
37848: POP
// end ;
37849: LD_VAR 0 3
37853: RET
// export function IsDriver ( un ) ; begin
37854: LD_INT 0
37856: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37857: LD_ADDR_VAR 0 2
37861: PUSH
37862: LD_VAR 0 1
37866: PUSH
37867: LD_INT 55
37869: PUSH
37870: EMPTY
37871: LIST
37872: PPUSH
37873: CALL_OW 69
37877: IN
37878: ST_TO_ADDR
// end ;
37879: LD_VAR 0 2
37883: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37884: LD_INT 0
37886: PPUSH
37887: PPUSH
// list := [ ] ;
37888: LD_ADDR_VAR 0 5
37892: PUSH
37893: EMPTY
37894: ST_TO_ADDR
// case d of 0 :
37895: LD_VAR 0 3
37899: PUSH
37900: LD_INT 0
37902: DOUBLE
37903: EQUAL
37904: IFTRUE 37908
37906: GO 38041
37908: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37909: LD_ADDR_VAR 0 5
37913: PUSH
37914: LD_VAR 0 1
37918: PUSH
37919: LD_INT 4
37921: MINUS
37922: PUSH
37923: LD_VAR 0 2
37927: PUSH
37928: LD_INT 4
37930: MINUS
37931: PUSH
37932: LD_INT 2
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: LIST
37939: PUSH
37940: LD_VAR 0 1
37944: PUSH
37945: LD_INT 3
37947: MINUS
37948: PUSH
37949: LD_VAR 0 2
37953: PUSH
37954: LD_INT 1
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: LIST
37961: PUSH
37962: LD_VAR 0 1
37966: PUSH
37967: LD_INT 4
37969: PLUS
37970: PUSH
37971: LD_VAR 0 2
37975: PUSH
37976: LD_INT 4
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: LIST
37983: PUSH
37984: LD_VAR 0 1
37988: PUSH
37989: LD_INT 3
37991: PLUS
37992: PUSH
37993: LD_VAR 0 2
37997: PUSH
37998: LD_INT 3
38000: PLUS
38001: PUSH
38002: LD_INT 5
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: LIST
38009: PUSH
38010: LD_VAR 0 1
38014: PUSH
38015: LD_VAR 0 2
38019: PUSH
38020: LD_INT 4
38022: PLUS
38023: PUSH
38024: LD_INT 0
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: LIST
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: ST_TO_ADDR
// end ; 1 :
38039: GO 38739
38041: LD_INT 1
38043: DOUBLE
38044: EQUAL
38045: IFTRUE 38049
38047: GO 38182
38049: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38050: LD_ADDR_VAR 0 5
38054: PUSH
38055: LD_VAR 0 1
38059: PUSH
38060: LD_VAR 0 2
38064: PUSH
38065: LD_INT 4
38067: MINUS
38068: PUSH
38069: LD_INT 3
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: LIST
38076: PUSH
38077: LD_VAR 0 1
38081: PUSH
38082: LD_INT 3
38084: MINUS
38085: PUSH
38086: LD_VAR 0 2
38090: PUSH
38091: LD_INT 3
38093: MINUS
38094: PUSH
38095: LD_INT 2
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: LIST
38102: PUSH
38103: LD_VAR 0 1
38107: PUSH
38108: LD_INT 4
38110: MINUS
38111: PUSH
38112: LD_VAR 0 2
38116: PUSH
38117: LD_INT 1
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: LIST
38124: PUSH
38125: LD_VAR 0 1
38129: PUSH
38130: LD_VAR 0 2
38134: PUSH
38135: LD_INT 3
38137: PLUS
38138: PUSH
38139: LD_INT 0
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: LIST
38146: PUSH
38147: LD_VAR 0 1
38151: PUSH
38152: LD_INT 4
38154: PLUS
38155: PUSH
38156: LD_VAR 0 2
38160: PUSH
38161: LD_INT 4
38163: PLUS
38164: PUSH
38165: LD_INT 5
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: LIST
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: ST_TO_ADDR
// end ; 2 :
38180: GO 38739
38182: LD_INT 2
38184: DOUBLE
38185: EQUAL
38186: IFTRUE 38190
38188: GO 38319
38190: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38191: LD_ADDR_VAR 0 5
38195: PUSH
38196: LD_VAR 0 1
38200: PUSH
38201: LD_VAR 0 2
38205: PUSH
38206: LD_INT 3
38208: MINUS
38209: PUSH
38210: LD_INT 3
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: LIST
38217: PUSH
38218: LD_VAR 0 1
38222: PUSH
38223: LD_INT 4
38225: PLUS
38226: PUSH
38227: LD_VAR 0 2
38231: PUSH
38232: LD_INT 4
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: LIST
38239: PUSH
38240: LD_VAR 0 1
38244: PUSH
38245: LD_VAR 0 2
38249: PUSH
38250: LD_INT 4
38252: PLUS
38253: PUSH
38254: LD_INT 0
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: LIST
38261: PUSH
38262: LD_VAR 0 1
38266: PUSH
38267: LD_INT 3
38269: MINUS
38270: PUSH
38271: LD_VAR 0 2
38275: PUSH
38276: LD_INT 1
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: LIST
38283: PUSH
38284: LD_VAR 0 1
38288: PUSH
38289: LD_INT 4
38291: MINUS
38292: PUSH
38293: LD_VAR 0 2
38297: PUSH
38298: LD_INT 4
38300: MINUS
38301: PUSH
38302: LD_INT 2
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: LIST
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: ST_TO_ADDR
// end ; 3 :
38317: GO 38739
38319: LD_INT 3
38321: DOUBLE
38322: EQUAL
38323: IFTRUE 38327
38325: GO 38460
38327: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38328: LD_ADDR_VAR 0 5
38332: PUSH
38333: LD_VAR 0 1
38337: PUSH
38338: LD_INT 3
38340: PLUS
38341: PUSH
38342: LD_VAR 0 2
38346: PUSH
38347: LD_INT 4
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: LIST
38354: PUSH
38355: LD_VAR 0 1
38359: PUSH
38360: LD_INT 4
38362: PLUS
38363: PUSH
38364: LD_VAR 0 2
38368: PUSH
38369: LD_INT 4
38371: PLUS
38372: PUSH
38373: LD_INT 5
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: LIST
38380: PUSH
38381: LD_VAR 0 1
38385: PUSH
38386: LD_INT 4
38388: MINUS
38389: PUSH
38390: LD_VAR 0 2
38394: PUSH
38395: LD_INT 1
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: LIST
38402: PUSH
38403: LD_VAR 0 1
38407: PUSH
38408: LD_VAR 0 2
38412: PUSH
38413: LD_INT 4
38415: MINUS
38416: PUSH
38417: LD_INT 3
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: LIST
38424: PUSH
38425: LD_VAR 0 1
38429: PUSH
38430: LD_INT 3
38432: MINUS
38433: PUSH
38434: LD_VAR 0 2
38438: PUSH
38439: LD_INT 3
38441: MINUS
38442: PUSH
38443: LD_INT 2
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: LIST
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: ST_TO_ADDR
// end ; 4 :
38458: GO 38739
38460: LD_INT 4
38462: DOUBLE
38463: EQUAL
38464: IFTRUE 38468
38466: GO 38601
38468: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38469: LD_ADDR_VAR 0 5
38473: PUSH
38474: LD_VAR 0 1
38478: PUSH
38479: LD_VAR 0 2
38483: PUSH
38484: LD_INT 4
38486: PLUS
38487: PUSH
38488: LD_INT 0
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: LIST
38495: PUSH
38496: LD_VAR 0 1
38500: PUSH
38501: LD_INT 3
38503: PLUS
38504: PUSH
38505: LD_VAR 0 2
38509: PUSH
38510: LD_INT 3
38512: PLUS
38513: PUSH
38514: LD_INT 5
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: LIST
38521: PUSH
38522: LD_VAR 0 1
38526: PUSH
38527: LD_INT 4
38529: PLUS
38530: PUSH
38531: LD_VAR 0 2
38535: PUSH
38536: LD_INT 4
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: LIST
38543: PUSH
38544: LD_VAR 0 1
38548: PUSH
38549: LD_VAR 0 2
38553: PUSH
38554: LD_INT 3
38556: MINUS
38557: PUSH
38558: LD_INT 3
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: LIST
38565: PUSH
38566: LD_VAR 0 1
38570: PUSH
38571: LD_INT 4
38573: MINUS
38574: PUSH
38575: LD_VAR 0 2
38579: PUSH
38580: LD_INT 4
38582: MINUS
38583: PUSH
38584: LD_INT 2
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: LIST
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: ST_TO_ADDR
// end ; 5 :
38599: GO 38739
38601: LD_INT 5
38603: DOUBLE
38604: EQUAL
38605: IFTRUE 38609
38607: GO 38738
38609: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38610: LD_ADDR_VAR 0 5
38614: PUSH
38615: LD_VAR 0 1
38619: PUSH
38620: LD_INT 4
38622: MINUS
38623: PUSH
38624: LD_VAR 0 2
38628: PUSH
38629: LD_INT 1
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: LIST
38636: PUSH
38637: LD_VAR 0 1
38641: PUSH
38642: LD_VAR 0 2
38646: PUSH
38647: LD_INT 4
38649: MINUS
38650: PUSH
38651: LD_INT 3
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: LIST
38658: PUSH
38659: LD_VAR 0 1
38663: PUSH
38664: LD_INT 4
38666: PLUS
38667: PUSH
38668: LD_VAR 0 2
38672: PUSH
38673: LD_INT 4
38675: PLUS
38676: PUSH
38677: LD_INT 5
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: LIST
38684: PUSH
38685: LD_VAR 0 1
38689: PUSH
38690: LD_INT 3
38692: PLUS
38693: PUSH
38694: LD_VAR 0 2
38698: PUSH
38699: LD_INT 4
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: LIST
38706: PUSH
38707: LD_VAR 0 1
38711: PUSH
38712: LD_VAR 0 2
38716: PUSH
38717: LD_INT 3
38719: PLUS
38720: PUSH
38721: LD_INT 0
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: LIST
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: ST_TO_ADDR
// end ; end ;
38736: GO 38739
38738: POP
// result := list ;
38739: LD_ADDR_VAR 0 4
38743: PUSH
38744: LD_VAR 0 5
38748: ST_TO_ADDR
// end ;
38749: LD_VAR 0 4
38753: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38754: LD_INT 0
38756: PPUSH
38757: PPUSH
38758: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38759: LD_VAR 0 1
38763: NOT
38764: PUSH
38765: LD_VAR 0 2
38769: PUSH
38770: LD_INT 1
38772: PUSH
38773: LD_INT 2
38775: PUSH
38776: LD_INT 3
38778: PUSH
38779: LD_INT 4
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: IN
38788: NOT
38789: OR
38790: IFFALSE 38794
// exit ;
38792: GO 38886
// tmp := [ ] ;
38794: LD_ADDR_VAR 0 5
38798: PUSH
38799: EMPTY
38800: ST_TO_ADDR
// for i in units do
38801: LD_ADDR_VAR 0 4
38805: PUSH
38806: LD_VAR 0 1
38810: PUSH
38811: FOR_IN
38812: IFFALSE 38855
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
38814: LD_ADDR_VAR 0 5
38818: PUSH
38819: LD_VAR 0 5
38823: PPUSH
38824: LD_VAR 0 5
38828: PUSH
38829: LD_INT 1
38831: PLUS
38832: PPUSH
38833: LD_VAR 0 4
38837: PPUSH
38838: LD_VAR 0 2
38842: PPUSH
38843: CALL_OW 259
38847: PPUSH
38848: CALL_OW 2
38852: ST_TO_ADDR
38853: GO 38811
38855: POP
38856: POP
// if not tmp then
38857: LD_VAR 0 5
38861: NOT
38862: IFFALSE 38866
// exit ;
38864: GO 38886
// result := SortListByListDesc ( units , tmp ) ;
38866: LD_ADDR_VAR 0 3
38870: PUSH
38871: LD_VAR 0 1
38875: PPUSH
38876: LD_VAR 0 5
38880: PPUSH
38881: CALL_OW 77
38885: ST_TO_ADDR
// end ;
38886: LD_VAR 0 3
38890: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38891: LD_INT 0
38893: PPUSH
38894: PPUSH
38895: PPUSH
// result := false ;
38896: LD_ADDR_VAR 0 3
38900: PUSH
38901: LD_INT 0
38903: ST_TO_ADDR
// x := GetX ( building ) ;
38904: LD_ADDR_VAR 0 4
38908: PUSH
38909: LD_VAR 0 2
38913: PPUSH
38914: CALL_OW 250
38918: ST_TO_ADDR
// y := GetY ( building ) ;
38919: LD_ADDR_VAR 0 5
38923: PUSH
38924: LD_VAR 0 2
38928: PPUSH
38929: CALL_OW 251
38933: ST_TO_ADDR
// if not building or not x or not y then
38934: LD_VAR 0 2
38938: NOT
38939: PUSH
38940: LD_VAR 0 4
38944: NOT
38945: OR
38946: PUSH
38947: LD_VAR 0 5
38951: NOT
38952: OR
38953: IFFALSE 38957
// exit ;
38955: GO 39049
// if GetTaskList ( unit ) then
38957: LD_VAR 0 1
38961: PPUSH
38962: CALL_OW 437
38966: IFFALSE 39049
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38968: LD_STRING e
38970: PUSH
38971: LD_VAR 0 1
38975: PPUSH
38976: CALL_OW 437
38980: PUSH
38981: LD_INT 1
38983: ARRAY
38984: PUSH
38985: LD_INT 1
38987: ARRAY
38988: EQUAL
38989: PUSH
38990: LD_VAR 0 4
38994: PUSH
38995: LD_VAR 0 1
38999: PPUSH
39000: CALL_OW 437
39004: PUSH
39005: LD_INT 1
39007: ARRAY
39008: PUSH
39009: LD_INT 2
39011: ARRAY
39012: EQUAL
39013: AND
39014: PUSH
39015: LD_VAR 0 5
39019: PUSH
39020: LD_VAR 0 1
39024: PPUSH
39025: CALL_OW 437
39029: PUSH
39030: LD_INT 1
39032: ARRAY
39033: PUSH
39034: LD_INT 3
39036: ARRAY
39037: EQUAL
39038: AND
39039: IFFALSE 39049
// result := true end ;
39041: LD_ADDR_VAR 0 3
39045: PUSH
39046: LD_INT 1
39048: ST_TO_ADDR
// end ;
39049: LD_VAR 0 3
39053: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39054: LD_INT 0
39056: PPUSH
// result := false ;
39057: LD_ADDR_VAR 0 4
39061: PUSH
39062: LD_INT 0
39064: ST_TO_ADDR
// if GetTaskList ( unit ) then
39065: LD_VAR 0 1
39069: PPUSH
39070: CALL_OW 437
39074: IFFALSE 39157
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39076: LD_STRING M
39078: PUSH
39079: LD_VAR 0 1
39083: PPUSH
39084: CALL_OW 437
39088: PUSH
39089: LD_INT 1
39091: ARRAY
39092: PUSH
39093: LD_INT 1
39095: ARRAY
39096: EQUAL
39097: PUSH
39098: LD_VAR 0 2
39102: PUSH
39103: LD_VAR 0 1
39107: PPUSH
39108: CALL_OW 437
39112: PUSH
39113: LD_INT 1
39115: ARRAY
39116: PUSH
39117: LD_INT 2
39119: ARRAY
39120: EQUAL
39121: AND
39122: PUSH
39123: LD_VAR 0 3
39127: PUSH
39128: LD_VAR 0 1
39132: PPUSH
39133: CALL_OW 437
39137: PUSH
39138: LD_INT 1
39140: ARRAY
39141: PUSH
39142: LD_INT 3
39144: ARRAY
39145: EQUAL
39146: AND
39147: IFFALSE 39157
// result := true ;
39149: LD_ADDR_VAR 0 4
39153: PUSH
39154: LD_INT 1
39156: ST_TO_ADDR
// end ; end ;
39157: LD_VAR 0 4
39161: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39162: LD_INT 0
39164: PPUSH
39165: PPUSH
39166: PPUSH
39167: PPUSH
// if not unit or not area then
39168: LD_VAR 0 1
39172: NOT
39173: PUSH
39174: LD_VAR 0 2
39178: NOT
39179: OR
39180: IFFALSE 39184
// exit ;
39182: GO 39348
// tmp := AreaToList ( area , i ) ;
39184: LD_ADDR_VAR 0 6
39188: PUSH
39189: LD_VAR 0 2
39193: PPUSH
39194: LD_VAR 0 5
39198: PPUSH
39199: CALL_OW 517
39203: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39204: LD_ADDR_VAR 0 5
39208: PUSH
39209: DOUBLE
39210: LD_INT 1
39212: DEC
39213: ST_TO_ADDR
39214: LD_VAR 0 6
39218: PUSH
39219: LD_INT 1
39221: ARRAY
39222: PUSH
39223: FOR_TO
39224: IFFALSE 39346
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39226: LD_ADDR_VAR 0 7
39230: PUSH
39231: LD_VAR 0 6
39235: PUSH
39236: LD_INT 1
39238: ARRAY
39239: PUSH
39240: LD_VAR 0 5
39244: ARRAY
39245: PUSH
39246: LD_VAR 0 6
39250: PUSH
39251: LD_INT 2
39253: ARRAY
39254: PUSH
39255: LD_VAR 0 5
39259: ARRAY
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
39265: LD_VAR 0 7
39269: PUSH
39270: LD_INT 1
39272: ARRAY
39273: PPUSH
39274: LD_VAR 0 7
39278: PUSH
39279: LD_INT 2
39281: ARRAY
39282: PPUSH
39283: CALL_OW 428
39287: PUSH
39288: LD_INT 0
39290: EQUAL
39291: IFFALSE 39344
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39293: LD_VAR 0 1
39297: PPUSH
39298: LD_VAR 0 7
39302: PUSH
39303: LD_INT 1
39305: ARRAY
39306: PPUSH
39307: LD_VAR 0 7
39311: PUSH
39312: LD_INT 2
39314: ARRAY
39315: PPUSH
39316: LD_VAR 0 3
39320: PPUSH
39321: CALL_OW 48
// result := IsPlaced ( unit ) ;
39325: LD_ADDR_VAR 0 4
39329: PUSH
39330: LD_VAR 0 1
39334: PPUSH
39335: CALL_OW 305
39339: ST_TO_ADDR
// exit ;
39340: POP
39341: POP
39342: GO 39348
// end ; end ;
39344: GO 39223
39346: POP
39347: POP
// end ;
39348: LD_VAR 0 4
39352: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39353: LD_INT 0
39355: PPUSH
39356: PPUSH
39357: PPUSH
// if not side or side > 8 then
39358: LD_VAR 0 1
39362: NOT
39363: PUSH
39364: LD_VAR 0 1
39368: PUSH
39369: LD_INT 8
39371: GREATER
39372: OR
39373: IFFALSE 39377
// exit ;
39375: GO 39564
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39377: LD_ADDR_VAR 0 4
39381: PUSH
39382: LD_INT 22
39384: PUSH
39385: LD_VAR 0 1
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 21
39396: PUSH
39397: LD_INT 3
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PPUSH
39408: CALL_OW 69
39412: ST_TO_ADDR
// if not tmp then
39413: LD_VAR 0 4
39417: NOT
39418: IFFALSE 39422
// exit ;
39420: GO 39564
// enable_addtolog := true ;
39422: LD_ADDR_OWVAR 81
39426: PUSH
39427: LD_INT 1
39429: ST_TO_ADDR
// AddToLog ( [ ) ;
39430: LD_STRING [
39432: PPUSH
39433: CALL_OW 561
// for i in tmp do
39437: LD_ADDR_VAR 0 3
39441: PUSH
39442: LD_VAR 0 4
39446: PUSH
39447: FOR_IN
39448: IFFALSE 39555
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39450: LD_STRING [
39452: PUSH
39453: LD_VAR 0 3
39457: PPUSH
39458: CALL_OW 266
39462: STR
39463: PUSH
39464: LD_STRING , 
39466: STR
39467: PUSH
39468: LD_VAR 0 3
39472: PPUSH
39473: CALL_OW 250
39477: STR
39478: PUSH
39479: LD_STRING , 
39481: STR
39482: PUSH
39483: LD_VAR 0 3
39487: PPUSH
39488: CALL_OW 251
39492: STR
39493: PUSH
39494: LD_STRING , 
39496: STR
39497: PUSH
39498: LD_VAR 0 3
39502: PPUSH
39503: CALL_OW 254
39507: STR
39508: PUSH
39509: LD_STRING , 
39511: STR
39512: PUSH
39513: LD_VAR 0 3
39517: PPUSH
39518: LD_INT 1
39520: PPUSH
39521: CALL_OW 268
39525: STR
39526: PUSH
39527: LD_STRING , 
39529: STR
39530: PUSH
39531: LD_VAR 0 3
39535: PPUSH
39536: LD_INT 2
39538: PPUSH
39539: CALL_OW 268
39543: STR
39544: PUSH
39545: LD_STRING ],
39547: STR
39548: PPUSH
39549: CALL_OW 561
// end ;
39553: GO 39447
39555: POP
39556: POP
// AddToLog ( ]; ) ;
39557: LD_STRING ];
39559: PPUSH
39560: CALL_OW 561
// end ;
39564: LD_VAR 0 2
39568: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39569: LD_INT 0
39571: PPUSH
39572: PPUSH
39573: PPUSH
39574: PPUSH
39575: PPUSH
// if not area or not rate or not max then
39576: LD_VAR 0 1
39580: NOT
39581: PUSH
39582: LD_VAR 0 2
39586: NOT
39587: OR
39588: PUSH
39589: LD_VAR 0 4
39593: NOT
39594: OR
39595: IFFALSE 39599
// exit ;
39597: GO 39791
// while 1 do
39599: LD_INT 1
39601: IFFALSE 39791
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39603: LD_ADDR_VAR 0 9
39607: PUSH
39608: LD_VAR 0 1
39612: PPUSH
39613: LD_INT 1
39615: PPUSH
39616: CALL_OW 287
39620: PUSH
39621: LD_INT 10
39623: MUL
39624: ST_TO_ADDR
// r := rate / 10 ;
39625: LD_ADDR_VAR 0 7
39629: PUSH
39630: LD_VAR 0 2
39634: PUSH
39635: LD_INT 10
39637: DIVREAL
39638: ST_TO_ADDR
// time := 1 1$00 ;
39639: LD_ADDR_VAR 0 8
39643: PUSH
39644: LD_INT 2100
39646: ST_TO_ADDR
// if amount < min then
39647: LD_VAR 0 9
39651: PUSH
39652: LD_VAR 0 3
39656: LESS
39657: IFFALSE 39675
// r := r * 2 else
39659: LD_ADDR_VAR 0 7
39663: PUSH
39664: LD_VAR 0 7
39668: PUSH
39669: LD_INT 2
39671: MUL
39672: ST_TO_ADDR
39673: GO 39701
// if amount > max then
39675: LD_VAR 0 9
39679: PUSH
39680: LD_VAR 0 4
39684: GREATER
39685: IFFALSE 39701
// r := r / 2 ;
39687: LD_ADDR_VAR 0 7
39691: PUSH
39692: LD_VAR 0 7
39696: PUSH
39697: LD_INT 2
39699: DIVREAL
39700: ST_TO_ADDR
// time := time / r ;
39701: LD_ADDR_VAR 0 8
39705: PUSH
39706: LD_VAR 0 8
39710: PUSH
39711: LD_VAR 0 7
39715: DIVREAL
39716: ST_TO_ADDR
// if time < 0 then
39717: LD_VAR 0 8
39721: PUSH
39722: LD_INT 0
39724: LESS
39725: IFFALSE 39742
// time := time * - 1 ;
39727: LD_ADDR_VAR 0 8
39731: PUSH
39732: LD_VAR 0 8
39736: PUSH
39737: LD_INT 1
39739: NEG
39740: MUL
39741: ST_TO_ADDR
// wait ( time ) ;
39742: LD_VAR 0 8
39746: PPUSH
39747: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
39751: LD_INT 35
39753: PPUSH
39754: LD_INT 875
39756: PPUSH
39757: CALL_OW 12
39761: PPUSH
39762: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39766: LD_INT 1
39768: PPUSH
39769: LD_INT 5
39771: PPUSH
39772: CALL_OW 12
39776: PPUSH
39777: LD_VAR 0 1
39781: PPUSH
39782: LD_INT 1
39784: PPUSH
39785: CALL_OW 55
// end ;
39789: GO 39599
// end ;
39791: LD_VAR 0 5
39795: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39796: LD_INT 0
39798: PPUSH
39799: PPUSH
39800: PPUSH
39801: PPUSH
39802: PPUSH
39803: PPUSH
39804: PPUSH
39805: PPUSH
// if not turrets or not factories then
39806: LD_VAR 0 1
39810: NOT
39811: PUSH
39812: LD_VAR 0 2
39816: NOT
39817: OR
39818: IFFALSE 39822
// exit ;
39820: GO 40129
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39822: LD_ADDR_VAR 0 10
39826: PUSH
39827: LD_INT 5
39829: PUSH
39830: LD_INT 6
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 2
39839: PUSH
39840: LD_INT 4
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 3
39849: PUSH
39850: LD_INT 5
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 24
39864: PUSH
39865: LD_INT 25
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 23
39874: PUSH
39875: LD_INT 27
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 42
39888: PUSH
39889: LD_INT 43
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 44
39898: PUSH
39899: LD_INT 46
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 45
39908: PUSH
39909: LD_INT 47
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: LIST
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: LIST
39925: ST_TO_ADDR
// result := [ ] ;
39926: LD_ADDR_VAR 0 3
39930: PUSH
39931: EMPTY
39932: ST_TO_ADDR
// for i in turrets do
39933: LD_ADDR_VAR 0 4
39937: PUSH
39938: LD_VAR 0 1
39942: PUSH
39943: FOR_IN
39944: IFFALSE 40127
// begin nat := GetNation ( i ) ;
39946: LD_ADDR_VAR 0 7
39950: PUSH
39951: LD_VAR 0 4
39955: PPUSH
39956: CALL_OW 248
39960: ST_TO_ADDR
// weapon := 0 ;
39961: LD_ADDR_VAR 0 8
39965: PUSH
39966: LD_INT 0
39968: ST_TO_ADDR
// if not nat then
39969: LD_VAR 0 7
39973: NOT
39974: IFFALSE 39978
// continue ;
39976: GO 39943
// for j in list [ nat ] do
39978: LD_ADDR_VAR 0 5
39982: PUSH
39983: LD_VAR 0 10
39987: PUSH
39988: LD_VAR 0 7
39992: ARRAY
39993: PUSH
39994: FOR_IN
39995: IFFALSE 40036
// if GetBWeapon ( i ) = j [ 1 ] then
39997: LD_VAR 0 4
40001: PPUSH
40002: CALL_OW 269
40006: PUSH
40007: LD_VAR 0 5
40011: PUSH
40012: LD_INT 1
40014: ARRAY
40015: EQUAL
40016: IFFALSE 40034
// begin weapon := j [ 2 ] ;
40018: LD_ADDR_VAR 0 8
40022: PUSH
40023: LD_VAR 0 5
40027: PUSH
40028: LD_INT 2
40030: ARRAY
40031: ST_TO_ADDR
// break ;
40032: GO 40036
// end ;
40034: GO 39994
40036: POP
40037: POP
// if not weapon then
40038: LD_VAR 0 8
40042: NOT
40043: IFFALSE 40047
// continue ;
40045: GO 39943
// for k in factories do
40047: LD_ADDR_VAR 0 6
40051: PUSH
40052: LD_VAR 0 2
40056: PUSH
40057: FOR_IN
40058: IFFALSE 40123
// begin weapons := AvailableWeaponList ( k ) ;
40060: LD_ADDR_VAR 0 9
40064: PUSH
40065: LD_VAR 0 6
40069: PPUSH
40070: CALL_OW 478
40074: ST_TO_ADDR
// if not weapons then
40075: LD_VAR 0 9
40079: NOT
40080: IFFALSE 40084
// continue ;
40082: GO 40057
// if weapon in weapons then
40084: LD_VAR 0 8
40088: PUSH
40089: LD_VAR 0 9
40093: IN
40094: IFFALSE 40121
// begin result := [ i , weapon ] ;
40096: LD_ADDR_VAR 0 3
40100: PUSH
40101: LD_VAR 0 4
40105: PUSH
40106: LD_VAR 0 8
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: ST_TO_ADDR
// exit ;
40115: POP
40116: POP
40117: POP
40118: POP
40119: GO 40129
// end ; end ;
40121: GO 40057
40123: POP
40124: POP
// end ;
40125: GO 39943
40127: POP
40128: POP
// end ;
40129: LD_VAR 0 3
40133: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40134: LD_INT 0
40136: PPUSH
// if not side or side > 8 then
40137: LD_VAR 0 3
40141: NOT
40142: PUSH
40143: LD_VAR 0 3
40147: PUSH
40148: LD_INT 8
40150: GREATER
40151: OR
40152: IFFALSE 40156
// exit ;
40154: GO 40215
// if not range then
40156: LD_VAR 0 4
40160: NOT
40161: IFFALSE 40172
// range := - 12 ;
40163: LD_ADDR_VAR 0 4
40167: PUSH
40168: LD_INT 12
40170: NEG
40171: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40172: LD_VAR 0 1
40176: PPUSH
40177: LD_VAR 0 2
40181: PPUSH
40182: LD_VAR 0 3
40186: PPUSH
40187: LD_VAR 0 4
40191: PPUSH
40192: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40196: LD_VAR 0 1
40200: PPUSH
40201: LD_VAR 0 2
40205: PPUSH
40206: LD_VAR 0 3
40210: PPUSH
40211: CALL_OW 331
// end ;
40215: LD_VAR 0 5
40219: RET
// export function Video ( mode ) ; begin
40220: LD_INT 0
40222: PPUSH
// ingame_video = mode ;
40223: LD_ADDR_OWVAR 52
40227: PUSH
40228: LD_VAR 0 1
40232: ST_TO_ADDR
// interface_hidden = mode ;
40233: LD_ADDR_OWVAR 54
40237: PUSH
40238: LD_VAR 0 1
40242: ST_TO_ADDR
// end ;
40243: LD_VAR 0 2
40247: RET
// export function Join ( array , element ) ; begin
40248: LD_INT 0
40250: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40251: LD_ADDR_VAR 0 3
40255: PUSH
40256: LD_VAR 0 1
40260: PPUSH
40261: LD_VAR 0 1
40265: PUSH
40266: LD_INT 1
40268: PLUS
40269: PPUSH
40270: LD_VAR 0 2
40274: PPUSH
40275: CALL_OW 1
40279: ST_TO_ADDR
// end ;
40280: LD_VAR 0 3
40284: RET
// export function JoinUnion ( array , element ) ; begin
40285: LD_INT 0
40287: PPUSH
// result := array union element ;
40288: LD_ADDR_VAR 0 3
40292: PUSH
40293: LD_VAR 0 1
40297: PUSH
40298: LD_VAR 0 2
40302: UNION
40303: ST_TO_ADDR
// end ;
40304: LD_VAR 0 3
40308: RET
// export function GetBehemoths ( side ) ; begin
40309: LD_INT 0
40311: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
40312: LD_ADDR_VAR 0 2
40316: PUSH
40317: LD_INT 22
40319: PUSH
40320: LD_VAR 0 1
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 31
40331: PUSH
40332: LD_INT 25
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PPUSH
40343: CALL_OW 69
40347: ST_TO_ADDR
// end ;
40348: LD_VAR 0 2
40352: RET
// export function Shuffle ( array ) ; var i , index ; begin
40353: LD_INT 0
40355: PPUSH
40356: PPUSH
40357: PPUSH
// result := [ ] ;
40358: LD_ADDR_VAR 0 2
40362: PUSH
40363: EMPTY
40364: ST_TO_ADDR
// if not array then
40365: LD_VAR 0 1
40369: NOT
40370: IFFALSE 40374
// exit ;
40372: GO 40473
// Randomize ;
40374: CALL_OW 10
// for i = array downto 1 do
40378: LD_ADDR_VAR 0 3
40382: PUSH
40383: DOUBLE
40384: LD_VAR 0 1
40388: INC
40389: ST_TO_ADDR
40390: LD_INT 1
40392: PUSH
40393: FOR_DOWNTO
40394: IFFALSE 40471
// begin index := rand ( 1 , array ) ;
40396: LD_ADDR_VAR 0 4
40400: PUSH
40401: LD_INT 1
40403: PPUSH
40404: LD_VAR 0 1
40408: PPUSH
40409: CALL_OW 12
40413: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40414: LD_ADDR_VAR 0 2
40418: PUSH
40419: LD_VAR 0 2
40423: PPUSH
40424: LD_VAR 0 2
40428: PUSH
40429: LD_INT 1
40431: PLUS
40432: PPUSH
40433: LD_VAR 0 1
40437: PUSH
40438: LD_VAR 0 4
40442: ARRAY
40443: PPUSH
40444: CALL_OW 2
40448: ST_TO_ADDR
// array := Delete ( array , index ) ;
40449: LD_ADDR_VAR 0 1
40453: PUSH
40454: LD_VAR 0 1
40458: PPUSH
40459: LD_VAR 0 4
40463: PPUSH
40464: CALL_OW 3
40468: ST_TO_ADDR
// end ;
40469: GO 40393
40471: POP
40472: POP
// end ;
40473: LD_VAR 0 2
40477: RET
// export function GetBaseMaterials ( base ) ; begin
40478: LD_INT 0
40480: PPUSH
// result := [ 0 , 0 , 0 ] ;
40481: LD_ADDR_VAR 0 2
40485: PUSH
40486: LD_INT 0
40488: PUSH
40489: LD_INT 0
40491: PUSH
40492: LD_INT 0
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: LIST
40499: ST_TO_ADDR
// if not base then
40500: LD_VAR 0 1
40504: NOT
40505: IFFALSE 40509
// exit ;
40507: GO 40558
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40509: LD_ADDR_VAR 0 2
40513: PUSH
40514: LD_VAR 0 1
40518: PPUSH
40519: LD_INT 1
40521: PPUSH
40522: CALL_OW 275
40526: PUSH
40527: LD_VAR 0 1
40531: PPUSH
40532: LD_INT 2
40534: PPUSH
40535: CALL_OW 275
40539: PUSH
40540: LD_VAR 0 1
40544: PPUSH
40545: LD_INT 3
40547: PPUSH
40548: CALL_OW 275
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: LIST
40557: ST_TO_ADDR
// end ;
40558: LD_VAR 0 2
40562: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40563: LD_INT 0
40565: PPUSH
40566: PPUSH
// result := array ;
40567: LD_ADDR_VAR 0 3
40571: PUSH
40572: LD_VAR 0 1
40576: ST_TO_ADDR
// if size > 0 then
40577: LD_VAR 0 2
40581: PUSH
40582: LD_INT 0
40584: GREATER
40585: IFFALSE 40631
// for i := array downto size do
40587: LD_ADDR_VAR 0 4
40591: PUSH
40592: DOUBLE
40593: LD_VAR 0 1
40597: INC
40598: ST_TO_ADDR
40599: LD_VAR 0 2
40603: PUSH
40604: FOR_DOWNTO
40605: IFFALSE 40629
// result := Delete ( result , result ) ;
40607: LD_ADDR_VAR 0 3
40611: PUSH
40612: LD_VAR 0 3
40616: PPUSH
40617: LD_VAR 0 3
40621: PPUSH
40622: CALL_OW 3
40626: ST_TO_ADDR
40627: GO 40604
40629: POP
40630: POP
// end ;
40631: LD_VAR 0 3
40635: RET
// export function ComExit ( unit ) ; var tmp ; begin
40636: LD_INT 0
40638: PPUSH
40639: PPUSH
// if not IsInUnit ( unit ) then
40640: LD_VAR 0 1
40644: PPUSH
40645: CALL_OW 310
40649: NOT
40650: IFFALSE 40654
// exit ;
40652: GO 40714
// tmp := IsInUnit ( unit ) ;
40654: LD_ADDR_VAR 0 3
40658: PUSH
40659: LD_VAR 0 1
40663: PPUSH
40664: CALL_OW 310
40668: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40669: LD_VAR 0 3
40673: PPUSH
40674: CALL_OW 247
40678: PUSH
40679: LD_INT 2
40681: EQUAL
40682: IFFALSE 40695
// ComExitVehicle ( unit ) else
40684: LD_VAR 0 1
40688: PPUSH
40689: CALL_OW 121
40693: GO 40704
// ComExitBuilding ( unit ) ;
40695: LD_VAR 0 1
40699: PPUSH
40700: CALL_OW 122
// result := tmp ;
40704: LD_ADDR_VAR 0 2
40708: PUSH
40709: LD_VAR 0 3
40713: ST_TO_ADDR
// end ;
40714: LD_VAR 0 2
40718: RET
// export function ComExitAll ( units ) ; var i ; begin
40719: LD_INT 0
40721: PPUSH
40722: PPUSH
// if not units then
40723: LD_VAR 0 1
40727: NOT
40728: IFFALSE 40732
// exit ;
40730: GO 40758
// for i in units do
40732: LD_ADDR_VAR 0 3
40736: PUSH
40737: LD_VAR 0 1
40741: PUSH
40742: FOR_IN
40743: IFFALSE 40756
// ComExit ( i ) ;
40745: LD_VAR 0 3
40749: PPUSH
40750: CALL 40636 0 1
40754: GO 40742
40756: POP
40757: POP
// end ;
40758: LD_VAR 0 2
40762: RET
// export function ResetHc ; begin
40763: LD_INT 0
40765: PPUSH
// InitHc ;
40766: CALL_OW 19
// hc_importance := 0 ;
40770: LD_ADDR_OWVAR 32
40774: PUSH
40775: LD_INT 0
40777: ST_TO_ADDR
// end ;
40778: LD_VAR 0 1
40782: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
40783: LD_INT 0
40785: PPUSH
40786: PPUSH
40787: PPUSH
// _x := ( x1 + x2 ) div 2 ;
40788: LD_ADDR_VAR 0 6
40792: PUSH
40793: LD_VAR 0 1
40797: PUSH
40798: LD_VAR 0 3
40802: PLUS
40803: PUSH
40804: LD_INT 2
40806: DIV
40807: ST_TO_ADDR
// if _x < 0 then
40808: LD_VAR 0 6
40812: PUSH
40813: LD_INT 0
40815: LESS
40816: IFFALSE 40833
// _x := _x * - 1 ;
40818: LD_ADDR_VAR 0 6
40822: PUSH
40823: LD_VAR 0 6
40827: PUSH
40828: LD_INT 1
40830: NEG
40831: MUL
40832: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40833: LD_ADDR_VAR 0 7
40837: PUSH
40838: LD_VAR 0 2
40842: PUSH
40843: LD_VAR 0 4
40847: PLUS
40848: PUSH
40849: LD_INT 2
40851: DIV
40852: ST_TO_ADDR
// if _y < 0 then
40853: LD_VAR 0 7
40857: PUSH
40858: LD_INT 0
40860: LESS
40861: IFFALSE 40878
// _y := _y * - 1 ;
40863: LD_ADDR_VAR 0 7
40867: PUSH
40868: LD_VAR 0 7
40872: PUSH
40873: LD_INT 1
40875: NEG
40876: MUL
40877: ST_TO_ADDR
// result := [ _x , _y ] ;
40878: LD_ADDR_VAR 0 5
40882: PUSH
40883: LD_VAR 0 6
40887: PUSH
40888: LD_VAR 0 7
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: ST_TO_ADDR
// end ;
40897: LD_VAR 0 5
40901: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40902: LD_INT 0
40904: PPUSH
40905: PPUSH
40906: PPUSH
40907: PPUSH
// task := GetTaskList ( unit ) ;
40908: LD_ADDR_VAR 0 7
40912: PUSH
40913: LD_VAR 0 1
40917: PPUSH
40918: CALL_OW 437
40922: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40923: LD_VAR 0 7
40927: NOT
40928: PUSH
40929: LD_VAR 0 1
40933: PPUSH
40934: LD_VAR 0 2
40938: PPUSH
40939: CALL_OW 308
40943: NOT
40944: AND
40945: IFFALSE 40949
// exit ;
40947: GO 41067
// if IsInArea ( unit , area ) then
40949: LD_VAR 0 1
40953: PPUSH
40954: LD_VAR 0 2
40958: PPUSH
40959: CALL_OW 308
40963: IFFALSE 40981
// begin ComMoveToArea ( unit , goAway ) ;
40965: LD_VAR 0 1
40969: PPUSH
40970: LD_VAR 0 3
40974: PPUSH
40975: CALL_OW 113
// exit ;
40979: GO 41067
// end ; if task [ 1 ] [ 1 ] <> M then
40981: LD_VAR 0 7
40985: PUSH
40986: LD_INT 1
40988: ARRAY
40989: PUSH
40990: LD_INT 1
40992: ARRAY
40993: PUSH
40994: LD_STRING M
40996: NONEQUAL
40997: IFFALSE 41001
// exit ;
40999: GO 41067
// x := task [ 1 ] [ 2 ] ;
41001: LD_ADDR_VAR 0 5
41005: PUSH
41006: LD_VAR 0 7
41010: PUSH
41011: LD_INT 1
41013: ARRAY
41014: PUSH
41015: LD_INT 2
41017: ARRAY
41018: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41019: LD_ADDR_VAR 0 6
41023: PUSH
41024: LD_VAR 0 7
41028: PUSH
41029: LD_INT 1
41031: ARRAY
41032: PUSH
41033: LD_INT 3
41035: ARRAY
41036: ST_TO_ADDR
// if InArea ( x , y , area ) then
41037: LD_VAR 0 5
41041: PPUSH
41042: LD_VAR 0 6
41046: PPUSH
41047: LD_VAR 0 2
41051: PPUSH
41052: CALL_OW 309
41056: IFFALSE 41067
// ComStop ( unit ) ;
41058: LD_VAR 0 1
41062: PPUSH
41063: CALL_OW 141
// end ;
41067: LD_VAR 0 4
41071: RET
// export function Abs ( value ) ; begin
41072: LD_INT 0
41074: PPUSH
// result := value ;
41075: LD_ADDR_VAR 0 2
41079: PUSH
41080: LD_VAR 0 1
41084: ST_TO_ADDR
// if value < 0 then
41085: LD_VAR 0 1
41089: PUSH
41090: LD_INT 0
41092: LESS
41093: IFFALSE 41110
// result := value * - 1 ;
41095: LD_ADDR_VAR 0 2
41099: PUSH
41100: LD_VAR 0 1
41104: PUSH
41105: LD_INT 1
41107: NEG
41108: MUL
41109: ST_TO_ADDR
// end ;
41110: LD_VAR 0 2
41114: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41115: LD_INT 0
41117: PPUSH
41118: PPUSH
41119: PPUSH
41120: PPUSH
41121: PPUSH
41122: PPUSH
41123: PPUSH
41124: PPUSH
// if not unit or not building then
41125: LD_VAR 0 1
41129: NOT
41130: PUSH
41131: LD_VAR 0 2
41135: NOT
41136: OR
41137: IFFALSE 41141
// exit ;
41139: GO 41367
// x := GetX ( building ) ;
41141: LD_ADDR_VAR 0 4
41145: PUSH
41146: LD_VAR 0 2
41150: PPUSH
41151: CALL_OW 250
41155: ST_TO_ADDR
// y := GetY ( building ) ;
41156: LD_ADDR_VAR 0 6
41160: PUSH
41161: LD_VAR 0 2
41165: PPUSH
41166: CALL_OW 251
41170: ST_TO_ADDR
// d := GetDir ( building ) ;
41171: LD_ADDR_VAR 0 8
41175: PUSH
41176: LD_VAR 0 2
41180: PPUSH
41181: CALL_OW 254
41185: ST_TO_ADDR
// r := 4 ;
41186: LD_ADDR_VAR 0 9
41190: PUSH
41191: LD_INT 4
41193: ST_TO_ADDR
// for i := 1 to 5 do
41194: LD_ADDR_VAR 0 10
41198: PUSH
41199: DOUBLE
41200: LD_INT 1
41202: DEC
41203: ST_TO_ADDR
41204: LD_INT 5
41206: PUSH
41207: FOR_TO
41208: IFFALSE 41365
// begin _x := ShiftX ( x , d , r + i ) ;
41210: LD_ADDR_VAR 0 5
41214: PUSH
41215: LD_VAR 0 4
41219: PPUSH
41220: LD_VAR 0 8
41224: PPUSH
41225: LD_VAR 0 9
41229: PUSH
41230: LD_VAR 0 10
41234: PLUS
41235: PPUSH
41236: CALL_OW 272
41240: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41241: LD_ADDR_VAR 0 7
41245: PUSH
41246: LD_VAR 0 6
41250: PPUSH
41251: LD_VAR 0 8
41255: PPUSH
41256: LD_VAR 0 9
41260: PUSH
41261: LD_VAR 0 10
41265: PLUS
41266: PPUSH
41267: CALL_OW 273
41271: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41272: LD_VAR 0 5
41276: PPUSH
41277: LD_VAR 0 7
41281: PPUSH
41282: CALL_OW 488
41286: PUSH
41287: LD_VAR 0 5
41291: PPUSH
41292: LD_VAR 0 7
41296: PPUSH
41297: CALL_OW 428
41301: PPUSH
41302: CALL_OW 247
41306: PUSH
41307: LD_INT 3
41309: PUSH
41310: LD_INT 2
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: IN
41317: NOT
41318: AND
41319: IFFALSE 41363
// begin ComMoveXY ( unit , _x , _y ) ;
41321: LD_VAR 0 1
41325: PPUSH
41326: LD_VAR 0 5
41330: PPUSH
41331: LD_VAR 0 7
41335: PPUSH
41336: CALL_OW 111
// result := [ _x , _y ] ;
41340: LD_ADDR_VAR 0 3
41344: PUSH
41345: LD_VAR 0 5
41349: PUSH
41350: LD_VAR 0 7
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: ST_TO_ADDR
// exit ;
41359: POP
41360: POP
41361: GO 41367
// end ; end ;
41363: GO 41207
41365: POP
41366: POP
// end ;
41367: LD_VAR 0 3
41371: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41372: LD_INT 0
41374: PPUSH
41375: PPUSH
41376: PPUSH
// result := 0 ;
41377: LD_ADDR_VAR 0 3
41381: PUSH
41382: LD_INT 0
41384: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41385: LD_VAR 0 1
41389: PUSH
41390: LD_INT 0
41392: LESS
41393: PUSH
41394: LD_VAR 0 1
41398: PUSH
41399: LD_INT 8
41401: GREATER
41402: OR
41403: PUSH
41404: LD_VAR 0 2
41408: PUSH
41409: LD_INT 0
41411: LESS
41412: OR
41413: PUSH
41414: LD_VAR 0 2
41418: PUSH
41419: LD_INT 8
41421: GREATER
41422: OR
41423: IFFALSE 41427
// exit ;
41425: GO 41502
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41427: LD_ADDR_VAR 0 4
41431: PUSH
41432: LD_INT 22
41434: PUSH
41435: LD_VAR 0 2
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PPUSH
41444: CALL_OW 69
41448: PUSH
41449: FOR_IN
41450: IFFALSE 41500
// begin un := UnitShoot ( i ) ;
41452: LD_ADDR_VAR 0 5
41456: PUSH
41457: LD_VAR 0 4
41461: PPUSH
41462: CALL_OW 504
41466: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41467: LD_VAR 0 5
41471: PPUSH
41472: CALL_OW 255
41476: PUSH
41477: LD_VAR 0 1
41481: EQUAL
41482: IFFALSE 41498
// begin result := un ;
41484: LD_ADDR_VAR 0 3
41488: PUSH
41489: LD_VAR 0 5
41493: ST_TO_ADDR
// exit ;
41494: POP
41495: POP
41496: GO 41502
// end ; end ;
41498: GO 41449
41500: POP
41501: POP
// end ;
41502: LD_VAR 0 3
41506: RET
// export function GetCargoBay ( units ) ; begin
41507: LD_INT 0
41509: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41510: LD_ADDR_VAR 0 2
41514: PUSH
41515: LD_VAR 0 1
41519: PPUSH
41520: LD_INT 2
41522: PUSH
41523: LD_INT 34
41525: PUSH
41526: LD_INT 12
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 34
41535: PUSH
41536: LD_INT 51
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 34
41545: PUSH
41546: LD_INT 32
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 34
41555: PUSH
41556: LD_EXP 87
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: PPUSH
41572: CALL_OW 72
41576: ST_TO_ADDR
// end ;
41577: LD_VAR 0 2
41581: RET
// export function Negate ( value ) ; begin
41582: LD_INT 0
41584: PPUSH
// result := not value ;
41585: LD_ADDR_VAR 0 2
41589: PUSH
41590: LD_VAR 0 1
41594: NOT
41595: ST_TO_ADDR
// end ;
41596: LD_VAR 0 2
41600: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
41601: LD_INT 0
41603: PPUSH
// if x1 = x2 then
41604: LD_VAR 0 1
41608: PUSH
41609: LD_VAR 0 3
41613: EQUAL
41614: IFFALSE 41648
// begin if y1 > y2 then
41616: LD_VAR 0 2
41620: PUSH
41621: LD_VAR 0 4
41625: GREATER
41626: IFFALSE 41638
// result := 0 else
41628: LD_ADDR_VAR 0 5
41632: PUSH
41633: LD_INT 0
41635: ST_TO_ADDR
41636: GO 41646
// result := 3 ;
41638: LD_ADDR_VAR 0 5
41642: PUSH
41643: LD_INT 3
41645: ST_TO_ADDR
// exit ;
41646: GO 41734
// end ; if y1 = y2 then
41648: LD_VAR 0 2
41652: PUSH
41653: LD_VAR 0 4
41657: EQUAL
41658: IFFALSE 41692
// begin if x1 > x2 then
41660: LD_VAR 0 1
41664: PUSH
41665: LD_VAR 0 3
41669: GREATER
41670: IFFALSE 41682
// result := 1 else
41672: LD_ADDR_VAR 0 5
41676: PUSH
41677: LD_INT 1
41679: ST_TO_ADDR
41680: GO 41690
// result := 4 ;
41682: LD_ADDR_VAR 0 5
41686: PUSH
41687: LD_INT 4
41689: ST_TO_ADDR
// exit ;
41690: GO 41734
// end ; if x1 > x2 and y1 > y2 then
41692: LD_VAR 0 1
41696: PUSH
41697: LD_VAR 0 3
41701: GREATER
41702: PUSH
41703: LD_VAR 0 2
41707: PUSH
41708: LD_VAR 0 4
41712: GREATER
41713: AND
41714: IFFALSE 41726
// result := 2 else
41716: LD_ADDR_VAR 0 5
41720: PUSH
41721: LD_INT 2
41723: ST_TO_ADDR
41724: GO 41734
// result := 5 ;
41726: LD_ADDR_VAR 0 5
41730: PUSH
41731: LD_INT 5
41733: ST_TO_ADDR
// end ;
41734: LD_VAR 0 5
41738: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41739: LD_INT 0
41741: PPUSH
41742: PPUSH
// if not driver or not IsInUnit ( driver ) then
41743: LD_VAR 0 1
41747: NOT
41748: PUSH
41749: LD_VAR 0 1
41753: PPUSH
41754: CALL_OW 310
41758: NOT
41759: OR
41760: IFFALSE 41764
// exit ;
41762: GO 41854
// vehicle := IsInUnit ( driver ) ;
41764: LD_ADDR_VAR 0 3
41768: PUSH
41769: LD_VAR 0 1
41773: PPUSH
41774: CALL_OW 310
41778: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41779: LD_VAR 0 1
41783: PPUSH
41784: LD_STRING \
41786: PUSH
41787: LD_INT 0
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: LD_INT 0
41798: PUSH
41799: LD_INT 0
41801: PUSH
41802: LD_INT 0
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: PUSH
41814: LD_STRING E
41816: PUSH
41817: LD_INT 0
41819: PUSH
41820: LD_INT 0
41822: PUSH
41823: LD_VAR 0 3
41827: PUSH
41828: LD_INT 0
41830: PUSH
41831: LD_INT 0
41833: PUSH
41834: LD_INT 0
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PPUSH
41850: CALL_OW 446
// end ;
41854: LD_VAR 0 2
41858: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41859: LD_INT 0
41861: PPUSH
41862: PPUSH
// if not driver or not IsInUnit ( driver ) then
41863: LD_VAR 0 1
41867: NOT
41868: PUSH
41869: LD_VAR 0 1
41873: PPUSH
41874: CALL_OW 310
41878: NOT
41879: OR
41880: IFFALSE 41884
// exit ;
41882: GO 41974
// vehicle := IsInUnit ( driver ) ;
41884: LD_ADDR_VAR 0 3
41888: PUSH
41889: LD_VAR 0 1
41893: PPUSH
41894: CALL_OW 310
41898: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41899: LD_VAR 0 1
41903: PPUSH
41904: LD_STRING \
41906: PUSH
41907: LD_INT 0
41909: PUSH
41910: LD_INT 0
41912: PUSH
41913: LD_INT 0
41915: PUSH
41916: LD_INT 0
41918: PUSH
41919: LD_INT 0
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: PUSH
41934: LD_STRING E
41936: PUSH
41937: LD_INT 0
41939: PUSH
41940: LD_INT 0
41942: PUSH
41943: LD_VAR 0 3
41947: PUSH
41948: LD_INT 0
41950: PUSH
41951: LD_INT 0
41953: PUSH
41954: LD_INT 0
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PPUSH
41970: CALL_OW 447
// end ;
41974: LD_VAR 0 2
41978: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41979: LD_INT 0
41981: PPUSH
41982: PPUSH
41983: PPUSH
// tmp := [ ] ;
41984: LD_ADDR_VAR 0 5
41988: PUSH
41989: EMPTY
41990: ST_TO_ADDR
// for i in units do
41991: LD_ADDR_VAR 0 4
41995: PUSH
41996: LD_VAR 0 1
42000: PUSH
42001: FOR_IN
42002: IFFALSE 42040
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42004: LD_ADDR_VAR 0 5
42008: PUSH
42009: LD_VAR 0 5
42013: PPUSH
42014: LD_VAR 0 5
42018: PUSH
42019: LD_INT 1
42021: PLUS
42022: PPUSH
42023: LD_VAR 0 4
42027: PPUSH
42028: CALL_OW 256
42032: PPUSH
42033: CALL_OW 2
42037: ST_TO_ADDR
42038: GO 42001
42040: POP
42041: POP
// if not tmp then
42042: LD_VAR 0 5
42046: NOT
42047: IFFALSE 42051
// exit ;
42049: GO 42099
// if asc then
42051: LD_VAR 0 2
42055: IFFALSE 42079
// result := SortListByListAsc ( units , tmp ) else
42057: LD_ADDR_VAR 0 3
42061: PUSH
42062: LD_VAR 0 1
42066: PPUSH
42067: LD_VAR 0 5
42071: PPUSH
42072: CALL_OW 76
42076: ST_TO_ADDR
42077: GO 42099
// result := SortListByListDesc ( units , tmp ) ;
42079: LD_ADDR_VAR 0 3
42083: PUSH
42084: LD_VAR 0 1
42088: PPUSH
42089: LD_VAR 0 5
42093: PPUSH
42094: CALL_OW 77
42098: ST_TO_ADDR
// end ;
42099: LD_VAR 0 3
42103: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42104: LD_INT 0
42106: PPUSH
42107: PPUSH
// task := GetTaskList ( mech ) ;
42108: LD_ADDR_VAR 0 4
42112: PUSH
42113: LD_VAR 0 1
42117: PPUSH
42118: CALL_OW 437
42122: ST_TO_ADDR
// if not task then
42123: LD_VAR 0 4
42127: NOT
42128: IFFALSE 42132
// exit ;
42130: GO 42174
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42132: LD_ADDR_VAR 0 3
42136: PUSH
42137: LD_VAR 0 4
42141: PUSH
42142: LD_INT 1
42144: ARRAY
42145: PUSH
42146: LD_INT 1
42148: ARRAY
42149: PUSH
42150: LD_STRING r
42152: EQUAL
42153: PUSH
42154: LD_VAR 0 4
42158: PUSH
42159: LD_INT 1
42161: ARRAY
42162: PUSH
42163: LD_INT 4
42165: ARRAY
42166: PUSH
42167: LD_VAR 0 2
42171: EQUAL
42172: AND
42173: ST_TO_ADDR
// end ;
42174: LD_VAR 0 3
42178: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42179: LD_INT 0
42181: PPUSH
// SetDir ( unit , d ) ;
42182: LD_VAR 0 1
42186: PPUSH
42187: LD_VAR 0 4
42191: PPUSH
42192: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42196: LD_VAR 0 1
42200: PPUSH
42201: LD_VAR 0 2
42205: PPUSH
42206: LD_VAR 0 3
42210: PPUSH
42211: LD_VAR 0 5
42215: PPUSH
42216: CALL_OW 48
// end ;
42220: LD_VAR 0 6
42224: RET
// export function ToNaturalNumber ( number ) ; begin
42225: LD_INT 0
42227: PPUSH
// result := number div 1 ;
42228: LD_ADDR_VAR 0 2
42232: PUSH
42233: LD_VAR 0 1
42237: PUSH
42238: LD_INT 1
42240: DIV
42241: ST_TO_ADDR
// if number < 0 then
42242: LD_VAR 0 1
42246: PUSH
42247: LD_INT 0
42249: LESS
42250: IFFALSE 42260
// result := 0 ;
42252: LD_ADDR_VAR 0 2
42256: PUSH
42257: LD_INT 0
42259: ST_TO_ADDR
// end ;
42260: LD_VAR 0 2
42264: RET
// export function SortByClass ( units , class ) ; var un ; begin
42265: LD_INT 0
42267: PPUSH
42268: PPUSH
// if not units or not class then
42269: LD_VAR 0 1
42273: NOT
42274: PUSH
42275: LD_VAR 0 2
42279: NOT
42280: OR
42281: IFFALSE 42285
// exit ;
42283: GO 42380
// result := [ ] ;
42285: LD_ADDR_VAR 0 3
42289: PUSH
42290: EMPTY
42291: ST_TO_ADDR
// for un in units do
42292: LD_ADDR_VAR 0 4
42296: PUSH
42297: LD_VAR 0 1
42301: PUSH
42302: FOR_IN
42303: IFFALSE 42378
// if GetClass ( un ) = class then
42305: LD_VAR 0 4
42309: PPUSH
42310: CALL_OW 257
42314: PUSH
42315: LD_VAR 0 2
42319: EQUAL
42320: IFFALSE 42347
// result := Insert ( result , 1 , un ) else
42322: LD_ADDR_VAR 0 3
42326: PUSH
42327: LD_VAR 0 3
42331: PPUSH
42332: LD_INT 1
42334: PPUSH
42335: LD_VAR 0 4
42339: PPUSH
42340: CALL_OW 2
42344: ST_TO_ADDR
42345: GO 42376
// result := Replace ( result , result + 1 , un ) ;
42347: LD_ADDR_VAR 0 3
42351: PUSH
42352: LD_VAR 0 3
42356: PPUSH
42357: LD_VAR 0 3
42361: PUSH
42362: LD_INT 1
42364: PLUS
42365: PPUSH
42366: LD_VAR 0 4
42370: PPUSH
42371: CALL_OW 1
42375: ST_TO_ADDR
42376: GO 42302
42378: POP
42379: POP
// end ; end_of_file
42380: LD_VAR 0 3
42384: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
42385: LD_VAR 0 1
42389: PUSH
42390: LD_INT 200
42392: DOUBLE
42393: GREATEREQUAL
42394: IFFALSE 42402
42396: LD_INT 299
42398: DOUBLE
42399: LESSEQUAL
42400: IFTRUE 42404
42402: GO 42436
42404: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
42405: LD_VAR 0 1
42409: PPUSH
42410: LD_VAR 0 2
42414: PPUSH
42415: LD_VAR 0 3
42419: PPUSH
42420: LD_VAR 0 4
42424: PPUSH
42425: LD_VAR 0 5
42429: PPUSH
42430: CALL 42680 0 5
42434: GO 42513
42436: LD_INT 300
42438: DOUBLE
42439: GREATEREQUAL
42440: IFFALSE 42448
42442: LD_INT 399
42444: DOUBLE
42445: LESSEQUAL
42446: IFTRUE 42450
42448: GO 42512
42450: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
42451: LD_VAR 0 1
42455: PPUSH
42456: LD_VAR 0 2
42460: PPUSH
42461: LD_VAR 0 3
42465: PPUSH
42466: LD_VAR 0 4
42470: PPUSH
42471: LD_VAR 0 5
42475: PPUSH
42476: LD_VAR 0 6
42480: PPUSH
42481: LD_VAR 0 7
42485: PPUSH
42486: LD_VAR 0 8
42490: PPUSH
42491: LD_VAR 0 9
42495: PPUSH
42496: LD_VAR 0 10
42500: PPUSH
42501: LD_VAR 0 11
42505: PPUSH
42506: CALL 57755 0 11
42510: GO 42513
42512: POP
// end ;
42513: PPOPN 11
42515: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
42516: LD_VAR 0 1
42520: PPUSH
42521: LD_VAR 0 2
42525: PPUSH
42526: LD_VAR 0 3
42530: PPUSH
42531: LD_VAR 0 4
42535: PPUSH
42536: LD_VAR 0 5
42540: PPUSH
42541: CALL 42662 0 5
// end ; end_of_file
42545: PPOPN 5
42547: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
42548: LD_INT 0
42550: PPUSH
42551: PPUSH
42552: PPUSH
42553: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
42554: LD_VAR 0 1
42558: PPUSH
42559: CALL_OW 264
42563: PUSH
42564: LD_EXP 90
42568: EQUAL
42569: IFFALSE 42641
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
42571: LD_INT 68
42573: PPUSH
42574: LD_VAR 0 1
42578: PPUSH
42579: CALL_OW 255
42583: PPUSH
42584: CALL_OW 321
42588: PUSH
42589: LD_INT 2
42591: EQUAL
42592: IFFALSE 42604
// eff := 70 else
42594: LD_ADDR_VAR 0 4
42598: PUSH
42599: LD_INT 70
42601: ST_TO_ADDR
42602: GO 42612
// eff := 30 ;
42604: LD_ADDR_VAR 0 4
42608: PUSH
42609: LD_INT 30
42611: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
42612: LD_VAR 0 1
42616: PPUSH
42617: CALL_OW 250
42621: PPUSH
42622: LD_VAR 0 1
42626: PPUSH
42627: CALL_OW 251
42631: PPUSH
42632: LD_VAR 0 4
42636: PPUSH
42637: CALL_OW 495
// end ; end ;
42641: LD_VAR 0 2
42645: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
42646: LD_INT 0
42648: PPUSH
// end ;
42649: LD_VAR 0 4
42653: RET
// export function SOS_Command ( cmd ) ; begin
42654: LD_INT 0
42656: PPUSH
// end ;
42657: LD_VAR 0 2
42661: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
42662: LD_INT 0
42664: PPUSH
// if cmd = 121 then
42665: LD_VAR 0 1
42669: PUSH
42670: LD_INT 121
42672: EQUAL
42673: IFFALSE 42675
// end ;
42675: LD_VAR 0 6
42679: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
42680: LD_INT 0
42682: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
42683: LD_VAR 0 1
42687: PUSH
42688: LD_INT 250
42690: EQUAL
42691: PUSH
42692: LD_VAR 0 2
42696: PPUSH
42697: CALL_OW 264
42701: PUSH
42702: LD_EXP 93
42706: EQUAL
42707: AND
42708: IFFALSE 42729
// MinerPlaceMine ( unit , x , y ) ;
42710: LD_VAR 0 2
42714: PPUSH
42715: LD_VAR 0 4
42719: PPUSH
42720: LD_VAR 0 5
42724: PPUSH
42725: CALL 45078 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
42729: LD_VAR 0 1
42733: PUSH
42734: LD_INT 251
42736: EQUAL
42737: PUSH
42738: LD_VAR 0 2
42742: PPUSH
42743: CALL_OW 264
42747: PUSH
42748: LD_EXP 93
42752: EQUAL
42753: AND
42754: IFFALSE 42775
// MinerDetonateMine ( unit , x , y ) ;
42756: LD_VAR 0 2
42760: PPUSH
42761: LD_VAR 0 4
42765: PPUSH
42766: LD_VAR 0 5
42770: PPUSH
42771: CALL 45355 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
42775: LD_VAR 0 1
42779: PUSH
42780: LD_INT 252
42782: EQUAL
42783: PUSH
42784: LD_VAR 0 2
42788: PPUSH
42789: CALL_OW 264
42793: PUSH
42794: LD_EXP 93
42798: EQUAL
42799: AND
42800: IFFALSE 42821
// MinerCreateMinefield ( unit , x , y ) ;
42802: LD_VAR 0 2
42806: PPUSH
42807: LD_VAR 0 4
42811: PPUSH
42812: LD_VAR 0 5
42816: PPUSH
42817: CALL 45772 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
42821: LD_VAR 0 1
42825: PUSH
42826: LD_INT 253
42828: EQUAL
42829: PUSH
42830: LD_VAR 0 2
42834: PPUSH
42835: CALL_OW 257
42839: PUSH
42840: LD_INT 5
42842: EQUAL
42843: AND
42844: IFFALSE 42865
// ComBinocular ( unit , x , y ) ;
42846: LD_VAR 0 2
42850: PPUSH
42851: LD_VAR 0 4
42855: PPUSH
42856: LD_VAR 0 5
42860: PPUSH
42861: CALL 46143 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
42865: LD_VAR 0 1
42869: PUSH
42870: LD_INT 254
42872: EQUAL
42873: PUSH
42874: LD_VAR 0 2
42878: PPUSH
42879: CALL_OW 264
42883: PUSH
42884: LD_EXP 88
42888: EQUAL
42889: AND
42890: PUSH
42891: LD_VAR 0 3
42895: PPUSH
42896: CALL_OW 263
42900: PUSH
42901: LD_INT 3
42903: EQUAL
42904: AND
42905: IFFALSE 42921
// HackDestroyVehicle ( unit , selectedUnit ) ;
42907: LD_VAR 0 2
42911: PPUSH
42912: LD_VAR 0 3
42916: PPUSH
42917: CALL 44438 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
42921: LD_VAR 0 1
42925: PUSH
42926: LD_INT 255
42928: EQUAL
42929: PUSH
42930: LD_VAR 0 2
42934: PPUSH
42935: CALL_OW 264
42939: PUSH
42940: LD_INT 14
42942: PUSH
42943: LD_INT 53
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: IN
42950: AND
42951: PUSH
42952: LD_VAR 0 4
42956: PPUSH
42957: LD_VAR 0 5
42961: PPUSH
42962: CALL_OW 488
42966: AND
42967: IFFALSE 42991
// CutTreeXYR ( unit , x , y , 12 ) ;
42969: LD_VAR 0 2
42973: PPUSH
42974: LD_VAR 0 4
42978: PPUSH
42979: LD_VAR 0 5
42983: PPUSH
42984: LD_INT 12
42986: PPUSH
42987: CALL 43004 0 4
// end ;
42991: LD_VAR 0 6
42995: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
42996: LD_INT 0
42998: PPUSH
// end ;
42999: LD_VAR 0 4
43003: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
43004: LD_INT 0
43006: PPUSH
43007: PPUSH
43008: PPUSH
43009: PPUSH
43010: PPUSH
43011: PPUSH
43012: PPUSH
43013: PPUSH
43014: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
43015: LD_VAR 0 1
43019: NOT
43020: PUSH
43021: LD_VAR 0 2
43025: PPUSH
43026: LD_VAR 0 3
43030: PPUSH
43031: CALL_OW 488
43035: NOT
43036: OR
43037: PUSH
43038: LD_VAR 0 4
43042: NOT
43043: OR
43044: IFFALSE 43048
// exit ;
43046: GO 43388
// list := [ ] ;
43048: LD_ADDR_VAR 0 13
43052: PUSH
43053: EMPTY
43054: ST_TO_ADDR
// if x - r < 0 then
43055: LD_VAR 0 2
43059: PUSH
43060: LD_VAR 0 4
43064: MINUS
43065: PUSH
43066: LD_INT 0
43068: LESS
43069: IFFALSE 43081
// min_x := 0 else
43071: LD_ADDR_VAR 0 7
43075: PUSH
43076: LD_INT 0
43078: ST_TO_ADDR
43079: GO 43097
// min_x := x - r ;
43081: LD_ADDR_VAR 0 7
43085: PUSH
43086: LD_VAR 0 2
43090: PUSH
43091: LD_VAR 0 4
43095: MINUS
43096: ST_TO_ADDR
// if y - r < 0 then
43097: LD_VAR 0 3
43101: PUSH
43102: LD_VAR 0 4
43106: MINUS
43107: PUSH
43108: LD_INT 0
43110: LESS
43111: IFFALSE 43123
// min_y := 0 else
43113: LD_ADDR_VAR 0 8
43117: PUSH
43118: LD_INT 0
43120: ST_TO_ADDR
43121: GO 43139
// min_y := y - r ;
43123: LD_ADDR_VAR 0 8
43127: PUSH
43128: LD_VAR 0 3
43132: PUSH
43133: LD_VAR 0 4
43137: MINUS
43138: ST_TO_ADDR
// max_x := x + r ;
43139: LD_ADDR_VAR 0 9
43143: PUSH
43144: LD_VAR 0 2
43148: PUSH
43149: LD_VAR 0 4
43153: PLUS
43154: ST_TO_ADDR
// max_y := y + r ;
43155: LD_ADDR_VAR 0 10
43159: PUSH
43160: LD_VAR 0 3
43164: PUSH
43165: LD_VAR 0 4
43169: PLUS
43170: ST_TO_ADDR
// for _x = min_x to max_x do
43171: LD_ADDR_VAR 0 11
43175: PUSH
43176: DOUBLE
43177: LD_VAR 0 7
43181: DEC
43182: ST_TO_ADDR
43183: LD_VAR 0 9
43187: PUSH
43188: FOR_TO
43189: IFFALSE 43306
// for _y = min_y to max_y do
43191: LD_ADDR_VAR 0 12
43195: PUSH
43196: DOUBLE
43197: LD_VAR 0 8
43201: DEC
43202: ST_TO_ADDR
43203: LD_VAR 0 10
43207: PUSH
43208: FOR_TO
43209: IFFALSE 43302
// begin if not ValidHex ( _x , _y ) then
43211: LD_VAR 0 11
43215: PPUSH
43216: LD_VAR 0 12
43220: PPUSH
43221: CALL_OW 488
43225: NOT
43226: IFFALSE 43230
// continue ;
43228: GO 43208
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
43230: LD_VAR 0 11
43234: PPUSH
43235: LD_VAR 0 12
43239: PPUSH
43240: CALL_OW 351
43244: PUSH
43245: LD_VAR 0 11
43249: PPUSH
43250: LD_VAR 0 12
43254: PPUSH
43255: CALL_OW 554
43259: AND
43260: IFFALSE 43300
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
43262: LD_ADDR_VAR 0 13
43266: PUSH
43267: LD_VAR 0 13
43271: PPUSH
43272: LD_VAR 0 13
43276: PUSH
43277: LD_INT 1
43279: PLUS
43280: PPUSH
43281: LD_VAR 0 11
43285: PUSH
43286: LD_VAR 0 12
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PPUSH
43295: CALL_OW 2
43299: ST_TO_ADDR
// end ;
43300: GO 43208
43302: POP
43303: POP
43304: GO 43188
43306: POP
43307: POP
// if not list then
43308: LD_VAR 0 13
43312: NOT
43313: IFFALSE 43317
// exit ;
43315: GO 43388
// for i in list do
43317: LD_ADDR_VAR 0 6
43321: PUSH
43322: LD_VAR 0 13
43326: PUSH
43327: FOR_IN
43328: IFFALSE 43386
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
43330: LD_VAR 0 1
43334: PPUSH
43335: LD_STRING M
43337: PUSH
43338: LD_VAR 0 6
43342: PUSH
43343: LD_INT 1
43345: ARRAY
43346: PUSH
43347: LD_VAR 0 6
43351: PUSH
43352: LD_INT 2
43354: ARRAY
43355: PUSH
43356: LD_INT 0
43358: PUSH
43359: LD_INT 0
43361: PUSH
43362: LD_INT 0
43364: PUSH
43365: LD_INT 0
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: PUSH
43377: EMPTY
43378: LIST
43379: PPUSH
43380: CALL_OW 447
43384: GO 43327
43386: POP
43387: POP
// end ;
43388: LD_VAR 0 5
43392: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
43393: LD_EXP 21
43397: NOT
43398: IFFALSE 43448
43400: GO 43402
43402: DISABLE
// begin initHack := true ;
43403: LD_ADDR_EXP 21
43407: PUSH
43408: LD_INT 1
43410: ST_TO_ADDR
// hackTanks := [ ] ;
43411: LD_ADDR_EXP 22
43415: PUSH
43416: EMPTY
43417: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
43418: LD_ADDR_EXP 23
43422: PUSH
43423: EMPTY
43424: ST_TO_ADDR
// hackLimit := 3 ;
43425: LD_ADDR_EXP 24
43429: PUSH
43430: LD_INT 3
43432: ST_TO_ADDR
// hackDist := 12 ;
43433: LD_ADDR_EXP 25
43437: PUSH
43438: LD_INT 12
43440: ST_TO_ADDR
// hackCounter := [ ] ;
43441: LD_ADDR_EXP 26
43445: PUSH
43446: EMPTY
43447: ST_TO_ADDR
// end ;
43448: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
43449: LD_EXP 21
43453: PUSH
43454: LD_INT 34
43456: PUSH
43457: LD_EXP 88
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PPUSH
43466: CALL_OW 69
43470: AND
43471: IFFALSE 43726
43473: GO 43475
43475: DISABLE
43476: LD_INT 0
43478: PPUSH
43479: PPUSH
// begin enable ;
43480: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
43481: LD_ADDR_VAR 0 1
43485: PUSH
43486: LD_INT 34
43488: PUSH
43489: LD_EXP 88
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PPUSH
43498: CALL_OW 69
43502: PUSH
43503: FOR_IN
43504: IFFALSE 43724
// begin if not i in hackTanks then
43506: LD_VAR 0 1
43510: PUSH
43511: LD_EXP 22
43515: IN
43516: NOT
43517: IFFALSE 43600
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
43519: LD_ADDR_EXP 22
43523: PUSH
43524: LD_EXP 22
43528: PPUSH
43529: LD_EXP 22
43533: PUSH
43534: LD_INT 1
43536: PLUS
43537: PPUSH
43538: LD_VAR 0 1
43542: PPUSH
43543: CALL_OW 1
43547: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
43548: LD_ADDR_EXP 23
43552: PUSH
43553: LD_EXP 23
43557: PPUSH
43558: LD_EXP 23
43562: PUSH
43563: LD_INT 1
43565: PLUS
43566: PPUSH
43567: EMPTY
43568: PPUSH
43569: CALL_OW 1
43573: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
43574: LD_ADDR_EXP 26
43578: PUSH
43579: LD_EXP 26
43583: PPUSH
43584: LD_EXP 26
43588: PUSH
43589: LD_INT 1
43591: PLUS
43592: PPUSH
43593: EMPTY
43594: PPUSH
43595: CALL_OW 1
43599: ST_TO_ADDR
// end ; if not IsOk ( i ) then
43600: LD_VAR 0 1
43604: PPUSH
43605: CALL_OW 302
43609: NOT
43610: IFFALSE 43623
// begin HackUnlinkAll ( i ) ;
43612: LD_VAR 0 1
43616: PPUSH
43617: CALL 43729 0 1
// continue ;
43621: GO 43503
// end ; HackCheckCapturedStatus ( i ) ;
43623: LD_VAR 0 1
43627: PPUSH
43628: CALL 44172 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
43632: LD_ADDR_VAR 0 2
43636: PUSH
43637: LD_INT 81
43639: PUSH
43640: LD_VAR 0 1
43644: PPUSH
43645: CALL_OW 255
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 33
43656: PUSH
43657: LD_INT 3
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 91
43666: PUSH
43667: LD_VAR 0 1
43671: PUSH
43672: LD_EXP 25
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 50
43684: PUSH
43685: EMPTY
43686: LIST
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: PPUSH
43694: CALL_OW 69
43698: ST_TO_ADDR
// if not tmp then
43699: LD_VAR 0 2
43703: NOT
43704: IFFALSE 43708
// continue ;
43706: GO 43503
// HackLink ( i , tmp ) ;
43708: LD_VAR 0 1
43712: PPUSH
43713: LD_VAR 0 2
43717: PPUSH
43718: CALL 43865 0 2
// end ;
43722: GO 43503
43724: POP
43725: POP
// end ;
43726: PPOPN 2
43728: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
43729: LD_INT 0
43731: PPUSH
43732: PPUSH
43733: PPUSH
// if not hack in hackTanks then
43734: LD_VAR 0 1
43738: PUSH
43739: LD_EXP 22
43743: IN
43744: NOT
43745: IFFALSE 43749
// exit ;
43747: GO 43860
// index := GetElementIndex ( hackTanks , hack ) ;
43749: LD_ADDR_VAR 0 4
43753: PUSH
43754: LD_EXP 22
43758: PPUSH
43759: LD_VAR 0 1
43763: PPUSH
43764: CALL 8282 0 2
43768: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
43769: LD_EXP 23
43773: PUSH
43774: LD_VAR 0 4
43778: ARRAY
43779: IFFALSE 43860
// begin for i in hackTanksCaptured [ index ] do
43781: LD_ADDR_VAR 0 3
43785: PUSH
43786: LD_EXP 23
43790: PUSH
43791: LD_VAR 0 4
43795: ARRAY
43796: PUSH
43797: FOR_IN
43798: IFFALSE 43824
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
43800: LD_VAR 0 3
43804: PUSH
43805: LD_INT 1
43807: ARRAY
43808: PPUSH
43809: LD_VAR 0 3
43813: PUSH
43814: LD_INT 2
43816: ARRAY
43817: PPUSH
43818: CALL_OW 235
43822: GO 43797
43824: POP
43825: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
43826: LD_ADDR_EXP 23
43830: PUSH
43831: LD_EXP 23
43835: PPUSH
43836: LD_VAR 0 4
43840: PPUSH
43841: EMPTY
43842: PPUSH
43843: CALL_OW 1
43847: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
43848: LD_VAR 0 1
43852: PPUSH
43853: LD_INT 0
43855: PPUSH
43856: CALL_OW 505
// end ; end ;
43860: LD_VAR 0 2
43864: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
43865: LD_INT 0
43867: PPUSH
43868: PPUSH
43869: PPUSH
// if not hack in hackTanks or not vehicles then
43870: LD_VAR 0 1
43874: PUSH
43875: LD_EXP 22
43879: IN
43880: NOT
43881: PUSH
43882: LD_VAR 0 2
43886: NOT
43887: OR
43888: IFFALSE 43892
// exit ;
43890: GO 44167
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
43892: LD_ADDR_VAR 0 2
43896: PUSH
43897: LD_VAR 0 1
43901: PPUSH
43902: LD_VAR 0 2
43906: PPUSH
43907: LD_INT 1
43909: PPUSH
43910: LD_INT 1
43912: PPUSH
43913: CALL 8932 0 4
43917: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
43918: LD_ADDR_VAR 0 5
43922: PUSH
43923: LD_EXP 22
43927: PPUSH
43928: LD_VAR 0 1
43932: PPUSH
43933: CALL 8282 0 2
43937: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
43938: LD_EXP 23
43942: PUSH
43943: LD_VAR 0 5
43947: ARRAY
43948: PUSH
43949: LD_EXP 24
43953: LESS
43954: IFFALSE 44143
// begin for i := 1 to vehicles do
43956: LD_ADDR_VAR 0 4
43960: PUSH
43961: DOUBLE
43962: LD_INT 1
43964: DEC
43965: ST_TO_ADDR
43966: LD_VAR 0 2
43970: PUSH
43971: FOR_TO
43972: IFFALSE 44141
// begin if hackTanksCaptured [ index ] = hackLimit then
43974: LD_EXP 23
43978: PUSH
43979: LD_VAR 0 5
43983: ARRAY
43984: PUSH
43985: LD_EXP 24
43989: EQUAL
43990: IFFALSE 43994
// break ;
43992: GO 44141
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
43994: LD_ADDR_EXP 26
43998: PUSH
43999: LD_EXP 26
44003: PPUSH
44004: LD_VAR 0 5
44008: PPUSH
44009: LD_EXP 26
44013: PUSH
44014: LD_VAR 0 5
44018: ARRAY
44019: PUSH
44020: LD_INT 1
44022: PLUS
44023: PPUSH
44024: CALL_OW 1
44028: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
44029: LD_ADDR_EXP 23
44033: PUSH
44034: LD_EXP 23
44038: PPUSH
44039: LD_VAR 0 5
44043: PUSH
44044: LD_EXP 23
44048: PUSH
44049: LD_VAR 0 5
44053: ARRAY
44054: PUSH
44055: LD_INT 1
44057: PLUS
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PPUSH
44063: LD_VAR 0 2
44067: PUSH
44068: LD_VAR 0 4
44072: ARRAY
44073: PUSH
44074: LD_VAR 0 2
44078: PUSH
44079: LD_VAR 0 4
44083: ARRAY
44084: PPUSH
44085: CALL_OW 255
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PPUSH
44094: CALL 8497 0 3
44098: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
44099: LD_VAR 0 2
44103: PUSH
44104: LD_VAR 0 4
44108: ARRAY
44109: PPUSH
44110: LD_VAR 0 1
44114: PPUSH
44115: CALL_OW 255
44119: PPUSH
44120: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
44124: LD_VAR 0 2
44128: PUSH
44129: LD_VAR 0 4
44133: ARRAY
44134: PPUSH
44135: CALL_OW 141
// end ;
44139: GO 43971
44141: POP
44142: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
44143: LD_VAR 0 1
44147: PPUSH
44148: LD_EXP 23
44152: PUSH
44153: LD_VAR 0 5
44157: ARRAY
44158: PUSH
44159: LD_INT 0
44161: PLUS
44162: PPUSH
44163: CALL_OW 505
// end ;
44167: LD_VAR 0 3
44171: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
44172: LD_INT 0
44174: PPUSH
44175: PPUSH
44176: PPUSH
44177: PPUSH
// if not hack in hackTanks then
44178: LD_VAR 0 1
44182: PUSH
44183: LD_EXP 22
44187: IN
44188: NOT
44189: IFFALSE 44193
// exit ;
44191: GO 44433
// index := GetElementIndex ( hackTanks , hack ) ;
44193: LD_ADDR_VAR 0 4
44197: PUSH
44198: LD_EXP 22
44202: PPUSH
44203: LD_VAR 0 1
44207: PPUSH
44208: CALL 8282 0 2
44212: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
44213: LD_ADDR_VAR 0 3
44217: PUSH
44218: DOUBLE
44219: LD_EXP 23
44223: PUSH
44224: LD_VAR 0 4
44228: ARRAY
44229: INC
44230: ST_TO_ADDR
44231: LD_INT 1
44233: PUSH
44234: FOR_DOWNTO
44235: IFFALSE 44407
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
44237: LD_ADDR_VAR 0 5
44241: PUSH
44242: LD_EXP 23
44246: PUSH
44247: LD_VAR 0 4
44251: ARRAY
44252: PUSH
44253: LD_VAR 0 3
44257: ARRAY
44258: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
44259: LD_VAR 0 5
44263: PUSH
44264: LD_INT 1
44266: ARRAY
44267: PPUSH
44268: CALL_OW 302
44272: NOT
44273: PUSH
44274: LD_VAR 0 5
44278: PUSH
44279: LD_INT 1
44281: ARRAY
44282: PPUSH
44283: CALL_OW 255
44287: PUSH
44288: LD_VAR 0 1
44292: PPUSH
44293: CALL_OW 255
44297: NONEQUAL
44298: OR
44299: IFFALSE 44405
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
44301: LD_VAR 0 5
44305: PUSH
44306: LD_INT 1
44308: ARRAY
44309: PPUSH
44310: CALL_OW 305
44314: PUSH
44315: LD_VAR 0 5
44319: PUSH
44320: LD_INT 1
44322: ARRAY
44323: PPUSH
44324: CALL_OW 255
44328: PUSH
44329: LD_VAR 0 1
44333: PPUSH
44334: CALL_OW 255
44338: EQUAL
44339: AND
44340: IFFALSE 44364
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
44342: LD_VAR 0 5
44346: PUSH
44347: LD_INT 1
44349: ARRAY
44350: PPUSH
44351: LD_VAR 0 5
44355: PUSH
44356: LD_INT 2
44358: ARRAY
44359: PPUSH
44360: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
44364: LD_ADDR_EXP 23
44368: PUSH
44369: LD_EXP 23
44373: PPUSH
44374: LD_VAR 0 4
44378: PPUSH
44379: LD_EXP 23
44383: PUSH
44384: LD_VAR 0 4
44388: ARRAY
44389: PPUSH
44390: LD_VAR 0 3
44394: PPUSH
44395: CALL_OW 3
44399: PPUSH
44400: CALL_OW 1
44404: ST_TO_ADDR
// end ; end ;
44405: GO 44234
44407: POP
44408: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
44409: LD_VAR 0 1
44413: PPUSH
44414: LD_EXP 23
44418: PUSH
44419: LD_VAR 0 4
44423: ARRAY
44424: PUSH
44425: LD_INT 0
44427: PLUS
44428: PPUSH
44429: CALL_OW 505
// end ;
44433: LD_VAR 0 2
44437: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
44438: LD_INT 0
44440: PPUSH
44441: PPUSH
44442: PPUSH
44443: PPUSH
// if not hack in hackTanks then
44444: LD_VAR 0 1
44448: PUSH
44449: LD_EXP 22
44453: IN
44454: NOT
44455: IFFALSE 44459
// exit ;
44457: GO 44544
// index := GetElementIndex ( hackTanks , hack ) ;
44459: LD_ADDR_VAR 0 5
44463: PUSH
44464: LD_EXP 22
44468: PPUSH
44469: LD_VAR 0 1
44473: PPUSH
44474: CALL 8282 0 2
44478: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
44479: LD_ADDR_VAR 0 4
44483: PUSH
44484: DOUBLE
44485: LD_INT 1
44487: DEC
44488: ST_TO_ADDR
44489: LD_EXP 23
44493: PUSH
44494: LD_VAR 0 5
44498: ARRAY
44499: PUSH
44500: FOR_TO
44501: IFFALSE 44542
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
44503: LD_EXP 23
44507: PUSH
44508: LD_VAR 0 5
44512: ARRAY
44513: PUSH
44514: LD_VAR 0 4
44518: ARRAY
44519: PUSH
44520: LD_INT 1
44522: ARRAY
44523: PUSH
44524: LD_VAR 0 2
44528: EQUAL
44529: IFFALSE 44540
// KillUnit ( vehicle ) ;
44531: LD_VAR 0 2
44535: PPUSH
44536: CALL_OW 66
44540: GO 44500
44542: POP
44543: POP
// end ;
44544: LD_VAR 0 3
44548: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
44549: LD_EXP 27
44553: NOT
44554: IFFALSE 44589
44556: GO 44558
44558: DISABLE
// begin initMiner := true ;
44559: LD_ADDR_EXP 27
44563: PUSH
44564: LD_INT 1
44566: ST_TO_ADDR
// minersList := [ ] ;
44567: LD_ADDR_EXP 28
44571: PUSH
44572: EMPTY
44573: ST_TO_ADDR
// minerMinesList := [ ] ;
44574: LD_ADDR_EXP 29
44578: PUSH
44579: EMPTY
44580: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
44581: LD_ADDR_EXP 30
44585: PUSH
44586: LD_INT 5
44588: ST_TO_ADDR
// end ;
44589: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
44590: LD_EXP 27
44594: PUSH
44595: LD_INT 34
44597: PUSH
44598: LD_EXP 93
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PPUSH
44607: CALL_OW 69
44611: AND
44612: IFFALSE 45075
44614: GO 44616
44616: DISABLE
44617: LD_INT 0
44619: PPUSH
44620: PPUSH
44621: PPUSH
44622: PPUSH
// begin enable ;
44623: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
44624: LD_ADDR_VAR 0 1
44628: PUSH
44629: LD_INT 34
44631: PUSH
44632: LD_EXP 93
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PPUSH
44641: CALL_OW 69
44645: PUSH
44646: FOR_IN
44647: IFFALSE 44719
// begin if not i in minersList then
44649: LD_VAR 0 1
44653: PUSH
44654: LD_EXP 28
44658: IN
44659: NOT
44660: IFFALSE 44717
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
44662: LD_ADDR_EXP 28
44666: PUSH
44667: LD_EXP 28
44671: PPUSH
44672: LD_EXP 28
44676: PUSH
44677: LD_INT 1
44679: PLUS
44680: PPUSH
44681: LD_VAR 0 1
44685: PPUSH
44686: CALL_OW 1
44690: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
44691: LD_ADDR_EXP 29
44695: PUSH
44696: LD_EXP 29
44700: PPUSH
44701: LD_EXP 29
44705: PUSH
44706: LD_INT 1
44708: PLUS
44709: PPUSH
44710: EMPTY
44711: PPUSH
44712: CALL_OW 1
44716: ST_TO_ADDR
// end end ;
44717: GO 44646
44719: POP
44720: POP
// for i := minerMinesList downto 1 do
44721: LD_ADDR_VAR 0 1
44725: PUSH
44726: DOUBLE
44727: LD_EXP 29
44731: INC
44732: ST_TO_ADDR
44733: LD_INT 1
44735: PUSH
44736: FOR_DOWNTO
44737: IFFALSE 45073
// begin if IsLive ( minersList [ i ] ) then
44739: LD_EXP 28
44743: PUSH
44744: LD_VAR 0 1
44748: ARRAY
44749: PPUSH
44750: CALL_OW 300
44754: IFFALSE 44782
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
44756: LD_EXP 28
44760: PUSH
44761: LD_VAR 0 1
44765: ARRAY
44766: PPUSH
44767: LD_EXP 29
44771: PUSH
44772: LD_VAR 0 1
44776: ARRAY
44777: PPUSH
44778: CALL_OW 505
// if not minerMinesList [ i ] then
44782: LD_EXP 29
44786: PUSH
44787: LD_VAR 0 1
44791: ARRAY
44792: NOT
44793: IFFALSE 44797
// continue ;
44795: GO 44736
// for j := minerMinesList [ i ] downto 1 do
44797: LD_ADDR_VAR 0 2
44801: PUSH
44802: DOUBLE
44803: LD_EXP 29
44807: PUSH
44808: LD_VAR 0 1
44812: ARRAY
44813: INC
44814: ST_TO_ADDR
44815: LD_INT 1
44817: PUSH
44818: FOR_DOWNTO
44819: IFFALSE 45069
// begin side := GetSide ( minersList [ i ] ) ;
44821: LD_ADDR_VAR 0 3
44825: PUSH
44826: LD_EXP 28
44830: PUSH
44831: LD_VAR 0 1
44835: ARRAY
44836: PPUSH
44837: CALL_OW 255
44841: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
44842: LD_ADDR_VAR 0 4
44846: PUSH
44847: LD_EXP 29
44851: PUSH
44852: LD_VAR 0 1
44856: ARRAY
44857: PUSH
44858: LD_VAR 0 2
44862: ARRAY
44863: PUSH
44864: LD_INT 1
44866: ARRAY
44867: PPUSH
44868: LD_EXP 29
44872: PUSH
44873: LD_VAR 0 1
44877: ARRAY
44878: PUSH
44879: LD_VAR 0 2
44883: ARRAY
44884: PUSH
44885: LD_INT 2
44887: ARRAY
44888: PPUSH
44889: CALL_OW 428
44893: ST_TO_ADDR
// if not tmp then
44894: LD_VAR 0 4
44898: NOT
44899: IFFALSE 44903
// continue ;
44901: GO 44818
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
44903: LD_VAR 0 4
44907: PUSH
44908: LD_INT 81
44910: PUSH
44911: LD_VAR 0 3
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PPUSH
44920: CALL_OW 69
44924: IN
44925: PUSH
44926: LD_EXP 29
44930: PUSH
44931: LD_VAR 0 1
44935: ARRAY
44936: PUSH
44937: LD_VAR 0 2
44941: ARRAY
44942: PUSH
44943: LD_INT 1
44945: ARRAY
44946: PPUSH
44947: LD_EXP 29
44951: PUSH
44952: LD_VAR 0 1
44956: ARRAY
44957: PUSH
44958: LD_VAR 0 2
44962: ARRAY
44963: PUSH
44964: LD_INT 2
44966: ARRAY
44967: PPUSH
44968: CALL_OW 458
44972: AND
44973: IFFALSE 45067
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
44975: LD_EXP 29
44979: PUSH
44980: LD_VAR 0 1
44984: ARRAY
44985: PUSH
44986: LD_VAR 0 2
44990: ARRAY
44991: PUSH
44992: LD_INT 1
44994: ARRAY
44995: PPUSH
44996: LD_EXP 29
45000: PUSH
45001: LD_VAR 0 1
45005: ARRAY
45006: PUSH
45007: LD_VAR 0 2
45011: ARRAY
45012: PUSH
45013: LD_INT 2
45015: ARRAY
45016: PPUSH
45017: LD_VAR 0 3
45021: PPUSH
45022: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
45026: LD_ADDR_EXP 29
45030: PUSH
45031: LD_EXP 29
45035: PPUSH
45036: LD_VAR 0 1
45040: PPUSH
45041: LD_EXP 29
45045: PUSH
45046: LD_VAR 0 1
45050: ARRAY
45051: PPUSH
45052: LD_VAR 0 2
45056: PPUSH
45057: CALL_OW 3
45061: PPUSH
45062: CALL_OW 1
45066: ST_TO_ADDR
// end ; end ;
45067: GO 44818
45069: POP
45070: POP
// end ;
45071: GO 44736
45073: POP
45074: POP
// end ;
45075: PPOPN 4
45077: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
45078: LD_INT 0
45080: PPUSH
45081: PPUSH
// result := false ;
45082: LD_ADDR_VAR 0 4
45086: PUSH
45087: LD_INT 0
45089: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
45090: LD_VAR 0 1
45094: PPUSH
45095: CALL_OW 264
45099: PUSH
45100: LD_EXP 93
45104: EQUAL
45105: NOT
45106: IFFALSE 45110
// exit ;
45108: GO 45350
// index := GetElementIndex ( minersList , unit ) ;
45110: LD_ADDR_VAR 0 5
45114: PUSH
45115: LD_EXP 28
45119: PPUSH
45120: LD_VAR 0 1
45124: PPUSH
45125: CALL 8282 0 2
45129: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
45130: LD_EXP 29
45134: PUSH
45135: LD_VAR 0 5
45139: ARRAY
45140: PUSH
45141: LD_EXP 30
45145: GREATEREQUAL
45146: IFFALSE 45150
// exit ;
45148: GO 45350
// ComMoveXY ( unit , x , y ) ;
45150: LD_VAR 0 1
45154: PPUSH
45155: LD_VAR 0 2
45159: PPUSH
45160: LD_VAR 0 3
45164: PPUSH
45165: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
45169: LD_INT 35
45171: PPUSH
45172: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
45176: LD_VAR 0 1
45180: PPUSH
45181: LD_VAR 0 2
45185: PPUSH
45186: LD_VAR 0 3
45190: PPUSH
45191: CALL 39054 0 3
45195: NOT
45196: PUSH
45197: LD_VAR 0 1
45201: PPUSH
45202: CALL_OW 314
45206: AND
45207: IFFALSE 45211
// exit ;
45209: GO 45350
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
45211: LD_VAR 0 2
45215: PPUSH
45216: LD_VAR 0 3
45220: PPUSH
45221: CALL_OW 428
45225: PUSH
45226: LD_VAR 0 1
45230: EQUAL
45231: PUSH
45232: LD_VAR 0 1
45236: PPUSH
45237: CALL_OW 314
45241: NOT
45242: AND
45243: IFFALSE 45169
// PlaySoundXY ( x , y , PlantMine ) ;
45245: LD_VAR 0 2
45249: PPUSH
45250: LD_VAR 0 3
45254: PPUSH
45255: LD_STRING PlantMine
45257: PPUSH
45258: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
45262: LD_VAR 0 2
45266: PPUSH
45267: LD_VAR 0 3
45271: PPUSH
45272: LD_VAR 0 1
45276: PPUSH
45277: CALL_OW 255
45281: PPUSH
45282: LD_INT 0
45284: PPUSH
45285: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
45289: LD_ADDR_EXP 29
45293: PUSH
45294: LD_EXP 29
45298: PPUSH
45299: LD_VAR 0 5
45303: PUSH
45304: LD_EXP 29
45308: PUSH
45309: LD_VAR 0 5
45313: ARRAY
45314: PUSH
45315: LD_INT 1
45317: PLUS
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PPUSH
45323: LD_VAR 0 2
45327: PUSH
45328: LD_VAR 0 3
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PPUSH
45337: CALL 8497 0 3
45341: ST_TO_ADDR
// result := true ;
45342: LD_ADDR_VAR 0 4
45346: PUSH
45347: LD_INT 1
45349: ST_TO_ADDR
// end ;
45350: LD_VAR 0 4
45354: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
45355: LD_INT 0
45357: PPUSH
45358: PPUSH
45359: PPUSH
// if not unit in minersList then
45360: LD_VAR 0 1
45364: PUSH
45365: LD_EXP 28
45369: IN
45370: NOT
45371: IFFALSE 45375
// exit ;
45373: GO 45767
// index := GetElementIndex ( minersList , unit ) ;
45375: LD_ADDR_VAR 0 6
45379: PUSH
45380: LD_EXP 28
45384: PPUSH
45385: LD_VAR 0 1
45389: PPUSH
45390: CALL 8282 0 2
45394: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
45395: LD_ADDR_VAR 0 5
45399: PUSH
45400: DOUBLE
45401: LD_EXP 29
45405: PUSH
45406: LD_VAR 0 6
45410: ARRAY
45411: INC
45412: ST_TO_ADDR
45413: LD_INT 1
45415: PUSH
45416: FOR_DOWNTO
45417: IFFALSE 45578
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
45419: LD_EXP 29
45423: PUSH
45424: LD_VAR 0 6
45428: ARRAY
45429: PUSH
45430: LD_VAR 0 5
45434: ARRAY
45435: PUSH
45436: LD_INT 1
45438: ARRAY
45439: PUSH
45440: LD_VAR 0 2
45444: EQUAL
45445: PUSH
45446: LD_EXP 29
45450: PUSH
45451: LD_VAR 0 6
45455: ARRAY
45456: PUSH
45457: LD_VAR 0 5
45461: ARRAY
45462: PUSH
45463: LD_INT 2
45465: ARRAY
45466: PUSH
45467: LD_VAR 0 3
45471: EQUAL
45472: AND
45473: IFFALSE 45576
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
45475: LD_EXP 29
45479: PUSH
45480: LD_VAR 0 6
45484: ARRAY
45485: PUSH
45486: LD_VAR 0 5
45490: ARRAY
45491: PUSH
45492: LD_INT 1
45494: ARRAY
45495: PPUSH
45496: LD_EXP 29
45500: PUSH
45501: LD_VAR 0 6
45505: ARRAY
45506: PUSH
45507: LD_VAR 0 5
45511: ARRAY
45512: PUSH
45513: LD_INT 2
45515: ARRAY
45516: PPUSH
45517: LD_VAR 0 1
45521: PPUSH
45522: CALL_OW 255
45526: PPUSH
45527: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
45531: LD_ADDR_EXP 29
45535: PUSH
45536: LD_EXP 29
45540: PPUSH
45541: LD_VAR 0 6
45545: PPUSH
45546: LD_EXP 29
45550: PUSH
45551: LD_VAR 0 6
45555: ARRAY
45556: PPUSH
45557: LD_VAR 0 5
45561: PPUSH
45562: CALL_OW 3
45566: PPUSH
45567: CALL_OW 1
45571: ST_TO_ADDR
// exit ;
45572: POP
45573: POP
45574: GO 45767
// end ; end ;
45576: GO 45416
45578: POP
45579: POP
// for i := minerMinesList [ index ] downto 1 do
45580: LD_ADDR_VAR 0 5
45584: PUSH
45585: DOUBLE
45586: LD_EXP 29
45590: PUSH
45591: LD_VAR 0 6
45595: ARRAY
45596: INC
45597: ST_TO_ADDR
45598: LD_INT 1
45600: PUSH
45601: FOR_DOWNTO
45602: IFFALSE 45765
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
45604: LD_EXP 29
45608: PUSH
45609: LD_VAR 0 6
45613: ARRAY
45614: PUSH
45615: LD_VAR 0 5
45619: ARRAY
45620: PUSH
45621: LD_INT 1
45623: ARRAY
45624: PPUSH
45625: LD_EXP 29
45629: PUSH
45630: LD_VAR 0 6
45634: ARRAY
45635: PUSH
45636: LD_VAR 0 5
45640: ARRAY
45641: PUSH
45642: LD_INT 2
45644: ARRAY
45645: PPUSH
45646: LD_VAR 0 2
45650: PPUSH
45651: LD_VAR 0 3
45655: PPUSH
45656: CALL_OW 298
45660: PUSH
45661: LD_INT 6
45663: LESS
45664: IFFALSE 45763
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
45666: LD_EXP 29
45670: PUSH
45671: LD_VAR 0 6
45675: ARRAY
45676: PUSH
45677: LD_VAR 0 5
45681: ARRAY
45682: PUSH
45683: LD_INT 1
45685: ARRAY
45686: PPUSH
45687: LD_EXP 29
45691: PUSH
45692: LD_VAR 0 6
45696: ARRAY
45697: PUSH
45698: LD_VAR 0 5
45702: ARRAY
45703: PUSH
45704: LD_INT 2
45706: ARRAY
45707: PPUSH
45708: LD_VAR 0 1
45712: PPUSH
45713: CALL_OW 255
45717: PPUSH
45718: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
45722: LD_ADDR_EXP 29
45726: PUSH
45727: LD_EXP 29
45731: PPUSH
45732: LD_VAR 0 6
45736: PPUSH
45737: LD_EXP 29
45741: PUSH
45742: LD_VAR 0 6
45746: ARRAY
45747: PPUSH
45748: LD_VAR 0 5
45752: PPUSH
45753: CALL_OW 3
45757: PPUSH
45758: CALL_OW 1
45762: ST_TO_ADDR
// end ; end ;
45763: GO 45601
45765: POP
45766: POP
// end ;
45767: LD_VAR 0 4
45771: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
45772: LD_INT 0
45774: PPUSH
45775: PPUSH
45776: PPUSH
45777: PPUSH
45778: PPUSH
45779: PPUSH
45780: PPUSH
45781: PPUSH
45782: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
45783: LD_VAR 0 1
45787: PPUSH
45788: CALL_OW 264
45792: PUSH
45793: LD_EXP 93
45797: EQUAL
45798: NOT
45799: PUSH
45800: LD_VAR 0 1
45804: PUSH
45805: LD_EXP 28
45809: IN
45810: NOT
45811: OR
45812: IFFALSE 45816
// exit ;
45814: GO 46138
// index := GetElementIndex ( minersList , unit ) ;
45816: LD_ADDR_VAR 0 6
45820: PUSH
45821: LD_EXP 28
45825: PPUSH
45826: LD_VAR 0 1
45830: PPUSH
45831: CALL 8282 0 2
45835: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
45836: LD_ADDR_VAR 0 8
45840: PUSH
45841: LD_EXP 30
45845: PUSH
45846: LD_EXP 29
45850: PUSH
45851: LD_VAR 0 6
45855: ARRAY
45856: MINUS
45857: ST_TO_ADDR
// if not minesFreeAmount then
45858: LD_VAR 0 8
45862: NOT
45863: IFFALSE 45867
// exit ;
45865: GO 46138
// tmp := [ ] ;
45867: LD_ADDR_VAR 0 7
45871: PUSH
45872: EMPTY
45873: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
45874: LD_ADDR_VAR 0 5
45878: PUSH
45879: DOUBLE
45880: LD_INT 1
45882: DEC
45883: ST_TO_ADDR
45884: LD_VAR 0 8
45888: PUSH
45889: FOR_TO
45890: IFFALSE 46085
// begin _d := rand ( 0 , 5 ) ;
45892: LD_ADDR_VAR 0 11
45896: PUSH
45897: LD_INT 0
45899: PPUSH
45900: LD_INT 5
45902: PPUSH
45903: CALL_OW 12
45907: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
45908: LD_ADDR_VAR 0 12
45912: PUSH
45913: LD_INT 2
45915: PPUSH
45916: LD_INT 6
45918: PPUSH
45919: CALL_OW 12
45923: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
45924: LD_ADDR_VAR 0 9
45928: PUSH
45929: LD_VAR 0 2
45933: PPUSH
45934: LD_VAR 0 11
45938: PPUSH
45939: LD_VAR 0 12
45943: PPUSH
45944: CALL_OW 272
45948: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
45949: LD_ADDR_VAR 0 10
45953: PUSH
45954: LD_VAR 0 3
45958: PPUSH
45959: LD_VAR 0 11
45963: PPUSH
45964: LD_VAR 0 12
45968: PPUSH
45969: CALL_OW 273
45973: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
45974: LD_VAR 0 9
45978: PPUSH
45979: LD_VAR 0 10
45983: PPUSH
45984: CALL_OW 488
45988: PUSH
45989: LD_VAR 0 9
45993: PUSH
45994: LD_VAR 0 10
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_VAR 0 7
46007: IN
46008: NOT
46009: AND
46010: PUSH
46011: LD_VAR 0 9
46015: PPUSH
46016: LD_VAR 0 10
46020: PPUSH
46021: CALL_OW 458
46025: NOT
46026: AND
46027: IFFALSE 46069
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
46029: LD_ADDR_VAR 0 7
46033: PUSH
46034: LD_VAR 0 7
46038: PPUSH
46039: LD_VAR 0 7
46043: PUSH
46044: LD_INT 1
46046: PLUS
46047: PPUSH
46048: LD_VAR 0 9
46052: PUSH
46053: LD_VAR 0 10
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PPUSH
46062: CALL_OW 1
46066: ST_TO_ADDR
46067: GO 46083
// i := i - 1 ;
46069: LD_ADDR_VAR 0 5
46073: PUSH
46074: LD_VAR 0 5
46078: PUSH
46079: LD_INT 1
46081: MINUS
46082: ST_TO_ADDR
// end ;
46083: GO 45889
46085: POP
46086: POP
// for i in tmp do
46087: LD_ADDR_VAR 0 5
46091: PUSH
46092: LD_VAR 0 7
46096: PUSH
46097: FOR_IN
46098: IFFALSE 46136
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
46100: LD_VAR 0 1
46104: PPUSH
46105: LD_VAR 0 5
46109: PUSH
46110: LD_INT 1
46112: ARRAY
46113: PPUSH
46114: LD_VAR 0 5
46118: PUSH
46119: LD_INT 2
46121: ARRAY
46122: PPUSH
46123: CALL 45078 0 3
46127: NOT
46128: IFFALSE 46134
// exit ;
46130: POP
46131: POP
46132: GO 46138
46134: GO 46097
46136: POP
46137: POP
// end ;
46138: LD_VAR 0 4
46142: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
46143: LD_INT 0
46145: PPUSH
46146: PPUSH
46147: PPUSH
46148: PPUSH
46149: PPUSH
46150: PPUSH
46151: PPUSH
// if not GetClass ( unit ) = class_sniper then
46152: LD_VAR 0 1
46156: PPUSH
46157: CALL_OW 257
46161: PUSH
46162: LD_INT 5
46164: EQUAL
46165: NOT
46166: IFFALSE 46170
// exit ;
46168: GO 46558
// dist := 8 ;
46170: LD_ADDR_VAR 0 5
46174: PUSH
46175: LD_INT 8
46177: ST_TO_ADDR
// viewRange := 12 ;
46178: LD_ADDR_VAR 0 7
46182: PUSH
46183: LD_INT 12
46185: ST_TO_ADDR
// side := GetSide ( unit ) ;
46186: LD_ADDR_VAR 0 6
46190: PUSH
46191: LD_VAR 0 1
46195: PPUSH
46196: CALL_OW 255
46200: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
46201: LD_INT 61
46203: PPUSH
46204: LD_VAR 0 6
46208: PPUSH
46209: CALL_OW 321
46213: PUSH
46214: LD_INT 2
46216: EQUAL
46217: IFFALSE 46227
// viewRange := 16 ;
46219: LD_ADDR_VAR 0 7
46223: PUSH
46224: LD_INT 16
46226: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
46227: LD_VAR 0 1
46231: PPUSH
46232: LD_VAR 0 2
46236: PPUSH
46237: LD_VAR 0 3
46241: PPUSH
46242: CALL_OW 297
46246: PUSH
46247: LD_VAR 0 5
46251: GREATER
46252: IFFALSE 46331
// begin ComMoveXY ( unit , x , y ) ;
46254: LD_VAR 0 1
46258: PPUSH
46259: LD_VAR 0 2
46263: PPUSH
46264: LD_VAR 0 3
46268: PPUSH
46269: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
46273: LD_INT 35
46275: PPUSH
46276: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
46280: LD_VAR 0 1
46284: PPUSH
46285: LD_VAR 0 2
46289: PPUSH
46290: LD_VAR 0 3
46294: PPUSH
46295: CALL 39054 0 3
46299: NOT
46300: IFFALSE 46304
// exit ;
46302: GO 46558
// until GetDistUnitXY ( unit , x , y ) < dist ;
46304: LD_VAR 0 1
46308: PPUSH
46309: LD_VAR 0 2
46313: PPUSH
46314: LD_VAR 0 3
46318: PPUSH
46319: CALL_OW 297
46323: PUSH
46324: LD_VAR 0 5
46328: LESS
46329: IFFALSE 46273
// end ; ComTurnXY ( unit , x , y ) ;
46331: LD_VAR 0 1
46335: PPUSH
46336: LD_VAR 0 2
46340: PPUSH
46341: LD_VAR 0 3
46345: PPUSH
46346: CALL_OW 118
// wait ( 5 ) ;
46350: LD_INT 5
46352: PPUSH
46353: CALL_OW 67
// _d := GetDir ( unit ) ;
46357: LD_ADDR_VAR 0 10
46361: PUSH
46362: LD_VAR 0 1
46366: PPUSH
46367: CALL_OW 254
46371: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
46372: LD_ADDR_VAR 0 8
46376: PUSH
46377: LD_VAR 0 1
46381: PPUSH
46382: CALL_OW 250
46386: PPUSH
46387: LD_VAR 0 10
46391: PPUSH
46392: LD_VAR 0 5
46396: PPUSH
46397: CALL_OW 272
46401: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
46402: LD_ADDR_VAR 0 9
46406: PUSH
46407: LD_VAR 0 1
46411: PPUSH
46412: CALL_OW 251
46416: PPUSH
46417: LD_VAR 0 10
46421: PPUSH
46422: LD_VAR 0 5
46426: PPUSH
46427: CALL_OW 273
46431: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46432: LD_VAR 0 8
46436: PPUSH
46437: LD_VAR 0 9
46441: PPUSH
46442: CALL_OW 488
46446: NOT
46447: IFFALSE 46451
// exit ;
46449: GO 46558
// ComAnimCustom ( unit , 1 ) ;
46451: LD_VAR 0 1
46455: PPUSH
46456: LD_INT 1
46458: PPUSH
46459: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
46463: LD_VAR 0 8
46467: PPUSH
46468: LD_VAR 0 9
46472: PPUSH
46473: LD_VAR 0 6
46477: PPUSH
46478: LD_VAR 0 7
46482: PPUSH
46483: CALL_OW 330
// repeat wait ( 1 ) ;
46487: LD_INT 1
46489: PPUSH
46490: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
46494: LD_VAR 0 1
46498: PPUSH
46499: CALL_OW 316
46503: PUSH
46504: LD_VAR 0 1
46508: PPUSH
46509: CALL_OW 314
46513: OR
46514: PUSH
46515: LD_VAR 0 1
46519: PPUSH
46520: CALL_OW 302
46524: NOT
46525: OR
46526: PUSH
46527: LD_VAR 0 1
46531: PPUSH
46532: CALL_OW 301
46536: OR
46537: IFFALSE 46487
// RemoveSeeing ( _x , _y , side ) ;
46539: LD_VAR 0 8
46543: PPUSH
46544: LD_VAR 0 9
46548: PPUSH
46549: LD_VAR 0 6
46553: PPUSH
46554: CALL_OW 331
// end ; end_of_file
46558: LD_VAR 0 4
46562: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
46563: LD_INT 0
46565: PPUSH
// if p2 = 100 then
46566: LD_VAR 0 2
46570: PUSH
46571: LD_INT 100
46573: EQUAL
46574: IFFALSE 47523
// begin if not StreamModeActive then
46576: LD_EXP 31
46580: NOT
46581: IFFALSE 46591
// StreamModeActive := true ;
46583: LD_ADDR_EXP 31
46587: PUSH
46588: LD_INT 1
46590: ST_TO_ADDR
// if p3 = 0 then
46591: LD_VAR 0 3
46595: PUSH
46596: LD_INT 0
46598: EQUAL
46599: IFFALSE 46605
// InitStreamMode ;
46601: CALL 47683 0 0
// if p3 = 1 then
46605: LD_VAR 0 3
46609: PUSH
46610: LD_INT 1
46612: EQUAL
46613: IFFALSE 46623
// sRocket := true ;
46615: LD_ADDR_EXP 36
46619: PUSH
46620: LD_INT 1
46622: ST_TO_ADDR
// if p3 = 2 then
46623: LD_VAR 0 3
46627: PUSH
46628: LD_INT 2
46630: EQUAL
46631: IFFALSE 46641
// sSpeed := true ;
46633: LD_ADDR_EXP 35
46637: PUSH
46638: LD_INT 1
46640: ST_TO_ADDR
// if p3 = 3 then
46641: LD_VAR 0 3
46645: PUSH
46646: LD_INT 3
46648: EQUAL
46649: IFFALSE 46659
// sEngine := true ;
46651: LD_ADDR_EXP 37
46655: PUSH
46656: LD_INT 1
46658: ST_TO_ADDR
// if p3 = 4 then
46659: LD_VAR 0 3
46663: PUSH
46664: LD_INT 4
46666: EQUAL
46667: IFFALSE 46677
// sSpec := true ;
46669: LD_ADDR_EXP 34
46673: PUSH
46674: LD_INT 1
46676: ST_TO_ADDR
// if p3 = 5 then
46677: LD_VAR 0 3
46681: PUSH
46682: LD_INT 5
46684: EQUAL
46685: IFFALSE 46695
// sLevel := true ;
46687: LD_ADDR_EXP 38
46691: PUSH
46692: LD_INT 1
46694: ST_TO_ADDR
// if p3 = 6 then
46695: LD_VAR 0 3
46699: PUSH
46700: LD_INT 6
46702: EQUAL
46703: IFFALSE 46713
// sArmoury := true ;
46705: LD_ADDR_EXP 39
46709: PUSH
46710: LD_INT 1
46712: ST_TO_ADDR
// if p3 = 7 then
46713: LD_VAR 0 3
46717: PUSH
46718: LD_INT 7
46720: EQUAL
46721: IFFALSE 46731
// sRadar := true ;
46723: LD_ADDR_EXP 40
46727: PUSH
46728: LD_INT 1
46730: ST_TO_ADDR
// if p3 = 8 then
46731: LD_VAR 0 3
46735: PUSH
46736: LD_INT 8
46738: EQUAL
46739: IFFALSE 46749
// sBunker := true ;
46741: LD_ADDR_EXP 41
46745: PUSH
46746: LD_INT 1
46748: ST_TO_ADDR
// if p3 = 9 then
46749: LD_VAR 0 3
46753: PUSH
46754: LD_INT 9
46756: EQUAL
46757: IFFALSE 46767
// sHack := true ;
46759: LD_ADDR_EXP 42
46763: PUSH
46764: LD_INT 1
46766: ST_TO_ADDR
// if p3 = 10 then
46767: LD_VAR 0 3
46771: PUSH
46772: LD_INT 10
46774: EQUAL
46775: IFFALSE 46785
// sFire := true ;
46777: LD_ADDR_EXP 43
46781: PUSH
46782: LD_INT 1
46784: ST_TO_ADDR
// if p3 = 11 then
46785: LD_VAR 0 3
46789: PUSH
46790: LD_INT 11
46792: EQUAL
46793: IFFALSE 46803
// sRefresh := true ;
46795: LD_ADDR_EXP 44
46799: PUSH
46800: LD_INT 1
46802: ST_TO_ADDR
// if p3 = 12 then
46803: LD_VAR 0 3
46807: PUSH
46808: LD_INT 12
46810: EQUAL
46811: IFFALSE 46821
// sExp := true ;
46813: LD_ADDR_EXP 45
46817: PUSH
46818: LD_INT 1
46820: ST_TO_ADDR
// if p3 = 13 then
46821: LD_VAR 0 3
46825: PUSH
46826: LD_INT 13
46828: EQUAL
46829: IFFALSE 46839
// sDepot := true ;
46831: LD_ADDR_EXP 46
46835: PUSH
46836: LD_INT 1
46838: ST_TO_ADDR
// if p3 = 14 then
46839: LD_VAR 0 3
46843: PUSH
46844: LD_INT 14
46846: EQUAL
46847: IFFALSE 46857
// sFlag := true ;
46849: LD_ADDR_EXP 47
46853: PUSH
46854: LD_INT 1
46856: ST_TO_ADDR
// if p3 = 15 then
46857: LD_VAR 0 3
46861: PUSH
46862: LD_INT 15
46864: EQUAL
46865: IFFALSE 46875
// sKamikadze := true ;
46867: LD_ADDR_EXP 55
46871: PUSH
46872: LD_INT 1
46874: ST_TO_ADDR
// if p3 = 16 then
46875: LD_VAR 0 3
46879: PUSH
46880: LD_INT 16
46882: EQUAL
46883: IFFALSE 46893
// sTroll := true ;
46885: LD_ADDR_EXP 56
46889: PUSH
46890: LD_INT 1
46892: ST_TO_ADDR
// if p3 = 17 then
46893: LD_VAR 0 3
46897: PUSH
46898: LD_INT 17
46900: EQUAL
46901: IFFALSE 46911
// sSlow := true ;
46903: LD_ADDR_EXP 57
46907: PUSH
46908: LD_INT 1
46910: ST_TO_ADDR
// if p3 = 18 then
46911: LD_VAR 0 3
46915: PUSH
46916: LD_INT 18
46918: EQUAL
46919: IFFALSE 46929
// sLack := true ;
46921: LD_ADDR_EXP 58
46925: PUSH
46926: LD_INT 1
46928: ST_TO_ADDR
// if p3 = 19 then
46929: LD_VAR 0 3
46933: PUSH
46934: LD_INT 19
46936: EQUAL
46937: IFFALSE 46947
// sTank := true ;
46939: LD_ADDR_EXP 60
46943: PUSH
46944: LD_INT 1
46946: ST_TO_ADDR
// if p3 = 20 then
46947: LD_VAR 0 3
46951: PUSH
46952: LD_INT 20
46954: EQUAL
46955: IFFALSE 46965
// sRemote := true ;
46957: LD_ADDR_EXP 61
46961: PUSH
46962: LD_INT 1
46964: ST_TO_ADDR
// if p3 = 21 then
46965: LD_VAR 0 3
46969: PUSH
46970: LD_INT 21
46972: EQUAL
46973: IFFALSE 46983
// sPowell := true ;
46975: LD_ADDR_EXP 62
46979: PUSH
46980: LD_INT 1
46982: ST_TO_ADDR
// if p3 = 22 then
46983: LD_VAR 0 3
46987: PUSH
46988: LD_INT 22
46990: EQUAL
46991: IFFALSE 47001
// sTeleport := true ;
46993: LD_ADDR_EXP 65
46997: PUSH
46998: LD_INT 1
47000: ST_TO_ADDR
// if p3 = 23 then
47001: LD_VAR 0 3
47005: PUSH
47006: LD_INT 23
47008: EQUAL
47009: IFFALSE 47019
// sOilTower := true ;
47011: LD_ADDR_EXP 67
47015: PUSH
47016: LD_INT 1
47018: ST_TO_ADDR
// if p3 = 24 then
47019: LD_VAR 0 3
47023: PUSH
47024: LD_INT 24
47026: EQUAL
47027: IFFALSE 47037
// sShovel := true ;
47029: LD_ADDR_EXP 68
47033: PUSH
47034: LD_INT 1
47036: ST_TO_ADDR
// if p3 = 25 then
47037: LD_VAR 0 3
47041: PUSH
47042: LD_INT 25
47044: EQUAL
47045: IFFALSE 47055
// sSheik := true ;
47047: LD_ADDR_EXP 69
47051: PUSH
47052: LD_INT 1
47054: ST_TO_ADDR
// if p3 = 26 then
47055: LD_VAR 0 3
47059: PUSH
47060: LD_INT 26
47062: EQUAL
47063: IFFALSE 47073
// sEarthquake := true ;
47065: LD_ADDR_EXP 71
47069: PUSH
47070: LD_INT 1
47072: ST_TO_ADDR
// if p3 = 27 then
47073: LD_VAR 0 3
47077: PUSH
47078: LD_INT 27
47080: EQUAL
47081: IFFALSE 47091
// sAI := true ;
47083: LD_ADDR_EXP 72
47087: PUSH
47088: LD_INT 1
47090: ST_TO_ADDR
// if p3 = 28 then
47091: LD_VAR 0 3
47095: PUSH
47096: LD_INT 28
47098: EQUAL
47099: IFFALSE 47109
// sCargo := true ;
47101: LD_ADDR_EXP 75
47105: PUSH
47106: LD_INT 1
47108: ST_TO_ADDR
// if p3 = 29 then
47109: LD_VAR 0 3
47113: PUSH
47114: LD_INT 29
47116: EQUAL
47117: IFFALSE 47127
// sDLaser := true ;
47119: LD_ADDR_EXP 76
47123: PUSH
47124: LD_INT 1
47126: ST_TO_ADDR
// if p3 = 30 then
47127: LD_VAR 0 3
47131: PUSH
47132: LD_INT 30
47134: EQUAL
47135: IFFALSE 47145
// sExchange := true ;
47137: LD_ADDR_EXP 77
47141: PUSH
47142: LD_INT 1
47144: ST_TO_ADDR
// if p3 = 31 then
47145: LD_VAR 0 3
47149: PUSH
47150: LD_INT 31
47152: EQUAL
47153: IFFALSE 47163
// sFac := true ;
47155: LD_ADDR_EXP 78
47159: PUSH
47160: LD_INT 1
47162: ST_TO_ADDR
// if p3 = 32 then
47163: LD_VAR 0 3
47167: PUSH
47168: LD_INT 32
47170: EQUAL
47171: IFFALSE 47181
// sPower := true ;
47173: LD_ADDR_EXP 79
47177: PUSH
47178: LD_INT 1
47180: ST_TO_ADDR
// if p3 = 33 then
47181: LD_VAR 0 3
47185: PUSH
47186: LD_INT 33
47188: EQUAL
47189: IFFALSE 47199
// sRandom := true ;
47191: LD_ADDR_EXP 80
47195: PUSH
47196: LD_INT 1
47198: ST_TO_ADDR
// if p3 = 34 then
47199: LD_VAR 0 3
47203: PUSH
47204: LD_INT 34
47206: EQUAL
47207: IFFALSE 47217
// sShield := true ;
47209: LD_ADDR_EXP 81
47213: PUSH
47214: LD_INT 1
47216: ST_TO_ADDR
// if p3 = 35 then
47217: LD_VAR 0 3
47221: PUSH
47222: LD_INT 35
47224: EQUAL
47225: IFFALSE 47235
// sTime := true ;
47227: LD_ADDR_EXP 82
47231: PUSH
47232: LD_INT 1
47234: ST_TO_ADDR
// if p3 = 36 then
47235: LD_VAR 0 3
47239: PUSH
47240: LD_INT 36
47242: EQUAL
47243: IFFALSE 47253
// sTools := true ;
47245: LD_ADDR_EXP 83
47249: PUSH
47250: LD_INT 1
47252: ST_TO_ADDR
// if p3 = 101 then
47253: LD_VAR 0 3
47257: PUSH
47258: LD_INT 101
47260: EQUAL
47261: IFFALSE 47271
// sSold := true ;
47263: LD_ADDR_EXP 48
47267: PUSH
47268: LD_INT 1
47270: ST_TO_ADDR
// if p3 = 102 then
47271: LD_VAR 0 3
47275: PUSH
47276: LD_INT 102
47278: EQUAL
47279: IFFALSE 47289
// sDiff := true ;
47281: LD_ADDR_EXP 49
47285: PUSH
47286: LD_INT 1
47288: ST_TO_ADDR
// if p3 = 103 then
47289: LD_VAR 0 3
47293: PUSH
47294: LD_INT 103
47296: EQUAL
47297: IFFALSE 47307
// sFog := true ;
47299: LD_ADDR_EXP 52
47303: PUSH
47304: LD_INT 1
47306: ST_TO_ADDR
// if p3 = 104 then
47307: LD_VAR 0 3
47311: PUSH
47312: LD_INT 104
47314: EQUAL
47315: IFFALSE 47325
// sReset := true ;
47317: LD_ADDR_EXP 53
47321: PUSH
47322: LD_INT 1
47324: ST_TO_ADDR
// if p3 = 105 then
47325: LD_VAR 0 3
47329: PUSH
47330: LD_INT 105
47332: EQUAL
47333: IFFALSE 47343
// sSun := true ;
47335: LD_ADDR_EXP 54
47339: PUSH
47340: LD_INT 1
47342: ST_TO_ADDR
// if p3 = 106 then
47343: LD_VAR 0 3
47347: PUSH
47348: LD_INT 106
47350: EQUAL
47351: IFFALSE 47361
// sTiger := true ;
47353: LD_ADDR_EXP 50
47357: PUSH
47358: LD_INT 1
47360: ST_TO_ADDR
// if p3 = 107 then
47361: LD_VAR 0 3
47365: PUSH
47366: LD_INT 107
47368: EQUAL
47369: IFFALSE 47379
// sBomb := true ;
47371: LD_ADDR_EXP 51
47375: PUSH
47376: LD_INT 1
47378: ST_TO_ADDR
// if p3 = 108 then
47379: LD_VAR 0 3
47383: PUSH
47384: LD_INT 108
47386: EQUAL
47387: IFFALSE 47397
// sWound := true ;
47389: LD_ADDR_EXP 59
47393: PUSH
47394: LD_INT 1
47396: ST_TO_ADDR
// if p3 = 109 then
47397: LD_VAR 0 3
47401: PUSH
47402: LD_INT 109
47404: EQUAL
47405: IFFALSE 47415
// sBetray := true ;
47407: LD_ADDR_EXP 63
47411: PUSH
47412: LD_INT 1
47414: ST_TO_ADDR
// if p3 = 110 then
47415: LD_VAR 0 3
47419: PUSH
47420: LD_INT 110
47422: EQUAL
47423: IFFALSE 47433
// sContamin := true ;
47425: LD_ADDR_EXP 64
47429: PUSH
47430: LD_INT 1
47432: ST_TO_ADDR
// if p3 = 111 then
47433: LD_VAR 0 3
47437: PUSH
47438: LD_INT 111
47440: EQUAL
47441: IFFALSE 47451
// sOil := true ;
47443: LD_ADDR_EXP 66
47447: PUSH
47448: LD_INT 1
47450: ST_TO_ADDR
// if p3 = 112 then
47451: LD_VAR 0 3
47455: PUSH
47456: LD_INT 112
47458: EQUAL
47459: IFFALSE 47469
// sStu := true ;
47461: LD_ADDR_EXP 70
47465: PUSH
47466: LD_INT 1
47468: ST_TO_ADDR
// if p3 = 113 then
47469: LD_VAR 0 3
47473: PUSH
47474: LD_INT 113
47476: EQUAL
47477: IFFALSE 47487
// sBazooka := true ;
47479: LD_ADDR_EXP 73
47483: PUSH
47484: LD_INT 1
47486: ST_TO_ADDR
// if p3 = 114 then
47487: LD_VAR 0 3
47491: PUSH
47492: LD_INT 114
47494: EQUAL
47495: IFFALSE 47505
// sMortar := true ;
47497: LD_ADDR_EXP 74
47501: PUSH
47502: LD_INT 1
47504: ST_TO_ADDR
// if p3 = 115 then
47505: LD_VAR 0 3
47509: PUSH
47510: LD_INT 115
47512: EQUAL
47513: IFFALSE 47523
// sRanger := true ;
47515: LD_ADDR_EXP 84
47519: PUSH
47520: LD_INT 1
47522: ST_TO_ADDR
// end ; if p2 = 101 then
47523: LD_VAR 0 2
47527: PUSH
47528: LD_INT 101
47530: EQUAL
47531: IFFALSE 47659
// begin case p3 of 1 :
47533: LD_VAR 0 3
47537: PUSH
47538: LD_INT 1
47540: DOUBLE
47541: EQUAL
47542: IFTRUE 47546
47544: GO 47553
47546: POP
// hHackUnlimitedResources ; 2 :
47547: CALL 58696 0 0
47551: GO 47659
47553: LD_INT 2
47555: DOUBLE
47556: EQUAL
47557: IFTRUE 47561
47559: GO 47568
47561: POP
// hHackSetLevel10 ; 3 :
47562: CALL 58829 0 0
47566: GO 47659
47568: LD_INT 3
47570: DOUBLE
47571: EQUAL
47572: IFTRUE 47576
47574: GO 47583
47576: POP
// hHackSetLevel10YourUnits ; 4 :
47577: CALL 58914 0 0
47581: GO 47659
47583: LD_INT 4
47585: DOUBLE
47586: EQUAL
47587: IFTRUE 47591
47589: GO 47598
47591: POP
// hHackInvincible ; 5 :
47592: CALL 59362 0 0
47596: GO 47659
47598: LD_INT 5
47600: DOUBLE
47601: EQUAL
47602: IFTRUE 47606
47604: GO 47613
47606: POP
// hHackInvisible ; 6 :
47607: CALL 59473 0 0
47611: GO 47659
47613: LD_INT 6
47615: DOUBLE
47616: EQUAL
47617: IFTRUE 47621
47619: GO 47628
47621: POP
// hHackChangeYourSide ; 7 :
47622: CALL 59530 0 0
47626: GO 47659
47628: LD_INT 7
47630: DOUBLE
47631: EQUAL
47632: IFTRUE 47636
47634: GO 47643
47636: POP
// hHackChangeUnitSide ; 8 :
47637: CALL 59572 0 0
47641: GO 47659
47643: LD_INT 8
47645: DOUBLE
47646: EQUAL
47647: IFTRUE 47651
47649: GO 47658
47651: POP
// hHackFog ; end ;
47652: CALL 59673 0 0
47656: GO 47659
47658: POP
// end ; end ;
47659: LD_VAR 0 7
47663: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
47664: GO 47666
47666: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
47667: LD_STRING initStreamRollete();
47669: PPUSH
47670: CALL_OW 559
// InitStreamMode ;
47674: CALL 47683 0 0
// DefineStreamItems ( ) ;
47678: CALL 48123 0 0
// end ;
47682: END
// function InitStreamMode ; begin
47683: LD_INT 0
47685: PPUSH
// streamModeActive := false ;
47686: LD_ADDR_EXP 31
47690: PUSH
47691: LD_INT 0
47693: ST_TO_ADDR
// normalCounter := 36 ;
47694: LD_ADDR_EXP 32
47698: PUSH
47699: LD_INT 36
47701: ST_TO_ADDR
// hardcoreCounter := 16 ;
47702: LD_ADDR_EXP 33
47706: PUSH
47707: LD_INT 16
47709: ST_TO_ADDR
// sRocket := false ;
47710: LD_ADDR_EXP 36
47714: PUSH
47715: LD_INT 0
47717: ST_TO_ADDR
// sSpeed := false ;
47718: LD_ADDR_EXP 35
47722: PUSH
47723: LD_INT 0
47725: ST_TO_ADDR
// sEngine := false ;
47726: LD_ADDR_EXP 37
47730: PUSH
47731: LD_INT 0
47733: ST_TO_ADDR
// sSpec := false ;
47734: LD_ADDR_EXP 34
47738: PUSH
47739: LD_INT 0
47741: ST_TO_ADDR
// sLevel := false ;
47742: LD_ADDR_EXP 38
47746: PUSH
47747: LD_INT 0
47749: ST_TO_ADDR
// sArmoury := false ;
47750: LD_ADDR_EXP 39
47754: PUSH
47755: LD_INT 0
47757: ST_TO_ADDR
// sRadar := false ;
47758: LD_ADDR_EXP 40
47762: PUSH
47763: LD_INT 0
47765: ST_TO_ADDR
// sBunker := false ;
47766: LD_ADDR_EXP 41
47770: PUSH
47771: LD_INT 0
47773: ST_TO_ADDR
// sHack := false ;
47774: LD_ADDR_EXP 42
47778: PUSH
47779: LD_INT 0
47781: ST_TO_ADDR
// sFire := false ;
47782: LD_ADDR_EXP 43
47786: PUSH
47787: LD_INT 0
47789: ST_TO_ADDR
// sRefresh := false ;
47790: LD_ADDR_EXP 44
47794: PUSH
47795: LD_INT 0
47797: ST_TO_ADDR
// sExp := false ;
47798: LD_ADDR_EXP 45
47802: PUSH
47803: LD_INT 0
47805: ST_TO_ADDR
// sDepot := false ;
47806: LD_ADDR_EXP 46
47810: PUSH
47811: LD_INT 0
47813: ST_TO_ADDR
// sFlag := false ;
47814: LD_ADDR_EXP 47
47818: PUSH
47819: LD_INT 0
47821: ST_TO_ADDR
// sKamikadze := false ;
47822: LD_ADDR_EXP 55
47826: PUSH
47827: LD_INT 0
47829: ST_TO_ADDR
// sTroll := false ;
47830: LD_ADDR_EXP 56
47834: PUSH
47835: LD_INT 0
47837: ST_TO_ADDR
// sSlow := false ;
47838: LD_ADDR_EXP 57
47842: PUSH
47843: LD_INT 0
47845: ST_TO_ADDR
// sLack := false ;
47846: LD_ADDR_EXP 58
47850: PUSH
47851: LD_INT 0
47853: ST_TO_ADDR
// sTank := false ;
47854: LD_ADDR_EXP 60
47858: PUSH
47859: LD_INT 0
47861: ST_TO_ADDR
// sRemote := false ;
47862: LD_ADDR_EXP 61
47866: PUSH
47867: LD_INT 0
47869: ST_TO_ADDR
// sPowell := false ;
47870: LD_ADDR_EXP 62
47874: PUSH
47875: LD_INT 0
47877: ST_TO_ADDR
// sTeleport := false ;
47878: LD_ADDR_EXP 65
47882: PUSH
47883: LD_INT 0
47885: ST_TO_ADDR
// sOilTower := false ;
47886: LD_ADDR_EXP 67
47890: PUSH
47891: LD_INT 0
47893: ST_TO_ADDR
// sShovel := false ;
47894: LD_ADDR_EXP 68
47898: PUSH
47899: LD_INT 0
47901: ST_TO_ADDR
// sSheik := false ;
47902: LD_ADDR_EXP 69
47906: PUSH
47907: LD_INT 0
47909: ST_TO_ADDR
// sEarthquake := false ;
47910: LD_ADDR_EXP 71
47914: PUSH
47915: LD_INT 0
47917: ST_TO_ADDR
// sAI := false ;
47918: LD_ADDR_EXP 72
47922: PUSH
47923: LD_INT 0
47925: ST_TO_ADDR
// sCargo := false ;
47926: LD_ADDR_EXP 75
47930: PUSH
47931: LD_INT 0
47933: ST_TO_ADDR
// sDLaser := false ;
47934: LD_ADDR_EXP 76
47938: PUSH
47939: LD_INT 0
47941: ST_TO_ADDR
// sExchange := false ;
47942: LD_ADDR_EXP 77
47946: PUSH
47947: LD_INT 0
47949: ST_TO_ADDR
// sFac := false ;
47950: LD_ADDR_EXP 78
47954: PUSH
47955: LD_INT 0
47957: ST_TO_ADDR
// sPower := false ;
47958: LD_ADDR_EXP 79
47962: PUSH
47963: LD_INT 0
47965: ST_TO_ADDR
// sRandom := false ;
47966: LD_ADDR_EXP 80
47970: PUSH
47971: LD_INT 0
47973: ST_TO_ADDR
// sShield := false ;
47974: LD_ADDR_EXP 81
47978: PUSH
47979: LD_INT 0
47981: ST_TO_ADDR
// sTime := false ;
47982: LD_ADDR_EXP 82
47986: PUSH
47987: LD_INT 0
47989: ST_TO_ADDR
// sTools := false ;
47990: LD_ADDR_EXP 83
47994: PUSH
47995: LD_INT 0
47997: ST_TO_ADDR
// sSold := false ;
47998: LD_ADDR_EXP 48
48002: PUSH
48003: LD_INT 0
48005: ST_TO_ADDR
// sDiff := false ;
48006: LD_ADDR_EXP 49
48010: PUSH
48011: LD_INT 0
48013: ST_TO_ADDR
// sFog := false ;
48014: LD_ADDR_EXP 52
48018: PUSH
48019: LD_INT 0
48021: ST_TO_ADDR
// sReset := false ;
48022: LD_ADDR_EXP 53
48026: PUSH
48027: LD_INT 0
48029: ST_TO_ADDR
// sSun := false ;
48030: LD_ADDR_EXP 54
48034: PUSH
48035: LD_INT 0
48037: ST_TO_ADDR
// sTiger := false ;
48038: LD_ADDR_EXP 50
48042: PUSH
48043: LD_INT 0
48045: ST_TO_ADDR
// sBomb := false ;
48046: LD_ADDR_EXP 51
48050: PUSH
48051: LD_INT 0
48053: ST_TO_ADDR
// sWound := false ;
48054: LD_ADDR_EXP 59
48058: PUSH
48059: LD_INT 0
48061: ST_TO_ADDR
// sBetray := false ;
48062: LD_ADDR_EXP 63
48066: PUSH
48067: LD_INT 0
48069: ST_TO_ADDR
// sContamin := false ;
48070: LD_ADDR_EXP 64
48074: PUSH
48075: LD_INT 0
48077: ST_TO_ADDR
// sOil := false ;
48078: LD_ADDR_EXP 66
48082: PUSH
48083: LD_INT 0
48085: ST_TO_ADDR
// sStu := false ;
48086: LD_ADDR_EXP 70
48090: PUSH
48091: LD_INT 0
48093: ST_TO_ADDR
// sBazooka := false ;
48094: LD_ADDR_EXP 73
48098: PUSH
48099: LD_INT 0
48101: ST_TO_ADDR
// sMortar := false ;
48102: LD_ADDR_EXP 74
48106: PUSH
48107: LD_INT 0
48109: ST_TO_ADDR
// sRanger := false ;
48110: LD_ADDR_EXP 84
48114: PUSH
48115: LD_INT 0
48117: ST_TO_ADDR
// end ;
48118: LD_VAR 0 1
48122: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
48123: LD_INT 0
48125: PPUSH
48126: PPUSH
48127: PPUSH
48128: PPUSH
48129: PPUSH
// result := [ ] ;
48130: LD_ADDR_VAR 0 1
48134: PUSH
48135: EMPTY
48136: ST_TO_ADDR
// if campaign_id = 1 then
48137: LD_OWVAR 69
48141: PUSH
48142: LD_INT 1
48144: EQUAL
48145: IFFALSE 51083
// begin case mission_number of 1 :
48147: LD_OWVAR 70
48151: PUSH
48152: LD_INT 1
48154: DOUBLE
48155: EQUAL
48156: IFTRUE 48160
48158: GO 48224
48160: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
48161: LD_ADDR_VAR 0 1
48165: PUSH
48166: LD_INT 2
48168: PUSH
48169: LD_INT 4
48171: PUSH
48172: LD_INT 11
48174: PUSH
48175: LD_INT 12
48177: PUSH
48178: LD_INT 15
48180: PUSH
48181: LD_INT 16
48183: PUSH
48184: LD_INT 22
48186: PUSH
48187: LD_INT 23
48189: PUSH
48190: LD_INT 26
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 101
48206: PUSH
48207: LD_INT 102
48209: PUSH
48210: LD_INT 106
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: LIST
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: ST_TO_ADDR
48222: GO 51081
48224: LD_INT 2
48226: DOUBLE
48227: EQUAL
48228: IFTRUE 48232
48230: GO 48304
48232: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
48233: LD_ADDR_VAR 0 1
48237: PUSH
48238: LD_INT 2
48240: PUSH
48241: LD_INT 4
48243: PUSH
48244: LD_INT 11
48246: PUSH
48247: LD_INT 12
48249: PUSH
48250: LD_INT 15
48252: PUSH
48253: LD_INT 16
48255: PUSH
48256: LD_INT 22
48258: PUSH
48259: LD_INT 23
48261: PUSH
48262: LD_INT 26
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 101
48278: PUSH
48279: LD_INT 102
48281: PUSH
48282: LD_INT 105
48284: PUSH
48285: LD_INT 106
48287: PUSH
48288: LD_INT 108
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: ST_TO_ADDR
48302: GO 51081
48304: LD_INT 3
48306: DOUBLE
48307: EQUAL
48308: IFTRUE 48312
48310: GO 48388
48312: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
48313: LD_ADDR_VAR 0 1
48317: PUSH
48318: LD_INT 2
48320: PUSH
48321: LD_INT 4
48323: PUSH
48324: LD_INT 5
48326: PUSH
48327: LD_INT 11
48329: PUSH
48330: LD_INT 12
48332: PUSH
48333: LD_INT 15
48335: PUSH
48336: LD_INT 16
48338: PUSH
48339: LD_INT 22
48341: PUSH
48342: LD_INT 26
48344: PUSH
48345: LD_INT 36
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 101
48362: PUSH
48363: LD_INT 102
48365: PUSH
48366: LD_INT 105
48368: PUSH
48369: LD_INT 106
48371: PUSH
48372: LD_INT 108
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: ST_TO_ADDR
48386: GO 51081
48388: LD_INT 4
48390: DOUBLE
48391: EQUAL
48392: IFTRUE 48396
48394: GO 48480
48396: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
48397: LD_ADDR_VAR 0 1
48401: PUSH
48402: LD_INT 2
48404: PUSH
48405: LD_INT 4
48407: PUSH
48408: LD_INT 5
48410: PUSH
48411: LD_INT 8
48413: PUSH
48414: LD_INT 11
48416: PUSH
48417: LD_INT 12
48419: PUSH
48420: LD_INT 15
48422: PUSH
48423: LD_INT 16
48425: PUSH
48426: LD_INT 22
48428: PUSH
48429: LD_INT 23
48431: PUSH
48432: LD_INT 26
48434: PUSH
48435: LD_INT 36
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 101
48454: PUSH
48455: LD_INT 102
48457: PUSH
48458: LD_INT 105
48460: PUSH
48461: LD_INT 106
48463: PUSH
48464: LD_INT 108
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: ST_TO_ADDR
48478: GO 51081
48480: LD_INT 5
48482: DOUBLE
48483: EQUAL
48484: IFTRUE 48488
48486: GO 48588
48488: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
48489: LD_ADDR_VAR 0 1
48493: PUSH
48494: LD_INT 2
48496: PUSH
48497: LD_INT 4
48499: PUSH
48500: LD_INT 5
48502: PUSH
48503: LD_INT 6
48505: PUSH
48506: LD_INT 8
48508: PUSH
48509: LD_INT 11
48511: PUSH
48512: LD_INT 12
48514: PUSH
48515: LD_INT 15
48517: PUSH
48518: LD_INT 16
48520: PUSH
48521: LD_INT 22
48523: PUSH
48524: LD_INT 23
48526: PUSH
48527: LD_INT 25
48529: PUSH
48530: LD_INT 26
48532: PUSH
48533: LD_INT 36
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 101
48554: PUSH
48555: LD_INT 102
48557: PUSH
48558: LD_INT 105
48560: PUSH
48561: LD_INT 106
48563: PUSH
48564: LD_INT 108
48566: PUSH
48567: LD_INT 109
48569: PUSH
48570: LD_INT 112
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: ST_TO_ADDR
48586: GO 51081
48588: LD_INT 6
48590: DOUBLE
48591: EQUAL
48592: IFTRUE 48596
48594: GO 48716
48596: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
48597: LD_ADDR_VAR 0 1
48601: PUSH
48602: LD_INT 2
48604: PUSH
48605: LD_INT 4
48607: PUSH
48608: LD_INT 5
48610: PUSH
48611: LD_INT 6
48613: PUSH
48614: LD_INT 8
48616: PUSH
48617: LD_INT 11
48619: PUSH
48620: LD_INT 12
48622: PUSH
48623: LD_INT 15
48625: PUSH
48626: LD_INT 16
48628: PUSH
48629: LD_INT 20
48631: PUSH
48632: LD_INT 21
48634: PUSH
48635: LD_INT 22
48637: PUSH
48638: LD_INT 23
48640: PUSH
48641: LD_INT 25
48643: PUSH
48644: LD_INT 26
48646: PUSH
48647: LD_INT 30
48649: PUSH
48650: LD_INT 31
48652: PUSH
48653: LD_INT 32
48655: PUSH
48656: LD_INT 36
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 101
48682: PUSH
48683: LD_INT 102
48685: PUSH
48686: LD_INT 105
48688: PUSH
48689: LD_INT 106
48691: PUSH
48692: LD_INT 108
48694: PUSH
48695: LD_INT 109
48697: PUSH
48698: LD_INT 112
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: ST_TO_ADDR
48714: GO 51081
48716: LD_INT 7
48718: DOUBLE
48719: EQUAL
48720: IFTRUE 48724
48722: GO 48824
48724: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
48725: LD_ADDR_VAR 0 1
48729: PUSH
48730: LD_INT 2
48732: PUSH
48733: LD_INT 4
48735: PUSH
48736: LD_INT 5
48738: PUSH
48739: LD_INT 7
48741: PUSH
48742: LD_INT 11
48744: PUSH
48745: LD_INT 12
48747: PUSH
48748: LD_INT 15
48750: PUSH
48751: LD_INT 16
48753: PUSH
48754: LD_INT 20
48756: PUSH
48757: LD_INT 21
48759: PUSH
48760: LD_INT 22
48762: PUSH
48763: LD_INT 23
48765: PUSH
48766: LD_INT 25
48768: PUSH
48769: LD_INT 26
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 101
48790: PUSH
48791: LD_INT 102
48793: PUSH
48794: LD_INT 103
48796: PUSH
48797: LD_INT 105
48799: PUSH
48800: LD_INT 106
48802: PUSH
48803: LD_INT 108
48805: PUSH
48806: LD_INT 112
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: ST_TO_ADDR
48822: GO 51081
48824: LD_INT 8
48826: DOUBLE
48827: EQUAL
48828: IFTRUE 48832
48830: GO 48960
48832: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
48833: LD_ADDR_VAR 0 1
48837: PUSH
48838: LD_INT 2
48840: PUSH
48841: LD_INT 4
48843: PUSH
48844: LD_INT 5
48846: PUSH
48847: LD_INT 6
48849: PUSH
48850: LD_INT 7
48852: PUSH
48853: LD_INT 8
48855: PUSH
48856: LD_INT 11
48858: PUSH
48859: LD_INT 12
48861: PUSH
48862: LD_INT 15
48864: PUSH
48865: LD_INT 16
48867: PUSH
48868: LD_INT 20
48870: PUSH
48871: LD_INT 21
48873: PUSH
48874: LD_INT 22
48876: PUSH
48877: LD_INT 23
48879: PUSH
48880: LD_INT 25
48882: PUSH
48883: LD_INT 26
48885: PUSH
48886: LD_INT 30
48888: PUSH
48889: LD_INT 31
48891: PUSH
48892: LD_INT 32
48894: PUSH
48895: LD_INT 36
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 101
48922: PUSH
48923: LD_INT 102
48925: PUSH
48926: LD_INT 103
48928: PUSH
48929: LD_INT 105
48931: PUSH
48932: LD_INT 106
48934: PUSH
48935: LD_INT 108
48937: PUSH
48938: LD_INT 109
48940: PUSH
48941: LD_INT 112
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: ST_TO_ADDR
48958: GO 51081
48960: LD_INT 9
48962: DOUBLE
48963: EQUAL
48964: IFTRUE 48968
48966: GO 49104
48968: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
48969: LD_ADDR_VAR 0 1
48973: PUSH
48974: LD_INT 2
48976: PUSH
48977: LD_INT 4
48979: PUSH
48980: LD_INT 5
48982: PUSH
48983: LD_INT 6
48985: PUSH
48986: LD_INT 7
48988: PUSH
48989: LD_INT 8
48991: PUSH
48992: LD_INT 11
48994: PUSH
48995: LD_INT 12
48997: PUSH
48998: LD_INT 15
49000: PUSH
49001: LD_INT 16
49003: PUSH
49004: LD_INT 20
49006: PUSH
49007: LD_INT 21
49009: PUSH
49010: LD_INT 22
49012: PUSH
49013: LD_INT 23
49015: PUSH
49016: LD_INT 25
49018: PUSH
49019: LD_INT 26
49021: PUSH
49022: LD_INT 28
49024: PUSH
49025: LD_INT 30
49027: PUSH
49028: LD_INT 31
49030: PUSH
49031: LD_INT 32
49033: PUSH
49034: LD_INT 36
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 101
49062: PUSH
49063: LD_INT 102
49065: PUSH
49066: LD_INT 103
49068: PUSH
49069: LD_INT 105
49071: PUSH
49072: LD_INT 106
49074: PUSH
49075: LD_INT 108
49077: PUSH
49078: LD_INT 109
49080: PUSH
49081: LD_INT 112
49083: PUSH
49084: LD_INT 114
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: ST_TO_ADDR
49102: GO 51081
49104: LD_INT 10
49106: DOUBLE
49107: EQUAL
49108: IFTRUE 49112
49110: GO 49296
49112: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
49113: LD_ADDR_VAR 0 1
49117: PUSH
49118: LD_INT 2
49120: PUSH
49121: LD_INT 4
49123: PUSH
49124: LD_INT 5
49126: PUSH
49127: LD_INT 6
49129: PUSH
49130: LD_INT 7
49132: PUSH
49133: LD_INT 8
49135: PUSH
49136: LD_INT 9
49138: PUSH
49139: LD_INT 10
49141: PUSH
49142: LD_INT 11
49144: PUSH
49145: LD_INT 12
49147: PUSH
49148: LD_INT 13
49150: PUSH
49151: LD_INT 14
49153: PUSH
49154: LD_INT 15
49156: PUSH
49157: LD_INT 16
49159: PUSH
49160: LD_INT 17
49162: PUSH
49163: LD_INT 18
49165: PUSH
49166: LD_INT 19
49168: PUSH
49169: LD_INT 20
49171: PUSH
49172: LD_INT 21
49174: PUSH
49175: LD_INT 22
49177: PUSH
49178: LD_INT 23
49180: PUSH
49181: LD_INT 24
49183: PUSH
49184: LD_INT 25
49186: PUSH
49187: LD_INT 26
49189: PUSH
49190: LD_INT 28
49192: PUSH
49193: LD_INT 30
49195: PUSH
49196: LD_INT 31
49198: PUSH
49199: LD_INT 32
49201: PUSH
49202: LD_INT 36
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 101
49238: PUSH
49239: LD_INT 102
49241: PUSH
49242: LD_INT 103
49244: PUSH
49245: LD_INT 104
49247: PUSH
49248: LD_INT 105
49250: PUSH
49251: LD_INT 106
49253: PUSH
49254: LD_INT 107
49256: PUSH
49257: LD_INT 108
49259: PUSH
49260: LD_INT 109
49262: PUSH
49263: LD_INT 110
49265: PUSH
49266: LD_INT 111
49268: PUSH
49269: LD_INT 112
49271: PUSH
49272: LD_INT 114
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: ST_TO_ADDR
49294: GO 51081
49296: LD_INT 11
49298: DOUBLE
49299: EQUAL
49300: IFTRUE 49304
49302: GO 49496
49304: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
49305: LD_ADDR_VAR 0 1
49309: PUSH
49310: LD_INT 2
49312: PUSH
49313: LD_INT 3
49315: PUSH
49316: LD_INT 4
49318: PUSH
49319: LD_INT 5
49321: PUSH
49322: LD_INT 6
49324: PUSH
49325: LD_INT 7
49327: PUSH
49328: LD_INT 8
49330: PUSH
49331: LD_INT 9
49333: PUSH
49334: LD_INT 10
49336: PUSH
49337: LD_INT 11
49339: PUSH
49340: LD_INT 12
49342: PUSH
49343: LD_INT 13
49345: PUSH
49346: LD_INT 14
49348: PUSH
49349: LD_INT 15
49351: PUSH
49352: LD_INT 16
49354: PUSH
49355: LD_INT 17
49357: PUSH
49358: LD_INT 18
49360: PUSH
49361: LD_INT 19
49363: PUSH
49364: LD_INT 20
49366: PUSH
49367: LD_INT 21
49369: PUSH
49370: LD_INT 22
49372: PUSH
49373: LD_INT 23
49375: PUSH
49376: LD_INT 24
49378: PUSH
49379: LD_INT 25
49381: PUSH
49382: LD_INT 26
49384: PUSH
49385: LD_INT 28
49387: PUSH
49388: LD_INT 30
49390: PUSH
49391: LD_INT 31
49393: PUSH
49394: LD_INT 32
49396: PUSH
49397: LD_INT 34
49399: PUSH
49400: LD_INT 36
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 101
49438: PUSH
49439: LD_INT 102
49441: PUSH
49442: LD_INT 103
49444: PUSH
49445: LD_INT 104
49447: PUSH
49448: LD_INT 105
49450: PUSH
49451: LD_INT 106
49453: PUSH
49454: LD_INT 107
49456: PUSH
49457: LD_INT 108
49459: PUSH
49460: LD_INT 109
49462: PUSH
49463: LD_INT 110
49465: PUSH
49466: LD_INT 111
49468: PUSH
49469: LD_INT 112
49471: PUSH
49472: LD_INT 114
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: ST_TO_ADDR
49494: GO 51081
49496: LD_INT 12
49498: DOUBLE
49499: EQUAL
49500: IFTRUE 49504
49502: GO 49712
49504: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
49505: LD_ADDR_VAR 0 1
49509: PUSH
49510: LD_INT 1
49512: PUSH
49513: LD_INT 2
49515: PUSH
49516: LD_INT 3
49518: PUSH
49519: LD_INT 4
49521: PUSH
49522: LD_INT 5
49524: PUSH
49525: LD_INT 6
49527: PUSH
49528: LD_INT 7
49530: PUSH
49531: LD_INT 8
49533: PUSH
49534: LD_INT 9
49536: PUSH
49537: LD_INT 10
49539: PUSH
49540: LD_INT 11
49542: PUSH
49543: LD_INT 12
49545: PUSH
49546: LD_INT 13
49548: PUSH
49549: LD_INT 14
49551: PUSH
49552: LD_INT 15
49554: PUSH
49555: LD_INT 16
49557: PUSH
49558: LD_INT 17
49560: PUSH
49561: LD_INT 18
49563: PUSH
49564: LD_INT 19
49566: PUSH
49567: LD_INT 20
49569: PUSH
49570: LD_INT 21
49572: PUSH
49573: LD_INT 22
49575: PUSH
49576: LD_INT 23
49578: PUSH
49579: LD_INT 24
49581: PUSH
49582: LD_INT 25
49584: PUSH
49585: LD_INT 26
49587: PUSH
49588: LD_INT 27
49590: PUSH
49591: LD_INT 28
49593: PUSH
49594: LD_INT 30
49596: PUSH
49597: LD_INT 31
49599: PUSH
49600: LD_INT 32
49602: PUSH
49603: LD_INT 33
49605: PUSH
49606: LD_INT 34
49608: PUSH
49609: LD_INT 36
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 101
49650: PUSH
49651: LD_INT 102
49653: PUSH
49654: LD_INT 103
49656: PUSH
49657: LD_INT 104
49659: PUSH
49660: LD_INT 105
49662: PUSH
49663: LD_INT 106
49665: PUSH
49666: LD_INT 107
49668: PUSH
49669: LD_INT 108
49671: PUSH
49672: LD_INT 109
49674: PUSH
49675: LD_INT 110
49677: PUSH
49678: LD_INT 111
49680: PUSH
49681: LD_INT 112
49683: PUSH
49684: LD_INT 113
49686: PUSH
49687: LD_INT 114
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: ST_TO_ADDR
49710: GO 51081
49712: LD_INT 13
49714: DOUBLE
49715: EQUAL
49716: IFTRUE 49720
49718: GO 49916
49720: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
49721: LD_ADDR_VAR 0 1
49725: PUSH
49726: LD_INT 1
49728: PUSH
49729: LD_INT 2
49731: PUSH
49732: LD_INT 3
49734: PUSH
49735: LD_INT 4
49737: PUSH
49738: LD_INT 5
49740: PUSH
49741: LD_INT 8
49743: PUSH
49744: LD_INT 9
49746: PUSH
49747: LD_INT 10
49749: PUSH
49750: LD_INT 11
49752: PUSH
49753: LD_INT 12
49755: PUSH
49756: LD_INT 14
49758: PUSH
49759: LD_INT 15
49761: PUSH
49762: LD_INT 16
49764: PUSH
49765: LD_INT 17
49767: PUSH
49768: LD_INT 18
49770: PUSH
49771: LD_INT 19
49773: PUSH
49774: LD_INT 20
49776: PUSH
49777: LD_INT 21
49779: PUSH
49780: LD_INT 22
49782: PUSH
49783: LD_INT 23
49785: PUSH
49786: LD_INT 24
49788: PUSH
49789: LD_INT 25
49791: PUSH
49792: LD_INT 26
49794: PUSH
49795: LD_INT 27
49797: PUSH
49798: LD_INT 28
49800: PUSH
49801: LD_INT 30
49803: PUSH
49804: LD_INT 31
49806: PUSH
49807: LD_INT 32
49809: PUSH
49810: LD_INT 33
49812: PUSH
49813: LD_INT 34
49815: PUSH
49816: LD_INT 36
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 101
49854: PUSH
49855: LD_INT 102
49857: PUSH
49858: LD_INT 103
49860: PUSH
49861: LD_INT 104
49863: PUSH
49864: LD_INT 105
49866: PUSH
49867: LD_INT 106
49869: PUSH
49870: LD_INT 107
49872: PUSH
49873: LD_INT 108
49875: PUSH
49876: LD_INT 109
49878: PUSH
49879: LD_INT 110
49881: PUSH
49882: LD_INT 111
49884: PUSH
49885: LD_INT 112
49887: PUSH
49888: LD_INT 113
49890: PUSH
49891: LD_INT 114
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: ST_TO_ADDR
49914: GO 51081
49916: LD_INT 14
49918: DOUBLE
49919: EQUAL
49920: IFTRUE 49924
49922: GO 50136
49924: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
49925: LD_ADDR_VAR 0 1
49929: PUSH
49930: LD_INT 1
49932: PUSH
49933: LD_INT 2
49935: PUSH
49936: LD_INT 3
49938: PUSH
49939: LD_INT 4
49941: PUSH
49942: LD_INT 5
49944: PUSH
49945: LD_INT 6
49947: PUSH
49948: LD_INT 7
49950: PUSH
49951: LD_INT 8
49953: PUSH
49954: LD_INT 9
49956: PUSH
49957: LD_INT 10
49959: PUSH
49960: LD_INT 11
49962: PUSH
49963: LD_INT 12
49965: PUSH
49966: LD_INT 13
49968: PUSH
49969: LD_INT 14
49971: PUSH
49972: LD_INT 15
49974: PUSH
49975: LD_INT 16
49977: PUSH
49978: LD_INT 17
49980: PUSH
49981: LD_INT 18
49983: PUSH
49984: LD_INT 19
49986: PUSH
49987: LD_INT 20
49989: PUSH
49990: LD_INT 21
49992: PUSH
49993: LD_INT 22
49995: PUSH
49996: LD_INT 23
49998: PUSH
49999: LD_INT 24
50001: PUSH
50002: LD_INT 25
50004: PUSH
50005: LD_INT 26
50007: PUSH
50008: LD_INT 27
50010: PUSH
50011: LD_INT 28
50013: PUSH
50014: LD_INT 29
50016: PUSH
50017: LD_INT 30
50019: PUSH
50020: LD_INT 31
50022: PUSH
50023: LD_INT 32
50025: PUSH
50026: LD_INT 33
50028: PUSH
50029: LD_INT 34
50031: PUSH
50032: LD_INT 36
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 101
50074: PUSH
50075: LD_INT 102
50077: PUSH
50078: LD_INT 103
50080: PUSH
50081: LD_INT 104
50083: PUSH
50084: LD_INT 105
50086: PUSH
50087: LD_INT 106
50089: PUSH
50090: LD_INT 107
50092: PUSH
50093: LD_INT 108
50095: PUSH
50096: LD_INT 109
50098: PUSH
50099: LD_INT 110
50101: PUSH
50102: LD_INT 111
50104: PUSH
50105: LD_INT 112
50107: PUSH
50108: LD_INT 113
50110: PUSH
50111: LD_INT 114
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: ST_TO_ADDR
50134: GO 51081
50136: LD_INT 15
50138: DOUBLE
50139: EQUAL
50140: IFTRUE 50144
50142: GO 50356
50144: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
50145: LD_ADDR_VAR 0 1
50149: PUSH
50150: LD_INT 1
50152: PUSH
50153: LD_INT 2
50155: PUSH
50156: LD_INT 3
50158: PUSH
50159: LD_INT 4
50161: PUSH
50162: LD_INT 5
50164: PUSH
50165: LD_INT 6
50167: PUSH
50168: LD_INT 7
50170: PUSH
50171: LD_INT 8
50173: PUSH
50174: LD_INT 9
50176: PUSH
50177: LD_INT 10
50179: PUSH
50180: LD_INT 11
50182: PUSH
50183: LD_INT 12
50185: PUSH
50186: LD_INT 13
50188: PUSH
50189: LD_INT 14
50191: PUSH
50192: LD_INT 15
50194: PUSH
50195: LD_INT 16
50197: PUSH
50198: LD_INT 17
50200: PUSH
50201: LD_INT 18
50203: PUSH
50204: LD_INT 19
50206: PUSH
50207: LD_INT 20
50209: PUSH
50210: LD_INT 21
50212: PUSH
50213: LD_INT 22
50215: PUSH
50216: LD_INT 23
50218: PUSH
50219: LD_INT 24
50221: PUSH
50222: LD_INT 25
50224: PUSH
50225: LD_INT 26
50227: PUSH
50228: LD_INT 27
50230: PUSH
50231: LD_INT 28
50233: PUSH
50234: LD_INT 29
50236: PUSH
50237: LD_INT 30
50239: PUSH
50240: LD_INT 31
50242: PUSH
50243: LD_INT 32
50245: PUSH
50246: LD_INT 33
50248: PUSH
50249: LD_INT 34
50251: PUSH
50252: LD_INT 36
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 101
50294: PUSH
50295: LD_INT 102
50297: PUSH
50298: LD_INT 103
50300: PUSH
50301: LD_INT 104
50303: PUSH
50304: LD_INT 105
50306: PUSH
50307: LD_INT 106
50309: PUSH
50310: LD_INT 107
50312: PUSH
50313: LD_INT 108
50315: PUSH
50316: LD_INT 109
50318: PUSH
50319: LD_INT 110
50321: PUSH
50322: LD_INT 111
50324: PUSH
50325: LD_INT 112
50327: PUSH
50328: LD_INT 113
50330: PUSH
50331: LD_INT 114
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: ST_TO_ADDR
50354: GO 51081
50356: LD_INT 16
50358: DOUBLE
50359: EQUAL
50360: IFTRUE 50364
50362: GO 50488
50364: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
50365: LD_ADDR_VAR 0 1
50369: PUSH
50370: LD_INT 2
50372: PUSH
50373: LD_INT 4
50375: PUSH
50376: LD_INT 5
50378: PUSH
50379: LD_INT 7
50381: PUSH
50382: LD_INT 11
50384: PUSH
50385: LD_INT 12
50387: PUSH
50388: LD_INT 15
50390: PUSH
50391: LD_INT 16
50393: PUSH
50394: LD_INT 20
50396: PUSH
50397: LD_INT 21
50399: PUSH
50400: LD_INT 22
50402: PUSH
50403: LD_INT 23
50405: PUSH
50406: LD_INT 25
50408: PUSH
50409: LD_INT 26
50411: PUSH
50412: LD_INT 30
50414: PUSH
50415: LD_INT 31
50417: PUSH
50418: LD_INT 32
50420: PUSH
50421: LD_INT 33
50423: PUSH
50424: LD_INT 34
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 101
50450: PUSH
50451: LD_INT 102
50453: PUSH
50454: LD_INT 103
50456: PUSH
50457: LD_INT 106
50459: PUSH
50460: LD_INT 108
50462: PUSH
50463: LD_INT 112
50465: PUSH
50466: LD_INT 113
50468: PUSH
50469: LD_INT 114
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: ST_TO_ADDR
50486: GO 51081
50488: LD_INT 17
50490: DOUBLE
50491: EQUAL
50492: IFTRUE 50496
50494: GO 50708
50496: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
50497: LD_ADDR_VAR 0 1
50501: PUSH
50502: LD_INT 1
50504: PUSH
50505: LD_INT 2
50507: PUSH
50508: LD_INT 3
50510: PUSH
50511: LD_INT 4
50513: PUSH
50514: LD_INT 5
50516: PUSH
50517: LD_INT 6
50519: PUSH
50520: LD_INT 7
50522: PUSH
50523: LD_INT 8
50525: PUSH
50526: LD_INT 9
50528: PUSH
50529: LD_INT 10
50531: PUSH
50532: LD_INT 11
50534: PUSH
50535: LD_INT 12
50537: PUSH
50538: LD_INT 13
50540: PUSH
50541: LD_INT 14
50543: PUSH
50544: LD_INT 15
50546: PUSH
50547: LD_INT 16
50549: PUSH
50550: LD_INT 17
50552: PUSH
50553: LD_INT 18
50555: PUSH
50556: LD_INT 19
50558: PUSH
50559: LD_INT 20
50561: PUSH
50562: LD_INT 21
50564: PUSH
50565: LD_INT 22
50567: PUSH
50568: LD_INT 23
50570: PUSH
50571: LD_INT 24
50573: PUSH
50574: LD_INT 25
50576: PUSH
50577: LD_INT 26
50579: PUSH
50580: LD_INT 27
50582: PUSH
50583: LD_INT 28
50585: PUSH
50586: LD_INT 29
50588: PUSH
50589: LD_INT 30
50591: PUSH
50592: LD_INT 31
50594: PUSH
50595: LD_INT 32
50597: PUSH
50598: LD_INT 33
50600: PUSH
50601: LD_INT 34
50603: PUSH
50604: LD_INT 36
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 101
50646: PUSH
50647: LD_INT 102
50649: PUSH
50650: LD_INT 103
50652: PUSH
50653: LD_INT 104
50655: PUSH
50656: LD_INT 105
50658: PUSH
50659: LD_INT 106
50661: PUSH
50662: LD_INT 107
50664: PUSH
50665: LD_INT 108
50667: PUSH
50668: LD_INT 109
50670: PUSH
50671: LD_INT 110
50673: PUSH
50674: LD_INT 111
50676: PUSH
50677: LD_INT 112
50679: PUSH
50680: LD_INT 113
50682: PUSH
50683: LD_INT 114
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: ST_TO_ADDR
50706: GO 51081
50708: LD_INT 18
50710: DOUBLE
50711: EQUAL
50712: IFTRUE 50716
50714: GO 50852
50716: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
50717: LD_ADDR_VAR 0 1
50721: PUSH
50722: LD_INT 2
50724: PUSH
50725: LD_INT 4
50727: PUSH
50728: LD_INT 5
50730: PUSH
50731: LD_INT 7
50733: PUSH
50734: LD_INT 11
50736: PUSH
50737: LD_INT 12
50739: PUSH
50740: LD_INT 15
50742: PUSH
50743: LD_INT 16
50745: PUSH
50746: LD_INT 20
50748: PUSH
50749: LD_INT 21
50751: PUSH
50752: LD_INT 22
50754: PUSH
50755: LD_INT 23
50757: PUSH
50758: LD_INT 25
50760: PUSH
50761: LD_INT 26
50763: PUSH
50764: LD_INT 30
50766: PUSH
50767: LD_INT 31
50769: PUSH
50770: LD_INT 32
50772: PUSH
50773: LD_INT 33
50775: PUSH
50776: LD_INT 34
50778: PUSH
50779: LD_INT 35
50781: PUSH
50782: LD_INT 36
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 101
50810: PUSH
50811: LD_INT 102
50813: PUSH
50814: LD_INT 103
50816: PUSH
50817: LD_INT 106
50819: PUSH
50820: LD_INT 108
50822: PUSH
50823: LD_INT 112
50825: PUSH
50826: LD_INT 113
50828: PUSH
50829: LD_INT 114
50831: PUSH
50832: LD_INT 115
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: ST_TO_ADDR
50850: GO 51081
50852: LD_INT 19
50854: DOUBLE
50855: EQUAL
50856: IFTRUE 50860
50858: GO 51080
50860: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
50861: LD_ADDR_VAR 0 1
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: LD_INT 2
50871: PUSH
50872: LD_INT 3
50874: PUSH
50875: LD_INT 4
50877: PUSH
50878: LD_INT 5
50880: PUSH
50881: LD_INT 6
50883: PUSH
50884: LD_INT 7
50886: PUSH
50887: LD_INT 8
50889: PUSH
50890: LD_INT 9
50892: PUSH
50893: LD_INT 10
50895: PUSH
50896: LD_INT 11
50898: PUSH
50899: LD_INT 12
50901: PUSH
50902: LD_INT 13
50904: PUSH
50905: LD_INT 14
50907: PUSH
50908: LD_INT 15
50910: PUSH
50911: LD_INT 16
50913: PUSH
50914: LD_INT 17
50916: PUSH
50917: LD_INT 18
50919: PUSH
50920: LD_INT 19
50922: PUSH
50923: LD_INT 20
50925: PUSH
50926: LD_INT 21
50928: PUSH
50929: LD_INT 22
50931: PUSH
50932: LD_INT 23
50934: PUSH
50935: LD_INT 24
50937: PUSH
50938: LD_INT 25
50940: PUSH
50941: LD_INT 26
50943: PUSH
50944: LD_INT 27
50946: PUSH
50947: LD_INT 28
50949: PUSH
50950: LD_INT 29
50952: PUSH
50953: LD_INT 30
50955: PUSH
50956: LD_INT 31
50958: PUSH
50959: LD_INT 32
50961: PUSH
50962: LD_INT 33
50964: PUSH
50965: LD_INT 34
50967: PUSH
50968: LD_INT 35
50970: PUSH
50971: LD_INT 36
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 101
51014: PUSH
51015: LD_INT 102
51017: PUSH
51018: LD_INT 103
51020: PUSH
51021: LD_INT 104
51023: PUSH
51024: LD_INT 105
51026: PUSH
51027: LD_INT 106
51029: PUSH
51030: LD_INT 107
51032: PUSH
51033: LD_INT 108
51035: PUSH
51036: LD_INT 109
51038: PUSH
51039: LD_INT 110
51041: PUSH
51042: LD_INT 111
51044: PUSH
51045: LD_INT 112
51047: PUSH
51048: LD_INT 113
51050: PUSH
51051: LD_INT 114
51053: PUSH
51054: LD_INT 115
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: ST_TO_ADDR
51078: GO 51081
51080: POP
// end else
51081: GO 51300
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
51083: LD_ADDR_VAR 0 1
51087: PUSH
51088: LD_INT 1
51090: PUSH
51091: LD_INT 2
51093: PUSH
51094: LD_INT 3
51096: PUSH
51097: LD_INT 4
51099: PUSH
51100: LD_INT 5
51102: PUSH
51103: LD_INT 6
51105: PUSH
51106: LD_INT 7
51108: PUSH
51109: LD_INT 8
51111: PUSH
51112: LD_INT 9
51114: PUSH
51115: LD_INT 10
51117: PUSH
51118: LD_INT 11
51120: PUSH
51121: LD_INT 12
51123: PUSH
51124: LD_INT 13
51126: PUSH
51127: LD_INT 14
51129: PUSH
51130: LD_INT 15
51132: PUSH
51133: LD_INT 16
51135: PUSH
51136: LD_INT 17
51138: PUSH
51139: LD_INT 18
51141: PUSH
51142: LD_INT 19
51144: PUSH
51145: LD_INT 20
51147: PUSH
51148: LD_INT 21
51150: PUSH
51151: LD_INT 22
51153: PUSH
51154: LD_INT 23
51156: PUSH
51157: LD_INT 24
51159: PUSH
51160: LD_INT 25
51162: PUSH
51163: LD_INT 26
51165: PUSH
51166: LD_INT 27
51168: PUSH
51169: LD_INT 28
51171: PUSH
51172: LD_INT 29
51174: PUSH
51175: LD_INT 30
51177: PUSH
51178: LD_INT 31
51180: PUSH
51181: LD_INT 32
51183: PUSH
51184: LD_INT 33
51186: PUSH
51187: LD_INT 34
51189: PUSH
51190: LD_INT 35
51192: PUSH
51193: LD_INT 36
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 101
51236: PUSH
51237: LD_INT 102
51239: PUSH
51240: LD_INT 103
51242: PUSH
51243: LD_INT 104
51245: PUSH
51246: LD_INT 105
51248: PUSH
51249: LD_INT 106
51251: PUSH
51252: LD_INT 107
51254: PUSH
51255: LD_INT 108
51257: PUSH
51258: LD_INT 109
51260: PUSH
51261: LD_INT 110
51263: PUSH
51264: LD_INT 111
51266: PUSH
51267: LD_INT 112
51269: PUSH
51270: LD_INT 113
51272: PUSH
51273: LD_INT 114
51275: PUSH
51276: LD_INT 115
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: ST_TO_ADDR
// if result then
51300: LD_VAR 0 1
51304: IFFALSE 51593
// begin normal :=  ;
51306: LD_ADDR_VAR 0 3
51310: PUSH
51311: LD_STRING 
51313: ST_TO_ADDR
// hardcore :=  ;
51314: LD_ADDR_VAR 0 4
51318: PUSH
51319: LD_STRING 
51321: ST_TO_ADDR
// for i = 1 to normalCounter do
51322: LD_ADDR_VAR 0 5
51326: PUSH
51327: DOUBLE
51328: LD_INT 1
51330: DEC
51331: ST_TO_ADDR
51332: LD_EXP 32
51336: PUSH
51337: FOR_TO
51338: IFFALSE 51439
// begin tmp := 0 ;
51340: LD_ADDR_VAR 0 2
51344: PUSH
51345: LD_STRING 0
51347: ST_TO_ADDR
// if result [ 1 ] then
51348: LD_VAR 0 1
51352: PUSH
51353: LD_INT 1
51355: ARRAY
51356: IFFALSE 51421
// if result [ 1 ] [ 1 ] = i then
51358: LD_VAR 0 1
51362: PUSH
51363: LD_INT 1
51365: ARRAY
51366: PUSH
51367: LD_INT 1
51369: ARRAY
51370: PUSH
51371: LD_VAR 0 5
51375: EQUAL
51376: IFFALSE 51421
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
51378: LD_ADDR_VAR 0 1
51382: PUSH
51383: LD_VAR 0 1
51387: PPUSH
51388: LD_INT 1
51390: PPUSH
51391: LD_VAR 0 1
51395: PUSH
51396: LD_INT 1
51398: ARRAY
51399: PPUSH
51400: LD_INT 1
51402: PPUSH
51403: CALL_OW 3
51407: PPUSH
51408: CALL_OW 1
51412: ST_TO_ADDR
// tmp := 1 ;
51413: LD_ADDR_VAR 0 2
51417: PUSH
51418: LD_STRING 1
51420: ST_TO_ADDR
// end ; normal := normal & tmp ;
51421: LD_ADDR_VAR 0 3
51425: PUSH
51426: LD_VAR 0 3
51430: PUSH
51431: LD_VAR 0 2
51435: STR
51436: ST_TO_ADDR
// end ;
51437: GO 51337
51439: POP
51440: POP
// for i = 1 to hardcoreCounter do
51441: LD_ADDR_VAR 0 5
51445: PUSH
51446: DOUBLE
51447: LD_INT 1
51449: DEC
51450: ST_TO_ADDR
51451: LD_EXP 33
51455: PUSH
51456: FOR_TO
51457: IFFALSE 51562
// begin tmp := 0 ;
51459: LD_ADDR_VAR 0 2
51463: PUSH
51464: LD_STRING 0
51466: ST_TO_ADDR
// if result [ 2 ] then
51467: LD_VAR 0 1
51471: PUSH
51472: LD_INT 2
51474: ARRAY
51475: IFFALSE 51544
// if result [ 2 ] [ 1 ] = 100 + i then
51477: LD_VAR 0 1
51481: PUSH
51482: LD_INT 2
51484: ARRAY
51485: PUSH
51486: LD_INT 1
51488: ARRAY
51489: PUSH
51490: LD_INT 100
51492: PUSH
51493: LD_VAR 0 5
51497: PLUS
51498: EQUAL
51499: IFFALSE 51544
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
51501: LD_ADDR_VAR 0 1
51505: PUSH
51506: LD_VAR 0 1
51510: PPUSH
51511: LD_INT 2
51513: PPUSH
51514: LD_VAR 0 1
51518: PUSH
51519: LD_INT 2
51521: ARRAY
51522: PPUSH
51523: LD_INT 1
51525: PPUSH
51526: CALL_OW 3
51530: PPUSH
51531: CALL_OW 1
51535: ST_TO_ADDR
// tmp := 1 ;
51536: LD_ADDR_VAR 0 2
51540: PUSH
51541: LD_STRING 1
51543: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
51544: LD_ADDR_VAR 0 4
51548: PUSH
51549: LD_VAR 0 4
51553: PUSH
51554: LD_VAR 0 2
51558: STR
51559: ST_TO_ADDR
// end ;
51560: GO 51456
51562: POP
51563: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
51564: LD_STRING getStreamItemsFromMission("
51566: PUSH
51567: LD_VAR 0 3
51571: STR
51572: PUSH
51573: LD_STRING ","
51575: STR
51576: PUSH
51577: LD_VAR 0 4
51581: STR
51582: PUSH
51583: LD_STRING ")
51585: STR
51586: PPUSH
51587: CALL_OW 559
// end else
51591: GO 51600
// ToLua ( getStreamItemsFromMission("","") ) ;
51593: LD_STRING getStreamItemsFromMission("","")
51595: PPUSH
51596: CALL_OW 559
// end ;
51600: LD_VAR 0 1
51604: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
51605: LD_EXP 31
51609: PUSH
51610: LD_EXP 36
51614: AND
51615: IFFALSE 51739
51617: GO 51619
51619: DISABLE
51620: LD_INT 0
51622: PPUSH
51623: PPUSH
// begin enable ;
51624: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
51625: LD_ADDR_VAR 0 2
51629: PUSH
51630: LD_INT 22
51632: PUSH
51633: LD_OWVAR 2
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 2
51644: PUSH
51645: LD_INT 34
51647: PUSH
51648: LD_INT 7
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 34
51657: PUSH
51658: LD_INT 45
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 34
51667: PUSH
51668: LD_INT 28
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 34
51677: PUSH
51678: LD_INT 47
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PPUSH
51696: CALL_OW 69
51700: ST_TO_ADDR
// if not tmp then
51701: LD_VAR 0 2
51705: NOT
51706: IFFALSE 51710
// exit ;
51708: GO 51739
// for i in tmp do
51710: LD_ADDR_VAR 0 1
51714: PUSH
51715: LD_VAR 0 2
51719: PUSH
51720: FOR_IN
51721: IFFALSE 51737
// begin SetLives ( i , 0 ) ;
51723: LD_VAR 0 1
51727: PPUSH
51728: LD_INT 0
51730: PPUSH
51731: CALL_OW 234
// end ;
51735: GO 51720
51737: POP
51738: POP
// end ;
51739: PPOPN 2
51741: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
51742: LD_EXP 31
51746: PUSH
51747: LD_EXP 37
51751: AND
51752: IFFALSE 51836
51754: GO 51756
51756: DISABLE
51757: LD_INT 0
51759: PPUSH
51760: PPUSH
// begin enable ;
51761: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
51762: LD_ADDR_VAR 0 2
51766: PUSH
51767: LD_INT 22
51769: PUSH
51770: LD_OWVAR 2
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 32
51781: PUSH
51782: LD_INT 3
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PPUSH
51793: CALL_OW 69
51797: ST_TO_ADDR
// if not tmp then
51798: LD_VAR 0 2
51802: NOT
51803: IFFALSE 51807
// exit ;
51805: GO 51836
// for i in tmp do
51807: LD_ADDR_VAR 0 1
51811: PUSH
51812: LD_VAR 0 2
51816: PUSH
51817: FOR_IN
51818: IFFALSE 51834
// begin SetLives ( i , 0 ) ;
51820: LD_VAR 0 1
51824: PPUSH
51825: LD_INT 0
51827: PPUSH
51828: CALL_OW 234
// end ;
51832: GO 51817
51834: POP
51835: POP
// end ;
51836: PPOPN 2
51838: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
51839: LD_EXP 31
51843: PUSH
51844: LD_EXP 34
51848: AND
51849: IFFALSE 51942
51851: GO 51853
51853: DISABLE
51854: LD_INT 0
51856: PPUSH
// begin enable ;
51857: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
51858: LD_ADDR_VAR 0 1
51862: PUSH
51863: LD_INT 22
51865: PUSH
51866: LD_OWVAR 2
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 2
51877: PUSH
51878: LD_INT 25
51880: PUSH
51881: LD_INT 5
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 25
51890: PUSH
51891: LD_INT 9
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 25
51900: PUSH
51901: LD_INT 8
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PPUSH
51918: CALL_OW 69
51922: PUSH
51923: FOR_IN
51924: IFFALSE 51940
// begin SetClass ( i , 1 ) ;
51926: LD_VAR 0 1
51930: PPUSH
51931: LD_INT 1
51933: PPUSH
51934: CALL_OW 336
// end ;
51938: GO 51923
51940: POP
51941: POP
// end ;
51942: PPOPN 1
51944: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
51945: LD_EXP 31
51949: PUSH
51950: LD_EXP 35
51954: AND
51955: PUSH
51956: LD_OWVAR 65
51960: PUSH
51961: LD_INT 7
51963: LESS
51964: AND
51965: IFFALSE 51979
51967: GO 51969
51969: DISABLE
// begin enable ;
51970: ENABLE
// game_speed := 7 ;
51971: LD_ADDR_OWVAR 65
51975: PUSH
51976: LD_INT 7
51978: ST_TO_ADDR
// end ;
51979: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
51980: LD_EXP 31
51984: PUSH
51985: LD_EXP 38
51989: AND
51990: IFFALSE 52192
51992: GO 51994
51994: DISABLE
51995: LD_INT 0
51997: PPUSH
51998: PPUSH
51999: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
52000: LD_ADDR_VAR 0 3
52004: PUSH
52005: LD_INT 81
52007: PUSH
52008: LD_OWVAR 2
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 21
52019: PUSH
52020: LD_INT 1
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PPUSH
52031: CALL_OW 69
52035: ST_TO_ADDR
// if not tmp then
52036: LD_VAR 0 3
52040: NOT
52041: IFFALSE 52045
// exit ;
52043: GO 52192
// if tmp > 5 then
52045: LD_VAR 0 3
52049: PUSH
52050: LD_INT 5
52052: GREATER
52053: IFFALSE 52065
// k := 5 else
52055: LD_ADDR_VAR 0 2
52059: PUSH
52060: LD_INT 5
52062: ST_TO_ADDR
52063: GO 52075
// k := tmp ;
52065: LD_ADDR_VAR 0 2
52069: PUSH
52070: LD_VAR 0 3
52074: ST_TO_ADDR
// for i := 1 to k do
52075: LD_ADDR_VAR 0 1
52079: PUSH
52080: DOUBLE
52081: LD_INT 1
52083: DEC
52084: ST_TO_ADDR
52085: LD_VAR 0 2
52089: PUSH
52090: FOR_TO
52091: IFFALSE 52190
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
52093: LD_VAR 0 3
52097: PUSH
52098: LD_VAR 0 1
52102: ARRAY
52103: PPUSH
52104: LD_VAR 0 1
52108: PUSH
52109: LD_INT 4
52111: MOD
52112: PUSH
52113: LD_INT 1
52115: PLUS
52116: PPUSH
52117: CALL_OW 259
52121: PUSH
52122: LD_INT 10
52124: LESS
52125: IFFALSE 52188
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
52127: LD_VAR 0 3
52131: PUSH
52132: LD_VAR 0 1
52136: ARRAY
52137: PPUSH
52138: LD_VAR 0 1
52142: PUSH
52143: LD_INT 4
52145: MOD
52146: PUSH
52147: LD_INT 1
52149: PLUS
52150: PPUSH
52151: LD_VAR 0 3
52155: PUSH
52156: LD_VAR 0 1
52160: ARRAY
52161: PPUSH
52162: LD_VAR 0 1
52166: PUSH
52167: LD_INT 4
52169: MOD
52170: PUSH
52171: LD_INT 1
52173: PLUS
52174: PPUSH
52175: CALL_OW 259
52179: PUSH
52180: LD_INT 1
52182: PLUS
52183: PPUSH
52184: CALL_OW 237
52188: GO 52090
52190: POP
52191: POP
// end ;
52192: PPOPN 3
52194: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
52195: LD_EXP 31
52199: PUSH
52200: LD_EXP 39
52204: AND
52205: IFFALSE 52225
52207: GO 52209
52209: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
52210: LD_INT 4
52212: PPUSH
52213: LD_OWVAR 2
52217: PPUSH
52218: LD_INT 0
52220: PPUSH
52221: CALL_OW 324
52225: END
// every 0 0$1 trigger StreamModeActive and sShovel do
52226: LD_EXP 31
52230: PUSH
52231: LD_EXP 68
52235: AND
52236: IFFALSE 52256
52238: GO 52240
52240: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
52241: LD_INT 19
52243: PPUSH
52244: LD_OWVAR 2
52248: PPUSH
52249: LD_INT 0
52251: PPUSH
52252: CALL_OW 324
52256: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
52257: LD_EXP 31
52261: PUSH
52262: LD_EXP 40
52266: AND
52267: IFFALSE 52369
52269: GO 52271
52271: DISABLE
52272: LD_INT 0
52274: PPUSH
52275: PPUSH
// begin enable ;
52276: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
52277: LD_ADDR_VAR 0 2
52281: PUSH
52282: LD_INT 22
52284: PUSH
52285: LD_OWVAR 2
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 2
52296: PUSH
52297: LD_INT 34
52299: PUSH
52300: LD_INT 11
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 34
52309: PUSH
52310: LD_INT 30
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: LIST
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PPUSH
52326: CALL_OW 69
52330: ST_TO_ADDR
// if not tmp then
52331: LD_VAR 0 2
52335: NOT
52336: IFFALSE 52340
// exit ;
52338: GO 52369
// for i in tmp do
52340: LD_ADDR_VAR 0 1
52344: PUSH
52345: LD_VAR 0 2
52349: PUSH
52350: FOR_IN
52351: IFFALSE 52367
// begin SetLives ( i , 0 ) ;
52353: LD_VAR 0 1
52357: PPUSH
52358: LD_INT 0
52360: PPUSH
52361: CALL_OW 234
// end ;
52365: GO 52350
52367: POP
52368: POP
// end ;
52369: PPOPN 2
52371: END
// every 0 0$1 trigger StreamModeActive and sBunker do
52372: LD_EXP 31
52376: PUSH
52377: LD_EXP 41
52381: AND
52382: IFFALSE 52402
52384: GO 52386
52386: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
52387: LD_INT 32
52389: PPUSH
52390: LD_OWVAR 2
52394: PPUSH
52395: LD_INT 0
52397: PPUSH
52398: CALL_OW 324
52402: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
52403: LD_EXP 31
52407: PUSH
52408: LD_EXP 42
52412: AND
52413: IFFALSE 52594
52415: GO 52417
52417: DISABLE
52418: LD_INT 0
52420: PPUSH
52421: PPUSH
52422: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
52423: LD_ADDR_VAR 0 2
52427: PUSH
52428: LD_INT 22
52430: PUSH
52431: LD_OWVAR 2
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 33
52442: PUSH
52443: LD_INT 3
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PPUSH
52454: CALL_OW 69
52458: ST_TO_ADDR
// if not tmp then
52459: LD_VAR 0 2
52463: NOT
52464: IFFALSE 52468
// exit ;
52466: GO 52594
// side := 0 ;
52468: LD_ADDR_VAR 0 3
52472: PUSH
52473: LD_INT 0
52475: ST_TO_ADDR
// for i := 1 to 8 do
52476: LD_ADDR_VAR 0 1
52480: PUSH
52481: DOUBLE
52482: LD_INT 1
52484: DEC
52485: ST_TO_ADDR
52486: LD_INT 8
52488: PUSH
52489: FOR_TO
52490: IFFALSE 52538
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
52492: LD_OWVAR 2
52496: PUSH
52497: LD_VAR 0 1
52501: NONEQUAL
52502: PUSH
52503: LD_OWVAR 2
52507: PPUSH
52508: LD_VAR 0 1
52512: PPUSH
52513: CALL_OW 81
52517: PUSH
52518: LD_INT 2
52520: EQUAL
52521: AND
52522: IFFALSE 52536
// begin side := i ;
52524: LD_ADDR_VAR 0 3
52528: PUSH
52529: LD_VAR 0 1
52533: ST_TO_ADDR
// break ;
52534: GO 52538
// end ;
52536: GO 52489
52538: POP
52539: POP
// if not side then
52540: LD_VAR 0 3
52544: NOT
52545: IFFALSE 52549
// exit ;
52547: GO 52594
// for i := 1 to tmp do
52549: LD_ADDR_VAR 0 1
52553: PUSH
52554: DOUBLE
52555: LD_INT 1
52557: DEC
52558: ST_TO_ADDR
52559: LD_VAR 0 2
52563: PUSH
52564: FOR_TO
52565: IFFALSE 52592
// if Prob ( 60 ) then
52567: LD_INT 60
52569: PPUSH
52570: CALL_OW 13
52574: IFFALSE 52590
// SetSide ( i , side ) ;
52576: LD_VAR 0 1
52580: PPUSH
52581: LD_VAR 0 3
52585: PPUSH
52586: CALL_OW 235
52590: GO 52564
52592: POP
52593: POP
// end ;
52594: PPOPN 3
52596: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
52597: LD_EXP 31
52601: PUSH
52602: LD_EXP 44
52606: AND
52607: IFFALSE 52726
52609: GO 52611
52611: DISABLE
52612: LD_INT 0
52614: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
52615: LD_ADDR_VAR 0 1
52619: PUSH
52620: LD_INT 22
52622: PUSH
52623: LD_OWVAR 2
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 21
52634: PUSH
52635: LD_INT 1
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 3
52644: PUSH
52645: LD_INT 23
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: LIST
52663: PPUSH
52664: CALL_OW 69
52668: PUSH
52669: FOR_IN
52670: IFFALSE 52724
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
52672: LD_VAR 0 1
52676: PPUSH
52677: CALL_OW 257
52681: PUSH
52682: LD_INT 1
52684: PUSH
52685: LD_INT 2
52687: PUSH
52688: LD_INT 3
52690: PUSH
52691: LD_INT 4
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: IN
52700: IFFALSE 52722
// SetClass ( un , rand ( 1 , 4 ) ) ;
52702: LD_VAR 0 1
52706: PPUSH
52707: LD_INT 1
52709: PPUSH
52710: LD_INT 4
52712: PPUSH
52713: CALL_OW 12
52717: PPUSH
52718: CALL_OW 336
52722: GO 52669
52724: POP
52725: POP
// end ;
52726: PPOPN 1
52728: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
52729: LD_EXP 31
52733: PUSH
52734: LD_EXP 43
52738: AND
52739: IFFALSE 52818
52741: GO 52743
52743: DISABLE
52744: LD_INT 0
52746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
52747: LD_ADDR_VAR 0 1
52751: PUSH
52752: LD_INT 22
52754: PUSH
52755: LD_OWVAR 2
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 21
52766: PUSH
52767: LD_INT 3
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PPUSH
52778: CALL_OW 69
52782: ST_TO_ADDR
// if not tmp then
52783: LD_VAR 0 1
52787: NOT
52788: IFFALSE 52792
// exit ;
52790: GO 52818
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
52792: LD_VAR 0 1
52796: PUSH
52797: LD_INT 1
52799: PPUSH
52800: LD_VAR 0 1
52804: PPUSH
52805: CALL_OW 12
52809: ARRAY
52810: PPUSH
52811: LD_INT 100
52813: PPUSH
52814: CALL_OW 234
// end ;
52818: PPOPN 1
52820: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
52821: LD_EXP 31
52825: PUSH
52826: LD_EXP 45
52830: AND
52831: IFFALSE 52929
52833: GO 52835
52835: DISABLE
52836: LD_INT 0
52838: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
52839: LD_ADDR_VAR 0 1
52843: PUSH
52844: LD_INT 22
52846: PUSH
52847: LD_OWVAR 2
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 21
52858: PUSH
52859: LD_INT 1
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PPUSH
52870: CALL_OW 69
52874: ST_TO_ADDR
// if not tmp then
52875: LD_VAR 0 1
52879: NOT
52880: IFFALSE 52884
// exit ;
52882: GO 52929
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
52884: LD_VAR 0 1
52888: PUSH
52889: LD_INT 1
52891: PPUSH
52892: LD_VAR 0 1
52896: PPUSH
52897: CALL_OW 12
52901: ARRAY
52902: PPUSH
52903: LD_INT 1
52905: PPUSH
52906: LD_INT 4
52908: PPUSH
52909: CALL_OW 12
52913: PPUSH
52914: LD_INT 3000
52916: PPUSH
52917: LD_INT 9000
52919: PPUSH
52920: CALL_OW 12
52924: PPUSH
52925: CALL_OW 492
// end ;
52929: PPOPN 1
52931: END
// every 0 0$1 trigger StreamModeActive and sDepot do
52932: LD_EXP 31
52936: PUSH
52937: LD_EXP 46
52941: AND
52942: IFFALSE 52962
52944: GO 52946
52946: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
52947: LD_INT 1
52949: PPUSH
52950: LD_OWVAR 2
52954: PPUSH
52955: LD_INT 0
52957: PPUSH
52958: CALL_OW 324
52962: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
52963: LD_EXP 31
52967: PUSH
52968: LD_EXP 47
52972: AND
52973: IFFALSE 53056
52975: GO 52977
52977: DISABLE
52978: LD_INT 0
52980: PPUSH
52981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
52982: LD_ADDR_VAR 0 2
52986: PUSH
52987: LD_INT 22
52989: PUSH
52990: LD_OWVAR 2
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 21
53001: PUSH
53002: LD_INT 3
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PPUSH
53013: CALL_OW 69
53017: ST_TO_ADDR
// if not tmp then
53018: LD_VAR 0 2
53022: NOT
53023: IFFALSE 53027
// exit ;
53025: GO 53056
// for i in tmp do
53027: LD_ADDR_VAR 0 1
53031: PUSH
53032: LD_VAR 0 2
53036: PUSH
53037: FOR_IN
53038: IFFALSE 53054
// SetBLevel ( i , 10 ) ;
53040: LD_VAR 0 1
53044: PPUSH
53045: LD_INT 10
53047: PPUSH
53048: CALL_OW 241
53052: GO 53037
53054: POP
53055: POP
// end ;
53056: PPOPN 2
53058: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
53059: LD_EXP 31
53063: PUSH
53064: LD_EXP 48
53068: AND
53069: IFFALSE 53180
53071: GO 53073
53073: DISABLE
53074: LD_INT 0
53076: PPUSH
53077: PPUSH
53078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
53079: LD_ADDR_VAR 0 3
53083: PUSH
53084: LD_INT 22
53086: PUSH
53087: LD_OWVAR 2
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 25
53098: PUSH
53099: LD_INT 1
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PPUSH
53110: CALL_OW 69
53114: ST_TO_ADDR
// if not tmp then
53115: LD_VAR 0 3
53119: NOT
53120: IFFALSE 53124
// exit ;
53122: GO 53180
// un := tmp [ rand ( 1 , tmp ) ] ;
53124: LD_ADDR_VAR 0 2
53128: PUSH
53129: LD_VAR 0 3
53133: PUSH
53134: LD_INT 1
53136: PPUSH
53137: LD_VAR 0 3
53141: PPUSH
53142: CALL_OW 12
53146: ARRAY
53147: ST_TO_ADDR
// if Crawls ( un ) then
53148: LD_VAR 0 2
53152: PPUSH
53153: CALL_OW 318
53157: IFFALSE 53168
// ComWalk ( un ) ;
53159: LD_VAR 0 2
53163: PPUSH
53164: CALL_OW 138
// SetClass ( un , class_sniper ) ;
53168: LD_VAR 0 2
53172: PPUSH
53173: LD_INT 5
53175: PPUSH
53176: CALL_OW 336
// end ;
53180: PPOPN 3
53182: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
53183: LD_EXP 31
53187: PUSH
53188: LD_EXP 49
53192: AND
53193: PUSH
53194: LD_OWVAR 67
53198: PUSH
53199: LD_INT 3
53201: LESS
53202: AND
53203: IFFALSE 53222
53205: GO 53207
53207: DISABLE
// Difficulty := Difficulty + 1 ;
53208: LD_ADDR_OWVAR 67
53212: PUSH
53213: LD_OWVAR 67
53217: PUSH
53218: LD_INT 1
53220: PLUS
53221: ST_TO_ADDR
53222: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
53223: LD_EXP 31
53227: PUSH
53228: LD_EXP 50
53232: AND
53233: IFFALSE 53336
53235: GO 53237
53237: DISABLE
53238: LD_INT 0
53240: PPUSH
// begin for i := 1 to 5 do
53241: LD_ADDR_VAR 0 1
53245: PUSH
53246: DOUBLE
53247: LD_INT 1
53249: DEC
53250: ST_TO_ADDR
53251: LD_INT 5
53253: PUSH
53254: FOR_TO
53255: IFFALSE 53334
// begin uc_nation := nation_nature ;
53257: LD_ADDR_OWVAR 21
53261: PUSH
53262: LD_INT 0
53264: ST_TO_ADDR
// uc_side := 0 ;
53265: LD_ADDR_OWVAR 20
53269: PUSH
53270: LD_INT 0
53272: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
53273: LD_ADDR_OWVAR 29
53277: PUSH
53278: LD_INT 12
53280: PUSH
53281: LD_INT 12
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: ST_TO_ADDR
// hc_agressivity := 20 ;
53288: LD_ADDR_OWVAR 35
53292: PUSH
53293: LD_INT 20
53295: ST_TO_ADDR
// hc_class := class_tiger ;
53296: LD_ADDR_OWVAR 28
53300: PUSH
53301: LD_INT 14
53303: ST_TO_ADDR
// hc_gallery :=  ;
53304: LD_ADDR_OWVAR 33
53308: PUSH
53309: LD_STRING 
53311: ST_TO_ADDR
// hc_name :=  ;
53312: LD_ADDR_OWVAR 26
53316: PUSH
53317: LD_STRING 
53319: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
53320: CALL_OW 44
53324: PPUSH
53325: LD_INT 0
53327: PPUSH
53328: CALL_OW 51
// end ;
53332: GO 53254
53334: POP
53335: POP
// end ;
53336: PPOPN 1
53338: END
// every 0 0$1 trigger StreamModeActive and sBomb do
53339: LD_EXP 31
53343: PUSH
53344: LD_EXP 51
53348: AND
53349: IFFALSE 53358
53351: GO 53353
53353: DISABLE
// StreamSibBomb ;
53354: CALL 53359 0 0
53358: END
// export function StreamSibBomb ; var i , x , y ; begin
53359: LD_INT 0
53361: PPUSH
53362: PPUSH
53363: PPUSH
53364: PPUSH
// result := false ;
53365: LD_ADDR_VAR 0 1
53369: PUSH
53370: LD_INT 0
53372: ST_TO_ADDR
// for i := 1 to 16 do
53373: LD_ADDR_VAR 0 2
53377: PUSH
53378: DOUBLE
53379: LD_INT 1
53381: DEC
53382: ST_TO_ADDR
53383: LD_INT 16
53385: PUSH
53386: FOR_TO
53387: IFFALSE 53586
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
53389: LD_ADDR_VAR 0 3
53393: PUSH
53394: LD_INT 10
53396: PUSH
53397: LD_INT 20
53399: PUSH
53400: LD_INT 30
53402: PUSH
53403: LD_INT 40
53405: PUSH
53406: LD_INT 50
53408: PUSH
53409: LD_INT 60
53411: PUSH
53412: LD_INT 70
53414: PUSH
53415: LD_INT 80
53417: PUSH
53418: LD_INT 90
53420: PUSH
53421: LD_INT 100
53423: PUSH
53424: LD_INT 110
53426: PUSH
53427: LD_INT 120
53429: PUSH
53430: LD_INT 130
53432: PUSH
53433: LD_INT 140
53435: PUSH
53436: LD_INT 150
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 1
53458: PPUSH
53459: LD_INT 15
53461: PPUSH
53462: CALL_OW 12
53466: ARRAY
53467: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
53468: LD_ADDR_VAR 0 4
53472: PUSH
53473: LD_INT 10
53475: PUSH
53476: LD_INT 20
53478: PUSH
53479: LD_INT 30
53481: PUSH
53482: LD_INT 40
53484: PUSH
53485: LD_INT 50
53487: PUSH
53488: LD_INT 60
53490: PUSH
53491: LD_INT 70
53493: PUSH
53494: LD_INT 80
53496: PUSH
53497: LD_INT 90
53499: PUSH
53500: LD_INT 100
53502: PUSH
53503: LD_INT 110
53505: PUSH
53506: LD_INT 120
53508: PUSH
53509: LD_INT 130
53511: PUSH
53512: LD_INT 140
53514: PUSH
53515: LD_INT 150
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 1
53537: PPUSH
53538: LD_INT 15
53540: PPUSH
53541: CALL_OW 12
53545: ARRAY
53546: ST_TO_ADDR
// if ValidHex ( x , y ) then
53547: LD_VAR 0 3
53551: PPUSH
53552: LD_VAR 0 4
53556: PPUSH
53557: CALL_OW 488
53561: IFFALSE 53584
// begin result := [ x , y ] ;
53563: LD_ADDR_VAR 0 1
53567: PUSH
53568: LD_VAR 0 3
53572: PUSH
53573: LD_VAR 0 4
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: ST_TO_ADDR
// break ;
53582: GO 53586
// end ; end ;
53584: GO 53386
53586: POP
53587: POP
// if result then
53588: LD_VAR 0 1
53592: IFFALSE 53652
// begin ToLua ( playSibBomb() ) ;
53594: LD_STRING playSibBomb()
53596: PPUSH
53597: CALL_OW 559
// wait ( 0 0$14 ) ;
53601: LD_INT 490
53603: PPUSH
53604: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
53608: LD_VAR 0 1
53612: PUSH
53613: LD_INT 1
53615: ARRAY
53616: PPUSH
53617: LD_VAR 0 1
53621: PUSH
53622: LD_INT 2
53624: ARRAY
53625: PPUSH
53626: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
53630: LD_VAR 0 1
53634: PUSH
53635: LD_INT 1
53637: ARRAY
53638: PPUSH
53639: LD_VAR 0 1
53643: PUSH
53644: LD_INT 2
53646: ARRAY
53647: PPUSH
53648: CALL_OW 429
// end ; end ;
53652: LD_VAR 0 1
53656: RET
// every 0 0$1 trigger StreamModeActive and sReset do
53657: LD_EXP 31
53661: PUSH
53662: LD_EXP 53
53666: AND
53667: IFFALSE 53679
53669: GO 53671
53671: DISABLE
// YouLost (  ) ;
53672: LD_STRING 
53674: PPUSH
53675: CALL_OW 104
53679: END
// every 0 0$1 trigger StreamModeActive and sFog do
53680: LD_EXP 31
53684: PUSH
53685: LD_EXP 52
53689: AND
53690: IFFALSE 53704
53692: GO 53694
53694: DISABLE
// FogOff ( your_side ) ;
53695: LD_OWVAR 2
53699: PPUSH
53700: CALL_OW 344
53704: END
// every 0 0$1 trigger StreamModeActive and sSun do
53705: LD_EXP 31
53709: PUSH
53710: LD_EXP 54
53714: AND
53715: IFFALSE 53743
53717: GO 53719
53719: DISABLE
// begin solar_recharge_percent := 0 ;
53720: LD_ADDR_OWVAR 79
53724: PUSH
53725: LD_INT 0
53727: ST_TO_ADDR
// wait ( 5 5$00 ) ;
53728: LD_INT 10500
53730: PPUSH
53731: CALL_OW 67
// solar_recharge_percent := 100 ;
53735: LD_ADDR_OWVAR 79
53739: PUSH
53740: LD_INT 100
53742: ST_TO_ADDR
// end ;
53743: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
53744: LD_EXP 31
53748: PUSH
53749: LD_EXP 55
53753: AND
53754: IFFALSE 53993
53756: GO 53758
53758: DISABLE
53759: LD_INT 0
53761: PPUSH
53762: PPUSH
53763: PPUSH
// begin tmp := [ ] ;
53764: LD_ADDR_VAR 0 3
53768: PUSH
53769: EMPTY
53770: ST_TO_ADDR
// for i := 1 to 6 do
53771: LD_ADDR_VAR 0 1
53775: PUSH
53776: DOUBLE
53777: LD_INT 1
53779: DEC
53780: ST_TO_ADDR
53781: LD_INT 6
53783: PUSH
53784: FOR_TO
53785: IFFALSE 53890
// begin uc_nation := nation_nature ;
53787: LD_ADDR_OWVAR 21
53791: PUSH
53792: LD_INT 0
53794: ST_TO_ADDR
// uc_side := 0 ;
53795: LD_ADDR_OWVAR 20
53799: PUSH
53800: LD_INT 0
53802: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
53803: LD_ADDR_OWVAR 29
53807: PUSH
53808: LD_INT 12
53810: PUSH
53811: LD_INT 12
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: ST_TO_ADDR
// hc_agressivity := 20 ;
53818: LD_ADDR_OWVAR 35
53822: PUSH
53823: LD_INT 20
53825: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
53826: LD_ADDR_OWVAR 28
53830: PUSH
53831: LD_INT 17
53833: ST_TO_ADDR
// hc_gallery :=  ;
53834: LD_ADDR_OWVAR 33
53838: PUSH
53839: LD_STRING 
53841: ST_TO_ADDR
// hc_name :=  ;
53842: LD_ADDR_OWVAR 26
53846: PUSH
53847: LD_STRING 
53849: ST_TO_ADDR
// un := CreateHuman ;
53850: LD_ADDR_VAR 0 2
53854: PUSH
53855: CALL_OW 44
53859: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
53860: LD_VAR 0 2
53864: PPUSH
53865: LD_INT 1
53867: PPUSH
53868: CALL_OW 51
// tmp := tmp ^ un ;
53872: LD_ADDR_VAR 0 3
53876: PUSH
53877: LD_VAR 0 3
53881: PUSH
53882: LD_VAR 0 2
53886: ADD
53887: ST_TO_ADDR
// end ;
53888: GO 53784
53890: POP
53891: POP
// repeat wait ( 0 0$1 ) ;
53892: LD_INT 35
53894: PPUSH
53895: CALL_OW 67
// for un in tmp do
53899: LD_ADDR_VAR 0 2
53903: PUSH
53904: LD_VAR 0 3
53908: PUSH
53909: FOR_IN
53910: IFFALSE 53984
// begin if IsDead ( un ) then
53912: LD_VAR 0 2
53916: PPUSH
53917: CALL_OW 301
53921: IFFALSE 53941
// begin tmp := tmp diff un ;
53923: LD_ADDR_VAR 0 3
53927: PUSH
53928: LD_VAR 0 3
53932: PUSH
53933: LD_VAR 0 2
53937: DIFF
53938: ST_TO_ADDR
// continue ;
53939: GO 53909
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
53941: LD_VAR 0 2
53945: PPUSH
53946: LD_INT 3
53948: PUSH
53949: LD_INT 22
53951: PUSH
53952: LD_INT 0
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PPUSH
53963: CALL_OW 69
53967: PPUSH
53968: LD_VAR 0 2
53972: PPUSH
53973: CALL_OW 74
53977: PPUSH
53978: CALL_OW 115
// end ;
53982: GO 53909
53984: POP
53985: POP
// until not tmp ;
53986: LD_VAR 0 3
53990: NOT
53991: IFFALSE 53892
// end ;
53993: PPOPN 3
53995: END
// every 0 0$1 trigger StreamModeActive and sTroll do
53996: LD_EXP 31
54000: PUSH
54001: LD_EXP 56
54005: AND
54006: IFFALSE 54060
54008: GO 54010
54010: DISABLE
// begin ToLua ( displayTroll(); ) ;
54011: LD_STRING displayTroll();
54013: PPUSH
54014: CALL_OW 559
// wait ( 3 3$00 ) ;
54018: LD_INT 6300
54020: PPUSH
54021: CALL_OW 67
// ToLua ( hideTroll(); ) ;
54025: LD_STRING hideTroll();
54027: PPUSH
54028: CALL_OW 559
// wait ( 1 1$00 ) ;
54032: LD_INT 2100
54034: PPUSH
54035: CALL_OW 67
// ToLua ( displayTroll(); ) ;
54039: LD_STRING displayTroll();
54041: PPUSH
54042: CALL_OW 559
// wait ( 1 1$00 ) ;
54046: LD_INT 2100
54048: PPUSH
54049: CALL_OW 67
// ToLua ( hideTroll(); ) ;
54053: LD_STRING hideTroll();
54055: PPUSH
54056: CALL_OW 559
// end ;
54060: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
54061: LD_EXP 31
54065: PUSH
54066: LD_EXP 57
54070: AND
54071: IFFALSE 54134
54073: GO 54075
54075: DISABLE
54076: LD_INT 0
54078: PPUSH
// begin p := 0 ;
54079: LD_ADDR_VAR 0 1
54083: PUSH
54084: LD_INT 0
54086: ST_TO_ADDR
// repeat game_speed := 1 ;
54087: LD_ADDR_OWVAR 65
54091: PUSH
54092: LD_INT 1
54094: ST_TO_ADDR
// wait ( 0 0$1 ) ;
54095: LD_INT 35
54097: PPUSH
54098: CALL_OW 67
// p := p + 1 ;
54102: LD_ADDR_VAR 0 1
54106: PUSH
54107: LD_VAR 0 1
54111: PUSH
54112: LD_INT 1
54114: PLUS
54115: ST_TO_ADDR
// until p >= 60 ;
54116: LD_VAR 0 1
54120: PUSH
54121: LD_INT 60
54123: GREATEREQUAL
54124: IFFALSE 54087
// game_speed := 4 ;
54126: LD_ADDR_OWVAR 65
54130: PUSH
54131: LD_INT 4
54133: ST_TO_ADDR
// end ;
54134: PPOPN 1
54136: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
54137: LD_EXP 31
54141: PUSH
54142: LD_EXP 58
54146: AND
54147: IFFALSE 54293
54149: GO 54151
54151: DISABLE
54152: LD_INT 0
54154: PPUSH
54155: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54156: LD_ADDR_VAR 0 1
54160: PUSH
54161: LD_INT 22
54163: PUSH
54164: LD_OWVAR 2
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 2
54175: PUSH
54176: LD_INT 30
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 30
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: LIST
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PPUSH
54205: CALL_OW 69
54209: ST_TO_ADDR
// if not depot then
54210: LD_VAR 0 1
54214: NOT
54215: IFFALSE 54219
// exit ;
54217: GO 54293
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
54219: LD_ADDR_VAR 0 2
54223: PUSH
54224: LD_VAR 0 1
54228: PUSH
54229: LD_INT 1
54231: PPUSH
54232: LD_VAR 0 1
54236: PPUSH
54237: CALL_OW 12
54241: ARRAY
54242: PPUSH
54243: CALL_OW 274
54247: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
54248: LD_VAR 0 2
54252: PPUSH
54253: LD_INT 1
54255: PPUSH
54256: LD_INT 0
54258: PPUSH
54259: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
54263: LD_VAR 0 2
54267: PPUSH
54268: LD_INT 2
54270: PPUSH
54271: LD_INT 0
54273: PPUSH
54274: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
54278: LD_VAR 0 2
54282: PPUSH
54283: LD_INT 3
54285: PPUSH
54286: LD_INT 0
54288: PPUSH
54289: CALL_OW 277
// end ;
54293: PPOPN 2
54295: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
54296: LD_EXP 31
54300: PUSH
54301: LD_EXP 59
54305: AND
54306: IFFALSE 54403
54308: GO 54310
54310: DISABLE
54311: LD_INT 0
54313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
54314: LD_ADDR_VAR 0 1
54318: PUSH
54319: LD_INT 22
54321: PUSH
54322: LD_OWVAR 2
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 21
54333: PUSH
54334: LD_INT 1
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 3
54343: PUSH
54344: LD_INT 23
54346: PUSH
54347: LD_INT 0
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: LIST
54362: PPUSH
54363: CALL_OW 69
54367: ST_TO_ADDR
// if not tmp then
54368: LD_VAR 0 1
54372: NOT
54373: IFFALSE 54377
// exit ;
54375: GO 54403
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
54377: LD_VAR 0 1
54381: PUSH
54382: LD_INT 1
54384: PPUSH
54385: LD_VAR 0 1
54389: PPUSH
54390: CALL_OW 12
54394: ARRAY
54395: PPUSH
54396: LD_INT 200
54398: PPUSH
54399: CALL_OW 234
// end ;
54403: PPOPN 1
54405: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
54406: LD_EXP 31
54410: PUSH
54411: LD_EXP 60
54415: AND
54416: IFFALSE 54495
54418: GO 54420
54420: DISABLE
54421: LD_INT 0
54423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
54424: LD_ADDR_VAR 0 1
54428: PUSH
54429: LD_INT 22
54431: PUSH
54432: LD_OWVAR 2
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 21
54443: PUSH
54444: LD_INT 2
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PPUSH
54455: CALL_OW 69
54459: ST_TO_ADDR
// if not tmp then
54460: LD_VAR 0 1
54464: NOT
54465: IFFALSE 54469
// exit ;
54467: GO 54495
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
54469: LD_VAR 0 1
54473: PUSH
54474: LD_INT 1
54476: PPUSH
54477: LD_VAR 0 1
54481: PPUSH
54482: CALL_OW 12
54486: ARRAY
54487: PPUSH
54488: LD_INT 60
54490: PPUSH
54491: CALL_OW 234
// end ;
54495: PPOPN 1
54497: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
54498: LD_EXP 31
54502: PUSH
54503: LD_EXP 61
54507: AND
54508: IFFALSE 54607
54510: GO 54512
54512: DISABLE
54513: LD_INT 0
54515: PPUSH
54516: PPUSH
// begin enable ;
54517: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
54518: LD_ADDR_VAR 0 1
54522: PUSH
54523: LD_INT 22
54525: PUSH
54526: LD_OWVAR 2
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 61
54537: PUSH
54538: EMPTY
54539: LIST
54540: PUSH
54541: LD_INT 33
54543: PUSH
54544: LD_INT 2
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: LIST
54555: PPUSH
54556: CALL_OW 69
54560: ST_TO_ADDR
// if not tmp then
54561: LD_VAR 0 1
54565: NOT
54566: IFFALSE 54570
// exit ;
54568: GO 54607
// for i in tmp do
54570: LD_ADDR_VAR 0 2
54574: PUSH
54575: LD_VAR 0 1
54579: PUSH
54580: FOR_IN
54581: IFFALSE 54605
// if IsControledBy ( i ) then
54583: LD_VAR 0 2
54587: PPUSH
54588: CALL_OW 312
54592: IFFALSE 54603
// ComUnlink ( i ) ;
54594: LD_VAR 0 2
54598: PPUSH
54599: CALL_OW 136
54603: GO 54580
54605: POP
54606: POP
// end ;
54607: PPOPN 2
54609: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
54610: LD_EXP 31
54614: PUSH
54615: LD_EXP 62
54619: AND
54620: IFFALSE 54760
54622: GO 54624
54624: DISABLE
54625: LD_INT 0
54627: PPUSH
54628: PPUSH
// begin ToLua ( displayPowell(); ) ;
54629: LD_STRING displayPowell();
54631: PPUSH
54632: CALL_OW 559
// uc_side := 0 ;
54636: LD_ADDR_OWVAR 20
54640: PUSH
54641: LD_INT 0
54643: ST_TO_ADDR
// uc_nation := 2 ;
54644: LD_ADDR_OWVAR 21
54648: PUSH
54649: LD_INT 2
54651: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
54652: LD_ADDR_OWVAR 37
54656: PUSH
54657: LD_INT 14
54659: ST_TO_ADDR
// vc_engine := engine_siberite ;
54660: LD_ADDR_OWVAR 39
54664: PUSH
54665: LD_INT 3
54667: ST_TO_ADDR
// vc_control := control_apeman ;
54668: LD_ADDR_OWVAR 38
54672: PUSH
54673: LD_INT 5
54675: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
54676: LD_ADDR_OWVAR 40
54680: PUSH
54681: LD_INT 29
54683: ST_TO_ADDR
// un := CreateVehicle ;
54684: LD_ADDR_VAR 0 2
54688: PUSH
54689: CALL_OW 45
54693: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
54694: LD_VAR 0 2
54698: PPUSH
54699: LD_INT 1
54701: PPUSH
54702: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
54706: LD_INT 35
54708: PPUSH
54709: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
54713: LD_VAR 0 2
54717: PPUSH
54718: LD_INT 22
54720: PUSH
54721: LD_OWVAR 2
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PPUSH
54730: CALL_OW 69
54734: PPUSH
54735: LD_VAR 0 2
54739: PPUSH
54740: CALL_OW 74
54744: PPUSH
54745: CALL_OW 115
// until IsDead ( un ) ;
54749: LD_VAR 0 2
54753: PPUSH
54754: CALL_OW 301
54758: IFFALSE 54706
// end ;
54760: PPOPN 2
54762: END
// every 0 0$1 trigger StreamModeActive and sStu do
54763: LD_EXP 31
54767: PUSH
54768: LD_EXP 70
54772: AND
54773: IFFALSE 54789
54775: GO 54777
54777: DISABLE
// begin ToLua ( displayStucuk(); ) ;
54778: LD_STRING displayStucuk();
54780: PPUSH
54781: CALL_OW 559
// ResetFog ;
54785: CALL_OW 335
// end ;
54789: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
54790: LD_EXP 31
54794: PUSH
54795: LD_EXP 63
54799: AND
54800: IFFALSE 54941
54802: GO 54804
54804: DISABLE
54805: LD_INT 0
54807: PPUSH
54808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54809: LD_ADDR_VAR 0 2
54813: PUSH
54814: LD_INT 22
54816: PUSH
54817: LD_OWVAR 2
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 21
54828: PUSH
54829: LD_INT 1
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PPUSH
54840: CALL_OW 69
54844: ST_TO_ADDR
// if not tmp then
54845: LD_VAR 0 2
54849: NOT
54850: IFFALSE 54854
// exit ;
54852: GO 54941
// un := tmp [ rand ( 1 , tmp ) ] ;
54854: LD_ADDR_VAR 0 1
54858: PUSH
54859: LD_VAR 0 2
54863: PUSH
54864: LD_INT 1
54866: PPUSH
54867: LD_VAR 0 2
54871: PPUSH
54872: CALL_OW 12
54876: ARRAY
54877: ST_TO_ADDR
// SetSide ( un , 0 ) ;
54878: LD_VAR 0 1
54882: PPUSH
54883: LD_INT 0
54885: PPUSH
54886: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
54890: LD_VAR 0 1
54894: PPUSH
54895: LD_OWVAR 3
54899: PUSH
54900: LD_VAR 0 1
54904: DIFF
54905: PPUSH
54906: LD_VAR 0 1
54910: PPUSH
54911: CALL_OW 74
54915: PPUSH
54916: CALL_OW 115
// wait ( 0 0$20 ) ;
54920: LD_INT 700
54922: PPUSH
54923: CALL_OW 67
// SetSide ( un , your_side ) ;
54927: LD_VAR 0 1
54931: PPUSH
54932: LD_OWVAR 2
54936: PPUSH
54937: CALL_OW 235
// end ;
54941: PPOPN 2
54943: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
54944: LD_EXP 31
54948: PUSH
54949: LD_EXP 64
54953: AND
54954: IFFALSE 55060
54956: GO 54958
54958: DISABLE
54959: LD_INT 0
54961: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54962: LD_ADDR_VAR 0 1
54966: PUSH
54967: LD_INT 22
54969: PUSH
54970: LD_OWVAR 2
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 2
54981: PUSH
54982: LD_INT 30
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 30
54994: PUSH
54995: LD_INT 1
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: LIST
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PPUSH
55011: CALL_OW 69
55015: ST_TO_ADDR
// if not depot then
55016: LD_VAR 0 1
55020: NOT
55021: IFFALSE 55025
// exit ;
55023: GO 55060
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
55025: LD_VAR 0 1
55029: PUSH
55030: LD_INT 1
55032: ARRAY
55033: PPUSH
55034: CALL_OW 250
55038: PPUSH
55039: LD_VAR 0 1
55043: PUSH
55044: LD_INT 1
55046: ARRAY
55047: PPUSH
55048: CALL_OW 251
55052: PPUSH
55053: LD_INT 70
55055: PPUSH
55056: CALL_OW 495
// end ;
55060: PPOPN 1
55062: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
55063: LD_EXP 31
55067: PUSH
55068: LD_EXP 65
55072: AND
55073: IFFALSE 55284
55075: GO 55077
55077: DISABLE
55078: LD_INT 0
55080: PPUSH
55081: PPUSH
55082: PPUSH
55083: PPUSH
55084: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55085: LD_ADDR_VAR 0 5
55089: PUSH
55090: LD_INT 22
55092: PUSH
55093: LD_OWVAR 2
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 21
55104: PUSH
55105: LD_INT 1
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PPUSH
55116: CALL_OW 69
55120: ST_TO_ADDR
// if not tmp then
55121: LD_VAR 0 5
55125: NOT
55126: IFFALSE 55130
// exit ;
55128: GO 55284
// for i in tmp do
55130: LD_ADDR_VAR 0 1
55134: PUSH
55135: LD_VAR 0 5
55139: PUSH
55140: FOR_IN
55141: IFFALSE 55282
// begin d := rand ( 0 , 5 ) ;
55143: LD_ADDR_VAR 0 4
55147: PUSH
55148: LD_INT 0
55150: PPUSH
55151: LD_INT 5
55153: PPUSH
55154: CALL_OW 12
55158: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
55159: LD_ADDR_VAR 0 2
55163: PUSH
55164: LD_VAR 0 1
55168: PPUSH
55169: CALL_OW 250
55173: PPUSH
55174: LD_VAR 0 4
55178: PPUSH
55179: LD_INT 3
55181: PPUSH
55182: LD_INT 12
55184: PPUSH
55185: CALL_OW 12
55189: PPUSH
55190: CALL_OW 272
55194: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
55195: LD_ADDR_VAR 0 3
55199: PUSH
55200: LD_VAR 0 1
55204: PPUSH
55205: CALL_OW 251
55209: PPUSH
55210: LD_VAR 0 4
55214: PPUSH
55215: LD_INT 3
55217: PPUSH
55218: LD_INT 12
55220: PPUSH
55221: CALL_OW 12
55225: PPUSH
55226: CALL_OW 273
55230: ST_TO_ADDR
// if ValidHex ( x , y ) then
55231: LD_VAR 0 2
55235: PPUSH
55236: LD_VAR 0 3
55240: PPUSH
55241: CALL_OW 488
55245: IFFALSE 55280
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
55247: LD_VAR 0 1
55251: PPUSH
55252: LD_VAR 0 2
55256: PPUSH
55257: LD_VAR 0 3
55261: PPUSH
55262: LD_INT 3
55264: PPUSH
55265: LD_INT 6
55267: PPUSH
55268: CALL_OW 12
55272: PPUSH
55273: LD_INT 1
55275: PPUSH
55276: CALL_OW 483
// end ;
55280: GO 55140
55282: POP
55283: POP
// end ;
55284: PPOPN 5
55286: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
55287: LD_EXP 31
55291: PUSH
55292: LD_EXP 66
55296: AND
55297: IFFALSE 55391
55299: GO 55301
55301: DISABLE
55302: LD_INT 0
55304: PPUSH
55305: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
55306: LD_ADDR_VAR 0 2
55310: PUSH
55311: LD_INT 22
55313: PUSH
55314: LD_OWVAR 2
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 32
55325: PUSH
55326: LD_INT 1
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 21
55335: PUSH
55336: LD_INT 2
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: LIST
55347: PPUSH
55348: CALL_OW 69
55352: ST_TO_ADDR
// if not tmp then
55353: LD_VAR 0 2
55357: NOT
55358: IFFALSE 55362
// exit ;
55360: GO 55391
// for i in tmp do
55362: LD_ADDR_VAR 0 1
55366: PUSH
55367: LD_VAR 0 2
55371: PUSH
55372: FOR_IN
55373: IFFALSE 55389
// SetFuel ( i , 0 ) ;
55375: LD_VAR 0 1
55379: PPUSH
55380: LD_INT 0
55382: PPUSH
55383: CALL_OW 240
55387: GO 55372
55389: POP
55390: POP
// end ;
55391: PPOPN 2
55393: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
55394: LD_EXP 31
55398: PUSH
55399: LD_EXP 67
55403: AND
55404: IFFALSE 55470
55406: GO 55408
55408: DISABLE
55409: LD_INT 0
55411: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
55412: LD_ADDR_VAR 0 1
55416: PUSH
55417: LD_INT 22
55419: PUSH
55420: LD_OWVAR 2
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 30
55431: PUSH
55432: LD_INT 29
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PPUSH
55443: CALL_OW 69
55447: ST_TO_ADDR
// if not tmp then
55448: LD_VAR 0 1
55452: NOT
55453: IFFALSE 55457
// exit ;
55455: GO 55470
// DestroyUnit ( tmp [ 1 ] ) ;
55457: LD_VAR 0 1
55461: PUSH
55462: LD_INT 1
55464: ARRAY
55465: PPUSH
55466: CALL_OW 65
// end ;
55470: PPOPN 1
55472: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
55473: LD_EXP 31
55477: PUSH
55478: LD_EXP 69
55482: AND
55483: IFFALSE 55612
55485: GO 55487
55487: DISABLE
55488: LD_INT 0
55490: PPUSH
// begin uc_side := 0 ;
55491: LD_ADDR_OWVAR 20
55495: PUSH
55496: LD_INT 0
55498: ST_TO_ADDR
// uc_nation := nation_arabian ;
55499: LD_ADDR_OWVAR 21
55503: PUSH
55504: LD_INT 2
55506: ST_TO_ADDR
// hc_gallery :=  ;
55507: LD_ADDR_OWVAR 33
55511: PUSH
55512: LD_STRING 
55514: ST_TO_ADDR
// hc_name :=  ;
55515: LD_ADDR_OWVAR 26
55519: PUSH
55520: LD_STRING 
55522: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
55523: LD_INT 1
55525: PPUSH
55526: LD_INT 11
55528: PPUSH
55529: LD_INT 10
55531: PPUSH
55532: CALL_OW 380
// un := CreateHuman ;
55536: LD_ADDR_VAR 0 1
55540: PUSH
55541: CALL_OW 44
55545: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
55546: LD_VAR 0 1
55550: PPUSH
55551: LD_INT 1
55553: PPUSH
55554: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
55558: LD_INT 35
55560: PPUSH
55561: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
55565: LD_VAR 0 1
55569: PPUSH
55570: LD_INT 22
55572: PUSH
55573: LD_OWVAR 2
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PPUSH
55582: CALL_OW 69
55586: PPUSH
55587: LD_VAR 0 1
55591: PPUSH
55592: CALL_OW 74
55596: PPUSH
55597: CALL_OW 115
// until IsDead ( un ) ;
55601: LD_VAR 0 1
55605: PPUSH
55606: CALL_OW 301
55610: IFFALSE 55558
// end ;
55612: PPOPN 1
55614: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
55615: LD_EXP 31
55619: PUSH
55620: LD_EXP 71
55624: AND
55625: IFFALSE 55637
55627: GO 55629
55629: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
55630: LD_STRING earthquake(getX(game), 0, 32)
55632: PPUSH
55633: CALL_OW 559
55637: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
55638: LD_EXP 31
55642: PUSH
55643: LD_EXP 72
55647: AND
55648: IFFALSE 55739
55650: GO 55652
55652: DISABLE
55653: LD_INT 0
55655: PPUSH
// begin enable ;
55656: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
55657: LD_ADDR_VAR 0 1
55661: PUSH
55662: LD_INT 22
55664: PUSH
55665: LD_OWVAR 2
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 21
55676: PUSH
55677: LD_INT 2
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 33
55686: PUSH
55687: LD_INT 3
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: LIST
55698: PPUSH
55699: CALL_OW 69
55703: ST_TO_ADDR
// if not tmp then
55704: LD_VAR 0 1
55708: NOT
55709: IFFALSE 55713
// exit ;
55711: GO 55739
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
55713: LD_VAR 0 1
55717: PUSH
55718: LD_INT 1
55720: PPUSH
55721: LD_VAR 0 1
55725: PPUSH
55726: CALL_OW 12
55730: ARRAY
55731: PPUSH
55732: LD_INT 1
55734: PPUSH
55735: CALL_OW 234
// end ;
55739: PPOPN 1
55741: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
55742: LD_EXP 31
55746: PUSH
55747: LD_EXP 73
55751: AND
55752: IFFALSE 55893
55754: GO 55756
55756: DISABLE
55757: LD_INT 0
55759: PPUSH
55760: PPUSH
55761: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55762: LD_ADDR_VAR 0 3
55766: PUSH
55767: LD_INT 22
55769: PUSH
55770: LD_OWVAR 2
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 25
55781: PUSH
55782: LD_INT 1
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PPUSH
55793: CALL_OW 69
55797: ST_TO_ADDR
// if not tmp then
55798: LD_VAR 0 3
55802: NOT
55803: IFFALSE 55807
// exit ;
55805: GO 55893
// un := tmp [ rand ( 1 , tmp ) ] ;
55807: LD_ADDR_VAR 0 2
55811: PUSH
55812: LD_VAR 0 3
55816: PUSH
55817: LD_INT 1
55819: PPUSH
55820: LD_VAR 0 3
55824: PPUSH
55825: CALL_OW 12
55829: ARRAY
55830: ST_TO_ADDR
// if Crawls ( un ) then
55831: LD_VAR 0 2
55835: PPUSH
55836: CALL_OW 318
55840: IFFALSE 55851
// ComWalk ( un ) ;
55842: LD_VAR 0 2
55846: PPUSH
55847: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
55851: LD_VAR 0 2
55855: PPUSH
55856: LD_INT 9
55858: PPUSH
55859: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
55863: LD_INT 28
55865: PPUSH
55866: LD_OWVAR 2
55870: PPUSH
55871: LD_INT 2
55873: PPUSH
55874: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
55878: LD_INT 29
55880: PPUSH
55881: LD_OWVAR 2
55885: PPUSH
55886: LD_INT 2
55888: PPUSH
55889: CALL_OW 322
// end ;
55893: PPOPN 3
55895: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
55896: LD_EXP 31
55900: PUSH
55901: LD_EXP 74
55905: AND
55906: IFFALSE 56017
55908: GO 55910
55910: DISABLE
55911: LD_INT 0
55913: PPUSH
55914: PPUSH
55915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55916: LD_ADDR_VAR 0 3
55920: PUSH
55921: LD_INT 22
55923: PUSH
55924: LD_OWVAR 2
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 25
55935: PUSH
55936: LD_INT 1
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PPUSH
55947: CALL_OW 69
55951: ST_TO_ADDR
// if not tmp then
55952: LD_VAR 0 3
55956: NOT
55957: IFFALSE 55961
// exit ;
55959: GO 56017
// un := tmp [ rand ( 1 , tmp ) ] ;
55961: LD_ADDR_VAR 0 2
55965: PUSH
55966: LD_VAR 0 3
55970: PUSH
55971: LD_INT 1
55973: PPUSH
55974: LD_VAR 0 3
55978: PPUSH
55979: CALL_OW 12
55983: ARRAY
55984: ST_TO_ADDR
// if Crawls ( un ) then
55985: LD_VAR 0 2
55989: PPUSH
55990: CALL_OW 318
55994: IFFALSE 56005
// ComWalk ( un ) ;
55996: LD_VAR 0 2
56000: PPUSH
56001: CALL_OW 138
// SetClass ( un , class_mortar ) ;
56005: LD_VAR 0 2
56009: PPUSH
56010: LD_INT 8
56012: PPUSH
56013: CALL_OW 336
// end ;
56017: PPOPN 3
56019: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
56020: LD_EXP 31
56024: PUSH
56025: LD_EXP 75
56029: AND
56030: IFFALSE 56174
56032: GO 56034
56034: DISABLE
56035: LD_INT 0
56037: PPUSH
56038: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
56039: LD_ADDR_VAR 0 2
56043: PUSH
56044: LD_INT 22
56046: PUSH
56047: LD_OWVAR 2
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 21
56058: PUSH
56059: LD_INT 2
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 2
56068: PUSH
56069: LD_INT 34
56071: PUSH
56072: LD_INT 12
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 34
56081: PUSH
56082: LD_INT 51
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 34
56091: PUSH
56092: LD_INT 32
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: LIST
56109: PPUSH
56110: CALL_OW 69
56114: ST_TO_ADDR
// if not tmp then
56115: LD_VAR 0 2
56119: NOT
56120: IFFALSE 56124
// exit ;
56122: GO 56174
// for i in tmp do
56124: LD_ADDR_VAR 0 1
56128: PUSH
56129: LD_VAR 0 2
56133: PUSH
56134: FOR_IN
56135: IFFALSE 56172
// if GetCargo ( i , mat_artifact ) = 0 then
56137: LD_VAR 0 1
56141: PPUSH
56142: LD_INT 4
56144: PPUSH
56145: CALL_OW 289
56149: PUSH
56150: LD_INT 0
56152: EQUAL
56153: IFFALSE 56170
// SetCargo ( i , mat_siberit , 100 ) ;
56155: LD_VAR 0 1
56159: PPUSH
56160: LD_INT 3
56162: PPUSH
56163: LD_INT 100
56165: PPUSH
56166: CALL_OW 290
56170: GO 56134
56172: POP
56173: POP
// end ;
56174: PPOPN 2
56176: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
56177: LD_EXP 31
56181: PUSH
56182: LD_EXP 76
56186: AND
56187: IFFALSE 56370
56189: GO 56191
56191: DISABLE
56192: LD_INT 0
56194: PPUSH
56195: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
56196: LD_ADDR_VAR 0 2
56200: PUSH
56201: LD_INT 22
56203: PUSH
56204: LD_OWVAR 2
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PPUSH
56213: CALL_OW 69
56217: ST_TO_ADDR
// if not tmp then
56218: LD_VAR 0 2
56222: NOT
56223: IFFALSE 56227
// exit ;
56225: GO 56370
// for i := 1 to 2 do
56227: LD_ADDR_VAR 0 1
56231: PUSH
56232: DOUBLE
56233: LD_INT 1
56235: DEC
56236: ST_TO_ADDR
56237: LD_INT 2
56239: PUSH
56240: FOR_TO
56241: IFFALSE 56368
// begin uc_side := your_side ;
56243: LD_ADDR_OWVAR 20
56247: PUSH
56248: LD_OWVAR 2
56252: ST_TO_ADDR
// uc_nation := nation_american ;
56253: LD_ADDR_OWVAR 21
56257: PUSH
56258: LD_INT 1
56260: ST_TO_ADDR
// vc_chassis := us_morphling ;
56261: LD_ADDR_OWVAR 37
56265: PUSH
56266: LD_INT 5
56268: ST_TO_ADDR
// vc_engine := engine_siberite ;
56269: LD_ADDR_OWVAR 39
56273: PUSH
56274: LD_INT 3
56276: ST_TO_ADDR
// vc_control := control_computer ;
56277: LD_ADDR_OWVAR 38
56281: PUSH
56282: LD_INT 3
56284: ST_TO_ADDR
// vc_weapon := us_double_laser ;
56285: LD_ADDR_OWVAR 40
56289: PUSH
56290: LD_INT 10
56292: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
56293: LD_VAR 0 2
56297: PUSH
56298: LD_INT 1
56300: ARRAY
56301: PPUSH
56302: CALL_OW 310
56306: NOT
56307: IFFALSE 56354
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
56309: CALL_OW 45
56313: PPUSH
56314: LD_VAR 0 2
56318: PUSH
56319: LD_INT 1
56321: ARRAY
56322: PPUSH
56323: CALL_OW 250
56327: PPUSH
56328: LD_VAR 0 2
56332: PUSH
56333: LD_INT 1
56335: ARRAY
56336: PPUSH
56337: CALL_OW 251
56341: PPUSH
56342: LD_INT 12
56344: PPUSH
56345: LD_INT 1
56347: PPUSH
56348: CALL_OW 50
56352: GO 56366
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
56354: CALL_OW 45
56358: PPUSH
56359: LD_INT 1
56361: PPUSH
56362: CALL_OW 51
// end ;
56366: GO 56240
56368: POP
56369: POP
// end ;
56370: PPOPN 2
56372: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
56373: LD_EXP 31
56377: PUSH
56378: LD_EXP 77
56382: AND
56383: IFFALSE 56605
56385: GO 56387
56387: DISABLE
56388: LD_INT 0
56390: PPUSH
56391: PPUSH
56392: PPUSH
56393: PPUSH
56394: PPUSH
56395: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56396: LD_ADDR_VAR 0 6
56400: PUSH
56401: LD_INT 22
56403: PUSH
56404: LD_OWVAR 2
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 21
56415: PUSH
56416: LD_INT 1
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 3
56425: PUSH
56426: LD_INT 23
56428: PUSH
56429: LD_INT 0
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: LIST
56444: PPUSH
56445: CALL_OW 69
56449: ST_TO_ADDR
// if not tmp then
56450: LD_VAR 0 6
56454: NOT
56455: IFFALSE 56459
// exit ;
56457: GO 56605
// s1 := rand ( 1 , 4 ) ;
56459: LD_ADDR_VAR 0 2
56463: PUSH
56464: LD_INT 1
56466: PPUSH
56467: LD_INT 4
56469: PPUSH
56470: CALL_OW 12
56474: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
56475: LD_ADDR_VAR 0 4
56479: PUSH
56480: LD_VAR 0 6
56484: PUSH
56485: LD_INT 1
56487: ARRAY
56488: PPUSH
56489: LD_VAR 0 2
56493: PPUSH
56494: CALL_OW 259
56498: ST_TO_ADDR
// if s1 = 1 then
56499: LD_VAR 0 2
56503: PUSH
56504: LD_INT 1
56506: EQUAL
56507: IFFALSE 56527
// s2 := rand ( 2 , 4 ) else
56509: LD_ADDR_VAR 0 3
56513: PUSH
56514: LD_INT 2
56516: PPUSH
56517: LD_INT 4
56519: PPUSH
56520: CALL_OW 12
56524: ST_TO_ADDR
56525: GO 56535
// s2 := 1 ;
56527: LD_ADDR_VAR 0 3
56531: PUSH
56532: LD_INT 1
56534: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
56535: LD_ADDR_VAR 0 5
56539: PUSH
56540: LD_VAR 0 6
56544: PUSH
56545: LD_INT 1
56547: ARRAY
56548: PPUSH
56549: LD_VAR 0 3
56553: PPUSH
56554: CALL_OW 259
56558: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
56559: LD_VAR 0 6
56563: PUSH
56564: LD_INT 1
56566: ARRAY
56567: PPUSH
56568: LD_VAR 0 2
56572: PPUSH
56573: LD_VAR 0 5
56577: PPUSH
56578: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
56582: LD_VAR 0 6
56586: PUSH
56587: LD_INT 1
56589: ARRAY
56590: PPUSH
56591: LD_VAR 0 3
56595: PPUSH
56596: LD_VAR 0 4
56600: PPUSH
56601: CALL_OW 237
// end ;
56605: PPOPN 6
56607: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
56608: LD_EXP 31
56612: PUSH
56613: LD_EXP 78
56617: AND
56618: IFFALSE 56697
56620: GO 56622
56622: DISABLE
56623: LD_INT 0
56625: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
56626: LD_ADDR_VAR 0 1
56630: PUSH
56631: LD_INT 22
56633: PUSH
56634: LD_OWVAR 2
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 30
56645: PUSH
56646: LD_INT 3
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PPUSH
56657: CALL_OW 69
56661: ST_TO_ADDR
// if not tmp then
56662: LD_VAR 0 1
56666: NOT
56667: IFFALSE 56671
// exit ;
56669: GO 56697
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
56671: LD_VAR 0 1
56675: PUSH
56676: LD_INT 1
56678: PPUSH
56679: LD_VAR 0 1
56683: PPUSH
56684: CALL_OW 12
56688: ARRAY
56689: PPUSH
56690: LD_INT 1
56692: PPUSH
56693: CALL_OW 234
// end ;
56697: PPOPN 1
56699: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
56700: LD_EXP 31
56704: PUSH
56705: LD_EXP 79
56709: AND
56710: IFFALSE 56822
56712: GO 56714
56714: DISABLE
56715: LD_INT 0
56717: PPUSH
56718: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
56719: LD_ADDR_VAR 0 2
56723: PUSH
56724: LD_INT 22
56726: PUSH
56727: LD_OWVAR 2
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 2
56738: PUSH
56739: LD_INT 30
56741: PUSH
56742: LD_INT 27
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 30
56751: PUSH
56752: LD_INT 26
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 30
56761: PUSH
56762: LD_INT 28
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PPUSH
56779: CALL_OW 69
56783: ST_TO_ADDR
// if not tmp then
56784: LD_VAR 0 2
56788: NOT
56789: IFFALSE 56793
// exit ;
56791: GO 56822
// for i in tmp do
56793: LD_ADDR_VAR 0 1
56797: PUSH
56798: LD_VAR 0 2
56802: PUSH
56803: FOR_IN
56804: IFFALSE 56820
// SetLives ( i , 1 ) ;
56806: LD_VAR 0 1
56810: PPUSH
56811: LD_INT 1
56813: PPUSH
56814: CALL_OW 234
56818: GO 56803
56820: POP
56821: POP
// end ;
56822: PPOPN 2
56824: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
56825: LD_EXP 31
56829: PUSH
56830: LD_EXP 80
56834: AND
56835: IFFALSE 57109
56837: GO 56839
56839: DISABLE
56840: LD_INT 0
56842: PPUSH
56843: PPUSH
56844: PPUSH
// begin i := rand ( 1 , 7 ) ;
56845: LD_ADDR_VAR 0 1
56849: PUSH
56850: LD_INT 1
56852: PPUSH
56853: LD_INT 7
56855: PPUSH
56856: CALL_OW 12
56860: ST_TO_ADDR
// case i of 1 :
56861: LD_VAR 0 1
56865: PUSH
56866: LD_INT 1
56868: DOUBLE
56869: EQUAL
56870: IFTRUE 56874
56872: GO 56884
56874: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
56875: LD_STRING earthquake(getX(game), 0, 32)
56877: PPUSH
56878: CALL_OW 559
56882: GO 57109
56884: LD_INT 2
56886: DOUBLE
56887: EQUAL
56888: IFTRUE 56892
56890: GO 56906
56892: POP
// begin ToLua ( displayStucuk(); ) ;
56893: LD_STRING displayStucuk();
56895: PPUSH
56896: CALL_OW 559
// ResetFog ;
56900: CALL_OW 335
// end ; 3 :
56904: GO 57109
56906: LD_INT 3
56908: DOUBLE
56909: EQUAL
56910: IFTRUE 56914
56912: GO 57018
56914: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56915: LD_ADDR_VAR 0 2
56919: PUSH
56920: LD_INT 22
56922: PUSH
56923: LD_OWVAR 2
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 25
56934: PUSH
56935: LD_INT 1
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PPUSH
56946: CALL_OW 69
56950: ST_TO_ADDR
// if not tmp then
56951: LD_VAR 0 2
56955: NOT
56956: IFFALSE 56960
// exit ;
56958: GO 57109
// un := tmp [ rand ( 1 , tmp ) ] ;
56960: LD_ADDR_VAR 0 3
56964: PUSH
56965: LD_VAR 0 2
56969: PUSH
56970: LD_INT 1
56972: PPUSH
56973: LD_VAR 0 2
56977: PPUSH
56978: CALL_OW 12
56982: ARRAY
56983: ST_TO_ADDR
// if Crawls ( un ) then
56984: LD_VAR 0 3
56988: PPUSH
56989: CALL_OW 318
56993: IFFALSE 57004
// ComWalk ( un ) ;
56995: LD_VAR 0 3
56999: PPUSH
57000: CALL_OW 138
// SetClass ( un , class_mortar ) ;
57004: LD_VAR 0 3
57008: PPUSH
57009: LD_INT 8
57011: PPUSH
57012: CALL_OW 336
// end ; 4 :
57016: GO 57109
57018: LD_INT 4
57020: DOUBLE
57021: EQUAL
57022: IFTRUE 57026
57024: GO 57087
57026: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
57027: LD_ADDR_VAR 0 2
57031: PUSH
57032: LD_INT 22
57034: PUSH
57035: LD_OWVAR 2
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 30
57046: PUSH
57047: LD_INT 29
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PPUSH
57058: CALL_OW 69
57062: ST_TO_ADDR
// if not tmp then
57063: LD_VAR 0 2
57067: NOT
57068: IFFALSE 57072
// exit ;
57070: GO 57109
// DestroyUnit ( tmp [ 1 ] ) ;
57072: LD_VAR 0 2
57076: PUSH
57077: LD_INT 1
57079: ARRAY
57080: PPUSH
57081: CALL_OW 65
// end ; 5 .. 7 :
57085: GO 57109
57087: LD_INT 5
57089: DOUBLE
57090: GREATEREQUAL
57091: IFFALSE 57099
57093: LD_INT 7
57095: DOUBLE
57096: LESSEQUAL
57097: IFTRUE 57101
57099: GO 57108
57101: POP
// StreamSibBomb ; end ;
57102: CALL 53359 0 0
57106: GO 57109
57108: POP
// end ;
57109: PPOPN 3
57111: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
57112: LD_EXP 31
57116: PUSH
57117: LD_EXP 81
57121: AND
57122: IFFALSE 57278
57124: GO 57126
57126: DISABLE
57127: LD_INT 0
57129: PPUSH
57130: PPUSH
57131: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
57132: LD_ADDR_VAR 0 2
57136: PUSH
57137: LD_INT 81
57139: PUSH
57140: LD_OWVAR 2
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 2
57151: PUSH
57152: LD_INT 21
57154: PUSH
57155: LD_INT 1
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 21
57164: PUSH
57165: LD_INT 2
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: LIST
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PPUSH
57181: CALL_OW 69
57185: ST_TO_ADDR
// if not tmp then
57186: LD_VAR 0 2
57190: NOT
57191: IFFALSE 57195
// exit ;
57193: GO 57278
// p := 0 ;
57195: LD_ADDR_VAR 0 3
57199: PUSH
57200: LD_INT 0
57202: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
57203: LD_INT 35
57205: PPUSH
57206: CALL_OW 67
// p := p + 1 ;
57210: LD_ADDR_VAR 0 3
57214: PUSH
57215: LD_VAR 0 3
57219: PUSH
57220: LD_INT 1
57222: PLUS
57223: ST_TO_ADDR
// for i in tmp do
57224: LD_ADDR_VAR 0 1
57228: PUSH
57229: LD_VAR 0 2
57233: PUSH
57234: FOR_IN
57235: IFFALSE 57266
// if GetLives ( i ) < 1000 then
57237: LD_VAR 0 1
57241: PPUSH
57242: CALL_OW 256
57246: PUSH
57247: LD_INT 1000
57249: LESS
57250: IFFALSE 57264
// SetLives ( i , 1000 ) ;
57252: LD_VAR 0 1
57256: PPUSH
57257: LD_INT 1000
57259: PPUSH
57260: CALL_OW 234
57264: GO 57234
57266: POP
57267: POP
// until p > 20 ;
57268: LD_VAR 0 3
57272: PUSH
57273: LD_INT 20
57275: GREATER
57276: IFFALSE 57203
// end ;
57278: PPOPN 3
57280: END
// every 0 0$1 trigger StreamModeActive and sTime do
57281: LD_EXP 31
57285: PUSH
57286: LD_EXP 82
57290: AND
57291: IFFALSE 57326
57293: GO 57295
57295: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
57296: LD_INT 28
57298: PPUSH
57299: LD_OWVAR 2
57303: PPUSH
57304: LD_INT 2
57306: PPUSH
57307: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
57311: LD_INT 30
57313: PPUSH
57314: LD_OWVAR 2
57318: PPUSH
57319: LD_INT 2
57321: PPUSH
57322: CALL_OW 322
// end ;
57326: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
57327: LD_EXP 31
57331: PUSH
57332: LD_EXP 83
57336: AND
57337: IFFALSE 57458
57339: GO 57341
57341: DISABLE
57342: LD_INT 0
57344: PPUSH
57345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
57346: LD_ADDR_VAR 0 2
57350: PUSH
57351: LD_INT 22
57353: PUSH
57354: LD_OWVAR 2
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 21
57365: PUSH
57366: LD_INT 1
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 3
57375: PUSH
57376: LD_INT 23
57378: PUSH
57379: LD_INT 0
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: LIST
57394: PPUSH
57395: CALL_OW 69
57399: ST_TO_ADDR
// if not tmp then
57400: LD_VAR 0 2
57404: NOT
57405: IFFALSE 57409
// exit ;
57407: GO 57458
// for i in tmp do
57409: LD_ADDR_VAR 0 1
57413: PUSH
57414: LD_VAR 0 2
57418: PUSH
57419: FOR_IN
57420: IFFALSE 57456
// begin if Crawls ( i ) then
57422: LD_VAR 0 1
57426: PPUSH
57427: CALL_OW 318
57431: IFFALSE 57442
// ComWalk ( i ) ;
57433: LD_VAR 0 1
57437: PPUSH
57438: CALL_OW 138
// SetClass ( i , 2 ) ;
57442: LD_VAR 0 1
57446: PPUSH
57447: LD_INT 2
57449: PPUSH
57450: CALL_OW 336
// end ;
57454: GO 57419
57456: POP
57457: POP
// end ;
57458: PPOPN 2
57460: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
57461: LD_EXP 31
57465: PUSH
57466: LD_EXP 84
57470: AND
57471: IFFALSE 57752
57473: GO 57475
57475: DISABLE
57476: LD_INT 0
57478: PPUSH
57479: PPUSH
57480: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
57481: LD_OWVAR 2
57485: PPUSH
57486: LD_INT 9
57488: PPUSH
57489: LD_INT 1
57491: PPUSH
57492: LD_INT 1
57494: PPUSH
57495: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
57499: LD_INT 9
57501: PPUSH
57502: LD_OWVAR 2
57506: PPUSH
57507: CALL_OW 343
// uc_side := 9 ;
57511: LD_ADDR_OWVAR 20
57515: PUSH
57516: LD_INT 9
57518: ST_TO_ADDR
// uc_nation := 2 ;
57519: LD_ADDR_OWVAR 21
57523: PUSH
57524: LD_INT 2
57526: ST_TO_ADDR
// hc_name := Dark Warrior ;
57527: LD_ADDR_OWVAR 26
57531: PUSH
57532: LD_STRING Dark Warrior
57534: ST_TO_ADDR
// hc_gallery :=  ;
57535: LD_ADDR_OWVAR 33
57539: PUSH
57540: LD_STRING 
57542: ST_TO_ADDR
// hc_noskilllimit := true ;
57543: LD_ADDR_OWVAR 76
57547: PUSH
57548: LD_INT 1
57550: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
57551: LD_ADDR_OWVAR 31
57555: PUSH
57556: LD_INT 30
57558: PUSH
57559: LD_INT 30
57561: PUSH
57562: LD_INT 30
57564: PUSH
57565: LD_INT 30
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: ST_TO_ADDR
// un := CreateHuman ;
57574: LD_ADDR_VAR 0 3
57578: PUSH
57579: CALL_OW 44
57583: ST_TO_ADDR
// hc_noskilllimit := false ;
57584: LD_ADDR_OWVAR 76
57588: PUSH
57589: LD_INT 0
57591: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57592: LD_VAR 0 3
57596: PPUSH
57597: LD_INT 1
57599: PPUSH
57600: CALL_OW 51
// p := 0 ;
57604: LD_ADDR_VAR 0 2
57608: PUSH
57609: LD_INT 0
57611: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
57612: LD_INT 35
57614: PPUSH
57615: CALL_OW 67
// p := p + 1 ;
57619: LD_ADDR_VAR 0 2
57623: PUSH
57624: LD_VAR 0 2
57628: PUSH
57629: LD_INT 1
57631: PLUS
57632: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
57633: LD_VAR 0 3
57637: PPUSH
57638: CALL_OW 256
57642: PUSH
57643: LD_INT 1000
57645: LESS
57646: IFFALSE 57660
// SetLives ( un , 1000 ) ;
57648: LD_VAR 0 3
57652: PPUSH
57653: LD_INT 1000
57655: PPUSH
57656: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
57660: LD_VAR 0 3
57664: PPUSH
57665: LD_INT 81
57667: PUSH
57668: LD_OWVAR 2
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 91
57679: PUSH
57680: LD_VAR 0 3
57684: PUSH
57685: LD_INT 30
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: LIST
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PPUSH
57697: CALL_OW 69
57701: PPUSH
57702: LD_VAR 0 3
57706: PPUSH
57707: CALL_OW 74
57711: PPUSH
57712: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
57716: LD_VAR 0 2
57720: PUSH
57721: LD_INT 60
57723: GREATER
57724: PUSH
57725: LD_VAR 0 3
57729: PPUSH
57730: CALL_OW 301
57734: OR
57735: IFFALSE 57612
// if un then
57737: LD_VAR 0 3
57741: IFFALSE 57752
// RemoveUnit ( un ) ;
57743: LD_VAR 0 3
57747: PPUSH
57748: CALL_OW 64
// end ;
57752: PPOPN 3
57754: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
57755: LD_INT 0
57757: PPUSH
// case cmd of 301 :
57758: LD_VAR 0 1
57762: PUSH
57763: LD_INT 301
57765: DOUBLE
57766: EQUAL
57767: IFTRUE 57771
57769: GO 57803
57771: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
57772: LD_VAR 0 6
57776: PPUSH
57777: LD_VAR 0 7
57781: PPUSH
57782: LD_VAR 0 8
57786: PPUSH
57787: LD_VAR 0 4
57791: PPUSH
57792: LD_VAR 0 5
57796: PPUSH
57797: CALL 59004 0 5
57801: GO 57924
57803: LD_INT 302
57805: DOUBLE
57806: EQUAL
57807: IFTRUE 57811
57809: GO 57848
57811: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
57812: LD_VAR 0 6
57816: PPUSH
57817: LD_VAR 0 7
57821: PPUSH
57822: LD_VAR 0 8
57826: PPUSH
57827: LD_VAR 0 9
57831: PPUSH
57832: LD_VAR 0 4
57836: PPUSH
57837: LD_VAR 0 5
57841: PPUSH
57842: CALL 59095 0 6
57846: GO 57924
57848: LD_INT 303
57850: DOUBLE
57851: EQUAL
57852: IFTRUE 57856
57854: GO 57893
57856: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
57857: LD_VAR 0 6
57861: PPUSH
57862: LD_VAR 0 7
57866: PPUSH
57867: LD_VAR 0 8
57871: PPUSH
57872: LD_VAR 0 9
57876: PPUSH
57877: LD_VAR 0 4
57881: PPUSH
57882: LD_VAR 0 5
57886: PPUSH
57887: CALL 57929 0 6
57891: GO 57924
57893: LD_INT 304
57895: DOUBLE
57896: EQUAL
57897: IFTRUE 57901
57899: GO 57923
57901: POP
// hHackTeleport ( unit , x , y ) ; end ;
57902: LD_VAR 0 2
57906: PPUSH
57907: LD_VAR 0 4
57911: PPUSH
57912: LD_VAR 0 5
57916: PPUSH
57917: CALL 59688 0 3
57921: GO 57924
57923: POP
// end ;
57924: LD_VAR 0 12
57928: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
57929: LD_INT 0
57931: PPUSH
57932: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
57933: LD_VAR 0 1
57937: PUSH
57938: LD_INT 1
57940: LESS
57941: PUSH
57942: LD_VAR 0 1
57946: PUSH
57947: LD_INT 3
57949: GREATER
57950: OR
57951: PUSH
57952: LD_VAR 0 5
57956: PPUSH
57957: LD_VAR 0 6
57961: PPUSH
57962: CALL_OW 428
57966: OR
57967: IFFALSE 57971
// exit ;
57969: GO 58691
// uc_side := your_side ;
57971: LD_ADDR_OWVAR 20
57975: PUSH
57976: LD_OWVAR 2
57980: ST_TO_ADDR
// uc_nation := nation ;
57981: LD_ADDR_OWVAR 21
57985: PUSH
57986: LD_VAR 0 1
57990: ST_TO_ADDR
// bc_level = 1 ;
57991: LD_ADDR_OWVAR 43
57995: PUSH
57996: LD_INT 1
57998: ST_TO_ADDR
// case btype of 1 :
57999: LD_VAR 0 2
58003: PUSH
58004: LD_INT 1
58006: DOUBLE
58007: EQUAL
58008: IFTRUE 58012
58010: GO 58023
58012: POP
// bc_type := b_depot ; 2 :
58013: LD_ADDR_OWVAR 42
58017: PUSH
58018: LD_INT 0
58020: ST_TO_ADDR
58021: GO 58635
58023: LD_INT 2
58025: DOUBLE
58026: EQUAL
58027: IFTRUE 58031
58029: GO 58042
58031: POP
// bc_type := b_warehouse ; 3 :
58032: LD_ADDR_OWVAR 42
58036: PUSH
58037: LD_INT 1
58039: ST_TO_ADDR
58040: GO 58635
58042: LD_INT 3
58044: DOUBLE
58045: EQUAL
58046: IFTRUE 58050
58048: GO 58061
58050: POP
// bc_type := b_lab ; 4 .. 9 :
58051: LD_ADDR_OWVAR 42
58055: PUSH
58056: LD_INT 6
58058: ST_TO_ADDR
58059: GO 58635
58061: LD_INT 4
58063: DOUBLE
58064: GREATEREQUAL
58065: IFFALSE 58073
58067: LD_INT 9
58069: DOUBLE
58070: LESSEQUAL
58071: IFTRUE 58075
58073: GO 58127
58075: POP
// begin bc_type := b_lab_half ;
58076: LD_ADDR_OWVAR 42
58080: PUSH
58081: LD_INT 7
58083: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
58084: LD_ADDR_OWVAR 44
58088: PUSH
58089: LD_INT 10
58091: PUSH
58092: LD_INT 11
58094: PUSH
58095: LD_INT 12
58097: PUSH
58098: LD_INT 15
58100: PUSH
58101: LD_INT 14
58103: PUSH
58104: LD_INT 13
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: PUSH
58115: LD_VAR 0 2
58119: PUSH
58120: LD_INT 3
58122: MINUS
58123: ARRAY
58124: ST_TO_ADDR
// end ; 10 .. 13 :
58125: GO 58635
58127: LD_INT 10
58129: DOUBLE
58130: GREATEREQUAL
58131: IFFALSE 58139
58133: LD_INT 13
58135: DOUBLE
58136: LESSEQUAL
58137: IFTRUE 58141
58139: GO 58218
58141: POP
// begin bc_type := b_lab_full ;
58142: LD_ADDR_OWVAR 42
58146: PUSH
58147: LD_INT 8
58149: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
58150: LD_ADDR_OWVAR 44
58154: PUSH
58155: LD_INT 10
58157: PUSH
58158: LD_INT 12
58160: PUSH
58161: LD_INT 14
58163: PUSH
58164: LD_INT 13
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: PUSH
58173: LD_VAR 0 2
58177: PUSH
58178: LD_INT 9
58180: MINUS
58181: ARRAY
58182: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
58183: LD_ADDR_OWVAR 45
58187: PUSH
58188: LD_INT 11
58190: PUSH
58191: LD_INT 15
58193: PUSH
58194: LD_INT 12
58196: PUSH
58197: LD_INT 15
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: PUSH
58206: LD_VAR 0 2
58210: PUSH
58211: LD_INT 9
58213: MINUS
58214: ARRAY
58215: ST_TO_ADDR
// end ; 14 :
58216: GO 58635
58218: LD_INT 14
58220: DOUBLE
58221: EQUAL
58222: IFTRUE 58226
58224: GO 58237
58226: POP
// bc_type := b_workshop ; 15 :
58227: LD_ADDR_OWVAR 42
58231: PUSH
58232: LD_INT 2
58234: ST_TO_ADDR
58235: GO 58635
58237: LD_INT 15
58239: DOUBLE
58240: EQUAL
58241: IFTRUE 58245
58243: GO 58256
58245: POP
// bc_type := b_factory ; 16 :
58246: LD_ADDR_OWVAR 42
58250: PUSH
58251: LD_INT 3
58253: ST_TO_ADDR
58254: GO 58635
58256: LD_INT 16
58258: DOUBLE
58259: EQUAL
58260: IFTRUE 58264
58262: GO 58275
58264: POP
// bc_type := b_ext_gun ; 17 :
58265: LD_ADDR_OWVAR 42
58269: PUSH
58270: LD_INT 17
58272: ST_TO_ADDR
58273: GO 58635
58275: LD_INT 17
58277: DOUBLE
58278: EQUAL
58279: IFTRUE 58283
58281: GO 58311
58283: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
58284: LD_ADDR_OWVAR 42
58288: PUSH
58289: LD_INT 19
58291: PUSH
58292: LD_INT 23
58294: PUSH
58295: LD_INT 19
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: LIST
58302: PUSH
58303: LD_VAR 0 1
58307: ARRAY
58308: ST_TO_ADDR
58309: GO 58635
58311: LD_INT 18
58313: DOUBLE
58314: EQUAL
58315: IFTRUE 58319
58317: GO 58330
58319: POP
// bc_type := b_ext_radar ; 19 :
58320: LD_ADDR_OWVAR 42
58324: PUSH
58325: LD_INT 20
58327: ST_TO_ADDR
58328: GO 58635
58330: LD_INT 19
58332: DOUBLE
58333: EQUAL
58334: IFTRUE 58338
58336: GO 58349
58338: POP
// bc_type := b_ext_radio ; 20 :
58339: LD_ADDR_OWVAR 42
58343: PUSH
58344: LD_INT 22
58346: ST_TO_ADDR
58347: GO 58635
58349: LD_INT 20
58351: DOUBLE
58352: EQUAL
58353: IFTRUE 58357
58355: GO 58368
58357: POP
// bc_type := b_ext_siberium ; 21 :
58358: LD_ADDR_OWVAR 42
58362: PUSH
58363: LD_INT 21
58365: ST_TO_ADDR
58366: GO 58635
58368: LD_INT 21
58370: DOUBLE
58371: EQUAL
58372: IFTRUE 58376
58374: GO 58387
58376: POP
// bc_type := b_ext_computer ; 22 :
58377: LD_ADDR_OWVAR 42
58381: PUSH
58382: LD_INT 24
58384: ST_TO_ADDR
58385: GO 58635
58387: LD_INT 22
58389: DOUBLE
58390: EQUAL
58391: IFTRUE 58395
58393: GO 58406
58395: POP
// bc_type := b_ext_track ; 23 :
58396: LD_ADDR_OWVAR 42
58400: PUSH
58401: LD_INT 16
58403: ST_TO_ADDR
58404: GO 58635
58406: LD_INT 23
58408: DOUBLE
58409: EQUAL
58410: IFTRUE 58414
58412: GO 58425
58414: POP
// bc_type := b_ext_laser ; 24 :
58415: LD_ADDR_OWVAR 42
58419: PUSH
58420: LD_INT 25
58422: ST_TO_ADDR
58423: GO 58635
58425: LD_INT 24
58427: DOUBLE
58428: EQUAL
58429: IFTRUE 58433
58431: GO 58444
58433: POP
// bc_type := b_control_tower ; 25 :
58434: LD_ADDR_OWVAR 42
58438: PUSH
58439: LD_INT 36
58441: ST_TO_ADDR
58442: GO 58635
58444: LD_INT 25
58446: DOUBLE
58447: EQUAL
58448: IFTRUE 58452
58450: GO 58463
58452: POP
// bc_type := b_breastwork ; 26 :
58453: LD_ADDR_OWVAR 42
58457: PUSH
58458: LD_INT 31
58460: ST_TO_ADDR
58461: GO 58635
58463: LD_INT 26
58465: DOUBLE
58466: EQUAL
58467: IFTRUE 58471
58469: GO 58482
58471: POP
// bc_type := b_bunker ; 27 :
58472: LD_ADDR_OWVAR 42
58476: PUSH
58477: LD_INT 32
58479: ST_TO_ADDR
58480: GO 58635
58482: LD_INT 27
58484: DOUBLE
58485: EQUAL
58486: IFTRUE 58490
58488: GO 58501
58490: POP
// bc_type := b_turret ; 28 :
58491: LD_ADDR_OWVAR 42
58495: PUSH
58496: LD_INT 33
58498: ST_TO_ADDR
58499: GO 58635
58501: LD_INT 28
58503: DOUBLE
58504: EQUAL
58505: IFTRUE 58509
58507: GO 58520
58509: POP
// bc_type := b_armoury ; 29 :
58510: LD_ADDR_OWVAR 42
58514: PUSH
58515: LD_INT 4
58517: ST_TO_ADDR
58518: GO 58635
58520: LD_INT 29
58522: DOUBLE
58523: EQUAL
58524: IFTRUE 58528
58526: GO 58539
58528: POP
// bc_type := b_barracks ; 30 :
58529: LD_ADDR_OWVAR 42
58533: PUSH
58534: LD_INT 5
58536: ST_TO_ADDR
58537: GO 58635
58539: LD_INT 30
58541: DOUBLE
58542: EQUAL
58543: IFTRUE 58547
58545: GO 58558
58547: POP
// bc_type := b_solar_power ; 31 :
58548: LD_ADDR_OWVAR 42
58552: PUSH
58553: LD_INT 27
58555: ST_TO_ADDR
58556: GO 58635
58558: LD_INT 31
58560: DOUBLE
58561: EQUAL
58562: IFTRUE 58566
58564: GO 58577
58566: POP
// bc_type := b_oil_power ; 32 :
58567: LD_ADDR_OWVAR 42
58571: PUSH
58572: LD_INT 26
58574: ST_TO_ADDR
58575: GO 58635
58577: LD_INT 32
58579: DOUBLE
58580: EQUAL
58581: IFTRUE 58585
58583: GO 58596
58585: POP
// bc_type := b_siberite_power ; 33 :
58586: LD_ADDR_OWVAR 42
58590: PUSH
58591: LD_INT 28
58593: ST_TO_ADDR
58594: GO 58635
58596: LD_INT 33
58598: DOUBLE
58599: EQUAL
58600: IFTRUE 58604
58602: GO 58615
58604: POP
// bc_type := b_oil_mine ; 34 :
58605: LD_ADDR_OWVAR 42
58609: PUSH
58610: LD_INT 29
58612: ST_TO_ADDR
58613: GO 58635
58615: LD_INT 34
58617: DOUBLE
58618: EQUAL
58619: IFTRUE 58623
58621: GO 58634
58623: POP
// bc_type := b_siberite_mine ; end ;
58624: LD_ADDR_OWVAR 42
58628: PUSH
58629: LD_INT 30
58631: ST_TO_ADDR
58632: GO 58635
58634: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
58635: LD_ADDR_VAR 0 8
58639: PUSH
58640: LD_VAR 0 5
58644: PPUSH
58645: LD_VAR 0 6
58649: PPUSH
58650: LD_VAR 0 3
58654: PPUSH
58655: CALL_OW 47
58659: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
58660: LD_OWVAR 42
58664: PUSH
58665: LD_INT 32
58667: PUSH
58668: LD_INT 33
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: IN
58675: IFFALSE 58691
// PlaceWeaponTurret ( b , weapon ) ;
58677: LD_VAR 0 8
58681: PPUSH
58682: LD_VAR 0 4
58686: PPUSH
58687: CALL_OW 431
// end ;
58691: LD_VAR 0 7
58695: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
58696: LD_INT 0
58698: PPUSH
58699: PPUSH
58700: PPUSH
58701: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58702: LD_ADDR_VAR 0 4
58706: PUSH
58707: LD_INT 22
58709: PUSH
58710: LD_OWVAR 2
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 2
58721: PUSH
58722: LD_INT 30
58724: PUSH
58725: LD_INT 0
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 30
58734: PUSH
58735: LD_INT 1
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: LIST
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PPUSH
58751: CALL_OW 69
58755: ST_TO_ADDR
// if not tmp then
58756: LD_VAR 0 4
58760: NOT
58761: IFFALSE 58765
// exit ;
58763: GO 58824
// for i in tmp do
58765: LD_ADDR_VAR 0 2
58769: PUSH
58770: LD_VAR 0 4
58774: PUSH
58775: FOR_IN
58776: IFFALSE 58822
// for j = 1 to 3 do
58778: LD_ADDR_VAR 0 3
58782: PUSH
58783: DOUBLE
58784: LD_INT 1
58786: DEC
58787: ST_TO_ADDR
58788: LD_INT 3
58790: PUSH
58791: FOR_TO
58792: IFFALSE 58818
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
58794: LD_VAR 0 2
58798: PPUSH
58799: CALL_OW 274
58803: PPUSH
58804: LD_VAR 0 3
58808: PPUSH
58809: LD_INT 99999
58811: PPUSH
58812: CALL_OW 277
58816: GO 58791
58818: POP
58819: POP
58820: GO 58775
58822: POP
58823: POP
// end ;
58824: LD_VAR 0 1
58828: RET
// export function hHackSetLevel10 ; var i , j ; begin
58829: LD_INT 0
58831: PPUSH
58832: PPUSH
58833: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
58834: LD_ADDR_VAR 0 2
58838: PUSH
58839: LD_INT 21
58841: PUSH
58842: LD_INT 1
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PPUSH
58849: CALL_OW 69
58853: PUSH
58854: FOR_IN
58855: IFFALSE 58907
// if IsSelected ( i ) then
58857: LD_VAR 0 2
58861: PPUSH
58862: CALL_OW 306
58866: IFFALSE 58905
// begin for j := 1 to 4 do
58868: LD_ADDR_VAR 0 3
58872: PUSH
58873: DOUBLE
58874: LD_INT 1
58876: DEC
58877: ST_TO_ADDR
58878: LD_INT 4
58880: PUSH
58881: FOR_TO
58882: IFFALSE 58903
// SetSkill ( i , j , 10 ) ;
58884: LD_VAR 0 2
58888: PPUSH
58889: LD_VAR 0 3
58893: PPUSH
58894: LD_INT 10
58896: PPUSH
58897: CALL_OW 237
58901: GO 58881
58903: POP
58904: POP
// end ;
58905: GO 58854
58907: POP
58908: POP
// end ;
58909: LD_VAR 0 1
58913: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
58914: LD_INT 0
58916: PPUSH
58917: PPUSH
58918: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
58919: LD_ADDR_VAR 0 2
58923: PUSH
58924: LD_INT 22
58926: PUSH
58927: LD_OWVAR 2
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 21
58938: PUSH
58939: LD_INT 1
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PPUSH
58950: CALL_OW 69
58954: PUSH
58955: FOR_IN
58956: IFFALSE 58997
// begin for j := 1 to 4 do
58958: LD_ADDR_VAR 0 3
58962: PUSH
58963: DOUBLE
58964: LD_INT 1
58966: DEC
58967: ST_TO_ADDR
58968: LD_INT 4
58970: PUSH
58971: FOR_TO
58972: IFFALSE 58993
// SetSkill ( i , j , 10 ) ;
58974: LD_VAR 0 2
58978: PPUSH
58979: LD_VAR 0 3
58983: PPUSH
58984: LD_INT 10
58986: PPUSH
58987: CALL_OW 237
58991: GO 58971
58993: POP
58994: POP
// end ;
58995: GO 58955
58997: POP
58998: POP
// end ;
58999: LD_VAR 0 1
59003: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
59004: LD_INT 0
59006: PPUSH
// uc_side := your_side ;
59007: LD_ADDR_OWVAR 20
59011: PUSH
59012: LD_OWVAR 2
59016: ST_TO_ADDR
// uc_nation := nation ;
59017: LD_ADDR_OWVAR 21
59021: PUSH
59022: LD_VAR 0 1
59026: ST_TO_ADDR
// InitHc ;
59027: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
59031: LD_INT 0
59033: PPUSH
59034: LD_VAR 0 2
59038: PPUSH
59039: LD_VAR 0 3
59043: PPUSH
59044: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
59048: LD_VAR 0 4
59052: PPUSH
59053: LD_VAR 0 5
59057: PPUSH
59058: CALL_OW 428
59062: PUSH
59063: LD_INT 0
59065: EQUAL
59066: IFFALSE 59090
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
59068: CALL_OW 44
59072: PPUSH
59073: LD_VAR 0 4
59077: PPUSH
59078: LD_VAR 0 5
59082: PPUSH
59083: LD_INT 1
59085: PPUSH
59086: CALL_OW 48
// end ;
59090: LD_VAR 0 6
59094: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
59095: LD_INT 0
59097: PPUSH
59098: PPUSH
// uc_side := your_side ;
59099: LD_ADDR_OWVAR 20
59103: PUSH
59104: LD_OWVAR 2
59108: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
59109: LD_VAR 0 1
59113: PUSH
59114: LD_INT 1
59116: PUSH
59117: LD_INT 2
59119: PUSH
59120: LD_INT 3
59122: PUSH
59123: LD_INT 4
59125: PUSH
59126: LD_INT 5
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: IN
59136: IFFALSE 59148
// uc_nation := nation_american else
59138: LD_ADDR_OWVAR 21
59142: PUSH
59143: LD_INT 1
59145: ST_TO_ADDR
59146: GO 59191
// if chassis in [ 11 , 12 , 13 , 14 ] then
59148: LD_VAR 0 1
59152: PUSH
59153: LD_INT 11
59155: PUSH
59156: LD_INT 12
59158: PUSH
59159: LD_INT 13
59161: PUSH
59162: LD_INT 14
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: IN
59171: IFFALSE 59183
// uc_nation := nation_arabian else
59173: LD_ADDR_OWVAR 21
59177: PUSH
59178: LD_INT 2
59180: ST_TO_ADDR
59181: GO 59191
// uc_nation := nation_russian ;
59183: LD_ADDR_OWVAR 21
59187: PUSH
59188: LD_INT 3
59190: ST_TO_ADDR
// vc_chassis := chassis ;
59191: LD_ADDR_OWVAR 37
59195: PUSH
59196: LD_VAR 0 1
59200: ST_TO_ADDR
// vc_engine := engine ;
59201: LD_ADDR_OWVAR 39
59205: PUSH
59206: LD_VAR 0 2
59210: ST_TO_ADDR
// vc_control := control ;
59211: LD_ADDR_OWVAR 38
59215: PUSH
59216: LD_VAR 0 3
59220: ST_TO_ADDR
// vc_weapon := weapon ;
59221: LD_ADDR_OWVAR 40
59225: PUSH
59226: LD_VAR 0 4
59230: ST_TO_ADDR
// un := CreateVehicle ;
59231: LD_ADDR_VAR 0 8
59235: PUSH
59236: CALL_OW 45
59240: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
59241: LD_VAR 0 8
59245: PPUSH
59246: LD_INT 0
59248: PPUSH
59249: LD_INT 5
59251: PPUSH
59252: CALL_OW 12
59256: PPUSH
59257: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
59261: LD_VAR 0 8
59265: PPUSH
59266: LD_VAR 0 5
59270: PPUSH
59271: LD_VAR 0 6
59275: PPUSH
59276: LD_INT 1
59278: PPUSH
59279: CALL_OW 48
// end ;
59283: LD_VAR 0 7
59287: RET
// export hInvincible ; every 1 do
59288: GO 59290
59290: DISABLE
// hInvincible := [ ] ;
59291: LD_ADDR_EXP 85
59295: PUSH
59296: EMPTY
59297: ST_TO_ADDR
59298: END
// every 10 do var i ;
59299: GO 59301
59301: DISABLE
59302: LD_INT 0
59304: PPUSH
// begin enable ;
59305: ENABLE
// if not hInvincible then
59306: LD_EXP 85
59310: NOT
59311: IFFALSE 59315
// exit ;
59313: GO 59359
// for i in hInvincible do
59315: LD_ADDR_VAR 0 1
59319: PUSH
59320: LD_EXP 85
59324: PUSH
59325: FOR_IN
59326: IFFALSE 59357
// if GetLives ( i ) < 1000 then
59328: LD_VAR 0 1
59332: PPUSH
59333: CALL_OW 256
59337: PUSH
59338: LD_INT 1000
59340: LESS
59341: IFFALSE 59355
// SetLives ( i , 1000 ) ;
59343: LD_VAR 0 1
59347: PPUSH
59348: LD_INT 1000
59350: PPUSH
59351: CALL_OW 234
59355: GO 59325
59357: POP
59358: POP
// end ;
59359: PPOPN 1
59361: END
// export function hHackInvincible ; var i ; begin
59362: LD_INT 0
59364: PPUSH
59365: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
59366: LD_ADDR_VAR 0 2
59370: PUSH
59371: LD_INT 2
59373: PUSH
59374: LD_INT 21
59376: PUSH
59377: LD_INT 1
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 21
59386: PUSH
59387: LD_INT 2
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: LIST
59398: PPUSH
59399: CALL_OW 69
59403: PUSH
59404: FOR_IN
59405: IFFALSE 59466
// if IsSelected ( i ) then
59407: LD_VAR 0 2
59411: PPUSH
59412: CALL_OW 306
59416: IFFALSE 59464
// begin if i in hInvincible then
59418: LD_VAR 0 2
59422: PUSH
59423: LD_EXP 85
59427: IN
59428: IFFALSE 59448
// hInvincible := hInvincible diff i else
59430: LD_ADDR_EXP 85
59434: PUSH
59435: LD_EXP 85
59439: PUSH
59440: LD_VAR 0 2
59444: DIFF
59445: ST_TO_ADDR
59446: GO 59464
// hInvincible := hInvincible union i ;
59448: LD_ADDR_EXP 85
59452: PUSH
59453: LD_EXP 85
59457: PUSH
59458: LD_VAR 0 2
59462: UNION
59463: ST_TO_ADDR
// end ;
59464: GO 59404
59466: POP
59467: POP
// end ;
59468: LD_VAR 0 1
59472: RET
// export function hHackInvisible ; var i , j ; begin
59473: LD_INT 0
59475: PPUSH
59476: PPUSH
59477: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
59478: LD_ADDR_VAR 0 2
59482: PUSH
59483: LD_INT 21
59485: PUSH
59486: LD_INT 1
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PPUSH
59493: CALL_OW 69
59497: PUSH
59498: FOR_IN
59499: IFFALSE 59523
// if IsSelected ( i ) then
59501: LD_VAR 0 2
59505: PPUSH
59506: CALL_OW 306
59510: IFFALSE 59521
// ComForceInvisible ( i ) ;
59512: LD_VAR 0 2
59516: PPUSH
59517: CALL_OW 496
59521: GO 59498
59523: POP
59524: POP
// end ;
59525: LD_VAR 0 1
59529: RET
// export function hHackChangeYourSide ; begin
59530: LD_INT 0
59532: PPUSH
// if your_side = 8 then
59533: LD_OWVAR 2
59537: PUSH
59538: LD_INT 8
59540: EQUAL
59541: IFFALSE 59553
// your_side := 0 else
59543: LD_ADDR_OWVAR 2
59547: PUSH
59548: LD_INT 0
59550: ST_TO_ADDR
59551: GO 59567
// your_side := your_side + 1 ;
59553: LD_ADDR_OWVAR 2
59557: PUSH
59558: LD_OWVAR 2
59562: PUSH
59563: LD_INT 1
59565: PLUS
59566: ST_TO_ADDR
// end ;
59567: LD_VAR 0 1
59571: RET
// export function hHackChangeUnitSide ; var i , j ; begin
59572: LD_INT 0
59574: PPUSH
59575: PPUSH
59576: PPUSH
// for i in all_units do
59577: LD_ADDR_VAR 0 2
59581: PUSH
59582: LD_OWVAR 3
59586: PUSH
59587: FOR_IN
59588: IFFALSE 59666
// if IsSelected ( i ) then
59590: LD_VAR 0 2
59594: PPUSH
59595: CALL_OW 306
59599: IFFALSE 59664
// begin j := GetSide ( i ) ;
59601: LD_ADDR_VAR 0 3
59605: PUSH
59606: LD_VAR 0 2
59610: PPUSH
59611: CALL_OW 255
59615: ST_TO_ADDR
// if j = 8 then
59616: LD_VAR 0 3
59620: PUSH
59621: LD_INT 8
59623: EQUAL
59624: IFFALSE 59636
// j := 0 else
59626: LD_ADDR_VAR 0 3
59630: PUSH
59631: LD_INT 0
59633: ST_TO_ADDR
59634: GO 59650
// j := j + 1 ;
59636: LD_ADDR_VAR 0 3
59640: PUSH
59641: LD_VAR 0 3
59645: PUSH
59646: LD_INT 1
59648: PLUS
59649: ST_TO_ADDR
// SetSide ( i , j ) ;
59650: LD_VAR 0 2
59654: PPUSH
59655: LD_VAR 0 3
59659: PPUSH
59660: CALL_OW 235
// end ;
59664: GO 59587
59666: POP
59667: POP
// end ;
59668: LD_VAR 0 1
59672: RET
// export function hHackFog ; begin
59673: LD_INT 0
59675: PPUSH
// FogOff ( true ) ;
59676: LD_INT 1
59678: PPUSH
59679: CALL_OW 344
// end ;
59683: LD_VAR 0 1
59687: RET
// export function hHackTeleport ( unit , x , y ) ; begin
59688: LD_INT 0
59690: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
59691: LD_VAR 0 1
59695: PPUSH
59696: LD_VAR 0 2
59700: PPUSH
59701: LD_VAR 0 3
59705: PPUSH
59706: LD_INT 1
59708: PPUSH
59709: LD_INT 1
59711: PPUSH
59712: CALL_OW 483
// CenterOnXY ( x , y ) ;
59716: LD_VAR 0 2
59720: PPUSH
59721: LD_VAR 0 3
59725: PPUSH
59726: CALL_OW 84
// end ; end_of_file
59730: LD_VAR 0 4
59734: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
59735: LD_VAR 0 1
59739: PPUSH
59740: LD_VAR 0 2
59744: PPUSH
59745: LD_VAR 0 3
59749: PPUSH
59750: LD_VAR 0 4
59754: PPUSH
59755: LD_VAR 0 5
59759: PPUSH
59760: LD_VAR 0 6
59764: PPUSH
59765: CALL 46563 0 6
// end ; end_of_file end_of_file
59769: PPOPN 6
59771: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
59772: LD_INT 0
59774: PPUSH
// ar_miner := 81 ;
59775: LD_ADDR_EXP 93
59779: PUSH
59780: LD_INT 81
59782: ST_TO_ADDR
// ar_crane := 88 ;
59783: LD_ADDR_EXP 92
59787: PUSH
59788: LD_INT 88
59790: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
59791: LD_ADDR_EXP 87
59795: PUSH
59796: LD_INT 89
59798: ST_TO_ADDR
// us_hack := 99 ;
59799: LD_ADDR_EXP 88
59803: PUSH
59804: LD_INT 99
59806: ST_TO_ADDR
// us_artillery := 97 ;
59807: LD_ADDR_EXP 89
59811: PUSH
59812: LD_INT 97
59814: ST_TO_ADDR
// ar_bio_bomb := 91 ;
59815: LD_ADDR_EXP 90
59819: PUSH
59820: LD_INT 91
59822: ST_TO_ADDR
// ar_mortar := 92 ;
59823: LD_ADDR_EXP 91
59827: PUSH
59828: LD_INT 92
59830: ST_TO_ADDR
// ru_radar := 98 ;
59831: LD_ADDR_EXP 86
59835: PUSH
59836: LD_INT 98
59838: ST_TO_ADDR
// tech_Artillery := 80 ;
59839: LD_ADDR_EXP 94
59843: PUSH
59844: LD_INT 80
59846: ST_TO_ADDR
// tech_RadMat := 81 ;
59847: LD_ADDR_EXP 95
59851: PUSH
59852: LD_INT 81
59854: ST_TO_ADDR
// tech_BasicTools := 82 ;
59855: LD_ADDR_EXP 96
59859: PUSH
59860: LD_INT 82
59862: ST_TO_ADDR
// tech_Cargo := 83 ;
59863: LD_ADDR_EXP 97
59867: PUSH
59868: LD_INT 83
59870: ST_TO_ADDR
// tech_Track := 84 ;
59871: LD_ADDR_EXP 98
59875: PUSH
59876: LD_INT 84
59878: ST_TO_ADDR
// tech_Crane := 85 ;
59879: LD_ADDR_EXP 99
59883: PUSH
59884: LD_INT 85
59886: ST_TO_ADDR
// tech_Bulldozer := 86 ;
59887: LD_ADDR_EXP 100
59891: PUSH
59892: LD_INT 86
59894: ST_TO_ADDR
// tech_Hovercraft := 87 ;
59895: LD_ADDR_EXP 101
59899: PUSH
59900: LD_INT 87
59902: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
59903: LD_ADDR_EXP 102
59907: PUSH
59908: LD_INT 88
59910: ST_TO_ADDR
// class_mastodont := 31 ;
59911: LD_ADDR_EXP 103
59915: PUSH
59916: LD_INT 31
59918: ST_TO_ADDR
// class_horse := 21 ;
59919: LD_ADDR_EXP 104
59923: PUSH
59924: LD_INT 21
59926: ST_TO_ADDR
// end ;
59927: LD_VAR 0 1
59931: RET
// every 1 do
59932: GO 59934
59934: DISABLE
// InitGlobalVariables ;
59935: CALL 59772 0 0
59939: END
