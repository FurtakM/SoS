// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 62 0 0
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// CreateNature ( apemanSpawnArea , forestArea , riverArea ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 5
  20: PPUSH
  21: LD_INT 6
  23: PPUSH
  24: CALL 441 0 3
// PrepareAmerican ;
  28: CALL 2534 0 0
// PrepareArabian ;
  32: CALL 1165 0 0
// Action ;
  36: CALL 8255 0 0
// if debug then
  40: LD_EXP 1
  44: IFFALSE 61
// begin Difficulty := 4 ;
  46: LD_ADDR_OWVAR 67
  50: PUSH
  51: LD_INT 4
  53: ST_TO_ADDR
// FogOff ( 2 ) ;
  54: LD_INT 2
  56: PPUSH
  57: CALL_OW 344
// end ; end ;
  61: END
// export debug , prefix , scoutActive , scoutFailed , scoutSuccess , usAttacksAllowed , usSurrender , russianAttack , hasRockets , seeRemoteVehicle , seeHeavyGun , remoteControlLimit , sniperKillCounter , vehLossCounter ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// debug := false ;
  65: LD_ADDR_EXP 1
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// prefix := 06_ ;
  73: LD_ADDR_EXP 2
  77: PUSH
  78: LD_STRING 06_
  80: ST_TO_ADDR
// scoutActive := 0 ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// scoutFailed := false ;
  89: LD_ADDR_EXP 4
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// scoutSuccess := false ;
  97: LD_ADDR_EXP 5
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// usAttacksAllowed := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usSurrender := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// russianAttack := false ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// hasRockets := false ;
 129: LD_ADDR_EXP 9
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// seeRemoteVehicle := false ;
 137: LD_ADDR_EXP 10
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// seeHeavyGun := false ;
 145: LD_ADDR_EXP 11
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlLimit := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: LD_INT 2
 163: PUSH
 164: LD_INT 2
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// sniperKillCounter := 0 ;
 182: LD_ADDR_EXP 13
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// vehLossCounter := 0 ;
 190: LD_ADDR_EXP 14
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// end ;
 198: LD_VAR 0 1
 202: RET
// every 0 0$2 trigger sniperKillCounter >= 3 do
 203: LD_EXP 13
 207: PUSH
 208: LD_INT 3
 210: GREATEREQUAL
 211: IFFALSE 223
 213: GO 215
 215: DISABLE
// SetAchievement ( ACH_ANTSNIPER ) ; end_of_file
 216: LD_STRING ACH_ANTSNIPER
 218: PPUSH
 219: CALL_OW 543
 223: END
// export function SayX ( units , ident ) ; var i ; begin
 224: LD_INT 0
 226: PPUSH
 227: PPUSH
// result := false ;
 228: LD_ADDR_VAR 0 3
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// if not units then
 236: LD_VAR 0 1
 240: NOT
 241: IFFALSE 245
// exit ;
 243: GO 299
// for i in units do
 245: LD_ADDR_VAR 0 4
 249: PUSH
 250: LD_VAR 0 1
 254: PUSH
 255: FOR_IN
 256: IFFALSE 297
// if IsOk ( i ) then
 258: LD_VAR 0 4
 262: PPUSH
 263: CALL_OW 302
 267: IFFALSE 295
// begin Say ( i , ident ) ;
 269: LD_VAR 0 4
 273: PPUSH
 274: LD_VAR 0 2
 278: PPUSH
 279: CALL_OW 88
// result := i ;
 283: LD_ADDR_VAR 0 3
 287: PUSH
 288: LD_VAR 0 4
 292: ST_TO_ADDR
// break ;
 293: GO 297
// end ;
 295: GO 255
 297: POP
 298: POP
// end ;
 299: LD_VAR 0 3
 303: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 304: LD_INT 0
 306: PPUSH
 307: PPUSH
// InitUc ;
 308: CALL_OW 18
// InitHc ;
 312: CALL_OW 19
// uc_side := 0 ;
 316: LD_ADDR_OWVAR 20
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// uc_nation := 0 ;
 324: LD_ADDR_OWVAR 21
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// for i = 1 to amount do
 332: LD_ADDR_VAR 0 4
 336: PUSH
 337: DOUBLE
 338: LD_INT 1
 340: DEC
 341: ST_TO_ADDR
 342: LD_VAR 0 2
 346: PUSH
 347: FOR_TO
 348: IFFALSE 430
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 350: LD_ADDR_OWVAR 29
 354: PUSH
 355: LD_INT 9
 357: PPUSH
 358: LD_INT 12
 360: PPUSH
 361: CALL_OW 12
 365: PUSH
 366: LD_INT 9
 368: PPUSH
 369: LD_INT 12
 371: PPUSH
 372: CALL_OW 12
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 381: LD_ADDR_OWVAR 35
 385: PUSH
 386: LD_INT 1
 388: NEG
 389: PPUSH
 390: LD_INT 1
 392: PPUSH
 393: CALL_OW 12
 397: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 398: LD_INT 0
 400: PPUSH
 401: LD_INT 12
 403: PPUSH
 404: LD_INT 1
 406: PPUSH
 407: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 411: CALL_OW 44
 415: PPUSH
 416: LD_VAR 0 1
 420: PPUSH
 421: LD_INT 0
 423: PPUSH
 424: CALL_OW 49
// end ;
 428: GO 347
 430: POP
 431: POP
// InitHc ;
 432: CALL_OW 19
// end ;
 436: LD_VAR 0 3
 440: RET
// export function CreateNature ( apemanArea , forest , water ) ; var i ; begin
 441: LD_INT 0
 443: PPUSH
 444: PPUSH
// uc_side := 0 ;
 445: LD_ADDR_OWVAR 20
 449: PUSH
 450: LD_INT 0
 452: ST_TO_ADDR
// uc_nation := 0 ;
 453: LD_ADDR_OWVAR 21
 457: PUSH
 458: LD_INT 0
 460: ST_TO_ADDR
// SpawnApeman ( apemanArea , [ 9 , 8 , 7 , 6 ] [ Difficulty ] ) ;
 461: LD_VAR 0 1
 465: PPUSH
 466: LD_INT 9
 468: PUSH
 469: LD_INT 8
 471: PUSH
 472: LD_INT 7
 474: PUSH
 475: LD_INT 6
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: PUSH
 484: LD_OWVAR 67
 488: ARRAY
 489: PPUSH
 490: CALL 304 0 2
// for i := 1 to 4 do
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: DOUBLE
 500: LD_INT 1
 502: DEC
 503: ST_TO_ADDR
 504: LD_INT 4
 506: PUSH
 507: FOR_TO
 508: IFFALSE 545
// begin hc_class := class_horse ;
 510: LD_ADDR_OWVAR 28
 514: PUSH
 515: LD_INT 21
 517: ST_TO_ADDR
// hc_gallery :=  ;
 518: LD_ADDR_OWVAR 33
 522: PUSH
 523: LD_STRING 
 525: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 526: CALL_OW 44
 530: PPUSH
 531: LD_VAR 0 2
 535: PPUSH
 536: LD_INT 0
 538: PPUSH
 539: CALL_OW 49
// end ;
 543: GO 507
 545: POP
 546: POP
// for i = 1 to 5 do
 547: LD_ADDR_VAR 0 5
 551: PUSH
 552: DOUBLE
 553: LD_INT 1
 555: DEC
 556: ST_TO_ADDR
 557: LD_INT 5
 559: PUSH
 560: FOR_TO
 561: IFFALSE 615
// begin hc_class = class_tiger ;
 563: LD_ADDR_OWVAR 28
 567: PUSH
 568: LD_INT 14
 570: ST_TO_ADDR
// hc_gallery =  ;
 571: LD_ADDR_OWVAR 33
 575: PUSH
 576: LD_STRING 
 578: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 579: LD_ADDR_OWVAR 35
 583: PUSH
 584: LD_INT 7
 586: NEG
 587: PPUSH
 588: LD_INT 7
 590: PPUSH
 591: CALL_OW 12
 595: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 596: CALL_OW 44
 600: PPUSH
 601: LD_VAR 0 2
 605: PPUSH
 606: LD_INT 0
 608: PPUSH
 609: CALL_OW 49
// end ;
 613: GO 560
 615: POP
 616: POP
// for i := 1 to 4 do
 617: LD_ADDR_VAR 0 5
 621: PUSH
 622: DOUBLE
 623: LD_INT 1
 625: DEC
 626: ST_TO_ADDR
 627: LD_INT 4
 629: PUSH
 630: FOR_TO
 631: IFFALSE 668
// begin hc_class := class_phororhacos ;
 633: LD_ADDR_OWVAR 28
 637: PUSH
 638: LD_INT 18
 640: ST_TO_ADDR
// hc_gallery :=  ;
 641: LD_ADDR_OWVAR 33
 645: PUSH
 646: LD_STRING 
 648: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 649: CALL_OW 44
 653: PPUSH
 654: LD_VAR 0 2
 658: PPUSH
 659: LD_INT 0
 661: PPUSH
 662: CALL_OW 49
// end ;
 666: GO 630
 668: POP
 669: POP
// for i := 1 to 4 do
 670: LD_ADDR_VAR 0 5
 674: PUSH
 675: DOUBLE
 676: LD_INT 1
 678: DEC
 679: ST_TO_ADDR
 680: LD_INT 4
 682: PUSH
 683: FOR_TO
 684: IFFALSE 721
// begin hc_class := class_baggie ;
 686: LD_ADDR_OWVAR 28
 690: PUSH
 691: LD_INT 13
 693: ST_TO_ADDR
// hc_gallery :=  ;
 694: LD_ADDR_OWVAR 33
 698: PUSH
 699: LD_STRING 
 701: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 702: CALL_OW 44
 706: PPUSH
 707: LD_VAR 0 2
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 683
 721: POP
 722: POP
// for i := 1 to 5 do
 723: LD_ADDR_VAR 0 5
 727: PUSH
 728: DOUBLE
 729: LD_INT 1
 731: DEC
 732: ST_TO_ADDR
 733: LD_INT 5
 735: PUSH
 736: FOR_TO
 737: IFFALSE 774
// begin hc_class := class_fish ;
 739: LD_ADDR_OWVAR 28
 743: PUSH
 744: LD_INT 20
 746: ST_TO_ADDR
// hc_gallery :=  ;
 747: LD_ADDR_OWVAR 33
 751: PUSH
 752: LD_STRING 
 754: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , water , false ) ;
 755: CALL_OW 44
 759: PPUSH
 760: LD_VAR 0 3
 764: PPUSH
 765: LD_INT 0
 767: PPUSH
 768: CALL_OW 49
// end ;
 772: GO 736
 774: POP
 775: POP
// end ;
 776: LD_VAR 0 4
 780: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
// if not observer or not unit then
 786: LD_VAR 0 1
 790: NOT
 791: IFTRUE 800
 793: PUSH
 794: LD_VAR 0 2
 798: NOT
 799: OR
 800: IFFALSE 804
// exit ;
 802: GO 852
// if not See ( GetSide ( observer ) , unit ) then
 804: LD_VAR 0 1
 808: PPUSH
 809: CALL_OW 255
 813: PPUSH
 814: LD_VAR 0 2
 818: PPUSH
 819: CALL_OW 292
 823: NOT
 824: IFFALSE 828
// exit ;
 826: GO 852
// result := GetDistUnits ( observer , unit ) < 12 ;
 828: LD_ADDR_VAR 0 3
 832: PUSH
 833: LD_VAR 0 1
 837: PPUSH
 838: LD_VAR 0 2
 842: PPUSH
 843: CALL_OW 296
 847: PUSH
 848: LD_INT 12
 850: LESS
 851: ST_TO_ADDR
// end ;
 852: LD_VAR 0 3
 856: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 857: LD_INT 0
 859: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 860: LD_VAR 0 2
 864: PUSH
 865: LD_INT 1
 867: ARRAY
 868: PPUSH
 869: LD_VAR 0 2
 873: PUSH
 874: LD_INT 2
 876: ARRAY
 877: PPUSH
 878: CALL_OW 488
 882: IFFALSE 912
 884: PUSH
 885: LD_VAR 0 2
 889: PUSH
 890: LD_INT 1
 892: ARRAY
 893: PPUSH
 894: LD_VAR 0 2
 898: PUSH
 899: LD_INT 2
 901: ARRAY
 902: PPUSH
 903: CALL_OW 428
 907: PUSH
 908: LD_INT 0
 910: EQUAL
 911: AND
 912: IFFALSE 946
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 914: LD_VAR 0 1
 918: PPUSH
 919: LD_VAR 0 2
 923: PUSH
 924: LD_INT 1
 926: ARRAY
 927: PPUSH
 928: LD_VAR 0 2
 932: PUSH
 933: LD_INT 2
 935: ARRAY
 936: PPUSH
 937: LD_VAR 0 3
 941: PPUSH
 942: CALL_OW 48
// end ;
 946: LD_VAR 0 4
 950: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
 951: LD_INT 0
 953: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
 954: LD_VAR 0 1
 958: PPUSH
 959: LD_VAR 0 2
 963: PPUSH
 964: LD_VAR 0 3
 968: PPUSH
 969: LD_VAR 0 4
 973: PPUSH
 974: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
 978: LD_VAR 0 1
 982: PPUSH
 983: LD_VAR 0 2
 987: PPUSH
 988: LD_VAR 0 3
 992: PPUSH
 993: CALL_OW 331
// end ;
 997: LD_VAR 0 5
1001: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1002: LD_INT 0
1004: PPUSH
// if not units then
1005: LD_VAR 0 1
1009: NOT
1010: IFFALSE 1014
// exit ;
1012: GO 1097
// result := true ;
1014: LD_ADDR_VAR 0 4
1018: PUSH
1019: LD_INT 1
1021: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1022: LD_VAR 0 1
1026: PPUSH
1027: LD_INT 26
1029: PUSH
1030: LD_INT 1
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 72
1041: PUSH
1042: LD_INT 1
1044: ARRAY
1045: PPUSH
1046: LD_VAR 0 2
1050: PPUSH
1051: CALL_OW 88
1055: NOT
1056: IFFALSE 1097
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1058: LD_ADDR_VAR 0 4
1062: PUSH
1063: LD_VAR 0 1
1067: PPUSH
1068: LD_INT 26
1070: PUSH
1071: LD_INT 2
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: PPUSH
1078: CALL_OW 72
1082: PUSH
1083: LD_INT 1
1085: ARRAY
1086: PPUSH
1087: LD_VAR 0 3
1091: PPUSH
1092: CALL_OW 88
1096: ST_TO_ADDR
// end ;
1097: LD_VAR 0 4
1101: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1102: LD_INT 0
1104: PPUSH
1105: PPUSH
// if not group then
1106: LD_VAR 0 2
1110: NOT
1111: IFFALSE 1115
// exit ;
1113: GO 1160
// for i in group do
1115: LD_ADDR_VAR 0 4
1119: PUSH
1120: LD_VAR 0 2
1124: PUSH
1125: FOR_IN
1126: IFFALSE 1158
// if See ( side , i ) then
1128: LD_VAR 0 1
1132: PPUSH
1133: LD_VAR 0 4
1137: PPUSH
1138: CALL_OW 292
1142: IFFALSE 1156
// begin result := true ;
1144: LD_ADDR_VAR 0 3
1148: PUSH
1149: LD_INT 1
1151: ST_TO_ADDR
// exit ;
1152: POP
1153: POP
1154: GO 1160
// end ;
1156: GO 1125
1158: POP
1159: POP
// end ; end_of_file
1160: LD_VAR 0 3
1164: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeApes , heikeVehicles ; export function PrepareArabian ; var i , tmp , counter , hasDrugs ; begin
1165: LD_INT 0
1167: PPUSH
1168: PPUSH
1169: PPUSH
1170: PPUSH
1171: PPUSH
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
1172: LD_ADDR_VAR 0 5
1176: PUSH
1177: LD_STRING 05_DrugsTested
1179: PPUSH
1180: LD_EXP 1
1184: PPUSH
1185: CALL_OW 30
1189: ST_TO_ADDR
// if hasDrugs then
1190: LD_VAR 0 5
1194: IFFALSE 1209
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
1196: LD_INT 5
1198: PPUSH
1199: LD_INT 2
1201: PPUSH
1202: LD_INT 2
1204: PPUSH
1205: CALL_OW 322
// uc_nation := 2 ;
1209: LD_ADDR_OWVAR 21
1213: PUSH
1214: LD_INT 2
1216: ST_TO_ADDR
// uc_side := 5 ;
1217: LD_ADDR_OWVAR 20
1221: PUSH
1222: LD_INT 5
1224: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1225: LD_ADDR_EXP 23
1229: PUSH
1230: LD_STRING Abdul
1232: PPUSH
1233: LD_INT 0
1235: PPUSH
1236: LD_STRING 
1238: PPUSH
1239: CALL 16684 0 3
1243: ST_TO_ADDR
// uc_side := 2 ;
1244: LD_ADDR_OWVAR 20
1248: PUSH
1249: LD_INT 2
1251: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1252: LD_ADDR_EXP 15
1256: PUSH
1257: LD_STRING Heike
1259: PPUSH
1260: LD_EXP 1
1264: NOT
1265: PPUSH
1266: LD_EXP 2
1270: PPUSH
1271: CALL 16684 0 3
1275: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1276: LD_ADDR_EXP 18
1280: PUSH
1281: LD_STRING Ibrahim
1283: PPUSH
1284: LD_EXP 1
1288: NOT
1289: PPUSH
1290: LD_EXP 2
1294: PPUSH
1295: CALL 16684 0 3
1299: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1300: LD_ADDR_EXP 16
1304: PUSH
1305: LD_STRING Givi
1307: PPUSH
1308: LD_EXP 1
1312: NOT
1313: PPUSH
1314: LD_EXP 2
1318: PPUSH
1319: CALL 16684 0 3
1323: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1324: LD_ADDR_EXP 19
1328: PUSH
1329: LD_STRING Kamil
1331: PPUSH
1332: LD_EXP 1
1336: NOT
1337: PPUSH
1338: LD_EXP 2
1342: PPUSH
1343: CALL 16684 0 3
1347: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1348: LD_ADDR_EXP 20
1352: PUSH
1353: LD_STRING Kaia
1355: PPUSH
1356: LD_EXP 1
1360: NOT
1361: PPUSH
1362: LD_EXP 2
1366: PPUSH
1367: CALL 16684 0 3
1371: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1372: LD_ADDR_EXP 21
1376: PUSH
1377: LD_STRING Sophia
1379: PPUSH
1380: LD_EXP 1
1384: NOT
1385: PPUSH
1386: LD_EXP 2
1390: PPUSH
1391: CALL 16684 0 3
1395: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1396: LD_ADDR_EXP 22
1400: PUSH
1401: LD_STRING Markov
1403: PPUSH
1404: LD_EXP 1
1408: NOT
1409: PPUSH
1410: LD_EXP 2
1414: PPUSH
1415: CALL 16684 0 3
1419: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1420: LD_ADDR_EXP 26
1424: PUSH
1425: LD_STRING Aviradze
1427: PPUSH
1428: LD_EXP 1
1432: NOT
1433: PPUSH
1434: LD_EXP 2
1438: PPUSH
1439: CALL 16684 0 3
1443: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1444: LD_ADDR_EXP 25
1448: PUSH
1449: LD_STRING Kurt
1451: PPUSH
1452: LD_EXP 1
1456: NOT
1457: PPUSH
1458: LD_EXP 2
1462: PPUSH
1463: CALL 16684 0 3
1467: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1468: LD_ADDR_EXP 17
1472: PUSH
1473: LD_STRING Mike
1475: PPUSH
1476: LD_EXP 1
1480: NOT
1481: PPUSH
1482: LD_EXP 2
1486: PPUSH
1487: CALL 16684 0 3
1491: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1492: LD_ADDR_EXP 24
1496: PUSH
1497: LD_STRING Olaf
1499: PPUSH
1500: LD_EXP 1
1504: NOT
1505: PPUSH
1506: LD_EXP 2
1510: PPUSH
1511: CALL 16684 0 3
1515: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 06_others ) ;
1516: LD_ADDR_EXP 27
1520: PUSH
1521: LD_STRING 06_others
1523: PPUSH
1524: CALL_OW 31
1528: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 06_apes ) ;
1529: LD_ADDR_EXP 28
1533: PUSH
1534: LD_STRING 06_apes
1536: PPUSH
1537: CALL_OW 31
1541: ST_TO_ADDR
// if debug then
1542: LD_EXP 1
1546: IFFALSE 1819
// begin tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 750 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 900 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 100 , 0 ] ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 50 , 50 ] ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_mortar , 2 , 1000 , 0 ] ] ;
1548: LD_ADDR_VAR 0 3
1552: PUSH
1553: LD_INT 14
1555: PUSH
1556: LD_INT 1
1558: PUSH
1559: LD_INT 2
1561: PUSH
1562: LD_INT 25
1564: PUSH
1565: LD_INT 2
1567: PUSH
1568: LD_INT 1000
1570: PUSH
1571: LD_INT 0
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: PUSH
1583: LD_INT 14
1585: PUSH
1586: LD_INT 1
1588: PUSH
1589: LD_INT 1
1591: PUSH
1592: LD_INT 31
1594: PUSH
1595: LD_INT 2
1597: PUSH
1598: LD_INT 1000
1600: PUSH
1601: LD_INT 0
1603: PUSH
1604: EMPTY
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: LIST
1611: LIST
1612: PUSH
1613: LD_INT 14
1615: PUSH
1616: LD_INT 1
1618: PUSH
1619: LD_INT 1
1621: PUSH
1622: LD_INT 27
1624: PUSH
1625: LD_INT 2
1627: PUSH
1628: LD_INT 750
1630: PUSH
1631: LD_INT 0
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: PUSH
1643: LD_INT 14
1645: PUSH
1646: LD_INT 1
1648: PUSH
1649: LD_INT 1
1651: PUSH
1652: LD_INT 27
1654: PUSH
1655: LD_INT 2
1657: PUSH
1658: LD_INT 900
1660: PUSH
1661: LD_INT 0
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: PUSH
1673: LD_INT 14
1675: PUSH
1676: LD_INT 1
1678: PUSH
1679: LD_INT 1
1681: PUSH
1682: LD_INT 32
1684: PUSH
1685: LD_INT 2
1687: PUSH
1688: LD_INT 1000
1690: PUSH
1691: LD_INT 100
1693: PUSH
1694: LD_INT 0
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: PUSH
1710: LD_INT 14
1712: PUSH
1713: LD_INT 1
1715: PUSH
1716: LD_INT 1
1718: PUSH
1719: LD_INT 32
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: LD_INT 1000
1727: PUSH
1728: LD_INT 50
1730: PUSH
1731: LD_INT 50
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: LIST
1744: LIST
1745: LIST
1746: PUSH
1747: LD_INT 14
1749: PUSH
1750: LD_INT 1
1752: PUSH
1753: LD_INT 2
1755: PUSH
1756: LD_INT 27
1758: PUSH
1759: LD_INT 2
1761: PUSH
1762: LD_INT 1000
1764: PUSH
1765: LD_INT 0
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: PUSH
1777: LD_INT 14
1779: PUSH
1780: LD_INT 1
1782: PUSH
1783: LD_INT 1
1785: PUSH
1786: LD_INT 92
1788: PUSH
1789: LD_INT 2
1791: PUSH
1792: LD_INT 1000
1794: PUSH
1795: LD_INT 0
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: ST_TO_ADDR
// end else
1817: GO 1826
// tmp := [ ] ;
1819: LD_ADDR_VAR 0 3
1823: PUSH
1824: EMPTY
1825: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 06_Vehicles , tmp ) ;
1826: LD_ADDR_EXP 29
1830: PUSH
1831: LD_STRING 06_Vehicles
1833: PPUSH
1834: LD_VAR 0 3
1838: PPUSH
1839: CALL_OW 30
1843: ST_TO_ADDR
// counter := 0 ;
1844: LD_ADDR_VAR 0 4
1848: PUSH
1849: LD_INT 0
1851: ST_TO_ADDR
// if heikeVehicles then
1852: LD_EXP 29
1856: IFFALSE 1978
// begin for i := heikeVehicles downto 1 do
1858: LD_ADDR_VAR 0 2
1862: PUSH
1863: DOUBLE
1864: LD_EXP 29
1868: INC
1869: ST_TO_ADDR
1870: LD_INT 1
1872: PUSH
1873: FOR_DOWNTO
1874: IFFALSE 1976
// begin if heikeVehicles [ i ] [ 3 ] = control_remote then
1876: LD_EXP 29
1880: PUSH
1881: LD_VAR 0 2
1885: ARRAY
1886: PUSH
1887: LD_INT 3
1889: ARRAY
1890: PUSH
1891: LD_INT 2
1893: EQUAL
1894: IFFALSE 1974
// begin if counter < remoteControlLimit then
1896: LD_VAR 0 4
1900: PUSH
1901: LD_EXP 12
1905: LESS
1906: IFFALSE 1954
// begin counter := Inc ( counter ) ;
1908: LD_ADDR_VAR 0 4
1912: PUSH
1913: LD_VAR 0 4
1917: PPUSH
1918: CALL 56213 0 1
1922: ST_TO_ADDR
// heikeVehicles := Insert ( heikeVehicles , heikeVehicles , heikeVehicles [ i ] ) ;
1923: LD_ADDR_EXP 29
1927: PUSH
1928: LD_EXP 29
1932: PPUSH
1933: LD_EXP 29
1937: PPUSH
1938: LD_EXP 29
1942: PUSH
1943: LD_VAR 0 2
1947: ARRAY
1948: PPUSH
1949: CALL_OW 2
1953: ST_TO_ADDR
// end ; heikeVehicles := Delete ( heikeVehicles , i ) ;
1954: LD_ADDR_EXP 29
1958: PUSH
1959: LD_EXP 29
1963: PPUSH
1964: LD_VAR 0 2
1968: PPUSH
1969: CALL_OW 3
1973: ST_TO_ADDR
// end ; end ;
1974: GO 1873
1976: POP
1977: POP
// end ; end ;
1978: LD_VAR 0 1
1982: RET
// every 0 0$1 trigger scoutActive do var i , tmp ;
1983: LD_EXP 3
1987: IFFALSE 2531
1989: GO 1991
1991: DISABLE
1992: LD_INT 0
1994: PPUSH
1995: PPUSH
// begin tmp := [ [ [ 96 , 50 ] , [ 49 , 52 ] , [ 34 , 55 ] , [ 41 , 70 ] , [ 53 , 96 ] , [ 103 , 64 ] ] , [ [ 104 , 70 ] , [ 111 , 103 ] , [ 131 , 147 ] , [ 130 , 153 ] , [ 110 , 93 ] , [ 103 , 65 ] ] ] ;
1996: LD_ADDR_VAR 0 2
2000: PUSH
2001: LD_INT 96
2003: PUSH
2004: LD_INT 50
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PUSH
2011: LD_INT 49
2013: PUSH
2014: LD_INT 52
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 34
2023: PUSH
2024: LD_INT 55
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: PUSH
2031: LD_INT 41
2033: PUSH
2034: LD_INT 70
2036: PUSH
2037: EMPTY
2038: LIST
2039: LIST
2040: PUSH
2041: LD_INT 53
2043: PUSH
2044: LD_INT 96
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: LD_INT 103
2053: PUSH
2054: LD_INT 64
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: PUSH
2061: EMPTY
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 104
2071: PUSH
2072: LD_INT 70
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 111
2081: PUSH
2082: LD_INT 103
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PUSH
2089: LD_INT 131
2091: PUSH
2092: LD_INT 147
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: PUSH
2099: LD_INT 130
2101: PUSH
2102: LD_INT 153
2104: PUSH
2105: EMPTY
2106: LIST
2107: LIST
2108: PUSH
2109: LD_INT 110
2111: PUSH
2112: LD_INT 93
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: PUSH
2119: LD_INT 103
2121: PUSH
2122: LD_INT 65
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: LIST
2133: LIST
2134: LIST
2135: LIST
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: ST_TO_ADDR
// for i in tmp [ 1 ] do
2141: LD_ADDR_VAR 0 1
2145: PUSH
2146: LD_VAR 0 2
2150: PUSH
2151: LD_INT 1
2153: ARRAY
2154: PUSH
2155: FOR_IN
2156: IFFALSE 2208
// begin AddComAgressiveMove ( Mike , i [ 1 ] , i [ 2 ] ) ;
2158: LD_EXP 17
2162: PPUSH
2163: LD_VAR 0 1
2167: PUSH
2168: LD_INT 1
2170: ARRAY
2171: PPUSH
2172: LD_VAR 0 1
2176: PUSH
2177: LD_INT 2
2179: ARRAY
2180: PPUSH
2181: CALL_OW 174
// AddComHold ( Mike ) ;
2185: LD_EXP 17
2189: PPUSH
2190: CALL_OW 200
// AddComWait ( Mike , 0 0$5 ) ;
2194: LD_EXP 17
2198: PPUSH
2199: LD_INT 175
2201: PPUSH
2202: CALL_OW 202
// end ;
2206: GO 2155
2208: POP
2209: POP
// for i in tmp [ 2 ] do
2210: LD_ADDR_VAR 0 1
2214: PUSH
2215: LD_VAR 0 2
2219: PUSH
2220: LD_INT 2
2222: ARRAY
2223: PUSH
2224: FOR_IN
2225: IFFALSE 2277
// begin AddComAgressiveMove ( Kurt , i [ 1 ] , i [ 2 ] ) ;
2227: LD_EXP 25
2231: PPUSH
2232: LD_VAR 0 1
2236: PUSH
2237: LD_INT 1
2239: ARRAY
2240: PPUSH
2241: LD_VAR 0 1
2245: PUSH
2246: LD_INT 2
2248: ARRAY
2249: PPUSH
2250: CALL_OW 174
// AddComHold ( Kurt ) ;
2254: LD_EXP 25
2258: PPUSH
2259: CALL_OW 200
// AddComWait ( Kurt , 0 0$5 ) ;
2263: LD_EXP 25
2267: PPUSH
2268: LD_INT 175
2270: PPUSH
2271: CALL_OW 202
// end ;
2275: GO 2224
2277: POP
2278: POP
// wait ( 2 2$00 ) ;
2279: LD_INT 4200
2281: PPUSH
2282: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2286: LD_INT 35
2288: PPUSH
2289: CALL_OW 67
// until ( not HasTask ( Mike ) or IsDead ( Mike ) ) and ( not HasTask ( Kurt ) or IsDead ( Kurt ) ) ;
2293: LD_EXP 17
2297: PPUSH
2298: CALL_OW 314
2302: NOT
2303: IFTRUE 2316
2305: PUSH
2306: LD_EXP 17
2310: PPUSH
2311: CALL_OW 301
2315: OR
2316: IFFALSE 2343
2318: PUSH
2319: LD_EXP 25
2323: PPUSH
2324: CALL_OW 314
2328: NOT
2329: IFTRUE 2342
2331: PUSH
2332: LD_EXP 25
2336: PPUSH
2337: CALL_OW 301
2341: OR
2342: AND
2343: IFFALSE 2286
// if IsDead ( Kurt ) and IsDead ( Mike ) then
2345: LD_EXP 25
2349: PPUSH
2350: CALL_OW 301
2354: IFFALSE 2367
2356: PUSH
2357: LD_EXP 17
2361: PPUSH
2362: CALL_OW 301
2366: AND
2367: IFFALSE 2379
// begin scoutFailed := true ;
2369: LD_ADDR_EXP 4
2373: PUSH
2374: LD_INT 1
2376: ST_TO_ADDR
// exit ;
2377: GO 2531
// end ; ComMoveXY ( [ Kurt , Mike ] , 132 , 52 ) ;
2379: LD_EXP 25
2383: PUSH
2384: LD_EXP 17
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: PPUSH
2393: LD_INT 132
2395: PPUSH
2396: LD_INT 52
2398: PPUSH
2399: CALL_OW 111
// AddComMoveUnit ( [ Kurt , Mike ] , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
2403: LD_EXP 25
2407: PUSH
2408: LD_EXP 17
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: PPUSH
2417: LD_INT 22
2419: PUSH
2420: LD_INT 2
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PPUSH
2427: CALL_OW 69
2431: PUSH
2432: LD_INT 1
2434: ARRAY
2435: PPUSH
2436: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
2440: LD_INT 35
2442: PPUSH
2443: CALL_OW 67
// until See ( 2 , Kurt ) or See ( 2 , Mike ) ;
2447: LD_INT 2
2449: PPUSH
2450: LD_EXP 25
2454: PPUSH
2455: CALL_OW 292
2459: IFTRUE 2475
2461: PUSH
2462: LD_INT 2
2464: PPUSH
2465: LD_EXP 17
2469: PPUSH
2470: CALL_OW 292
2474: OR
2475: IFFALSE 2440
// if IsLive ( Kurt ) then
2477: LD_EXP 25
2481: PPUSH
2482: CALL_OW 300
2486: IFFALSE 2500
// SetSide ( Kurt , 2 ) ;
2488: LD_EXP 25
2492: PPUSH
2493: LD_INT 2
2495: PPUSH
2496: CALL_OW 235
// if IsLive ( Mike ) then
2500: LD_EXP 17
2504: PPUSH
2505: CALL_OW 300
2509: IFFALSE 2523
// SetSide ( Mike , 2 ) ;
2511: LD_EXP 17
2515: PPUSH
2516: LD_INT 2
2518: PPUSH
2519: CALL_OW 235
// scoutSuccess := true ;
2523: LD_ADDR_EXP 5
2527: PUSH
2528: LD_INT 1
2530: ST_TO_ADDR
// end ; end_of_file
2531: PPOPN 2
2533: END
// export usCommander , usForces , usCargo , usToBuild , usAdditionalForces , usCratesCollector ; export function PrepareAmerican ; var i , b , veh ; begin
2534: LD_INT 0
2536: PPUSH
2537: PPUSH
2538: PPUSH
2539: PPUSH
// uc_side := 1 ;
2540: LD_ADDR_OWVAR 20
2544: PUSH
2545: LD_INT 1
2547: ST_TO_ADDR
// uc_nation := 1 ;
2548: LD_ADDR_OWVAR 21
2552: PUSH
2553: LD_INT 1
2555: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 1500 , 2200 , 3500 , 3900 ] [ Difficulty ] ) ;
2556: LD_INT 1
2558: PPUSH
2559: CALL_OW 274
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: LD_INT 1500
2569: PUSH
2570: LD_INT 2200
2572: PUSH
2573: LD_INT 3500
2575: PUSH
2576: LD_INT 3900
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: PUSH
2585: LD_OWVAR 67
2589: ARRAY
2590: PPUSH
2591: CALL_OW 277
// SetResourceType ( GetBase ( usDepot ) , mat_oil , 800 ) ;
2595: LD_INT 1
2597: PPUSH
2598: CALL_OW 274
2602: PPUSH
2603: LD_INT 2
2605: PPUSH
2606: LD_INT 800
2608: PPUSH
2609: CALL_OW 277
// usForces := [ ] ;
2613: LD_ADDR_EXP 31
2617: PUSH
2618: EMPTY
2619: ST_TO_ADDR
// usToBuild := [ ] ;
2620: LD_ADDR_EXP 33
2624: PUSH
2625: EMPTY
2626: ST_TO_ADDR
// usAdditionalForces := [ ] ;
2627: LD_ADDR_EXP 34
2631: PUSH
2632: EMPTY
2633: ST_TO_ADDR
// usCratesCollector := [ ] ;
2634: LD_ADDR_EXP 35
2638: PUSH
2639: EMPTY
2640: ST_TO_ADDR
// for i := 1 to 3 do
2641: LD_ADDR_VAR 0 2
2645: PUSH
2646: DOUBLE
2647: LD_INT 1
2649: DEC
2650: ST_TO_ADDR
2651: LD_INT 3
2653: PUSH
2654: FOR_TO
2655: IFFALSE 2709
// begin PrepareApemanEngineer ( ) ;
2657: CALL 50865 0 0
// usCratesCollector := Join ( usCratesCollector , CreateHuman ) ;
2661: LD_ADDR_EXP 35
2665: PUSH
2666: LD_EXP 35
2670: PPUSH
2671: CALL_OW 44
2675: PPUSH
2676: CALL 54840 0 2
2680: ST_TO_ADDR
// PlaceUnitXYR ( Last ( usCratesCollector ) , 81 , 142 , 4 , false ) ;
2681: LD_EXP 35
2685: PPUSH
2686: CALL 59667 0 1
2690: PPUSH
2691: LD_INT 81
2693: PPUSH
2694: LD_INT 142
2696: PPUSH
2697: LD_INT 4
2699: PPUSH
2700: LD_INT 0
2702: PPUSH
2703: CALL_OW 50
// end ;
2707: GO 2654
2709: POP
2710: POP
// InitHc ;
2711: CALL_OW 19
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2715: LD_ADDR_VAR 0 2
2719: PUSH
2720: LD_INT 21
2722: PUSH
2723: LD_INT 3
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PPUSH
2730: CALL_OW 69
2734: PUSH
2735: FOR_IN
2736: IFFALSE 2773
// SetBLevel ( i , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
2738: LD_VAR 0 2
2742: PPUSH
2743: LD_INT 6
2745: PUSH
2746: LD_INT 7
2748: PUSH
2749: LD_INT 8
2751: PUSH
2752: LD_INT 8
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: LIST
2759: LIST
2760: PUSH
2761: LD_OWVAR 67
2765: ARRAY
2766: PPUSH
2767: CALL_OW 241
2771: GO 2735
2773: POP
2774: POP
// for i in FilterAllUnits ( [ f_btype , b_bunker ] ) do
2775: LD_ADDR_VAR 0 2
2779: PUSH
2780: LD_INT 30
2782: PUSH
2783: LD_INT 32
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: PPUSH
2790: CALL_OW 69
2794: PUSH
2795: FOR_IN
2796: IFFALSE 2886
// begin if GetBWeapon ( i ) = us_radar then
2798: LD_VAR 0 2
2802: PPUSH
2803: CALL_OW 269
2807: PUSH
2808: LD_INT 11
2810: EQUAL
2811: IFFALSE 2836
// begin uc_nation := 0 ;
2813: LD_ADDR_OWVAR 21
2817: PUSH
2818: LD_INT 0
2820: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 2 ) ;
2821: LD_INT 0
2823: PPUSH
2824: LD_INT 16
2826: PPUSH
2827: LD_INT 2
2829: PPUSH
2830: CALL_OW 380
// end else
2834: GO 2870
// PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2836: LD_INT 0
2838: PPUSH
2839: LD_INT 1
2841: PPUSH
2842: LD_INT 5
2844: PUSH
2845: LD_INT 6
2847: PUSH
2848: LD_INT 7
2850: PUSH
2851: LD_INT 8
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: LIST
2858: LIST
2859: PUSH
2860: LD_OWVAR 67
2864: ARRAY
2865: PPUSH
2866: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2870: CALL_OW 44
2874: PPUSH
2875: LD_VAR 0 2
2879: PPUSH
2880: CALL_OW 52
// end ;
2884: GO 2795
2886: POP
2887: POP
// b := HexInfo ( 74 , 120 ) ;
2888: LD_ADDR_VAR 0 3
2892: PUSH
2893: LD_INT 74
2895: PPUSH
2896: LD_INT 120
2898: PPUSH
2899: CALL_OW 428
2903: ST_TO_ADDR
// uc_nation := 1 ;
2904: LD_ADDR_OWVAR 21
2908: PUSH
2909: LD_INT 1
2911: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
2912: LD_ADDR_VAR 0 2
2916: PUSH
2917: DOUBLE
2918: LD_INT 1
2920: DEC
2921: ST_TO_ADDR
2922: LD_INT 1
2924: PUSH
2925: LD_INT 2
2927: PUSH
2928: LD_INT 3
2930: PUSH
2931: LD_INT 4
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: LIST
2938: LIST
2939: PUSH
2940: LD_OWVAR 67
2944: ARRAY
2945: PUSH
2946: FOR_TO
2947: IFFALSE 2999
// begin PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2949: LD_INT 0
2951: PPUSH
2952: LD_INT 1
2954: PPUSH
2955: LD_INT 5
2957: PUSH
2958: LD_INT 6
2960: PUSH
2961: LD_INT 7
2963: PUSH
2964: LD_INT 8
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: LIST
2971: LIST
2972: PUSH
2973: LD_OWVAR 67
2977: ARRAY
2978: PPUSH
2979: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b ) ;
2983: CALL_OW 44
2987: PPUSH
2988: LD_VAR 0 3
2992: PPUSH
2993: CALL_OW 52
// end ;
2997: GO 2946
2999: POP
3000: POP
// SetClass ( UnitsInside ( b ) , class_sniper ) ;
3001: LD_VAR 0 3
3005: PPUSH
3006: CALL_OW 313
3010: PPUSH
3011: LD_INT 5
3013: PPUSH
3014: CALL_OW 336
// for i := 1 to 6 do
3018: LD_ADDR_VAR 0 2
3022: PUSH
3023: DOUBLE
3024: LD_INT 1
3026: DEC
3027: ST_TO_ADDR
3028: LD_INT 6
3030: PUSH
3031: FOR_TO
3032: IFFALSE 3082
// begin PrepareHuman ( false , 4 , 6 ) ;
3034: LD_INT 0
3036: PPUSH
3037: LD_INT 4
3039: PPUSH
3040: LD_INT 6
3042: PPUSH
3043: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ amLab1 , amLab2 ] [ i mod 2 + 1 ] ) ;
3047: CALL_OW 44
3051: PPUSH
3052: LD_INT 32
3054: PUSH
3055: LD_INT 33
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: PUSH
3062: LD_VAR 0 2
3066: PUSH
3067: LD_INT 2
3069: MOD
3070: PUSH
3071: LD_INT 1
3073: PLUS
3074: ARRAY
3075: PPUSH
3076: CALL_OW 52
// end ;
3080: GO 3031
3082: POP
3083: POP
// for i := 1 to 3 do
3084: LD_ADDR_VAR 0 2
3088: PUSH
3089: DOUBLE
3090: LD_INT 1
3092: DEC
3093: ST_TO_ADDR
3094: LD_INT 3
3096: PUSH
3097: FOR_TO
3098: IFFALSE 3127
// begin PrepareHuman ( false , 3 , 6 ) ;
3100: LD_INT 0
3102: PPUSH
3103: LD_INT 3
3105: PPUSH
3106: LD_INT 6
3108: PPUSH
3109: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , amFac ) ;
3113: CALL_OW 44
3117: PPUSH
3118: LD_INT 25
3120: PPUSH
3121: CALL_OW 52
// end ;
3125: GO 3097
3127: POP
3128: POP
// for i := 1 to 3 do
3129: LD_ADDR_VAR 0 2
3133: PUSH
3134: DOUBLE
3135: LD_INT 1
3137: DEC
3138: ST_TO_ADDR
3139: LD_INT 3
3141: PUSH
3142: FOR_TO
3143: IFFALSE 3201
// begin PrepareHuman ( false , 3 , [ 6 , 7 , 7 , 7 ] [ Difficulty ] ) ;
3145: LD_INT 0
3147: PPUSH
3148: LD_INT 3
3150: PPUSH
3151: LD_INT 6
3153: PUSH
3154: LD_INT 7
3156: PUSH
3157: LD_INT 7
3159: PUSH
3160: LD_INT 7
3162: PUSH
3163: EMPTY
3164: LIST
3165: LIST
3166: LIST
3167: LIST
3168: PUSH
3169: LD_OWVAR 67
3173: ARRAY
3174: PPUSH
3175: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 78 , 130 ) ) ;
3179: CALL_OW 44
3183: PPUSH
3184: LD_INT 78
3186: PPUSH
3187: LD_INT 130
3189: PPUSH
3190: CALL_OW 428
3194: PPUSH
3195: CALL_OW 52
// end ;
3199: GO 3142
3201: POP
3202: POP
// for i := 1 to [ 1 , 2 , 3 , 3 ] [ Difficulty ] do
3203: LD_ADDR_VAR 0 2
3207: PUSH
3208: DOUBLE
3209: LD_INT 1
3211: DEC
3212: ST_TO_ADDR
3213: LD_INT 1
3215: PUSH
3216: LD_INT 2
3218: PUSH
3219: LD_INT 3
3221: PUSH
3222: LD_INT 3
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: LIST
3229: LIST
3230: PUSH
3231: LD_OWVAR 67
3235: ARRAY
3236: PUSH
3237: FOR_TO
3238: IFFALSE 3325
// begin PrepareVehicle ( us_medium_wheeled , engine_solar , control_manual , us_crane , 100 ) ;
3240: LD_INT 2
3242: PPUSH
3243: LD_INT 2
3245: PPUSH
3246: LD_INT 1
3248: PPUSH
3249: LD_INT 13
3251: PPUSH
3252: LD_INT 100
3254: PPUSH
3255: CALL 21670 0 5
// veh := CreateVehicle ;
3259: LD_ADDR_VAR 0 4
3263: PUSH
3264: CALL_OW 45
3268: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3269: LD_VAR 0 4
3273: PPUSH
3274: LD_INT 3
3276: PPUSH
3277: CALL_OW 233
// PlaceUnitArea ( veh , usCraneArea , false ) ;
3281: LD_VAR 0 4
3285: PPUSH
3286: LD_INT 9
3288: PPUSH
3289: LD_INT 0
3291: PPUSH
3292: CALL_OW 49
// PrepareHuman ( false , 3 , 6 ) ;
3296: LD_INT 0
3298: PPUSH
3299: LD_INT 3
3301: PPUSH
3302: LD_INT 6
3304: PPUSH
3305: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3309: CALL_OW 44
3313: PPUSH
3314: LD_VAR 0 4
3318: PPUSH
3319: CALL_OW 52
// end ;
3323: GO 3237
3325: POP
3326: POP
// InitHc ;
3327: CALL_OW 19
// hc_gallery := sandar ;
3331: LD_ADDR_OWVAR 33
3335: PUSH
3336: LD_STRING sandar
3338: ST_TO_ADDR
// hc_face_number := 38 ;
3339: LD_ADDR_OWVAR 34
3343: PUSH
3344: LD_INT 38
3346: ST_TO_ADDR
// hc_name := Doug Callahan ;
3347: LD_ADDR_OWVAR 26
3351: PUSH
3352: LD_STRING Doug Callahan
3354: ST_TO_ADDR
// hc_class := class_engineer ;
3355: LD_ADDR_OWVAR 28
3359: PUSH
3360: LD_INT 2
3362: ST_TO_ADDR
// hc_sex := sex_male ;
3363: LD_ADDR_OWVAR 27
3367: PUSH
3368: LD_INT 1
3370: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
3371: LD_ADDR_OWVAR 29
3375: PUSH
3376: LD_INT 10
3378: PUSH
3379: LD_INT 11
3381: PUSH
3382: EMPTY
3383: LIST
3384: LIST
3385: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
3386: LD_ADDR_OWVAR 30
3390: PUSH
3391: LD_INT 2
3393: PUSH
3394: LD_INT 1
3396: PUSH
3397: LD_INT 0
3399: PUSH
3400: LD_INT 0
3402: PUSH
3403: EMPTY
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: ST_TO_ADDR
// hc_skills := [ 4 , 6 , 3 , 1 ] ;
3409: LD_ADDR_OWVAR 31
3413: PUSH
3414: LD_INT 4
3416: PUSH
3417: LD_INT 6
3419: PUSH
3420: LD_INT 3
3422: PUSH
3423: LD_INT 1
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: ST_TO_ADDR
// usCommander := CreateHuman ;
3432: LD_ADDR_EXP 30
3436: PUSH
3437: CALL_OW 44
3441: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
3442: LD_EXP 30
3446: PPUSH
3447: LD_INT 1
3449: PPUSH
3450: CALL_OW 52
// DoNotAttack ( 2 , usCommander ) ;
3454: LD_INT 2
3456: PPUSH
3457: LD_EXP 30
3461: PPUSH
3462: CALL_OW 471
// InitHC_All ( ) ;
3466: CALL_OW 584
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay , 100 ) ;
3470: LD_INT 2
3472: PPUSH
3473: LD_INT 1
3475: PPUSH
3476: LD_INT 2
3478: PPUSH
3479: LD_INT 12
3481: PPUSH
3482: LD_INT 100
3484: PPUSH
3485: CALL 21670 0 5
// usCargo := CreateVehicle ;
3489: LD_ADDR_EXP 32
3493: PUSH
3494: CALL_OW 45
3498: ST_TO_ADDR
// PlaceUnitXY ( usCargo , 81 , 143 , false ) ;
3499: LD_EXP 32
3503: PPUSH
3504: LD_INT 81
3506: PPUSH
3507: LD_INT 143
3509: PPUSH
3510: LD_INT 0
3512: PPUSH
3513: CALL_OW 48
// Connect ( usCargo ) ;
3517: LD_EXP 32
3521: PPUSH
3522: CALL 25152 0 1
// DoNotAttack ( 5 , usCargo ) ;
3526: LD_INT 5
3528: PPUSH
3529: LD_EXP 32
3533: PPUSH
3534: CALL_OW 471
// end ;
3538: LD_VAR 0 1
3542: RET
// every 6 6$00 trigger usAttacksAllowed and IsOk ( amFac ) and BuildingStatus ( amFac ) = bs_idle do var i , chassis , weapon ;
3543: LD_EXP 6
3547: IFFALSE 3558
3549: PUSH
3550: LD_INT 25
3552: PPUSH
3553: CALL_OW 302
3557: AND
3558: IFFALSE 3573
3560: PUSH
3561: LD_INT 25
3563: PPUSH
3564: CALL_OW 461
3568: PUSH
3569: LD_INT 2
3571: EQUAL
3572: AND
3573: IFFALSE 3730
3575: GO 3577
3577: DISABLE
3578: LD_INT 0
3580: PPUSH
3581: PPUSH
3582: PPUSH
// begin enable ;
3583: ENABLE
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
3584: LD_ADDR_VAR 0 1
3588: PUSH
3589: DOUBLE
3590: LD_INT 1
3592: DEC
3593: ST_TO_ADDR
3594: LD_INT 4
3596: PUSH
3597: LD_INT 5
3599: PUSH
3600: LD_INT 6
3602: PUSH
3603: LD_INT 6
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: PUSH
3612: LD_OWVAR 67
3616: ARRAY
3617: PUSH
3618: FOR_TO
3619: IFFALSE 3728
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3621: LD_ADDR_VAR 0 2
3625: PUSH
3626: LD_INT 2
3628: PUSH
3629: LD_INT 3
3631: PUSH
3632: LD_INT 4
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: LIST
3639: PUSH
3640: LD_INT 1
3642: PPUSH
3643: LD_INT 3
3645: PPUSH
3646: CALL_OW 12
3650: ARRAY
3651: ST_TO_ADDR
// if chassis = us_heavy_tracked then
3652: LD_VAR 0 2
3656: PUSH
3657: LD_INT 4
3659: EQUAL
3660: IFFALSE 3672
// weapon := us_heavy_gun else
3662: LD_ADDR_VAR 0 3
3666: PUSH
3667: LD_INT 6
3669: ST_TO_ADDR
3670: GO 3703
// weapon := [ us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3672: LD_ADDR_VAR 0 3
3676: PUSH
3677: LD_INT 5
3679: PUSH
3680: LD_INT 7
3682: PUSH
3683: LD_INT 4
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: LIST
3690: PUSH
3691: LD_INT 1
3693: PPUSH
3694: LD_INT 3
3696: PPUSH
3697: CALL_OW 12
3701: ARRAY
3702: ST_TO_ADDR
// AddComConstruct ( amFac , chassis , engine_combustion , control_remote , weapon ) ;
3703: LD_INT 25
3705: PPUSH
3706: LD_VAR 0 2
3710: PPUSH
3711: LD_INT 1
3713: PPUSH
3714: LD_INT 2
3716: PPUSH
3717: LD_VAR 0 3
3721: PPUSH
3722: CALL_OW 185
// end ;
3726: GO 3618
3728: POP
3729: POP
// end ;
3730: PPOPN 3
3732: END
// every 0 0$01 do var i , un , tmp ;
3733: GO 3735
3735: DISABLE
3736: LD_INT 0
3738: PPUSH
3739: PPUSH
3740: PPUSH
// begin if Difficulty < 2 then
3741: LD_OWVAR 67
3745: PUSH
3746: LD_INT 2
3748: LESS
3749: IFFALSE 3753
// exit ;
3751: GO 4036
// tmp := [ ] ;
3753: LD_ADDR_VAR 0 3
3757: PUSH
3758: EMPTY
3759: ST_TO_ADDR
// for i := 1 to Difficulty do
3760: LD_ADDR_VAR 0 1
3764: PUSH
3765: DOUBLE
3766: LD_INT 1
3768: DEC
3769: ST_TO_ADDR
3770: LD_OWVAR 67
3774: PUSH
3775: FOR_TO
3776: IFFALSE 3872
// begin uc_side := 4 ;
3778: LD_ADDR_OWVAR 20
3782: PUSH
3783: LD_INT 4
3785: ST_TO_ADDR
// uc_nation := nation_american ;
3786: LD_ADDR_OWVAR 21
3790: PUSH
3791: LD_INT 1
3793: ST_TO_ADDR
// PrepareSoldier ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3794: LD_INT 0
3796: PPUSH
3797: LD_INT 3
3799: PUSH
3800: LD_INT 4
3802: PUSH
3803: LD_INT 5
3805: PUSH
3806: LD_INT 6
3808: PUSH
3809: EMPTY
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: PUSH
3815: LD_OWVAR 67
3819: ARRAY
3820: PPUSH
3821: CALL_OW 381
// un := CreateHuman ;
3825: LD_ADDR_VAR 0 2
3829: PUSH
3830: CALL_OW 44
3834: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
3835: LD_ADDR_VAR 0 3
3839: PUSH
3840: LD_VAR 0 3
3844: PPUSH
3845: LD_VAR 0 2
3849: PPUSH
3850: CALL 54840 0 2
3854: ST_TO_ADDR
// PlaceUnitArea ( un , westSpawnArea , false ) ;
3855: LD_VAR 0 2
3859: PPUSH
3860: LD_INT 19
3862: PPUSH
3863: LD_INT 0
3865: PPUSH
3866: CALL_OW 49
// end ;
3870: GO 3775
3872: POP
3873: POP
// for i in tmp do
3874: LD_ADDR_VAR 0 1
3878: PUSH
3879: LD_VAR 0 3
3883: PUSH
3884: FOR_IN
3885: IFFALSE 3931
// begin ComAgressiveMove ( i , 54 , 51 ) ;
3887: LD_VAR 0 1
3891: PPUSH
3892: LD_INT 54
3894: PPUSH
3895: LD_INT 51
3897: PPUSH
3898: CALL_OW 114
// AddComWait ( i , 0 0$20 ) ;
3902: LD_VAR 0 1
3906: PPUSH
3907: LD_INT 700
3909: PPUSH
3910: CALL_OW 202
// AddComAgressiveMove ( i , 35 , 6 ) ;
3914: LD_VAR 0 1
3918: PPUSH
3919: LD_INT 35
3921: PPUSH
3922: LD_INT 6
3924: PPUSH
3925: CALL_OW 174
// end ;
3929: GO 3884
3931: POP
3932: POP
// repeat wait ( 7 7$00 ) ;
3933: LD_INT 14700
3935: PPUSH
3936: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
3940: LD_ADDR_VAR 0 3
3944: PUSH
3945: LD_VAR 0 3
3949: PPUSH
3950: LD_INT 50
3952: PUSH
3953: EMPTY
3954: LIST
3955: PPUSH
3956: CALL_OW 72
3960: ST_TO_ADDR
// if not tmp then
3961: LD_VAR 0 3
3965: NOT
3966: IFFALSE 3970
// exit ;
3968: GO 4036
// for i in tmp do
3970: LD_ADDR_VAR 0 1
3974: PUSH
3975: LD_VAR 0 3
3979: PUSH
3980: FOR_IN
3981: IFFALSE 4027
// begin ComAgressiveMove ( i , 54 , 51 ) ;
3983: LD_VAR 0 1
3987: PPUSH
3988: LD_INT 54
3990: PPUSH
3991: LD_INT 51
3993: PPUSH
3994: CALL_OW 114
// AddComWait ( i , 0 0$20 ) ;
3998: LD_VAR 0 1
4002: PPUSH
4003: LD_INT 700
4005: PPUSH
4006: CALL_OW 202
// AddComAgressiveMove ( i , 35 , 6 ) ;
4010: LD_VAR 0 1
4014: PPUSH
4015: LD_INT 35
4017: PPUSH
4018: LD_INT 6
4020: PPUSH
4021: CALL_OW 174
// end ;
4025: GO 3980
4027: POP
4028: POP
// until not tmp ;
4029: LD_VAR 0 3
4033: NOT
4034: IFFALSE 3933
// end ;
4036: PPOPN 3
4038: END
// every 0 0$10 trigger usForces >= [ 4 , 5 , 6 , 6 ] [ Difficulty ] do var i , tmp ;
4039: LD_EXP 31
4043: PUSH
4044: LD_INT 4
4046: PUSH
4047: LD_INT 5
4049: PUSH
4050: LD_INT 6
4052: PUSH
4053: LD_INT 6
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: PUSH
4062: LD_OWVAR 67
4066: ARRAY
4067: GREATEREQUAL
4068: IFFALSE 4250
4070: GO 4072
4072: DISABLE
4073: LD_INT 0
4075: PPUSH
4076: PPUSH
// begin enable ;
4077: ENABLE
// tmp := usForces ;
4078: LD_ADDR_VAR 0 2
4082: PUSH
4083: LD_EXP 31
4087: ST_TO_ADDR
// usForces := [ ] ;
4088: LD_ADDR_EXP 31
4092: PUSH
4093: EMPTY
4094: ST_TO_ADDR
// if not tmp then
4095: LD_VAR 0 2
4099: NOT
4100: IFFALSE 4104
// exit ;
4102: GO 4250
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 123 , 141 , 20 ] ] ) then
4104: LD_INT 22
4106: PUSH
4107: LD_INT 2
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: PUSH
4114: LD_INT 92
4116: PUSH
4117: LD_INT 123
4119: PUSH
4120: LD_INT 141
4122: PUSH
4123: LD_INT 20
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PPUSH
4136: CALL_OW 69
4140: IFFALSE 4164
// begin ComAgressiveMove ( tmp , 126 , 143 ) ;
4142: LD_VAR 0 2
4146: PPUSH
4147: LD_INT 126
4149: PPUSH
4150: LD_INT 143
4152: PPUSH
4153: CALL_OW 114
// wait ( 0 0$30 ) ;
4157: LD_INT 1050
4159: PPUSH
4160: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
4164: LD_INT 35
4166: PPUSH
4167: CALL_OW 67
// tmp := AgressiveMove ( tmp , [ [ 51 , 50 ] , [ 98 , 50 ] , [ 114 , 50 ] , [ 127 , 51 ] , [ 131 , 35 ] ] ) ;
4171: LD_ADDR_VAR 0 2
4175: PUSH
4176: LD_VAR 0 2
4180: PPUSH
4181: LD_INT 51
4183: PUSH
4184: LD_INT 50
4186: PUSH
4187: EMPTY
4188: LIST
4189: LIST
4190: PUSH
4191: LD_INT 98
4193: PUSH
4194: LD_INT 50
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: PUSH
4201: LD_INT 114
4203: PUSH
4204: LD_INT 50
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: PUSH
4211: LD_INT 127
4213: PUSH
4214: LD_INT 51
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: PUSH
4221: LD_INT 131
4223: PUSH
4224: LD_INT 35
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: PUSH
4231: EMPTY
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: PPUSH
4238: CALL 57606 0 2
4242: ST_TO_ADDR
// until not tmp ;
4243: LD_VAR 0 2
4247: NOT
4248: IFFALSE 4164
// end ;
4250: PPOPN 2
4252: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( southScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
4253: LD_EXP 3
4257: IFFALSE 4266
4259: PUSH
4260: LD_EXP 5
4264: NOT
4265: AND
4266: IFFALSE 4287
4268: PUSH
4269: LD_INT 11
4271: PPUSH
4272: LD_INT 22
4274: PUSH
4275: LD_INT 2
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: PPUSH
4282: CALL_OW 70
4286: AND
4287: IFFALSE 4408
4289: GO 4291
4291: DISABLE
4292: LD_INT 0
4294: PPUSH
4295: PPUSH
4296: PPUSH
// begin uc_side := 1 ;
4297: LD_ADDR_OWVAR 20
4301: PUSH
4302: LD_INT 1
4304: ST_TO_ADDR
// uc_nation := 1 ;
4305: LD_ADDR_OWVAR 21
4309: PUSH
4310: LD_INT 1
4312: ST_TO_ADDR
// tmp := [ ] ;
4313: LD_ADDR_VAR 0 3
4317: PUSH
4318: EMPTY
4319: ST_TO_ADDR
// for i := 1 to 2 do
4320: LD_ADDR_VAR 0 1
4324: PUSH
4325: DOUBLE
4326: LD_INT 1
4328: DEC
4329: ST_TO_ADDR
4330: LD_INT 2
4332: PUSH
4333: FOR_TO
4334: IFFALSE 4406
// begin PrepareSoldier ( false , 7 ) ;
4336: LD_INT 0
4338: PPUSH
4339: LD_INT 7
4341: PPUSH
4342: CALL_OW 381
// un := CreateHuman ;
4346: LD_ADDR_VAR 0 2
4350: PUSH
4351: CALL_OW 44
4355: ST_TO_ADDR
// PlaceUnitXYR ( un , 130 , 153 , 3 , false ) ;
4356: LD_VAR 0 2
4360: PPUSH
4361: LD_INT 130
4363: PPUSH
4364: LD_INT 153
4366: PPUSH
4367: LD_INT 3
4369: PPUSH
4370: LD_INT 0
4372: PPUSH
4373: CALL_OW 50
// SetClass ( un , class_sniper ) ;
4377: LD_VAR 0 2
4381: PPUSH
4382: LD_INT 5
4384: PPUSH
4385: CALL_OW 336
// AddComAgressiveMove ( un , 108 , 108 ) ;
4389: LD_VAR 0 2
4393: PPUSH
4394: LD_INT 108
4396: PPUSH
4397: LD_INT 108
4399: PPUSH
4400: CALL_OW 174
// end ;
4404: GO 4333
4406: POP
4407: POP
// end ;
4408: PPOPN 3
4410: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( northScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
4411: LD_EXP 3
4415: IFFALSE 4424
4417: PUSH
4418: LD_EXP 5
4422: NOT
4423: AND
4424: IFFALSE 4445
4426: PUSH
4427: LD_INT 10
4429: PPUSH
4430: LD_INT 22
4432: PUSH
4433: LD_INT 2
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PPUSH
4440: CALL_OW 70
4444: AND
4445: IFFALSE 4566
4447: GO 4449
4449: DISABLE
4450: LD_INT 0
4452: PPUSH
4453: PPUSH
4454: PPUSH
// begin uc_side := 1 ;
4455: LD_ADDR_OWVAR 20
4459: PUSH
4460: LD_INT 1
4462: ST_TO_ADDR
// uc_nation := 1 ;
4463: LD_ADDR_OWVAR 21
4467: PUSH
4468: LD_INT 1
4470: ST_TO_ADDR
// tmp := [ ] ;
4471: LD_ADDR_VAR 0 3
4475: PUSH
4476: EMPTY
4477: ST_TO_ADDR
// for i := 1 to 2 do
4478: LD_ADDR_VAR 0 1
4482: PUSH
4483: DOUBLE
4484: LD_INT 1
4486: DEC
4487: ST_TO_ADDR
4488: LD_INT 2
4490: PUSH
4491: FOR_TO
4492: IFFALSE 4564
// begin PrepareSoldier ( false , 7 ) ;
4494: LD_INT 0
4496: PPUSH
4497: LD_INT 7
4499: PPUSH
4500: CALL_OW 381
// un := CreateHuman ;
4504: LD_ADDR_VAR 0 2
4508: PUSH
4509: CALL_OW 44
4513: ST_TO_ADDR
// PlaceUnitXYR ( un , 56 , 101 , 3 , false ) ;
4514: LD_VAR 0 2
4518: PPUSH
4519: LD_INT 56
4521: PPUSH
4522: LD_INT 101
4524: PPUSH
4525: LD_INT 3
4527: PPUSH
4528: LD_INT 0
4530: PPUSH
4531: CALL_OW 50
// SetClass ( un , class_sniper ) ;
4535: LD_VAR 0 2
4539: PPUSH
4540: LD_INT 5
4542: PPUSH
4543: CALL_OW 336
// AddComAgressiveMove ( un , 72 , 92 ) ;
4547: LD_VAR 0 2
4551: PPUSH
4552: LD_INT 72
4554: PPUSH
4555: LD_INT 92
4557: PPUSH
4558: CALL_OW 174
// end ;
4562: GO 4491
4564: POP
4565: POP
// end ;
4566: PPOPN 3
4568: END
// every 0 0$2 trigger not usSurrender do var i , tmp , cr , enemyInArea ;
4569: LD_EXP 7
4573: NOT
4574: IFFALSE 4779
4576: GO 4578
4578: DISABLE
4579: LD_INT 0
4581: PPUSH
4582: PPUSH
4583: PPUSH
4584: PPUSH
// begin enable ;
4585: ENABLE
// enemyInArea := FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_distxy , 113 , 139 , 15 ] ] ) ;
4586: LD_ADDR_VAR 0 4
4590: PUSH
4591: LD_INT 81
4593: PUSH
4594: LD_INT 1
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: PUSH
4601: LD_INT 92
4603: PUSH
4604: LD_INT 113
4606: PUSH
4607: LD_INT 139
4609: PUSH
4610: LD_INT 15
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: PUSH
4619: EMPTY
4620: LIST
4621: LIST
4622: PPUSH
4623: CALL_OW 69
4627: ST_TO_ADDR
// cr := GetListOfCratesInArea ( americanCratesArea ) ;
4628: LD_ADDR_VAR 0 3
4632: PUSH
4633: LD_INT 20
4635: PPUSH
4636: CALL_OW 435
4640: ST_TO_ADDR
// tmp := UnitFilter ( usCratesCollector , [ f_ok ] ) ;
4641: LD_ADDR_VAR 0 2
4645: PUSH
4646: LD_EXP 35
4650: PPUSH
4651: LD_INT 50
4653: PUSH
4654: EMPTY
4655: LIST
4656: PPUSH
4657: CALL_OW 72
4661: ST_TO_ADDR
// if not tmp then
4662: LD_VAR 0 2
4666: NOT
4667: IFFALSE 4672
// begin disable ;
4669: DISABLE
// exit ;
4670: GO 4779
// end ; for i in tmp do
4672: LD_ADDR_VAR 0 1
4676: PUSH
4677: LD_VAR 0 2
4681: PUSH
4682: FOR_IN
4683: IFFALSE 4777
// begin if enemyInArea and GetDistUnits ( i , usDepot ) > 12 then
4685: LD_VAR 0 4
4689: IFFALSE 4709
4691: PUSH
4692: LD_VAR 0 1
4696: PPUSH
4697: LD_INT 1
4699: PPUSH
4700: CALL_OW 296
4704: PUSH
4705: LD_INT 12
4707: GREATER
4708: AND
4709: IFFALSE 4728
// ComMoveXY ( i , 83 , 147 ) else
4711: LD_VAR 0 1
4715: PPUSH
4716: LD_INT 83
4718: PPUSH
4719: LD_INT 147
4721: PPUSH
4722: CALL_OW 111
4726: GO 4775
// if not HasTask ( i ) and cr then
4728: LD_VAR 0 1
4732: PPUSH
4733: CALL_OW 314
4737: NOT
4738: IFFALSE 4746
4740: PUSH
4741: LD_VAR 0 3
4745: AND
4746: IFFALSE 4775
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
4748: LD_VAR 0 1
4752: PPUSH
4753: LD_VAR 0 3
4757: PUSH
4758: LD_INT 1
4760: ARRAY
4761: PPUSH
4762: LD_VAR 0 3
4766: PUSH
4767: LD_INT 2
4769: ARRAY
4770: PPUSH
4771: CALL_OW 117
// end ;
4775: GO 4682
4777: POP
4778: POP
// end ;
4779: PPOPN 4
4781: END
// every 0 0$2 trigger IsOk ( usCargo ) and not usSurrender do var cr , enemyInArea ;
4782: LD_EXP 32
4786: PPUSH
4787: CALL_OW 302
4791: IFFALSE 4800
4793: PUSH
4794: LD_EXP 7
4798: NOT
4799: AND
4800: IFFALSE 5071
4802: GO 4804
4804: DISABLE
4805: LD_INT 0
4807: PPUSH
4808: PPUSH
// begin enable ;
4809: ENABLE
// enemyInArea := FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4810: LD_ADDR_VAR 0 2
4814: PUSH
4815: LD_INT 16
4817: PPUSH
4818: LD_INT 81
4820: PUSH
4821: LD_INT 1
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 50
4830: PUSH
4831: EMPTY
4832: LIST
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PPUSH
4838: CALL_OW 70
4842: ST_TO_ADDR
// cr := GetListOfCratesInArea ( usCratesArea ) ;
4843: LD_ADDR_VAR 0 1
4847: PUSH
4848: LD_INT 12
4850: PPUSH
4851: CALL_OW 435
4855: ST_TO_ADDR
// if GetFuel ( usCargo ) < 10 and not See ( 2 , usCargo ) then
4856: LD_EXP 32
4860: PPUSH
4861: CALL_OW 261
4865: PUSH
4866: LD_INT 10
4868: LESS
4869: IFFALSE 4886
4871: PUSH
4872: LD_INT 2
4874: PPUSH
4875: LD_EXP 32
4879: PPUSH
4880: CALL_OW 292
4884: NOT
4885: AND
4886: IFFALSE 4900
// SetFuel ( usCargo , 100 ) ;
4888: LD_EXP 32
4892: PPUSH
4893: LD_INT 100
4895: PPUSH
4896: CALL_OW 240
// if not HasTask ( usCargo ) and GetCargo ( usCargo , mat_cans ) < 100 and not enemyInArea then
4900: LD_EXP 32
4904: PPUSH
4905: CALL_OW 314
4909: NOT
4910: IFFALSE 4930
4912: PUSH
4913: LD_EXP 32
4917: PPUSH
4918: LD_INT 1
4920: PPUSH
4921: CALL_OW 289
4925: PUSH
4926: LD_INT 100
4928: LESS
4929: AND
4930: IFFALSE 4939
4932: PUSH
4933: LD_VAR 0 2
4937: NOT
4938: AND
4939: IFFALSE 5005
// begin if cr then
4941: LD_VAR 0 1
4945: IFFALSE 4976
// ComCollect ( usCargo , cr [ 1 ] , cr [ 2 ] ) else
4947: LD_EXP 32
4951: PPUSH
4952: LD_VAR 0 1
4956: PUSH
4957: LD_INT 1
4959: ARRAY
4960: PPUSH
4961: LD_VAR 0 1
4965: PUSH
4966: LD_INT 2
4968: ARRAY
4969: PPUSH
4970: CALL_OW 117
4974: GO 5003
// if not IsInArea ( usCargo , usCratesArea ) then
4976: LD_EXP 32
4980: PPUSH
4981: LD_INT 12
4983: PPUSH
4984: CALL_OW 308
4988: NOT
4989: IFFALSE 5003
// ComMoveToArea ( usCargo , usCratesArea ) ;
4991: LD_EXP 32
4995: PPUSH
4996: LD_INT 12
4998: PPUSH
4999: CALL_OW 113
// exit ;
5003: GO 5071
// end ; if enemyInArea and not IsInArea ( usCargo , americanBaseArea ) then
5005: LD_VAR 0 2
5009: IFFALSE 5026
5011: PUSH
5012: LD_EXP 32
5016: PPUSH
5017: LD_INT 16
5019: PPUSH
5020: CALL_OW 308
5024: NOT
5025: AND
5026: IFFALSE 5045
// ComMoveXY ( usCargo , 80 , 143 ) else
5028: LD_EXP 32
5032: PPUSH
5033: LD_INT 80
5035: PPUSH
5036: LD_INT 143
5038: PPUSH
5039: CALL_OW 111
5043: GO 5071
// if GetCargo ( usCargo , mat_cans ) then
5045: LD_EXP 32
5049: PPUSH
5050: LD_INT 1
5052: PPUSH
5053: CALL_OW 289
5057: IFFALSE 5071
// ComGive ( usCargo , usDepot ) ;
5059: LD_EXP 32
5063: PPUSH
5064: LD_INT 1
5066: PPUSH
5067: CALL_OW 161
// end ;
5071: PPOPN 2
5073: END
// every 0 0$3 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) do var i , sci ;
5074: LD_EXP 7
5078: NOT
5079: IFFALSE 5125
5081: PUSH
5082: LD_INT 22
5084: PUSH
5085: LD_INT 1
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: PUSH
5092: LD_INT 21
5094: PUSH
5095: LD_INT 1
5097: PUSH
5098: EMPTY
5099: LIST
5100: LIST
5101: PUSH
5102: LD_INT 3
5104: PUSH
5105: LD_INT 50
5107: PUSH
5108: EMPTY
5109: LIST
5110: PUSH
5111: EMPTY
5112: LIST
5113: LIST
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: LIST
5119: PPUSH
5120: CALL_OW 69
5124: AND
5125: IFFALSE 5171
5127: PUSH
5128: LD_INT 22
5130: PUSH
5131: LD_INT 1
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: PUSH
5138: LD_INT 3
5140: PUSH
5141: LD_INT 60
5143: PUSH
5144: EMPTY
5145: LIST
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PUSH
5151: LD_INT 25
5153: PUSH
5154: LD_INT 4
5156: PUSH
5157: EMPTY
5158: LIST
5159: LIST
5160: PUSH
5161: EMPTY
5162: LIST
5163: LIST
5164: LIST
5165: PPUSH
5166: CALL_OW 69
5170: AND
5171: IFFALSE 5374
5173: GO 5175
5175: DISABLE
5176: LD_INT 0
5178: PPUSH
5179: PPUSH
// begin enable ;
5180: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) do
5181: LD_ADDR_VAR 0 1
5185: PUSH
5186: LD_INT 22
5188: PUSH
5189: LD_INT 1
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: PUSH
5196: LD_INT 21
5198: PUSH
5199: LD_INT 1
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: PUSH
5206: LD_INT 3
5208: PUSH
5209: LD_INT 50
5211: PUSH
5212: EMPTY
5213: LIST
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: LIST
5223: PPUSH
5224: CALL_OW 69
5228: PUSH
5229: FOR_IN
5230: IFFALSE 5372
// begin sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) ;
5232: LD_ADDR_VAR 0 2
5236: PUSH
5237: LD_INT 22
5239: PUSH
5240: LD_INT 1
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: LD_INT 3
5249: PUSH
5250: LD_INT 60
5252: PUSH
5253: EMPTY
5254: LIST
5255: PUSH
5256: EMPTY
5257: LIST
5258: LIST
5259: PUSH
5260: LD_INT 25
5262: PUSH
5263: LD_INT 4
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: LIST
5274: PPUSH
5275: CALL_OW 69
5279: ST_TO_ADDR
// if not sci then
5280: LD_VAR 0 2
5284: NOT
5285: IFFALSE 5289
// break ;
5287: GO 5372
// sci := sci [ 1 ] ;
5289: LD_ADDR_VAR 0 2
5293: PUSH
5294: LD_VAR 0 2
5298: PUSH
5299: LD_INT 1
5301: ARRAY
5302: ST_TO_ADDR
// if IsInUnit ( sci ) then
5303: LD_VAR 0 2
5307: PPUSH
5308: CALL_OW 310
5312: IFFALSE 5325
// ComExit ( sci ) else
5314: LD_VAR 0 2
5318: PPUSH
5319: CALL 55238 0 1
5323: GO 5370
// begin ComHeal ( sci , i ) ;
5325: LD_VAR 0 2
5329: PPUSH
5330: LD_VAR 0 1
5334: PPUSH
5335: CALL_OW 128
// AddComEnterUnit ( sci , [ amLab1 , amLab2 ] [ rand ( 1 , 2 ) ] ) ;
5339: LD_VAR 0 2
5343: PPUSH
5344: LD_INT 32
5346: PUSH
5347: LD_INT 33
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: PUSH
5354: LD_INT 1
5356: PPUSH
5357: LD_INT 2
5359: PPUSH
5360: CALL_OW 12
5364: ARRAY
5365: PPUSH
5366: CALL_OW 180
// end ; end ;
5370: GO 5229
5372: POP
5373: POP
// end ;
5374: PPOPN 2
5376: END
// every 0 0$2 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) do var i , tmp , tmp2 ;
5377: LD_EXP 7
5381: NOT
5382: IFFALSE 5435
5384: PUSH
5385: LD_INT 22
5387: PUSH
5388: LD_INT 1
5390: PUSH
5391: EMPTY
5392: LIST
5393: LIST
5394: PUSH
5395: LD_INT 3
5397: PUSH
5398: LD_INT 60
5400: PUSH
5401: EMPTY
5402: LIST
5403: PUSH
5404: EMPTY
5405: LIST
5406: LIST
5407: PUSH
5408: LD_INT 50
5410: PUSH
5411: EMPTY
5412: LIST
5413: PUSH
5414: LD_INT 34
5416: PUSH
5417: LD_INT 13
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: LIST
5428: LIST
5429: PPUSH
5430: CALL_OW 69
5434: AND
5435: IFFALSE 5503
5437: PUSH
5438: LD_INT 22
5440: PUSH
5441: LD_INT 1
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: PUSH
5448: LD_INT 3
5450: PUSH
5451: LD_INT 24
5453: PUSH
5454: LD_INT 1000
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: PUSH
5465: LD_INT 21
5467: PUSH
5468: LD_INT 3
5470: PUSH
5471: EMPTY
5472: LIST
5473: LIST
5474: PUSH
5475: LD_INT 3
5477: PUSH
5478: LD_INT 30
5480: PUSH
5481: LD_INT 29
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: PUSH
5488: EMPTY
5489: LIST
5490: LIST
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: LIST
5496: LIST
5497: PPUSH
5498: CALL_OW 69
5502: AND
5503: IFFALSE 5772
5505: GO 5507
5507: DISABLE
5508: LD_INT 0
5510: PPUSH
5511: PPUSH
5512: PPUSH
// begin enable ;
5513: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
5514: LD_ADDR_VAR 0 2
5518: PUSH
5519: LD_INT 22
5521: PUSH
5522: LD_INT 1
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: PUSH
5529: LD_INT 3
5531: PUSH
5532: LD_INT 24
5534: PUSH
5535: LD_INT 1000
5537: PUSH
5538: EMPTY
5539: LIST
5540: LIST
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: PUSH
5546: LD_INT 21
5548: PUSH
5549: LD_INT 3
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: PUSH
5556: LD_INT 3
5558: PUSH
5559: LD_INT 30
5561: PUSH
5562: LD_INT 29
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: PPUSH
5579: CALL_OW 69
5583: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
5584: LD_ADDR_VAR 0 3
5588: PUSH
5589: LD_INT 22
5591: PUSH
5592: LD_INT 1
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PUSH
5599: LD_INT 3
5601: PUSH
5602: LD_INT 24
5604: PUSH
5605: LD_INT 600
5607: PUSH
5608: EMPTY
5609: LIST
5610: LIST
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: PUSH
5616: LD_INT 21
5618: PUSH
5619: LD_INT 3
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: PUSH
5626: LD_INT 3
5628: PUSH
5629: LD_INT 30
5631: PUSH
5632: LD_INT 29
5634: PUSH
5635: EMPTY
5636: LIST
5637: LIST
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PUSH
5643: EMPTY
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: PPUSH
5649: CALL_OW 69
5653: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
5654: LD_ADDR_VAR 0 1
5658: PUSH
5659: LD_INT 22
5661: PUSH
5662: LD_INT 1
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: PUSH
5669: LD_INT 3
5671: PUSH
5672: LD_INT 60
5674: PUSH
5675: EMPTY
5676: LIST
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: LD_INT 50
5684: PUSH
5685: EMPTY
5686: LIST
5687: PUSH
5688: LD_INT 34
5690: PUSH
5691: LD_INT 13
5693: PUSH
5694: EMPTY
5695: LIST
5696: LIST
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: PPUSH
5704: CALL_OW 69
5708: PUSH
5709: FOR_IN
5710: IFFALSE 5770
// begin if tmp2 then
5712: LD_VAR 0 3
5716: IFFALSE 5744
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
5718: LD_VAR 0 1
5722: PPUSH
5723: LD_VAR 0 3
5727: PPUSH
5728: LD_VAR 0 1
5732: PPUSH
5733: CALL_OW 74
5737: PPUSH
5738: CALL_OW 130
5742: GO 5768
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
5744: LD_VAR 0 1
5748: PPUSH
5749: LD_VAR 0 2
5753: PPUSH
5754: LD_VAR 0 1
5758: PPUSH
5759: CALL_OW 74
5763: PPUSH
5764: CALL_OW 130
// end ;
5768: GO 5709
5770: POP
5771: POP
// end ;
5772: PPOPN 3
5774: END
// every 0 0$1 trigger not usSurrender and not FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) and usToBuild and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
5775: LD_EXP 7
5779: NOT
5780: IFFALSE 5812
5782: PUSH
5783: LD_INT 16
5785: PPUSH
5786: LD_INT 81
5788: PUSH
5789: LD_INT 1
5791: PUSH
5792: EMPTY
5793: LIST
5794: LIST
5795: PUSH
5796: LD_INT 50
5798: PUSH
5799: EMPTY
5800: LIST
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: PPUSH
5806: CALL_OW 70
5810: NOT
5811: AND
5812: IFFALSE 5820
5814: PUSH
5815: LD_EXP 33
5819: AND
5820: IFFALSE 5873
5822: PUSH
5823: LD_INT 22
5825: PUSH
5826: LD_INT 1
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: PUSH
5833: LD_INT 3
5835: PUSH
5836: LD_INT 60
5838: PUSH
5839: EMPTY
5840: LIST
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: PUSH
5846: LD_INT 50
5848: PUSH
5849: EMPTY
5850: LIST
5851: PUSH
5852: LD_INT 34
5854: PUSH
5855: LD_INT 13
5857: PUSH
5858: EMPTY
5859: LIST
5860: LIST
5861: PUSH
5862: EMPTY
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: PPUSH
5868: CALL_OW 69
5872: AND
5873: IFFALSE 5985
5875: GO 5877
5877: DISABLE
// begin enable ;
5878: ENABLE
// ComCraneBuild ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) , usToBuild [ 1 ] [ 1 ] , usToBuild [ 1 ] [ 2 ] , usToBuild [ 1 ] [ 3 ] , usToBuild [ 1 ] [ 4 ] ) ;
5879: LD_INT 22
5881: PUSH
5882: LD_INT 1
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: PUSH
5889: LD_INT 3
5891: PUSH
5892: LD_INT 60
5894: PUSH
5895: EMPTY
5896: LIST
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: PUSH
5902: LD_INT 50
5904: PUSH
5905: EMPTY
5906: LIST
5907: PUSH
5908: LD_INT 34
5910: PUSH
5911: LD_INT 13
5913: PUSH
5914: EMPTY
5915: LIST
5916: LIST
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: PPUSH
5924: CALL_OW 69
5928: PPUSH
5929: LD_EXP 33
5933: PUSH
5934: LD_INT 1
5936: ARRAY
5937: PUSH
5938: LD_INT 1
5940: ARRAY
5941: PPUSH
5942: LD_EXP 33
5946: PUSH
5947: LD_INT 1
5949: ARRAY
5950: PUSH
5951: LD_INT 2
5953: ARRAY
5954: PPUSH
5955: LD_EXP 33
5959: PUSH
5960: LD_INT 1
5962: ARRAY
5963: PUSH
5964: LD_INT 3
5966: ARRAY
5967: PPUSH
5968: LD_EXP 33
5972: PUSH
5973: LD_INT 1
5975: ARRAY
5976: PUSH
5977: LD_INT 4
5979: ARRAY
5980: PPUSH
5981: CALL_OW 566
// end ;
5985: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) do var i , tmp , btmp , barracks ;
5986: LD_INT 22
5988: PUSH
5989: LD_INT 1
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: PUSH
5996: LD_INT 50
5998: PUSH
5999: EMPTY
6000: LIST
6001: PUSH
6002: LD_INT 3
6004: PUSH
6005: LD_INT 54
6007: PUSH
6008: EMPTY
6009: LIST
6010: PUSH
6011: EMPTY
6012: LIST
6013: LIST
6014: PUSH
6015: LD_INT 2
6017: PUSH
6018: LD_INT 25
6020: PUSH
6021: LD_INT 1
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: PUSH
6028: LD_INT 25
6030: PUSH
6031: LD_INT 5
6033: PUSH
6034: EMPTY
6035: LIST
6036: LIST
6037: PUSH
6038: LD_INT 25
6040: PUSH
6041: LD_INT 16
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: PUSH
6048: EMPTY
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: PPUSH
6060: CALL_OW 69
6064: IFFALSE 6428
6066: GO 6068
6068: DISABLE
6069: LD_INT 0
6071: PPUSH
6072: PPUSH
6073: PPUSH
6074: PPUSH
// begin enable ;
6075: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) ;
6076: LD_ADDR_VAR 0 2
6080: PUSH
6081: LD_INT 22
6083: PUSH
6084: LD_INT 1
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: PUSH
6091: LD_INT 50
6093: PUSH
6094: EMPTY
6095: LIST
6096: PUSH
6097: LD_INT 3
6099: PUSH
6100: LD_INT 54
6102: PUSH
6103: EMPTY
6104: LIST
6105: PUSH
6106: EMPTY
6107: LIST
6108: LIST
6109: PUSH
6110: LD_INT 2
6112: PUSH
6113: LD_INT 25
6115: PUSH
6116: LD_INT 1
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PUSH
6123: LD_INT 25
6125: PUSH
6126: LD_INT 5
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PUSH
6133: LD_INT 25
6135: PUSH
6136: LD_INT 16
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: PPUSH
6155: CALL_OW 69
6159: ST_TO_ADDR
// btmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
6160: LD_ADDR_VAR 0 3
6164: PUSH
6165: LD_INT 22
6167: PUSH
6168: LD_INT 1
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PUSH
6175: LD_INT 50
6177: PUSH
6178: EMPTY
6179: LIST
6180: PUSH
6181: LD_INT 21
6183: PUSH
6184: LD_INT 3
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: LD_INT 30
6193: PUSH
6194: LD_INT 32
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: PUSH
6201: LD_INT 58
6203: PUSH
6204: EMPTY
6205: LIST
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 69
6218: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) ;
6219: LD_ADDR_VAR 0 4
6223: PUSH
6224: LD_INT 22
6226: PUSH
6227: LD_INT 1
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: LD_INT 50
6236: PUSH
6237: EMPTY
6238: LIST
6239: PUSH
6240: LD_INT 30
6242: PUSH
6243: LD_INT 5
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: LIST
6254: PPUSH
6255: CALL_OW 69
6259: ST_TO_ADDR
// if not tmp then
6260: LD_VAR 0 2
6264: NOT
6265: IFFALSE 6269
// exit ;
6267: GO 6428
// for i in tmp do
6269: LD_ADDR_VAR 0 1
6273: PUSH
6274: LD_VAR 0 2
6278: PUSH
6279: FOR_IN
6280: IFFALSE 6426
// begin btmp := FilterByTag ( btmp , 0 ) ;
6282: LD_ADDR_VAR 0 3
6286: PUSH
6287: LD_VAR 0 3
6291: PPUSH
6292: LD_INT 0
6294: PPUSH
6295: CALL 52385 0 2
6299: ST_TO_ADDR
// if not btmp then
6300: LD_VAR 0 3
6304: NOT
6305: IFFALSE 6352
// begin if GetClass ( i ) <> class_apeman_engineer and barracks then
6307: LD_VAR 0 1
6311: PPUSH
6312: CALL_OW 257
6316: PUSH
6317: LD_INT 16
6319: NONEQUAL
6320: IFFALSE 6328
6322: PUSH
6323: LD_VAR 0 4
6327: AND
6328: IFFALSE 6348
// ComEnterUnit ( i , barracks [ 1 ] ) ;
6330: LD_VAR 0 1
6334: PPUSH
6335: LD_VAR 0 4
6339: PUSH
6340: LD_INT 1
6342: ARRAY
6343: PPUSH
6344: CALL_OW 120
// continue ;
6348: GO 6279
// end else
6350: GO 6424
// begin SetTag ( btmp [ 1 ] , 1 ) ;
6352: LD_VAR 0 3
6356: PUSH
6357: LD_INT 1
6359: ARRAY
6360: PPUSH
6361: LD_INT 1
6363: PPUSH
6364: CALL_OW 109
// ComEnterUnit ( i , btmp [ 1 ] ) ;
6368: LD_VAR 0 1
6372: PPUSH
6373: LD_VAR 0 3
6377: PUSH
6378: LD_INT 1
6380: ARRAY
6381: PPUSH
6382: CALL_OW 120
// wait ( 0 0$9 ) ;
6386: LD_INT 315
6388: PPUSH
6389: CALL_OW 67
// if IsEmpty ( btmp [ 1 ] ) then
6393: LD_VAR 0 3
6397: PUSH
6398: LD_INT 1
6400: ARRAY
6401: PPUSH
6402: CALL 18930 0 1
6406: IFFALSE 6424
// SetTag ( btmp [ 1 ] , 0 ) ;
6408: LD_VAR 0 3
6412: PUSH
6413: LD_INT 1
6415: ARRAY
6416: PPUSH
6417: LD_INT 0
6419: PPUSH
6420: CALL_OW 109
// end ; end ;
6424: GO 6279
6426: POP
6427: POP
// end ;
6428: PPOPN 4
6430: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do var i , tmp ;
6431: LD_INT 22
6433: PUSH
6434: LD_INT 1
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: PUSH
6441: LD_INT 33
6443: PUSH
6444: LD_INT 2
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PUSH
6451: LD_INT 50
6453: PUSH
6454: EMPTY
6455: LIST
6456: PUSH
6457: LD_INT 3
6459: PUSH
6460: LD_INT 61
6462: PUSH
6463: EMPTY
6464: LIST
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: PPUSH
6476: CALL_OW 69
6480: IFFALSE 6571
6482: GO 6484
6484: DISABLE
6485: LD_INT 0
6487: PPUSH
6488: PPUSH
// begin enable ;
6489: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
6490: LD_ADDR_VAR 0 2
6494: PUSH
6495: LD_INT 22
6497: PUSH
6498: LD_INT 1
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: PUSH
6505: LD_INT 33
6507: PUSH
6508: LD_INT 2
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PUSH
6515: LD_INT 50
6517: PUSH
6518: EMPTY
6519: LIST
6520: PUSH
6521: LD_INT 3
6523: PUSH
6524: LD_INT 61
6526: PUSH
6527: EMPTY
6528: LIST
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: PPUSH
6540: CALL_OW 69
6544: ST_TO_ADDR
// for i in tmp do
6545: LD_ADDR_VAR 0 1
6549: PUSH
6550: LD_VAR 0 2
6554: PUSH
6555: FOR_IN
6556: IFFALSE 6569
// Connect ( i ) ;
6558: LD_VAR 0 1
6562: PPUSH
6563: CALL 25152 0 1
6567: GO 6555
6569: POP
6570: POP
// end ;
6571: PPOPN 2
6573: END
// every 1 1$00 trigger usAttacksAllowed and Difficulty > 1 do var i , un , veh , chassis , weapon ;
6574: LD_EXP 6
6578: IFFALSE 6590
6580: PUSH
6581: LD_OWVAR 67
6585: PUSH
6586: LD_INT 1
6588: GREATER
6589: AND
6590: IFFALSE 7041
6592: GO 6594
6594: DISABLE
6595: LD_INT 0
6597: PPUSH
6598: PPUSH
6599: PPUSH
6600: PPUSH
6601: PPUSH
// begin wait ( [ 15 15$00 , 15 15$00 , 14 14$00 , 13 13$00 ] [ Difficulty ] ) ;
6602: LD_INT 31500
6604: PUSH
6605: LD_INT 31500
6607: PUSH
6608: LD_INT 29400
6610: PUSH
6611: LD_INT 27300
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: PUSH
6620: LD_OWVAR 67
6624: ARRAY
6625: PPUSH
6626: CALL_OW 67
// if usSurrender then
6630: LD_EXP 7
6634: IFFALSE 6638
// exit ;
6636: GO 7041
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] do
6638: LD_ADDR_VAR 0 1
6642: PUSH
6643: DOUBLE
6644: LD_INT 1
6646: DEC
6647: ST_TO_ADDR
6648: LD_INT 4
6650: PUSH
6651: LD_INT 5
6653: PUSH
6654: LD_INT 5
6656: PUSH
6657: LD_INT 6
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: PUSH
6666: LD_OWVAR 67
6670: ARRAY
6671: PUSH
6672: FOR_TO
6673: IFFALSE 6986
// begin uc_side := 1 ;
6675: LD_ADDR_OWVAR 20
6679: PUSH
6680: LD_INT 1
6682: ST_TO_ADDR
// uc_nation := 1 ;
6683: LD_ADDR_OWVAR 21
6687: PUSH
6688: LD_INT 1
6690: ST_TO_ADDR
// InitHc_All ( ) ;
6691: CALL_OW 584
// PrepareHuman ( false , 3 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
6695: LD_INT 0
6697: PPUSH
6698: LD_INT 3
6700: PPUSH
6701: LD_INT 5
6703: PUSH
6704: LD_INT 6
6706: PUSH
6707: LD_INT 7
6709: PUSH
6710: LD_INT 8
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: PUSH
6719: LD_OWVAR 67
6723: ARRAY
6724: PPUSH
6725: CALL_OW 380
// un := CreateHuman ;
6729: LD_ADDR_VAR 0 2
6733: PUSH
6734: CALL_OW 44
6738: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ i mod 3 + 1 ] ;
6739: LD_ADDR_VAR 0 4
6743: PUSH
6744: LD_INT 2
6746: PUSH
6747: LD_INT 3
6749: PUSH
6750: LD_INT 4
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: LIST
6757: PUSH
6758: LD_VAR 0 1
6762: PUSH
6763: LD_INT 3
6765: MOD
6766: PUSH
6767: LD_INT 1
6769: PLUS
6770: ARRAY
6771: ST_TO_ADDR
// if chassis = us_heavy_tracked then
6772: LD_VAR 0 4
6776: PUSH
6777: LD_INT 4
6779: EQUAL
6780: IFFALSE 6815
// weapon := [ us_heavy_gun , us_gatling_gun , us_double_gun ] [ rand ( 1 , 3 ) ] else
6782: LD_ADDR_VAR 0 5
6786: PUSH
6787: LD_INT 6
6789: PUSH
6790: LD_INT 4
6792: PUSH
6793: LD_INT 5
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 1
6803: PPUSH
6804: LD_INT 3
6806: PPUSH
6807: CALL_OW 12
6811: ARRAY
6812: ST_TO_ADDR
6813: GO 6850
// weapon := [ us_double_gun , us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6815: LD_ADDR_VAR 0 5
6819: PUSH
6820: LD_INT 5
6822: PUSH
6823: LD_INT 5
6825: PUSH
6826: LD_INT 7
6828: PUSH
6829: LD_INT 4
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: PUSH
6838: LD_INT 1
6840: PPUSH
6841: LD_INT 4
6843: PPUSH
6844: CALL_OW 12
6848: ARRAY
6849: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_manual , weapon , 30 ) ;
6850: LD_VAR 0 4
6854: PPUSH
6855: LD_INT 1
6857: PPUSH
6858: LD_INT 1
6860: PPUSH
6861: LD_VAR 0 5
6865: PPUSH
6866: LD_INT 30
6868: PPUSH
6869: CALL 21670 0 5
// veh := CreateVehicle ;
6873: LD_ADDR_VAR 0 3
6877: PUSH
6878: CALL_OW 45
6882: ST_TO_ADDR
// usAdditionalForces := Replace ( usAdditionalForces , usAdditionalForces + 1 , veh ) ;
6883: LD_ADDR_EXP 34
6887: PUSH
6888: LD_EXP 34
6892: PPUSH
6893: LD_EXP 34
6897: PUSH
6898: LD_INT 1
6900: PLUS
6901: PPUSH
6902: LD_VAR 0 3
6906: PPUSH
6907: CALL_OW 1
6911: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6912: LD_VAR 0 3
6916: PPUSH
6917: LD_INT 4
6919: PPUSH
6920: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
6924: LD_INT 35
6926: PPUSH
6927: CALL_OW 67
// until PlaceUnitArea ( veh , americanEastArea , false ) ;
6931: LD_VAR 0 3
6935: PPUSH
6936: LD_INT 17
6938: PPUSH
6939: LD_INT 0
6941: PPUSH
6942: CALL_OW 49
6946: IFFALSE 6924
// PlaceHumanInUnit ( un , veh ) ;
6948: LD_VAR 0 2
6952: PPUSH
6953: LD_VAR 0 3
6957: PPUSH
6958: CALL_OW 52
// ComMoveXY ( veh , 153 , 45 ) ;
6962: LD_VAR 0 3
6966: PPUSH
6967: LD_INT 153
6969: PPUSH
6970: LD_INT 45
6972: PPUSH
6973: CALL_OW 111
// wait ( 0 0$2 ) ;
6977: LD_INT 70
6979: PPUSH
6980: CALL_OW 67
// end ;
6984: GO 6672
6986: POP
6987: POP
// repeat wait ( 0 0$1 ) ;
6988: LD_INT 35
6990: PPUSH
6991: CALL_OW 67
// usAdditionalForces := AgressiveMove ( usAdditionalForces , [ [ 150 , 36 ] , [ 138 , 25 ] ] ) ;
6995: LD_ADDR_EXP 34
6999: PUSH
7000: LD_EXP 34
7004: PPUSH
7005: LD_INT 150
7007: PUSH
7008: LD_INT 36
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PUSH
7015: LD_INT 138
7017: PUSH
7018: LD_INT 25
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PPUSH
7029: CALL 57606 0 2
7033: ST_TO_ADDR
// until not usAdditionalForces ;
7034: LD_EXP 34
7038: NOT
7039: IFFALSE 6988
// end ;
7041: PPOPN 5
7043: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 2 ] ] ) do
7044: LD_INT 22
7046: PUSH
7047: LD_INT 1
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: LD_INT 101
7056: PUSH
7057: LD_INT 2
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: PPUSH
7068: CALL_OW 69
7072: IFFALSE 7092
7074: GO 7076
7076: DISABLE
// begin wait ( 0 0$30 ) ;
7077: LD_INT 1050
7079: PPUSH
7080: CALL_OW 67
// usAttacksAllowed := true ;
7084: LD_ADDR_EXP 6
7088: PUSH
7089: LD_INT 1
7091: ST_TO_ADDR
// end ; end_of_file
7092: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7093: LD_VAR 0 1
7097: PPUSH
7098: CALL 60357 0 1
// if un = Heike then
7102: LD_VAR 0 1
7106: PUSH
7107: LD_EXP 15
7111: EQUAL
7112: IFFALSE 7121
// YouLost ( Heike ) ;
7114: LD_STRING Heike
7116: PPUSH
7117: CALL_OW 104
// if un = usCommander then
7121: LD_VAR 0 1
7125: PUSH
7126: LD_EXP 30
7130: EQUAL
7131: IFFALSE 7140
// YouLost ( Commander ) ;
7133: LD_STRING Commander
7135: PPUSH
7136: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_vehicle then
7140: LD_VAR 0 1
7144: PPUSH
7145: CALL_OW 255
7149: PUSH
7150: LD_INT 2
7152: EQUAL
7153: IFFALSE 7170
7155: PUSH
7156: LD_VAR 0 1
7160: PPUSH
7161: CALL_OW 247
7165: PUSH
7166: LD_INT 2
7168: EQUAL
7169: AND
7170: IFFALSE 7187
// vehLossCounter := Inc ( vehLossCounter ) ;
7172: LD_ADDR_EXP 14
7176: PUSH
7177: LD_EXP 14
7181: PPUSH
7182: CALL 56213 0 1
7186: ST_TO_ADDR
// if GetSide ( un ) = 1 then
7187: LD_VAR 0 1
7191: PPUSH
7192: CALL_OW 255
7196: PUSH
7197: LD_INT 1
7199: EQUAL
7200: IFFALSE 7546
// begin if GetClass ( un ) = class_sniper then
7202: LD_VAR 0 1
7206: PPUSH
7207: CALL_OW 257
7211: PUSH
7212: LD_INT 5
7214: EQUAL
7215: IFFALSE 7232
// sniperKillCounter := Inc ( sniperKillCounter ) ;
7217: LD_ADDR_EXP 13
7221: PUSH
7222: LD_EXP 13
7226: PPUSH
7227: CALL 56213 0 1
7231: ST_TO_ADDR
// if GetWeapon ( un ) = us_crane and IsOk ( amFac ) then
7232: LD_VAR 0 1
7236: PPUSH
7237: CALL_OW 264
7241: PUSH
7242: LD_INT 13
7244: EQUAL
7245: IFFALSE 7256
7247: PUSH
7248: LD_INT 25
7250: PPUSH
7251: CALL_OW 302
7255: AND
7256: IFFALSE 7319
// begin wait ( 0 0$05 * Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ) ) ;
7258: LD_INT 175
7260: PUSH
7261: LD_INT 22
7263: PUSH
7264: LD_INT 1
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: PUSH
7271: LD_INT 34
7273: PUSH
7274: LD_INT 13
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: PPUSH
7285: CALL_OW 69
7289: PPUSH
7290: CALL 18908 0 1
7294: MUL
7295: PPUSH
7296: CALL_OW 67
// AddComConstruct ( amFac , us_medium_wheeled , engine_solar , control_remote , us_crane ) ;
7300: LD_INT 25
7302: PPUSH
7303: LD_INT 2
7305: PPUSH
7306: LD_INT 2
7308: PPUSH
7309: LD_INT 2
7311: PPUSH
7312: LD_INT 13
7314: PPUSH
7315: CALL_OW 185
// end ; if GetWeapon ( un ) = us_cargo_bay and IsOk ( amFac ) then
7319: LD_VAR 0 1
7323: PPUSH
7324: CALL_OW 264
7328: PUSH
7329: LD_INT 12
7331: EQUAL
7332: IFFALSE 7343
7334: PUSH
7335: LD_INT 25
7337: PPUSH
7338: CALL_OW 302
7342: AND
7343: IFFALSE 7364
// AddComConstruct ( amFac , us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ) ;
7345: LD_INT 25
7347: PPUSH
7348: LD_INT 2
7350: PPUSH
7351: LD_INT 1
7353: PPUSH
7354: LD_INT 2
7356: PPUSH
7357: LD_INT 12
7359: PPUSH
7360: CALL_OW 185
// if GetBType ( un ) = b_bunker then
7364: LD_VAR 0 1
7368: PPUSH
7369: CALL_OW 266
7373: PUSH
7374: LD_INT 32
7376: EQUAL
7377: IFFALSE 7461
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ [ b_bunker , b_turret ] [ rand ( 1 , 2 ) ] , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
7379: LD_ADDR_EXP 33
7383: PUSH
7384: LD_EXP 33
7388: PPUSH
7389: LD_EXP 33
7393: PUSH
7394: LD_INT 1
7396: PLUS
7397: PPUSH
7398: LD_INT 32
7400: PUSH
7401: LD_INT 33
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: PUSH
7408: LD_INT 1
7410: PPUSH
7411: LD_INT 2
7413: PPUSH
7414: CALL_OW 12
7418: ARRAY
7419: PUSH
7420: LD_VAR 0 1
7424: PPUSH
7425: CALL_OW 250
7429: PUSH
7430: LD_VAR 0 1
7434: PPUSH
7435: CALL_OW 251
7439: PUSH
7440: LD_VAR 0 1
7444: PPUSH
7445: CALL_OW 254
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: PPUSH
7456: CALL_OW 1
7460: ST_TO_ADDR
// if GetBType ( un ) in [ b_barracks , b_armoury ] then
7461: LD_VAR 0 1
7465: PPUSH
7466: CALL_OW 266
7470: PUSH
7471: LD_INT 5
7473: PUSH
7474: LD_INT 4
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: IN
7481: IFFALSE 7546
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_armoury , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
7483: LD_ADDR_EXP 33
7487: PUSH
7488: LD_EXP 33
7492: PPUSH
7493: LD_EXP 33
7497: PUSH
7498: LD_INT 1
7500: PLUS
7501: PPUSH
7502: LD_INT 4
7504: PUSH
7505: LD_VAR 0 1
7509: PPUSH
7510: CALL_OW 250
7514: PUSH
7515: LD_VAR 0 1
7519: PPUSH
7520: CALL_OW 251
7524: PUSH
7525: LD_VAR 0 1
7529: PPUSH
7530: CALL_OW 254
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: PPUSH
7541: CALL_OW 1
7545: ST_TO_ADDR
// end ; end ;
7546: PPOPN 1
7548: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 1 and GetTag ( un ) = 1 then
7549: LD_VAR 0 1
7553: PPUSH
7554: CALL_OW 255
7558: PUSH
7559: LD_INT 1
7561: EQUAL
7562: IFFALSE 7579
7564: PUSH
7565: LD_VAR 0 1
7569: PPUSH
7570: CALL_OW 110
7574: PUSH
7575: LD_INT 1
7577: EQUAL
7578: AND
7579: IFFALSE 7593
// SetTag ( un , 0 ) ;
7581: LD_VAR 0 1
7585: PPUSH
7586: LD_INT 0
7588: PPUSH
7589: CALL_OW 109
// if GetSide ( un ) = 1 and GetWeapon ( un ) = us_heavy_gun and not seeHeavyGun then
7593: LD_VAR 0 1
7597: PPUSH
7598: CALL_OW 255
7602: PUSH
7603: LD_INT 1
7605: EQUAL
7606: IFFALSE 7623
7608: PUSH
7609: LD_VAR 0 1
7613: PPUSH
7614: CALL_OW 264
7618: PUSH
7619: LD_INT 6
7621: EQUAL
7622: AND
7623: IFFALSE 7632
7625: PUSH
7626: LD_EXP 11
7630: NOT
7631: AND
7632: IFFALSE 7642
// seeHeavyGun := true ;
7634: LD_ADDR_EXP 11
7638: PUSH
7639: LD_INT 1
7641: ST_TO_ADDR
// if GetControl ( un ) = control_remote and GetSide ( un ) <> 2 then
7642: LD_VAR 0 1
7646: PPUSH
7647: CALL_OW 263
7651: PUSH
7652: LD_INT 2
7654: EQUAL
7655: IFFALSE 7672
7657: PUSH
7658: LD_VAR 0 1
7662: PPUSH
7663: CALL_OW 255
7667: PUSH
7668: LD_INT 2
7670: NONEQUAL
7671: AND
7672: IFFALSE 7698
// begin ComUnlink ( un ) ;
7674: LD_VAR 0 1
7678: PPUSH
7679: CALL_OW 136
// if not seeRemoteVehicle then
7683: LD_EXP 10
7687: NOT
7688: IFFALSE 7698
// seeRemoteVehicle := true ;
7690: LD_ADDR_EXP 10
7694: PUSH
7695: LD_INT 1
7697: ST_TO_ADDR
// end ; end ;
7698: PPOPN 1
7700: END
// on BuildingComplete ( b ) do var i , barracks ;
7701: LD_INT 0
7703: PPUSH
7704: PPUSH
// begin if GetSide ( b ) = 2 then
7705: LD_VAR 0 1
7709: PPUSH
7710: CALL_OW 255
7714: PUSH
7715: LD_INT 2
7717: EQUAL
7718: IFFALSE 7758
// begin if GetBType ( b ) = b_depot and IsInArea ( b , westBankArea ) then
7720: LD_VAR 0 1
7724: PPUSH
7725: CALL_OW 266
7729: PUSH
7730: LD_INT 0
7732: EQUAL
7733: IFFALSE 7749
7735: PUSH
7736: LD_VAR 0 1
7740: PPUSH
7741: LD_INT 18
7743: PPUSH
7744: CALL_OW 308
7748: AND
7749: IFFALSE 7758
// SetAchievement ( ACH_WEST ) ;
7751: LD_STRING ACH_WEST
7753: PPUSH
7754: CALL_OW 543
// end ; if GetSide ( b ) = 1 then
7758: LD_VAR 0 1
7762: PPUSH
7763: CALL_OW 255
7767: PUSH
7768: LD_INT 1
7770: EQUAL
7771: IFFALSE 7947
// begin usToBuild := Delete ( usToBuild , 1 ) ;
7773: LD_ADDR_EXP 33
7777: PUSH
7778: LD_EXP 33
7782: PPUSH
7783: LD_INT 1
7785: PPUSH
7786: CALL_OW 3
7790: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
7791: LD_VAR 0 1
7795: PPUSH
7796: CALL_OW 266
7800: PUSH
7801: LD_INT 4
7803: EQUAL
7804: IFFALSE 7815
// ComUpgrade ( b ) ;
7806: LD_VAR 0 1
7810: PPUSH
7811: CALL_OW 146
// if GetBType ( b ) in [ b_bunker , b_turret ] then
7815: LD_VAR 0 1
7819: PPUSH
7820: CALL_OW 266
7824: PUSH
7825: LD_INT 32
7827: PUSH
7828: LD_INT 33
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: IN
7835: IFFALSE 7947
// begin AddComPlaceWeapon ( b , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
7837: LD_VAR 0 1
7841: PPUSH
7842: LD_INT 6
7844: PUSH
7845: LD_INT 7
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PUSH
7852: LD_INT 1
7854: PPUSH
7855: LD_INT 2
7857: PPUSH
7858: CALL_OW 12
7862: ARRAY
7863: PPUSH
7864: CALL_OW 208
// if GetBType ( b ) = b_turret then
7868: LD_VAR 0 1
7872: PPUSH
7873: CALL_OW 266
7877: PUSH
7878: LD_INT 33
7880: EQUAL
7881: IFFALSE 7885
// exit ;
7883: GO 7947
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
7885: LD_ADDR_VAR 0 3
7889: PUSH
7890: LD_INT 22
7892: PUSH
7893: LD_INT 1
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: LD_INT 30
7902: PUSH
7903: LD_INT 5
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: PPUSH
7914: CALL_OW 69
7918: ST_TO_ADDR
// if barracks then
7919: LD_VAR 0 3
7923: IFFALSE 7947
// ComExitBuilding ( UnitsInside ( barracks [ 1 ] ) [ 1 ] ) ;
7925: LD_VAR 0 3
7929: PUSH
7930: LD_INT 1
7932: ARRAY
7933: PPUSH
7934: CALL_OW 313
7938: PUSH
7939: LD_INT 1
7941: ARRAY
7942: PPUSH
7943: CALL_OW 122
// end ; end ; end ;
7947: PPOPN 3
7949: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7950: LD_VAR 0 1
7954: PPUSH
7955: LD_VAR 0 2
7959: PPUSH
7960: CALL 60415 0 2
// if GetSide ( factory ) = 1 then
7964: LD_VAR 0 2
7968: PPUSH
7969: CALL_OW 255
7973: PUSH
7974: LD_INT 1
7976: EQUAL
7977: IFFALSE 8056
// begin if GetWeapon ( vehicle ) = us_cargo_bay then
7979: LD_VAR 0 1
7983: PPUSH
7984: CALL_OW 264
7988: PUSH
7989: LD_INT 12
7991: EQUAL
7992: IFFALSE 8004
// usCargo := vehicle ;
7994: LD_ADDR_EXP 32
7998: PUSH
7999: LD_VAR 0 1
8003: ST_TO_ADDR
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , us_crane ] then
8004: LD_VAR 0 1
8008: PPUSH
8009: CALL_OW 264
8013: PUSH
8014: LD_INT 12
8016: PUSH
8017: LD_INT 13
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: IN
8024: NOT
8025: IFFALSE 8056
// usForces := Replace ( usForces , usForces + 1 , vehicle ) ;
8027: LD_ADDR_EXP 31
8031: PUSH
8032: LD_EXP 31
8036: PPUSH
8037: LD_EXP 31
8041: PUSH
8042: LD_INT 1
8044: PLUS
8045: PPUSH
8046: LD_VAR 0 1
8050: PPUSH
8051: CALL_OW 1
8055: ST_TO_ADDR
// end ; end ;
8056: PPOPN 2
8058: END
// on EvacuateVehicle ( un , veh , p1 , p2 ) do begin if GetSide ( veh ) = 1 then
8059: LD_VAR 0 2
8063: PPUSH
8064: CALL_OW 255
8068: PUSH
8069: LD_INT 1
8071: EQUAL
8072: IFFALSE 8086
// AddComEnterUnit ( un , amFac ) ;
8074: LD_VAR 0 1
8078: PPUSH
8079: LD_INT 25
8081: PPUSH
8082: CALL_OW 180
// end ;
8086: PPOPN 4
8088: END
// on EvacuateBuilding ( b , un ) do begin if GetSide ( b ) = 1 and GetBType ( b ) = b_bunker and GetClass ( un ) in [ class_soldier , class_sniper ] and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] , [ f_ok ] ] ) then
8089: LD_VAR 0 1
8093: PPUSH
8094: CALL_OW 255
8098: PUSH
8099: LD_INT 1
8101: EQUAL
8102: IFFALSE 8119
8104: PUSH
8105: LD_VAR 0 1
8109: PPUSH
8110: CALL_OW 266
8114: PUSH
8115: LD_INT 32
8117: EQUAL
8118: AND
8119: IFFALSE 8143
8121: PUSH
8122: LD_VAR 0 2
8126: PPUSH
8127: CALL_OW 257
8131: PUSH
8132: LD_INT 1
8134: PUSH
8135: LD_INT 5
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: IN
8142: AND
8143: IFFALSE 8182
8145: PUSH
8146: LD_INT 22
8148: PUSH
8149: LD_INT 1
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PUSH
8156: LD_INT 30
8158: PUSH
8159: LD_INT 5
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PUSH
8166: LD_INT 50
8168: PUSH
8169: EMPTY
8170: LIST
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: LIST
8176: PPUSH
8177: CALL_OW 69
8181: AND
8182: IFFALSE 8252
// if UnitsInside ( HexInfo ( 74 , 120 ) ) < 6 then
8184: LD_INT 74
8186: PPUSH
8187: LD_INT 120
8189: PPUSH
8190: CALL_OW 428
8194: PPUSH
8195: CALL_OW 313
8199: PUSH
8200: LD_INT 6
8202: LESS
8203: IFFALSE 8252
// begin ComEnterUnit ( un , HexInfo ( 74 , 120 ) ) ;
8205: LD_VAR 0 2
8209: PPUSH
8210: LD_INT 74
8212: PPUSH
8213: LD_INT 120
8215: PPUSH
8216: CALL_OW 428
8220: PPUSH
8221: CALL_OW 120
// if GetClass ( un ) = class_soldier then
8225: LD_VAR 0 2
8229: PPUSH
8230: CALL_OW 257
8234: PUSH
8235: LD_INT 1
8237: EQUAL
8238: IFFALSE 8252
// AddComChangeProfession ( un , class_sniper ) ;
8240: LD_VAR 0 2
8244: PPUSH
8245: LD_INT 5
8247: PPUSH
8248: CALL_OW 183
// end ; end ; end_of_file
8252: PPOPN 2
8254: END
// export function Action ; var i , j , veh , tmp , _tmp , hasEng , hasCamera , driver , counter ; begin
8255: LD_INT 0
8257: PPUSH
8258: PPUSH
8259: PPUSH
8260: PPUSH
8261: PPUSH
8262: PPUSH
8263: PPUSH
8264: PPUSH
8265: PPUSH
8266: PPUSH
// Video ( true ) ;
8267: LD_INT 1
8269: PPUSH
8270: CALL 54812 0 1
// music_nat := 1 ;
8274: LD_ADDR_OWVAR 71
8278: PUSH
8279: LD_INT 1
8281: ST_TO_ADDR
// music_class := music_recon ;
8282: LD_ADDR_OWVAR 72
8286: PUSH
8287: LD_INT 3
8289: ST_TO_ADDR
// PlaceSeeing ( 184 , 142 , 2 , - 10 ) ;
8290: LD_INT 184
8292: PPUSH
8293: LD_INT 142
8295: PPUSH
8296: LD_INT 2
8298: PPUSH
8299: LD_INT 10
8301: NEG
8302: PPUSH
8303: CALL_OW 330
// RemoveSeeing ( 184 , 142 , 2 ) ;
8307: LD_INT 184
8309: PPUSH
8310: LD_INT 142
8312: PPUSH
8313: LD_INT 2
8315: PPUSH
8316: CALL_OW 331
// PlaceSeeing ( 204 , 151 , 2 , - 10 ) ;
8320: LD_INT 204
8322: PPUSH
8323: LD_INT 151
8325: PPUSH
8326: LD_INT 2
8328: PPUSH
8329: LD_INT 10
8331: NEG
8332: PPUSH
8333: CALL_OW 330
// RemoveSeeing ( 204 , 151 , 2 ) ;
8337: LD_INT 204
8339: PPUSH
8340: LD_INT 151
8342: PPUSH
8343: LD_INT 2
8345: PPUSH
8346: CALL_OW 331
// CenterNowOnXY ( 184 , 142 ) ;
8350: LD_INT 184
8352: PPUSH
8353: LD_INT 142
8355: PPUSH
8356: CALL_OW 86
// wait ( 0 0$2 ) ;
8360: LD_INT 70
8362: PPUSH
8363: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
8367: LD_ADDR_VAR 0 5
8371: PUSH
8372: LD_EXP 15
8376: PUSH
8377: LD_EXP 16
8381: PUSH
8382: LD_EXP 17
8386: PUSH
8387: LD_EXP 18
8391: PUSH
8392: LD_EXP 19
8396: PUSH
8397: LD_EXP 20
8401: PUSH
8402: LD_EXP 21
8406: PUSH
8407: LD_EXP 22
8411: PUSH
8412: LD_EXP 24
8416: PUSH
8417: LD_EXP 25
8421: PUSH
8422: LD_EXP 26
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: PUSH
8440: LD_EXP 27
8444: UNION
8445: ST_TO_ADDR
// tmp := tmp diff 0 ;
8446: LD_ADDR_VAR 0 5
8450: PUSH
8451: LD_VAR 0 5
8455: PUSH
8456: LD_INT 0
8458: DIFF
8459: ST_TO_ADDR
// hasEng := UnitFilter ( tmp , [ f_class , 2 ] ) > 0 ;
8460: LD_ADDR_VAR 0 7
8464: PUSH
8465: LD_VAR 0 5
8469: PPUSH
8470: LD_INT 25
8472: PUSH
8473: LD_INT 2
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: PPUSH
8480: CALL_OW 72
8484: PUSH
8485: LD_INT 0
8487: GREATER
8488: ST_TO_ADDR
// hasCamera := false ;
8489: LD_ADDR_VAR 0 8
8493: PUSH
8494: LD_INT 0
8496: ST_TO_ADDR
// if not hasEng then
8497: LD_VAR 0 7
8501: NOT
8502: IFFALSE 8555
// begin _tmp := tmp diff [ Kurt , Mike ] ;
8504: LD_ADDR_VAR 0 6
8508: PUSH
8509: LD_VAR 0 5
8513: PUSH
8514: LD_EXP 25
8518: PUSH
8519: LD_EXP 17
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: DIFF
8528: ST_TO_ADDR
// SetClass ( _tmp [ rand ( 1 , _tmp ) ] , class_engineer ) ;
8529: LD_VAR 0 6
8533: PUSH
8534: LD_INT 1
8536: PPUSH
8537: LD_VAR 0 6
8541: PPUSH
8542: CALL_OW 12
8546: ARRAY
8547: PPUSH
8548: LD_INT 2
8550: PPUSH
8551: CALL_OW 336
// end ; if heikeVehicles then
8555: LD_EXP 29
8559: IFFALSE 9207
// begin tmp := SortByClass ( tmp , class_mechanic ) ;
8561: LD_ADDR_VAR 0 5
8565: PUSH
8566: LD_VAR 0 5
8570: PPUSH
8571: LD_INT 3
8573: PPUSH
8574: CALL 57226 0 2
8578: ST_TO_ADDR
// for i in heikeVehicles do
8579: LD_ADDR_VAR 0 2
8583: PUSH
8584: LD_EXP 29
8588: PUSH
8589: FOR_IN
8590: IFFALSE 9205
// begin if not tmp then
8592: LD_VAR 0 5
8596: NOT
8597: IFFALSE 8601
// break ;
8599: GO 9205
// uc_side := 2 ;
8601: LD_ADDR_OWVAR 20
8605: PUSH
8606: LD_INT 2
8608: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
8609: LD_ADDR_OWVAR 21
8613: PUSH
8614: LD_VAR 0 2
8618: PUSH
8619: LD_INT 5
8621: ARRAY
8622: ST_TO_ADDR
// vc_chassis := i [ 1 ] ;
8623: LD_ADDR_OWVAR 37
8627: PUSH
8628: LD_VAR 0 2
8632: PUSH
8633: LD_INT 1
8635: ARRAY
8636: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
8637: LD_ADDR_OWVAR 39
8641: PUSH
8642: LD_VAR 0 2
8646: PUSH
8647: LD_INT 2
8649: ARRAY
8650: ST_TO_ADDR
// vc_control := i [ 3 ] ;
8651: LD_ADDR_OWVAR 38
8655: PUSH
8656: LD_VAR 0 2
8660: PUSH
8661: LD_INT 3
8663: ARRAY
8664: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
8665: LD_ADDR_OWVAR 40
8669: PUSH
8670: LD_VAR 0 2
8674: PUSH
8675: LD_INT 4
8677: ARRAY
8678: ST_TO_ADDR
// veh := CreateVehicle ;
8679: LD_ADDR_VAR 0 4
8683: PUSH
8684: CALL_OW 45
8688: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
8689: LD_VAR 0 4
8693: PPUSH
8694: LD_INT 4
8696: PPUSH
8697: CALL_OW 233
// if i [ 3 ] = control_manual then
8701: LD_VAR 0 2
8705: PUSH
8706: LD_INT 3
8708: ARRAY
8709: PUSH
8710: LD_INT 1
8712: EQUAL
8713: IFFALSE 8807
// begin repeat wait ( 1 ) ;
8715: LD_INT 1
8717: PPUSH
8718: CALL_OW 67
// until PlaceUnitArea ( veh , startArea , false ) ;
8722: LD_VAR 0 4
8726: PPUSH
8727: LD_INT 1
8729: PPUSH
8730: LD_INT 0
8732: PPUSH
8733: CALL_OW 49
8737: IFFALSE 8715
// if i [ 4 ] = ar_control_tower then
8739: LD_VAR 0 2
8743: PUSH
8744: LD_INT 4
8746: ARRAY
8747: PUSH
8748: LD_INT 31
8750: EQUAL
8751: IFFALSE 8769
// SetClass ( tmp [ 1 ] , class_mechanic ) ;
8753: LD_VAR 0 5
8757: PUSH
8758: LD_INT 1
8760: ARRAY
8761: PPUSH
8762: LD_INT 3
8764: PPUSH
8765: CALL_OW 336
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
8769: LD_VAR 0 5
8773: PUSH
8774: LD_INT 1
8776: ARRAY
8777: PPUSH
8778: LD_VAR 0 4
8782: PPUSH
8783: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
8787: LD_ADDR_VAR 0 5
8791: PUSH
8792: LD_VAR 0 5
8796: PPUSH
8797: LD_INT 1
8799: PPUSH
8800: CALL_OW 3
8804: ST_TO_ADDR
// end else
8805: GO 8877
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
8807: LD_INT 22
8809: PUSH
8810: LD_INT 2
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: PUSH
8817: LD_INT 34
8819: PUSH
8820: LD_INT 31
8822: PUSH
8823: EMPTY
8824: LIST
8825: LIST
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: PPUSH
8831: CALL_OW 69
8835: IFFALSE 8877
// begin repeat wait ( 1 ) ;
8837: LD_INT 1
8839: PPUSH
8840: CALL_OW 67
// until PlaceUnitArea ( veh , startArea , false ) ;
8844: LD_VAR 0 4
8848: PPUSH
8849: LD_INT 1
8851: PPUSH
8852: LD_INT 0
8854: PPUSH
8855: CALL_OW 49
8859: IFFALSE 8837
// Connect ( veh ) ;
8861: LD_VAR 0 4
8865: PPUSH
8866: CALL 25152 0 1
// wait ( 0 0$2 ) ;
8870: LD_INT 70
8872: PPUSH
8873: CALL_OW 67
// end ; SetLives ( veh , i [ 6 ] ) ;
8877: LD_VAR 0 4
8881: PPUSH
8882: LD_VAR 0 2
8886: PUSH
8887: LD_INT 6
8889: ARRAY
8890: PPUSH
8891: CALL_OW 234
// SetFuel ( veh , 20 ) ;
8895: LD_VAR 0 4
8899: PPUSH
8900: LD_INT 20
8902: PPUSH
8903: CALL_OW 240
// if i [ 7 ] and GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay ] then
8907: LD_VAR 0 2
8911: PUSH
8912: LD_INT 7
8914: ARRAY
8915: IFFALSE 8939
8917: PUSH
8918: LD_VAR 0 4
8922: PPUSH
8923: CALL_OW 264
8927: PUSH
8928: LD_INT 51
8930: PUSH
8931: LD_INT 32
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: IN
8938: AND
8939: IFFALSE 8990
// begin for j := 1 to 2 do
8941: LD_ADDR_VAR 0 3
8945: PUSH
8946: DOUBLE
8947: LD_INT 1
8949: DEC
8950: ST_TO_ADDR
8951: LD_INT 2
8953: PUSH
8954: FOR_TO
8955: IFFALSE 8988
// AddCargo ( veh , j , i [ 7 ] [ j ] ) ;
8957: LD_VAR 0 4
8961: PPUSH
8962: LD_VAR 0 3
8966: PPUSH
8967: LD_VAR 0 2
8971: PUSH
8972: LD_INT 7
8974: ARRAY
8975: PUSH
8976: LD_VAR 0 3
8980: ARRAY
8981: PPUSH
8982: CALL_OW 291
8986: GO 8954
8988: POP
8989: POP
// end ; ComMoveXY ( veh , 185 , 144 ) ;
8990: LD_VAR 0 4
8994: PPUSH
8995: LD_INT 185
8997: PPUSH
8998: LD_INT 144
9000: PPUSH
9001: CALL_OW 111
// if GetControl ( veh ) = control_manual and not hasCamera and GetClass ( IsDrivenBy ( veh ) ) = 2 then
9005: LD_VAR 0 4
9009: PPUSH
9010: CALL_OW 263
9014: PUSH
9015: LD_INT 1
9017: EQUAL
9018: IFFALSE 9027
9020: PUSH
9021: LD_VAR 0 8
9025: NOT
9026: AND
9027: IFFALSE 9049
9029: PUSH
9030: LD_VAR 0 4
9034: PPUSH
9035: CALL_OW 311
9039: PPUSH
9040: CALL_OW 257
9044: PUSH
9045: LD_INT 2
9047: EQUAL
9048: AND
9049: IFFALSE 9154
// begin hasCamera := true ;
9051: LD_ADDR_VAR 0 8
9055: PUSH
9056: LD_INT 1
9058: ST_TO_ADDR
// driver := IsDrivenBy ( veh ) ;
9059: LD_ADDR_VAR 0 9
9063: PUSH
9064: LD_VAR 0 4
9068: PPUSH
9069: CALL_OW 311
9073: ST_TO_ADDR
// AddComMoveXY ( veh , 177 , 138 ) ;
9074: LD_VAR 0 4
9078: PPUSH
9079: LD_INT 177
9081: PPUSH
9082: LD_INT 138
9084: PPUSH
9085: CALL_OW 171
// AddComExitVehicle ( driver ) ;
9089: LD_VAR 0 9
9093: PPUSH
9094: CALL_OW 181
// AddComHiddenCamera ( driver , 190 , 150 ) ;
9098: LD_VAR 0 9
9102: PPUSH
9103: LD_INT 190
9105: PPUSH
9106: LD_INT 150
9108: PPUSH
9109: CALL_OW 217
// AddComEnterUnit ( driver , veh ) ;
9113: LD_VAR 0 9
9117: PPUSH
9118: LD_VAR 0 4
9122: PPUSH
9123: CALL_OW 180
// AddComMoveXY ( driver , 170 , 103 ) ;
9127: LD_VAR 0 9
9131: PPUSH
9132: LD_INT 170
9134: PPUSH
9135: LD_INT 103
9137: PPUSH
9138: CALL_OW 171
// CenterOnXY ( 190 , 150 ) ;
9142: LD_INT 190
9144: PPUSH
9145: LD_INT 150
9147: PPUSH
9148: CALL_OW 84
// end else
9152: GO 9196
// begin AddComWait ( veh , 0 0$2 ) ;
9154: LD_VAR 0 4
9158: PPUSH
9159: LD_INT 70
9161: PPUSH
9162: CALL_OW 202
// AddComMoveXY ( veh , 179 , 129 ) ;
9166: LD_VAR 0 4
9170: PPUSH
9171: LD_INT 179
9173: PPUSH
9174: LD_INT 129
9176: PPUSH
9177: CALL_OW 171
// AddComMoveXY ( veh , 170 , 103 ) ;
9181: LD_VAR 0 4
9185: PPUSH
9186: LD_INT 170
9188: PPUSH
9189: LD_INT 103
9191: PPUSH
9192: CALL_OW 171
// end ; wait ( 0 0$2 ) ;
9196: LD_INT 70
9198: PPUSH
9199: CALL_OW 67
// end ;
9203: GO 8589
9205: POP
9206: POP
// end ; if tmp then
9207: LD_VAR 0 5
9211: IFFALSE 9367
// begin for i in tmp do
9213: LD_ADDR_VAR 0 2
9217: PUSH
9218: LD_VAR 0 5
9222: PUSH
9223: FOR_IN
9224: IFFALSE 9365
// begin SetDir ( i , 4 ) ;
9226: LD_VAR 0 2
9230: PPUSH
9231: LD_INT 4
9233: PPUSH
9234: CALL_OW 233
// repeat wait ( 1 ) ;
9238: LD_INT 1
9240: PPUSH
9241: CALL_OW 67
// until PlaceUnitArea ( i , startArea , false ) ;
9245: LD_VAR 0 2
9249: PPUSH
9250: LD_INT 1
9252: PPUSH
9253: LD_INT 0
9255: PPUSH
9256: CALL_OW 49
9260: IFFALSE 9238
// ComMoveXY ( i , 185 , 144 ) ;
9262: LD_VAR 0 2
9266: PPUSH
9267: LD_INT 185
9269: PPUSH
9270: LD_INT 144
9272: PPUSH
9273: CALL_OW 111
// if GetClass ( i ) = 2 and not hasCamera then
9277: LD_VAR 0 2
9281: PPUSH
9282: CALL_OW 257
9286: PUSH
9287: LD_INT 2
9289: EQUAL
9290: IFFALSE 9299
9292: PUSH
9293: LD_VAR 0 8
9297: NOT
9298: AND
9299: IFFALSE 9326
// begin hasCamera := true ;
9301: LD_ADDR_VAR 0 8
9305: PUSH
9306: LD_INT 1
9308: ST_TO_ADDR
// AddComHiddenCamera ( i , 190 , 150 ) ;
9309: LD_VAR 0 2
9313: PPUSH
9314: LD_INT 190
9316: PPUSH
9317: LD_INT 150
9319: PPUSH
9320: CALL_OW 217
// end else
9324: GO 9341
// AddComMoveXY ( i , 179 , 129 ) ;
9326: LD_VAR 0 2
9330: PPUSH
9331: LD_INT 179
9333: PPUSH
9334: LD_INT 129
9336: PPUSH
9337: CALL_OW 171
// AddComMoveXY ( i , 170 , 103 ) ;
9341: LD_VAR 0 2
9345: PPUSH
9346: LD_INT 170
9348: PPUSH
9349: LD_INT 103
9351: PPUSH
9352: CALL_OW 171
// wait ( 0 0$2 ) ;
9356: LD_INT 70
9358: PPUSH
9359: CALL_OW 67
// end ;
9363: GO 9223
9365: POP
9366: POP
// end ; if heikeApes then
9367: LD_EXP 28
9371: IFFALSE 9498
// begin counter := 0 ;
9373: LD_ADDR_VAR 0 10
9377: PUSH
9378: LD_INT 0
9380: ST_TO_ADDR
// for i in heikeApes do
9381: LD_ADDR_VAR 0 2
9385: PUSH
9386: LD_EXP 28
9390: PUSH
9391: FOR_IN
9392: IFFALSE 9496
// begin if counter > 2 then
9394: LD_VAR 0 10
9398: PUSH
9399: LD_INT 2
9401: GREATER
9402: IFFALSE 9406
// break ;
9404: GO 9496
// counter := Inc ( counter ) ;
9406: LD_ADDR_VAR 0 10
9410: PUSH
9411: LD_VAR 0 10
9415: PPUSH
9416: CALL 56213 0 1
9420: ST_TO_ADDR
// SetDir ( i , 4 ) ;
9421: LD_VAR 0 2
9425: PPUSH
9426: LD_INT 4
9428: PPUSH
9429: CALL_OW 233
// repeat wait ( 1 ) ;
9433: LD_INT 1
9435: PPUSH
9436: CALL_OW 67
// until PlaceUnitArea ( i , startArea , false ) ;
9440: LD_VAR 0 2
9444: PPUSH
9445: LD_INT 1
9447: PPUSH
9448: LD_INT 0
9450: PPUSH
9451: CALL_OW 49
9455: IFFALSE 9433
// ComMoveXY ( i , 185 , 144 ) ;
9457: LD_VAR 0 2
9461: PPUSH
9462: LD_INT 185
9464: PPUSH
9465: LD_INT 144
9467: PPUSH
9468: CALL_OW 111
// AddComMoveXY ( i , 170 , 103 ) ;
9472: LD_VAR 0 2
9476: PPUSH
9477: LD_INT 170
9479: PPUSH
9480: LD_INT 103
9482: PPUSH
9483: CALL_OW 171
// wait ( 0 0$2 ) ;
9487: LD_INT 70
9489: PPUSH
9490: CALL_OW 67
// end ;
9494: GO 9391
9496: POP
9497: POP
// end ; AddComMoveXY ( Heike , 163 , 89 ) ;
9498: LD_EXP 15
9502: PPUSH
9503: LD_INT 163
9505: PPUSH
9506: LD_INT 89
9508: PPUSH
9509: CALL_OW 171
// Say ( Heike , DH-Intro-1 ) ;
9513: LD_EXP 15
9517: PPUSH
9518: LD_STRING DH-Intro-1
9520: PPUSH
9521: CALL_OW 88
// CenterOnXY ( 175 , 117 ) ;
9525: LD_INT 175
9527: PPUSH
9528: LD_INT 117
9530: PPUSH
9531: CALL_OW 84
// if Markov then
9535: LD_EXP 22
9539: IFFALSE 10116
// begin Say ( Markov , DMar-Intro-2 ) ;
9541: LD_EXP 22
9545: PPUSH
9546: LD_STRING DMar-Intro-2
9548: PPUSH
9549: CALL_OW 88
// Say ( Markov , DMar-Intro-3 ) ;
9553: LD_EXP 22
9557: PPUSH
9558: LD_STRING DMar-Intro-3
9560: PPUSH
9561: CALL_OW 88
// wait ( 0 0$1 ) ;
9565: LD_INT 35
9567: PPUSH
9568: CALL_OW 67
// CenterOnUnits ( Heike ) ;
9572: LD_EXP 15
9576: PPUSH
9577: CALL_OW 85
// if Kurt then
9581: LD_EXP 25
9585: IFFALSE 9637
// begin if IsInUnit ( Kurt ) then
9587: LD_EXP 25
9591: PPUSH
9592: CALL_OW 310
9596: IFFALSE 9607
// ComExit ( Kurt ) ;
9598: LD_EXP 25
9602: PPUSH
9603: CALL 55238 0 1
// AddComMoveXY ( Kurt , 130 , 56 ) ;
9607: LD_EXP 25
9611: PPUSH
9612: LD_INT 130
9614: PPUSH
9615: LD_INT 56
9617: PPUSH
9618: CALL_OW 171
// AddComTurnXY ( Kurt , 129 , 56 ) ;
9622: LD_EXP 25
9626: PPUSH
9627: LD_INT 129
9629: PPUSH
9630: LD_INT 56
9632: PPUSH
9633: CALL_OW 178
// end ; if Kaia then
9637: LD_EXP 20
9641: IFFALSE 9821
// begin Say ( Kaia , DK-Intro-4 ) ;
9643: LD_EXP 20
9647: PPUSH
9648: LD_STRING DK-Intro-4
9650: PPUSH
9651: CALL_OW 88
// Say ( Markov , DMar-Intro-5 ) ;
9655: LD_EXP 22
9659: PPUSH
9660: LD_STRING DMar-Intro-5
9662: PPUSH
9663: CALL_OW 88
// Say ( Markov , DMar-Intro-6 ) ;
9667: LD_EXP 22
9671: PPUSH
9672: LD_STRING DMar-Intro-6
9674: PPUSH
9675: CALL_OW 88
// Say ( Olaf , DO-Intro-7 ) ;
9679: LD_EXP 24
9683: PPUSH
9684: LD_STRING DO-Intro-7
9686: PPUSH
9687: CALL_OW 88
// CenterOnXY ( 160 , 85 ) ;
9691: LD_INT 160
9693: PPUSH
9694: LD_INT 85
9696: PPUSH
9697: CALL_OW 84
// Say ( Markov , DMar-Intro-8 ) ;
9701: LD_EXP 22
9705: PPUSH
9706: LD_STRING DMar-Intro-8
9708: PPUSH
9709: CALL_OW 88
// Say ( Markov , DMar-Intro-9 ) ;
9713: LD_EXP 22
9717: PPUSH
9718: LD_STRING DMar-Intro-9
9720: PPUSH
9721: CALL_OW 88
// Say ( Markov , DMar-Intro-10 ) ;
9725: LD_EXP 22
9729: PPUSH
9730: LD_STRING DMar-Intro-10
9732: PPUSH
9733: CALL_OW 88
// Say ( Markov , DMar-Intro-11 ) ;
9737: LD_EXP 22
9741: PPUSH
9742: LD_STRING DMar-Intro-11
9744: PPUSH
9745: CALL_OW 88
// Say ( Givi , DG-Intro-12 ) ;
9749: LD_EXP 16
9753: PPUSH
9754: LD_STRING DG-Intro-12
9756: PPUSH
9757: CALL_OW 88
// Say ( Givi , DG-Intro-13 ) ;
9761: LD_EXP 16
9765: PPUSH
9766: LD_STRING DG-Intro-13
9768: PPUSH
9769: CALL_OW 88
// Say ( Givi , DG-Intro-14 ) ;
9773: LD_EXP 16
9777: PPUSH
9778: LD_STRING DG-Intro-14
9780: PPUSH
9781: CALL_OW 88
// Say ( Givi , DG-Intro-15 ) ;
9785: LD_EXP 16
9789: PPUSH
9790: LD_STRING DG-Intro-15
9792: PPUSH
9793: CALL_OW 88
// Say ( Heike , DH-Intro-16 ) ;
9797: LD_EXP 15
9801: PPUSH
9802: LD_STRING DH-Intro-16
9804: PPUSH
9805: CALL_OW 88
// Say ( Markov , DMar-Intro-17 ) ;
9809: LD_EXP 22
9813: PPUSH
9814: LD_STRING DMar-Intro-17
9816: PPUSH
9817: CALL_OW 88
// end ; if Kurt and Mike then
9821: LD_EXP 25
9825: IFFALSE 9833
9827: PUSH
9828: LD_EXP 17
9832: AND
9833: IFFALSE 10116
// begin CenterNowOnUnits ( Kurt ) ;
9835: LD_EXP 25
9839: PPUSH
9840: CALL_OW 87
// ComTurnUnit ( Kurt , Heike ) ;
9844: LD_EXP 25
9848: PPUSH
9849: LD_EXP 15
9853: PPUSH
9854: CALL_OW 119
// Say ( Kurt , DKs-Intro-18 ) ;
9858: LD_EXP 25
9862: PPUSH
9863: LD_STRING DKs-Intro-18
9865: PPUSH
9866: CALL_OW 88
// Say ( Kurt , DKs-Intro-19 ) ;
9870: LD_EXP 25
9874: PPUSH
9875: LD_STRING DKs-Intro-19
9877: PPUSH
9878: CALL_OW 88
// CenterNowOnUnits ( Mike ) ;
9882: LD_EXP 17
9886: PPUSH
9887: CALL_OW 87
// if IsInUnit ( Mike ) then
9891: LD_EXP 17
9895: PPUSH
9896: CALL_OW 310
9900: IFFALSE 9911
// ComExit ( Mike ) ;
9902: LD_EXP 17
9906: PPUSH
9907: CALL 55238 0 1
// AddComMoveXY ( Mike , 129 , 53 ) ;
9911: LD_EXP 17
9915: PPUSH
9916: LD_INT 129
9918: PPUSH
9919: LD_INT 53
9921: PPUSH
9922: CALL_OW 171
// AddComHold ( Mike ) ;
9926: LD_EXP 17
9930: PPUSH
9931: CALL_OW 200
// wait ( 0 0$2 ) ;
9935: LD_INT 70
9937: PPUSH
9938: CALL_OW 67
// Say ( Mike , DM-Intro-20 ) ;
9942: LD_EXP 17
9946: PPUSH
9947: LD_STRING DM-Intro-20
9949: PPUSH
9950: CALL_OW 88
// scoutActive := Query ( Scout ) ;
9954: LD_ADDR_EXP 3
9958: PUSH
9959: LD_STRING Scout
9961: PPUSH
9962: CALL_OW 97
9966: ST_TO_ADDR
// if scoutActive = 1 then
9967: LD_EXP 3
9971: PUSH
9972: LD_INT 1
9974: EQUAL
9975: IFFALSE 10072
// begin CenterNowOnUnits ( Kurt ) ;
9977: LD_EXP 25
9981: PPUSH
9982: CALL_OW 87
// Say ( Heike , DH-Intro-21 ) ;
9986: LD_EXP 15
9990: PPUSH
9991: LD_STRING DH-Intro-21
9993: PPUSH
9994: CALL_OW 88
// Say ( Mike , DM-Intro-22 ) ;
9998: LD_EXP 17
10002: PPUSH
10003: LD_STRING DM-Intro-22
10005: PPUSH
10006: CALL_OW 88
// Say ( Kurt , DKs-Intro-23 ) ;
10010: LD_EXP 25
10014: PPUSH
10015: LD_STRING DKs-Intro-23
10017: PPUSH
10018: CALL_OW 88
// SetSide ( Kurt , 5 ) ;
10022: LD_EXP 25
10026: PPUSH
10027: LD_INT 5
10029: PPUSH
10030: CALL_OW 235
// SetSide ( Mike , 5 ) ;
10034: LD_EXP 17
10038: PPUSH
10039: LD_INT 5
10041: PPUSH
10042: CALL_OW 235
// ComMoveXY ( [ Kurt , Mike ] , 104 , 66 ) ;
10046: LD_EXP 25
10050: PUSH
10051: LD_EXP 17
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PPUSH
10060: LD_INT 104
10062: PPUSH
10063: LD_INT 66
10065: PPUSH
10066: CALL_OW 111
// end else
10070: GO 10116
// begin scoutActive := 0 ;
10072: LD_ADDR_EXP 3
10076: PUSH
10077: LD_INT 0
10079: ST_TO_ADDR
// Say ( Heike , DH-Intro-a-21 ) ;
10080: LD_EXP 15
10084: PPUSH
10085: LD_STRING DH-Intro-a-21
10087: PPUSH
10088: CALL_OW 88
// Say ( Mike , DM-Intro-a-22 ) ;
10092: LD_EXP 17
10096: PPUSH
10097: LD_STRING DM-Intro-a-22
10099: PPUSH
10100: CALL_OW 88
// Say ( Kurt , DKs-Intro-a-23 ) ;
10104: LD_EXP 25
10108: PPUSH
10109: LD_STRING DKs-Intro-a-23
10111: PPUSH
10112: CALL_OW 88
// end ; end ; end ; Video ( false ) ;
10116: LD_INT 0
10118: PPUSH
10119: CALL 54812 0 1
// tick := 0 ;
10123: LD_ADDR_OWVAR 1
10127: PUSH
10128: LD_INT 0
10130: ST_TO_ADDR
// music_nat := music_auto ;
10131: LD_ADDR_OWVAR 71
10135: PUSH
10136: LD_INT 0
10138: ST_TO_ADDR
// music_class := music_auto ;
10139: LD_ADDR_OWVAR 72
10143: PUSH
10144: LD_INT 0
10146: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
10147: LD_STRING M1
10149: PPUSH
10150: CALL_OW 337
// wait ( 0 0$3 ) ;
10154: LD_INT 105
10156: PPUSH
10157: CALL_OW 67
// Say ( Heike , DH-Base-1 ) ;
10161: LD_EXP 15
10165: PPUSH
10166: LD_STRING DH-Base-1
10168: PPUSH
10169: CALL_OW 88
// if Kaia then
10173: LD_EXP 20
10177: IFFALSE 10287
// begin Say ( Kaia , DK-Base-2 ) ;
10179: LD_EXP 20
10183: PPUSH
10184: LD_STRING DK-Base-2
10186: PPUSH
10187: CALL_OW 88
// Say ( Heike , DH-Base-3 ) ;
10191: LD_EXP 15
10195: PPUSH
10196: LD_STRING DH-Base-3
10198: PPUSH
10199: CALL_OW 88
// if Aviradze then
10203: LD_EXP 26
10207: IFFALSE 10287
// begin Say ( Aviradze , DA-Base-4 ) ;
10209: LD_EXP 26
10213: PPUSH
10214: LD_STRING DA-Base-4
10216: PPUSH
10217: CALL_OW 88
// Say ( Kaia , DK-Base-5 ) ;
10221: LD_EXP 20
10225: PPUSH
10226: LD_STRING DK-Base-5
10228: PPUSH
10229: CALL_OW 88
// if Markov then
10233: LD_EXP 22
10237: IFFALSE 10287
// begin Say ( Markov , DMar-Base-6 ) ;
10239: LD_EXP 22
10243: PPUSH
10244: LD_STRING DMar-Base-6
10246: PPUSH
10247: CALL_OW 88
// Say ( Kaia , DK-Base-7 ) ;
10251: LD_EXP 20
10255: PPUSH
10256: LD_STRING DK-Base-7
10258: PPUSH
10259: CALL_OW 88
// Say ( Markov , DMar-Base-8 ) ;
10263: LD_EXP 22
10267: PPUSH
10268: LD_STRING DMar-Base-8
10270: PPUSH
10271: CALL_OW 88
// Say ( Markov , DMar-Base-9 ) ;
10275: LD_EXP 22
10279: PPUSH
10280: LD_STRING DMar-Base-9
10282: PPUSH
10283: CALL_OW 88
// end ; end ; end ; SaveForQuickRestart ;
10287: CALL_OW 22
// end ;
10291: LD_VAR 0 1
10295: RET
// every 0 0$1 trigger scoutSuccess do var i , tmp ;
10296: LD_EXP 5
10300: IFFALSE 11415
10302: GO 10304
10304: DISABLE
10305: LD_INT 0
10307: PPUSH
10308: PPUSH
// begin InGameOn ;
10309: CALL_OW 8
// ComTurnUnit ( [ Mike , Kurt ] , Heike ) ;
10313: LD_EXP 17
10317: PUSH
10318: LD_EXP 25
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: PPUSH
10327: LD_EXP 15
10331: PPUSH
10332: CALL_OW 119
// ComExit ( Heike ) ;
10336: LD_EXP 15
10340: PPUSH
10341: CALL 55238 0 1
// if IsOk ( Mike ) then
10345: LD_EXP 17
10349: PPUSH
10350: CALL_OW 302
10354: IFFALSE 10372
// AddComTurnUnit ( Heike , Mike ) else
10356: LD_EXP 15
10360: PPUSH
10361: LD_EXP 17
10365: PPUSH
10366: CALL_OW 179
10370: GO 10386
// AddComTurnUnit ( Heike , Kurt ) ;
10372: LD_EXP 15
10376: PPUSH
10377: LD_EXP 25
10381: PPUSH
10382: CALL_OW 179
// if IsOk ( Mike ) and IsOk ( Kurt ) then
10386: LD_EXP 17
10390: PPUSH
10391: CALL_OW 302
10395: IFFALSE 10408
10397: PUSH
10398: LD_EXP 25
10402: PPUSH
10403: CALL_OW 302
10407: AND
10408: IFFALSE 10659
// begin CenterNowOnUnits ( Mike ) ;
10410: LD_EXP 17
10414: PPUSH
10415: CALL_OW 87
// Say ( Mike , DM-Scout-1 ) ;
10419: LD_EXP 17
10423: PPUSH
10424: LD_STRING DM-Scout-1
10426: PPUSH
10427: CALL_OW 88
// Say ( Heike , DH-Scout-2 ) ;
10431: LD_EXP 15
10435: PPUSH
10436: LD_STRING DH-Scout-2
10438: PPUSH
10439: CALL_OW 88
// Say ( Kurt , DKs-Scout-3 ) ;
10443: LD_EXP 25
10447: PPUSH
10448: LD_STRING DKs-Scout-3
10450: PPUSH
10451: CALL_OW 88
// Say ( Heike , DH-Scout-4 ) ;
10455: LD_EXP 15
10459: PPUSH
10460: LD_STRING DH-Scout-4
10462: PPUSH
10463: CALL_OW 88
// Say ( Heike , DH-Scout-5 ) ;
10467: LD_EXP 15
10471: PPUSH
10472: LD_STRING DH-Scout-5
10474: PPUSH
10475: CALL_OW 88
// tmp := [ [ 72 , 122 ] , [ 89 , 131 ] , [ 99 , 139 ] , [ 100 , 148 ] ] ;
10479: LD_ADDR_VAR 0 2
10483: PUSH
10484: LD_INT 72
10486: PUSH
10487: LD_INT 122
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: LD_INT 89
10496: PUSH
10497: LD_INT 131
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PUSH
10504: LD_INT 99
10506: PUSH
10507: LD_INT 139
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: PUSH
10514: LD_INT 100
10516: PUSH
10517: LD_INT 148
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: ST_TO_ADDR
// for i in tmp do
10530: LD_ADDR_VAR 0 1
10534: PUSH
10535: LD_VAR 0 2
10539: PUSH
10540: FOR_IN
10541: IFFALSE 10599
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 2 , - 6 ) ;
10543: LD_VAR 0 1
10547: PUSH
10548: LD_INT 1
10550: ARRAY
10551: PPUSH
10552: LD_VAR 0 1
10556: PUSH
10557: LD_INT 2
10559: ARRAY
10560: PPUSH
10561: LD_INT 2
10563: PPUSH
10564: LD_INT 6
10566: NEG
10567: PPUSH
10568: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 2 ) ;
10572: LD_VAR 0 1
10576: PUSH
10577: LD_INT 1
10579: ARRAY
10580: PPUSH
10581: LD_VAR 0 1
10585: PUSH
10586: LD_INT 2
10588: ARRAY
10589: PPUSH
10590: LD_INT 2
10592: PPUSH
10593: CALL_OW 331
// end ;
10597: GO 10540
10599: POP
10600: POP
// CenterOnXY ( 83 , 132 ) ;
10601: LD_INT 83
10603: PPUSH
10604: LD_INT 132
10606: PPUSH
10607: CALL_OW 84
// Say ( Kurt , DKs-Scout-6 ) ;
10611: LD_EXP 25
10615: PPUSH
10616: LD_STRING DKs-Scout-6
10618: PPUSH
10619: CALL_OW 88
// Say ( Mike , DM-Scout-7 ) ;
10623: LD_EXP 17
10627: PPUSH
10628: LD_STRING DM-Scout-7
10630: PPUSH
10631: CALL_OW 88
// Say ( Mike , DM-Scout-8 ) ;
10635: LD_EXP 17
10639: PPUSH
10640: LD_STRING DM-Scout-8
10642: PPUSH
10643: CALL_OW 88
// Say ( Kurt , DKs-Scout-9 ) ;
10647: LD_EXP 25
10651: PPUSH
10652: LD_STRING DKs-Scout-9
10654: PPUSH
10655: CALL_OW 88
// end ; if IsDead ( Mike ) then
10659: LD_EXP 17
10663: PPUSH
10664: CALL_OW 301
10668: IFFALSE 10835
// begin CenterNowOnUnits ( Kurt ) ;
10670: LD_EXP 25
10674: PPUSH
10675: CALL_OW 87
// Say ( Kurt , DKs-Scout-b-1 ) ;
10679: LD_EXP 25
10683: PPUSH
10684: LD_STRING DKs-Scout-b-1
10686: PPUSH
10687: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-2 ) ;
10691: LD_EXP 25
10695: PPUSH
10696: LD_STRING DKs-Scout-b-2
10698: PPUSH
10699: CALL_OW 88
// if IsOk ( Givi ) then
10703: LD_EXP 16
10707: PPUSH
10708: CALL_OW 302
10712: IFFALSE 10787
// begin ComExit ( Givi ) ;
10714: LD_EXP 16
10718: PPUSH
10719: CALL 55238 0 1
// AddComTurnUnit ( Givi , Kurt ) ;
10723: LD_EXP 16
10727: PPUSH
10728: LD_EXP 25
10732: PPUSH
10733: CALL_OW 179
// Say ( Givi , DG-Scout-b-3 ) ;
10737: LD_EXP 16
10741: PPUSH
10742: LD_STRING DG-Scout-b-3
10744: PPUSH
10745: CALL_OW 88
// Say ( Givi , DG-Scout-b-4 ) ;
10749: LD_EXP 16
10753: PPUSH
10754: LD_STRING DG-Scout-b-4
10756: PPUSH
10757: CALL_OW 88
// Say ( Givi , DG-Scout-b-5 ) ;
10761: LD_EXP 16
10765: PPUSH
10766: LD_STRING DG-Scout-b-5
10768: PPUSH
10769: CALL_OW 88
// Say ( Heike , DH-Scout-b-6 ) ;
10773: LD_EXP 15
10777: PPUSH
10778: LD_STRING DH-Scout-b-6
10780: PPUSH
10781: CALL_OW 88
// end else
10785: GO 10799
// Say ( Heike , DH-Scout-a-4 ) ;
10787: LD_EXP 15
10791: PPUSH
10792: LD_STRING DH-Scout-a-4
10794: PPUSH
10795: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-7 ) ;
10799: LD_EXP 25
10803: PPUSH
10804: LD_STRING DKs-Scout-b-7
10806: PPUSH
10807: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-8 ) ;
10811: LD_EXP 25
10815: PPUSH
10816: LD_STRING DKs-Scout-b-8
10818: PPUSH
10819: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-9 ) ;
10823: LD_EXP 25
10827: PPUSH
10828: LD_STRING DKs-Scout-b-9
10830: PPUSH
10831: CALL_OW 88
// end ; if IsDead ( Kurt ) then
10835: LD_EXP 25
10839: PPUSH
10840: CALL_OW 301
10844: IFFALSE 11123
// begin CenterNowOnUnits ( Mike ) ;
10846: LD_EXP 17
10850: PPUSH
10851: CALL_OW 87
// Say ( Mike , DM-Scout-a-1 ) ;
10855: LD_EXP 17
10859: PPUSH
10860: LD_STRING DM-Scout-a-1
10862: PPUSH
10863: CALL_OW 88
// Say ( Mike , DM-Scout-a-2 ) ;
10867: LD_EXP 17
10871: PPUSH
10872: LD_STRING DM-Scout-a-2
10874: PPUSH
10875: CALL_OW 88
// if GetLives ( Mike ) < 1000 then
10879: LD_EXP 17
10883: PPUSH
10884: CALL_OW 256
10888: PUSH
10889: LD_INT 1000
10891: LESS
10892: IFFALSE 10908
// Say ( Heike , DH-Scout-a-3 ) else
10894: LD_EXP 15
10898: PPUSH
10899: LD_STRING DH-Scout-a-3
10901: PPUSH
10902: CALL_OW 88
10906: GO 10920
// Say ( Heike , DH-Scout-a-4 ) ;
10908: LD_EXP 15
10912: PPUSH
10913: LD_STRING DH-Scout-a-4
10915: PPUSH
10916: CALL_OW 88
// Say ( Mike , DM-Scout-a-5 ) ;
10920: LD_EXP 17
10924: PPUSH
10925: LD_STRING DM-Scout-a-5
10927: PPUSH
10928: CALL_OW 88
// if IsOk ( Kaia ) then
10932: LD_EXP 20
10936: PPUSH
10937: CALL_OW 302
10941: IFFALSE 11123
// begin ComExit ( Kaia ) ;
10943: LD_EXP 20
10947: PPUSH
10948: CALL 55238 0 1
// AddComMoveUnit ( Kaia , Mike ) ;
10952: LD_EXP 20
10956: PPUSH
10957: LD_EXP 17
10961: PPUSH
10962: CALL_OW 172
// wait ( 0 0$2 ) ;
10966: LD_INT 70
10968: PPUSH
10969: CALL_OW 67
// ComTurnUnit ( Kaia , Mike ) ;
10973: LD_EXP 20
10977: PPUSH
10978: LD_EXP 17
10982: PPUSH
10983: CALL_OW 119
// ComTurnUnit ( Mike , Kaia ) ;
10987: LD_EXP 17
10991: PPUSH
10992: LD_EXP 20
10996: PPUSH
10997: CALL_OW 119
// Say ( Kaia , DK-Scout-a-6 ) ;
11001: LD_EXP 20
11005: PPUSH
11006: LD_STRING DK-Scout-a-6
11008: PPUSH
11009: CALL_OW 88
// Say ( Mike , DM-Scout-a-7 ) ;
11013: LD_EXP 17
11017: PPUSH
11018: LD_STRING DM-Scout-a-7
11020: PPUSH
11021: CALL_OW 88
// Say ( Kaia , DK-Scout-a-8 ) ;
11025: LD_EXP 20
11029: PPUSH
11030: LD_STRING DK-Scout-a-8
11032: PPUSH
11033: CALL_OW 88
// Say ( Kaia , DK-Scout-a-9 ) ;
11037: LD_EXP 20
11041: PPUSH
11042: LD_STRING DK-Scout-a-9
11044: PPUSH
11045: CALL_OW 88
// Say ( Heike , DH-Scout-a-10 ) ;
11049: LD_EXP 15
11053: PPUSH
11054: LD_STRING DH-Scout-a-10
11056: PPUSH
11057: CALL_OW 88
// ComTurnUnit ( Mike , Heike ) ;
11061: LD_EXP 17
11065: PPUSH
11066: LD_EXP 15
11070: PPUSH
11071: CALL_OW 119
// Say ( Mike , DM-Scout-a-11 ) ;
11075: LD_EXP 17
11079: PPUSH
11080: LD_STRING DM-Scout-a-11
11082: PPUSH
11083: CALL_OW 88
// Say ( Mike , DM-Scout-a-12 ) ;
11087: LD_EXP 17
11091: PPUSH
11092: LD_STRING DM-Scout-a-12
11094: PPUSH
11095: CALL_OW 88
// Say ( Mike , DM-Scout-a-13 ) ;
11099: LD_EXP 17
11103: PPUSH
11104: LD_STRING DM-Scout-a-13
11106: PPUSH
11107: CALL_OW 88
// Say ( Mike , DM-Scout-a-14 ) ;
11111: LD_EXP 17
11115: PPUSH
11116: LD_STRING DM-Scout-a-14
11118: PPUSH
11119: CALL_OW 88
// end ; end ; if IsOk ( Givi ) then
11123: LD_EXP 16
11127: PPUSH
11128: CALL_OW 302
11132: IFFALSE 11160
// begin Say ( Givi , DG-Scout-10 ) ;
11134: LD_EXP 16
11138: PPUSH
11139: LD_STRING DG-Scout-10
11141: PPUSH
11142: CALL_OW 88
// Say ( Givi , DG-Scout-11 ) ;
11146: LD_EXP 16
11150: PPUSH
11151: LD_STRING DG-Scout-11
11153: PPUSH
11154: CALL_OW 88
// end else
11158: GO 11217
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-10 ) then
11160: LD_EXP 27
11164: PPUSH
11165: LD_INT 26
11167: PUSH
11168: LD_INT 1
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: PPUSH
11175: CALL_OW 72
11179: PPUSH
11180: LD_STRING DArm-Scout-10
11182: PPUSH
11183: CALL 224 0 2
11187: NOT
11188: IFFALSE 11217
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-10 ) ;
11190: LD_EXP 27
11194: PPUSH
11195: LD_INT 26
11197: PUSH
11198: LD_INT 2
11200: PUSH
11201: EMPTY
11202: LIST
11203: LIST
11204: PPUSH
11205: CALL_OW 72
11209: PPUSH
11210: LD_STRING DArf-Scout-10
11212: PPUSH
11213: CALL 224 0 2
// Say ( Heike , DH-Scout-12 ) ;
11217: LD_EXP 15
11221: PPUSH
11222: LD_STRING DH-Scout-12
11224: PPUSH
11225: CALL_OW 88
// Say ( Heike , DH-Scout-13 ) ;
11229: LD_EXP 15
11233: PPUSH
11234: LD_STRING DH-Scout-13
11236: PPUSH
11237: CALL_OW 88
// if IsOk ( Mike ) and IsOk ( Kurt ) then
11241: LD_EXP 17
11245: PPUSH
11246: CALL_OW 302
11250: IFFALSE 11263
11252: PUSH
11253: LD_EXP 25
11257: PPUSH
11258: CALL_OW 302
11262: AND
11263: IFFALSE 11291
// begin Say ( Mike , DM-Scout-14 ) ;
11265: LD_EXP 17
11269: PPUSH
11270: LD_STRING DM-Scout-14
11272: PPUSH
11273: CALL_OW 88
// Say ( Heike , DH-Scout-c-14 ) ;
11277: LD_EXP 15
11281: PPUSH
11282: LD_STRING DH-Scout-c-14
11284: PPUSH
11285: CALL_OW 88
// end else
11289: GO 11384
// if IsOk ( Mike ) xor IsOk ( Kurt ) then
11291: LD_EXP 17
11295: PPUSH
11296: CALL_OW 302
11300: PUSH
11301: LD_EXP 25
11305: PPUSH
11306: CALL_OW 302
11310: XOR
11311: IFFALSE 11372
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-a-14 ) then
11313: LD_EXP 27
11317: PPUSH
11318: LD_INT 26
11320: PUSH
11321: LD_INT 1
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PPUSH
11328: CALL_OW 72
11332: PPUSH
11333: LD_STRING DArm-Scout-a-14
11335: PPUSH
11336: CALL 224 0 2
11340: NOT
11341: IFFALSE 11370
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-a-14 ) ;
11343: LD_EXP 27
11347: PPUSH
11348: LD_INT 26
11350: PUSH
11351: LD_INT 2
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: PPUSH
11358: CALL_OW 72
11362: PPUSH
11363: LD_STRING DArf-Scout-a-14
11365: PPUSH
11366: CALL 224 0 2
// end else
11370: GO 11384
// Say ( Heike , DH-Scout-d-14 ) ;
11372: LD_EXP 15
11376: PPUSH
11377: LD_STRING DH-Scout-d-14
11379: PPUSH
11380: CALL_OW 88
// Say ( Heike , DH-Scout-15 ) ;
11384: LD_EXP 15
11388: PPUSH
11389: LD_STRING DH-Scout-15
11391: PPUSH
11392: CALL_OW 88
// InGameOff ;
11396: CALL_OW 9
// wait ( 1 1$00 ) ;
11400: LD_INT 2100
11402: PPUSH
11403: CALL_OW 67
// usAttacksAllowed := true ;
11407: LD_ADDR_EXP 6
11411: PUSH
11412: LD_INT 1
11414: ST_TO_ADDR
// end ;
11415: PPOPN 2
11417: END
// every 0 0$1 trigger scoutFailed do var spoken ;
11418: LD_EXP 4
11422: IFFALSE 11599
11424: GO 11426
11426: DISABLE
11427: LD_INT 0
11429: PPUSH
// begin spoken := true ;
11430: LD_ADDR_VAR 0 1
11434: PUSH
11435: LD_INT 1
11437: ST_TO_ADDR
// wait ( 0 0$30 ) ;
11438: LD_INT 1050
11440: PPUSH
11441: CALL_OW 67
// Say ( Heike , DH-Scout-c-1 ) ;
11445: LD_EXP 15
11449: PPUSH
11450: LD_STRING DH-Scout-c-1
11452: PPUSH
11453: CALL_OW 88
// if not IsOk ( Givi ) then
11457: LD_EXP 16
11461: PPUSH
11462: CALL_OW 302
11466: NOT
11467: IFFALSE 11471
// exit ;
11469: GO 11599
// if IsOk ( Givi ) then
11471: LD_EXP 16
11475: PPUSH
11476: CALL_OW 302
11480: IFFALSE 11508
// begin Say ( Givi , DG-Scout-c-2 ) ;
11482: LD_EXP 16
11486: PPUSH
11487: LD_STRING DG-Scout-c-2
11489: PPUSH
11490: CALL_OW 88
// Say ( Givi , DG-Scout-c-3 ) ;
11494: LD_EXP 16
11498: PPUSH
11499: LD_STRING DG-Scout-c-3
11501: PPUSH
11502: CALL_OW 88
// end else
11506: GO 11581
// begin spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-c-3 ) ;
11508: LD_ADDR_VAR 0 1
11512: PUSH
11513: LD_EXP 27
11517: PPUSH
11518: LD_INT 26
11520: PUSH
11521: LD_INT 1
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PPUSH
11528: CALL_OW 72
11532: PPUSH
11533: LD_STRING DArm-Scout-c-3
11535: PPUSH
11536: CALL 224 0 2
11540: ST_TO_ADDR
// if not spoken then
11541: LD_VAR 0 1
11545: NOT
11546: IFFALSE 11581
// spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-c-3 ) ;
11548: LD_ADDR_VAR 0 1
11552: PUSH
11553: LD_EXP 27
11557: PPUSH
11558: LD_INT 26
11560: PUSH
11561: LD_INT 2
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: PPUSH
11568: CALL_OW 72
11572: PPUSH
11573: LD_STRING DArf-Scout-c-3
11575: PPUSH
11576: CALL 224 0 2
11580: ST_TO_ADDR
// ; end ; if spoken then
11581: LD_VAR 0 1
11585: IFFALSE 11599
// Say ( Heike , DH-Scout-c-4 ) ;
11587: LD_EXP 15
11591: PPUSH
11592: LD_STRING DH-Scout-c-4
11594: PPUSH
11595: CALL_OW 88
// end ;
11599: PPOPN 1
11601: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_half ] ] ) and IsOk ( Aviradze ) do
11602: LD_INT 22
11604: PUSH
11605: LD_INT 2
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: PUSH
11612: LD_INT 30
11614: PUSH
11615: LD_INT 7
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PPUSH
11626: CALL_OW 69
11630: IFFALSE 11643
11632: PUSH
11633: LD_EXP 26
11637: PPUSH
11638: CALL_OW 302
11642: AND
11643: IFFALSE 11728
11645: GO 11647
11647: DISABLE
// begin DialogueOn ;
11648: CALL_OW 6
// Say ( Aviradze , DA-Lab-1 ) ;
11652: LD_EXP 26
11656: PPUSH
11657: LD_STRING DA-Lab-1
11659: PPUSH
11660: CALL_OW 88
// Say ( Heike , DH-Lab-2 ) ;
11664: LD_EXP 15
11668: PPUSH
11669: LD_STRING DH-Lab-2
11671: PPUSH
11672: CALL_OW 88
// Say ( Aviradze , DA-Lab-3 ) ;
11676: LD_EXP 26
11680: PPUSH
11681: LD_STRING DA-Lab-3
11683: PPUSH
11684: CALL_OW 88
// Say ( Aviradze , DA-Lab-4 ) ;
11688: LD_EXP 26
11692: PPUSH
11693: LD_STRING DA-Lab-4
11695: PPUSH
11696: CALL_OW 88
// Say ( Aviradze , DA-Lab-5 ) ;
11700: LD_EXP 26
11704: PPUSH
11705: LD_STRING DA-Lab-5
11707: PPUSH
11708: CALL_OW 88
// Say ( Heike , DH-Lab-6 ) ;
11712: LD_EXP 15
11716: PPUSH
11717: LD_STRING DH-Lab-6
11719: PPUSH
11720: CALL_OW 88
// DialogueOff ;
11724: CALL_OW 7
// end ;
11728: END
// every 0 0$1 trigger GetTech ( tech_MatDet , 2 ) = state_researched and IsOk ( Givi ) do
11729: LD_INT 7
11731: PPUSH
11732: LD_INT 2
11734: PPUSH
11735: CALL_OW 321
11739: PUSH
11740: LD_INT 2
11742: EQUAL
11743: IFFALSE 11756
11745: PUSH
11746: LD_EXP 16
11750: PPUSH
11751: CALL_OW 302
11755: AND
11756: IFFALSE 11925
11758: GO 11760
11760: DISABLE
// begin DialogueOn ;
11761: CALL_OW 6
// Say ( Givi , DG-Opt-1 ) ;
11765: LD_EXP 16
11769: PPUSH
11770: LD_STRING DG-Opt-1
11772: PPUSH
11773: CALL_OW 88
// Say ( Heike , DH-Opt-2 ) ;
11777: LD_EXP 15
11781: PPUSH
11782: LD_STRING DH-Opt-2
11784: PPUSH
11785: CALL_OW 88
// Say ( Givi , DG-Opt-3 ) ;
11789: LD_EXP 16
11793: PPUSH
11794: LD_STRING DG-Opt-3
11796: PPUSH
11797: CALL_OW 88
// Say ( Givi , DG-Opt-4 ) ;
11801: LD_EXP 16
11805: PPUSH
11806: LD_STRING DG-Opt-4
11808: PPUSH
11809: CALL_OW 88
// Say ( Heike , DH-Opt-5 ) ;
11813: LD_EXP 15
11817: PPUSH
11818: LD_STRING DH-Opt-5
11820: PPUSH
11821: CALL_OW 88
// Say ( Givi , DG-Opt-6 ) ;
11825: LD_EXP 16
11829: PPUSH
11830: LD_STRING DG-Opt-6
11832: PPUSH
11833: CALL_OW 88
// Say ( Heike , DH-Opt-7 ) ;
11837: LD_EXP 15
11841: PPUSH
11842: LD_STRING DH-Opt-7
11844: PPUSH
11845: CALL_OW 88
// Say ( Givi , DG-Opt-8 ) ;
11849: LD_EXP 16
11853: PPUSH
11854: LD_STRING DG-Opt-8
11856: PPUSH
11857: CALL_OW 88
// Say ( Givi , DG-Opt-9 ) ;
11861: LD_EXP 16
11865: PPUSH
11866: LD_STRING DG-Opt-9
11868: PPUSH
11869: CALL_OW 88
// Say ( Heike , DH-Opt-10 ) ;
11873: LD_EXP 15
11877: PPUSH
11878: LD_STRING DH-Opt-10
11880: PPUSH
11881: CALL_OW 88
// Say ( Givi , DG-Opt-11 ) ;
11885: LD_EXP 16
11889: PPUSH
11890: LD_STRING DG-Opt-11
11892: PPUSH
11893: CALL_OW 88
// Say ( Givi , DG-Opt-12 ) ;
11897: LD_EXP 16
11901: PPUSH
11902: LD_STRING DG-Opt-12
11904: PPUSH
11905: CALL_OW 88
// Say ( Heike , DH-Opt-13 ) ;
11909: LD_EXP 15
11913: PPUSH
11914: LD_STRING DH-Opt-13
11916: PPUSH
11917: CALL_OW 88
// DialogueOff ;
11921: CALL_OW 7
// end ;
11925: END
// every 0 0$2 trigger UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) do
11926: LD_EXP 27
11930: PPUSH
11931: LD_INT 95
11933: PUSH
11934: LD_INT 7
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: PUSH
11941: LD_INT 23
11943: PUSH
11944: LD_INT 2
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PUSH
11951: LD_INT 26
11953: PUSH
11954: LD_INT 1
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: LIST
11965: PPUSH
11966: CALL_OW 72
11970: IFFALSE 12031
11972: GO 11974
11974: DISABLE
// begin Say ( UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-River ) ;
11975: LD_EXP 27
11979: PPUSH
11980: LD_INT 95
11982: PUSH
11983: LD_INT 7
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PUSH
11990: LD_INT 23
11992: PUSH
11993: LD_INT 2
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PUSH
12000: LD_INT 26
12002: PUSH
12003: LD_INT 1
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: LIST
12014: PPUSH
12015: CALL_OW 72
12019: PUSH
12020: LD_INT 1
12022: ARRAY
12023: PPUSH
12024: LD_STRING DArm-River
12026: PPUSH
12027: CALL_OW 88
// end ;
12031: END
// every 0 0$1 trigger GetTech ( tech_rocket , 2 ) = state_researched and IsOk ( Ibrahim ) do
12032: LD_INT 40
12034: PPUSH
12035: LD_INT 2
12037: PPUSH
12038: CALL_OW 321
12042: PUSH
12043: LD_INT 2
12045: EQUAL
12046: IFFALSE 12059
12048: PUSH
12049: LD_EXP 18
12053: PPUSH
12054: CALL_OW 302
12058: AND
12059: IFFALSE 12313
12061: GO 12063
12063: DISABLE
// begin DialogueOn ;
12064: CALL_OW 6
// Say ( Ibrahim , DI-Roc-1 ) ;
12068: LD_EXP 18
12072: PPUSH
12073: LD_STRING DI-Roc-1
12075: PPUSH
12076: CALL_OW 88
// Say ( Heike , DH-Roc-2 ) ;
12080: LD_EXP 15
12084: PPUSH
12085: LD_STRING DH-Roc-2
12087: PPUSH
12088: CALL_OW 88
// Say ( Ibrahim , DI-Roc-3 ) ;
12092: LD_EXP 18
12096: PPUSH
12097: LD_STRING DI-Roc-3
12099: PPUSH
12100: CALL_OW 88
// Say ( Ibrahim , DI-Roc-4 ) ;
12104: LD_EXP 18
12108: PPUSH
12109: LD_STRING DI-Roc-4
12111: PPUSH
12112: CALL_OW 88
// Say ( Kaia , DK-Roc-5 ) ;
12116: LD_EXP 20
12120: PPUSH
12121: LD_STRING DK-Roc-5
12123: PPUSH
12124: CALL_OW 88
// Say ( Kaia , DK-Roc-6 ) ;
12128: LD_EXP 20
12132: PPUSH
12133: LD_STRING DK-Roc-6
12135: PPUSH
12136: CALL_OW 88
// Say ( Givi , DG-Roc-7 ) ;
12140: LD_EXP 16
12144: PPUSH
12145: LD_STRING DG-Roc-7
12147: PPUSH
12148: CALL_OW 88
// Say ( Givi , DG-Roc-8 ) ;
12152: LD_EXP 16
12156: PPUSH
12157: LD_STRING DG-Roc-8
12159: PPUSH
12160: CALL_OW 88
// if IsOk ( Markov ) and IsOk ( Kaia ) and IsOk ( Givi ) then
12164: LD_EXP 22
12168: PPUSH
12169: CALL_OW 302
12173: IFFALSE 12186
12175: PUSH
12176: LD_EXP 20
12180: PPUSH
12181: CALL_OW 302
12185: AND
12186: IFFALSE 12199
12188: PUSH
12189: LD_EXP 16
12193: PPUSH
12194: CALL_OW 302
12198: AND
12199: IFFALSE 12309
// begin Say ( Markov , DMar-Roc-9 ) ;
12201: LD_EXP 22
12205: PPUSH
12206: LD_STRING DMar-Roc-9
12208: PPUSH
12209: CALL_OW 88
// Say ( Markov , DMar-Roc-10 ) ;
12213: LD_EXP 22
12217: PPUSH
12218: LD_STRING DMar-Roc-10
12220: PPUSH
12221: CALL_OW 88
// Say ( Kaia , DK-Roc-11 ) ;
12225: LD_EXP 20
12229: PPUSH
12230: LD_STRING DK-Roc-11
12232: PPUSH
12233: CALL_OW 88
// Say ( Markov , DMar-Roc-12 ) ;
12237: LD_EXP 22
12241: PPUSH
12242: LD_STRING DMar-Roc-12
12244: PPUSH
12245: CALL_OW 88
// Say ( Kaia , DK-Roc-13 ) ;
12249: LD_EXP 20
12253: PPUSH
12254: LD_STRING DK-Roc-13
12256: PPUSH
12257: CALL_OW 88
// Say ( Givi , DG-Roc-14 ) ;
12261: LD_EXP 16
12265: PPUSH
12266: LD_STRING DG-Roc-14
12268: PPUSH
12269: CALL_OW 88
// Say ( Markov , DMar-Roc-15 ) ;
12273: LD_EXP 22
12277: PPUSH
12278: LD_STRING DMar-Roc-15
12280: PPUSH
12281: CALL_OW 88
// Say ( Markov , DMar-Roc-16 ) ;
12285: LD_EXP 22
12289: PPUSH
12290: LD_STRING DMar-Roc-16
12292: PPUSH
12293: CALL_OW 88
// Say ( Kaia , DK-Roc-17 ) ;
12297: LD_EXP 20
12301: PPUSH
12302: LD_STRING DK-Roc-17
12304: PPUSH
12305: CALL_OW 88
// end ; DialogueOff ;
12309: CALL_OW 7
// end ;
12313: END
// every 0 0$3 trigger GetLives ( usCommander ) < 1000 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] ] ) < 6 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) < 2 do var i , hurts , sci ;
12314: LD_EXP 30
12318: PPUSH
12319: CALL_OW 256
12323: PUSH
12324: LD_INT 1000
12326: LESS
12327: IFTRUE 12374
12329: PUSH
12330: LD_INT 22
12332: PUSH
12333: LD_INT 1
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: PUSH
12340: LD_INT 21
12342: PUSH
12343: LD_INT 1
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PUSH
12350: LD_INT 23
12352: PUSH
12353: LD_INT 1
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: LIST
12364: PPUSH
12365: CALL_OW 69
12369: PUSH
12370: LD_INT 6
12372: LESS
12373: OR
12374: IFTRUE 12421
12376: PUSH
12377: LD_INT 22
12379: PUSH
12380: LD_INT 1
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: PUSH
12387: LD_INT 21
12389: PUSH
12390: LD_INT 1
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: PUSH
12397: LD_INT 25
12399: PUSH
12400: LD_INT 1
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: LIST
12411: PPUSH
12412: CALL_OW 69
12416: PUSH
12417: LD_INT 2
12419: LESS
12420: OR
12421: IFFALSE 13699
12423: GO 12425
12425: DISABLE
12426: LD_INT 0
12428: PPUSH
12429: PPUSH
12430: PPUSH
// begin usAttacksAllowed := false ;
12431: LD_ADDR_EXP 6
12435: PUSH
12436: LD_INT 0
12438: ST_TO_ADDR
// usSurrender := true ;
12439: LD_ADDR_EXP 7
12443: PUSH
12444: LD_INT 1
12446: ST_TO_ADDR
// SetAttitude ( 1 , 2 , att_friend , true ) ;
12447: LD_INT 1
12449: PPUSH
12450: LD_INT 2
12452: PPUSH
12453: LD_INT 1
12455: PPUSH
12456: LD_INT 1
12458: PPUSH
12459: CALL_OW 80
// if IsDead ( usCommander ) then
12463: LD_EXP 30
12467: PPUSH
12468: CALL_OW 301
12472: IFFALSE 12476
// exit ;
12474: GO 13699
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_hastask ] ] ) do
12476: LD_ADDR_VAR 0 1
12480: PUSH
12481: LD_INT 22
12483: PUSH
12484: LD_INT 2
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PUSH
12491: LD_INT 21
12493: PUSH
12494: LD_INT 1
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PUSH
12501: LD_INT 60
12503: PUSH
12504: EMPTY
12505: LIST
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: LIST
12511: PPUSH
12512: CALL_OW 69
12516: PUSH
12517: FOR_IN
12518: IFFALSE 12531
// ComStop ( i ) ;
12520: LD_VAR 0 1
12524: PPUSH
12525: CALL_OW 141
12529: GO 12517
12531: POP
12532: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_ok ] ] , [ f_type , unit_human ] ] ) do
12533: LD_ADDR_VAR 0 1
12537: PUSH
12538: LD_INT 22
12540: PUSH
12541: LD_INT 2
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: PUSH
12548: LD_INT 3
12550: PUSH
12551: LD_INT 50
12553: PUSH
12554: EMPTY
12555: LIST
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: PUSH
12561: LD_INT 21
12563: PUSH
12564: LD_INT 1
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: LIST
12575: PPUSH
12576: CALL_OW 69
12580: PUSH
12581: FOR_IN
12582: IFFALSE 12598
// SetLives ( i , 251 ) ;
12584: LD_VAR 0 1
12588: PPUSH
12589: LD_INT 251
12591: PPUSH
12592: CALL_OW 234
12596: GO 12581
12598: POP
12599: POP
// Video ( true ) ;
12600: LD_INT 1
12602: PPUSH
12603: CALL 54812 0 1
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
12607: LD_ADDR_VAR 0 1
12611: PUSH
12612: LD_INT 22
12614: PUSH
12615: LD_INT 2
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: PPUSH
12622: CALL_OW 69
12626: PUSH
12627: FOR_IN
12628: IFFALSE 12641
// ComStop ( i ) ;
12630: LD_VAR 0 1
12634: PPUSH
12635: CALL_OW 141
12639: GO 12627
12641: POP
12642: POP
// if not IsOk ( usCommander ) then
12643: LD_EXP 30
12647: PPUSH
12648: CALL_OW 302
12652: NOT
12653: IFFALSE 12667
// SetLives ( usCommander , 1000 ) ;
12655: LD_EXP 30
12659: PPUSH
12660: LD_INT 1000
12662: PPUSH
12663: CALL_OW 234
// InGameOn ;
12667: CALL_OW 8
// ComExit ( usCommander ) ;
12671: LD_EXP 30
12675: PPUSH
12676: CALL 55238 0 1
// AddComMoveXY ( usCommander , 81 , 143 ) ;
12680: LD_EXP 30
12684: PPUSH
12685: LD_INT 81
12687: PPUSH
12688: LD_INT 143
12690: PPUSH
12691: CALL_OW 171
// AddComTurnXY ( usCommander , 81 , 139 ) ;
12695: LD_EXP 30
12699: PPUSH
12700: LD_INT 81
12702: PPUSH
12703: LD_INT 139
12705: PPUSH
12706: CALL_OW 178
// PlaceSeeing ( 81 , 144 , 2 , - 10 ) ;
12710: LD_INT 81
12712: PPUSH
12713: LD_INT 144
12715: PPUSH
12716: LD_INT 2
12718: PPUSH
12719: LD_INT 10
12721: NEG
12722: PPUSH
12723: CALL_OW 330
// CenterNowOnUnits ( usCommander ) ;
12727: LD_EXP 30
12731: PPUSH
12732: CALL_OW 87
// wait ( 0 0$2 ) ;
12736: LD_INT 70
12738: PPUSH
12739: CALL_OW 67
// Say ( usCommander , DCa-Surrender-1 ) ;
12743: LD_EXP 30
12747: PPUSH
12748: LD_STRING DCa-Surrender-1
12750: PPUSH
12751: CALL_OW 88
// Say ( Heike , DH-Surrender-2 ) ;
12755: LD_EXP 15
12759: PPUSH
12760: LD_STRING DH-Surrender-2
12762: PPUSH
12763: CALL_OW 88
// if GetType ( IsInUnit ( Heike ) ) = unit_building then
12767: LD_EXP 15
12771: PPUSH
12772: CALL_OW 310
12776: PPUSH
12777: CALL_OW 247
12781: PUSH
12782: LD_INT 3
12784: EQUAL
12785: IFFALSE 12803
// begin ComExit ( Heike ) ;
12787: LD_EXP 15
12791: PPUSH
12792: CALL 55238 0 1
// wait ( 3 ) ;
12796: LD_INT 3
12798: PPUSH
12799: CALL_OW 67
// end ; ComMoveXY ( Heike , 82 , 133 ) ;
12803: LD_EXP 15
12807: PPUSH
12808: LD_INT 82
12810: PPUSH
12811: LD_INT 133
12813: PPUSH
12814: CALL_OW 111
// AddComTurnUnit ( Heike , usCommander ) ;
12818: LD_EXP 15
12822: PPUSH
12823: LD_EXP 30
12827: PPUSH
12828: CALL_OW 179
// wait ( 0 0$3 ) ;
12832: LD_INT 105
12834: PPUSH
12835: CALL_OW 67
// Say ( Heike , DH-Surrender-3 ) ;
12839: LD_EXP 15
12843: PPUSH
12844: LD_STRING DH-Surrender-3
12846: PPUSH
12847: CALL_OW 88
// Say ( Heike , DH-Surrender-4 ) ;
12851: LD_EXP 15
12855: PPUSH
12856: LD_STRING DH-Surrender-4
12858: PPUSH
12859: CALL_OW 88
// RemoveSeeing ( 81 , 144 , 2 ) ;
12863: LD_INT 81
12865: PPUSH
12866: LD_INT 144
12868: PPUSH
12869: LD_INT 2
12871: PPUSH
12872: CALL_OW 331
// ChangeSideFog ( 1 , 2 ) ;
12876: LD_INT 1
12878: PPUSH
12879: LD_INT 2
12881: PPUSH
12882: CALL_OW 343
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_inside ] ] ) do
12886: LD_ADDR_VAR 0 1
12890: PUSH
12891: LD_INT 22
12893: PUSH
12894: LD_INT 1
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PUSH
12901: LD_INT 23
12903: PUSH
12904: LD_INT 1
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: PUSH
12911: LD_INT 54
12913: PUSH
12914: EMPTY
12915: LIST
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: LIST
12921: PPUSH
12922: CALL_OW 69
12926: PUSH
12927: FOR_IN
12928: IFFALSE 12941
// ComExit ( i ) ;
12930: LD_VAR 0 1
12934: PPUSH
12935: CALL 55238 0 1
12939: GO 12927
12941: POP
12942: POP
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
12943: LD_ADDR_VAR 0 3
12947: PUSH
12948: LD_INT 22
12950: PUSH
12951: LD_INT 1
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: PUSH
12958: LD_INT 25
12960: PUSH
12961: LD_INT 4
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PPUSH
12972: CALL_OW 69
12976: ST_TO_ADDR
// hurts := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
12977: LD_ADDR_VAR 0 2
12981: PUSH
12982: LD_INT 22
12984: PUSH
12985: LD_INT 1
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: PUSH
12992: LD_INT 3
12994: PUSH
12995: LD_INT 50
12997: PUSH
12998: EMPTY
12999: LIST
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: PPUSH
13009: CALL_OW 69
13013: ST_TO_ADDR
// if sci and hurts then
13014: LD_VAR 0 3
13018: IFFALSE 13026
13020: PUSH
13021: LD_VAR 0 2
13025: AND
13026: IFFALSE 13088
// begin for i := 1 to hurts do
13028: LD_ADDR_VAR 0 1
13032: PUSH
13033: DOUBLE
13034: LD_INT 1
13036: DEC
13037: ST_TO_ADDR
13038: LD_VAR 0 2
13042: PUSH
13043: FOR_TO
13044: IFFALSE 13086
// if i <= sci then
13046: LD_VAR 0 1
13050: PUSH
13051: LD_VAR 0 3
13055: LESSEQUAL
13056: IFFALSE 13084
// AddComHeal ( sci [ i ] , hurts [ i ] ) ;
13058: LD_VAR 0 3
13062: PUSH
13063: LD_VAR 0 1
13067: ARRAY
13068: PPUSH
13069: LD_VAR 0 2
13073: PUSH
13074: LD_VAR 0 1
13078: ARRAY
13079: PPUSH
13080: CALL_OW 188
13084: GO 13043
13086: POP
13087: POP
// end ; if IsOk ( Givi ) then
13088: LD_EXP 16
13092: PPUSH
13093: CALL_OW 302
13097: IFFALSE 13113
// Say ( Givi , DG-Surrender-5 ) else
13099: LD_EXP 16
13103: PPUSH
13104: LD_STRING DG-Surrender-5
13106: PPUSH
13107: CALL_OW 88
13111: GO 13125
// Say ( Heike , DH-Surrender-a-5 ) ;
13113: LD_EXP 15
13117: PPUSH
13118: LD_STRING DH-Surrender-a-5
13120: PPUSH
13121: CALL_OW 88
// Say ( usCommander , DCa-Surrender-6 ) ;
13125: LD_EXP 30
13129: PPUSH
13130: LD_STRING DCa-Surrender-6
13132: PPUSH
13133: CALL_OW 88
// Say ( usCommander , DCa-Surrender-7 ) ;
13137: LD_EXP 30
13141: PPUSH
13142: LD_STRING DCa-Surrender-7
13144: PPUSH
13145: CALL_OW 88
// if IsOk ( Givi ) then
13149: LD_EXP 16
13153: PPUSH
13154: CALL_OW 302
13158: IFFALSE 13174
// Say ( Givi , DG-Surrender-8 ) else
13160: LD_EXP 16
13164: PPUSH
13165: LD_STRING DG-Surrender-8
13167: PPUSH
13168: CALL_OW 88
13172: GO 13186
// Say ( Heike , DH-Surrender-a-8 ) ;
13174: LD_EXP 15
13178: PPUSH
13179: LD_STRING DH-Surrender-a-8
13181: PPUSH
13182: CALL_OW 88
// Say ( usCommander , DCa-Surrender-9 ) ;
13186: LD_EXP 30
13190: PPUSH
13191: LD_STRING DCa-Surrender-9
13193: PPUSH
13194: CALL_OW 88
// Say ( Heike , DH-Surrender-10 ) ;
13198: LD_EXP 15
13202: PPUSH
13203: LD_STRING DH-Surrender-10
13205: PPUSH
13206: CALL_OW 88
// Say ( usCommander , DCa-Surrender-11 ) ;
13210: LD_EXP 30
13214: PPUSH
13215: LD_STRING DCa-Surrender-11
13217: PPUSH
13218: CALL_OW 88
// Say ( Heike , DH-Surrender-12 ) ;
13222: LD_EXP 15
13226: PPUSH
13227: LD_STRING DH-Surrender-12
13229: PPUSH
13230: CALL_OW 88
// Say ( usCommander , DCa-Surrender-13 ) ;
13234: LD_EXP 30
13238: PPUSH
13239: LD_STRING DCa-Surrender-13
13241: PPUSH
13242: CALL_OW 88
// Say ( usCommander , DCa-Surrender-14 ) ;
13246: LD_EXP 30
13250: PPUSH
13251: LD_STRING DCa-Surrender-14
13253: PPUSH
13254: CALL_OW 88
// Say ( usCommander , DCa-Surrender-15 ) ;
13258: LD_EXP 30
13262: PPUSH
13263: LD_STRING DCa-Surrender-15
13265: PPUSH
13266: CALL_OW 88
// Say ( usCommander , DCa-Surrender-16 ) ;
13270: LD_EXP 30
13274: PPUSH
13275: LD_STRING DCa-Surrender-16
13277: PPUSH
13278: CALL_OW 88
// Say ( Kaia , DK-Surrender-17 ) ;
13282: LD_EXP 20
13286: PPUSH
13287: LD_STRING DK-Surrender-17
13289: PPUSH
13290: CALL_OW 88
// Say ( Olaf , DO-Surrender-18 ) ;
13294: LD_EXP 24
13298: PPUSH
13299: LD_STRING DO-Surrender-18
13301: PPUSH
13302: CALL_OW 88
// Say ( Olaf , DO-Surrender-19 ) ;
13306: LD_EXP 24
13310: PPUSH
13311: LD_STRING DO-Surrender-19
13313: PPUSH
13314: CALL_OW 88
// Say ( Kurt , DKs-Surrender-20 ) ;
13318: LD_EXP 25
13322: PPUSH
13323: LD_STRING DKs-Surrender-20
13325: PPUSH
13326: CALL_OW 88
// Say ( Kurt , DKs-Surrender-21 ) ;
13330: LD_EXP 25
13334: PPUSH
13335: LD_STRING DKs-Surrender-21
13337: PPUSH
13338: CALL_OW 88
// Say ( Markov , DMar-Surrender-22 ) ;
13342: LD_EXP 22
13346: PPUSH
13347: LD_STRING DMar-Surrender-22
13349: PPUSH
13350: CALL_OW 88
// Say ( Markov , DMar-Surrender-23 ) ;
13354: LD_EXP 22
13358: PPUSH
13359: LD_STRING DMar-Surrender-23
13361: PPUSH
13362: CALL_OW 88
// Say ( Sophia , DS-Surrender-24 ) ;
13366: LD_EXP 21
13370: PPUSH
13371: LD_STRING DS-Surrender-24
13373: PPUSH
13374: CALL_OW 88
// Say ( Aviradze , DA-Surrender-25 ) ;
13378: LD_EXP 26
13382: PPUSH
13383: LD_STRING DA-Surrender-25
13385: PPUSH
13386: CALL_OW 88
// Say ( Ibrahim , DI-Surrender-26 ) ;
13390: LD_EXP 18
13394: PPUSH
13395: LD_STRING DI-Surrender-26
13397: PPUSH
13398: CALL_OW 88
// Say ( Kamil , DKam-Surrender-27 ) ;
13402: LD_EXP 19
13406: PPUSH
13407: LD_STRING DKam-Surrender-27
13409: PPUSH
13410: CALL_OW 88
// if IsOk ( Givi ) then
13414: LD_EXP 16
13418: PPUSH
13419: CALL_OW 302
13423: IFFALSE 13463
// begin Say ( Givi , DG-Surrender-28 ) ;
13425: LD_EXP 16
13429: PPUSH
13430: LD_STRING DG-Surrender-28
13432: PPUSH
13433: CALL_OW 88
// Say ( Givi , DG-Surrender-29 ) ;
13437: LD_EXP 16
13441: PPUSH
13442: LD_STRING DG-Surrender-29
13444: PPUSH
13445: CALL_OW 88
// Say ( Givi , DG-Surrender-30 ) ;
13449: LD_EXP 16
13453: PPUSH
13454: LD_STRING DG-Surrender-30
13456: PPUSH
13457: CALL_OW 88
// end else
13461: GO 13499
// begin Say ( Heike , DH-Surrender-a-28 ) ;
13463: LD_EXP 15
13467: PPUSH
13468: LD_STRING DH-Surrender-a-28
13470: PPUSH
13471: CALL_OW 88
// Say ( Heike , DH-Surrender-a-29 ) ;
13475: LD_EXP 15
13479: PPUSH
13480: LD_STRING DH-Surrender-a-29
13482: PPUSH
13483: CALL_OW 88
// Say ( Heike , DH-Surrender-a-30 ) ;
13487: LD_EXP 15
13491: PPUSH
13492: LD_STRING DH-Surrender-a-30
13494: PPUSH
13495: CALL_OW 88
// end ; PrepareRussianFirstWaveAttack ;
13499: CALL 15508 0 0
// AgressiveMove ( FilterAllUnits ( [ f_side , 3 ] ) , [ [ 176 , 123 ] ] ) ;
13503: LD_INT 22
13505: PUSH
13506: LD_INT 3
13508: PUSH
13509: EMPTY
13510: LIST
13511: LIST
13512: PPUSH
13513: CALL_OW 69
13517: PPUSH
13518: LD_INT 176
13520: PUSH
13521: LD_INT 123
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PUSH
13528: EMPTY
13529: LIST
13530: PPUSH
13531: CALL 57606 0 2
// PlaceSeeing ( 190 , 150 , 2 , - 8 ) ;
13535: LD_INT 190
13537: PPUSH
13538: LD_INT 150
13540: PPUSH
13541: LD_INT 2
13543: PPUSH
13544: LD_INT 8
13546: NEG
13547: PPUSH
13548: CALL_OW 330
// CenterOnXY ( 193 , 150 ) ;
13552: LD_INT 193
13554: PPUSH
13555: LD_INT 150
13557: PPUSH
13558: CALL_OW 84
// if IsOk ( Markov ) then
13562: LD_EXP 22
13566: PPUSH
13567: CALL_OW 302
13571: IFFALSE 13587
// Say ( Markov , DMar-Surrender-31 ) else
13573: LD_EXP 22
13577: PPUSH
13578: LD_STRING DMar-Surrender-31
13580: PPUSH
13581: CALL_OW 88
13585: GO 13644
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Surrender-a-31 ) then
13587: LD_EXP 27
13591: PPUSH
13592: LD_INT 26
13594: PUSH
13595: LD_INT 1
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: PPUSH
13602: CALL_OW 72
13606: PPUSH
13607: LD_STRING DArm-Surrender-a-31
13609: PPUSH
13610: CALL 224 0 2
13614: NOT
13615: IFFALSE 13644
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Surrender-a-31 ) ;
13617: LD_EXP 27
13621: PPUSH
13622: LD_INT 26
13624: PUSH
13625: LD_INT 2
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: PPUSH
13632: CALL_OW 72
13636: PPUSH
13637: LD_STRING DArf-Surrender-a-31
13639: PPUSH
13640: CALL 224 0 2
// Say ( Heike , DH-Surrender-32 ) ;
13644: LD_EXP 15
13648: PPUSH
13649: LD_STRING DH-Surrender-32
13651: PPUSH
13652: CALL_OW 88
// InGameOff ;
13656: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
13660: LD_STRING M2
13662: PPUSH
13663: CALL_OW 337
// wait ( 0 0$20 ) ;
13667: LD_INT 700
13669: PPUSH
13670: CALL_OW 67
// PrepareRussianLastWaveAttack ;
13674: CALL 15870 0 0
// russianAttack := true ;
13678: LD_ADDR_EXP 8
13682: PUSH
13683: LD_INT 1
13685: ST_TO_ADDR
// RemoveSeeing ( 190 , 150 , 2 ) ;
13686: LD_INT 190
13688: PPUSH
13689: LD_INT 150
13691: PPUSH
13692: LD_INT 2
13694: PPUSH
13695: CALL_OW 331
// end ;
13699: PPOPN 3
13701: END
// every 0 0$3 trigger seeHeavyGun and not InBattle ( 2 ) and IsOk ( Heike ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) and ( IsOk ( Markov ) or UnitFilter ( heikeSecondSquad , [ f_ok ] ) ) do
13702: LD_EXP 11
13706: IFFALSE 13718
13708: PUSH
13709: LD_INT 2
13711: PPUSH
13712: CALL_OW 463
13716: NOT
13717: AND
13718: IFFALSE 13731
13720: PUSH
13721: LD_EXP 15
13725: PPUSH
13726: CALL_OW 302
13730: AND
13731: IFFALSE 13763
13733: PUSH
13734: LD_INT 22
13736: PUSH
13737: LD_INT 2
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PUSH
13744: LD_INT 30
13746: PUSH
13747: LD_INT 3
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: PPUSH
13758: CALL_OW 69
13762: AND
13763: IFFALSE 13795
13765: PUSH
13766: LD_EXP 22
13770: PPUSH
13771: CALL_OW 302
13775: IFTRUE 13794
13777: PUSH
13778: LD_EXP 27
13782: PPUSH
13783: LD_INT 50
13785: PUSH
13786: EMPTY
13787: LIST
13788: PPUSH
13789: CALL_OW 72
13793: OR
13794: AND
13795: IFFALSE 14023
13797: GO 13799
13799: DISABLE
// begin DialogueOn ;
13800: CALL_OW 6
// Say ( Heike , DH-Heavy-1 ) ;
13804: LD_EXP 15
13808: PPUSH
13809: LD_STRING DH-Heavy-1
13811: PPUSH
13812: CALL_OW 88
// if IsOk ( Markov ) then
13816: LD_EXP 22
13820: PPUSH
13821: CALL_OW 302
13825: IFFALSE 13950
// begin Say ( Markov , DMar-Heavy-2 ) ;
13827: LD_EXP 22
13831: PPUSH
13832: LD_STRING DMar-Heavy-2
13834: PPUSH
13835: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
13839: LD_INT 22
13841: PUSH
13842: LD_INT 2
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: PUSH
13849: LD_INT 30
13851: PUSH
13852: LD_INT 3
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: PPUSH
13863: CALL_OW 69
13867: PUSH
13868: LD_INT 1
13870: ARRAY
13871: PPUSH
13872: CALL_OW 87
// Say ( Markov , DMar-Heavy-3 ) ;
13876: LD_EXP 22
13880: PPUSH
13881: LD_STRING DMar-Heavy-3
13883: PPUSH
13884: CALL_OW 88
// Say ( Markov , DMar-Heavy-4 ) ;
13888: LD_EXP 22
13892: PPUSH
13893: LD_STRING DMar-Heavy-4
13895: PPUSH
13896: CALL_OW 88
// Say ( Markov , DMar-Heavy-5 ) ;
13900: LD_EXP 22
13904: PPUSH
13905: LD_STRING DMar-Heavy-5
13907: PPUSH
13908: CALL_OW 88
// Say ( Markov , DMar-Heavy-6 ) ;
13912: LD_EXP 22
13916: PPUSH
13917: LD_STRING DMar-Heavy-6
13919: PPUSH
13920: CALL_OW 88
// Say ( Heike , DH-Heavy-7 ) ;
13924: LD_EXP 15
13928: PPUSH
13929: LD_STRING DH-Heavy-7
13931: PPUSH
13932: CALL_OW 88
// Say ( Heike , DH-Heavy-8 ) ;
13936: LD_EXP 15
13940: PPUSH
13941: LD_STRING DH-Heavy-8
13943: PPUSH
13944: CALL_OW 88
// end else
13948: GO 14007
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Heavy-a-2 ) then
13950: LD_EXP 27
13954: PPUSH
13955: LD_INT 26
13957: PUSH
13958: LD_INT 1
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: PPUSH
13965: CALL_OW 72
13969: PPUSH
13970: LD_STRING DArm-Heavy-a-2
13972: PPUSH
13973: CALL 224 0 2
13977: NOT
13978: IFFALSE 14007
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Heavy-a-2 ) ;
13980: LD_EXP 27
13984: PPUSH
13985: LD_INT 26
13987: PUSH
13988: LD_INT 2
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: PPUSH
13995: CALL_OW 72
13999: PPUSH
14000: LD_STRING DArf-Heavy-a-2
14002: PPUSH
14003: CALL 224 0 2
// end ; Say ( Heike , DH-Heavy-9 ) ;
14007: LD_EXP 15
14011: PPUSH
14012: LD_STRING DH-Heavy-9
14014: PPUSH
14015: CALL_OW 88
// DialogueOff ;
14019: CALL_OW 7
// end ;
14023: END
// every 0 0$2 trigger UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) and IsOk ( Heike ) and not usSurrender do
14024: LD_EXP 34
14028: PPUSH
14029: LD_INT 101
14031: PUSH
14032: LD_INT 2
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PPUSH
14039: CALL_OW 72
14043: IFFALSE 14056
14045: PUSH
14046: LD_EXP 15
14050: PPUSH
14051: CALL_OW 302
14055: AND
14056: IFFALSE 14065
14058: PUSH
14059: LD_EXP 7
14063: NOT
14064: AND
14065: IFFALSE 14208
14067: GO 14069
14069: DISABLE
// begin DialogueOn ;
14070: CALL_OW 6
// CenterNowOnUnits ( UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) ) ;
14074: LD_EXP 34
14078: PPUSH
14079: LD_INT 101
14081: PUSH
14082: LD_INT 2
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PPUSH
14089: CALL_OW 72
14093: PPUSH
14094: CALL_OW 87
// Say ( Heike , DH-Flank-1 ) ;
14098: LD_EXP 15
14102: PPUSH
14103: LD_STRING DH-Flank-1
14105: PPUSH
14106: CALL_OW 88
// if IsOk ( Mike ) then
14110: LD_EXP 17
14114: PPUSH
14115: CALL_OW 302
14119: IFFALSE 14135
// Say ( Mike , DM-Flank-2 ) else
14121: LD_EXP 17
14125: PPUSH
14126: LD_STRING DM-Flank-2
14128: PPUSH
14129: CALL_OW 88
14133: GO 14192
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Flank-a-2 ) then
14135: LD_EXP 27
14139: PPUSH
14140: LD_INT 26
14142: PUSH
14143: LD_INT 1
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: PPUSH
14150: CALL_OW 72
14154: PPUSH
14155: LD_STRING DArm-Flank-a-2
14157: PPUSH
14158: CALL 224 0 2
14162: NOT
14163: IFFALSE 14192
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArm-Flank-a-2 ) ;
14165: LD_EXP 27
14169: PPUSH
14170: LD_INT 26
14172: PUSH
14173: LD_INT 2
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: PPUSH
14180: CALL_OW 72
14184: PPUSH
14185: LD_STRING DArm-Flank-a-2
14187: PPUSH
14188: CALL 224 0 2
// Say ( Heike , DH-Flank-3 ) ;
14192: LD_EXP 15
14196: PPUSH
14197: LD_STRING DH-Flank-3
14199: PPUSH
14200: CALL_OW 88
// DialogueOff ;
14204: CALL_OW 7
// end ;
14208: END
// every 0 0$3 trigger seeRemoteVehicle and not usSurrender do
14209: LD_EXP 10
14213: IFFALSE 14222
14215: PUSH
14216: LD_EXP 7
14220: NOT
14221: AND
14222: IFFALSE 14446
14224: GO 14226
14226: DISABLE
// begin DialogueOn ;
14227: CALL_OW 6
// Say ( Heike , DH-USRC-1 ) ;
14231: LD_EXP 15
14235: PPUSH
14236: LD_STRING DH-USRC-1
14238: PPUSH
14239: CALL_OW 88
// if IsOk ( Markov ) then
14243: LD_EXP 22
14247: PPUSH
14248: CALL_OW 302
14252: IFFALSE 14268
// Say ( Markov , DMar-USRC-2 ) else
14254: LD_EXP 22
14258: PPUSH
14259: LD_STRING DMar-USRC-2
14261: PPUSH
14262: CALL_OW 88
14266: GO 14325
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-USRC-a-2 ) then
14268: LD_EXP 27
14272: PPUSH
14273: LD_INT 26
14275: PUSH
14276: LD_INT 1
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PPUSH
14283: CALL_OW 72
14287: PPUSH
14288: LD_STRING DArm-USRC-a-2
14290: PPUSH
14291: CALL 224 0 2
14295: NOT
14296: IFFALSE 14325
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-USRC-a-2 ) ;
14298: LD_EXP 27
14302: PPUSH
14303: LD_INT 26
14305: PUSH
14306: LD_INT 2
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: PPUSH
14313: CALL_OW 72
14317: PPUSH
14318: LD_STRING DArf-USRC-a-2
14320: PPUSH
14321: CALL 224 0 2
// DialogueOff ;
14325: CALL_OW 7
// wait ( 0 0$10 ) ;
14329: LD_INT 350
14331: PPUSH
14332: CALL_OW 67
// Say ( Heike , DH-USRC-3 ) ;
14336: LD_EXP 15
14340: PPUSH
14341: LD_STRING DH-USRC-3
14343: PPUSH
14344: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14348: LD_INT 35
14350: PPUSH
14351: CALL_OW 67
// until See ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
14355: LD_INT 2
14357: PPUSH
14358: LD_INT 22
14360: PUSH
14361: LD_INT 1
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: PUSH
14368: LD_INT 30
14370: PUSH
14371: LD_INT 36
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: PPUSH
14382: CALL_OW 69
14386: PUSH
14387: LD_INT 1
14389: ARRAY
14390: PPUSH
14391: CALL_OW 292
14395: IFFALSE 14348
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
14397: LD_INT 22
14399: PUSH
14400: LD_INT 1
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: PUSH
14407: LD_INT 30
14409: PUSH
14410: LD_INT 36
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PPUSH
14421: CALL_OW 69
14425: PUSH
14426: LD_INT 1
14428: ARRAY
14429: PPUSH
14430: CALL_OW 87
// Say ( Heike , DH-USRCFound-1 ) ;
14434: LD_EXP 15
14438: PPUSH
14439: LD_STRING DH-USRCFound-1
14441: PPUSH
14442: CALL_OW 88
// end ;
14446: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
14447: LD_EXP 20
14451: PPUSH
14452: CALL_OW 256
14456: PUSH
14457: LD_INT 3
14459: LESS
14460: IFFALSE 14497
14462: GO 14464
14464: DISABLE
// begin DialogueOn ;
14465: CALL_OW 6
// ForceSay ( Kaia , DK-Dead-1 ) ;
14469: LD_EXP 20
14473: PPUSH
14474: LD_STRING DK-Dead-1
14476: PPUSH
14477: CALL_OW 91
// ForceSay ( Kaia , DK-Dead-2 ) ;
14481: LD_EXP 20
14485: PPUSH
14486: LD_STRING DK-Dead-2
14488: PPUSH
14489: CALL_OW 91
// DialogueOff ;
14493: CALL_OW 7
// end ;
14497: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_bweapon , ar_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] ] ] ) do
14498: LD_INT 22
14500: PUSH
14501: LD_INT 2
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: PUSH
14508: LD_INT 2
14510: PUSH
14511: LD_INT 35
14513: PUSH
14514: LD_INT 28
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: PUSH
14521: LD_INT 34
14523: PUSH
14524: LD_INT 28
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: LIST
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: PPUSH
14540: CALL_OW 69
14544: IFFALSE 14557
14546: GO 14548
14548: DISABLE
// hasRockets := true ;
14549: LD_ADDR_EXP 9
14553: PUSH
14554: LD_INT 1
14556: ST_TO_ADDR
14557: END
// every 0 0$1 trigger russianAttack and not FilterAllUnits ( [ f_side , 3 ] ) do
14558: LD_EXP 8
14562: IFFALSE 14581
14564: PUSH
14565: LD_INT 22
14567: PUSH
14568: LD_INT 3
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: PPUSH
14575: CALL_OW 69
14579: NOT
14580: AND
14581: IFFALSE 15243
14583: GO 14585
14585: DISABLE
// begin DialogueOn ;
14586: CALL_OW 6
// if vehLossCounter = 0 then
14590: LD_EXP 14
14594: PUSH
14595: LD_INT 0
14597: EQUAL
14598: IFFALSE 14607
// SetAchievement ( ACH_UNTOUCH ) ;
14600: LD_STRING ACH_UNTOUCH
14602: PPUSH
14603: CALL_OW 543
// if tick < 35 35$00 then
14607: LD_OWVAR 1
14611: PUSH
14612: LD_INT 73500
14614: LESS
14615: IFFALSE 14624
// SetAchievement ( ACH_HSPEED_7 ) ;
14617: LD_STRING ACH_HSPEED_7
14619: PPUSH
14620: CALL_OW 543
// CenterNowOnUnits ( Heike ) ;
14624: LD_EXP 15
14628: PPUSH
14629: CALL_OW 87
// Say ( Heike , DH-End-1 ) ;
14633: LD_EXP 15
14637: PPUSH
14638: LD_STRING DH-End-1
14640: PPUSH
14641: CALL_OW 88
// SayRadio ( Shariff , DShar-End-2 ) ;
14645: LD_EXP 23
14649: PPUSH
14650: LD_STRING DShar-End-2
14652: PPUSH
14653: CALL_OW 94
// Say ( Kaia , DK-End-3 ) ;
14657: LD_EXP 20
14661: PPUSH
14662: LD_STRING DK-End-3
14664: PPUSH
14665: CALL_OW 88
// Say ( Heike , DH-End-4 ) ;
14669: LD_EXP 15
14673: PPUSH
14674: LD_STRING DH-End-4
14676: PPUSH
14677: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
14681: LD_EXP 23
14685: PPUSH
14686: LD_STRING DShar-End-5
14688: PPUSH
14689: CALL_OW 94
// if IsOk ( Markov ) then
14693: LD_EXP 22
14697: PPUSH
14698: CALL_OW 302
14702: IFFALSE 14716
// Say ( Kaia , DK-End-6 ) ;
14704: LD_EXP 20
14708: PPUSH
14709: LD_STRING DK-End-6
14711: PPUSH
14712: CALL_OW 88
// Say ( Kaia , DK-End-7 ) ;
14716: LD_EXP 20
14720: PPUSH
14721: LD_STRING DK-End-7
14723: PPUSH
14724: CALL_OW 88
// if IsOk ( Kaia ) then
14728: LD_EXP 20
14732: PPUSH
14733: CALL_OW 302
14737: IFFALSE 14775
// begin Say ( Givi , DG-End-8 ) ;
14739: LD_EXP 16
14743: PPUSH
14744: LD_STRING DG-End-8
14746: PPUSH
14747: CALL_OW 88
// Say ( Givi , DG-End-9 ) ;
14751: LD_EXP 16
14755: PPUSH
14756: LD_STRING DG-End-9
14758: PPUSH
14759: CALL_OW 88
// Say ( Heike , DH-End-10 ) ;
14763: LD_EXP 15
14767: PPUSH
14768: LD_STRING DH-End-10
14770: PPUSH
14771: CALL_OW 88
// end ; Say ( Heike , DH-End-11 ) ;
14775: LD_EXP 15
14779: PPUSH
14780: LD_STRING DH-End-11
14782: PPUSH
14783: CALL_OW 88
// if GetTech ( tech_MatDet , 2 ) = state_researched then
14787: LD_INT 7
14789: PPUSH
14790: LD_INT 2
14792: PPUSH
14793: CALL_OW 321
14797: PUSH
14798: LD_INT 2
14800: EQUAL
14801: IFFALSE 14815
// AddMedal ( med1 , 1 ) else
14803: LD_STRING med1
14805: PPUSH
14806: LD_INT 1
14808: PPUSH
14809: CALL_OW 101
14813: GO 14826
// AddMedal ( med1 , - 1 ) ;
14815: LD_STRING med1
14817: PPUSH
14818: LD_INT 1
14820: NEG
14821: PPUSH
14822: CALL_OW 101
// if hasRockets then
14826: LD_EXP 9
14830: IFFALSE 14844
// AddMedal ( med2 , 1 ) else
14832: LD_STRING med2
14834: PPUSH
14835: LD_INT 1
14837: PPUSH
14838: CALL_OW 101
14842: GO 14855
// AddMedal ( med2 , - 1 ) ;
14844: LD_STRING med2
14846: PPUSH
14847: LD_INT 1
14849: NEG
14850: PPUSH
14851: CALL_OW 101
// if tick < [ 50 50$00 , 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
14855: LD_OWVAR 1
14859: PUSH
14860: LD_INT 105000
14862: PUSH
14863: LD_INT 94500
14865: PUSH
14866: LD_INT 84000
14868: PUSH
14869: LD_INT 73500
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: PUSH
14878: LD_OWVAR 67
14882: ARRAY
14883: LESS
14884: IFFALSE 14898
// AddMedal ( med3 , 1 ) else
14886: LD_STRING med3
14888: PPUSH
14889: LD_INT 1
14891: PPUSH
14892: CALL_OW 101
14896: GO 14909
// AddMedal ( med3 , - 1 ) ;
14898: LD_STRING med3
14900: PPUSH
14901: LD_INT 1
14903: NEG
14904: PPUSH
14905: CALL_OW 101
// GiveMedals ( MAIN ) ;
14909: LD_STRING MAIN
14911: PPUSH
14912: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
14916: LD_INT 22
14918: PUSH
14919: LD_INT 2
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: PUSH
14926: LD_INT 23
14928: PUSH
14929: LD_INT 2
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: PUSH
14936: LD_INT 21
14938: PUSH
14939: LD_INT 1
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: LIST
14950: PPUSH
14951: CALL_OW 69
14955: PPUSH
14956: CALL_OW 43
// SaveCharacters ( usCommander , 07_UsCommander ) ;
14960: LD_EXP 30
14964: PPUSH
14965: LD_STRING 07_UsCommander
14967: PPUSH
14968: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff usCommander , 07_Americans ) ;
14972: LD_INT 22
14974: PUSH
14975: LD_INT 1
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PUSH
14982: LD_INT 23
14984: PUSH
14985: LD_INT 1
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PUSH
14992: LD_INT 21
14994: PUSH
14995: LD_INT 1
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: LIST
15006: PPUSH
15007: CALL_OW 69
15011: PUSH
15012: LD_EXP 30
15016: DIFF
15017: PPUSH
15018: LD_STRING 07_Americans
15020: PPUSH
15021: CALL_OW 38
// SaveCharacters ( Heike , 07_Heike ) ;
15025: LD_EXP 15
15029: PPUSH
15030: LD_STRING 07_Heike
15032: PPUSH
15033: CALL_OW 38
// if Aviradze then
15037: LD_EXP 26
15041: IFFALSE 15055
// SaveCharacters ( Aviradze , 07_Aviradze ) ;
15043: LD_EXP 26
15047: PPUSH
15048: LD_STRING 07_Aviradze
15050: PPUSH
15051: CALL_OW 38
// if Ibrahim then
15055: LD_EXP 18
15059: IFFALSE 15073
// SaveCharacters ( Ibrahim , 07_Ibrahim ) ;
15061: LD_EXP 18
15065: PPUSH
15066: LD_STRING 07_Ibrahim
15068: PPUSH
15069: CALL_OW 38
// if Kamil then
15073: LD_EXP 19
15077: IFFALSE 15091
// SaveCharacters ( Kamil , 07_Kamil ) ;
15079: LD_EXP 19
15083: PPUSH
15084: LD_STRING 07_Kamil
15086: PPUSH
15087: CALL_OW 38
// if Sophia then
15091: LD_EXP 21
15095: IFFALSE 15109
// SaveCharacters ( Sophia , 07_Sophia ) ;
15097: LD_EXP 21
15101: PPUSH
15102: LD_STRING 07_Sophia
15104: PPUSH
15105: CALL_OW 38
// if Kaia then
15109: LD_EXP 20
15113: IFFALSE 15127
// SaveCharacters ( Kaia , 07_Kaia ) ;
15115: LD_EXP 20
15119: PPUSH
15120: LD_STRING 07_Kaia
15122: PPUSH
15123: CALL_OW 38
// if Givi then
15127: LD_EXP 16
15131: IFFALSE 15145
// SaveCharacters ( Givi , 07_Givi ) ;
15133: LD_EXP 16
15137: PPUSH
15138: LD_STRING 07_Givi
15140: PPUSH
15141: CALL_OW 38
// if Mike then
15145: LD_EXP 17
15149: IFFALSE 15163
// SaveCharacters ( Mike , 07_Mike ) ;
15151: LD_EXP 17
15155: PPUSH
15156: LD_STRING 07_Mike
15158: PPUSH
15159: CALL_OW 38
// if Markov then
15163: LD_EXP 22
15167: IFFALSE 15181
// SaveCharacters ( Markov , 07_Markov ) ;
15169: LD_EXP 22
15173: PPUSH
15174: LD_STRING 07_Markov
15176: PPUSH
15177: CALL_OW 38
// if Kurt then
15181: LD_EXP 25
15185: IFFALSE 15199
// SaveCharacters ( Kurt , 07_Kurt ) ;
15187: LD_EXP 25
15191: PPUSH
15192: LD_STRING 07_Kurt
15194: PPUSH
15195: CALL_OW 38
// if Olaf then
15199: LD_EXP 24
15203: IFFALSE 15217
// SaveCharacters ( Olaf , 07_Olaf ) ;
15205: LD_EXP 24
15209: PPUSH
15210: LD_STRING 07_Olaf
15212: PPUSH
15213: CALL_OW 38
// if heikeSecondSquad then
15217: LD_EXP 27
15221: IFFALSE 15235
// SaveCharacters ( heikeSecondSquad , 07_others ) ;
15223: LD_EXP 27
15227: PPUSH
15228: LD_STRING 07_others
15230: PPUSH
15231: CALL_OW 38
// YouWin ;
15235: CALL_OW 103
// DialogueOff ;
15239: CALL_OW 7
// end ; end_of_file
15243: END
// every 1 1$20 + 0 0$40 trigger GetResourceArea ( cratesRiverArea , mat_cans ) < [ 12 , 10 , 8 , 8 ] [ Difficulty ] do
15244: LD_INT 7
15246: PPUSH
15247: LD_INT 1
15249: PPUSH
15250: CALL_OW 287
15254: PUSH
15255: LD_INT 12
15257: PUSH
15258: LD_INT 10
15260: PUSH
15261: LD_INT 8
15263: PUSH
15264: LD_INT 8
15266: PUSH
15267: EMPTY
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: PUSH
15273: LD_OWVAR 67
15277: ARRAY
15278: LESS
15279: IFFALSE 15306
15281: GO 15283
15283: DISABLE
// begin enable ;
15284: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesRiverArea , true ) ;
15285: LD_INT 1
15287: PPUSH
15288: LD_INT 5
15290: PPUSH
15291: CALL_OW 12
15295: PPUSH
15296: LD_INT 7
15298: PPUSH
15299: LD_INT 1
15301: PPUSH
15302: CALL_OW 55
// end ;
15306: END
// every 0 0$40 + 0 0$40 trigger GetResourceArea ( cratesForestArea , mat_cans ) < [ 25 , 22 , 17 , 14 ] [ Difficulty ] and tick < 24 24$00 do
15307: LD_INT 8
15309: PPUSH
15310: LD_INT 1
15312: PPUSH
15313: CALL_OW 287
15317: PUSH
15318: LD_INT 25
15320: PUSH
15321: LD_INT 22
15323: PUSH
15324: LD_INT 17
15326: PUSH
15327: LD_INT 14
15329: PUSH
15330: EMPTY
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: PUSH
15336: LD_OWVAR 67
15340: ARRAY
15341: LESS
15342: IFFALSE 15354
15344: PUSH
15345: LD_OWVAR 1
15349: PUSH
15350: LD_INT 50400
15352: LESS
15353: AND
15354: IFFALSE 15381
15356: GO 15358
15358: DISABLE
// begin enable ;
15359: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesForestArea , true ) ;
15360: LD_INT 1
15362: PPUSH
15363: LD_INT 5
15365: PPUSH
15366: CALL_OW 12
15370: PPUSH
15371: LD_INT 8
15373: PPUSH
15374: LD_INT 1
15376: PPUSH
15377: CALL_OW 55
// end ;
15381: END
// every 0 0$40 trigger tick < 8 8$10 do
15382: LD_OWVAR 1
15386: PUSH
15387: LD_INT 17150
15389: LESS
15390: IFFALSE 15423
15392: GO 15394
15394: DISABLE
// begin enable ;
15395: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 130 , 18 , 12 , true ) ;
15396: LD_INT 1
15398: PPUSH
15399: LD_INT 5
15401: PPUSH
15402: CALL_OW 12
15406: PPUSH
15407: LD_INT 130
15409: PPUSH
15410: LD_INT 18
15412: PPUSH
15413: LD_INT 12
15415: PPUSH
15416: LD_INT 1
15418: PPUSH
15419: CALL_OW 56
// end ;
15423: END
// every 1 1$00 + 0 0$30 trigger tick < 6 6$10 do
15424: LD_OWVAR 1
15428: PUSH
15429: LD_INT 12950
15431: LESS
15432: IFFALSE 15465
15434: GO 15436
15436: DISABLE
// begin enable ;
15437: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 172 , 97 , 12 , true ) ;
15438: LD_INT 1
15440: PPUSH
15441: LD_INT 5
15443: PPUSH
15444: CALL_OW 12
15448: PPUSH
15449: LD_INT 172
15451: PPUSH
15452: LD_INT 97
15454: PPUSH
15455: LD_INT 12
15457: PPUSH
15458: LD_INT 1
15460: PPUSH
15461: CALL_OW 56
// end ;
15465: END
// every 2 2$20 trigger GetResourceArea ( americanCratesArea , mat_cans ) < 6 do
15466: LD_INT 20
15468: PPUSH
15469: LD_INT 1
15471: PPUSH
15472: CALL_OW 287
15476: PUSH
15477: LD_INT 6
15479: LESS
15480: IFFALSE 15507
15482: GO 15484
15484: DISABLE
// begin enable ;
15485: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , americanCratesArea , true ) ;
15486: LD_INT 1
15488: PPUSH
15489: LD_INT 5
15491: PPUSH
15492: CALL_OW 12
15496: PPUSH
15497: LD_INT 20
15499: PPUSH
15500: LD_INT 1
15502: PPUSH
15503: CALL_OW 55
// end ; end_of_file
15507: END
// export function PrepareRussianFirstWaveAttack ; var i , tmp , un , veh ; begin
15508: LD_INT 0
15510: PPUSH
15511: PPUSH
15512: PPUSH
15513: PPUSH
15514: PPUSH
// uc_side := 3 ;
15515: LD_ADDR_OWVAR 20
15519: PUSH
15520: LD_INT 3
15522: ST_TO_ADDR
// uc_nation := 3 ;
15523: LD_ADDR_OWVAR 21
15527: PUSH
15528: LD_INT 3
15530: ST_TO_ADDR
// tmp := [ [ 184 , 144 , 5 ] , [ 191 , 147 , 5 ] , [ 202 , 151 , 4 ] , [ 210 , 152 , 4 ] ] ;
15531: LD_ADDR_VAR 0 3
15535: PUSH
15536: LD_INT 184
15538: PUSH
15539: LD_INT 144
15541: PUSH
15542: LD_INT 5
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: LIST
15549: PUSH
15550: LD_INT 191
15552: PUSH
15553: LD_INT 147
15555: PUSH
15556: LD_INT 5
15558: PUSH
15559: EMPTY
15560: LIST
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 202
15566: PUSH
15567: LD_INT 151
15569: PUSH
15570: LD_INT 4
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: LIST
15577: PUSH
15578: LD_INT 210
15580: PUSH
15581: LD_INT 152
15583: PUSH
15584: LD_INT 4
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: LIST
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: ST_TO_ADDR
// for i := 1 to 3 do
15598: LD_ADDR_VAR 0 2
15602: PUSH
15603: DOUBLE
15604: LD_INT 1
15606: DEC
15607: ST_TO_ADDR
15608: LD_INT 3
15610: PUSH
15611: FOR_TO
15612: IFFALSE 15781
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_gun ] [ i mod 3 + 1 ] , 40 ) ;
15614: LD_INT 24
15616: PPUSH
15617: LD_INT 1
15619: PPUSH
15620: LD_INT 1
15622: PPUSH
15623: LD_INT 43
15625: PUSH
15626: LD_INT 44
15628: PUSH
15629: LD_INT 46
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: LIST
15636: PUSH
15637: LD_VAR 0 2
15641: PUSH
15642: LD_INT 3
15644: MOD
15645: PUSH
15646: LD_INT 1
15648: PLUS
15649: ARRAY
15650: PPUSH
15651: LD_INT 40
15653: PPUSH
15654: CALL 21670 0 5
// veh := CreateVehicle ;
15658: LD_ADDR_VAR 0 5
15662: PUSH
15663: CALL_OW 45
15667: ST_TO_ADDR
// SetDir ( veh , tmp [ i ] [ 3 ] ) ;
15668: LD_VAR 0 5
15672: PPUSH
15673: LD_VAR 0 3
15677: PUSH
15678: LD_VAR 0 2
15682: ARRAY
15683: PUSH
15684: LD_INT 3
15686: ARRAY
15687: PPUSH
15688: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
15692: LD_VAR 0 5
15696: PPUSH
15697: LD_VAR 0 3
15701: PUSH
15702: LD_VAR 0 2
15706: ARRAY
15707: PUSH
15708: LD_INT 1
15710: ARRAY
15711: PPUSH
15712: LD_VAR 0 3
15716: PUSH
15717: LD_VAR 0 2
15721: ARRAY
15722: PUSH
15723: LD_INT 2
15725: ARRAY
15726: PPUSH
15727: LD_INT 0
15729: PPUSH
15730: CALL_OW 48
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
15734: LD_INT 0
15736: PPUSH
15737: LD_INT 6
15739: PUSH
15740: LD_INT 7
15742: PUSH
15743: LD_INT 8
15745: PUSH
15746: LD_INT 8
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: PUSH
15755: LD_OWVAR 67
15759: ARRAY
15760: PPUSH
15761: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
15765: CALL_OW 44
15769: PPUSH
15770: LD_VAR 0 5
15774: PPUSH
15775: CALL_OW 52
// end ;
15779: GO 15611
15781: POP
15782: POP
// for i := 1 to 4 do
15783: LD_ADDR_VAR 0 2
15787: PUSH
15788: DOUBLE
15789: LD_INT 1
15791: DEC
15792: ST_TO_ADDR
15793: LD_INT 4
15795: PUSH
15796: FOR_TO
15797: IFFALSE 15863
// begin PrepareSoldier ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
15799: LD_INT 0
15801: PPUSH
15802: LD_INT 6
15804: PUSH
15805: LD_INT 7
15807: PUSH
15808: LD_INT 8
15810: PUSH
15811: LD_INT 8
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: PUSH
15820: LD_OWVAR 67
15824: ARRAY
15825: PPUSH
15826: CALL_OW 381
// un := CreateHuman ;
15830: LD_ADDR_VAR 0 4
15834: PUSH
15835: CALL_OW 44
15839: ST_TO_ADDR
// PlaceUnitXYR ( un , 185 , 145 , 6 , false ) ;
15840: LD_VAR 0 4
15844: PPUSH
15845: LD_INT 185
15847: PPUSH
15848: LD_INT 145
15850: PPUSH
15851: LD_INT 6
15853: PPUSH
15854: LD_INT 0
15856: PPUSH
15857: CALL_OW 50
// end ;
15861: GO 15796
15863: POP
15864: POP
// end ;
15865: LD_VAR 0 1
15869: RET
// export function PrepareRussianLastWaveAttack ; var i , veh ; begin
15870: LD_INT 0
15872: PPUSH
15873: PPUSH
15874: PPUSH
// uc_side := 3 ;
15875: LD_ADDR_OWVAR 20
15879: PUSH
15880: LD_INT 3
15882: ST_TO_ADDR
// if Difficulty > 1 then
15883: LD_OWVAR 67
15887: PUSH
15888: LD_INT 1
15890: GREATER
15891: IFFALSE 16053
// begin uc_nation := 0 ;
15893: LD_ADDR_OWVAR 21
15897: PUSH
15898: LD_INT 0
15900: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty + 1 ] do
15901: LD_ADDR_VAR 0 2
15905: PUSH
15906: DOUBLE
15907: LD_INT 1
15909: DEC
15910: ST_TO_ADDR
15911: LD_INT 4
15913: PUSH
15914: LD_INT 5
15916: PUSH
15917: LD_INT 6
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: LIST
15924: PUSH
15925: LD_OWVAR 67
15929: PUSH
15930: LD_INT 1
15932: PLUS
15933: ARRAY
15934: PUSH
15935: FOR_TO
15936: IFFALSE 16051
// begin hc_class := class_apeman_soldier ;
15938: LD_ADDR_OWVAR 28
15942: PUSH
15943: LD_INT 15
15945: ST_TO_ADDR
// hc_gallery :=  ;
15946: LD_ADDR_OWVAR 33
15950: PUSH
15951: LD_STRING 
15953: ST_TO_ADDR
// hc_name := [ Treci , Ivan , Yaromir , Nadzieia , Krasna , Piaty ] [ rand ( 1 , 6 ) ] ;
15954: LD_ADDR_OWVAR 26
15958: PUSH
15959: LD_STRING Treci
15961: PUSH
15962: LD_STRING Ivan
15964: PUSH
15965: LD_STRING Yaromir
15967: PUSH
15968: LD_STRING Nadzieia
15970: PUSH
15971: LD_STRING Krasna
15973: PUSH
15974: LD_STRING Piaty
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: PUSH
15985: LD_INT 1
15987: PPUSH
15988: LD_INT 6
15990: PPUSH
15991: CALL_OW 12
15995: ARRAY
15996: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 0 , 0 ] ;
15997: LD_ADDR_OWVAR 31
16001: PUSH
16002: LD_INT 5
16004: PUSH
16005: LD_INT 0
16007: PUSH
16008: LD_INT 0
16010: PUSH
16011: LD_INT 0
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: ST_TO_ADDR
// hc_sex := sex_male ;
16020: LD_ADDR_OWVAR 27
16024: PUSH
16025: LD_INT 1
16027: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 178 , 148 , 6 , false ) ;
16028: CALL_OW 44
16032: PPUSH
16033: LD_INT 178
16035: PPUSH
16036: LD_INT 148
16038: PPUSH
16039: LD_INT 6
16041: PPUSH
16042: LD_INT 0
16044: PPUSH
16045: CALL_OW 50
// end ;
16049: GO 15935
16051: POP
16052: POP
// end ; for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
16053: LD_ADDR_VAR 0 2
16057: PUSH
16058: DOUBLE
16059: LD_INT 1
16061: DEC
16062: ST_TO_ADDR
16063: LD_INT 2
16065: PUSH
16066: LD_INT 3
16068: PUSH
16069: LD_INT 4
16071: PUSH
16072: LD_INT 5
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: PUSH
16081: LD_OWVAR 67
16085: ARRAY
16086: PUSH
16087: FOR_TO
16088: IFFALSE 16255
// begin uc_nation := 3 ;
16090: LD_ADDR_OWVAR 21
16094: PUSH
16095: LD_INT 3
16097: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gatling_gun , ru_gun ] [ i mod 3 + 1 ] , 44 ) ;
16098: LD_INT 22
16100: PPUSH
16101: LD_INT 1
16103: PPUSH
16104: LD_INT 1
16106: PPUSH
16107: LD_INT 45
16109: PUSH
16110: LD_INT 43
16112: PUSH
16113: LD_INT 44
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: LIST
16120: PUSH
16121: LD_VAR 0 2
16125: PUSH
16126: LD_INT 3
16128: MOD
16129: PUSH
16130: LD_INT 1
16132: PLUS
16133: ARRAY
16134: PPUSH
16135: LD_INT 44
16137: PPUSH
16138: CALL 21670 0 5
// veh := CreateVehicle ;
16142: LD_ADDR_VAR 0 3
16146: PUSH
16147: CALL_OW 45
16151: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
16152: LD_VAR 0 3
16156: PPUSH
16157: LD_INT 4
16159: PPUSH
16160: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
16164: LD_VAR 0 3
16168: PPUSH
16169: LD_INT 1
16171: PPUSH
16172: LD_INT 0
16174: PPUSH
16175: CALL_OW 49
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
16179: LD_INT 0
16181: PPUSH
16182: LD_INT 6
16184: PUSH
16185: LD_INT 7
16187: PUSH
16188: LD_INT 8
16190: PUSH
16191: LD_INT 8
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: PUSH
16200: LD_OWVAR 67
16204: ARRAY
16205: PPUSH
16206: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
16210: CALL_OW 44
16214: PPUSH
16215: LD_VAR 0 3
16219: PPUSH
16220: CALL_OW 52
// AgressiveMove ( veh , [ [ 178 , 137 ] ] ) ;
16224: LD_VAR 0 3
16228: PPUSH
16229: LD_INT 178
16231: PUSH
16232: LD_INT 137
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: EMPTY
16240: LIST
16241: PPUSH
16242: CALL 57606 0 2
// wait ( 0 0$2 ) ;
16246: LD_INT 70
16248: PPUSH
16249: CALL_OW 67
// end ;
16253: GO 16087
16255: POP
16256: POP
// end ;
16257: LD_VAR 0 1
16261: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i , tmp ;
16262: LD_INT 22
16264: PUSH
16265: LD_INT 3
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: LD_INT 32
16274: PUSH
16275: LD_INT 1
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PPUSH
16286: CALL_OW 69
16290: IFFALSE 16378
16292: GO 16294
16294: DISABLE
16295: LD_INT 0
16297: PPUSH
16298: PPUSH
// begin enable ;
16299: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) ;
16300: LD_ADDR_VAR 0 2
16304: PUSH
16305: LD_INT 22
16307: PUSH
16308: LD_INT 3
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: PUSH
16315: LD_INT 32
16317: PUSH
16318: LD_INT 1
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: PPUSH
16329: CALL_OW 69
16333: ST_TO_ADDR
// for i in tmp do
16334: LD_ADDR_VAR 0 1
16338: PUSH
16339: LD_VAR 0 2
16343: PUSH
16344: FOR_IN
16345: IFFALSE 16376
// if GetFuel ( i ) < 3 then
16347: LD_VAR 0 1
16351: PPUSH
16352: CALL_OW 261
16356: PUSH
16357: LD_INT 3
16359: LESS
16360: IFFALSE 16374
// SetFuel ( i , 3 ) ;
16362: LD_VAR 0 1
16366: PPUSH
16367: LD_INT 3
16369: PPUSH
16370: CALL_OW 240
16374: GO 16344
16376: POP
16377: POP
// end ;
16378: PPOPN 2
16380: END
// every 0 0$1 trigger russianAttack and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i , mech , tmp ;
16381: LD_EXP 8
16385: IFFALSE 16417
16387: PUSH
16388: LD_INT 22
16390: PUSH
16391: LD_INT 3
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: PUSH
16398: LD_INT 21
16400: PUSH
16401: LD_INT 1
16403: PUSH
16404: EMPTY
16405: LIST
16406: LIST
16407: PUSH
16408: EMPTY
16409: LIST
16410: LIST
16411: PPUSH
16412: CALL_OW 69
16416: AND
16417: IFFALSE 16681
16419: GO 16421
16421: DISABLE
16422: LD_INT 0
16424: PPUSH
16425: PPUSH
16426: PPUSH
// begin enable ;
16427: ENABLE
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] ] ) ;
16428: LD_ADDR_VAR 0 2
16432: PUSH
16433: LD_INT 22
16435: PUSH
16436: LD_INT 3
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: PUSH
16443: LD_INT 25
16445: PUSH
16446: LD_INT 3
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PUSH
16453: LD_INT 3
16455: PUSH
16456: LD_INT 55
16458: PUSH
16459: EMPTY
16460: LIST
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: LIST
16470: PPUSH
16471: CALL_OW 69
16475: ST_TO_ADDR
// if mech then
16476: LD_VAR 0 2
16480: IFFALSE 16550
// for i in mech do
16482: LD_ADDR_VAR 0 1
16486: PUSH
16487: LD_VAR 0 2
16491: PUSH
16492: FOR_IN
16493: IFFALSE 16548
// begin if IsInArea ( i , escapeArea ) then
16495: LD_VAR 0 1
16499: PPUSH
16500: LD_INT 13
16502: PPUSH
16503: CALL_OW 308
16507: IFFALSE 16520
// RemoveUnit ( i ) else
16509: LD_VAR 0 1
16513: PPUSH
16514: CALL_OW 64
16518: GO 16546
// if IsOk ( i ) then
16520: LD_VAR 0 1
16524: PPUSH
16525: CALL_OW 302
16529: IFFALSE 16546
// ComMoveXY ( i , 196 , 155 ) ;
16531: LD_VAR 0 1
16535: PPUSH
16536: LD_INT 196
16538: PPUSH
16539: LD_INT 155
16541: PPUSH
16542: CALL_OW 111
// end ;
16546: GO 16492
16548: POP
16549: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_apeman_soldier ] , [ f_type , unit_vehicle ] ] , [ f_ok ] ] ) ;
16550: LD_ADDR_VAR 0 3
16554: PUSH
16555: LD_INT 22
16557: PUSH
16558: LD_INT 3
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: PUSH
16565: LD_INT 2
16567: PUSH
16568: LD_INT 25
16570: PUSH
16571: LD_INT 1
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: PUSH
16578: LD_INT 25
16580: PUSH
16581: LD_INT 15
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: PUSH
16588: LD_INT 21
16590: PUSH
16591: LD_INT 2
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 50
16606: PUSH
16607: EMPTY
16608: LIST
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: LIST
16614: PPUSH
16615: CALL_OW 69
16619: ST_TO_ADDR
// if tmp then
16620: LD_VAR 0 3
16624: IFFALSE 16681
// AgressiveMove ( tmp , [ [ 171 , 106 ] , [ 145 , 69 ] , [ 132 , 38 ] , [ 126 , 15 ] ] ) ;
16626: LD_VAR 0 3
16630: PPUSH
16631: LD_INT 171
16633: PUSH
16634: LD_INT 106
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 145
16643: PUSH
16644: LD_INT 69
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: PUSH
16651: LD_INT 132
16653: PUSH
16654: LD_INT 38
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: PUSH
16661: LD_INT 126
16663: PUSH
16664: LD_INT 15
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: PPUSH
16677: CALL 57606 0 2
// end ; end_of_file
16681: PPOPN 3
16683: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16684: LD_INT 0
16686: PPUSH
16687: PPUSH
// if exist_mode then
16688: LD_VAR 0 2
16692: IFFALSE 16738
// begin unit := CreateCharacter ( prefix & ident ) ;
16694: LD_ADDR_VAR 0 5
16698: PUSH
16699: LD_VAR 0 3
16703: PUSH
16704: LD_VAR 0 1
16708: STR
16709: PPUSH
16710: CALL_OW 34
16714: ST_TO_ADDR
// if unit then
16715: LD_VAR 0 5
16719: IFFALSE 16736
// DeleteCharacters ( prefix & ident ) ;
16721: LD_VAR 0 3
16725: PUSH
16726: LD_VAR 0 1
16730: STR
16731: PPUSH
16732: CALL_OW 40
// end else
16736: GO 16753
// unit := NewCharacter ( ident ) ;
16738: LD_ADDR_VAR 0 5
16742: PUSH
16743: LD_VAR 0 1
16747: PPUSH
16748: CALL_OW 25
16752: ST_TO_ADDR
// result := unit ;
16753: LD_ADDR_VAR 0 4
16757: PUSH
16758: LD_VAR 0 5
16762: ST_TO_ADDR
// end ;
16763: LD_VAR 0 4
16767: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
16768: LD_INT 0
16770: PPUSH
16771: PPUSH
// if exist_mode then
16772: LD_VAR 0 2
16776: IFFALSE 16801
// unit := CreateCharacter ( prefix & ident ) else
16778: LD_ADDR_VAR 0 5
16782: PUSH
16783: LD_VAR 0 3
16787: PUSH
16788: LD_VAR 0 1
16792: STR
16793: PPUSH
16794: CALL_OW 34
16798: ST_TO_ADDR
16799: GO 16816
// unit := NewCharacter ( ident ) ;
16801: LD_ADDR_VAR 0 5
16805: PUSH
16806: LD_VAR 0 1
16810: PPUSH
16811: CALL_OW 25
16815: ST_TO_ADDR
// result := unit ;
16816: LD_ADDR_VAR 0 4
16820: PUSH
16821: LD_VAR 0 5
16825: ST_TO_ADDR
// end ;
16826: LD_VAR 0 4
16830: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16831: LD_INT 0
16833: PPUSH
16834: PPUSH
// if not side or not nation then
16835: LD_VAR 0 1
16839: NOT
16840: IFTRUE 16849
16842: PUSH
16843: LD_VAR 0 2
16847: NOT
16848: OR
16849: IFFALSE 16853
// exit ;
16851: GO 17647
// case nation of nation_american :
16853: LD_VAR 0 2
16857: PUSH
16858: LD_INT 1
16860: DOUBLE
16861: EQUAL
16862: IFTRUE 16866
16864: GO 17088
16866: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
16867: LD_ADDR_VAR 0 4
16871: PUSH
16872: LD_INT 35
16874: PUSH
16875: LD_INT 45
16877: PUSH
16878: LD_INT 46
16880: PUSH
16881: LD_INT 47
16883: PUSH
16884: LD_INT 82
16886: PUSH
16887: LD_INT 83
16889: PUSH
16890: LD_INT 84
16892: PUSH
16893: LD_INT 85
16895: PUSH
16896: LD_INT 86
16898: PUSH
16899: LD_INT 1
16901: PUSH
16902: LD_INT 2
16904: PUSH
16905: LD_INT 6
16907: PUSH
16908: LD_INT 15
16910: PUSH
16911: LD_INT 16
16913: PUSH
16914: LD_INT 7
16916: PUSH
16917: LD_INT 12
16919: PUSH
16920: LD_INT 13
16922: PUSH
16923: LD_INT 10
16925: PUSH
16926: LD_INT 14
16928: PUSH
16929: LD_INT 20
16931: PUSH
16932: LD_INT 21
16934: PUSH
16935: LD_INT 22
16937: PUSH
16938: LD_INT 25
16940: PUSH
16941: LD_INT 32
16943: PUSH
16944: LD_INT 27
16946: PUSH
16947: LD_INT 36
16949: PUSH
16950: LD_INT 69
16952: PUSH
16953: LD_INT 39
16955: PUSH
16956: LD_INT 34
16958: PUSH
16959: LD_INT 40
16961: PUSH
16962: LD_INT 48
16964: PUSH
16965: LD_INT 49
16967: PUSH
16968: LD_INT 50
16970: PUSH
16971: LD_INT 51
16973: PUSH
16974: LD_INT 52
16976: PUSH
16977: LD_INT 53
16979: PUSH
16980: LD_INT 54
16982: PUSH
16983: LD_INT 55
16985: PUSH
16986: LD_INT 56
16988: PUSH
16989: LD_INT 57
16991: PUSH
16992: LD_INT 58
16994: PUSH
16995: LD_INT 59
16997: PUSH
16998: LD_INT 60
17000: PUSH
17001: LD_INT 61
17003: PUSH
17004: LD_INT 62
17006: PUSH
17007: LD_INT 80
17009: PUSH
17010: LD_INT 82
17012: PUSH
17013: LD_INT 83
17015: PUSH
17016: LD_INT 84
17018: PUSH
17019: LD_INT 85
17021: PUSH
17022: LD_INT 86
17024: PUSH
17025: LD_INT 90
17027: PUSH
17028: LD_INT 93
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: ST_TO_ADDR
17086: GO 17569
17088: LD_INT 2
17090: DOUBLE
17091: EQUAL
17092: IFTRUE 17096
17094: GO 17330
17096: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
17097: LD_ADDR_VAR 0 4
17101: PUSH
17102: LD_INT 35
17104: PUSH
17105: LD_INT 45
17107: PUSH
17108: LD_INT 46
17110: PUSH
17111: LD_INT 47
17113: PUSH
17114: LD_INT 82
17116: PUSH
17117: LD_INT 83
17119: PUSH
17120: LD_INT 84
17122: PUSH
17123: LD_INT 85
17125: PUSH
17126: LD_INT 87
17128: PUSH
17129: LD_INT 70
17131: PUSH
17132: LD_INT 1
17134: PUSH
17135: LD_INT 11
17137: PUSH
17138: LD_INT 3
17140: PUSH
17141: LD_INT 4
17143: PUSH
17144: LD_INT 5
17146: PUSH
17147: LD_INT 6
17149: PUSH
17150: LD_INT 15
17152: PUSH
17153: LD_INT 18
17155: PUSH
17156: LD_INT 7
17158: PUSH
17159: LD_INT 17
17161: PUSH
17162: LD_INT 8
17164: PUSH
17165: LD_INT 20
17167: PUSH
17168: LD_INT 21
17170: PUSH
17171: LD_INT 22
17173: PUSH
17174: LD_INT 72
17176: PUSH
17177: LD_INT 26
17179: PUSH
17180: LD_INT 69
17182: PUSH
17183: LD_INT 39
17185: PUSH
17186: LD_INT 40
17188: PUSH
17189: LD_INT 41
17191: PUSH
17192: LD_INT 42
17194: PUSH
17195: LD_INT 43
17197: PUSH
17198: LD_INT 48
17200: PUSH
17201: LD_INT 49
17203: PUSH
17204: LD_INT 50
17206: PUSH
17207: LD_INT 51
17209: PUSH
17210: LD_INT 52
17212: PUSH
17213: LD_INT 53
17215: PUSH
17216: LD_INT 54
17218: PUSH
17219: LD_INT 55
17221: PUSH
17222: LD_INT 56
17224: PUSH
17225: LD_INT 60
17227: PUSH
17228: LD_INT 61
17230: PUSH
17231: LD_INT 62
17233: PUSH
17234: LD_INT 66
17236: PUSH
17237: LD_INT 67
17239: PUSH
17240: LD_INT 68
17242: PUSH
17243: LD_INT 81
17245: PUSH
17246: LD_INT 82
17248: PUSH
17249: LD_INT 83
17251: PUSH
17252: LD_INT 84
17254: PUSH
17255: LD_INT 85
17257: PUSH
17258: LD_INT 87
17260: PUSH
17261: LD_INT 88
17263: PUSH
17264: LD_INT 92
17266: PUSH
17267: LD_INT 94
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: ST_TO_ADDR
17328: GO 17569
17330: LD_INT 3
17332: DOUBLE
17333: EQUAL
17334: IFTRUE 17338
17336: GO 17568
17338: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
17339: LD_ADDR_VAR 0 4
17343: PUSH
17344: LD_INT 46
17346: PUSH
17347: LD_INT 47
17349: PUSH
17350: LD_INT 1
17352: PUSH
17353: LD_INT 2
17355: PUSH
17356: LD_INT 82
17358: PUSH
17359: LD_INT 83
17361: PUSH
17362: LD_INT 84
17364: PUSH
17365: LD_INT 85
17367: PUSH
17368: LD_INT 86
17370: PUSH
17371: LD_INT 11
17373: PUSH
17374: LD_INT 9
17376: PUSH
17377: LD_INT 20
17379: PUSH
17380: LD_INT 19
17382: PUSH
17383: LD_INT 21
17385: PUSH
17386: LD_INT 24
17388: PUSH
17389: LD_INT 22
17391: PUSH
17392: LD_INT 25
17394: PUSH
17395: LD_INT 28
17397: PUSH
17398: LD_INT 29
17400: PUSH
17401: LD_INT 30
17403: PUSH
17404: LD_INT 31
17406: PUSH
17407: LD_INT 37
17409: PUSH
17410: LD_INT 38
17412: PUSH
17413: LD_INT 32
17415: PUSH
17416: LD_INT 27
17418: PUSH
17419: LD_INT 33
17421: PUSH
17422: LD_INT 69
17424: PUSH
17425: LD_INT 39
17427: PUSH
17428: LD_INT 34
17430: PUSH
17431: LD_INT 40
17433: PUSH
17434: LD_INT 71
17436: PUSH
17437: LD_INT 23
17439: PUSH
17440: LD_INT 44
17442: PUSH
17443: LD_INT 48
17445: PUSH
17446: LD_INT 49
17448: PUSH
17449: LD_INT 50
17451: PUSH
17452: LD_INT 51
17454: PUSH
17455: LD_INT 52
17457: PUSH
17458: LD_INT 53
17460: PUSH
17461: LD_INT 54
17463: PUSH
17464: LD_INT 55
17466: PUSH
17467: LD_INT 56
17469: PUSH
17470: LD_INT 57
17472: PUSH
17473: LD_INT 58
17475: PUSH
17476: LD_INT 59
17478: PUSH
17479: LD_INT 63
17481: PUSH
17482: LD_INT 64
17484: PUSH
17485: LD_INT 65
17487: PUSH
17488: LD_INT 82
17490: PUSH
17491: LD_INT 83
17493: PUSH
17494: LD_INT 84
17496: PUSH
17497: LD_INT 85
17499: PUSH
17500: LD_INT 86
17502: PUSH
17503: LD_INT 89
17505: PUSH
17506: LD_INT 91
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: ST_TO_ADDR
17566: GO 17569
17568: POP
// if state > - 1 and state < 3 then
17569: LD_VAR 0 3
17573: PUSH
17574: LD_INT 1
17576: NEG
17577: GREATER
17578: IFFALSE 17590
17580: PUSH
17581: LD_VAR 0 3
17585: PUSH
17586: LD_INT 3
17588: LESS
17589: AND
17590: IFFALSE 17647
// for i in result do
17592: LD_ADDR_VAR 0 5
17596: PUSH
17597: LD_VAR 0 4
17601: PUSH
17602: FOR_IN
17603: IFFALSE 17645
// if GetTech ( i , side ) <> state then
17605: LD_VAR 0 5
17609: PPUSH
17610: LD_VAR 0 1
17614: PPUSH
17615: CALL_OW 321
17619: PUSH
17620: LD_VAR 0 3
17624: NONEQUAL
17625: IFFALSE 17643
// result := result diff i ;
17627: LD_ADDR_VAR 0 4
17631: PUSH
17632: LD_VAR 0 4
17636: PUSH
17637: LD_VAR 0 5
17641: DIFF
17642: ST_TO_ADDR
17643: GO 17602
17645: POP
17646: POP
// end ;
17647: LD_VAR 0 4
17651: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17652: LD_INT 0
17654: PPUSH
17655: PPUSH
17656: PPUSH
// result := true ;
17657: LD_ADDR_VAR 0 3
17661: PUSH
17662: LD_INT 1
17664: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17665: LD_ADDR_VAR 0 5
17669: PUSH
17670: LD_VAR 0 2
17674: PPUSH
17675: CALL_OW 480
17679: ST_TO_ADDR
// if not tmp then
17680: LD_VAR 0 5
17684: NOT
17685: IFFALSE 17689
// exit ;
17687: GO 17738
// for i in tmp do
17689: LD_ADDR_VAR 0 4
17693: PUSH
17694: LD_VAR 0 5
17698: PUSH
17699: FOR_IN
17700: IFFALSE 17736
// if GetTech ( i , side ) <> state_researched then
17702: LD_VAR 0 4
17706: PPUSH
17707: LD_VAR 0 1
17711: PPUSH
17712: CALL_OW 321
17716: PUSH
17717: LD_INT 2
17719: NONEQUAL
17720: IFFALSE 17734
// begin result := false ;
17722: LD_ADDR_VAR 0 3
17726: PUSH
17727: LD_INT 0
17729: ST_TO_ADDR
// exit ;
17730: POP
17731: POP
17732: GO 17738
// end ;
17734: GO 17699
17736: POP
17737: POP
// end ;
17738: LD_VAR 0 3
17742: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17743: LD_INT 0
17745: PPUSH
17746: PPUSH
17747: PPUSH
17748: PPUSH
17749: PPUSH
17750: PPUSH
17751: PPUSH
17752: PPUSH
17753: PPUSH
17754: PPUSH
17755: PPUSH
17756: PPUSH
17757: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17758: LD_VAR 0 1
17762: NOT
17763: IFTRUE 17780
17765: PUSH
17766: LD_VAR 0 1
17770: PPUSH
17771: CALL_OW 257
17775: PUSH
17776: LD_INT 9
17778: NONEQUAL
17779: OR
17780: IFFALSE 17784
// exit ;
17782: GO 18363
// side := GetSide ( unit ) ;
17784: LD_ADDR_VAR 0 9
17788: PUSH
17789: LD_VAR 0 1
17793: PPUSH
17794: CALL_OW 255
17798: ST_TO_ADDR
// tech_space := tech_spacanom ;
17799: LD_ADDR_VAR 0 12
17803: PUSH
17804: LD_INT 29
17806: ST_TO_ADDR
// tech_time := tech_taurad ;
17807: LD_ADDR_VAR 0 13
17811: PUSH
17812: LD_INT 28
17814: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17815: LD_ADDR_VAR 0 11
17819: PUSH
17820: LD_VAR 0 1
17824: PPUSH
17825: CALL_OW 310
17829: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17830: LD_VAR 0 11
17834: PPUSH
17835: CALL_OW 247
17839: PUSH
17840: LD_INT 2
17842: EQUAL
17843: IFFALSE 17847
// exit ;
17845: GO 18363
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17847: LD_ADDR_VAR 0 8
17851: PUSH
17852: LD_INT 81
17854: PUSH
17855: LD_VAR 0 9
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 3
17866: PUSH
17867: LD_INT 21
17869: PUSH
17870: LD_INT 3
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PPUSH
17885: CALL_OW 69
17889: ST_TO_ADDR
// if not tmp then
17890: LD_VAR 0 8
17894: NOT
17895: IFFALSE 17899
// exit ;
17897: GO 18363
// if in_unit then
17899: LD_VAR 0 11
17903: IFFALSE 17927
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
17905: LD_ADDR_VAR 0 10
17909: PUSH
17910: LD_VAR 0 8
17914: PPUSH
17915: LD_VAR 0 11
17919: PPUSH
17920: CALL_OW 74
17924: ST_TO_ADDR
17925: GO 17947
// enemy := NearestUnitToUnit ( tmp , unit ) ;
17927: LD_ADDR_VAR 0 10
17931: PUSH
17932: LD_VAR 0 8
17936: PPUSH
17937: LD_VAR 0 1
17941: PPUSH
17942: CALL_OW 74
17946: ST_TO_ADDR
// if not enemy then
17947: LD_VAR 0 10
17951: NOT
17952: IFFALSE 17956
// exit ;
17954: GO 18363
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
17956: LD_VAR 0 11
17960: IFFALSE 17982
17962: PUSH
17963: LD_VAR 0 11
17967: PPUSH
17968: LD_VAR 0 10
17972: PPUSH
17973: CALL_OW 296
17977: PUSH
17978: LD_INT 13
17980: GREATER
17981: AND
17982: IFTRUE 18004
17984: PUSH
17985: LD_VAR 0 1
17989: PPUSH
17990: LD_VAR 0 10
17994: PPUSH
17995: CALL_OW 296
17999: PUSH
18000: LD_INT 12
18002: GREATER
18003: OR
18004: IFFALSE 18008
// exit ;
18006: GO 18363
// missile := [ 1 ] ;
18008: LD_ADDR_VAR 0 14
18012: PUSH
18013: LD_INT 1
18015: PUSH
18016: EMPTY
18017: LIST
18018: ST_TO_ADDR
// if Researched ( side , tech_space ) then
18019: LD_VAR 0 9
18023: PPUSH
18024: LD_VAR 0 12
18028: PPUSH
18029: CALL_OW 325
18033: IFFALSE 18062
// missile := Replace ( missile , missile + 1 , 2 ) ;
18035: LD_ADDR_VAR 0 14
18039: PUSH
18040: LD_VAR 0 14
18044: PPUSH
18045: LD_VAR 0 14
18049: PUSH
18050: LD_INT 1
18052: PLUS
18053: PPUSH
18054: LD_INT 2
18056: PPUSH
18057: CALL_OW 1
18061: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18062: LD_VAR 0 9
18066: PPUSH
18067: LD_VAR 0 13
18071: PPUSH
18072: CALL_OW 325
18076: IFFALSE 18100
18078: PUSH
18079: LD_VAR 0 10
18083: PPUSH
18084: CALL_OW 255
18088: PPUSH
18089: LD_VAR 0 13
18093: PPUSH
18094: CALL_OW 325
18098: NOT
18099: AND
18100: IFFALSE 18129
// missile := Replace ( missile , missile + 1 , 3 ) ;
18102: LD_ADDR_VAR 0 14
18106: PUSH
18107: LD_VAR 0 14
18111: PPUSH
18112: LD_VAR 0 14
18116: PUSH
18117: LD_INT 1
18119: PLUS
18120: PPUSH
18121: LD_INT 3
18123: PPUSH
18124: CALL_OW 1
18128: ST_TO_ADDR
// if missile < 2 then
18129: LD_VAR 0 14
18133: PUSH
18134: LD_INT 2
18136: LESS
18137: IFFALSE 18141
// exit ;
18139: GO 18363
// x := GetX ( enemy ) ;
18141: LD_ADDR_VAR 0 4
18145: PUSH
18146: LD_VAR 0 10
18150: PPUSH
18151: CALL_OW 250
18155: ST_TO_ADDR
// y := GetY ( enemy ) ;
18156: LD_ADDR_VAR 0 5
18160: PUSH
18161: LD_VAR 0 10
18165: PPUSH
18166: CALL_OW 251
18170: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18171: LD_ADDR_VAR 0 6
18175: PUSH
18176: LD_VAR 0 4
18180: PUSH
18181: LD_INT 1
18183: NEG
18184: PPUSH
18185: LD_INT 1
18187: PPUSH
18188: CALL_OW 12
18192: PLUS
18193: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18194: LD_ADDR_VAR 0 7
18198: PUSH
18199: LD_VAR 0 5
18203: PUSH
18204: LD_INT 1
18206: NEG
18207: PPUSH
18208: LD_INT 1
18210: PPUSH
18211: CALL_OW 12
18215: PLUS
18216: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18217: LD_VAR 0 6
18221: PPUSH
18222: LD_VAR 0 7
18226: PPUSH
18227: CALL_OW 488
18231: NOT
18232: IFFALSE 18254
// begin _x := x ;
18234: LD_ADDR_VAR 0 6
18238: PUSH
18239: LD_VAR 0 4
18243: ST_TO_ADDR
// _y := y ;
18244: LD_ADDR_VAR 0 7
18248: PUSH
18249: LD_VAR 0 5
18253: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18254: LD_ADDR_VAR 0 3
18258: PUSH
18259: LD_INT 1
18261: PPUSH
18262: LD_VAR 0 14
18266: PPUSH
18267: CALL_OW 12
18271: ST_TO_ADDR
// case i of 1 :
18272: LD_VAR 0 3
18276: PUSH
18277: LD_INT 1
18279: DOUBLE
18280: EQUAL
18281: IFTRUE 18285
18283: GO 18302
18285: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18286: LD_VAR 0 1
18290: PPUSH
18291: LD_VAR 0 10
18295: PPUSH
18296: CALL_OW 115
18300: GO 18363
18302: LD_INT 2
18304: DOUBLE
18305: EQUAL
18306: IFTRUE 18310
18308: GO 18332
18310: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18311: LD_VAR 0 1
18315: PPUSH
18316: LD_VAR 0 6
18320: PPUSH
18321: LD_VAR 0 7
18325: PPUSH
18326: CALL_OW 153
18330: GO 18363
18332: LD_INT 3
18334: DOUBLE
18335: EQUAL
18336: IFTRUE 18340
18338: GO 18362
18340: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18341: LD_VAR 0 1
18345: PPUSH
18346: LD_VAR 0 6
18350: PPUSH
18351: LD_VAR 0 7
18355: PPUSH
18356: CALL_OW 154
18360: GO 18363
18362: POP
// end ;
18363: LD_VAR 0 2
18367: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18368: LD_INT 0
18370: PPUSH
18371: PPUSH
18372: PPUSH
18373: PPUSH
18374: PPUSH
18375: PPUSH
// if not unit or not building then
18376: LD_VAR 0 1
18380: NOT
18381: IFTRUE 18390
18383: PUSH
18384: LD_VAR 0 2
18388: NOT
18389: OR
18390: IFFALSE 18394
// exit ;
18392: GO 18552
// x := GetX ( building ) ;
18394: LD_ADDR_VAR 0 5
18398: PUSH
18399: LD_VAR 0 2
18403: PPUSH
18404: CALL_OW 250
18408: ST_TO_ADDR
// y := GetY ( building ) ;
18409: LD_ADDR_VAR 0 6
18413: PUSH
18414: LD_VAR 0 2
18418: PPUSH
18419: CALL_OW 251
18423: ST_TO_ADDR
// for i := 0 to 5 do
18424: LD_ADDR_VAR 0 4
18428: PUSH
18429: DOUBLE
18430: LD_INT 0
18432: DEC
18433: ST_TO_ADDR
18434: LD_INT 5
18436: PUSH
18437: FOR_TO
18438: IFFALSE 18550
// begin _x := ShiftX ( x , i , 3 ) ;
18440: LD_ADDR_VAR 0 7
18444: PUSH
18445: LD_VAR 0 5
18449: PPUSH
18450: LD_VAR 0 4
18454: PPUSH
18455: LD_INT 3
18457: PPUSH
18458: CALL_OW 272
18462: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18463: LD_ADDR_VAR 0 8
18467: PUSH
18468: LD_VAR 0 6
18472: PPUSH
18473: LD_VAR 0 4
18477: PPUSH
18478: LD_INT 3
18480: PPUSH
18481: CALL_OW 273
18485: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18486: LD_VAR 0 7
18490: PPUSH
18491: LD_VAR 0 8
18495: PPUSH
18496: CALL_OW 488
18500: NOT
18501: IFFALSE 18505
// continue ;
18503: GO 18437
// if HexInfo ( _x , _y ) = 0 then
18505: LD_VAR 0 7
18509: PPUSH
18510: LD_VAR 0 8
18514: PPUSH
18515: CALL_OW 428
18519: PUSH
18520: LD_INT 0
18522: EQUAL
18523: IFFALSE 18548
// begin ComMoveXY ( unit , _x , _y ) ;
18525: LD_VAR 0 1
18529: PPUSH
18530: LD_VAR 0 7
18534: PPUSH
18535: LD_VAR 0 8
18539: PPUSH
18540: CALL_OW 111
// exit ;
18544: POP
18545: POP
18546: GO 18552
// end ; end ;
18548: GO 18437
18550: POP
18551: POP
// end ;
18552: LD_VAR 0 3
18556: RET
// export function ScanBase ( side , base_area ) ; begin
18557: LD_INT 0
18559: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18560: LD_ADDR_VAR 0 3
18564: PUSH
18565: LD_VAR 0 2
18569: PPUSH
18570: LD_INT 81
18572: PUSH
18573: LD_VAR 0 1
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: PPUSH
18582: CALL_OW 70
18586: ST_TO_ADDR
// end ;
18587: LD_VAR 0 3
18591: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18592: LD_INT 0
18594: PPUSH
18595: PPUSH
18596: PPUSH
18597: PPUSH
// result := false ;
18598: LD_ADDR_VAR 0 2
18602: PUSH
18603: LD_INT 0
18605: ST_TO_ADDR
// side := GetSide ( unit ) ;
18606: LD_ADDR_VAR 0 3
18610: PUSH
18611: LD_VAR 0 1
18615: PPUSH
18616: CALL_OW 255
18620: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18621: LD_ADDR_VAR 0 4
18625: PUSH
18626: LD_VAR 0 1
18630: PPUSH
18631: CALL_OW 248
18635: ST_TO_ADDR
// case nat of 1 :
18636: LD_VAR 0 4
18640: PUSH
18641: LD_INT 1
18643: DOUBLE
18644: EQUAL
18645: IFTRUE 18649
18647: GO 18660
18649: POP
// tech := tech_lassight ; 2 :
18650: LD_ADDR_VAR 0 5
18654: PUSH
18655: LD_INT 12
18657: ST_TO_ADDR
18658: GO 18699
18660: LD_INT 2
18662: DOUBLE
18663: EQUAL
18664: IFTRUE 18668
18666: GO 18679
18668: POP
// tech := tech_mortar ; 3 :
18669: LD_ADDR_VAR 0 5
18673: PUSH
18674: LD_INT 41
18676: ST_TO_ADDR
18677: GO 18699
18679: LD_INT 3
18681: DOUBLE
18682: EQUAL
18683: IFTRUE 18687
18685: GO 18698
18687: POP
// tech := tech_bazooka ; end ;
18688: LD_ADDR_VAR 0 5
18692: PUSH
18693: LD_INT 44
18695: ST_TO_ADDR
18696: GO 18699
18698: POP
// if Researched ( side , tech ) then
18699: LD_VAR 0 3
18703: PPUSH
18704: LD_VAR 0 5
18708: PPUSH
18709: CALL_OW 325
18713: IFFALSE 18740
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18715: LD_ADDR_VAR 0 2
18719: PUSH
18720: LD_INT 5
18722: PUSH
18723: LD_INT 8
18725: PUSH
18726: LD_INT 9
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: LIST
18733: PUSH
18734: LD_VAR 0 4
18738: ARRAY
18739: ST_TO_ADDR
// end ;
18740: LD_VAR 0 2
18744: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18745: LD_INT 0
18747: PPUSH
18748: PPUSH
18749: PPUSH
// if not mines then
18750: LD_VAR 0 2
18754: NOT
18755: IFFALSE 18759
// exit ;
18757: GO 18903
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18759: LD_ADDR_VAR 0 5
18763: PUSH
18764: LD_INT 81
18766: PUSH
18767: LD_VAR 0 1
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 3
18778: PUSH
18779: LD_INT 21
18781: PUSH
18782: LD_INT 3
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PPUSH
18797: CALL_OW 69
18801: ST_TO_ADDR
// for i in mines do
18802: LD_ADDR_VAR 0 4
18806: PUSH
18807: LD_VAR 0 2
18811: PUSH
18812: FOR_IN
18813: IFFALSE 18901
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18815: LD_VAR 0 4
18819: PUSH
18820: LD_INT 1
18822: ARRAY
18823: PPUSH
18824: LD_VAR 0 4
18828: PUSH
18829: LD_INT 2
18831: ARRAY
18832: PPUSH
18833: CALL_OW 458
18837: NOT
18838: IFFALSE 18842
// continue ;
18840: GO 18812
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18842: LD_VAR 0 4
18846: PUSH
18847: LD_INT 1
18849: ARRAY
18850: PPUSH
18851: LD_VAR 0 4
18855: PUSH
18856: LD_INT 2
18858: ARRAY
18859: PPUSH
18860: CALL_OW 428
18864: PUSH
18865: LD_VAR 0 5
18869: IN
18870: IFFALSE 18899
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18872: LD_VAR 0 4
18876: PUSH
18877: LD_INT 1
18879: ARRAY
18880: PPUSH
18881: LD_VAR 0 4
18885: PUSH
18886: LD_INT 2
18888: ARRAY
18889: PPUSH
18890: LD_VAR 0 1
18894: PPUSH
18895: CALL_OW 456
// end ;
18899: GO 18812
18901: POP
18902: POP
// end ;
18903: LD_VAR 0 3
18907: RET
// export function Count ( array ) ; begin
18908: LD_INT 0
18910: PPUSH
// result := array + 0 ;
18911: LD_ADDR_VAR 0 2
18915: PUSH
18916: LD_VAR 0 1
18920: PUSH
18921: LD_INT 0
18923: PLUS
18924: ST_TO_ADDR
// end ;
18925: LD_VAR 0 2
18929: RET
// export function IsEmpty ( building ) ; begin
18930: LD_INT 0
18932: PPUSH
// if not building then
18933: LD_VAR 0 1
18937: NOT
18938: IFFALSE 18942
// exit ;
18940: GO 18985
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
18942: LD_ADDR_VAR 0 2
18946: PUSH
18947: LD_VAR 0 1
18951: PUSH
18952: LD_INT 22
18954: PUSH
18955: LD_VAR 0 1
18959: PPUSH
18960: CALL_OW 255
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 58
18971: PUSH
18972: EMPTY
18973: LIST
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PPUSH
18979: CALL_OW 69
18983: IN
18984: ST_TO_ADDR
// end ;
18985: LD_VAR 0 2
18989: RET
// export function IsNotFull ( building ) ; var places ; begin
18990: LD_INT 0
18992: PPUSH
18993: PPUSH
// if not building then
18994: LD_VAR 0 1
18998: NOT
18999: IFFALSE 19003
// exit ;
19001: GO 19031
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
19003: LD_ADDR_VAR 0 2
19007: PUSH
19008: LD_VAR 0 1
19012: PPUSH
19013: LD_INT 3
19015: PUSH
19016: LD_INT 62
19018: PUSH
19019: EMPTY
19020: LIST
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PPUSH
19026: CALL_OW 72
19030: ST_TO_ADDR
// end ;
19031: LD_VAR 0 2
19035: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19036: LD_INT 0
19038: PPUSH
19039: PPUSH
19040: PPUSH
19041: PPUSH
// tmp := [ ] ;
19042: LD_ADDR_VAR 0 3
19046: PUSH
19047: EMPTY
19048: ST_TO_ADDR
// list := [ ] ;
19049: LD_ADDR_VAR 0 5
19053: PUSH
19054: EMPTY
19055: ST_TO_ADDR
// for i = 16 to 25 do
19056: LD_ADDR_VAR 0 4
19060: PUSH
19061: DOUBLE
19062: LD_INT 16
19064: DEC
19065: ST_TO_ADDR
19066: LD_INT 25
19068: PUSH
19069: FOR_TO
19070: IFFALSE 19143
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19072: LD_ADDR_VAR 0 3
19076: PUSH
19077: LD_VAR 0 3
19081: PUSH
19082: LD_INT 22
19084: PUSH
19085: LD_VAR 0 1
19089: PPUSH
19090: CALL_OW 255
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: LD_INT 91
19101: PUSH
19102: LD_VAR 0 1
19106: PUSH
19107: LD_INT 6
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: LIST
19114: PUSH
19115: LD_INT 30
19117: PUSH
19118: LD_VAR 0 4
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: LIST
19131: PUSH
19132: EMPTY
19133: LIST
19134: PPUSH
19135: CALL_OW 69
19139: ADD
19140: ST_TO_ADDR
19141: GO 19069
19143: POP
19144: POP
// for i = 1 to tmp do
19145: LD_ADDR_VAR 0 4
19149: PUSH
19150: DOUBLE
19151: LD_INT 1
19153: DEC
19154: ST_TO_ADDR
19155: LD_VAR 0 3
19159: PUSH
19160: FOR_TO
19161: IFFALSE 19249
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19163: LD_ADDR_VAR 0 5
19167: PUSH
19168: LD_VAR 0 5
19172: PUSH
19173: LD_VAR 0 3
19177: PUSH
19178: LD_VAR 0 4
19182: ARRAY
19183: PPUSH
19184: CALL_OW 266
19188: PUSH
19189: LD_VAR 0 3
19193: PUSH
19194: LD_VAR 0 4
19198: ARRAY
19199: PPUSH
19200: CALL_OW 250
19204: PUSH
19205: LD_VAR 0 3
19209: PUSH
19210: LD_VAR 0 4
19214: ARRAY
19215: PPUSH
19216: CALL_OW 251
19220: PUSH
19221: LD_VAR 0 3
19225: PUSH
19226: LD_VAR 0 4
19230: ARRAY
19231: PPUSH
19232: CALL_OW 254
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: PUSH
19243: EMPTY
19244: LIST
19245: ADD
19246: ST_TO_ADDR
19247: GO 19160
19249: POP
19250: POP
// result := list ;
19251: LD_ADDR_VAR 0 2
19255: PUSH
19256: LD_VAR 0 5
19260: ST_TO_ADDR
// end ;
19261: LD_VAR 0 2
19265: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19266: LD_INT 0
19268: PPUSH
19269: PPUSH
19270: PPUSH
19271: PPUSH
19272: PPUSH
19273: PPUSH
19274: PPUSH
// if not factory then
19275: LD_VAR 0 1
19279: NOT
19280: IFFALSE 19284
// exit ;
19282: GO 19887
// if control = control_apeman then
19284: LD_VAR 0 4
19288: PUSH
19289: LD_INT 5
19291: EQUAL
19292: IFFALSE 19401
// begin tmp := UnitsInside ( factory ) ;
19294: LD_ADDR_VAR 0 8
19298: PUSH
19299: LD_VAR 0 1
19303: PPUSH
19304: CALL_OW 313
19308: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19309: LD_VAR 0 8
19313: PPUSH
19314: LD_INT 25
19316: PUSH
19317: LD_INT 12
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PPUSH
19324: CALL_OW 72
19328: NOT
19329: IFFALSE 19339
// control := control_manual ;
19331: LD_ADDR_VAR 0 4
19335: PUSH
19336: LD_INT 1
19338: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19339: LD_ADDR_VAR 0 8
19343: PUSH
19344: LD_VAR 0 1
19348: PPUSH
19349: CALL 19036 0 1
19353: ST_TO_ADDR
// if tmp then
19354: LD_VAR 0 8
19358: IFFALSE 19401
// begin for i in tmp do
19360: LD_ADDR_VAR 0 7
19364: PUSH
19365: LD_VAR 0 8
19369: PUSH
19370: FOR_IN
19371: IFFALSE 19399
// if i [ 1 ] = b_ext_radio then
19373: LD_VAR 0 7
19377: PUSH
19378: LD_INT 1
19380: ARRAY
19381: PUSH
19382: LD_INT 22
19384: EQUAL
19385: IFFALSE 19397
// begin control := control_remote ;
19387: LD_ADDR_VAR 0 4
19391: PUSH
19392: LD_INT 2
19394: ST_TO_ADDR
// break ;
19395: GO 19399
// end ;
19397: GO 19370
19399: POP
19400: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19401: LD_VAR 0 1
19405: PPUSH
19406: LD_VAR 0 2
19410: PPUSH
19411: LD_VAR 0 3
19415: PPUSH
19416: LD_VAR 0 4
19420: PPUSH
19421: LD_VAR 0 5
19425: PPUSH
19426: CALL_OW 448
19430: IFFALSE 19465
// begin result := [ chassis , engine , control , weapon ] ;
19432: LD_ADDR_VAR 0 6
19436: PUSH
19437: LD_VAR 0 2
19441: PUSH
19442: LD_VAR 0 3
19446: PUSH
19447: LD_VAR 0 4
19451: PUSH
19452: LD_VAR 0 5
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: ST_TO_ADDR
// exit ;
19463: GO 19887
// end ; _chassis := AvailableChassisList ( factory ) ;
19465: LD_ADDR_VAR 0 9
19469: PUSH
19470: LD_VAR 0 1
19474: PPUSH
19475: CALL_OW 475
19479: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19480: LD_ADDR_VAR 0 11
19484: PUSH
19485: LD_VAR 0 1
19489: PPUSH
19490: CALL_OW 476
19494: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19495: LD_ADDR_VAR 0 12
19499: PUSH
19500: LD_VAR 0 1
19504: PPUSH
19505: CALL_OW 477
19509: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19510: LD_ADDR_VAR 0 10
19514: PUSH
19515: LD_VAR 0 1
19519: PPUSH
19520: CALL_OW 478
19524: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19525: LD_VAR 0 9
19529: NOT
19530: IFTRUE 19539
19532: PUSH
19533: LD_VAR 0 11
19537: NOT
19538: OR
19539: IFTRUE 19548
19541: PUSH
19542: LD_VAR 0 12
19546: NOT
19547: OR
19548: IFTRUE 19557
19550: PUSH
19551: LD_VAR 0 10
19555: NOT
19556: OR
19557: IFFALSE 19592
// begin result := [ chassis , engine , control , weapon ] ;
19559: LD_ADDR_VAR 0 6
19563: PUSH
19564: LD_VAR 0 2
19568: PUSH
19569: LD_VAR 0 3
19573: PUSH
19574: LD_VAR 0 4
19578: PUSH
19579: LD_VAR 0 5
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: ST_TO_ADDR
// exit ;
19590: GO 19887
// end ; if not chassis in _chassis then
19592: LD_VAR 0 2
19596: PUSH
19597: LD_VAR 0 9
19601: IN
19602: NOT
19603: IFFALSE 19629
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19605: LD_ADDR_VAR 0 2
19609: PUSH
19610: LD_VAR 0 9
19614: PUSH
19615: LD_INT 1
19617: PPUSH
19618: LD_VAR 0 9
19622: PPUSH
19623: CALL_OW 12
19627: ARRAY
19628: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19629: LD_VAR 0 2
19633: PPUSH
19634: LD_VAR 0 3
19638: PPUSH
19639: CALL 19892 0 2
19643: NOT
19644: IFFALSE 19705
// repeat engine := _engine [ 1 ] ;
19646: LD_ADDR_VAR 0 3
19650: PUSH
19651: LD_VAR 0 11
19655: PUSH
19656: LD_INT 1
19658: ARRAY
19659: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19660: LD_ADDR_VAR 0 11
19664: PUSH
19665: LD_VAR 0 11
19669: PPUSH
19670: LD_INT 1
19672: PPUSH
19673: CALL_OW 3
19677: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19678: LD_VAR 0 2
19682: PPUSH
19683: LD_VAR 0 3
19687: PPUSH
19688: CALL 19892 0 2
19692: IFTRUE 19703
19694: PUSH
19695: LD_VAR 0 11
19699: PUSH
19700: EMPTY
19701: EQUAL
19702: OR
19703: IFFALSE 19646
// if not control in _control then
19705: LD_VAR 0 4
19709: PUSH
19710: LD_VAR 0 12
19714: IN
19715: NOT
19716: IFFALSE 19742
// control := _control [ rand ( 1 , _control ) ] ;
19718: LD_ADDR_VAR 0 4
19722: PUSH
19723: LD_VAR 0 12
19727: PUSH
19728: LD_INT 1
19730: PPUSH
19731: LD_VAR 0 12
19735: PPUSH
19736: CALL_OW 12
19740: ARRAY
19741: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19742: LD_VAR 0 2
19746: PPUSH
19747: LD_VAR 0 5
19751: PPUSH
19752: CALL 20114 0 2
19756: NOT
19757: IFFALSE 19818
// repeat weapon := _weapon [ 1 ] ;
19759: LD_ADDR_VAR 0 5
19763: PUSH
19764: LD_VAR 0 10
19768: PUSH
19769: LD_INT 1
19771: ARRAY
19772: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19773: LD_ADDR_VAR 0 10
19777: PUSH
19778: LD_VAR 0 10
19782: PPUSH
19783: LD_INT 1
19785: PPUSH
19786: CALL_OW 3
19790: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19791: LD_VAR 0 2
19795: PPUSH
19796: LD_VAR 0 5
19800: PPUSH
19801: CALL 20114 0 2
19805: IFTRUE 19816
19807: PUSH
19808: LD_VAR 0 10
19812: PUSH
19813: EMPTY
19814: EQUAL
19815: OR
19816: IFFALSE 19759
// result := [ ] ;
19818: LD_ADDR_VAR 0 6
19822: PUSH
19823: EMPTY
19824: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19825: LD_VAR 0 1
19829: PPUSH
19830: LD_VAR 0 2
19834: PPUSH
19835: LD_VAR 0 3
19839: PPUSH
19840: LD_VAR 0 4
19844: PPUSH
19845: LD_VAR 0 5
19849: PPUSH
19850: CALL_OW 448
19854: IFFALSE 19887
// result := [ chassis , engine , control , weapon ] ;
19856: LD_ADDR_VAR 0 6
19860: PUSH
19861: LD_VAR 0 2
19865: PUSH
19866: LD_VAR 0 3
19870: PUSH
19871: LD_VAR 0 4
19875: PUSH
19876: LD_VAR 0 5
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: ST_TO_ADDR
// end ;
19887: LD_VAR 0 6
19891: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
19892: LD_INT 0
19894: PPUSH
// if not chassis or not engine then
19895: LD_VAR 0 1
19899: NOT
19900: IFTRUE 19909
19902: PUSH
19903: LD_VAR 0 2
19907: NOT
19908: OR
19909: IFFALSE 19913
// exit ;
19911: GO 20109
// case engine of engine_solar :
19913: LD_VAR 0 2
19917: PUSH
19918: LD_INT 2
19920: DOUBLE
19921: EQUAL
19922: IFTRUE 19926
19924: GO 19964
19926: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
19927: LD_ADDR_VAR 0 3
19931: PUSH
19932: LD_INT 11
19934: PUSH
19935: LD_INT 12
19937: PUSH
19938: LD_INT 13
19940: PUSH
19941: LD_INT 14
19943: PUSH
19944: LD_INT 1
19946: PUSH
19947: LD_INT 2
19949: PUSH
19950: LD_INT 3
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: ST_TO_ADDR
19962: GO 20093
19964: LD_INT 1
19966: DOUBLE
19967: EQUAL
19968: IFTRUE 19972
19970: GO 20034
19972: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
19973: LD_ADDR_VAR 0 3
19977: PUSH
19978: LD_INT 11
19980: PUSH
19981: LD_INT 12
19983: PUSH
19984: LD_INT 13
19986: PUSH
19987: LD_INT 14
19989: PUSH
19990: LD_INT 1
19992: PUSH
19993: LD_INT 2
19995: PUSH
19996: LD_INT 3
19998: PUSH
19999: LD_INT 4
20001: PUSH
20002: LD_INT 5
20004: PUSH
20005: LD_INT 21
20007: PUSH
20008: LD_INT 23
20010: PUSH
20011: LD_INT 22
20013: PUSH
20014: LD_INT 24
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: ST_TO_ADDR
20032: GO 20093
20034: LD_INT 3
20036: DOUBLE
20037: EQUAL
20038: IFTRUE 20042
20040: GO 20092
20042: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20043: LD_ADDR_VAR 0 3
20047: PUSH
20048: LD_INT 13
20050: PUSH
20051: LD_INT 14
20053: PUSH
20054: LD_INT 2
20056: PUSH
20057: LD_INT 3
20059: PUSH
20060: LD_INT 4
20062: PUSH
20063: LD_INT 5
20065: PUSH
20066: LD_INT 21
20068: PUSH
20069: LD_INT 22
20071: PUSH
20072: LD_INT 23
20074: PUSH
20075: LD_INT 24
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: ST_TO_ADDR
20090: GO 20093
20092: POP
// result := ( chassis in result ) ;
20093: LD_ADDR_VAR 0 3
20097: PUSH
20098: LD_VAR 0 1
20102: PUSH
20103: LD_VAR 0 3
20107: IN
20108: ST_TO_ADDR
// end ;
20109: LD_VAR 0 3
20113: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20114: LD_INT 0
20116: PPUSH
// if not chassis or not weapon then
20117: LD_VAR 0 1
20121: NOT
20122: IFTRUE 20131
20124: PUSH
20125: LD_VAR 0 2
20129: NOT
20130: OR
20131: IFFALSE 20135
// exit ;
20133: GO 21195
// case weapon of us_machine_gun :
20135: LD_VAR 0 2
20139: PUSH
20140: LD_INT 2
20142: DOUBLE
20143: EQUAL
20144: IFTRUE 20148
20146: GO 20178
20148: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20149: LD_ADDR_VAR 0 3
20153: PUSH
20154: LD_INT 1
20156: PUSH
20157: LD_INT 2
20159: PUSH
20160: LD_INT 3
20162: PUSH
20163: LD_INT 4
20165: PUSH
20166: LD_INT 5
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: ST_TO_ADDR
20176: GO 21179
20178: LD_INT 3
20180: DOUBLE
20181: EQUAL
20182: IFTRUE 20186
20184: GO 20216
20186: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20187: LD_ADDR_VAR 0 3
20191: PUSH
20192: LD_INT 1
20194: PUSH
20195: LD_INT 2
20197: PUSH
20198: LD_INT 3
20200: PUSH
20201: LD_INT 4
20203: PUSH
20204: LD_INT 5
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: ST_TO_ADDR
20214: GO 21179
20216: LD_INT 11
20218: DOUBLE
20219: EQUAL
20220: IFTRUE 20224
20222: GO 20254
20224: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20225: LD_ADDR_VAR 0 3
20229: PUSH
20230: LD_INT 1
20232: PUSH
20233: LD_INT 2
20235: PUSH
20236: LD_INT 3
20238: PUSH
20239: LD_INT 4
20241: PUSH
20242: LD_INT 5
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: ST_TO_ADDR
20252: GO 21179
20254: LD_INT 4
20256: DOUBLE
20257: EQUAL
20258: IFTRUE 20262
20260: GO 20288
20262: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20263: LD_ADDR_VAR 0 3
20267: PUSH
20268: LD_INT 2
20270: PUSH
20271: LD_INT 3
20273: PUSH
20274: LD_INT 4
20276: PUSH
20277: LD_INT 5
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: ST_TO_ADDR
20286: GO 21179
20288: LD_INT 5
20290: DOUBLE
20291: EQUAL
20292: IFTRUE 20296
20294: GO 20322
20296: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20297: LD_ADDR_VAR 0 3
20301: PUSH
20302: LD_INT 2
20304: PUSH
20305: LD_INT 3
20307: PUSH
20308: LD_INT 4
20310: PUSH
20311: LD_INT 5
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: ST_TO_ADDR
20320: GO 21179
20322: LD_INT 9
20324: DOUBLE
20325: EQUAL
20326: IFTRUE 20330
20328: GO 20356
20330: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20331: LD_ADDR_VAR 0 3
20335: PUSH
20336: LD_INT 2
20338: PUSH
20339: LD_INT 3
20341: PUSH
20342: LD_INT 4
20344: PUSH
20345: LD_INT 5
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: ST_TO_ADDR
20354: GO 21179
20356: LD_INT 7
20358: DOUBLE
20359: EQUAL
20360: IFTRUE 20364
20362: GO 20390
20364: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20365: LD_ADDR_VAR 0 3
20369: PUSH
20370: LD_INT 2
20372: PUSH
20373: LD_INT 3
20375: PUSH
20376: LD_INT 4
20378: PUSH
20379: LD_INT 5
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: ST_TO_ADDR
20388: GO 21179
20390: LD_INT 12
20392: DOUBLE
20393: EQUAL
20394: IFTRUE 20398
20396: GO 20424
20398: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20399: LD_ADDR_VAR 0 3
20403: PUSH
20404: LD_INT 2
20406: PUSH
20407: LD_INT 3
20409: PUSH
20410: LD_INT 4
20412: PUSH
20413: LD_INT 5
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: ST_TO_ADDR
20422: GO 21179
20424: LD_INT 13
20426: DOUBLE
20427: EQUAL
20428: IFTRUE 20432
20430: GO 20458
20432: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20433: LD_ADDR_VAR 0 3
20437: PUSH
20438: LD_INT 2
20440: PUSH
20441: LD_INT 3
20443: PUSH
20444: LD_INT 4
20446: PUSH
20447: LD_INT 5
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: ST_TO_ADDR
20456: GO 21179
20458: LD_INT 14
20460: DOUBLE
20461: EQUAL
20462: IFTRUE 20466
20464: GO 20484
20466: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20467: LD_ADDR_VAR 0 3
20471: PUSH
20472: LD_INT 4
20474: PUSH
20475: LD_INT 5
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: ST_TO_ADDR
20482: GO 21179
20484: LD_INT 6
20486: DOUBLE
20487: EQUAL
20488: IFTRUE 20492
20490: GO 20510
20492: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20493: LD_ADDR_VAR 0 3
20497: PUSH
20498: LD_INT 4
20500: PUSH
20501: LD_INT 5
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: ST_TO_ADDR
20508: GO 21179
20510: LD_INT 10
20512: DOUBLE
20513: EQUAL
20514: IFTRUE 20518
20516: GO 20536
20518: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20519: LD_ADDR_VAR 0 3
20523: PUSH
20524: LD_INT 4
20526: PUSH
20527: LD_INT 5
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: ST_TO_ADDR
20534: GO 21179
20536: LD_INT 22
20538: DOUBLE
20539: EQUAL
20540: IFTRUE 20544
20542: GO 20570
20544: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20545: LD_ADDR_VAR 0 3
20549: PUSH
20550: LD_INT 11
20552: PUSH
20553: LD_INT 12
20555: PUSH
20556: LD_INT 13
20558: PUSH
20559: LD_INT 14
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: ST_TO_ADDR
20568: GO 21179
20570: LD_INT 23
20572: DOUBLE
20573: EQUAL
20574: IFTRUE 20578
20576: GO 20604
20578: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20579: LD_ADDR_VAR 0 3
20583: PUSH
20584: LD_INT 11
20586: PUSH
20587: LD_INT 12
20589: PUSH
20590: LD_INT 13
20592: PUSH
20593: LD_INT 14
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: ST_TO_ADDR
20602: GO 21179
20604: LD_INT 24
20606: DOUBLE
20607: EQUAL
20608: IFTRUE 20612
20610: GO 20638
20612: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20613: LD_ADDR_VAR 0 3
20617: PUSH
20618: LD_INT 11
20620: PUSH
20621: LD_INT 12
20623: PUSH
20624: LD_INT 13
20626: PUSH
20627: LD_INT 14
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: ST_TO_ADDR
20636: GO 21179
20638: LD_INT 30
20640: DOUBLE
20641: EQUAL
20642: IFTRUE 20646
20644: GO 20672
20646: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20647: LD_ADDR_VAR 0 3
20651: PUSH
20652: LD_INT 11
20654: PUSH
20655: LD_INT 12
20657: PUSH
20658: LD_INT 13
20660: PUSH
20661: LD_INT 14
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: ST_TO_ADDR
20670: GO 21179
20672: LD_INT 25
20674: DOUBLE
20675: EQUAL
20676: IFTRUE 20680
20678: GO 20698
20680: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20681: LD_ADDR_VAR 0 3
20685: PUSH
20686: LD_INT 13
20688: PUSH
20689: LD_INT 14
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: ST_TO_ADDR
20696: GO 21179
20698: LD_INT 27
20700: DOUBLE
20701: EQUAL
20702: IFTRUE 20706
20704: GO 20724
20706: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20707: LD_ADDR_VAR 0 3
20711: PUSH
20712: LD_INT 13
20714: PUSH
20715: LD_INT 14
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: ST_TO_ADDR
20722: GO 21179
20724: LD_INT 92
20726: DOUBLE
20727: EQUAL
20728: IFTRUE 20732
20730: GO 20758
20732: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20733: LD_ADDR_VAR 0 3
20737: PUSH
20738: LD_INT 11
20740: PUSH
20741: LD_INT 12
20743: PUSH
20744: LD_INT 13
20746: PUSH
20747: LD_INT 14
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: ST_TO_ADDR
20756: GO 21179
20758: LD_INT 28
20760: DOUBLE
20761: EQUAL
20762: IFTRUE 20766
20764: GO 20784
20766: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20767: LD_ADDR_VAR 0 3
20771: PUSH
20772: LD_INT 13
20774: PUSH
20775: LD_INT 14
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: ST_TO_ADDR
20782: GO 21179
20784: LD_INT 29
20786: DOUBLE
20787: EQUAL
20788: IFTRUE 20792
20790: GO 20810
20792: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20793: LD_ADDR_VAR 0 3
20797: PUSH
20798: LD_INT 13
20800: PUSH
20801: LD_INT 14
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: ST_TO_ADDR
20808: GO 21179
20810: LD_INT 31
20812: DOUBLE
20813: EQUAL
20814: IFTRUE 20818
20816: GO 20836
20818: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20819: LD_ADDR_VAR 0 3
20823: PUSH
20824: LD_INT 13
20826: PUSH
20827: LD_INT 14
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: ST_TO_ADDR
20834: GO 21179
20836: LD_INT 26
20838: DOUBLE
20839: EQUAL
20840: IFTRUE 20844
20842: GO 20862
20844: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20845: LD_ADDR_VAR 0 3
20849: PUSH
20850: LD_INT 13
20852: PUSH
20853: LD_INT 14
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: ST_TO_ADDR
20860: GO 21179
20862: LD_INT 42
20864: DOUBLE
20865: EQUAL
20866: IFTRUE 20870
20868: GO 20896
20870: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20871: LD_ADDR_VAR 0 3
20875: PUSH
20876: LD_INT 21
20878: PUSH
20879: LD_INT 22
20881: PUSH
20882: LD_INT 23
20884: PUSH
20885: LD_INT 24
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: ST_TO_ADDR
20894: GO 21179
20896: LD_INT 43
20898: DOUBLE
20899: EQUAL
20900: IFTRUE 20904
20902: GO 20930
20904: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
20905: LD_ADDR_VAR 0 3
20909: PUSH
20910: LD_INT 21
20912: PUSH
20913: LD_INT 22
20915: PUSH
20916: LD_INT 23
20918: PUSH
20919: LD_INT 24
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: ST_TO_ADDR
20928: GO 21179
20930: LD_INT 44
20932: DOUBLE
20933: EQUAL
20934: IFTRUE 20938
20936: GO 20964
20938: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
20939: LD_ADDR_VAR 0 3
20943: PUSH
20944: LD_INT 21
20946: PUSH
20947: LD_INT 22
20949: PUSH
20950: LD_INT 23
20952: PUSH
20953: LD_INT 24
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: ST_TO_ADDR
20962: GO 21179
20964: LD_INT 45
20966: DOUBLE
20967: EQUAL
20968: IFTRUE 20972
20970: GO 20998
20972: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
20973: LD_ADDR_VAR 0 3
20977: PUSH
20978: LD_INT 21
20980: PUSH
20981: LD_INT 22
20983: PUSH
20984: LD_INT 23
20986: PUSH
20987: LD_INT 24
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: ST_TO_ADDR
20996: GO 21179
20998: LD_INT 49
21000: DOUBLE
21001: EQUAL
21002: IFTRUE 21006
21004: GO 21032
21006: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21007: LD_ADDR_VAR 0 3
21011: PUSH
21012: LD_INT 21
21014: PUSH
21015: LD_INT 22
21017: PUSH
21018: LD_INT 23
21020: PUSH
21021: LD_INT 24
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: ST_TO_ADDR
21030: GO 21179
21032: LD_INT 51
21034: DOUBLE
21035: EQUAL
21036: IFTRUE 21040
21038: GO 21066
21040: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21041: LD_ADDR_VAR 0 3
21045: PUSH
21046: LD_INT 21
21048: PUSH
21049: LD_INT 22
21051: PUSH
21052: LD_INT 23
21054: PUSH
21055: LD_INT 24
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: ST_TO_ADDR
21064: GO 21179
21066: LD_INT 52
21068: DOUBLE
21069: EQUAL
21070: IFTRUE 21074
21072: GO 21100
21074: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21075: LD_ADDR_VAR 0 3
21079: PUSH
21080: LD_INT 21
21082: PUSH
21083: LD_INT 22
21085: PUSH
21086: LD_INT 23
21088: PUSH
21089: LD_INT 24
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: ST_TO_ADDR
21098: GO 21179
21100: LD_INT 53
21102: DOUBLE
21103: EQUAL
21104: IFTRUE 21108
21106: GO 21126
21108: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21109: LD_ADDR_VAR 0 3
21113: PUSH
21114: LD_INT 23
21116: PUSH
21117: LD_INT 24
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: ST_TO_ADDR
21124: GO 21179
21126: LD_INT 46
21128: DOUBLE
21129: EQUAL
21130: IFTRUE 21134
21132: GO 21152
21134: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21135: LD_ADDR_VAR 0 3
21139: PUSH
21140: LD_INT 23
21142: PUSH
21143: LD_INT 24
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: ST_TO_ADDR
21150: GO 21179
21152: LD_INT 47
21154: DOUBLE
21155: EQUAL
21156: IFTRUE 21160
21158: GO 21178
21160: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21161: LD_ADDR_VAR 0 3
21165: PUSH
21166: LD_INT 23
21168: PUSH
21169: LD_INT 24
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: ST_TO_ADDR
21176: GO 21179
21178: POP
// result := ( chassis in result ) ;
21179: LD_ADDR_VAR 0 3
21183: PUSH
21184: LD_VAR 0 1
21188: PUSH
21189: LD_VAR 0 3
21193: IN
21194: ST_TO_ADDR
// end ;
21195: LD_VAR 0 3
21199: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21200: LD_INT 0
21202: PPUSH
21203: PPUSH
21204: PPUSH
21205: PPUSH
21206: PPUSH
21207: PPUSH
21208: PPUSH
// result := array ;
21209: LD_ADDR_VAR 0 5
21213: PUSH
21214: LD_VAR 0 1
21218: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21219: LD_VAR 0 1
21223: NOT
21224: IFTRUE 21233
21226: PUSH
21227: LD_VAR 0 2
21231: NOT
21232: OR
21233: IFTRUE 21242
21235: PUSH
21236: LD_VAR 0 3
21240: NOT
21241: OR
21242: IFTRUE 21256
21244: PUSH
21245: LD_VAR 0 2
21249: PUSH
21250: LD_VAR 0 1
21254: GREATER
21255: OR
21256: IFTRUE 21270
21258: PUSH
21259: LD_VAR 0 3
21263: PUSH
21264: LD_VAR 0 1
21268: GREATER
21269: OR
21270: IFFALSE 21274
// exit ;
21272: GO 21570
// if direction then
21274: LD_VAR 0 4
21278: IFFALSE 21342
// begin d := 1 ;
21280: LD_ADDR_VAR 0 9
21284: PUSH
21285: LD_INT 1
21287: ST_TO_ADDR
// if i_from > i_to then
21288: LD_VAR 0 2
21292: PUSH
21293: LD_VAR 0 3
21297: GREATER
21298: IFFALSE 21324
// length := ( array - i_from ) + i_to else
21300: LD_ADDR_VAR 0 11
21304: PUSH
21305: LD_VAR 0 1
21309: PUSH
21310: LD_VAR 0 2
21314: MINUS
21315: PUSH
21316: LD_VAR 0 3
21320: PLUS
21321: ST_TO_ADDR
21322: GO 21340
// length := i_to - i_from ;
21324: LD_ADDR_VAR 0 11
21328: PUSH
21329: LD_VAR 0 3
21333: PUSH
21334: LD_VAR 0 2
21338: MINUS
21339: ST_TO_ADDR
// end else
21340: GO 21403
// begin d := - 1 ;
21342: LD_ADDR_VAR 0 9
21346: PUSH
21347: LD_INT 1
21349: NEG
21350: ST_TO_ADDR
// if i_from > i_to then
21351: LD_VAR 0 2
21355: PUSH
21356: LD_VAR 0 3
21360: GREATER
21361: IFFALSE 21381
// length := i_from - i_to else
21363: LD_ADDR_VAR 0 11
21367: PUSH
21368: LD_VAR 0 2
21372: PUSH
21373: LD_VAR 0 3
21377: MINUS
21378: ST_TO_ADDR
21379: GO 21403
// length := ( array - i_to ) + i_from ;
21381: LD_ADDR_VAR 0 11
21385: PUSH
21386: LD_VAR 0 1
21390: PUSH
21391: LD_VAR 0 3
21395: MINUS
21396: PUSH
21397: LD_VAR 0 2
21401: PLUS
21402: ST_TO_ADDR
// end ; if not length then
21403: LD_VAR 0 11
21407: NOT
21408: IFFALSE 21412
// exit ;
21410: GO 21570
// tmp := array ;
21412: LD_ADDR_VAR 0 10
21416: PUSH
21417: LD_VAR 0 1
21421: ST_TO_ADDR
// for i = 1 to length do
21422: LD_ADDR_VAR 0 6
21426: PUSH
21427: DOUBLE
21428: LD_INT 1
21430: DEC
21431: ST_TO_ADDR
21432: LD_VAR 0 11
21436: PUSH
21437: FOR_TO
21438: IFFALSE 21558
// begin for j = 1 to array do
21440: LD_ADDR_VAR 0 7
21444: PUSH
21445: DOUBLE
21446: LD_INT 1
21448: DEC
21449: ST_TO_ADDR
21450: LD_VAR 0 1
21454: PUSH
21455: FOR_TO
21456: IFFALSE 21544
// begin k := j + d ;
21458: LD_ADDR_VAR 0 8
21462: PUSH
21463: LD_VAR 0 7
21467: PUSH
21468: LD_VAR 0 9
21472: PLUS
21473: ST_TO_ADDR
// if k > array then
21474: LD_VAR 0 8
21478: PUSH
21479: LD_VAR 0 1
21483: GREATER
21484: IFFALSE 21494
// k := 1 ;
21486: LD_ADDR_VAR 0 8
21490: PUSH
21491: LD_INT 1
21493: ST_TO_ADDR
// if not k then
21494: LD_VAR 0 8
21498: NOT
21499: IFFALSE 21511
// k := array ;
21501: LD_ADDR_VAR 0 8
21505: PUSH
21506: LD_VAR 0 1
21510: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21511: LD_ADDR_VAR 0 10
21515: PUSH
21516: LD_VAR 0 10
21520: PPUSH
21521: LD_VAR 0 8
21525: PPUSH
21526: LD_VAR 0 1
21530: PUSH
21531: LD_VAR 0 7
21535: ARRAY
21536: PPUSH
21537: CALL_OW 1
21541: ST_TO_ADDR
// end ;
21542: GO 21455
21544: POP
21545: POP
// array := tmp ;
21546: LD_ADDR_VAR 0 1
21550: PUSH
21551: LD_VAR 0 10
21555: ST_TO_ADDR
// end ;
21556: GO 21437
21558: POP
21559: POP
// result := array ;
21560: LD_ADDR_VAR 0 5
21564: PUSH
21565: LD_VAR 0 1
21569: ST_TO_ADDR
// end ;
21570: LD_VAR 0 5
21574: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21575: LD_INT 0
21577: PPUSH
21578: PPUSH
// result := 0 ;
21579: LD_ADDR_VAR 0 3
21583: PUSH
21584: LD_INT 0
21586: ST_TO_ADDR
// if not array or not value in array then
21587: LD_VAR 0 1
21591: NOT
21592: IFTRUE 21607
21594: PUSH
21595: LD_VAR 0 2
21599: PUSH
21600: LD_VAR 0 1
21604: IN
21605: NOT
21606: OR
21607: IFFALSE 21611
// exit ;
21609: GO 21665
// for i = 1 to array do
21611: LD_ADDR_VAR 0 4
21615: PUSH
21616: DOUBLE
21617: LD_INT 1
21619: DEC
21620: ST_TO_ADDR
21621: LD_VAR 0 1
21625: PUSH
21626: FOR_TO
21627: IFFALSE 21663
// if value = array [ i ] then
21629: LD_VAR 0 2
21633: PUSH
21634: LD_VAR 0 1
21638: PUSH
21639: LD_VAR 0 4
21643: ARRAY
21644: EQUAL
21645: IFFALSE 21661
// begin result := i ;
21647: LD_ADDR_VAR 0 3
21651: PUSH
21652: LD_VAR 0 4
21656: ST_TO_ADDR
// exit ;
21657: POP
21658: POP
21659: GO 21665
// end ;
21661: GO 21626
21663: POP
21664: POP
// end ;
21665: LD_VAR 0 3
21669: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21670: LD_INT 0
21672: PPUSH
// vc_chassis := chassis ;
21673: LD_ADDR_OWVAR 37
21677: PUSH
21678: LD_VAR 0 1
21682: ST_TO_ADDR
// vc_engine := engine ;
21683: LD_ADDR_OWVAR 39
21687: PUSH
21688: LD_VAR 0 2
21692: ST_TO_ADDR
// vc_control := control ;
21693: LD_ADDR_OWVAR 38
21697: PUSH
21698: LD_VAR 0 3
21702: ST_TO_ADDR
// vc_weapon := weapon ;
21703: LD_ADDR_OWVAR 40
21707: PUSH
21708: LD_VAR 0 4
21712: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21713: LD_ADDR_OWVAR 41
21717: PUSH
21718: LD_VAR 0 5
21722: ST_TO_ADDR
// end ;
21723: LD_VAR 0 6
21727: RET
// export function WantPlant ( unit ) ; var task ; begin
21728: LD_INT 0
21730: PPUSH
21731: PPUSH
// result := false ;
21732: LD_ADDR_VAR 0 2
21736: PUSH
21737: LD_INT 0
21739: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21740: LD_ADDR_VAR 0 3
21744: PUSH
21745: LD_VAR 0 1
21749: PPUSH
21750: CALL_OW 437
21754: ST_TO_ADDR
// if task then
21755: LD_VAR 0 3
21759: IFFALSE 21787
// if task [ 1 ] [ 1 ] = p then
21761: LD_VAR 0 3
21765: PUSH
21766: LD_INT 1
21768: ARRAY
21769: PUSH
21770: LD_INT 1
21772: ARRAY
21773: PUSH
21774: LD_STRING p
21776: EQUAL
21777: IFFALSE 21787
// result := true ;
21779: LD_ADDR_VAR 0 2
21783: PUSH
21784: LD_INT 1
21786: ST_TO_ADDR
// end ;
21787: LD_VAR 0 2
21791: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21792: LD_INT 0
21794: PPUSH
21795: PPUSH
21796: PPUSH
21797: PPUSH
// if pos < 1 then
21798: LD_VAR 0 2
21802: PUSH
21803: LD_INT 1
21805: LESS
21806: IFFALSE 21810
// exit ;
21808: GO 22113
// if pos = 1 then
21810: LD_VAR 0 2
21814: PUSH
21815: LD_INT 1
21817: EQUAL
21818: IFFALSE 21851
// result := Replace ( arr , pos [ 1 ] , value ) else
21820: LD_ADDR_VAR 0 4
21824: PUSH
21825: LD_VAR 0 1
21829: PPUSH
21830: LD_VAR 0 2
21834: PUSH
21835: LD_INT 1
21837: ARRAY
21838: PPUSH
21839: LD_VAR 0 3
21843: PPUSH
21844: CALL_OW 1
21848: ST_TO_ADDR
21849: GO 22113
// begin tmp := arr ;
21851: LD_ADDR_VAR 0 6
21855: PUSH
21856: LD_VAR 0 1
21860: ST_TO_ADDR
// s_arr := [ tmp ] ;
21861: LD_ADDR_VAR 0 7
21865: PUSH
21866: LD_VAR 0 6
21870: PUSH
21871: EMPTY
21872: LIST
21873: ST_TO_ADDR
// for i = 1 to pos - 1 do
21874: LD_ADDR_VAR 0 5
21878: PUSH
21879: DOUBLE
21880: LD_INT 1
21882: DEC
21883: ST_TO_ADDR
21884: LD_VAR 0 2
21888: PUSH
21889: LD_INT 1
21891: MINUS
21892: PUSH
21893: FOR_TO
21894: IFFALSE 21939
// begin tmp := tmp [ pos [ i ] ] ;
21896: LD_ADDR_VAR 0 6
21900: PUSH
21901: LD_VAR 0 6
21905: PUSH
21906: LD_VAR 0 2
21910: PUSH
21911: LD_VAR 0 5
21915: ARRAY
21916: ARRAY
21917: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
21918: LD_ADDR_VAR 0 7
21922: PUSH
21923: LD_VAR 0 7
21927: PUSH
21928: LD_VAR 0 6
21932: PUSH
21933: EMPTY
21934: LIST
21935: ADD
21936: ST_TO_ADDR
// end ;
21937: GO 21893
21939: POP
21940: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
21941: LD_ADDR_VAR 0 6
21945: PUSH
21946: LD_VAR 0 6
21950: PPUSH
21951: LD_VAR 0 2
21955: PUSH
21956: LD_VAR 0 2
21960: ARRAY
21961: PPUSH
21962: LD_VAR 0 3
21966: PPUSH
21967: CALL_OW 1
21971: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21972: LD_ADDR_VAR 0 7
21976: PUSH
21977: LD_VAR 0 7
21981: PPUSH
21982: LD_VAR 0 7
21986: PPUSH
21987: LD_VAR 0 6
21991: PPUSH
21992: CALL_OW 1
21996: ST_TO_ADDR
// for i = s_arr downto 2 do
21997: LD_ADDR_VAR 0 5
22001: PUSH
22002: DOUBLE
22003: LD_VAR 0 7
22007: INC
22008: ST_TO_ADDR
22009: LD_INT 2
22011: PUSH
22012: FOR_DOWNTO
22013: IFFALSE 22097
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22015: LD_ADDR_VAR 0 6
22019: PUSH
22020: LD_VAR 0 7
22024: PUSH
22025: LD_VAR 0 5
22029: PUSH
22030: LD_INT 1
22032: MINUS
22033: ARRAY
22034: PPUSH
22035: LD_VAR 0 2
22039: PUSH
22040: LD_VAR 0 5
22044: PUSH
22045: LD_INT 1
22047: MINUS
22048: ARRAY
22049: PPUSH
22050: LD_VAR 0 7
22054: PUSH
22055: LD_VAR 0 5
22059: ARRAY
22060: PPUSH
22061: CALL_OW 1
22065: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22066: LD_ADDR_VAR 0 7
22070: PUSH
22071: LD_VAR 0 7
22075: PPUSH
22076: LD_VAR 0 5
22080: PUSH
22081: LD_INT 1
22083: MINUS
22084: PPUSH
22085: LD_VAR 0 6
22089: PPUSH
22090: CALL_OW 1
22094: ST_TO_ADDR
// end ;
22095: GO 22012
22097: POP
22098: POP
// result := s_arr [ 1 ] ;
22099: LD_ADDR_VAR 0 4
22103: PUSH
22104: LD_VAR 0 7
22108: PUSH
22109: LD_INT 1
22111: ARRAY
22112: ST_TO_ADDR
// end ; end ;
22113: LD_VAR 0 4
22117: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22118: LD_INT 0
22120: PPUSH
22121: PPUSH
// if not list then
22122: LD_VAR 0 1
22126: NOT
22127: IFFALSE 22131
// exit ;
22129: GO 22222
// i := list [ pos1 ] ;
22131: LD_ADDR_VAR 0 5
22135: PUSH
22136: LD_VAR 0 1
22140: PUSH
22141: LD_VAR 0 2
22145: ARRAY
22146: ST_TO_ADDR
// if not i then
22147: LD_VAR 0 5
22151: NOT
22152: IFFALSE 22156
// exit ;
22154: GO 22222
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22156: LD_ADDR_VAR 0 1
22160: PUSH
22161: LD_VAR 0 1
22165: PPUSH
22166: LD_VAR 0 2
22170: PPUSH
22171: LD_VAR 0 1
22175: PUSH
22176: LD_VAR 0 3
22180: ARRAY
22181: PPUSH
22182: CALL_OW 1
22186: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22187: LD_ADDR_VAR 0 1
22191: PUSH
22192: LD_VAR 0 1
22196: PPUSH
22197: LD_VAR 0 3
22201: PPUSH
22202: LD_VAR 0 5
22206: PPUSH
22207: CALL_OW 1
22211: ST_TO_ADDR
// result := list ;
22212: LD_ADDR_VAR 0 4
22216: PUSH
22217: LD_VAR 0 1
22221: ST_TO_ADDR
// end ;
22222: LD_VAR 0 4
22226: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22227: LD_INT 0
22229: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22230: LD_ADDR_VAR 0 5
22234: PUSH
22235: LD_VAR 0 1
22239: PPUSH
22240: CALL_OW 250
22244: PPUSH
22245: LD_VAR 0 1
22249: PPUSH
22250: CALL_OW 251
22254: PPUSH
22255: LD_VAR 0 2
22259: PPUSH
22260: LD_VAR 0 3
22264: PPUSH
22265: LD_VAR 0 4
22269: PPUSH
22270: CALL 22652 0 5
22274: ST_TO_ADDR
// end ;
22275: LD_VAR 0 5
22279: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
22280: LD_INT 0
22282: PPUSH
22283: PPUSH
22284: PPUSH
22285: PPUSH
// if not list or not unit then
22286: LD_VAR 0 2
22290: NOT
22291: IFTRUE 22300
22293: PUSH
22294: LD_VAR 0 1
22298: NOT
22299: OR
22300: IFFALSE 22304
// exit ;
22302: GO 22647
// result := [ ] ;
22304: LD_ADDR_VAR 0 5
22308: PUSH
22309: EMPTY
22310: ST_TO_ADDR
// for i in list do
22311: LD_ADDR_VAR 0 6
22315: PUSH
22316: LD_VAR 0 2
22320: PUSH
22321: FOR_IN
22322: IFFALSE 22540
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
22324: LD_ADDR_VAR 0 8
22328: PUSH
22329: LD_VAR 0 1
22333: PPUSH
22334: LD_VAR 0 6
22338: PUSH
22339: LD_INT 1
22341: ARRAY
22342: PPUSH
22343: LD_VAR 0 6
22347: PUSH
22348: LD_INT 2
22350: ARRAY
22351: PPUSH
22352: CALL_OW 297
22356: ST_TO_ADDR
// if not Count ( result ) then
22357: LD_VAR 0 5
22361: PPUSH
22362: CALL 18908 0 1
22366: NOT
22367: IFFALSE 22400
// begin result := Join ( result , [ i , tmp ] ) ;
22369: LD_ADDR_VAR 0 5
22373: PUSH
22374: LD_VAR 0 5
22378: PPUSH
22379: LD_VAR 0 6
22383: PUSH
22384: LD_VAR 0 8
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PPUSH
22393: CALL 54840 0 2
22397: ST_TO_ADDR
// continue ;
22398: GO 22321
// end ; if result [ result ] [ 2 ] <= tmp then
22400: LD_VAR 0 5
22404: PUSH
22405: LD_VAR 0 5
22409: ARRAY
22410: PUSH
22411: LD_INT 2
22413: ARRAY
22414: PUSH
22415: LD_VAR 0 8
22419: LESSEQUAL
22420: IFFALSE 22453
// result := Join ( result , [ i , tmp ] ) else
22422: LD_ADDR_VAR 0 5
22426: PUSH
22427: LD_VAR 0 5
22431: PPUSH
22432: LD_VAR 0 6
22436: PUSH
22437: LD_VAR 0 8
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PPUSH
22446: CALL 54840 0 2
22450: ST_TO_ADDR
22451: GO 22538
// begin for j := 1 to Count ( result ) do
22453: LD_ADDR_VAR 0 7
22457: PUSH
22458: DOUBLE
22459: LD_INT 1
22461: DEC
22462: ST_TO_ADDR
22463: LD_VAR 0 5
22467: PPUSH
22468: CALL 18908 0 1
22472: PUSH
22473: FOR_TO
22474: IFFALSE 22536
// begin if tmp < result [ j ] [ 2 ] then
22476: LD_VAR 0 8
22480: PUSH
22481: LD_VAR 0 5
22485: PUSH
22486: LD_VAR 0 7
22490: ARRAY
22491: PUSH
22492: LD_INT 2
22494: ARRAY
22495: LESS
22496: IFFALSE 22534
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22498: LD_ADDR_VAR 0 5
22502: PUSH
22503: LD_VAR 0 5
22507: PPUSH
22508: LD_VAR 0 7
22512: PPUSH
22513: LD_VAR 0 6
22517: PUSH
22518: LD_VAR 0 8
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PPUSH
22527: CALL_OW 2
22531: ST_TO_ADDR
// break ;
22532: GO 22536
// end ; end ;
22534: GO 22473
22536: POP
22537: POP
// end ; end ;
22538: GO 22321
22540: POP
22541: POP
// if result and not asc then
22542: LD_VAR 0 5
22546: IFFALSE 22555
22548: PUSH
22549: LD_VAR 0 3
22553: NOT
22554: AND
22555: IFFALSE 22572
// result := ReverseArray ( result ) ;
22557: LD_ADDR_VAR 0 5
22561: PUSH
22562: LD_VAR 0 5
22566: PPUSH
22567: CALL 49930 0 1
22571: ST_TO_ADDR
// tmp := [ ] ;
22572: LD_ADDR_VAR 0 8
22576: PUSH
22577: EMPTY
22578: ST_TO_ADDR
// if mode then
22579: LD_VAR 0 4
22583: IFFALSE 22647
// begin for i := 1 to result do
22585: LD_ADDR_VAR 0 6
22589: PUSH
22590: DOUBLE
22591: LD_INT 1
22593: DEC
22594: ST_TO_ADDR
22595: LD_VAR 0 5
22599: PUSH
22600: FOR_TO
22601: IFFALSE 22635
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
22603: LD_ADDR_VAR 0 8
22607: PUSH
22608: LD_VAR 0 8
22612: PPUSH
22613: LD_VAR 0 5
22617: PUSH
22618: LD_VAR 0 6
22622: ARRAY
22623: PUSH
22624: LD_INT 1
22626: ARRAY
22627: PPUSH
22628: CALL 54840 0 2
22632: ST_TO_ADDR
22633: GO 22600
22635: POP
22636: POP
// result := tmp ;
22637: LD_ADDR_VAR 0 5
22641: PUSH
22642: LD_VAR 0 8
22646: ST_TO_ADDR
// end ; end ;
22647: LD_VAR 0 5
22651: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22652: LD_INT 0
22654: PPUSH
22655: PPUSH
22656: PPUSH
22657: PPUSH
// if not list then
22658: LD_VAR 0 3
22662: NOT
22663: IFFALSE 22667
// exit ;
22665: GO 23057
// result := [ ] ;
22667: LD_ADDR_VAR 0 6
22671: PUSH
22672: EMPTY
22673: ST_TO_ADDR
// for i in list do
22674: LD_ADDR_VAR 0 7
22678: PUSH
22679: LD_VAR 0 3
22683: PUSH
22684: FOR_IN
22685: IFFALSE 22887
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22687: LD_ADDR_VAR 0 9
22691: PUSH
22692: LD_VAR 0 7
22696: PPUSH
22697: LD_VAR 0 1
22701: PPUSH
22702: LD_VAR 0 2
22706: PPUSH
22707: CALL_OW 297
22711: ST_TO_ADDR
// if not result then
22712: LD_VAR 0 6
22716: NOT
22717: IFFALSE 22743
// result := [ [ i , tmp ] ] else
22719: LD_ADDR_VAR 0 6
22723: PUSH
22724: LD_VAR 0 7
22728: PUSH
22729: LD_VAR 0 9
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: EMPTY
22739: LIST
22740: ST_TO_ADDR
22741: GO 22885
// begin if result [ result ] [ 2 ] <= tmp then
22743: LD_VAR 0 6
22747: PUSH
22748: LD_VAR 0 6
22752: ARRAY
22753: PUSH
22754: LD_INT 2
22756: ARRAY
22757: PUSH
22758: LD_VAR 0 9
22762: LESSEQUAL
22763: IFFALSE 22805
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22765: LD_ADDR_VAR 0 6
22769: PUSH
22770: LD_VAR 0 6
22774: PPUSH
22775: LD_VAR 0 6
22779: PUSH
22780: LD_INT 1
22782: PLUS
22783: PPUSH
22784: LD_VAR 0 7
22788: PUSH
22789: LD_VAR 0 9
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: PPUSH
22798: CALL_OW 2
22802: ST_TO_ADDR
22803: GO 22885
// for j := 1 to result do
22805: LD_ADDR_VAR 0 8
22809: PUSH
22810: DOUBLE
22811: LD_INT 1
22813: DEC
22814: ST_TO_ADDR
22815: LD_VAR 0 6
22819: PUSH
22820: FOR_TO
22821: IFFALSE 22883
// begin if tmp < result [ j ] [ 2 ] then
22823: LD_VAR 0 9
22827: PUSH
22828: LD_VAR 0 6
22832: PUSH
22833: LD_VAR 0 8
22837: ARRAY
22838: PUSH
22839: LD_INT 2
22841: ARRAY
22842: LESS
22843: IFFALSE 22881
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22845: LD_ADDR_VAR 0 6
22849: PUSH
22850: LD_VAR 0 6
22854: PPUSH
22855: LD_VAR 0 8
22859: PPUSH
22860: LD_VAR 0 7
22864: PUSH
22865: LD_VAR 0 9
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PPUSH
22874: CALL_OW 2
22878: ST_TO_ADDR
// break ;
22879: GO 22883
// end ; end ;
22881: GO 22820
22883: POP
22884: POP
// end ; end ;
22885: GO 22684
22887: POP
22888: POP
// if result and not asc then
22889: LD_VAR 0 6
22893: IFFALSE 22902
22895: PUSH
22896: LD_VAR 0 4
22900: NOT
22901: AND
22902: IFFALSE 22977
// begin tmp := result ;
22904: LD_ADDR_VAR 0 9
22908: PUSH
22909: LD_VAR 0 6
22913: ST_TO_ADDR
// for i = tmp downto 1 do
22914: LD_ADDR_VAR 0 7
22918: PUSH
22919: DOUBLE
22920: LD_VAR 0 9
22924: INC
22925: ST_TO_ADDR
22926: LD_INT 1
22928: PUSH
22929: FOR_DOWNTO
22930: IFFALSE 22975
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22932: LD_ADDR_VAR 0 6
22936: PUSH
22937: LD_VAR 0 6
22941: PPUSH
22942: LD_VAR 0 9
22946: PUSH
22947: LD_VAR 0 7
22951: MINUS
22952: PUSH
22953: LD_INT 1
22955: PLUS
22956: PPUSH
22957: LD_VAR 0 9
22961: PUSH
22962: LD_VAR 0 7
22966: ARRAY
22967: PPUSH
22968: CALL_OW 1
22972: ST_TO_ADDR
22973: GO 22929
22975: POP
22976: POP
// end ; tmp := [ ] ;
22977: LD_ADDR_VAR 0 9
22981: PUSH
22982: EMPTY
22983: ST_TO_ADDR
// if mode then
22984: LD_VAR 0 5
22988: IFFALSE 23057
// begin for i = 1 to result do
22990: LD_ADDR_VAR 0 7
22994: PUSH
22995: DOUBLE
22996: LD_INT 1
22998: DEC
22999: ST_TO_ADDR
23000: LD_VAR 0 6
23004: PUSH
23005: FOR_TO
23006: IFFALSE 23045
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
23008: LD_ADDR_VAR 0 9
23012: PUSH
23013: LD_VAR 0 9
23017: PPUSH
23018: LD_VAR 0 7
23022: PPUSH
23023: LD_VAR 0 6
23027: PUSH
23028: LD_VAR 0 7
23032: ARRAY
23033: PUSH
23034: LD_INT 1
23036: ARRAY
23037: PPUSH
23038: CALL_OW 1
23042: ST_TO_ADDR
23043: GO 23005
23045: POP
23046: POP
// result := tmp ;
23047: LD_ADDR_VAR 0 6
23051: PUSH
23052: LD_VAR 0 9
23056: ST_TO_ADDR
// end ; end ;
23057: LD_VAR 0 6
23061: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
23062: LD_INT 0
23064: PPUSH
23065: PPUSH
23066: PPUSH
23067: PPUSH
23068: PPUSH
23069: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
23070: LD_ADDR_VAR 0 5
23074: PUSH
23075: LD_INT 0
23077: PUSH
23078: LD_INT 0
23080: PUSH
23081: LD_INT 0
23083: PUSH
23084: EMPTY
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: ST_TO_ADDR
// if not x or not y then
23092: LD_VAR 0 2
23096: NOT
23097: IFTRUE 23106
23099: PUSH
23100: LD_VAR 0 3
23104: NOT
23105: OR
23106: IFFALSE 23110
// exit ;
23108: GO 24766
// if not range then
23110: LD_VAR 0 4
23114: NOT
23115: IFFALSE 23125
// range := 10 ;
23117: LD_ADDR_VAR 0 4
23121: PUSH
23122: LD_INT 10
23124: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23125: LD_ADDR_VAR 0 8
23129: PUSH
23130: LD_INT 81
23132: PUSH
23133: LD_VAR 0 1
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: LD_INT 92
23144: PUSH
23145: LD_VAR 0 2
23149: PUSH
23150: LD_VAR 0 3
23154: PUSH
23155: LD_VAR 0 4
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: PUSH
23166: LD_INT 3
23168: PUSH
23169: LD_INT 21
23171: PUSH
23172: LD_INT 3
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: LIST
23187: PPUSH
23188: CALL_OW 69
23192: ST_TO_ADDR
// if not tmp then
23193: LD_VAR 0 8
23197: NOT
23198: IFFALSE 23202
// exit ;
23200: GO 24766
// for i in tmp do
23202: LD_ADDR_VAR 0 6
23206: PUSH
23207: LD_VAR 0 8
23211: PUSH
23212: FOR_IN
23213: IFFALSE 24741
// begin points := [ 0 , 0 , 0 ] ;
23215: LD_ADDR_VAR 0 9
23219: PUSH
23220: LD_INT 0
23222: PUSH
23223: LD_INT 0
23225: PUSH
23226: LD_INT 0
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: LIST
23233: ST_TO_ADDR
// bpoints := 1 ;
23234: LD_ADDR_VAR 0 10
23238: PUSH
23239: LD_INT 1
23241: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23242: LD_VAR 0 6
23246: PPUSH
23247: CALL_OW 247
23251: PUSH
23252: LD_INT 1
23254: DOUBLE
23255: EQUAL
23256: IFTRUE 23260
23258: GO 23842
23260: POP
// begin if GetClass ( i ) = 1 then
23261: LD_VAR 0 6
23265: PPUSH
23266: CALL_OW 257
23270: PUSH
23271: LD_INT 1
23273: EQUAL
23274: IFFALSE 23295
// points := [ 10 , 5 , 3 ] ;
23276: LD_ADDR_VAR 0 9
23280: PUSH
23281: LD_INT 10
23283: PUSH
23284: LD_INT 5
23286: PUSH
23287: LD_INT 3
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: LIST
23294: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23295: LD_VAR 0 6
23299: PPUSH
23300: CALL_OW 257
23304: PUSH
23305: LD_INT 2
23307: PUSH
23308: LD_INT 3
23310: PUSH
23311: LD_INT 4
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: LIST
23318: IN
23319: IFFALSE 23340
// points := [ 3 , 2 , 1 ] ;
23321: LD_ADDR_VAR 0 9
23325: PUSH
23326: LD_INT 3
23328: PUSH
23329: LD_INT 2
23331: PUSH
23332: LD_INT 1
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: LIST
23339: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23340: LD_VAR 0 6
23344: PPUSH
23345: CALL_OW 257
23349: PUSH
23350: LD_INT 5
23352: EQUAL
23353: IFFALSE 23374
// points := [ 130 , 5 , 2 ] ;
23355: LD_ADDR_VAR 0 9
23359: PUSH
23360: LD_INT 130
23362: PUSH
23363: LD_INT 5
23365: PUSH
23366: LD_INT 2
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: LIST
23373: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23374: LD_VAR 0 6
23378: PPUSH
23379: CALL_OW 257
23383: PUSH
23384: LD_INT 8
23386: EQUAL
23387: IFFALSE 23408
// points := [ 35 , 35 , 30 ] ;
23389: LD_ADDR_VAR 0 9
23393: PUSH
23394: LD_INT 35
23396: PUSH
23397: LD_INT 35
23399: PUSH
23400: LD_INT 30
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: LIST
23407: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23408: LD_VAR 0 6
23412: PPUSH
23413: CALL_OW 257
23417: PUSH
23418: LD_INT 9
23420: EQUAL
23421: IFFALSE 23442
// points := [ 20 , 55 , 40 ] ;
23423: LD_ADDR_VAR 0 9
23427: PUSH
23428: LD_INT 20
23430: PUSH
23431: LD_INT 55
23433: PUSH
23434: LD_INT 40
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: LIST
23441: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23442: LD_VAR 0 6
23446: PPUSH
23447: CALL_OW 257
23451: PUSH
23452: LD_INT 12
23454: PUSH
23455: LD_INT 16
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: IN
23462: IFFALSE 23483
// points := [ 5 , 3 , 2 ] ;
23464: LD_ADDR_VAR 0 9
23468: PUSH
23469: LD_INT 5
23471: PUSH
23472: LD_INT 3
23474: PUSH
23475: LD_INT 2
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: LIST
23482: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23483: LD_VAR 0 6
23487: PPUSH
23488: CALL_OW 257
23492: PUSH
23493: LD_INT 17
23495: EQUAL
23496: IFFALSE 23517
// points := [ 100 , 50 , 75 ] ;
23498: LD_ADDR_VAR 0 9
23502: PUSH
23503: LD_INT 100
23505: PUSH
23506: LD_INT 50
23508: PUSH
23509: LD_INT 75
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: LIST
23516: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23517: LD_VAR 0 6
23521: PPUSH
23522: CALL_OW 257
23526: PUSH
23527: LD_INT 15
23529: EQUAL
23530: IFFALSE 23551
// points := [ 10 , 5 , 3 ] ;
23532: LD_ADDR_VAR 0 9
23536: PUSH
23537: LD_INT 10
23539: PUSH
23540: LD_INT 5
23542: PUSH
23543: LD_INT 3
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: LIST
23550: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23551: LD_VAR 0 6
23555: PPUSH
23556: CALL_OW 257
23560: PUSH
23561: LD_INT 14
23563: EQUAL
23564: IFFALSE 23585
// points := [ 10 , 0 , 0 ] ;
23566: LD_ADDR_VAR 0 9
23570: PUSH
23571: LD_INT 10
23573: PUSH
23574: LD_INT 0
23576: PUSH
23577: LD_INT 0
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: LIST
23584: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23585: LD_VAR 0 6
23589: PPUSH
23590: CALL_OW 257
23594: PUSH
23595: LD_INT 11
23597: EQUAL
23598: IFFALSE 23619
// points := [ 30 , 10 , 5 ] ;
23600: LD_ADDR_VAR 0 9
23604: PUSH
23605: LD_INT 30
23607: PUSH
23608: LD_INT 10
23610: PUSH
23611: LD_INT 5
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: LIST
23618: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23619: LD_VAR 0 1
23623: PPUSH
23624: LD_INT 5
23626: PPUSH
23627: CALL_OW 321
23631: PUSH
23632: LD_INT 2
23634: EQUAL
23635: IFFALSE 23652
// bpoints := bpoints * 1.8 ;
23637: LD_ADDR_VAR 0 10
23641: PUSH
23642: LD_VAR 0 10
23646: PUSH
23647: LD_REAL  1.80000000000000E+0000
23650: MUL
23651: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23652: LD_VAR 0 6
23656: PPUSH
23657: CALL_OW 257
23661: PUSH
23662: LD_INT 1
23664: PUSH
23665: LD_INT 2
23667: PUSH
23668: LD_INT 3
23670: PUSH
23671: LD_INT 4
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: IN
23680: IFFALSE 23700
23682: PUSH
23683: LD_VAR 0 1
23687: PPUSH
23688: LD_INT 51
23690: PPUSH
23691: CALL_OW 321
23695: PUSH
23696: LD_INT 2
23698: EQUAL
23699: AND
23700: IFFALSE 23717
// bpoints := bpoints * 1.2 ;
23702: LD_ADDR_VAR 0 10
23706: PUSH
23707: LD_VAR 0 10
23711: PUSH
23712: LD_REAL  1.20000000000000E+0000
23715: MUL
23716: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23717: LD_VAR 0 6
23721: PPUSH
23722: CALL_OW 257
23726: PUSH
23727: LD_INT 5
23729: PUSH
23730: LD_INT 7
23732: PUSH
23733: LD_INT 9
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: LIST
23740: IN
23741: IFFALSE 23761
23743: PUSH
23744: LD_VAR 0 1
23748: PPUSH
23749: LD_INT 52
23751: PPUSH
23752: CALL_OW 321
23756: PUSH
23757: LD_INT 2
23759: EQUAL
23760: AND
23761: IFFALSE 23778
// bpoints := bpoints * 1.5 ;
23763: LD_ADDR_VAR 0 10
23767: PUSH
23768: LD_VAR 0 10
23772: PUSH
23773: LD_REAL  1.50000000000000E+0000
23776: MUL
23777: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23778: LD_VAR 0 1
23782: PPUSH
23783: LD_INT 66
23785: PPUSH
23786: CALL_OW 321
23790: PUSH
23791: LD_INT 2
23793: EQUAL
23794: IFFALSE 23811
// bpoints := bpoints * 1.1 ;
23796: LD_ADDR_VAR 0 10
23800: PUSH
23801: LD_VAR 0 10
23805: PUSH
23806: LD_REAL  1.10000000000000E+0000
23809: MUL
23810: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23811: LD_ADDR_VAR 0 10
23815: PUSH
23816: LD_VAR 0 10
23820: PUSH
23821: LD_VAR 0 6
23825: PPUSH
23826: LD_INT 1
23828: PPUSH
23829: CALL_OW 259
23833: PUSH
23834: LD_REAL  1.15000000000000E+0000
23837: MUL
23838: MUL
23839: ST_TO_ADDR
// end ; unit_vehicle :
23840: GO 24670
23842: LD_INT 2
23844: DOUBLE
23845: EQUAL
23846: IFTRUE 23850
23848: GO 24658
23850: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23851: LD_VAR 0 6
23855: PPUSH
23856: CALL_OW 264
23860: PUSH
23861: LD_INT 2
23863: PUSH
23864: LD_INT 42
23866: PUSH
23867: LD_INT 24
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: LIST
23874: IN
23875: IFFALSE 23896
// points := [ 25 , 5 , 3 ] ;
23877: LD_ADDR_VAR 0 9
23881: PUSH
23882: LD_INT 25
23884: PUSH
23885: LD_INT 5
23887: PUSH
23888: LD_INT 3
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: LIST
23895: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23896: LD_VAR 0 6
23900: PPUSH
23901: CALL_OW 264
23905: PUSH
23906: LD_INT 4
23908: PUSH
23909: LD_INT 43
23911: PUSH
23912: LD_INT 25
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: LIST
23919: IN
23920: IFFALSE 23941
// points := [ 40 , 15 , 5 ] ;
23922: LD_ADDR_VAR 0 9
23926: PUSH
23927: LD_INT 40
23929: PUSH
23930: LD_INT 15
23932: PUSH
23933: LD_INT 5
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: LIST
23940: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23941: LD_VAR 0 6
23945: PPUSH
23946: CALL_OW 264
23950: PUSH
23951: LD_INT 3
23953: PUSH
23954: LD_INT 23
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: IN
23961: IFFALSE 23982
// points := [ 7 , 25 , 8 ] ;
23963: LD_ADDR_VAR 0 9
23967: PUSH
23968: LD_INT 7
23970: PUSH
23971: LD_INT 25
23973: PUSH
23974: LD_INT 8
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: LIST
23981: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23982: LD_VAR 0 6
23986: PPUSH
23987: CALL_OW 264
23991: PUSH
23992: LD_INT 5
23994: PUSH
23995: LD_INT 27
23997: PUSH
23998: LD_INT 44
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: LIST
24005: IN
24006: IFFALSE 24027
// points := [ 14 , 50 , 16 ] ;
24008: LD_ADDR_VAR 0 9
24012: PUSH
24013: LD_INT 14
24015: PUSH
24016: LD_INT 50
24018: PUSH
24019: LD_INT 16
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: LIST
24026: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
24027: LD_VAR 0 6
24031: PPUSH
24032: CALL_OW 264
24036: PUSH
24037: LD_INT 6
24039: PUSH
24040: LD_INT 46
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: IN
24047: IFFALSE 24068
// points := [ 32 , 120 , 70 ] ;
24049: LD_ADDR_VAR 0 9
24053: PUSH
24054: LD_INT 32
24056: PUSH
24057: LD_INT 120
24059: PUSH
24060: LD_INT 70
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: LIST
24067: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
24068: LD_VAR 0 6
24072: PPUSH
24073: CALL_OW 264
24077: PUSH
24078: LD_INT 7
24080: PUSH
24081: LD_INT 28
24083: PUSH
24084: LD_INT 45
24086: PUSH
24087: LD_INT 92
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: IN
24096: IFFALSE 24117
// points := [ 35 , 20 , 45 ] ;
24098: LD_ADDR_VAR 0 9
24102: PUSH
24103: LD_INT 35
24105: PUSH
24106: LD_INT 20
24108: PUSH
24109: LD_INT 45
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: LIST
24116: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
24117: LD_VAR 0 6
24121: PPUSH
24122: CALL_OW 264
24126: PUSH
24127: LD_INT 47
24129: PUSH
24130: EMPTY
24131: LIST
24132: IN
24133: IFFALSE 24154
// points := [ 67 , 45 , 75 ] ;
24135: LD_ADDR_VAR 0 9
24139: PUSH
24140: LD_INT 67
24142: PUSH
24143: LD_INT 45
24145: PUSH
24146: LD_INT 75
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: LIST
24153: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24154: LD_VAR 0 6
24158: PPUSH
24159: CALL_OW 264
24163: PUSH
24164: LD_INT 26
24166: PUSH
24167: EMPTY
24168: LIST
24169: IN
24170: IFFALSE 24191
// points := [ 120 , 30 , 80 ] ;
24172: LD_ADDR_VAR 0 9
24176: PUSH
24177: LD_INT 120
24179: PUSH
24180: LD_INT 30
24182: PUSH
24183: LD_INT 80
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: LIST
24190: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24191: LD_VAR 0 6
24195: PPUSH
24196: CALL_OW 264
24200: PUSH
24201: LD_INT 22
24203: PUSH
24204: EMPTY
24205: LIST
24206: IN
24207: IFFALSE 24228
// points := [ 40 , 1 , 1 ] ;
24209: LD_ADDR_VAR 0 9
24213: PUSH
24214: LD_INT 40
24216: PUSH
24217: LD_INT 1
24219: PUSH
24220: LD_INT 1
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: LIST
24227: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24228: LD_VAR 0 6
24232: PPUSH
24233: CALL_OW 264
24237: PUSH
24238: LD_INT 29
24240: PUSH
24241: EMPTY
24242: LIST
24243: IN
24244: IFFALSE 24265
// points := [ 70 , 200 , 400 ] ;
24246: LD_ADDR_VAR 0 9
24250: PUSH
24251: LD_INT 70
24253: PUSH
24254: LD_INT 200
24256: PUSH
24257: LD_INT 400
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: LIST
24264: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24265: LD_VAR 0 6
24269: PPUSH
24270: CALL_OW 264
24274: PUSH
24275: LD_INT 14
24277: PUSH
24278: LD_INT 53
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: IN
24285: IFFALSE 24306
// points := [ 40 , 10 , 20 ] ;
24287: LD_ADDR_VAR 0 9
24291: PUSH
24292: LD_INT 40
24294: PUSH
24295: LD_INT 10
24297: PUSH
24298: LD_INT 20
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: LIST
24305: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24306: LD_VAR 0 6
24310: PPUSH
24311: CALL_OW 264
24315: PUSH
24316: LD_INT 9
24318: PUSH
24319: EMPTY
24320: LIST
24321: IN
24322: IFFALSE 24343
// points := [ 5 , 70 , 20 ] ;
24324: LD_ADDR_VAR 0 9
24328: PUSH
24329: LD_INT 5
24331: PUSH
24332: LD_INT 70
24334: PUSH
24335: LD_INT 20
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: LIST
24342: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24343: LD_VAR 0 6
24347: PPUSH
24348: CALL_OW 264
24352: PUSH
24353: LD_INT 10
24355: PUSH
24356: EMPTY
24357: LIST
24358: IN
24359: IFFALSE 24380
// points := [ 35 , 110 , 70 ] ;
24361: LD_ADDR_VAR 0 9
24365: PUSH
24366: LD_INT 35
24368: PUSH
24369: LD_INT 110
24371: PUSH
24372: LD_INT 70
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: LIST
24379: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24380: LD_VAR 0 6
24384: PPUSH
24385: CALL_OW 265
24389: PUSH
24390: LD_INT 25
24392: EQUAL
24393: IFFALSE 24414
// points := [ 80 , 65 , 100 ] ;
24395: LD_ADDR_VAR 0 9
24399: PUSH
24400: LD_INT 80
24402: PUSH
24403: LD_INT 65
24405: PUSH
24406: LD_INT 100
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: LIST
24413: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24414: LD_VAR 0 6
24418: PPUSH
24419: CALL_OW 263
24423: PUSH
24424: LD_INT 1
24426: EQUAL
24427: IFFALSE 24462
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24429: LD_ADDR_VAR 0 10
24433: PUSH
24434: LD_VAR 0 10
24438: PUSH
24439: LD_VAR 0 6
24443: PPUSH
24444: CALL_OW 311
24448: PPUSH
24449: LD_INT 3
24451: PPUSH
24452: CALL_OW 259
24456: PUSH
24457: LD_INT 4
24459: MUL
24460: MUL
24461: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24462: LD_VAR 0 6
24466: PPUSH
24467: CALL_OW 263
24471: PUSH
24472: LD_INT 2
24474: EQUAL
24475: IFFALSE 24526
// begin j := IsControledBy ( i ) ;
24477: LD_ADDR_VAR 0 7
24481: PUSH
24482: LD_VAR 0 6
24486: PPUSH
24487: CALL_OW 312
24491: ST_TO_ADDR
// if j then
24492: LD_VAR 0 7
24496: IFFALSE 24526
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24498: LD_ADDR_VAR 0 10
24502: PUSH
24503: LD_VAR 0 10
24507: PUSH
24508: LD_VAR 0 7
24512: PPUSH
24513: LD_INT 3
24515: PPUSH
24516: CALL_OW 259
24520: PUSH
24521: LD_INT 3
24523: MUL
24524: MUL
24525: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24526: LD_VAR 0 6
24530: PPUSH
24531: CALL_OW 264
24535: PUSH
24536: LD_INT 5
24538: PUSH
24539: LD_INT 6
24541: PUSH
24542: LD_INT 46
24544: PUSH
24545: LD_INT 44
24547: PUSH
24548: LD_INT 47
24550: PUSH
24551: LD_INT 45
24553: PUSH
24554: LD_INT 28
24556: PUSH
24557: LD_INT 7
24559: PUSH
24560: LD_INT 27
24562: PUSH
24563: LD_INT 29
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: IN
24578: IFFALSE 24598
24580: PUSH
24581: LD_VAR 0 1
24585: PPUSH
24586: LD_INT 52
24588: PPUSH
24589: CALL_OW 321
24593: PUSH
24594: LD_INT 2
24596: EQUAL
24597: AND
24598: IFFALSE 24615
// bpoints := bpoints * 1.2 ;
24600: LD_ADDR_VAR 0 10
24604: PUSH
24605: LD_VAR 0 10
24609: PUSH
24610: LD_REAL  1.20000000000000E+0000
24613: MUL
24614: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24615: LD_VAR 0 6
24619: PPUSH
24620: CALL_OW 264
24624: PUSH
24625: LD_INT 6
24627: PUSH
24628: LD_INT 46
24630: PUSH
24631: LD_INT 47
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: LIST
24638: IN
24639: IFFALSE 24656
// bpoints := bpoints * 1.2 ;
24641: LD_ADDR_VAR 0 10
24645: PUSH
24646: LD_VAR 0 10
24650: PUSH
24651: LD_REAL  1.20000000000000E+0000
24654: MUL
24655: ST_TO_ADDR
// end ; unit_building :
24656: GO 24670
24658: LD_INT 3
24660: DOUBLE
24661: EQUAL
24662: IFTRUE 24666
24664: GO 24669
24666: POP
// ; end ;
24667: GO 24670
24669: POP
// for j = 1 to 3 do
24670: LD_ADDR_VAR 0 7
24674: PUSH
24675: DOUBLE
24676: LD_INT 1
24678: DEC
24679: ST_TO_ADDR
24680: LD_INT 3
24682: PUSH
24683: FOR_TO
24684: IFFALSE 24737
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24686: LD_ADDR_VAR 0 5
24690: PUSH
24691: LD_VAR 0 5
24695: PPUSH
24696: LD_VAR 0 7
24700: PPUSH
24701: LD_VAR 0 5
24705: PUSH
24706: LD_VAR 0 7
24710: ARRAY
24711: PUSH
24712: LD_VAR 0 9
24716: PUSH
24717: LD_VAR 0 7
24721: ARRAY
24722: PUSH
24723: LD_VAR 0 10
24727: MUL
24728: PLUS
24729: PPUSH
24730: CALL_OW 1
24734: ST_TO_ADDR
24735: GO 24683
24737: POP
24738: POP
// end ;
24739: GO 23212
24741: POP
24742: POP
// result := Replace ( result , 4 , tmp ) ;
24743: LD_ADDR_VAR 0 5
24747: PUSH
24748: LD_VAR 0 5
24752: PPUSH
24753: LD_INT 4
24755: PPUSH
24756: LD_VAR 0 8
24760: PPUSH
24761: CALL_OW 1
24765: ST_TO_ADDR
// end ;
24766: LD_VAR 0 5
24770: RET
// export function DangerAtRange ( unit , range ) ; begin
24771: LD_INT 0
24773: PPUSH
// if not unit then
24774: LD_VAR 0 1
24778: NOT
24779: IFFALSE 24783
// exit ;
24781: GO 24828
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24783: LD_ADDR_VAR 0 3
24787: PUSH
24788: LD_VAR 0 1
24792: PPUSH
24793: CALL_OW 255
24797: PPUSH
24798: LD_VAR 0 1
24802: PPUSH
24803: CALL_OW 250
24807: PPUSH
24808: LD_VAR 0 1
24812: PPUSH
24813: CALL_OW 251
24817: PPUSH
24818: LD_VAR 0 2
24822: PPUSH
24823: CALL 23062 0 4
24827: ST_TO_ADDR
// end ;
24828: LD_VAR 0 3
24832: RET
// export function DangerInArea ( side , area ) ; begin
24833: LD_INT 0
24835: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24836: LD_ADDR_VAR 0 3
24840: PUSH
24841: LD_VAR 0 2
24845: PPUSH
24846: LD_INT 81
24848: PUSH
24849: LD_VAR 0 1
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PPUSH
24858: CALL_OW 70
24862: ST_TO_ADDR
// end ;
24863: LD_VAR 0 3
24867: RET
// export function IsExtension ( b ) ; begin
24868: LD_INT 0
24870: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24871: LD_ADDR_VAR 0 2
24875: PUSH
24876: LD_VAR 0 1
24880: PUSH
24881: LD_INT 23
24883: PUSH
24884: LD_INT 20
24886: PUSH
24887: LD_INT 22
24889: PUSH
24890: LD_INT 17
24892: PUSH
24893: LD_INT 24
24895: PUSH
24896: LD_INT 21
24898: PUSH
24899: LD_INT 19
24901: PUSH
24902: LD_INT 16
24904: PUSH
24905: LD_INT 25
24907: PUSH
24908: LD_INT 18
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: IN
24923: ST_TO_ADDR
// end ;
24924: LD_VAR 0 2
24928: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
24929: LD_INT 0
24931: PPUSH
24932: PPUSH
24933: PPUSH
// result := [ ] ;
24934: LD_ADDR_VAR 0 4
24938: PUSH
24939: EMPTY
24940: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24941: LD_ADDR_VAR 0 5
24945: PUSH
24946: LD_VAR 0 2
24950: PPUSH
24951: LD_INT 21
24953: PUSH
24954: LD_INT 3
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PPUSH
24961: CALL_OW 70
24965: ST_TO_ADDR
// if not tmp then
24966: LD_VAR 0 5
24970: NOT
24971: IFFALSE 24975
// exit ;
24973: GO 25039
// if checkLink then
24975: LD_VAR 0 3
24979: IFFALSE 25029
// begin for i in tmp do
24981: LD_ADDR_VAR 0 6
24985: PUSH
24986: LD_VAR 0 5
24990: PUSH
24991: FOR_IN
24992: IFFALSE 25027
// if GetBase ( i ) <> base then
24994: LD_VAR 0 6
24998: PPUSH
24999: CALL_OW 274
25003: PUSH
25004: LD_VAR 0 1
25008: NONEQUAL
25009: IFFALSE 25025
// ComLinkToBase ( base , i ) ;
25011: LD_VAR 0 1
25015: PPUSH
25016: LD_VAR 0 6
25020: PPUSH
25021: CALL_OW 169
25025: GO 24991
25027: POP
25028: POP
// end ; result := tmp ;
25029: LD_ADDR_VAR 0 4
25033: PUSH
25034: LD_VAR 0 5
25038: ST_TO_ADDR
// end ;
25039: LD_VAR 0 4
25043: RET
// export function ComComplete ( units , b ) ; var i ; begin
25044: LD_INT 0
25046: PPUSH
25047: PPUSH
// if not units then
25048: LD_VAR 0 1
25052: NOT
25053: IFFALSE 25057
// exit ;
25055: GO 25147
// for i in units do
25057: LD_ADDR_VAR 0 4
25061: PUSH
25062: LD_VAR 0 1
25066: PUSH
25067: FOR_IN
25068: IFFALSE 25145
// if BuildingStatus ( b ) = bs_build then
25070: LD_VAR 0 2
25074: PPUSH
25075: CALL_OW 461
25079: PUSH
25080: LD_INT 1
25082: EQUAL
25083: IFFALSE 25143
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
25085: LD_VAR 0 4
25089: PPUSH
25090: LD_STRING h
25092: PUSH
25093: LD_VAR 0 2
25097: PPUSH
25098: CALL_OW 250
25102: PUSH
25103: LD_VAR 0 2
25107: PPUSH
25108: CALL_OW 251
25112: PUSH
25113: LD_VAR 0 2
25117: PUSH
25118: LD_INT 0
25120: PUSH
25121: LD_INT 0
25123: PUSH
25124: LD_INT 0
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: PUSH
25136: EMPTY
25137: LIST
25138: PPUSH
25139: CALL_OW 446
25143: GO 25067
25145: POP
25146: POP
// end ;
25147: LD_VAR 0 3
25151: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25152: LD_INT 0
25154: PPUSH
25155: PPUSH
25156: PPUSH
25157: PPUSH
25158: PPUSH
25159: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
25160: LD_VAR 0 1
25164: NOT
25165: IFTRUE 25182
25167: PUSH
25168: LD_VAR 0 1
25172: PPUSH
25173: CALL_OW 263
25177: PUSH
25178: LD_INT 2
25180: NONEQUAL
25181: OR
25182: IFFALSE 25186
// exit ;
25184: GO 25502
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25186: LD_ADDR_VAR 0 6
25190: PUSH
25191: LD_INT 22
25193: PUSH
25194: LD_VAR 0 1
25198: PPUSH
25199: CALL_OW 255
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 2
25210: PUSH
25211: LD_INT 30
25213: PUSH
25214: LD_INT 36
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: LD_INT 34
25223: PUSH
25224: LD_INT 31
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: LIST
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PPUSH
25240: CALL_OW 69
25244: ST_TO_ADDR
// if not tmp then
25245: LD_VAR 0 6
25249: NOT
25250: IFFALSE 25254
// exit ;
25252: GO 25502
// result := [ ] ;
25254: LD_ADDR_VAR 0 2
25258: PUSH
25259: EMPTY
25260: ST_TO_ADDR
// for i in tmp do
25261: LD_ADDR_VAR 0 3
25265: PUSH
25266: LD_VAR 0 6
25270: PUSH
25271: FOR_IN
25272: IFFALSE 25343
// begin t := UnitsInside ( i ) ;
25274: LD_ADDR_VAR 0 4
25278: PUSH
25279: LD_VAR 0 3
25283: PPUSH
25284: CALL_OW 313
25288: ST_TO_ADDR
// if t then
25289: LD_VAR 0 4
25293: IFFALSE 25341
// for j in t do
25295: LD_ADDR_VAR 0 7
25299: PUSH
25300: LD_VAR 0 4
25304: PUSH
25305: FOR_IN
25306: IFFALSE 25339
// result := Replace ( result , result + 1 , j ) ;
25308: LD_ADDR_VAR 0 2
25312: PUSH
25313: LD_VAR 0 2
25317: PPUSH
25318: LD_VAR 0 2
25322: PUSH
25323: LD_INT 1
25325: PLUS
25326: PPUSH
25327: LD_VAR 0 7
25331: PPUSH
25332: CALL_OW 1
25336: ST_TO_ADDR
25337: GO 25305
25339: POP
25340: POP
// end ;
25341: GO 25271
25343: POP
25344: POP
// if not result then
25345: LD_VAR 0 2
25349: NOT
25350: IFFALSE 25354
// exit ;
25352: GO 25502
// mech := result [ 1 ] ;
25354: LD_ADDR_VAR 0 5
25358: PUSH
25359: LD_VAR 0 2
25363: PUSH
25364: LD_INT 1
25366: ARRAY
25367: ST_TO_ADDR
// if result > 1 then
25368: LD_VAR 0 2
25372: PUSH
25373: LD_INT 1
25375: GREATER
25376: IFFALSE 25488
// begin for i = 2 to result do
25378: LD_ADDR_VAR 0 3
25382: PUSH
25383: DOUBLE
25384: LD_INT 2
25386: DEC
25387: ST_TO_ADDR
25388: LD_VAR 0 2
25392: PUSH
25393: FOR_TO
25394: IFFALSE 25486
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25396: LD_ADDR_VAR 0 4
25400: PUSH
25401: LD_VAR 0 2
25405: PUSH
25406: LD_VAR 0 3
25410: ARRAY
25411: PPUSH
25412: LD_INT 3
25414: PPUSH
25415: CALL_OW 259
25419: PUSH
25420: LD_VAR 0 2
25424: PUSH
25425: LD_VAR 0 3
25429: ARRAY
25430: PPUSH
25431: CALL_OW 432
25435: MINUS
25436: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25437: LD_VAR 0 4
25441: PUSH
25442: LD_VAR 0 5
25446: PPUSH
25447: LD_INT 3
25449: PPUSH
25450: CALL_OW 259
25454: PUSH
25455: LD_VAR 0 5
25459: PPUSH
25460: CALL_OW 432
25464: MINUS
25465: GREATEREQUAL
25466: IFFALSE 25484
// mech := result [ i ] ;
25468: LD_ADDR_VAR 0 5
25472: PUSH
25473: LD_VAR 0 2
25477: PUSH
25478: LD_VAR 0 3
25482: ARRAY
25483: ST_TO_ADDR
// end ;
25484: GO 25393
25486: POP
25487: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25488: LD_VAR 0 1
25492: PPUSH
25493: LD_VAR 0 5
25497: PPUSH
25498: CALL_OW 135
// end ;
25502: LD_VAR 0 2
25506: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25507: LD_INT 0
25509: PPUSH
25510: PPUSH
25511: PPUSH
25512: PPUSH
25513: PPUSH
25514: PPUSH
25515: PPUSH
25516: PPUSH
25517: PPUSH
25518: PPUSH
25519: PPUSH
25520: PPUSH
25521: PPUSH
// result := [ ] ;
25522: LD_ADDR_VAR 0 7
25526: PUSH
25527: EMPTY
25528: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25529: LD_VAR 0 1
25533: PPUSH
25534: CALL_OW 266
25538: PUSH
25539: LD_INT 0
25541: PUSH
25542: LD_INT 1
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: IN
25549: NOT
25550: IFFALSE 25554
// exit ;
25552: GO 27194
// if name then
25554: LD_VAR 0 3
25558: IFFALSE 25574
// SetBName ( base_dep , name ) ;
25560: LD_VAR 0 1
25564: PPUSH
25565: LD_VAR 0 3
25569: PPUSH
25570: CALL_OW 500
// base := GetBase ( base_dep ) ;
25574: LD_ADDR_VAR 0 15
25578: PUSH
25579: LD_VAR 0 1
25583: PPUSH
25584: CALL_OW 274
25588: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25589: LD_ADDR_VAR 0 16
25593: PUSH
25594: LD_VAR 0 1
25598: PPUSH
25599: CALL_OW 255
25603: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25604: LD_ADDR_VAR 0 17
25608: PUSH
25609: LD_VAR 0 1
25613: PPUSH
25614: CALL_OW 248
25618: ST_TO_ADDR
// if sources then
25619: LD_VAR 0 5
25623: IFFALSE 25670
// for i = 1 to 3 do
25625: LD_ADDR_VAR 0 8
25629: PUSH
25630: DOUBLE
25631: LD_INT 1
25633: DEC
25634: ST_TO_ADDR
25635: LD_INT 3
25637: PUSH
25638: FOR_TO
25639: IFFALSE 25668
// AddResourceType ( base , i , sources [ i ] ) ;
25641: LD_VAR 0 15
25645: PPUSH
25646: LD_VAR 0 8
25650: PPUSH
25651: LD_VAR 0 5
25655: PUSH
25656: LD_VAR 0 8
25660: ARRAY
25661: PPUSH
25662: CALL_OW 276
25666: GO 25638
25668: POP
25669: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25670: LD_ADDR_VAR 0 18
25674: PUSH
25675: LD_VAR 0 15
25679: PPUSH
25680: LD_VAR 0 2
25684: PPUSH
25685: LD_INT 1
25687: PPUSH
25688: CALL 24929 0 3
25692: ST_TO_ADDR
// InitHc ;
25693: CALL_OW 19
// InitUc ;
25697: CALL_OW 18
// uc_side := side ;
25701: LD_ADDR_OWVAR 20
25705: PUSH
25706: LD_VAR 0 16
25710: ST_TO_ADDR
// uc_nation := nation ;
25711: LD_ADDR_OWVAR 21
25715: PUSH
25716: LD_VAR 0 17
25720: ST_TO_ADDR
// if buildings then
25721: LD_VAR 0 18
25725: IFFALSE 27053
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25727: LD_ADDR_VAR 0 19
25731: PUSH
25732: LD_VAR 0 18
25736: PPUSH
25737: LD_INT 2
25739: PUSH
25740: LD_INT 30
25742: PUSH
25743: LD_INT 29
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: LD_INT 30
25752: PUSH
25753: LD_INT 30
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: LIST
25764: PPUSH
25765: CALL_OW 72
25769: ST_TO_ADDR
// if tmp then
25770: LD_VAR 0 19
25774: IFFALSE 25822
// for i in tmp do
25776: LD_ADDR_VAR 0 8
25780: PUSH
25781: LD_VAR 0 19
25785: PUSH
25786: FOR_IN
25787: IFFALSE 25820
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25789: LD_VAR 0 8
25793: PPUSH
25794: CALL_OW 250
25798: PPUSH
25799: LD_VAR 0 8
25803: PPUSH
25804: CALL_OW 251
25808: PPUSH
25809: LD_VAR 0 16
25813: PPUSH
25814: CALL_OW 441
25818: GO 25786
25820: POP
25821: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25822: LD_VAR 0 18
25826: PPUSH
25827: LD_INT 2
25829: PUSH
25830: LD_INT 30
25832: PUSH
25833: LD_INT 32
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 30
25842: PUSH
25843: LD_INT 33
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: LIST
25854: PPUSH
25855: CALL_OW 72
25859: IFFALSE 25947
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25861: LD_ADDR_VAR 0 8
25865: PUSH
25866: LD_VAR 0 18
25870: PPUSH
25871: LD_INT 2
25873: PUSH
25874: LD_INT 30
25876: PUSH
25877: LD_INT 32
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 30
25886: PUSH
25887: LD_INT 33
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: LIST
25898: PPUSH
25899: CALL_OW 72
25903: PUSH
25904: FOR_IN
25905: IFFALSE 25945
// begin if not GetBWeapon ( i ) then
25907: LD_VAR 0 8
25911: PPUSH
25912: CALL_OW 269
25916: NOT
25917: IFFALSE 25943
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25919: LD_VAR 0 8
25923: PPUSH
25924: LD_VAR 0 8
25928: PPUSH
25929: LD_VAR 0 2
25933: PPUSH
25934: CALL 27199 0 2
25938: PPUSH
25939: CALL_OW 431
// end ;
25943: GO 25904
25945: POP
25946: POP
// end ; for i = 1 to personel do
25947: LD_ADDR_VAR 0 8
25951: PUSH
25952: DOUBLE
25953: LD_INT 1
25955: DEC
25956: ST_TO_ADDR
25957: LD_VAR 0 6
25961: PUSH
25962: FOR_TO
25963: IFFALSE 27033
// begin if i > 4 then
25965: LD_VAR 0 8
25969: PUSH
25970: LD_INT 4
25972: GREATER
25973: IFFALSE 25977
// break ;
25975: GO 27033
// case i of 1 :
25977: LD_VAR 0 8
25981: PUSH
25982: LD_INT 1
25984: DOUBLE
25985: EQUAL
25986: IFTRUE 25990
25988: GO 26070
25990: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25991: LD_ADDR_VAR 0 12
25995: PUSH
25996: LD_VAR 0 18
26000: PPUSH
26001: LD_INT 22
26003: PUSH
26004: LD_VAR 0 16
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: LD_INT 58
26015: PUSH
26016: EMPTY
26017: LIST
26018: PUSH
26019: LD_INT 2
26021: PUSH
26022: LD_INT 30
26024: PUSH
26025: LD_INT 32
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 30
26034: PUSH
26035: LD_INT 4
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 30
26044: PUSH
26045: LD_INT 5
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: LIST
26062: PPUSH
26063: CALL_OW 72
26067: ST_TO_ADDR
26068: GO 26292
26070: LD_INT 2
26072: DOUBLE
26073: EQUAL
26074: IFTRUE 26078
26076: GO 26140
26078: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
26079: LD_ADDR_VAR 0 12
26083: PUSH
26084: LD_VAR 0 18
26088: PPUSH
26089: LD_INT 22
26091: PUSH
26092: LD_VAR 0 16
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: LD_INT 2
26103: PUSH
26104: LD_INT 30
26106: PUSH
26107: LD_INT 0
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 30
26116: PUSH
26117: LD_INT 1
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: LIST
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PPUSH
26133: CALL_OW 72
26137: ST_TO_ADDR
26138: GO 26292
26140: LD_INT 3
26142: DOUBLE
26143: EQUAL
26144: IFTRUE 26148
26146: GO 26210
26148: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26149: LD_ADDR_VAR 0 12
26153: PUSH
26154: LD_VAR 0 18
26158: PPUSH
26159: LD_INT 22
26161: PUSH
26162: LD_VAR 0 16
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PUSH
26171: LD_INT 2
26173: PUSH
26174: LD_INT 30
26176: PUSH
26177: LD_INT 2
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 30
26186: PUSH
26187: LD_INT 3
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: LIST
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PPUSH
26203: CALL_OW 72
26207: ST_TO_ADDR
26208: GO 26292
26210: LD_INT 4
26212: DOUBLE
26213: EQUAL
26214: IFTRUE 26218
26216: GO 26291
26218: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26219: LD_ADDR_VAR 0 12
26223: PUSH
26224: LD_VAR 0 18
26228: PPUSH
26229: LD_INT 22
26231: PUSH
26232: LD_VAR 0 16
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 2
26243: PUSH
26244: LD_INT 30
26246: PUSH
26247: LD_INT 6
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: LD_INT 30
26256: PUSH
26257: LD_INT 7
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PUSH
26264: LD_INT 30
26266: PUSH
26267: LD_INT 8
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PPUSH
26284: CALL_OW 72
26288: ST_TO_ADDR
26289: GO 26292
26291: POP
// if i = 1 then
26292: LD_VAR 0 8
26296: PUSH
26297: LD_INT 1
26299: EQUAL
26300: IFFALSE 26411
// begin tmp := [ ] ;
26302: LD_ADDR_VAR 0 19
26306: PUSH
26307: EMPTY
26308: ST_TO_ADDR
// for j in f do
26309: LD_ADDR_VAR 0 9
26313: PUSH
26314: LD_VAR 0 12
26318: PUSH
26319: FOR_IN
26320: IFFALSE 26393
// if GetBType ( j ) = b_bunker then
26322: LD_VAR 0 9
26326: PPUSH
26327: CALL_OW 266
26331: PUSH
26332: LD_INT 32
26334: EQUAL
26335: IFFALSE 26362
// tmp := Insert ( tmp , 1 , j ) else
26337: LD_ADDR_VAR 0 19
26341: PUSH
26342: LD_VAR 0 19
26346: PPUSH
26347: LD_INT 1
26349: PPUSH
26350: LD_VAR 0 9
26354: PPUSH
26355: CALL_OW 2
26359: ST_TO_ADDR
26360: GO 26391
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26362: LD_ADDR_VAR 0 19
26366: PUSH
26367: LD_VAR 0 19
26371: PPUSH
26372: LD_VAR 0 19
26376: PUSH
26377: LD_INT 1
26379: PLUS
26380: PPUSH
26381: LD_VAR 0 9
26385: PPUSH
26386: CALL_OW 2
26390: ST_TO_ADDR
26391: GO 26319
26393: POP
26394: POP
// if tmp then
26395: LD_VAR 0 19
26399: IFFALSE 26411
// f := tmp ;
26401: LD_ADDR_VAR 0 12
26405: PUSH
26406: LD_VAR 0 19
26410: ST_TO_ADDR
// end ; x := personel [ i ] ;
26411: LD_ADDR_VAR 0 13
26415: PUSH
26416: LD_VAR 0 6
26420: PUSH
26421: LD_VAR 0 8
26425: ARRAY
26426: ST_TO_ADDR
// if x = - 1 then
26427: LD_VAR 0 13
26431: PUSH
26432: LD_INT 1
26434: NEG
26435: EQUAL
26436: IFFALSE 26647
// begin for j in f do
26438: LD_ADDR_VAR 0 9
26442: PUSH
26443: LD_VAR 0 12
26447: PUSH
26448: FOR_IN
26449: IFFALSE 26643
// repeat InitHc ;
26451: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26455: LD_VAR 0 9
26459: PPUSH
26460: CALL_OW 266
26464: PUSH
26465: LD_INT 5
26467: EQUAL
26468: IFFALSE 26538
// begin if UnitsInside ( j ) < 3 then
26470: LD_VAR 0 9
26474: PPUSH
26475: CALL_OW 313
26479: PUSH
26480: LD_INT 3
26482: LESS
26483: IFFALSE 26519
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26485: LD_INT 0
26487: PPUSH
26488: LD_INT 5
26490: PUSH
26491: LD_INT 8
26493: PUSH
26494: LD_INT 9
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: LIST
26501: PUSH
26502: LD_VAR 0 17
26506: ARRAY
26507: PPUSH
26508: LD_VAR 0 4
26512: PPUSH
26513: CALL_OW 380
26517: GO 26536
// PrepareHuman ( false , i , skill ) ;
26519: LD_INT 0
26521: PPUSH
26522: LD_VAR 0 8
26526: PPUSH
26527: LD_VAR 0 4
26531: PPUSH
26532: CALL_OW 380
// end else
26536: GO 26555
// PrepareHuman ( false , i , skill ) ;
26538: LD_INT 0
26540: PPUSH
26541: LD_VAR 0 8
26545: PPUSH
26546: LD_VAR 0 4
26550: PPUSH
26551: CALL_OW 380
// un := CreateHuman ;
26555: LD_ADDR_VAR 0 14
26559: PUSH
26560: CALL_OW 44
26564: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26565: LD_ADDR_VAR 0 7
26569: PUSH
26570: LD_VAR 0 7
26574: PPUSH
26575: LD_INT 1
26577: PPUSH
26578: LD_VAR 0 14
26582: PPUSH
26583: CALL_OW 2
26587: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26588: LD_VAR 0 14
26592: PPUSH
26593: LD_VAR 0 9
26597: PPUSH
26598: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26602: LD_VAR 0 9
26606: PPUSH
26607: CALL_OW 313
26611: PUSH
26612: LD_INT 6
26614: EQUAL
26615: IFTRUE 26639
26617: PUSH
26618: LD_VAR 0 9
26622: PPUSH
26623: CALL_OW 266
26627: PUSH
26628: LD_INT 32
26630: PUSH
26631: LD_INT 31
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: IN
26638: OR
26639: IFFALSE 26451
26641: GO 26448
26643: POP
26644: POP
// end else
26645: GO 27031
// for j = 1 to x do
26647: LD_ADDR_VAR 0 9
26651: PUSH
26652: DOUBLE
26653: LD_INT 1
26655: DEC
26656: ST_TO_ADDR
26657: LD_VAR 0 13
26661: PUSH
26662: FOR_TO
26663: IFFALSE 27029
// begin InitHc ;
26665: CALL_OW 19
// if not f then
26669: LD_VAR 0 12
26673: NOT
26674: IFFALSE 26763
// begin PrepareHuman ( false , i , skill ) ;
26676: LD_INT 0
26678: PPUSH
26679: LD_VAR 0 8
26683: PPUSH
26684: LD_VAR 0 4
26688: PPUSH
26689: CALL_OW 380
// un := CreateHuman ;
26693: LD_ADDR_VAR 0 14
26697: PUSH
26698: CALL_OW 44
26702: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26703: LD_ADDR_VAR 0 7
26707: PUSH
26708: LD_VAR 0 7
26712: PPUSH
26713: LD_INT 1
26715: PPUSH
26716: LD_VAR 0 14
26720: PPUSH
26721: CALL_OW 2
26725: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26726: LD_VAR 0 14
26730: PPUSH
26731: LD_VAR 0 1
26735: PPUSH
26736: CALL_OW 250
26740: PPUSH
26741: LD_VAR 0 1
26745: PPUSH
26746: CALL_OW 251
26750: PPUSH
26751: LD_INT 10
26753: PPUSH
26754: LD_INT 0
26756: PPUSH
26757: CALL_OW 50
// continue ;
26761: GO 26662
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26763: LD_VAR 0 12
26767: PUSH
26768: LD_INT 1
26770: ARRAY
26771: PPUSH
26772: CALL_OW 313
26776: IFFALSE 26804
26778: PUSH
26779: LD_VAR 0 12
26783: PUSH
26784: LD_INT 1
26786: ARRAY
26787: PPUSH
26788: CALL_OW 266
26792: PUSH
26793: LD_INT 32
26795: PUSH
26796: LD_INT 31
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: IN
26803: AND
26804: IFTRUE 26825
26806: PUSH
26807: LD_VAR 0 12
26811: PUSH
26812: LD_INT 1
26814: ARRAY
26815: PPUSH
26816: CALL_OW 313
26820: PUSH
26821: LD_INT 6
26823: EQUAL
26824: OR
26825: IFFALSE 26845
// f := Delete ( f , 1 ) ;
26827: LD_ADDR_VAR 0 12
26831: PUSH
26832: LD_VAR 0 12
26836: PPUSH
26837: LD_INT 1
26839: PPUSH
26840: CALL_OW 3
26844: ST_TO_ADDR
// if not f then
26845: LD_VAR 0 12
26849: NOT
26850: IFFALSE 26868
// begin x := x + 2 ;
26852: LD_ADDR_VAR 0 13
26856: PUSH
26857: LD_VAR 0 13
26861: PUSH
26862: LD_INT 2
26864: PLUS
26865: ST_TO_ADDR
// continue ;
26866: GO 26662
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26868: LD_VAR 0 12
26872: PUSH
26873: LD_INT 1
26875: ARRAY
26876: PPUSH
26877: CALL_OW 266
26881: PUSH
26882: LD_INT 5
26884: EQUAL
26885: IFFALSE 26959
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26887: LD_VAR 0 12
26891: PUSH
26892: LD_INT 1
26894: ARRAY
26895: PPUSH
26896: CALL_OW 313
26900: PUSH
26901: LD_INT 3
26903: LESS
26904: IFFALSE 26940
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26906: LD_INT 0
26908: PPUSH
26909: LD_INT 5
26911: PUSH
26912: LD_INT 8
26914: PUSH
26915: LD_INT 9
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: LIST
26922: PUSH
26923: LD_VAR 0 17
26927: ARRAY
26928: PPUSH
26929: LD_VAR 0 4
26933: PPUSH
26934: CALL_OW 380
26938: GO 26957
// PrepareHuman ( false , i , skill ) ;
26940: LD_INT 0
26942: PPUSH
26943: LD_VAR 0 8
26947: PPUSH
26948: LD_VAR 0 4
26952: PPUSH
26953: CALL_OW 380
// end else
26957: GO 26976
// PrepareHuman ( false , i , skill ) ;
26959: LD_INT 0
26961: PPUSH
26962: LD_VAR 0 8
26966: PPUSH
26967: LD_VAR 0 4
26971: PPUSH
26972: CALL_OW 380
// un := CreateHuman ;
26976: LD_ADDR_VAR 0 14
26980: PUSH
26981: CALL_OW 44
26985: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26986: LD_ADDR_VAR 0 7
26990: PUSH
26991: LD_VAR 0 7
26995: PPUSH
26996: LD_INT 1
26998: PPUSH
26999: LD_VAR 0 14
27003: PPUSH
27004: CALL_OW 2
27008: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
27009: LD_VAR 0 14
27013: PPUSH
27014: LD_VAR 0 12
27018: PUSH
27019: LD_INT 1
27021: ARRAY
27022: PPUSH
27023: CALL_OW 52
// end ;
27027: GO 26662
27029: POP
27030: POP
// end ;
27031: GO 25962
27033: POP
27034: POP
// result := result ^ buildings ;
27035: LD_ADDR_VAR 0 7
27039: PUSH
27040: LD_VAR 0 7
27044: PUSH
27045: LD_VAR 0 18
27049: ADD
27050: ST_TO_ADDR
// end else
27051: GO 27194
// begin for i = 1 to personel do
27053: LD_ADDR_VAR 0 8
27057: PUSH
27058: DOUBLE
27059: LD_INT 1
27061: DEC
27062: ST_TO_ADDR
27063: LD_VAR 0 6
27067: PUSH
27068: FOR_TO
27069: IFFALSE 27192
// begin if i > 4 then
27071: LD_VAR 0 8
27075: PUSH
27076: LD_INT 4
27078: GREATER
27079: IFFALSE 27083
// break ;
27081: GO 27192
// x := personel [ i ] ;
27083: LD_ADDR_VAR 0 13
27087: PUSH
27088: LD_VAR 0 6
27092: PUSH
27093: LD_VAR 0 8
27097: ARRAY
27098: ST_TO_ADDR
// if x = - 1 then
27099: LD_VAR 0 13
27103: PUSH
27104: LD_INT 1
27106: NEG
27107: EQUAL
27108: IFFALSE 27112
// continue ;
27110: GO 27068
// PrepareHuman ( false , i , skill ) ;
27112: LD_INT 0
27114: PPUSH
27115: LD_VAR 0 8
27119: PPUSH
27120: LD_VAR 0 4
27124: PPUSH
27125: CALL_OW 380
// un := CreateHuman ;
27129: LD_ADDR_VAR 0 14
27133: PUSH
27134: CALL_OW 44
27138: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27139: LD_VAR 0 14
27143: PPUSH
27144: LD_VAR 0 1
27148: PPUSH
27149: CALL_OW 250
27153: PPUSH
27154: LD_VAR 0 1
27158: PPUSH
27159: CALL_OW 251
27163: PPUSH
27164: LD_INT 10
27166: PPUSH
27167: LD_INT 0
27169: PPUSH
27170: CALL_OW 50
// result := result ^ un ;
27174: LD_ADDR_VAR 0 7
27178: PUSH
27179: LD_VAR 0 7
27183: PUSH
27184: LD_VAR 0 14
27188: ADD
27189: ST_TO_ADDR
// end ;
27190: GO 27068
27192: POP
27193: POP
// end ; end ;
27194: LD_VAR 0 7
27198: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27199: LD_INT 0
27201: PPUSH
27202: PPUSH
27203: PPUSH
27204: PPUSH
27205: PPUSH
27206: PPUSH
27207: PPUSH
27208: PPUSH
27209: PPUSH
27210: PPUSH
27211: PPUSH
27212: PPUSH
27213: PPUSH
27214: PPUSH
27215: PPUSH
27216: PPUSH
// result := false ;
27217: LD_ADDR_VAR 0 3
27221: PUSH
27222: LD_INT 0
27224: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27225: LD_VAR 0 1
27229: NOT
27230: IFTRUE 27255
27232: PUSH
27233: LD_VAR 0 1
27237: PPUSH
27238: CALL_OW 266
27242: PUSH
27243: LD_INT 32
27245: PUSH
27246: LD_INT 33
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: IN
27253: NOT
27254: OR
27255: IFFALSE 27259
// exit ;
27257: GO 28394
// nat := GetNation ( tower ) ;
27259: LD_ADDR_VAR 0 12
27263: PUSH
27264: LD_VAR 0 1
27268: PPUSH
27269: CALL_OW 248
27273: ST_TO_ADDR
// side := GetSide ( tower ) ;
27274: LD_ADDR_VAR 0 16
27278: PUSH
27279: LD_VAR 0 1
27283: PPUSH
27284: CALL_OW 255
27288: ST_TO_ADDR
// x := GetX ( tower ) ;
27289: LD_ADDR_VAR 0 10
27293: PUSH
27294: LD_VAR 0 1
27298: PPUSH
27299: CALL_OW 250
27303: ST_TO_ADDR
// y := GetY ( tower ) ;
27304: LD_ADDR_VAR 0 11
27308: PUSH
27309: LD_VAR 0 1
27313: PPUSH
27314: CALL_OW 251
27318: ST_TO_ADDR
// if not x or not y then
27319: LD_VAR 0 10
27323: NOT
27324: IFTRUE 27333
27326: PUSH
27327: LD_VAR 0 11
27331: NOT
27332: OR
27333: IFFALSE 27337
// exit ;
27335: GO 28394
// weapon := 0 ;
27337: LD_ADDR_VAR 0 18
27341: PUSH
27342: LD_INT 0
27344: ST_TO_ADDR
// fac_list := [ ] ;
27345: LD_ADDR_VAR 0 17
27349: PUSH
27350: EMPTY
27351: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27352: LD_ADDR_VAR 0 6
27356: PUSH
27357: LD_VAR 0 1
27361: PPUSH
27362: CALL_OW 274
27366: PPUSH
27367: LD_VAR 0 2
27371: PPUSH
27372: LD_INT 0
27374: PPUSH
27375: CALL 24929 0 3
27379: PPUSH
27380: LD_INT 30
27382: PUSH
27383: LD_INT 3
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PPUSH
27390: CALL_OW 72
27394: ST_TO_ADDR
// if not factories then
27395: LD_VAR 0 6
27399: NOT
27400: IFFALSE 27404
// exit ;
27402: GO 28394
// for i in factories do
27404: LD_ADDR_VAR 0 8
27408: PUSH
27409: LD_VAR 0 6
27413: PUSH
27414: FOR_IN
27415: IFFALSE 27440
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27417: LD_ADDR_VAR 0 17
27421: PUSH
27422: LD_VAR 0 17
27426: PUSH
27427: LD_VAR 0 8
27431: PPUSH
27432: CALL_OW 478
27436: UNION
27437: ST_TO_ADDR
27438: GO 27414
27440: POP
27441: POP
// if not fac_list then
27442: LD_VAR 0 17
27446: NOT
27447: IFFALSE 27451
// exit ;
27449: GO 28394
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27451: LD_ADDR_VAR 0 5
27455: PUSH
27456: LD_INT 4
27458: PUSH
27459: LD_INT 5
27461: PUSH
27462: LD_INT 9
27464: PUSH
27465: LD_INT 10
27467: PUSH
27468: LD_INT 6
27470: PUSH
27471: LD_INT 7
27473: PUSH
27474: LD_INT 11
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 27
27488: PUSH
27489: LD_INT 28
27491: PUSH
27492: LD_INT 26
27494: PUSH
27495: LD_INT 30
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 43
27506: PUSH
27507: LD_INT 44
27509: PUSH
27510: LD_INT 46
27512: PUSH
27513: LD_INT 45
27515: PUSH
27516: LD_INT 47
27518: PUSH
27519: LD_INT 49
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: LIST
27534: PUSH
27535: LD_VAR 0 12
27539: ARRAY
27540: ST_TO_ADDR
// list := list isect fac_list ;
27541: LD_ADDR_VAR 0 5
27545: PUSH
27546: LD_VAR 0 5
27550: PUSH
27551: LD_VAR 0 17
27555: ISECT
27556: ST_TO_ADDR
// if not list then
27557: LD_VAR 0 5
27561: NOT
27562: IFFALSE 27566
// exit ;
27564: GO 28394
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27566: LD_VAR 0 12
27570: PUSH
27571: LD_INT 3
27573: EQUAL
27574: IFFALSE 27586
27576: PUSH
27577: LD_INT 49
27579: PUSH
27580: LD_VAR 0 5
27584: IN
27585: AND
27586: IFFALSE 27606
27588: PUSH
27589: LD_INT 31
27591: PPUSH
27592: LD_VAR 0 16
27596: PPUSH
27597: CALL_OW 321
27601: PUSH
27602: LD_INT 2
27604: EQUAL
27605: AND
27606: IFFALSE 27666
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27608: LD_INT 22
27610: PUSH
27611: LD_VAR 0 16
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 35
27622: PUSH
27623: LD_INT 49
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 91
27632: PUSH
27633: LD_VAR 0 1
27637: PUSH
27638: LD_INT 10
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: LIST
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: LIST
27650: PPUSH
27651: CALL_OW 69
27655: NOT
27656: IFFALSE 27666
// weapon := ru_time_lapser ;
27658: LD_ADDR_VAR 0 18
27662: PUSH
27663: LD_INT 49
27665: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27666: LD_VAR 0 12
27670: PUSH
27671: LD_INT 1
27673: PUSH
27674: LD_INT 2
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: IN
27681: IFFALSE 27705
27683: PUSH
27684: LD_INT 11
27686: PUSH
27687: LD_VAR 0 5
27691: IN
27692: IFTRUE 27704
27694: PUSH
27695: LD_INT 30
27697: PUSH
27698: LD_VAR 0 5
27702: IN
27703: OR
27704: AND
27705: IFFALSE 27725
27707: PUSH
27708: LD_INT 6
27710: PPUSH
27711: LD_VAR 0 16
27715: PPUSH
27716: CALL_OW 321
27720: PUSH
27721: LD_INT 2
27723: EQUAL
27724: AND
27725: IFFALSE 27892
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27727: LD_INT 22
27729: PUSH
27730: LD_VAR 0 16
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: PUSH
27739: LD_INT 2
27741: PUSH
27742: LD_INT 35
27744: PUSH
27745: LD_INT 11
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: LD_INT 35
27754: PUSH
27755: LD_INT 30
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 91
27769: PUSH
27770: LD_VAR 0 1
27774: PUSH
27775: LD_INT 18
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: LIST
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: LIST
27787: PPUSH
27788: CALL_OW 69
27792: NOT
27793: IFFALSE 27869
27795: PUSH
27796: LD_INT 22
27798: PUSH
27799: LD_VAR 0 16
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 2
27810: PUSH
27811: LD_INT 30
27813: PUSH
27814: LD_INT 32
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 30
27823: PUSH
27824: LD_INT 33
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: LIST
27835: PUSH
27836: LD_INT 91
27838: PUSH
27839: LD_VAR 0 1
27843: PUSH
27844: LD_INT 12
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: LIST
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: LIST
27856: PUSH
27857: EMPTY
27858: LIST
27859: PPUSH
27860: CALL_OW 69
27864: PUSH
27865: LD_INT 2
27867: GREATER
27868: AND
27869: IFFALSE 27892
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27871: LD_ADDR_VAR 0 18
27875: PUSH
27876: LD_INT 11
27878: PUSH
27879: LD_INT 30
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: LD_VAR 0 12
27890: ARRAY
27891: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27892: LD_VAR 0 18
27896: NOT
27897: IFFALSE 27917
27899: PUSH
27900: LD_INT 40
27902: PPUSH
27903: LD_VAR 0 16
27907: PPUSH
27908: CALL_OW 321
27912: PUSH
27913: LD_INT 2
27915: EQUAL
27916: AND
27917: IFFALSE 27953
27919: PUSH
27920: LD_INT 7
27922: PUSH
27923: LD_VAR 0 5
27927: IN
27928: IFTRUE 27940
27930: PUSH
27931: LD_INT 28
27933: PUSH
27934: LD_VAR 0 5
27938: IN
27939: OR
27940: IFTRUE 27952
27942: PUSH
27943: LD_INT 45
27945: PUSH
27946: LD_VAR 0 5
27950: IN
27951: OR
27952: AND
27953: IFFALSE 28207
// begin hex := GetHexInfo ( x , y ) ;
27955: LD_ADDR_VAR 0 4
27959: PUSH
27960: LD_VAR 0 10
27964: PPUSH
27965: LD_VAR 0 11
27969: PPUSH
27970: CALL_OW 546
27974: ST_TO_ADDR
// if hex [ 1 ] then
27975: LD_VAR 0 4
27979: PUSH
27980: LD_INT 1
27982: ARRAY
27983: IFFALSE 27987
// exit ;
27985: GO 28394
// height := hex [ 2 ] ;
27987: LD_ADDR_VAR 0 15
27991: PUSH
27992: LD_VAR 0 4
27996: PUSH
27997: LD_INT 2
27999: ARRAY
28000: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
28001: LD_ADDR_VAR 0 14
28005: PUSH
28006: LD_INT 0
28008: PUSH
28009: LD_INT 2
28011: PUSH
28012: LD_INT 3
28014: PUSH
28015: LD_INT 5
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: ST_TO_ADDR
// for i in tmp do
28024: LD_ADDR_VAR 0 8
28028: PUSH
28029: LD_VAR 0 14
28033: PUSH
28034: FOR_IN
28035: IFFALSE 28205
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
28037: LD_ADDR_VAR 0 9
28041: PUSH
28042: LD_VAR 0 10
28046: PPUSH
28047: LD_VAR 0 8
28051: PPUSH
28052: LD_INT 5
28054: PPUSH
28055: CALL_OW 272
28059: PUSH
28060: LD_VAR 0 11
28064: PPUSH
28065: LD_VAR 0 8
28069: PPUSH
28070: LD_INT 5
28072: PPUSH
28073: CALL_OW 273
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
28082: LD_VAR 0 9
28086: PUSH
28087: LD_INT 1
28089: ARRAY
28090: PPUSH
28091: LD_VAR 0 9
28095: PUSH
28096: LD_INT 2
28098: ARRAY
28099: PPUSH
28100: CALL_OW 488
28104: IFFALSE 28203
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
28106: LD_ADDR_VAR 0 4
28110: PUSH
28111: LD_VAR 0 9
28115: PUSH
28116: LD_INT 1
28118: ARRAY
28119: PPUSH
28120: LD_VAR 0 9
28124: PUSH
28125: LD_INT 2
28127: ARRAY
28128: PPUSH
28129: CALL_OW 546
28133: ST_TO_ADDR
// if hex [ 1 ] then
28134: LD_VAR 0 4
28138: PUSH
28139: LD_INT 1
28141: ARRAY
28142: IFFALSE 28146
// continue ;
28144: GO 28034
// h := hex [ 2 ] ;
28146: LD_ADDR_VAR 0 13
28150: PUSH
28151: LD_VAR 0 4
28155: PUSH
28156: LD_INT 2
28158: ARRAY
28159: ST_TO_ADDR
// if h + 7 < height then
28160: LD_VAR 0 13
28164: PUSH
28165: LD_INT 7
28167: PLUS
28168: PUSH
28169: LD_VAR 0 15
28173: LESS
28174: IFFALSE 28203
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28176: LD_ADDR_VAR 0 18
28180: PUSH
28181: LD_INT 7
28183: PUSH
28184: LD_INT 28
28186: PUSH
28187: LD_INT 45
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: LIST
28194: PUSH
28195: LD_VAR 0 12
28199: ARRAY
28200: ST_TO_ADDR
// break ;
28201: GO 28205
// end ; end ; end ;
28203: GO 28034
28205: POP
28206: POP
// end ; if not weapon then
28207: LD_VAR 0 18
28211: NOT
28212: IFFALSE 28272
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28214: LD_ADDR_VAR 0 5
28218: PUSH
28219: LD_VAR 0 5
28223: PUSH
28224: LD_INT 11
28226: PUSH
28227: LD_INT 30
28229: PUSH
28230: LD_INT 49
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: LIST
28237: DIFF
28238: ST_TO_ADDR
// if not list then
28239: LD_VAR 0 5
28243: NOT
28244: IFFALSE 28248
// exit ;
28246: GO 28394
// weapon := list [ rand ( 1 , list ) ] ;
28248: LD_ADDR_VAR 0 18
28252: PUSH
28253: LD_VAR 0 5
28257: PUSH
28258: LD_INT 1
28260: PPUSH
28261: LD_VAR 0 5
28265: PPUSH
28266: CALL_OW 12
28270: ARRAY
28271: ST_TO_ADDR
// end ; if weapon then
28272: LD_VAR 0 18
28276: IFFALSE 28394
// begin tmp := CostOfWeapon ( weapon ) ;
28278: LD_ADDR_VAR 0 14
28282: PUSH
28283: LD_VAR 0 18
28287: PPUSH
28288: CALL_OW 451
28292: ST_TO_ADDR
// j := GetBase ( tower ) ;
28293: LD_ADDR_VAR 0 9
28297: PUSH
28298: LD_VAR 0 1
28302: PPUSH
28303: CALL_OW 274
28307: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
28308: LD_VAR 0 9
28312: PPUSH
28313: LD_INT 1
28315: PPUSH
28316: CALL_OW 275
28320: PUSH
28321: LD_VAR 0 14
28325: PUSH
28326: LD_INT 1
28328: ARRAY
28329: GREATEREQUAL
28330: IFFALSE 28356
28332: PUSH
28333: LD_VAR 0 9
28337: PPUSH
28338: LD_INT 2
28340: PPUSH
28341: CALL_OW 275
28345: PUSH
28346: LD_VAR 0 14
28350: PUSH
28351: LD_INT 2
28353: ARRAY
28354: GREATEREQUAL
28355: AND
28356: IFFALSE 28382
28358: PUSH
28359: LD_VAR 0 9
28363: PPUSH
28364: LD_INT 3
28366: PPUSH
28367: CALL_OW 275
28371: PUSH
28372: LD_VAR 0 14
28376: PUSH
28377: LD_INT 3
28379: ARRAY
28380: GREATEREQUAL
28381: AND
28382: IFFALSE 28394
// result := weapon ;
28384: LD_ADDR_VAR 0 3
28388: PUSH
28389: LD_VAR 0 18
28393: ST_TO_ADDR
// end ; end ;
28394: LD_VAR 0 3
28398: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28399: LD_INT 0
28401: PPUSH
28402: PPUSH
// result := true ;
28403: LD_ADDR_VAR 0 3
28407: PUSH
28408: LD_INT 1
28410: ST_TO_ADDR
// if array1 = array2 then
28411: LD_VAR 0 1
28415: PUSH
28416: LD_VAR 0 2
28420: EQUAL
28421: IFFALSE 28481
// begin for i = 1 to array1 do
28423: LD_ADDR_VAR 0 4
28427: PUSH
28428: DOUBLE
28429: LD_INT 1
28431: DEC
28432: ST_TO_ADDR
28433: LD_VAR 0 1
28437: PUSH
28438: FOR_TO
28439: IFFALSE 28477
// if array1 [ i ] <> array2 [ i ] then
28441: LD_VAR 0 1
28445: PUSH
28446: LD_VAR 0 4
28450: ARRAY
28451: PUSH
28452: LD_VAR 0 2
28456: PUSH
28457: LD_VAR 0 4
28461: ARRAY
28462: NONEQUAL
28463: IFFALSE 28475
// begin result := false ;
28465: LD_ADDR_VAR 0 3
28469: PUSH
28470: LD_INT 0
28472: ST_TO_ADDR
// break ;
28473: GO 28477
// end ;
28475: GO 28438
28477: POP
28478: POP
// end else
28479: GO 28489
// result := false ;
28481: LD_ADDR_VAR 0 3
28485: PUSH
28486: LD_INT 0
28488: ST_TO_ADDR
// end ;
28489: LD_VAR 0 3
28493: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28494: LD_INT 0
28496: PPUSH
28497: PPUSH
// if not array1 or not array2 then
28498: LD_VAR 0 1
28502: NOT
28503: IFTRUE 28512
28505: PUSH
28506: LD_VAR 0 2
28510: NOT
28511: OR
28512: IFFALSE 28516
// exit ;
28514: GO 28580
// result := true ;
28516: LD_ADDR_VAR 0 3
28520: PUSH
28521: LD_INT 1
28523: ST_TO_ADDR
// for i = 1 to array1 do
28524: LD_ADDR_VAR 0 4
28528: PUSH
28529: DOUBLE
28530: LD_INT 1
28532: DEC
28533: ST_TO_ADDR
28534: LD_VAR 0 1
28538: PUSH
28539: FOR_TO
28540: IFFALSE 28578
// if array1 [ i ] <> array2 [ i ] then
28542: LD_VAR 0 1
28546: PUSH
28547: LD_VAR 0 4
28551: ARRAY
28552: PUSH
28553: LD_VAR 0 2
28557: PUSH
28558: LD_VAR 0 4
28562: ARRAY
28563: NONEQUAL
28564: IFFALSE 28576
// begin result := false ;
28566: LD_ADDR_VAR 0 3
28570: PUSH
28571: LD_INT 0
28573: ST_TO_ADDR
// break ;
28574: GO 28578
// end ;
28576: GO 28539
28578: POP
28579: POP
// end ;
28580: LD_VAR 0 3
28584: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28585: LD_INT 0
28587: PPUSH
28588: PPUSH
28589: PPUSH
// pom := GetBase ( fac ) ;
28590: LD_ADDR_VAR 0 5
28594: PUSH
28595: LD_VAR 0 1
28599: PPUSH
28600: CALL_OW 274
28604: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28605: LD_ADDR_VAR 0 4
28609: PUSH
28610: LD_VAR 0 2
28614: PUSH
28615: LD_INT 1
28617: ARRAY
28618: PPUSH
28619: LD_VAR 0 2
28623: PUSH
28624: LD_INT 2
28626: ARRAY
28627: PPUSH
28628: LD_VAR 0 2
28632: PUSH
28633: LD_INT 3
28635: ARRAY
28636: PPUSH
28637: LD_VAR 0 2
28641: PUSH
28642: LD_INT 4
28644: ARRAY
28645: PPUSH
28646: CALL_OW 449
28650: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28651: LD_ADDR_VAR 0 3
28655: PUSH
28656: LD_VAR 0 5
28660: PPUSH
28661: LD_INT 1
28663: PPUSH
28664: CALL_OW 275
28668: PUSH
28669: LD_VAR 0 4
28673: PUSH
28674: LD_INT 1
28676: ARRAY
28677: GREATEREQUAL
28678: IFFALSE 28704
28680: PUSH
28681: LD_VAR 0 5
28685: PPUSH
28686: LD_INT 2
28688: PPUSH
28689: CALL_OW 275
28693: PUSH
28694: LD_VAR 0 4
28698: PUSH
28699: LD_INT 2
28701: ARRAY
28702: GREATEREQUAL
28703: AND
28704: IFFALSE 28730
28706: PUSH
28707: LD_VAR 0 5
28711: PPUSH
28712: LD_INT 3
28714: PPUSH
28715: CALL_OW 275
28719: PUSH
28720: LD_VAR 0 4
28724: PUSH
28725: LD_INT 3
28727: ARRAY
28728: GREATEREQUAL
28729: AND
28730: ST_TO_ADDR
// end ;
28731: LD_VAR 0 3
28735: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28736: LD_INT 0
28738: PPUSH
28739: PPUSH
28740: PPUSH
28741: PPUSH
// pom := GetBase ( building ) ;
28742: LD_ADDR_VAR 0 3
28746: PUSH
28747: LD_VAR 0 1
28751: PPUSH
28752: CALL_OW 274
28756: ST_TO_ADDR
// if not pom then
28757: LD_VAR 0 3
28761: NOT
28762: IFFALSE 28766
// exit ;
28764: GO 28940
// btype := GetBType ( building ) ;
28766: LD_ADDR_VAR 0 5
28770: PUSH
28771: LD_VAR 0 1
28775: PPUSH
28776: CALL_OW 266
28780: ST_TO_ADDR
// if btype = b_armoury then
28781: LD_VAR 0 5
28785: PUSH
28786: LD_INT 4
28788: EQUAL
28789: IFFALSE 28799
// btype := b_barracks ;
28791: LD_ADDR_VAR 0 5
28795: PUSH
28796: LD_INT 5
28798: ST_TO_ADDR
// if btype = b_depot then
28799: LD_VAR 0 5
28803: PUSH
28804: LD_INT 0
28806: EQUAL
28807: IFFALSE 28817
// btype := b_warehouse ;
28809: LD_ADDR_VAR 0 5
28813: PUSH
28814: LD_INT 1
28816: ST_TO_ADDR
// if btype = b_workshop then
28817: LD_VAR 0 5
28821: PUSH
28822: LD_INT 2
28824: EQUAL
28825: IFFALSE 28835
// btype := b_factory ;
28827: LD_ADDR_VAR 0 5
28831: PUSH
28832: LD_INT 3
28834: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28835: LD_ADDR_VAR 0 4
28839: PUSH
28840: LD_VAR 0 5
28844: PPUSH
28845: LD_VAR 0 1
28849: PPUSH
28850: CALL_OW 248
28854: PPUSH
28855: CALL_OW 450
28859: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28860: LD_ADDR_VAR 0 2
28864: PUSH
28865: LD_VAR 0 3
28869: PPUSH
28870: LD_INT 1
28872: PPUSH
28873: CALL_OW 275
28877: PUSH
28878: LD_VAR 0 4
28882: PUSH
28883: LD_INT 1
28885: ARRAY
28886: GREATEREQUAL
28887: IFFALSE 28913
28889: PUSH
28890: LD_VAR 0 3
28894: PPUSH
28895: LD_INT 2
28897: PPUSH
28898: CALL_OW 275
28902: PUSH
28903: LD_VAR 0 4
28907: PUSH
28908: LD_INT 2
28910: ARRAY
28911: GREATEREQUAL
28912: AND
28913: IFFALSE 28939
28915: PUSH
28916: LD_VAR 0 3
28920: PPUSH
28921: LD_INT 3
28923: PPUSH
28924: CALL_OW 275
28928: PUSH
28929: LD_VAR 0 4
28933: PUSH
28934: LD_INT 3
28936: ARRAY
28937: GREATEREQUAL
28938: AND
28939: ST_TO_ADDR
// end ;
28940: LD_VAR 0 2
28944: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28945: LD_INT 0
28947: PPUSH
28948: PPUSH
28949: PPUSH
// pom := GetBase ( building ) ;
28950: LD_ADDR_VAR 0 4
28954: PUSH
28955: LD_VAR 0 1
28959: PPUSH
28960: CALL_OW 274
28964: ST_TO_ADDR
// if not pom then
28965: LD_VAR 0 4
28969: NOT
28970: IFFALSE 28974
// exit ;
28972: GO 29079
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28974: LD_ADDR_VAR 0 5
28978: PUSH
28979: LD_VAR 0 2
28983: PPUSH
28984: LD_VAR 0 1
28988: PPUSH
28989: CALL_OW 248
28993: PPUSH
28994: CALL_OW 450
28998: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28999: LD_ADDR_VAR 0 3
29003: PUSH
29004: LD_VAR 0 4
29008: PPUSH
29009: LD_INT 1
29011: PPUSH
29012: CALL_OW 275
29016: PUSH
29017: LD_VAR 0 5
29021: PUSH
29022: LD_INT 1
29024: ARRAY
29025: GREATEREQUAL
29026: IFFALSE 29052
29028: PUSH
29029: LD_VAR 0 4
29033: PPUSH
29034: LD_INT 2
29036: PPUSH
29037: CALL_OW 275
29041: PUSH
29042: LD_VAR 0 5
29046: PUSH
29047: LD_INT 2
29049: ARRAY
29050: GREATEREQUAL
29051: AND
29052: IFFALSE 29078
29054: PUSH
29055: LD_VAR 0 4
29059: PPUSH
29060: LD_INT 3
29062: PPUSH
29063: CALL_OW 275
29067: PUSH
29068: LD_VAR 0 5
29072: PUSH
29073: LD_INT 3
29075: ARRAY
29076: GREATEREQUAL
29077: AND
29078: ST_TO_ADDR
// end ;
29079: LD_VAR 0 3
29083: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
29084: LD_INT 0
29086: PPUSH
29087: PPUSH
29088: PPUSH
29089: PPUSH
29090: PPUSH
29091: PPUSH
29092: PPUSH
29093: PPUSH
29094: PPUSH
29095: PPUSH
29096: PPUSH
// result := false ;
29097: LD_ADDR_VAR 0 8
29101: PUSH
29102: LD_INT 0
29104: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
29105: LD_VAR 0 5
29109: NOT
29110: IFTRUE 29119
29112: PUSH
29113: LD_VAR 0 1
29117: NOT
29118: OR
29119: IFTRUE 29128
29121: PUSH
29122: LD_VAR 0 2
29126: NOT
29127: OR
29128: IFTRUE 29137
29130: PUSH
29131: LD_VAR 0 3
29135: NOT
29136: OR
29137: IFFALSE 29141
// exit ;
29139: GO 29967
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
29141: LD_ADDR_VAR 0 14
29145: PUSH
29146: LD_VAR 0 1
29150: PPUSH
29151: LD_VAR 0 2
29155: PPUSH
29156: LD_VAR 0 3
29160: PPUSH
29161: LD_VAR 0 4
29165: PPUSH
29166: LD_VAR 0 5
29170: PUSH
29171: LD_INT 1
29173: ARRAY
29174: PPUSH
29175: CALL_OW 248
29179: PPUSH
29180: LD_INT 0
29182: PPUSH
29183: CALL 31248 0 6
29187: ST_TO_ADDR
// if not hexes then
29188: LD_VAR 0 14
29192: NOT
29193: IFFALSE 29197
// exit ;
29195: GO 29967
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29197: LD_ADDR_VAR 0 17
29201: PUSH
29202: LD_VAR 0 5
29206: PPUSH
29207: LD_INT 22
29209: PUSH
29210: LD_VAR 0 13
29214: PPUSH
29215: CALL_OW 255
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 2
29226: PUSH
29227: LD_INT 30
29229: PUSH
29230: LD_INT 0
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 30
29239: PUSH
29240: LD_INT 1
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: LIST
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PPUSH
29256: CALL_OW 72
29260: ST_TO_ADDR
// for i = 1 to hexes do
29261: LD_ADDR_VAR 0 9
29265: PUSH
29266: DOUBLE
29267: LD_INT 1
29269: DEC
29270: ST_TO_ADDR
29271: LD_VAR 0 14
29275: PUSH
29276: FOR_TO
29277: IFFALSE 29965
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29279: LD_ADDR_VAR 0 13
29283: PUSH
29284: LD_VAR 0 14
29288: PUSH
29289: LD_VAR 0 9
29293: ARRAY
29294: PUSH
29295: LD_INT 1
29297: ARRAY
29298: PPUSH
29299: LD_VAR 0 14
29303: PUSH
29304: LD_VAR 0 9
29308: ARRAY
29309: PUSH
29310: LD_INT 2
29312: ARRAY
29313: PPUSH
29314: CALL_OW 428
29318: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
29319: LD_VAR 0 14
29323: PUSH
29324: LD_VAR 0 9
29328: ARRAY
29329: PUSH
29330: LD_INT 1
29332: ARRAY
29333: PPUSH
29334: LD_VAR 0 14
29338: PUSH
29339: LD_VAR 0 9
29343: ARRAY
29344: PUSH
29345: LD_INT 2
29347: ARRAY
29348: PPUSH
29349: CALL_OW 351
29353: IFTRUE 29392
29355: PUSH
29356: LD_VAR 0 14
29360: PUSH
29361: LD_VAR 0 9
29365: ARRAY
29366: PUSH
29367: LD_INT 1
29369: ARRAY
29370: PPUSH
29371: LD_VAR 0 14
29375: PUSH
29376: LD_VAR 0 9
29380: ARRAY
29381: PUSH
29382: LD_INT 2
29384: ARRAY
29385: PPUSH
29386: CALL_OW 488
29390: NOT
29391: OR
29392: IFTRUE 29409
29394: PUSH
29395: LD_VAR 0 13
29399: PPUSH
29400: CALL_OW 247
29404: PUSH
29405: LD_INT 3
29407: EQUAL
29408: OR
29409: IFFALSE 29415
// exit ;
29411: POP
29412: POP
29413: GO 29967
// if not tmp then
29415: LD_VAR 0 13
29419: NOT
29420: IFFALSE 29424
// continue ;
29422: GO 29276
// result := true ;
29424: LD_ADDR_VAR 0 8
29428: PUSH
29429: LD_INT 1
29431: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29432: LD_VAR 0 6
29436: IFFALSE 29453
29438: PUSH
29439: LD_VAR 0 13
29443: PPUSH
29444: CALL_OW 247
29448: PUSH
29449: LD_INT 2
29451: EQUAL
29452: AND
29453: IFFALSE 29470
29455: PUSH
29456: LD_VAR 0 13
29460: PPUSH
29461: CALL_OW 263
29465: PUSH
29466: LD_INT 1
29468: EQUAL
29469: AND
29470: IFFALSE 29634
// begin if IsDrivenBy ( tmp ) then
29472: LD_VAR 0 13
29476: PPUSH
29477: CALL_OW 311
29481: IFFALSE 29485
// continue ;
29483: GO 29276
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29485: LD_VAR 0 6
29489: PPUSH
29490: LD_INT 3
29492: PUSH
29493: LD_INT 60
29495: PUSH
29496: EMPTY
29497: LIST
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 3
29505: PUSH
29506: LD_INT 55
29508: PUSH
29509: EMPTY
29510: LIST
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PPUSH
29520: CALL_OW 72
29524: IFFALSE 29632
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29526: LD_ADDR_VAR 0 18
29530: PUSH
29531: LD_VAR 0 6
29535: PPUSH
29536: LD_INT 3
29538: PUSH
29539: LD_INT 60
29541: PUSH
29542: EMPTY
29543: LIST
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 3
29551: PUSH
29552: LD_INT 55
29554: PUSH
29555: EMPTY
29556: LIST
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PPUSH
29566: CALL_OW 72
29570: PUSH
29571: LD_INT 1
29573: ARRAY
29574: ST_TO_ADDR
// if IsInUnit ( driver ) then
29575: LD_VAR 0 18
29579: PPUSH
29580: CALL_OW 310
29584: IFFALSE 29595
// ComExit ( driver ) ;
29586: LD_VAR 0 18
29590: PPUSH
29591: CALL 55238 0 1
// AddComEnterUnit ( driver , tmp ) ;
29595: LD_VAR 0 18
29599: PPUSH
29600: LD_VAR 0 13
29604: PPUSH
29605: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29609: LD_VAR 0 18
29613: PPUSH
29614: LD_VAR 0 7
29618: PPUSH
29619: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29623: LD_VAR 0 18
29627: PPUSH
29628: CALL_OW 181
// end ; continue ;
29632: GO 29276
// end ; if not cleaners or not tmp in cleaners then
29634: LD_VAR 0 6
29638: NOT
29639: IFTRUE 29654
29641: PUSH
29642: LD_VAR 0 13
29646: PUSH
29647: LD_VAR 0 6
29651: IN
29652: NOT
29653: OR
29654: IFFALSE 29963
// begin if dep then
29656: LD_VAR 0 17
29660: IFFALSE 29796
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29662: LD_ADDR_VAR 0 16
29666: PUSH
29667: LD_VAR 0 17
29671: PUSH
29672: LD_INT 1
29674: ARRAY
29675: PPUSH
29676: CALL_OW 250
29680: PPUSH
29681: LD_VAR 0 17
29685: PUSH
29686: LD_INT 1
29688: ARRAY
29689: PPUSH
29690: CALL_OW 254
29694: PPUSH
29695: LD_INT 5
29697: PPUSH
29698: CALL_OW 272
29702: PUSH
29703: LD_VAR 0 17
29707: PUSH
29708: LD_INT 1
29710: ARRAY
29711: PPUSH
29712: CALL_OW 251
29716: PPUSH
29717: LD_VAR 0 17
29721: PUSH
29722: LD_INT 1
29724: ARRAY
29725: PPUSH
29726: CALL_OW 254
29730: PPUSH
29731: LD_INT 5
29733: PPUSH
29734: CALL_OW 273
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29743: LD_VAR 0 16
29747: PUSH
29748: LD_INT 1
29750: ARRAY
29751: PPUSH
29752: LD_VAR 0 16
29756: PUSH
29757: LD_INT 2
29759: ARRAY
29760: PPUSH
29761: CALL_OW 488
29765: IFFALSE 29796
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29767: LD_VAR 0 13
29771: PPUSH
29772: LD_VAR 0 16
29776: PUSH
29777: LD_INT 1
29779: ARRAY
29780: PPUSH
29781: LD_VAR 0 16
29785: PUSH
29786: LD_INT 2
29788: ARRAY
29789: PPUSH
29790: CALL_OW 111
// continue ;
29794: GO 29276
// end ; end ; r := GetDir ( tmp ) ;
29796: LD_ADDR_VAR 0 15
29800: PUSH
29801: LD_VAR 0 13
29805: PPUSH
29806: CALL_OW 254
29810: ST_TO_ADDR
// if r = 5 then
29811: LD_VAR 0 15
29815: PUSH
29816: LD_INT 5
29818: EQUAL
29819: IFFALSE 29829
// r := 0 ;
29821: LD_ADDR_VAR 0 15
29825: PUSH
29826: LD_INT 0
29828: ST_TO_ADDR
// for j = r to 5 do
29829: LD_ADDR_VAR 0 10
29833: PUSH
29834: DOUBLE
29835: LD_VAR 0 15
29839: DEC
29840: ST_TO_ADDR
29841: LD_INT 5
29843: PUSH
29844: FOR_TO
29845: IFFALSE 29961
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29847: LD_ADDR_VAR 0 11
29851: PUSH
29852: LD_VAR 0 13
29856: PPUSH
29857: CALL_OW 250
29861: PPUSH
29862: LD_VAR 0 10
29866: PPUSH
29867: LD_INT 2
29869: PPUSH
29870: CALL_OW 272
29874: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29875: LD_ADDR_VAR 0 12
29879: PUSH
29880: LD_VAR 0 13
29884: PPUSH
29885: CALL_OW 251
29889: PPUSH
29890: LD_VAR 0 10
29894: PPUSH
29895: LD_INT 2
29897: PPUSH
29898: CALL_OW 273
29902: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29903: LD_VAR 0 11
29907: PPUSH
29908: LD_VAR 0 12
29912: PPUSH
29913: CALL_OW 488
29917: IFFALSE 29936
29919: PUSH
29920: LD_VAR 0 11
29924: PPUSH
29925: LD_VAR 0 12
29929: PPUSH
29930: CALL_OW 428
29934: NOT
29935: AND
29936: IFFALSE 29959
// begin ComMoveXY ( tmp , _x , _y ) ;
29938: LD_VAR 0 13
29942: PPUSH
29943: LD_VAR 0 11
29947: PPUSH
29948: LD_VAR 0 12
29952: PPUSH
29953: CALL_OW 111
// break ;
29957: GO 29961
// end ; end ;
29959: GO 29844
29961: POP
29962: POP
// end ; end ;
29963: GO 29276
29965: POP
29966: POP
// end ;
29967: LD_VAR 0 8
29971: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29972: LD_INT 0
29974: PPUSH
// result := true ;
29975: LD_ADDR_VAR 0 3
29979: PUSH
29980: LD_INT 1
29982: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29983: LD_VAR 0 2
29987: PUSH
29988: LD_INT 24
29990: DOUBLE
29991: EQUAL
29992: IFTRUE 30002
29994: LD_INT 33
29996: DOUBLE
29997: EQUAL
29998: IFTRUE 30002
30000: GO 30027
30002: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
30003: LD_ADDR_VAR 0 3
30007: PUSH
30008: LD_INT 32
30010: PPUSH
30011: LD_VAR 0 1
30015: PPUSH
30016: CALL_OW 321
30020: PUSH
30021: LD_INT 2
30023: EQUAL
30024: ST_TO_ADDR
30025: GO 30343
30027: LD_INT 20
30029: DOUBLE
30030: EQUAL
30031: IFTRUE 30035
30033: GO 30060
30035: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
30036: LD_ADDR_VAR 0 3
30040: PUSH
30041: LD_INT 6
30043: PPUSH
30044: LD_VAR 0 1
30048: PPUSH
30049: CALL_OW 321
30053: PUSH
30054: LD_INT 2
30056: EQUAL
30057: ST_TO_ADDR
30058: GO 30343
30060: LD_INT 22
30062: DOUBLE
30063: EQUAL
30064: IFTRUE 30074
30066: LD_INT 36
30068: DOUBLE
30069: EQUAL
30070: IFTRUE 30074
30072: GO 30099
30074: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
30075: LD_ADDR_VAR 0 3
30079: PUSH
30080: LD_INT 15
30082: PPUSH
30083: LD_VAR 0 1
30087: PPUSH
30088: CALL_OW 321
30092: PUSH
30093: LD_INT 2
30095: EQUAL
30096: ST_TO_ADDR
30097: GO 30343
30099: LD_INT 30
30101: DOUBLE
30102: EQUAL
30103: IFTRUE 30107
30105: GO 30132
30107: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
30108: LD_ADDR_VAR 0 3
30112: PUSH
30113: LD_INT 20
30115: PPUSH
30116: LD_VAR 0 1
30120: PPUSH
30121: CALL_OW 321
30125: PUSH
30126: LD_INT 2
30128: EQUAL
30129: ST_TO_ADDR
30130: GO 30343
30132: LD_INT 28
30134: DOUBLE
30135: EQUAL
30136: IFTRUE 30146
30138: LD_INT 21
30140: DOUBLE
30141: EQUAL
30142: IFTRUE 30146
30144: GO 30171
30146: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
30147: LD_ADDR_VAR 0 3
30151: PUSH
30152: LD_INT 21
30154: PPUSH
30155: LD_VAR 0 1
30159: PPUSH
30160: CALL_OW 321
30164: PUSH
30165: LD_INT 2
30167: EQUAL
30168: ST_TO_ADDR
30169: GO 30343
30171: LD_INT 16
30173: DOUBLE
30174: EQUAL
30175: IFTRUE 30179
30177: GO 30204
30179: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
30180: LD_ADDR_VAR 0 3
30184: PUSH
30185: LD_INT 84
30187: PPUSH
30188: LD_VAR 0 1
30192: PPUSH
30193: CALL_OW 321
30197: PUSH
30198: LD_INT 2
30200: EQUAL
30201: ST_TO_ADDR
30202: GO 30343
30204: LD_INT 19
30206: DOUBLE
30207: EQUAL
30208: IFTRUE 30218
30210: LD_INT 23
30212: DOUBLE
30213: EQUAL
30214: IFTRUE 30218
30216: GO 30243
30218: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
30219: LD_ADDR_VAR 0 3
30223: PUSH
30224: LD_INT 83
30226: PPUSH
30227: LD_VAR 0 1
30231: PPUSH
30232: CALL_OW 321
30236: PUSH
30237: LD_INT 2
30239: EQUAL
30240: ST_TO_ADDR
30241: GO 30343
30243: LD_INT 17
30245: DOUBLE
30246: EQUAL
30247: IFTRUE 30251
30249: GO 30276
30251: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
30252: LD_ADDR_VAR 0 3
30256: PUSH
30257: LD_INT 39
30259: PPUSH
30260: LD_VAR 0 1
30264: PPUSH
30265: CALL_OW 321
30269: PUSH
30270: LD_INT 2
30272: EQUAL
30273: ST_TO_ADDR
30274: GO 30343
30276: LD_INT 18
30278: DOUBLE
30279: EQUAL
30280: IFTRUE 30284
30282: GO 30309
30284: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
30285: LD_ADDR_VAR 0 3
30289: PUSH
30290: LD_INT 40
30292: PPUSH
30293: LD_VAR 0 1
30297: PPUSH
30298: CALL_OW 321
30302: PUSH
30303: LD_INT 2
30305: EQUAL
30306: ST_TO_ADDR
30307: GO 30343
30309: LD_INT 27
30311: DOUBLE
30312: EQUAL
30313: IFTRUE 30317
30315: GO 30342
30317: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
30318: LD_ADDR_VAR 0 3
30322: PUSH
30323: LD_INT 35
30325: PPUSH
30326: LD_VAR 0 1
30330: PPUSH
30331: CALL_OW 321
30335: PUSH
30336: LD_INT 2
30338: EQUAL
30339: ST_TO_ADDR
30340: GO 30343
30342: POP
// end ;
30343: LD_VAR 0 3
30347: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
30348: LD_INT 0
30350: PPUSH
30351: PPUSH
30352: PPUSH
30353: PPUSH
30354: PPUSH
30355: PPUSH
30356: PPUSH
30357: PPUSH
30358: PPUSH
30359: PPUSH
30360: PPUSH
// result := false ;
30361: LD_ADDR_VAR 0 6
30365: PUSH
30366: LD_INT 0
30368: ST_TO_ADDR
// if btype = b_depot then
30369: LD_VAR 0 2
30373: PUSH
30374: LD_INT 0
30376: EQUAL
30377: IFFALSE 30389
// begin result := true ;
30379: LD_ADDR_VAR 0 6
30383: PUSH
30384: LD_INT 1
30386: ST_TO_ADDR
// exit ;
30387: GO 31243
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30389: LD_VAR 0 1
30393: NOT
30394: IFTRUE 30419
30396: PUSH
30397: LD_VAR 0 1
30401: PPUSH
30402: CALL_OW 266
30406: PUSH
30407: LD_INT 0
30409: PUSH
30410: LD_INT 1
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: IN
30417: NOT
30418: OR
30419: IFTRUE 30428
30421: PUSH
30422: LD_VAR 0 2
30426: NOT
30427: OR
30428: IFTRUE 30464
30430: PUSH
30431: LD_VAR 0 5
30435: PUSH
30436: LD_INT 0
30438: PUSH
30439: LD_INT 1
30441: PUSH
30442: LD_INT 2
30444: PUSH
30445: LD_INT 3
30447: PUSH
30448: LD_INT 4
30450: PUSH
30451: LD_INT 5
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: IN
30462: NOT
30463: OR
30464: IFTRUE 30483
30466: PUSH
30467: LD_VAR 0 3
30471: PPUSH
30472: LD_VAR 0 4
30476: PPUSH
30477: CALL_OW 488
30481: NOT
30482: OR
30483: IFFALSE 30487
// exit ;
30485: GO 31243
// side := GetSide ( depot ) ;
30487: LD_ADDR_VAR 0 9
30491: PUSH
30492: LD_VAR 0 1
30496: PPUSH
30497: CALL_OW 255
30501: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30502: LD_VAR 0 9
30506: PPUSH
30507: LD_VAR 0 2
30511: PPUSH
30512: CALL 29972 0 2
30516: NOT
30517: IFFALSE 30521
// exit ;
30519: GO 31243
// pom := GetBase ( depot ) ;
30521: LD_ADDR_VAR 0 10
30525: PUSH
30526: LD_VAR 0 1
30530: PPUSH
30531: CALL_OW 274
30535: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30536: LD_ADDR_VAR 0 11
30540: PUSH
30541: LD_VAR 0 2
30545: PPUSH
30546: LD_VAR 0 1
30550: PPUSH
30551: CALL_OW 248
30555: PPUSH
30556: CALL_OW 450
30560: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30561: LD_VAR 0 10
30565: PPUSH
30566: LD_INT 1
30568: PPUSH
30569: CALL_OW 275
30573: PUSH
30574: LD_VAR 0 11
30578: PUSH
30579: LD_INT 1
30581: ARRAY
30582: GREATEREQUAL
30583: IFFALSE 30609
30585: PUSH
30586: LD_VAR 0 10
30590: PPUSH
30591: LD_INT 2
30593: PPUSH
30594: CALL_OW 275
30598: PUSH
30599: LD_VAR 0 11
30603: PUSH
30604: LD_INT 2
30606: ARRAY
30607: GREATEREQUAL
30608: AND
30609: IFFALSE 30635
30611: PUSH
30612: LD_VAR 0 10
30616: PPUSH
30617: LD_INT 3
30619: PPUSH
30620: CALL_OW 275
30624: PUSH
30625: LD_VAR 0 11
30629: PUSH
30630: LD_INT 3
30632: ARRAY
30633: GREATEREQUAL
30634: AND
30635: NOT
30636: IFFALSE 30640
// exit ;
30638: GO 31243
// if GetBType ( depot ) = b_depot then
30640: LD_VAR 0 1
30644: PPUSH
30645: CALL_OW 266
30649: PUSH
30650: LD_INT 0
30652: EQUAL
30653: IFFALSE 30665
// dist := 28 else
30655: LD_ADDR_VAR 0 14
30659: PUSH
30660: LD_INT 28
30662: ST_TO_ADDR
30663: GO 30673
// dist := 36 ;
30665: LD_ADDR_VAR 0 14
30669: PUSH
30670: LD_INT 36
30672: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30673: LD_VAR 0 1
30677: PPUSH
30678: LD_VAR 0 3
30682: PPUSH
30683: LD_VAR 0 4
30687: PPUSH
30688: CALL_OW 297
30692: PUSH
30693: LD_VAR 0 14
30697: GREATER
30698: IFFALSE 30702
// exit ;
30700: GO 31243
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30702: LD_ADDR_VAR 0 12
30706: PUSH
30707: LD_VAR 0 2
30711: PPUSH
30712: LD_VAR 0 3
30716: PPUSH
30717: LD_VAR 0 4
30721: PPUSH
30722: LD_VAR 0 5
30726: PPUSH
30727: LD_VAR 0 1
30731: PPUSH
30732: CALL_OW 248
30736: PPUSH
30737: LD_INT 0
30739: PPUSH
30740: CALL 31248 0 6
30744: ST_TO_ADDR
// if not hexes then
30745: LD_VAR 0 12
30749: NOT
30750: IFFALSE 30754
// exit ;
30752: GO 31243
// hex := GetHexInfo ( x , y ) ;
30754: LD_ADDR_VAR 0 15
30758: PUSH
30759: LD_VAR 0 3
30763: PPUSH
30764: LD_VAR 0 4
30768: PPUSH
30769: CALL_OW 546
30773: ST_TO_ADDR
// if hex [ 1 ] then
30774: LD_VAR 0 15
30778: PUSH
30779: LD_INT 1
30781: ARRAY
30782: IFFALSE 30786
// exit ;
30784: GO 31243
// height := hex [ 2 ] ;
30786: LD_ADDR_VAR 0 13
30790: PUSH
30791: LD_VAR 0 15
30795: PUSH
30796: LD_INT 2
30798: ARRAY
30799: ST_TO_ADDR
// for i = 1 to hexes do
30800: LD_ADDR_VAR 0 7
30804: PUSH
30805: DOUBLE
30806: LD_INT 1
30808: DEC
30809: ST_TO_ADDR
30810: LD_VAR 0 12
30814: PUSH
30815: FOR_TO
30816: IFFALSE 31160
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30818: LD_VAR 0 12
30822: PUSH
30823: LD_VAR 0 7
30827: ARRAY
30828: PUSH
30829: LD_INT 1
30831: ARRAY
30832: PPUSH
30833: LD_VAR 0 12
30837: PUSH
30838: LD_VAR 0 7
30842: ARRAY
30843: PUSH
30844: LD_INT 2
30846: ARRAY
30847: PPUSH
30848: CALL_OW 488
30852: NOT
30853: IFTRUE 30895
30855: PUSH
30856: LD_VAR 0 12
30860: PUSH
30861: LD_VAR 0 7
30865: ARRAY
30866: PUSH
30867: LD_INT 1
30869: ARRAY
30870: PPUSH
30871: LD_VAR 0 12
30875: PUSH
30876: LD_VAR 0 7
30880: ARRAY
30881: PUSH
30882: LD_INT 2
30884: ARRAY
30885: PPUSH
30886: CALL_OW 428
30890: PUSH
30891: LD_INT 0
30893: GREATER
30894: OR
30895: IFTRUE 30933
30897: PUSH
30898: LD_VAR 0 12
30902: PUSH
30903: LD_VAR 0 7
30907: ARRAY
30908: PUSH
30909: LD_INT 1
30911: ARRAY
30912: PPUSH
30913: LD_VAR 0 12
30917: PUSH
30918: LD_VAR 0 7
30922: ARRAY
30923: PUSH
30924: LD_INT 2
30926: ARRAY
30927: PPUSH
30928: CALL_OW 351
30932: OR
30933: IFFALSE 30939
// exit ;
30935: POP
30936: POP
30937: GO 31243
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30939: LD_ADDR_VAR 0 8
30943: PUSH
30944: LD_VAR 0 12
30948: PUSH
30949: LD_VAR 0 7
30953: ARRAY
30954: PUSH
30955: LD_INT 1
30957: ARRAY
30958: PPUSH
30959: LD_VAR 0 12
30963: PUSH
30964: LD_VAR 0 7
30968: ARRAY
30969: PUSH
30970: LD_INT 2
30972: ARRAY
30973: PPUSH
30974: CALL_OW 546
30978: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30979: LD_VAR 0 8
30983: PUSH
30984: LD_INT 1
30986: ARRAY
30987: IFTRUE 31009
30989: PUSH
30990: LD_VAR 0 8
30994: PUSH
30995: LD_INT 2
30997: ARRAY
30998: PUSH
30999: LD_VAR 0 13
31003: PUSH
31004: LD_INT 2
31006: PLUS
31007: GREATER
31008: OR
31009: IFTRUE 31031
31011: PUSH
31012: LD_VAR 0 8
31016: PUSH
31017: LD_INT 2
31019: ARRAY
31020: PUSH
31021: LD_VAR 0 13
31025: PUSH
31026: LD_INT 2
31028: MINUS
31029: LESS
31030: OR
31031: IFTRUE 31099
31033: PUSH
31034: LD_VAR 0 8
31038: PUSH
31039: LD_INT 3
31041: ARRAY
31042: PUSH
31043: LD_INT 0
31045: PUSH
31046: LD_INT 8
31048: PUSH
31049: LD_INT 9
31051: PUSH
31052: LD_INT 10
31054: PUSH
31055: LD_INT 11
31057: PUSH
31058: LD_INT 12
31060: PUSH
31061: LD_INT 13
31063: PUSH
31064: LD_INT 16
31066: PUSH
31067: LD_INT 17
31069: PUSH
31070: LD_INT 18
31072: PUSH
31073: LD_INT 19
31075: PUSH
31076: LD_INT 20
31078: PUSH
31079: LD_INT 21
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: IN
31097: NOT
31098: OR
31099: IFTRUE 31112
31101: PUSH
31102: LD_VAR 0 8
31106: PUSH
31107: LD_INT 5
31109: ARRAY
31110: NOT
31111: OR
31112: IFTRUE 31152
31114: PUSH
31115: LD_VAR 0 8
31119: PUSH
31120: LD_INT 6
31122: ARRAY
31123: PUSH
31124: LD_INT 1
31126: PUSH
31127: LD_INT 2
31129: PUSH
31130: LD_INT 7
31132: PUSH
31133: LD_INT 9
31135: PUSH
31136: LD_INT 10
31138: PUSH
31139: LD_INT 11
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: IN
31150: NOT
31151: OR
31152: IFFALSE 31158
// exit ;
31154: POP
31155: POP
31156: GO 31243
// end ;
31158: GO 30815
31160: POP
31161: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
31162: LD_VAR 0 9
31166: PPUSH
31167: LD_VAR 0 3
31171: PPUSH
31172: LD_VAR 0 4
31176: PPUSH
31177: LD_INT 20
31179: PPUSH
31180: CALL 23062 0 4
31184: PUSH
31185: LD_INT 4
31187: ARRAY
31188: IFFALSE 31192
// exit ;
31190: GO 31243
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
31192: LD_VAR 0 2
31196: PUSH
31197: LD_INT 29
31199: PUSH
31200: LD_INT 30
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: IN
31207: IFFALSE 31231
31209: PUSH
31210: LD_VAR 0 3
31214: PPUSH
31215: LD_VAR 0 4
31219: PPUSH
31220: LD_VAR 0 9
31224: PPUSH
31225: CALL_OW 440
31229: NOT
31230: AND
31231: IFFALSE 31235
// exit ;
31233: GO 31243
// result := true ;
31235: LD_ADDR_VAR 0 6
31239: PUSH
31240: LD_INT 1
31242: ST_TO_ADDR
// end ;
31243: LD_VAR 0 6
31247: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
31248: LD_INT 0
31250: PPUSH
31251: PPUSH
31252: PPUSH
31253: PPUSH
31254: PPUSH
31255: PPUSH
31256: PPUSH
31257: PPUSH
31258: PPUSH
31259: PPUSH
31260: PPUSH
31261: PPUSH
31262: PPUSH
31263: PPUSH
31264: PPUSH
31265: PPUSH
31266: PPUSH
31267: PPUSH
31268: PPUSH
31269: PPUSH
31270: PPUSH
31271: PPUSH
31272: PPUSH
31273: PPUSH
31274: PPUSH
31275: PPUSH
31276: PPUSH
31277: PPUSH
31278: PPUSH
31279: PPUSH
31280: PPUSH
31281: PPUSH
31282: PPUSH
31283: PPUSH
31284: PPUSH
31285: PPUSH
31286: PPUSH
31287: PPUSH
31288: PPUSH
31289: PPUSH
31290: PPUSH
31291: PPUSH
31292: PPUSH
31293: PPUSH
31294: PPUSH
31295: PPUSH
31296: PPUSH
31297: PPUSH
31298: PPUSH
31299: PPUSH
31300: PPUSH
31301: PPUSH
31302: PPUSH
31303: PPUSH
31304: PPUSH
31305: PPUSH
31306: PPUSH
31307: PPUSH
// result = [ ] ;
31308: LD_ADDR_VAR 0 7
31312: PUSH
31313: EMPTY
31314: ST_TO_ADDR
// temp_list = [ ] ;
31315: LD_ADDR_VAR 0 9
31319: PUSH
31320: EMPTY
31321: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
31322: LD_VAR 0 4
31326: PUSH
31327: LD_INT 0
31329: PUSH
31330: LD_INT 1
31332: PUSH
31333: LD_INT 2
31335: PUSH
31336: LD_INT 3
31338: PUSH
31339: LD_INT 4
31341: PUSH
31342: LD_INT 5
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: IN
31353: NOT
31354: IFTRUE 31397
31356: PUSH
31357: LD_VAR 0 1
31361: PUSH
31362: LD_INT 0
31364: PUSH
31365: LD_INT 1
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: IN
31372: IFFALSE 31396
31374: PUSH
31375: LD_VAR 0 5
31379: PUSH
31380: LD_INT 1
31382: PUSH
31383: LD_INT 2
31385: PUSH
31386: LD_INT 3
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: LIST
31393: IN
31394: NOT
31395: AND
31396: OR
31397: IFFALSE 31401
// exit ;
31399: GO 49800
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
31401: LD_VAR 0 1
31405: PUSH
31406: LD_INT 6
31408: PUSH
31409: LD_INT 7
31411: PUSH
31412: LD_INT 8
31414: PUSH
31415: LD_INT 13
31417: PUSH
31418: LD_INT 12
31420: PUSH
31421: LD_INT 15
31423: PUSH
31424: LD_INT 11
31426: PUSH
31427: LD_INT 14
31429: PUSH
31430: LD_INT 10
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: IN
31444: IFFALSE 31454
// btype = b_lab ;
31446: LD_ADDR_VAR 0 1
31450: PUSH
31451: LD_INT 6
31453: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31454: LD_VAR 0 6
31458: PUSH
31459: LD_INT 0
31461: PUSH
31462: LD_INT 1
31464: PUSH
31465: LD_INT 2
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: LIST
31472: IN
31473: NOT
31474: IFTRUE 31542
31476: PUSH
31477: LD_VAR 0 1
31481: PUSH
31482: LD_INT 0
31484: PUSH
31485: LD_INT 1
31487: PUSH
31488: LD_INT 2
31490: PUSH
31491: LD_INT 3
31493: PUSH
31494: LD_INT 6
31496: PUSH
31497: LD_INT 36
31499: PUSH
31500: LD_INT 4
31502: PUSH
31503: LD_INT 5
31505: PUSH
31506: LD_INT 31
31508: PUSH
31509: LD_INT 32
31511: PUSH
31512: LD_INT 33
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: IN
31528: NOT
31529: IFFALSE 31541
31531: PUSH
31532: LD_VAR 0 6
31536: PUSH
31537: LD_INT 1
31539: EQUAL
31540: AND
31541: OR
31542: IFTRUE 31574
31544: PUSH
31545: LD_VAR 0 1
31549: PUSH
31550: LD_INT 2
31552: PUSH
31553: LD_INT 3
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: IN
31560: NOT
31561: IFFALSE 31573
31563: PUSH
31564: LD_VAR 0 6
31568: PUSH
31569: LD_INT 2
31571: EQUAL
31572: AND
31573: OR
31574: IFFALSE 31584
// mode = 0 ;
31576: LD_ADDR_VAR 0 6
31580: PUSH
31581: LD_INT 0
31583: ST_TO_ADDR
// case mode of 0 :
31584: LD_VAR 0 6
31588: PUSH
31589: LD_INT 0
31591: DOUBLE
31592: EQUAL
31593: IFTRUE 31597
31595: GO 43050
31597: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31598: LD_ADDR_VAR 0 11
31602: PUSH
31603: LD_INT 0
31605: PUSH
31606: LD_INT 0
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 0
31615: PUSH
31616: LD_INT 1
31618: NEG
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 1
31626: PUSH
31627: LD_INT 0
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 1
31636: PUSH
31637: LD_INT 1
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 0
31646: PUSH
31647: LD_INT 1
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 1
31656: NEG
31657: PUSH
31658: LD_INT 0
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 1
31667: NEG
31668: PUSH
31669: LD_INT 1
31671: NEG
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 1
31679: NEG
31680: PUSH
31681: LD_INT 2
31683: NEG
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 0
31691: PUSH
31692: LD_INT 2
31694: NEG
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 1
31702: PUSH
31703: LD_INT 1
31705: NEG
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 1
31713: PUSH
31714: LD_INT 2
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 0
31723: PUSH
31724: LD_INT 2
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 1
31733: NEG
31734: PUSH
31735: LD_INT 1
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 1
31744: PUSH
31745: LD_INT 3
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 0
31754: PUSH
31755: LD_INT 3
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 1
31764: NEG
31765: PUSH
31766: LD_INT 2
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31791: LD_ADDR_VAR 0 12
31795: PUSH
31796: LD_INT 0
31798: PUSH
31799: LD_INT 0
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 0
31808: PUSH
31809: LD_INT 1
31811: NEG
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 1
31819: PUSH
31820: LD_INT 0
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 1
31829: PUSH
31830: LD_INT 1
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 0
31839: PUSH
31840: LD_INT 1
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 1
31849: NEG
31850: PUSH
31851: LD_INT 0
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 1
31860: NEG
31861: PUSH
31862: LD_INT 1
31864: NEG
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 1
31872: PUSH
31873: LD_INT 1
31875: NEG
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 2
31883: PUSH
31884: LD_INT 0
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 2
31893: PUSH
31894: LD_INT 1
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 1
31903: NEG
31904: PUSH
31905: LD_INT 1
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 2
31914: NEG
31915: PUSH
31916: LD_INT 0
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 2
31925: NEG
31926: PUSH
31927: LD_INT 1
31929: NEG
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 2
31937: NEG
31938: PUSH
31939: LD_INT 1
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 3
31948: NEG
31949: PUSH
31950: LD_INT 0
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 3
31959: NEG
31960: PUSH
31961: LD_INT 1
31963: NEG
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31987: LD_ADDR_VAR 0 13
31991: PUSH
31992: LD_INT 0
31994: PUSH
31995: LD_INT 0
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 0
32004: PUSH
32005: LD_INT 1
32007: NEG
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 1
32015: PUSH
32016: LD_INT 0
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 1
32025: PUSH
32026: LD_INT 1
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 0
32035: PUSH
32036: LD_INT 1
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 1
32045: NEG
32046: PUSH
32047: LD_INT 0
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 1
32056: NEG
32057: PUSH
32058: LD_INT 1
32060: NEG
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 1
32068: NEG
32069: PUSH
32070: LD_INT 2
32072: NEG
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 2
32080: PUSH
32081: LD_INT 1
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 2
32090: PUSH
32091: LD_INT 2
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 1
32100: PUSH
32101: LD_INT 2
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 2
32110: NEG
32111: PUSH
32112: LD_INT 1
32114: NEG
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 2
32122: NEG
32123: PUSH
32124: LD_INT 2
32126: NEG
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 2
32134: NEG
32135: PUSH
32136: LD_INT 3
32138: NEG
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 3
32146: NEG
32147: PUSH
32148: LD_INT 2
32150: NEG
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 3
32158: NEG
32159: PUSH
32160: LD_INT 3
32162: NEG
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32186: LD_ADDR_VAR 0 14
32190: PUSH
32191: LD_INT 0
32193: PUSH
32194: LD_INT 0
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 0
32203: PUSH
32204: LD_INT 1
32206: NEG
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 1
32214: PUSH
32215: LD_INT 0
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 1
32224: PUSH
32225: LD_INT 1
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 0
32234: PUSH
32235: LD_INT 1
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 1
32244: NEG
32245: PUSH
32246: LD_INT 0
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 1
32255: NEG
32256: PUSH
32257: LD_INT 1
32259: NEG
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 1
32267: NEG
32268: PUSH
32269: LD_INT 2
32271: NEG
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 0
32279: PUSH
32280: LD_INT 2
32282: NEG
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 1
32290: PUSH
32291: LD_INT 1
32293: NEG
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 1
32301: PUSH
32302: LD_INT 2
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 0
32311: PUSH
32312: LD_INT 2
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 1
32321: NEG
32322: PUSH
32323: LD_INT 1
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 1
32332: NEG
32333: PUSH
32334: LD_INT 3
32336: NEG
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 0
32344: PUSH
32345: LD_INT 3
32347: NEG
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 1
32355: PUSH
32356: LD_INT 2
32358: NEG
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32382: LD_ADDR_VAR 0 15
32386: PUSH
32387: LD_INT 0
32389: PUSH
32390: LD_INT 0
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 0
32399: PUSH
32400: LD_INT 1
32402: NEG
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 1
32410: PUSH
32411: LD_INT 0
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 1
32420: PUSH
32421: LD_INT 1
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 0
32430: PUSH
32431: LD_INT 1
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 1
32440: NEG
32441: PUSH
32442: LD_INT 0
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 1
32451: NEG
32452: PUSH
32453: LD_INT 1
32455: NEG
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 1
32463: PUSH
32464: LD_INT 1
32466: NEG
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 2
32474: PUSH
32475: LD_INT 0
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 2
32484: PUSH
32485: LD_INT 1
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 1
32494: NEG
32495: PUSH
32496: LD_INT 1
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 2
32505: NEG
32506: PUSH
32507: LD_INT 0
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 2
32516: NEG
32517: PUSH
32518: LD_INT 1
32520: NEG
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: LD_INT 2
32528: PUSH
32529: LD_INT 1
32531: NEG
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 3
32539: PUSH
32540: LD_INT 0
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 3
32549: PUSH
32550: LD_INT 1
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32575: LD_ADDR_VAR 0 16
32579: PUSH
32580: LD_INT 0
32582: PUSH
32583: LD_INT 0
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 0
32592: PUSH
32593: LD_INT 1
32595: NEG
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 1
32603: PUSH
32604: LD_INT 0
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 1
32613: PUSH
32614: LD_INT 1
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 0
32623: PUSH
32624: LD_INT 1
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 1
32633: NEG
32634: PUSH
32635: LD_INT 0
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 1
32644: NEG
32645: PUSH
32646: LD_INT 1
32648: NEG
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 1
32656: NEG
32657: PUSH
32658: LD_INT 2
32660: NEG
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 2
32668: PUSH
32669: LD_INT 1
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 2
32678: PUSH
32679: LD_INT 2
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 1
32688: PUSH
32689: LD_INT 2
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 2
32698: NEG
32699: PUSH
32700: LD_INT 1
32702: NEG
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 2
32710: NEG
32711: PUSH
32712: LD_INT 2
32714: NEG
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 3
32722: PUSH
32723: LD_INT 2
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 3
32732: PUSH
32733: LD_INT 3
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 2
32742: PUSH
32743: LD_INT 3
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32768: LD_ADDR_VAR 0 17
32772: PUSH
32773: LD_INT 0
32775: PUSH
32776: LD_INT 0
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 0
32785: PUSH
32786: LD_INT 1
32788: NEG
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 1
32796: PUSH
32797: LD_INT 0
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 1
32806: PUSH
32807: LD_INT 1
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 0
32816: PUSH
32817: LD_INT 1
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 1
32826: NEG
32827: PUSH
32828: LD_INT 0
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 1
32837: NEG
32838: PUSH
32839: LD_INT 1
32841: NEG
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 1
32849: NEG
32850: PUSH
32851: LD_INT 2
32853: NEG
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 0
32861: PUSH
32862: LD_INT 2
32864: NEG
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 1
32872: PUSH
32873: LD_INT 1
32875: NEG
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 2
32883: PUSH
32884: LD_INT 0
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 2
32893: PUSH
32894: LD_INT 1
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 2
32903: PUSH
32904: LD_INT 2
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 1
32913: PUSH
32914: LD_INT 2
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 0
32923: PUSH
32924: LD_INT 2
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 1
32933: NEG
32934: PUSH
32935: LD_INT 1
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 2
32944: NEG
32945: PUSH
32946: LD_INT 0
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 2
32955: NEG
32956: PUSH
32957: LD_INT 1
32959: NEG
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 2
32967: NEG
32968: PUSH
32969: LD_INT 2
32971: NEG
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32998: LD_ADDR_VAR 0 18
33002: PUSH
33003: LD_INT 0
33005: PUSH
33006: LD_INT 0
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 0
33015: PUSH
33016: LD_INT 1
33018: NEG
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 1
33026: PUSH
33027: LD_INT 0
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 1
33036: PUSH
33037: LD_INT 1
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 0
33046: PUSH
33047: LD_INT 1
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 1
33056: NEG
33057: PUSH
33058: LD_INT 0
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 1
33067: NEG
33068: PUSH
33069: LD_INT 1
33071: NEG
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 1
33079: NEG
33080: PUSH
33081: LD_INT 2
33083: NEG
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 0
33091: PUSH
33092: LD_INT 2
33094: NEG
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 1
33102: PUSH
33103: LD_INT 1
33105: NEG
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 2
33113: PUSH
33114: LD_INT 0
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 2
33123: PUSH
33124: LD_INT 1
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: LD_INT 2
33133: PUSH
33134: LD_INT 2
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 1
33143: PUSH
33144: LD_INT 2
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 0
33153: PUSH
33154: LD_INT 2
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 1
33163: NEG
33164: PUSH
33165: LD_INT 1
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 2
33174: NEG
33175: PUSH
33176: LD_INT 0
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 2
33185: NEG
33186: PUSH
33187: LD_INT 1
33189: NEG
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 2
33197: NEG
33198: PUSH
33199: LD_INT 2
33201: NEG
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33228: LD_ADDR_VAR 0 19
33232: PUSH
33233: LD_INT 0
33235: PUSH
33236: LD_INT 0
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 0
33245: PUSH
33246: LD_INT 1
33248: NEG
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 1
33256: PUSH
33257: LD_INT 0
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 1
33266: PUSH
33267: LD_INT 1
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 0
33276: PUSH
33277: LD_INT 1
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PUSH
33284: LD_INT 1
33286: NEG
33287: PUSH
33288: LD_INT 0
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 1
33297: NEG
33298: PUSH
33299: LD_INT 1
33301: NEG
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 1
33309: NEG
33310: PUSH
33311: LD_INT 2
33313: NEG
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 0
33321: PUSH
33322: LD_INT 2
33324: NEG
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 1
33332: PUSH
33333: LD_INT 1
33335: NEG
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 2
33343: PUSH
33344: LD_INT 0
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 2
33353: PUSH
33354: LD_INT 1
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 2
33363: PUSH
33364: LD_INT 2
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 1
33373: PUSH
33374: LD_INT 2
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 0
33383: PUSH
33384: LD_INT 2
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 1
33393: NEG
33394: PUSH
33395: LD_INT 1
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 2
33404: NEG
33405: PUSH
33406: LD_INT 0
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 2
33415: NEG
33416: PUSH
33417: LD_INT 1
33419: NEG
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 2
33427: NEG
33428: PUSH
33429: LD_INT 2
33431: NEG
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33458: LD_ADDR_VAR 0 20
33462: PUSH
33463: LD_INT 0
33465: PUSH
33466: LD_INT 0
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 0
33475: PUSH
33476: LD_INT 1
33478: NEG
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 1
33486: PUSH
33487: LD_INT 0
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 1
33496: PUSH
33497: LD_INT 1
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 0
33506: PUSH
33507: LD_INT 1
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 1
33516: NEG
33517: PUSH
33518: LD_INT 0
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 1
33527: NEG
33528: PUSH
33529: LD_INT 1
33531: NEG
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 1
33539: NEG
33540: PUSH
33541: LD_INT 2
33543: NEG
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 0
33551: PUSH
33552: LD_INT 2
33554: NEG
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 1
33562: PUSH
33563: LD_INT 1
33565: NEG
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 2
33573: PUSH
33574: LD_INT 0
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 2
33583: PUSH
33584: LD_INT 1
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 2
33593: PUSH
33594: LD_INT 2
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 1
33603: PUSH
33604: LD_INT 2
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 0
33613: PUSH
33614: LD_INT 2
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 1
33623: NEG
33624: PUSH
33625: LD_INT 1
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 2
33634: NEG
33635: PUSH
33636: LD_INT 0
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 2
33645: NEG
33646: PUSH
33647: LD_INT 1
33649: NEG
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 2
33657: NEG
33658: PUSH
33659: LD_INT 2
33661: NEG
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33688: LD_ADDR_VAR 0 21
33692: PUSH
33693: LD_INT 0
33695: PUSH
33696: LD_INT 0
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PUSH
33703: LD_INT 0
33705: PUSH
33706: LD_INT 1
33708: NEG
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 1
33716: PUSH
33717: LD_INT 0
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 1
33726: PUSH
33727: LD_INT 1
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 0
33736: PUSH
33737: LD_INT 1
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: LD_INT 1
33746: NEG
33747: PUSH
33748: LD_INT 0
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 1
33757: NEG
33758: PUSH
33759: LD_INT 1
33761: NEG
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 1
33769: NEG
33770: PUSH
33771: LD_INT 2
33773: NEG
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 0
33781: PUSH
33782: LD_INT 2
33784: NEG
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 1
33792: PUSH
33793: LD_INT 1
33795: NEG
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 2
33803: PUSH
33804: LD_INT 0
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 2
33813: PUSH
33814: LD_INT 1
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 2
33823: PUSH
33824: LD_INT 2
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 1
33833: PUSH
33834: LD_INT 2
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 0
33843: PUSH
33844: LD_INT 2
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 1
33853: NEG
33854: PUSH
33855: LD_INT 1
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 2
33864: NEG
33865: PUSH
33866: LD_INT 0
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 2
33875: NEG
33876: PUSH
33877: LD_INT 1
33879: NEG
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 2
33887: NEG
33888: PUSH
33889: LD_INT 2
33891: NEG
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33918: LD_ADDR_VAR 0 22
33922: PUSH
33923: LD_INT 0
33925: PUSH
33926: LD_INT 0
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 0
33935: PUSH
33936: LD_INT 1
33938: NEG
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 1
33946: PUSH
33947: LD_INT 0
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 1
33956: PUSH
33957: LD_INT 1
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 0
33966: PUSH
33967: LD_INT 1
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 1
33976: NEG
33977: PUSH
33978: LD_INT 0
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 1
33987: NEG
33988: PUSH
33989: LD_INT 1
33991: NEG
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: LD_INT 1
33999: NEG
34000: PUSH
34001: LD_INT 2
34003: NEG
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 0
34011: PUSH
34012: LD_INT 2
34014: NEG
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 1
34022: PUSH
34023: LD_INT 1
34025: NEG
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 2
34033: PUSH
34034: LD_INT 0
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 2
34043: PUSH
34044: LD_INT 1
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 2
34053: PUSH
34054: LD_INT 2
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 1
34063: PUSH
34064: LD_INT 2
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 0
34073: PUSH
34074: LD_INT 2
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 1
34083: NEG
34084: PUSH
34085: LD_INT 1
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 2
34094: NEG
34095: PUSH
34096: LD_INT 0
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 2
34105: NEG
34106: PUSH
34107: LD_INT 1
34109: NEG
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 2
34117: NEG
34118: PUSH
34119: LD_INT 2
34121: NEG
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34148: LD_ADDR_VAR 0 23
34152: PUSH
34153: LD_INT 0
34155: PUSH
34156: LD_INT 0
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 0
34165: PUSH
34166: LD_INT 1
34168: NEG
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 1
34176: PUSH
34177: LD_INT 0
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 1
34186: PUSH
34187: LD_INT 1
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 0
34196: PUSH
34197: LD_INT 1
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 1
34206: NEG
34207: PUSH
34208: LD_INT 0
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 1
34217: NEG
34218: PUSH
34219: LD_INT 1
34221: NEG
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: LD_INT 1
34229: NEG
34230: PUSH
34231: LD_INT 2
34233: NEG
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: PUSH
34239: LD_INT 0
34241: PUSH
34242: LD_INT 2
34244: NEG
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: LD_INT 1
34252: PUSH
34253: LD_INT 1
34255: NEG
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 2
34263: PUSH
34264: LD_INT 0
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 2
34273: PUSH
34274: LD_INT 1
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 2
34283: PUSH
34284: LD_INT 2
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 1
34293: PUSH
34294: LD_INT 2
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 0
34303: PUSH
34304: LD_INT 2
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 1
34313: NEG
34314: PUSH
34315: LD_INT 1
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 2
34324: NEG
34325: PUSH
34326: LD_INT 0
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 2
34335: NEG
34336: PUSH
34337: LD_INT 1
34339: NEG
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 2
34347: NEG
34348: PUSH
34349: LD_INT 2
34351: NEG
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 2
34359: NEG
34360: PUSH
34361: LD_INT 3
34363: NEG
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 1
34371: NEG
34372: PUSH
34373: LD_INT 3
34375: NEG
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 1
34383: PUSH
34384: LD_INT 2
34386: NEG
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 2
34394: PUSH
34395: LD_INT 1
34397: NEG
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34428: LD_ADDR_VAR 0 24
34432: PUSH
34433: LD_INT 0
34435: PUSH
34436: LD_INT 0
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 0
34445: PUSH
34446: LD_INT 1
34448: NEG
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 1
34456: PUSH
34457: LD_INT 0
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 1
34466: PUSH
34467: LD_INT 1
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 0
34476: PUSH
34477: LD_INT 1
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 1
34486: NEG
34487: PUSH
34488: LD_INT 0
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 1
34497: NEG
34498: PUSH
34499: LD_INT 1
34501: NEG
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 1
34509: NEG
34510: PUSH
34511: LD_INT 2
34513: NEG
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 0
34521: PUSH
34522: LD_INT 2
34524: NEG
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 1
34532: PUSH
34533: LD_INT 1
34535: NEG
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 2
34543: PUSH
34544: LD_INT 0
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 2
34553: PUSH
34554: LD_INT 1
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 2
34563: PUSH
34564: LD_INT 2
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 1
34573: PUSH
34574: LD_INT 2
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 0
34583: PUSH
34584: LD_INT 2
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 1
34593: NEG
34594: PUSH
34595: LD_INT 1
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 2
34604: NEG
34605: PUSH
34606: LD_INT 0
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 2
34615: NEG
34616: PUSH
34617: LD_INT 1
34619: NEG
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: PUSH
34625: LD_INT 2
34627: NEG
34628: PUSH
34629: LD_INT 2
34631: NEG
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 1
34639: PUSH
34640: LD_INT 2
34642: NEG
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 2
34650: PUSH
34651: LD_INT 1
34653: NEG
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 3
34661: PUSH
34662: LD_INT 1
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 3
34671: PUSH
34672: LD_INT 2
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34704: LD_ADDR_VAR 0 25
34708: PUSH
34709: LD_INT 0
34711: PUSH
34712: LD_INT 0
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: LD_INT 0
34721: PUSH
34722: LD_INT 1
34724: NEG
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 1
34732: PUSH
34733: LD_INT 0
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 1
34742: PUSH
34743: LD_INT 1
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 0
34752: PUSH
34753: LD_INT 1
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 1
34762: NEG
34763: PUSH
34764: LD_INT 0
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 1
34773: NEG
34774: PUSH
34775: LD_INT 1
34777: NEG
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 1
34785: NEG
34786: PUSH
34787: LD_INT 2
34789: NEG
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 0
34797: PUSH
34798: LD_INT 2
34800: NEG
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 1
34808: PUSH
34809: LD_INT 1
34811: NEG
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 2
34819: PUSH
34820: LD_INT 0
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 2
34829: PUSH
34830: LD_INT 1
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 2
34839: PUSH
34840: LD_INT 2
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 1
34849: PUSH
34850: LD_INT 2
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 0
34859: PUSH
34860: LD_INT 2
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 1
34869: NEG
34870: PUSH
34871: LD_INT 1
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 2
34880: NEG
34881: PUSH
34882: LD_INT 0
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 2
34891: NEG
34892: PUSH
34893: LD_INT 1
34895: NEG
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 2
34903: NEG
34904: PUSH
34905: LD_INT 2
34907: NEG
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 3
34915: PUSH
34916: LD_INT 1
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 3
34925: PUSH
34926: LD_INT 2
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 2
34935: PUSH
34936: LD_INT 3
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 1
34945: PUSH
34946: LD_INT 3
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34978: LD_ADDR_VAR 0 26
34982: PUSH
34983: LD_INT 0
34985: PUSH
34986: LD_INT 0
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 0
34995: PUSH
34996: LD_INT 1
34998: NEG
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 1
35006: PUSH
35007: LD_INT 0
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 1
35016: PUSH
35017: LD_INT 1
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 0
35026: PUSH
35027: LD_INT 1
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 1
35036: NEG
35037: PUSH
35038: LD_INT 0
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 1
35047: NEG
35048: PUSH
35049: LD_INT 1
35051: NEG
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 1
35059: NEG
35060: PUSH
35061: LD_INT 2
35063: NEG
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 0
35071: PUSH
35072: LD_INT 2
35074: NEG
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: LD_INT 1
35082: PUSH
35083: LD_INT 1
35085: NEG
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 2
35093: PUSH
35094: LD_INT 0
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 2
35103: PUSH
35104: LD_INT 1
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 2
35113: PUSH
35114: LD_INT 2
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 1
35123: PUSH
35124: LD_INT 2
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 0
35133: PUSH
35134: LD_INT 2
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 1
35143: NEG
35144: PUSH
35145: LD_INT 1
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 2
35154: NEG
35155: PUSH
35156: LD_INT 0
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 2
35165: NEG
35166: PUSH
35167: LD_INT 1
35169: NEG
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 2
35177: NEG
35178: PUSH
35179: LD_INT 2
35181: NEG
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 2
35189: PUSH
35190: LD_INT 3
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: LD_INT 1
35199: PUSH
35200: LD_INT 3
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 1
35209: NEG
35210: PUSH
35211: LD_INT 2
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 2
35220: NEG
35221: PUSH
35222: LD_INT 1
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35254: LD_ADDR_VAR 0 27
35258: PUSH
35259: LD_INT 0
35261: PUSH
35262: LD_INT 0
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 0
35271: PUSH
35272: LD_INT 1
35274: NEG
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 1
35282: PUSH
35283: LD_INT 0
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 1
35292: PUSH
35293: LD_INT 1
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 0
35302: PUSH
35303: LD_INT 1
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 1
35312: NEG
35313: PUSH
35314: LD_INT 0
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 1
35323: NEG
35324: PUSH
35325: LD_INT 1
35327: NEG
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 1
35335: NEG
35336: PUSH
35337: LD_INT 2
35339: NEG
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: LD_INT 0
35347: PUSH
35348: LD_INT 2
35350: NEG
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: LD_INT 1
35358: PUSH
35359: LD_INT 1
35361: NEG
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 2
35369: PUSH
35370: LD_INT 0
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 2
35379: PUSH
35380: LD_INT 1
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 2
35389: PUSH
35390: LD_INT 2
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 1
35399: PUSH
35400: LD_INT 2
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PUSH
35407: LD_INT 0
35409: PUSH
35410: LD_INT 2
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: LD_INT 1
35419: NEG
35420: PUSH
35421: LD_INT 1
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 2
35430: NEG
35431: PUSH
35432: LD_INT 0
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 2
35441: NEG
35442: PUSH
35443: LD_INT 1
35445: NEG
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 2
35453: NEG
35454: PUSH
35455: LD_INT 2
35457: NEG
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 1
35465: NEG
35466: PUSH
35467: LD_INT 2
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 2
35476: NEG
35477: PUSH
35478: LD_INT 1
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 3
35487: NEG
35488: PUSH
35489: LD_INT 1
35491: NEG
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 3
35499: NEG
35500: PUSH
35501: LD_INT 2
35503: NEG
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35534: LD_ADDR_VAR 0 28
35538: PUSH
35539: LD_INT 0
35541: PUSH
35542: LD_INT 0
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 0
35551: PUSH
35552: LD_INT 1
35554: NEG
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 1
35562: PUSH
35563: LD_INT 0
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 1
35572: PUSH
35573: LD_INT 1
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 0
35582: PUSH
35583: LD_INT 1
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 1
35592: NEG
35593: PUSH
35594: LD_INT 0
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 1
35603: NEG
35604: PUSH
35605: LD_INT 1
35607: NEG
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 1
35615: NEG
35616: PUSH
35617: LD_INT 2
35619: NEG
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: PUSH
35625: LD_INT 0
35627: PUSH
35628: LD_INT 2
35630: NEG
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 1
35638: PUSH
35639: LD_INT 1
35641: NEG
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 2
35649: PUSH
35650: LD_INT 0
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 2
35659: PUSH
35660: LD_INT 1
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 2
35669: PUSH
35670: LD_INT 2
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 1
35679: PUSH
35680: LD_INT 2
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 0
35689: PUSH
35690: LD_INT 2
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 1
35699: NEG
35700: PUSH
35701: LD_INT 1
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 2
35710: NEG
35711: PUSH
35712: LD_INT 0
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: LD_INT 2
35721: NEG
35722: PUSH
35723: LD_INT 1
35725: NEG
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 2
35733: NEG
35734: PUSH
35735: LD_INT 2
35737: NEG
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 2
35745: NEG
35746: PUSH
35747: LD_INT 3
35749: NEG
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 1
35757: NEG
35758: PUSH
35759: LD_INT 3
35761: NEG
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 3
35769: NEG
35770: PUSH
35771: LD_INT 1
35773: NEG
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 3
35781: NEG
35782: PUSH
35783: LD_INT 2
35785: NEG
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35816: LD_ADDR_VAR 0 29
35820: PUSH
35821: LD_INT 0
35823: PUSH
35824: LD_INT 0
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 0
35833: PUSH
35834: LD_INT 1
35836: NEG
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 1
35844: PUSH
35845: LD_INT 0
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 1
35854: PUSH
35855: LD_INT 1
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 0
35864: PUSH
35865: LD_INT 1
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 1
35874: NEG
35875: PUSH
35876: LD_INT 0
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 1
35885: NEG
35886: PUSH
35887: LD_INT 1
35889: NEG
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 1
35897: NEG
35898: PUSH
35899: LD_INT 2
35901: NEG
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 0
35909: PUSH
35910: LD_INT 2
35912: NEG
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 1
35920: PUSH
35921: LD_INT 1
35923: NEG
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 2
35931: PUSH
35932: LD_INT 0
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 2
35941: PUSH
35942: LD_INT 1
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 1
35951: PUSH
35952: LD_INT 2
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 0
35961: PUSH
35962: LD_INT 2
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 1
35971: NEG
35972: PUSH
35973: LD_INT 1
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 2
35982: NEG
35983: PUSH
35984: LD_INT 1
35986: NEG
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 2
35994: NEG
35995: PUSH
35996: LD_INT 2
35998: NEG
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 2
36006: NEG
36007: PUSH
36008: LD_INT 3
36010: NEG
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 2
36018: PUSH
36019: LD_INT 1
36021: NEG
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 3
36029: PUSH
36030: LD_INT 1
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 1
36039: PUSH
36040: LD_INT 3
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 1
36049: NEG
36050: PUSH
36051: LD_INT 2
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 3
36060: NEG
36061: PUSH
36062: LD_INT 2
36064: NEG
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36095: LD_ADDR_VAR 0 30
36099: PUSH
36100: LD_INT 0
36102: PUSH
36103: LD_INT 0
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 0
36112: PUSH
36113: LD_INT 1
36115: NEG
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 1
36123: PUSH
36124: LD_INT 0
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 1
36133: PUSH
36134: LD_INT 1
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 0
36143: PUSH
36144: LD_INT 1
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 1
36153: NEG
36154: PUSH
36155: LD_INT 0
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 1
36164: NEG
36165: PUSH
36166: LD_INT 1
36168: NEG
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 1
36176: NEG
36177: PUSH
36178: LD_INT 2
36180: NEG
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 0
36188: PUSH
36189: LD_INT 2
36191: NEG
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 1
36199: PUSH
36200: LD_INT 1
36202: NEG
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 2
36210: PUSH
36211: LD_INT 0
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 2
36220: PUSH
36221: LD_INT 1
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 2
36230: PUSH
36231: LD_INT 2
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 1
36240: PUSH
36241: LD_INT 2
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 1
36250: NEG
36251: PUSH
36252: LD_INT 1
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: PUSH
36259: LD_INT 2
36261: NEG
36262: PUSH
36263: LD_INT 0
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 2
36272: NEG
36273: PUSH
36274: LD_INT 1
36276: NEG
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 1
36284: NEG
36285: PUSH
36286: LD_INT 3
36288: NEG
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: LD_INT 1
36296: PUSH
36297: LD_INT 2
36299: NEG
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 3
36307: PUSH
36308: LD_INT 2
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 2
36317: PUSH
36318: LD_INT 3
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 2
36327: NEG
36328: PUSH
36329: LD_INT 1
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 3
36338: NEG
36339: PUSH
36340: LD_INT 1
36342: NEG
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36373: LD_ADDR_VAR 0 31
36377: PUSH
36378: LD_INT 0
36380: PUSH
36381: LD_INT 0
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 0
36390: PUSH
36391: LD_INT 1
36393: NEG
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 1
36401: PUSH
36402: LD_INT 0
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 1
36411: PUSH
36412: LD_INT 1
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 0
36421: PUSH
36422: LD_INT 1
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 1
36431: NEG
36432: PUSH
36433: LD_INT 0
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 1
36442: NEG
36443: PUSH
36444: LD_INT 1
36446: NEG
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 1
36454: NEG
36455: PUSH
36456: LD_INT 2
36458: NEG
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 1
36466: PUSH
36467: LD_INT 1
36469: NEG
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 2
36477: PUSH
36478: LD_INT 0
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 2
36487: PUSH
36488: LD_INT 1
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 2
36497: PUSH
36498: LD_INT 2
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 1
36507: PUSH
36508: LD_INT 2
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 0
36517: PUSH
36518: LD_INT 2
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: LD_INT 1
36527: NEG
36528: PUSH
36529: LD_INT 1
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 2
36538: NEG
36539: PUSH
36540: LD_INT 1
36542: NEG
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: LD_INT 2
36550: NEG
36551: PUSH
36552: LD_INT 2
36554: NEG
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 2
36562: NEG
36563: PUSH
36564: LD_INT 3
36566: NEG
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 2
36574: PUSH
36575: LD_INT 1
36577: NEG
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 3
36585: PUSH
36586: LD_INT 1
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 1
36595: PUSH
36596: LD_INT 3
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 1
36605: NEG
36606: PUSH
36607: LD_INT 2
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 3
36616: NEG
36617: PUSH
36618: LD_INT 2
36620: NEG
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36651: LD_ADDR_VAR 0 32
36655: PUSH
36656: LD_INT 0
36658: PUSH
36659: LD_INT 0
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 0
36668: PUSH
36669: LD_INT 1
36671: NEG
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 1
36679: PUSH
36680: LD_INT 0
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 1
36689: PUSH
36690: LD_INT 1
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 0
36699: PUSH
36700: LD_INT 1
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 1
36709: NEG
36710: PUSH
36711: LD_INT 0
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 1
36720: NEG
36721: PUSH
36722: LD_INT 1
36724: NEG
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 1
36732: NEG
36733: PUSH
36734: LD_INT 2
36736: NEG
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 0
36744: PUSH
36745: LD_INT 2
36747: NEG
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 1
36755: PUSH
36756: LD_INT 1
36758: NEG
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: PUSH
36764: LD_INT 2
36766: PUSH
36767: LD_INT 1
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: PUSH
36774: LD_INT 2
36776: PUSH
36777: LD_INT 2
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 1
36786: PUSH
36787: LD_INT 2
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 0
36796: PUSH
36797: LD_INT 2
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 1
36806: NEG
36807: PUSH
36808: LD_INT 1
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 2
36817: NEG
36818: PUSH
36819: LD_INT 0
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 2
36828: NEG
36829: PUSH
36830: LD_INT 1
36832: NEG
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 1
36840: NEG
36841: PUSH
36842: LD_INT 3
36844: NEG
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 1
36852: PUSH
36853: LD_INT 2
36855: NEG
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 3
36863: PUSH
36864: LD_INT 2
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 2
36873: PUSH
36874: LD_INT 3
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 2
36883: NEG
36884: PUSH
36885: LD_INT 1
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 3
36894: NEG
36895: PUSH
36896: LD_INT 1
36898: NEG
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36929: LD_ADDR_VAR 0 33
36933: PUSH
36934: LD_INT 0
36936: PUSH
36937: LD_INT 0
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 0
36946: PUSH
36947: LD_INT 1
36949: NEG
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 1
36957: PUSH
36958: LD_INT 0
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 1
36967: PUSH
36968: LD_INT 1
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 0
36977: PUSH
36978: LD_INT 1
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 1
36987: NEG
36988: PUSH
36989: LD_INT 0
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 1
36998: NEG
36999: PUSH
37000: LD_INT 1
37002: NEG
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: LD_INT 1
37010: NEG
37011: PUSH
37012: LD_INT 2
37014: NEG
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 1
37022: PUSH
37023: LD_INT 1
37025: NEG
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 2
37033: PUSH
37034: LD_INT 0
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 2
37043: PUSH
37044: LD_INT 1
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 1
37053: PUSH
37054: LD_INT 2
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 0
37063: PUSH
37064: LD_INT 2
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 1
37073: NEG
37074: PUSH
37075: LD_INT 1
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 2
37084: NEG
37085: PUSH
37086: LD_INT 0
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 2
37095: NEG
37096: PUSH
37097: LD_INT 1
37099: NEG
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 2
37107: NEG
37108: PUSH
37109: LD_INT 2
37111: NEG
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 2
37119: NEG
37120: PUSH
37121: LD_INT 3
37123: NEG
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 2
37131: PUSH
37132: LD_INT 1
37134: NEG
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 3
37142: PUSH
37143: LD_INT 1
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 1
37152: PUSH
37153: LD_INT 3
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 1
37162: NEG
37163: PUSH
37164: LD_INT 2
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 3
37173: NEG
37174: PUSH
37175: LD_INT 2
37177: NEG
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37208: LD_ADDR_VAR 0 34
37212: PUSH
37213: LD_INT 0
37215: PUSH
37216: LD_INT 0
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 0
37225: PUSH
37226: LD_INT 1
37228: NEG
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 1
37236: PUSH
37237: LD_INT 0
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 1
37246: PUSH
37247: LD_INT 1
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 0
37256: PUSH
37257: LD_INT 1
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 1
37266: NEG
37267: PUSH
37268: LD_INT 0
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 1
37277: NEG
37278: PUSH
37279: LD_INT 1
37281: NEG
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 1
37289: NEG
37290: PUSH
37291: LD_INT 2
37293: NEG
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 0
37301: PUSH
37302: LD_INT 2
37304: NEG
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 1
37312: PUSH
37313: LD_INT 1
37315: NEG
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 2
37323: PUSH
37324: LD_INT 1
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 2
37333: PUSH
37334: LD_INT 2
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 1
37343: PUSH
37344: LD_INT 2
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 1
37353: NEG
37354: PUSH
37355: LD_INT 1
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 2
37364: NEG
37365: PUSH
37366: LD_INT 0
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 2
37375: NEG
37376: PUSH
37377: LD_INT 1
37379: NEG
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 2
37387: NEG
37388: PUSH
37389: LD_INT 2
37391: NEG
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 1
37399: NEG
37400: PUSH
37401: LD_INT 3
37403: NEG
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 1
37411: PUSH
37412: LD_INT 2
37414: NEG
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 3
37422: PUSH
37423: LD_INT 2
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 2
37432: PUSH
37433: LD_INT 3
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 2
37442: NEG
37443: PUSH
37444: LD_INT 1
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 3
37453: NEG
37454: PUSH
37455: LD_INT 1
37457: NEG
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37488: LD_ADDR_VAR 0 35
37492: PUSH
37493: LD_INT 0
37495: PUSH
37496: LD_INT 0
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: LD_INT 1
37508: NEG
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 1
37516: PUSH
37517: LD_INT 0
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 1
37526: PUSH
37527: LD_INT 1
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 0
37536: PUSH
37537: LD_INT 1
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 1
37546: NEG
37547: PUSH
37548: LD_INT 0
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 1
37557: NEG
37558: PUSH
37559: LD_INT 1
37561: NEG
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 2
37569: PUSH
37570: LD_INT 1
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 2
37579: NEG
37580: PUSH
37581: LD_INT 1
37583: NEG
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37600: LD_ADDR_VAR 0 36
37604: PUSH
37605: LD_INT 0
37607: PUSH
37608: LD_INT 0
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 0
37617: PUSH
37618: LD_INT 1
37620: NEG
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 1
37628: PUSH
37629: LD_INT 0
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 1
37638: PUSH
37639: LD_INT 1
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 0
37648: PUSH
37649: LD_INT 1
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 1
37658: NEG
37659: PUSH
37660: LD_INT 0
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 1
37669: NEG
37670: PUSH
37671: LD_INT 1
37673: NEG
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 1
37681: NEG
37682: PUSH
37683: LD_INT 2
37685: NEG
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 1
37693: PUSH
37694: LD_INT 2
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37712: LD_ADDR_VAR 0 37
37716: PUSH
37717: LD_INT 0
37719: PUSH
37720: LD_INT 0
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 0
37729: PUSH
37730: LD_INT 1
37732: NEG
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 1
37740: PUSH
37741: LD_INT 0
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 1
37750: PUSH
37751: LD_INT 1
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 0
37760: PUSH
37761: LD_INT 1
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 1
37770: NEG
37771: PUSH
37772: LD_INT 0
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 1
37781: NEG
37782: PUSH
37783: LD_INT 1
37785: NEG
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 1
37793: PUSH
37794: LD_INT 1
37796: NEG
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 1
37804: NEG
37805: PUSH
37806: LD_INT 1
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37824: LD_ADDR_VAR 0 38
37828: PUSH
37829: LD_INT 0
37831: PUSH
37832: LD_INT 0
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 0
37841: PUSH
37842: LD_INT 1
37844: NEG
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 1
37852: PUSH
37853: LD_INT 0
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 1
37862: PUSH
37863: LD_INT 1
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 0
37872: PUSH
37873: LD_INT 1
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 1
37882: NEG
37883: PUSH
37884: LD_INT 0
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 1
37893: NEG
37894: PUSH
37895: LD_INT 1
37897: NEG
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 2
37905: PUSH
37906: LD_INT 1
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 2
37915: NEG
37916: PUSH
37917: LD_INT 1
37919: NEG
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37936: LD_ADDR_VAR 0 39
37940: PUSH
37941: LD_INT 0
37943: PUSH
37944: LD_INT 0
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 0
37953: PUSH
37954: LD_INT 1
37956: NEG
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 1
37964: PUSH
37965: LD_INT 0
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 1
37974: PUSH
37975: LD_INT 1
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 0
37984: PUSH
37985: LD_INT 1
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 1
37994: NEG
37995: PUSH
37996: LD_INT 0
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 1
38005: NEG
38006: PUSH
38007: LD_INT 1
38009: NEG
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 1
38017: NEG
38018: PUSH
38019: LD_INT 2
38021: NEG
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 1
38029: PUSH
38030: LD_INT 2
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38048: LD_ADDR_VAR 0 40
38052: PUSH
38053: LD_INT 0
38055: PUSH
38056: LD_INT 0
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 0
38065: PUSH
38066: LD_INT 1
38068: NEG
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 1
38076: PUSH
38077: LD_INT 0
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 1
38086: PUSH
38087: LD_INT 1
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 0
38096: PUSH
38097: LD_INT 1
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 1
38106: NEG
38107: PUSH
38108: LD_INT 0
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 1
38117: NEG
38118: PUSH
38119: LD_INT 1
38121: NEG
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 1
38129: PUSH
38130: LD_INT 1
38132: NEG
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 1
38140: NEG
38141: PUSH
38142: LD_INT 1
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38160: LD_ADDR_VAR 0 41
38164: PUSH
38165: LD_INT 0
38167: PUSH
38168: LD_INT 0
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 0
38177: PUSH
38178: LD_INT 1
38180: NEG
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 1
38188: PUSH
38189: LD_INT 0
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 1
38198: PUSH
38199: LD_INT 1
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 0
38208: PUSH
38209: LD_INT 1
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 1
38218: NEG
38219: PUSH
38220: LD_INT 0
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 1
38229: NEG
38230: PUSH
38231: LD_INT 1
38233: NEG
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 1
38241: NEG
38242: PUSH
38243: LD_INT 2
38245: NEG
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 1
38253: PUSH
38254: LD_INT 1
38256: NEG
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 2
38264: PUSH
38265: LD_INT 0
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 2
38274: PUSH
38275: LD_INT 1
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 2
38284: PUSH
38285: LD_INT 2
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 1
38294: PUSH
38295: LD_INT 2
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 1
38304: NEG
38305: PUSH
38306: LD_INT 1
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 2
38315: NEG
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 2
38326: NEG
38327: PUSH
38328: LD_INT 1
38330: NEG
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 2
38338: NEG
38339: PUSH
38340: LD_INT 2
38342: NEG
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 2
38350: NEG
38351: PUSH
38352: LD_INT 3
38354: NEG
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 2
38362: PUSH
38363: LD_INT 1
38365: NEG
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 3
38373: PUSH
38374: LD_INT 0
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 3
38383: PUSH
38384: LD_INT 1
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 3
38393: PUSH
38394: LD_INT 2
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 3
38403: PUSH
38404: LD_INT 3
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 2
38413: PUSH
38414: LD_INT 3
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 2
38423: NEG
38424: PUSH
38425: LD_INT 1
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 3
38434: NEG
38435: PUSH
38436: LD_INT 0
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 3
38445: NEG
38446: PUSH
38447: LD_INT 1
38449: NEG
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 3
38457: NEG
38458: PUSH
38459: LD_INT 2
38461: NEG
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 3
38469: NEG
38470: PUSH
38471: LD_INT 3
38473: NEG
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38510: LD_ADDR_VAR 0 42
38514: PUSH
38515: LD_INT 0
38517: PUSH
38518: LD_INT 0
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 0
38527: PUSH
38528: LD_INT 1
38530: NEG
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 1
38538: PUSH
38539: LD_INT 0
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 1
38548: PUSH
38549: LD_INT 1
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 0
38558: PUSH
38559: LD_INT 1
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 1
38568: NEG
38569: PUSH
38570: LD_INT 0
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 1
38579: NEG
38580: PUSH
38581: LD_INT 1
38583: NEG
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 1
38591: NEG
38592: PUSH
38593: LD_INT 2
38595: NEG
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 0
38603: PUSH
38604: LD_INT 2
38606: NEG
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 1
38614: PUSH
38615: LD_INT 1
38617: NEG
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 2
38625: PUSH
38626: LD_INT 1
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 2
38635: PUSH
38636: LD_INT 2
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 1
38645: PUSH
38646: LD_INT 2
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 0
38655: PUSH
38656: LD_INT 2
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 1
38665: NEG
38666: PUSH
38667: LD_INT 1
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 2
38676: NEG
38677: PUSH
38678: LD_INT 1
38680: NEG
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 2
38688: NEG
38689: PUSH
38690: LD_INT 2
38692: NEG
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 2
38700: NEG
38701: PUSH
38702: LD_INT 3
38704: NEG
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 1
38712: NEG
38713: PUSH
38714: LD_INT 3
38716: NEG
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 0
38724: PUSH
38725: LD_INT 3
38727: NEG
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 1
38735: PUSH
38736: LD_INT 2
38738: NEG
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 3
38746: PUSH
38747: LD_INT 2
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 3
38756: PUSH
38757: LD_INT 3
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 2
38766: PUSH
38767: LD_INT 3
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 1
38776: PUSH
38777: LD_INT 3
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 0
38786: PUSH
38787: LD_INT 3
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 1
38796: NEG
38797: PUSH
38798: LD_INT 2
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 3
38807: NEG
38808: PUSH
38809: LD_INT 2
38811: NEG
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 3
38819: NEG
38820: PUSH
38821: LD_INT 3
38823: NEG
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38860: LD_ADDR_VAR 0 43
38864: PUSH
38865: LD_INT 0
38867: PUSH
38868: LD_INT 0
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: LD_INT 1
38880: NEG
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: LD_INT 1
38888: PUSH
38889: LD_INT 0
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 1
38898: PUSH
38899: LD_INT 1
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 0
38908: PUSH
38909: LD_INT 1
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 1
38918: NEG
38919: PUSH
38920: LD_INT 0
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 1
38929: NEG
38930: PUSH
38931: LD_INT 1
38933: NEG
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 1
38941: NEG
38942: PUSH
38943: LD_INT 2
38945: NEG
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 0
38953: PUSH
38954: LD_INT 2
38956: NEG
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 1
38964: PUSH
38965: LD_INT 1
38967: NEG
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 2
38975: PUSH
38976: LD_INT 0
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 2
38985: PUSH
38986: LD_INT 1
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 1
38995: PUSH
38996: LD_INT 2
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 0
39005: PUSH
39006: LD_INT 2
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 1
39015: NEG
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 2
39026: NEG
39027: PUSH
39028: LD_INT 0
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 2
39037: NEG
39038: PUSH
39039: LD_INT 1
39041: NEG
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 1
39049: NEG
39050: PUSH
39051: LD_INT 3
39053: NEG
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 0
39061: PUSH
39062: LD_INT 3
39064: NEG
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 1
39072: PUSH
39073: LD_INT 2
39075: NEG
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 2
39083: PUSH
39084: LD_INT 1
39086: NEG
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 3
39094: PUSH
39095: LD_INT 0
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 3
39104: PUSH
39105: LD_INT 1
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 1
39114: PUSH
39115: LD_INT 3
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 0
39124: PUSH
39125: LD_INT 3
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 1
39134: NEG
39135: PUSH
39136: LD_INT 2
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 2
39145: NEG
39146: PUSH
39147: LD_INT 1
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 3
39156: NEG
39157: PUSH
39158: LD_INT 0
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 3
39167: NEG
39168: PUSH
39169: LD_INT 1
39171: NEG
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39208: LD_ADDR_VAR 0 44
39212: PUSH
39213: LD_INT 0
39215: PUSH
39216: LD_INT 0
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 0
39225: PUSH
39226: LD_INT 1
39228: NEG
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 1
39236: PUSH
39237: LD_INT 0
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 1
39246: PUSH
39247: LD_INT 1
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 0
39256: PUSH
39257: LD_INT 1
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 1
39266: NEG
39267: PUSH
39268: LD_INT 0
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 1
39277: NEG
39278: PUSH
39279: LD_INT 1
39281: NEG
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 1
39289: NEG
39290: PUSH
39291: LD_INT 2
39293: NEG
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 1
39301: PUSH
39302: LD_INT 1
39304: NEG
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 2
39312: PUSH
39313: LD_INT 0
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 2
39322: PUSH
39323: LD_INT 1
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 2
39332: PUSH
39333: LD_INT 2
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 1
39342: PUSH
39343: LD_INT 2
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 1
39352: NEG
39353: PUSH
39354: LD_INT 1
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 2
39363: NEG
39364: PUSH
39365: LD_INT 0
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 2
39374: NEG
39375: PUSH
39376: LD_INT 1
39378: NEG
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 2
39386: NEG
39387: PUSH
39388: LD_INT 2
39390: NEG
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 2
39398: NEG
39399: PUSH
39400: LD_INT 3
39402: NEG
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 2
39410: PUSH
39411: LD_INT 1
39413: NEG
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 3
39421: PUSH
39422: LD_INT 0
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 3
39431: PUSH
39432: LD_INT 1
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 3
39441: PUSH
39442: LD_INT 2
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 3
39451: PUSH
39452: LD_INT 3
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 2
39461: PUSH
39462: LD_INT 3
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 2
39471: NEG
39472: PUSH
39473: LD_INT 1
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 3
39482: NEG
39483: PUSH
39484: LD_INT 0
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 3
39493: NEG
39494: PUSH
39495: LD_INT 1
39497: NEG
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 3
39505: NEG
39506: PUSH
39507: LD_INT 2
39509: NEG
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 3
39517: NEG
39518: PUSH
39519: LD_INT 3
39521: NEG
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39558: LD_ADDR_VAR 0 45
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: LD_INT 0
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 0
39575: PUSH
39576: LD_INT 1
39578: NEG
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 1
39586: PUSH
39587: LD_INT 0
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 1
39596: PUSH
39597: LD_INT 1
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 0
39606: PUSH
39607: LD_INT 1
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 1
39616: NEG
39617: PUSH
39618: LD_INT 0
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 1
39627: NEG
39628: PUSH
39629: LD_INT 1
39631: NEG
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 1
39639: NEG
39640: PUSH
39641: LD_INT 2
39643: NEG
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 0
39651: PUSH
39652: LD_INT 2
39654: NEG
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 1
39662: PUSH
39663: LD_INT 1
39665: NEG
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 2
39673: PUSH
39674: LD_INT 1
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 2
39683: PUSH
39684: LD_INT 2
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 1
39693: PUSH
39694: LD_INT 2
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 0
39703: PUSH
39704: LD_INT 2
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 1
39713: NEG
39714: PUSH
39715: LD_INT 1
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 2
39724: NEG
39725: PUSH
39726: LD_INT 1
39728: NEG
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 2
39736: NEG
39737: PUSH
39738: LD_INT 2
39740: NEG
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 2
39748: NEG
39749: PUSH
39750: LD_INT 3
39752: NEG
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 1
39760: NEG
39761: PUSH
39762: LD_INT 3
39764: NEG
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 0
39772: PUSH
39773: LD_INT 3
39775: NEG
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 1
39783: PUSH
39784: LD_INT 2
39786: NEG
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 3
39794: PUSH
39795: LD_INT 2
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 3
39804: PUSH
39805: LD_INT 3
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 2
39814: PUSH
39815: LD_INT 3
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 1
39824: PUSH
39825: LD_INT 3
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 0
39834: PUSH
39835: LD_INT 3
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 1
39844: NEG
39845: PUSH
39846: LD_INT 2
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 3
39855: NEG
39856: PUSH
39857: LD_INT 2
39859: NEG
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 3
39867: NEG
39868: PUSH
39869: LD_INT 3
39871: NEG
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39908: LD_ADDR_VAR 0 46
39912: PUSH
39913: LD_INT 0
39915: PUSH
39916: LD_INT 0
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 0
39925: PUSH
39926: LD_INT 1
39928: NEG
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 1
39936: PUSH
39937: LD_INT 0
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 1
39946: PUSH
39947: LD_INT 1
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 0
39956: PUSH
39957: LD_INT 1
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 1
39966: NEG
39967: PUSH
39968: LD_INT 0
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 1
39977: NEG
39978: PUSH
39979: LD_INT 1
39981: NEG
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 1
39989: NEG
39990: PUSH
39991: LD_INT 2
39993: NEG
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 0
40001: PUSH
40002: LD_INT 2
40004: NEG
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 1
40012: PUSH
40013: LD_INT 1
40015: NEG
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 2
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 2
40033: PUSH
40034: LD_INT 1
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 1
40043: PUSH
40044: LD_INT 2
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 0
40053: PUSH
40054: LD_INT 2
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: LD_INT 1
40063: NEG
40064: PUSH
40065: LD_INT 1
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 2
40074: NEG
40075: PUSH
40076: LD_INT 0
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 2
40085: NEG
40086: PUSH
40087: LD_INT 1
40089: NEG
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 1
40097: NEG
40098: PUSH
40099: LD_INT 3
40101: NEG
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 0
40109: PUSH
40110: LD_INT 3
40112: NEG
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 1
40120: PUSH
40121: LD_INT 2
40123: NEG
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 2
40131: PUSH
40132: LD_INT 1
40134: NEG
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 3
40142: PUSH
40143: LD_INT 0
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 3
40152: PUSH
40153: LD_INT 1
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 1
40162: PUSH
40163: LD_INT 3
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 0
40172: PUSH
40173: LD_INT 3
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 1
40182: NEG
40183: PUSH
40184: LD_INT 2
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 2
40193: NEG
40194: PUSH
40195: LD_INT 1
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 3
40204: NEG
40205: PUSH
40206: LD_INT 0
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 3
40215: NEG
40216: PUSH
40217: LD_INT 1
40219: NEG
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40256: LD_ADDR_VAR 0 47
40260: PUSH
40261: LD_INT 0
40263: PUSH
40264: LD_INT 0
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 0
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 1
40284: PUSH
40285: LD_INT 0
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 1
40294: PUSH
40295: LD_INT 1
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 0
40304: PUSH
40305: LD_INT 1
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 1
40314: NEG
40315: PUSH
40316: LD_INT 0
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 1
40325: NEG
40326: PUSH
40327: LD_INT 1
40329: NEG
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: LD_INT 2
40341: NEG
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 0
40349: PUSH
40350: LD_INT 2
40352: NEG
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: LD_INT 1
40363: NEG
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 2
40371: NEG
40372: PUSH
40373: LD_INT 1
40375: NEG
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 2
40383: NEG
40384: PUSH
40385: LD_INT 2
40387: NEG
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40407: LD_ADDR_VAR 0 48
40411: PUSH
40412: LD_INT 0
40414: PUSH
40415: LD_INT 0
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 0
40424: PUSH
40425: LD_INT 1
40427: NEG
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 1
40435: PUSH
40436: LD_INT 0
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 1
40445: PUSH
40446: LD_INT 1
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 0
40455: PUSH
40456: LD_INT 1
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 1
40465: NEG
40466: PUSH
40467: LD_INT 0
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 1
40476: NEG
40477: PUSH
40478: LD_INT 1
40480: NEG
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 1
40488: NEG
40489: PUSH
40490: LD_INT 2
40492: NEG
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 0
40500: PUSH
40501: LD_INT 2
40503: NEG
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 1
40511: PUSH
40512: LD_INT 1
40514: NEG
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 2
40522: PUSH
40523: LD_INT 0
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 2
40532: PUSH
40533: LD_INT 1
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40554: LD_ADDR_VAR 0 49
40558: PUSH
40559: LD_INT 0
40561: PUSH
40562: LD_INT 0
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 0
40571: PUSH
40572: LD_INT 1
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 1
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 1
40592: PUSH
40593: LD_INT 1
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 0
40602: PUSH
40603: LD_INT 1
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 1
40612: NEG
40613: PUSH
40614: LD_INT 0
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 1
40623: NEG
40624: PUSH
40625: LD_INT 1
40627: NEG
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 1
40635: PUSH
40636: LD_INT 1
40638: NEG
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 2
40646: PUSH
40647: LD_INT 0
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 2
40656: PUSH
40657: LD_INT 1
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 2
40666: PUSH
40667: LD_INT 2
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 1
40676: PUSH
40677: LD_INT 2
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40698: LD_ADDR_VAR 0 50
40702: PUSH
40703: LD_INT 0
40705: PUSH
40706: LD_INT 0
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 0
40715: PUSH
40716: LD_INT 1
40718: NEG
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 1
40726: PUSH
40727: LD_INT 0
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 1
40736: PUSH
40737: LD_INT 1
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 0
40746: PUSH
40747: LD_INT 1
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 1
40756: NEG
40757: PUSH
40758: LD_INT 0
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 1
40767: NEG
40768: PUSH
40769: LD_INT 1
40771: NEG
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 2
40779: PUSH
40780: LD_INT 1
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 2
40789: PUSH
40790: LD_INT 2
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 1
40799: PUSH
40800: LD_INT 2
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 0
40809: PUSH
40810: LD_INT 2
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 1
40819: NEG
40820: PUSH
40821: LD_INT 1
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40842: LD_ADDR_VAR 0 51
40846: PUSH
40847: LD_INT 0
40849: PUSH
40850: LD_INT 0
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 0
40859: PUSH
40860: LD_INT 1
40862: NEG
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 1
40870: PUSH
40871: LD_INT 0
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: LD_INT 1
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 0
40890: PUSH
40891: LD_INT 1
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 1
40900: NEG
40901: PUSH
40902: LD_INT 0
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 1
40911: NEG
40912: PUSH
40913: LD_INT 1
40915: NEG
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: PUSH
40924: LD_INT 2
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 0
40933: PUSH
40934: LD_INT 2
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 1
40943: NEG
40944: PUSH
40945: LD_INT 1
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 2
40954: NEG
40955: PUSH
40956: LD_INT 0
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 2
40965: NEG
40966: PUSH
40967: LD_INT 1
40969: NEG
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40989: LD_ADDR_VAR 0 52
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: LD_INT 0
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 0
41006: PUSH
41007: LD_INT 1
41009: NEG
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 1
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 1
41027: PUSH
41028: LD_INT 1
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 0
41037: PUSH
41038: LD_INT 1
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 1
41047: NEG
41048: PUSH
41049: LD_INT 0
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 1
41058: NEG
41059: PUSH
41060: LD_INT 1
41062: NEG
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 1
41070: NEG
41071: PUSH
41072: LD_INT 2
41074: NEG
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 1
41082: NEG
41083: PUSH
41084: LD_INT 1
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 2
41093: NEG
41094: PUSH
41095: LD_INT 0
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 2
41104: NEG
41105: PUSH
41106: LD_INT 1
41108: NEG
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 2
41116: NEG
41117: PUSH
41118: LD_INT 2
41120: NEG
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41140: LD_ADDR_VAR 0 53
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 0
41157: PUSH
41158: LD_INT 1
41160: NEG
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 1
41168: PUSH
41169: LD_INT 0
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 1
41178: PUSH
41179: LD_INT 1
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 0
41188: PUSH
41189: LD_INT 1
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 1
41198: NEG
41199: PUSH
41200: LD_INT 0
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 1
41209: NEG
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 1
41221: NEG
41222: PUSH
41223: LD_INT 2
41225: NEG
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 0
41233: PUSH
41234: LD_INT 2
41236: NEG
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 1
41244: PUSH
41245: LD_INT 1
41247: NEG
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 2
41255: PUSH
41256: LD_INT 0
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 2
41265: PUSH
41266: LD_INT 1
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 2
41275: PUSH
41276: LD_INT 2
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 1
41285: PUSH
41286: LD_INT 2
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 0
41295: PUSH
41296: LD_INT 2
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 1
41305: NEG
41306: PUSH
41307: LD_INT 1
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 2
41316: NEG
41317: PUSH
41318: LD_INT 0
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 2
41327: NEG
41328: PUSH
41329: LD_INT 1
41331: NEG
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 2
41339: NEG
41340: PUSH
41341: LD_INT 2
41343: NEG
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41370: LD_ADDR_VAR 0 54
41374: PUSH
41375: LD_INT 0
41377: PUSH
41378: LD_INT 0
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 0
41387: PUSH
41388: LD_INT 1
41390: NEG
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 1
41398: PUSH
41399: LD_INT 0
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 1
41408: PUSH
41409: LD_INT 1
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 0
41418: PUSH
41419: LD_INT 1
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 1
41428: NEG
41429: PUSH
41430: LD_INT 0
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 1
41439: NEG
41440: PUSH
41441: LD_INT 1
41443: NEG
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 1
41451: NEG
41452: PUSH
41453: LD_INT 2
41455: NEG
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 0
41463: PUSH
41464: LD_INT 2
41466: NEG
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 1
41474: PUSH
41475: LD_INT 1
41477: NEG
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 2
41485: PUSH
41486: LD_INT 0
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 2
41495: PUSH
41496: LD_INT 1
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 2
41505: PUSH
41506: LD_INT 2
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 1
41515: PUSH
41516: LD_INT 2
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 0
41525: PUSH
41526: LD_INT 2
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 1
41535: NEG
41536: PUSH
41537: LD_INT 1
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 2
41546: NEG
41547: PUSH
41548: LD_INT 0
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 2
41557: NEG
41558: PUSH
41559: LD_INT 1
41561: NEG
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: LD_INT 2
41569: NEG
41570: PUSH
41571: LD_INT 2
41573: NEG
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41600: LD_ADDR_VAR 0 55
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: LD_INT 0
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 0
41617: PUSH
41618: LD_INT 1
41620: NEG
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 1
41628: PUSH
41629: LD_INT 0
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 1
41638: PUSH
41639: LD_INT 1
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 0
41648: PUSH
41649: LD_INT 1
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 1
41658: NEG
41659: PUSH
41660: LD_INT 0
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 1
41669: NEG
41670: PUSH
41671: LD_INT 1
41673: NEG
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 1
41681: NEG
41682: PUSH
41683: LD_INT 2
41685: NEG
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 0
41693: PUSH
41694: LD_INT 2
41696: NEG
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 1
41704: PUSH
41705: LD_INT 1
41707: NEG
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 2
41715: PUSH
41716: LD_INT 0
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 2
41725: PUSH
41726: LD_INT 1
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 2
41735: PUSH
41736: LD_INT 2
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 1
41745: PUSH
41746: LD_INT 2
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 0
41755: PUSH
41756: LD_INT 2
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 1
41765: NEG
41766: PUSH
41767: LD_INT 1
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 2
41776: NEG
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 2
41787: NEG
41788: PUSH
41789: LD_INT 1
41791: NEG
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 2
41799: NEG
41800: PUSH
41801: LD_INT 2
41803: NEG
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41830: LD_ADDR_VAR 0 56
41834: PUSH
41835: LD_INT 0
41837: PUSH
41838: LD_INT 0
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 0
41847: PUSH
41848: LD_INT 1
41850: NEG
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 1
41858: PUSH
41859: LD_INT 0
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 1
41868: PUSH
41869: LD_INT 1
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 0
41878: PUSH
41879: LD_INT 1
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 1
41888: NEG
41889: PUSH
41890: LD_INT 0
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 1
41899: NEG
41900: PUSH
41901: LD_INT 1
41903: NEG
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 1
41911: NEG
41912: PUSH
41913: LD_INT 2
41915: NEG
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 0
41923: PUSH
41924: LD_INT 2
41926: NEG
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 1
41934: PUSH
41935: LD_INT 1
41937: NEG
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 2
41945: PUSH
41946: LD_INT 0
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 2
41955: PUSH
41956: LD_INT 1
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 2
41965: PUSH
41966: LD_INT 2
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 1
41975: PUSH
41976: LD_INT 2
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 0
41985: PUSH
41986: LD_INT 2
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 1
41995: NEG
41996: PUSH
41997: LD_INT 1
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 2
42006: NEG
42007: PUSH
42008: LD_INT 0
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 2
42017: NEG
42018: PUSH
42019: LD_INT 1
42021: NEG
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 2
42029: NEG
42030: PUSH
42031: LD_INT 2
42033: NEG
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42060: LD_ADDR_VAR 0 57
42064: PUSH
42065: LD_INT 0
42067: PUSH
42068: LD_INT 0
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: LD_INT 1
42080: NEG
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 1
42088: PUSH
42089: LD_INT 0
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 1
42098: PUSH
42099: LD_INT 1
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 0
42108: PUSH
42109: LD_INT 1
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 1
42118: NEG
42119: PUSH
42120: LD_INT 0
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 1
42129: NEG
42130: PUSH
42131: LD_INT 1
42133: NEG
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 1
42141: NEG
42142: PUSH
42143: LD_INT 2
42145: NEG
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 0
42153: PUSH
42154: LD_INT 2
42156: NEG
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 1
42164: PUSH
42165: LD_INT 1
42167: NEG
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 2
42175: PUSH
42176: LD_INT 0
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 2
42185: PUSH
42186: LD_INT 1
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 2
42195: PUSH
42196: LD_INT 2
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 1
42205: PUSH
42206: LD_INT 2
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 0
42215: PUSH
42216: LD_INT 2
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 1
42225: NEG
42226: PUSH
42227: LD_INT 1
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 2
42236: NEG
42237: PUSH
42238: LD_INT 0
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 2
42247: NEG
42248: PUSH
42249: LD_INT 1
42251: NEG
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 2
42259: NEG
42260: PUSH
42261: LD_INT 2
42263: NEG
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42290: LD_ADDR_VAR 0 58
42294: PUSH
42295: LD_INT 0
42297: PUSH
42298: LD_INT 0
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 0
42307: PUSH
42308: LD_INT 1
42310: NEG
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 1
42318: PUSH
42319: LD_INT 0
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 1
42328: PUSH
42329: LD_INT 1
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 0
42338: PUSH
42339: LD_INT 1
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 1
42348: NEG
42349: PUSH
42350: LD_INT 0
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 1
42359: NEG
42360: PUSH
42361: LD_INT 1
42363: NEG
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 1
42371: NEG
42372: PUSH
42373: LD_INT 2
42375: NEG
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: LD_INT 2
42386: NEG
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 1
42394: PUSH
42395: LD_INT 1
42397: NEG
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 2
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 2
42415: PUSH
42416: LD_INT 1
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 2
42425: PUSH
42426: LD_INT 2
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: PUSH
42436: LD_INT 2
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 0
42445: PUSH
42446: LD_INT 2
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 1
42455: NEG
42456: PUSH
42457: LD_INT 1
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 2
42466: NEG
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 2
42477: NEG
42478: PUSH
42479: LD_INT 1
42481: NEG
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 2
42489: NEG
42490: PUSH
42491: LD_INT 2
42493: NEG
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42520: LD_ADDR_VAR 0 59
42524: PUSH
42525: LD_INT 0
42527: PUSH
42528: LD_INT 0
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 0
42537: PUSH
42538: LD_INT 1
42540: NEG
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 1
42548: PUSH
42549: LD_INT 0
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 1
42558: PUSH
42559: LD_INT 1
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: LD_INT 1
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 1
42578: NEG
42579: PUSH
42580: LD_INT 0
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 1
42589: NEG
42590: PUSH
42591: LD_INT 1
42593: NEG
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42608: LD_ADDR_VAR 0 60
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: LD_INT 0
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: LD_INT 1
42628: NEG
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: LD_INT 0
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 1
42646: PUSH
42647: LD_INT 1
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: LD_INT 1
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 1
42666: NEG
42667: PUSH
42668: LD_INT 0
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 1
42677: NEG
42678: PUSH
42679: LD_INT 1
42681: NEG
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42696: LD_ADDR_VAR 0 61
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: LD_INT 0
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: LD_INT 1
42716: NEG
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 1
42724: PUSH
42725: LD_INT 0
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 1
42734: PUSH
42735: LD_INT 1
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: LD_INT 1
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 1
42754: NEG
42755: PUSH
42756: LD_INT 0
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 1
42765: NEG
42766: PUSH
42767: LD_INT 1
42769: NEG
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42784: LD_ADDR_VAR 0 62
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: LD_INT 0
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 0
42801: PUSH
42802: LD_INT 1
42804: NEG
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 1
42812: PUSH
42813: LD_INT 0
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 1
42822: PUSH
42823: LD_INT 1
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: LD_INT 1
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 1
42842: NEG
42843: PUSH
42844: LD_INT 0
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 1
42853: NEG
42854: PUSH
42855: LD_INT 1
42857: NEG
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42872: LD_ADDR_VAR 0 63
42876: PUSH
42877: LD_INT 0
42879: PUSH
42880: LD_INT 0
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 0
42889: PUSH
42890: LD_INT 1
42892: NEG
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 1
42900: PUSH
42901: LD_INT 0
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 1
42910: PUSH
42911: LD_INT 1
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 0
42920: PUSH
42921: LD_INT 1
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 1
42930: NEG
42931: PUSH
42932: LD_INT 0
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 1
42941: NEG
42942: PUSH
42943: LD_INT 1
42945: NEG
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42960: LD_ADDR_VAR 0 64
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: LD_INT 1
42980: NEG
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: PUSH
42989: LD_INT 0
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 1
42998: PUSH
42999: LD_INT 1
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 0
43008: PUSH
43009: LD_INT 1
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 1
43018: NEG
43019: PUSH
43020: LD_INT 0
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: LD_INT 1
43033: NEG
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: ST_TO_ADDR
// end ; 1 :
43048: GO 48945
43050: LD_INT 1
43052: DOUBLE
43053: EQUAL
43054: IFTRUE 43058
43056: GO 45681
43058: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43059: LD_ADDR_VAR 0 11
43063: PUSH
43064: LD_INT 1
43066: NEG
43067: PUSH
43068: LD_INT 3
43070: NEG
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 0
43078: PUSH
43079: LD_INT 3
43081: NEG
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 1
43089: PUSH
43090: LD_INT 2
43092: NEG
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: LIST
43102: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43103: LD_ADDR_VAR 0 12
43107: PUSH
43108: LD_INT 2
43110: PUSH
43111: LD_INT 1
43113: NEG
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 3
43121: PUSH
43122: LD_INT 0
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 3
43131: PUSH
43132: LD_INT 1
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: LIST
43143: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43144: LD_ADDR_VAR 0 13
43148: PUSH
43149: LD_INT 3
43151: PUSH
43152: LD_INT 2
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 3
43161: PUSH
43162: LD_INT 3
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 2
43171: PUSH
43172: LD_INT 3
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: LIST
43183: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43184: LD_ADDR_VAR 0 14
43188: PUSH
43189: LD_INT 1
43191: PUSH
43192: LD_INT 3
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 0
43201: PUSH
43202: LD_INT 3
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 1
43211: NEG
43212: PUSH
43213: LD_INT 2
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: LIST
43224: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43225: LD_ADDR_VAR 0 15
43229: PUSH
43230: LD_INT 2
43232: NEG
43233: PUSH
43234: LD_INT 1
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 3
43243: NEG
43244: PUSH
43245: LD_INT 0
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 3
43254: NEG
43255: PUSH
43256: LD_INT 1
43258: NEG
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: LIST
43268: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43269: LD_ADDR_VAR 0 16
43273: PUSH
43274: LD_INT 2
43276: NEG
43277: PUSH
43278: LD_INT 3
43280: NEG
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 3
43288: NEG
43289: PUSH
43290: LD_INT 2
43292: NEG
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 3
43300: NEG
43301: PUSH
43302: LD_INT 3
43304: NEG
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: LIST
43314: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43315: LD_ADDR_VAR 0 17
43319: PUSH
43320: LD_INT 1
43322: NEG
43323: PUSH
43324: LD_INT 3
43326: NEG
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: LD_INT 3
43337: NEG
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: LD_INT 2
43348: NEG
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: LIST
43358: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43359: LD_ADDR_VAR 0 18
43363: PUSH
43364: LD_INT 2
43366: PUSH
43367: LD_INT 1
43369: NEG
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 3
43377: PUSH
43378: LD_INT 0
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 3
43387: PUSH
43388: LD_INT 1
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: LIST
43399: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43400: LD_ADDR_VAR 0 19
43404: PUSH
43405: LD_INT 3
43407: PUSH
43408: LD_INT 2
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 3
43417: PUSH
43418: LD_INT 3
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 2
43427: PUSH
43428: LD_INT 3
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: LIST
43439: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43440: LD_ADDR_VAR 0 20
43444: PUSH
43445: LD_INT 1
43447: PUSH
43448: LD_INT 3
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 0
43457: PUSH
43458: LD_INT 3
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: NEG
43468: PUSH
43469: LD_INT 2
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: LIST
43480: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43481: LD_ADDR_VAR 0 21
43485: PUSH
43486: LD_INT 2
43488: NEG
43489: PUSH
43490: LD_INT 1
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 3
43499: NEG
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 3
43510: NEG
43511: PUSH
43512: LD_INT 1
43514: NEG
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: LIST
43524: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43525: LD_ADDR_VAR 0 22
43529: PUSH
43530: LD_INT 2
43532: NEG
43533: PUSH
43534: LD_INT 3
43536: NEG
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 3
43544: NEG
43545: PUSH
43546: LD_INT 2
43548: NEG
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 3
43556: NEG
43557: PUSH
43558: LD_INT 3
43560: NEG
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: LIST
43570: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43571: LD_ADDR_VAR 0 23
43575: PUSH
43576: LD_INT 0
43578: PUSH
43579: LD_INT 3
43581: NEG
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 1
43589: NEG
43590: PUSH
43591: LD_INT 4
43593: NEG
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 1
43601: PUSH
43602: LD_INT 3
43604: NEG
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: LIST
43614: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43615: LD_ADDR_VAR 0 24
43619: PUSH
43620: LD_INT 3
43622: PUSH
43623: LD_INT 0
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 3
43632: PUSH
43633: LD_INT 1
43635: NEG
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 4
43643: PUSH
43644: LD_INT 1
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: LIST
43655: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43656: LD_ADDR_VAR 0 25
43660: PUSH
43661: LD_INT 3
43663: PUSH
43664: LD_INT 3
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 4
43673: PUSH
43674: LD_INT 3
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 3
43683: PUSH
43684: LD_INT 4
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: LIST
43695: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43696: LD_ADDR_VAR 0 26
43700: PUSH
43701: LD_INT 0
43703: PUSH
43704: LD_INT 3
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: LD_INT 4
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: NEG
43724: PUSH
43725: LD_INT 3
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: LIST
43736: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43737: LD_ADDR_VAR 0 27
43741: PUSH
43742: LD_INT 3
43744: NEG
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 3
43755: NEG
43756: PUSH
43757: LD_INT 1
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 4
43766: NEG
43767: PUSH
43768: LD_INT 1
43770: NEG
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: LIST
43780: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43781: LD_ADDR_VAR 0 28
43785: PUSH
43786: LD_INT 3
43788: NEG
43789: PUSH
43790: LD_INT 3
43792: NEG
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 3
43800: NEG
43801: PUSH
43802: LD_INT 4
43804: NEG
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 4
43812: NEG
43813: PUSH
43814: LD_INT 3
43816: NEG
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: LIST
43826: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43827: LD_ADDR_VAR 0 29
43831: PUSH
43832: LD_INT 1
43834: NEG
43835: PUSH
43836: LD_INT 3
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: LD_INT 3
43849: NEG
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 1
43857: PUSH
43858: LD_INT 2
43860: NEG
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 1
43868: NEG
43869: PUSH
43870: LD_INT 4
43872: NEG
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 0
43880: PUSH
43881: LD_INT 4
43883: NEG
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 1
43891: PUSH
43892: LD_INT 3
43894: NEG
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 1
43902: NEG
43903: PUSH
43904: LD_INT 5
43906: NEG
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 0
43914: PUSH
43915: LD_INT 5
43917: NEG
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: PUSH
43926: LD_INT 4
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 1
43936: NEG
43937: PUSH
43938: LD_INT 6
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: LD_INT 6
43951: NEG
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: LD_INT 5
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43982: LD_ADDR_VAR 0 30
43986: PUSH
43987: LD_INT 2
43989: PUSH
43990: LD_INT 1
43992: NEG
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 3
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 3
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 3
44020: PUSH
44021: LD_INT 1
44023: NEG
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 4
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 4
44041: PUSH
44042: LD_INT 1
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 4
44051: PUSH
44052: LD_INT 1
44054: NEG
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 5
44062: PUSH
44063: LD_INT 0
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 5
44072: PUSH
44073: LD_INT 1
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 5
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 6
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 6
44103: PUSH
44104: LD_INT 1
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
44125: LD_ADDR_VAR 0 31
44129: PUSH
44130: LD_INT 3
44132: PUSH
44133: LD_INT 2
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 3
44142: PUSH
44143: LD_INT 3
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 2
44152: PUSH
44153: LD_INT 3
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 4
44162: PUSH
44163: LD_INT 3
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 4
44172: PUSH
44173: LD_INT 4
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 3
44182: PUSH
44183: LD_INT 4
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 5
44192: PUSH
44193: LD_INT 4
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 5
44202: PUSH
44203: LD_INT 5
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 4
44212: PUSH
44213: LD_INT 5
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 6
44222: PUSH
44223: LD_INT 5
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 6
44232: PUSH
44233: LD_INT 6
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 5
44242: PUSH
44243: LD_INT 6
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
44264: LD_ADDR_VAR 0 32
44268: PUSH
44269: LD_INT 1
44271: PUSH
44272: LD_INT 3
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: LD_INT 3
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: LD_INT 2
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 1
44302: PUSH
44303: LD_INT 4
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 0
44312: PUSH
44313: LD_INT 4
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: NEG
44323: PUSH
44324: LD_INT 3
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 1
44333: PUSH
44334: LD_INT 5
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 0
44343: PUSH
44344: LD_INT 5
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 1
44353: NEG
44354: PUSH
44355: LD_INT 4
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 1
44364: PUSH
44365: LD_INT 6
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 0
44374: PUSH
44375: LD_INT 6
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 1
44384: NEG
44385: PUSH
44386: LD_INT 5
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
44407: LD_ADDR_VAR 0 33
44411: PUSH
44412: LD_INT 2
44414: NEG
44415: PUSH
44416: LD_INT 1
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 3
44425: NEG
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 3
44436: NEG
44437: PUSH
44438: LD_INT 1
44440: NEG
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 3
44448: NEG
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 4
44459: NEG
44460: PUSH
44461: LD_INT 0
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 4
44470: NEG
44471: PUSH
44472: LD_INT 1
44474: NEG
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 4
44482: NEG
44483: PUSH
44484: LD_INT 1
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 5
44493: NEG
44494: PUSH
44495: LD_INT 0
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 5
44504: NEG
44505: PUSH
44506: LD_INT 1
44508: NEG
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 5
44516: NEG
44517: PUSH
44518: LD_INT 1
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 6
44527: NEG
44528: PUSH
44529: LD_INT 0
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 6
44538: NEG
44539: PUSH
44540: LD_INT 1
44542: NEG
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44562: LD_ADDR_VAR 0 34
44566: PUSH
44567: LD_INT 2
44569: NEG
44570: PUSH
44571: LD_INT 3
44573: NEG
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 3
44581: NEG
44582: PUSH
44583: LD_INT 2
44585: NEG
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 3
44593: NEG
44594: PUSH
44595: LD_INT 3
44597: NEG
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 3
44605: NEG
44606: PUSH
44607: LD_INT 4
44609: NEG
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 4
44617: NEG
44618: PUSH
44619: LD_INT 3
44621: NEG
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 4
44629: NEG
44630: PUSH
44631: LD_INT 4
44633: NEG
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 4
44641: NEG
44642: PUSH
44643: LD_INT 5
44645: NEG
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 5
44653: NEG
44654: PUSH
44655: LD_INT 4
44657: NEG
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 5
44665: NEG
44666: PUSH
44667: LD_INT 5
44669: NEG
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 5
44677: NEG
44678: PUSH
44679: LD_INT 6
44681: NEG
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 6
44689: NEG
44690: PUSH
44691: LD_INT 5
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 6
44701: NEG
44702: PUSH
44703: LD_INT 6
44705: NEG
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44725: LD_ADDR_VAR 0 41
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: LD_INT 2
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 1
44743: NEG
44744: PUSH
44745: LD_INT 3
44747: NEG
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: PUSH
44756: LD_INT 2
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: LIST
44768: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44769: LD_ADDR_VAR 0 42
44773: PUSH
44774: LD_INT 2
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 2
44786: PUSH
44787: LD_INT 1
44789: NEG
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 3
44797: PUSH
44798: LD_INT 1
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: LIST
44809: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44810: LD_ADDR_VAR 0 43
44814: PUSH
44815: LD_INT 2
44817: PUSH
44818: LD_INT 2
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 3
44827: PUSH
44828: LD_INT 2
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 2
44837: PUSH
44838: LD_INT 3
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: LIST
44849: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44850: LD_ADDR_VAR 0 44
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: LD_INT 2
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: LD_INT 3
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 1
44877: NEG
44878: PUSH
44879: LD_INT 2
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: LIST
44890: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44891: LD_ADDR_VAR 0 45
44895: PUSH
44896: LD_INT 2
44898: NEG
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 2
44909: NEG
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 3
44920: NEG
44921: PUSH
44922: LD_INT 1
44924: NEG
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: LIST
44934: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44935: LD_ADDR_VAR 0 46
44939: PUSH
44940: LD_INT 2
44942: NEG
44943: PUSH
44944: LD_INT 2
44946: NEG
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 2
44954: NEG
44955: PUSH
44956: LD_INT 3
44958: NEG
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 3
44966: NEG
44967: PUSH
44968: LD_INT 2
44970: NEG
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: LIST
44980: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44981: LD_ADDR_VAR 0 47
44985: PUSH
44986: LD_INT 2
44988: NEG
44989: PUSH
44990: LD_INT 3
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: LD_INT 3
45004: NEG
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45014: LD_ADDR_VAR 0 48
45018: PUSH
45019: LD_INT 1
45021: PUSH
45022: LD_INT 2
45024: NEG
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 2
45032: PUSH
45033: LD_INT 1
45035: NEG
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
45045: LD_ADDR_VAR 0 49
45049: PUSH
45050: LD_INT 3
45052: PUSH
45053: LD_INT 1
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 3
45062: PUSH
45063: LD_INT 2
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
45074: LD_ADDR_VAR 0 50
45078: PUSH
45079: LD_INT 2
45081: PUSH
45082: LD_INT 3
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: PUSH
45092: LD_INT 3
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45103: LD_ADDR_VAR 0 51
45107: PUSH
45108: LD_INT 1
45110: NEG
45111: PUSH
45112: LD_INT 2
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 2
45121: NEG
45122: PUSH
45123: LD_INT 1
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45134: LD_ADDR_VAR 0 52
45138: PUSH
45139: LD_INT 3
45141: NEG
45142: PUSH
45143: LD_INT 1
45145: NEG
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 3
45153: NEG
45154: PUSH
45155: LD_INT 2
45157: NEG
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45167: LD_ADDR_VAR 0 53
45171: PUSH
45172: LD_INT 1
45174: NEG
45175: PUSH
45176: LD_INT 3
45178: NEG
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: LD_INT 3
45189: NEG
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: LD_INT 2
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: LIST
45210: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45211: LD_ADDR_VAR 0 54
45215: PUSH
45216: LD_INT 2
45218: PUSH
45219: LD_INT 1
45221: NEG
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 3
45229: PUSH
45230: LD_INT 0
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 3
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: LIST
45251: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45252: LD_ADDR_VAR 0 55
45256: PUSH
45257: LD_INT 3
45259: PUSH
45260: LD_INT 2
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 3
45269: PUSH
45270: LD_INT 3
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 2
45279: PUSH
45280: LD_INT 3
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: LIST
45291: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45292: LD_ADDR_VAR 0 56
45296: PUSH
45297: LD_INT 1
45299: PUSH
45300: LD_INT 3
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 0
45309: PUSH
45310: LD_INT 3
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: LD_INT 2
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: LIST
45332: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45333: LD_ADDR_VAR 0 57
45337: PUSH
45338: LD_INT 2
45340: NEG
45341: PUSH
45342: LD_INT 1
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 3
45351: NEG
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 3
45362: NEG
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: LIST
45376: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45377: LD_ADDR_VAR 0 58
45381: PUSH
45382: LD_INT 2
45384: NEG
45385: PUSH
45386: LD_INT 3
45388: NEG
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 3
45396: NEG
45397: PUSH
45398: LD_INT 2
45400: NEG
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 3
45408: NEG
45409: PUSH
45410: LD_INT 3
45412: NEG
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: LIST
45422: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45423: LD_ADDR_VAR 0 59
45427: PUSH
45428: LD_INT 1
45430: NEG
45431: PUSH
45432: LD_INT 2
45434: NEG
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: LD_INT 2
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: PUSH
45454: LD_INT 1
45456: NEG
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: LIST
45466: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45467: LD_ADDR_VAR 0 60
45471: PUSH
45472: LD_INT 1
45474: PUSH
45475: LD_INT 1
45477: NEG
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 2
45485: PUSH
45486: LD_INT 0
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 2
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: LIST
45507: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45508: LD_ADDR_VAR 0 61
45512: PUSH
45513: LD_INT 2
45515: PUSH
45516: LD_INT 1
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 2
45525: PUSH
45526: LD_INT 2
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 1
45535: PUSH
45536: LD_INT 2
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: LIST
45547: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45548: LD_ADDR_VAR 0 62
45552: PUSH
45553: LD_INT 1
45555: PUSH
45556: LD_INT 2
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: LD_INT 2
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: LIST
45588: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45589: LD_ADDR_VAR 0 63
45593: PUSH
45594: LD_INT 1
45596: NEG
45597: PUSH
45598: LD_INT 1
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 2
45607: NEG
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 2
45618: NEG
45619: PUSH
45620: LD_INT 1
45622: NEG
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: LIST
45632: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45633: LD_ADDR_VAR 0 64
45637: PUSH
45638: LD_INT 1
45640: NEG
45641: PUSH
45642: LD_INT 2
45644: NEG
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 2
45652: NEG
45653: PUSH
45654: LD_INT 1
45656: NEG
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 2
45664: NEG
45665: PUSH
45666: LD_INT 2
45668: NEG
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: LIST
45678: ST_TO_ADDR
// end ; 2 :
45679: GO 48945
45681: LD_INT 2
45683: DOUBLE
45684: EQUAL
45685: IFTRUE 45689
45687: GO 48944
45689: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45690: LD_ADDR_VAR 0 29
45694: PUSH
45695: LD_INT 4
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 4
45707: PUSH
45708: LD_INT 1
45710: NEG
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 5
45718: PUSH
45719: LD_INT 0
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 5
45728: PUSH
45729: LD_INT 1
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 4
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 3
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 3
45758: PUSH
45759: LD_INT 1
45761: NEG
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 3
45769: PUSH
45770: LD_INT 2
45772: NEG
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 5
45780: PUSH
45781: LD_INT 2
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 3
45790: PUSH
45791: LD_INT 3
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 3
45800: PUSH
45801: LD_INT 2
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 4
45810: PUSH
45811: LD_INT 3
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 4
45820: PUSH
45821: LD_INT 4
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 3
45830: PUSH
45831: LD_INT 4
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 2
45840: PUSH
45841: LD_INT 3
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 2
45850: PUSH
45851: LD_INT 2
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 4
45860: PUSH
45861: LD_INT 2
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 2
45870: PUSH
45871: LD_INT 4
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 0
45880: PUSH
45881: LD_INT 4
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 0
45890: PUSH
45891: LD_INT 3
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 1
45900: PUSH
45901: LD_INT 4
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: LD_INT 5
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: LD_INT 5
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 1
45930: NEG
45931: PUSH
45932: LD_INT 4
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: LD_INT 3
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 2
45952: PUSH
45953: LD_INT 5
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 2
45962: NEG
45963: PUSH
45964: LD_INT 3
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 3
45973: NEG
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 3
45984: NEG
45985: PUSH
45986: LD_INT 1
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 2
45996: NEG
45997: PUSH
45998: LD_INT 0
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 2
46007: NEG
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 3
46018: NEG
46019: PUSH
46020: LD_INT 1
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 4
46029: NEG
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 4
46040: NEG
46041: PUSH
46042: LD_INT 1
46044: NEG
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 4
46052: NEG
46053: PUSH
46054: LD_INT 2
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 2
46064: NEG
46065: PUSH
46066: LD_INT 2
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 4
46075: NEG
46076: PUSH
46077: LD_INT 4
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 4
46087: NEG
46088: PUSH
46089: LD_INT 5
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 3
46099: NEG
46100: PUSH
46101: LD_INT 4
46103: NEG
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 3
46111: NEG
46112: PUSH
46113: LD_INT 3
46115: NEG
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 4
46123: NEG
46124: PUSH
46125: LD_INT 3
46127: NEG
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 5
46135: NEG
46136: PUSH
46137: LD_INT 4
46139: NEG
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 5
46147: NEG
46148: PUSH
46149: LD_INT 5
46151: NEG
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 3
46159: NEG
46160: PUSH
46161: LD_INT 5
46163: NEG
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 5
46171: NEG
46172: PUSH
46173: LD_INT 3
46175: NEG
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
46228: LD_ADDR_VAR 0 30
46232: PUSH
46233: LD_INT 4
46235: PUSH
46236: LD_INT 4
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 4
46245: PUSH
46246: LD_INT 3
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 5
46255: PUSH
46256: LD_INT 4
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 5
46265: PUSH
46266: LD_INT 5
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 4
46275: PUSH
46276: LD_INT 5
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 3
46285: PUSH
46286: LD_INT 4
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 3
46295: PUSH
46296: LD_INT 3
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 5
46305: PUSH
46306: LD_INT 3
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 3
46315: PUSH
46316: LD_INT 5
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 0
46325: PUSH
46326: LD_INT 3
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 0
46335: PUSH
46336: LD_INT 2
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: LD_INT 3
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 1
46355: PUSH
46356: LD_INT 4
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: LD_INT 4
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: LD_INT 3
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: NEG
46387: PUSH
46388: LD_INT 2
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 2
46397: PUSH
46398: LD_INT 4
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 2
46407: NEG
46408: PUSH
46409: LD_INT 2
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 4
46418: NEG
46419: PUSH
46420: LD_INT 0
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 4
46429: NEG
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 3
46441: NEG
46442: PUSH
46443: LD_INT 0
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 3
46452: NEG
46453: PUSH
46454: LD_INT 1
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 4
46463: NEG
46464: PUSH
46465: LD_INT 1
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 5
46474: NEG
46475: PUSH
46476: LD_INT 0
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 5
46485: NEG
46486: PUSH
46487: LD_INT 1
46489: NEG
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 5
46497: NEG
46498: PUSH
46499: LD_INT 2
46501: NEG
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 3
46509: NEG
46510: PUSH
46511: LD_INT 2
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 3
46520: NEG
46521: PUSH
46522: LD_INT 3
46524: NEG
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 3
46532: NEG
46533: PUSH
46534: LD_INT 4
46536: NEG
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 2
46544: NEG
46545: PUSH
46546: LD_INT 3
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 2
46556: NEG
46557: PUSH
46558: LD_INT 2
46560: NEG
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 3
46568: NEG
46569: PUSH
46570: LD_INT 2
46572: NEG
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 4
46580: NEG
46581: PUSH
46582: LD_INT 3
46584: NEG
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 4
46592: NEG
46593: PUSH
46594: LD_INT 4
46596: NEG
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 2
46604: NEG
46605: PUSH
46606: LD_INT 4
46608: NEG
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 4
46616: NEG
46617: PUSH
46618: LD_INT 2
46620: NEG
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: LD_INT 4
46631: NEG
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: LD_INT 5
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: PUSH
46651: LD_INT 4
46653: NEG
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: LD_INT 3
46664: NEG
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 0
46672: PUSH
46673: LD_INT 3
46675: NEG
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 1
46683: NEG
46684: PUSH
46685: LD_INT 4
46687: NEG
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: LD_INT 5
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 2
46707: PUSH
46708: LD_INT 3
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 2
46718: NEG
46719: PUSH
46720: LD_INT 5
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46775: LD_ADDR_VAR 0 31
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: LD_INT 4
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: LD_INT 3
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: PUSH
46803: LD_INT 4
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: LD_INT 5
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 0
46822: PUSH
46823: LD_INT 5
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 1
46832: NEG
46833: PUSH
46834: LD_INT 4
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: LD_INT 3
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 2
46854: PUSH
46855: LD_INT 5
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 2
46864: NEG
46865: PUSH
46866: LD_INT 3
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 3
46875: NEG
46876: PUSH
46877: LD_INT 0
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 3
46886: NEG
46887: PUSH
46888: LD_INT 1
46890: NEG
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 2
46898: NEG
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 2
46909: NEG
46910: PUSH
46911: LD_INT 1
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 3
46920: NEG
46921: PUSH
46922: LD_INT 1
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 4
46931: NEG
46932: PUSH
46933: LD_INT 0
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 4
46942: NEG
46943: PUSH
46944: LD_INT 1
46946: NEG
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 4
46954: NEG
46955: PUSH
46956: LD_INT 2
46958: NEG
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 2
46966: NEG
46967: PUSH
46968: LD_INT 2
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 4
46977: NEG
46978: PUSH
46979: LD_INT 4
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 4
46989: NEG
46990: PUSH
46991: LD_INT 5
46993: NEG
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 3
47001: NEG
47002: PUSH
47003: LD_INT 4
47005: NEG
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 3
47013: NEG
47014: PUSH
47015: LD_INT 3
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 4
47025: NEG
47026: PUSH
47027: LD_INT 3
47029: NEG
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 5
47037: NEG
47038: PUSH
47039: LD_INT 4
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 5
47049: NEG
47050: PUSH
47051: LD_INT 5
47053: NEG
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 3
47061: NEG
47062: PUSH
47063: LD_INT 5
47065: NEG
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 5
47073: NEG
47074: PUSH
47075: LD_INT 3
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 0
47085: PUSH
47086: LD_INT 3
47088: NEG
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 0
47096: PUSH
47097: LD_INT 4
47099: NEG
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 1
47107: PUSH
47108: LD_INT 3
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 1
47118: PUSH
47119: LD_INT 2
47121: NEG
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: LD_INT 2
47132: NEG
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 1
47140: NEG
47141: PUSH
47142: LD_INT 3
47144: NEG
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 1
47152: NEG
47153: PUSH
47154: LD_INT 4
47156: NEG
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 2
47164: PUSH
47165: LD_INT 2
47167: NEG
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 2
47175: NEG
47176: PUSH
47177: LD_INT 4
47179: NEG
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 4
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 4
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 5
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 5
47218: PUSH
47219: LD_INT 1
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 4
47228: PUSH
47229: LD_INT 1
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 3
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 3
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 3
47259: PUSH
47260: LD_INT 2
47262: NEG
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 5
47270: PUSH
47271: LD_INT 2
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
47325: LD_ADDR_VAR 0 32
47329: PUSH
47330: LD_INT 4
47332: NEG
47333: PUSH
47334: LD_INT 0
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 4
47343: NEG
47344: PUSH
47345: LD_INT 1
47347: NEG
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 3
47355: NEG
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 3
47366: NEG
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 4
47377: NEG
47378: PUSH
47379: LD_INT 1
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 5
47388: NEG
47389: PUSH
47390: LD_INT 0
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 5
47399: NEG
47400: PUSH
47401: LD_INT 1
47403: NEG
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 5
47411: NEG
47412: PUSH
47413: LD_INT 2
47415: NEG
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 3
47423: NEG
47424: PUSH
47425: LD_INT 2
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 3
47434: NEG
47435: PUSH
47436: LD_INT 3
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 3
47446: NEG
47447: PUSH
47448: LD_INT 4
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 2
47458: NEG
47459: PUSH
47460: LD_INT 3
47462: NEG
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 2
47470: NEG
47471: PUSH
47472: LD_INT 2
47474: NEG
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 3
47482: NEG
47483: PUSH
47484: LD_INT 2
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 4
47494: NEG
47495: PUSH
47496: LD_INT 3
47498: NEG
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 4
47506: NEG
47507: PUSH
47508: LD_INT 4
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 2
47518: NEG
47519: PUSH
47520: LD_INT 4
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 4
47530: NEG
47531: PUSH
47532: LD_INT 2
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 0
47542: PUSH
47543: LD_INT 4
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: LD_INT 5
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: LD_INT 4
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 1
47575: PUSH
47576: LD_INT 3
47578: NEG
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: LD_INT 3
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 1
47597: NEG
47598: PUSH
47599: LD_INT 4
47601: NEG
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 1
47609: NEG
47610: PUSH
47611: LD_INT 5
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 2
47621: PUSH
47622: LD_INT 3
47624: NEG
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 2
47632: NEG
47633: PUSH
47634: LD_INT 5
47636: NEG
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 3
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 3
47654: PUSH
47655: LD_INT 1
47657: NEG
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 4
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 4
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 3
47685: PUSH
47686: LD_INT 1
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 2
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 2
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 2
47716: PUSH
47717: LD_INT 2
47719: NEG
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 4
47727: PUSH
47728: LD_INT 2
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 4
47737: PUSH
47738: LD_INT 4
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 4
47747: PUSH
47748: LD_INT 3
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 5
47757: PUSH
47758: LD_INT 4
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 5
47767: PUSH
47768: LD_INT 5
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 4
47777: PUSH
47778: LD_INT 5
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 3
47787: PUSH
47788: LD_INT 4
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 3
47797: PUSH
47798: LD_INT 3
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 5
47807: PUSH
47808: LD_INT 3
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 3
47817: PUSH
47818: LD_INT 5
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47872: LD_ADDR_VAR 0 33
47876: PUSH
47877: LD_INT 4
47879: NEG
47880: PUSH
47881: LD_INT 4
47883: NEG
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 4
47891: NEG
47892: PUSH
47893: LD_INT 5
47895: NEG
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 3
47903: NEG
47904: PUSH
47905: LD_INT 4
47907: NEG
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 3
47915: NEG
47916: PUSH
47917: LD_INT 3
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 4
47927: NEG
47928: PUSH
47929: LD_INT 3
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 5
47939: NEG
47940: PUSH
47941: LD_INT 4
47943: NEG
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 5
47951: NEG
47952: PUSH
47953: LD_INT 5
47955: NEG
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 3
47963: NEG
47964: PUSH
47965: LD_INT 5
47967: NEG
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 5
47975: NEG
47976: PUSH
47977: LD_INT 3
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: LD_INT 3
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 0
47998: PUSH
47999: LD_INT 4
48001: NEG
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 1
48009: PUSH
48010: LD_INT 3
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 1
48020: PUSH
48021: LD_INT 2
48023: NEG
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: LD_INT 2
48034: NEG
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 1
48042: NEG
48043: PUSH
48044: LD_INT 3
48046: NEG
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 1
48054: NEG
48055: PUSH
48056: LD_INT 4
48058: NEG
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 2
48066: PUSH
48067: LD_INT 2
48069: NEG
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 2
48077: NEG
48078: PUSH
48079: LD_INT 4
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 4
48089: PUSH
48090: LD_INT 0
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 4
48099: PUSH
48100: LD_INT 1
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 5
48110: PUSH
48111: LD_INT 0
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 5
48120: PUSH
48121: LD_INT 1
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 4
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 3
48140: PUSH
48141: LD_INT 0
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 3
48150: PUSH
48151: LD_INT 1
48153: NEG
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 3
48161: PUSH
48162: LD_INT 2
48164: NEG
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 5
48172: PUSH
48173: LD_INT 2
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 3
48182: PUSH
48183: LD_INT 3
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 3
48192: PUSH
48193: LD_INT 2
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 4
48202: PUSH
48203: LD_INT 3
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 4
48212: PUSH
48213: LD_INT 4
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 3
48222: PUSH
48223: LD_INT 4
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 2
48232: PUSH
48233: LD_INT 3
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 2
48242: PUSH
48243: LD_INT 2
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 4
48252: PUSH
48253: LD_INT 2
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 2
48262: PUSH
48263: LD_INT 4
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: LD_INT 4
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: LD_INT 3
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 1
48292: PUSH
48293: LD_INT 4
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 1
48302: PUSH
48303: LD_INT 5
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 0
48312: PUSH
48313: LD_INT 5
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 1
48322: NEG
48323: PUSH
48324: LD_INT 4
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 1
48333: NEG
48334: PUSH
48335: LD_INT 3
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 2
48344: PUSH
48345: LD_INT 5
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 2
48354: NEG
48355: PUSH
48356: LD_INT 3
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48410: LD_ADDR_VAR 0 34
48414: PUSH
48415: LD_INT 0
48417: PUSH
48418: LD_INT 4
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 0
48428: PUSH
48429: LD_INT 5
48431: NEG
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 1
48439: PUSH
48440: LD_INT 4
48442: NEG
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 1
48450: PUSH
48451: LD_INT 3
48453: NEG
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: LD_INT 3
48464: NEG
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: LD_INT 4
48476: NEG
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 1
48484: NEG
48485: PUSH
48486: LD_INT 5
48488: NEG
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 2
48496: PUSH
48497: LD_INT 3
48499: NEG
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 2
48507: NEG
48508: PUSH
48509: LD_INT 5
48511: NEG
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 3
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 3
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 4
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 4
48550: PUSH
48551: LD_INT 1
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 3
48560: PUSH
48561: LD_INT 1
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 2
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 2
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 2
48591: PUSH
48592: LD_INT 2
48594: NEG
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 4
48602: PUSH
48603: LD_INT 2
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 4
48612: PUSH
48613: LD_INT 4
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 4
48622: PUSH
48623: LD_INT 3
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 5
48632: PUSH
48633: LD_INT 4
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 5
48642: PUSH
48643: LD_INT 5
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 4
48652: PUSH
48653: LD_INT 5
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 3
48662: PUSH
48663: LD_INT 4
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 3
48672: PUSH
48673: LD_INT 3
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 5
48682: PUSH
48683: LD_INT 3
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 3
48692: PUSH
48693: LD_INT 5
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: LD_INT 3
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: LD_INT 2
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 1
48722: PUSH
48723: LD_INT 3
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 1
48732: PUSH
48733: LD_INT 4
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: LD_INT 4
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 1
48752: NEG
48753: PUSH
48754: LD_INT 3
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 1
48763: NEG
48764: PUSH
48765: LD_INT 2
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 2
48774: PUSH
48775: LD_INT 4
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 2
48784: NEG
48785: PUSH
48786: LD_INT 2
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 4
48795: NEG
48796: PUSH
48797: LD_INT 0
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 4
48806: NEG
48807: PUSH
48808: LD_INT 1
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 3
48818: NEG
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 3
48829: NEG
48830: PUSH
48831: LD_INT 1
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 4
48840: NEG
48841: PUSH
48842: LD_INT 1
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 5
48851: NEG
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 5
48862: NEG
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 5
48874: NEG
48875: PUSH
48876: LD_INT 2
48878: NEG
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 3
48886: NEG
48887: PUSH
48888: LD_INT 2
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: ST_TO_ADDR
// end ; end ;
48942: GO 48945
48944: POP
// case btype of b_depot , b_warehouse :
48945: LD_VAR 0 1
48949: PUSH
48950: LD_INT 0
48952: DOUBLE
48953: EQUAL
48954: IFTRUE 48964
48956: LD_INT 1
48958: DOUBLE
48959: EQUAL
48960: IFTRUE 48964
48962: GO 49165
48964: POP
// case nation of nation_american :
48965: LD_VAR 0 5
48969: PUSH
48970: LD_INT 1
48972: DOUBLE
48973: EQUAL
48974: IFTRUE 48978
48976: GO 49034
48978: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48979: LD_ADDR_VAR 0 9
48983: PUSH
48984: LD_VAR 0 11
48988: PUSH
48989: LD_VAR 0 12
48993: PUSH
48994: LD_VAR 0 13
48998: PUSH
48999: LD_VAR 0 14
49003: PUSH
49004: LD_VAR 0 15
49008: PUSH
49009: LD_VAR 0 16
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: PUSH
49022: LD_VAR 0 4
49026: PUSH
49027: LD_INT 1
49029: PLUS
49030: ARRAY
49031: ST_TO_ADDR
49032: GO 49163
49034: LD_INT 2
49036: DOUBLE
49037: EQUAL
49038: IFTRUE 49042
49040: GO 49098
49042: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
49043: LD_ADDR_VAR 0 9
49047: PUSH
49048: LD_VAR 0 17
49052: PUSH
49053: LD_VAR 0 18
49057: PUSH
49058: LD_VAR 0 19
49062: PUSH
49063: LD_VAR 0 20
49067: PUSH
49068: LD_VAR 0 21
49072: PUSH
49073: LD_VAR 0 22
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: PUSH
49086: LD_VAR 0 4
49090: PUSH
49091: LD_INT 1
49093: PLUS
49094: ARRAY
49095: ST_TO_ADDR
49096: GO 49163
49098: LD_INT 3
49100: DOUBLE
49101: EQUAL
49102: IFTRUE 49106
49104: GO 49162
49106: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
49107: LD_ADDR_VAR 0 9
49111: PUSH
49112: LD_VAR 0 23
49116: PUSH
49117: LD_VAR 0 24
49121: PUSH
49122: LD_VAR 0 25
49126: PUSH
49127: LD_VAR 0 26
49131: PUSH
49132: LD_VAR 0 27
49136: PUSH
49137: LD_VAR 0 28
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: PUSH
49150: LD_VAR 0 4
49154: PUSH
49155: LD_INT 1
49157: PLUS
49158: ARRAY
49159: ST_TO_ADDR
49160: GO 49163
49162: POP
49163: GO 49718
49165: LD_INT 2
49167: DOUBLE
49168: EQUAL
49169: IFTRUE 49179
49171: LD_INT 3
49173: DOUBLE
49174: EQUAL
49175: IFTRUE 49179
49177: GO 49235
49179: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
49180: LD_ADDR_VAR 0 9
49184: PUSH
49185: LD_VAR 0 29
49189: PUSH
49190: LD_VAR 0 30
49194: PUSH
49195: LD_VAR 0 31
49199: PUSH
49200: LD_VAR 0 32
49204: PUSH
49205: LD_VAR 0 33
49209: PUSH
49210: LD_VAR 0 34
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: PUSH
49223: LD_VAR 0 4
49227: PUSH
49228: LD_INT 1
49230: PLUS
49231: ARRAY
49232: ST_TO_ADDR
49233: GO 49718
49235: LD_INT 16
49237: DOUBLE
49238: EQUAL
49239: IFTRUE 49297
49241: LD_INT 17
49243: DOUBLE
49244: EQUAL
49245: IFTRUE 49297
49247: LD_INT 18
49249: DOUBLE
49250: EQUAL
49251: IFTRUE 49297
49253: LD_INT 19
49255: DOUBLE
49256: EQUAL
49257: IFTRUE 49297
49259: LD_INT 22
49261: DOUBLE
49262: EQUAL
49263: IFTRUE 49297
49265: LD_INT 20
49267: DOUBLE
49268: EQUAL
49269: IFTRUE 49297
49271: LD_INT 21
49273: DOUBLE
49274: EQUAL
49275: IFTRUE 49297
49277: LD_INT 23
49279: DOUBLE
49280: EQUAL
49281: IFTRUE 49297
49283: LD_INT 24
49285: DOUBLE
49286: EQUAL
49287: IFTRUE 49297
49289: LD_INT 25
49291: DOUBLE
49292: EQUAL
49293: IFTRUE 49297
49295: GO 49353
49297: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
49298: LD_ADDR_VAR 0 9
49302: PUSH
49303: LD_VAR 0 35
49307: PUSH
49308: LD_VAR 0 36
49312: PUSH
49313: LD_VAR 0 37
49317: PUSH
49318: LD_VAR 0 38
49322: PUSH
49323: LD_VAR 0 39
49327: PUSH
49328: LD_VAR 0 40
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: PUSH
49341: LD_VAR 0 4
49345: PUSH
49346: LD_INT 1
49348: PLUS
49349: ARRAY
49350: ST_TO_ADDR
49351: GO 49718
49353: LD_INT 6
49355: DOUBLE
49356: EQUAL
49357: IFTRUE 49409
49359: LD_INT 7
49361: DOUBLE
49362: EQUAL
49363: IFTRUE 49409
49365: LD_INT 8
49367: DOUBLE
49368: EQUAL
49369: IFTRUE 49409
49371: LD_INT 13
49373: DOUBLE
49374: EQUAL
49375: IFTRUE 49409
49377: LD_INT 12
49379: DOUBLE
49380: EQUAL
49381: IFTRUE 49409
49383: LD_INT 15
49385: DOUBLE
49386: EQUAL
49387: IFTRUE 49409
49389: LD_INT 11
49391: DOUBLE
49392: EQUAL
49393: IFTRUE 49409
49395: LD_INT 14
49397: DOUBLE
49398: EQUAL
49399: IFTRUE 49409
49401: LD_INT 10
49403: DOUBLE
49404: EQUAL
49405: IFTRUE 49409
49407: GO 49465
49409: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
49410: LD_ADDR_VAR 0 9
49414: PUSH
49415: LD_VAR 0 41
49419: PUSH
49420: LD_VAR 0 42
49424: PUSH
49425: LD_VAR 0 43
49429: PUSH
49430: LD_VAR 0 44
49434: PUSH
49435: LD_VAR 0 45
49439: PUSH
49440: LD_VAR 0 46
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: PUSH
49453: LD_VAR 0 4
49457: PUSH
49458: LD_INT 1
49460: PLUS
49461: ARRAY
49462: ST_TO_ADDR
49463: GO 49718
49465: LD_INT 36
49467: DOUBLE
49468: EQUAL
49469: IFTRUE 49473
49471: GO 49529
49473: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49474: LD_ADDR_VAR 0 9
49478: PUSH
49479: LD_VAR 0 47
49483: PUSH
49484: LD_VAR 0 48
49488: PUSH
49489: LD_VAR 0 49
49493: PUSH
49494: LD_VAR 0 50
49498: PUSH
49499: LD_VAR 0 51
49503: PUSH
49504: LD_VAR 0 52
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: PUSH
49517: LD_VAR 0 4
49521: PUSH
49522: LD_INT 1
49524: PLUS
49525: ARRAY
49526: ST_TO_ADDR
49527: GO 49718
49529: LD_INT 4
49531: DOUBLE
49532: EQUAL
49533: IFTRUE 49555
49535: LD_INT 5
49537: DOUBLE
49538: EQUAL
49539: IFTRUE 49555
49541: LD_INT 34
49543: DOUBLE
49544: EQUAL
49545: IFTRUE 49555
49547: LD_INT 37
49549: DOUBLE
49550: EQUAL
49551: IFTRUE 49555
49553: GO 49611
49555: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49556: LD_ADDR_VAR 0 9
49560: PUSH
49561: LD_VAR 0 53
49565: PUSH
49566: LD_VAR 0 54
49570: PUSH
49571: LD_VAR 0 55
49575: PUSH
49576: LD_VAR 0 56
49580: PUSH
49581: LD_VAR 0 57
49585: PUSH
49586: LD_VAR 0 58
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: PUSH
49599: LD_VAR 0 4
49603: PUSH
49604: LD_INT 1
49606: PLUS
49607: ARRAY
49608: ST_TO_ADDR
49609: GO 49718
49611: LD_INT 31
49613: DOUBLE
49614: EQUAL
49615: IFTRUE 49661
49617: LD_INT 32
49619: DOUBLE
49620: EQUAL
49621: IFTRUE 49661
49623: LD_INT 33
49625: DOUBLE
49626: EQUAL
49627: IFTRUE 49661
49629: LD_INT 27
49631: DOUBLE
49632: EQUAL
49633: IFTRUE 49661
49635: LD_INT 26
49637: DOUBLE
49638: EQUAL
49639: IFTRUE 49661
49641: LD_INT 28
49643: DOUBLE
49644: EQUAL
49645: IFTRUE 49661
49647: LD_INT 29
49649: DOUBLE
49650: EQUAL
49651: IFTRUE 49661
49653: LD_INT 30
49655: DOUBLE
49656: EQUAL
49657: IFTRUE 49661
49659: GO 49717
49661: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49662: LD_ADDR_VAR 0 9
49666: PUSH
49667: LD_VAR 0 59
49671: PUSH
49672: LD_VAR 0 60
49676: PUSH
49677: LD_VAR 0 61
49681: PUSH
49682: LD_VAR 0 62
49686: PUSH
49687: LD_VAR 0 63
49691: PUSH
49692: LD_VAR 0 64
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: PUSH
49705: LD_VAR 0 4
49709: PUSH
49710: LD_INT 1
49712: PLUS
49713: ARRAY
49714: ST_TO_ADDR
49715: GO 49718
49717: POP
// temp_list2 = [ ] ;
49718: LD_ADDR_VAR 0 10
49722: PUSH
49723: EMPTY
49724: ST_TO_ADDR
// for i in temp_list do
49725: LD_ADDR_VAR 0 8
49729: PUSH
49730: LD_VAR 0 9
49734: PUSH
49735: FOR_IN
49736: IFFALSE 49788
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49738: LD_ADDR_VAR 0 10
49742: PUSH
49743: LD_VAR 0 10
49747: PUSH
49748: LD_VAR 0 8
49752: PUSH
49753: LD_INT 1
49755: ARRAY
49756: PUSH
49757: LD_VAR 0 2
49761: PLUS
49762: PUSH
49763: LD_VAR 0 8
49767: PUSH
49768: LD_INT 2
49770: ARRAY
49771: PUSH
49772: LD_VAR 0 3
49776: PLUS
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: EMPTY
49783: LIST
49784: ADD
49785: ST_TO_ADDR
49786: GO 49735
49788: POP
49789: POP
// result = temp_list2 ;
49790: LD_ADDR_VAR 0 7
49794: PUSH
49795: LD_VAR 0 10
49799: ST_TO_ADDR
// end ;
49800: LD_VAR 0 7
49804: RET
// export function EnemyInRange ( unit , dist ) ; begin
49805: LD_INT 0
49807: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49808: LD_ADDR_VAR 0 3
49812: PUSH
49813: LD_VAR 0 1
49817: PPUSH
49818: CALL_OW 255
49822: PPUSH
49823: LD_VAR 0 1
49827: PPUSH
49828: CALL_OW 250
49832: PPUSH
49833: LD_VAR 0 1
49837: PPUSH
49838: CALL_OW 251
49842: PPUSH
49843: LD_VAR 0 2
49847: PPUSH
49848: CALL 23062 0 4
49852: PUSH
49853: LD_INT 4
49855: ARRAY
49856: ST_TO_ADDR
// end ;
49857: LD_VAR 0 3
49861: RET
// export function PlayerSeeMe ( unit ) ; begin
49862: LD_INT 0
49864: PPUSH
// result := See ( your_side , unit ) ;
49865: LD_ADDR_VAR 0 2
49869: PUSH
49870: LD_OWVAR 2
49874: PPUSH
49875: LD_VAR 0 1
49879: PPUSH
49880: CALL_OW 292
49884: ST_TO_ADDR
// end ;
49885: LD_VAR 0 2
49889: RET
// export function ReverseDir ( unit ) ; begin
49890: LD_INT 0
49892: PPUSH
// if not unit then
49893: LD_VAR 0 1
49897: NOT
49898: IFFALSE 49902
// exit ;
49900: GO 49925
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49902: LD_ADDR_VAR 0 2
49906: PUSH
49907: LD_VAR 0 1
49911: PPUSH
49912: CALL_OW 254
49916: PUSH
49917: LD_INT 3
49919: PLUS
49920: PUSH
49921: LD_INT 6
49923: MOD
49924: ST_TO_ADDR
// end ;
49925: LD_VAR 0 2
49929: RET
// export function ReverseArray ( array ) ; var i ; begin
49930: LD_INT 0
49932: PPUSH
49933: PPUSH
// if not array then
49934: LD_VAR 0 1
49938: NOT
49939: IFFALSE 49943
// exit ;
49941: GO 49998
// result := [ ] ;
49943: LD_ADDR_VAR 0 2
49947: PUSH
49948: EMPTY
49949: ST_TO_ADDR
// for i := array downto 1 do
49950: LD_ADDR_VAR 0 3
49954: PUSH
49955: DOUBLE
49956: LD_VAR 0 1
49960: INC
49961: ST_TO_ADDR
49962: LD_INT 1
49964: PUSH
49965: FOR_DOWNTO
49966: IFFALSE 49996
// result := Join ( result , array [ i ] ) ;
49968: LD_ADDR_VAR 0 2
49972: PUSH
49973: LD_VAR 0 2
49977: PPUSH
49978: LD_VAR 0 1
49982: PUSH
49983: LD_VAR 0 3
49987: ARRAY
49988: PPUSH
49989: CALL 54840 0 2
49993: ST_TO_ADDR
49994: GO 49965
49996: POP
49997: POP
// end ;
49998: LD_VAR 0 2
50002: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
50003: LD_INT 0
50005: PPUSH
50006: PPUSH
50007: PPUSH
50008: PPUSH
50009: PPUSH
50010: PPUSH
// if not unit or not hexes then
50011: LD_VAR 0 1
50015: NOT
50016: IFTRUE 50025
50018: PUSH
50019: LD_VAR 0 2
50023: NOT
50024: OR
50025: IFFALSE 50029
// exit ;
50027: GO 50152
// dist := 9999 ;
50029: LD_ADDR_VAR 0 5
50033: PUSH
50034: LD_INT 9999
50036: ST_TO_ADDR
// for i = 1 to hexes do
50037: LD_ADDR_VAR 0 4
50041: PUSH
50042: DOUBLE
50043: LD_INT 1
50045: DEC
50046: ST_TO_ADDR
50047: LD_VAR 0 2
50051: PUSH
50052: FOR_TO
50053: IFFALSE 50140
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50055: LD_ADDR_VAR 0 6
50059: PUSH
50060: LD_VAR 0 1
50064: PPUSH
50065: LD_VAR 0 2
50069: PUSH
50070: LD_VAR 0 4
50074: ARRAY
50075: PUSH
50076: LD_INT 1
50078: ARRAY
50079: PPUSH
50080: LD_VAR 0 2
50084: PUSH
50085: LD_VAR 0 4
50089: ARRAY
50090: PUSH
50091: LD_INT 2
50093: ARRAY
50094: PPUSH
50095: CALL_OW 297
50099: ST_TO_ADDR
// if tdist < dist then
50100: LD_VAR 0 6
50104: PUSH
50105: LD_VAR 0 5
50109: LESS
50110: IFFALSE 50138
// begin hex := hexes [ i ] ;
50112: LD_ADDR_VAR 0 8
50116: PUSH
50117: LD_VAR 0 2
50121: PUSH
50122: LD_VAR 0 4
50126: ARRAY
50127: ST_TO_ADDR
// dist := tdist ;
50128: LD_ADDR_VAR 0 5
50132: PUSH
50133: LD_VAR 0 6
50137: ST_TO_ADDR
// end ; end ;
50138: GO 50052
50140: POP
50141: POP
// result := hex ;
50142: LD_ADDR_VAR 0 3
50146: PUSH
50147: LD_VAR 0 8
50151: ST_TO_ADDR
// end ;
50152: LD_VAR 0 3
50156: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
50157: LD_INT 0
50159: PPUSH
50160: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50161: LD_VAR 0 1
50165: NOT
50166: IFTRUE 50205
50168: PUSH
50169: LD_VAR 0 1
50173: PUSH
50174: LD_INT 21
50176: PUSH
50177: LD_INT 2
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 23
50186: PUSH
50187: LD_INT 2
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PPUSH
50198: CALL_OW 69
50202: IN
50203: NOT
50204: OR
50205: IFFALSE 50209
// exit ;
50207: GO 50256
// for i = 1 to 3 do
50209: LD_ADDR_VAR 0 3
50213: PUSH
50214: DOUBLE
50215: LD_INT 1
50217: DEC
50218: ST_TO_ADDR
50219: LD_INT 3
50221: PUSH
50222: FOR_TO
50223: IFFALSE 50254
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
50225: LD_VAR 0 1
50229: PPUSH
50230: CALL_OW 250
50234: PPUSH
50235: LD_VAR 0 1
50239: PPUSH
50240: CALL_OW 251
50244: PPUSH
50245: LD_INT 1
50247: PPUSH
50248: CALL_OW 453
50252: GO 50222
50254: POP
50255: POP
// end ;
50256: LD_VAR 0 2
50260: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
50261: LD_INT 0
50263: PPUSH
50264: PPUSH
50265: PPUSH
50266: PPUSH
50267: PPUSH
50268: PPUSH
// if not unit or not enemy_unit then
50269: LD_VAR 0 1
50273: NOT
50274: IFTRUE 50283
50276: PUSH
50277: LD_VAR 0 2
50281: NOT
50282: OR
50283: IFFALSE 50287
// exit ;
50285: GO 50758
// if GetLives ( i ) < 250 then
50287: LD_VAR 0 4
50291: PPUSH
50292: CALL_OW 256
50296: PUSH
50297: LD_INT 250
50299: LESS
50300: IFFALSE 50313
// begin ComAutodestruct ( i ) ;
50302: LD_VAR 0 4
50306: PPUSH
50307: CALL 50157 0 1
// exit ;
50311: GO 50758
// end ; x := GetX ( enemy_unit ) ;
50313: LD_ADDR_VAR 0 7
50317: PUSH
50318: LD_VAR 0 2
50322: PPUSH
50323: CALL_OW 250
50327: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
50328: LD_ADDR_VAR 0 8
50332: PUSH
50333: LD_VAR 0 2
50337: PPUSH
50338: CALL_OW 251
50342: ST_TO_ADDR
// if not x or not y then
50343: LD_VAR 0 7
50347: NOT
50348: IFTRUE 50357
50350: PUSH
50351: LD_VAR 0 8
50355: NOT
50356: OR
50357: IFFALSE 50361
// exit ;
50359: GO 50758
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
50361: LD_ADDR_VAR 0 6
50365: PUSH
50366: LD_VAR 0 7
50370: PPUSH
50371: LD_INT 0
50373: PPUSH
50374: LD_INT 4
50376: PPUSH
50377: CALL_OW 272
50381: PUSH
50382: LD_VAR 0 8
50386: PPUSH
50387: LD_INT 0
50389: PPUSH
50390: LD_INT 4
50392: PPUSH
50393: CALL_OW 273
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_VAR 0 7
50406: PPUSH
50407: LD_INT 1
50409: PPUSH
50410: LD_INT 4
50412: PPUSH
50413: CALL_OW 272
50417: PUSH
50418: LD_VAR 0 8
50422: PPUSH
50423: LD_INT 1
50425: PPUSH
50426: LD_INT 4
50428: PPUSH
50429: CALL_OW 273
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_VAR 0 7
50442: PPUSH
50443: LD_INT 2
50445: PPUSH
50446: LD_INT 4
50448: PPUSH
50449: CALL_OW 272
50453: PUSH
50454: LD_VAR 0 8
50458: PPUSH
50459: LD_INT 2
50461: PPUSH
50462: LD_INT 4
50464: PPUSH
50465: CALL_OW 273
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_VAR 0 7
50478: PPUSH
50479: LD_INT 3
50481: PPUSH
50482: LD_INT 4
50484: PPUSH
50485: CALL_OW 272
50489: PUSH
50490: LD_VAR 0 8
50494: PPUSH
50495: LD_INT 3
50497: PPUSH
50498: LD_INT 4
50500: PPUSH
50501: CALL_OW 273
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_VAR 0 7
50514: PPUSH
50515: LD_INT 4
50517: PPUSH
50518: LD_INT 4
50520: PPUSH
50521: CALL_OW 272
50525: PUSH
50526: LD_VAR 0 8
50530: PPUSH
50531: LD_INT 4
50533: PPUSH
50534: LD_INT 4
50536: PPUSH
50537: CALL_OW 273
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_VAR 0 7
50550: PPUSH
50551: LD_INT 5
50553: PPUSH
50554: LD_INT 4
50556: PPUSH
50557: CALL_OW 272
50561: PUSH
50562: LD_VAR 0 8
50566: PPUSH
50567: LD_INT 5
50569: PPUSH
50570: LD_INT 4
50572: PPUSH
50573: CALL_OW 273
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: ST_TO_ADDR
// for i = tmp downto 1 do
50590: LD_ADDR_VAR 0 4
50594: PUSH
50595: DOUBLE
50596: LD_VAR 0 6
50600: INC
50601: ST_TO_ADDR
50602: LD_INT 1
50604: PUSH
50605: FOR_DOWNTO
50606: IFFALSE 50709
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50608: LD_VAR 0 6
50612: PUSH
50613: LD_VAR 0 4
50617: ARRAY
50618: PUSH
50619: LD_INT 1
50621: ARRAY
50622: PPUSH
50623: LD_VAR 0 6
50627: PUSH
50628: LD_VAR 0 4
50632: ARRAY
50633: PUSH
50634: LD_INT 2
50636: ARRAY
50637: PPUSH
50638: CALL_OW 488
50642: NOT
50643: IFTRUE 50685
50645: PUSH
50646: LD_VAR 0 6
50650: PUSH
50651: LD_VAR 0 4
50655: ARRAY
50656: PUSH
50657: LD_INT 1
50659: ARRAY
50660: PPUSH
50661: LD_VAR 0 6
50665: PUSH
50666: LD_VAR 0 4
50670: ARRAY
50671: PUSH
50672: LD_INT 2
50674: ARRAY
50675: PPUSH
50676: CALL_OW 428
50680: PUSH
50681: LD_INT 0
50683: NONEQUAL
50684: OR
50685: IFFALSE 50707
// tmp := Delete ( tmp , i ) ;
50687: LD_ADDR_VAR 0 6
50691: PUSH
50692: LD_VAR 0 6
50696: PPUSH
50697: LD_VAR 0 4
50701: PPUSH
50702: CALL_OW 3
50706: ST_TO_ADDR
50707: GO 50605
50709: POP
50710: POP
// j := GetClosestHex ( unit , tmp ) ;
50711: LD_ADDR_VAR 0 5
50715: PUSH
50716: LD_VAR 0 1
50720: PPUSH
50721: LD_VAR 0 6
50725: PPUSH
50726: CALL 50003 0 2
50730: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50731: LD_VAR 0 1
50735: PPUSH
50736: LD_VAR 0 5
50740: PUSH
50741: LD_INT 1
50743: ARRAY
50744: PPUSH
50745: LD_VAR 0 5
50749: PUSH
50750: LD_INT 2
50752: ARRAY
50753: PPUSH
50754: CALL_OW 111
// end ;
50758: LD_VAR 0 3
50762: RET
// export function PrepareApemanSoldier ( ) ; begin
50763: LD_INT 0
50765: PPUSH
// uc_nation := 0 ;
50766: LD_ADDR_OWVAR 21
50770: PUSH
50771: LD_INT 0
50773: ST_TO_ADDR
// hc_sex := sex_male ;
50774: LD_ADDR_OWVAR 27
50778: PUSH
50779: LD_INT 1
50781: ST_TO_ADDR
// hc_name :=  ;
50782: LD_ADDR_OWVAR 26
50786: PUSH
50787: LD_STRING 
50789: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50790: LD_ADDR_OWVAR 28
50794: PUSH
50795: LD_INT 15
50797: ST_TO_ADDR
// hc_gallery :=  ;
50798: LD_ADDR_OWVAR 33
50802: PUSH
50803: LD_STRING 
50805: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50806: LD_ADDR_OWVAR 31
50810: PUSH
50811: LD_INT 0
50813: PPUSH
50814: LD_INT 3
50816: PPUSH
50817: CALL_OW 12
50821: PUSH
50822: LD_INT 0
50824: PPUSH
50825: LD_INT 3
50827: PPUSH
50828: CALL_OW 12
50832: PUSH
50833: LD_INT 0
50835: PUSH
50836: LD_INT 0
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
50845: LD_ADDR_OWVAR 29
50849: PUSH
50850: LD_INT 12
50852: PUSH
50853: LD_INT 12
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: ST_TO_ADDR
// end ;
50860: LD_VAR 0 1
50864: RET
// export function PrepareApemanEngineer ( ) ; begin
50865: LD_INT 0
50867: PPUSH
// uc_nation := 0 ;
50868: LD_ADDR_OWVAR 21
50872: PUSH
50873: LD_INT 0
50875: ST_TO_ADDR
// hc_sex := sex_male ;
50876: LD_ADDR_OWVAR 27
50880: PUSH
50881: LD_INT 1
50883: ST_TO_ADDR
// hc_name :=  ;
50884: LD_ADDR_OWVAR 26
50888: PUSH
50889: LD_STRING 
50891: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50892: LD_ADDR_OWVAR 28
50896: PUSH
50897: LD_INT 16
50899: ST_TO_ADDR
// hc_gallery :=  ;
50900: LD_ADDR_OWVAR 33
50904: PUSH
50905: LD_STRING 
50907: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50908: LD_ADDR_OWVAR 31
50912: PUSH
50913: LD_INT 0
50915: PPUSH
50916: LD_INT 3
50918: PPUSH
50919: CALL_OW 12
50923: PUSH
50924: LD_INT 0
50926: PPUSH
50927: LD_INT 3
50929: PPUSH
50930: CALL_OW 12
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: LD_INT 0
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
50947: LD_ADDR_OWVAR 29
50951: PUSH
50952: LD_INT 12
50954: PUSH
50955: LD_INT 12
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: ST_TO_ADDR
// end ;
50962: LD_VAR 0 1
50966: RET
// export function PrepareApeman ( agressivity ) ; begin
50967: LD_INT 0
50969: PPUSH
// uc_side := 0 ;
50970: LD_ADDR_OWVAR 20
50974: PUSH
50975: LD_INT 0
50977: ST_TO_ADDR
// uc_nation := 0 ;
50978: LD_ADDR_OWVAR 21
50982: PUSH
50983: LD_INT 0
50985: ST_TO_ADDR
// hc_sex := sex_male ;
50986: LD_ADDR_OWVAR 27
50990: PUSH
50991: LD_INT 1
50993: ST_TO_ADDR
// hc_class := class_apeman ;
50994: LD_ADDR_OWVAR 28
50998: PUSH
50999: LD_INT 12
51001: ST_TO_ADDR
// hc_gallery :=  ;
51002: LD_ADDR_OWVAR 33
51006: PUSH
51007: LD_STRING 
51009: ST_TO_ADDR
// hc_name :=  ;
51010: LD_ADDR_OWVAR 26
51014: PUSH
51015: LD_STRING 
51017: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
51018: LD_ADDR_OWVAR 29
51022: PUSH
51023: LD_INT 12
51025: PUSH
51026: LD_INT 12
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: ST_TO_ADDR
// if agressivity = 0 then
51033: LD_VAR 0 1
51037: PUSH
51038: LD_INT 0
51040: EQUAL
51041: IFFALSE 51053
// hc_agressivity := 0 else
51043: LD_ADDR_OWVAR 35
51047: PUSH
51048: LD_INT 0
51050: ST_TO_ADDR
51051: GO 51074
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51053: LD_ADDR_OWVAR 35
51057: PUSH
51058: LD_VAR 0 1
51062: NEG
51063: PPUSH
51064: LD_VAR 0 1
51068: PPUSH
51069: CALL_OW 12
51073: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51074: LD_ADDR_OWVAR 31
51078: PUSH
51079: LD_INT 0
51081: PPUSH
51082: LD_INT 3
51084: PPUSH
51085: CALL_OW 12
51089: PUSH
51090: LD_INT 0
51092: PPUSH
51093: LD_INT 3
51095: PPUSH
51096: CALL_OW 12
51100: PUSH
51101: LD_INT 0
51103: PUSH
51104: LD_INT 0
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: ST_TO_ADDR
// end ;
51113: LD_VAR 0 2
51117: RET
// export function PrepareTiger ( agressivity ) ; begin
51118: LD_INT 0
51120: PPUSH
// uc_side := 0 ;
51121: LD_ADDR_OWVAR 20
51125: PUSH
51126: LD_INT 0
51128: ST_TO_ADDR
// uc_nation := 0 ;
51129: LD_ADDR_OWVAR 21
51133: PUSH
51134: LD_INT 0
51136: ST_TO_ADDR
// InitHc ;
51137: CALL_OW 19
// hc_class := class_tiger ;
51141: LD_ADDR_OWVAR 28
51145: PUSH
51146: LD_INT 14
51148: ST_TO_ADDR
// hc_gallery :=  ;
51149: LD_ADDR_OWVAR 33
51153: PUSH
51154: LD_STRING 
51156: ST_TO_ADDR
// hc_name :=  ;
51157: LD_ADDR_OWVAR 26
51161: PUSH
51162: LD_STRING 
51164: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51165: LD_ADDR_OWVAR 35
51169: PUSH
51170: LD_VAR 0 1
51174: NEG
51175: PPUSH
51176: LD_VAR 0 1
51180: PPUSH
51181: CALL_OW 12
51185: ST_TO_ADDR
// end ;
51186: LD_VAR 0 2
51190: RET
// export function PrepareEnchidna ( ) ; begin
51191: LD_INT 0
51193: PPUSH
// uc_side := 0 ;
51194: LD_ADDR_OWVAR 20
51198: PUSH
51199: LD_INT 0
51201: ST_TO_ADDR
// uc_nation := 0 ;
51202: LD_ADDR_OWVAR 21
51206: PUSH
51207: LD_INT 0
51209: ST_TO_ADDR
// InitHc ;
51210: CALL_OW 19
// hc_class := class_baggie ;
51214: LD_ADDR_OWVAR 28
51218: PUSH
51219: LD_INT 13
51221: ST_TO_ADDR
// hc_gallery :=  ;
51222: LD_ADDR_OWVAR 33
51226: PUSH
51227: LD_STRING 
51229: ST_TO_ADDR
// hc_name :=  ;
51230: LD_ADDR_OWVAR 26
51234: PUSH
51235: LD_STRING 
51237: ST_TO_ADDR
// end ;
51238: LD_VAR 0 1
51242: RET
// export function PrepareFrog ( ) ; begin
51243: LD_INT 0
51245: PPUSH
// uc_side := 0 ;
51246: LD_ADDR_OWVAR 20
51250: PUSH
51251: LD_INT 0
51253: ST_TO_ADDR
// uc_nation := 0 ;
51254: LD_ADDR_OWVAR 21
51258: PUSH
51259: LD_INT 0
51261: ST_TO_ADDR
// InitHc ;
51262: CALL_OW 19
// hc_class := class_frog ;
51266: LD_ADDR_OWVAR 28
51270: PUSH
51271: LD_INT 19
51273: ST_TO_ADDR
// hc_gallery :=  ;
51274: LD_ADDR_OWVAR 33
51278: PUSH
51279: LD_STRING 
51281: ST_TO_ADDR
// hc_name :=  ;
51282: LD_ADDR_OWVAR 26
51286: PUSH
51287: LD_STRING 
51289: ST_TO_ADDR
// end ;
51290: LD_VAR 0 1
51294: RET
// export function PrepareFish ( ) ; begin
51295: LD_INT 0
51297: PPUSH
// uc_side := 0 ;
51298: LD_ADDR_OWVAR 20
51302: PUSH
51303: LD_INT 0
51305: ST_TO_ADDR
// uc_nation := 0 ;
51306: LD_ADDR_OWVAR 21
51310: PUSH
51311: LD_INT 0
51313: ST_TO_ADDR
// InitHc ;
51314: CALL_OW 19
// hc_class := class_fish ;
51318: LD_ADDR_OWVAR 28
51322: PUSH
51323: LD_INT 20
51325: ST_TO_ADDR
// hc_gallery :=  ;
51326: LD_ADDR_OWVAR 33
51330: PUSH
51331: LD_STRING 
51333: ST_TO_ADDR
// hc_name :=  ;
51334: LD_ADDR_OWVAR 26
51338: PUSH
51339: LD_STRING 
51341: ST_TO_ADDR
// end ;
51342: LD_VAR 0 1
51346: RET
// export function PrepareBird ( ) ; begin
51347: LD_INT 0
51349: PPUSH
// uc_side := 0 ;
51350: LD_ADDR_OWVAR 20
51354: PUSH
51355: LD_INT 0
51357: ST_TO_ADDR
// uc_nation := 0 ;
51358: LD_ADDR_OWVAR 21
51362: PUSH
51363: LD_INT 0
51365: ST_TO_ADDR
// InitHc ;
51366: CALL_OW 19
// hc_class := class_phororhacos ;
51370: LD_ADDR_OWVAR 28
51374: PUSH
51375: LD_INT 18
51377: ST_TO_ADDR
// hc_gallery :=  ;
51378: LD_ADDR_OWVAR 33
51382: PUSH
51383: LD_STRING 
51385: ST_TO_ADDR
// hc_name :=  ;
51386: LD_ADDR_OWVAR 26
51390: PUSH
51391: LD_STRING 
51393: ST_TO_ADDR
// end ;
51394: LD_VAR 0 1
51398: RET
// export function PrepareHorse ( ) ; begin
51399: LD_INT 0
51401: PPUSH
// uc_side := 0 ;
51402: LD_ADDR_OWVAR 20
51406: PUSH
51407: LD_INT 0
51409: ST_TO_ADDR
// uc_nation := 0 ;
51410: LD_ADDR_OWVAR 21
51414: PUSH
51415: LD_INT 0
51417: ST_TO_ADDR
// InitHc ;
51418: CALL_OW 19
// hc_class := class_horse ;
51422: LD_ADDR_OWVAR 28
51426: PUSH
51427: LD_INT 21
51429: ST_TO_ADDR
// hc_gallery :=  ;
51430: LD_ADDR_OWVAR 33
51434: PUSH
51435: LD_STRING 
51437: ST_TO_ADDR
// hc_name :=  ;
51438: LD_ADDR_OWVAR 26
51442: PUSH
51443: LD_STRING 
51445: ST_TO_ADDR
// end ;
51446: LD_VAR 0 1
51450: RET
// export function PrepareMastodont ( ) ; begin
51451: LD_INT 0
51453: PPUSH
// uc_side := 0 ;
51454: LD_ADDR_OWVAR 20
51458: PUSH
51459: LD_INT 0
51461: ST_TO_ADDR
// uc_nation := 0 ;
51462: LD_ADDR_OWVAR 21
51466: PUSH
51467: LD_INT 0
51469: ST_TO_ADDR
// vc_chassis := class_mastodont ;
51470: LD_ADDR_OWVAR 37
51474: PUSH
51475: LD_INT 31
51477: ST_TO_ADDR
// vc_control := control_rider ;
51478: LD_ADDR_OWVAR 38
51482: PUSH
51483: LD_INT 4
51485: ST_TO_ADDR
// end ;
51486: LD_VAR 0 1
51490: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51491: LD_INT 0
51493: PPUSH
51494: PPUSH
51495: PPUSH
// uc_side = 0 ;
51496: LD_ADDR_OWVAR 20
51500: PUSH
51501: LD_INT 0
51503: ST_TO_ADDR
// uc_nation = 0 ;
51504: LD_ADDR_OWVAR 21
51508: PUSH
51509: LD_INT 0
51511: ST_TO_ADDR
// InitHc_All ( ) ;
51512: CALL_OW 584
// InitVc ;
51516: CALL_OW 20
// if mastodonts then
51520: LD_VAR 0 6
51524: IFFALSE 51591
// for i = 1 to mastodonts do
51526: LD_ADDR_VAR 0 11
51530: PUSH
51531: DOUBLE
51532: LD_INT 1
51534: DEC
51535: ST_TO_ADDR
51536: LD_VAR 0 6
51540: PUSH
51541: FOR_TO
51542: IFFALSE 51589
// begin vc_chassis := 31 ;
51544: LD_ADDR_OWVAR 37
51548: PUSH
51549: LD_INT 31
51551: ST_TO_ADDR
// vc_control := control_rider ;
51552: LD_ADDR_OWVAR 38
51556: PUSH
51557: LD_INT 4
51559: ST_TO_ADDR
// animal := CreateVehicle ;
51560: LD_ADDR_VAR 0 12
51564: PUSH
51565: CALL_OW 45
51569: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51570: LD_VAR 0 12
51574: PPUSH
51575: LD_VAR 0 8
51579: PPUSH
51580: LD_INT 0
51582: PPUSH
51583: CALL 53733 0 3
// end ;
51587: GO 51541
51589: POP
51590: POP
// if horses then
51591: LD_VAR 0 5
51595: IFFALSE 51662
// for i = 1 to horses do
51597: LD_ADDR_VAR 0 11
51601: PUSH
51602: DOUBLE
51603: LD_INT 1
51605: DEC
51606: ST_TO_ADDR
51607: LD_VAR 0 5
51611: PUSH
51612: FOR_TO
51613: IFFALSE 51660
// begin hc_class := 21 ;
51615: LD_ADDR_OWVAR 28
51619: PUSH
51620: LD_INT 21
51622: ST_TO_ADDR
// hc_gallery :=  ;
51623: LD_ADDR_OWVAR 33
51627: PUSH
51628: LD_STRING 
51630: ST_TO_ADDR
// animal := CreateHuman ;
51631: LD_ADDR_VAR 0 12
51635: PUSH
51636: CALL_OW 44
51640: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51641: LD_VAR 0 12
51645: PPUSH
51646: LD_VAR 0 8
51650: PPUSH
51651: LD_INT 0
51653: PPUSH
51654: CALL 53733 0 3
// end ;
51658: GO 51612
51660: POP
51661: POP
// if birds then
51662: LD_VAR 0 1
51666: IFFALSE 51733
// for i = 1 to birds do
51668: LD_ADDR_VAR 0 11
51672: PUSH
51673: DOUBLE
51674: LD_INT 1
51676: DEC
51677: ST_TO_ADDR
51678: LD_VAR 0 1
51682: PUSH
51683: FOR_TO
51684: IFFALSE 51731
// begin hc_class := 18 ;
51686: LD_ADDR_OWVAR 28
51690: PUSH
51691: LD_INT 18
51693: ST_TO_ADDR
// hc_gallery =  ;
51694: LD_ADDR_OWVAR 33
51698: PUSH
51699: LD_STRING 
51701: ST_TO_ADDR
// animal := CreateHuman ;
51702: LD_ADDR_VAR 0 12
51706: PUSH
51707: CALL_OW 44
51711: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51712: LD_VAR 0 12
51716: PPUSH
51717: LD_VAR 0 8
51721: PPUSH
51722: LD_INT 0
51724: PPUSH
51725: CALL 53733 0 3
// end ;
51729: GO 51683
51731: POP
51732: POP
// if tigers then
51733: LD_VAR 0 2
51737: IFFALSE 51821
// for i = 1 to tigers do
51739: LD_ADDR_VAR 0 11
51743: PUSH
51744: DOUBLE
51745: LD_INT 1
51747: DEC
51748: ST_TO_ADDR
51749: LD_VAR 0 2
51753: PUSH
51754: FOR_TO
51755: IFFALSE 51819
// begin hc_class = class_tiger ;
51757: LD_ADDR_OWVAR 28
51761: PUSH
51762: LD_INT 14
51764: ST_TO_ADDR
// hc_gallery =  ;
51765: LD_ADDR_OWVAR 33
51769: PUSH
51770: LD_STRING 
51772: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51773: LD_ADDR_OWVAR 35
51777: PUSH
51778: LD_INT 7
51780: NEG
51781: PPUSH
51782: LD_INT 7
51784: PPUSH
51785: CALL_OW 12
51789: ST_TO_ADDR
// animal := CreateHuman ;
51790: LD_ADDR_VAR 0 12
51794: PUSH
51795: CALL_OW 44
51799: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51800: LD_VAR 0 12
51804: PPUSH
51805: LD_VAR 0 8
51809: PPUSH
51810: LD_INT 0
51812: PPUSH
51813: CALL 53733 0 3
// end ;
51817: GO 51754
51819: POP
51820: POP
// if apemans then
51821: LD_VAR 0 3
51825: IFFALSE 51948
// for i = 1 to apemans do
51827: LD_ADDR_VAR 0 11
51831: PUSH
51832: DOUBLE
51833: LD_INT 1
51835: DEC
51836: ST_TO_ADDR
51837: LD_VAR 0 3
51841: PUSH
51842: FOR_TO
51843: IFFALSE 51946
// begin hc_class = class_apeman ;
51845: LD_ADDR_OWVAR 28
51849: PUSH
51850: LD_INT 12
51852: ST_TO_ADDR
// hc_gallery =  ;
51853: LD_ADDR_OWVAR 33
51857: PUSH
51858: LD_STRING 
51860: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51861: LD_ADDR_OWVAR 35
51865: PUSH
51866: LD_INT 2
51868: NEG
51869: PPUSH
51870: LD_INT 2
51872: PPUSH
51873: CALL_OW 12
51877: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51878: LD_ADDR_OWVAR 31
51882: PUSH
51883: LD_INT 1
51885: PPUSH
51886: LD_INT 3
51888: PPUSH
51889: CALL_OW 12
51893: PUSH
51894: LD_INT 1
51896: PPUSH
51897: LD_INT 3
51899: PPUSH
51900: CALL_OW 12
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: LD_INT 0
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: ST_TO_ADDR
// animal := CreateHuman ;
51917: LD_ADDR_VAR 0 12
51921: PUSH
51922: CALL_OW 44
51926: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51927: LD_VAR 0 12
51931: PPUSH
51932: LD_VAR 0 8
51936: PPUSH
51937: LD_INT 0
51939: PPUSH
51940: CALL 53733 0 3
// end ;
51944: GO 51842
51946: POP
51947: POP
// if enchidnas then
51948: LD_VAR 0 4
51952: IFFALSE 52019
// for i = 1 to enchidnas do
51954: LD_ADDR_VAR 0 11
51958: PUSH
51959: DOUBLE
51960: LD_INT 1
51962: DEC
51963: ST_TO_ADDR
51964: LD_VAR 0 4
51968: PUSH
51969: FOR_TO
51970: IFFALSE 52017
// begin hc_class = 13 ;
51972: LD_ADDR_OWVAR 28
51976: PUSH
51977: LD_INT 13
51979: ST_TO_ADDR
// hc_gallery =  ;
51980: LD_ADDR_OWVAR 33
51984: PUSH
51985: LD_STRING 
51987: ST_TO_ADDR
// animal := CreateHuman ;
51988: LD_ADDR_VAR 0 12
51992: PUSH
51993: CALL_OW 44
51997: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51998: LD_VAR 0 12
52002: PPUSH
52003: LD_VAR 0 8
52007: PPUSH
52008: LD_INT 0
52010: PPUSH
52011: CALL 53733 0 3
// end ;
52015: GO 51969
52017: POP
52018: POP
// if fishes then
52019: LD_VAR 0 7
52023: IFFALSE 52090
// for i = 1 to fishes do
52025: LD_ADDR_VAR 0 11
52029: PUSH
52030: DOUBLE
52031: LD_INT 1
52033: DEC
52034: ST_TO_ADDR
52035: LD_VAR 0 7
52039: PUSH
52040: FOR_TO
52041: IFFALSE 52088
// begin hc_class = 20 ;
52043: LD_ADDR_OWVAR 28
52047: PUSH
52048: LD_INT 20
52050: ST_TO_ADDR
// hc_gallery =  ;
52051: LD_ADDR_OWVAR 33
52055: PUSH
52056: LD_STRING 
52058: ST_TO_ADDR
// animal := CreateHuman ;
52059: LD_ADDR_VAR 0 12
52063: PUSH
52064: CALL_OW 44
52068: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
52069: LD_VAR 0 12
52073: PPUSH
52074: LD_VAR 0 9
52078: PPUSH
52079: LD_INT 0
52081: PPUSH
52082: CALL 53733 0 3
// end ;
52086: GO 52040
52088: POP
52089: POP
// end ;
52090: LD_VAR 0 10
52094: RET
// export function WantHeal ( sci , unit ) ; begin
52095: LD_INT 0
52097: PPUSH
// if GetTaskList ( sci ) > 0 then
52098: LD_VAR 0 1
52102: PPUSH
52103: CALL_OW 437
52107: PUSH
52108: LD_INT 0
52110: GREATER
52111: IFFALSE 52183
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52113: LD_VAR 0 1
52117: PPUSH
52118: CALL_OW 437
52122: PUSH
52123: LD_INT 1
52125: ARRAY
52126: PUSH
52127: LD_INT 1
52129: ARRAY
52130: PUSH
52131: LD_STRING l
52133: EQUAL
52134: IFFALSE 52161
52136: PUSH
52137: LD_VAR 0 1
52141: PPUSH
52142: CALL_OW 437
52146: PUSH
52147: LD_INT 1
52149: ARRAY
52150: PUSH
52151: LD_INT 4
52153: ARRAY
52154: PUSH
52155: LD_VAR 0 2
52159: EQUAL
52160: AND
52161: IFFALSE 52173
// result := true else
52163: LD_ADDR_VAR 0 3
52167: PUSH
52168: LD_INT 1
52170: ST_TO_ADDR
52171: GO 52181
// result := false ;
52173: LD_ADDR_VAR 0 3
52177: PUSH
52178: LD_INT 0
52180: ST_TO_ADDR
// end else
52181: GO 52191
// result := false ;
52183: LD_ADDR_VAR 0 3
52187: PUSH
52188: LD_INT 0
52190: ST_TO_ADDR
// end ;
52191: LD_VAR 0 3
52195: RET
// export function HealTarget ( sci ) ; begin
52196: LD_INT 0
52198: PPUSH
// if not sci then
52199: LD_VAR 0 1
52203: NOT
52204: IFFALSE 52208
// exit ;
52206: GO 52273
// result := 0 ;
52208: LD_ADDR_VAR 0 2
52212: PUSH
52213: LD_INT 0
52215: ST_TO_ADDR
// if GetTaskList ( sci ) then
52216: LD_VAR 0 1
52220: PPUSH
52221: CALL_OW 437
52225: IFFALSE 52273
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52227: LD_VAR 0 1
52231: PPUSH
52232: CALL_OW 437
52236: PUSH
52237: LD_INT 1
52239: ARRAY
52240: PUSH
52241: LD_INT 1
52243: ARRAY
52244: PUSH
52245: LD_STRING l
52247: EQUAL
52248: IFFALSE 52273
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52250: LD_ADDR_VAR 0 2
52254: PUSH
52255: LD_VAR 0 1
52259: PPUSH
52260: CALL_OW 437
52264: PUSH
52265: LD_INT 1
52267: ARRAY
52268: PUSH
52269: LD_INT 4
52271: ARRAY
52272: ST_TO_ADDR
// end ;
52273: LD_VAR 0 2
52277: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52278: LD_INT 0
52280: PPUSH
52281: PPUSH
52282: PPUSH
52283: PPUSH
// if not base_units then
52284: LD_VAR 0 1
52288: NOT
52289: IFFALSE 52293
// exit ;
52291: GO 52380
// result := false ;
52293: LD_ADDR_VAR 0 2
52297: PUSH
52298: LD_INT 0
52300: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
52301: LD_ADDR_VAR 0 5
52305: PUSH
52306: LD_VAR 0 1
52310: PPUSH
52311: LD_INT 21
52313: PUSH
52314: LD_INT 3
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PPUSH
52321: CALL_OW 72
52325: ST_TO_ADDR
// if not tmp then
52326: LD_VAR 0 5
52330: NOT
52331: IFFALSE 52335
// exit ;
52333: GO 52380
// for i in tmp do
52335: LD_ADDR_VAR 0 3
52339: PUSH
52340: LD_VAR 0 5
52344: PUSH
52345: FOR_IN
52346: IFFALSE 52378
// begin result := EnemyInRange ( i , 22 ) ;
52348: LD_ADDR_VAR 0 2
52352: PUSH
52353: LD_VAR 0 3
52357: PPUSH
52358: LD_INT 22
52360: PPUSH
52361: CALL 49805 0 2
52365: ST_TO_ADDR
// if result then
52366: LD_VAR 0 2
52370: IFFALSE 52376
// exit ;
52372: POP
52373: POP
52374: GO 52380
// end ;
52376: GO 52345
52378: POP
52379: POP
// end ;
52380: LD_VAR 0 2
52384: RET
// export function FilterByTag ( units , tag ) ; begin
52385: LD_INT 0
52387: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
52388: LD_ADDR_VAR 0 3
52392: PUSH
52393: LD_VAR 0 1
52397: PPUSH
52398: LD_INT 120
52400: PUSH
52401: LD_VAR 0 2
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PPUSH
52410: CALL_OW 72
52414: ST_TO_ADDR
// end ;
52415: LD_VAR 0 3
52419: RET
// export function IsDriver ( un ) ; begin
52420: LD_INT 0
52422: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52423: LD_ADDR_VAR 0 2
52427: PUSH
52428: LD_VAR 0 1
52432: PUSH
52433: LD_INT 55
52435: PUSH
52436: EMPTY
52437: LIST
52438: PPUSH
52439: CALL_OW 69
52443: IN
52444: ST_TO_ADDR
// end ;
52445: LD_VAR 0 2
52449: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52450: LD_INT 0
52452: PPUSH
52453: PPUSH
// list := [ ] ;
52454: LD_ADDR_VAR 0 5
52458: PUSH
52459: EMPTY
52460: ST_TO_ADDR
// case d of 0 :
52461: LD_VAR 0 3
52465: PUSH
52466: LD_INT 0
52468: DOUBLE
52469: EQUAL
52470: IFTRUE 52474
52472: GO 52607
52474: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52475: LD_ADDR_VAR 0 5
52479: PUSH
52480: LD_VAR 0 1
52484: PUSH
52485: LD_INT 4
52487: MINUS
52488: PUSH
52489: LD_VAR 0 2
52493: PUSH
52494: LD_INT 4
52496: MINUS
52497: PUSH
52498: LD_INT 2
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: LIST
52505: PUSH
52506: LD_VAR 0 1
52510: PUSH
52511: LD_INT 3
52513: MINUS
52514: PUSH
52515: LD_VAR 0 2
52519: PUSH
52520: LD_INT 1
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: LIST
52527: PUSH
52528: LD_VAR 0 1
52532: PUSH
52533: LD_INT 4
52535: PLUS
52536: PUSH
52537: LD_VAR 0 2
52541: PUSH
52542: LD_INT 4
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: LIST
52549: PUSH
52550: LD_VAR 0 1
52554: PUSH
52555: LD_INT 3
52557: PLUS
52558: PUSH
52559: LD_VAR 0 2
52563: PUSH
52564: LD_INT 3
52566: PLUS
52567: PUSH
52568: LD_INT 5
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: LIST
52575: PUSH
52576: LD_VAR 0 1
52580: PUSH
52581: LD_VAR 0 2
52585: PUSH
52586: LD_INT 4
52588: PLUS
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: LIST
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: ST_TO_ADDR
// end ; 1 :
52605: GO 53305
52607: LD_INT 1
52609: DOUBLE
52610: EQUAL
52611: IFTRUE 52615
52613: GO 52748
52615: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52616: LD_ADDR_VAR 0 5
52620: PUSH
52621: LD_VAR 0 1
52625: PUSH
52626: LD_VAR 0 2
52630: PUSH
52631: LD_INT 4
52633: MINUS
52634: PUSH
52635: LD_INT 3
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: LIST
52642: PUSH
52643: LD_VAR 0 1
52647: PUSH
52648: LD_INT 3
52650: MINUS
52651: PUSH
52652: LD_VAR 0 2
52656: PUSH
52657: LD_INT 3
52659: MINUS
52660: PUSH
52661: LD_INT 2
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: LIST
52668: PUSH
52669: LD_VAR 0 1
52673: PUSH
52674: LD_INT 4
52676: MINUS
52677: PUSH
52678: LD_VAR 0 2
52682: PUSH
52683: LD_INT 1
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: LIST
52690: PUSH
52691: LD_VAR 0 1
52695: PUSH
52696: LD_VAR 0 2
52700: PUSH
52701: LD_INT 3
52703: PLUS
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: LIST
52712: PUSH
52713: LD_VAR 0 1
52717: PUSH
52718: LD_INT 4
52720: PLUS
52721: PUSH
52722: LD_VAR 0 2
52726: PUSH
52727: LD_INT 4
52729: PLUS
52730: PUSH
52731: LD_INT 5
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: LIST
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: ST_TO_ADDR
// end ; 2 :
52746: GO 53305
52748: LD_INT 2
52750: DOUBLE
52751: EQUAL
52752: IFTRUE 52756
52754: GO 52885
52756: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52757: LD_ADDR_VAR 0 5
52761: PUSH
52762: LD_VAR 0 1
52766: PUSH
52767: LD_VAR 0 2
52771: PUSH
52772: LD_INT 3
52774: MINUS
52775: PUSH
52776: LD_INT 3
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: LIST
52783: PUSH
52784: LD_VAR 0 1
52788: PUSH
52789: LD_INT 4
52791: PLUS
52792: PUSH
52793: LD_VAR 0 2
52797: PUSH
52798: LD_INT 4
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: LIST
52805: PUSH
52806: LD_VAR 0 1
52810: PUSH
52811: LD_VAR 0 2
52815: PUSH
52816: LD_INT 4
52818: PLUS
52819: PUSH
52820: LD_INT 0
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: LIST
52827: PUSH
52828: LD_VAR 0 1
52832: PUSH
52833: LD_INT 3
52835: MINUS
52836: PUSH
52837: LD_VAR 0 2
52841: PUSH
52842: LD_INT 1
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: LIST
52849: PUSH
52850: LD_VAR 0 1
52854: PUSH
52855: LD_INT 4
52857: MINUS
52858: PUSH
52859: LD_VAR 0 2
52863: PUSH
52864: LD_INT 4
52866: MINUS
52867: PUSH
52868: LD_INT 2
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: LIST
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: ST_TO_ADDR
// end ; 3 :
52883: GO 53305
52885: LD_INT 3
52887: DOUBLE
52888: EQUAL
52889: IFTRUE 52893
52891: GO 53026
52893: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52894: LD_ADDR_VAR 0 5
52898: PUSH
52899: LD_VAR 0 1
52903: PUSH
52904: LD_INT 3
52906: PLUS
52907: PUSH
52908: LD_VAR 0 2
52912: PUSH
52913: LD_INT 4
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: LIST
52920: PUSH
52921: LD_VAR 0 1
52925: PUSH
52926: LD_INT 4
52928: PLUS
52929: PUSH
52930: LD_VAR 0 2
52934: PUSH
52935: LD_INT 4
52937: PLUS
52938: PUSH
52939: LD_INT 5
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: LIST
52946: PUSH
52947: LD_VAR 0 1
52951: PUSH
52952: LD_INT 4
52954: MINUS
52955: PUSH
52956: LD_VAR 0 2
52960: PUSH
52961: LD_INT 1
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: LIST
52968: PUSH
52969: LD_VAR 0 1
52973: PUSH
52974: LD_VAR 0 2
52978: PUSH
52979: LD_INT 4
52981: MINUS
52982: PUSH
52983: LD_INT 3
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: LIST
52990: PUSH
52991: LD_VAR 0 1
52995: PUSH
52996: LD_INT 3
52998: MINUS
52999: PUSH
53000: LD_VAR 0 2
53004: PUSH
53005: LD_INT 3
53007: MINUS
53008: PUSH
53009: LD_INT 2
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: LIST
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: ST_TO_ADDR
// end ; 4 :
53024: GO 53305
53026: LD_INT 4
53028: DOUBLE
53029: EQUAL
53030: IFTRUE 53034
53032: GO 53167
53034: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
53035: LD_ADDR_VAR 0 5
53039: PUSH
53040: LD_VAR 0 1
53044: PUSH
53045: LD_VAR 0 2
53049: PUSH
53050: LD_INT 4
53052: PLUS
53053: PUSH
53054: LD_INT 0
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: LIST
53061: PUSH
53062: LD_VAR 0 1
53066: PUSH
53067: LD_INT 3
53069: PLUS
53070: PUSH
53071: LD_VAR 0 2
53075: PUSH
53076: LD_INT 3
53078: PLUS
53079: PUSH
53080: LD_INT 5
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: LIST
53087: PUSH
53088: LD_VAR 0 1
53092: PUSH
53093: LD_INT 4
53095: PLUS
53096: PUSH
53097: LD_VAR 0 2
53101: PUSH
53102: LD_INT 4
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: LIST
53109: PUSH
53110: LD_VAR 0 1
53114: PUSH
53115: LD_VAR 0 2
53119: PUSH
53120: LD_INT 3
53122: MINUS
53123: PUSH
53124: LD_INT 3
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: LIST
53131: PUSH
53132: LD_VAR 0 1
53136: PUSH
53137: LD_INT 4
53139: MINUS
53140: PUSH
53141: LD_VAR 0 2
53145: PUSH
53146: LD_INT 4
53148: MINUS
53149: PUSH
53150: LD_INT 2
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: LIST
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: ST_TO_ADDR
// end ; 5 :
53165: GO 53305
53167: LD_INT 5
53169: DOUBLE
53170: EQUAL
53171: IFTRUE 53175
53173: GO 53304
53175: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53176: LD_ADDR_VAR 0 5
53180: PUSH
53181: LD_VAR 0 1
53185: PUSH
53186: LD_INT 4
53188: MINUS
53189: PUSH
53190: LD_VAR 0 2
53194: PUSH
53195: LD_INT 1
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: LIST
53202: PUSH
53203: LD_VAR 0 1
53207: PUSH
53208: LD_VAR 0 2
53212: PUSH
53213: LD_INT 4
53215: MINUS
53216: PUSH
53217: LD_INT 3
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: LIST
53224: PUSH
53225: LD_VAR 0 1
53229: PUSH
53230: LD_INT 4
53232: PLUS
53233: PUSH
53234: LD_VAR 0 2
53238: PUSH
53239: LD_INT 4
53241: PLUS
53242: PUSH
53243: LD_INT 5
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: LIST
53250: PUSH
53251: LD_VAR 0 1
53255: PUSH
53256: LD_INT 3
53258: PLUS
53259: PUSH
53260: LD_VAR 0 2
53264: PUSH
53265: LD_INT 4
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: LIST
53272: PUSH
53273: LD_VAR 0 1
53277: PUSH
53278: LD_VAR 0 2
53282: PUSH
53283: LD_INT 3
53285: PLUS
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: LIST
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: ST_TO_ADDR
// end ; end ;
53302: GO 53305
53304: POP
// result := list ;
53305: LD_ADDR_VAR 0 4
53309: PUSH
53310: LD_VAR 0 5
53314: ST_TO_ADDR
// end ;
53315: LD_VAR 0 4
53319: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
53320: LD_INT 0
53322: PPUSH
53323: PPUSH
53324: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
53325: LD_VAR 0 1
53329: NOT
53330: IFTRUE 53358
53332: PUSH
53333: LD_VAR 0 2
53337: PUSH
53338: LD_INT 1
53340: PUSH
53341: LD_INT 2
53343: PUSH
53344: LD_INT 3
53346: PUSH
53347: LD_INT 4
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: IN
53356: NOT
53357: OR
53358: IFFALSE 53362
// exit ;
53360: GO 53445
// tmp := [ ] ;
53362: LD_ADDR_VAR 0 5
53366: PUSH
53367: EMPTY
53368: ST_TO_ADDR
// for i in units do
53369: LD_ADDR_VAR 0 4
53373: PUSH
53374: LD_VAR 0 1
53378: PUSH
53379: FOR_IN
53380: IFFALSE 53414
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
53382: LD_ADDR_VAR 0 5
53386: PUSH
53387: LD_VAR 0 5
53391: PPUSH
53392: LD_VAR 0 4
53396: PPUSH
53397: LD_VAR 0 2
53401: PPUSH
53402: CALL_OW 259
53406: PPUSH
53407: CALL 54840 0 2
53411: ST_TO_ADDR
53412: GO 53379
53414: POP
53415: POP
// if not tmp then
53416: LD_VAR 0 5
53420: NOT
53421: IFFALSE 53425
// exit ;
53423: GO 53445
// result := SortListByListDesc ( units , tmp ) ;
53425: LD_ADDR_VAR 0 3
53429: PUSH
53430: LD_VAR 0 1
53434: PPUSH
53435: LD_VAR 0 5
53439: PPUSH
53440: CALL_OW 77
53444: ST_TO_ADDR
// end ;
53445: LD_VAR 0 3
53449: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53450: LD_INT 0
53452: PPUSH
53453: PPUSH
53454: PPUSH
// result := false ;
53455: LD_ADDR_VAR 0 3
53459: PUSH
53460: LD_INT 0
53462: ST_TO_ADDR
// if not building then
53463: LD_VAR 0 2
53467: NOT
53468: IFFALSE 53472
// exit ;
53470: GO 53616
// x := GetX ( building ) ;
53472: LD_ADDR_VAR 0 4
53476: PUSH
53477: LD_VAR 0 2
53481: PPUSH
53482: CALL_OW 250
53486: ST_TO_ADDR
// y := GetY ( building ) ;
53487: LD_ADDR_VAR 0 5
53491: PUSH
53492: LD_VAR 0 2
53496: PPUSH
53497: CALL_OW 251
53501: ST_TO_ADDR
// if not x or not y then
53502: LD_VAR 0 4
53506: NOT
53507: IFTRUE 53516
53509: PUSH
53510: LD_VAR 0 5
53514: NOT
53515: OR
53516: IFFALSE 53520
// exit ;
53518: GO 53616
// if GetTaskList ( unit ) then
53520: LD_VAR 0 1
53524: PPUSH
53525: CALL_OW 437
53529: IFFALSE 53616
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53531: LD_STRING e
53533: PUSH
53534: LD_VAR 0 1
53538: PPUSH
53539: CALL_OW 437
53543: PUSH
53544: LD_INT 1
53546: ARRAY
53547: PUSH
53548: LD_INT 1
53550: ARRAY
53551: EQUAL
53552: IFFALSE 53579
53554: PUSH
53555: LD_VAR 0 4
53559: PUSH
53560: LD_VAR 0 1
53564: PPUSH
53565: CALL_OW 437
53569: PUSH
53570: LD_INT 1
53572: ARRAY
53573: PUSH
53574: LD_INT 2
53576: ARRAY
53577: EQUAL
53578: AND
53579: IFFALSE 53606
53581: PUSH
53582: LD_VAR 0 5
53586: PUSH
53587: LD_VAR 0 1
53591: PPUSH
53592: CALL_OW 437
53596: PUSH
53597: LD_INT 1
53599: ARRAY
53600: PUSH
53601: LD_INT 3
53603: ARRAY
53604: EQUAL
53605: AND
53606: IFFALSE 53616
// result := true end ;
53608: LD_ADDR_VAR 0 3
53612: PUSH
53613: LD_INT 1
53615: ST_TO_ADDR
// end ;
53616: LD_VAR 0 3
53620: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53621: LD_INT 0
53623: PPUSH
// result := false ;
53624: LD_ADDR_VAR 0 4
53628: PUSH
53629: LD_INT 0
53631: ST_TO_ADDR
// if GetTaskList ( unit ) then
53632: LD_VAR 0 1
53636: PPUSH
53637: CALL_OW 437
53641: IFFALSE 53728
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53643: LD_STRING M
53645: PUSH
53646: LD_VAR 0 1
53650: PPUSH
53651: CALL_OW 437
53655: PUSH
53656: LD_INT 1
53658: ARRAY
53659: PUSH
53660: LD_INT 1
53662: ARRAY
53663: EQUAL
53664: IFFALSE 53691
53666: PUSH
53667: LD_VAR 0 2
53671: PUSH
53672: LD_VAR 0 1
53676: PPUSH
53677: CALL_OW 437
53681: PUSH
53682: LD_INT 1
53684: ARRAY
53685: PUSH
53686: LD_INT 2
53688: ARRAY
53689: EQUAL
53690: AND
53691: IFFALSE 53718
53693: PUSH
53694: LD_VAR 0 3
53698: PUSH
53699: LD_VAR 0 1
53703: PPUSH
53704: CALL_OW 437
53708: PUSH
53709: LD_INT 1
53711: ARRAY
53712: PUSH
53713: LD_INT 3
53715: ARRAY
53716: EQUAL
53717: AND
53718: IFFALSE 53728
// result := true ;
53720: LD_ADDR_VAR 0 4
53724: PUSH
53725: LD_INT 1
53727: ST_TO_ADDR
// end ; end ;
53728: LD_VAR 0 4
53732: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53733: LD_INT 0
53735: PPUSH
53736: PPUSH
53737: PPUSH
53738: PPUSH
// if not unit or not area then
53739: LD_VAR 0 1
53743: NOT
53744: IFTRUE 53753
53746: PUSH
53747: LD_VAR 0 2
53751: NOT
53752: OR
53753: IFFALSE 53757
// exit ;
53755: GO 53933
// tmp := AreaToList ( area , i ) ;
53757: LD_ADDR_VAR 0 6
53761: PUSH
53762: LD_VAR 0 2
53766: PPUSH
53767: LD_VAR 0 5
53771: PPUSH
53772: CALL_OW 517
53776: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53777: LD_ADDR_VAR 0 5
53781: PUSH
53782: DOUBLE
53783: LD_INT 1
53785: DEC
53786: ST_TO_ADDR
53787: LD_VAR 0 6
53791: PUSH
53792: LD_INT 1
53794: ARRAY
53795: PUSH
53796: FOR_TO
53797: IFFALSE 53931
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53799: LD_ADDR_VAR 0 7
53803: PUSH
53804: LD_VAR 0 6
53808: PUSH
53809: LD_INT 1
53811: ARRAY
53812: PUSH
53813: LD_VAR 0 5
53817: ARRAY
53818: PUSH
53819: LD_VAR 0 6
53823: PUSH
53824: LD_INT 2
53826: ARRAY
53827: PUSH
53828: LD_VAR 0 5
53832: ARRAY
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
53838: LD_INT 92
53840: PUSH
53841: LD_VAR 0 7
53845: PUSH
53846: LD_INT 1
53848: ARRAY
53849: PUSH
53850: LD_VAR 0 7
53854: PUSH
53855: LD_INT 2
53857: ARRAY
53858: PUSH
53859: LD_INT 2
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: PPUSH
53868: CALL_OW 69
53872: PUSH
53873: LD_INT 0
53875: EQUAL
53876: IFFALSE 53929
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53878: LD_VAR 0 1
53882: PPUSH
53883: LD_VAR 0 7
53887: PUSH
53888: LD_INT 1
53890: ARRAY
53891: PPUSH
53892: LD_VAR 0 7
53896: PUSH
53897: LD_INT 2
53899: ARRAY
53900: PPUSH
53901: LD_VAR 0 3
53905: PPUSH
53906: CALL_OW 48
// result := IsPlaced ( unit ) ;
53910: LD_ADDR_VAR 0 4
53914: PUSH
53915: LD_VAR 0 1
53919: PPUSH
53920: CALL_OW 305
53924: ST_TO_ADDR
// exit ;
53925: POP
53926: POP
53927: GO 53933
// end ; end ;
53929: GO 53796
53931: POP
53932: POP
// end ;
53933: LD_VAR 0 4
53937: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53938: LD_INT 0
53940: PPUSH
53941: PPUSH
53942: PPUSH
// if not side or side > 8 then
53943: LD_VAR 0 1
53947: NOT
53948: IFTRUE 53960
53950: PUSH
53951: LD_VAR 0 1
53955: PUSH
53956: LD_INT 8
53958: GREATER
53959: OR
53960: IFFALSE 53964
// exit ;
53962: GO 54151
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53964: LD_ADDR_VAR 0 4
53968: PUSH
53969: LD_INT 22
53971: PUSH
53972: LD_VAR 0 1
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 21
53983: PUSH
53984: LD_INT 3
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PPUSH
53995: CALL_OW 69
53999: ST_TO_ADDR
// if not tmp then
54000: LD_VAR 0 4
54004: NOT
54005: IFFALSE 54009
// exit ;
54007: GO 54151
// enable_addtolog := true ;
54009: LD_ADDR_OWVAR 81
54013: PUSH
54014: LD_INT 1
54016: ST_TO_ADDR
// AddToLog ( [ ) ;
54017: LD_STRING [
54019: PPUSH
54020: CALL_OW 561
// for i in tmp do
54024: LD_ADDR_VAR 0 3
54028: PUSH
54029: LD_VAR 0 4
54033: PUSH
54034: FOR_IN
54035: IFFALSE 54142
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
54037: LD_STRING [
54039: PUSH
54040: LD_VAR 0 3
54044: PPUSH
54045: CALL_OW 266
54049: STR
54050: PUSH
54051: LD_STRING , 
54053: STR
54054: PUSH
54055: LD_VAR 0 3
54059: PPUSH
54060: CALL_OW 250
54064: STR
54065: PUSH
54066: LD_STRING , 
54068: STR
54069: PUSH
54070: LD_VAR 0 3
54074: PPUSH
54075: CALL_OW 251
54079: STR
54080: PUSH
54081: LD_STRING , 
54083: STR
54084: PUSH
54085: LD_VAR 0 3
54089: PPUSH
54090: CALL_OW 254
54094: STR
54095: PUSH
54096: LD_STRING , 
54098: STR
54099: PUSH
54100: LD_VAR 0 3
54104: PPUSH
54105: LD_INT 1
54107: PPUSH
54108: CALL_OW 268
54112: STR
54113: PUSH
54114: LD_STRING , 
54116: STR
54117: PUSH
54118: LD_VAR 0 3
54122: PPUSH
54123: LD_INT 2
54125: PPUSH
54126: CALL_OW 268
54130: STR
54131: PUSH
54132: LD_STRING ],
54134: STR
54135: PPUSH
54136: CALL_OW 561
// end ;
54140: GO 54034
54142: POP
54143: POP
// AddToLog ( ]; ) ;
54144: LD_STRING ];
54146: PPUSH
54147: CALL_OW 561
// end ;
54151: LD_VAR 0 2
54155: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54156: LD_INT 0
54158: PPUSH
54159: PPUSH
54160: PPUSH
54161: PPUSH
54162: PPUSH
// if not area or not rate or not max then
54163: LD_VAR 0 1
54167: NOT
54168: IFTRUE 54177
54170: PUSH
54171: LD_VAR 0 2
54175: NOT
54176: OR
54177: IFTRUE 54186
54179: PUSH
54180: LD_VAR 0 4
54184: NOT
54185: OR
54186: IFFALSE 54190
// exit ;
54188: GO 54379
// while 1 do
54190: LD_INT 1
54192: IFFALSE 54379
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54194: LD_ADDR_VAR 0 9
54198: PUSH
54199: LD_VAR 0 1
54203: PPUSH
54204: LD_INT 1
54206: PPUSH
54207: CALL_OW 287
54211: PUSH
54212: LD_INT 10
54214: MUL
54215: ST_TO_ADDR
// r := rate / 10 ;
54216: LD_ADDR_VAR 0 7
54220: PUSH
54221: LD_VAR 0 2
54225: PUSH
54226: LD_INT 10
54228: DIVREAL
54229: ST_TO_ADDR
// time := 1 1$00 ;
54230: LD_ADDR_VAR 0 8
54234: PUSH
54235: LD_INT 2100
54237: ST_TO_ADDR
// if amount < min then
54238: LD_VAR 0 9
54242: PUSH
54243: LD_VAR 0 3
54247: LESS
54248: IFFALSE 54266
// r := r * 2 else
54250: LD_ADDR_VAR 0 7
54254: PUSH
54255: LD_VAR 0 7
54259: PUSH
54260: LD_INT 2
54262: MUL
54263: ST_TO_ADDR
54264: GO 54292
// if amount > max then
54266: LD_VAR 0 9
54270: PUSH
54271: LD_VAR 0 4
54275: GREATER
54276: IFFALSE 54292
// r := r / 2 ;
54278: LD_ADDR_VAR 0 7
54282: PUSH
54283: LD_VAR 0 7
54287: PUSH
54288: LD_INT 2
54290: DIVREAL
54291: ST_TO_ADDR
// time := time / r ;
54292: LD_ADDR_VAR 0 8
54296: PUSH
54297: LD_VAR 0 8
54301: PUSH
54302: LD_VAR 0 7
54306: DIVREAL
54307: ST_TO_ADDR
// if time < 0 then
54308: LD_VAR 0 8
54312: PUSH
54313: LD_INT 0
54315: LESS
54316: IFFALSE 54333
// time := time * - 1 ;
54318: LD_ADDR_VAR 0 8
54322: PUSH
54323: LD_VAR 0 8
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: MUL
54332: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
54333: LD_VAR 0 8
54337: PUSH
54338: LD_INT 35
54340: PPUSH
54341: LD_INT 875
54343: PPUSH
54344: CALL_OW 12
54348: PLUS
54349: PPUSH
54350: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
54354: LD_INT 1
54356: PPUSH
54357: LD_INT 5
54359: PPUSH
54360: CALL_OW 12
54364: PPUSH
54365: LD_VAR 0 1
54369: PPUSH
54370: LD_INT 1
54372: PPUSH
54373: CALL_OW 55
// end ;
54377: GO 54190
// end ;
54379: LD_VAR 0 5
54383: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
54384: LD_INT 0
54386: PPUSH
54387: PPUSH
54388: PPUSH
54389: PPUSH
54390: PPUSH
54391: PPUSH
54392: PPUSH
54393: PPUSH
// if not turrets or not factories then
54394: LD_VAR 0 1
54398: NOT
54399: IFTRUE 54408
54401: PUSH
54402: LD_VAR 0 2
54406: NOT
54407: OR
54408: IFFALSE 54412
// exit ;
54410: GO 54719
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54412: LD_ADDR_VAR 0 10
54416: PUSH
54417: LD_INT 5
54419: PUSH
54420: LD_INT 6
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 2
54429: PUSH
54430: LD_INT 4
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 3
54439: PUSH
54440: LD_INT 5
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 24
54454: PUSH
54455: LD_INT 25
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 23
54464: PUSH
54465: LD_INT 27
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 42
54478: PUSH
54479: LD_INT 43
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 44
54488: PUSH
54489: LD_INT 46
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 45
54498: PUSH
54499: LD_INT 47
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: LIST
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: LIST
54515: ST_TO_ADDR
// result := [ ] ;
54516: LD_ADDR_VAR 0 3
54520: PUSH
54521: EMPTY
54522: ST_TO_ADDR
// for i in turrets do
54523: LD_ADDR_VAR 0 4
54527: PUSH
54528: LD_VAR 0 1
54532: PUSH
54533: FOR_IN
54534: IFFALSE 54717
// begin nat := GetNation ( i ) ;
54536: LD_ADDR_VAR 0 7
54540: PUSH
54541: LD_VAR 0 4
54545: PPUSH
54546: CALL_OW 248
54550: ST_TO_ADDR
// weapon := 0 ;
54551: LD_ADDR_VAR 0 8
54555: PUSH
54556: LD_INT 0
54558: ST_TO_ADDR
// if not nat then
54559: LD_VAR 0 7
54563: NOT
54564: IFFALSE 54568
// continue ;
54566: GO 54533
// for j in list [ nat ] do
54568: LD_ADDR_VAR 0 5
54572: PUSH
54573: LD_VAR 0 10
54577: PUSH
54578: LD_VAR 0 7
54582: ARRAY
54583: PUSH
54584: FOR_IN
54585: IFFALSE 54626
// if GetBWeapon ( i ) = j [ 1 ] then
54587: LD_VAR 0 4
54591: PPUSH
54592: CALL_OW 269
54596: PUSH
54597: LD_VAR 0 5
54601: PUSH
54602: LD_INT 1
54604: ARRAY
54605: EQUAL
54606: IFFALSE 54624
// begin weapon := j [ 2 ] ;
54608: LD_ADDR_VAR 0 8
54612: PUSH
54613: LD_VAR 0 5
54617: PUSH
54618: LD_INT 2
54620: ARRAY
54621: ST_TO_ADDR
// break ;
54622: GO 54626
// end ;
54624: GO 54584
54626: POP
54627: POP
// if not weapon then
54628: LD_VAR 0 8
54632: NOT
54633: IFFALSE 54637
// continue ;
54635: GO 54533
// for k in factories do
54637: LD_ADDR_VAR 0 6
54641: PUSH
54642: LD_VAR 0 2
54646: PUSH
54647: FOR_IN
54648: IFFALSE 54713
// begin weapons := AvailableWeaponList ( k ) ;
54650: LD_ADDR_VAR 0 9
54654: PUSH
54655: LD_VAR 0 6
54659: PPUSH
54660: CALL_OW 478
54664: ST_TO_ADDR
// if not weapons then
54665: LD_VAR 0 9
54669: NOT
54670: IFFALSE 54674
// continue ;
54672: GO 54647
// if weapon in weapons then
54674: LD_VAR 0 8
54678: PUSH
54679: LD_VAR 0 9
54683: IN
54684: IFFALSE 54711
// begin result := [ i , weapon ] ;
54686: LD_ADDR_VAR 0 3
54690: PUSH
54691: LD_VAR 0 4
54695: PUSH
54696: LD_VAR 0 8
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: ST_TO_ADDR
// exit ;
54705: POP
54706: POP
54707: POP
54708: POP
54709: GO 54719
// end ; end ;
54711: GO 54647
54713: POP
54714: POP
// end ;
54715: GO 54533
54717: POP
54718: POP
// end ;
54719: LD_VAR 0 3
54723: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54724: LD_INT 0
54726: PPUSH
// if not side or side > 8 then
54727: LD_VAR 0 3
54731: NOT
54732: IFTRUE 54744
54734: PUSH
54735: LD_VAR 0 3
54739: PUSH
54740: LD_INT 8
54742: GREATER
54743: OR
54744: IFFALSE 54748
// exit ;
54746: GO 54807
// if not range then
54748: LD_VAR 0 4
54752: NOT
54753: IFFALSE 54764
// range := - 12 ;
54755: LD_ADDR_VAR 0 4
54759: PUSH
54760: LD_INT 12
54762: NEG
54763: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54764: LD_VAR 0 1
54768: PPUSH
54769: LD_VAR 0 2
54773: PPUSH
54774: LD_VAR 0 3
54778: PPUSH
54779: LD_VAR 0 4
54783: PPUSH
54784: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54788: LD_VAR 0 1
54792: PPUSH
54793: LD_VAR 0 2
54797: PPUSH
54798: LD_VAR 0 3
54802: PPUSH
54803: CALL_OW 331
// end ;
54807: LD_VAR 0 5
54811: RET
// export function Video ( mode ) ; begin
54812: LD_INT 0
54814: PPUSH
// ingame_video = mode ;
54815: LD_ADDR_OWVAR 52
54819: PUSH
54820: LD_VAR 0 1
54824: ST_TO_ADDR
// interface_hidden = mode ;
54825: LD_ADDR_OWVAR 54
54829: PUSH
54830: LD_VAR 0 1
54834: ST_TO_ADDR
// end ;
54835: LD_VAR 0 2
54839: RET
// export function Join ( array , element ) ; begin
54840: LD_INT 0
54842: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54843: LD_ADDR_VAR 0 3
54847: PUSH
54848: LD_VAR 0 1
54852: PPUSH
54853: LD_VAR 0 1
54857: PUSH
54858: LD_INT 1
54860: PLUS
54861: PPUSH
54862: LD_VAR 0 2
54866: PPUSH
54867: CALL_OW 1
54871: ST_TO_ADDR
// end ;
54872: LD_VAR 0 3
54876: RET
// export function JoinUnion ( array , element ) ; begin
54877: LD_INT 0
54879: PPUSH
// result := array union element ;
54880: LD_ADDR_VAR 0 3
54884: PUSH
54885: LD_VAR 0 1
54889: PUSH
54890: LD_VAR 0 2
54894: UNION
54895: ST_TO_ADDR
// end ;
54896: LD_VAR 0 3
54900: RET
// export function GetBehemoths ( side ) ; begin
54901: LD_INT 0
54903: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54904: LD_ADDR_VAR 0 2
54908: PUSH
54909: LD_INT 22
54911: PUSH
54912: LD_VAR 0 1
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 31
54923: PUSH
54924: LD_INT 25
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PPUSH
54935: CALL_OW 69
54939: ST_TO_ADDR
// end ;
54940: LD_VAR 0 2
54944: RET
// export function Shuffle ( array ) ; var i , index ; begin
54945: LD_INT 0
54947: PPUSH
54948: PPUSH
54949: PPUSH
// result := [ ] ;
54950: LD_ADDR_VAR 0 2
54954: PUSH
54955: EMPTY
54956: ST_TO_ADDR
// if not array then
54957: LD_VAR 0 1
54961: NOT
54962: IFFALSE 54966
// exit ;
54964: GO 55065
// Randomize ;
54966: CALL_OW 10
// for i = array downto 1 do
54970: LD_ADDR_VAR 0 3
54974: PUSH
54975: DOUBLE
54976: LD_VAR 0 1
54980: INC
54981: ST_TO_ADDR
54982: LD_INT 1
54984: PUSH
54985: FOR_DOWNTO
54986: IFFALSE 55063
// begin index := rand ( 1 , array ) ;
54988: LD_ADDR_VAR 0 4
54992: PUSH
54993: LD_INT 1
54995: PPUSH
54996: LD_VAR 0 1
55000: PPUSH
55001: CALL_OW 12
55005: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
55006: LD_ADDR_VAR 0 2
55010: PUSH
55011: LD_VAR 0 2
55015: PPUSH
55016: LD_VAR 0 2
55020: PUSH
55021: LD_INT 1
55023: PLUS
55024: PPUSH
55025: LD_VAR 0 1
55029: PUSH
55030: LD_VAR 0 4
55034: ARRAY
55035: PPUSH
55036: CALL_OW 2
55040: ST_TO_ADDR
// array := Delete ( array , index ) ;
55041: LD_ADDR_VAR 0 1
55045: PUSH
55046: LD_VAR 0 1
55050: PPUSH
55051: LD_VAR 0 4
55055: PPUSH
55056: CALL_OW 3
55060: ST_TO_ADDR
// end ;
55061: GO 54985
55063: POP
55064: POP
// end ;
55065: LD_VAR 0 2
55069: RET
// export function GetBaseMaterials ( base ) ; begin
55070: LD_INT 0
55072: PPUSH
// result := [ 0 , 0 , 0 ] ;
55073: LD_ADDR_VAR 0 2
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: LD_INT 0
55083: PUSH
55084: LD_INT 0
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: LIST
55091: ST_TO_ADDR
// if not base then
55092: LD_VAR 0 1
55096: NOT
55097: IFFALSE 55101
// exit ;
55099: GO 55150
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55101: LD_ADDR_VAR 0 2
55105: PUSH
55106: LD_VAR 0 1
55110: PPUSH
55111: LD_INT 1
55113: PPUSH
55114: CALL_OW 275
55118: PUSH
55119: LD_VAR 0 1
55123: PPUSH
55124: LD_INT 2
55126: PPUSH
55127: CALL_OW 275
55131: PUSH
55132: LD_VAR 0 1
55136: PPUSH
55137: LD_INT 3
55139: PPUSH
55140: CALL_OW 275
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: LIST
55149: ST_TO_ADDR
// end ;
55150: LD_VAR 0 2
55154: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55155: LD_INT 0
55157: PPUSH
55158: PPUSH
// result := array ;
55159: LD_ADDR_VAR 0 3
55163: PUSH
55164: LD_VAR 0 1
55168: ST_TO_ADDR
// if size >= result then
55169: LD_VAR 0 2
55173: PUSH
55174: LD_VAR 0 3
55178: GREATEREQUAL
55179: IFFALSE 55183
// exit ;
55181: GO 55233
// if size then
55183: LD_VAR 0 2
55187: IFFALSE 55233
// for i := array downto size do
55189: LD_ADDR_VAR 0 4
55193: PUSH
55194: DOUBLE
55195: LD_VAR 0 1
55199: INC
55200: ST_TO_ADDR
55201: LD_VAR 0 2
55205: PUSH
55206: FOR_DOWNTO
55207: IFFALSE 55231
// result := Delete ( result , result ) ;
55209: LD_ADDR_VAR 0 3
55213: PUSH
55214: LD_VAR 0 3
55218: PPUSH
55219: LD_VAR 0 3
55223: PPUSH
55224: CALL_OW 3
55228: ST_TO_ADDR
55229: GO 55206
55231: POP
55232: POP
// end ;
55233: LD_VAR 0 3
55237: RET
// export function ComExit ( unit ) ; var tmp ; begin
55238: LD_INT 0
55240: PPUSH
55241: PPUSH
// if not IsInUnit ( unit ) then
55242: LD_VAR 0 1
55246: PPUSH
55247: CALL_OW 310
55251: NOT
55252: IFFALSE 55256
// exit ;
55254: GO 55316
// tmp := IsInUnit ( unit ) ;
55256: LD_ADDR_VAR 0 3
55260: PUSH
55261: LD_VAR 0 1
55265: PPUSH
55266: CALL_OW 310
55270: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
55271: LD_VAR 0 3
55275: PPUSH
55276: CALL_OW 247
55280: PUSH
55281: LD_INT 2
55283: EQUAL
55284: IFFALSE 55297
// ComExitVehicle ( unit ) else
55286: LD_VAR 0 1
55290: PPUSH
55291: CALL_OW 121
55295: GO 55306
// ComExitBuilding ( unit ) ;
55297: LD_VAR 0 1
55301: PPUSH
55302: CALL_OW 122
// result := tmp ;
55306: LD_ADDR_VAR 0 2
55310: PUSH
55311: LD_VAR 0 3
55315: ST_TO_ADDR
// end ;
55316: LD_VAR 0 2
55320: RET
// export function ComExitAll ( units ) ; var i ; begin
55321: LD_INT 0
55323: PPUSH
55324: PPUSH
// if not units then
55325: LD_VAR 0 1
55329: NOT
55330: IFFALSE 55334
// exit ;
55332: GO 55360
// for i in units do
55334: LD_ADDR_VAR 0 3
55338: PUSH
55339: LD_VAR 0 1
55343: PUSH
55344: FOR_IN
55345: IFFALSE 55358
// ComExit ( i ) ;
55347: LD_VAR 0 3
55351: PPUSH
55352: CALL 55238 0 1
55356: GO 55344
55358: POP
55359: POP
// end ;
55360: LD_VAR 0 2
55364: RET
// export function ResetHc ; begin
55365: LD_INT 0
55367: PPUSH
// InitHc ;
55368: CALL_OW 19
// hc_importance := 0 ;
55372: LD_ADDR_OWVAR 32
55376: PUSH
55377: LD_INT 0
55379: ST_TO_ADDR
// end ;
55380: LD_VAR 0 1
55384: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
55385: LD_INT 0
55387: PPUSH
55388: PPUSH
55389: PPUSH
// _x := ( x1 + x2 ) div 2 ;
55390: LD_ADDR_VAR 0 6
55394: PUSH
55395: LD_VAR 0 1
55399: PUSH
55400: LD_VAR 0 3
55404: PLUS
55405: PUSH
55406: LD_INT 2
55408: DIV
55409: ST_TO_ADDR
// if _x < 0 then
55410: LD_VAR 0 6
55414: PUSH
55415: LD_INT 0
55417: LESS
55418: IFFALSE 55435
// _x := _x * - 1 ;
55420: LD_ADDR_VAR 0 6
55424: PUSH
55425: LD_VAR 0 6
55429: PUSH
55430: LD_INT 1
55432: NEG
55433: MUL
55434: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
55435: LD_ADDR_VAR 0 7
55439: PUSH
55440: LD_VAR 0 2
55444: PUSH
55445: LD_VAR 0 4
55449: PLUS
55450: PUSH
55451: LD_INT 2
55453: DIV
55454: ST_TO_ADDR
// if _y < 0 then
55455: LD_VAR 0 7
55459: PUSH
55460: LD_INT 0
55462: LESS
55463: IFFALSE 55480
// _y := _y * - 1 ;
55465: LD_ADDR_VAR 0 7
55469: PUSH
55470: LD_VAR 0 7
55474: PUSH
55475: LD_INT 1
55477: NEG
55478: MUL
55479: ST_TO_ADDR
// result := [ _x , _y ] ;
55480: LD_ADDR_VAR 0 5
55484: PUSH
55485: LD_VAR 0 6
55489: PUSH
55490: LD_VAR 0 7
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: ST_TO_ADDR
// end ;
55499: LD_VAR 0 5
55503: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
55504: LD_INT 0
55506: PPUSH
55507: PPUSH
55508: PPUSH
55509: PPUSH
// task := GetTaskList ( unit ) ;
55510: LD_ADDR_VAR 0 7
55514: PUSH
55515: LD_VAR 0 1
55519: PPUSH
55520: CALL_OW 437
55524: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55525: LD_VAR 0 7
55529: NOT
55530: IFFALSE 55549
55532: PUSH
55533: LD_VAR 0 1
55537: PPUSH
55538: LD_VAR 0 2
55542: PPUSH
55543: CALL_OW 308
55547: NOT
55548: AND
55549: IFFALSE 55553
// exit ;
55551: GO 55671
// if IsInArea ( unit , area ) then
55553: LD_VAR 0 1
55557: PPUSH
55558: LD_VAR 0 2
55562: PPUSH
55563: CALL_OW 308
55567: IFFALSE 55585
// begin ComMoveToArea ( unit , goAway ) ;
55569: LD_VAR 0 1
55573: PPUSH
55574: LD_VAR 0 3
55578: PPUSH
55579: CALL_OW 113
// exit ;
55583: GO 55671
// end ; if task [ 1 ] [ 1 ] <> M then
55585: LD_VAR 0 7
55589: PUSH
55590: LD_INT 1
55592: ARRAY
55593: PUSH
55594: LD_INT 1
55596: ARRAY
55597: PUSH
55598: LD_STRING M
55600: NONEQUAL
55601: IFFALSE 55605
// exit ;
55603: GO 55671
// x := task [ 1 ] [ 2 ] ;
55605: LD_ADDR_VAR 0 5
55609: PUSH
55610: LD_VAR 0 7
55614: PUSH
55615: LD_INT 1
55617: ARRAY
55618: PUSH
55619: LD_INT 2
55621: ARRAY
55622: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55623: LD_ADDR_VAR 0 6
55627: PUSH
55628: LD_VAR 0 7
55632: PUSH
55633: LD_INT 1
55635: ARRAY
55636: PUSH
55637: LD_INT 3
55639: ARRAY
55640: ST_TO_ADDR
// if InArea ( x , y , area ) then
55641: LD_VAR 0 5
55645: PPUSH
55646: LD_VAR 0 6
55650: PPUSH
55651: LD_VAR 0 2
55655: PPUSH
55656: CALL_OW 309
55660: IFFALSE 55671
// ComStop ( unit ) ;
55662: LD_VAR 0 1
55666: PPUSH
55667: CALL_OW 141
// end ;
55671: LD_VAR 0 4
55675: RET
// export function Abs ( value ) ; begin
55676: LD_INT 0
55678: PPUSH
// result := value ;
55679: LD_ADDR_VAR 0 2
55683: PUSH
55684: LD_VAR 0 1
55688: ST_TO_ADDR
// if value < 0 then
55689: LD_VAR 0 1
55693: PUSH
55694: LD_INT 0
55696: LESS
55697: IFFALSE 55714
// result := value * - 1 ;
55699: LD_ADDR_VAR 0 2
55703: PUSH
55704: LD_VAR 0 1
55708: PUSH
55709: LD_INT 1
55711: NEG
55712: MUL
55713: ST_TO_ADDR
// end ;
55714: LD_VAR 0 2
55718: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55719: LD_INT 0
55721: PPUSH
55722: PPUSH
55723: PPUSH
55724: PPUSH
55725: PPUSH
55726: PPUSH
55727: PPUSH
55728: PPUSH
// if not unit or not building then
55729: LD_VAR 0 1
55733: NOT
55734: IFTRUE 55743
55736: PUSH
55737: LD_VAR 0 2
55741: NOT
55742: OR
55743: IFFALSE 55747
// exit ;
55745: GO 55975
// x := GetX ( building ) ;
55747: LD_ADDR_VAR 0 4
55751: PUSH
55752: LD_VAR 0 2
55756: PPUSH
55757: CALL_OW 250
55761: ST_TO_ADDR
// y := GetY ( building ) ;
55762: LD_ADDR_VAR 0 6
55766: PUSH
55767: LD_VAR 0 2
55771: PPUSH
55772: CALL_OW 251
55776: ST_TO_ADDR
// d := GetDir ( building ) ;
55777: LD_ADDR_VAR 0 8
55781: PUSH
55782: LD_VAR 0 2
55786: PPUSH
55787: CALL_OW 254
55791: ST_TO_ADDR
// r := 4 ;
55792: LD_ADDR_VAR 0 9
55796: PUSH
55797: LD_INT 4
55799: ST_TO_ADDR
// for i := 1 to 5 do
55800: LD_ADDR_VAR 0 10
55804: PUSH
55805: DOUBLE
55806: LD_INT 1
55808: DEC
55809: ST_TO_ADDR
55810: LD_INT 5
55812: PUSH
55813: FOR_TO
55814: IFFALSE 55973
// begin _x := ShiftX ( x , d , r + i ) ;
55816: LD_ADDR_VAR 0 5
55820: PUSH
55821: LD_VAR 0 4
55825: PPUSH
55826: LD_VAR 0 8
55830: PPUSH
55831: LD_VAR 0 9
55835: PUSH
55836: LD_VAR 0 10
55840: PLUS
55841: PPUSH
55842: CALL_OW 272
55846: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55847: LD_ADDR_VAR 0 7
55851: PUSH
55852: LD_VAR 0 6
55856: PPUSH
55857: LD_VAR 0 8
55861: PPUSH
55862: LD_VAR 0 9
55866: PUSH
55867: LD_VAR 0 10
55871: PLUS
55872: PPUSH
55873: CALL_OW 273
55877: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55878: LD_VAR 0 5
55882: PPUSH
55883: LD_VAR 0 7
55887: PPUSH
55888: CALL_OW 488
55892: IFFALSE 55927
55894: PUSH
55895: LD_VAR 0 5
55899: PPUSH
55900: LD_VAR 0 7
55904: PPUSH
55905: CALL_OW 428
55909: PPUSH
55910: CALL_OW 247
55914: PUSH
55915: LD_INT 3
55917: PUSH
55918: LD_INT 2
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: IN
55925: NOT
55926: AND
55927: IFFALSE 55971
// begin ComMoveXY ( unit , _x , _y ) ;
55929: LD_VAR 0 1
55933: PPUSH
55934: LD_VAR 0 5
55938: PPUSH
55939: LD_VAR 0 7
55943: PPUSH
55944: CALL_OW 111
// result := [ _x , _y ] ;
55948: LD_ADDR_VAR 0 3
55952: PUSH
55953: LD_VAR 0 5
55957: PUSH
55958: LD_VAR 0 7
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: ST_TO_ADDR
// exit ;
55967: POP
55968: POP
55969: GO 55975
// end ; end ;
55971: GO 55813
55973: POP
55974: POP
// end ;
55975: LD_VAR 0 3
55979: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55980: LD_INT 0
55982: PPUSH
55983: PPUSH
55984: PPUSH
// result := 0 ;
55985: LD_ADDR_VAR 0 3
55989: PUSH
55990: LD_INT 0
55992: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55993: LD_VAR 0 1
55997: PUSH
55998: LD_INT 0
56000: LESS
56001: IFTRUE 56013
56003: PUSH
56004: LD_VAR 0 1
56008: PUSH
56009: LD_INT 8
56011: GREATER
56012: OR
56013: IFTRUE 56025
56015: PUSH
56016: LD_VAR 0 2
56020: PUSH
56021: LD_INT 0
56023: LESS
56024: OR
56025: IFTRUE 56037
56027: PUSH
56028: LD_VAR 0 2
56032: PUSH
56033: LD_INT 8
56035: GREATER
56036: OR
56037: IFFALSE 56041
// exit ;
56039: GO 56116
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
56041: LD_ADDR_VAR 0 4
56045: PUSH
56046: LD_INT 22
56048: PUSH
56049: LD_VAR 0 2
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PPUSH
56058: CALL_OW 69
56062: PUSH
56063: FOR_IN
56064: IFFALSE 56114
// begin un := UnitShoot ( i ) ;
56066: LD_ADDR_VAR 0 5
56070: PUSH
56071: LD_VAR 0 4
56075: PPUSH
56076: CALL_OW 504
56080: ST_TO_ADDR
// if GetSide ( un ) = side1 then
56081: LD_VAR 0 5
56085: PPUSH
56086: CALL_OW 255
56090: PUSH
56091: LD_VAR 0 1
56095: EQUAL
56096: IFFALSE 56112
// begin result := un ;
56098: LD_ADDR_VAR 0 3
56102: PUSH
56103: LD_VAR 0 5
56107: ST_TO_ADDR
// exit ;
56108: POP
56109: POP
56110: GO 56116
// end ; end ;
56112: GO 56063
56114: POP
56115: POP
// end ;
56116: LD_VAR 0 3
56120: RET
// export function GetCargoBay ( units ) ; begin
56121: LD_INT 0
56123: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
56124: LD_ADDR_VAR 0 2
56128: PUSH
56129: LD_VAR 0 1
56133: PPUSH
56134: LD_INT 2
56136: PUSH
56137: LD_INT 34
56139: PUSH
56140: LD_INT 12
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 34
56149: PUSH
56150: LD_INT 51
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 34
56159: PUSH
56160: LD_INT 32
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 34
56169: PUSH
56170: LD_INT 89
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: PPUSH
56184: CALL_OW 72
56188: ST_TO_ADDR
// end ;
56189: LD_VAR 0 2
56193: RET
// export function Negate ( value ) ; begin
56194: LD_INT 0
56196: PPUSH
// result := not value ;
56197: LD_ADDR_VAR 0 2
56201: PUSH
56202: LD_VAR 0 1
56206: NOT
56207: ST_TO_ADDR
// end ;
56208: LD_VAR 0 2
56212: RET
// export function Inc ( value ) ; begin
56213: LD_INT 0
56215: PPUSH
// result := value + 1 ;
56216: LD_ADDR_VAR 0 2
56220: PUSH
56221: LD_VAR 0 1
56225: PUSH
56226: LD_INT 1
56228: PLUS
56229: ST_TO_ADDR
// end ;
56230: LD_VAR 0 2
56234: RET
// export function Dec ( value ) ; begin
56235: LD_INT 0
56237: PPUSH
// result := value - 1 ;
56238: LD_ADDR_VAR 0 2
56242: PUSH
56243: LD_VAR 0 1
56247: PUSH
56248: LD_INT 1
56250: MINUS
56251: ST_TO_ADDR
// end ;
56252: LD_VAR 0 2
56256: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
56257: LD_INT 0
56259: PPUSH
56260: PPUSH
56261: PPUSH
56262: PPUSH
56263: PPUSH
56264: PPUSH
56265: PPUSH
56266: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
56267: LD_VAR 0 1
56271: PPUSH
56272: LD_VAR 0 2
56276: PPUSH
56277: CALL_OW 488
56281: NOT
56282: IFTRUE 56301
56284: PUSH
56285: LD_VAR 0 3
56289: PPUSH
56290: LD_VAR 0 4
56294: PPUSH
56295: CALL_OW 488
56299: NOT
56300: OR
56301: IFFALSE 56314
// begin result := - 1 ;
56303: LD_ADDR_VAR 0 5
56307: PUSH
56308: LD_INT 1
56310: NEG
56311: ST_TO_ADDR
// exit ;
56312: GO 56549
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
56314: LD_ADDR_VAR 0 12
56318: PUSH
56319: LD_VAR 0 1
56323: PPUSH
56324: LD_VAR 0 2
56328: PPUSH
56329: LD_VAR 0 3
56333: PPUSH
56334: LD_VAR 0 4
56338: PPUSH
56339: CALL 55385 0 4
56343: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
56344: LD_ADDR_VAR 0 11
56348: PUSH
56349: LD_VAR 0 1
56353: PPUSH
56354: LD_VAR 0 2
56358: PPUSH
56359: LD_VAR 0 12
56363: PUSH
56364: LD_INT 1
56366: ARRAY
56367: PPUSH
56368: LD_VAR 0 12
56372: PUSH
56373: LD_INT 2
56375: ARRAY
56376: PPUSH
56377: CALL_OW 298
56381: ST_TO_ADDR
// distance := 9999 ;
56382: LD_ADDR_VAR 0 10
56386: PUSH
56387: LD_INT 9999
56389: ST_TO_ADDR
// for i := 0 to 5 do
56390: LD_ADDR_VAR 0 6
56394: PUSH
56395: DOUBLE
56396: LD_INT 0
56398: DEC
56399: ST_TO_ADDR
56400: LD_INT 5
56402: PUSH
56403: FOR_TO
56404: IFFALSE 56547
// begin _x := ShiftX ( x1 , i , centerDist ) ;
56406: LD_ADDR_VAR 0 7
56410: PUSH
56411: LD_VAR 0 1
56415: PPUSH
56416: LD_VAR 0 6
56420: PPUSH
56421: LD_VAR 0 11
56425: PPUSH
56426: CALL_OW 272
56430: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
56431: LD_ADDR_VAR 0 8
56435: PUSH
56436: LD_VAR 0 2
56440: PPUSH
56441: LD_VAR 0 6
56445: PPUSH
56446: LD_VAR 0 11
56450: PPUSH
56451: CALL_OW 273
56455: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56456: LD_VAR 0 7
56460: PPUSH
56461: LD_VAR 0 8
56465: PPUSH
56466: CALL_OW 488
56470: NOT
56471: IFFALSE 56475
// continue ;
56473: GO 56403
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
56475: LD_ADDR_VAR 0 9
56479: PUSH
56480: LD_VAR 0 12
56484: PUSH
56485: LD_INT 1
56487: ARRAY
56488: PPUSH
56489: LD_VAR 0 12
56493: PUSH
56494: LD_INT 2
56496: ARRAY
56497: PPUSH
56498: LD_VAR 0 7
56502: PPUSH
56503: LD_VAR 0 8
56507: PPUSH
56508: CALL_OW 298
56512: ST_TO_ADDR
// if tmp < distance then
56513: LD_VAR 0 9
56517: PUSH
56518: LD_VAR 0 10
56522: LESS
56523: IFFALSE 56545
// begin result := i ;
56525: LD_ADDR_VAR 0 5
56529: PUSH
56530: LD_VAR 0 6
56534: ST_TO_ADDR
// distance := tmp ;
56535: LD_ADDR_VAR 0 10
56539: PUSH
56540: LD_VAR 0 9
56544: ST_TO_ADDR
// end ; end ;
56545: GO 56403
56547: POP
56548: POP
// end ;
56549: LD_VAR 0 5
56553: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56554: LD_INT 0
56556: PPUSH
56557: PPUSH
// if not driver or not IsInUnit ( driver ) then
56558: LD_VAR 0 1
56562: NOT
56563: IFTRUE 56577
56565: PUSH
56566: LD_VAR 0 1
56570: PPUSH
56571: CALL_OW 310
56575: NOT
56576: OR
56577: IFFALSE 56581
// exit ;
56579: GO 56671
// vehicle := IsInUnit ( driver ) ;
56581: LD_ADDR_VAR 0 3
56585: PUSH
56586: LD_VAR 0 1
56590: PPUSH
56591: CALL_OW 310
56595: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56596: LD_VAR 0 1
56600: PPUSH
56601: LD_STRING \
56603: PUSH
56604: LD_INT 0
56606: PUSH
56607: LD_INT 0
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: LD_INT 0
56615: PUSH
56616: LD_INT 0
56618: PUSH
56619: LD_INT 0
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: PUSH
56631: LD_STRING E
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: LD_INT 0
56639: PUSH
56640: LD_VAR 0 3
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: LD_INT 0
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PPUSH
56667: CALL_OW 446
// end ;
56671: LD_VAR 0 2
56675: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56676: LD_INT 0
56678: PPUSH
56679: PPUSH
// if not driver or not IsInUnit ( driver ) then
56680: LD_VAR 0 1
56684: NOT
56685: IFTRUE 56699
56687: PUSH
56688: LD_VAR 0 1
56692: PPUSH
56693: CALL_OW 310
56697: NOT
56698: OR
56699: IFFALSE 56703
// exit ;
56701: GO 56793
// vehicle := IsInUnit ( driver ) ;
56703: LD_ADDR_VAR 0 3
56707: PUSH
56708: LD_VAR 0 1
56712: PPUSH
56713: CALL_OW 310
56717: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56718: LD_VAR 0 1
56722: PPUSH
56723: LD_STRING \
56725: PUSH
56726: LD_INT 0
56728: PUSH
56729: LD_INT 0
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: LD_INT 0
56740: PUSH
56741: LD_INT 0
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: PUSH
56753: LD_STRING E
56755: PUSH
56756: LD_INT 0
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: LD_VAR 0 3
56766: PUSH
56767: LD_INT 0
56769: PUSH
56770: LD_INT 0
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PPUSH
56789: CALL_OW 447
// end ;
56793: LD_VAR 0 2
56797: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56798: LD_INT 0
56800: PPUSH
56801: PPUSH
56802: PPUSH
// tmp := [ ] ;
56803: LD_ADDR_VAR 0 5
56807: PUSH
56808: EMPTY
56809: ST_TO_ADDR
// for i in units do
56810: LD_ADDR_VAR 0 4
56814: PUSH
56815: LD_VAR 0 1
56819: PUSH
56820: FOR_IN
56821: IFFALSE 56859
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56823: LD_ADDR_VAR 0 5
56827: PUSH
56828: LD_VAR 0 5
56832: PPUSH
56833: LD_VAR 0 5
56837: PUSH
56838: LD_INT 1
56840: PLUS
56841: PPUSH
56842: LD_VAR 0 4
56846: PPUSH
56847: CALL_OW 256
56851: PPUSH
56852: CALL_OW 2
56856: ST_TO_ADDR
56857: GO 56820
56859: POP
56860: POP
// if not tmp then
56861: LD_VAR 0 5
56865: NOT
56866: IFFALSE 56870
// exit ;
56868: GO 56918
// if asc then
56870: LD_VAR 0 2
56874: IFFALSE 56898
// result := SortListByListAsc ( units , tmp ) else
56876: LD_ADDR_VAR 0 3
56880: PUSH
56881: LD_VAR 0 1
56885: PPUSH
56886: LD_VAR 0 5
56890: PPUSH
56891: CALL_OW 76
56895: ST_TO_ADDR
56896: GO 56918
// result := SortListByListDesc ( units , tmp ) ;
56898: LD_ADDR_VAR 0 3
56902: PUSH
56903: LD_VAR 0 1
56907: PPUSH
56908: LD_VAR 0 5
56912: PPUSH
56913: CALL_OW 77
56917: ST_TO_ADDR
// end ;
56918: LD_VAR 0 3
56922: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56923: LD_INT 0
56925: PPUSH
56926: PPUSH
// task := GetTaskList ( mech ) ;
56927: LD_ADDR_VAR 0 4
56931: PUSH
56932: LD_VAR 0 1
56936: PPUSH
56937: CALL_OW 437
56941: ST_TO_ADDR
// if not task then
56942: LD_VAR 0 4
56946: NOT
56947: IFFALSE 56951
// exit ;
56949: GO 56995
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56951: LD_ADDR_VAR 0 3
56955: PUSH
56956: LD_VAR 0 4
56960: PUSH
56961: LD_INT 1
56963: ARRAY
56964: PUSH
56965: LD_INT 1
56967: ARRAY
56968: PUSH
56969: LD_STRING r
56971: EQUAL
56972: IFFALSE 56994
56974: PUSH
56975: LD_VAR 0 4
56979: PUSH
56980: LD_INT 1
56982: ARRAY
56983: PUSH
56984: LD_INT 4
56986: ARRAY
56987: PUSH
56988: LD_VAR 0 2
56992: EQUAL
56993: AND
56994: ST_TO_ADDR
// end ;
56995: LD_VAR 0 3
56999: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
57000: LD_INT 0
57002: PPUSH
// SetDir ( unit , d ) ;
57003: LD_VAR 0 1
57007: PPUSH
57008: LD_VAR 0 4
57012: PPUSH
57013: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
57017: LD_ADDR_VAR 0 6
57021: PUSH
57022: LD_VAR 0 1
57026: PPUSH
57027: LD_VAR 0 2
57031: PPUSH
57032: LD_VAR 0 3
57036: PPUSH
57037: LD_VAR 0 5
57041: PPUSH
57042: CALL_OW 48
57046: ST_TO_ADDR
// end ;
57047: LD_VAR 0 6
57051: RET
// export function ToNaturalNumber ( number ) ; begin
57052: LD_INT 0
57054: PPUSH
// result := number div 1 ;
57055: LD_ADDR_VAR 0 2
57059: PUSH
57060: LD_VAR 0 1
57064: PUSH
57065: LD_INT 1
57067: DIV
57068: ST_TO_ADDR
// if number < 0 then
57069: LD_VAR 0 1
57073: PUSH
57074: LD_INT 0
57076: LESS
57077: IFFALSE 57087
// result := 0 ;
57079: LD_ADDR_VAR 0 2
57083: PUSH
57084: LD_INT 0
57086: ST_TO_ADDR
// end ;
57087: LD_VAR 0 2
57091: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
57092: LD_INT 0
57094: PPUSH
57095: PPUSH
57096: PPUSH
// if not buildings then
57097: LD_VAR 0 1
57101: NOT
57102: IFFALSE 57106
// exit ;
57104: GO 57221
// tmp := [ ] ;
57106: LD_ADDR_VAR 0 5
57110: PUSH
57111: EMPTY
57112: ST_TO_ADDR
// for b in buildings do
57113: LD_ADDR_VAR 0 4
57117: PUSH
57118: LD_VAR 0 1
57122: PUSH
57123: FOR_IN
57124: IFFALSE 57162
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
57126: LD_ADDR_VAR 0 5
57130: PUSH
57131: LD_VAR 0 5
57135: PPUSH
57136: LD_VAR 0 5
57140: PUSH
57141: LD_INT 1
57143: PLUS
57144: PPUSH
57145: LD_VAR 0 4
57149: PPUSH
57150: CALL_OW 266
57154: PPUSH
57155: CALL_OW 1
57159: ST_TO_ADDR
57160: GO 57123
57162: POP
57163: POP
// if not tmp then
57164: LD_VAR 0 5
57168: NOT
57169: IFFALSE 57173
// exit ;
57171: GO 57221
// if asc then
57173: LD_VAR 0 2
57177: IFFALSE 57201
// result := SortListByListAsc ( buildings , tmp ) else
57179: LD_ADDR_VAR 0 3
57183: PUSH
57184: LD_VAR 0 1
57188: PPUSH
57189: LD_VAR 0 5
57193: PPUSH
57194: CALL_OW 76
57198: ST_TO_ADDR
57199: GO 57221
// result := SortListByListDesc ( buildings , tmp ) ;
57201: LD_ADDR_VAR 0 3
57205: PUSH
57206: LD_VAR 0 1
57210: PPUSH
57211: LD_VAR 0 5
57215: PPUSH
57216: CALL_OW 77
57220: ST_TO_ADDR
// end ;
57221: LD_VAR 0 3
57225: RET
// export function SortByClass ( units , class ) ; var un ; begin
57226: LD_INT 0
57228: PPUSH
57229: PPUSH
// if not units or not class then
57230: LD_VAR 0 1
57234: NOT
57235: IFTRUE 57244
57237: PUSH
57238: LD_VAR 0 2
57242: NOT
57243: OR
57244: IFFALSE 57248
// exit ;
57246: GO 57343
// result := [ ] ;
57248: LD_ADDR_VAR 0 3
57252: PUSH
57253: EMPTY
57254: ST_TO_ADDR
// for un in units do
57255: LD_ADDR_VAR 0 4
57259: PUSH
57260: LD_VAR 0 1
57264: PUSH
57265: FOR_IN
57266: IFFALSE 57341
// if GetClass ( un ) = class then
57268: LD_VAR 0 4
57272: PPUSH
57273: CALL_OW 257
57277: PUSH
57278: LD_VAR 0 2
57282: EQUAL
57283: IFFALSE 57310
// result := Insert ( result , 1 , un ) else
57285: LD_ADDR_VAR 0 3
57289: PUSH
57290: LD_VAR 0 3
57294: PPUSH
57295: LD_INT 1
57297: PPUSH
57298: LD_VAR 0 4
57302: PPUSH
57303: CALL_OW 2
57307: ST_TO_ADDR
57308: GO 57339
// result := Replace ( result , result + 1 , un ) ;
57310: LD_ADDR_VAR 0 3
57314: PUSH
57315: LD_VAR 0 3
57319: PPUSH
57320: LD_VAR 0 3
57324: PUSH
57325: LD_INT 1
57327: PLUS
57328: PPUSH
57329: LD_VAR 0 4
57333: PPUSH
57334: CALL_OW 1
57338: ST_TO_ADDR
57339: GO 57265
57341: POP
57342: POP
// end ;
57343: LD_VAR 0 3
57347: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
57348: LD_INT 0
57350: PPUSH
57351: PPUSH
57352: PPUSH
57353: PPUSH
57354: PPUSH
57355: PPUSH
57356: PPUSH
// result := [ ] ;
57357: LD_ADDR_VAR 0 4
57361: PUSH
57362: EMPTY
57363: ST_TO_ADDR
// if x - r < 0 then
57364: LD_VAR 0 1
57368: PUSH
57369: LD_VAR 0 3
57373: MINUS
57374: PUSH
57375: LD_INT 0
57377: LESS
57378: IFFALSE 57390
// min_x := 0 else
57380: LD_ADDR_VAR 0 8
57384: PUSH
57385: LD_INT 0
57387: ST_TO_ADDR
57388: GO 57406
// min_x := x - r ;
57390: LD_ADDR_VAR 0 8
57394: PUSH
57395: LD_VAR 0 1
57399: PUSH
57400: LD_VAR 0 3
57404: MINUS
57405: ST_TO_ADDR
// if y - r < 0 then
57406: LD_VAR 0 2
57410: PUSH
57411: LD_VAR 0 3
57415: MINUS
57416: PUSH
57417: LD_INT 0
57419: LESS
57420: IFFALSE 57432
// min_y := 0 else
57422: LD_ADDR_VAR 0 7
57426: PUSH
57427: LD_INT 0
57429: ST_TO_ADDR
57430: GO 57448
// min_y := y - r ;
57432: LD_ADDR_VAR 0 7
57436: PUSH
57437: LD_VAR 0 2
57441: PUSH
57442: LD_VAR 0 3
57446: MINUS
57447: ST_TO_ADDR
// max_x := x + r ;
57448: LD_ADDR_VAR 0 9
57452: PUSH
57453: LD_VAR 0 1
57457: PUSH
57458: LD_VAR 0 3
57462: PLUS
57463: ST_TO_ADDR
// max_y := y + r ;
57464: LD_ADDR_VAR 0 10
57468: PUSH
57469: LD_VAR 0 2
57473: PUSH
57474: LD_VAR 0 3
57478: PLUS
57479: ST_TO_ADDR
// for _x = min_x to max_x do
57480: LD_ADDR_VAR 0 5
57484: PUSH
57485: DOUBLE
57486: LD_VAR 0 8
57490: DEC
57491: ST_TO_ADDR
57492: LD_VAR 0 9
57496: PUSH
57497: FOR_TO
57498: IFFALSE 57599
// for _y = min_y to max_y do
57500: LD_ADDR_VAR 0 6
57504: PUSH
57505: DOUBLE
57506: LD_VAR 0 7
57510: DEC
57511: ST_TO_ADDR
57512: LD_VAR 0 10
57516: PUSH
57517: FOR_TO
57518: IFFALSE 57595
// begin if not ValidHex ( _x , _y ) then
57520: LD_VAR 0 5
57524: PPUSH
57525: LD_VAR 0 6
57529: PPUSH
57530: CALL_OW 488
57534: NOT
57535: IFFALSE 57539
// continue ;
57537: GO 57517
// if GetResourceTypeXY ( _x , _y ) then
57539: LD_VAR 0 5
57543: PPUSH
57544: LD_VAR 0 6
57548: PPUSH
57549: CALL_OW 283
57553: IFFALSE 57593
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
57555: LD_ADDR_VAR 0 4
57559: PUSH
57560: LD_VAR 0 4
57564: PPUSH
57565: LD_VAR 0 4
57569: PUSH
57570: LD_INT 1
57572: PLUS
57573: PPUSH
57574: LD_VAR 0 5
57578: PUSH
57579: LD_VAR 0 6
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PPUSH
57588: CALL_OW 1
57592: ST_TO_ADDR
// end ;
57593: GO 57517
57595: POP
57596: POP
57597: GO 57497
57599: POP
57600: POP
// end ;
57601: LD_VAR 0 4
57605: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
57606: LD_INT 0
57608: PPUSH
57609: PPUSH
57610: PPUSH
57611: PPUSH
57612: PPUSH
57613: PPUSH
57614: PPUSH
57615: PPUSH
// if not units then
57616: LD_VAR 0 1
57620: NOT
57621: IFFALSE 57625
// exit ;
57623: GO 58157
// result := UnitFilter ( units , [ f_ok ] ) ;
57625: LD_ADDR_VAR 0 3
57629: PUSH
57630: LD_VAR 0 1
57634: PPUSH
57635: LD_INT 50
57637: PUSH
57638: EMPTY
57639: LIST
57640: PPUSH
57641: CALL_OW 72
57645: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
57646: LD_ADDR_VAR 0 8
57650: PUSH
57651: LD_VAR 0 1
57655: PUSH
57656: LD_INT 1
57658: ARRAY
57659: PPUSH
57660: CALL_OW 255
57664: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
57665: LD_ADDR_VAR 0 10
57669: PUSH
57670: LD_INT 29
57672: PUSH
57673: LD_INT 91
57675: PUSH
57676: LD_INT 49
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: LIST
57683: ST_TO_ADDR
// if not result then
57684: LD_VAR 0 3
57688: NOT
57689: IFFALSE 57693
// exit ;
57691: GO 58157
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
57693: LD_ADDR_VAR 0 5
57697: PUSH
57698: LD_INT 81
57700: PUSH
57701: LD_VAR 0 8
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PPUSH
57710: CALL_OW 69
57714: ST_TO_ADDR
// for i in result do
57715: LD_ADDR_VAR 0 4
57719: PUSH
57720: LD_VAR 0 3
57724: PUSH
57725: FOR_IN
57726: IFFALSE 58155
// begin tag := GetTag ( i ) + 1 ;
57728: LD_ADDR_VAR 0 9
57732: PUSH
57733: LD_VAR 0 4
57737: PPUSH
57738: CALL_OW 110
57742: PUSH
57743: LD_INT 1
57745: PLUS
57746: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
57747: LD_ADDR_VAR 0 7
57751: PUSH
57752: LD_VAR 0 4
57756: PPUSH
57757: CALL_OW 250
57761: PPUSH
57762: LD_VAR 0 4
57766: PPUSH
57767: CALL_OW 251
57771: PPUSH
57772: LD_INT 4
57774: PPUSH
57775: CALL 57348 0 3
57779: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
57780: LD_VAR 0 4
57784: PPUSH
57785: CALL_OW 247
57789: PUSH
57790: LD_INT 2
57792: EQUAL
57793: IFFALSE 57805
57795: PUSH
57796: LD_VAR 0 7
57800: PUSH
57801: LD_INT 2
57803: GREATER
57804: AND
57805: IFFALSE 57825
57807: PUSH
57808: LD_VAR 0 4
57812: PPUSH
57813: CALL_OW 264
57817: PUSH
57818: LD_VAR 0 10
57822: IN
57823: NOT
57824: AND
57825: IFFALSE 57864
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57827: LD_VAR 0 4
57831: PPUSH
57832: LD_VAR 0 7
57836: PUSH
57837: LD_INT 1
57839: ARRAY
57840: PUSH
57841: LD_INT 1
57843: ARRAY
57844: PPUSH
57845: LD_VAR 0 7
57849: PUSH
57850: LD_INT 1
57852: ARRAY
57853: PUSH
57854: LD_INT 2
57856: ARRAY
57857: PPUSH
57858: CALL_OW 116
57862: GO 58153
// if path > tag then
57864: LD_VAR 0 2
57868: PUSH
57869: LD_VAR 0 9
57873: GREATER
57874: IFFALSE 58082
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
57876: LD_ADDR_VAR 0 6
57880: PUSH
57881: LD_VAR 0 5
57885: PPUSH
57886: LD_INT 91
57888: PUSH
57889: LD_VAR 0 4
57893: PUSH
57894: LD_INT 8
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: LIST
57901: PPUSH
57902: CALL_OW 72
57906: ST_TO_ADDR
// if nearEnemy then
57907: LD_VAR 0 6
57911: IFFALSE 57980
// begin if GetWeapon ( i ) = ru_time_lapser then
57913: LD_VAR 0 4
57917: PPUSH
57918: CALL_OW 264
57922: PUSH
57923: LD_INT 49
57925: EQUAL
57926: IFFALSE 57954
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57928: LD_VAR 0 4
57932: PPUSH
57933: LD_VAR 0 6
57937: PPUSH
57938: LD_VAR 0 4
57942: PPUSH
57943: CALL_OW 74
57947: PPUSH
57948: CALL_OW 112
57952: GO 57978
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57954: LD_VAR 0 4
57958: PPUSH
57959: LD_VAR 0 6
57963: PPUSH
57964: LD_VAR 0 4
57968: PPUSH
57969: CALL_OW 74
57973: PPUSH
57974: CALL 59238 0 2
// end else
57978: GO 58080
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57980: LD_VAR 0 4
57984: PPUSH
57985: LD_VAR 0 2
57989: PUSH
57990: LD_VAR 0 9
57994: ARRAY
57995: PUSH
57996: LD_INT 1
57998: ARRAY
57999: PPUSH
58000: LD_VAR 0 2
58004: PUSH
58005: LD_VAR 0 9
58009: ARRAY
58010: PUSH
58011: LD_INT 2
58013: ARRAY
58014: PPUSH
58015: CALL_OW 297
58019: PUSH
58020: LD_INT 6
58022: GREATER
58023: IFFALSE 58066
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
58025: LD_VAR 0 4
58029: PPUSH
58030: LD_VAR 0 2
58034: PUSH
58035: LD_VAR 0 9
58039: ARRAY
58040: PUSH
58041: LD_INT 1
58043: ARRAY
58044: PPUSH
58045: LD_VAR 0 2
58049: PUSH
58050: LD_VAR 0 9
58054: ARRAY
58055: PUSH
58056: LD_INT 2
58058: ARRAY
58059: PPUSH
58060: CALL_OW 114
58064: GO 58080
// SetTag ( i , tag ) ;
58066: LD_VAR 0 4
58070: PPUSH
58071: LD_VAR 0 9
58075: PPUSH
58076: CALL_OW 109
// end else
58080: GO 58153
// if enemy then
58082: LD_VAR 0 5
58086: IFFALSE 58153
// begin if GetWeapon ( i ) = ru_time_lapser then
58088: LD_VAR 0 4
58092: PPUSH
58093: CALL_OW 264
58097: PUSH
58098: LD_INT 49
58100: EQUAL
58101: IFFALSE 58129
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
58103: LD_VAR 0 4
58107: PPUSH
58108: LD_VAR 0 5
58112: PPUSH
58113: LD_VAR 0 4
58117: PPUSH
58118: CALL_OW 74
58122: PPUSH
58123: CALL_OW 112
58127: GO 58153
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
58129: LD_VAR 0 4
58133: PPUSH
58134: LD_VAR 0 5
58138: PPUSH
58139: LD_VAR 0 4
58143: PPUSH
58144: CALL_OW 74
58148: PPUSH
58149: CALL 59238 0 2
// end ; end ;
58153: GO 57725
58155: POP
58156: POP
// end ;
58157: LD_VAR 0 3
58161: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
58162: LD_INT 0
58164: PPUSH
58165: PPUSH
58166: PPUSH
// if not unit or IsInUnit ( unit ) then
58167: LD_VAR 0 1
58171: NOT
58172: IFTRUE 58185
58174: PUSH
58175: LD_VAR 0 1
58179: PPUSH
58180: CALL_OW 310
58184: OR
58185: IFFALSE 58189
// exit ;
58187: GO 58280
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
58189: LD_ADDR_VAR 0 4
58193: PUSH
58194: LD_VAR 0 1
58198: PPUSH
58199: CALL_OW 250
58203: PPUSH
58204: LD_VAR 0 2
58208: PPUSH
58209: LD_INT 1
58211: PPUSH
58212: CALL_OW 272
58216: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
58217: LD_ADDR_VAR 0 5
58221: PUSH
58222: LD_VAR 0 1
58226: PPUSH
58227: CALL_OW 251
58231: PPUSH
58232: LD_VAR 0 2
58236: PPUSH
58237: LD_INT 1
58239: PPUSH
58240: CALL_OW 273
58244: ST_TO_ADDR
// if ValidHex ( x , y ) then
58245: LD_VAR 0 4
58249: PPUSH
58250: LD_VAR 0 5
58254: PPUSH
58255: CALL_OW 488
58259: IFFALSE 58280
// ComTurnXY ( unit , x , y ) ;
58261: LD_VAR 0 1
58265: PPUSH
58266: LD_VAR 0 4
58270: PPUSH
58271: LD_VAR 0 5
58275: PPUSH
58276: CALL_OW 118
// end ;
58280: LD_VAR 0 3
58284: RET
// export function SeeUnits ( side , units ) ; var i ; begin
58285: LD_INT 0
58287: PPUSH
58288: PPUSH
// result := false ;
58289: LD_ADDR_VAR 0 3
58293: PUSH
58294: LD_INT 0
58296: ST_TO_ADDR
// if not units then
58297: LD_VAR 0 2
58301: NOT
58302: IFFALSE 58306
// exit ;
58304: GO 58351
// for i in units do
58306: LD_ADDR_VAR 0 4
58310: PUSH
58311: LD_VAR 0 2
58315: PUSH
58316: FOR_IN
58317: IFFALSE 58349
// if See ( side , i ) then
58319: LD_VAR 0 1
58323: PPUSH
58324: LD_VAR 0 4
58328: PPUSH
58329: CALL_OW 292
58333: IFFALSE 58347
// begin result := true ;
58335: LD_ADDR_VAR 0 3
58339: PUSH
58340: LD_INT 1
58342: ST_TO_ADDR
// exit ;
58343: POP
58344: POP
58345: GO 58351
// end ;
58347: GO 58316
58349: POP
58350: POP
// end ;
58351: LD_VAR 0 3
58355: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
58356: LD_INT 0
58358: PPUSH
58359: PPUSH
58360: PPUSH
58361: PPUSH
// if not unit or not points then
58362: LD_VAR 0 1
58366: NOT
58367: IFTRUE 58376
58369: PUSH
58370: LD_VAR 0 2
58374: NOT
58375: OR
58376: IFFALSE 58380
// exit ;
58378: GO 58470
// dist := 99999 ;
58380: LD_ADDR_VAR 0 5
58384: PUSH
58385: LD_INT 99999
58387: ST_TO_ADDR
// for i in points do
58388: LD_ADDR_VAR 0 4
58392: PUSH
58393: LD_VAR 0 2
58397: PUSH
58398: FOR_IN
58399: IFFALSE 58468
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
58401: LD_ADDR_VAR 0 6
58405: PUSH
58406: LD_VAR 0 1
58410: PPUSH
58411: LD_VAR 0 4
58415: PUSH
58416: LD_INT 1
58418: ARRAY
58419: PPUSH
58420: LD_VAR 0 4
58424: PUSH
58425: LD_INT 2
58427: ARRAY
58428: PPUSH
58429: CALL_OW 297
58433: ST_TO_ADDR
// if tmpDist < dist then
58434: LD_VAR 0 6
58438: PUSH
58439: LD_VAR 0 5
58443: LESS
58444: IFFALSE 58466
// begin result := i ;
58446: LD_ADDR_VAR 0 3
58450: PUSH
58451: LD_VAR 0 4
58455: ST_TO_ADDR
// dist := tmpDist ;
58456: LD_ADDR_VAR 0 5
58460: PUSH
58461: LD_VAR 0 6
58465: ST_TO_ADDR
// end ; end ;
58466: GO 58398
58468: POP
58469: POP
// end ;
58470: LD_VAR 0 3
58474: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
58475: LD_INT 0
58477: PPUSH
// uc_side := side ;
58478: LD_ADDR_OWVAR 20
58482: PUSH
58483: LD_VAR 0 1
58487: ST_TO_ADDR
// uc_nation := 3 ;
58488: LD_ADDR_OWVAR 21
58492: PUSH
58493: LD_INT 3
58495: ST_TO_ADDR
// vc_chassis := 25 ;
58496: LD_ADDR_OWVAR 37
58500: PUSH
58501: LD_INT 25
58503: ST_TO_ADDR
// vc_engine := engine_siberite ;
58504: LD_ADDR_OWVAR 39
58508: PUSH
58509: LD_INT 3
58511: ST_TO_ADDR
// vc_control := control_computer ;
58512: LD_ADDR_OWVAR 38
58516: PUSH
58517: LD_INT 3
58519: ST_TO_ADDR
// vc_weapon := 59 ;
58520: LD_ADDR_OWVAR 40
58524: PUSH
58525: LD_INT 59
58527: ST_TO_ADDR
// result := CreateVehicle ;
58528: LD_ADDR_VAR 0 5
58532: PUSH
58533: CALL_OW 45
58537: ST_TO_ADDR
// SetDir ( result , d ) ;
58538: LD_VAR 0 5
58542: PPUSH
58543: LD_VAR 0 4
58547: PPUSH
58548: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
58552: LD_VAR 0 5
58556: PPUSH
58557: LD_VAR 0 2
58561: PPUSH
58562: LD_VAR 0 3
58566: PPUSH
58567: LD_INT 0
58569: PPUSH
58570: CALL_OW 48
// end ;
58574: LD_VAR 0 5
58578: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
58579: LD_INT 0
58581: PPUSH
58582: PPUSH
58583: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
58584: LD_ADDR_VAR 0 2
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: LD_INT 0
58594: PUSH
58595: LD_INT 0
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
58607: LD_VAR 0 1
58611: NOT
58612: IFTRUE 58645
58614: PUSH
58615: LD_VAR 0 1
58619: PPUSH
58620: CALL_OW 264
58624: PUSH
58625: LD_INT 12
58627: PUSH
58628: LD_INT 51
58630: PUSH
58631: LD_INT 32
58633: PUSH
58634: LD_INT 89
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: IN
58643: NOT
58644: OR
58645: IFFALSE 58649
// exit ;
58647: GO 58747
// for i := 1 to 3 do
58649: LD_ADDR_VAR 0 3
58653: PUSH
58654: DOUBLE
58655: LD_INT 1
58657: DEC
58658: ST_TO_ADDR
58659: LD_INT 3
58661: PUSH
58662: FOR_TO
58663: IFFALSE 58745
// begin tmp := GetCargo ( cargo , i ) ;
58665: LD_ADDR_VAR 0 4
58669: PUSH
58670: LD_VAR 0 1
58674: PPUSH
58675: LD_VAR 0 3
58679: PPUSH
58680: CALL_OW 289
58684: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
58685: LD_ADDR_VAR 0 2
58689: PUSH
58690: LD_VAR 0 2
58694: PPUSH
58695: LD_VAR 0 3
58699: PPUSH
58700: LD_VAR 0 4
58704: PPUSH
58705: CALL_OW 1
58709: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
58710: LD_ADDR_VAR 0 2
58714: PUSH
58715: LD_VAR 0 2
58719: PPUSH
58720: LD_INT 4
58722: PPUSH
58723: LD_VAR 0 2
58727: PUSH
58728: LD_INT 4
58730: ARRAY
58731: PUSH
58732: LD_VAR 0 4
58736: PLUS
58737: PPUSH
58738: CALL_OW 1
58742: ST_TO_ADDR
// end ;
58743: GO 58662
58745: POP
58746: POP
// end ;
58747: LD_VAR 0 2
58751: RET
// export function Length ( array ) ; begin
58752: LD_INT 0
58754: PPUSH
// result := array + 0 ;
58755: LD_ADDR_VAR 0 2
58759: PUSH
58760: LD_VAR 0 1
58764: PUSH
58765: LD_INT 0
58767: PLUS
58768: ST_TO_ADDR
// end ;
58769: LD_VAR 0 2
58773: RET
// export function PrepareArray ( array ) ; begin
58774: LD_INT 0
58776: PPUSH
// result := array diff 0 ;
58777: LD_ADDR_VAR 0 2
58781: PUSH
58782: LD_VAR 0 1
58786: PUSH
58787: LD_INT 0
58789: DIFF
58790: ST_TO_ADDR
// if not result [ 1 ] then
58791: LD_VAR 0 2
58795: PUSH
58796: LD_INT 1
58798: ARRAY
58799: NOT
58800: IFFALSE 58820
// result := Delete ( result , 1 ) ;
58802: LD_ADDR_VAR 0 2
58806: PUSH
58807: LD_VAR 0 2
58811: PPUSH
58812: LD_INT 1
58814: PPUSH
58815: CALL_OW 3
58819: ST_TO_ADDR
// end ;
58820: LD_VAR 0 2
58824: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
58825: LD_INT 0
58827: PPUSH
58828: PPUSH
58829: PPUSH
58830: PPUSH
// sibRocketRange := 25 ;
58831: LD_ADDR_VAR 0 6
58835: PUSH
58836: LD_INT 25
58838: ST_TO_ADDR
// result := false ;
58839: LD_ADDR_VAR 0 4
58843: PUSH
58844: LD_INT 0
58846: ST_TO_ADDR
// for i := 0 to 5 do
58847: LD_ADDR_VAR 0 5
58851: PUSH
58852: DOUBLE
58853: LD_INT 0
58855: DEC
58856: ST_TO_ADDR
58857: LD_INT 5
58859: PUSH
58860: FOR_TO
58861: IFFALSE 58928
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
58863: LD_VAR 0 1
58867: PPUSH
58868: LD_VAR 0 5
58872: PPUSH
58873: LD_VAR 0 6
58877: PPUSH
58878: CALL_OW 272
58882: PPUSH
58883: LD_VAR 0 2
58887: PPUSH
58888: LD_VAR 0 5
58892: PPUSH
58893: LD_VAR 0 6
58897: PPUSH
58898: CALL_OW 273
58902: PPUSH
58903: LD_VAR 0 3
58907: PPUSH
58908: CALL_OW 309
58912: IFFALSE 58926
// begin result := true ;
58914: LD_ADDR_VAR 0 4
58918: PUSH
58919: LD_INT 1
58921: ST_TO_ADDR
// exit ;
58922: POP
58923: POP
58924: GO 58930
// end ;
58926: GO 58860
58928: POP
58929: POP
// end ;
58930: LD_VAR 0 4
58934: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
58935: LD_INT 0
58937: PPUSH
58938: PPUSH
58939: PPUSH
// if btype = b_depot then
58940: LD_VAR 0 2
58944: PUSH
58945: LD_INT 0
58947: EQUAL
58948: IFFALSE 58960
// begin result := true ;
58950: LD_ADDR_VAR 0 3
58954: PUSH
58955: LD_INT 1
58957: ST_TO_ADDR
// exit ;
58958: GO 59080
// end ; pom := GetBase ( depot ) ;
58960: LD_ADDR_VAR 0 4
58964: PUSH
58965: LD_VAR 0 1
58969: PPUSH
58970: CALL_OW 274
58974: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
58975: LD_ADDR_VAR 0 5
58979: PUSH
58980: LD_VAR 0 2
58984: PPUSH
58985: LD_VAR 0 1
58989: PPUSH
58990: CALL_OW 248
58994: PPUSH
58995: CALL_OW 450
58999: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
59000: LD_ADDR_VAR 0 3
59004: PUSH
59005: LD_VAR 0 4
59009: PPUSH
59010: LD_INT 1
59012: PPUSH
59013: CALL_OW 275
59017: PUSH
59018: LD_VAR 0 5
59022: PUSH
59023: LD_INT 1
59025: ARRAY
59026: GREATEREQUAL
59027: IFFALSE 59053
59029: PUSH
59030: LD_VAR 0 4
59034: PPUSH
59035: LD_INT 2
59037: PPUSH
59038: CALL_OW 275
59042: PUSH
59043: LD_VAR 0 5
59047: PUSH
59048: LD_INT 2
59050: ARRAY
59051: GREATEREQUAL
59052: AND
59053: IFFALSE 59079
59055: PUSH
59056: LD_VAR 0 4
59060: PPUSH
59061: LD_INT 3
59063: PPUSH
59064: CALL_OW 275
59068: PUSH
59069: LD_VAR 0 5
59073: PUSH
59074: LD_INT 3
59076: ARRAY
59077: GREATEREQUAL
59078: AND
59079: ST_TO_ADDR
// end ;
59080: LD_VAR 0 3
59084: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
59085: LD_INT 0
59087: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
59088: LD_VAR 0 1
59092: PPUSH
59093: LD_VAR 0 2
59097: PPUSH
59098: LD_INT 0
59100: PPUSH
59101: LD_INT 0
59103: PPUSH
59104: LD_INT 1
59106: PPUSH
59107: LD_INT 0
59109: PPUSH
59110: CALL_OW 587
// end ;
59114: LD_VAR 0 3
59118: RET
// export function CenterOnNow ( unit ) ; begin
59119: LD_INT 0
59121: PPUSH
// result := IsInUnit ( unit ) ;
59122: LD_ADDR_VAR 0 2
59126: PUSH
59127: LD_VAR 0 1
59131: PPUSH
59132: CALL_OW 310
59136: ST_TO_ADDR
// if not result then
59137: LD_VAR 0 2
59141: NOT
59142: IFFALSE 59154
// result := unit ;
59144: LD_ADDR_VAR 0 2
59148: PUSH
59149: LD_VAR 0 1
59153: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
59154: LD_VAR 0 1
59158: PPUSH
59159: CALL_OW 87
// end ;
59163: LD_VAR 0 2
59167: RET
// export function ComMoveHex ( unit , hex ) ; begin
59168: LD_INT 0
59170: PPUSH
// if not hex then
59171: LD_VAR 0 2
59175: NOT
59176: IFFALSE 59180
// exit ;
59178: GO 59233
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
59180: LD_VAR 0 2
59184: PUSH
59185: LD_INT 1
59187: ARRAY
59188: PPUSH
59189: LD_VAR 0 2
59193: PUSH
59194: LD_INT 2
59196: ARRAY
59197: PPUSH
59198: CALL_OW 428
59202: IFFALSE 59206
// exit ;
59204: GO 59233
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
59206: LD_VAR 0 1
59210: PPUSH
59211: LD_VAR 0 2
59215: PUSH
59216: LD_INT 1
59218: ARRAY
59219: PPUSH
59220: LD_VAR 0 2
59224: PUSH
59225: LD_INT 2
59227: ARRAY
59228: PPUSH
59229: CALL_OW 111
// end ;
59233: LD_VAR 0 3
59237: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
59238: LD_INT 0
59240: PPUSH
59241: PPUSH
59242: PPUSH
// if not unit or not enemy then
59243: LD_VAR 0 1
59247: NOT
59248: IFTRUE 59257
59250: PUSH
59251: LD_VAR 0 2
59255: NOT
59256: OR
59257: IFFALSE 59261
// exit ;
59259: GO 59387
// x := GetX ( enemy ) ;
59261: LD_ADDR_VAR 0 4
59265: PUSH
59266: LD_VAR 0 2
59270: PPUSH
59271: CALL_OW 250
59275: ST_TO_ADDR
// y := GetY ( enemy ) ;
59276: LD_ADDR_VAR 0 5
59280: PUSH
59281: LD_VAR 0 2
59285: PPUSH
59286: CALL_OW 251
59290: ST_TO_ADDR
// if ValidHex ( x , y ) then
59291: LD_VAR 0 4
59295: PPUSH
59296: LD_VAR 0 5
59300: PPUSH
59301: CALL_OW 488
59305: IFFALSE 59387
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
59307: LD_VAR 0 2
59311: PPUSH
59312: CALL_OW 247
59316: PUSH
59317: LD_INT 3
59319: PUSH
59320: LD_INT 2
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: IN
59327: IFTRUE 59350
59329: PUSH
59330: LD_VAR 0 1
59334: PPUSH
59335: CALL_OW 255
59339: PPUSH
59340: LD_VAR 0 2
59344: PPUSH
59345: CALL_OW 292
59349: OR
59350: IFFALSE 59368
// ComAttackUnit ( unit , enemy ) else
59352: LD_VAR 0 1
59356: PPUSH
59357: LD_VAR 0 2
59361: PPUSH
59362: CALL_OW 115
59366: GO 59387
// ComAgressiveMove ( unit , x , y ) ;
59368: LD_VAR 0 1
59372: PPUSH
59373: LD_VAR 0 4
59377: PPUSH
59378: LD_VAR 0 5
59382: PPUSH
59383: CALL_OW 114
// end ;
59387: LD_VAR 0 3
59391: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
59392: LD_INT 0
59394: PPUSH
59395: PPUSH
59396: PPUSH
// list := AreaToList ( area , 0 ) ;
59397: LD_ADDR_VAR 0 5
59401: PUSH
59402: LD_VAR 0 1
59406: PPUSH
59407: LD_INT 0
59409: PPUSH
59410: CALL_OW 517
59414: ST_TO_ADDR
// if not list then
59415: LD_VAR 0 5
59419: NOT
59420: IFFALSE 59424
// exit ;
59422: GO 59554
// if all then
59424: LD_VAR 0 2
59428: IFFALSE 59516
// begin for i := 1 to list [ 1 ] do
59430: LD_ADDR_VAR 0 4
59434: PUSH
59435: DOUBLE
59436: LD_INT 1
59438: DEC
59439: ST_TO_ADDR
59440: LD_VAR 0 5
59444: PUSH
59445: LD_INT 1
59447: ARRAY
59448: PUSH
59449: FOR_TO
59450: IFFALSE 59512
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
59452: LD_ADDR_VAR 0 3
59456: PUSH
59457: LD_VAR 0 3
59461: PPUSH
59462: LD_VAR 0 3
59466: PUSH
59467: LD_INT 1
59469: PLUS
59470: PPUSH
59471: LD_VAR 0 5
59475: PUSH
59476: LD_INT 1
59478: ARRAY
59479: PUSH
59480: LD_VAR 0 4
59484: ARRAY
59485: PUSH
59486: LD_VAR 0 5
59490: PUSH
59491: LD_INT 2
59493: ARRAY
59494: PUSH
59495: LD_VAR 0 4
59499: ARRAY
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PPUSH
59505: CALL_OW 1
59509: ST_TO_ADDR
59510: GO 59449
59512: POP
59513: POP
// exit ;
59514: GO 59554
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
59516: LD_ADDR_VAR 0 3
59520: PUSH
59521: LD_VAR 0 5
59525: PUSH
59526: LD_INT 1
59528: ARRAY
59529: PUSH
59530: LD_INT 1
59532: ARRAY
59533: PUSH
59534: LD_VAR 0 5
59538: PUSH
59539: LD_INT 2
59541: ARRAY
59542: PUSH
59543: LD_INT 1
59545: ARRAY
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: EMPTY
59552: LIST
59553: ST_TO_ADDR
// end ;
59554: LD_VAR 0 3
59558: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
59559: LD_INT 0
59561: PPUSH
59562: PPUSH
// list := AreaToList ( area , 0 ) ;
59563: LD_ADDR_VAR 0 4
59567: PUSH
59568: LD_VAR 0 1
59572: PPUSH
59573: LD_INT 0
59575: PPUSH
59576: CALL_OW 517
59580: ST_TO_ADDR
// if not list then
59581: LD_VAR 0 4
59585: NOT
59586: IFFALSE 59590
// exit ;
59588: GO 59631
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
59590: LD_ADDR_VAR 0 3
59594: PUSH
59595: LD_VAR 0 4
59599: PUSH
59600: LD_INT 1
59602: ARRAY
59603: PUSH
59604: LD_INT 1
59606: ARRAY
59607: PUSH
59608: LD_VAR 0 4
59612: PUSH
59613: LD_INT 2
59615: ARRAY
59616: PUSH
59617: LD_INT 1
59619: ARRAY
59620: PUSH
59621: LD_VAR 0 2
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: LIST
59630: ST_TO_ADDR
// end ;
59631: LD_VAR 0 3
59635: RET
// export function First ( array ) ; begin
59636: LD_INT 0
59638: PPUSH
// if not array then
59639: LD_VAR 0 1
59643: NOT
59644: IFFALSE 59648
// exit ;
59646: GO 59662
// result := array [ 1 ] ;
59648: LD_ADDR_VAR 0 2
59652: PUSH
59653: LD_VAR 0 1
59657: PUSH
59658: LD_INT 1
59660: ARRAY
59661: ST_TO_ADDR
// end ;
59662: LD_VAR 0 2
59666: RET
// export function Last ( array ) ; begin
59667: LD_INT 0
59669: PPUSH
// if not array then
59670: LD_VAR 0 1
59674: NOT
59675: IFFALSE 59679
// exit ;
59677: GO 59695
// result := array [ array ] ;
59679: LD_ADDR_VAR 0 2
59683: PUSH
59684: LD_VAR 0 1
59688: PUSH
59689: LD_VAR 0 1
59693: ARRAY
59694: ST_TO_ADDR
// end ;
59695: LD_VAR 0 2
59699: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
59700: LD_INT 0
59702: PPUSH
59703: PPUSH
// result := [ ] ;
59704: LD_ADDR_VAR 0 5
59708: PUSH
59709: EMPTY
59710: ST_TO_ADDR
// if not array then
59711: LD_VAR 0 1
59715: NOT
59716: IFFALSE 59720
// exit ;
59718: GO 59832
// for i := 1 to array do
59720: LD_ADDR_VAR 0 6
59724: PUSH
59725: DOUBLE
59726: LD_INT 1
59728: DEC
59729: ST_TO_ADDR
59730: LD_VAR 0 1
59734: PUSH
59735: FOR_TO
59736: IFFALSE 59830
// if array [ i ] [ index ] = value then
59738: LD_VAR 0 1
59742: PUSH
59743: LD_VAR 0 6
59747: ARRAY
59748: PUSH
59749: LD_VAR 0 2
59753: ARRAY
59754: PUSH
59755: LD_VAR 0 3
59759: EQUAL
59760: IFFALSE 59828
// begin if indexColumn then
59762: LD_VAR 0 4
59766: IFFALSE 59802
// result := Join ( result , array [ i ] [ indexColumn ] ) else
59768: LD_ADDR_VAR 0 5
59772: PUSH
59773: LD_VAR 0 5
59777: PPUSH
59778: LD_VAR 0 1
59782: PUSH
59783: LD_VAR 0 6
59787: ARRAY
59788: PUSH
59789: LD_VAR 0 4
59793: ARRAY
59794: PPUSH
59795: CALL 54840 0 2
59799: ST_TO_ADDR
59800: GO 59828
// result := Join ( result , array [ i ] ) ;
59802: LD_ADDR_VAR 0 5
59806: PUSH
59807: LD_VAR 0 5
59811: PPUSH
59812: LD_VAR 0 1
59816: PUSH
59817: LD_VAR 0 6
59821: ARRAY
59822: PPUSH
59823: CALL 54840 0 2
59827: ST_TO_ADDR
// end ;
59828: GO 59735
59830: POP
59831: POP
// end ;
59832: LD_VAR 0 5
59836: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
59837: LD_INT 0
59839: PPUSH
// if not vehicles or not parkingPoint then
59840: LD_VAR 0 1
59844: NOT
59845: IFTRUE 59854
59847: PUSH
59848: LD_VAR 0 2
59852: NOT
59853: OR
59854: IFFALSE 59858
// exit ;
59856: GO 59956
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
59858: LD_ADDR_VAR 0 1
59862: PUSH
59863: LD_VAR 0 1
59867: PPUSH
59868: LD_INT 50
59870: PUSH
59871: EMPTY
59872: LIST
59873: PUSH
59874: LD_INT 3
59876: PUSH
59877: LD_INT 92
59879: PUSH
59880: LD_VAR 0 2
59884: PUSH
59885: LD_INT 1
59887: ARRAY
59888: PUSH
59889: LD_VAR 0 2
59893: PUSH
59894: LD_INT 2
59896: ARRAY
59897: PUSH
59898: LD_INT 8
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PPUSH
59915: CALL_OW 72
59919: ST_TO_ADDR
// if not vehicles then
59920: LD_VAR 0 1
59924: NOT
59925: IFFALSE 59929
// exit ;
59927: GO 59956
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
59929: LD_VAR 0 1
59933: PPUSH
59934: LD_VAR 0 2
59938: PUSH
59939: LD_INT 1
59941: ARRAY
59942: PPUSH
59943: LD_VAR 0 2
59947: PUSH
59948: LD_INT 2
59950: ARRAY
59951: PPUSH
59952: CALL_OW 111
// end ;
59956: LD_VAR 0 3
59960: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
59961: LD_INT 0
59963: PPUSH
59964: PPUSH
59965: PPUSH
// if not side or not area then
59966: LD_VAR 0 1
59970: NOT
59971: IFTRUE 59980
59973: PUSH
59974: LD_VAR 0 2
59978: NOT
59979: OR
59980: IFFALSE 59984
// exit ;
59982: GO 60103
// tmp := AreaToList ( area , 0 ) ;
59984: LD_ADDR_VAR 0 5
59988: PUSH
59989: LD_VAR 0 2
59993: PPUSH
59994: LD_INT 0
59996: PPUSH
59997: CALL_OW 517
60001: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
60002: LD_ADDR_VAR 0 4
60006: PUSH
60007: DOUBLE
60008: LD_INT 1
60010: DEC
60011: ST_TO_ADDR
60012: LD_VAR 0 5
60016: PUSH
60017: LD_INT 1
60019: ARRAY
60020: PUSH
60021: FOR_TO
60022: IFFALSE 60101
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
60024: LD_VAR 0 5
60028: PUSH
60029: LD_INT 1
60031: ARRAY
60032: PUSH
60033: LD_VAR 0 4
60037: ARRAY
60038: PPUSH
60039: LD_VAR 0 5
60043: PUSH
60044: LD_INT 2
60046: ARRAY
60047: PUSH
60048: LD_VAR 0 4
60052: ARRAY
60053: PPUSH
60054: CALL_OW 351
60058: IFFALSE 60099
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
60060: LD_VAR 0 5
60064: PUSH
60065: LD_INT 1
60067: ARRAY
60068: PUSH
60069: LD_VAR 0 4
60073: ARRAY
60074: PPUSH
60075: LD_VAR 0 5
60079: PUSH
60080: LD_INT 2
60082: ARRAY
60083: PUSH
60084: LD_VAR 0 4
60088: ARRAY
60089: PPUSH
60090: LD_VAR 0 1
60094: PPUSH
60095: CALL_OW 244
// end ;
60099: GO 60021
60101: POP
60102: POP
// end ;
60103: LD_VAR 0 3
60107: RET
// export function UniqueArray ( array ) ; var i ; begin
60108: LD_INT 0
60110: PPUSH
60111: PPUSH
// result := [ ] ;
60112: LD_ADDR_VAR 0 2
60116: PUSH
60117: EMPTY
60118: ST_TO_ADDR
// if not array then
60119: LD_VAR 0 1
60123: NOT
60124: IFFALSE 60128
// exit ;
60126: GO 60189
// for i := 1 to array do
60128: LD_ADDR_VAR 0 3
60132: PUSH
60133: DOUBLE
60134: LD_INT 1
60136: DEC
60137: ST_TO_ADDR
60138: LD_VAR 0 1
60142: PUSH
60143: FOR_TO
60144: IFFALSE 60187
// if not array [ i ] in result then
60146: LD_VAR 0 1
60150: PUSH
60151: LD_VAR 0 3
60155: ARRAY
60156: PUSH
60157: LD_VAR 0 2
60161: IN
60162: NOT
60163: IFFALSE 60185
// result := Join ( result , i ) ;
60165: LD_ADDR_VAR 0 2
60169: PUSH
60170: LD_VAR 0 2
60174: PPUSH
60175: LD_VAR 0 3
60179: PPUSH
60180: CALL 54840 0 2
60184: ST_TO_ADDR
60185: GO 60143
60187: POP
60188: POP
// end ; end_of_file
60189: LD_VAR 0 2
60193: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
60194: LD_VAR 0 1
60198: PUSH
60199: LD_INT 200
60201: DOUBLE
60202: GREATEREQUAL
60203: IFFALSE 60211
60205: LD_INT 299
60207: DOUBLE
60208: LESSEQUAL
60209: IFTRUE 60213
60211: GO 60245
60213: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
60214: LD_VAR 0 1
60218: PPUSH
60219: LD_VAR 0 2
60223: PPUSH
60224: LD_VAR 0 3
60228: PPUSH
60229: LD_VAR 0 4
60233: PPUSH
60234: LD_VAR 0 5
60238: PPUSH
60239: CALL 61026 0 5
60243: GO 60322
60245: LD_INT 300
60247: DOUBLE
60248: GREATEREQUAL
60249: IFFALSE 60257
60251: LD_INT 399
60253: DOUBLE
60254: LESSEQUAL
60255: IFTRUE 60259
60257: GO 60321
60259: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
60260: LD_VAR 0 1
60264: PPUSH
60265: LD_VAR 0 2
60269: PPUSH
60270: LD_VAR 0 3
60274: PPUSH
60275: LD_VAR 0 4
60279: PPUSH
60280: LD_VAR 0 5
60284: PPUSH
60285: LD_VAR 0 6
60289: PPUSH
60290: LD_VAR 0 7
60294: PPUSH
60295: LD_VAR 0 8
60299: PPUSH
60300: LD_VAR 0 9
60304: PPUSH
60305: LD_VAR 0 10
60309: PPUSH
60310: LD_VAR 0 11
60314: PPUSH
60315: CALL 79192 0 11
60319: GO 60322
60321: POP
// end ;
60322: PPOPN 11
60324: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
60325: LD_VAR 0 1
60329: PPUSH
60330: LD_VAR 0 2
60334: PPUSH
60335: LD_VAR 0 3
60339: PPUSH
60340: LD_VAR 0 4
60344: PPUSH
60345: LD_VAR 0 5
60349: PPUSH
60350: CALL 60407 0 5
// end ; end_of_file
60354: PPOPN 5
60356: END
// export function SOS_UnitDestroyed ( un ) ; begin
60357: LD_INT 0
60359: PPUSH
// ComRadiation ( un ) ;
60360: LD_VAR 0 1
60364: PPUSH
60365: CALL 61446 0 1
// end ;
60369: LD_VAR 0 2
60373: RET
// export function SOS_UnitKamikazed ( un ) ; begin
60374: LD_INT 0
60376: PPUSH
// ComRadiation ( un ) ;
60377: LD_VAR 0 1
60381: PPUSH
60382: CALL 61446 0 1
// end ;
60386: LD_VAR 0 2
60390: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
60391: LD_INT 0
60393: PPUSH
// end ;
60394: LD_VAR 0 4
60398: RET
// export function SOS_Command ( cmd ) ; begin
60399: LD_INT 0
60401: PPUSH
// end ;
60402: LD_VAR 0 2
60406: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
60407: LD_INT 0
60409: PPUSH
// end ;
60410: LD_VAR 0 6
60414: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
60415: LD_INT 0
60417: PPUSH
60418: PPUSH
60419: PPUSH
60420: PPUSH
// if not vehicle or not factory then
60421: LD_VAR 0 1
60425: NOT
60426: IFTRUE 60435
60428: PUSH
60429: LD_VAR 0 2
60433: NOT
60434: OR
60435: IFFALSE 60439
// exit ;
60437: GO 61021
// if not factoryWaypoints then
60439: LD_EXP 105
60443: NOT
60444: IFFALSE 60448
// exit ;
60446: GO 61021
// for i := 1 to Count ( factoryWaypoints ) do
60448: LD_ADDR_VAR 0 4
60452: PUSH
60453: DOUBLE
60454: LD_INT 1
60456: DEC
60457: ST_TO_ADDR
60458: LD_EXP 105
60462: PPUSH
60463: CALL 18908 0 1
60467: PUSH
60468: FOR_TO
60469: IFFALSE 61019
// if factoryWaypoints [ i ] [ 2 ] = factory then
60471: LD_EXP 105
60475: PUSH
60476: LD_VAR 0 4
60480: ARRAY
60481: PUSH
60482: LD_INT 2
60484: ARRAY
60485: PUSH
60486: LD_VAR 0 2
60490: EQUAL
60491: IFFALSE 61017
// begin if GetControl ( vehicle ) = control_manual then
60493: LD_VAR 0 1
60497: PPUSH
60498: CALL_OW 263
60502: PUSH
60503: LD_INT 1
60505: EQUAL
60506: IFFALSE 60870
// begin driver := IsDrivenBy ( vehicle ) ;
60508: LD_ADDR_VAR 0 5
60512: PUSH
60513: LD_VAR 0 1
60517: PPUSH
60518: CALL_OW 311
60522: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
60523: LD_VAR 0 5
60527: PUSH
60528: LD_EXP 106
60532: IN
60533: IFTRUE 60547
60535: PUSH
60536: LD_VAR 0 1
60540: PUSH
60541: LD_EXP 106
60545: IN
60546: OR
60547: IFFALSE 60553
// exit ;
60549: POP
60550: POP
60551: GO 61021
// if not HasTask ( driver ) then
60553: LD_VAR 0 5
60557: PPUSH
60558: CALL_OW 314
60562: NOT
60563: IFFALSE 60868
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
60565: LD_ADDR_EXP 106
60569: PUSH
60570: LD_EXP 106
60574: PPUSH
60575: LD_VAR 0 5
60579: PPUSH
60580: CALL 54840 0 2
60584: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
60585: LD_ADDR_EXP 106
60589: PUSH
60590: LD_EXP 106
60594: PPUSH
60595: LD_VAR 0 1
60599: PPUSH
60600: CALL 54840 0 2
60604: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60605: LD_ADDR_VAR 0 6
60609: PUSH
60610: LD_EXP 105
60614: PUSH
60615: LD_VAR 0 4
60619: ARRAY
60620: PUSH
60621: LD_INT 3
60623: ARRAY
60624: PPUSH
60625: LD_EXP 105
60629: PUSH
60630: LD_VAR 0 4
60634: ARRAY
60635: PUSH
60636: LD_INT 4
60638: ARRAY
60639: PPUSH
60640: CALL_OW 428
60644: ST_TO_ADDR
// if hex then
60645: LD_VAR 0 6
60649: IFFALSE 60667
// ComMoveUnit ( driver , hex ) else
60651: LD_VAR 0 5
60655: PPUSH
60656: LD_VAR 0 6
60660: PPUSH
60661: CALL_OW 112
60665: GO 60751
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
60667: LD_VAR 0 1
60671: PPUSH
60672: LD_EXP 105
60676: PUSH
60677: LD_VAR 0 4
60681: ARRAY
60682: PUSH
60683: LD_INT 3
60685: ARRAY
60686: PPUSH
60687: LD_EXP 105
60691: PUSH
60692: LD_VAR 0 4
60696: ARRAY
60697: PUSH
60698: LD_INT 4
60700: ARRAY
60701: PPUSH
60702: CALL_OW 297
60706: PUSH
60707: LD_INT 0
60709: GREATER
60710: IFFALSE 60751
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60712: LD_VAR 0 5
60716: PPUSH
60717: LD_EXP 105
60721: PUSH
60722: LD_VAR 0 4
60726: ARRAY
60727: PUSH
60728: LD_INT 3
60730: ARRAY
60731: PPUSH
60732: LD_EXP 105
60736: PUSH
60737: LD_VAR 0 4
60741: ARRAY
60742: PUSH
60743: LD_INT 4
60745: ARRAY
60746: PPUSH
60747: CALL_OW 111
// AddComExitVehicle ( driver ) ;
60751: LD_VAR 0 5
60755: PPUSH
60756: CALL_OW 181
// if Multiplayer then
60760: LD_OWVAR 4
60764: IFFALSE 60813
// begin repeat wait ( 10 ) ;
60766: LD_INT 10
60768: PPUSH
60769: CALL_OW 67
// until not IsInUnit ( driver ) ;
60773: LD_VAR 0 5
60777: PPUSH
60778: CALL_OW 310
60782: NOT
60783: IFFALSE 60766
// if not HasTask ( driver ) then
60785: LD_VAR 0 5
60789: PPUSH
60790: CALL_OW 314
60794: NOT
60795: IFFALSE 60811
// ComEnterUnit ( driver , factory ) ;
60797: LD_VAR 0 5
60801: PPUSH
60802: LD_VAR 0 2
60806: PPUSH
60807: CALL_OW 120
// end else
60811: GO 60827
// AddComEnterUnit ( driver , factory ) ;
60813: LD_VAR 0 5
60817: PPUSH
60818: LD_VAR 0 2
60822: PPUSH
60823: CALL_OW 180
// wait ( 0 0$1 ) ;
60827: LD_INT 35
60829: PPUSH
60830: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
60834: LD_ADDR_EXP 106
60838: PUSH
60839: LD_EXP 106
60843: PUSH
60844: LD_VAR 0 5
60848: DIFF
60849: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
60850: LD_ADDR_EXP 106
60854: PUSH
60855: LD_EXP 106
60859: PUSH
60860: LD_VAR 0 1
60864: DIFF
60865: ST_TO_ADDR
// break ;
60866: GO 61019
// end ; end else
60868: GO 61017
// if GetControl ( vehicle ) = control_remote then
60870: LD_VAR 0 1
60874: PPUSH
60875: CALL_OW 263
60879: PUSH
60880: LD_INT 2
60882: EQUAL
60883: IFFALSE 60969
// begin wait ( 0 0$2 ) ;
60885: LD_INT 70
60887: PPUSH
60888: CALL_OW 67
// repeat wait ( 10 ) ;
60892: LD_INT 10
60894: PPUSH
60895: CALL_OW 67
// Connect ( vehicle ) ;
60899: LD_VAR 0 1
60903: PPUSH
60904: CALL 25152 0 1
// until IsControledBy ( vehicle ) ;
60908: LD_VAR 0 1
60912: PPUSH
60913: CALL_OW 312
60917: IFFALSE 60892
// wait ( 10 ) ;
60919: LD_INT 10
60921: PPUSH
60922: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60926: LD_VAR 0 1
60930: PPUSH
60931: LD_EXP 105
60935: PUSH
60936: LD_VAR 0 4
60940: ARRAY
60941: PUSH
60942: LD_INT 3
60944: ARRAY
60945: PPUSH
60946: LD_EXP 105
60950: PUSH
60951: LD_VAR 0 4
60955: ARRAY
60956: PUSH
60957: LD_INT 4
60959: ARRAY
60960: PPUSH
60961: CALL_OW 111
// break ;
60965: GO 61019
// end else
60967: GO 61017
// begin wait ( 0 0$3 ) ;
60969: LD_INT 105
60971: PPUSH
60972: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60976: LD_VAR 0 1
60980: PPUSH
60981: LD_EXP 105
60985: PUSH
60986: LD_VAR 0 4
60990: ARRAY
60991: PUSH
60992: LD_INT 3
60994: ARRAY
60995: PPUSH
60996: LD_EXP 105
61000: PUSH
61001: LD_VAR 0 4
61005: ARRAY
61006: PUSH
61007: LD_INT 4
61009: ARRAY
61010: PPUSH
61011: CALL_OW 111
// break ;
61015: GO 61019
// end ; end ;
61017: GO 60468
61019: POP
61020: POP
// end ;
61021: LD_VAR 0 3
61025: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
61026: LD_INT 0
61028: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
61029: LD_VAR 0 1
61033: PUSH
61034: LD_INT 250
61036: EQUAL
61037: IFFALSE 61054
61039: PUSH
61040: LD_VAR 0 2
61044: PPUSH
61045: CALL_OW 264
61049: PUSH
61050: LD_INT 81
61052: EQUAL
61053: AND
61054: IFFALSE 61075
// MinerPlaceMine ( unit , x , y ) ;
61056: LD_VAR 0 2
61060: PPUSH
61061: LD_VAR 0 4
61065: PPUSH
61066: LD_VAR 0 5
61070: PPUSH
61071: CALL 64207 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
61075: LD_VAR 0 1
61079: PUSH
61080: LD_INT 251
61082: EQUAL
61083: IFFALSE 61100
61085: PUSH
61086: LD_VAR 0 2
61090: PPUSH
61091: CALL_OW 264
61095: PUSH
61096: LD_INT 81
61098: EQUAL
61099: AND
61100: IFFALSE 61121
// MinerDetonateMine ( unit , x , y ) ;
61102: LD_VAR 0 2
61106: PPUSH
61107: LD_VAR 0 4
61111: PPUSH
61112: LD_VAR 0 5
61116: PPUSH
61117: CALL 64486 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
61121: LD_VAR 0 1
61125: PUSH
61126: LD_INT 252
61128: EQUAL
61129: IFFALSE 61146
61131: PUSH
61132: LD_VAR 0 2
61136: PPUSH
61137: CALL_OW 264
61141: PUSH
61142: LD_INT 81
61144: EQUAL
61145: AND
61146: IFFALSE 61167
// MinerCreateMinefield ( unit , x , y ) ;
61148: LD_VAR 0 2
61152: PPUSH
61153: LD_VAR 0 4
61157: PPUSH
61158: LD_VAR 0 5
61162: PPUSH
61163: CALL 64905 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
61167: LD_VAR 0 1
61171: PUSH
61172: LD_INT 253
61174: EQUAL
61175: IFFALSE 61192
61177: PUSH
61178: LD_VAR 0 2
61182: PPUSH
61183: CALL_OW 257
61187: PUSH
61188: LD_INT 5
61190: EQUAL
61191: AND
61192: IFFALSE 61213
// ComBinocular ( unit , x , y ) ;
61194: LD_VAR 0 2
61198: PPUSH
61199: LD_VAR 0 4
61203: PPUSH
61204: LD_VAR 0 5
61208: PPUSH
61209: CALL 65280 0 3
// if selectedUnit then
61213: LD_VAR 0 3
61217: IFFALSE 61277
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
61219: LD_VAR 0 1
61223: PUSH
61224: LD_INT 254
61226: EQUAL
61227: IFFALSE 61244
61229: PUSH
61230: LD_VAR 0 2
61234: PPUSH
61235: CALL_OW 264
61239: PUSH
61240: LD_INT 99
61242: EQUAL
61243: AND
61244: IFFALSE 61261
61246: PUSH
61247: LD_VAR 0 3
61251: PPUSH
61252: CALL_OW 263
61256: PUSH
61257: LD_INT 3
61259: EQUAL
61260: AND
61261: IFFALSE 61277
// HackDestroyVehicle ( unit , selectedUnit ) ;
61263: LD_VAR 0 2
61267: PPUSH
61268: LD_VAR 0 3
61272: PPUSH
61273: CALL 63567 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
61277: LD_VAR 0 1
61281: PUSH
61282: LD_INT 255
61284: EQUAL
61285: IFFALSE 61309
61287: PUSH
61288: LD_VAR 0 2
61292: PPUSH
61293: CALL_OW 264
61297: PUSH
61298: LD_INT 14
61300: PUSH
61301: LD_INT 53
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: IN
61308: AND
61309: IFFALSE 61327
61311: PUSH
61312: LD_VAR 0 4
61316: PPUSH
61317: LD_VAR 0 5
61321: PPUSH
61322: CALL_OW 488
61326: AND
61327: IFFALSE 61351
// CutTreeXYR ( unit , x , y , 12 ) ;
61329: LD_VAR 0 2
61333: PPUSH
61334: LD_VAR 0 4
61338: PPUSH
61339: LD_VAR 0 5
61343: PPUSH
61344: LD_INT 12
61346: PPUSH
61347: CALL 61542 0 4
// if cmd = 256 then
61351: LD_VAR 0 1
61355: PUSH
61356: LD_INT 256
61358: EQUAL
61359: IFFALSE 61380
// SetFactoryWaypoint ( unit , x , y ) ;
61361: LD_VAR 0 2
61365: PPUSH
61366: LD_VAR 0 4
61370: PPUSH
61371: LD_VAR 0 5
61375: PPUSH
61376: CALL 81184 0 3
// if cmd = 257 then
61380: LD_VAR 0 1
61384: PUSH
61385: LD_INT 257
61387: EQUAL
61388: IFFALSE 61409
// SetWarehouseGatheringPoint ( unit , x , y ) ;
61390: LD_VAR 0 2
61394: PPUSH
61395: LD_VAR 0 4
61399: PPUSH
61400: LD_VAR 0 5
61404: PPUSH
61405: CALL 81680 0 3
// if cmd = 258 then
61409: LD_VAR 0 1
61413: PUSH
61414: LD_INT 258
61416: EQUAL
61417: IFFALSE 61441
// BurnTreeXYR ( unit , x , y , 8 ) ;
61419: LD_VAR 0 2
61423: PPUSH
61424: LD_VAR 0 4
61428: PPUSH
61429: LD_VAR 0 5
61433: PPUSH
61434: LD_INT 8
61436: PPUSH
61437: CALL 61942 0 4
// end ;
61441: LD_VAR 0 6
61445: RET
// export function ComRadiation ( un ) ; var eff ; begin
61446: LD_INT 0
61448: PPUSH
61449: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
61450: LD_VAR 0 1
61454: PPUSH
61455: CALL_OW 264
61459: PUSH
61460: LD_INT 91
61462: NONEQUAL
61463: IFFALSE 61467
// exit ;
61465: GO 61537
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
61467: LD_INT 68
61469: PPUSH
61470: LD_VAR 0 1
61474: PPUSH
61475: CALL_OW 255
61479: PPUSH
61480: CALL_OW 321
61484: PUSH
61485: LD_INT 2
61487: EQUAL
61488: IFFALSE 61500
// eff := 50 else
61490: LD_ADDR_VAR 0 3
61494: PUSH
61495: LD_INT 50
61497: ST_TO_ADDR
61498: GO 61508
// eff := 25 ;
61500: LD_ADDR_VAR 0 3
61504: PUSH
61505: LD_INT 25
61507: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
61508: LD_VAR 0 1
61512: PPUSH
61513: CALL_OW 250
61517: PPUSH
61518: LD_VAR 0 1
61522: PPUSH
61523: CALL_OW 251
61527: PPUSH
61528: LD_VAR 0 3
61532: PPUSH
61533: CALL_OW 495
// end ;
61537: LD_VAR 0 2
61541: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
61542: LD_INT 0
61544: PPUSH
61545: PPUSH
61546: PPUSH
61547: PPUSH
61548: PPUSH
61549: PPUSH
61550: PPUSH
61551: PPUSH
61552: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
61553: LD_VAR 0 1
61557: PPUSH
61558: CALL_OW 302
61562: NOT
61563: IFTRUE 61582
61565: PUSH
61566: LD_VAR 0 2
61570: PPUSH
61571: LD_VAR 0 3
61575: PPUSH
61576: CALL_OW 488
61580: NOT
61581: OR
61582: IFTRUE 61591
61584: PUSH
61585: LD_VAR 0 4
61589: NOT
61590: OR
61591: IFFALSE 61595
// exit ;
61593: GO 61937
// list := [ ] ;
61595: LD_ADDR_VAR 0 13
61599: PUSH
61600: EMPTY
61601: ST_TO_ADDR
// if x - r < 0 then
61602: LD_VAR 0 2
61606: PUSH
61607: LD_VAR 0 4
61611: MINUS
61612: PUSH
61613: LD_INT 0
61615: LESS
61616: IFFALSE 61628
// min_x := 0 else
61618: LD_ADDR_VAR 0 7
61622: PUSH
61623: LD_INT 0
61625: ST_TO_ADDR
61626: GO 61644
// min_x := x - r ;
61628: LD_ADDR_VAR 0 7
61632: PUSH
61633: LD_VAR 0 2
61637: PUSH
61638: LD_VAR 0 4
61642: MINUS
61643: ST_TO_ADDR
// if y - r < 0 then
61644: LD_VAR 0 3
61648: PUSH
61649: LD_VAR 0 4
61653: MINUS
61654: PUSH
61655: LD_INT 0
61657: LESS
61658: IFFALSE 61670
// min_y := 0 else
61660: LD_ADDR_VAR 0 8
61664: PUSH
61665: LD_INT 0
61667: ST_TO_ADDR
61668: GO 61686
// min_y := y - r ;
61670: LD_ADDR_VAR 0 8
61674: PUSH
61675: LD_VAR 0 3
61679: PUSH
61680: LD_VAR 0 4
61684: MINUS
61685: ST_TO_ADDR
// max_x := x + r ;
61686: LD_ADDR_VAR 0 9
61690: PUSH
61691: LD_VAR 0 2
61695: PUSH
61696: LD_VAR 0 4
61700: PLUS
61701: ST_TO_ADDR
// max_y := y + r ;
61702: LD_ADDR_VAR 0 10
61706: PUSH
61707: LD_VAR 0 3
61711: PUSH
61712: LD_VAR 0 4
61716: PLUS
61717: ST_TO_ADDR
// for _x = min_x to max_x do
61718: LD_ADDR_VAR 0 11
61722: PUSH
61723: DOUBLE
61724: LD_VAR 0 7
61728: DEC
61729: ST_TO_ADDR
61730: LD_VAR 0 9
61734: PUSH
61735: FOR_TO
61736: IFFALSE 61855
// for _y = min_y to max_y do
61738: LD_ADDR_VAR 0 12
61742: PUSH
61743: DOUBLE
61744: LD_VAR 0 8
61748: DEC
61749: ST_TO_ADDR
61750: LD_VAR 0 10
61754: PUSH
61755: FOR_TO
61756: IFFALSE 61851
// begin if not ValidHex ( _x , _y ) then
61758: LD_VAR 0 11
61762: PPUSH
61763: LD_VAR 0 12
61767: PPUSH
61768: CALL_OW 488
61772: NOT
61773: IFFALSE 61777
// continue ;
61775: GO 61755
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61777: LD_VAR 0 11
61781: PPUSH
61782: LD_VAR 0 12
61786: PPUSH
61787: CALL_OW 351
61791: IFFALSE 61809
61793: PUSH
61794: LD_VAR 0 11
61798: PPUSH
61799: LD_VAR 0 12
61803: PPUSH
61804: CALL_OW 554
61808: AND
61809: IFFALSE 61849
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
61811: LD_ADDR_VAR 0 13
61815: PUSH
61816: LD_VAR 0 13
61820: PPUSH
61821: LD_VAR 0 13
61825: PUSH
61826: LD_INT 1
61828: PLUS
61829: PPUSH
61830: LD_VAR 0 11
61834: PUSH
61835: LD_VAR 0 12
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PPUSH
61844: CALL_OW 2
61848: ST_TO_ADDR
// end ;
61849: GO 61755
61851: POP
61852: POP
61853: GO 61735
61855: POP
61856: POP
// if not list then
61857: LD_VAR 0 13
61861: NOT
61862: IFFALSE 61866
// exit ;
61864: GO 61937
// for i in list do
61866: LD_ADDR_VAR 0 6
61870: PUSH
61871: LD_VAR 0 13
61875: PUSH
61876: FOR_IN
61877: IFFALSE 61935
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
61879: LD_VAR 0 1
61883: PPUSH
61884: LD_STRING M
61886: PUSH
61887: LD_VAR 0 6
61891: PUSH
61892: LD_INT 1
61894: ARRAY
61895: PUSH
61896: LD_VAR 0 6
61900: PUSH
61901: LD_INT 2
61903: ARRAY
61904: PUSH
61905: LD_INT 0
61907: PUSH
61908: LD_INT 0
61910: PUSH
61911: LD_INT 0
61913: PUSH
61914: LD_INT 0
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: PUSH
61926: EMPTY
61927: LIST
61928: PPUSH
61929: CALL_OW 447
61933: GO 61876
61935: POP
61936: POP
// end ;
61937: LD_VAR 0 5
61941: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
61942: LD_INT 0
61944: PPUSH
61945: PPUSH
61946: PPUSH
61947: PPUSH
61948: PPUSH
61949: PPUSH
61950: PPUSH
61951: PPUSH
61952: PPUSH
61953: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
61954: LD_VAR 0 1
61958: PPUSH
61959: CALL_OW 302
61963: NOT
61964: IFTRUE 61983
61966: PUSH
61967: LD_VAR 0 2
61971: PPUSH
61972: LD_VAR 0 3
61976: PPUSH
61977: CALL_OW 488
61981: NOT
61982: OR
61983: IFTRUE 61992
61985: PUSH
61986: LD_VAR 0 4
61990: NOT
61991: OR
61992: IFFALSE 61996
// exit ;
61994: GO 62513
// list := [ ] ;
61996: LD_ADDR_VAR 0 13
62000: PUSH
62001: EMPTY
62002: ST_TO_ADDR
// if x - r < 0 then
62003: LD_VAR 0 2
62007: PUSH
62008: LD_VAR 0 4
62012: MINUS
62013: PUSH
62014: LD_INT 0
62016: LESS
62017: IFFALSE 62029
// min_x := 0 else
62019: LD_ADDR_VAR 0 7
62023: PUSH
62024: LD_INT 0
62026: ST_TO_ADDR
62027: GO 62045
// min_x := x - r ;
62029: LD_ADDR_VAR 0 7
62033: PUSH
62034: LD_VAR 0 2
62038: PUSH
62039: LD_VAR 0 4
62043: MINUS
62044: ST_TO_ADDR
// if y - r < 0 then
62045: LD_VAR 0 3
62049: PUSH
62050: LD_VAR 0 4
62054: MINUS
62055: PUSH
62056: LD_INT 0
62058: LESS
62059: IFFALSE 62071
// min_y := 0 else
62061: LD_ADDR_VAR 0 8
62065: PUSH
62066: LD_INT 0
62068: ST_TO_ADDR
62069: GO 62087
// min_y := y - r ;
62071: LD_ADDR_VAR 0 8
62075: PUSH
62076: LD_VAR 0 3
62080: PUSH
62081: LD_VAR 0 4
62085: MINUS
62086: ST_TO_ADDR
// max_x := x + r ;
62087: LD_ADDR_VAR 0 9
62091: PUSH
62092: LD_VAR 0 2
62096: PUSH
62097: LD_VAR 0 4
62101: PLUS
62102: ST_TO_ADDR
// max_y := y + r ;
62103: LD_ADDR_VAR 0 10
62107: PUSH
62108: LD_VAR 0 3
62112: PUSH
62113: LD_VAR 0 4
62117: PLUS
62118: ST_TO_ADDR
// for _x = min_x to max_x do
62119: LD_ADDR_VAR 0 11
62123: PUSH
62124: DOUBLE
62125: LD_VAR 0 7
62129: DEC
62130: ST_TO_ADDR
62131: LD_VAR 0 9
62135: PUSH
62136: FOR_TO
62137: IFFALSE 62256
// for _y = min_y to max_y do
62139: LD_ADDR_VAR 0 12
62143: PUSH
62144: DOUBLE
62145: LD_VAR 0 8
62149: DEC
62150: ST_TO_ADDR
62151: LD_VAR 0 10
62155: PUSH
62156: FOR_TO
62157: IFFALSE 62252
// begin if not ValidHex ( _x , _y ) then
62159: LD_VAR 0 11
62163: PPUSH
62164: LD_VAR 0 12
62168: PPUSH
62169: CALL_OW 488
62173: NOT
62174: IFFALSE 62178
// continue ;
62176: GO 62156
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
62178: LD_VAR 0 11
62182: PPUSH
62183: LD_VAR 0 12
62187: PPUSH
62188: CALL_OW 351
62192: IFFALSE 62210
62194: PUSH
62195: LD_VAR 0 11
62199: PPUSH
62200: LD_VAR 0 12
62204: PPUSH
62205: CALL_OW 554
62209: AND
62210: IFFALSE 62250
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
62212: LD_ADDR_VAR 0 13
62216: PUSH
62217: LD_VAR 0 13
62221: PPUSH
62222: LD_VAR 0 13
62226: PUSH
62227: LD_INT 1
62229: PLUS
62230: PPUSH
62231: LD_VAR 0 11
62235: PUSH
62236: LD_VAR 0 12
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PPUSH
62245: CALL_OW 2
62249: ST_TO_ADDR
// end ;
62250: GO 62156
62252: POP
62253: POP
62254: GO 62136
62256: POP
62257: POP
// if not list then
62258: LD_VAR 0 13
62262: NOT
62263: IFFALSE 62267
// exit ;
62265: GO 62513
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
62267: LD_ADDR_VAR 0 13
62271: PUSH
62272: LD_VAR 0 1
62276: PPUSH
62277: LD_VAR 0 13
62281: PPUSH
62282: LD_INT 1
62284: PPUSH
62285: LD_INT 1
62287: PPUSH
62288: CALL 22280 0 4
62292: ST_TO_ADDR
// ComStop ( flame ) ;
62293: LD_VAR 0 1
62297: PPUSH
62298: CALL_OW 141
// for i in list do
62302: LD_ADDR_VAR 0 6
62306: PUSH
62307: LD_VAR 0 13
62311: PUSH
62312: FOR_IN
62313: IFFALSE 62344
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
62315: LD_VAR 0 1
62319: PPUSH
62320: LD_VAR 0 6
62324: PUSH
62325: LD_INT 1
62327: ARRAY
62328: PPUSH
62329: LD_VAR 0 6
62333: PUSH
62334: LD_INT 2
62336: ARRAY
62337: PPUSH
62338: CALL_OW 176
62342: GO 62312
62344: POP
62345: POP
// repeat wait ( 0 0$1 ) ;
62346: LD_INT 35
62348: PPUSH
62349: CALL_OW 67
// task := GetTaskList ( flame ) ;
62353: LD_ADDR_VAR 0 14
62357: PUSH
62358: LD_VAR 0 1
62362: PPUSH
62363: CALL_OW 437
62367: ST_TO_ADDR
// if not task then
62368: LD_VAR 0 14
62372: NOT
62373: IFFALSE 62377
// exit ;
62375: GO 62513
// if task [ 1 ] [ 1 ] <> | then
62377: LD_VAR 0 14
62381: PUSH
62382: LD_INT 1
62384: ARRAY
62385: PUSH
62386: LD_INT 1
62388: ARRAY
62389: PUSH
62390: LD_STRING |
62392: NONEQUAL
62393: IFFALSE 62397
// exit ;
62395: GO 62513
// _x := task [ 1 ] [ 2 ] ;
62397: LD_ADDR_VAR 0 11
62401: PUSH
62402: LD_VAR 0 14
62406: PUSH
62407: LD_INT 1
62409: ARRAY
62410: PUSH
62411: LD_INT 2
62413: ARRAY
62414: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
62415: LD_ADDR_VAR 0 12
62419: PUSH
62420: LD_VAR 0 14
62424: PUSH
62425: LD_INT 1
62427: ARRAY
62428: PUSH
62429: LD_INT 3
62431: ARRAY
62432: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
62433: LD_VAR 0 11
62437: PPUSH
62438: LD_VAR 0 12
62442: PPUSH
62443: CALL_OW 351
62447: NOT
62448: IFTRUE 62467
62450: PUSH
62451: LD_VAR 0 11
62455: PPUSH
62456: LD_VAR 0 12
62460: PPUSH
62461: CALL_OW 554
62465: NOT
62466: OR
62467: IFFALSE 62501
// begin task := Delete ( task , 1 ) ;
62469: LD_ADDR_VAR 0 14
62473: PUSH
62474: LD_VAR 0 14
62478: PPUSH
62479: LD_INT 1
62481: PPUSH
62482: CALL_OW 3
62486: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
62487: LD_VAR 0 1
62491: PPUSH
62492: LD_VAR 0 14
62496: PPUSH
62497: CALL_OW 446
// end ; until not HasTask ( flame ) ;
62501: LD_VAR 0 1
62505: PPUSH
62506: CALL_OW 314
62510: NOT
62511: IFFALSE 62346
// end ;
62513: LD_VAR 0 5
62517: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
62518: LD_EXP 36
62522: NOT
62523: IFFALSE 62573
62525: GO 62527
62527: DISABLE
// begin initHack := true ;
62528: LD_ADDR_EXP 36
62532: PUSH
62533: LD_INT 1
62535: ST_TO_ADDR
// hackTanks := [ ] ;
62536: LD_ADDR_EXP 37
62540: PUSH
62541: EMPTY
62542: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
62543: LD_ADDR_EXP 38
62547: PUSH
62548: EMPTY
62549: ST_TO_ADDR
// hackLimit := 3 ;
62550: LD_ADDR_EXP 39
62554: PUSH
62555: LD_INT 3
62557: ST_TO_ADDR
// hackDist := 12 ;
62558: LD_ADDR_EXP 40
62562: PUSH
62563: LD_INT 12
62565: ST_TO_ADDR
// hackCounter := [ ] ;
62566: LD_ADDR_EXP 41
62570: PUSH
62571: EMPTY
62572: ST_TO_ADDR
// end ;
62573: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
62574: LD_EXP 36
62578: IFFALSE 62596
62580: PUSH
62581: LD_INT 34
62583: PUSH
62584: LD_INT 99
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PPUSH
62591: CALL_OW 69
62595: AND
62596: IFFALSE 62849
62598: GO 62600
62600: DISABLE
62601: LD_INT 0
62603: PPUSH
62604: PPUSH
// begin enable ;
62605: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
62606: LD_ADDR_VAR 0 1
62610: PUSH
62611: LD_INT 34
62613: PUSH
62614: LD_INT 99
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PPUSH
62621: CALL_OW 69
62625: PUSH
62626: FOR_IN
62627: IFFALSE 62847
// begin if not i in hackTanks then
62629: LD_VAR 0 1
62633: PUSH
62634: LD_EXP 37
62638: IN
62639: NOT
62640: IFFALSE 62723
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
62642: LD_ADDR_EXP 37
62646: PUSH
62647: LD_EXP 37
62651: PPUSH
62652: LD_EXP 37
62656: PUSH
62657: LD_INT 1
62659: PLUS
62660: PPUSH
62661: LD_VAR 0 1
62665: PPUSH
62666: CALL_OW 1
62670: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
62671: LD_ADDR_EXP 38
62675: PUSH
62676: LD_EXP 38
62680: PPUSH
62681: LD_EXP 38
62685: PUSH
62686: LD_INT 1
62688: PLUS
62689: PPUSH
62690: EMPTY
62691: PPUSH
62692: CALL_OW 1
62696: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
62697: LD_ADDR_EXP 41
62701: PUSH
62702: LD_EXP 41
62706: PPUSH
62707: LD_EXP 41
62711: PUSH
62712: LD_INT 1
62714: PLUS
62715: PPUSH
62716: EMPTY
62717: PPUSH
62718: CALL_OW 1
62722: ST_TO_ADDR
// end ; if not IsOk ( i ) then
62723: LD_VAR 0 1
62727: PPUSH
62728: CALL_OW 302
62732: NOT
62733: IFFALSE 62746
// begin HackUnlinkAll ( i ) ;
62735: LD_VAR 0 1
62739: PPUSH
62740: CALL 62852 0 1
// continue ;
62744: GO 62626
// end ; HackCheckCapturedStatus ( i ) ;
62746: LD_VAR 0 1
62750: PPUSH
62751: CALL 63297 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
62755: LD_ADDR_VAR 0 2
62759: PUSH
62760: LD_INT 81
62762: PUSH
62763: LD_VAR 0 1
62767: PPUSH
62768: CALL_OW 255
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 33
62779: PUSH
62780: LD_INT 3
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 91
62789: PUSH
62790: LD_VAR 0 1
62794: PUSH
62795: LD_EXP 40
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 50
62807: PUSH
62808: EMPTY
62809: LIST
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: PPUSH
62817: CALL_OW 69
62821: ST_TO_ADDR
// if not tmp then
62822: LD_VAR 0 2
62826: NOT
62827: IFFALSE 62831
// continue ;
62829: GO 62626
// HackLink ( i , tmp ) ;
62831: LD_VAR 0 1
62835: PPUSH
62836: LD_VAR 0 2
62840: PPUSH
62841: CALL 62988 0 2
// end ;
62845: GO 62626
62847: POP
62848: POP
// end ;
62849: PPOPN 2
62851: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
62852: LD_INT 0
62854: PPUSH
62855: PPUSH
62856: PPUSH
// if not hack in hackTanks then
62857: LD_VAR 0 1
62861: PUSH
62862: LD_EXP 37
62866: IN
62867: NOT
62868: IFFALSE 62872
// exit ;
62870: GO 62983
// index := GetElementIndex ( hackTanks , hack ) ;
62872: LD_ADDR_VAR 0 4
62876: PUSH
62877: LD_EXP 37
62881: PPUSH
62882: LD_VAR 0 1
62886: PPUSH
62887: CALL 21575 0 2
62891: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
62892: LD_EXP 38
62896: PUSH
62897: LD_VAR 0 4
62901: ARRAY
62902: IFFALSE 62983
// begin for i in hackTanksCaptured [ index ] do
62904: LD_ADDR_VAR 0 3
62908: PUSH
62909: LD_EXP 38
62913: PUSH
62914: LD_VAR 0 4
62918: ARRAY
62919: PUSH
62920: FOR_IN
62921: IFFALSE 62947
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
62923: LD_VAR 0 3
62927: PUSH
62928: LD_INT 1
62930: ARRAY
62931: PPUSH
62932: LD_VAR 0 3
62936: PUSH
62937: LD_INT 2
62939: ARRAY
62940: PPUSH
62941: CALL_OW 235
62945: GO 62920
62947: POP
62948: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
62949: LD_ADDR_EXP 38
62953: PUSH
62954: LD_EXP 38
62958: PPUSH
62959: LD_VAR 0 4
62963: PPUSH
62964: EMPTY
62965: PPUSH
62966: CALL_OW 1
62970: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
62971: LD_VAR 0 1
62975: PPUSH
62976: LD_INT 0
62978: PPUSH
62979: CALL_OW 505
// end ; end ;
62983: LD_VAR 0 2
62987: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
62988: LD_INT 0
62990: PPUSH
62991: PPUSH
62992: PPUSH
// if not hack in hackTanks or not vehicles then
62993: LD_VAR 0 1
62997: PUSH
62998: LD_EXP 37
63002: IN
63003: NOT
63004: IFTRUE 63013
63006: PUSH
63007: LD_VAR 0 2
63011: NOT
63012: OR
63013: IFFALSE 63017
// exit ;
63015: GO 63292
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
63017: LD_ADDR_VAR 0 2
63021: PUSH
63022: LD_VAR 0 1
63026: PPUSH
63027: LD_VAR 0 2
63031: PPUSH
63032: LD_INT 1
63034: PPUSH
63035: LD_INT 1
63037: PPUSH
63038: CALL 22227 0 4
63042: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
63043: LD_ADDR_VAR 0 5
63047: PUSH
63048: LD_EXP 37
63052: PPUSH
63053: LD_VAR 0 1
63057: PPUSH
63058: CALL 21575 0 2
63062: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
63063: LD_EXP 38
63067: PUSH
63068: LD_VAR 0 5
63072: ARRAY
63073: PUSH
63074: LD_EXP 39
63078: LESS
63079: IFFALSE 63268
// begin for i := 1 to vehicles do
63081: LD_ADDR_VAR 0 4
63085: PUSH
63086: DOUBLE
63087: LD_INT 1
63089: DEC
63090: ST_TO_ADDR
63091: LD_VAR 0 2
63095: PUSH
63096: FOR_TO
63097: IFFALSE 63266
// begin if hackTanksCaptured [ index ] = hackLimit then
63099: LD_EXP 38
63103: PUSH
63104: LD_VAR 0 5
63108: ARRAY
63109: PUSH
63110: LD_EXP 39
63114: EQUAL
63115: IFFALSE 63119
// break ;
63117: GO 63266
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
63119: LD_ADDR_EXP 41
63123: PUSH
63124: LD_EXP 41
63128: PPUSH
63129: LD_VAR 0 5
63133: PPUSH
63134: LD_EXP 41
63138: PUSH
63139: LD_VAR 0 5
63143: ARRAY
63144: PUSH
63145: LD_INT 1
63147: PLUS
63148: PPUSH
63149: CALL_OW 1
63153: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
63154: LD_ADDR_EXP 38
63158: PUSH
63159: LD_EXP 38
63163: PPUSH
63164: LD_VAR 0 5
63168: PUSH
63169: LD_EXP 38
63173: PUSH
63174: LD_VAR 0 5
63178: ARRAY
63179: PUSH
63180: LD_INT 1
63182: PLUS
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PPUSH
63188: LD_VAR 0 2
63192: PUSH
63193: LD_VAR 0 4
63197: ARRAY
63198: PUSH
63199: LD_VAR 0 2
63203: PUSH
63204: LD_VAR 0 4
63208: ARRAY
63209: PPUSH
63210: CALL_OW 255
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PPUSH
63219: CALL 21792 0 3
63223: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
63224: LD_VAR 0 2
63228: PUSH
63229: LD_VAR 0 4
63233: ARRAY
63234: PPUSH
63235: LD_VAR 0 1
63239: PPUSH
63240: CALL_OW 255
63244: PPUSH
63245: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
63249: LD_VAR 0 2
63253: PUSH
63254: LD_VAR 0 4
63258: ARRAY
63259: PPUSH
63260: CALL_OW 141
// end ;
63264: GO 63096
63266: POP
63267: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
63268: LD_VAR 0 1
63272: PPUSH
63273: LD_EXP 38
63277: PUSH
63278: LD_VAR 0 5
63282: ARRAY
63283: PUSH
63284: LD_INT 0
63286: PLUS
63287: PPUSH
63288: CALL_OW 505
// end ;
63292: LD_VAR 0 3
63296: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
63297: LD_INT 0
63299: PPUSH
63300: PPUSH
63301: PPUSH
63302: PPUSH
// if not hack in hackTanks then
63303: LD_VAR 0 1
63307: PUSH
63308: LD_EXP 37
63312: IN
63313: NOT
63314: IFFALSE 63318
// exit ;
63316: GO 63562
// index := GetElementIndex ( hackTanks , hack ) ;
63318: LD_ADDR_VAR 0 4
63322: PUSH
63323: LD_EXP 37
63327: PPUSH
63328: LD_VAR 0 1
63332: PPUSH
63333: CALL 21575 0 2
63337: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
63338: LD_ADDR_VAR 0 3
63342: PUSH
63343: DOUBLE
63344: LD_EXP 38
63348: PUSH
63349: LD_VAR 0 4
63353: ARRAY
63354: INC
63355: ST_TO_ADDR
63356: LD_INT 1
63358: PUSH
63359: FOR_DOWNTO
63360: IFFALSE 63536
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
63362: LD_ADDR_VAR 0 5
63366: PUSH
63367: LD_EXP 38
63371: PUSH
63372: LD_VAR 0 4
63376: ARRAY
63377: PUSH
63378: LD_VAR 0 3
63382: ARRAY
63383: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
63384: LD_VAR 0 5
63388: PUSH
63389: LD_INT 1
63391: ARRAY
63392: PPUSH
63393: CALL_OW 302
63397: NOT
63398: IFTRUE 63426
63400: PUSH
63401: LD_VAR 0 5
63405: PUSH
63406: LD_INT 1
63408: ARRAY
63409: PPUSH
63410: CALL_OW 255
63414: PUSH
63415: LD_VAR 0 1
63419: PPUSH
63420: CALL_OW 255
63424: NONEQUAL
63425: OR
63426: IFFALSE 63534
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
63428: LD_VAR 0 5
63432: PUSH
63433: LD_INT 1
63435: ARRAY
63436: PPUSH
63437: CALL_OW 305
63441: IFFALSE 63469
63443: PUSH
63444: LD_VAR 0 5
63448: PUSH
63449: LD_INT 1
63451: ARRAY
63452: PPUSH
63453: CALL_OW 255
63457: PUSH
63458: LD_VAR 0 1
63462: PPUSH
63463: CALL_OW 255
63467: EQUAL
63468: AND
63469: IFFALSE 63493
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
63471: LD_VAR 0 5
63475: PUSH
63476: LD_INT 1
63478: ARRAY
63479: PPUSH
63480: LD_VAR 0 5
63484: PUSH
63485: LD_INT 2
63487: ARRAY
63488: PPUSH
63489: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
63493: LD_ADDR_EXP 38
63497: PUSH
63498: LD_EXP 38
63502: PPUSH
63503: LD_VAR 0 4
63507: PPUSH
63508: LD_EXP 38
63512: PUSH
63513: LD_VAR 0 4
63517: ARRAY
63518: PPUSH
63519: LD_VAR 0 3
63523: PPUSH
63524: CALL_OW 3
63528: PPUSH
63529: CALL_OW 1
63533: ST_TO_ADDR
// end ; end ;
63534: GO 63359
63536: POP
63537: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
63538: LD_VAR 0 1
63542: PPUSH
63543: LD_EXP 38
63547: PUSH
63548: LD_VAR 0 4
63552: ARRAY
63553: PUSH
63554: LD_INT 0
63556: PLUS
63557: PPUSH
63558: CALL_OW 505
// end ;
63562: LD_VAR 0 2
63566: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
63567: LD_INT 0
63569: PPUSH
63570: PPUSH
63571: PPUSH
63572: PPUSH
// if not hack in hackTanks then
63573: LD_VAR 0 1
63577: PUSH
63578: LD_EXP 37
63582: IN
63583: NOT
63584: IFFALSE 63588
// exit ;
63586: GO 63673
// index := GetElementIndex ( hackTanks , hack ) ;
63588: LD_ADDR_VAR 0 5
63592: PUSH
63593: LD_EXP 37
63597: PPUSH
63598: LD_VAR 0 1
63602: PPUSH
63603: CALL 21575 0 2
63607: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
63608: LD_ADDR_VAR 0 4
63612: PUSH
63613: DOUBLE
63614: LD_INT 1
63616: DEC
63617: ST_TO_ADDR
63618: LD_EXP 38
63622: PUSH
63623: LD_VAR 0 5
63627: ARRAY
63628: PUSH
63629: FOR_TO
63630: IFFALSE 63671
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
63632: LD_EXP 38
63636: PUSH
63637: LD_VAR 0 5
63641: ARRAY
63642: PUSH
63643: LD_VAR 0 4
63647: ARRAY
63648: PUSH
63649: LD_INT 1
63651: ARRAY
63652: PUSH
63653: LD_VAR 0 2
63657: EQUAL
63658: IFFALSE 63669
// KillUnit ( vehicle ) ;
63660: LD_VAR 0 2
63664: PPUSH
63665: CALL_OW 66
63669: GO 63629
63671: POP
63672: POP
// end ;
63673: LD_VAR 0 3
63677: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
63678: LD_EXP 42
63682: NOT
63683: IFFALSE 63718
63685: GO 63687
63687: DISABLE
// begin initMiner := true ;
63688: LD_ADDR_EXP 42
63692: PUSH
63693: LD_INT 1
63695: ST_TO_ADDR
// minersList := [ ] ;
63696: LD_ADDR_EXP 43
63700: PUSH
63701: EMPTY
63702: ST_TO_ADDR
// minerMinesList := [ ] ;
63703: LD_ADDR_EXP 44
63707: PUSH
63708: EMPTY
63709: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
63710: LD_ADDR_EXP 45
63714: PUSH
63715: LD_INT 5
63717: ST_TO_ADDR
// end ;
63718: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
63719: LD_EXP 42
63723: IFFALSE 63741
63725: PUSH
63726: LD_INT 34
63728: PUSH
63729: LD_INT 81
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PPUSH
63736: CALL_OW 69
63740: AND
63741: IFFALSE 64204
63743: GO 63745
63745: DISABLE
63746: LD_INT 0
63748: PPUSH
63749: PPUSH
63750: PPUSH
63751: PPUSH
// begin enable ;
63752: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
63753: LD_ADDR_VAR 0 1
63757: PUSH
63758: LD_INT 34
63760: PUSH
63761: LD_INT 81
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PPUSH
63768: CALL_OW 69
63772: PUSH
63773: FOR_IN
63774: IFFALSE 63846
// begin if not i in minersList then
63776: LD_VAR 0 1
63780: PUSH
63781: LD_EXP 43
63785: IN
63786: NOT
63787: IFFALSE 63844
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
63789: LD_ADDR_EXP 43
63793: PUSH
63794: LD_EXP 43
63798: PPUSH
63799: LD_EXP 43
63803: PUSH
63804: LD_INT 1
63806: PLUS
63807: PPUSH
63808: LD_VAR 0 1
63812: PPUSH
63813: CALL_OW 1
63817: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
63818: LD_ADDR_EXP 44
63822: PUSH
63823: LD_EXP 44
63827: PPUSH
63828: LD_EXP 44
63832: PUSH
63833: LD_INT 1
63835: PLUS
63836: PPUSH
63837: EMPTY
63838: PPUSH
63839: CALL_OW 1
63843: ST_TO_ADDR
// end end ;
63844: GO 63773
63846: POP
63847: POP
// for i := minerMinesList downto 1 do
63848: LD_ADDR_VAR 0 1
63852: PUSH
63853: DOUBLE
63854: LD_EXP 44
63858: INC
63859: ST_TO_ADDR
63860: LD_INT 1
63862: PUSH
63863: FOR_DOWNTO
63864: IFFALSE 64202
// begin if IsLive ( minersList [ i ] ) then
63866: LD_EXP 43
63870: PUSH
63871: LD_VAR 0 1
63875: ARRAY
63876: PPUSH
63877: CALL_OW 300
63881: IFFALSE 63909
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
63883: LD_EXP 43
63887: PUSH
63888: LD_VAR 0 1
63892: ARRAY
63893: PPUSH
63894: LD_EXP 44
63898: PUSH
63899: LD_VAR 0 1
63903: ARRAY
63904: PPUSH
63905: CALL_OW 505
// if not minerMinesList [ i ] then
63909: LD_EXP 44
63913: PUSH
63914: LD_VAR 0 1
63918: ARRAY
63919: NOT
63920: IFFALSE 63924
// continue ;
63922: GO 63863
// for j := minerMinesList [ i ] downto 1 do
63924: LD_ADDR_VAR 0 2
63928: PUSH
63929: DOUBLE
63930: LD_EXP 44
63934: PUSH
63935: LD_VAR 0 1
63939: ARRAY
63940: INC
63941: ST_TO_ADDR
63942: LD_INT 1
63944: PUSH
63945: FOR_DOWNTO
63946: IFFALSE 64198
// begin side := GetSide ( minersList [ i ] ) ;
63948: LD_ADDR_VAR 0 3
63952: PUSH
63953: LD_EXP 43
63957: PUSH
63958: LD_VAR 0 1
63962: ARRAY
63963: PPUSH
63964: CALL_OW 255
63968: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63969: LD_ADDR_VAR 0 4
63973: PUSH
63974: LD_EXP 44
63978: PUSH
63979: LD_VAR 0 1
63983: ARRAY
63984: PUSH
63985: LD_VAR 0 2
63989: ARRAY
63990: PUSH
63991: LD_INT 1
63993: ARRAY
63994: PPUSH
63995: LD_EXP 44
63999: PUSH
64000: LD_VAR 0 1
64004: ARRAY
64005: PUSH
64006: LD_VAR 0 2
64010: ARRAY
64011: PUSH
64012: LD_INT 2
64014: ARRAY
64015: PPUSH
64016: CALL_OW 428
64020: ST_TO_ADDR
// if not tmp then
64021: LD_VAR 0 4
64025: NOT
64026: IFFALSE 64030
// continue ;
64028: GO 63945
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
64030: LD_VAR 0 4
64034: PUSH
64035: LD_INT 81
64037: PUSH
64038: LD_VAR 0 3
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PPUSH
64047: CALL_OW 69
64051: IN
64052: IFFALSE 64102
64054: PUSH
64055: LD_EXP 44
64059: PUSH
64060: LD_VAR 0 1
64064: ARRAY
64065: PUSH
64066: LD_VAR 0 2
64070: ARRAY
64071: PUSH
64072: LD_INT 1
64074: ARRAY
64075: PPUSH
64076: LD_EXP 44
64080: PUSH
64081: LD_VAR 0 1
64085: ARRAY
64086: PUSH
64087: LD_VAR 0 2
64091: ARRAY
64092: PUSH
64093: LD_INT 2
64095: ARRAY
64096: PPUSH
64097: CALL_OW 458
64101: AND
64102: IFFALSE 64196
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
64104: LD_EXP 44
64108: PUSH
64109: LD_VAR 0 1
64113: ARRAY
64114: PUSH
64115: LD_VAR 0 2
64119: ARRAY
64120: PUSH
64121: LD_INT 1
64123: ARRAY
64124: PPUSH
64125: LD_EXP 44
64129: PUSH
64130: LD_VAR 0 1
64134: ARRAY
64135: PUSH
64136: LD_VAR 0 2
64140: ARRAY
64141: PUSH
64142: LD_INT 2
64144: ARRAY
64145: PPUSH
64146: LD_VAR 0 3
64150: PPUSH
64151: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
64155: LD_ADDR_EXP 44
64159: PUSH
64160: LD_EXP 44
64164: PPUSH
64165: LD_VAR 0 1
64169: PPUSH
64170: LD_EXP 44
64174: PUSH
64175: LD_VAR 0 1
64179: ARRAY
64180: PPUSH
64181: LD_VAR 0 2
64185: PPUSH
64186: CALL_OW 3
64190: PPUSH
64191: CALL_OW 1
64195: ST_TO_ADDR
// end ; end ;
64196: GO 63945
64198: POP
64199: POP
// end ;
64200: GO 63863
64202: POP
64203: POP
// end ;
64204: PPOPN 4
64206: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
64207: LD_INT 0
64209: PPUSH
64210: PPUSH
// result := false ;
64211: LD_ADDR_VAR 0 4
64215: PUSH
64216: LD_INT 0
64218: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
64219: LD_VAR 0 1
64223: PPUSH
64224: CALL_OW 264
64228: PUSH
64229: LD_INT 81
64231: EQUAL
64232: NOT
64233: IFFALSE 64237
// exit ;
64235: GO 64481
// index := GetElementIndex ( minersList , unit ) ;
64237: LD_ADDR_VAR 0 5
64241: PUSH
64242: LD_EXP 43
64246: PPUSH
64247: LD_VAR 0 1
64251: PPUSH
64252: CALL 21575 0 2
64256: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
64257: LD_EXP 44
64261: PUSH
64262: LD_VAR 0 5
64266: ARRAY
64267: PUSH
64268: LD_EXP 45
64272: GREATEREQUAL
64273: IFFALSE 64277
// exit ;
64275: GO 64481
// ComMoveXY ( unit , x , y ) ;
64277: LD_VAR 0 1
64281: PPUSH
64282: LD_VAR 0 2
64286: PPUSH
64287: LD_VAR 0 3
64291: PPUSH
64292: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64296: LD_INT 35
64298: PPUSH
64299: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
64303: LD_VAR 0 1
64307: PPUSH
64308: LD_VAR 0 2
64312: PPUSH
64313: LD_VAR 0 3
64317: PPUSH
64318: CALL 53621 0 3
64322: NOT
64323: IFFALSE 64336
64325: PUSH
64326: LD_VAR 0 1
64330: PPUSH
64331: CALL_OW 314
64335: AND
64336: IFFALSE 64340
// exit ;
64338: GO 64481
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
64340: LD_VAR 0 2
64344: PPUSH
64345: LD_VAR 0 3
64349: PPUSH
64350: CALL_OW 428
64354: PUSH
64355: LD_VAR 0 1
64359: EQUAL
64360: IFFALSE 64374
64362: PUSH
64363: LD_VAR 0 1
64367: PPUSH
64368: CALL_OW 314
64372: NOT
64373: AND
64374: IFFALSE 64296
// PlaySoundXY ( x , y , PlantMine ) ;
64376: LD_VAR 0 2
64380: PPUSH
64381: LD_VAR 0 3
64385: PPUSH
64386: LD_STRING PlantMine
64388: PPUSH
64389: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
64393: LD_VAR 0 2
64397: PPUSH
64398: LD_VAR 0 3
64402: PPUSH
64403: LD_VAR 0 1
64407: PPUSH
64408: CALL_OW 255
64412: PPUSH
64413: LD_INT 0
64415: PPUSH
64416: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
64420: LD_ADDR_EXP 44
64424: PUSH
64425: LD_EXP 44
64429: PPUSH
64430: LD_VAR 0 5
64434: PUSH
64435: LD_EXP 44
64439: PUSH
64440: LD_VAR 0 5
64444: ARRAY
64445: PUSH
64446: LD_INT 1
64448: PLUS
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PPUSH
64454: LD_VAR 0 2
64458: PUSH
64459: LD_VAR 0 3
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PPUSH
64468: CALL 21792 0 3
64472: ST_TO_ADDR
// result := true ;
64473: LD_ADDR_VAR 0 4
64477: PUSH
64478: LD_INT 1
64480: ST_TO_ADDR
// end ;
64481: LD_VAR 0 4
64485: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
64486: LD_INT 0
64488: PPUSH
64489: PPUSH
64490: PPUSH
// if not unit in minersList then
64491: LD_VAR 0 1
64495: PUSH
64496: LD_EXP 43
64500: IN
64501: NOT
64502: IFFALSE 64506
// exit ;
64504: GO 64900
// index := GetElementIndex ( minersList , unit ) ;
64506: LD_ADDR_VAR 0 6
64510: PUSH
64511: LD_EXP 43
64515: PPUSH
64516: LD_VAR 0 1
64520: PPUSH
64521: CALL 21575 0 2
64525: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
64526: LD_ADDR_VAR 0 5
64530: PUSH
64531: DOUBLE
64532: LD_EXP 44
64536: PUSH
64537: LD_VAR 0 6
64541: ARRAY
64542: INC
64543: ST_TO_ADDR
64544: LD_INT 1
64546: PUSH
64547: FOR_DOWNTO
64548: IFFALSE 64711
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
64550: LD_EXP 44
64554: PUSH
64555: LD_VAR 0 6
64559: ARRAY
64560: PUSH
64561: LD_VAR 0 5
64565: ARRAY
64566: PUSH
64567: LD_INT 1
64569: ARRAY
64570: PUSH
64571: LD_VAR 0 2
64575: EQUAL
64576: IFFALSE 64606
64578: PUSH
64579: LD_EXP 44
64583: PUSH
64584: LD_VAR 0 6
64588: ARRAY
64589: PUSH
64590: LD_VAR 0 5
64594: ARRAY
64595: PUSH
64596: LD_INT 2
64598: ARRAY
64599: PUSH
64600: LD_VAR 0 3
64604: EQUAL
64605: AND
64606: IFFALSE 64709
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64608: LD_EXP 44
64612: PUSH
64613: LD_VAR 0 6
64617: ARRAY
64618: PUSH
64619: LD_VAR 0 5
64623: ARRAY
64624: PUSH
64625: LD_INT 1
64627: ARRAY
64628: PPUSH
64629: LD_EXP 44
64633: PUSH
64634: LD_VAR 0 6
64638: ARRAY
64639: PUSH
64640: LD_VAR 0 5
64644: ARRAY
64645: PUSH
64646: LD_INT 2
64648: ARRAY
64649: PPUSH
64650: LD_VAR 0 1
64654: PPUSH
64655: CALL_OW 255
64659: PPUSH
64660: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64664: LD_ADDR_EXP 44
64668: PUSH
64669: LD_EXP 44
64673: PPUSH
64674: LD_VAR 0 6
64678: PPUSH
64679: LD_EXP 44
64683: PUSH
64684: LD_VAR 0 6
64688: ARRAY
64689: PPUSH
64690: LD_VAR 0 5
64694: PPUSH
64695: CALL_OW 3
64699: PPUSH
64700: CALL_OW 1
64704: ST_TO_ADDR
// exit ;
64705: POP
64706: POP
64707: GO 64900
// end ; end ;
64709: GO 64547
64711: POP
64712: POP
// for i := minerMinesList [ index ] downto 1 do
64713: LD_ADDR_VAR 0 5
64717: PUSH
64718: DOUBLE
64719: LD_EXP 44
64723: PUSH
64724: LD_VAR 0 6
64728: ARRAY
64729: INC
64730: ST_TO_ADDR
64731: LD_INT 1
64733: PUSH
64734: FOR_DOWNTO
64735: IFFALSE 64898
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
64737: LD_EXP 44
64741: PUSH
64742: LD_VAR 0 6
64746: ARRAY
64747: PUSH
64748: LD_VAR 0 5
64752: ARRAY
64753: PUSH
64754: LD_INT 1
64756: ARRAY
64757: PPUSH
64758: LD_EXP 44
64762: PUSH
64763: LD_VAR 0 6
64767: ARRAY
64768: PUSH
64769: LD_VAR 0 5
64773: ARRAY
64774: PUSH
64775: LD_INT 2
64777: ARRAY
64778: PPUSH
64779: LD_VAR 0 2
64783: PPUSH
64784: LD_VAR 0 3
64788: PPUSH
64789: CALL_OW 298
64793: PUSH
64794: LD_INT 6
64796: LESS
64797: IFFALSE 64896
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64799: LD_EXP 44
64803: PUSH
64804: LD_VAR 0 6
64808: ARRAY
64809: PUSH
64810: LD_VAR 0 5
64814: ARRAY
64815: PUSH
64816: LD_INT 1
64818: ARRAY
64819: PPUSH
64820: LD_EXP 44
64824: PUSH
64825: LD_VAR 0 6
64829: ARRAY
64830: PUSH
64831: LD_VAR 0 5
64835: ARRAY
64836: PUSH
64837: LD_INT 2
64839: ARRAY
64840: PPUSH
64841: LD_VAR 0 1
64845: PPUSH
64846: CALL_OW 255
64850: PPUSH
64851: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64855: LD_ADDR_EXP 44
64859: PUSH
64860: LD_EXP 44
64864: PPUSH
64865: LD_VAR 0 6
64869: PPUSH
64870: LD_EXP 44
64874: PUSH
64875: LD_VAR 0 6
64879: ARRAY
64880: PPUSH
64881: LD_VAR 0 5
64885: PPUSH
64886: CALL_OW 3
64890: PPUSH
64891: CALL_OW 1
64895: ST_TO_ADDR
// end ; end ;
64896: GO 64734
64898: POP
64899: POP
// end ;
64900: LD_VAR 0 4
64904: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
64905: LD_INT 0
64907: PPUSH
64908: PPUSH
64909: PPUSH
64910: PPUSH
64911: PPUSH
64912: PPUSH
64913: PPUSH
64914: PPUSH
64915: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
64916: LD_VAR 0 1
64920: PPUSH
64921: CALL_OW 264
64925: PUSH
64926: LD_INT 81
64928: EQUAL
64929: NOT
64930: IFTRUE 64945
64932: PUSH
64933: LD_VAR 0 1
64937: PUSH
64938: LD_EXP 43
64942: IN
64943: NOT
64944: OR
64945: IFFALSE 64949
// exit ;
64947: GO 65275
// index := GetElementIndex ( minersList , unit ) ;
64949: LD_ADDR_VAR 0 6
64953: PUSH
64954: LD_EXP 43
64958: PPUSH
64959: LD_VAR 0 1
64963: PPUSH
64964: CALL 21575 0 2
64968: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
64969: LD_ADDR_VAR 0 8
64973: PUSH
64974: LD_EXP 45
64978: PUSH
64979: LD_EXP 44
64983: PUSH
64984: LD_VAR 0 6
64988: ARRAY
64989: MINUS
64990: ST_TO_ADDR
// if not minesFreeAmount then
64991: LD_VAR 0 8
64995: NOT
64996: IFFALSE 65000
// exit ;
64998: GO 65275
// tmp := [ ] ;
65000: LD_ADDR_VAR 0 7
65004: PUSH
65005: EMPTY
65006: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
65007: LD_ADDR_VAR 0 5
65011: PUSH
65012: DOUBLE
65013: LD_INT 1
65015: DEC
65016: ST_TO_ADDR
65017: LD_VAR 0 8
65021: PUSH
65022: FOR_TO
65023: IFFALSE 65222
// begin _d := rand ( 0 , 5 ) ;
65025: LD_ADDR_VAR 0 11
65029: PUSH
65030: LD_INT 0
65032: PPUSH
65033: LD_INT 5
65035: PPUSH
65036: CALL_OW 12
65040: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
65041: LD_ADDR_VAR 0 12
65045: PUSH
65046: LD_INT 2
65048: PPUSH
65049: LD_INT 6
65051: PPUSH
65052: CALL_OW 12
65056: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
65057: LD_ADDR_VAR 0 9
65061: PUSH
65062: LD_VAR 0 2
65066: PPUSH
65067: LD_VAR 0 11
65071: PPUSH
65072: LD_VAR 0 12
65076: PPUSH
65077: CALL_OW 272
65081: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
65082: LD_ADDR_VAR 0 10
65086: PUSH
65087: LD_VAR 0 3
65091: PPUSH
65092: LD_VAR 0 11
65096: PPUSH
65097: LD_VAR 0 12
65101: PPUSH
65102: CALL_OW 273
65106: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
65107: LD_VAR 0 9
65111: PPUSH
65112: LD_VAR 0 10
65116: PPUSH
65117: CALL_OW 488
65121: IFFALSE 65145
65123: PUSH
65124: LD_VAR 0 9
65128: PUSH
65129: LD_VAR 0 10
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_VAR 0 7
65142: IN
65143: NOT
65144: AND
65145: IFFALSE 65164
65147: PUSH
65148: LD_VAR 0 9
65152: PPUSH
65153: LD_VAR 0 10
65157: PPUSH
65158: CALL_OW 458
65162: NOT
65163: AND
65164: IFFALSE 65206
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
65166: LD_ADDR_VAR 0 7
65170: PUSH
65171: LD_VAR 0 7
65175: PPUSH
65176: LD_VAR 0 7
65180: PUSH
65181: LD_INT 1
65183: PLUS
65184: PPUSH
65185: LD_VAR 0 9
65189: PUSH
65190: LD_VAR 0 10
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PPUSH
65199: CALL_OW 1
65203: ST_TO_ADDR
65204: GO 65220
// i := i - 1 ;
65206: LD_ADDR_VAR 0 5
65210: PUSH
65211: LD_VAR 0 5
65215: PUSH
65216: LD_INT 1
65218: MINUS
65219: ST_TO_ADDR
// end ;
65220: GO 65022
65222: POP
65223: POP
// for i in tmp do
65224: LD_ADDR_VAR 0 5
65228: PUSH
65229: LD_VAR 0 7
65233: PUSH
65234: FOR_IN
65235: IFFALSE 65273
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
65237: LD_VAR 0 1
65241: PPUSH
65242: LD_VAR 0 5
65246: PUSH
65247: LD_INT 1
65249: ARRAY
65250: PPUSH
65251: LD_VAR 0 5
65255: PUSH
65256: LD_INT 2
65258: ARRAY
65259: PPUSH
65260: CALL 64207 0 3
65264: NOT
65265: IFFALSE 65271
// exit ;
65267: POP
65268: POP
65269: GO 65275
65271: GO 65234
65273: POP
65274: POP
// end ;
65275: LD_VAR 0 4
65279: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
65280: LD_INT 0
65282: PPUSH
65283: PPUSH
65284: PPUSH
65285: PPUSH
65286: PPUSH
65287: PPUSH
65288: PPUSH
65289: PPUSH
65290: PPUSH
// if GetClass ( unit ) <> class_sniper then
65291: LD_VAR 0 1
65295: PPUSH
65296: CALL_OW 257
65300: PUSH
65301: LD_INT 5
65303: NONEQUAL
65304: IFFALSE 65308
// exit ;
65306: GO 65778
// dist := 8 ;
65308: LD_ADDR_VAR 0 5
65312: PUSH
65313: LD_INT 8
65315: ST_TO_ADDR
// viewRange := 12 ;
65316: LD_ADDR_VAR 0 8
65320: PUSH
65321: LD_INT 12
65323: ST_TO_ADDR
// side := GetSide ( unit ) ;
65324: LD_ADDR_VAR 0 6
65328: PUSH
65329: LD_VAR 0 1
65333: PPUSH
65334: CALL_OW 255
65338: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
65339: LD_INT 61
65341: PPUSH
65342: LD_VAR 0 6
65346: PPUSH
65347: CALL_OW 321
65351: PUSH
65352: LD_INT 2
65354: EQUAL
65355: IFFALSE 65365
// viewRange := 16 ;
65357: LD_ADDR_VAR 0 8
65361: PUSH
65362: LD_INT 16
65364: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
65365: LD_VAR 0 1
65369: PPUSH
65370: LD_VAR 0 2
65374: PPUSH
65375: LD_VAR 0 3
65379: PPUSH
65380: CALL_OW 297
65384: PUSH
65385: LD_VAR 0 5
65389: GREATER
65390: IFFALSE 65469
// begin ComMoveXY ( unit , x , y ) ;
65392: LD_VAR 0 1
65396: PPUSH
65397: LD_VAR 0 2
65401: PPUSH
65402: LD_VAR 0 3
65406: PPUSH
65407: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
65411: LD_INT 35
65413: PPUSH
65414: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
65418: LD_VAR 0 1
65422: PPUSH
65423: LD_VAR 0 2
65427: PPUSH
65428: LD_VAR 0 3
65432: PPUSH
65433: CALL 53621 0 3
65437: NOT
65438: IFFALSE 65442
// exit ;
65440: GO 65778
// until GetDistUnitXY ( unit , x , y ) < dist ;
65442: LD_VAR 0 1
65446: PPUSH
65447: LD_VAR 0 2
65451: PPUSH
65452: LD_VAR 0 3
65456: PPUSH
65457: CALL_OW 297
65461: PUSH
65462: LD_VAR 0 5
65466: LESS
65467: IFFALSE 65411
// end ; ComTurnXY ( unit , x , y ) ;
65469: LD_VAR 0 1
65473: PPUSH
65474: LD_VAR 0 2
65478: PPUSH
65479: LD_VAR 0 3
65483: PPUSH
65484: CALL_OW 118
// repeat if Multiplayer then
65488: LD_OWVAR 4
65492: IFFALSE 65503
// wait ( 35 ) else
65494: LD_INT 35
65496: PPUSH
65497: CALL_OW 67
65501: GO 65510
// wait ( 5 ) ;
65503: LD_INT 5
65505: PPUSH
65506: CALL_OW 67
// _d := GetDir ( unit ) ;
65510: LD_ADDR_VAR 0 11
65514: PUSH
65515: LD_VAR 0 1
65519: PPUSH
65520: CALL_OW 254
65524: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
65525: LD_ADDR_VAR 0 7
65529: PUSH
65530: LD_VAR 0 1
65534: PPUSH
65535: CALL_OW 250
65539: PPUSH
65540: LD_VAR 0 1
65544: PPUSH
65545: CALL_OW 251
65549: PPUSH
65550: LD_VAR 0 2
65554: PPUSH
65555: LD_VAR 0 3
65559: PPUSH
65560: CALL 56257 0 4
65564: ST_TO_ADDR
// until dir = _d ;
65565: LD_VAR 0 7
65569: PUSH
65570: LD_VAR 0 11
65574: EQUAL
65575: IFFALSE 65488
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
65577: LD_ADDR_VAR 0 9
65581: PUSH
65582: LD_VAR 0 1
65586: PPUSH
65587: CALL_OW 250
65591: PPUSH
65592: LD_VAR 0 7
65596: PPUSH
65597: LD_VAR 0 5
65601: PPUSH
65602: CALL_OW 272
65606: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
65607: LD_ADDR_VAR 0 10
65611: PUSH
65612: LD_VAR 0 1
65616: PPUSH
65617: CALL_OW 251
65621: PPUSH
65622: LD_VAR 0 7
65626: PPUSH
65627: LD_VAR 0 5
65631: PPUSH
65632: CALL_OW 273
65636: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65637: LD_VAR 0 9
65641: PPUSH
65642: LD_VAR 0 10
65646: PPUSH
65647: CALL_OW 488
65651: NOT
65652: IFFALSE 65656
// exit ;
65654: GO 65778
// ComAnimCustom ( unit , 1 ) ;
65656: LD_VAR 0 1
65660: PPUSH
65661: LD_INT 1
65663: PPUSH
65664: CALL_OW 592
// p := 0 ;
65668: LD_ADDR_VAR 0 12
65672: PUSH
65673: LD_INT 0
65675: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
65676: LD_VAR 0 9
65680: PPUSH
65681: LD_VAR 0 10
65685: PPUSH
65686: LD_VAR 0 6
65690: PPUSH
65691: LD_VAR 0 8
65695: PPUSH
65696: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
65700: LD_INT 35
65702: PPUSH
65703: CALL_OW 67
// p := Inc ( p ) ;
65707: LD_ADDR_VAR 0 12
65711: PUSH
65712: LD_VAR 0 12
65716: PPUSH
65717: CALL 56213 0 1
65721: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
65722: LD_VAR 0 12
65726: PUSH
65727: LD_INT 3
65729: EQUAL
65730: IFTRUE 65744
65732: PUSH
65733: LD_VAR 0 1
65737: PPUSH
65738: CALL_OW 302
65742: NOT
65743: OR
65744: IFTRUE 65757
65746: PUSH
65747: LD_VAR 0 1
65751: PPUSH
65752: CALL_OW 301
65756: OR
65757: IFFALSE 65700
// RemoveSeeing ( _x , _y , side ) ;
65759: LD_VAR 0 9
65763: PPUSH
65764: LD_VAR 0 10
65768: PPUSH
65769: LD_VAR 0 6
65773: PPUSH
65774: CALL_OW 331
// end ;
65778: LD_VAR 0 4
65782: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
65783: LD_INT 0
65785: PPUSH
65786: PPUSH
65787: PPUSH
65788: PPUSH
65789: PPUSH
65790: PPUSH
65791: PPUSH
65792: PPUSH
65793: PPUSH
65794: PPUSH
65795: PPUSH
// if not unit then
65796: LD_VAR 0 1
65800: NOT
65801: IFFALSE 65805
// exit ;
65803: GO 66076
// side := GetSide ( unit ) ;
65805: LD_ADDR_VAR 0 3
65809: PUSH
65810: LD_VAR 0 1
65814: PPUSH
65815: CALL_OW 255
65819: ST_TO_ADDR
// x := GetX ( unit ) ;
65820: LD_ADDR_VAR 0 5
65824: PUSH
65825: LD_VAR 0 1
65829: PPUSH
65830: CALL_OW 250
65834: ST_TO_ADDR
// y := GetY ( unit ) ;
65835: LD_ADDR_VAR 0 6
65839: PUSH
65840: LD_VAR 0 1
65844: PPUSH
65845: CALL_OW 251
65849: ST_TO_ADDR
// r := 8 ;
65850: LD_ADDR_VAR 0 4
65854: PUSH
65855: LD_INT 8
65857: ST_TO_ADDR
// if x - r < 0 then
65858: LD_VAR 0 5
65862: PUSH
65863: LD_VAR 0 4
65867: MINUS
65868: PUSH
65869: LD_INT 0
65871: LESS
65872: IFFALSE 65884
// min_x := 0 else
65874: LD_ADDR_VAR 0 7
65878: PUSH
65879: LD_INT 0
65881: ST_TO_ADDR
65882: GO 65900
// min_x := x - r ;
65884: LD_ADDR_VAR 0 7
65888: PUSH
65889: LD_VAR 0 5
65893: PUSH
65894: LD_VAR 0 4
65898: MINUS
65899: ST_TO_ADDR
// if y - r < 0 then
65900: LD_VAR 0 6
65904: PUSH
65905: LD_VAR 0 4
65909: MINUS
65910: PUSH
65911: LD_INT 0
65913: LESS
65914: IFFALSE 65926
// min_y := 0 else
65916: LD_ADDR_VAR 0 8
65920: PUSH
65921: LD_INT 0
65923: ST_TO_ADDR
65924: GO 65942
// min_y := y - r ;
65926: LD_ADDR_VAR 0 8
65930: PUSH
65931: LD_VAR 0 6
65935: PUSH
65936: LD_VAR 0 4
65940: MINUS
65941: ST_TO_ADDR
// max_x := x + r ;
65942: LD_ADDR_VAR 0 9
65946: PUSH
65947: LD_VAR 0 5
65951: PUSH
65952: LD_VAR 0 4
65956: PLUS
65957: ST_TO_ADDR
// max_y := y + r ;
65958: LD_ADDR_VAR 0 10
65962: PUSH
65963: LD_VAR 0 6
65967: PUSH
65968: LD_VAR 0 4
65972: PLUS
65973: ST_TO_ADDR
// for _x = min_x to max_x do
65974: LD_ADDR_VAR 0 11
65978: PUSH
65979: DOUBLE
65980: LD_VAR 0 7
65984: DEC
65985: ST_TO_ADDR
65986: LD_VAR 0 9
65990: PUSH
65991: FOR_TO
65992: IFFALSE 66074
// for _y = min_y to max_y do
65994: LD_ADDR_VAR 0 12
65998: PUSH
65999: DOUBLE
66000: LD_VAR 0 8
66004: DEC
66005: ST_TO_ADDR
66006: LD_VAR 0 10
66010: PUSH
66011: FOR_TO
66012: IFFALSE 66070
// begin if not ValidHex ( _x , _y ) then
66014: LD_VAR 0 11
66018: PPUSH
66019: LD_VAR 0 12
66023: PPUSH
66024: CALL_OW 488
66028: NOT
66029: IFFALSE 66033
// continue ;
66031: GO 66011
// if MineAtPos ( _x , _y ) then
66033: LD_VAR 0 11
66037: PPUSH
66038: LD_VAR 0 12
66042: PPUSH
66043: CALL_OW 458
66047: IFFALSE 66068
// ViewMineAtPos ( _x , _y , side ) ;
66049: LD_VAR 0 11
66053: PPUSH
66054: LD_VAR 0 12
66058: PPUSH
66059: LD_VAR 0 3
66063: PPUSH
66064: CALL_OW 457
// end ;
66068: GO 66011
66070: POP
66071: POP
66072: GO 65991
66074: POP
66075: POP
// end ;
66076: LD_VAR 0 2
66080: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
66081: LD_INT 0
66083: PPUSH
66084: PPUSH
66085: PPUSH
66086: PPUSH
66087: PPUSH
66088: PPUSH
// if not units then
66089: LD_VAR 0 1
66093: NOT
66094: IFFALSE 66098
// exit ;
66096: GO 66528
// scaners := [ ] ;
66098: LD_ADDR_VAR 0 6
66102: PUSH
66103: EMPTY
66104: ST_TO_ADDR
// for i in units do
66105: LD_ADDR_VAR 0 3
66109: PUSH
66110: LD_VAR 0 1
66114: PUSH
66115: FOR_IN
66116: IFFALSE 66273
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
66118: LD_VAR 0 3
66122: PPUSH
66123: CALL_OW 264
66127: PUSH
66128: LD_INT 11
66130: NONEQUAL
66131: IFTRUE 66145
66133: PUSH
66134: LD_VAR 0 3
66138: PPUSH
66139: CALL_OW 302
66143: NOT
66144: OR
66145: IFTRUE 66162
66147: PUSH
66148: LD_VAR 0 3
66152: PPUSH
66153: CALL_OW 110
66157: PUSH
66158: LD_INT 502
66160: EQUAL
66161: OR
66162: IFFALSE 66166
// continue ;
66164: GO 66115
// ComStop ( i ) ;
66166: LD_VAR 0 3
66170: PPUSH
66171: CALL_OW 141
// x := GetX ( i ) ;
66175: LD_ADDR_VAR 0 4
66179: PUSH
66180: LD_VAR 0 3
66184: PPUSH
66185: CALL_OW 250
66189: ST_TO_ADDR
// y := GetY ( i ) ;
66190: LD_ADDR_VAR 0 5
66194: PUSH
66195: LD_VAR 0 3
66199: PPUSH
66200: CALL_OW 251
66204: ST_TO_ADDR
// if GetSide ( i ) = your_side then
66205: LD_VAR 0 3
66209: PPUSH
66210: CALL_OW 255
66214: PUSH
66215: LD_OWVAR 2
66219: EQUAL
66220: IFFALSE 66239
// PlaySoundXY ( x , y , mineDetector ) ;
66222: LD_VAR 0 4
66226: PPUSH
66227: LD_VAR 0 5
66231: PPUSH
66232: LD_STRING mineDetector
66234: PPUSH
66235: CALL_OW 366
// scaners := Join ( scaners , i ) ;
66239: LD_ADDR_VAR 0 6
66243: PUSH
66244: LD_VAR 0 6
66248: PPUSH
66249: LD_VAR 0 3
66253: PPUSH
66254: CALL 54840 0 2
66258: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
66259: LD_VAR 0 3
66263: PPUSH
66264: LD_INT 502
66266: PPUSH
66267: CALL_OW 109
// end ;
66271: GO 66115
66273: POP
66274: POP
// if not scaners then
66275: LD_VAR 0 6
66279: NOT
66280: IFFALSE 66284
// exit ;
66282: GO 66528
// wait ( 3 ) ;
66284: LD_INT 3
66286: PPUSH
66287: CALL_OW 67
// timer := 6 ;
66291: LD_ADDR_VAR 0 7
66295: PUSH
66296: LD_INT 6
66298: ST_TO_ADDR
// repeat for i in scaners do
66299: LD_ADDR_VAR 0 3
66303: PUSH
66304: LD_VAR 0 6
66308: PUSH
66309: FOR_IN
66310: IFFALSE 66426
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
66312: LD_VAR 0 3
66316: PPUSH
66317: CALL_OW 302
66321: NOT
66322: IFTRUE 66335
66324: PUSH
66325: LD_VAR 0 3
66329: PPUSH
66330: CALL_OW 314
66334: OR
66335: IFTRUE 66366
66337: PUSH
66338: LD_VAR 0 3
66342: PPUSH
66343: CALL_OW 263
66347: PUSH
66348: LD_INT 1
66350: EQUAL
66351: IFFALSE 66365
66353: PUSH
66354: LD_VAR 0 3
66358: PPUSH
66359: CALL_OW 311
66363: NOT
66364: AND
66365: OR
66366: IFFALSE 66410
// begin SetUnitDisplayNumber ( i , 0 ) ;
66368: LD_VAR 0 3
66372: PPUSH
66373: LD_INT 0
66375: PPUSH
66376: CALL_OW 505
// SetTag ( i , 0 ) ;
66380: LD_VAR 0 3
66384: PPUSH
66385: LD_INT 0
66387: PPUSH
66388: CALL_OW 109
// scaners := scaners diff i ;
66392: LD_ADDR_VAR 0 6
66396: PUSH
66397: LD_VAR 0 6
66401: PUSH
66402: LD_VAR 0 3
66406: DIFF
66407: ST_TO_ADDR
// continue ;
66408: GO 66309
// end ; SetUnitDisplayNumber ( i , timer ) ;
66410: LD_VAR 0 3
66414: PPUSH
66415: LD_VAR 0 7
66419: PPUSH
66420: CALL_OW 505
// end ;
66424: GO 66309
66426: POP
66427: POP
// if not scaners then
66428: LD_VAR 0 6
66432: NOT
66433: IFFALSE 66437
// exit ;
66435: GO 66528
// timer := Dec ( timer ) ;
66437: LD_ADDR_VAR 0 7
66441: PUSH
66442: LD_VAR 0 7
66446: PPUSH
66447: CALL 56235 0 1
66451: ST_TO_ADDR
// wait ( 0 0$1 ) ;
66452: LD_INT 35
66454: PPUSH
66455: CALL_OW 67
// until timer = 0 ;
66459: LD_VAR 0 7
66463: PUSH
66464: LD_INT 0
66466: EQUAL
66467: IFFALSE 66299
// if not scaners then
66469: LD_VAR 0 6
66473: NOT
66474: IFFALSE 66478
// exit ;
66476: GO 66528
// for i in scaners do
66478: LD_ADDR_VAR 0 3
66482: PUSH
66483: LD_VAR 0 6
66487: PUSH
66488: FOR_IN
66489: IFFALSE 66526
// begin SetUnitDisplayNumber ( i , 0 ) ;
66491: LD_VAR 0 3
66495: PPUSH
66496: LD_INT 0
66498: PPUSH
66499: CALL_OW 505
// SetTag ( i , 0 ) ;
66503: LD_VAR 0 3
66507: PPUSH
66508: LD_INT 0
66510: PPUSH
66511: CALL_OW 109
// RevealDetectorMine ( i ) ;
66515: LD_VAR 0 3
66519: PPUSH
66520: CALL 65783 0 1
// end ;
66524: GO 66488
66526: POP
66527: POP
// end ;
66528: LD_VAR 0 2
66532: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
66533: LD_INT 0
66535: PPUSH
// if p1 = mine_detector_mode then
66536: LD_VAR 0 2
66540: PUSH
66541: LD_INT 103
66543: EQUAL
66544: IFFALSE 66555
// DetectMine ( units ) ;
66546: LD_VAR 0 1
66550: PPUSH
66551: CALL 66081 0 1
// end ; end_of_file
66555: LD_VAR 0 7
66559: RET
// export globalGameSaveCounter ; every 0 0$1 do
66560: GO 66562
66562: DISABLE
// begin enable ;
66563: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
66564: LD_STRING updateTimer(
66566: PUSH
66567: LD_OWVAR 1
66571: STR
66572: PUSH
66573: LD_STRING );
66575: STR
66576: PPUSH
66577: CALL_OW 559
// end ;
66581: END
// every 0 0$1 do
66582: GO 66584
66584: DISABLE
// begin globalGameSaveCounter := 0 ;
66585: LD_ADDR_EXP 46
66589: PUSH
66590: LD_INT 0
66592: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
66593: LD_STRING setGameSaveCounter(0)
66595: PPUSH
66596: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
66600: LD_STRING initStreamRollete();
66602: PPUSH
66603: CALL_OW 559
// InitStreamMode ;
66607: CALL 67952 0 0
// DefineStreamItems ( false ) ;
66611: LD_INT 0
66613: PPUSH
66614: CALL 68416 0 1
// end ;
66618: END
// export function SOS_MapStart ( ) ; begin
66619: LD_INT 0
66621: PPUSH
// if streamModeActive then
66622: LD_EXP 47
66626: IFFALSE 66635
// DefineStreamItems ( true ) ;
66628: LD_INT 1
66630: PPUSH
66631: CALL 68416 0 1
// UpdateLuaVariables ( ) ;
66635: CALL 66652 0 0
// UpdateFactoryWaypoints ( ) ;
66639: CALL 81538 0 0
// UpdateWarehouseGatheringPoints ( ) ;
66643: CALL 81790 0 0
// end ;
66647: LD_VAR 0 1
66651: RET
// function UpdateLuaVariables ( ) ; begin
66652: LD_INT 0
66654: PPUSH
// if globalGameSaveCounter then
66655: LD_EXP 46
66659: IFFALSE 66693
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
66661: LD_ADDR_EXP 46
66665: PUSH
66666: LD_EXP 46
66670: PPUSH
66671: CALL 56213 0 1
66675: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
66676: LD_STRING setGameSaveCounter(
66678: PUSH
66679: LD_EXP 46
66683: STR
66684: PUSH
66685: LD_STRING )
66687: STR
66688: PPUSH
66689: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
66693: LD_STRING setGameDifficulty(
66695: PUSH
66696: LD_OWVAR 67
66700: STR
66701: PUSH
66702: LD_STRING )
66704: STR
66705: PPUSH
66706: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
66710: LD_STRING displayDifficulty(
66712: PUSH
66713: LD_OWVAR 67
66717: STR
66718: PUSH
66719: LD_STRING )
66721: STR
66722: PPUSH
66723: CALL_OW 559
// end ;
66727: LD_VAR 0 1
66731: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
66732: LD_INT 0
66734: PPUSH
// if p2 = stream_mode then
66735: LD_VAR 0 2
66739: PUSH
66740: LD_INT 100
66742: EQUAL
66743: IFFALSE 67746
// begin if not StreamModeActive then
66745: LD_EXP 47
66749: NOT
66750: IFFALSE 66760
// StreamModeActive := true ;
66752: LD_ADDR_EXP 47
66756: PUSH
66757: LD_INT 1
66759: ST_TO_ADDR
// if p3 = 0 then
66760: LD_VAR 0 3
66764: PUSH
66765: LD_INT 0
66767: EQUAL
66768: IFFALSE 66774
// InitStreamMode ;
66770: CALL 67952 0 0
// if p3 = 1 then
66774: LD_VAR 0 3
66778: PUSH
66779: LD_INT 1
66781: EQUAL
66782: IFFALSE 66792
// sRocket := true ;
66784: LD_ADDR_EXP 52
66788: PUSH
66789: LD_INT 1
66791: ST_TO_ADDR
// if p3 = 2 then
66792: LD_VAR 0 3
66796: PUSH
66797: LD_INT 2
66799: EQUAL
66800: IFFALSE 66810
// sSpeed := true ;
66802: LD_ADDR_EXP 51
66806: PUSH
66807: LD_INT 1
66809: ST_TO_ADDR
// if p3 = 3 then
66810: LD_VAR 0 3
66814: PUSH
66815: LD_INT 3
66817: EQUAL
66818: IFFALSE 66828
// sEngine := true ;
66820: LD_ADDR_EXP 53
66824: PUSH
66825: LD_INT 1
66827: ST_TO_ADDR
// if p3 = 4 then
66828: LD_VAR 0 3
66832: PUSH
66833: LD_INT 4
66835: EQUAL
66836: IFFALSE 66846
// sSpec := true ;
66838: LD_ADDR_EXP 50
66842: PUSH
66843: LD_INT 1
66845: ST_TO_ADDR
// if p3 = 5 then
66846: LD_VAR 0 3
66850: PUSH
66851: LD_INT 5
66853: EQUAL
66854: IFFALSE 66864
// sLevel := true ;
66856: LD_ADDR_EXP 54
66860: PUSH
66861: LD_INT 1
66863: ST_TO_ADDR
// if p3 = 6 then
66864: LD_VAR 0 3
66868: PUSH
66869: LD_INT 6
66871: EQUAL
66872: IFFALSE 66882
// sArmoury := true ;
66874: LD_ADDR_EXP 55
66878: PUSH
66879: LD_INT 1
66881: ST_TO_ADDR
// if p3 = 7 then
66882: LD_VAR 0 3
66886: PUSH
66887: LD_INT 7
66889: EQUAL
66890: IFFALSE 66900
// sRadar := true ;
66892: LD_ADDR_EXP 56
66896: PUSH
66897: LD_INT 1
66899: ST_TO_ADDR
// if p3 = 8 then
66900: LD_VAR 0 3
66904: PUSH
66905: LD_INT 8
66907: EQUAL
66908: IFFALSE 66918
// sBunker := true ;
66910: LD_ADDR_EXP 57
66914: PUSH
66915: LD_INT 1
66917: ST_TO_ADDR
// if p3 = 9 then
66918: LD_VAR 0 3
66922: PUSH
66923: LD_INT 9
66925: EQUAL
66926: IFFALSE 66936
// sHack := true ;
66928: LD_ADDR_EXP 58
66932: PUSH
66933: LD_INT 1
66935: ST_TO_ADDR
// if p3 = 10 then
66936: LD_VAR 0 3
66940: PUSH
66941: LD_INT 10
66943: EQUAL
66944: IFFALSE 66954
// sFire := true ;
66946: LD_ADDR_EXP 59
66950: PUSH
66951: LD_INT 1
66953: ST_TO_ADDR
// if p3 = 11 then
66954: LD_VAR 0 3
66958: PUSH
66959: LD_INT 11
66961: EQUAL
66962: IFFALSE 66972
// sRefresh := true ;
66964: LD_ADDR_EXP 60
66968: PUSH
66969: LD_INT 1
66971: ST_TO_ADDR
// if p3 = 12 then
66972: LD_VAR 0 3
66976: PUSH
66977: LD_INT 12
66979: EQUAL
66980: IFFALSE 66990
// sExp := true ;
66982: LD_ADDR_EXP 61
66986: PUSH
66987: LD_INT 1
66989: ST_TO_ADDR
// if p3 = 13 then
66990: LD_VAR 0 3
66994: PUSH
66995: LD_INT 13
66997: EQUAL
66998: IFFALSE 67008
// sDepot := true ;
67000: LD_ADDR_EXP 62
67004: PUSH
67005: LD_INT 1
67007: ST_TO_ADDR
// if p3 = 14 then
67008: LD_VAR 0 3
67012: PUSH
67013: LD_INT 14
67015: EQUAL
67016: IFFALSE 67026
// sFlag := true ;
67018: LD_ADDR_EXP 63
67022: PUSH
67023: LD_INT 1
67025: ST_TO_ADDR
// if p3 = 15 then
67026: LD_VAR 0 3
67030: PUSH
67031: LD_INT 15
67033: EQUAL
67034: IFFALSE 67044
// sKamikadze := true ;
67036: LD_ADDR_EXP 71
67040: PUSH
67041: LD_INT 1
67043: ST_TO_ADDR
// if p3 = 16 then
67044: LD_VAR 0 3
67048: PUSH
67049: LD_INT 16
67051: EQUAL
67052: IFFALSE 67062
// sTroll := true ;
67054: LD_ADDR_EXP 72
67058: PUSH
67059: LD_INT 1
67061: ST_TO_ADDR
// if p3 = 17 then
67062: LD_VAR 0 3
67066: PUSH
67067: LD_INT 17
67069: EQUAL
67070: IFFALSE 67080
// sSlow := true ;
67072: LD_ADDR_EXP 73
67076: PUSH
67077: LD_INT 1
67079: ST_TO_ADDR
// if p3 = 18 then
67080: LD_VAR 0 3
67084: PUSH
67085: LD_INT 18
67087: EQUAL
67088: IFFALSE 67098
// sLack := true ;
67090: LD_ADDR_EXP 74
67094: PUSH
67095: LD_INT 1
67097: ST_TO_ADDR
// if p3 = 19 then
67098: LD_VAR 0 3
67102: PUSH
67103: LD_INT 19
67105: EQUAL
67106: IFFALSE 67116
// sTank := true ;
67108: LD_ADDR_EXP 76
67112: PUSH
67113: LD_INT 1
67115: ST_TO_ADDR
// if p3 = 20 then
67116: LD_VAR 0 3
67120: PUSH
67121: LD_INT 20
67123: EQUAL
67124: IFFALSE 67134
// sRemote := true ;
67126: LD_ADDR_EXP 77
67130: PUSH
67131: LD_INT 1
67133: ST_TO_ADDR
// if p3 = 21 then
67134: LD_VAR 0 3
67138: PUSH
67139: LD_INT 21
67141: EQUAL
67142: IFFALSE 67152
// sPowell := true ;
67144: LD_ADDR_EXP 78
67148: PUSH
67149: LD_INT 1
67151: ST_TO_ADDR
// if p3 = 22 then
67152: LD_VAR 0 3
67156: PUSH
67157: LD_INT 22
67159: EQUAL
67160: IFFALSE 67170
// sTeleport := true ;
67162: LD_ADDR_EXP 81
67166: PUSH
67167: LD_INT 1
67169: ST_TO_ADDR
// if p3 = 23 then
67170: LD_VAR 0 3
67174: PUSH
67175: LD_INT 23
67177: EQUAL
67178: IFFALSE 67188
// sOilTower := true ;
67180: LD_ADDR_EXP 83
67184: PUSH
67185: LD_INT 1
67187: ST_TO_ADDR
// if p3 = 24 then
67188: LD_VAR 0 3
67192: PUSH
67193: LD_INT 24
67195: EQUAL
67196: IFFALSE 67206
// sShovel := true ;
67198: LD_ADDR_EXP 84
67202: PUSH
67203: LD_INT 1
67205: ST_TO_ADDR
// if p3 = 25 then
67206: LD_VAR 0 3
67210: PUSH
67211: LD_INT 25
67213: EQUAL
67214: IFFALSE 67224
// sSheik := true ;
67216: LD_ADDR_EXP 85
67220: PUSH
67221: LD_INT 1
67223: ST_TO_ADDR
// if p3 = 26 then
67224: LD_VAR 0 3
67228: PUSH
67229: LD_INT 26
67231: EQUAL
67232: IFFALSE 67242
// sEarthquake := true ;
67234: LD_ADDR_EXP 87
67238: PUSH
67239: LD_INT 1
67241: ST_TO_ADDR
// if p3 = 27 then
67242: LD_VAR 0 3
67246: PUSH
67247: LD_INT 27
67249: EQUAL
67250: IFFALSE 67260
// sAI := true ;
67252: LD_ADDR_EXP 88
67256: PUSH
67257: LD_INT 1
67259: ST_TO_ADDR
// if p3 = 28 then
67260: LD_VAR 0 3
67264: PUSH
67265: LD_INT 28
67267: EQUAL
67268: IFFALSE 67278
// sCargo := true ;
67270: LD_ADDR_EXP 91
67274: PUSH
67275: LD_INT 1
67277: ST_TO_ADDR
// if p3 = 29 then
67278: LD_VAR 0 3
67282: PUSH
67283: LD_INT 29
67285: EQUAL
67286: IFFALSE 67296
// sDLaser := true ;
67288: LD_ADDR_EXP 92
67292: PUSH
67293: LD_INT 1
67295: ST_TO_ADDR
// if p3 = 30 then
67296: LD_VAR 0 3
67300: PUSH
67301: LD_INT 30
67303: EQUAL
67304: IFFALSE 67314
// sExchange := true ;
67306: LD_ADDR_EXP 93
67310: PUSH
67311: LD_INT 1
67313: ST_TO_ADDR
// if p3 = 31 then
67314: LD_VAR 0 3
67318: PUSH
67319: LD_INT 31
67321: EQUAL
67322: IFFALSE 67332
// sFac := true ;
67324: LD_ADDR_EXP 94
67328: PUSH
67329: LD_INT 1
67331: ST_TO_ADDR
// if p3 = 32 then
67332: LD_VAR 0 3
67336: PUSH
67337: LD_INT 32
67339: EQUAL
67340: IFFALSE 67350
// sPower := true ;
67342: LD_ADDR_EXP 95
67346: PUSH
67347: LD_INT 1
67349: ST_TO_ADDR
// if p3 = 33 then
67350: LD_VAR 0 3
67354: PUSH
67355: LD_INT 33
67357: EQUAL
67358: IFFALSE 67368
// sRandom := true ;
67360: LD_ADDR_EXP 96
67364: PUSH
67365: LD_INT 1
67367: ST_TO_ADDR
// if p3 = 34 then
67368: LD_VAR 0 3
67372: PUSH
67373: LD_INT 34
67375: EQUAL
67376: IFFALSE 67386
// sShield := true ;
67378: LD_ADDR_EXP 97
67382: PUSH
67383: LD_INT 1
67385: ST_TO_ADDR
// if p3 = 35 then
67386: LD_VAR 0 3
67390: PUSH
67391: LD_INT 35
67393: EQUAL
67394: IFFALSE 67404
// sTime := true ;
67396: LD_ADDR_EXP 98
67400: PUSH
67401: LD_INT 1
67403: ST_TO_ADDR
// if p3 = 36 then
67404: LD_VAR 0 3
67408: PUSH
67409: LD_INT 36
67411: EQUAL
67412: IFFALSE 67422
// sTools := true ;
67414: LD_ADDR_EXP 99
67418: PUSH
67419: LD_INT 1
67421: ST_TO_ADDR
// if p3 = 101 then
67422: LD_VAR 0 3
67426: PUSH
67427: LD_INT 101
67429: EQUAL
67430: IFFALSE 67440
// sSold := true ;
67432: LD_ADDR_EXP 64
67436: PUSH
67437: LD_INT 1
67439: ST_TO_ADDR
// if p3 = 102 then
67440: LD_VAR 0 3
67444: PUSH
67445: LD_INT 102
67447: EQUAL
67448: IFFALSE 67458
// sDiff := true ;
67450: LD_ADDR_EXP 65
67454: PUSH
67455: LD_INT 1
67457: ST_TO_ADDR
// if p3 = 103 then
67458: LD_VAR 0 3
67462: PUSH
67463: LD_INT 103
67465: EQUAL
67466: IFFALSE 67476
// sFog := true ;
67468: LD_ADDR_EXP 68
67472: PUSH
67473: LD_INT 1
67475: ST_TO_ADDR
// if p3 = 104 then
67476: LD_VAR 0 3
67480: PUSH
67481: LD_INT 104
67483: EQUAL
67484: IFFALSE 67494
// sReset := true ;
67486: LD_ADDR_EXP 69
67490: PUSH
67491: LD_INT 1
67493: ST_TO_ADDR
// if p3 = 105 then
67494: LD_VAR 0 3
67498: PUSH
67499: LD_INT 105
67501: EQUAL
67502: IFFALSE 67512
// sSun := true ;
67504: LD_ADDR_EXP 70
67508: PUSH
67509: LD_INT 1
67511: ST_TO_ADDR
// if p3 = 106 then
67512: LD_VAR 0 3
67516: PUSH
67517: LD_INT 106
67519: EQUAL
67520: IFFALSE 67530
// sTiger := true ;
67522: LD_ADDR_EXP 66
67526: PUSH
67527: LD_INT 1
67529: ST_TO_ADDR
// if p3 = 107 then
67530: LD_VAR 0 3
67534: PUSH
67535: LD_INT 107
67537: EQUAL
67538: IFFALSE 67548
// sBomb := true ;
67540: LD_ADDR_EXP 67
67544: PUSH
67545: LD_INT 1
67547: ST_TO_ADDR
// if p3 = 108 then
67548: LD_VAR 0 3
67552: PUSH
67553: LD_INT 108
67555: EQUAL
67556: IFFALSE 67566
// sWound := true ;
67558: LD_ADDR_EXP 75
67562: PUSH
67563: LD_INT 1
67565: ST_TO_ADDR
// if p3 = 109 then
67566: LD_VAR 0 3
67570: PUSH
67571: LD_INT 109
67573: EQUAL
67574: IFFALSE 67584
// sBetray := true ;
67576: LD_ADDR_EXP 79
67580: PUSH
67581: LD_INT 1
67583: ST_TO_ADDR
// if p3 = 110 then
67584: LD_VAR 0 3
67588: PUSH
67589: LD_INT 110
67591: EQUAL
67592: IFFALSE 67602
// sContamin := true ;
67594: LD_ADDR_EXP 80
67598: PUSH
67599: LD_INT 1
67601: ST_TO_ADDR
// if p3 = 111 then
67602: LD_VAR 0 3
67606: PUSH
67607: LD_INT 111
67609: EQUAL
67610: IFFALSE 67620
// sOil := true ;
67612: LD_ADDR_EXP 82
67616: PUSH
67617: LD_INT 1
67619: ST_TO_ADDR
// if p3 = 112 then
67620: LD_VAR 0 3
67624: PUSH
67625: LD_INT 112
67627: EQUAL
67628: IFFALSE 67638
// sStu := true ;
67630: LD_ADDR_EXP 86
67634: PUSH
67635: LD_INT 1
67637: ST_TO_ADDR
// if p3 = 113 then
67638: LD_VAR 0 3
67642: PUSH
67643: LD_INT 113
67645: EQUAL
67646: IFFALSE 67656
// sBazooka := true ;
67648: LD_ADDR_EXP 89
67652: PUSH
67653: LD_INT 1
67655: ST_TO_ADDR
// if p3 = 114 then
67656: LD_VAR 0 3
67660: PUSH
67661: LD_INT 114
67663: EQUAL
67664: IFFALSE 67674
// sMortar := true ;
67666: LD_ADDR_EXP 90
67670: PUSH
67671: LD_INT 1
67673: ST_TO_ADDR
// if p3 = 115 then
67674: LD_VAR 0 3
67678: PUSH
67679: LD_INT 115
67681: EQUAL
67682: IFFALSE 67692
// sRanger := true ;
67684: LD_ADDR_EXP 100
67688: PUSH
67689: LD_INT 1
67691: ST_TO_ADDR
// if p3 = 116 then
67692: LD_VAR 0 3
67696: PUSH
67697: LD_INT 116
67699: EQUAL
67700: IFFALSE 67710
// sComputer := true ;
67702: LD_ADDR_EXP 101
67706: PUSH
67707: LD_INT 1
67709: ST_TO_ADDR
// if p3 = 117 then
67710: LD_VAR 0 3
67714: PUSH
67715: LD_INT 117
67717: EQUAL
67718: IFFALSE 67728
// s30 := true ;
67720: LD_ADDR_EXP 102
67724: PUSH
67725: LD_INT 1
67727: ST_TO_ADDR
// if p3 = 118 then
67728: LD_VAR 0 3
67732: PUSH
67733: LD_INT 118
67735: EQUAL
67736: IFFALSE 67746
// s60 := true ;
67738: LD_ADDR_EXP 103
67742: PUSH
67743: LD_INT 1
67745: ST_TO_ADDR
// end ; if p2 = hack_mode then
67746: LD_VAR 0 2
67750: PUSH
67751: LD_INT 101
67753: EQUAL
67754: IFFALSE 67882
// begin case p3 of 1 :
67756: LD_VAR 0 3
67760: PUSH
67761: LD_INT 1
67763: DOUBLE
67764: EQUAL
67765: IFTRUE 67769
67767: GO 67776
67769: POP
// hHackUnlimitedResources ; 2 :
67770: CALL 80145 0 0
67774: GO 67882
67776: LD_INT 2
67778: DOUBLE
67779: EQUAL
67780: IFTRUE 67784
67782: GO 67791
67784: POP
// hHackSetLevel10 ; 3 :
67785: CALL 80278 0 0
67789: GO 67882
67791: LD_INT 3
67793: DOUBLE
67794: EQUAL
67795: IFTRUE 67799
67797: GO 67806
67799: POP
// hHackSetLevel10YourUnits ; 4 :
67800: CALL 80363 0 0
67804: GO 67882
67806: LD_INT 4
67808: DOUBLE
67809: EQUAL
67810: IFTRUE 67814
67812: GO 67821
67814: POP
// hHackInvincible ; 5 :
67815: CALL 80811 0 0
67819: GO 67882
67821: LD_INT 5
67823: DOUBLE
67824: EQUAL
67825: IFTRUE 67829
67827: GO 67836
67829: POP
// hHackInvisible ; 6 :
67830: CALL 80922 0 0
67834: GO 67882
67836: LD_INT 6
67838: DOUBLE
67839: EQUAL
67840: IFTRUE 67844
67842: GO 67851
67844: POP
// hHackChangeYourSide ; 7 :
67845: CALL 80979 0 0
67849: GO 67882
67851: LD_INT 7
67853: DOUBLE
67854: EQUAL
67855: IFTRUE 67859
67857: GO 67866
67859: POP
// hHackChangeUnitSide ; 8 :
67860: CALL 81021 0 0
67864: GO 67882
67866: LD_INT 8
67868: DOUBLE
67869: EQUAL
67870: IFTRUE 67874
67872: GO 67881
67874: POP
// hHackFog ; end ;
67875: CALL 81122 0 0
67879: GO 67882
67881: POP
// end ; if p2 = game_save_mode then
67882: LD_VAR 0 2
67886: PUSH
67887: LD_INT 102
67889: EQUAL
67890: IFFALSE 67947
// begin if p3 = 1 then
67892: LD_VAR 0 3
67896: PUSH
67897: LD_INT 1
67899: EQUAL
67900: IFFALSE 67912
// globalGameSaveCounter := p4 ;
67902: LD_ADDR_EXP 46
67906: PUSH
67907: LD_VAR 0 4
67911: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
67912: LD_VAR 0 3
67916: PUSH
67917: LD_INT 2
67919: EQUAL
67920: IFFALSE 67928
67922: PUSH
67923: LD_EXP 46
67927: AND
67928: IFFALSE 67947
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
67930: LD_STRING setGameSaveCounter(
67932: PUSH
67933: LD_EXP 46
67937: STR
67938: PUSH
67939: LD_STRING )
67941: STR
67942: PPUSH
67943: CALL_OW 559
// end ; end ;
67947: LD_VAR 0 7
67951: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
67952: LD_INT 0
67954: PPUSH
// streamModeActive := false ;
67955: LD_ADDR_EXP 47
67959: PUSH
67960: LD_INT 0
67962: ST_TO_ADDR
// normalCounter := 36 ;
67963: LD_ADDR_EXP 48
67967: PUSH
67968: LD_INT 36
67970: ST_TO_ADDR
// hardcoreCounter := 18 ;
67971: LD_ADDR_EXP 49
67975: PUSH
67976: LD_INT 18
67978: ST_TO_ADDR
// sRocket := false ;
67979: LD_ADDR_EXP 52
67983: PUSH
67984: LD_INT 0
67986: ST_TO_ADDR
// sSpeed := false ;
67987: LD_ADDR_EXP 51
67991: PUSH
67992: LD_INT 0
67994: ST_TO_ADDR
// sEngine := false ;
67995: LD_ADDR_EXP 53
67999: PUSH
68000: LD_INT 0
68002: ST_TO_ADDR
// sSpec := false ;
68003: LD_ADDR_EXP 50
68007: PUSH
68008: LD_INT 0
68010: ST_TO_ADDR
// sLevel := false ;
68011: LD_ADDR_EXP 54
68015: PUSH
68016: LD_INT 0
68018: ST_TO_ADDR
// sArmoury := false ;
68019: LD_ADDR_EXP 55
68023: PUSH
68024: LD_INT 0
68026: ST_TO_ADDR
// sRadar := false ;
68027: LD_ADDR_EXP 56
68031: PUSH
68032: LD_INT 0
68034: ST_TO_ADDR
// sBunker := false ;
68035: LD_ADDR_EXP 57
68039: PUSH
68040: LD_INT 0
68042: ST_TO_ADDR
// sHack := false ;
68043: LD_ADDR_EXP 58
68047: PUSH
68048: LD_INT 0
68050: ST_TO_ADDR
// sFire := false ;
68051: LD_ADDR_EXP 59
68055: PUSH
68056: LD_INT 0
68058: ST_TO_ADDR
// sRefresh := false ;
68059: LD_ADDR_EXP 60
68063: PUSH
68064: LD_INT 0
68066: ST_TO_ADDR
// sExp := false ;
68067: LD_ADDR_EXP 61
68071: PUSH
68072: LD_INT 0
68074: ST_TO_ADDR
// sDepot := false ;
68075: LD_ADDR_EXP 62
68079: PUSH
68080: LD_INT 0
68082: ST_TO_ADDR
// sFlag := false ;
68083: LD_ADDR_EXP 63
68087: PUSH
68088: LD_INT 0
68090: ST_TO_ADDR
// sKamikadze := false ;
68091: LD_ADDR_EXP 71
68095: PUSH
68096: LD_INT 0
68098: ST_TO_ADDR
// sTroll := false ;
68099: LD_ADDR_EXP 72
68103: PUSH
68104: LD_INT 0
68106: ST_TO_ADDR
// sSlow := false ;
68107: LD_ADDR_EXP 73
68111: PUSH
68112: LD_INT 0
68114: ST_TO_ADDR
// sLack := false ;
68115: LD_ADDR_EXP 74
68119: PUSH
68120: LD_INT 0
68122: ST_TO_ADDR
// sTank := false ;
68123: LD_ADDR_EXP 76
68127: PUSH
68128: LD_INT 0
68130: ST_TO_ADDR
// sRemote := false ;
68131: LD_ADDR_EXP 77
68135: PUSH
68136: LD_INT 0
68138: ST_TO_ADDR
// sPowell := false ;
68139: LD_ADDR_EXP 78
68143: PUSH
68144: LD_INT 0
68146: ST_TO_ADDR
// sTeleport := false ;
68147: LD_ADDR_EXP 81
68151: PUSH
68152: LD_INT 0
68154: ST_TO_ADDR
// sOilTower := false ;
68155: LD_ADDR_EXP 83
68159: PUSH
68160: LD_INT 0
68162: ST_TO_ADDR
// sShovel := false ;
68163: LD_ADDR_EXP 84
68167: PUSH
68168: LD_INT 0
68170: ST_TO_ADDR
// sSheik := false ;
68171: LD_ADDR_EXP 85
68175: PUSH
68176: LD_INT 0
68178: ST_TO_ADDR
// sEarthquake := false ;
68179: LD_ADDR_EXP 87
68183: PUSH
68184: LD_INT 0
68186: ST_TO_ADDR
// sAI := false ;
68187: LD_ADDR_EXP 88
68191: PUSH
68192: LD_INT 0
68194: ST_TO_ADDR
// sCargo := false ;
68195: LD_ADDR_EXP 91
68199: PUSH
68200: LD_INT 0
68202: ST_TO_ADDR
// sDLaser := false ;
68203: LD_ADDR_EXP 92
68207: PUSH
68208: LD_INT 0
68210: ST_TO_ADDR
// sExchange := false ;
68211: LD_ADDR_EXP 93
68215: PUSH
68216: LD_INT 0
68218: ST_TO_ADDR
// sFac := false ;
68219: LD_ADDR_EXP 94
68223: PUSH
68224: LD_INT 0
68226: ST_TO_ADDR
// sPower := false ;
68227: LD_ADDR_EXP 95
68231: PUSH
68232: LD_INT 0
68234: ST_TO_ADDR
// sRandom := false ;
68235: LD_ADDR_EXP 96
68239: PUSH
68240: LD_INT 0
68242: ST_TO_ADDR
// sShield := false ;
68243: LD_ADDR_EXP 97
68247: PUSH
68248: LD_INT 0
68250: ST_TO_ADDR
// sTime := false ;
68251: LD_ADDR_EXP 98
68255: PUSH
68256: LD_INT 0
68258: ST_TO_ADDR
// sTools := false ;
68259: LD_ADDR_EXP 99
68263: PUSH
68264: LD_INT 0
68266: ST_TO_ADDR
// sSold := false ;
68267: LD_ADDR_EXP 64
68271: PUSH
68272: LD_INT 0
68274: ST_TO_ADDR
// sDiff := false ;
68275: LD_ADDR_EXP 65
68279: PUSH
68280: LD_INT 0
68282: ST_TO_ADDR
// sFog := false ;
68283: LD_ADDR_EXP 68
68287: PUSH
68288: LD_INT 0
68290: ST_TO_ADDR
// sReset := false ;
68291: LD_ADDR_EXP 69
68295: PUSH
68296: LD_INT 0
68298: ST_TO_ADDR
// sSun := false ;
68299: LD_ADDR_EXP 70
68303: PUSH
68304: LD_INT 0
68306: ST_TO_ADDR
// sTiger := false ;
68307: LD_ADDR_EXP 66
68311: PUSH
68312: LD_INT 0
68314: ST_TO_ADDR
// sBomb := false ;
68315: LD_ADDR_EXP 67
68319: PUSH
68320: LD_INT 0
68322: ST_TO_ADDR
// sWound := false ;
68323: LD_ADDR_EXP 75
68327: PUSH
68328: LD_INT 0
68330: ST_TO_ADDR
// sBetray := false ;
68331: LD_ADDR_EXP 79
68335: PUSH
68336: LD_INT 0
68338: ST_TO_ADDR
// sContamin := false ;
68339: LD_ADDR_EXP 80
68343: PUSH
68344: LD_INT 0
68346: ST_TO_ADDR
// sOil := false ;
68347: LD_ADDR_EXP 82
68351: PUSH
68352: LD_INT 0
68354: ST_TO_ADDR
// sStu := false ;
68355: LD_ADDR_EXP 86
68359: PUSH
68360: LD_INT 0
68362: ST_TO_ADDR
// sBazooka := false ;
68363: LD_ADDR_EXP 89
68367: PUSH
68368: LD_INT 0
68370: ST_TO_ADDR
// sMortar := false ;
68371: LD_ADDR_EXP 90
68375: PUSH
68376: LD_INT 0
68378: ST_TO_ADDR
// sRanger := false ;
68379: LD_ADDR_EXP 100
68383: PUSH
68384: LD_INT 0
68386: ST_TO_ADDR
// sComputer := false ;
68387: LD_ADDR_EXP 101
68391: PUSH
68392: LD_INT 0
68394: ST_TO_ADDR
// s30 := false ;
68395: LD_ADDR_EXP 102
68399: PUSH
68400: LD_INT 0
68402: ST_TO_ADDR
// s60 := false ;
68403: LD_ADDR_EXP 103
68407: PUSH
68408: LD_INT 0
68410: ST_TO_ADDR
// end ;
68411: LD_VAR 0 1
68415: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
68416: LD_INT 0
68418: PPUSH
68419: PPUSH
68420: PPUSH
68421: PPUSH
68422: PPUSH
68423: PPUSH
68424: PPUSH
// result := [ ] ;
68425: LD_ADDR_VAR 0 2
68429: PUSH
68430: EMPTY
68431: ST_TO_ADDR
// if campaign_id = 1 then
68432: LD_OWVAR 69
68436: PUSH
68437: LD_INT 1
68439: EQUAL
68440: IFFALSE 71606
// begin case mission_number of 1 :
68442: LD_OWVAR 70
68446: PUSH
68447: LD_INT 1
68449: DOUBLE
68450: EQUAL
68451: IFTRUE 68455
68453: GO 68531
68455: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
68456: LD_ADDR_VAR 0 2
68460: PUSH
68461: LD_INT 2
68463: PUSH
68464: LD_INT 4
68466: PUSH
68467: LD_INT 11
68469: PUSH
68470: LD_INT 12
68472: PUSH
68473: LD_INT 15
68475: PUSH
68476: LD_INT 16
68478: PUSH
68479: LD_INT 22
68481: PUSH
68482: LD_INT 23
68484: PUSH
68485: LD_INT 26
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: PUSH
68499: LD_INT 101
68501: PUSH
68502: LD_INT 102
68504: PUSH
68505: LD_INT 106
68507: PUSH
68508: LD_INT 116
68510: PUSH
68511: LD_INT 117
68513: PUSH
68514: LD_INT 118
68516: PUSH
68517: EMPTY
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: ST_TO_ADDR
68529: GO 71604
68531: LD_INT 2
68533: DOUBLE
68534: EQUAL
68535: IFTRUE 68539
68537: GO 68623
68539: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
68540: LD_ADDR_VAR 0 2
68544: PUSH
68545: LD_INT 2
68547: PUSH
68548: LD_INT 4
68550: PUSH
68551: LD_INT 11
68553: PUSH
68554: LD_INT 12
68556: PUSH
68557: LD_INT 15
68559: PUSH
68560: LD_INT 16
68562: PUSH
68563: LD_INT 22
68565: PUSH
68566: LD_INT 23
68568: PUSH
68569: LD_INT 26
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: LIST
68576: LIST
68577: LIST
68578: LIST
68579: LIST
68580: LIST
68581: LIST
68582: PUSH
68583: LD_INT 101
68585: PUSH
68586: LD_INT 102
68588: PUSH
68589: LD_INT 105
68591: PUSH
68592: LD_INT 106
68594: PUSH
68595: LD_INT 108
68597: PUSH
68598: LD_INT 116
68600: PUSH
68601: LD_INT 117
68603: PUSH
68604: LD_INT 118
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: LIST
68611: LIST
68612: LIST
68613: LIST
68614: LIST
68615: LIST
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: ST_TO_ADDR
68621: GO 71604
68623: LD_INT 3
68625: DOUBLE
68626: EQUAL
68627: IFTRUE 68631
68629: GO 68719
68631: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
68632: LD_ADDR_VAR 0 2
68636: PUSH
68637: LD_INT 2
68639: PUSH
68640: LD_INT 4
68642: PUSH
68643: LD_INT 5
68645: PUSH
68646: LD_INT 11
68648: PUSH
68649: LD_INT 12
68651: PUSH
68652: LD_INT 15
68654: PUSH
68655: LD_INT 16
68657: PUSH
68658: LD_INT 22
68660: PUSH
68661: LD_INT 26
68663: PUSH
68664: LD_INT 36
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: PUSH
68679: LD_INT 101
68681: PUSH
68682: LD_INT 102
68684: PUSH
68685: LD_INT 105
68687: PUSH
68688: LD_INT 106
68690: PUSH
68691: LD_INT 108
68693: PUSH
68694: LD_INT 116
68696: PUSH
68697: LD_INT 117
68699: PUSH
68700: LD_INT 118
68702: PUSH
68703: EMPTY
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: ST_TO_ADDR
68717: GO 71604
68719: LD_INT 4
68721: DOUBLE
68722: EQUAL
68723: IFTRUE 68727
68725: GO 68823
68727: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
68728: LD_ADDR_VAR 0 2
68732: PUSH
68733: LD_INT 2
68735: PUSH
68736: LD_INT 4
68738: PUSH
68739: LD_INT 5
68741: PUSH
68742: LD_INT 8
68744: PUSH
68745: LD_INT 11
68747: PUSH
68748: LD_INT 12
68750: PUSH
68751: LD_INT 15
68753: PUSH
68754: LD_INT 16
68756: PUSH
68757: LD_INT 22
68759: PUSH
68760: LD_INT 23
68762: PUSH
68763: LD_INT 26
68765: PUSH
68766: LD_INT 36
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: LIST
68779: LIST
68780: LIST
68781: LIST
68782: PUSH
68783: LD_INT 101
68785: PUSH
68786: LD_INT 102
68788: PUSH
68789: LD_INT 105
68791: PUSH
68792: LD_INT 106
68794: PUSH
68795: LD_INT 108
68797: PUSH
68798: LD_INT 116
68800: PUSH
68801: LD_INT 117
68803: PUSH
68804: LD_INT 118
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: LIST
68811: LIST
68812: LIST
68813: LIST
68814: LIST
68815: LIST
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: ST_TO_ADDR
68821: GO 71604
68823: LD_INT 5
68825: DOUBLE
68826: EQUAL
68827: IFTRUE 68831
68829: GO 68943
68831: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
68832: LD_ADDR_VAR 0 2
68836: PUSH
68837: LD_INT 2
68839: PUSH
68840: LD_INT 4
68842: PUSH
68843: LD_INT 5
68845: PUSH
68846: LD_INT 6
68848: PUSH
68849: LD_INT 8
68851: PUSH
68852: LD_INT 11
68854: PUSH
68855: LD_INT 12
68857: PUSH
68858: LD_INT 15
68860: PUSH
68861: LD_INT 16
68863: PUSH
68864: LD_INT 22
68866: PUSH
68867: LD_INT 23
68869: PUSH
68870: LD_INT 25
68872: PUSH
68873: LD_INT 26
68875: PUSH
68876: LD_INT 36
68878: PUSH
68879: EMPTY
68880: LIST
68881: LIST
68882: LIST
68883: LIST
68884: LIST
68885: LIST
68886: LIST
68887: LIST
68888: LIST
68889: LIST
68890: LIST
68891: LIST
68892: LIST
68893: LIST
68894: PUSH
68895: LD_INT 101
68897: PUSH
68898: LD_INT 102
68900: PUSH
68901: LD_INT 105
68903: PUSH
68904: LD_INT 106
68906: PUSH
68907: LD_INT 108
68909: PUSH
68910: LD_INT 109
68912: PUSH
68913: LD_INT 112
68915: PUSH
68916: LD_INT 116
68918: PUSH
68919: LD_INT 117
68921: PUSH
68922: LD_INT 118
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: LIST
68929: LIST
68930: LIST
68931: LIST
68932: LIST
68933: LIST
68934: LIST
68935: LIST
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: ST_TO_ADDR
68941: GO 71604
68943: LD_INT 6
68945: DOUBLE
68946: EQUAL
68947: IFTRUE 68951
68949: GO 69083
68951: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
68952: LD_ADDR_VAR 0 2
68956: PUSH
68957: LD_INT 2
68959: PUSH
68960: LD_INT 4
68962: PUSH
68963: LD_INT 5
68965: PUSH
68966: LD_INT 6
68968: PUSH
68969: LD_INT 8
68971: PUSH
68972: LD_INT 11
68974: PUSH
68975: LD_INT 12
68977: PUSH
68978: LD_INT 15
68980: PUSH
68981: LD_INT 16
68983: PUSH
68984: LD_INT 20
68986: PUSH
68987: LD_INT 21
68989: PUSH
68990: LD_INT 22
68992: PUSH
68993: LD_INT 23
68995: PUSH
68996: LD_INT 25
68998: PUSH
68999: LD_INT 26
69001: PUSH
69002: LD_INT 30
69004: PUSH
69005: LD_INT 31
69007: PUSH
69008: LD_INT 32
69010: PUSH
69011: LD_INT 36
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: LIST
69033: LIST
69034: PUSH
69035: LD_INT 101
69037: PUSH
69038: LD_INT 102
69040: PUSH
69041: LD_INT 105
69043: PUSH
69044: LD_INT 106
69046: PUSH
69047: LD_INT 108
69049: PUSH
69050: LD_INT 109
69052: PUSH
69053: LD_INT 112
69055: PUSH
69056: LD_INT 116
69058: PUSH
69059: LD_INT 117
69061: PUSH
69062: LD_INT 118
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: LIST
69075: LIST
69076: PUSH
69077: EMPTY
69078: LIST
69079: LIST
69080: ST_TO_ADDR
69081: GO 71604
69083: LD_INT 7
69085: DOUBLE
69086: EQUAL
69087: IFTRUE 69091
69089: GO 69203
69091: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
69092: LD_ADDR_VAR 0 2
69096: PUSH
69097: LD_INT 2
69099: PUSH
69100: LD_INT 4
69102: PUSH
69103: LD_INT 5
69105: PUSH
69106: LD_INT 7
69108: PUSH
69109: LD_INT 11
69111: PUSH
69112: LD_INT 12
69114: PUSH
69115: LD_INT 15
69117: PUSH
69118: LD_INT 16
69120: PUSH
69121: LD_INT 20
69123: PUSH
69124: LD_INT 21
69126: PUSH
69127: LD_INT 22
69129: PUSH
69130: LD_INT 23
69132: PUSH
69133: LD_INT 25
69135: PUSH
69136: LD_INT 26
69138: PUSH
69139: EMPTY
69140: LIST
69141: LIST
69142: LIST
69143: LIST
69144: LIST
69145: LIST
69146: LIST
69147: LIST
69148: LIST
69149: LIST
69150: LIST
69151: LIST
69152: LIST
69153: LIST
69154: PUSH
69155: LD_INT 101
69157: PUSH
69158: LD_INT 102
69160: PUSH
69161: LD_INT 103
69163: PUSH
69164: LD_INT 105
69166: PUSH
69167: LD_INT 106
69169: PUSH
69170: LD_INT 108
69172: PUSH
69173: LD_INT 112
69175: PUSH
69176: LD_INT 116
69178: PUSH
69179: LD_INT 117
69181: PUSH
69182: LD_INT 118
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: LIST
69191: LIST
69192: LIST
69193: LIST
69194: LIST
69195: LIST
69196: PUSH
69197: EMPTY
69198: LIST
69199: LIST
69200: ST_TO_ADDR
69201: GO 71604
69203: LD_INT 8
69205: DOUBLE
69206: EQUAL
69207: IFTRUE 69211
69209: GO 69351
69211: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
69212: LD_ADDR_VAR 0 2
69216: PUSH
69217: LD_INT 2
69219: PUSH
69220: LD_INT 4
69222: PUSH
69223: LD_INT 5
69225: PUSH
69226: LD_INT 6
69228: PUSH
69229: LD_INT 7
69231: PUSH
69232: LD_INT 8
69234: PUSH
69235: LD_INT 11
69237: PUSH
69238: LD_INT 12
69240: PUSH
69241: LD_INT 15
69243: PUSH
69244: LD_INT 16
69246: PUSH
69247: LD_INT 20
69249: PUSH
69250: LD_INT 21
69252: PUSH
69253: LD_INT 22
69255: PUSH
69256: LD_INT 23
69258: PUSH
69259: LD_INT 25
69261: PUSH
69262: LD_INT 26
69264: PUSH
69265: LD_INT 30
69267: PUSH
69268: LD_INT 31
69270: PUSH
69271: LD_INT 32
69273: PUSH
69274: LD_INT 36
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: LIST
69281: LIST
69282: LIST
69283: LIST
69284: LIST
69285: LIST
69286: LIST
69287: LIST
69288: LIST
69289: LIST
69290: LIST
69291: LIST
69292: LIST
69293: LIST
69294: LIST
69295: LIST
69296: LIST
69297: LIST
69298: PUSH
69299: LD_INT 101
69301: PUSH
69302: LD_INT 102
69304: PUSH
69305: LD_INT 103
69307: PUSH
69308: LD_INT 105
69310: PUSH
69311: LD_INT 106
69313: PUSH
69314: LD_INT 108
69316: PUSH
69317: LD_INT 109
69319: PUSH
69320: LD_INT 112
69322: PUSH
69323: LD_INT 116
69325: PUSH
69326: LD_INT 117
69328: PUSH
69329: LD_INT 118
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: LIST
69336: LIST
69337: LIST
69338: LIST
69339: LIST
69340: LIST
69341: LIST
69342: LIST
69343: LIST
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: ST_TO_ADDR
69349: GO 71604
69351: LD_INT 9
69353: DOUBLE
69354: EQUAL
69355: IFTRUE 69359
69357: GO 69507
69359: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
69360: LD_ADDR_VAR 0 2
69364: PUSH
69365: LD_INT 2
69367: PUSH
69368: LD_INT 4
69370: PUSH
69371: LD_INT 5
69373: PUSH
69374: LD_INT 6
69376: PUSH
69377: LD_INT 7
69379: PUSH
69380: LD_INT 8
69382: PUSH
69383: LD_INT 11
69385: PUSH
69386: LD_INT 12
69388: PUSH
69389: LD_INT 15
69391: PUSH
69392: LD_INT 16
69394: PUSH
69395: LD_INT 20
69397: PUSH
69398: LD_INT 21
69400: PUSH
69401: LD_INT 22
69403: PUSH
69404: LD_INT 23
69406: PUSH
69407: LD_INT 25
69409: PUSH
69410: LD_INT 26
69412: PUSH
69413: LD_INT 28
69415: PUSH
69416: LD_INT 30
69418: PUSH
69419: LD_INT 31
69421: PUSH
69422: LD_INT 32
69424: PUSH
69425: LD_INT 36
69427: PUSH
69428: EMPTY
69429: LIST
69430: LIST
69431: LIST
69432: LIST
69433: LIST
69434: LIST
69435: LIST
69436: LIST
69437: LIST
69438: LIST
69439: LIST
69440: LIST
69441: LIST
69442: LIST
69443: LIST
69444: LIST
69445: LIST
69446: LIST
69447: LIST
69448: LIST
69449: LIST
69450: PUSH
69451: LD_INT 101
69453: PUSH
69454: LD_INT 102
69456: PUSH
69457: LD_INT 103
69459: PUSH
69460: LD_INT 105
69462: PUSH
69463: LD_INT 106
69465: PUSH
69466: LD_INT 108
69468: PUSH
69469: LD_INT 109
69471: PUSH
69472: LD_INT 112
69474: PUSH
69475: LD_INT 114
69477: PUSH
69478: LD_INT 116
69480: PUSH
69481: LD_INT 117
69483: PUSH
69484: LD_INT 118
69486: PUSH
69487: EMPTY
69488: LIST
69489: LIST
69490: LIST
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: LIST
69496: LIST
69497: LIST
69498: LIST
69499: LIST
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: ST_TO_ADDR
69505: GO 71604
69507: LD_INT 10
69509: DOUBLE
69510: EQUAL
69511: IFTRUE 69515
69513: GO 69711
69515: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
69516: LD_ADDR_VAR 0 2
69520: PUSH
69521: LD_INT 2
69523: PUSH
69524: LD_INT 4
69526: PUSH
69527: LD_INT 5
69529: PUSH
69530: LD_INT 6
69532: PUSH
69533: LD_INT 7
69535: PUSH
69536: LD_INT 8
69538: PUSH
69539: LD_INT 9
69541: PUSH
69542: LD_INT 10
69544: PUSH
69545: LD_INT 11
69547: PUSH
69548: LD_INT 12
69550: PUSH
69551: LD_INT 13
69553: PUSH
69554: LD_INT 14
69556: PUSH
69557: LD_INT 15
69559: PUSH
69560: LD_INT 16
69562: PUSH
69563: LD_INT 17
69565: PUSH
69566: LD_INT 18
69568: PUSH
69569: LD_INT 19
69571: PUSH
69572: LD_INT 20
69574: PUSH
69575: LD_INT 21
69577: PUSH
69578: LD_INT 22
69580: PUSH
69581: LD_INT 23
69583: PUSH
69584: LD_INT 24
69586: PUSH
69587: LD_INT 25
69589: PUSH
69590: LD_INT 26
69592: PUSH
69593: LD_INT 28
69595: PUSH
69596: LD_INT 30
69598: PUSH
69599: LD_INT 31
69601: PUSH
69602: LD_INT 32
69604: PUSH
69605: LD_INT 36
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: LIST
69612: LIST
69613: LIST
69614: LIST
69615: LIST
69616: LIST
69617: LIST
69618: LIST
69619: LIST
69620: LIST
69621: LIST
69622: LIST
69623: LIST
69624: LIST
69625: LIST
69626: LIST
69627: LIST
69628: LIST
69629: LIST
69630: LIST
69631: LIST
69632: LIST
69633: LIST
69634: LIST
69635: LIST
69636: LIST
69637: LIST
69638: PUSH
69639: LD_INT 101
69641: PUSH
69642: LD_INT 102
69644: PUSH
69645: LD_INT 103
69647: PUSH
69648: LD_INT 104
69650: PUSH
69651: LD_INT 105
69653: PUSH
69654: LD_INT 106
69656: PUSH
69657: LD_INT 107
69659: PUSH
69660: LD_INT 108
69662: PUSH
69663: LD_INT 109
69665: PUSH
69666: LD_INT 110
69668: PUSH
69669: LD_INT 111
69671: PUSH
69672: LD_INT 112
69674: PUSH
69675: LD_INT 114
69677: PUSH
69678: LD_INT 116
69680: PUSH
69681: LD_INT 117
69683: PUSH
69684: LD_INT 118
69686: PUSH
69687: EMPTY
69688: LIST
69689: LIST
69690: LIST
69691: LIST
69692: LIST
69693: LIST
69694: LIST
69695: LIST
69696: LIST
69697: LIST
69698: LIST
69699: LIST
69700: LIST
69701: LIST
69702: LIST
69703: LIST
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: ST_TO_ADDR
69709: GO 71604
69711: LD_INT 11
69713: DOUBLE
69714: EQUAL
69715: IFTRUE 69719
69717: GO 69923
69719: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
69720: LD_ADDR_VAR 0 2
69724: PUSH
69725: LD_INT 2
69727: PUSH
69728: LD_INT 3
69730: PUSH
69731: LD_INT 4
69733: PUSH
69734: LD_INT 5
69736: PUSH
69737: LD_INT 6
69739: PUSH
69740: LD_INT 7
69742: PUSH
69743: LD_INT 8
69745: PUSH
69746: LD_INT 9
69748: PUSH
69749: LD_INT 10
69751: PUSH
69752: LD_INT 11
69754: PUSH
69755: LD_INT 12
69757: PUSH
69758: LD_INT 13
69760: PUSH
69761: LD_INT 14
69763: PUSH
69764: LD_INT 15
69766: PUSH
69767: LD_INT 16
69769: PUSH
69770: LD_INT 17
69772: PUSH
69773: LD_INT 18
69775: PUSH
69776: LD_INT 19
69778: PUSH
69779: LD_INT 20
69781: PUSH
69782: LD_INT 21
69784: PUSH
69785: LD_INT 22
69787: PUSH
69788: LD_INT 23
69790: PUSH
69791: LD_INT 24
69793: PUSH
69794: LD_INT 25
69796: PUSH
69797: LD_INT 26
69799: PUSH
69800: LD_INT 28
69802: PUSH
69803: LD_INT 30
69805: PUSH
69806: LD_INT 31
69808: PUSH
69809: LD_INT 32
69811: PUSH
69812: LD_INT 34
69814: PUSH
69815: LD_INT 36
69817: PUSH
69818: EMPTY
69819: LIST
69820: LIST
69821: LIST
69822: LIST
69823: LIST
69824: LIST
69825: LIST
69826: LIST
69827: LIST
69828: LIST
69829: LIST
69830: LIST
69831: LIST
69832: LIST
69833: LIST
69834: LIST
69835: LIST
69836: LIST
69837: LIST
69838: LIST
69839: LIST
69840: LIST
69841: LIST
69842: LIST
69843: LIST
69844: LIST
69845: LIST
69846: LIST
69847: LIST
69848: LIST
69849: LIST
69850: PUSH
69851: LD_INT 101
69853: PUSH
69854: LD_INT 102
69856: PUSH
69857: LD_INT 103
69859: PUSH
69860: LD_INT 104
69862: PUSH
69863: LD_INT 105
69865: PUSH
69866: LD_INT 106
69868: PUSH
69869: LD_INT 107
69871: PUSH
69872: LD_INT 108
69874: PUSH
69875: LD_INT 109
69877: PUSH
69878: LD_INT 110
69880: PUSH
69881: LD_INT 111
69883: PUSH
69884: LD_INT 112
69886: PUSH
69887: LD_INT 114
69889: PUSH
69890: LD_INT 116
69892: PUSH
69893: LD_INT 117
69895: PUSH
69896: LD_INT 118
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: LIST
69903: LIST
69904: LIST
69905: LIST
69906: LIST
69907: LIST
69908: LIST
69909: LIST
69910: LIST
69911: LIST
69912: LIST
69913: LIST
69914: LIST
69915: LIST
69916: PUSH
69917: EMPTY
69918: LIST
69919: LIST
69920: ST_TO_ADDR
69921: GO 71604
69923: LD_INT 12
69925: DOUBLE
69926: EQUAL
69927: IFTRUE 69931
69929: GO 70151
69931: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
69932: LD_ADDR_VAR 0 2
69936: PUSH
69937: LD_INT 1
69939: PUSH
69940: LD_INT 2
69942: PUSH
69943: LD_INT 3
69945: PUSH
69946: LD_INT 4
69948: PUSH
69949: LD_INT 5
69951: PUSH
69952: LD_INT 6
69954: PUSH
69955: LD_INT 7
69957: PUSH
69958: LD_INT 8
69960: PUSH
69961: LD_INT 9
69963: PUSH
69964: LD_INT 10
69966: PUSH
69967: LD_INT 11
69969: PUSH
69970: LD_INT 12
69972: PUSH
69973: LD_INT 13
69975: PUSH
69976: LD_INT 14
69978: PUSH
69979: LD_INT 15
69981: PUSH
69982: LD_INT 16
69984: PUSH
69985: LD_INT 17
69987: PUSH
69988: LD_INT 18
69990: PUSH
69991: LD_INT 19
69993: PUSH
69994: LD_INT 20
69996: PUSH
69997: LD_INT 21
69999: PUSH
70000: LD_INT 22
70002: PUSH
70003: LD_INT 23
70005: PUSH
70006: LD_INT 24
70008: PUSH
70009: LD_INT 25
70011: PUSH
70012: LD_INT 26
70014: PUSH
70015: LD_INT 27
70017: PUSH
70018: LD_INT 28
70020: PUSH
70021: LD_INT 30
70023: PUSH
70024: LD_INT 31
70026: PUSH
70027: LD_INT 32
70029: PUSH
70030: LD_INT 33
70032: PUSH
70033: LD_INT 34
70035: PUSH
70036: LD_INT 36
70038: PUSH
70039: EMPTY
70040: LIST
70041: LIST
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: PUSH
70075: LD_INT 101
70077: PUSH
70078: LD_INT 102
70080: PUSH
70081: LD_INT 103
70083: PUSH
70084: LD_INT 104
70086: PUSH
70087: LD_INT 105
70089: PUSH
70090: LD_INT 106
70092: PUSH
70093: LD_INT 107
70095: PUSH
70096: LD_INT 108
70098: PUSH
70099: LD_INT 109
70101: PUSH
70102: LD_INT 110
70104: PUSH
70105: LD_INT 111
70107: PUSH
70108: LD_INT 112
70110: PUSH
70111: LD_INT 113
70113: PUSH
70114: LD_INT 114
70116: PUSH
70117: LD_INT 116
70119: PUSH
70120: LD_INT 117
70122: PUSH
70123: LD_INT 118
70125: PUSH
70126: EMPTY
70127: LIST
70128: LIST
70129: LIST
70130: LIST
70131: LIST
70132: LIST
70133: LIST
70134: LIST
70135: LIST
70136: LIST
70137: LIST
70138: LIST
70139: LIST
70140: LIST
70141: LIST
70142: LIST
70143: LIST
70144: PUSH
70145: EMPTY
70146: LIST
70147: LIST
70148: ST_TO_ADDR
70149: GO 71604
70151: LD_INT 13
70153: DOUBLE
70154: EQUAL
70155: IFTRUE 70159
70157: GO 70367
70159: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
70160: LD_ADDR_VAR 0 2
70164: PUSH
70165: LD_INT 1
70167: PUSH
70168: LD_INT 2
70170: PUSH
70171: LD_INT 3
70173: PUSH
70174: LD_INT 4
70176: PUSH
70177: LD_INT 5
70179: PUSH
70180: LD_INT 8
70182: PUSH
70183: LD_INT 9
70185: PUSH
70186: LD_INT 10
70188: PUSH
70189: LD_INT 11
70191: PUSH
70192: LD_INT 12
70194: PUSH
70195: LD_INT 14
70197: PUSH
70198: LD_INT 15
70200: PUSH
70201: LD_INT 16
70203: PUSH
70204: LD_INT 17
70206: PUSH
70207: LD_INT 18
70209: PUSH
70210: LD_INT 19
70212: PUSH
70213: LD_INT 20
70215: PUSH
70216: LD_INT 21
70218: PUSH
70219: LD_INT 22
70221: PUSH
70222: LD_INT 23
70224: PUSH
70225: LD_INT 24
70227: PUSH
70228: LD_INT 25
70230: PUSH
70231: LD_INT 26
70233: PUSH
70234: LD_INT 27
70236: PUSH
70237: LD_INT 28
70239: PUSH
70240: LD_INT 30
70242: PUSH
70243: LD_INT 31
70245: PUSH
70246: LD_INT 32
70248: PUSH
70249: LD_INT 33
70251: PUSH
70252: LD_INT 34
70254: PUSH
70255: LD_INT 36
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: LIST
70264: LIST
70265: LIST
70266: LIST
70267: LIST
70268: LIST
70269: LIST
70270: LIST
70271: LIST
70272: LIST
70273: LIST
70274: LIST
70275: LIST
70276: LIST
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: LIST
70285: LIST
70286: LIST
70287: LIST
70288: LIST
70289: LIST
70290: PUSH
70291: LD_INT 101
70293: PUSH
70294: LD_INT 102
70296: PUSH
70297: LD_INT 103
70299: PUSH
70300: LD_INT 104
70302: PUSH
70303: LD_INT 105
70305: PUSH
70306: LD_INT 106
70308: PUSH
70309: LD_INT 107
70311: PUSH
70312: LD_INT 108
70314: PUSH
70315: LD_INT 109
70317: PUSH
70318: LD_INT 110
70320: PUSH
70321: LD_INT 111
70323: PUSH
70324: LD_INT 112
70326: PUSH
70327: LD_INT 113
70329: PUSH
70330: LD_INT 114
70332: PUSH
70333: LD_INT 116
70335: PUSH
70336: LD_INT 117
70338: PUSH
70339: LD_INT 118
70341: PUSH
70342: EMPTY
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: LIST
70352: LIST
70353: LIST
70354: LIST
70355: LIST
70356: LIST
70357: LIST
70358: LIST
70359: LIST
70360: PUSH
70361: EMPTY
70362: LIST
70363: LIST
70364: ST_TO_ADDR
70365: GO 71604
70367: LD_INT 14
70369: DOUBLE
70370: EQUAL
70371: IFTRUE 70375
70373: GO 70599
70375: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
70376: LD_ADDR_VAR 0 2
70380: PUSH
70381: LD_INT 1
70383: PUSH
70384: LD_INT 2
70386: PUSH
70387: LD_INT 3
70389: PUSH
70390: LD_INT 4
70392: PUSH
70393: LD_INT 5
70395: PUSH
70396: LD_INT 6
70398: PUSH
70399: LD_INT 7
70401: PUSH
70402: LD_INT 8
70404: PUSH
70405: LD_INT 9
70407: PUSH
70408: LD_INT 10
70410: PUSH
70411: LD_INT 11
70413: PUSH
70414: LD_INT 12
70416: PUSH
70417: LD_INT 13
70419: PUSH
70420: LD_INT 14
70422: PUSH
70423: LD_INT 15
70425: PUSH
70426: LD_INT 16
70428: PUSH
70429: LD_INT 17
70431: PUSH
70432: LD_INT 18
70434: PUSH
70435: LD_INT 19
70437: PUSH
70438: LD_INT 20
70440: PUSH
70441: LD_INT 21
70443: PUSH
70444: LD_INT 22
70446: PUSH
70447: LD_INT 23
70449: PUSH
70450: LD_INT 24
70452: PUSH
70453: LD_INT 25
70455: PUSH
70456: LD_INT 26
70458: PUSH
70459: LD_INT 27
70461: PUSH
70462: LD_INT 28
70464: PUSH
70465: LD_INT 29
70467: PUSH
70468: LD_INT 30
70470: PUSH
70471: LD_INT 31
70473: PUSH
70474: LD_INT 32
70476: PUSH
70477: LD_INT 33
70479: PUSH
70480: LD_INT 34
70482: PUSH
70483: LD_INT 36
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: LIST
70500: LIST
70501: LIST
70502: LIST
70503: LIST
70504: LIST
70505: LIST
70506: LIST
70507: LIST
70508: LIST
70509: LIST
70510: LIST
70511: LIST
70512: LIST
70513: LIST
70514: LIST
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: PUSH
70523: LD_INT 101
70525: PUSH
70526: LD_INT 102
70528: PUSH
70529: LD_INT 103
70531: PUSH
70532: LD_INT 104
70534: PUSH
70535: LD_INT 105
70537: PUSH
70538: LD_INT 106
70540: PUSH
70541: LD_INT 107
70543: PUSH
70544: LD_INT 108
70546: PUSH
70547: LD_INT 109
70549: PUSH
70550: LD_INT 110
70552: PUSH
70553: LD_INT 111
70555: PUSH
70556: LD_INT 112
70558: PUSH
70559: LD_INT 113
70561: PUSH
70562: LD_INT 114
70564: PUSH
70565: LD_INT 116
70567: PUSH
70568: LD_INT 117
70570: PUSH
70571: LD_INT 118
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: LIST
70578: LIST
70579: LIST
70580: LIST
70581: LIST
70582: LIST
70583: LIST
70584: LIST
70585: LIST
70586: LIST
70587: LIST
70588: LIST
70589: LIST
70590: LIST
70591: LIST
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: ST_TO_ADDR
70597: GO 71604
70599: LD_INT 15
70601: DOUBLE
70602: EQUAL
70603: IFTRUE 70607
70605: GO 70831
70607: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
70608: LD_ADDR_VAR 0 2
70612: PUSH
70613: LD_INT 1
70615: PUSH
70616: LD_INT 2
70618: PUSH
70619: LD_INT 3
70621: PUSH
70622: LD_INT 4
70624: PUSH
70625: LD_INT 5
70627: PUSH
70628: LD_INT 6
70630: PUSH
70631: LD_INT 7
70633: PUSH
70634: LD_INT 8
70636: PUSH
70637: LD_INT 9
70639: PUSH
70640: LD_INT 10
70642: PUSH
70643: LD_INT 11
70645: PUSH
70646: LD_INT 12
70648: PUSH
70649: LD_INT 13
70651: PUSH
70652: LD_INT 14
70654: PUSH
70655: LD_INT 15
70657: PUSH
70658: LD_INT 16
70660: PUSH
70661: LD_INT 17
70663: PUSH
70664: LD_INT 18
70666: PUSH
70667: LD_INT 19
70669: PUSH
70670: LD_INT 20
70672: PUSH
70673: LD_INT 21
70675: PUSH
70676: LD_INT 22
70678: PUSH
70679: LD_INT 23
70681: PUSH
70682: LD_INT 24
70684: PUSH
70685: LD_INT 25
70687: PUSH
70688: LD_INT 26
70690: PUSH
70691: LD_INT 27
70693: PUSH
70694: LD_INT 28
70696: PUSH
70697: LD_INT 29
70699: PUSH
70700: LD_INT 30
70702: PUSH
70703: LD_INT 31
70705: PUSH
70706: LD_INT 32
70708: PUSH
70709: LD_INT 33
70711: PUSH
70712: LD_INT 34
70714: PUSH
70715: LD_INT 36
70717: PUSH
70718: EMPTY
70719: LIST
70720: LIST
70721: LIST
70722: LIST
70723: LIST
70724: LIST
70725: LIST
70726: LIST
70727: LIST
70728: LIST
70729: LIST
70730: LIST
70731: LIST
70732: LIST
70733: LIST
70734: LIST
70735: LIST
70736: LIST
70737: LIST
70738: LIST
70739: LIST
70740: LIST
70741: LIST
70742: LIST
70743: LIST
70744: LIST
70745: LIST
70746: LIST
70747: LIST
70748: LIST
70749: LIST
70750: LIST
70751: LIST
70752: LIST
70753: LIST
70754: PUSH
70755: LD_INT 101
70757: PUSH
70758: LD_INT 102
70760: PUSH
70761: LD_INT 103
70763: PUSH
70764: LD_INT 104
70766: PUSH
70767: LD_INT 105
70769: PUSH
70770: LD_INT 106
70772: PUSH
70773: LD_INT 107
70775: PUSH
70776: LD_INT 108
70778: PUSH
70779: LD_INT 109
70781: PUSH
70782: LD_INT 110
70784: PUSH
70785: LD_INT 111
70787: PUSH
70788: LD_INT 112
70790: PUSH
70791: LD_INT 113
70793: PUSH
70794: LD_INT 114
70796: PUSH
70797: LD_INT 116
70799: PUSH
70800: LD_INT 117
70802: PUSH
70803: LD_INT 118
70805: PUSH
70806: EMPTY
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: LIST
70818: LIST
70819: LIST
70820: LIST
70821: LIST
70822: LIST
70823: LIST
70824: PUSH
70825: EMPTY
70826: LIST
70827: LIST
70828: ST_TO_ADDR
70829: GO 71604
70831: LD_INT 16
70833: DOUBLE
70834: EQUAL
70835: IFTRUE 70839
70837: GO 70975
70839: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
70840: LD_ADDR_VAR 0 2
70844: PUSH
70845: LD_INT 2
70847: PUSH
70848: LD_INT 4
70850: PUSH
70851: LD_INT 5
70853: PUSH
70854: LD_INT 7
70856: PUSH
70857: LD_INT 11
70859: PUSH
70860: LD_INT 12
70862: PUSH
70863: LD_INT 15
70865: PUSH
70866: LD_INT 16
70868: PUSH
70869: LD_INT 20
70871: PUSH
70872: LD_INT 21
70874: PUSH
70875: LD_INT 22
70877: PUSH
70878: LD_INT 23
70880: PUSH
70881: LD_INT 25
70883: PUSH
70884: LD_INT 26
70886: PUSH
70887: LD_INT 30
70889: PUSH
70890: LD_INT 31
70892: PUSH
70893: LD_INT 32
70895: PUSH
70896: LD_INT 33
70898: PUSH
70899: LD_INT 34
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: LIST
70906: LIST
70907: LIST
70908: LIST
70909: LIST
70910: LIST
70911: LIST
70912: LIST
70913: LIST
70914: LIST
70915: LIST
70916: LIST
70917: LIST
70918: LIST
70919: LIST
70920: LIST
70921: LIST
70922: PUSH
70923: LD_INT 101
70925: PUSH
70926: LD_INT 102
70928: PUSH
70929: LD_INT 103
70931: PUSH
70932: LD_INT 106
70934: PUSH
70935: LD_INT 108
70937: PUSH
70938: LD_INT 112
70940: PUSH
70941: LD_INT 113
70943: PUSH
70944: LD_INT 114
70946: PUSH
70947: LD_INT 116
70949: PUSH
70950: LD_INT 117
70952: PUSH
70953: LD_INT 118
70955: PUSH
70956: EMPTY
70957: LIST
70958: LIST
70959: LIST
70960: LIST
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: LIST
70967: LIST
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: ST_TO_ADDR
70973: GO 71604
70975: LD_INT 17
70977: DOUBLE
70978: EQUAL
70979: IFTRUE 70983
70981: GO 71207
70983: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
70984: LD_ADDR_VAR 0 2
70988: PUSH
70989: LD_INT 1
70991: PUSH
70992: LD_INT 2
70994: PUSH
70995: LD_INT 3
70997: PUSH
70998: LD_INT 4
71000: PUSH
71001: LD_INT 5
71003: PUSH
71004: LD_INT 6
71006: PUSH
71007: LD_INT 7
71009: PUSH
71010: LD_INT 8
71012: PUSH
71013: LD_INT 9
71015: PUSH
71016: LD_INT 10
71018: PUSH
71019: LD_INT 11
71021: PUSH
71022: LD_INT 12
71024: PUSH
71025: LD_INT 13
71027: PUSH
71028: LD_INT 14
71030: PUSH
71031: LD_INT 15
71033: PUSH
71034: LD_INT 16
71036: PUSH
71037: LD_INT 17
71039: PUSH
71040: LD_INT 18
71042: PUSH
71043: LD_INT 19
71045: PUSH
71046: LD_INT 20
71048: PUSH
71049: LD_INT 21
71051: PUSH
71052: LD_INT 22
71054: PUSH
71055: LD_INT 23
71057: PUSH
71058: LD_INT 24
71060: PUSH
71061: LD_INT 25
71063: PUSH
71064: LD_INT 26
71066: PUSH
71067: LD_INT 27
71069: PUSH
71070: LD_INT 28
71072: PUSH
71073: LD_INT 29
71075: PUSH
71076: LD_INT 30
71078: PUSH
71079: LD_INT 31
71081: PUSH
71082: LD_INT 32
71084: PUSH
71085: LD_INT 33
71087: PUSH
71088: LD_INT 34
71090: PUSH
71091: LD_INT 36
71093: PUSH
71094: EMPTY
71095: LIST
71096: LIST
71097: LIST
71098: LIST
71099: LIST
71100: LIST
71101: LIST
71102: LIST
71103: LIST
71104: LIST
71105: LIST
71106: LIST
71107: LIST
71108: LIST
71109: LIST
71110: LIST
71111: LIST
71112: LIST
71113: LIST
71114: LIST
71115: LIST
71116: LIST
71117: LIST
71118: LIST
71119: LIST
71120: LIST
71121: LIST
71122: LIST
71123: LIST
71124: LIST
71125: LIST
71126: LIST
71127: LIST
71128: LIST
71129: LIST
71130: PUSH
71131: LD_INT 101
71133: PUSH
71134: LD_INT 102
71136: PUSH
71137: LD_INT 103
71139: PUSH
71140: LD_INT 104
71142: PUSH
71143: LD_INT 105
71145: PUSH
71146: LD_INT 106
71148: PUSH
71149: LD_INT 107
71151: PUSH
71152: LD_INT 108
71154: PUSH
71155: LD_INT 109
71157: PUSH
71158: LD_INT 110
71160: PUSH
71161: LD_INT 111
71163: PUSH
71164: LD_INT 112
71166: PUSH
71167: LD_INT 113
71169: PUSH
71170: LD_INT 114
71172: PUSH
71173: LD_INT 116
71175: PUSH
71176: LD_INT 117
71178: PUSH
71179: LD_INT 118
71181: PUSH
71182: EMPTY
71183: LIST
71184: LIST
71185: LIST
71186: LIST
71187: LIST
71188: LIST
71189: LIST
71190: LIST
71191: LIST
71192: LIST
71193: LIST
71194: LIST
71195: LIST
71196: LIST
71197: LIST
71198: LIST
71199: LIST
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: ST_TO_ADDR
71205: GO 71604
71207: LD_INT 18
71209: DOUBLE
71210: EQUAL
71211: IFTRUE 71215
71213: GO 71363
71215: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
71216: LD_ADDR_VAR 0 2
71220: PUSH
71221: LD_INT 2
71223: PUSH
71224: LD_INT 4
71226: PUSH
71227: LD_INT 5
71229: PUSH
71230: LD_INT 7
71232: PUSH
71233: LD_INT 11
71235: PUSH
71236: LD_INT 12
71238: PUSH
71239: LD_INT 15
71241: PUSH
71242: LD_INT 16
71244: PUSH
71245: LD_INT 20
71247: PUSH
71248: LD_INT 21
71250: PUSH
71251: LD_INT 22
71253: PUSH
71254: LD_INT 23
71256: PUSH
71257: LD_INT 25
71259: PUSH
71260: LD_INT 26
71262: PUSH
71263: LD_INT 30
71265: PUSH
71266: LD_INT 31
71268: PUSH
71269: LD_INT 32
71271: PUSH
71272: LD_INT 33
71274: PUSH
71275: LD_INT 34
71277: PUSH
71278: LD_INT 35
71280: PUSH
71281: LD_INT 36
71283: PUSH
71284: EMPTY
71285: LIST
71286: LIST
71287: LIST
71288: LIST
71289: LIST
71290: LIST
71291: LIST
71292: LIST
71293: LIST
71294: LIST
71295: LIST
71296: LIST
71297: LIST
71298: LIST
71299: LIST
71300: LIST
71301: LIST
71302: LIST
71303: LIST
71304: LIST
71305: LIST
71306: PUSH
71307: LD_INT 101
71309: PUSH
71310: LD_INT 102
71312: PUSH
71313: LD_INT 103
71315: PUSH
71316: LD_INT 106
71318: PUSH
71319: LD_INT 108
71321: PUSH
71322: LD_INT 112
71324: PUSH
71325: LD_INT 113
71327: PUSH
71328: LD_INT 114
71330: PUSH
71331: LD_INT 115
71333: PUSH
71334: LD_INT 116
71336: PUSH
71337: LD_INT 117
71339: PUSH
71340: LD_INT 118
71342: PUSH
71343: EMPTY
71344: LIST
71345: LIST
71346: LIST
71347: LIST
71348: LIST
71349: LIST
71350: LIST
71351: LIST
71352: LIST
71353: LIST
71354: LIST
71355: LIST
71356: PUSH
71357: EMPTY
71358: LIST
71359: LIST
71360: ST_TO_ADDR
71361: GO 71604
71363: LD_INT 19
71365: DOUBLE
71366: EQUAL
71367: IFTRUE 71371
71369: GO 71603
71371: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
71372: LD_ADDR_VAR 0 2
71376: PUSH
71377: LD_INT 1
71379: PUSH
71380: LD_INT 2
71382: PUSH
71383: LD_INT 3
71385: PUSH
71386: LD_INT 4
71388: PUSH
71389: LD_INT 5
71391: PUSH
71392: LD_INT 6
71394: PUSH
71395: LD_INT 7
71397: PUSH
71398: LD_INT 8
71400: PUSH
71401: LD_INT 9
71403: PUSH
71404: LD_INT 10
71406: PUSH
71407: LD_INT 11
71409: PUSH
71410: LD_INT 12
71412: PUSH
71413: LD_INT 13
71415: PUSH
71416: LD_INT 14
71418: PUSH
71419: LD_INT 15
71421: PUSH
71422: LD_INT 16
71424: PUSH
71425: LD_INT 17
71427: PUSH
71428: LD_INT 18
71430: PUSH
71431: LD_INT 19
71433: PUSH
71434: LD_INT 20
71436: PUSH
71437: LD_INT 21
71439: PUSH
71440: LD_INT 22
71442: PUSH
71443: LD_INT 23
71445: PUSH
71446: LD_INT 24
71448: PUSH
71449: LD_INT 25
71451: PUSH
71452: LD_INT 26
71454: PUSH
71455: LD_INT 27
71457: PUSH
71458: LD_INT 28
71460: PUSH
71461: LD_INT 29
71463: PUSH
71464: LD_INT 30
71466: PUSH
71467: LD_INT 31
71469: PUSH
71470: LD_INT 32
71472: PUSH
71473: LD_INT 33
71475: PUSH
71476: LD_INT 34
71478: PUSH
71479: LD_INT 35
71481: PUSH
71482: LD_INT 36
71484: PUSH
71485: EMPTY
71486: LIST
71487: LIST
71488: LIST
71489: LIST
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: LIST
71495: LIST
71496: LIST
71497: LIST
71498: LIST
71499: LIST
71500: LIST
71501: LIST
71502: LIST
71503: LIST
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: LIST
71516: LIST
71517: LIST
71518: LIST
71519: LIST
71520: LIST
71521: LIST
71522: PUSH
71523: LD_INT 101
71525: PUSH
71526: LD_INT 102
71528: PUSH
71529: LD_INT 103
71531: PUSH
71532: LD_INT 104
71534: PUSH
71535: LD_INT 105
71537: PUSH
71538: LD_INT 106
71540: PUSH
71541: LD_INT 107
71543: PUSH
71544: LD_INT 108
71546: PUSH
71547: LD_INT 109
71549: PUSH
71550: LD_INT 110
71552: PUSH
71553: LD_INT 111
71555: PUSH
71556: LD_INT 112
71558: PUSH
71559: LD_INT 113
71561: PUSH
71562: LD_INT 114
71564: PUSH
71565: LD_INT 115
71567: PUSH
71568: LD_INT 116
71570: PUSH
71571: LD_INT 117
71573: PUSH
71574: LD_INT 118
71576: PUSH
71577: EMPTY
71578: LIST
71579: LIST
71580: LIST
71581: LIST
71582: LIST
71583: LIST
71584: LIST
71585: LIST
71586: LIST
71587: LIST
71588: LIST
71589: LIST
71590: LIST
71591: LIST
71592: LIST
71593: LIST
71594: LIST
71595: LIST
71596: PUSH
71597: EMPTY
71598: LIST
71599: LIST
71600: ST_TO_ADDR
71601: GO 71604
71603: POP
// end else
71604: GO 71835
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
71606: LD_ADDR_VAR 0 2
71610: PUSH
71611: LD_INT 1
71613: PUSH
71614: LD_INT 2
71616: PUSH
71617: LD_INT 3
71619: PUSH
71620: LD_INT 4
71622: PUSH
71623: LD_INT 5
71625: PUSH
71626: LD_INT 6
71628: PUSH
71629: LD_INT 7
71631: PUSH
71632: LD_INT 8
71634: PUSH
71635: LD_INT 9
71637: PUSH
71638: LD_INT 10
71640: PUSH
71641: LD_INT 11
71643: PUSH
71644: LD_INT 12
71646: PUSH
71647: LD_INT 13
71649: PUSH
71650: LD_INT 14
71652: PUSH
71653: LD_INT 15
71655: PUSH
71656: LD_INT 16
71658: PUSH
71659: LD_INT 17
71661: PUSH
71662: LD_INT 18
71664: PUSH
71665: LD_INT 19
71667: PUSH
71668: LD_INT 20
71670: PUSH
71671: LD_INT 21
71673: PUSH
71674: LD_INT 22
71676: PUSH
71677: LD_INT 23
71679: PUSH
71680: LD_INT 24
71682: PUSH
71683: LD_INT 25
71685: PUSH
71686: LD_INT 26
71688: PUSH
71689: LD_INT 27
71691: PUSH
71692: LD_INT 28
71694: PUSH
71695: LD_INT 29
71697: PUSH
71698: LD_INT 30
71700: PUSH
71701: LD_INT 31
71703: PUSH
71704: LD_INT 32
71706: PUSH
71707: LD_INT 33
71709: PUSH
71710: LD_INT 34
71712: PUSH
71713: LD_INT 35
71715: PUSH
71716: LD_INT 36
71718: PUSH
71719: EMPTY
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: LIST
71725: LIST
71726: LIST
71727: LIST
71728: LIST
71729: LIST
71730: LIST
71731: LIST
71732: LIST
71733: LIST
71734: LIST
71735: LIST
71736: LIST
71737: LIST
71738: LIST
71739: LIST
71740: LIST
71741: LIST
71742: LIST
71743: LIST
71744: LIST
71745: LIST
71746: LIST
71747: LIST
71748: LIST
71749: LIST
71750: LIST
71751: LIST
71752: LIST
71753: LIST
71754: LIST
71755: LIST
71756: PUSH
71757: LD_INT 101
71759: PUSH
71760: LD_INT 102
71762: PUSH
71763: LD_INT 103
71765: PUSH
71766: LD_INT 104
71768: PUSH
71769: LD_INT 105
71771: PUSH
71772: LD_INT 106
71774: PUSH
71775: LD_INT 107
71777: PUSH
71778: LD_INT 108
71780: PUSH
71781: LD_INT 109
71783: PUSH
71784: LD_INT 110
71786: PUSH
71787: LD_INT 111
71789: PUSH
71790: LD_INT 112
71792: PUSH
71793: LD_INT 113
71795: PUSH
71796: LD_INT 114
71798: PUSH
71799: LD_INT 115
71801: PUSH
71802: LD_INT 116
71804: PUSH
71805: LD_INT 117
71807: PUSH
71808: LD_INT 118
71810: PUSH
71811: EMPTY
71812: LIST
71813: LIST
71814: LIST
71815: LIST
71816: LIST
71817: LIST
71818: LIST
71819: LIST
71820: LIST
71821: LIST
71822: LIST
71823: LIST
71824: LIST
71825: LIST
71826: LIST
71827: LIST
71828: LIST
71829: LIST
71830: PUSH
71831: EMPTY
71832: LIST
71833: LIST
71834: ST_TO_ADDR
// if result then
71835: LD_VAR 0 2
71839: IFFALSE 72625
// begin normal :=  ;
71841: LD_ADDR_VAR 0 5
71845: PUSH
71846: LD_STRING 
71848: ST_TO_ADDR
// hardcore :=  ;
71849: LD_ADDR_VAR 0 6
71853: PUSH
71854: LD_STRING 
71856: ST_TO_ADDR
// active :=  ;
71857: LD_ADDR_VAR 0 7
71861: PUSH
71862: LD_STRING 
71864: ST_TO_ADDR
// for i = 1 to normalCounter do
71865: LD_ADDR_VAR 0 8
71869: PUSH
71870: DOUBLE
71871: LD_INT 1
71873: DEC
71874: ST_TO_ADDR
71875: LD_EXP 48
71879: PUSH
71880: FOR_TO
71881: IFFALSE 71982
// begin tmp := 0 ;
71883: LD_ADDR_VAR 0 3
71887: PUSH
71888: LD_STRING 0
71890: ST_TO_ADDR
// if result [ 1 ] then
71891: LD_VAR 0 2
71895: PUSH
71896: LD_INT 1
71898: ARRAY
71899: IFFALSE 71964
// if result [ 1 ] [ 1 ] = i then
71901: LD_VAR 0 2
71905: PUSH
71906: LD_INT 1
71908: ARRAY
71909: PUSH
71910: LD_INT 1
71912: ARRAY
71913: PUSH
71914: LD_VAR 0 8
71918: EQUAL
71919: IFFALSE 71964
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
71921: LD_ADDR_VAR 0 2
71925: PUSH
71926: LD_VAR 0 2
71930: PPUSH
71931: LD_INT 1
71933: PPUSH
71934: LD_VAR 0 2
71938: PUSH
71939: LD_INT 1
71941: ARRAY
71942: PPUSH
71943: LD_INT 1
71945: PPUSH
71946: CALL_OW 3
71950: PPUSH
71951: CALL_OW 1
71955: ST_TO_ADDR
// tmp := 1 ;
71956: LD_ADDR_VAR 0 3
71960: PUSH
71961: LD_STRING 1
71963: ST_TO_ADDR
// end ; normal := normal & tmp ;
71964: LD_ADDR_VAR 0 5
71968: PUSH
71969: LD_VAR 0 5
71973: PUSH
71974: LD_VAR 0 3
71978: STR
71979: ST_TO_ADDR
// end ;
71980: GO 71880
71982: POP
71983: POP
// for i = 1 to hardcoreCounter do
71984: LD_ADDR_VAR 0 8
71988: PUSH
71989: DOUBLE
71990: LD_INT 1
71992: DEC
71993: ST_TO_ADDR
71994: LD_EXP 49
71998: PUSH
71999: FOR_TO
72000: IFFALSE 72105
// begin tmp := 0 ;
72002: LD_ADDR_VAR 0 3
72006: PUSH
72007: LD_STRING 0
72009: ST_TO_ADDR
// if result [ 2 ] then
72010: LD_VAR 0 2
72014: PUSH
72015: LD_INT 2
72017: ARRAY
72018: IFFALSE 72087
// if result [ 2 ] [ 1 ] = 100 + i then
72020: LD_VAR 0 2
72024: PUSH
72025: LD_INT 2
72027: ARRAY
72028: PUSH
72029: LD_INT 1
72031: ARRAY
72032: PUSH
72033: LD_INT 100
72035: PUSH
72036: LD_VAR 0 8
72040: PLUS
72041: EQUAL
72042: IFFALSE 72087
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
72044: LD_ADDR_VAR 0 2
72048: PUSH
72049: LD_VAR 0 2
72053: PPUSH
72054: LD_INT 2
72056: PPUSH
72057: LD_VAR 0 2
72061: PUSH
72062: LD_INT 2
72064: ARRAY
72065: PPUSH
72066: LD_INT 1
72068: PPUSH
72069: CALL_OW 3
72073: PPUSH
72074: CALL_OW 1
72078: ST_TO_ADDR
// tmp := 1 ;
72079: LD_ADDR_VAR 0 3
72083: PUSH
72084: LD_STRING 1
72086: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
72087: LD_ADDR_VAR 0 6
72091: PUSH
72092: LD_VAR 0 6
72096: PUSH
72097: LD_VAR 0 3
72101: STR
72102: ST_TO_ADDR
// end ;
72103: GO 71999
72105: POP
72106: POP
// if isGameLoad then
72107: LD_VAR 0 1
72111: IFFALSE 72586
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
72113: LD_ADDR_VAR 0 4
72117: PUSH
72118: LD_EXP 52
72122: PUSH
72123: LD_EXP 51
72127: PUSH
72128: LD_EXP 53
72132: PUSH
72133: LD_EXP 50
72137: PUSH
72138: LD_EXP 54
72142: PUSH
72143: LD_EXP 55
72147: PUSH
72148: LD_EXP 56
72152: PUSH
72153: LD_EXP 57
72157: PUSH
72158: LD_EXP 58
72162: PUSH
72163: LD_EXP 59
72167: PUSH
72168: LD_EXP 60
72172: PUSH
72173: LD_EXP 61
72177: PUSH
72178: LD_EXP 62
72182: PUSH
72183: LD_EXP 63
72187: PUSH
72188: LD_EXP 71
72192: PUSH
72193: LD_EXP 72
72197: PUSH
72198: LD_EXP 73
72202: PUSH
72203: LD_EXP 74
72207: PUSH
72208: LD_EXP 76
72212: PUSH
72213: LD_EXP 77
72217: PUSH
72218: LD_EXP 78
72222: PUSH
72223: LD_EXP 81
72227: PUSH
72228: LD_EXP 83
72232: PUSH
72233: LD_EXP 84
72237: PUSH
72238: LD_EXP 85
72242: PUSH
72243: LD_EXP 87
72247: PUSH
72248: LD_EXP 88
72252: PUSH
72253: LD_EXP 91
72257: PUSH
72258: LD_EXP 92
72262: PUSH
72263: LD_EXP 93
72267: PUSH
72268: LD_EXP 94
72272: PUSH
72273: LD_EXP 95
72277: PUSH
72278: LD_EXP 96
72282: PUSH
72283: LD_EXP 97
72287: PUSH
72288: LD_EXP 98
72292: PUSH
72293: LD_EXP 99
72297: PUSH
72298: LD_EXP 64
72302: PUSH
72303: LD_EXP 65
72307: PUSH
72308: LD_EXP 68
72312: PUSH
72313: LD_EXP 69
72317: PUSH
72318: LD_EXP 70
72322: PUSH
72323: LD_EXP 66
72327: PUSH
72328: LD_EXP 67
72332: PUSH
72333: LD_EXP 75
72337: PUSH
72338: LD_EXP 79
72342: PUSH
72343: LD_EXP 80
72347: PUSH
72348: LD_EXP 82
72352: PUSH
72353: LD_EXP 86
72357: PUSH
72358: LD_EXP 89
72362: PUSH
72363: LD_EXP 90
72367: PUSH
72368: LD_EXP 100
72372: PUSH
72373: LD_EXP 101
72377: PUSH
72378: LD_EXP 102
72382: PUSH
72383: LD_EXP 103
72387: PUSH
72388: EMPTY
72389: LIST
72390: LIST
72391: LIST
72392: LIST
72393: LIST
72394: LIST
72395: LIST
72396: LIST
72397: LIST
72398: LIST
72399: LIST
72400: LIST
72401: LIST
72402: LIST
72403: LIST
72404: LIST
72405: LIST
72406: LIST
72407: LIST
72408: LIST
72409: LIST
72410: LIST
72411: LIST
72412: LIST
72413: LIST
72414: LIST
72415: LIST
72416: LIST
72417: LIST
72418: LIST
72419: LIST
72420: LIST
72421: LIST
72422: LIST
72423: LIST
72424: LIST
72425: LIST
72426: LIST
72427: LIST
72428: LIST
72429: LIST
72430: LIST
72431: LIST
72432: LIST
72433: LIST
72434: LIST
72435: LIST
72436: LIST
72437: LIST
72438: LIST
72439: LIST
72440: LIST
72441: LIST
72442: LIST
72443: ST_TO_ADDR
// tmp :=  ;
72444: LD_ADDR_VAR 0 3
72448: PUSH
72449: LD_STRING 
72451: ST_TO_ADDR
// for i = 1 to normalCounter do
72452: LD_ADDR_VAR 0 8
72456: PUSH
72457: DOUBLE
72458: LD_INT 1
72460: DEC
72461: ST_TO_ADDR
72462: LD_EXP 48
72466: PUSH
72467: FOR_TO
72468: IFFALSE 72504
// begin if flags [ i ] then
72470: LD_VAR 0 4
72474: PUSH
72475: LD_VAR 0 8
72479: ARRAY
72480: IFFALSE 72502
// tmp := tmp & i & ; ;
72482: LD_ADDR_VAR 0 3
72486: PUSH
72487: LD_VAR 0 3
72491: PUSH
72492: LD_VAR 0 8
72496: STR
72497: PUSH
72498: LD_STRING ;
72500: STR
72501: ST_TO_ADDR
// end ;
72502: GO 72467
72504: POP
72505: POP
// for i = 1 to hardcoreCounter do
72506: LD_ADDR_VAR 0 8
72510: PUSH
72511: DOUBLE
72512: LD_INT 1
72514: DEC
72515: ST_TO_ADDR
72516: LD_EXP 49
72520: PUSH
72521: FOR_TO
72522: IFFALSE 72568
// begin if flags [ normalCounter + i ] then
72524: LD_VAR 0 4
72528: PUSH
72529: LD_EXP 48
72533: PUSH
72534: LD_VAR 0 8
72538: PLUS
72539: ARRAY
72540: IFFALSE 72566
// tmp := tmp & ( 100 + i ) & ; ;
72542: LD_ADDR_VAR 0 3
72546: PUSH
72547: LD_VAR 0 3
72551: PUSH
72552: LD_INT 100
72554: PUSH
72555: LD_VAR 0 8
72559: PLUS
72560: STR
72561: PUSH
72562: LD_STRING ;
72564: STR
72565: ST_TO_ADDR
// end ;
72566: GO 72521
72568: POP
72569: POP
// if tmp then
72570: LD_VAR 0 3
72574: IFFALSE 72586
// active := tmp ;
72576: LD_ADDR_VAR 0 7
72580: PUSH
72581: LD_VAR 0 3
72585: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
72586: LD_STRING getStreamItemsFromMission("
72588: PUSH
72589: LD_VAR 0 5
72593: STR
72594: PUSH
72595: LD_STRING ","
72597: STR
72598: PUSH
72599: LD_VAR 0 6
72603: STR
72604: PUSH
72605: LD_STRING ","
72607: STR
72608: PUSH
72609: LD_VAR 0 7
72613: STR
72614: PUSH
72615: LD_STRING ")
72617: STR
72618: PPUSH
72619: CALL_OW 559
// end else
72623: GO 72632
// ToLua ( getStreamItemsFromMission("","","") ) ;
72625: LD_STRING getStreamItemsFromMission("","","")
72627: PPUSH
72628: CALL_OW 559
// end ;
72632: LD_VAR 0 2
72636: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
72637: LD_EXP 47
72641: IFFALSE 72649
72643: PUSH
72644: LD_EXP 52
72648: AND
72649: IFFALSE 72773
72651: GO 72653
72653: DISABLE
72654: LD_INT 0
72656: PPUSH
72657: PPUSH
// begin enable ;
72658: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
72659: LD_ADDR_VAR 0 2
72663: PUSH
72664: LD_INT 22
72666: PUSH
72667: LD_OWVAR 2
72671: PUSH
72672: EMPTY
72673: LIST
72674: LIST
72675: PUSH
72676: LD_INT 2
72678: PUSH
72679: LD_INT 34
72681: PUSH
72682: LD_INT 7
72684: PUSH
72685: EMPTY
72686: LIST
72687: LIST
72688: PUSH
72689: LD_INT 34
72691: PUSH
72692: LD_INT 45
72694: PUSH
72695: EMPTY
72696: LIST
72697: LIST
72698: PUSH
72699: LD_INT 34
72701: PUSH
72702: LD_INT 28
72704: PUSH
72705: EMPTY
72706: LIST
72707: LIST
72708: PUSH
72709: LD_INT 34
72711: PUSH
72712: LD_INT 47
72714: PUSH
72715: EMPTY
72716: LIST
72717: LIST
72718: PUSH
72719: EMPTY
72720: LIST
72721: LIST
72722: LIST
72723: LIST
72724: LIST
72725: PUSH
72726: EMPTY
72727: LIST
72728: LIST
72729: PPUSH
72730: CALL_OW 69
72734: ST_TO_ADDR
// if not tmp then
72735: LD_VAR 0 2
72739: NOT
72740: IFFALSE 72744
// exit ;
72742: GO 72773
// for i in tmp do
72744: LD_ADDR_VAR 0 1
72748: PUSH
72749: LD_VAR 0 2
72753: PUSH
72754: FOR_IN
72755: IFFALSE 72771
// begin SetLives ( i , 0 ) ;
72757: LD_VAR 0 1
72761: PPUSH
72762: LD_INT 0
72764: PPUSH
72765: CALL_OW 234
// end ;
72769: GO 72754
72771: POP
72772: POP
// end ;
72773: PPOPN 2
72775: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
72776: LD_EXP 47
72780: IFFALSE 72788
72782: PUSH
72783: LD_EXP 53
72787: AND
72788: IFFALSE 72872
72790: GO 72792
72792: DISABLE
72793: LD_INT 0
72795: PPUSH
72796: PPUSH
// begin enable ;
72797: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
72798: LD_ADDR_VAR 0 2
72802: PUSH
72803: LD_INT 22
72805: PUSH
72806: LD_OWVAR 2
72810: PUSH
72811: EMPTY
72812: LIST
72813: LIST
72814: PUSH
72815: LD_INT 32
72817: PUSH
72818: LD_INT 3
72820: PUSH
72821: EMPTY
72822: LIST
72823: LIST
72824: PUSH
72825: EMPTY
72826: LIST
72827: LIST
72828: PPUSH
72829: CALL_OW 69
72833: ST_TO_ADDR
// if not tmp then
72834: LD_VAR 0 2
72838: NOT
72839: IFFALSE 72843
// exit ;
72841: GO 72872
// for i in tmp do
72843: LD_ADDR_VAR 0 1
72847: PUSH
72848: LD_VAR 0 2
72852: PUSH
72853: FOR_IN
72854: IFFALSE 72870
// begin SetLives ( i , 0 ) ;
72856: LD_VAR 0 1
72860: PPUSH
72861: LD_INT 0
72863: PPUSH
72864: CALL_OW 234
// end ;
72868: GO 72853
72870: POP
72871: POP
// end ;
72872: PPOPN 2
72874: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
72875: LD_EXP 47
72879: IFFALSE 72887
72881: PUSH
72882: LD_EXP 50
72886: AND
72887: IFFALSE 72980
72889: GO 72891
72891: DISABLE
72892: LD_INT 0
72894: PPUSH
// begin enable ;
72895: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
72896: LD_ADDR_VAR 0 1
72900: PUSH
72901: LD_INT 22
72903: PUSH
72904: LD_OWVAR 2
72908: PUSH
72909: EMPTY
72910: LIST
72911: LIST
72912: PUSH
72913: LD_INT 2
72915: PUSH
72916: LD_INT 25
72918: PUSH
72919: LD_INT 5
72921: PUSH
72922: EMPTY
72923: LIST
72924: LIST
72925: PUSH
72926: LD_INT 25
72928: PUSH
72929: LD_INT 9
72931: PUSH
72932: EMPTY
72933: LIST
72934: LIST
72935: PUSH
72936: LD_INT 25
72938: PUSH
72939: LD_INT 8
72941: PUSH
72942: EMPTY
72943: LIST
72944: LIST
72945: PUSH
72946: EMPTY
72947: LIST
72948: LIST
72949: LIST
72950: LIST
72951: PUSH
72952: EMPTY
72953: LIST
72954: LIST
72955: PPUSH
72956: CALL_OW 69
72960: PUSH
72961: FOR_IN
72962: IFFALSE 72978
// begin SetClass ( i , 1 ) ;
72964: LD_VAR 0 1
72968: PPUSH
72969: LD_INT 1
72971: PPUSH
72972: CALL_OW 336
// end ;
72976: GO 72961
72978: POP
72979: POP
// end ;
72980: PPOPN 1
72982: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
72983: LD_EXP 47
72987: IFFALSE 72995
72989: PUSH
72990: LD_EXP 51
72994: AND
72995: IFFALSE 73007
72997: PUSH
72998: LD_OWVAR 65
73002: PUSH
73003: LD_INT 7
73005: LESS
73006: AND
73007: IFFALSE 73021
73009: GO 73011
73011: DISABLE
// begin enable ;
73012: ENABLE
// game_speed := 7 ;
73013: LD_ADDR_OWVAR 65
73017: PUSH
73018: LD_INT 7
73020: ST_TO_ADDR
// end ;
73021: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
73022: LD_EXP 47
73026: IFFALSE 73034
73028: PUSH
73029: LD_EXP 54
73033: AND
73034: IFFALSE 73236
73036: GO 73038
73038: DISABLE
73039: LD_INT 0
73041: PPUSH
73042: PPUSH
73043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
73044: LD_ADDR_VAR 0 3
73048: PUSH
73049: LD_INT 81
73051: PUSH
73052: LD_OWVAR 2
73056: PUSH
73057: EMPTY
73058: LIST
73059: LIST
73060: PUSH
73061: LD_INT 21
73063: PUSH
73064: LD_INT 1
73066: PUSH
73067: EMPTY
73068: LIST
73069: LIST
73070: PUSH
73071: EMPTY
73072: LIST
73073: LIST
73074: PPUSH
73075: CALL_OW 69
73079: ST_TO_ADDR
// if not tmp then
73080: LD_VAR 0 3
73084: NOT
73085: IFFALSE 73089
// exit ;
73087: GO 73236
// if tmp > 5 then
73089: LD_VAR 0 3
73093: PUSH
73094: LD_INT 5
73096: GREATER
73097: IFFALSE 73109
// k := 5 else
73099: LD_ADDR_VAR 0 2
73103: PUSH
73104: LD_INT 5
73106: ST_TO_ADDR
73107: GO 73119
// k := tmp ;
73109: LD_ADDR_VAR 0 2
73113: PUSH
73114: LD_VAR 0 3
73118: ST_TO_ADDR
// for i := 1 to k do
73119: LD_ADDR_VAR 0 1
73123: PUSH
73124: DOUBLE
73125: LD_INT 1
73127: DEC
73128: ST_TO_ADDR
73129: LD_VAR 0 2
73133: PUSH
73134: FOR_TO
73135: IFFALSE 73234
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
73137: LD_VAR 0 3
73141: PUSH
73142: LD_VAR 0 1
73146: ARRAY
73147: PPUSH
73148: LD_VAR 0 1
73152: PUSH
73153: LD_INT 4
73155: MOD
73156: PUSH
73157: LD_INT 1
73159: PLUS
73160: PPUSH
73161: CALL_OW 259
73165: PUSH
73166: LD_INT 10
73168: LESS
73169: IFFALSE 73232
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
73171: LD_VAR 0 3
73175: PUSH
73176: LD_VAR 0 1
73180: ARRAY
73181: PPUSH
73182: LD_VAR 0 1
73186: PUSH
73187: LD_INT 4
73189: MOD
73190: PUSH
73191: LD_INT 1
73193: PLUS
73194: PPUSH
73195: LD_VAR 0 3
73199: PUSH
73200: LD_VAR 0 1
73204: ARRAY
73205: PPUSH
73206: LD_VAR 0 1
73210: PUSH
73211: LD_INT 4
73213: MOD
73214: PUSH
73215: LD_INT 1
73217: PLUS
73218: PPUSH
73219: CALL_OW 259
73223: PUSH
73224: LD_INT 1
73226: PLUS
73227: PPUSH
73228: CALL_OW 237
73232: GO 73134
73234: POP
73235: POP
// end ;
73236: PPOPN 3
73238: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
73239: LD_EXP 47
73243: IFFALSE 73251
73245: PUSH
73246: LD_EXP 55
73250: AND
73251: IFFALSE 73271
73253: GO 73255
73255: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
73256: LD_INT 4
73258: PPUSH
73259: LD_OWVAR 2
73263: PPUSH
73264: LD_INT 0
73266: PPUSH
73267: CALL_OW 324
73271: END
// every 0 0$1 trigger StreamModeActive and sShovel do
73272: LD_EXP 47
73276: IFFALSE 73284
73278: PUSH
73279: LD_EXP 84
73283: AND
73284: IFFALSE 73304
73286: GO 73288
73288: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
73289: LD_INT 19
73291: PPUSH
73292: LD_OWVAR 2
73296: PPUSH
73297: LD_INT 0
73299: PPUSH
73300: CALL_OW 324
73304: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
73305: LD_EXP 47
73309: IFFALSE 73317
73311: PUSH
73312: LD_EXP 56
73316: AND
73317: IFFALSE 73419
73319: GO 73321
73321: DISABLE
73322: LD_INT 0
73324: PPUSH
73325: PPUSH
// begin enable ;
73326: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
73327: LD_ADDR_VAR 0 2
73331: PUSH
73332: LD_INT 22
73334: PUSH
73335: LD_OWVAR 2
73339: PUSH
73340: EMPTY
73341: LIST
73342: LIST
73343: PUSH
73344: LD_INT 2
73346: PUSH
73347: LD_INT 34
73349: PUSH
73350: LD_INT 11
73352: PUSH
73353: EMPTY
73354: LIST
73355: LIST
73356: PUSH
73357: LD_INT 34
73359: PUSH
73360: LD_INT 30
73362: PUSH
73363: EMPTY
73364: LIST
73365: LIST
73366: PUSH
73367: EMPTY
73368: LIST
73369: LIST
73370: LIST
73371: PUSH
73372: EMPTY
73373: LIST
73374: LIST
73375: PPUSH
73376: CALL_OW 69
73380: ST_TO_ADDR
// if not tmp then
73381: LD_VAR 0 2
73385: NOT
73386: IFFALSE 73390
// exit ;
73388: GO 73419
// for i in tmp do
73390: LD_ADDR_VAR 0 1
73394: PUSH
73395: LD_VAR 0 2
73399: PUSH
73400: FOR_IN
73401: IFFALSE 73417
// begin SetLives ( i , 0 ) ;
73403: LD_VAR 0 1
73407: PPUSH
73408: LD_INT 0
73410: PPUSH
73411: CALL_OW 234
// end ;
73415: GO 73400
73417: POP
73418: POP
// end ;
73419: PPOPN 2
73421: END
// every 0 0$1 trigger StreamModeActive and sBunker do
73422: LD_EXP 47
73426: IFFALSE 73434
73428: PUSH
73429: LD_EXP 57
73433: AND
73434: IFFALSE 73454
73436: GO 73438
73438: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
73439: LD_INT 32
73441: PPUSH
73442: LD_OWVAR 2
73446: PPUSH
73447: LD_INT 0
73449: PPUSH
73450: CALL_OW 324
73454: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
73455: LD_EXP 47
73459: IFFALSE 73467
73461: PUSH
73462: LD_EXP 58
73466: AND
73467: IFFALSE 73650
73469: GO 73471
73471: DISABLE
73472: LD_INT 0
73474: PPUSH
73475: PPUSH
73476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
73477: LD_ADDR_VAR 0 2
73481: PUSH
73482: LD_INT 22
73484: PUSH
73485: LD_OWVAR 2
73489: PUSH
73490: EMPTY
73491: LIST
73492: LIST
73493: PUSH
73494: LD_INT 33
73496: PUSH
73497: LD_INT 3
73499: PUSH
73500: EMPTY
73501: LIST
73502: LIST
73503: PUSH
73504: EMPTY
73505: LIST
73506: LIST
73507: PPUSH
73508: CALL_OW 69
73512: ST_TO_ADDR
// if not tmp then
73513: LD_VAR 0 2
73517: NOT
73518: IFFALSE 73522
// exit ;
73520: GO 73650
// side := 0 ;
73522: LD_ADDR_VAR 0 3
73526: PUSH
73527: LD_INT 0
73529: ST_TO_ADDR
// for i := 1 to 8 do
73530: LD_ADDR_VAR 0 1
73534: PUSH
73535: DOUBLE
73536: LD_INT 1
73538: DEC
73539: ST_TO_ADDR
73540: LD_INT 8
73542: PUSH
73543: FOR_TO
73544: IFFALSE 73594
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
73546: LD_OWVAR 2
73550: PUSH
73551: LD_VAR 0 1
73555: NONEQUAL
73556: IFFALSE 73578
73558: PUSH
73559: LD_OWVAR 2
73563: PPUSH
73564: LD_VAR 0 1
73568: PPUSH
73569: CALL_OW 81
73573: PUSH
73574: LD_INT 2
73576: EQUAL
73577: AND
73578: IFFALSE 73592
// begin side := i ;
73580: LD_ADDR_VAR 0 3
73584: PUSH
73585: LD_VAR 0 1
73589: ST_TO_ADDR
// break ;
73590: GO 73594
// end ;
73592: GO 73543
73594: POP
73595: POP
// if not side then
73596: LD_VAR 0 3
73600: NOT
73601: IFFALSE 73605
// exit ;
73603: GO 73650
// for i := 1 to tmp do
73605: LD_ADDR_VAR 0 1
73609: PUSH
73610: DOUBLE
73611: LD_INT 1
73613: DEC
73614: ST_TO_ADDR
73615: LD_VAR 0 2
73619: PUSH
73620: FOR_TO
73621: IFFALSE 73648
// if Prob ( 60 ) then
73623: LD_INT 60
73625: PPUSH
73626: CALL_OW 13
73630: IFFALSE 73646
// SetSide ( i , side ) ;
73632: LD_VAR 0 1
73636: PPUSH
73637: LD_VAR 0 3
73641: PPUSH
73642: CALL_OW 235
73646: GO 73620
73648: POP
73649: POP
// end ;
73650: PPOPN 3
73652: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
73653: LD_EXP 47
73657: IFFALSE 73665
73659: PUSH
73660: LD_EXP 60
73664: AND
73665: IFFALSE 73784
73667: GO 73669
73669: DISABLE
73670: LD_INT 0
73672: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
73673: LD_ADDR_VAR 0 1
73677: PUSH
73678: LD_INT 22
73680: PUSH
73681: LD_OWVAR 2
73685: PUSH
73686: EMPTY
73687: LIST
73688: LIST
73689: PUSH
73690: LD_INT 21
73692: PUSH
73693: LD_INT 1
73695: PUSH
73696: EMPTY
73697: LIST
73698: LIST
73699: PUSH
73700: LD_INT 3
73702: PUSH
73703: LD_INT 23
73705: PUSH
73706: LD_INT 0
73708: PUSH
73709: EMPTY
73710: LIST
73711: LIST
73712: PUSH
73713: EMPTY
73714: LIST
73715: LIST
73716: PUSH
73717: EMPTY
73718: LIST
73719: LIST
73720: LIST
73721: PPUSH
73722: CALL_OW 69
73726: PUSH
73727: FOR_IN
73728: IFFALSE 73782
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
73730: LD_VAR 0 1
73734: PPUSH
73735: CALL_OW 257
73739: PUSH
73740: LD_INT 1
73742: PUSH
73743: LD_INT 2
73745: PUSH
73746: LD_INT 3
73748: PUSH
73749: LD_INT 4
73751: PUSH
73752: EMPTY
73753: LIST
73754: LIST
73755: LIST
73756: LIST
73757: IN
73758: IFFALSE 73780
// SetClass ( un , rand ( 1 , 4 ) ) ;
73760: LD_VAR 0 1
73764: PPUSH
73765: LD_INT 1
73767: PPUSH
73768: LD_INT 4
73770: PPUSH
73771: CALL_OW 12
73775: PPUSH
73776: CALL_OW 336
73780: GO 73727
73782: POP
73783: POP
// end ;
73784: PPOPN 1
73786: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
73787: LD_EXP 47
73791: IFFALSE 73799
73793: PUSH
73794: LD_EXP 59
73798: AND
73799: IFFALSE 73878
73801: GO 73803
73803: DISABLE
73804: LD_INT 0
73806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
73807: LD_ADDR_VAR 0 1
73811: PUSH
73812: LD_INT 22
73814: PUSH
73815: LD_OWVAR 2
73819: PUSH
73820: EMPTY
73821: LIST
73822: LIST
73823: PUSH
73824: LD_INT 21
73826: PUSH
73827: LD_INT 3
73829: PUSH
73830: EMPTY
73831: LIST
73832: LIST
73833: PUSH
73834: EMPTY
73835: LIST
73836: LIST
73837: PPUSH
73838: CALL_OW 69
73842: ST_TO_ADDR
// if not tmp then
73843: LD_VAR 0 1
73847: NOT
73848: IFFALSE 73852
// exit ;
73850: GO 73878
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
73852: LD_VAR 0 1
73856: PUSH
73857: LD_INT 1
73859: PPUSH
73860: LD_VAR 0 1
73864: PPUSH
73865: CALL_OW 12
73869: ARRAY
73870: PPUSH
73871: LD_INT 100
73873: PPUSH
73874: CALL_OW 234
// end ;
73878: PPOPN 1
73880: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
73881: LD_EXP 47
73885: IFFALSE 73893
73887: PUSH
73888: LD_EXP 61
73892: AND
73893: IFFALSE 73991
73895: GO 73897
73897: DISABLE
73898: LD_INT 0
73900: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
73901: LD_ADDR_VAR 0 1
73905: PUSH
73906: LD_INT 22
73908: PUSH
73909: LD_OWVAR 2
73913: PUSH
73914: EMPTY
73915: LIST
73916: LIST
73917: PUSH
73918: LD_INT 21
73920: PUSH
73921: LD_INT 1
73923: PUSH
73924: EMPTY
73925: LIST
73926: LIST
73927: PUSH
73928: EMPTY
73929: LIST
73930: LIST
73931: PPUSH
73932: CALL_OW 69
73936: ST_TO_ADDR
// if not tmp then
73937: LD_VAR 0 1
73941: NOT
73942: IFFALSE 73946
// exit ;
73944: GO 73991
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
73946: LD_VAR 0 1
73950: PUSH
73951: LD_INT 1
73953: PPUSH
73954: LD_VAR 0 1
73958: PPUSH
73959: CALL_OW 12
73963: ARRAY
73964: PPUSH
73965: LD_INT 1
73967: PPUSH
73968: LD_INT 4
73970: PPUSH
73971: CALL_OW 12
73975: PPUSH
73976: LD_INT 3000
73978: PPUSH
73979: LD_INT 9000
73981: PPUSH
73982: CALL_OW 12
73986: PPUSH
73987: CALL_OW 492
// end ;
73991: PPOPN 1
73993: END
// every 0 0$1 trigger StreamModeActive and sDepot do
73994: LD_EXP 47
73998: IFFALSE 74006
74000: PUSH
74001: LD_EXP 62
74005: AND
74006: IFFALSE 74026
74008: GO 74010
74010: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
74011: LD_INT 1
74013: PPUSH
74014: LD_OWVAR 2
74018: PPUSH
74019: LD_INT 0
74021: PPUSH
74022: CALL_OW 324
74026: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
74027: LD_EXP 47
74031: IFFALSE 74039
74033: PUSH
74034: LD_EXP 63
74038: AND
74039: IFFALSE 74122
74041: GO 74043
74043: DISABLE
74044: LD_INT 0
74046: PPUSH
74047: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
74048: LD_ADDR_VAR 0 2
74052: PUSH
74053: LD_INT 22
74055: PUSH
74056: LD_OWVAR 2
74060: PUSH
74061: EMPTY
74062: LIST
74063: LIST
74064: PUSH
74065: LD_INT 21
74067: PUSH
74068: LD_INT 3
74070: PUSH
74071: EMPTY
74072: LIST
74073: LIST
74074: PUSH
74075: EMPTY
74076: LIST
74077: LIST
74078: PPUSH
74079: CALL_OW 69
74083: ST_TO_ADDR
// if not tmp then
74084: LD_VAR 0 2
74088: NOT
74089: IFFALSE 74093
// exit ;
74091: GO 74122
// for i in tmp do
74093: LD_ADDR_VAR 0 1
74097: PUSH
74098: LD_VAR 0 2
74102: PUSH
74103: FOR_IN
74104: IFFALSE 74120
// SetBLevel ( i , 10 ) ;
74106: LD_VAR 0 1
74110: PPUSH
74111: LD_INT 10
74113: PPUSH
74114: CALL_OW 241
74118: GO 74103
74120: POP
74121: POP
// end ;
74122: PPOPN 2
74124: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
74125: LD_EXP 47
74129: IFFALSE 74137
74131: PUSH
74132: LD_EXP 64
74136: AND
74137: IFFALSE 74248
74139: GO 74141
74141: DISABLE
74142: LD_INT 0
74144: PPUSH
74145: PPUSH
74146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74147: LD_ADDR_VAR 0 3
74151: PUSH
74152: LD_INT 22
74154: PUSH
74155: LD_OWVAR 2
74159: PUSH
74160: EMPTY
74161: LIST
74162: LIST
74163: PUSH
74164: LD_INT 25
74166: PUSH
74167: LD_INT 1
74169: PUSH
74170: EMPTY
74171: LIST
74172: LIST
74173: PUSH
74174: EMPTY
74175: LIST
74176: LIST
74177: PPUSH
74178: CALL_OW 69
74182: ST_TO_ADDR
// if not tmp then
74183: LD_VAR 0 3
74187: NOT
74188: IFFALSE 74192
// exit ;
74190: GO 74248
// un := tmp [ rand ( 1 , tmp ) ] ;
74192: LD_ADDR_VAR 0 2
74196: PUSH
74197: LD_VAR 0 3
74201: PUSH
74202: LD_INT 1
74204: PPUSH
74205: LD_VAR 0 3
74209: PPUSH
74210: CALL_OW 12
74214: ARRAY
74215: ST_TO_ADDR
// if Crawls ( un ) then
74216: LD_VAR 0 2
74220: PPUSH
74221: CALL_OW 318
74225: IFFALSE 74236
// ComWalk ( un ) ;
74227: LD_VAR 0 2
74231: PPUSH
74232: CALL_OW 138
// SetClass ( un , class_sniper ) ;
74236: LD_VAR 0 2
74240: PPUSH
74241: LD_INT 5
74243: PPUSH
74244: CALL_OW 336
// end ;
74248: PPOPN 3
74250: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
74251: LD_EXP 47
74255: IFFALSE 74263
74257: PUSH
74258: LD_EXP 65
74262: AND
74263: IFFALSE 74275
74265: PUSH
74266: LD_OWVAR 67
74270: PUSH
74271: LD_INT 4
74273: LESS
74274: AND
74275: IFFALSE 74294
74277: GO 74279
74279: DISABLE
// begin Difficulty := Difficulty + 1 ;
74280: LD_ADDR_OWVAR 67
74284: PUSH
74285: LD_OWVAR 67
74289: PUSH
74290: LD_INT 1
74292: PLUS
74293: ST_TO_ADDR
// end ;
74294: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
74295: LD_EXP 47
74299: IFFALSE 74307
74301: PUSH
74302: LD_EXP 66
74306: AND
74307: IFFALSE 74410
74309: GO 74311
74311: DISABLE
74312: LD_INT 0
74314: PPUSH
// begin for i := 1 to 5 do
74315: LD_ADDR_VAR 0 1
74319: PUSH
74320: DOUBLE
74321: LD_INT 1
74323: DEC
74324: ST_TO_ADDR
74325: LD_INT 5
74327: PUSH
74328: FOR_TO
74329: IFFALSE 74408
// begin uc_nation := nation_nature ;
74331: LD_ADDR_OWVAR 21
74335: PUSH
74336: LD_INT 0
74338: ST_TO_ADDR
// uc_side := 0 ;
74339: LD_ADDR_OWVAR 20
74343: PUSH
74344: LD_INT 0
74346: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
74347: LD_ADDR_OWVAR 29
74351: PUSH
74352: LD_INT 12
74354: PUSH
74355: LD_INT 12
74357: PUSH
74358: EMPTY
74359: LIST
74360: LIST
74361: ST_TO_ADDR
// hc_agressivity := 20 ;
74362: LD_ADDR_OWVAR 35
74366: PUSH
74367: LD_INT 20
74369: ST_TO_ADDR
// hc_class := class_tiger ;
74370: LD_ADDR_OWVAR 28
74374: PUSH
74375: LD_INT 14
74377: ST_TO_ADDR
// hc_gallery :=  ;
74378: LD_ADDR_OWVAR 33
74382: PUSH
74383: LD_STRING 
74385: ST_TO_ADDR
// hc_name :=  ;
74386: LD_ADDR_OWVAR 26
74390: PUSH
74391: LD_STRING 
74393: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
74394: CALL_OW 44
74398: PPUSH
74399: LD_INT 0
74401: PPUSH
74402: CALL_OW 51
// end ;
74406: GO 74328
74408: POP
74409: POP
// end ;
74410: PPOPN 1
74412: END
// every 0 0$1 trigger StreamModeActive and sBomb do
74413: LD_EXP 47
74417: IFFALSE 74425
74419: PUSH
74420: LD_EXP 67
74424: AND
74425: IFFALSE 74434
74427: GO 74429
74429: DISABLE
// StreamSibBomb ;
74430: CALL 74435 0 0
74434: END
// export function StreamSibBomb ; var i , x , y ; begin
74435: LD_INT 0
74437: PPUSH
74438: PPUSH
74439: PPUSH
74440: PPUSH
// result := false ;
74441: LD_ADDR_VAR 0 1
74445: PUSH
74446: LD_INT 0
74448: ST_TO_ADDR
// for i := 1 to 16 do
74449: LD_ADDR_VAR 0 2
74453: PUSH
74454: DOUBLE
74455: LD_INT 1
74457: DEC
74458: ST_TO_ADDR
74459: LD_INT 16
74461: PUSH
74462: FOR_TO
74463: IFFALSE 74662
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
74465: LD_ADDR_VAR 0 3
74469: PUSH
74470: LD_INT 10
74472: PUSH
74473: LD_INT 20
74475: PUSH
74476: LD_INT 30
74478: PUSH
74479: LD_INT 40
74481: PUSH
74482: LD_INT 50
74484: PUSH
74485: LD_INT 60
74487: PUSH
74488: LD_INT 70
74490: PUSH
74491: LD_INT 80
74493: PUSH
74494: LD_INT 90
74496: PUSH
74497: LD_INT 100
74499: PUSH
74500: LD_INT 110
74502: PUSH
74503: LD_INT 120
74505: PUSH
74506: LD_INT 130
74508: PUSH
74509: LD_INT 140
74511: PUSH
74512: LD_INT 150
74514: PUSH
74515: EMPTY
74516: LIST
74517: LIST
74518: LIST
74519: LIST
74520: LIST
74521: LIST
74522: LIST
74523: LIST
74524: LIST
74525: LIST
74526: LIST
74527: LIST
74528: LIST
74529: LIST
74530: LIST
74531: PUSH
74532: LD_INT 1
74534: PPUSH
74535: LD_INT 15
74537: PPUSH
74538: CALL_OW 12
74542: ARRAY
74543: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
74544: LD_ADDR_VAR 0 4
74548: PUSH
74549: LD_INT 10
74551: PUSH
74552: LD_INT 20
74554: PUSH
74555: LD_INT 30
74557: PUSH
74558: LD_INT 40
74560: PUSH
74561: LD_INT 50
74563: PUSH
74564: LD_INT 60
74566: PUSH
74567: LD_INT 70
74569: PUSH
74570: LD_INT 80
74572: PUSH
74573: LD_INT 90
74575: PUSH
74576: LD_INT 100
74578: PUSH
74579: LD_INT 110
74581: PUSH
74582: LD_INT 120
74584: PUSH
74585: LD_INT 130
74587: PUSH
74588: LD_INT 140
74590: PUSH
74591: LD_INT 150
74593: PUSH
74594: EMPTY
74595: LIST
74596: LIST
74597: LIST
74598: LIST
74599: LIST
74600: LIST
74601: LIST
74602: LIST
74603: LIST
74604: LIST
74605: LIST
74606: LIST
74607: LIST
74608: LIST
74609: LIST
74610: PUSH
74611: LD_INT 1
74613: PPUSH
74614: LD_INT 15
74616: PPUSH
74617: CALL_OW 12
74621: ARRAY
74622: ST_TO_ADDR
// if ValidHex ( x , y ) then
74623: LD_VAR 0 3
74627: PPUSH
74628: LD_VAR 0 4
74632: PPUSH
74633: CALL_OW 488
74637: IFFALSE 74660
// begin result := [ x , y ] ;
74639: LD_ADDR_VAR 0 1
74643: PUSH
74644: LD_VAR 0 3
74648: PUSH
74649: LD_VAR 0 4
74653: PUSH
74654: EMPTY
74655: LIST
74656: LIST
74657: ST_TO_ADDR
// break ;
74658: GO 74662
// end ; end ;
74660: GO 74462
74662: POP
74663: POP
// if result then
74664: LD_VAR 0 1
74668: IFFALSE 74728
// begin ToLua ( playSibBomb() ) ;
74670: LD_STRING playSibBomb()
74672: PPUSH
74673: CALL_OW 559
// wait ( 0 0$14 ) ;
74677: LD_INT 490
74679: PPUSH
74680: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
74684: LD_VAR 0 1
74688: PUSH
74689: LD_INT 1
74691: ARRAY
74692: PPUSH
74693: LD_VAR 0 1
74697: PUSH
74698: LD_INT 2
74700: ARRAY
74701: PPUSH
74702: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
74706: LD_VAR 0 1
74710: PUSH
74711: LD_INT 1
74713: ARRAY
74714: PPUSH
74715: LD_VAR 0 1
74719: PUSH
74720: LD_INT 2
74722: ARRAY
74723: PPUSH
74724: CALL_OW 429
// end ; end ;
74728: LD_VAR 0 1
74732: RET
// every 0 0$1 trigger StreamModeActive and sReset do
74733: LD_EXP 47
74737: IFFALSE 74745
74739: PUSH
74740: LD_EXP 69
74744: AND
74745: IFFALSE 74757
74747: GO 74749
74749: DISABLE
// YouLost (  ) ;
74750: LD_STRING 
74752: PPUSH
74753: CALL_OW 104
74757: END
// every 0 0$1 trigger StreamModeActive and sFog do
74758: LD_EXP 47
74762: IFFALSE 74770
74764: PUSH
74765: LD_EXP 68
74769: AND
74770: IFFALSE 74784
74772: GO 74774
74774: DISABLE
// FogOff ( your_side ) ;
74775: LD_OWVAR 2
74779: PPUSH
74780: CALL_OW 344
74784: END
// every 0 0$1 trigger StreamModeActive and sSun do
74785: LD_EXP 47
74789: IFFALSE 74797
74791: PUSH
74792: LD_EXP 70
74796: AND
74797: IFFALSE 74825
74799: GO 74801
74801: DISABLE
// begin solar_recharge_percent := 0 ;
74802: LD_ADDR_OWVAR 79
74806: PUSH
74807: LD_INT 0
74809: ST_TO_ADDR
// wait ( 5 5$00 ) ;
74810: LD_INT 10500
74812: PPUSH
74813: CALL_OW 67
// solar_recharge_percent := 100 ;
74817: LD_ADDR_OWVAR 79
74821: PUSH
74822: LD_INT 100
74824: ST_TO_ADDR
// end ;
74825: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
74826: LD_EXP 47
74830: IFFALSE 74838
74832: PUSH
74833: LD_EXP 71
74837: AND
74838: IFFALSE 75077
74840: GO 74842
74842: DISABLE
74843: LD_INT 0
74845: PPUSH
74846: PPUSH
74847: PPUSH
// begin tmp := [ ] ;
74848: LD_ADDR_VAR 0 3
74852: PUSH
74853: EMPTY
74854: ST_TO_ADDR
// for i := 1 to 6 do
74855: LD_ADDR_VAR 0 1
74859: PUSH
74860: DOUBLE
74861: LD_INT 1
74863: DEC
74864: ST_TO_ADDR
74865: LD_INT 6
74867: PUSH
74868: FOR_TO
74869: IFFALSE 74974
// begin uc_nation := nation_nature ;
74871: LD_ADDR_OWVAR 21
74875: PUSH
74876: LD_INT 0
74878: ST_TO_ADDR
// uc_side := 0 ;
74879: LD_ADDR_OWVAR 20
74883: PUSH
74884: LD_INT 0
74886: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
74887: LD_ADDR_OWVAR 29
74891: PUSH
74892: LD_INT 12
74894: PUSH
74895: LD_INT 12
74897: PUSH
74898: EMPTY
74899: LIST
74900: LIST
74901: ST_TO_ADDR
// hc_agressivity := 20 ;
74902: LD_ADDR_OWVAR 35
74906: PUSH
74907: LD_INT 20
74909: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
74910: LD_ADDR_OWVAR 28
74914: PUSH
74915: LD_INT 17
74917: ST_TO_ADDR
// hc_gallery :=  ;
74918: LD_ADDR_OWVAR 33
74922: PUSH
74923: LD_STRING 
74925: ST_TO_ADDR
// hc_name :=  ;
74926: LD_ADDR_OWVAR 26
74930: PUSH
74931: LD_STRING 
74933: ST_TO_ADDR
// un := CreateHuman ;
74934: LD_ADDR_VAR 0 2
74938: PUSH
74939: CALL_OW 44
74943: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
74944: LD_VAR 0 2
74948: PPUSH
74949: LD_INT 1
74951: PPUSH
74952: CALL_OW 51
// tmp := tmp ^ un ;
74956: LD_ADDR_VAR 0 3
74960: PUSH
74961: LD_VAR 0 3
74965: PUSH
74966: LD_VAR 0 2
74970: ADD
74971: ST_TO_ADDR
// end ;
74972: GO 74868
74974: POP
74975: POP
// repeat wait ( 0 0$1 ) ;
74976: LD_INT 35
74978: PPUSH
74979: CALL_OW 67
// for un in tmp do
74983: LD_ADDR_VAR 0 2
74987: PUSH
74988: LD_VAR 0 3
74992: PUSH
74993: FOR_IN
74994: IFFALSE 75068
// begin if IsDead ( un ) then
74996: LD_VAR 0 2
75000: PPUSH
75001: CALL_OW 301
75005: IFFALSE 75025
// begin tmp := tmp diff un ;
75007: LD_ADDR_VAR 0 3
75011: PUSH
75012: LD_VAR 0 3
75016: PUSH
75017: LD_VAR 0 2
75021: DIFF
75022: ST_TO_ADDR
// continue ;
75023: GO 74993
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
75025: LD_VAR 0 2
75029: PPUSH
75030: LD_INT 3
75032: PUSH
75033: LD_INT 22
75035: PUSH
75036: LD_INT 0
75038: PUSH
75039: EMPTY
75040: LIST
75041: LIST
75042: PUSH
75043: EMPTY
75044: LIST
75045: LIST
75046: PPUSH
75047: CALL_OW 69
75051: PPUSH
75052: LD_VAR 0 2
75056: PPUSH
75057: CALL_OW 74
75061: PPUSH
75062: CALL_OW 115
// end ;
75066: GO 74993
75068: POP
75069: POP
// until not tmp ;
75070: LD_VAR 0 3
75074: NOT
75075: IFFALSE 74976
// end ;
75077: PPOPN 3
75079: END
// every 0 0$1 trigger StreamModeActive and sTroll do
75080: LD_EXP 47
75084: IFFALSE 75092
75086: PUSH
75087: LD_EXP 72
75091: AND
75092: IFFALSE 75146
75094: GO 75096
75096: DISABLE
// begin ToLua ( displayTroll(); ) ;
75097: LD_STRING displayTroll();
75099: PPUSH
75100: CALL_OW 559
// wait ( 3 3$00 ) ;
75104: LD_INT 6300
75106: PPUSH
75107: CALL_OW 67
// ToLua ( hideTroll(); ) ;
75111: LD_STRING hideTroll();
75113: PPUSH
75114: CALL_OW 559
// wait ( 1 1$00 ) ;
75118: LD_INT 2100
75120: PPUSH
75121: CALL_OW 67
// ToLua ( displayTroll(); ) ;
75125: LD_STRING displayTroll();
75127: PPUSH
75128: CALL_OW 559
// wait ( 1 1$00 ) ;
75132: LD_INT 2100
75134: PPUSH
75135: CALL_OW 67
// ToLua ( hideTroll(); ) ;
75139: LD_STRING hideTroll();
75141: PPUSH
75142: CALL_OW 559
// end ;
75146: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
75147: LD_EXP 47
75151: IFFALSE 75159
75153: PUSH
75154: LD_EXP 73
75158: AND
75159: IFFALSE 75222
75161: GO 75163
75163: DISABLE
75164: LD_INT 0
75166: PPUSH
// begin p := 0 ;
75167: LD_ADDR_VAR 0 1
75171: PUSH
75172: LD_INT 0
75174: ST_TO_ADDR
// repeat game_speed := 1 ;
75175: LD_ADDR_OWVAR 65
75179: PUSH
75180: LD_INT 1
75182: ST_TO_ADDR
// wait ( 0 0$1 ) ;
75183: LD_INT 35
75185: PPUSH
75186: CALL_OW 67
// p := p + 1 ;
75190: LD_ADDR_VAR 0 1
75194: PUSH
75195: LD_VAR 0 1
75199: PUSH
75200: LD_INT 1
75202: PLUS
75203: ST_TO_ADDR
// until p >= 60 ;
75204: LD_VAR 0 1
75208: PUSH
75209: LD_INT 60
75211: GREATEREQUAL
75212: IFFALSE 75175
// game_speed := 4 ;
75214: LD_ADDR_OWVAR 65
75218: PUSH
75219: LD_INT 4
75221: ST_TO_ADDR
// end ;
75222: PPOPN 1
75224: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
75225: LD_EXP 47
75229: IFFALSE 75237
75231: PUSH
75232: LD_EXP 74
75236: AND
75237: IFFALSE 75383
75239: GO 75241
75241: DISABLE
75242: LD_INT 0
75244: PPUSH
75245: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75246: LD_ADDR_VAR 0 1
75250: PUSH
75251: LD_INT 22
75253: PUSH
75254: LD_OWVAR 2
75258: PUSH
75259: EMPTY
75260: LIST
75261: LIST
75262: PUSH
75263: LD_INT 2
75265: PUSH
75266: LD_INT 30
75268: PUSH
75269: LD_INT 0
75271: PUSH
75272: EMPTY
75273: LIST
75274: LIST
75275: PUSH
75276: LD_INT 30
75278: PUSH
75279: LD_INT 1
75281: PUSH
75282: EMPTY
75283: LIST
75284: LIST
75285: PUSH
75286: EMPTY
75287: LIST
75288: LIST
75289: LIST
75290: PUSH
75291: EMPTY
75292: LIST
75293: LIST
75294: PPUSH
75295: CALL_OW 69
75299: ST_TO_ADDR
// if not depot then
75300: LD_VAR 0 1
75304: NOT
75305: IFFALSE 75309
// exit ;
75307: GO 75383
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
75309: LD_ADDR_VAR 0 2
75313: PUSH
75314: LD_VAR 0 1
75318: PUSH
75319: LD_INT 1
75321: PPUSH
75322: LD_VAR 0 1
75326: PPUSH
75327: CALL_OW 12
75331: ARRAY
75332: PPUSH
75333: CALL_OW 274
75337: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
75338: LD_VAR 0 2
75342: PPUSH
75343: LD_INT 1
75345: PPUSH
75346: LD_INT 0
75348: PPUSH
75349: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
75353: LD_VAR 0 2
75357: PPUSH
75358: LD_INT 2
75360: PPUSH
75361: LD_INT 0
75363: PPUSH
75364: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
75368: LD_VAR 0 2
75372: PPUSH
75373: LD_INT 3
75375: PPUSH
75376: LD_INT 0
75378: PPUSH
75379: CALL_OW 277
// end ;
75383: PPOPN 2
75385: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
75386: LD_EXP 47
75390: IFFALSE 75398
75392: PUSH
75393: LD_EXP 75
75397: AND
75398: IFFALSE 75495
75400: GO 75402
75402: DISABLE
75403: LD_INT 0
75405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75406: LD_ADDR_VAR 0 1
75410: PUSH
75411: LD_INT 22
75413: PUSH
75414: LD_OWVAR 2
75418: PUSH
75419: EMPTY
75420: LIST
75421: LIST
75422: PUSH
75423: LD_INT 21
75425: PUSH
75426: LD_INT 1
75428: PUSH
75429: EMPTY
75430: LIST
75431: LIST
75432: PUSH
75433: LD_INT 3
75435: PUSH
75436: LD_INT 23
75438: PUSH
75439: LD_INT 0
75441: PUSH
75442: EMPTY
75443: LIST
75444: LIST
75445: PUSH
75446: EMPTY
75447: LIST
75448: LIST
75449: PUSH
75450: EMPTY
75451: LIST
75452: LIST
75453: LIST
75454: PPUSH
75455: CALL_OW 69
75459: ST_TO_ADDR
// if not tmp then
75460: LD_VAR 0 1
75464: NOT
75465: IFFALSE 75469
// exit ;
75467: GO 75495
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
75469: LD_VAR 0 1
75473: PUSH
75474: LD_INT 1
75476: PPUSH
75477: LD_VAR 0 1
75481: PPUSH
75482: CALL_OW 12
75486: ARRAY
75487: PPUSH
75488: LD_INT 200
75490: PPUSH
75491: CALL_OW 234
// end ;
75495: PPOPN 1
75497: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
75498: LD_EXP 47
75502: IFFALSE 75510
75504: PUSH
75505: LD_EXP 76
75509: AND
75510: IFFALSE 75589
75512: GO 75514
75514: DISABLE
75515: LD_INT 0
75517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
75518: LD_ADDR_VAR 0 1
75522: PUSH
75523: LD_INT 22
75525: PUSH
75526: LD_OWVAR 2
75530: PUSH
75531: EMPTY
75532: LIST
75533: LIST
75534: PUSH
75535: LD_INT 21
75537: PUSH
75538: LD_INT 2
75540: PUSH
75541: EMPTY
75542: LIST
75543: LIST
75544: PUSH
75545: EMPTY
75546: LIST
75547: LIST
75548: PPUSH
75549: CALL_OW 69
75553: ST_TO_ADDR
// if not tmp then
75554: LD_VAR 0 1
75558: NOT
75559: IFFALSE 75563
// exit ;
75561: GO 75589
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
75563: LD_VAR 0 1
75567: PUSH
75568: LD_INT 1
75570: PPUSH
75571: LD_VAR 0 1
75575: PPUSH
75576: CALL_OW 12
75580: ARRAY
75581: PPUSH
75582: LD_INT 60
75584: PPUSH
75585: CALL_OW 234
// end ;
75589: PPOPN 1
75591: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
75592: LD_EXP 47
75596: IFFALSE 75604
75598: PUSH
75599: LD_EXP 77
75603: AND
75604: IFFALSE 75703
75606: GO 75608
75608: DISABLE
75609: LD_INT 0
75611: PPUSH
75612: PPUSH
// begin enable ;
75613: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
75614: LD_ADDR_VAR 0 1
75618: PUSH
75619: LD_INT 22
75621: PUSH
75622: LD_OWVAR 2
75626: PUSH
75627: EMPTY
75628: LIST
75629: LIST
75630: PUSH
75631: LD_INT 61
75633: PUSH
75634: EMPTY
75635: LIST
75636: PUSH
75637: LD_INT 33
75639: PUSH
75640: LD_INT 2
75642: PUSH
75643: EMPTY
75644: LIST
75645: LIST
75646: PUSH
75647: EMPTY
75648: LIST
75649: LIST
75650: LIST
75651: PPUSH
75652: CALL_OW 69
75656: ST_TO_ADDR
// if not tmp then
75657: LD_VAR 0 1
75661: NOT
75662: IFFALSE 75666
// exit ;
75664: GO 75703
// for i in tmp do
75666: LD_ADDR_VAR 0 2
75670: PUSH
75671: LD_VAR 0 1
75675: PUSH
75676: FOR_IN
75677: IFFALSE 75701
// if IsControledBy ( i ) then
75679: LD_VAR 0 2
75683: PPUSH
75684: CALL_OW 312
75688: IFFALSE 75699
// ComUnlink ( i ) ;
75690: LD_VAR 0 2
75694: PPUSH
75695: CALL_OW 136
75699: GO 75676
75701: POP
75702: POP
// end ;
75703: PPOPN 2
75705: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
75706: LD_EXP 47
75710: IFFALSE 75718
75712: PUSH
75713: LD_EXP 78
75717: AND
75718: IFFALSE 75858
75720: GO 75722
75722: DISABLE
75723: LD_INT 0
75725: PPUSH
75726: PPUSH
// begin ToLua ( displayPowell(); ) ;
75727: LD_STRING displayPowell();
75729: PPUSH
75730: CALL_OW 559
// uc_side := 0 ;
75734: LD_ADDR_OWVAR 20
75738: PUSH
75739: LD_INT 0
75741: ST_TO_ADDR
// uc_nation := 2 ;
75742: LD_ADDR_OWVAR 21
75746: PUSH
75747: LD_INT 2
75749: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
75750: LD_ADDR_OWVAR 37
75754: PUSH
75755: LD_INT 14
75757: ST_TO_ADDR
// vc_engine := engine_siberite ;
75758: LD_ADDR_OWVAR 39
75762: PUSH
75763: LD_INT 3
75765: ST_TO_ADDR
// vc_control := control_apeman ;
75766: LD_ADDR_OWVAR 38
75770: PUSH
75771: LD_INT 5
75773: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
75774: LD_ADDR_OWVAR 40
75778: PUSH
75779: LD_INT 29
75781: ST_TO_ADDR
// un := CreateVehicle ;
75782: LD_ADDR_VAR 0 2
75786: PUSH
75787: CALL_OW 45
75791: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
75792: LD_VAR 0 2
75796: PPUSH
75797: LD_INT 1
75799: PPUSH
75800: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
75804: LD_INT 35
75806: PPUSH
75807: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
75811: LD_VAR 0 2
75815: PPUSH
75816: LD_INT 22
75818: PUSH
75819: LD_OWVAR 2
75823: PUSH
75824: EMPTY
75825: LIST
75826: LIST
75827: PPUSH
75828: CALL_OW 69
75832: PPUSH
75833: LD_VAR 0 2
75837: PPUSH
75838: CALL_OW 74
75842: PPUSH
75843: CALL_OW 115
// until IsDead ( un ) ;
75847: LD_VAR 0 2
75851: PPUSH
75852: CALL_OW 301
75856: IFFALSE 75804
// end ;
75858: PPOPN 2
75860: END
// every 0 0$1 trigger StreamModeActive and sStu do
75861: LD_EXP 47
75865: IFFALSE 75873
75867: PUSH
75868: LD_EXP 86
75872: AND
75873: IFFALSE 75889
75875: GO 75877
75877: DISABLE
// begin ToLua ( displayStucuk(); ) ;
75878: LD_STRING displayStucuk();
75880: PPUSH
75881: CALL_OW 559
// ResetFog ;
75885: CALL_OW 335
// end ;
75889: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
75890: LD_EXP 47
75894: IFFALSE 75902
75896: PUSH
75897: LD_EXP 79
75901: AND
75902: IFFALSE 76043
75904: GO 75906
75906: DISABLE
75907: LD_INT 0
75909: PPUSH
75910: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
75911: LD_ADDR_VAR 0 2
75915: PUSH
75916: LD_INT 22
75918: PUSH
75919: LD_OWVAR 2
75923: PUSH
75924: EMPTY
75925: LIST
75926: LIST
75927: PUSH
75928: LD_INT 21
75930: PUSH
75931: LD_INT 1
75933: PUSH
75934: EMPTY
75935: LIST
75936: LIST
75937: PUSH
75938: EMPTY
75939: LIST
75940: LIST
75941: PPUSH
75942: CALL_OW 69
75946: ST_TO_ADDR
// if not tmp then
75947: LD_VAR 0 2
75951: NOT
75952: IFFALSE 75956
// exit ;
75954: GO 76043
// un := tmp [ rand ( 1 , tmp ) ] ;
75956: LD_ADDR_VAR 0 1
75960: PUSH
75961: LD_VAR 0 2
75965: PUSH
75966: LD_INT 1
75968: PPUSH
75969: LD_VAR 0 2
75973: PPUSH
75974: CALL_OW 12
75978: ARRAY
75979: ST_TO_ADDR
// SetSide ( un , 0 ) ;
75980: LD_VAR 0 1
75984: PPUSH
75985: LD_INT 0
75987: PPUSH
75988: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
75992: LD_VAR 0 1
75996: PPUSH
75997: LD_OWVAR 3
76001: PUSH
76002: LD_VAR 0 1
76006: DIFF
76007: PPUSH
76008: LD_VAR 0 1
76012: PPUSH
76013: CALL_OW 74
76017: PPUSH
76018: CALL_OW 115
// wait ( 0 0$20 ) ;
76022: LD_INT 700
76024: PPUSH
76025: CALL_OW 67
// SetSide ( un , your_side ) ;
76029: LD_VAR 0 1
76033: PPUSH
76034: LD_OWVAR 2
76038: PPUSH
76039: CALL_OW 235
// end ;
76043: PPOPN 2
76045: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
76046: LD_EXP 47
76050: IFFALSE 76058
76052: PUSH
76053: LD_EXP 80
76057: AND
76058: IFFALSE 76164
76060: GO 76062
76062: DISABLE
76063: LD_INT 0
76065: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
76066: LD_ADDR_VAR 0 1
76070: PUSH
76071: LD_INT 22
76073: PUSH
76074: LD_OWVAR 2
76078: PUSH
76079: EMPTY
76080: LIST
76081: LIST
76082: PUSH
76083: LD_INT 2
76085: PUSH
76086: LD_INT 30
76088: PUSH
76089: LD_INT 0
76091: PUSH
76092: EMPTY
76093: LIST
76094: LIST
76095: PUSH
76096: LD_INT 30
76098: PUSH
76099: LD_INT 1
76101: PUSH
76102: EMPTY
76103: LIST
76104: LIST
76105: PUSH
76106: EMPTY
76107: LIST
76108: LIST
76109: LIST
76110: PUSH
76111: EMPTY
76112: LIST
76113: LIST
76114: PPUSH
76115: CALL_OW 69
76119: ST_TO_ADDR
// if not depot then
76120: LD_VAR 0 1
76124: NOT
76125: IFFALSE 76129
// exit ;
76127: GO 76164
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
76129: LD_VAR 0 1
76133: PUSH
76134: LD_INT 1
76136: ARRAY
76137: PPUSH
76138: CALL_OW 250
76142: PPUSH
76143: LD_VAR 0 1
76147: PUSH
76148: LD_INT 1
76150: ARRAY
76151: PPUSH
76152: CALL_OW 251
76156: PPUSH
76157: LD_INT 70
76159: PPUSH
76160: CALL_OW 495
// end ;
76164: PPOPN 1
76166: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
76167: LD_EXP 47
76171: IFFALSE 76179
76173: PUSH
76174: LD_EXP 81
76178: AND
76179: IFFALSE 76390
76181: GO 76183
76183: DISABLE
76184: LD_INT 0
76186: PPUSH
76187: PPUSH
76188: PPUSH
76189: PPUSH
76190: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
76191: LD_ADDR_VAR 0 5
76195: PUSH
76196: LD_INT 22
76198: PUSH
76199: LD_OWVAR 2
76203: PUSH
76204: EMPTY
76205: LIST
76206: LIST
76207: PUSH
76208: LD_INT 21
76210: PUSH
76211: LD_INT 1
76213: PUSH
76214: EMPTY
76215: LIST
76216: LIST
76217: PUSH
76218: EMPTY
76219: LIST
76220: LIST
76221: PPUSH
76222: CALL_OW 69
76226: ST_TO_ADDR
// if not tmp then
76227: LD_VAR 0 5
76231: NOT
76232: IFFALSE 76236
// exit ;
76234: GO 76390
// for i in tmp do
76236: LD_ADDR_VAR 0 1
76240: PUSH
76241: LD_VAR 0 5
76245: PUSH
76246: FOR_IN
76247: IFFALSE 76388
// begin d := rand ( 0 , 5 ) ;
76249: LD_ADDR_VAR 0 4
76253: PUSH
76254: LD_INT 0
76256: PPUSH
76257: LD_INT 5
76259: PPUSH
76260: CALL_OW 12
76264: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
76265: LD_ADDR_VAR 0 2
76269: PUSH
76270: LD_VAR 0 1
76274: PPUSH
76275: CALL_OW 250
76279: PPUSH
76280: LD_VAR 0 4
76284: PPUSH
76285: LD_INT 3
76287: PPUSH
76288: LD_INT 12
76290: PPUSH
76291: CALL_OW 12
76295: PPUSH
76296: CALL_OW 272
76300: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
76301: LD_ADDR_VAR 0 3
76305: PUSH
76306: LD_VAR 0 1
76310: PPUSH
76311: CALL_OW 251
76315: PPUSH
76316: LD_VAR 0 4
76320: PPUSH
76321: LD_INT 3
76323: PPUSH
76324: LD_INT 12
76326: PPUSH
76327: CALL_OW 12
76331: PPUSH
76332: CALL_OW 273
76336: ST_TO_ADDR
// if ValidHex ( x , y ) then
76337: LD_VAR 0 2
76341: PPUSH
76342: LD_VAR 0 3
76346: PPUSH
76347: CALL_OW 488
76351: IFFALSE 76386
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
76353: LD_VAR 0 1
76357: PPUSH
76358: LD_VAR 0 2
76362: PPUSH
76363: LD_VAR 0 3
76367: PPUSH
76368: LD_INT 3
76370: PPUSH
76371: LD_INT 6
76373: PPUSH
76374: CALL_OW 12
76378: PPUSH
76379: LD_INT 1
76381: PPUSH
76382: CALL_OW 483
// end ;
76386: GO 76246
76388: POP
76389: POP
// end ;
76390: PPOPN 5
76392: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
76393: LD_EXP 47
76397: IFFALSE 76405
76399: PUSH
76400: LD_EXP 82
76404: AND
76405: IFFALSE 76499
76407: GO 76409
76409: DISABLE
76410: LD_INT 0
76412: PPUSH
76413: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
76414: LD_ADDR_VAR 0 2
76418: PUSH
76419: LD_INT 22
76421: PUSH
76422: LD_OWVAR 2
76426: PUSH
76427: EMPTY
76428: LIST
76429: LIST
76430: PUSH
76431: LD_INT 32
76433: PUSH
76434: LD_INT 1
76436: PUSH
76437: EMPTY
76438: LIST
76439: LIST
76440: PUSH
76441: LD_INT 21
76443: PUSH
76444: LD_INT 2
76446: PUSH
76447: EMPTY
76448: LIST
76449: LIST
76450: PUSH
76451: EMPTY
76452: LIST
76453: LIST
76454: LIST
76455: PPUSH
76456: CALL_OW 69
76460: ST_TO_ADDR
// if not tmp then
76461: LD_VAR 0 2
76465: NOT
76466: IFFALSE 76470
// exit ;
76468: GO 76499
// for i in tmp do
76470: LD_ADDR_VAR 0 1
76474: PUSH
76475: LD_VAR 0 2
76479: PUSH
76480: FOR_IN
76481: IFFALSE 76497
// SetFuel ( i , 0 ) ;
76483: LD_VAR 0 1
76487: PPUSH
76488: LD_INT 0
76490: PPUSH
76491: CALL_OW 240
76495: GO 76480
76497: POP
76498: POP
// end ;
76499: PPOPN 2
76501: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
76502: LD_EXP 47
76506: IFFALSE 76514
76508: PUSH
76509: LD_EXP 83
76513: AND
76514: IFFALSE 76580
76516: GO 76518
76518: DISABLE
76519: LD_INT 0
76521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
76522: LD_ADDR_VAR 0 1
76526: PUSH
76527: LD_INT 22
76529: PUSH
76530: LD_OWVAR 2
76534: PUSH
76535: EMPTY
76536: LIST
76537: LIST
76538: PUSH
76539: LD_INT 30
76541: PUSH
76542: LD_INT 29
76544: PUSH
76545: EMPTY
76546: LIST
76547: LIST
76548: PUSH
76549: EMPTY
76550: LIST
76551: LIST
76552: PPUSH
76553: CALL_OW 69
76557: ST_TO_ADDR
// if not tmp then
76558: LD_VAR 0 1
76562: NOT
76563: IFFALSE 76567
// exit ;
76565: GO 76580
// DestroyUnit ( tmp [ 1 ] ) ;
76567: LD_VAR 0 1
76571: PUSH
76572: LD_INT 1
76574: ARRAY
76575: PPUSH
76576: CALL_OW 65
// end ;
76580: PPOPN 1
76582: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
76583: LD_EXP 47
76587: IFFALSE 76595
76589: PUSH
76590: LD_EXP 85
76594: AND
76595: IFFALSE 76724
76597: GO 76599
76599: DISABLE
76600: LD_INT 0
76602: PPUSH
// begin uc_side := 0 ;
76603: LD_ADDR_OWVAR 20
76607: PUSH
76608: LD_INT 0
76610: ST_TO_ADDR
// uc_nation := nation_arabian ;
76611: LD_ADDR_OWVAR 21
76615: PUSH
76616: LD_INT 2
76618: ST_TO_ADDR
// hc_gallery :=  ;
76619: LD_ADDR_OWVAR 33
76623: PUSH
76624: LD_STRING 
76626: ST_TO_ADDR
// hc_name :=  ;
76627: LD_ADDR_OWVAR 26
76631: PUSH
76632: LD_STRING 
76634: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
76635: LD_INT 1
76637: PPUSH
76638: LD_INT 11
76640: PPUSH
76641: LD_INT 10
76643: PPUSH
76644: CALL_OW 380
// un := CreateHuman ;
76648: LD_ADDR_VAR 0 1
76652: PUSH
76653: CALL_OW 44
76657: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
76658: LD_VAR 0 1
76662: PPUSH
76663: LD_INT 1
76665: PPUSH
76666: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
76670: LD_INT 35
76672: PPUSH
76673: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
76677: LD_VAR 0 1
76681: PPUSH
76682: LD_INT 22
76684: PUSH
76685: LD_OWVAR 2
76689: PUSH
76690: EMPTY
76691: LIST
76692: LIST
76693: PPUSH
76694: CALL_OW 69
76698: PPUSH
76699: LD_VAR 0 1
76703: PPUSH
76704: CALL_OW 74
76708: PPUSH
76709: CALL_OW 115
// until IsDead ( un ) ;
76713: LD_VAR 0 1
76717: PPUSH
76718: CALL_OW 301
76722: IFFALSE 76670
// end ;
76724: PPOPN 1
76726: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
76727: LD_EXP 47
76731: IFFALSE 76739
76733: PUSH
76734: LD_EXP 87
76738: AND
76739: IFFALSE 76751
76741: GO 76743
76743: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
76744: LD_STRING earthquake(getX(game), 0, 32)
76746: PPUSH
76747: CALL_OW 559
76751: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
76752: LD_EXP 47
76756: IFFALSE 76764
76758: PUSH
76759: LD_EXP 88
76763: AND
76764: IFFALSE 76855
76766: GO 76768
76768: DISABLE
76769: LD_INT 0
76771: PPUSH
// begin enable ;
76772: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
76773: LD_ADDR_VAR 0 1
76777: PUSH
76778: LD_INT 22
76780: PUSH
76781: LD_OWVAR 2
76785: PUSH
76786: EMPTY
76787: LIST
76788: LIST
76789: PUSH
76790: LD_INT 21
76792: PUSH
76793: LD_INT 2
76795: PUSH
76796: EMPTY
76797: LIST
76798: LIST
76799: PUSH
76800: LD_INT 33
76802: PUSH
76803: LD_INT 3
76805: PUSH
76806: EMPTY
76807: LIST
76808: LIST
76809: PUSH
76810: EMPTY
76811: LIST
76812: LIST
76813: LIST
76814: PPUSH
76815: CALL_OW 69
76819: ST_TO_ADDR
// if not tmp then
76820: LD_VAR 0 1
76824: NOT
76825: IFFALSE 76829
// exit ;
76827: GO 76855
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
76829: LD_VAR 0 1
76833: PUSH
76834: LD_INT 1
76836: PPUSH
76837: LD_VAR 0 1
76841: PPUSH
76842: CALL_OW 12
76846: ARRAY
76847: PPUSH
76848: LD_INT 1
76850: PPUSH
76851: CALL_OW 234
// end ;
76855: PPOPN 1
76857: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
76858: LD_EXP 47
76862: IFFALSE 76870
76864: PUSH
76865: LD_EXP 89
76869: AND
76870: IFFALSE 77011
76872: GO 76874
76874: DISABLE
76875: LD_INT 0
76877: PPUSH
76878: PPUSH
76879: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
76880: LD_ADDR_VAR 0 3
76884: PUSH
76885: LD_INT 22
76887: PUSH
76888: LD_OWVAR 2
76892: PUSH
76893: EMPTY
76894: LIST
76895: LIST
76896: PUSH
76897: LD_INT 25
76899: PUSH
76900: LD_INT 1
76902: PUSH
76903: EMPTY
76904: LIST
76905: LIST
76906: PUSH
76907: EMPTY
76908: LIST
76909: LIST
76910: PPUSH
76911: CALL_OW 69
76915: ST_TO_ADDR
// if not tmp then
76916: LD_VAR 0 3
76920: NOT
76921: IFFALSE 76925
// exit ;
76923: GO 77011
// un := tmp [ rand ( 1 , tmp ) ] ;
76925: LD_ADDR_VAR 0 2
76929: PUSH
76930: LD_VAR 0 3
76934: PUSH
76935: LD_INT 1
76937: PPUSH
76938: LD_VAR 0 3
76942: PPUSH
76943: CALL_OW 12
76947: ARRAY
76948: ST_TO_ADDR
// if Crawls ( un ) then
76949: LD_VAR 0 2
76953: PPUSH
76954: CALL_OW 318
76958: IFFALSE 76969
// ComWalk ( un ) ;
76960: LD_VAR 0 2
76964: PPUSH
76965: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
76969: LD_VAR 0 2
76973: PPUSH
76974: LD_INT 9
76976: PPUSH
76977: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
76981: LD_INT 28
76983: PPUSH
76984: LD_OWVAR 2
76988: PPUSH
76989: LD_INT 2
76991: PPUSH
76992: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
76996: LD_INT 29
76998: PPUSH
76999: LD_OWVAR 2
77003: PPUSH
77004: LD_INT 2
77006: PPUSH
77007: CALL_OW 322
// end ;
77011: PPOPN 3
77013: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
77014: LD_EXP 47
77018: IFFALSE 77026
77020: PUSH
77021: LD_EXP 90
77025: AND
77026: IFFALSE 77137
77028: GO 77030
77030: DISABLE
77031: LD_INT 0
77033: PPUSH
77034: PPUSH
77035: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77036: LD_ADDR_VAR 0 3
77040: PUSH
77041: LD_INT 22
77043: PUSH
77044: LD_OWVAR 2
77048: PUSH
77049: EMPTY
77050: LIST
77051: LIST
77052: PUSH
77053: LD_INT 25
77055: PUSH
77056: LD_INT 1
77058: PUSH
77059: EMPTY
77060: LIST
77061: LIST
77062: PUSH
77063: EMPTY
77064: LIST
77065: LIST
77066: PPUSH
77067: CALL_OW 69
77071: ST_TO_ADDR
// if not tmp then
77072: LD_VAR 0 3
77076: NOT
77077: IFFALSE 77081
// exit ;
77079: GO 77137
// un := tmp [ rand ( 1 , tmp ) ] ;
77081: LD_ADDR_VAR 0 2
77085: PUSH
77086: LD_VAR 0 3
77090: PUSH
77091: LD_INT 1
77093: PPUSH
77094: LD_VAR 0 3
77098: PPUSH
77099: CALL_OW 12
77103: ARRAY
77104: ST_TO_ADDR
// if Crawls ( un ) then
77105: LD_VAR 0 2
77109: PPUSH
77110: CALL_OW 318
77114: IFFALSE 77125
// ComWalk ( un ) ;
77116: LD_VAR 0 2
77120: PPUSH
77121: CALL_OW 138
// SetClass ( un , class_mortar ) ;
77125: LD_VAR 0 2
77129: PPUSH
77130: LD_INT 8
77132: PPUSH
77133: CALL_OW 336
// end ;
77137: PPOPN 3
77139: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
77140: LD_EXP 47
77144: IFFALSE 77152
77146: PUSH
77147: LD_EXP 91
77151: AND
77152: IFFALSE 77296
77154: GO 77156
77156: DISABLE
77157: LD_INT 0
77159: PPUSH
77160: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
77161: LD_ADDR_VAR 0 2
77165: PUSH
77166: LD_INT 22
77168: PUSH
77169: LD_OWVAR 2
77173: PUSH
77174: EMPTY
77175: LIST
77176: LIST
77177: PUSH
77178: LD_INT 21
77180: PUSH
77181: LD_INT 2
77183: PUSH
77184: EMPTY
77185: LIST
77186: LIST
77187: PUSH
77188: LD_INT 2
77190: PUSH
77191: LD_INT 34
77193: PUSH
77194: LD_INT 12
77196: PUSH
77197: EMPTY
77198: LIST
77199: LIST
77200: PUSH
77201: LD_INT 34
77203: PUSH
77204: LD_INT 51
77206: PUSH
77207: EMPTY
77208: LIST
77209: LIST
77210: PUSH
77211: LD_INT 34
77213: PUSH
77214: LD_INT 32
77216: PUSH
77217: EMPTY
77218: LIST
77219: LIST
77220: PUSH
77221: EMPTY
77222: LIST
77223: LIST
77224: LIST
77225: LIST
77226: PUSH
77227: EMPTY
77228: LIST
77229: LIST
77230: LIST
77231: PPUSH
77232: CALL_OW 69
77236: ST_TO_ADDR
// if not tmp then
77237: LD_VAR 0 2
77241: NOT
77242: IFFALSE 77246
// exit ;
77244: GO 77296
// for i in tmp do
77246: LD_ADDR_VAR 0 1
77250: PUSH
77251: LD_VAR 0 2
77255: PUSH
77256: FOR_IN
77257: IFFALSE 77294
// if GetCargo ( i , mat_artifact ) = 0 then
77259: LD_VAR 0 1
77263: PPUSH
77264: LD_INT 4
77266: PPUSH
77267: CALL_OW 289
77271: PUSH
77272: LD_INT 0
77274: EQUAL
77275: IFFALSE 77292
// SetCargo ( i , mat_siberit , 100 ) ;
77277: LD_VAR 0 1
77281: PPUSH
77282: LD_INT 3
77284: PPUSH
77285: LD_INT 100
77287: PPUSH
77288: CALL_OW 290
77292: GO 77256
77294: POP
77295: POP
// end ;
77296: PPOPN 2
77298: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
77299: LD_EXP 47
77303: IFFALSE 77311
77305: PUSH
77306: LD_EXP 92
77310: AND
77311: IFFALSE 77494
77313: GO 77315
77315: DISABLE
77316: LD_INT 0
77318: PPUSH
77319: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
77320: LD_ADDR_VAR 0 2
77324: PUSH
77325: LD_INT 22
77327: PUSH
77328: LD_OWVAR 2
77332: PUSH
77333: EMPTY
77334: LIST
77335: LIST
77336: PPUSH
77337: CALL_OW 69
77341: ST_TO_ADDR
// if not tmp then
77342: LD_VAR 0 2
77346: NOT
77347: IFFALSE 77351
// exit ;
77349: GO 77494
// for i := 1 to 2 do
77351: LD_ADDR_VAR 0 1
77355: PUSH
77356: DOUBLE
77357: LD_INT 1
77359: DEC
77360: ST_TO_ADDR
77361: LD_INT 2
77363: PUSH
77364: FOR_TO
77365: IFFALSE 77492
// begin uc_side := your_side ;
77367: LD_ADDR_OWVAR 20
77371: PUSH
77372: LD_OWVAR 2
77376: ST_TO_ADDR
// uc_nation := nation_american ;
77377: LD_ADDR_OWVAR 21
77381: PUSH
77382: LD_INT 1
77384: ST_TO_ADDR
// vc_chassis := us_morphling ;
77385: LD_ADDR_OWVAR 37
77389: PUSH
77390: LD_INT 5
77392: ST_TO_ADDR
// vc_engine := engine_siberite ;
77393: LD_ADDR_OWVAR 39
77397: PUSH
77398: LD_INT 3
77400: ST_TO_ADDR
// vc_control := control_computer ;
77401: LD_ADDR_OWVAR 38
77405: PUSH
77406: LD_INT 3
77408: ST_TO_ADDR
// vc_weapon := us_double_laser ;
77409: LD_ADDR_OWVAR 40
77413: PUSH
77414: LD_INT 10
77416: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
77417: LD_VAR 0 2
77421: PUSH
77422: LD_INT 1
77424: ARRAY
77425: PPUSH
77426: CALL_OW 310
77430: NOT
77431: IFFALSE 77478
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
77433: CALL_OW 45
77437: PPUSH
77438: LD_VAR 0 2
77442: PUSH
77443: LD_INT 1
77445: ARRAY
77446: PPUSH
77447: CALL_OW 250
77451: PPUSH
77452: LD_VAR 0 2
77456: PUSH
77457: LD_INT 1
77459: ARRAY
77460: PPUSH
77461: CALL_OW 251
77465: PPUSH
77466: LD_INT 12
77468: PPUSH
77469: LD_INT 1
77471: PPUSH
77472: CALL_OW 50
77476: GO 77490
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
77478: CALL_OW 45
77482: PPUSH
77483: LD_INT 1
77485: PPUSH
77486: CALL_OW 51
// end ;
77490: GO 77364
77492: POP
77493: POP
// end ;
77494: PPOPN 2
77496: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
77497: LD_EXP 47
77501: IFFALSE 77509
77503: PUSH
77504: LD_EXP 93
77508: AND
77509: IFFALSE 77731
77511: GO 77513
77513: DISABLE
77514: LD_INT 0
77516: PPUSH
77517: PPUSH
77518: PPUSH
77519: PPUSH
77520: PPUSH
77521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
77522: LD_ADDR_VAR 0 6
77526: PUSH
77527: LD_INT 22
77529: PUSH
77530: LD_OWVAR 2
77534: PUSH
77535: EMPTY
77536: LIST
77537: LIST
77538: PUSH
77539: LD_INT 21
77541: PUSH
77542: LD_INT 1
77544: PUSH
77545: EMPTY
77546: LIST
77547: LIST
77548: PUSH
77549: LD_INT 3
77551: PUSH
77552: LD_INT 23
77554: PUSH
77555: LD_INT 0
77557: PUSH
77558: EMPTY
77559: LIST
77560: LIST
77561: PUSH
77562: EMPTY
77563: LIST
77564: LIST
77565: PUSH
77566: EMPTY
77567: LIST
77568: LIST
77569: LIST
77570: PPUSH
77571: CALL_OW 69
77575: ST_TO_ADDR
// if not tmp then
77576: LD_VAR 0 6
77580: NOT
77581: IFFALSE 77585
// exit ;
77583: GO 77731
// s1 := rand ( 1 , 4 ) ;
77585: LD_ADDR_VAR 0 2
77589: PUSH
77590: LD_INT 1
77592: PPUSH
77593: LD_INT 4
77595: PPUSH
77596: CALL_OW 12
77600: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
77601: LD_ADDR_VAR 0 4
77605: PUSH
77606: LD_VAR 0 6
77610: PUSH
77611: LD_INT 1
77613: ARRAY
77614: PPUSH
77615: LD_VAR 0 2
77619: PPUSH
77620: CALL_OW 259
77624: ST_TO_ADDR
// if s1 = 1 then
77625: LD_VAR 0 2
77629: PUSH
77630: LD_INT 1
77632: EQUAL
77633: IFFALSE 77653
// s2 := rand ( 2 , 4 ) else
77635: LD_ADDR_VAR 0 3
77639: PUSH
77640: LD_INT 2
77642: PPUSH
77643: LD_INT 4
77645: PPUSH
77646: CALL_OW 12
77650: ST_TO_ADDR
77651: GO 77661
// s2 := 1 ;
77653: LD_ADDR_VAR 0 3
77657: PUSH
77658: LD_INT 1
77660: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
77661: LD_ADDR_VAR 0 5
77665: PUSH
77666: LD_VAR 0 6
77670: PUSH
77671: LD_INT 1
77673: ARRAY
77674: PPUSH
77675: LD_VAR 0 3
77679: PPUSH
77680: CALL_OW 259
77684: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
77685: LD_VAR 0 6
77689: PUSH
77690: LD_INT 1
77692: ARRAY
77693: PPUSH
77694: LD_VAR 0 2
77698: PPUSH
77699: LD_VAR 0 5
77703: PPUSH
77704: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
77708: LD_VAR 0 6
77712: PUSH
77713: LD_INT 1
77715: ARRAY
77716: PPUSH
77717: LD_VAR 0 3
77721: PPUSH
77722: LD_VAR 0 4
77726: PPUSH
77727: CALL_OW 237
// end ;
77731: PPOPN 6
77733: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
77734: LD_EXP 47
77738: IFFALSE 77746
77740: PUSH
77741: LD_EXP 94
77745: AND
77746: IFFALSE 77825
77748: GO 77750
77750: DISABLE
77751: LD_INT 0
77753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
77754: LD_ADDR_VAR 0 1
77758: PUSH
77759: LD_INT 22
77761: PUSH
77762: LD_OWVAR 2
77766: PUSH
77767: EMPTY
77768: LIST
77769: LIST
77770: PUSH
77771: LD_INT 30
77773: PUSH
77774: LD_INT 3
77776: PUSH
77777: EMPTY
77778: LIST
77779: LIST
77780: PUSH
77781: EMPTY
77782: LIST
77783: LIST
77784: PPUSH
77785: CALL_OW 69
77789: ST_TO_ADDR
// if not tmp then
77790: LD_VAR 0 1
77794: NOT
77795: IFFALSE 77799
// exit ;
77797: GO 77825
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
77799: LD_VAR 0 1
77803: PUSH
77804: LD_INT 1
77806: PPUSH
77807: LD_VAR 0 1
77811: PPUSH
77812: CALL_OW 12
77816: ARRAY
77817: PPUSH
77818: LD_INT 1
77820: PPUSH
77821: CALL_OW 234
// end ;
77825: PPOPN 1
77827: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
77828: LD_EXP 47
77832: IFFALSE 77840
77834: PUSH
77835: LD_EXP 95
77839: AND
77840: IFFALSE 77952
77842: GO 77844
77844: DISABLE
77845: LD_INT 0
77847: PPUSH
77848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
77849: LD_ADDR_VAR 0 2
77853: PUSH
77854: LD_INT 22
77856: PUSH
77857: LD_OWVAR 2
77861: PUSH
77862: EMPTY
77863: LIST
77864: LIST
77865: PUSH
77866: LD_INT 2
77868: PUSH
77869: LD_INT 30
77871: PUSH
77872: LD_INT 27
77874: PUSH
77875: EMPTY
77876: LIST
77877: LIST
77878: PUSH
77879: LD_INT 30
77881: PUSH
77882: LD_INT 26
77884: PUSH
77885: EMPTY
77886: LIST
77887: LIST
77888: PUSH
77889: LD_INT 30
77891: PUSH
77892: LD_INT 28
77894: PUSH
77895: EMPTY
77896: LIST
77897: LIST
77898: PUSH
77899: EMPTY
77900: LIST
77901: LIST
77902: LIST
77903: LIST
77904: PUSH
77905: EMPTY
77906: LIST
77907: LIST
77908: PPUSH
77909: CALL_OW 69
77913: ST_TO_ADDR
// if not tmp then
77914: LD_VAR 0 2
77918: NOT
77919: IFFALSE 77923
// exit ;
77921: GO 77952
// for i in tmp do
77923: LD_ADDR_VAR 0 1
77927: PUSH
77928: LD_VAR 0 2
77932: PUSH
77933: FOR_IN
77934: IFFALSE 77950
// SetLives ( i , 1 ) ;
77936: LD_VAR 0 1
77940: PPUSH
77941: LD_INT 1
77943: PPUSH
77944: CALL_OW 234
77948: GO 77933
77950: POP
77951: POP
// end ;
77952: PPOPN 2
77954: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
77955: LD_EXP 47
77959: IFFALSE 77967
77961: PUSH
77962: LD_EXP 96
77966: AND
77967: IFFALSE 78254
77969: GO 77971
77971: DISABLE
77972: LD_INT 0
77974: PPUSH
77975: PPUSH
77976: PPUSH
// begin i := rand ( 1 , 7 ) ;
77977: LD_ADDR_VAR 0 1
77981: PUSH
77982: LD_INT 1
77984: PPUSH
77985: LD_INT 7
77987: PPUSH
77988: CALL_OW 12
77992: ST_TO_ADDR
// case i of 1 :
77993: LD_VAR 0 1
77997: PUSH
77998: LD_INT 1
78000: DOUBLE
78001: EQUAL
78002: IFTRUE 78006
78004: GO 78016
78006: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
78007: LD_STRING earthquake(getX(game), 0, 32)
78009: PPUSH
78010: CALL_OW 559
78014: GO 78254
78016: LD_INT 2
78018: DOUBLE
78019: EQUAL
78020: IFTRUE 78024
78022: GO 78038
78024: POP
// begin ToLua ( displayStucuk(); ) ;
78025: LD_STRING displayStucuk();
78027: PPUSH
78028: CALL_OW 559
// ResetFog ;
78032: CALL_OW 335
// end ; 3 :
78036: GO 78254
78038: LD_INT 3
78040: DOUBLE
78041: EQUAL
78042: IFTRUE 78046
78044: GO 78150
78046: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78047: LD_ADDR_VAR 0 2
78051: PUSH
78052: LD_INT 22
78054: PUSH
78055: LD_OWVAR 2
78059: PUSH
78060: EMPTY
78061: LIST
78062: LIST
78063: PUSH
78064: LD_INT 25
78066: PUSH
78067: LD_INT 1
78069: PUSH
78070: EMPTY
78071: LIST
78072: LIST
78073: PUSH
78074: EMPTY
78075: LIST
78076: LIST
78077: PPUSH
78078: CALL_OW 69
78082: ST_TO_ADDR
// if not tmp then
78083: LD_VAR 0 2
78087: NOT
78088: IFFALSE 78092
// exit ;
78090: GO 78254
// un := tmp [ rand ( 1 , tmp ) ] ;
78092: LD_ADDR_VAR 0 3
78096: PUSH
78097: LD_VAR 0 2
78101: PUSH
78102: LD_INT 1
78104: PPUSH
78105: LD_VAR 0 2
78109: PPUSH
78110: CALL_OW 12
78114: ARRAY
78115: ST_TO_ADDR
// if Crawls ( un ) then
78116: LD_VAR 0 3
78120: PPUSH
78121: CALL_OW 318
78125: IFFALSE 78136
// ComWalk ( un ) ;
78127: LD_VAR 0 3
78131: PPUSH
78132: CALL_OW 138
// SetClass ( un , class_mortar ) ;
78136: LD_VAR 0 3
78140: PPUSH
78141: LD_INT 8
78143: PPUSH
78144: CALL_OW 336
// end ; 4 :
78148: GO 78254
78150: LD_INT 4
78152: DOUBLE
78153: EQUAL
78154: IFTRUE 78158
78156: GO 78232
78158: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
78159: LD_ADDR_VAR 0 2
78163: PUSH
78164: LD_INT 22
78166: PUSH
78167: LD_OWVAR 2
78171: PUSH
78172: EMPTY
78173: LIST
78174: LIST
78175: PUSH
78176: LD_INT 30
78178: PUSH
78179: LD_INT 29
78181: PUSH
78182: EMPTY
78183: LIST
78184: LIST
78185: PUSH
78186: EMPTY
78187: LIST
78188: LIST
78189: PPUSH
78190: CALL_OW 69
78194: ST_TO_ADDR
// if not tmp then
78195: LD_VAR 0 2
78199: NOT
78200: IFFALSE 78204
// exit ;
78202: GO 78254
// CenterNowOnUnits ( tmp [ 1 ] ) ;
78204: LD_VAR 0 2
78208: PUSH
78209: LD_INT 1
78211: ARRAY
78212: PPUSH
78213: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
78217: LD_VAR 0 2
78221: PUSH
78222: LD_INT 1
78224: ARRAY
78225: PPUSH
78226: CALL_OW 65
// end ; 5 .. 7 :
78230: GO 78254
78232: LD_INT 5
78234: DOUBLE
78235: GREATEREQUAL
78236: IFFALSE 78244
78238: LD_INT 7
78240: DOUBLE
78241: LESSEQUAL
78242: IFTRUE 78246
78244: GO 78253
78246: POP
// StreamSibBomb ; end ;
78247: CALL 74435 0 0
78251: GO 78254
78253: POP
// end ;
78254: PPOPN 3
78256: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
78257: LD_EXP 47
78261: IFFALSE 78269
78263: PUSH
78264: LD_EXP 97
78268: AND
78269: IFFALSE 78425
78271: GO 78273
78273: DISABLE
78274: LD_INT 0
78276: PPUSH
78277: PPUSH
78278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
78279: LD_ADDR_VAR 0 2
78283: PUSH
78284: LD_INT 81
78286: PUSH
78287: LD_OWVAR 2
78291: PUSH
78292: EMPTY
78293: LIST
78294: LIST
78295: PUSH
78296: LD_INT 2
78298: PUSH
78299: LD_INT 21
78301: PUSH
78302: LD_INT 1
78304: PUSH
78305: EMPTY
78306: LIST
78307: LIST
78308: PUSH
78309: LD_INT 21
78311: PUSH
78312: LD_INT 2
78314: PUSH
78315: EMPTY
78316: LIST
78317: LIST
78318: PUSH
78319: EMPTY
78320: LIST
78321: LIST
78322: LIST
78323: PUSH
78324: EMPTY
78325: LIST
78326: LIST
78327: PPUSH
78328: CALL_OW 69
78332: ST_TO_ADDR
// if not tmp then
78333: LD_VAR 0 2
78337: NOT
78338: IFFALSE 78342
// exit ;
78340: GO 78425
// p := 0 ;
78342: LD_ADDR_VAR 0 3
78346: PUSH
78347: LD_INT 0
78349: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
78350: LD_INT 35
78352: PPUSH
78353: CALL_OW 67
// p := p + 1 ;
78357: LD_ADDR_VAR 0 3
78361: PUSH
78362: LD_VAR 0 3
78366: PUSH
78367: LD_INT 1
78369: PLUS
78370: ST_TO_ADDR
// for i in tmp do
78371: LD_ADDR_VAR 0 1
78375: PUSH
78376: LD_VAR 0 2
78380: PUSH
78381: FOR_IN
78382: IFFALSE 78413
// if GetLives ( i ) < 1000 then
78384: LD_VAR 0 1
78388: PPUSH
78389: CALL_OW 256
78393: PUSH
78394: LD_INT 1000
78396: LESS
78397: IFFALSE 78411
// SetLives ( i , 1000 ) ;
78399: LD_VAR 0 1
78403: PPUSH
78404: LD_INT 1000
78406: PPUSH
78407: CALL_OW 234
78411: GO 78381
78413: POP
78414: POP
// until p > 20 ;
78415: LD_VAR 0 3
78419: PUSH
78420: LD_INT 20
78422: GREATER
78423: IFFALSE 78350
// end ;
78425: PPOPN 3
78427: END
// every 0 0$1 trigger StreamModeActive and sTime do
78428: LD_EXP 47
78432: IFFALSE 78440
78434: PUSH
78435: LD_EXP 98
78439: AND
78440: IFFALSE 78475
78442: GO 78444
78444: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
78445: LD_INT 28
78447: PPUSH
78448: LD_OWVAR 2
78452: PPUSH
78453: LD_INT 2
78455: PPUSH
78456: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
78460: LD_INT 30
78462: PPUSH
78463: LD_OWVAR 2
78467: PPUSH
78468: LD_INT 2
78470: PPUSH
78471: CALL_OW 322
// end ;
78475: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
78476: LD_EXP 47
78480: IFFALSE 78488
78482: PUSH
78483: LD_EXP 99
78487: AND
78488: IFFALSE 78609
78490: GO 78492
78492: DISABLE
78493: LD_INT 0
78495: PPUSH
78496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
78497: LD_ADDR_VAR 0 2
78501: PUSH
78502: LD_INT 22
78504: PUSH
78505: LD_OWVAR 2
78509: PUSH
78510: EMPTY
78511: LIST
78512: LIST
78513: PUSH
78514: LD_INT 21
78516: PUSH
78517: LD_INT 1
78519: PUSH
78520: EMPTY
78521: LIST
78522: LIST
78523: PUSH
78524: LD_INT 3
78526: PUSH
78527: LD_INT 23
78529: PUSH
78530: LD_INT 0
78532: PUSH
78533: EMPTY
78534: LIST
78535: LIST
78536: PUSH
78537: EMPTY
78538: LIST
78539: LIST
78540: PUSH
78541: EMPTY
78542: LIST
78543: LIST
78544: LIST
78545: PPUSH
78546: CALL_OW 69
78550: ST_TO_ADDR
// if not tmp then
78551: LD_VAR 0 2
78555: NOT
78556: IFFALSE 78560
// exit ;
78558: GO 78609
// for i in tmp do
78560: LD_ADDR_VAR 0 1
78564: PUSH
78565: LD_VAR 0 2
78569: PUSH
78570: FOR_IN
78571: IFFALSE 78607
// begin if Crawls ( i ) then
78573: LD_VAR 0 1
78577: PPUSH
78578: CALL_OW 318
78582: IFFALSE 78593
// ComWalk ( i ) ;
78584: LD_VAR 0 1
78588: PPUSH
78589: CALL_OW 138
// SetClass ( i , 2 ) ;
78593: LD_VAR 0 1
78597: PPUSH
78598: LD_INT 2
78600: PPUSH
78601: CALL_OW 336
// end ;
78605: GO 78570
78607: POP
78608: POP
// end ;
78609: PPOPN 2
78611: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
78612: LD_EXP 47
78616: IFFALSE 78624
78618: PUSH
78619: LD_EXP 100
78623: AND
78624: IFFALSE 78914
78626: GO 78628
78628: DISABLE
78629: LD_INT 0
78631: PPUSH
78632: PPUSH
78633: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
78634: LD_OWVAR 2
78638: PPUSH
78639: LD_INT 9
78641: PPUSH
78642: LD_INT 1
78644: PPUSH
78645: LD_INT 1
78647: PPUSH
78648: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
78652: LD_INT 9
78654: PPUSH
78655: LD_OWVAR 2
78659: PPUSH
78660: CALL_OW 343
// uc_side := 9 ;
78664: LD_ADDR_OWVAR 20
78668: PUSH
78669: LD_INT 9
78671: ST_TO_ADDR
// uc_nation := 2 ;
78672: LD_ADDR_OWVAR 21
78676: PUSH
78677: LD_INT 2
78679: ST_TO_ADDR
// hc_name := Dark Warrior ;
78680: LD_ADDR_OWVAR 26
78684: PUSH
78685: LD_STRING Dark Warrior
78687: ST_TO_ADDR
// hc_gallery :=  ;
78688: LD_ADDR_OWVAR 33
78692: PUSH
78693: LD_STRING 
78695: ST_TO_ADDR
// hc_noskilllimit := true ;
78696: LD_ADDR_OWVAR 76
78700: PUSH
78701: LD_INT 1
78703: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
78704: LD_ADDR_OWVAR 31
78708: PUSH
78709: LD_INT 30
78711: PUSH
78712: LD_INT 30
78714: PUSH
78715: LD_INT 30
78717: PUSH
78718: LD_INT 30
78720: PUSH
78721: EMPTY
78722: LIST
78723: LIST
78724: LIST
78725: LIST
78726: ST_TO_ADDR
// un := CreateHuman ;
78727: LD_ADDR_VAR 0 3
78731: PUSH
78732: CALL_OW 44
78736: ST_TO_ADDR
// hc_noskilllimit := false ;
78737: LD_ADDR_OWVAR 76
78741: PUSH
78742: LD_INT 0
78744: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
78745: LD_VAR 0 3
78749: PPUSH
78750: LD_INT 1
78752: PPUSH
78753: CALL_OW 51
// ToLua ( playRanger() ) ;
78757: LD_STRING playRanger()
78759: PPUSH
78760: CALL_OW 559
// p := 0 ;
78764: LD_ADDR_VAR 0 2
78768: PUSH
78769: LD_INT 0
78771: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
78772: LD_INT 35
78774: PPUSH
78775: CALL_OW 67
// p := p + 1 ;
78779: LD_ADDR_VAR 0 2
78783: PUSH
78784: LD_VAR 0 2
78788: PUSH
78789: LD_INT 1
78791: PLUS
78792: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
78793: LD_VAR 0 3
78797: PPUSH
78798: CALL_OW 256
78802: PUSH
78803: LD_INT 1000
78805: LESS
78806: IFFALSE 78820
// SetLives ( un , 1000 ) ;
78808: LD_VAR 0 3
78812: PPUSH
78813: LD_INT 1000
78815: PPUSH
78816: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
78820: LD_VAR 0 3
78824: PPUSH
78825: LD_INT 81
78827: PUSH
78828: LD_OWVAR 2
78832: PUSH
78833: EMPTY
78834: LIST
78835: LIST
78836: PUSH
78837: LD_INT 91
78839: PUSH
78840: LD_VAR 0 3
78844: PUSH
78845: LD_INT 30
78847: PUSH
78848: EMPTY
78849: LIST
78850: LIST
78851: LIST
78852: PUSH
78853: EMPTY
78854: LIST
78855: LIST
78856: PPUSH
78857: CALL_OW 69
78861: PPUSH
78862: LD_VAR 0 3
78866: PPUSH
78867: CALL_OW 74
78871: PPUSH
78872: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
78876: LD_VAR 0 2
78880: PUSH
78881: LD_INT 80
78883: GREATER
78884: IFTRUE 78897
78886: PUSH
78887: LD_VAR 0 3
78891: PPUSH
78892: CALL_OW 301
78896: OR
78897: IFFALSE 78772
// if un then
78899: LD_VAR 0 3
78903: IFFALSE 78914
// RemoveUnit ( un ) ;
78905: LD_VAR 0 3
78909: PPUSH
78910: CALL_OW 64
// end ;
78914: PPOPN 3
78916: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
78917: LD_EXP 101
78921: IFFALSE 79037
78923: GO 78925
78925: DISABLE
78926: LD_INT 0
78928: PPUSH
78929: PPUSH
78930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
78931: LD_ADDR_VAR 0 2
78935: PUSH
78936: LD_INT 81
78938: PUSH
78939: LD_OWVAR 2
78943: PUSH
78944: EMPTY
78945: LIST
78946: LIST
78947: PUSH
78948: LD_INT 21
78950: PUSH
78951: LD_INT 1
78953: PUSH
78954: EMPTY
78955: LIST
78956: LIST
78957: PUSH
78958: EMPTY
78959: LIST
78960: LIST
78961: PPUSH
78962: CALL_OW 69
78966: ST_TO_ADDR
// ToLua ( playComputer() ) ;
78967: LD_STRING playComputer()
78969: PPUSH
78970: CALL_OW 559
// if not tmp then
78974: LD_VAR 0 2
78978: NOT
78979: IFFALSE 78983
// exit ;
78981: GO 79037
// for i in tmp do
78983: LD_ADDR_VAR 0 1
78987: PUSH
78988: LD_VAR 0 2
78992: PUSH
78993: FOR_IN
78994: IFFALSE 79035
// for j := 1 to 4 do
78996: LD_ADDR_VAR 0 3
79000: PUSH
79001: DOUBLE
79002: LD_INT 1
79004: DEC
79005: ST_TO_ADDR
79006: LD_INT 4
79008: PUSH
79009: FOR_TO
79010: IFFALSE 79031
// SetSkill ( i , j , 10 ) ;
79012: LD_VAR 0 1
79016: PPUSH
79017: LD_VAR 0 3
79021: PPUSH
79022: LD_INT 10
79024: PPUSH
79025: CALL_OW 237
79029: GO 79009
79031: POP
79032: POP
79033: GO 78993
79035: POP
79036: POP
// end ;
79037: PPOPN 3
79039: END
// every 0 0$1 trigger s30 do var i , tmp ;
79040: LD_EXP 102
79044: IFFALSE 79113
79046: GO 79048
79048: DISABLE
79049: LD_INT 0
79051: PPUSH
79052: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
79053: LD_ADDR_VAR 0 2
79057: PUSH
79058: LD_INT 22
79060: PUSH
79061: LD_OWVAR 2
79065: PUSH
79066: EMPTY
79067: LIST
79068: LIST
79069: PPUSH
79070: CALL_OW 69
79074: ST_TO_ADDR
// if not tmp then
79075: LD_VAR 0 2
79079: NOT
79080: IFFALSE 79084
// exit ;
79082: GO 79113
// for i in tmp do
79084: LD_ADDR_VAR 0 1
79088: PUSH
79089: LD_VAR 0 2
79093: PUSH
79094: FOR_IN
79095: IFFALSE 79111
// SetLives ( i , 300 ) ;
79097: LD_VAR 0 1
79101: PPUSH
79102: LD_INT 300
79104: PPUSH
79105: CALL_OW 234
79109: GO 79094
79111: POP
79112: POP
// end ;
79113: PPOPN 2
79115: END
// every 0 0$1 trigger s60 do var i , tmp ;
79116: LD_EXP 103
79120: IFFALSE 79189
79122: GO 79124
79124: DISABLE
79125: LD_INT 0
79127: PPUSH
79128: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
79129: LD_ADDR_VAR 0 2
79133: PUSH
79134: LD_INT 22
79136: PUSH
79137: LD_OWVAR 2
79141: PUSH
79142: EMPTY
79143: LIST
79144: LIST
79145: PPUSH
79146: CALL_OW 69
79150: ST_TO_ADDR
// if not tmp then
79151: LD_VAR 0 2
79155: NOT
79156: IFFALSE 79160
// exit ;
79158: GO 79189
// for i in tmp do
79160: LD_ADDR_VAR 0 1
79164: PUSH
79165: LD_VAR 0 2
79169: PUSH
79170: FOR_IN
79171: IFFALSE 79187
// SetLives ( i , 600 ) ;
79173: LD_VAR 0 1
79177: PPUSH
79178: LD_INT 600
79180: PPUSH
79181: CALL_OW 234
79185: GO 79170
79187: POP
79188: POP
// end ;
79189: PPOPN 2
79191: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
79192: LD_INT 0
79194: PPUSH
// case cmd of 301 :
79195: LD_VAR 0 1
79199: PUSH
79200: LD_INT 301
79202: DOUBLE
79203: EQUAL
79204: IFTRUE 79208
79206: GO 79240
79208: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
79209: LD_VAR 0 6
79213: PPUSH
79214: LD_VAR 0 7
79218: PPUSH
79219: LD_VAR 0 8
79223: PPUSH
79224: LD_VAR 0 4
79228: PPUSH
79229: LD_VAR 0 5
79233: PPUSH
79234: CALL 80453 0 5
79238: GO 79361
79240: LD_INT 302
79242: DOUBLE
79243: EQUAL
79244: IFTRUE 79248
79246: GO 79285
79248: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
79249: LD_VAR 0 6
79253: PPUSH
79254: LD_VAR 0 7
79258: PPUSH
79259: LD_VAR 0 8
79263: PPUSH
79264: LD_VAR 0 9
79268: PPUSH
79269: LD_VAR 0 4
79273: PPUSH
79274: LD_VAR 0 5
79278: PPUSH
79279: CALL 80544 0 6
79283: GO 79361
79285: LD_INT 303
79287: DOUBLE
79288: EQUAL
79289: IFTRUE 79293
79291: GO 79330
79293: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
79294: LD_VAR 0 6
79298: PPUSH
79299: LD_VAR 0 7
79303: PPUSH
79304: LD_VAR 0 8
79308: PPUSH
79309: LD_VAR 0 9
79313: PPUSH
79314: LD_VAR 0 4
79318: PPUSH
79319: LD_VAR 0 5
79323: PPUSH
79324: CALL 79366 0 6
79328: GO 79361
79330: LD_INT 304
79332: DOUBLE
79333: EQUAL
79334: IFTRUE 79338
79336: GO 79360
79338: POP
// hHackTeleport ( unit , x , y ) ; end ;
79339: LD_VAR 0 2
79343: PPUSH
79344: LD_VAR 0 4
79348: PPUSH
79349: LD_VAR 0 5
79353: PPUSH
79354: CALL 81137 0 3
79358: GO 79361
79360: POP
// end ;
79361: LD_VAR 0 12
79365: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
79366: LD_INT 0
79368: PPUSH
79369: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
79370: LD_VAR 0 1
79374: PUSH
79375: LD_INT 1
79377: LESS
79378: IFTRUE 79390
79380: PUSH
79381: LD_VAR 0 1
79385: PUSH
79386: LD_INT 3
79388: GREATER
79389: OR
79390: IFTRUE 79408
79392: PUSH
79393: LD_VAR 0 5
79397: PPUSH
79398: LD_VAR 0 6
79402: PPUSH
79403: CALL_OW 428
79407: OR
79408: IFFALSE 79412
// exit ;
79410: GO 80140
// uc_side := your_side ;
79412: LD_ADDR_OWVAR 20
79416: PUSH
79417: LD_OWVAR 2
79421: ST_TO_ADDR
// uc_nation := nation ;
79422: LD_ADDR_OWVAR 21
79426: PUSH
79427: LD_VAR 0 1
79431: ST_TO_ADDR
// bc_level = 1 ;
79432: LD_ADDR_OWVAR 43
79436: PUSH
79437: LD_INT 1
79439: ST_TO_ADDR
// case btype of 1 :
79440: LD_VAR 0 2
79444: PUSH
79445: LD_INT 1
79447: DOUBLE
79448: EQUAL
79449: IFTRUE 79453
79451: GO 79464
79453: POP
// bc_type := b_depot ; 2 :
79454: LD_ADDR_OWVAR 42
79458: PUSH
79459: LD_INT 0
79461: ST_TO_ADDR
79462: GO 80084
79464: LD_INT 2
79466: DOUBLE
79467: EQUAL
79468: IFTRUE 79472
79470: GO 79483
79472: POP
// bc_type := b_warehouse ; 3 :
79473: LD_ADDR_OWVAR 42
79477: PUSH
79478: LD_INT 1
79480: ST_TO_ADDR
79481: GO 80084
79483: LD_INT 3
79485: DOUBLE
79486: EQUAL
79487: IFTRUE 79491
79489: GO 79502
79491: POP
// bc_type := b_lab ; 4 .. 9 :
79492: LD_ADDR_OWVAR 42
79496: PUSH
79497: LD_INT 6
79499: ST_TO_ADDR
79500: GO 80084
79502: LD_INT 4
79504: DOUBLE
79505: GREATEREQUAL
79506: IFFALSE 79514
79508: LD_INT 9
79510: DOUBLE
79511: LESSEQUAL
79512: IFTRUE 79516
79514: GO 79576
79516: POP
// begin bc_type := b_lab_half ;
79517: LD_ADDR_OWVAR 42
79521: PUSH
79522: LD_INT 7
79524: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
79525: LD_ADDR_OWVAR 44
79529: PUSH
79530: LD_INT 10
79532: PUSH
79533: LD_INT 11
79535: PUSH
79536: LD_INT 12
79538: PUSH
79539: LD_INT 15
79541: PUSH
79542: LD_INT 14
79544: PUSH
79545: LD_INT 13
79547: PUSH
79548: EMPTY
79549: LIST
79550: LIST
79551: LIST
79552: LIST
79553: LIST
79554: LIST
79555: PUSH
79556: LD_VAR 0 2
79560: PUSH
79561: LD_INT 3
79563: MINUS
79564: ARRAY
79565: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
79566: LD_ADDR_OWVAR 45
79570: PUSH
79571: LD_INT 9
79573: ST_TO_ADDR
// end ; 10 .. 13 :
79574: GO 80084
79576: LD_INT 10
79578: DOUBLE
79579: GREATEREQUAL
79580: IFFALSE 79588
79582: LD_INT 13
79584: DOUBLE
79585: LESSEQUAL
79586: IFTRUE 79590
79588: GO 79667
79590: POP
// begin bc_type := b_lab_full ;
79591: LD_ADDR_OWVAR 42
79595: PUSH
79596: LD_INT 8
79598: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
79599: LD_ADDR_OWVAR 44
79603: PUSH
79604: LD_INT 10
79606: PUSH
79607: LD_INT 12
79609: PUSH
79610: LD_INT 14
79612: PUSH
79613: LD_INT 13
79615: PUSH
79616: EMPTY
79617: LIST
79618: LIST
79619: LIST
79620: LIST
79621: PUSH
79622: LD_VAR 0 2
79626: PUSH
79627: LD_INT 9
79629: MINUS
79630: ARRAY
79631: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
79632: LD_ADDR_OWVAR 45
79636: PUSH
79637: LD_INT 11
79639: PUSH
79640: LD_INT 15
79642: PUSH
79643: LD_INT 12
79645: PUSH
79646: LD_INT 15
79648: PUSH
79649: EMPTY
79650: LIST
79651: LIST
79652: LIST
79653: LIST
79654: PUSH
79655: LD_VAR 0 2
79659: PUSH
79660: LD_INT 9
79662: MINUS
79663: ARRAY
79664: ST_TO_ADDR
// end ; 14 :
79665: GO 80084
79667: LD_INT 14
79669: DOUBLE
79670: EQUAL
79671: IFTRUE 79675
79673: GO 79686
79675: POP
// bc_type := b_workshop ; 15 :
79676: LD_ADDR_OWVAR 42
79680: PUSH
79681: LD_INT 2
79683: ST_TO_ADDR
79684: GO 80084
79686: LD_INT 15
79688: DOUBLE
79689: EQUAL
79690: IFTRUE 79694
79692: GO 79705
79694: POP
// bc_type := b_factory ; 16 :
79695: LD_ADDR_OWVAR 42
79699: PUSH
79700: LD_INT 3
79702: ST_TO_ADDR
79703: GO 80084
79705: LD_INT 16
79707: DOUBLE
79708: EQUAL
79709: IFTRUE 79713
79711: GO 79724
79713: POP
// bc_type := b_ext_gun ; 17 :
79714: LD_ADDR_OWVAR 42
79718: PUSH
79719: LD_INT 17
79721: ST_TO_ADDR
79722: GO 80084
79724: LD_INT 17
79726: DOUBLE
79727: EQUAL
79728: IFTRUE 79732
79730: GO 79760
79732: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
79733: LD_ADDR_OWVAR 42
79737: PUSH
79738: LD_INT 19
79740: PUSH
79741: LD_INT 23
79743: PUSH
79744: LD_INT 19
79746: PUSH
79747: EMPTY
79748: LIST
79749: LIST
79750: LIST
79751: PUSH
79752: LD_VAR 0 1
79756: ARRAY
79757: ST_TO_ADDR
79758: GO 80084
79760: LD_INT 18
79762: DOUBLE
79763: EQUAL
79764: IFTRUE 79768
79766: GO 79779
79768: POP
// bc_type := b_ext_radar ; 19 :
79769: LD_ADDR_OWVAR 42
79773: PUSH
79774: LD_INT 20
79776: ST_TO_ADDR
79777: GO 80084
79779: LD_INT 19
79781: DOUBLE
79782: EQUAL
79783: IFTRUE 79787
79785: GO 79798
79787: POP
// bc_type := b_ext_radio ; 20 :
79788: LD_ADDR_OWVAR 42
79792: PUSH
79793: LD_INT 22
79795: ST_TO_ADDR
79796: GO 80084
79798: LD_INT 20
79800: DOUBLE
79801: EQUAL
79802: IFTRUE 79806
79804: GO 79817
79806: POP
// bc_type := b_ext_siberium ; 21 :
79807: LD_ADDR_OWVAR 42
79811: PUSH
79812: LD_INT 21
79814: ST_TO_ADDR
79815: GO 80084
79817: LD_INT 21
79819: DOUBLE
79820: EQUAL
79821: IFTRUE 79825
79823: GO 79836
79825: POP
// bc_type := b_ext_computer ; 22 :
79826: LD_ADDR_OWVAR 42
79830: PUSH
79831: LD_INT 24
79833: ST_TO_ADDR
79834: GO 80084
79836: LD_INT 22
79838: DOUBLE
79839: EQUAL
79840: IFTRUE 79844
79842: GO 79855
79844: POP
// bc_type := b_ext_track ; 23 :
79845: LD_ADDR_OWVAR 42
79849: PUSH
79850: LD_INT 16
79852: ST_TO_ADDR
79853: GO 80084
79855: LD_INT 23
79857: DOUBLE
79858: EQUAL
79859: IFTRUE 79863
79861: GO 79874
79863: POP
// bc_type := b_ext_laser ; 24 :
79864: LD_ADDR_OWVAR 42
79868: PUSH
79869: LD_INT 25
79871: ST_TO_ADDR
79872: GO 80084
79874: LD_INT 24
79876: DOUBLE
79877: EQUAL
79878: IFTRUE 79882
79880: GO 79893
79882: POP
// bc_type := b_control_tower ; 25 :
79883: LD_ADDR_OWVAR 42
79887: PUSH
79888: LD_INT 36
79890: ST_TO_ADDR
79891: GO 80084
79893: LD_INT 25
79895: DOUBLE
79896: EQUAL
79897: IFTRUE 79901
79899: GO 79912
79901: POP
// bc_type := b_breastwork ; 26 :
79902: LD_ADDR_OWVAR 42
79906: PUSH
79907: LD_INT 31
79909: ST_TO_ADDR
79910: GO 80084
79912: LD_INT 26
79914: DOUBLE
79915: EQUAL
79916: IFTRUE 79920
79918: GO 79931
79920: POP
// bc_type := b_bunker ; 27 :
79921: LD_ADDR_OWVAR 42
79925: PUSH
79926: LD_INT 32
79928: ST_TO_ADDR
79929: GO 80084
79931: LD_INT 27
79933: DOUBLE
79934: EQUAL
79935: IFTRUE 79939
79937: GO 79950
79939: POP
// bc_type := b_turret ; 28 :
79940: LD_ADDR_OWVAR 42
79944: PUSH
79945: LD_INT 33
79947: ST_TO_ADDR
79948: GO 80084
79950: LD_INT 28
79952: DOUBLE
79953: EQUAL
79954: IFTRUE 79958
79956: GO 79969
79958: POP
// bc_type := b_armoury ; 29 :
79959: LD_ADDR_OWVAR 42
79963: PUSH
79964: LD_INT 4
79966: ST_TO_ADDR
79967: GO 80084
79969: LD_INT 29
79971: DOUBLE
79972: EQUAL
79973: IFTRUE 79977
79975: GO 79988
79977: POP
// bc_type := b_barracks ; 30 :
79978: LD_ADDR_OWVAR 42
79982: PUSH
79983: LD_INT 5
79985: ST_TO_ADDR
79986: GO 80084
79988: LD_INT 30
79990: DOUBLE
79991: EQUAL
79992: IFTRUE 79996
79994: GO 80007
79996: POP
// bc_type := b_solar_power ; 31 :
79997: LD_ADDR_OWVAR 42
80001: PUSH
80002: LD_INT 27
80004: ST_TO_ADDR
80005: GO 80084
80007: LD_INT 31
80009: DOUBLE
80010: EQUAL
80011: IFTRUE 80015
80013: GO 80026
80015: POP
// bc_type := b_oil_power ; 32 :
80016: LD_ADDR_OWVAR 42
80020: PUSH
80021: LD_INT 26
80023: ST_TO_ADDR
80024: GO 80084
80026: LD_INT 32
80028: DOUBLE
80029: EQUAL
80030: IFTRUE 80034
80032: GO 80045
80034: POP
// bc_type := b_siberite_power ; 33 :
80035: LD_ADDR_OWVAR 42
80039: PUSH
80040: LD_INT 28
80042: ST_TO_ADDR
80043: GO 80084
80045: LD_INT 33
80047: DOUBLE
80048: EQUAL
80049: IFTRUE 80053
80051: GO 80064
80053: POP
// bc_type := b_oil_mine ; 34 :
80054: LD_ADDR_OWVAR 42
80058: PUSH
80059: LD_INT 29
80061: ST_TO_ADDR
80062: GO 80084
80064: LD_INT 34
80066: DOUBLE
80067: EQUAL
80068: IFTRUE 80072
80070: GO 80083
80072: POP
// bc_type := b_siberite_mine ; end ;
80073: LD_ADDR_OWVAR 42
80077: PUSH
80078: LD_INT 30
80080: ST_TO_ADDR
80081: GO 80084
80083: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
80084: LD_ADDR_VAR 0 8
80088: PUSH
80089: LD_VAR 0 5
80093: PPUSH
80094: LD_VAR 0 6
80098: PPUSH
80099: LD_VAR 0 3
80103: PPUSH
80104: CALL_OW 47
80108: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
80109: LD_OWVAR 42
80113: PUSH
80114: LD_INT 32
80116: PUSH
80117: LD_INT 33
80119: PUSH
80120: EMPTY
80121: LIST
80122: LIST
80123: IN
80124: IFFALSE 80140
// PlaceWeaponTurret ( b , weapon ) ;
80126: LD_VAR 0 8
80130: PPUSH
80131: LD_VAR 0 4
80135: PPUSH
80136: CALL_OW 431
// end ;
80140: LD_VAR 0 7
80144: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
80145: LD_INT 0
80147: PPUSH
80148: PPUSH
80149: PPUSH
80150: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
80151: LD_ADDR_VAR 0 4
80155: PUSH
80156: LD_INT 22
80158: PUSH
80159: LD_OWVAR 2
80163: PUSH
80164: EMPTY
80165: LIST
80166: LIST
80167: PUSH
80168: LD_INT 2
80170: PUSH
80171: LD_INT 30
80173: PUSH
80174: LD_INT 0
80176: PUSH
80177: EMPTY
80178: LIST
80179: LIST
80180: PUSH
80181: LD_INT 30
80183: PUSH
80184: LD_INT 1
80186: PUSH
80187: EMPTY
80188: LIST
80189: LIST
80190: PUSH
80191: EMPTY
80192: LIST
80193: LIST
80194: LIST
80195: PUSH
80196: EMPTY
80197: LIST
80198: LIST
80199: PPUSH
80200: CALL_OW 69
80204: ST_TO_ADDR
// if not tmp then
80205: LD_VAR 0 4
80209: NOT
80210: IFFALSE 80214
// exit ;
80212: GO 80273
// for i in tmp do
80214: LD_ADDR_VAR 0 2
80218: PUSH
80219: LD_VAR 0 4
80223: PUSH
80224: FOR_IN
80225: IFFALSE 80271
// for j = 1 to 3 do
80227: LD_ADDR_VAR 0 3
80231: PUSH
80232: DOUBLE
80233: LD_INT 1
80235: DEC
80236: ST_TO_ADDR
80237: LD_INT 3
80239: PUSH
80240: FOR_TO
80241: IFFALSE 80267
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
80243: LD_VAR 0 2
80247: PPUSH
80248: CALL_OW 274
80252: PPUSH
80253: LD_VAR 0 3
80257: PPUSH
80258: LD_INT 99999
80260: PPUSH
80261: CALL_OW 277
80265: GO 80240
80267: POP
80268: POP
80269: GO 80224
80271: POP
80272: POP
// end ;
80273: LD_VAR 0 1
80277: RET
// export function hHackSetLevel10 ; var i , j ; begin
80278: LD_INT 0
80280: PPUSH
80281: PPUSH
80282: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
80283: LD_ADDR_VAR 0 2
80287: PUSH
80288: LD_INT 21
80290: PUSH
80291: LD_INT 1
80293: PUSH
80294: EMPTY
80295: LIST
80296: LIST
80297: PPUSH
80298: CALL_OW 69
80302: PUSH
80303: FOR_IN
80304: IFFALSE 80356
// if IsSelected ( i ) then
80306: LD_VAR 0 2
80310: PPUSH
80311: CALL_OW 306
80315: IFFALSE 80354
// begin for j := 1 to 4 do
80317: LD_ADDR_VAR 0 3
80321: PUSH
80322: DOUBLE
80323: LD_INT 1
80325: DEC
80326: ST_TO_ADDR
80327: LD_INT 4
80329: PUSH
80330: FOR_TO
80331: IFFALSE 80352
// SetSkill ( i , j , 10 ) ;
80333: LD_VAR 0 2
80337: PPUSH
80338: LD_VAR 0 3
80342: PPUSH
80343: LD_INT 10
80345: PPUSH
80346: CALL_OW 237
80350: GO 80330
80352: POP
80353: POP
// end ;
80354: GO 80303
80356: POP
80357: POP
// end ;
80358: LD_VAR 0 1
80362: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
80363: LD_INT 0
80365: PPUSH
80366: PPUSH
80367: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
80368: LD_ADDR_VAR 0 2
80372: PUSH
80373: LD_INT 22
80375: PUSH
80376: LD_OWVAR 2
80380: PUSH
80381: EMPTY
80382: LIST
80383: LIST
80384: PUSH
80385: LD_INT 21
80387: PUSH
80388: LD_INT 1
80390: PUSH
80391: EMPTY
80392: LIST
80393: LIST
80394: PUSH
80395: EMPTY
80396: LIST
80397: LIST
80398: PPUSH
80399: CALL_OW 69
80403: PUSH
80404: FOR_IN
80405: IFFALSE 80446
// begin for j := 1 to 4 do
80407: LD_ADDR_VAR 0 3
80411: PUSH
80412: DOUBLE
80413: LD_INT 1
80415: DEC
80416: ST_TO_ADDR
80417: LD_INT 4
80419: PUSH
80420: FOR_TO
80421: IFFALSE 80442
// SetSkill ( i , j , 10 ) ;
80423: LD_VAR 0 2
80427: PPUSH
80428: LD_VAR 0 3
80432: PPUSH
80433: LD_INT 10
80435: PPUSH
80436: CALL_OW 237
80440: GO 80420
80442: POP
80443: POP
// end ;
80444: GO 80404
80446: POP
80447: POP
// end ;
80448: LD_VAR 0 1
80452: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
80453: LD_INT 0
80455: PPUSH
// uc_side := your_side ;
80456: LD_ADDR_OWVAR 20
80460: PUSH
80461: LD_OWVAR 2
80465: ST_TO_ADDR
// uc_nation := nation ;
80466: LD_ADDR_OWVAR 21
80470: PUSH
80471: LD_VAR 0 1
80475: ST_TO_ADDR
// InitHc ;
80476: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
80480: LD_INT 0
80482: PPUSH
80483: LD_VAR 0 2
80487: PPUSH
80488: LD_VAR 0 3
80492: PPUSH
80493: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
80497: LD_VAR 0 4
80501: PPUSH
80502: LD_VAR 0 5
80506: PPUSH
80507: CALL_OW 428
80511: PUSH
80512: LD_INT 0
80514: EQUAL
80515: IFFALSE 80539
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
80517: CALL_OW 44
80521: PPUSH
80522: LD_VAR 0 4
80526: PPUSH
80527: LD_VAR 0 5
80531: PPUSH
80532: LD_INT 1
80534: PPUSH
80535: CALL_OW 48
// end ;
80539: LD_VAR 0 6
80543: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
80544: LD_INT 0
80546: PPUSH
80547: PPUSH
// uc_side := your_side ;
80548: LD_ADDR_OWVAR 20
80552: PUSH
80553: LD_OWVAR 2
80557: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
80558: LD_VAR 0 1
80562: PUSH
80563: LD_INT 1
80565: PUSH
80566: LD_INT 2
80568: PUSH
80569: LD_INT 3
80571: PUSH
80572: LD_INT 4
80574: PUSH
80575: LD_INT 5
80577: PUSH
80578: EMPTY
80579: LIST
80580: LIST
80581: LIST
80582: LIST
80583: LIST
80584: IN
80585: IFFALSE 80597
// uc_nation := nation_american else
80587: LD_ADDR_OWVAR 21
80591: PUSH
80592: LD_INT 1
80594: ST_TO_ADDR
80595: GO 80640
// if chassis in [ 11 , 12 , 13 , 14 ] then
80597: LD_VAR 0 1
80601: PUSH
80602: LD_INT 11
80604: PUSH
80605: LD_INT 12
80607: PUSH
80608: LD_INT 13
80610: PUSH
80611: LD_INT 14
80613: PUSH
80614: EMPTY
80615: LIST
80616: LIST
80617: LIST
80618: LIST
80619: IN
80620: IFFALSE 80632
// uc_nation := nation_arabian else
80622: LD_ADDR_OWVAR 21
80626: PUSH
80627: LD_INT 2
80629: ST_TO_ADDR
80630: GO 80640
// uc_nation := nation_russian ;
80632: LD_ADDR_OWVAR 21
80636: PUSH
80637: LD_INT 3
80639: ST_TO_ADDR
// vc_chassis := chassis ;
80640: LD_ADDR_OWVAR 37
80644: PUSH
80645: LD_VAR 0 1
80649: ST_TO_ADDR
// vc_engine := engine ;
80650: LD_ADDR_OWVAR 39
80654: PUSH
80655: LD_VAR 0 2
80659: ST_TO_ADDR
// vc_control := control ;
80660: LD_ADDR_OWVAR 38
80664: PUSH
80665: LD_VAR 0 3
80669: ST_TO_ADDR
// vc_weapon := weapon ;
80670: LD_ADDR_OWVAR 40
80674: PUSH
80675: LD_VAR 0 4
80679: ST_TO_ADDR
// un := CreateVehicle ;
80680: LD_ADDR_VAR 0 8
80684: PUSH
80685: CALL_OW 45
80689: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
80690: LD_VAR 0 8
80694: PPUSH
80695: LD_INT 0
80697: PPUSH
80698: LD_INT 5
80700: PPUSH
80701: CALL_OW 12
80705: PPUSH
80706: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
80710: LD_VAR 0 8
80714: PPUSH
80715: LD_VAR 0 5
80719: PPUSH
80720: LD_VAR 0 6
80724: PPUSH
80725: LD_INT 1
80727: PPUSH
80728: CALL_OW 48
// end ;
80732: LD_VAR 0 7
80736: RET
// export hInvincible ; every 1 do
80737: GO 80739
80739: DISABLE
// hInvincible := [ ] ;
80740: LD_ADDR_EXP 104
80744: PUSH
80745: EMPTY
80746: ST_TO_ADDR
80747: END
// every 10 do var i ;
80748: GO 80750
80750: DISABLE
80751: LD_INT 0
80753: PPUSH
// begin enable ;
80754: ENABLE
// if not hInvincible then
80755: LD_EXP 104
80759: NOT
80760: IFFALSE 80764
// exit ;
80762: GO 80808
// for i in hInvincible do
80764: LD_ADDR_VAR 0 1
80768: PUSH
80769: LD_EXP 104
80773: PUSH
80774: FOR_IN
80775: IFFALSE 80806
// if GetLives ( i ) < 1000 then
80777: LD_VAR 0 1
80781: PPUSH
80782: CALL_OW 256
80786: PUSH
80787: LD_INT 1000
80789: LESS
80790: IFFALSE 80804
// SetLives ( i , 1000 ) ;
80792: LD_VAR 0 1
80796: PPUSH
80797: LD_INT 1000
80799: PPUSH
80800: CALL_OW 234
80804: GO 80774
80806: POP
80807: POP
// end ;
80808: PPOPN 1
80810: END
// export function hHackInvincible ; var i ; begin
80811: LD_INT 0
80813: PPUSH
80814: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
80815: LD_ADDR_VAR 0 2
80819: PUSH
80820: LD_INT 2
80822: PUSH
80823: LD_INT 21
80825: PUSH
80826: LD_INT 1
80828: PUSH
80829: EMPTY
80830: LIST
80831: LIST
80832: PUSH
80833: LD_INT 21
80835: PUSH
80836: LD_INT 2
80838: PUSH
80839: EMPTY
80840: LIST
80841: LIST
80842: PUSH
80843: EMPTY
80844: LIST
80845: LIST
80846: LIST
80847: PPUSH
80848: CALL_OW 69
80852: PUSH
80853: FOR_IN
80854: IFFALSE 80915
// if IsSelected ( i ) then
80856: LD_VAR 0 2
80860: PPUSH
80861: CALL_OW 306
80865: IFFALSE 80913
// begin if i in hInvincible then
80867: LD_VAR 0 2
80871: PUSH
80872: LD_EXP 104
80876: IN
80877: IFFALSE 80897
// hInvincible := hInvincible diff i else
80879: LD_ADDR_EXP 104
80883: PUSH
80884: LD_EXP 104
80888: PUSH
80889: LD_VAR 0 2
80893: DIFF
80894: ST_TO_ADDR
80895: GO 80913
// hInvincible := hInvincible union i ;
80897: LD_ADDR_EXP 104
80901: PUSH
80902: LD_EXP 104
80906: PUSH
80907: LD_VAR 0 2
80911: UNION
80912: ST_TO_ADDR
// end ;
80913: GO 80853
80915: POP
80916: POP
// end ;
80917: LD_VAR 0 1
80921: RET
// export function hHackInvisible ; var i , j ; begin
80922: LD_INT 0
80924: PPUSH
80925: PPUSH
80926: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
80927: LD_ADDR_VAR 0 2
80931: PUSH
80932: LD_INT 21
80934: PUSH
80935: LD_INT 1
80937: PUSH
80938: EMPTY
80939: LIST
80940: LIST
80941: PPUSH
80942: CALL_OW 69
80946: PUSH
80947: FOR_IN
80948: IFFALSE 80972
// if IsSelected ( i ) then
80950: LD_VAR 0 2
80954: PPUSH
80955: CALL_OW 306
80959: IFFALSE 80970
// ComForceInvisible ( i ) ;
80961: LD_VAR 0 2
80965: PPUSH
80966: CALL_OW 496
80970: GO 80947
80972: POP
80973: POP
// end ;
80974: LD_VAR 0 1
80978: RET
// export function hHackChangeYourSide ; begin
80979: LD_INT 0
80981: PPUSH
// if your_side = 8 then
80982: LD_OWVAR 2
80986: PUSH
80987: LD_INT 8
80989: EQUAL
80990: IFFALSE 81002
// your_side := 0 else
80992: LD_ADDR_OWVAR 2
80996: PUSH
80997: LD_INT 0
80999: ST_TO_ADDR
81000: GO 81016
// your_side := your_side + 1 ;
81002: LD_ADDR_OWVAR 2
81006: PUSH
81007: LD_OWVAR 2
81011: PUSH
81012: LD_INT 1
81014: PLUS
81015: ST_TO_ADDR
// end ;
81016: LD_VAR 0 1
81020: RET
// export function hHackChangeUnitSide ; var i , j ; begin
81021: LD_INT 0
81023: PPUSH
81024: PPUSH
81025: PPUSH
// for i in all_units do
81026: LD_ADDR_VAR 0 2
81030: PUSH
81031: LD_OWVAR 3
81035: PUSH
81036: FOR_IN
81037: IFFALSE 81115
// if IsSelected ( i ) then
81039: LD_VAR 0 2
81043: PPUSH
81044: CALL_OW 306
81048: IFFALSE 81113
// begin j := GetSide ( i ) ;
81050: LD_ADDR_VAR 0 3
81054: PUSH
81055: LD_VAR 0 2
81059: PPUSH
81060: CALL_OW 255
81064: ST_TO_ADDR
// if j = 8 then
81065: LD_VAR 0 3
81069: PUSH
81070: LD_INT 8
81072: EQUAL
81073: IFFALSE 81085
// j := 0 else
81075: LD_ADDR_VAR 0 3
81079: PUSH
81080: LD_INT 0
81082: ST_TO_ADDR
81083: GO 81099
// j := j + 1 ;
81085: LD_ADDR_VAR 0 3
81089: PUSH
81090: LD_VAR 0 3
81094: PUSH
81095: LD_INT 1
81097: PLUS
81098: ST_TO_ADDR
// SetSide ( i , j ) ;
81099: LD_VAR 0 2
81103: PPUSH
81104: LD_VAR 0 3
81108: PPUSH
81109: CALL_OW 235
// end ;
81113: GO 81036
81115: POP
81116: POP
// end ;
81117: LD_VAR 0 1
81121: RET
// export function hHackFog ; begin
81122: LD_INT 0
81124: PPUSH
// FogOff ( true ) ;
81125: LD_INT 1
81127: PPUSH
81128: CALL_OW 344
// end ;
81132: LD_VAR 0 1
81136: RET
// export function hHackTeleport ( unit , x , y ) ; begin
81137: LD_INT 0
81139: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
81140: LD_VAR 0 1
81144: PPUSH
81145: LD_VAR 0 2
81149: PPUSH
81150: LD_VAR 0 3
81154: PPUSH
81155: LD_INT 1
81157: PPUSH
81158: LD_INT 1
81160: PPUSH
81161: CALL_OW 483
// CenterOnXY ( x , y ) ;
81165: LD_VAR 0 2
81169: PPUSH
81170: LD_VAR 0 3
81174: PPUSH
81175: CALL_OW 84
// end ;
81179: LD_VAR 0 4
81183: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
81184: LD_INT 0
81186: PPUSH
81187: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
81188: LD_VAR 0 1
81192: NOT
81193: IFTRUE 81212
81195: PUSH
81196: LD_VAR 0 2
81200: PPUSH
81201: LD_VAR 0 3
81205: PPUSH
81206: CALL_OW 488
81210: NOT
81211: OR
81212: IFTRUE 81247
81214: PUSH
81215: LD_VAR 0 1
81219: PPUSH
81220: CALL_OW 266
81224: PUSH
81225: LD_INT 3
81227: NONEQUAL
81228: IFFALSE 81246
81230: PUSH
81231: LD_VAR 0 1
81235: PPUSH
81236: CALL_OW 247
81240: PUSH
81241: LD_INT 1
81243: EQUAL
81244: NOT
81245: AND
81246: OR
81247: IFFALSE 81251
// exit ;
81249: GO 81533
// if GetType ( factory ) = unit_human then
81251: LD_VAR 0 1
81255: PPUSH
81256: CALL_OW 247
81260: PUSH
81261: LD_INT 1
81263: EQUAL
81264: IFFALSE 81281
// factory := IsInUnit ( factory ) ;
81266: LD_ADDR_VAR 0 1
81270: PUSH
81271: LD_VAR 0 1
81275: PPUSH
81276: CALL_OW 310
81280: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
81281: LD_VAR 0 1
81285: PPUSH
81286: CALL_OW 266
81290: PUSH
81291: LD_INT 3
81293: NONEQUAL
81294: IFFALSE 81298
// exit ;
81296: GO 81533
// for i := 1 to Count ( factoryWaypoints ) do
81298: LD_ADDR_VAR 0 5
81302: PUSH
81303: DOUBLE
81304: LD_INT 1
81306: DEC
81307: ST_TO_ADDR
81308: LD_EXP 105
81312: PPUSH
81313: CALL 18908 0 1
81317: PUSH
81318: FOR_TO
81319: IFFALSE 81481
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
81321: LD_VAR 0 2
81325: PPUSH
81326: LD_VAR 0 3
81330: PPUSH
81331: CALL_OW 428
81335: PUSH
81336: LD_EXP 105
81340: PUSH
81341: LD_VAR 0 5
81345: ARRAY
81346: PUSH
81347: LD_INT 2
81349: ARRAY
81350: EQUAL
81351: IFFALSE 81383
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
81353: LD_ADDR_EXP 105
81357: PUSH
81358: LD_EXP 105
81362: PPUSH
81363: LD_VAR 0 5
81367: PPUSH
81368: CALL_OW 3
81372: ST_TO_ADDR
// UpdateFactoryWaypoints ;
81373: CALL 81538 0 0
// exit ;
81377: POP
81378: POP
81379: GO 81533
// end else
81381: GO 81479
// if factory = factoryWaypoints [ i ] [ 2 ] then
81383: LD_VAR 0 1
81387: PUSH
81388: LD_EXP 105
81392: PUSH
81393: LD_VAR 0 5
81397: ARRAY
81398: PUSH
81399: LD_INT 2
81401: ARRAY
81402: EQUAL
81403: IFFALSE 81479
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
81405: LD_ADDR_EXP 105
81409: PUSH
81410: LD_EXP 105
81414: PPUSH
81415: LD_VAR 0 5
81419: PPUSH
81420: CALL_OW 3
81424: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
81425: LD_ADDR_EXP 105
81429: PUSH
81430: LD_EXP 105
81434: PPUSH
81435: LD_VAR 0 1
81439: PPUSH
81440: CALL_OW 255
81444: PUSH
81445: LD_VAR 0 1
81449: PUSH
81450: LD_VAR 0 2
81454: PUSH
81455: LD_VAR 0 3
81459: PUSH
81460: EMPTY
81461: LIST
81462: LIST
81463: LIST
81464: LIST
81465: PPUSH
81466: CALL 54840 0 2
81470: ST_TO_ADDR
// UpdateFactoryWaypoints ;
81471: CALL 81538 0 0
// exit ;
81475: POP
81476: POP
81477: GO 81533
// end ; end ;
81479: GO 81318
81481: POP
81482: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
81483: LD_ADDR_EXP 105
81487: PUSH
81488: LD_EXP 105
81492: PPUSH
81493: LD_VAR 0 1
81497: PPUSH
81498: CALL_OW 255
81502: PUSH
81503: LD_VAR 0 1
81507: PUSH
81508: LD_VAR 0 2
81512: PUSH
81513: LD_VAR 0 3
81517: PUSH
81518: EMPTY
81519: LIST
81520: LIST
81521: LIST
81522: LIST
81523: PPUSH
81524: CALL 54840 0 2
81528: ST_TO_ADDR
// UpdateFactoryWaypoints ;
81529: CALL 81538 0 0
// end ;
81533: LD_VAR 0 4
81537: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
81538: LD_INT 0
81540: PPUSH
81541: PPUSH
81542: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
81543: LD_STRING resetFactoryWaypoint();
81545: PPUSH
81546: CALL_OW 559
// if factoryWaypoints then
81550: LD_EXP 105
81554: IFFALSE 81675
// begin list := factoryWaypoints ;
81556: LD_ADDR_VAR 0 3
81560: PUSH
81561: LD_EXP 105
81565: ST_TO_ADDR
// for i := 1 to list do
81566: LD_ADDR_VAR 0 2
81570: PUSH
81571: DOUBLE
81572: LD_INT 1
81574: DEC
81575: ST_TO_ADDR
81576: LD_VAR 0 3
81580: PUSH
81581: FOR_TO
81582: IFFALSE 81673
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
81584: LD_STRING setFactoryWaypointXY(
81586: PUSH
81587: LD_VAR 0 3
81591: PUSH
81592: LD_VAR 0 2
81596: ARRAY
81597: PUSH
81598: LD_INT 1
81600: ARRAY
81601: STR
81602: PUSH
81603: LD_STRING ,
81605: STR
81606: PUSH
81607: LD_VAR 0 3
81611: PUSH
81612: LD_VAR 0 2
81616: ARRAY
81617: PUSH
81618: LD_INT 2
81620: ARRAY
81621: STR
81622: PUSH
81623: LD_STRING ,
81625: STR
81626: PUSH
81627: LD_VAR 0 3
81631: PUSH
81632: LD_VAR 0 2
81636: ARRAY
81637: PUSH
81638: LD_INT 3
81640: ARRAY
81641: STR
81642: PUSH
81643: LD_STRING ,
81645: STR
81646: PUSH
81647: LD_VAR 0 3
81651: PUSH
81652: LD_VAR 0 2
81656: ARRAY
81657: PUSH
81658: LD_INT 4
81660: ARRAY
81661: STR
81662: PUSH
81663: LD_STRING )
81665: STR
81666: PPUSH
81667: CALL_OW 559
81671: GO 81581
81673: POP
81674: POP
// end ; end ;
81675: LD_VAR 0 1
81679: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
81680: LD_INT 0
81682: PPUSH
// if HexInfo ( x , y ) = warehouse then
81683: LD_VAR 0 2
81687: PPUSH
81688: LD_VAR 0 3
81692: PPUSH
81693: CALL_OW 428
81697: PUSH
81698: LD_VAR 0 1
81702: EQUAL
81703: IFFALSE 81730
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
81705: LD_ADDR_EXP 107
81709: PUSH
81710: LD_EXP 107
81714: PPUSH
81715: LD_VAR 0 1
81719: PPUSH
81720: LD_INT 0
81722: PPUSH
81723: CALL_OW 1
81727: ST_TO_ADDR
81728: GO 81781
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
81730: LD_ADDR_EXP 107
81734: PUSH
81735: LD_EXP 107
81739: PPUSH
81740: LD_VAR 0 1
81744: PPUSH
81745: LD_VAR 0 1
81749: PPUSH
81750: CALL_OW 255
81754: PUSH
81755: LD_VAR 0 1
81759: PUSH
81760: LD_VAR 0 2
81764: PUSH
81765: LD_VAR 0 3
81769: PUSH
81770: EMPTY
81771: LIST
81772: LIST
81773: LIST
81774: LIST
81775: PPUSH
81776: CALL_OW 1
81780: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
81781: CALL 81790 0 0
// end ;
81785: LD_VAR 0 4
81789: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
81790: LD_INT 0
81792: PPUSH
81793: PPUSH
81794: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
81795: LD_STRING resetWarehouseGatheringPoints();
81797: PPUSH
81798: CALL_OW 559
// if warehouseGatheringPoints then
81802: LD_EXP 107
81806: IFFALSE 81932
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
81808: LD_ADDR_VAR 0 3
81812: PUSH
81813: LD_EXP 107
81817: PPUSH
81818: CALL 58774 0 1
81822: ST_TO_ADDR
// for i := 1 to list do
81823: LD_ADDR_VAR 0 2
81827: PUSH
81828: DOUBLE
81829: LD_INT 1
81831: DEC
81832: ST_TO_ADDR
81833: LD_VAR 0 3
81837: PUSH
81838: FOR_TO
81839: IFFALSE 81930
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
81841: LD_STRING setWarehouseGatheringPointXY(
81843: PUSH
81844: LD_VAR 0 3
81848: PUSH
81849: LD_VAR 0 2
81853: ARRAY
81854: PUSH
81855: LD_INT 1
81857: ARRAY
81858: STR
81859: PUSH
81860: LD_STRING ,
81862: STR
81863: PUSH
81864: LD_VAR 0 3
81868: PUSH
81869: LD_VAR 0 2
81873: ARRAY
81874: PUSH
81875: LD_INT 2
81877: ARRAY
81878: STR
81879: PUSH
81880: LD_STRING ,
81882: STR
81883: PUSH
81884: LD_VAR 0 3
81888: PUSH
81889: LD_VAR 0 2
81893: ARRAY
81894: PUSH
81895: LD_INT 3
81897: ARRAY
81898: STR
81899: PUSH
81900: LD_STRING ,
81902: STR
81903: PUSH
81904: LD_VAR 0 3
81908: PUSH
81909: LD_VAR 0 2
81913: ARRAY
81914: PUSH
81915: LD_INT 4
81917: ARRAY
81918: STR
81919: PUSH
81920: LD_STRING )
81922: STR
81923: PPUSH
81924: CALL_OW 559
81928: GO 81838
81930: POP
81931: POP
// end ; end ;
81932: LD_VAR 0 1
81936: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
81937: LD_EXP 107
81941: IFFALSE 82636
81943: GO 81945
81945: DISABLE
81946: LD_INT 0
81948: PPUSH
81949: PPUSH
81950: PPUSH
81951: PPUSH
81952: PPUSH
81953: PPUSH
81954: PPUSH
81955: PPUSH
81956: PPUSH
// begin enable ;
81957: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
81958: LD_ADDR_VAR 0 3
81962: PUSH
81963: LD_EXP 107
81967: PPUSH
81968: CALL 58774 0 1
81972: ST_TO_ADDR
// if not list then
81973: LD_VAR 0 3
81977: NOT
81978: IFFALSE 81982
// exit ;
81980: GO 82636
// for i := 1 to list do
81982: LD_ADDR_VAR 0 1
81986: PUSH
81987: DOUBLE
81988: LD_INT 1
81990: DEC
81991: ST_TO_ADDR
81992: LD_VAR 0 3
81996: PUSH
81997: FOR_TO
81998: IFFALSE 82634
// begin depot := list [ i ] [ 2 ] ;
82000: LD_ADDR_VAR 0 8
82004: PUSH
82005: LD_VAR 0 3
82009: PUSH
82010: LD_VAR 0 1
82014: ARRAY
82015: PUSH
82016: LD_INT 2
82018: ARRAY
82019: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
82020: LD_ADDR_VAR 0 5
82024: PUSH
82025: LD_VAR 0 3
82029: PUSH
82030: LD_VAR 0 1
82034: ARRAY
82035: PUSH
82036: LD_INT 1
82038: ARRAY
82039: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
82040: LD_VAR 0 8
82044: PPUSH
82045: CALL_OW 301
82049: IFTRUE 82068
82051: PUSH
82052: LD_VAR 0 5
82056: PUSH
82057: LD_VAR 0 8
82061: PPUSH
82062: CALL_OW 255
82066: NONEQUAL
82067: OR
82068: IFFALSE 82097
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
82070: LD_ADDR_EXP 107
82074: PUSH
82075: LD_EXP 107
82079: PPUSH
82080: LD_VAR 0 8
82084: PPUSH
82085: LD_INT 0
82087: PPUSH
82088: CALL_OW 1
82092: ST_TO_ADDR
// exit ;
82093: POP
82094: POP
82095: GO 82636
// end ; x := list [ i ] [ 3 ] ;
82097: LD_ADDR_VAR 0 6
82101: PUSH
82102: LD_VAR 0 3
82106: PUSH
82107: LD_VAR 0 1
82111: ARRAY
82112: PUSH
82113: LD_INT 3
82115: ARRAY
82116: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
82117: LD_ADDR_VAR 0 7
82121: PUSH
82122: LD_VAR 0 3
82126: PUSH
82127: LD_VAR 0 1
82131: ARRAY
82132: PUSH
82133: LD_INT 4
82135: ARRAY
82136: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
82137: LD_ADDR_VAR 0 9
82141: PUSH
82142: LD_VAR 0 6
82146: PPUSH
82147: LD_VAR 0 7
82151: PPUSH
82152: LD_INT 16
82154: PPUSH
82155: CALL 57348 0 3
82159: ST_TO_ADDR
// if not cratesNearbyPoint then
82160: LD_VAR 0 9
82164: NOT
82165: IFFALSE 82171
// exit ;
82167: POP
82168: POP
82169: GO 82636
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
82171: LD_ADDR_VAR 0 4
82175: PUSH
82176: LD_INT 22
82178: PUSH
82179: LD_VAR 0 5
82183: PUSH
82184: EMPTY
82185: LIST
82186: LIST
82187: PUSH
82188: LD_INT 3
82190: PUSH
82191: LD_INT 60
82193: PUSH
82194: EMPTY
82195: LIST
82196: PUSH
82197: EMPTY
82198: LIST
82199: LIST
82200: PUSH
82201: LD_INT 91
82203: PUSH
82204: LD_VAR 0 8
82208: PUSH
82209: LD_INT 6
82211: PUSH
82212: EMPTY
82213: LIST
82214: LIST
82215: LIST
82216: PUSH
82217: LD_INT 2
82219: PUSH
82220: LD_INT 25
82222: PUSH
82223: LD_INT 2
82225: PUSH
82226: EMPTY
82227: LIST
82228: LIST
82229: PUSH
82230: LD_INT 25
82232: PUSH
82233: LD_INT 16
82235: PUSH
82236: EMPTY
82237: LIST
82238: LIST
82239: PUSH
82240: EMPTY
82241: LIST
82242: LIST
82243: LIST
82244: PUSH
82245: EMPTY
82246: LIST
82247: LIST
82248: LIST
82249: LIST
82250: PPUSH
82251: CALL_OW 69
82255: PUSH
82256: LD_VAR 0 8
82260: PPUSH
82261: CALL_OW 313
82265: PPUSH
82266: LD_INT 3
82268: PUSH
82269: LD_INT 60
82271: PUSH
82272: EMPTY
82273: LIST
82274: PUSH
82275: EMPTY
82276: LIST
82277: LIST
82278: PUSH
82279: LD_INT 2
82281: PUSH
82282: LD_INT 25
82284: PUSH
82285: LD_INT 2
82287: PUSH
82288: EMPTY
82289: LIST
82290: LIST
82291: PUSH
82292: LD_INT 25
82294: PUSH
82295: LD_INT 16
82297: PUSH
82298: EMPTY
82299: LIST
82300: LIST
82301: PUSH
82302: EMPTY
82303: LIST
82304: LIST
82305: LIST
82306: PUSH
82307: EMPTY
82308: LIST
82309: LIST
82310: PPUSH
82311: CALL_OW 72
82315: UNION
82316: ST_TO_ADDR
// if tmp then
82317: LD_VAR 0 4
82321: IFFALSE 82401
// begin tmp := ShrinkArray ( tmp , 3 ) ;
82323: LD_ADDR_VAR 0 4
82327: PUSH
82328: LD_VAR 0 4
82332: PPUSH
82333: LD_INT 3
82335: PPUSH
82336: CALL 55155 0 2
82340: ST_TO_ADDR
// for j in tmp do
82341: LD_ADDR_VAR 0 2
82345: PUSH
82346: LD_VAR 0 4
82350: PUSH
82351: FOR_IN
82352: IFFALSE 82395
// begin if IsInUnit ( j ) then
82354: LD_VAR 0 2
82358: PPUSH
82359: CALL_OW 310
82363: IFFALSE 82374
// ComExit ( j ) ;
82365: LD_VAR 0 2
82369: PPUSH
82370: CALL 55238 0 1
// AddComCollect ( j , x , y ) ;
82374: LD_VAR 0 2
82378: PPUSH
82379: LD_VAR 0 6
82383: PPUSH
82384: LD_VAR 0 7
82388: PPUSH
82389: CALL_OW 177
// end ;
82393: GO 82351
82395: POP
82396: POP
// exit ;
82397: POP
82398: POP
82399: GO 82636
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
82401: LD_ADDR_VAR 0 4
82405: PUSH
82406: LD_INT 22
82408: PUSH
82409: LD_VAR 0 5
82413: PUSH
82414: EMPTY
82415: LIST
82416: LIST
82417: PUSH
82418: LD_INT 91
82420: PUSH
82421: LD_VAR 0 8
82425: PUSH
82426: LD_INT 8
82428: PUSH
82429: EMPTY
82430: LIST
82431: LIST
82432: LIST
82433: PUSH
82434: LD_INT 2
82436: PUSH
82437: LD_INT 34
82439: PUSH
82440: LD_INT 12
82442: PUSH
82443: EMPTY
82444: LIST
82445: LIST
82446: PUSH
82447: LD_INT 34
82449: PUSH
82450: LD_INT 51
82452: PUSH
82453: EMPTY
82454: LIST
82455: LIST
82456: PUSH
82457: LD_INT 34
82459: PUSH
82460: LD_INT 32
82462: PUSH
82463: EMPTY
82464: LIST
82465: LIST
82466: PUSH
82467: LD_INT 34
82469: PUSH
82470: LD_INT 89
82472: PUSH
82473: EMPTY
82474: LIST
82475: LIST
82476: PUSH
82477: EMPTY
82478: LIST
82479: LIST
82480: LIST
82481: LIST
82482: LIST
82483: PUSH
82484: EMPTY
82485: LIST
82486: LIST
82487: LIST
82488: PPUSH
82489: CALL_OW 69
82493: ST_TO_ADDR
// if tmp then
82494: LD_VAR 0 4
82498: IFFALSE 82632
// begin for j in tmp do
82500: LD_ADDR_VAR 0 2
82504: PUSH
82505: LD_VAR 0 4
82509: PUSH
82510: FOR_IN
82511: IFFALSE 82630
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
82513: LD_VAR 0 2
82517: PPUSH
82518: CALL_OW 262
82522: PUSH
82523: LD_INT 3
82525: EQUAL
82526: IFTRUE 82543
82528: PUSH
82529: LD_VAR 0 2
82533: PPUSH
82534: CALL_OW 261
82538: PUSH
82539: LD_INT 20
82541: GREATER
82542: OR
82543: IFFALSE 82557
82545: PUSH
82546: LD_VAR 0 2
82550: PPUSH
82551: CALL_OW 314
82555: NOT
82556: AND
82557: IFFALSE 82587
82559: PUSH
82560: LD_VAR 0 2
82564: PPUSH
82565: CALL_OW 263
82569: PUSH
82570: LD_INT 1
82572: NONEQUAL
82573: IFTRUE 82586
82575: PUSH
82576: LD_VAR 0 2
82580: PPUSH
82581: CALL_OW 311
82585: OR
82586: AND
82587: IFFALSE 82628
// begin ComCollect ( j , x , y ) ;
82589: LD_VAR 0 2
82593: PPUSH
82594: LD_VAR 0 6
82598: PPUSH
82599: LD_VAR 0 7
82603: PPUSH
82604: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
82608: LD_VAR 0 2
82612: PPUSH
82613: LD_VAR 0 8
82617: PPUSH
82618: CALL_OW 172
// exit ;
82622: POP
82623: POP
82624: POP
82625: POP
82626: GO 82636
// end ;
82628: GO 82510
82630: POP
82631: POP
// end ; end ;
82632: GO 81997
82634: POP
82635: POP
// end ; end_of_file
82636: PPOPN 9
82638: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
82639: LD_VAR 0 1
82643: PPUSH
82644: LD_VAR 0 2
82648: PPUSH
82649: LD_VAR 0 3
82653: PPUSH
82654: LD_VAR 0 4
82658: PPUSH
82659: LD_VAR 0 5
82663: PPUSH
82664: LD_VAR 0 6
82668: PPUSH
82669: CALL 66732 0 6
// end ;
82673: PPOPN 6
82675: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
82676: LD_INT 0
82678: PPUSH
// begin if not units then
82679: LD_VAR 0 1
82683: NOT
82684: IFFALSE 82688
// exit ;
82686: GO 82722
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
82688: LD_VAR 0 1
82692: PPUSH
82693: LD_VAR 0 2
82697: PPUSH
82698: LD_VAR 0 3
82702: PPUSH
82703: LD_VAR 0 4
82707: PPUSH
82708: LD_VAR 0 5
82712: PPUSH
82713: LD_VAR 0 6
82717: PPUSH
82718: CALL 66533 0 6
// end ;
82722: PPOPN 7
82724: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
82725: CALL 66619 0 0
// end ; end_of_file
82729: PPOPN 1
82731: END
