// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 62 0 0
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// CreateNature ( apemanSpawnArea , forestArea , riverArea ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 5
  20: PPUSH
  21: LD_INT 6
  23: PPUSH
  24: CALL 441 0 3
// PrepareAmerican ;
  28: CALL 2534 0 0
// PrepareArabian ;
  32: CALL 1165 0 0
// Action ;
  36: CALL 8255 0 0
// if debug then
  40: LD_EXP 1
  44: IFFALSE 61
// begin Difficulty := 4 ;
  46: LD_ADDR_OWVAR 67
  50: PUSH
  51: LD_INT 4
  53: ST_TO_ADDR
// FogOff ( 2 ) ;
  54: LD_INT 2
  56: PPUSH
  57: CALL_OW 344
// end ; end ;
  61: END
// export debug , prefix , scoutActive , scoutFailed , scoutSuccess , usAttacksAllowed , usSurrender , russianAttack , hasRockets , seeRemoteVehicle , seeHeavyGun , remoteControlLimit , sniperKillCounter , vehLossCounter ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// debug := false ;
  65: LD_ADDR_EXP 1
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// prefix := 06_ ;
  73: LD_ADDR_EXP 2
  77: PUSH
  78: LD_STRING 06_
  80: ST_TO_ADDR
// scoutActive := 0 ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// scoutFailed := false ;
  89: LD_ADDR_EXP 4
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// scoutSuccess := false ;
  97: LD_ADDR_EXP 5
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// usAttacksAllowed := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usSurrender := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// russianAttack := false ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// hasRockets := false ;
 129: LD_ADDR_EXP 9
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// seeRemoteVehicle := false ;
 137: LD_ADDR_EXP 10
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// seeHeavyGun := false ;
 145: LD_ADDR_EXP 11
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlLimit := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: LD_INT 2
 163: PUSH
 164: LD_INT 2
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// sniperKillCounter := 0 ;
 182: LD_ADDR_EXP 13
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// vehLossCounter := 0 ;
 190: LD_ADDR_EXP 14
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// end ;
 198: LD_VAR 0 1
 202: RET
// every 0 0$2 trigger sniperKillCounter >= 3 do
 203: LD_EXP 13
 207: PUSH
 208: LD_INT 3
 210: GREATEREQUAL
 211: IFFALSE 223
 213: GO 215
 215: DISABLE
// SetAchievement ( ACH_ANTSNIPER ) ; end_of_file
 216: LD_STRING ACH_ANTSNIPER
 218: PPUSH
 219: CALL_OW 543
 223: END
// export function SayX ( units , ident ) ; var i ; begin
 224: LD_INT 0
 226: PPUSH
 227: PPUSH
// result := false ;
 228: LD_ADDR_VAR 0 3
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// if not units then
 236: LD_VAR 0 1
 240: NOT
 241: IFFALSE 245
// exit ;
 243: GO 299
// for i in units do
 245: LD_ADDR_VAR 0 4
 249: PUSH
 250: LD_VAR 0 1
 254: PUSH
 255: FOR_IN
 256: IFFALSE 297
// if IsOk ( i ) then
 258: LD_VAR 0 4
 262: PPUSH
 263: CALL_OW 302
 267: IFFALSE 295
// begin Say ( i , ident ) ;
 269: LD_VAR 0 4
 273: PPUSH
 274: LD_VAR 0 2
 278: PPUSH
 279: CALL_OW 88
// result := i ;
 283: LD_ADDR_VAR 0 3
 287: PUSH
 288: LD_VAR 0 4
 292: ST_TO_ADDR
// break ;
 293: GO 297
// end ;
 295: GO 255
 297: POP
 298: POP
// end ;
 299: LD_VAR 0 3
 303: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 304: LD_INT 0
 306: PPUSH
 307: PPUSH
// InitUc ;
 308: CALL_OW 18
// InitHc ;
 312: CALL_OW 19
// uc_side := 0 ;
 316: LD_ADDR_OWVAR 20
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// uc_nation := 0 ;
 324: LD_ADDR_OWVAR 21
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// for i = 1 to amount do
 332: LD_ADDR_VAR 0 4
 336: PUSH
 337: DOUBLE
 338: LD_INT 1
 340: DEC
 341: ST_TO_ADDR
 342: LD_VAR 0 2
 346: PUSH
 347: FOR_TO
 348: IFFALSE 430
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 350: LD_ADDR_OWVAR 29
 354: PUSH
 355: LD_INT 9
 357: PPUSH
 358: LD_INT 12
 360: PPUSH
 361: CALL_OW 12
 365: PUSH
 366: LD_INT 9
 368: PPUSH
 369: LD_INT 12
 371: PPUSH
 372: CALL_OW 12
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 381: LD_ADDR_OWVAR 35
 385: PUSH
 386: LD_INT 1
 388: NEG
 389: PPUSH
 390: LD_INT 1
 392: PPUSH
 393: CALL_OW 12
 397: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 398: LD_INT 0
 400: PPUSH
 401: LD_INT 12
 403: PPUSH
 404: LD_INT 1
 406: PPUSH
 407: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 411: CALL_OW 44
 415: PPUSH
 416: LD_VAR 0 1
 420: PPUSH
 421: LD_INT 0
 423: PPUSH
 424: CALL_OW 49
// end ;
 428: GO 347
 430: POP
 431: POP
// InitHc ;
 432: CALL_OW 19
// end ;
 436: LD_VAR 0 3
 440: RET
// export function CreateNature ( apemanArea , forest , water ) ; var i ; begin
 441: LD_INT 0
 443: PPUSH
 444: PPUSH
// uc_side := 0 ;
 445: LD_ADDR_OWVAR 20
 449: PUSH
 450: LD_INT 0
 452: ST_TO_ADDR
// uc_nation := 0 ;
 453: LD_ADDR_OWVAR 21
 457: PUSH
 458: LD_INT 0
 460: ST_TO_ADDR
// SpawnApeman ( apemanArea , [ 9 , 8 , 7 , 6 ] [ Difficulty ] ) ;
 461: LD_VAR 0 1
 465: PPUSH
 466: LD_INT 9
 468: PUSH
 469: LD_INT 8
 471: PUSH
 472: LD_INT 7
 474: PUSH
 475: LD_INT 6
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: PUSH
 484: LD_OWVAR 67
 488: ARRAY
 489: PPUSH
 490: CALL 304 0 2
// for i := 1 to 4 do
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: DOUBLE
 500: LD_INT 1
 502: DEC
 503: ST_TO_ADDR
 504: LD_INT 4
 506: PUSH
 507: FOR_TO
 508: IFFALSE 545
// begin hc_class := class_horse ;
 510: LD_ADDR_OWVAR 28
 514: PUSH
 515: LD_INT 21
 517: ST_TO_ADDR
// hc_gallery :=  ;
 518: LD_ADDR_OWVAR 33
 522: PUSH
 523: LD_STRING 
 525: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 526: CALL_OW 44
 530: PPUSH
 531: LD_VAR 0 2
 535: PPUSH
 536: LD_INT 0
 538: PPUSH
 539: CALL_OW 49
// end ;
 543: GO 507
 545: POP
 546: POP
// for i = 1 to 5 do
 547: LD_ADDR_VAR 0 5
 551: PUSH
 552: DOUBLE
 553: LD_INT 1
 555: DEC
 556: ST_TO_ADDR
 557: LD_INT 5
 559: PUSH
 560: FOR_TO
 561: IFFALSE 615
// begin hc_class = class_tiger ;
 563: LD_ADDR_OWVAR 28
 567: PUSH
 568: LD_INT 14
 570: ST_TO_ADDR
// hc_gallery =  ;
 571: LD_ADDR_OWVAR 33
 575: PUSH
 576: LD_STRING 
 578: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 579: LD_ADDR_OWVAR 35
 583: PUSH
 584: LD_INT 7
 586: NEG
 587: PPUSH
 588: LD_INT 7
 590: PPUSH
 591: CALL_OW 12
 595: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 596: CALL_OW 44
 600: PPUSH
 601: LD_VAR 0 2
 605: PPUSH
 606: LD_INT 0
 608: PPUSH
 609: CALL_OW 49
// end ;
 613: GO 560
 615: POP
 616: POP
// for i := 1 to 4 do
 617: LD_ADDR_VAR 0 5
 621: PUSH
 622: DOUBLE
 623: LD_INT 1
 625: DEC
 626: ST_TO_ADDR
 627: LD_INT 4
 629: PUSH
 630: FOR_TO
 631: IFFALSE 668
// begin hc_class := class_phororhacos ;
 633: LD_ADDR_OWVAR 28
 637: PUSH
 638: LD_INT 18
 640: ST_TO_ADDR
// hc_gallery :=  ;
 641: LD_ADDR_OWVAR 33
 645: PUSH
 646: LD_STRING 
 648: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 649: CALL_OW 44
 653: PPUSH
 654: LD_VAR 0 2
 658: PPUSH
 659: LD_INT 0
 661: PPUSH
 662: CALL_OW 49
// end ;
 666: GO 630
 668: POP
 669: POP
// for i := 1 to 4 do
 670: LD_ADDR_VAR 0 5
 674: PUSH
 675: DOUBLE
 676: LD_INT 1
 678: DEC
 679: ST_TO_ADDR
 680: LD_INT 4
 682: PUSH
 683: FOR_TO
 684: IFFALSE 721
// begin hc_class := class_baggie ;
 686: LD_ADDR_OWVAR 28
 690: PUSH
 691: LD_INT 13
 693: ST_TO_ADDR
// hc_gallery :=  ;
 694: LD_ADDR_OWVAR 33
 698: PUSH
 699: LD_STRING 
 701: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 702: CALL_OW 44
 706: PPUSH
 707: LD_VAR 0 2
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 683
 721: POP
 722: POP
// for i := 1 to 5 do
 723: LD_ADDR_VAR 0 5
 727: PUSH
 728: DOUBLE
 729: LD_INT 1
 731: DEC
 732: ST_TO_ADDR
 733: LD_INT 5
 735: PUSH
 736: FOR_TO
 737: IFFALSE 774
// begin hc_class := class_fish ;
 739: LD_ADDR_OWVAR 28
 743: PUSH
 744: LD_INT 20
 746: ST_TO_ADDR
// hc_gallery :=  ;
 747: LD_ADDR_OWVAR 33
 751: PUSH
 752: LD_STRING 
 754: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , water , false ) ;
 755: CALL_OW 44
 759: PPUSH
 760: LD_VAR 0 3
 764: PPUSH
 765: LD_INT 0
 767: PPUSH
 768: CALL_OW 49
// end ;
 772: GO 736
 774: POP
 775: POP
// end ;
 776: LD_VAR 0 4
 780: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
// if not observer or not unit then
 786: LD_VAR 0 1
 790: NOT
 791: IFTRUE 800
 793: PUSH
 794: LD_VAR 0 2
 798: NOT
 799: OR
 800: IFFALSE 804
// exit ;
 802: GO 852
// if not See ( GetSide ( observer ) , unit ) then
 804: LD_VAR 0 1
 808: PPUSH
 809: CALL_OW 255
 813: PPUSH
 814: LD_VAR 0 2
 818: PPUSH
 819: CALL_OW 292
 823: NOT
 824: IFFALSE 828
// exit ;
 826: GO 852
// result := GetDistUnits ( observer , unit ) < 12 ;
 828: LD_ADDR_VAR 0 3
 832: PUSH
 833: LD_VAR 0 1
 837: PPUSH
 838: LD_VAR 0 2
 842: PPUSH
 843: CALL_OW 296
 847: PUSH
 848: LD_INT 12
 850: LESS
 851: ST_TO_ADDR
// end ;
 852: LD_VAR 0 3
 856: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 857: LD_INT 0
 859: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 860: LD_VAR 0 2
 864: PUSH
 865: LD_INT 1
 867: ARRAY
 868: PPUSH
 869: LD_VAR 0 2
 873: PUSH
 874: LD_INT 2
 876: ARRAY
 877: PPUSH
 878: CALL_OW 488
 882: IFFALSE 912
 884: PUSH
 885: LD_VAR 0 2
 889: PUSH
 890: LD_INT 1
 892: ARRAY
 893: PPUSH
 894: LD_VAR 0 2
 898: PUSH
 899: LD_INT 2
 901: ARRAY
 902: PPUSH
 903: CALL_OW 428
 907: PUSH
 908: LD_INT 0
 910: EQUAL
 911: AND
 912: IFFALSE 946
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 914: LD_VAR 0 1
 918: PPUSH
 919: LD_VAR 0 2
 923: PUSH
 924: LD_INT 1
 926: ARRAY
 927: PPUSH
 928: LD_VAR 0 2
 932: PUSH
 933: LD_INT 2
 935: ARRAY
 936: PPUSH
 937: LD_VAR 0 3
 941: PPUSH
 942: CALL_OW 48
// end ;
 946: LD_VAR 0 4
 950: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
 951: LD_INT 0
 953: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
 954: LD_VAR 0 1
 958: PPUSH
 959: LD_VAR 0 2
 963: PPUSH
 964: LD_VAR 0 3
 968: PPUSH
 969: LD_VAR 0 4
 973: PPUSH
 974: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
 978: LD_VAR 0 1
 982: PPUSH
 983: LD_VAR 0 2
 987: PPUSH
 988: LD_VAR 0 3
 992: PPUSH
 993: CALL_OW 331
// end ;
 997: LD_VAR 0 5
1001: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1002: LD_INT 0
1004: PPUSH
// if not units then
1005: LD_VAR 0 1
1009: NOT
1010: IFFALSE 1014
// exit ;
1012: GO 1097
// result := true ;
1014: LD_ADDR_VAR 0 4
1018: PUSH
1019: LD_INT 1
1021: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1022: LD_VAR 0 1
1026: PPUSH
1027: LD_INT 26
1029: PUSH
1030: LD_INT 1
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 72
1041: PUSH
1042: LD_INT 1
1044: ARRAY
1045: PPUSH
1046: LD_VAR 0 2
1050: PPUSH
1051: CALL_OW 88
1055: NOT
1056: IFFALSE 1097
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1058: LD_ADDR_VAR 0 4
1062: PUSH
1063: LD_VAR 0 1
1067: PPUSH
1068: LD_INT 26
1070: PUSH
1071: LD_INT 2
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: PPUSH
1078: CALL_OW 72
1082: PUSH
1083: LD_INT 1
1085: ARRAY
1086: PPUSH
1087: LD_VAR 0 3
1091: PPUSH
1092: CALL_OW 88
1096: ST_TO_ADDR
// end ;
1097: LD_VAR 0 4
1101: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1102: LD_INT 0
1104: PPUSH
1105: PPUSH
// if not group then
1106: LD_VAR 0 2
1110: NOT
1111: IFFALSE 1115
// exit ;
1113: GO 1160
// for i in group do
1115: LD_ADDR_VAR 0 4
1119: PUSH
1120: LD_VAR 0 2
1124: PUSH
1125: FOR_IN
1126: IFFALSE 1158
// if See ( side , i ) then
1128: LD_VAR 0 1
1132: PPUSH
1133: LD_VAR 0 4
1137: PPUSH
1138: CALL_OW 292
1142: IFFALSE 1156
// begin result := true ;
1144: LD_ADDR_VAR 0 3
1148: PUSH
1149: LD_INT 1
1151: ST_TO_ADDR
// exit ;
1152: POP
1153: POP
1154: GO 1160
// end ;
1156: GO 1125
1158: POP
1159: POP
// end ; end_of_file
1160: LD_VAR 0 3
1164: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeApes , heikeVehicles ; export function PrepareArabian ; var i , tmp , counter , hasDrugs ; begin
1165: LD_INT 0
1167: PPUSH
1168: PPUSH
1169: PPUSH
1170: PPUSH
1171: PPUSH
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
1172: LD_ADDR_VAR 0 5
1176: PUSH
1177: LD_STRING 05_DrugsTested
1179: PPUSH
1180: LD_EXP 1
1184: PPUSH
1185: CALL_OW 30
1189: ST_TO_ADDR
// if hasDrugs then
1190: LD_VAR 0 5
1194: IFFALSE 1209
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
1196: LD_INT 5
1198: PPUSH
1199: LD_INT 2
1201: PPUSH
1202: LD_INT 2
1204: PPUSH
1205: CALL_OW 322
// uc_nation := 2 ;
1209: LD_ADDR_OWVAR 21
1213: PUSH
1214: LD_INT 2
1216: ST_TO_ADDR
// uc_side := 5 ;
1217: LD_ADDR_OWVAR 20
1221: PUSH
1222: LD_INT 5
1224: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1225: LD_ADDR_EXP 23
1229: PUSH
1230: LD_STRING Abdul
1232: PPUSH
1233: LD_INT 0
1235: PPUSH
1236: LD_STRING 
1238: PPUSH
1239: CALL 16837 0 3
1243: ST_TO_ADDR
// uc_side := 2 ;
1244: LD_ADDR_OWVAR 20
1248: PUSH
1249: LD_INT 2
1251: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1252: LD_ADDR_EXP 15
1256: PUSH
1257: LD_STRING Heike
1259: PPUSH
1260: LD_EXP 1
1264: NOT
1265: PPUSH
1266: LD_EXP 2
1270: PPUSH
1271: CALL 16837 0 3
1275: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1276: LD_ADDR_EXP 18
1280: PUSH
1281: LD_STRING Ibrahim
1283: PPUSH
1284: LD_EXP 1
1288: NOT
1289: PPUSH
1290: LD_EXP 2
1294: PPUSH
1295: CALL 16837 0 3
1299: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1300: LD_ADDR_EXP 16
1304: PUSH
1305: LD_STRING Givi
1307: PPUSH
1308: LD_EXP 1
1312: NOT
1313: PPUSH
1314: LD_EXP 2
1318: PPUSH
1319: CALL 16837 0 3
1323: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1324: LD_ADDR_EXP 19
1328: PUSH
1329: LD_STRING Kamil
1331: PPUSH
1332: LD_EXP 1
1336: NOT
1337: PPUSH
1338: LD_EXP 2
1342: PPUSH
1343: CALL 16837 0 3
1347: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1348: LD_ADDR_EXP 20
1352: PUSH
1353: LD_STRING Kaia
1355: PPUSH
1356: LD_EXP 1
1360: NOT
1361: PPUSH
1362: LD_EXP 2
1366: PPUSH
1367: CALL 16837 0 3
1371: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1372: LD_ADDR_EXP 21
1376: PUSH
1377: LD_STRING Sophia
1379: PPUSH
1380: LD_EXP 1
1384: NOT
1385: PPUSH
1386: LD_EXP 2
1390: PPUSH
1391: CALL 16837 0 3
1395: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1396: LD_ADDR_EXP 22
1400: PUSH
1401: LD_STRING Markov
1403: PPUSH
1404: LD_EXP 1
1408: NOT
1409: PPUSH
1410: LD_EXP 2
1414: PPUSH
1415: CALL 16837 0 3
1419: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1420: LD_ADDR_EXP 26
1424: PUSH
1425: LD_STRING Aviradze
1427: PPUSH
1428: LD_EXP 1
1432: NOT
1433: PPUSH
1434: LD_EXP 2
1438: PPUSH
1439: CALL 16837 0 3
1443: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1444: LD_ADDR_EXP 25
1448: PUSH
1449: LD_STRING Kurt
1451: PPUSH
1452: LD_EXP 1
1456: NOT
1457: PPUSH
1458: LD_EXP 2
1462: PPUSH
1463: CALL 16837 0 3
1467: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1468: LD_ADDR_EXP 17
1472: PUSH
1473: LD_STRING Mike
1475: PPUSH
1476: LD_EXP 1
1480: NOT
1481: PPUSH
1482: LD_EXP 2
1486: PPUSH
1487: CALL 16837 0 3
1491: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1492: LD_ADDR_EXP 24
1496: PUSH
1497: LD_STRING Olaf
1499: PPUSH
1500: LD_EXP 1
1504: NOT
1505: PPUSH
1506: LD_EXP 2
1510: PPUSH
1511: CALL 16837 0 3
1515: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 06_others ) ;
1516: LD_ADDR_EXP 27
1520: PUSH
1521: LD_STRING 06_others
1523: PPUSH
1524: CALL_OW 31
1528: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 06_apes ) ;
1529: LD_ADDR_EXP 28
1533: PUSH
1534: LD_STRING 06_apes
1536: PPUSH
1537: CALL_OW 31
1541: ST_TO_ADDR
// if debug then
1542: LD_EXP 1
1546: IFFALSE 1819
// begin tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 750 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 900 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 100 , 0 ] ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 50 , 50 ] ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_mortar , 2 , 1000 , 0 ] ] ;
1548: LD_ADDR_VAR 0 3
1552: PUSH
1553: LD_INT 14
1555: PUSH
1556: LD_INT 1
1558: PUSH
1559: LD_INT 2
1561: PUSH
1562: LD_INT 25
1564: PUSH
1565: LD_INT 2
1567: PUSH
1568: LD_INT 1000
1570: PUSH
1571: LD_INT 0
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: PUSH
1583: LD_INT 14
1585: PUSH
1586: LD_INT 1
1588: PUSH
1589: LD_INT 1
1591: PUSH
1592: LD_INT 31
1594: PUSH
1595: LD_INT 2
1597: PUSH
1598: LD_INT 1000
1600: PUSH
1601: LD_INT 0
1603: PUSH
1604: EMPTY
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: LIST
1611: LIST
1612: PUSH
1613: LD_INT 14
1615: PUSH
1616: LD_INT 1
1618: PUSH
1619: LD_INT 1
1621: PUSH
1622: LD_INT 27
1624: PUSH
1625: LD_INT 2
1627: PUSH
1628: LD_INT 750
1630: PUSH
1631: LD_INT 0
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: PUSH
1643: LD_INT 14
1645: PUSH
1646: LD_INT 1
1648: PUSH
1649: LD_INT 1
1651: PUSH
1652: LD_INT 27
1654: PUSH
1655: LD_INT 2
1657: PUSH
1658: LD_INT 900
1660: PUSH
1661: LD_INT 0
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: PUSH
1673: LD_INT 14
1675: PUSH
1676: LD_INT 1
1678: PUSH
1679: LD_INT 1
1681: PUSH
1682: LD_INT 32
1684: PUSH
1685: LD_INT 2
1687: PUSH
1688: LD_INT 1000
1690: PUSH
1691: LD_INT 100
1693: PUSH
1694: LD_INT 0
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: PUSH
1710: LD_INT 14
1712: PUSH
1713: LD_INT 1
1715: PUSH
1716: LD_INT 1
1718: PUSH
1719: LD_INT 32
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: LD_INT 1000
1727: PUSH
1728: LD_INT 50
1730: PUSH
1731: LD_INT 50
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: LIST
1744: LIST
1745: LIST
1746: PUSH
1747: LD_INT 14
1749: PUSH
1750: LD_INT 1
1752: PUSH
1753: LD_INT 2
1755: PUSH
1756: LD_INT 27
1758: PUSH
1759: LD_INT 2
1761: PUSH
1762: LD_INT 1000
1764: PUSH
1765: LD_INT 0
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: PUSH
1777: LD_INT 14
1779: PUSH
1780: LD_INT 1
1782: PUSH
1783: LD_INT 1
1785: PUSH
1786: LD_INT 92
1788: PUSH
1789: LD_INT 2
1791: PUSH
1792: LD_INT 1000
1794: PUSH
1795: LD_INT 0
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: ST_TO_ADDR
// end else
1817: GO 1826
// tmp := [ ] ;
1819: LD_ADDR_VAR 0 3
1823: PUSH
1824: EMPTY
1825: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 06_Vehicles , tmp ) ;
1826: LD_ADDR_EXP 29
1830: PUSH
1831: LD_STRING 06_Vehicles
1833: PPUSH
1834: LD_VAR 0 3
1838: PPUSH
1839: CALL_OW 30
1843: ST_TO_ADDR
// counter := 0 ;
1844: LD_ADDR_VAR 0 4
1848: PUSH
1849: LD_INT 0
1851: ST_TO_ADDR
// if heikeVehicles then
1852: LD_EXP 29
1856: IFFALSE 1978
// begin for i := heikeVehicles downto 1 do
1858: LD_ADDR_VAR 0 2
1862: PUSH
1863: DOUBLE
1864: LD_EXP 29
1868: INC
1869: ST_TO_ADDR
1870: LD_INT 1
1872: PUSH
1873: FOR_DOWNTO
1874: IFFALSE 1976
// begin if heikeVehicles [ i ] [ 3 ] = control_remote then
1876: LD_EXP 29
1880: PUSH
1881: LD_VAR 0 2
1885: ARRAY
1886: PUSH
1887: LD_INT 3
1889: ARRAY
1890: PUSH
1891: LD_INT 2
1893: EQUAL
1894: IFFALSE 1974
// begin if counter < remoteControlLimit then
1896: LD_VAR 0 4
1900: PUSH
1901: LD_EXP 12
1905: LESS
1906: IFFALSE 1954
// begin counter := Inc ( counter ) ;
1908: LD_ADDR_VAR 0 4
1912: PUSH
1913: LD_VAR 0 4
1917: PPUSH
1918: CALL 56410 0 1
1922: ST_TO_ADDR
// heikeVehicles := Insert ( heikeVehicles , heikeVehicles , heikeVehicles [ i ] ) ;
1923: LD_ADDR_EXP 29
1927: PUSH
1928: LD_EXP 29
1932: PPUSH
1933: LD_EXP 29
1937: PPUSH
1938: LD_EXP 29
1942: PUSH
1943: LD_VAR 0 2
1947: ARRAY
1948: PPUSH
1949: CALL_OW 2
1953: ST_TO_ADDR
// end ; heikeVehicles := Delete ( heikeVehicles , i ) ;
1954: LD_ADDR_EXP 29
1958: PUSH
1959: LD_EXP 29
1963: PPUSH
1964: LD_VAR 0 2
1968: PPUSH
1969: CALL_OW 3
1973: ST_TO_ADDR
// end ; end ;
1974: GO 1873
1976: POP
1977: POP
// end ; end ;
1978: LD_VAR 0 1
1982: RET
// every 0 0$1 trigger scoutActive do var i , tmp ;
1983: LD_EXP 3
1987: IFFALSE 2531
1989: GO 1991
1991: DISABLE
1992: LD_INT 0
1994: PPUSH
1995: PPUSH
// begin tmp := [ [ [ 96 , 50 ] , [ 49 , 52 ] , [ 34 , 55 ] , [ 41 , 70 ] , [ 53 , 96 ] , [ 103 , 64 ] ] , [ [ 104 , 70 ] , [ 111 , 103 ] , [ 131 , 147 ] , [ 130 , 153 ] , [ 110 , 93 ] , [ 103 , 65 ] ] ] ;
1996: LD_ADDR_VAR 0 2
2000: PUSH
2001: LD_INT 96
2003: PUSH
2004: LD_INT 50
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PUSH
2011: LD_INT 49
2013: PUSH
2014: LD_INT 52
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 34
2023: PUSH
2024: LD_INT 55
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: PUSH
2031: LD_INT 41
2033: PUSH
2034: LD_INT 70
2036: PUSH
2037: EMPTY
2038: LIST
2039: LIST
2040: PUSH
2041: LD_INT 53
2043: PUSH
2044: LD_INT 96
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: LD_INT 103
2053: PUSH
2054: LD_INT 64
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: PUSH
2061: EMPTY
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 104
2071: PUSH
2072: LD_INT 70
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 111
2081: PUSH
2082: LD_INT 103
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PUSH
2089: LD_INT 131
2091: PUSH
2092: LD_INT 147
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: PUSH
2099: LD_INT 130
2101: PUSH
2102: LD_INT 153
2104: PUSH
2105: EMPTY
2106: LIST
2107: LIST
2108: PUSH
2109: LD_INT 110
2111: PUSH
2112: LD_INT 93
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: PUSH
2119: LD_INT 103
2121: PUSH
2122: LD_INT 65
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: LIST
2133: LIST
2134: LIST
2135: LIST
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: ST_TO_ADDR
// for i in tmp [ 1 ] do
2141: LD_ADDR_VAR 0 1
2145: PUSH
2146: LD_VAR 0 2
2150: PUSH
2151: LD_INT 1
2153: ARRAY
2154: PUSH
2155: FOR_IN
2156: IFFALSE 2208
// begin AddComAgressiveMove ( Mike , i [ 1 ] , i [ 2 ] ) ;
2158: LD_EXP 17
2162: PPUSH
2163: LD_VAR 0 1
2167: PUSH
2168: LD_INT 1
2170: ARRAY
2171: PPUSH
2172: LD_VAR 0 1
2176: PUSH
2177: LD_INT 2
2179: ARRAY
2180: PPUSH
2181: CALL_OW 174
// AddComHold ( Mike ) ;
2185: LD_EXP 17
2189: PPUSH
2190: CALL_OW 200
// AddComWait ( Mike , 0 0$5 ) ;
2194: LD_EXP 17
2198: PPUSH
2199: LD_INT 175
2201: PPUSH
2202: CALL_OW 202
// end ;
2206: GO 2155
2208: POP
2209: POP
// for i in tmp [ 2 ] do
2210: LD_ADDR_VAR 0 1
2214: PUSH
2215: LD_VAR 0 2
2219: PUSH
2220: LD_INT 2
2222: ARRAY
2223: PUSH
2224: FOR_IN
2225: IFFALSE 2277
// begin AddComAgressiveMove ( Kurt , i [ 1 ] , i [ 2 ] ) ;
2227: LD_EXP 25
2231: PPUSH
2232: LD_VAR 0 1
2236: PUSH
2237: LD_INT 1
2239: ARRAY
2240: PPUSH
2241: LD_VAR 0 1
2245: PUSH
2246: LD_INT 2
2248: ARRAY
2249: PPUSH
2250: CALL_OW 174
// AddComHold ( Kurt ) ;
2254: LD_EXP 25
2258: PPUSH
2259: CALL_OW 200
// AddComWait ( Kurt , 0 0$5 ) ;
2263: LD_EXP 25
2267: PPUSH
2268: LD_INT 175
2270: PPUSH
2271: CALL_OW 202
// end ;
2275: GO 2224
2277: POP
2278: POP
// wait ( 2 2$00 ) ;
2279: LD_INT 4200
2281: PPUSH
2282: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2286: LD_INT 35
2288: PPUSH
2289: CALL_OW 67
// until ( not HasTask ( Mike ) or IsDead ( Mike ) ) and ( not HasTask ( Kurt ) or IsDead ( Kurt ) ) ;
2293: LD_EXP 17
2297: PPUSH
2298: CALL_OW 314
2302: NOT
2303: IFTRUE 2316
2305: PUSH
2306: LD_EXP 17
2310: PPUSH
2311: CALL_OW 301
2315: OR
2316: IFFALSE 2343
2318: PUSH
2319: LD_EXP 25
2323: PPUSH
2324: CALL_OW 314
2328: NOT
2329: IFTRUE 2342
2331: PUSH
2332: LD_EXP 25
2336: PPUSH
2337: CALL_OW 301
2341: OR
2342: AND
2343: IFFALSE 2286
// if IsDead ( Kurt ) and IsDead ( Mike ) then
2345: LD_EXP 25
2349: PPUSH
2350: CALL_OW 301
2354: IFFALSE 2367
2356: PUSH
2357: LD_EXP 17
2361: PPUSH
2362: CALL_OW 301
2366: AND
2367: IFFALSE 2379
// begin scoutFailed := true ;
2369: LD_ADDR_EXP 4
2373: PUSH
2374: LD_INT 1
2376: ST_TO_ADDR
// exit ;
2377: GO 2531
// end ; ComMoveXY ( [ Kurt , Mike ] , 132 , 52 ) ;
2379: LD_EXP 25
2383: PUSH
2384: LD_EXP 17
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: PPUSH
2393: LD_INT 132
2395: PPUSH
2396: LD_INT 52
2398: PPUSH
2399: CALL_OW 111
// AddComMoveUnit ( [ Kurt , Mike ] , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
2403: LD_EXP 25
2407: PUSH
2408: LD_EXP 17
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: PPUSH
2417: LD_INT 22
2419: PUSH
2420: LD_INT 2
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PPUSH
2427: CALL_OW 69
2431: PUSH
2432: LD_INT 1
2434: ARRAY
2435: PPUSH
2436: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
2440: LD_INT 35
2442: PPUSH
2443: CALL_OW 67
// until See ( 2 , Kurt ) or See ( 2 , Mike ) ;
2447: LD_INT 2
2449: PPUSH
2450: LD_EXP 25
2454: PPUSH
2455: CALL_OW 292
2459: IFTRUE 2475
2461: PUSH
2462: LD_INT 2
2464: PPUSH
2465: LD_EXP 17
2469: PPUSH
2470: CALL_OW 292
2474: OR
2475: IFFALSE 2440
// if IsLive ( Kurt ) then
2477: LD_EXP 25
2481: PPUSH
2482: CALL_OW 300
2486: IFFALSE 2500
// SetSide ( Kurt , 2 ) ;
2488: LD_EXP 25
2492: PPUSH
2493: LD_INT 2
2495: PPUSH
2496: CALL_OW 235
// if IsLive ( Mike ) then
2500: LD_EXP 17
2504: PPUSH
2505: CALL_OW 300
2509: IFFALSE 2523
// SetSide ( Mike , 2 ) ;
2511: LD_EXP 17
2515: PPUSH
2516: LD_INT 2
2518: PPUSH
2519: CALL_OW 235
// scoutSuccess := true ;
2523: LD_ADDR_EXP 5
2527: PUSH
2528: LD_INT 1
2530: ST_TO_ADDR
// end ; end_of_file
2531: PPOPN 2
2533: END
// export usCommander , usForces , usCargo , usToBuild , usAdditionalForces , usCratesCollector ; export function PrepareAmerican ; var i , b , veh ; begin
2534: LD_INT 0
2536: PPUSH
2537: PPUSH
2538: PPUSH
2539: PPUSH
// uc_side := 1 ;
2540: LD_ADDR_OWVAR 20
2544: PUSH
2545: LD_INT 1
2547: ST_TO_ADDR
// uc_nation := 1 ;
2548: LD_ADDR_OWVAR 21
2552: PUSH
2553: LD_INT 1
2555: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 1500 , 2200 , 3500 , 3900 ] [ Difficulty ] ) ;
2556: LD_INT 1
2558: PPUSH
2559: CALL_OW 274
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: LD_INT 1500
2569: PUSH
2570: LD_INT 2200
2572: PUSH
2573: LD_INT 3500
2575: PUSH
2576: LD_INT 3900
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: PUSH
2585: LD_OWVAR 67
2589: ARRAY
2590: PPUSH
2591: CALL_OW 277
// SetResourceType ( GetBase ( usDepot ) , mat_oil , 800 ) ;
2595: LD_INT 1
2597: PPUSH
2598: CALL_OW 274
2602: PPUSH
2603: LD_INT 2
2605: PPUSH
2606: LD_INT 800
2608: PPUSH
2609: CALL_OW 277
// usForces := [ ] ;
2613: LD_ADDR_EXP 31
2617: PUSH
2618: EMPTY
2619: ST_TO_ADDR
// usToBuild := [ ] ;
2620: LD_ADDR_EXP 33
2624: PUSH
2625: EMPTY
2626: ST_TO_ADDR
// usAdditionalForces := [ ] ;
2627: LD_ADDR_EXP 34
2631: PUSH
2632: EMPTY
2633: ST_TO_ADDR
// usCratesCollector := [ ] ;
2634: LD_ADDR_EXP 35
2638: PUSH
2639: EMPTY
2640: ST_TO_ADDR
// for i := 1 to 3 do
2641: LD_ADDR_VAR 0 2
2645: PUSH
2646: DOUBLE
2647: LD_INT 1
2649: DEC
2650: ST_TO_ADDR
2651: LD_INT 3
2653: PUSH
2654: FOR_TO
2655: IFFALSE 2709
// begin PrepareApemanEngineer ( ) ;
2657: CALL 51062 0 0
// usCratesCollector := Join ( usCratesCollector , CreateHuman ) ;
2661: LD_ADDR_EXP 35
2665: PUSH
2666: LD_EXP 35
2670: PPUSH
2671: CALL_OW 44
2675: PPUSH
2676: CALL 55037 0 2
2680: ST_TO_ADDR
// PlaceUnitXYR ( Last ( usCratesCollector ) , 81 , 142 , 4 , false ) ;
2681: LD_EXP 35
2685: PPUSH
2686: CALL 59864 0 1
2690: PPUSH
2691: LD_INT 81
2693: PPUSH
2694: LD_INT 142
2696: PPUSH
2697: LD_INT 4
2699: PPUSH
2700: LD_INT 0
2702: PPUSH
2703: CALL_OW 50
// end ;
2707: GO 2654
2709: POP
2710: POP
// InitHc ;
2711: CALL_OW 19
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2715: LD_ADDR_VAR 0 2
2719: PUSH
2720: LD_INT 21
2722: PUSH
2723: LD_INT 3
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PPUSH
2730: CALL_OW 69
2734: PUSH
2735: FOR_IN
2736: IFFALSE 2773
// SetBLevel ( i , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
2738: LD_VAR 0 2
2742: PPUSH
2743: LD_INT 6
2745: PUSH
2746: LD_INT 7
2748: PUSH
2749: LD_INT 8
2751: PUSH
2752: LD_INT 8
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: LIST
2759: LIST
2760: PUSH
2761: LD_OWVAR 67
2765: ARRAY
2766: PPUSH
2767: CALL_OW 241
2771: GO 2735
2773: POP
2774: POP
// for i in FilterAllUnits ( [ f_btype , b_bunker ] ) do
2775: LD_ADDR_VAR 0 2
2779: PUSH
2780: LD_INT 30
2782: PUSH
2783: LD_INT 32
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: PPUSH
2790: CALL_OW 69
2794: PUSH
2795: FOR_IN
2796: IFFALSE 2886
// begin if GetBWeapon ( i ) = us_radar then
2798: LD_VAR 0 2
2802: PPUSH
2803: CALL_OW 269
2807: PUSH
2808: LD_INT 11
2810: EQUAL
2811: IFFALSE 2836
// begin uc_nation := 0 ;
2813: LD_ADDR_OWVAR 21
2817: PUSH
2818: LD_INT 0
2820: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 2 ) ;
2821: LD_INT 0
2823: PPUSH
2824: LD_INT 16
2826: PPUSH
2827: LD_INT 2
2829: PPUSH
2830: CALL_OW 380
// end else
2834: GO 2870
// PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2836: LD_INT 0
2838: PPUSH
2839: LD_INT 1
2841: PPUSH
2842: LD_INT 5
2844: PUSH
2845: LD_INT 6
2847: PUSH
2848: LD_INT 7
2850: PUSH
2851: LD_INT 8
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: LIST
2858: LIST
2859: PUSH
2860: LD_OWVAR 67
2864: ARRAY
2865: PPUSH
2866: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2870: CALL_OW 44
2874: PPUSH
2875: LD_VAR 0 2
2879: PPUSH
2880: CALL_OW 52
// end ;
2884: GO 2795
2886: POP
2887: POP
// b := HexInfo ( 74 , 120 ) ;
2888: LD_ADDR_VAR 0 3
2892: PUSH
2893: LD_INT 74
2895: PPUSH
2896: LD_INT 120
2898: PPUSH
2899: CALL_OW 428
2903: ST_TO_ADDR
// uc_nation := 1 ;
2904: LD_ADDR_OWVAR 21
2908: PUSH
2909: LD_INT 1
2911: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
2912: LD_ADDR_VAR 0 2
2916: PUSH
2917: DOUBLE
2918: LD_INT 1
2920: DEC
2921: ST_TO_ADDR
2922: LD_INT 1
2924: PUSH
2925: LD_INT 2
2927: PUSH
2928: LD_INT 3
2930: PUSH
2931: LD_INT 4
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: LIST
2938: LIST
2939: PUSH
2940: LD_OWVAR 67
2944: ARRAY
2945: PUSH
2946: FOR_TO
2947: IFFALSE 2999
// begin PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2949: LD_INT 0
2951: PPUSH
2952: LD_INT 1
2954: PPUSH
2955: LD_INT 5
2957: PUSH
2958: LD_INT 6
2960: PUSH
2961: LD_INT 7
2963: PUSH
2964: LD_INT 8
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: LIST
2971: LIST
2972: PUSH
2973: LD_OWVAR 67
2977: ARRAY
2978: PPUSH
2979: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b ) ;
2983: CALL_OW 44
2987: PPUSH
2988: LD_VAR 0 3
2992: PPUSH
2993: CALL_OW 52
// end ;
2997: GO 2946
2999: POP
3000: POP
// SetClass ( UnitsInside ( b ) , class_sniper ) ;
3001: LD_VAR 0 3
3005: PPUSH
3006: CALL_OW 313
3010: PPUSH
3011: LD_INT 5
3013: PPUSH
3014: CALL_OW 336
// for i := 1 to 6 do
3018: LD_ADDR_VAR 0 2
3022: PUSH
3023: DOUBLE
3024: LD_INT 1
3026: DEC
3027: ST_TO_ADDR
3028: LD_INT 6
3030: PUSH
3031: FOR_TO
3032: IFFALSE 3082
// begin PrepareHuman ( false , 4 , 6 ) ;
3034: LD_INT 0
3036: PPUSH
3037: LD_INT 4
3039: PPUSH
3040: LD_INT 6
3042: PPUSH
3043: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ amLab1 , amLab2 ] [ i mod 2 + 1 ] ) ;
3047: CALL_OW 44
3051: PPUSH
3052: LD_INT 32
3054: PUSH
3055: LD_INT 33
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: PUSH
3062: LD_VAR 0 2
3066: PUSH
3067: LD_INT 2
3069: MOD
3070: PUSH
3071: LD_INT 1
3073: PLUS
3074: ARRAY
3075: PPUSH
3076: CALL_OW 52
// end ;
3080: GO 3031
3082: POP
3083: POP
// for i := 1 to 3 do
3084: LD_ADDR_VAR 0 2
3088: PUSH
3089: DOUBLE
3090: LD_INT 1
3092: DEC
3093: ST_TO_ADDR
3094: LD_INT 3
3096: PUSH
3097: FOR_TO
3098: IFFALSE 3127
// begin PrepareHuman ( false , 3 , 6 ) ;
3100: LD_INT 0
3102: PPUSH
3103: LD_INT 3
3105: PPUSH
3106: LD_INT 6
3108: PPUSH
3109: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , amFac ) ;
3113: CALL_OW 44
3117: PPUSH
3118: LD_INT 25
3120: PPUSH
3121: CALL_OW 52
// end ;
3125: GO 3097
3127: POP
3128: POP
// for i := 1 to 3 do
3129: LD_ADDR_VAR 0 2
3133: PUSH
3134: DOUBLE
3135: LD_INT 1
3137: DEC
3138: ST_TO_ADDR
3139: LD_INT 3
3141: PUSH
3142: FOR_TO
3143: IFFALSE 3201
// begin PrepareHuman ( false , 3 , [ 6 , 7 , 7 , 7 ] [ Difficulty ] ) ;
3145: LD_INT 0
3147: PPUSH
3148: LD_INT 3
3150: PPUSH
3151: LD_INT 6
3153: PUSH
3154: LD_INT 7
3156: PUSH
3157: LD_INT 7
3159: PUSH
3160: LD_INT 7
3162: PUSH
3163: EMPTY
3164: LIST
3165: LIST
3166: LIST
3167: LIST
3168: PUSH
3169: LD_OWVAR 67
3173: ARRAY
3174: PPUSH
3175: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 78 , 130 ) ) ;
3179: CALL_OW 44
3183: PPUSH
3184: LD_INT 78
3186: PPUSH
3187: LD_INT 130
3189: PPUSH
3190: CALL_OW 428
3194: PPUSH
3195: CALL_OW 52
// end ;
3199: GO 3142
3201: POP
3202: POP
// for i := 1 to [ 1 , 2 , 3 , 3 ] [ Difficulty ] do
3203: LD_ADDR_VAR 0 2
3207: PUSH
3208: DOUBLE
3209: LD_INT 1
3211: DEC
3212: ST_TO_ADDR
3213: LD_INT 1
3215: PUSH
3216: LD_INT 2
3218: PUSH
3219: LD_INT 3
3221: PUSH
3222: LD_INT 3
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: LIST
3229: LIST
3230: PUSH
3231: LD_OWVAR 67
3235: ARRAY
3236: PUSH
3237: FOR_TO
3238: IFFALSE 3325
// begin PrepareVehicle ( us_medium_wheeled , engine_solar , control_manual , us_crane , 100 ) ;
3240: LD_INT 2
3242: PPUSH
3243: LD_INT 2
3245: PPUSH
3246: LD_INT 1
3248: PPUSH
3249: LD_INT 13
3251: PPUSH
3252: LD_INT 100
3254: PPUSH
3255: CALL 21857 0 5
// veh := CreateVehicle ;
3259: LD_ADDR_VAR 0 4
3263: PUSH
3264: CALL_OW 45
3268: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3269: LD_VAR 0 4
3273: PPUSH
3274: LD_INT 3
3276: PPUSH
3277: CALL_OW 233
// PlaceUnitArea ( veh , usCraneArea , false ) ;
3281: LD_VAR 0 4
3285: PPUSH
3286: LD_INT 9
3288: PPUSH
3289: LD_INT 0
3291: PPUSH
3292: CALL_OW 49
// PrepareHuman ( false , 3 , 6 ) ;
3296: LD_INT 0
3298: PPUSH
3299: LD_INT 3
3301: PPUSH
3302: LD_INT 6
3304: PPUSH
3305: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3309: CALL_OW 44
3313: PPUSH
3314: LD_VAR 0 4
3318: PPUSH
3319: CALL_OW 52
// end ;
3323: GO 3237
3325: POP
3326: POP
// InitHc ;
3327: CALL_OW 19
// hc_gallery := sandar ;
3331: LD_ADDR_OWVAR 33
3335: PUSH
3336: LD_STRING sandar
3338: ST_TO_ADDR
// hc_face_number := 38 ;
3339: LD_ADDR_OWVAR 34
3343: PUSH
3344: LD_INT 38
3346: ST_TO_ADDR
// hc_name := Doug Callahan ;
3347: LD_ADDR_OWVAR 26
3351: PUSH
3352: LD_STRING Doug Callahan
3354: ST_TO_ADDR
// hc_class := class_engineer ;
3355: LD_ADDR_OWVAR 28
3359: PUSH
3360: LD_INT 2
3362: ST_TO_ADDR
// hc_sex := sex_male ;
3363: LD_ADDR_OWVAR 27
3367: PUSH
3368: LD_INT 1
3370: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
3371: LD_ADDR_OWVAR 29
3375: PUSH
3376: LD_INT 10
3378: PUSH
3379: LD_INT 11
3381: PUSH
3382: EMPTY
3383: LIST
3384: LIST
3385: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
3386: LD_ADDR_OWVAR 30
3390: PUSH
3391: LD_INT 2
3393: PUSH
3394: LD_INT 1
3396: PUSH
3397: LD_INT 0
3399: PUSH
3400: LD_INT 0
3402: PUSH
3403: EMPTY
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: ST_TO_ADDR
// hc_skills := [ 4 , 6 , 3 , 1 ] ;
3409: LD_ADDR_OWVAR 31
3413: PUSH
3414: LD_INT 4
3416: PUSH
3417: LD_INT 6
3419: PUSH
3420: LD_INT 3
3422: PUSH
3423: LD_INT 1
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: ST_TO_ADDR
// usCommander := CreateHuman ;
3432: LD_ADDR_EXP 30
3436: PUSH
3437: CALL_OW 44
3441: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
3442: LD_EXP 30
3446: PPUSH
3447: LD_INT 1
3449: PPUSH
3450: CALL_OW 52
// DoNotAttack ( 2 , usCommander ) ;
3454: LD_INT 2
3456: PPUSH
3457: LD_EXP 30
3461: PPUSH
3462: CALL_OW 471
// InitHC_All ( ) ;
3466: CALL_OW 584
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay , 100 ) ;
3470: LD_INT 2
3472: PPUSH
3473: LD_INT 1
3475: PPUSH
3476: LD_INT 2
3478: PPUSH
3479: LD_INT 12
3481: PPUSH
3482: LD_INT 100
3484: PPUSH
3485: CALL 21857 0 5
// usCargo := CreateVehicle ;
3489: LD_ADDR_EXP 32
3493: PUSH
3494: CALL_OW 45
3498: ST_TO_ADDR
// PlaceUnitXY ( usCargo , 81 , 143 , false ) ;
3499: LD_EXP 32
3503: PPUSH
3504: LD_INT 81
3506: PPUSH
3507: LD_INT 143
3509: PPUSH
3510: LD_INT 0
3512: PPUSH
3513: CALL_OW 48
// Connect ( usCargo ) ;
3517: LD_EXP 32
3521: PPUSH
3522: CALL 25339 0 1
// DoNotAttack ( 5 , usCargo ) ;
3526: LD_INT 5
3528: PPUSH
3529: LD_EXP 32
3533: PPUSH
3534: CALL_OW 471
// end ;
3538: LD_VAR 0 1
3542: RET
// every 6 6$00 trigger usAttacksAllowed and IsOk ( amFac ) and BuildingStatus ( amFac ) = bs_idle do var i , chassis , weapon ;
3543: LD_EXP 6
3547: IFFALSE 3558
3549: PUSH
3550: LD_INT 25
3552: PPUSH
3553: CALL_OW 302
3557: AND
3558: IFFALSE 3573
3560: PUSH
3561: LD_INT 25
3563: PPUSH
3564: CALL_OW 461
3568: PUSH
3569: LD_INT 2
3571: EQUAL
3572: AND
3573: IFFALSE 3730
3575: GO 3577
3577: DISABLE
3578: LD_INT 0
3580: PPUSH
3581: PPUSH
3582: PPUSH
// begin enable ;
3583: ENABLE
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
3584: LD_ADDR_VAR 0 1
3588: PUSH
3589: DOUBLE
3590: LD_INT 1
3592: DEC
3593: ST_TO_ADDR
3594: LD_INT 4
3596: PUSH
3597: LD_INT 5
3599: PUSH
3600: LD_INT 6
3602: PUSH
3603: LD_INT 6
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: PUSH
3612: LD_OWVAR 67
3616: ARRAY
3617: PUSH
3618: FOR_TO
3619: IFFALSE 3728
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3621: LD_ADDR_VAR 0 2
3625: PUSH
3626: LD_INT 2
3628: PUSH
3629: LD_INT 3
3631: PUSH
3632: LD_INT 4
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: LIST
3639: PUSH
3640: LD_INT 1
3642: PPUSH
3643: LD_INT 3
3645: PPUSH
3646: CALL_OW 12
3650: ARRAY
3651: ST_TO_ADDR
// if chassis = us_heavy_tracked then
3652: LD_VAR 0 2
3656: PUSH
3657: LD_INT 4
3659: EQUAL
3660: IFFALSE 3672
// weapon := us_heavy_gun else
3662: LD_ADDR_VAR 0 3
3666: PUSH
3667: LD_INT 6
3669: ST_TO_ADDR
3670: GO 3703
// weapon := [ us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3672: LD_ADDR_VAR 0 3
3676: PUSH
3677: LD_INT 5
3679: PUSH
3680: LD_INT 7
3682: PUSH
3683: LD_INT 4
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: LIST
3690: PUSH
3691: LD_INT 1
3693: PPUSH
3694: LD_INT 3
3696: PPUSH
3697: CALL_OW 12
3701: ARRAY
3702: ST_TO_ADDR
// AddComConstruct ( amFac , chassis , engine_combustion , control_remote , weapon ) ;
3703: LD_INT 25
3705: PPUSH
3706: LD_VAR 0 2
3710: PPUSH
3711: LD_INT 1
3713: PPUSH
3714: LD_INT 2
3716: PPUSH
3717: LD_VAR 0 3
3721: PPUSH
3722: CALL_OW 185
// end ;
3726: GO 3618
3728: POP
3729: POP
// end ;
3730: PPOPN 3
3732: END
// every 0 0$01 do var i , un , tmp ;
3733: GO 3735
3735: DISABLE
3736: LD_INT 0
3738: PPUSH
3739: PPUSH
3740: PPUSH
// begin if Difficulty < 2 then
3741: LD_OWVAR 67
3745: PUSH
3746: LD_INT 2
3748: LESS
3749: IFFALSE 3753
// exit ;
3751: GO 4036
// tmp := [ ] ;
3753: LD_ADDR_VAR 0 3
3757: PUSH
3758: EMPTY
3759: ST_TO_ADDR
// for i := 1 to Difficulty do
3760: LD_ADDR_VAR 0 1
3764: PUSH
3765: DOUBLE
3766: LD_INT 1
3768: DEC
3769: ST_TO_ADDR
3770: LD_OWVAR 67
3774: PUSH
3775: FOR_TO
3776: IFFALSE 3872
// begin uc_side := 4 ;
3778: LD_ADDR_OWVAR 20
3782: PUSH
3783: LD_INT 4
3785: ST_TO_ADDR
// uc_nation := nation_american ;
3786: LD_ADDR_OWVAR 21
3790: PUSH
3791: LD_INT 1
3793: ST_TO_ADDR
// PrepareSoldier ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3794: LD_INT 0
3796: PPUSH
3797: LD_INT 3
3799: PUSH
3800: LD_INT 4
3802: PUSH
3803: LD_INT 5
3805: PUSH
3806: LD_INT 6
3808: PUSH
3809: EMPTY
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: PUSH
3815: LD_OWVAR 67
3819: ARRAY
3820: PPUSH
3821: CALL_OW 381
// un := CreateHuman ;
3825: LD_ADDR_VAR 0 2
3829: PUSH
3830: CALL_OW 44
3834: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
3835: LD_ADDR_VAR 0 3
3839: PUSH
3840: LD_VAR 0 3
3844: PPUSH
3845: LD_VAR 0 2
3849: PPUSH
3850: CALL 55037 0 2
3854: ST_TO_ADDR
// PlaceUnitArea ( un , westSpawnArea , false ) ;
3855: LD_VAR 0 2
3859: PPUSH
3860: LD_INT 19
3862: PPUSH
3863: LD_INT 0
3865: PPUSH
3866: CALL_OW 49
// end ;
3870: GO 3775
3872: POP
3873: POP
// for i in tmp do
3874: LD_ADDR_VAR 0 1
3878: PUSH
3879: LD_VAR 0 3
3883: PUSH
3884: FOR_IN
3885: IFFALSE 3931
// begin ComAgressiveMove ( i , 54 , 51 ) ;
3887: LD_VAR 0 1
3891: PPUSH
3892: LD_INT 54
3894: PPUSH
3895: LD_INT 51
3897: PPUSH
3898: CALL_OW 114
// AddComWait ( i , 0 0$20 ) ;
3902: LD_VAR 0 1
3906: PPUSH
3907: LD_INT 700
3909: PPUSH
3910: CALL_OW 202
// AddComAgressiveMove ( i , 35 , 6 ) ;
3914: LD_VAR 0 1
3918: PPUSH
3919: LD_INT 35
3921: PPUSH
3922: LD_INT 6
3924: PPUSH
3925: CALL_OW 174
// end ;
3929: GO 3884
3931: POP
3932: POP
// repeat wait ( 7 7$00 ) ;
3933: LD_INT 14700
3935: PPUSH
3936: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
3940: LD_ADDR_VAR 0 3
3944: PUSH
3945: LD_VAR 0 3
3949: PPUSH
3950: LD_INT 50
3952: PUSH
3953: EMPTY
3954: LIST
3955: PPUSH
3956: CALL_OW 72
3960: ST_TO_ADDR
// if not tmp then
3961: LD_VAR 0 3
3965: NOT
3966: IFFALSE 3970
// exit ;
3968: GO 4036
// for i in tmp do
3970: LD_ADDR_VAR 0 1
3974: PUSH
3975: LD_VAR 0 3
3979: PUSH
3980: FOR_IN
3981: IFFALSE 4027
// begin ComAgressiveMove ( i , 54 , 51 ) ;
3983: LD_VAR 0 1
3987: PPUSH
3988: LD_INT 54
3990: PPUSH
3991: LD_INT 51
3993: PPUSH
3994: CALL_OW 114
// AddComWait ( i , 0 0$20 ) ;
3998: LD_VAR 0 1
4002: PPUSH
4003: LD_INT 700
4005: PPUSH
4006: CALL_OW 202
// AddComAgressiveMove ( i , 35 , 6 ) ;
4010: LD_VAR 0 1
4014: PPUSH
4015: LD_INT 35
4017: PPUSH
4018: LD_INT 6
4020: PPUSH
4021: CALL_OW 174
// end ;
4025: GO 3980
4027: POP
4028: POP
// until not tmp ;
4029: LD_VAR 0 3
4033: NOT
4034: IFFALSE 3933
// end ;
4036: PPOPN 3
4038: END
// every 0 0$10 trigger usForces >= [ 4 , 5 , 6 , 6 ] [ Difficulty ] do var i , tmp ;
4039: LD_EXP 31
4043: PUSH
4044: LD_INT 4
4046: PUSH
4047: LD_INT 5
4049: PUSH
4050: LD_INT 6
4052: PUSH
4053: LD_INT 6
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: PUSH
4062: LD_OWVAR 67
4066: ARRAY
4067: GREATEREQUAL
4068: IFFALSE 4250
4070: GO 4072
4072: DISABLE
4073: LD_INT 0
4075: PPUSH
4076: PPUSH
// begin enable ;
4077: ENABLE
// tmp := usForces ;
4078: LD_ADDR_VAR 0 2
4082: PUSH
4083: LD_EXP 31
4087: ST_TO_ADDR
// usForces := [ ] ;
4088: LD_ADDR_EXP 31
4092: PUSH
4093: EMPTY
4094: ST_TO_ADDR
// if not tmp then
4095: LD_VAR 0 2
4099: NOT
4100: IFFALSE 4104
// exit ;
4102: GO 4250
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 123 , 141 , 20 ] ] ) then
4104: LD_INT 22
4106: PUSH
4107: LD_INT 2
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: PUSH
4114: LD_INT 92
4116: PUSH
4117: LD_INT 123
4119: PUSH
4120: LD_INT 141
4122: PUSH
4123: LD_INT 20
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PPUSH
4136: CALL_OW 69
4140: IFFALSE 4164
// begin ComAgressiveMove ( tmp , 126 , 143 ) ;
4142: LD_VAR 0 2
4146: PPUSH
4147: LD_INT 126
4149: PPUSH
4150: LD_INT 143
4152: PPUSH
4153: CALL_OW 114
// wait ( 0 0$30 ) ;
4157: LD_INT 1050
4159: PPUSH
4160: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
4164: LD_INT 35
4166: PPUSH
4167: CALL_OW 67
// tmp := AgressiveMove ( tmp , [ [ 51 , 50 ] , [ 98 , 50 ] , [ 114 , 50 ] , [ 127 , 51 ] , [ 131 , 35 ] ] ) ;
4171: LD_ADDR_VAR 0 2
4175: PUSH
4176: LD_VAR 0 2
4180: PPUSH
4181: LD_INT 51
4183: PUSH
4184: LD_INT 50
4186: PUSH
4187: EMPTY
4188: LIST
4189: LIST
4190: PUSH
4191: LD_INT 98
4193: PUSH
4194: LD_INT 50
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: PUSH
4201: LD_INT 114
4203: PUSH
4204: LD_INT 50
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: PUSH
4211: LD_INT 127
4213: PUSH
4214: LD_INT 51
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: PUSH
4221: LD_INT 131
4223: PUSH
4224: LD_INT 35
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: PUSH
4231: EMPTY
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: PPUSH
4238: CALL 57803 0 2
4242: ST_TO_ADDR
// until not tmp ;
4243: LD_VAR 0 2
4247: NOT
4248: IFFALSE 4164
// end ;
4250: PPOPN 2
4252: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( southScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
4253: LD_EXP 3
4257: IFFALSE 4266
4259: PUSH
4260: LD_EXP 5
4264: NOT
4265: AND
4266: IFFALSE 4287
4268: PUSH
4269: LD_INT 11
4271: PPUSH
4272: LD_INT 22
4274: PUSH
4275: LD_INT 2
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: PPUSH
4282: CALL_OW 70
4286: AND
4287: IFFALSE 4408
4289: GO 4291
4291: DISABLE
4292: LD_INT 0
4294: PPUSH
4295: PPUSH
4296: PPUSH
// begin uc_side := 1 ;
4297: LD_ADDR_OWVAR 20
4301: PUSH
4302: LD_INT 1
4304: ST_TO_ADDR
// uc_nation := 1 ;
4305: LD_ADDR_OWVAR 21
4309: PUSH
4310: LD_INT 1
4312: ST_TO_ADDR
// tmp := [ ] ;
4313: LD_ADDR_VAR 0 3
4317: PUSH
4318: EMPTY
4319: ST_TO_ADDR
// for i := 1 to 2 do
4320: LD_ADDR_VAR 0 1
4324: PUSH
4325: DOUBLE
4326: LD_INT 1
4328: DEC
4329: ST_TO_ADDR
4330: LD_INT 2
4332: PUSH
4333: FOR_TO
4334: IFFALSE 4406
// begin PrepareSoldier ( false , 7 ) ;
4336: LD_INT 0
4338: PPUSH
4339: LD_INT 7
4341: PPUSH
4342: CALL_OW 381
// un := CreateHuman ;
4346: LD_ADDR_VAR 0 2
4350: PUSH
4351: CALL_OW 44
4355: ST_TO_ADDR
// PlaceUnitXYR ( un , 130 , 153 , 3 , false ) ;
4356: LD_VAR 0 2
4360: PPUSH
4361: LD_INT 130
4363: PPUSH
4364: LD_INT 153
4366: PPUSH
4367: LD_INT 3
4369: PPUSH
4370: LD_INT 0
4372: PPUSH
4373: CALL_OW 50
// SetClass ( un , class_sniper ) ;
4377: LD_VAR 0 2
4381: PPUSH
4382: LD_INT 5
4384: PPUSH
4385: CALL_OW 336
// AddComAgressiveMove ( un , 108 , 108 ) ;
4389: LD_VAR 0 2
4393: PPUSH
4394: LD_INT 108
4396: PPUSH
4397: LD_INT 108
4399: PPUSH
4400: CALL_OW 174
// end ;
4404: GO 4333
4406: POP
4407: POP
// end ;
4408: PPOPN 3
4410: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( northScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
4411: LD_EXP 3
4415: IFFALSE 4424
4417: PUSH
4418: LD_EXP 5
4422: NOT
4423: AND
4424: IFFALSE 4445
4426: PUSH
4427: LD_INT 10
4429: PPUSH
4430: LD_INT 22
4432: PUSH
4433: LD_INT 2
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PPUSH
4440: CALL_OW 70
4444: AND
4445: IFFALSE 4566
4447: GO 4449
4449: DISABLE
4450: LD_INT 0
4452: PPUSH
4453: PPUSH
4454: PPUSH
// begin uc_side := 1 ;
4455: LD_ADDR_OWVAR 20
4459: PUSH
4460: LD_INT 1
4462: ST_TO_ADDR
// uc_nation := 1 ;
4463: LD_ADDR_OWVAR 21
4467: PUSH
4468: LD_INT 1
4470: ST_TO_ADDR
// tmp := [ ] ;
4471: LD_ADDR_VAR 0 3
4475: PUSH
4476: EMPTY
4477: ST_TO_ADDR
// for i := 1 to 2 do
4478: LD_ADDR_VAR 0 1
4482: PUSH
4483: DOUBLE
4484: LD_INT 1
4486: DEC
4487: ST_TO_ADDR
4488: LD_INT 2
4490: PUSH
4491: FOR_TO
4492: IFFALSE 4564
// begin PrepareSoldier ( false , 7 ) ;
4494: LD_INT 0
4496: PPUSH
4497: LD_INT 7
4499: PPUSH
4500: CALL_OW 381
// un := CreateHuman ;
4504: LD_ADDR_VAR 0 2
4508: PUSH
4509: CALL_OW 44
4513: ST_TO_ADDR
// PlaceUnitXYR ( un , 56 , 101 , 3 , false ) ;
4514: LD_VAR 0 2
4518: PPUSH
4519: LD_INT 56
4521: PPUSH
4522: LD_INT 101
4524: PPUSH
4525: LD_INT 3
4527: PPUSH
4528: LD_INT 0
4530: PPUSH
4531: CALL_OW 50
// SetClass ( un , class_sniper ) ;
4535: LD_VAR 0 2
4539: PPUSH
4540: LD_INT 5
4542: PPUSH
4543: CALL_OW 336
// AddComAgressiveMove ( un , 72 , 92 ) ;
4547: LD_VAR 0 2
4551: PPUSH
4552: LD_INT 72
4554: PPUSH
4555: LD_INT 92
4557: PPUSH
4558: CALL_OW 174
// end ;
4562: GO 4491
4564: POP
4565: POP
// end ;
4566: PPOPN 3
4568: END
// every 0 0$2 trigger not usSurrender do var i , tmp , cr , enemyInArea ;
4569: LD_EXP 7
4573: NOT
4574: IFFALSE 4779
4576: GO 4578
4578: DISABLE
4579: LD_INT 0
4581: PPUSH
4582: PPUSH
4583: PPUSH
4584: PPUSH
// begin enable ;
4585: ENABLE
// enemyInArea := FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_distxy , 113 , 139 , 15 ] ] ) ;
4586: LD_ADDR_VAR 0 4
4590: PUSH
4591: LD_INT 81
4593: PUSH
4594: LD_INT 1
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: PUSH
4601: LD_INT 92
4603: PUSH
4604: LD_INT 113
4606: PUSH
4607: LD_INT 139
4609: PUSH
4610: LD_INT 15
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: PUSH
4619: EMPTY
4620: LIST
4621: LIST
4622: PPUSH
4623: CALL_OW 69
4627: ST_TO_ADDR
// cr := GetListOfCratesInArea ( americanCratesArea ) ;
4628: LD_ADDR_VAR 0 3
4632: PUSH
4633: LD_INT 20
4635: PPUSH
4636: CALL_OW 435
4640: ST_TO_ADDR
// tmp := UnitFilter ( usCratesCollector , [ f_ok ] ) ;
4641: LD_ADDR_VAR 0 2
4645: PUSH
4646: LD_EXP 35
4650: PPUSH
4651: LD_INT 50
4653: PUSH
4654: EMPTY
4655: LIST
4656: PPUSH
4657: CALL_OW 72
4661: ST_TO_ADDR
// if not tmp then
4662: LD_VAR 0 2
4666: NOT
4667: IFFALSE 4672
// begin disable ;
4669: DISABLE
// exit ;
4670: GO 4779
// end ; for i in tmp do
4672: LD_ADDR_VAR 0 1
4676: PUSH
4677: LD_VAR 0 2
4681: PUSH
4682: FOR_IN
4683: IFFALSE 4777
// begin if enemyInArea and GetDistUnits ( i , usDepot ) > 12 then
4685: LD_VAR 0 4
4689: IFFALSE 4709
4691: PUSH
4692: LD_VAR 0 1
4696: PPUSH
4697: LD_INT 1
4699: PPUSH
4700: CALL_OW 296
4704: PUSH
4705: LD_INT 12
4707: GREATER
4708: AND
4709: IFFALSE 4728
// ComMoveXY ( i , 83 , 147 ) else
4711: LD_VAR 0 1
4715: PPUSH
4716: LD_INT 83
4718: PPUSH
4719: LD_INT 147
4721: PPUSH
4722: CALL_OW 111
4726: GO 4775
// if not HasTask ( i ) and cr then
4728: LD_VAR 0 1
4732: PPUSH
4733: CALL_OW 314
4737: NOT
4738: IFFALSE 4746
4740: PUSH
4741: LD_VAR 0 3
4745: AND
4746: IFFALSE 4775
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
4748: LD_VAR 0 1
4752: PPUSH
4753: LD_VAR 0 3
4757: PUSH
4758: LD_INT 1
4760: ARRAY
4761: PPUSH
4762: LD_VAR 0 3
4766: PUSH
4767: LD_INT 2
4769: ARRAY
4770: PPUSH
4771: CALL_OW 117
// end ;
4775: GO 4682
4777: POP
4778: POP
// end ;
4779: PPOPN 4
4781: END
// every 0 0$2 trigger IsOk ( usCargo ) and not usSurrender do var cr , enemyInArea ;
4782: LD_EXP 32
4786: PPUSH
4787: CALL_OW 302
4791: IFFALSE 4800
4793: PUSH
4794: LD_EXP 7
4798: NOT
4799: AND
4800: IFFALSE 5071
4802: GO 4804
4804: DISABLE
4805: LD_INT 0
4807: PPUSH
4808: PPUSH
// begin enable ;
4809: ENABLE
// enemyInArea := FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4810: LD_ADDR_VAR 0 2
4814: PUSH
4815: LD_INT 16
4817: PPUSH
4818: LD_INT 81
4820: PUSH
4821: LD_INT 1
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 50
4830: PUSH
4831: EMPTY
4832: LIST
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PPUSH
4838: CALL_OW 70
4842: ST_TO_ADDR
// cr := GetListOfCratesInArea ( usCratesArea ) ;
4843: LD_ADDR_VAR 0 1
4847: PUSH
4848: LD_INT 12
4850: PPUSH
4851: CALL_OW 435
4855: ST_TO_ADDR
// if GetFuel ( usCargo ) < 10 and not See ( 2 , usCargo ) then
4856: LD_EXP 32
4860: PPUSH
4861: CALL_OW 261
4865: PUSH
4866: LD_INT 10
4868: LESS
4869: IFFALSE 4886
4871: PUSH
4872: LD_INT 2
4874: PPUSH
4875: LD_EXP 32
4879: PPUSH
4880: CALL_OW 292
4884: NOT
4885: AND
4886: IFFALSE 4900
// SetFuel ( usCargo , 100 ) ;
4888: LD_EXP 32
4892: PPUSH
4893: LD_INT 100
4895: PPUSH
4896: CALL_OW 240
// if not HasTask ( usCargo ) and GetCargo ( usCargo , mat_cans ) < 100 and not enemyInArea then
4900: LD_EXP 32
4904: PPUSH
4905: CALL_OW 314
4909: NOT
4910: IFFALSE 4930
4912: PUSH
4913: LD_EXP 32
4917: PPUSH
4918: LD_INT 1
4920: PPUSH
4921: CALL_OW 289
4925: PUSH
4926: LD_INT 100
4928: LESS
4929: AND
4930: IFFALSE 4939
4932: PUSH
4933: LD_VAR 0 2
4937: NOT
4938: AND
4939: IFFALSE 5005
// begin if cr then
4941: LD_VAR 0 1
4945: IFFALSE 4976
// ComCollect ( usCargo , cr [ 1 ] , cr [ 2 ] ) else
4947: LD_EXP 32
4951: PPUSH
4952: LD_VAR 0 1
4956: PUSH
4957: LD_INT 1
4959: ARRAY
4960: PPUSH
4961: LD_VAR 0 1
4965: PUSH
4966: LD_INT 2
4968: ARRAY
4969: PPUSH
4970: CALL_OW 117
4974: GO 5003
// if not IsInArea ( usCargo , usCratesArea ) then
4976: LD_EXP 32
4980: PPUSH
4981: LD_INT 12
4983: PPUSH
4984: CALL_OW 308
4988: NOT
4989: IFFALSE 5003
// ComMoveToArea ( usCargo , usCratesArea ) ;
4991: LD_EXP 32
4995: PPUSH
4996: LD_INT 12
4998: PPUSH
4999: CALL_OW 113
// exit ;
5003: GO 5071
// end ; if enemyInArea and not IsInArea ( usCargo , americanBaseArea ) then
5005: LD_VAR 0 2
5009: IFFALSE 5026
5011: PUSH
5012: LD_EXP 32
5016: PPUSH
5017: LD_INT 16
5019: PPUSH
5020: CALL_OW 308
5024: NOT
5025: AND
5026: IFFALSE 5045
// ComMoveXY ( usCargo , 80 , 143 ) else
5028: LD_EXP 32
5032: PPUSH
5033: LD_INT 80
5035: PPUSH
5036: LD_INT 143
5038: PPUSH
5039: CALL_OW 111
5043: GO 5071
// if GetCargo ( usCargo , mat_cans ) then
5045: LD_EXP 32
5049: PPUSH
5050: LD_INT 1
5052: PPUSH
5053: CALL_OW 289
5057: IFFALSE 5071
// ComGive ( usCargo , usDepot ) ;
5059: LD_EXP 32
5063: PPUSH
5064: LD_INT 1
5066: PPUSH
5067: CALL_OW 161
// end ;
5071: PPOPN 2
5073: END
// every 0 0$3 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) do var i , sci ;
5074: LD_EXP 7
5078: NOT
5079: IFFALSE 5125
5081: PUSH
5082: LD_INT 22
5084: PUSH
5085: LD_INT 1
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: PUSH
5092: LD_INT 21
5094: PUSH
5095: LD_INT 1
5097: PUSH
5098: EMPTY
5099: LIST
5100: LIST
5101: PUSH
5102: LD_INT 3
5104: PUSH
5105: LD_INT 50
5107: PUSH
5108: EMPTY
5109: LIST
5110: PUSH
5111: EMPTY
5112: LIST
5113: LIST
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: LIST
5119: PPUSH
5120: CALL_OW 69
5124: AND
5125: IFFALSE 5171
5127: PUSH
5128: LD_INT 22
5130: PUSH
5131: LD_INT 1
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: PUSH
5138: LD_INT 3
5140: PUSH
5141: LD_INT 60
5143: PUSH
5144: EMPTY
5145: LIST
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PUSH
5151: LD_INT 25
5153: PUSH
5154: LD_INT 4
5156: PUSH
5157: EMPTY
5158: LIST
5159: LIST
5160: PUSH
5161: EMPTY
5162: LIST
5163: LIST
5164: LIST
5165: PPUSH
5166: CALL_OW 69
5170: AND
5171: IFFALSE 5374
5173: GO 5175
5175: DISABLE
5176: LD_INT 0
5178: PPUSH
5179: PPUSH
// begin enable ;
5180: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) do
5181: LD_ADDR_VAR 0 1
5185: PUSH
5186: LD_INT 22
5188: PUSH
5189: LD_INT 1
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: PUSH
5196: LD_INT 21
5198: PUSH
5199: LD_INT 1
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: PUSH
5206: LD_INT 3
5208: PUSH
5209: LD_INT 50
5211: PUSH
5212: EMPTY
5213: LIST
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: LIST
5223: PPUSH
5224: CALL_OW 69
5228: PUSH
5229: FOR_IN
5230: IFFALSE 5372
// begin sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) ;
5232: LD_ADDR_VAR 0 2
5236: PUSH
5237: LD_INT 22
5239: PUSH
5240: LD_INT 1
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: LD_INT 3
5249: PUSH
5250: LD_INT 60
5252: PUSH
5253: EMPTY
5254: LIST
5255: PUSH
5256: EMPTY
5257: LIST
5258: LIST
5259: PUSH
5260: LD_INT 25
5262: PUSH
5263: LD_INT 4
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: LIST
5274: PPUSH
5275: CALL_OW 69
5279: ST_TO_ADDR
// if not sci then
5280: LD_VAR 0 2
5284: NOT
5285: IFFALSE 5289
// break ;
5287: GO 5372
// sci := sci [ 1 ] ;
5289: LD_ADDR_VAR 0 2
5293: PUSH
5294: LD_VAR 0 2
5298: PUSH
5299: LD_INT 1
5301: ARRAY
5302: ST_TO_ADDR
// if IsInUnit ( sci ) then
5303: LD_VAR 0 2
5307: PPUSH
5308: CALL_OW 310
5312: IFFALSE 5325
// ComExit ( sci ) else
5314: LD_VAR 0 2
5318: PPUSH
5319: CALL 55435 0 1
5323: GO 5370
// begin ComHeal ( sci , i ) ;
5325: LD_VAR 0 2
5329: PPUSH
5330: LD_VAR 0 1
5334: PPUSH
5335: CALL_OW 128
// AddComEnterUnit ( sci , [ amLab1 , amLab2 ] [ rand ( 1 , 2 ) ] ) ;
5339: LD_VAR 0 2
5343: PPUSH
5344: LD_INT 32
5346: PUSH
5347: LD_INT 33
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: PUSH
5354: LD_INT 1
5356: PPUSH
5357: LD_INT 2
5359: PPUSH
5360: CALL_OW 12
5364: ARRAY
5365: PPUSH
5366: CALL_OW 180
// end ; end ;
5370: GO 5229
5372: POP
5373: POP
// end ;
5374: PPOPN 2
5376: END
// every 0 0$2 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) do var i , tmp , tmp2 ;
5377: LD_EXP 7
5381: NOT
5382: IFFALSE 5435
5384: PUSH
5385: LD_INT 22
5387: PUSH
5388: LD_INT 1
5390: PUSH
5391: EMPTY
5392: LIST
5393: LIST
5394: PUSH
5395: LD_INT 3
5397: PUSH
5398: LD_INT 60
5400: PUSH
5401: EMPTY
5402: LIST
5403: PUSH
5404: EMPTY
5405: LIST
5406: LIST
5407: PUSH
5408: LD_INT 50
5410: PUSH
5411: EMPTY
5412: LIST
5413: PUSH
5414: LD_INT 34
5416: PUSH
5417: LD_INT 13
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: LIST
5428: LIST
5429: PPUSH
5430: CALL_OW 69
5434: AND
5435: IFFALSE 5503
5437: PUSH
5438: LD_INT 22
5440: PUSH
5441: LD_INT 1
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: PUSH
5448: LD_INT 3
5450: PUSH
5451: LD_INT 24
5453: PUSH
5454: LD_INT 1000
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: PUSH
5465: LD_INT 21
5467: PUSH
5468: LD_INT 3
5470: PUSH
5471: EMPTY
5472: LIST
5473: LIST
5474: PUSH
5475: LD_INT 3
5477: PUSH
5478: LD_INT 30
5480: PUSH
5481: LD_INT 29
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: PUSH
5488: EMPTY
5489: LIST
5490: LIST
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: LIST
5496: LIST
5497: PPUSH
5498: CALL_OW 69
5502: AND
5503: IFFALSE 5772
5505: GO 5507
5507: DISABLE
5508: LD_INT 0
5510: PPUSH
5511: PPUSH
5512: PPUSH
// begin enable ;
5513: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
5514: LD_ADDR_VAR 0 2
5518: PUSH
5519: LD_INT 22
5521: PUSH
5522: LD_INT 1
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: PUSH
5529: LD_INT 3
5531: PUSH
5532: LD_INT 24
5534: PUSH
5535: LD_INT 1000
5537: PUSH
5538: EMPTY
5539: LIST
5540: LIST
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: PUSH
5546: LD_INT 21
5548: PUSH
5549: LD_INT 3
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: PUSH
5556: LD_INT 3
5558: PUSH
5559: LD_INT 30
5561: PUSH
5562: LD_INT 29
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: PPUSH
5579: CALL_OW 69
5583: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
5584: LD_ADDR_VAR 0 3
5588: PUSH
5589: LD_INT 22
5591: PUSH
5592: LD_INT 1
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PUSH
5599: LD_INT 3
5601: PUSH
5602: LD_INT 24
5604: PUSH
5605: LD_INT 600
5607: PUSH
5608: EMPTY
5609: LIST
5610: LIST
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: PUSH
5616: LD_INT 21
5618: PUSH
5619: LD_INT 3
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: PUSH
5626: LD_INT 3
5628: PUSH
5629: LD_INT 30
5631: PUSH
5632: LD_INT 29
5634: PUSH
5635: EMPTY
5636: LIST
5637: LIST
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PUSH
5643: EMPTY
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: PPUSH
5649: CALL_OW 69
5653: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
5654: LD_ADDR_VAR 0 1
5658: PUSH
5659: LD_INT 22
5661: PUSH
5662: LD_INT 1
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: PUSH
5669: LD_INT 3
5671: PUSH
5672: LD_INT 60
5674: PUSH
5675: EMPTY
5676: LIST
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: LD_INT 50
5684: PUSH
5685: EMPTY
5686: LIST
5687: PUSH
5688: LD_INT 34
5690: PUSH
5691: LD_INT 13
5693: PUSH
5694: EMPTY
5695: LIST
5696: LIST
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: PPUSH
5704: CALL_OW 69
5708: PUSH
5709: FOR_IN
5710: IFFALSE 5770
// begin if tmp2 then
5712: LD_VAR 0 3
5716: IFFALSE 5744
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
5718: LD_VAR 0 1
5722: PPUSH
5723: LD_VAR 0 3
5727: PPUSH
5728: LD_VAR 0 1
5732: PPUSH
5733: CALL_OW 74
5737: PPUSH
5738: CALL_OW 130
5742: GO 5768
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
5744: LD_VAR 0 1
5748: PPUSH
5749: LD_VAR 0 2
5753: PPUSH
5754: LD_VAR 0 1
5758: PPUSH
5759: CALL_OW 74
5763: PPUSH
5764: CALL_OW 130
// end ;
5768: GO 5709
5770: POP
5771: POP
// end ;
5772: PPOPN 3
5774: END
// every 0 0$1 trigger not usSurrender and not FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) and usToBuild and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
5775: LD_EXP 7
5779: NOT
5780: IFFALSE 5812
5782: PUSH
5783: LD_INT 16
5785: PPUSH
5786: LD_INT 81
5788: PUSH
5789: LD_INT 1
5791: PUSH
5792: EMPTY
5793: LIST
5794: LIST
5795: PUSH
5796: LD_INT 50
5798: PUSH
5799: EMPTY
5800: LIST
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: PPUSH
5806: CALL_OW 70
5810: NOT
5811: AND
5812: IFFALSE 5820
5814: PUSH
5815: LD_EXP 33
5819: AND
5820: IFFALSE 5873
5822: PUSH
5823: LD_INT 22
5825: PUSH
5826: LD_INT 1
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: PUSH
5833: LD_INT 3
5835: PUSH
5836: LD_INT 60
5838: PUSH
5839: EMPTY
5840: LIST
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: PUSH
5846: LD_INT 50
5848: PUSH
5849: EMPTY
5850: LIST
5851: PUSH
5852: LD_INT 34
5854: PUSH
5855: LD_INT 13
5857: PUSH
5858: EMPTY
5859: LIST
5860: LIST
5861: PUSH
5862: EMPTY
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: PPUSH
5868: CALL_OW 69
5872: AND
5873: IFFALSE 5985
5875: GO 5877
5877: DISABLE
// begin enable ;
5878: ENABLE
// ComCraneBuild ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) , usToBuild [ 1 ] [ 1 ] , usToBuild [ 1 ] [ 2 ] , usToBuild [ 1 ] [ 3 ] , usToBuild [ 1 ] [ 4 ] ) ;
5879: LD_INT 22
5881: PUSH
5882: LD_INT 1
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: PUSH
5889: LD_INT 3
5891: PUSH
5892: LD_INT 60
5894: PUSH
5895: EMPTY
5896: LIST
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: PUSH
5902: LD_INT 50
5904: PUSH
5905: EMPTY
5906: LIST
5907: PUSH
5908: LD_INT 34
5910: PUSH
5911: LD_INT 13
5913: PUSH
5914: EMPTY
5915: LIST
5916: LIST
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: PPUSH
5924: CALL_OW 69
5928: PPUSH
5929: LD_EXP 33
5933: PUSH
5934: LD_INT 1
5936: ARRAY
5937: PUSH
5938: LD_INT 1
5940: ARRAY
5941: PPUSH
5942: LD_EXP 33
5946: PUSH
5947: LD_INT 1
5949: ARRAY
5950: PUSH
5951: LD_INT 2
5953: ARRAY
5954: PPUSH
5955: LD_EXP 33
5959: PUSH
5960: LD_INT 1
5962: ARRAY
5963: PUSH
5964: LD_INT 3
5966: ARRAY
5967: PPUSH
5968: LD_EXP 33
5972: PUSH
5973: LD_INT 1
5975: ARRAY
5976: PUSH
5977: LD_INT 4
5979: ARRAY
5980: PPUSH
5981: CALL_OW 566
// end ;
5985: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) do var i , tmp , btmp , barracks ;
5986: LD_INT 22
5988: PUSH
5989: LD_INT 1
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: PUSH
5996: LD_INT 50
5998: PUSH
5999: EMPTY
6000: LIST
6001: PUSH
6002: LD_INT 3
6004: PUSH
6005: LD_INT 54
6007: PUSH
6008: EMPTY
6009: LIST
6010: PUSH
6011: EMPTY
6012: LIST
6013: LIST
6014: PUSH
6015: LD_INT 2
6017: PUSH
6018: LD_INT 25
6020: PUSH
6021: LD_INT 1
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: PUSH
6028: LD_INT 25
6030: PUSH
6031: LD_INT 5
6033: PUSH
6034: EMPTY
6035: LIST
6036: LIST
6037: PUSH
6038: LD_INT 25
6040: PUSH
6041: LD_INT 16
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: PUSH
6048: EMPTY
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: PPUSH
6060: CALL_OW 69
6064: IFFALSE 6428
6066: GO 6068
6068: DISABLE
6069: LD_INT 0
6071: PPUSH
6072: PPUSH
6073: PPUSH
6074: PPUSH
// begin enable ;
6075: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) ;
6076: LD_ADDR_VAR 0 2
6080: PUSH
6081: LD_INT 22
6083: PUSH
6084: LD_INT 1
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: PUSH
6091: LD_INT 50
6093: PUSH
6094: EMPTY
6095: LIST
6096: PUSH
6097: LD_INT 3
6099: PUSH
6100: LD_INT 54
6102: PUSH
6103: EMPTY
6104: LIST
6105: PUSH
6106: EMPTY
6107: LIST
6108: LIST
6109: PUSH
6110: LD_INT 2
6112: PUSH
6113: LD_INT 25
6115: PUSH
6116: LD_INT 1
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PUSH
6123: LD_INT 25
6125: PUSH
6126: LD_INT 5
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PUSH
6133: LD_INT 25
6135: PUSH
6136: LD_INT 16
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: PPUSH
6155: CALL_OW 69
6159: ST_TO_ADDR
// btmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
6160: LD_ADDR_VAR 0 3
6164: PUSH
6165: LD_INT 22
6167: PUSH
6168: LD_INT 1
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PUSH
6175: LD_INT 50
6177: PUSH
6178: EMPTY
6179: LIST
6180: PUSH
6181: LD_INT 21
6183: PUSH
6184: LD_INT 3
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: LD_INT 30
6193: PUSH
6194: LD_INT 32
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: PUSH
6201: LD_INT 58
6203: PUSH
6204: EMPTY
6205: LIST
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 69
6218: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) ;
6219: LD_ADDR_VAR 0 4
6223: PUSH
6224: LD_INT 22
6226: PUSH
6227: LD_INT 1
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: LD_INT 50
6236: PUSH
6237: EMPTY
6238: LIST
6239: PUSH
6240: LD_INT 30
6242: PUSH
6243: LD_INT 5
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: LIST
6254: PPUSH
6255: CALL_OW 69
6259: ST_TO_ADDR
// if not tmp then
6260: LD_VAR 0 2
6264: NOT
6265: IFFALSE 6269
// exit ;
6267: GO 6428
// for i in tmp do
6269: LD_ADDR_VAR 0 1
6273: PUSH
6274: LD_VAR 0 2
6278: PUSH
6279: FOR_IN
6280: IFFALSE 6426
// begin btmp := FilterByTag ( btmp , 0 ) ;
6282: LD_ADDR_VAR 0 3
6286: PUSH
6287: LD_VAR 0 3
6291: PPUSH
6292: LD_INT 0
6294: PPUSH
6295: CALL 52582 0 2
6299: ST_TO_ADDR
// if not btmp then
6300: LD_VAR 0 3
6304: NOT
6305: IFFALSE 6352
// begin if GetClass ( i ) <> class_apeman_engineer and barracks then
6307: LD_VAR 0 1
6311: PPUSH
6312: CALL_OW 257
6316: PUSH
6317: LD_INT 16
6319: NONEQUAL
6320: IFFALSE 6328
6322: PUSH
6323: LD_VAR 0 4
6327: AND
6328: IFFALSE 6348
// ComEnterUnit ( i , barracks [ 1 ] ) ;
6330: LD_VAR 0 1
6334: PPUSH
6335: LD_VAR 0 4
6339: PUSH
6340: LD_INT 1
6342: ARRAY
6343: PPUSH
6344: CALL_OW 120
// continue ;
6348: GO 6279
// end else
6350: GO 6424
// begin SetTag ( btmp [ 1 ] , 1 ) ;
6352: LD_VAR 0 3
6356: PUSH
6357: LD_INT 1
6359: ARRAY
6360: PPUSH
6361: LD_INT 1
6363: PPUSH
6364: CALL_OW 109
// ComEnterUnit ( i , btmp [ 1 ] ) ;
6368: LD_VAR 0 1
6372: PPUSH
6373: LD_VAR 0 3
6377: PUSH
6378: LD_INT 1
6380: ARRAY
6381: PPUSH
6382: CALL_OW 120
// wait ( 0 0$9 ) ;
6386: LD_INT 315
6388: PPUSH
6389: CALL_OW 67
// if IsEmpty ( btmp [ 1 ] ) then
6393: LD_VAR 0 3
6397: PUSH
6398: LD_INT 1
6400: ARRAY
6401: PPUSH
6402: CALL 19083 0 1
6406: IFFALSE 6424
// SetTag ( btmp [ 1 ] , 0 ) ;
6408: LD_VAR 0 3
6412: PUSH
6413: LD_INT 1
6415: ARRAY
6416: PPUSH
6417: LD_INT 0
6419: PPUSH
6420: CALL_OW 109
// end ; end ;
6424: GO 6279
6426: POP
6427: POP
// end ;
6428: PPOPN 4
6430: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do var i , tmp ;
6431: LD_INT 22
6433: PUSH
6434: LD_INT 1
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: PUSH
6441: LD_INT 33
6443: PUSH
6444: LD_INT 2
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PUSH
6451: LD_INT 50
6453: PUSH
6454: EMPTY
6455: LIST
6456: PUSH
6457: LD_INT 3
6459: PUSH
6460: LD_INT 61
6462: PUSH
6463: EMPTY
6464: LIST
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: PPUSH
6476: CALL_OW 69
6480: IFFALSE 6571
6482: GO 6484
6484: DISABLE
6485: LD_INT 0
6487: PPUSH
6488: PPUSH
// begin enable ;
6489: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
6490: LD_ADDR_VAR 0 2
6494: PUSH
6495: LD_INT 22
6497: PUSH
6498: LD_INT 1
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: PUSH
6505: LD_INT 33
6507: PUSH
6508: LD_INT 2
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PUSH
6515: LD_INT 50
6517: PUSH
6518: EMPTY
6519: LIST
6520: PUSH
6521: LD_INT 3
6523: PUSH
6524: LD_INT 61
6526: PUSH
6527: EMPTY
6528: LIST
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: PPUSH
6540: CALL_OW 69
6544: ST_TO_ADDR
// for i in tmp do
6545: LD_ADDR_VAR 0 1
6549: PUSH
6550: LD_VAR 0 2
6554: PUSH
6555: FOR_IN
6556: IFFALSE 6569
// Connect ( i ) ;
6558: LD_VAR 0 1
6562: PPUSH
6563: CALL 25339 0 1
6567: GO 6555
6569: POP
6570: POP
// end ;
6571: PPOPN 2
6573: END
// every 1 1$00 trigger usAttacksAllowed and Difficulty > 1 do var i , un , veh , chassis , weapon ;
6574: LD_EXP 6
6578: IFFALSE 6590
6580: PUSH
6581: LD_OWVAR 67
6585: PUSH
6586: LD_INT 1
6588: GREATER
6589: AND
6590: IFFALSE 7041
6592: GO 6594
6594: DISABLE
6595: LD_INT 0
6597: PPUSH
6598: PPUSH
6599: PPUSH
6600: PPUSH
6601: PPUSH
// begin wait ( [ 15 15$00 , 15 15$00 , 14 14$00 , 13 13$00 ] [ Difficulty ] ) ;
6602: LD_INT 31500
6604: PUSH
6605: LD_INT 31500
6607: PUSH
6608: LD_INT 29400
6610: PUSH
6611: LD_INT 27300
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: PUSH
6620: LD_OWVAR 67
6624: ARRAY
6625: PPUSH
6626: CALL_OW 67
// if usSurrender then
6630: LD_EXP 7
6634: IFFALSE 6638
// exit ;
6636: GO 7041
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] do
6638: LD_ADDR_VAR 0 1
6642: PUSH
6643: DOUBLE
6644: LD_INT 1
6646: DEC
6647: ST_TO_ADDR
6648: LD_INT 4
6650: PUSH
6651: LD_INT 5
6653: PUSH
6654: LD_INT 5
6656: PUSH
6657: LD_INT 6
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: PUSH
6666: LD_OWVAR 67
6670: ARRAY
6671: PUSH
6672: FOR_TO
6673: IFFALSE 6986
// begin uc_side := 1 ;
6675: LD_ADDR_OWVAR 20
6679: PUSH
6680: LD_INT 1
6682: ST_TO_ADDR
// uc_nation := 1 ;
6683: LD_ADDR_OWVAR 21
6687: PUSH
6688: LD_INT 1
6690: ST_TO_ADDR
// InitHc_All ( ) ;
6691: CALL_OW 584
// PrepareHuman ( false , 3 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
6695: LD_INT 0
6697: PPUSH
6698: LD_INT 3
6700: PPUSH
6701: LD_INT 5
6703: PUSH
6704: LD_INT 6
6706: PUSH
6707: LD_INT 7
6709: PUSH
6710: LD_INT 8
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: PUSH
6719: LD_OWVAR 67
6723: ARRAY
6724: PPUSH
6725: CALL_OW 380
// un := CreateHuman ;
6729: LD_ADDR_VAR 0 2
6733: PUSH
6734: CALL_OW 44
6738: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ i mod 3 + 1 ] ;
6739: LD_ADDR_VAR 0 4
6743: PUSH
6744: LD_INT 2
6746: PUSH
6747: LD_INT 3
6749: PUSH
6750: LD_INT 4
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: LIST
6757: PUSH
6758: LD_VAR 0 1
6762: PUSH
6763: LD_INT 3
6765: MOD
6766: PUSH
6767: LD_INT 1
6769: PLUS
6770: ARRAY
6771: ST_TO_ADDR
// if chassis = us_heavy_tracked then
6772: LD_VAR 0 4
6776: PUSH
6777: LD_INT 4
6779: EQUAL
6780: IFFALSE 6815
// weapon := [ us_heavy_gun , us_gatling_gun , us_double_gun ] [ rand ( 1 , 3 ) ] else
6782: LD_ADDR_VAR 0 5
6786: PUSH
6787: LD_INT 6
6789: PUSH
6790: LD_INT 4
6792: PUSH
6793: LD_INT 5
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 1
6803: PPUSH
6804: LD_INT 3
6806: PPUSH
6807: CALL_OW 12
6811: ARRAY
6812: ST_TO_ADDR
6813: GO 6850
// weapon := [ us_double_gun , us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6815: LD_ADDR_VAR 0 5
6819: PUSH
6820: LD_INT 5
6822: PUSH
6823: LD_INT 5
6825: PUSH
6826: LD_INT 7
6828: PUSH
6829: LD_INT 4
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: PUSH
6838: LD_INT 1
6840: PPUSH
6841: LD_INT 4
6843: PPUSH
6844: CALL_OW 12
6848: ARRAY
6849: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_manual , weapon , 30 ) ;
6850: LD_VAR 0 4
6854: PPUSH
6855: LD_INT 1
6857: PPUSH
6858: LD_INT 1
6860: PPUSH
6861: LD_VAR 0 5
6865: PPUSH
6866: LD_INT 30
6868: PPUSH
6869: CALL 21857 0 5
// veh := CreateVehicle ;
6873: LD_ADDR_VAR 0 3
6877: PUSH
6878: CALL_OW 45
6882: ST_TO_ADDR
// usAdditionalForces := Replace ( usAdditionalForces , usAdditionalForces + 1 , veh ) ;
6883: LD_ADDR_EXP 34
6887: PUSH
6888: LD_EXP 34
6892: PPUSH
6893: LD_EXP 34
6897: PUSH
6898: LD_INT 1
6900: PLUS
6901: PPUSH
6902: LD_VAR 0 3
6906: PPUSH
6907: CALL_OW 1
6911: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6912: LD_VAR 0 3
6916: PPUSH
6917: LD_INT 4
6919: PPUSH
6920: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
6924: LD_INT 35
6926: PPUSH
6927: CALL_OW 67
// until PlaceUnitArea ( veh , americanEastArea , false ) ;
6931: LD_VAR 0 3
6935: PPUSH
6936: LD_INT 17
6938: PPUSH
6939: LD_INT 0
6941: PPUSH
6942: CALL_OW 49
6946: IFFALSE 6924
// PlaceHumanInUnit ( un , veh ) ;
6948: LD_VAR 0 2
6952: PPUSH
6953: LD_VAR 0 3
6957: PPUSH
6958: CALL_OW 52
// ComMoveXY ( veh , 153 , 45 ) ;
6962: LD_VAR 0 3
6966: PPUSH
6967: LD_INT 153
6969: PPUSH
6970: LD_INT 45
6972: PPUSH
6973: CALL_OW 111
// wait ( 0 0$2 ) ;
6977: LD_INT 70
6979: PPUSH
6980: CALL_OW 67
// end ;
6984: GO 6672
6986: POP
6987: POP
// repeat wait ( 0 0$1 ) ;
6988: LD_INT 35
6990: PPUSH
6991: CALL_OW 67
// usAdditionalForces := AgressiveMove ( usAdditionalForces , [ [ 150 , 36 ] , [ 138 , 25 ] ] ) ;
6995: LD_ADDR_EXP 34
6999: PUSH
7000: LD_EXP 34
7004: PPUSH
7005: LD_INT 150
7007: PUSH
7008: LD_INT 36
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PUSH
7015: LD_INT 138
7017: PUSH
7018: LD_INT 25
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PPUSH
7029: CALL 57803 0 2
7033: ST_TO_ADDR
// until not usAdditionalForces ;
7034: LD_EXP 34
7038: NOT
7039: IFFALSE 6988
// end ;
7041: PPOPN 5
7043: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 2 ] ] ) do
7044: LD_INT 22
7046: PUSH
7047: LD_INT 1
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: LD_INT 101
7056: PUSH
7057: LD_INT 2
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: PPUSH
7068: CALL_OW 69
7072: IFFALSE 7092
7074: GO 7076
7076: DISABLE
// begin wait ( 0 0$30 ) ;
7077: LD_INT 1050
7079: PPUSH
7080: CALL_OW 67
// usAttacksAllowed := true ;
7084: LD_ADDR_EXP 6
7088: PUSH
7089: LD_INT 1
7091: ST_TO_ADDR
// end ; end_of_file
7092: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7093: LD_VAR 0 1
7097: PPUSH
7098: CALL 60554 0 1
// if un = Heike then
7102: LD_VAR 0 1
7106: PUSH
7107: LD_EXP 15
7111: EQUAL
7112: IFFALSE 7121
// YouLost ( Heike ) ;
7114: LD_STRING Heike
7116: PPUSH
7117: CALL_OW 104
// if un = usCommander then
7121: LD_VAR 0 1
7125: PUSH
7126: LD_EXP 30
7130: EQUAL
7131: IFFALSE 7140
// YouLost ( Commander ) ;
7133: LD_STRING Commander
7135: PPUSH
7136: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_vehicle then
7140: LD_VAR 0 1
7144: PPUSH
7145: CALL_OW 255
7149: PUSH
7150: LD_INT 2
7152: EQUAL
7153: IFFALSE 7170
7155: PUSH
7156: LD_VAR 0 1
7160: PPUSH
7161: CALL_OW 247
7165: PUSH
7166: LD_INT 2
7168: EQUAL
7169: AND
7170: IFFALSE 7187
// vehLossCounter := Inc ( vehLossCounter ) ;
7172: LD_ADDR_EXP 14
7176: PUSH
7177: LD_EXP 14
7181: PPUSH
7182: CALL 56410 0 1
7186: ST_TO_ADDR
// if GetSide ( un ) = 1 then
7187: LD_VAR 0 1
7191: PPUSH
7192: CALL_OW 255
7196: PUSH
7197: LD_INT 1
7199: EQUAL
7200: IFFALSE 7546
// begin if GetClass ( un ) = class_sniper then
7202: LD_VAR 0 1
7206: PPUSH
7207: CALL_OW 257
7211: PUSH
7212: LD_INT 5
7214: EQUAL
7215: IFFALSE 7232
// sniperKillCounter := Inc ( sniperKillCounter ) ;
7217: LD_ADDR_EXP 13
7221: PUSH
7222: LD_EXP 13
7226: PPUSH
7227: CALL 56410 0 1
7231: ST_TO_ADDR
// if GetWeapon ( un ) = us_crane and IsOk ( amFac ) then
7232: LD_VAR 0 1
7236: PPUSH
7237: CALL_OW 264
7241: PUSH
7242: LD_INT 13
7244: EQUAL
7245: IFFALSE 7256
7247: PUSH
7248: LD_INT 25
7250: PPUSH
7251: CALL_OW 302
7255: AND
7256: IFFALSE 7319
// begin wait ( 0 0$05 * Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ) ) ;
7258: LD_INT 175
7260: PUSH
7261: LD_INT 22
7263: PUSH
7264: LD_INT 1
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: PUSH
7271: LD_INT 34
7273: PUSH
7274: LD_INT 13
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: PPUSH
7285: CALL_OW 69
7289: PPUSH
7290: CALL 19061 0 1
7294: MUL
7295: PPUSH
7296: CALL_OW 67
// AddComConstruct ( amFac , us_medium_wheeled , engine_solar , control_remote , us_crane ) ;
7300: LD_INT 25
7302: PPUSH
7303: LD_INT 2
7305: PPUSH
7306: LD_INT 2
7308: PPUSH
7309: LD_INT 2
7311: PPUSH
7312: LD_INT 13
7314: PPUSH
7315: CALL_OW 185
// end ; if GetWeapon ( un ) = us_cargo_bay and IsOk ( amFac ) then
7319: LD_VAR 0 1
7323: PPUSH
7324: CALL_OW 264
7328: PUSH
7329: LD_INT 12
7331: EQUAL
7332: IFFALSE 7343
7334: PUSH
7335: LD_INT 25
7337: PPUSH
7338: CALL_OW 302
7342: AND
7343: IFFALSE 7364
// AddComConstruct ( amFac , us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ) ;
7345: LD_INT 25
7347: PPUSH
7348: LD_INT 2
7350: PPUSH
7351: LD_INT 1
7353: PPUSH
7354: LD_INT 2
7356: PPUSH
7357: LD_INT 12
7359: PPUSH
7360: CALL_OW 185
// if GetBType ( un ) = b_bunker then
7364: LD_VAR 0 1
7368: PPUSH
7369: CALL_OW 266
7373: PUSH
7374: LD_INT 32
7376: EQUAL
7377: IFFALSE 7461
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ [ b_bunker , b_turret ] [ rand ( 1 , 2 ) ] , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
7379: LD_ADDR_EXP 33
7383: PUSH
7384: LD_EXP 33
7388: PPUSH
7389: LD_EXP 33
7393: PUSH
7394: LD_INT 1
7396: PLUS
7397: PPUSH
7398: LD_INT 32
7400: PUSH
7401: LD_INT 33
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: PUSH
7408: LD_INT 1
7410: PPUSH
7411: LD_INT 2
7413: PPUSH
7414: CALL_OW 12
7418: ARRAY
7419: PUSH
7420: LD_VAR 0 1
7424: PPUSH
7425: CALL_OW 250
7429: PUSH
7430: LD_VAR 0 1
7434: PPUSH
7435: CALL_OW 251
7439: PUSH
7440: LD_VAR 0 1
7444: PPUSH
7445: CALL_OW 254
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: PPUSH
7456: CALL_OW 1
7460: ST_TO_ADDR
// if GetBType ( un ) in [ b_barracks , b_armoury ] then
7461: LD_VAR 0 1
7465: PPUSH
7466: CALL_OW 266
7470: PUSH
7471: LD_INT 5
7473: PUSH
7474: LD_INT 4
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: IN
7481: IFFALSE 7546
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_armoury , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
7483: LD_ADDR_EXP 33
7487: PUSH
7488: LD_EXP 33
7492: PPUSH
7493: LD_EXP 33
7497: PUSH
7498: LD_INT 1
7500: PLUS
7501: PPUSH
7502: LD_INT 4
7504: PUSH
7505: LD_VAR 0 1
7509: PPUSH
7510: CALL_OW 250
7514: PUSH
7515: LD_VAR 0 1
7519: PPUSH
7520: CALL_OW 251
7524: PUSH
7525: LD_VAR 0 1
7529: PPUSH
7530: CALL_OW 254
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: PPUSH
7541: CALL_OW 1
7545: ST_TO_ADDR
// end ; end ;
7546: PPOPN 1
7548: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 1 and GetTag ( un ) = 1 then
7549: LD_VAR 0 1
7553: PPUSH
7554: CALL_OW 255
7558: PUSH
7559: LD_INT 1
7561: EQUAL
7562: IFFALSE 7579
7564: PUSH
7565: LD_VAR 0 1
7569: PPUSH
7570: CALL_OW 110
7574: PUSH
7575: LD_INT 1
7577: EQUAL
7578: AND
7579: IFFALSE 7593
// SetTag ( un , 0 ) ;
7581: LD_VAR 0 1
7585: PPUSH
7586: LD_INT 0
7588: PPUSH
7589: CALL_OW 109
// if GetSide ( un ) = 1 and GetWeapon ( un ) = us_heavy_gun and not seeHeavyGun then
7593: LD_VAR 0 1
7597: PPUSH
7598: CALL_OW 255
7602: PUSH
7603: LD_INT 1
7605: EQUAL
7606: IFFALSE 7623
7608: PUSH
7609: LD_VAR 0 1
7613: PPUSH
7614: CALL_OW 264
7618: PUSH
7619: LD_INT 6
7621: EQUAL
7622: AND
7623: IFFALSE 7632
7625: PUSH
7626: LD_EXP 11
7630: NOT
7631: AND
7632: IFFALSE 7642
// seeHeavyGun := true ;
7634: LD_ADDR_EXP 11
7638: PUSH
7639: LD_INT 1
7641: ST_TO_ADDR
// if GetControl ( un ) = control_remote and GetSide ( un ) <> 2 then
7642: LD_VAR 0 1
7646: PPUSH
7647: CALL_OW 263
7651: PUSH
7652: LD_INT 2
7654: EQUAL
7655: IFFALSE 7672
7657: PUSH
7658: LD_VAR 0 1
7662: PPUSH
7663: CALL_OW 255
7667: PUSH
7668: LD_INT 2
7670: NONEQUAL
7671: AND
7672: IFFALSE 7698
// begin ComUnlink ( un ) ;
7674: LD_VAR 0 1
7678: PPUSH
7679: CALL_OW 136
// if not seeRemoteVehicle then
7683: LD_EXP 10
7687: NOT
7688: IFFALSE 7698
// seeRemoteVehicle := true ;
7690: LD_ADDR_EXP 10
7694: PUSH
7695: LD_INT 1
7697: ST_TO_ADDR
// end ; end ;
7698: PPOPN 1
7700: END
// on BuildingComplete ( b ) do var i , barracks ;
7701: LD_INT 0
7703: PPUSH
7704: PPUSH
// begin if GetSide ( b ) = 2 then
7705: LD_VAR 0 1
7709: PPUSH
7710: CALL_OW 255
7714: PUSH
7715: LD_INT 2
7717: EQUAL
7718: IFFALSE 7758
// begin if GetBType ( b ) = b_depot and IsInArea ( b , westBankArea ) then
7720: LD_VAR 0 1
7724: PPUSH
7725: CALL_OW 266
7729: PUSH
7730: LD_INT 0
7732: EQUAL
7733: IFFALSE 7749
7735: PUSH
7736: LD_VAR 0 1
7740: PPUSH
7741: LD_INT 18
7743: PPUSH
7744: CALL_OW 308
7748: AND
7749: IFFALSE 7758
// SetAchievement ( ACH_WEST ) ;
7751: LD_STRING ACH_WEST
7753: PPUSH
7754: CALL_OW 543
// end ; if GetSide ( b ) = 1 then
7758: LD_VAR 0 1
7762: PPUSH
7763: CALL_OW 255
7767: PUSH
7768: LD_INT 1
7770: EQUAL
7771: IFFALSE 7947
// begin usToBuild := Delete ( usToBuild , 1 ) ;
7773: LD_ADDR_EXP 33
7777: PUSH
7778: LD_EXP 33
7782: PPUSH
7783: LD_INT 1
7785: PPUSH
7786: CALL_OW 3
7790: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
7791: LD_VAR 0 1
7795: PPUSH
7796: CALL_OW 266
7800: PUSH
7801: LD_INT 4
7803: EQUAL
7804: IFFALSE 7815
// ComUpgrade ( b ) ;
7806: LD_VAR 0 1
7810: PPUSH
7811: CALL_OW 146
// if GetBType ( b ) in [ b_bunker , b_turret ] then
7815: LD_VAR 0 1
7819: PPUSH
7820: CALL_OW 266
7824: PUSH
7825: LD_INT 32
7827: PUSH
7828: LD_INT 33
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: IN
7835: IFFALSE 7947
// begin AddComPlaceWeapon ( b , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
7837: LD_VAR 0 1
7841: PPUSH
7842: LD_INT 6
7844: PUSH
7845: LD_INT 7
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PUSH
7852: LD_INT 1
7854: PPUSH
7855: LD_INT 2
7857: PPUSH
7858: CALL_OW 12
7862: ARRAY
7863: PPUSH
7864: CALL_OW 208
// if GetBType ( b ) = b_turret then
7868: LD_VAR 0 1
7872: PPUSH
7873: CALL_OW 266
7877: PUSH
7878: LD_INT 33
7880: EQUAL
7881: IFFALSE 7885
// exit ;
7883: GO 7947
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
7885: LD_ADDR_VAR 0 3
7889: PUSH
7890: LD_INT 22
7892: PUSH
7893: LD_INT 1
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: LD_INT 30
7902: PUSH
7903: LD_INT 5
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: PPUSH
7914: CALL_OW 69
7918: ST_TO_ADDR
// if barracks then
7919: LD_VAR 0 3
7923: IFFALSE 7947
// ComExitBuilding ( UnitsInside ( barracks [ 1 ] ) [ 1 ] ) ;
7925: LD_VAR 0 3
7929: PUSH
7930: LD_INT 1
7932: ARRAY
7933: PPUSH
7934: CALL_OW 313
7938: PUSH
7939: LD_INT 1
7941: ARRAY
7942: PPUSH
7943: CALL_OW 122
// end ; end ; end ;
7947: PPOPN 3
7949: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7950: LD_VAR 0 1
7954: PPUSH
7955: LD_VAR 0 2
7959: PPUSH
7960: CALL 60612 0 2
// if GetSide ( factory ) = 1 then
7964: LD_VAR 0 2
7968: PPUSH
7969: CALL_OW 255
7973: PUSH
7974: LD_INT 1
7976: EQUAL
7977: IFFALSE 8056
// begin if GetWeapon ( vehicle ) = us_cargo_bay then
7979: LD_VAR 0 1
7983: PPUSH
7984: CALL_OW 264
7988: PUSH
7989: LD_INT 12
7991: EQUAL
7992: IFFALSE 8004
// usCargo := vehicle ;
7994: LD_ADDR_EXP 32
7998: PUSH
7999: LD_VAR 0 1
8003: ST_TO_ADDR
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , us_crane ] then
8004: LD_VAR 0 1
8008: PPUSH
8009: CALL_OW 264
8013: PUSH
8014: LD_INT 12
8016: PUSH
8017: LD_INT 13
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: IN
8024: NOT
8025: IFFALSE 8056
// usForces := Replace ( usForces , usForces + 1 , vehicle ) ;
8027: LD_ADDR_EXP 31
8031: PUSH
8032: LD_EXP 31
8036: PPUSH
8037: LD_EXP 31
8041: PUSH
8042: LD_INT 1
8044: PLUS
8045: PPUSH
8046: LD_VAR 0 1
8050: PPUSH
8051: CALL_OW 1
8055: ST_TO_ADDR
// end ; end ;
8056: PPOPN 2
8058: END
// on EvacuateVehicle ( un , veh , p1 , p2 ) do begin if GetSide ( veh ) = 1 then
8059: LD_VAR 0 2
8063: PPUSH
8064: CALL_OW 255
8068: PUSH
8069: LD_INT 1
8071: EQUAL
8072: IFFALSE 8086
// AddComEnterUnit ( un , amFac ) ;
8074: LD_VAR 0 1
8078: PPUSH
8079: LD_INT 25
8081: PPUSH
8082: CALL_OW 180
// end ;
8086: PPOPN 4
8088: END
// on EvacuateBuilding ( b , un ) do begin if GetSide ( b ) = 1 and GetBType ( b ) = b_bunker and GetClass ( un ) in [ class_soldier , class_sniper ] and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] , [ f_ok ] ] ) then
8089: LD_VAR 0 1
8093: PPUSH
8094: CALL_OW 255
8098: PUSH
8099: LD_INT 1
8101: EQUAL
8102: IFFALSE 8119
8104: PUSH
8105: LD_VAR 0 1
8109: PPUSH
8110: CALL_OW 266
8114: PUSH
8115: LD_INT 32
8117: EQUAL
8118: AND
8119: IFFALSE 8143
8121: PUSH
8122: LD_VAR 0 2
8126: PPUSH
8127: CALL_OW 257
8131: PUSH
8132: LD_INT 1
8134: PUSH
8135: LD_INT 5
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: IN
8142: AND
8143: IFFALSE 8182
8145: PUSH
8146: LD_INT 22
8148: PUSH
8149: LD_INT 1
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PUSH
8156: LD_INT 30
8158: PUSH
8159: LD_INT 5
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PUSH
8166: LD_INT 50
8168: PUSH
8169: EMPTY
8170: LIST
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: LIST
8176: PPUSH
8177: CALL_OW 69
8181: AND
8182: IFFALSE 8252
// if UnitsInside ( HexInfo ( 74 , 120 ) ) < 6 then
8184: LD_INT 74
8186: PPUSH
8187: LD_INT 120
8189: PPUSH
8190: CALL_OW 428
8194: PPUSH
8195: CALL_OW 313
8199: PUSH
8200: LD_INT 6
8202: LESS
8203: IFFALSE 8252
// begin ComEnterUnit ( un , HexInfo ( 74 , 120 ) ) ;
8205: LD_VAR 0 2
8209: PPUSH
8210: LD_INT 74
8212: PPUSH
8213: LD_INT 120
8215: PPUSH
8216: CALL_OW 428
8220: PPUSH
8221: CALL_OW 120
// if GetClass ( un ) = class_soldier then
8225: LD_VAR 0 2
8229: PPUSH
8230: CALL_OW 257
8234: PUSH
8235: LD_INT 1
8237: EQUAL
8238: IFFALSE 8252
// AddComChangeProfession ( un , class_sniper ) ;
8240: LD_VAR 0 2
8244: PPUSH
8245: LD_INT 5
8247: PPUSH
8248: CALL_OW 183
// end ; end ; end_of_file
8252: PPOPN 2
8254: END
// export function Action ; var i , j , veh , tmp , _tmp , hasEng , hasCamera , driver , counter ; begin
8255: LD_INT 0
8257: PPUSH
8258: PPUSH
8259: PPUSH
8260: PPUSH
8261: PPUSH
8262: PPUSH
8263: PPUSH
8264: PPUSH
8265: PPUSH
8266: PPUSH
// Video ( true ) ;
8267: LD_INT 1
8269: PPUSH
8270: CALL 55009 0 1
// music_nat := 1 ;
8274: LD_ADDR_OWVAR 71
8278: PUSH
8279: LD_INT 1
8281: ST_TO_ADDR
// music_class := music_recon ;
8282: LD_ADDR_OWVAR 72
8286: PUSH
8287: LD_INT 3
8289: ST_TO_ADDR
// PlaceSeeing ( 184 , 142 , 2 , - 10 ) ;
8290: LD_INT 184
8292: PPUSH
8293: LD_INT 142
8295: PPUSH
8296: LD_INT 2
8298: PPUSH
8299: LD_INT 10
8301: NEG
8302: PPUSH
8303: CALL_OW 330
// RemoveSeeing ( 184 , 142 , 2 ) ;
8307: LD_INT 184
8309: PPUSH
8310: LD_INT 142
8312: PPUSH
8313: LD_INT 2
8315: PPUSH
8316: CALL_OW 331
// PlaceSeeing ( 204 , 151 , 2 , - 10 ) ;
8320: LD_INT 204
8322: PPUSH
8323: LD_INT 151
8325: PPUSH
8326: LD_INT 2
8328: PPUSH
8329: LD_INT 10
8331: NEG
8332: PPUSH
8333: CALL_OW 330
// RemoveSeeing ( 204 , 151 , 2 ) ;
8337: LD_INT 204
8339: PPUSH
8340: LD_INT 151
8342: PPUSH
8343: LD_INT 2
8345: PPUSH
8346: CALL_OW 331
// CenterNowOnXY ( 184 , 142 ) ;
8350: LD_INT 184
8352: PPUSH
8353: LD_INT 142
8355: PPUSH
8356: CALL_OW 86
// wait ( 0 0$2 ) ;
8360: LD_INT 70
8362: PPUSH
8363: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
8367: LD_ADDR_VAR 0 5
8371: PUSH
8372: LD_EXP 15
8376: PUSH
8377: LD_EXP 16
8381: PUSH
8382: LD_EXP 17
8386: PUSH
8387: LD_EXP 18
8391: PUSH
8392: LD_EXP 19
8396: PUSH
8397: LD_EXP 20
8401: PUSH
8402: LD_EXP 21
8406: PUSH
8407: LD_EXP 22
8411: PUSH
8412: LD_EXP 24
8416: PUSH
8417: LD_EXP 25
8421: PUSH
8422: LD_EXP 26
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: PUSH
8440: LD_EXP 27
8444: UNION
8445: ST_TO_ADDR
// tmp := tmp diff 0 ;
8446: LD_ADDR_VAR 0 5
8450: PUSH
8451: LD_VAR 0 5
8455: PUSH
8456: LD_INT 0
8458: DIFF
8459: ST_TO_ADDR
// hasEng := UnitFilter ( tmp , [ f_class , 2 ] ) > 0 ;
8460: LD_ADDR_VAR 0 7
8464: PUSH
8465: LD_VAR 0 5
8469: PPUSH
8470: LD_INT 25
8472: PUSH
8473: LD_INT 2
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: PPUSH
8480: CALL_OW 72
8484: PUSH
8485: LD_INT 0
8487: GREATER
8488: ST_TO_ADDR
// hasCamera := false ;
8489: LD_ADDR_VAR 0 8
8493: PUSH
8494: LD_INT 0
8496: ST_TO_ADDR
// if not hasEng then
8497: LD_VAR 0 7
8501: NOT
8502: IFFALSE 8555
// begin _tmp := tmp diff [ Kurt , Mike ] ;
8504: LD_ADDR_VAR 0 6
8508: PUSH
8509: LD_VAR 0 5
8513: PUSH
8514: LD_EXP 25
8518: PUSH
8519: LD_EXP 17
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: DIFF
8528: ST_TO_ADDR
// SetClass ( _tmp [ rand ( 1 , _tmp ) ] , class_engineer ) ;
8529: LD_VAR 0 6
8533: PUSH
8534: LD_INT 1
8536: PPUSH
8537: LD_VAR 0 6
8541: PPUSH
8542: CALL_OW 12
8546: ARRAY
8547: PPUSH
8548: LD_INT 2
8550: PPUSH
8551: CALL_OW 336
// end ; if heikeVehicles then
8555: LD_EXP 29
8559: IFFALSE 9207
// begin tmp := SortByClass ( tmp , class_mechanic ) ;
8561: LD_ADDR_VAR 0 5
8565: PUSH
8566: LD_VAR 0 5
8570: PPUSH
8571: LD_INT 3
8573: PPUSH
8574: CALL 57423 0 2
8578: ST_TO_ADDR
// for i in heikeVehicles do
8579: LD_ADDR_VAR 0 2
8583: PUSH
8584: LD_EXP 29
8588: PUSH
8589: FOR_IN
8590: IFFALSE 9205
// begin if not tmp then
8592: LD_VAR 0 5
8596: NOT
8597: IFFALSE 8601
// break ;
8599: GO 9205
// uc_side := 2 ;
8601: LD_ADDR_OWVAR 20
8605: PUSH
8606: LD_INT 2
8608: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
8609: LD_ADDR_OWVAR 21
8613: PUSH
8614: LD_VAR 0 2
8618: PUSH
8619: LD_INT 5
8621: ARRAY
8622: ST_TO_ADDR
// vc_chassis := i [ 1 ] ;
8623: LD_ADDR_OWVAR 37
8627: PUSH
8628: LD_VAR 0 2
8632: PUSH
8633: LD_INT 1
8635: ARRAY
8636: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
8637: LD_ADDR_OWVAR 39
8641: PUSH
8642: LD_VAR 0 2
8646: PUSH
8647: LD_INT 2
8649: ARRAY
8650: ST_TO_ADDR
// vc_control := i [ 3 ] ;
8651: LD_ADDR_OWVAR 38
8655: PUSH
8656: LD_VAR 0 2
8660: PUSH
8661: LD_INT 3
8663: ARRAY
8664: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
8665: LD_ADDR_OWVAR 40
8669: PUSH
8670: LD_VAR 0 2
8674: PUSH
8675: LD_INT 4
8677: ARRAY
8678: ST_TO_ADDR
// veh := CreateVehicle ;
8679: LD_ADDR_VAR 0 4
8683: PUSH
8684: CALL_OW 45
8688: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
8689: LD_VAR 0 4
8693: PPUSH
8694: LD_INT 4
8696: PPUSH
8697: CALL_OW 233
// if i [ 3 ] = control_manual then
8701: LD_VAR 0 2
8705: PUSH
8706: LD_INT 3
8708: ARRAY
8709: PUSH
8710: LD_INT 1
8712: EQUAL
8713: IFFALSE 8807
// begin repeat wait ( 1 ) ;
8715: LD_INT 1
8717: PPUSH
8718: CALL_OW 67
// until PlaceUnitArea ( veh , startArea , false ) ;
8722: LD_VAR 0 4
8726: PPUSH
8727: LD_INT 1
8729: PPUSH
8730: LD_INT 0
8732: PPUSH
8733: CALL_OW 49
8737: IFFALSE 8715
// if i [ 4 ] = ar_control_tower then
8739: LD_VAR 0 2
8743: PUSH
8744: LD_INT 4
8746: ARRAY
8747: PUSH
8748: LD_INT 31
8750: EQUAL
8751: IFFALSE 8769
// SetClass ( tmp [ 1 ] , class_mechanic ) ;
8753: LD_VAR 0 5
8757: PUSH
8758: LD_INT 1
8760: ARRAY
8761: PPUSH
8762: LD_INT 3
8764: PPUSH
8765: CALL_OW 336
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
8769: LD_VAR 0 5
8773: PUSH
8774: LD_INT 1
8776: ARRAY
8777: PPUSH
8778: LD_VAR 0 4
8782: PPUSH
8783: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
8787: LD_ADDR_VAR 0 5
8791: PUSH
8792: LD_VAR 0 5
8796: PPUSH
8797: LD_INT 1
8799: PPUSH
8800: CALL_OW 3
8804: ST_TO_ADDR
// end else
8805: GO 8877
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
8807: LD_INT 22
8809: PUSH
8810: LD_INT 2
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: PUSH
8817: LD_INT 34
8819: PUSH
8820: LD_INT 31
8822: PUSH
8823: EMPTY
8824: LIST
8825: LIST
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: PPUSH
8831: CALL_OW 69
8835: IFFALSE 8877
// begin repeat wait ( 1 ) ;
8837: LD_INT 1
8839: PPUSH
8840: CALL_OW 67
// until PlaceUnitArea ( veh , startArea , false ) ;
8844: LD_VAR 0 4
8848: PPUSH
8849: LD_INT 1
8851: PPUSH
8852: LD_INT 0
8854: PPUSH
8855: CALL_OW 49
8859: IFFALSE 8837
// Connect ( veh ) ;
8861: LD_VAR 0 4
8865: PPUSH
8866: CALL 25339 0 1
// wait ( 0 0$2 ) ;
8870: LD_INT 70
8872: PPUSH
8873: CALL_OW 67
// end ; SetLives ( veh , i [ 6 ] ) ;
8877: LD_VAR 0 4
8881: PPUSH
8882: LD_VAR 0 2
8886: PUSH
8887: LD_INT 6
8889: ARRAY
8890: PPUSH
8891: CALL_OW 234
// SetFuel ( veh , 20 ) ;
8895: LD_VAR 0 4
8899: PPUSH
8900: LD_INT 20
8902: PPUSH
8903: CALL_OW 240
// if i [ 7 ] and GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay ] then
8907: LD_VAR 0 2
8911: PUSH
8912: LD_INT 7
8914: ARRAY
8915: IFFALSE 8939
8917: PUSH
8918: LD_VAR 0 4
8922: PPUSH
8923: CALL_OW 264
8927: PUSH
8928: LD_INT 51
8930: PUSH
8931: LD_INT 32
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: IN
8938: AND
8939: IFFALSE 8990
// begin for j := 1 to 2 do
8941: LD_ADDR_VAR 0 3
8945: PUSH
8946: DOUBLE
8947: LD_INT 1
8949: DEC
8950: ST_TO_ADDR
8951: LD_INT 2
8953: PUSH
8954: FOR_TO
8955: IFFALSE 8988
// AddCargo ( veh , j , i [ 7 ] [ j ] ) ;
8957: LD_VAR 0 4
8961: PPUSH
8962: LD_VAR 0 3
8966: PPUSH
8967: LD_VAR 0 2
8971: PUSH
8972: LD_INT 7
8974: ARRAY
8975: PUSH
8976: LD_VAR 0 3
8980: ARRAY
8981: PPUSH
8982: CALL_OW 291
8986: GO 8954
8988: POP
8989: POP
// end ; ComMoveXY ( veh , 185 , 144 ) ;
8990: LD_VAR 0 4
8994: PPUSH
8995: LD_INT 185
8997: PPUSH
8998: LD_INT 144
9000: PPUSH
9001: CALL_OW 111
// if GetControl ( veh ) = control_manual and not hasCamera and GetClass ( IsDrivenBy ( veh ) ) = 2 then
9005: LD_VAR 0 4
9009: PPUSH
9010: CALL_OW 263
9014: PUSH
9015: LD_INT 1
9017: EQUAL
9018: IFFALSE 9027
9020: PUSH
9021: LD_VAR 0 8
9025: NOT
9026: AND
9027: IFFALSE 9049
9029: PUSH
9030: LD_VAR 0 4
9034: PPUSH
9035: CALL_OW 311
9039: PPUSH
9040: CALL_OW 257
9044: PUSH
9045: LD_INT 2
9047: EQUAL
9048: AND
9049: IFFALSE 9154
// begin hasCamera := true ;
9051: LD_ADDR_VAR 0 8
9055: PUSH
9056: LD_INT 1
9058: ST_TO_ADDR
// driver := IsDrivenBy ( veh ) ;
9059: LD_ADDR_VAR 0 9
9063: PUSH
9064: LD_VAR 0 4
9068: PPUSH
9069: CALL_OW 311
9073: ST_TO_ADDR
// AddComMoveXY ( veh , 177 , 138 ) ;
9074: LD_VAR 0 4
9078: PPUSH
9079: LD_INT 177
9081: PPUSH
9082: LD_INT 138
9084: PPUSH
9085: CALL_OW 171
// AddComExitVehicle ( driver ) ;
9089: LD_VAR 0 9
9093: PPUSH
9094: CALL_OW 181
// AddComHiddenCamera ( driver , 190 , 150 ) ;
9098: LD_VAR 0 9
9102: PPUSH
9103: LD_INT 190
9105: PPUSH
9106: LD_INT 150
9108: PPUSH
9109: CALL_OW 217
// AddComEnterUnit ( driver , veh ) ;
9113: LD_VAR 0 9
9117: PPUSH
9118: LD_VAR 0 4
9122: PPUSH
9123: CALL_OW 180
// AddComMoveXY ( driver , 170 , 103 ) ;
9127: LD_VAR 0 9
9131: PPUSH
9132: LD_INT 170
9134: PPUSH
9135: LD_INT 103
9137: PPUSH
9138: CALL_OW 171
// CenterOnXY ( 190 , 150 ) ;
9142: LD_INT 190
9144: PPUSH
9145: LD_INT 150
9147: PPUSH
9148: CALL_OW 84
// end else
9152: GO 9196
// begin AddComWait ( veh , 0 0$2 ) ;
9154: LD_VAR 0 4
9158: PPUSH
9159: LD_INT 70
9161: PPUSH
9162: CALL_OW 202
// AddComMoveXY ( veh , 179 , 129 ) ;
9166: LD_VAR 0 4
9170: PPUSH
9171: LD_INT 179
9173: PPUSH
9174: LD_INT 129
9176: PPUSH
9177: CALL_OW 171
// AddComMoveXY ( veh , 170 , 103 ) ;
9181: LD_VAR 0 4
9185: PPUSH
9186: LD_INT 170
9188: PPUSH
9189: LD_INT 103
9191: PPUSH
9192: CALL_OW 171
// end ; wait ( 0 0$2 ) ;
9196: LD_INT 70
9198: PPUSH
9199: CALL_OW 67
// end ;
9203: GO 8589
9205: POP
9206: POP
// end ; if tmp then
9207: LD_VAR 0 5
9211: IFFALSE 9367
// begin for i in tmp do
9213: LD_ADDR_VAR 0 2
9217: PUSH
9218: LD_VAR 0 5
9222: PUSH
9223: FOR_IN
9224: IFFALSE 9365
// begin SetDir ( i , 4 ) ;
9226: LD_VAR 0 2
9230: PPUSH
9231: LD_INT 4
9233: PPUSH
9234: CALL_OW 233
// repeat wait ( 1 ) ;
9238: LD_INT 1
9240: PPUSH
9241: CALL_OW 67
// until PlaceUnitArea ( i , startArea , false ) ;
9245: LD_VAR 0 2
9249: PPUSH
9250: LD_INT 1
9252: PPUSH
9253: LD_INT 0
9255: PPUSH
9256: CALL_OW 49
9260: IFFALSE 9238
// ComMoveXY ( i , 185 , 144 ) ;
9262: LD_VAR 0 2
9266: PPUSH
9267: LD_INT 185
9269: PPUSH
9270: LD_INT 144
9272: PPUSH
9273: CALL_OW 111
// if GetClass ( i ) = 2 and not hasCamera then
9277: LD_VAR 0 2
9281: PPUSH
9282: CALL_OW 257
9286: PUSH
9287: LD_INT 2
9289: EQUAL
9290: IFFALSE 9299
9292: PUSH
9293: LD_VAR 0 8
9297: NOT
9298: AND
9299: IFFALSE 9326
// begin hasCamera := true ;
9301: LD_ADDR_VAR 0 8
9305: PUSH
9306: LD_INT 1
9308: ST_TO_ADDR
// AddComHiddenCamera ( i , 190 , 150 ) ;
9309: LD_VAR 0 2
9313: PPUSH
9314: LD_INT 190
9316: PPUSH
9317: LD_INT 150
9319: PPUSH
9320: CALL_OW 217
// end else
9324: GO 9341
// AddComMoveXY ( i , 179 , 129 ) ;
9326: LD_VAR 0 2
9330: PPUSH
9331: LD_INT 179
9333: PPUSH
9334: LD_INT 129
9336: PPUSH
9337: CALL_OW 171
// AddComMoveXY ( i , 170 , 103 ) ;
9341: LD_VAR 0 2
9345: PPUSH
9346: LD_INT 170
9348: PPUSH
9349: LD_INT 103
9351: PPUSH
9352: CALL_OW 171
// wait ( 0 0$2 ) ;
9356: LD_INT 70
9358: PPUSH
9359: CALL_OW 67
// end ;
9363: GO 9223
9365: POP
9366: POP
// end ; if heikeApes then
9367: LD_EXP 28
9371: IFFALSE 9498
// begin counter := 0 ;
9373: LD_ADDR_VAR 0 10
9377: PUSH
9378: LD_INT 0
9380: ST_TO_ADDR
// for i in heikeApes do
9381: LD_ADDR_VAR 0 2
9385: PUSH
9386: LD_EXP 28
9390: PUSH
9391: FOR_IN
9392: IFFALSE 9496
// begin if counter > 2 then
9394: LD_VAR 0 10
9398: PUSH
9399: LD_INT 2
9401: GREATER
9402: IFFALSE 9406
// break ;
9404: GO 9496
// counter := Inc ( counter ) ;
9406: LD_ADDR_VAR 0 10
9410: PUSH
9411: LD_VAR 0 10
9415: PPUSH
9416: CALL 56410 0 1
9420: ST_TO_ADDR
// SetDir ( i , 4 ) ;
9421: LD_VAR 0 2
9425: PPUSH
9426: LD_INT 4
9428: PPUSH
9429: CALL_OW 233
// repeat wait ( 1 ) ;
9433: LD_INT 1
9435: PPUSH
9436: CALL_OW 67
// until PlaceUnitArea ( i , startArea , false ) ;
9440: LD_VAR 0 2
9444: PPUSH
9445: LD_INT 1
9447: PPUSH
9448: LD_INT 0
9450: PPUSH
9451: CALL_OW 49
9455: IFFALSE 9433
// ComMoveXY ( i , 185 , 144 ) ;
9457: LD_VAR 0 2
9461: PPUSH
9462: LD_INT 185
9464: PPUSH
9465: LD_INT 144
9467: PPUSH
9468: CALL_OW 111
// AddComMoveXY ( i , 170 , 103 ) ;
9472: LD_VAR 0 2
9476: PPUSH
9477: LD_INT 170
9479: PPUSH
9480: LD_INT 103
9482: PPUSH
9483: CALL_OW 171
// wait ( 0 0$2 ) ;
9487: LD_INT 70
9489: PPUSH
9490: CALL_OW 67
// end ;
9494: GO 9391
9496: POP
9497: POP
// end ; AddComMoveXY ( Heike , 163 , 89 ) ;
9498: LD_EXP 15
9502: PPUSH
9503: LD_INT 163
9505: PPUSH
9506: LD_INT 89
9508: PPUSH
9509: CALL_OW 171
// Say ( Heike , DH-Intro-1 ) ;
9513: LD_EXP 15
9517: PPUSH
9518: LD_STRING DH-Intro-1
9520: PPUSH
9521: CALL_OW 88
// CenterOnXY ( 175 , 117 ) ;
9525: LD_INT 175
9527: PPUSH
9528: LD_INT 117
9530: PPUSH
9531: CALL_OW 84
// if Markov then
9535: LD_EXP 22
9539: IFFALSE 10116
// begin Say ( Markov , DMar-Intro-2 ) ;
9541: LD_EXP 22
9545: PPUSH
9546: LD_STRING DMar-Intro-2
9548: PPUSH
9549: CALL_OW 88
// Say ( Markov , DMar-Intro-3 ) ;
9553: LD_EXP 22
9557: PPUSH
9558: LD_STRING DMar-Intro-3
9560: PPUSH
9561: CALL_OW 88
// wait ( 0 0$1 ) ;
9565: LD_INT 35
9567: PPUSH
9568: CALL_OW 67
// CenterOnUnits ( Heike ) ;
9572: LD_EXP 15
9576: PPUSH
9577: CALL_OW 85
// if Kurt then
9581: LD_EXP 25
9585: IFFALSE 9637
// begin if IsInUnit ( Kurt ) then
9587: LD_EXP 25
9591: PPUSH
9592: CALL_OW 310
9596: IFFALSE 9607
// ComExit ( Kurt ) ;
9598: LD_EXP 25
9602: PPUSH
9603: CALL 55435 0 1
// AddComMoveXY ( Kurt , 130 , 56 ) ;
9607: LD_EXP 25
9611: PPUSH
9612: LD_INT 130
9614: PPUSH
9615: LD_INT 56
9617: PPUSH
9618: CALL_OW 171
// AddComTurnXY ( Kurt , 129 , 56 ) ;
9622: LD_EXP 25
9626: PPUSH
9627: LD_INT 129
9629: PPUSH
9630: LD_INT 56
9632: PPUSH
9633: CALL_OW 178
// end ; if Kaia then
9637: LD_EXP 20
9641: IFFALSE 9821
// begin Say ( Kaia , DK-Intro-4 ) ;
9643: LD_EXP 20
9647: PPUSH
9648: LD_STRING DK-Intro-4
9650: PPUSH
9651: CALL_OW 88
// Say ( Markov , DMar-Intro-5 ) ;
9655: LD_EXP 22
9659: PPUSH
9660: LD_STRING DMar-Intro-5
9662: PPUSH
9663: CALL_OW 88
// Say ( Markov , DMar-Intro-6 ) ;
9667: LD_EXP 22
9671: PPUSH
9672: LD_STRING DMar-Intro-6
9674: PPUSH
9675: CALL_OW 88
// Say ( Olaf , DO-Intro-7 ) ;
9679: LD_EXP 24
9683: PPUSH
9684: LD_STRING DO-Intro-7
9686: PPUSH
9687: CALL_OW 88
// CenterOnXY ( 160 , 85 ) ;
9691: LD_INT 160
9693: PPUSH
9694: LD_INT 85
9696: PPUSH
9697: CALL_OW 84
// Say ( Markov , DMar-Intro-8 ) ;
9701: LD_EXP 22
9705: PPUSH
9706: LD_STRING DMar-Intro-8
9708: PPUSH
9709: CALL_OW 88
// Say ( Markov , DMar-Intro-9 ) ;
9713: LD_EXP 22
9717: PPUSH
9718: LD_STRING DMar-Intro-9
9720: PPUSH
9721: CALL_OW 88
// Say ( Markov , DMar-Intro-10 ) ;
9725: LD_EXP 22
9729: PPUSH
9730: LD_STRING DMar-Intro-10
9732: PPUSH
9733: CALL_OW 88
// Say ( Markov , DMar-Intro-11 ) ;
9737: LD_EXP 22
9741: PPUSH
9742: LD_STRING DMar-Intro-11
9744: PPUSH
9745: CALL_OW 88
// Say ( Givi , DG-Intro-12 ) ;
9749: LD_EXP 16
9753: PPUSH
9754: LD_STRING DG-Intro-12
9756: PPUSH
9757: CALL_OW 88
// Say ( Givi , DG-Intro-13 ) ;
9761: LD_EXP 16
9765: PPUSH
9766: LD_STRING DG-Intro-13
9768: PPUSH
9769: CALL_OW 88
// Say ( Givi , DG-Intro-14 ) ;
9773: LD_EXP 16
9777: PPUSH
9778: LD_STRING DG-Intro-14
9780: PPUSH
9781: CALL_OW 88
// Say ( Givi , DG-Intro-15 ) ;
9785: LD_EXP 16
9789: PPUSH
9790: LD_STRING DG-Intro-15
9792: PPUSH
9793: CALL_OW 88
// Say ( Heike , DH-Intro-16 ) ;
9797: LD_EXP 15
9801: PPUSH
9802: LD_STRING DH-Intro-16
9804: PPUSH
9805: CALL_OW 88
// Say ( Markov , DMar-Intro-17 ) ;
9809: LD_EXP 22
9813: PPUSH
9814: LD_STRING DMar-Intro-17
9816: PPUSH
9817: CALL_OW 88
// end ; if Kurt and Mike then
9821: LD_EXP 25
9825: IFFALSE 9833
9827: PUSH
9828: LD_EXP 17
9832: AND
9833: IFFALSE 10116
// begin CenterNowOnUnits ( Kurt ) ;
9835: LD_EXP 25
9839: PPUSH
9840: CALL_OW 87
// ComTurnUnit ( Kurt , Heike ) ;
9844: LD_EXP 25
9848: PPUSH
9849: LD_EXP 15
9853: PPUSH
9854: CALL_OW 119
// Say ( Kurt , DKs-Intro-18 ) ;
9858: LD_EXP 25
9862: PPUSH
9863: LD_STRING DKs-Intro-18
9865: PPUSH
9866: CALL_OW 88
// Say ( Kurt , DKs-Intro-19 ) ;
9870: LD_EXP 25
9874: PPUSH
9875: LD_STRING DKs-Intro-19
9877: PPUSH
9878: CALL_OW 88
// CenterNowOnUnits ( Mike ) ;
9882: LD_EXP 17
9886: PPUSH
9887: CALL_OW 87
// if IsInUnit ( Mike ) then
9891: LD_EXP 17
9895: PPUSH
9896: CALL_OW 310
9900: IFFALSE 9911
// ComExit ( Mike ) ;
9902: LD_EXP 17
9906: PPUSH
9907: CALL 55435 0 1
// AddComMoveXY ( Mike , 129 , 53 ) ;
9911: LD_EXP 17
9915: PPUSH
9916: LD_INT 129
9918: PPUSH
9919: LD_INT 53
9921: PPUSH
9922: CALL_OW 171
// AddComHold ( Mike ) ;
9926: LD_EXP 17
9930: PPUSH
9931: CALL_OW 200
// wait ( 0 0$2 ) ;
9935: LD_INT 70
9937: PPUSH
9938: CALL_OW 67
// Say ( Mike , DM-Intro-20 ) ;
9942: LD_EXP 17
9946: PPUSH
9947: LD_STRING DM-Intro-20
9949: PPUSH
9950: CALL_OW 88
// scoutActive := Query ( Scout ) ;
9954: LD_ADDR_EXP 3
9958: PUSH
9959: LD_STRING Scout
9961: PPUSH
9962: CALL_OW 97
9966: ST_TO_ADDR
// if scoutActive = 1 then
9967: LD_EXP 3
9971: PUSH
9972: LD_INT 1
9974: EQUAL
9975: IFFALSE 10072
// begin CenterNowOnUnits ( Kurt ) ;
9977: LD_EXP 25
9981: PPUSH
9982: CALL_OW 87
// Say ( Heike , DH-Intro-21 ) ;
9986: LD_EXP 15
9990: PPUSH
9991: LD_STRING DH-Intro-21
9993: PPUSH
9994: CALL_OW 88
// Say ( Mike , DM-Intro-22 ) ;
9998: LD_EXP 17
10002: PPUSH
10003: LD_STRING DM-Intro-22
10005: PPUSH
10006: CALL_OW 88
// Say ( Kurt , DKs-Intro-23 ) ;
10010: LD_EXP 25
10014: PPUSH
10015: LD_STRING DKs-Intro-23
10017: PPUSH
10018: CALL_OW 88
// SetSide ( Kurt , 5 ) ;
10022: LD_EXP 25
10026: PPUSH
10027: LD_INT 5
10029: PPUSH
10030: CALL_OW 235
// SetSide ( Mike , 5 ) ;
10034: LD_EXP 17
10038: PPUSH
10039: LD_INT 5
10041: PPUSH
10042: CALL_OW 235
// ComMoveXY ( [ Kurt , Mike ] , 104 , 66 ) ;
10046: LD_EXP 25
10050: PUSH
10051: LD_EXP 17
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PPUSH
10060: LD_INT 104
10062: PPUSH
10063: LD_INT 66
10065: PPUSH
10066: CALL_OW 111
// end else
10070: GO 10116
// begin scoutActive := 0 ;
10072: LD_ADDR_EXP 3
10076: PUSH
10077: LD_INT 0
10079: ST_TO_ADDR
// Say ( Heike , DH-Intro-a-21 ) ;
10080: LD_EXP 15
10084: PPUSH
10085: LD_STRING DH-Intro-a-21
10087: PPUSH
10088: CALL_OW 88
// Say ( Mike , DM-Intro-a-22 ) ;
10092: LD_EXP 17
10096: PPUSH
10097: LD_STRING DM-Intro-a-22
10099: PPUSH
10100: CALL_OW 88
// Say ( Kurt , DKs-Intro-a-23 ) ;
10104: LD_EXP 25
10108: PPUSH
10109: LD_STRING DKs-Intro-a-23
10111: PPUSH
10112: CALL_OW 88
// end ; end ; end ; Video ( false ) ;
10116: LD_INT 0
10118: PPUSH
10119: CALL 55009 0 1
// tick := 0 ;
10123: LD_ADDR_OWVAR 1
10127: PUSH
10128: LD_INT 0
10130: ST_TO_ADDR
// music_nat := music_auto ;
10131: LD_ADDR_OWVAR 71
10135: PUSH
10136: LD_INT 0
10138: ST_TO_ADDR
// music_class := music_auto ;
10139: LD_ADDR_OWVAR 72
10143: PUSH
10144: LD_INT 0
10146: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
10147: LD_STRING M1
10149: PPUSH
10150: CALL_OW 337
// wait ( 0 0$3 ) ;
10154: LD_INT 105
10156: PPUSH
10157: CALL_OW 67
// Say ( Heike , DH-Base-1 ) ;
10161: LD_EXP 15
10165: PPUSH
10166: LD_STRING DH-Base-1
10168: PPUSH
10169: CALL_OW 88
// if Kaia then
10173: LD_EXP 20
10177: IFFALSE 10287
// begin Say ( Kaia , DK-Base-2 ) ;
10179: LD_EXP 20
10183: PPUSH
10184: LD_STRING DK-Base-2
10186: PPUSH
10187: CALL_OW 88
// Say ( Heike , DH-Base-3 ) ;
10191: LD_EXP 15
10195: PPUSH
10196: LD_STRING DH-Base-3
10198: PPUSH
10199: CALL_OW 88
// if Aviradze then
10203: LD_EXP 26
10207: IFFALSE 10287
// begin Say ( Aviradze , DA-Base-4 ) ;
10209: LD_EXP 26
10213: PPUSH
10214: LD_STRING DA-Base-4
10216: PPUSH
10217: CALL_OW 88
// Say ( Kaia , DK-Base-5 ) ;
10221: LD_EXP 20
10225: PPUSH
10226: LD_STRING DK-Base-5
10228: PPUSH
10229: CALL_OW 88
// if Markov then
10233: LD_EXP 22
10237: IFFALSE 10287
// begin Say ( Markov , DMar-Base-6 ) ;
10239: LD_EXP 22
10243: PPUSH
10244: LD_STRING DMar-Base-6
10246: PPUSH
10247: CALL_OW 88
// Say ( Kaia , DK-Base-7 ) ;
10251: LD_EXP 20
10255: PPUSH
10256: LD_STRING DK-Base-7
10258: PPUSH
10259: CALL_OW 88
// Say ( Markov , DMar-Base-8 ) ;
10263: LD_EXP 22
10267: PPUSH
10268: LD_STRING DMar-Base-8
10270: PPUSH
10271: CALL_OW 88
// Say ( Markov , DMar-Base-9 ) ;
10275: LD_EXP 22
10279: PPUSH
10280: LD_STRING DMar-Base-9
10282: PPUSH
10283: CALL_OW 88
// end ; end ; end ; SaveForQuickRestart ;
10287: CALL_OW 22
// end ;
10291: LD_VAR 0 1
10295: RET
// every 0 0$1 trigger scoutSuccess do var i , tmp ;
10296: LD_EXP 5
10300: IFFALSE 11415
10302: GO 10304
10304: DISABLE
10305: LD_INT 0
10307: PPUSH
10308: PPUSH
// begin InGameOn ;
10309: CALL_OW 8
// ComTurnUnit ( [ Mike , Kurt ] , Heike ) ;
10313: LD_EXP 17
10317: PUSH
10318: LD_EXP 25
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: PPUSH
10327: LD_EXP 15
10331: PPUSH
10332: CALL_OW 119
// ComExit ( Heike ) ;
10336: LD_EXP 15
10340: PPUSH
10341: CALL 55435 0 1
// if IsOk ( Mike ) then
10345: LD_EXP 17
10349: PPUSH
10350: CALL_OW 302
10354: IFFALSE 10372
// AddComTurnUnit ( Heike , Mike ) else
10356: LD_EXP 15
10360: PPUSH
10361: LD_EXP 17
10365: PPUSH
10366: CALL_OW 179
10370: GO 10386
// AddComTurnUnit ( Heike , Kurt ) ;
10372: LD_EXP 15
10376: PPUSH
10377: LD_EXP 25
10381: PPUSH
10382: CALL_OW 179
// if IsOk ( Mike ) and IsOk ( Kurt ) then
10386: LD_EXP 17
10390: PPUSH
10391: CALL_OW 302
10395: IFFALSE 10408
10397: PUSH
10398: LD_EXP 25
10402: PPUSH
10403: CALL_OW 302
10407: AND
10408: IFFALSE 10659
// begin CenterNowOnUnits ( Mike ) ;
10410: LD_EXP 17
10414: PPUSH
10415: CALL_OW 87
// Say ( Mike , DM-Scout-1 ) ;
10419: LD_EXP 17
10423: PPUSH
10424: LD_STRING DM-Scout-1
10426: PPUSH
10427: CALL_OW 88
// Say ( Heike , DH-Scout-2 ) ;
10431: LD_EXP 15
10435: PPUSH
10436: LD_STRING DH-Scout-2
10438: PPUSH
10439: CALL_OW 88
// Say ( Kurt , DKs-Scout-3 ) ;
10443: LD_EXP 25
10447: PPUSH
10448: LD_STRING DKs-Scout-3
10450: PPUSH
10451: CALL_OW 88
// Say ( Heike , DH-Scout-4 ) ;
10455: LD_EXP 15
10459: PPUSH
10460: LD_STRING DH-Scout-4
10462: PPUSH
10463: CALL_OW 88
// Say ( Heike , DH-Scout-5 ) ;
10467: LD_EXP 15
10471: PPUSH
10472: LD_STRING DH-Scout-5
10474: PPUSH
10475: CALL_OW 88
// tmp := [ [ 72 , 122 ] , [ 89 , 131 ] , [ 99 , 139 ] , [ 100 , 148 ] ] ;
10479: LD_ADDR_VAR 0 2
10483: PUSH
10484: LD_INT 72
10486: PUSH
10487: LD_INT 122
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: LD_INT 89
10496: PUSH
10497: LD_INT 131
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PUSH
10504: LD_INT 99
10506: PUSH
10507: LD_INT 139
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: PUSH
10514: LD_INT 100
10516: PUSH
10517: LD_INT 148
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: ST_TO_ADDR
// for i in tmp do
10530: LD_ADDR_VAR 0 1
10534: PUSH
10535: LD_VAR 0 2
10539: PUSH
10540: FOR_IN
10541: IFFALSE 10599
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 2 , - 6 ) ;
10543: LD_VAR 0 1
10547: PUSH
10548: LD_INT 1
10550: ARRAY
10551: PPUSH
10552: LD_VAR 0 1
10556: PUSH
10557: LD_INT 2
10559: ARRAY
10560: PPUSH
10561: LD_INT 2
10563: PPUSH
10564: LD_INT 6
10566: NEG
10567: PPUSH
10568: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 2 ) ;
10572: LD_VAR 0 1
10576: PUSH
10577: LD_INT 1
10579: ARRAY
10580: PPUSH
10581: LD_VAR 0 1
10585: PUSH
10586: LD_INT 2
10588: ARRAY
10589: PPUSH
10590: LD_INT 2
10592: PPUSH
10593: CALL_OW 331
// end ;
10597: GO 10540
10599: POP
10600: POP
// CenterOnXY ( 83 , 132 ) ;
10601: LD_INT 83
10603: PPUSH
10604: LD_INT 132
10606: PPUSH
10607: CALL_OW 84
// Say ( Kurt , DKs-Scout-6 ) ;
10611: LD_EXP 25
10615: PPUSH
10616: LD_STRING DKs-Scout-6
10618: PPUSH
10619: CALL_OW 88
// Say ( Mike , DM-Scout-7 ) ;
10623: LD_EXP 17
10627: PPUSH
10628: LD_STRING DM-Scout-7
10630: PPUSH
10631: CALL_OW 88
// Say ( Mike , DM-Scout-8 ) ;
10635: LD_EXP 17
10639: PPUSH
10640: LD_STRING DM-Scout-8
10642: PPUSH
10643: CALL_OW 88
// Say ( Kurt , DKs-Scout-9 ) ;
10647: LD_EXP 25
10651: PPUSH
10652: LD_STRING DKs-Scout-9
10654: PPUSH
10655: CALL_OW 88
// end ; if IsDead ( Mike ) then
10659: LD_EXP 17
10663: PPUSH
10664: CALL_OW 301
10668: IFFALSE 10835
// begin CenterNowOnUnits ( Kurt ) ;
10670: LD_EXP 25
10674: PPUSH
10675: CALL_OW 87
// Say ( Kurt , DKs-Scout-b-1 ) ;
10679: LD_EXP 25
10683: PPUSH
10684: LD_STRING DKs-Scout-b-1
10686: PPUSH
10687: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-2 ) ;
10691: LD_EXP 25
10695: PPUSH
10696: LD_STRING DKs-Scout-b-2
10698: PPUSH
10699: CALL_OW 88
// if IsOk ( Givi ) then
10703: LD_EXP 16
10707: PPUSH
10708: CALL_OW 302
10712: IFFALSE 10787
// begin ComExit ( Givi ) ;
10714: LD_EXP 16
10718: PPUSH
10719: CALL 55435 0 1
// AddComTurnUnit ( Givi , Kurt ) ;
10723: LD_EXP 16
10727: PPUSH
10728: LD_EXP 25
10732: PPUSH
10733: CALL_OW 179
// Say ( Givi , DG-Scout-b-3 ) ;
10737: LD_EXP 16
10741: PPUSH
10742: LD_STRING DG-Scout-b-3
10744: PPUSH
10745: CALL_OW 88
// Say ( Givi , DG-Scout-b-4 ) ;
10749: LD_EXP 16
10753: PPUSH
10754: LD_STRING DG-Scout-b-4
10756: PPUSH
10757: CALL_OW 88
// Say ( Givi , DG-Scout-b-5 ) ;
10761: LD_EXP 16
10765: PPUSH
10766: LD_STRING DG-Scout-b-5
10768: PPUSH
10769: CALL_OW 88
// Say ( Heike , DH-Scout-b-6 ) ;
10773: LD_EXP 15
10777: PPUSH
10778: LD_STRING DH-Scout-b-6
10780: PPUSH
10781: CALL_OW 88
// end else
10785: GO 10799
// Say ( Heike , DH-Scout-a-4 ) ;
10787: LD_EXP 15
10791: PPUSH
10792: LD_STRING DH-Scout-a-4
10794: PPUSH
10795: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-7 ) ;
10799: LD_EXP 25
10803: PPUSH
10804: LD_STRING DKs-Scout-b-7
10806: PPUSH
10807: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-8 ) ;
10811: LD_EXP 25
10815: PPUSH
10816: LD_STRING DKs-Scout-b-8
10818: PPUSH
10819: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-9 ) ;
10823: LD_EXP 25
10827: PPUSH
10828: LD_STRING DKs-Scout-b-9
10830: PPUSH
10831: CALL_OW 88
// end ; if IsDead ( Kurt ) then
10835: LD_EXP 25
10839: PPUSH
10840: CALL_OW 301
10844: IFFALSE 11123
// begin CenterNowOnUnits ( Mike ) ;
10846: LD_EXP 17
10850: PPUSH
10851: CALL_OW 87
// Say ( Mike , DM-Scout-a-1 ) ;
10855: LD_EXP 17
10859: PPUSH
10860: LD_STRING DM-Scout-a-1
10862: PPUSH
10863: CALL_OW 88
// Say ( Mike , DM-Scout-a-2 ) ;
10867: LD_EXP 17
10871: PPUSH
10872: LD_STRING DM-Scout-a-2
10874: PPUSH
10875: CALL_OW 88
// if GetLives ( Mike ) < 1000 then
10879: LD_EXP 17
10883: PPUSH
10884: CALL_OW 256
10888: PUSH
10889: LD_INT 1000
10891: LESS
10892: IFFALSE 10908
// Say ( Heike , DH-Scout-a-3 ) else
10894: LD_EXP 15
10898: PPUSH
10899: LD_STRING DH-Scout-a-3
10901: PPUSH
10902: CALL_OW 88
10906: GO 10920
// Say ( Heike , DH-Scout-a-4 ) ;
10908: LD_EXP 15
10912: PPUSH
10913: LD_STRING DH-Scout-a-4
10915: PPUSH
10916: CALL_OW 88
// Say ( Mike , DM-Scout-a-5 ) ;
10920: LD_EXP 17
10924: PPUSH
10925: LD_STRING DM-Scout-a-5
10927: PPUSH
10928: CALL_OW 88
// if IsOk ( Kaia ) then
10932: LD_EXP 20
10936: PPUSH
10937: CALL_OW 302
10941: IFFALSE 11123
// begin ComExit ( Kaia ) ;
10943: LD_EXP 20
10947: PPUSH
10948: CALL 55435 0 1
// AddComMoveUnit ( Kaia , Mike ) ;
10952: LD_EXP 20
10956: PPUSH
10957: LD_EXP 17
10961: PPUSH
10962: CALL_OW 172
// wait ( 0 0$2 ) ;
10966: LD_INT 70
10968: PPUSH
10969: CALL_OW 67
// ComTurnUnit ( Kaia , Mike ) ;
10973: LD_EXP 20
10977: PPUSH
10978: LD_EXP 17
10982: PPUSH
10983: CALL_OW 119
// ComTurnUnit ( Mike , Kaia ) ;
10987: LD_EXP 17
10991: PPUSH
10992: LD_EXP 20
10996: PPUSH
10997: CALL_OW 119
// Say ( Kaia , DK-Scout-a-6 ) ;
11001: LD_EXP 20
11005: PPUSH
11006: LD_STRING DK-Scout-a-6
11008: PPUSH
11009: CALL_OW 88
// Say ( Mike , DM-Scout-a-7 ) ;
11013: LD_EXP 17
11017: PPUSH
11018: LD_STRING DM-Scout-a-7
11020: PPUSH
11021: CALL_OW 88
// Say ( Kaia , DK-Scout-a-8 ) ;
11025: LD_EXP 20
11029: PPUSH
11030: LD_STRING DK-Scout-a-8
11032: PPUSH
11033: CALL_OW 88
// Say ( Kaia , DK-Scout-a-9 ) ;
11037: LD_EXP 20
11041: PPUSH
11042: LD_STRING DK-Scout-a-9
11044: PPUSH
11045: CALL_OW 88
// Say ( Heike , DH-Scout-a-10 ) ;
11049: LD_EXP 15
11053: PPUSH
11054: LD_STRING DH-Scout-a-10
11056: PPUSH
11057: CALL_OW 88
// ComTurnUnit ( Mike , Heike ) ;
11061: LD_EXP 17
11065: PPUSH
11066: LD_EXP 15
11070: PPUSH
11071: CALL_OW 119
// Say ( Mike , DM-Scout-a-11 ) ;
11075: LD_EXP 17
11079: PPUSH
11080: LD_STRING DM-Scout-a-11
11082: PPUSH
11083: CALL_OW 88
// Say ( Mike , DM-Scout-a-12 ) ;
11087: LD_EXP 17
11091: PPUSH
11092: LD_STRING DM-Scout-a-12
11094: PPUSH
11095: CALL_OW 88
// Say ( Mike , DM-Scout-a-13 ) ;
11099: LD_EXP 17
11103: PPUSH
11104: LD_STRING DM-Scout-a-13
11106: PPUSH
11107: CALL_OW 88
// Say ( Mike , DM-Scout-a-14 ) ;
11111: LD_EXP 17
11115: PPUSH
11116: LD_STRING DM-Scout-a-14
11118: PPUSH
11119: CALL_OW 88
// end ; end ; if IsOk ( Givi ) then
11123: LD_EXP 16
11127: PPUSH
11128: CALL_OW 302
11132: IFFALSE 11160
// begin Say ( Givi , DG-Scout-10 ) ;
11134: LD_EXP 16
11138: PPUSH
11139: LD_STRING DG-Scout-10
11141: PPUSH
11142: CALL_OW 88
// Say ( Givi , DG-Scout-11 ) ;
11146: LD_EXP 16
11150: PPUSH
11151: LD_STRING DG-Scout-11
11153: PPUSH
11154: CALL_OW 88
// end else
11158: GO 11217
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-10 ) then
11160: LD_EXP 27
11164: PPUSH
11165: LD_INT 26
11167: PUSH
11168: LD_INT 1
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: PPUSH
11175: CALL_OW 72
11179: PPUSH
11180: LD_STRING DArm-Scout-10
11182: PPUSH
11183: CALL 224 0 2
11187: NOT
11188: IFFALSE 11217
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-10 ) ;
11190: LD_EXP 27
11194: PPUSH
11195: LD_INT 26
11197: PUSH
11198: LD_INT 2
11200: PUSH
11201: EMPTY
11202: LIST
11203: LIST
11204: PPUSH
11205: CALL_OW 72
11209: PPUSH
11210: LD_STRING DArf-Scout-10
11212: PPUSH
11213: CALL 224 0 2
// Say ( Heike , DH-Scout-12 ) ;
11217: LD_EXP 15
11221: PPUSH
11222: LD_STRING DH-Scout-12
11224: PPUSH
11225: CALL_OW 88
// Say ( Heike , DH-Scout-13 ) ;
11229: LD_EXP 15
11233: PPUSH
11234: LD_STRING DH-Scout-13
11236: PPUSH
11237: CALL_OW 88
// if IsOk ( Mike ) and IsOk ( Kurt ) then
11241: LD_EXP 17
11245: PPUSH
11246: CALL_OW 302
11250: IFFALSE 11263
11252: PUSH
11253: LD_EXP 25
11257: PPUSH
11258: CALL_OW 302
11262: AND
11263: IFFALSE 11291
// begin Say ( Mike , DM-Scout-14 ) ;
11265: LD_EXP 17
11269: PPUSH
11270: LD_STRING DM-Scout-14
11272: PPUSH
11273: CALL_OW 88
// Say ( Heike , DH-Scout-c-14 ) ;
11277: LD_EXP 15
11281: PPUSH
11282: LD_STRING DH-Scout-c-14
11284: PPUSH
11285: CALL_OW 88
// end else
11289: GO 11384
// if IsOk ( Mike ) xor IsOk ( Kurt ) then
11291: LD_EXP 17
11295: PPUSH
11296: CALL_OW 302
11300: PUSH
11301: LD_EXP 25
11305: PPUSH
11306: CALL_OW 302
11310: XOR
11311: IFFALSE 11372
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-a-14 ) then
11313: LD_EXP 27
11317: PPUSH
11318: LD_INT 26
11320: PUSH
11321: LD_INT 1
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PPUSH
11328: CALL_OW 72
11332: PPUSH
11333: LD_STRING DArm-Scout-a-14
11335: PPUSH
11336: CALL 224 0 2
11340: NOT
11341: IFFALSE 11370
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-a-14 ) ;
11343: LD_EXP 27
11347: PPUSH
11348: LD_INT 26
11350: PUSH
11351: LD_INT 2
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: PPUSH
11358: CALL_OW 72
11362: PPUSH
11363: LD_STRING DArf-Scout-a-14
11365: PPUSH
11366: CALL 224 0 2
// end else
11370: GO 11384
// Say ( Heike , DH-Scout-d-14 ) ;
11372: LD_EXP 15
11376: PPUSH
11377: LD_STRING DH-Scout-d-14
11379: PPUSH
11380: CALL_OW 88
// Say ( Heike , DH-Scout-15 ) ;
11384: LD_EXP 15
11388: PPUSH
11389: LD_STRING DH-Scout-15
11391: PPUSH
11392: CALL_OW 88
// InGameOff ;
11396: CALL_OW 9
// wait ( 1 1$00 ) ;
11400: LD_INT 2100
11402: PPUSH
11403: CALL_OW 67
// usAttacksAllowed := true ;
11407: LD_ADDR_EXP 6
11411: PUSH
11412: LD_INT 1
11414: ST_TO_ADDR
// end ;
11415: PPOPN 2
11417: END
// every 0 0$1 trigger scoutFailed do var spoken ;
11418: LD_EXP 4
11422: IFFALSE 11599
11424: GO 11426
11426: DISABLE
11427: LD_INT 0
11429: PPUSH
// begin spoken := true ;
11430: LD_ADDR_VAR 0 1
11434: PUSH
11435: LD_INT 1
11437: ST_TO_ADDR
// wait ( 0 0$30 ) ;
11438: LD_INT 1050
11440: PPUSH
11441: CALL_OW 67
// Say ( Heike , DH-Scout-c-1 ) ;
11445: LD_EXP 15
11449: PPUSH
11450: LD_STRING DH-Scout-c-1
11452: PPUSH
11453: CALL_OW 88
// if not IsOk ( Givi ) then
11457: LD_EXP 16
11461: PPUSH
11462: CALL_OW 302
11466: NOT
11467: IFFALSE 11471
// exit ;
11469: GO 11599
// if IsOk ( Givi ) then
11471: LD_EXP 16
11475: PPUSH
11476: CALL_OW 302
11480: IFFALSE 11508
// begin Say ( Givi , DG-Scout-c-2 ) ;
11482: LD_EXP 16
11486: PPUSH
11487: LD_STRING DG-Scout-c-2
11489: PPUSH
11490: CALL_OW 88
// Say ( Givi , DG-Scout-c-3 ) ;
11494: LD_EXP 16
11498: PPUSH
11499: LD_STRING DG-Scout-c-3
11501: PPUSH
11502: CALL_OW 88
// end else
11506: GO 11581
// begin spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-c-3 ) ;
11508: LD_ADDR_VAR 0 1
11512: PUSH
11513: LD_EXP 27
11517: PPUSH
11518: LD_INT 26
11520: PUSH
11521: LD_INT 1
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PPUSH
11528: CALL_OW 72
11532: PPUSH
11533: LD_STRING DArm-Scout-c-3
11535: PPUSH
11536: CALL 224 0 2
11540: ST_TO_ADDR
// if not spoken then
11541: LD_VAR 0 1
11545: NOT
11546: IFFALSE 11581
// spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-c-3 ) ;
11548: LD_ADDR_VAR 0 1
11552: PUSH
11553: LD_EXP 27
11557: PPUSH
11558: LD_INT 26
11560: PUSH
11561: LD_INT 2
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: PPUSH
11568: CALL_OW 72
11572: PPUSH
11573: LD_STRING DArf-Scout-c-3
11575: PPUSH
11576: CALL 224 0 2
11580: ST_TO_ADDR
// ; end ; if spoken then
11581: LD_VAR 0 1
11585: IFFALSE 11599
// Say ( Heike , DH-Scout-c-4 ) ;
11587: LD_EXP 15
11591: PPUSH
11592: LD_STRING DH-Scout-c-4
11594: PPUSH
11595: CALL_OW 88
// end ;
11599: PPOPN 1
11601: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_half ] ] ) and IsOk ( Aviradze ) do
11602: LD_INT 22
11604: PUSH
11605: LD_INT 2
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: PUSH
11612: LD_INT 30
11614: PUSH
11615: LD_INT 7
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PPUSH
11626: CALL_OW 69
11630: IFFALSE 11643
11632: PUSH
11633: LD_EXP 26
11637: PPUSH
11638: CALL_OW 302
11642: AND
11643: IFFALSE 11728
11645: GO 11647
11647: DISABLE
// begin DialogueOn ;
11648: CALL_OW 6
// Say ( Aviradze , DA-Lab-1 ) ;
11652: LD_EXP 26
11656: PPUSH
11657: LD_STRING DA-Lab-1
11659: PPUSH
11660: CALL_OW 88
// Say ( Heike , DH-Lab-2 ) ;
11664: LD_EXP 15
11668: PPUSH
11669: LD_STRING DH-Lab-2
11671: PPUSH
11672: CALL_OW 88
// Say ( Aviradze , DA-Lab-3 ) ;
11676: LD_EXP 26
11680: PPUSH
11681: LD_STRING DA-Lab-3
11683: PPUSH
11684: CALL_OW 88
// Say ( Aviradze , DA-Lab-4 ) ;
11688: LD_EXP 26
11692: PPUSH
11693: LD_STRING DA-Lab-4
11695: PPUSH
11696: CALL_OW 88
// Say ( Aviradze , DA-Lab-5 ) ;
11700: LD_EXP 26
11704: PPUSH
11705: LD_STRING DA-Lab-5
11707: PPUSH
11708: CALL_OW 88
// Say ( Heike , DH-Lab-6 ) ;
11712: LD_EXP 15
11716: PPUSH
11717: LD_STRING DH-Lab-6
11719: PPUSH
11720: CALL_OW 88
// DialogueOff ;
11724: CALL_OW 7
// end ;
11728: END
// every 0 0$1 trigger GetTech ( tech_MatDet , 2 ) = state_researched and IsOk ( Givi ) do
11729: LD_INT 7
11731: PPUSH
11732: LD_INT 2
11734: PPUSH
11735: CALL_OW 321
11739: PUSH
11740: LD_INT 2
11742: EQUAL
11743: IFFALSE 11756
11745: PUSH
11746: LD_EXP 16
11750: PPUSH
11751: CALL_OW 302
11755: AND
11756: IFFALSE 11925
11758: GO 11760
11760: DISABLE
// begin DialogueOn ;
11761: CALL_OW 6
// Say ( Givi , DG-Opt-1 ) ;
11765: LD_EXP 16
11769: PPUSH
11770: LD_STRING DG-Opt-1
11772: PPUSH
11773: CALL_OW 88
// Say ( Heike , DH-Opt-2 ) ;
11777: LD_EXP 15
11781: PPUSH
11782: LD_STRING DH-Opt-2
11784: PPUSH
11785: CALL_OW 88
// Say ( Givi , DG-Opt-3 ) ;
11789: LD_EXP 16
11793: PPUSH
11794: LD_STRING DG-Opt-3
11796: PPUSH
11797: CALL_OW 88
// Say ( Givi , DG-Opt-4 ) ;
11801: LD_EXP 16
11805: PPUSH
11806: LD_STRING DG-Opt-4
11808: PPUSH
11809: CALL_OW 88
// Say ( Heike , DH-Opt-5 ) ;
11813: LD_EXP 15
11817: PPUSH
11818: LD_STRING DH-Opt-5
11820: PPUSH
11821: CALL_OW 88
// Say ( Givi , DG-Opt-6 ) ;
11825: LD_EXP 16
11829: PPUSH
11830: LD_STRING DG-Opt-6
11832: PPUSH
11833: CALL_OW 88
// Say ( Heike , DH-Opt-7 ) ;
11837: LD_EXP 15
11841: PPUSH
11842: LD_STRING DH-Opt-7
11844: PPUSH
11845: CALL_OW 88
// Say ( Givi , DG-Opt-8 ) ;
11849: LD_EXP 16
11853: PPUSH
11854: LD_STRING DG-Opt-8
11856: PPUSH
11857: CALL_OW 88
// Say ( Givi , DG-Opt-9 ) ;
11861: LD_EXP 16
11865: PPUSH
11866: LD_STRING DG-Opt-9
11868: PPUSH
11869: CALL_OW 88
// Say ( Heike , DH-Opt-10 ) ;
11873: LD_EXP 15
11877: PPUSH
11878: LD_STRING DH-Opt-10
11880: PPUSH
11881: CALL_OW 88
// Say ( Givi , DG-Opt-11 ) ;
11885: LD_EXP 16
11889: PPUSH
11890: LD_STRING DG-Opt-11
11892: PPUSH
11893: CALL_OW 88
// Say ( Givi , DG-Opt-12 ) ;
11897: LD_EXP 16
11901: PPUSH
11902: LD_STRING DG-Opt-12
11904: PPUSH
11905: CALL_OW 88
// Say ( Heike , DH-Opt-13 ) ;
11909: LD_EXP 15
11913: PPUSH
11914: LD_STRING DH-Opt-13
11916: PPUSH
11917: CALL_OW 88
// DialogueOff ;
11921: CALL_OW 7
// end ;
11925: END
// every 0 0$2 trigger UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) do
11926: LD_EXP 27
11930: PPUSH
11931: LD_INT 95
11933: PUSH
11934: LD_INT 7
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: PUSH
11941: LD_INT 23
11943: PUSH
11944: LD_INT 2
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PUSH
11951: LD_INT 26
11953: PUSH
11954: LD_INT 1
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: LIST
11965: PPUSH
11966: CALL_OW 72
11970: IFFALSE 12031
11972: GO 11974
11974: DISABLE
// begin Say ( UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-River ) ;
11975: LD_EXP 27
11979: PPUSH
11980: LD_INT 95
11982: PUSH
11983: LD_INT 7
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PUSH
11990: LD_INT 23
11992: PUSH
11993: LD_INT 2
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PUSH
12000: LD_INT 26
12002: PUSH
12003: LD_INT 1
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: LIST
12014: PPUSH
12015: CALL_OW 72
12019: PUSH
12020: LD_INT 1
12022: ARRAY
12023: PPUSH
12024: LD_STRING DArm-River
12026: PPUSH
12027: CALL_OW 88
// end ;
12031: END
// every 0 0$1 trigger GetTech ( tech_rocket , 2 ) = state_researched and IsOk ( Ibrahim ) do
12032: LD_INT 40
12034: PPUSH
12035: LD_INT 2
12037: PPUSH
12038: CALL_OW 321
12042: PUSH
12043: LD_INT 2
12045: EQUAL
12046: IFFALSE 12059
12048: PUSH
12049: LD_EXP 18
12053: PPUSH
12054: CALL_OW 302
12058: AND
12059: IFFALSE 12313
12061: GO 12063
12063: DISABLE
// begin DialogueOn ;
12064: CALL_OW 6
// Say ( Ibrahim , DI-Roc-1 ) ;
12068: LD_EXP 18
12072: PPUSH
12073: LD_STRING DI-Roc-1
12075: PPUSH
12076: CALL_OW 88
// Say ( Heike , DH-Roc-2 ) ;
12080: LD_EXP 15
12084: PPUSH
12085: LD_STRING DH-Roc-2
12087: PPUSH
12088: CALL_OW 88
// Say ( Ibrahim , DI-Roc-3 ) ;
12092: LD_EXP 18
12096: PPUSH
12097: LD_STRING DI-Roc-3
12099: PPUSH
12100: CALL_OW 88
// Say ( Ibrahim , DI-Roc-4 ) ;
12104: LD_EXP 18
12108: PPUSH
12109: LD_STRING DI-Roc-4
12111: PPUSH
12112: CALL_OW 88
// Say ( Kaia , DK-Roc-5 ) ;
12116: LD_EXP 20
12120: PPUSH
12121: LD_STRING DK-Roc-5
12123: PPUSH
12124: CALL_OW 88
// Say ( Kaia , DK-Roc-6 ) ;
12128: LD_EXP 20
12132: PPUSH
12133: LD_STRING DK-Roc-6
12135: PPUSH
12136: CALL_OW 88
// Say ( Givi , DG-Roc-7 ) ;
12140: LD_EXP 16
12144: PPUSH
12145: LD_STRING DG-Roc-7
12147: PPUSH
12148: CALL_OW 88
// Say ( Givi , DG-Roc-8 ) ;
12152: LD_EXP 16
12156: PPUSH
12157: LD_STRING DG-Roc-8
12159: PPUSH
12160: CALL_OW 88
// if IsOk ( Markov ) and IsOk ( Kaia ) and IsOk ( Givi ) then
12164: LD_EXP 22
12168: PPUSH
12169: CALL_OW 302
12173: IFFALSE 12186
12175: PUSH
12176: LD_EXP 20
12180: PPUSH
12181: CALL_OW 302
12185: AND
12186: IFFALSE 12199
12188: PUSH
12189: LD_EXP 16
12193: PPUSH
12194: CALL_OW 302
12198: AND
12199: IFFALSE 12309
// begin Say ( Markov , DMar-Roc-9 ) ;
12201: LD_EXP 22
12205: PPUSH
12206: LD_STRING DMar-Roc-9
12208: PPUSH
12209: CALL_OW 88
// Say ( Markov , DMar-Roc-10 ) ;
12213: LD_EXP 22
12217: PPUSH
12218: LD_STRING DMar-Roc-10
12220: PPUSH
12221: CALL_OW 88
// Say ( Kaia , DK-Roc-11 ) ;
12225: LD_EXP 20
12229: PPUSH
12230: LD_STRING DK-Roc-11
12232: PPUSH
12233: CALL_OW 88
// Say ( Markov , DMar-Roc-12 ) ;
12237: LD_EXP 22
12241: PPUSH
12242: LD_STRING DMar-Roc-12
12244: PPUSH
12245: CALL_OW 88
// Say ( Kaia , DK-Roc-13 ) ;
12249: LD_EXP 20
12253: PPUSH
12254: LD_STRING DK-Roc-13
12256: PPUSH
12257: CALL_OW 88
// Say ( Givi , DG-Roc-14 ) ;
12261: LD_EXP 16
12265: PPUSH
12266: LD_STRING DG-Roc-14
12268: PPUSH
12269: CALL_OW 88
// Say ( Markov , DMar-Roc-15 ) ;
12273: LD_EXP 22
12277: PPUSH
12278: LD_STRING DMar-Roc-15
12280: PPUSH
12281: CALL_OW 88
// Say ( Markov , DMar-Roc-16 ) ;
12285: LD_EXP 22
12289: PPUSH
12290: LD_STRING DMar-Roc-16
12292: PPUSH
12293: CALL_OW 88
// Say ( Kaia , DK-Roc-17 ) ;
12297: LD_EXP 20
12301: PPUSH
12302: LD_STRING DK-Roc-17
12304: PPUSH
12305: CALL_OW 88
// end ; DialogueOff ;
12309: CALL_OW 7
// end ;
12313: END
// every 0 0$3 trigger GetLives ( usCommander ) < 1000 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] ] ) < 6 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) < 2 do var i , hurts , sci ;
12314: LD_EXP 30
12318: PPUSH
12319: CALL_OW 256
12323: PUSH
12324: LD_INT 1000
12326: LESS
12327: IFTRUE 12374
12329: PUSH
12330: LD_INT 22
12332: PUSH
12333: LD_INT 1
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: PUSH
12340: LD_INT 21
12342: PUSH
12343: LD_INT 1
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PUSH
12350: LD_INT 23
12352: PUSH
12353: LD_INT 1
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: LIST
12364: PPUSH
12365: CALL_OW 69
12369: PUSH
12370: LD_INT 6
12372: LESS
12373: OR
12374: IFTRUE 12421
12376: PUSH
12377: LD_INT 22
12379: PUSH
12380: LD_INT 1
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: PUSH
12387: LD_INT 21
12389: PUSH
12390: LD_INT 1
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: PUSH
12397: LD_INT 25
12399: PUSH
12400: LD_INT 1
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: LIST
12411: PPUSH
12412: CALL_OW 69
12416: PUSH
12417: LD_INT 2
12419: LESS
12420: OR
12421: IFFALSE 13753
12423: GO 12425
12425: DISABLE
12426: LD_INT 0
12428: PPUSH
12429: PPUSH
12430: PPUSH
// begin usAttacksAllowed := false ;
12431: LD_ADDR_EXP 6
12435: PUSH
12436: LD_INT 0
12438: ST_TO_ADDR
// usSurrender := true ;
12439: LD_ADDR_EXP 7
12443: PUSH
12444: LD_INT 1
12446: ST_TO_ADDR
// SetAttitude ( 1 , 2 , att_friend , true ) ;
12447: LD_INT 1
12449: PPUSH
12450: LD_INT 2
12452: PPUSH
12453: LD_INT 1
12455: PPUSH
12456: LD_INT 1
12458: PPUSH
12459: CALL_OW 80
// if IsDead ( usCommander ) then
12463: LD_EXP 30
12467: PPUSH
12468: CALL_OW 301
12472: IFFALSE 12476
// exit ;
12474: GO 13753
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_hastask ] ] ) do
12476: LD_ADDR_VAR 0 1
12480: PUSH
12481: LD_INT 22
12483: PUSH
12484: LD_INT 2
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PUSH
12491: LD_INT 2
12493: PUSH
12494: LD_INT 21
12496: PUSH
12497: LD_INT 1
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: PUSH
12504: LD_INT 21
12506: PUSH
12507: LD_INT 2
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: LIST
12518: PUSH
12519: LD_INT 60
12521: PUSH
12522: EMPTY
12523: LIST
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: LIST
12529: PPUSH
12530: CALL_OW 69
12534: PUSH
12535: FOR_IN
12536: IFFALSE 12549
// ComStop ( i ) ;
12538: LD_VAR 0 1
12542: PPUSH
12543: CALL_OW 141
12547: GO 12535
12549: POP
12550: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_ok ] ] , [ f_type , unit_human ] ] ) do
12551: LD_ADDR_VAR 0 1
12555: PUSH
12556: LD_INT 22
12558: PUSH
12559: LD_INT 2
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: PUSH
12566: LD_INT 3
12568: PUSH
12569: LD_INT 50
12571: PUSH
12572: EMPTY
12573: LIST
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PUSH
12579: LD_INT 21
12581: PUSH
12582: LD_INT 1
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: LIST
12593: PPUSH
12594: CALL_OW 69
12598: PUSH
12599: FOR_IN
12600: IFFALSE 12616
// SetLives ( i , 251 ) ;
12602: LD_VAR 0 1
12606: PPUSH
12607: LD_INT 251
12609: PPUSH
12610: CALL_OW 234
12614: GO 12599
12616: POP
12617: POP
// Video ( true ) ;
12618: LD_INT 1
12620: PPUSH
12621: CALL 55009 0 1
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
12625: LD_ADDR_VAR 0 1
12629: PUSH
12630: LD_INT 22
12632: PUSH
12633: LD_INT 2
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PPUSH
12640: CALL_OW 69
12644: PUSH
12645: FOR_IN
12646: IFFALSE 12659
// ComStop ( i ) ;
12648: LD_VAR 0 1
12652: PPUSH
12653: CALL_OW 141
12657: GO 12645
12659: POP
12660: POP
// if not IsOk ( usCommander ) then
12661: LD_EXP 30
12665: PPUSH
12666: CALL_OW 302
12670: NOT
12671: IFFALSE 12685
// SetLives ( usCommander , 1000 ) ;
12673: LD_EXP 30
12677: PPUSH
12678: LD_INT 1000
12680: PPUSH
12681: CALL_OW 234
// InGameOn ;
12685: CALL_OW 8
// ComExit ( usCommander ) ;
12689: LD_EXP 30
12693: PPUSH
12694: CALL 55435 0 1
// AddComMoveXY ( usCommander , 81 , 143 ) ;
12698: LD_EXP 30
12702: PPUSH
12703: LD_INT 81
12705: PPUSH
12706: LD_INT 143
12708: PPUSH
12709: CALL_OW 171
// AddComTurnXY ( usCommander , 81 , 139 ) ;
12713: LD_EXP 30
12717: PPUSH
12718: LD_INT 81
12720: PPUSH
12721: LD_INT 139
12723: PPUSH
12724: CALL_OW 178
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
12728: LD_ADDR_VAR 0 1
12732: PUSH
12733: LD_INT 22
12735: PUSH
12736: LD_INT 2
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: PPUSH
12743: CALL_OW 69
12747: PUSH
12748: FOR_IN
12749: IFFALSE 12762
// ComStop ( i ) ;
12751: LD_VAR 0 1
12755: PPUSH
12756: CALL_OW 141
12760: GO 12748
12762: POP
12763: POP
// PlaceSeeing ( 81 , 144 , 2 , - 10 ) ;
12764: LD_INT 81
12766: PPUSH
12767: LD_INT 144
12769: PPUSH
12770: LD_INT 2
12772: PPUSH
12773: LD_INT 10
12775: NEG
12776: PPUSH
12777: CALL_OW 330
// CenterNowOnUnits ( usCommander ) ;
12781: LD_EXP 30
12785: PPUSH
12786: CALL_OW 87
// wait ( 0 0$2 ) ;
12790: LD_INT 70
12792: PPUSH
12793: CALL_OW 67
// Say ( usCommander , DCa-Surrender-1 ) ;
12797: LD_EXP 30
12801: PPUSH
12802: LD_STRING DCa-Surrender-1
12804: PPUSH
12805: CALL_OW 88
// Say ( Heike , DH-Surrender-2 ) ;
12809: LD_EXP 15
12813: PPUSH
12814: LD_STRING DH-Surrender-2
12816: PPUSH
12817: CALL_OW 88
// if GetType ( IsInUnit ( Heike ) ) = unit_building then
12821: LD_EXP 15
12825: PPUSH
12826: CALL_OW 310
12830: PPUSH
12831: CALL_OW 247
12835: PUSH
12836: LD_INT 3
12838: EQUAL
12839: IFFALSE 12857
// begin ComExit ( Heike ) ;
12841: LD_EXP 15
12845: PPUSH
12846: CALL 55435 0 1
// wait ( 3 ) ;
12850: LD_INT 3
12852: PPUSH
12853: CALL_OW 67
// end ; ComMoveXY ( Heike , 82 , 133 ) ;
12857: LD_EXP 15
12861: PPUSH
12862: LD_INT 82
12864: PPUSH
12865: LD_INT 133
12867: PPUSH
12868: CALL_OW 111
// AddComTurnUnit ( Heike , usCommander ) ;
12872: LD_EXP 15
12876: PPUSH
12877: LD_EXP 30
12881: PPUSH
12882: CALL_OW 179
// wait ( 0 0$3 ) ;
12886: LD_INT 105
12888: PPUSH
12889: CALL_OW 67
// Say ( Heike , DH-Surrender-3 ) ;
12893: LD_EXP 15
12897: PPUSH
12898: LD_STRING DH-Surrender-3
12900: PPUSH
12901: CALL_OW 88
// Say ( Heike , DH-Surrender-4 ) ;
12905: LD_EXP 15
12909: PPUSH
12910: LD_STRING DH-Surrender-4
12912: PPUSH
12913: CALL_OW 88
// RemoveSeeing ( 81 , 144 , 2 ) ;
12917: LD_INT 81
12919: PPUSH
12920: LD_INT 144
12922: PPUSH
12923: LD_INT 2
12925: PPUSH
12926: CALL_OW 331
// ChangeSideFog ( 1 , 2 ) ;
12930: LD_INT 1
12932: PPUSH
12933: LD_INT 2
12935: PPUSH
12936: CALL_OW 343
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_inside ] ] ) do
12940: LD_ADDR_VAR 0 1
12944: PUSH
12945: LD_INT 22
12947: PUSH
12948: LD_INT 1
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: PUSH
12955: LD_INT 23
12957: PUSH
12958: LD_INT 1
12960: PUSH
12961: EMPTY
12962: LIST
12963: LIST
12964: PUSH
12965: LD_INT 54
12967: PUSH
12968: EMPTY
12969: LIST
12970: PUSH
12971: EMPTY
12972: LIST
12973: LIST
12974: LIST
12975: PPUSH
12976: CALL_OW 69
12980: PUSH
12981: FOR_IN
12982: IFFALSE 12995
// ComExit ( i ) ;
12984: LD_VAR 0 1
12988: PPUSH
12989: CALL 55435 0 1
12993: GO 12981
12995: POP
12996: POP
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
12997: LD_ADDR_VAR 0 3
13001: PUSH
13002: LD_INT 22
13004: PUSH
13005: LD_INT 1
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: PUSH
13012: LD_INT 25
13014: PUSH
13015: LD_INT 4
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: PPUSH
13026: CALL_OW 69
13030: ST_TO_ADDR
// hurts := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
13031: LD_ADDR_VAR 0 2
13035: PUSH
13036: LD_INT 22
13038: PUSH
13039: LD_INT 1
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PUSH
13046: LD_INT 3
13048: PUSH
13049: LD_INT 50
13051: PUSH
13052: EMPTY
13053: LIST
13054: PUSH
13055: EMPTY
13056: LIST
13057: LIST
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: PPUSH
13063: CALL_OW 69
13067: ST_TO_ADDR
// if sci and hurts then
13068: LD_VAR 0 3
13072: IFFALSE 13080
13074: PUSH
13075: LD_VAR 0 2
13079: AND
13080: IFFALSE 13142
// begin for i := 1 to hurts do
13082: LD_ADDR_VAR 0 1
13086: PUSH
13087: DOUBLE
13088: LD_INT 1
13090: DEC
13091: ST_TO_ADDR
13092: LD_VAR 0 2
13096: PUSH
13097: FOR_TO
13098: IFFALSE 13140
// if i <= sci then
13100: LD_VAR 0 1
13104: PUSH
13105: LD_VAR 0 3
13109: LESSEQUAL
13110: IFFALSE 13138
// AddComHeal ( sci [ i ] , hurts [ i ] ) ;
13112: LD_VAR 0 3
13116: PUSH
13117: LD_VAR 0 1
13121: ARRAY
13122: PPUSH
13123: LD_VAR 0 2
13127: PUSH
13128: LD_VAR 0 1
13132: ARRAY
13133: PPUSH
13134: CALL_OW 188
13138: GO 13097
13140: POP
13141: POP
// end ; if IsOk ( Givi ) then
13142: LD_EXP 16
13146: PPUSH
13147: CALL_OW 302
13151: IFFALSE 13167
// Say ( Givi , DG-Surrender-5 ) else
13153: LD_EXP 16
13157: PPUSH
13158: LD_STRING DG-Surrender-5
13160: PPUSH
13161: CALL_OW 88
13165: GO 13179
// Say ( Heike , DH-Surrender-a-5 ) ;
13167: LD_EXP 15
13171: PPUSH
13172: LD_STRING DH-Surrender-a-5
13174: PPUSH
13175: CALL_OW 88
// Say ( usCommander , DCa-Surrender-6 ) ;
13179: LD_EXP 30
13183: PPUSH
13184: LD_STRING DCa-Surrender-6
13186: PPUSH
13187: CALL_OW 88
// Say ( usCommander , DCa-Surrender-7 ) ;
13191: LD_EXP 30
13195: PPUSH
13196: LD_STRING DCa-Surrender-7
13198: PPUSH
13199: CALL_OW 88
// if IsOk ( Givi ) then
13203: LD_EXP 16
13207: PPUSH
13208: CALL_OW 302
13212: IFFALSE 13228
// Say ( Givi , DG-Surrender-8 ) else
13214: LD_EXP 16
13218: PPUSH
13219: LD_STRING DG-Surrender-8
13221: PPUSH
13222: CALL_OW 88
13226: GO 13240
// Say ( Heike , DH-Surrender-a-8 ) ;
13228: LD_EXP 15
13232: PPUSH
13233: LD_STRING DH-Surrender-a-8
13235: PPUSH
13236: CALL_OW 88
// Say ( usCommander , DCa-Surrender-9 ) ;
13240: LD_EXP 30
13244: PPUSH
13245: LD_STRING DCa-Surrender-9
13247: PPUSH
13248: CALL_OW 88
// Say ( Heike , DH-Surrender-10 ) ;
13252: LD_EXP 15
13256: PPUSH
13257: LD_STRING DH-Surrender-10
13259: PPUSH
13260: CALL_OW 88
// Say ( usCommander , DCa-Surrender-11 ) ;
13264: LD_EXP 30
13268: PPUSH
13269: LD_STRING DCa-Surrender-11
13271: PPUSH
13272: CALL_OW 88
// Say ( Heike , DH-Surrender-12 ) ;
13276: LD_EXP 15
13280: PPUSH
13281: LD_STRING DH-Surrender-12
13283: PPUSH
13284: CALL_OW 88
// Say ( usCommander , DCa-Surrender-13 ) ;
13288: LD_EXP 30
13292: PPUSH
13293: LD_STRING DCa-Surrender-13
13295: PPUSH
13296: CALL_OW 88
// Say ( usCommander , DCa-Surrender-14 ) ;
13300: LD_EXP 30
13304: PPUSH
13305: LD_STRING DCa-Surrender-14
13307: PPUSH
13308: CALL_OW 88
// Say ( usCommander , DCa-Surrender-15 ) ;
13312: LD_EXP 30
13316: PPUSH
13317: LD_STRING DCa-Surrender-15
13319: PPUSH
13320: CALL_OW 88
// Say ( usCommander , DCa-Surrender-16 ) ;
13324: LD_EXP 30
13328: PPUSH
13329: LD_STRING DCa-Surrender-16
13331: PPUSH
13332: CALL_OW 88
// Say ( Kaia , DK-Surrender-17 ) ;
13336: LD_EXP 20
13340: PPUSH
13341: LD_STRING DK-Surrender-17
13343: PPUSH
13344: CALL_OW 88
// Say ( Olaf , DO-Surrender-18 ) ;
13348: LD_EXP 24
13352: PPUSH
13353: LD_STRING DO-Surrender-18
13355: PPUSH
13356: CALL_OW 88
// Say ( Olaf , DO-Surrender-19 ) ;
13360: LD_EXP 24
13364: PPUSH
13365: LD_STRING DO-Surrender-19
13367: PPUSH
13368: CALL_OW 88
// Say ( Kurt , DKs-Surrender-20 ) ;
13372: LD_EXP 25
13376: PPUSH
13377: LD_STRING DKs-Surrender-20
13379: PPUSH
13380: CALL_OW 88
// Say ( Kurt , DKs-Surrender-21 ) ;
13384: LD_EXP 25
13388: PPUSH
13389: LD_STRING DKs-Surrender-21
13391: PPUSH
13392: CALL_OW 88
// Say ( Markov , DMar-Surrender-22 ) ;
13396: LD_EXP 22
13400: PPUSH
13401: LD_STRING DMar-Surrender-22
13403: PPUSH
13404: CALL_OW 88
// Say ( Markov , DMar-Surrender-23 ) ;
13408: LD_EXP 22
13412: PPUSH
13413: LD_STRING DMar-Surrender-23
13415: PPUSH
13416: CALL_OW 88
// Say ( Sophia , DS-Surrender-24 ) ;
13420: LD_EXP 21
13424: PPUSH
13425: LD_STRING DS-Surrender-24
13427: PPUSH
13428: CALL_OW 88
// Say ( Aviradze , DA-Surrender-25 ) ;
13432: LD_EXP 26
13436: PPUSH
13437: LD_STRING DA-Surrender-25
13439: PPUSH
13440: CALL_OW 88
// Say ( Ibrahim , DI-Surrender-26 ) ;
13444: LD_EXP 18
13448: PPUSH
13449: LD_STRING DI-Surrender-26
13451: PPUSH
13452: CALL_OW 88
// Say ( Kamil , DKam-Surrender-27 ) ;
13456: LD_EXP 19
13460: PPUSH
13461: LD_STRING DKam-Surrender-27
13463: PPUSH
13464: CALL_OW 88
// if IsOk ( Givi ) then
13468: LD_EXP 16
13472: PPUSH
13473: CALL_OW 302
13477: IFFALSE 13517
// begin Say ( Givi , DG-Surrender-28 ) ;
13479: LD_EXP 16
13483: PPUSH
13484: LD_STRING DG-Surrender-28
13486: PPUSH
13487: CALL_OW 88
// Say ( Givi , DG-Surrender-29 ) ;
13491: LD_EXP 16
13495: PPUSH
13496: LD_STRING DG-Surrender-29
13498: PPUSH
13499: CALL_OW 88
// Say ( Givi , DG-Surrender-30 ) ;
13503: LD_EXP 16
13507: PPUSH
13508: LD_STRING DG-Surrender-30
13510: PPUSH
13511: CALL_OW 88
// end else
13515: GO 13553
// begin Say ( Heike , DH-Surrender-a-28 ) ;
13517: LD_EXP 15
13521: PPUSH
13522: LD_STRING DH-Surrender-a-28
13524: PPUSH
13525: CALL_OW 88
// Say ( Heike , DH-Surrender-a-29 ) ;
13529: LD_EXP 15
13533: PPUSH
13534: LD_STRING DH-Surrender-a-29
13536: PPUSH
13537: CALL_OW 88
// Say ( Heike , DH-Surrender-a-30 ) ;
13541: LD_EXP 15
13545: PPUSH
13546: LD_STRING DH-Surrender-a-30
13548: PPUSH
13549: CALL_OW 88
// end ; PrepareRussianFirstWaveAttack ;
13553: CALL 15661 0 0
// AgressiveMove ( FilterAllUnits ( [ f_side , 3 ] ) , [ [ 176 , 123 ] ] ) ;
13557: LD_INT 22
13559: PUSH
13560: LD_INT 3
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PPUSH
13567: CALL_OW 69
13571: PPUSH
13572: LD_INT 176
13574: PUSH
13575: LD_INT 123
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: PUSH
13582: EMPTY
13583: LIST
13584: PPUSH
13585: CALL 57803 0 2
// PlaceSeeing ( 190 , 150 , 2 , - 8 ) ;
13589: LD_INT 190
13591: PPUSH
13592: LD_INT 150
13594: PPUSH
13595: LD_INT 2
13597: PPUSH
13598: LD_INT 8
13600: NEG
13601: PPUSH
13602: CALL_OW 330
// CenterOnXY ( 193 , 150 ) ;
13606: LD_INT 193
13608: PPUSH
13609: LD_INT 150
13611: PPUSH
13612: CALL_OW 84
// if IsOk ( Markov ) then
13616: LD_EXP 22
13620: PPUSH
13621: CALL_OW 302
13625: IFFALSE 13641
// Say ( Markov , DMar-Surrender-31 ) else
13627: LD_EXP 22
13631: PPUSH
13632: LD_STRING DMar-Surrender-31
13634: PPUSH
13635: CALL_OW 88
13639: GO 13698
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Surrender-a-31 ) then
13641: LD_EXP 27
13645: PPUSH
13646: LD_INT 26
13648: PUSH
13649: LD_INT 1
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: PPUSH
13656: CALL_OW 72
13660: PPUSH
13661: LD_STRING DArm-Surrender-a-31
13663: PPUSH
13664: CALL 224 0 2
13668: NOT
13669: IFFALSE 13698
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Surrender-a-31 ) ;
13671: LD_EXP 27
13675: PPUSH
13676: LD_INT 26
13678: PUSH
13679: LD_INT 2
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: PPUSH
13686: CALL_OW 72
13690: PPUSH
13691: LD_STRING DArf-Surrender-a-31
13693: PPUSH
13694: CALL 224 0 2
// Say ( Heike , DH-Surrender-32 ) ;
13698: LD_EXP 15
13702: PPUSH
13703: LD_STRING DH-Surrender-32
13705: PPUSH
13706: CALL_OW 88
// InGameOff ;
13710: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
13714: LD_STRING M2
13716: PPUSH
13717: CALL_OW 337
// wait ( 0 0$20 ) ;
13721: LD_INT 700
13723: PPUSH
13724: CALL_OW 67
// PrepareRussianLastWaveAttack ;
13728: CALL 16023 0 0
// russianAttack := true ;
13732: LD_ADDR_EXP 8
13736: PUSH
13737: LD_INT 1
13739: ST_TO_ADDR
// RemoveSeeing ( 190 , 150 , 2 ) ;
13740: LD_INT 190
13742: PPUSH
13743: LD_INT 150
13745: PPUSH
13746: LD_INT 2
13748: PPUSH
13749: CALL_OW 331
// end ;
13753: PPOPN 3
13755: END
// every 0 0$3 trigger seeHeavyGun and not InBattle ( 2 ) and IsOk ( Heike ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) and ( IsOk ( Markov ) or UnitFilter ( heikeSecondSquad , [ f_ok ] ) ) do
13756: LD_EXP 11
13760: IFFALSE 13772
13762: PUSH
13763: LD_INT 2
13765: PPUSH
13766: CALL_OW 463
13770: NOT
13771: AND
13772: IFFALSE 13785
13774: PUSH
13775: LD_EXP 15
13779: PPUSH
13780: CALL_OW 302
13784: AND
13785: IFFALSE 13817
13787: PUSH
13788: LD_INT 22
13790: PUSH
13791: LD_INT 2
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PUSH
13798: LD_INT 30
13800: PUSH
13801: LD_INT 3
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: PPUSH
13812: CALL_OW 69
13816: AND
13817: IFFALSE 13849
13819: PUSH
13820: LD_EXP 22
13824: PPUSH
13825: CALL_OW 302
13829: IFTRUE 13848
13831: PUSH
13832: LD_EXP 27
13836: PPUSH
13837: LD_INT 50
13839: PUSH
13840: EMPTY
13841: LIST
13842: PPUSH
13843: CALL_OW 72
13847: OR
13848: AND
13849: IFFALSE 14077
13851: GO 13853
13853: DISABLE
// begin DialogueOn ;
13854: CALL_OW 6
// Say ( Heike , DH-Heavy-1 ) ;
13858: LD_EXP 15
13862: PPUSH
13863: LD_STRING DH-Heavy-1
13865: PPUSH
13866: CALL_OW 88
// if IsOk ( Markov ) then
13870: LD_EXP 22
13874: PPUSH
13875: CALL_OW 302
13879: IFFALSE 14004
// begin Say ( Markov , DMar-Heavy-2 ) ;
13881: LD_EXP 22
13885: PPUSH
13886: LD_STRING DMar-Heavy-2
13888: PPUSH
13889: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
13893: LD_INT 22
13895: PUSH
13896: LD_INT 2
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: PUSH
13903: LD_INT 30
13905: PUSH
13906: LD_INT 3
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: PPUSH
13917: CALL_OW 69
13921: PUSH
13922: LD_INT 1
13924: ARRAY
13925: PPUSH
13926: CALL_OW 87
// Say ( Markov , DMar-Heavy-3 ) ;
13930: LD_EXP 22
13934: PPUSH
13935: LD_STRING DMar-Heavy-3
13937: PPUSH
13938: CALL_OW 88
// Say ( Markov , DMar-Heavy-4 ) ;
13942: LD_EXP 22
13946: PPUSH
13947: LD_STRING DMar-Heavy-4
13949: PPUSH
13950: CALL_OW 88
// Say ( Markov , DMar-Heavy-5 ) ;
13954: LD_EXP 22
13958: PPUSH
13959: LD_STRING DMar-Heavy-5
13961: PPUSH
13962: CALL_OW 88
// Say ( Markov , DMar-Heavy-6 ) ;
13966: LD_EXP 22
13970: PPUSH
13971: LD_STRING DMar-Heavy-6
13973: PPUSH
13974: CALL_OW 88
// Say ( Heike , DH-Heavy-7 ) ;
13978: LD_EXP 15
13982: PPUSH
13983: LD_STRING DH-Heavy-7
13985: PPUSH
13986: CALL_OW 88
// Say ( Heike , DH-Heavy-8 ) ;
13990: LD_EXP 15
13994: PPUSH
13995: LD_STRING DH-Heavy-8
13997: PPUSH
13998: CALL_OW 88
// end else
14002: GO 14061
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Heavy-a-2 ) then
14004: LD_EXP 27
14008: PPUSH
14009: LD_INT 26
14011: PUSH
14012: LD_INT 1
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: PPUSH
14019: CALL_OW 72
14023: PPUSH
14024: LD_STRING DArm-Heavy-a-2
14026: PPUSH
14027: CALL 224 0 2
14031: NOT
14032: IFFALSE 14061
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Heavy-a-2 ) ;
14034: LD_EXP 27
14038: PPUSH
14039: LD_INT 26
14041: PUSH
14042: LD_INT 2
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: PPUSH
14049: CALL_OW 72
14053: PPUSH
14054: LD_STRING DArf-Heavy-a-2
14056: PPUSH
14057: CALL 224 0 2
// end ; Say ( Heike , DH-Heavy-9 ) ;
14061: LD_EXP 15
14065: PPUSH
14066: LD_STRING DH-Heavy-9
14068: PPUSH
14069: CALL_OW 88
// DialogueOff ;
14073: CALL_OW 7
// end ;
14077: END
// every 0 0$2 trigger UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) and IsOk ( Heike ) and not usSurrender do
14078: LD_EXP 34
14082: PPUSH
14083: LD_INT 101
14085: PUSH
14086: LD_INT 2
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: PPUSH
14093: CALL_OW 72
14097: IFFALSE 14110
14099: PUSH
14100: LD_EXP 15
14104: PPUSH
14105: CALL_OW 302
14109: AND
14110: IFFALSE 14119
14112: PUSH
14113: LD_EXP 7
14117: NOT
14118: AND
14119: IFFALSE 14262
14121: GO 14123
14123: DISABLE
// begin DialogueOn ;
14124: CALL_OW 6
// CenterNowOnUnits ( UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) ) ;
14128: LD_EXP 34
14132: PPUSH
14133: LD_INT 101
14135: PUSH
14136: LD_INT 2
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: PPUSH
14143: CALL_OW 72
14147: PPUSH
14148: CALL_OW 87
// Say ( Heike , DH-Flank-1 ) ;
14152: LD_EXP 15
14156: PPUSH
14157: LD_STRING DH-Flank-1
14159: PPUSH
14160: CALL_OW 88
// if IsOk ( Mike ) then
14164: LD_EXP 17
14168: PPUSH
14169: CALL_OW 302
14173: IFFALSE 14189
// Say ( Mike , DM-Flank-2 ) else
14175: LD_EXP 17
14179: PPUSH
14180: LD_STRING DM-Flank-2
14182: PPUSH
14183: CALL_OW 88
14187: GO 14246
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Flank-a-2 ) then
14189: LD_EXP 27
14193: PPUSH
14194: LD_INT 26
14196: PUSH
14197: LD_INT 1
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: PPUSH
14204: CALL_OW 72
14208: PPUSH
14209: LD_STRING DArm-Flank-a-2
14211: PPUSH
14212: CALL 224 0 2
14216: NOT
14217: IFFALSE 14246
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArm-Flank-a-2 ) ;
14219: LD_EXP 27
14223: PPUSH
14224: LD_INT 26
14226: PUSH
14227: LD_INT 2
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: PPUSH
14234: CALL_OW 72
14238: PPUSH
14239: LD_STRING DArm-Flank-a-2
14241: PPUSH
14242: CALL 224 0 2
// Say ( Heike , DH-Flank-3 ) ;
14246: LD_EXP 15
14250: PPUSH
14251: LD_STRING DH-Flank-3
14253: PPUSH
14254: CALL_OW 88
// DialogueOff ;
14258: CALL_OW 7
// end ;
14262: END
// every 0 0$3 trigger seeRemoteVehicle and not usSurrender do
14263: LD_EXP 10
14267: IFFALSE 14276
14269: PUSH
14270: LD_EXP 7
14274: NOT
14275: AND
14276: IFFALSE 14500
14278: GO 14280
14280: DISABLE
// begin DialogueOn ;
14281: CALL_OW 6
// Say ( Heike , DH-USRC-1 ) ;
14285: LD_EXP 15
14289: PPUSH
14290: LD_STRING DH-USRC-1
14292: PPUSH
14293: CALL_OW 88
// if IsOk ( Markov ) then
14297: LD_EXP 22
14301: PPUSH
14302: CALL_OW 302
14306: IFFALSE 14322
// Say ( Markov , DMar-USRC-2 ) else
14308: LD_EXP 22
14312: PPUSH
14313: LD_STRING DMar-USRC-2
14315: PPUSH
14316: CALL_OW 88
14320: GO 14379
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-USRC-a-2 ) then
14322: LD_EXP 27
14326: PPUSH
14327: LD_INT 26
14329: PUSH
14330: LD_INT 1
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: PPUSH
14337: CALL_OW 72
14341: PPUSH
14342: LD_STRING DArm-USRC-a-2
14344: PPUSH
14345: CALL 224 0 2
14349: NOT
14350: IFFALSE 14379
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-USRC-a-2 ) ;
14352: LD_EXP 27
14356: PPUSH
14357: LD_INT 26
14359: PUSH
14360: LD_INT 2
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PPUSH
14367: CALL_OW 72
14371: PPUSH
14372: LD_STRING DArf-USRC-a-2
14374: PPUSH
14375: CALL 224 0 2
// DialogueOff ;
14379: CALL_OW 7
// wait ( 0 0$10 ) ;
14383: LD_INT 350
14385: PPUSH
14386: CALL_OW 67
// Say ( Heike , DH-USRC-3 ) ;
14390: LD_EXP 15
14394: PPUSH
14395: LD_STRING DH-USRC-3
14397: PPUSH
14398: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14402: LD_INT 35
14404: PPUSH
14405: CALL_OW 67
// until See ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
14409: LD_INT 2
14411: PPUSH
14412: LD_INT 22
14414: PUSH
14415: LD_INT 1
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: PUSH
14422: LD_INT 30
14424: PUSH
14425: LD_INT 36
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: PPUSH
14436: CALL_OW 69
14440: PUSH
14441: LD_INT 1
14443: ARRAY
14444: PPUSH
14445: CALL_OW 292
14449: IFFALSE 14402
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
14451: LD_INT 22
14453: PUSH
14454: LD_INT 1
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 30
14463: PUSH
14464: LD_INT 36
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PPUSH
14475: CALL_OW 69
14479: PUSH
14480: LD_INT 1
14482: ARRAY
14483: PPUSH
14484: CALL_OW 87
// Say ( Heike , DH-USRCFound-1 ) ;
14488: LD_EXP 15
14492: PPUSH
14493: LD_STRING DH-USRCFound-1
14495: PPUSH
14496: CALL_OW 88
// end ;
14500: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
14501: LD_EXP 20
14505: PPUSH
14506: CALL_OW 256
14510: PUSH
14511: LD_INT 3
14513: LESS
14514: IFFALSE 14551
14516: GO 14518
14518: DISABLE
// begin DialogueOn ;
14519: CALL_OW 6
// ForceSay ( Kaia , DK-Dead-1 ) ;
14523: LD_EXP 20
14527: PPUSH
14528: LD_STRING DK-Dead-1
14530: PPUSH
14531: CALL_OW 91
// ForceSay ( Kaia , DK-Dead-2 ) ;
14535: LD_EXP 20
14539: PPUSH
14540: LD_STRING DK-Dead-2
14542: PPUSH
14543: CALL_OW 91
// DialogueOff ;
14547: CALL_OW 7
// end ;
14551: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_bweapon , ar_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] ] ] ) do
14552: LD_INT 22
14554: PUSH
14555: LD_INT 2
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: PUSH
14562: LD_INT 2
14564: PUSH
14565: LD_INT 35
14567: PUSH
14568: LD_INT 28
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: PUSH
14575: LD_INT 34
14577: PUSH
14578: LD_INT 28
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: LIST
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: PPUSH
14594: CALL_OW 69
14598: IFFALSE 14611
14600: GO 14602
14602: DISABLE
// hasRockets := true ;
14603: LD_ADDR_EXP 9
14607: PUSH
14608: LD_INT 1
14610: ST_TO_ADDR
14611: END
// every 0 0$1 trigger russianAttack and not FilterAllUnits ( [ f_side , 3 ] ) do var m1 , m2 , m3 ;
14612: LD_EXP 8
14616: IFFALSE 14635
14618: PUSH
14619: LD_INT 22
14621: PUSH
14622: LD_INT 3
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: PPUSH
14629: CALL_OW 69
14633: NOT
14634: AND
14635: IFFALSE 15394
14637: GO 14639
14639: DISABLE
14640: LD_INT 0
14642: PPUSH
14643: PPUSH
14644: PPUSH
// begin m1 := false ;
14645: LD_ADDR_VAR 0 1
14649: PUSH
14650: LD_INT 0
14652: ST_TO_ADDR
// m2 := false ;
14653: LD_ADDR_VAR 0 2
14657: PUSH
14658: LD_INT 0
14660: ST_TO_ADDR
// m3 := false ;
14661: LD_ADDR_VAR 0 3
14665: PUSH
14666: LD_INT 0
14668: ST_TO_ADDR
// DialogueOn ;
14669: CALL_OW 6
// if vehLossCounter = 0 then
14673: LD_EXP 14
14677: PUSH
14678: LD_INT 0
14680: EQUAL
14681: IFFALSE 14690
// SetAchievement ( ACH_UNTOUCH ) ;
14683: LD_STRING ACH_UNTOUCH
14685: PPUSH
14686: CALL_OW 543
// if tick < 35 35$00 then
14690: LD_OWVAR 1
14694: PUSH
14695: LD_INT 73500
14697: LESS
14698: IFFALSE 14707
// SetAchievement ( ACH_HSPEED_7 ) ;
14700: LD_STRING ACH_HSPEED_7
14702: PPUSH
14703: CALL_OW 543
// CenterNowOnUnits ( Heike ) ;
14707: LD_EXP 15
14711: PPUSH
14712: CALL_OW 87
// Say ( Heike , DH-End-1 ) ;
14716: LD_EXP 15
14720: PPUSH
14721: LD_STRING DH-End-1
14723: PPUSH
14724: CALL_OW 88
// SayRadio ( Shariff , DShar-End-2 ) ;
14728: LD_EXP 23
14732: PPUSH
14733: LD_STRING DShar-End-2
14735: PPUSH
14736: CALL_OW 94
// Say ( Kaia , DK-End-3 ) ;
14740: LD_EXP 20
14744: PPUSH
14745: LD_STRING DK-End-3
14747: PPUSH
14748: CALL_OW 88
// Say ( Heike , DH-End-4 ) ;
14752: LD_EXP 15
14756: PPUSH
14757: LD_STRING DH-End-4
14759: PPUSH
14760: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
14764: LD_EXP 23
14768: PPUSH
14769: LD_STRING DShar-End-5
14771: PPUSH
14772: CALL_OW 94
// if IsOk ( Markov ) then
14776: LD_EXP 22
14780: PPUSH
14781: CALL_OW 302
14785: IFFALSE 14799
// Say ( Kaia , DK-End-6 ) ;
14787: LD_EXP 20
14791: PPUSH
14792: LD_STRING DK-End-6
14794: PPUSH
14795: CALL_OW 88
// Say ( Kaia , DK-End-7 ) ;
14799: LD_EXP 20
14803: PPUSH
14804: LD_STRING DK-End-7
14806: PPUSH
14807: CALL_OW 88
// if IsOk ( Kaia ) then
14811: LD_EXP 20
14815: PPUSH
14816: CALL_OW 302
14820: IFFALSE 14858
// begin Say ( Givi , DG-End-8 ) ;
14822: LD_EXP 16
14826: PPUSH
14827: LD_STRING DG-End-8
14829: PPUSH
14830: CALL_OW 88
// Say ( Givi , DG-End-9 ) ;
14834: LD_EXP 16
14838: PPUSH
14839: LD_STRING DG-End-9
14841: PPUSH
14842: CALL_OW 88
// Say ( Heike , DH-End-10 ) ;
14846: LD_EXP 15
14850: PPUSH
14851: LD_STRING DH-End-10
14853: PPUSH
14854: CALL_OW 88
// end ; Say ( Heike , DH-End-11 ) ;
14858: LD_EXP 15
14862: PPUSH
14863: LD_STRING DH-End-11
14865: PPUSH
14866: CALL_OW 88
// if GetTech ( tech_MatDet , 2 ) = state_researched then
14870: LD_INT 7
14872: PPUSH
14873: LD_INT 2
14875: PPUSH
14876: CALL_OW 321
14880: PUSH
14881: LD_INT 2
14883: EQUAL
14884: IFFALSE 14906
// begin m1 := true ;
14886: LD_ADDR_VAR 0 1
14890: PUSH
14891: LD_INT 1
14893: ST_TO_ADDR
// AddMedal ( med1 , 1 ) ;
14894: LD_STRING med1
14896: PPUSH
14897: LD_INT 1
14899: PPUSH
14900: CALL_OW 101
// end else
14904: GO 14917
// AddMedal ( med1 , - 1 ) ;
14906: LD_STRING med1
14908: PPUSH
14909: LD_INT 1
14911: NEG
14912: PPUSH
14913: CALL_OW 101
// if hasRockets then
14917: LD_EXP 9
14921: IFFALSE 14943
// begin m2 := true ;
14923: LD_ADDR_VAR 0 2
14927: PUSH
14928: LD_INT 1
14930: ST_TO_ADDR
// AddMedal ( med2 , 1 ) ;
14931: LD_STRING med2
14933: PPUSH
14934: LD_INT 1
14936: PPUSH
14937: CALL_OW 101
// end else
14941: GO 14954
// AddMedal ( med2 , - 1 ) ;
14943: LD_STRING med2
14945: PPUSH
14946: LD_INT 1
14948: NEG
14949: PPUSH
14950: CALL_OW 101
// if tick < [ 50 50$00 , 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
14954: LD_OWVAR 1
14958: PUSH
14959: LD_INT 105000
14961: PUSH
14962: LD_INT 94500
14964: PUSH
14965: LD_INT 84000
14967: PUSH
14968: LD_INT 73500
14970: PUSH
14971: EMPTY
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: PUSH
14977: LD_OWVAR 67
14981: ARRAY
14982: LESS
14983: IFFALSE 15005
// begin m3 := true ;
14985: LD_ADDR_VAR 0 3
14989: PUSH
14990: LD_INT 1
14992: ST_TO_ADDR
// AddMedal ( med3 , 1 ) ;
14993: LD_STRING med3
14995: PPUSH
14996: LD_INT 1
14998: PPUSH
14999: CALL_OW 101
// end else
15003: GO 15016
// AddMedal ( med3 , - 1 ) ;
15005: LD_STRING med3
15007: PPUSH
15008: LD_INT 1
15010: NEG
15011: PPUSH
15012: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
15016: LD_VAR 0 1
15020: IFFALSE 15028
15022: PUSH
15023: LD_VAR 0 2
15027: AND
15028: IFFALSE 15036
15030: PUSH
15031: LD_VAR 0 3
15035: AND
15036: IFFALSE 15048
15038: PUSH
15039: LD_OWVAR 67
15043: PUSH
15044: LD_INT 3
15046: GREATEREQUAL
15047: AND
15048: IFFALSE 15060
// SetAchievementEX ( ACH_ARES , 7 ) ;
15050: LD_STRING ACH_ARES
15052: PPUSH
15053: LD_INT 7
15055: PPUSH
15056: CALL_OW 564
// GiveMedals ( MAIN ) ;
15060: LD_STRING MAIN
15062: PPUSH
15063: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
15067: LD_INT 22
15069: PUSH
15070: LD_INT 2
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: PUSH
15077: LD_INT 23
15079: PUSH
15080: LD_INT 2
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: PUSH
15087: LD_INT 21
15089: PUSH
15090: LD_INT 1
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: LIST
15101: PPUSH
15102: CALL_OW 69
15106: PPUSH
15107: CALL_OW 43
// SaveCharacters ( usCommander , 07_UsCommander ) ;
15111: LD_EXP 30
15115: PPUSH
15116: LD_STRING 07_UsCommander
15118: PPUSH
15119: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff usCommander , 07_Americans ) ;
15123: LD_INT 22
15125: PUSH
15126: LD_INT 1
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: PUSH
15133: LD_INT 23
15135: PUSH
15136: LD_INT 1
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: PUSH
15143: LD_INT 21
15145: PUSH
15146: LD_INT 1
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: LIST
15157: PPUSH
15158: CALL_OW 69
15162: PUSH
15163: LD_EXP 30
15167: DIFF
15168: PPUSH
15169: LD_STRING 07_Americans
15171: PPUSH
15172: CALL_OW 38
// SaveCharacters ( Heike , 07_Heike ) ;
15176: LD_EXP 15
15180: PPUSH
15181: LD_STRING 07_Heike
15183: PPUSH
15184: CALL_OW 38
// if Aviradze then
15188: LD_EXP 26
15192: IFFALSE 15206
// SaveCharacters ( Aviradze , 07_Aviradze ) ;
15194: LD_EXP 26
15198: PPUSH
15199: LD_STRING 07_Aviradze
15201: PPUSH
15202: CALL_OW 38
// if Ibrahim then
15206: LD_EXP 18
15210: IFFALSE 15224
// SaveCharacters ( Ibrahim , 07_Ibrahim ) ;
15212: LD_EXP 18
15216: PPUSH
15217: LD_STRING 07_Ibrahim
15219: PPUSH
15220: CALL_OW 38
// if Kamil then
15224: LD_EXP 19
15228: IFFALSE 15242
// SaveCharacters ( Kamil , 07_Kamil ) ;
15230: LD_EXP 19
15234: PPUSH
15235: LD_STRING 07_Kamil
15237: PPUSH
15238: CALL_OW 38
// if Sophia then
15242: LD_EXP 21
15246: IFFALSE 15260
// SaveCharacters ( Sophia , 07_Sophia ) ;
15248: LD_EXP 21
15252: PPUSH
15253: LD_STRING 07_Sophia
15255: PPUSH
15256: CALL_OW 38
// if Kaia then
15260: LD_EXP 20
15264: IFFALSE 15278
// SaveCharacters ( Kaia , 07_Kaia ) ;
15266: LD_EXP 20
15270: PPUSH
15271: LD_STRING 07_Kaia
15273: PPUSH
15274: CALL_OW 38
// if Givi then
15278: LD_EXP 16
15282: IFFALSE 15296
// SaveCharacters ( Givi , 07_Givi ) ;
15284: LD_EXP 16
15288: PPUSH
15289: LD_STRING 07_Givi
15291: PPUSH
15292: CALL_OW 38
// if Mike then
15296: LD_EXP 17
15300: IFFALSE 15314
// SaveCharacters ( Mike , 07_Mike ) ;
15302: LD_EXP 17
15306: PPUSH
15307: LD_STRING 07_Mike
15309: PPUSH
15310: CALL_OW 38
// if Markov then
15314: LD_EXP 22
15318: IFFALSE 15332
// SaveCharacters ( Markov , 07_Markov ) ;
15320: LD_EXP 22
15324: PPUSH
15325: LD_STRING 07_Markov
15327: PPUSH
15328: CALL_OW 38
// if Kurt then
15332: LD_EXP 25
15336: IFFALSE 15350
// SaveCharacters ( Kurt , 07_Kurt ) ;
15338: LD_EXP 25
15342: PPUSH
15343: LD_STRING 07_Kurt
15345: PPUSH
15346: CALL_OW 38
// if Olaf then
15350: LD_EXP 24
15354: IFFALSE 15368
// SaveCharacters ( Olaf , 07_Olaf ) ;
15356: LD_EXP 24
15360: PPUSH
15361: LD_STRING 07_Olaf
15363: PPUSH
15364: CALL_OW 38
// if heikeSecondSquad then
15368: LD_EXP 27
15372: IFFALSE 15386
// SaveCharacters ( heikeSecondSquad , 07_others ) ;
15374: LD_EXP 27
15378: PPUSH
15379: LD_STRING 07_others
15381: PPUSH
15382: CALL_OW 38
// YouWin ;
15386: CALL_OW 103
// DialogueOff ;
15390: CALL_OW 7
// end ; end_of_file
15394: PPOPN 3
15396: END
// every 1 1$20 + 0 0$40 trigger GetResourceArea ( cratesRiverArea , mat_cans ) < [ 12 , 10 , 8 , 8 ] [ Difficulty ] do
15397: LD_INT 7
15399: PPUSH
15400: LD_INT 1
15402: PPUSH
15403: CALL_OW 287
15407: PUSH
15408: LD_INT 12
15410: PUSH
15411: LD_INT 10
15413: PUSH
15414: LD_INT 8
15416: PUSH
15417: LD_INT 8
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: PUSH
15426: LD_OWVAR 67
15430: ARRAY
15431: LESS
15432: IFFALSE 15459
15434: GO 15436
15436: DISABLE
// begin enable ;
15437: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesRiverArea , true ) ;
15438: LD_INT 1
15440: PPUSH
15441: LD_INT 5
15443: PPUSH
15444: CALL_OW 12
15448: PPUSH
15449: LD_INT 7
15451: PPUSH
15452: LD_INT 1
15454: PPUSH
15455: CALL_OW 55
// end ;
15459: END
// every 0 0$40 + 0 0$40 trigger GetResourceArea ( cratesForestArea , mat_cans ) < [ 25 , 22 , 17 , 14 ] [ Difficulty ] and tick < 24 24$00 do
15460: LD_INT 8
15462: PPUSH
15463: LD_INT 1
15465: PPUSH
15466: CALL_OW 287
15470: PUSH
15471: LD_INT 25
15473: PUSH
15474: LD_INT 22
15476: PUSH
15477: LD_INT 17
15479: PUSH
15480: LD_INT 14
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: PUSH
15489: LD_OWVAR 67
15493: ARRAY
15494: LESS
15495: IFFALSE 15507
15497: PUSH
15498: LD_OWVAR 1
15502: PUSH
15503: LD_INT 50400
15505: LESS
15506: AND
15507: IFFALSE 15534
15509: GO 15511
15511: DISABLE
// begin enable ;
15512: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesForestArea , true ) ;
15513: LD_INT 1
15515: PPUSH
15516: LD_INT 5
15518: PPUSH
15519: CALL_OW 12
15523: PPUSH
15524: LD_INT 8
15526: PPUSH
15527: LD_INT 1
15529: PPUSH
15530: CALL_OW 55
// end ;
15534: END
// every 0 0$40 trigger tick < 8 8$10 do
15535: LD_OWVAR 1
15539: PUSH
15540: LD_INT 17150
15542: LESS
15543: IFFALSE 15576
15545: GO 15547
15547: DISABLE
// begin enable ;
15548: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 130 , 18 , 12 , true ) ;
15549: LD_INT 1
15551: PPUSH
15552: LD_INT 5
15554: PPUSH
15555: CALL_OW 12
15559: PPUSH
15560: LD_INT 130
15562: PPUSH
15563: LD_INT 18
15565: PPUSH
15566: LD_INT 12
15568: PPUSH
15569: LD_INT 1
15571: PPUSH
15572: CALL_OW 56
// end ;
15576: END
// every 1 1$00 + 0 0$30 trigger tick < 6 6$10 do
15577: LD_OWVAR 1
15581: PUSH
15582: LD_INT 12950
15584: LESS
15585: IFFALSE 15618
15587: GO 15589
15589: DISABLE
// begin enable ;
15590: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 172 , 97 , 12 , true ) ;
15591: LD_INT 1
15593: PPUSH
15594: LD_INT 5
15596: PPUSH
15597: CALL_OW 12
15601: PPUSH
15602: LD_INT 172
15604: PPUSH
15605: LD_INT 97
15607: PPUSH
15608: LD_INT 12
15610: PPUSH
15611: LD_INT 1
15613: PPUSH
15614: CALL_OW 56
// end ;
15618: END
// every 2 2$20 trigger GetResourceArea ( americanCratesArea , mat_cans ) < 6 do
15619: LD_INT 20
15621: PPUSH
15622: LD_INT 1
15624: PPUSH
15625: CALL_OW 287
15629: PUSH
15630: LD_INT 6
15632: LESS
15633: IFFALSE 15660
15635: GO 15637
15637: DISABLE
// begin enable ;
15638: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , americanCratesArea , true ) ;
15639: LD_INT 1
15641: PPUSH
15642: LD_INT 5
15644: PPUSH
15645: CALL_OW 12
15649: PPUSH
15650: LD_INT 20
15652: PPUSH
15653: LD_INT 1
15655: PPUSH
15656: CALL_OW 55
// end ; end_of_file
15660: END
// export function PrepareRussianFirstWaveAttack ; var i , tmp , un , veh ; begin
15661: LD_INT 0
15663: PPUSH
15664: PPUSH
15665: PPUSH
15666: PPUSH
15667: PPUSH
// uc_side := 3 ;
15668: LD_ADDR_OWVAR 20
15672: PUSH
15673: LD_INT 3
15675: ST_TO_ADDR
// uc_nation := 3 ;
15676: LD_ADDR_OWVAR 21
15680: PUSH
15681: LD_INT 3
15683: ST_TO_ADDR
// tmp := [ [ 184 , 144 , 5 ] , [ 191 , 147 , 5 ] , [ 202 , 151 , 4 ] , [ 210 , 152 , 4 ] ] ;
15684: LD_ADDR_VAR 0 3
15688: PUSH
15689: LD_INT 184
15691: PUSH
15692: LD_INT 144
15694: PUSH
15695: LD_INT 5
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: LIST
15702: PUSH
15703: LD_INT 191
15705: PUSH
15706: LD_INT 147
15708: PUSH
15709: LD_INT 5
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: LIST
15716: PUSH
15717: LD_INT 202
15719: PUSH
15720: LD_INT 151
15722: PUSH
15723: LD_INT 4
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: LIST
15730: PUSH
15731: LD_INT 210
15733: PUSH
15734: LD_INT 152
15736: PUSH
15737: LD_INT 4
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: LIST
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: ST_TO_ADDR
// for i := 1 to 3 do
15751: LD_ADDR_VAR 0 2
15755: PUSH
15756: DOUBLE
15757: LD_INT 1
15759: DEC
15760: ST_TO_ADDR
15761: LD_INT 3
15763: PUSH
15764: FOR_TO
15765: IFFALSE 15934
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_gun ] [ i mod 3 + 1 ] , 40 ) ;
15767: LD_INT 24
15769: PPUSH
15770: LD_INT 1
15772: PPUSH
15773: LD_INT 1
15775: PPUSH
15776: LD_INT 43
15778: PUSH
15779: LD_INT 44
15781: PUSH
15782: LD_INT 46
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: LIST
15789: PUSH
15790: LD_VAR 0 2
15794: PUSH
15795: LD_INT 3
15797: MOD
15798: PUSH
15799: LD_INT 1
15801: PLUS
15802: ARRAY
15803: PPUSH
15804: LD_INT 40
15806: PPUSH
15807: CALL 21857 0 5
// veh := CreateVehicle ;
15811: LD_ADDR_VAR 0 5
15815: PUSH
15816: CALL_OW 45
15820: ST_TO_ADDR
// SetDir ( veh , tmp [ i ] [ 3 ] ) ;
15821: LD_VAR 0 5
15825: PPUSH
15826: LD_VAR 0 3
15830: PUSH
15831: LD_VAR 0 2
15835: ARRAY
15836: PUSH
15837: LD_INT 3
15839: ARRAY
15840: PPUSH
15841: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
15845: LD_VAR 0 5
15849: PPUSH
15850: LD_VAR 0 3
15854: PUSH
15855: LD_VAR 0 2
15859: ARRAY
15860: PUSH
15861: LD_INT 1
15863: ARRAY
15864: PPUSH
15865: LD_VAR 0 3
15869: PUSH
15870: LD_VAR 0 2
15874: ARRAY
15875: PUSH
15876: LD_INT 2
15878: ARRAY
15879: PPUSH
15880: LD_INT 0
15882: PPUSH
15883: CALL_OW 48
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
15887: LD_INT 0
15889: PPUSH
15890: LD_INT 6
15892: PUSH
15893: LD_INT 7
15895: PUSH
15896: LD_INT 8
15898: PUSH
15899: LD_INT 8
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: PUSH
15908: LD_OWVAR 67
15912: ARRAY
15913: PPUSH
15914: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
15918: CALL_OW 44
15922: PPUSH
15923: LD_VAR 0 5
15927: PPUSH
15928: CALL_OW 52
// end ;
15932: GO 15764
15934: POP
15935: POP
// for i := 1 to 4 do
15936: LD_ADDR_VAR 0 2
15940: PUSH
15941: DOUBLE
15942: LD_INT 1
15944: DEC
15945: ST_TO_ADDR
15946: LD_INT 4
15948: PUSH
15949: FOR_TO
15950: IFFALSE 16016
// begin PrepareSoldier ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
15952: LD_INT 0
15954: PPUSH
15955: LD_INT 6
15957: PUSH
15958: LD_INT 7
15960: PUSH
15961: LD_INT 8
15963: PUSH
15964: LD_INT 8
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: PUSH
15973: LD_OWVAR 67
15977: ARRAY
15978: PPUSH
15979: CALL_OW 381
// un := CreateHuman ;
15983: LD_ADDR_VAR 0 4
15987: PUSH
15988: CALL_OW 44
15992: ST_TO_ADDR
// PlaceUnitXYR ( un , 185 , 145 , 6 , false ) ;
15993: LD_VAR 0 4
15997: PPUSH
15998: LD_INT 185
16000: PPUSH
16001: LD_INT 145
16003: PPUSH
16004: LD_INT 6
16006: PPUSH
16007: LD_INT 0
16009: PPUSH
16010: CALL_OW 50
// end ;
16014: GO 15949
16016: POP
16017: POP
// end ;
16018: LD_VAR 0 1
16022: RET
// export function PrepareRussianLastWaveAttack ; var i , veh ; begin
16023: LD_INT 0
16025: PPUSH
16026: PPUSH
16027: PPUSH
// uc_side := 3 ;
16028: LD_ADDR_OWVAR 20
16032: PUSH
16033: LD_INT 3
16035: ST_TO_ADDR
// if Difficulty > 1 then
16036: LD_OWVAR 67
16040: PUSH
16041: LD_INT 1
16043: GREATER
16044: IFFALSE 16206
// begin uc_nation := 0 ;
16046: LD_ADDR_OWVAR 21
16050: PUSH
16051: LD_INT 0
16053: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty + 1 ] do
16054: LD_ADDR_VAR 0 2
16058: PUSH
16059: DOUBLE
16060: LD_INT 1
16062: DEC
16063: ST_TO_ADDR
16064: LD_INT 4
16066: PUSH
16067: LD_INT 5
16069: PUSH
16070: LD_INT 6
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: LIST
16077: PUSH
16078: LD_OWVAR 67
16082: PUSH
16083: LD_INT 1
16085: PLUS
16086: ARRAY
16087: PUSH
16088: FOR_TO
16089: IFFALSE 16204
// begin hc_class := class_apeman_soldier ;
16091: LD_ADDR_OWVAR 28
16095: PUSH
16096: LD_INT 15
16098: ST_TO_ADDR
// hc_gallery :=  ;
16099: LD_ADDR_OWVAR 33
16103: PUSH
16104: LD_STRING 
16106: ST_TO_ADDR
// hc_name := [ Treci , Ivan , Yaromir , Nadzieia , Krasna , Piaty ] [ rand ( 1 , 6 ) ] ;
16107: LD_ADDR_OWVAR 26
16111: PUSH
16112: LD_STRING Treci
16114: PUSH
16115: LD_STRING Ivan
16117: PUSH
16118: LD_STRING Yaromir
16120: PUSH
16121: LD_STRING Nadzieia
16123: PUSH
16124: LD_STRING Krasna
16126: PUSH
16127: LD_STRING Piaty
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: PUSH
16138: LD_INT 1
16140: PPUSH
16141: LD_INT 6
16143: PPUSH
16144: CALL_OW 12
16148: ARRAY
16149: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 0 , 0 ] ;
16150: LD_ADDR_OWVAR 31
16154: PUSH
16155: LD_INT 5
16157: PUSH
16158: LD_INT 0
16160: PUSH
16161: LD_INT 0
16163: PUSH
16164: LD_INT 0
16166: PUSH
16167: EMPTY
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: ST_TO_ADDR
// hc_sex := sex_male ;
16173: LD_ADDR_OWVAR 27
16177: PUSH
16178: LD_INT 1
16180: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 178 , 148 , 6 , false ) ;
16181: CALL_OW 44
16185: PPUSH
16186: LD_INT 178
16188: PPUSH
16189: LD_INT 148
16191: PPUSH
16192: LD_INT 6
16194: PPUSH
16195: LD_INT 0
16197: PPUSH
16198: CALL_OW 50
// end ;
16202: GO 16088
16204: POP
16205: POP
// end ; for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
16206: LD_ADDR_VAR 0 2
16210: PUSH
16211: DOUBLE
16212: LD_INT 1
16214: DEC
16215: ST_TO_ADDR
16216: LD_INT 2
16218: PUSH
16219: LD_INT 3
16221: PUSH
16222: LD_INT 4
16224: PUSH
16225: LD_INT 5
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: PUSH
16234: LD_OWVAR 67
16238: ARRAY
16239: PUSH
16240: FOR_TO
16241: IFFALSE 16408
// begin uc_nation := 3 ;
16243: LD_ADDR_OWVAR 21
16247: PUSH
16248: LD_INT 3
16250: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gatling_gun , ru_gun ] [ i mod 3 + 1 ] , 44 ) ;
16251: LD_INT 22
16253: PPUSH
16254: LD_INT 1
16256: PPUSH
16257: LD_INT 1
16259: PPUSH
16260: LD_INT 45
16262: PUSH
16263: LD_INT 43
16265: PUSH
16266: LD_INT 44
16268: PUSH
16269: EMPTY
16270: LIST
16271: LIST
16272: LIST
16273: PUSH
16274: LD_VAR 0 2
16278: PUSH
16279: LD_INT 3
16281: MOD
16282: PUSH
16283: LD_INT 1
16285: PLUS
16286: ARRAY
16287: PPUSH
16288: LD_INT 44
16290: PPUSH
16291: CALL 21857 0 5
// veh := CreateVehicle ;
16295: LD_ADDR_VAR 0 3
16299: PUSH
16300: CALL_OW 45
16304: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
16305: LD_VAR 0 3
16309: PPUSH
16310: LD_INT 4
16312: PPUSH
16313: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
16317: LD_VAR 0 3
16321: PPUSH
16322: LD_INT 1
16324: PPUSH
16325: LD_INT 0
16327: PPUSH
16328: CALL_OW 49
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
16332: LD_INT 0
16334: PPUSH
16335: LD_INT 6
16337: PUSH
16338: LD_INT 7
16340: PUSH
16341: LD_INT 8
16343: PUSH
16344: LD_INT 8
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: PUSH
16353: LD_OWVAR 67
16357: ARRAY
16358: PPUSH
16359: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
16363: CALL_OW 44
16367: PPUSH
16368: LD_VAR 0 3
16372: PPUSH
16373: CALL_OW 52
// AgressiveMove ( veh , [ [ 178 , 137 ] ] ) ;
16377: LD_VAR 0 3
16381: PPUSH
16382: LD_INT 178
16384: PUSH
16385: LD_INT 137
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: PUSH
16392: EMPTY
16393: LIST
16394: PPUSH
16395: CALL 57803 0 2
// wait ( 0 0$2 ) ;
16399: LD_INT 70
16401: PPUSH
16402: CALL_OW 67
// end ;
16406: GO 16240
16408: POP
16409: POP
// end ;
16410: LD_VAR 0 1
16414: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i , tmp ;
16415: LD_INT 22
16417: PUSH
16418: LD_INT 3
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PUSH
16425: LD_INT 32
16427: PUSH
16428: LD_INT 1
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: PPUSH
16439: CALL_OW 69
16443: IFFALSE 16531
16445: GO 16447
16447: DISABLE
16448: LD_INT 0
16450: PPUSH
16451: PPUSH
// begin enable ;
16452: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) ;
16453: LD_ADDR_VAR 0 2
16457: PUSH
16458: LD_INT 22
16460: PUSH
16461: LD_INT 3
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: PUSH
16468: LD_INT 32
16470: PUSH
16471: LD_INT 1
16473: PUSH
16474: EMPTY
16475: LIST
16476: LIST
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PPUSH
16482: CALL_OW 69
16486: ST_TO_ADDR
// for i in tmp do
16487: LD_ADDR_VAR 0 1
16491: PUSH
16492: LD_VAR 0 2
16496: PUSH
16497: FOR_IN
16498: IFFALSE 16529
// if GetFuel ( i ) < 3 then
16500: LD_VAR 0 1
16504: PPUSH
16505: CALL_OW 261
16509: PUSH
16510: LD_INT 3
16512: LESS
16513: IFFALSE 16527
// SetFuel ( i , 3 ) ;
16515: LD_VAR 0 1
16519: PPUSH
16520: LD_INT 3
16522: PPUSH
16523: CALL_OW 240
16527: GO 16497
16529: POP
16530: POP
// end ;
16531: PPOPN 2
16533: END
// every 0 0$1 trigger russianAttack and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i , mech , tmp ;
16534: LD_EXP 8
16538: IFFALSE 16570
16540: PUSH
16541: LD_INT 22
16543: PUSH
16544: LD_INT 3
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: PUSH
16551: LD_INT 21
16553: PUSH
16554: LD_INT 1
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: PPUSH
16565: CALL_OW 69
16569: AND
16570: IFFALSE 16834
16572: GO 16574
16574: DISABLE
16575: LD_INT 0
16577: PPUSH
16578: PPUSH
16579: PPUSH
// begin enable ;
16580: ENABLE
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] ] ) ;
16581: LD_ADDR_VAR 0 2
16585: PUSH
16586: LD_INT 22
16588: PUSH
16589: LD_INT 3
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: LD_INT 25
16598: PUSH
16599: LD_INT 3
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: PUSH
16606: LD_INT 3
16608: PUSH
16609: LD_INT 55
16611: PUSH
16612: EMPTY
16613: LIST
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: LIST
16623: PPUSH
16624: CALL_OW 69
16628: ST_TO_ADDR
// if mech then
16629: LD_VAR 0 2
16633: IFFALSE 16703
// for i in mech do
16635: LD_ADDR_VAR 0 1
16639: PUSH
16640: LD_VAR 0 2
16644: PUSH
16645: FOR_IN
16646: IFFALSE 16701
// begin if IsInArea ( i , escapeArea ) then
16648: LD_VAR 0 1
16652: PPUSH
16653: LD_INT 13
16655: PPUSH
16656: CALL_OW 308
16660: IFFALSE 16673
// RemoveUnit ( i ) else
16662: LD_VAR 0 1
16666: PPUSH
16667: CALL_OW 64
16671: GO 16699
// if IsOk ( i ) then
16673: LD_VAR 0 1
16677: PPUSH
16678: CALL_OW 302
16682: IFFALSE 16699
// ComMoveXY ( i , 196 , 155 ) ;
16684: LD_VAR 0 1
16688: PPUSH
16689: LD_INT 196
16691: PPUSH
16692: LD_INT 155
16694: PPUSH
16695: CALL_OW 111
// end ;
16699: GO 16645
16701: POP
16702: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_apeman_soldier ] , [ f_type , unit_vehicle ] ] , [ f_ok ] ] ) ;
16703: LD_ADDR_VAR 0 3
16707: PUSH
16708: LD_INT 22
16710: PUSH
16711: LD_INT 3
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: PUSH
16718: LD_INT 2
16720: PUSH
16721: LD_INT 25
16723: PUSH
16724: LD_INT 1
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: LD_INT 25
16733: PUSH
16734: LD_INT 15
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: PUSH
16741: LD_INT 21
16743: PUSH
16744: LD_INT 2
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: PUSH
16757: LD_INT 50
16759: PUSH
16760: EMPTY
16761: LIST
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: LIST
16767: PPUSH
16768: CALL_OW 69
16772: ST_TO_ADDR
// if tmp then
16773: LD_VAR 0 3
16777: IFFALSE 16834
// AgressiveMove ( tmp , [ [ 171 , 106 ] , [ 145 , 69 ] , [ 132 , 38 ] , [ 126 , 15 ] ] ) ;
16779: LD_VAR 0 3
16783: PPUSH
16784: LD_INT 171
16786: PUSH
16787: LD_INT 106
16789: PUSH
16790: EMPTY
16791: LIST
16792: LIST
16793: PUSH
16794: LD_INT 145
16796: PUSH
16797: LD_INT 69
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: PUSH
16804: LD_INT 132
16806: PUSH
16807: LD_INT 38
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PUSH
16814: LD_INT 126
16816: PUSH
16817: LD_INT 15
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: PPUSH
16830: CALL 57803 0 2
// end ; end_of_file
16834: PPOPN 3
16836: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16837: LD_INT 0
16839: PPUSH
16840: PPUSH
// if exist_mode then
16841: LD_VAR 0 2
16845: IFFALSE 16891
// begin unit := CreateCharacter ( prefix & ident ) ;
16847: LD_ADDR_VAR 0 5
16851: PUSH
16852: LD_VAR 0 3
16856: PUSH
16857: LD_VAR 0 1
16861: STR
16862: PPUSH
16863: CALL_OW 34
16867: ST_TO_ADDR
// if unit then
16868: LD_VAR 0 5
16872: IFFALSE 16889
// DeleteCharacters ( prefix & ident ) ;
16874: LD_VAR 0 3
16878: PUSH
16879: LD_VAR 0 1
16883: STR
16884: PPUSH
16885: CALL_OW 40
// end else
16889: GO 16906
// unit := NewCharacter ( ident ) ;
16891: LD_ADDR_VAR 0 5
16895: PUSH
16896: LD_VAR 0 1
16900: PPUSH
16901: CALL_OW 25
16905: ST_TO_ADDR
// result := unit ;
16906: LD_ADDR_VAR 0 4
16910: PUSH
16911: LD_VAR 0 5
16915: ST_TO_ADDR
// end ;
16916: LD_VAR 0 4
16920: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
16921: LD_INT 0
16923: PPUSH
16924: PPUSH
// if exist_mode then
16925: LD_VAR 0 2
16929: IFFALSE 16954
// unit := CreateCharacter ( prefix & ident ) else
16931: LD_ADDR_VAR 0 5
16935: PUSH
16936: LD_VAR 0 3
16940: PUSH
16941: LD_VAR 0 1
16945: STR
16946: PPUSH
16947: CALL_OW 34
16951: ST_TO_ADDR
16952: GO 16969
// unit := NewCharacter ( ident ) ;
16954: LD_ADDR_VAR 0 5
16958: PUSH
16959: LD_VAR 0 1
16963: PPUSH
16964: CALL_OW 25
16968: ST_TO_ADDR
// result := unit ;
16969: LD_ADDR_VAR 0 4
16973: PUSH
16974: LD_VAR 0 5
16978: ST_TO_ADDR
// end ;
16979: LD_VAR 0 4
16983: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16984: LD_INT 0
16986: PPUSH
16987: PPUSH
// if not side or not nation then
16988: LD_VAR 0 1
16992: NOT
16993: IFTRUE 17002
16995: PUSH
16996: LD_VAR 0 2
17000: NOT
17001: OR
17002: IFFALSE 17006
// exit ;
17004: GO 17800
// case nation of nation_american :
17006: LD_VAR 0 2
17010: PUSH
17011: LD_INT 1
17013: DOUBLE
17014: EQUAL
17015: IFTRUE 17019
17017: GO 17241
17019: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
17020: LD_ADDR_VAR 0 4
17024: PUSH
17025: LD_INT 35
17027: PUSH
17028: LD_INT 45
17030: PUSH
17031: LD_INT 46
17033: PUSH
17034: LD_INT 47
17036: PUSH
17037: LD_INT 82
17039: PUSH
17040: LD_INT 83
17042: PUSH
17043: LD_INT 84
17045: PUSH
17046: LD_INT 85
17048: PUSH
17049: LD_INT 86
17051: PUSH
17052: LD_INT 1
17054: PUSH
17055: LD_INT 2
17057: PUSH
17058: LD_INT 6
17060: PUSH
17061: LD_INT 15
17063: PUSH
17064: LD_INT 16
17066: PUSH
17067: LD_INT 7
17069: PUSH
17070: LD_INT 12
17072: PUSH
17073: LD_INT 13
17075: PUSH
17076: LD_INT 10
17078: PUSH
17079: LD_INT 14
17081: PUSH
17082: LD_INT 20
17084: PUSH
17085: LD_INT 21
17087: PUSH
17088: LD_INT 22
17090: PUSH
17091: LD_INT 25
17093: PUSH
17094: LD_INT 32
17096: PUSH
17097: LD_INT 27
17099: PUSH
17100: LD_INT 36
17102: PUSH
17103: LD_INT 69
17105: PUSH
17106: LD_INT 39
17108: PUSH
17109: LD_INT 34
17111: PUSH
17112: LD_INT 40
17114: PUSH
17115: LD_INT 48
17117: PUSH
17118: LD_INT 49
17120: PUSH
17121: LD_INT 50
17123: PUSH
17124: LD_INT 51
17126: PUSH
17127: LD_INT 52
17129: PUSH
17130: LD_INT 53
17132: PUSH
17133: LD_INT 54
17135: PUSH
17136: LD_INT 55
17138: PUSH
17139: LD_INT 56
17141: PUSH
17142: LD_INT 57
17144: PUSH
17145: LD_INT 58
17147: PUSH
17148: LD_INT 59
17150: PUSH
17151: LD_INT 60
17153: PUSH
17154: LD_INT 61
17156: PUSH
17157: LD_INT 62
17159: PUSH
17160: LD_INT 80
17162: PUSH
17163: LD_INT 82
17165: PUSH
17166: LD_INT 83
17168: PUSH
17169: LD_INT 84
17171: PUSH
17172: LD_INT 85
17174: PUSH
17175: LD_INT 86
17177: PUSH
17178: LD_INT 90
17180: PUSH
17181: LD_INT 93
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: ST_TO_ADDR
17239: GO 17722
17241: LD_INT 2
17243: DOUBLE
17244: EQUAL
17245: IFTRUE 17249
17247: GO 17483
17249: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
17250: LD_ADDR_VAR 0 4
17254: PUSH
17255: LD_INT 35
17257: PUSH
17258: LD_INT 45
17260: PUSH
17261: LD_INT 46
17263: PUSH
17264: LD_INT 47
17266: PUSH
17267: LD_INT 82
17269: PUSH
17270: LD_INT 83
17272: PUSH
17273: LD_INT 84
17275: PUSH
17276: LD_INT 85
17278: PUSH
17279: LD_INT 87
17281: PUSH
17282: LD_INT 70
17284: PUSH
17285: LD_INT 1
17287: PUSH
17288: LD_INT 11
17290: PUSH
17291: LD_INT 3
17293: PUSH
17294: LD_INT 4
17296: PUSH
17297: LD_INT 5
17299: PUSH
17300: LD_INT 6
17302: PUSH
17303: LD_INT 15
17305: PUSH
17306: LD_INT 18
17308: PUSH
17309: LD_INT 7
17311: PUSH
17312: LD_INT 17
17314: PUSH
17315: LD_INT 8
17317: PUSH
17318: LD_INT 20
17320: PUSH
17321: LD_INT 21
17323: PUSH
17324: LD_INT 22
17326: PUSH
17327: LD_INT 72
17329: PUSH
17330: LD_INT 26
17332: PUSH
17333: LD_INT 69
17335: PUSH
17336: LD_INT 39
17338: PUSH
17339: LD_INT 40
17341: PUSH
17342: LD_INT 41
17344: PUSH
17345: LD_INT 42
17347: PUSH
17348: LD_INT 43
17350: PUSH
17351: LD_INT 48
17353: PUSH
17354: LD_INT 49
17356: PUSH
17357: LD_INT 50
17359: PUSH
17360: LD_INT 51
17362: PUSH
17363: LD_INT 52
17365: PUSH
17366: LD_INT 53
17368: PUSH
17369: LD_INT 54
17371: PUSH
17372: LD_INT 55
17374: PUSH
17375: LD_INT 56
17377: PUSH
17378: LD_INT 60
17380: PUSH
17381: LD_INT 61
17383: PUSH
17384: LD_INT 62
17386: PUSH
17387: LD_INT 66
17389: PUSH
17390: LD_INT 67
17392: PUSH
17393: LD_INT 68
17395: PUSH
17396: LD_INT 81
17398: PUSH
17399: LD_INT 82
17401: PUSH
17402: LD_INT 83
17404: PUSH
17405: LD_INT 84
17407: PUSH
17408: LD_INT 85
17410: PUSH
17411: LD_INT 87
17413: PUSH
17414: LD_INT 88
17416: PUSH
17417: LD_INT 92
17419: PUSH
17420: LD_INT 94
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: ST_TO_ADDR
17481: GO 17722
17483: LD_INT 3
17485: DOUBLE
17486: EQUAL
17487: IFTRUE 17491
17489: GO 17721
17491: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
17492: LD_ADDR_VAR 0 4
17496: PUSH
17497: LD_INT 46
17499: PUSH
17500: LD_INT 47
17502: PUSH
17503: LD_INT 1
17505: PUSH
17506: LD_INT 2
17508: PUSH
17509: LD_INT 82
17511: PUSH
17512: LD_INT 83
17514: PUSH
17515: LD_INT 84
17517: PUSH
17518: LD_INT 85
17520: PUSH
17521: LD_INT 86
17523: PUSH
17524: LD_INT 11
17526: PUSH
17527: LD_INT 9
17529: PUSH
17530: LD_INT 20
17532: PUSH
17533: LD_INT 19
17535: PUSH
17536: LD_INT 21
17538: PUSH
17539: LD_INT 24
17541: PUSH
17542: LD_INT 22
17544: PUSH
17545: LD_INT 25
17547: PUSH
17548: LD_INT 28
17550: PUSH
17551: LD_INT 29
17553: PUSH
17554: LD_INT 30
17556: PUSH
17557: LD_INT 31
17559: PUSH
17560: LD_INT 37
17562: PUSH
17563: LD_INT 38
17565: PUSH
17566: LD_INT 32
17568: PUSH
17569: LD_INT 27
17571: PUSH
17572: LD_INT 33
17574: PUSH
17575: LD_INT 69
17577: PUSH
17578: LD_INT 39
17580: PUSH
17581: LD_INT 34
17583: PUSH
17584: LD_INT 40
17586: PUSH
17587: LD_INT 71
17589: PUSH
17590: LD_INT 23
17592: PUSH
17593: LD_INT 44
17595: PUSH
17596: LD_INT 48
17598: PUSH
17599: LD_INT 49
17601: PUSH
17602: LD_INT 50
17604: PUSH
17605: LD_INT 51
17607: PUSH
17608: LD_INT 52
17610: PUSH
17611: LD_INT 53
17613: PUSH
17614: LD_INT 54
17616: PUSH
17617: LD_INT 55
17619: PUSH
17620: LD_INT 56
17622: PUSH
17623: LD_INT 57
17625: PUSH
17626: LD_INT 58
17628: PUSH
17629: LD_INT 59
17631: PUSH
17632: LD_INT 63
17634: PUSH
17635: LD_INT 64
17637: PUSH
17638: LD_INT 65
17640: PUSH
17641: LD_INT 82
17643: PUSH
17644: LD_INT 83
17646: PUSH
17647: LD_INT 84
17649: PUSH
17650: LD_INT 85
17652: PUSH
17653: LD_INT 86
17655: PUSH
17656: LD_INT 89
17658: PUSH
17659: LD_INT 91
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: ST_TO_ADDR
17719: GO 17722
17721: POP
// if state > - 1 and state < 3 then
17722: LD_VAR 0 3
17726: PUSH
17727: LD_INT 1
17729: NEG
17730: GREATER
17731: IFFALSE 17743
17733: PUSH
17734: LD_VAR 0 3
17738: PUSH
17739: LD_INT 3
17741: LESS
17742: AND
17743: IFFALSE 17800
// for i in result do
17745: LD_ADDR_VAR 0 5
17749: PUSH
17750: LD_VAR 0 4
17754: PUSH
17755: FOR_IN
17756: IFFALSE 17798
// if GetTech ( i , side ) <> state then
17758: LD_VAR 0 5
17762: PPUSH
17763: LD_VAR 0 1
17767: PPUSH
17768: CALL_OW 321
17772: PUSH
17773: LD_VAR 0 3
17777: NONEQUAL
17778: IFFALSE 17796
// result := result diff i ;
17780: LD_ADDR_VAR 0 4
17784: PUSH
17785: LD_VAR 0 4
17789: PUSH
17790: LD_VAR 0 5
17794: DIFF
17795: ST_TO_ADDR
17796: GO 17755
17798: POP
17799: POP
// end ;
17800: LD_VAR 0 4
17804: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17805: LD_INT 0
17807: PPUSH
17808: PPUSH
17809: PPUSH
// result := true ;
17810: LD_ADDR_VAR 0 3
17814: PUSH
17815: LD_INT 1
17817: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17818: LD_ADDR_VAR 0 5
17822: PUSH
17823: LD_VAR 0 2
17827: PPUSH
17828: CALL_OW 480
17832: ST_TO_ADDR
// if not tmp then
17833: LD_VAR 0 5
17837: NOT
17838: IFFALSE 17842
// exit ;
17840: GO 17891
// for i in tmp do
17842: LD_ADDR_VAR 0 4
17846: PUSH
17847: LD_VAR 0 5
17851: PUSH
17852: FOR_IN
17853: IFFALSE 17889
// if GetTech ( i , side ) <> state_researched then
17855: LD_VAR 0 4
17859: PPUSH
17860: LD_VAR 0 1
17864: PPUSH
17865: CALL_OW 321
17869: PUSH
17870: LD_INT 2
17872: NONEQUAL
17873: IFFALSE 17887
// begin result := false ;
17875: LD_ADDR_VAR 0 3
17879: PUSH
17880: LD_INT 0
17882: ST_TO_ADDR
// exit ;
17883: POP
17884: POP
17885: GO 17891
// end ;
17887: GO 17852
17889: POP
17890: POP
// end ;
17891: LD_VAR 0 3
17895: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17896: LD_INT 0
17898: PPUSH
17899: PPUSH
17900: PPUSH
17901: PPUSH
17902: PPUSH
17903: PPUSH
17904: PPUSH
17905: PPUSH
17906: PPUSH
17907: PPUSH
17908: PPUSH
17909: PPUSH
17910: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17911: LD_VAR 0 1
17915: NOT
17916: IFTRUE 17933
17918: PUSH
17919: LD_VAR 0 1
17923: PPUSH
17924: CALL_OW 257
17928: PUSH
17929: LD_INT 9
17931: NONEQUAL
17932: OR
17933: IFFALSE 17937
// exit ;
17935: GO 18516
// side := GetSide ( unit ) ;
17937: LD_ADDR_VAR 0 9
17941: PUSH
17942: LD_VAR 0 1
17946: PPUSH
17947: CALL_OW 255
17951: ST_TO_ADDR
// tech_space := tech_spacanom ;
17952: LD_ADDR_VAR 0 12
17956: PUSH
17957: LD_INT 29
17959: ST_TO_ADDR
// tech_time := tech_taurad ;
17960: LD_ADDR_VAR 0 13
17964: PUSH
17965: LD_INT 28
17967: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17968: LD_ADDR_VAR 0 11
17972: PUSH
17973: LD_VAR 0 1
17977: PPUSH
17978: CALL_OW 310
17982: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17983: LD_VAR 0 11
17987: PPUSH
17988: CALL_OW 247
17992: PUSH
17993: LD_INT 2
17995: EQUAL
17996: IFFALSE 18000
// exit ;
17998: GO 18516
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18000: LD_ADDR_VAR 0 8
18004: PUSH
18005: LD_INT 81
18007: PUSH
18008: LD_VAR 0 9
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 3
18019: PUSH
18020: LD_INT 21
18022: PUSH
18023: LD_INT 3
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PPUSH
18038: CALL_OW 69
18042: ST_TO_ADDR
// if not tmp then
18043: LD_VAR 0 8
18047: NOT
18048: IFFALSE 18052
// exit ;
18050: GO 18516
// if in_unit then
18052: LD_VAR 0 11
18056: IFFALSE 18080
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
18058: LD_ADDR_VAR 0 10
18062: PUSH
18063: LD_VAR 0 8
18067: PPUSH
18068: LD_VAR 0 11
18072: PPUSH
18073: CALL_OW 74
18077: ST_TO_ADDR
18078: GO 18100
// enemy := NearestUnitToUnit ( tmp , unit ) ;
18080: LD_ADDR_VAR 0 10
18084: PUSH
18085: LD_VAR 0 8
18089: PPUSH
18090: LD_VAR 0 1
18094: PPUSH
18095: CALL_OW 74
18099: ST_TO_ADDR
// if not enemy then
18100: LD_VAR 0 10
18104: NOT
18105: IFFALSE 18109
// exit ;
18107: GO 18516
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
18109: LD_VAR 0 11
18113: IFFALSE 18135
18115: PUSH
18116: LD_VAR 0 11
18120: PPUSH
18121: LD_VAR 0 10
18125: PPUSH
18126: CALL_OW 296
18130: PUSH
18131: LD_INT 13
18133: GREATER
18134: AND
18135: IFTRUE 18157
18137: PUSH
18138: LD_VAR 0 1
18142: PPUSH
18143: LD_VAR 0 10
18147: PPUSH
18148: CALL_OW 296
18152: PUSH
18153: LD_INT 12
18155: GREATER
18156: OR
18157: IFFALSE 18161
// exit ;
18159: GO 18516
// missile := [ 1 ] ;
18161: LD_ADDR_VAR 0 14
18165: PUSH
18166: LD_INT 1
18168: PUSH
18169: EMPTY
18170: LIST
18171: ST_TO_ADDR
// if Researched ( side , tech_space ) then
18172: LD_VAR 0 9
18176: PPUSH
18177: LD_VAR 0 12
18181: PPUSH
18182: CALL_OW 325
18186: IFFALSE 18215
// missile := Replace ( missile , missile + 1 , 2 ) ;
18188: LD_ADDR_VAR 0 14
18192: PUSH
18193: LD_VAR 0 14
18197: PPUSH
18198: LD_VAR 0 14
18202: PUSH
18203: LD_INT 1
18205: PLUS
18206: PPUSH
18207: LD_INT 2
18209: PPUSH
18210: CALL_OW 1
18214: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18215: LD_VAR 0 9
18219: PPUSH
18220: LD_VAR 0 13
18224: PPUSH
18225: CALL_OW 325
18229: IFFALSE 18253
18231: PUSH
18232: LD_VAR 0 10
18236: PPUSH
18237: CALL_OW 255
18241: PPUSH
18242: LD_VAR 0 13
18246: PPUSH
18247: CALL_OW 325
18251: NOT
18252: AND
18253: IFFALSE 18282
// missile := Replace ( missile , missile + 1 , 3 ) ;
18255: LD_ADDR_VAR 0 14
18259: PUSH
18260: LD_VAR 0 14
18264: PPUSH
18265: LD_VAR 0 14
18269: PUSH
18270: LD_INT 1
18272: PLUS
18273: PPUSH
18274: LD_INT 3
18276: PPUSH
18277: CALL_OW 1
18281: ST_TO_ADDR
// if missile < 2 then
18282: LD_VAR 0 14
18286: PUSH
18287: LD_INT 2
18289: LESS
18290: IFFALSE 18294
// exit ;
18292: GO 18516
// x := GetX ( enemy ) ;
18294: LD_ADDR_VAR 0 4
18298: PUSH
18299: LD_VAR 0 10
18303: PPUSH
18304: CALL_OW 250
18308: ST_TO_ADDR
// y := GetY ( enemy ) ;
18309: LD_ADDR_VAR 0 5
18313: PUSH
18314: LD_VAR 0 10
18318: PPUSH
18319: CALL_OW 251
18323: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18324: LD_ADDR_VAR 0 6
18328: PUSH
18329: LD_VAR 0 4
18333: PUSH
18334: LD_INT 1
18336: NEG
18337: PPUSH
18338: LD_INT 1
18340: PPUSH
18341: CALL_OW 12
18345: PLUS
18346: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18347: LD_ADDR_VAR 0 7
18351: PUSH
18352: LD_VAR 0 5
18356: PUSH
18357: LD_INT 1
18359: NEG
18360: PPUSH
18361: LD_INT 1
18363: PPUSH
18364: CALL_OW 12
18368: PLUS
18369: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18370: LD_VAR 0 6
18374: PPUSH
18375: LD_VAR 0 7
18379: PPUSH
18380: CALL_OW 488
18384: NOT
18385: IFFALSE 18407
// begin _x := x ;
18387: LD_ADDR_VAR 0 6
18391: PUSH
18392: LD_VAR 0 4
18396: ST_TO_ADDR
// _y := y ;
18397: LD_ADDR_VAR 0 7
18401: PUSH
18402: LD_VAR 0 5
18406: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18407: LD_ADDR_VAR 0 3
18411: PUSH
18412: LD_INT 1
18414: PPUSH
18415: LD_VAR 0 14
18419: PPUSH
18420: CALL_OW 12
18424: ST_TO_ADDR
// case i of 1 :
18425: LD_VAR 0 3
18429: PUSH
18430: LD_INT 1
18432: DOUBLE
18433: EQUAL
18434: IFTRUE 18438
18436: GO 18455
18438: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18439: LD_VAR 0 1
18443: PPUSH
18444: LD_VAR 0 10
18448: PPUSH
18449: CALL_OW 115
18453: GO 18516
18455: LD_INT 2
18457: DOUBLE
18458: EQUAL
18459: IFTRUE 18463
18461: GO 18485
18463: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18464: LD_VAR 0 1
18468: PPUSH
18469: LD_VAR 0 6
18473: PPUSH
18474: LD_VAR 0 7
18478: PPUSH
18479: CALL_OW 153
18483: GO 18516
18485: LD_INT 3
18487: DOUBLE
18488: EQUAL
18489: IFTRUE 18493
18491: GO 18515
18493: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18494: LD_VAR 0 1
18498: PPUSH
18499: LD_VAR 0 6
18503: PPUSH
18504: LD_VAR 0 7
18508: PPUSH
18509: CALL_OW 154
18513: GO 18516
18515: POP
// end ;
18516: LD_VAR 0 2
18520: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18521: LD_INT 0
18523: PPUSH
18524: PPUSH
18525: PPUSH
18526: PPUSH
18527: PPUSH
18528: PPUSH
// if not unit or not building then
18529: LD_VAR 0 1
18533: NOT
18534: IFTRUE 18543
18536: PUSH
18537: LD_VAR 0 2
18541: NOT
18542: OR
18543: IFFALSE 18547
// exit ;
18545: GO 18705
// x := GetX ( building ) ;
18547: LD_ADDR_VAR 0 5
18551: PUSH
18552: LD_VAR 0 2
18556: PPUSH
18557: CALL_OW 250
18561: ST_TO_ADDR
// y := GetY ( building ) ;
18562: LD_ADDR_VAR 0 6
18566: PUSH
18567: LD_VAR 0 2
18571: PPUSH
18572: CALL_OW 251
18576: ST_TO_ADDR
// for i := 0 to 5 do
18577: LD_ADDR_VAR 0 4
18581: PUSH
18582: DOUBLE
18583: LD_INT 0
18585: DEC
18586: ST_TO_ADDR
18587: LD_INT 5
18589: PUSH
18590: FOR_TO
18591: IFFALSE 18703
// begin _x := ShiftX ( x , i , 3 ) ;
18593: LD_ADDR_VAR 0 7
18597: PUSH
18598: LD_VAR 0 5
18602: PPUSH
18603: LD_VAR 0 4
18607: PPUSH
18608: LD_INT 3
18610: PPUSH
18611: CALL_OW 272
18615: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18616: LD_ADDR_VAR 0 8
18620: PUSH
18621: LD_VAR 0 6
18625: PPUSH
18626: LD_VAR 0 4
18630: PPUSH
18631: LD_INT 3
18633: PPUSH
18634: CALL_OW 273
18638: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18639: LD_VAR 0 7
18643: PPUSH
18644: LD_VAR 0 8
18648: PPUSH
18649: CALL_OW 488
18653: NOT
18654: IFFALSE 18658
// continue ;
18656: GO 18590
// if HexInfo ( _x , _y ) = 0 then
18658: LD_VAR 0 7
18662: PPUSH
18663: LD_VAR 0 8
18667: PPUSH
18668: CALL_OW 428
18672: PUSH
18673: LD_INT 0
18675: EQUAL
18676: IFFALSE 18701
// begin ComMoveXY ( unit , _x , _y ) ;
18678: LD_VAR 0 1
18682: PPUSH
18683: LD_VAR 0 7
18687: PPUSH
18688: LD_VAR 0 8
18692: PPUSH
18693: CALL_OW 111
// exit ;
18697: POP
18698: POP
18699: GO 18705
// end ; end ;
18701: GO 18590
18703: POP
18704: POP
// end ;
18705: LD_VAR 0 3
18709: RET
// export function ScanBase ( side , base_area ) ; begin
18710: LD_INT 0
18712: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18713: LD_ADDR_VAR 0 3
18717: PUSH
18718: LD_VAR 0 2
18722: PPUSH
18723: LD_INT 81
18725: PUSH
18726: LD_VAR 0 1
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: PPUSH
18735: CALL_OW 70
18739: ST_TO_ADDR
// end ;
18740: LD_VAR 0 3
18744: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18745: LD_INT 0
18747: PPUSH
18748: PPUSH
18749: PPUSH
18750: PPUSH
// result := false ;
18751: LD_ADDR_VAR 0 2
18755: PUSH
18756: LD_INT 0
18758: ST_TO_ADDR
// side := GetSide ( unit ) ;
18759: LD_ADDR_VAR 0 3
18763: PUSH
18764: LD_VAR 0 1
18768: PPUSH
18769: CALL_OW 255
18773: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18774: LD_ADDR_VAR 0 4
18778: PUSH
18779: LD_VAR 0 1
18783: PPUSH
18784: CALL_OW 248
18788: ST_TO_ADDR
// case nat of 1 :
18789: LD_VAR 0 4
18793: PUSH
18794: LD_INT 1
18796: DOUBLE
18797: EQUAL
18798: IFTRUE 18802
18800: GO 18813
18802: POP
// tech := tech_lassight ; 2 :
18803: LD_ADDR_VAR 0 5
18807: PUSH
18808: LD_INT 12
18810: ST_TO_ADDR
18811: GO 18852
18813: LD_INT 2
18815: DOUBLE
18816: EQUAL
18817: IFTRUE 18821
18819: GO 18832
18821: POP
// tech := tech_mortar ; 3 :
18822: LD_ADDR_VAR 0 5
18826: PUSH
18827: LD_INT 41
18829: ST_TO_ADDR
18830: GO 18852
18832: LD_INT 3
18834: DOUBLE
18835: EQUAL
18836: IFTRUE 18840
18838: GO 18851
18840: POP
// tech := tech_bazooka ; end ;
18841: LD_ADDR_VAR 0 5
18845: PUSH
18846: LD_INT 44
18848: ST_TO_ADDR
18849: GO 18852
18851: POP
// if Researched ( side , tech ) then
18852: LD_VAR 0 3
18856: PPUSH
18857: LD_VAR 0 5
18861: PPUSH
18862: CALL_OW 325
18866: IFFALSE 18893
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18868: LD_ADDR_VAR 0 2
18872: PUSH
18873: LD_INT 5
18875: PUSH
18876: LD_INT 8
18878: PUSH
18879: LD_INT 9
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: LIST
18886: PUSH
18887: LD_VAR 0 4
18891: ARRAY
18892: ST_TO_ADDR
// end ;
18893: LD_VAR 0 2
18897: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18898: LD_INT 0
18900: PPUSH
18901: PPUSH
18902: PPUSH
// if not mines then
18903: LD_VAR 0 2
18907: NOT
18908: IFFALSE 18912
// exit ;
18910: GO 19056
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18912: LD_ADDR_VAR 0 5
18916: PUSH
18917: LD_INT 81
18919: PUSH
18920: LD_VAR 0 1
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 3
18931: PUSH
18932: LD_INT 21
18934: PUSH
18935: LD_INT 3
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PPUSH
18950: CALL_OW 69
18954: ST_TO_ADDR
// for i in mines do
18955: LD_ADDR_VAR 0 4
18959: PUSH
18960: LD_VAR 0 2
18964: PUSH
18965: FOR_IN
18966: IFFALSE 19054
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18968: LD_VAR 0 4
18972: PUSH
18973: LD_INT 1
18975: ARRAY
18976: PPUSH
18977: LD_VAR 0 4
18981: PUSH
18982: LD_INT 2
18984: ARRAY
18985: PPUSH
18986: CALL_OW 458
18990: NOT
18991: IFFALSE 18995
// continue ;
18993: GO 18965
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18995: LD_VAR 0 4
18999: PUSH
19000: LD_INT 1
19002: ARRAY
19003: PPUSH
19004: LD_VAR 0 4
19008: PUSH
19009: LD_INT 2
19011: ARRAY
19012: PPUSH
19013: CALL_OW 428
19017: PUSH
19018: LD_VAR 0 5
19022: IN
19023: IFFALSE 19052
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
19025: LD_VAR 0 4
19029: PUSH
19030: LD_INT 1
19032: ARRAY
19033: PPUSH
19034: LD_VAR 0 4
19038: PUSH
19039: LD_INT 2
19041: ARRAY
19042: PPUSH
19043: LD_VAR 0 1
19047: PPUSH
19048: CALL_OW 456
// end ;
19052: GO 18965
19054: POP
19055: POP
// end ;
19056: LD_VAR 0 3
19060: RET
// export function Count ( array ) ; begin
19061: LD_INT 0
19063: PPUSH
// result := array + 0 ;
19064: LD_ADDR_VAR 0 2
19068: PUSH
19069: LD_VAR 0 1
19073: PUSH
19074: LD_INT 0
19076: PLUS
19077: ST_TO_ADDR
// end ;
19078: LD_VAR 0 2
19082: RET
// export function IsEmpty ( building ) ; begin
19083: LD_INT 0
19085: PPUSH
// if not building then
19086: LD_VAR 0 1
19090: NOT
19091: IFFALSE 19095
// exit ;
19093: GO 19138
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19095: LD_ADDR_VAR 0 2
19099: PUSH
19100: LD_VAR 0 1
19104: PUSH
19105: LD_INT 22
19107: PUSH
19108: LD_VAR 0 1
19112: PPUSH
19113: CALL_OW 255
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: LD_INT 58
19124: PUSH
19125: EMPTY
19126: LIST
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PPUSH
19132: CALL_OW 69
19136: IN
19137: ST_TO_ADDR
// end ;
19138: LD_VAR 0 2
19142: RET
// export function IsNotFull ( building ) ; var places ; begin
19143: LD_INT 0
19145: PPUSH
19146: PPUSH
// if not building then
19147: LD_VAR 0 1
19151: NOT
19152: IFFALSE 19156
// exit ;
19154: GO 19184
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
19156: LD_ADDR_VAR 0 2
19160: PUSH
19161: LD_VAR 0 1
19165: PPUSH
19166: LD_INT 3
19168: PUSH
19169: LD_INT 62
19171: PUSH
19172: EMPTY
19173: LIST
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PPUSH
19179: CALL_OW 72
19183: ST_TO_ADDR
// end ;
19184: LD_VAR 0 2
19188: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19189: LD_INT 0
19191: PPUSH
19192: PPUSH
19193: PPUSH
19194: PPUSH
// tmp := [ ] ;
19195: LD_ADDR_VAR 0 3
19199: PUSH
19200: EMPTY
19201: ST_TO_ADDR
// list := [ ] ;
19202: LD_ADDR_VAR 0 5
19206: PUSH
19207: EMPTY
19208: ST_TO_ADDR
// for i = 16 to 25 do
19209: LD_ADDR_VAR 0 4
19213: PUSH
19214: DOUBLE
19215: LD_INT 16
19217: DEC
19218: ST_TO_ADDR
19219: LD_INT 25
19221: PUSH
19222: FOR_TO
19223: IFFALSE 19296
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19225: LD_ADDR_VAR 0 3
19229: PUSH
19230: LD_VAR 0 3
19234: PUSH
19235: LD_INT 22
19237: PUSH
19238: LD_VAR 0 1
19242: PPUSH
19243: CALL_OW 255
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: PUSH
19252: LD_INT 91
19254: PUSH
19255: LD_VAR 0 1
19259: PUSH
19260: LD_INT 6
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 30
19270: PUSH
19271: LD_VAR 0 4
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: LIST
19284: PUSH
19285: EMPTY
19286: LIST
19287: PPUSH
19288: CALL_OW 69
19292: ADD
19293: ST_TO_ADDR
19294: GO 19222
19296: POP
19297: POP
// for i = 1 to tmp do
19298: LD_ADDR_VAR 0 4
19302: PUSH
19303: DOUBLE
19304: LD_INT 1
19306: DEC
19307: ST_TO_ADDR
19308: LD_VAR 0 3
19312: PUSH
19313: FOR_TO
19314: IFFALSE 19402
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19316: LD_ADDR_VAR 0 5
19320: PUSH
19321: LD_VAR 0 5
19325: PUSH
19326: LD_VAR 0 3
19330: PUSH
19331: LD_VAR 0 4
19335: ARRAY
19336: PPUSH
19337: CALL_OW 266
19341: PUSH
19342: LD_VAR 0 3
19346: PUSH
19347: LD_VAR 0 4
19351: ARRAY
19352: PPUSH
19353: CALL_OW 250
19357: PUSH
19358: LD_VAR 0 3
19362: PUSH
19363: LD_VAR 0 4
19367: ARRAY
19368: PPUSH
19369: CALL_OW 251
19373: PUSH
19374: LD_VAR 0 3
19378: PUSH
19379: LD_VAR 0 4
19383: ARRAY
19384: PPUSH
19385: CALL_OW 254
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: PUSH
19396: EMPTY
19397: LIST
19398: ADD
19399: ST_TO_ADDR
19400: GO 19313
19402: POP
19403: POP
// result := list ;
19404: LD_ADDR_VAR 0 2
19408: PUSH
19409: LD_VAR 0 5
19413: ST_TO_ADDR
// end ;
19414: LD_VAR 0 2
19418: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19419: LD_INT 0
19421: PPUSH
19422: PPUSH
19423: PPUSH
19424: PPUSH
19425: PPUSH
19426: PPUSH
19427: PPUSH
// if not factory then
19428: LD_VAR 0 1
19432: NOT
19433: IFFALSE 19437
// exit ;
19435: GO 20040
// if control = control_apeman then
19437: LD_VAR 0 4
19441: PUSH
19442: LD_INT 5
19444: EQUAL
19445: IFFALSE 19554
// begin tmp := UnitsInside ( factory ) ;
19447: LD_ADDR_VAR 0 8
19451: PUSH
19452: LD_VAR 0 1
19456: PPUSH
19457: CALL_OW 313
19461: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19462: LD_VAR 0 8
19466: PPUSH
19467: LD_INT 25
19469: PUSH
19470: LD_INT 12
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PPUSH
19477: CALL_OW 72
19481: NOT
19482: IFFALSE 19492
// control := control_manual ;
19484: LD_ADDR_VAR 0 4
19488: PUSH
19489: LD_INT 1
19491: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19492: LD_ADDR_VAR 0 8
19496: PUSH
19497: LD_VAR 0 1
19501: PPUSH
19502: CALL 19189 0 1
19506: ST_TO_ADDR
// if tmp then
19507: LD_VAR 0 8
19511: IFFALSE 19554
// begin for i in tmp do
19513: LD_ADDR_VAR 0 7
19517: PUSH
19518: LD_VAR 0 8
19522: PUSH
19523: FOR_IN
19524: IFFALSE 19552
// if i [ 1 ] = b_ext_radio then
19526: LD_VAR 0 7
19530: PUSH
19531: LD_INT 1
19533: ARRAY
19534: PUSH
19535: LD_INT 22
19537: EQUAL
19538: IFFALSE 19550
// begin control := control_remote ;
19540: LD_ADDR_VAR 0 4
19544: PUSH
19545: LD_INT 2
19547: ST_TO_ADDR
// break ;
19548: GO 19552
// end ;
19550: GO 19523
19552: POP
19553: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19554: LD_VAR 0 1
19558: PPUSH
19559: LD_VAR 0 2
19563: PPUSH
19564: LD_VAR 0 3
19568: PPUSH
19569: LD_VAR 0 4
19573: PPUSH
19574: LD_VAR 0 5
19578: PPUSH
19579: CALL_OW 448
19583: IFFALSE 19618
// begin result := [ chassis , engine , control , weapon ] ;
19585: LD_ADDR_VAR 0 6
19589: PUSH
19590: LD_VAR 0 2
19594: PUSH
19595: LD_VAR 0 3
19599: PUSH
19600: LD_VAR 0 4
19604: PUSH
19605: LD_VAR 0 5
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: ST_TO_ADDR
// exit ;
19616: GO 20040
// end ; _chassis := AvailableChassisList ( factory ) ;
19618: LD_ADDR_VAR 0 9
19622: PUSH
19623: LD_VAR 0 1
19627: PPUSH
19628: CALL_OW 475
19632: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19633: LD_ADDR_VAR 0 11
19637: PUSH
19638: LD_VAR 0 1
19642: PPUSH
19643: CALL_OW 476
19647: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19648: LD_ADDR_VAR 0 12
19652: PUSH
19653: LD_VAR 0 1
19657: PPUSH
19658: CALL_OW 477
19662: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19663: LD_ADDR_VAR 0 10
19667: PUSH
19668: LD_VAR 0 1
19672: PPUSH
19673: CALL_OW 478
19677: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19678: LD_VAR 0 9
19682: NOT
19683: IFTRUE 19692
19685: PUSH
19686: LD_VAR 0 11
19690: NOT
19691: OR
19692: IFTRUE 19701
19694: PUSH
19695: LD_VAR 0 12
19699: NOT
19700: OR
19701: IFTRUE 19710
19703: PUSH
19704: LD_VAR 0 10
19708: NOT
19709: OR
19710: IFFALSE 19745
// begin result := [ chassis , engine , control , weapon ] ;
19712: LD_ADDR_VAR 0 6
19716: PUSH
19717: LD_VAR 0 2
19721: PUSH
19722: LD_VAR 0 3
19726: PUSH
19727: LD_VAR 0 4
19731: PUSH
19732: LD_VAR 0 5
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: ST_TO_ADDR
// exit ;
19743: GO 20040
// end ; if not chassis in _chassis then
19745: LD_VAR 0 2
19749: PUSH
19750: LD_VAR 0 9
19754: IN
19755: NOT
19756: IFFALSE 19782
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19758: LD_ADDR_VAR 0 2
19762: PUSH
19763: LD_VAR 0 9
19767: PUSH
19768: LD_INT 1
19770: PPUSH
19771: LD_VAR 0 9
19775: PPUSH
19776: CALL_OW 12
19780: ARRAY
19781: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19782: LD_VAR 0 2
19786: PPUSH
19787: LD_VAR 0 3
19791: PPUSH
19792: CALL 20045 0 2
19796: NOT
19797: IFFALSE 19858
// repeat engine := _engine [ 1 ] ;
19799: LD_ADDR_VAR 0 3
19803: PUSH
19804: LD_VAR 0 11
19808: PUSH
19809: LD_INT 1
19811: ARRAY
19812: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19813: LD_ADDR_VAR 0 11
19817: PUSH
19818: LD_VAR 0 11
19822: PPUSH
19823: LD_INT 1
19825: PPUSH
19826: CALL_OW 3
19830: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19831: LD_VAR 0 2
19835: PPUSH
19836: LD_VAR 0 3
19840: PPUSH
19841: CALL 20045 0 2
19845: IFTRUE 19856
19847: PUSH
19848: LD_VAR 0 11
19852: PUSH
19853: EMPTY
19854: EQUAL
19855: OR
19856: IFFALSE 19799
// if not control in _control then
19858: LD_VAR 0 4
19862: PUSH
19863: LD_VAR 0 12
19867: IN
19868: NOT
19869: IFFALSE 19895
// control := _control [ rand ( 1 , _control ) ] ;
19871: LD_ADDR_VAR 0 4
19875: PUSH
19876: LD_VAR 0 12
19880: PUSH
19881: LD_INT 1
19883: PPUSH
19884: LD_VAR 0 12
19888: PPUSH
19889: CALL_OW 12
19893: ARRAY
19894: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19895: LD_VAR 0 2
19899: PPUSH
19900: LD_VAR 0 5
19904: PPUSH
19905: CALL 20267 0 2
19909: NOT
19910: IFFALSE 19971
// repeat weapon := _weapon [ 1 ] ;
19912: LD_ADDR_VAR 0 5
19916: PUSH
19917: LD_VAR 0 10
19921: PUSH
19922: LD_INT 1
19924: ARRAY
19925: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19926: LD_ADDR_VAR 0 10
19930: PUSH
19931: LD_VAR 0 10
19935: PPUSH
19936: LD_INT 1
19938: PPUSH
19939: CALL_OW 3
19943: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19944: LD_VAR 0 2
19948: PPUSH
19949: LD_VAR 0 5
19953: PPUSH
19954: CALL 20267 0 2
19958: IFTRUE 19969
19960: PUSH
19961: LD_VAR 0 10
19965: PUSH
19966: EMPTY
19967: EQUAL
19968: OR
19969: IFFALSE 19912
// result := [ ] ;
19971: LD_ADDR_VAR 0 6
19975: PUSH
19976: EMPTY
19977: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19978: LD_VAR 0 1
19982: PPUSH
19983: LD_VAR 0 2
19987: PPUSH
19988: LD_VAR 0 3
19992: PPUSH
19993: LD_VAR 0 4
19997: PPUSH
19998: LD_VAR 0 5
20002: PPUSH
20003: CALL_OW 448
20007: IFFALSE 20040
// result := [ chassis , engine , control , weapon ] ;
20009: LD_ADDR_VAR 0 6
20013: PUSH
20014: LD_VAR 0 2
20018: PUSH
20019: LD_VAR 0 3
20023: PUSH
20024: LD_VAR 0 4
20028: PUSH
20029: LD_VAR 0 5
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: ST_TO_ADDR
// end ;
20040: LD_VAR 0 6
20044: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
20045: LD_INT 0
20047: PPUSH
// if not chassis or not engine then
20048: LD_VAR 0 1
20052: NOT
20053: IFTRUE 20062
20055: PUSH
20056: LD_VAR 0 2
20060: NOT
20061: OR
20062: IFFALSE 20066
// exit ;
20064: GO 20262
// case engine of engine_solar :
20066: LD_VAR 0 2
20070: PUSH
20071: LD_INT 2
20073: DOUBLE
20074: EQUAL
20075: IFTRUE 20079
20077: GO 20117
20079: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20080: LD_ADDR_VAR 0 3
20084: PUSH
20085: LD_INT 11
20087: PUSH
20088: LD_INT 12
20090: PUSH
20091: LD_INT 13
20093: PUSH
20094: LD_INT 14
20096: PUSH
20097: LD_INT 1
20099: PUSH
20100: LD_INT 2
20102: PUSH
20103: LD_INT 3
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: ST_TO_ADDR
20115: GO 20246
20117: LD_INT 1
20119: DOUBLE
20120: EQUAL
20121: IFTRUE 20125
20123: GO 20187
20125: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20126: LD_ADDR_VAR 0 3
20130: PUSH
20131: LD_INT 11
20133: PUSH
20134: LD_INT 12
20136: PUSH
20137: LD_INT 13
20139: PUSH
20140: LD_INT 14
20142: PUSH
20143: LD_INT 1
20145: PUSH
20146: LD_INT 2
20148: PUSH
20149: LD_INT 3
20151: PUSH
20152: LD_INT 4
20154: PUSH
20155: LD_INT 5
20157: PUSH
20158: LD_INT 21
20160: PUSH
20161: LD_INT 23
20163: PUSH
20164: LD_INT 22
20166: PUSH
20167: LD_INT 24
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: ST_TO_ADDR
20185: GO 20246
20187: LD_INT 3
20189: DOUBLE
20190: EQUAL
20191: IFTRUE 20195
20193: GO 20245
20195: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20196: LD_ADDR_VAR 0 3
20200: PUSH
20201: LD_INT 13
20203: PUSH
20204: LD_INT 14
20206: PUSH
20207: LD_INT 2
20209: PUSH
20210: LD_INT 3
20212: PUSH
20213: LD_INT 4
20215: PUSH
20216: LD_INT 5
20218: PUSH
20219: LD_INT 21
20221: PUSH
20222: LD_INT 22
20224: PUSH
20225: LD_INT 23
20227: PUSH
20228: LD_INT 24
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: ST_TO_ADDR
20243: GO 20246
20245: POP
// result := ( chassis in result ) ;
20246: LD_ADDR_VAR 0 3
20250: PUSH
20251: LD_VAR 0 1
20255: PUSH
20256: LD_VAR 0 3
20260: IN
20261: ST_TO_ADDR
// end ;
20262: LD_VAR 0 3
20266: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20267: LD_INT 0
20269: PPUSH
// if not chassis or not weapon then
20270: LD_VAR 0 1
20274: NOT
20275: IFTRUE 20284
20277: PUSH
20278: LD_VAR 0 2
20282: NOT
20283: OR
20284: IFFALSE 20288
// exit ;
20286: GO 21382
// case weapon of us_machine_gun :
20288: LD_VAR 0 2
20292: PUSH
20293: LD_INT 2
20295: DOUBLE
20296: EQUAL
20297: IFTRUE 20301
20299: GO 20331
20301: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20302: LD_ADDR_VAR 0 3
20306: PUSH
20307: LD_INT 1
20309: PUSH
20310: LD_INT 2
20312: PUSH
20313: LD_INT 3
20315: PUSH
20316: LD_INT 4
20318: PUSH
20319: LD_INT 5
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: ST_TO_ADDR
20329: GO 21366
20331: LD_INT 3
20333: DOUBLE
20334: EQUAL
20335: IFTRUE 20339
20337: GO 20369
20339: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20340: LD_ADDR_VAR 0 3
20344: PUSH
20345: LD_INT 1
20347: PUSH
20348: LD_INT 2
20350: PUSH
20351: LD_INT 3
20353: PUSH
20354: LD_INT 4
20356: PUSH
20357: LD_INT 5
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: ST_TO_ADDR
20367: GO 21366
20369: LD_INT 11
20371: DOUBLE
20372: EQUAL
20373: IFTRUE 20377
20375: GO 20407
20377: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20378: LD_ADDR_VAR 0 3
20382: PUSH
20383: LD_INT 1
20385: PUSH
20386: LD_INT 2
20388: PUSH
20389: LD_INT 3
20391: PUSH
20392: LD_INT 4
20394: PUSH
20395: LD_INT 5
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: ST_TO_ADDR
20405: GO 21366
20407: LD_INT 4
20409: DOUBLE
20410: EQUAL
20411: IFTRUE 20415
20413: GO 20441
20415: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20416: LD_ADDR_VAR 0 3
20420: PUSH
20421: LD_INT 2
20423: PUSH
20424: LD_INT 3
20426: PUSH
20427: LD_INT 4
20429: PUSH
20430: LD_INT 5
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: ST_TO_ADDR
20439: GO 21366
20441: LD_INT 5
20443: DOUBLE
20444: EQUAL
20445: IFTRUE 20449
20447: GO 20475
20449: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20450: LD_ADDR_VAR 0 3
20454: PUSH
20455: LD_INT 2
20457: PUSH
20458: LD_INT 3
20460: PUSH
20461: LD_INT 4
20463: PUSH
20464: LD_INT 5
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: ST_TO_ADDR
20473: GO 21366
20475: LD_INT 9
20477: DOUBLE
20478: EQUAL
20479: IFTRUE 20483
20481: GO 20509
20483: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20484: LD_ADDR_VAR 0 3
20488: PUSH
20489: LD_INT 2
20491: PUSH
20492: LD_INT 3
20494: PUSH
20495: LD_INT 4
20497: PUSH
20498: LD_INT 5
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: ST_TO_ADDR
20507: GO 21366
20509: LD_INT 7
20511: DOUBLE
20512: EQUAL
20513: IFTRUE 20517
20515: GO 20543
20517: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20518: LD_ADDR_VAR 0 3
20522: PUSH
20523: LD_INT 2
20525: PUSH
20526: LD_INT 3
20528: PUSH
20529: LD_INT 4
20531: PUSH
20532: LD_INT 5
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: ST_TO_ADDR
20541: GO 21366
20543: LD_INT 12
20545: DOUBLE
20546: EQUAL
20547: IFTRUE 20551
20549: GO 20577
20551: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20552: LD_ADDR_VAR 0 3
20556: PUSH
20557: LD_INT 2
20559: PUSH
20560: LD_INT 3
20562: PUSH
20563: LD_INT 4
20565: PUSH
20566: LD_INT 5
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: ST_TO_ADDR
20575: GO 21366
20577: LD_INT 13
20579: DOUBLE
20580: EQUAL
20581: IFTRUE 20585
20583: GO 20611
20585: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20586: LD_ADDR_VAR 0 3
20590: PUSH
20591: LD_INT 2
20593: PUSH
20594: LD_INT 3
20596: PUSH
20597: LD_INT 4
20599: PUSH
20600: LD_INT 5
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: ST_TO_ADDR
20609: GO 21366
20611: LD_INT 14
20613: DOUBLE
20614: EQUAL
20615: IFTRUE 20619
20617: GO 20637
20619: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20620: LD_ADDR_VAR 0 3
20624: PUSH
20625: LD_INT 4
20627: PUSH
20628: LD_INT 5
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: ST_TO_ADDR
20635: GO 21366
20637: LD_INT 6
20639: DOUBLE
20640: EQUAL
20641: IFTRUE 20645
20643: GO 20663
20645: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20646: LD_ADDR_VAR 0 3
20650: PUSH
20651: LD_INT 4
20653: PUSH
20654: LD_INT 5
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: ST_TO_ADDR
20661: GO 21366
20663: LD_INT 10
20665: DOUBLE
20666: EQUAL
20667: IFTRUE 20671
20669: GO 20689
20671: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20672: LD_ADDR_VAR 0 3
20676: PUSH
20677: LD_INT 4
20679: PUSH
20680: LD_INT 5
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: ST_TO_ADDR
20687: GO 21366
20689: LD_INT 22
20691: DOUBLE
20692: EQUAL
20693: IFTRUE 20697
20695: GO 20723
20697: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20698: LD_ADDR_VAR 0 3
20702: PUSH
20703: LD_INT 11
20705: PUSH
20706: LD_INT 12
20708: PUSH
20709: LD_INT 13
20711: PUSH
20712: LD_INT 14
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: ST_TO_ADDR
20721: GO 21366
20723: LD_INT 23
20725: DOUBLE
20726: EQUAL
20727: IFTRUE 20731
20729: GO 20757
20731: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20732: LD_ADDR_VAR 0 3
20736: PUSH
20737: LD_INT 11
20739: PUSH
20740: LD_INT 12
20742: PUSH
20743: LD_INT 13
20745: PUSH
20746: LD_INT 14
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: ST_TO_ADDR
20755: GO 21366
20757: LD_INT 24
20759: DOUBLE
20760: EQUAL
20761: IFTRUE 20765
20763: GO 20791
20765: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20766: LD_ADDR_VAR 0 3
20770: PUSH
20771: LD_INT 11
20773: PUSH
20774: LD_INT 12
20776: PUSH
20777: LD_INT 13
20779: PUSH
20780: LD_INT 14
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: ST_TO_ADDR
20789: GO 21366
20791: LD_INT 30
20793: DOUBLE
20794: EQUAL
20795: IFTRUE 20799
20797: GO 20825
20799: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20800: LD_ADDR_VAR 0 3
20804: PUSH
20805: LD_INT 11
20807: PUSH
20808: LD_INT 12
20810: PUSH
20811: LD_INT 13
20813: PUSH
20814: LD_INT 14
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: ST_TO_ADDR
20823: GO 21366
20825: LD_INT 25
20827: DOUBLE
20828: EQUAL
20829: IFTRUE 20833
20831: GO 20851
20833: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20834: LD_ADDR_VAR 0 3
20838: PUSH
20839: LD_INT 13
20841: PUSH
20842: LD_INT 14
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: ST_TO_ADDR
20849: GO 21366
20851: LD_INT 27
20853: DOUBLE
20854: EQUAL
20855: IFTRUE 20859
20857: GO 20877
20859: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20860: LD_ADDR_VAR 0 3
20864: PUSH
20865: LD_INT 13
20867: PUSH
20868: LD_INT 14
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: ST_TO_ADDR
20875: GO 21366
20877: LD_INT 92
20879: DOUBLE
20880: EQUAL
20881: IFTRUE 20885
20883: GO 20911
20885: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20886: LD_ADDR_VAR 0 3
20890: PUSH
20891: LD_INT 11
20893: PUSH
20894: LD_INT 12
20896: PUSH
20897: LD_INT 13
20899: PUSH
20900: LD_INT 14
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: ST_TO_ADDR
20909: GO 21366
20911: LD_INT 28
20913: DOUBLE
20914: EQUAL
20915: IFTRUE 20919
20917: GO 20937
20919: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20920: LD_ADDR_VAR 0 3
20924: PUSH
20925: LD_INT 13
20927: PUSH
20928: LD_INT 14
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: ST_TO_ADDR
20935: GO 21366
20937: LD_INT 29
20939: DOUBLE
20940: EQUAL
20941: IFTRUE 20945
20943: GO 20963
20945: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20946: LD_ADDR_VAR 0 3
20950: PUSH
20951: LD_INT 13
20953: PUSH
20954: LD_INT 14
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: ST_TO_ADDR
20961: GO 21366
20963: LD_INT 31
20965: DOUBLE
20966: EQUAL
20967: IFTRUE 20971
20969: GO 20989
20971: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20972: LD_ADDR_VAR 0 3
20976: PUSH
20977: LD_INT 13
20979: PUSH
20980: LD_INT 14
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: ST_TO_ADDR
20987: GO 21366
20989: LD_INT 26
20991: DOUBLE
20992: EQUAL
20993: IFTRUE 20997
20995: GO 21015
20997: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20998: LD_ADDR_VAR 0 3
21002: PUSH
21003: LD_INT 13
21005: PUSH
21006: LD_INT 14
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: ST_TO_ADDR
21013: GO 21366
21015: LD_INT 42
21017: DOUBLE
21018: EQUAL
21019: IFTRUE 21023
21021: GO 21049
21023: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
21024: LD_ADDR_VAR 0 3
21028: PUSH
21029: LD_INT 21
21031: PUSH
21032: LD_INT 22
21034: PUSH
21035: LD_INT 23
21037: PUSH
21038: LD_INT 24
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: ST_TO_ADDR
21047: GO 21366
21049: LD_INT 43
21051: DOUBLE
21052: EQUAL
21053: IFTRUE 21057
21055: GO 21083
21057: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
21058: LD_ADDR_VAR 0 3
21062: PUSH
21063: LD_INT 21
21065: PUSH
21066: LD_INT 22
21068: PUSH
21069: LD_INT 23
21071: PUSH
21072: LD_INT 24
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: ST_TO_ADDR
21081: GO 21366
21083: LD_INT 44
21085: DOUBLE
21086: EQUAL
21087: IFTRUE 21091
21089: GO 21117
21091: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21092: LD_ADDR_VAR 0 3
21096: PUSH
21097: LD_INT 21
21099: PUSH
21100: LD_INT 22
21102: PUSH
21103: LD_INT 23
21105: PUSH
21106: LD_INT 24
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: ST_TO_ADDR
21115: GO 21366
21117: LD_INT 45
21119: DOUBLE
21120: EQUAL
21121: IFTRUE 21125
21123: GO 21151
21125: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21126: LD_ADDR_VAR 0 3
21130: PUSH
21131: LD_INT 21
21133: PUSH
21134: LD_INT 22
21136: PUSH
21137: LD_INT 23
21139: PUSH
21140: LD_INT 24
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: ST_TO_ADDR
21149: GO 21366
21151: LD_INT 49
21153: DOUBLE
21154: EQUAL
21155: IFTRUE 21159
21157: GO 21185
21159: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21160: LD_ADDR_VAR 0 3
21164: PUSH
21165: LD_INT 21
21167: PUSH
21168: LD_INT 22
21170: PUSH
21171: LD_INT 23
21173: PUSH
21174: LD_INT 24
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: ST_TO_ADDR
21183: GO 21366
21185: LD_INT 51
21187: DOUBLE
21188: EQUAL
21189: IFTRUE 21193
21191: GO 21219
21193: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21194: LD_ADDR_VAR 0 3
21198: PUSH
21199: LD_INT 21
21201: PUSH
21202: LD_INT 22
21204: PUSH
21205: LD_INT 23
21207: PUSH
21208: LD_INT 24
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: ST_TO_ADDR
21217: GO 21366
21219: LD_INT 52
21221: DOUBLE
21222: EQUAL
21223: IFTRUE 21227
21225: GO 21253
21227: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21228: LD_ADDR_VAR 0 3
21232: PUSH
21233: LD_INT 21
21235: PUSH
21236: LD_INT 22
21238: PUSH
21239: LD_INT 23
21241: PUSH
21242: LD_INT 24
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: ST_TO_ADDR
21251: GO 21366
21253: LD_INT 53
21255: DOUBLE
21256: EQUAL
21257: IFTRUE 21261
21259: GO 21279
21261: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21262: LD_ADDR_VAR 0 3
21266: PUSH
21267: LD_INT 23
21269: PUSH
21270: LD_INT 24
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: ST_TO_ADDR
21277: GO 21366
21279: LD_INT 46
21281: DOUBLE
21282: EQUAL
21283: IFTRUE 21287
21285: GO 21305
21287: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21288: LD_ADDR_VAR 0 3
21292: PUSH
21293: LD_INT 23
21295: PUSH
21296: LD_INT 24
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: ST_TO_ADDR
21303: GO 21366
21305: LD_INT 47
21307: DOUBLE
21308: EQUAL
21309: IFTRUE 21313
21311: GO 21331
21313: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
21314: LD_ADDR_VAR 0 3
21318: PUSH
21319: LD_INT 23
21321: PUSH
21322: LD_INT 24
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: ST_TO_ADDR
21329: GO 21366
21331: LD_INT 98
21333: DOUBLE
21334: EQUAL
21335: IFTRUE 21339
21337: GO 21365
21339: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21340: LD_ADDR_VAR 0 3
21344: PUSH
21345: LD_INT 21
21347: PUSH
21348: LD_INT 22
21350: PUSH
21351: LD_INT 23
21353: PUSH
21354: LD_INT 24
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: ST_TO_ADDR
21363: GO 21366
21365: POP
// result := ( chassis in result ) ;
21366: LD_ADDR_VAR 0 3
21370: PUSH
21371: LD_VAR 0 1
21375: PUSH
21376: LD_VAR 0 3
21380: IN
21381: ST_TO_ADDR
// end ;
21382: LD_VAR 0 3
21386: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21387: LD_INT 0
21389: PPUSH
21390: PPUSH
21391: PPUSH
21392: PPUSH
21393: PPUSH
21394: PPUSH
21395: PPUSH
// result := array ;
21396: LD_ADDR_VAR 0 5
21400: PUSH
21401: LD_VAR 0 1
21405: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21406: LD_VAR 0 1
21410: NOT
21411: IFTRUE 21420
21413: PUSH
21414: LD_VAR 0 2
21418: NOT
21419: OR
21420: IFTRUE 21429
21422: PUSH
21423: LD_VAR 0 3
21427: NOT
21428: OR
21429: IFTRUE 21443
21431: PUSH
21432: LD_VAR 0 2
21436: PUSH
21437: LD_VAR 0 1
21441: GREATER
21442: OR
21443: IFTRUE 21457
21445: PUSH
21446: LD_VAR 0 3
21450: PUSH
21451: LD_VAR 0 1
21455: GREATER
21456: OR
21457: IFFALSE 21461
// exit ;
21459: GO 21757
// if direction then
21461: LD_VAR 0 4
21465: IFFALSE 21529
// begin d := 1 ;
21467: LD_ADDR_VAR 0 9
21471: PUSH
21472: LD_INT 1
21474: ST_TO_ADDR
// if i_from > i_to then
21475: LD_VAR 0 2
21479: PUSH
21480: LD_VAR 0 3
21484: GREATER
21485: IFFALSE 21511
// length := ( array - i_from ) + i_to else
21487: LD_ADDR_VAR 0 11
21491: PUSH
21492: LD_VAR 0 1
21496: PUSH
21497: LD_VAR 0 2
21501: MINUS
21502: PUSH
21503: LD_VAR 0 3
21507: PLUS
21508: ST_TO_ADDR
21509: GO 21527
// length := i_to - i_from ;
21511: LD_ADDR_VAR 0 11
21515: PUSH
21516: LD_VAR 0 3
21520: PUSH
21521: LD_VAR 0 2
21525: MINUS
21526: ST_TO_ADDR
// end else
21527: GO 21590
// begin d := - 1 ;
21529: LD_ADDR_VAR 0 9
21533: PUSH
21534: LD_INT 1
21536: NEG
21537: ST_TO_ADDR
// if i_from > i_to then
21538: LD_VAR 0 2
21542: PUSH
21543: LD_VAR 0 3
21547: GREATER
21548: IFFALSE 21568
// length := i_from - i_to else
21550: LD_ADDR_VAR 0 11
21554: PUSH
21555: LD_VAR 0 2
21559: PUSH
21560: LD_VAR 0 3
21564: MINUS
21565: ST_TO_ADDR
21566: GO 21590
// length := ( array - i_to ) + i_from ;
21568: LD_ADDR_VAR 0 11
21572: PUSH
21573: LD_VAR 0 1
21577: PUSH
21578: LD_VAR 0 3
21582: MINUS
21583: PUSH
21584: LD_VAR 0 2
21588: PLUS
21589: ST_TO_ADDR
// end ; if not length then
21590: LD_VAR 0 11
21594: NOT
21595: IFFALSE 21599
// exit ;
21597: GO 21757
// tmp := array ;
21599: LD_ADDR_VAR 0 10
21603: PUSH
21604: LD_VAR 0 1
21608: ST_TO_ADDR
// for i = 1 to length do
21609: LD_ADDR_VAR 0 6
21613: PUSH
21614: DOUBLE
21615: LD_INT 1
21617: DEC
21618: ST_TO_ADDR
21619: LD_VAR 0 11
21623: PUSH
21624: FOR_TO
21625: IFFALSE 21745
// begin for j = 1 to array do
21627: LD_ADDR_VAR 0 7
21631: PUSH
21632: DOUBLE
21633: LD_INT 1
21635: DEC
21636: ST_TO_ADDR
21637: LD_VAR 0 1
21641: PUSH
21642: FOR_TO
21643: IFFALSE 21731
// begin k := j + d ;
21645: LD_ADDR_VAR 0 8
21649: PUSH
21650: LD_VAR 0 7
21654: PUSH
21655: LD_VAR 0 9
21659: PLUS
21660: ST_TO_ADDR
// if k > array then
21661: LD_VAR 0 8
21665: PUSH
21666: LD_VAR 0 1
21670: GREATER
21671: IFFALSE 21681
// k := 1 ;
21673: LD_ADDR_VAR 0 8
21677: PUSH
21678: LD_INT 1
21680: ST_TO_ADDR
// if not k then
21681: LD_VAR 0 8
21685: NOT
21686: IFFALSE 21698
// k := array ;
21688: LD_ADDR_VAR 0 8
21692: PUSH
21693: LD_VAR 0 1
21697: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21698: LD_ADDR_VAR 0 10
21702: PUSH
21703: LD_VAR 0 10
21707: PPUSH
21708: LD_VAR 0 8
21712: PPUSH
21713: LD_VAR 0 1
21717: PUSH
21718: LD_VAR 0 7
21722: ARRAY
21723: PPUSH
21724: CALL_OW 1
21728: ST_TO_ADDR
// end ;
21729: GO 21642
21731: POP
21732: POP
// array := tmp ;
21733: LD_ADDR_VAR 0 1
21737: PUSH
21738: LD_VAR 0 10
21742: ST_TO_ADDR
// end ;
21743: GO 21624
21745: POP
21746: POP
// result := array ;
21747: LD_ADDR_VAR 0 5
21751: PUSH
21752: LD_VAR 0 1
21756: ST_TO_ADDR
// end ;
21757: LD_VAR 0 5
21761: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21762: LD_INT 0
21764: PPUSH
21765: PPUSH
// result := 0 ;
21766: LD_ADDR_VAR 0 3
21770: PUSH
21771: LD_INT 0
21773: ST_TO_ADDR
// if not array or not value in array then
21774: LD_VAR 0 1
21778: NOT
21779: IFTRUE 21794
21781: PUSH
21782: LD_VAR 0 2
21786: PUSH
21787: LD_VAR 0 1
21791: IN
21792: NOT
21793: OR
21794: IFFALSE 21798
// exit ;
21796: GO 21852
// for i = 1 to array do
21798: LD_ADDR_VAR 0 4
21802: PUSH
21803: DOUBLE
21804: LD_INT 1
21806: DEC
21807: ST_TO_ADDR
21808: LD_VAR 0 1
21812: PUSH
21813: FOR_TO
21814: IFFALSE 21850
// if value = array [ i ] then
21816: LD_VAR 0 2
21820: PUSH
21821: LD_VAR 0 1
21825: PUSH
21826: LD_VAR 0 4
21830: ARRAY
21831: EQUAL
21832: IFFALSE 21848
// begin result := i ;
21834: LD_ADDR_VAR 0 3
21838: PUSH
21839: LD_VAR 0 4
21843: ST_TO_ADDR
// exit ;
21844: POP
21845: POP
21846: GO 21852
// end ;
21848: GO 21813
21850: POP
21851: POP
// end ;
21852: LD_VAR 0 3
21856: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21857: LD_INT 0
21859: PPUSH
// vc_chassis := chassis ;
21860: LD_ADDR_OWVAR 37
21864: PUSH
21865: LD_VAR 0 1
21869: ST_TO_ADDR
// vc_engine := engine ;
21870: LD_ADDR_OWVAR 39
21874: PUSH
21875: LD_VAR 0 2
21879: ST_TO_ADDR
// vc_control := control ;
21880: LD_ADDR_OWVAR 38
21884: PUSH
21885: LD_VAR 0 3
21889: ST_TO_ADDR
// vc_weapon := weapon ;
21890: LD_ADDR_OWVAR 40
21894: PUSH
21895: LD_VAR 0 4
21899: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21900: LD_ADDR_OWVAR 41
21904: PUSH
21905: LD_VAR 0 5
21909: ST_TO_ADDR
// end ;
21910: LD_VAR 0 6
21914: RET
// export function WantPlant ( unit ) ; var task ; begin
21915: LD_INT 0
21917: PPUSH
21918: PPUSH
// result := false ;
21919: LD_ADDR_VAR 0 2
21923: PUSH
21924: LD_INT 0
21926: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21927: LD_ADDR_VAR 0 3
21931: PUSH
21932: LD_VAR 0 1
21936: PPUSH
21937: CALL_OW 437
21941: ST_TO_ADDR
// if task then
21942: LD_VAR 0 3
21946: IFFALSE 21974
// if task [ 1 ] [ 1 ] = p then
21948: LD_VAR 0 3
21952: PUSH
21953: LD_INT 1
21955: ARRAY
21956: PUSH
21957: LD_INT 1
21959: ARRAY
21960: PUSH
21961: LD_STRING p
21963: EQUAL
21964: IFFALSE 21974
// result := true ;
21966: LD_ADDR_VAR 0 2
21970: PUSH
21971: LD_INT 1
21973: ST_TO_ADDR
// end ;
21974: LD_VAR 0 2
21978: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21979: LD_INT 0
21981: PPUSH
21982: PPUSH
21983: PPUSH
21984: PPUSH
// if pos < 1 then
21985: LD_VAR 0 2
21989: PUSH
21990: LD_INT 1
21992: LESS
21993: IFFALSE 21997
// exit ;
21995: GO 22300
// if pos = 1 then
21997: LD_VAR 0 2
22001: PUSH
22002: LD_INT 1
22004: EQUAL
22005: IFFALSE 22038
// result := Replace ( arr , pos [ 1 ] , value ) else
22007: LD_ADDR_VAR 0 4
22011: PUSH
22012: LD_VAR 0 1
22016: PPUSH
22017: LD_VAR 0 2
22021: PUSH
22022: LD_INT 1
22024: ARRAY
22025: PPUSH
22026: LD_VAR 0 3
22030: PPUSH
22031: CALL_OW 1
22035: ST_TO_ADDR
22036: GO 22300
// begin tmp := arr ;
22038: LD_ADDR_VAR 0 6
22042: PUSH
22043: LD_VAR 0 1
22047: ST_TO_ADDR
// s_arr := [ tmp ] ;
22048: LD_ADDR_VAR 0 7
22052: PUSH
22053: LD_VAR 0 6
22057: PUSH
22058: EMPTY
22059: LIST
22060: ST_TO_ADDR
// for i = 1 to pos - 1 do
22061: LD_ADDR_VAR 0 5
22065: PUSH
22066: DOUBLE
22067: LD_INT 1
22069: DEC
22070: ST_TO_ADDR
22071: LD_VAR 0 2
22075: PUSH
22076: LD_INT 1
22078: MINUS
22079: PUSH
22080: FOR_TO
22081: IFFALSE 22126
// begin tmp := tmp [ pos [ i ] ] ;
22083: LD_ADDR_VAR 0 6
22087: PUSH
22088: LD_VAR 0 6
22092: PUSH
22093: LD_VAR 0 2
22097: PUSH
22098: LD_VAR 0 5
22102: ARRAY
22103: ARRAY
22104: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
22105: LD_ADDR_VAR 0 7
22109: PUSH
22110: LD_VAR 0 7
22114: PUSH
22115: LD_VAR 0 6
22119: PUSH
22120: EMPTY
22121: LIST
22122: ADD
22123: ST_TO_ADDR
// end ;
22124: GO 22080
22126: POP
22127: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22128: LD_ADDR_VAR 0 6
22132: PUSH
22133: LD_VAR 0 6
22137: PPUSH
22138: LD_VAR 0 2
22142: PUSH
22143: LD_VAR 0 2
22147: ARRAY
22148: PPUSH
22149: LD_VAR 0 3
22153: PPUSH
22154: CALL_OW 1
22158: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22159: LD_ADDR_VAR 0 7
22163: PUSH
22164: LD_VAR 0 7
22168: PPUSH
22169: LD_VAR 0 7
22173: PPUSH
22174: LD_VAR 0 6
22178: PPUSH
22179: CALL_OW 1
22183: ST_TO_ADDR
// for i = s_arr downto 2 do
22184: LD_ADDR_VAR 0 5
22188: PUSH
22189: DOUBLE
22190: LD_VAR 0 7
22194: INC
22195: ST_TO_ADDR
22196: LD_INT 2
22198: PUSH
22199: FOR_DOWNTO
22200: IFFALSE 22284
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22202: LD_ADDR_VAR 0 6
22206: PUSH
22207: LD_VAR 0 7
22211: PUSH
22212: LD_VAR 0 5
22216: PUSH
22217: LD_INT 1
22219: MINUS
22220: ARRAY
22221: PPUSH
22222: LD_VAR 0 2
22226: PUSH
22227: LD_VAR 0 5
22231: PUSH
22232: LD_INT 1
22234: MINUS
22235: ARRAY
22236: PPUSH
22237: LD_VAR 0 7
22241: PUSH
22242: LD_VAR 0 5
22246: ARRAY
22247: PPUSH
22248: CALL_OW 1
22252: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22253: LD_ADDR_VAR 0 7
22257: PUSH
22258: LD_VAR 0 7
22262: PPUSH
22263: LD_VAR 0 5
22267: PUSH
22268: LD_INT 1
22270: MINUS
22271: PPUSH
22272: LD_VAR 0 6
22276: PPUSH
22277: CALL_OW 1
22281: ST_TO_ADDR
// end ;
22282: GO 22199
22284: POP
22285: POP
// result := s_arr [ 1 ] ;
22286: LD_ADDR_VAR 0 4
22290: PUSH
22291: LD_VAR 0 7
22295: PUSH
22296: LD_INT 1
22298: ARRAY
22299: ST_TO_ADDR
// end ; end ;
22300: LD_VAR 0 4
22304: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22305: LD_INT 0
22307: PPUSH
22308: PPUSH
// if not list then
22309: LD_VAR 0 1
22313: NOT
22314: IFFALSE 22318
// exit ;
22316: GO 22409
// i := list [ pos1 ] ;
22318: LD_ADDR_VAR 0 5
22322: PUSH
22323: LD_VAR 0 1
22327: PUSH
22328: LD_VAR 0 2
22332: ARRAY
22333: ST_TO_ADDR
// if not i then
22334: LD_VAR 0 5
22338: NOT
22339: IFFALSE 22343
// exit ;
22341: GO 22409
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22343: LD_ADDR_VAR 0 1
22347: PUSH
22348: LD_VAR 0 1
22352: PPUSH
22353: LD_VAR 0 2
22357: PPUSH
22358: LD_VAR 0 1
22362: PUSH
22363: LD_VAR 0 3
22367: ARRAY
22368: PPUSH
22369: CALL_OW 1
22373: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22374: LD_ADDR_VAR 0 1
22378: PUSH
22379: LD_VAR 0 1
22383: PPUSH
22384: LD_VAR 0 3
22388: PPUSH
22389: LD_VAR 0 5
22393: PPUSH
22394: CALL_OW 1
22398: ST_TO_ADDR
// result := list ;
22399: LD_ADDR_VAR 0 4
22403: PUSH
22404: LD_VAR 0 1
22408: ST_TO_ADDR
// end ;
22409: LD_VAR 0 4
22413: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22414: LD_INT 0
22416: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22417: LD_ADDR_VAR 0 5
22421: PUSH
22422: LD_VAR 0 1
22426: PPUSH
22427: CALL_OW 250
22431: PPUSH
22432: LD_VAR 0 1
22436: PPUSH
22437: CALL_OW 251
22441: PPUSH
22442: LD_VAR 0 2
22446: PPUSH
22447: LD_VAR 0 3
22451: PPUSH
22452: LD_VAR 0 4
22456: PPUSH
22457: CALL 22839 0 5
22461: ST_TO_ADDR
// end ;
22462: LD_VAR 0 5
22466: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
22467: LD_INT 0
22469: PPUSH
22470: PPUSH
22471: PPUSH
22472: PPUSH
// if not list or not unit then
22473: LD_VAR 0 2
22477: NOT
22478: IFTRUE 22487
22480: PUSH
22481: LD_VAR 0 1
22485: NOT
22486: OR
22487: IFFALSE 22491
// exit ;
22489: GO 22834
// result := [ ] ;
22491: LD_ADDR_VAR 0 5
22495: PUSH
22496: EMPTY
22497: ST_TO_ADDR
// for i in list do
22498: LD_ADDR_VAR 0 6
22502: PUSH
22503: LD_VAR 0 2
22507: PUSH
22508: FOR_IN
22509: IFFALSE 22727
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
22511: LD_ADDR_VAR 0 8
22515: PUSH
22516: LD_VAR 0 1
22520: PPUSH
22521: LD_VAR 0 6
22525: PUSH
22526: LD_INT 1
22528: ARRAY
22529: PPUSH
22530: LD_VAR 0 6
22534: PUSH
22535: LD_INT 2
22537: ARRAY
22538: PPUSH
22539: CALL_OW 297
22543: ST_TO_ADDR
// if not Count ( result ) then
22544: LD_VAR 0 5
22548: PPUSH
22549: CALL 19061 0 1
22553: NOT
22554: IFFALSE 22587
// begin result := Join ( result , [ i , tmp ] ) ;
22556: LD_ADDR_VAR 0 5
22560: PUSH
22561: LD_VAR 0 5
22565: PPUSH
22566: LD_VAR 0 6
22570: PUSH
22571: LD_VAR 0 8
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PPUSH
22580: CALL 55037 0 2
22584: ST_TO_ADDR
// continue ;
22585: GO 22508
// end ; if result [ result ] [ 2 ] <= tmp then
22587: LD_VAR 0 5
22591: PUSH
22592: LD_VAR 0 5
22596: ARRAY
22597: PUSH
22598: LD_INT 2
22600: ARRAY
22601: PUSH
22602: LD_VAR 0 8
22606: LESSEQUAL
22607: IFFALSE 22640
// result := Join ( result , [ i , tmp ] ) else
22609: LD_ADDR_VAR 0 5
22613: PUSH
22614: LD_VAR 0 5
22618: PPUSH
22619: LD_VAR 0 6
22623: PUSH
22624: LD_VAR 0 8
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PPUSH
22633: CALL 55037 0 2
22637: ST_TO_ADDR
22638: GO 22725
// begin for j := 1 to Count ( result ) do
22640: LD_ADDR_VAR 0 7
22644: PUSH
22645: DOUBLE
22646: LD_INT 1
22648: DEC
22649: ST_TO_ADDR
22650: LD_VAR 0 5
22654: PPUSH
22655: CALL 19061 0 1
22659: PUSH
22660: FOR_TO
22661: IFFALSE 22723
// begin if tmp < result [ j ] [ 2 ] then
22663: LD_VAR 0 8
22667: PUSH
22668: LD_VAR 0 5
22672: PUSH
22673: LD_VAR 0 7
22677: ARRAY
22678: PUSH
22679: LD_INT 2
22681: ARRAY
22682: LESS
22683: IFFALSE 22721
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22685: LD_ADDR_VAR 0 5
22689: PUSH
22690: LD_VAR 0 5
22694: PPUSH
22695: LD_VAR 0 7
22699: PPUSH
22700: LD_VAR 0 6
22704: PUSH
22705: LD_VAR 0 8
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: PPUSH
22714: CALL_OW 2
22718: ST_TO_ADDR
// break ;
22719: GO 22723
// end ; end ;
22721: GO 22660
22723: POP
22724: POP
// end ; end ;
22725: GO 22508
22727: POP
22728: POP
// if result and not asc then
22729: LD_VAR 0 5
22733: IFFALSE 22742
22735: PUSH
22736: LD_VAR 0 3
22740: NOT
22741: AND
22742: IFFALSE 22759
// result := ReverseArray ( result ) ;
22744: LD_ADDR_VAR 0 5
22748: PUSH
22749: LD_VAR 0 5
22753: PPUSH
22754: CALL 50117 0 1
22758: ST_TO_ADDR
// tmp := [ ] ;
22759: LD_ADDR_VAR 0 8
22763: PUSH
22764: EMPTY
22765: ST_TO_ADDR
// if mode then
22766: LD_VAR 0 4
22770: IFFALSE 22834
// begin for i := 1 to result do
22772: LD_ADDR_VAR 0 6
22776: PUSH
22777: DOUBLE
22778: LD_INT 1
22780: DEC
22781: ST_TO_ADDR
22782: LD_VAR 0 5
22786: PUSH
22787: FOR_TO
22788: IFFALSE 22822
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
22790: LD_ADDR_VAR 0 8
22794: PUSH
22795: LD_VAR 0 8
22799: PPUSH
22800: LD_VAR 0 5
22804: PUSH
22805: LD_VAR 0 6
22809: ARRAY
22810: PUSH
22811: LD_INT 1
22813: ARRAY
22814: PPUSH
22815: CALL 55037 0 2
22819: ST_TO_ADDR
22820: GO 22787
22822: POP
22823: POP
// result := tmp ;
22824: LD_ADDR_VAR 0 5
22828: PUSH
22829: LD_VAR 0 8
22833: ST_TO_ADDR
// end ; end ;
22834: LD_VAR 0 5
22838: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22839: LD_INT 0
22841: PPUSH
22842: PPUSH
22843: PPUSH
22844: PPUSH
// if not list then
22845: LD_VAR 0 3
22849: NOT
22850: IFFALSE 22854
// exit ;
22852: GO 23244
// result := [ ] ;
22854: LD_ADDR_VAR 0 6
22858: PUSH
22859: EMPTY
22860: ST_TO_ADDR
// for i in list do
22861: LD_ADDR_VAR 0 7
22865: PUSH
22866: LD_VAR 0 3
22870: PUSH
22871: FOR_IN
22872: IFFALSE 23074
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22874: LD_ADDR_VAR 0 9
22878: PUSH
22879: LD_VAR 0 7
22883: PPUSH
22884: LD_VAR 0 1
22888: PPUSH
22889: LD_VAR 0 2
22893: PPUSH
22894: CALL_OW 297
22898: ST_TO_ADDR
// if not result then
22899: LD_VAR 0 6
22903: NOT
22904: IFFALSE 22930
// result := [ [ i , tmp ] ] else
22906: LD_ADDR_VAR 0 6
22910: PUSH
22911: LD_VAR 0 7
22915: PUSH
22916: LD_VAR 0 9
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: EMPTY
22926: LIST
22927: ST_TO_ADDR
22928: GO 23072
// begin if result [ result ] [ 2 ] <= tmp then
22930: LD_VAR 0 6
22934: PUSH
22935: LD_VAR 0 6
22939: ARRAY
22940: PUSH
22941: LD_INT 2
22943: ARRAY
22944: PUSH
22945: LD_VAR 0 9
22949: LESSEQUAL
22950: IFFALSE 22992
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22952: LD_ADDR_VAR 0 6
22956: PUSH
22957: LD_VAR 0 6
22961: PPUSH
22962: LD_VAR 0 6
22966: PUSH
22967: LD_INT 1
22969: PLUS
22970: PPUSH
22971: LD_VAR 0 7
22975: PUSH
22976: LD_VAR 0 9
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PPUSH
22985: CALL_OW 2
22989: ST_TO_ADDR
22990: GO 23072
// for j := 1 to result do
22992: LD_ADDR_VAR 0 8
22996: PUSH
22997: DOUBLE
22998: LD_INT 1
23000: DEC
23001: ST_TO_ADDR
23002: LD_VAR 0 6
23006: PUSH
23007: FOR_TO
23008: IFFALSE 23070
// begin if tmp < result [ j ] [ 2 ] then
23010: LD_VAR 0 9
23014: PUSH
23015: LD_VAR 0 6
23019: PUSH
23020: LD_VAR 0 8
23024: ARRAY
23025: PUSH
23026: LD_INT 2
23028: ARRAY
23029: LESS
23030: IFFALSE 23068
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23032: LD_ADDR_VAR 0 6
23036: PUSH
23037: LD_VAR 0 6
23041: PPUSH
23042: LD_VAR 0 8
23046: PPUSH
23047: LD_VAR 0 7
23051: PUSH
23052: LD_VAR 0 9
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PPUSH
23061: CALL_OW 2
23065: ST_TO_ADDR
// break ;
23066: GO 23070
// end ; end ;
23068: GO 23007
23070: POP
23071: POP
// end ; end ;
23072: GO 22871
23074: POP
23075: POP
// if result and not asc then
23076: LD_VAR 0 6
23080: IFFALSE 23089
23082: PUSH
23083: LD_VAR 0 4
23087: NOT
23088: AND
23089: IFFALSE 23164
// begin tmp := result ;
23091: LD_ADDR_VAR 0 9
23095: PUSH
23096: LD_VAR 0 6
23100: ST_TO_ADDR
// for i = tmp downto 1 do
23101: LD_ADDR_VAR 0 7
23105: PUSH
23106: DOUBLE
23107: LD_VAR 0 9
23111: INC
23112: ST_TO_ADDR
23113: LD_INT 1
23115: PUSH
23116: FOR_DOWNTO
23117: IFFALSE 23162
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
23119: LD_ADDR_VAR 0 6
23123: PUSH
23124: LD_VAR 0 6
23128: PPUSH
23129: LD_VAR 0 9
23133: PUSH
23134: LD_VAR 0 7
23138: MINUS
23139: PUSH
23140: LD_INT 1
23142: PLUS
23143: PPUSH
23144: LD_VAR 0 9
23148: PUSH
23149: LD_VAR 0 7
23153: ARRAY
23154: PPUSH
23155: CALL_OW 1
23159: ST_TO_ADDR
23160: GO 23116
23162: POP
23163: POP
// end ; tmp := [ ] ;
23164: LD_ADDR_VAR 0 9
23168: PUSH
23169: EMPTY
23170: ST_TO_ADDR
// if mode then
23171: LD_VAR 0 5
23175: IFFALSE 23244
// begin for i = 1 to result do
23177: LD_ADDR_VAR 0 7
23181: PUSH
23182: DOUBLE
23183: LD_INT 1
23185: DEC
23186: ST_TO_ADDR
23187: LD_VAR 0 6
23191: PUSH
23192: FOR_TO
23193: IFFALSE 23232
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
23195: LD_ADDR_VAR 0 9
23199: PUSH
23200: LD_VAR 0 9
23204: PPUSH
23205: LD_VAR 0 7
23209: PPUSH
23210: LD_VAR 0 6
23214: PUSH
23215: LD_VAR 0 7
23219: ARRAY
23220: PUSH
23221: LD_INT 1
23223: ARRAY
23224: PPUSH
23225: CALL_OW 1
23229: ST_TO_ADDR
23230: GO 23192
23232: POP
23233: POP
// result := tmp ;
23234: LD_ADDR_VAR 0 6
23238: PUSH
23239: LD_VAR 0 9
23243: ST_TO_ADDR
// end ; end ;
23244: LD_VAR 0 6
23248: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
23249: LD_INT 0
23251: PPUSH
23252: PPUSH
23253: PPUSH
23254: PPUSH
23255: PPUSH
23256: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
23257: LD_ADDR_VAR 0 5
23261: PUSH
23262: LD_INT 0
23264: PUSH
23265: LD_INT 0
23267: PUSH
23268: LD_INT 0
23270: PUSH
23271: EMPTY
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: ST_TO_ADDR
// if not x or not y then
23279: LD_VAR 0 2
23283: NOT
23284: IFTRUE 23293
23286: PUSH
23287: LD_VAR 0 3
23291: NOT
23292: OR
23293: IFFALSE 23297
// exit ;
23295: GO 24953
// if not range then
23297: LD_VAR 0 4
23301: NOT
23302: IFFALSE 23312
// range := 10 ;
23304: LD_ADDR_VAR 0 4
23308: PUSH
23309: LD_INT 10
23311: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23312: LD_ADDR_VAR 0 8
23316: PUSH
23317: LD_INT 81
23319: PUSH
23320: LD_VAR 0 1
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: PUSH
23329: LD_INT 92
23331: PUSH
23332: LD_VAR 0 2
23336: PUSH
23337: LD_VAR 0 3
23341: PUSH
23342: LD_VAR 0 4
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: PUSH
23353: LD_INT 3
23355: PUSH
23356: LD_INT 21
23358: PUSH
23359: LD_INT 3
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: LIST
23374: PPUSH
23375: CALL_OW 69
23379: ST_TO_ADDR
// if not tmp then
23380: LD_VAR 0 8
23384: NOT
23385: IFFALSE 23389
// exit ;
23387: GO 24953
// for i in tmp do
23389: LD_ADDR_VAR 0 6
23393: PUSH
23394: LD_VAR 0 8
23398: PUSH
23399: FOR_IN
23400: IFFALSE 24928
// begin points := [ 0 , 0 , 0 ] ;
23402: LD_ADDR_VAR 0 9
23406: PUSH
23407: LD_INT 0
23409: PUSH
23410: LD_INT 0
23412: PUSH
23413: LD_INT 0
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: LIST
23420: ST_TO_ADDR
// bpoints := 1 ;
23421: LD_ADDR_VAR 0 10
23425: PUSH
23426: LD_INT 1
23428: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23429: LD_VAR 0 6
23433: PPUSH
23434: CALL_OW 247
23438: PUSH
23439: LD_INT 1
23441: DOUBLE
23442: EQUAL
23443: IFTRUE 23447
23445: GO 24029
23447: POP
// begin if GetClass ( i ) = 1 then
23448: LD_VAR 0 6
23452: PPUSH
23453: CALL_OW 257
23457: PUSH
23458: LD_INT 1
23460: EQUAL
23461: IFFALSE 23482
// points := [ 10 , 5 , 3 ] ;
23463: LD_ADDR_VAR 0 9
23467: PUSH
23468: LD_INT 10
23470: PUSH
23471: LD_INT 5
23473: PUSH
23474: LD_INT 3
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: LIST
23481: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23482: LD_VAR 0 6
23486: PPUSH
23487: CALL_OW 257
23491: PUSH
23492: LD_INT 2
23494: PUSH
23495: LD_INT 3
23497: PUSH
23498: LD_INT 4
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: LIST
23505: IN
23506: IFFALSE 23527
// points := [ 3 , 2 , 1 ] ;
23508: LD_ADDR_VAR 0 9
23512: PUSH
23513: LD_INT 3
23515: PUSH
23516: LD_INT 2
23518: PUSH
23519: LD_INT 1
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: LIST
23526: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23527: LD_VAR 0 6
23531: PPUSH
23532: CALL_OW 257
23536: PUSH
23537: LD_INT 5
23539: EQUAL
23540: IFFALSE 23561
// points := [ 130 , 5 , 2 ] ;
23542: LD_ADDR_VAR 0 9
23546: PUSH
23547: LD_INT 130
23549: PUSH
23550: LD_INT 5
23552: PUSH
23553: LD_INT 2
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: LIST
23560: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23561: LD_VAR 0 6
23565: PPUSH
23566: CALL_OW 257
23570: PUSH
23571: LD_INT 8
23573: EQUAL
23574: IFFALSE 23595
// points := [ 35 , 35 , 30 ] ;
23576: LD_ADDR_VAR 0 9
23580: PUSH
23581: LD_INT 35
23583: PUSH
23584: LD_INT 35
23586: PUSH
23587: LD_INT 30
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: LIST
23594: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23595: LD_VAR 0 6
23599: PPUSH
23600: CALL_OW 257
23604: PUSH
23605: LD_INT 9
23607: EQUAL
23608: IFFALSE 23629
// points := [ 20 , 55 , 40 ] ;
23610: LD_ADDR_VAR 0 9
23614: PUSH
23615: LD_INT 20
23617: PUSH
23618: LD_INT 55
23620: PUSH
23621: LD_INT 40
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: LIST
23628: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23629: LD_VAR 0 6
23633: PPUSH
23634: CALL_OW 257
23638: PUSH
23639: LD_INT 12
23641: PUSH
23642: LD_INT 16
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: IN
23649: IFFALSE 23670
// points := [ 5 , 3 , 2 ] ;
23651: LD_ADDR_VAR 0 9
23655: PUSH
23656: LD_INT 5
23658: PUSH
23659: LD_INT 3
23661: PUSH
23662: LD_INT 2
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: LIST
23669: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23670: LD_VAR 0 6
23674: PPUSH
23675: CALL_OW 257
23679: PUSH
23680: LD_INT 17
23682: EQUAL
23683: IFFALSE 23704
// points := [ 100 , 50 , 75 ] ;
23685: LD_ADDR_VAR 0 9
23689: PUSH
23690: LD_INT 100
23692: PUSH
23693: LD_INT 50
23695: PUSH
23696: LD_INT 75
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: LIST
23703: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23704: LD_VAR 0 6
23708: PPUSH
23709: CALL_OW 257
23713: PUSH
23714: LD_INT 15
23716: EQUAL
23717: IFFALSE 23738
// points := [ 10 , 5 , 3 ] ;
23719: LD_ADDR_VAR 0 9
23723: PUSH
23724: LD_INT 10
23726: PUSH
23727: LD_INT 5
23729: PUSH
23730: LD_INT 3
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: LIST
23737: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23738: LD_VAR 0 6
23742: PPUSH
23743: CALL_OW 257
23747: PUSH
23748: LD_INT 14
23750: EQUAL
23751: IFFALSE 23772
// points := [ 10 , 0 , 0 ] ;
23753: LD_ADDR_VAR 0 9
23757: PUSH
23758: LD_INT 10
23760: PUSH
23761: LD_INT 0
23763: PUSH
23764: LD_INT 0
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: LIST
23771: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23772: LD_VAR 0 6
23776: PPUSH
23777: CALL_OW 257
23781: PUSH
23782: LD_INT 11
23784: EQUAL
23785: IFFALSE 23806
// points := [ 30 , 10 , 5 ] ;
23787: LD_ADDR_VAR 0 9
23791: PUSH
23792: LD_INT 30
23794: PUSH
23795: LD_INT 10
23797: PUSH
23798: LD_INT 5
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: LIST
23805: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23806: LD_VAR 0 1
23810: PPUSH
23811: LD_INT 5
23813: PPUSH
23814: CALL_OW 321
23818: PUSH
23819: LD_INT 2
23821: EQUAL
23822: IFFALSE 23839
// bpoints := bpoints * 1.8 ;
23824: LD_ADDR_VAR 0 10
23828: PUSH
23829: LD_VAR 0 10
23833: PUSH
23834: LD_REAL  1.80000000000000E+0000
23837: MUL
23838: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23839: LD_VAR 0 6
23843: PPUSH
23844: CALL_OW 257
23848: PUSH
23849: LD_INT 1
23851: PUSH
23852: LD_INT 2
23854: PUSH
23855: LD_INT 3
23857: PUSH
23858: LD_INT 4
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: IN
23867: IFFALSE 23887
23869: PUSH
23870: LD_VAR 0 1
23874: PPUSH
23875: LD_INT 51
23877: PPUSH
23878: CALL_OW 321
23882: PUSH
23883: LD_INT 2
23885: EQUAL
23886: AND
23887: IFFALSE 23904
// bpoints := bpoints * 1.2 ;
23889: LD_ADDR_VAR 0 10
23893: PUSH
23894: LD_VAR 0 10
23898: PUSH
23899: LD_REAL  1.20000000000000E+0000
23902: MUL
23903: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23904: LD_VAR 0 6
23908: PPUSH
23909: CALL_OW 257
23913: PUSH
23914: LD_INT 5
23916: PUSH
23917: LD_INT 7
23919: PUSH
23920: LD_INT 9
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: LIST
23927: IN
23928: IFFALSE 23948
23930: PUSH
23931: LD_VAR 0 1
23935: PPUSH
23936: LD_INT 52
23938: PPUSH
23939: CALL_OW 321
23943: PUSH
23944: LD_INT 2
23946: EQUAL
23947: AND
23948: IFFALSE 23965
// bpoints := bpoints * 1.5 ;
23950: LD_ADDR_VAR 0 10
23954: PUSH
23955: LD_VAR 0 10
23959: PUSH
23960: LD_REAL  1.50000000000000E+0000
23963: MUL
23964: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23965: LD_VAR 0 1
23969: PPUSH
23970: LD_INT 66
23972: PPUSH
23973: CALL_OW 321
23977: PUSH
23978: LD_INT 2
23980: EQUAL
23981: IFFALSE 23998
// bpoints := bpoints * 1.1 ;
23983: LD_ADDR_VAR 0 10
23987: PUSH
23988: LD_VAR 0 10
23992: PUSH
23993: LD_REAL  1.10000000000000E+0000
23996: MUL
23997: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23998: LD_ADDR_VAR 0 10
24002: PUSH
24003: LD_VAR 0 10
24007: PUSH
24008: LD_VAR 0 6
24012: PPUSH
24013: LD_INT 1
24015: PPUSH
24016: CALL_OW 259
24020: PUSH
24021: LD_REAL  1.15000000000000E+0000
24024: MUL
24025: MUL
24026: ST_TO_ADDR
// end ; unit_vehicle :
24027: GO 24857
24029: LD_INT 2
24031: DOUBLE
24032: EQUAL
24033: IFTRUE 24037
24035: GO 24845
24037: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
24038: LD_VAR 0 6
24042: PPUSH
24043: CALL_OW 264
24047: PUSH
24048: LD_INT 2
24050: PUSH
24051: LD_INT 42
24053: PUSH
24054: LD_INT 24
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: LIST
24061: IN
24062: IFFALSE 24083
// points := [ 25 , 5 , 3 ] ;
24064: LD_ADDR_VAR 0 9
24068: PUSH
24069: LD_INT 25
24071: PUSH
24072: LD_INT 5
24074: PUSH
24075: LD_INT 3
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: LIST
24082: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
24083: LD_VAR 0 6
24087: PPUSH
24088: CALL_OW 264
24092: PUSH
24093: LD_INT 4
24095: PUSH
24096: LD_INT 43
24098: PUSH
24099: LD_INT 25
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: LIST
24106: IN
24107: IFFALSE 24128
// points := [ 40 , 15 , 5 ] ;
24109: LD_ADDR_VAR 0 9
24113: PUSH
24114: LD_INT 40
24116: PUSH
24117: LD_INT 15
24119: PUSH
24120: LD_INT 5
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: LIST
24127: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
24128: LD_VAR 0 6
24132: PPUSH
24133: CALL_OW 264
24137: PUSH
24138: LD_INT 3
24140: PUSH
24141: LD_INT 23
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: IN
24148: IFFALSE 24169
// points := [ 7 , 25 , 8 ] ;
24150: LD_ADDR_VAR 0 9
24154: PUSH
24155: LD_INT 7
24157: PUSH
24158: LD_INT 25
24160: PUSH
24161: LD_INT 8
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: LIST
24168: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
24169: LD_VAR 0 6
24173: PPUSH
24174: CALL_OW 264
24178: PUSH
24179: LD_INT 5
24181: PUSH
24182: LD_INT 27
24184: PUSH
24185: LD_INT 44
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: LIST
24192: IN
24193: IFFALSE 24214
// points := [ 14 , 50 , 16 ] ;
24195: LD_ADDR_VAR 0 9
24199: PUSH
24200: LD_INT 14
24202: PUSH
24203: LD_INT 50
24205: PUSH
24206: LD_INT 16
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: LIST
24213: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
24214: LD_VAR 0 6
24218: PPUSH
24219: CALL_OW 264
24223: PUSH
24224: LD_INT 6
24226: PUSH
24227: LD_INT 46
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: IN
24234: IFFALSE 24255
// points := [ 32 , 120 , 70 ] ;
24236: LD_ADDR_VAR 0 9
24240: PUSH
24241: LD_INT 32
24243: PUSH
24244: LD_INT 120
24246: PUSH
24247: LD_INT 70
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: LIST
24254: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
24255: LD_VAR 0 6
24259: PPUSH
24260: CALL_OW 264
24264: PUSH
24265: LD_INT 7
24267: PUSH
24268: LD_INT 28
24270: PUSH
24271: LD_INT 45
24273: PUSH
24274: LD_INT 92
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: IN
24283: IFFALSE 24304
// points := [ 35 , 20 , 45 ] ;
24285: LD_ADDR_VAR 0 9
24289: PUSH
24290: LD_INT 35
24292: PUSH
24293: LD_INT 20
24295: PUSH
24296: LD_INT 45
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: LIST
24303: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
24304: LD_VAR 0 6
24308: PPUSH
24309: CALL_OW 264
24313: PUSH
24314: LD_INT 47
24316: PUSH
24317: EMPTY
24318: LIST
24319: IN
24320: IFFALSE 24341
// points := [ 67 , 45 , 75 ] ;
24322: LD_ADDR_VAR 0 9
24326: PUSH
24327: LD_INT 67
24329: PUSH
24330: LD_INT 45
24332: PUSH
24333: LD_INT 75
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: LIST
24340: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24341: LD_VAR 0 6
24345: PPUSH
24346: CALL_OW 264
24350: PUSH
24351: LD_INT 26
24353: PUSH
24354: EMPTY
24355: LIST
24356: IN
24357: IFFALSE 24378
// points := [ 120 , 30 , 80 ] ;
24359: LD_ADDR_VAR 0 9
24363: PUSH
24364: LD_INT 120
24366: PUSH
24367: LD_INT 30
24369: PUSH
24370: LD_INT 80
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: LIST
24377: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24378: LD_VAR 0 6
24382: PPUSH
24383: CALL_OW 264
24387: PUSH
24388: LD_INT 22
24390: PUSH
24391: EMPTY
24392: LIST
24393: IN
24394: IFFALSE 24415
// points := [ 40 , 1 , 1 ] ;
24396: LD_ADDR_VAR 0 9
24400: PUSH
24401: LD_INT 40
24403: PUSH
24404: LD_INT 1
24406: PUSH
24407: LD_INT 1
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: LIST
24414: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24415: LD_VAR 0 6
24419: PPUSH
24420: CALL_OW 264
24424: PUSH
24425: LD_INT 29
24427: PUSH
24428: EMPTY
24429: LIST
24430: IN
24431: IFFALSE 24452
// points := [ 70 , 200 , 400 ] ;
24433: LD_ADDR_VAR 0 9
24437: PUSH
24438: LD_INT 70
24440: PUSH
24441: LD_INT 200
24443: PUSH
24444: LD_INT 400
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: LIST
24451: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24452: LD_VAR 0 6
24456: PPUSH
24457: CALL_OW 264
24461: PUSH
24462: LD_INT 14
24464: PUSH
24465: LD_INT 53
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: IN
24472: IFFALSE 24493
// points := [ 40 , 10 , 20 ] ;
24474: LD_ADDR_VAR 0 9
24478: PUSH
24479: LD_INT 40
24481: PUSH
24482: LD_INT 10
24484: PUSH
24485: LD_INT 20
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: LIST
24492: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24493: LD_VAR 0 6
24497: PPUSH
24498: CALL_OW 264
24502: PUSH
24503: LD_INT 9
24505: PUSH
24506: EMPTY
24507: LIST
24508: IN
24509: IFFALSE 24530
// points := [ 5 , 70 , 20 ] ;
24511: LD_ADDR_VAR 0 9
24515: PUSH
24516: LD_INT 5
24518: PUSH
24519: LD_INT 70
24521: PUSH
24522: LD_INT 20
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: LIST
24529: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24530: LD_VAR 0 6
24534: PPUSH
24535: CALL_OW 264
24539: PUSH
24540: LD_INT 10
24542: PUSH
24543: EMPTY
24544: LIST
24545: IN
24546: IFFALSE 24567
// points := [ 35 , 110 , 70 ] ;
24548: LD_ADDR_VAR 0 9
24552: PUSH
24553: LD_INT 35
24555: PUSH
24556: LD_INT 110
24558: PUSH
24559: LD_INT 70
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: LIST
24566: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24567: LD_VAR 0 6
24571: PPUSH
24572: CALL_OW 265
24576: PUSH
24577: LD_INT 25
24579: EQUAL
24580: IFFALSE 24601
// points := [ 80 , 65 , 100 ] ;
24582: LD_ADDR_VAR 0 9
24586: PUSH
24587: LD_INT 80
24589: PUSH
24590: LD_INT 65
24592: PUSH
24593: LD_INT 100
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: LIST
24600: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24601: LD_VAR 0 6
24605: PPUSH
24606: CALL_OW 263
24610: PUSH
24611: LD_INT 1
24613: EQUAL
24614: IFFALSE 24649
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24616: LD_ADDR_VAR 0 10
24620: PUSH
24621: LD_VAR 0 10
24625: PUSH
24626: LD_VAR 0 6
24630: PPUSH
24631: CALL_OW 311
24635: PPUSH
24636: LD_INT 3
24638: PPUSH
24639: CALL_OW 259
24643: PUSH
24644: LD_INT 4
24646: MUL
24647: MUL
24648: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24649: LD_VAR 0 6
24653: PPUSH
24654: CALL_OW 263
24658: PUSH
24659: LD_INT 2
24661: EQUAL
24662: IFFALSE 24713
// begin j := IsControledBy ( i ) ;
24664: LD_ADDR_VAR 0 7
24668: PUSH
24669: LD_VAR 0 6
24673: PPUSH
24674: CALL_OW 312
24678: ST_TO_ADDR
// if j then
24679: LD_VAR 0 7
24683: IFFALSE 24713
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24685: LD_ADDR_VAR 0 10
24689: PUSH
24690: LD_VAR 0 10
24694: PUSH
24695: LD_VAR 0 7
24699: PPUSH
24700: LD_INT 3
24702: PPUSH
24703: CALL_OW 259
24707: PUSH
24708: LD_INT 3
24710: MUL
24711: MUL
24712: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24713: LD_VAR 0 6
24717: PPUSH
24718: CALL_OW 264
24722: PUSH
24723: LD_INT 5
24725: PUSH
24726: LD_INT 6
24728: PUSH
24729: LD_INT 46
24731: PUSH
24732: LD_INT 44
24734: PUSH
24735: LD_INT 47
24737: PUSH
24738: LD_INT 45
24740: PUSH
24741: LD_INT 28
24743: PUSH
24744: LD_INT 7
24746: PUSH
24747: LD_INT 27
24749: PUSH
24750: LD_INT 29
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: IN
24765: IFFALSE 24785
24767: PUSH
24768: LD_VAR 0 1
24772: PPUSH
24773: LD_INT 52
24775: PPUSH
24776: CALL_OW 321
24780: PUSH
24781: LD_INT 2
24783: EQUAL
24784: AND
24785: IFFALSE 24802
// bpoints := bpoints * 1.2 ;
24787: LD_ADDR_VAR 0 10
24791: PUSH
24792: LD_VAR 0 10
24796: PUSH
24797: LD_REAL  1.20000000000000E+0000
24800: MUL
24801: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24802: LD_VAR 0 6
24806: PPUSH
24807: CALL_OW 264
24811: PUSH
24812: LD_INT 6
24814: PUSH
24815: LD_INT 46
24817: PUSH
24818: LD_INT 47
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: LIST
24825: IN
24826: IFFALSE 24843
// bpoints := bpoints * 1.2 ;
24828: LD_ADDR_VAR 0 10
24832: PUSH
24833: LD_VAR 0 10
24837: PUSH
24838: LD_REAL  1.20000000000000E+0000
24841: MUL
24842: ST_TO_ADDR
// end ; unit_building :
24843: GO 24857
24845: LD_INT 3
24847: DOUBLE
24848: EQUAL
24849: IFTRUE 24853
24851: GO 24856
24853: POP
// ; end ;
24854: GO 24857
24856: POP
// for j = 1 to 3 do
24857: LD_ADDR_VAR 0 7
24861: PUSH
24862: DOUBLE
24863: LD_INT 1
24865: DEC
24866: ST_TO_ADDR
24867: LD_INT 3
24869: PUSH
24870: FOR_TO
24871: IFFALSE 24924
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24873: LD_ADDR_VAR 0 5
24877: PUSH
24878: LD_VAR 0 5
24882: PPUSH
24883: LD_VAR 0 7
24887: PPUSH
24888: LD_VAR 0 5
24892: PUSH
24893: LD_VAR 0 7
24897: ARRAY
24898: PUSH
24899: LD_VAR 0 9
24903: PUSH
24904: LD_VAR 0 7
24908: ARRAY
24909: PUSH
24910: LD_VAR 0 10
24914: MUL
24915: PLUS
24916: PPUSH
24917: CALL_OW 1
24921: ST_TO_ADDR
24922: GO 24870
24924: POP
24925: POP
// end ;
24926: GO 23399
24928: POP
24929: POP
// result := Replace ( result , 4 , tmp ) ;
24930: LD_ADDR_VAR 0 5
24934: PUSH
24935: LD_VAR 0 5
24939: PPUSH
24940: LD_INT 4
24942: PPUSH
24943: LD_VAR 0 8
24947: PPUSH
24948: CALL_OW 1
24952: ST_TO_ADDR
// end ;
24953: LD_VAR 0 5
24957: RET
// export function DangerAtRange ( unit , range ) ; begin
24958: LD_INT 0
24960: PPUSH
// if not unit then
24961: LD_VAR 0 1
24965: NOT
24966: IFFALSE 24970
// exit ;
24968: GO 25015
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24970: LD_ADDR_VAR 0 3
24974: PUSH
24975: LD_VAR 0 1
24979: PPUSH
24980: CALL_OW 255
24984: PPUSH
24985: LD_VAR 0 1
24989: PPUSH
24990: CALL_OW 250
24994: PPUSH
24995: LD_VAR 0 1
24999: PPUSH
25000: CALL_OW 251
25004: PPUSH
25005: LD_VAR 0 2
25009: PPUSH
25010: CALL 23249 0 4
25014: ST_TO_ADDR
// end ;
25015: LD_VAR 0 3
25019: RET
// export function DangerInArea ( side , area ) ; begin
25020: LD_INT 0
25022: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
25023: LD_ADDR_VAR 0 3
25027: PUSH
25028: LD_VAR 0 2
25032: PPUSH
25033: LD_INT 81
25035: PUSH
25036: LD_VAR 0 1
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PPUSH
25045: CALL_OW 70
25049: ST_TO_ADDR
// end ;
25050: LD_VAR 0 3
25054: RET
// export function IsExtension ( b ) ; begin
25055: LD_INT 0
25057: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
25058: LD_ADDR_VAR 0 2
25062: PUSH
25063: LD_VAR 0 1
25067: PUSH
25068: LD_INT 23
25070: PUSH
25071: LD_INT 20
25073: PUSH
25074: LD_INT 22
25076: PUSH
25077: LD_INT 17
25079: PUSH
25080: LD_INT 24
25082: PUSH
25083: LD_INT 21
25085: PUSH
25086: LD_INT 19
25088: PUSH
25089: LD_INT 16
25091: PUSH
25092: LD_INT 25
25094: PUSH
25095: LD_INT 18
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: IN
25110: ST_TO_ADDR
// end ;
25111: LD_VAR 0 2
25115: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
25116: LD_INT 0
25118: PPUSH
25119: PPUSH
25120: PPUSH
// result := [ ] ;
25121: LD_ADDR_VAR 0 4
25125: PUSH
25126: EMPTY
25127: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
25128: LD_ADDR_VAR 0 5
25132: PUSH
25133: LD_VAR 0 2
25137: PPUSH
25138: LD_INT 21
25140: PUSH
25141: LD_INT 3
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PPUSH
25148: CALL_OW 70
25152: ST_TO_ADDR
// if not tmp then
25153: LD_VAR 0 5
25157: NOT
25158: IFFALSE 25162
// exit ;
25160: GO 25226
// if checkLink then
25162: LD_VAR 0 3
25166: IFFALSE 25216
// begin for i in tmp do
25168: LD_ADDR_VAR 0 6
25172: PUSH
25173: LD_VAR 0 5
25177: PUSH
25178: FOR_IN
25179: IFFALSE 25214
// if GetBase ( i ) <> base then
25181: LD_VAR 0 6
25185: PPUSH
25186: CALL_OW 274
25190: PUSH
25191: LD_VAR 0 1
25195: NONEQUAL
25196: IFFALSE 25212
// ComLinkToBase ( base , i ) ;
25198: LD_VAR 0 1
25202: PPUSH
25203: LD_VAR 0 6
25207: PPUSH
25208: CALL_OW 169
25212: GO 25178
25214: POP
25215: POP
// end ; result := tmp ;
25216: LD_ADDR_VAR 0 4
25220: PUSH
25221: LD_VAR 0 5
25225: ST_TO_ADDR
// end ;
25226: LD_VAR 0 4
25230: RET
// export function ComComplete ( units , b ) ; var i ; begin
25231: LD_INT 0
25233: PPUSH
25234: PPUSH
// if not units then
25235: LD_VAR 0 1
25239: NOT
25240: IFFALSE 25244
// exit ;
25242: GO 25334
// for i in units do
25244: LD_ADDR_VAR 0 4
25248: PUSH
25249: LD_VAR 0 1
25253: PUSH
25254: FOR_IN
25255: IFFALSE 25332
// if BuildingStatus ( b ) = bs_build then
25257: LD_VAR 0 2
25261: PPUSH
25262: CALL_OW 461
25266: PUSH
25267: LD_INT 1
25269: EQUAL
25270: IFFALSE 25330
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
25272: LD_VAR 0 4
25276: PPUSH
25277: LD_STRING h
25279: PUSH
25280: LD_VAR 0 2
25284: PPUSH
25285: CALL_OW 250
25289: PUSH
25290: LD_VAR 0 2
25294: PPUSH
25295: CALL_OW 251
25299: PUSH
25300: LD_VAR 0 2
25304: PUSH
25305: LD_INT 0
25307: PUSH
25308: LD_INT 0
25310: PUSH
25311: LD_INT 0
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: PUSH
25323: EMPTY
25324: LIST
25325: PPUSH
25326: CALL_OW 446
25330: GO 25254
25332: POP
25333: POP
// end ;
25334: LD_VAR 0 3
25338: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25339: LD_INT 0
25341: PPUSH
25342: PPUSH
25343: PPUSH
25344: PPUSH
25345: PPUSH
25346: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
25347: LD_VAR 0 1
25351: NOT
25352: IFTRUE 25369
25354: PUSH
25355: LD_VAR 0 1
25359: PPUSH
25360: CALL_OW 263
25364: PUSH
25365: LD_INT 2
25367: NONEQUAL
25368: OR
25369: IFFALSE 25373
// exit ;
25371: GO 25689
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25373: LD_ADDR_VAR 0 6
25377: PUSH
25378: LD_INT 22
25380: PUSH
25381: LD_VAR 0 1
25385: PPUSH
25386: CALL_OW 255
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 2
25397: PUSH
25398: LD_INT 30
25400: PUSH
25401: LD_INT 36
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 34
25410: PUSH
25411: LD_INT 31
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: LIST
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PPUSH
25427: CALL_OW 69
25431: ST_TO_ADDR
// if not tmp then
25432: LD_VAR 0 6
25436: NOT
25437: IFFALSE 25441
// exit ;
25439: GO 25689
// result := [ ] ;
25441: LD_ADDR_VAR 0 2
25445: PUSH
25446: EMPTY
25447: ST_TO_ADDR
// for i in tmp do
25448: LD_ADDR_VAR 0 3
25452: PUSH
25453: LD_VAR 0 6
25457: PUSH
25458: FOR_IN
25459: IFFALSE 25530
// begin t := UnitsInside ( i ) ;
25461: LD_ADDR_VAR 0 4
25465: PUSH
25466: LD_VAR 0 3
25470: PPUSH
25471: CALL_OW 313
25475: ST_TO_ADDR
// if t then
25476: LD_VAR 0 4
25480: IFFALSE 25528
// for j in t do
25482: LD_ADDR_VAR 0 7
25486: PUSH
25487: LD_VAR 0 4
25491: PUSH
25492: FOR_IN
25493: IFFALSE 25526
// result := Replace ( result , result + 1 , j ) ;
25495: LD_ADDR_VAR 0 2
25499: PUSH
25500: LD_VAR 0 2
25504: PPUSH
25505: LD_VAR 0 2
25509: PUSH
25510: LD_INT 1
25512: PLUS
25513: PPUSH
25514: LD_VAR 0 7
25518: PPUSH
25519: CALL_OW 1
25523: ST_TO_ADDR
25524: GO 25492
25526: POP
25527: POP
// end ;
25528: GO 25458
25530: POP
25531: POP
// if not result then
25532: LD_VAR 0 2
25536: NOT
25537: IFFALSE 25541
// exit ;
25539: GO 25689
// mech := result [ 1 ] ;
25541: LD_ADDR_VAR 0 5
25545: PUSH
25546: LD_VAR 0 2
25550: PUSH
25551: LD_INT 1
25553: ARRAY
25554: ST_TO_ADDR
// if result > 1 then
25555: LD_VAR 0 2
25559: PUSH
25560: LD_INT 1
25562: GREATER
25563: IFFALSE 25675
// begin for i = 2 to result do
25565: LD_ADDR_VAR 0 3
25569: PUSH
25570: DOUBLE
25571: LD_INT 2
25573: DEC
25574: ST_TO_ADDR
25575: LD_VAR 0 2
25579: PUSH
25580: FOR_TO
25581: IFFALSE 25673
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25583: LD_ADDR_VAR 0 4
25587: PUSH
25588: LD_VAR 0 2
25592: PUSH
25593: LD_VAR 0 3
25597: ARRAY
25598: PPUSH
25599: LD_INT 3
25601: PPUSH
25602: CALL_OW 259
25606: PUSH
25607: LD_VAR 0 2
25611: PUSH
25612: LD_VAR 0 3
25616: ARRAY
25617: PPUSH
25618: CALL_OW 432
25622: MINUS
25623: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25624: LD_VAR 0 4
25628: PUSH
25629: LD_VAR 0 5
25633: PPUSH
25634: LD_INT 3
25636: PPUSH
25637: CALL_OW 259
25641: PUSH
25642: LD_VAR 0 5
25646: PPUSH
25647: CALL_OW 432
25651: MINUS
25652: GREATEREQUAL
25653: IFFALSE 25671
// mech := result [ i ] ;
25655: LD_ADDR_VAR 0 5
25659: PUSH
25660: LD_VAR 0 2
25664: PUSH
25665: LD_VAR 0 3
25669: ARRAY
25670: ST_TO_ADDR
// end ;
25671: GO 25580
25673: POP
25674: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25675: LD_VAR 0 1
25679: PPUSH
25680: LD_VAR 0 5
25684: PPUSH
25685: CALL_OW 135
// end ;
25689: LD_VAR 0 2
25693: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25694: LD_INT 0
25696: PPUSH
25697: PPUSH
25698: PPUSH
25699: PPUSH
25700: PPUSH
25701: PPUSH
25702: PPUSH
25703: PPUSH
25704: PPUSH
25705: PPUSH
25706: PPUSH
25707: PPUSH
25708: PPUSH
// result := [ ] ;
25709: LD_ADDR_VAR 0 7
25713: PUSH
25714: EMPTY
25715: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25716: LD_VAR 0 1
25720: PPUSH
25721: CALL_OW 266
25725: PUSH
25726: LD_INT 0
25728: PUSH
25729: LD_INT 1
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: IN
25736: NOT
25737: IFFALSE 25741
// exit ;
25739: GO 27381
// if name then
25741: LD_VAR 0 3
25745: IFFALSE 25761
// SetBName ( base_dep , name ) ;
25747: LD_VAR 0 1
25751: PPUSH
25752: LD_VAR 0 3
25756: PPUSH
25757: CALL_OW 500
// base := GetBase ( base_dep ) ;
25761: LD_ADDR_VAR 0 15
25765: PUSH
25766: LD_VAR 0 1
25770: PPUSH
25771: CALL_OW 274
25775: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25776: LD_ADDR_VAR 0 16
25780: PUSH
25781: LD_VAR 0 1
25785: PPUSH
25786: CALL_OW 255
25790: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25791: LD_ADDR_VAR 0 17
25795: PUSH
25796: LD_VAR 0 1
25800: PPUSH
25801: CALL_OW 248
25805: ST_TO_ADDR
// if sources then
25806: LD_VAR 0 5
25810: IFFALSE 25857
// for i = 1 to 3 do
25812: LD_ADDR_VAR 0 8
25816: PUSH
25817: DOUBLE
25818: LD_INT 1
25820: DEC
25821: ST_TO_ADDR
25822: LD_INT 3
25824: PUSH
25825: FOR_TO
25826: IFFALSE 25855
// AddResourceType ( base , i , sources [ i ] ) ;
25828: LD_VAR 0 15
25832: PPUSH
25833: LD_VAR 0 8
25837: PPUSH
25838: LD_VAR 0 5
25842: PUSH
25843: LD_VAR 0 8
25847: ARRAY
25848: PPUSH
25849: CALL_OW 276
25853: GO 25825
25855: POP
25856: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25857: LD_ADDR_VAR 0 18
25861: PUSH
25862: LD_VAR 0 15
25866: PPUSH
25867: LD_VAR 0 2
25871: PPUSH
25872: LD_INT 1
25874: PPUSH
25875: CALL 25116 0 3
25879: ST_TO_ADDR
// InitHc ;
25880: CALL_OW 19
// InitUc ;
25884: CALL_OW 18
// uc_side := side ;
25888: LD_ADDR_OWVAR 20
25892: PUSH
25893: LD_VAR 0 16
25897: ST_TO_ADDR
// uc_nation := nation ;
25898: LD_ADDR_OWVAR 21
25902: PUSH
25903: LD_VAR 0 17
25907: ST_TO_ADDR
// if buildings then
25908: LD_VAR 0 18
25912: IFFALSE 27240
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25914: LD_ADDR_VAR 0 19
25918: PUSH
25919: LD_VAR 0 18
25923: PPUSH
25924: LD_INT 2
25926: PUSH
25927: LD_INT 30
25929: PUSH
25930: LD_INT 29
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PUSH
25937: LD_INT 30
25939: PUSH
25940: LD_INT 30
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: LIST
25951: PPUSH
25952: CALL_OW 72
25956: ST_TO_ADDR
// if tmp then
25957: LD_VAR 0 19
25961: IFFALSE 26009
// for i in tmp do
25963: LD_ADDR_VAR 0 8
25967: PUSH
25968: LD_VAR 0 19
25972: PUSH
25973: FOR_IN
25974: IFFALSE 26007
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25976: LD_VAR 0 8
25980: PPUSH
25981: CALL_OW 250
25985: PPUSH
25986: LD_VAR 0 8
25990: PPUSH
25991: CALL_OW 251
25995: PPUSH
25996: LD_VAR 0 16
26000: PPUSH
26001: CALL_OW 441
26005: GO 25973
26007: POP
26008: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
26009: LD_VAR 0 18
26013: PPUSH
26014: LD_INT 2
26016: PUSH
26017: LD_INT 30
26019: PUSH
26020: LD_INT 32
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 30
26029: PUSH
26030: LD_INT 33
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: LIST
26041: PPUSH
26042: CALL_OW 72
26046: IFFALSE 26134
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
26048: LD_ADDR_VAR 0 8
26052: PUSH
26053: LD_VAR 0 18
26057: PPUSH
26058: LD_INT 2
26060: PUSH
26061: LD_INT 30
26063: PUSH
26064: LD_INT 32
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 30
26073: PUSH
26074: LD_INT 33
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: LIST
26085: PPUSH
26086: CALL_OW 72
26090: PUSH
26091: FOR_IN
26092: IFFALSE 26132
// begin if not GetBWeapon ( i ) then
26094: LD_VAR 0 8
26098: PPUSH
26099: CALL_OW 269
26103: NOT
26104: IFFALSE 26130
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
26106: LD_VAR 0 8
26110: PPUSH
26111: LD_VAR 0 8
26115: PPUSH
26116: LD_VAR 0 2
26120: PPUSH
26121: CALL 27386 0 2
26125: PPUSH
26126: CALL_OW 431
// end ;
26130: GO 26091
26132: POP
26133: POP
// end ; for i = 1 to personel do
26134: LD_ADDR_VAR 0 8
26138: PUSH
26139: DOUBLE
26140: LD_INT 1
26142: DEC
26143: ST_TO_ADDR
26144: LD_VAR 0 6
26148: PUSH
26149: FOR_TO
26150: IFFALSE 27220
// begin if i > 4 then
26152: LD_VAR 0 8
26156: PUSH
26157: LD_INT 4
26159: GREATER
26160: IFFALSE 26164
// break ;
26162: GO 27220
// case i of 1 :
26164: LD_VAR 0 8
26168: PUSH
26169: LD_INT 1
26171: DOUBLE
26172: EQUAL
26173: IFTRUE 26177
26175: GO 26257
26177: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
26178: LD_ADDR_VAR 0 12
26182: PUSH
26183: LD_VAR 0 18
26187: PPUSH
26188: LD_INT 22
26190: PUSH
26191: LD_VAR 0 16
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 58
26202: PUSH
26203: EMPTY
26204: LIST
26205: PUSH
26206: LD_INT 2
26208: PUSH
26209: LD_INT 30
26211: PUSH
26212: LD_INT 32
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 30
26221: PUSH
26222: LD_INT 4
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 30
26231: PUSH
26232: LD_INT 5
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: LIST
26249: PPUSH
26250: CALL_OW 72
26254: ST_TO_ADDR
26255: GO 26479
26257: LD_INT 2
26259: DOUBLE
26260: EQUAL
26261: IFTRUE 26265
26263: GO 26327
26265: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
26266: LD_ADDR_VAR 0 12
26270: PUSH
26271: LD_VAR 0 18
26275: PPUSH
26276: LD_INT 22
26278: PUSH
26279: LD_VAR 0 16
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 2
26290: PUSH
26291: LD_INT 30
26293: PUSH
26294: LD_INT 0
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 30
26303: PUSH
26304: LD_INT 1
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: LIST
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PPUSH
26320: CALL_OW 72
26324: ST_TO_ADDR
26325: GO 26479
26327: LD_INT 3
26329: DOUBLE
26330: EQUAL
26331: IFTRUE 26335
26333: GO 26397
26335: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26336: LD_ADDR_VAR 0 12
26340: PUSH
26341: LD_VAR 0 18
26345: PPUSH
26346: LD_INT 22
26348: PUSH
26349: LD_VAR 0 16
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 2
26360: PUSH
26361: LD_INT 30
26363: PUSH
26364: LD_INT 2
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 30
26373: PUSH
26374: LD_INT 3
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: LIST
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PPUSH
26390: CALL_OW 72
26394: ST_TO_ADDR
26395: GO 26479
26397: LD_INT 4
26399: DOUBLE
26400: EQUAL
26401: IFTRUE 26405
26403: GO 26478
26405: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26406: LD_ADDR_VAR 0 12
26410: PUSH
26411: LD_VAR 0 18
26415: PPUSH
26416: LD_INT 22
26418: PUSH
26419: LD_VAR 0 16
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 2
26430: PUSH
26431: LD_INT 30
26433: PUSH
26434: LD_INT 6
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 30
26443: PUSH
26444: LD_INT 7
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 30
26453: PUSH
26454: LD_INT 8
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PPUSH
26471: CALL_OW 72
26475: ST_TO_ADDR
26476: GO 26479
26478: POP
// if i = 1 then
26479: LD_VAR 0 8
26483: PUSH
26484: LD_INT 1
26486: EQUAL
26487: IFFALSE 26598
// begin tmp := [ ] ;
26489: LD_ADDR_VAR 0 19
26493: PUSH
26494: EMPTY
26495: ST_TO_ADDR
// for j in f do
26496: LD_ADDR_VAR 0 9
26500: PUSH
26501: LD_VAR 0 12
26505: PUSH
26506: FOR_IN
26507: IFFALSE 26580
// if GetBType ( j ) = b_bunker then
26509: LD_VAR 0 9
26513: PPUSH
26514: CALL_OW 266
26518: PUSH
26519: LD_INT 32
26521: EQUAL
26522: IFFALSE 26549
// tmp := Insert ( tmp , 1 , j ) else
26524: LD_ADDR_VAR 0 19
26528: PUSH
26529: LD_VAR 0 19
26533: PPUSH
26534: LD_INT 1
26536: PPUSH
26537: LD_VAR 0 9
26541: PPUSH
26542: CALL_OW 2
26546: ST_TO_ADDR
26547: GO 26578
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26549: LD_ADDR_VAR 0 19
26553: PUSH
26554: LD_VAR 0 19
26558: PPUSH
26559: LD_VAR 0 19
26563: PUSH
26564: LD_INT 1
26566: PLUS
26567: PPUSH
26568: LD_VAR 0 9
26572: PPUSH
26573: CALL_OW 2
26577: ST_TO_ADDR
26578: GO 26506
26580: POP
26581: POP
// if tmp then
26582: LD_VAR 0 19
26586: IFFALSE 26598
// f := tmp ;
26588: LD_ADDR_VAR 0 12
26592: PUSH
26593: LD_VAR 0 19
26597: ST_TO_ADDR
// end ; x := personel [ i ] ;
26598: LD_ADDR_VAR 0 13
26602: PUSH
26603: LD_VAR 0 6
26607: PUSH
26608: LD_VAR 0 8
26612: ARRAY
26613: ST_TO_ADDR
// if x = - 1 then
26614: LD_VAR 0 13
26618: PUSH
26619: LD_INT 1
26621: NEG
26622: EQUAL
26623: IFFALSE 26834
// begin for j in f do
26625: LD_ADDR_VAR 0 9
26629: PUSH
26630: LD_VAR 0 12
26634: PUSH
26635: FOR_IN
26636: IFFALSE 26830
// repeat InitHc ;
26638: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26642: LD_VAR 0 9
26646: PPUSH
26647: CALL_OW 266
26651: PUSH
26652: LD_INT 5
26654: EQUAL
26655: IFFALSE 26725
// begin if UnitsInside ( j ) < 3 then
26657: LD_VAR 0 9
26661: PPUSH
26662: CALL_OW 313
26666: PUSH
26667: LD_INT 3
26669: LESS
26670: IFFALSE 26706
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26672: LD_INT 0
26674: PPUSH
26675: LD_INT 5
26677: PUSH
26678: LD_INT 8
26680: PUSH
26681: LD_INT 9
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: LIST
26688: PUSH
26689: LD_VAR 0 17
26693: ARRAY
26694: PPUSH
26695: LD_VAR 0 4
26699: PPUSH
26700: CALL_OW 380
26704: GO 26723
// PrepareHuman ( false , i , skill ) ;
26706: LD_INT 0
26708: PPUSH
26709: LD_VAR 0 8
26713: PPUSH
26714: LD_VAR 0 4
26718: PPUSH
26719: CALL_OW 380
// end else
26723: GO 26742
// PrepareHuman ( false , i , skill ) ;
26725: LD_INT 0
26727: PPUSH
26728: LD_VAR 0 8
26732: PPUSH
26733: LD_VAR 0 4
26737: PPUSH
26738: CALL_OW 380
// un := CreateHuman ;
26742: LD_ADDR_VAR 0 14
26746: PUSH
26747: CALL_OW 44
26751: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26752: LD_ADDR_VAR 0 7
26756: PUSH
26757: LD_VAR 0 7
26761: PPUSH
26762: LD_INT 1
26764: PPUSH
26765: LD_VAR 0 14
26769: PPUSH
26770: CALL_OW 2
26774: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26775: LD_VAR 0 14
26779: PPUSH
26780: LD_VAR 0 9
26784: PPUSH
26785: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26789: LD_VAR 0 9
26793: PPUSH
26794: CALL_OW 313
26798: PUSH
26799: LD_INT 6
26801: EQUAL
26802: IFTRUE 26826
26804: PUSH
26805: LD_VAR 0 9
26809: PPUSH
26810: CALL_OW 266
26814: PUSH
26815: LD_INT 32
26817: PUSH
26818: LD_INT 31
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: IN
26825: OR
26826: IFFALSE 26638
26828: GO 26635
26830: POP
26831: POP
// end else
26832: GO 27218
// for j = 1 to x do
26834: LD_ADDR_VAR 0 9
26838: PUSH
26839: DOUBLE
26840: LD_INT 1
26842: DEC
26843: ST_TO_ADDR
26844: LD_VAR 0 13
26848: PUSH
26849: FOR_TO
26850: IFFALSE 27216
// begin InitHc ;
26852: CALL_OW 19
// if not f then
26856: LD_VAR 0 12
26860: NOT
26861: IFFALSE 26950
// begin PrepareHuman ( false , i , skill ) ;
26863: LD_INT 0
26865: PPUSH
26866: LD_VAR 0 8
26870: PPUSH
26871: LD_VAR 0 4
26875: PPUSH
26876: CALL_OW 380
// un := CreateHuman ;
26880: LD_ADDR_VAR 0 14
26884: PUSH
26885: CALL_OW 44
26889: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26890: LD_ADDR_VAR 0 7
26894: PUSH
26895: LD_VAR 0 7
26899: PPUSH
26900: LD_INT 1
26902: PPUSH
26903: LD_VAR 0 14
26907: PPUSH
26908: CALL_OW 2
26912: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26913: LD_VAR 0 14
26917: PPUSH
26918: LD_VAR 0 1
26922: PPUSH
26923: CALL_OW 250
26927: PPUSH
26928: LD_VAR 0 1
26932: PPUSH
26933: CALL_OW 251
26937: PPUSH
26938: LD_INT 10
26940: PPUSH
26941: LD_INT 0
26943: PPUSH
26944: CALL_OW 50
// continue ;
26948: GO 26849
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26950: LD_VAR 0 12
26954: PUSH
26955: LD_INT 1
26957: ARRAY
26958: PPUSH
26959: CALL_OW 313
26963: IFFALSE 26991
26965: PUSH
26966: LD_VAR 0 12
26970: PUSH
26971: LD_INT 1
26973: ARRAY
26974: PPUSH
26975: CALL_OW 266
26979: PUSH
26980: LD_INT 32
26982: PUSH
26983: LD_INT 31
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: IN
26990: AND
26991: IFTRUE 27012
26993: PUSH
26994: LD_VAR 0 12
26998: PUSH
26999: LD_INT 1
27001: ARRAY
27002: PPUSH
27003: CALL_OW 313
27007: PUSH
27008: LD_INT 6
27010: EQUAL
27011: OR
27012: IFFALSE 27032
// f := Delete ( f , 1 ) ;
27014: LD_ADDR_VAR 0 12
27018: PUSH
27019: LD_VAR 0 12
27023: PPUSH
27024: LD_INT 1
27026: PPUSH
27027: CALL_OW 3
27031: ST_TO_ADDR
// if not f then
27032: LD_VAR 0 12
27036: NOT
27037: IFFALSE 27055
// begin x := x + 2 ;
27039: LD_ADDR_VAR 0 13
27043: PUSH
27044: LD_VAR 0 13
27048: PUSH
27049: LD_INT 2
27051: PLUS
27052: ST_TO_ADDR
// continue ;
27053: GO 26849
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
27055: LD_VAR 0 12
27059: PUSH
27060: LD_INT 1
27062: ARRAY
27063: PPUSH
27064: CALL_OW 266
27068: PUSH
27069: LD_INT 5
27071: EQUAL
27072: IFFALSE 27146
// begin if UnitsInside ( f [ 1 ] ) < 3 then
27074: LD_VAR 0 12
27078: PUSH
27079: LD_INT 1
27081: ARRAY
27082: PPUSH
27083: CALL_OW 313
27087: PUSH
27088: LD_INT 3
27090: LESS
27091: IFFALSE 27127
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27093: LD_INT 0
27095: PPUSH
27096: LD_INT 5
27098: PUSH
27099: LD_INT 8
27101: PUSH
27102: LD_INT 9
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: LIST
27109: PUSH
27110: LD_VAR 0 17
27114: ARRAY
27115: PPUSH
27116: LD_VAR 0 4
27120: PPUSH
27121: CALL_OW 380
27125: GO 27144
// PrepareHuman ( false , i , skill ) ;
27127: LD_INT 0
27129: PPUSH
27130: LD_VAR 0 8
27134: PPUSH
27135: LD_VAR 0 4
27139: PPUSH
27140: CALL_OW 380
// end else
27144: GO 27163
// PrepareHuman ( false , i , skill ) ;
27146: LD_INT 0
27148: PPUSH
27149: LD_VAR 0 8
27153: PPUSH
27154: LD_VAR 0 4
27158: PPUSH
27159: CALL_OW 380
// un := CreateHuman ;
27163: LD_ADDR_VAR 0 14
27167: PUSH
27168: CALL_OW 44
27172: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27173: LD_ADDR_VAR 0 7
27177: PUSH
27178: LD_VAR 0 7
27182: PPUSH
27183: LD_INT 1
27185: PPUSH
27186: LD_VAR 0 14
27190: PPUSH
27191: CALL_OW 2
27195: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
27196: LD_VAR 0 14
27200: PPUSH
27201: LD_VAR 0 12
27205: PUSH
27206: LD_INT 1
27208: ARRAY
27209: PPUSH
27210: CALL_OW 52
// end ;
27214: GO 26849
27216: POP
27217: POP
// end ;
27218: GO 26149
27220: POP
27221: POP
// result := result ^ buildings ;
27222: LD_ADDR_VAR 0 7
27226: PUSH
27227: LD_VAR 0 7
27231: PUSH
27232: LD_VAR 0 18
27236: ADD
27237: ST_TO_ADDR
// end else
27238: GO 27381
// begin for i = 1 to personel do
27240: LD_ADDR_VAR 0 8
27244: PUSH
27245: DOUBLE
27246: LD_INT 1
27248: DEC
27249: ST_TO_ADDR
27250: LD_VAR 0 6
27254: PUSH
27255: FOR_TO
27256: IFFALSE 27379
// begin if i > 4 then
27258: LD_VAR 0 8
27262: PUSH
27263: LD_INT 4
27265: GREATER
27266: IFFALSE 27270
// break ;
27268: GO 27379
// x := personel [ i ] ;
27270: LD_ADDR_VAR 0 13
27274: PUSH
27275: LD_VAR 0 6
27279: PUSH
27280: LD_VAR 0 8
27284: ARRAY
27285: ST_TO_ADDR
// if x = - 1 then
27286: LD_VAR 0 13
27290: PUSH
27291: LD_INT 1
27293: NEG
27294: EQUAL
27295: IFFALSE 27299
// continue ;
27297: GO 27255
// PrepareHuman ( false , i , skill ) ;
27299: LD_INT 0
27301: PPUSH
27302: LD_VAR 0 8
27306: PPUSH
27307: LD_VAR 0 4
27311: PPUSH
27312: CALL_OW 380
// un := CreateHuman ;
27316: LD_ADDR_VAR 0 14
27320: PUSH
27321: CALL_OW 44
27325: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27326: LD_VAR 0 14
27330: PPUSH
27331: LD_VAR 0 1
27335: PPUSH
27336: CALL_OW 250
27340: PPUSH
27341: LD_VAR 0 1
27345: PPUSH
27346: CALL_OW 251
27350: PPUSH
27351: LD_INT 10
27353: PPUSH
27354: LD_INT 0
27356: PPUSH
27357: CALL_OW 50
// result := result ^ un ;
27361: LD_ADDR_VAR 0 7
27365: PUSH
27366: LD_VAR 0 7
27370: PUSH
27371: LD_VAR 0 14
27375: ADD
27376: ST_TO_ADDR
// end ;
27377: GO 27255
27379: POP
27380: POP
// end ; end ;
27381: LD_VAR 0 7
27385: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27386: LD_INT 0
27388: PPUSH
27389: PPUSH
27390: PPUSH
27391: PPUSH
27392: PPUSH
27393: PPUSH
27394: PPUSH
27395: PPUSH
27396: PPUSH
27397: PPUSH
27398: PPUSH
27399: PPUSH
27400: PPUSH
27401: PPUSH
27402: PPUSH
27403: PPUSH
// result := false ;
27404: LD_ADDR_VAR 0 3
27408: PUSH
27409: LD_INT 0
27411: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27412: LD_VAR 0 1
27416: NOT
27417: IFTRUE 27442
27419: PUSH
27420: LD_VAR 0 1
27424: PPUSH
27425: CALL_OW 266
27429: PUSH
27430: LD_INT 32
27432: PUSH
27433: LD_INT 33
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: IN
27440: NOT
27441: OR
27442: IFFALSE 27446
// exit ;
27444: GO 28581
// nat := GetNation ( tower ) ;
27446: LD_ADDR_VAR 0 12
27450: PUSH
27451: LD_VAR 0 1
27455: PPUSH
27456: CALL_OW 248
27460: ST_TO_ADDR
// side := GetSide ( tower ) ;
27461: LD_ADDR_VAR 0 16
27465: PUSH
27466: LD_VAR 0 1
27470: PPUSH
27471: CALL_OW 255
27475: ST_TO_ADDR
// x := GetX ( tower ) ;
27476: LD_ADDR_VAR 0 10
27480: PUSH
27481: LD_VAR 0 1
27485: PPUSH
27486: CALL_OW 250
27490: ST_TO_ADDR
// y := GetY ( tower ) ;
27491: LD_ADDR_VAR 0 11
27495: PUSH
27496: LD_VAR 0 1
27500: PPUSH
27501: CALL_OW 251
27505: ST_TO_ADDR
// if not x or not y then
27506: LD_VAR 0 10
27510: NOT
27511: IFTRUE 27520
27513: PUSH
27514: LD_VAR 0 11
27518: NOT
27519: OR
27520: IFFALSE 27524
// exit ;
27522: GO 28581
// weapon := 0 ;
27524: LD_ADDR_VAR 0 18
27528: PUSH
27529: LD_INT 0
27531: ST_TO_ADDR
// fac_list := [ ] ;
27532: LD_ADDR_VAR 0 17
27536: PUSH
27537: EMPTY
27538: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27539: LD_ADDR_VAR 0 6
27543: PUSH
27544: LD_VAR 0 1
27548: PPUSH
27549: CALL_OW 274
27553: PPUSH
27554: LD_VAR 0 2
27558: PPUSH
27559: LD_INT 0
27561: PPUSH
27562: CALL 25116 0 3
27566: PPUSH
27567: LD_INT 30
27569: PUSH
27570: LD_INT 3
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PPUSH
27577: CALL_OW 72
27581: ST_TO_ADDR
// if not factories then
27582: LD_VAR 0 6
27586: NOT
27587: IFFALSE 27591
// exit ;
27589: GO 28581
// for i in factories do
27591: LD_ADDR_VAR 0 8
27595: PUSH
27596: LD_VAR 0 6
27600: PUSH
27601: FOR_IN
27602: IFFALSE 27627
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27604: LD_ADDR_VAR 0 17
27608: PUSH
27609: LD_VAR 0 17
27613: PUSH
27614: LD_VAR 0 8
27618: PPUSH
27619: CALL_OW 478
27623: UNION
27624: ST_TO_ADDR
27625: GO 27601
27627: POP
27628: POP
// if not fac_list then
27629: LD_VAR 0 17
27633: NOT
27634: IFFALSE 27638
// exit ;
27636: GO 28581
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27638: LD_ADDR_VAR 0 5
27642: PUSH
27643: LD_INT 4
27645: PUSH
27646: LD_INT 5
27648: PUSH
27649: LD_INT 9
27651: PUSH
27652: LD_INT 10
27654: PUSH
27655: LD_INT 6
27657: PUSH
27658: LD_INT 7
27660: PUSH
27661: LD_INT 11
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 27
27675: PUSH
27676: LD_INT 28
27678: PUSH
27679: LD_INT 26
27681: PUSH
27682: LD_INT 30
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 43
27693: PUSH
27694: LD_INT 44
27696: PUSH
27697: LD_INT 46
27699: PUSH
27700: LD_INT 45
27702: PUSH
27703: LD_INT 47
27705: PUSH
27706: LD_INT 49
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: LIST
27721: PUSH
27722: LD_VAR 0 12
27726: ARRAY
27727: ST_TO_ADDR
// list := list isect fac_list ;
27728: LD_ADDR_VAR 0 5
27732: PUSH
27733: LD_VAR 0 5
27737: PUSH
27738: LD_VAR 0 17
27742: ISECT
27743: ST_TO_ADDR
// if not list then
27744: LD_VAR 0 5
27748: NOT
27749: IFFALSE 27753
// exit ;
27751: GO 28581
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27753: LD_VAR 0 12
27757: PUSH
27758: LD_INT 3
27760: EQUAL
27761: IFFALSE 27773
27763: PUSH
27764: LD_INT 49
27766: PUSH
27767: LD_VAR 0 5
27771: IN
27772: AND
27773: IFFALSE 27793
27775: PUSH
27776: LD_INT 31
27778: PPUSH
27779: LD_VAR 0 16
27783: PPUSH
27784: CALL_OW 321
27788: PUSH
27789: LD_INT 2
27791: EQUAL
27792: AND
27793: IFFALSE 27853
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27795: LD_INT 22
27797: PUSH
27798: LD_VAR 0 16
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 35
27809: PUSH
27810: LD_INT 49
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 91
27819: PUSH
27820: LD_VAR 0 1
27824: PUSH
27825: LD_INT 10
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: LIST
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: LIST
27837: PPUSH
27838: CALL_OW 69
27842: NOT
27843: IFFALSE 27853
// weapon := ru_time_lapser ;
27845: LD_ADDR_VAR 0 18
27849: PUSH
27850: LD_INT 49
27852: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27853: LD_VAR 0 12
27857: PUSH
27858: LD_INT 1
27860: PUSH
27861: LD_INT 2
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: IN
27868: IFFALSE 27892
27870: PUSH
27871: LD_INT 11
27873: PUSH
27874: LD_VAR 0 5
27878: IN
27879: IFTRUE 27891
27881: PUSH
27882: LD_INT 30
27884: PUSH
27885: LD_VAR 0 5
27889: IN
27890: OR
27891: AND
27892: IFFALSE 27912
27894: PUSH
27895: LD_INT 6
27897: PPUSH
27898: LD_VAR 0 16
27902: PPUSH
27903: CALL_OW 321
27907: PUSH
27908: LD_INT 2
27910: EQUAL
27911: AND
27912: IFFALSE 28079
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27914: LD_INT 22
27916: PUSH
27917: LD_VAR 0 16
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 2
27928: PUSH
27929: LD_INT 35
27931: PUSH
27932: LD_INT 11
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: LD_INT 35
27941: PUSH
27942: LD_INT 30
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: LIST
27953: PUSH
27954: LD_INT 91
27956: PUSH
27957: LD_VAR 0 1
27961: PUSH
27962: LD_INT 18
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: LIST
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: LIST
27974: PPUSH
27975: CALL_OW 69
27979: NOT
27980: IFFALSE 28056
27982: PUSH
27983: LD_INT 22
27985: PUSH
27986: LD_VAR 0 16
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 2
27997: PUSH
27998: LD_INT 30
28000: PUSH
28001: LD_INT 32
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: LD_INT 30
28010: PUSH
28011: LD_INT 33
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 91
28025: PUSH
28026: LD_VAR 0 1
28030: PUSH
28031: LD_INT 12
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: LIST
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: LIST
28043: PUSH
28044: EMPTY
28045: LIST
28046: PPUSH
28047: CALL_OW 69
28051: PUSH
28052: LD_INT 2
28054: GREATER
28055: AND
28056: IFFALSE 28079
// weapon := [ us_radar , ar_radar ] [ nat ] ;
28058: LD_ADDR_VAR 0 18
28062: PUSH
28063: LD_INT 11
28065: PUSH
28066: LD_INT 30
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_VAR 0 12
28077: ARRAY
28078: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
28079: LD_VAR 0 18
28083: NOT
28084: IFFALSE 28104
28086: PUSH
28087: LD_INT 40
28089: PPUSH
28090: LD_VAR 0 16
28094: PPUSH
28095: CALL_OW 321
28099: PUSH
28100: LD_INT 2
28102: EQUAL
28103: AND
28104: IFFALSE 28140
28106: PUSH
28107: LD_INT 7
28109: PUSH
28110: LD_VAR 0 5
28114: IN
28115: IFTRUE 28127
28117: PUSH
28118: LD_INT 28
28120: PUSH
28121: LD_VAR 0 5
28125: IN
28126: OR
28127: IFTRUE 28139
28129: PUSH
28130: LD_INT 45
28132: PUSH
28133: LD_VAR 0 5
28137: IN
28138: OR
28139: AND
28140: IFFALSE 28394
// begin hex := GetHexInfo ( x , y ) ;
28142: LD_ADDR_VAR 0 4
28146: PUSH
28147: LD_VAR 0 10
28151: PPUSH
28152: LD_VAR 0 11
28156: PPUSH
28157: CALL_OW 546
28161: ST_TO_ADDR
// if hex [ 1 ] then
28162: LD_VAR 0 4
28166: PUSH
28167: LD_INT 1
28169: ARRAY
28170: IFFALSE 28174
// exit ;
28172: GO 28581
// height := hex [ 2 ] ;
28174: LD_ADDR_VAR 0 15
28178: PUSH
28179: LD_VAR 0 4
28183: PUSH
28184: LD_INT 2
28186: ARRAY
28187: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
28188: LD_ADDR_VAR 0 14
28192: PUSH
28193: LD_INT 0
28195: PUSH
28196: LD_INT 2
28198: PUSH
28199: LD_INT 3
28201: PUSH
28202: LD_INT 5
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: ST_TO_ADDR
// for i in tmp do
28211: LD_ADDR_VAR 0 8
28215: PUSH
28216: LD_VAR 0 14
28220: PUSH
28221: FOR_IN
28222: IFFALSE 28392
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
28224: LD_ADDR_VAR 0 9
28228: PUSH
28229: LD_VAR 0 10
28233: PPUSH
28234: LD_VAR 0 8
28238: PPUSH
28239: LD_INT 5
28241: PPUSH
28242: CALL_OW 272
28246: PUSH
28247: LD_VAR 0 11
28251: PPUSH
28252: LD_VAR 0 8
28256: PPUSH
28257: LD_INT 5
28259: PPUSH
28260: CALL_OW 273
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
28269: LD_VAR 0 9
28273: PUSH
28274: LD_INT 1
28276: ARRAY
28277: PPUSH
28278: LD_VAR 0 9
28282: PUSH
28283: LD_INT 2
28285: ARRAY
28286: PPUSH
28287: CALL_OW 488
28291: IFFALSE 28390
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
28293: LD_ADDR_VAR 0 4
28297: PUSH
28298: LD_VAR 0 9
28302: PUSH
28303: LD_INT 1
28305: ARRAY
28306: PPUSH
28307: LD_VAR 0 9
28311: PUSH
28312: LD_INT 2
28314: ARRAY
28315: PPUSH
28316: CALL_OW 546
28320: ST_TO_ADDR
// if hex [ 1 ] then
28321: LD_VAR 0 4
28325: PUSH
28326: LD_INT 1
28328: ARRAY
28329: IFFALSE 28333
// continue ;
28331: GO 28221
// h := hex [ 2 ] ;
28333: LD_ADDR_VAR 0 13
28337: PUSH
28338: LD_VAR 0 4
28342: PUSH
28343: LD_INT 2
28345: ARRAY
28346: ST_TO_ADDR
// if h + 7 < height then
28347: LD_VAR 0 13
28351: PUSH
28352: LD_INT 7
28354: PLUS
28355: PUSH
28356: LD_VAR 0 15
28360: LESS
28361: IFFALSE 28390
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28363: LD_ADDR_VAR 0 18
28367: PUSH
28368: LD_INT 7
28370: PUSH
28371: LD_INT 28
28373: PUSH
28374: LD_INT 45
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: LIST
28381: PUSH
28382: LD_VAR 0 12
28386: ARRAY
28387: ST_TO_ADDR
// break ;
28388: GO 28392
// end ; end ; end ;
28390: GO 28221
28392: POP
28393: POP
// end ; if not weapon then
28394: LD_VAR 0 18
28398: NOT
28399: IFFALSE 28459
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28401: LD_ADDR_VAR 0 5
28405: PUSH
28406: LD_VAR 0 5
28410: PUSH
28411: LD_INT 11
28413: PUSH
28414: LD_INT 30
28416: PUSH
28417: LD_INT 49
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: LIST
28424: DIFF
28425: ST_TO_ADDR
// if not list then
28426: LD_VAR 0 5
28430: NOT
28431: IFFALSE 28435
// exit ;
28433: GO 28581
// weapon := list [ rand ( 1 , list ) ] ;
28435: LD_ADDR_VAR 0 18
28439: PUSH
28440: LD_VAR 0 5
28444: PUSH
28445: LD_INT 1
28447: PPUSH
28448: LD_VAR 0 5
28452: PPUSH
28453: CALL_OW 12
28457: ARRAY
28458: ST_TO_ADDR
// end ; if weapon then
28459: LD_VAR 0 18
28463: IFFALSE 28581
// begin tmp := CostOfWeapon ( weapon ) ;
28465: LD_ADDR_VAR 0 14
28469: PUSH
28470: LD_VAR 0 18
28474: PPUSH
28475: CALL_OW 451
28479: ST_TO_ADDR
// j := GetBase ( tower ) ;
28480: LD_ADDR_VAR 0 9
28484: PUSH
28485: LD_VAR 0 1
28489: PPUSH
28490: CALL_OW 274
28494: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
28495: LD_VAR 0 9
28499: PPUSH
28500: LD_INT 1
28502: PPUSH
28503: CALL_OW 275
28507: PUSH
28508: LD_VAR 0 14
28512: PUSH
28513: LD_INT 1
28515: ARRAY
28516: GREATEREQUAL
28517: IFFALSE 28543
28519: PUSH
28520: LD_VAR 0 9
28524: PPUSH
28525: LD_INT 2
28527: PPUSH
28528: CALL_OW 275
28532: PUSH
28533: LD_VAR 0 14
28537: PUSH
28538: LD_INT 2
28540: ARRAY
28541: GREATEREQUAL
28542: AND
28543: IFFALSE 28569
28545: PUSH
28546: LD_VAR 0 9
28550: PPUSH
28551: LD_INT 3
28553: PPUSH
28554: CALL_OW 275
28558: PUSH
28559: LD_VAR 0 14
28563: PUSH
28564: LD_INT 3
28566: ARRAY
28567: GREATEREQUAL
28568: AND
28569: IFFALSE 28581
// result := weapon ;
28571: LD_ADDR_VAR 0 3
28575: PUSH
28576: LD_VAR 0 18
28580: ST_TO_ADDR
// end ; end ;
28581: LD_VAR 0 3
28585: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28586: LD_INT 0
28588: PPUSH
28589: PPUSH
// result := true ;
28590: LD_ADDR_VAR 0 3
28594: PUSH
28595: LD_INT 1
28597: ST_TO_ADDR
// if array1 = array2 then
28598: LD_VAR 0 1
28602: PUSH
28603: LD_VAR 0 2
28607: EQUAL
28608: IFFALSE 28668
// begin for i = 1 to array1 do
28610: LD_ADDR_VAR 0 4
28614: PUSH
28615: DOUBLE
28616: LD_INT 1
28618: DEC
28619: ST_TO_ADDR
28620: LD_VAR 0 1
28624: PUSH
28625: FOR_TO
28626: IFFALSE 28664
// if array1 [ i ] <> array2 [ i ] then
28628: LD_VAR 0 1
28632: PUSH
28633: LD_VAR 0 4
28637: ARRAY
28638: PUSH
28639: LD_VAR 0 2
28643: PUSH
28644: LD_VAR 0 4
28648: ARRAY
28649: NONEQUAL
28650: IFFALSE 28662
// begin result := false ;
28652: LD_ADDR_VAR 0 3
28656: PUSH
28657: LD_INT 0
28659: ST_TO_ADDR
// break ;
28660: GO 28664
// end ;
28662: GO 28625
28664: POP
28665: POP
// end else
28666: GO 28676
// result := false ;
28668: LD_ADDR_VAR 0 3
28672: PUSH
28673: LD_INT 0
28675: ST_TO_ADDR
// end ;
28676: LD_VAR 0 3
28680: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28681: LD_INT 0
28683: PPUSH
28684: PPUSH
// if not array1 or not array2 then
28685: LD_VAR 0 1
28689: NOT
28690: IFTRUE 28699
28692: PUSH
28693: LD_VAR 0 2
28697: NOT
28698: OR
28699: IFFALSE 28703
// exit ;
28701: GO 28767
// result := true ;
28703: LD_ADDR_VAR 0 3
28707: PUSH
28708: LD_INT 1
28710: ST_TO_ADDR
// for i = 1 to array1 do
28711: LD_ADDR_VAR 0 4
28715: PUSH
28716: DOUBLE
28717: LD_INT 1
28719: DEC
28720: ST_TO_ADDR
28721: LD_VAR 0 1
28725: PUSH
28726: FOR_TO
28727: IFFALSE 28765
// if array1 [ i ] <> array2 [ i ] then
28729: LD_VAR 0 1
28733: PUSH
28734: LD_VAR 0 4
28738: ARRAY
28739: PUSH
28740: LD_VAR 0 2
28744: PUSH
28745: LD_VAR 0 4
28749: ARRAY
28750: NONEQUAL
28751: IFFALSE 28763
// begin result := false ;
28753: LD_ADDR_VAR 0 3
28757: PUSH
28758: LD_INT 0
28760: ST_TO_ADDR
// break ;
28761: GO 28765
// end ;
28763: GO 28726
28765: POP
28766: POP
// end ;
28767: LD_VAR 0 3
28771: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28772: LD_INT 0
28774: PPUSH
28775: PPUSH
28776: PPUSH
// pom := GetBase ( fac ) ;
28777: LD_ADDR_VAR 0 5
28781: PUSH
28782: LD_VAR 0 1
28786: PPUSH
28787: CALL_OW 274
28791: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28792: LD_ADDR_VAR 0 4
28796: PUSH
28797: LD_VAR 0 2
28801: PUSH
28802: LD_INT 1
28804: ARRAY
28805: PPUSH
28806: LD_VAR 0 2
28810: PUSH
28811: LD_INT 2
28813: ARRAY
28814: PPUSH
28815: LD_VAR 0 2
28819: PUSH
28820: LD_INT 3
28822: ARRAY
28823: PPUSH
28824: LD_VAR 0 2
28828: PUSH
28829: LD_INT 4
28831: ARRAY
28832: PPUSH
28833: CALL_OW 449
28837: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28838: LD_ADDR_VAR 0 3
28842: PUSH
28843: LD_VAR 0 5
28847: PPUSH
28848: LD_INT 1
28850: PPUSH
28851: CALL_OW 275
28855: PUSH
28856: LD_VAR 0 4
28860: PUSH
28861: LD_INT 1
28863: ARRAY
28864: GREATEREQUAL
28865: IFFALSE 28891
28867: PUSH
28868: LD_VAR 0 5
28872: PPUSH
28873: LD_INT 2
28875: PPUSH
28876: CALL_OW 275
28880: PUSH
28881: LD_VAR 0 4
28885: PUSH
28886: LD_INT 2
28888: ARRAY
28889: GREATEREQUAL
28890: AND
28891: IFFALSE 28917
28893: PUSH
28894: LD_VAR 0 5
28898: PPUSH
28899: LD_INT 3
28901: PPUSH
28902: CALL_OW 275
28906: PUSH
28907: LD_VAR 0 4
28911: PUSH
28912: LD_INT 3
28914: ARRAY
28915: GREATEREQUAL
28916: AND
28917: ST_TO_ADDR
// end ;
28918: LD_VAR 0 3
28922: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28923: LD_INT 0
28925: PPUSH
28926: PPUSH
28927: PPUSH
28928: PPUSH
// pom := GetBase ( building ) ;
28929: LD_ADDR_VAR 0 3
28933: PUSH
28934: LD_VAR 0 1
28938: PPUSH
28939: CALL_OW 274
28943: ST_TO_ADDR
// if not pom then
28944: LD_VAR 0 3
28948: NOT
28949: IFFALSE 28953
// exit ;
28951: GO 29127
// btype := GetBType ( building ) ;
28953: LD_ADDR_VAR 0 5
28957: PUSH
28958: LD_VAR 0 1
28962: PPUSH
28963: CALL_OW 266
28967: ST_TO_ADDR
// if btype = b_armoury then
28968: LD_VAR 0 5
28972: PUSH
28973: LD_INT 4
28975: EQUAL
28976: IFFALSE 28986
// btype := b_barracks ;
28978: LD_ADDR_VAR 0 5
28982: PUSH
28983: LD_INT 5
28985: ST_TO_ADDR
// if btype = b_depot then
28986: LD_VAR 0 5
28990: PUSH
28991: LD_INT 0
28993: EQUAL
28994: IFFALSE 29004
// btype := b_warehouse ;
28996: LD_ADDR_VAR 0 5
29000: PUSH
29001: LD_INT 1
29003: ST_TO_ADDR
// if btype = b_workshop then
29004: LD_VAR 0 5
29008: PUSH
29009: LD_INT 2
29011: EQUAL
29012: IFFALSE 29022
// btype := b_factory ;
29014: LD_ADDR_VAR 0 5
29018: PUSH
29019: LD_INT 3
29021: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29022: LD_ADDR_VAR 0 4
29026: PUSH
29027: LD_VAR 0 5
29031: PPUSH
29032: LD_VAR 0 1
29036: PPUSH
29037: CALL_OW 248
29041: PPUSH
29042: CALL_OW 450
29046: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29047: LD_ADDR_VAR 0 2
29051: PUSH
29052: LD_VAR 0 3
29056: PPUSH
29057: LD_INT 1
29059: PPUSH
29060: CALL_OW 275
29064: PUSH
29065: LD_VAR 0 4
29069: PUSH
29070: LD_INT 1
29072: ARRAY
29073: GREATEREQUAL
29074: IFFALSE 29100
29076: PUSH
29077: LD_VAR 0 3
29081: PPUSH
29082: LD_INT 2
29084: PPUSH
29085: CALL_OW 275
29089: PUSH
29090: LD_VAR 0 4
29094: PUSH
29095: LD_INT 2
29097: ARRAY
29098: GREATEREQUAL
29099: AND
29100: IFFALSE 29126
29102: PUSH
29103: LD_VAR 0 3
29107: PPUSH
29108: LD_INT 3
29110: PPUSH
29111: CALL_OW 275
29115: PUSH
29116: LD_VAR 0 4
29120: PUSH
29121: LD_INT 3
29123: ARRAY
29124: GREATEREQUAL
29125: AND
29126: ST_TO_ADDR
// end ;
29127: LD_VAR 0 2
29131: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
29132: LD_INT 0
29134: PPUSH
29135: PPUSH
29136: PPUSH
// pom := GetBase ( building ) ;
29137: LD_ADDR_VAR 0 4
29141: PUSH
29142: LD_VAR 0 1
29146: PPUSH
29147: CALL_OW 274
29151: ST_TO_ADDR
// if not pom then
29152: LD_VAR 0 4
29156: NOT
29157: IFFALSE 29161
// exit ;
29159: GO 29266
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29161: LD_ADDR_VAR 0 5
29165: PUSH
29166: LD_VAR 0 2
29170: PPUSH
29171: LD_VAR 0 1
29175: PPUSH
29176: CALL_OW 248
29180: PPUSH
29181: CALL_OW 450
29185: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29186: LD_ADDR_VAR 0 3
29190: PUSH
29191: LD_VAR 0 4
29195: PPUSH
29196: LD_INT 1
29198: PPUSH
29199: CALL_OW 275
29203: PUSH
29204: LD_VAR 0 5
29208: PUSH
29209: LD_INT 1
29211: ARRAY
29212: GREATEREQUAL
29213: IFFALSE 29239
29215: PUSH
29216: LD_VAR 0 4
29220: PPUSH
29221: LD_INT 2
29223: PPUSH
29224: CALL_OW 275
29228: PUSH
29229: LD_VAR 0 5
29233: PUSH
29234: LD_INT 2
29236: ARRAY
29237: GREATEREQUAL
29238: AND
29239: IFFALSE 29265
29241: PUSH
29242: LD_VAR 0 4
29246: PPUSH
29247: LD_INT 3
29249: PPUSH
29250: CALL_OW 275
29254: PUSH
29255: LD_VAR 0 5
29259: PUSH
29260: LD_INT 3
29262: ARRAY
29263: GREATEREQUAL
29264: AND
29265: ST_TO_ADDR
// end ;
29266: LD_VAR 0 3
29270: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
29271: LD_INT 0
29273: PPUSH
29274: PPUSH
29275: PPUSH
29276: PPUSH
29277: PPUSH
29278: PPUSH
29279: PPUSH
29280: PPUSH
29281: PPUSH
29282: PPUSH
29283: PPUSH
// result := false ;
29284: LD_ADDR_VAR 0 8
29288: PUSH
29289: LD_INT 0
29291: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
29292: LD_VAR 0 5
29296: NOT
29297: IFTRUE 29306
29299: PUSH
29300: LD_VAR 0 1
29304: NOT
29305: OR
29306: IFTRUE 29315
29308: PUSH
29309: LD_VAR 0 2
29313: NOT
29314: OR
29315: IFTRUE 29324
29317: PUSH
29318: LD_VAR 0 3
29322: NOT
29323: OR
29324: IFFALSE 29328
// exit ;
29326: GO 30154
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
29328: LD_ADDR_VAR 0 14
29332: PUSH
29333: LD_VAR 0 1
29337: PPUSH
29338: LD_VAR 0 2
29342: PPUSH
29343: LD_VAR 0 3
29347: PPUSH
29348: LD_VAR 0 4
29352: PPUSH
29353: LD_VAR 0 5
29357: PUSH
29358: LD_INT 1
29360: ARRAY
29361: PPUSH
29362: CALL_OW 248
29366: PPUSH
29367: LD_INT 0
29369: PPUSH
29370: CALL 31435 0 6
29374: ST_TO_ADDR
// if not hexes then
29375: LD_VAR 0 14
29379: NOT
29380: IFFALSE 29384
// exit ;
29382: GO 30154
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29384: LD_ADDR_VAR 0 17
29388: PUSH
29389: LD_VAR 0 5
29393: PPUSH
29394: LD_INT 22
29396: PUSH
29397: LD_VAR 0 13
29401: PPUSH
29402: CALL_OW 255
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 2
29413: PUSH
29414: LD_INT 30
29416: PUSH
29417: LD_INT 0
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 30
29426: PUSH
29427: LD_INT 1
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: LIST
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PPUSH
29443: CALL_OW 72
29447: ST_TO_ADDR
// for i = 1 to hexes do
29448: LD_ADDR_VAR 0 9
29452: PUSH
29453: DOUBLE
29454: LD_INT 1
29456: DEC
29457: ST_TO_ADDR
29458: LD_VAR 0 14
29462: PUSH
29463: FOR_TO
29464: IFFALSE 30152
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29466: LD_ADDR_VAR 0 13
29470: PUSH
29471: LD_VAR 0 14
29475: PUSH
29476: LD_VAR 0 9
29480: ARRAY
29481: PUSH
29482: LD_INT 1
29484: ARRAY
29485: PPUSH
29486: LD_VAR 0 14
29490: PUSH
29491: LD_VAR 0 9
29495: ARRAY
29496: PUSH
29497: LD_INT 2
29499: ARRAY
29500: PPUSH
29501: CALL_OW 428
29505: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
29506: LD_VAR 0 14
29510: PUSH
29511: LD_VAR 0 9
29515: ARRAY
29516: PUSH
29517: LD_INT 1
29519: ARRAY
29520: PPUSH
29521: LD_VAR 0 14
29525: PUSH
29526: LD_VAR 0 9
29530: ARRAY
29531: PUSH
29532: LD_INT 2
29534: ARRAY
29535: PPUSH
29536: CALL_OW 351
29540: IFTRUE 29579
29542: PUSH
29543: LD_VAR 0 14
29547: PUSH
29548: LD_VAR 0 9
29552: ARRAY
29553: PUSH
29554: LD_INT 1
29556: ARRAY
29557: PPUSH
29558: LD_VAR 0 14
29562: PUSH
29563: LD_VAR 0 9
29567: ARRAY
29568: PUSH
29569: LD_INT 2
29571: ARRAY
29572: PPUSH
29573: CALL_OW 488
29577: NOT
29578: OR
29579: IFTRUE 29596
29581: PUSH
29582: LD_VAR 0 13
29586: PPUSH
29587: CALL_OW 247
29591: PUSH
29592: LD_INT 3
29594: EQUAL
29595: OR
29596: IFFALSE 29602
// exit ;
29598: POP
29599: POP
29600: GO 30154
// if not tmp then
29602: LD_VAR 0 13
29606: NOT
29607: IFFALSE 29611
// continue ;
29609: GO 29463
// result := true ;
29611: LD_ADDR_VAR 0 8
29615: PUSH
29616: LD_INT 1
29618: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29619: LD_VAR 0 6
29623: IFFALSE 29640
29625: PUSH
29626: LD_VAR 0 13
29630: PPUSH
29631: CALL_OW 247
29635: PUSH
29636: LD_INT 2
29638: EQUAL
29639: AND
29640: IFFALSE 29657
29642: PUSH
29643: LD_VAR 0 13
29647: PPUSH
29648: CALL_OW 263
29652: PUSH
29653: LD_INT 1
29655: EQUAL
29656: AND
29657: IFFALSE 29821
// begin if IsDrivenBy ( tmp ) then
29659: LD_VAR 0 13
29663: PPUSH
29664: CALL_OW 311
29668: IFFALSE 29672
// continue ;
29670: GO 29463
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29672: LD_VAR 0 6
29676: PPUSH
29677: LD_INT 3
29679: PUSH
29680: LD_INT 60
29682: PUSH
29683: EMPTY
29684: LIST
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: LD_INT 3
29692: PUSH
29693: LD_INT 55
29695: PUSH
29696: EMPTY
29697: LIST
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PPUSH
29707: CALL_OW 72
29711: IFFALSE 29819
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29713: LD_ADDR_VAR 0 18
29717: PUSH
29718: LD_VAR 0 6
29722: PPUSH
29723: LD_INT 3
29725: PUSH
29726: LD_INT 60
29728: PUSH
29729: EMPTY
29730: LIST
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: LD_INT 3
29738: PUSH
29739: LD_INT 55
29741: PUSH
29742: EMPTY
29743: LIST
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PPUSH
29753: CALL_OW 72
29757: PUSH
29758: LD_INT 1
29760: ARRAY
29761: ST_TO_ADDR
// if IsInUnit ( driver ) then
29762: LD_VAR 0 18
29766: PPUSH
29767: CALL_OW 310
29771: IFFALSE 29782
// ComExit ( driver ) ;
29773: LD_VAR 0 18
29777: PPUSH
29778: CALL 55435 0 1
// AddComEnterUnit ( driver , tmp ) ;
29782: LD_VAR 0 18
29786: PPUSH
29787: LD_VAR 0 13
29791: PPUSH
29792: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29796: LD_VAR 0 18
29800: PPUSH
29801: LD_VAR 0 7
29805: PPUSH
29806: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29810: LD_VAR 0 18
29814: PPUSH
29815: CALL_OW 181
// end ; continue ;
29819: GO 29463
// end ; if not cleaners or not tmp in cleaners then
29821: LD_VAR 0 6
29825: NOT
29826: IFTRUE 29841
29828: PUSH
29829: LD_VAR 0 13
29833: PUSH
29834: LD_VAR 0 6
29838: IN
29839: NOT
29840: OR
29841: IFFALSE 30150
// begin if dep then
29843: LD_VAR 0 17
29847: IFFALSE 29983
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29849: LD_ADDR_VAR 0 16
29853: PUSH
29854: LD_VAR 0 17
29858: PUSH
29859: LD_INT 1
29861: ARRAY
29862: PPUSH
29863: CALL_OW 250
29867: PPUSH
29868: LD_VAR 0 17
29872: PUSH
29873: LD_INT 1
29875: ARRAY
29876: PPUSH
29877: CALL_OW 254
29881: PPUSH
29882: LD_INT 5
29884: PPUSH
29885: CALL_OW 272
29889: PUSH
29890: LD_VAR 0 17
29894: PUSH
29895: LD_INT 1
29897: ARRAY
29898: PPUSH
29899: CALL_OW 251
29903: PPUSH
29904: LD_VAR 0 17
29908: PUSH
29909: LD_INT 1
29911: ARRAY
29912: PPUSH
29913: CALL_OW 254
29917: PPUSH
29918: LD_INT 5
29920: PPUSH
29921: CALL_OW 273
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29930: LD_VAR 0 16
29934: PUSH
29935: LD_INT 1
29937: ARRAY
29938: PPUSH
29939: LD_VAR 0 16
29943: PUSH
29944: LD_INT 2
29946: ARRAY
29947: PPUSH
29948: CALL_OW 488
29952: IFFALSE 29983
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29954: LD_VAR 0 13
29958: PPUSH
29959: LD_VAR 0 16
29963: PUSH
29964: LD_INT 1
29966: ARRAY
29967: PPUSH
29968: LD_VAR 0 16
29972: PUSH
29973: LD_INT 2
29975: ARRAY
29976: PPUSH
29977: CALL_OW 111
// continue ;
29981: GO 29463
// end ; end ; r := GetDir ( tmp ) ;
29983: LD_ADDR_VAR 0 15
29987: PUSH
29988: LD_VAR 0 13
29992: PPUSH
29993: CALL_OW 254
29997: ST_TO_ADDR
// if r = 5 then
29998: LD_VAR 0 15
30002: PUSH
30003: LD_INT 5
30005: EQUAL
30006: IFFALSE 30016
// r := 0 ;
30008: LD_ADDR_VAR 0 15
30012: PUSH
30013: LD_INT 0
30015: ST_TO_ADDR
// for j = r to 5 do
30016: LD_ADDR_VAR 0 10
30020: PUSH
30021: DOUBLE
30022: LD_VAR 0 15
30026: DEC
30027: ST_TO_ADDR
30028: LD_INT 5
30030: PUSH
30031: FOR_TO
30032: IFFALSE 30148
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
30034: LD_ADDR_VAR 0 11
30038: PUSH
30039: LD_VAR 0 13
30043: PPUSH
30044: CALL_OW 250
30048: PPUSH
30049: LD_VAR 0 10
30053: PPUSH
30054: LD_INT 2
30056: PPUSH
30057: CALL_OW 272
30061: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
30062: LD_ADDR_VAR 0 12
30066: PUSH
30067: LD_VAR 0 13
30071: PPUSH
30072: CALL_OW 251
30076: PPUSH
30077: LD_VAR 0 10
30081: PPUSH
30082: LD_INT 2
30084: PPUSH
30085: CALL_OW 273
30089: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
30090: LD_VAR 0 11
30094: PPUSH
30095: LD_VAR 0 12
30099: PPUSH
30100: CALL_OW 488
30104: IFFALSE 30123
30106: PUSH
30107: LD_VAR 0 11
30111: PPUSH
30112: LD_VAR 0 12
30116: PPUSH
30117: CALL_OW 428
30121: NOT
30122: AND
30123: IFFALSE 30146
// begin ComMoveXY ( tmp , _x , _y ) ;
30125: LD_VAR 0 13
30129: PPUSH
30130: LD_VAR 0 11
30134: PPUSH
30135: LD_VAR 0 12
30139: PPUSH
30140: CALL_OW 111
// break ;
30144: GO 30148
// end ; end ;
30146: GO 30031
30148: POP
30149: POP
// end ; end ;
30150: GO 29463
30152: POP
30153: POP
// end ;
30154: LD_VAR 0 8
30158: RET
// export function BuildingTechInvented ( side , btype ) ; begin
30159: LD_INT 0
30161: PPUSH
// result := true ;
30162: LD_ADDR_VAR 0 3
30166: PUSH
30167: LD_INT 1
30169: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
30170: LD_VAR 0 2
30174: PUSH
30175: LD_INT 24
30177: DOUBLE
30178: EQUAL
30179: IFTRUE 30189
30181: LD_INT 33
30183: DOUBLE
30184: EQUAL
30185: IFTRUE 30189
30187: GO 30214
30189: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
30190: LD_ADDR_VAR 0 3
30194: PUSH
30195: LD_INT 32
30197: PPUSH
30198: LD_VAR 0 1
30202: PPUSH
30203: CALL_OW 321
30207: PUSH
30208: LD_INT 2
30210: EQUAL
30211: ST_TO_ADDR
30212: GO 30530
30214: LD_INT 20
30216: DOUBLE
30217: EQUAL
30218: IFTRUE 30222
30220: GO 30247
30222: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
30223: LD_ADDR_VAR 0 3
30227: PUSH
30228: LD_INT 6
30230: PPUSH
30231: LD_VAR 0 1
30235: PPUSH
30236: CALL_OW 321
30240: PUSH
30241: LD_INT 2
30243: EQUAL
30244: ST_TO_ADDR
30245: GO 30530
30247: LD_INT 22
30249: DOUBLE
30250: EQUAL
30251: IFTRUE 30261
30253: LD_INT 36
30255: DOUBLE
30256: EQUAL
30257: IFTRUE 30261
30259: GO 30286
30261: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
30262: LD_ADDR_VAR 0 3
30266: PUSH
30267: LD_INT 15
30269: PPUSH
30270: LD_VAR 0 1
30274: PPUSH
30275: CALL_OW 321
30279: PUSH
30280: LD_INT 2
30282: EQUAL
30283: ST_TO_ADDR
30284: GO 30530
30286: LD_INT 30
30288: DOUBLE
30289: EQUAL
30290: IFTRUE 30294
30292: GO 30319
30294: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
30295: LD_ADDR_VAR 0 3
30299: PUSH
30300: LD_INT 20
30302: PPUSH
30303: LD_VAR 0 1
30307: PPUSH
30308: CALL_OW 321
30312: PUSH
30313: LD_INT 2
30315: EQUAL
30316: ST_TO_ADDR
30317: GO 30530
30319: LD_INT 28
30321: DOUBLE
30322: EQUAL
30323: IFTRUE 30333
30325: LD_INT 21
30327: DOUBLE
30328: EQUAL
30329: IFTRUE 30333
30331: GO 30358
30333: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
30334: LD_ADDR_VAR 0 3
30338: PUSH
30339: LD_INT 21
30341: PPUSH
30342: LD_VAR 0 1
30346: PPUSH
30347: CALL_OW 321
30351: PUSH
30352: LD_INT 2
30354: EQUAL
30355: ST_TO_ADDR
30356: GO 30530
30358: LD_INT 16
30360: DOUBLE
30361: EQUAL
30362: IFTRUE 30366
30364: GO 30391
30366: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
30367: LD_ADDR_VAR 0 3
30371: PUSH
30372: LD_INT 84
30374: PPUSH
30375: LD_VAR 0 1
30379: PPUSH
30380: CALL_OW 321
30384: PUSH
30385: LD_INT 2
30387: EQUAL
30388: ST_TO_ADDR
30389: GO 30530
30391: LD_INT 19
30393: DOUBLE
30394: EQUAL
30395: IFTRUE 30405
30397: LD_INT 23
30399: DOUBLE
30400: EQUAL
30401: IFTRUE 30405
30403: GO 30430
30405: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
30406: LD_ADDR_VAR 0 3
30410: PUSH
30411: LD_INT 83
30413: PPUSH
30414: LD_VAR 0 1
30418: PPUSH
30419: CALL_OW 321
30423: PUSH
30424: LD_INT 2
30426: EQUAL
30427: ST_TO_ADDR
30428: GO 30530
30430: LD_INT 17
30432: DOUBLE
30433: EQUAL
30434: IFTRUE 30438
30436: GO 30463
30438: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
30439: LD_ADDR_VAR 0 3
30443: PUSH
30444: LD_INT 39
30446: PPUSH
30447: LD_VAR 0 1
30451: PPUSH
30452: CALL_OW 321
30456: PUSH
30457: LD_INT 2
30459: EQUAL
30460: ST_TO_ADDR
30461: GO 30530
30463: LD_INT 18
30465: DOUBLE
30466: EQUAL
30467: IFTRUE 30471
30469: GO 30496
30471: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
30472: LD_ADDR_VAR 0 3
30476: PUSH
30477: LD_INT 40
30479: PPUSH
30480: LD_VAR 0 1
30484: PPUSH
30485: CALL_OW 321
30489: PUSH
30490: LD_INT 2
30492: EQUAL
30493: ST_TO_ADDR
30494: GO 30530
30496: LD_INT 27
30498: DOUBLE
30499: EQUAL
30500: IFTRUE 30504
30502: GO 30529
30504: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
30505: LD_ADDR_VAR 0 3
30509: PUSH
30510: LD_INT 35
30512: PPUSH
30513: LD_VAR 0 1
30517: PPUSH
30518: CALL_OW 321
30522: PUSH
30523: LD_INT 2
30525: EQUAL
30526: ST_TO_ADDR
30527: GO 30530
30529: POP
// end ;
30530: LD_VAR 0 3
30534: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
30535: LD_INT 0
30537: PPUSH
30538: PPUSH
30539: PPUSH
30540: PPUSH
30541: PPUSH
30542: PPUSH
30543: PPUSH
30544: PPUSH
30545: PPUSH
30546: PPUSH
30547: PPUSH
// result := false ;
30548: LD_ADDR_VAR 0 6
30552: PUSH
30553: LD_INT 0
30555: ST_TO_ADDR
// if btype = b_depot then
30556: LD_VAR 0 2
30560: PUSH
30561: LD_INT 0
30563: EQUAL
30564: IFFALSE 30576
// begin result := true ;
30566: LD_ADDR_VAR 0 6
30570: PUSH
30571: LD_INT 1
30573: ST_TO_ADDR
// exit ;
30574: GO 31430
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30576: LD_VAR 0 1
30580: NOT
30581: IFTRUE 30606
30583: PUSH
30584: LD_VAR 0 1
30588: PPUSH
30589: CALL_OW 266
30593: PUSH
30594: LD_INT 0
30596: PUSH
30597: LD_INT 1
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: IN
30604: NOT
30605: OR
30606: IFTRUE 30615
30608: PUSH
30609: LD_VAR 0 2
30613: NOT
30614: OR
30615: IFTRUE 30651
30617: PUSH
30618: LD_VAR 0 5
30622: PUSH
30623: LD_INT 0
30625: PUSH
30626: LD_INT 1
30628: PUSH
30629: LD_INT 2
30631: PUSH
30632: LD_INT 3
30634: PUSH
30635: LD_INT 4
30637: PUSH
30638: LD_INT 5
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: IN
30649: NOT
30650: OR
30651: IFTRUE 30670
30653: PUSH
30654: LD_VAR 0 3
30658: PPUSH
30659: LD_VAR 0 4
30663: PPUSH
30664: CALL_OW 488
30668: NOT
30669: OR
30670: IFFALSE 30674
// exit ;
30672: GO 31430
// side := GetSide ( depot ) ;
30674: LD_ADDR_VAR 0 9
30678: PUSH
30679: LD_VAR 0 1
30683: PPUSH
30684: CALL_OW 255
30688: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30689: LD_VAR 0 9
30693: PPUSH
30694: LD_VAR 0 2
30698: PPUSH
30699: CALL 30159 0 2
30703: NOT
30704: IFFALSE 30708
// exit ;
30706: GO 31430
// pom := GetBase ( depot ) ;
30708: LD_ADDR_VAR 0 10
30712: PUSH
30713: LD_VAR 0 1
30717: PPUSH
30718: CALL_OW 274
30722: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30723: LD_ADDR_VAR 0 11
30727: PUSH
30728: LD_VAR 0 2
30732: PPUSH
30733: LD_VAR 0 1
30737: PPUSH
30738: CALL_OW 248
30742: PPUSH
30743: CALL_OW 450
30747: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30748: LD_VAR 0 10
30752: PPUSH
30753: LD_INT 1
30755: PPUSH
30756: CALL_OW 275
30760: PUSH
30761: LD_VAR 0 11
30765: PUSH
30766: LD_INT 1
30768: ARRAY
30769: GREATEREQUAL
30770: IFFALSE 30796
30772: PUSH
30773: LD_VAR 0 10
30777: PPUSH
30778: LD_INT 2
30780: PPUSH
30781: CALL_OW 275
30785: PUSH
30786: LD_VAR 0 11
30790: PUSH
30791: LD_INT 2
30793: ARRAY
30794: GREATEREQUAL
30795: AND
30796: IFFALSE 30822
30798: PUSH
30799: LD_VAR 0 10
30803: PPUSH
30804: LD_INT 3
30806: PPUSH
30807: CALL_OW 275
30811: PUSH
30812: LD_VAR 0 11
30816: PUSH
30817: LD_INT 3
30819: ARRAY
30820: GREATEREQUAL
30821: AND
30822: NOT
30823: IFFALSE 30827
// exit ;
30825: GO 31430
// if GetBType ( depot ) = b_depot then
30827: LD_VAR 0 1
30831: PPUSH
30832: CALL_OW 266
30836: PUSH
30837: LD_INT 0
30839: EQUAL
30840: IFFALSE 30852
// dist := 28 else
30842: LD_ADDR_VAR 0 14
30846: PUSH
30847: LD_INT 28
30849: ST_TO_ADDR
30850: GO 30860
// dist := 36 ;
30852: LD_ADDR_VAR 0 14
30856: PUSH
30857: LD_INT 36
30859: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30860: LD_VAR 0 1
30864: PPUSH
30865: LD_VAR 0 3
30869: PPUSH
30870: LD_VAR 0 4
30874: PPUSH
30875: CALL_OW 297
30879: PUSH
30880: LD_VAR 0 14
30884: GREATER
30885: IFFALSE 30889
// exit ;
30887: GO 31430
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30889: LD_ADDR_VAR 0 12
30893: PUSH
30894: LD_VAR 0 2
30898: PPUSH
30899: LD_VAR 0 3
30903: PPUSH
30904: LD_VAR 0 4
30908: PPUSH
30909: LD_VAR 0 5
30913: PPUSH
30914: LD_VAR 0 1
30918: PPUSH
30919: CALL_OW 248
30923: PPUSH
30924: LD_INT 0
30926: PPUSH
30927: CALL 31435 0 6
30931: ST_TO_ADDR
// if not hexes then
30932: LD_VAR 0 12
30936: NOT
30937: IFFALSE 30941
// exit ;
30939: GO 31430
// hex := GetHexInfo ( x , y ) ;
30941: LD_ADDR_VAR 0 15
30945: PUSH
30946: LD_VAR 0 3
30950: PPUSH
30951: LD_VAR 0 4
30955: PPUSH
30956: CALL_OW 546
30960: ST_TO_ADDR
// if hex [ 1 ] then
30961: LD_VAR 0 15
30965: PUSH
30966: LD_INT 1
30968: ARRAY
30969: IFFALSE 30973
// exit ;
30971: GO 31430
// height := hex [ 2 ] ;
30973: LD_ADDR_VAR 0 13
30977: PUSH
30978: LD_VAR 0 15
30982: PUSH
30983: LD_INT 2
30985: ARRAY
30986: ST_TO_ADDR
// for i = 1 to hexes do
30987: LD_ADDR_VAR 0 7
30991: PUSH
30992: DOUBLE
30993: LD_INT 1
30995: DEC
30996: ST_TO_ADDR
30997: LD_VAR 0 12
31001: PUSH
31002: FOR_TO
31003: IFFALSE 31347
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
31005: LD_VAR 0 12
31009: PUSH
31010: LD_VAR 0 7
31014: ARRAY
31015: PUSH
31016: LD_INT 1
31018: ARRAY
31019: PPUSH
31020: LD_VAR 0 12
31024: PUSH
31025: LD_VAR 0 7
31029: ARRAY
31030: PUSH
31031: LD_INT 2
31033: ARRAY
31034: PPUSH
31035: CALL_OW 488
31039: NOT
31040: IFTRUE 31082
31042: PUSH
31043: LD_VAR 0 12
31047: PUSH
31048: LD_VAR 0 7
31052: ARRAY
31053: PUSH
31054: LD_INT 1
31056: ARRAY
31057: PPUSH
31058: LD_VAR 0 12
31062: PUSH
31063: LD_VAR 0 7
31067: ARRAY
31068: PUSH
31069: LD_INT 2
31071: ARRAY
31072: PPUSH
31073: CALL_OW 428
31077: PUSH
31078: LD_INT 0
31080: GREATER
31081: OR
31082: IFTRUE 31120
31084: PUSH
31085: LD_VAR 0 12
31089: PUSH
31090: LD_VAR 0 7
31094: ARRAY
31095: PUSH
31096: LD_INT 1
31098: ARRAY
31099: PPUSH
31100: LD_VAR 0 12
31104: PUSH
31105: LD_VAR 0 7
31109: ARRAY
31110: PUSH
31111: LD_INT 2
31113: ARRAY
31114: PPUSH
31115: CALL_OW 351
31119: OR
31120: IFFALSE 31126
// exit ;
31122: POP
31123: POP
31124: GO 31430
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31126: LD_ADDR_VAR 0 8
31130: PUSH
31131: LD_VAR 0 12
31135: PUSH
31136: LD_VAR 0 7
31140: ARRAY
31141: PUSH
31142: LD_INT 1
31144: ARRAY
31145: PPUSH
31146: LD_VAR 0 12
31150: PUSH
31151: LD_VAR 0 7
31155: ARRAY
31156: PUSH
31157: LD_INT 2
31159: ARRAY
31160: PPUSH
31161: CALL_OW 546
31165: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
31166: LD_VAR 0 8
31170: PUSH
31171: LD_INT 1
31173: ARRAY
31174: IFTRUE 31196
31176: PUSH
31177: LD_VAR 0 8
31181: PUSH
31182: LD_INT 2
31184: ARRAY
31185: PUSH
31186: LD_VAR 0 13
31190: PUSH
31191: LD_INT 2
31193: PLUS
31194: GREATER
31195: OR
31196: IFTRUE 31218
31198: PUSH
31199: LD_VAR 0 8
31203: PUSH
31204: LD_INT 2
31206: ARRAY
31207: PUSH
31208: LD_VAR 0 13
31212: PUSH
31213: LD_INT 2
31215: MINUS
31216: LESS
31217: OR
31218: IFTRUE 31286
31220: PUSH
31221: LD_VAR 0 8
31225: PUSH
31226: LD_INT 3
31228: ARRAY
31229: PUSH
31230: LD_INT 0
31232: PUSH
31233: LD_INT 8
31235: PUSH
31236: LD_INT 9
31238: PUSH
31239: LD_INT 10
31241: PUSH
31242: LD_INT 11
31244: PUSH
31245: LD_INT 12
31247: PUSH
31248: LD_INT 13
31250: PUSH
31251: LD_INT 16
31253: PUSH
31254: LD_INT 17
31256: PUSH
31257: LD_INT 18
31259: PUSH
31260: LD_INT 19
31262: PUSH
31263: LD_INT 20
31265: PUSH
31266: LD_INT 21
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: IN
31284: NOT
31285: OR
31286: IFTRUE 31299
31288: PUSH
31289: LD_VAR 0 8
31293: PUSH
31294: LD_INT 5
31296: ARRAY
31297: NOT
31298: OR
31299: IFTRUE 31339
31301: PUSH
31302: LD_VAR 0 8
31306: PUSH
31307: LD_INT 6
31309: ARRAY
31310: PUSH
31311: LD_INT 1
31313: PUSH
31314: LD_INT 2
31316: PUSH
31317: LD_INT 7
31319: PUSH
31320: LD_INT 9
31322: PUSH
31323: LD_INT 10
31325: PUSH
31326: LD_INT 11
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: IN
31337: NOT
31338: OR
31339: IFFALSE 31345
// exit ;
31341: POP
31342: POP
31343: GO 31430
// end ;
31345: GO 31002
31347: POP
31348: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
31349: LD_VAR 0 9
31353: PPUSH
31354: LD_VAR 0 3
31358: PPUSH
31359: LD_VAR 0 4
31363: PPUSH
31364: LD_INT 20
31366: PPUSH
31367: CALL 23249 0 4
31371: PUSH
31372: LD_INT 4
31374: ARRAY
31375: IFFALSE 31379
// exit ;
31377: GO 31430
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
31379: LD_VAR 0 2
31383: PUSH
31384: LD_INT 29
31386: PUSH
31387: LD_INT 30
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: IN
31394: IFFALSE 31418
31396: PUSH
31397: LD_VAR 0 3
31401: PPUSH
31402: LD_VAR 0 4
31406: PPUSH
31407: LD_VAR 0 9
31411: PPUSH
31412: CALL_OW 440
31416: NOT
31417: AND
31418: IFFALSE 31422
// exit ;
31420: GO 31430
// result := true ;
31422: LD_ADDR_VAR 0 6
31426: PUSH
31427: LD_INT 1
31429: ST_TO_ADDR
// end ;
31430: LD_VAR 0 6
31434: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
31435: LD_INT 0
31437: PPUSH
31438: PPUSH
31439: PPUSH
31440: PPUSH
31441: PPUSH
31442: PPUSH
31443: PPUSH
31444: PPUSH
31445: PPUSH
31446: PPUSH
31447: PPUSH
31448: PPUSH
31449: PPUSH
31450: PPUSH
31451: PPUSH
31452: PPUSH
31453: PPUSH
31454: PPUSH
31455: PPUSH
31456: PPUSH
31457: PPUSH
31458: PPUSH
31459: PPUSH
31460: PPUSH
31461: PPUSH
31462: PPUSH
31463: PPUSH
31464: PPUSH
31465: PPUSH
31466: PPUSH
31467: PPUSH
31468: PPUSH
31469: PPUSH
31470: PPUSH
31471: PPUSH
31472: PPUSH
31473: PPUSH
31474: PPUSH
31475: PPUSH
31476: PPUSH
31477: PPUSH
31478: PPUSH
31479: PPUSH
31480: PPUSH
31481: PPUSH
31482: PPUSH
31483: PPUSH
31484: PPUSH
31485: PPUSH
31486: PPUSH
31487: PPUSH
31488: PPUSH
31489: PPUSH
31490: PPUSH
31491: PPUSH
31492: PPUSH
31493: PPUSH
31494: PPUSH
// result = [ ] ;
31495: LD_ADDR_VAR 0 7
31499: PUSH
31500: EMPTY
31501: ST_TO_ADDR
// temp_list = [ ] ;
31502: LD_ADDR_VAR 0 9
31506: PUSH
31507: EMPTY
31508: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
31509: LD_VAR 0 4
31513: PUSH
31514: LD_INT 0
31516: PUSH
31517: LD_INT 1
31519: PUSH
31520: LD_INT 2
31522: PUSH
31523: LD_INT 3
31525: PUSH
31526: LD_INT 4
31528: PUSH
31529: LD_INT 5
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: IN
31540: NOT
31541: IFTRUE 31584
31543: PUSH
31544: LD_VAR 0 1
31548: PUSH
31549: LD_INT 0
31551: PUSH
31552: LD_INT 1
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: IN
31559: IFFALSE 31583
31561: PUSH
31562: LD_VAR 0 5
31566: PUSH
31567: LD_INT 1
31569: PUSH
31570: LD_INT 2
31572: PUSH
31573: LD_INT 3
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: LIST
31580: IN
31581: NOT
31582: AND
31583: OR
31584: IFFALSE 31588
// exit ;
31586: GO 49987
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
31588: LD_VAR 0 1
31592: PUSH
31593: LD_INT 6
31595: PUSH
31596: LD_INT 7
31598: PUSH
31599: LD_INT 8
31601: PUSH
31602: LD_INT 13
31604: PUSH
31605: LD_INT 12
31607: PUSH
31608: LD_INT 15
31610: PUSH
31611: LD_INT 11
31613: PUSH
31614: LD_INT 14
31616: PUSH
31617: LD_INT 10
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: IN
31631: IFFALSE 31641
// btype = b_lab ;
31633: LD_ADDR_VAR 0 1
31637: PUSH
31638: LD_INT 6
31640: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31641: LD_VAR 0 6
31645: PUSH
31646: LD_INT 0
31648: PUSH
31649: LD_INT 1
31651: PUSH
31652: LD_INT 2
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: LIST
31659: IN
31660: NOT
31661: IFTRUE 31729
31663: PUSH
31664: LD_VAR 0 1
31668: PUSH
31669: LD_INT 0
31671: PUSH
31672: LD_INT 1
31674: PUSH
31675: LD_INT 2
31677: PUSH
31678: LD_INT 3
31680: PUSH
31681: LD_INT 6
31683: PUSH
31684: LD_INT 36
31686: PUSH
31687: LD_INT 4
31689: PUSH
31690: LD_INT 5
31692: PUSH
31693: LD_INT 31
31695: PUSH
31696: LD_INT 32
31698: PUSH
31699: LD_INT 33
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: IN
31715: NOT
31716: IFFALSE 31728
31718: PUSH
31719: LD_VAR 0 6
31723: PUSH
31724: LD_INT 1
31726: EQUAL
31727: AND
31728: OR
31729: IFTRUE 31761
31731: PUSH
31732: LD_VAR 0 1
31736: PUSH
31737: LD_INT 2
31739: PUSH
31740: LD_INT 3
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: IN
31747: NOT
31748: IFFALSE 31760
31750: PUSH
31751: LD_VAR 0 6
31755: PUSH
31756: LD_INT 2
31758: EQUAL
31759: AND
31760: OR
31761: IFFALSE 31771
// mode = 0 ;
31763: LD_ADDR_VAR 0 6
31767: PUSH
31768: LD_INT 0
31770: ST_TO_ADDR
// case mode of 0 :
31771: LD_VAR 0 6
31775: PUSH
31776: LD_INT 0
31778: DOUBLE
31779: EQUAL
31780: IFTRUE 31784
31782: GO 43237
31784: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31785: LD_ADDR_VAR 0 11
31789: PUSH
31790: LD_INT 0
31792: PUSH
31793: LD_INT 0
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 0
31802: PUSH
31803: LD_INT 1
31805: NEG
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 1
31813: PUSH
31814: LD_INT 0
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 1
31823: PUSH
31824: LD_INT 1
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 0
31833: PUSH
31834: LD_INT 1
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 1
31843: NEG
31844: PUSH
31845: LD_INT 0
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 1
31854: NEG
31855: PUSH
31856: LD_INT 1
31858: NEG
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: LD_INT 1
31866: NEG
31867: PUSH
31868: LD_INT 2
31870: NEG
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 0
31878: PUSH
31879: LD_INT 2
31881: NEG
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 1
31889: PUSH
31890: LD_INT 1
31892: NEG
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 1
31900: PUSH
31901: LD_INT 2
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 0
31910: PUSH
31911: LD_INT 2
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 1
31920: NEG
31921: PUSH
31922: LD_INT 1
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 1
31931: PUSH
31932: LD_INT 3
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 0
31941: PUSH
31942: LD_INT 3
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 1
31951: NEG
31952: PUSH
31953: LD_INT 2
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31978: LD_ADDR_VAR 0 12
31982: PUSH
31983: LD_INT 0
31985: PUSH
31986: LD_INT 0
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 0
31995: PUSH
31996: LD_INT 1
31998: NEG
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 1
32006: PUSH
32007: LD_INT 0
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 1
32016: PUSH
32017: LD_INT 1
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 0
32026: PUSH
32027: LD_INT 1
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 1
32036: NEG
32037: PUSH
32038: LD_INT 0
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 1
32047: NEG
32048: PUSH
32049: LD_INT 1
32051: NEG
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 1
32059: PUSH
32060: LD_INT 1
32062: NEG
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 2
32070: PUSH
32071: LD_INT 0
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 2
32080: PUSH
32081: LD_INT 1
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 1
32090: NEG
32091: PUSH
32092: LD_INT 1
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 2
32101: NEG
32102: PUSH
32103: LD_INT 0
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 2
32112: NEG
32113: PUSH
32114: LD_INT 1
32116: NEG
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 2
32124: NEG
32125: PUSH
32126: LD_INT 1
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: LD_INT 3
32135: NEG
32136: PUSH
32137: LD_INT 0
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 3
32146: NEG
32147: PUSH
32148: LD_INT 1
32150: NEG
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32174: LD_ADDR_VAR 0 13
32178: PUSH
32179: LD_INT 0
32181: PUSH
32182: LD_INT 0
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 0
32191: PUSH
32192: LD_INT 1
32194: NEG
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 1
32202: PUSH
32203: LD_INT 0
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 1
32212: PUSH
32213: LD_INT 1
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 0
32222: PUSH
32223: LD_INT 1
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 1
32232: NEG
32233: PUSH
32234: LD_INT 0
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 1
32243: NEG
32244: PUSH
32245: LD_INT 1
32247: NEG
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 1
32255: NEG
32256: PUSH
32257: LD_INT 2
32259: NEG
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 2
32267: PUSH
32268: LD_INT 1
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 2
32277: PUSH
32278: LD_INT 2
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 1
32287: PUSH
32288: LD_INT 2
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 2
32297: NEG
32298: PUSH
32299: LD_INT 1
32301: NEG
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 2
32309: NEG
32310: PUSH
32311: LD_INT 2
32313: NEG
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 2
32321: NEG
32322: PUSH
32323: LD_INT 3
32325: NEG
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 3
32333: NEG
32334: PUSH
32335: LD_INT 2
32337: NEG
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 3
32345: NEG
32346: PUSH
32347: LD_INT 3
32349: NEG
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32373: LD_ADDR_VAR 0 14
32377: PUSH
32378: LD_INT 0
32380: PUSH
32381: LD_INT 0
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 0
32390: PUSH
32391: LD_INT 1
32393: NEG
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 1
32401: PUSH
32402: LD_INT 0
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 1
32411: PUSH
32412: LD_INT 1
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 0
32421: PUSH
32422: LD_INT 1
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 1
32431: NEG
32432: PUSH
32433: LD_INT 0
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 1
32442: NEG
32443: PUSH
32444: LD_INT 1
32446: NEG
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 1
32454: NEG
32455: PUSH
32456: LD_INT 2
32458: NEG
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 0
32466: PUSH
32467: LD_INT 2
32469: NEG
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 1
32477: PUSH
32478: LD_INT 1
32480: NEG
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 1
32488: PUSH
32489: LD_INT 2
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 0
32498: PUSH
32499: LD_INT 2
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 1
32508: NEG
32509: PUSH
32510: LD_INT 1
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 1
32519: NEG
32520: PUSH
32521: LD_INT 3
32523: NEG
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 0
32531: PUSH
32532: LD_INT 3
32534: NEG
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 1
32542: PUSH
32543: LD_INT 2
32545: NEG
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32569: LD_ADDR_VAR 0 15
32573: PUSH
32574: LD_INT 0
32576: PUSH
32577: LD_INT 0
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 0
32586: PUSH
32587: LD_INT 1
32589: NEG
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 1
32597: PUSH
32598: LD_INT 0
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 1
32607: PUSH
32608: LD_INT 1
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 0
32617: PUSH
32618: LD_INT 1
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 1
32627: NEG
32628: PUSH
32629: LD_INT 0
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 1
32638: NEG
32639: PUSH
32640: LD_INT 1
32642: NEG
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 1
32650: PUSH
32651: LD_INT 1
32653: NEG
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 2
32661: PUSH
32662: LD_INT 0
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 2
32671: PUSH
32672: LD_INT 1
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 1
32681: NEG
32682: PUSH
32683: LD_INT 1
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 2
32692: NEG
32693: PUSH
32694: LD_INT 0
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 2
32703: NEG
32704: PUSH
32705: LD_INT 1
32707: NEG
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 2
32715: PUSH
32716: LD_INT 1
32718: NEG
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 3
32726: PUSH
32727: LD_INT 0
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 3
32736: PUSH
32737: LD_INT 1
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32762: LD_ADDR_VAR 0 16
32766: PUSH
32767: LD_INT 0
32769: PUSH
32770: LD_INT 0
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 0
32779: PUSH
32780: LD_INT 1
32782: NEG
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 1
32790: PUSH
32791: LD_INT 0
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 1
32800: PUSH
32801: LD_INT 1
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 0
32810: PUSH
32811: LD_INT 1
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 1
32820: NEG
32821: PUSH
32822: LD_INT 0
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 1
32831: NEG
32832: PUSH
32833: LD_INT 1
32835: NEG
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 1
32843: NEG
32844: PUSH
32845: LD_INT 2
32847: NEG
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 2
32855: PUSH
32856: LD_INT 1
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 2
32865: PUSH
32866: LD_INT 2
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: LD_INT 1
32875: PUSH
32876: LD_INT 2
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 2
32885: NEG
32886: PUSH
32887: LD_INT 1
32889: NEG
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 2
32897: NEG
32898: PUSH
32899: LD_INT 2
32901: NEG
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 3
32909: PUSH
32910: LD_INT 2
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 3
32919: PUSH
32920: LD_INT 3
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 2
32929: PUSH
32930: LD_INT 3
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32955: LD_ADDR_VAR 0 17
32959: PUSH
32960: LD_INT 0
32962: PUSH
32963: LD_INT 0
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 0
32972: PUSH
32973: LD_INT 1
32975: NEG
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 1
32983: PUSH
32984: LD_INT 0
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 1
32993: PUSH
32994: LD_INT 1
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 0
33003: PUSH
33004: LD_INT 1
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 1
33013: NEG
33014: PUSH
33015: LD_INT 0
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 1
33024: NEG
33025: PUSH
33026: LD_INT 1
33028: NEG
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 1
33036: NEG
33037: PUSH
33038: LD_INT 2
33040: NEG
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 0
33048: PUSH
33049: LD_INT 2
33051: NEG
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 1
33059: PUSH
33060: LD_INT 1
33062: NEG
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 2
33070: PUSH
33071: LD_INT 0
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 2
33080: PUSH
33081: LD_INT 1
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 2
33090: PUSH
33091: LD_INT 2
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 1
33100: PUSH
33101: LD_INT 2
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 0
33110: PUSH
33111: LD_INT 2
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 1
33120: NEG
33121: PUSH
33122: LD_INT 1
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 2
33131: NEG
33132: PUSH
33133: LD_INT 0
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 2
33142: NEG
33143: PUSH
33144: LD_INT 1
33146: NEG
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 2
33154: NEG
33155: PUSH
33156: LD_INT 2
33158: NEG
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33185: LD_ADDR_VAR 0 18
33189: PUSH
33190: LD_INT 0
33192: PUSH
33193: LD_INT 0
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 0
33202: PUSH
33203: LD_INT 1
33205: NEG
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 1
33213: PUSH
33214: LD_INT 0
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 1
33223: PUSH
33224: LD_INT 1
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 0
33233: PUSH
33234: LD_INT 1
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 1
33243: NEG
33244: PUSH
33245: LD_INT 0
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 1
33254: NEG
33255: PUSH
33256: LD_INT 1
33258: NEG
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 1
33266: NEG
33267: PUSH
33268: LD_INT 2
33270: NEG
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 0
33278: PUSH
33279: LD_INT 2
33281: NEG
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 1
33289: PUSH
33290: LD_INT 1
33292: NEG
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 2
33300: PUSH
33301: LD_INT 0
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 2
33310: PUSH
33311: LD_INT 1
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: LD_INT 2
33320: PUSH
33321: LD_INT 2
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 1
33330: PUSH
33331: LD_INT 2
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 0
33340: PUSH
33341: LD_INT 2
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 1
33350: NEG
33351: PUSH
33352: LD_INT 1
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 2
33361: NEG
33362: PUSH
33363: LD_INT 0
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 2
33372: NEG
33373: PUSH
33374: LD_INT 1
33376: NEG
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 2
33384: NEG
33385: PUSH
33386: LD_INT 2
33388: NEG
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33415: LD_ADDR_VAR 0 19
33419: PUSH
33420: LD_INT 0
33422: PUSH
33423: LD_INT 0
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 0
33432: PUSH
33433: LD_INT 1
33435: NEG
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 1
33443: PUSH
33444: LD_INT 0
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 1
33453: PUSH
33454: LD_INT 1
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 0
33463: PUSH
33464: LD_INT 1
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 1
33473: NEG
33474: PUSH
33475: LD_INT 0
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 1
33484: NEG
33485: PUSH
33486: LD_INT 1
33488: NEG
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 1
33496: NEG
33497: PUSH
33498: LD_INT 2
33500: NEG
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PUSH
33506: LD_INT 0
33508: PUSH
33509: LD_INT 2
33511: NEG
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: LD_INT 1
33519: PUSH
33520: LD_INT 1
33522: NEG
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 2
33530: PUSH
33531: LD_INT 0
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PUSH
33538: LD_INT 2
33540: PUSH
33541: LD_INT 1
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 2
33550: PUSH
33551: LD_INT 2
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 1
33560: PUSH
33561: LD_INT 2
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 0
33570: PUSH
33571: LD_INT 2
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 1
33580: NEG
33581: PUSH
33582: LD_INT 1
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 2
33591: NEG
33592: PUSH
33593: LD_INT 0
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PUSH
33600: LD_INT 2
33602: NEG
33603: PUSH
33604: LD_INT 1
33606: NEG
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 2
33614: NEG
33615: PUSH
33616: LD_INT 2
33618: NEG
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33645: LD_ADDR_VAR 0 20
33649: PUSH
33650: LD_INT 0
33652: PUSH
33653: LD_INT 0
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 0
33662: PUSH
33663: LD_INT 1
33665: NEG
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 1
33673: PUSH
33674: LD_INT 0
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 1
33683: PUSH
33684: LD_INT 1
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 0
33693: PUSH
33694: LD_INT 1
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 1
33703: NEG
33704: PUSH
33705: LD_INT 0
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 1
33714: NEG
33715: PUSH
33716: LD_INT 1
33718: NEG
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 1
33726: NEG
33727: PUSH
33728: LD_INT 2
33730: NEG
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 0
33738: PUSH
33739: LD_INT 2
33741: NEG
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 1
33749: PUSH
33750: LD_INT 1
33752: NEG
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 2
33760: PUSH
33761: LD_INT 0
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 2
33770: PUSH
33771: LD_INT 1
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 2
33780: PUSH
33781: LD_INT 2
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 1
33790: PUSH
33791: LD_INT 2
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 0
33800: PUSH
33801: LD_INT 2
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 1
33810: NEG
33811: PUSH
33812: LD_INT 1
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 2
33821: NEG
33822: PUSH
33823: LD_INT 0
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 2
33832: NEG
33833: PUSH
33834: LD_INT 1
33836: NEG
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 2
33844: NEG
33845: PUSH
33846: LD_INT 2
33848: NEG
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33875: LD_ADDR_VAR 0 21
33879: PUSH
33880: LD_INT 0
33882: PUSH
33883: LD_INT 0
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 0
33892: PUSH
33893: LD_INT 1
33895: NEG
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 1
33903: PUSH
33904: LD_INT 0
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 1
33913: PUSH
33914: LD_INT 1
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 0
33923: PUSH
33924: LD_INT 1
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 1
33933: NEG
33934: PUSH
33935: LD_INT 0
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 1
33944: NEG
33945: PUSH
33946: LD_INT 1
33948: NEG
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 1
33956: NEG
33957: PUSH
33958: LD_INT 2
33960: NEG
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 0
33968: PUSH
33969: LD_INT 2
33971: NEG
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 1
33979: PUSH
33980: LD_INT 1
33982: NEG
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 2
33990: PUSH
33991: LD_INT 0
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PUSH
33998: LD_INT 2
34000: PUSH
34001: LD_INT 1
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PUSH
34008: LD_INT 2
34010: PUSH
34011: LD_INT 2
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 1
34020: PUSH
34021: LD_INT 2
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 0
34030: PUSH
34031: LD_INT 2
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 1
34040: NEG
34041: PUSH
34042: LD_INT 1
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 2
34051: NEG
34052: PUSH
34053: LD_INT 0
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 2
34062: NEG
34063: PUSH
34064: LD_INT 1
34066: NEG
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 2
34074: NEG
34075: PUSH
34076: LD_INT 2
34078: NEG
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34105: LD_ADDR_VAR 0 22
34109: PUSH
34110: LD_INT 0
34112: PUSH
34113: LD_INT 0
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 0
34122: PUSH
34123: LD_INT 1
34125: NEG
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 1
34133: PUSH
34134: LD_INT 0
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 1
34143: PUSH
34144: LD_INT 1
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 0
34153: PUSH
34154: LD_INT 1
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 1
34163: NEG
34164: PUSH
34165: LD_INT 0
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 1
34174: NEG
34175: PUSH
34176: LD_INT 1
34178: NEG
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 1
34186: NEG
34187: PUSH
34188: LD_INT 2
34190: NEG
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 0
34198: PUSH
34199: LD_INT 2
34201: NEG
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 1
34209: PUSH
34210: LD_INT 1
34212: NEG
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: LD_INT 2
34220: PUSH
34221: LD_INT 0
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: LD_INT 2
34230: PUSH
34231: LD_INT 1
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: LD_INT 2
34240: PUSH
34241: LD_INT 2
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 1
34250: PUSH
34251: LD_INT 2
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: LD_INT 0
34260: PUSH
34261: LD_INT 2
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 1
34270: NEG
34271: PUSH
34272: LD_INT 1
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: LD_INT 2
34281: NEG
34282: PUSH
34283: LD_INT 0
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: LD_INT 2
34292: NEG
34293: PUSH
34294: LD_INT 1
34296: NEG
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 2
34304: NEG
34305: PUSH
34306: LD_INT 2
34308: NEG
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34335: LD_ADDR_VAR 0 23
34339: PUSH
34340: LD_INT 0
34342: PUSH
34343: LD_INT 0
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 0
34352: PUSH
34353: LD_INT 1
34355: NEG
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 1
34363: PUSH
34364: LD_INT 0
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 1
34373: PUSH
34374: LD_INT 1
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 0
34383: PUSH
34384: LD_INT 1
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 1
34393: NEG
34394: PUSH
34395: LD_INT 0
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 1
34404: NEG
34405: PUSH
34406: LD_INT 1
34408: NEG
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 1
34416: NEG
34417: PUSH
34418: LD_INT 2
34420: NEG
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 0
34428: PUSH
34429: LD_INT 2
34431: NEG
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 1
34439: PUSH
34440: LD_INT 1
34442: NEG
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: LD_INT 2
34450: PUSH
34451: LD_INT 0
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 2
34460: PUSH
34461: LD_INT 1
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 2
34470: PUSH
34471: LD_INT 2
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 1
34480: PUSH
34481: LD_INT 2
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 0
34490: PUSH
34491: LD_INT 2
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 1
34500: NEG
34501: PUSH
34502: LD_INT 1
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 2
34511: NEG
34512: PUSH
34513: LD_INT 0
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 2
34522: NEG
34523: PUSH
34524: LD_INT 1
34526: NEG
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 2
34534: NEG
34535: PUSH
34536: LD_INT 2
34538: NEG
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 2
34546: NEG
34547: PUSH
34548: LD_INT 3
34550: NEG
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 1
34558: NEG
34559: PUSH
34560: LD_INT 3
34562: NEG
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 1
34570: PUSH
34571: LD_INT 2
34573: NEG
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 2
34581: PUSH
34582: LD_INT 1
34584: NEG
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34615: LD_ADDR_VAR 0 24
34619: PUSH
34620: LD_INT 0
34622: PUSH
34623: LD_INT 0
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 0
34632: PUSH
34633: LD_INT 1
34635: NEG
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 1
34643: PUSH
34644: LD_INT 0
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 1
34653: PUSH
34654: LD_INT 1
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 0
34663: PUSH
34664: LD_INT 1
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 1
34673: NEG
34674: PUSH
34675: LD_INT 0
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 1
34684: NEG
34685: PUSH
34686: LD_INT 1
34688: NEG
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 1
34696: NEG
34697: PUSH
34698: LD_INT 2
34700: NEG
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 0
34708: PUSH
34709: LD_INT 2
34711: NEG
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: LD_INT 1
34719: PUSH
34720: LD_INT 1
34722: NEG
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 2
34730: PUSH
34731: LD_INT 0
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 2
34740: PUSH
34741: LD_INT 1
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: LD_INT 2
34750: PUSH
34751: LD_INT 2
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 1
34760: PUSH
34761: LD_INT 2
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 0
34770: PUSH
34771: LD_INT 2
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 1
34780: NEG
34781: PUSH
34782: LD_INT 1
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 2
34791: NEG
34792: PUSH
34793: LD_INT 0
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 2
34802: NEG
34803: PUSH
34804: LD_INT 1
34806: NEG
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 2
34814: NEG
34815: PUSH
34816: LD_INT 2
34818: NEG
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 1
34826: PUSH
34827: LD_INT 2
34829: NEG
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 2
34837: PUSH
34838: LD_INT 1
34840: NEG
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 3
34848: PUSH
34849: LD_INT 1
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 3
34858: PUSH
34859: LD_INT 2
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34891: LD_ADDR_VAR 0 25
34895: PUSH
34896: LD_INT 0
34898: PUSH
34899: LD_INT 0
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 0
34908: PUSH
34909: LD_INT 1
34911: NEG
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 1
34919: PUSH
34920: LD_INT 0
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 1
34929: PUSH
34930: LD_INT 1
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 0
34939: PUSH
34940: LD_INT 1
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 1
34949: NEG
34950: PUSH
34951: LD_INT 0
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 1
34960: NEG
34961: PUSH
34962: LD_INT 1
34964: NEG
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 1
34972: NEG
34973: PUSH
34974: LD_INT 2
34976: NEG
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 0
34984: PUSH
34985: LD_INT 2
34987: NEG
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 1
34995: PUSH
34996: LD_INT 1
34998: NEG
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 2
35006: PUSH
35007: LD_INT 0
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 2
35016: PUSH
35017: LD_INT 1
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 2
35026: PUSH
35027: LD_INT 2
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 1
35036: PUSH
35037: LD_INT 2
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 0
35046: PUSH
35047: LD_INT 2
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 1
35056: NEG
35057: PUSH
35058: LD_INT 1
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: LD_INT 2
35067: NEG
35068: PUSH
35069: LD_INT 0
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PUSH
35076: LD_INT 2
35078: NEG
35079: PUSH
35080: LD_INT 1
35082: NEG
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 2
35090: NEG
35091: PUSH
35092: LD_INT 2
35094: NEG
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 3
35102: PUSH
35103: LD_INT 1
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 3
35112: PUSH
35113: LD_INT 2
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 2
35122: PUSH
35123: LD_INT 3
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 1
35132: PUSH
35133: LD_INT 3
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35165: LD_ADDR_VAR 0 26
35169: PUSH
35170: LD_INT 0
35172: PUSH
35173: LD_INT 0
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 0
35182: PUSH
35183: LD_INT 1
35185: NEG
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 1
35193: PUSH
35194: LD_INT 0
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 1
35203: PUSH
35204: LD_INT 1
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 0
35213: PUSH
35214: LD_INT 1
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 1
35223: NEG
35224: PUSH
35225: LD_INT 0
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 1
35234: NEG
35235: PUSH
35236: LD_INT 1
35238: NEG
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 1
35246: NEG
35247: PUSH
35248: LD_INT 2
35250: NEG
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 0
35258: PUSH
35259: LD_INT 2
35261: NEG
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: LD_INT 1
35269: PUSH
35270: LD_INT 1
35272: NEG
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 2
35280: PUSH
35281: LD_INT 0
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 2
35290: PUSH
35291: LD_INT 1
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 2
35300: PUSH
35301: LD_INT 2
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 1
35310: PUSH
35311: LD_INT 2
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 0
35320: PUSH
35321: LD_INT 2
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 1
35330: NEG
35331: PUSH
35332: LD_INT 1
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 2
35341: NEG
35342: PUSH
35343: LD_INT 0
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 2
35352: NEG
35353: PUSH
35354: LD_INT 1
35356: NEG
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 2
35364: NEG
35365: PUSH
35366: LD_INT 2
35368: NEG
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 2
35376: PUSH
35377: LD_INT 3
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 1
35386: PUSH
35387: LD_INT 3
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 1
35396: NEG
35397: PUSH
35398: LD_INT 2
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 2
35407: NEG
35408: PUSH
35409: LD_INT 1
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35441: LD_ADDR_VAR 0 27
35445: PUSH
35446: LD_INT 0
35448: PUSH
35449: LD_INT 0
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 0
35458: PUSH
35459: LD_INT 1
35461: NEG
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 1
35469: PUSH
35470: LD_INT 0
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 1
35479: PUSH
35480: LD_INT 1
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 0
35489: PUSH
35490: LD_INT 1
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 1
35499: NEG
35500: PUSH
35501: LD_INT 0
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 1
35510: NEG
35511: PUSH
35512: LD_INT 1
35514: NEG
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 1
35522: NEG
35523: PUSH
35524: LD_INT 2
35526: NEG
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 0
35534: PUSH
35535: LD_INT 2
35537: NEG
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 1
35545: PUSH
35546: LD_INT 1
35548: NEG
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: LD_INT 2
35556: PUSH
35557: LD_INT 0
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 2
35566: PUSH
35567: LD_INT 1
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 2
35576: PUSH
35577: LD_INT 2
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 1
35586: PUSH
35587: LD_INT 2
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 0
35596: PUSH
35597: LD_INT 2
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: LD_INT 1
35606: NEG
35607: PUSH
35608: LD_INT 1
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: LD_INT 2
35617: NEG
35618: PUSH
35619: LD_INT 0
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 2
35628: NEG
35629: PUSH
35630: LD_INT 1
35632: NEG
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: LD_INT 2
35640: NEG
35641: PUSH
35642: LD_INT 2
35644: NEG
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 1
35652: NEG
35653: PUSH
35654: LD_INT 2
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 2
35663: NEG
35664: PUSH
35665: LD_INT 1
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 3
35674: NEG
35675: PUSH
35676: LD_INT 1
35678: NEG
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 3
35686: NEG
35687: PUSH
35688: LD_INT 2
35690: NEG
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35721: LD_ADDR_VAR 0 28
35725: PUSH
35726: LD_INT 0
35728: PUSH
35729: LD_INT 0
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_INT 0
35738: PUSH
35739: LD_INT 1
35741: NEG
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 1
35749: PUSH
35750: LD_INT 0
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 1
35759: PUSH
35760: LD_INT 1
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 0
35769: PUSH
35770: LD_INT 1
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 1
35779: NEG
35780: PUSH
35781: LD_INT 0
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 1
35790: NEG
35791: PUSH
35792: LD_INT 1
35794: NEG
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 1
35802: NEG
35803: PUSH
35804: LD_INT 2
35806: NEG
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 0
35814: PUSH
35815: LD_INT 2
35817: NEG
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 1
35825: PUSH
35826: LD_INT 1
35828: NEG
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: LD_INT 2
35836: PUSH
35837: LD_INT 0
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 2
35846: PUSH
35847: LD_INT 1
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PUSH
35854: LD_INT 2
35856: PUSH
35857: LD_INT 2
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 1
35866: PUSH
35867: LD_INT 2
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 0
35876: PUSH
35877: LD_INT 2
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 1
35886: NEG
35887: PUSH
35888: LD_INT 1
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 2
35897: NEG
35898: PUSH
35899: LD_INT 0
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 2
35908: NEG
35909: PUSH
35910: LD_INT 1
35912: NEG
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 2
35920: NEG
35921: PUSH
35922: LD_INT 2
35924: NEG
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 2
35932: NEG
35933: PUSH
35934: LD_INT 3
35936: NEG
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: PUSH
35942: LD_INT 1
35944: NEG
35945: PUSH
35946: LD_INT 3
35948: NEG
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: PUSH
35954: LD_INT 3
35956: NEG
35957: PUSH
35958: LD_INT 1
35960: NEG
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 3
35968: NEG
35969: PUSH
35970: LD_INT 2
35972: NEG
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36003: LD_ADDR_VAR 0 29
36007: PUSH
36008: LD_INT 0
36010: PUSH
36011: LD_INT 0
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 0
36020: PUSH
36021: LD_INT 1
36023: NEG
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: LD_INT 1
36031: PUSH
36032: LD_INT 0
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 1
36041: PUSH
36042: LD_INT 1
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 0
36051: PUSH
36052: LD_INT 1
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 1
36061: NEG
36062: PUSH
36063: LD_INT 0
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: LD_INT 1
36072: NEG
36073: PUSH
36074: LD_INT 1
36076: NEG
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 1
36084: NEG
36085: PUSH
36086: LD_INT 2
36088: NEG
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 0
36096: PUSH
36097: LD_INT 2
36099: NEG
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 1
36107: PUSH
36108: LD_INT 1
36110: NEG
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 2
36118: PUSH
36119: LD_INT 0
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 2
36128: PUSH
36129: LD_INT 1
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: PUSH
36136: LD_INT 1
36138: PUSH
36139: LD_INT 2
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 0
36148: PUSH
36149: LD_INT 2
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 1
36158: NEG
36159: PUSH
36160: LD_INT 1
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: LD_INT 2
36169: NEG
36170: PUSH
36171: LD_INT 1
36173: NEG
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 2
36181: NEG
36182: PUSH
36183: LD_INT 2
36185: NEG
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 2
36193: NEG
36194: PUSH
36195: LD_INT 3
36197: NEG
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 2
36205: PUSH
36206: LD_INT 1
36208: NEG
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 3
36216: PUSH
36217: LD_INT 1
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 1
36226: PUSH
36227: LD_INT 3
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: LD_INT 1
36236: NEG
36237: PUSH
36238: LD_INT 2
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 3
36247: NEG
36248: PUSH
36249: LD_INT 2
36251: NEG
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36282: LD_ADDR_VAR 0 30
36286: PUSH
36287: LD_INT 0
36289: PUSH
36290: LD_INT 0
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 0
36299: PUSH
36300: LD_INT 1
36302: NEG
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 1
36310: PUSH
36311: LD_INT 0
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: LD_INT 1
36320: PUSH
36321: LD_INT 1
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: LD_INT 0
36330: PUSH
36331: LD_INT 1
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 1
36340: NEG
36341: PUSH
36342: LD_INT 0
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 1
36351: NEG
36352: PUSH
36353: LD_INT 1
36355: NEG
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: LD_INT 1
36363: NEG
36364: PUSH
36365: LD_INT 2
36367: NEG
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 0
36375: PUSH
36376: LD_INT 2
36378: NEG
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 1
36386: PUSH
36387: LD_INT 1
36389: NEG
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 2
36397: PUSH
36398: LD_INT 0
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: LD_INT 2
36407: PUSH
36408: LD_INT 1
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: PUSH
36415: LD_INT 2
36417: PUSH
36418: LD_INT 2
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_INT 1
36427: PUSH
36428: LD_INT 2
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 1
36437: NEG
36438: PUSH
36439: LD_INT 1
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 2
36448: NEG
36449: PUSH
36450: LD_INT 0
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 2
36459: NEG
36460: PUSH
36461: LD_INT 1
36463: NEG
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 1
36471: NEG
36472: PUSH
36473: LD_INT 3
36475: NEG
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 1
36483: PUSH
36484: LD_INT 2
36486: NEG
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 3
36494: PUSH
36495: LD_INT 2
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: LD_INT 2
36504: PUSH
36505: LD_INT 3
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_INT 2
36514: NEG
36515: PUSH
36516: LD_INT 1
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 3
36525: NEG
36526: PUSH
36527: LD_INT 1
36529: NEG
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36560: LD_ADDR_VAR 0 31
36564: PUSH
36565: LD_INT 0
36567: PUSH
36568: LD_INT 0
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: LD_INT 0
36577: PUSH
36578: LD_INT 1
36580: NEG
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 1
36588: PUSH
36589: LD_INT 0
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 1
36598: PUSH
36599: LD_INT 1
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 0
36608: PUSH
36609: LD_INT 1
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 1
36618: NEG
36619: PUSH
36620: LD_INT 0
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 1
36629: NEG
36630: PUSH
36631: LD_INT 1
36633: NEG
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 1
36641: NEG
36642: PUSH
36643: LD_INT 2
36645: NEG
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 1
36653: PUSH
36654: LD_INT 1
36656: NEG
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 2
36664: PUSH
36665: LD_INT 0
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 2
36674: PUSH
36675: LD_INT 1
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 2
36684: PUSH
36685: LD_INT 2
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 1
36694: PUSH
36695: LD_INT 2
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 0
36704: PUSH
36705: LD_INT 2
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 1
36714: NEG
36715: PUSH
36716: LD_INT 1
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 2
36725: NEG
36726: PUSH
36727: LD_INT 1
36729: NEG
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 2
36737: NEG
36738: PUSH
36739: LD_INT 2
36741: NEG
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 2
36749: NEG
36750: PUSH
36751: LD_INT 3
36753: NEG
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 2
36761: PUSH
36762: LD_INT 1
36764: NEG
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 3
36772: PUSH
36773: LD_INT 1
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 1
36782: PUSH
36783: LD_INT 3
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 1
36792: NEG
36793: PUSH
36794: LD_INT 2
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: LD_INT 3
36803: NEG
36804: PUSH
36805: LD_INT 2
36807: NEG
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36838: LD_ADDR_VAR 0 32
36842: PUSH
36843: LD_INT 0
36845: PUSH
36846: LD_INT 0
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 0
36855: PUSH
36856: LD_INT 1
36858: NEG
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 1
36866: PUSH
36867: LD_INT 0
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: LD_INT 1
36876: PUSH
36877: LD_INT 1
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 0
36886: PUSH
36887: LD_INT 1
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 1
36896: NEG
36897: PUSH
36898: LD_INT 0
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 1
36907: NEG
36908: PUSH
36909: LD_INT 1
36911: NEG
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 1
36919: NEG
36920: PUSH
36921: LD_INT 2
36923: NEG
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 0
36931: PUSH
36932: LD_INT 2
36934: NEG
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 1
36942: PUSH
36943: LD_INT 1
36945: NEG
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 2
36953: PUSH
36954: LD_INT 1
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 2
36963: PUSH
36964: LD_INT 2
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 1
36973: PUSH
36974: LD_INT 2
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 0
36983: PUSH
36984: LD_INT 2
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 1
36993: NEG
36994: PUSH
36995: LD_INT 1
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 2
37004: NEG
37005: PUSH
37006: LD_INT 0
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 2
37015: NEG
37016: PUSH
37017: LD_INT 1
37019: NEG
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 1
37027: NEG
37028: PUSH
37029: LD_INT 3
37031: NEG
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: PUSH
37037: LD_INT 1
37039: PUSH
37040: LD_INT 2
37042: NEG
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 3
37050: PUSH
37051: LD_INT 2
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: PUSH
37058: LD_INT 2
37060: PUSH
37061: LD_INT 3
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: PUSH
37068: LD_INT 2
37070: NEG
37071: PUSH
37072: LD_INT 1
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 3
37081: NEG
37082: PUSH
37083: LD_INT 1
37085: NEG
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37116: LD_ADDR_VAR 0 33
37120: PUSH
37121: LD_INT 0
37123: PUSH
37124: LD_INT 0
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 0
37133: PUSH
37134: LD_INT 1
37136: NEG
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 1
37144: PUSH
37145: LD_INT 0
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 1
37154: PUSH
37155: LD_INT 1
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 0
37164: PUSH
37165: LD_INT 1
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 1
37174: NEG
37175: PUSH
37176: LD_INT 0
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 1
37185: NEG
37186: PUSH
37187: LD_INT 1
37189: NEG
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 1
37197: NEG
37198: PUSH
37199: LD_INT 2
37201: NEG
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 1
37209: PUSH
37210: LD_INT 1
37212: NEG
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 2
37220: PUSH
37221: LD_INT 0
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 2
37230: PUSH
37231: LD_INT 1
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 1
37240: PUSH
37241: LD_INT 2
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 0
37250: PUSH
37251: LD_INT 2
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 1
37260: NEG
37261: PUSH
37262: LD_INT 1
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 2
37271: NEG
37272: PUSH
37273: LD_INT 0
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 2
37282: NEG
37283: PUSH
37284: LD_INT 1
37286: NEG
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 2
37294: NEG
37295: PUSH
37296: LD_INT 2
37298: NEG
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 2
37306: NEG
37307: PUSH
37308: LD_INT 3
37310: NEG
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 2
37318: PUSH
37319: LD_INT 1
37321: NEG
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 3
37329: PUSH
37330: LD_INT 1
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 1
37339: PUSH
37340: LD_INT 3
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 1
37349: NEG
37350: PUSH
37351: LD_INT 2
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 3
37360: NEG
37361: PUSH
37362: LD_INT 2
37364: NEG
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37395: LD_ADDR_VAR 0 34
37399: PUSH
37400: LD_INT 0
37402: PUSH
37403: LD_INT 0
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 0
37412: PUSH
37413: LD_INT 1
37415: NEG
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 1
37423: PUSH
37424: LD_INT 0
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 1
37433: PUSH
37434: LD_INT 1
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 0
37443: PUSH
37444: LD_INT 1
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 1
37453: NEG
37454: PUSH
37455: LD_INT 0
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 1
37464: NEG
37465: PUSH
37466: LD_INT 1
37468: NEG
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 1
37476: NEG
37477: PUSH
37478: LD_INT 2
37480: NEG
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 0
37488: PUSH
37489: LD_INT 2
37491: NEG
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 1
37499: PUSH
37500: LD_INT 1
37502: NEG
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 2
37510: PUSH
37511: LD_INT 1
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 2
37520: PUSH
37521: LD_INT 2
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 1
37530: PUSH
37531: LD_INT 2
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 1
37540: NEG
37541: PUSH
37542: LD_INT 1
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 2
37551: NEG
37552: PUSH
37553: LD_INT 0
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 2
37562: NEG
37563: PUSH
37564: LD_INT 1
37566: NEG
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 2
37574: NEG
37575: PUSH
37576: LD_INT 2
37578: NEG
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 1
37586: NEG
37587: PUSH
37588: LD_INT 3
37590: NEG
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: LD_INT 1
37598: PUSH
37599: LD_INT 2
37601: NEG
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 3
37609: PUSH
37610: LD_INT 2
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 2
37619: PUSH
37620: LD_INT 3
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 2
37629: NEG
37630: PUSH
37631: LD_INT 1
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 3
37640: NEG
37641: PUSH
37642: LD_INT 1
37644: NEG
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37675: LD_ADDR_VAR 0 35
37679: PUSH
37680: LD_INT 0
37682: PUSH
37683: LD_INT 0
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 0
37692: PUSH
37693: LD_INT 1
37695: NEG
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 1
37703: PUSH
37704: LD_INT 0
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 1
37713: PUSH
37714: LD_INT 1
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 0
37723: PUSH
37724: LD_INT 1
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 1
37733: NEG
37734: PUSH
37735: LD_INT 0
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 1
37744: NEG
37745: PUSH
37746: LD_INT 1
37748: NEG
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 2
37756: PUSH
37757: LD_INT 1
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 2
37766: NEG
37767: PUSH
37768: LD_INT 1
37770: NEG
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37787: LD_ADDR_VAR 0 36
37791: PUSH
37792: LD_INT 0
37794: PUSH
37795: LD_INT 0
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 0
37804: PUSH
37805: LD_INT 1
37807: NEG
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 1
37815: PUSH
37816: LD_INT 0
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 1
37825: PUSH
37826: LD_INT 1
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 0
37835: PUSH
37836: LD_INT 1
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 1
37845: NEG
37846: PUSH
37847: LD_INT 0
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 1
37856: NEG
37857: PUSH
37858: LD_INT 1
37860: NEG
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 1
37868: NEG
37869: PUSH
37870: LD_INT 2
37872: NEG
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 1
37880: PUSH
37881: LD_INT 2
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37899: LD_ADDR_VAR 0 37
37903: PUSH
37904: LD_INT 0
37906: PUSH
37907: LD_INT 0
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 0
37916: PUSH
37917: LD_INT 1
37919: NEG
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: LD_INT 1
37927: PUSH
37928: LD_INT 0
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PUSH
37935: LD_INT 1
37937: PUSH
37938: LD_INT 1
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 0
37947: PUSH
37948: LD_INT 1
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 1
37957: NEG
37958: PUSH
37959: LD_INT 0
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: LD_INT 1
37968: NEG
37969: PUSH
37970: LD_INT 1
37972: NEG
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 1
37980: PUSH
37981: LD_INT 1
37983: NEG
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 1
37991: NEG
37992: PUSH
37993: LD_INT 1
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38011: LD_ADDR_VAR 0 38
38015: PUSH
38016: LD_INT 0
38018: PUSH
38019: LD_INT 0
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 0
38028: PUSH
38029: LD_INT 1
38031: NEG
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 1
38039: PUSH
38040: LD_INT 0
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 1
38049: PUSH
38050: LD_INT 1
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: PUSH
38057: LD_INT 0
38059: PUSH
38060: LD_INT 1
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 1
38069: NEG
38070: PUSH
38071: LD_INT 0
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: LD_INT 1
38080: NEG
38081: PUSH
38082: LD_INT 1
38084: NEG
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 2
38092: PUSH
38093: LD_INT 1
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 2
38102: NEG
38103: PUSH
38104: LD_INT 1
38106: NEG
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38123: LD_ADDR_VAR 0 39
38127: PUSH
38128: LD_INT 0
38130: PUSH
38131: LD_INT 0
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 0
38140: PUSH
38141: LD_INT 1
38143: NEG
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 1
38151: PUSH
38152: LD_INT 0
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 1
38161: PUSH
38162: LD_INT 1
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 0
38171: PUSH
38172: LD_INT 1
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 1
38181: NEG
38182: PUSH
38183: LD_INT 0
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 1
38192: NEG
38193: PUSH
38194: LD_INT 1
38196: NEG
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 1
38204: NEG
38205: PUSH
38206: LD_INT 2
38208: NEG
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 1
38216: PUSH
38217: LD_INT 2
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38235: LD_ADDR_VAR 0 40
38239: PUSH
38240: LD_INT 0
38242: PUSH
38243: LD_INT 0
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 0
38252: PUSH
38253: LD_INT 1
38255: NEG
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 1
38263: PUSH
38264: LD_INT 0
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 1
38273: PUSH
38274: LD_INT 1
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 0
38283: PUSH
38284: LD_INT 1
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 1
38293: NEG
38294: PUSH
38295: LD_INT 0
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 1
38304: NEG
38305: PUSH
38306: LD_INT 1
38308: NEG
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 1
38316: PUSH
38317: LD_INT 1
38319: NEG
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 1
38327: NEG
38328: PUSH
38329: LD_INT 1
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: LIST
38345: LIST
38346: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38347: LD_ADDR_VAR 0 41
38351: PUSH
38352: LD_INT 0
38354: PUSH
38355: LD_INT 0
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 0
38364: PUSH
38365: LD_INT 1
38367: NEG
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 1
38375: PUSH
38376: LD_INT 0
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 1
38385: PUSH
38386: LD_INT 1
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 0
38395: PUSH
38396: LD_INT 1
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 1
38405: NEG
38406: PUSH
38407: LD_INT 0
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 1
38416: NEG
38417: PUSH
38418: LD_INT 1
38420: NEG
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 1
38428: NEG
38429: PUSH
38430: LD_INT 2
38432: NEG
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 1
38440: PUSH
38441: LD_INT 1
38443: NEG
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 2
38451: PUSH
38452: LD_INT 0
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 2
38461: PUSH
38462: LD_INT 1
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 2
38471: PUSH
38472: LD_INT 2
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 1
38481: PUSH
38482: LD_INT 2
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 1
38491: NEG
38492: PUSH
38493: LD_INT 1
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 2
38502: NEG
38503: PUSH
38504: LD_INT 0
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 2
38513: NEG
38514: PUSH
38515: LD_INT 1
38517: NEG
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 2
38525: NEG
38526: PUSH
38527: LD_INT 2
38529: NEG
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 2
38537: NEG
38538: PUSH
38539: LD_INT 3
38541: NEG
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 2
38549: PUSH
38550: LD_INT 1
38552: NEG
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 3
38560: PUSH
38561: LD_INT 0
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: LD_INT 3
38570: PUSH
38571: LD_INT 1
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 3
38580: PUSH
38581: LD_INT 2
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: PUSH
38588: LD_INT 3
38590: PUSH
38591: LD_INT 3
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 2
38600: PUSH
38601: LD_INT 3
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 2
38610: NEG
38611: PUSH
38612: LD_INT 1
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 3
38621: NEG
38622: PUSH
38623: LD_INT 0
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 3
38632: NEG
38633: PUSH
38634: LD_INT 1
38636: NEG
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 3
38644: NEG
38645: PUSH
38646: LD_INT 2
38648: NEG
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 3
38656: NEG
38657: PUSH
38658: LD_INT 3
38660: NEG
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38697: LD_ADDR_VAR 0 42
38701: PUSH
38702: LD_INT 0
38704: PUSH
38705: LD_INT 0
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 0
38714: PUSH
38715: LD_INT 1
38717: NEG
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: LD_INT 1
38725: PUSH
38726: LD_INT 0
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 1
38735: PUSH
38736: LD_INT 1
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 0
38745: PUSH
38746: LD_INT 1
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 1
38755: NEG
38756: PUSH
38757: LD_INT 0
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 1
38766: NEG
38767: PUSH
38768: LD_INT 1
38770: NEG
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 1
38778: NEG
38779: PUSH
38780: LD_INT 2
38782: NEG
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 0
38790: PUSH
38791: LD_INT 2
38793: NEG
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 1
38801: PUSH
38802: LD_INT 1
38804: NEG
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 2
38812: PUSH
38813: LD_INT 1
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 2
38822: PUSH
38823: LD_INT 2
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 1
38832: PUSH
38833: LD_INT 2
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 0
38842: PUSH
38843: LD_INT 2
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 1
38852: NEG
38853: PUSH
38854: LD_INT 1
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 2
38863: NEG
38864: PUSH
38865: LD_INT 1
38867: NEG
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 2
38875: NEG
38876: PUSH
38877: LD_INT 2
38879: NEG
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 2
38887: NEG
38888: PUSH
38889: LD_INT 3
38891: NEG
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 1
38899: NEG
38900: PUSH
38901: LD_INT 3
38903: NEG
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 0
38911: PUSH
38912: LD_INT 3
38914: NEG
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 1
38922: PUSH
38923: LD_INT 2
38925: NEG
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 3
38933: PUSH
38934: LD_INT 2
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 3
38943: PUSH
38944: LD_INT 3
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 2
38953: PUSH
38954: LD_INT 3
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 1
38963: PUSH
38964: LD_INT 3
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 0
38973: PUSH
38974: LD_INT 3
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 1
38983: NEG
38984: PUSH
38985: LD_INT 2
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 3
38994: NEG
38995: PUSH
38996: LD_INT 2
38998: NEG
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 3
39006: NEG
39007: PUSH
39008: LD_INT 3
39010: NEG
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39047: LD_ADDR_VAR 0 43
39051: PUSH
39052: LD_INT 0
39054: PUSH
39055: LD_INT 0
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 0
39064: PUSH
39065: LD_INT 1
39067: NEG
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: LD_INT 1
39075: PUSH
39076: LD_INT 0
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 1
39085: PUSH
39086: LD_INT 1
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 0
39095: PUSH
39096: LD_INT 1
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 1
39105: NEG
39106: PUSH
39107: LD_INT 0
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 1
39116: NEG
39117: PUSH
39118: LD_INT 1
39120: NEG
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 1
39128: NEG
39129: PUSH
39130: LD_INT 2
39132: NEG
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 0
39140: PUSH
39141: LD_INT 2
39143: NEG
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 1
39151: PUSH
39152: LD_INT 1
39154: NEG
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 2
39162: PUSH
39163: LD_INT 0
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 2
39172: PUSH
39173: LD_INT 1
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 1
39182: PUSH
39183: LD_INT 2
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 0
39192: PUSH
39193: LD_INT 2
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 1
39202: NEG
39203: PUSH
39204: LD_INT 1
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 2
39213: NEG
39214: PUSH
39215: LD_INT 0
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 2
39224: NEG
39225: PUSH
39226: LD_INT 1
39228: NEG
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 1
39236: NEG
39237: PUSH
39238: LD_INT 3
39240: NEG
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 0
39248: PUSH
39249: LD_INT 3
39251: NEG
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 1
39259: PUSH
39260: LD_INT 2
39262: NEG
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 2
39270: PUSH
39271: LD_INT 1
39273: NEG
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 3
39281: PUSH
39282: LD_INT 0
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 3
39291: PUSH
39292: LD_INT 1
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 1
39301: PUSH
39302: LD_INT 3
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 0
39311: PUSH
39312: LD_INT 3
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 1
39321: NEG
39322: PUSH
39323: LD_INT 2
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 2
39332: NEG
39333: PUSH
39334: LD_INT 1
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 3
39343: NEG
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 3
39354: NEG
39355: PUSH
39356: LD_INT 1
39358: NEG
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39395: LD_ADDR_VAR 0 44
39399: PUSH
39400: LD_INT 0
39402: PUSH
39403: LD_INT 0
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 0
39412: PUSH
39413: LD_INT 1
39415: NEG
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 1
39423: PUSH
39424: LD_INT 0
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 1
39433: PUSH
39434: LD_INT 1
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 0
39443: PUSH
39444: LD_INT 1
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 1
39453: NEG
39454: PUSH
39455: LD_INT 0
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 1
39464: NEG
39465: PUSH
39466: LD_INT 1
39468: NEG
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 1
39476: NEG
39477: PUSH
39478: LD_INT 2
39480: NEG
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 1
39488: PUSH
39489: LD_INT 1
39491: NEG
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 2
39499: PUSH
39500: LD_INT 0
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 2
39509: PUSH
39510: LD_INT 1
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 2
39519: PUSH
39520: LD_INT 2
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 1
39529: PUSH
39530: LD_INT 2
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 1
39539: NEG
39540: PUSH
39541: LD_INT 1
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 2
39550: NEG
39551: PUSH
39552: LD_INT 0
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 2
39561: NEG
39562: PUSH
39563: LD_INT 1
39565: NEG
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 2
39573: NEG
39574: PUSH
39575: LD_INT 2
39577: NEG
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 2
39585: NEG
39586: PUSH
39587: LD_INT 3
39589: NEG
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 2
39597: PUSH
39598: LD_INT 1
39600: NEG
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 3
39608: PUSH
39609: LD_INT 0
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 3
39618: PUSH
39619: LD_INT 1
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 3
39628: PUSH
39629: LD_INT 2
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 3
39638: PUSH
39639: LD_INT 3
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 2
39648: PUSH
39649: LD_INT 3
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 2
39658: NEG
39659: PUSH
39660: LD_INT 1
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 3
39669: NEG
39670: PUSH
39671: LD_INT 0
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 3
39680: NEG
39681: PUSH
39682: LD_INT 1
39684: NEG
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 3
39692: NEG
39693: PUSH
39694: LD_INT 2
39696: NEG
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 3
39704: NEG
39705: PUSH
39706: LD_INT 3
39708: NEG
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39745: LD_ADDR_VAR 0 45
39749: PUSH
39750: LD_INT 0
39752: PUSH
39753: LD_INT 0
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 0
39762: PUSH
39763: LD_INT 1
39765: NEG
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 1
39773: PUSH
39774: LD_INT 0
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 1
39783: PUSH
39784: LD_INT 1
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 0
39793: PUSH
39794: LD_INT 1
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 1
39803: NEG
39804: PUSH
39805: LD_INT 0
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 1
39814: NEG
39815: PUSH
39816: LD_INT 1
39818: NEG
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 1
39826: NEG
39827: PUSH
39828: LD_INT 2
39830: NEG
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 0
39838: PUSH
39839: LD_INT 2
39841: NEG
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 1
39849: PUSH
39850: LD_INT 1
39852: NEG
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 2
39860: PUSH
39861: LD_INT 1
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 2
39870: PUSH
39871: LD_INT 2
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 1
39880: PUSH
39881: LD_INT 2
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 0
39890: PUSH
39891: LD_INT 2
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 1
39900: NEG
39901: PUSH
39902: LD_INT 1
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 2
39911: NEG
39912: PUSH
39913: LD_INT 1
39915: NEG
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 2
39923: NEG
39924: PUSH
39925: LD_INT 2
39927: NEG
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 2
39935: NEG
39936: PUSH
39937: LD_INT 3
39939: NEG
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 1
39947: NEG
39948: PUSH
39949: LD_INT 3
39951: NEG
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 0
39959: PUSH
39960: LD_INT 3
39962: NEG
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 1
39970: PUSH
39971: LD_INT 2
39973: NEG
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 3
39981: PUSH
39982: LD_INT 2
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 3
39991: PUSH
39992: LD_INT 3
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 2
40001: PUSH
40002: LD_INT 3
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 1
40011: PUSH
40012: LD_INT 3
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 0
40021: PUSH
40022: LD_INT 3
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 1
40031: NEG
40032: PUSH
40033: LD_INT 2
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 3
40042: NEG
40043: PUSH
40044: LD_INT 2
40046: NEG
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 3
40054: NEG
40055: PUSH
40056: LD_INT 3
40058: NEG
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40095: LD_ADDR_VAR 0 46
40099: PUSH
40100: LD_INT 0
40102: PUSH
40103: LD_INT 0
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: LD_INT 1
40115: NEG
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 1
40123: PUSH
40124: LD_INT 0
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 1
40133: PUSH
40134: LD_INT 1
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 0
40143: PUSH
40144: LD_INT 1
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 1
40153: NEG
40154: PUSH
40155: LD_INT 0
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 1
40164: NEG
40165: PUSH
40166: LD_INT 1
40168: NEG
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 1
40176: NEG
40177: PUSH
40178: LD_INT 2
40180: NEG
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 0
40188: PUSH
40189: LD_INT 2
40191: NEG
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 1
40199: PUSH
40200: LD_INT 1
40202: NEG
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 2
40210: PUSH
40211: LD_INT 0
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 2
40220: PUSH
40221: LD_INT 1
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 1
40230: PUSH
40231: LD_INT 2
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 0
40240: PUSH
40241: LD_INT 2
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 1
40250: NEG
40251: PUSH
40252: LD_INT 1
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 2
40261: NEG
40262: PUSH
40263: LD_INT 0
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 2
40272: NEG
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 1
40284: NEG
40285: PUSH
40286: LD_INT 3
40288: NEG
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 0
40296: PUSH
40297: LD_INT 3
40299: NEG
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 1
40307: PUSH
40308: LD_INT 2
40310: NEG
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 2
40318: PUSH
40319: LD_INT 1
40321: NEG
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 3
40329: PUSH
40330: LD_INT 0
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 3
40339: PUSH
40340: LD_INT 1
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 1
40349: PUSH
40350: LD_INT 3
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 0
40359: PUSH
40360: LD_INT 3
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 1
40369: NEG
40370: PUSH
40371: LD_INT 2
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 2
40380: NEG
40381: PUSH
40382: LD_INT 1
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 3
40391: NEG
40392: PUSH
40393: LD_INT 0
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 3
40402: NEG
40403: PUSH
40404: LD_INT 1
40406: NEG
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40443: LD_ADDR_VAR 0 47
40447: PUSH
40448: LD_INT 0
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 0
40460: PUSH
40461: LD_INT 1
40463: NEG
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 1
40471: PUSH
40472: LD_INT 0
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 1
40481: PUSH
40482: LD_INT 1
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 0
40491: PUSH
40492: LD_INT 1
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 1
40501: NEG
40502: PUSH
40503: LD_INT 0
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 1
40512: NEG
40513: PUSH
40514: LD_INT 1
40516: NEG
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 1
40524: NEG
40525: PUSH
40526: LD_INT 2
40528: NEG
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: LD_INT 2
40539: NEG
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 1
40547: PUSH
40548: LD_INT 1
40550: NEG
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 2
40558: NEG
40559: PUSH
40560: LD_INT 1
40562: NEG
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 2
40570: NEG
40571: PUSH
40572: LD_INT 2
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40594: LD_ADDR_VAR 0 48
40598: PUSH
40599: LD_INT 0
40601: PUSH
40602: LD_INT 0
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: LD_INT 1
40614: NEG
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 1
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 1
40632: PUSH
40633: LD_INT 1
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 0
40642: PUSH
40643: LD_INT 1
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 1
40652: NEG
40653: PUSH
40654: LD_INT 0
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 1
40663: NEG
40664: PUSH
40665: LD_INT 1
40667: NEG
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 1
40675: NEG
40676: PUSH
40677: LD_INT 2
40679: NEG
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 0
40687: PUSH
40688: LD_INT 2
40690: NEG
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 1
40698: PUSH
40699: LD_INT 1
40701: NEG
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 2
40709: PUSH
40710: LD_INT 0
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 2
40719: PUSH
40720: LD_INT 1
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40741: LD_ADDR_VAR 0 49
40745: PUSH
40746: LD_INT 0
40748: PUSH
40749: LD_INT 0
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 0
40758: PUSH
40759: LD_INT 1
40761: NEG
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 1
40769: PUSH
40770: LD_INT 0
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 1
40779: PUSH
40780: LD_INT 1
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: LD_INT 1
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 1
40799: NEG
40800: PUSH
40801: LD_INT 0
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 1
40810: NEG
40811: PUSH
40812: LD_INT 1
40814: NEG
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 1
40822: PUSH
40823: LD_INT 1
40825: NEG
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 2
40833: PUSH
40834: LD_INT 0
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 2
40843: PUSH
40844: LD_INT 1
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 2
40853: PUSH
40854: LD_INT 2
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 1
40863: PUSH
40864: LD_INT 2
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40885: LD_ADDR_VAR 0 50
40889: PUSH
40890: LD_INT 0
40892: PUSH
40893: LD_INT 0
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 0
40902: PUSH
40903: LD_INT 1
40905: NEG
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 1
40913: PUSH
40914: LD_INT 0
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: PUSH
40924: LD_INT 1
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 0
40933: PUSH
40934: LD_INT 1
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 1
40943: NEG
40944: PUSH
40945: LD_INT 0
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 1
40954: NEG
40955: PUSH
40956: LD_INT 1
40958: NEG
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: LD_INT 2
40966: PUSH
40967: LD_INT 1
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 2
40976: PUSH
40977: LD_INT 2
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 1
40986: PUSH
40987: LD_INT 2
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: LD_INT 2
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 1
41006: NEG
41007: PUSH
41008: LD_INT 1
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41029: LD_ADDR_VAR 0 51
41033: PUSH
41034: LD_INT 0
41036: PUSH
41037: LD_INT 0
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 0
41046: PUSH
41047: LD_INT 1
41049: NEG
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 1
41057: PUSH
41058: LD_INT 0
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 1
41067: PUSH
41068: LD_INT 1
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 0
41077: PUSH
41078: LD_INT 1
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 1
41087: NEG
41088: PUSH
41089: LD_INT 0
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 1
41098: NEG
41099: PUSH
41100: LD_INT 1
41102: NEG
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 1
41110: PUSH
41111: LD_INT 2
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 0
41120: PUSH
41121: LD_INT 2
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 1
41130: NEG
41131: PUSH
41132: LD_INT 1
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 2
41141: NEG
41142: PUSH
41143: LD_INT 0
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 2
41152: NEG
41153: PUSH
41154: LD_INT 1
41156: NEG
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41176: LD_ADDR_VAR 0 52
41180: PUSH
41181: LD_INT 0
41183: PUSH
41184: LD_INT 0
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 0
41193: PUSH
41194: LD_INT 1
41196: NEG
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 1
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 1
41214: PUSH
41215: LD_INT 1
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 0
41224: PUSH
41225: LD_INT 1
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 1
41234: NEG
41235: PUSH
41236: LD_INT 0
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 1
41245: NEG
41246: PUSH
41247: LD_INT 1
41249: NEG
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 1
41257: NEG
41258: PUSH
41259: LD_INT 2
41261: NEG
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 1
41269: NEG
41270: PUSH
41271: LD_INT 1
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 2
41280: NEG
41281: PUSH
41282: LD_INT 0
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 2
41291: NEG
41292: PUSH
41293: LD_INT 1
41295: NEG
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 2
41303: NEG
41304: PUSH
41305: LD_INT 2
41307: NEG
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41327: LD_ADDR_VAR 0 53
41331: PUSH
41332: LD_INT 0
41334: PUSH
41335: LD_INT 0
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 0
41344: PUSH
41345: LD_INT 1
41347: NEG
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 1
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 1
41365: PUSH
41366: LD_INT 1
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 0
41375: PUSH
41376: LD_INT 1
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 1
41385: NEG
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 1
41396: NEG
41397: PUSH
41398: LD_INT 1
41400: NEG
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 1
41408: NEG
41409: PUSH
41410: LD_INT 2
41412: NEG
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 0
41420: PUSH
41421: LD_INT 2
41423: NEG
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 1
41431: PUSH
41432: LD_INT 1
41434: NEG
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 2
41442: PUSH
41443: LD_INT 0
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 2
41452: PUSH
41453: LD_INT 1
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 2
41462: PUSH
41463: LD_INT 2
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 1
41472: PUSH
41473: LD_INT 2
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 0
41482: PUSH
41483: LD_INT 2
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 1
41492: NEG
41493: PUSH
41494: LD_INT 1
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 2
41503: NEG
41504: PUSH
41505: LD_INT 0
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 2
41514: NEG
41515: PUSH
41516: LD_INT 1
41518: NEG
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 2
41526: NEG
41527: PUSH
41528: LD_INT 2
41530: NEG
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41557: LD_ADDR_VAR 0 54
41561: PUSH
41562: LD_INT 0
41564: PUSH
41565: LD_INT 0
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 0
41574: PUSH
41575: LD_INT 1
41577: NEG
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 1
41585: PUSH
41586: LD_INT 0
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 1
41595: PUSH
41596: LD_INT 1
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 0
41605: PUSH
41606: LD_INT 1
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 1
41615: NEG
41616: PUSH
41617: LD_INT 0
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 1
41626: NEG
41627: PUSH
41628: LD_INT 1
41630: NEG
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 1
41638: NEG
41639: PUSH
41640: LD_INT 2
41642: NEG
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 0
41650: PUSH
41651: LD_INT 2
41653: NEG
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 1
41661: PUSH
41662: LD_INT 1
41664: NEG
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 2
41672: PUSH
41673: LD_INT 0
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 2
41682: PUSH
41683: LD_INT 1
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 2
41692: PUSH
41693: LD_INT 2
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 1
41702: PUSH
41703: LD_INT 2
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 0
41712: PUSH
41713: LD_INT 2
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 1
41722: NEG
41723: PUSH
41724: LD_INT 1
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 2
41733: NEG
41734: PUSH
41735: LD_INT 0
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 2
41744: NEG
41745: PUSH
41746: LD_INT 1
41748: NEG
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 2
41756: NEG
41757: PUSH
41758: LD_INT 2
41760: NEG
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41787: LD_ADDR_VAR 0 55
41791: PUSH
41792: LD_INT 0
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 0
41804: PUSH
41805: LD_INT 1
41807: NEG
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 1
41815: PUSH
41816: LD_INT 0
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 1
41825: PUSH
41826: LD_INT 1
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 0
41835: PUSH
41836: LD_INT 1
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 1
41845: NEG
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 1
41856: NEG
41857: PUSH
41858: LD_INT 1
41860: NEG
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 1
41868: NEG
41869: PUSH
41870: LD_INT 2
41872: NEG
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 0
41880: PUSH
41881: LD_INT 2
41883: NEG
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 1
41891: PUSH
41892: LD_INT 1
41894: NEG
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 2
41902: PUSH
41903: LD_INT 0
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 2
41912: PUSH
41913: LD_INT 1
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 2
41922: PUSH
41923: LD_INT 2
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 1
41932: PUSH
41933: LD_INT 2
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 0
41942: PUSH
41943: LD_INT 2
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 1
41952: NEG
41953: PUSH
41954: LD_INT 1
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 2
41963: NEG
41964: PUSH
41965: LD_INT 0
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 2
41974: NEG
41975: PUSH
41976: LD_INT 1
41978: NEG
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 2
41986: NEG
41987: PUSH
41988: LD_INT 2
41990: NEG
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42017: LD_ADDR_VAR 0 56
42021: PUSH
42022: LD_INT 0
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: LD_INT 1
42037: NEG
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 1
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: LD_INT 1
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 0
42065: PUSH
42066: LD_INT 1
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 1
42075: NEG
42076: PUSH
42077: LD_INT 0
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 1
42086: NEG
42087: PUSH
42088: LD_INT 1
42090: NEG
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 1
42098: NEG
42099: PUSH
42100: LD_INT 2
42102: NEG
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: LD_INT 2
42113: NEG
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 1
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 2
42132: PUSH
42133: LD_INT 0
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 2
42142: PUSH
42143: LD_INT 1
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 2
42152: PUSH
42153: LD_INT 2
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 1
42162: PUSH
42163: LD_INT 2
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: LD_INT 2
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 1
42182: NEG
42183: PUSH
42184: LD_INT 1
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 2
42193: NEG
42194: PUSH
42195: LD_INT 0
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 2
42204: NEG
42205: PUSH
42206: LD_INT 1
42208: NEG
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 2
42216: NEG
42217: PUSH
42218: LD_INT 2
42220: NEG
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42247: LD_ADDR_VAR 0 57
42251: PUSH
42252: LD_INT 0
42254: PUSH
42255: LD_INT 0
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 0
42264: PUSH
42265: LD_INT 1
42267: NEG
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 1
42275: PUSH
42276: LD_INT 0
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 1
42285: PUSH
42286: LD_INT 1
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 0
42295: PUSH
42296: LD_INT 1
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 1
42305: NEG
42306: PUSH
42307: LD_INT 0
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 1
42316: NEG
42317: PUSH
42318: LD_INT 1
42320: NEG
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 1
42328: NEG
42329: PUSH
42330: LD_INT 2
42332: NEG
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 0
42340: PUSH
42341: LD_INT 2
42343: NEG
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 1
42351: PUSH
42352: LD_INT 1
42354: NEG
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 2
42362: PUSH
42363: LD_INT 0
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 2
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 2
42382: PUSH
42383: LD_INT 2
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 1
42392: PUSH
42393: LD_INT 2
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 0
42402: PUSH
42403: LD_INT 2
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 1
42412: NEG
42413: PUSH
42414: LD_INT 1
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 2
42423: NEG
42424: PUSH
42425: LD_INT 0
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 2
42434: NEG
42435: PUSH
42436: LD_INT 1
42438: NEG
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 2
42446: NEG
42447: PUSH
42448: LD_INT 2
42450: NEG
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42477: LD_ADDR_VAR 0 58
42481: PUSH
42482: LD_INT 0
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 0
42494: PUSH
42495: LD_INT 1
42497: NEG
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 1
42505: PUSH
42506: LD_INT 0
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 1
42515: PUSH
42516: LD_INT 1
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 0
42525: PUSH
42526: LD_INT 1
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 1
42535: NEG
42536: PUSH
42537: LD_INT 0
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 1
42546: NEG
42547: PUSH
42548: LD_INT 1
42550: NEG
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 1
42558: NEG
42559: PUSH
42560: LD_INT 2
42562: NEG
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 0
42570: PUSH
42571: LD_INT 2
42573: NEG
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 1
42581: PUSH
42582: LD_INT 1
42584: NEG
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 2
42592: PUSH
42593: LD_INT 0
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 2
42602: PUSH
42603: LD_INT 1
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 2
42612: PUSH
42613: LD_INT 2
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 1
42622: PUSH
42623: LD_INT 2
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: LD_INT 2
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 1
42642: NEG
42643: PUSH
42644: LD_INT 1
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 2
42653: NEG
42654: PUSH
42655: LD_INT 0
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 2
42664: NEG
42665: PUSH
42666: LD_INT 1
42668: NEG
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 2
42676: NEG
42677: PUSH
42678: LD_INT 2
42680: NEG
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42707: LD_ADDR_VAR 0 59
42711: PUSH
42712: LD_INT 0
42714: PUSH
42715: LD_INT 0
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 0
42724: PUSH
42725: LD_INT 1
42727: NEG
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 1
42735: PUSH
42736: LD_INT 0
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 1
42745: PUSH
42746: LD_INT 1
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 0
42755: PUSH
42756: LD_INT 1
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 1
42765: NEG
42766: PUSH
42767: LD_INT 0
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 1
42776: NEG
42777: PUSH
42778: LD_INT 1
42780: NEG
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42795: LD_ADDR_VAR 0 60
42799: PUSH
42800: LD_INT 0
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 0
42812: PUSH
42813: LD_INT 1
42815: NEG
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 1
42823: PUSH
42824: LD_INT 0
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 1
42833: PUSH
42834: LD_INT 1
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 0
42843: PUSH
42844: LD_INT 1
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 1
42853: NEG
42854: PUSH
42855: LD_INT 0
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 1
42864: NEG
42865: PUSH
42866: LD_INT 1
42868: NEG
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42883: LD_ADDR_VAR 0 61
42887: PUSH
42888: LD_INT 0
42890: PUSH
42891: LD_INT 0
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: LD_INT 1
42903: NEG
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 1
42911: PUSH
42912: LD_INT 0
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 1
42921: PUSH
42922: LD_INT 1
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 0
42931: PUSH
42932: LD_INT 1
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 1
42941: NEG
42942: PUSH
42943: LD_INT 0
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 1
42952: NEG
42953: PUSH
42954: LD_INT 1
42956: NEG
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42971: LD_ADDR_VAR 0 62
42975: PUSH
42976: LD_INT 0
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: LD_INT 1
42991: NEG
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 1
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 1
43009: PUSH
43010: LD_INT 1
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 0
43019: PUSH
43020: LD_INT 1
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: LD_INT 0
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 1
43040: NEG
43041: PUSH
43042: LD_INT 1
43044: NEG
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43059: LD_ADDR_VAR 0 63
43063: PUSH
43064: LD_INT 0
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 0
43076: PUSH
43077: LD_INT 1
43079: NEG
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 1
43087: PUSH
43088: LD_INT 0
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 1
43097: PUSH
43098: LD_INT 1
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 0
43107: PUSH
43108: LD_INT 1
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 1
43117: NEG
43118: PUSH
43119: LD_INT 0
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 1
43128: NEG
43129: PUSH
43130: LD_INT 1
43132: NEG
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43147: LD_ADDR_VAR 0 64
43151: PUSH
43152: LD_INT 0
43154: PUSH
43155: LD_INT 0
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 0
43164: PUSH
43165: LD_INT 1
43167: NEG
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 1
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 1
43185: PUSH
43186: LD_INT 1
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 0
43195: PUSH
43196: LD_INT 1
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 1
43205: NEG
43206: PUSH
43207: LD_INT 0
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 1
43216: NEG
43217: PUSH
43218: LD_INT 1
43220: NEG
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: ST_TO_ADDR
// end ; 1 :
43235: GO 49132
43237: LD_INT 1
43239: DOUBLE
43240: EQUAL
43241: IFTRUE 43245
43243: GO 45868
43245: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43246: LD_ADDR_VAR 0 11
43250: PUSH
43251: LD_INT 1
43253: NEG
43254: PUSH
43255: LD_INT 3
43257: NEG
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 0
43265: PUSH
43266: LD_INT 3
43268: NEG
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 1
43276: PUSH
43277: LD_INT 2
43279: NEG
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: LIST
43289: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43290: LD_ADDR_VAR 0 12
43294: PUSH
43295: LD_INT 2
43297: PUSH
43298: LD_INT 1
43300: NEG
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 3
43308: PUSH
43309: LD_INT 0
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 3
43318: PUSH
43319: LD_INT 1
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: LIST
43330: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43331: LD_ADDR_VAR 0 13
43335: PUSH
43336: LD_INT 3
43338: PUSH
43339: LD_INT 2
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 3
43348: PUSH
43349: LD_INT 3
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 2
43358: PUSH
43359: LD_INT 3
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: LIST
43370: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43371: LD_ADDR_VAR 0 14
43375: PUSH
43376: LD_INT 1
43378: PUSH
43379: LD_INT 3
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 0
43388: PUSH
43389: LD_INT 3
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 1
43398: NEG
43399: PUSH
43400: LD_INT 2
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: LIST
43411: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43412: LD_ADDR_VAR 0 15
43416: PUSH
43417: LD_INT 2
43419: NEG
43420: PUSH
43421: LD_INT 1
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 3
43430: NEG
43431: PUSH
43432: LD_INT 0
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 3
43441: NEG
43442: PUSH
43443: LD_INT 1
43445: NEG
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: LIST
43455: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43456: LD_ADDR_VAR 0 16
43460: PUSH
43461: LD_INT 2
43463: NEG
43464: PUSH
43465: LD_INT 3
43467: NEG
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 3
43475: NEG
43476: PUSH
43477: LD_INT 2
43479: NEG
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 3
43487: NEG
43488: PUSH
43489: LD_INT 3
43491: NEG
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: LIST
43501: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43502: LD_ADDR_VAR 0 17
43506: PUSH
43507: LD_INT 1
43509: NEG
43510: PUSH
43511: LD_INT 3
43513: NEG
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 0
43521: PUSH
43522: LD_INT 3
43524: NEG
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: LD_INT 2
43535: NEG
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: LIST
43545: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43546: LD_ADDR_VAR 0 18
43550: PUSH
43551: LD_INT 2
43553: PUSH
43554: LD_INT 1
43556: NEG
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 3
43564: PUSH
43565: LD_INT 0
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 3
43574: PUSH
43575: LD_INT 1
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: LIST
43586: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43587: LD_ADDR_VAR 0 19
43591: PUSH
43592: LD_INT 3
43594: PUSH
43595: LD_INT 2
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 3
43604: PUSH
43605: LD_INT 3
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 2
43614: PUSH
43615: LD_INT 3
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: LIST
43626: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43627: LD_ADDR_VAR 0 20
43631: PUSH
43632: LD_INT 1
43634: PUSH
43635: LD_INT 3
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 0
43644: PUSH
43645: LD_INT 3
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 1
43654: NEG
43655: PUSH
43656: LD_INT 2
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: LIST
43667: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43668: LD_ADDR_VAR 0 21
43672: PUSH
43673: LD_INT 2
43675: NEG
43676: PUSH
43677: LD_INT 1
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 3
43686: NEG
43687: PUSH
43688: LD_INT 0
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 3
43697: NEG
43698: PUSH
43699: LD_INT 1
43701: NEG
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: LIST
43711: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43712: LD_ADDR_VAR 0 22
43716: PUSH
43717: LD_INT 2
43719: NEG
43720: PUSH
43721: LD_INT 3
43723: NEG
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 3
43731: NEG
43732: PUSH
43733: LD_INT 2
43735: NEG
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 3
43743: NEG
43744: PUSH
43745: LD_INT 3
43747: NEG
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: LIST
43757: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43758: LD_ADDR_VAR 0 23
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: LD_INT 3
43768: NEG
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 1
43776: NEG
43777: PUSH
43778: LD_INT 4
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: LD_INT 3
43791: NEG
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: LIST
43801: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43802: LD_ADDR_VAR 0 24
43806: PUSH
43807: LD_INT 3
43809: PUSH
43810: LD_INT 0
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 3
43819: PUSH
43820: LD_INT 1
43822: NEG
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 4
43830: PUSH
43831: LD_INT 1
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: LIST
43842: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43843: LD_ADDR_VAR 0 25
43847: PUSH
43848: LD_INT 3
43850: PUSH
43851: LD_INT 3
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 4
43860: PUSH
43861: LD_INT 3
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 3
43870: PUSH
43871: LD_INT 4
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: LIST
43882: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43883: LD_ADDR_VAR 0 26
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: LD_INT 3
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 1
43900: PUSH
43901: LD_INT 4
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 1
43910: NEG
43911: PUSH
43912: LD_INT 3
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: LIST
43923: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43924: LD_ADDR_VAR 0 27
43928: PUSH
43929: LD_INT 3
43931: NEG
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 3
43942: NEG
43943: PUSH
43944: LD_INT 1
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 4
43953: NEG
43954: PUSH
43955: LD_INT 1
43957: NEG
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: LIST
43967: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43968: LD_ADDR_VAR 0 28
43972: PUSH
43973: LD_INT 3
43975: NEG
43976: PUSH
43977: LD_INT 3
43979: NEG
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 3
43987: NEG
43988: PUSH
43989: LD_INT 4
43991: NEG
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 4
43999: NEG
44000: PUSH
44001: LD_INT 3
44003: NEG
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: LIST
44013: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
44014: LD_ADDR_VAR 0 29
44018: PUSH
44019: LD_INT 1
44021: NEG
44022: PUSH
44023: LD_INT 3
44025: NEG
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: LD_INT 3
44036: NEG
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 1
44044: PUSH
44045: LD_INT 2
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: LD_INT 4
44059: NEG
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 0
44067: PUSH
44068: LD_INT 4
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: LD_INT 3
44081: NEG
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 1
44089: NEG
44090: PUSH
44091: LD_INT 5
44093: NEG
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: LD_INT 5
44104: NEG
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 1
44112: PUSH
44113: LD_INT 4
44115: NEG
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 1
44123: NEG
44124: PUSH
44125: LD_INT 6
44127: NEG
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: LD_INT 6
44138: NEG
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 1
44146: PUSH
44147: LD_INT 5
44149: NEG
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
44169: LD_ADDR_VAR 0 30
44173: PUSH
44174: LD_INT 2
44176: PUSH
44177: LD_INT 1
44179: NEG
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 3
44187: PUSH
44188: LD_INT 0
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 3
44197: PUSH
44198: LD_INT 1
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 3
44207: PUSH
44208: LD_INT 1
44210: NEG
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 4
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 4
44228: PUSH
44229: LD_INT 1
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 4
44238: PUSH
44239: LD_INT 1
44241: NEG
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 5
44249: PUSH
44250: LD_INT 0
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 5
44259: PUSH
44260: LD_INT 1
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 5
44269: PUSH
44270: LD_INT 1
44272: NEG
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 6
44280: PUSH
44281: LD_INT 0
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 6
44290: PUSH
44291: LD_INT 1
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
44312: LD_ADDR_VAR 0 31
44316: PUSH
44317: LD_INT 3
44319: PUSH
44320: LD_INT 2
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 3
44329: PUSH
44330: LD_INT 3
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 2
44339: PUSH
44340: LD_INT 3
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 4
44349: PUSH
44350: LD_INT 3
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 4
44359: PUSH
44360: LD_INT 4
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 3
44369: PUSH
44370: LD_INT 4
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 5
44379: PUSH
44380: LD_INT 4
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 5
44389: PUSH
44390: LD_INT 5
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 4
44399: PUSH
44400: LD_INT 5
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 6
44409: PUSH
44410: LD_INT 5
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 6
44419: PUSH
44420: LD_INT 6
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 5
44429: PUSH
44430: LD_INT 6
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
44451: LD_ADDR_VAR 0 32
44455: PUSH
44456: LD_INT 1
44458: PUSH
44459: LD_INT 3
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 0
44468: PUSH
44469: LD_INT 3
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 1
44478: NEG
44479: PUSH
44480: LD_INT 2
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 1
44489: PUSH
44490: LD_INT 4
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 0
44499: PUSH
44500: LD_INT 4
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: LD_INT 3
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 1
44520: PUSH
44521: LD_INT 5
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 0
44530: PUSH
44531: LD_INT 5
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 1
44540: NEG
44541: PUSH
44542: LD_INT 4
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 1
44551: PUSH
44552: LD_INT 6
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: LD_INT 6
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 1
44571: NEG
44572: PUSH
44573: LD_INT 5
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
44594: LD_ADDR_VAR 0 33
44598: PUSH
44599: LD_INT 2
44601: NEG
44602: PUSH
44603: LD_INT 1
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 3
44612: NEG
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 3
44623: NEG
44624: PUSH
44625: LD_INT 1
44627: NEG
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 3
44635: NEG
44636: PUSH
44637: LD_INT 1
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 4
44646: NEG
44647: PUSH
44648: LD_INT 0
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 4
44657: NEG
44658: PUSH
44659: LD_INT 1
44661: NEG
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 4
44669: NEG
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 5
44680: NEG
44681: PUSH
44682: LD_INT 0
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 5
44691: NEG
44692: PUSH
44693: LD_INT 1
44695: NEG
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 5
44703: NEG
44704: PUSH
44705: LD_INT 1
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 6
44714: NEG
44715: PUSH
44716: LD_INT 0
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 6
44725: NEG
44726: PUSH
44727: LD_INT 1
44729: NEG
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44749: LD_ADDR_VAR 0 34
44753: PUSH
44754: LD_INT 2
44756: NEG
44757: PUSH
44758: LD_INT 3
44760: NEG
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 3
44768: NEG
44769: PUSH
44770: LD_INT 2
44772: NEG
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 3
44780: NEG
44781: PUSH
44782: LD_INT 3
44784: NEG
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 3
44792: NEG
44793: PUSH
44794: LD_INT 4
44796: NEG
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 4
44804: NEG
44805: PUSH
44806: LD_INT 3
44808: NEG
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 4
44816: NEG
44817: PUSH
44818: LD_INT 4
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 4
44828: NEG
44829: PUSH
44830: LD_INT 5
44832: NEG
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 5
44840: NEG
44841: PUSH
44842: LD_INT 4
44844: NEG
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 5
44852: NEG
44853: PUSH
44854: LD_INT 5
44856: NEG
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 5
44864: NEG
44865: PUSH
44866: LD_INT 6
44868: NEG
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 6
44876: NEG
44877: PUSH
44878: LD_INT 5
44880: NEG
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 6
44888: NEG
44889: PUSH
44890: LD_INT 6
44892: NEG
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44912: LD_ADDR_VAR 0 41
44916: PUSH
44917: LD_INT 0
44919: PUSH
44920: LD_INT 2
44922: NEG
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 1
44930: NEG
44931: PUSH
44932: LD_INT 3
44934: NEG
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 1
44942: PUSH
44943: LD_INT 2
44945: NEG
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: LIST
44955: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44956: LD_ADDR_VAR 0 42
44960: PUSH
44961: LD_INT 2
44963: PUSH
44964: LD_INT 0
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 2
44973: PUSH
44974: LD_INT 1
44976: NEG
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 3
44984: PUSH
44985: LD_INT 1
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: LIST
44996: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44997: LD_ADDR_VAR 0 43
45001: PUSH
45002: LD_INT 2
45004: PUSH
45005: LD_INT 2
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 3
45014: PUSH
45015: LD_INT 2
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 2
45024: PUSH
45025: LD_INT 3
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: LIST
45036: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
45037: LD_ADDR_VAR 0 44
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: LD_INT 2
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: LD_INT 3
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 1
45064: NEG
45065: PUSH
45066: LD_INT 2
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: LIST
45077: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45078: LD_ADDR_VAR 0 45
45082: PUSH
45083: LD_INT 2
45085: NEG
45086: PUSH
45087: LD_INT 0
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 2
45096: NEG
45097: PUSH
45098: LD_INT 1
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 3
45107: NEG
45108: PUSH
45109: LD_INT 1
45111: NEG
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: LIST
45121: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
45122: LD_ADDR_VAR 0 46
45126: PUSH
45127: LD_INT 2
45129: NEG
45130: PUSH
45131: LD_INT 2
45133: NEG
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 2
45141: NEG
45142: PUSH
45143: LD_INT 3
45145: NEG
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 3
45153: NEG
45154: PUSH
45155: LD_INT 2
45157: NEG
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: LIST
45167: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
45168: LD_ADDR_VAR 0 47
45172: PUSH
45173: LD_INT 2
45175: NEG
45176: PUSH
45177: LD_INT 3
45179: NEG
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: PUSH
45189: LD_INT 3
45191: NEG
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45201: LD_ADDR_VAR 0 48
45205: PUSH
45206: LD_INT 1
45208: PUSH
45209: LD_INT 2
45211: NEG
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 2
45219: PUSH
45220: LD_INT 1
45222: NEG
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
45232: LD_ADDR_VAR 0 49
45236: PUSH
45237: LD_INT 3
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 3
45249: PUSH
45250: LD_INT 2
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
45261: LD_ADDR_VAR 0 50
45265: PUSH
45266: LD_INT 2
45268: PUSH
45269: LD_INT 3
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 1
45278: PUSH
45279: LD_INT 3
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45290: LD_ADDR_VAR 0 51
45294: PUSH
45295: LD_INT 1
45297: NEG
45298: PUSH
45299: LD_INT 2
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 2
45308: NEG
45309: PUSH
45310: LD_INT 1
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45321: LD_ADDR_VAR 0 52
45325: PUSH
45326: LD_INT 3
45328: NEG
45329: PUSH
45330: LD_INT 1
45332: NEG
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 3
45340: NEG
45341: PUSH
45342: LD_INT 2
45344: NEG
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45354: LD_ADDR_VAR 0 53
45358: PUSH
45359: LD_INT 1
45361: NEG
45362: PUSH
45363: LD_INT 3
45365: NEG
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: LD_INT 3
45376: NEG
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 1
45384: PUSH
45385: LD_INT 2
45387: NEG
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: LIST
45397: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45398: LD_ADDR_VAR 0 54
45402: PUSH
45403: LD_INT 2
45405: PUSH
45406: LD_INT 1
45408: NEG
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 3
45416: PUSH
45417: LD_INT 0
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 3
45426: PUSH
45427: LD_INT 1
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: LIST
45438: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45439: LD_ADDR_VAR 0 55
45443: PUSH
45444: LD_INT 3
45446: PUSH
45447: LD_INT 2
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 3
45456: PUSH
45457: LD_INT 3
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 2
45466: PUSH
45467: LD_INT 3
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: LIST
45478: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45479: LD_ADDR_VAR 0 56
45483: PUSH
45484: LD_INT 1
45486: PUSH
45487: LD_INT 3
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: LD_INT 3
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 1
45506: NEG
45507: PUSH
45508: LD_INT 2
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: LIST
45519: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45520: LD_ADDR_VAR 0 57
45524: PUSH
45525: LD_INT 2
45527: NEG
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 3
45538: NEG
45539: PUSH
45540: LD_INT 0
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 3
45549: NEG
45550: PUSH
45551: LD_INT 1
45553: NEG
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: LIST
45563: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45564: LD_ADDR_VAR 0 58
45568: PUSH
45569: LD_INT 2
45571: NEG
45572: PUSH
45573: LD_INT 3
45575: NEG
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 3
45583: NEG
45584: PUSH
45585: LD_INT 2
45587: NEG
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 3
45595: NEG
45596: PUSH
45597: LD_INT 3
45599: NEG
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: LIST
45609: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45610: LD_ADDR_VAR 0 59
45614: PUSH
45615: LD_INT 1
45617: NEG
45618: PUSH
45619: LD_INT 2
45621: NEG
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: LD_INT 2
45632: NEG
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 1
45640: PUSH
45641: LD_INT 1
45643: NEG
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: LIST
45653: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45654: LD_ADDR_VAR 0 60
45658: PUSH
45659: LD_INT 1
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 2
45672: PUSH
45673: LD_INT 0
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 2
45682: PUSH
45683: LD_INT 1
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: LIST
45694: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45695: LD_ADDR_VAR 0 61
45699: PUSH
45700: LD_INT 2
45702: PUSH
45703: LD_INT 1
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 2
45712: PUSH
45713: LD_INT 2
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: LD_INT 2
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: LIST
45734: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45735: LD_ADDR_VAR 0 62
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: LD_INT 2
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 0
45752: PUSH
45753: LD_INT 2
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 1
45762: NEG
45763: PUSH
45764: LD_INT 1
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: LIST
45775: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45776: LD_ADDR_VAR 0 63
45780: PUSH
45781: LD_INT 1
45783: NEG
45784: PUSH
45785: LD_INT 1
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 2
45794: NEG
45795: PUSH
45796: LD_INT 0
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 2
45805: NEG
45806: PUSH
45807: LD_INT 1
45809: NEG
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: LIST
45819: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45820: LD_ADDR_VAR 0 64
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: LD_INT 2
45831: NEG
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 2
45839: NEG
45840: PUSH
45841: LD_INT 1
45843: NEG
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 2
45851: NEG
45852: PUSH
45853: LD_INT 2
45855: NEG
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: LIST
45865: ST_TO_ADDR
// end ; 2 :
45866: GO 49132
45868: LD_INT 2
45870: DOUBLE
45871: EQUAL
45872: IFTRUE 45876
45874: GO 49131
45876: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45877: LD_ADDR_VAR 0 29
45881: PUSH
45882: LD_INT 4
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 4
45894: PUSH
45895: LD_INT 1
45897: NEG
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 5
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 5
45915: PUSH
45916: LD_INT 1
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 4
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 3
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 3
45945: PUSH
45946: LD_INT 1
45948: NEG
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 3
45956: PUSH
45957: LD_INT 2
45959: NEG
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 5
45967: PUSH
45968: LD_INT 2
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 3
45977: PUSH
45978: LD_INT 3
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 3
45987: PUSH
45988: LD_INT 2
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 4
45997: PUSH
45998: LD_INT 3
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 4
46007: PUSH
46008: LD_INT 4
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 3
46017: PUSH
46018: LD_INT 4
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 2
46027: PUSH
46028: LD_INT 3
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 2
46037: PUSH
46038: LD_INT 2
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 4
46047: PUSH
46048: LD_INT 2
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 2
46057: PUSH
46058: LD_INT 4
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: LD_INT 4
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 0
46077: PUSH
46078: LD_INT 3
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 1
46087: PUSH
46088: LD_INT 4
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 1
46097: PUSH
46098: LD_INT 5
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 0
46107: PUSH
46108: LD_INT 5
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 1
46117: NEG
46118: PUSH
46119: LD_INT 4
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 1
46128: NEG
46129: PUSH
46130: LD_INT 3
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 2
46139: PUSH
46140: LD_INT 5
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 2
46149: NEG
46150: PUSH
46151: LD_INT 3
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 3
46160: NEG
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 3
46171: NEG
46172: PUSH
46173: LD_INT 1
46175: NEG
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 2
46183: NEG
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 2
46194: NEG
46195: PUSH
46196: LD_INT 1
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 3
46205: NEG
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 4
46216: NEG
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 4
46227: NEG
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 4
46239: NEG
46240: PUSH
46241: LD_INT 2
46243: NEG
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 2
46251: NEG
46252: PUSH
46253: LD_INT 2
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 4
46262: NEG
46263: PUSH
46264: LD_INT 4
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 4
46274: NEG
46275: PUSH
46276: LD_INT 5
46278: NEG
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 3
46286: NEG
46287: PUSH
46288: LD_INT 4
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 3
46298: NEG
46299: PUSH
46300: LD_INT 3
46302: NEG
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 4
46310: NEG
46311: PUSH
46312: LD_INT 3
46314: NEG
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 5
46322: NEG
46323: PUSH
46324: LD_INT 4
46326: NEG
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 5
46334: NEG
46335: PUSH
46336: LD_INT 5
46338: NEG
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 3
46346: NEG
46347: PUSH
46348: LD_INT 5
46350: NEG
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 5
46358: NEG
46359: PUSH
46360: LD_INT 3
46362: NEG
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
46415: LD_ADDR_VAR 0 30
46419: PUSH
46420: LD_INT 4
46422: PUSH
46423: LD_INT 4
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 4
46432: PUSH
46433: LD_INT 3
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 5
46442: PUSH
46443: LD_INT 4
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 5
46452: PUSH
46453: LD_INT 5
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 4
46462: PUSH
46463: LD_INT 5
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 3
46472: PUSH
46473: LD_INT 4
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 3
46482: PUSH
46483: LD_INT 3
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 5
46492: PUSH
46493: LD_INT 3
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 3
46502: PUSH
46503: LD_INT 5
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: LD_INT 3
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 0
46522: PUSH
46523: LD_INT 2
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 1
46532: PUSH
46533: LD_INT 3
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 1
46542: PUSH
46543: LD_INT 4
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: LD_INT 4
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 1
46562: NEG
46563: PUSH
46564: LD_INT 3
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: NEG
46574: PUSH
46575: LD_INT 2
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 2
46584: PUSH
46585: LD_INT 4
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 2
46594: NEG
46595: PUSH
46596: LD_INT 2
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 4
46605: NEG
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 4
46616: NEG
46617: PUSH
46618: LD_INT 1
46620: NEG
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 3
46628: NEG
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 3
46639: NEG
46640: PUSH
46641: LD_INT 1
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 4
46650: NEG
46651: PUSH
46652: LD_INT 1
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 5
46661: NEG
46662: PUSH
46663: LD_INT 0
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 5
46672: NEG
46673: PUSH
46674: LD_INT 1
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 5
46684: NEG
46685: PUSH
46686: LD_INT 2
46688: NEG
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 3
46696: NEG
46697: PUSH
46698: LD_INT 2
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 3
46707: NEG
46708: PUSH
46709: LD_INT 3
46711: NEG
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 3
46719: NEG
46720: PUSH
46721: LD_INT 4
46723: NEG
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 2
46731: NEG
46732: PUSH
46733: LD_INT 3
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 2
46743: NEG
46744: PUSH
46745: LD_INT 2
46747: NEG
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 3
46755: NEG
46756: PUSH
46757: LD_INT 2
46759: NEG
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 4
46767: NEG
46768: PUSH
46769: LD_INT 3
46771: NEG
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 4
46779: NEG
46780: PUSH
46781: LD_INT 4
46783: NEG
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 2
46791: NEG
46792: PUSH
46793: LD_INT 4
46795: NEG
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 4
46803: NEG
46804: PUSH
46805: LD_INT 2
46807: NEG
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: LD_INT 4
46818: NEG
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: LD_INT 5
46829: NEG
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: LD_INT 4
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: LD_INT 3
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: LD_INT 3
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 1
46870: NEG
46871: PUSH
46872: LD_INT 4
46874: NEG
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 1
46882: NEG
46883: PUSH
46884: LD_INT 5
46886: NEG
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 2
46894: PUSH
46895: LD_INT 3
46897: NEG
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 2
46905: NEG
46906: PUSH
46907: LD_INT 5
46909: NEG
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46962: LD_ADDR_VAR 0 31
46966: PUSH
46967: LD_INT 0
46969: PUSH
46970: LD_INT 4
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: LD_INT 3
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 1
46989: PUSH
46990: LD_INT 4
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 1
46999: PUSH
47000: LD_INT 5
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 0
47009: PUSH
47010: LD_INT 5
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 1
47019: NEG
47020: PUSH
47021: LD_INT 4
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 1
47030: NEG
47031: PUSH
47032: LD_INT 3
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 2
47041: PUSH
47042: LD_INT 5
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 2
47051: NEG
47052: PUSH
47053: LD_INT 3
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 3
47062: NEG
47063: PUSH
47064: LD_INT 0
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 3
47073: NEG
47074: PUSH
47075: LD_INT 1
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 2
47085: NEG
47086: PUSH
47087: LD_INT 0
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 2
47096: NEG
47097: PUSH
47098: LD_INT 1
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 3
47107: NEG
47108: PUSH
47109: LD_INT 1
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 4
47118: NEG
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 4
47129: NEG
47130: PUSH
47131: LD_INT 1
47133: NEG
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 4
47141: NEG
47142: PUSH
47143: LD_INT 2
47145: NEG
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 2
47153: NEG
47154: PUSH
47155: LD_INT 2
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 4
47164: NEG
47165: PUSH
47166: LD_INT 4
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 4
47176: NEG
47177: PUSH
47178: LD_INT 5
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 3
47188: NEG
47189: PUSH
47190: LD_INT 4
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 3
47200: NEG
47201: PUSH
47202: LD_INT 3
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 4
47212: NEG
47213: PUSH
47214: LD_INT 3
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 5
47224: NEG
47225: PUSH
47226: LD_INT 4
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 5
47236: NEG
47237: PUSH
47238: LD_INT 5
47240: NEG
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 3
47248: NEG
47249: PUSH
47250: LD_INT 5
47252: NEG
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 5
47260: NEG
47261: PUSH
47262: LD_INT 3
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 0
47272: PUSH
47273: LD_INT 3
47275: NEG
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 0
47283: PUSH
47284: LD_INT 4
47286: NEG
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: LD_INT 3
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 1
47305: PUSH
47306: LD_INT 2
47308: NEG
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 0
47316: PUSH
47317: LD_INT 2
47319: NEG
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 1
47327: NEG
47328: PUSH
47329: LD_INT 3
47331: NEG
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 1
47339: NEG
47340: PUSH
47341: LD_INT 4
47343: NEG
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 2
47351: PUSH
47352: LD_INT 2
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 2
47362: NEG
47363: PUSH
47364: LD_INT 4
47366: NEG
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 4
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 4
47384: PUSH
47385: LD_INT 1
47387: NEG
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 5
47395: PUSH
47396: LD_INT 0
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 5
47405: PUSH
47406: LD_INT 1
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 4
47415: PUSH
47416: LD_INT 1
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 3
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 3
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 3
47446: PUSH
47447: LD_INT 2
47449: NEG
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 5
47457: PUSH
47458: LD_INT 2
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
47512: LD_ADDR_VAR 0 32
47516: PUSH
47517: LD_INT 4
47519: NEG
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 4
47530: NEG
47531: PUSH
47532: LD_INT 1
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 3
47542: NEG
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 3
47553: NEG
47554: PUSH
47555: LD_INT 1
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 4
47564: NEG
47565: PUSH
47566: LD_INT 1
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 5
47575: NEG
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 5
47586: NEG
47587: PUSH
47588: LD_INT 1
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 5
47598: NEG
47599: PUSH
47600: LD_INT 2
47602: NEG
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 3
47610: NEG
47611: PUSH
47612: LD_INT 2
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 3
47621: NEG
47622: PUSH
47623: LD_INT 3
47625: NEG
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 3
47633: NEG
47634: PUSH
47635: LD_INT 4
47637: NEG
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 2
47645: NEG
47646: PUSH
47647: LD_INT 3
47649: NEG
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 2
47657: NEG
47658: PUSH
47659: LD_INT 2
47661: NEG
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 3
47669: NEG
47670: PUSH
47671: LD_INT 2
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 4
47681: NEG
47682: PUSH
47683: LD_INT 3
47685: NEG
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 4
47693: NEG
47694: PUSH
47695: LD_INT 4
47697: NEG
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 2
47705: NEG
47706: PUSH
47707: LD_INT 4
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 4
47717: NEG
47718: PUSH
47719: LD_INT 2
47721: NEG
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: LD_INT 4
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: LD_INT 5
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 1
47751: PUSH
47752: LD_INT 4
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 1
47762: PUSH
47763: LD_INT 3
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: LD_INT 3
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 1
47784: NEG
47785: PUSH
47786: LD_INT 4
47788: NEG
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: LD_INT 5
47800: NEG
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 2
47808: PUSH
47809: LD_INT 3
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 2
47819: NEG
47820: PUSH
47821: LD_INT 5
47823: NEG
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 3
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 3
47841: PUSH
47842: LD_INT 1
47844: NEG
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 4
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 4
47862: PUSH
47863: LD_INT 1
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 3
47872: PUSH
47873: LD_INT 1
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 2
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 2
47892: PUSH
47893: LD_INT 1
47895: NEG
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 2
47903: PUSH
47904: LD_INT 2
47906: NEG
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 4
47914: PUSH
47915: LD_INT 2
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 4
47924: PUSH
47925: LD_INT 4
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 4
47934: PUSH
47935: LD_INT 3
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 5
47944: PUSH
47945: LD_INT 4
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 5
47954: PUSH
47955: LD_INT 5
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 4
47964: PUSH
47965: LD_INT 5
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 3
47974: PUSH
47975: LD_INT 4
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 3
47984: PUSH
47985: LD_INT 3
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 5
47994: PUSH
47995: LD_INT 3
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 3
48004: PUSH
48005: LD_INT 5
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
48059: LD_ADDR_VAR 0 33
48063: PUSH
48064: LD_INT 4
48066: NEG
48067: PUSH
48068: LD_INT 4
48070: NEG
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 4
48078: NEG
48079: PUSH
48080: LD_INT 5
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 3
48090: NEG
48091: PUSH
48092: LD_INT 4
48094: NEG
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 3
48102: NEG
48103: PUSH
48104: LD_INT 3
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 4
48114: NEG
48115: PUSH
48116: LD_INT 3
48118: NEG
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 5
48126: NEG
48127: PUSH
48128: LD_INT 4
48130: NEG
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 5
48138: NEG
48139: PUSH
48140: LD_INT 5
48142: NEG
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 3
48150: NEG
48151: PUSH
48152: LD_INT 5
48154: NEG
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 5
48162: NEG
48163: PUSH
48164: LD_INT 3
48166: NEG
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: LD_INT 3
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 0
48185: PUSH
48186: LD_INT 4
48188: NEG
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 1
48196: PUSH
48197: LD_INT 3
48199: NEG
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 1
48207: PUSH
48208: LD_INT 2
48210: NEG
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: LD_INT 2
48221: NEG
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: NEG
48230: PUSH
48231: LD_INT 3
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: LD_INT 4
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: LD_INT 2
48256: NEG
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 2
48264: NEG
48265: PUSH
48266: LD_INT 4
48268: NEG
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 4
48276: PUSH
48277: LD_INT 0
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 4
48286: PUSH
48287: LD_INT 1
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 5
48297: PUSH
48298: LD_INT 0
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 5
48307: PUSH
48308: LD_INT 1
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 4
48317: PUSH
48318: LD_INT 1
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 3
48327: PUSH
48328: LD_INT 0
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 3
48337: PUSH
48338: LD_INT 1
48340: NEG
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 3
48348: PUSH
48349: LD_INT 2
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 5
48359: PUSH
48360: LD_INT 2
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 3
48369: PUSH
48370: LD_INT 3
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 3
48379: PUSH
48380: LD_INT 2
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 4
48389: PUSH
48390: LD_INT 3
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 4
48399: PUSH
48400: LD_INT 4
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 3
48409: PUSH
48410: LD_INT 4
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 2
48419: PUSH
48420: LD_INT 3
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 2
48429: PUSH
48430: LD_INT 2
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 4
48439: PUSH
48440: LD_INT 2
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 2
48449: PUSH
48450: LD_INT 4
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 0
48459: PUSH
48460: LD_INT 4
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: LD_INT 3
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 1
48479: PUSH
48480: LD_INT 4
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: PUSH
48490: LD_INT 5
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: LD_INT 5
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 1
48509: NEG
48510: PUSH
48511: LD_INT 4
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 1
48520: NEG
48521: PUSH
48522: LD_INT 3
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 2
48531: PUSH
48532: LD_INT 5
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 2
48541: NEG
48542: PUSH
48543: LD_INT 3
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48597: LD_ADDR_VAR 0 34
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: LD_INT 4
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: LD_INT 5
48618: NEG
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: LD_INT 4
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 1
48637: PUSH
48638: LD_INT 3
48640: NEG
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 0
48648: PUSH
48649: LD_INT 3
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 1
48659: NEG
48660: PUSH
48661: LD_INT 4
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: NEG
48672: PUSH
48673: LD_INT 5
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 2
48683: PUSH
48684: LD_INT 3
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 2
48694: NEG
48695: PUSH
48696: LD_INT 5
48698: NEG
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 3
48706: PUSH
48707: LD_INT 0
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 3
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 4
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 4
48737: PUSH
48738: LD_INT 1
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 3
48747: PUSH
48748: LD_INT 1
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 2
48757: PUSH
48758: LD_INT 0
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 2
48767: PUSH
48768: LD_INT 1
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 2
48778: PUSH
48779: LD_INT 2
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 4
48789: PUSH
48790: LD_INT 2
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 4
48799: PUSH
48800: LD_INT 4
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 4
48809: PUSH
48810: LD_INT 3
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 5
48819: PUSH
48820: LD_INT 4
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 5
48829: PUSH
48830: LD_INT 5
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 4
48839: PUSH
48840: LD_INT 5
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 3
48849: PUSH
48850: LD_INT 4
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 3
48859: PUSH
48860: LD_INT 3
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 5
48869: PUSH
48870: LD_INT 3
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 3
48879: PUSH
48880: LD_INT 5
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 0
48889: PUSH
48890: LD_INT 3
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: LD_INT 2
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 1
48909: PUSH
48910: LD_INT 3
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: LD_INT 4
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 0
48929: PUSH
48930: LD_INT 4
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 1
48939: NEG
48940: PUSH
48941: LD_INT 3
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 1
48950: NEG
48951: PUSH
48952: LD_INT 2
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 2
48961: PUSH
48962: LD_INT 4
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 2
48971: NEG
48972: PUSH
48973: LD_INT 2
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 4
48982: NEG
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 4
48993: NEG
48994: PUSH
48995: LD_INT 1
48997: NEG
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 3
49005: NEG
49006: PUSH
49007: LD_INT 0
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 3
49016: NEG
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 4
49027: NEG
49028: PUSH
49029: LD_INT 1
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 5
49038: NEG
49039: PUSH
49040: LD_INT 0
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 5
49049: NEG
49050: PUSH
49051: LD_INT 1
49053: NEG
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 5
49061: NEG
49062: PUSH
49063: LD_INT 2
49065: NEG
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 3
49073: NEG
49074: PUSH
49075: LD_INT 2
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: ST_TO_ADDR
// end ; end ;
49129: GO 49132
49131: POP
// case btype of b_depot , b_warehouse :
49132: LD_VAR 0 1
49136: PUSH
49137: LD_INT 0
49139: DOUBLE
49140: EQUAL
49141: IFTRUE 49151
49143: LD_INT 1
49145: DOUBLE
49146: EQUAL
49147: IFTRUE 49151
49149: GO 49352
49151: POP
// case nation of nation_american :
49152: LD_VAR 0 5
49156: PUSH
49157: LD_INT 1
49159: DOUBLE
49160: EQUAL
49161: IFTRUE 49165
49163: GO 49221
49165: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
49166: LD_ADDR_VAR 0 9
49170: PUSH
49171: LD_VAR 0 11
49175: PUSH
49176: LD_VAR 0 12
49180: PUSH
49181: LD_VAR 0 13
49185: PUSH
49186: LD_VAR 0 14
49190: PUSH
49191: LD_VAR 0 15
49195: PUSH
49196: LD_VAR 0 16
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: PUSH
49209: LD_VAR 0 4
49213: PUSH
49214: LD_INT 1
49216: PLUS
49217: ARRAY
49218: ST_TO_ADDR
49219: GO 49350
49221: LD_INT 2
49223: DOUBLE
49224: EQUAL
49225: IFTRUE 49229
49227: GO 49285
49229: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
49230: LD_ADDR_VAR 0 9
49234: PUSH
49235: LD_VAR 0 17
49239: PUSH
49240: LD_VAR 0 18
49244: PUSH
49245: LD_VAR 0 19
49249: PUSH
49250: LD_VAR 0 20
49254: PUSH
49255: LD_VAR 0 21
49259: PUSH
49260: LD_VAR 0 22
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: PUSH
49273: LD_VAR 0 4
49277: PUSH
49278: LD_INT 1
49280: PLUS
49281: ARRAY
49282: ST_TO_ADDR
49283: GO 49350
49285: LD_INT 3
49287: DOUBLE
49288: EQUAL
49289: IFTRUE 49293
49291: GO 49349
49293: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
49294: LD_ADDR_VAR 0 9
49298: PUSH
49299: LD_VAR 0 23
49303: PUSH
49304: LD_VAR 0 24
49308: PUSH
49309: LD_VAR 0 25
49313: PUSH
49314: LD_VAR 0 26
49318: PUSH
49319: LD_VAR 0 27
49323: PUSH
49324: LD_VAR 0 28
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: PUSH
49337: LD_VAR 0 4
49341: PUSH
49342: LD_INT 1
49344: PLUS
49345: ARRAY
49346: ST_TO_ADDR
49347: GO 49350
49349: POP
49350: GO 49905
49352: LD_INT 2
49354: DOUBLE
49355: EQUAL
49356: IFTRUE 49366
49358: LD_INT 3
49360: DOUBLE
49361: EQUAL
49362: IFTRUE 49366
49364: GO 49422
49366: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
49367: LD_ADDR_VAR 0 9
49371: PUSH
49372: LD_VAR 0 29
49376: PUSH
49377: LD_VAR 0 30
49381: PUSH
49382: LD_VAR 0 31
49386: PUSH
49387: LD_VAR 0 32
49391: PUSH
49392: LD_VAR 0 33
49396: PUSH
49397: LD_VAR 0 34
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: PUSH
49410: LD_VAR 0 4
49414: PUSH
49415: LD_INT 1
49417: PLUS
49418: ARRAY
49419: ST_TO_ADDR
49420: GO 49905
49422: LD_INT 16
49424: DOUBLE
49425: EQUAL
49426: IFTRUE 49484
49428: LD_INT 17
49430: DOUBLE
49431: EQUAL
49432: IFTRUE 49484
49434: LD_INT 18
49436: DOUBLE
49437: EQUAL
49438: IFTRUE 49484
49440: LD_INT 19
49442: DOUBLE
49443: EQUAL
49444: IFTRUE 49484
49446: LD_INT 22
49448: DOUBLE
49449: EQUAL
49450: IFTRUE 49484
49452: LD_INT 20
49454: DOUBLE
49455: EQUAL
49456: IFTRUE 49484
49458: LD_INT 21
49460: DOUBLE
49461: EQUAL
49462: IFTRUE 49484
49464: LD_INT 23
49466: DOUBLE
49467: EQUAL
49468: IFTRUE 49484
49470: LD_INT 24
49472: DOUBLE
49473: EQUAL
49474: IFTRUE 49484
49476: LD_INT 25
49478: DOUBLE
49479: EQUAL
49480: IFTRUE 49484
49482: GO 49540
49484: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
49485: LD_ADDR_VAR 0 9
49489: PUSH
49490: LD_VAR 0 35
49494: PUSH
49495: LD_VAR 0 36
49499: PUSH
49500: LD_VAR 0 37
49504: PUSH
49505: LD_VAR 0 38
49509: PUSH
49510: LD_VAR 0 39
49514: PUSH
49515: LD_VAR 0 40
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: PUSH
49528: LD_VAR 0 4
49532: PUSH
49533: LD_INT 1
49535: PLUS
49536: ARRAY
49537: ST_TO_ADDR
49538: GO 49905
49540: LD_INT 6
49542: DOUBLE
49543: EQUAL
49544: IFTRUE 49596
49546: LD_INT 7
49548: DOUBLE
49549: EQUAL
49550: IFTRUE 49596
49552: LD_INT 8
49554: DOUBLE
49555: EQUAL
49556: IFTRUE 49596
49558: LD_INT 13
49560: DOUBLE
49561: EQUAL
49562: IFTRUE 49596
49564: LD_INT 12
49566: DOUBLE
49567: EQUAL
49568: IFTRUE 49596
49570: LD_INT 15
49572: DOUBLE
49573: EQUAL
49574: IFTRUE 49596
49576: LD_INT 11
49578: DOUBLE
49579: EQUAL
49580: IFTRUE 49596
49582: LD_INT 14
49584: DOUBLE
49585: EQUAL
49586: IFTRUE 49596
49588: LD_INT 10
49590: DOUBLE
49591: EQUAL
49592: IFTRUE 49596
49594: GO 49652
49596: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
49597: LD_ADDR_VAR 0 9
49601: PUSH
49602: LD_VAR 0 41
49606: PUSH
49607: LD_VAR 0 42
49611: PUSH
49612: LD_VAR 0 43
49616: PUSH
49617: LD_VAR 0 44
49621: PUSH
49622: LD_VAR 0 45
49626: PUSH
49627: LD_VAR 0 46
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: PUSH
49640: LD_VAR 0 4
49644: PUSH
49645: LD_INT 1
49647: PLUS
49648: ARRAY
49649: ST_TO_ADDR
49650: GO 49905
49652: LD_INT 36
49654: DOUBLE
49655: EQUAL
49656: IFTRUE 49660
49658: GO 49716
49660: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49661: LD_ADDR_VAR 0 9
49665: PUSH
49666: LD_VAR 0 47
49670: PUSH
49671: LD_VAR 0 48
49675: PUSH
49676: LD_VAR 0 49
49680: PUSH
49681: LD_VAR 0 50
49685: PUSH
49686: LD_VAR 0 51
49690: PUSH
49691: LD_VAR 0 52
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: PUSH
49704: LD_VAR 0 4
49708: PUSH
49709: LD_INT 1
49711: PLUS
49712: ARRAY
49713: ST_TO_ADDR
49714: GO 49905
49716: LD_INT 4
49718: DOUBLE
49719: EQUAL
49720: IFTRUE 49742
49722: LD_INT 5
49724: DOUBLE
49725: EQUAL
49726: IFTRUE 49742
49728: LD_INT 34
49730: DOUBLE
49731: EQUAL
49732: IFTRUE 49742
49734: LD_INT 37
49736: DOUBLE
49737: EQUAL
49738: IFTRUE 49742
49740: GO 49798
49742: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49743: LD_ADDR_VAR 0 9
49747: PUSH
49748: LD_VAR 0 53
49752: PUSH
49753: LD_VAR 0 54
49757: PUSH
49758: LD_VAR 0 55
49762: PUSH
49763: LD_VAR 0 56
49767: PUSH
49768: LD_VAR 0 57
49772: PUSH
49773: LD_VAR 0 58
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: PUSH
49786: LD_VAR 0 4
49790: PUSH
49791: LD_INT 1
49793: PLUS
49794: ARRAY
49795: ST_TO_ADDR
49796: GO 49905
49798: LD_INT 31
49800: DOUBLE
49801: EQUAL
49802: IFTRUE 49848
49804: LD_INT 32
49806: DOUBLE
49807: EQUAL
49808: IFTRUE 49848
49810: LD_INT 33
49812: DOUBLE
49813: EQUAL
49814: IFTRUE 49848
49816: LD_INT 27
49818: DOUBLE
49819: EQUAL
49820: IFTRUE 49848
49822: LD_INT 26
49824: DOUBLE
49825: EQUAL
49826: IFTRUE 49848
49828: LD_INT 28
49830: DOUBLE
49831: EQUAL
49832: IFTRUE 49848
49834: LD_INT 29
49836: DOUBLE
49837: EQUAL
49838: IFTRUE 49848
49840: LD_INT 30
49842: DOUBLE
49843: EQUAL
49844: IFTRUE 49848
49846: GO 49904
49848: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49849: LD_ADDR_VAR 0 9
49853: PUSH
49854: LD_VAR 0 59
49858: PUSH
49859: LD_VAR 0 60
49863: PUSH
49864: LD_VAR 0 61
49868: PUSH
49869: LD_VAR 0 62
49873: PUSH
49874: LD_VAR 0 63
49878: PUSH
49879: LD_VAR 0 64
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: PUSH
49892: LD_VAR 0 4
49896: PUSH
49897: LD_INT 1
49899: PLUS
49900: ARRAY
49901: ST_TO_ADDR
49902: GO 49905
49904: POP
// temp_list2 = [ ] ;
49905: LD_ADDR_VAR 0 10
49909: PUSH
49910: EMPTY
49911: ST_TO_ADDR
// for i in temp_list do
49912: LD_ADDR_VAR 0 8
49916: PUSH
49917: LD_VAR 0 9
49921: PUSH
49922: FOR_IN
49923: IFFALSE 49975
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49925: LD_ADDR_VAR 0 10
49929: PUSH
49930: LD_VAR 0 10
49934: PUSH
49935: LD_VAR 0 8
49939: PUSH
49940: LD_INT 1
49942: ARRAY
49943: PUSH
49944: LD_VAR 0 2
49948: PLUS
49949: PUSH
49950: LD_VAR 0 8
49954: PUSH
49955: LD_INT 2
49957: ARRAY
49958: PUSH
49959: LD_VAR 0 3
49963: PLUS
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: EMPTY
49970: LIST
49971: ADD
49972: ST_TO_ADDR
49973: GO 49922
49975: POP
49976: POP
// result = temp_list2 ;
49977: LD_ADDR_VAR 0 7
49981: PUSH
49982: LD_VAR 0 10
49986: ST_TO_ADDR
// end ;
49987: LD_VAR 0 7
49991: RET
// export function EnemyInRange ( unit , dist ) ; begin
49992: LD_INT 0
49994: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49995: LD_ADDR_VAR 0 3
49999: PUSH
50000: LD_VAR 0 1
50004: PPUSH
50005: CALL_OW 255
50009: PPUSH
50010: LD_VAR 0 1
50014: PPUSH
50015: CALL_OW 250
50019: PPUSH
50020: LD_VAR 0 1
50024: PPUSH
50025: CALL_OW 251
50029: PPUSH
50030: LD_VAR 0 2
50034: PPUSH
50035: CALL 23249 0 4
50039: PUSH
50040: LD_INT 4
50042: ARRAY
50043: ST_TO_ADDR
// end ;
50044: LD_VAR 0 3
50048: RET
// export function PlayerSeeMe ( unit ) ; begin
50049: LD_INT 0
50051: PPUSH
// result := See ( your_side , unit ) ;
50052: LD_ADDR_VAR 0 2
50056: PUSH
50057: LD_OWVAR 2
50061: PPUSH
50062: LD_VAR 0 1
50066: PPUSH
50067: CALL_OW 292
50071: ST_TO_ADDR
// end ;
50072: LD_VAR 0 2
50076: RET
// export function ReverseDir ( unit ) ; begin
50077: LD_INT 0
50079: PPUSH
// if not unit then
50080: LD_VAR 0 1
50084: NOT
50085: IFFALSE 50089
// exit ;
50087: GO 50112
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
50089: LD_ADDR_VAR 0 2
50093: PUSH
50094: LD_VAR 0 1
50098: PPUSH
50099: CALL_OW 254
50103: PUSH
50104: LD_INT 3
50106: PLUS
50107: PUSH
50108: LD_INT 6
50110: MOD
50111: ST_TO_ADDR
// end ;
50112: LD_VAR 0 2
50116: RET
// export function ReverseArray ( array ) ; var i ; begin
50117: LD_INT 0
50119: PPUSH
50120: PPUSH
// if not array then
50121: LD_VAR 0 1
50125: NOT
50126: IFFALSE 50130
// exit ;
50128: GO 50185
// result := [ ] ;
50130: LD_ADDR_VAR 0 2
50134: PUSH
50135: EMPTY
50136: ST_TO_ADDR
// for i := array downto 1 do
50137: LD_ADDR_VAR 0 3
50141: PUSH
50142: DOUBLE
50143: LD_VAR 0 1
50147: INC
50148: ST_TO_ADDR
50149: LD_INT 1
50151: PUSH
50152: FOR_DOWNTO
50153: IFFALSE 50183
// result := Join ( result , array [ i ] ) ;
50155: LD_ADDR_VAR 0 2
50159: PUSH
50160: LD_VAR 0 2
50164: PPUSH
50165: LD_VAR 0 1
50169: PUSH
50170: LD_VAR 0 3
50174: ARRAY
50175: PPUSH
50176: CALL 55037 0 2
50180: ST_TO_ADDR
50181: GO 50152
50183: POP
50184: POP
// end ;
50185: LD_VAR 0 2
50189: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
50190: LD_INT 0
50192: PPUSH
50193: PPUSH
50194: PPUSH
50195: PPUSH
50196: PPUSH
50197: PPUSH
// if not unit or not hexes then
50198: LD_VAR 0 1
50202: NOT
50203: IFTRUE 50212
50205: PUSH
50206: LD_VAR 0 2
50210: NOT
50211: OR
50212: IFFALSE 50216
// exit ;
50214: GO 50339
// dist := 9999 ;
50216: LD_ADDR_VAR 0 5
50220: PUSH
50221: LD_INT 9999
50223: ST_TO_ADDR
// for i = 1 to hexes do
50224: LD_ADDR_VAR 0 4
50228: PUSH
50229: DOUBLE
50230: LD_INT 1
50232: DEC
50233: ST_TO_ADDR
50234: LD_VAR 0 2
50238: PUSH
50239: FOR_TO
50240: IFFALSE 50327
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50242: LD_ADDR_VAR 0 6
50246: PUSH
50247: LD_VAR 0 1
50251: PPUSH
50252: LD_VAR 0 2
50256: PUSH
50257: LD_VAR 0 4
50261: ARRAY
50262: PUSH
50263: LD_INT 1
50265: ARRAY
50266: PPUSH
50267: LD_VAR 0 2
50271: PUSH
50272: LD_VAR 0 4
50276: ARRAY
50277: PUSH
50278: LD_INT 2
50280: ARRAY
50281: PPUSH
50282: CALL_OW 297
50286: ST_TO_ADDR
// if tdist < dist then
50287: LD_VAR 0 6
50291: PUSH
50292: LD_VAR 0 5
50296: LESS
50297: IFFALSE 50325
// begin hex := hexes [ i ] ;
50299: LD_ADDR_VAR 0 8
50303: PUSH
50304: LD_VAR 0 2
50308: PUSH
50309: LD_VAR 0 4
50313: ARRAY
50314: ST_TO_ADDR
// dist := tdist ;
50315: LD_ADDR_VAR 0 5
50319: PUSH
50320: LD_VAR 0 6
50324: ST_TO_ADDR
// end ; end ;
50325: GO 50239
50327: POP
50328: POP
// result := hex ;
50329: LD_ADDR_VAR 0 3
50333: PUSH
50334: LD_VAR 0 8
50338: ST_TO_ADDR
// end ;
50339: LD_VAR 0 3
50343: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
50344: LD_INT 0
50346: PPUSH
50347: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50348: LD_VAR 0 1
50352: NOT
50353: IFTRUE 50392
50355: PUSH
50356: LD_VAR 0 1
50360: PUSH
50361: LD_INT 21
50363: PUSH
50364: LD_INT 2
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 23
50373: PUSH
50374: LD_INT 2
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PPUSH
50385: CALL_OW 69
50389: IN
50390: NOT
50391: OR
50392: IFFALSE 50396
// exit ;
50394: GO 50443
// for i = 1 to 3 do
50396: LD_ADDR_VAR 0 3
50400: PUSH
50401: DOUBLE
50402: LD_INT 1
50404: DEC
50405: ST_TO_ADDR
50406: LD_INT 3
50408: PUSH
50409: FOR_TO
50410: IFFALSE 50441
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
50412: LD_VAR 0 1
50416: PPUSH
50417: CALL_OW 250
50421: PPUSH
50422: LD_VAR 0 1
50426: PPUSH
50427: CALL_OW 251
50431: PPUSH
50432: LD_INT 1
50434: PPUSH
50435: CALL_OW 453
50439: GO 50409
50441: POP
50442: POP
// end ;
50443: LD_VAR 0 2
50447: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
50448: LD_INT 0
50450: PPUSH
50451: PPUSH
50452: PPUSH
50453: PPUSH
50454: PPUSH
50455: PPUSH
// if not unit or not enemy_unit then
50456: LD_VAR 0 1
50460: NOT
50461: IFTRUE 50470
50463: PUSH
50464: LD_VAR 0 2
50468: NOT
50469: OR
50470: IFFALSE 50474
// exit ;
50472: GO 50955
// if GetLives ( i ) < 250 then
50474: LD_VAR 0 4
50478: PPUSH
50479: CALL_OW 256
50483: PUSH
50484: LD_INT 250
50486: LESS
50487: IFFALSE 50500
// begin ComAutodestruct ( i ) ;
50489: LD_VAR 0 4
50493: PPUSH
50494: CALL 50344 0 1
// exit ;
50498: GO 50955
// end ; x := GetX ( enemy_unit ) ;
50500: LD_ADDR_VAR 0 7
50504: PUSH
50505: LD_VAR 0 2
50509: PPUSH
50510: CALL_OW 250
50514: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
50515: LD_ADDR_VAR 0 8
50519: PUSH
50520: LD_VAR 0 2
50524: PPUSH
50525: CALL_OW 251
50529: ST_TO_ADDR
// if not x or not y then
50530: LD_VAR 0 7
50534: NOT
50535: IFTRUE 50544
50537: PUSH
50538: LD_VAR 0 8
50542: NOT
50543: OR
50544: IFFALSE 50548
// exit ;
50546: GO 50955
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
50548: LD_ADDR_VAR 0 6
50552: PUSH
50553: LD_VAR 0 7
50557: PPUSH
50558: LD_INT 0
50560: PPUSH
50561: LD_INT 4
50563: PPUSH
50564: CALL_OW 272
50568: PUSH
50569: LD_VAR 0 8
50573: PPUSH
50574: LD_INT 0
50576: PPUSH
50577: LD_INT 4
50579: PPUSH
50580: CALL_OW 273
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_VAR 0 7
50593: PPUSH
50594: LD_INT 1
50596: PPUSH
50597: LD_INT 4
50599: PPUSH
50600: CALL_OW 272
50604: PUSH
50605: LD_VAR 0 8
50609: PPUSH
50610: LD_INT 1
50612: PPUSH
50613: LD_INT 4
50615: PPUSH
50616: CALL_OW 273
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_VAR 0 7
50629: PPUSH
50630: LD_INT 2
50632: PPUSH
50633: LD_INT 4
50635: PPUSH
50636: CALL_OW 272
50640: PUSH
50641: LD_VAR 0 8
50645: PPUSH
50646: LD_INT 2
50648: PPUSH
50649: LD_INT 4
50651: PPUSH
50652: CALL_OW 273
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_VAR 0 7
50665: PPUSH
50666: LD_INT 3
50668: PPUSH
50669: LD_INT 4
50671: PPUSH
50672: CALL_OW 272
50676: PUSH
50677: LD_VAR 0 8
50681: PPUSH
50682: LD_INT 3
50684: PPUSH
50685: LD_INT 4
50687: PPUSH
50688: CALL_OW 273
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_VAR 0 7
50701: PPUSH
50702: LD_INT 4
50704: PPUSH
50705: LD_INT 4
50707: PPUSH
50708: CALL_OW 272
50712: PUSH
50713: LD_VAR 0 8
50717: PPUSH
50718: LD_INT 4
50720: PPUSH
50721: LD_INT 4
50723: PPUSH
50724: CALL_OW 273
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_VAR 0 7
50737: PPUSH
50738: LD_INT 5
50740: PPUSH
50741: LD_INT 4
50743: PPUSH
50744: CALL_OW 272
50748: PUSH
50749: LD_VAR 0 8
50753: PPUSH
50754: LD_INT 5
50756: PPUSH
50757: LD_INT 4
50759: PPUSH
50760: CALL_OW 273
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: ST_TO_ADDR
// for i = tmp downto 1 do
50777: LD_ADDR_VAR 0 4
50781: PUSH
50782: DOUBLE
50783: LD_VAR 0 6
50787: INC
50788: ST_TO_ADDR
50789: LD_INT 1
50791: PUSH
50792: FOR_DOWNTO
50793: IFFALSE 50896
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50795: LD_VAR 0 6
50799: PUSH
50800: LD_VAR 0 4
50804: ARRAY
50805: PUSH
50806: LD_INT 1
50808: ARRAY
50809: PPUSH
50810: LD_VAR 0 6
50814: PUSH
50815: LD_VAR 0 4
50819: ARRAY
50820: PUSH
50821: LD_INT 2
50823: ARRAY
50824: PPUSH
50825: CALL_OW 488
50829: NOT
50830: IFTRUE 50872
50832: PUSH
50833: LD_VAR 0 6
50837: PUSH
50838: LD_VAR 0 4
50842: ARRAY
50843: PUSH
50844: LD_INT 1
50846: ARRAY
50847: PPUSH
50848: LD_VAR 0 6
50852: PUSH
50853: LD_VAR 0 4
50857: ARRAY
50858: PUSH
50859: LD_INT 2
50861: ARRAY
50862: PPUSH
50863: CALL_OW 428
50867: PUSH
50868: LD_INT 0
50870: NONEQUAL
50871: OR
50872: IFFALSE 50894
// tmp := Delete ( tmp , i ) ;
50874: LD_ADDR_VAR 0 6
50878: PUSH
50879: LD_VAR 0 6
50883: PPUSH
50884: LD_VAR 0 4
50888: PPUSH
50889: CALL_OW 3
50893: ST_TO_ADDR
50894: GO 50792
50896: POP
50897: POP
// j := GetClosestHex ( unit , tmp ) ;
50898: LD_ADDR_VAR 0 5
50902: PUSH
50903: LD_VAR 0 1
50907: PPUSH
50908: LD_VAR 0 6
50912: PPUSH
50913: CALL 50190 0 2
50917: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50918: LD_VAR 0 1
50922: PPUSH
50923: LD_VAR 0 5
50927: PUSH
50928: LD_INT 1
50930: ARRAY
50931: PPUSH
50932: LD_VAR 0 5
50936: PUSH
50937: LD_INT 2
50939: ARRAY
50940: PPUSH
50941: CALL_OW 111
// result := j ;
50945: LD_ADDR_VAR 0 3
50949: PUSH
50950: LD_VAR 0 5
50954: ST_TO_ADDR
// end ;
50955: LD_VAR 0 3
50959: RET
// export function PrepareApemanSoldier ( ) ; begin
50960: LD_INT 0
50962: PPUSH
// uc_nation := 0 ;
50963: LD_ADDR_OWVAR 21
50967: PUSH
50968: LD_INT 0
50970: ST_TO_ADDR
// hc_sex := sex_male ;
50971: LD_ADDR_OWVAR 27
50975: PUSH
50976: LD_INT 1
50978: ST_TO_ADDR
// hc_name :=  ;
50979: LD_ADDR_OWVAR 26
50983: PUSH
50984: LD_STRING 
50986: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50987: LD_ADDR_OWVAR 28
50991: PUSH
50992: LD_INT 15
50994: ST_TO_ADDR
// hc_gallery :=  ;
50995: LD_ADDR_OWVAR 33
50999: PUSH
51000: LD_STRING 
51002: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51003: LD_ADDR_OWVAR 31
51007: PUSH
51008: LD_INT 0
51010: PPUSH
51011: LD_INT 3
51013: PPUSH
51014: CALL_OW 12
51018: PUSH
51019: LD_INT 0
51021: PPUSH
51022: LD_INT 3
51024: PPUSH
51025: CALL_OW 12
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
51042: LD_ADDR_OWVAR 29
51046: PUSH
51047: LD_INT 10
51049: PUSH
51050: LD_INT 12
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: ST_TO_ADDR
// end ;
51057: LD_VAR 0 1
51061: RET
// export function PrepareApemanEngineer ( ) ; begin
51062: LD_INT 0
51064: PPUSH
// uc_nation := 0 ;
51065: LD_ADDR_OWVAR 21
51069: PUSH
51070: LD_INT 0
51072: ST_TO_ADDR
// hc_sex := sex_male ;
51073: LD_ADDR_OWVAR 27
51077: PUSH
51078: LD_INT 1
51080: ST_TO_ADDR
// hc_name :=  ;
51081: LD_ADDR_OWVAR 26
51085: PUSH
51086: LD_STRING 
51088: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
51089: LD_ADDR_OWVAR 28
51093: PUSH
51094: LD_INT 16
51096: ST_TO_ADDR
// hc_gallery :=  ;
51097: LD_ADDR_OWVAR 33
51101: PUSH
51102: LD_STRING 
51104: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51105: LD_ADDR_OWVAR 31
51109: PUSH
51110: LD_INT 0
51112: PPUSH
51113: LD_INT 3
51115: PPUSH
51116: CALL_OW 12
51120: PUSH
51121: LD_INT 0
51123: PPUSH
51124: LD_INT 3
51126: PPUSH
51127: CALL_OW 12
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: LD_INT 0
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
51144: LD_ADDR_OWVAR 29
51148: PUSH
51149: LD_INT 10
51151: PUSH
51152: LD_INT 12
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: ST_TO_ADDR
// end ;
51159: LD_VAR 0 1
51163: RET
// export function PrepareApeman ( agressivity ) ; begin
51164: LD_INT 0
51166: PPUSH
// uc_side := 0 ;
51167: LD_ADDR_OWVAR 20
51171: PUSH
51172: LD_INT 0
51174: ST_TO_ADDR
// uc_nation := 0 ;
51175: LD_ADDR_OWVAR 21
51179: PUSH
51180: LD_INT 0
51182: ST_TO_ADDR
// hc_sex := sex_male ;
51183: LD_ADDR_OWVAR 27
51187: PUSH
51188: LD_INT 1
51190: ST_TO_ADDR
// hc_class := class_apeman ;
51191: LD_ADDR_OWVAR 28
51195: PUSH
51196: LD_INT 12
51198: ST_TO_ADDR
// hc_gallery :=  ;
51199: LD_ADDR_OWVAR 33
51203: PUSH
51204: LD_STRING 
51206: ST_TO_ADDR
// hc_name :=  ;
51207: LD_ADDR_OWVAR 26
51211: PUSH
51212: LD_STRING 
51214: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
51215: LD_ADDR_OWVAR 29
51219: PUSH
51220: LD_INT 10
51222: PUSH
51223: LD_INT 12
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: ST_TO_ADDR
// if agressivity = 0 then
51230: LD_VAR 0 1
51234: PUSH
51235: LD_INT 0
51237: EQUAL
51238: IFFALSE 51250
// hc_agressivity := 0 else
51240: LD_ADDR_OWVAR 35
51244: PUSH
51245: LD_INT 0
51247: ST_TO_ADDR
51248: GO 51271
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51250: LD_ADDR_OWVAR 35
51254: PUSH
51255: LD_VAR 0 1
51259: NEG
51260: PPUSH
51261: LD_VAR 0 1
51265: PPUSH
51266: CALL_OW 12
51270: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51271: LD_ADDR_OWVAR 31
51275: PUSH
51276: LD_INT 0
51278: PPUSH
51279: LD_INT 3
51281: PPUSH
51282: CALL_OW 12
51286: PUSH
51287: LD_INT 0
51289: PPUSH
51290: LD_INT 3
51292: PPUSH
51293: CALL_OW 12
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: LD_INT 0
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: ST_TO_ADDR
// end ;
51310: LD_VAR 0 2
51314: RET
// export function PrepareTiger ( agressivity ) ; begin
51315: LD_INT 0
51317: PPUSH
// uc_side := 0 ;
51318: LD_ADDR_OWVAR 20
51322: PUSH
51323: LD_INT 0
51325: ST_TO_ADDR
// uc_nation := 0 ;
51326: LD_ADDR_OWVAR 21
51330: PUSH
51331: LD_INT 0
51333: ST_TO_ADDR
// InitHc ;
51334: CALL_OW 19
// hc_class := class_tiger ;
51338: LD_ADDR_OWVAR 28
51342: PUSH
51343: LD_INT 14
51345: ST_TO_ADDR
// hc_gallery :=  ;
51346: LD_ADDR_OWVAR 33
51350: PUSH
51351: LD_STRING 
51353: ST_TO_ADDR
// hc_name :=  ;
51354: LD_ADDR_OWVAR 26
51358: PUSH
51359: LD_STRING 
51361: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51362: LD_ADDR_OWVAR 35
51366: PUSH
51367: LD_VAR 0 1
51371: NEG
51372: PPUSH
51373: LD_VAR 0 1
51377: PPUSH
51378: CALL_OW 12
51382: ST_TO_ADDR
// end ;
51383: LD_VAR 0 2
51387: RET
// export function PrepareEnchidna ( ) ; begin
51388: LD_INT 0
51390: PPUSH
// uc_side := 0 ;
51391: LD_ADDR_OWVAR 20
51395: PUSH
51396: LD_INT 0
51398: ST_TO_ADDR
// uc_nation := 0 ;
51399: LD_ADDR_OWVAR 21
51403: PUSH
51404: LD_INT 0
51406: ST_TO_ADDR
// InitHc ;
51407: CALL_OW 19
// hc_class := class_baggie ;
51411: LD_ADDR_OWVAR 28
51415: PUSH
51416: LD_INT 13
51418: ST_TO_ADDR
// hc_gallery :=  ;
51419: LD_ADDR_OWVAR 33
51423: PUSH
51424: LD_STRING 
51426: ST_TO_ADDR
// hc_name :=  ;
51427: LD_ADDR_OWVAR 26
51431: PUSH
51432: LD_STRING 
51434: ST_TO_ADDR
// end ;
51435: LD_VAR 0 1
51439: RET
// export function PrepareFrog ( ) ; begin
51440: LD_INT 0
51442: PPUSH
// uc_side := 0 ;
51443: LD_ADDR_OWVAR 20
51447: PUSH
51448: LD_INT 0
51450: ST_TO_ADDR
// uc_nation := 0 ;
51451: LD_ADDR_OWVAR 21
51455: PUSH
51456: LD_INT 0
51458: ST_TO_ADDR
// InitHc ;
51459: CALL_OW 19
// hc_class := class_frog ;
51463: LD_ADDR_OWVAR 28
51467: PUSH
51468: LD_INT 19
51470: ST_TO_ADDR
// hc_gallery :=  ;
51471: LD_ADDR_OWVAR 33
51475: PUSH
51476: LD_STRING 
51478: ST_TO_ADDR
// hc_name :=  ;
51479: LD_ADDR_OWVAR 26
51483: PUSH
51484: LD_STRING 
51486: ST_TO_ADDR
// end ;
51487: LD_VAR 0 1
51491: RET
// export function PrepareFish ( ) ; begin
51492: LD_INT 0
51494: PPUSH
// uc_side := 0 ;
51495: LD_ADDR_OWVAR 20
51499: PUSH
51500: LD_INT 0
51502: ST_TO_ADDR
// uc_nation := 0 ;
51503: LD_ADDR_OWVAR 21
51507: PUSH
51508: LD_INT 0
51510: ST_TO_ADDR
// InitHc ;
51511: CALL_OW 19
// hc_class := class_fish ;
51515: LD_ADDR_OWVAR 28
51519: PUSH
51520: LD_INT 20
51522: ST_TO_ADDR
// hc_gallery :=  ;
51523: LD_ADDR_OWVAR 33
51527: PUSH
51528: LD_STRING 
51530: ST_TO_ADDR
// hc_name :=  ;
51531: LD_ADDR_OWVAR 26
51535: PUSH
51536: LD_STRING 
51538: ST_TO_ADDR
// end ;
51539: LD_VAR 0 1
51543: RET
// export function PrepareBird ( ) ; begin
51544: LD_INT 0
51546: PPUSH
// uc_side := 0 ;
51547: LD_ADDR_OWVAR 20
51551: PUSH
51552: LD_INT 0
51554: ST_TO_ADDR
// uc_nation := 0 ;
51555: LD_ADDR_OWVAR 21
51559: PUSH
51560: LD_INT 0
51562: ST_TO_ADDR
// InitHc ;
51563: CALL_OW 19
// hc_class := class_phororhacos ;
51567: LD_ADDR_OWVAR 28
51571: PUSH
51572: LD_INT 18
51574: ST_TO_ADDR
// hc_gallery :=  ;
51575: LD_ADDR_OWVAR 33
51579: PUSH
51580: LD_STRING 
51582: ST_TO_ADDR
// hc_name :=  ;
51583: LD_ADDR_OWVAR 26
51587: PUSH
51588: LD_STRING 
51590: ST_TO_ADDR
// end ;
51591: LD_VAR 0 1
51595: RET
// export function PrepareHorse ( ) ; begin
51596: LD_INT 0
51598: PPUSH
// uc_side := 0 ;
51599: LD_ADDR_OWVAR 20
51603: PUSH
51604: LD_INT 0
51606: ST_TO_ADDR
// uc_nation := 0 ;
51607: LD_ADDR_OWVAR 21
51611: PUSH
51612: LD_INT 0
51614: ST_TO_ADDR
// InitHc ;
51615: CALL_OW 19
// hc_class := class_horse ;
51619: LD_ADDR_OWVAR 28
51623: PUSH
51624: LD_INT 21
51626: ST_TO_ADDR
// hc_gallery :=  ;
51627: LD_ADDR_OWVAR 33
51631: PUSH
51632: LD_STRING 
51634: ST_TO_ADDR
// hc_name :=  ;
51635: LD_ADDR_OWVAR 26
51639: PUSH
51640: LD_STRING 
51642: ST_TO_ADDR
// end ;
51643: LD_VAR 0 1
51647: RET
// export function PrepareMastodont ( ) ; begin
51648: LD_INT 0
51650: PPUSH
// uc_side := 0 ;
51651: LD_ADDR_OWVAR 20
51655: PUSH
51656: LD_INT 0
51658: ST_TO_ADDR
// uc_nation := 0 ;
51659: LD_ADDR_OWVAR 21
51663: PUSH
51664: LD_INT 0
51666: ST_TO_ADDR
// vc_chassis := class_mastodont ;
51667: LD_ADDR_OWVAR 37
51671: PUSH
51672: LD_INT 31
51674: ST_TO_ADDR
// vc_control := control_rider ;
51675: LD_ADDR_OWVAR 38
51679: PUSH
51680: LD_INT 4
51682: ST_TO_ADDR
// end ;
51683: LD_VAR 0 1
51687: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51688: LD_INT 0
51690: PPUSH
51691: PPUSH
51692: PPUSH
// uc_side = 0 ;
51693: LD_ADDR_OWVAR 20
51697: PUSH
51698: LD_INT 0
51700: ST_TO_ADDR
// uc_nation = 0 ;
51701: LD_ADDR_OWVAR 21
51705: PUSH
51706: LD_INT 0
51708: ST_TO_ADDR
// InitHc_All ( ) ;
51709: CALL_OW 584
// InitVc ;
51713: CALL_OW 20
// if mastodonts then
51717: LD_VAR 0 6
51721: IFFALSE 51788
// for i = 1 to mastodonts do
51723: LD_ADDR_VAR 0 11
51727: PUSH
51728: DOUBLE
51729: LD_INT 1
51731: DEC
51732: ST_TO_ADDR
51733: LD_VAR 0 6
51737: PUSH
51738: FOR_TO
51739: IFFALSE 51786
// begin vc_chassis := 31 ;
51741: LD_ADDR_OWVAR 37
51745: PUSH
51746: LD_INT 31
51748: ST_TO_ADDR
// vc_control := control_rider ;
51749: LD_ADDR_OWVAR 38
51753: PUSH
51754: LD_INT 4
51756: ST_TO_ADDR
// animal := CreateVehicle ;
51757: LD_ADDR_VAR 0 12
51761: PUSH
51762: CALL_OW 45
51766: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51767: LD_VAR 0 12
51771: PPUSH
51772: LD_VAR 0 8
51776: PPUSH
51777: LD_INT 0
51779: PPUSH
51780: CALL 53930 0 3
// end ;
51784: GO 51738
51786: POP
51787: POP
// if horses then
51788: LD_VAR 0 5
51792: IFFALSE 51859
// for i = 1 to horses do
51794: LD_ADDR_VAR 0 11
51798: PUSH
51799: DOUBLE
51800: LD_INT 1
51802: DEC
51803: ST_TO_ADDR
51804: LD_VAR 0 5
51808: PUSH
51809: FOR_TO
51810: IFFALSE 51857
// begin hc_class := 21 ;
51812: LD_ADDR_OWVAR 28
51816: PUSH
51817: LD_INT 21
51819: ST_TO_ADDR
// hc_gallery :=  ;
51820: LD_ADDR_OWVAR 33
51824: PUSH
51825: LD_STRING 
51827: ST_TO_ADDR
// animal := CreateHuman ;
51828: LD_ADDR_VAR 0 12
51832: PUSH
51833: CALL_OW 44
51837: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51838: LD_VAR 0 12
51842: PPUSH
51843: LD_VAR 0 8
51847: PPUSH
51848: LD_INT 0
51850: PPUSH
51851: CALL 53930 0 3
// end ;
51855: GO 51809
51857: POP
51858: POP
// if birds then
51859: LD_VAR 0 1
51863: IFFALSE 51930
// for i = 1 to birds do
51865: LD_ADDR_VAR 0 11
51869: PUSH
51870: DOUBLE
51871: LD_INT 1
51873: DEC
51874: ST_TO_ADDR
51875: LD_VAR 0 1
51879: PUSH
51880: FOR_TO
51881: IFFALSE 51928
// begin hc_class := 18 ;
51883: LD_ADDR_OWVAR 28
51887: PUSH
51888: LD_INT 18
51890: ST_TO_ADDR
// hc_gallery =  ;
51891: LD_ADDR_OWVAR 33
51895: PUSH
51896: LD_STRING 
51898: ST_TO_ADDR
// animal := CreateHuman ;
51899: LD_ADDR_VAR 0 12
51903: PUSH
51904: CALL_OW 44
51908: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51909: LD_VAR 0 12
51913: PPUSH
51914: LD_VAR 0 8
51918: PPUSH
51919: LD_INT 0
51921: PPUSH
51922: CALL 53930 0 3
// end ;
51926: GO 51880
51928: POP
51929: POP
// if tigers then
51930: LD_VAR 0 2
51934: IFFALSE 52018
// for i = 1 to tigers do
51936: LD_ADDR_VAR 0 11
51940: PUSH
51941: DOUBLE
51942: LD_INT 1
51944: DEC
51945: ST_TO_ADDR
51946: LD_VAR 0 2
51950: PUSH
51951: FOR_TO
51952: IFFALSE 52016
// begin hc_class = class_tiger ;
51954: LD_ADDR_OWVAR 28
51958: PUSH
51959: LD_INT 14
51961: ST_TO_ADDR
// hc_gallery =  ;
51962: LD_ADDR_OWVAR 33
51966: PUSH
51967: LD_STRING 
51969: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51970: LD_ADDR_OWVAR 35
51974: PUSH
51975: LD_INT 7
51977: NEG
51978: PPUSH
51979: LD_INT 7
51981: PPUSH
51982: CALL_OW 12
51986: ST_TO_ADDR
// animal := CreateHuman ;
51987: LD_ADDR_VAR 0 12
51991: PUSH
51992: CALL_OW 44
51996: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51997: LD_VAR 0 12
52001: PPUSH
52002: LD_VAR 0 8
52006: PPUSH
52007: LD_INT 0
52009: PPUSH
52010: CALL 53930 0 3
// end ;
52014: GO 51951
52016: POP
52017: POP
// if apemans then
52018: LD_VAR 0 3
52022: IFFALSE 52145
// for i = 1 to apemans do
52024: LD_ADDR_VAR 0 11
52028: PUSH
52029: DOUBLE
52030: LD_INT 1
52032: DEC
52033: ST_TO_ADDR
52034: LD_VAR 0 3
52038: PUSH
52039: FOR_TO
52040: IFFALSE 52143
// begin hc_class = class_apeman ;
52042: LD_ADDR_OWVAR 28
52046: PUSH
52047: LD_INT 12
52049: ST_TO_ADDR
// hc_gallery =  ;
52050: LD_ADDR_OWVAR 33
52054: PUSH
52055: LD_STRING 
52057: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
52058: LD_ADDR_OWVAR 35
52062: PUSH
52063: LD_INT 2
52065: NEG
52066: PPUSH
52067: LD_INT 2
52069: PPUSH
52070: CALL_OW 12
52074: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
52075: LD_ADDR_OWVAR 31
52079: PUSH
52080: LD_INT 1
52082: PPUSH
52083: LD_INT 3
52085: PPUSH
52086: CALL_OW 12
52090: PUSH
52091: LD_INT 1
52093: PPUSH
52094: LD_INT 3
52096: PPUSH
52097: CALL_OW 12
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: LD_INT 0
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: ST_TO_ADDR
// animal := CreateHuman ;
52114: LD_ADDR_VAR 0 12
52118: PUSH
52119: CALL_OW 44
52123: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52124: LD_VAR 0 12
52128: PPUSH
52129: LD_VAR 0 8
52133: PPUSH
52134: LD_INT 0
52136: PPUSH
52137: CALL 53930 0 3
// end ;
52141: GO 52039
52143: POP
52144: POP
// if enchidnas then
52145: LD_VAR 0 4
52149: IFFALSE 52216
// for i = 1 to enchidnas do
52151: LD_ADDR_VAR 0 11
52155: PUSH
52156: DOUBLE
52157: LD_INT 1
52159: DEC
52160: ST_TO_ADDR
52161: LD_VAR 0 4
52165: PUSH
52166: FOR_TO
52167: IFFALSE 52214
// begin hc_class = 13 ;
52169: LD_ADDR_OWVAR 28
52173: PUSH
52174: LD_INT 13
52176: ST_TO_ADDR
// hc_gallery =  ;
52177: LD_ADDR_OWVAR 33
52181: PUSH
52182: LD_STRING 
52184: ST_TO_ADDR
// animal := CreateHuman ;
52185: LD_ADDR_VAR 0 12
52189: PUSH
52190: CALL_OW 44
52194: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52195: LD_VAR 0 12
52199: PPUSH
52200: LD_VAR 0 8
52204: PPUSH
52205: LD_INT 0
52207: PPUSH
52208: CALL 53930 0 3
// end ;
52212: GO 52166
52214: POP
52215: POP
// if fishes then
52216: LD_VAR 0 7
52220: IFFALSE 52287
// for i = 1 to fishes do
52222: LD_ADDR_VAR 0 11
52226: PUSH
52227: DOUBLE
52228: LD_INT 1
52230: DEC
52231: ST_TO_ADDR
52232: LD_VAR 0 7
52236: PUSH
52237: FOR_TO
52238: IFFALSE 52285
// begin hc_class = 20 ;
52240: LD_ADDR_OWVAR 28
52244: PUSH
52245: LD_INT 20
52247: ST_TO_ADDR
// hc_gallery =  ;
52248: LD_ADDR_OWVAR 33
52252: PUSH
52253: LD_STRING 
52255: ST_TO_ADDR
// animal := CreateHuman ;
52256: LD_ADDR_VAR 0 12
52260: PUSH
52261: CALL_OW 44
52265: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
52266: LD_VAR 0 12
52270: PPUSH
52271: LD_VAR 0 9
52275: PPUSH
52276: LD_INT 0
52278: PPUSH
52279: CALL 53930 0 3
// end ;
52283: GO 52237
52285: POP
52286: POP
// end ;
52287: LD_VAR 0 10
52291: RET
// export function WantHeal ( sci , unit ) ; begin
52292: LD_INT 0
52294: PPUSH
// if GetTaskList ( sci ) > 0 then
52295: LD_VAR 0 1
52299: PPUSH
52300: CALL_OW 437
52304: PUSH
52305: LD_INT 0
52307: GREATER
52308: IFFALSE 52380
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52310: LD_VAR 0 1
52314: PPUSH
52315: CALL_OW 437
52319: PUSH
52320: LD_INT 1
52322: ARRAY
52323: PUSH
52324: LD_INT 1
52326: ARRAY
52327: PUSH
52328: LD_STRING l
52330: EQUAL
52331: IFFALSE 52358
52333: PUSH
52334: LD_VAR 0 1
52338: PPUSH
52339: CALL_OW 437
52343: PUSH
52344: LD_INT 1
52346: ARRAY
52347: PUSH
52348: LD_INT 4
52350: ARRAY
52351: PUSH
52352: LD_VAR 0 2
52356: EQUAL
52357: AND
52358: IFFALSE 52370
// result := true else
52360: LD_ADDR_VAR 0 3
52364: PUSH
52365: LD_INT 1
52367: ST_TO_ADDR
52368: GO 52378
// result := false ;
52370: LD_ADDR_VAR 0 3
52374: PUSH
52375: LD_INT 0
52377: ST_TO_ADDR
// end else
52378: GO 52388
// result := false ;
52380: LD_ADDR_VAR 0 3
52384: PUSH
52385: LD_INT 0
52387: ST_TO_ADDR
// end ;
52388: LD_VAR 0 3
52392: RET
// export function HealTarget ( sci ) ; begin
52393: LD_INT 0
52395: PPUSH
// if not sci then
52396: LD_VAR 0 1
52400: NOT
52401: IFFALSE 52405
// exit ;
52403: GO 52470
// result := 0 ;
52405: LD_ADDR_VAR 0 2
52409: PUSH
52410: LD_INT 0
52412: ST_TO_ADDR
// if GetTaskList ( sci ) then
52413: LD_VAR 0 1
52417: PPUSH
52418: CALL_OW 437
52422: IFFALSE 52470
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52424: LD_VAR 0 1
52428: PPUSH
52429: CALL_OW 437
52433: PUSH
52434: LD_INT 1
52436: ARRAY
52437: PUSH
52438: LD_INT 1
52440: ARRAY
52441: PUSH
52442: LD_STRING l
52444: EQUAL
52445: IFFALSE 52470
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52447: LD_ADDR_VAR 0 2
52451: PUSH
52452: LD_VAR 0 1
52456: PPUSH
52457: CALL_OW 437
52461: PUSH
52462: LD_INT 1
52464: ARRAY
52465: PUSH
52466: LD_INT 4
52468: ARRAY
52469: ST_TO_ADDR
// end ;
52470: LD_VAR 0 2
52474: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52475: LD_INT 0
52477: PPUSH
52478: PPUSH
52479: PPUSH
52480: PPUSH
// if not base_units then
52481: LD_VAR 0 1
52485: NOT
52486: IFFALSE 52490
// exit ;
52488: GO 52577
// result := false ;
52490: LD_ADDR_VAR 0 2
52494: PUSH
52495: LD_INT 0
52497: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
52498: LD_ADDR_VAR 0 5
52502: PUSH
52503: LD_VAR 0 1
52507: PPUSH
52508: LD_INT 21
52510: PUSH
52511: LD_INT 3
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PPUSH
52518: CALL_OW 72
52522: ST_TO_ADDR
// if not tmp then
52523: LD_VAR 0 5
52527: NOT
52528: IFFALSE 52532
// exit ;
52530: GO 52577
// for i in tmp do
52532: LD_ADDR_VAR 0 3
52536: PUSH
52537: LD_VAR 0 5
52541: PUSH
52542: FOR_IN
52543: IFFALSE 52575
// begin result := EnemyInRange ( i , 22 ) ;
52545: LD_ADDR_VAR 0 2
52549: PUSH
52550: LD_VAR 0 3
52554: PPUSH
52555: LD_INT 22
52557: PPUSH
52558: CALL 49992 0 2
52562: ST_TO_ADDR
// if result then
52563: LD_VAR 0 2
52567: IFFALSE 52573
// exit ;
52569: POP
52570: POP
52571: GO 52577
// end ;
52573: GO 52542
52575: POP
52576: POP
// end ;
52577: LD_VAR 0 2
52581: RET
// export function FilterByTag ( units , tag ) ; begin
52582: LD_INT 0
52584: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
52585: LD_ADDR_VAR 0 3
52589: PUSH
52590: LD_VAR 0 1
52594: PPUSH
52595: LD_INT 120
52597: PUSH
52598: LD_VAR 0 2
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PPUSH
52607: CALL_OW 72
52611: ST_TO_ADDR
// end ;
52612: LD_VAR 0 3
52616: RET
// export function IsDriver ( un ) ; begin
52617: LD_INT 0
52619: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52620: LD_ADDR_VAR 0 2
52624: PUSH
52625: LD_VAR 0 1
52629: PUSH
52630: LD_INT 55
52632: PUSH
52633: EMPTY
52634: LIST
52635: PPUSH
52636: CALL_OW 69
52640: IN
52641: ST_TO_ADDR
// end ;
52642: LD_VAR 0 2
52646: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52647: LD_INT 0
52649: PPUSH
52650: PPUSH
// list := [ ] ;
52651: LD_ADDR_VAR 0 5
52655: PUSH
52656: EMPTY
52657: ST_TO_ADDR
// case d of 0 :
52658: LD_VAR 0 3
52662: PUSH
52663: LD_INT 0
52665: DOUBLE
52666: EQUAL
52667: IFTRUE 52671
52669: GO 52804
52671: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52672: LD_ADDR_VAR 0 5
52676: PUSH
52677: LD_VAR 0 1
52681: PUSH
52682: LD_INT 4
52684: MINUS
52685: PUSH
52686: LD_VAR 0 2
52690: PUSH
52691: LD_INT 4
52693: MINUS
52694: PUSH
52695: LD_INT 2
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: LIST
52702: PUSH
52703: LD_VAR 0 1
52707: PUSH
52708: LD_INT 3
52710: MINUS
52711: PUSH
52712: LD_VAR 0 2
52716: PUSH
52717: LD_INT 1
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: LIST
52724: PUSH
52725: LD_VAR 0 1
52729: PUSH
52730: LD_INT 4
52732: PLUS
52733: PUSH
52734: LD_VAR 0 2
52738: PUSH
52739: LD_INT 4
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: LIST
52746: PUSH
52747: LD_VAR 0 1
52751: PUSH
52752: LD_INT 3
52754: PLUS
52755: PUSH
52756: LD_VAR 0 2
52760: PUSH
52761: LD_INT 3
52763: PLUS
52764: PUSH
52765: LD_INT 5
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: LIST
52772: PUSH
52773: LD_VAR 0 1
52777: PUSH
52778: LD_VAR 0 2
52782: PUSH
52783: LD_INT 4
52785: PLUS
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: LIST
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: ST_TO_ADDR
// end ; 1 :
52802: GO 53502
52804: LD_INT 1
52806: DOUBLE
52807: EQUAL
52808: IFTRUE 52812
52810: GO 52945
52812: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52813: LD_ADDR_VAR 0 5
52817: PUSH
52818: LD_VAR 0 1
52822: PUSH
52823: LD_VAR 0 2
52827: PUSH
52828: LD_INT 4
52830: MINUS
52831: PUSH
52832: LD_INT 3
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: LIST
52839: PUSH
52840: LD_VAR 0 1
52844: PUSH
52845: LD_INT 3
52847: MINUS
52848: PUSH
52849: LD_VAR 0 2
52853: PUSH
52854: LD_INT 3
52856: MINUS
52857: PUSH
52858: LD_INT 2
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: LIST
52865: PUSH
52866: LD_VAR 0 1
52870: PUSH
52871: LD_INT 4
52873: MINUS
52874: PUSH
52875: LD_VAR 0 2
52879: PUSH
52880: LD_INT 1
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: LIST
52887: PUSH
52888: LD_VAR 0 1
52892: PUSH
52893: LD_VAR 0 2
52897: PUSH
52898: LD_INT 3
52900: PLUS
52901: PUSH
52902: LD_INT 0
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: LIST
52909: PUSH
52910: LD_VAR 0 1
52914: PUSH
52915: LD_INT 4
52917: PLUS
52918: PUSH
52919: LD_VAR 0 2
52923: PUSH
52924: LD_INT 4
52926: PLUS
52927: PUSH
52928: LD_INT 5
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: LIST
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: ST_TO_ADDR
// end ; 2 :
52943: GO 53502
52945: LD_INT 2
52947: DOUBLE
52948: EQUAL
52949: IFTRUE 52953
52951: GO 53082
52953: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52954: LD_ADDR_VAR 0 5
52958: PUSH
52959: LD_VAR 0 1
52963: PUSH
52964: LD_VAR 0 2
52968: PUSH
52969: LD_INT 3
52971: MINUS
52972: PUSH
52973: LD_INT 3
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: LIST
52980: PUSH
52981: LD_VAR 0 1
52985: PUSH
52986: LD_INT 4
52988: PLUS
52989: PUSH
52990: LD_VAR 0 2
52994: PUSH
52995: LD_INT 4
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: LIST
53002: PUSH
53003: LD_VAR 0 1
53007: PUSH
53008: LD_VAR 0 2
53012: PUSH
53013: LD_INT 4
53015: PLUS
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: LIST
53024: PUSH
53025: LD_VAR 0 1
53029: PUSH
53030: LD_INT 3
53032: MINUS
53033: PUSH
53034: LD_VAR 0 2
53038: PUSH
53039: LD_INT 1
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: LIST
53046: PUSH
53047: LD_VAR 0 1
53051: PUSH
53052: LD_INT 4
53054: MINUS
53055: PUSH
53056: LD_VAR 0 2
53060: PUSH
53061: LD_INT 4
53063: MINUS
53064: PUSH
53065: LD_INT 2
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: LIST
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: ST_TO_ADDR
// end ; 3 :
53080: GO 53502
53082: LD_INT 3
53084: DOUBLE
53085: EQUAL
53086: IFTRUE 53090
53088: GO 53223
53090: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
53091: LD_ADDR_VAR 0 5
53095: PUSH
53096: LD_VAR 0 1
53100: PUSH
53101: LD_INT 3
53103: PLUS
53104: PUSH
53105: LD_VAR 0 2
53109: PUSH
53110: LD_INT 4
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: LIST
53117: PUSH
53118: LD_VAR 0 1
53122: PUSH
53123: LD_INT 4
53125: PLUS
53126: PUSH
53127: LD_VAR 0 2
53131: PUSH
53132: LD_INT 4
53134: PLUS
53135: PUSH
53136: LD_INT 5
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: LIST
53143: PUSH
53144: LD_VAR 0 1
53148: PUSH
53149: LD_INT 4
53151: MINUS
53152: PUSH
53153: LD_VAR 0 2
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: LIST
53165: PUSH
53166: LD_VAR 0 1
53170: PUSH
53171: LD_VAR 0 2
53175: PUSH
53176: LD_INT 4
53178: MINUS
53179: PUSH
53180: LD_INT 3
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: LIST
53187: PUSH
53188: LD_VAR 0 1
53192: PUSH
53193: LD_INT 3
53195: MINUS
53196: PUSH
53197: LD_VAR 0 2
53201: PUSH
53202: LD_INT 3
53204: MINUS
53205: PUSH
53206: LD_INT 2
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: LIST
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: ST_TO_ADDR
// end ; 4 :
53221: GO 53502
53223: LD_INT 4
53225: DOUBLE
53226: EQUAL
53227: IFTRUE 53231
53229: GO 53364
53231: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
53232: LD_ADDR_VAR 0 5
53236: PUSH
53237: LD_VAR 0 1
53241: PUSH
53242: LD_VAR 0 2
53246: PUSH
53247: LD_INT 4
53249: PLUS
53250: PUSH
53251: LD_INT 0
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: LIST
53258: PUSH
53259: LD_VAR 0 1
53263: PUSH
53264: LD_INT 3
53266: PLUS
53267: PUSH
53268: LD_VAR 0 2
53272: PUSH
53273: LD_INT 3
53275: PLUS
53276: PUSH
53277: LD_INT 5
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: LIST
53284: PUSH
53285: LD_VAR 0 1
53289: PUSH
53290: LD_INT 4
53292: PLUS
53293: PUSH
53294: LD_VAR 0 2
53298: PUSH
53299: LD_INT 4
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: LIST
53306: PUSH
53307: LD_VAR 0 1
53311: PUSH
53312: LD_VAR 0 2
53316: PUSH
53317: LD_INT 3
53319: MINUS
53320: PUSH
53321: LD_INT 3
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: LIST
53328: PUSH
53329: LD_VAR 0 1
53333: PUSH
53334: LD_INT 4
53336: MINUS
53337: PUSH
53338: LD_VAR 0 2
53342: PUSH
53343: LD_INT 4
53345: MINUS
53346: PUSH
53347: LD_INT 2
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: LIST
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: ST_TO_ADDR
// end ; 5 :
53362: GO 53502
53364: LD_INT 5
53366: DOUBLE
53367: EQUAL
53368: IFTRUE 53372
53370: GO 53501
53372: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53373: LD_ADDR_VAR 0 5
53377: PUSH
53378: LD_VAR 0 1
53382: PUSH
53383: LD_INT 4
53385: MINUS
53386: PUSH
53387: LD_VAR 0 2
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: LIST
53399: PUSH
53400: LD_VAR 0 1
53404: PUSH
53405: LD_VAR 0 2
53409: PUSH
53410: LD_INT 4
53412: MINUS
53413: PUSH
53414: LD_INT 3
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: LIST
53421: PUSH
53422: LD_VAR 0 1
53426: PUSH
53427: LD_INT 4
53429: PLUS
53430: PUSH
53431: LD_VAR 0 2
53435: PUSH
53436: LD_INT 4
53438: PLUS
53439: PUSH
53440: LD_INT 5
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: LIST
53447: PUSH
53448: LD_VAR 0 1
53452: PUSH
53453: LD_INT 3
53455: PLUS
53456: PUSH
53457: LD_VAR 0 2
53461: PUSH
53462: LD_INT 4
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: LIST
53469: PUSH
53470: LD_VAR 0 1
53474: PUSH
53475: LD_VAR 0 2
53479: PUSH
53480: LD_INT 3
53482: PLUS
53483: PUSH
53484: LD_INT 0
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: LIST
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: ST_TO_ADDR
// end ; end ;
53499: GO 53502
53501: POP
// result := list ;
53502: LD_ADDR_VAR 0 4
53506: PUSH
53507: LD_VAR 0 5
53511: ST_TO_ADDR
// end ;
53512: LD_VAR 0 4
53516: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
53517: LD_INT 0
53519: PPUSH
53520: PPUSH
53521: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
53522: LD_VAR 0 1
53526: NOT
53527: IFTRUE 53555
53529: PUSH
53530: LD_VAR 0 2
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: LD_INT 2
53540: PUSH
53541: LD_INT 3
53543: PUSH
53544: LD_INT 4
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: IN
53553: NOT
53554: OR
53555: IFFALSE 53559
// exit ;
53557: GO 53642
// tmp := [ ] ;
53559: LD_ADDR_VAR 0 5
53563: PUSH
53564: EMPTY
53565: ST_TO_ADDR
// for i in units do
53566: LD_ADDR_VAR 0 4
53570: PUSH
53571: LD_VAR 0 1
53575: PUSH
53576: FOR_IN
53577: IFFALSE 53611
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
53579: LD_ADDR_VAR 0 5
53583: PUSH
53584: LD_VAR 0 5
53588: PPUSH
53589: LD_VAR 0 4
53593: PPUSH
53594: LD_VAR 0 2
53598: PPUSH
53599: CALL_OW 259
53603: PPUSH
53604: CALL 55037 0 2
53608: ST_TO_ADDR
53609: GO 53576
53611: POP
53612: POP
// if not tmp then
53613: LD_VAR 0 5
53617: NOT
53618: IFFALSE 53622
// exit ;
53620: GO 53642
// result := SortListByListDesc ( units , tmp ) ;
53622: LD_ADDR_VAR 0 3
53626: PUSH
53627: LD_VAR 0 1
53631: PPUSH
53632: LD_VAR 0 5
53636: PPUSH
53637: CALL_OW 77
53641: ST_TO_ADDR
// end ;
53642: LD_VAR 0 3
53646: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53647: LD_INT 0
53649: PPUSH
53650: PPUSH
53651: PPUSH
// result := false ;
53652: LD_ADDR_VAR 0 3
53656: PUSH
53657: LD_INT 0
53659: ST_TO_ADDR
// if not building then
53660: LD_VAR 0 2
53664: NOT
53665: IFFALSE 53669
// exit ;
53667: GO 53813
// x := GetX ( building ) ;
53669: LD_ADDR_VAR 0 4
53673: PUSH
53674: LD_VAR 0 2
53678: PPUSH
53679: CALL_OW 250
53683: ST_TO_ADDR
// y := GetY ( building ) ;
53684: LD_ADDR_VAR 0 5
53688: PUSH
53689: LD_VAR 0 2
53693: PPUSH
53694: CALL_OW 251
53698: ST_TO_ADDR
// if not x or not y then
53699: LD_VAR 0 4
53703: NOT
53704: IFTRUE 53713
53706: PUSH
53707: LD_VAR 0 5
53711: NOT
53712: OR
53713: IFFALSE 53717
// exit ;
53715: GO 53813
// if GetTaskList ( unit ) then
53717: LD_VAR 0 1
53721: PPUSH
53722: CALL_OW 437
53726: IFFALSE 53813
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53728: LD_STRING e
53730: PUSH
53731: LD_VAR 0 1
53735: PPUSH
53736: CALL_OW 437
53740: PUSH
53741: LD_INT 1
53743: ARRAY
53744: PUSH
53745: LD_INT 1
53747: ARRAY
53748: EQUAL
53749: IFFALSE 53776
53751: PUSH
53752: LD_VAR 0 4
53756: PUSH
53757: LD_VAR 0 1
53761: PPUSH
53762: CALL_OW 437
53766: PUSH
53767: LD_INT 1
53769: ARRAY
53770: PUSH
53771: LD_INT 2
53773: ARRAY
53774: EQUAL
53775: AND
53776: IFFALSE 53803
53778: PUSH
53779: LD_VAR 0 5
53783: PUSH
53784: LD_VAR 0 1
53788: PPUSH
53789: CALL_OW 437
53793: PUSH
53794: LD_INT 1
53796: ARRAY
53797: PUSH
53798: LD_INT 3
53800: ARRAY
53801: EQUAL
53802: AND
53803: IFFALSE 53813
// result := true end ;
53805: LD_ADDR_VAR 0 3
53809: PUSH
53810: LD_INT 1
53812: ST_TO_ADDR
// end ;
53813: LD_VAR 0 3
53817: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53818: LD_INT 0
53820: PPUSH
// result := false ;
53821: LD_ADDR_VAR 0 4
53825: PUSH
53826: LD_INT 0
53828: ST_TO_ADDR
// if GetTaskList ( unit ) then
53829: LD_VAR 0 1
53833: PPUSH
53834: CALL_OW 437
53838: IFFALSE 53925
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53840: LD_STRING M
53842: PUSH
53843: LD_VAR 0 1
53847: PPUSH
53848: CALL_OW 437
53852: PUSH
53853: LD_INT 1
53855: ARRAY
53856: PUSH
53857: LD_INT 1
53859: ARRAY
53860: EQUAL
53861: IFFALSE 53888
53863: PUSH
53864: LD_VAR 0 2
53868: PUSH
53869: LD_VAR 0 1
53873: PPUSH
53874: CALL_OW 437
53878: PUSH
53879: LD_INT 1
53881: ARRAY
53882: PUSH
53883: LD_INT 2
53885: ARRAY
53886: EQUAL
53887: AND
53888: IFFALSE 53915
53890: PUSH
53891: LD_VAR 0 3
53895: PUSH
53896: LD_VAR 0 1
53900: PPUSH
53901: CALL_OW 437
53905: PUSH
53906: LD_INT 1
53908: ARRAY
53909: PUSH
53910: LD_INT 3
53912: ARRAY
53913: EQUAL
53914: AND
53915: IFFALSE 53925
// result := true ;
53917: LD_ADDR_VAR 0 4
53921: PUSH
53922: LD_INT 1
53924: ST_TO_ADDR
// end ; end ;
53925: LD_VAR 0 4
53929: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53930: LD_INT 0
53932: PPUSH
53933: PPUSH
53934: PPUSH
53935: PPUSH
// if not unit or not area then
53936: LD_VAR 0 1
53940: NOT
53941: IFTRUE 53950
53943: PUSH
53944: LD_VAR 0 2
53948: NOT
53949: OR
53950: IFFALSE 53954
// exit ;
53952: GO 54130
// tmp := AreaToList ( area , i ) ;
53954: LD_ADDR_VAR 0 6
53958: PUSH
53959: LD_VAR 0 2
53963: PPUSH
53964: LD_VAR 0 5
53968: PPUSH
53969: CALL_OW 517
53973: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53974: LD_ADDR_VAR 0 5
53978: PUSH
53979: DOUBLE
53980: LD_INT 1
53982: DEC
53983: ST_TO_ADDR
53984: LD_VAR 0 6
53988: PUSH
53989: LD_INT 1
53991: ARRAY
53992: PUSH
53993: FOR_TO
53994: IFFALSE 54128
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53996: LD_ADDR_VAR 0 7
54000: PUSH
54001: LD_VAR 0 6
54005: PUSH
54006: LD_INT 1
54008: ARRAY
54009: PUSH
54010: LD_VAR 0 5
54014: ARRAY
54015: PUSH
54016: LD_VAR 0 6
54020: PUSH
54021: LD_INT 2
54023: ARRAY
54024: PUSH
54025: LD_VAR 0 5
54029: ARRAY
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
54035: LD_INT 92
54037: PUSH
54038: LD_VAR 0 7
54042: PUSH
54043: LD_INT 1
54045: ARRAY
54046: PUSH
54047: LD_VAR 0 7
54051: PUSH
54052: LD_INT 2
54054: ARRAY
54055: PUSH
54056: LD_INT 2
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: PPUSH
54065: CALL_OW 69
54069: PUSH
54070: LD_INT 0
54072: EQUAL
54073: IFFALSE 54126
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54075: LD_VAR 0 1
54079: PPUSH
54080: LD_VAR 0 7
54084: PUSH
54085: LD_INT 1
54087: ARRAY
54088: PPUSH
54089: LD_VAR 0 7
54093: PUSH
54094: LD_INT 2
54096: ARRAY
54097: PPUSH
54098: LD_VAR 0 3
54102: PPUSH
54103: CALL_OW 48
// result := IsPlaced ( unit ) ;
54107: LD_ADDR_VAR 0 4
54111: PUSH
54112: LD_VAR 0 1
54116: PPUSH
54117: CALL_OW 305
54121: ST_TO_ADDR
// exit ;
54122: POP
54123: POP
54124: GO 54130
// end ; end ;
54126: GO 53993
54128: POP
54129: POP
// end ;
54130: LD_VAR 0 4
54134: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54135: LD_INT 0
54137: PPUSH
54138: PPUSH
54139: PPUSH
// if not side or side > 8 then
54140: LD_VAR 0 1
54144: NOT
54145: IFTRUE 54157
54147: PUSH
54148: LD_VAR 0 1
54152: PUSH
54153: LD_INT 8
54155: GREATER
54156: OR
54157: IFFALSE 54161
// exit ;
54159: GO 54348
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
54161: LD_ADDR_VAR 0 4
54165: PUSH
54166: LD_INT 22
54168: PUSH
54169: LD_VAR 0 1
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 21
54180: PUSH
54181: LD_INT 3
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PPUSH
54192: CALL_OW 69
54196: ST_TO_ADDR
// if not tmp then
54197: LD_VAR 0 4
54201: NOT
54202: IFFALSE 54206
// exit ;
54204: GO 54348
// enable_addtolog := true ;
54206: LD_ADDR_OWVAR 81
54210: PUSH
54211: LD_INT 1
54213: ST_TO_ADDR
// AddToLog ( [ ) ;
54214: LD_STRING [
54216: PPUSH
54217: CALL_OW 561
// for i in tmp do
54221: LD_ADDR_VAR 0 3
54225: PUSH
54226: LD_VAR 0 4
54230: PUSH
54231: FOR_IN
54232: IFFALSE 54339
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
54234: LD_STRING [
54236: PUSH
54237: LD_VAR 0 3
54241: PPUSH
54242: CALL_OW 266
54246: STR
54247: PUSH
54248: LD_STRING , 
54250: STR
54251: PUSH
54252: LD_VAR 0 3
54256: PPUSH
54257: CALL_OW 250
54261: STR
54262: PUSH
54263: LD_STRING , 
54265: STR
54266: PUSH
54267: LD_VAR 0 3
54271: PPUSH
54272: CALL_OW 251
54276: STR
54277: PUSH
54278: LD_STRING , 
54280: STR
54281: PUSH
54282: LD_VAR 0 3
54286: PPUSH
54287: CALL_OW 254
54291: STR
54292: PUSH
54293: LD_STRING , 
54295: STR
54296: PUSH
54297: LD_VAR 0 3
54301: PPUSH
54302: LD_INT 1
54304: PPUSH
54305: CALL_OW 268
54309: STR
54310: PUSH
54311: LD_STRING , 
54313: STR
54314: PUSH
54315: LD_VAR 0 3
54319: PPUSH
54320: LD_INT 2
54322: PPUSH
54323: CALL_OW 268
54327: STR
54328: PUSH
54329: LD_STRING ],
54331: STR
54332: PPUSH
54333: CALL_OW 561
// end ;
54337: GO 54231
54339: POP
54340: POP
// AddToLog ( ]; ) ;
54341: LD_STRING ];
54343: PPUSH
54344: CALL_OW 561
// end ;
54348: LD_VAR 0 2
54352: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54353: LD_INT 0
54355: PPUSH
54356: PPUSH
54357: PPUSH
54358: PPUSH
54359: PPUSH
// if not area or not rate or not max then
54360: LD_VAR 0 1
54364: NOT
54365: IFTRUE 54374
54367: PUSH
54368: LD_VAR 0 2
54372: NOT
54373: OR
54374: IFTRUE 54383
54376: PUSH
54377: LD_VAR 0 4
54381: NOT
54382: OR
54383: IFFALSE 54387
// exit ;
54385: GO 54576
// while 1 do
54387: LD_INT 1
54389: IFFALSE 54576
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54391: LD_ADDR_VAR 0 9
54395: PUSH
54396: LD_VAR 0 1
54400: PPUSH
54401: LD_INT 1
54403: PPUSH
54404: CALL_OW 287
54408: PUSH
54409: LD_INT 10
54411: MUL
54412: ST_TO_ADDR
// r := rate / 10 ;
54413: LD_ADDR_VAR 0 7
54417: PUSH
54418: LD_VAR 0 2
54422: PUSH
54423: LD_INT 10
54425: DIVREAL
54426: ST_TO_ADDR
// time := 1 1$00 ;
54427: LD_ADDR_VAR 0 8
54431: PUSH
54432: LD_INT 2100
54434: ST_TO_ADDR
// if amount < min then
54435: LD_VAR 0 9
54439: PUSH
54440: LD_VAR 0 3
54444: LESS
54445: IFFALSE 54463
// r := r * 2 else
54447: LD_ADDR_VAR 0 7
54451: PUSH
54452: LD_VAR 0 7
54456: PUSH
54457: LD_INT 2
54459: MUL
54460: ST_TO_ADDR
54461: GO 54489
// if amount > max then
54463: LD_VAR 0 9
54467: PUSH
54468: LD_VAR 0 4
54472: GREATER
54473: IFFALSE 54489
// r := r / 2 ;
54475: LD_ADDR_VAR 0 7
54479: PUSH
54480: LD_VAR 0 7
54484: PUSH
54485: LD_INT 2
54487: DIVREAL
54488: ST_TO_ADDR
// time := time / r ;
54489: LD_ADDR_VAR 0 8
54493: PUSH
54494: LD_VAR 0 8
54498: PUSH
54499: LD_VAR 0 7
54503: DIVREAL
54504: ST_TO_ADDR
// if time < 0 then
54505: LD_VAR 0 8
54509: PUSH
54510: LD_INT 0
54512: LESS
54513: IFFALSE 54530
// time := time * - 1 ;
54515: LD_ADDR_VAR 0 8
54519: PUSH
54520: LD_VAR 0 8
54524: PUSH
54525: LD_INT 1
54527: NEG
54528: MUL
54529: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
54530: LD_VAR 0 8
54534: PUSH
54535: LD_INT 35
54537: PPUSH
54538: LD_INT 875
54540: PPUSH
54541: CALL_OW 12
54545: PLUS
54546: PPUSH
54547: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
54551: LD_INT 1
54553: PPUSH
54554: LD_INT 5
54556: PPUSH
54557: CALL_OW 12
54561: PPUSH
54562: LD_VAR 0 1
54566: PPUSH
54567: LD_INT 1
54569: PPUSH
54570: CALL_OW 55
// end ;
54574: GO 54387
// end ;
54576: LD_VAR 0 5
54580: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
54581: LD_INT 0
54583: PPUSH
54584: PPUSH
54585: PPUSH
54586: PPUSH
54587: PPUSH
54588: PPUSH
54589: PPUSH
54590: PPUSH
// if not turrets or not factories then
54591: LD_VAR 0 1
54595: NOT
54596: IFTRUE 54605
54598: PUSH
54599: LD_VAR 0 2
54603: NOT
54604: OR
54605: IFFALSE 54609
// exit ;
54607: GO 54916
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54609: LD_ADDR_VAR 0 10
54613: PUSH
54614: LD_INT 5
54616: PUSH
54617: LD_INT 6
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 2
54626: PUSH
54627: LD_INT 4
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 3
54636: PUSH
54637: LD_INT 5
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 24
54651: PUSH
54652: LD_INT 25
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 23
54661: PUSH
54662: LD_INT 27
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 42
54675: PUSH
54676: LD_INT 43
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 44
54685: PUSH
54686: LD_INT 46
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 45
54695: PUSH
54696: LD_INT 47
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: LIST
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: LIST
54712: ST_TO_ADDR
// result := [ ] ;
54713: LD_ADDR_VAR 0 3
54717: PUSH
54718: EMPTY
54719: ST_TO_ADDR
// for i in turrets do
54720: LD_ADDR_VAR 0 4
54724: PUSH
54725: LD_VAR 0 1
54729: PUSH
54730: FOR_IN
54731: IFFALSE 54914
// begin nat := GetNation ( i ) ;
54733: LD_ADDR_VAR 0 7
54737: PUSH
54738: LD_VAR 0 4
54742: PPUSH
54743: CALL_OW 248
54747: ST_TO_ADDR
// weapon := 0 ;
54748: LD_ADDR_VAR 0 8
54752: PUSH
54753: LD_INT 0
54755: ST_TO_ADDR
// if not nat then
54756: LD_VAR 0 7
54760: NOT
54761: IFFALSE 54765
// continue ;
54763: GO 54730
// for j in list [ nat ] do
54765: LD_ADDR_VAR 0 5
54769: PUSH
54770: LD_VAR 0 10
54774: PUSH
54775: LD_VAR 0 7
54779: ARRAY
54780: PUSH
54781: FOR_IN
54782: IFFALSE 54823
// if GetBWeapon ( i ) = j [ 1 ] then
54784: LD_VAR 0 4
54788: PPUSH
54789: CALL_OW 269
54793: PUSH
54794: LD_VAR 0 5
54798: PUSH
54799: LD_INT 1
54801: ARRAY
54802: EQUAL
54803: IFFALSE 54821
// begin weapon := j [ 2 ] ;
54805: LD_ADDR_VAR 0 8
54809: PUSH
54810: LD_VAR 0 5
54814: PUSH
54815: LD_INT 2
54817: ARRAY
54818: ST_TO_ADDR
// break ;
54819: GO 54823
// end ;
54821: GO 54781
54823: POP
54824: POP
// if not weapon then
54825: LD_VAR 0 8
54829: NOT
54830: IFFALSE 54834
// continue ;
54832: GO 54730
// for k in factories do
54834: LD_ADDR_VAR 0 6
54838: PUSH
54839: LD_VAR 0 2
54843: PUSH
54844: FOR_IN
54845: IFFALSE 54910
// begin weapons := AvailableWeaponList ( k ) ;
54847: LD_ADDR_VAR 0 9
54851: PUSH
54852: LD_VAR 0 6
54856: PPUSH
54857: CALL_OW 478
54861: ST_TO_ADDR
// if not weapons then
54862: LD_VAR 0 9
54866: NOT
54867: IFFALSE 54871
// continue ;
54869: GO 54844
// if weapon in weapons then
54871: LD_VAR 0 8
54875: PUSH
54876: LD_VAR 0 9
54880: IN
54881: IFFALSE 54908
// begin result := [ i , weapon ] ;
54883: LD_ADDR_VAR 0 3
54887: PUSH
54888: LD_VAR 0 4
54892: PUSH
54893: LD_VAR 0 8
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: ST_TO_ADDR
// exit ;
54902: POP
54903: POP
54904: POP
54905: POP
54906: GO 54916
// end ; end ;
54908: GO 54844
54910: POP
54911: POP
// end ;
54912: GO 54730
54914: POP
54915: POP
// end ;
54916: LD_VAR 0 3
54920: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54921: LD_INT 0
54923: PPUSH
// if not side or side > 8 then
54924: LD_VAR 0 3
54928: NOT
54929: IFTRUE 54941
54931: PUSH
54932: LD_VAR 0 3
54936: PUSH
54937: LD_INT 8
54939: GREATER
54940: OR
54941: IFFALSE 54945
// exit ;
54943: GO 55004
// if not range then
54945: LD_VAR 0 4
54949: NOT
54950: IFFALSE 54961
// range := - 12 ;
54952: LD_ADDR_VAR 0 4
54956: PUSH
54957: LD_INT 12
54959: NEG
54960: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54961: LD_VAR 0 1
54965: PPUSH
54966: LD_VAR 0 2
54970: PPUSH
54971: LD_VAR 0 3
54975: PPUSH
54976: LD_VAR 0 4
54980: PPUSH
54981: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54985: LD_VAR 0 1
54989: PPUSH
54990: LD_VAR 0 2
54994: PPUSH
54995: LD_VAR 0 3
54999: PPUSH
55000: CALL_OW 331
// end ;
55004: LD_VAR 0 5
55008: RET
// export function Video ( mode ) ; begin
55009: LD_INT 0
55011: PPUSH
// ingame_video = mode ;
55012: LD_ADDR_OWVAR 52
55016: PUSH
55017: LD_VAR 0 1
55021: ST_TO_ADDR
// interface_hidden = mode ;
55022: LD_ADDR_OWVAR 54
55026: PUSH
55027: LD_VAR 0 1
55031: ST_TO_ADDR
// end ;
55032: LD_VAR 0 2
55036: RET
// export function Join ( array , element ) ; begin
55037: LD_INT 0
55039: PPUSH
// result := Replace ( array , array + 1 , element ) ;
55040: LD_ADDR_VAR 0 3
55044: PUSH
55045: LD_VAR 0 1
55049: PPUSH
55050: LD_VAR 0 1
55054: PUSH
55055: LD_INT 1
55057: PLUS
55058: PPUSH
55059: LD_VAR 0 2
55063: PPUSH
55064: CALL_OW 1
55068: ST_TO_ADDR
// end ;
55069: LD_VAR 0 3
55073: RET
// export function JoinUnion ( array , element ) ; begin
55074: LD_INT 0
55076: PPUSH
// result := array union element ;
55077: LD_ADDR_VAR 0 3
55081: PUSH
55082: LD_VAR 0 1
55086: PUSH
55087: LD_VAR 0 2
55091: UNION
55092: ST_TO_ADDR
// end ;
55093: LD_VAR 0 3
55097: RET
// export function GetBehemoths ( side ) ; begin
55098: LD_INT 0
55100: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
55101: LD_ADDR_VAR 0 2
55105: PUSH
55106: LD_INT 22
55108: PUSH
55109: LD_VAR 0 1
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 31
55120: PUSH
55121: LD_INT 25
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PPUSH
55132: CALL_OW 69
55136: ST_TO_ADDR
// end ;
55137: LD_VAR 0 2
55141: RET
// export function Shuffle ( array ) ; var i , index ; begin
55142: LD_INT 0
55144: PPUSH
55145: PPUSH
55146: PPUSH
// result := [ ] ;
55147: LD_ADDR_VAR 0 2
55151: PUSH
55152: EMPTY
55153: ST_TO_ADDR
// if not array then
55154: LD_VAR 0 1
55158: NOT
55159: IFFALSE 55163
// exit ;
55161: GO 55262
// Randomize ;
55163: CALL_OW 10
// for i = array downto 1 do
55167: LD_ADDR_VAR 0 3
55171: PUSH
55172: DOUBLE
55173: LD_VAR 0 1
55177: INC
55178: ST_TO_ADDR
55179: LD_INT 1
55181: PUSH
55182: FOR_DOWNTO
55183: IFFALSE 55260
// begin index := rand ( 1 , array ) ;
55185: LD_ADDR_VAR 0 4
55189: PUSH
55190: LD_INT 1
55192: PPUSH
55193: LD_VAR 0 1
55197: PPUSH
55198: CALL_OW 12
55202: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
55203: LD_ADDR_VAR 0 2
55207: PUSH
55208: LD_VAR 0 2
55212: PPUSH
55213: LD_VAR 0 2
55217: PUSH
55218: LD_INT 1
55220: PLUS
55221: PPUSH
55222: LD_VAR 0 1
55226: PUSH
55227: LD_VAR 0 4
55231: ARRAY
55232: PPUSH
55233: CALL_OW 2
55237: ST_TO_ADDR
// array := Delete ( array , index ) ;
55238: LD_ADDR_VAR 0 1
55242: PUSH
55243: LD_VAR 0 1
55247: PPUSH
55248: LD_VAR 0 4
55252: PPUSH
55253: CALL_OW 3
55257: ST_TO_ADDR
// end ;
55258: GO 55182
55260: POP
55261: POP
// end ;
55262: LD_VAR 0 2
55266: RET
// export function GetBaseMaterials ( base ) ; begin
55267: LD_INT 0
55269: PPUSH
// result := [ 0 , 0 , 0 ] ;
55270: LD_ADDR_VAR 0 2
55274: PUSH
55275: LD_INT 0
55277: PUSH
55278: LD_INT 0
55280: PUSH
55281: LD_INT 0
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: LIST
55288: ST_TO_ADDR
// if not base then
55289: LD_VAR 0 1
55293: NOT
55294: IFFALSE 55298
// exit ;
55296: GO 55347
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55298: LD_ADDR_VAR 0 2
55302: PUSH
55303: LD_VAR 0 1
55307: PPUSH
55308: LD_INT 1
55310: PPUSH
55311: CALL_OW 275
55315: PUSH
55316: LD_VAR 0 1
55320: PPUSH
55321: LD_INT 2
55323: PPUSH
55324: CALL_OW 275
55328: PUSH
55329: LD_VAR 0 1
55333: PPUSH
55334: LD_INT 3
55336: PPUSH
55337: CALL_OW 275
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: LIST
55346: ST_TO_ADDR
// end ;
55347: LD_VAR 0 2
55351: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55352: LD_INT 0
55354: PPUSH
55355: PPUSH
// result := array ;
55356: LD_ADDR_VAR 0 3
55360: PUSH
55361: LD_VAR 0 1
55365: ST_TO_ADDR
// if size >= result then
55366: LD_VAR 0 2
55370: PUSH
55371: LD_VAR 0 3
55375: GREATEREQUAL
55376: IFFALSE 55380
// exit ;
55378: GO 55430
// if size then
55380: LD_VAR 0 2
55384: IFFALSE 55430
// for i := array downto size do
55386: LD_ADDR_VAR 0 4
55390: PUSH
55391: DOUBLE
55392: LD_VAR 0 1
55396: INC
55397: ST_TO_ADDR
55398: LD_VAR 0 2
55402: PUSH
55403: FOR_DOWNTO
55404: IFFALSE 55428
// result := Delete ( result , result ) ;
55406: LD_ADDR_VAR 0 3
55410: PUSH
55411: LD_VAR 0 3
55415: PPUSH
55416: LD_VAR 0 3
55420: PPUSH
55421: CALL_OW 3
55425: ST_TO_ADDR
55426: GO 55403
55428: POP
55429: POP
// end ;
55430: LD_VAR 0 3
55434: RET
// export function ComExit ( unit ) ; var tmp ; begin
55435: LD_INT 0
55437: PPUSH
55438: PPUSH
// if not IsInUnit ( unit ) then
55439: LD_VAR 0 1
55443: PPUSH
55444: CALL_OW 310
55448: NOT
55449: IFFALSE 55453
// exit ;
55451: GO 55513
// tmp := IsInUnit ( unit ) ;
55453: LD_ADDR_VAR 0 3
55457: PUSH
55458: LD_VAR 0 1
55462: PPUSH
55463: CALL_OW 310
55467: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
55468: LD_VAR 0 3
55472: PPUSH
55473: CALL_OW 247
55477: PUSH
55478: LD_INT 2
55480: EQUAL
55481: IFFALSE 55494
// ComExitVehicle ( unit ) else
55483: LD_VAR 0 1
55487: PPUSH
55488: CALL_OW 121
55492: GO 55503
// ComExitBuilding ( unit ) ;
55494: LD_VAR 0 1
55498: PPUSH
55499: CALL_OW 122
// result := tmp ;
55503: LD_ADDR_VAR 0 2
55507: PUSH
55508: LD_VAR 0 3
55512: ST_TO_ADDR
// end ;
55513: LD_VAR 0 2
55517: RET
// export function ComExitAll ( units ) ; var i ; begin
55518: LD_INT 0
55520: PPUSH
55521: PPUSH
// if not units then
55522: LD_VAR 0 1
55526: NOT
55527: IFFALSE 55531
// exit ;
55529: GO 55557
// for i in units do
55531: LD_ADDR_VAR 0 3
55535: PUSH
55536: LD_VAR 0 1
55540: PUSH
55541: FOR_IN
55542: IFFALSE 55555
// ComExit ( i ) ;
55544: LD_VAR 0 3
55548: PPUSH
55549: CALL 55435 0 1
55553: GO 55541
55555: POP
55556: POP
// end ;
55557: LD_VAR 0 2
55561: RET
// export function ResetHc ; begin
55562: LD_INT 0
55564: PPUSH
// InitHc ;
55565: CALL_OW 19
// hc_importance := 0 ;
55569: LD_ADDR_OWVAR 32
55573: PUSH
55574: LD_INT 0
55576: ST_TO_ADDR
// end ;
55577: LD_VAR 0 1
55581: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
55582: LD_INT 0
55584: PPUSH
55585: PPUSH
55586: PPUSH
// _x := ( x1 + x2 ) div 2 ;
55587: LD_ADDR_VAR 0 6
55591: PUSH
55592: LD_VAR 0 1
55596: PUSH
55597: LD_VAR 0 3
55601: PLUS
55602: PUSH
55603: LD_INT 2
55605: DIV
55606: ST_TO_ADDR
// if _x < 0 then
55607: LD_VAR 0 6
55611: PUSH
55612: LD_INT 0
55614: LESS
55615: IFFALSE 55632
// _x := _x * - 1 ;
55617: LD_ADDR_VAR 0 6
55621: PUSH
55622: LD_VAR 0 6
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: MUL
55631: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
55632: LD_ADDR_VAR 0 7
55636: PUSH
55637: LD_VAR 0 2
55641: PUSH
55642: LD_VAR 0 4
55646: PLUS
55647: PUSH
55648: LD_INT 2
55650: DIV
55651: ST_TO_ADDR
// if _y < 0 then
55652: LD_VAR 0 7
55656: PUSH
55657: LD_INT 0
55659: LESS
55660: IFFALSE 55677
// _y := _y * - 1 ;
55662: LD_ADDR_VAR 0 7
55666: PUSH
55667: LD_VAR 0 7
55671: PUSH
55672: LD_INT 1
55674: NEG
55675: MUL
55676: ST_TO_ADDR
// result := [ _x , _y ] ;
55677: LD_ADDR_VAR 0 5
55681: PUSH
55682: LD_VAR 0 6
55686: PUSH
55687: LD_VAR 0 7
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: ST_TO_ADDR
// end ;
55696: LD_VAR 0 5
55700: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
55701: LD_INT 0
55703: PPUSH
55704: PPUSH
55705: PPUSH
55706: PPUSH
// task := GetTaskList ( unit ) ;
55707: LD_ADDR_VAR 0 7
55711: PUSH
55712: LD_VAR 0 1
55716: PPUSH
55717: CALL_OW 437
55721: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55722: LD_VAR 0 7
55726: NOT
55727: IFFALSE 55746
55729: PUSH
55730: LD_VAR 0 1
55734: PPUSH
55735: LD_VAR 0 2
55739: PPUSH
55740: CALL_OW 308
55744: NOT
55745: AND
55746: IFFALSE 55750
// exit ;
55748: GO 55868
// if IsInArea ( unit , area ) then
55750: LD_VAR 0 1
55754: PPUSH
55755: LD_VAR 0 2
55759: PPUSH
55760: CALL_OW 308
55764: IFFALSE 55782
// begin ComMoveToArea ( unit , goAway ) ;
55766: LD_VAR 0 1
55770: PPUSH
55771: LD_VAR 0 3
55775: PPUSH
55776: CALL_OW 113
// exit ;
55780: GO 55868
// end ; if task [ 1 ] [ 1 ] <> M then
55782: LD_VAR 0 7
55786: PUSH
55787: LD_INT 1
55789: ARRAY
55790: PUSH
55791: LD_INT 1
55793: ARRAY
55794: PUSH
55795: LD_STRING M
55797: NONEQUAL
55798: IFFALSE 55802
// exit ;
55800: GO 55868
// x := task [ 1 ] [ 2 ] ;
55802: LD_ADDR_VAR 0 5
55806: PUSH
55807: LD_VAR 0 7
55811: PUSH
55812: LD_INT 1
55814: ARRAY
55815: PUSH
55816: LD_INT 2
55818: ARRAY
55819: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55820: LD_ADDR_VAR 0 6
55824: PUSH
55825: LD_VAR 0 7
55829: PUSH
55830: LD_INT 1
55832: ARRAY
55833: PUSH
55834: LD_INT 3
55836: ARRAY
55837: ST_TO_ADDR
// if InArea ( x , y , area ) then
55838: LD_VAR 0 5
55842: PPUSH
55843: LD_VAR 0 6
55847: PPUSH
55848: LD_VAR 0 2
55852: PPUSH
55853: CALL_OW 309
55857: IFFALSE 55868
// ComStop ( unit ) ;
55859: LD_VAR 0 1
55863: PPUSH
55864: CALL_OW 141
// end ;
55868: LD_VAR 0 4
55872: RET
// export function Abs ( value ) ; begin
55873: LD_INT 0
55875: PPUSH
// result := value ;
55876: LD_ADDR_VAR 0 2
55880: PUSH
55881: LD_VAR 0 1
55885: ST_TO_ADDR
// if value < 0 then
55886: LD_VAR 0 1
55890: PUSH
55891: LD_INT 0
55893: LESS
55894: IFFALSE 55911
// result := value * - 1 ;
55896: LD_ADDR_VAR 0 2
55900: PUSH
55901: LD_VAR 0 1
55905: PUSH
55906: LD_INT 1
55908: NEG
55909: MUL
55910: ST_TO_ADDR
// end ;
55911: LD_VAR 0 2
55915: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55916: LD_INT 0
55918: PPUSH
55919: PPUSH
55920: PPUSH
55921: PPUSH
55922: PPUSH
55923: PPUSH
55924: PPUSH
55925: PPUSH
// if not unit or not building then
55926: LD_VAR 0 1
55930: NOT
55931: IFTRUE 55940
55933: PUSH
55934: LD_VAR 0 2
55938: NOT
55939: OR
55940: IFFALSE 55944
// exit ;
55942: GO 56172
// x := GetX ( building ) ;
55944: LD_ADDR_VAR 0 4
55948: PUSH
55949: LD_VAR 0 2
55953: PPUSH
55954: CALL_OW 250
55958: ST_TO_ADDR
// y := GetY ( building ) ;
55959: LD_ADDR_VAR 0 6
55963: PUSH
55964: LD_VAR 0 2
55968: PPUSH
55969: CALL_OW 251
55973: ST_TO_ADDR
// d := GetDir ( building ) ;
55974: LD_ADDR_VAR 0 8
55978: PUSH
55979: LD_VAR 0 2
55983: PPUSH
55984: CALL_OW 254
55988: ST_TO_ADDR
// r := 4 ;
55989: LD_ADDR_VAR 0 9
55993: PUSH
55994: LD_INT 4
55996: ST_TO_ADDR
// for i := 1 to 5 do
55997: LD_ADDR_VAR 0 10
56001: PUSH
56002: DOUBLE
56003: LD_INT 1
56005: DEC
56006: ST_TO_ADDR
56007: LD_INT 5
56009: PUSH
56010: FOR_TO
56011: IFFALSE 56170
// begin _x := ShiftX ( x , d , r + i ) ;
56013: LD_ADDR_VAR 0 5
56017: PUSH
56018: LD_VAR 0 4
56022: PPUSH
56023: LD_VAR 0 8
56027: PPUSH
56028: LD_VAR 0 9
56032: PUSH
56033: LD_VAR 0 10
56037: PLUS
56038: PPUSH
56039: CALL_OW 272
56043: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
56044: LD_ADDR_VAR 0 7
56048: PUSH
56049: LD_VAR 0 6
56053: PPUSH
56054: LD_VAR 0 8
56058: PPUSH
56059: LD_VAR 0 9
56063: PUSH
56064: LD_VAR 0 10
56068: PLUS
56069: PPUSH
56070: CALL_OW 273
56074: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
56075: LD_VAR 0 5
56079: PPUSH
56080: LD_VAR 0 7
56084: PPUSH
56085: CALL_OW 488
56089: IFFALSE 56124
56091: PUSH
56092: LD_VAR 0 5
56096: PPUSH
56097: LD_VAR 0 7
56101: PPUSH
56102: CALL_OW 428
56106: PPUSH
56107: CALL_OW 247
56111: PUSH
56112: LD_INT 3
56114: PUSH
56115: LD_INT 2
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: IN
56122: NOT
56123: AND
56124: IFFALSE 56168
// begin ComMoveXY ( unit , _x , _y ) ;
56126: LD_VAR 0 1
56130: PPUSH
56131: LD_VAR 0 5
56135: PPUSH
56136: LD_VAR 0 7
56140: PPUSH
56141: CALL_OW 111
// result := [ _x , _y ] ;
56145: LD_ADDR_VAR 0 3
56149: PUSH
56150: LD_VAR 0 5
56154: PUSH
56155: LD_VAR 0 7
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: ST_TO_ADDR
// exit ;
56164: POP
56165: POP
56166: GO 56172
// end ; end ;
56168: GO 56010
56170: POP
56171: POP
// end ;
56172: LD_VAR 0 3
56176: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
56177: LD_INT 0
56179: PPUSH
56180: PPUSH
56181: PPUSH
// result := 0 ;
56182: LD_ADDR_VAR 0 3
56186: PUSH
56187: LD_INT 0
56189: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
56190: LD_VAR 0 1
56194: PUSH
56195: LD_INT 0
56197: LESS
56198: IFTRUE 56210
56200: PUSH
56201: LD_VAR 0 1
56205: PUSH
56206: LD_INT 8
56208: GREATER
56209: OR
56210: IFTRUE 56222
56212: PUSH
56213: LD_VAR 0 2
56217: PUSH
56218: LD_INT 0
56220: LESS
56221: OR
56222: IFTRUE 56234
56224: PUSH
56225: LD_VAR 0 2
56229: PUSH
56230: LD_INT 8
56232: GREATER
56233: OR
56234: IFFALSE 56238
// exit ;
56236: GO 56313
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
56238: LD_ADDR_VAR 0 4
56242: PUSH
56243: LD_INT 22
56245: PUSH
56246: LD_VAR 0 2
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PPUSH
56255: CALL_OW 69
56259: PUSH
56260: FOR_IN
56261: IFFALSE 56311
// begin un := UnitShoot ( i ) ;
56263: LD_ADDR_VAR 0 5
56267: PUSH
56268: LD_VAR 0 4
56272: PPUSH
56273: CALL_OW 504
56277: ST_TO_ADDR
// if GetSide ( un ) = side1 then
56278: LD_VAR 0 5
56282: PPUSH
56283: CALL_OW 255
56287: PUSH
56288: LD_VAR 0 1
56292: EQUAL
56293: IFFALSE 56309
// begin result := un ;
56295: LD_ADDR_VAR 0 3
56299: PUSH
56300: LD_VAR 0 5
56304: ST_TO_ADDR
// exit ;
56305: POP
56306: POP
56307: GO 56313
// end ; end ;
56309: GO 56260
56311: POP
56312: POP
// end ;
56313: LD_VAR 0 3
56317: RET
// export function GetCargoBay ( units ) ; begin
56318: LD_INT 0
56320: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
56321: LD_ADDR_VAR 0 2
56325: PUSH
56326: LD_VAR 0 1
56330: PPUSH
56331: LD_INT 2
56333: PUSH
56334: LD_INT 34
56336: PUSH
56337: LD_INT 12
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 34
56346: PUSH
56347: LD_INT 51
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 34
56356: PUSH
56357: LD_INT 32
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 34
56366: PUSH
56367: LD_INT 89
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: PPUSH
56381: CALL_OW 72
56385: ST_TO_ADDR
// end ;
56386: LD_VAR 0 2
56390: RET
// export function Negate ( value ) ; begin
56391: LD_INT 0
56393: PPUSH
// result := not value ;
56394: LD_ADDR_VAR 0 2
56398: PUSH
56399: LD_VAR 0 1
56403: NOT
56404: ST_TO_ADDR
// end ;
56405: LD_VAR 0 2
56409: RET
// export function Inc ( value ) ; begin
56410: LD_INT 0
56412: PPUSH
// result := value + 1 ;
56413: LD_ADDR_VAR 0 2
56417: PUSH
56418: LD_VAR 0 1
56422: PUSH
56423: LD_INT 1
56425: PLUS
56426: ST_TO_ADDR
// end ;
56427: LD_VAR 0 2
56431: RET
// export function Dec ( value ) ; begin
56432: LD_INT 0
56434: PPUSH
// result := value - 1 ;
56435: LD_ADDR_VAR 0 2
56439: PUSH
56440: LD_VAR 0 1
56444: PUSH
56445: LD_INT 1
56447: MINUS
56448: ST_TO_ADDR
// end ;
56449: LD_VAR 0 2
56453: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
56454: LD_INT 0
56456: PPUSH
56457: PPUSH
56458: PPUSH
56459: PPUSH
56460: PPUSH
56461: PPUSH
56462: PPUSH
56463: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
56464: LD_VAR 0 1
56468: PPUSH
56469: LD_VAR 0 2
56473: PPUSH
56474: CALL_OW 488
56478: NOT
56479: IFTRUE 56498
56481: PUSH
56482: LD_VAR 0 3
56486: PPUSH
56487: LD_VAR 0 4
56491: PPUSH
56492: CALL_OW 488
56496: NOT
56497: OR
56498: IFFALSE 56511
// begin result := - 1 ;
56500: LD_ADDR_VAR 0 5
56504: PUSH
56505: LD_INT 1
56507: NEG
56508: ST_TO_ADDR
// exit ;
56509: GO 56746
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
56511: LD_ADDR_VAR 0 12
56515: PUSH
56516: LD_VAR 0 1
56520: PPUSH
56521: LD_VAR 0 2
56525: PPUSH
56526: LD_VAR 0 3
56530: PPUSH
56531: LD_VAR 0 4
56535: PPUSH
56536: CALL 55582 0 4
56540: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
56541: LD_ADDR_VAR 0 11
56545: PUSH
56546: LD_VAR 0 1
56550: PPUSH
56551: LD_VAR 0 2
56555: PPUSH
56556: LD_VAR 0 12
56560: PUSH
56561: LD_INT 1
56563: ARRAY
56564: PPUSH
56565: LD_VAR 0 12
56569: PUSH
56570: LD_INT 2
56572: ARRAY
56573: PPUSH
56574: CALL_OW 298
56578: ST_TO_ADDR
// distance := 9999 ;
56579: LD_ADDR_VAR 0 10
56583: PUSH
56584: LD_INT 9999
56586: ST_TO_ADDR
// for i := 0 to 5 do
56587: LD_ADDR_VAR 0 6
56591: PUSH
56592: DOUBLE
56593: LD_INT 0
56595: DEC
56596: ST_TO_ADDR
56597: LD_INT 5
56599: PUSH
56600: FOR_TO
56601: IFFALSE 56744
// begin _x := ShiftX ( x1 , i , centerDist ) ;
56603: LD_ADDR_VAR 0 7
56607: PUSH
56608: LD_VAR 0 1
56612: PPUSH
56613: LD_VAR 0 6
56617: PPUSH
56618: LD_VAR 0 11
56622: PPUSH
56623: CALL_OW 272
56627: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
56628: LD_ADDR_VAR 0 8
56632: PUSH
56633: LD_VAR 0 2
56637: PPUSH
56638: LD_VAR 0 6
56642: PPUSH
56643: LD_VAR 0 11
56647: PPUSH
56648: CALL_OW 273
56652: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56653: LD_VAR 0 7
56657: PPUSH
56658: LD_VAR 0 8
56662: PPUSH
56663: CALL_OW 488
56667: NOT
56668: IFFALSE 56672
// continue ;
56670: GO 56600
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
56672: LD_ADDR_VAR 0 9
56676: PUSH
56677: LD_VAR 0 12
56681: PUSH
56682: LD_INT 1
56684: ARRAY
56685: PPUSH
56686: LD_VAR 0 12
56690: PUSH
56691: LD_INT 2
56693: ARRAY
56694: PPUSH
56695: LD_VAR 0 7
56699: PPUSH
56700: LD_VAR 0 8
56704: PPUSH
56705: CALL_OW 298
56709: ST_TO_ADDR
// if tmp < distance then
56710: LD_VAR 0 9
56714: PUSH
56715: LD_VAR 0 10
56719: LESS
56720: IFFALSE 56742
// begin result := i ;
56722: LD_ADDR_VAR 0 5
56726: PUSH
56727: LD_VAR 0 6
56731: ST_TO_ADDR
// distance := tmp ;
56732: LD_ADDR_VAR 0 10
56736: PUSH
56737: LD_VAR 0 9
56741: ST_TO_ADDR
// end ; end ;
56742: GO 56600
56744: POP
56745: POP
// end ;
56746: LD_VAR 0 5
56750: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56751: LD_INT 0
56753: PPUSH
56754: PPUSH
// if not driver or not IsInUnit ( driver ) then
56755: LD_VAR 0 1
56759: NOT
56760: IFTRUE 56774
56762: PUSH
56763: LD_VAR 0 1
56767: PPUSH
56768: CALL_OW 310
56772: NOT
56773: OR
56774: IFFALSE 56778
// exit ;
56776: GO 56868
// vehicle := IsInUnit ( driver ) ;
56778: LD_ADDR_VAR 0 3
56782: PUSH
56783: LD_VAR 0 1
56787: PPUSH
56788: CALL_OW 310
56792: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56793: LD_VAR 0 1
56797: PPUSH
56798: LD_STRING \
56800: PUSH
56801: LD_INT 0
56803: PUSH
56804: LD_INT 0
56806: PUSH
56807: LD_INT 0
56809: PUSH
56810: LD_INT 0
56812: PUSH
56813: LD_INT 0
56815: PUSH
56816: LD_INT 0
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: PUSH
56828: LD_STRING E
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: LD_INT 0
56836: PUSH
56837: LD_VAR 0 3
56841: PUSH
56842: LD_INT 0
56844: PUSH
56845: LD_INT 0
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PPUSH
56864: CALL_OW 446
// end ;
56868: LD_VAR 0 2
56872: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56873: LD_INT 0
56875: PPUSH
56876: PPUSH
// if not driver or not IsInUnit ( driver ) then
56877: LD_VAR 0 1
56881: NOT
56882: IFTRUE 56896
56884: PUSH
56885: LD_VAR 0 1
56889: PPUSH
56890: CALL_OW 310
56894: NOT
56895: OR
56896: IFFALSE 56900
// exit ;
56898: GO 56990
// vehicle := IsInUnit ( driver ) ;
56900: LD_ADDR_VAR 0 3
56904: PUSH
56905: LD_VAR 0 1
56909: PPUSH
56910: CALL_OW 310
56914: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56915: LD_VAR 0 1
56919: PPUSH
56920: LD_STRING \
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: LD_INT 0
56934: PUSH
56935: LD_INT 0
56937: PUSH
56938: LD_INT 0
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: PUSH
56950: LD_STRING E
56952: PUSH
56953: LD_INT 0
56955: PUSH
56956: LD_INT 0
56958: PUSH
56959: LD_VAR 0 3
56963: PUSH
56964: LD_INT 0
56966: PUSH
56967: LD_INT 0
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PPUSH
56986: CALL_OW 447
// end ;
56990: LD_VAR 0 2
56994: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56995: LD_INT 0
56997: PPUSH
56998: PPUSH
56999: PPUSH
// tmp := [ ] ;
57000: LD_ADDR_VAR 0 5
57004: PUSH
57005: EMPTY
57006: ST_TO_ADDR
// for i in units do
57007: LD_ADDR_VAR 0 4
57011: PUSH
57012: LD_VAR 0 1
57016: PUSH
57017: FOR_IN
57018: IFFALSE 57056
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
57020: LD_ADDR_VAR 0 5
57024: PUSH
57025: LD_VAR 0 5
57029: PPUSH
57030: LD_VAR 0 5
57034: PUSH
57035: LD_INT 1
57037: PLUS
57038: PPUSH
57039: LD_VAR 0 4
57043: PPUSH
57044: CALL_OW 256
57048: PPUSH
57049: CALL_OW 2
57053: ST_TO_ADDR
57054: GO 57017
57056: POP
57057: POP
// if not tmp then
57058: LD_VAR 0 5
57062: NOT
57063: IFFALSE 57067
// exit ;
57065: GO 57115
// if asc then
57067: LD_VAR 0 2
57071: IFFALSE 57095
// result := SortListByListAsc ( units , tmp ) else
57073: LD_ADDR_VAR 0 3
57077: PUSH
57078: LD_VAR 0 1
57082: PPUSH
57083: LD_VAR 0 5
57087: PPUSH
57088: CALL_OW 76
57092: ST_TO_ADDR
57093: GO 57115
// result := SortListByListDesc ( units , tmp ) ;
57095: LD_ADDR_VAR 0 3
57099: PUSH
57100: LD_VAR 0 1
57104: PPUSH
57105: LD_VAR 0 5
57109: PPUSH
57110: CALL_OW 77
57114: ST_TO_ADDR
// end ;
57115: LD_VAR 0 3
57119: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
57120: LD_INT 0
57122: PPUSH
57123: PPUSH
// task := GetTaskList ( mech ) ;
57124: LD_ADDR_VAR 0 4
57128: PUSH
57129: LD_VAR 0 1
57133: PPUSH
57134: CALL_OW 437
57138: ST_TO_ADDR
// if not task then
57139: LD_VAR 0 4
57143: NOT
57144: IFFALSE 57148
// exit ;
57146: GO 57192
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
57148: LD_ADDR_VAR 0 3
57152: PUSH
57153: LD_VAR 0 4
57157: PUSH
57158: LD_INT 1
57160: ARRAY
57161: PUSH
57162: LD_INT 1
57164: ARRAY
57165: PUSH
57166: LD_STRING r
57168: EQUAL
57169: IFFALSE 57191
57171: PUSH
57172: LD_VAR 0 4
57176: PUSH
57177: LD_INT 1
57179: ARRAY
57180: PUSH
57181: LD_INT 4
57183: ARRAY
57184: PUSH
57185: LD_VAR 0 2
57189: EQUAL
57190: AND
57191: ST_TO_ADDR
// end ;
57192: LD_VAR 0 3
57196: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
57197: LD_INT 0
57199: PPUSH
// SetDir ( unit , d ) ;
57200: LD_VAR 0 1
57204: PPUSH
57205: LD_VAR 0 4
57209: PPUSH
57210: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
57214: LD_ADDR_VAR 0 6
57218: PUSH
57219: LD_VAR 0 1
57223: PPUSH
57224: LD_VAR 0 2
57228: PPUSH
57229: LD_VAR 0 3
57233: PPUSH
57234: LD_VAR 0 5
57238: PPUSH
57239: CALL_OW 48
57243: ST_TO_ADDR
// end ;
57244: LD_VAR 0 6
57248: RET
// export function ToNaturalNumber ( number ) ; begin
57249: LD_INT 0
57251: PPUSH
// result := number div 1 ;
57252: LD_ADDR_VAR 0 2
57256: PUSH
57257: LD_VAR 0 1
57261: PUSH
57262: LD_INT 1
57264: DIV
57265: ST_TO_ADDR
// if number < 0 then
57266: LD_VAR 0 1
57270: PUSH
57271: LD_INT 0
57273: LESS
57274: IFFALSE 57284
// result := 0 ;
57276: LD_ADDR_VAR 0 2
57280: PUSH
57281: LD_INT 0
57283: ST_TO_ADDR
// end ;
57284: LD_VAR 0 2
57288: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
57289: LD_INT 0
57291: PPUSH
57292: PPUSH
57293: PPUSH
// if not buildings then
57294: LD_VAR 0 1
57298: NOT
57299: IFFALSE 57303
// exit ;
57301: GO 57418
// tmp := [ ] ;
57303: LD_ADDR_VAR 0 5
57307: PUSH
57308: EMPTY
57309: ST_TO_ADDR
// for b in buildings do
57310: LD_ADDR_VAR 0 4
57314: PUSH
57315: LD_VAR 0 1
57319: PUSH
57320: FOR_IN
57321: IFFALSE 57359
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
57323: LD_ADDR_VAR 0 5
57327: PUSH
57328: LD_VAR 0 5
57332: PPUSH
57333: LD_VAR 0 5
57337: PUSH
57338: LD_INT 1
57340: PLUS
57341: PPUSH
57342: LD_VAR 0 4
57346: PPUSH
57347: CALL_OW 266
57351: PPUSH
57352: CALL_OW 1
57356: ST_TO_ADDR
57357: GO 57320
57359: POP
57360: POP
// if not tmp then
57361: LD_VAR 0 5
57365: NOT
57366: IFFALSE 57370
// exit ;
57368: GO 57418
// if asc then
57370: LD_VAR 0 2
57374: IFFALSE 57398
// result := SortListByListAsc ( buildings , tmp ) else
57376: LD_ADDR_VAR 0 3
57380: PUSH
57381: LD_VAR 0 1
57385: PPUSH
57386: LD_VAR 0 5
57390: PPUSH
57391: CALL_OW 76
57395: ST_TO_ADDR
57396: GO 57418
// result := SortListByListDesc ( buildings , tmp ) ;
57398: LD_ADDR_VAR 0 3
57402: PUSH
57403: LD_VAR 0 1
57407: PPUSH
57408: LD_VAR 0 5
57412: PPUSH
57413: CALL_OW 77
57417: ST_TO_ADDR
// end ;
57418: LD_VAR 0 3
57422: RET
// export function SortByClass ( units , class ) ; var un ; begin
57423: LD_INT 0
57425: PPUSH
57426: PPUSH
// if not units or not class then
57427: LD_VAR 0 1
57431: NOT
57432: IFTRUE 57441
57434: PUSH
57435: LD_VAR 0 2
57439: NOT
57440: OR
57441: IFFALSE 57445
// exit ;
57443: GO 57540
// result := [ ] ;
57445: LD_ADDR_VAR 0 3
57449: PUSH
57450: EMPTY
57451: ST_TO_ADDR
// for un in units do
57452: LD_ADDR_VAR 0 4
57456: PUSH
57457: LD_VAR 0 1
57461: PUSH
57462: FOR_IN
57463: IFFALSE 57538
// if GetClass ( un ) = class then
57465: LD_VAR 0 4
57469: PPUSH
57470: CALL_OW 257
57474: PUSH
57475: LD_VAR 0 2
57479: EQUAL
57480: IFFALSE 57507
// result := Insert ( result , 1 , un ) else
57482: LD_ADDR_VAR 0 3
57486: PUSH
57487: LD_VAR 0 3
57491: PPUSH
57492: LD_INT 1
57494: PPUSH
57495: LD_VAR 0 4
57499: PPUSH
57500: CALL_OW 2
57504: ST_TO_ADDR
57505: GO 57536
// result := Replace ( result , result + 1 , un ) ;
57507: LD_ADDR_VAR 0 3
57511: PUSH
57512: LD_VAR 0 3
57516: PPUSH
57517: LD_VAR 0 3
57521: PUSH
57522: LD_INT 1
57524: PLUS
57525: PPUSH
57526: LD_VAR 0 4
57530: PPUSH
57531: CALL_OW 1
57535: ST_TO_ADDR
57536: GO 57462
57538: POP
57539: POP
// end ;
57540: LD_VAR 0 3
57544: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
57545: LD_INT 0
57547: PPUSH
57548: PPUSH
57549: PPUSH
57550: PPUSH
57551: PPUSH
57552: PPUSH
57553: PPUSH
// result := [ ] ;
57554: LD_ADDR_VAR 0 4
57558: PUSH
57559: EMPTY
57560: ST_TO_ADDR
// if x - r < 0 then
57561: LD_VAR 0 1
57565: PUSH
57566: LD_VAR 0 3
57570: MINUS
57571: PUSH
57572: LD_INT 0
57574: LESS
57575: IFFALSE 57587
// min_x := 0 else
57577: LD_ADDR_VAR 0 8
57581: PUSH
57582: LD_INT 0
57584: ST_TO_ADDR
57585: GO 57603
// min_x := x - r ;
57587: LD_ADDR_VAR 0 8
57591: PUSH
57592: LD_VAR 0 1
57596: PUSH
57597: LD_VAR 0 3
57601: MINUS
57602: ST_TO_ADDR
// if y - r < 0 then
57603: LD_VAR 0 2
57607: PUSH
57608: LD_VAR 0 3
57612: MINUS
57613: PUSH
57614: LD_INT 0
57616: LESS
57617: IFFALSE 57629
// min_y := 0 else
57619: LD_ADDR_VAR 0 7
57623: PUSH
57624: LD_INT 0
57626: ST_TO_ADDR
57627: GO 57645
// min_y := y - r ;
57629: LD_ADDR_VAR 0 7
57633: PUSH
57634: LD_VAR 0 2
57638: PUSH
57639: LD_VAR 0 3
57643: MINUS
57644: ST_TO_ADDR
// max_x := x + r ;
57645: LD_ADDR_VAR 0 9
57649: PUSH
57650: LD_VAR 0 1
57654: PUSH
57655: LD_VAR 0 3
57659: PLUS
57660: ST_TO_ADDR
// max_y := y + r ;
57661: LD_ADDR_VAR 0 10
57665: PUSH
57666: LD_VAR 0 2
57670: PUSH
57671: LD_VAR 0 3
57675: PLUS
57676: ST_TO_ADDR
// for _x = min_x to max_x do
57677: LD_ADDR_VAR 0 5
57681: PUSH
57682: DOUBLE
57683: LD_VAR 0 8
57687: DEC
57688: ST_TO_ADDR
57689: LD_VAR 0 9
57693: PUSH
57694: FOR_TO
57695: IFFALSE 57796
// for _y = min_y to max_y do
57697: LD_ADDR_VAR 0 6
57701: PUSH
57702: DOUBLE
57703: LD_VAR 0 7
57707: DEC
57708: ST_TO_ADDR
57709: LD_VAR 0 10
57713: PUSH
57714: FOR_TO
57715: IFFALSE 57792
// begin if not ValidHex ( _x , _y ) then
57717: LD_VAR 0 5
57721: PPUSH
57722: LD_VAR 0 6
57726: PPUSH
57727: CALL_OW 488
57731: NOT
57732: IFFALSE 57736
// continue ;
57734: GO 57714
// if GetResourceTypeXY ( _x , _y ) then
57736: LD_VAR 0 5
57740: PPUSH
57741: LD_VAR 0 6
57745: PPUSH
57746: CALL_OW 283
57750: IFFALSE 57790
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
57752: LD_ADDR_VAR 0 4
57756: PUSH
57757: LD_VAR 0 4
57761: PPUSH
57762: LD_VAR 0 4
57766: PUSH
57767: LD_INT 1
57769: PLUS
57770: PPUSH
57771: LD_VAR 0 5
57775: PUSH
57776: LD_VAR 0 6
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PPUSH
57785: CALL_OW 1
57789: ST_TO_ADDR
// end ;
57790: GO 57714
57792: POP
57793: POP
57794: GO 57694
57796: POP
57797: POP
// end ;
57798: LD_VAR 0 4
57802: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
57803: LD_INT 0
57805: PPUSH
57806: PPUSH
57807: PPUSH
57808: PPUSH
57809: PPUSH
57810: PPUSH
57811: PPUSH
57812: PPUSH
// if not units then
57813: LD_VAR 0 1
57817: NOT
57818: IFFALSE 57822
// exit ;
57820: GO 58354
// result := UnitFilter ( units , [ f_ok ] ) ;
57822: LD_ADDR_VAR 0 3
57826: PUSH
57827: LD_VAR 0 1
57831: PPUSH
57832: LD_INT 50
57834: PUSH
57835: EMPTY
57836: LIST
57837: PPUSH
57838: CALL_OW 72
57842: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
57843: LD_ADDR_VAR 0 8
57847: PUSH
57848: LD_VAR 0 1
57852: PUSH
57853: LD_INT 1
57855: ARRAY
57856: PPUSH
57857: CALL_OW 255
57861: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
57862: LD_ADDR_VAR 0 10
57866: PUSH
57867: LD_INT 29
57869: PUSH
57870: LD_INT 91
57872: PUSH
57873: LD_INT 49
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: LIST
57880: ST_TO_ADDR
// if not result then
57881: LD_VAR 0 3
57885: NOT
57886: IFFALSE 57890
// exit ;
57888: GO 58354
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
57890: LD_ADDR_VAR 0 5
57894: PUSH
57895: LD_INT 81
57897: PUSH
57898: LD_VAR 0 8
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PPUSH
57907: CALL_OW 69
57911: ST_TO_ADDR
// for i in result do
57912: LD_ADDR_VAR 0 4
57916: PUSH
57917: LD_VAR 0 3
57921: PUSH
57922: FOR_IN
57923: IFFALSE 58352
// begin tag := GetTag ( i ) + 1 ;
57925: LD_ADDR_VAR 0 9
57929: PUSH
57930: LD_VAR 0 4
57934: PPUSH
57935: CALL_OW 110
57939: PUSH
57940: LD_INT 1
57942: PLUS
57943: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
57944: LD_ADDR_VAR 0 7
57948: PUSH
57949: LD_VAR 0 4
57953: PPUSH
57954: CALL_OW 250
57958: PPUSH
57959: LD_VAR 0 4
57963: PPUSH
57964: CALL_OW 251
57968: PPUSH
57969: LD_INT 4
57971: PPUSH
57972: CALL 57545 0 3
57976: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
57977: LD_VAR 0 4
57981: PPUSH
57982: CALL_OW 247
57986: PUSH
57987: LD_INT 2
57989: EQUAL
57990: IFFALSE 58002
57992: PUSH
57993: LD_VAR 0 7
57997: PUSH
57998: LD_INT 2
58000: GREATER
58001: AND
58002: IFFALSE 58022
58004: PUSH
58005: LD_VAR 0 4
58009: PPUSH
58010: CALL_OW 264
58014: PUSH
58015: LD_VAR 0 10
58019: IN
58020: NOT
58021: AND
58022: IFFALSE 58061
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
58024: LD_VAR 0 4
58028: PPUSH
58029: LD_VAR 0 7
58033: PUSH
58034: LD_INT 1
58036: ARRAY
58037: PUSH
58038: LD_INT 1
58040: ARRAY
58041: PPUSH
58042: LD_VAR 0 7
58046: PUSH
58047: LD_INT 1
58049: ARRAY
58050: PUSH
58051: LD_INT 2
58053: ARRAY
58054: PPUSH
58055: CALL_OW 116
58059: GO 58350
// if path > tag then
58061: LD_VAR 0 2
58065: PUSH
58066: LD_VAR 0 9
58070: GREATER
58071: IFFALSE 58279
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
58073: LD_ADDR_VAR 0 6
58077: PUSH
58078: LD_VAR 0 5
58082: PPUSH
58083: LD_INT 91
58085: PUSH
58086: LD_VAR 0 4
58090: PUSH
58091: LD_INT 8
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: LIST
58098: PPUSH
58099: CALL_OW 72
58103: ST_TO_ADDR
// if nearEnemy then
58104: LD_VAR 0 6
58108: IFFALSE 58177
// begin if GetWeapon ( i ) = ru_time_lapser then
58110: LD_VAR 0 4
58114: PPUSH
58115: CALL_OW 264
58119: PUSH
58120: LD_INT 49
58122: EQUAL
58123: IFFALSE 58151
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
58125: LD_VAR 0 4
58129: PPUSH
58130: LD_VAR 0 6
58134: PPUSH
58135: LD_VAR 0 4
58139: PPUSH
58140: CALL_OW 74
58144: PPUSH
58145: CALL_OW 112
58149: GO 58175
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
58151: LD_VAR 0 4
58155: PPUSH
58156: LD_VAR 0 6
58160: PPUSH
58161: LD_VAR 0 4
58165: PPUSH
58166: CALL_OW 74
58170: PPUSH
58171: CALL 59435 0 2
// end else
58175: GO 58277
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
58177: LD_VAR 0 4
58181: PPUSH
58182: LD_VAR 0 2
58186: PUSH
58187: LD_VAR 0 9
58191: ARRAY
58192: PUSH
58193: LD_INT 1
58195: ARRAY
58196: PPUSH
58197: LD_VAR 0 2
58201: PUSH
58202: LD_VAR 0 9
58206: ARRAY
58207: PUSH
58208: LD_INT 2
58210: ARRAY
58211: PPUSH
58212: CALL_OW 297
58216: PUSH
58217: LD_INT 6
58219: GREATER
58220: IFFALSE 58263
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
58222: LD_VAR 0 4
58226: PPUSH
58227: LD_VAR 0 2
58231: PUSH
58232: LD_VAR 0 9
58236: ARRAY
58237: PUSH
58238: LD_INT 1
58240: ARRAY
58241: PPUSH
58242: LD_VAR 0 2
58246: PUSH
58247: LD_VAR 0 9
58251: ARRAY
58252: PUSH
58253: LD_INT 2
58255: ARRAY
58256: PPUSH
58257: CALL_OW 114
58261: GO 58277
// SetTag ( i , tag ) ;
58263: LD_VAR 0 4
58267: PPUSH
58268: LD_VAR 0 9
58272: PPUSH
58273: CALL_OW 109
// end else
58277: GO 58350
// if enemy then
58279: LD_VAR 0 5
58283: IFFALSE 58350
// begin if GetWeapon ( i ) = ru_time_lapser then
58285: LD_VAR 0 4
58289: PPUSH
58290: CALL_OW 264
58294: PUSH
58295: LD_INT 49
58297: EQUAL
58298: IFFALSE 58326
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
58300: LD_VAR 0 4
58304: PPUSH
58305: LD_VAR 0 5
58309: PPUSH
58310: LD_VAR 0 4
58314: PPUSH
58315: CALL_OW 74
58319: PPUSH
58320: CALL_OW 112
58324: GO 58350
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
58326: LD_VAR 0 4
58330: PPUSH
58331: LD_VAR 0 5
58335: PPUSH
58336: LD_VAR 0 4
58340: PPUSH
58341: CALL_OW 74
58345: PPUSH
58346: CALL 59435 0 2
// end ; end ;
58350: GO 57922
58352: POP
58353: POP
// end ;
58354: LD_VAR 0 3
58358: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
58359: LD_INT 0
58361: PPUSH
58362: PPUSH
58363: PPUSH
// if not unit or IsInUnit ( unit ) then
58364: LD_VAR 0 1
58368: NOT
58369: IFTRUE 58382
58371: PUSH
58372: LD_VAR 0 1
58376: PPUSH
58377: CALL_OW 310
58381: OR
58382: IFFALSE 58386
// exit ;
58384: GO 58477
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
58386: LD_ADDR_VAR 0 4
58390: PUSH
58391: LD_VAR 0 1
58395: PPUSH
58396: CALL_OW 250
58400: PPUSH
58401: LD_VAR 0 2
58405: PPUSH
58406: LD_INT 1
58408: PPUSH
58409: CALL_OW 272
58413: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
58414: LD_ADDR_VAR 0 5
58418: PUSH
58419: LD_VAR 0 1
58423: PPUSH
58424: CALL_OW 251
58428: PPUSH
58429: LD_VAR 0 2
58433: PPUSH
58434: LD_INT 1
58436: PPUSH
58437: CALL_OW 273
58441: ST_TO_ADDR
// if ValidHex ( x , y ) then
58442: LD_VAR 0 4
58446: PPUSH
58447: LD_VAR 0 5
58451: PPUSH
58452: CALL_OW 488
58456: IFFALSE 58477
// ComTurnXY ( unit , x , y ) ;
58458: LD_VAR 0 1
58462: PPUSH
58463: LD_VAR 0 4
58467: PPUSH
58468: LD_VAR 0 5
58472: PPUSH
58473: CALL_OW 118
// end ;
58477: LD_VAR 0 3
58481: RET
// export function SeeUnits ( side , units ) ; var i ; begin
58482: LD_INT 0
58484: PPUSH
58485: PPUSH
// result := false ;
58486: LD_ADDR_VAR 0 3
58490: PUSH
58491: LD_INT 0
58493: ST_TO_ADDR
// if not units then
58494: LD_VAR 0 2
58498: NOT
58499: IFFALSE 58503
// exit ;
58501: GO 58548
// for i in units do
58503: LD_ADDR_VAR 0 4
58507: PUSH
58508: LD_VAR 0 2
58512: PUSH
58513: FOR_IN
58514: IFFALSE 58546
// if See ( side , i ) then
58516: LD_VAR 0 1
58520: PPUSH
58521: LD_VAR 0 4
58525: PPUSH
58526: CALL_OW 292
58530: IFFALSE 58544
// begin result := true ;
58532: LD_ADDR_VAR 0 3
58536: PUSH
58537: LD_INT 1
58539: ST_TO_ADDR
// exit ;
58540: POP
58541: POP
58542: GO 58548
// end ;
58544: GO 58513
58546: POP
58547: POP
// end ;
58548: LD_VAR 0 3
58552: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
58553: LD_INT 0
58555: PPUSH
58556: PPUSH
58557: PPUSH
58558: PPUSH
// if not unit or not points then
58559: LD_VAR 0 1
58563: NOT
58564: IFTRUE 58573
58566: PUSH
58567: LD_VAR 0 2
58571: NOT
58572: OR
58573: IFFALSE 58577
// exit ;
58575: GO 58667
// dist := 99999 ;
58577: LD_ADDR_VAR 0 5
58581: PUSH
58582: LD_INT 99999
58584: ST_TO_ADDR
// for i in points do
58585: LD_ADDR_VAR 0 4
58589: PUSH
58590: LD_VAR 0 2
58594: PUSH
58595: FOR_IN
58596: IFFALSE 58665
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
58598: LD_ADDR_VAR 0 6
58602: PUSH
58603: LD_VAR 0 1
58607: PPUSH
58608: LD_VAR 0 4
58612: PUSH
58613: LD_INT 1
58615: ARRAY
58616: PPUSH
58617: LD_VAR 0 4
58621: PUSH
58622: LD_INT 2
58624: ARRAY
58625: PPUSH
58626: CALL_OW 297
58630: ST_TO_ADDR
// if tmpDist < dist then
58631: LD_VAR 0 6
58635: PUSH
58636: LD_VAR 0 5
58640: LESS
58641: IFFALSE 58663
// begin result := i ;
58643: LD_ADDR_VAR 0 3
58647: PUSH
58648: LD_VAR 0 4
58652: ST_TO_ADDR
// dist := tmpDist ;
58653: LD_ADDR_VAR 0 5
58657: PUSH
58658: LD_VAR 0 6
58662: ST_TO_ADDR
// end ; end ;
58663: GO 58595
58665: POP
58666: POP
// end ;
58667: LD_VAR 0 3
58671: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
58672: LD_INT 0
58674: PPUSH
// uc_side := side ;
58675: LD_ADDR_OWVAR 20
58679: PUSH
58680: LD_VAR 0 1
58684: ST_TO_ADDR
// uc_nation := 3 ;
58685: LD_ADDR_OWVAR 21
58689: PUSH
58690: LD_INT 3
58692: ST_TO_ADDR
// vc_chassis := 25 ;
58693: LD_ADDR_OWVAR 37
58697: PUSH
58698: LD_INT 25
58700: ST_TO_ADDR
// vc_engine := engine_siberite ;
58701: LD_ADDR_OWVAR 39
58705: PUSH
58706: LD_INT 3
58708: ST_TO_ADDR
// vc_control := control_computer ;
58709: LD_ADDR_OWVAR 38
58713: PUSH
58714: LD_INT 3
58716: ST_TO_ADDR
// vc_weapon := 59 ;
58717: LD_ADDR_OWVAR 40
58721: PUSH
58722: LD_INT 59
58724: ST_TO_ADDR
// result := CreateVehicle ;
58725: LD_ADDR_VAR 0 5
58729: PUSH
58730: CALL_OW 45
58734: ST_TO_ADDR
// SetDir ( result , d ) ;
58735: LD_VAR 0 5
58739: PPUSH
58740: LD_VAR 0 4
58744: PPUSH
58745: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
58749: LD_VAR 0 5
58753: PPUSH
58754: LD_VAR 0 2
58758: PPUSH
58759: LD_VAR 0 3
58763: PPUSH
58764: LD_INT 0
58766: PPUSH
58767: CALL_OW 48
// end ;
58771: LD_VAR 0 5
58775: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
58776: LD_INT 0
58778: PPUSH
58779: PPUSH
58780: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
58781: LD_ADDR_VAR 0 2
58785: PUSH
58786: LD_INT 0
58788: PUSH
58789: LD_INT 0
58791: PUSH
58792: LD_INT 0
58794: PUSH
58795: LD_INT 0
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
58804: LD_VAR 0 1
58808: NOT
58809: IFTRUE 58842
58811: PUSH
58812: LD_VAR 0 1
58816: PPUSH
58817: CALL_OW 264
58821: PUSH
58822: LD_INT 12
58824: PUSH
58825: LD_INT 51
58827: PUSH
58828: LD_INT 32
58830: PUSH
58831: LD_INT 89
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: IN
58840: NOT
58841: OR
58842: IFFALSE 58846
// exit ;
58844: GO 58944
// for i := 1 to 3 do
58846: LD_ADDR_VAR 0 3
58850: PUSH
58851: DOUBLE
58852: LD_INT 1
58854: DEC
58855: ST_TO_ADDR
58856: LD_INT 3
58858: PUSH
58859: FOR_TO
58860: IFFALSE 58942
// begin tmp := GetCargo ( cargo , i ) ;
58862: LD_ADDR_VAR 0 4
58866: PUSH
58867: LD_VAR 0 1
58871: PPUSH
58872: LD_VAR 0 3
58876: PPUSH
58877: CALL_OW 289
58881: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
58882: LD_ADDR_VAR 0 2
58886: PUSH
58887: LD_VAR 0 2
58891: PPUSH
58892: LD_VAR 0 3
58896: PPUSH
58897: LD_VAR 0 4
58901: PPUSH
58902: CALL_OW 1
58906: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
58907: LD_ADDR_VAR 0 2
58911: PUSH
58912: LD_VAR 0 2
58916: PPUSH
58917: LD_INT 4
58919: PPUSH
58920: LD_VAR 0 2
58924: PUSH
58925: LD_INT 4
58927: ARRAY
58928: PUSH
58929: LD_VAR 0 4
58933: PLUS
58934: PPUSH
58935: CALL_OW 1
58939: ST_TO_ADDR
// end ;
58940: GO 58859
58942: POP
58943: POP
// end ;
58944: LD_VAR 0 2
58948: RET
// export function Length ( array ) ; begin
58949: LD_INT 0
58951: PPUSH
// result := array + 0 ;
58952: LD_ADDR_VAR 0 2
58956: PUSH
58957: LD_VAR 0 1
58961: PUSH
58962: LD_INT 0
58964: PLUS
58965: ST_TO_ADDR
// end ;
58966: LD_VAR 0 2
58970: RET
// export function PrepareArray ( array ) ; begin
58971: LD_INT 0
58973: PPUSH
// result := array diff 0 ;
58974: LD_ADDR_VAR 0 2
58978: PUSH
58979: LD_VAR 0 1
58983: PUSH
58984: LD_INT 0
58986: DIFF
58987: ST_TO_ADDR
// if not result [ 1 ] then
58988: LD_VAR 0 2
58992: PUSH
58993: LD_INT 1
58995: ARRAY
58996: NOT
58997: IFFALSE 59017
// result := Delete ( result , 1 ) ;
58999: LD_ADDR_VAR 0 2
59003: PUSH
59004: LD_VAR 0 2
59008: PPUSH
59009: LD_INT 1
59011: PPUSH
59012: CALL_OW 3
59016: ST_TO_ADDR
// end ;
59017: LD_VAR 0 2
59021: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
59022: LD_INT 0
59024: PPUSH
59025: PPUSH
59026: PPUSH
59027: PPUSH
// sibRocketRange := 25 ;
59028: LD_ADDR_VAR 0 6
59032: PUSH
59033: LD_INT 25
59035: ST_TO_ADDR
// result := false ;
59036: LD_ADDR_VAR 0 4
59040: PUSH
59041: LD_INT 0
59043: ST_TO_ADDR
// for i := 0 to 5 do
59044: LD_ADDR_VAR 0 5
59048: PUSH
59049: DOUBLE
59050: LD_INT 0
59052: DEC
59053: ST_TO_ADDR
59054: LD_INT 5
59056: PUSH
59057: FOR_TO
59058: IFFALSE 59125
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
59060: LD_VAR 0 1
59064: PPUSH
59065: LD_VAR 0 5
59069: PPUSH
59070: LD_VAR 0 6
59074: PPUSH
59075: CALL_OW 272
59079: PPUSH
59080: LD_VAR 0 2
59084: PPUSH
59085: LD_VAR 0 5
59089: PPUSH
59090: LD_VAR 0 6
59094: PPUSH
59095: CALL_OW 273
59099: PPUSH
59100: LD_VAR 0 3
59104: PPUSH
59105: CALL_OW 309
59109: IFFALSE 59123
// begin result := true ;
59111: LD_ADDR_VAR 0 4
59115: PUSH
59116: LD_INT 1
59118: ST_TO_ADDR
// exit ;
59119: POP
59120: POP
59121: GO 59127
// end ;
59123: GO 59057
59125: POP
59126: POP
// end ;
59127: LD_VAR 0 4
59131: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
59132: LD_INT 0
59134: PPUSH
59135: PPUSH
59136: PPUSH
// if btype = b_depot then
59137: LD_VAR 0 2
59141: PUSH
59142: LD_INT 0
59144: EQUAL
59145: IFFALSE 59157
// begin result := true ;
59147: LD_ADDR_VAR 0 3
59151: PUSH
59152: LD_INT 1
59154: ST_TO_ADDR
// exit ;
59155: GO 59277
// end ; pom := GetBase ( depot ) ;
59157: LD_ADDR_VAR 0 4
59161: PUSH
59162: LD_VAR 0 1
59166: PPUSH
59167: CALL_OW 274
59171: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
59172: LD_ADDR_VAR 0 5
59176: PUSH
59177: LD_VAR 0 2
59181: PPUSH
59182: LD_VAR 0 1
59186: PPUSH
59187: CALL_OW 248
59191: PPUSH
59192: CALL_OW 450
59196: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
59197: LD_ADDR_VAR 0 3
59201: PUSH
59202: LD_VAR 0 4
59206: PPUSH
59207: LD_INT 1
59209: PPUSH
59210: CALL_OW 275
59214: PUSH
59215: LD_VAR 0 5
59219: PUSH
59220: LD_INT 1
59222: ARRAY
59223: GREATEREQUAL
59224: IFFALSE 59250
59226: PUSH
59227: LD_VAR 0 4
59231: PPUSH
59232: LD_INT 2
59234: PPUSH
59235: CALL_OW 275
59239: PUSH
59240: LD_VAR 0 5
59244: PUSH
59245: LD_INT 2
59247: ARRAY
59248: GREATEREQUAL
59249: AND
59250: IFFALSE 59276
59252: PUSH
59253: LD_VAR 0 4
59257: PPUSH
59258: LD_INT 3
59260: PPUSH
59261: CALL_OW 275
59265: PUSH
59266: LD_VAR 0 5
59270: PUSH
59271: LD_INT 3
59273: ARRAY
59274: GREATEREQUAL
59275: AND
59276: ST_TO_ADDR
// end ;
59277: LD_VAR 0 3
59281: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
59282: LD_INT 0
59284: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
59285: LD_VAR 0 1
59289: PPUSH
59290: LD_VAR 0 2
59294: PPUSH
59295: LD_INT 0
59297: PPUSH
59298: LD_INT 0
59300: PPUSH
59301: LD_INT 1
59303: PPUSH
59304: LD_INT 0
59306: PPUSH
59307: CALL_OW 587
// end ;
59311: LD_VAR 0 3
59315: RET
// export function CenterOnNow ( unit ) ; begin
59316: LD_INT 0
59318: PPUSH
// result := IsInUnit ( unit ) ;
59319: LD_ADDR_VAR 0 2
59323: PUSH
59324: LD_VAR 0 1
59328: PPUSH
59329: CALL_OW 310
59333: ST_TO_ADDR
// if not result then
59334: LD_VAR 0 2
59338: NOT
59339: IFFALSE 59351
// result := unit ;
59341: LD_ADDR_VAR 0 2
59345: PUSH
59346: LD_VAR 0 1
59350: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
59351: LD_VAR 0 1
59355: PPUSH
59356: CALL_OW 87
// end ;
59360: LD_VAR 0 2
59364: RET
// export function ComMoveHex ( unit , hex ) ; begin
59365: LD_INT 0
59367: PPUSH
// if not hex then
59368: LD_VAR 0 2
59372: NOT
59373: IFFALSE 59377
// exit ;
59375: GO 59430
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
59377: LD_VAR 0 2
59381: PUSH
59382: LD_INT 1
59384: ARRAY
59385: PPUSH
59386: LD_VAR 0 2
59390: PUSH
59391: LD_INT 2
59393: ARRAY
59394: PPUSH
59395: CALL_OW 428
59399: IFFALSE 59403
// exit ;
59401: GO 59430
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
59403: LD_VAR 0 1
59407: PPUSH
59408: LD_VAR 0 2
59412: PUSH
59413: LD_INT 1
59415: ARRAY
59416: PPUSH
59417: LD_VAR 0 2
59421: PUSH
59422: LD_INT 2
59424: ARRAY
59425: PPUSH
59426: CALL_OW 111
// end ;
59430: LD_VAR 0 3
59434: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
59435: LD_INT 0
59437: PPUSH
59438: PPUSH
59439: PPUSH
// if not unit or not enemy then
59440: LD_VAR 0 1
59444: NOT
59445: IFTRUE 59454
59447: PUSH
59448: LD_VAR 0 2
59452: NOT
59453: OR
59454: IFFALSE 59458
// exit ;
59456: GO 59584
// x := GetX ( enemy ) ;
59458: LD_ADDR_VAR 0 4
59462: PUSH
59463: LD_VAR 0 2
59467: PPUSH
59468: CALL_OW 250
59472: ST_TO_ADDR
// y := GetY ( enemy ) ;
59473: LD_ADDR_VAR 0 5
59477: PUSH
59478: LD_VAR 0 2
59482: PPUSH
59483: CALL_OW 251
59487: ST_TO_ADDR
// if ValidHex ( x , y ) then
59488: LD_VAR 0 4
59492: PPUSH
59493: LD_VAR 0 5
59497: PPUSH
59498: CALL_OW 488
59502: IFFALSE 59584
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
59504: LD_VAR 0 2
59508: PPUSH
59509: CALL_OW 247
59513: PUSH
59514: LD_INT 3
59516: PUSH
59517: LD_INT 2
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: IN
59524: IFTRUE 59547
59526: PUSH
59527: LD_VAR 0 1
59531: PPUSH
59532: CALL_OW 255
59536: PPUSH
59537: LD_VAR 0 2
59541: PPUSH
59542: CALL_OW 292
59546: OR
59547: IFFALSE 59565
// ComAttackUnit ( unit , enemy ) else
59549: LD_VAR 0 1
59553: PPUSH
59554: LD_VAR 0 2
59558: PPUSH
59559: CALL_OW 115
59563: GO 59584
// ComAgressiveMove ( unit , x , y ) ;
59565: LD_VAR 0 1
59569: PPUSH
59570: LD_VAR 0 4
59574: PPUSH
59575: LD_VAR 0 5
59579: PPUSH
59580: CALL_OW 114
// end ;
59584: LD_VAR 0 3
59588: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
59589: LD_INT 0
59591: PPUSH
59592: PPUSH
59593: PPUSH
// list := AreaToList ( area , 0 ) ;
59594: LD_ADDR_VAR 0 5
59598: PUSH
59599: LD_VAR 0 1
59603: PPUSH
59604: LD_INT 0
59606: PPUSH
59607: CALL_OW 517
59611: ST_TO_ADDR
// if not list then
59612: LD_VAR 0 5
59616: NOT
59617: IFFALSE 59621
// exit ;
59619: GO 59751
// if all then
59621: LD_VAR 0 2
59625: IFFALSE 59713
// begin for i := 1 to list [ 1 ] do
59627: LD_ADDR_VAR 0 4
59631: PUSH
59632: DOUBLE
59633: LD_INT 1
59635: DEC
59636: ST_TO_ADDR
59637: LD_VAR 0 5
59641: PUSH
59642: LD_INT 1
59644: ARRAY
59645: PUSH
59646: FOR_TO
59647: IFFALSE 59709
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
59649: LD_ADDR_VAR 0 3
59653: PUSH
59654: LD_VAR 0 3
59658: PPUSH
59659: LD_VAR 0 3
59663: PUSH
59664: LD_INT 1
59666: PLUS
59667: PPUSH
59668: LD_VAR 0 5
59672: PUSH
59673: LD_INT 1
59675: ARRAY
59676: PUSH
59677: LD_VAR 0 4
59681: ARRAY
59682: PUSH
59683: LD_VAR 0 5
59687: PUSH
59688: LD_INT 2
59690: ARRAY
59691: PUSH
59692: LD_VAR 0 4
59696: ARRAY
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PPUSH
59702: CALL_OW 1
59706: ST_TO_ADDR
59707: GO 59646
59709: POP
59710: POP
// exit ;
59711: GO 59751
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
59713: LD_ADDR_VAR 0 3
59717: PUSH
59718: LD_VAR 0 5
59722: PUSH
59723: LD_INT 1
59725: ARRAY
59726: PUSH
59727: LD_INT 1
59729: ARRAY
59730: PUSH
59731: LD_VAR 0 5
59735: PUSH
59736: LD_INT 2
59738: ARRAY
59739: PUSH
59740: LD_INT 1
59742: ARRAY
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: EMPTY
59749: LIST
59750: ST_TO_ADDR
// end ;
59751: LD_VAR 0 3
59755: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
59756: LD_INT 0
59758: PPUSH
59759: PPUSH
// list := AreaToList ( area , 0 ) ;
59760: LD_ADDR_VAR 0 4
59764: PUSH
59765: LD_VAR 0 1
59769: PPUSH
59770: LD_INT 0
59772: PPUSH
59773: CALL_OW 517
59777: ST_TO_ADDR
// if not list then
59778: LD_VAR 0 4
59782: NOT
59783: IFFALSE 59787
// exit ;
59785: GO 59828
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
59787: LD_ADDR_VAR 0 3
59791: PUSH
59792: LD_VAR 0 4
59796: PUSH
59797: LD_INT 1
59799: ARRAY
59800: PUSH
59801: LD_INT 1
59803: ARRAY
59804: PUSH
59805: LD_VAR 0 4
59809: PUSH
59810: LD_INT 2
59812: ARRAY
59813: PUSH
59814: LD_INT 1
59816: ARRAY
59817: PUSH
59818: LD_VAR 0 2
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: LIST
59827: ST_TO_ADDR
// end ;
59828: LD_VAR 0 3
59832: RET
// export function First ( array ) ; begin
59833: LD_INT 0
59835: PPUSH
// if not array then
59836: LD_VAR 0 1
59840: NOT
59841: IFFALSE 59845
// exit ;
59843: GO 59859
// result := array [ 1 ] ;
59845: LD_ADDR_VAR 0 2
59849: PUSH
59850: LD_VAR 0 1
59854: PUSH
59855: LD_INT 1
59857: ARRAY
59858: ST_TO_ADDR
// end ;
59859: LD_VAR 0 2
59863: RET
// export function Last ( array ) ; begin
59864: LD_INT 0
59866: PPUSH
// if not array then
59867: LD_VAR 0 1
59871: NOT
59872: IFFALSE 59876
// exit ;
59874: GO 59892
// result := array [ array ] ;
59876: LD_ADDR_VAR 0 2
59880: PUSH
59881: LD_VAR 0 1
59885: PUSH
59886: LD_VAR 0 1
59890: ARRAY
59891: ST_TO_ADDR
// end ;
59892: LD_VAR 0 2
59896: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
59897: LD_INT 0
59899: PPUSH
59900: PPUSH
// result := [ ] ;
59901: LD_ADDR_VAR 0 5
59905: PUSH
59906: EMPTY
59907: ST_TO_ADDR
// if not array then
59908: LD_VAR 0 1
59912: NOT
59913: IFFALSE 59917
// exit ;
59915: GO 60029
// for i := 1 to array do
59917: LD_ADDR_VAR 0 6
59921: PUSH
59922: DOUBLE
59923: LD_INT 1
59925: DEC
59926: ST_TO_ADDR
59927: LD_VAR 0 1
59931: PUSH
59932: FOR_TO
59933: IFFALSE 60027
// if array [ i ] [ index ] = value then
59935: LD_VAR 0 1
59939: PUSH
59940: LD_VAR 0 6
59944: ARRAY
59945: PUSH
59946: LD_VAR 0 2
59950: ARRAY
59951: PUSH
59952: LD_VAR 0 3
59956: EQUAL
59957: IFFALSE 60025
// begin if indexColumn then
59959: LD_VAR 0 4
59963: IFFALSE 59999
// result := Join ( result , array [ i ] [ indexColumn ] ) else
59965: LD_ADDR_VAR 0 5
59969: PUSH
59970: LD_VAR 0 5
59974: PPUSH
59975: LD_VAR 0 1
59979: PUSH
59980: LD_VAR 0 6
59984: ARRAY
59985: PUSH
59986: LD_VAR 0 4
59990: ARRAY
59991: PPUSH
59992: CALL 55037 0 2
59996: ST_TO_ADDR
59997: GO 60025
// result := Join ( result , array [ i ] ) ;
59999: LD_ADDR_VAR 0 5
60003: PUSH
60004: LD_VAR 0 5
60008: PPUSH
60009: LD_VAR 0 1
60013: PUSH
60014: LD_VAR 0 6
60018: ARRAY
60019: PPUSH
60020: CALL 55037 0 2
60024: ST_TO_ADDR
// end ;
60025: GO 59932
60027: POP
60028: POP
// end ;
60029: LD_VAR 0 5
60033: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
60034: LD_INT 0
60036: PPUSH
// if not vehicles or not parkingPoint then
60037: LD_VAR 0 1
60041: NOT
60042: IFTRUE 60051
60044: PUSH
60045: LD_VAR 0 2
60049: NOT
60050: OR
60051: IFFALSE 60055
// exit ;
60053: GO 60153
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
60055: LD_ADDR_VAR 0 1
60059: PUSH
60060: LD_VAR 0 1
60064: PPUSH
60065: LD_INT 50
60067: PUSH
60068: EMPTY
60069: LIST
60070: PUSH
60071: LD_INT 3
60073: PUSH
60074: LD_INT 92
60076: PUSH
60077: LD_VAR 0 2
60081: PUSH
60082: LD_INT 1
60084: ARRAY
60085: PUSH
60086: LD_VAR 0 2
60090: PUSH
60091: LD_INT 2
60093: ARRAY
60094: PUSH
60095: LD_INT 8
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PPUSH
60112: CALL_OW 72
60116: ST_TO_ADDR
// if not vehicles then
60117: LD_VAR 0 1
60121: NOT
60122: IFFALSE 60126
// exit ;
60124: GO 60153
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
60126: LD_VAR 0 1
60130: PPUSH
60131: LD_VAR 0 2
60135: PUSH
60136: LD_INT 1
60138: ARRAY
60139: PPUSH
60140: LD_VAR 0 2
60144: PUSH
60145: LD_INT 2
60147: ARRAY
60148: PPUSH
60149: CALL_OW 111
// end ;
60153: LD_VAR 0 3
60157: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
60158: LD_INT 0
60160: PPUSH
60161: PPUSH
60162: PPUSH
// if not side or not area then
60163: LD_VAR 0 1
60167: NOT
60168: IFTRUE 60177
60170: PUSH
60171: LD_VAR 0 2
60175: NOT
60176: OR
60177: IFFALSE 60181
// exit ;
60179: GO 60300
// tmp := AreaToList ( area , 0 ) ;
60181: LD_ADDR_VAR 0 5
60185: PUSH
60186: LD_VAR 0 2
60190: PPUSH
60191: LD_INT 0
60193: PPUSH
60194: CALL_OW 517
60198: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
60199: LD_ADDR_VAR 0 4
60203: PUSH
60204: DOUBLE
60205: LD_INT 1
60207: DEC
60208: ST_TO_ADDR
60209: LD_VAR 0 5
60213: PUSH
60214: LD_INT 1
60216: ARRAY
60217: PUSH
60218: FOR_TO
60219: IFFALSE 60298
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
60221: LD_VAR 0 5
60225: PUSH
60226: LD_INT 1
60228: ARRAY
60229: PUSH
60230: LD_VAR 0 4
60234: ARRAY
60235: PPUSH
60236: LD_VAR 0 5
60240: PUSH
60241: LD_INT 2
60243: ARRAY
60244: PUSH
60245: LD_VAR 0 4
60249: ARRAY
60250: PPUSH
60251: CALL_OW 351
60255: IFFALSE 60296
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
60257: LD_VAR 0 5
60261: PUSH
60262: LD_INT 1
60264: ARRAY
60265: PUSH
60266: LD_VAR 0 4
60270: ARRAY
60271: PPUSH
60272: LD_VAR 0 5
60276: PUSH
60277: LD_INT 2
60279: ARRAY
60280: PUSH
60281: LD_VAR 0 4
60285: ARRAY
60286: PPUSH
60287: LD_VAR 0 1
60291: PPUSH
60292: CALL_OW 244
// end ;
60296: GO 60218
60298: POP
60299: POP
// end ;
60300: LD_VAR 0 3
60304: RET
// export function UniqueArray ( array ) ; var i ; begin
60305: LD_INT 0
60307: PPUSH
60308: PPUSH
// result := [ ] ;
60309: LD_ADDR_VAR 0 2
60313: PUSH
60314: EMPTY
60315: ST_TO_ADDR
// if not array then
60316: LD_VAR 0 1
60320: NOT
60321: IFFALSE 60325
// exit ;
60323: GO 60386
// for i := 1 to array do
60325: LD_ADDR_VAR 0 3
60329: PUSH
60330: DOUBLE
60331: LD_INT 1
60333: DEC
60334: ST_TO_ADDR
60335: LD_VAR 0 1
60339: PUSH
60340: FOR_TO
60341: IFFALSE 60384
// if not array [ i ] in result then
60343: LD_VAR 0 1
60347: PUSH
60348: LD_VAR 0 3
60352: ARRAY
60353: PUSH
60354: LD_VAR 0 2
60358: IN
60359: NOT
60360: IFFALSE 60382
// result := Join ( result , i ) ;
60362: LD_ADDR_VAR 0 2
60366: PUSH
60367: LD_VAR 0 2
60371: PPUSH
60372: LD_VAR 0 3
60376: PPUSH
60377: CALL 55037 0 2
60381: ST_TO_ADDR
60382: GO 60340
60384: POP
60385: POP
// end ; end_of_file
60386: LD_VAR 0 2
60390: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
60391: LD_VAR 0 1
60395: PUSH
60396: LD_INT 200
60398: DOUBLE
60399: GREATEREQUAL
60400: IFFALSE 60408
60402: LD_INT 299
60404: DOUBLE
60405: LESSEQUAL
60406: IFTRUE 60410
60408: GO 60442
60410: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
60411: LD_VAR 0 1
60415: PPUSH
60416: LD_VAR 0 2
60420: PPUSH
60421: LD_VAR 0 3
60425: PPUSH
60426: LD_VAR 0 4
60430: PPUSH
60431: LD_VAR 0 5
60435: PPUSH
60436: CALL 61304 0 5
60440: GO 60519
60442: LD_INT 300
60444: DOUBLE
60445: GREATEREQUAL
60446: IFFALSE 60454
60448: LD_INT 399
60450: DOUBLE
60451: LESSEQUAL
60452: IFTRUE 60456
60454: GO 60518
60456: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
60457: LD_VAR 0 1
60461: PPUSH
60462: LD_VAR 0 2
60466: PPUSH
60467: LD_VAR 0 3
60471: PPUSH
60472: LD_VAR 0 4
60476: PPUSH
60477: LD_VAR 0 5
60481: PPUSH
60482: LD_VAR 0 6
60486: PPUSH
60487: LD_VAR 0 7
60491: PPUSH
60492: LD_VAR 0 8
60496: PPUSH
60497: LD_VAR 0 9
60501: PPUSH
60502: LD_VAR 0 10
60506: PPUSH
60507: LD_VAR 0 11
60511: PPUSH
60512: CALL 79667 0 11
60516: GO 60519
60518: POP
// end ;
60519: PPOPN 11
60521: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
60522: LD_VAR 0 1
60526: PPUSH
60527: LD_VAR 0 2
60531: PPUSH
60532: LD_VAR 0 3
60536: PPUSH
60537: LD_VAR 0 4
60541: PPUSH
60542: LD_VAR 0 5
60546: PPUSH
60547: CALL 60604 0 5
// end ; end_of_file
60551: PPOPN 5
60553: END
// export function SOS_UnitDestroyed ( un ) ; begin
60554: LD_INT 0
60556: PPUSH
// ComRadiation ( un ) ;
60557: LD_VAR 0 1
60561: PPUSH
60562: CALL 61724 0 1
// end ;
60566: LD_VAR 0 2
60570: RET
// export function SOS_UnitKamikazed ( un ) ; begin
60571: LD_INT 0
60573: PPUSH
// ComRadiation ( un ) ;
60574: LD_VAR 0 1
60578: PPUSH
60579: CALL 61724 0 1
// end ;
60583: LD_VAR 0 2
60587: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
60588: LD_INT 0
60590: PPUSH
// end ;
60591: LD_VAR 0 4
60595: RET
// export function SOS_Command ( cmd ) ; begin
60596: LD_INT 0
60598: PPUSH
// end ;
60599: LD_VAR 0 2
60603: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
60604: LD_INT 0
60606: PPUSH
// end ;
60607: LD_VAR 0 6
60611: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
60612: LD_INT 0
60614: PPUSH
60615: PPUSH
60616: PPUSH
60617: PPUSH
60618: PPUSH
// if not vehicle or not factory then
60619: LD_VAR 0 1
60623: NOT
60624: IFTRUE 60633
60626: PUSH
60627: LD_VAR 0 2
60631: NOT
60632: OR
60633: IFFALSE 60637
// exit ;
60635: GO 61299
// weapon := GetWeapon ( vehicle ) ;
60637: LD_ADDR_VAR 0 7
60641: PUSH
60642: LD_VAR 0 1
60646: PPUSH
60647: CALL_OW 264
60651: ST_TO_ADDR
// if weapon = ar_miner then
60652: LD_VAR 0 7
60656: PUSH
60657: LD_INT 81
60659: EQUAL
60660: IFFALSE 60717
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
60662: LD_ADDR_EXP 43
60666: PUSH
60667: LD_EXP 43
60671: PPUSH
60672: LD_EXP 43
60676: PUSH
60677: LD_INT 1
60679: PLUS
60680: PPUSH
60681: LD_VAR 0 1
60685: PPUSH
60686: CALL_OW 1
60690: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
60691: LD_ADDR_EXP 44
60695: PUSH
60696: LD_EXP 44
60700: PPUSH
60701: LD_EXP 44
60705: PUSH
60706: LD_INT 1
60708: PLUS
60709: PPUSH
60710: EMPTY
60711: PPUSH
60712: CALL_OW 1
60716: ST_TO_ADDR
// end ; if not factoryWaypoints then
60717: LD_EXP 105
60721: NOT
60722: IFFALSE 60726
// exit ;
60724: GO 61299
// for i := 1 to Count ( factoryWaypoints ) do
60726: LD_ADDR_VAR 0 4
60730: PUSH
60731: DOUBLE
60732: LD_INT 1
60734: DEC
60735: ST_TO_ADDR
60736: LD_EXP 105
60740: PPUSH
60741: CALL 19061 0 1
60745: PUSH
60746: FOR_TO
60747: IFFALSE 61297
// if factoryWaypoints [ i ] [ 2 ] = factory then
60749: LD_EXP 105
60753: PUSH
60754: LD_VAR 0 4
60758: ARRAY
60759: PUSH
60760: LD_INT 2
60762: ARRAY
60763: PUSH
60764: LD_VAR 0 2
60768: EQUAL
60769: IFFALSE 61295
// begin if GetControl ( vehicle ) = control_manual then
60771: LD_VAR 0 1
60775: PPUSH
60776: CALL_OW 263
60780: PUSH
60781: LD_INT 1
60783: EQUAL
60784: IFFALSE 61148
// begin driver := IsDrivenBy ( vehicle ) ;
60786: LD_ADDR_VAR 0 5
60790: PUSH
60791: LD_VAR 0 1
60795: PPUSH
60796: CALL_OW 311
60800: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
60801: LD_VAR 0 5
60805: PUSH
60806: LD_EXP 106
60810: IN
60811: IFTRUE 60825
60813: PUSH
60814: LD_VAR 0 1
60818: PUSH
60819: LD_EXP 106
60823: IN
60824: OR
60825: IFFALSE 60831
// exit ;
60827: POP
60828: POP
60829: GO 61299
// if not HasTask ( driver ) then
60831: LD_VAR 0 5
60835: PPUSH
60836: CALL_OW 314
60840: NOT
60841: IFFALSE 61146
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
60843: LD_ADDR_EXP 106
60847: PUSH
60848: LD_EXP 106
60852: PPUSH
60853: LD_VAR 0 5
60857: PPUSH
60858: CALL 55037 0 2
60862: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
60863: LD_ADDR_EXP 106
60867: PUSH
60868: LD_EXP 106
60872: PPUSH
60873: LD_VAR 0 1
60877: PPUSH
60878: CALL 55037 0 2
60882: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60883: LD_ADDR_VAR 0 6
60887: PUSH
60888: LD_EXP 105
60892: PUSH
60893: LD_VAR 0 4
60897: ARRAY
60898: PUSH
60899: LD_INT 3
60901: ARRAY
60902: PPUSH
60903: LD_EXP 105
60907: PUSH
60908: LD_VAR 0 4
60912: ARRAY
60913: PUSH
60914: LD_INT 4
60916: ARRAY
60917: PPUSH
60918: CALL_OW 428
60922: ST_TO_ADDR
// if hex then
60923: LD_VAR 0 6
60927: IFFALSE 60945
// ComMoveUnit ( driver , hex ) else
60929: LD_VAR 0 5
60933: PPUSH
60934: LD_VAR 0 6
60938: PPUSH
60939: CALL_OW 112
60943: GO 61029
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
60945: LD_VAR 0 1
60949: PPUSH
60950: LD_EXP 105
60954: PUSH
60955: LD_VAR 0 4
60959: ARRAY
60960: PUSH
60961: LD_INT 3
60963: ARRAY
60964: PPUSH
60965: LD_EXP 105
60969: PUSH
60970: LD_VAR 0 4
60974: ARRAY
60975: PUSH
60976: LD_INT 4
60978: ARRAY
60979: PPUSH
60980: CALL_OW 297
60984: PUSH
60985: LD_INT 0
60987: GREATER
60988: IFFALSE 61029
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60990: LD_VAR 0 5
60994: PPUSH
60995: LD_EXP 105
60999: PUSH
61000: LD_VAR 0 4
61004: ARRAY
61005: PUSH
61006: LD_INT 3
61008: ARRAY
61009: PPUSH
61010: LD_EXP 105
61014: PUSH
61015: LD_VAR 0 4
61019: ARRAY
61020: PUSH
61021: LD_INT 4
61023: ARRAY
61024: PPUSH
61025: CALL_OW 111
// AddComExitVehicle ( driver ) ;
61029: LD_VAR 0 5
61033: PPUSH
61034: CALL_OW 181
// if Multiplayer then
61038: LD_OWVAR 4
61042: IFFALSE 61091
// begin repeat wait ( 10 ) ;
61044: LD_INT 10
61046: PPUSH
61047: CALL_OW 67
// until not IsInUnit ( driver ) ;
61051: LD_VAR 0 5
61055: PPUSH
61056: CALL_OW 310
61060: NOT
61061: IFFALSE 61044
// if not HasTask ( driver ) then
61063: LD_VAR 0 5
61067: PPUSH
61068: CALL_OW 314
61072: NOT
61073: IFFALSE 61089
// ComEnterUnit ( driver , factory ) ;
61075: LD_VAR 0 5
61079: PPUSH
61080: LD_VAR 0 2
61084: PPUSH
61085: CALL_OW 120
// end else
61089: GO 61105
// AddComEnterUnit ( driver , factory ) ;
61091: LD_VAR 0 5
61095: PPUSH
61096: LD_VAR 0 2
61100: PPUSH
61101: CALL_OW 180
// wait ( 0 0$1 ) ;
61105: LD_INT 35
61107: PPUSH
61108: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
61112: LD_ADDR_EXP 106
61116: PUSH
61117: LD_EXP 106
61121: PUSH
61122: LD_VAR 0 5
61126: DIFF
61127: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
61128: LD_ADDR_EXP 106
61132: PUSH
61133: LD_EXP 106
61137: PUSH
61138: LD_VAR 0 1
61142: DIFF
61143: ST_TO_ADDR
// break ;
61144: GO 61297
// end ; end else
61146: GO 61295
// if GetControl ( vehicle ) = control_remote then
61148: LD_VAR 0 1
61152: PPUSH
61153: CALL_OW 263
61157: PUSH
61158: LD_INT 2
61160: EQUAL
61161: IFFALSE 61247
// begin wait ( 0 0$2 ) ;
61163: LD_INT 70
61165: PPUSH
61166: CALL_OW 67
// repeat wait ( 10 ) ;
61170: LD_INT 10
61172: PPUSH
61173: CALL_OW 67
// Connect ( vehicle ) ;
61177: LD_VAR 0 1
61181: PPUSH
61182: CALL 25339 0 1
// until IsControledBy ( vehicle ) ;
61186: LD_VAR 0 1
61190: PPUSH
61191: CALL_OW 312
61195: IFFALSE 61170
// wait ( 10 ) ;
61197: LD_INT 10
61199: PPUSH
61200: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
61204: LD_VAR 0 1
61208: PPUSH
61209: LD_EXP 105
61213: PUSH
61214: LD_VAR 0 4
61218: ARRAY
61219: PUSH
61220: LD_INT 3
61222: ARRAY
61223: PPUSH
61224: LD_EXP 105
61228: PUSH
61229: LD_VAR 0 4
61233: ARRAY
61234: PUSH
61235: LD_INT 4
61237: ARRAY
61238: PPUSH
61239: CALL_OW 111
// break ;
61243: GO 61297
// end else
61245: GO 61295
// begin wait ( 0 0$3 ) ;
61247: LD_INT 105
61249: PPUSH
61250: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
61254: LD_VAR 0 1
61258: PPUSH
61259: LD_EXP 105
61263: PUSH
61264: LD_VAR 0 4
61268: ARRAY
61269: PUSH
61270: LD_INT 3
61272: ARRAY
61273: PPUSH
61274: LD_EXP 105
61278: PUSH
61279: LD_VAR 0 4
61283: ARRAY
61284: PUSH
61285: LD_INT 4
61287: ARRAY
61288: PPUSH
61289: CALL_OW 111
// break ;
61293: GO 61297
// end ; end ;
61295: GO 60746
61297: POP
61298: POP
// end ;
61299: LD_VAR 0 3
61303: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
61304: LD_INT 0
61306: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
61307: LD_VAR 0 1
61311: PUSH
61312: LD_INT 250
61314: EQUAL
61315: IFFALSE 61332
61317: PUSH
61318: LD_VAR 0 2
61322: PPUSH
61323: CALL_OW 264
61327: PUSH
61328: LD_INT 81
61330: EQUAL
61331: AND
61332: IFFALSE 61353
// MinerPlaceMine ( unit , x , y ) ;
61334: LD_VAR 0 2
61338: PPUSH
61339: LD_VAR 0 4
61343: PPUSH
61344: LD_VAR 0 5
61348: PPUSH
61349: CALL 64699 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
61353: LD_VAR 0 1
61357: PUSH
61358: LD_INT 251
61360: EQUAL
61361: IFFALSE 61378
61363: PUSH
61364: LD_VAR 0 2
61368: PPUSH
61369: CALL_OW 264
61373: PUSH
61374: LD_INT 81
61376: EQUAL
61377: AND
61378: IFFALSE 61399
// MinerDetonateMine ( unit , x , y ) ;
61380: LD_VAR 0 2
61384: PPUSH
61385: LD_VAR 0 4
61389: PPUSH
61390: LD_VAR 0 5
61394: PPUSH
61395: CALL 65106 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
61399: LD_VAR 0 1
61403: PUSH
61404: LD_INT 252
61406: EQUAL
61407: IFFALSE 61424
61409: PUSH
61410: LD_VAR 0 2
61414: PPUSH
61415: CALL_OW 264
61419: PUSH
61420: LD_INT 81
61422: EQUAL
61423: AND
61424: IFFALSE 61445
// MinerCreateMinefield ( unit , x , y ) ;
61426: LD_VAR 0 2
61430: PPUSH
61431: LD_VAR 0 4
61435: PPUSH
61436: LD_VAR 0 5
61440: PPUSH
61441: CALL 65338 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
61445: LD_VAR 0 1
61449: PUSH
61450: LD_INT 253
61452: EQUAL
61453: IFFALSE 61470
61455: PUSH
61456: LD_VAR 0 2
61460: PPUSH
61461: CALL_OW 257
61465: PUSH
61466: LD_INT 5
61468: EQUAL
61469: AND
61470: IFFALSE 61491
// ComBinocular ( unit , x , y ) ;
61472: LD_VAR 0 2
61476: PPUSH
61477: LD_VAR 0 4
61481: PPUSH
61482: LD_VAR 0 5
61486: PPUSH
61487: CALL 65713 0 3
// if selectedUnit then
61491: LD_VAR 0 3
61495: IFFALSE 61555
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
61497: LD_VAR 0 1
61501: PUSH
61502: LD_INT 254
61504: EQUAL
61505: IFFALSE 61522
61507: PUSH
61508: LD_VAR 0 2
61512: PPUSH
61513: CALL_OW 264
61517: PUSH
61518: LD_INT 99
61520: EQUAL
61521: AND
61522: IFFALSE 61539
61524: PUSH
61525: LD_VAR 0 3
61529: PPUSH
61530: CALL_OW 263
61534: PUSH
61535: LD_INT 3
61537: EQUAL
61538: AND
61539: IFFALSE 61555
// HackDestroyVehicle ( unit , selectedUnit ) ;
61541: LD_VAR 0 2
61545: PPUSH
61546: LD_VAR 0 3
61550: PPUSH
61551: CALL 63889 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
61555: LD_VAR 0 1
61559: PUSH
61560: LD_INT 255
61562: EQUAL
61563: IFFALSE 61587
61565: PUSH
61566: LD_VAR 0 2
61570: PPUSH
61571: CALL_OW 264
61575: PUSH
61576: LD_INT 14
61578: PUSH
61579: LD_INT 53
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: IN
61586: AND
61587: IFFALSE 61605
61589: PUSH
61590: LD_VAR 0 4
61594: PPUSH
61595: LD_VAR 0 5
61599: PPUSH
61600: CALL_OW 488
61604: AND
61605: IFFALSE 61629
// CutTreeXYR ( unit , x , y , 12 ) ;
61607: LD_VAR 0 2
61611: PPUSH
61612: LD_VAR 0 4
61616: PPUSH
61617: LD_VAR 0 5
61621: PPUSH
61622: LD_INT 12
61624: PPUSH
61625: CALL 61820 0 4
// if cmd = 256 then
61629: LD_VAR 0 1
61633: PUSH
61634: LD_INT 256
61636: EQUAL
61637: IFFALSE 61658
// SetFactoryWaypoint ( unit , x , y ) ;
61639: LD_VAR 0 2
61643: PPUSH
61644: LD_VAR 0 4
61648: PPUSH
61649: LD_VAR 0 5
61653: PPUSH
61654: CALL 81659 0 3
// if cmd = 257 then
61658: LD_VAR 0 1
61662: PUSH
61663: LD_INT 257
61665: EQUAL
61666: IFFALSE 61687
// SetWarehouseGatheringPoint ( unit , x , y ) ;
61668: LD_VAR 0 2
61672: PPUSH
61673: LD_VAR 0 4
61677: PPUSH
61678: LD_VAR 0 5
61682: PPUSH
61683: CALL 82155 0 3
// if cmd = 258 then
61687: LD_VAR 0 1
61691: PUSH
61692: LD_INT 258
61694: EQUAL
61695: IFFALSE 61719
// BurnTreeXYR ( unit , x , y , 8 ) ;
61697: LD_VAR 0 2
61701: PPUSH
61702: LD_VAR 0 4
61706: PPUSH
61707: LD_VAR 0 5
61711: PPUSH
61712: LD_INT 8
61714: PPUSH
61715: CALL 62242 0 4
// end ;
61719: LD_VAR 0 6
61723: RET
// export function ComRadiation ( un ) ; var eff ; begin
61724: LD_INT 0
61726: PPUSH
61727: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
61728: LD_VAR 0 1
61732: PPUSH
61733: CALL_OW 264
61737: PUSH
61738: LD_INT 91
61740: NONEQUAL
61741: IFFALSE 61745
// exit ;
61743: GO 61815
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
61745: LD_INT 68
61747: PPUSH
61748: LD_VAR 0 1
61752: PPUSH
61753: CALL_OW 255
61757: PPUSH
61758: CALL_OW 321
61762: PUSH
61763: LD_INT 2
61765: EQUAL
61766: IFFALSE 61778
// eff := 50 else
61768: LD_ADDR_VAR 0 3
61772: PUSH
61773: LD_INT 50
61775: ST_TO_ADDR
61776: GO 61786
// eff := 25 ;
61778: LD_ADDR_VAR 0 3
61782: PUSH
61783: LD_INT 25
61785: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
61786: LD_VAR 0 1
61790: PPUSH
61791: CALL_OW 250
61795: PPUSH
61796: LD_VAR 0 1
61800: PPUSH
61801: CALL_OW 251
61805: PPUSH
61806: LD_VAR 0 3
61810: PPUSH
61811: CALL_OW 495
// end ;
61815: LD_VAR 0 2
61819: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
61820: LD_INT 0
61822: PPUSH
61823: PPUSH
61824: PPUSH
61825: PPUSH
61826: PPUSH
61827: PPUSH
61828: PPUSH
61829: PPUSH
61830: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
61831: LD_VAR 0 1
61835: PPUSH
61836: CALL_OW 302
61840: NOT
61841: IFTRUE 61860
61843: PUSH
61844: LD_VAR 0 2
61848: PPUSH
61849: LD_VAR 0 3
61853: PPUSH
61854: CALL_OW 488
61858: NOT
61859: OR
61860: IFTRUE 61869
61862: PUSH
61863: LD_VAR 0 4
61867: NOT
61868: OR
61869: IFFALSE 61873
// exit ;
61871: GO 62237
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
61873: LD_VAR 0 1
61877: PPUSH
61878: CALL_OW 437
61882: PPUSH
61883: CALL 19061 0 1
61887: PUSH
61888: LD_INT 10
61890: GREATER
61891: IFFALSE 61895
// exit ;
61893: GO 62237
// list := [ ] ;
61895: LD_ADDR_VAR 0 13
61899: PUSH
61900: EMPTY
61901: ST_TO_ADDR
// if x - r < 0 then
61902: LD_VAR 0 2
61906: PUSH
61907: LD_VAR 0 4
61911: MINUS
61912: PUSH
61913: LD_INT 0
61915: LESS
61916: IFFALSE 61928
// min_x := 0 else
61918: LD_ADDR_VAR 0 7
61922: PUSH
61923: LD_INT 0
61925: ST_TO_ADDR
61926: GO 61944
// min_x := x - r ;
61928: LD_ADDR_VAR 0 7
61932: PUSH
61933: LD_VAR 0 2
61937: PUSH
61938: LD_VAR 0 4
61942: MINUS
61943: ST_TO_ADDR
// if y - r < 0 then
61944: LD_VAR 0 3
61948: PUSH
61949: LD_VAR 0 4
61953: MINUS
61954: PUSH
61955: LD_INT 0
61957: LESS
61958: IFFALSE 61970
// min_y := 0 else
61960: LD_ADDR_VAR 0 8
61964: PUSH
61965: LD_INT 0
61967: ST_TO_ADDR
61968: GO 61986
// min_y := y - r ;
61970: LD_ADDR_VAR 0 8
61974: PUSH
61975: LD_VAR 0 3
61979: PUSH
61980: LD_VAR 0 4
61984: MINUS
61985: ST_TO_ADDR
// max_x := x + r ;
61986: LD_ADDR_VAR 0 9
61990: PUSH
61991: LD_VAR 0 2
61995: PUSH
61996: LD_VAR 0 4
62000: PLUS
62001: ST_TO_ADDR
// max_y := y + r ;
62002: LD_ADDR_VAR 0 10
62006: PUSH
62007: LD_VAR 0 3
62011: PUSH
62012: LD_VAR 0 4
62016: PLUS
62017: ST_TO_ADDR
// for _x = min_x to max_x do
62018: LD_ADDR_VAR 0 11
62022: PUSH
62023: DOUBLE
62024: LD_VAR 0 7
62028: DEC
62029: ST_TO_ADDR
62030: LD_VAR 0 9
62034: PUSH
62035: FOR_TO
62036: IFFALSE 62155
// for _y = min_y to max_y do
62038: LD_ADDR_VAR 0 12
62042: PUSH
62043: DOUBLE
62044: LD_VAR 0 8
62048: DEC
62049: ST_TO_ADDR
62050: LD_VAR 0 10
62054: PUSH
62055: FOR_TO
62056: IFFALSE 62151
// begin if not ValidHex ( _x , _y ) then
62058: LD_VAR 0 11
62062: PPUSH
62063: LD_VAR 0 12
62067: PPUSH
62068: CALL_OW 488
62072: NOT
62073: IFFALSE 62077
// continue ;
62075: GO 62055
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
62077: LD_VAR 0 11
62081: PPUSH
62082: LD_VAR 0 12
62086: PPUSH
62087: CALL_OW 351
62091: IFFALSE 62109
62093: PUSH
62094: LD_VAR 0 11
62098: PPUSH
62099: LD_VAR 0 12
62103: PPUSH
62104: CALL_OW 554
62108: AND
62109: IFFALSE 62149
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
62111: LD_ADDR_VAR 0 13
62115: PUSH
62116: LD_VAR 0 13
62120: PPUSH
62121: LD_VAR 0 13
62125: PUSH
62126: LD_INT 1
62128: PLUS
62129: PPUSH
62130: LD_VAR 0 11
62134: PUSH
62135: LD_VAR 0 12
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PPUSH
62144: CALL_OW 2
62148: ST_TO_ADDR
// end ;
62149: GO 62055
62151: POP
62152: POP
62153: GO 62035
62155: POP
62156: POP
// if not list then
62157: LD_VAR 0 13
62161: NOT
62162: IFFALSE 62166
// exit ;
62164: GO 62237
// for i in list do
62166: LD_ADDR_VAR 0 6
62170: PUSH
62171: LD_VAR 0 13
62175: PUSH
62176: FOR_IN
62177: IFFALSE 62235
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
62179: LD_VAR 0 1
62183: PPUSH
62184: LD_STRING M
62186: PUSH
62187: LD_VAR 0 6
62191: PUSH
62192: LD_INT 1
62194: ARRAY
62195: PUSH
62196: LD_VAR 0 6
62200: PUSH
62201: LD_INT 2
62203: ARRAY
62204: PUSH
62205: LD_INT 0
62207: PUSH
62208: LD_INT 0
62210: PUSH
62211: LD_INT 0
62213: PUSH
62214: LD_INT 0
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: PUSH
62226: EMPTY
62227: LIST
62228: PPUSH
62229: CALL_OW 447
62233: GO 62176
62235: POP
62236: POP
// end ;
62237: LD_VAR 0 5
62241: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
62242: LD_INT 0
62244: PPUSH
62245: PPUSH
62246: PPUSH
62247: PPUSH
62248: PPUSH
62249: PPUSH
62250: PPUSH
62251: PPUSH
62252: PPUSH
62253: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
62254: LD_VAR 0 1
62258: PPUSH
62259: CALL_OW 302
62263: NOT
62264: IFTRUE 62283
62266: PUSH
62267: LD_VAR 0 2
62271: PPUSH
62272: LD_VAR 0 3
62276: PPUSH
62277: CALL_OW 488
62281: NOT
62282: OR
62283: IFTRUE 62292
62285: PUSH
62286: LD_VAR 0 4
62290: NOT
62291: OR
62292: IFFALSE 62296
// exit ;
62294: GO 62835
// if Count ( GetTaskList ( flame ) ) > 10 then
62296: LD_VAR 0 1
62300: PPUSH
62301: CALL_OW 437
62305: PPUSH
62306: CALL 19061 0 1
62310: PUSH
62311: LD_INT 10
62313: GREATER
62314: IFFALSE 62318
// exit ;
62316: GO 62835
// list := [ ] ;
62318: LD_ADDR_VAR 0 13
62322: PUSH
62323: EMPTY
62324: ST_TO_ADDR
// if x - r < 0 then
62325: LD_VAR 0 2
62329: PUSH
62330: LD_VAR 0 4
62334: MINUS
62335: PUSH
62336: LD_INT 0
62338: LESS
62339: IFFALSE 62351
// min_x := 0 else
62341: LD_ADDR_VAR 0 7
62345: PUSH
62346: LD_INT 0
62348: ST_TO_ADDR
62349: GO 62367
// min_x := x - r ;
62351: LD_ADDR_VAR 0 7
62355: PUSH
62356: LD_VAR 0 2
62360: PUSH
62361: LD_VAR 0 4
62365: MINUS
62366: ST_TO_ADDR
// if y - r < 0 then
62367: LD_VAR 0 3
62371: PUSH
62372: LD_VAR 0 4
62376: MINUS
62377: PUSH
62378: LD_INT 0
62380: LESS
62381: IFFALSE 62393
// min_y := 0 else
62383: LD_ADDR_VAR 0 8
62387: PUSH
62388: LD_INT 0
62390: ST_TO_ADDR
62391: GO 62409
// min_y := y - r ;
62393: LD_ADDR_VAR 0 8
62397: PUSH
62398: LD_VAR 0 3
62402: PUSH
62403: LD_VAR 0 4
62407: MINUS
62408: ST_TO_ADDR
// max_x := x + r ;
62409: LD_ADDR_VAR 0 9
62413: PUSH
62414: LD_VAR 0 2
62418: PUSH
62419: LD_VAR 0 4
62423: PLUS
62424: ST_TO_ADDR
// max_y := y + r ;
62425: LD_ADDR_VAR 0 10
62429: PUSH
62430: LD_VAR 0 3
62434: PUSH
62435: LD_VAR 0 4
62439: PLUS
62440: ST_TO_ADDR
// for _x = min_x to max_x do
62441: LD_ADDR_VAR 0 11
62445: PUSH
62446: DOUBLE
62447: LD_VAR 0 7
62451: DEC
62452: ST_TO_ADDR
62453: LD_VAR 0 9
62457: PUSH
62458: FOR_TO
62459: IFFALSE 62578
// for _y = min_y to max_y do
62461: LD_ADDR_VAR 0 12
62465: PUSH
62466: DOUBLE
62467: LD_VAR 0 8
62471: DEC
62472: ST_TO_ADDR
62473: LD_VAR 0 10
62477: PUSH
62478: FOR_TO
62479: IFFALSE 62574
// begin if not ValidHex ( _x , _y ) then
62481: LD_VAR 0 11
62485: PPUSH
62486: LD_VAR 0 12
62490: PPUSH
62491: CALL_OW 488
62495: NOT
62496: IFFALSE 62500
// continue ;
62498: GO 62478
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
62500: LD_VAR 0 11
62504: PPUSH
62505: LD_VAR 0 12
62509: PPUSH
62510: CALL_OW 351
62514: IFFALSE 62532
62516: PUSH
62517: LD_VAR 0 11
62521: PPUSH
62522: LD_VAR 0 12
62526: PPUSH
62527: CALL_OW 554
62531: AND
62532: IFFALSE 62572
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
62534: LD_ADDR_VAR 0 13
62538: PUSH
62539: LD_VAR 0 13
62543: PPUSH
62544: LD_VAR 0 13
62548: PUSH
62549: LD_INT 1
62551: PLUS
62552: PPUSH
62553: LD_VAR 0 11
62557: PUSH
62558: LD_VAR 0 12
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PPUSH
62567: CALL_OW 2
62571: ST_TO_ADDR
// end ;
62572: GO 62478
62574: POP
62575: POP
62576: GO 62458
62578: POP
62579: POP
// if not list then
62580: LD_VAR 0 13
62584: NOT
62585: IFFALSE 62589
// exit ;
62587: GO 62835
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
62589: LD_ADDR_VAR 0 13
62593: PUSH
62594: LD_VAR 0 1
62598: PPUSH
62599: LD_VAR 0 13
62603: PPUSH
62604: LD_INT 1
62606: PPUSH
62607: LD_INT 1
62609: PPUSH
62610: CALL 22467 0 4
62614: ST_TO_ADDR
// ComStop ( flame ) ;
62615: LD_VAR 0 1
62619: PPUSH
62620: CALL_OW 141
// for i in list do
62624: LD_ADDR_VAR 0 6
62628: PUSH
62629: LD_VAR 0 13
62633: PUSH
62634: FOR_IN
62635: IFFALSE 62666
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
62637: LD_VAR 0 1
62641: PPUSH
62642: LD_VAR 0 6
62646: PUSH
62647: LD_INT 1
62649: ARRAY
62650: PPUSH
62651: LD_VAR 0 6
62655: PUSH
62656: LD_INT 2
62658: ARRAY
62659: PPUSH
62660: CALL_OW 176
62664: GO 62634
62666: POP
62667: POP
// repeat wait ( 0 0$1 ) ;
62668: LD_INT 35
62670: PPUSH
62671: CALL_OW 67
// task := GetTaskList ( flame ) ;
62675: LD_ADDR_VAR 0 14
62679: PUSH
62680: LD_VAR 0 1
62684: PPUSH
62685: CALL_OW 437
62689: ST_TO_ADDR
// if not task then
62690: LD_VAR 0 14
62694: NOT
62695: IFFALSE 62699
// exit ;
62697: GO 62835
// if task [ 1 ] [ 1 ] <> | then
62699: LD_VAR 0 14
62703: PUSH
62704: LD_INT 1
62706: ARRAY
62707: PUSH
62708: LD_INT 1
62710: ARRAY
62711: PUSH
62712: LD_STRING |
62714: NONEQUAL
62715: IFFALSE 62719
// exit ;
62717: GO 62835
// _x := task [ 1 ] [ 2 ] ;
62719: LD_ADDR_VAR 0 11
62723: PUSH
62724: LD_VAR 0 14
62728: PUSH
62729: LD_INT 1
62731: ARRAY
62732: PUSH
62733: LD_INT 2
62735: ARRAY
62736: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
62737: LD_ADDR_VAR 0 12
62741: PUSH
62742: LD_VAR 0 14
62746: PUSH
62747: LD_INT 1
62749: ARRAY
62750: PUSH
62751: LD_INT 3
62753: ARRAY
62754: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
62755: LD_VAR 0 11
62759: PPUSH
62760: LD_VAR 0 12
62764: PPUSH
62765: CALL_OW 351
62769: NOT
62770: IFTRUE 62789
62772: PUSH
62773: LD_VAR 0 11
62777: PPUSH
62778: LD_VAR 0 12
62782: PPUSH
62783: CALL_OW 554
62787: NOT
62788: OR
62789: IFFALSE 62823
// begin task := Delete ( task , 1 ) ;
62791: LD_ADDR_VAR 0 14
62795: PUSH
62796: LD_VAR 0 14
62800: PPUSH
62801: LD_INT 1
62803: PPUSH
62804: CALL_OW 3
62808: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
62809: LD_VAR 0 1
62813: PPUSH
62814: LD_VAR 0 14
62818: PPUSH
62819: CALL_OW 446
// end ; until not HasTask ( flame ) ;
62823: LD_VAR 0 1
62827: PPUSH
62828: CALL_OW 314
62832: NOT
62833: IFFALSE 62668
// end ;
62835: LD_VAR 0 5
62839: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
62840: LD_EXP 36
62844: NOT
62845: IFFALSE 62895
62847: GO 62849
62849: DISABLE
// begin initHack := true ;
62850: LD_ADDR_EXP 36
62854: PUSH
62855: LD_INT 1
62857: ST_TO_ADDR
// hackTanks := [ ] ;
62858: LD_ADDR_EXP 37
62862: PUSH
62863: EMPTY
62864: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
62865: LD_ADDR_EXP 38
62869: PUSH
62870: EMPTY
62871: ST_TO_ADDR
// hackLimit := 3 ;
62872: LD_ADDR_EXP 39
62876: PUSH
62877: LD_INT 3
62879: ST_TO_ADDR
// hackDist := 12 ;
62880: LD_ADDR_EXP 40
62884: PUSH
62885: LD_INT 12
62887: ST_TO_ADDR
// hackCounter := [ ] ;
62888: LD_ADDR_EXP 41
62892: PUSH
62893: EMPTY
62894: ST_TO_ADDR
// end ;
62895: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
62896: LD_EXP 36
62900: IFFALSE 62918
62902: PUSH
62903: LD_INT 34
62905: PUSH
62906: LD_INT 99
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PPUSH
62913: CALL_OW 69
62917: AND
62918: IFFALSE 63171
62920: GO 62922
62922: DISABLE
62923: LD_INT 0
62925: PPUSH
62926: PPUSH
// begin enable ;
62927: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
62928: LD_ADDR_VAR 0 1
62932: PUSH
62933: LD_INT 34
62935: PUSH
62936: LD_INT 99
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PPUSH
62943: CALL_OW 69
62947: PUSH
62948: FOR_IN
62949: IFFALSE 63169
// begin if not i in hackTanks then
62951: LD_VAR 0 1
62955: PUSH
62956: LD_EXP 37
62960: IN
62961: NOT
62962: IFFALSE 63045
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
62964: LD_ADDR_EXP 37
62968: PUSH
62969: LD_EXP 37
62973: PPUSH
62974: LD_EXP 37
62978: PUSH
62979: LD_INT 1
62981: PLUS
62982: PPUSH
62983: LD_VAR 0 1
62987: PPUSH
62988: CALL_OW 1
62992: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
62993: LD_ADDR_EXP 38
62997: PUSH
62998: LD_EXP 38
63002: PPUSH
63003: LD_EXP 38
63007: PUSH
63008: LD_INT 1
63010: PLUS
63011: PPUSH
63012: EMPTY
63013: PPUSH
63014: CALL_OW 1
63018: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
63019: LD_ADDR_EXP 41
63023: PUSH
63024: LD_EXP 41
63028: PPUSH
63029: LD_EXP 41
63033: PUSH
63034: LD_INT 1
63036: PLUS
63037: PPUSH
63038: EMPTY
63039: PPUSH
63040: CALL_OW 1
63044: ST_TO_ADDR
// end ; if not IsOk ( i ) then
63045: LD_VAR 0 1
63049: PPUSH
63050: CALL_OW 302
63054: NOT
63055: IFFALSE 63068
// begin HackUnlinkAll ( i ) ;
63057: LD_VAR 0 1
63061: PPUSH
63062: CALL 63174 0 1
// continue ;
63066: GO 62948
// end ; HackCheckCapturedStatus ( i ) ;
63068: LD_VAR 0 1
63072: PPUSH
63073: CALL 63619 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
63077: LD_ADDR_VAR 0 2
63081: PUSH
63082: LD_INT 81
63084: PUSH
63085: LD_VAR 0 1
63089: PPUSH
63090: CALL_OW 255
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 33
63101: PUSH
63102: LD_INT 3
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 91
63111: PUSH
63112: LD_VAR 0 1
63116: PUSH
63117: LD_EXP 40
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 50
63129: PUSH
63130: EMPTY
63131: LIST
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: PPUSH
63139: CALL_OW 69
63143: ST_TO_ADDR
// if not tmp then
63144: LD_VAR 0 2
63148: NOT
63149: IFFALSE 63153
// continue ;
63151: GO 62948
// HackLink ( i , tmp ) ;
63153: LD_VAR 0 1
63157: PPUSH
63158: LD_VAR 0 2
63162: PPUSH
63163: CALL 63310 0 2
// end ;
63167: GO 62948
63169: POP
63170: POP
// end ;
63171: PPOPN 2
63173: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
63174: LD_INT 0
63176: PPUSH
63177: PPUSH
63178: PPUSH
// if not hack in hackTanks then
63179: LD_VAR 0 1
63183: PUSH
63184: LD_EXP 37
63188: IN
63189: NOT
63190: IFFALSE 63194
// exit ;
63192: GO 63305
// index := GetElementIndex ( hackTanks , hack ) ;
63194: LD_ADDR_VAR 0 4
63198: PUSH
63199: LD_EXP 37
63203: PPUSH
63204: LD_VAR 0 1
63208: PPUSH
63209: CALL 21762 0 2
63213: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
63214: LD_EXP 38
63218: PUSH
63219: LD_VAR 0 4
63223: ARRAY
63224: IFFALSE 63305
// begin for i in hackTanksCaptured [ index ] do
63226: LD_ADDR_VAR 0 3
63230: PUSH
63231: LD_EXP 38
63235: PUSH
63236: LD_VAR 0 4
63240: ARRAY
63241: PUSH
63242: FOR_IN
63243: IFFALSE 63269
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
63245: LD_VAR 0 3
63249: PUSH
63250: LD_INT 1
63252: ARRAY
63253: PPUSH
63254: LD_VAR 0 3
63258: PUSH
63259: LD_INT 2
63261: ARRAY
63262: PPUSH
63263: CALL_OW 235
63267: GO 63242
63269: POP
63270: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
63271: LD_ADDR_EXP 38
63275: PUSH
63276: LD_EXP 38
63280: PPUSH
63281: LD_VAR 0 4
63285: PPUSH
63286: EMPTY
63287: PPUSH
63288: CALL_OW 1
63292: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
63293: LD_VAR 0 1
63297: PPUSH
63298: LD_INT 0
63300: PPUSH
63301: CALL_OW 505
// end ; end ;
63305: LD_VAR 0 2
63309: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
63310: LD_INT 0
63312: PPUSH
63313: PPUSH
63314: PPUSH
// if not hack in hackTanks or not vehicles then
63315: LD_VAR 0 1
63319: PUSH
63320: LD_EXP 37
63324: IN
63325: NOT
63326: IFTRUE 63335
63328: PUSH
63329: LD_VAR 0 2
63333: NOT
63334: OR
63335: IFFALSE 63339
// exit ;
63337: GO 63614
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
63339: LD_ADDR_VAR 0 2
63343: PUSH
63344: LD_VAR 0 1
63348: PPUSH
63349: LD_VAR 0 2
63353: PPUSH
63354: LD_INT 1
63356: PPUSH
63357: LD_INT 1
63359: PPUSH
63360: CALL 22414 0 4
63364: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
63365: LD_ADDR_VAR 0 5
63369: PUSH
63370: LD_EXP 37
63374: PPUSH
63375: LD_VAR 0 1
63379: PPUSH
63380: CALL 21762 0 2
63384: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
63385: LD_EXP 38
63389: PUSH
63390: LD_VAR 0 5
63394: ARRAY
63395: PUSH
63396: LD_EXP 39
63400: LESS
63401: IFFALSE 63590
// begin for i := 1 to vehicles do
63403: LD_ADDR_VAR 0 4
63407: PUSH
63408: DOUBLE
63409: LD_INT 1
63411: DEC
63412: ST_TO_ADDR
63413: LD_VAR 0 2
63417: PUSH
63418: FOR_TO
63419: IFFALSE 63588
// begin if hackTanksCaptured [ index ] = hackLimit then
63421: LD_EXP 38
63425: PUSH
63426: LD_VAR 0 5
63430: ARRAY
63431: PUSH
63432: LD_EXP 39
63436: EQUAL
63437: IFFALSE 63441
// break ;
63439: GO 63588
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
63441: LD_ADDR_EXP 41
63445: PUSH
63446: LD_EXP 41
63450: PPUSH
63451: LD_VAR 0 5
63455: PPUSH
63456: LD_EXP 41
63460: PUSH
63461: LD_VAR 0 5
63465: ARRAY
63466: PUSH
63467: LD_INT 1
63469: PLUS
63470: PPUSH
63471: CALL_OW 1
63475: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
63476: LD_ADDR_EXP 38
63480: PUSH
63481: LD_EXP 38
63485: PPUSH
63486: LD_VAR 0 5
63490: PUSH
63491: LD_EXP 38
63495: PUSH
63496: LD_VAR 0 5
63500: ARRAY
63501: PUSH
63502: LD_INT 1
63504: PLUS
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PPUSH
63510: LD_VAR 0 2
63514: PUSH
63515: LD_VAR 0 4
63519: ARRAY
63520: PUSH
63521: LD_VAR 0 2
63525: PUSH
63526: LD_VAR 0 4
63530: ARRAY
63531: PPUSH
63532: CALL_OW 255
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PPUSH
63541: CALL 21979 0 3
63545: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
63546: LD_VAR 0 2
63550: PUSH
63551: LD_VAR 0 4
63555: ARRAY
63556: PPUSH
63557: LD_VAR 0 1
63561: PPUSH
63562: CALL_OW 255
63566: PPUSH
63567: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
63571: LD_VAR 0 2
63575: PUSH
63576: LD_VAR 0 4
63580: ARRAY
63581: PPUSH
63582: CALL_OW 141
// end ;
63586: GO 63418
63588: POP
63589: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
63590: LD_VAR 0 1
63594: PPUSH
63595: LD_EXP 38
63599: PUSH
63600: LD_VAR 0 5
63604: ARRAY
63605: PUSH
63606: LD_INT 0
63608: PLUS
63609: PPUSH
63610: CALL_OW 505
// end ;
63614: LD_VAR 0 3
63618: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
63619: LD_INT 0
63621: PPUSH
63622: PPUSH
63623: PPUSH
63624: PPUSH
// if not hack in hackTanks then
63625: LD_VAR 0 1
63629: PUSH
63630: LD_EXP 37
63634: IN
63635: NOT
63636: IFFALSE 63640
// exit ;
63638: GO 63884
// index := GetElementIndex ( hackTanks , hack ) ;
63640: LD_ADDR_VAR 0 4
63644: PUSH
63645: LD_EXP 37
63649: PPUSH
63650: LD_VAR 0 1
63654: PPUSH
63655: CALL 21762 0 2
63659: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
63660: LD_ADDR_VAR 0 3
63664: PUSH
63665: DOUBLE
63666: LD_EXP 38
63670: PUSH
63671: LD_VAR 0 4
63675: ARRAY
63676: INC
63677: ST_TO_ADDR
63678: LD_INT 1
63680: PUSH
63681: FOR_DOWNTO
63682: IFFALSE 63858
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
63684: LD_ADDR_VAR 0 5
63688: PUSH
63689: LD_EXP 38
63693: PUSH
63694: LD_VAR 0 4
63698: ARRAY
63699: PUSH
63700: LD_VAR 0 3
63704: ARRAY
63705: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
63706: LD_VAR 0 5
63710: PUSH
63711: LD_INT 1
63713: ARRAY
63714: PPUSH
63715: CALL_OW 302
63719: NOT
63720: IFTRUE 63748
63722: PUSH
63723: LD_VAR 0 5
63727: PUSH
63728: LD_INT 1
63730: ARRAY
63731: PPUSH
63732: CALL_OW 255
63736: PUSH
63737: LD_VAR 0 1
63741: PPUSH
63742: CALL_OW 255
63746: NONEQUAL
63747: OR
63748: IFFALSE 63856
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
63750: LD_VAR 0 5
63754: PUSH
63755: LD_INT 1
63757: ARRAY
63758: PPUSH
63759: CALL_OW 305
63763: IFFALSE 63791
63765: PUSH
63766: LD_VAR 0 5
63770: PUSH
63771: LD_INT 1
63773: ARRAY
63774: PPUSH
63775: CALL_OW 255
63779: PUSH
63780: LD_VAR 0 1
63784: PPUSH
63785: CALL_OW 255
63789: EQUAL
63790: AND
63791: IFFALSE 63815
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
63793: LD_VAR 0 5
63797: PUSH
63798: LD_INT 1
63800: ARRAY
63801: PPUSH
63802: LD_VAR 0 5
63806: PUSH
63807: LD_INT 2
63809: ARRAY
63810: PPUSH
63811: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
63815: LD_ADDR_EXP 38
63819: PUSH
63820: LD_EXP 38
63824: PPUSH
63825: LD_VAR 0 4
63829: PPUSH
63830: LD_EXP 38
63834: PUSH
63835: LD_VAR 0 4
63839: ARRAY
63840: PPUSH
63841: LD_VAR 0 3
63845: PPUSH
63846: CALL_OW 3
63850: PPUSH
63851: CALL_OW 1
63855: ST_TO_ADDR
// end ; end ;
63856: GO 63681
63858: POP
63859: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
63860: LD_VAR 0 1
63864: PPUSH
63865: LD_EXP 38
63869: PUSH
63870: LD_VAR 0 4
63874: ARRAY
63875: PUSH
63876: LD_INT 0
63878: PLUS
63879: PPUSH
63880: CALL_OW 505
// end ;
63884: LD_VAR 0 2
63888: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
63889: LD_INT 0
63891: PPUSH
63892: PPUSH
63893: PPUSH
63894: PPUSH
// if not hack in hackTanks then
63895: LD_VAR 0 1
63899: PUSH
63900: LD_EXP 37
63904: IN
63905: NOT
63906: IFFALSE 63910
// exit ;
63908: GO 63995
// index := GetElementIndex ( hackTanks , hack ) ;
63910: LD_ADDR_VAR 0 5
63914: PUSH
63915: LD_EXP 37
63919: PPUSH
63920: LD_VAR 0 1
63924: PPUSH
63925: CALL 21762 0 2
63929: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
63930: LD_ADDR_VAR 0 4
63934: PUSH
63935: DOUBLE
63936: LD_INT 1
63938: DEC
63939: ST_TO_ADDR
63940: LD_EXP 38
63944: PUSH
63945: LD_VAR 0 5
63949: ARRAY
63950: PUSH
63951: FOR_TO
63952: IFFALSE 63993
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
63954: LD_EXP 38
63958: PUSH
63959: LD_VAR 0 5
63963: ARRAY
63964: PUSH
63965: LD_VAR 0 4
63969: ARRAY
63970: PUSH
63971: LD_INT 1
63973: ARRAY
63974: PUSH
63975: LD_VAR 0 2
63979: EQUAL
63980: IFFALSE 63991
// KillUnit ( vehicle ) ;
63982: LD_VAR 0 2
63986: PPUSH
63987: CALL_OW 66
63991: GO 63951
63993: POP
63994: POP
// end ;
63995: LD_VAR 0 3
63999: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
64000: LD_EXP 42
64004: NOT
64005: IFFALSE 64138
64007: GO 64009
64009: DISABLE
64010: LD_INT 0
64012: PPUSH
// begin initMiner := true ;
64013: LD_ADDR_EXP 42
64017: PUSH
64018: LD_INT 1
64020: ST_TO_ADDR
// minersList := [ ] ;
64021: LD_ADDR_EXP 43
64025: PUSH
64026: EMPTY
64027: ST_TO_ADDR
// minerMinesList := [ ] ;
64028: LD_ADDR_EXP 44
64032: PUSH
64033: EMPTY
64034: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
64035: LD_ADDR_EXP 45
64039: PUSH
64040: LD_INT 10
64042: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
64043: LD_ADDR_VAR 0 1
64047: PUSH
64048: LD_INT 34
64050: PUSH
64051: LD_INT 81
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PPUSH
64058: CALL_OW 69
64062: PUSH
64063: FOR_IN
64064: IFFALSE 64136
// begin if not i in minersList then
64066: LD_VAR 0 1
64070: PUSH
64071: LD_EXP 43
64075: IN
64076: NOT
64077: IFFALSE 64134
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
64079: LD_ADDR_EXP 43
64083: PUSH
64084: LD_EXP 43
64088: PPUSH
64089: LD_EXP 43
64093: PUSH
64094: LD_INT 1
64096: PLUS
64097: PPUSH
64098: LD_VAR 0 1
64102: PPUSH
64103: CALL_OW 1
64107: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
64108: LD_ADDR_EXP 44
64112: PUSH
64113: LD_EXP 44
64117: PPUSH
64118: LD_EXP 44
64122: PUSH
64123: LD_INT 1
64125: PLUS
64126: PPUSH
64127: EMPTY
64128: PPUSH
64129: CALL_OW 1
64133: ST_TO_ADDR
// end end ;
64134: GO 64063
64136: POP
64137: POP
// end ;
64138: PPOPN 1
64140: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
64141: LD_EXP 42
64145: IFFALSE 64176
64147: PUSH
64148: LD_EXP 44
64152: PPUSH
64153: CALL 19061 0 1
64157: IFTRUE 64175
64159: PUSH
64160: LD_INT 34
64162: PUSH
64163: LD_INT 81
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PPUSH
64170: CALL_OW 69
64174: OR
64175: AND
64176: IFFALSE 64696
64178: GO 64180
64180: DISABLE
64181: LD_INT 0
64183: PPUSH
64184: PPUSH
64185: PPUSH
64186: PPUSH
// begin enable ;
64187: ENABLE
// for i := minerMinesList downto 1 do
64188: LD_ADDR_VAR 0 1
64192: PUSH
64193: DOUBLE
64194: LD_EXP 44
64198: INC
64199: ST_TO_ADDR
64200: LD_INT 1
64202: PUSH
64203: FOR_DOWNTO
64204: IFFALSE 64694
// begin side := GetSide ( minersList [ i ] ) ;
64206: LD_ADDR_VAR 0 3
64210: PUSH
64211: LD_EXP 43
64215: PUSH
64216: LD_VAR 0 1
64220: ARRAY
64221: PPUSH
64222: CALL_OW 255
64226: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
64227: LD_EXP 43
64231: PUSH
64232: LD_VAR 0 1
64236: ARRAY
64237: PPUSH
64238: CALL_OW 300
64242: IFFALSE 64263
64244: PUSH
64245: LD_VAR 0 3
64249: PUSH
64250: LD_OWVAR 2
64254: PUSH
64255: LD_INT 9
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: IN
64262: AND
64263: IFFALSE 64296
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
64265: LD_EXP 43
64269: PUSH
64270: LD_VAR 0 1
64274: ARRAY
64275: PPUSH
64276: LD_EXP 44
64280: PUSH
64281: LD_VAR 0 1
64285: ARRAY
64286: PPUSH
64287: CALL 19061 0 1
64291: PPUSH
64292: CALL_OW 505
// if not minerMinesList [ i ] then
64296: LD_EXP 44
64300: PUSH
64301: LD_VAR 0 1
64305: ARRAY
64306: NOT
64307: IFFALSE 64311
// continue ;
64309: GO 64203
// for j := minerMinesList [ i ] downto 1 do
64311: LD_ADDR_VAR 0 2
64315: PUSH
64316: DOUBLE
64317: LD_EXP 44
64321: PUSH
64322: LD_VAR 0 1
64326: ARRAY
64327: INC
64328: ST_TO_ADDR
64329: LD_INT 1
64331: PUSH
64332: FOR_DOWNTO
64333: IFFALSE 64690
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
64335: LD_EXP 43
64339: PUSH
64340: LD_VAR 0 1
64344: ARRAY
64345: PPUSH
64346: CALL_OW 301
64350: IFTRUE 64370
64352: PUSH
64353: LD_EXP 43
64357: PUSH
64358: LD_VAR 0 1
64362: ARRAY
64363: PPUSH
64364: CALL_OW 305
64368: NOT
64369: OR
64370: IFFALSE 64461
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
64372: LD_EXP 44
64376: PUSH
64377: LD_VAR 0 1
64381: ARRAY
64382: PUSH
64383: LD_VAR 0 2
64387: ARRAY
64388: PUSH
64389: LD_INT 1
64391: ARRAY
64392: PPUSH
64393: LD_EXP 44
64397: PUSH
64398: LD_VAR 0 1
64402: ARRAY
64403: PUSH
64404: LD_VAR 0 2
64408: ARRAY
64409: PUSH
64410: LD_INT 2
64412: ARRAY
64413: PPUSH
64414: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
64418: LD_ADDR_EXP 44
64422: PUSH
64423: LD_EXP 44
64427: PPUSH
64428: LD_VAR 0 1
64432: PPUSH
64433: LD_EXP 44
64437: PUSH
64438: LD_VAR 0 1
64442: ARRAY
64443: PPUSH
64444: LD_VAR 0 2
64448: PPUSH
64449: CALL_OW 3
64453: PPUSH
64454: CALL_OW 1
64458: ST_TO_ADDR
// continue ;
64459: GO 64332
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
64461: LD_ADDR_VAR 0 4
64465: PUSH
64466: LD_EXP 44
64470: PUSH
64471: LD_VAR 0 1
64475: ARRAY
64476: PUSH
64477: LD_VAR 0 2
64481: ARRAY
64482: PUSH
64483: LD_INT 1
64485: ARRAY
64486: PPUSH
64487: LD_EXP 44
64491: PUSH
64492: LD_VAR 0 1
64496: ARRAY
64497: PUSH
64498: LD_VAR 0 2
64502: ARRAY
64503: PUSH
64504: LD_INT 2
64506: ARRAY
64507: PPUSH
64508: CALL_OW 428
64512: ST_TO_ADDR
// if not tmp then
64513: LD_VAR 0 4
64517: NOT
64518: IFFALSE 64522
// continue ;
64520: GO 64332
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
64522: LD_VAR 0 4
64526: PUSH
64527: LD_INT 81
64529: PUSH
64530: LD_VAR 0 3
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PPUSH
64539: CALL_OW 69
64543: IN
64544: IFFALSE 64594
64546: PUSH
64547: LD_EXP 44
64551: PUSH
64552: LD_VAR 0 1
64556: ARRAY
64557: PUSH
64558: LD_VAR 0 2
64562: ARRAY
64563: PUSH
64564: LD_INT 1
64566: ARRAY
64567: PPUSH
64568: LD_EXP 44
64572: PUSH
64573: LD_VAR 0 1
64577: ARRAY
64578: PUSH
64579: LD_VAR 0 2
64583: ARRAY
64584: PUSH
64585: LD_INT 2
64587: ARRAY
64588: PPUSH
64589: CALL_OW 458
64593: AND
64594: IFFALSE 64688
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
64596: LD_EXP 44
64600: PUSH
64601: LD_VAR 0 1
64605: ARRAY
64606: PUSH
64607: LD_VAR 0 2
64611: ARRAY
64612: PUSH
64613: LD_INT 1
64615: ARRAY
64616: PPUSH
64617: LD_EXP 44
64621: PUSH
64622: LD_VAR 0 1
64626: ARRAY
64627: PUSH
64628: LD_VAR 0 2
64632: ARRAY
64633: PUSH
64634: LD_INT 2
64636: ARRAY
64637: PPUSH
64638: LD_VAR 0 3
64642: PPUSH
64643: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
64647: LD_ADDR_EXP 44
64651: PUSH
64652: LD_EXP 44
64656: PPUSH
64657: LD_VAR 0 1
64661: PPUSH
64662: LD_EXP 44
64666: PUSH
64667: LD_VAR 0 1
64671: ARRAY
64672: PPUSH
64673: LD_VAR 0 2
64677: PPUSH
64678: CALL_OW 3
64682: PPUSH
64683: CALL_OW 1
64687: ST_TO_ADDR
// end ; end ;
64688: GO 64332
64690: POP
64691: POP
// end ;
64692: GO 64203
64694: POP
64695: POP
// end ;
64696: PPOPN 4
64698: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
64699: LD_INT 0
64701: PPUSH
64702: PPUSH
64703: PPUSH
64704: PPUSH
// result := false ;
64705: LD_ADDR_VAR 0 4
64709: PUSH
64710: LD_INT 0
64712: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
64713: LD_VAR 0 1
64717: PPUSH
64718: CALL_OW 264
64722: PUSH
64723: LD_INT 81
64725: EQUAL
64726: NOT
64727: IFFALSE 64731
// exit ;
64729: GO 65101
// side := GetSide ( unit ) ;
64731: LD_ADDR_VAR 0 6
64735: PUSH
64736: LD_VAR 0 1
64740: PPUSH
64741: CALL_OW 255
64745: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
64746: LD_ADDR_VAR 0 5
64750: PUSH
64751: LD_EXP 43
64755: PPUSH
64756: LD_VAR 0 1
64760: PPUSH
64761: CALL 21762 0 2
64765: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
64766: LD_EXP 44
64770: PUSH
64771: LD_VAR 0 5
64775: ARRAY
64776: PUSH
64777: LD_EXP 45
64781: GREATEREQUAL
64782: IFFALSE 64786
// exit ;
64784: GO 65101
// ComMoveXY ( unit , x , y ) ;
64786: LD_VAR 0 1
64790: PPUSH
64791: LD_VAR 0 2
64795: PPUSH
64796: LD_VAR 0 3
64800: PPUSH
64801: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64805: LD_INT 35
64807: PPUSH
64808: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
64812: LD_VAR 0 1
64816: PPUSH
64817: LD_VAR 0 2
64821: PPUSH
64822: LD_VAR 0 3
64826: PPUSH
64827: CALL 53818 0 3
64831: NOT
64832: IFFALSE 64845
64834: PUSH
64835: LD_VAR 0 1
64839: PPUSH
64840: CALL_OW 314
64844: AND
64845: IFFALSE 64849
// exit ;
64847: GO 65101
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
64849: LD_VAR 0 2
64853: PPUSH
64854: LD_VAR 0 3
64858: PPUSH
64859: CALL_OW 428
64863: PUSH
64864: LD_VAR 0 1
64868: EQUAL
64869: IFFALSE 64883
64871: PUSH
64872: LD_VAR 0 1
64876: PPUSH
64877: CALL_OW 314
64881: NOT
64882: AND
64883: IFFALSE 64805
// if MineAtPos ( x , y ) then
64885: LD_VAR 0 2
64889: PPUSH
64890: LD_VAR 0 3
64894: PPUSH
64895: CALL_OW 458
64899: IFFALSE 64903
// exit ;
64901: GO 65101
// if your_side = side then
64903: LD_OWVAR 2
64907: PUSH
64908: LD_VAR 0 6
64912: EQUAL
64913: IFFALSE 64932
// PlaySoundXY ( x , y , PlantMine ) ;
64915: LD_VAR 0 2
64919: PPUSH
64920: LD_VAR 0 3
64924: PPUSH
64925: LD_STRING PlantMine
64927: PPUSH
64928: CALL_OW 366
// repeat wait ( 1 ) ;
64932: LD_INT 1
64934: PPUSH
64935: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
64939: LD_VAR 0 2
64943: PPUSH
64944: LD_VAR 0 3
64948: PPUSH
64949: LD_VAR 0 6
64953: PPUSH
64954: LD_INT 0
64956: PPUSH
64957: CALL_OW 454
64961: IFFALSE 64932
// if MineAtPos ( x , y ) then
64963: LD_VAR 0 2
64967: PPUSH
64968: LD_VAR 0 3
64972: PPUSH
64973: CALL_OW 458
64977: IFFALSE 65093
// begin for i in minerMinesList [ index ] do
64979: LD_ADDR_VAR 0 7
64983: PUSH
64984: LD_EXP 44
64988: PUSH
64989: LD_VAR 0 5
64993: ARRAY
64994: PUSH
64995: FOR_IN
64996: IFFALSE 65038
// if i [ 1 ] = x and i [ 2 ] = y then
64998: LD_VAR 0 7
65002: PUSH
65003: LD_INT 1
65005: ARRAY
65006: PUSH
65007: LD_VAR 0 2
65011: EQUAL
65012: IFFALSE 65030
65014: PUSH
65015: LD_VAR 0 7
65019: PUSH
65020: LD_INT 2
65022: ARRAY
65023: PUSH
65024: LD_VAR 0 3
65028: EQUAL
65029: AND
65030: IFFALSE 65036
// exit ;
65032: POP
65033: POP
65034: GO 65101
65036: GO 64995
65038: POP
65039: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
65040: LD_ADDR_EXP 44
65044: PUSH
65045: LD_EXP 44
65049: PPUSH
65050: LD_VAR 0 5
65054: PUSH
65055: LD_EXP 44
65059: PUSH
65060: LD_VAR 0 5
65064: ARRAY
65065: PUSH
65066: LD_INT 1
65068: PLUS
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PPUSH
65074: LD_VAR 0 2
65078: PUSH
65079: LD_VAR 0 3
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PPUSH
65088: CALL 21979 0 3
65092: ST_TO_ADDR
// end ; result := true ;
65093: LD_ADDR_VAR 0 4
65097: PUSH
65098: LD_INT 1
65100: ST_TO_ADDR
// end ;
65101: LD_VAR 0 4
65105: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
65106: LD_INT 0
65108: PPUSH
65109: PPUSH
65110: PPUSH
// if not unit in minersList then
65111: LD_VAR 0 1
65115: PUSH
65116: LD_EXP 43
65120: IN
65121: NOT
65122: IFFALSE 65126
// exit ;
65124: GO 65333
// index := GetElementIndex ( minersList , unit ) ;
65126: LD_ADDR_VAR 0 6
65130: PUSH
65131: LD_EXP 43
65135: PPUSH
65136: LD_VAR 0 1
65140: PPUSH
65141: CALL 21762 0 2
65145: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
65146: LD_ADDR_VAR 0 5
65150: PUSH
65151: DOUBLE
65152: LD_EXP 44
65156: PUSH
65157: LD_VAR 0 6
65161: ARRAY
65162: INC
65163: ST_TO_ADDR
65164: LD_INT 1
65166: PUSH
65167: FOR_DOWNTO
65168: IFFALSE 65331
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
65170: LD_EXP 44
65174: PUSH
65175: LD_VAR 0 6
65179: ARRAY
65180: PUSH
65181: LD_VAR 0 5
65185: ARRAY
65186: PUSH
65187: LD_INT 1
65189: ARRAY
65190: PPUSH
65191: LD_EXP 44
65195: PUSH
65196: LD_VAR 0 6
65200: ARRAY
65201: PUSH
65202: LD_VAR 0 5
65206: ARRAY
65207: PUSH
65208: LD_INT 2
65210: ARRAY
65211: PPUSH
65212: LD_VAR 0 2
65216: PPUSH
65217: LD_VAR 0 3
65221: PPUSH
65222: CALL_OW 298
65226: PUSH
65227: LD_INT 6
65229: LESS
65230: IFFALSE 65329
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
65232: LD_EXP 44
65236: PUSH
65237: LD_VAR 0 6
65241: ARRAY
65242: PUSH
65243: LD_VAR 0 5
65247: ARRAY
65248: PUSH
65249: LD_INT 1
65251: ARRAY
65252: PPUSH
65253: LD_EXP 44
65257: PUSH
65258: LD_VAR 0 6
65262: ARRAY
65263: PUSH
65264: LD_VAR 0 5
65268: ARRAY
65269: PUSH
65270: LD_INT 2
65272: ARRAY
65273: PPUSH
65274: LD_VAR 0 1
65278: PPUSH
65279: CALL_OW 255
65283: PPUSH
65284: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
65288: LD_ADDR_EXP 44
65292: PUSH
65293: LD_EXP 44
65297: PPUSH
65298: LD_VAR 0 6
65302: PPUSH
65303: LD_EXP 44
65307: PUSH
65308: LD_VAR 0 6
65312: ARRAY
65313: PPUSH
65314: LD_VAR 0 5
65318: PPUSH
65319: CALL_OW 3
65323: PPUSH
65324: CALL_OW 1
65328: ST_TO_ADDR
// end ; end ;
65329: GO 65167
65331: POP
65332: POP
// end ;
65333: LD_VAR 0 4
65337: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
65338: LD_INT 0
65340: PPUSH
65341: PPUSH
65342: PPUSH
65343: PPUSH
65344: PPUSH
65345: PPUSH
65346: PPUSH
65347: PPUSH
65348: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
65349: LD_VAR 0 1
65353: PPUSH
65354: CALL_OW 264
65358: PUSH
65359: LD_INT 81
65361: EQUAL
65362: NOT
65363: IFTRUE 65378
65365: PUSH
65366: LD_VAR 0 1
65370: PUSH
65371: LD_EXP 43
65375: IN
65376: NOT
65377: OR
65378: IFFALSE 65382
// exit ;
65380: GO 65708
// index := GetElementIndex ( minersList , unit ) ;
65382: LD_ADDR_VAR 0 6
65386: PUSH
65387: LD_EXP 43
65391: PPUSH
65392: LD_VAR 0 1
65396: PPUSH
65397: CALL 21762 0 2
65401: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
65402: LD_ADDR_VAR 0 8
65406: PUSH
65407: LD_EXP 45
65411: PUSH
65412: LD_EXP 44
65416: PUSH
65417: LD_VAR 0 6
65421: ARRAY
65422: MINUS
65423: ST_TO_ADDR
// if not minesFreeAmount then
65424: LD_VAR 0 8
65428: NOT
65429: IFFALSE 65433
// exit ;
65431: GO 65708
// tmp := [ ] ;
65433: LD_ADDR_VAR 0 7
65437: PUSH
65438: EMPTY
65439: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
65440: LD_ADDR_VAR 0 5
65444: PUSH
65445: DOUBLE
65446: LD_INT 1
65448: DEC
65449: ST_TO_ADDR
65450: LD_VAR 0 8
65454: PUSH
65455: FOR_TO
65456: IFFALSE 65655
// begin _d := rand ( 0 , 5 ) ;
65458: LD_ADDR_VAR 0 11
65462: PUSH
65463: LD_INT 0
65465: PPUSH
65466: LD_INT 5
65468: PPUSH
65469: CALL_OW 12
65473: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
65474: LD_ADDR_VAR 0 12
65478: PUSH
65479: LD_INT 2
65481: PPUSH
65482: LD_INT 6
65484: PPUSH
65485: CALL_OW 12
65489: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
65490: LD_ADDR_VAR 0 9
65494: PUSH
65495: LD_VAR 0 2
65499: PPUSH
65500: LD_VAR 0 11
65504: PPUSH
65505: LD_VAR 0 12
65509: PPUSH
65510: CALL_OW 272
65514: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
65515: LD_ADDR_VAR 0 10
65519: PUSH
65520: LD_VAR 0 3
65524: PPUSH
65525: LD_VAR 0 11
65529: PPUSH
65530: LD_VAR 0 12
65534: PPUSH
65535: CALL_OW 273
65539: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
65540: LD_VAR 0 9
65544: PPUSH
65545: LD_VAR 0 10
65549: PPUSH
65550: CALL_OW 488
65554: IFFALSE 65578
65556: PUSH
65557: LD_VAR 0 9
65561: PUSH
65562: LD_VAR 0 10
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_VAR 0 7
65575: IN
65576: NOT
65577: AND
65578: IFFALSE 65597
65580: PUSH
65581: LD_VAR 0 9
65585: PPUSH
65586: LD_VAR 0 10
65590: PPUSH
65591: CALL_OW 458
65595: NOT
65596: AND
65597: IFFALSE 65639
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
65599: LD_ADDR_VAR 0 7
65603: PUSH
65604: LD_VAR 0 7
65608: PPUSH
65609: LD_VAR 0 7
65613: PUSH
65614: LD_INT 1
65616: PLUS
65617: PPUSH
65618: LD_VAR 0 9
65622: PUSH
65623: LD_VAR 0 10
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PPUSH
65632: CALL_OW 1
65636: ST_TO_ADDR
65637: GO 65653
// i := i - 1 ;
65639: LD_ADDR_VAR 0 5
65643: PUSH
65644: LD_VAR 0 5
65648: PUSH
65649: LD_INT 1
65651: MINUS
65652: ST_TO_ADDR
// end ;
65653: GO 65455
65655: POP
65656: POP
// for i in tmp do
65657: LD_ADDR_VAR 0 5
65661: PUSH
65662: LD_VAR 0 7
65666: PUSH
65667: FOR_IN
65668: IFFALSE 65706
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
65670: LD_VAR 0 1
65674: PPUSH
65675: LD_VAR 0 5
65679: PUSH
65680: LD_INT 1
65682: ARRAY
65683: PPUSH
65684: LD_VAR 0 5
65688: PUSH
65689: LD_INT 2
65691: ARRAY
65692: PPUSH
65693: CALL 64699 0 3
65697: NOT
65698: IFFALSE 65704
// exit ;
65700: POP
65701: POP
65702: GO 65708
65704: GO 65667
65706: POP
65707: POP
// end ;
65708: LD_VAR 0 4
65712: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
65713: LD_INT 0
65715: PPUSH
65716: PPUSH
65717: PPUSH
65718: PPUSH
65719: PPUSH
65720: PPUSH
65721: PPUSH
65722: PPUSH
65723: PPUSH
// if GetClass ( unit ) <> class_sniper then
65724: LD_VAR 0 1
65728: PPUSH
65729: CALL_OW 257
65733: PUSH
65734: LD_INT 5
65736: NONEQUAL
65737: IFFALSE 65741
// exit ;
65739: GO 66211
// dist := 8 ;
65741: LD_ADDR_VAR 0 5
65745: PUSH
65746: LD_INT 8
65748: ST_TO_ADDR
// viewRange := 12 ;
65749: LD_ADDR_VAR 0 8
65753: PUSH
65754: LD_INT 12
65756: ST_TO_ADDR
// side := GetSide ( unit ) ;
65757: LD_ADDR_VAR 0 6
65761: PUSH
65762: LD_VAR 0 1
65766: PPUSH
65767: CALL_OW 255
65771: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
65772: LD_INT 61
65774: PPUSH
65775: LD_VAR 0 6
65779: PPUSH
65780: CALL_OW 321
65784: PUSH
65785: LD_INT 2
65787: EQUAL
65788: IFFALSE 65798
// viewRange := 16 ;
65790: LD_ADDR_VAR 0 8
65794: PUSH
65795: LD_INT 16
65797: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
65798: LD_VAR 0 1
65802: PPUSH
65803: LD_VAR 0 2
65807: PPUSH
65808: LD_VAR 0 3
65812: PPUSH
65813: CALL_OW 297
65817: PUSH
65818: LD_VAR 0 5
65822: GREATER
65823: IFFALSE 65902
// begin ComMoveXY ( unit , x , y ) ;
65825: LD_VAR 0 1
65829: PPUSH
65830: LD_VAR 0 2
65834: PPUSH
65835: LD_VAR 0 3
65839: PPUSH
65840: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
65844: LD_INT 35
65846: PPUSH
65847: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
65851: LD_VAR 0 1
65855: PPUSH
65856: LD_VAR 0 2
65860: PPUSH
65861: LD_VAR 0 3
65865: PPUSH
65866: CALL 53818 0 3
65870: NOT
65871: IFFALSE 65875
// exit ;
65873: GO 66211
// until GetDistUnitXY ( unit , x , y ) < dist ;
65875: LD_VAR 0 1
65879: PPUSH
65880: LD_VAR 0 2
65884: PPUSH
65885: LD_VAR 0 3
65889: PPUSH
65890: CALL_OW 297
65894: PUSH
65895: LD_VAR 0 5
65899: LESS
65900: IFFALSE 65844
// end ; ComTurnXY ( unit , x , y ) ;
65902: LD_VAR 0 1
65906: PPUSH
65907: LD_VAR 0 2
65911: PPUSH
65912: LD_VAR 0 3
65916: PPUSH
65917: CALL_OW 118
// repeat if Multiplayer then
65921: LD_OWVAR 4
65925: IFFALSE 65936
// wait ( 35 ) else
65927: LD_INT 35
65929: PPUSH
65930: CALL_OW 67
65934: GO 65943
// wait ( 5 ) ;
65936: LD_INT 5
65938: PPUSH
65939: CALL_OW 67
// _d := GetDir ( unit ) ;
65943: LD_ADDR_VAR 0 11
65947: PUSH
65948: LD_VAR 0 1
65952: PPUSH
65953: CALL_OW 254
65957: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
65958: LD_ADDR_VAR 0 7
65962: PUSH
65963: LD_VAR 0 1
65967: PPUSH
65968: CALL_OW 250
65972: PPUSH
65973: LD_VAR 0 1
65977: PPUSH
65978: CALL_OW 251
65982: PPUSH
65983: LD_VAR 0 2
65987: PPUSH
65988: LD_VAR 0 3
65992: PPUSH
65993: CALL 56454 0 4
65997: ST_TO_ADDR
// until dir = _d ;
65998: LD_VAR 0 7
66002: PUSH
66003: LD_VAR 0 11
66007: EQUAL
66008: IFFALSE 65921
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
66010: LD_ADDR_VAR 0 9
66014: PUSH
66015: LD_VAR 0 1
66019: PPUSH
66020: CALL_OW 250
66024: PPUSH
66025: LD_VAR 0 7
66029: PPUSH
66030: LD_VAR 0 5
66034: PPUSH
66035: CALL_OW 272
66039: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
66040: LD_ADDR_VAR 0 10
66044: PUSH
66045: LD_VAR 0 1
66049: PPUSH
66050: CALL_OW 251
66054: PPUSH
66055: LD_VAR 0 7
66059: PPUSH
66060: LD_VAR 0 5
66064: PPUSH
66065: CALL_OW 273
66069: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66070: LD_VAR 0 9
66074: PPUSH
66075: LD_VAR 0 10
66079: PPUSH
66080: CALL_OW 488
66084: NOT
66085: IFFALSE 66089
// exit ;
66087: GO 66211
// ComAnimCustom ( unit , 1 ) ;
66089: LD_VAR 0 1
66093: PPUSH
66094: LD_INT 1
66096: PPUSH
66097: CALL_OW 592
// p := 0 ;
66101: LD_ADDR_VAR 0 12
66105: PUSH
66106: LD_INT 0
66108: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
66109: LD_VAR 0 9
66113: PPUSH
66114: LD_VAR 0 10
66118: PPUSH
66119: LD_VAR 0 6
66123: PPUSH
66124: LD_VAR 0 8
66128: PPUSH
66129: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
66133: LD_INT 35
66135: PPUSH
66136: CALL_OW 67
// p := Inc ( p ) ;
66140: LD_ADDR_VAR 0 12
66144: PUSH
66145: LD_VAR 0 12
66149: PPUSH
66150: CALL 56410 0 1
66154: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
66155: LD_VAR 0 12
66159: PUSH
66160: LD_INT 3
66162: EQUAL
66163: IFTRUE 66177
66165: PUSH
66166: LD_VAR 0 1
66170: PPUSH
66171: CALL_OW 302
66175: NOT
66176: OR
66177: IFTRUE 66190
66179: PUSH
66180: LD_VAR 0 1
66184: PPUSH
66185: CALL_OW 301
66189: OR
66190: IFFALSE 66133
// RemoveSeeing ( _x , _y , side ) ;
66192: LD_VAR 0 9
66196: PPUSH
66197: LD_VAR 0 10
66201: PPUSH
66202: LD_VAR 0 6
66206: PPUSH
66207: CALL_OW 331
// end ;
66211: LD_VAR 0 4
66215: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
66216: LD_INT 0
66218: PPUSH
66219: PPUSH
66220: PPUSH
66221: PPUSH
66222: PPUSH
66223: PPUSH
66224: PPUSH
66225: PPUSH
66226: PPUSH
66227: PPUSH
66228: PPUSH
// if not unit then
66229: LD_VAR 0 1
66233: NOT
66234: IFFALSE 66238
// exit ;
66236: GO 66509
// side := GetSide ( unit ) ;
66238: LD_ADDR_VAR 0 3
66242: PUSH
66243: LD_VAR 0 1
66247: PPUSH
66248: CALL_OW 255
66252: ST_TO_ADDR
// x := GetX ( unit ) ;
66253: LD_ADDR_VAR 0 5
66257: PUSH
66258: LD_VAR 0 1
66262: PPUSH
66263: CALL_OW 250
66267: ST_TO_ADDR
// y := GetY ( unit ) ;
66268: LD_ADDR_VAR 0 6
66272: PUSH
66273: LD_VAR 0 1
66277: PPUSH
66278: CALL_OW 251
66282: ST_TO_ADDR
// r := 8 ;
66283: LD_ADDR_VAR 0 4
66287: PUSH
66288: LD_INT 8
66290: ST_TO_ADDR
// if x - r < 0 then
66291: LD_VAR 0 5
66295: PUSH
66296: LD_VAR 0 4
66300: MINUS
66301: PUSH
66302: LD_INT 0
66304: LESS
66305: IFFALSE 66317
// min_x := 0 else
66307: LD_ADDR_VAR 0 7
66311: PUSH
66312: LD_INT 0
66314: ST_TO_ADDR
66315: GO 66333
// min_x := x - r ;
66317: LD_ADDR_VAR 0 7
66321: PUSH
66322: LD_VAR 0 5
66326: PUSH
66327: LD_VAR 0 4
66331: MINUS
66332: ST_TO_ADDR
// if y - r < 0 then
66333: LD_VAR 0 6
66337: PUSH
66338: LD_VAR 0 4
66342: MINUS
66343: PUSH
66344: LD_INT 0
66346: LESS
66347: IFFALSE 66359
// min_y := 0 else
66349: LD_ADDR_VAR 0 8
66353: PUSH
66354: LD_INT 0
66356: ST_TO_ADDR
66357: GO 66375
// min_y := y - r ;
66359: LD_ADDR_VAR 0 8
66363: PUSH
66364: LD_VAR 0 6
66368: PUSH
66369: LD_VAR 0 4
66373: MINUS
66374: ST_TO_ADDR
// max_x := x + r ;
66375: LD_ADDR_VAR 0 9
66379: PUSH
66380: LD_VAR 0 5
66384: PUSH
66385: LD_VAR 0 4
66389: PLUS
66390: ST_TO_ADDR
// max_y := y + r ;
66391: LD_ADDR_VAR 0 10
66395: PUSH
66396: LD_VAR 0 6
66400: PUSH
66401: LD_VAR 0 4
66405: PLUS
66406: ST_TO_ADDR
// for _x = min_x to max_x do
66407: LD_ADDR_VAR 0 11
66411: PUSH
66412: DOUBLE
66413: LD_VAR 0 7
66417: DEC
66418: ST_TO_ADDR
66419: LD_VAR 0 9
66423: PUSH
66424: FOR_TO
66425: IFFALSE 66507
// for _y = min_y to max_y do
66427: LD_ADDR_VAR 0 12
66431: PUSH
66432: DOUBLE
66433: LD_VAR 0 8
66437: DEC
66438: ST_TO_ADDR
66439: LD_VAR 0 10
66443: PUSH
66444: FOR_TO
66445: IFFALSE 66503
// begin if not ValidHex ( _x , _y ) then
66447: LD_VAR 0 11
66451: PPUSH
66452: LD_VAR 0 12
66456: PPUSH
66457: CALL_OW 488
66461: NOT
66462: IFFALSE 66466
// continue ;
66464: GO 66444
// if MineAtPos ( _x , _y ) then
66466: LD_VAR 0 11
66470: PPUSH
66471: LD_VAR 0 12
66475: PPUSH
66476: CALL_OW 458
66480: IFFALSE 66501
// ViewMineAtPos ( _x , _y , side ) ;
66482: LD_VAR 0 11
66486: PPUSH
66487: LD_VAR 0 12
66491: PPUSH
66492: LD_VAR 0 3
66496: PPUSH
66497: CALL_OW 457
// end ;
66501: GO 66444
66503: POP
66504: POP
66505: GO 66424
66507: POP
66508: POP
// end ;
66509: LD_VAR 0 2
66513: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
66514: LD_INT 0
66516: PPUSH
66517: PPUSH
66518: PPUSH
66519: PPUSH
66520: PPUSH
66521: PPUSH
66522: PPUSH
// if not units then
66523: LD_VAR 0 1
66527: NOT
66528: IFFALSE 66532
// exit ;
66530: GO 66996
// scaners := [ ] ;
66532: LD_ADDR_VAR 0 6
66536: PUSH
66537: EMPTY
66538: ST_TO_ADDR
// for i in units do
66539: LD_ADDR_VAR 0 3
66543: PUSH
66544: LD_VAR 0 1
66548: PUSH
66549: FOR_IN
66550: IFFALSE 66707
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
66552: LD_VAR 0 3
66556: PPUSH
66557: CALL_OW 264
66561: PUSH
66562: LD_INT 11
66564: NONEQUAL
66565: IFTRUE 66579
66567: PUSH
66568: LD_VAR 0 3
66572: PPUSH
66573: CALL_OW 302
66577: NOT
66578: OR
66579: IFTRUE 66596
66581: PUSH
66582: LD_VAR 0 3
66586: PPUSH
66587: CALL_OW 110
66591: PUSH
66592: LD_INT 502
66594: EQUAL
66595: OR
66596: IFFALSE 66600
// continue ;
66598: GO 66549
// ComStop ( i ) ;
66600: LD_VAR 0 3
66604: PPUSH
66605: CALL_OW 141
// x := GetX ( i ) ;
66609: LD_ADDR_VAR 0 4
66613: PUSH
66614: LD_VAR 0 3
66618: PPUSH
66619: CALL_OW 250
66623: ST_TO_ADDR
// y := GetY ( i ) ;
66624: LD_ADDR_VAR 0 5
66628: PUSH
66629: LD_VAR 0 3
66633: PPUSH
66634: CALL_OW 251
66638: ST_TO_ADDR
// if GetSide ( i ) = your_side then
66639: LD_VAR 0 3
66643: PPUSH
66644: CALL_OW 255
66648: PUSH
66649: LD_OWVAR 2
66653: EQUAL
66654: IFFALSE 66673
// PlaySoundXY ( x , y , mineDetector ) ;
66656: LD_VAR 0 4
66660: PPUSH
66661: LD_VAR 0 5
66665: PPUSH
66666: LD_STRING mineDetector
66668: PPUSH
66669: CALL_OW 366
// scaners := Join ( scaners , i ) ;
66673: LD_ADDR_VAR 0 6
66677: PUSH
66678: LD_VAR 0 6
66682: PPUSH
66683: LD_VAR 0 3
66687: PPUSH
66688: CALL 55037 0 2
66692: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
66693: LD_VAR 0 3
66697: PPUSH
66698: LD_INT 502
66700: PPUSH
66701: CALL_OW 109
// end ;
66705: GO 66549
66707: POP
66708: POP
// if not scaners then
66709: LD_VAR 0 6
66713: NOT
66714: IFFALSE 66718
// exit ;
66716: GO 66996
// wait ( 3 ) ;
66718: LD_INT 3
66720: PPUSH
66721: CALL_OW 67
// timer := 6 ;
66725: LD_ADDR_VAR 0 7
66729: PUSH
66730: LD_INT 6
66732: ST_TO_ADDR
// repeat for i in scaners do
66733: LD_ADDR_VAR 0 3
66737: PUSH
66738: LD_VAR 0 6
66742: PUSH
66743: FOR_IN
66744: IFFALSE 66894
// begin side := GetSide ( i ) ;
66746: LD_ADDR_VAR 0 8
66750: PUSH
66751: LD_VAR 0 3
66755: PPUSH
66756: CALL_OW 255
66760: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
66761: LD_VAR 0 3
66765: PPUSH
66766: CALL_OW 302
66770: NOT
66771: IFTRUE 66784
66773: PUSH
66774: LD_VAR 0 3
66778: PPUSH
66779: CALL_OW 314
66783: OR
66784: IFTRUE 66815
66786: PUSH
66787: LD_VAR 0 3
66791: PPUSH
66792: CALL_OW 263
66796: PUSH
66797: LD_INT 1
66799: EQUAL
66800: IFFALSE 66814
66802: PUSH
66803: LD_VAR 0 3
66807: PPUSH
66808: CALL_OW 311
66812: NOT
66813: AND
66814: OR
66815: IFFALSE 66859
// begin SetUnitDisplayNumber ( i , 0 ) ;
66817: LD_VAR 0 3
66821: PPUSH
66822: LD_INT 0
66824: PPUSH
66825: CALL_OW 505
// SetTag ( i , 0 ) ;
66829: LD_VAR 0 3
66833: PPUSH
66834: LD_INT 0
66836: PPUSH
66837: CALL_OW 109
// scaners := scaners diff i ;
66841: LD_ADDR_VAR 0 6
66845: PUSH
66846: LD_VAR 0 6
66850: PUSH
66851: LD_VAR 0 3
66855: DIFF
66856: ST_TO_ADDR
// continue ;
66857: GO 66743
// end ; if side in [ your_side , 9 ] then
66859: LD_VAR 0 8
66863: PUSH
66864: LD_OWVAR 2
66868: PUSH
66869: LD_INT 9
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: IN
66876: IFFALSE 66892
// SetUnitDisplayNumber ( i , timer ) ;
66878: LD_VAR 0 3
66882: PPUSH
66883: LD_VAR 0 7
66887: PPUSH
66888: CALL_OW 505
// end ;
66892: GO 66743
66894: POP
66895: POP
// if not scaners then
66896: LD_VAR 0 6
66900: NOT
66901: IFFALSE 66905
// exit ;
66903: GO 66996
// timer := Dec ( timer ) ;
66905: LD_ADDR_VAR 0 7
66909: PUSH
66910: LD_VAR 0 7
66914: PPUSH
66915: CALL 56432 0 1
66919: ST_TO_ADDR
// wait ( 0 0$1 ) ;
66920: LD_INT 35
66922: PPUSH
66923: CALL_OW 67
// until timer = 0 ;
66927: LD_VAR 0 7
66931: PUSH
66932: LD_INT 0
66934: EQUAL
66935: IFFALSE 66733
// if not scaners then
66937: LD_VAR 0 6
66941: NOT
66942: IFFALSE 66946
// exit ;
66944: GO 66996
// for i in scaners do
66946: LD_ADDR_VAR 0 3
66950: PUSH
66951: LD_VAR 0 6
66955: PUSH
66956: FOR_IN
66957: IFFALSE 66994
// begin SetUnitDisplayNumber ( i , 0 ) ;
66959: LD_VAR 0 3
66963: PPUSH
66964: LD_INT 0
66966: PPUSH
66967: CALL_OW 505
// SetTag ( i , 0 ) ;
66971: LD_VAR 0 3
66975: PPUSH
66976: LD_INT 0
66978: PPUSH
66979: CALL_OW 109
// RevealDetectorMine ( i ) ;
66983: LD_VAR 0 3
66987: PPUSH
66988: CALL 66216 0 1
// end ;
66992: GO 66956
66994: POP
66995: POP
// end ;
66996: LD_VAR 0 2
67000: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
67001: LD_INT 0
67003: PPUSH
// if p1 = mine_detector_mode then
67004: LD_VAR 0 2
67008: PUSH
67009: LD_INT 103
67011: EQUAL
67012: IFFALSE 67023
// DetectMine ( units ) ;
67014: LD_VAR 0 1
67018: PPUSH
67019: CALL 66514 0 1
// end ; end_of_file
67023: LD_VAR 0 7
67027: RET
// export globalGameSaveCounter ; every 0 0$1 do
67028: GO 67030
67030: DISABLE
// begin enable ;
67031: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
67032: LD_STRING updateTimer(
67034: PUSH
67035: LD_OWVAR 1
67039: STR
67040: PUSH
67041: LD_STRING );
67043: STR
67044: PPUSH
67045: CALL_OW 559
// end ;
67049: END
// every 0 0$1 do
67050: GO 67052
67052: DISABLE
// begin globalGameSaveCounter := 0 ;
67053: LD_ADDR_EXP 46
67057: PUSH
67058: LD_INT 0
67060: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
67061: LD_STRING setGameSaveCounter(0)
67063: PPUSH
67064: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
67068: LD_STRING initStreamRollete();
67070: PPUSH
67071: CALL_OW 559
// InitStreamMode ;
67075: CALL 68427 0 0
// DefineStreamItems ( false ) ;
67079: LD_INT 0
67081: PPUSH
67082: CALL 68891 0 1
// end ;
67086: END
// export function SOS_MapStart ( ) ; begin
67087: LD_INT 0
67089: PPUSH
// if streamModeActive then
67090: LD_EXP 47
67094: IFFALSE 67103
// DefineStreamItems ( true ) ;
67096: LD_INT 1
67098: PPUSH
67099: CALL 68891 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
67103: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
67105: PPUSH
67106: CALL_OW 559
// UpdateLuaVariables ( ) ;
67110: CALL 67127 0 0
// UpdateFactoryWaypoints ( ) ;
67114: CALL 82013 0 0
// UpdateWarehouseGatheringPoints ( ) ;
67118: CALL 82265 0 0
// end ;
67122: LD_VAR 0 1
67126: RET
// function UpdateLuaVariables ( ) ; begin
67127: LD_INT 0
67129: PPUSH
// if globalGameSaveCounter then
67130: LD_EXP 46
67134: IFFALSE 67168
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
67136: LD_ADDR_EXP 46
67140: PUSH
67141: LD_EXP 46
67145: PPUSH
67146: CALL 56410 0 1
67150: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
67151: LD_STRING setGameSaveCounter(
67153: PUSH
67154: LD_EXP 46
67158: STR
67159: PUSH
67160: LD_STRING )
67162: STR
67163: PPUSH
67164: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
67168: LD_STRING setGameDifficulty(
67170: PUSH
67171: LD_OWVAR 67
67175: STR
67176: PUSH
67177: LD_STRING )
67179: STR
67180: PPUSH
67181: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
67185: LD_STRING displayDifficulty(
67187: PUSH
67188: LD_OWVAR 67
67192: STR
67193: PUSH
67194: LD_STRING )
67196: STR
67197: PPUSH
67198: CALL_OW 559
// end ;
67202: LD_VAR 0 1
67206: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
67207: LD_INT 0
67209: PPUSH
// if p2 = stream_mode then
67210: LD_VAR 0 2
67214: PUSH
67215: LD_INT 100
67217: EQUAL
67218: IFFALSE 68221
// begin if not StreamModeActive then
67220: LD_EXP 47
67224: NOT
67225: IFFALSE 67235
// StreamModeActive := true ;
67227: LD_ADDR_EXP 47
67231: PUSH
67232: LD_INT 1
67234: ST_TO_ADDR
// if p3 = 0 then
67235: LD_VAR 0 3
67239: PUSH
67240: LD_INT 0
67242: EQUAL
67243: IFFALSE 67249
// InitStreamMode ;
67245: CALL 68427 0 0
// if p3 = 1 then
67249: LD_VAR 0 3
67253: PUSH
67254: LD_INT 1
67256: EQUAL
67257: IFFALSE 67267
// sRocket := true ;
67259: LD_ADDR_EXP 52
67263: PUSH
67264: LD_INT 1
67266: ST_TO_ADDR
// if p3 = 2 then
67267: LD_VAR 0 3
67271: PUSH
67272: LD_INT 2
67274: EQUAL
67275: IFFALSE 67285
// sSpeed := true ;
67277: LD_ADDR_EXP 51
67281: PUSH
67282: LD_INT 1
67284: ST_TO_ADDR
// if p3 = 3 then
67285: LD_VAR 0 3
67289: PUSH
67290: LD_INT 3
67292: EQUAL
67293: IFFALSE 67303
// sEngine := true ;
67295: LD_ADDR_EXP 53
67299: PUSH
67300: LD_INT 1
67302: ST_TO_ADDR
// if p3 = 4 then
67303: LD_VAR 0 3
67307: PUSH
67308: LD_INT 4
67310: EQUAL
67311: IFFALSE 67321
// sSpec := true ;
67313: LD_ADDR_EXP 50
67317: PUSH
67318: LD_INT 1
67320: ST_TO_ADDR
// if p3 = 5 then
67321: LD_VAR 0 3
67325: PUSH
67326: LD_INT 5
67328: EQUAL
67329: IFFALSE 67339
// sLevel := true ;
67331: LD_ADDR_EXP 54
67335: PUSH
67336: LD_INT 1
67338: ST_TO_ADDR
// if p3 = 6 then
67339: LD_VAR 0 3
67343: PUSH
67344: LD_INT 6
67346: EQUAL
67347: IFFALSE 67357
// sArmoury := true ;
67349: LD_ADDR_EXP 55
67353: PUSH
67354: LD_INT 1
67356: ST_TO_ADDR
// if p3 = 7 then
67357: LD_VAR 0 3
67361: PUSH
67362: LD_INT 7
67364: EQUAL
67365: IFFALSE 67375
// sRadar := true ;
67367: LD_ADDR_EXP 56
67371: PUSH
67372: LD_INT 1
67374: ST_TO_ADDR
// if p3 = 8 then
67375: LD_VAR 0 3
67379: PUSH
67380: LD_INT 8
67382: EQUAL
67383: IFFALSE 67393
// sBunker := true ;
67385: LD_ADDR_EXP 57
67389: PUSH
67390: LD_INT 1
67392: ST_TO_ADDR
// if p3 = 9 then
67393: LD_VAR 0 3
67397: PUSH
67398: LD_INT 9
67400: EQUAL
67401: IFFALSE 67411
// sHack := true ;
67403: LD_ADDR_EXP 58
67407: PUSH
67408: LD_INT 1
67410: ST_TO_ADDR
// if p3 = 10 then
67411: LD_VAR 0 3
67415: PUSH
67416: LD_INT 10
67418: EQUAL
67419: IFFALSE 67429
// sFire := true ;
67421: LD_ADDR_EXP 59
67425: PUSH
67426: LD_INT 1
67428: ST_TO_ADDR
// if p3 = 11 then
67429: LD_VAR 0 3
67433: PUSH
67434: LD_INT 11
67436: EQUAL
67437: IFFALSE 67447
// sRefresh := true ;
67439: LD_ADDR_EXP 60
67443: PUSH
67444: LD_INT 1
67446: ST_TO_ADDR
// if p3 = 12 then
67447: LD_VAR 0 3
67451: PUSH
67452: LD_INT 12
67454: EQUAL
67455: IFFALSE 67465
// sExp := true ;
67457: LD_ADDR_EXP 61
67461: PUSH
67462: LD_INT 1
67464: ST_TO_ADDR
// if p3 = 13 then
67465: LD_VAR 0 3
67469: PUSH
67470: LD_INT 13
67472: EQUAL
67473: IFFALSE 67483
// sDepot := true ;
67475: LD_ADDR_EXP 62
67479: PUSH
67480: LD_INT 1
67482: ST_TO_ADDR
// if p3 = 14 then
67483: LD_VAR 0 3
67487: PUSH
67488: LD_INT 14
67490: EQUAL
67491: IFFALSE 67501
// sFlag := true ;
67493: LD_ADDR_EXP 63
67497: PUSH
67498: LD_INT 1
67500: ST_TO_ADDR
// if p3 = 15 then
67501: LD_VAR 0 3
67505: PUSH
67506: LD_INT 15
67508: EQUAL
67509: IFFALSE 67519
// sKamikadze := true ;
67511: LD_ADDR_EXP 71
67515: PUSH
67516: LD_INT 1
67518: ST_TO_ADDR
// if p3 = 16 then
67519: LD_VAR 0 3
67523: PUSH
67524: LD_INT 16
67526: EQUAL
67527: IFFALSE 67537
// sTroll := true ;
67529: LD_ADDR_EXP 72
67533: PUSH
67534: LD_INT 1
67536: ST_TO_ADDR
// if p3 = 17 then
67537: LD_VAR 0 3
67541: PUSH
67542: LD_INT 17
67544: EQUAL
67545: IFFALSE 67555
// sSlow := true ;
67547: LD_ADDR_EXP 73
67551: PUSH
67552: LD_INT 1
67554: ST_TO_ADDR
// if p3 = 18 then
67555: LD_VAR 0 3
67559: PUSH
67560: LD_INT 18
67562: EQUAL
67563: IFFALSE 67573
// sLack := true ;
67565: LD_ADDR_EXP 74
67569: PUSH
67570: LD_INT 1
67572: ST_TO_ADDR
// if p3 = 19 then
67573: LD_VAR 0 3
67577: PUSH
67578: LD_INT 19
67580: EQUAL
67581: IFFALSE 67591
// sTank := true ;
67583: LD_ADDR_EXP 76
67587: PUSH
67588: LD_INT 1
67590: ST_TO_ADDR
// if p3 = 20 then
67591: LD_VAR 0 3
67595: PUSH
67596: LD_INT 20
67598: EQUAL
67599: IFFALSE 67609
// sRemote := true ;
67601: LD_ADDR_EXP 77
67605: PUSH
67606: LD_INT 1
67608: ST_TO_ADDR
// if p3 = 21 then
67609: LD_VAR 0 3
67613: PUSH
67614: LD_INT 21
67616: EQUAL
67617: IFFALSE 67627
// sPowell := true ;
67619: LD_ADDR_EXP 78
67623: PUSH
67624: LD_INT 1
67626: ST_TO_ADDR
// if p3 = 22 then
67627: LD_VAR 0 3
67631: PUSH
67632: LD_INT 22
67634: EQUAL
67635: IFFALSE 67645
// sTeleport := true ;
67637: LD_ADDR_EXP 81
67641: PUSH
67642: LD_INT 1
67644: ST_TO_ADDR
// if p3 = 23 then
67645: LD_VAR 0 3
67649: PUSH
67650: LD_INT 23
67652: EQUAL
67653: IFFALSE 67663
// sOilTower := true ;
67655: LD_ADDR_EXP 83
67659: PUSH
67660: LD_INT 1
67662: ST_TO_ADDR
// if p3 = 24 then
67663: LD_VAR 0 3
67667: PUSH
67668: LD_INT 24
67670: EQUAL
67671: IFFALSE 67681
// sShovel := true ;
67673: LD_ADDR_EXP 84
67677: PUSH
67678: LD_INT 1
67680: ST_TO_ADDR
// if p3 = 25 then
67681: LD_VAR 0 3
67685: PUSH
67686: LD_INT 25
67688: EQUAL
67689: IFFALSE 67699
// sSheik := true ;
67691: LD_ADDR_EXP 85
67695: PUSH
67696: LD_INT 1
67698: ST_TO_ADDR
// if p3 = 26 then
67699: LD_VAR 0 3
67703: PUSH
67704: LD_INT 26
67706: EQUAL
67707: IFFALSE 67717
// sEarthquake := true ;
67709: LD_ADDR_EXP 87
67713: PUSH
67714: LD_INT 1
67716: ST_TO_ADDR
// if p3 = 27 then
67717: LD_VAR 0 3
67721: PUSH
67722: LD_INT 27
67724: EQUAL
67725: IFFALSE 67735
// sAI := true ;
67727: LD_ADDR_EXP 88
67731: PUSH
67732: LD_INT 1
67734: ST_TO_ADDR
// if p3 = 28 then
67735: LD_VAR 0 3
67739: PUSH
67740: LD_INT 28
67742: EQUAL
67743: IFFALSE 67753
// sCargo := true ;
67745: LD_ADDR_EXP 91
67749: PUSH
67750: LD_INT 1
67752: ST_TO_ADDR
// if p3 = 29 then
67753: LD_VAR 0 3
67757: PUSH
67758: LD_INT 29
67760: EQUAL
67761: IFFALSE 67771
// sDLaser := true ;
67763: LD_ADDR_EXP 92
67767: PUSH
67768: LD_INT 1
67770: ST_TO_ADDR
// if p3 = 30 then
67771: LD_VAR 0 3
67775: PUSH
67776: LD_INT 30
67778: EQUAL
67779: IFFALSE 67789
// sExchange := true ;
67781: LD_ADDR_EXP 93
67785: PUSH
67786: LD_INT 1
67788: ST_TO_ADDR
// if p3 = 31 then
67789: LD_VAR 0 3
67793: PUSH
67794: LD_INT 31
67796: EQUAL
67797: IFFALSE 67807
// sFac := true ;
67799: LD_ADDR_EXP 94
67803: PUSH
67804: LD_INT 1
67806: ST_TO_ADDR
// if p3 = 32 then
67807: LD_VAR 0 3
67811: PUSH
67812: LD_INT 32
67814: EQUAL
67815: IFFALSE 67825
// sPower := true ;
67817: LD_ADDR_EXP 95
67821: PUSH
67822: LD_INT 1
67824: ST_TO_ADDR
// if p3 = 33 then
67825: LD_VAR 0 3
67829: PUSH
67830: LD_INT 33
67832: EQUAL
67833: IFFALSE 67843
// sRandom := true ;
67835: LD_ADDR_EXP 96
67839: PUSH
67840: LD_INT 1
67842: ST_TO_ADDR
// if p3 = 34 then
67843: LD_VAR 0 3
67847: PUSH
67848: LD_INT 34
67850: EQUAL
67851: IFFALSE 67861
// sShield := true ;
67853: LD_ADDR_EXP 97
67857: PUSH
67858: LD_INT 1
67860: ST_TO_ADDR
// if p3 = 35 then
67861: LD_VAR 0 3
67865: PUSH
67866: LD_INT 35
67868: EQUAL
67869: IFFALSE 67879
// sTime := true ;
67871: LD_ADDR_EXP 98
67875: PUSH
67876: LD_INT 1
67878: ST_TO_ADDR
// if p3 = 36 then
67879: LD_VAR 0 3
67883: PUSH
67884: LD_INT 36
67886: EQUAL
67887: IFFALSE 67897
// sTools := true ;
67889: LD_ADDR_EXP 99
67893: PUSH
67894: LD_INT 1
67896: ST_TO_ADDR
// if p3 = 101 then
67897: LD_VAR 0 3
67901: PUSH
67902: LD_INT 101
67904: EQUAL
67905: IFFALSE 67915
// sSold := true ;
67907: LD_ADDR_EXP 64
67911: PUSH
67912: LD_INT 1
67914: ST_TO_ADDR
// if p3 = 102 then
67915: LD_VAR 0 3
67919: PUSH
67920: LD_INT 102
67922: EQUAL
67923: IFFALSE 67933
// sDiff := true ;
67925: LD_ADDR_EXP 65
67929: PUSH
67930: LD_INT 1
67932: ST_TO_ADDR
// if p3 = 103 then
67933: LD_VAR 0 3
67937: PUSH
67938: LD_INT 103
67940: EQUAL
67941: IFFALSE 67951
// sFog := true ;
67943: LD_ADDR_EXP 68
67947: PUSH
67948: LD_INT 1
67950: ST_TO_ADDR
// if p3 = 104 then
67951: LD_VAR 0 3
67955: PUSH
67956: LD_INT 104
67958: EQUAL
67959: IFFALSE 67969
// sReset := true ;
67961: LD_ADDR_EXP 69
67965: PUSH
67966: LD_INT 1
67968: ST_TO_ADDR
// if p3 = 105 then
67969: LD_VAR 0 3
67973: PUSH
67974: LD_INT 105
67976: EQUAL
67977: IFFALSE 67987
// sSun := true ;
67979: LD_ADDR_EXP 70
67983: PUSH
67984: LD_INT 1
67986: ST_TO_ADDR
// if p3 = 106 then
67987: LD_VAR 0 3
67991: PUSH
67992: LD_INT 106
67994: EQUAL
67995: IFFALSE 68005
// sTiger := true ;
67997: LD_ADDR_EXP 66
68001: PUSH
68002: LD_INT 1
68004: ST_TO_ADDR
// if p3 = 107 then
68005: LD_VAR 0 3
68009: PUSH
68010: LD_INT 107
68012: EQUAL
68013: IFFALSE 68023
// sBomb := true ;
68015: LD_ADDR_EXP 67
68019: PUSH
68020: LD_INT 1
68022: ST_TO_ADDR
// if p3 = 108 then
68023: LD_VAR 0 3
68027: PUSH
68028: LD_INT 108
68030: EQUAL
68031: IFFALSE 68041
// sWound := true ;
68033: LD_ADDR_EXP 75
68037: PUSH
68038: LD_INT 1
68040: ST_TO_ADDR
// if p3 = 109 then
68041: LD_VAR 0 3
68045: PUSH
68046: LD_INT 109
68048: EQUAL
68049: IFFALSE 68059
// sBetray := true ;
68051: LD_ADDR_EXP 79
68055: PUSH
68056: LD_INT 1
68058: ST_TO_ADDR
// if p3 = 110 then
68059: LD_VAR 0 3
68063: PUSH
68064: LD_INT 110
68066: EQUAL
68067: IFFALSE 68077
// sContamin := true ;
68069: LD_ADDR_EXP 80
68073: PUSH
68074: LD_INT 1
68076: ST_TO_ADDR
// if p3 = 111 then
68077: LD_VAR 0 3
68081: PUSH
68082: LD_INT 111
68084: EQUAL
68085: IFFALSE 68095
// sOil := true ;
68087: LD_ADDR_EXP 82
68091: PUSH
68092: LD_INT 1
68094: ST_TO_ADDR
// if p3 = 112 then
68095: LD_VAR 0 3
68099: PUSH
68100: LD_INT 112
68102: EQUAL
68103: IFFALSE 68113
// sStu := true ;
68105: LD_ADDR_EXP 86
68109: PUSH
68110: LD_INT 1
68112: ST_TO_ADDR
// if p3 = 113 then
68113: LD_VAR 0 3
68117: PUSH
68118: LD_INT 113
68120: EQUAL
68121: IFFALSE 68131
// sBazooka := true ;
68123: LD_ADDR_EXP 89
68127: PUSH
68128: LD_INT 1
68130: ST_TO_ADDR
// if p3 = 114 then
68131: LD_VAR 0 3
68135: PUSH
68136: LD_INT 114
68138: EQUAL
68139: IFFALSE 68149
// sMortar := true ;
68141: LD_ADDR_EXP 90
68145: PUSH
68146: LD_INT 1
68148: ST_TO_ADDR
// if p3 = 115 then
68149: LD_VAR 0 3
68153: PUSH
68154: LD_INT 115
68156: EQUAL
68157: IFFALSE 68167
// sRanger := true ;
68159: LD_ADDR_EXP 100
68163: PUSH
68164: LD_INT 1
68166: ST_TO_ADDR
// if p3 = 116 then
68167: LD_VAR 0 3
68171: PUSH
68172: LD_INT 116
68174: EQUAL
68175: IFFALSE 68185
// sComputer := true ;
68177: LD_ADDR_EXP 101
68181: PUSH
68182: LD_INT 1
68184: ST_TO_ADDR
// if p3 = 117 then
68185: LD_VAR 0 3
68189: PUSH
68190: LD_INT 117
68192: EQUAL
68193: IFFALSE 68203
// s30 := true ;
68195: LD_ADDR_EXP 102
68199: PUSH
68200: LD_INT 1
68202: ST_TO_ADDR
// if p3 = 118 then
68203: LD_VAR 0 3
68207: PUSH
68208: LD_INT 118
68210: EQUAL
68211: IFFALSE 68221
// s60 := true ;
68213: LD_ADDR_EXP 103
68217: PUSH
68218: LD_INT 1
68220: ST_TO_ADDR
// end ; if p2 = hack_mode then
68221: LD_VAR 0 2
68225: PUSH
68226: LD_INT 101
68228: EQUAL
68229: IFFALSE 68357
// begin case p3 of 1 :
68231: LD_VAR 0 3
68235: PUSH
68236: LD_INT 1
68238: DOUBLE
68239: EQUAL
68240: IFTRUE 68244
68242: GO 68251
68244: POP
// hHackUnlimitedResources ; 2 :
68245: CALL 80620 0 0
68249: GO 68357
68251: LD_INT 2
68253: DOUBLE
68254: EQUAL
68255: IFTRUE 68259
68257: GO 68266
68259: POP
// hHackSetLevel10 ; 3 :
68260: CALL 80753 0 0
68264: GO 68357
68266: LD_INT 3
68268: DOUBLE
68269: EQUAL
68270: IFTRUE 68274
68272: GO 68281
68274: POP
// hHackSetLevel10YourUnits ; 4 :
68275: CALL 80838 0 0
68279: GO 68357
68281: LD_INT 4
68283: DOUBLE
68284: EQUAL
68285: IFTRUE 68289
68287: GO 68296
68289: POP
// hHackInvincible ; 5 :
68290: CALL 81286 0 0
68294: GO 68357
68296: LD_INT 5
68298: DOUBLE
68299: EQUAL
68300: IFTRUE 68304
68302: GO 68311
68304: POP
// hHackInvisible ; 6 :
68305: CALL 81397 0 0
68309: GO 68357
68311: LD_INT 6
68313: DOUBLE
68314: EQUAL
68315: IFTRUE 68319
68317: GO 68326
68319: POP
// hHackChangeYourSide ; 7 :
68320: CALL 81454 0 0
68324: GO 68357
68326: LD_INT 7
68328: DOUBLE
68329: EQUAL
68330: IFTRUE 68334
68332: GO 68341
68334: POP
// hHackChangeUnitSide ; 8 :
68335: CALL 81496 0 0
68339: GO 68357
68341: LD_INT 8
68343: DOUBLE
68344: EQUAL
68345: IFTRUE 68349
68347: GO 68356
68349: POP
// hHackFog ; end ;
68350: CALL 81597 0 0
68354: GO 68357
68356: POP
// end ; if p2 = game_save_mode then
68357: LD_VAR 0 2
68361: PUSH
68362: LD_INT 102
68364: EQUAL
68365: IFFALSE 68422
// begin if p3 = 1 then
68367: LD_VAR 0 3
68371: PUSH
68372: LD_INT 1
68374: EQUAL
68375: IFFALSE 68387
// globalGameSaveCounter := p4 ;
68377: LD_ADDR_EXP 46
68381: PUSH
68382: LD_VAR 0 4
68386: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
68387: LD_VAR 0 3
68391: PUSH
68392: LD_INT 2
68394: EQUAL
68395: IFFALSE 68403
68397: PUSH
68398: LD_EXP 46
68402: AND
68403: IFFALSE 68422
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
68405: LD_STRING setGameSaveCounter(
68407: PUSH
68408: LD_EXP 46
68412: STR
68413: PUSH
68414: LD_STRING )
68416: STR
68417: PPUSH
68418: CALL_OW 559
// end ; end ;
68422: LD_VAR 0 7
68426: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
68427: LD_INT 0
68429: PPUSH
// streamModeActive := false ;
68430: LD_ADDR_EXP 47
68434: PUSH
68435: LD_INT 0
68437: ST_TO_ADDR
// normalCounter := 36 ;
68438: LD_ADDR_EXP 48
68442: PUSH
68443: LD_INT 36
68445: ST_TO_ADDR
// hardcoreCounter := 18 ;
68446: LD_ADDR_EXP 49
68450: PUSH
68451: LD_INT 18
68453: ST_TO_ADDR
// sRocket := false ;
68454: LD_ADDR_EXP 52
68458: PUSH
68459: LD_INT 0
68461: ST_TO_ADDR
// sSpeed := false ;
68462: LD_ADDR_EXP 51
68466: PUSH
68467: LD_INT 0
68469: ST_TO_ADDR
// sEngine := false ;
68470: LD_ADDR_EXP 53
68474: PUSH
68475: LD_INT 0
68477: ST_TO_ADDR
// sSpec := false ;
68478: LD_ADDR_EXP 50
68482: PUSH
68483: LD_INT 0
68485: ST_TO_ADDR
// sLevel := false ;
68486: LD_ADDR_EXP 54
68490: PUSH
68491: LD_INT 0
68493: ST_TO_ADDR
// sArmoury := false ;
68494: LD_ADDR_EXP 55
68498: PUSH
68499: LD_INT 0
68501: ST_TO_ADDR
// sRadar := false ;
68502: LD_ADDR_EXP 56
68506: PUSH
68507: LD_INT 0
68509: ST_TO_ADDR
// sBunker := false ;
68510: LD_ADDR_EXP 57
68514: PUSH
68515: LD_INT 0
68517: ST_TO_ADDR
// sHack := false ;
68518: LD_ADDR_EXP 58
68522: PUSH
68523: LD_INT 0
68525: ST_TO_ADDR
// sFire := false ;
68526: LD_ADDR_EXP 59
68530: PUSH
68531: LD_INT 0
68533: ST_TO_ADDR
// sRefresh := false ;
68534: LD_ADDR_EXP 60
68538: PUSH
68539: LD_INT 0
68541: ST_TO_ADDR
// sExp := false ;
68542: LD_ADDR_EXP 61
68546: PUSH
68547: LD_INT 0
68549: ST_TO_ADDR
// sDepot := false ;
68550: LD_ADDR_EXP 62
68554: PUSH
68555: LD_INT 0
68557: ST_TO_ADDR
// sFlag := false ;
68558: LD_ADDR_EXP 63
68562: PUSH
68563: LD_INT 0
68565: ST_TO_ADDR
// sKamikadze := false ;
68566: LD_ADDR_EXP 71
68570: PUSH
68571: LD_INT 0
68573: ST_TO_ADDR
// sTroll := false ;
68574: LD_ADDR_EXP 72
68578: PUSH
68579: LD_INT 0
68581: ST_TO_ADDR
// sSlow := false ;
68582: LD_ADDR_EXP 73
68586: PUSH
68587: LD_INT 0
68589: ST_TO_ADDR
// sLack := false ;
68590: LD_ADDR_EXP 74
68594: PUSH
68595: LD_INT 0
68597: ST_TO_ADDR
// sTank := false ;
68598: LD_ADDR_EXP 76
68602: PUSH
68603: LD_INT 0
68605: ST_TO_ADDR
// sRemote := false ;
68606: LD_ADDR_EXP 77
68610: PUSH
68611: LD_INT 0
68613: ST_TO_ADDR
// sPowell := false ;
68614: LD_ADDR_EXP 78
68618: PUSH
68619: LD_INT 0
68621: ST_TO_ADDR
// sTeleport := false ;
68622: LD_ADDR_EXP 81
68626: PUSH
68627: LD_INT 0
68629: ST_TO_ADDR
// sOilTower := false ;
68630: LD_ADDR_EXP 83
68634: PUSH
68635: LD_INT 0
68637: ST_TO_ADDR
// sShovel := false ;
68638: LD_ADDR_EXP 84
68642: PUSH
68643: LD_INT 0
68645: ST_TO_ADDR
// sSheik := false ;
68646: LD_ADDR_EXP 85
68650: PUSH
68651: LD_INT 0
68653: ST_TO_ADDR
// sEarthquake := false ;
68654: LD_ADDR_EXP 87
68658: PUSH
68659: LD_INT 0
68661: ST_TO_ADDR
// sAI := false ;
68662: LD_ADDR_EXP 88
68666: PUSH
68667: LD_INT 0
68669: ST_TO_ADDR
// sCargo := false ;
68670: LD_ADDR_EXP 91
68674: PUSH
68675: LD_INT 0
68677: ST_TO_ADDR
// sDLaser := false ;
68678: LD_ADDR_EXP 92
68682: PUSH
68683: LD_INT 0
68685: ST_TO_ADDR
// sExchange := false ;
68686: LD_ADDR_EXP 93
68690: PUSH
68691: LD_INT 0
68693: ST_TO_ADDR
// sFac := false ;
68694: LD_ADDR_EXP 94
68698: PUSH
68699: LD_INT 0
68701: ST_TO_ADDR
// sPower := false ;
68702: LD_ADDR_EXP 95
68706: PUSH
68707: LD_INT 0
68709: ST_TO_ADDR
// sRandom := false ;
68710: LD_ADDR_EXP 96
68714: PUSH
68715: LD_INT 0
68717: ST_TO_ADDR
// sShield := false ;
68718: LD_ADDR_EXP 97
68722: PUSH
68723: LD_INT 0
68725: ST_TO_ADDR
// sTime := false ;
68726: LD_ADDR_EXP 98
68730: PUSH
68731: LD_INT 0
68733: ST_TO_ADDR
// sTools := false ;
68734: LD_ADDR_EXP 99
68738: PUSH
68739: LD_INT 0
68741: ST_TO_ADDR
// sSold := false ;
68742: LD_ADDR_EXP 64
68746: PUSH
68747: LD_INT 0
68749: ST_TO_ADDR
// sDiff := false ;
68750: LD_ADDR_EXP 65
68754: PUSH
68755: LD_INT 0
68757: ST_TO_ADDR
// sFog := false ;
68758: LD_ADDR_EXP 68
68762: PUSH
68763: LD_INT 0
68765: ST_TO_ADDR
// sReset := false ;
68766: LD_ADDR_EXP 69
68770: PUSH
68771: LD_INT 0
68773: ST_TO_ADDR
// sSun := false ;
68774: LD_ADDR_EXP 70
68778: PUSH
68779: LD_INT 0
68781: ST_TO_ADDR
// sTiger := false ;
68782: LD_ADDR_EXP 66
68786: PUSH
68787: LD_INT 0
68789: ST_TO_ADDR
// sBomb := false ;
68790: LD_ADDR_EXP 67
68794: PUSH
68795: LD_INT 0
68797: ST_TO_ADDR
// sWound := false ;
68798: LD_ADDR_EXP 75
68802: PUSH
68803: LD_INT 0
68805: ST_TO_ADDR
// sBetray := false ;
68806: LD_ADDR_EXP 79
68810: PUSH
68811: LD_INT 0
68813: ST_TO_ADDR
// sContamin := false ;
68814: LD_ADDR_EXP 80
68818: PUSH
68819: LD_INT 0
68821: ST_TO_ADDR
// sOil := false ;
68822: LD_ADDR_EXP 82
68826: PUSH
68827: LD_INT 0
68829: ST_TO_ADDR
// sStu := false ;
68830: LD_ADDR_EXP 86
68834: PUSH
68835: LD_INT 0
68837: ST_TO_ADDR
// sBazooka := false ;
68838: LD_ADDR_EXP 89
68842: PUSH
68843: LD_INT 0
68845: ST_TO_ADDR
// sMortar := false ;
68846: LD_ADDR_EXP 90
68850: PUSH
68851: LD_INT 0
68853: ST_TO_ADDR
// sRanger := false ;
68854: LD_ADDR_EXP 100
68858: PUSH
68859: LD_INT 0
68861: ST_TO_ADDR
// sComputer := false ;
68862: LD_ADDR_EXP 101
68866: PUSH
68867: LD_INT 0
68869: ST_TO_ADDR
// s30 := false ;
68870: LD_ADDR_EXP 102
68874: PUSH
68875: LD_INT 0
68877: ST_TO_ADDR
// s60 := false ;
68878: LD_ADDR_EXP 103
68882: PUSH
68883: LD_INT 0
68885: ST_TO_ADDR
// end ;
68886: LD_VAR 0 1
68890: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
68891: LD_INT 0
68893: PPUSH
68894: PPUSH
68895: PPUSH
68896: PPUSH
68897: PPUSH
68898: PPUSH
68899: PPUSH
// result := [ ] ;
68900: LD_ADDR_VAR 0 2
68904: PUSH
68905: EMPTY
68906: ST_TO_ADDR
// if campaign_id = 1 then
68907: LD_OWVAR 69
68911: PUSH
68912: LD_INT 1
68914: EQUAL
68915: IFFALSE 72081
// begin case mission_number of 1 :
68917: LD_OWVAR 70
68921: PUSH
68922: LD_INT 1
68924: DOUBLE
68925: EQUAL
68926: IFTRUE 68930
68928: GO 69006
68930: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
68931: LD_ADDR_VAR 0 2
68935: PUSH
68936: LD_INT 2
68938: PUSH
68939: LD_INT 4
68941: PUSH
68942: LD_INT 11
68944: PUSH
68945: LD_INT 12
68947: PUSH
68948: LD_INT 15
68950: PUSH
68951: LD_INT 16
68953: PUSH
68954: LD_INT 22
68956: PUSH
68957: LD_INT 23
68959: PUSH
68960: LD_INT 26
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: PUSH
68974: LD_INT 101
68976: PUSH
68977: LD_INT 102
68979: PUSH
68980: LD_INT 106
68982: PUSH
68983: LD_INT 116
68985: PUSH
68986: LD_INT 117
68988: PUSH
68989: LD_INT 118
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: ST_TO_ADDR
69004: GO 72079
69006: LD_INT 2
69008: DOUBLE
69009: EQUAL
69010: IFTRUE 69014
69012: GO 69098
69014: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
69015: LD_ADDR_VAR 0 2
69019: PUSH
69020: LD_INT 2
69022: PUSH
69023: LD_INT 4
69025: PUSH
69026: LD_INT 11
69028: PUSH
69029: LD_INT 12
69031: PUSH
69032: LD_INT 15
69034: PUSH
69035: LD_INT 16
69037: PUSH
69038: LD_INT 22
69040: PUSH
69041: LD_INT 23
69043: PUSH
69044: LD_INT 26
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: LIST
69055: LIST
69056: LIST
69057: PUSH
69058: LD_INT 101
69060: PUSH
69061: LD_INT 102
69063: PUSH
69064: LD_INT 105
69066: PUSH
69067: LD_INT 106
69069: PUSH
69070: LD_INT 108
69072: PUSH
69073: LD_INT 116
69075: PUSH
69076: LD_INT 117
69078: PUSH
69079: LD_INT 118
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: LIST
69086: LIST
69087: LIST
69088: LIST
69089: LIST
69090: LIST
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: ST_TO_ADDR
69096: GO 72079
69098: LD_INT 3
69100: DOUBLE
69101: EQUAL
69102: IFTRUE 69106
69104: GO 69194
69106: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
69107: LD_ADDR_VAR 0 2
69111: PUSH
69112: LD_INT 2
69114: PUSH
69115: LD_INT 4
69117: PUSH
69118: LD_INT 5
69120: PUSH
69121: LD_INT 11
69123: PUSH
69124: LD_INT 12
69126: PUSH
69127: LD_INT 15
69129: PUSH
69130: LD_INT 16
69132: PUSH
69133: LD_INT 22
69135: PUSH
69136: LD_INT 26
69138: PUSH
69139: LD_INT 36
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: LIST
69146: LIST
69147: LIST
69148: LIST
69149: LIST
69150: LIST
69151: LIST
69152: LIST
69153: PUSH
69154: LD_INT 101
69156: PUSH
69157: LD_INT 102
69159: PUSH
69160: LD_INT 105
69162: PUSH
69163: LD_INT 106
69165: PUSH
69166: LD_INT 108
69168: PUSH
69169: LD_INT 116
69171: PUSH
69172: LD_INT 117
69174: PUSH
69175: LD_INT 118
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: LIST
69182: LIST
69183: LIST
69184: LIST
69185: LIST
69186: LIST
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: ST_TO_ADDR
69192: GO 72079
69194: LD_INT 4
69196: DOUBLE
69197: EQUAL
69198: IFTRUE 69202
69200: GO 69298
69202: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
69203: LD_ADDR_VAR 0 2
69207: PUSH
69208: LD_INT 2
69210: PUSH
69211: LD_INT 4
69213: PUSH
69214: LD_INT 5
69216: PUSH
69217: LD_INT 8
69219: PUSH
69220: LD_INT 11
69222: PUSH
69223: LD_INT 12
69225: PUSH
69226: LD_INT 15
69228: PUSH
69229: LD_INT 16
69231: PUSH
69232: LD_INT 22
69234: PUSH
69235: LD_INT 23
69237: PUSH
69238: LD_INT 26
69240: PUSH
69241: LD_INT 36
69243: PUSH
69244: EMPTY
69245: LIST
69246: LIST
69247: LIST
69248: LIST
69249: LIST
69250: LIST
69251: LIST
69252: LIST
69253: LIST
69254: LIST
69255: LIST
69256: LIST
69257: PUSH
69258: LD_INT 101
69260: PUSH
69261: LD_INT 102
69263: PUSH
69264: LD_INT 105
69266: PUSH
69267: LD_INT 106
69269: PUSH
69270: LD_INT 108
69272: PUSH
69273: LD_INT 116
69275: PUSH
69276: LD_INT 117
69278: PUSH
69279: LD_INT 118
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: LIST
69286: LIST
69287: LIST
69288: LIST
69289: LIST
69290: LIST
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: ST_TO_ADDR
69296: GO 72079
69298: LD_INT 5
69300: DOUBLE
69301: EQUAL
69302: IFTRUE 69306
69304: GO 69418
69306: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
69307: LD_ADDR_VAR 0 2
69311: PUSH
69312: LD_INT 2
69314: PUSH
69315: LD_INT 4
69317: PUSH
69318: LD_INT 5
69320: PUSH
69321: LD_INT 6
69323: PUSH
69324: LD_INT 8
69326: PUSH
69327: LD_INT 11
69329: PUSH
69330: LD_INT 12
69332: PUSH
69333: LD_INT 15
69335: PUSH
69336: LD_INT 16
69338: PUSH
69339: LD_INT 22
69341: PUSH
69342: LD_INT 23
69344: PUSH
69345: LD_INT 25
69347: PUSH
69348: LD_INT 26
69350: PUSH
69351: LD_INT 36
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: LIST
69358: LIST
69359: LIST
69360: LIST
69361: LIST
69362: LIST
69363: LIST
69364: LIST
69365: LIST
69366: LIST
69367: LIST
69368: LIST
69369: PUSH
69370: LD_INT 101
69372: PUSH
69373: LD_INT 102
69375: PUSH
69376: LD_INT 105
69378: PUSH
69379: LD_INT 106
69381: PUSH
69382: LD_INT 108
69384: PUSH
69385: LD_INT 109
69387: PUSH
69388: LD_INT 112
69390: PUSH
69391: LD_INT 116
69393: PUSH
69394: LD_INT 117
69396: PUSH
69397: LD_INT 118
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: LIST
69404: LIST
69405: LIST
69406: LIST
69407: LIST
69408: LIST
69409: LIST
69410: LIST
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: ST_TO_ADDR
69416: GO 72079
69418: LD_INT 6
69420: DOUBLE
69421: EQUAL
69422: IFTRUE 69426
69424: GO 69558
69426: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
69427: LD_ADDR_VAR 0 2
69431: PUSH
69432: LD_INT 2
69434: PUSH
69435: LD_INT 4
69437: PUSH
69438: LD_INT 5
69440: PUSH
69441: LD_INT 6
69443: PUSH
69444: LD_INT 8
69446: PUSH
69447: LD_INT 11
69449: PUSH
69450: LD_INT 12
69452: PUSH
69453: LD_INT 15
69455: PUSH
69456: LD_INT 16
69458: PUSH
69459: LD_INT 20
69461: PUSH
69462: LD_INT 21
69464: PUSH
69465: LD_INT 22
69467: PUSH
69468: LD_INT 23
69470: PUSH
69471: LD_INT 25
69473: PUSH
69474: LD_INT 26
69476: PUSH
69477: LD_INT 30
69479: PUSH
69480: LD_INT 31
69482: PUSH
69483: LD_INT 32
69485: PUSH
69486: LD_INT 36
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: LIST
69496: LIST
69497: LIST
69498: LIST
69499: LIST
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: LIST
69508: LIST
69509: PUSH
69510: LD_INT 101
69512: PUSH
69513: LD_INT 102
69515: PUSH
69516: LD_INT 105
69518: PUSH
69519: LD_INT 106
69521: PUSH
69522: LD_INT 108
69524: PUSH
69525: LD_INT 109
69527: PUSH
69528: LD_INT 112
69530: PUSH
69531: LD_INT 116
69533: PUSH
69534: LD_INT 117
69536: PUSH
69537: LD_INT 118
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: ST_TO_ADDR
69556: GO 72079
69558: LD_INT 7
69560: DOUBLE
69561: EQUAL
69562: IFTRUE 69566
69564: GO 69678
69566: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
69567: LD_ADDR_VAR 0 2
69571: PUSH
69572: LD_INT 2
69574: PUSH
69575: LD_INT 4
69577: PUSH
69578: LD_INT 5
69580: PUSH
69581: LD_INT 7
69583: PUSH
69584: LD_INT 11
69586: PUSH
69587: LD_INT 12
69589: PUSH
69590: LD_INT 15
69592: PUSH
69593: LD_INT 16
69595: PUSH
69596: LD_INT 20
69598: PUSH
69599: LD_INT 21
69601: PUSH
69602: LD_INT 22
69604: PUSH
69605: LD_INT 23
69607: PUSH
69608: LD_INT 25
69610: PUSH
69611: LD_INT 26
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: LIST
69618: LIST
69619: LIST
69620: LIST
69621: LIST
69622: LIST
69623: LIST
69624: LIST
69625: LIST
69626: LIST
69627: LIST
69628: LIST
69629: PUSH
69630: LD_INT 101
69632: PUSH
69633: LD_INT 102
69635: PUSH
69636: LD_INT 103
69638: PUSH
69639: LD_INT 105
69641: PUSH
69642: LD_INT 106
69644: PUSH
69645: LD_INT 108
69647: PUSH
69648: LD_INT 112
69650: PUSH
69651: LD_INT 116
69653: PUSH
69654: LD_INT 117
69656: PUSH
69657: LD_INT 118
69659: PUSH
69660: EMPTY
69661: LIST
69662: LIST
69663: LIST
69664: LIST
69665: LIST
69666: LIST
69667: LIST
69668: LIST
69669: LIST
69670: LIST
69671: PUSH
69672: EMPTY
69673: LIST
69674: LIST
69675: ST_TO_ADDR
69676: GO 72079
69678: LD_INT 8
69680: DOUBLE
69681: EQUAL
69682: IFTRUE 69686
69684: GO 69826
69686: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
69687: LD_ADDR_VAR 0 2
69691: PUSH
69692: LD_INT 2
69694: PUSH
69695: LD_INT 4
69697: PUSH
69698: LD_INT 5
69700: PUSH
69701: LD_INT 6
69703: PUSH
69704: LD_INT 7
69706: PUSH
69707: LD_INT 8
69709: PUSH
69710: LD_INT 11
69712: PUSH
69713: LD_INT 12
69715: PUSH
69716: LD_INT 15
69718: PUSH
69719: LD_INT 16
69721: PUSH
69722: LD_INT 20
69724: PUSH
69725: LD_INT 21
69727: PUSH
69728: LD_INT 22
69730: PUSH
69731: LD_INT 23
69733: PUSH
69734: LD_INT 25
69736: PUSH
69737: LD_INT 26
69739: PUSH
69740: LD_INT 30
69742: PUSH
69743: LD_INT 31
69745: PUSH
69746: LD_INT 32
69748: PUSH
69749: LD_INT 36
69751: PUSH
69752: EMPTY
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: PUSH
69774: LD_INT 101
69776: PUSH
69777: LD_INT 102
69779: PUSH
69780: LD_INT 103
69782: PUSH
69783: LD_INT 105
69785: PUSH
69786: LD_INT 106
69788: PUSH
69789: LD_INT 108
69791: PUSH
69792: LD_INT 109
69794: PUSH
69795: LD_INT 112
69797: PUSH
69798: LD_INT 116
69800: PUSH
69801: LD_INT 117
69803: PUSH
69804: LD_INT 118
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: LIST
69811: LIST
69812: LIST
69813: LIST
69814: LIST
69815: LIST
69816: LIST
69817: LIST
69818: LIST
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: ST_TO_ADDR
69824: GO 72079
69826: LD_INT 9
69828: DOUBLE
69829: EQUAL
69830: IFTRUE 69834
69832: GO 69982
69834: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
69835: LD_ADDR_VAR 0 2
69839: PUSH
69840: LD_INT 2
69842: PUSH
69843: LD_INT 4
69845: PUSH
69846: LD_INT 5
69848: PUSH
69849: LD_INT 6
69851: PUSH
69852: LD_INT 7
69854: PUSH
69855: LD_INT 8
69857: PUSH
69858: LD_INT 11
69860: PUSH
69861: LD_INT 12
69863: PUSH
69864: LD_INT 15
69866: PUSH
69867: LD_INT 16
69869: PUSH
69870: LD_INT 20
69872: PUSH
69873: LD_INT 21
69875: PUSH
69876: LD_INT 22
69878: PUSH
69879: LD_INT 23
69881: PUSH
69882: LD_INT 25
69884: PUSH
69885: LD_INT 26
69887: PUSH
69888: LD_INT 28
69890: PUSH
69891: LD_INT 30
69893: PUSH
69894: LD_INT 31
69896: PUSH
69897: LD_INT 32
69899: PUSH
69900: LD_INT 36
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: LIST
69907: LIST
69908: LIST
69909: LIST
69910: LIST
69911: LIST
69912: LIST
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: LIST
69918: LIST
69919: LIST
69920: LIST
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: PUSH
69926: LD_INT 101
69928: PUSH
69929: LD_INT 102
69931: PUSH
69932: LD_INT 103
69934: PUSH
69935: LD_INT 105
69937: PUSH
69938: LD_INT 106
69940: PUSH
69941: LD_INT 108
69943: PUSH
69944: LD_INT 109
69946: PUSH
69947: LD_INT 112
69949: PUSH
69950: LD_INT 114
69952: PUSH
69953: LD_INT 116
69955: PUSH
69956: LD_INT 117
69958: PUSH
69959: LD_INT 118
69961: PUSH
69962: EMPTY
69963: LIST
69964: LIST
69965: LIST
69966: LIST
69967: LIST
69968: LIST
69969: LIST
69970: LIST
69971: LIST
69972: LIST
69973: LIST
69974: LIST
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: ST_TO_ADDR
69980: GO 72079
69982: LD_INT 10
69984: DOUBLE
69985: EQUAL
69986: IFTRUE 69990
69988: GO 70186
69990: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
69991: LD_ADDR_VAR 0 2
69995: PUSH
69996: LD_INT 2
69998: PUSH
69999: LD_INT 4
70001: PUSH
70002: LD_INT 5
70004: PUSH
70005: LD_INT 6
70007: PUSH
70008: LD_INT 7
70010: PUSH
70011: LD_INT 8
70013: PUSH
70014: LD_INT 9
70016: PUSH
70017: LD_INT 10
70019: PUSH
70020: LD_INT 11
70022: PUSH
70023: LD_INT 12
70025: PUSH
70026: LD_INT 13
70028: PUSH
70029: LD_INT 14
70031: PUSH
70032: LD_INT 15
70034: PUSH
70035: LD_INT 16
70037: PUSH
70038: LD_INT 17
70040: PUSH
70041: LD_INT 18
70043: PUSH
70044: LD_INT 19
70046: PUSH
70047: LD_INT 20
70049: PUSH
70050: LD_INT 21
70052: PUSH
70053: LD_INT 22
70055: PUSH
70056: LD_INT 23
70058: PUSH
70059: LD_INT 24
70061: PUSH
70062: LD_INT 25
70064: PUSH
70065: LD_INT 26
70067: PUSH
70068: LD_INT 28
70070: PUSH
70071: LD_INT 30
70073: PUSH
70074: LD_INT 31
70076: PUSH
70077: LD_INT 32
70079: PUSH
70080: LD_INT 36
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: LIST
70087: LIST
70088: LIST
70089: LIST
70090: LIST
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: LIST
70097: LIST
70098: LIST
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: LIST
70104: LIST
70105: LIST
70106: LIST
70107: LIST
70108: LIST
70109: LIST
70110: LIST
70111: LIST
70112: LIST
70113: PUSH
70114: LD_INT 101
70116: PUSH
70117: LD_INT 102
70119: PUSH
70120: LD_INT 103
70122: PUSH
70123: LD_INT 104
70125: PUSH
70126: LD_INT 105
70128: PUSH
70129: LD_INT 106
70131: PUSH
70132: LD_INT 107
70134: PUSH
70135: LD_INT 108
70137: PUSH
70138: LD_INT 109
70140: PUSH
70141: LD_INT 110
70143: PUSH
70144: LD_INT 111
70146: PUSH
70147: LD_INT 112
70149: PUSH
70150: LD_INT 114
70152: PUSH
70153: LD_INT 116
70155: PUSH
70156: LD_INT 117
70158: PUSH
70159: LD_INT 118
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: LIST
70166: LIST
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: LIST
70172: LIST
70173: LIST
70174: LIST
70175: LIST
70176: LIST
70177: LIST
70178: LIST
70179: PUSH
70180: EMPTY
70181: LIST
70182: LIST
70183: ST_TO_ADDR
70184: GO 72079
70186: LD_INT 11
70188: DOUBLE
70189: EQUAL
70190: IFTRUE 70194
70192: GO 70398
70194: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
70195: LD_ADDR_VAR 0 2
70199: PUSH
70200: LD_INT 2
70202: PUSH
70203: LD_INT 3
70205: PUSH
70206: LD_INT 4
70208: PUSH
70209: LD_INT 5
70211: PUSH
70212: LD_INT 6
70214: PUSH
70215: LD_INT 7
70217: PUSH
70218: LD_INT 8
70220: PUSH
70221: LD_INT 9
70223: PUSH
70224: LD_INT 10
70226: PUSH
70227: LD_INT 11
70229: PUSH
70230: LD_INT 12
70232: PUSH
70233: LD_INT 13
70235: PUSH
70236: LD_INT 14
70238: PUSH
70239: LD_INT 15
70241: PUSH
70242: LD_INT 16
70244: PUSH
70245: LD_INT 17
70247: PUSH
70248: LD_INT 18
70250: PUSH
70251: LD_INT 19
70253: PUSH
70254: LD_INT 20
70256: PUSH
70257: LD_INT 21
70259: PUSH
70260: LD_INT 22
70262: PUSH
70263: LD_INT 23
70265: PUSH
70266: LD_INT 24
70268: PUSH
70269: LD_INT 25
70271: PUSH
70272: LD_INT 26
70274: PUSH
70275: LD_INT 28
70277: PUSH
70278: LD_INT 30
70280: PUSH
70281: LD_INT 31
70283: PUSH
70284: LD_INT 32
70286: PUSH
70287: LD_INT 34
70289: PUSH
70290: LD_INT 36
70292: PUSH
70293: EMPTY
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: LIST
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: PUSH
70326: LD_INT 101
70328: PUSH
70329: LD_INT 102
70331: PUSH
70332: LD_INT 103
70334: PUSH
70335: LD_INT 104
70337: PUSH
70338: LD_INT 105
70340: PUSH
70341: LD_INT 106
70343: PUSH
70344: LD_INT 107
70346: PUSH
70347: LD_INT 108
70349: PUSH
70350: LD_INT 109
70352: PUSH
70353: LD_INT 110
70355: PUSH
70356: LD_INT 111
70358: PUSH
70359: LD_INT 112
70361: PUSH
70362: LD_INT 114
70364: PUSH
70365: LD_INT 116
70367: PUSH
70368: LD_INT 117
70370: PUSH
70371: LD_INT 118
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: LIST
70378: LIST
70379: LIST
70380: LIST
70381: LIST
70382: LIST
70383: LIST
70384: LIST
70385: LIST
70386: LIST
70387: LIST
70388: LIST
70389: LIST
70390: LIST
70391: PUSH
70392: EMPTY
70393: LIST
70394: LIST
70395: ST_TO_ADDR
70396: GO 72079
70398: LD_INT 12
70400: DOUBLE
70401: EQUAL
70402: IFTRUE 70406
70404: GO 70626
70406: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
70407: LD_ADDR_VAR 0 2
70411: PUSH
70412: LD_INT 1
70414: PUSH
70415: LD_INT 2
70417: PUSH
70418: LD_INT 3
70420: PUSH
70421: LD_INT 4
70423: PUSH
70424: LD_INT 5
70426: PUSH
70427: LD_INT 6
70429: PUSH
70430: LD_INT 7
70432: PUSH
70433: LD_INT 8
70435: PUSH
70436: LD_INT 9
70438: PUSH
70439: LD_INT 10
70441: PUSH
70442: LD_INT 11
70444: PUSH
70445: LD_INT 12
70447: PUSH
70448: LD_INT 13
70450: PUSH
70451: LD_INT 14
70453: PUSH
70454: LD_INT 15
70456: PUSH
70457: LD_INT 16
70459: PUSH
70460: LD_INT 17
70462: PUSH
70463: LD_INT 18
70465: PUSH
70466: LD_INT 19
70468: PUSH
70469: LD_INT 20
70471: PUSH
70472: LD_INT 21
70474: PUSH
70475: LD_INT 22
70477: PUSH
70478: LD_INT 23
70480: PUSH
70481: LD_INT 24
70483: PUSH
70484: LD_INT 25
70486: PUSH
70487: LD_INT 26
70489: PUSH
70490: LD_INT 27
70492: PUSH
70493: LD_INT 28
70495: PUSH
70496: LD_INT 30
70498: PUSH
70499: LD_INT 31
70501: PUSH
70502: LD_INT 32
70504: PUSH
70505: LD_INT 33
70507: PUSH
70508: LD_INT 34
70510: PUSH
70511: LD_INT 36
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: LIST
70535: LIST
70536: LIST
70537: LIST
70538: LIST
70539: LIST
70540: LIST
70541: LIST
70542: LIST
70543: LIST
70544: LIST
70545: LIST
70546: LIST
70547: LIST
70548: LIST
70549: PUSH
70550: LD_INT 101
70552: PUSH
70553: LD_INT 102
70555: PUSH
70556: LD_INT 103
70558: PUSH
70559: LD_INT 104
70561: PUSH
70562: LD_INT 105
70564: PUSH
70565: LD_INT 106
70567: PUSH
70568: LD_INT 107
70570: PUSH
70571: LD_INT 108
70573: PUSH
70574: LD_INT 109
70576: PUSH
70577: LD_INT 110
70579: PUSH
70580: LD_INT 111
70582: PUSH
70583: LD_INT 112
70585: PUSH
70586: LD_INT 113
70588: PUSH
70589: LD_INT 114
70591: PUSH
70592: LD_INT 116
70594: PUSH
70595: LD_INT 117
70597: PUSH
70598: LD_INT 118
70600: PUSH
70601: EMPTY
70602: LIST
70603: LIST
70604: LIST
70605: LIST
70606: LIST
70607: LIST
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: LIST
70615: LIST
70616: LIST
70617: LIST
70618: LIST
70619: PUSH
70620: EMPTY
70621: LIST
70622: LIST
70623: ST_TO_ADDR
70624: GO 72079
70626: LD_INT 13
70628: DOUBLE
70629: EQUAL
70630: IFTRUE 70634
70632: GO 70842
70634: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
70635: LD_ADDR_VAR 0 2
70639: PUSH
70640: LD_INT 1
70642: PUSH
70643: LD_INT 2
70645: PUSH
70646: LD_INT 3
70648: PUSH
70649: LD_INT 4
70651: PUSH
70652: LD_INT 5
70654: PUSH
70655: LD_INT 8
70657: PUSH
70658: LD_INT 9
70660: PUSH
70661: LD_INT 10
70663: PUSH
70664: LD_INT 11
70666: PUSH
70667: LD_INT 12
70669: PUSH
70670: LD_INT 14
70672: PUSH
70673: LD_INT 15
70675: PUSH
70676: LD_INT 16
70678: PUSH
70679: LD_INT 17
70681: PUSH
70682: LD_INT 18
70684: PUSH
70685: LD_INT 19
70687: PUSH
70688: LD_INT 20
70690: PUSH
70691: LD_INT 21
70693: PUSH
70694: LD_INT 22
70696: PUSH
70697: LD_INT 23
70699: PUSH
70700: LD_INT 24
70702: PUSH
70703: LD_INT 25
70705: PUSH
70706: LD_INT 26
70708: PUSH
70709: LD_INT 27
70711: PUSH
70712: LD_INT 28
70714: PUSH
70715: LD_INT 30
70717: PUSH
70718: LD_INT 31
70720: PUSH
70721: LD_INT 32
70723: PUSH
70724: LD_INT 33
70726: PUSH
70727: LD_INT 34
70729: PUSH
70730: LD_INT 36
70732: PUSH
70733: EMPTY
70734: LIST
70735: LIST
70736: LIST
70737: LIST
70738: LIST
70739: LIST
70740: LIST
70741: LIST
70742: LIST
70743: LIST
70744: LIST
70745: LIST
70746: LIST
70747: LIST
70748: LIST
70749: LIST
70750: LIST
70751: LIST
70752: LIST
70753: LIST
70754: LIST
70755: LIST
70756: LIST
70757: LIST
70758: LIST
70759: LIST
70760: LIST
70761: LIST
70762: LIST
70763: LIST
70764: LIST
70765: PUSH
70766: LD_INT 101
70768: PUSH
70769: LD_INT 102
70771: PUSH
70772: LD_INT 103
70774: PUSH
70775: LD_INT 104
70777: PUSH
70778: LD_INT 105
70780: PUSH
70781: LD_INT 106
70783: PUSH
70784: LD_INT 107
70786: PUSH
70787: LD_INT 108
70789: PUSH
70790: LD_INT 109
70792: PUSH
70793: LD_INT 110
70795: PUSH
70796: LD_INT 111
70798: PUSH
70799: LD_INT 112
70801: PUSH
70802: LD_INT 113
70804: PUSH
70805: LD_INT 114
70807: PUSH
70808: LD_INT 116
70810: PUSH
70811: LD_INT 117
70813: PUSH
70814: LD_INT 118
70816: PUSH
70817: EMPTY
70818: LIST
70819: LIST
70820: LIST
70821: LIST
70822: LIST
70823: LIST
70824: LIST
70825: LIST
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: LIST
70831: LIST
70832: LIST
70833: LIST
70834: LIST
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: ST_TO_ADDR
70840: GO 72079
70842: LD_INT 14
70844: DOUBLE
70845: EQUAL
70846: IFTRUE 70850
70848: GO 71074
70850: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
70851: LD_ADDR_VAR 0 2
70855: PUSH
70856: LD_INT 1
70858: PUSH
70859: LD_INT 2
70861: PUSH
70862: LD_INT 3
70864: PUSH
70865: LD_INT 4
70867: PUSH
70868: LD_INT 5
70870: PUSH
70871: LD_INT 6
70873: PUSH
70874: LD_INT 7
70876: PUSH
70877: LD_INT 8
70879: PUSH
70880: LD_INT 9
70882: PUSH
70883: LD_INT 10
70885: PUSH
70886: LD_INT 11
70888: PUSH
70889: LD_INT 12
70891: PUSH
70892: LD_INT 13
70894: PUSH
70895: LD_INT 14
70897: PUSH
70898: LD_INT 15
70900: PUSH
70901: LD_INT 16
70903: PUSH
70904: LD_INT 17
70906: PUSH
70907: LD_INT 18
70909: PUSH
70910: LD_INT 19
70912: PUSH
70913: LD_INT 20
70915: PUSH
70916: LD_INT 21
70918: PUSH
70919: LD_INT 22
70921: PUSH
70922: LD_INT 23
70924: PUSH
70925: LD_INT 24
70927: PUSH
70928: LD_INT 25
70930: PUSH
70931: LD_INT 26
70933: PUSH
70934: LD_INT 27
70936: PUSH
70937: LD_INT 28
70939: PUSH
70940: LD_INT 29
70942: PUSH
70943: LD_INT 30
70945: PUSH
70946: LD_INT 31
70948: PUSH
70949: LD_INT 32
70951: PUSH
70952: LD_INT 33
70954: PUSH
70955: LD_INT 34
70957: PUSH
70958: LD_INT 36
70960: PUSH
70961: EMPTY
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: LIST
70967: LIST
70968: LIST
70969: LIST
70970: LIST
70971: LIST
70972: LIST
70973: LIST
70974: LIST
70975: LIST
70976: LIST
70977: LIST
70978: LIST
70979: LIST
70980: LIST
70981: LIST
70982: LIST
70983: LIST
70984: LIST
70985: LIST
70986: LIST
70987: LIST
70988: LIST
70989: LIST
70990: LIST
70991: LIST
70992: LIST
70993: LIST
70994: LIST
70995: LIST
70996: LIST
70997: PUSH
70998: LD_INT 101
71000: PUSH
71001: LD_INT 102
71003: PUSH
71004: LD_INT 103
71006: PUSH
71007: LD_INT 104
71009: PUSH
71010: LD_INT 105
71012: PUSH
71013: LD_INT 106
71015: PUSH
71016: LD_INT 107
71018: PUSH
71019: LD_INT 108
71021: PUSH
71022: LD_INT 109
71024: PUSH
71025: LD_INT 110
71027: PUSH
71028: LD_INT 111
71030: PUSH
71031: LD_INT 112
71033: PUSH
71034: LD_INT 113
71036: PUSH
71037: LD_INT 114
71039: PUSH
71040: LD_INT 116
71042: PUSH
71043: LD_INT 117
71045: PUSH
71046: LD_INT 118
71048: PUSH
71049: EMPTY
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: LIST
71056: LIST
71057: LIST
71058: LIST
71059: LIST
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: LIST
71065: LIST
71066: LIST
71067: PUSH
71068: EMPTY
71069: LIST
71070: LIST
71071: ST_TO_ADDR
71072: GO 72079
71074: LD_INT 15
71076: DOUBLE
71077: EQUAL
71078: IFTRUE 71082
71080: GO 71306
71082: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
71083: LD_ADDR_VAR 0 2
71087: PUSH
71088: LD_INT 1
71090: PUSH
71091: LD_INT 2
71093: PUSH
71094: LD_INT 3
71096: PUSH
71097: LD_INT 4
71099: PUSH
71100: LD_INT 5
71102: PUSH
71103: LD_INT 6
71105: PUSH
71106: LD_INT 7
71108: PUSH
71109: LD_INT 8
71111: PUSH
71112: LD_INT 9
71114: PUSH
71115: LD_INT 10
71117: PUSH
71118: LD_INT 11
71120: PUSH
71121: LD_INT 12
71123: PUSH
71124: LD_INT 13
71126: PUSH
71127: LD_INT 14
71129: PUSH
71130: LD_INT 15
71132: PUSH
71133: LD_INT 16
71135: PUSH
71136: LD_INT 17
71138: PUSH
71139: LD_INT 18
71141: PUSH
71142: LD_INT 19
71144: PUSH
71145: LD_INT 20
71147: PUSH
71148: LD_INT 21
71150: PUSH
71151: LD_INT 22
71153: PUSH
71154: LD_INT 23
71156: PUSH
71157: LD_INT 24
71159: PUSH
71160: LD_INT 25
71162: PUSH
71163: LD_INT 26
71165: PUSH
71166: LD_INT 27
71168: PUSH
71169: LD_INT 28
71171: PUSH
71172: LD_INT 29
71174: PUSH
71175: LD_INT 30
71177: PUSH
71178: LD_INT 31
71180: PUSH
71181: LD_INT 32
71183: PUSH
71184: LD_INT 33
71186: PUSH
71187: LD_INT 34
71189: PUSH
71190: LD_INT 36
71192: PUSH
71193: EMPTY
71194: LIST
71195: LIST
71196: LIST
71197: LIST
71198: LIST
71199: LIST
71200: LIST
71201: LIST
71202: LIST
71203: LIST
71204: LIST
71205: LIST
71206: LIST
71207: LIST
71208: LIST
71209: LIST
71210: LIST
71211: LIST
71212: LIST
71213: LIST
71214: LIST
71215: LIST
71216: LIST
71217: LIST
71218: LIST
71219: LIST
71220: LIST
71221: LIST
71222: LIST
71223: LIST
71224: LIST
71225: LIST
71226: LIST
71227: LIST
71228: LIST
71229: PUSH
71230: LD_INT 101
71232: PUSH
71233: LD_INT 102
71235: PUSH
71236: LD_INT 103
71238: PUSH
71239: LD_INT 104
71241: PUSH
71242: LD_INT 105
71244: PUSH
71245: LD_INT 106
71247: PUSH
71248: LD_INT 107
71250: PUSH
71251: LD_INT 108
71253: PUSH
71254: LD_INT 109
71256: PUSH
71257: LD_INT 110
71259: PUSH
71260: LD_INT 111
71262: PUSH
71263: LD_INT 112
71265: PUSH
71266: LD_INT 113
71268: PUSH
71269: LD_INT 114
71271: PUSH
71272: LD_INT 116
71274: PUSH
71275: LD_INT 117
71277: PUSH
71278: LD_INT 118
71280: PUSH
71281: EMPTY
71282: LIST
71283: LIST
71284: LIST
71285: LIST
71286: LIST
71287: LIST
71288: LIST
71289: LIST
71290: LIST
71291: LIST
71292: LIST
71293: LIST
71294: LIST
71295: LIST
71296: LIST
71297: LIST
71298: LIST
71299: PUSH
71300: EMPTY
71301: LIST
71302: LIST
71303: ST_TO_ADDR
71304: GO 72079
71306: LD_INT 16
71308: DOUBLE
71309: EQUAL
71310: IFTRUE 71314
71312: GO 71450
71314: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
71315: LD_ADDR_VAR 0 2
71319: PUSH
71320: LD_INT 2
71322: PUSH
71323: LD_INT 4
71325: PUSH
71326: LD_INT 5
71328: PUSH
71329: LD_INT 7
71331: PUSH
71332: LD_INT 11
71334: PUSH
71335: LD_INT 12
71337: PUSH
71338: LD_INT 15
71340: PUSH
71341: LD_INT 16
71343: PUSH
71344: LD_INT 20
71346: PUSH
71347: LD_INT 21
71349: PUSH
71350: LD_INT 22
71352: PUSH
71353: LD_INT 23
71355: PUSH
71356: LD_INT 25
71358: PUSH
71359: LD_INT 26
71361: PUSH
71362: LD_INT 30
71364: PUSH
71365: LD_INT 31
71367: PUSH
71368: LD_INT 32
71370: PUSH
71371: LD_INT 33
71373: PUSH
71374: LD_INT 34
71376: PUSH
71377: EMPTY
71378: LIST
71379: LIST
71380: LIST
71381: LIST
71382: LIST
71383: LIST
71384: LIST
71385: LIST
71386: LIST
71387: LIST
71388: LIST
71389: LIST
71390: LIST
71391: LIST
71392: LIST
71393: LIST
71394: LIST
71395: LIST
71396: LIST
71397: PUSH
71398: LD_INT 101
71400: PUSH
71401: LD_INT 102
71403: PUSH
71404: LD_INT 103
71406: PUSH
71407: LD_INT 106
71409: PUSH
71410: LD_INT 108
71412: PUSH
71413: LD_INT 112
71415: PUSH
71416: LD_INT 113
71418: PUSH
71419: LD_INT 114
71421: PUSH
71422: LD_INT 116
71424: PUSH
71425: LD_INT 117
71427: PUSH
71428: LD_INT 118
71430: PUSH
71431: EMPTY
71432: LIST
71433: LIST
71434: LIST
71435: LIST
71436: LIST
71437: LIST
71438: LIST
71439: LIST
71440: LIST
71441: LIST
71442: LIST
71443: PUSH
71444: EMPTY
71445: LIST
71446: LIST
71447: ST_TO_ADDR
71448: GO 72079
71450: LD_INT 17
71452: DOUBLE
71453: EQUAL
71454: IFTRUE 71458
71456: GO 71682
71458: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
71459: LD_ADDR_VAR 0 2
71463: PUSH
71464: LD_INT 1
71466: PUSH
71467: LD_INT 2
71469: PUSH
71470: LD_INT 3
71472: PUSH
71473: LD_INT 4
71475: PUSH
71476: LD_INT 5
71478: PUSH
71479: LD_INT 6
71481: PUSH
71482: LD_INT 7
71484: PUSH
71485: LD_INT 8
71487: PUSH
71488: LD_INT 9
71490: PUSH
71491: LD_INT 10
71493: PUSH
71494: LD_INT 11
71496: PUSH
71497: LD_INT 12
71499: PUSH
71500: LD_INT 13
71502: PUSH
71503: LD_INT 14
71505: PUSH
71506: LD_INT 15
71508: PUSH
71509: LD_INT 16
71511: PUSH
71512: LD_INT 17
71514: PUSH
71515: LD_INT 18
71517: PUSH
71518: LD_INT 19
71520: PUSH
71521: LD_INT 20
71523: PUSH
71524: LD_INT 21
71526: PUSH
71527: LD_INT 22
71529: PUSH
71530: LD_INT 23
71532: PUSH
71533: LD_INT 24
71535: PUSH
71536: LD_INT 25
71538: PUSH
71539: LD_INT 26
71541: PUSH
71542: LD_INT 27
71544: PUSH
71545: LD_INT 28
71547: PUSH
71548: LD_INT 29
71550: PUSH
71551: LD_INT 30
71553: PUSH
71554: LD_INT 31
71556: PUSH
71557: LD_INT 32
71559: PUSH
71560: LD_INT 33
71562: PUSH
71563: LD_INT 34
71565: PUSH
71566: LD_INT 36
71568: PUSH
71569: EMPTY
71570: LIST
71571: LIST
71572: LIST
71573: LIST
71574: LIST
71575: LIST
71576: LIST
71577: LIST
71578: LIST
71579: LIST
71580: LIST
71581: LIST
71582: LIST
71583: LIST
71584: LIST
71585: LIST
71586: LIST
71587: LIST
71588: LIST
71589: LIST
71590: LIST
71591: LIST
71592: LIST
71593: LIST
71594: LIST
71595: LIST
71596: LIST
71597: LIST
71598: LIST
71599: LIST
71600: LIST
71601: LIST
71602: LIST
71603: LIST
71604: LIST
71605: PUSH
71606: LD_INT 101
71608: PUSH
71609: LD_INT 102
71611: PUSH
71612: LD_INT 103
71614: PUSH
71615: LD_INT 104
71617: PUSH
71618: LD_INT 105
71620: PUSH
71621: LD_INT 106
71623: PUSH
71624: LD_INT 107
71626: PUSH
71627: LD_INT 108
71629: PUSH
71630: LD_INT 109
71632: PUSH
71633: LD_INT 110
71635: PUSH
71636: LD_INT 111
71638: PUSH
71639: LD_INT 112
71641: PUSH
71642: LD_INT 113
71644: PUSH
71645: LD_INT 114
71647: PUSH
71648: LD_INT 116
71650: PUSH
71651: LD_INT 117
71653: PUSH
71654: LD_INT 118
71656: PUSH
71657: EMPTY
71658: LIST
71659: LIST
71660: LIST
71661: LIST
71662: LIST
71663: LIST
71664: LIST
71665: LIST
71666: LIST
71667: LIST
71668: LIST
71669: LIST
71670: LIST
71671: LIST
71672: LIST
71673: LIST
71674: LIST
71675: PUSH
71676: EMPTY
71677: LIST
71678: LIST
71679: ST_TO_ADDR
71680: GO 72079
71682: LD_INT 18
71684: DOUBLE
71685: EQUAL
71686: IFTRUE 71690
71688: GO 71838
71690: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
71691: LD_ADDR_VAR 0 2
71695: PUSH
71696: LD_INT 2
71698: PUSH
71699: LD_INT 4
71701: PUSH
71702: LD_INT 5
71704: PUSH
71705: LD_INT 7
71707: PUSH
71708: LD_INT 11
71710: PUSH
71711: LD_INT 12
71713: PUSH
71714: LD_INT 15
71716: PUSH
71717: LD_INT 16
71719: PUSH
71720: LD_INT 20
71722: PUSH
71723: LD_INT 21
71725: PUSH
71726: LD_INT 22
71728: PUSH
71729: LD_INT 23
71731: PUSH
71732: LD_INT 25
71734: PUSH
71735: LD_INT 26
71737: PUSH
71738: LD_INT 30
71740: PUSH
71741: LD_INT 31
71743: PUSH
71744: LD_INT 32
71746: PUSH
71747: LD_INT 33
71749: PUSH
71750: LD_INT 34
71752: PUSH
71753: LD_INT 35
71755: PUSH
71756: LD_INT 36
71758: PUSH
71759: EMPTY
71760: LIST
71761: LIST
71762: LIST
71763: LIST
71764: LIST
71765: LIST
71766: LIST
71767: LIST
71768: LIST
71769: LIST
71770: LIST
71771: LIST
71772: LIST
71773: LIST
71774: LIST
71775: LIST
71776: LIST
71777: LIST
71778: LIST
71779: LIST
71780: LIST
71781: PUSH
71782: LD_INT 101
71784: PUSH
71785: LD_INT 102
71787: PUSH
71788: LD_INT 103
71790: PUSH
71791: LD_INT 106
71793: PUSH
71794: LD_INT 108
71796: PUSH
71797: LD_INT 112
71799: PUSH
71800: LD_INT 113
71802: PUSH
71803: LD_INT 114
71805: PUSH
71806: LD_INT 115
71808: PUSH
71809: LD_INT 116
71811: PUSH
71812: LD_INT 117
71814: PUSH
71815: LD_INT 118
71817: PUSH
71818: EMPTY
71819: LIST
71820: LIST
71821: LIST
71822: LIST
71823: LIST
71824: LIST
71825: LIST
71826: LIST
71827: LIST
71828: LIST
71829: LIST
71830: LIST
71831: PUSH
71832: EMPTY
71833: LIST
71834: LIST
71835: ST_TO_ADDR
71836: GO 72079
71838: LD_INT 19
71840: DOUBLE
71841: EQUAL
71842: IFTRUE 71846
71844: GO 72078
71846: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
71847: LD_ADDR_VAR 0 2
71851: PUSH
71852: LD_INT 1
71854: PUSH
71855: LD_INT 2
71857: PUSH
71858: LD_INT 3
71860: PUSH
71861: LD_INT 4
71863: PUSH
71864: LD_INT 5
71866: PUSH
71867: LD_INT 6
71869: PUSH
71870: LD_INT 7
71872: PUSH
71873: LD_INT 8
71875: PUSH
71876: LD_INT 9
71878: PUSH
71879: LD_INT 10
71881: PUSH
71882: LD_INT 11
71884: PUSH
71885: LD_INT 12
71887: PUSH
71888: LD_INT 13
71890: PUSH
71891: LD_INT 14
71893: PUSH
71894: LD_INT 15
71896: PUSH
71897: LD_INT 16
71899: PUSH
71900: LD_INT 17
71902: PUSH
71903: LD_INT 18
71905: PUSH
71906: LD_INT 19
71908: PUSH
71909: LD_INT 20
71911: PUSH
71912: LD_INT 21
71914: PUSH
71915: LD_INT 22
71917: PUSH
71918: LD_INT 23
71920: PUSH
71921: LD_INT 24
71923: PUSH
71924: LD_INT 25
71926: PUSH
71927: LD_INT 26
71929: PUSH
71930: LD_INT 27
71932: PUSH
71933: LD_INT 28
71935: PUSH
71936: LD_INT 29
71938: PUSH
71939: LD_INT 30
71941: PUSH
71942: LD_INT 31
71944: PUSH
71945: LD_INT 32
71947: PUSH
71948: LD_INT 33
71950: PUSH
71951: LD_INT 34
71953: PUSH
71954: LD_INT 35
71956: PUSH
71957: LD_INT 36
71959: PUSH
71960: EMPTY
71961: LIST
71962: LIST
71963: LIST
71964: LIST
71965: LIST
71966: LIST
71967: LIST
71968: LIST
71969: LIST
71970: LIST
71971: LIST
71972: LIST
71973: LIST
71974: LIST
71975: LIST
71976: LIST
71977: LIST
71978: LIST
71979: LIST
71980: LIST
71981: LIST
71982: LIST
71983: LIST
71984: LIST
71985: LIST
71986: LIST
71987: LIST
71988: LIST
71989: LIST
71990: LIST
71991: LIST
71992: LIST
71993: LIST
71994: LIST
71995: LIST
71996: LIST
71997: PUSH
71998: LD_INT 101
72000: PUSH
72001: LD_INT 102
72003: PUSH
72004: LD_INT 103
72006: PUSH
72007: LD_INT 104
72009: PUSH
72010: LD_INT 105
72012: PUSH
72013: LD_INT 106
72015: PUSH
72016: LD_INT 107
72018: PUSH
72019: LD_INT 108
72021: PUSH
72022: LD_INT 109
72024: PUSH
72025: LD_INT 110
72027: PUSH
72028: LD_INT 111
72030: PUSH
72031: LD_INT 112
72033: PUSH
72034: LD_INT 113
72036: PUSH
72037: LD_INT 114
72039: PUSH
72040: LD_INT 115
72042: PUSH
72043: LD_INT 116
72045: PUSH
72046: LD_INT 117
72048: PUSH
72049: LD_INT 118
72051: PUSH
72052: EMPTY
72053: LIST
72054: LIST
72055: LIST
72056: LIST
72057: LIST
72058: LIST
72059: LIST
72060: LIST
72061: LIST
72062: LIST
72063: LIST
72064: LIST
72065: LIST
72066: LIST
72067: LIST
72068: LIST
72069: LIST
72070: LIST
72071: PUSH
72072: EMPTY
72073: LIST
72074: LIST
72075: ST_TO_ADDR
72076: GO 72079
72078: POP
// end else
72079: GO 72310
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
72081: LD_ADDR_VAR 0 2
72085: PUSH
72086: LD_INT 1
72088: PUSH
72089: LD_INT 2
72091: PUSH
72092: LD_INT 3
72094: PUSH
72095: LD_INT 4
72097: PUSH
72098: LD_INT 5
72100: PUSH
72101: LD_INT 6
72103: PUSH
72104: LD_INT 7
72106: PUSH
72107: LD_INT 8
72109: PUSH
72110: LD_INT 9
72112: PUSH
72113: LD_INT 10
72115: PUSH
72116: LD_INT 11
72118: PUSH
72119: LD_INT 12
72121: PUSH
72122: LD_INT 13
72124: PUSH
72125: LD_INT 14
72127: PUSH
72128: LD_INT 15
72130: PUSH
72131: LD_INT 16
72133: PUSH
72134: LD_INT 17
72136: PUSH
72137: LD_INT 18
72139: PUSH
72140: LD_INT 19
72142: PUSH
72143: LD_INT 20
72145: PUSH
72146: LD_INT 21
72148: PUSH
72149: LD_INT 22
72151: PUSH
72152: LD_INT 23
72154: PUSH
72155: LD_INT 24
72157: PUSH
72158: LD_INT 25
72160: PUSH
72161: LD_INT 26
72163: PUSH
72164: LD_INT 27
72166: PUSH
72167: LD_INT 28
72169: PUSH
72170: LD_INT 29
72172: PUSH
72173: LD_INT 30
72175: PUSH
72176: LD_INT 31
72178: PUSH
72179: LD_INT 32
72181: PUSH
72182: LD_INT 33
72184: PUSH
72185: LD_INT 34
72187: PUSH
72188: LD_INT 35
72190: PUSH
72191: LD_INT 36
72193: PUSH
72194: EMPTY
72195: LIST
72196: LIST
72197: LIST
72198: LIST
72199: LIST
72200: LIST
72201: LIST
72202: LIST
72203: LIST
72204: LIST
72205: LIST
72206: LIST
72207: LIST
72208: LIST
72209: LIST
72210: LIST
72211: LIST
72212: LIST
72213: LIST
72214: LIST
72215: LIST
72216: LIST
72217: LIST
72218: LIST
72219: LIST
72220: LIST
72221: LIST
72222: LIST
72223: LIST
72224: LIST
72225: LIST
72226: LIST
72227: LIST
72228: LIST
72229: LIST
72230: LIST
72231: PUSH
72232: LD_INT 101
72234: PUSH
72235: LD_INT 102
72237: PUSH
72238: LD_INT 103
72240: PUSH
72241: LD_INT 104
72243: PUSH
72244: LD_INT 105
72246: PUSH
72247: LD_INT 106
72249: PUSH
72250: LD_INT 107
72252: PUSH
72253: LD_INT 108
72255: PUSH
72256: LD_INT 109
72258: PUSH
72259: LD_INT 110
72261: PUSH
72262: LD_INT 111
72264: PUSH
72265: LD_INT 112
72267: PUSH
72268: LD_INT 113
72270: PUSH
72271: LD_INT 114
72273: PUSH
72274: LD_INT 115
72276: PUSH
72277: LD_INT 116
72279: PUSH
72280: LD_INT 117
72282: PUSH
72283: LD_INT 118
72285: PUSH
72286: EMPTY
72287: LIST
72288: LIST
72289: LIST
72290: LIST
72291: LIST
72292: LIST
72293: LIST
72294: LIST
72295: LIST
72296: LIST
72297: LIST
72298: LIST
72299: LIST
72300: LIST
72301: LIST
72302: LIST
72303: LIST
72304: LIST
72305: PUSH
72306: EMPTY
72307: LIST
72308: LIST
72309: ST_TO_ADDR
// if result then
72310: LD_VAR 0 2
72314: IFFALSE 73100
// begin normal :=  ;
72316: LD_ADDR_VAR 0 5
72320: PUSH
72321: LD_STRING 
72323: ST_TO_ADDR
// hardcore :=  ;
72324: LD_ADDR_VAR 0 6
72328: PUSH
72329: LD_STRING 
72331: ST_TO_ADDR
// active :=  ;
72332: LD_ADDR_VAR 0 7
72336: PUSH
72337: LD_STRING 
72339: ST_TO_ADDR
// for i = 1 to normalCounter do
72340: LD_ADDR_VAR 0 8
72344: PUSH
72345: DOUBLE
72346: LD_INT 1
72348: DEC
72349: ST_TO_ADDR
72350: LD_EXP 48
72354: PUSH
72355: FOR_TO
72356: IFFALSE 72457
// begin tmp := 0 ;
72358: LD_ADDR_VAR 0 3
72362: PUSH
72363: LD_STRING 0
72365: ST_TO_ADDR
// if result [ 1 ] then
72366: LD_VAR 0 2
72370: PUSH
72371: LD_INT 1
72373: ARRAY
72374: IFFALSE 72439
// if result [ 1 ] [ 1 ] = i then
72376: LD_VAR 0 2
72380: PUSH
72381: LD_INT 1
72383: ARRAY
72384: PUSH
72385: LD_INT 1
72387: ARRAY
72388: PUSH
72389: LD_VAR 0 8
72393: EQUAL
72394: IFFALSE 72439
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
72396: LD_ADDR_VAR 0 2
72400: PUSH
72401: LD_VAR 0 2
72405: PPUSH
72406: LD_INT 1
72408: PPUSH
72409: LD_VAR 0 2
72413: PUSH
72414: LD_INT 1
72416: ARRAY
72417: PPUSH
72418: LD_INT 1
72420: PPUSH
72421: CALL_OW 3
72425: PPUSH
72426: CALL_OW 1
72430: ST_TO_ADDR
// tmp := 1 ;
72431: LD_ADDR_VAR 0 3
72435: PUSH
72436: LD_STRING 1
72438: ST_TO_ADDR
// end ; normal := normal & tmp ;
72439: LD_ADDR_VAR 0 5
72443: PUSH
72444: LD_VAR 0 5
72448: PUSH
72449: LD_VAR 0 3
72453: STR
72454: ST_TO_ADDR
// end ;
72455: GO 72355
72457: POP
72458: POP
// for i = 1 to hardcoreCounter do
72459: LD_ADDR_VAR 0 8
72463: PUSH
72464: DOUBLE
72465: LD_INT 1
72467: DEC
72468: ST_TO_ADDR
72469: LD_EXP 49
72473: PUSH
72474: FOR_TO
72475: IFFALSE 72580
// begin tmp := 0 ;
72477: LD_ADDR_VAR 0 3
72481: PUSH
72482: LD_STRING 0
72484: ST_TO_ADDR
// if result [ 2 ] then
72485: LD_VAR 0 2
72489: PUSH
72490: LD_INT 2
72492: ARRAY
72493: IFFALSE 72562
// if result [ 2 ] [ 1 ] = 100 + i then
72495: LD_VAR 0 2
72499: PUSH
72500: LD_INT 2
72502: ARRAY
72503: PUSH
72504: LD_INT 1
72506: ARRAY
72507: PUSH
72508: LD_INT 100
72510: PUSH
72511: LD_VAR 0 8
72515: PLUS
72516: EQUAL
72517: IFFALSE 72562
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
72519: LD_ADDR_VAR 0 2
72523: PUSH
72524: LD_VAR 0 2
72528: PPUSH
72529: LD_INT 2
72531: PPUSH
72532: LD_VAR 0 2
72536: PUSH
72537: LD_INT 2
72539: ARRAY
72540: PPUSH
72541: LD_INT 1
72543: PPUSH
72544: CALL_OW 3
72548: PPUSH
72549: CALL_OW 1
72553: ST_TO_ADDR
// tmp := 1 ;
72554: LD_ADDR_VAR 0 3
72558: PUSH
72559: LD_STRING 1
72561: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
72562: LD_ADDR_VAR 0 6
72566: PUSH
72567: LD_VAR 0 6
72571: PUSH
72572: LD_VAR 0 3
72576: STR
72577: ST_TO_ADDR
// end ;
72578: GO 72474
72580: POP
72581: POP
// if isGameLoad then
72582: LD_VAR 0 1
72586: IFFALSE 73061
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
72588: LD_ADDR_VAR 0 4
72592: PUSH
72593: LD_EXP 52
72597: PUSH
72598: LD_EXP 51
72602: PUSH
72603: LD_EXP 53
72607: PUSH
72608: LD_EXP 50
72612: PUSH
72613: LD_EXP 54
72617: PUSH
72618: LD_EXP 55
72622: PUSH
72623: LD_EXP 56
72627: PUSH
72628: LD_EXP 57
72632: PUSH
72633: LD_EXP 58
72637: PUSH
72638: LD_EXP 59
72642: PUSH
72643: LD_EXP 60
72647: PUSH
72648: LD_EXP 61
72652: PUSH
72653: LD_EXP 62
72657: PUSH
72658: LD_EXP 63
72662: PUSH
72663: LD_EXP 71
72667: PUSH
72668: LD_EXP 72
72672: PUSH
72673: LD_EXP 73
72677: PUSH
72678: LD_EXP 74
72682: PUSH
72683: LD_EXP 76
72687: PUSH
72688: LD_EXP 77
72692: PUSH
72693: LD_EXP 78
72697: PUSH
72698: LD_EXP 81
72702: PUSH
72703: LD_EXP 83
72707: PUSH
72708: LD_EXP 84
72712: PUSH
72713: LD_EXP 85
72717: PUSH
72718: LD_EXP 87
72722: PUSH
72723: LD_EXP 88
72727: PUSH
72728: LD_EXP 91
72732: PUSH
72733: LD_EXP 92
72737: PUSH
72738: LD_EXP 93
72742: PUSH
72743: LD_EXP 94
72747: PUSH
72748: LD_EXP 95
72752: PUSH
72753: LD_EXP 96
72757: PUSH
72758: LD_EXP 97
72762: PUSH
72763: LD_EXP 98
72767: PUSH
72768: LD_EXP 99
72772: PUSH
72773: LD_EXP 64
72777: PUSH
72778: LD_EXP 65
72782: PUSH
72783: LD_EXP 68
72787: PUSH
72788: LD_EXP 69
72792: PUSH
72793: LD_EXP 70
72797: PUSH
72798: LD_EXP 66
72802: PUSH
72803: LD_EXP 67
72807: PUSH
72808: LD_EXP 75
72812: PUSH
72813: LD_EXP 79
72817: PUSH
72818: LD_EXP 80
72822: PUSH
72823: LD_EXP 82
72827: PUSH
72828: LD_EXP 86
72832: PUSH
72833: LD_EXP 89
72837: PUSH
72838: LD_EXP 90
72842: PUSH
72843: LD_EXP 100
72847: PUSH
72848: LD_EXP 101
72852: PUSH
72853: LD_EXP 102
72857: PUSH
72858: LD_EXP 103
72862: PUSH
72863: EMPTY
72864: LIST
72865: LIST
72866: LIST
72867: LIST
72868: LIST
72869: LIST
72870: LIST
72871: LIST
72872: LIST
72873: LIST
72874: LIST
72875: LIST
72876: LIST
72877: LIST
72878: LIST
72879: LIST
72880: LIST
72881: LIST
72882: LIST
72883: LIST
72884: LIST
72885: LIST
72886: LIST
72887: LIST
72888: LIST
72889: LIST
72890: LIST
72891: LIST
72892: LIST
72893: LIST
72894: LIST
72895: LIST
72896: LIST
72897: LIST
72898: LIST
72899: LIST
72900: LIST
72901: LIST
72902: LIST
72903: LIST
72904: LIST
72905: LIST
72906: LIST
72907: LIST
72908: LIST
72909: LIST
72910: LIST
72911: LIST
72912: LIST
72913: LIST
72914: LIST
72915: LIST
72916: LIST
72917: LIST
72918: ST_TO_ADDR
// tmp :=  ;
72919: LD_ADDR_VAR 0 3
72923: PUSH
72924: LD_STRING 
72926: ST_TO_ADDR
// for i = 1 to normalCounter do
72927: LD_ADDR_VAR 0 8
72931: PUSH
72932: DOUBLE
72933: LD_INT 1
72935: DEC
72936: ST_TO_ADDR
72937: LD_EXP 48
72941: PUSH
72942: FOR_TO
72943: IFFALSE 72979
// begin if flags [ i ] then
72945: LD_VAR 0 4
72949: PUSH
72950: LD_VAR 0 8
72954: ARRAY
72955: IFFALSE 72977
// tmp := tmp & i & ; ;
72957: LD_ADDR_VAR 0 3
72961: PUSH
72962: LD_VAR 0 3
72966: PUSH
72967: LD_VAR 0 8
72971: STR
72972: PUSH
72973: LD_STRING ;
72975: STR
72976: ST_TO_ADDR
// end ;
72977: GO 72942
72979: POP
72980: POP
// for i = 1 to hardcoreCounter do
72981: LD_ADDR_VAR 0 8
72985: PUSH
72986: DOUBLE
72987: LD_INT 1
72989: DEC
72990: ST_TO_ADDR
72991: LD_EXP 49
72995: PUSH
72996: FOR_TO
72997: IFFALSE 73043
// begin if flags [ normalCounter + i ] then
72999: LD_VAR 0 4
73003: PUSH
73004: LD_EXP 48
73008: PUSH
73009: LD_VAR 0 8
73013: PLUS
73014: ARRAY
73015: IFFALSE 73041
// tmp := tmp & ( 100 + i ) & ; ;
73017: LD_ADDR_VAR 0 3
73021: PUSH
73022: LD_VAR 0 3
73026: PUSH
73027: LD_INT 100
73029: PUSH
73030: LD_VAR 0 8
73034: PLUS
73035: STR
73036: PUSH
73037: LD_STRING ;
73039: STR
73040: ST_TO_ADDR
// end ;
73041: GO 72996
73043: POP
73044: POP
// if tmp then
73045: LD_VAR 0 3
73049: IFFALSE 73061
// active := tmp ;
73051: LD_ADDR_VAR 0 7
73055: PUSH
73056: LD_VAR 0 3
73060: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
73061: LD_STRING getStreamItemsFromMission("
73063: PUSH
73064: LD_VAR 0 5
73068: STR
73069: PUSH
73070: LD_STRING ","
73072: STR
73073: PUSH
73074: LD_VAR 0 6
73078: STR
73079: PUSH
73080: LD_STRING ","
73082: STR
73083: PUSH
73084: LD_VAR 0 7
73088: STR
73089: PUSH
73090: LD_STRING ")
73092: STR
73093: PPUSH
73094: CALL_OW 559
// end else
73098: GO 73107
// ToLua ( getStreamItemsFromMission("","","") ) ;
73100: LD_STRING getStreamItemsFromMission("","","")
73102: PPUSH
73103: CALL_OW 559
// end ;
73107: LD_VAR 0 2
73111: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
73112: LD_EXP 47
73116: IFFALSE 73124
73118: PUSH
73119: LD_EXP 52
73123: AND
73124: IFFALSE 73248
73126: GO 73128
73128: DISABLE
73129: LD_INT 0
73131: PPUSH
73132: PPUSH
// begin enable ;
73133: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
73134: LD_ADDR_VAR 0 2
73138: PUSH
73139: LD_INT 22
73141: PUSH
73142: LD_OWVAR 2
73146: PUSH
73147: EMPTY
73148: LIST
73149: LIST
73150: PUSH
73151: LD_INT 2
73153: PUSH
73154: LD_INT 34
73156: PUSH
73157: LD_INT 7
73159: PUSH
73160: EMPTY
73161: LIST
73162: LIST
73163: PUSH
73164: LD_INT 34
73166: PUSH
73167: LD_INT 45
73169: PUSH
73170: EMPTY
73171: LIST
73172: LIST
73173: PUSH
73174: LD_INT 34
73176: PUSH
73177: LD_INT 28
73179: PUSH
73180: EMPTY
73181: LIST
73182: LIST
73183: PUSH
73184: LD_INT 34
73186: PUSH
73187: LD_INT 47
73189: PUSH
73190: EMPTY
73191: LIST
73192: LIST
73193: PUSH
73194: EMPTY
73195: LIST
73196: LIST
73197: LIST
73198: LIST
73199: LIST
73200: PUSH
73201: EMPTY
73202: LIST
73203: LIST
73204: PPUSH
73205: CALL_OW 69
73209: ST_TO_ADDR
// if not tmp then
73210: LD_VAR 0 2
73214: NOT
73215: IFFALSE 73219
// exit ;
73217: GO 73248
// for i in tmp do
73219: LD_ADDR_VAR 0 1
73223: PUSH
73224: LD_VAR 0 2
73228: PUSH
73229: FOR_IN
73230: IFFALSE 73246
// begin SetLives ( i , 0 ) ;
73232: LD_VAR 0 1
73236: PPUSH
73237: LD_INT 0
73239: PPUSH
73240: CALL_OW 234
// end ;
73244: GO 73229
73246: POP
73247: POP
// end ;
73248: PPOPN 2
73250: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
73251: LD_EXP 47
73255: IFFALSE 73263
73257: PUSH
73258: LD_EXP 53
73262: AND
73263: IFFALSE 73347
73265: GO 73267
73267: DISABLE
73268: LD_INT 0
73270: PPUSH
73271: PPUSH
// begin enable ;
73272: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
73273: LD_ADDR_VAR 0 2
73277: PUSH
73278: LD_INT 22
73280: PUSH
73281: LD_OWVAR 2
73285: PUSH
73286: EMPTY
73287: LIST
73288: LIST
73289: PUSH
73290: LD_INT 32
73292: PUSH
73293: LD_INT 3
73295: PUSH
73296: EMPTY
73297: LIST
73298: LIST
73299: PUSH
73300: EMPTY
73301: LIST
73302: LIST
73303: PPUSH
73304: CALL_OW 69
73308: ST_TO_ADDR
// if not tmp then
73309: LD_VAR 0 2
73313: NOT
73314: IFFALSE 73318
// exit ;
73316: GO 73347
// for i in tmp do
73318: LD_ADDR_VAR 0 1
73322: PUSH
73323: LD_VAR 0 2
73327: PUSH
73328: FOR_IN
73329: IFFALSE 73345
// begin SetLives ( i , 0 ) ;
73331: LD_VAR 0 1
73335: PPUSH
73336: LD_INT 0
73338: PPUSH
73339: CALL_OW 234
// end ;
73343: GO 73328
73345: POP
73346: POP
// end ;
73347: PPOPN 2
73349: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
73350: LD_EXP 47
73354: IFFALSE 73362
73356: PUSH
73357: LD_EXP 50
73361: AND
73362: IFFALSE 73455
73364: GO 73366
73366: DISABLE
73367: LD_INT 0
73369: PPUSH
// begin enable ;
73370: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
73371: LD_ADDR_VAR 0 1
73375: PUSH
73376: LD_INT 22
73378: PUSH
73379: LD_OWVAR 2
73383: PUSH
73384: EMPTY
73385: LIST
73386: LIST
73387: PUSH
73388: LD_INT 2
73390: PUSH
73391: LD_INT 25
73393: PUSH
73394: LD_INT 5
73396: PUSH
73397: EMPTY
73398: LIST
73399: LIST
73400: PUSH
73401: LD_INT 25
73403: PUSH
73404: LD_INT 9
73406: PUSH
73407: EMPTY
73408: LIST
73409: LIST
73410: PUSH
73411: LD_INT 25
73413: PUSH
73414: LD_INT 8
73416: PUSH
73417: EMPTY
73418: LIST
73419: LIST
73420: PUSH
73421: EMPTY
73422: LIST
73423: LIST
73424: LIST
73425: LIST
73426: PUSH
73427: EMPTY
73428: LIST
73429: LIST
73430: PPUSH
73431: CALL_OW 69
73435: PUSH
73436: FOR_IN
73437: IFFALSE 73453
// begin SetClass ( i , 1 ) ;
73439: LD_VAR 0 1
73443: PPUSH
73444: LD_INT 1
73446: PPUSH
73447: CALL_OW 336
// end ;
73451: GO 73436
73453: POP
73454: POP
// end ;
73455: PPOPN 1
73457: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
73458: LD_EXP 47
73462: IFFALSE 73470
73464: PUSH
73465: LD_EXP 51
73469: AND
73470: IFFALSE 73482
73472: PUSH
73473: LD_OWVAR 65
73477: PUSH
73478: LD_INT 7
73480: LESS
73481: AND
73482: IFFALSE 73496
73484: GO 73486
73486: DISABLE
// begin enable ;
73487: ENABLE
// game_speed := 7 ;
73488: LD_ADDR_OWVAR 65
73492: PUSH
73493: LD_INT 7
73495: ST_TO_ADDR
// end ;
73496: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
73497: LD_EXP 47
73501: IFFALSE 73509
73503: PUSH
73504: LD_EXP 54
73508: AND
73509: IFFALSE 73711
73511: GO 73513
73513: DISABLE
73514: LD_INT 0
73516: PPUSH
73517: PPUSH
73518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
73519: LD_ADDR_VAR 0 3
73523: PUSH
73524: LD_INT 81
73526: PUSH
73527: LD_OWVAR 2
73531: PUSH
73532: EMPTY
73533: LIST
73534: LIST
73535: PUSH
73536: LD_INT 21
73538: PUSH
73539: LD_INT 1
73541: PUSH
73542: EMPTY
73543: LIST
73544: LIST
73545: PUSH
73546: EMPTY
73547: LIST
73548: LIST
73549: PPUSH
73550: CALL_OW 69
73554: ST_TO_ADDR
// if not tmp then
73555: LD_VAR 0 3
73559: NOT
73560: IFFALSE 73564
// exit ;
73562: GO 73711
// if tmp > 5 then
73564: LD_VAR 0 3
73568: PUSH
73569: LD_INT 5
73571: GREATER
73572: IFFALSE 73584
// k := 5 else
73574: LD_ADDR_VAR 0 2
73578: PUSH
73579: LD_INT 5
73581: ST_TO_ADDR
73582: GO 73594
// k := tmp ;
73584: LD_ADDR_VAR 0 2
73588: PUSH
73589: LD_VAR 0 3
73593: ST_TO_ADDR
// for i := 1 to k do
73594: LD_ADDR_VAR 0 1
73598: PUSH
73599: DOUBLE
73600: LD_INT 1
73602: DEC
73603: ST_TO_ADDR
73604: LD_VAR 0 2
73608: PUSH
73609: FOR_TO
73610: IFFALSE 73709
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
73612: LD_VAR 0 3
73616: PUSH
73617: LD_VAR 0 1
73621: ARRAY
73622: PPUSH
73623: LD_VAR 0 1
73627: PUSH
73628: LD_INT 4
73630: MOD
73631: PUSH
73632: LD_INT 1
73634: PLUS
73635: PPUSH
73636: CALL_OW 259
73640: PUSH
73641: LD_INT 10
73643: LESS
73644: IFFALSE 73707
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
73646: LD_VAR 0 3
73650: PUSH
73651: LD_VAR 0 1
73655: ARRAY
73656: PPUSH
73657: LD_VAR 0 1
73661: PUSH
73662: LD_INT 4
73664: MOD
73665: PUSH
73666: LD_INT 1
73668: PLUS
73669: PPUSH
73670: LD_VAR 0 3
73674: PUSH
73675: LD_VAR 0 1
73679: ARRAY
73680: PPUSH
73681: LD_VAR 0 1
73685: PUSH
73686: LD_INT 4
73688: MOD
73689: PUSH
73690: LD_INT 1
73692: PLUS
73693: PPUSH
73694: CALL_OW 259
73698: PUSH
73699: LD_INT 1
73701: PLUS
73702: PPUSH
73703: CALL_OW 237
73707: GO 73609
73709: POP
73710: POP
// end ;
73711: PPOPN 3
73713: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
73714: LD_EXP 47
73718: IFFALSE 73726
73720: PUSH
73721: LD_EXP 55
73725: AND
73726: IFFALSE 73746
73728: GO 73730
73730: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
73731: LD_INT 4
73733: PPUSH
73734: LD_OWVAR 2
73738: PPUSH
73739: LD_INT 0
73741: PPUSH
73742: CALL_OW 324
73746: END
// every 0 0$1 trigger StreamModeActive and sShovel do
73747: LD_EXP 47
73751: IFFALSE 73759
73753: PUSH
73754: LD_EXP 84
73758: AND
73759: IFFALSE 73779
73761: GO 73763
73763: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
73764: LD_INT 19
73766: PPUSH
73767: LD_OWVAR 2
73771: PPUSH
73772: LD_INT 0
73774: PPUSH
73775: CALL_OW 324
73779: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
73780: LD_EXP 47
73784: IFFALSE 73792
73786: PUSH
73787: LD_EXP 56
73791: AND
73792: IFFALSE 73894
73794: GO 73796
73796: DISABLE
73797: LD_INT 0
73799: PPUSH
73800: PPUSH
// begin enable ;
73801: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
73802: LD_ADDR_VAR 0 2
73806: PUSH
73807: LD_INT 22
73809: PUSH
73810: LD_OWVAR 2
73814: PUSH
73815: EMPTY
73816: LIST
73817: LIST
73818: PUSH
73819: LD_INT 2
73821: PUSH
73822: LD_INT 34
73824: PUSH
73825: LD_INT 11
73827: PUSH
73828: EMPTY
73829: LIST
73830: LIST
73831: PUSH
73832: LD_INT 34
73834: PUSH
73835: LD_INT 30
73837: PUSH
73838: EMPTY
73839: LIST
73840: LIST
73841: PUSH
73842: EMPTY
73843: LIST
73844: LIST
73845: LIST
73846: PUSH
73847: EMPTY
73848: LIST
73849: LIST
73850: PPUSH
73851: CALL_OW 69
73855: ST_TO_ADDR
// if not tmp then
73856: LD_VAR 0 2
73860: NOT
73861: IFFALSE 73865
// exit ;
73863: GO 73894
// for i in tmp do
73865: LD_ADDR_VAR 0 1
73869: PUSH
73870: LD_VAR 0 2
73874: PUSH
73875: FOR_IN
73876: IFFALSE 73892
// begin SetLives ( i , 0 ) ;
73878: LD_VAR 0 1
73882: PPUSH
73883: LD_INT 0
73885: PPUSH
73886: CALL_OW 234
// end ;
73890: GO 73875
73892: POP
73893: POP
// end ;
73894: PPOPN 2
73896: END
// every 0 0$1 trigger StreamModeActive and sBunker do
73897: LD_EXP 47
73901: IFFALSE 73909
73903: PUSH
73904: LD_EXP 57
73908: AND
73909: IFFALSE 73929
73911: GO 73913
73913: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
73914: LD_INT 32
73916: PPUSH
73917: LD_OWVAR 2
73921: PPUSH
73922: LD_INT 0
73924: PPUSH
73925: CALL_OW 324
73929: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
73930: LD_EXP 47
73934: IFFALSE 73942
73936: PUSH
73937: LD_EXP 58
73941: AND
73942: IFFALSE 74125
73944: GO 73946
73946: DISABLE
73947: LD_INT 0
73949: PPUSH
73950: PPUSH
73951: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
73952: LD_ADDR_VAR 0 2
73956: PUSH
73957: LD_INT 22
73959: PUSH
73960: LD_OWVAR 2
73964: PUSH
73965: EMPTY
73966: LIST
73967: LIST
73968: PUSH
73969: LD_INT 33
73971: PUSH
73972: LD_INT 3
73974: PUSH
73975: EMPTY
73976: LIST
73977: LIST
73978: PUSH
73979: EMPTY
73980: LIST
73981: LIST
73982: PPUSH
73983: CALL_OW 69
73987: ST_TO_ADDR
// if not tmp then
73988: LD_VAR 0 2
73992: NOT
73993: IFFALSE 73997
// exit ;
73995: GO 74125
// side := 0 ;
73997: LD_ADDR_VAR 0 3
74001: PUSH
74002: LD_INT 0
74004: ST_TO_ADDR
// for i := 1 to 8 do
74005: LD_ADDR_VAR 0 1
74009: PUSH
74010: DOUBLE
74011: LD_INT 1
74013: DEC
74014: ST_TO_ADDR
74015: LD_INT 8
74017: PUSH
74018: FOR_TO
74019: IFFALSE 74069
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
74021: LD_OWVAR 2
74025: PUSH
74026: LD_VAR 0 1
74030: NONEQUAL
74031: IFFALSE 74053
74033: PUSH
74034: LD_OWVAR 2
74038: PPUSH
74039: LD_VAR 0 1
74043: PPUSH
74044: CALL_OW 81
74048: PUSH
74049: LD_INT 2
74051: EQUAL
74052: AND
74053: IFFALSE 74067
// begin side := i ;
74055: LD_ADDR_VAR 0 3
74059: PUSH
74060: LD_VAR 0 1
74064: ST_TO_ADDR
// break ;
74065: GO 74069
// end ;
74067: GO 74018
74069: POP
74070: POP
// if not side then
74071: LD_VAR 0 3
74075: NOT
74076: IFFALSE 74080
// exit ;
74078: GO 74125
// for i := 1 to tmp do
74080: LD_ADDR_VAR 0 1
74084: PUSH
74085: DOUBLE
74086: LD_INT 1
74088: DEC
74089: ST_TO_ADDR
74090: LD_VAR 0 2
74094: PUSH
74095: FOR_TO
74096: IFFALSE 74123
// if Prob ( 60 ) then
74098: LD_INT 60
74100: PPUSH
74101: CALL_OW 13
74105: IFFALSE 74121
// SetSide ( i , side ) ;
74107: LD_VAR 0 1
74111: PPUSH
74112: LD_VAR 0 3
74116: PPUSH
74117: CALL_OW 235
74121: GO 74095
74123: POP
74124: POP
// end ;
74125: PPOPN 3
74127: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
74128: LD_EXP 47
74132: IFFALSE 74140
74134: PUSH
74135: LD_EXP 60
74139: AND
74140: IFFALSE 74259
74142: GO 74144
74144: DISABLE
74145: LD_INT 0
74147: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
74148: LD_ADDR_VAR 0 1
74152: PUSH
74153: LD_INT 22
74155: PUSH
74156: LD_OWVAR 2
74160: PUSH
74161: EMPTY
74162: LIST
74163: LIST
74164: PUSH
74165: LD_INT 21
74167: PUSH
74168: LD_INT 1
74170: PUSH
74171: EMPTY
74172: LIST
74173: LIST
74174: PUSH
74175: LD_INT 3
74177: PUSH
74178: LD_INT 23
74180: PUSH
74181: LD_INT 0
74183: PUSH
74184: EMPTY
74185: LIST
74186: LIST
74187: PUSH
74188: EMPTY
74189: LIST
74190: LIST
74191: PUSH
74192: EMPTY
74193: LIST
74194: LIST
74195: LIST
74196: PPUSH
74197: CALL_OW 69
74201: PUSH
74202: FOR_IN
74203: IFFALSE 74257
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
74205: LD_VAR 0 1
74209: PPUSH
74210: CALL_OW 257
74214: PUSH
74215: LD_INT 1
74217: PUSH
74218: LD_INT 2
74220: PUSH
74221: LD_INT 3
74223: PUSH
74224: LD_INT 4
74226: PUSH
74227: EMPTY
74228: LIST
74229: LIST
74230: LIST
74231: LIST
74232: IN
74233: IFFALSE 74255
// SetClass ( un , rand ( 1 , 4 ) ) ;
74235: LD_VAR 0 1
74239: PPUSH
74240: LD_INT 1
74242: PPUSH
74243: LD_INT 4
74245: PPUSH
74246: CALL_OW 12
74250: PPUSH
74251: CALL_OW 336
74255: GO 74202
74257: POP
74258: POP
// end ;
74259: PPOPN 1
74261: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
74262: LD_EXP 47
74266: IFFALSE 74274
74268: PUSH
74269: LD_EXP 59
74273: AND
74274: IFFALSE 74353
74276: GO 74278
74278: DISABLE
74279: LD_INT 0
74281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
74282: LD_ADDR_VAR 0 1
74286: PUSH
74287: LD_INT 22
74289: PUSH
74290: LD_OWVAR 2
74294: PUSH
74295: EMPTY
74296: LIST
74297: LIST
74298: PUSH
74299: LD_INT 21
74301: PUSH
74302: LD_INT 3
74304: PUSH
74305: EMPTY
74306: LIST
74307: LIST
74308: PUSH
74309: EMPTY
74310: LIST
74311: LIST
74312: PPUSH
74313: CALL_OW 69
74317: ST_TO_ADDR
// if not tmp then
74318: LD_VAR 0 1
74322: NOT
74323: IFFALSE 74327
// exit ;
74325: GO 74353
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
74327: LD_VAR 0 1
74331: PUSH
74332: LD_INT 1
74334: PPUSH
74335: LD_VAR 0 1
74339: PPUSH
74340: CALL_OW 12
74344: ARRAY
74345: PPUSH
74346: LD_INT 100
74348: PPUSH
74349: CALL_OW 234
// end ;
74353: PPOPN 1
74355: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
74356: LD_EXP 47
74360: IFFALSE 74368
74362: PUSH
74363: LD_EXP 61
74367: AND
74368: IFFALSE 74466
74370: GO 74372
74372: DISABLE
74373: LD_INT 0
74375: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
74376: LD_ADDR_VAR 0 1
74380: PUSH
74381: LD_INT 22
74383: PUSH
74384: LD_OWVAR 2
74388: PUSH
74389: EMPTY
74390: LIST
74391: LIST
74392: PUSH
74393: LD_INT 21
74395: PUSH
74396: LD_INT 1
74398: PUSH
74399: EMPTY
74400: LIST
74401: LIST
74402: PUSH
74403: EMPTY
74404: LIST
74405: LIST
74406: PPUSH
74407: CALL_OW 69
74411: ST_TO_ADDR
// if not tmp then
74412: LD_VAR 0 1
74416: NOT
74417: IFFALSE 74421
// exit ;
74419: GO 74466
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
74421: LD_VAR 0 1
74425: PUSH
74426: LD_INT 1
74428: PPUSH
74429: LD_VAR 0 1
74433: PPUSH
74434: CALL_OW 12
74438: ARRAY
74439: PPUSH
74440: LD_INT 1
74442: PPUSH
74443: LD_INT 4
74445: PPUSH
74446: CALL_OW 12
74450: PPUSH
74451: LD_INT 3000
74453: PPUSH
74454: LD_INT 9000
74456: PPUSH
74457: CALL_OW 12
74461: PPUSH
74462: CALL_OW 492
// end ;
74466: PPOPN 1
74468: END
// every 0 0$1 trigger StreamModeActive and sDepot do
74469: LD_EXP 47
74473: IFFALSE 74481
74475: PUSH
74476: LD_EXP 62
74480: AND
74481: IFFALSE 74501
74483: GO 74485
74485: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
74486: LD_INT 1
74488: PPUSH
74489: LD_OWVAR 2
74493: PPUSH
74494: LD_INT 0
74496: PPUSH
74497: CALL_OW 324
74501: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
74502: LD_EXP 47
74506: IFFALSE 74514
74508: PUSH
74509: LD_EXP 63
74513: AND
74514: IFFALSE 74597
74516: GO 74518
74518: DISABLE
74519: LD_INT 0
74521: PPUSH
74522: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
74523: LD_ADDR_VAR 0 2
74527: PUSH
74528: LD_INT 22
74530: PUSH
74531: LD_OWVAR 2
74535: PUSH
74536: EMPTY
74537: LIST
74538: LIST
74539: PUSH
74540: LD_INT 21
74542: PUSH
74543: LD_INT 3
74545: PUSH
74546: EMPTY
74547: LIST
74548: LIST
74549: PUSH
74550: EMPTY
74551: LIST
74552: LIST
74553: PPUSH
74554: CALL_OW 69
74558: ST_TO_ADDR
// if not tmp then
74559: LD_VAR 0 2
74563: NOT
74564: IFFALSE 74568
// exit ;
74566: GO 74597
// for i in tmp do
74568: LD_ADDR_VAR 0 1
74572: PUSH
74573: LD_VAR 0 2
74577: PUSH
74578: FOR_IN
74579: IFFALSE 74595
// SetBLevel ( i , 10 ) ;
74581: LD_VAR 0 1
74585: PPUSH
74586: LD_INT 10
74588: PPUSH
74589: CALL_OW 241
74593: GO 74578
74595: POP
74596: POP
// end ;
74597: PPOPN 2
74599: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
74600: LD_EXP 47
74604: IFFALSE 74612
74606: PUSH
74607: LD_EXP 64
74611: AND
74612: IFFALSE 74723
74614: GO 74616
74616: DISABLE
74617: LD_INT 0
74619: PPUSH
74620: PPUSH
74621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74622: LD_ADDR_VAR 0 3
74626: PUSH
74627: LD_INT 22
74629: PUSH
74630: LD_OWVAR 2
74634: PUSH
74635: EMPTY
74636: LIST
74637: LIST
74638: PUSH
74639: LD_INT 25
74641: PUSH
74642: LD_INT 1
74644: PUSH
74645: EMPTY
74646: LIST
74647: LIST
74648: PUSH
74649: EMPTY
74650: LIST
74651: LIST
74652: PPUSH
74653: CALL_OW 69
74657: ST_TO_ADDR
// if not tmp then
74658: LD_VAR 0 3
74662: NOT
74663: IFFALSE 74667
// exit ;
74665: GO 74723
// un := tmp [ rand ( 1 , tmp ) ] ;
74667: LD_ADDR_VAR 0 2
74671: PUSH
74672: LD_VAR 0 3
74676: PUSH
74677: LD_INT 1
74679: PPUSH
74680: LD_VAR 0 3
74684: PPUSH
74685: CALL_OW 12
74689: ARRAY
74690: ST_TO_ADDR
// if Crawls ( un ) then
74691: LD_VAR 0 2
74695: PPUSH
74696: CALL_OW 318
74700: IFFALSE 74711
// ComWalk ( un ) ;
74702: LD_VAR 0 2
74706: PPUSH
74707: CALL_OW 138
// SetClass ( un , class_sniper ) ;
74711: LD_VAR 0 2
74715: PPUSH
74716: LD_INT 5
74718: PPUSH
74719: CALL_OW 336
// end ;
74723: PPOPN 3
74725: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
74726: LD_EXP 47
74730: IFFALSE 74738
74732: PUSH
74733: LD_EXP 65
74737: AND
74738: IFFALSE 74750
74740: PUSH
74741: LD_OWVAR 67
74745: PUSH
74746: LD_INT 4
74748: LESS
74749: AND
74750: IFFALSE 74769
74752: GO 74754
74754: DISABLE
// begin Difficulty := Difficulty + 1 ;
74755: LD_ADDR_OWVAR 67
74759: PUSH
74760: LD_OWVAR 67
74764: PUSH
74765: LD_INT 1
74767: PLUS
74768: ST_TO_ADDR
// end ;
74769: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
74770: LD_EXP 47
74774: IFFALSE 74782
74776: PUSH
74777: LD_EXP 66
74781: AND
74782: IFFALSE 74885
74784: GO 74786
74786: DISABLE
74787: LD_INT 0
74789: PPUSH
// begin for i := 1 to 5 do
74790: LD_ADDR_VAR 0 1
74794: PUSH
74795: DOUBLE
74796: LD_INT 1
74798: DEC
74799: ST_TO_ADDR
74800: LD_INT 5
74802: PUSH
74803: FOR_TO
74804: IFFALSE 74883
// begin uc_nation := nation_nature ;
74806: LD_ADDR_OWVAR 21
74810: PUSH
74811: LD_INT 0
74813: ST_TO_ADDR
// uc_side := 0 ;
74814: LD_ADDR_OWVAR 20
74818: PUSH
74819: LD_INT 0
74821: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
74822: LD_ADDR_OWVAR 29
74826: PUSH
74827: LD_INT 12
74829: PUSH
74830: LD_INT 12
74832: PUSH
74833: EMPTY
74834: LIST
74835: LIST
74836: ST_TO_ADDR
// hc_agressivity := 20 ;
74837: LD_ADDR_OWVAR 35
74841: PUSH
74842: LD_INT 20
74844: ST_TO_ADDR
// hc_class := class_tiger ;
74845: LD_ADDR_OWVAR 28
74849: PUSH
74850: LD_INT 14
74852: ST_TO_ADDR
// hc_gallery :=  ;
74853: LD_ADDR_OWVAR 33
74857: PUSH
74858: LD_STRING 
74860: ST_TO_ADDR
// hc_name :=  ;
74861: LD_ADDR_OWVAR 26
74865: PUSH
74866: LD_STRING 
74868: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
74869: CALL_OW 44
74873: PPUSH
74874: LD_INT 0
74876: PPUSH
74877: CALL_OW 51
// end ;
74881: GO 74803
74883: POP
74884: POP
// end ;
74885: PPOPN 1
74887: END
// every 0 0$1 trigger StreamModeActive and sBomb do
74888: LD_EXP 47
74892: IFFALSE 74900
74894: PUSH
74895: LD_EXP 67
74899: AND
74900: IFFALSE 74909
74902: GO 74904
74904: DISABLE
// StreamSibBomb ;
74905: CALL 74910 0 0
74909: END
// export function StreamSibBomb ; var i , x , y ; begin
74910: LD_INT 0
74912: PPUSH
74913: PPUSH
74914: PPUSH
74915: PPUSH
// result := false ;
74916: LD_ADDR_VAR 0 1
74920: PUSH
74921: LD_INT 0
74923: ST_TO_ADDR
// for i := 1 to 16 do
74924: LD_ADDR_VAR 0 2
74928: PUSH
74929: DOUBLE
74930: LD_INT 1
74932: DEC
74933: ST_TO_ADDR
74934: LD_INT 16
74936: PUSH
74937: FOR_TO
74938: IFFALSE 75137
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
74940: LD_ADDR_VAR 0 3
74944: PUSH
74945: LD_INT 10
74947: PUSH
74948: LD_INT 20
74950: PUSH
74951: LD_INT 30
74953: PUSH
74954: LD_INT 40
74956: PUSH
74957: LD_INT 50
74959: PUSH
74960: LD_INT 60
74962: PUSH
74963: LD_INT 70
74965: PUSH
74966: LD_INT 80
74968: PUSH
74969: LD_INT 90
74971: PUSH
74972: LD_INT 100
74974: PUSH
74975: LD_INT 110
74977: PUSH
74978: LD_INT 120
74980: PUSH
74981: LD_INT 130
74983: PUSH
74984: LD_INT 140
74986: PUSH
74987: LD_INT 150
74989: PUSH
74990: EMPTY
74991: LIST
74992: LIST
74993: LIST
74994: LIST
74995: LIST
74996: LIST
74997: LIST
74998: LIST
74999: LIST
75000: LIST
75001: LIST
75002: LIST
75003: LIST
75004: LIST
75005: LIST
75006: PUSH
75007: LD_INT 1
75009: PPUSH
75010: LD_INT 15
75012: PPUSH
75013: CALL_OW 12
75017: ARRAY
75018: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
75019: LD_ADDR_VAR 0 4
75023: PUSH
75024: LD_INT 10
75026: PUSH
75027: LD_INT 20
75029: PUSH
75030: LD_INT 30
75032: PUSH
75033: LD_INT 40
75035: PUSH
75036: LD_INT 50
75038: PUSH
75039: LD_INT 60
75041: PUSH
75042: LD_INT 70
75044: PUSH
75045: LD_INT 80
75047: PUSH
75048: LD_INT 90
75050: PUSH
75051: LD_INT 100
75053: PUSH
75054: LD_INT 110
75056: PUSH
75057: LD_INT 120
75059: PUSH
75060: LD_INT 130
75062: PUSH
75063: LD_INT 140
75065: PUSH
75066: LD_INT 150
75068: PUSH
75069: EMPTY
75070: LIST
75071: LIST
75072: LIST
75073: LIST
75074: LIST
75075: LIST
75076: LIST
75077: LIST
75078: LIST
75079: LIST
75080: LIST
75081: LIST
75082: LIST
75083: LIST
75084: LIST
75085: PUSH
75086: LD_INT 1
75088: PPUSH
75089: LD_INT 15
75091: PPUSH
75092: CALL_OW 12
75096: ARRAY
75097: ST_TO_ADDR
// if ValidHex ( x , y ) then
75098: LD_VAR 0 3
75102: PPUSH
75103: LD_VAR 0 4
75107: PPUSH
75108: CALL_OW 488
75112: IFFALSE 75135
// begin result := [ x , y ] ;
75114: LD_ADDR_VAR 0 1
75118: PUSH
75119: LD_VAR 0 3
75123: PUSH
75124: LD_VAR 0 4
75128: PUSH
75129: EMPTY
75130: LIST
75131: LIST
75132: ST_TO_ADDR
// break ;
75133: GO 75137
// end ; end ;
75135: GO 74937
75137: POP
75138: POP
// if result then
75139: LD_VAR 0 1
75143: IFFALSE 75203
// begin ToLua ( playSibBomb() ) ;
75145: LD_STRING playSibBomb()
75147: PPUSH
75148: CALL_OW 559
// wait ( 0 0$14 ) ;
75152: LD_INT 490
75154: PPUSH
75155: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
75159: LD_VAR 0 1
75163: PUSH
75164: LD_INT 1
75166: ARRAY
75167: PPUSH
75168: LD_VAR 0 1
75172: PUSH
75173: LD_INT 2
75175: ARRAY
75176: PPUSH
75177: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
75181: LD_VAR 0 1
75185: PUSH
75186: LD_INT 1
75188: ARRAY
75189: PPUSH
75190: LD_VAR 0 1
75194: PUSH
75195: LD_INT 2
75197: ARRAY
75198: PPUSH
75199: CALL_OW 429
// end ; end ;
75203: LD_VAR 0 1
75207: RET
// every 0 0$1 trigger StreamModeActive and sReset do
75208: LD_EXP 47
75212: IFFALSE 75220
75214: PUSH
75215: LD_EXP 69
75219: AND
75220: IFFALSE 75232
75222: GO 75224
75224: DISABLE
// YouLost (  ) ;
75225: LD_STRING 
75227: PPUSH
75228: CALL_OW 104
75232: END
// every 0 0$1 trigger StreamModeActive and sFog do
75233: LD_EXP 47
75237: IFFALSE 75245
75239: PUSH
75240: LD_EXP 68
75244: AND
75245: IFFALSE 75259
75247: GO 75249
75249: DISABLE
// FogOff ( your_side ) ;
75250: LD_OWVAR 2
75254: PPUSH
75255: CALL_OW 344
75259: END
// every 0 0$1 trigger StreamModeActive and sSun do
75260: LD_EXP 47
75264: IFFALSE 75272
75266: PUSH
75267: LD_EXP 70
75271: AND
75272: IFFALSE 75300
75274: GO 75276
75276: DISABLE
// begin solar_recharge_percent := 0 ;
75277: LD_ADDR_OWVAR 79
75281: PUSH
75282: LD_INT 0
75284: ST_TO_ADDR
// wait ( 5 5$00 ) ;
75285: LD_INT 10500
75287: PPUSH
75288: CALL_OW 67
// solar_recharge_percent := 100 ;
75292: LD_ADDR_OWVAR 79
75296: PUSH
75297: LD_INT 100
75299: ST_TO_ADDR
// end ;
75300: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
75301: LD_EXP 47
75305: IFFALSE 75313
75307: PUSH
75308: LD_EXP 71
75312: AND
75313: IFFALSE 75552
75315: GO 75317
75317: DISABLE
75318: LD_INT 0
75320: PPUSH
75321: PPUSH
75322: PPUSH
// begin tmp := [ ] ;
75323: LD_ADDR_VAR 0 3
75327: PUSH
75328: EMPTY
75329: ST_TO_ADDR
// for i := 1 to 6 do
75330: LD_ADDR_VAR 0 1
75334: PUSH
75335: DOUBLE
75336: LD_INT 1
75338: DEC
75339: ST_TO_ADDR
75340: LD_INT 6
75342: PUSH
75343: FOR_TO
75344: IFFALSE 75449
// begin uc_nation := nation_nature ;
75346: LD_ADDR_OWVAR 21
75350: PUSH
75351: LD_INT 0
75353: ST_TO_ADDR
// uc_side := 0 ;
75354: LD_ADDR_OWVAR 20
75358: PUSH
75359: LD_INT 0
75361: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75362: LD_ADDR_OWVAR 29
75366: PUSH
75367: LD_INT 12
75369: PUSH
75370: LD_INT 12
75372: PUSH
75373: EMPTY
75374: LIST
75375: LIST
75376: ST_TO_ADDR
// hc_agressivity := 20 ;
75377: LD_ADDR_OWVAR 35
75381: PUSH
75382: LD_INT 20
75384: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
75385: LD_ADDR_OWVAR 28
75389: PUSH
75390: LD_INT 17
75392: ST_TO_ADDR
// hc_gallery :=  ;
75393: LD_ADDR_OWVAR 33
75397: PUSH
75398: LD_STRING 
75400: ST_TO_ADDR
// hc_name :=  ;
75401: LD_ADDR_OWVAR 26
75405: PUSH
75406: LD_STRING 
75408: ST_TO_ADDR
// un := CreateHuman ;
75409: LD_ADDR_VAR 0 2
75413: PUSH
75414: CALL_OW 44
75418: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
75419: LD_VAR 0 2
75423: PPUSH
75424: LD_INT 1
75426: PPUSH
75427: CALL_OW 51
// tmp := tmp ^ un ;
75431: LD_ADDR_VAR 0 3
75435: PUSH
75436: LD_VAR 0 3
75440: PUSH
75441: LD_VAR 0 2
75445: ADD
75446: ST_TO_ADDR
// end ;
75447: GO 75343
75449: POP
75450: POP
// repeat wait ( 0 0$1 ) ;
75451: LD_INT 35
75453: PPUSH
75454: CALL_OW 67
// for un in tmp do
75458: LD_ADDR_VAR 0 2
75462: PUSH
75463: LD_VAR 0 3
75467: PUSH
75468: FOR_IN
75469: IFFALSE 75543
// begin if IsDead ( un ) then
75471: LD_VAR 0 2
75475: PPUSH
75476: CALL_OW 301
75480: IFFALSE 75500
// begin tmp := tmp diff un ;
75482: LD_ADDR_VAR 0 3
75486: PUSH
75487: LD_VAR 0 3
75491: PUSH
75492: LD_VAR 0 2
75496: DIFF
75497: ST_TO_ADDR
// continue ;
75498: GO 75468
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
75500: LD_VAR 0 2
75504: PPUSH
75505: LD_INT 3
75507: PUSH
75508: LD_INT 22
75510: PUSH
75511: LD_INT 0
75513: PUSH
75514: EMPTY
75515: LIST
75516: LIST
75517: PUSH
75518: EMPTY
75519: LIST
75520: LIST
75521: PPUSH
75522: CALL_OW 69
75526: PPUSH
75527: LD_VAR 0 2
75531: PPUSH
75532: CALL_OW 74
75536: PPUSH
75537: CALL_OW 115
// end ;
75541: GO 75468
75543: POP
75544: POP
// until not tmp ;
75545: LD_VAR 0 3
75549: NOT
75550: IFFALSE 75451
// end ;
75552: PPOPN 3
75554: END
// every 0 0$1 trigger StreamModeActive and sTroll do
75555: LD_EXP 47
75559: IFFALSE 75567
75561: PUSH
75562: LD_EXP 72
75566: AND
75567: IFFALSE 75621
75569: GO 75571
75571: DISABLE
// begin ToLua ( displayTroll(); ) ;
75572: LD_STRING displayTroll();
75574: PPUSH
75575: CALL_OW 559
// wait ( 3 3$00 ) ;
75579: LD_INT 6300
75581: PPUSH
75582: CALL_OW 67
// ToLua ( hideTroll(); ) ;
75586: LD_STRING hideTroll();
75588: PPUSH
75589: CALL_OW 559
// wait ( 1 1$00 ) ;
75593: LD_INT 2100
75595: PPUSH
75596: CALL_OW 67
// ToLua ( displayTroll(); ) ;
75600: LD_STRING displayTroll();
75602: PPUSH
75603: CALL_OW 559
// wait ( 1 1$00 ) ;
75607: LD_INT 2100
75609: PPUSH
75610: CALL_OW 67
// ToLua ( hideTroll(); ) ;
75614: LD_STRING hideTroll();
75616: PPUSH
75617: CALL_OW 559
// end ;
75621: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
75622: LD_EXP 47
75626: IFFALSE 75634
75628: PUSH
75629: LD_EXP 73
75633: AND
75634: IFFALSE 75697
75636: GO 75638
75638: DISABLE
75639: LD_INT 0
75641: PPUSH
// begin p := 0 ;
75642: LD_ADDR_VAR 0 1
75646: PUSH
75647: LD_INT 0
75649: ST_TO_ADDR
// repeat game_speed := 1 ;
75650: LD_ADDR_OWVAR 65
75654: PUSH
75655: LD_INT 1
75657: ST_TO_ADDR
// wait ( 0 0$1 ) ;
75658: LD_INT 35
75660: PPUSH
75661: CALL_OW 67
// p := p + 1 ;
75665: LD_ADDR_VAR 0 1
75669: PUSH
75670: LD_VAR 0 1
75674: PUSH
75675: LD_INT 1
75677: PLUS
75678: ST_TO_ADDR
// until p >= 60 ;
75679: LD_VAR 0 1
75683: PUSH
75684: LD_INT 60
75686: GREATEREQUAL
75687: IFFALSE 75650
// game_speed := 4 ;
75689: LD_ADDR_OWVAR 65
75693: PUSH
75694: LD_INT 4
75696: ST_TO_ADDR
// end ;
75697: PPOPN 1
75699: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
75700: LD_EXP 47
75704: IFFALSE 75712
75706: PUSH
75707: LD_EXP 74
75711: AND
75712: IFFALSE 75858
75714: GO 75716
75716: DISABLE
75717: LD_INT 0
75719: PPUSH
75720: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75721: LD_ADDR_VAR 0 1
75725: PUSH
75726: LD_INT 22
75728: PUSH
75729: LD_OWVAR 2
75733: PUSH
75734: EMPTY
75735: LIST
75736: LIST
75737: PUSH
75738: LD_INT 2
75740: PUSH
75741: LD_INT 30
75743: PUSH
75744: LD_INT 0
75746: PUSH
75747: EMPTY
75748: LIST
75749: LIST
75750: PUSH
75751: LD_INT 30
75753: PUSH
75754: LD_INT 1
75756: PUSH
75757: EMPTY
75758: LIST
75759: LIST
75760: PUSH
75761: EMPTY
75762: LIST
75763: LIST
75764: LIST
75765: PUSH
75766: EMPTY
75767: LIST
75768: LIST
75769: PPUSH
75770: CALL_OW 69
75774: ST_TO_ADDR
// if not depot then
75775: LD_VAR 0 1
75779: NOT
75780: IFFALSE 75784
// exit ;
75782: GO 75858
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
75784: LD_ADDR_VAR 0 2
75788: PUSH
75789: LD_VAR 0 1
75793: PUSH
75794: LD_INT 1
75796: PPUSH
75797: LD_VAR 0 1
75801: PPUSH
75802: CALL_OW 12
75806: ARRAY
75807: PPUSH
75808: CALL_OW 274
75812: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
75813: LD_VAR 0 2
75817: PPUSH
75818: LD_INT 1
75820: PPUSH
75821: LD_INT 0
75823: PPUSH
75824: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
75828: LD_VAR 0 2
75832: PPUSH
75833: LD_INT 2
75835: PPUSH
75836: LD_INT 0
75838: PPUSH
75839: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
75843: LD_VAR 0 2
75847: PPUSH
75848: LD_INT 3
75850: PPUSH
75851: LD_INT 0
75853: PPUSH
75854: CALL_OW 277
// end ;
75858: PPOPN 2
75860: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
75861: LD_EXP 47
75865: IFFALSE 75873
75867: PUSH
75868: LD_EXP 75
75872: AND
75873: IFFALSE 75970
75875: GO 75877
75877: DISABLE
75878: LD_INT 0
75880: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75881: LD_ADDR_VAR 0 1
75885: PUSH
75886: LD_INT 22
75888: PUSH
75889: LD_OWVAR 2
75893: PUSH
75894: EMPTY
75895: LIST
75896: LIST
75897: PUSH
75898: LD_INT 21
75900: PUSH
75901: LD_INT 1
75903: PUSH
75904: EMPTY
75905: LIST
75906: LIST
75907: PUSH
75908: LD_INT 3
75910: PUSH
75911: LD_INT 23
75913: PUSH
75914: LD_INT 0
75916: PUSH
75917: EMPTY
75918: LIST
75919: LIST
75920: PUSH
75921: EMPTY
75922: LIST
75923: LIST
75924: PUSH
75925: EMPTY
75926: LIST
75927: LIST
75928: LIST
75929: PPUSH
75930: CALL_OW 69
75934: ST_TO_ADDR
// if not tmp then
75935: LD_VAR 0 1
75939: NOT
75940: IFFALSE 75944
// exit ;
75942: GO 75970
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
75944: LD_VAR 0 1
75948: PUSH
75949: LD_INT 1
75951: PPUSH
75952: LD_VAR 0 1
75956: PPUSH
75957: CALL_OW 12
75961: ARRAY
75962: PPUSH
75963: LD_INT 200
75965: PPUSH
75966: CALL_OW 234
// end ;
75970: PPOPN 1
75972: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
75973: LD_EXP 47
75977: IFFALSE 75985
75979: PUSH
75980: LD_EXP 76
75984: AND
75985: IFFALSE 76064
75987: GO 75989
75989: DISABLE
75990: LD_INT 0
75992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
75993: LD_ADDR_VAR 0 1
75997: PUSH
75998: LD_INT 22
76000: PUSH
76001: LD_OWVAR 2
76005: PUSH
76006: EMPTY
76007: LIST
76008: LIST
76009: PUSH
76010: LD_INT 21
76012: PUSH
76013: LD_INT 2
76015: PUSH
76016: EMPTY
76017: LIST
76018: LIST
76019: PUSH
76020: EMPTY
76021: LIST
76022: LIST
76023: PPUSH
76024: CALL_OW 69
76028: ST_TO_ADDR
// if not tmp then
76029: LD_VAR 0 1
76033: NOT
76034: IFFALSE 76038
// exit ;
76036: GO 76064
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
76038: LD_VAR 0 1
76042: PUSH
76043: LD_INT 1
76045: PPUSH
76046: LD_VAR 0 1
76050: PPUSH
76051: CALL_OW 12
76055: ARRAY
76056: PPUSH
76057: LD_INT 60
76059: PPUSH
76060: CALL_OW 234
// end ;
76064: PPOPN 1
76066: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
76067: LD_EXP 47
76071: IFFALSE 76079
76073: PUSH
76074: LD_EXP 77
76078: AND
76079: IFFALSE 76178
76081: GO 76083
76083: DISABLE
76084: LD_INT 0
76086: PPUSH
76087: PPUSH
// begin enable ;
76088: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
76089: LD_ADDR_VAR 0 1
76093: PUSH
76094: LD_INT 22
76096: PUSH
76097: LD_OWVAR 2
76101: PUSH
76102: EMPTY
76103: LIST
76104: LIST
76105: PUSH
76106: LD_INT 61
76108: PUSH
76109: EMPTY
76110: LIST
76111: PUSH
76112: LD_INT 33
76114: PUSH
76115: LD_INT 2
76117: PUSH
76118: EMPTY
76119: LIST
76120: LIST
76121: PUSH
76122: EMPTY
76123: LIST
76124: LIST
76125: LIST
76126: PPUSH
76127: CALL_OW 69
76131: ST_TO_ADDR
// if not tmp then
76132: LD_VAR 0 1
76136: NOT
76137: IFFALSE 76141
// exit ;
76139: GO 76178
// for i in tmp do
76141: LD_ADDR_VAR 0 2
76145: PUSH
76146: LD_VAR 0 1
76150: PUSH
76151: FOR_IN
76152: IFFALSE 76176
// if IsControledBy ( i ) then
76154: LD_VAR 0 2
76158: PPUSH
76159: CALL_OW 312
76163: IFFALSE 76174
// ComUnlink ( i ) ;
76165: LD_VAR 0 2
76169: PPUSH
76170: CALL_OW 136
76174: GO 76151
76176: POP
76177: POP
// end ;
76178: PPOPN 2
76180: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
76181: LD_EXP 47
76185: IFFALSE 76193
76187: PUSH
76188: LD_EXP 78
76192: AND
76193: IFFALSE 76333
76195: GO 76197
76197: DISABLE
76198: LD_INT 0
76200: PPUSH
76201: PPUSH
// begin ToLua ( displayPowell(); ) ;
76202: LD_STRING displayPowell();
76204: PPUSH
76205: CALL_OW 559
// uc_side := 0 ;
76209: LD_ADDR_OWVAR 20
76213: PUSH
76214: LD_INT 0
76216: ST_TO_ADDR
// uc_nation := 2 ;
76217: LD_ADDR_OWVAR 21
76221: PUSH
76222: LD_INT 2
76224: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
76225: LD_ADDR_OWVAR 37
76229: PUSH
76230: LD_INT 14
76232: ST_TO_ADDR
// vc_engine := engine_siberite ;
76233: LD_ADDR_OWVAR 39
76237: PUSH
76238: LD_INT 3
76240: ST_TO_ADDR
// vc_control := control_apeman ;
76241: LD_ADDR_OWVAR 38
76245: PUSH
76246: LD_INT 5
76248: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
76249: LD_ADDR_OWVAR 40
76253: PUSH
76254: LD_INT 29
76256: ST_TO_ADDR
// un := CreateVehicle ;
76257: LD_ADDR_VAR 0 2
76261: PUSH
76262: CALL_OW 45
76266: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
76267: LD_VAR 0 2
76271: PPUSH
76272: LD_INT 1
76274: PPUSH
76275: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
76279: LD_INT 35
76281: PPUSH
76282: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
76286: LD_VAR 0 2
76290: PPUSH
76291: LD_INT 22
76293: PUSH
76294: LD_OWVAR 2
76298: PUSH
76299: EMPTY
76300: LIST
76301: LIST
76302: PPUSH
76303: CALL_OW 69
76307: PPUSH
76308: LD_VAR 0 2
76312: PPUSH
76313: CALL_OW 74
76317: PPUSH
76318: CALL_OW 115
// until IsDead ( un ) ;
76322: LD_VAR 0 2
76326: PPUSH
76327: CALL_OW 301
76331: IFFALSE 76279
// end ;
76333: PPOPN 2
76335: END
// every 0 0$1 trigger StreamModeActive and sStu do
76336: LD_EXP 47
76340: IFFALSE 76348
76342: PUSH
76343: LD_EXP 86
76347: AND
76348: IFFALSE 76364
76350: GO 76352
76352: DISABLE
// begin ToLua ( displayStucuk(); ) ;
76353: LD_STRING displayStucuk();
76355: PPUSH
76356: CALL_OW 559
// ResetFog ;
76360: CALL_OW 335
// end ;
76364: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
76365: LD_EXP 47
76369: IFFALSE 76377
76371: PUSH
76372: LD_EXP 79
76376: AND
76377: IFFALSE 76518
76379: GO 76381
76381: DISABLE
76382: LD_INT 0
76384: PPUSH
76385: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
76386: LD_ADDR_VAR 0 2
76390: PUSH
76391: LD_INT 22
76393: PUSH
76394: LD_OWVAR 2
76398: PUSH
76399: EMPTY
76400: LIST
76401: LIST
76402: PUSH
76403: LD_INT 21
76405: PUSH
76406: LD_INT 1
76408: PUSH
76409: EMPTY
76410: LIST
76411: LIST
76412: PUSH
76413: EMPTY
76414: LIST
76415: LIST
76416: PPUSH
76417: CALL_OW 69
76421: ST_TO_ADDR
// if not tmp then
76422: LD_VAR 0 2
76426: NOT
76427: IFFALSE 76431
// exit ;
76429: GO 76518
// un := tmp [ rand ( 1 , tmp ) ] ;
76431: LD_ADDR_VAR 0 1
76435: PUSH
76436: LD_VAR 0 2
76440: PUSH
76441: LD_INT 1
76443: PPUSH
76444: LD_VAR 0 2
76448: PPUSH
76449: CALL_OW 12
76453: ARRAY
76454: ST_TO_ADDR
// SetSide ( un , 0 ) ;
76455: LD_VAR 0 1
76459: PPUSH
76460: LD_INT 0
76462: PPUSH
76463: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
76467: LD_VAR 0 1
76471: PPUSH
76472: LD_OWVAR 3
76476: PUSH
76477: LD_VAR 0 1
76481: DIFF
76482: PPUSH
76483: LD_VAR 0 1
76487: PPUSH
76488: CALL_OW 74
76492: PPUSH
76493: CALL_OW 115
// wait ( 0 0$20 ) ;
76497: LD_INT 700
76499: PPUSH
76500: CALL_OW 67
// SetSide ( un , your_side ) ;
76504: LD_VAR 0 1
76508: PPUSH
76509: LD_OWVAR 2
76513: PPUSH
76514: CALL_OW 235
// end ;
76518: PPOPN 2
76520: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
76521: LD_EXP 47
76525: IFFALSE 76533
76527: PUSH
76528: LD_EXP 80
76532: AND
76533: IFFALSE 76639
76535: GO 76537
76537: DISABLE
76538: LD_INT 0
76540: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
76541: LD_ADDR_VAR 0 1
76545: PUSH
76546: LD_INT 22
76548: PUSH
76549: LD_OWVAR 2
76553: PUSH
76554: EMPTY
76555: LIST
76556: LIST
76557: PUSH
76558: LD_INT 2
76560: PUSH
76561: LD_INT 30
76563: PUSH
76564: LD_INT 0
76566: PUSH
76567: EMPTY
76568: LIST
76569: LIST
76570: PUSH
76571: LD_INT 30
76573: PUSH
76574: LD_INT 1
76576: PUSH
76577: EMPTY
76578: LIST
76579: LIST
76580: PUSH
76581: EMPTY
76582: LIST
76583: LIST
76584: LIST
76585: PUSH
76586: EMPTY
76587: LIST
76588: LIST
76589: PPUSH
76590: CALL_OW 69
76594: ST_TO_ADDR
// if not depot then
76595: LD_VAR 0 1
76599: NOT
76600: IFFALSE 76604
// exit ;
76602: GO 76639
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
76604: LD_VAR 0 1
76608: PUSH
76609: LD_INT 1
76611: ARRAY
76612: PPUSH
76613: CALL_OW 250
76617: PPUSH
76618: LD_VAR 0 1
76622: PUSH
76623: LD_INT 1
76625: ARRAY
76626: PPUSH
76627: CALL_OW 251
76631: PPUSH
76632: LD_INT 70
76634: PPUSH
76635: CALL_OW 495
// end ;
76639: PPOPN 1
76641: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
76642: LD_EXP 47
76646: IFFALSE 76654
76648: PUSH
76649: LD_EXP 81
76653: AND
76654: IFFALSE 76865
76656: GO 76658
76658: DISABLE
76659: LD_INT 0
76661: PPUSH
76662: PPUSH
76663: PPUSH
76664: PPUSH
76665: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
76666: LD_ADDR_VAR 0 5
76670: PUSH
76671: LD_INT 22
76673: PUSH
76674: LD_OWVAR 2
76678: PUSH
76679: EMPTY
76680: LIST
76681: LIST
76682: PUSH
76683: LD_INT 21
76685: PUSH
76686: LD_INT 1
76688: PUSH
76689: EMPTY
76690: LIST
76691: LIST
76692: PUSH
76693: EMPTY
76694: LIST
76695: LIST
76696: PPUSH
76697: CALL_OW 69
76701: ST_TO_ADDR
// if not tmp then
76702: LD_VAR 0 5
76706: NOT
76707: IFFALSE 76711
// exit ;
76709: GO 76865
// for i in tmp do
76711: LD_ADDR_VAR 0 1
76715: PUSH
76716: LD_VAR 0 5
76720: PUSH
76721: FOR_IN
76722: IFFALSE 76863
// begin d := rand ( 0 , 5 ) ;
76724: LD_ADDR_VAR 0 4
76728: PUSH
76729: LD_INT 0
76731: PPUSH
76732: LD_INT 5
76734: PPUSH
76735: CALL_OW 12
76739: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
76740: LD_ADDR_VAR 0 2
76744: PUSH
76745: LD_VAR 0 1
76749: PPUSH
76750: CALL_OW 250
76754: PPUSH
76755: LD_VAR 0 4
76759: PPUSH
76760: LD_INT 3
76762: PPUSH
76763: LD_INT 12
76765: PPUSH
76766: CALL_OW 12
76770: PPUSH
76771: CALL_OW 272
76775: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
76776: LD_ADDR_VAR 0 3
76780: PUSH
76781: LD_VAR 0 1
76785: PPUSH
76786: CALL_OW 251
76790: PPUSH
76791: LD_VAR 0 4
76795: PPUSH
76796: LD_INT 3
76798: PPUSH
76799: LD_INT 12
76801: PPUSH
76802: CALL_OW 12
76806: PPUSH
76807: CALL_OW 273
76811: ST_TO_ADDR
// if ValidHex ( x , y ) then
76812: LD_VAR 0 2
76816: PPUSH
76817: LD_VAR 0 3
76821: PPUSH
76822: CALL_OW 488
76826: IFFALSE 76861
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
76828: LD_VAR 0 1
76832: PPUSH
76833: LD_VAR 0 2
76837: PPUSH
76838: LD_VAR 0 3
76842: PPUSH
76843: LD_INT 3
76845: PPUSH
76846: LD_INT 6
76848: PPUSH
76849: CALL_OW 12
76853: PPUSH
76854: LD_INT 1
76856: PPUSH
76857: CALL_OW 483
// end ;
76861: GO 76721
76863: POP
76864: POP
// end ;
76865: PPOPN 5
76867: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
76868: LD_EXP 47
76872: IFFALSE 76880
76874: PUSH
76875: LD_EXP 82
76879: AND
76880: IFFALSE 76974
76882: GO 76884
76884: DISABLE
76885: LD_INT 0
76887: PPUSH
76888: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
76889: LD_ADDR_VAR 0 2
76893: PUSH
76894: LD_INT 22
76896: PUSH
76897: LD_OWVAR 2
76901: PUSH
76902: EMPTY
76903: LIST
76904: LIST
76905: PUSH
76906: LD_INT 32
76908: PUSH
76909: LD_INT 1
76911: PUSH
76912: EMPTY
76913: LIST
76914: LIST
76915: PUSH
76916: LD_INT 21
76918: PUSH
76919: LD_INT 2
76921: PUSH
76922: EMPTY
76923: LIST
76924: LIST
76925: PUSH
76926: EMPTY
76927: LIST
76928: LIST
76929: LIST
76930: PPUSH
76931: CALL_OW 69
76935: ST_TO_ADDR
// if not tmp then
76936: LD_VAR 0 2
76940: NOT
76941: IFFALSE 76945
// exit ;
76943: GO 76974
// for i in tmp do
76945: LD_ADDR_VAR 0 1
76949: PUSH
76950: LD_VAR 0 2
76954: PUSH
76955: FOR_IN
76956: IFFALSE 76972
// SetFuel ( i , 0 ) ;
76958: LD_VAR 0 1
76962: PPUSH
76963: LD_INT 0
76965: PPUSH
76966: CALL_OW 240
76970: GO 76955
76972: POP
76973: POP
// end ;
76974: PPOPN 2
76976: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
76977: LD_EXP 47
76981: IFFALSE 76989
76983: PUSH
76984: LD_EXP 83
76988: AND
76989: IFFALSE 77055
76991: GO 76993
76993: DISABLE
76994: LD_INT 0
76996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
76997: LD_ADDR_VAR 0 1
77001: PUSH
77002: LD_INT 22
77004: PUSH
77005: LD_OWVAR 2
77009: PUSH
77010: EMPTY
77011: LIST
77012: LIST
77013: PUSH
77014: LD_INT 30
77016: PUSH
77017: LD_INT 29
77019: PUSH
77020: EMPTY
77021: LIST
77022: LIST
77023: PUSH
77024: EMPTY
77025: LIST
77026: LIST
77027: PPUSH
77028: CALL_OW 69
77032: ST_TO_ADDR
// if not tmp then
77033: LD_VAR 0 1
77037: NOT
77038: IFFALSE 77042
// exit ;
77040: GO 77055
// DestroyUnit ( tmp [ 1 ] ) ;
77042: LD_VAR 0 1
77046: PUSH
77047: LD_INT 1
77049: ARRAY
77050: PPUSH
77051: CALL_OW 65
// end ;
77055: PPOPN 1
77057: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
77058: LD_EXP 47
77062: IFFALSE 77070
77064: PUSH
77065: LD_EXP 85
77069: AND
77070: IFFALSE 77199
77072: GO 77074
77074: DISABLE
77075: LD_INT 0
77077: PPUSH
// begin uc_side := 0 ;
77078: LD_ADDR_OWVAR 20
77082: PUSH
77083: LD_INT 0
77085: ST_TO_ADDR
// uc_nation := nation_arabian ;
77086: LD_ADDR_OWVAR 21
77090: PUSH
77091: LD_INT 2
77093: ST_TO_ADDR
// hc_gallery :=  ;
77094: LD_ADDR_OWVAR 33
77098: PUSH
77099: LD_STRING 
77101: ST_TO_ADDR
// hc_name :=  ;
77102: LD_ADDR_OWVAR 26
77106: PUSH
77107: LD_STRING 
77109: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
77110: LD_INT 1
77112: PPUSH
77113: LD_INT 11
77115: PPUSH
77116: LD_INT 10
77118: PPUSH
77119: CALL_OW 380
// un := CreateHuman ;
77123: LD_ADDR_VAR 0 1
77127: PUSH
77128: CALL_OW 44
77132: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
77133: LD_VAR 0 1
77137: PPUSH
77138: LD_INT 1
77140: PPUSH
77141: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
77145: LD_INT 35
77147: PPUSH
77148: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
77152: LD_VAR 0 1
77156: PPUSH
77157: LD_INT 22
77159: PUSH
77160: LD_OWVAR 2
77164: PUSH
77165: EMPTY
77166: LIST
77167: LIST
77168: PPUSH
77169: CALL_OW 69
77173: PPUSH
77174: LD_VAR 0 1
77178: PPUSH
77179: CALL_OW 74
77183: PPUSH
77184: CALL_OW 115
// until IsDead ( un ) ;
77188: LD_VAR 0 1
77192: PPUSH
77193: CALL_OW 301
77197: IFFALSE 77145
// end ;
77199: PPOPN 1
77201: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
77202: LD_EXP 47
77206: IFFALSE 77214
77208: PUSH
77209: LD_EXP 87
77213: AND
77214: IFFALSE 77226
77216: GO 77218
77218: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
77219: LD_STRING earthquake(getX(game), 0, 32)
77221: PPUSH
77222: CALL_OW 559
77226: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
77227: LD_EXP 47
77231: IFFALSE 77239
77233: PUSH
77234: LD_EXP 88
77238: AND
77239: IFFALSE 77330
77241: GO 77243
77243: DISABLE
77244: LD_INT 0
77246: PPUSH
// begin enable ;
77247: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
77248: LD_ADDR_VAR 0 1
77252: PUSH
77253: LD_INT 22
77255: PUSH
77256: LD_OWVAR 2
77260: PUSH
77261: EMPTY
77262: LIST
77263: LIST
77264: PUSH
77265: LD_INT 21
77267: PUSH
77268: LD_INT 2
77270: PUSH
77271: EMPTY
77272: LIST
77273: LIST
77274: PUSH
77275: LD_INT 33
77277: PUSH
77278: LD_INT 3
77280: PUSH
77281: EMPTY
77282: LIST
77283: LIST
77284: PUSH
77285: EMPTY
77286: LIST
77287: LIST
77288: LIST
77289: PPUSH
77290: CALL_OW 69
77294: ST_TO_ADDR
// if not tmp then
77295: LD_VAR 0 1
77299: NOT
77300: IFFALSE 77304
// exit ;
77302: GO 77330
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
77304: LD_VAR 0 1
77308: PUSH
77309: LD_INT 1
77311: PPUSH
77312: LD_VAR 0 1
77316: PPUSH
77317: CALL_OW 12
77321: ARRAY
77322: PPUSH
77323: LD_INT 1
77325: PPUSH
77326: CALL_OW 234
// end ;
77330: PPOPN 1
77332: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
77333: LD_EXP 47
77337: IFFALSE 77345
77339: PUSH
77340: LD_EXP 89
77344: AND
77345: IFFALSE 77486
77347: GO 77349
77349: DISABLE
77350: LD_INT 0
77352: PPUSH
77353: PPUSH
77354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77355: LD_ADDR_VAR 0 3
77359: PUSH
77360: LD_INT 22
77362: PUSH
77363: LD_OWVAR 2
77367: PUSH
77368: EMPTY
77369: LIST
77370: LIST
77371: PUSH
77372: LD_INT 25
77374: PUSH
77375: LD_INT 1
77377: PUSH
77378: EMPTY
77379: LIST
77380: LIST
77381: PUSH
77382: EMPTY
77383: LIST
77384: LIST
77385: PPUSH
77386: CALL_OW 69
77390: ST_TO_ADDR
// if not tmp then
77391: LD_VAR 0 3
77395: NOT
77396: IFFALSE 77400
// exit ;
77398: GO 77486
// un := tmp [ rand ( 1 , tmp ) ] ;
77400: LD_ADDR_VAR 0 2
77404: PUSH
77405: LD_VAR 0 3
77409: PUSH
77410: LD_INT 1
77412: PPUSH
77413: LD_VAR 0 3
77417: PPUSH
77418: CALL_OW 12
77422: ARRAY
77423: ST_TO_ADDR
// if Crawls ( un ) then
77424: LD_VAR 0 2
77428: PPUSH
77429: CALL_OW 318
77433: IFFALSE 77444
// ComWalk ( un ) ;
77435: LD_VAR 0 2
77439: PPUSH
77440: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
77444: LD_VAR 0 2
77448: PPUSH
77449: LD_INT 9
77451: PPUSH
77452: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
77456: LD_INT 28
77458: PPUSH
77459: LD_OWVAR 2
77463: PPUSH
77464: LD_INT 2
77466: PPUSH
77467: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
77471: LD_INT 29
77473: PPUSH
77474: LD_OWVAR 2
77478: PPUSH
77479: LD_INT 2
77481: PPUSH
77482: CALL_OW 322
// end ;
77486: PPOPN 3
77488: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
77489: LD_EXP 47
77493: IFFALSE 77501
77495: PUSH
77496: LD_EXP 90
77500: AND
77501: IFFALSE 77612
77503: GO 77505
77505: DISABLE
77506: LD_INT 0
77508: PPUSH
77509: PPUSH
77510: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77511: LD_ADDR_VAR 0 3
77515: PUSH
77516: LD_INT 22
77518: PUSH
77519: LD_OWVAR 2
77523: PUSH
77524: EMPTY
77525: LIST
77526: LIST
77527: PUSH
77528: LD_INT 25
77530: PUSH
77531: LD_INT 1
77533: PUSH
77534: EMPTY
77535: LIST
77536: LIST
77537: PUSH
77538: EMPTY
77539: LIST
77540: LIST
77541: PPUSH
77542: CALL_OW 69
77546: ST_TO_ADDR
// if not tmp then
77547: LD_VAR 0 3
77551: NOT
77552: IFFALSE 77556
// exit ;
77554: GO 77612
// un := tmp [ rand ( 1 , tmp ) ] ;
77556: LD_ADDR_VAR 0 2
77560: PUSH
77561: LD_VAR 0 3
77565: PUSH
77566: LD_INT 1
77568: PPUSH
77569: LD_VAR 0 3
77573: PPUSH
77574: CALL_OW 12
77578: ARRAY
77579: ST_TO_ADDR
// if Crawls ( un ) then
77580: LD_VAR 0 2
77584: PPUSH
77585: CALL_OW 318
77589: IFFALSE 77600
// ComWalk ( un ) ;
77591: LD_VAR 0 2
77595: PPUSH
77596: CALL_OW 138
// SetClass ( un , class_mortar ) ;
77600: LD_VAR 0 2
77604: PPUSH
77605: LD_INT 8
77607: PPUSH
77608: CALL_OW 336
// end ;
77612: PPOPN 3
77614: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
77615: LD_EXP 47
77619: IFFALSE 77627
77621: PUSH
77622: LD_EXP 91
77626: AND
77627: IFFALSE 77771
77629: GO 77631
77631: DISABLE
77632: LD_INT 0
77634: PPUSH
77635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
77636: LD_ADDR_VAR 0 2
77640: PUSH
77641: LD_INT 22
77643: PUSH
77644: LD_OWVAR 2
77648: PUSH
77649: EMPTY
77650: LIST
77651: LIST
77652: PUSH
77653: LD_INT 21
77655: PUSH
77656: LD_INT 2
77658: PUSH
77659: EMPTY
77660: LIST
77661: LIST
77662: PUSH
77663: LD_INT 2
77665: PUSH
77666: LD_INT 34
77668: PUSH
77669: LD_INT 12
77671: PUSH
77672: EMPTY
77673: LIST
77674: LIST
77675: PUSH
77676: LD_INT 34
77678: PUSH
77679: LD_INT 51
77681: PUSH
77682: EMPTY
77683: LIST
77684: LIST
77685: PUSH
77686: LD_INT 34
77688: PUSH
77689: LD_INT 32
77691: PUSH
77692: EMPTY
77693: LIST
77694: LIST
77695: PUSH
77696: EMPTY
77697: LIST
77698: LIST
77699: LIST
77700: LIST
77701: PUSH
77702: EMPTY
77703: LIST
77704: LIST
77705: LIST
77706: PPUSH
77707: CALL_OW 69
77711: ST_TO_ADDR
// if not tmp then
77712: LD_VAR 0 2
77716: NOT
77717: IFFALSE 77721
// exit ;
77719: GO 77771
// for i in tmp do
77721: LD_ADDR_VAR 0 1
77725: PUSH
77726: LD_VAR 0 2
77730: PUSH
77731: FOR_IN
77732: IFFALSE 77769
// if GetCargo ( i , mat_artifact ) = 0 then
77734: LD_VAR 0 1
77738: PPUSH
77739: LD_INT 4
77741: PPUSH
77742: CALL_OW 289
77746: PUSH
77747: LD_INT 0
77749: EQUAL
77750: IFFALSE 77767
// SetCargo ( i , mat_siberit , 100 ) ;
77752: LD_VAR 0 1
77756: PPUSH
77757: LD_INT 3
77759: PPUSH
77760: LD_INT 100
77762: PPUSH
77763: CALL_OW 290
77767: GO 77731
77769: POP
77770: POP
// end ;
77771: PPOPN 2
77773: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
77774: LD_EXP 47
77778: IFFALSE 77786
77780: PUSH
77781: LD_EXP 92
77785: AND
77786: IFFALSE 77969
77788: GO 77790
77790: DISABLE
77791: LD_INT 0
77793: PPUSH
77794: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
77795: LD_ADDR_VAR 0 2
77799: PUSH
77800: LD_INT 22
77802: PUSH
77803: LD_OWVAR 2
77807: PUSH
77808: EMPTY
77809: LIST
77810: LIST
77811: PPUSH
77812: CALL_OW 69
77816: ST_TO_ADDR
// if not tmp then
77817: LD_VAR 0 2
77821: NOT
77822: IFFALSE 77826
// exit ;
77824: GO 77969
// for i := 1 to 2 do
77826: LD_ADDR_VAR 0 1
77830: PUSH
77831: DOUBLE
77832: LD_INT 1
77834: DEC
77835: ST_TO_ADDR
77836: LD_INT 2
77838: PUSH
77839: FOR_TO
77840: IFFALSE 77967
// begin uc_side := your_side ;
77842: LD_ADDR_OWVAR 20
77846: PUSH
77847: LD_OWVAR 2
77851: ST_TO_ADDR
// uc_nation := nation_american ;
77852: LD_ADDR_OWVAR 21
77856: PUSH
77857: LD_INT 1
77859: ST_TO_ADDR
// vc_chassis := us_morphling ;
77860: LD_ADDR_OWVAR 37
77864: PUSH
77865: LD_INT 5
77867: ST_TO_ADDR
// vc_engine := engine_siberite ;
77868: LD_ADDR_OWVAR 39
77872: PUSH
77873: LD_INT 3
77875: ST_TO_ADDR
// vc_control := control_computer ;
77876: LD_ADDR_OWVAR 38
77880: PUSH
77881: LD_INT 3
77883: ST_TO_ADDR
// vc_weapon := us_double_laser ;
77884: LD_ADDR_OWVAR 40
77888: PUSH
77889: LD_INT 10
77891: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
77892: LD_VAR 0 2
77896: PUSH
77897: LD_INT 1
77899: ARRAY
77900: PPUSH
77901: CALL_OW 310
77905: NOT
77906: IFFALSE 77953
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
77908: CALL_OW 45
77912: PPUSH
77913: LD_VAR 0 2
77917: PUSH
77918: LD_INT 1
77920: ARRAY
77921: PPUSH
77922: CALL_OW 250
77926: PPUSH
77927: LD_VAR 0 2
77931: PUSH
77932: LD_INT 1
77934: ARRAY
77935: PPUSH
77936: CALL_OW 251
77940: PPUSH
77941: LD_INT 12
77943: PPUSH
77944: LD_INT 1
77946: PPUSH
77947: CALL_OW 50
77951: GO 77965
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
77953: CALL_OW 45
77957: PPUSH
77958: LD_INT 1
77960: PPUSH
77961: CALL_OW 51
// end ;
77965: GO 77839
77967: POP
77968: POP
// end ;
77969: PPOPN 2
77971: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
77972: LD_EXP 47
77976: IFFALSE 77984
77978: PUSH
77979: LD_EXP 93
77983: AND
77984: IFFALSE 78206
77986: GO 77988
77988: DISABLE
77989: LD_INT 0
77991: PPUSH
77992: PPUSH
77993: PPUSH
77994: PPUSH
77995: PPUSH
77996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
77997: LD_ADDR_VAR 0 6
78001: PUSH
78002: LD_INT 22
78004: PUSH
78005: LD_OWVAR 2
78009: PUSH
78010: EMPTY
78011: LIST
78012: LIST
78013: PUSH
78014: LD_INT 21
78016: PUSH
78017: LD_INT 1
78019: PUSH
78020: EMPTY
78021: LIST
78022: LIST
78023: PUSH
78024: LD_INT 3
78026: PUSH
78027: LD_INT 23
78029: PUSH
78030: LD_INT 0
78032: PUSH
78033: EMPTY
78034: LIST
78035: LIST
78036: PUSH
78037: EMPTY
78038: LIST
78039: LIST
78040: PUSH
78041: EMPTY
78042: LIST
78043: LIST
78044: LIST
78045: PPUSH
78046: CALL_OW 69
78050: ST_TO_ADDR
// if not tmp then
78051: LD_VAR 0 6
78055: NOT
78056: IFFALSE 78060
// exit ;
78058: GO 78206
// s1 := rand ( 1 , 4 ) ;
78060: LD_ADDR_VAR 0 2
78064: PUSH
78065: LD_INT 1
78067: PPUSH
78068: LD_INT 4
78070: PPUSH
78071: CALL_OW 12
78075: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
78076: LD_ADDR_VAR 0 4
78080: PUSH
78081: LD_VAR 0 6
78085: PUSH
78086: LD_INT 1
78088: ARRAY
78089: PPUSH
78090: LD_VAR 0 2
78094: PPUSH
78095: CALL_OW 259
78099: ST_TO_ADDR
// if s1 = 1 then
78100: LD_VAR 0 2
78104: PUSH
78105: LD_INT 1
78107: EQUAL
78108: IFFALSE 78128
// s2 := rand ( 2 , 4 ) else
78110: LD_ADDR_VAR 0 3
78114: PUSH
78115: LD_INT 2
78117: PPUSH
78118: LD_INT 4
78120: PPUSH
78121: CALL_OW 12
78125: ST_TO_ADDR
78126: GO 78136
// s2 := 1 ;
78128: LD_ADDR_VAR 0 3
78132: PUSH
78133: LD_INT 1
78135: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
78136: LD_ADDR_VAR 0 5
78140: PUSH
78141: LD_VAR 0 6
78145: PUSH
78146: LD_INT 1
78148: ARRAY
78149: PPUSH
78150: LD_VAR 0 3
78154: PPUSH
78155: CALL_OW 259
78159: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
78160: LD_VAR 0 6
78164: PUSH
78165: LD_INT 1
78167: ARRAY
78168: PPUSH
78169: LD_VAR 0 2
78173: PPUSH
78174: LD_VAR 0 5
78178: PPUSH
78179: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
78183: LD_VAR 0 6
78187: PUSH
78188: LD_INT 1
78190: ARRAY
78191: PPUSH
78192: LD_VAR 0 3
78196: PPUSH
78197: LD_VAR 0 4
78201: PPUSH
78202: CALL_OW 237
// end ;
78206: PPOPN 6
78208: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
78209: LD_EXP 47
78213: IFFALSE 78221
78215: PUSH
78216: LD_EXP 94
78220: AND
78221: IFFALSE 78300
78223: GO 78225
78225: DISABLE
78226: LD_INT 0
78228: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
78229: LD_ADDR_VAR 0 1
78233: PUSH
78234: LD_INT 22
78236: PUSH
78237: LD_OWVAR 2
78241: PUSH
78242: EMPTY
78243: LIST
78244: LIST
78245: PUSH
78246: LD_INT 30
78248: PUSH
78249: LD_INT 3
78251: PUSH
78252: EMPTY
78253: LIST
78254: LIST
78255: PUSH
78256: EMPTY
78257: LIST
78258: LIST
78259: PPUSH
78260: CALL_OW 69
78264: ST_TO_ADDR
// if not tmp then
78265: LD_VAR 0 1
78269: NOT
78270: IFFALSE 78274
// exit ;
78272: GO 78300
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
78274: LD_VAR 0 1
78278: PUSH
78279: LD_INT 1
78281: PPUSH
78282: LD_VAR 0 1
78286: PPUSH
78287: CALL_OW 12
78291: ARRAY
78292: PPUSH
78293: LD_INT 1
78295: PPUSH
78296: CALL_OW 234
// end ;
78300: PPOPN 1
78302: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
78303: LD_EXP 47
78307: IFFALSE 78315
78309: PUSH
78310: LD_EXP 95
78314: AND
78315: IFFALSE 78427
78317: GO 78319
78319: DISABLE
78320: LD_INT 0
78322: PPUSH
78323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
78324: LD_ADDR_VAR 0 2
78328: PUSH
78329: LD_INT 22
78331: PUSH
78332: LD_OWVAR 2
78336: PUSH
78337: EMPTY
78338: LIST
78339: LIST
78340: PUSH
78341: LD_INT 2
78343: PUSH
78344: LD_INT 30
78346: PUSH
78347: LD_INT 27
78349: PUSH
78350: EMPTY
78351: LIST
78352: LIST
78353: PUSH
78354: LD_INT 30
78356: PUSH
78357: LD_INT 26
78359: PUSH
78360: EMPTY
78361: LIST
78362: LIST
78363: PUSH
78364: LD_INT 30
78366: PUSH
78367: LD_INT 28
78369: PUSH
78370: EMPTY
78371: LIST
78372: LIST
78373: PUSH
78374: EMPTY
78375: LIST
78376: LIST
78377: LIST
78378: LIST
78379: PUSH
78380: EMPTY
78381: LIST
78382: LIST
78383: PPUSH
78384: CALL_OW 69
78388: ST_TO_ADDR
// if not tmp then
78389: LD_VAR 0 2
78393: NOT
78394: IFFALSE 78398
// exit ;
78396: GO 78427
// for i in tmp do
78398: LD_ADDR_VAR 0 1
78402: PUSH
78403: LD_VAR 0 2
78407: PUSH
78408: FOR_IN
78409: IFFALSE 78425
// SetLives ( i , 1 ) ;
78411: LD_VAR 0 1
78415: PPUSH
78416: LD_INT 1
78418: PPUSH
78419: CALL_OW 234
78423: GO 78408
78425: POP
78426: POP
// end ;
78427: PPOPN 2
78429: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
78430: LD_EXP 47
78434: IFFALSE 78442
78436: PUSH
78437: LD_EXP 96
78441: AND
78442: IFFALSE 78729
78444: GO 78446
78446: DISABLE
78447: LD_INT 0
78449: PPUSH
78450: PPUSH
78451: PPUSH
// begin i := rand ( 1 , 7 ) ;
78452: LD_ADDR_VAR 0 1
78456: PUSH
78457: LD_INT 1
78459: PPUSH
78460: LD_INT 7
78462: PPUSH
78463: CALL_OW 12
78467: ST_TO_ADDR
// case i of 1 :
78468: LD_VAR 0 1
78472: PUSH
78473: LD_INT 1
78475: DOUBLE
78476: EQUAL
78477: IFTRUE 78481
78479: GO 78491
78481: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
78482: LD_STRING earthquake(getX(game), 0, 32)
78484: PPUSH
78485: CALL_OW 559
78489: GO 78729
78491: LD_INT 2
78493: DOUBLE
78494: EQUAL
78495: IFTRUE 78499
78497: GO 78513
78499: POP
// begin ToLua ( displayStucuk(); ) ;
78500: LD_STRING displayStucuk();
78502: PPUSH
78503: CALL_OW 559
// ResetFog ;
78507: CALL_OW 335
// end ; 3 :
78511: GO 78729
78513: LD_INT 3
78515: DOUBLE
78516: EQUAL
78517: IFTRUE 78521
78519: GO 78625
78521: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78522: LD_ADDR_VAR 0 2
78526: PUSH
78527: LD_INT 22
78529: PUSH
78530: LD_OWVAR 2
78534: PUSH
78535: EMPTY
78536: LIST
78537: LIST
78538: PUSH
78539: LD_INT 25
78541: PUSH
78542: LD_INT 1
78544: PUSH
78545: EMPTY
78546: LIST
78547: LIST
78548: PUSH
78549: EMPTY
78550: LIST
78551: LIST
78552: PPUSH
78553: CALL_OW 69
78557: ST_TO_ADDR
// if not tmp then
78558: LD_VAR 0 2
78562: NOT
78563: IFFALSE 78567
// exit ;
78565: GO 78729
// un := tmp [ rand ( 1 , tmp ) ] ;
78567: LD_ADDR_VAR 0 3
78571: PUSH
78572: LD_VAR 0 2
78576: PUSH
78577: LD_INT 1
78579: PPUSH
78580: LD_VAR 0 2
78584: PPUSH
78585: CALL_OW 12
78589: ARRAY
78590: ST_TO_ADDR
// if Crawls ( un ) then
78591: LD_VAR 0 3
78595: PPUSH
78596: CALL_OW 318
78600: IFFALSE 78611
// ComWalk ( un ) ;
78602: LD_VAR 0 3
78606: PPUSH
78607: CALL_OW 138
// SetClass ( un , class_mortar ) ;
78611: LD_VAR 0 3
78615: PPUSH
78616: LD_INT 8
78618: PPUSH
78619: CALL_OW 336
// end ; 4 :
78623: GO 78729
78625: LD_INT 4
78627: DOUBLE
78628: EQUAL
78629: IFTRUE 78633
78631: GO 78707
78633: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
78634: LD_ADDR_VAR 0 2
78638: PUSH
78639: LD_INT 22
78641: PUSH
78642: LD_OWVAR 2
78646: PUSH
78647: EMPTY
78648: LIST
78649: LIST
78650: PUSH
78651: LD_INT 30
78653: PUSH
78654: LD_INT 29
78656: PUSH
78657: EMPTY
78658: LIST
78659: LIST
78660: PUSH
78661: EMPTY
78662: LIST
78663: LIST
78664: PPUSH
78665: CALL_OW 69
78669: ST_TO_ADDR
// if not tmp then
78670: LD_VAR 0 2
78674: NOT
78675: IFFALSE 78679
// exit ;
78677: GO 78729
// CenterNowOnUnits ( tmp [ 1 ] ) ;
78679: LD_VAR 0 2
78683: PUSH
78684: LD_INT 1
78686: ARRAY
78687: PPUSH
78688: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
78692: LD_VAR 0 2
78696: PUSH
78697: LD_INT 1
78699: ARRAY
78700: PPUSH
78701: CALL_OW 65
// end ; 5 .. 7 :
78705: GO 78729
78707: LD_INT 5
78709: DOUBLE
78710: GREATEREQUAL
78711: IFFALSE 78719
78713: LD_INT 7
78715: DOUBLE
78716: LESSEQUAL
78717: IFTRUE 78721
78719: GO 78728
78721: POP
// StreamSibBomb ; end ;
78722: CALL 74910 0 0
78726: GO 78729
78728: POP
// end ;
78729: PPOPN 3
78731: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
78732: LD_EXP 47
78736: IFFALSE 78744
78738: PUSH
78739: LD_EXP 97
78743: AND
78744: IFFALSE 78900
78746: GO 78748
78748: DISABLE
78749: LD_INT 0
78751: PPUSH
78752: PPUSH
78753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
78754: LD_ADDR_VAR 0 2
78758: PUSH
78759: LD_INT 81
78761: PUSH
78762: LD_OWVAR 2
78766: PUSH
78767: EMPTY
78768: LIST
78769: LIST
78770: PUSH
78771: LD_INT 2
78773: PUSH
78774: LD_INT 21
78776: PUSH
78777: LD_INT 1
78779: PUSH
78780: EMPTY
78781: LIST
78782: LIST
78783: PUSH
78784: LD_INT 21
78786: PUSH
78787: LD_INT 2
78789: PUSH
78790: EMPTY
78791: LIST
78792: LIST
78793: PUSH
78794: EMPTY
78795: LIST
78796: LIST
78797: LIST
78798: PUSH
78799: EMPTY
78800: LIST
78801: LIST
78802: PPUSH
78803: CALL_OW 69
78807: ST_TO_ADDR
// if not tmp then
78808: LD_VAR 0 2
78812: NOT
78813: IFFALSE 78817
// exit ;
78815: GO 78900
// p := 0 ;
78817: LD_ADDR_VAR 0 3
78821: PUSH
78822: LD_INT 0
78824: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
78825: LD_INT 35
78827: PPUSH
78828: CALL_OW 67
// p := p + 1 ;
78832: LD_ADDR_VAR 0 3
78836: PUSH
78837: LD_VAR 0 3
78841: PUSH
78842: LD_INT 1
78844: PLUS
78845: ST_TO_ADDR
// for i in tmp do
78846: LD_ADDR_VAR 0 1
78850: PUSH
78851: LD_VAR 0 2
78855: PUSH
78856: FOR_IN
78857: IFFALSE 78888
// if GetLives ( i ) < 1000 then
78859: LD_VAR 0 1
78863: PPUSH
78864: CALL_OW 256
78868: PUSH
78869: LD_INT 1000
78871: LESS
78872: IFFALSE 78886
// SetLives ( i , 1000 ) ;
78874: LD_VAR 0 1
78878: PPUSH
78879: LD_INT 1000
78881: PPUSH
78882: CALL_OW 234
78886: GO 78856
78888: POP
78889: POP
// until p > 20 ;
78890: LD_VAR 0 3
78894: PUSH
78895: LD_INT 20
78897: GREATER
78898: IFFALSE 78825
// end ;
78900: PPOPN 3
78902: END
// every 0 0$1 trigger StreamModeActive and sTime do
78903: LD_EXP 47
78907: IFFALSE 78915
78909: PUSH
78910: LD_EXP 98
78914: AND
78915: IFFALSE 78950
78917: GO 78919
78919: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
78920: LD_INT 28
78922: PPUSH
78923: LD_OWVAR 2
78927: PPUSH
78928: LD_INT 2
78930: PPUSH
78931: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
78935: LD_INT 30
78937: PPUSH
78938: LD_OWVAR 2
78942: PPUSH
78943: LD_INT 2
78945: PPUSH
78946: CALL_OW 322
// end ;
78950: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
78951: LD_EXP 47
78955: IFFALSE 78963
78957: PUSH
78958: LD_EXP 99
78962: AND
78963: IFFALSE 79084
78965: GO 78967
78967: DISABLE
78968: LD_INT 0
78970: PPUSH
78971: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
78972: LD_ADDR_VAR 0 2
78976: PUSH
78977: LD_INT 22
78979: PUSH
78980: LD_OWVAR 2
78984: PUSH
78985: EMPTY
78986: LIST
78987: LIST
78988: PUSH
78989: LD_INT 21
78991: PUSH
78992: LD_INT 1
78994: PUSH
78995: EMPTY
78996: LIST
78997: LIST
78998: PUSH
78999: LD_INT 3
79001: PUSH
79002: LD_INT 23
79004: PUSH
79005: LD_INT 0
79007: PUSH
79008: EMPTY
79009: LIST
79010: LIST
79011: PUSH
79012: EMPTY
79013: LIST
79014: LIST
79015: PUSH
79016: EMPTY
79017: LIST
79018: LIST
79019: LIST
79020: PPUSH
79021: CALL_OW 69
79025: ST_TO_ADDR
// if not tmp then
79026: LD_VAR 0 2
79030: NOT
79031: IFFALSE 79035
// exit ;
79033: GO 79084
// for i in tmp do
79035: LD_ADDR_VAR 0 1
79039: PUSH
79040: LD_VAR 0 2
79044: PUSH
79045: FOR_IN
79046: IFFALSE 79082
// begin if Crawls ( i ) then
79048: LD_VAR 0 1
79052: PPUSH
79053: CALL_OW 318
79057: IFFALSE 79068
// ComWalk ( i ) ;
79059: LD_VAR 0 1
79063: PPUSH
79064: CALL_OW 138
// SetClass ( i , 2 ) ;
79068: LD_VAR 0 1
79072: PPUSH
79073: LD_INT 2
79075: PPUSH
79076: CALL_OW 336
// end ;
79080: GO 79045
79082: POP
79083: POP
// end ;
79084: PPOPN 2
79086: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
79087: LD_EXP 47
79091: IFFALSE 79099
79093: PUSH
79094: LD_EXP 100
79098: AND
79099: IFFALSE 79389
79101: GO 79103
79103: DISABLE
79104: LD_INT 0
79106: PPUSH
79107: PPUSH
79108: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
79109: LD_OWVAR 2
79113: PPUSH
79114: LD_INT 9
79116: PPUSH
79117: LD_INT 1
79119: PPUSH
79120: LD_INT 1
79122: PPUSH
79123: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
79127: LD_INT 9
79129: PPUSH
79130: LD_OWVAR 2
79134: PPUSH
79135: CALL_OW 343
// uc_side := 9 ;
79139: LD_ADDR_OWVAR 20
79143: PUSH
79144: LD_INT 9
79146: ST_TO_ADDR
// uc_nation := 2 ;
79147: LD_ADDR_OWVAR 21
79151: PUSH
79152: LD_INT 2
79154: ST_TO_ADDR
// hc_name := Dark Warrior ;
79155: LD_ADDR_OWVAR 26
79159: PUSH
79160: LD_STRING Dark Warrior
79162: ST_TO_ADDR
// hc_gallery :=  ;
79163: LD_ADDR_OWVAR 33
79167: PUSH
79168: LD_STRING 
79170: ST_TO_ADDR
// hc_noskilllimit := true ;
79171: LD_ADDR_OWVAR 76
79175: PUSH
79176: LD_INT 1
79178: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
79179: LD_ADDR_OWVAR 31
79183: PUSH
79184: LD_INT 30
79186: PUSH
79187: LD_INT 30
79189: PUSH
79190: LD_INT 30
79192: PUSH
79193: LD_INT 30
79195: PUSH
79196: EMPTY
79197: LIST
79198: LIST
79199: LIST
79200: LIST
79201: ST_TO_ADDR
// un := CreateHuman ;
79202: LD_ADDR_VAR 0 3
79206: PUSH
79207: CALL_OW 44
79211: ST_TO_ADDR
// hc_noskilllimit := false ;
79212: LD_ADDR_OWVAR 76
79216: PUSH
79217: LD_INT 0
79219: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
79220: LD_VAR 0 3
79224: PPUSH
79225: LD_INT 1
79227: PPUSH
79228: CALL_OW 51
// ToLua ( playRanger() ) ;
79232: LD_STRING playRanger()
79234: PPUSH
79235: CALL_OW 559
// p := 0 ;
79239: LD_ADDR_VAR 0 2
79243: PUSH
79244: LD_INT 0
79246: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
79247: LD_INT 35
79249: PPUSH
79250: CALL_OW 67
// p := p + 1 ;
79254: LD_ADDR_VAR 0 2
79258: PUSH
79259: LD_VAR 0 2
79263: PUSH
79264: LD_INT 1
79266: PLUS
79267: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
79268: LD_VAR 0 3
79272: PPUSH
79273: CALL_OW 256
79277: PUSH
79278: LD_INT 1000
79280: LESS
79281: IFFALSE 79295
// SetLives ( un , 1000 ) ;
79283: LD_VAR 0 3
79287: PPUSH
79288: LD_INT 1000
79290: PPUSH
79291: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
79295: LD_VAR 0 3
79299: PPUSH
79300: LD_INT 81
79302: PUSH
79303: LD_OWVAR 2
79307: PUSH
79308: EMPTY
79309: LIST
79310: LIST
79311: PUSH
79312: LD_INT 91
79314: PUSH
79315: LD_VAR 0 3
79319: PUSH
79320: LD_INT 30
79322: PUSH
79323: EMPTY
79324: LIST
79325: LIST
79326: LIST
79327: PUSH
79328: EMPTY
79329: LIST
79330: LIST
79331: PPUSH
79332: CALL_OW 69
79336: PPUSH
79337: LD_VAR 0 3
79341: PPUSH
79342: CALL_OW 74
79346: PPUSH
79347: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
79351: LD_VAR 0 2
79355: PUSH
79356: LD_INT 80
79358: GREATER
79359: IFTRUE 79372
79361: PUSH
79362: LD_VAR 0 3
79366: PPUSH
79367: CALL_OW 301
79371: OR
79372: IFFALSE 79247
// if un then
79374: LD_VAR 0 3
79378: IFFALSE 79389
// RemoveUnit ( un ) ;
79380: LD_VAR 0 3
79384: PPUSH
79385: CALL_OW 64
// end ;
79389: PPOPN 3
79391: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
79392: LD_EXP 101
79396: IFFALSE 79512
79398: GO 79400
79400: DISABLE
79401: LD_INT 0
79403: PPUSH
79404: PPUSH
79405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
79406: LD_ADDR_VAR 0 2
79410: PUSH
79411: LD_INT 81
79413: PUSH
79414: LD_OWVAR 2
79418: PUSH
79419: EMPTY
79420: LIST
79421: LIST
79422: PUSH
79423: LD_INT 21
79425: PUSH
79426: LD_INT 1
79428: PUSH
79429: EMPTY
79430: LIST
79431: LIST
79432: PUSH
79433: EMPTY
79434: LIST
79435: LIST
79436: PPUSH
79437: CALL_OW 69
79441: ST_TO_ADDR
// ToLua ( playComputer() ) ;
79442: LD_STRING playComputer()
79444: PPUSH
79445: CALL_OW 559
// if not tmp then
79449: LD_VAR 0 2
79453: NOT
79454: IFFALSE 79458
// exit ;
79456: GO 79512
// for i in tmp do
79458: LD_ADDR_VAR 0 1
79462: PUSH
79463: LD_VAR 0 2
79467: PUSH
79468: FOR_IN
79469: IFFALSE 79510
// for j := 1 to 4 do
79471: LD_ADDR_VAR 0 3
79475: PUSH
79476: DOUBLE
79477: LD_INT 1
79479: DEC
79480: ST_TO_ADDR
79481: LD_INT 4
79483: PUSH
79484: FOR_TO
79485: IFFALSE 79506
// SetSkill ( i , j , 10 ) ;
79487: LD_VAR 0 1
79491: PPUSH
79492: LD_VAR 0 3
79496: PPUSH
79497: LD_INT 10
79499: PPUSH
79500: CALL_OW 237
79504: GO 79484
79506: POP
79507: POP
79508: GO 79468
79510: POP
79511: POP
// end ;
79512: PPOPN 3
79514: END
// every 0 0$1 trigger s30 do var i , tmp ;
79515: LD_EXP 102
79519: IFFALSE 79588
79521: GO 79523
79523: DISABLE
79524: LD_INT 0
79526: PPUSH
79527: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
79528: LD_ADDR_VAR 0 2
79532: PUSH
79533: LD_INT 22
79535: PUSH
79536: LD_OWVAR 2
79540: PUSH
79541: EMPTY
79542: LIST
79543: LIST
79544: PPUSH
79545: CALL_OW 69
79549: ST_TO_ADDR
// if not tmp then
79550: LD_VAR 0 2
79554: NOT
79555: IFFALSE 79559
// exit ;
79557: GO 79588
// for i in tmp do
79559: LD_ADDR_VAR 0 1
79563: PUSH
79564: LD_VAR 0 2
79568: PUSH
79569: FOR_IN
79570: IFFALSE 79586
// SetLives ( i , 300 ) ;
79572: LD_VAR 0 1
79576: PPUSH
79577: LD_INT 300
79579: PPUSH
79580: CALL_OW 234
79584: GO 79569
79586: POP
79587: POP
// end ;
79588: PPOPN 2
79590: END
// every 0 0$1 trigger s60 do var i , tmp ;
79591: LD_EXP 103
79595: IFFALSE 79664
79597: GO 79599
79599: DISABLE
79600: LD_INT 0
79602: PPUSH
79603: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
79604: LD_ADDR_VAR 0 2
79608: PUSH
79609: LD_INT 22
79611: PUSH
79612: LD_OWVAR 2
79616: PUSH
79617: EMPTY
79618: LIST
79619: LIST
79620: PPUSH
79621: CALL_OW 69
79625: ST_TO_ADDR
// if not tmp then
79626: LD_VAR 0 2
79630: NOT
79631: IFFALSE 79635
// exit ;
79633: GO 79664
// for i in tmp do
79635: LD_ADDR_VAR 0 1
79639: PUSH
79640: LD_VAR 0 2
79644: PUSH
79645: FOR_IN
79646: IFFALSE 79662
// SetLives ( i , 600 ) ;
79648: LD_VAR 0 1
79652: PPUSH
79653: LD_INT 600
79655: PPUSH
79656: CALL_OW 234
79660: GO 79645
79662: POP
79663: POP
// end ;
79664: PPOPN 2
79666: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
79667: LD_INT 0
79669: PPUSH
// case cmd of 301 :
79670: LD_VAR 0 1
79674: PUSH
79675: LD_INT 301
79677: DOUBLE
79678: EQUAL
79679: IFTRUE 79683
79681: GO 79715
79683: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
79684: LD_VAR 0 6
79688: PPUSH
79689: LD_VAR 0 7
79693: PPUSH
79694: LD_VAR 0 8
79698: PPUSH
79699: LD_VAR 0 4
79703: PPUSH
79704: LD_VAR 0 5
79708: PPUSH
79709: CALL 80928 0 5
79713: GO 79836
79715: LD_INT 302
79717: DOUBLE
79718: EQUAL
79719: IFTRUE 79723
79721: GO 79760
79723: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
79724: LD_VAR 0 6
79728: PPUSH
79729: LD_VAR 0 7
79733: PPUSH
79734: LD_VAR 0 8
79738: PPUSH
79739: LD_VAR 0 9
79743: PPUSH
79744: LD_VAR 0 4
79748: PPUSH
79749: LD_VAR 0 5
79753: PPUSH
79754: CALL 81019 0 6
79758: GO 79836
79760: LD_INT 303
79762: DOUBLE
79763: EQUAL
79764: IFTRUE 79768
79766: GO 79805
79768: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
79769: LD_VAR 0 6
79773: PPUSH
79774: LD_VAR 0 7
79778: PPUSH
79779: LD_VAR 0 8
79783: PPUSH
79784: LD_VAR 0 9
79788: PPUSH
79789: LD_VAR 0 4
79793: PPUSH
79794: LD_VAR 0 5
79798: PPUSH
79799: CALL 79841 0 6
79803: GO 79836
79805: LD_INT 304
79807: DOUBLE
79808: EQUAL
79809: IFTRUE 79813
79811: GO 79835
79813: POP
// hHackTeleport ( unit , x , y ) ; end ;
79814: LD_VAR 0 2
79818: PPUSH
79819: LD_VAR 0 4
79823: PPUSH
79824: LD_VAR 0 5
79828: PPUSH
79829: CALL 81612 0 3
79833: GO 79836
79835: POP
// end ;
79836: LD_VAR 0 12
79840: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
79841: LD_INT 0
79843: PPUSH
79844: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
79845: LD_VAR 0 1
79849: PUSH
79850: LD_INT 1
79852: LESS
79853: IFTRUE 79865
79855: PUSH
79856: LD_VAR 0 1
79860: PUSH
79861: LD_INT 3
79863: GREATER
79864: OR
79865: IFTRUE 79883
79867: PUSH
79868: LD_VAR 0 5
79872: PPUSH
79873: LD_VAR 0 6
79877: PPUSH
79878: CALL_OW 428
79882: OR
79883: IFFALSE 79887
// exit ;
79885: GO 80615
// uc_side := your_side ;
79887: LD_ADDR_OWVAR 20
79891: PUSH
79892: LD_OWVAR 2
79896: ST_TO_ADDR
// uc_nation := nation ;
79897: LD_ADDR_OWVAR 21
79901: PUSH
79902: LD_VAR 0 1
79906: ST_TO_ADDR
// bc_level = 1 ;
79907: LD_ADDR_OWVAR 43
79911: PUSH
79912: LD_INT 1
79914: ST_TO_ADDR
// case btype of 1 :
79915: LD_VAR 0 2
79919: PUSH
79920: LD_INT 1
79922: DOUBLE
79923: EQUAL
79924: IFTRUE 79928
79926: GO 79939
79928: POP
// bc_type := b_depot ; 2 :
79929: LD_ADDR_OWVAR 42
79933: PUSH
79934: LD_INT 0
79936: ST_TO_ADDR
79937: GO 80559
79939: LD_INT 2
79941: DOUBLE
79942: EQUAL
79943: IFTRUE 79947
79945: GO 79958
79947: POP
// bc_type := b_warehouse ; 3 :
79948: LD_ADDR_OWVAR 42
79952: PUSH
79953: LD_INT 1
79955: ST_TO_ADDR
79956: GO 80559
79958: LD_INT 3
79960: DOUBLE
79961: EQUAL
79962: IFTRUE 79966
79964: GO 79977
79966: POP
// bc_type := b_lab ; 4 .. 9 :
79967: LD_ADDR_OWVAR 42
79971: PUSH
79972: LD_INT 6
79974: ST_TO_ADDR
79975: GO 80559
79977: LD_INT 4
79979: DOUBLE
79980: GREATEREQUAL
79981: IFFALSE 79989
79983: LD_INT 9
79985: DOUBLE
79986: LESSEQUAL
79987: IFTRUE 79991
79989: GO 80051
79991: POP
// begin bc_type := b_lab_half ;
79992: LD_ADDR_OWVAR 42
79996: PUSH
79997: LD_INT 7
79999: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
80000: LD_ADDR_OWVAR 44
80004: PUSH
80005: LD_INT 10
80007: PUSH
80008: LD_INT 11
80010: PUSH
80011: LD_INT 12
80013: PUSH
80014: LD_INT 15
80016: PUSH
80017: LD_INT 14
80019: PUSH
80020: LD_INT 13
80022: PUSH
80023: EMPTY
80024: LIST
80025: LIST
80026: LIST
80027: LIST
80028: LIST
80029: LIST
80030: PUSH
80031: LD_VAR 0 2
80035: PUSH
80036: LD_INT 3
80038: MINUS
80039: ARRAY
80040: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
80041: LD_ADDR_OWVAR 45
80045: PUSH
80046: LD_INT 9
80048: ST_TO_ADDR
// end ; 10 .. 13 :
80049: GO 80559
80051: LD_INT 10
80053: DOUBLE
80054: GREATEREQUAL
80055: IFFALSE 80063
80057: LD_INT 13
80059: DOUBLE
80060: LESSEQUAL
80061: IFTRUE 80065
80063: GO 80142
80065: POP
// begin bc_type := b_lab_full ;
80066: LD_ADDR_OWVAR 42
80070: PUSH
80071: LD_INT 8
80073: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
80074: LD_ADDR_OWVAR 44
80078: PUSH
80079: LD_INT 10
80081: PUSH
80082: LD_INT 12
80084: PUSH
80085: LD_INT 14
80087: PUSH
80088: LD_INT 13
80090: PUSH
80091: EMPTY
80092: LIST
80093: LIST
80094: LIST
80095: LIST
80096: PUSH
80097: LD_VAR 0 2
80101: PUSH
80102: LD_INT 9
80104: MINUS
80105: ARRAY
80106: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
80107: LD_ADDR_OWVAR 45
80111: PUSH
80112: LD_INT 11
80114: PUSH
80115: LD_INT 15
80117: PUSH
80118: LD_INT 12
80120: PUSH
80121: LD_INT 15
80123: PUSH
80124: EMPTY
80125: LIST
80126: LIST
80127: LIST
80128: LIST
80129: PUSH
80130: LD_VAR 0 2
80134: PUSH
80135: LD_INT 9
80137: MINUS
80138: ARRAY
80139: ST_TO_ADDR
// end ; 14 :
80140: GO 80559
80142: LD_INT 14
80144: DOUBLE
80145: EQUAL
80146: IFTRUE 80150
80148: GO 80161
80150: POP
// bc_type := b_workshop ; 15 :
80151: LD_ADDR_OWVAR 42
80155: PUSH
80156: LD_INT 2
80158: ST_TO_ADDR
80159: GO 80559
80161: LD_INT 15
80163: DOUBLE
80164: EQUAL
80165: IFTRUE 80169
80167: GO 80180
80169: POP
// bc_type := b_factory ; 16 :
80170: LD_ADDR_OWVAR 42
80174: PUSH
80175: LD_INT 3
80177: ST_TO_ADDR
80178: GO 80559
80180: LD_INT 16
80182: DOUBLE
80183: EQUAL
80184: IFTRUE 80188
80186: GO 80199
80188: POP
// bc_type := b_ext_gun ; 17 :
80189: LD_ADDR_OWVAR 42
80193: PUSH
80194: LD_INT 17
80196: ST_TO_ADDR
80197: GO 80559
80199: LD_INT 17
80201: DOUBLE
80202: EQUAL
80203: IFTRUE 80207
80205: GO 80235
80207: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
80208: LD_ADDR_OWVAR 42
80212: PUSH
80213: LD_INT 19
80215: PUSH
80216: LD_INT 23
80218: PUSH
80219: LD_INT 19
80221: PUSH
80222: EMPTY
80223: LIST
80224: LIST
80225: LIST
80226: PUSH
80227: LD_VAR 0 1
80231: ARRAY
80232: ST_TO_ADDR
80233: GO 80559
80235: LD_INT 18
80237: DOUBLE
80238: EQUAL
80239: IFTRUE 80243
80241: GO 80254
80243: POP
// bc_type := b_ext_radar ; 19 :
80244: LD_ADDR_OWVAR 42
80248: PUSH
80249: LD_INT 20
80251: ST_TO_ADDR
80252: GO 80559
80254: LD_INT 19
80256: DOUBLE
80257: EQUAL
80258: IFTRUE 80262
80260: GO 80273
80262: POP
// bc_type := b_ext_radio ; 20 :
80263: LD_ADDR_OWVAR 42
80267: PUSH
80268: LD_INT 22
80270: ST_TO_ADDR
80271: GO 80559
80273: LD_INT 20
80275: DOUBLE
80276: EQUAL
80277: IFTRUE 80281
80279: GO 80292
80281: POP
// bc_type := b_ext_siberium ; 21 :
80282: LD_ADDR_OWVAR 42
80286: PUSH
80287: LD_INT 21
80289: ST_TO_ADDR
80290: GO 80559
80292: LD_INT 21
80294: DOUBLE
80295: EQUAL
80296: IFTRUE 80300
80298: GO 80311
80300: POP
// bc_type := b_ext_computer ; 22 :
80301: LD_ADDR_OWVAR 42
80305: PUSH
80306: LD_INT 24
80308: ST_TO_ADDR
80309: GO 80559
80311: LD_INT 22
80313: DOUBLE
80314: EQUAL
80315: IFTRUE 80319
80317: GO 80330
80319: POP
// bc_type := b_ext_track ; 23 :
80320: LD_ADDR_OWVAR 42
80324: PUSH
80325: LD_INT 16
80327: ST_TO_ADDR
80328: GO 80559
80330: LD_INT 23
80332: DOUBLE
80333: EQUAL
80334: IFTRUE 80338
80336: GO 80349
80338: POP
// bc_type := b_ext_laser ; 24 :
80339: LD_ADDR_OWVAR 42
80343: PUSH
80344: LD_INT 25
80346: ST_TO_ADDR
80347: GO 80559
80349: LD_INT 24
80351: DOUBLE
80352: EQUAL
80353: IFTRUE 80357
80355: GO 80368
80357: POP
// bc_type := b_control_tower ; 25 :
80358: LD_ADDR_OWVAR 42
80362: PUSH
80363: LD_INT 36
80365: ST_TO_ADDR
80366: GO 80559
80368: LD_INT 25
80370: DOUBLE
80371: EQUAL
80372: IFTRUE 80376
80374: GO 80387
80376: POP
// bc_type := b_breastwork ; 26 :
80377: LD_ADDR_OWVAR 42
80381: PUSH
80382: LD_INT 31
80384: ST_TO_ADDR
80385: GO 80559
80387: LD_INT 26
80389: DOUBLE
80390: EQUAL
80391: IFTRUE 80395
80393: GO 80406
80395: POP
// bc_type := b_bunker ; 27 :
80396: LD_ADDR_OWVAR 42
80400: PUSH
80401: LD_INT 32
80403: ST_TO_ADDR
80404: GO 80559
80406: LD_INT 27
80408: DOUBLE
80409: EQUAL
80410: IFTRUE 80414
80412: GO 80425
80414: POP
// bc_type := b_turret ; 28 :
80415: LD_ADDR_OWVAR 42
80419: PUSH
80420: LD_INT 33
80422: ST_TO_ADDR
80423: GO 80559
80425: LD_INT 28
80427: DOUBLE
80428: EQUAL
80429: IFTRUE 80433
80431: GO 80444
80433: POP
// bc_type := b_armoury ; 29 :
80434: LD_ADDR_OWVAR 42
80438: PUSH
80439: LD_INT 4
80441: ST_TO_ADDR
80442: GO 80559
80444: LD_INT 29
80446: DOUBLE
80447: EQUAL
80448: IFTRUE 80452
80450: GO 80463
80452: POP
// bc_type := b_barracks ; 30 :
80453: LD_ADDR_OWVAR 42
80457: PUSH
80458: LD_INT 5
80460: ST_TO_ADDR
80461: GO 80559
80463: LD_INT 30
80465: DOUBLE
80466: EQUAL
80467: IFTRUE 80471
80469: GO 80482
80471: POP
// bc_type := b_solar_power ; 31 :
80472: LD_ADDR_OWVAR 42
80476: PUSH
80477: LD_INT 27
80479: ST_TO_ADDR
80480: GO 80559
80482: LD_INT 31
80484: DOUBLE
80485: EQUAL
80486: IFTRUE 80490
80488: GO 80501
80490: POP
// bc_type := b_oil_power ; 32 :
80491: LD_ADDR_OWVAR 42
80495: PUSH
80496: LD_INT 26
80498: ST_TO_ADDR
80499: GO 80559
80501: LD_INT 32
80503: DOUBLE
80504: EQUAL
80505: IFTRUE 80509
80507: GO 80520
80509: POP
// bc_type := b_siberite_power ; 33 :
80510: LD_ADDR_OWVAR 42
80514: PUSH
80515: LD_INT 28
80517: ST_TO_ADDR
80518: GO 80559
80520: LD_INT 33
80522: DOUBLE
80523: EQUAL
80524: IFTRUE 80528
80526: GO 80539
80528: POP
// bc_type := b_oil_mine ; 34 :
80529: LD_ADDR_OWVAR 42
80533: PUSH
80534: LD_INT 29
80536: ST_TO_ADDR
80537: GO 80559
80539: LD_INT 34
80541: DOUBLE
80542: EQUAL
80543: IFTRUE 80547
80545: GO 80558
80547: POP
// bc_type := b_siberite_mine ; end ;
80548: LD_ADDR_OWVAR 42
80552: PUSH
80553: LD_INT 30
80555: ST_TO_ADDR
80556: GO 80559
80558: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
80559: LD_ADDR_VAR 0 8
80563: PUSH
80564: LD_VAR 0 5
80568: PPUSH
80569: LD_VAR 0 6
80573: PPUSH
80574: LD_VAR 0 3
80578: PPUSH
80579: CALL_OW 47
80583: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
80584: LD_OWVAR 42
80588: PUSH
80589: LD_INT 32
80591: PUSH
80592: LD_INT 33
80594: PUSH
80595: EMPTY
80596: LIST
80597: LIST
80598: IN
80599: IFFALSE 80615
// PlaceWeaponTurret ( b , weapon ) ;
80601: LD_VAR 0 8
80605: PPUSH
80606: LD_VAR 0 4
80610: PPUSH
80611: CALL_OW 431
// end ;
80615: LD_VAR 0 7
80619: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
80620: LD_INT 0
80622: PPUSH
80623: PPUSH
80624: PPUSH
80625: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
80626: LD_ADDR_VAR 0 4
80630: PUSH
80631: LD_INT 22
80633: PUSH
80634: LD_OWVAR 2
80638: PUSH
80639: EMPTY
80640: LIST
80641: LIST
80642: PUSH
80643: LD_INT 2
80645: PUSH
80646: LD_INT 30
80648: PUSH
80649: LD_INT 0
80651: PUSH
80652: EMPTY
80653: LIST
80654: LIST
80655: PUSH
80656: LD_INT 30
80658: PUSH
80659: LD_INT 1
80661: PUSH
80662: EMPTY
80663: LIST
80664: LIST
80665: PUSH
80666: EMPTY
80667: LIST
80668: LIST
80669: LIST
80670: PUSH
80671: EMPTY
80672: LIST
80673: LIST
80674: PPUSH
80675: CALL_OW 69
80679: ST_TO_ADDR
// if not tmp then
80680: LD_VAR 0 4
80684: NOT
80685: IFFALSE 80689
// exit ;
80687: GO 80748
// for i in tmp do
80689: LD_ADDR_VAR 0 2
80693: PUSH
80694: LD_VAR 0 4
80698: PUSH
80699: FOR_IN
80700: IFFALSE 80746
// for j = 1 to 3 do
80702: LD_ADDR_VAR 0 3
80706: PUSH
80707: DOUBLE
80708: LD_INT 1
80710: DEC
80711: ST_TO_ADDR
80712: LD_INT 3
80714: PUSH
80715: FOR_TO
80716: IFFALSE 80742
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
80718: LD_VAR 0 2
80722: PPUSH
80723: CALL_OW 274
80727: PPUSH
80728: LD_VAR 0 3
80732: PPUSH
80733: LD_INT 99999
80735: PPUSH
80736: CALL_OW 277
80740: GO 80715
80742: POP
80743: POP
80744: GO 80699
80746: POP
80747: POP
// end ;
80748: LD_VAR 0 1
80752: RET
// export function hHackSetLevel10 ; var i , j ; begin
80753: LD_INT 0
80755: PPUSH
80756: PPUSH
80757: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
80758: LD_ADDR_VAR 0 2
80762: PUSH
80763: LD_INT 21
80765: PUSH
80766: LD_INT 1
80768: PUSH
80769: EMPTY
80770: LIST
80771: LIST
80772: PPUSH
80773: CALL_OW 69
80777: PUSH
80778: FOR_IN
80779: IFFALSE 80831
// if IsSelected ( i ) then
80781: LD_VAR 0 2
80785: PPUSH
80786: CALL_OW 306
80790: IFFALSE 80829
// begin for j := 1 to 4 do
80792: LD_ADDR_VAR 0 3
80796: PUSH
80797: DOUBLE
80798: LD_INT 1
80800: DEC
80801: ST_TO_ADDR
80802: LD_INT 4
80804: PUSH
80805: FOR_TO
80806: IFFALSE 80827
// SetSkill ( i , j , 10 ) ;
80808: LD_VAR 0 2
80812: PPUSH
80813: LD_VAR 0 3
80817: PPUSH
80818: LD_INT 10
80820: PPUSH
80821: CALL_OW 237
80825: GO 80805
80827: POP
80828: POP
// end ;
80829: GO 80778
80831: POP
80832: POP
// end ;
80833: LD_VAR 0 1
80837: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
80838: LD_INT 0
80840: PPUSH
80841: PPUSH
80842: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
80843: LD_ADDR_VAR 0 2
80847: PUSH
80848: LD_INT 22
80850: PUSH
80851: LD_OWVAR 2
80855: PUSH
80856: EMPTY
80857: LIST
80858: LIST
80859: PUSH
80860: LD_INT 21
80862: PUSH
80863: LD_INT 1
80865: PUSH
80866: EMPTY
80867: LIST
80868: LIST
80869: PUSH
80870: EMPTY
80871: LIST
80872: LIST
80873: PPUSH
80874: CALL_OW 69
80878: PUSH
80879: FOR_IN
80880: IFFALSE 80921
// begin for j := 1 to 4 do
80882: LD_ADDR_VAR 0 3
80886: PUSH
80887: DOUBLE
80888: LD_INT 1
80890: DEC
80891: ST_TO_ADDR
80892: LD_INT 4
80894: PUSH
80895: FOR_TO
80896: IFFALSE 80917
// SetSkill ( i , j , 10 ) ;
80898: LD_VAR 0 2
80902: PPUSH
80903: LD_VAR 0 3
80907: PPUSH
80908: LD_INT 10
80910: PPUSH
80911: CALL_OW 237
80915: GO 80895
80917: POP
80918: POP
// end ;
80919: GO 80879
80921: POP
80922: POP
// end ;
80923: LD_VAR 0 1
80927: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
80928: LD_INT 0
80930: PPUSH
// uc_side := your_side ;
80931: LD_ADDR_OWVAR 20
80935: PUSH
80936: LD_OWVAR 2
80940: ST_TO_ADDR
// uc_nation := nation ;
80941: LD_ADDR_OWVAR 21
80945: PUSH
80946: LD_VAR 0 1
80950: ST_TO_ADDR
// InitHc ;
80951: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
80955: LD_INT 0
80957: PPUSH
80958: LD_VAR 0 2
80962: PPUSH
80963: LD_VAR 0 3
80967: PPUSH
80968: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
80972: LD_VAR 0 4
80976: PPUSH
80977: LD_VAR 0 5
80981: PPUSH
80982: CALL_OW 428
80986: PUSH
80987: LD_INT 0
80989: EQUAL
80990: IFFALSE 81014
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
80992: CALL_OW 44
80996: PPUSH
80997: LD_VAR 0 4
81001: PPUSH
81002: LD_VAR 0 5
81006: PPUSH
81007: LD_INT 1
81009: PPUSH
81010: CALL_OW 48
// end ;
81014: LD_VAR 0 6
81018: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
81019: LD_INT 0
81021: PPUSH
81022: PPUSH
// uc_side := your_side ;
81023: LD_ADDR_OWVAR 20
81027: PUSH
81028: LD_OWVAR 2
81032: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
81033: LD_VAR 0 1
81037: PUSH
81038: LD_INT 1
81040: PUSH
81041: LD_INT 2
81043: PUSH
81044: LD_INT 3
81046: PUSH
81047: LD_INT 4
81049: PUSH
81050: LD_INT 5
81052: PUSH
81053: EMPTY
81054: LIST
81055: LIST
81056: LIST
81057: LIST
81058: LIST
81059: IN
81060: IFFALSE 81072
// uc_nation := nation_american else
81062: LD_ADDR_OWVAR 21
81066: PUSH
81067: LD_INT 1
81069: ST_TO_ADDR
81070: GO 81115
// if chassis in [ 11 , 12 , 13 , 14 ] then
81072: LD_VAR 0 1
81076: PUSH
81077: LD_INT 11
81079: PUSH
81080: LD_INT 12
81082: PUSH
81083: LD_INT 13
81085: PUSH
81086: LD_INT 14
81088: PUSH
81089: EMPTY
81090: LIST
81091: LIST
81092: LIST
81093: LIST
81094: IN
81095: IFFALSE 81107
// uc_nation := nation_arabian else
81097: LD_ADDR_OWVAR 21
81101: PUSH
81102: LD_INT 2
81104: ST_TO_ADDR
81105: GO 81115
// uc_nation := nation_russian ;
81107: LD_ADDR_OWVAR 21
81111: PUSH
81112: LD_INT 3
81114: ST_TO_ADDR
// vc_chassis := chassis ;
81115: LD_ADDR_OWVAR 37
81119: PUSH
81120: LD_VAR 0 1
81124: ST_TO_ADDR
// vc_engine := engine ;
81125: LD_ADDR_OWVAR 39
81129: PUSH
81130: LD_VAR 0 2
81134: ST_TO_ADDR
// vc_control := control ;
81135: LD_ADDR_OWVAR 38
81139: PUSH
81140: LD_VAR 0 3
81144: ST_TO_ADDR
// vc_weapon := weapon ;
81145: LD_ADDR_OWVAR 40
81149: PUSH
81150: LD_VAR 0 4
81154: ST_TO_ADDR
// un := CreateVehicle ;
81155: LD_ADDR_VAR 0 8
81159: PUSH
81160: CALL_OW 45
81164: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
81165: LD_VAR 0 8
81169: PPUSH
81170: LD_INT 0
81172: PPUSH
81173: LD_INT 5
81175: PPUSH
81176: CALL_OW 12
81180: PPUSH
81181: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
81185: LD_VAR 0 8
81189: PPUSH
81190: LD_VAR 0 5
81194: PPUSH
81195: LD_VAR 0 6
81199: PPUSH
81200: LD_INT 1
81202: PPUSH
81203: CALL_OW 48
// end ;
81207: LD_VAR 0 7
81211: RET
// export hInvincible ; every 1 do
81212: GO 81214
81214: DISABLE
// hInvincible := [ ] ;
81215: LD_ADDR_EXP 104
81219: PUSH
81220: EMPTY
81221: ST_TO_ADDR
81222: END
// every 10 do var i ;
81223: GO 81225
81225: DISABLE
81226: LD_INT 0
81228: PPUSH
// begin enable ;
81229: ENABLE
// if not hInvincible then
81230: LD_EXP 104
81234: NOT
81235: IFFALSE 81239
// exit ;
81237: GO 81283
// for i in hInvincible do
81239: LD_ADDR_VAR 0 1
81243: PUSH
81244: LD_EXP 104
81248: PUSH
81249: FOR_IN
81250: IFFALSE 81281
// if GetLives ( i ) < 1000 then
81252: LD_VAR 0 1
81256: PPUSH
81257: CALL_OW 256
81261: PUSH
81262: LD_INT 1000
81264: LESS
81265: IFFALSE 81279
// SetLives ( i , 1000 ) ;
81267: LD_VAR 0 1
81271: PPUSH
81272: LD_INT 1000
81274: PPUSH
81275: CALL_OW 234
81279: GO 81249
81281: POP
81282: POP
// end ;
81283: PPOPN 1
81285: END
// export function hHackInvincible ; var i ; begin
81286: LD_INT 0
81288: PPUSH
81289: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
81290: LD_ADDR_VAR 0 2
81294: PUSH
81295: LD_INT 2
81297: PUSH
81298: LD_INT 21
81300: PUSH
81301: LD_INT 1
81303: PUSH
81304: EMPTY
81305: LIST
81306: LIST
81307: PUSH
81308: LD_INT 21
81310: PUSH
81311: LD_INT 2
81313: PUSH
81314: EMPTY
81315: LIST
81316: LIST
81317: PUSH
81318: EMPTY
81319: LIST
81320: LIST
81321: LIST
81322: PPUSH
81323: CALL_OW 69
81327: PUSH
81328: FOR_IN
81329: IFFALSE 81390
// if IsSelected ( i ) then
81331: LD_VAR 0 2
81335: PPUSH
81336: CALL_OW 306
81340: IFFALSE 81388
// begin if i in hInvincible then
81342: LD_VAR 0 2
81346: PUSH
81347: LD_EXP 104
81351: IN
81352: IFFALSE 81372
// hInvincible := hInvincible diff i else
81354: LD_ADDR_EXP 104
81358: PUSH
81359: LD_EXP 104
81363: PUSH
81364: LD_VAR 0 2
81368: DIFF
81369: ST_TO_ADDR
81370: GO 81388
// hInvincible := hInvincible union i ;
81372: LD_ADDR_EXP 104
81376: PUSH
81377: LD_EXP 104
81381: PUSH
81382: LD_VAR 0 2
81386: UNION
81387: ST_TO_ADDR
// end ;
81388: GO 81328
81390: POP
81391: POP
// end ;
81392: LD_VAR 0 1
81396: RET
// export function hHackInvisible ; var i , j ; begin
81397: LD_INT 0
81399: PPUSH
81400: PPUSH
81401: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
81402: LD_ADDR_VAR 0 2
81406: PUSH
81407: LD_INT 21
81409: PUSH
81410: LD_INT 1
81412: PUSH
81413: EMPTY
81414: LIST
81415: LIST
81416: PPUSH
81417: CALL_OW 69
81421: PUSH
81422: FOR_IN
81423: IFFALSE 81447
// if IsSelected ( i ) then
81425: LD_VAR 0 2
81429: PPUSH
81430: CALL_OW 306
81434: IFFALSE 81445
// ComForceInvisible ( i ) ;
81436: LD_VAR 0 2
81440: PPUSH
81441: CALL_OW 496
81445: GO 81422
81447: POP
81448: POP
// end ;
81449: LD_VAR 0 1
81453: RET
// export function hHackChangeYourSide ; begin
81454: LD_INT 0
81456: PPUSH
// if your_side = 8 then
81457: LD_OWVAR 2
81461: PUSH
81462: LD_INT 8
81464: EQUAL
81465: IFFALSE 81477
// your_side := 0 else
81467: LD_ADDR_OWVAR 2
81471: PUSH
81472: LD_INT 0
81474: ST_TO_ADDR
81475: GO 81491
// your_side := your_side + 1 ;
81477: LD_ADDR_OWVAR 2
81481: PUSH
81482: LD_OWVAR 2
81486: PUSH
81487: LD_INT 1
81489: PLUS
81490: ST_TO_ADDR
// end ;
81491: LD_VAR 0 1
81495: RET
// export function hHackChangeUnitSide ; var i , j ; begin
81496: LD_INT 0
81498: PPUSH
81499: PPUSH
81500: PPUSH
// for i in all_units do
81501: LD_ADDR_VAR 0 2
81505: PUSH
81506: LD_OWVAR 3
81510: PUSH
81511: FOR_IN
81512: IFFALSE 81590
// if IsSelected ( i ) then
81514: LD_VAR 0 2
81518: PPUSH
81519: CALL_OW 306
81523: IFFALSE 81588
// begin j := GetSide ( i ) ;
81525: LD_ADDR_VAR 0 3
81529: PUSH
81530: LD_VAR 0 2
81534: PPUSH
81535: CALL_OW 255
81539: ST_TO_ADDR
// if j = 8 then
81540: LD_VAR 0 3
81544: PUSH
81545: LD_INT 8
81547: EQUAL
81548: IFFALSE 81560
// j := 0 else
81550: LD_ADDR_VAR 0 3
81554: PUSH
81555: LD_INT 0
81557: ST_TO_ADDR
81558: GO 81574
// j := j + 1 ;
81560: LD_ADDR_VAR 0 3
81564: PUSH
81565: LD_VAR 0 3
81569: PUSH
81570: LD_INT 1
81572: PLUS
81573: ST_TO_ADDR
// SetSide ( i , j ) ;
81574: LD_VAR 0 2
81578: PPUSH
81579: LD_VAR 0 3
81583: PPUSH
81584: CALL_OW 235
// end ;
81588: GO 81511
81590: POP
81591: POP
// end ;
81592: LD_VAR 0 1
81596: RET
// export function hHackFog ; begin
81597: LD_INT 0
81599: PPUSH
// FogOff ( true ) ;
81600: LD_INT 1
81602: PPUSH
81603: CALL_OW 344
// end ;
81607: LD_VAR 0 1
81611: RET
// export function hHackTeleport ( unit , x , y ) ; begin
81612: LD_INT 0
81614: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
81615: LD_VAR 0 1
81619: PPUSH
81620: LD_VAR 0 2
81624: PPUSH
81625: LD_VAR 0 3
81629: PPUSH
81630: LD_INT 1
81632: PPUSH
81633: LD_INT 1
81635: PPUSH
81636: CALL_OW 483
// CenterOnXY ( x , y ) ;
81640: LD_VAR 0 2
81644: PPUSH
81645: LD_VAR 0 3
81649: PPUSH
81650: CALL_OW 84
// end ;
81654: LD_VAR 0 4
81658: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
81659: LD_INT 0
81661: PPUSH
81662: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
81663: LD_VAR 0 1
81667: NOT
81668: IFTRUE 81687
81670: PUSH
81671: LD_VAR 0 2
81675: PPUSH
81676: LD_VAR 0 3
81680: PPUSH
81681: CALL_OW 488
81685: NOT
81686: OR
81687: IFTRUE 81722
81689: PUSH
81690: LD_VAR 0 1
81694: PPUSH
81695: CALL_OW 266
81699: PUSH
81700: LD_INT 3
81702: NONEQUAL
81703: IFFALSE 81721
81705: PUSH
81706: LD_VAR 0 1
81710: PPUSH
81711: CALL_OW 247
81715: PUSH
81716: LD_INT 1
81718: EQUAL
81719: NOT
81720: AND
81721: OR
81722: IFFALSE 81726
// exit ;
81724: GO 82008
// if GetType ( factory ) = unit_human then
81726: LD_VAR 0 1
81730: PPUSH
81731: CALL_OW 247
81735: PUSH
81736: LD_INT 1
81738: EQUAL
81739: IFFALSE 81756
// factory := IsInUnit ( factory ) ;
81741: LD_ADDR_VAR 0 1
81745: PUSH
81746: LD_VAR 0 1
81750: PPUSH
81751: CALL_OW 310
81755: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
81756: LD_VAR 0 1
81760: PPUSH
81761: CALL_OW 266
81765: PUSH
81766: LD_INT 3
81768: NONEQUAL
81769: IFFALSE 81773
// exit ;
81771: GO 82008
// for i := 1 to Count ( factoryWaypoints ) do
81773: LD_ADDR_VAR 0 5
81777: PUSH
81778: DOUBLE
81779: LD_INT 1
81781: DEC
81782: ST_TO_ADDR
81783: LD_EXP 105
81787: PPUSH
81788: CALL 19061 0 1
81792: PUSH
81793: FOR_TO
81794: IFFALSE 81956
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
81796: LD_VAR 0 2
81800: PPUSH
81801: LD_VAR 0 3
81805: PPUSH
81806: CALL_OW 428
81810: PUSH
81811: LD_EXP 105
81815: PUSH
81816: LD_VAR 0 5
81820: ARRAY
81821: PUSH
81822: LD_INT 2
81824: ARRAY
81825: EQUAL
81826: IFFALSE 81858
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
81828: LD_ADDR_EXP 105
81832: PUSH
81833: LD_EXP 105
81837: PPUSH
81838: LD_VAR 0 5
81842: PPUSH
81843: CALL_OW 3
81847: ST_TO_ADDR
// UpdateFactoryWaypoints ;
81848: CALL 82013 0 0
// exit ;
81852: POP
81853: POP
81854: GO 82008
// end else
81856: GO 81954
// if factory = factoryWaypoints [ i ] [ 2 ] then
81858: LD_VAR 0 1
81862: PUSH
81863: LD_EXP 105
81867: PUSH
81868: LD_VAR 0 5
81872: ARRAY
81873: PUSH
81874: LD_INT 2
81876: ARRAY
81877: EQUAL
81878: IFFALSE 81954
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
81880: LD_ADDR_EXP 105
81884: PUSH
81885: LD_EXP 105
81889: PPUSH
81890: LD_VAR 0 5
81894: PPUSH
81895: CALL_OW 3
81899: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
81900: LD_ADDR_EXP 105
81904: PUSH
81905: LD_EXP 105
81909: PPUSH
81910: LD_VAR 0 1
81914: PPUSH
81915: CALL_OW 255
81919: PUSH
81920: LD_VAR 0 1
81924: PUSH
81925: LD_VAR 0 2
81929: PUSH
81930: LD_VAR 0 3
81934: PUSH
81935: EMPTY
81936: LIST
81937: LIST
81938: LIST
81939: LIST
81940: PPUSH
81941: CALL 55037 0 2
81945: ST_TO_ADDR
// UpdateFactoryWaypoints ;
81946: CALL 82013 0 0
// exit ;
81950: POP
81951: POP
81952: GO 82008
// end ; end ;
81954: GO 81793
81956: POP
81957: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
81958: LD_ADDR_EXP 105
81962: PUSH
81963: LD_EXP 105
81967: PPUSH
81968: LD_VAR 0 1
81972: PPUSH
81973: CALL_OW 255
81977: PUSH
81978: LD_VAR 0 1
81982: PUSH
81983: LD_VAR 0 2
81987: PUSH
81988: LD_VAR 0 3
81992: PUSH
81993: EMPTY
81994: LIST
81995: LIST
81996: LIST
81997: LIST
81998: PPUSH
81999: CALL 55037 0 2
82003: ST_TO_ADDR
// UpdateFactoryWaypoints ;
82004: CALL 82013 0 0
// end ;
82008: LD_VAR 0 4
82012: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
82013: LD_INT 0
82015: PPUSH
82016: PPUSH
82017: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
82018: LD_STRING resetFactoryWaypoint();
82020: PPUSH
82021: CALL_OW 559
// if factoryWaypoints then
82025: LD_EXP 105
82029: IFFALSE 82150
// begin list := factoryWaypoints ;
82031: LD_ADDR_VAR 0 3
82035: PUSH
82036: LD_EXP 105
82040: ST_TO_ADDR
// for i := 1 to list do
82041: LD_ADDR_VAR 0 2
82045: PUSH
82046: DOUBLE
82047: LD_INT 1
82049: DEC
82050: ST_TO_ADDR
82051: LD_VAR 0 3
82055: PUSH
82056: FOR_TO
82057: IFFALSE 82148
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
82059: LD_STRING setFactoryWaypointXY(
82061: PUSH
82062: LD_VAR 0 3
82066: PUSH
82067: LD_VAR 0 2
82071: ARRAY
82072: PUSH
82073: LD_INT 1
82075: ARRAY
82076: STR
82077: PUSH
82078: LD_STRING ,
82080: STR
82081: PUSH
82082: LD_VAR 0 3
82086: PUSH
82087: LD_VAR 0 2
82091: ARRAY
82092: PUSH
82093: LD_INT 2
82095: ARRAY
82096: STR
82097: PUSH
82098: LD_STRING ,
82100: STR
82101: PUSH
82102: LD_VAR 0 3
82106: PUSH
82107: LD_VAR 0 2
82111: ARRAY
82112: PUSH
82113: LD_INT 3
82115: ARRAY
82116: STR
82117: PUSH
82118: LD_STRING ,
82120: STR
82121: PUSH
82122: LD_VAR 0 3
82126: PUSH
82127: LD_VAR 0 2
82131: ARRAY
82132: PUSH
82133: LD_INT 4
82135: ARRAY
82136: STR
82137: PUSH
82138: LD_STRING )
82140: STR
82141: PPUSH
82142: CALL_OW 559
82146: GO 82056
82148: POP
82149: POP
// end ; end ;
82150: LD_VAR 0 1
82154: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
82155: LD_INT 0
82157: PPUSH
// if HexInfo ( x , y ) = warehouse then
82158: LD_VAR 0 2
82162: PPUSH
82163: LD_VAR 0 3
82167: PPUSH
82168: CALL_OW 428
82172: PUSH
82173: LD_VAR 0 1
82177: EQUAL
82178: IFFALSE 82205
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
82180: LD_ADDR_EXP 107
82184: PUSH
82185: LD_EXP 107
82189: PPUSH
82190: LD_VAR 0 1
82194: PPUSH
82195: LD_INT 0
82197: PPUSH
82198: CALL_OW 1
82202: ST_TO_ADDR
82203: GO 82256
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
82205: LD_ADDR_EXP 107
82209: PUSH
82210: LD_EXP 107
82214: PPUSH
82215: LD_VAR 0 1
82219: PPUSH
82220: LD_VAR 0 1
82224: PPUSH
82225: CALL_OW 255
82229: PUSH
82230: LD_VAR 0 1
82234: PUSH
82235: LD_VAR 0 2
82239: PUSH
82240: LD_VAR 0 3
82244: PUSH
82245: EMPTY
82246: LIST
82247: LIST
82248: LIST
82249: LIST
82250: PPUSH
82251: CALL_OW 1
82255: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
82256: CALL 82265 0 0
// end ;
82260: LD_VAR 0 4
82264: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
82265: LD_INT 0
82267: PPUSH
82268: PPUSH
82269: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
82270: LD_STRING resetWarehouseGatheringPoints();
82272: PPUSH
82273: CALL_OW 559
// if warehouseGatheringPoints then
82277: LD_EXP 107
82281: IFFALSE 82407
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
82283: LD_ADDR_VAR 0 3
82287: PUSH
82288: LD_EXP 107
82292: PPUSH
82293: CALL 58971 0 1
82297: ST_TO_ADDR
// for i := 1 to list do
82298: LD_ADDR_VAR 0 2
82302: PUSH
82303: DOUBLE
82304: LD_INT 1
82306: DEC
82307: ST_TO_ADDR
82308: LD_VAR 0 3
82312: PUSH
82313: FOR_TO
82314: IFFALSE 82405
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
82316: LD_STRING setWarehouseGatheringPointXY(
82318: PUSH
82319: LD_VAR 0 3
82323: PUSH
82324: LD_VAR 0 2
82328: ARRAY
82329: PUSH
82330: LD_INT 1
82332: ARRAY
82333: STR
82334: PUSH
82335: LD_STRING ,
82337: STR
82338: PUSH
82339: LD_VAR 0 3
82343: PUSH
82344: LD_VAR 0 2
82348: ARRAY
82349: PUSH
82350: LD_INT 2
82352: ARRAY
82353: STR
82354: PUSH
82355: LD_STRING ,
82357: STR
82358: PUSH
82359: LD_VAR 0 3
82363: PUSH
82364: LD_VAR 0 2
82368: ARRAY
82369: PUSH
82370: LD_INT 3
82372: ARRAY
82373: STR
82374: PUSH
82375: LD_STRING ,
82377: STR
82378: PUSH
82379: LD_VAR 0 3
82383: PUSH
82384: LD_VAR 0 2
82388: ARRAY
82389: PUSH
82390: LD_INT 4
82392: ARRAY
82393: STR
82394: PUSH
82395: LD_STRING )
82397: STR
82398: PPUSH
82399: CALL_OW 559
82403: GO 82313
82405: POP
82406: POP
// end ; end ;
82407: LD_VAR 0 1
82411: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
82412: LD_EXP 107
82416: IFFALSE 83111
82418: GO 82420
82420: DISABLE
82421: LD_INT 0
82423: PPUSH
82424: PPUSH
82425: PPUSH
82426: PPUSH
82427: PPUSH
82428: PPUSH
82429: PPUSH
82430: PPUSH
82431: PPUSH
// begin enable ;
82432: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
82433: LD_ADDR_VAR 0 3
82437: PUSH
82438: LD_EXP 107
82442: PPUSH
82443: CALL 58971 0 1
82447: ST_TO_ADDR
// if not list then
82448: LD_VAR 0 3
82452: NOT
82453: IFFALSE 82457
// exit ;
82455: GO 83111
// for i := 1 to list do
82457: LD_ADDR_VAR 0 1
82461: PUSH
82462: DOUBLE
82463: LD_INT 1
82465: DEC
82466: ST_TO_ADDR
82467: LD_VAR 0 3
82471: PUSH
82472: FOR_TO
82473: IFFALSE 83109
// begin depot := list [ i ] [ 2 ] ;
82475: LD_ADDR_VAR 0 8
82479: PUSH
82480: LD_VAR 0 3
82484: PUSH
82485: LD_VAR 0 1
82489: ARRAY
82490: PUSH
82491: LD_INT 2
82493: ARRAY
82494: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
82495: LD_ADDR_VAR 0 5
82499: PUSH
82500: LD_VAR 0 3
82504: PUSH
82505: LD_VAR 0 1
82509: ARRAY
82510: PUSH
82511: LD_INT 1
82513: ARRAY
82514: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
82515: LD_VAR 0 8
82519: PPUSH
82520: CALL_OW 301
82524: IFTRUE 82543
82526: PUSH
82527: LD_VAR 0 5
82531: PUSH
82532: LD_VAR 0 8
82536: PPUSH
82537: CALL_OW 255
82541: NONEQUAL
82542: OR
82543: IFFALSE 82572
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
82545: LD_ADDR_EXP 107
82549: PUSH
82550: LD_EXP 107
82554: PPUSH
82555: LD_VAR 0 8
82559: PPUSH
82560: LD_INT 0
82562: PPUSH
82563: CALL_OW 1
82567: ST_TO_ADDR
// exit ;
82568: POP
82569: POP
82570: GO 83111
// end ; x := list [ i ] [ 3 ] ;
82572: LD_ADDR_VAR 0 6
82576: PUSH
82577: LD_VAR 0 3
82581: PUSH
82582: LD_VAR 0 1
82586: ARRAY
82587: PUSH
82588: LD_INT 3
82590: ARRAY
82591: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
82592: LD_ADDR_VAR 0 7
82596: PUSH
82597: LD_VAR 0 3
82601: PUSH
82602: LD_VAR 0 1
82606: ARRAY
82607: PUSH
82608: LD_INT 4
82610: ARRAY
82611: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
82612: LD_ADDR_VAR 0 9
82616: PUSH
82617: LD_VAR 0 6
82621: PPUSH
82622: LD_VAR 0 7
82626: PPUSH
82627: LD_INT 16
82629: PPUSH
82630: CALL 57545 0 3
82634: ST_TO_ADDR
// if not cratesNearbyPoint then
82635: LD_VAR 0 9
82639: NOT
82640: IFFALSE 82646
// exit ;
82642: POP
82643: POP
82644: GO 83111
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
82646: LD_ADDR_VAR 0 4
82650: PUSH
82651: LD_INT 22
82653: PUSH
82654: LD_VAR 0 5
82658: PUSH
82659: EMPTY
82660: LIST
82661: LIST
82662: PUSH
82663: LD_INT 3
82665: PUSH
82666: LD_INT 60
82668: PUSH
82669: EMPTY
82670: LIST
82671: PUSH
82672: EMPTY
82673: LIST
82674: LIST
82675: PUSH
82676: LD_INT 91
82678: PUSH
82679: LD_VAR 0 8
82683: PUSH
82684: LD_INT 6
82686: PUSH
82687: EMPTY
82688: LIST
82689: LIST
82690: LIST
82691: PUSH
82692: LD_INT 2
82694: PUSH
82695: LD_INT 25
82697: PUSH
82698: LD_INT 2
82700: PUSH
82701: EMPTY
82702: LIST
82703: LIST
82704: PUSH
82705: LD_INT 25
82707: PUSH
82708: LD_INT 16
82710: PUSH
82711: EMPTY
82712: LIST
82713: LIST
82714: PUSH
82715: EMPTY
82716: LIST
82717: LIST
82718: LIST
82719: PUSH
82720: EMPTY
82721: LIST
82722: LIST
82723: LIST
82724: LIST
82725: PPUSH
82726: CALL_OW 69
82730: PUSH
82731: LD_VAR 0 8
82735: PPUSH
82736: CALL_OW 313
82740: PPUSH
82741: LD_INT 3
82743: PUSH
82744: LD_INT 60
82746: PUSH
82747: EMPTY
82748: LIST
82749: PUSH
82750: EMPTY
82751: LIST
82752: LIST
82753: PUSH
82754: LD_INT 2
82756: PUSH
82757: LD_INT 25
82759: PUSH
82760: LD_INT 2
82762: PUSH
82763: EMPTY
82764: LIST
82765: LIST
82766: PUSH
82767: LD_INT 25
82769: PUSH
82770: LD_INT 16
82772: PUSH
82773: EMPTY
82774: LIST
82775: LIST
82776: PUSH
82777: EMPTY
82778: LIST
82779: LIST
82780: LIST
82781: PUSH
82782: EMPTY
82783: LIST
82784: LIST
82785: PPUSH
82786: CALL_OW 72
82790: UNION
82791: ST_TO_ADDR
// if tmp then
82792: LD_VAR 0 4
82796: IFFALSE 82876
// begin tmp := ShrinkArray ( tmp , 3 ) ;
82798: LD_ADDR_VAR 0 4
82802: PUSH
82803: LD_VAR 0 4
82807: PPUSH
82808: LD_INT 3
82810: PPUSH
82811: CALL 55352 0 2
82815: ST_TO_ADDR
// for j in tmp do
82816: LD_ADDR_VAR 0 2
82820: PUSH
82821: LD_VAR 0 4
82825: PUSH
82826: FOR_IN
82827: IFFALSE 82870
// begin if IsInUnit ( j ) then
82829: LD_VAR 0 2
82833: PPUSH
82834: CALL_OW 310
82838: IFFALSE 82849
// ComExit ( j ) ;
82840: LD_VAR 0 2
82844: PPUSH
82845: CALL 55435 0 1
// AddComCollect ( j , x , y ) ;
82849: LD_VAR 0 2
82853: PPUSH
82854: LD_VAR 0 6
82858: PPUSH
82859: LD_VAR 0 7
82863: PPUSH
82864: CALL_OW 177
// end ;
82868: GO 82826
82870: POP
82871: POP
// exit ;
82872: POP
82873: POP
82874: GO 83111
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
82876: LD_ADDR_VAR 0 4
82880: PUSH
82881: LD_INT 22
82883: PUSH
82884: LD_VAR 0 5
82888: PUSH
82889: EMPTY
82890: LIST
82891: LIST
82892: PUSH
82893: LD_INT 91
82895: PUSH
82896: LD_VAR 0 8
82900: PUSH
82901: LD_INT 8
82903: PUSH
82904: EMPTY
82905: LIST
82906: LIST
82907: LIST
82908: PUSH
82909: LD_INT 2
82911: PUSH
82912: LD_INT 34
82914: PUSH
82915: LD_INT 12
82917: PUSH
82918: EMPTY
82919: LIST
82920: LIST
82921: PUSH
82922: LD_INT 34
82924: PUSH
82925: LD_INT 51
82927: PUSH
82928: EMPTY
82929: LIST
82930: LIST
82931: PUSH
82932: LD_INT 34
82934: PUSH
82935: LD_INT 32
82937: PUSH
82938: EMPTY
82939: LIST
82940: LIST
82941: PUSH
82942: LD_INT 34
82944: PUSH
82945: LD_INT 89
82947: PUSH
82948: EMPTY
82949: LIST
82950: LIST
82951: PUSH
82952: EMPTY
82953: LIST
82954: LIST
82955: LIST
82956: LIST
82957: LIST
82958: PUSH
82959: EMPTY
82960: LIST
82961: LIST
82962: LIST
82963: PPUSH
82964: CALL_OW 69
82968: ST_TO_ADDR
// if tmp then
82969: LD_VAR 0 4
82973: IFFALSE 83107
// begin for j in tmp do
82975: LD_ADDR_VAR 0 2
82979: PUSH
82980: LD_VAR 0 4
82984: PUSH
82985: FOR_IN
82986: IFFALSE 83105
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
82988: LD_VAR 0 2
82992: PPUSH
82993: CALL_OW 262
82997: PUSH
82998: LD_INT 3
83000: EQUAL
83001: IFTRUE 83018
83003: PUSH
83004: LD_VAR 0 2
83008: PPUSH
83009: CALL_OW 261
83013: PUSH
83014: LD_INT 20
83016: GREATER
83017: OR
83018: IFFALSE 83032
83020: PUSH
83021: LD_VAR 0 2
83025: PPUSH
83026: CALL_OW 314
83030: NOT
83031: AND
83032: IFFALSE 83062
83034: PUSH
83035: LD_VAR 0 2
83039: PPUSH
83040: CALL_OW 263
83044: PUSH
83045: LD_INT 1
83047: NONEQUAL
83048: IFTRUE 83061
83050: PUSH
83051: LD_VAR 0 2
83055: PPUSH
83056: CALL_OW 311
83060: OR
83061: AND
83062: IFFALSE 83103
// begin ComCollect ( j , x , y ) ;
83064: LD_VAR 0 2
83068: PPUSH
83069: LD_VAR 0 6
83073: PPUSH
83074: LD_VAR 0 7
83078: PPUSH
83079: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
83083: LD_VAR 0 2
83087: PPUSH
83088: LD_VAR 0 8
83092: PPUSH
83093: CALL_OW 172
// exit ;
83097: POP
83098: POP
83099: POP
83100: POP
83101: GO 83111
// end ;
83103: GO 82985
83105: POP
83106: POP
// end ; end ;
83107: GO 82472
83109: POP
83110: POP
// end ; end_of_file
83111: PPOPN 9
83113: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
83114: LD_VAR 0 1
83118: PPUSH
83119: LD_VAR 0 2
83123: PPUSH
83124: LD_VAR 0 3
83128: PPUSH
83129: LD_VAR 0 4
83133: PPUSH
83134: LD_VAR 0 5
83138: PPUSH
83139: LD_VAR 0 6
83143: PPUSH
83144: CALL 67207 0 6
// end ;
83148: PPOPN 6
83150: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
83151: LD_INT 0
83153: PPUSH
// begin if not units then
83154: LD_VAR 0 1
83158: NOT
83159: IFFALSE 83163
// exit ;
83161: GO 83197
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
83163: LD_VAR 0 1
83167: PPUSH
83168: LD_VAR 0 2
83172: PPUSH
83173: LD_VAR 0 3
83177: PPUSH
83178: LD_VAR 0 4
83182: PPUSH
83183: LD_VAR 0 5
83187: PPUSH
83188: LD_VAR 0 6
83192: PPUSH
83193: CALL 67001 0 6
// end ;
83197: PPOPN 7
83199: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
83200: CALL 67087 0 0
// end ; end_of_file
83204: PPOPN 1
83206: END
