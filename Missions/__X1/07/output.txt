// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 62 0 0
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// CreateNature ( apemanSpawnArea , forestArea , riverArea ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 5
  20: PPUSH
  21: LD_INT 6
  23: PPUSH
  24: CALL 441 0 3
// PrepareAmerican ;
  28: CALL 2520 0 0
// PrepareArabian ;
  32: CALL 1161 0 0
// Action ;
  36: CALL 7421 0 0
// if debug then
  40: LD_EXP 1
  44: IFFALSE 61
// begin Difficulty := 4 ;
  46: LD_ADDR_OWVAR 67
  50: PUSH
  51: LD_INT 4
  53: ST_TO_ADDR
// FogOff ( 2 ) ;
  54: LD_INT 2
  56: PPUSH
  57: CALL_OW 344
// end ; end ;
  61: END
// export debug , prefix , scoutActive , scoutFailed , scoutSuccess , usAttacksAllowed , usSurrender , russianAttack , hasRockets , seeRemoteVehicle , seeHeavyGun , remoteControlLimit , sniperKillCounter , vehLossCounter ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// debug := false ;
  65: LD_ADDR_EXP 1
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// prefix := 06_ ;
  73: LD_ADDR_EXP 2
  77: PUSH
  78: LD_STRING 06_
  80: ST_TO_ADDR
// scoutActive := 0 ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// scoutFailed := false ;
  89: LD_ADDR_EXP 4
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// scoutSuccess := false ;
  97: LD_ADDR_EXP 5
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// usAttacksAllowed := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usSurrender := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// russianAttack := false ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// hasRockets := false ;
 129: LD_ADDR_EXP 9
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// seeRemoteVehicle := false ;
 137: LD_ADDR_EXP 10
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// seeHeavyGun := false ;
 145: LD_ADDR_EXP 11
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlLimit := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: LD_INT 2
 163: PUSH
 164: LD_INT 2
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// sniperKillCounter := 0 ;
 182: LD_ADDR_EXP 13
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// vehLossCounter := 0 ;
 190: LD_ADDR_EXP 14
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// end ;
 198: LD_VAR 0 1
 202: RET
// every 0 0$2 trigger sniperKillCounter >= 3 do
 203: LD_EXP 13
 207: PUSH
 208: LD_INT 3
 210: GREATEREQUAL
 211: IFFALSE 223
 213: GO 215
 215: DISABLE
// SetAchievement ( ACH_ANTSNIPER ) ; end_of_file
 216: LD_STRING ACH_ANTSNIPER
 218: PPUSH
 219: CALL_OW 543
 223: END
// export function SayX ( units , ident ) ; var i ; begin
 224: LD_INT 0
 226: PPUSH
 227: PPUSH
// result := false ;
 228: LD_ADDR_VAR 0 3
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// if not units then
 236: LD_VAR 0 1
 240: NOT
 241: IFFALSE 245
// exit ;
 243: GO 299
// for i in units do
 245: LD_ADDR_VAR 0 4
 249: PUSH
 250: LD_VAR 0 1
 254: PUSH
 255: FOR_IN
 256: IFFALSE 297
// if IsOk ( i ) then
 258: LD_VAR 0 4
 262: PPUSH
 263: CALL_OW 302
 267: IFFALSE 295
// begin Say ( i , ident ) ;
 269: LD_VAR 0 4
 273: PPUSH
 274: LD_VAR 0 2
 278: PPUSH
 279: CALL_OW 88
// result := i ;
 283: LD_ADDR_VAR 0 3
 287: PUSH
 288: LD_VAR 0 4
 292: ST_TO_ADDR
// break ;
 293: GO 297
// end ;
 295: GO 255
 297: POP
 298: POP
// end ;
 299: LD_VAR 0 3
 303: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 304: LD_INT 0
 306: PPUSH
 307: PPUSH
// InitUc ;
 308: CALL_OW 18
// InitHc ;
 312: CALL_OW 19
// uc_side := 0 ;
 316: LD_ADDR_OWVAR 20
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// uc_nation := 0 ;
 324: LD_ADDR_OWVAR 21
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// for i = 1 to amount do
 332: LD_ADDR_VAR 0 4
 336: PUSH
 337: DOUBLE
 338: LD_INT 1
 340: DEC
 341: ST_TO_ADDR
 342: LD_VAR 0 2
 346: PUSH
 347: FOR_TO
 348: IFFALSE 430
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 350: LD_ADDR_OWVAR 29
 354: PUSH
 355: LD_INT 9
 357: PPUSH
 358: LD_INT 12
 360: PPUSH
 361: CALL_OW 12
 365: PUSH
 366: LD_INT 9
 368: PPUSH
 369: LD_INT 12
 371: PPUSH
 372: CALL_OW 12
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 381: LD_ADDR_OWVAR 35
 385: PUSH
 386: LD_INT 1
 388: NEG
 389: PPUSH
 390: LD_INT 1
 392: PPUSH
 393: CALL_OW 12
 397: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 398: LD_INT 0
 400: PPUSH
 401: LD_INT 12
 403: PPUSH
 404: LD_INT 1
 406: PPUSH
 407: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 411: CALL_OW 44
 415: PPUSH
 416: LD_VAR 0 1
 420: PPUSH
 421: LD_INT 0
 423: PPUSH
 424: CALL_OW 49
// end ;
 428: GO 347
 430: POP
 431: POP
// InitHc ;
 432: CALL_OW 19
// end ;
 436: LD_VAR 0 3
 440: RET
// export function CreateNature ( apemanArea , forest , water ) ; var i ; begin
 441: LD_INT 0
 443: PPUSH
 444: PPUSH
// uc_side := 0 ;
 445: LD_ADDR_OWVAR 20
 449: PUSH
 450: LD_INT 0
 452: ST_TO_ADDR
// uc_nation := 0 ;
 453: LD_ADDR_OWVAR 21
 457: PUSH
 458: LD_INT 0
 460: ST_TO_ADDR
// SpawnApeman ( apemanArea , [ 9 , 8 , 7 , 6 ] [ Difficulty ] ) ;
 461: LD_VAR 0 1
 465: PPUSH
 466: LD_INT 9
 468: PUSH
 469: LD_INT 8
 471: PUSH
 472: LD_INT 7
 474: PUSH
 475: LD_INT 6
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: PUSH
 484: LD_OWVAR 67
 488: ARRAY
 489: PPUSH
 490: CALL 304 0 2
// for i := 1 to 4 do
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: DOUBLE
 500: LD_INT 1
 502: DEC
 503: ST_TO_ADDR
 504: LD_INT 4
 506: PUSH
 507: FOR_TO
 508: IFFALSE 545
// begin hc_class := class_horse ;
 510: LD_ADDR_OWVAR 28
 514: PUSH
 515: LD_INT 21
 517: ST_TO_ADDR
// hc_gallery :=  ;
 518: LD_ADDR_OWVAR 33
 522: PUSH
 523: LD_STRING 
 525: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 526: CALL_OW 44
 530: PPUSH
 531: LD_VAR 0 2
 535: PPUSH
 536: LD_INT 0
 538: PPUSH
 539: CALL_OW 49
// end ;
 543: GO 507
 545: POP
 546: POP
// for i = 1 to 5 do
 547: LD_ADDR_VAR 0 5
 551: PUSH
 552: DOUBLE
 553: LD_INT 1
 555: DEC
 556: ST_TO_ADDR
 557: LD_INT 5
 559: PUSH
 560: FOR_TO
 561: IFFALSE 615
// begin hc_class = class_tiger ;
 563: LD_ADDR_OWVAR 28
 567: PUSH
 568: LD_INT 14
 570: ST_TO_ADDR
// hc_gallery =  ;
 571: LD_ADDR_OWVAR 33
 575: PUSH
 576: LD_STRING 
 578: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 579: LD_ADDR_OWVAR 35
 583: PUSH
 584: LD_INT 7
 586: NEG
 587: PPUSH
 588: LD_INT 7
 590: PPUSH
 591: CALL_OW 12
 595: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 596: CALL_OW 44
 600: PPUSH
 601: LD_VAR 0 2
 605: PPUSH
 606: LD_INT 0
 608: PPUSH
 609: CALL_OW 49
// end ;
 613: GO 560
 615: POP
 616: POP
// for i := 1 to 4 do
 617: LD_ADDR_VAR 0 5
 621: PUSH
 622: DOUBLE
 623: LD_INT 1
 625: DEC
 626: ST_TO_ADDR
 627: LD_INT 4
 629: PUSH
 630: FOR_TO
 631: IFFALSE 668
// begin hc_class := class_phororhacos ;
 633: LD_ADDR_OWVAR 28
 637: PUSH
 638: LD_INT 18
 640: ST_TO_ADDR
// hc_gallery :=  ;
 641: LD_ADDR_OWVAR 33
 645: PUSH
 646: LD_STRING 
 648: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 649: CALL_OW 44
 653: PPUSH
 654: LD_VAR 0 2
 658: PPUSH
 659: LD_INT 0
 661: PPUSH
 662: CALL_OW 49
// end ;
 666: GO 630
 668: POP
 669: POP
// for i := 1 to 4 do
 670: LD_ADDR_VAR 0 5
 674: PUSH
 675: DOUBLE
 676: LD_INT 1
 678: DEC
 679: ST_TO_ADDR
 680: LD_INT 4
 682: PUSH
 683: FOR_TO
 684: IFFALSE 721
// begin hc_class := class_baggie ;
 686: LD_ADDR_OWVAR 28
 690: PUSH
 691: LD_INT 13
 693: ST_TO_ADDR
// hc_gallery :=  ;
 694: LD_ADDR_OWVAR 33
 698: PUSH
 699: LD_STRING 
 701: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 702: CALL_OW 44
 706: PPUSH
 707: LD_VAR 0 2
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 683
 721: POP
 722: POP
// for i := 1 to 5 do
 723: LD_ADDR_VAR 0 5
 727: PUSH
 728: DOUBLE
 729: LD_INT 1
 731: DEC
 732: ST_TO_ADDR
 733: LD_INT 5
 735: PUSH
 736: FOR_TO
 737: IFFALSE 774
// begin hc_class := class_fish ;
 739: LD_ADDR_OWVAR 28
 743: PUSH
 744: LD_INT 20
 746: ST_TO_ADDR
// hc_gallery :=  ;
 747: LD_ADDR_OWVAR 33
 751: PUSH
 752: LD_STRING 
 754: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , water , false ) ;
 755: CALL_OW 44
 759: PPUSH
 760: LD_VAR 0 3
 764: PPUSH
 765: LD_INT 0
 767: PPUSH
 768: CALL_OW 49
// end ;
 772: GO 736
 774: POP
 775: POP
// end ;
 776: LD_VAR 0 4
 780: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
// if not observer or not unit then
 786: LD_VAR 0 1
 790: NOT
 791: PUSH
 792: LD_VAR 0 2
 796: NOT
 797: OR
 798: IFFALSE 802
// exit ;
 800: GO 850
// if not See ( GetSide ( observer ) , unit ) then
 802: LD_VAR 0 1
 806: PPUSH
 807: CALL_OW 255
 811: PPUSH
 812: LD_VAR 0 2
 816: PPUSH
 817: CALL_OW 292
 821: NOT
 822: IFFALSE 826
// exit ;
 824: GO 850
// result := GetDistUnits ( observer , unit ) < 12 ;
 826: LD_ADDR_VAR 0 3
 830: PUSH
 831: LD_VAR 0 1
 835: PPUSH
 836: LD_VAR 0 2
 840: PPUSH
 841: CALL_OW 296
 845: PUSH
 846: LD_INT 12
 848: LESS
 849: ST_TO_ADDR
// end ;
 850: LD_VAR 0 3
 854: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 855: LD_INT 0
 857: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 858: LD_VAR 0 2
 862: PUSH
 863: LD_INT 1
 865: ARRAY
 866: PPUSH
 867: LD_VAR 0 2
 871: PUSH
 872: LD_INT 2
 874: ARRAY
 875: PPUSH
 876: CALL_OW 488
 880: PUSH
 881: LD_VAR 0 2
 885: PUSH
 886: LD_INT 1
 888: ARRAY
 889: PPUSH
 890: LD_VAR 0 2
 894: PUSH
 895: LD_INT 2
 897: ARRAY
 898: PPUSH
 899: CALL_OW 428
 903: PUSH
 904: LD_INT 0
 906: EQUAL
 907: AND
 908: IFFALSE 942
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 910: LD_VAR 0 1
 914: PPUSH
 915: LD_VAR 0 2
 919: PUSH
 920: LD_INT 1
 922: ARRAY
 923: PPUSH
 924: LD_VAR 0 2
 928: PUSH
 929: LD_INT 2
 931: ARRAY
 932: PPUSH
 933: LD_VAR 0 3
 937: PPUSH
 938: CALL_OW 48
// end ;
 942: LD_VAR 0 4
 946: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
 947: LD_INT 0
 949: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
 950: LD_VAR 0 1
 954: PPUSH
 955: LD_VAR 0 2
 959: PPUSH
 960: LD_VAR 0 3
 964: PPUSH
 965: LD_VAR 0 4
 969: PPUSH
 970: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
 974: LD_VAR 0 1
 978: PPUSH
 979: LD_VAR 0 2
 983: PPUSH
 984: LD_VAR 0 3
 988: PPUSH
 989: CALL_OW 331
// end ;
 993: LD_VAR 0 5
 997: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
 998: LD_INT 0
1000: PPUSH
// if not units then
1001: LD_VAR 0 1
1005: NOT
1006: IFFALSE 1010
// exit ;
1008: GO 1093
// result := true ;
1010: LD_ADDR_VAR 0 4
1014: PUSH
1015: LD_INT 1
1017: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1018: LD_VAR 0 1
1022: PPUSH
1023: LD_INT 26
1025: PUSH
1026: LD_INT 1
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: PPUSH
1033: CALL_OW 72
1037: PUSH
1038: LD_INT 1
1040: ARRAY
1041: PPUSH
1042: LD_VAR 0 2
1046: PPUSH
1047: CALL_OW 88
1051: NOT
1052: IFFALSE 1093
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1054: LD_ADDR_VAR 0 4
1058: PUSH
1059: LD_VAR 0 1
1063: PPUSH
1064: LD_INT 26
1066: PUSH
1067: LD_INT 2
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: PPUSH
1074: CALL_OW 72
1078: PUSH
1079: LD_INT 1
1081: ARRAY
1082: PPUSH
1083: LD_VAR 0 3
1087: PPUSH
1088: CALL_OW 88
1092: ST_TO_ADDR
// end ;
1093: LD_VAR 0 4
1097: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1098: LD_INT 0
1100: PPUSH
1101: PPUSH
// if not group then
1102: LD_VAR 0 2
1106: NOT
1107: IFFALSE 1111
// exit ;
1109: GO 1156
// for i in group do
1111: LD_ADDR_VAR 0 4
1115: PUSH
1116: LD_VAR 0 2
1120: PUSH
1121: FOR_IN
1122: IFFALSE 1154
// if See ( side , i ) then
1124: LD_VAR 0 1
1128: PPUSH
1129: LD_VAR 0 4
1133: PPUSH
1134: CALL_OW 292
1138: IFFALSE 1152
// begin result := true ;
1140: LD_ADDR_VAR 0 3
1144: PUSH
1145: LD_INT 1
1147: ST_TO_ADDR
// exit ;
1148: POP
1149: POP
1150: GO 1156
// end ;
1152: GO 1121
1154: POP
1155: POP
// end ; end_of_file
1156: LD_VAR 0 3
1160: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeApes , heikeVehicles ; export function PrepareArabian ; var i , tmp , counter , hasDrugs ; begin
1161: LD_INT 0
1163: PPUSH
1164: PPUSH
1165: PPUSH
1166: PPUSH
1167: PPUSH
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
1168: LD_ADDR_VAR 0 5
1172: PUSH
1173: LD_STRING 05_DrugsTested
1175: PPUSH
1176: LD_EXP 1
1180: PPUSH
1181: CALL_OW 30
1185: ST_TO_ADDR
// if hasDrugs then
1186: LD_VAR 0 5
1190: IFFALSE 1205
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
1192: LD_INT 5
1194: PPUSH
1195: LD_INT 2
1197: PPUSH
1198: LD_INT 2
1200: PPUSH
1201: CALL_OW 322
// uc_nation := 2 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 2
1212: ST_TO_ADDR
// uc_side := 5 ;
1213: LD_ADDR_OWVAR 20
1217: PUSH
1218: LD_INT 5
1220: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1221: LD_ADDR_EXP 23
1225: PUSH
1226: LD_STRING Abdul
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: LD_STRING 
1234: PPUSH
1235: CALL 15642 0 3
1239: ST_TO_ADDR
// uc_side := 2 ;
1240: LD_ADDR_OWVAR 20
1244: PUSH
1245: LD_INT 2
1247: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1248: LD_ADDR_EXP 15
1252: PUSH
1253: LD_STRING Heike
1255: PPUSH
1256: LD_EXP 1
1260: NOT
1261: PPUSH
1262: LD_EXP 2
1266: PPUSH
1267: CALL 15642 0 3
1271: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1272: LD_ADDR_EXP 18
1276: PUSH
1277: LD_STRING Ibrahim
1279: PPUSH
1280: LD_EXP 1
1284: NOT
1285: PPUSH
1286: LD_EXP 2
1290: PPUSH
1291: CALL 15642 0 3
1295: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1296: LD_ADDR_EXP 16
1300: PUSH
1301: LD_STRING Givi
1303: PPUSH
1304: LD_EXP 1
1308: NOT
1309: PPUSH
1310: LD_EXP 2
1314: PPUSH
1315: CALL 15642 0 3
1319: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1320: LD_ADDR_EXP 19
1324: PUSH
1325: LD_STRING Kamil
1327: PPUSH
1328: LD_EXP 1
1332: NOT
1333: PPUSH
1334: LD_EXP 2
1338: PPUSH
1339: CALL 15642 0 3
1343: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1344: LD_ADDR_EXP 20
1348: PUSH
1349: LD_STRING Kaia
1351: PPUSH
1352: LD_EXP 1
1356: NOT
1357: PPUSH
1358: LD_EXP 2
1362: PPUSH
1363: CALL 15642 0 3
1367: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1368: LD_ADDR_EXP 21
1372: PUSH
1373: LD_STRING Sophia
1375: PPUSH
1376: LD_EXP 1
1380: NOT
1381: PPUSH
1382: LD_EXP 2
1386: PPUSH
1387: CALL 15642 0 3
1391: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1392: LD_ADDR_EXP 22
1396: PUSH
1397: LD_STRING Markov
1399: PPUSH
1400: LD_EXP 1
1404: NOT
1405: PPUSH
1406: LD_EXP 2
1410: PPUSH
1411: CALL 15642 0 3
1415: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1416: LD_ADDR_EXP 26
1420: PUSH
1421: LD_STRING Aviradze
1423: PPUSH
1424: LD_EXP 1
1428: NOT
1429: PPUSH
1430: LD_EXP 2
1434: PPUSH
1435: CALL 15642 0 3
1439: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1440: LD_ADDR_EXP 25
1444: PUSH
1445: LD_STRING Kurt
1447: PPUSH
1448: LD_EXP 1
1452: NOT
1453: PPUSH
1454: LD_EXP 2
1458: PPUSH
1459: CALL 15642 0 3
1463: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1464: LD_ADDR_EXP 17
1468: PUSH
1469: LD_STRING Mike
1471: PPUSH
1472: LD_EXP 1
1476: NOT
1477: PPUSH
1478: LD_EXP 2
1482: PPUSH
1483: CALL 15642 0 3
1487: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1488: LD_ADDR_EXP 24
1492: PUSH
1493: LD_STRING Olaf
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: LD_EXP 2
1506: PPUSH
1507: CALL 15642 0 3
1511: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 06_others ) ;
1512: LD_ADDR_EXP 27
1516: PUSH
1517: LD_STRING 06_others
1519: PPUSH
1520: CALL_OW 31
1524: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 06_apes ) ;
1525: LD_ADDR_EXP 28
1529: PUSH
1530: LD_STRING 06_apes
1532: PPUSH
1533: CALL_OW 31
1537: ST_TO_ADDR
// if debug then
1538: LD_EXP 1
1542: IFFALSE 1815
// begin tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 750 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 900 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 100 , 0 ] ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 50 , 50 ] ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_mortar , 2 , 1000 , 0 ] ] ;
1544: LD_ADDR_VAR 0 3
1548: PUSH
1549: LD_INT 14
1551: PUSH
1552: LD_INT 1
1554: PUSH
1555: LD_INT 2
1557: PUSH
1558: LD_INT 25
1560: PUSH
1561: LD_INT 2
1563: PUSH
1564: LD_INT 1000
1566: PUSH
1567: LD_INT 0
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 14
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 31
1590: PUSH
1591: LD_INT 2
1593: PUSH
1594: LD_INT 1000
1596: PUSH
1597: LD_INT 0
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 14
1611: PUSH
1612: LD_INT 1
1614: PUSH
1615: LD_INT 1
1617: PUSH
1618: LD_INT 27
1620: PUSH
1621: LD_INT 2
1623: PUSH
1624: LD_INT 750
1626: PUSH
1627: LD_INT 0
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: PUSH
1639: LD_INT 14
1641: PUSH
1642: LD_INT 1
1644: PUSH
1645: LD_INT 1
1647: PUSH
1648: LD_INT 27
1650: PUSH
1651: LD_INT 2
1653: PUSH
1654: LD_INT 900
1656: PUSH
1657: LD_INT 0
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: PUSH
1669: LD_INT 14
1671: PUSH
1672: LD_INT 1
1674: PUSH
1675: LD_INT 1
1677: PUSH
1678: LD_INT 32
1680: PUSH
1681: LD_INT 2
1683: PUSH
1684: LD_INT 1000
1686: PUSH
1687: LD_INT 100
1689: PUSH
1690: LD_INT 0
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_INT 14
1708: PUSH
1709: LD_INT 1
1711: PUSH
1712: LD_INT 1
1714: PUSH
1715: LD_INT 32
1717: PUSH
1718: LD_INT 2
1720: PUSH
1721: LD_INT 1000
1723: PUSH
1724: LD_INT 50
1726: PUSH
1727: LD_INT 50
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: PUSH
1743: LD_INT 14
1745: PUSH
1746: LD_INT 1
1748: PUSH
1749: LD_INT 2
1751: PUSH
1752: LD_INT 27
1754: PUSH
1755: LD_INT 2
1757: PUSH
1758: LD_INT 1000
1760: PUSH
1761: LD_INT 0
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: PUSH
1773: LD_INT 14
1775: PUSH
1776: LD_INT 1
1778: PUSH
1779: LD_INT 1
1781: PUSH
1782: LD_INT 92
1784: PUSH
1785: LD_INT 2
1787: PUSH
1788: LD_INT 1000
1790: PUSH
1791: LD_INT 0
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: ST_TO_ADDR
// end else
1813: GO 1822
// tmp := [ ] ;
1815: LD_ADDR_VAR 0 3
1819: PUSH
1820: EMPTY
1821: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 06_Vehicles , tmp ) ;
1822: LD_ADDR_EXP 29
1826: PUSH
1827: LD_STRING 06_Vehicles
1829: PPUSH
1830: LD_VAR 0 3
1834: PPUSH
1835: CALL_OW 30
1839: ST_TO_ADDR
// counter := 0 ;
1840: LD_ADDR_VAR 0 4
1844: PUSH
1845: LD_INT 0
1847: ST_TO_ADDR
// if heikeVehicles then
1848: LD_EXP 29
1852: IFFALSE 1974
// begin for i := heikeVehicles downto 1 do
1854: LD_ADDR_VAR 0 2
1858: PUSH
1859: DOUBLE
1860: LD_EXP 29
1864: INC
1865: ST_TO_ADDR
1866: LD_INT 1
1868: PUSH
1869: FOR_DOWNTO
1870: IFFALSE 1972
// begin if heikeVehicles [ i ] [ 3 ] = control_remote then
1872: LD_EXP 29
1876: PUSH
1877: LD_VAR 0 2
1881: ARRAY
1882: PUSH
1883: LD_INT 3
1885: ARRAY
1886: PUSH
1887: LD_INT 2
1889: EQUAL
1890: IFFALSE 1970
// begin if counter < remoteControlLimit then
1892: LD_VAR 0 4
1896: PUSH
1897: LD_EXP 12
1901: LESS
1902: IFFALSE 1950
// begin counter := Inc ( counter ) ;
1904: LD_ADDR_VAR 0 4
1908: PUSH
1909: LD_VAR 0 4
1913: PPUSH
1914: CALL 54471 0 1
1918: ST_TO_ADDR
// heikeVehicles := Insert ( heikeVehicles , heikeVehicles , heikeVehicles [ i ] ) ;
1919: LD_ADDR_EXP 29
1923: PUSH
1924: LD_EXP 29
1928: PPUSH
1929: LD_EXP 29
1933: PPUSH
1934: LD_EXP 29
1938: PUSH
1939: LD_VAR 0 2
1943: ARRAY
1944: PPUSH
1945: CALL_OW 2
1949: ST_TO_ADDR
// end ; heikeVehicles := Delete ( heikeVehicles , i ) ;
1950: LD_ADDR_EXP 29
1954: PUSH
1955: LD_EXP 29
1959: PPUSH
1960: LD_VAR 0 2
1964: PPUSH
1965: CALL_OW 3
1969: ST_TO_ADDR
// end ; end ;
1970: GO 1869
1972: POP
1973: POP
// end ; end ;
1974: LD_VAR 0 1
1978: RET
// every 0 0$1 trigger scoutActive do var i , tmp ;
1979: LD_EXP 3
1983: IFFALSE 2517
1985: GO 1987
1987: DISABLE
1988: LD_INT 0
1990: PPUSH
1991: PPUSH
// begin tmp := [ [ [ 96 , 50 ] , [ 49 , 52 ] , [ 34 , 55 ] , [ 41 , 70 ] , [ 53 , 96 ] , [ 103 , 64 ] ] , [ [ 104 , 70 ] , [ 111 , 103 ] , [ 131 , 147 ] , [ 130 , 153 ] , [ 110 , 93 ] , [ 103 , 65 ] ] ] ;
1992: LD_ADDR_VAR 0 2
1996: PUSH
1997: LD_INT 96
1999: PUSH
2000: LD_INT 50
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 49
2009: PUSH
2010: LD_INT 52
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: PUSH
2017: LD_INT 34
2019: PUSH
2020: LD_INT 55
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: PUSH
2027: LD_INT 41
2029: PUSH
2030: LD_INT 70
2032: PUSH
2033: EMPTY
2034: LIST
2035: LIST
2036: PUSH
2037: LD_INT 53
2039: PUSH
2040: LD_INT 96
2042: PUSH
2043: EMPTY
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 103
2049: PUSH
2050: LD_INT 64
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: PUSH
2065: LD_INT 104
2067: PUSH
2068: LD_INT 70
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 111
2077: PUSH
2078: LD_INT 103
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: LD_INT 131
2087: PUSH
2088: LD_INT 147
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: PUSH
2095: LD_INT 130
2097: PUSH
2098: LD_INT 153
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: PUSH
2105: LD_INT 110
2107: PUSH
2108: LD_INT 93
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: PUSH
2115: LD_INT 103
2117: PUSH
2118: LD_INT 65
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: ST_TO_ADDR
// for i in tmp [ 1 ] do
2137: LD_ADDR_VAR 0 1
2141: PUSH
2142: LD_VAR 0 2
2146: PUSH
2147: LD_INT 1
2149: ARRAY
2150: PUSH
2151: FOR_IN
2152: IFFALSE 2204
// begin AddComAgressiveMove ( Mike , i [ 1 ] , i [ 2 ] ) ;
2154: LD_EXP 17
2158: PPUSH
2159: LD_VAR 0 1
2163: PUSH
2164: LD_INT 1
2166: ARRAY
2167: PPUSH
2168: LD_VAR 0 1
2172: PUSH
2173: LD_INT 2
2175: ARRAY
2176: PPUSH
2177: CALL_OW 174
// AddComHold ( Mike ) ;
2181: LD_EXP 17
2185: PPUSH
2186: CALL_OW 200
// AddComWait ( Mike , 0 0$5 ) ;
2190: LD_EXP 17
2194: PPUSH
2195: LD_INT 175
2197: PPUSH
2198: CALL_OW 202
// end ;
2202: GO 2151
2204: POP
2205: POP
// for i in tmp [ 2 ] do
2206: LD_ADDR_VAR 0 1
2210: PUSH
2211: LD_VAR 0 2
2215: PUSH
2216: LD_INT 2
2218: ARRAY
2219: PUSH
2220: FOR_IN
2221: IFFALSE 2273
// begin AddComAgressiveMove ( Kurt , i [ 1 ] , i [ 2 ] ) ;
2223: LD_EXP 25
2227: PPUSH
2228: LD_VAR 0 1
2232: PUSH
2233: LD_INT 1
2235: ARRAY
2236: PPUSH
2237: LD_VAR 0 1
2241: PUSH
2242: LD_INT 2
2244: ARRAY
2245: PPUSH
2246: CALL_OW 174
// AddComHold ( Kurt ) ;
2250: LD_EXP 25
2254: PPUSH
2255: CALL_OW 200
// AddComWait ( Kurt , 0 0$5 ) ;
2259: LD_EXP 25
2263: PPUSH
2264: LD_INT 175
2266: PPUSH
2267: CALL_OW 202
// end ;
2271: GO 2220
2273: POP
2274: POP
// wait ( 2 2$00 ) ;
2275: LD_INT 4200
2277: PPUSH
2278: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2282: LD_INT 35
2284: PPUSH
2285: CALL_OW 67
// until ( not HasTask ( Mike ) or IsDead ( Mike ) ) and ( not HasTask ( Kurt ) or IsDead ( Kurt ) ) ;
2289: LD_EXP 17
2293: PPUSH
2294: CALL_OW 314
2298: NOT
2299: PUSH
2300: LD_EXP 17
2304: PPUSH
2305: CALL_OW 301
2309: OR
2310: PUSH
2311: LD_EXP 25
2315: PPUSH
2316: CALL_OW 314
2320: NOT
2321: PUSH
2322: LD_EXP 25
2326: PPUSH
2327: CALL_OW 301
2331: OR
2332: AND
2333: IFFALSE 2282
// if IsDead ( Kurt ) and IsDead ( Mike ) then
2335: LD_EXP 25
2339: PPUSH
2340: CALL_OW 301
2344: PUSH
2345: LD_EXP 17
2349: PPUSH
2350: CALL_OW 301
2354: AND
2355: IFFALSE 2367
// begin scoutFailed := true ;
2357: LD_ADDR_EXP 4
2361: PUSH
2362: LD_INT 1
2364: ST_TO_ADDR
// exit ;
2365: GO 2517
// end ; ComMoveXY ( [ Kurt , Mike ] , 132 , 52 ) ;
2367: LD_EXP 25
2371: PUSH
2372: LD_EXP 17
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: PPUSH
2381: LD_INT 132
2383: PPUSH
2384: LD_INT 52
2386: PPUSH
2387: CALL_OW 111
// AddComMoveUnit ( [ Kurt , Mike ] , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
2391: LD_EXP 25
2395: PUSH
2396: LD_EXP 17
2400: PUSH
2401: EMPTY
2402: LIST
2403: LIST
2404: PPUSH
2405: LD_INT 22
2407: PUSH
2408: LD_INT 2
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: PPUSH
2415: CALL_OW 69
2419: PUSH
2420: LD_INT 1
2422: ARRAY
2423: PPUSH
2424: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
2428: LD_INT 35
2430: PPUSH
2431: CALL_OW 67
// until See ( 2 , Kurt ) or See ( 2 , Mike ) ;
2435: LD_INT 2
2437: PPUSH
2438: LD_EXP 25
2442: PPUSH
2443: CALL_OW 292
2447: PUSH
2448: LD_INT 2
2450: PPUSH
2451: LD_EXP 17
2455: PPUSH
2456: CALL_OW 292
2460: OR
2461: IFFALSE 2428
// if IsLive ( Kurt ) then
2463: LD_EXP 25
2467: PPUSH
2468: CALL_OW 300
2472: IFFALSE 2486
// SetSide ( Kurt , 2 ) ;
2474: LD_EXP 25
2478: PPUSH
2479: LD_INT 2
2481: PPUSH
2482: CALL_OW 235
// if IsLive ( Mike ) then
2486: LD_EXP 17
2490: PPUSH
2491: CALL_OW 300
2495: IFFALSE 2509
// SetSide ( Mike , 2 ) ;
2497: LD_EXP 17
2501: PPUSH
2502: LD_INT 2
2504: PPUSH
2505: CALL_OW 235
// scoutSuccess := true ;
2509: LD_ADDR_EXP 5
2513: PUSH
2514: LD_INT 1
2516: ST_TO_ADDR
// end ; end_of_file
2517: PPOPN 2
2519: END
// export usCommander , usForces , usCargo , usToBuild , usAdditionalForces ; export function PrepareAmerican ; var i , b , veh ; begin
2520: LD_INT 0
2522: PPUSH
2523: PPUSH
2524: PPUSH
2525: PPUSH
// uc_side := 1 ;
2526: LD_ADDR_OWVAR 20
2530: PUSH
2531: LD_INT 1
2533: ST_TO_ADDR
// uc_nation := 1 ;
2534: LD_ADDR_OWVAR 21
2538: PUSH
2539: LD_INT 1
2541: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 1500 , 2200 , 3500 , 3900 ] [ Difficulty ] ) ;
2542: LD_INT 1
2544: PPUSH
2545: CALL_OW 274
2549: PPUSH
2550: LD_INT 1
2552: PPUSH
2553: LD_INT 1500
2555: PUSH
2556: LD_INT 2200
2558: PUSH
2559: LD_INT 3500
2561: PUSH
2562: LD_INT 3900
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: PUSH
2571: LD_OWVAR 67
2575: ARRAY
2576: PPUSH
2577: CALL_OW 277
// SetResourceType ( GetBase ( usDepot ) , mat_oil , 800 ) ;
2581: LD_INT 1
2583: PPUSH
2584: CALL_OW 274
2588: PPUSH
2589: LD_INT 2
2591: PPUSH
2592: LD_INT 800
2594: PPUSH
2595: CALL_OW 277
// usForces := [ ] ;
2599: LD_ADDR_EXP 31
2603: PUSH
2604: EMPTY
2605: ST_TO_ADDR
// usToBuild := [ ] ;
2606: LD_ADDR_EXP 33
2610: PUSH
2611: EMPTY
2612: ST_TO_ADDR
// usAdditionalForces := [ ] ;
2613: LD_ADDR_EXP 34
2617: PUSH
2618: EMPTY
2619: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2620: LD_ADDR_VAR 0 2
2624: PUSH
2625: LD_INT 21
2627: PUSH
2628: LD_INT 3
2630: PUSH
2631: EMPTY
2632: LIST
2633: LIST
2634: PPUSH
2635: CALL_OW 69
2639: PUSH
2640: FOR_IN
2641: IFFALSE 2678
// SetBLevel ( i , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
2643: LD_VAR 0 2
2647: PPUSH
2648: LD_INT 6
2650: PUSH
2651: LD_INT 7
2653: PUSH
2654: LD_INT 8
2656: PUSH
2657: LD_INT 8
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: LIST
2664: LIST
2665: PUSH
2666: LD_OWVAR 67
2670: ARRAY
2671: PPUSH
2672: CALL_OW 241
2676: GO 2640
2678: POP
2679: POP
// for i in FilterAllUnits ( [ f_btype , b_bunker ] ) do
2680: LD_ADDR_VAR 0 2
2684: PUSH
2685: LD_INT 30
2687: PUSH
2688: LD_INT 32
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: PPUSH
2695: CALL_OW 69
2699: PUSH
2700: FOR_IN
2701: IFFALSE 2791
// begin if GetBWeapon ( i ) = us_radar then
2703: LD_VAR 0 2
2707: PPUSH
2708: CALL_OW 269
2712: PUSH
2713: LD_INT 11
2715: EQUAL
2716: IFFALSE 2741
// begin uc_nation := 0 ;
2718: LD_ADDR_OWVAR 21
2722: PUSH
2723: LD_INT 0
2725: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 2 ) ;
2726: LD_INT 0
2728: PPUSH
2729: LD_INT 16
2731: PPUSH
2732: LD_INT 2
2734: PPUSH
2735: CALL_OW 380
// end else
2739: GO 2775
// PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2741: LD_INT 0
2743: PPUSH
2744: LD_INT 1
2746: PPUSH
2747: LD_INT 5
2749: PUSH
2750: LD_INT 6
2752: PUSH
2753: LD_INT 7
2755: PUSH
2756: LD_INT 8
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: LIST
2763: LIST
2764: PUSH
2765: LD_OWVAR 67
2769: ARRAY
2770: PPUSH
2771: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2775: CALL_OW 44
2779: PPUSH
2780: LD_VAR 0 2
2784: PPUSH
2785: CALL_OW 52
// end ;
2789: GO 2700
2791: POP
2792: POP
// b := HexInfo ( 74 , 120 ) ;
2793: LD_ADDR_VAR 0 3
2797: PUSH
2798: LD_INT 74
2800: PPUSH
2801: LD_INT 120
2803: PPUSH
2804: CALL_OW 428
2808: ST_TO_ADDR
// uc_nation := 1 ;
2809: LD_ADDR_OWVAR 21
2813: PUSH
2814: LD_INT 1
2816: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
2817: LD_ADDR_VAR 0 2
2821: PUSH
2822: DOUBLE
2823: LD_INT 1
2825: DEC
2826: ST_TO_ADDR
2827: LD_INT 1
2829: PUSH
2830: LD_INT 2
2832: PUSH
2833: LD_INT 3
2835: PUSH
2836: LD_INT 4
2838: PUSH
2839: EMPTY
2840: LIST
2841: LIST
2842: LIST
2843: LIST
2844: PUSH
2845: LD_OWVAR 67
2849: ARRAY
2850: PUSH
2851: FOR_TO
2852: IFFALSE 2904
// begin PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2854: LD_INT 0
2856: PPUSH
2857: LD_INT 1
2859: PPUSH
2860: LD_INT 5
2862: PUSH
2863: LD_INT 6
2865: PUSH
2866: LD_INT 7
2868: PUSH
2869: LD_INT 8
2871: PUSH
2872: EMPTY
2873: LIST
2874: LIST
2875: LIST
2876: LIST
2877: PUSH
2878: LD_OWVAR 67
2882: ARRAY
2883: PPUSH
2884: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b ) ;
2888: CALL_OW 44
2892: PPUSH
2893: LD_VAR 0 3
2897: PPUSH
2898: CALL_OW 52
// end ;
2902: GO 2851
2904: POP
2905: POP
// SetClass ( UnitsInside ( b ) , class_sniper ) ;
2906: LD_VAR 0 3
2910: PPUSH
2911: CALL_OW 313
2915: PPUSH
2916: LD_INT 5
2918: PPUSH
2919: CALL_OW 336
// for i := 1 to 6 do
2923: LD_ADDR_VAR 0 2
2927: PUSH
2928: DOUBLE
2929: LD_INT 1
2931: DEC
2932: ST_TO_ADDR
2933: LD_INT 6
2935: PUSH
2936: FOR_TO
2937: IFFALSE 2987
// begin PrepareHuman ( false , 4 , 6 ) ;
2939: LD_INT 0
2941: PPUSH
2942: LD_INT 4
2944: PPUSH
2945: LD_INT 6
2947: PPUSH
2948: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ amLab1 , amLab2 ] [ i mod 2 + 1 ] ) ;
2952: CALL_OW 44
2956: PPUSH
2957: LD_INT 32
2959: PUSH
2960: LD_INT 33
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PUSH
2967: LD_VAR 0 2
2971: PUSH
2972: LD_INT 2
2974: MOD
2975: PUSH
2976: LD_INT 1
2978: PLUS
2979: ARRAY
2980: PPUSH
2981: CALL_OW 52
// end ;
2985: GO 2936
2987: POP
2988: POP
// for i := 1 to 3 do
2989: LD_ADDR_VAR 0 2
2993: PUSH
2994: DOUBLE
2995: LD_INT 1
2997: DEC
2998: ST_TO_ADDR
2999: LD_INT 3
3001: PUSH
3002: FOR_TO
3003: IFFALSE 3032
// begin PrepareHuman ( false , 3 , 6 ) ;
3005: LD_INT 0
3007: PPUSH
3008: LD_INT 3
3010: PPUSH
3011: LD_INT 6
3013: PPUSH
3014: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , amFac ) ;
3018: CALL_OW 44
3022: PPUSH
3023: LD_INT 25
3025: PPUSH
3026: CALL_OW 52
// end ;
3030: GO 3002
3032: POP
3033: POP
// for i := 1 to 3 do
3034: LD_ADDR_VAR 0 2
3038: PUSH
3039: DOUBLE
3040: LD_INT 1
3042: DEC
3043: ST_TO_ADDR
3044: LD_INT 3
3046: PUSH
3047: FOR_TO
3048: IFFALSE 3106
// begin PrepareHuman ( false , 3 , [ 6 , 7 , 7 , 7 ] [ Difficulty ] ) ;
3050: LD_INT 0
3052: PPUSH
3053: LD_INT 3
3055: PPUSH
3056: LD_INT 6
3058: PUSH
3059: LD_INT 7
3061: PUSH
3062: LD_INT 7
3064: PUSH
3065: LD_INT 7
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: PUSH
3074: LD_OWVAR 67
3078: ARRAY
3079: PPUSH
3080: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 78 , 130 ) ) ;
3084: CALL_OW 44
3088: PPUSH
3089: LD_INT 78
3091: PPUSH
3092: LD_INT 130
3094: PPUSH
3095: CALL_OW 428
3099: PPUSH
3100: CALL_OW 52
// end ;
3104: GO 3047
3106: POP
3107: POP
// for i := 1 to [ 1 , 2 , 3 , 3 ] [ Difficulty ] do
3108: LD_ADDR_VAR 0 2
3112: PUSH
3113: DOUBLE
3114: LD_INT 1
3116: DEC
3117: ST_TO_ADDR
3118: LD_INT 1
3120: PUSH
3121: LD_INT 2
3123: PUSH
3124: LD_INT 3
3126: PUSH
3127: LD_INT 3
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: PUSH
3136: LD_OWVAR 67
3140: ARRAY
3141: PUSH
3142: FOR_TO
3143: IFFALSE 3230
// begin PrepareVehicle ( us_medium_wheeled , engine_solar , control_manual , us_crane , 100 ) ;
3145: LD_INT 2
3147: PPUSH
3148: LD_INT 2
3150: PPUSH
3151: LD_INT 1
3153: PPUSH
3154: LD_INT 13
3156: PPUSH
3157: LD_INT 100
3159: PPUSH
3160: CALL 20657 0 5
// veh := CreateVehicle ;
3164: LD_ADDR_VAR 0 4
3168: PUSH
3169: CALL_OW 45
3173: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3174: LD_VAR 0 4
3178: PPUSH
3179: LD_INT 3
3181: PPUSH
3182: CALL_OW 233
// PlaceUnitArea ( veh , usCraneArea , false ) ;
3186: LD_VAR 0 4
3190: PPUSH
3191: LD_INT 9
3193: PPUSH
3194: LD_INT 0
3196: PPUSH
3197: CALL_OW 49
// PrepareHuman ( false , 3 , 6 ) ;
3201: LD_INT 0
3203: PPUSH
3204: LD_INT 3
3206: PPUSH
3207: LD_INT 6
3209: PPUSH
3210: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3214: CALL_OW 44
3218: PPUSH
3219: LD_VAR 0 4
3223: PPUSH
3224: CALL_OW 52
// end ;
3228: GO 3142
3230: POP
3231: POP
// InitHc ;
3232: CALL_OW 19
// hc_gallery := us ;
3236: LD_ADDR_OWVAR 33
3240: PUSH
3241: LD_STRING us
3243: ST_TO_ADDR
// hc_face_number := 26 ;
3244: LD_ADDR_OWVAR 34
3248: PUSH
3249: LD_INT 26
3251: ST_TO_ADDR
// hc_name := Doug Callahan ;
3252: LD_ADDR_OWVAR 26
3256: PUSH
3257: LD_STRING Doug Callahan
3259: ST_TO_ADDR
// hc_class := class_engineer ;
3260: LD_ADDR_OWVAR 28
3264: PUSH
3265: LD_INT 2
3267: ST_TO_ADDR
// hc_sex := sex_male ;
3268: LD_ADDR_OWVAR 27
3272: PUSH
3273: LD_INT 1
3275: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
3276: LD_ADDR_OWVAR 29
3280: PUSH
3281: LD_INT 10
3283: PUSH
3284: LD_INT 11
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
3291: LD_ADDR_OWVAR 30
3295: PUSH
3296: LD_INT 2
3298: PUSH
3299: LD_INT 1
3301: PUSH
3302: LD_INT 0
3304: PUSH
3305: LD_INT 0
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: LIST
3312: LIST
3313: ST_TO_ADDR
// hc_skills := [ 4 , 6 , 3 , 1 ] ;
3314: LD_ADDR_OWVAR 31
3318: PUSH
3319: LD_INT 4
3321: PUSH
3322: LD_INT 6
3324: PUSH
3325: LD_INT 3
3327: PUSH
3328: LD_INT 1
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: LIST
3335: LIST
3336: ST_TO_ADDR
// usCommander := CreateHuman ;
3337: LD_ADDR_EXP 30
3341: PUSH
3342: CALL_OW 44
3346: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
3347: LD_EXP 30
3351: PPUSH
3352: LD_INT 1
3354: PPUSH
3355: CALL_OW 52
// DoNotAttack ( 2 , usCommander ) ;
3359: LD_INT 2
3361: PPUSH
3362: LD_EXP 30
3366: PPUSH
3367: CALL_OW 471
// InitHC_All ( ) ;
3371: CALL_OW 584
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay , 100 ) ;
3375: LD_INT 2
3377: PPUSH
3378: LD_INT 1
3380: PPUSH
3381: LD_INT 2
3383: PPUSH
3384: LD_INT 12
3386: PPUSH
3387: LD_INT 100
3389: PPUSH
3390: CALL 20657 0 5
// usCargo := CreateVehicle ;
3394: LD_ADDR_EXP 32
3398: PUSH
3399: CALL_OW 45
3403: ST_TO_ADDR
// PlaceUnitXY ( usCargo , 81 , 143 , false ) ;
3404: LD_EXP 32
3408: PPUSH
3409: LD_INT 81
3411: PPUSH
3412: LD_INT 143
3414: PPUSH
3415: LD_INT 0
3417: PPUSH
3418: CALL_OW 48
// Connect ( usCargo ) ;
3422: LD_EXP 32
3426: PPUSH
3427: CALL 23748 0 1
// DoNotAttack ( 5 , usCargo ) ;
3431: LD_INT 5
3433: PPUSH
3434: LD_EXP 32
3438: PPUSH
3439: CALL_OW 471
// end ;
3443: LD_VAR 0 1
3447: RET
// every 6 6$00 trigger not usForces and usAttacksAllowed and IsOk ( amFac ) and BuildingStatus ( amFac ) = bs_idle do var i , chassis , weapon ;
3448: LD_EXP 31
3452: NOT
3453: PUSH
3454: LD_EXP 6
3458: AND
3459: PUSH
3460: LD_INT 25
3462: PPUSH
3463: CALL_OW 302
3467: AND
3468: PUSH
3469: LD_INT 25
3471: PPUSH
3472: CALL_OW 461
3476: PUSH
3477: LD_INT 2
3479: EQUAL
3480: AND
3481: IFFALSE 3638
3483: GO 3485
3485: DISABLE
3486: LD_INT 0
3488: PPUSH
3489: PPUSH
3490: PPUSH
// begin enable ;
3491: ENABLE
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
3492: LD_ADDR_VAR 0 1
3496: PUSH
3497: DOUBLE
3498: LD_INT 1
3500: DEC
3501: ST_TO_ADDR
3502: LD_INT 4
3504: PUSH
3505: LD_INT 5
3507: PUSH
3508: LD_INT 6
3510: PUSH
3511: LD_INT 6
3513: PUSH
3514: EMPTY
3515: LIST
3516: LIST
3517: LIST
3518: LIST
3519: PUSH
3520: LD_OWVAR 67
3524: ARRAY
3525: PUSH
3526: FOR_TO
3527: IFFALSE 3636
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3529: LD_ADDR_VAR 0 2
3533: PUSH
3534: LD_INT 2
3536: PUSH
3537: LD_INT 3
3539: PUSH
3540: LD_INT 4
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: LIST
3547: PUSH
3548: LD_INT 1
3550: PPUSH
3551: LD_INT 3
3553: PPUSH
3554: CALL_OW 12
3558: ARRAY
3559: ST_TO_ADDR
// if chassis = us_heavy_tracked then
3560: LD_VAR 0 2
3564: PUSH
3565: LD_INT 4
3567: EQUAL
3568: IFFALSE 3580
// weapon := us_heavy_gun else
3570: LD_ADDR_VAR 0 3
3574: PUSH
3575: LD_INT 6
3577: ST_TO_ADDR
3578: GO 3611
// weapon := [ us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3580: LD_ADDR_VAR 0 3
3584: PUSH
3585: LD_INT 5
3587: PUSH
3588: LD_INT 7
3590: PUSH
3591: LD_INT 4
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: LIST
3598: PUSH
3599: LD_INT 1
3601: PPUSH
3602: LD_INT 3
3604: PPUSH
3605: CALL_OW 12
3609: ARRAY
3610: ST_TO_ADDR
// AddComConstruct ( amFac , chassis , engine_combustion , control_remote , weapon ) ;
3611: LD_INT 25
3613: PPUSH
3614: LD_VAR 0 2
3618: PPUSH
3619: LD_INT 1
3621: PPUSH
3622: LD_INT 2
3624: PPUSH
3625: LD_VAR 0 3
3629: PPUSH
3630: CALL_OW 185
// end ;
3634: GO 3526
3636: POP
3637: POP
// end ;
3638: PPOPN 3
3640: END
// every 0 0$10 trigger usForces >= [ 4 , 5 , 6 , 6 ] [ Difficulty ] do var i , tmp ;
3641: LD_EXP 31
3645: PUSH
3646: LD_INT 4
3648: PUSH
3649: LD_INT 5
3651: PUSH
3652: LD_INT 6
3654: PUSH
3655: LD_INT 6
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: PUSH
3664: LD_OWVAR 67
3668: ARRAY
3669: GREATEREQUAL
3670: IFFALSE 3781
3672: GO 3674
3674: DISABLE
3675: LD_INT 0
3677: PPUSH
3678: PPUSH
// begin enable ;
3679: ENABLE
// tmp := usForces ;
3680: LD_ADDR_VAR 0 2
3684: PUSH
3685: LD_EXP 31
3689: ST_TO_ADDR
// usForces := [ ] ;
3690: LD_ADDR_EXP 31
3694: PUSH
3695: EMPTY
3696: ST_TO_ADDR
// if not tmp then
3697: LD_VAR 0 2
3701: NOT
3702: IFFALSE 3706
// exit ;
3704: GO 3781
// repeat wait ( 0 0$1 ) ;
3706: LD_INT 35
3708: PPUSH
3709: CALL_OW 67
// tmp := AgressiveMove ( tmp , [ [ 98 , 50 ] , [ 114 , 50 ] , [ 127 , 51 ] , [ 131 , 35 ] ] ) ;
3713: LD_ADDR_VAR 0 2
3717: PUSH
3718: LD_VAR 0 2
3722: PPUSH
3723: LD_INT 98
3725: PUSH
3726: LD_INT 50
3728: PUSH
3729: EMPTY
3730: LIST
3731: LIST
3732: PUSH
3733: LD_INT 114
3735: PUSH
3736: LD_INT 50
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: PUSH
3743: LD_INT 127
3745: PUSH
3746: LD_INT 51
3748: PUSH
3749: EMPTY
3750: LIST
3751: LIST
3752: PUSH
3753: LD_INT 131
3755: PUSH
3756: LD_INT 35
3758: PUSH
3759: EMPTY
3760: LIST
3761: LIST
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: PPUSH
3769: CALL 55714 0 2
3773: ST_TO_ADDR
// until not tmp ;
3774: LD_VAR 0 2
3778: NOT
3779: IFFALSE 3706
// end ;
3781: PPOPN 2
3783: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( southScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3784: LD_EXP 3
3788: PUSH
3789: LD_EXP 5
3793: NOT
3794: AND
3795: PUSH
3796: LD_INT 11
3798: PPUSH
3799: LD_INT 22
3801: PUSH
3802: LD_INT 2
3804: PUSH
3805: EMPTY
3806: LIST
3807: LIST
3808: PPUSH
3809: CALL_OW 70
3813: AND
3814: IFFALSE 3935
3816: GO 3818
3818: DISABLE
3819: LD_INT 0
3821: PPUSH
3822: PPUSH
3823: PPUSH
// begin uc_side := 1 ;
3824: LD_ADDR_OWVAR 20
3828: PUSH
3829: LD_INT 1
3831: ST_TO_ADDR
// uc_nation := 1 ;
3832: LD_ADDR_OWVAR 21
3836: PUSH
3837: LD_INT 1
3839: ST_TO_ADDR
// tmp := [ ] ;
3840: LD_ADDR_VAR 0 3
3844: PUSH
3845: EMPTY
3846: ST_TO_ADDR
// for i := 1 to 2 do
3847: LD_ADDR_VAR 0 1
3851: PUSH
3852: DOUBLE
3853: LD_INT 1
3855: DEC
3856: ST_TO_ADDR
3857: LD_INT 2
3859: PUSH
3860: FOR_TO
3861: IFFALSE 3933
// begin PrepareSoldier ( false , 7 ) ;
3863: LD_INT 0
3865: PPUSH
3866: LD_INT 7
3868: PPUSH
3869: CALL_OW 381
// un := CreateHuman ;
3873: LD_ADDR_VAR 0 2
3877: PUSH
3878: CALL_OW 44
3882: ST_TO_ADDR
// PlaceUnitXYR ( un , 130 , 153 , 3 , false ) ;
3883: LD_VAR 0 2
3887: PPUSH
3888: LD_INT 130
3890: PPUSH
3891: LD_INT 153
3893: PPUSH
3894: LD_INT 3
3896: PPUSH
3897: LD_INT 0
3899: PPUSH
3900: CALL_OW 50
// SetClass ( un , class_sniper ) ;
3904: LD_VAR 0 2
3908: PPUSH
3909: LD_INT 5
3911: PPUSH
3912: CALL_OW 336
// AddComAgressiveMove ( un , 108 , 108 ) ;
3916: LD_VAR 0 2
3920: PPUSH
3921: LD_INT 108
3923: PPUSH
3924: LD_INT 108
3926: PPUSH
3927: CALL_OW 174
// end ;
3931: GO 3860
3933: POP
3934: POP
// end ;
3935: PPOPN 3
3937: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( northScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3938: LD_EXP 3
3942: PUSH
3943: LD_EXP 5
3947: NOT
3948: AND
3949: PUSH
3950: LD_INT 10
3952: PPUSH
3953: LD_INT 22
3955: PUSH
3956: LD_INT 2
3958: PUSH
3959: EMPTY
3960: LIST
3961: LIST
3962: PPUSH
3963: CALL_OW 70
3967: AND
3968: IFFALSE 4089
3970: GO 3972
3972: DISABLE
3973: LD_INT 0
3975: PPUSH
3976: PPUSH
3977: PPUSH
// begin uc_side := 1 ;
3978: LD_ADDR_OWVAR 20
3982: PUSH
3983: LD_INT 1
3985: ST_TO_ADDR
// uc_nation := 1 ;
3986: LD_ADDR_OWVAR 21
3990: PUSH
3991: LD_INT 1
3993: ST_TO_ADDR
// tmp := [ ] ;
3994: LD_ADDR_VAR 0 3
3998: PUSH
3999: EMPTY
4000: ST_TO_ADDR
// for i := 1 to 2 do
4001: LD_ADDR_VAR 0 1
4005: PUSH
4006: DOUBLE
4007: LD_INT 1
4009: DEC
4010: ST_TO_ADDR
4011: LD_INT 2
4013: PUSH
4014: FOR_TO
4015: IFFALSE 4087
// begin PrepareSoldier ( false , 7 ) ;
4017: LD_INT 0
4019: PPUSH
4020: LD_INT 7
4022: PPUSH
4023: CALL_OW 381
// un := CreateHuman ;
4027: LD_ADDR_VAR 0 2
4031: PUSH
4032: CALL_OW 44
4036: ST_TO_ADDR
// PlaceUnitXYR ( un , 56 , 101 , 3 , false ) ;
4037: LD_VAR 0 2
4041: PPUSH
4042: LD_INT 56
4044: PPUSH
4045: LD_INT 101
4047: PPUSH
4048: LD_INT 3
4050: PPUSH
4051: LD_INT 0
4053: PPUSH
4054: CALL_OW 50
// SetClass ( un , class_sniper ) ;
4058: LD_VAR 0 2
4062: PPUSH
4063: LD_INT 5
4065: PPUSH
4066: CALL_OW 336
// AddComAgressiveMove ( un , 72 , 92 ) ;
4070: LD_VAR 0 2
4074: PPUSH
4075: LD_INT 72
4077: PPUSH
4078: LD_INT 92
4080: PPUSH
4081: CALL_OW 174
// end ;
4085: GO 4014
4087: POP
4088: POP
// end ;
4089: PPOPN 3
4091: END
// every 0 0$2 trigger IsOk ( usCargo ) and not usSurrender do var cr , enemyInArea ;
4092: LD_EXP 32
4096: PPUSH
4097: CALL_OW 302
4101: PUSH
4102: LD_EXP 7
4106: NOT
4107: AND
4108: IFFALSE 4371
4110: GO 4112
4112: DISABLE
4113: LD_INT 0
4115: PPUSH
4116: PPUSH
// begin enable ;
4117: ENABLE
// enemyInArea := FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4118: LD_ADDR_VAR 0 2
4122: PUSH
4123: LD_INT 16
4125: PPUSH
4126: LD_INT 81
4128: PUSH
4129: LD_INT 1
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PUSH
4136: LD_INT 50
4138: PUSH
4139: EMPTY
4140: LIST
4141: PUSH
4142: EMPTY
4143: LIST
4144: LIST
4145: PPUSH
4146: CALL_OW 70
4150: ST_TO_ADDR
// cr := GetListOfCratesInArea ( usCratesArea ) ;
4151: LD_ADDR_VAR 0 1
4155: PUSH
4156: LD_INT 12
4158: PPUSH
4159: CALL_OW 435
4163: ST_TO_ADDR
// if GetFuel ( usCargo ) < 10 and not See ( 2 , usCargo ) then
4164: LD_EXP 32
4168: PPUSH
4169: CALL_OW 261
4173: PUSH
4174: LD_INT 10
4176: LESS
4177: PUSH
4178: LD_INT 2
4180: PPUSH
4181: LD_EXP 32
4185: PPUSH
4186: CALL_OW 292
4190: NOT
4191: AND
4192: IFFALSE 4206
// SetFuel ( usCargo , 100 ) ;
4194: LD_EXP 32
4198: PPUSH
4199: LD_INT 100
4201: PPUSH
4202: CALL_OW 240
// if not HasTask ( usCargo ) and GetCargo ( usCargo , mat_cans ) < 100 and not enemyInArea then
4206: LD_EXP 32
4210: PPUSH
4211: CALL_OW 314
4215: NOT
4216: PUSH
4217: LD_EXP 32
4221: PPUSH
4222: LD_INT 1
4224: PPUSH
4225: CALL_OW 289
4229: PUSH
4230: LD_INT 100
4232: LESS
4233: AND
4234: PUSH
4235: LD_VAR 0 2
4239: NOT
4240: AND
4241: IFFALSE 4307
// begin if cr then
4243: LD_VAR 0 1
4247: IFFALSE 4278
// ComCollect ( usCargo , cr [ 1 ] , cr [ 2 ] ) else
4249: LD_EXP 32
4253: PPUSH
4254: LD_VAR 0 1
4258: PUSH
4259: LD_INT 1
4261: ARRAY
4262: PPUSH
4263: LD_VAR 0 1
4267: PUSH
4268: LD_INT 2
4270: ARRAY
4271: PPUSH
4272: CALL_OW 117
4276: GO 4305
// if not IsInArea ( usCargo , usCratesArea ) then
4278: LD_EXP 32
4282: PPUSH
4283: LD_INT 12
4285: PPUSH
4286: CALL_OW 308
4290: NOT
4291: IFFALSE 4305
// ComMoveToArea ( usCargo , usCratesArea ) ;
4293: LD_EXP 32
4297: PPUSH
4298: LD_INT 12
4300: PPUSH
4301: CALL_OW 113
// exit ;
4305: GO 4371
// end ; if enemyInArea and not IsInArea ( usCargo , americanBaseArea ) then
4307: LD_VAR 0 2
4311: PUSH
4312: LD_EXP 32
4316: PPUSH
4317: LD_INT 16
4319: PPUSH
4320: CALL_OW 308
4324: NOT
4325: AND
4326: IFFALSE 4345
// ComMoveXY ( usCargo , 80 , 143 ) else
4328: LD_EXP 32
4332: PPUSH
4333: LD_INT 80
4335: PPUSH
4336: LD_INT 143
4338: PPUSH
4339: CALL_OW 111
4343: GO 4371
// if GetCargo ( usCargo , mat_cans ) then
4345: LD_EXP 32
4349: PPUSH
4350: LD_INT 1
4352: PPUSH
4353: CALL_OW 289
4357: IFFALSE 4371
// ComGive ( usCargo , usDepot ) ;
4359: LD_EXP 32
4363: PPUSH
4364: LD_INT 1
4366: PPUSH
4367: CALL_OW 161
// end ;
4371: PPOPN 2
4373: END
// every 0 0$3 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) do var i , sci ;
4374: LD_EXP 7
4378: NOT
4379: PUSH
4380: LD_INT 22
4382: PUSH
4383: LD_INT 1
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PUSH
4390: LD_INT 21
4392: PUSH
4393: LD_INT 1
4395: PUSH
4396: EMPTY
4397: LIST
4398: LIST
4399: PUSH
4400: LD_INT 3
4402: PUSH
4403: LD_INT 50
4405: PUSH
4406: EMPTY
4407: LIST
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: LIST
4417: PPUSH
4418: CALL_OW 69
4422: AND
4423: PUSH
4424: LD_INT 22
4426: PUSH
4427: LD_INT 1
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: PUSH
4434: LD_INT 3
4436: PUSH
4437: LD_INT 60
4439: PUSH
4440: EMPTY
4441: LIST
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: PUSH
4447: LD_INT 25
4449: PUSH
4450: LD_INT 4
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: LIST
4461: PPUSH
4462: CALL_OW 69
4466: AND
4467: IFFALSE 4670
4469: GO 4471
4471: DISABLE
4472: LD_INT 0
4474: PPUSH
4475: PPUSH
// begin enable ;
4476: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) do
4477: LD_ADDR_VAR 0 1
4481: PUSH
4482: LD_INT 22
4484: PUSH
4485: LD_INT 1
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: LD_INT 21
4494: PUSH
4495: LD_INT 1
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PUSH
4502: LD_INT 3
4504: PUSH
4505: LD_INT 50
4507: PUSH
4508: EMPTY
4509: LIST
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: LIST
4519: PPUSH
4520: CALL_OW 69
4524: PUSH
4525: FOR_IN
4526: IFFALSE 4668
// begin sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) ;
4528: LD_ADDR_VAR 0 2
4532: PUSH
4533: LD_INT 22
4535: PUSH
4536: LD_INT 1
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: PUSH
4543: LD_INT 3
4545: PUSH
4546: LD_INT 60
4548: PUSH
4549: EMPTY
4550: LIST
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: PUSH
4556: LD_INT 25
4558: PUSH
4559: LD_INT 4
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: LIST
4570: PPUSH
4571: CALL_OW 69
4575: ST_TO_ADDR
// if not sci then
4576: LD_VAR 0 2
4580: NOT
4581: IFFALSE 4585
// break ;
4583: GO 4668
// sci := sci [ 1 ] ;
4585: LD_ADDR_VAR 0 2
4589: PUSH
4590: LD_VAR 0 2
4594: PUSH
4595: LD_INT 1
4597: ARRAY
4598: ST_TO_ADDR
// if IsInUnit ( sci ) then
4599: LD_VAR 0 2
4603: PPUSH
4604: CALL_OW 310
4608: IFFALSE 4621
// ComExit ( sci ) else
4610: LD_VAR 0 2
4614: PPUSH
4615: CALL 53508 0 1
4619: GO 4666
// begin ComHeal ( sci , i ) ;
4621: LD_VAR 0 2
4625: PPUSH
4626: LD_VAR 0 1
4630: PPUSH
4631: CALL_OW 128
// AddComEnterUnit ( sci , [ amLab1 , amLab2 ] [ rand ( 1 , 2 ) ] ) ;
4635: LD_VAR 0 2
4639: PPUSH
4640: LD_INT 32
4642: PUSH
4643: LD_INT 33
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: PUSH
4650: LD_INT 1
4652: PPUSH
4653: LD_INT 2
4655: PPUSH
4656: CALL_OW 12
4660: ARRAY
4661: PPUSH
4662: CALL_OW 180
// end ; end ;
4666: GO 4525
4668: POP
4669: POP
// end ;
4670: PPOPN 2
4672: END
// every 0 0$2 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) do var i , tmp , tmp2 ;
4673: LD_EXP 7
4677: NOT
4678: PUSH
4679: LD_INT 22
4681: PUSH
4682: LD_INT 1
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PUSH
4689: LD_INT 3
4691: PUSH
4692: LD_INT 60
4694: PUSH
4695: EMPTY
4696: LIST
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: PUSH
4702: LD_INT 50
4704: PUSH
4705: EMPTY
4706: LIST
4707: PUSH
4708: LD_INT 34
4710: PUSH
4711: LD_INT 13
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: PPUSH
4724: CALL_OW 69
4728: AND
4729: PUSH
4730: LD_INT 22
4732: PUSH
4733: LD_INT 1
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PUSH
4740: LD_INT 3
4742: PUSH
4743: LD_INT 24
4745: PUSH
4746: LD_INT 1000
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: LD_INT 21
4759: PUSH
4760: LD_INT 3
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PUSH
4767: LD_INT 3
4769: PUSH
4770: LD_INT 30
4772: PUSH
4773: LD_INT 29
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: PUSH
4780: EMPTY
4781: LIST
4782: LIST
4783: PUSH
4784: EMPTY
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: PPUSH
4790: CALL_OW 69
4794: AND
4795: IFFALSE 5064
4797: GO 4799
4799: DISABLE
4800: LD_INT 0
4802: PPUSH
4803: PPUSH
4804: PPUSH
// begin enable ;
4805: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4806: LD_ADDR_VAR 0 2
4810: PUSH
4811: LD_INT 22
4813: PUSH
4814: LD_INT 1
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: PUSH
4821: LD_INT 3
4823: PUSH
4824: LD_INT 24
4826: PUSH
4827: LD_INT 1000
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: LD_INT 21
4840: PUSH
4841: LD_INT 3
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PUSH
4848: LD_INT 3
4850: PUSH
4851: LD_INT 30
4853: PUSH
4854: LD_INT 29
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: PPUSH
4871: CALL_OW 69
4875: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4876: LD_ADDR_VAR 0 3
4880: PUSH
4881: LD_INT 22
4883: PUSH
4884: LD_INT 1
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: LD_INT 3
4893: PUSH
4894: LD_INT 24
4896: PUSH
4897: LD_INT 600
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 21
4910: PUSH
4911: LD_INT 3
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 3
4920: PUSH
4921: LD_INT 30
4923: PUSH
4924: LD_INT 29
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: LIST
4939: LIST
4940: PPUSH
4941: CALL_OW 69
4945: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4946: LD_ADDR_VAR 0 1
4950: PUSH
4951: LD_INT 22
4953: PUSH
4954: LD_INT 1
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: LD_INT 3
4963: PUSH
4964: LD_INT 60
4966: PUSH
4967: EMPTY
4968: LIST
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PUSH
4974: LD_INT 50
4976: PUSH
4977: EMPTY
4978: LIST
4979: PUSH
4980: LD_INT 34
4982: PUSH
4983: LD_INT 13
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: PPUSH
4996: CALL_OW 69
5000: PUSH
5001: FOR_IN
5002: IFFALSE 5062
// begin if tmp2 then
5004: LD_VAR 0 3
5008: IFFALSE 5036
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
5010: LD_VAR 0 1
5014: PPUSH
5015: LD_VAR 0 3
5019: PPUSH
5020: LD_VAR 0 1
5024: PPUSH
5025: CALL_OW 74
5029: PPUSH
5030: CALL_OW 130
5034: GO 5060
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
5036: LD_VAR 0 1
5040: PPUSH
5041: LD_VAR 0 2
5045: PPUSH
5046: LD_VAR 0 1
5050: PPUSH
5051: CALL_OW 74
5055: PPUSH
5056: CALL_OW 130
// end ;
5060: GO 5001
5062: POP
5063: POP
// end ;
5064: PPOPN 3
5066: END
// every 0 0$1 trigger not usSurrender and not FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) and usToBuild and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
5067: LD_EXP 7
5071: NOT
5072: PUSH
5073: LD_INT 16
5075: PPUSH
5076: LD_INT 81
5078: PUSH
5079: LD_INT 1
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: LD_INT 50
5088: PUSH
5089: EMPTY
5090: LIST
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PPUSH
5096: CALL_OW 70
5100: NOT
5101: AND
5102: PUSH
5103: LD_EXP 33
5107: AND
5108: PUSH
5109: LD_INT 22
5111: PUSH
5112: LD_INT 1
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: PUSH
5119: LD_INT 3
5121: PUSH
5122: LD_INT 60
5124: PUSH
5125: EMPTY
5126: LIST
5127: PUSH
5128: EMPTY
5129: LIST
5130: LIST
5131: PUSH
5132: LD_INT 50
5134: PUSH
5135: EMPTY
5136: LIST
5137: PUSH
5138: LD_INT 34
5140: PUSH
5141: LD_INT 13
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: LIST
5152: LIST
5153: PPUSH
5154: CALL_OW 69
5158: AND
5159: IFFALSE 5271
5161: GO 5163
5163: DISABLE
// begin enable ;
5164: ENABLE
// ComCraneBuild ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) , usToBuild [ 1 ] [ 1 ] , usToBuild [ 1 ] [ 2 ] , usToBuild [ 1 ] [ 3 ] , usToBuild [ 1 ] [ 4 ] ) ;
5165: LD_INT 22
5167: PUSH
5168: LD_INT 1
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PUSH
5175: LD_INT 3
5177: PUSH
5178: LD_INT 60
5180: PUSH
5181: EMPTY
5182: LIST
5183: PUSH
5184: EMPTY
5185: LIST
5186: LIST
5187: PUSH
5188: LD_INT 50
5190: PUSH
5191: EMPTY
5192: LIST
5193: PUSH
5194: LD_INT 34
5196: PUSH
5197: LD_INT 13
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: PPUSH
5210: CALL_OW 69
5214: PPUSH
5215: LD_EXP 33
5219: PUSH
5220: LD_INT 1
5222: ARRAY
5223: PUSH
5224: LD_INT 1
5226: ARRAY
5227: PPUSH
5228: LD_EXP 33
5232: PUSH
5233: LD_INT 1
5235: ARRAY
5236: PUSH
5237: LD_INT 2
5239: ARRAY
5240: PPUSH
5241: LD_EXP 33
5245: PUSH
5246: LD_INT 1
5248: ARRAY
5249: PUSH
5250: LD_INT 3
5252: ARRAY
5253: PPUSH
5254: LD_EXP 33
5258: PUSH
5259: LD_INT 1
5261: ARRAY
5262: PUSH
5263: LD_INT 4
5265: ARRAY
5266: PPUSH
5267: CALL_OW 566
// end ;
5271: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) do var i , tmp , btmp , barracks ;
5272: LD_INT 22
5274: PUSH
5275: LD_INT 1
5277: PUSH
5278: EMPTY
5279: LIST
5280: LIST
5281: PUSH
5282: LD_INT 50
5284: PUSH
5285: EMPTY
5286: LIST
5287: PUSH
5288: LD_INT 3
5290: PUSH
5291: LD_INT 54
5293: PUSH
5294: EMPTY
5295: LIST
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: PUSH
5301: LD_INT 2
5303: PUSH
5304: LD_INT 25
5306: PUSH
5307: LD_INT 1
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: PUSH
5314: LD_INT 25
5316: PUSH
5317: LD_INT 5
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: PUSH
5324: LD_INT 25
5326: PUSH
5327: LD_INT 16
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: LIST
5338: LIST
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: PPUSH
5346: CALL_OW 69
5350: IFFALSE 5712
5352: GO 5354
5354: DISABLE
5355: LD_INT 0
5357: PPUSH
5358: PPUSH
5359: PPUSH
5360: PPUSH
// begin enable ;
5361: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) ;
5362: LD_ADDR_VAR 0 2
5366: PUSH
5367: LD_INT 22
5369: PUSH
5370: LD_INT 1
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: PUSH
5377: LD_INT 50
5379: PUSH
5380: EMPTY
5381: LIST
5382: PUSH
5383: LD_INT 3
5385: PUSH
5386: LD_INT 54
5388: PUSH
5389: EMPTY
5390: LIST
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: PUSH
5396: LD_INT 2
5398: PUSH
5399: LD_INT 25
5401: PUSH
5402: LD_INT 1
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: PUSH
5409: LD_INT 25
5411: PUSH
5412: LD_INT 5
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: PUSH
5419: LD_INT 25
5421: PUSH
5422: LD_INT 16
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: PPUSH
5441: CALL_OW 69
5445: ST_TO_ADDR
// btmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
5446: LD_ADDR_VAR 0 3
5450: PUSH
5451: LD_INT 22
5453: PUSH
5454: LD_INT 1
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: PUSH
5461: LD_INT 50
5463: PUSH
5464: EMPTY
5465: LIST
5466: PUSH
5467: LD_INT 21
5469: PUSH
5470: LD_INT 3
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: PUSH
5477: LD_INT 30
5479: PUSH
5480: LD_INT 32
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: PUSH
5487: LD_INT 58
5489: PUSH
5490: EMPTY
5491: LIST
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: LIST
5497: LIST
5498: LIST
5499: PPUSH
5500: CALL_OW 69
5504: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) ;
5505: LD_ADDR_VAR 0 4
5509: PUSH
5510: LD_INT 22
5512: PUSH
5513: LD_INT 1
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: PUSH
5520: LD_INT 50
5522: PUSH
5523: EMPTY
5524: LIST
5525: PUSH
5526: LD_INT 30
5528: PUSH
5529: LD_INT 5
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PUSH
5536: EMPTY
5537: LIST
5538: LIST
5539: LIST
5540: PPUSH
5541: CALL_OW 69
5545: ST_TO_ADDR
// if not tmp then
5546: LD_VAR 0 2
5550: NOT
5551: IFFALSE 5555
// exit ;
5553: GO 5712
// for i in tmp do
5555: LD_ADDR_VAR 0 1
5559: PUSH
5560: LD_VAR 0 2
5564: PUSH
5565: FOR_IN
5566: IFFALSE 5710
// begin btmp := FilterByTag ( btmp , 0 ) ;
5568: LD_ADDR_VAR 0 3
5572: PUSH
5573: LD_VAR 0 3
5577: PPUSH
5578: LD_INT 0
5580: PPUSH
5581: CALL 50691 0 2
5585: ST_TO_ADDR
// if not btmp then
5586: LD_VAR 0 3
5590: NOT
5591: IFFALSE 5636
// begin if GetClass ( i ) <> class_apeman_engineer and barracks then
5593: LD_VAR 0 1
5597: PPUSH
5598: CALL_OW 257
5602: PUSH
5603: LD_INT 16
5605: NONEQUAL
5606: PUSH
5607: LD_VAR 0 4
5611: AND
5612: IFFALSE 5632
// ComEnterUnit ( i , barracks [ 1 ] ) ;
5614: LD_VAR 0 1
5618: PPUSH
5619: LD_VAR 0 4
5623: PUSH
5624: LD_INT 1
5626: ARRAY
5627: PPUSH
5628: CALL_OW 120
// continue ;
5632: GO 5565
// end else
5634: GO 5708
// begin SetTag ( btmp [ 1 ] , 1 ) ;
5636: LD_VAR 0 3
5640: PUSH
5641: LD_INT 1
5643: ARRAY
5644: PPUSH
5645: LD_INT 1
5647: PPUSH
5648: CALL_OW 109
// ComEnterUnit ( i , btmp [ 1 ] ) ;
5652: LD_VAR 0 1
5656: PPUSH
5657: LD_VAR 0 3
5661: PUSH
5662: LD_INT 1
5664: ARRAY
5665: PPUSH
5666: CALL_OW 120
// wait ( 0 0$9 ) ;
5670: LD_INT 315
5672: PPUSH
5673: CALL_OW 67
// if IsEmpty ( btmp [ 1 ] ) then
5677: LD_VAR 0 3
5681: PUSH
5682: LD_INT 1
5684: ARRAY
5685: PPUSH
5686: CALL 17798 0 1
5690: IFFALSE 5708
// SetTag ( btmp [ 1 ] , 0 ) ;
5692: LD_VAR 0 3
5696: PUSH
5697: LD_INT 1
5699: ARRAY
5700: PPUSH
5701: LD_INT 0
5703: PPUSH
5704: CALL_OW 109
// end ; end ;
5708: GO 5565
5710: POP
5711: POP
// end ;
5712: PPOPN 4
5714: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do var i , tmp ;
5715: LD_INT 22
5717: PUSH
5718: LD_INT 1
5720: PUSH
5721: EMPTY
5722: LIST
5723: LIST
5724: PUSH
5725: LD_INT 33
5727: PUSH
5728: LD_INT 2
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: PUSH
5735: LD_INT 50
5737: PUSH
5738: EMPTY
5739: LIST
5740: PUSH
5741: LD_INT 3
5743: PUSH
5744: LD_INT 61
5746: PUSH
5747: EMPTY
5748: LIST
5749: PUSH
5750: EMPTY
5751: LIST
5752: LIST
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: LIST
5758: LIST
5759: PPUSH
5760: CALL_OW 69
5764: IFFALSE 5855
5766: GO 5768
5768: DISABLE
5769: LD_INT 0
5771: PPUSH
5772: PPUSH
// begin enable ;
5773: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
5774: LD_ADDR_VAR 0 2
5778: PUSH
5779: LD_INT 22
5781: PUSH
5782: LD_INT 1
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PUSH
5789: LD_INT 33
5791: PUSH
5792: LD_INT 2
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: PUSH
5799: LD_INT 50
5801: PUSH
5802: EMPTY
5803: LIST
5804: PUSH
5805: LD_INT 3
5807: PUSH
5808: LD_INT 61
5810: PUSH
5811: EMPTY
5812: LIST
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: LIST
5822: LIST
5823: PPUSH
5824: CALL_OW 69
5828: ST_TO_ADDR
// for i in tmp do
5829: LD_ADDR_VAR 0 1
5833: PUSH
5834: LD_VAR 0 2
5838: PUSH
5839: FOR_IN
5840: IFFALSE 5853
// Connect ( i ) ;
5842: LD_VAR 0 1
5846: PPUSH
5847: CALL 23748 0 1
5851: GO 5839
5853: POP
5854: POP
// end ;
5855: PPOPN 2
5857: END
// every 1 1$00 trigger usAttacksAllowed and Difficulty > 1 do var i , un , veh , chassis , weapon ;
5858: LD_EXP 6
5862: PUSH
5863: LD_OWVAR 67
5867: PUSH
5868: LD_INT 1
5870: GREATER
5871: AND
5872: IFFALSE 6314
5874: GO 5876
5876: DISABLE
5877: LD_INT 0
5879: PPUSH
5880: PPUSH
5881: PPUSH
5882: PPUSH
5883: PPUSH
// begin wait ( [ 15 15$00 , 15 15$00 , 14 14$00 , 13 13$00 ] [ Difficulty ] ) ;
5884: LD_INT 31500
5886: PUSH
5887: LD_INT 31500
5889: PUSH
5890: LD_INT 29400
5892: PUSH
5893: LD_INT 27300
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: PUSH
5902: LD_OWVAR 67
5906: ARRAY
5907: PPUSH
5908: CALL_OW 67
// if usSurrender then
5912: LD_EXP 7
5916: IFFALSE 5920
// exit ;
5918: GO 6314
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] do
5920: LD_ADDR_VAR 0 1
5924: PUSH
5925: DOUBLE
5926: LD_INT 1
5928: DEC
5929: ST_TO_ADDR
5930: LD_INT 4
5932: PUSH
5933: LD_INT 5
5935: PUSH
5936: LD_INT 5
5938: PUSH
5939: LD_INT 6
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: PUSH
5948: LD_OWVAR 67
5952: ARRAY
5953: PUSH
5954: FOR_TO
5955: IFFALSE 6259
// begin uc_side := 1 ;
5957: LD_ADDR_OWVAR 20
5961: PUSH
5962: LD_INT 1
5964: ST_TO_ADDR
// uc_nation := 1 ;
5965: LD_ADDR_OWVAR 21
5969: PUSH
5970: LD_INT 1
5972: ST_TO_ADDR
// InitHc_All ( ) ;
5973: CALL_OW 584
// PrepareHuman ( false , 3 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
5977: LD_INT 0
5979: PPUSH
5980: LD_INT 3
5982: PPUSH
5983: LD_INT 5
5985: PUSH
5986: LD_INT 6
5988: PUSH
5989: LD_INT 7
5991: PUSH
5992: LD_INT 8
5994: PUSH
5995: EMPTY
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: PUSH
6001: LD_OWVAR 67
6005: ARRAY
6006: PPUSH
6007: CALL_OW 380
// un := CreateHuman ;
6011: LD_ADDR_VAR 0 2
6015: PUSH
6016: CALL_OW 44
6020: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ i mod 3 + 1 ] ;
6021: LD_ADDR_VAR 0 4
6025: PUSH
6026: LD_INT 2
6028: PUSH
6029: LD_INT 3
6031: PUSH
6032: LD_INT 4
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: LIST
6039: PUSH
6040: LD_VAR 0 1
6044: PUSH
6045: LD_INT 3
6047: MOD
6048: PUSH
6049: LD_INT 1
6051: PLUS
6052: ARRAY
6053: ST_TO_ADDR
// if chassis = us_heavy_tracked then
6054: LD_VAR 0 4
6058: PUSH
6059: LD_INT 4
6061: EQUAL
6062: IFFALSE 6097
// weapon := [ us_heavy_gun , us_gatling_gun , us_double_gun ] [ rand ( 1 , 3 ) ] else
6064: LD_ADDR_VAR 0 5
6068: PUSH
6069: LD_INT 6
6071: PUSH
6072: LD_INT 4
6074: PUSH
6075: LD_INT 5
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: LIST
6082: PUSH
6083: LD_INT 1
6085: PPUSH
6086: LD_INT 3
6088: PPUSH
6089: CALL_OW 12
6093: ARRAY
6094: ST_TO_ADDR
6095: GO 6132
// weapon := [ us_double_gun , us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6097: LD_ADDR_VAR 0 5
6101: PUSH
6102: LD_INT 5
6104: PUSH
6105: LD_INT 5
6107: PUSH
6108: LD_INT 7
6110: PUSH
6111: LD_INT 4
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: PUSH
6120: LD_INT 1
6122: PPUSH
6123: LD_INT 4
6125: PPUSH
6126: CALL_OW 12
6130: ARRAY
6131: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_manual , weapon , 30 ) ;
6132: LD_VAR 0 4
6136: PPUSH
6137: LD_INT 1
6139: PPUSH
6140: LD_INT 1
6142: PPUSH
6143: LD_VAR 0 5
6147: PPUSH
6148: LD_INT 30
6150: PPUSH
6151: CALL 20657 0 5
// veh := CreateVehicle ;
6155: LD_ADDR_VAR 0 3
6159: PUSH
6160: CALL_OW 45
6164: ST_TO_ADDR
// usAdditionalForces := Replace ( usAdditionalForces , usAdditionalForces + 1 , veh ) ;
6165: LD_ADDR_EXP 34
6169: PUSH
6170: LD_EXP 34
6174: PPUSH
6175: LD_EXP 34
6179: PUSH
6180: LD_INT 1
6182: PLUS
6183: PPUSH
6184: LD_VAR 0 3
6188: PPUSH
6189: CALL_OW 1
6193: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6194: LD_VAR 0 3
6198: PPUSH
6199: LD_INT 4
6201: PPUSH
6202: CALL_OW 233
// PlaceUnitArea ( veh , americanEastArea , false ) ;
6206: LD_VAR 0 3
6210: PPUSH
6211: LD_INT 17
6213: PPUSH
6214: LD_INT 0
6216: PPUSH
6217: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6221: LD_VAR 0 2
6225: PPUSH
6226: LD_VAR 0 3
6230: PPUSH
6231: CALL_OW 52
// ComMoveXY ( veh , 153 , 45 ) ;
6235: LD_VAR 0 3
6239: PPUSH
6240: LD_INT 153
6242: PPUSH
6243: LD_INT 45
6245: PPUSH
6246: CALL_OW 111
// wait ( 0 0$2 ) ;
6250: LD_INT 70
6252: PPUSH
6253: CALL_OW 67
// end ;
6257: GO 5954
6259: POP
6260: POP
// repeat wait ( 0 0$1 ) ;
6261: LD_INT 35
6263: PPUSH
6264: CALL_OW 67
// usAdditionalForces := AgressiveMove ( usAdditionalForces , [ [ 150 , 36 ] , [ 138 , 25 ] ] ) ;
6268: LD_ADDR_EXP 34
6272: PUSH
6273: LD_EXP 34
6277: PPUSH
6278: LD_INT 150
6280: PUSH
6281: LD_INT 36
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PUSH
6288: LD_INT 138
6290: PUSH
6291: LD_INT 25
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: PPUSH
6302: CALL 55714 0 2
6306: ST_TO_ADDR
// until not usAdditionalForces ;
6307: LD_EXP 34
6311: NOT
6312: IFFALSE 6261
// end ;
6314: PPOPN 5
6316: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 2 ] ] ) do
6317: LD_INT 22
6319: PUSH
6320: LD_INT 1
6322: PUSH
6323: EMPTY
6324: LIST
6325: LIST
6326: PUSH
6327: LD_INT 101
6329: PUSH
6330: LD_INT 2
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: PPUSH
6341: CALL_OW 69
6345: IFFALSE 6365
6347: GO 6349
6349: DISABLE
// begin wait ( 0 0$30 ) ;
6350: LD_INT 1050
6352: PPUSH
6353: CALL_OW 67
// usAttacksAllowed := true ;
6357: LD_ADDR_EXP 6
6361: PUSH
6362: LD_INT 1
6364: ST_TO_ADDR
// end ; end_of_file
6365: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6366: LD_VAR 0 1
6370: PPUSH
6371: CALL 57226 0 1
// if un = Heike then
6375: LD_VAR 0 1
6379: PUSH
6380: LD_EXP 15
6384: EQUAL
6385: IFFALSE 6394
// YouLost ( Heike ) ;
6387: LD_STRING Heike
6389: PPUSH
6390: CALL_OW 104
// if un = usCommander then
6394: LD_VAR 0 1
6398: PUSH
6399: LD_EXP 30
6403: EQUAL
6404: IFFALSE 6413
// YouLost ( Commander ) ;
6406: LD_STRING Commander
6408: PPUSH
6409: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_vehicle then
6413: LD_VAR 0 1
6417: PPUSH
6418: CALL_OW 255
6422: PUSH
6423: LD_INT 2
6425: EQUAL
6426: PUSH
6427: LD_VAR 0 1
6431: PPUSH
6432: CALL_OW 247
6436: PUSH
6437: LD_INT 2
6439: EQUAL
6440: AND
6441: IFFALSE 6458
// vehLossCounter := Inc ( vehLossCounter ) ;
6443: LD_ADDR_EXP 14
6447: PUSH
6448: LD_EXP 14
6452: PPUSH
6453: CALL 54471 0 1
6457: ST_TO_ADDR
// if GetSide ( un ) = 1 then
6458: LD_VAR 0 1
6462: PPUSH
6463: CALL_OW 255
6467: PUSH
6468: LD_INT 1
6470: EQUAL
6471: IFFALSE 6752
// begin if GetClass ( un ) = class_sniper then
6473: LD_VAR 0 1
6477: PPUSH
6478: CALL_OW 257
6482: PUSH
6483: LD_INT 5
6485: EQUAL
6486: IFFALSE 6503
// sniperKillCounter := Inc ( sniperKillCounter ) ;
6488: LD_ADDR_EXP 13
6492: PUSH
6493: LD_EXP 13
6497: PPUSH
6498: CALL 54471 0 1
6502: ST_TO_ADDR
// if GetWeapon ( un ) = us_crane and IsOk ( amFac ) then
6503: LD_VAR 0 1
6507: PPUSH
6508: CALL_OW 264
6512: PUSH
6513: LD_INT 13
6515: EQUAL
6516: PUSH
6517: LD_INT 25
6519: PPUSH
6520: CALL_OW 302
6524: AND
6525: IFFALSE 6546
// AddComConstruct ( amFac , us_medium_wheeled , engine_solar , control_remote , us_crane ) ;
6527: LD_INT 25
6529: PPUSH
6530: LD_INT 2
6532: PPUSH
6533: LD_INT 2
6535: PPUSH
6536: LD_INT 2
6538: PPUSH
6539: LD_INT 13
6541: PPUSH
6542: CALL_OW 185
// if GetWeapon ( un ) = us_cargo_bay and IsOk ( amFac ) then
6546: LD_VAR 0 1
6550: PPUSH
6551: CALL_OW 264
6555: PUSH
6556: LD_INT 12
6558: EQUAL
6559: PUSH
6560: LD_INT 25
6562: PPUSH
6563: CALL_OW 302
6567: AND
6568: IFFALSE 6589
// AddComConstruct ( amFac , us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ) ;
6570: LD_INT 25
6572: PPUSH
6573: LD_INT 2
6575: PPUSH
6576: LD_INT 1
6578: PPUSH
6579: LD_INT 2
6581: PPUSH
6582: LD_INT 12
6584: PPUSH
6585: CALL_OW 185
// if GetBType ( un ) = b_bunker then
6589: LD_VAR 0 1
6593: PPUSH
6594: CALL_OW 266
6598: PUSH
6599: LD_INT 32
6601: EQUAL
6602: IFFALSE 6667
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_bunker , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6604: LD_ADDR_EXP 33
6608: PUSH
6609: LD_EXP 33
6613: PPUSH
6614: LD_EXP 33
6618: PUSH
6619: LD_INT 1
6621: PLUS
6622: PPUSH
6623: LD_INT 32
6625: PUSH
6626: LD_VAR 0 1
6630: PPUSH
6631: CALL_OW 250
6635: PUSH
6636: LD_VAR 0 1
6640: PPUSH
6641: CALL_OW 251
6645: PUSH
6646: LD_VAR 0 1
6650: PPUSH
6651: CALL_OW 254
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: PPUSH
6662: CALL_OW 1
6666: ST_TO_ADDR
// if GetBType ( un ) in [ b_barracks , b_armoury ] then
6667: LD_VAR 0 1
6671: PPUSH
6672: CALL_OW 266
6676: PUSH
6677: LD_INT 5
6679: PUSH
6680: LD_INT 4
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: IN
6687: IFFALSE 6752
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_armoury , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6689: LD_ADDR_EXP 33
6693: PUSH
6694: LD_EXP 33
6698: PPUSH
6699: LD_EXP 33
6703: PUSH
6704: LD_INT 1
6706: PLUS
6707: PPUSH
6708: LD_INT 4
6710: PUSH
6711: LD_VAR 0 1
6715: PPUSH
6716: CALL_OW 250
6720: PUSH
6721: LD_VAR 0 1
6725: PPUSH
6726: CALL_OW 251
6730: PUSH
6731: LD_VAR 0 1
6735: PPUSH
6736: CALL_OW 254
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: PPUSH
6747: CALL_OW 1
6751: ST_TO_ADDR
// end ; end ;
6752: PPOPN 1
6754: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 1 and GetTag ( un ) = 1 then
6755: LD_VAR 0 1
6759: PPUSH
6760: CALL_OW 255
6764: PUSH
6765: LD_INT 1
6767: EQUAL
6768: PUSH
6769: LD_VAR 0 1
6773: PPUSH
6774: CALL_OW 110
6778: PUSH
6779: LD_INT 1
6781: EQUAL
6782: AND
6783: IFFALSE 6797
// SetTag ( un , 0 ) ;
6785: LD_VAR 0 1
6789: PPUSH
6790: LD_INT 0
6792: PPUSH
6793: CALL_OW 109
// if GetSide ( un ) = 1 and GetWeapon ( un ) = us_heavy_gun and not seeHeavyGun then
6797: LD_VAR 0 1
6801: PPUSH
6802: CALL_OW 255
6806: PUSH
6807: LD_INT 1
6809: EQUAL
6810: PUSH
6811: LD_VAR 0 1
6815: PPUSH
6816: CALL_OW 264
6820: PUSH
6821: LD_INT 6
6823: EQUAL
6824: AND
6825: PUSH
6826: LD_EXP 11
6830: NOT
6831: AND
6832: IFFALSE 6842
// seeHeavyGun := true ;
6834: LD_ADDR_EXP 11
6838: PUSH
6839: LD_INT 1
6841: ST_TO_ADDR
// if GetControl ( un ) = control_remote and GetSide ( un ) <> 2 then
6842: LD_VAR 0 1
6846: PPUSH
6847: CALL_OW 263
6851: PUSH
6852: LD_INT 2
6854: EQUAL
6855: PUSH
6856: LD_VAR 0 1
6860: PPUSH
6861: CALL_OW 255
6865: PUSH
6866: LD_INT 2
6868: NONEQUAL
6869: AND
6870: IFFALSE 6896
// begin ComUnlink ( un ) ;
6872: LD_VAR 0 1
6876: PPUSH
6877: CALL_OW 136
// if not seeRemoteVehicle then
6881: LD_EXP 10
6885: NOT
6886: IFFALSE 6896
// seeRemoteVehicle := true ;
6888: LD_ADDR_EXP 10
6892: PUSH
6893: LD_INT 1
6895: ST_TO_ADDR
// end ; end ;
6896: PPOPN 1
6898: END
// on BuildingComplete ( b ) do var i , barracks ;
6899: LD_INT 0
6901: PPUSH
6902: PPUSH
// begin if GetSide ( b ) = 2 then
6903: LD_VAR 0 1
6907: PPUSH
6908: CALL_OW 255
6912: PUSH
6913: LD_INT 2
6915: EQUAL
6916: IFFALSE 6954
// begin if GetBType ( b ) = b_depot and IsInArea ( b , westBankArea ) then
6918: LD_VAR 0 1
6922: PPUSH
6923: CALL_OW 266
6927: PUSH
6928: LD_INT 0
6930: EQUAL
6931: PUSH
6932: LD_VAR 0 1
6936: PPUSH
6937: LD_INT 18
6939: PPUSH
6940: CALL_OW 308
6944: AND
6945: IFFALSE 6954
// SetAchievement ( ACH_WEST ) ;
6947: LD_STRING ACH_WEST
6949: PPUSH
6950: CALL_OW 543
// end ; if GetSide ( b ) = 1 then
6954: LD_VAR 0 1
6958: PPUSH
6959: CALL_OW 255
6963: PUSH
6964: LD_INT 1
6966: EQUAL
6967: IFFALSE 7119
// begin usToBuild := Delete ( usToBuild , 1 ) ;
6969: LD_ADDR_EXP 33
6973: PUSH
6974: LD_EXP 33
6978: PPUSH
6979: LD_INT 1
6981: PPUSH
6982: CALL_OW 3
6986: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
6987: LD_VAR 0 1
6991: PPUSH
6992: CALL_OW 266
6996: PUSH
6997: LD_INT 4
6999: EQUAL
7000: IFFALSE 7011
// ComUpgrade ( b ) ;
7002: LD_VAR 0 1
7006: PPUSH
7007: CALL_OW 146
// if GetBType ( b ) = b_bunker then
7011: LD_VAR 0 1
7015: PPUSH
7016: CALL_OW 266
7020: PUSH
7021: LD_INT 32
7023: EQUAL
7024: IFFALSE 7119
// begin AddComPlaceWeapon ( b , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
7026: LD_VAR 0 1
7030: PPUSH
7031: LD_INT 6
7033: PUSH
7034: LD_INT 7
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: PUSH
7041: LD_INT 1
7043: PPUSH
7044: LD_INT 2
7046: PPUSH
7047: CALL_OW 12
7051: ARRAY
7052: PPUSH
7053: CALL_OW 208
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
7057: LD_ADDR_VAR 0 3
7061: PUSH
7062: LD_INT 22
7064: PUSH
7065: LD_INT 1
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: PUSH
7072: LD_INT 30
7074: PUSH
7075: LD_INT 5
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: PPUSH
7086: CALL_OW 69
7090: ST_TO_ADDR
// if barracks then
7091: LD_VAR 0 3
7095: IFFALSE 7119
// ComExitBuilding ( UnitsInside ( barracks [ 1 ] ) [ 1 ] ) ;
7097: LD_VAR 0 3
7101: PUSH
7102: LD_INT 1
7104: ARRAY
7105: PPUSH
7106: CALL_OW 313
7110: PUSH
7111: LD_INT 1
7113: ARRAY
7114: PPUSH
7115: CALL_OW 122
// end ; end ; end ;
7119: PPOPN 3
7121: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7122: LD_VAR 0 1
7126: PPUSH
7127: LD_VAR 0 2
7131: PPUSH
7132: CALL 57346 0 2
// if GetSide ( factory ) = 1 then
7136: LD_VAR 0 2
7140: PPUSH
7141: CALL_OW 255
7145: PUSH
7146: LD_INT 1
7148: EQUAL
7149: IFFALSE 7228
// begin if GetWeapon ( vehicle ) = us_cargo_bay then
7151: LD_VAR 0 1
7155: PPUSH
7156: CALL_OW 264
7160: PUSH
7161: LD_INT 12
7163: EQUAL
7164: IFFALSE 7176
// usCargo := vehicle ;
7166: LD_ADDR_EXP 32
7170: PUSH
7171: LD_VAR 0 1
7175: ST_TO_ADDR
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , us_crane ] then
7176: LD_VAR 0 1
7180: PPUSH
7181: CALL_OW 264
7185: PUSH
7186: LD_INT 12
7188: PUSH
7189: LD_INT 13
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: IN
7196: NOT
7197: IFFALSE 7228
// usForces := Replace ( usForces , usForces + 1 , vehicle ) ;
7199: LD_ADDR_EXP 31
7203: PUSH
7204: LD_EXP 31
7208: PPUSH
7209: LD_EXP 31
7213: PUSH
7214: LD_INT 1
7216: PLUS
7217: PPUSH
7218: LD_VAR 0 1
7222: PPUSH
7223: CALL_OW 1
7227: ST_TO_ADDR
// end ; end ;
7228: PPOPN 2
7230: END
// on EvacuateVehicle ( un , veh , p1 , p2 ) do begin if GetSide ( veh ) = 1 then
7231: LD_VAR 0 2
7235: PPUSH
7236: CALL_OW 255
7240: PUSH
7241: LD_INT 1
7243: EQUAL
7244: IFFALSE 7258
// AddComEnterUnit ( un , amFac ) ;
7246: LD_VAR 0 1
7250: PPUSH
7251: LD_INT 25
7253: PPUSH
7254: CALL_OW 180
// end ;
7258: PPOPN 4
7260: END
// on EvacuateBuilding ( b , un ) do begin if GetSide ( b ) = 1 and GetBType ( b ) = b_bunker and GetClass ( un ) in [ class_soldier , class_sniper ] and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] , [ f_ok ] ] ) then
7261: LD_VAR 0 1
7265: PPUSH
7266: CALL_OW 255
7270: PUSH
7271: LD_INT 1
7273: EQUAL
7274: PUSH
7275: LD_VAR 0 1
7279: PPUSH
7280: CALL_OW 266
7284: PUSH
7285: LD_INT 32
7287: EQUAL
7288: AND
7289: PUSH
7290: LD_VAR 0 2
7294: PPUSH
7295: CALL_OW 257
7299: PUSH
7300: LD_INT 1
7302: PUSH
7303: LD_INT 5
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: IN
7310: AND
7311: PUSH
7312: LD_INT 22
7314: PUSH
7315: LD_INT 1
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: PUSH
7322: LD_INT 30
7324: PUSH
7325: LD_INT 5
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PUSH
7332: LD_INT 50
7334: PUSH
7335: EMPTY
7336: LIST
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: LIST
7342: PPUSH
7343: CALL_OW 69
7347: AND
7348: IFFALSE 7418
// if UnitsInside ( HexInfo ( 74 , 120 ) ) < 6 then
7350: LD_INT 74
7352: PPUSH
7353: LD_INT 120
7355: PPUSH
7356: CALL_OW 428
7360: PPUSH
7361: CALL_OW 313
7365: PUSH
7366: LD_INT 6
7368: LESS
7369: IFFALSE 7418
// begin ComEnterUnit ( un , HexInfo ( 74 , 120 ) ) ;
7371: LD_VAR 0 2
7375: PPUSH
7376: LD_INT 74
7378: PPUSH
7379: LD_INT 120
7381: PPUSH
7382: CALL_OW 428
7386: PPUSH
7387: CALL_OW 120
// if GetClass ( un ) = class_soldier then
7391: LD_VAR 0 2
7395: PPUSH
7396: CALL_OW 257
7400: PUSH
7401: LD_INT 1
7403: EQUAL
7404: IFFALSE 7418
// AddComChangeProfession ( un , class_sniper ) ;
7406: LD_VAR 0 2
7410: PPUSH
7411: LD_INT 5
7413: PPUSH
7414: CALL_OW 183
// end ; end ; end_of_file
7418: PPOPN 2
7420: END
// export function Action ; var i , j , veh , tmp , hasEng , hasCamera , driver , counter ; begin
7421: LD_INT 0
7423: PPUSH
7424: PPUSH
7425: PPUSH
7426: PPUSH
7427: PPUSH
7428: PPUSH
7429: PPUSH
7430: PPUSH
7431: PPUSH
// Video ( true ) ;
7432: LD_INT 1
7434: PPUSH
7435: CALL 53082 0 1
// music_nat := 1 ;
7439: LD_ADDR_OWVAR 71
7443: PUSH
7444: LD_INT 1
7446: ST_TO_ADDR
// music_class := music_recon ;
7447: LD_ADDR_OWVAR 72
7451: PUSH
7452: LD_INT 3
7454: ST_TO_ADDR
// PlaceSeeing ( 184 , 142 , 2 , - 10 ) ;
7455: LD_INT 184
7457: PPUSH
7458: LD_INT 142
7460: PPUSH
7461: LD_INT 2
7463: PPUSH
7464: LD_INT 10
7466: NEG
7467: PPUSH
7468: CALL_OW 330
// RemoveSeeing ( 184 , 142 , 2 ) ;
7472: LD_INT 184
7474: PPUSH
7475: LD_INT 142
7477: PPUSH
7478: LD_INT 2
7480: PPUSH
7481: CALL_OW 331
// PlaceSeeing ( 204 , 151 , 2 , - 10 ) ;
7485: LD_INT 204
7487: PPUSH
7488: LD_INT 151
7490: PPUSH
7491: LD_INT 2
7493: PPUSH
7494: LD_INT 10
7496: NEG
7497: PPUSH
7498: CALL_OW 330
// RemoveSeeing ( 204 , 151 , 2 ) ;
7502: LD_INT 204
7504: PPUSH
7505: LD_INT 151
7507: PPUSH
7508: LD_INT 2
7510: PPUSH
7511: CALL_OW 331
// CenterNowOnXY ( 184 , 142 ) ;
7515: LD_INT 184
7517: PPUSH
7518: LD_INT 142
7520: PPUSH
7521: CALL_OW 86
// wait ( 0 0$2 ) ;
7525: LD_INT 70
7527: PPUSH
7528: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
7532: LD_ADDR_VAR 0 5
7536: PUSH
7537: LD_EXP 15
7541: PUSH
7542: LD_EXP 16
7546: PUSH
7547: LD_EXP 17
7551: PUSH
7552: LD_EXP 18
7556: PUSH
7557: LD_EXP 19
7561: PUSH
7562: LD_EXP 20
7566: PUSH
7567: LD_EXP 21
7571: PUSH
7572: LD_EXP 22
7576: PUSH
7577: LD_EXP 24
7581: PUSH
7582: LD_EXP 25
7586: PUSH
7587: LD_EXP 26
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: PUSH
7605: LD_EXP 27
7609: UNION
7610: ST_TO_ADDR
// hasEng := UnitFilter ( tmp , [ f_class , 2 ] ) > 0 ;
7611: LD_ADDR_VAR 0 6
7615: PUSH
7616: LD_VAR 0 5
7620: PPUSH
7621: LD_INT 25
7623: PUSH
7624: LD_INT 2
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PPUSH
7631: CALL_OW 72
7635: PUSH
7636: LD_INT 0
7638: GREATER
7639: ST_TO_ADDR
// hasCamera := false ;
7640: LD_ADDR_VAR 0 7
7644: PUSH
7645: LD_INT 0
7647: ST_TO_ADDR
// if not hasEng then
7648: LD_VAR 0 6
7652: NOT
7653: IFFALSE 7681
// SetClass ( tmp [ rand ( 1 , tmp ) ] , class_engineer ) ;
7655: LD_VAR 0 5
7659: PUSH
7660: LD_INT 1
7662: PPUSH
7663: LD_VAR 0 5
7667: PPUSH
7668: CALL_OW 12
7672: ARRAY
7673: PPUSH
7674: LD_INT 2
7676: PPUSH
7677: CALL_OW 336
// if heikeVehicles then
7681: LD_EXP 29
7685: IFFALSE 8309
// begin tmp := SortByClass ( tmp , class_mechanic ) ;
7687: LD_ADDR_VAR 0 5
7691: PUSH
7692: LD_VAR 0 5
7696: PPUSH
7697: LD_INT 3
7699: PPUSH
7700: CALL 55336 0 2
7704: ST_TO_ADDR
// for i in heikeVehicles do
7705: LD_ADDR_VAR 0 2
7709: PUSH
7710: LD_EXP 29
7714: PUSH
7715: FOR_IN
7716: IFFALSE 8307
// begin if not tmp then
7718: LD_VAR 0 5
7722: NOT
7723: IFFALSE 7727
// break ;
7725: GO 8307
// uc_side := 2 ;
7727: LD_ADDR_OWVAR 20
7731: PUSH
7732: LD_INT 2
7734: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
7735: LD_ADDR_OWVAR 21
7739: PUSH
7740: LD_VAR 0 2
7744: PUSH
7745: LD_INT 5
7747: ARRAY
7748: ST_TO_ADDR
// vc_chassis := i [ 1 ] ;
7749: LD_ADDR_OWVAR 37
7753: PUSH
7754: LD_VAR 0 2
7758: PUSH
7759: LD_INT 1
7761: ARRAY
7762: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
7763: LD_ADDR_OWVAR 39
7767: PUSH
7768: LD_VAR 0 2
7772: PUSH
7773: LD_INT 2
7775: ARRAY
7776: ST_TO_ADDR
// vc_control := i [ 3 ] ;
7777: LD_ADDR_OWVAR 38
7781: PUSH
7782: LD_VAR 0 2
7786: PUSH
7787: LD_INT 3
7789: ARRAY
7790: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
7791: LD_ADDR_OWVAR 40
7795: PUSH
7796: LD_VAR 0 2
7800: PUSH
7801: LD_INT 4
7803: ARRAY
7804: ST_TO_ADDR
// veh := CreateVehicle ;
7805: LD_ADDR_VAR 0 4
7809: PUSH
7810: CALL_OW 45
7814: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7815: LD_VAR 0 4
7819: PPUSH
7820: LD_INT 4
7822: PPUSH
7823: CALL_OW 233
// if i [ 3 ] = control_manual then
7827: LD_VAR 0 2
7831: PUSH
7832: LD_INT 3
7834: ARRAY
7835: PUSH
7836: LD_INT 1
7838: EQUAL
7839: IFFALSE 7924
// begin PlaceUnitArea ( veh , startArea , false ) ;
7841: LD_VAR 0 4
7845: PPUSH
7846: LD_INT 1
7848: PPUSH
7849: LD_INT 0
7851: PPUSH
7852: CALL_OW 49
// if i [ 4 ] = ar_control_tower then
7856: LD_VAR 0 2
7860: PUSH
7861: LD_INT 4
7863: ARRAY
7864: PUSH
7865: LD_INT 31
7867: EQUAL
7868: IFFALSE 7886
// SetClass ( tmp [ 1 ] , class_mechanic ) ;
7870: LD_VAR 0 5
7874: PUSH
7875: LD_INT 1
7877: ARRAY
7878: PPUSH
7879: LD_INT 3
7881: PPUSH
7882: CALL_OW 336
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
7886: LD_VAR 0 5
7890: PUSH
7891: LD_INT 1
7893: ARRAY
7894: PPUSH
7895: LD_VAR 0 4
7899: PPUSH
7900: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
7904: LD_ADDR_VAR 0 5
7908: PUSH
7909: LD_VAR 0 5
7913: PPUSH
7914: LD_INT 1
7916: PPUSH
7917: CALL_OW 3
7921: ST_TO_ADDR
// end else
7922: GO 7985
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
7924: LD_INT 22
7926: PUSH
7927: LD_INT 2
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: PUSH
7934: LD_INT 34
7936: PUSH
7937: LD_INT 31
7939: PUSH
7940: EMPTY
7941: LIST
7942: LIST
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: PPUSH
7948: CALL_OW 69
7952: IFFALSE 7985
// begin PlaceUnitArea ( veh , startArea , false ) ;
7954: LD_VAR 0 4
7958: PPUSH
7959: LD_INT 1
7961: PPUSH
7962: LD_INT 0
7964: PPUSH
7965: CALL_OW 49
// Connect ( veh ) ;
7969: LD_VAR 0 4
7973: PPUSH
7974: CALL 23748 0 1
// wait ( 0 0$2 ) ;
7978: LD_INT 70
7980: PPUSH
7981: CALL_OW 67
// end ; SetLives ( veh , i [ 6 ] ) ;
7985: LD_VAR 0 4
7989: PPUSH
7990: LD_VAR 0 2
7994: PUSH
7995: LD_INT 6
7997: ARRAY
7998: PPUSH
7999: CALL_OW 234
// SetFuel ( veh , 20 ) ;
8003: LD_VAR 0 4
8007: PPUSH
8008: LD_INT 20
8010: PPUSH
8011: CALL_OW 240
// if i [ 7 ] and GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay ] then
8015: LD_VAR 0 2
8019: PUSH
8020: LD_INT 7
8022: ARRAY
8023: PUSH
8024: LD_VAR 0 4
8028: PPUSH
8029: CALL_OW 264
8033: PUSH
8034: LD_INT 51
8036: PUSH
8037: LD_INT 32
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: IN
8044: AND
8045: IFFALSE 8096
// begin for j := 1 to 2 do
8047: LD_ADDR_VAR 0 3
8051: PUSH
8052: DOUBLE
8053: LD_INT 1
8055: DEC
8056: ST_TO_ADDR
8057: LD_INT 2
8059: PUSH
8060: FOR_TO
8061: IFFALSE 8094
// AddCargo ( veh , j , i [ 7 ] [ j ] ) ;
8063: LD_VAR 0 4
8067: PPUSH
8068: LD_VAR 0 3
8072: PPUSH
8073: LD_VAR 0 2
8077: PUSH
8078: LD_INT 7
8080: ARRAY
8081: PUSH
8082: LD_VAR 0 3
8086: ARRAY
8087: PPUSH
8088: CALL_OW 291
8092: GO 8060
8094: POP
8095: POP
// end ; ComMoveXY ( veh , 185 , 144 ) ;
8096: LD_VAR 0 4
8100: PPUSH
8101: LD_INT 185
8103: PPUSH
8104: LD_INT 144
8106: PPUSH
8107: CALL_OW 111
// if GetControl ( veh ) = control_manual and not hasCamera and GetClass ( IsDrivenBy ( veh ) ) = 2 then
8111: LD_VAR 0 4
8115: PPUSH
8116: CALL_OW 263
8120: PUSH
8121: LD_INT 1
8123: EQUAL
8124: PUSH
8125: LD_VAR 0 7
8129: NOT
8130: AND
8131: PUSH
8132: LD_VAR 0 4
8136: PPUSH
8137: CALL_OW 311
8141: PPUSH
8142: CALL_OW 257
8146: PUSH
8147: LD_INT 2
8149: EQUAL
8150: AND
8151: IFFALSE 8256
// begin hasCamera := true ;
8153: LD_ADDR_VAR 0 7
8157: PUSH
8158: LD_INT 1
8160: ST_TO_ADDR
// driver := IsDrivenBy ( veh ) ;
8161: LD_ADDR_VAR 0 8
8165: PUSH
8166: LD_VAR 0 4
8170: PPUSH
8171: CALL_OW 311
8175: ST_TO_ADDR
// AddComMoveXY ( veh , 177 , 138 ) ;
8176: LD_VAR 0 4
8180: PPUSH
8181: LD_INT 177
8183: PPUSH
8184: LD_INT 138
8186: PPUSH
8187: CALL_OW 171
// AddComExitVehicle ( driver ) ;
8191: LD_VAR 0 8
8195: PPUSH
8196: CALL_OW 181
// AddComHiddenCamera ( driver , 190 , 150 ) ;
8200: LD_VAR 0 8
8204: PPUSH
8205: LD_INT 190
8207: PPUSH
8208: LD_INT 150
8210: PPUSH
8211: CALL_OW 217
// AddComEnterUnit ( driver , veh ) ;
8215: LD_VAR 0 8
8219: PPUSH
8220: LD_VAR 0 4
8224: PPUSH
8225: CALL_OW 180
// AddComMoveXY ( driver , 170 , 103 ) ;
8229: LD_VAR 0 8
8233: PPUSH
8234: LD_INT 170
8236: PPUSH
8237: LD_INT 103
8239: PPUSH
8240: CALL_OW 171
// CenterOnXY ( 190 , 150 ) ;
8244: LD_INT 190
8246: PPUSH
8247: LD_INT 150
8249: PPUSH
8250: CALL_OW 84
// end else
8254: GO 8298
// begin AddComWait ( veh , 0 0$2 ) ;
8256: LD_VAR 0 4
8260: PPUSH
8261: LD_INT 70
8263: PPUSH
8264: CALL_OW 202
// AddComMoveXY ( veh , 179 , 129 ) ;
8268: LD_VAR 0 4
8272: PPUSH
8273: LD_INT 179
8275: PPUSH
8276: LD_INT 129
8278: PPUSH
8279: CALL_OW 171
// AddComMoveXY ( veh , 170 , 103 ) ;
8283: LD_VAR 0 4
8287: PPUSH
8288: LD_INT 170
8290: PPUSH
8291: LD_INT 103
8293: PPUSH
8294: CALL_OW 171
// end ; wait ( 0 0$2 ) ;
8298: LD_INT 70
8300: PPUSH
8301: CALL_OW 67
// end ;
8305: GO 7715
8307: POP
8308: POP
// end ; if tmp then
8309: LD_VAR 0 5
8313: IFFALSE 8458
// begin for i in tmp do
8315: LD_ADDR_VAR 0 2
8319: PUSH
8320: LD_VAR 0 5
8324: PUSH
8325: FOR_IN
8326: IFFALSE 8456
// begin SetDir ( i , 4 ) ;
8328: LD_VAR 0 2
8332: PPUSH
8333: LD_INT 4
8335: PPUSH
8336: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
8340: LD_VAR 0 2
8344: PPUSH
8345: LD_INT 1
8347: PPUSH
8348: LD_INT 0
8350: PPUSH
8351: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
8355: LD_VAR 0 2
8359: PPUSH
8360: LD_INT 185
8362: PPUSH
8363: LD_INT 144
8365: PPUSH
8366: CALL_OW 111
// if GetClass ( i ) = 2 and not hasCamera then
8370: LD_VAR 0 2
8374: PPUSH
8375: CALL_OW 257
8379: PUSH
8380: LD_INT 2
8382: EQUAL
8383: PUSH
8384: LD_VAR 0 7
8388: NOT
8389: AND
8390: IFFALSE 8417
// begin hasCamera := true ;
8392: LD_ADDR_VAR 0 7
8396: PUSH
8397: LD_INT 1
8399: ST_TO_ADDR
// AddComHiddenCamera ( i , 190 , 150 ) ;
8400: LD_VAR 0 2
8404: PPUSH
8405: LD_INT 190
8407: PPUSH
8408: LD_INT 150
8410: PPUSH
8411: CALL_OW 217
// end else
8415: GO 8432
// AddComMoveXY ( i , 179 , 129 ) ;
8417: LD_VAR 0 2
8421: PPUSH
8422: LD_INT 179
8424: PPUSH
8425: LD_INT 129
8427: PPUSH
8428: CALL_OW 171
// AddComMoveXY ( i , 170 , 103 ) ;
8432: LD_VAR 0 2
8436: PPUSH
8437: LD_INT 170
8439: PPUSH
8440: LD_INT 103
8442: PPUSH
8443: CALL_OW 171
// wait ( 0 0$2 ) ;
8447: LD_INT 70
8449: PPUSH
8450: CALL_OW 67
// end ;
8454: GO 8325
8456: POP
8457: POP
// end ; if heikeApes then
8458: LD_EXP 28
8462: IFFALSE 8580
// begin counter := 0 ;
8464: LD_ADDR_VAR 0 9
8468: PUSH
8469: LD_INT 0
8471: ST_TO_ADDR
// for i in heikeApes do
8472: LD_ADDR_VAR 0 2
8476: PUSH
8477: LD_EXP 28
8481: PUSH
8482: FOR_IN
8483: IFFALSE 8578
// begin if counter > 2 then
8485: LD_VAR 0 9
8489: PUSH
8490: LD_INT 2
8492: GREATER
8493: IFFALSE 8497
// break ;
8495: GO 8578
// counter := Inc ( counter ) ;
8497: LD_ADDR_VAR 0 9
8501: PUSH
8502: LD_VAR 0 9
8506: PPUSH
8507: CALL 54471 0 1
8511: ST_TO_ADDR
// SetDir ( i , 4 ) ;
8512: LD_VAR 0 2
8516: PPUSH
8517: LD_INT 4
8519: PPUSH
8520: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
8524: LD_VAR 0 2
8528: PPUSH
8529: LD_INT 1
8531: PPUSH
8532: LD_INT 0
8534: PPUSH
8535: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
8539: LD_VAR 0 2
8543: PPUSH
8544: LD_INT 185
8546: PPUSH
8547: LD_INT 144
8549: PPUSH
8550: CALL_OW 111
// AddComMoveXY ( i , 170 , 103 ) ;
8554: LD_VAR 0 2
8558: PPUSH
8559: LD_INT 170
8561: PPUSH
8562: LD_INT 103
8564: PPUSH
8565: CALL_OW 171
// wait ( 0 0$2 ) ;
8569: LD_INT 70
8571: PPUSH
8572: CALL_OW 67
// end ;
8576: GO 8482
8578: POP
8579: POP
// end ; AddComMoveXY ( Heike , 163 , 89 ) ;
8580: LD_EXP 15
8584: PPUSH
8585: LD_INT 163
8587: PPUSH
8588: LD_INT 89
8590: PPUSH
8591: CALL_OW 171
// Say ( Heike , DH-Intro-1 ) ;
8595: LD_EXP 15
8599: PPUSH
8600: LD_STRING DH-Intro-1
8602: PPUSH
8603: CALL_OW 88
// CenterOnXY ( 175 , 117 ) ;
8607: LD_INT 175
8609: PPUSH
8610: LD_INT 117
8612: PPUSH
8613: CALL_OW 84
// if Markov then
8617: LD_EXP 22
8621: IFFALSE 9196
// begin Say ( Markov , DMar-Intro-2 ) ;
8623: LD_EXP 22
8627: PPUSH
8628: LD_STRING DMar-Intro-2
8630: PPUSH
8631: CALL_OW 88
// Say ( Markov , DMar-Intro-3 ) ;
8635: LD_EXP 22
8639: PPUSH
8640: LD_STRING DMar-Intro-3
8642: PPUSH
8643: CALL_OW 88
// wait ( 0 0$1 ) ;
8647: LD_INT 35
8649: PPUSH
8650: CALL_OW 67
// CenterOnUnits ( Heike ) ;
8654: LD_EXP 15
8658: PPUSH
8659: CALL_OW 85
// if Kurt then
8663: LD_EXP 25
8667: IFFALSE 8719
// begin if IsInUnit ( Kurt ) then
8669: LD_EXP 25
8673: PPUSH
8674: CALL_OW 310
8678: IFFALSE 8689
// ComExit ( Kurt ) ;
8680: LD_EXP 25
8684: PPUSH
8685: CALL 53508 0 1
// AddComMoveXY ( Kurt , 130 , 56 ) ;
8689: LD_EXP 25
8693: PPUSH
8694: LD_INT 130
8696: PPUSH
8697: LD_INT 56
8699: PPUSH
8700: CALL_OW 171
// AddComTurnXY ( Kurt , 129 , 56 ) ;
8704: LD_EXP 25
8708: PPUSH
8709: LD_INT 129
8711: PPUSH
8712: LD_INT 56
8714: PPUSH
8715: CALL_OW 178
// end ; if Kaia then
8719: LD_EXP 20
8723: IFFALSE 8903
// begin Say ( Kaia , DK-Intro-4 ) ;
8725: LD_EXP 20
8729: PPUSH
8730: LD_STRING DK-Intro-4
8732: PPUSH
8733: CALL_OW 88
// Say ( Markov , DMar-Intro-5 ) ;
8737: LD_EXP 22
8741: PPUSH
8742: LD_STRING DMar-Intro-5
8744: PPUSH
8745: CALL_OW 88
// Say ( Markov , DMar-Intro-6 ) ;
8749: LD_EXP 22
8753: PPUSH
8754: LD_STRING DMar-Intro-6
8756: PPUSH
8757: CALL_OW 88
// Say ( Olaf , DO-Intro-7 ) ;
8761: LD_EXP 24
8765: PPUSH
8766: LD_STRING DO-Intro-7
8768: PPUSH
8769: CALL_OW 88
// CenterOnXY ( 160 , 85 ) ;
8773: LD_INT 160
8775: PPUSH
8776: LD_INT 85
8778: PPUSH
8779: CALL_OW 84
// Say ( Markov , DMar-Intro-8 ) ;
8783: LD_EXP 22
8787: PPUSH
8788: LD_STRING DMar-Intro-8
8790: PPUSH
8791: CALL_OW 88
// Say ( Markov , DMar-Intro-9 ) ;
8795: LD_EXP 22
8799: PPUSH
8800: LD_STRING DMar-Intro-9
8802: PPUSH
8803: CALL_OW 88
// Say ( Markov , DMar-Intro-10 ) ;
8807: LD_EXP 22
8811: PPUSH
8812: LD_STRING DMar-Intro-10
8814: PPUSH
8815: CALL_OW 88
// Say ( Markov , DMar-Intro-11 ) ;
8819: LD_EXP 22
8823: PPUSH
8824: LD_STRING DMar-Intro-11
8826: PPUSH
8827: CALL_OW 88
// Say ( Givi , DG-Intro-12 ) ;
8831: LD_EXP 16
8835: PPUSH
8836: LD_STRING DG-Intro-12
8838: PPUSH
8839: CALL_OW 88
// Say ( Givi , DG-Intro-13 ) ;
8843: LD_EXP 16
8847: PPUSH
8848: LD_STRING DG-Intro-13
8850: PPUSH
8851: CALL_OW 88
// Say ( Givi , DG-Intro-14 ) ;
8855: LD_EXP 16
8859: PPUSH
8860: LD_STRING DG-Intro-14
8862: PPUSH
8863: CALL_OW 88
// Say ( Givi , DG-Intro-15 ) ;
8867: LD_EXP 16
8871: PPUSH
8872: LD_STRING DG-Intro-15
8874: PPUSH
8875: CALL_OW 88
// Say ( Heike , DH-Intro-16 ) ;
8879: LD_EXP 15
8883: PPUSH
8884: LD_STRING DH-Intro-16
8886: PPUSH
8887: CALL_OW 88
// Say ( Markov , DMar-Intro-17 ) ;
8891: LD_EXP 22
8895: PPUSH
8896: LD_STRING DMar-Intro-17
8898: PPUSH
8899: CALL_OW 88
// end ; if Kurt and Mike then
8903: LD_EXP 25
8907: PUSH
8908: LD_EXP 17
8912: AND
8913: IFFALSE 9196
// begin CenterNowOnUnits ( Kurt ) ;
8915: LD_EXP 25
8919: PPUSH
8920: CALL_OW 87
// ComTurnUnit ( Kurt , Heike ) ;
8924: LD_EXP 25
8928: PPUSH
8929: LD_EXP 15
8933: PPUSH
8934: CALL_OW 119
// Say ( Kurt , DKs-Intro-18 ) ;
8938: LD_EXP 25
8942: PPUSH
8943: LD_STRING DKs-Intro-18
8945: PPUSH
8946: CALL_OW 88
// Say ( Kurt , DKs-Intro-19 ) ;
8950: LD_EXP 25
8954: PPUSH
8955: LD_STRING DKs-Intro-19
8957: PPUSH
8958: CALL_OW 88
// CenterNowOnUnits ( Mike ) ;
8962: LD_EXP 17
8966: PPUSH
8967: CALL_OW 87
// if IsInUnit ( Mike ) then
8971: LD_EXP 17
8975: PPUSH
8976: CALL_OW 310
8980: IFFALSE 8991
// ComExit ( Mike ) ;
8982: LD_EXP 17
8986: PPUSH
8987: CALL 53508 0 1
// AddComMoveXY ( Mike , 129 , 53 ) ;
8991: LD_EXP 17
8995: PPUSH
8996: LD_INT 129
8998: PPUSH
8999: LD_INT 53
9001: PPUSH
9002: CALL_OW 171
// AddComHold ( Mike ) ;
9006: LD_EXP 17
9010: PPUSH
9011: CALL_OW 200
// wait ( 0 0$2 ) ;
9015: LD_INT 70
9017: PPUSH
9018: CALL_OW 67
// Say ( Mike , DM-Intro-20 ) ;
9022: LD_EXP 17
9026: PPUSH
9027: LD_STRING DM-Intro-20
9029: PPUSH
9030: CALL_OW 88
// scoutActive := Query ( Scout ) ;
9034: LD_ADDR_EXP 3
9038: PUSH
9039: LD_STRING Scout
9041: PPUSH
9042: CALL_OW 97
9046: ST_TO_ADDR
// if scoutActive = 1 then
9047: LD_EXP 3
9051: PUSH
9052: LD_INT 1
9054: EQUAL
9055: IFFALSE 9152
// begin CenterNowOnUnits ( Kurt ) ;
9057: LD_EXP 25
9061: PPUSH
9062: CALL_OW 87
// Say ( Heike , DH-Intro-21 ) ;
9066: LD_EXP 15
9070: PPUSH
9071: LD_STRING DH-Intro-21
9073: PPUSH
9074: CALL_OW 88
// Say ( Mike , DM-Intro-22 ) ;
9078: LD_EXP 17
9082: PPUSH
9083: LD_STRING DM-Intro-22
9085: PPUSH
9086: CALL_OW 88
// Say ( Kurt , DKs-Intro-23 ) ;
9090: LD_EXP 25
9094: PPUSH
9095: LD_STRING DKs-Intro-23
9097: PPUSH
9098: CALL_OW 88
// SetSide ( Kurt , 5 ) ;
9102: LD_EXP 25
9106: PPUSH
9107: LD_INT 5
9109: PPUSH
9110: CALL_OW 235
// SetSide ( Mike , 5 ) ;
9114: LD_EXP 17
9118: PPUSH
9119: LD_INT 5
9121: PPUSH
9122: CALL_OW 235
// ComMoveXY ( [ Kurt , Mike ] , 104 , 66 ) ;
9126: LD_EXP 25
9130: PUSH
9131: LD_EXP 17
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: PPUSH
9140: LD_INT 104
9142: PPUSH
9143: LD_INT 66
9145: PPUSH
9146: CALL_OW 111
// end else
9150: GO 9196
// begin scoutActive := 0 ;
9152: LD_ADDR_EXP 3
9156: PUSH
9157: LD_INT 0
9159: ST_TO_ADDR
// Say ( Heike , DH-Intro-a-21 ) ;
9160: LD_EXP 15
9164: PPUSH
9165: LD_STRING DH-Intro-a-21
9167: PPUSH
9168: CALL_OW 88
// Say ( Mike , DM-Intro-a-22 ) ;
9172: LD_EXP 17
9176: PPUSH
9177: LD_STRING DM-Intro-a-22
9179: PPUSH
9180: CALL_OW 88
// Say ( Kurt , DKs-Intro-a-23 ) ;
9184: LD_EXP 25
9188: PPUSH
9189: LD_STRING DKs-Intro-a-23
9191: PPUSH
9192: CALL_OW 88
// end ; end ; end ; Video ( false ) ;
9196: LD_INT 0
9198: PPUSH
9199: CALL 53082 0 1
// music_nat := music_auto ;
9203: LD_ADDR_OWVAR 71
9207: PUSH
9208: LD_INT 0
9210: ST_TO_ADDR
// music_class := music_auto ;
9211: LD_ADDR_OWVAR 72
9215: PUSH
9216: LD_INT 0
9218: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
9219: LD_STRING M1
9221: PPUSH
9222: CALL_OW 337
// wait ( 0 0$3 ) ;
9226: LD_INT 105
9228: PPUSH
9229: CALL_OW 67
// Say ( Heike , DH-Base-1 ) ;
9233: LD_EXP 15
9237: PPUSH
9238: LD_STRING DH-Base-1
9240: PPUSH
9241: CALL_OW 88
// if Kaia then
9245: LD_EXP 20
9249: IFFALSE 9359
// begin Say ( Kaia , DK-Base-2 ) ;
9251: LD_EXP 20
9255: PPUSH
9256: LD_STRING DK-Base-2
9258: PPUSH
9259: CALL_OW 88
// Say ( Heike , DH-Base-3 ) ;
9263: LD_EXP 15
9267: PPUSH
9268: LD_STRING DH-Base-3
9270: PPUSH
9271: CALL_OW 88
// if Aviradze then
9275: LD_EXP 26
9279: IFFALSE 9359
// begin Say ( Aviradze , DA-Base-4 ) ;
9281: LD_EXP 26
9285: PPUSH
9286: LD_STRING DA-Base-4
9288: PPUSH
9289: CALL_OW 88
// Say ( Kaia , DK-Base-5 ) ;
9293: LD_EXP 20
9297: PPUSH
9298: LD_STRING DK-Base-5
9300: PPUSH
9301: CALL_OW 88
// if Markov then
9305: LD_EXP 22
9309: IFFALSE 9359
// begin Say ( Markov , DMar-Base-6 ) ;
9311: LD_EXP 22
9315: PPUSH
9316: LD_STRING DMar-Base-6
9318: PPUSH
9319: CALL_OW 88
// Say ( Kaia , DK-Base-7 ) ;
9323: LD_EXP 20
9327: PPUSH
9328: LD_STRING DK-Base-7
9330: PPUSH
9331: CALL_OW 88
// Say ( Markov , DMar-Base-8 ) ;
9335: LD_EXP 22
9339: PPUSH
9340: LD_STRING DMar-Base-8
9342: PPUSH
9343: CALL_OW 88
// Say ( Markov , DMar-Base-9 ) ;
9347: LD_EXP 22
9351: PPUSH
9352: LD_STRING DMar-Base-9
9354: PPUSH
9355: CALL_OW 88
// end ; end ; end ; SaveForQuickRestart ;
9359: CALL_OW 22
// end ;
9363: LD_VAR 0 1
9367: RET
// every 0 0$1 trigger scoutSuccess do var i , tmp ;
9368: LD_EXP 5
9372: IFFALSE 10483
9374: GO 9376
9376: DISABLE
9377: LD_INT 0
9379: PPUSH
9380: PPUSH
// begin InGameOn ;
9381: CALL_OW 8
// ComTurnUnit ( [ Mike , Kurt ] , Heike ) ;
9385: LD_EXP 17
9389: PUSH
9390: LD_EXP 25
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PPUSH
9399: LD_EXP 15
9403: PPUSH
9404: CALL_OW 119
// ComExit ( Heike ) ;
9408: LD_EXP 15
9412: PPUSH
9413: CALL 53508 0 1
// if IsOk ( Mike ) then
9417: LD_EXP 17
9421: PPUSH
9422: CALL_OW 302
9426: IFFALSE 9444
// AddComTurnUnit ( Heike , Mike ) else
9428: LD_EXP 15
9432: PPUSH
9433: LD_EXP 17
9437: PPUSH
9438: CALL_OW 179
9442: GO 9458
// AddComTurnUnit ( Heike , Kurt ) ;
9444: LD_EXP 15
9448: PPUSH
9449: LD_EXP 25
9453: PPUSH
9454: CALL_OW 179
// if IsOk ( Mike ) and IsOk ( Kurt ) then
9458: LD_EXP 17
9462: PPUSH
9463: CALL_OW 302
9467: PUSH
9468: LD_EXP 25
9472: PPUSH
9473: CALL_OW 302
9477: AND
9478: IFFALSE 9729
// begin CenterNowOnUnits ( Mike ) ;
9480: LD_EXP 17
9484: PPUSH
9485: CALL_OW 87
// Say ( Mike , DM-Scout-1 ) ;
9489: LD_EXP 17
9493: PPUSH
9494: LD_STRING DM-Scout-1
9496: PPUSH
9497: CALL_OW 88
// Say ( Heike , DH-Scout-2 ) ;
9501: LD_EXP 15
9505: PPUSH
9506: LD_STRING DH-Scout-2
9508: PPUSH
9509: CALL_OW 88
// Say ( Kurt , DKs-Scout-3 ) ;
9513: LD_EXP 25
9517: PPUSH
9518: LD_STRING DKs-Scout-3
9520: PPUSH
9521: CALL_OW 88
// Say ( Heike , DH-Scout-4 ) ;
9525: LD_EXP 15
9529: PPUSH
9530: LD_STRING DH-Scout-4
9532: PPUSH
9533: CALL_OW 88
// Say ( Heike , DH-Scout-5 ) ;
9537: LD_EXP 15
9541: PPUSH
9542: LD_STRING DH-Scout-5
9544: PPUSH
9545: CALL_OW 88
// tmp := [ [ 72 , 122 ] , [ 89 , 131 ] , [ 99 , 139 ] , [ 100 , 148 ] ] ;
9549: LD_ADDR_VAR 0 2
9553: PUSH
9554: LD_INT 72
9556: PUSH
9557: LD_INT 122
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PUSH
9564: LD_INT 89
9566: PUSH
9567: LD_INT 131
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PUSH
9574: LD_INT 99
9576: PUSH
9577: LD_INT 139
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: PUSH
9584: LD_INT 100
9586: PUSH
9587: LD_INT 148
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: ST_TO_ADDR
// for i in tmp do
9600: LD_ADDR_VAR 0 1
9604: PUSH
9605: LD_VAR 0 2
9609: PUSH
9610: FOR_IN
9611: IFFALSE 9669
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 2 , - 6 ) ;
9613: LD_VAR 0 1
9617: PUSH
9618: LD_INT 1
9620: ARRAY
9621: PPUSH
9622: LD_VAR 0 1
9626: PUSH
9627: LD_INT 2
9629: ARRAY
9630: PPUSH
9631: LD_INT 2
9633: PPUSH
9634: LD_INT 6
9636: NEG
9637: PPUSH
9638: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 2 ) ;
9642: LD_VAR 0 1
9646: PUSH
9647: LD_INT 1
9649: ARRAY
9650: PPUSH
9651: LD_VAR 0 1
9655: PUSH
9656: LD_INT 2
9658: ARRAY
9659: PPUSH
9660: LD_INT 2
9662: PPUSH
9663: CALL_OW 331
// end ;
9667: GO 9610
9669: POP
9670: POP
// CenterOnXY ( 83 , 132 ) ;
9671: LD_INT 83
9673: PPUSH
9674: LD_INT 132
9676: PPUSH
9677: CALL_OW 84
// Say ( Kurt , DKs-Scout-6 ) ;
9681: LD_EXP 25
9685: PPUSH
9686: LD_STRING DKs-Scout-6
9688: PPUSH
9689: CALL_OW 88
// Say ( Mike , DM-Scout-7 ) ;
9693: LD_EXP 17
9697: PPUSH
9698: LD_STRING DM-Scout-7
9700: PPUSH
9701: CALL_OW 88
// Say ( Mike , DM-Scout-8 ) ;
9705: LD_EXP 17
9709: PPUSH
9710: LD_STRING DM-Scout-8
9712: PPUSH
9713: CALL_OW 88
// Say ( Kurt , DKs-Scout-9 ) ;
9717: LD_EXP 25
9721: PPUSH
9722: LD_STRING DKs-Scout-9
9724: PPUSH
9725: CALL_OW 88
// end ; if IsDead ( Mike ) then
9729: LD_EXP 17
9733: PPUSH
9734: CALL_OW 301
9738: IFFALSE 9905
// begin CenterNowOnUnits ( Kurt ) ;
9740: LD_EXP 25
9744: PPUSH
9745: CALL_OW 87
// Say ( Kurt , DKs-Scout-b-1 ) ;
9749: LD_EXP 25
9753: PPUSH
9754: LD_STRING DKs-Scout-b-1
9756: PPUSH
9757: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-2 ) ;
9761: LD_EXP 25
9765: PPUSH
9766: LD_STRING DKs-Scout-b-2
9768: PPUSH
9769: CALL_OW 88
// if IsOk ( Givi ) then
9773: LD_EXP 16
9777: PPUSH
9778: CALL_OW 302
9782: IFFALSE 9857
// begin ComExit ( Givi ) ;
9784: LD_EXP 16
9788: PPUSH
9789: CALL 53508 0 1
// AddComTurnUnit ( Givi , Kurt ) ;
9793: LD_EXP 16
9797: PPUSH
9798: LD_EXP 25
9802: PPUSH
9803: CALL_OW 179
// Say ( Givi , DG-Scout-b-3 ) ;
9807: LD_EXP 16
9811: PPUSH
9812: LD_STRING DG-Scout-b-3
9814: PPUSH
9815: CALL_OW 88
// Say ( Givi , DG-Scout-b-4 ) ;
9819: LD_EXP 16
9823: PPUSH
9824: LD_STRING DG-Scout-b-4
9826: PPUSH
9827: CALL_OW 88
// Say ( Givi , DG-Scout-b-5 ) ;
9831: LD_EXP 16
9835: PPUSH
9836: LD_STRING DG-Scout-b-5
9838: PPUSH
9839: CALL_OW 88
// Say ( Heike , DH-Scout-b-6 ) ;
9843: LD_EXP 15
9847: PPUSH
9848: LD_STRING DH-Scout-b-6
9850: PPUSH
9851: CALL_OW 88
// end else
9855: GO 9869
// Say ( Heike , DH-Scout-a-4 ) ;
9857: LD_EXP 15
9861: PPUSH
9862: LD_STRING DH-Scout-a-4
9864: PPUSH
9865: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-7 ) ;
9869: LD_EXP 25
9873: PPUSH
9874: LD_STRING DKs-Scout-b-7
9876: PPUSH
9877: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-8 ) ;
9881: LD_EXP 25
9885: PPUSH
9886: LD_STRING DKs-Scout-b-8
9888: PPUSH
9889: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-9 ) ;
9893: LD_EXP 25
9897: PPUSH
9898: LD_STRING DKs-Scout-b-9
9900: PPUSH
9901: CALL_OW 88
// end ; if IsDead ( Kurt ) then
9905: LD_EXP 25
9909: PPUSH
9910: CALL_OW 301
9914: IFFALSE 10193
// begin CenterNowOnUnits ( Mike ) ;
9916: LD_EXP 17
9920: PPUSH
9921: CALL_OW 87
// Say ( Mike , DM-Scout-a-1 ) ;
9925: LD_EXP 17
9929: PPUSH
9930: LD_STRING DM-Scout-a-1
9932: PPUSH
9933: CALL_OW 88
// Say ( Mike , DM-Scout-a-2 ) ;
9937: LD_EXP 17
9941: PPUSH
9942: LD_STRING DM-Scout-a-2
9944: PPUSH
9945: CALL_OW 88
// if GetLives ( Mike ) < 1000 then
9949: LD_EXP 17
9953: PPUSH
9954: CALL_OW 256
9958: PUSH
9959: LD_INT 1000
9961: LESS
9962: IFFALSE 9978
// Say ( Heike , DH-Scout-a-3 ) else
9964: LD_EXP 15
9968: PPUSH
9969: LD_STRING DH-Scout-a-3
9971: PPUSH
9972: CALL_OW 88
9976: GO 9990
// Say ( Heike , DH-Scout-a-4 ) ;
9978: LD_EXP 15
9982: PPUSH
9983: LD_STRING DH-Scout-a-4
9985: PPUSH
9986: CALL_OW 88
// Say ( Mike , DM-Scout-a-5 ) ;
9990: LD_EXP 17
9994: PPUSH
9995: LD_STRING DM-Scout-a-5
9997: PPUSH
9998: CALL_OW 88
// if IsOk ( Kaia ) then
10002: LD_EXP 20
10006: PPUSH
10007: CALL_OW 302
10011: IFFALSE 10193
// begin ComExit ( Kaia ) ;
10013: LD_EXP 20
10017: PPUSH
10018: CALL 53508 0 1
// AddComMoveUnit ( Kaia , Mike ) ;
10022: LD_EXP 20
10026: PPUSH
10027: LD_EXP 17
10031: PPUSH
10032: CALL_OW 172
// wait ( 0 0$2 ) ;
10036: LD_INT 70
10038: PPUSH
10039: CALL_OW 67
// ComTurnUnit ( Kaia , Mike ) ;
10043: LD_EXP 20
10047: PPUSH
10048: LD_EXP 17
10052: PPUSH
10053: CALL_OW 119
// ComTurnUnit ( Mike , Kaia ) ;
10057: LD_EXP 17
10061: PPUSH
10062: LD_EXP 20
10066: PPUSH
10067: CALL_OW 119
// Say ( Kaia , DK-Scout-a-6 ) ;
10071: LD_EXP 20
10075: PPUSH
10076: LD_STRING DK-Scout-a-6
10078: PPUSH
10079: CALL_OW 88
// Say ( Mike , DM-Scout-a-7 ) ;
10083: LD_EXP 17
10087: PPUSH
10088: LD_STRING DM-Scout-a-7
10090: PPUSH
10091: CALL_OW 88
// Say ( Kaia , DK-Scout-a-8 ) ;
10095: LD_EXP 20
10099: PPUSH
10100: LD_STRING DK-Scout-a-8
10102: PPUSH
10103: CALL_OW 88
// Say ( Kaia , DK-Scout-a-9 ) ;
10107: LD_EXP 20
10111: PPUSH
10112: LD_STRING DK-Scout-a-9
10114: PPUSH
10115: CALL_OW 88
// Say ( Heike , DH-Scout-a-10 ) ;
10119: LD_EXP 15
10123: PPUSH
10124: LD_STRING DH-Scout-a-10
10126: PPUSH
10127: CALL_OW 88
// ComTurnUnit ( Mike , Heike ) ;
10131: LD_EXP 17
10135: PPUSH
10136: LD_EXP 15
10140: PPUSH
10141: CALL_OW 119
// Say ( Mike , DM-Scout-a-11 ) ;
10145: LD_EXP 17
10149: PPUSH
10150: LD_STRING DM-Scout-a-11
10152: PPUSH
10153: CALL_OW 88
// Say ( Mike , DM-Scout-a-12 ) ;
10157: LD_EXP 17
10161: PPUSH
10162: LD_STRING DM-Scout-a-12
10164: PPUSH
10165: CALL_OW 88
// Say ( Mike , DM-Scout-a-13 ) ;
10169: LD_EXP 17
10173: PPUSH
10174: LD_STRING DM-Scout-a-13
10176: PPUSH
10177: CALL_OW 88
// Say ( Mike , DM-Scout-a-14 ) ;
10181: LD_EXP 17
10185: PPUSH
10186: LD_STRING DM-Scout-a-14
10188: PPUSH
10189: CALL_OW 88
// end ; end ; if IsOk ( Givi ) then
10193: LD_EXP 16
10197: PPUSH
10198: CALL_OW 302
10202: IFFALSE 10230
// begin Say ( Givi , DG-Scout-10 ) ;
10204: LD_EXP 16
10208: PPUSH
10209: LD_STRING DG-Scout-10
10211: PPUSH
10212: CALL_OW 88
// Say ( Givi , DG-Scout-11 ) ;
10216: LD_EXP 16
10220: PPUSH
10221: LD_STRING DG-Scout-11
10223: PPUSH
10224: CALL_OW 88
// end else
10228: GO 10287
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-10 ) then
10230: LD_EXP 27
10234: PPUSH
10235: LD_INT 26
10237: PUSH
10238: LD_INT 1
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: PPUSH
10245: CALL_OW 72
10249: PPUSH
10250: LD_STRING DArm-Scout-10
10252: PPUSH
10253: CALL 224 0 2
10257: NOT
10258: IFFALSE 10287
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-10 ) ;
10260: LD_EXP 27
10264: PPUSH
10265: LD_INT 26
10267: PUSH
10268: LD_INT 2
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: PPUSH
10275: CALL_OW 72
10279: PPUSH
10280: LD_STRING DArf-Scout-10
10282: PPUSH
10283: CALL 224 0 2
// Say ( Heike , DH-Scout-12 ) ;
10287: LD_EXP 15
10291: PPUSH
10292: LD_STRING DH-Scout-12
10294: PPUSH
10295: CALL_OW 88
// Say ( Heike , DH-Scout-13 ) ;
10299: LD_EXP 15
10303: PPUSH
10304: LD_STRING DH-Scout-13
10306: PPUSH
10307: CALL_OW 88
// if IsOk ( Mike ) and IsOk ( Kurt ) then
10311: LD_EXP 17
10315: PPUSH
10316: CALL_OW 302
10320: PUSH
10321: LD_EXP 25
10325: PPUSH
10326: CALL_OW 302
10330: AND
10331: IFFALSE 10359
// begin Say ( Mike , DM-Scout-14 ) ;
10333: LD_EXP 17
10337: PPUSH
10338: LD_STRING DM-Scout-14
10340: PPUSH
10341: CALL_OW 88
// Say ( Heike , DH-Scout-c-14 ) ;
10345: LD_EXP 15
10349: PPUSH
10350: LD_STRING DH-Scout-c-14
10352: PPUSH
10353: CALL_OW 88
// end else
10357: GO 10452
// if IsOk ( Mike ) xor IsOk ( Kurt ) then
10359: LD_EXP 17
10363: PPUSH
10364: CALL_OW 302
10368: PUSH
10369: LD_EXP 25
10373: PPUSH
10374: CALL_OW 302
10378: XOR
10379: IFFALSE 10440
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-a-14 ) then
10381: LD_EXP 27
10385: PPUSH
10386: LD_INT 26
10388: PUSH
10389: LD_INT 1
10391: PUSH
10392: EMPTY
10393: LIST
10394: LIST
10395: PPUSH
10396: CALL_OW 72
10400: PPUSH
10401: LD_STRING DArm-Scout-a-14
10403: PPUSH
10404: CALL 224 0 2
10408: NOT
10409: IFFALSE 10438
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-a-14 ) ;
10411: LD_EXP 27
10415: PPUSH
10416: LD_INT 26
10418: PUSH
10419: LD_INT 2
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PPUSH
10426: CALL_OW 72
10430: PPUSH
10431: LD_STRING DArf-Scout-a-14
10433: PPUSH
10434: CALL 224 0 2
// end else
10438: GO 10452
// Say ( Heike , DH-Scout-d-14 ) ;
10440: LD_EXP 15
10444: PPUSH
10445: LD_STRING DH-Scout-d-14
10447: PPUSH
10448: CALL_OW 88
// Say ( Heike , DH-Scout-15 ) ;
10452: LD_EXP 15
10456: PPUSH
10457: LD_STRING DH-Scout-15
10459: PPUSH
10460: CALL_OW 88
// InGameOff ;
10464: CALL_OW 9
// wait ( 1 1$00 ) ;
10468: LD_INT 2100
10470: PPUSH
10471: CALL_OW 67
// usAttacksAllowed := true ;
10475: LD_ADDR_EXP 6
10479: PUSH
10480: LD_INT 1
10482: ST_TO_ADDR
// end ;
10483: PPOPN 2
10485: END
// every 0 0$1 trigger scoutFailed do var spoken ;
10486: LD_EXP 4
10490: IFFALSE 10667
10492: GO 10494
10494: DISABLE
10495: LD_INT 0
10497: PPUSH
// begin spoken := true ;
10498: LD_ADDR_VAR 0 1
10502: PUSH
10503: LD_INT 1
10505: ST_TO_ADDR
// wait ( 0 0$30 ) ;
10506: LD_INT 1050
10508: PPUSH
10509: CALL_OW 67
// Say ( Heike , DH-Scout-c-1 ) ;
10513: LD_EXP 15
10517: PPUSH
10518: LD_STRING DH-Scout-c-1
10520: PPUSH
10521: CALL_OW 88
// if not IsOk ( Givi ) then
10525: LD_EXP 16
10529: PPUSH
10530: CALL_OW 302
10534: NOT
10535: IFFALSE 10539
// exit ;
10537: GO 10667
// if IsOk ( Givi ) then
10539: LD_EXP 16
10543: PPUSH
10544: CALL_OW 302
10548: IFFALSE 10576
// begin Say ( Givi , DG-Scout-c-2 ) ;
10550: LD_EXP 16
10554: PPUSH
10555: LD_STRING DG-Scout-c-2
10557: PPUSH
10558: CALL_OW 88
// Say ( Givi , DG-Scout-c-3 ) ;
10562: LD_EXP 16
10566: PPUSH
10567: LD_STRING DG-Scout-c-3
10569: PPUSH
10570: CALL_OW 88
// end else
10574: GO 10649
// begin spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-c-3 ) ;
10576: LD_ADDR_VAR 0 1
10580: PUSH
10581: LD_EXP 27
10585: PPUSH
10586: LD_INT 26
10588: PUSH
10589: LD_INT 1
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: PPUSH
10596: CALL_OW 72
10600: PPUSH
10601: LD_STRING DArm-Scout-c-3
10603: PPUSH
10604: CALL 224 0 2
10608: ST_TO_ADDR
// if not spoken then
10609: LD_VAR 0 1
10613: NOT
10614: IFFALSE 10649
// spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-c-3 ) ;
10616: LD_ADDR_VAR 0 1
10620: PUSH
10621: LD_EXP 27
10625: PPUSH
10626: LD_INT 26
10628: PUSH
10629: LD_INT 2
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PPUSH
10636: CALL_OW 72
10640: PPUSH
10641: LD_STRING DArf-Scout-c-3
10643: PPUSH
10644: CALL 224 0 2
10648: ST_TO_ADDR
// ; end ; if spoken then
10649: LD_VAR 0 1
10653: IFFALSE 10667
// Say ( Heike , DH-Scout-c-4 ) ;
10655: LD_EXP 15
10659: PPUSH
10660: LD_STRING DH-Scout-c-4
10662: PPUSH
10663: CALL_OW 88
// end ;
10667: PPOPN 1
10669: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_half ] ] ) and IsOk ( Aviradze ) do
10670: LD_INT 22
10672: PUSH
10673: LD_INT 2
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PUSH
10680: LD_INT 30
10682: PUSH
10683: LD_INT 7
10685: PUSH
10686: EMPTY
10687: LIST
10688: LIST
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: PPUSH
10694: CALL_OW 69
10698: PUSH
10699: LD_EXP 26
10703: PPUSH
10704: CALL_OW 302
10708: AND
10709: IFFALSE 10794
10711: GO 10713
10713: DISABLE
// begin DialogueOn ;
10714: CALL_OW 6
// Say ( Aviradze , DA-Lab-1 ) ;
10718: LD_EXP 26
10722: PPUSH
10723: LD_STRING DA-Lab-1
10725: PPUSH
10726: CALL_OW 88
// Say ( Heike , DH-Lab-2 ) ;
10730: LD_EXP 15
10734: PPUSH
10735: LD_STRING DH-Lab-2
10737: PPUSH
10738: CALL_OW 88
// Say ( Aviradze , DA-Lab-3 ) ;
10742: LD_EXP 26
10746: PPUSH
10747: LD_STRING DA-Lab-3
10749: PPUSH
10750: CALL_OW 88
// Say ( Aviradze , DA-Lab-4 ) ;
10754: LD_EXP 26
10758: PPUSH
10759: LD_STRING DA-Lab-4
10761: PPUSH
10762: CALL_OW 88
// Say ( Aviradze , DA-Lab-5 ) ;
10766: LD_EXP 26
10770: PPUSH
10771: LD_STRING DA-Lab-5
10773: PPUSH
10774: CALL_OW 88
// Say ( Heike , DH-Lab-6 ) ;
10778: LD_EXP 15
10782: PPUSH
10783: LD_STRING DH-Lab-6
10785: PPUSH
10786: CALL_OW 88
// DialogueOff ;
10790: CALL_OW 7
// end ;
10794: END
// every 0 0$1 trigger GetTech ( tech_MatDet , 2 ) = state_researched and IsOk ( Givi ) do
10795: LD_INT 7
10797: PPUSH
10798: LD_INT 2
10800: PPUSH
10801: CALL_OW 321
10805: PUSH
10806: LD_INT 2
10808: EQUAL
10809: PUSH
10810: LD_EXP 16
10814: PPUSH
10815: CALL_OW 302
10819: AND
10820: IFFALSE 10989
10822: GO 10824
10824: DISABLE
// begin DialogueOn ;
10825: CALL_OW 6
// Say ( Givi , DG-Opt-1 ) ;
10829: LD_EXP 16
10833: PPUSH
10834: LD_STRING DG-Opt-1
10836: PPUSH
10837: CALL_OW 88
// Say ( Heike , DH-Opt-2 ) ;
10841: LD_EXP 15
10845: PPUSH
10846: LD_STRING DH-Opt-2
10848: PPUSH
10849: CALL_OW 88
// Say ( Givi , DG-Opt-3 ) ;
10853: LD_EXP 16
10857: PPUSH
10858: LD_STRING DG-Opt-3
10860: PPUSH
10861: CALL_OW 88
// Say ( Givi , DG-Opt-4 ) ;
10865: LD_EXP 16
10869: PPUSH
10870: LD_STRING DG-Opt-4
10872: PPUSH
10873: CALL_OW 88
// Say ( Heike , DH-Opt-5 ) ;
10877: LD_EXP 15
10881: PPUSH
10882: LD_STRING DH-Opt-5
10884: PPUSH
10885: CALL_OW 88
// Say ( Givi , DG-Opt-6 ) ;
10889: LD_EXP 16
10893: PPUSH
10894: LD_STRING DG-Opt-6
10896: PPUSH
10897: CALL_OW 88
// Say ( Heike , DH-Opt-7 ) ;
10901: LD_EXP 15
10905: PPUSH
10906: LD_STRING DH-Opt-7
10908: PPUSH
10909: CALL_OW 88
// Say ( Givi , DG-Opt-8 ) ;
10913: LD_EXP 16
10917: PPUSH
10918: LD_STRING DG-Opt-8
10920: PPUSH
10921: CALL_OW 88
// Say ( Givi , DG-Opt-9 ) ;
10925: LD_EXP 16
10929: PPUSH
10930: LD_STRING DG-Opt-9
10932: PPUSH
10933: CALL_OW 88
// Say ( Heike , DH-Opt-10 ) ;
10937: LD_EXP 15
10941: PPUSH
10942: LD_STRING DH-Opt-10
10944: PPUSH
10945: CALL_OW 88
// Say ( Givi , DG-Opt-11 ) ;
10949: LD_EXP 16
10953: PPUSH
10954: LD_STRING DG-Opt-11
10956: PPUSH
10957: CALL_OW 88
// Say ( Givi , DG-Opt-12 ) ;
10961: LD_EXP 16
10965: PPUSH
10966: LD_STRING DG-Opt-12
10968: PPUSH
10969: CALL_OW 88
// Say ( Heike , DH-Opt-13 ) ;
10973: LD_EXP 15
10977: PPUSH
10978: LD_STRING DH-Opt-13
10980: PPUSH
10981: CALL_OW 88
// DialogueOff ;
10985: CALL_OW 7
// end ;
10989: END
// every 0 0$2 trigger UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) do
10990: LD_EXP 27
10994: PPUSH
10995: LD_INT 95
10997: PUSH
10998: LD_INT 7
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: PUSH
11005: LD_INT 23
11007: PUSH
11008: LD_INT 2
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: PUSH
11015: LD_INT 26
11017: PUSH
11018: LD_INT 1
11020: PUSH
11021: EMPTY
11022: LIST
11023: LIST
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: LIST
11029: PPUSH
11030: CALL_OW 72
11034: IFFALSE 11095
11036: GO 11038
11038: DISABLE
// begin Say ( UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-River ) ;
11039: LD_EXP 27
11043: PPUSH
11044: LD_INT 95
11046: PUSH
11047: LD_INT 7
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PUSH
11054: LD_INT 23
11056: PUSH
11057: LD_INT 2
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: LD_INT 26
11066: PUSH
11067: LD_INT 1
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: LIST
11078: PPUSH
11079: CALL_OW 72
11083: PUSH
11084: LD_INT 1
11086: ARRAY
11087: PPUSH
11088: LD_STRING DArm-River
11090: PPUSH
11091: CALL_OW 88
// end ;
11095: END
// every 0 0$1 trigger GetTech ( tech_rocket , 2 ) = state_researched and IsOk ( Ibrahim ) do
11096: LD_INT 40
11098: PPUSH
11099: LD_INT 2
11101: PPUSH
11102: CALL_OW 321
11106: PUSH
11107: LD_INT 2
11109: EQUAL
11110: PUSH
11111: LD_EXP 18
11115: PPUSH
11116: CALL_OW 302
11120: AND
11121: IFFALSE 11371
11123: GO 11125
11125: DISABLE
// begin DialogueOn ;
11126: CALL_OW 6
// Say ( Ibrahim , DI-Roc-1 ) ;
11130: LD_EXP 18
11134: PPUSH
11135: LD_STRING DI-Roc-1
11137: PPUSH
11138: CALL_OW 88
// Say ( Heike , DH-Roc-2 ) ;
11142: LD_EXP 15
11146: PPUSH
11147: LD_STRING DH-Roc-2
11149: PPUSH
11150: CALL_OW 88
// Say ( Ibrahim , DI-Roc-3 ) ;
11154: LD_EXP 18
11158: PPUSH
11159: LD_STRING DI-Roc-3
11161: PPUSH
11162: CALL_OW 88
// Say ( Ibrahim , DI-Roc-4 ) ;
11166: LD_EXP 18
11170: PPUSH
11171: LD_STRING DI-Roc-4
11173: PPUSH
11174: CALL_OW 88
// Say ( Kaia , DK-Roc-5 ) ;
11178: LD_EXP 20
11182: PPUSH
11183: LD_STRING DK-Roc-5
11185: PPUSH
11186: CALL_OW 88
// Say ( Kaia , DK-Roc-6 ) ;
11190: LD_EXP 20
11194: PPUSH
11195: LD_STRING DK-Roc-6
11197: PPUSH
11198: CALL_OW 88
// Say ( Givi , DG-Roc-7 ) ;
11202: LD_EXP 16
11206: PPUSH
11207: LD_STRING DG-Roc-7
11209: PPUSH
11210: CALL_OW 88
// Say ( Givi , DG-Roc-8 ) ;
11214: LD_EXP 16
11218: PPUSH
11219: LD_STRING DG-Roc-8
11221: PPUSH
11222: CALL_OW 88
// if IsOk ( Markov ) and IsOk ( Kaia ) and IsOk ( Givi ) then
11226: LD_EXP 22
11230: PPUSH
11231: CALL_OW 302
11235: PUSH
11236: LD_EXP 20
11240: PPUSH
11241: CALL_OW 302
11245: AND
11246: PUSH
11247: LD_EXP 16
11251: PPUSH
11252: CALL_OW 302
11256: AND
11257: IFFALSE 11367
// begin Say ( Markov , DMar-Roc-9 ) ;
11259: LD_EXP 22
11263: PPUSH
11264: LD_STRING DMar-Roc-9
11266: PPUSH
11267: CALL_OW 88
// Say ( Markov , DMar-Roc-10 ) ;
11271: LD_EXP 22
11275: PPUSH
11276: LD_STRING DMar-Roc-10
11278: PPUSH
11279: CALL_OW 88
// Say ( Kaia , DK-Roc-11 ) ;
11283: LD_EXP 20
11287: PPUSH
11288: LD_STRING DK-Roc-11
11290: PPUSH
11291: CALL_OW 88
// Say ( Markov , DMar-Roc-12 ) ;
11295: LD_EXP 22
11299: PPUSH
11300: LD_STRING DMar-Roc-12
11302: PPUSH
11303: CALL_OW 88
// Say ( Kaia , DK-Roc-13 ) ;
11307: LD_EXP 20
11311: PPUSH
11312: LD_STRING DK-Roc-13
11314: PPUSH
11315: CALL_OW 88
// Say ( Givi , DG-Roc-14 ) ;
11319: LD_EXP 16
11323: PPUSH
11324: LD_STRING DG-Roc-14
11326: PPUSH
11327: CALL_OW 88
// Say ( Markov , DMar-Roc-15 ) ;
11331: LD_EXP 22
11335: PPUSH
11336: LD_STRING DMar-Roc-15
11338: PPUSH
11339: CALL_OW 88
// Say ( Markov , DMar-Roc-16 ) ;
11343: LD_EXP 22
11347: PPUSH
11348: LD_STRING DMar-Roc-16
11350: PPUSH
11351: CALL_OW 88
// Say ( Kaia , DK-Roc-17 ) ;
11355: LD_EXP 20
11359: PPUSH
11360: LD_STRING DK-Roc-17
11362: PPUSH
11363: CALL_OW 88
// end ; DialogueOff ;
11367: CALL_OW 7
// end ;
11371: END
// every 0 0$3 trigger GetLives ( usCommander ) < 1000 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] ] ) < 6 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) < 2 do var i , hurts , sci ;
11372: LD_EXP 30
11376: PPUSH
11377: CALL_OW 256
11381: PUSH
11382: LD_INT 1000
11384: LESS
11385: PUSH
11386: LD_INT 22
11388: PUSH
11389: LD_INT 1
11391: PUSH
11392: EMPTY
11393: LIST
11394: LIST
11395: PUSH
11396: LD_INT 21
11398: PUSH
11399: LD_INT 1
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: PUSH
11406: LD_INT 23
11408: PUSH
11409: LD_INT 1
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: LIST
11420: PPUSH
11421: CALL_OW 69
11425: PUSH
11426: LD_INT 6
11428: LESS
11429: OR
11430: PUSH
11431: LD_INT 22
11433: PUSH
11434: LD_INT 1
11436: PUSH
11437: EMPTY
11438: LIST
11439: LIST
11440: PUSH
11441: LD_INT 21
11443: PUSH
11444: LD_INT 1
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: PUSH
11451: LD_INT 25
11453: PUSH
11454: LD_INT 1
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: LIST
11465: PPUSH
11466: CALL_OW 69
11470: PUSH
11471: LD_INT 2
11473: LESS
11474: OR
11475: IFFALSE 12721
11477: GO 11479
11479: DISABLE
11480: LD_INT 0
11482: PPUSH
11483: PPUSH
11484: PPUSH
// begin usAttacksAllowed := false ;
11485: LD_ADDR_EXP 6
11489: PUSH
11490: LD_INT 0
11492: ST_TO_ADDR
// usSurrender := true ;
11493: LD_ADDR_EXP 7
11497: PUSH
11498: LD_INT 1
11500: ST_TO_ADDR
// SetAttitude ( 1 , 2 , att_friend , true ) ;
11501: LD_INT 1
11503: PPUSH
11504: LD_INT 2
11506: PPUSH
11507: LD_INT 1
11509: PPUSH
11510: LD_INT 1
11512: PPUSH
11513: CALL_OW 80
// if IsDead ( usCommander ) then
11517: LD_EXP 30
11521: PPUSH
11522: CALL_OW 301
11526: IFFALSE 11530
// exit ;
11528: GO 12721
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_hastask ] ] ) do
11530: LD_ADDR_VAR 0 1
11534: PUSH
11535: LD_INT 22
11537: PUSH
11538: LD_INT 2
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: PUSH
11545: LD_INT 21
11547: PUSH
11548: LD_INT 1
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: PUSH
11555: LD_INT 60
11557: PUSH
11558: EMPTY
11559: LIST
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: LIST
11565: PPUSH
11566: CALL_OW 69
11570: PUSH
11571: FOR_IN
11572: IFFALSE 11585
// ComStop ( i ) ;
11574: LD_VAR 0 1
11578: PPUSH
11579: CALL_OW 141
11583: GO 11571
11585: POP
11586: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_ok ] ] , [ f_type , unit_human ] ] ) do
11587: LD_ADDR_VAR 0 1
11591: PUSH
11592: LD_INT 22
11594: PUSH
11595: LD_INT 2
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: PUSH
11602: LD_INT 3
11604: PUSH
11605: LD_INT 50
11607: PUSH
11608: EMPTY
11609: LIST
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 21
11617: PUSH
11618: LD_INT 1
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: LIST
11629: PPUSH
11630: CALL_OW 69
11634: PUSH
11635: FOR_IN
11636: IFFALSE 11652
// SetLives ( i , 251 ) ;
11638: LD_VAR 0 1
11642: PPUSH
11643: LD_INT 251
11645: PPUSH
11646: CALL_OW 234
11650: GO 11635
11652: POP
11653: POP
// InGameOn ;
11654: CALL_OW 8
// ComExit ( usCommander ) ;
11658: LD_EXP 30
11662: PPUSH
11663: CALL 53508 0 1
// AddComMoveXY ( usCommander , 81 , 143 ) ;
11667: LD_EXP 30
11671: PPUSH
11672: LD_INT 81
11674: PPUSH
11675: LD_INT 143
11677: PPUSH
11678: CALL_OW 171
// AddComTurnXY ( usCommander , 81 , 139 ) ;
11682: LD_EXP 30
11686: PPUSH
11687: LD_INT 81
11689: PPUSH
11690: LD_INT 139
11692: PPUSH
11693: CALL_OW 178
// PlaceSeeing ( 81 , 144 , 2 , - 10 ) ;
11697: LD_INT 81
11699: PPUSH
11700: LD_INT 144
11702: PPUSH
11703: LD_INT 2
11705: PPUSH
11706: LD_INT 10
11708: NEG
11709: PPUSH
11710: CALL_OW 330
// CenterNowOnUnits ( usCommander ) ;
11714: LD_EXP 30
11718: PPUSH
11719: CALL_OW 87
// wait ( 0 0$2 ) ;
11723: LD_INT 70
11725: PPUSH
11726: CALL_OW 67
// if not IsOk ( usCommander ) then
11730: LD_EXP 30
11734: PPUSH
11735: CALL_OW 302
11739: NOT
11740: IFFALSE 11754
// SetLives ( usCommander , 251 ) ;
11742: LD_EXP 30
11746: PPUSH
11747: LD_INT 251
11749: PPUSH
11750: CALL_OW 234
// Say ( usCommander , DCa-Surrender-1 ) ;
11754: LD_EXP 30
11758: PPUSH
11759: LD_STRING DCa-Surrender-1
11761: PPUSH
11762: CALL_OW 88
// Say ( Heike , DH-Surrender-2 ) ;
11766: LD_EXP 15
11770: PPUSH
11771: LD_STRING DH-Surrender-2
11773: PPUSH
11774: CALL_OW 88
// if GetType ( IsInUnit ( Heike ) ) = unit_building then
11778: LD_EXP 15
11782: PPUSH
11783: CALL_OW 310
11787: PPUSH
11788: CALL_OW 247
11792: PUSH
11793: LD_INT 3
11795: EQUAL
11796: IFFALSE 11814
// begin ComExit ( Heike ) ;
11798: LD_EXP 15
11802: PPUSH
11803: CALL 53508 0 1
// wait ( 3 ) ;
11807: LD_INT 3
11809: PPUSH
11810: CALL_OW 67
// end ; ComMoveXY ( Heike , 82 , 133 ) ;
11814: LD_EXP 15
11818: PPUSH
11819: LD_INT 82
11821: PPUSH
11822: LD_INT 133
11824: PPUSH
11825: CALL_OW 111
// AddComTurnUnit ( Heike , usCommander ) ;
11829: LD_EXP 15
11833: PPUSH
11834: LD_EXP 30
11838: PPUSH
11839: CALL_OW 179
// wait ( 0 0$3 ) ;
11843: LD_INT 105
11845: PPUSH
11846: CALL_OW 67
// Say ( Heike , DH-Surrender-3 ) ;
11850: LD_EXP 15
11854: PPUSH
11855: LD_STRING DH-Surrender-3
11857: PPUSH
11858: CALL_OW 88
// Say ( Heike , DH-Surrender-4 ) ;
11862: LD_EXP 15
11866: PPUSH
11867: LD_STRING DH-Surrender-4
11869: PPUSH
11870: CALL_OW 88
// RemoveSeeing ( 81 , 144 , 2 ) ;
11874: LD_INT 81
11876: PPUSH
11877: LD_INT 144
11879: PPUSH
11880: LD_INT 2
11882: PPUSH
11883: CALL_OW 331
// ChangeSideFog ( 1 , 2 ) ;
11887: LD_INT 1
11889: PPUSH
11890: LD_INT 2
11892: PPUSH
11893: CALL_OW 343
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_inside ] ] ) do
11897: LD_ADDR_VAR 0 1
11901: PUSH
11902: LD_INT 22
11904: PUSH
11905: LD_INT 1
11907: PUSH
11908: EMPTY
11909: LIST
11910: LIST
11911: PUSH
11912: LD_INT 23
11914: PUSH
11915: LD_INT 1
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PUSH
11922: LD_INT 54
11924: PUSH
11925: EMPTY
11926: LIST
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: LIST
11932: PPUSH
11933: CALL_OW 69
11937: PUSH
11938: FOR_IN
11939: IFFALSE 11952
// ComExit ( i ) ;
11941: LD_VAR 0 1
11945: PPUSH
11946: CALL 53508 0 1
11950: GO 11938
11952: POP
11953: POP
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
11954: LD_ADDR_VAR 0 3
11958: PUSH
11959: LD_INT 22
11961: PUSH
11962: LD_INT 1
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: PUSH
11969: LD_INT 25
11971: PUSH
11972: LD_INT 4
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PPUSH
11983: CALL_OW 69
11987: ST_TO_ADDR
// hurts := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
11988: LD_ADDR_VAR 0 2
11992: PUSH
11993: LD_INT 22
11995: PUSH
11996: LD_INT 1
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PUSH
12003: LD_INT 3
12005: PUSH
12006: LD_INT 50
12008: PUSH
12009: EMPTY
12010: LIST
12011: PUSH
12012: EMPTY
12013: LIST
12014: LIST
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PPUSH
12020: CALL_OW 69
12024: ST_TO_ADDR
// if sci and hurts then
12025: LD_VAR 0 3
12029: PUSH
12030: LD_VAR 0 2
12034: AND
12035: IFFALSE 12097
// begin for i := 1 to hurts do
12037: LD_ADDR_VAR 0 1
12041: PUSH
12042: DOUBLE
12043: LD_INT 1
12045: DEC
12046: ST_TO_ADDR
12047: LD_VAR 0 2
12051: PUSH
12052: FOR_TO
12053: IFFALSE 12095
// if i <= sci then
12055: LD_VAR 0 1
12059: PUSH
12060: LD_VAR 0 3
12064: LESSEQUAL
12065: IFFALSE 12093
// AddComHeal ( sci [ i ] , hurts [ i ] ) ;
12067: LD_VAR 0 3
12071: PUSH
12072: LD_VAR 0 1
12076: ARRAY
12077: PPUSH
12078: LD_VAR 0 2
12082: PUSH
12083: LD_VAR 0 1
12087: ARRAY
12088: PPUSH
12089: CALL_OW 188
12093: GO 12052
12095: POP
12096: POP
// end ; if IsOk ( Givi ) then
12097: LD_EXP 16
12101: PPUSH
12102: CALL_OW 302
12106: IFFALSE 12122
// Say ( Givi , DG-Surrender-5 ) else
12108: LD_EXP 16
12112: PPUSH
12113: LD_STRING DG-Surrender-5
12115: PPUSH
12116: CALL_OW 88
12120: GO 12134
// Say ( Heike , DH-Surrender-a-5 ) ;
12122: LD_EXP 15
12126: PPUSH
12127: LD_STRING DH-Surrender-a-5
12129: PPUSH
12130: CALL_OW 88
// Say ( usCommander , DCa-Surrender-6 ) ;
12134: LD_EXP 30
12138: PPUSH
12139: LD_STRING DCa-Surrender-6
12141: PPUSH
12142: CALL_OW 88
// Say ( usCommander , DCa-Surrender-7 ) ;
12146: LD_EXP 30
12150: PPUSH
12151: LD_STRING DCa-Surrender-7
12153: PPUSH
12154: CALL_OW 88
// if IsOk ( Givi ) then
12158: LD_EXP 16
12162: PPUSH
12163: CALL_OW 302
12167: IFFALSE 12183
// Say ( Givi , DG-Surrender-8 ) else
12169: LD_EXP 16
12173: PPUSH
12174: LD_STRING DG-Surrender-8
12176: PPUSH
12177: CALL_OW 88
12181: GO 12195
// Say ( Heike , DH-Surrender-a-8 ) ;
12183: LD_EXP 15
12187: PPUSH
12188: LD_STRING DH-Surrender-a-8
12190: PPUSH
12191: CALL_OW 88
// Say ( usCommander , DCa-Surrender-9 ) ;
12195: LD_EXP 30
12199: PPUSH
12200: LD_STRING DCa-Surrender-9
12202: PPUSH
12203: CALL_OW 88
// Say ( Heike , DH-Surrender-10 ) ;
12207: LD_EXP 15
12211: PPUSH
12212: LD_STRING DH-Surrender-10
12214: PPUSH
12215: CALL_OW 88
// Say ( usCommander , DCa-Surrender-11 ) ;
12219: LD_EXP 30
12223: PPUSH
12224: LD_STRING DCa-Surrender-11
12226: PPUSH
12227: CALL_OW 88
// Say ( Heike , DH-Surrender-12 ) ;
12231: LD_EXP 15
12235: PPUSH
12236: LD_STRING DH-Surrender-12
12238: PPUSH
12239: CALL_OW 88
// Say ( usCommander , DCa-Surrender-13 ) ;
12243: LD_EXP 30
12247: PPUSH
12248: LD_STRING DCa-Surrender-13
12250: PPUSH
12251: CALL_OW 88
// Say ( usCommander , DCa-Surrender-14 ) ;
12255: LD_EXP 30
12259: PPUSH
12260: LD_STRING DCa-Surrender-14
12262: PPUSH
12263: CALL_OW 88
// Say ( usCommander , DCa-Surrender-15 ) ;
12267: LD_EXP 30
12271: PPUSH
12272: LD_STRING DCa-Surrender-15
12274: PPUSH
12275: CALL_OW 88
// Say ( usCommander , DCa-Surrender-16 ) ;
12279: LD_EXP 30
12283: PPUSH
12284: LD_STRING DCa-Surrender-16
12286: PPUSH
12287: CALL_OW 88
// Say ( Kaia , DK-Surrender-17 ) ;
12291: LD_EXP 20
12295: PPUSH
12296: LD_STRING DK-Surrender-17
12298: PPUSH
12299: CALL_OW 88
// Say ( Olaf , DO-Surrender-18 ) ;
12303: LD_EXP 24
12307: PPUSH
12308: LD_STRING DO-Surrender-18
12310: PPUSH
12311: CALL_OW 88
// Say ( Olaf , DO-Surrender-19 ) ;
12315: LD_EXP 24
12319: PPUSH
12320: LD_STRING DO-Surrender-19
12322: PPUSH
12323: CALL_OW 88
// Say ( Kurt , DKs-Surrender-20 ) ;
12327: LD_EXP 25
12331: PPUSH
12332: LD_STRING DKs-Surrender-20
12334: PPUSH
12335: CALL_OW 88
// Say ( Kurt , DKs-Surrender-21 ) ;
12339: LD_EXP 25
12343: PPUSH
12344: LD_STRING DKs-Surrender-21
12346: PPUSH
12347: CALL_OW 88
// Say ( Markov , DMar-Surrender-22 ) ;
12351: LD_EXP 22
12355: PPUSH
12356: LD_STRING DMar-Surrender-22
12358: PPUSH
12359: CALL_OW 88
// Say ( Markov , DMar-Surrender-23 ) ;
12363: LD_EXP 22
12367: PPUSH
12368: LD_STRING DMar-Surrender-23
12370: PPUSH
12371: CALL_OW 88
// Say ( Sophia , DS-Surrender-24 ) ;
12375: LD_EXP 21
12379: PPUSH
12380: LD_STRING DS-Surrender-24
12382: PPUSH
12383: CALL_OW 88
// Say ( Aviradze , DA-Surrender-25 ) ;
12387: LD_EXP 26
12391: PPUSH
12392: LD_STRING DA-Surrender-25
12394: PPUSH
12395: CALL_OW 88
// Say ( Ibrahim , DI-Surrender-26 ) ;
12399: LD_EXP 18
12403: PPUSH
12404: LD_STRING DI-Surrender-26
12406: PPUSH
12407: CALL_OW 88
// Say ( Kamil , DKam-Surrender-27 ) ;
12411: LD_EXP 19
12415: PPUSH
12416: LD_STRING DKam-Surrender-27
12418: PPUSH
12419: CALL_OW 88
// if IsOk ( Givi ) then
12423: LD_EXP 16
12427: PPUSH
12428: CALL_OW 302
12432: IFFALSE 12472
// begin Say ( Givi , DG-Surrender-28 ) ;
12434: LD_EXP 16
12438: PPUSH
12439: LD_STRING DG-Surrender-28
12441: PPUSH
12442: CALL_OW 88
// Say ( Givi , DG-Surrender-29 ) ;
12446: LD_EXP 16
12450: PPUSH
12451: LD_STRING DG-Surrender-29
12453: PPUSH
12454: CALL_OW 88
// Say ( Givi , DG-Surrender-30 ) ;
12458: LD_EXP 16
12462: PPUSH
12463: LD_STRING DG-Surrender-30
12465: PPUSH
12466: CALL_OW 88
// end else
12470: GO 12508
// begin Say ( Heike , DH-Surrender-a-28 ) ;
12472: LD_EXP 15
12476: PPUSH
12477: LD_STRING DH-Surrender-a-28
12479: PPUSH
12480: CALL_OW 88
// Say ( Heike , DH-Surrender-a-29 ) ;
12484: LD_EXP 15
12488: PPUSH
12489: LD_STRING DH-Surrender-a-29
12491: PPUSH
12492: CALL_OW 88
// Say ( Heike , DH-Surrender-a-30 ) ;
12496: LD_EXP 15
12500: PPUSH
12501: LD_STRING DH-Surrender-a-30
12503: PPUSH
12504: CALL_OW 88
// end ; PrepareRussianFirstWaveAttack ;
12508: CALL 14468 0 0
// AgressiveMove ( FilterAllUnits ( [ f_side , 3 ] ) , [ [ 176 , 123 ] ] ) ;
12512: LD_INT 22
12514: PUSH
12515: LD_INT 3
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: PPUSH
12522: CALL_OW 69
12526: PPUSH
12527: LD_INT 176
12529: PUSH
12530: LD_INT 123
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: PUSH
12537: EMPTY
12538: LIST
12539: PPUSH
12540: CALL 55714 0 2
// if not IsEnvironment ( 190 , 150 ) then
12544: LD_INT 190
12546: PPUSH
12547: LD_INT 150
12549: PPUSH
12550: CALL_OW 351
12554: NOT
12555: IFFALSE 12574
// PlaceSeeing ( 190 , 150 , 2 , - 8 ) ;
12557: LD_INT 190
12559: PPUSH
12560: LD_INT 150
12562: PPUSH
12563: LD_INT 2
12565: PPUSH
12566: LD_INT 8
12568: NEG
12569: PPUSH
12570: CALL_OW 330
// CenterOnXY ( 193 , 150 ) ;
12574: LD_INT 193
12576: PPUSH
12577: LD_INT 150
12579: PPUSH
12580: CALL_OW 84
// if IsOk ( Markov ) then
12584: LD_EXP 22
12588: PPUSH
12589: CALL_OW 302
12593: IFFALSE 12609
// Say ( Markov , DMar-Surrender-31 ) else
12595: LD_EXP 22
12599: PPUSH
12600: LD_STRING DMar-Surrender-31
12602: PPUSH
12603: CALL_OW 88
12607: GO 12666
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Surrender-a-31 ) then
12609: LD_EXP 27
12613: PPUSH
12614: LD_INT 26
12616: PUSH
12617: LD_INT 1
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: PPUSH
12624: CALL_OW 72
12628: PPUSH
12629: LD_STRING DArm-Surrender-a-31
12631: PPUSH
12632: CALL 224 0 2
12636: NOT
12637: IFFALSE 12666
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Surrender-a-31 ) ;
12639: LD_EXP 27
12643: PPUSH
12644: LD_INT 26
12646: PUSH
12647: LD_INT 2
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: PPUSH
12654: CALL_OW 72
12658: PPUSH
12659: LD_STRING DArf-Surrender-a-31
12661: PPUSH
12662: CALL 224 0 2
// Say ( Heike , DH-Surrender-32 ) ;
12666: LD_EXP 15
12670: PPUSH
12671: LD_STRING DH-Surrender-32
12673: PPUSH
12674: CALL_OW 88
// InGameOff ;
12678: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
12682: LD_STRING M2
12684: PPUSH
12685: CALL_OW 337
// wait ( 0 0$20 ) ;
12689: LD_INT 700
12691: PPUSH
12692: CALL_OW 67
// PrepareRussianLastWaveAttack ;
12696: CALL 14830 0 0
// russianAttack := true ;
12700: LD_ADDR_EXP 8
12704: PUSH
12705: LD_INT 1
12707: ST_TO_ADDR
// RemoveSeeing ( 190 , 150 , 2 ) ;
12708: LD_INT 190
12710: PPUSH
12711: LD_INT 150
12713: PPUSH
12714: LD_INT 2
12716: PPUSH
12717: CALL_OW 331
// end ;
12721: PPOPN 3
12723: END
// every 0 0$3 trigger seeHeavyGun and not InBattle ( 2 ) and IsOk ( Heike ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) and ( IsOk ( Markov ) or UnitFilter ( heikeSecondSquad , [ f_ok ] ) ) do
12724: LD_EXP 11
12728: PUSH
12729: LD_INT 2
12731: PPUSH
12732: CALL_OW 463
12736: NOT
12737: AND
12738: PUSH
12739: LD_EXP 15
12743: PPUSH
12744: CALL_OW 302
12748: AND
12749: PUSH
12750: LD_INT 22
12752: PUSH
12753: LD_INT 2
12755: PUSH
12756: EMPTY
12757: LIST
12758: LIST
12759: PUSH
12760: LD_INT 30
12762: PUSH
12763: LD_INT 3
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: PPUSH
12774: CALL_OW 69
12778: AND
12779: PUSH
12780: LD_EXP 22
12784: PPUSH
12785: CALL_OW 302
12789: PUSH
12790: LD_EXP 27
12794: PPUSH
12795: LD_INT 50
12797: PUSH
12798: EMPTY
12799: LIST
12800: PPUSH
12801: CALL_OW 72
12805: OR
12806: AND
12807: IFFALSE 13035
12809: GO 12811
12811: DISABLE
// begin DialogueOn ;
12812: CALL_OW 6
// Say ( Heike , DH-Heavy-1 ) ;
12816: LD_EXP 15
12820: PPUSH
12821: LD_STRING DH-Heavy-1
12823: PPUSH
12824: CALL_OW 88
// if IsOk ( Markov ) then
12828: LD_EXP 22
12832: PPUSH
12833: CALL_OW 302
12837: IFFALSE 12962
// begin Say ( Markov , DMar-Heavy-2 ) ;
12839: LD_EXP 22
12843: PPUSH
12844: LD_STRING DMar-Heavy-2
12846: PPUSH
12847: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
12851: LD_INT 22
12853: PUSH
12854: LD_INT 2
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: PUSH
12861: LD_INT 30
12863: PUSH
12864: LD_INT 3
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: PPUSH
12875: CALL_OW 69
12879: PUSH
12880: LD_INT 1
12882: ARRAY
12883: PPUSH
12884: CALL_OW 87
// Say ( Markov , DMar-Heavy-3 ) ;
12888: LD_EXP 22
12892: PPUSH
12893: LD_STRING DMar-Heavy-3
12895: PPUSH
12896: CALL_OW 88
// Say ( Markov , DMar-Heavy-4 ) ;
12900: LD_EXP 22
12904: PPUSH
12905: LD_STRING DMar-Heavy-4
12907: PPUSH
12908: CALL_OW 88
// Say ( Markov , DMar-Heavy-5 ) ;
12912: LD_EXP 22
12916: PPUSH
12917: LD_STRING DMar-Heavy-5
12919: PPUSH
12920: CALL_OW 88
// Say ( Markov , DMar-Heavy-6 ) ;
12924: LD_EXP 22
12928: PPUSH
12929: LD_STRING DMar-Heavy-6
12931: PPUSH
12932: CALL_OW 88
// Say ( Heike , DH-Heavy-7 ) ;
12936: LD_EXP 15
12940: PPUSH
12941: LD_STRING DH-Heavy-7
12943: PPUSH
12944: CALL_OW 88
// Say ( Heike , DH-Heavy-8 ) ;
12948: LD_EXP 15
12952: PPUSH
12953: LD_STRING DH-Heavy-8
12955: PPUSH
12956: CALL_OW 88
// end else
12960: GO 13019
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Heavy-a-2 ) then
12962: LD_EXP 27
12966: PPUSH
12967: LD_INT 26
12969: PUSH
12970: LD_INT 1
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: PPUSH
12977: CALL_OW 72
12981: PPUSH
12982: LD_STRING DArm-Heavy-a-2
12984: PPUSH
12985: CALL 224 0 2
12989: NOT
12990: IFFALSE 13019
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Heavy-a-2 ) ;
12992: LD_EXP 27
12996: PPUSH
12997: LD_INT 26
12999: PUSH
13000: LD_INT 2
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: PPUSH
13007: CALL_OW 72
13011: PPUSH
13012: LD_STRING DArf-Heavy-a-2
13014: PPUSH
13015: CALL 224 0 2
// end ; Say ( Heike , DH-Heavy-9 ) ;
13019: LD_EXP 15
13023: PPUSH
13024: LD_STRING DH-Heavy-9
13026: PPUSH
13027: CALL_OW 88
// DialogueOff ;
13031: CALL_OW 7
// end ;
13035: END
// every 0 0$2 trigger UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) and IsOk ( Heike ) and not usSurrender do
13036: LD_EXP 34
13040: PPUSH
13041: LD_INT 101
13043: PUSH
13044: LD_INT 2
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: PPUSH
13051: CALL_OW 72
13055: PUSH
13056: LD_EXP 15
13060: PPUSH
13061: CALL_OW 302
13065: AND
13066: PUSH
13067: LD_EXP 7
13071: NOT
13072: AND
13073: IFFALSE 13216
13075: GO 13077
13077: DISABLE
// begin DialogueOn ;
13078: CALL_OW 6
// CenterNowOnUnits ( UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) ) ;
13082: LD_EXP 34
13086: PPUSH
13087: LD_INT 101
13089: PUSH
13090: LD_INT 2
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: PPUSH
13097: CALL_OW 72
13101: PPUSH
13102: CALL_OW 87
// Say ( Heike , DH-Flank-1 ) ;
13106: LD_EXP 15
13110: PPUSH
13111: LD_STRING DH-Flank-1
13113: PPUSH
13114: CALL_OW 88
// if IsOk ( Mike ) then
13118: LD_EXP 17
13122: PPUSH
13123: CALL_OW 302
13127: IFFALSE 13143
// Say ( Mike , DM-Flank-2 ) else
13129: LD_EXP 17
13133: PPUSH
13134: LD_STRING DM-Flank-2
13136: PPUSH
13137: CALL_OW 88
13141: GO 13200
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Flank-a-2 ) then
13143: LD_EXP 27
13147: PPUSH
13148: LD_INT 26
13150: PUSH
13151: LD_INT 1
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: PPUSH
13158: CALL_OW 72
13162: PPUSH
13163: LD_STRING DArm-Flank-a-2
13165: PPUSH
13166: CALL 224 0 2
13170: NOT
13171: IFFALSE 13200
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArm-Flank-a-2 ) ;
13173: LD_EXP 27
13177: PPUSH
13178: LD_INT 26
13180: PUSH
13181: LD_INT 2
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PPUSH
13188: CALL_OW 72
13192: PPUSH
13193: LD_STRING DArm-Flank-a-2
13195: PPUSH
13196: CALL 224 0 2
// Say ( Heike , DH-Flank-3 ) ;
13200: LD_EXP 15
13204: PPUSH
13205: LD_STRING DH-Flank-3
13207: PPUSH
13208: CALL_OW 88
// DialogueOff ;
13212: CALL_OW 7
// end ;
13216: END
// every 0 0$3 trigger seeRemoteVehicle and not usSurrender do
13217: LD_EXP 10
13221: PUSH
13222: LD_EXP 7
13226: NOT
13227: AND
13228: IFFALSE 13452
13230: GO 13232
13232: DISABLE
// begin DialogueOn ;
13233: CALL_OW 6
// Say ( Heike , DH-USRC-1 ) ;
13237: LD_EXP 15
13241: PPUSH
13242: LD_STRING DH-USRC-1
13244: PPUSH
13245: CALL_OW 88
// if IsOk ( Markov ) then
13249: LD_EXP 22
13253: PPUSH
13254: CALL_OW 302
13258: IFFALSE 13274
// Say ( Markov , DMar-USRC-2 ) else
13260: LD_EXP 22
13264: PPUSH
13265: LD_STRING DMar-USRC-2
13267: PPUSH
13268: CALL_OW 88
13272: GO 13331
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-USRC-a-2 ) then
13274: LD_EXP 27
13278: PPUSH
13279: LD_INT 26
13281: PUSH
13282: LD_INT 1
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: PPUSH
13289: CALL_OW 72
13293: PPUSH
13294: LD_STRING DArm-USRC-a-2
13296: PPUSH
13297: CALL 224 0 2
13301: NOT
13302: IFFALSE 13331
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-USRC-a-2 ) ;
13304: LD_EXP 27
13308: PPUSH
13309: LD_INT 26
13311: PUSH
13312: LD_INT 2
13314: PUSH
13315: EMPTY
13316: LIST
13317: LIST
13318: PPUSH
13319: CALL_OW 72
13323: PPUSH
13324: LD_STRING DArf-USRC-a-2
13326: PPUSH
13327: CALL 224 0 2
// DialogueOff ;
13331: CALL_OW 7
// wait ( 0 0$10 ) ;
13335: LD_INT 350
13337: PPUSH
13338: CALL_OW 67
// Say ( Heike , DH-USRC-3 ) ;
13342: LD_EXP 15
13346: PPUSH
13347: LD_STRING DH-USRC-3
13349: PPUSH
13350: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13354: LD_INT 35
13356: PPUSH
13357: CALL_OW 67
// until See ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
13361: LD_INT 2
13363: PPUSH
13364: LD_INT 22
13366: PUSH
13367: LD_INT 1
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: PUSH
13374: LD_INT 30
13376: PUSH
13377: LD_INT 36
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: PPUSH
13388: CALL_OW 69
13392: PUSH
13393: LD_INT 1
13395: ARRAY
13396: PPUSH
13397: CALL_OW 292
13401: IFFALSE 13354
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
13403: LD_INT 22
13405: PUSH
13406: LD_INT 1
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: PUSH
13413: LD_INT 30
13415: PUSH
13416: LD_INT 36
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: PPUSH
13427: CALL_OW 69
13431: PUSH
13432: LD_INT 1
13434: ARRAY
13435: PPUSH
13436: CALL_OW 87
// Say ( Heike , DH-USRCFound-1 ) ;
13440: LD_EXP 15
13444: PPUSH
13445: LD_STRING DH-USRCFound-1
13447: PPUSH
13448: CALL_OW 88
// end ;
13452: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
13453: LD_EXP 20
13457: PPUSH
13458: CALL_OW 256
13462: PUSH
13463: LD_INT 3
13465: LESS
13466: IFFALSE 13503
13468: GO 13470
13470: DISABLE
// begin DialogueOn ;
13471: CALL_OW 6
// ForceSay ( Kaia , DK-Dead-1 ) ;
13475: LD_EXP 20
13479: PPUSH
13480: LD_STRING DK-Dead-1
13482: PPUSH
13483: CALL_OW 91
// ForceSay ( Kaia , DK-Dead-2 ) ;
13487: LD_EXP 20
13491: PPUSH
13492: LD_STRING DK-Dead-2
13494: PPUSH
13495: CALL_OW 91
// DialogueOff ;
13499: CALL_OW 7
// end ;
13503: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_bweapon , ar_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] ] ] ) do
13504: LD_INT 22
13506: PUSH
13507: LD_INT 2
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: PUSH
13514: LD_INT 2
13516: PUSH
13517: LD_INT 35
13519: PUSH
13520: LD_INT 28
13522: PUSH
13523: EMPTY
13524: LIST
13525: LIST
13526: PUSH
13527: LD_INT 34
13529: PUSH
13530: LD_INT 28
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: LIST
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PPUSH
13546: CALL_OW 69
13550: IFFALSE 13563
13552: GO 13554
13554: DISABLE
// hasRockets := true ;
13555: LD_ADDR_EXP 9
13559: PUSH
13560: LD_INT 1
13562: ST_TO_ADDR
13563: END
// every 0 0$1 trigger russianAttack and not FilterAllUnits ( [ f_side , 3 ] ) do
13564: LD_EXP 8
13568: PUSH
13569: LD_INT 22
13571: PUSH
13572: LD_INT 3
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: PPUSH
13579: CALL_OW 69
13583: NOT
13584: AND
13585: IFFALSE 14247
13587: GO 13589
13589: DISABLE
// begin DialogueOn ;
13590: CALL_OW 6
// if vehLossCounter = 0 then
13594: LD_EXP 14
13598: PUSH
13599: LD_INT 0
13601: EQUAL
13602: IFFALSE 13611
// SetAchievement ( ACH_UNTOUCH ) ;
13604: LD_STRING ACH_UNTOUCH
13606: PPUSH
13607: CALL_OW 543
// if tick < 35 35$00 then
13611: LD_OWVAR 1
13615: PUSH
13616: LD_INT 73500
13618: LESS
13619: IFFALSE 13628
// SetAchievement ( ACH_HSPEED_7 ) ;
13621: LD_STRING ACH_HSPEED_7
13623: PPUSH
13624: CALL_OW 543
// CenterNowOnUnits ( Heike ) ;
13628: LD_EXP 15
13632: PPUSH
13633: CALL_OW 87
// Say ( Heike , DH-End-1 ) ;
13637: LD_EXP 15
13641: PPUSH
13642: LD_STRING DH-End-1
13644: PPUSH
13645: CALL_OW 88
// SayRadio ( Shariff , DShar-End-2 ) ;
13649: LD_EXP 23
13653: PPUSH
13654: LD_STRING DShar-End-2
13656: PPUSH
13657: CALL_OW 94
// Say ( Kaia , DK-End-3 ) ;
13661: LD_EXP 20
13665: PPUSH
13666: LD_STRING DK-End-3
13668: PPUSH
13669: CALL_OW 88
// Say ( Heike , DH-End-4 ) ;
13673: LD_EXP 15
13677: PPUSH
13678: LD_STRING DH-End-4
13680: PPUSH
13681: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
13685: LD_EXP 23
13689: PPUSH
13690: LD_STRING DShar-End-5
13692: PPUSH
13693: CALL_OW 94
// if IsOk ( Markov ) then
13697: LD_EXP 22
13701: PPUSH
13702: CALL_OW 302
13706: IFFALSE 13720
// Say ( Kaia , DK-End-6 ) ;
13708: LD_EXP 20
13712: PPUSH
13713: LD_STRING DK-End-6
13715: PPUSH
13716: CALL_OW 88
// Say ( Kaia , DK-End-7 ) ;
13720: LD_EXP 20
13724: PPUSH
13725: LD_STRING DK-End-7
13727: PPUSH
13728: CALL_OW 88
// if IsOk ( Kaia ) then
13732: LD_EXP 20
13736: PPUSH
13737: CALL_OW 302
13741: IFFALSE 13779
// begin Say ( Givi , DG-End-8 ) ;
13743: LD_EXP 16
13747: PPUSH
13748: LD_STRING DG-End-8
13750: PPUSH
13751: CALL_OW 88
// Say ( Givi , DG-End-9 ) ;
13755: LD_EXP 16
13759: PPUSH
13760: LD_STRING DG-End-9
13762: PPUSH
13763: CALL_OW 88
// Say ( Heike , DH-End-10 ) ;
13767: LD_EXP 15
13771: PPUSH
13772: LD_STRING DH-End-10
13774: PPUSH
13775: CALL_OW 88
// end ; Say ( Heike , DH-End-11 ) ;
13779: LD_EXP 15
13783: PPUSH
13784: LD_STRING DH-End-11
13786: PPUSH
13787: CALL_OW 88
// if GetTech ( tech_MatDet , 2 ) = state_researched then
13791: LD_INT 7
13793: PPUSH
13794: LD_INT 2
13796: PPUSH
13797: CALL_OW 321
13801: PUSH
13802: LD_INT 2
13804: EQUAL
13805: IFFALSE 13819
// AddMedal ( med1 , 1 ) else
13807: LD_STRING med1
13809: PPUSH
13810: LD_INT 1
13812: PPUSH
13813: CALL_OW 101
13817: GO 13830
// AddMedal ( med1 , - 1 ) ;
13819: LD_STRING med1
13821: PPUSH
13822: LD_INT 1
13824: NEG
13825: PPUSH
13826: CALL_OW 101
// if hasRockets then
13830: LD_EXP 9
13834: IFFALSE 13848
// AddMedal ( med2 , 1 ) else
13836: LD_STRING med2
13838: PPUSH
13839: LD_INT 1
13841: PPUSH
13842: CALL_OW 101
13846: GO 13859
// AddMedal ( med2 , - 1 ) ;
13848: LD_STRING med2
13850: PPUSH
13851: LD_INT 1
13853: NEG
13854: PPUSH
13855: CALL_OW 101
// if tick < [ 50 50$00 , 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
13859: LD_OWVAR 1
13863: PUSH
13864: LD_INT 105000
13866: PUSH
13867: LD_INT 94500
13869: PUSH
13870: LD_INT 84000
13872: PUSH
13873: LD_INT 73500
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: PUSH
13882: LD_OWVAR 67
13886: ARRAY
13887: LESS
13888: IFFALSE 13902
// AddMedal ( med3 , 1 ) else
13890: LD_STRING med3
13892: PPUSH
13893: LD_INT 1
13895: PPUSH
13896: CALL_OW 101
13900: GO 13913
// AddMedal ( med3 , - 1 ) ;
13902: LD_STRING med3
13904: PPUSH
13905: LD_INT 1
13907: NEG
13908: PPUSH
13909: CALL_OW 101
// GiveMedals ( MAIN ) ;
13913: LD_STRING MAIN
13915: PPUSH
13916: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13920: LD_INT 22
13922: PUSH
13923: LD_INT 2
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: PUSH
13930: LD_INT 23
13932: PUSH
13933: LD_INT 2
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: PUSH
13940: LD_INT 21
13942: PUSH
13943: LD_INT 1
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: LIST
13954: PPUSH
13955: CALL_OW 69
13959: PPUSH
13960: CALL_OW 43
// SaveCharacters ( usCommander , 07_UsCommander ) ;
13964: LD_EXP 30
13968: PPUSH
13969: LD_STRING 07_UsCommander
13971: PPUSH
13972: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff usCommander , 07_Americans ) ;
13976: LD_INT 22
13978: PUSH
13979: LD_INT 1
13981: PUSH
13982: EMPTY
13983: LIST
13984: LIST
13985: PUSH
13986: LD_INT 23
13988: PUSH
13989: LD_INT 1
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PUSH
13996: LD_INT 21
13998: PUSH
13999: LD_INT 1
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: LIST
14010: PPUSH
14011: CALL_OW 69
14015: PUSH
14016: LD_EXP 30
14020: DIFF
14021: PPUSH
14022: LD_STRING 07_Americans
14024: PPUSH
14025: CALL_OW 38
// SaveCharacters ( Heike , 07_Heike ) ;
14029: LD_EXP 15
14033: PPUSH
14034: LD_STRING 07_Heike
14036: PPUSH
14037: CALL_OW 38
// if Aviradze then
14041: LD_EXP 26
14045: IFFALSE 14059
// SaveCharacters ( Aviradze , 07_Aviradze ) ;
14047: LD_EXP 26
14051: PPUSH
14052: LD_STRING 07_Aviradze
14054: PPUSH
14055: CALL_OW 38
// if Ibrahim then
14059: LD_EXP 18
14063: IFFALSE 14077
// SaveCharacters ( Ibrahim , 07_Ibrahim ) ;
14065: LD_EXP 18
14069: PPUSH
14070: LD_STRING 07_Ibrahim
14072: PPUSH
14073: CALL_OW 38
// if Kamil then
14077: LD_EXP 19
14081: IFFALSE 14095
// SaveCharacters ( Kamil , 07_Kamil ) ;
14083: LD_EXP 19
14087: PPUSH
14088: LD_STRING 07_Kamil
14090: PPUSH
14091: CALL_OW 38
// if Sophia then
14095: LD_EXP 21
14099: IFFALSE 14113
// SaveCharacters ( Sophia , 07_Sophia ) ;
14101: LD_EXP 21
14105: PPUSH
14106: LD_STRING 07_Sophia
14108: PPUSH
14109: CALL_OW 38
// if Kaia then
14113: LD_EXP 20
14117: IFFALSE 14131
// SaveCharacters ( Kaia , 07_Kaia ) ;
14119: LD_EXP 20
14123: PPUSH
14124: LD_STRING 07_Kaia
14126: PPUSH
14127: CALL_OW 38
// if Givi then
14131: LD_EXP 16
14135: IFFALSE 14149
// SaveCharacters ( Givi , 07_Givi ) ;
14137: LD_EXP 16
14141: PPUSH
14142: LD_STRING 07_Givi
14144: PPUSH
14145: CALL_OW 38
// if Mike then
14149: LD_EXP 17
14153: IFFALSE 14167
// SaveCharacters ( Mike , 07_Mike ) ;
14155: LD_EXP 17
14159: PPUSH
14160: LD_STRING 07_Mike
14162: PPUSH
14163: CALL_OW 38
// if Markov then
14167: LD_EXP 22
14171: IFFALSE 14185
// SaveCharacters ( Markov , 07_Markov ) ;
14173: LD_EXP 22
14177: PPUSH
14178: LD_STRING 07_Markov
14180: PPUSH
14181: CALL_OW 38
// if Kurt then
14185: LD_EXP 25
14189: IFFALSE 14203
// SaveCharacters ( Kurt , 07_Kurt ) ;
14191: LD_EXP 25
14195: PPUSH
14196: LD_STRING 07_Kurt
14198: PPUSH
14199: CALL_OW 38
// if Olaf then
14203: LD_EXP 24
14207: IFFALSE 14221
// SaveCharacters ( Olaf , 07_Olaf ) ;
14209: LD_EXP 24
14213: PPUSH
14214: LD_STRING 07_Olaf
14216: PPUSH
14217: CALL_OW 38
// if heikeSecondSquad then
14221: LD_EXP 27
14225: IFFALSE 14239
// SaveCharacters ( heikeSecondSquad , 07_others ) ;
14227: LD_EXP 27
14231: PPUSH
14232: LD_STRING 07_others
14234: PPUSH
14235: CALL_OW 38
// YouWin ;
14239: CALL_OW 103
// DialogueOff ;
14243: CALL_OW 7
// end ; end_of_file
14247: END
// every 1 1$20 + 0 0$40 trigger GetResourceArea ( cratesRiverArea , mat_cans ) < [ 12 , 10 , 8 , 8 ] [ Difficulty ] do
14248: LD_INT 7
14250: PPUSH
14251: LD_INT 1
14253: PPUSH
14254: CALL_OW 287
14258: PUSH
14259: LD_INT 12
14261: PUSH
14262: LD_INT 10
14264: PUSH
14265: LD_INT 8
14267: PUSH
14268: LD_INT 8
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: PUSH
14277: LD_OWVAR 67
14281: ARRAY
14282: LESS
14283: IFFALSE 14310
14285: GO 14287
14287: DISABLE
// begin enable ;
14288: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesRiverArea , true ) ;
14289: LD_INT 1
14291: PPUSH
14292: LD_INT 5
14294: PPUSH
14295: CALL_OW 12
14299: PPUSH
14300: LD_INT 7
14302: PPUSH
14303: LD_INT 1
14305: PPUSH
14306: CALL_OW 55
// end ;
14310: END
// every 0 0$40 + 0 0$40 trigger GetResourceArea ( cratesForestArea , mat_cans ) < [ 25 , 22 , 17 , 14 ] [ Difficulty ] and tick < 24 24$00 do
14311: LD_INT 8
14313: PPUSH
14314: LD_INT 1
14316: PPUSH
14317: CALL_OW 287
14321: PUSH
14322: LD_INT 25
14324: PUSH
14325: LD_INT 22
14327: PUSH
14328: LD_INT 17
14330: PUSH
14331: LD_INT 14
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: PUSH
14340: LD_OWVAR 67
14344: ARRAY
14345: LESS
14346: PUSH
14347: LD_OWVAR 1
14351: PUSH
14352: LD_INT 50400
14354: LESS
14355: AND
14356: IFFALSE 14383
14358: GO 14360
14360: DISABLE
// begin enable ;
14361: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesForestArea , true ) ;
14362: LD_INT 1
14364: PPUSH
14365: LD_INT 5
14367: PPUSH
14368: CALL_OW 12
14372: PPUSH
14373: LD_INT 8
14375: PPUSH
14376: LD_INT 1
14378: PPUSH
14379: CALL_OW 55
// end ;
14383: END
// every 0 0$40 trigger tick < 8 8$10 do
14384: LD_OWVAR 1
14388: PUSH
14389: LD_INT 17150
14391: LESS
14392: IFFALSE 14425
14394: GO 14396
14396: DISABLE
// begin enable ;
14397: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 130 , 18 , 12 , true ) ;
14398: LD_INT 1
14400: PPUSH
14401: LD_INT 5
14403: PPUSH
14404: CALL_OW 12
14408: PPUSH
14409: LD_INT 130
14411: PPUSH
14412: LD_INT 18
14414: PPUSH
14415: LD_INT 12
14417: PPUSH
14418: LD_INT 1
14420: PPUSH
14421: CALL_OW 56
// end ;
14425: END
// every 1 1$00 + 0 0$30 trigger tick < 6 6$10 do
14426: LD_OWVAR 1
14430: PUSH
14431: LD_INT 12950
14433: LESS
14434: IFFALSE 14467
14436: GO 14438
14438: DISABLE
// begin enable ;
14439: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 172 , 97 , 12 , true ) ;
14440: LD_INT 1
14442: PPUSH
14443: LD_INT 5
14445: PPUSH
14446: CALL_OW 12
14450: PPUSH
14451: LD_INT 172
14453: PPUSH
14454: LD_INT 97
14456: PPUSH
14457: LD_INT 12
14459: PPUSH
14460: LD_INT 1
14462: PPUSH
14463: CALL_OW 56
// end ; end_of_file
14467: END
// export function PrepareRussianFirstWaveAttack ; var i , tmp , un , veh ; begin
14468: LD_INT 0
14470: PPUSH
14471: PPUSH
14472: PPUSH
14473: PPUSH
14474: PPUSH
// uc_side := 3 ;
14475: LD_ADDR_OWVAR 20
14479: PUSH
14480: LD_INT 3
14482: ST_TO_ADDR
// uc_nation := 3 ;
14483: LD_ADDR_OWVAR 21
14487: PUSH
14488: LD_INT 3
14490: ST_TO_ADDR
// tmp := [ [ 184 , 144 , 5 ] , [ 191 , 147 , 5 ] , [ 202 , 151 , 4 ] , [ 210 , 152 , 4 ] ] ;
14491: LD_ADDR_VAR 0 3
14495: PUSH
14496: LD_INT 184
14498: PUSH
14499: LD_INT 144
14501: PUSH
14502: LD_INT 5
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: LIST
14509: PUSH
14510: LD_INT 191
14512: PUSH
14513: LD_INT 147
14515: PUSH
14516: LD_INT 5
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: LIST
14523: PUSH
14524: LD_INT 202
14526: PUSH
14527: LD_INT 151
14529: PUSH
14530: LD_INT 4
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: LIST
14537: PUSH
14538: LD_INT 210
14540: PUSH
14541: LD_INT 152
14543: PUSH
14544: LD_INT 4
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: LIST
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: ST_TO_ADDR
// for i := 1 to 3 do
14558: LD_ADDR_VAR 0 2
14562: PUSH
14563: DOUBLE
14564: LD_INT 1
14566: DEC
14567: ST_TO_ADDR
14568: LD_INT 3
14570: PUSH
14571: FOR_TO
14572: IFFALSE 14741
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_gun ] [ i mod 3 + 1 ] , 40 ) ;
14574: LD_INT 24
14576: PPUSH
14577: LD_INT 1
14579: PPUSH
14580: LD_INT 1
14582: PPUSH
14583: LD_INT 43
14585: PUSH
14586: LD_INT 44
14588: PUSH
14589: LD_INT 46
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: LIST
14596: PUSH
14597: LD_VAR 0 2
14601: PUSH
14602: LD_INT 3
14604: MOD
14605: PUSH
14606: LD_INT 1
14608: PLUS
14609: ARRAY
14610: PPUSH
14611: LD_INT 40
14613: PPUSH
14614: CALL 20657 0 5
// veh := CreateVehicle ;
14618: LD_ADDR_VAR 0 5
14622: PUSH
14623: CALL_OW 45
14627: ST_TO_ADDR
// SetDir ( veh , tmp [ i ] [ 3 ] ) ;
14628: LD_VAR 0 5
14632: PPUSH
14633: LD_VAR 0 3
14637: PUSH
14638: LD_VAR 0 2
14642: ARRAY
14643: PUSH
14644: LD_INT 3
14646: ARRAY
14647: PPUSH
14648: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
14652: LD_VAR 0 5
14656: PPUSH
14657: LD_VAR 0 3
14661: PUSH
14662: LD_VAR 0 2
14666: ARRAY
14667: PUSH
14668: LD_INT 1
14670: ARRAY
14671: PPUSH
14672: LD_VAR 0 3
14676: PUSH
14677: LD_VAR 0 2
14681: ARRAY
14682: PUSH
14683: LD_INT 2
14685: ARRAY
14686: PPUSH
14687: LD_INT 0
14689: PPUSH
14690: CALL_OW 48
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14694: LD_INT 0
14696: PPUSH
14697: LD_INT 6
14699: PUSH
14700: LD_INT 7
14702: PUSH
14703: LD_INT 8
14705: PUSH
14706: LD_INT 8
14708: PUSH
14709: EMPTY
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: PUSH
14715: LD_OWVAR 67
14719: ARRAY
14720: PPUSH
14721: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
14725: CALL_OW 44
14729: PPUSH
14730: LD_VAR 0 5
14734: PPUSH
14735: CALL_OW 52
// end ;
14739: GO 14571
14741: POP
14742: POP
// for i := 1 to 4 do
14743: LD_ADDR_VAR 0 2
14747: PUSH
14748: DOUBLE
14749: LD_INT 1
14751: DEC
14752: ST_TO_ADDR
14753: LD_INT 4
14755: PUSH
14756: FOR_TO
14757: IFFALSE 14823
// begin PrepareSoldier ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14759: LD_INT 0
14761: PPUSH
14762: LD_INT 6
14764: PUSH
14765: LD_INT 7
14767: PUSH
14768: LD_INT 8
14770: PUSH
14771: LD_INT 8
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: PUSH
14780: LD_OWVAR 67
14784: ARRAY
14785: PPUSH
14786: CALL_OW 381
// un := CreateHuman ;
14790: LD_ADDR_VAR 0 4
14794: PUSH
14795: CALL_OW 44
14799: ST_TO_ADDR
// PlaceUnitXYR ( un , 185 , 145 , 6 , false ) ;
14800: LD_VAR 0 4
14804: PPUSH
14805: LD_INT 185
14807: PPUSH
14808: LD_INT 145
14810: PPUSH
14811: LD_INT 6
14813: PPUSH
14814: LD_INT 0
14816: PPUSH
14817: CALL_OW 50
// end ;
14821: GO 14756
14823: POP
14824: POP
// end ;
14825: LD_VAR 0 1
14829: RET
// export function PrepareRussianLastWaveAttack ; var i , veh ; begin
14830: LD_INT 0
14832: PPUSH
14833: PPUSH
14834: PPUSH
// uc_side := 3 ;
14835: LD_ADDR_OWVAR 20
14839: PUSH
14840: LD_INT 3
14842: ST_TO_ADDR
// if Difficulty > 1 then
14843: LD_OWVAR 67
14847: PUSH
14848: LD_INT 1
14850: GREATER
14851: IFFALSE 15013
// begin uc_nation := 0 ;
14853: LD_ADDR_OWVAR 21
14857: PUSH
14858: LD_INT 0
14860: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty + 1 ] do
14861: LD_ADDR_VAR 0 2
14865: PUSH
14866: DOUBLE
14867: LD_INT 1
14869: DEC
14870: ST_TO_ADDR
14871: LD_INT 4
14873: PUSH
14874: LD_INT 5
14876: PUSH
14877: LD_INT 6
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: LIST
14884: PUSH
14885: LD_OWVAR 67
14889: PUSH
14890: LD_INT 1
14892: PLUS
14893: ARRAY
14894: PUSH
14895: FOR_TO
14896: IFFALSE 15011
// begin hc_class := class_apeman_soldier ;
14898: LD_ADDR_OWVAR 28
14902: PUSH
14903: LD_INT 15
14905: ST_TO_ADDR
// hc_gallery :=  ;
14906: LD_ADDR_OWVAR 33
14910: PUSH
14911: LD_STRING 
14913: ST_TO_ADDR
// hc_name := [ Treci , Ivan , Yaromir , Nadzieia , Krasna , Piaty ] [ rand ( 1 , 6 ) ] ;
14914: LD_ADDR_OWVAR 26
14918: PUSH
14919: LD_STRING Treci
14921: PUSH
14922: LD_STRING Ivan
14924: PUSH
14925: LD_STRING Yaromir
14927: PUSH
14928: LD_STRING Nadzieia
14930: PUSH
14931: LD_STRING Krasna
14933: PUSH
14934: LD_STRING Piaty
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 1
14947: PPUSH
14948: LD_INT 6
14950: PPUSH
14951: CALL_OW 12
14955: ARRAY
14956: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 0 , 0 ] ;
14957: LD_ADDR_OWVAR 31
14961: PUSH
14962: LD_INT 5
14964: PUSH
14965: LD_INT 0
14967: PUSH
14968: LD_INT 0
14970: PUSH
14971: LD_INT 0
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: ST_TO_ADDR
// hc_sex := sex_male ;
14980: LD_ADDR_OWVAR 27
14984: PUSH
14985: LD_INT 1
14987: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 178 , 148 , 6 , false ) ;
14988: CALL_OW 44
14992: PPUSH
14993: LD_INT 178
14995: PPUSH
14996: LD_INT 148
14998: PPUSH
14999: LD_INT 6
15001: PPUSH
15002: LD_INT 0
15004: PPUSH
15005: CALL_OW 50
// end ;
15009: GO 14895
15011: POP
15012: POP
// end ; for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
15013: LD_ADDR_VAR 0 2
15017: PUSH
15018: DOUBLE
15019: LD_INT 1
15021: DEC
15022: ST_TO_ADDR
15023: LD_INT 2
15025: PUSH
15026: LD_INT 3
15028: PUSH
15029: LD_INT 4
15031: PUSH
15032: LD_INT 5
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: PUSH
15041: LD_OWVAR 67
15045: ARRAY
15046: PUSH
15047: FOR_TO
15048: IFFALSE 15215
// begin uc_nation := 3 ;
15050: LD_ADDR_OWVAR 21
15054: PUSH
15055: LD_INT 3
15057: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gatling_gun , ru_gun ] [ i mod 3 + 1 ] , 44 ) ;
15058: LD_INT 22
15060: PPUSH
15061: LD_INT 1
15063: PPUSH
15064: LD_INT 1
15066: PPUSH
15067: LD_INT 45
15069: PUSH
15070: LD_INT 43
15072: PUSH
15073: LD_INT 44
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: LIST
15080: PUSH
15081: LD_VAR 0 2
15085: PUSH
15086: LD_INT 3
15088: MOD
15089: PUSH
15090: LD_INT 1
15092: PLUS
15093: ARRAY
15094: PPUSH
15095: LD_INT 44
15097: PPUSH
15098: CALL 20657 0 5
// veh := CreateVehicle ;
15102: LD_ADDR_VAR 0 3
15106: PUSH
15107: CALL_OW 45
15111: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
15112: LD_VAR 0 3
15116: PPUSH
15117: LD_INT 4
15119: PPUSH
15120: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
15124: LD_VAR 0 3
15128: PPUSH
15129: LD_INT 1
15131: PPUSH
15132: LD_INT 0
15134: PPUSH
15135: CALL_OW 49
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
15139: LD_INT 0
15141: PPUSH
15142: LD_INT 6
15144: PUSH
15145: LD_INT 7
15147: PUSH
15148: LD_INT 8
15150: PUSH
15151: LD_INT 8
15153: PUSH
15154: EMPTY
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: PUSH
15160: LD_OWVAR 67
15164: ARRAY
15165: PPUSH
15166: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
15170: CALL_OW 44
15174: PPUSH
15175: LD_VAR 0 3
15179: PPUSH
15180: CALL_OW 52
// AgressiveMove ( veh , [ [ 178 , 137 ] ] ) ;
15184: LD_VAR 0 3
15188: PPUSH
15189: LD_INT 178
15191: PUSH
15192: LD_INT 137
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: PUSH
15199: EMPTY
15200: LIST
15201: PPUSH
15202: CALL 55714 0 2
// wait ( 0 0$2 ) ;
15206: LD_INT 70
15208: PPUSH
15209: CALL_OW 67
// end ;
15213: GO 15047
15215: POP
15216: POP
// end ;
15217: LD_VAR 0 1
15221: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i , tmp ;
15222: LD_INT 22
15224: PUSH
15225: LD_INT 3
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: PUSH
15232: LD_INT 32
15234: PUSH
15235: LD_INT 1
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: PUSH
15242: EMPTY
15243: LIST
15244: LIST
15245: PPUSH
15246: CALL_OW 69
15250: IFFALSE 15338
15252: GO 15254
15254: DISABLE
15255: LD_INT 0
15257: PPUSH
15258: PPUSH
// begin enable ;
15259: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) ;
15260: LD_ADDR_VAR 0 2
15264: PUSH
15265: LD_INT 22
15267: PUSH
15268: LD_INT 3
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: PUSH
15275: LD_INT 32
15277: PUSH
15278: LD_INT 1
15280: PUSH
15281: EMPTY
15282: LIST
15283: LIST
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: PPUSH
15289: CALL_OW 69
15293: ST_TO_ADDR
// for i in tmp do
15294: LD_ADDR_VAR 0 1
15298: PUSH
15299: LD_VAR 0 2
15303: PUSH
15304: FOR_IN
15305: IFFALSE 15336
// if GetFuel ( i ) < 3 then
15307: LD_VAR 0 1
15311: PPUSH
15312: CALL_OW 261
15316: PUSH
15317: LD_INT 3
15319: LESS
15320: IFFALSE 15334
// SetFuel ( i , 3 ) ;
15322: LD_VAR 0 1
15326: PPUSH
15327: LD_INT 3
15329: PPUSH
15330: CALL_OW 240
15334: GO 15304
15336: POP
15337: POP
// end ;
15338: PPOPN 2
15340: END
// every 0 0$1 trigger russianAttack and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i , mech , tmp ;
15341: LD_EXP 8
15345: PUSH
15346: LD_INT 22
15348: PUSH
15349: LD_INT 3
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: LD_INT 21
15358: PUSH
15359: LD_INT 1
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: PPUSH
15370: CALL_OW 69
15374: AND
15375: IFFALSE 15639
15377: GO 15379
15379: DISABLE
15380: LD_INT 0
15382: PPUSH
15383: PPUSH
15384: PPUSH
// begin enable ;
15385: ENABLE
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] ] ) ;
15386: LD_ADDR_VAR 0 2
15390: PUSH
15391: LD_INT 22
15393: PUSH
15394: LD_INT 3
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: LD_INT 25
15403: PUSH
15404: LD_INT 3
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: LD_INT 3
15413: PUSH
15414: LD_INT 55
15416: PUSH
15417: EMPTY
15418: LIST
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: LIST
15428: PPUSH
15429: CALL_OW 69
15433: ST_TO_ADDR
// if mech then
15434: LD_VAR 0 2
15438: IFFALSE 15508
// for i in mech do
15440: LD_ADDR_VAR 0 1
15444: PUSH
15445: LD_VAR 0 2
15449: PUSH
15450: FOR_IN
15451: IFFALSE 15506
// begin if IsInArea ( i , escapeArea ) then
15453: LD_VAR 0 1
15457: PPUSH
15458: LD_INT 13
15460: PPUSH
15461: CALL_OW 308
15465: IFFALSE 15478
// RemoveUnit ( i ) else
15467: LD_VAR 0 1
15471: PPUSH
15472: CALL_OW 64
15476: GO 15504
// if IsOk ( i ) then
15478: LD_VAR 0 1
15482: PPUSH
15483: CALL_OW 302
15487: IFFALSE 15504
// ComMoveXY ( i , 196 , 155 ) ;
15489: LD_VAR 0 1
15493: PPUSH
15494: LD_INT 196
15496: PPUSH
15497: LD_INT 155
15499: PPUSH
15500: CALL_OW 111
// end ;
15504: GO 15450
15506: POP
15507: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_apeman_soldier ] , [ f_type , unit_vehicle ] ] , [ f_ok ] ] ) ;
15508: LD_ADDR_VAR 0 3
15512: PUSH
15513: LD_INT 22
15515: PUSH
15516: LD_INT 3
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: PUSH
15523: LD_INT 2
15525: PUSH
15526: LD_INT 25
15528: PUSH
15529: LD_INT 1
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 25
15538: PUSH
15539: LD_INT 15
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: LD_INT 21
15548: PUSH
15549: LD_INT 2
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: PUSH
15562: LD_INT 50
15564: PUSH
15565: EMPTY
15566: LIST
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: LIST
15572: PPUSH
15573: CALL_OW 69
15577: ST_TO_ADDR
// if tmp then
15578: LD_VAR 0 3
15582: IFFALSE 15639
// AgressiveMove ( tmp , [ [ 171 , 106 ] , [ 145 , 69 ] , [ 132 , 38 ] , [ 126 , 15 ] ] ) ;
15584: LD_VAR 0 3
15588: PPUSH
15589: LD_INT 171
15591: PUSH
15592: LD_INT 106
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: PUSH
15599: LD_INT 145
15601: PUSH
15602: LD_INT 69
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: PUSH
15609: LD_INT 132
15611: PUSH
15612: LD_INT 38
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: PUSH
15619: LD_INT 126
15621: PUSH
15622: LD_INT 15
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: PPUSH
15635: CALL 55714 0 2
// end ; end_of_file
15639: PPOPN 3
15641: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15642: LD_INT 0
15644: PPUSH
15645: PPUSH
// if exist_mode then
15646: LD_VAR 0 2
15650: IFFALSE 15675
// unit := CreateCharacter ( prefix & ident ) else
15652: LD_ADDR_VAR 0 5
15656: PUSH
15657: LD_VAR 0 3
15661: PUSH
15662: LD_VAR 0 1
15666: STR
15667: PPUSH
15668: CALL_OW 34
15672: ST_TO_ADDR
15673: GO 15690
// unit := NewCharacter ( ident ) ;
15675: LD_ADDR_VAR 0 5
15679: PUSH
15680: LD_VAR 0 1
15684: PPUSH
15685: CALL_OW 25
15689: ST_TO_ADDR
// result := unit ;
15690: LD_ADDR_VAR 0 4
15694: PUSH
15695: LD_VAR 0 5
15699: ST_TO_ADDR
// end ;
15700: LD_VAR 0 4
15704: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15705: LD_INT 0
15707: PPUSH
15708: PPUSH
// if not side or not nation then
15709: LD_VAR 0 1
15713: NOT
15714: PUSH
15715: LD_VAR 0 2
15719: NOT
15720: OR
15721: IFFALSE 15725
// exit ;
15723: GO 16493
// case nation of nation_american :
15725: LD_VAR 0 2
15729: PUSH
15730: LD_INT 1
15732: DOUBLE
15733: EQUAL
15734: IFTRUE 15738
15736: GO 15952
15738: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15739: LD_ADDR_VAR 0 4
15743: PUSH
15744: LD_INT 35
15746: PUSH
15747: LD_INT 45
15749: PUSH
15750: LD_INT 46
15752: PUSH
15753: LD_INT 47
15755: PUSH
15756: LD_INT 82
15758: PUSH
15759: LD_INT 83
15761: PUSH
15762: LD_INT 84
15764: PUSH
15765: LD_INT 85
15767: PUSH
15768: LD_INT 86
15770: PUSH
15771: LD_INT 1
15773: PUSH
15774: LD_INT 2
15776: PUSH
15777: LD_INT 6
15779: PUSH
15780: LD_INT 15
15782: PUSH
15783: LD_INT 16
15785: PUSH
15786: LD_INT 7
15788: PUSH
15789: LD_INT 12
15791: PUSH
15792: LD_INT 13
15794: PUSH
15795: LD_INT 10
15797: PUSH
15798: LD_INT 14
15800: PUSH
15801: LD_INT 20
15803: PUSH
15804: LD_INT 21
15806: PUSH
15807: LD_INT 22
15809: PUSH
15810: LD_INT 25
15812: PUSH
15813: LD_INT 32
15815: PUSH
15816: LD_INT 27
15818: PUSH
15819: LD_INT 36
15821: PUSH
15822: LD_INT 69
15824: PUSH
15825: LD_INT 39
15827: PUSH
15828: LD_INT 34
15830: PUSH
15831: LD_INT 40
15833: PUSH
15834: LD_INT 48
15836: PUSH
15837: LD_INT 49
15839: PUSH
15840: LD_INT 50
15842: PUSH
15843: LD_INT 51
15845: PUSH
15846: LD_INT 52
15848: PUSH
15849: LD_INT 53
15851: PUSH
15852: LD_INT 54
15854: PUSH
15855: LD_INT 55
15857: PUSH
15858: LD_INT 56
15860: PUSH
15861: LD_INT 57
15863: PUSH
15864: LD_INT 58
15866: PUSH
15867: LD_INT 59
15869: PUSH
15870: LD_INT 60
15872: PUSH
15873: LD_INT 61
15875: PUSH
15876: LD_INT 62
15878: PUSH
15879: LD_INT 80
15881: PUSH
15882: LD_INT 82
15884: PUSH
15885: LD_INT 83
15887: PUSH
15888: LD_INT 84
15890: PUSH
15891: LD_INT 85
15893: PUSH
15894: LD_INT 86
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: ST_TO_ADDR
15950: GO 16417
15952: LD_INT 2
15954: DOUBLE
15955: EQUAL
15956: IFTRUE 15960
15958: GO 16186
15960: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15961: LD_ADDR_VAR 0 4
15965: PUSH
15966: LD_INT 35
15968: PUSH
15969: LD_INT 45
15971: PUSH
15972: LD_INT 46
15974: PUSH
15975: LD_INT 47
15977: PUSH
15978: LD_INT 82
15980: PUSH
15981: LD_INT 83
15983: PUSH
15984: LD_INT 84
15986: PUSH
15987: LD_INT 85
15989: PUSH
15990: LD_INT 87
15992: PUSH
15993: LD_INT 70
15995: PUSH
15996: LD_INT 1
15998: PUSH
15999: LD_INT 11
16001: PUSH
16002: LD_INT 3
16004: PUSH
16005: LD_INT 4
16007: PUSH
16008: LD_INT 5
16010: PUSH
16011: LD_INT 6
16013: PUSH
16014: LD_INT 15
16016: PUSH
16017: LD_INT 18
16019: PUSH
16020: LD_INT 7
16022: PUSH
16023: LD_INT 17
16025: PUSH
16026: LD_INT 8
16028: PUSH
16029: LD_INT 20
16031: PUSH
16032: LD_INT 21
16034: PUSH
16035: LD_INT 22
16037: PUSH
16038: LD_INT 72
16040: PUSH
16041: LD_INT 26
16043: PUSH
16044: LD_INT 69
16046: PUSH
16047: LD_INT 39
16049: PUSH
16050: LD_INT 40
16052: PUSH
16053: LD_INT 41
16055: PUSH
16056: LD_INT 42
16058: PUSH
16059: LD_INT 43
16061: PUSH
16062: LD_INT 48
16064: PUSH
16065: LD_INT 49
16067: PUSH
16068: LD_INT 50
16070: PUSH
16071: LD_INT 51
16073: PUSH
16074: LD_INT 52
16076: PUSH
16077: LD_INT 53
16079: PUSH
16080: LD_INT 54
16082: PUSH
16083: LD_INT 55
16085: PUSH
16086: LD_INT 56
16088: PUSH
16089: LD_INT 60
16091: PUSH
16092: LD_INT 61
16094: PUSH
16095: LD_INT 62
16097: PUSH
16098: LD_INT 66
16100: PUSH
16101: LD_INT 67
16103: PUSH
16104: LD_INT 68
16106: PUSH
16107: LD_INT 81
16109: PUSH
16110: LD_INT 82
16112: PUSH
16113: LD_INT 83
16115: PUSH
16116: LD_INT 84
16118: PUSH
16119: LD_INT 85
16121: PUSH
16122: LD_INT 87
16124: PUSH
16125: LD_INT 88
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: ST_TO_ADDR
16184: GO 16417
16186: LD_INT 3
16188: DOUBLE
16189: EQUAL
16190: IFTRUE 16194
16192: GO 16416
16194: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
16195: LD_ADDR_VAR 0 4
16199: PUSH
16200: LD_INT 46
16202: PUSH
16203: LD_INT 47
16205: PUSH
16206: LD_INT 1
16208: PUSH
16209: LD_INT 2
16211: PUSH
16212: LD_INT 82
16214: PUSH
16215: LD_INT 83
16217: PUSH
16218: LD_INT 84
16220: PUSH
16221: LD_INT 85
16223: PUSH
16224: LD_INT 86
16226: PUSH
16227: LD_INT 11
16229: PUSH
16230: LD_INT 9
16232: PUSH
16233: LD_INT 20
16235: PUSH
16236: LD_INT 19
16238: PUSH
16239: LD_INT 21
16241: PUSH
16242: LD_INT 24
16244: PUSH
16245: LD_INT 22
16247: PUSH
16248: LD_INT 25
16250: PUSH
16251: LD_INT 28
16253: PUSH
16254: LD_INT 29
16256: PUSH
16257: LD_INT 30
16259: PUSH
16260: LD_INT 31
16262: PUSH
16263: LD_INT 37
16265: PUSH
16266: LD_INT 38
16268: PUSH
16269: LD_INT 32
16271: PUSH
16272: LD_INT 27
16274: PUSH
16275: LD_INT 33
16277: PUSH
16278: LD_INT 69
16280: PUSH
16281: LD_INT 39
16283: PUSH
16284: LD_INT 34
16286: PUSH
16287: LD_INT 40
16289: PUSH
16290: LD_INT 71
16292: PUSH
16293: LD_INT 23
16295: PUSH
16296: LD_INT 44
16298: PUSH
16299: LD_INT 48
16301: PUSH
16302: LD_INT 49
16304: PUSH
16305: LD_INT 50
16307: PUSH
16308: LD_INT 51
16310: PUSH
16311: LD_INT 52
16313: PUSH
16314: LD_INT 53
16316: PUSH
16317: LD_INT 54
16319: PUSH
16320: LD_INT 55
16322: PUSH
16323: LD_INT 56
16325: PUSH
16326: LD_INT 57
16328: PUSH
16329: LD_INT 58
16331: PUSH
16332: LD_INT 59
16334: PUSH
16335: LD_INT 63
16337: PUSH
16338: LD_INT 64
16340: PUSH
16341: LD_INT 65
16343: PUSH
16344: LD_INT 82
16346: PUSH
16347: LD_INT 83
16349: PUSH
16350: LD_INT 84
16352: PUSH
16353: LD_INT 85
16355: PUSH
16356: LD_INT 86
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: LIST
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: ST_TO_ADDR
16414: GO 16417
16416: POP
// if state > - 1 and state < 3 then
16417: LD_VAR 0 3
16421: PUSH
16422: LD_INT 1
16424: NEG
16425: GREATER
16426: PUSH
16427: LD_VAR 0 3
16431: PUSH
16432: LD_INT 3
16434: LESS
16435: AND
16436: IFFALSE 16493
// for i in result do
16438: LD_ADDR_VAR 0 5
16442: PUSH
16443: LD_VAR 0 4
16447: PUSH
16448: FOR_IN
16449: IFFALSE 16491
// if GetTech ( i , side ) <> state then
16451: LD_VAR 0 5
16455: PPUSH
16456: LD_VAR 0 1
16460: PPUSH
16461: CALL_OW 321
16465: PUSH
16466: LD_VAR 0 3
16470: NONEQUAL
16471: IFFALSE 16489
// result := result diff i ;
16473: LD_ADDR_VAR 0 4
16477: PUSH
16478: LD_VAR 0 4
16482: PUSH
16483: LD_VAR 0 5
16487: DIFF
16488: ST_TO_ADDR
16489: GO 16448
16491: POP
16492: POP
// end ;
16493: LD_VAR 0 4
16497: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16498: LD_INT 0
16500: PPUSH
16501: PPUSH
16502: PPUSH
// result := true ;
16503: LD_ADDR_VAR 0 3
16507: PUSH
16508: LD_INT 1
16510: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16511: LD_ADDR_VAR 0 5
16515: PUSH
16516: LD_VAR 0 2
16520: PPUSH
16521: CALL_OW 480
16525: ST_TO_ADDR
// if not tmp then
16526: LD_VAR 0 5
16530: NOT
16531: IFFALSE 16535
// exit ;
16533: GO 16584
// for i in tmp do
16535: LD_ADDR_VAR 0 4
16539: PUSH
16540: LD_VAR 0 5
16544: PUSH
16545: FOR_IN
16546: IFFALSE 16582
// if GetTech ( i , side ) <> state_researched then
16548: LD_VAR 0 4
16552: PPUSH
16553: LD_VAR 0 1
16557: PPUSH
16558: CALL_OW 321
16562: PUSH
16563: LD_INT 2
16565: NONEQUAL
16566: IFFALSE 16580
// begin result := false ;
16568: LD_ADDR_VAR 0 3
16572: PUSH
16573: LD_INT 0
16575: ST_TO_ADDR
// exit ;
16576: POP
16577: POP
16578: GO 16584
// end ;
16580: GO 16545
16582: POP
16583: POP
// end ;
16584: LD_VAR 0 3
16588: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16589: LD_INT 0
16591: PPUSH
16592: PPUSH
16593: PPUSH
16594: PPUSH
16595: PPUSH
16596: PPUSH
16597: PPUSH
16598: PPUSH
16599: PPUSH
16600: PPUSH
16601: PPUSH
16602: PPUSH
16603: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16604: LD_VAR 0 1
16608: NOT
16609: PUSH
16610: LD_VAR 0 1
16614: PPUSH
16615: CALL_OW 257
16619: PUSH
16620: LD_INT 9
16622: NONEQUAL
16623: OR
16624: IFFALSE 16628
// exit ;
16626: GO 17201
// side := GetSide ( unit ) ;
16628: LD_ADDR_VAR 0 9
16632: PUSH
16633: LD_VAR 0 1
16637: PPUSH
16638: CALL_OW 255
16642: ST_TO_ADDR
// tech_space := tech_spacanom ;
16643: LD_ADDR_VAR 0 12
16647: PUSH
16648: LD_INT 29
16650: ST_TO_ADDR
// tech_time := tech_taurad ;
16651: LD_ADDR_VAR 0 13
16655: PUSH
16656: LD_INT 28
16658: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16659: LD_ADDR_VAR 0 11
16663: PUSH
16664: LD_VAR 0 1
16668: PPUSH
16669: CALL_OW 310
16673: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16674: LD_VAR 0 11
16678: PPUSH
16679: CALL_OW 247
16683: PUSH
16684: LD_INT 2
16686: EQUAL
16687: IFFALSE 16691
// exit ;
16689: GO 17201
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16691: LD_ADDR_VAR 0 8
16695: PUSH
16696: LD_INT 81
16698: PUSH
16699: LD_VAR 0 9
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: PUSH
16708: LD_INT 3
16710: PUSH
16711: LD_INT 21
16713: PUSH
16714: LD_INT 3
16716: PUSH
16717: EMPTY
16718: LIST
16719: LIST
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: PUSH
16725: EMPTY
16726: LIST
16727: LIST
16728: PPUSH
16729: CALL_OW 69
16733: ST_TO_ADDR
// if not tmp then
16734: LD_VAR 0 8
16738: NOT
16739: IFFALSE 16743
// exit ;
16741: GO 17201
// if in_unit then
16743: LD_VAR 0 11
16747: IFFALSE 16771
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16749: LD_ADDR_VAR 0 10
16753: PUSH
16754: LD_VAR 0 8
16758: PPUSH
16759: LD_VAR 0 11
16763: PPUSH
16764: CALL_OW 74
16768: ST_TO_ADDR
16769: GO 16791
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16771: LD_ADDR_VAR 0 10
16775: PUSH
16776: LD_VAR 0 8
16780: PPUSH
16781: LD_VAR 0 1
16785: PPUSH
16786: CALL_OW 74
16790: ST_TO_ADDR
// if not enemy then
16791: LD_VAR 0 10
16795: NOT
16796: IFFALSE 16800
// exit ;
16798: GO 17201
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16800: LD_VAR 0 11
16804: PUSH
16805: LD_VAR 0 11
16809: PPUSH
16810: LD_VAR 0 10
16814: PPUSH
16815: CALL_OW 296
16819: PUSH
16820: LD_INT 13
16822: GREATER
16823: AND
16824: PUSH
16825: LD_VAR 0 1
16829: PPUSH
16830: LD_VAR 0 10
16834: PPUSH
16835: CALL_OW 296
16839: PUSH
16840: LD_INT 12
16842: GREATER
16843: OR
16844: IFFALSE 16848
// exit ;
16846: GO 17201
// missile := [ 1 ] ;
16848: LD_ADDR_VAR 0 14
16852: PUSH
16853: LD_INT 1
16855: PUSH
16856: EMPTY
16857: LIST
16858: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16859: LD_VAR 0 9
16863: PPUSH
16864: LD_VAR 0 12
16868: PPUSH
16869: CALL_OW 325
16873: IFFALSE 16902
// missile := Replace ( missile , missile + 1 , 2 ) ;
16875: LD_ADDR_VAR 0 14
16879: PUSH
16880: LD_VAR 0 14
16884: PPUSH
16885: LD_VAR 0 14
16889: PUSH
16890: LD_INT 1
16892: PLUS
16893: PPUSH
16894: LD_INT 2
16896: PPUSH
16897: CALL_OW 1
16901: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16902: LD_VAR 0 9
16906: PPUSH
16907: LD_VAR 0 13
16911: PPUSH
16912: CALL_OW 325
16916: PUSH
16917: LD_VAR 0 10
16921: PPUSH
16922: CALL_OW 255
16926: PPUSH
16927: LD_VAR 0 13
16931: PPUSH
16932: CALL_OW 325
16936: NOT
16937: AND
16938: IFFALSE 16967
// missile := Replace ( missile , missile + 1 , 3 ) ;
16940: LD_ADDR_VAR 0 14
16944: PUSH
16945: LD_VAR 0 14
16949: PPUSH
16950: LD_VAR 0 14
16954: PUSH
16955: LD_INT 1
16957: PLUS
16958: PPUSH
16959: LD_INT 3
16961: PPUSH
16962: CALL_OW 1
16966: ST_TO_ADDR
// if missile < 2 then
16967: LD_VAR 0 14
16971: PUSH
16972: LD_INT 2
16974: LESS
16975: IFFALSE 16979
// exit ;
16977: GO 17201
// x := GetX ( enemy ) ;
16979: LD_ADDR_VAR 0 4
16983: PUSH
16984: LD_VAR 0 10
16988: PPUSH
16989: CALL_OW 250
16993: ST_TO_ADDR
// y := GetY ( enemy ) ;
16994: LD_ADDR_VAR 0 5
16998: PUSH
16999: LD_VAR 0 10
17003: PPUSH
17004: CALL_OW 251
17008: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17009: LD_ADDR_VAR 0 6
17013: PUSH
17014: LD_VAR 0 4
17018: PUSH
17019: LD_INT 1
17021: NEG
17022: PPUSH
17023: LD_INT 1
17025: PPUSH
17026: CALL_OW 12
17030: PLUS
17031: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17032: LD_ADDR_VAR 0 7
17036: PUSH
17037: LD_VAR 0 5
17041: PUSH
17042: LD_INT 1
17044: NEG
17045: PPUSH
17046: LD_INT 1
17048: PPUSH
17049: CALL_OW 12
17053: PLUS
17054: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17055: LD_VAR 0 6
17059: PPUSH
17060: LD_VAR 0 7
17064: PPUSH
17065: CALL_OW 488
17069: NOT
17070: IFFALSE 17092
// begin _x := x ;
17072: LD_ADDR_VAR 0 6
17076: PUSH
17077: LD_VAR 0 4
17081: ST_TO_ADDR
// _y := y ;
17082: LD_ADDR_VAR 0 7
17086: PUSH
17087: LD_VAR 0 5
17091: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17092: LD_ADDR_VAR 0 3
17096: PUSH
17097: LD_INT 1
17099: PPUSH
17100: LD_VAR 0 14
17104: PPUSH
17105: CALL_OW 12
17109: ST_TO_ADDR
// case i of 1 :
17110: LD_VAR 0 3
17114: PUSH
17115: LD_INT 1
17117: DOUBLE
17118: EQUAL
17119: IFTRUE 17123
17121: GO 17140
17123: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17124: LD_VAR 0 1
17128: PPUSH
17129: LD_VAR 0 10
17133: PPUSH
17134: CALL_OW 115
17138: GO 17201
17140: LD_INT 2
17142: DOUBLE
17143: EQUAL
17144: IFTRUE 17148
17146: GO 17170
17148: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17149: LD_VAR 0 1
17153: PPUSH
17154: LD_VAR 0 6
17158: PPUSH
17159: LD_VAR 0 7
17163: PPUSH
17164: CALL_OW 153
17168: GO 17201
17170: LD_INT 3
17172: DOUBLE
17173: EQUAL
17174: IFTRUE 17178
17176: GO 17200
17178: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17179: LD_VAR 0 1
17183: PPUSH
17184: LD_VAR 0 6
17188: PPUSH
17189: LD_VAR 0 7
17193: PPUSH
17194: CALL_OW 154
17198: GO 17201
17200: POP
// end ;
17201: LD_VAR 0 2
17205: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17206: LD_INT 0
17208: PPUSH
17209: PPUSH
17210: PPUSH
17211: PPUSH
17212: PPUSH
17213: PPUSH
// if not unit or not building then
17214: LD_VAR 0 1
17218: NOT
17219: PUSH
17220: LD_VAR 0 2
17224: NOT
17225: OR
17226: IFFALSE 17230
// exit ;
17228: GO 17388
// x := GetX ( building ) ;
17230: LD_ADDR_VAR 0 5
17234: PUSH
17235: LD_VAR 0 2
17239: PPUSH
17240: CALL_OW 250
17244: ST_TO_ADDR
// y := GetY ( building ) ;
17245: LD_ADDR_VAR 0 6
17249: PUSH
17250: LD_VAR 0 2
17254: PPUSH
17255: CALL_OW 251
17259: ST_TO_ADDR
// for i = 0 to 5 do
17260: LD_ADDR_VAR 0 4
17264: PUSH
17265: DOUBLE
17266: LD_INT 0
17268: DEC
17269: ST_TO_ADDR
17270: LD_INT 5
17272: PUSH
17273: FOR_TO
17274: IFFALSE 17386
// begin _x := ShiftX ( x , i , 3 ) ;
17276: LD_ADDR_VAR 0 7
17280: PUSH
17281: LD_VAR 0 5
17285: PPUSH
17286: LD_VAR 0 4
17290: PPUSH
17291: LD_INT 3
17293: PPUSH
17294: CALL_OW 272
17298: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17299: LD_ADDR_VAR 0 8
17303: PUSH
17304: LD_VAR 0 6
17308: PPUSH
17309: LD_VAR 0 4
17313: PPUSH
17314: LD_INT 3
17316: PPUSH
17317: CALL_OW 273
17321: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17322: LD_VAR 0 7
17326: PPUSH
17327: LD_VAR 0 8
17331: PPUSH
17332: CALL_OW 488
17336: NOT
17337: IFFALSE 17341
// continue ;
17339: GO 17273
// if HexInfo ( _x , _y ) = 0 then
17341: LD_VAR 0 7
17345: PPUSH
17346: LD_VAR 0 8
17350: PPUSH
17351: CALL_OW 428
17355: PUSH
17356: LD_INT 0
17358: EQUAL
17359: IFFALSE 17384
// begin ComMoveXY ( unit , _x , _y ) ;
17361: LD_VAR 0 1
17365: PPUSH
17366: LD_VAR 0 7
17370: PPUSH
17371: LD_VAR 0 8
17375: PPUSH
17376: CALL_OW 111
// exit ;
17380: POP
17381: POP
17382: GO 17388
// end ; end ;
17384: GO 17273
17386: POP
17387: POP
// end ;
17388: LD_VAR 0 3
17392: RET
// export function ScanBase ( side , base_area ) ; begin
17393: LD_INT 0
17395: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17396: LD_ADDR_VAR 0 3
17400: PUSH
17401: LD_VAR 0 2
17405: PPUSH
17406: LD_INT 81
17408: PUSH
17409: LD_VAR 0 1
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: PPUSH
17418: CALL_OW 70
17422: ST_TO_ADDR
// end ;
17423: LD_VAR 0 3
17427: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17428: LD_INT 0
17430: PPUSH
17431: PPUSH
17432: PPUSH
17433: PPUSH
// result := false ;
17434: LD_ADDR_VAR 0 2
17438: PUSH
17439: LD_INT 0
17441: ST_TO_ADDR
// side := GetSide ( unit ) ;
17442: LD_ADDR_VAR 0 3
17446: PUSH
17447: LD_VAR 0 1
17451: PPUSH
17452: CALL_OW 255
17456: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17457: LD_ADDR_VAR 0 4
17461: PUSH
17462: LD_VAR 0 1
17466: PPUSH
17467: CALL_OW 248
17471: ST_TO_ADDR
// case nat of 1 :
17472: LD_VAR 0 4
17476: PUSH
17477: LD_INT 1
17479: DOUBLE
17480: EQUAL
17481: IFTRUE 17485
17483: GO 17496
17485: POP
// tech := tech_lassight ; 2 :
17486: LD_ADDR_VAR 0 5
17490: PUSH
17491: LD_INT 12
17493: ST_TO_ADDR
17494: GO 17535
17496: LD_INT 2
17498: DOUBLE
17499: EQUAL
17500: IFTRUE 17504
17502: GO 17515
17504: POP
// tech := tech_mortar ; 3 :
17505: LD_ADDR_VAR 0 5
17509: PUSH
17510: LD_INT 41
17512: ST_TO_ADDR
17513: GO 17535
17515: LD_INT 3
17517: DOUBLE
17518: EQUAL
17519: IFTRUE 17523
17521: GO 17534
17523: POP
// tech := tech_bazooka ; end ;
17524: LD_ADDR_VAR 0 5
17528: PUSH
17529: LD_INT 44
17531: ST_TO_ADDR
17532: GO 17535
17534: POP
// if Researched ( side , tech ) then
17535: LD_VAR 0 3
17539: PPUSH
17540: LD_VAR 0 5
17544: PPUSH
17545: CALL_OW 325
17549: IFFALSE 17576
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17551: LD_ADDR_VAR 0 2
17555: PUSH
17556: LD_INT 5
17558: PUSH
17559: LD_INT 8
17561: PUSH
17562: LD_INT 9
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: LIST
17569: PUSH
17570: LD_VAR 0 4
17574: ARRAY
17575: ST_TO_ADDR
// end ;
17576: LD_VAR 0 2
17580: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17581: LD_INT 0
17583: PPUSH
17584: PPUSH
17585: PPUSH
// if not mines then
17586: LD_VAR 0 2
17590: NOT
17591: IFFALSE 17595
// exit ;
17593: GO 17739
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17595: LD_ADDR_VAR 0 5
17599: PUSH
17600: LD_INT 81
17602: PUSH
17603: LD_VAR 0 1
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: PUSH
17612: LD_INT 3
17614: PUSH
17615: LD_INT 21
17617: PUSH
17618: LD_INT 3
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: PPUSH
17633: CALL_OW 69
17637: ST_TO_ADDR
// for i in mines do
17638: LD_ADDR_VAR 0 4
17642: PUSH
17643: LD_VAR 0 2
17647: PUSH
17648: FOR_IN
17649: IFFALSE 17737
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17651: LD_VAR 0 4
17655: PUSH
17656: LD_INT 1
17658: ARRAY
17659: PPUSH
17660: LD_VAR 0 4
17664: PUSH
17665: LD_INT 2
17667: ARRAY
17668: PPUSH
17669: CALL_OW 458
17673: NOT
17674: IFFALSE 17678
// continue ;
17676: GO 17648
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17678: LD_VAR 0 4
17682: PUSH
17683: LD_INT 1
17685: ARRAY
17686: PPUSH
17687: LD_VAR 0 4
17691: PUSH
17692: LD_INT 2
17694: ARRAY
17695: PPUSH
17696: CALL_OW 428
17700: PUSH
17701: LD_VAR 0 5
17705: IN
17706: IFFALSE 17735
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17708: LD_VAR 0 4
17712: PUSH
17713: LD_INT 1
17715: ARRAY
17716: PPUSH
17717: LD_VAR 0 4
17721: PUSH
17722: LD_INT 2
17724: ARRAY
17725: PPUSH
17726: LD_VAR 0 1
17730: PPUSH
17731: CALL_OW 456
// end ;
17735: GO 17648
17737: POP
17738: POP
// end ;
17739: LD_VAR 0 3
17743: RET
// export function Count ( array ) ; var i ; begin
17744: LD_INT 0
17746: PPUSH
17747: PPUSH
// result := 0 ;
17748: LD_ADDR_VAR 0 2
17752: PUSH
17753: LD_INT 0
17755: ST_TO_ADDR
// for i in array do
17756: LD_ADDR_VAR 0 3
17760: PUSH
17761: LD_VAR 0 1
17765: PUSH
17766: FOR_IN
17767: IFFALSE 17791
// if i then
17769: LD_VAR 0 3
17773: IFFALSE 17789
// result := result + 1 ;
17775: LD_ADDR_VAR 0 2
17779: PUSH
17780: LD_VAR 0 2
17784: PUSH
17785: LD_INT 1
17787: PLUS
17788: ST_TO_ADDR
17789: GO 17766
17791: POP
17792: POP
// end ;
17793: LD_VAR 0 2
17797: RET
// export function IsEmpty ( building ) ; begin
17798: LD_INT 0
17800: PPUSH
// if not building then
17801: LD_VAR 0 1
17805: NOT
17806: IFFALSE 17810
// exit ;
17808: GO 17853
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17810: LD_ADDR_VAR 0 2
17814: PUSH
17815: LD_VAR 0 1
17819: PUSH
17820: LD_INT 22
17822: PUSH
17823: LD_VAR 0 1
17827: PPUSH
17828: CALL_OW 255
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: PUSH
17837: LD_INT 58
17839: PUSH
17840: EMPTY
17841: LIST
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PPUSH
17847: CALL_OW 69
17851: IN
17852: ST_TO_ADDR
// end ;
17853: LD_VAR 0 2
17857: RET
// export function IsNotFull ( building ) ; var places ; begin
17858: LD_INT 0
17860: PPUSH
17861: PPUSH
// if not building then
17862: LD_VAR 0 1
17866: NOT
17867: IFFALSE 17871
// exit ;
17869: GO 18042
// result := false ;
17871: LD_ADDR_VAR 0 2
17875: PUSH
17876: LD_INT 0
17878: ST_TO_ADDR
// places := 0 ;
17879: LD_ADDR_VAR 0 3
17883: PUSH
17884: LD_INT 0
17886: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
17887: LD_VAR 0 1
17891: PPUSH
17892: CALL_OW 266
17896: PUSH
17897: LD_INT 0
17899: DOUBLE
17900: EQUAL
17901: IFTRUE 17959
17903: LD_INT 1
17905: DOUBLE
17906: EQUAL
17907: IFTRUE 17959
17909: LD_INT 6
17911: DOUBLE
17912: EQUAL
17913: IFTRUE 17959
17915: LD_INT 7
17917: DOUBLE
17918: EQUAL
17919: IFTRUE 17959
17921: LD_INT 8
17923: DOUBLE
17924: EQUAL
17925: IFTRUE 17959
17927: LD_INT 4
17929: DOUBLE
17930: EQUAL
17931: IFTRUE 17959
17933: LD_INT 5
17935: DOUBLE
17936: EQUAL
17937: IFTRUE 17959
17939: LD_INT 2
17941: DOUBLE
17942: EQUAL
17943: IFTRUE 17959
17945: LD_INT 3
17947: DOUBLE
17948: EQUAL
17949: IFTRUE 17959
17951: LD_INT 35
17953: DOUBLE
17954: EQUAL
17955: IFTRUE 17959
17957: GO 17970
17959: POP
// places := 6 ; b_bunker , b_breastwork :
17960: LD_ADDR_VAR 0 3
17964: PUSH
17965: LD_INT 6
17967: ST_TO_ADDR
17968: GO 18015
17970: LD_INT 32
17972: DOUBLE
17973: EQUAL
17974: IFTRUE 17984
17976: LD_INT 31
17978: DOUBLE
17979: EQUAL
17980: IFTRUE 17984
17982: GO 17995
17984: POP
// places := 1 ; b_control_tower :
17985: LD_ADDR_VAR 0 3
17989: PUSH
17990: LD_INT 1
17992: ST_TO_ADDR
17993: GO 18015
17995: LD_INT 36
17997: DOUBLE
17998: EQUAL
17999: IFTRUE 18003
18001: GO 18014
18003: POP
// places := 3 ; end ;
18004: LD_ADDR_VAR 0 3
18008: PUSH
18009: LD_INT 3
18011: ST_TO_ADDR
18012: GO 18015
18014: POP
// if places then
18015: LD_VAR 0 3
18019: IFFALSE 18042
// result := UnitsInside ( building ) < places ;
18021: LD_ADDR_VAR 0 2
18025: PUSH
18026: LD_VAR 0 1
18030: PPUSH
18031: CALL_OW 313
18035: PUSH
18036: LD_VAR 0 3
18040: LESS
18041: ST_TO_ADDR
// end ;
18042: LD_VAR 0 2
18046: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18047: LD_INT 0
18049: PPUSH
18050: PPUSH
18051: PPUSH
18052: PPUSH
// tmp := [ ] ;
18053: LD_ADDR_VAR 0 3
18057: PUSH
18058: EMPTY
18059: ST_TO_ADDR
// list := [ ] ;
18060: LD_ADDR_VAR 0 5
18064: PUSH
18065: EMPTY
18066: ST_TO_ADDR
// for i = 16 to 25 do
18067: LD_ADDR_VAR 0 4
18071: PUSH
18072: DOUBLE
18073: LD_INT 16
18075: DEC
18076: ST_TO_ADDR
18077: LD_INT 25
18079: PUSH
18080: FOR_TO
18081: IFFALSE 18154
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18083: LD_ADDR_VAR 0 3
18087: PUSH
18088: LD_VAR 0 3
18092: PUSH
18093: LD_INT 22
18095: PUSH
18096: LD_VAR 0 1
18100: PPUSH
18101: CALL_OW 255
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PUSH
18110: LD_INT 91
18112: PUSH
18113: LD_VAR 0 1
18117: PUSH
18118: LD_INT 6
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: LIST
18125: PUSH
18126: LD_INT 30
18128: PUSH
18129: LD_VAR 0 4
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: LIST
18142: PUSH
18143: EMPTY
18144: LIST
18145: PPUSH
18146: CALL_OW 69
18150: ADD
18151: ST_TO_ADDR
18152: GO 18080
18154: POP
18155: POP
// for i = 1 to tmp do
18156: LD_ADDR_VAR 0 4
18160: PUSH
18161: DOUBLE
18162: LD_INT 1
18164: DEC
18165: ST_TO_ADDR
18166: LD_VAR 0 3
18170: PUSH
18171: FOR_TO
18172: IFFALSE 18260
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18174: LD_ADDR_VAR 0 5
18178: PUSH
18179: LD_VAR 0 5
18183: PUSH
18184: LD_VAR 0 3
18188: PUSH
18189: LD_VAR 0 4
18193: ARRAY
18194: PPUSH
18195: CALL_OW 266
18199: PUSH
18200: LD_VAR 0 3
18204: PUSH
18205: LD_VAR 0 4
18209: ARRAY
18210: PPUSH
18211: CALL_OW 250
18215: PUSH
18216: LD_VAR 0 3
18220: PUSH
18221: LD_VAR 0 4
18225: ARRAY
18226: PPUSH
18227: CALL_OW 251
18231: PUSH
18232: LD_VAR 0 3
18236: PUSH
18237: LD_VAR 0 4
18241: ARRAY
18242: PPUSH
18243: CALL_OW 254
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: PUSH
18254: EMPTY
18255: LIST
18256: ADD
18257: ST_TO_ADDR
18258: GO 18171
18260: POP
18261: POP
// result := list ;
18262: LD_ADDR_VAR 0 2
18266: PUSH
18267: LD_VAR 0 5
18271: ST_TO_ADDR
// end ;
18272: LD_VAR 0 2
18276: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18277: LD_INT 0
18279: PPUSH
18280: PPUSH
18281: PPUSH
18282: PPUSH
18283: PPUSH
18284: PPUSH
18285: PPUSH
// if not factory then
18286: LD_VAR 0 1
18290: NOT
18291: IFFALSE 18295
// exit ;
18293: GO 18888
// if control = control_apeman then
18295: LD_VAR 0 4
18299: PUSH
18300: LD_INT 5
18302: EQUAL
18303: IFFALSE 18412
// begin tmp := UnitsInside ( factory ) ;
18305: LD_ADDR_VAR 0 8
18309: PUSH
18310: LD_VAR 0 1
18314: PPUSH
18315: CALL_OW 313
18319: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18320: LD_VAR 0 8
18324: PPUSH
18325: LD_INT 25
18327: PUSH
18328: LD_INT 12
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PPUSH
18335: CALL_OW 72
18339: NOT
18340: IFFALSE 18350
// control := control_manual ;
18342: LD_ADDR_VAR 0 4
18346: PUSH
18347: LD_INT 1
18349: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18350: LD_ADDR_VAR 0 8
18354: PUSH
18355: LD_VAR 0 1
18359: PPUSH
18360: CALL 18047 0 1
18364: ST_TO_ADDR
// if tmp then
18365: LD_VAR 0 8
18369: IFFALSE 18412
// begin for i in tmp do
18371: LD_ADDR_VAR 0 7
18375: PUSH
18376: LD_VAR 0 8
18380: PUSH
18381: FOR_IN
18382: IFFALSE 18410
// if i [ 1 ] = b_ext_radio then
18384: LD_VAR 0 7
18388: PUSH
18389: LD_INT 1
18391: ARRAY
18392: PUSH
18393: LD_INT 22
18395: EQUAL
18396: IFFALSE 18408
// begin control := control_remote ;
18398: LD_ADDR_VAR 0 4
18402: PUSH
18403: LD_INT 2
18405: ST_TO_ADDR
// break ;
18406: GO 18410
// end ;
18408: GO 18381
18410: POP
18411: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18412: LD_VAR 0 1
18416: PPUSH
18417: LD_VAR 0 2
18421: PPUSH
18422: LD_VAR 0 3
18426: PPUSH
18427: LD_VAR 0 4
18431: PPUSH
18432: LD_VAR 0 5
18436: PPUSH
18437: CALL_OW 448
18441: IFFALSE 18476
// begin result := [ chassis , engine , control , weapon ] ;
18443: LD_ADDR_VAR 0 6
18447: PUSH
18448: LD_VAR 0 2
18452: PUSH
18453: LD_VAR 0 3
18457: PUSH
18458: LD_VAR 0 4
18462: PUSH
18463: LD_VAR 0 5
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: ST_TO_ADDR
// exit ;
18474: GO 18888
// end ; _chassis := AvailableChassisList ( factory ) ;
18476: LD_ADDR_VAR 0 9
18480: PUSH
18481: LD_VAR 0 1
18485: PPUSH
18486: CALL_OW 475
18490: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18491: LD_ADDR_VAR 0 11
18495: PUSH
18496: LD_VAR 0 1
18500: PPUSH
18501: CALL_OW 476
18505: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18506: LD_ADDR_VAR 0 12
18510: PUSH
18511: LD_VAR 0 1
18515: PPUSH
18516: CALL_OW 477
18520: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18521: LD_ADDR_VAR 0 10
18525: PUSH
18526: LD_VAR 0 1
18530: PPUSH
18531: CALL_OW 478
18535: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18536: LD_VAR 0 9
18540: NOT
18541: PUSH
18542: LD_VAR 0 11
18546: NOT
18547: OR
18548: PUSH
18549: LD_VAR 0 12
18553: NOT
18554: OR
18555: PUSH
18556: LD_VAR 0 10
18560: NOT
18561: OR
18562: IFFALSE 18597
// begin result := [ chassis , engine , control , weapon ] ;
18564: LD_ADDR_VAR 0 6
18568: PUSH
18569: LD_VAR 0 2
18573: PUSH
18574: LD_VAR 0 3
18578: PUSH
18579: LD_VAR 0 4
18583: PUSH
18584: LD_VAR 0 5
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: ST_TO_ADDR
// exit ;
18595: GO 18888
// end ; if not chassis in _chassis then
18597: LD_VAR 0 2
18601: PUSH
18602: LD_VAR 0 9
18606: IN
18607: NOT
18608: IFFALSE 18634
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18610: LD_ADDR_VAR 0 2
18614: PUSH
18615: LD_VAR 0 9
18619: PUSH
18620: LD_INT 1
18622: PPUSH
18623: LD_VAR 0 9
18627: PPUSH
18628: CALL_OW 12
18632: ARRAY
18633: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18634: LD_VAR 0 2
18638: PPUSH
18639: LD_VAR 0 3
18643: PPUSH
18644: CALL 18893 0 2
18648: NOT
18649: IFFALSE 18708
// repeat engine := _engine [ 1 ] ;
18651: LD_ADDR_VAR 0 3
18655: PUSH
18656: LD_VAR 0 11
18660: PUSH
18661: LD_INT 1
18663: ARRAY
18664: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18665: LD_ADDR_VAR 0 11
18669: PUSH
18670: LD_VAR 0 11
18674: PPUSH
18675: LD_INT 1
18677: PPUSH
18678: CALL_OW 3
18682: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18683: LD_VAR 0 2
18687: PPUSH
18688: LD_VAR 0 3
18692: PPUSH
18693: CALL 18893 0 2
18697: PUSH
18698: LD_VAR 0 11
18702: PUSH
18703: EMPTY
18704: EQUAL
18705: OR
18706: IFFALSE 18651
// if not control in _control then
18708: LD_VAR 0 4
18712: PUSH
18713: LD_VAR 0 12
18717: IN
18718: NOT
18719: IFFALSE 18745
// control := _control [ rand ( 1 , _control ) ] ;
18721: LD_ADDR_VAR 0 4
18725: PUSH
18726: LD_VAR 0 12
18730: PUSH
18731: LD_INT 1
18733: PPUSH
18734: LD_VAR 0 12
18738: PPUSH
18739: CALL_OW 12
18743: ARRAY
18744: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18745: LD_VAR 0 2
18749: PPUSH
18750: LD_VAR 0 5
18754: PPUSH
18755: CALL 19113 0 2
18759: NOT
18760: IFFALSE 18819
// repeat weapon := _weapon [ 1 ] ;
18762: LD_ADDR_VAR 0 5
18766: PUSH
18767: LD_VAR 0 10
18771: PUSH
18772: LD_INT 1
18774: ARRAY
18775: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18776: LD_ADDR_VAR 0 10
18780: PUSH
18781: LD_VAR 0 10
18785: PPUSH
18786: LD_INT 1
18788: PPUSH
18789: CALL_OW 3
18793: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18794: LD_VAR 0 2
18798: PPUSH
18799: LD_VAR 0 5
18803: PPUSH
18804: CALL 19113 0 2
18808: PUSH
18809: LD_VAR 0 10
18813: PUSH
18814: EMPTY
18815: EQUAL
18816: OR
18817: IFFALSE 18762
// result := [ ] ;
18819: LD_ADDR_VAR 0 6
18823: PUSH
18824: EMPTY
18825: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18826: LD_VAR 0 1
18830: PPUSH
18831: LD_VAR 0 2
18835: PPUSH
18836: LD_VAR 0 3
18840: PPUSH
18841: LD_VAR 0 4
18845: PPUSH
18846: LD_VAR 0 5
18850: PPUSH
18851: CALL_OW 448
18855: IFFALSE 18888
// result := [ chassis , engine , control , weapon ] ;
18857: LD_ADDR_VAR 0 6
18861: PUSH
18862: LD_VAR 0 2
18866: PUSH
18867: LD_VAR 0 3
18871: PUSH
18872: LD_VAR 0 4
18876: PUSH
18877: LD_VAR 0 5
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: ST_TO_ADDR
// end ;
18888: LD_VAR 0 6
18892: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18893: LD_INT 0
18895: PPUSH
// if not chassis or not engine then
18896: LD_VAR 0 1
18900: NOT
18901: PUSH
18902: LD_VAR 0 2
18906: NOT
18907: OR
18908: IFFALSE 18912
// exit ;
18910: GO 19108
// case engine of engine_solar :
18912: LD_VAR 0 2
18916: PUSH
18917: LD_INT 2
18919: DOUBLE
18920: EQUAL
18921: IFTRUE 18925
18923: GO 18963
18925: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18926: LD_ADDR_VAR 0 3
18930: PUSH
18931: LD_INT 11
18933: PUSH
18934: LD_INT 12
18936: PUSH
18937: LD_INT 13
18939: PUSH
18940: LD_INT 14
18942: PUSH
18943: LD_INT 1
18945: PUSH
18946: LD_INT 2
18948: PUSH
18949: LD_INT 3
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: ST_TO_ADDR
18961: GO 19092
18963: LD_INT 1
18965: DOUBLE
18966: EQUAL
18967: IFTRUE 18971
18969: GO 19033
18971: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18972: LD_ADDR_VAR 0 3
18976: PUSH
18977: LD_INT 11
18979: PUSH
18980: LD_INT 12
18982: PUSH
18983: LD_INT 13
18985: PUSH
18986: LD_INT 14
18988: PUSH
18989: LD_INT 1
18991: PUSH
18992: LD_INT 2
18994: PUSH
18995: LD_INT 3
18997: PUSH
18998: LD_INT 4
19000: PUSH
19001: LD_INT 5
19003: PUSH
19004: LD_INT 21
19006: PUSH
19007: LD_INT 23
19009: PUSH
19010: LD_INT 22
19012: PUSH
19013: LD_INT 24
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: ST_TO_ADDR
19031: GO 19092
19033: LD_INT 3
19035: DOUBLE
19036: EQUAL
19037: IFTRUE 19041
19039: GO 19091
19041: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19042: LD_ADDR_VAR 0 3
19046: PUSH
19047: LD_INT 13
19049: PUSH
19050: LD_INT 14
19052: PUSH
19053: LD_INT 2
19055: PUSH
19056: LD_INT 3
19058: PUSH
19059: LD_INT 4
19061: PUSH
19062: LD_INT 5
19064: PUSH
19065: LD_INT 21
19067: PUSH
19068: LD_INT 22
19070: PUSH
19071: LD_INT 23
19073: PUSH
19074: LD_INT 24
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: ST_TO_ADDR
19089: GO 19092
19091: POP
// result := ( chassis in result ) ;
19092: LD_ADDR_VAR 0 3
19096: PUSH
19097: LD_VAR 0 1
19101: PUSH
19102: LD_VAR 0 3
19106: IN
19107: ST_TO_ADDR
// end ;
19108: LD_VAR 0 3
19112: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19113: LD_INT 0
19115: PPUSH
// if not chassis or not weapon then
19116: LD_VAR 0 1
19120: NOT
19121: PUSH
19122: LD_VAR 0 2
19126: NOT
19127: OR
19128: IFFALSE 19132
// exit ;
19130: GO 20192
// case weapon of us_machine_gun :
19132: LD_VAR 0 2
19136: PUSH
19137: LD_INT 2
19139: DOUBLE
19140: EQUAL
19141: IFTRUE 19145
19143: GO 19175
19145: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19146: LD_ADDR_VAR 0 3
19150: PUSH
19151: LD_INT 1
19153: PUSH
19154: LD_INT 2
19156: PUSH
19157: LD_INT 3
19159: PUSH
19160: LD_INT 4
19162: PUSH
19163: LD_INT 5
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: ST_TO_ADDR
19173: GO 20176
19175: LD_INT 3
19177: DOUBLE
19178: EQUAL
19179: IFTRUE 19183
19181: GO 19213
19183: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19184: LD_ADDR_VAR 0 3
19188: PUSH
19189: LD_INT 1
19191: PUSH
19192: LD_INT 2
19194: PUSH
19195: LD_INT 3
19197: PUSH
19198: LD_INT 4
19200: PUSH
19201: LD_INT 5
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: ST_TO_ADDR
19211: GO 20176
19213: LD_INT 11
19215: DOUBLE
19216: EQUAL
19217: IFTRUE 19221
19219: GO 19251
19221: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19222: LD_ADDR_VAR 0 3
19226: PUSH
19227: LD_INT 1
19229: PUSH
19230: LD_INT 2
19232: PUSH
19233: LD_INT 3
19235: PUSH
19236: LD_INT 4
19238: PUSH
19239: LD_INT 5
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: ST_TO_ADDR
19249: GO 20176
19251: LD_INT 4
19253: DOUBLE
19254: EQUAL
19255: IFTRUE 19259
19257: GO 19285
19259: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19260: LD_ADDR_VAR 0 3
19264: PUSH
19265: LD_INT 2
19267: PUSH
19268: LD_INT 3
19270: PUSH
19271: LD_INT 4
19273: PUSH
19274: LD_INT 5
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: ST_TO_ADDR
19283: GO 20176
19285: LD_INT 5
19287: DOUBLE
19288: EQUAL
19289: IFTRUE 19293
19291: GO 19319
19293: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19294: LD_ADDR_VAR 0 3
19298: PUSH
19299: LD_INT 2
19301: PUSH
19302: LD_INT 3
19304: PUSH
19305: LD_INT 4
19307: PUSH
19308: LD_INT 5
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: ST_TO_ADDR
19317: GO 20176
19319: LD_INT 9
19321: DOUBLE
19322: EQUAL
19323: IFTRUE 19327
19325: GO 19353
19327: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19328: LD_ADDR_VAR 0 3
19332: PUSH
19333: LD_INT 2
19335: PUSH
19336: LD_INT 3
19338: PUSH
19339: LD_INT 4
19341: PUSH
19342: LD_INT 5
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: ST_TO_ADDR
19351: GO 20176
19353: LD_INT 7
19355: DOUBLE
19356: EQUAL
19357: IFTRUE 19361
19359: GO 19387
19361: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19362: LD_ADDR_VAR 0 3
19366: PUSH
19367: LD_INT 2
19369: PUSH
19370: LD_INT 3
19372: PUSH
19373: LD_INT 4
19375: PUSH
19376: LD_INT 5
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: ST_TO_ADDR
19385: GO 20176
19387: LD_INT 12
19389: DOUBLE
19390: EQUAL
19391: IFTRUE 19395
19393: GO 19421
19395: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19396: LD_ADDR_VAR 0 3
19400: PUSH
19401: LD_INT 2
19403: PUSH
19404: LD_INT 3
19406: PUSH
19407: LD_INT 4
19409: PUSH
19410: LD_INT 5
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: ST_TO_ADDR
19419: GO 20176
19421: LD_INT 13
19423: DOUBLE
19424: EQUAL
19425: IFTRUE 19429
19427: GO 19455
19429: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19430: LD_ADDR_VAR 0 3
19434: PUSH
19435: LD_INT 2
19437: PUSH
19438: LD_INT 3
19440: PUSH
19441: LD_INT 4
19443: PUSH
19444: LD_INT 5
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: ST_TO_ADDR
19453: GO 20176
19455: LD_INT 14
19457: DOUBLE
19458: EQUAL
19459: IFTRUE 19463
19461: GO 19481
19463: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19464: LD_ADDR_VAR 0 3
19468: PUSH
19469: LD_INT 4
19471: PUSH
19472: LD_INT 5
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: ST_TO_ADDR
19479: GO 20176
19481: LD_INT 6
19483: DOUBLE
19484: EQUAL
19485: IFTRUE 19489
19487: GO 19507
19489: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19490: LD_ADDR_VAR 0 3
19494: PUSH
19495: LD_INT 4
19497: PUSH
19498: LD_INT 5
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: ST_TO_ADDR
19505: GO 20176
19507: LD_INT 10
19509: DOUBLE
19510: EQUAL
19511: IFTRUE 19515
19513: GO 19533
19515: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19516: LD_ADDR_VAR 0 3
19520: PUSH
19521: LD_INT 4
19523: PUSH
19524: LD_INT 5
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: ST_TO_ADDR
19531: GO 20176
19533: LD_INT 22
19535: DOUBLE
19536: EQUAL
19537: IFTRUE 19541
19539: GO 19567
19541: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19542: LD_ADDR_VAR 0 3
19546: PUSH
19547: LD_INT 11
19549: PUSH
19550: LD_INT 12
19552: PUSH
19553: LD_INT 13
19555: PUSH
19556: LD_INT 14
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: ST_TO_ADDR
19565: GO 20176
19567: LD_INT 23
19569: DOUBLE
19570: EQUAL
19571: IFTRUE 19575
19573: GO 19601
19575: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19576: LD_ADDR_VAR 0 3
19580: PUSH
19581: LD_INT 11
19583: PUSH
19584: LD_INT 12
19586: PUSH
19587: LD_INT 13
19589: PUSH
19590: LD_INT 14
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: ST_TO_ADDR
19599: GO 20176
19601: LD_INT 24
19603: DOUBLE
19604: EQUAL
19605: IFTRUE 19609
19607: GO 19635
19609: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19610: LD_ADDR_VAR 0 3
19614: PUSH
19615: LD_INT 11
19617: PUSH
19618: LD_INT 12
19620: PUSH
19621: LD_INT 13
19623: PUSH
19624: LD_INT 14
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: ST_TO_ADDR
19633: GO 20176
19635: LD_INT 30
19637: DOUBLE
19638: EQUAL
19639: IFTRUE 19643
19641: GO 19669
19643: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19644: LD_ADDR_VAR 0 3
19648: PUSH
19649: LD_INT 11
19651: PUSH
19652: LD_INT 12
19654: PUSH
19655: LD_INT 13
19657: PUSH
19658: LD_INT 14
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: ST_TO_ADDR
19667: GO 20176
19669: LD_INT 25
19671: DOUBLE
19672: EQUAL
19673: IFTRUE 19677
19675: GO 19695
19677: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19678: LD_ADDR_VAR 0 3
19682: PUSH
19683: LD_INT 13
19685: PUSH
19686: LD_INT 14
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: ST_TO_ADDR
19693: GO 20176
19695: LD_INT 27
19697: DOUBLE
19698: EQUAL
19699: IFTRUE 19703
19701: GO 19721
19703: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19704: LD_ADDR_VAR 0 3
19708: PUSH
19709: LD_INT 13
19711: PUSH
19712: LD_INT 14
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: ST_TO_ADDR
19719: GO 20176
19721: LD_INT 92
19723: DOUBLE
19724: EQUAL
19725: IFTRUE 19729
19727: GO 19755
19729: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19730: LD_ADDR_VAR 0 3
19734: PUSH
19735: LD_INT 11
19737: PUSH
19738: LD_INT 12
19740: PUSH
19741: LD_INT 13
19743: PUSH
19744: LD_INT 14
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: ST_TO_ADDR
19753: GO 20176
19755: LD_INT 28
19757: DOUBLE
19758: EQUAL
19759: IFTRUE 19763
19761: GO 19781
19763: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19764: LD_ADDR_VAR 0 3
19768: PUSH
19769: LD_INT 13
19771: PUSH
19772: LD_INT 14
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: ST_TO_ADDR
19779: GO 20176
19781: LD_INT 29
19783: DOUBLE
19784: EQUAL
19785: IFTRUE 19789
19787: GO 19807
19789: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19790: LD_ADDR_VAR 0 3
19794: PUSH
19795: LD_INT 13
19797: PUSH
19798: LD_INT 14
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: ST_TO_ADDR
19805: GO 20176
19807: LD_INT 31
19809: DOUBLE
19810: EQUAL
19811: IFTRUE 19815
19813: GO 19833
19815: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19816: LD_ADDR_VAR 0 3
19820: PUSH
19821: LD_INT 13
19823: PUSH
19824: LD_INT 14
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: ST_TO_ADDR
19831: GO 20176
19833: LD_INT 26
19835: DOUBLE
19836: EQUAL
19837: IFTRUE 19841
19839: GO 19859
19841: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19842: LD_ADDR_VAR 0 3
19846: PUSH
19847: LD_INT 13
19849: PUSH
19850: LD_INT 14
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: ST_TO_ADDR
19857: GO 20176
19859: LD_INT 42
19861: DOUBLE
19862: EQUAL
19863: IFTRUE 19867
19865: GO 19893
19867: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19868: LD_ADDR_VAR 0 3
19872: PUSH
19873: LD_INT 21
19875: PUSH
19876: LD_INT 22
19878: PUSH
19879: LD_INT 23
19881: PUSH
19882: LD_INT 24
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: ST_TO_ADDR
19891: GO 20176
19893: LD_INT 43
19895: DOUBLE
19896: EQUAL
19897: IFTRUE 19901
19899: GO 19927
19901: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19902: LD_ADDR_VAR 0 3
19906: PUSH
19907: LD_INT 21
19909: PUSH
19910: LD_INT 22
19912: PUSH
19913: LD_INT 23
19915: PUSH
19916: LD_INT 24
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: ST_TO_ADDR
19925: GO 20176
19927: LD_INT 44
19929: DOUBLE
19930: EQUAL
19931: IFTRUE 19935
19933: GO 19961
19935: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19936: LD_ADDR_VAR 0 3
19940: PUSH
19941: LD_INT 21
19943: PUSH
19944: LD_INT 22
19946: PUSH
19947: LD_INT 23
19949: PUSH
19950: LD_INT 24
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: ST_TO_ADDR
19959: GO 20176
19961: LD_INT 45
19963: DOUBLE
19964: EQUAL
19965: IFTRUE 19969
19967: GO 19995
19969: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19970: LD_ADDR_VAR 0 3
19974: PUSH
19975: LD_INT 21
19977: PUSH
19978: LD_INT 22
19980: PUSH
19981: LD_INT 23
19983: PUSH
19984: LD_INT 24
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: ST_TO_ADDR
19993: GO 20176
19995: LD_INT 49
19997: DOUBLE
19998: EQUAL
19999: IFTRUE 20003
20001: GO 20029
20003: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20004: LD_ADDR_VAR 0 3
20008: PUSH
20009: LD_INT 21
20011: PUSH
20012: LD_INT 22
20014: PUSH
20015: LD_INT 23
20017: PUSH
20018: LD_INT 24
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: ST_TO_ADDR
20027: GO 20176
20029: LD_INT 51
20031: DOUBLE
20032: EQUAL
20033: IFTRUE 20037
20035: GO 20063
20037: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20038: LD_ADDR_VAR 0 3
20042: PUSH
20043: LD_INT 21
20045: PUSH
20046: LD_INT 22
20048: PUSH
20049: LD_INT 23
20051: PUSH
20052: LD_INT 24
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: ST_TO_ADDR
20061: GO 20176
20063: LD_INT 52
20065: DOUBLE
20066: EQUAL
20067: IFTRUE 20071
20069: GO 20097
20071: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20072: LD_ADDR_VAR 0 3
20076: PUSH
20077: LD_INT 21
20079: PUSH
20080: LD_INT 22
20082: PUSH
20083: LD_INT 23
20085: PUSH
20086: LD_INT 24
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: ST_TO_ADDR
20095: GO 20176
20097: LD_INT 53
20099: DOUBLE
20100: EQUAL
20101: IFTRUE 20105
20103: GO 20123
20105: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
20106: LD_ADDR_VAR 0 3
20110: PUSH
20111: LD_INT 23
20113: PUSH
20114: LD_INT 24
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: ST_TO_ADDR
20121: GO 20176
20123: LD_INT 46
20125: DOUBLE
20126: EQUAL
20127: IFTRUE 20131
20129: GO 20149
20131: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20132: LD_ADDR_VAR 0 3
20136: PUSH
20137: LD_INT 23
20139: PUSH
20140: LD_INT 24
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: ST_TO_ADDR
20147: GO 20176
20149: LD_INT 47
20151: DOUBLE
20152: EQUAL
20153: IFTRUE 20157
20155: GO 20175
20157: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20158: LD_ADDR_VAR 0 3
20162: PUSH
20163: LD_INT 23
20165: PUSH
20166: LD_INT 24
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: ST_TO_ADDR
20173: GO 20176
20175: POP
// result := ( chassis in result ) ;
20176: LD_ADDR_VAR 0 3
20180: PUSH
20181: LD_VAR 0 1
20185: PUSH
20186: LD_VAR 0 3
20190: IN
20191: ST_TO_ADDR
// end ;
20192: LD_VAR 0 3
20196: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20197: LD_INT 0
20199: PPUSH
20200: PPUSH
20201: PPUSH
20202: PPUSH
20203: PPUSH
20204: PPUSH
20205: PPUSH
// result := array ;
20206: LD_ADDR_VAR 0 5
20210: PUSH
20211: LD_VAR 0 1
20215: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20216: LD_VAR 0 1
20220: NOT
20221: PUSH
20222: LD_VAR 0 2
20226: NOT
20227: OR
20228: PUSH
20229: LD_VAR 0 3
20233: NOT
20234: OR
20235: PUSH
20236: LD_VAR 0 2
20240: PUSH
20241: LD_VAR 0 1
20245: GREATER
20246: OR
20247: PUSH
20248: LD_VAR 0 3
20252: PUSH
20253: LD_VAR 0 1
20257: GREATER
20258: OR
20259: IFFALSE 20263
// exit ;
20261: GO 20559
// if direction then
20263: LD_VAR 0 4
20267: IFFALSE 20331
// begin d := 1 ;
20269: LD_ADDR_VAR 0 9
20273: PUSH
20274: LD_INT 1
20276: ST_TO_ADDR
// if i_from > i_to then
20277: LD_VAR 0 2
20281: PUSH
20282: LD_VAR 0 3
20286: GREATER
20287: IFFALSE 20313
// length := ( array - i_from ) + i_to else
20289: LD_ADDR_VAR 0 11
20293: PUSH
20294: LD_VAR 0 1
20298: PUSH
20299: LD_VAR 0 2
20303: MINUS
20304: PUSH
20305: LD_VAR 0 3
20309: PLUS
20310: ST_TO_ADDR
20311: GO 20329
// length := i_to - i_from ;
20313: LD_ADDR_VAR 0 11
20317: PUSH
20318: LD_VAR 0 3
20322: PUSH
20323: LD_VAR 0 2
20327: MINUS
20328: ST_TO_ADDR
// end else
20329: GO 20392
// begin d := - 1 ;
20331: LD_ADDR_VAR 0 9
20335: PUSH
20336: LD_INT 1
20338: NEG
20339: ST_TO_ADDR
// if i_from > i_to then
20340: LD_VAR 0 2
20344: PUSH
20345: LD_VAR 0 3
20349: GREATER
20350: IFFALSE 20370
// length := i_from - i_to else
20352: LD_ADDR_VAR 0 11
20356: PUSH
20357: LD_VAR 0 2
20361: PUSH
20362: LD_VAR 0 3
20366: MINUS
20367: ST_TO_ADDR
20368: GO 20392
// length := ( array - i_to ) + i_from ;
20370: LD_ADDR_VAR 0 11
20374: PUSH
20375: LD_VAR 0 1
20379: PUSH
20380: LD_VAR 0 3
20384: MINUS
20385: PUSH
20386: LD_VAR 0 2
20390: PLUS
20391: ST_TO_ADDR
// end ; if not length then
20392: LD_VAR 0 11
20396: NOT
20397: IFFALSE 20401
// exit ;
20399: GO 20559
// tmp := array ;
20401: LD_ADDR_VAR 0 10
20405: PUSH
20406: LD_VAR 0 1
20410: ST_TO_ADDR
// for i = 1 to length do
20411: LD_ADDR_VAR 0 6
20415: PUSH
20416: DOUBLE
20417: LD_INT 1
20419: DEC
20420: ST_TO_ADDR
20421: LD_VAR 0 11
20425: PUSH
20426: FOR_TO
20427: IFFALSE 20547
// begin for j = 1 to array do
20429: LD_ADDR_VAR 0 7
20433: PUSH
20434: DOUBLE
20435: LD_INT 1
20437: DEC
20438: ST_TO_ADDR
20439: LD_VAR 0 1
20443: PUSH
20444: FOR_TO
20445: IFFALSE 20533
// begin k := j + d ;
20447: LD_ADDR_VAR 0 8
20451: PUSH
20452: LD_VAR 0 7
20456: PUSH
20457: LD_VAR 0 9
20461: PLUS
20462: ST_TO_ADDR
// if k > array then
20463: LD_VAR 0 8
20467: PUSH
20468: LD_VAR 0 1
20472: GREATER
20473: IFFALSE 20483
// k := 1 ;
20475: LD_ADDR_VAR 0 8
20479: PUSH
20480: LD_INT 1
20482: ST_TO_ADDR
// if not k then
20483: LD_VAR 0 8
20487: NOT
20488: IFFALSE 20500
// k := array ;
20490: LD_ADDR_VAR 0 8
20494: PUSH
20495: LD_VAR 0 1
20499: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20500: LD_ADDR_VAR 0 10
20504: PUSH
20505: LD_VAR 0 10
20509: PPUSH
20510: LD_VAR 0 8
20514: PPUSH
20515: LD_VAR 0 1
20519: PUSH
20520: LD_VAR 0 7
20524: ARRAY
20525: PPUSH
20526: CALL_OW 1
20530: ST_TO_ADDR
// end ;
20531: GO 20444
20533: POP
20534: POP
// array := tmp ;
20535: LD_ADDR_VAR 0 1
20539: PUSH
20540: LD_VAR 0 10
20544: ST_TO_ADDR
// end ;
20545: GO 20426
20547: POP
20548: POP
// result := array ;
20549: LD_ADDR_VAR 0 5
20553: PUSH
20554: LD_VAR 0 1
20558: ST_TO_ADDR
// end ;
20559: LD_VAR 0 5
20563: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20564: LD_INT 0
20566: PPUSH
20567: PPUSH
// result := 0 ;
20568: LD_ADDR_VAR 0 3
20572: PUSH
20573: LD_INT 0
20575: ST_TO_ADDR
// if not array or not value in array then
20576: LD_VAR 0 1
20580: NOT
20581: PUSH
20582: LD_VAR 0 2
20586: PUSH
20587: LD_VAR 0 1
20591: IN
20592: NOT
20593: OR
20594: IFFALSE 20598
// exit ;
20596: GO 20652
// for i = 1 to array do
20598: LD_ADDR_VAR 0 4
20602: PUSH
20603: DOUBLE
20604: LD_INT 1
20606: DEC
20607: ST_TO_ADDR
20608: LD_VAR 0 1
20612: PUSH
20613: FOR_TO
20614: IFFALSE 20650
// if value = array [ i ] then
20616: LD_VAR 0 2
20620: PUSH
20621: LD_VAR 0 1
20625: PUSH
20626: LD_VAR 0 4
20630: ARRAY
20631: EQUAL
20632: IFFALSE 20648
// begin result := i ;
20634: LD_ADDR_VAR 0 3
20638: PUSH
20639: LD_VAR 0 4
20643: ST_TO_ADDR
// exit ;
20644: POP
20645: POP
20646: GO 20652
// end ;
20648: GO 20613
20650: POP
20651: POP
// end ;
20652: LD_VAR 0 3
20656: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20657: LD_INT 0
20659: PPUSH
// vc_chassis := chassis ;
20660: LD_ADDR_OWVAR 37
20664: PUSH
20665: LD_VAR 0 1
20669: ST_TO_ADDR
// vc_engine := engine ;
20670: LD_ADDR_OWVAR 39
20674: PUSH
20675: LD_VAR 0 2
20679: ST_TO_ADDR
// vc_control := control ;
20680: LD_ADDR_OWVAR 38
20684: PUSH
20685: LD_VAR 0 3
20689: ST_TO_ADDR
// vc_weapon := weapon ;
20690: LD_ADDR_OWVAR 40
20694: PUSH
20695: LD_VAR 0 4
20699: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20700: LD_ADDR_OWVAR 41
20704: PUSH
20705: LD_VAR 0 5
20709: ST_TO_ADDR
// end ;
20710: LD_VAR 0 6
20714: RET
// export function WantPlant ( unit ) ; var task ; begin
20715: LD_INT 0
20717: PPUSH
20718: PPUSH
// result := false ;
20719: LD_ADDR_VAR 0 2
20723: PUSH
20724: LD_INT 0
20726: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20727: LD_ADDR_VAR 0 3
20731: PUSH
20732: LD_VAR 0 1
20736: PPUSH
20737: CALL_OW 437
20741: ST_TO_ADDR
// if task then
20742: LD_VAR 0 3
20746: IFFALSE 20774
// if task [ 1 ] [ 1 ] = p then
20748: LD_VAR 0 3
20752: PUSH
20753: LD_INT 1
20755: ARRAY
20756: PUSH
20757: LD_INT 1
20759: ARRAY
20760: PUSH
20761: LD_STRING p
20763: EQUAL
20764: IFFALSE 20774
// result := true ;
20766: LD_ADDR_VAR 0 2
20770: PUSH
20771: LD_INT 1
20773: ST_TO_ADDR
// end ;
20774: LD_VAR 0 2
20778: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20779: LD_INT 0
20781: PPUSH
20782: PPUSH
20783: PPUSH
20784: PPUSH
// if pos < 1 then
20785: LD_VAR 0 2
20789: PUSH
20790: LD_INT 1
20792: LESS
20793: IFFALSE 20797
// exit ;
20795: GO 21100
// if pos = 1 then
20797: LD_VAR 0 2
20801: PUSH
20802: LD_INT 1
20804: EQUAL
20805: IFFALSE 20838
// result := Replace ( arr , pos [ 1 ] , value ) else
20807: LD_ADDR_VAR 0 4
20811: PUSH
20812: LD_VAR 0 1
20816: PPUSH
20817: LD_VAR 0 2
20821: PUSH
20822: LD_INT 1
20824: ARRAY
20825: PPUSH
20826: LD_VAR 0 3
20830: PPUSH
20831: CALL_OW 1
20835: ST_TO_ADDR
20836: GO 21100
// begin tmp := arr ;
20838: LD_ADDR_VAR 0 6
20842: PUSH
20843: LD_VAR 0 1
20847: ST_TO_ADDR
// s_arr := [ tmp ] ;
20848: LD_ADDR_VAR 0 7
20852: PUSH
20853: LD_VAR 0 6
20857: PUSH
20858: EMPTY
20859: LIST
20860: ST_TO_ADDR
// for i = 1 to pos - 1 do
20861: LD_ADDR_VAR 0 5
20865: PUSH
20866: DOUBLE
20867: LD_INT 1
20869: DEC
20870: ST_TO_ADDR
20871: LD_VAR 0 2
20875: PUSH
20876: LD_INT 1
20878: MINUS
20879: PUSH
20880: FOR_TO
20881: IFFALSE 20926
// begin tmp := tmp [ pos [ i ] ] ;
20883: LD_ADDR_VAR 0 6
20887: PUSH
20888: LD_VAR 0 6
20892: PUSH
20893: LD_VAR 0 2
20897: PUSH
20898: LD_VAR 0 5
20902: ARRAY
20903: ARRAY
20904: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20905: LD_ADDR_VAR 0 7
20909: PUSH
20910: LD_VAR 0 7
20914: PUSH
20915: LD_VAR 0 6
20919: PUSH
20920: EMPTY
20921: LIST
20922: ADD
20923: ST_TO_ADDR
// end ;
20924: GO 20880
20926: POP
20927: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20928: LD_ADDR_VAR 0 6
20932: PUSH
20933: LD_VAR 0 6
20937: PPUSH
20938: LD_VAR 0 2
20942: PUSH
20943: LD_VAR 0 2
20947: ARRAY
20948: PPUSH
20949: LD_VAR 0 3
20953: PPUSH
20954: CALL_OW 1
20958: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20959: LD_ADDR_VAR 0 7
20963: PUSH
20964: LD_VAR 0 7
20968: PPUSH
20969: LD_VAR 0 7
20973: PPUSH
20974: LD_VAR 0 6
20978: PPUSH
20979: CALL_OW 1
20983: ST_TO_ADDR
// for i = s_arr downto 2 do
20984: LD_ADDR_VAR 0 5
20988: PUSH
20989: DOUBLE
20990: LD_VAR 0 7
20994: INC
20995: ST_TO_ADDR
20996: LD_INT 2
20998: PUSH
20999: FOR_DOWNTO
21000: IFFALSE 21084
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21002: LD_ADDR_VAR 0 6
21006: PUSH
21007: LD_VAR 0 7
21011: PUSH
21012: LD_VAR 0 5
21016: PUSH
21017: LD_INT 1
21019: MINUS
21020: ARRAY
21021: PPUSH
21022: LD_VAR 0 2
21026: PUSH
21027: LD_VAR 0 5
21031: PUSH
21032: LD_INT 1
21034: MINUS
21035: ARRAY
21036: PPUSH
21037: LD_VAR 0 7
21041: PUSH
21042: LD_VAR 0 5
21046: ARRAY
21047: PPUSH
21048: CALL_OW 1
21052: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21053: LD_ADDR_VAR 0 7
21057: PUSH
21058: LD_VAR 0 7
21062: PPUSH
21063: LD_VAR 0 5
21067: PUSH
21068: LD_INT 1
21070: MINUS
21071: PPUSH
21072: LD_VAR 0 6
21076: PPUSH
21077: CALL_OW 1
21081: ST_TO_ADDR
// end ;
21082: GO 20999
21084: POP
21085: POP
// result := s_arr [ 1 ] ;
21086: LD_ADDR_VAR 0 4
21090: PUSH
21091: LD_VAR 0 7
21095: PUSH
21096: LD_INT 1
21098: ARRAY
21099: ST_TO_ADDR
// end ; end ;
21100: LD_VAR 0 4
21104: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21105: LD_INT 0
21107: PPUSH
21108: PPUSH
// if not list then
21109: LD_VAR 0 1
21113: NOT
21114: IFFALSE 21118
// exit ;
21116: GO 21209
// i := list [ pos1 ] ;
21118: LD_ADDR_VAR 0 5
21122: PUSH
21123: LD_VAR 0 1
21127: PUSH
21128: LD_VAR 0 2
21132: ARRAY
21133: ST_TO_ADDR
// if not i then
21134: LD_VAR 0 5
21138: NOT
21139: IFFALSE 21143
// exit ;
21141: GO 21209
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21143: LD_ADDR_VAR 0 1
21147: PUSH
21148: LD_VAR 0 1
21152: PPUSH
21153: LD_VAR 0 2
21157: PPUSH
21158: LD_VAR 0 1
21162: PUSH
21163: LD_VAR 0 3
21167: ARRAY
21168: PPUSH
21169: CALL_OW 1
21173: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21174: LD_ADDR_VAR 0 1
21178: PUSH
21179: LD_VAR 0 1
21183: PPUSH
21184: LD_VAR 0 3
21188: PPUSH
21189: LD_VAR 0 5
21193: PPUSH
21194: CALL_OW 1
21198: ST_TO_ADDR
// result := list ;
21199: LD_ADDR_VAR 0 4
21203: PUSH
21204: LD_VAR 0 1
21208: ST_TO_ADDR
// end ;
21209: LD_VAR 0 4
21213: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21214: LD_INT 0
21216: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21217: LD_ADDR_VAR 0 5
21221: PUSH
21222: LD_VAR 0 1
21226: PPUSH
21227: CALL_OW 250
21231: PPUSH
21232: LD_VAR 0 1
21236: PPUSH
21237: CALL_OW 251
21241: PPUSH
21242: LD_VAR 0 2
21246: PPUSH
21247: LD_VAR 0 3
21251: PPUSH
21252: LD_VAR 0 4
21256: PPUSH
21257: CALL 21267 0 5
21261: ST_TO_ADDR
// end ;
21262: LD_VAR 0 5
21266: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21267: LD_INT 0
21269: PPUSH
21270: PPUSH
21271: PPUSH
21272: PPUSH
// if not list then
21273: LD_VAR 0 3
21277: NOT
21278: IFFALSE 21282
// exit ;
21280: GO 21670
// result := [ ] ;
21282: LD_ADDR_VAR 0 6
21286: PUSH
21287: EMPTY
21288: ST_TO_ADDR
// for i in list do
21289: LD_ADDR_VAR 0 7
21293: PUSH
21294: LD_VAR 0 3
21298: PUSH
21299: FOR_IN
21300: IFFALSE 21502
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21302: LD_ADDR_VAR 0 9
21306: PUSH
21307: LD_VAR 0 7
21311: PPUSH
21312: LD_VAR 0 1
21316: PPUSH
21317: LD_VAR 0 2
21321: PPUSH
21322: CALL_OW 297
21326: ST_TO_ADDR
// if not result then
21327: LD_VAR 0 6
21331: NOT
21332: IFFALSE 21358
// result := [ [ i , tmp ] ] else
21334: LD_ADDR_VAR 0 6
21338: PUSH
21339: LD_VAR 0 7
21343: PUSH
21344: LD_VAR 0 9
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PUSH
21353: EMPTY
21354: LIST
21355: ST_TO_ADDR
21356: GO 21500
// begin if result [ result ] [ 2 ] < tmp then
21358: LD_VAR 0 6
21362: PUSH
21363: LD_VAR 0 6
21367: ARRAY
21368: PUSH
21369: LD_INT 2
21371: ARRAY
21372: PUSH
21373: LD_VAR 0 9
21377: LESS
21378: IFFALSE 21420
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21380: LD_ADDR_VAR 0 6
21384: PUSH
21385: LD_VAR 0 6
21389: PPUSH
21390: LD_VAR 0 6
21394: PUSH
21395: LD_INT 1
21397: PLUS
21398: PPUSH
21399: LD_VAR 0 7
21403: PUSH
21404: LD_VAR 0 9
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: PPUSH
21413: CALL_OW 2
21417: ST_TO_ADDR
21418: GO 21500
// for j = 1 to result do
21420: LD_ADDR_VAR 0 8
21424: PUSH
21425: DOUBLE
21426: LD_INT 1
21428: DEC
21429: ST_TO_ADDR
21430: LD_VAR 0 6
21434: PUSH
21435: FOR_TO
21436: IFFALSE 21498
// begin if tmp < result [ j ] [ 2 ] then
21438: LD_VAR 0 9
21442: PUSH
21443: LD_VAR 0 6
21447: PUSH
21448: LD_VAR 0 8
21452: ARRAY
21453: PUSH
21454: LD_INT 2
21456: ARRAY
21457: LESS
21458: IFFALSE 21496
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21460: LD_ADDR_VAR 0 6
21464: PUSH
21465: LD_VAR 0 6
21469: PPUSH
21470: LD_VAR 0 8
21474: PPUSH
21475: LD_VAR 0 7
21479: PUSH
21480: LD_VAR 0 9
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PPUSH
21489: CALL_OW 2
21493: ST_TO_ADDR
// break ;
21494: GO 21498
// end ; end ;
21496: GO 21435
21498: POP
21499: POP
// end ; end ;
21500: GO 21299
21502: POP
21503: POP
// if result and not asc then
21504: LD_VAR 0 6
21508: PUSH
21509: LD_VAR 0 4
21513: NOT
21514: AND
21515: IFFALSE 21590
// begin tmp := result ;
21517: LD_ADDR_VAR 0 9
21521: PUSH
21522: LD_VAR 0 6
21526: ST_TO_ADDR
// for i = tmp downto 1 do
21527: LD_ADDR_VAR 0 7
21531: PUSH
21532: DOUBLE
21533: LD_VAR 0 9
21537: INC
21538: ST_TO_ADDR
21539: LD_INT 1
21541: PUSH
21542: FOR_DOWNTO
21543: IFFALSE 21588
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21545: LD_ADDR_VAR 0 6
21549: PUSH
21550: LD_VAR 0 6
21554: PPUSH
21555: LD_VAR 0 9
21559: PUSH
21560: LD_VAR 0 7
21564: MINUS
21565: PUSH
21566: LD_INT 1
21568: PLUS
21569: PPUSH
21570: LD_VAR 0 9
21574: PUSH
21575: LD_VAR 0 7
21579: ARRAY
21580: PPUSH
21581: CALL_OW 1
21585: ST_TO_ADDR
21586: GO 21542
21588: POP
21589: POP
// end ; tmp := [ ] ;
21590: LD_ADDR_VAR 0 9
21594: PUSH
21595: EMPTY
21596: ST_TO_ADDR
// if mode then
21597: LD_VAR 0 5
21601: IFFALSE 21670
// begin for i = 1 to result do
21603: LD_ADDR_VAR 0 7
21607: PUSH
21608: DOUBLE
21609: LD_INT 1
21611: DEC
21612: ST_TO_ADDR
21613: LD_VAR 0 6
21617: PUSH
21618: FOR_TO
21619: IFFALSE 21658
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21621: LD_ADDR_VAR 0 9
21625: PUSH
21626: LD_VAR 0 9
21630: PPUSH
21631: LD_VAR 0 7
21635: PPUSH
21636: LD_VAR 0 6
21640: PUSH
21641: LD_VAR 0 7
21645: ARRAY
21646: PUSH
21647: LD_INT 1
21649: ARRAY
21650: PPUSH
21651: CALL_OW 1
21655: ST_TO_ADDR
21656: GO 21618
21658: POP
21659: POP
// result := tmp ;
21660: LD_ADDR_VAR 0 6
21664: PUSH
21665: LD_VAR 0 9
21669: ST_TO_ADDR
// end ; end ;
21670: LD_VAR 0 6
21674: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21675: LD_INT 0
21677: PPUSH
21678: PPUSH
21679: PPUSH
21680: PPUSH
21681: PPUSH
21682: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21683: LD_ADDR_VAR 0 5
21687: PUSH
21688: LD_INT 0
21690: PUSH
21691: LD_INT 0
21693: PUSH
21694: LD_INT 0
21696: PUSH
21697: EMPTY
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: ST_TO_ADDR
// if not x or not y then
21705: LD_VAR 0 2
21709: NOT
21710: PUSH
21711: LD_VAR 0 3
21715: NOT
21716: OR
21717: IFFALSE 21721
// exit ;
21719: GO 23371
// if not range then
21721: LD_VAR 0 4
21725: NOT
21726: IFFALSE 21736
// range := 10 ;
21728: LD_ADDR_VAR 0 4
21732: PUSH
21733: LD_INT 10
21735: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21736: LD_ADDR_VAR 0 8
21740: PUSH
21741: LD_INT 81
21743: PUSH
21744: LD_VAR 0 1
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: LD_INT 92
21755: PUSH
21756: LD_VAR 0 2
21760: PUSH
21761: LD_VAR 0 3
21765: PUSH
21766: LD_VAR 0 4
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 3
21779: PUSH
21780: LD_INT 21
21782: PUSH
21783: LD_INT 3
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: LIST
21798: PPUSH
21799: CALL_OW 69
21803: ST_TO_ADDR
// if not tmp then
21804: LD_VAR 0 8
21808: NOT
21809: IFFALSE 21813
// exit ;
21811: GO 23371
// for i in tmp do
21813: LD_ADDR_VAR 0 6
21817: PUSH
21818: LD_VAR 0 8
21822: PUSH
21823: FOR_IN
21824: IFFALSE 23346
// begin points := [ 0 , 0 , 0 ] ;
21826: LD_ADDR_VAR 0 9
21830: PUSH
21831: LD_INT 0
21833: PUSH
21834: LD_INT 0
21836: PUSH
21837: LD_INT 0
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: LIST
21844: ST_TO_ADDR
// bpoints := 1 ;
21845: LD_ADDR_VAR 0 10
21849: PUSH
21850: LD_INT 1
21852: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21853: LD_VAR 0 6
21857: PPUSH
21858: CALL_OW 247
21862: PUSH
21863: LD_INT 1
21865: DOUBLE
21866: EQUAL
21867: IFTRUE 21871
21869: GO 22449
21871: POP
// begin if GetClass ( i ) = 1 then
21872: LD_VAR 0 6
21876: PPUSH
21877: CALL_OW 257
21881: PUSH
21882: LD_INT 1
21884: EQUAL
21885: IFFALSE 21906
// points := [ 10 , 5 , 3 ] ;
21887: LD_ADDR_VAR 0 9
21891: PUSH
21892: LD_INT 10
21894: PUSH
21895: LD_INT 5
21897: PUSH
21898: LD_INT 3
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: LIST
21905: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21906: LD_VAR 0 6
21910: PPUSH
21911: CALL_OW 257
21915: PUSH
21916: LD_INT 2
21918: PUSH
21919: LD_INT 3
21921: PUSH
21922: LD_INT 4
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: LIST
21929: IN
21930: IFFALSE 21951
// points := [ 3 , 2 , 1 ] ;
21932: LD_ADDR_VAR 0 9
21936: PUSH
21937: LD_INT 3
21939: PUSH
21940: LD_INT 2
21942: PUSH
21943: LD_INT 1
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: LIST
21950: ST_TO_ADDR
// if GetClass ( i ) = 5 then
21951: LD_VAR 0 6
21955: PPUSH
21956: CALL_OW 257
21960: PUSH
21961: LD_INT 5
21963: EQUAL
21964: IFFALSE 21985
// points := [ 130 , 5 , 2 ] ;
21966: LD_ADDR_VAR 0 9
21970: PUSH
21971: LD_INT 130
21973: PUSH
21974: LD_INT 5
21976: PUSH
21977: LD_INT 2
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: LIST
21984: ST_TO_ADDR
// if GetClass ( i ) = 8 then
21985: LD_VAR 0 6
21989: PPUSH
21990: CALL_OW 257
21994: PUSH
21995: LD_INT 8
21997: EQUAL
21998: IFFALSE 22019
// points := [ 35 , 35 , 30 ] ;
22000: LD_ADDR_VAR 0 9
22004: PUSH
22005: LD_INT 35
22007: PUSH
22008: LD_INT 35
22010: PUSH
22011: LD_INT 30
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: LIST
22018: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22019: LD_VAR 0 6
22023: PPUSH
22024: CALL_OW 257
22028: PUSH
22029: LD_INT 9
22031: EQUAL
22032: IFFALSE 22053
// points := [ 20 , 55 , 40 ] ;
22034: LD_ADDR_VAR 0 9
22038: PUSH
22039: LD_INT 20
22041: PUSH
22042: LD_INT 55
22044: PUSH
22045: LD_INT 40
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: LIST
22052: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22053: LD_VAR 0 6
22057: PPUSH
22058: CALL_OW 257
22062: PUSH
22063: LD_INT 12
22065: PUSH
22066: LD_INT 16
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: IN
22073: IFFALSE 22094
// points := [ 5 , 3 , 2 ] ;
22075: LD_ADDR_VAR 0 9
22079: PUSH
22080: LD_INT 5
22082: PUSH
22083: LD_INT 3
22085: PUSH
22086: LD_INT 2
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: LIST
22093: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22094: LD_VAR 0 6
22098: PPUSH
22099: CALL_OW 257
22103: PUSH
22104: LD_INT 17
22106: EQUAL
22107: IFFALSE 22128
// points := [ 100 , 50 , 75 ] ;
22109: LD_ADDR_VAR 0 9
22113: PUSH
22114: LD_INT 100
22116: PUSH
22117: LD_INT 50
22119: PUSH
22120: LD_INT 75
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: LIST
22127: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22128: LD_VAR 0 6
22132: PPUSH
22133: CALL_OW 257
22137: PUSH
22138: LD_INT 15
22140: EQUAL
22141: IFFALSE 22162
// points := [ 10 , 5 , 3 ] ;
22143: LD_ADDR_VAR 0 9
22147: PUSH
22148: LD_INT 10
22150: PUSH
22151: LD_INT 5
22153: PUSH
22154: LD_INT 3
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: LIST
22161: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22162: LD_VAR 0 6
22166: PPUSH
22167: CALL_OW 257
22171: PUSH
22172: LD_INT 14
22174: EQUAL
22175: IFFALSE 22196
// points := [ 10 , 0 , 0 ] ;
22177: LD_ADDR_VAR 0 9
22181: PUSH
22182: LD_INT 10
22184: PUSH
22185: LD_INT 0
22187: PUSH
22188: LD_INT 0
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: LIST
22195: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22196: LD_VAR 0 6
22200: PPUSH
22201: CALL_OW 257
22205: PUSH
22206: LD_INT 11
22208: EQUAL
22209: IFFALSE 22230
// points := [ 30 , 10 , 5 ] ;
22211: LD_ADDR_VAR 0 9
22215: PUSH
22216: LD_INT 30
22218: PUSH
22219: LD_INT 10
22221: PUSH
22222: LD_INT 5
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: LIST
22229: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
22230: LD_VAR 0 1
22234: PPUSH
22235: LD_INT 5
22237: PPUSH
22238: CALL_OW 321
22242: PUSH
22243: LD_INT 2
22245: EQUAL
22246: IFFALSE 22263
// bpoints := bpoints * 1.8 ;
22248: LD_ADDR_VAR 0 10
22252: PUSH
22253: LD_VAR 0 10
22257: PUSH
22258: LD_REAL  1.80000000000000E+0000
22261: MUL
22262: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22263: LD_VAR 0 6
22267: PPUSH
22268: CALL_OW 257
22272: PUSH
22273: LD_INT 1
22275: PUSH
22276: LD_INT 2
22278: PUSH
22279: LD_INT 3
22281: PUSH
22282: LD_INT 4
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: IN
22291: PUSH
22292: LD_VAR 0 1
22296: PPUSH
22297: LD_INT 51
22299: PPUSH
22300: CALL_OW 321
22304: PUSH
22305: LD_INT 2
22307: EQUAL
22308: AND
22309: IFFALSE 22326
// bpoints := bpoints * 1.2 ;
22311: LD_ADDR_VAR 0 10
22315: PUSH
22316: LD_VAR 0 10
22320: PUSH
22321: LD_REAL  1.20000000000000E+0000
22324: MUL
22325: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22326: LD_VAR 0 6
22330: PPUSH
22331: CALL_OW 257
22335: PUSH
22336: LD_INT 5
22338: PUSH
22339: LD_INT 7
22341: PUSH
22342: LD_INT 9
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: LIST
22349: IN
22350: PUSH
22351: LD_VAR 0 1
22355: PPUSH
22356: LD_INT 52
22358: PPUSH
22359: CALL_OW 321
22363: PUSH
22364: LD_INT 2
22366: EQUAL
22367: AND
22368: IFFALSE 22385
// bpoints := bpoints * 1.5 ;
22370: LD_ADDR_VAR 0 10
22374: PUSH
22375: LD_VAR 0 10
22379: PUSH
22380: LD_REAL  1.50000000000000E+0000
22383: MUL
22384: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22385: LD_VAR 0 1
22389: PPUSH
22390: LD_INT 66
22392: PPUSH
22393: CALL_OW 321
22397: PUSH
22398: LD_INT 2
22400: EQUAL
22401: IFFALSE 22418
// bpoints := bpoints * 1.1 ;
22403: LD_ADDR_VAR 0 10
22407: PUSH
22408: LD_VAR 0 10
22412: PUSH
22413: LD_REAL  1.10000000000000E+0000
22416: MUL
22417: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22418: LD_ADDR_VAR 0 10
22422: PUSH
22423: LD_VAR 0 10
22427: PUSH
22428: LD_VAR 0 6
22432: PPUSH
22433: LD_INT 1
22435: PPUSH
22436: CALL_OW 259
22440: PUSH
22441: LD_REAL  1.15000000000000E+0000
22444: MUL
22445: MUL
22446: ST_TO_ADDR
// end ; unit_vehicle :
22447: GO 23275
22449: LD_INT 2
22451: DOUBLE
22452: EQUAL
22453: IFTRUE 22457
22455: GO 23263
22457: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22458: LD_VAR 0 6
22462: PPUSH
22463: CALL_OW 264
22467: PUSH
22468: LD_INT 2
22470: PUSH
22471: LD_INT 42
22473: PUSH
22474: LD_INT 24
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: LIST
22481: IN
22482: IFFALSE 22503
// points := [ 25 , 5 , 3 ] ;
22484: LD_ADDR_VAR 0 9
22488: PUSH
22489: LD_INT 25
22491: PUSH
22492: LD_INT 5
22494: PUSH
22495: LD_INT 3
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: LIST
22502: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22503: LD_VAR 0 6
22507: PPUSH
22508: CALL_OW 264
22512: PUSH
22513: LD_INT 4
22515: PUSH
22516: LD_INT 43
22518: PUSH
22519: LD_INT 25
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: LIST
22526: IN
22527: IFFALSE 22548
// points := [ 40 , 15 , 5 ] ;
22529: LD_ADDR_VAR 0 9
22533: PUSH
22534: LD_INT 40
22536: PUSH
22537: LD_INT 15
22539: PUSH
22540: LD_INT 5
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: LIST
22547: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22548: LD_VAR 0 6
22552: PPUSH
22553: CALL_OW 264
22557: PUSH
22558: LD_INT 3
22560: PUSH
22561: LD_INT 23
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: IN
22568: IFFALSE 22589
// points := [ 7 , 25 , 8 ] ;
22570: LD_ADDR_VAR 0 9
22574: PUSH
22575: LD_INT 7
22577: PUSH
22578: LD_INT 25
22580: PUSH
22581: LD_INT 8
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: LIST
22588: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22589: LD_VAR 0 6
22593: PPUSH
22594: CALL_OW 264
22598: PUSH
22599: LD_INT 5
22601: PUSH
22602: LD_INT 27
22604: PUSH
22605: LD_INT 44
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: LIST
22612: IN
22613: IFFALSE 22634
// points := [ 14 , 50 , 16 ] ;
22615: LD_ADDR_VAR 0 9
22619: PUSH
22620: LD_INT 14
22622: PUSH
22623: LD_INT 50
22625: PUSH
22626: LD_INT 16
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: LIST
22633: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22634: LD_VAR 0 6
22638: PPUSH
22639: CALL_OW 264
22643: PUSH
22644: LD_INT 6
22646: PUSH
22647: LD_INT 46
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: IN
22654: IFFALSE 22675
// points := [ 32 , 120 , 70 ] ;
22656: LD_ADDR_VAR 0 9
22660: PUSH
22661: LD_INT 32
22663: PUSH
22664: LD_INT 120
22666: PUSH
22667: LD_INT 70
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: LIST
22674: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22675: LD_VAR 0 6
22679: PPUSH
22680: CALL_OW 264
22684: PUSH
22685: LD_INT 7
22687: PUSH
22688: LD_INT 28
22690: PUSH
22691: LD_INT 45
22693: PUSH
22694: LD_INT 92
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: IN
22703: IFFALSE 22724
// points := [ 35 , 20 , 45 ] ;
22705: LD_ADDR_VAR 0 9
22709: PUSH
22710: LD_INT 35
22712: PUSH
22713: LD_INT 20
22715: PUSH
22716: LD_INT 45
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: LIST
22723: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22724: LD_VAR 0 6
22728: PPUSH
22729: CALL_OW 264
22733: PUSH
22734: LD_INT 47
22736: PUSH
22737: EMPTY
22738: LIST
22739: IN
22740: IFFALSE 22761
// points := [ 67 , 45 , 75 ] ;
22742: LD_ADDR_VAR 0 9
22746: PUSH
22747: LD_INT 67
22749: PUSH
22750: LD_INT 45
22752: PUSH
22753: LD_INT 75
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: LIST
22760: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22761: LD_VAR 0 6
22765: PPUSH
22766: CALL_OW 264
22770: PUSH
22771: LD_INT 26
22773: PUSH
22774: EMPTY
22775: LIST
22776: IN
22777: IFFALSE 22798
// points := [ 120 , 30 , 80 ] ;
22779: LD_ADDR_VAR 0 9
22783: PUSH
22784: LD_INT 120
22786: PUSH
22787: LD_INT 30
22789: PUSH
22790: LD_INT 80
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: LIST
22797: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22798: LD_VAR 0 6
22802: PPUSH
22803: CALL_OW 264
22807: PUSH
22808: LD_INT 22
22810: PUSH
22811: EMPTY
22812: LIST
22813: IN
22814: IFFALSE 22835
// points := [ 40 , 1 , 1 ] ;
22816: LD_ADDR_VAR 0 9
22820: PUSH
22821: LD_INT 40
22823: PUSH
22824: LD_INT 1
22826: PUSH
22827: LD_INT 1
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: LIST
22834: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22835: LD_VAR 0 6
22839: PPUSH
22840: CALL_OW 264
22844: PUSH
22845: LD_INT 29
22847: PUSH
22848: EMPTY
22849: LIST
22850: IN
22851: IFFALSE 22872
// points := [ 70 , 200 , 400 ] ;
22853: LD_ADDR_VAR 0 9
22857: PUSH
22858: LD_INT 70
22860: PUSH
22861: LD_INT 200
22863: PUSH
22864: LD_INT 400
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: LIST
22871: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22872: LD_VAR 0 6
22876: PPUSH
22877: CALL_OW 264
22881: PUSH
22882: LD_INT 14
22884: PUSH
22885: LD_INT 53
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: IN
22892: IFFALSE 22913
// points := [ 40 , 10 , 20 ] ;
22894: LD_ADDR_VAR 0 9
22898: PUSH
22899: LD_INT 40
22901: PUSH
22902: LD_INT 10
22904: PUSH
22905: LD_INT 20
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: LIST
22912: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22913: LD_VAR 0 6
22917: PPUSH
22918: CALL_OW 264
22922: PUSH
22923: LD_INT 9
22925: PUSH
22926: EMPTY
22927: LIST
22928: IN
22929: IFFALSE 22950
// points := [ 5 , 70 , 20 ] ;
22931: LD_ADDR_VAR 0 9
22935: PUSH
22936: LD_INT 5
22938: PUSH
22939: LD_INT 70
22941: PUSH
22942: LD_INT 20
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: LIST
22949: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
22950: LD_VAR 0 6
22954: PPUSH
22955: CALL_OW 264
22959: PUSH
22960: LD_INT 10
22962: PUSH
22963: EMPTY
22964: LIST
22965: IN
22966: IFFALSE 22987
// points := [ 35 , 110 , 70 ] ;
22968: LD_ADDR_VAR 0 9
22972: PUSH
22973: LD_INT 35
22975: PUSH
22976: LD_INT 110
22978: PUSH
22979: LD_INT 70
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: LIST
22986: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
22987: LD_VAR 0 6
22991: PPUSH
22992: CALL_OW 265
22996: PUSH
22997: LD_INT 25
22999: EQUAL
23000: IFFALSE 23021
// points := [ 80 , 65 , 100 ] ;
23002: LD_ADDR_VAR 0 9
23006: PUSH
23007: LD_INT 80
23009: PUSH
23010: LD_INT 65
23012: PUSH
23013: LD_INT 100
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: LIST
23020: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23021: LD_VAR 0 6
23025: PPUSH
23026: CALL_OW 263
23030: PUSH
23031: LD_INT 1
23033: EQUAL
23034: IFFALSE 23069
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23036: LD_ADDR_VAR 0 10
23040: PUSH
23041: LD_VAR 0 10
23045: PUSH
23046: LD_VAR 0 6
23050: PPUSH
23051: CALL_OW 311
23055: PPUSH
23056: LD_INT 3
23058: PPUSH
23059: CALL_OW 259
23063: PUSH
23064: LD_INT 4
23066: MUL
23067: MUL
23068: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23069: LD_VAR 0 6
23073: PPUSH
23074: CALL_OW 263
23078: PUSH
23079: LD_INT 2
23081: EQUAL
23082: IFFALSE 23133
// begin j := IsControledBy ( i ) ;
23084: LD_ADDR_VAR 0 7
23088: PUSH
23089: LD_VAR 0 6
23093: PPUSH
23094: CALL_OW 312
23098: ST_TO_ADDR
// if j then
23099: LD_VAR 0 7
23103: IFFALSE 23133
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23105: LD_ADDR_VAR 0 10
23109: PUSH
23110: LD_VAR 0 10
23114: PUSH
23115: LD_VAR 0 7
23119: PPUSH
23120: LD_INT 3
23122: PPUSH
23123: CALL_OW 259
23127: PUSH
23128: LD_INT 3
23130: MUL
23131: MUL
23132: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23133: LD_VAR 0 6
23137: PPUSH
23138: CALL_OW 264
23142: PUSH
23143: LD_INT 5
23145: PUSH
23146: LD_INT 6
23148: PUSH
23149: LD_INT 46
23151: PUSH
23152: LD_INT 44
23154: PUSH
23155: LD_INT 47
23157: PUSH
23158: LD_INT 45
23160: PUSH
23161: LD_INT 28
23163: PUSH
23164: LD_INT 7
23166: PUSH
23167: LD_INT 27
23169: PUSH
23170: LD_INT 29
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: IN
23185: PUSH
23186: LD_VAR 0 1
23190: PPUSH
23191: LD_INT 52
23193: PPUSH
23194: CALL_OW 321
23198: PUSH
23199: LD_INT 2
23201: EQUAL
23202: AND
23203: IFFALSE 23220
// bpoints := bpoints * 1.2 ;
23205: LD_ADDR_VAR 0 10
23209: PUSH
23210: LD_VAR 0 10
23214: PUSH
23215: LD_REAL  1.20000000000000E+0000
23218: MUL
23219: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
23220: LD_VAR 0 6
23224: PPUSH
23225: CALL_OW 264
23229: PUSH
23230: LD_INT 6
23232: PUSH
23233: LD_INT 46
23235: PUSH
23236: LD_INT 47
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: LIST
23243: IN
23244: IFFALSE 23261
// bpoints := bpoints * 1.2 ;
23246: LD_ADDR_VAR 0 10
23250: PUSH
23251: LD_VAR 0 10
23255: PUSH
23256: LD_REAL  1.20000000000000E+0000
23259: MUL
23260: ST_TO_ADDR
// end ; unit_building :
23261: GO 23275
23263: LD_INT 3
23265: DOUBLE
23266: EQUAL
23267: IFTRUE 23271
23269: GO 23274
23271: POP
// ; end ;
23272: GO 23275
23274: POP
// for j = 1 to 3 do
23275: LD_ADDR_VAR 0 7
23279: PUSH
23280: DOUBLE
23281: LD_INT 1
23283: DEC
23284: ST_TO_ADDR
23285: LD_INT 3
23287: PUSH
23288: FOR_TO
23289: IFFALSE 23342
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23291: LD_ADDR_VAR 0 5
23295: PUSH
23296: LD_VAR 0 5
23300: PPUSH
23301: LD_VAR 0 7
23305: PPUSH
23306: LD_VAR 0 5
23310: PUSH
23311: LD_VAR 0 7
23315: ARRAY
23316: PUSH
23317: LD_VAR 0 9
23321: PUSH
23322: LD_VAR 0 7
23326: ARRAY
23327: PUSH
23328: LD_VAR 0 10
23332: MUL
23333: PLUS
23334: PPUSH
23335: CALL_OW 1
23339: ST_TO_ADDR
23340: GO 23288
23342: POP
23343: POP
// end ;
23344: GO 21823
23346: POP
23347: POP
// result := Replace ( result , 4 , tmp ) ;
23348: LD_ADDR_VAR 0 5
23352: PUSH
23353: LD_VAR 0 5
23357: PPUSH
23358: LD_INT 4
23360: PPUSH
23361: LD_VAR 0 8
23365: PPUSH
23366: CALL_OW 1
23370: ST_TO_ADDR
// end ;
23371: LD_VAR 0 5
23375: RET
// export function DangerAtRange ( unit , range ) ; begin
23376: LD_INT 0
23378: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23379: LD_ADDR_VAR 0 3
23383: PUSH
23384: LD_VAR 0 1
23388: PPUSH
23389: CALL_OW 255
23393: PPUSH
23394: LD_VAR 0 1
23398: PPUSH
23399: CALL_OW 250
23403: PPUSH
23404: LD_VAR 0 1
23408: PPUSH
23409: CALL_OW 251
23413: PPUSH
23414: LD_VAR 0 2
23418: PPUSH
23419: CALL 21675 0 4
23423: ST_TO_ADDR
// end ;
23424: LD_VAR 0 3
23428: RET
// export function DangerInArea ( side , area ) ; begin
23429: LD_INT 0
23431: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23432: LD_ADDR_VAR 0 3
23436: PUSH
23437: LD_VAR 0 2
23441: PPUSH
23442: LD_INT 81
23444: PUSH
23445: LD_VAR 0 1
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PPUSH
23454: CALL_OW 70
23458: ST_TO_ADDR
// end ;
23459: LD_VAR 0 3
23463: RET
// export function IsExtension ( b ) ; begin
23464: LD_INT 0
23466: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23467: LD_ADDR_VAR 0 2
23471: PUSH
23472: LD_VAR 0 1
23476: PUSH
23477: LD_INT 23
23479: PUSH
23480: LD_INT 20
23482: PUSH
23483: LD_INT 22
23485: PUSH
23486: LD_INT 17
23488: PUSH
23489: LD_INT 24
23491: PUSH
23492: LD_INT 21
23494: PUSH
23495: LD_INT 19
23497: PUSH
23498: LD_INT 16
23500: PUSH
23501: LD_INT 25
23503: PUSH
23504: LD_INT 18
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: IN
23519: ST_TO_ADDR
// end ;
23520: LD_VAR 0 2
23524: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23525: LD_INT 0
23527: PPUSH
23528: PPUSH
23529: PPUSH
// result := [ ] ;
23530: LD_ADDR_VAR 0 4
23534: PUSH
23535: EMPTY
23536: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23537: LD_ADDR_VAR 0 5
23541: PUSH
23542: LD_VAR 0 2
23546: PPUSH
23547: LD_INT 21
23549: PUSH
23550: LD_INT 3
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PPUSH
23557: CALL_OW 70
23561: ST_TO_ADDR
// if not tmp then
23562: LD_VAR 0 5
23566: NOT
23567: IFFALSE 23571
// exit ;
23569: GO 23635
// if checkLink then
23571: LD_VAR 0 3
23575: IFFALSE 23625
// begin for i in tmp do
23577: LD_ADDR_VAR 0 6
23581: PUSH
23582: LD_VAR 0 5
23586: PUSH
23587: FOR_IN
23588: IFFALSE 23623
// if GetBase ( i ) <> base then
23590: LD_VAR 0 6
23594: PPUSH
23595: CALL_OW 274
23599: PUSH
23600: LD_VAR 0 1
23604: NONEQUAL
23605: IFFALSE 23621
// ComLinkToBase ( base , i ) ;
23607: LD_VAR 0 1
23611: PPUSH
23612: LD_VAR 0 6
23616: PPUSH
23617: CALL_OW 169
23621: GO 23587
23623: POP
23624: POP
// end ; result := tmp ;
23625: LD_ADDR_VAR 0 4
23629: PUSH
23630: LD_VAR 0 5
23634: ST_TO_ADDR
// end ;
23635: LD_VAR 0 4
23639: RET
// export function ComComplete ( units , b ) ; var i ; begin
23640: LD_INT 0
23642: PPUSH
23643: PPUSH
// if not units then
23644: LD_VAR 0 1
23648: NOT
23649: IFFALSE 23653
// exit ;
23651: GO 23743
// for i in units do
23653: LD_ADDR_VAR 0 4
23657: PUSH
23658: LD_VAR 0 1
23662: PUSH
23663: FOR_IN
23664: IFFALSE 23741
// if BuildingStatus ( b ) = bs_build then
23666: LD_VAR 0 2
23670: PPUSH
23671: CALL_OW 461
23675: PUSH
23676: LD_INT 1
23678: EQUAL
23679: IFFALSE 23739
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23681: LD_VAR 0 4
23685: PPUSH
23686: LD_STRING h
23688: PUSH
23689: LD_VAR 0 2
23693: PPUSH
23694: CALL_OW 250
23698: PUSH
23699: LD_VAR 0 2
23703: PPUSH
23704: CALL_OW 251
23708: PUSH
23709: LD_VAR 0 2
23713: PUSH
23714: LD_INT 0
23716: PUSH
23717: LD_INT 0
23719: PUSH
23720: LD_INT 0
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: PUSH
23732: EMPTY
23733: LIST
23734: PPUSH
23735: CALL_OW 446
23739: GO 23663
23741: POP
23742: POP
// end ;
23743: LD_VAR 0 3
23747: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23748: LD_INT 0
23750: PPUSH
23751: PPUSH
23752: PPUSH
23753: PPUSH
23754: PPUSH
23755: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23756: LD_VAR 0 1
23760: NOT
23761: PUSH
23762: LD_VAR 0 1
23766: PPUSH
23767: CALL_OW 263
23771: PUSH
23772: LD_INT 2
23774: NONEQUAL
23775: OR
23776: IFFALSE 23780
// exit ;
23778: GO 24096
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23780: LD_ADDR_VAR 0 6
23784: PUSH
23785: LD_INT 22
23787: PUSH
23788: LD_VAR 0 1
23792: PPUSH
23793: CALL_OW 255
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 2
23804: PUSH
23805: LD_INT 30
23807: PUSH
23808: LD_INT 36
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: PUSH
23815: LD_INT 34
23817: PUSH
23818: LD_INT 31
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: LIST
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PPUSH
23834: CALL_OW 69
23838: ST_TO_ADDR
// if not tmp then
23839: LD_VAR 0 6
23843: NOT
23844: IFFALSE 23848
// exit ;
23846: GO 24096
// result := [ ] ;
23848: LD_ADDR_VAR 0 2
23852: PUSH
23853: EMPTY
23854: ST_TO_ADDR
// for i in tmp do
23855: LD_ADDR_VAR 0 3
23859: PUSH
23860: LD_VAR 0 6
23864: PUSH
23865: FOR_IN
23866: IFFALSE 23937
// begin t := UnitsInside ( i ) ;
23868: LD_ADDR_VAR 0 4
23872: PUSH
23873: LD_VAR 0 3
23877: PPUSH
23878: CALL_OW 313
23882: ST_TO_ADDR
// if t then
23883: LD_VAR 0 4
23887: IFFALSE 23935
// for j in t do
23889: LD_ADDR_VAR 0 7
23893: PUSH
23894: LD_VAR 0 4
23898: PUSH
23899: FOR_IN
23900: IFFALSE 23933
// result := Replace ( result , result + 1 , j ) ;
23902: LD_ADDR_VAR 0 2
23906: PUSH
23907: LD_VAR 0 2
23911: PPUSH
23912: LD_VAR 0 2
23916: PUSH
23917: LD_INT 1
23919: PLUS
23920: PPUSH
23921: LD_VAR 0 7
23925: PPUSH
23926: CALL_OW 1
23930: ST_TO_ADDR
23931: GO 23899
23933: POP
23934: POP
// end ;
23935: GO 23865
23937: POP
23938: POP
// if not result then
23939: LD_VAR 0 2
23943: NOT
23944: IFFALSE 23948
// exit ;
23946: GO 24096
// mech := result [ 1 ] ;
23948: LD_ADDR_VAR 0 5
23952: PUSH
23953: LD_VAR 0 2
23957: PUSH
23958: LD_INT 1
23960: ARRAY
23961: ST_TO_ADDR
// if result > 1 then
23962: LD_VAR 0 2
23966: PUSH
23967: LD_INT 1
23969: GREATER
23970: IFFALSE 24082
// begin for i = 2 to result do
23972: LD_ADDR_VAR 0 3
23976: PUSH
23977: DOUBLE
23978: LD_INT 2
23980: DEC
23981: ST_TO_ADDR
23982: LD_VAR 0 2
23986: PUSH
23987: FOR_TO
23988: IFFALSE 24080
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
23990: LD_ADDR_VAR 0 4
23994: PUSH
23995: LD_VAR 0 2
23999: PUSH
24000: LD_VAR 0 3
24004: ARRAY
24005: PPUSH
24006: LD_INT 3
24008: PPUSH
24009: CALL_OW 259
24013: PUSH
24014: LD_VAR 0 2
24018: PUSH
24019: LD_VAR 0 3
24023: ARRAY
24024: PPUSH
24025: CALL_OW 432
24029: MINUS
24030: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24031: LD_VAR 0 4
24035: PUSH
24036: LD_VAR 0 5
24040: PPUSH
24041: LD_INT 3
24043: PPUSH
24044: CALL_OW 259
24048: PUSH
24049: LD_VAR 0 5
24053: PPUSH
24054: CALL_OW 432
24058: MINUS
24059: GREATEREQUAL
24060: IFFALSE 24078
// mech := result [ i ] ;
24062: LD_ADDR_VAR 0 5
24066: PUSH
24067: LD_VAR 0 2
24071: PUSH
24072: LD_VAR 0 3
24076: ARRAY
24077: ST_TO_ADDR
// end ;
24078: GO 23987
24080: POP
24081: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24082: LD_VAR 0 1
24086: PPUSH
24087: LD_VAR 0 5
24091: PPUSH
24092: CALL_OW 135
// end ;
24096: LD_VAR 0 2
24100: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24101: LD_INT 0
24103: PPUSH
24104: PPUSH
24105: PPUSH
24106: PPUSH
24107: PPUSH
24108: PPUSH
24109: PPUSH
24110: PPUSH
24111: PPUSH
24112: PPUSH
24113: PPUSH
24114: PPUSH
24115: PPUSH
// result := [ ] ;
24116: LD_ADDR_VAR 0 7
24120: PUSH
24121: EMPTY
24122: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24123: LD_VAR 0 1
24127: PPUSH
24128: CALL_OW 266
24132: PUSH
24133: LD_INT 0
24135: PUSH
24136: LD_INT 1
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: IN
24143: NOT
24144: IFFALSE 24148
// exit ;
24146: GO 25782
// if name then
24148: LD_VAR 0 3
24152: IFFALSE 24168
// SetBName ( base_dep , name ) ;
24154: LD_VAR 0 1
24158: PPUSH
24159: LD_VAR 0 3
24163: PPUSH
24164: CALL_OW 500
// base := GetBase ( base_dep ) ;
24168: LD_ADDR_VAR 0 15
24172: PUSH
24173: LD_VAR 0 1
24177: PPUSH
24178: CALL_OW 274
24182: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24183: LD_ADDR_VAR 0 16
24187: PUSH
24188: LD_VAR 0 1
24192: PPUSH
24193: CALL_OW 255
24197: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
24198: LD_ADDR_VAR 0 17
24202: PUSH
24203: LD_VAR 0 1
24207: PPUSH
24208: CALL_OW 248
24212: ST_TO_ADDR
// if sources then
24213: LD_VAR 0 5
24217: IFFALSE 24264
// for i = 1 to 3 do
24219: LD_ADDR_VAR 0 8
24223: PUSH
24224: DOUBLE
24225: LD_INT 1
24227: DEC
24228: ST_TO_ADDR
24229: LD_INT 3
24231: PUSH
24232: FOR_TO
24233: IFFALSE 24262
// AddResourceType ( base , i , sources [ i ] ) ;
24235: LD_VAR 0 15
24239: PPUSH
24240: LD_VAR 0 8
24244: PPUSH
24245: LD_VAR 0 5
24249: PUSH
24250: LD_VAR 0 8
24254: ARRAY
24255: PPUSH
24256: CALL_OW 276
24260: GO 24232
24262: POP
24263: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
24264: LD_ADDR_VAR 0 18
24268: PUSH
24269: LD_VAR 0 15
24273: PPUSH
24274: LD_VAR 0 2
24278: PPUSH
24279: LD_INT 1
24281: PPUSH
24282: CALL 23525 0 3
24286: ST_TO_ADDR
// InitHc ;
24287: CALL_OW 19
// InitUc ;
24291: CALL_OW 18
// uc_side := side ;
24295: LD_ADDR_OWVAR 20
24299: PUSH
24300: LD_VAR 0 16
24304: ST_TO_ADDR
// uc_nation := nation ;
24305: LD_ADDR_OWVAR 21
24309: PUSH
24310: LD_VAR 0 17
24314: ST_TO_ADDR
// if buildings then
24315: LD_VAR 0 18
24319: IFFALSE 25641
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24321: LD_ADDR_VAR 0 19
24325: PUSH
24326: LD_VAR 0 18
24330: PPUSH
24331: LD_INT 2
24333: PUSH
24334: LD_INT 30
24336: PUSH
24337: LD_INT 29
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 30
24346: PUSH
24347: LD_INT 30
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: LIST
24358: PPUSH
24359: CALL_OW 72
24363: ST_TO_ADDR
// if tmp then
24364: LD_VAR 0 19
24368: IFFALSE 24416
// for i in tmp do
24370: LD_ADDR_VAR 0 8
24374: PUSH
24375: LD_VAR 0 19
24379: PUSH
24380: FOR_IN
24381: IFFALSE 24414
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24383: LD_VAR 0 8
24387: PPUSH
24388: CALL_OW 250
24392: PPUSH
24393: LD_VAR 0 8
24397: PPUSH
24398: CALL_OW 251
24402: PPUSH
24403: LD_VAR 0 16
24407: PPUSH
24408: CALL_OW 441
24412: GO 24380
24414: POP
24415: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24416: LD_VAR 0 18
24420: PPUSH
24421: LD_INT 2
24423: PUSH
24424: LD_INT 30
24426: PUSH
24427: LD_INT 32
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: LD_INT 30
24436: PUSH
24437: LD_INT 33
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: LIST
24448: PPUSH
24449: CALL_OW 72
24453: IFFALSE 24541
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24455: LD_ADDR_VAR 0 8
24459: PUSH
24460: LD_VAR 0 18
24464: PPUSH
24465: LD_INT 2
24467: PUSH
24468: LD_INT 30
24470: PUSH
24471: LD_INT 32
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 30
24480: PUSH
24481: LD_INT 33
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: LIST
24492: PPUSH
24493: CALL_OW 72
24497: PUSH
24498: FOR_IN
24499: IFFALSE 24539
// begin if not GetBWeapon ( i ) then
24501: LD_VAR 0 8
24505: PPUSH
24506: CALL_OW 269
24510: NOT
24511: IFFALSE 24537
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24513: LD_VAR 0 8
24517: PPUSH
24518: LD_VAR 0 8
24522: PPUSH
24523: LD_VAR 0 2
24527: PPUSH
24528: CALL 25787 0 2
24532: PPUSH
24533: CALL_OW 431
// end ;
24537: GO 24498
24539: POP
24540: POP
// end ; for i = 1 to personel do
24541: LD_ADDR_VAR 0 8
24545: PUSH
24546: DOUBLE
24547: LD_INT 1
24549: DEC
24550: ST_TO_ADDR
24551: LD_VAR 0 6
24555: PUSH
24556: FOR_TO
24557: IFFALSE 25621
// begin if i > 4 then
24559: LD_VAR 0 8
24563: PUSH
24564: LD_INT 4
24566: GREATER
24567: IFFALSE 24571
// break ;
24569: GO 25621
// case i of 1 :
24571: LD_VAR 0 8
24575: PUSH
24576: LD_INT 1
24578: DOUBLE
24579: EQUAL
24580: IFTRUE 24584
24582: GO 24664
24584: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24585: LD_ADDR_VAR 0 12
24589: PUSH
24590: LD_VAR 0 18
24594: PPUSH
24595: LD_INT 22
24597: PUSH
24598: LD_VAR 0 16
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: LD_INT 58
24609: PUSH
24610: EMPTY
24611: LIST
24612: PUSH
24613: LD_INT 2
24615: PUSH
24616: LD_INT 30
24618: PUSH
24619: LD_INT 32
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 30
24628: PUSH
24629: LD_INT 4
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 30
24638: PUSH
24639: LD_INT 5
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: LIST
24656: PPUSH
24657: CALL_OW 72
24661: ST_TO_ADDR
24662: GO 24886
24664: LD_INT 2
24666: DOUBLE
24667: EQUAL
24668: IFTRUE 24672
24670: GO 24734
24672: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24673: LD_ADDR_VAR 0 12
24677: PUSH
24678: LD_VAR 0 18
24682: PPUSH
24683: LD_INT 22
24685: PUSH
24686: LD_VAR 0 16
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 2
24697: PUSH
24698: LD_INT 30
24700: PUSH
24701: LD_INT 0
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 30
24710: PUSH
24711: LD_INT 1
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: LIST
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PPUSH
24727: CALL_OW 72
24731: ST_TO_ADDR
24732: GO 24886
24734: LD_INT 3
24736: DOUBLE
24737: EQUAL
24738: IFTRUE 24742
24740: GO 24804
24742: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24743: LD_ADDR_VAR 0 12
24747: PUSH
24748: LD_VAR 0 18
24752: PPUSH
24753: LD_INT 22
24755: PUSH
24756: LD_VAR 0 16
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PUSH
24765: LD_INT 2
24767: PUSH
24768: LD_INT 30
24770: PUSH
24771: LD_INT 2
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 30
24780: PUSH
24781: LD_INT 3
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: LIST
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PPUSH
24797: CALL_OW 72
24801: ST_TO_ADDR
24802: GO 24886
24804: LD_INT 4
24806: DOUBLE
24807: EQUAL
24808: IFTRUE 24812
24810: GO 24885
24812: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24813: LD_ADDR_VAR 0 12
24817: PUSH
24818: LD_VAR 0 18
24822: PPUSH
24823: LD_INT 22
24825: PUSH
24826: LD_VAR 0 16
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PUSH
24835: LD_INT 2
24837: PUSH
24838: LD_INT 30
24840: PUSH
24841: LD_INT 6
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 30
24850: PUSH
24851: LD_INT 7
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: LD_INT 30
24860: PUSH
24861: LD_INT 8
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PPUSH
24878: CALL_OW 72
24882: ST_TO_ADDR
24883: GO 24886
24885: POP
// if i = 1 then
24886: LD_VAR 0 8
24890: PUSH
24891: LD_INT 1
24893: EQUAL
24894: IFFALSE 25005
// begin tmp := [ ] ;
24896: LD_ADDR_VAR 0 19
24900: PUSH
24901: EMPTY
24902: ST_TO_ADDR
// for j in f do
24903: LD_ADDR_VAR 0 9
24907: PUSH
24908: LD_VAR 0 12
24912: PUSH
24913: FOR_IN
24914: IFFALSE 24987
// if GetBType ( j ) = b_bunker then
24916: LD_VAR 0 9
24920: PPUSH
24921: CALL_OW 266
24925: PUSH
24926: LD_INT 32
24928: EQUAL
24929: IFFALSE 24956
// tmp := Insert ( tmp , 1 , j ) else
24931: LD_ADDR_VAR 0 19
24935: PUSH
24936: LD_VAR 0 19
24940: PPUSH
24941: LD_INT 1
24943: PPUSH
24944: LD_VAR 0 9
24948: PPUSH
24949: CALL_OW 2
24953: ST_TO_ADDR
24954: GO 24985
// tmp := Insert ( tmp , tmp + 1 , j ) ;
24956: LD_ADDR_VAR 0 19
24960: PUSH
24961: LD_VAR 0 19
24965: PPUSH
24966: LD_VAR 0 19
24970: PUSH
24971: LD_INT 1
24973: PLUS
24974: PPUSH
24975: LD_VAR 0 9
24979: PPUSH
24980: CALL_OW 2
24984: ST_TO_ADDR
24985: GO 24913
24987: POP
24988: POP
// if tmp then
24989: LD_VAR 0 19
24993: IFFALSE 25005
// f := tmp ;
24995: LD_ADDR_VAR 0 12
24999: PUSH
25000: LD_VAR 0 19
25004: ST_TO_ADDR
// end ; x := personel [ i ] ;
25005: LD_ADDR_VAR 0 13
25009: PUSH
25010: LD_VAR 0 6
25014: PUSH
25015: LD_VAR 0 8
25019: ARRAY
25020: ST_TO_ADDR
// if x = - 1 then
25021: LD_VAR 0 13
25025: PUSH
25026: LD_INT 1
25028: NEG
25029: EQUAL
25030: IFFALSE 25239
// begin for j in f do
25032: LD_ADDR_VAR 0 9
25036: PUSH
25037: LD_VAR 0 12
25041: PUSH
25042: FOR_IN
25043: IFFALSE 25235
// repeat InitHc ;
25045: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25049: LD_VAR 0 9
25053: PPUSH
25054: CALL_OW 266
25058: PUSH
25059: LD_INT 5
25061: EQUAL
25062: IFFALSE 25132
// begin if UnitsInside ( j ) < 3 then
25064: LD_VAR 0 9
25068: PPUSH
25069: CALL_OW 313
25073: PUSH
25074: LD_INT 3
25076: LESS
25077: IFFALSE 25113
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25079: LD_INT 0
25081: PPUSH
25082: LD_INT 5
25084: PUSH
25085: LD_INT 8
25087: PUSH
25088: LD_INT 9
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: LIST
25095: PUSH
25096: LD_VAR 0 17
25100: ARRAY
25101: PPUSH
25102: LD_VAR 0 4
25106: PPUSH
25107: CALL_OW 380
25111: GO 25130
// PrepareHuman ( false , i , skill ) ;
25113: LD_INT 0
25115: PPUSH
25116: LD_VAR 0 8
25120: PPUSH
25121: LD_VAR 0 4
25125: PPUSH
25126: CALL_OW 380
// end else
25130: GO 25149
// PrepareHuman ( false , i , skill ) ;
25132: LD_INT 0
25134: PPUSH
25135: LD_VAR 0 8
25139: PPUSH
25140: LD_VAR 0 4
25144: PPUSH
25145: CALL_OW 380
// un := CreateHuman ;
25149: LD_ADDR_VAR 0 14
25153: PUSH
25154: CALL_OW 44
25158: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25159: LD_ADDR_VAR 0 7
25163: PUSH
25164: LD_VAR 0 7
25168: PPUSH
25169: LD_INT 1
25171: PPUSH
25172: LD_VAR 0 14
25176: PPUSH
25177: CALL_OW 2
25181: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25182: LD_VAR 0 14
25186: PPUSH
25187: LD_VAR 0 9
25191: PPUSH
25192: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25196: LD_VAR 0 9
25200: PPUSH
25201: CALL_OW 313
25205: PUSH
25206: LD_INT 6
25208: EQUAL
25209: PUSH
25210: LD_VAR 0 9
25214: PPUSH
25215: CALL_OW 266
25219: PUSH
25220: LD_INT 32
25222: PUSH
25223: LD_INT 31
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: IN
25230: OR
25231: IFFALSE 25045
25233: GO 25042
25235: POP
25236: POP
// end else
25237: GO 25619
// for j = 1 to x do
25239: LD_ADDR_VAR 0 9
25243: PUSH
25244: DOUBLE
25245: LD_INT 1
25247: DEC
25248: ST_TO_ADDR
25249: LD_VAR 0 13
25253: PUSH
25254: FOR_TO
25255: IFFALSE 25617
// begin InitHc ;
25257: CALL_OW 19
// if not f then
25261: LD_VAR 0 12
25265: NOT
25266: IFFALSE 25355
// begin PrepareHuman ( false , i , skill ) ;
25268: LD_INT 0
25270: PPUSH
25271: LD_VAR 0 8
25275: PPUSH
25276: LD_VAR 0 4
25280: PPUSH
25281: CALL_OW 380
// un := CreateHuman ;
25285: LD_ADDR_VAR 0 14
25289: PUSH
25290: CALL_OW 44
25294: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25295: LD_ADDR_VAR 0 7
25299: PUSH
25300: LD_VAR 0 7
25304: PPUSH
25305: LD_INT 1
25307: PPUSH
25308: LD_VAR 0 14
25312: PPUSH
25313: CALL_OW 2
25317: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25318: LD_VAR 0 14
25322: PPUSH
25323: LD_VAR 0 1
25327: PPUSH
25328: CALL_OW 250
25332: PPUSH
25333: LD_VAR 0 1
25337: PPUSH
25338: CALL_OW 251
25342: PPUSH
25343: LD_INT 10
25345: PPUSH
25346: LD_INT 0
25348: PPUSH
25349: CALL_OW 50
// continue ;
25353: GO 25254
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25355: LD_VAR 0 12
25359: PUSH
25360: LD_INT 1
25362: ARRAY
25363: PPUSH
25364: CALL_OW 313
25368: PUSH
25369: LD_VAR 0 12
25373: PUSH
25374: LD_INT 1
25376: ARRAY
25377: PPUSH
25378: CALL_OW 266
25382: PUSH
25383: LD_INT 32
25385: PUSH
25386: LD_INT 31
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: IN
25393: AND
25394: PUSH
25395: LD_VAR 0 12
25399: PUSH
25400: LD_INT 1
25402: ARRAY
25403: PPUSH
25404: CALL_OW 313
25408: PUSH
25409: LD_INT 6
25411: EQUAL
25412: OR
25413: IFFALSE 25433
// f := Delete ( f , 1 ) ;
25415: LD_ADDR_VAR 0 12
25419: PUSH
25420: LD_VAR 0 12
25424: PPUSH
25425: LD_INT 1
25427: PPUSH
25428: CALL_OW 3
25432: ST_TO_ADDR
// if not f then
25433: LD_VAR 0 12
25437: NOT
25438: IFFALSE 25456
// begin x := x + 2 ;
25440: LD_ADDR_VAR 0 13
25444: PUSH
25445: LD_VAR 0 13
25449: PUSH
25450: LD_INT 2
25452: PLUS
25453: ST_TO_ADDR
// continue ;
25454: GO 25254
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25456: LD_VAR 0 12
25460: PUSH
25461: LD_INT 1
25463: ARRAY
25464: PPUSH
25465: CALL_OW 266
25469: PUSH
25470: LD_INT 5
25472: EQUAL
25473: IFFALSE 25547
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25475: LD_VAR 0 12
25479: PUSH
25480: LD_INT 1
25482: ARRAY
25483: PPUSH
25484: CALL_OW 313
25488: PUSH
25489: LD_INT 3
25491: LESS
25492: IFFALSE 25528
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25494: LD_INT 0
25496: PPUSH
25497: LD_INT 5
25499: PUSH
25500: LD_INT 8
25502: PUSH
25503: LD_INT 9
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: LIST
25510: PUSH
25511: LD_VAR 0 17
25515: ARRAY
25516: PPUSH
25517: LD_VAR 0 4
25521: PPUSH
25522: CALL_OW 380
25526: GO 25545
// PrepareHuman ( false , i , skill ) ;
25528: LD_INT 0
25530: PPUSH
25531: LD_VAR 0 8
25535: PPUSH
25536: LD_VAR 0 4
25540: PPUSH
25541: CALL_OW 380
// end else
25545: GO 25564
// PrepareHuman ( false , i , skill ) ;
25547: LD_INT 0
25549: PPUSH
25550: LD_VAR 0 8
25554: PPUSH
25555: LD_VAR 0 4
25559: PPUSH
25560: CALL_OW 380
// un := CreateHuman ;
25564: LD_ADDR_VAR 0 14
25568: PUSH
25569: CALL_OW 44
25573: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25574: LD_ADDR_VAR 0 7
25578: PUSH
25579: LD_VAR 0 7
25583: PPUSH
25584: LD_INT 1
25586: PPUSH
25587: LD_VAR 0 14
25591: PPUSH
25592: CALL_OW 2
25596: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25597: LD_VAR 0 14
25601: PPUSH
25602: LD_VAR 0 12
25606: PUSH
25607: LD_INT 1
25609: ARRAY
25610: PPUSH
25611: CALL_OW 52
// end ;
25615: GO 25254
25617: POP
25618: POP
// end ;
25619: GO 24556
25621: POP
25622: POP
// result := result ^ buildings ;
25623: LD_ADDR_VAR 0 7
25627: PUSH
25628: LD_VAR 0 7
25632: PUSH
25633: LD_VAR 0 18
25637: ADD
25638: ST_TO_ADDR
// end else
25639: GO 25782
// begin for i = 1 to personel do
25641: LD_ADDR_VAR 0 8
25645: PUSH
25646: DOUBLE
25647: LD_INT 1
25649: DEC
25650: ST_TO_ADDR
25651: LD_VAR 0 6
25655: PUSH
25656: FOR_TO
25657: IFFALSE 25780
// begin if i > 4 then
25659: LD_VAR 0 8
25663: PUSH
25664: LD_INT 4
25666: GREATER
25667: IFFALSE 25671
// break ;
25669: GO 25780
// x := personel [ i ] ;
25671: LD_ADDR_VAR 0 13
25675: PUSH
25676: LD_VAR 0 6
25680: PUSH
25681: LD_VAR 0 8
25685: ARRAY
25686: ST_TO_ADDR
// if x = - 1 then
25687: LD_VAR 0 13
25691: PUSH
25692: LD_INT 1
25694: NEG
25695: EQUAL
25696: IFFALSE 25700
// continue ;
25698: GO 25656
// PrepareHuman ( false , i , skill ) ;
25700: LD_INT 0
25702: PPUSH
25703: LD_VAR 0 8
25707: PPUSH
25708: LD_VAR 0 4
25712: PPUSH
25713: CALL_OW 380
// un := CreateHuman ;
25717: LD_ADDR_VAR 0 14
25721: PUSH
25722: CALL_OW 44
25726: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25727: LD_VAR 0 14
25731: PPUSH
25732: LD_VAR 0 1
25736: PPUSH
25737: CALL_OW 250
25741: PPUSH
25742: LD_VAR 0 1
25746: PPUSH
25747: CALL_OW 251
25751: PPUSH
25752: LD_INT 10
25754: PPUSH
25755: LD_INT 0
25757: PPUSH
25758: CALL_OW 50
// result := result ^ un ;
25762: LD_ADDR_VAR 0 7
25766: PUSH
25767: LD_VAR 0 7
25771: PUSH
25772: LD_VAR 0 14
25776: ADD
25777: ST_TO_ADDR
// end ;
25778: GO 25656
25780: POP
25781: POP
// end ; end ;
25782: LD_VAR 0 7
25786: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25787: LD_INT 0
25789: PPUSH
25790: PPUSH
25791: PPUSH
25792: PPUSH
25793: PPUSH
25794: PPUSH
25795: PPUSH
25796: PPUSH
25797: PPUSH
25798: PPUSH
25799: PPUSH
25800: PPUSH
25801: PPUSH
25802: PPUSH
25803: PPUSH
25804: PPUSH
// result := false ;
25805: LD_ADDR_VAR 0 3
25809: PUSH
25810: LD_INT 0
25812: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25813: LD_VAR 0 1
25817: NOT
25818: PUSH
25819: LD_VAR 0 1
25823: PPUSH
25824: CALL_OW 266
25828: PUSH
25829: LD_INT 32
25831: PUSH
25832: LD_INT 33
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: IN
25839: NOT
25840: OR
25841: IFFALSE 25845
// exit ;
25843: GO 26954
// nat := GetNation ( tower ) ;
25845: LD_ADDR_VAR 0 12
25849: PUSH
25850: LD_VAR 0 1
25854: PPUSH
25855: CALL_OW 248
25859: ST_TO_ADDR
// side := GetSide ( tower ) ;
25860: LD_ADDR_VAR 0 16
25864: PUSH
25865: LD_VAR 0 1
25869: PPUSH
25870: CALL_OW 255
25874: ST_TO_ADDR
// x := GetX ( tower ) ;
25875: LD_ADDR_VAR 0 10
25879: PUSH
25880: LD_VAR 0 1
25884: PPUSH
25885: CALL_OW 250
25889: ST_TO_ADDR
// y := GetY ( tower ) ;
25890: LD_ADDR_VAR 0 11
25894: PUSH
25895: LD_VAR 0 1
25899: PPUSH
25900: CALL_OW 251
25904: ST_TO_ADDR
// if not x or not y then
25905: LD_VAR 0 10
25909: NOT
25910: PUSH
25911: LD_VAR 0 11
25915: NOT
25916: OR
25917: IFFALSE 25921
// exit ;
25919: GO 26954
// weapon := 0 ;
25921: LD_ADDR_VAR 0 18
25925: PUSH
25926: LD_INT 0
25928: ST_TO_ADDR
// fac_list := [ ] ;
25929: LD_ADDR_VAR 0 17
25933: PUSH
25934: EMPTY
25935: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
25936: LD_ADDR_VAR 0 6
25940: PUSH
25941: LD_VAR 0 1
25945: PPUSH
25946: CALL_OW 274
25950: PPUSH
25951: LD_VAR 0 2
25955: PPUSH
25956: LD_INT 0
25958: PPUSH
25959: CALL 23525 0 3
25963: PPUSH
25964: LD_INT 30
25966: PUSH
25967: LD_INT 3
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PPUSH
25974: CALL_OW 72
25978: ST_TO_ADDR
// if not factories then
25979: LD_VAR 0 6
25983: NOT
25984: IFFALSE 25988
// exit ;
25986: GO 26954
// for i in factories do
25988: LD_ADDR_VAR 0 8
25992: PUSH
25993: LD_VAR 0 6
25997: PUSH
25998: FOR_IN
25999: IFFALSE 26024
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26001: LD_ADDR_VAR 0 17
26005: PUSH
26006: LD_VAR 0 17
26010: PUSH
26011: LD_VAR 0 8
26015: PPUSH
26016: CALL_OW 478
26020: UNION
26021: ST_TO_ADDR
26022: GO 25998
26024: POP
26025: POP
// if not fac_list then
26026: LD_VAR 0 17
26030: NOT
26031: IFFALSE 26035
// exit ;
26033: GO 26954
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26035: LD_ADDR_VAR 0 5
26039: PUSH
26040: LD_INT 4
26042: PUSH
26043: LD_INT 5
26045: PUSH
26046: LD_INT 9
26048: PUSH
26049: LD_INT 10
26051: PUSH
26052: LD_INT 6
26054: PUSH
26055: LD_INT 7
26057: PUSH
26058: LD_INT 11
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 27
26072: PUSH
26073: LD_INT 28
26075: PUSH
26076: LD_INT 26
26078: PUSH
26079: LD_INT 30
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 43
26090: PUSH
26091: LD_INT 44
26093: PUSH
26094: LD_INT 46
26096: PUSH
26097: LD_INT 45
26099: PUSH
26100: LD_INT 47
26102: PUSH
26103: LD_INT 49
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: LIST
26118: PUSH
26119: LD_VAR 0 12
26123: ARRAY
26124: ST_TO_ADDR
// list := list isect fac_list ;
26125: LD_ADDR_VAR 0 5
26129: PUSH
26130: LD_VAR 0 5
26134: PUSH
26135: LD_VAR 0 17
26139: ISECT
26140: ST_TO_ADDR
// if not list then
26141: LD_VAR 0 5
26145: NOT
26146: IFFALSE 26150
// exit ;
26148: GO 26954
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26150: LD_VAR 0 12
26154: PUSH
26155: LD_INT 3
26157: EQUAL
26158: PUSH
26159: LD_INT 49
26161: PUSH
26162: LD_VAR 0 5
26166: IN
26167: AND
26168: PUSH
26169: LD_INT 31
26171: PPUSH
26172: LD_VAR 0 16
26176: PPUSH
26177: CALL_OW 321
26181: PUSH
26182: LD_INT 2
26184: EQUAL
26185: AND
26186: IFFALSE 26246
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26188: LD_INT 22
26190: PUSH
26191: LD_VAR 0 16
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 35
26202: PUSH
26203: LD_INT 49
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 91
26212: PUSH
26213: LD_VAR 0 1
26217: PUSH
26218: LD_INT 10
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: LIST
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: LIST
26230: PPUSH
26231: CALL_OW 69
26235: NOT
26236: IFFALSE 26246
// weapon := ru_time_lapser ;
26238: LD_ADDR_VAR 0 18
26242: PUSH
26243: LD_INT 49
26245: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26246: LD_VAR 0 12
26250: PUSH
26251: LD_INT 1
26253: PUSH
26254: LD_INT 2
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: IN
26261: PUSH
26262: LD_INT 11
26264: PUSH
26265: LD_VAR 0 5
26269: IN
26270: PUSH
26271: LD_INT 30
26273: PUSH
26274: LD_VAR 0 5
26278: IN
26279: OR
26280: AND
26281: PUSH
26282: LD_INT 6
26284: PPUSH
26285: LD_VAR 0 16
26289: PPUSH
26290: CALL_OW 321
26294: PUSH
26295: LD_INT 2
26297: EQUAL
26298: AND
26299: IFFALSE 26464
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26301: LD_INT 22
26303: PUSH
26304: LD_VAR 0 16
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 2
26315: PUSH
26316: LD_INT 35
26318: PUSH
26319: LD_INT 11
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: PUSH
26326: LD_INT 35
26328: PUSH
26329: LD_INT 30
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 91
26343: PUSH
26344: LD_VAR 0 1
26348: PUSH
26349: LD_INT 18
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: LIST
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: LIST
26361: PPUSH
26362: CALL_OW 69
26366: NOT
26367: PUSH
26368: LD_INT 22
26370: PUSH
26371: LD_VAR 0 16
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 2
26382: PUSH
26383: LD_INT 30
26385: PUSH
26386: LD_INT 32
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 30
26395: PUSH
26396: LD_INT 33
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: LIST
26407: PUSH
26408: LD_INT 91
26410: PUSH
26411: LD_VAR 0 1
26415: PUSH
26416: LD_INT 12
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: LIST
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: LIST
26428: PUSH
26429: EMPTY
26430: LIST
26431: PPUSH
26432: CALL_OW 69
26436: PUSH
26437: LD_INT 2
26439: GREATER
26440: AND
26441: IFFALSE 26464
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26443: LD_ADDR_VAR 0 18
26447: PUSH
26448: LD_INT 11
26450: PUSH
26451: LD_INT 30
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_VAR 0 12
26462: ARRAY
26463: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26464: LD_VAR 0 18
26468: NOT
26469: PUSH
26470: LD_INT 40
26472: PPUSH
26473: LD_VAR 0 16
26477: PPUSH
26478: CALL_OW 321
26482: PUSH
26483: LD_INT 2
26485: EQUAL
26486: AND
26487: PUSH
26488: LD_INT 7
26490: PUSH
26491: LD_VAR 0 5
26495: IN
26496: PUSH
26497: LD_INT 28
26499: PUSH
26500: LD_VAR 0 5
26504: IN
26505: OR
26506: PUSH
26507: LD_INT 45
26509: PUSH
26510: LD_VAR 0 5
26514: IN
26515: OR
26516: AND
26517: IFFALSE 26771
// begin hex := GetHexInfo ( x , y ) ;
26519: LD_ADDR_VAR 0 4
26523: PUSH
26524: LD_VAR 0 10
26528: PPUSH
26529: LD_VAR 0 11
26533: PPUSH
26534: CALL_OW 546
26538: ST_TO_ADDR
// if hex [ 1 ] then
26539: LD_VAR 0 4
26543: PUSH
26544: LD_INT 1
26546: ARRAY
26547: IFFALSE 26551
// exit ;
26549: GO 26954
// height := hex [ 2 ] ;
26551: LD_ADDR_VAR 0 15
26555: PUSH
26556: LD_VAR 0 4
26560: PUSH
26561: LD_INT 2
26563: ARRAY
26564: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26565: LD_ADDR_VAR 0 14
26569: PUSH
26570: LD_INT 0
26572: PUSH
26573: LD_INT 2
26575: PUSH
26576: LD_INT 3
26578: PUSH
26579: LD_INT 5
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: ST_TO_ADDR
// for i in tmp do
26588: LD_ADDR_VAR 0 8
26592: PUSH
26593: LD_VAR 0 14
26597: PUSH
26598: FOR_IN
26599: IFFALSE 26769
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26601: LD_ADDR_VAR 0 9
26605: PUSH
26606: LD_VAR 0 10
26610: PPUSH
26611: LD_VAR 0 8
26615: PPUSH
26616: LD_INT 5
26618: PPUSH
26619: CALL_OW 272
26623: PUSH
26624: LD_VAR 0 11
26628: PPUSH
26629: LD_VAR 0 8
26633: PPUSH
26634: LD_INT 5
26636: PPUSH
26637: CALL_OW 273
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26646: LD_VAR 0 9
26650: PUSH
26651: LD_INT 1
26653: ARRAY
26654: PPUSH
26655: LD_VAR 0 9
26659: PUSH
26660: LD_INT 2
26662: ARRAY
26663: PPUSH
26664: CALL_OW 488
26668: IFFALSE 26767
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26670: LD_ADDR_VAR 0 4
26674: PUSH
26675: LD_VAR 0 9
26679: PUSH
26680: LD_INT 1
26682: ARRAY
26683: PPUSH
26684: LD_VAR 0 9
26688: PUSH
26689: LD_INT 2
26691: ARRAY
26692: PPUSH
26693: CALL_OW 546
26697: ST_TO_ADDR
// if hex [ 1 ] then
26698: LD_VAR 0 4
26702: PUSH
26703: LD_INT 1
26705: ARRAY
26706: IFFALSE 26710
// continue ;
26708: GO 26598
// h := hex [ 2 ] ;
26710: LD_ADDR_VAR 0 13
26714: PUSH
26715: LD_VAR 0 4
26719: PUSH
26720: LD_INT 2
26722: ARRAY
26723: ST_TO_ADDR
// if h + 7 < height then
26724: LD_VAR 0 13
26728: PUSH
26729: LD_INT 7
26731: PLUS
26732: PUSH
26733: LD_VAR 0 15
26737: LESS
26738: IFFALSE 26767
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26740: LD_ADDR_VAR 0 18
26744: PUSH
26745: LD_INT 7
26747: PUSH
26748: LD_INT 28
26750: PUSH
26751: LD_INT 45
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: LIST
26758: PUSH
26759: LD_VAR 0 12
26763: ARRAY
26764: ST_TO_ADDR
// break ;
26765: GO 26769
// end ; end ; end ;
26767: GO 26598
26769: POP
26770: POP
// end ; if not weapon then
26771: LD_VAR 0 18
26775: NOT
26776: IFFALSE 26836
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26778: LD_ADDR_VAR 0 5
26782: PUSH
26783: LD_VAR 0 5
26787: PUSH
26788: LD_INT 11
26790: PUSH
26791: LD_INT 30
26793: PUSH
26794: LD_INT 49
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: LIST
26801: DIFF
26802: ST_TO_ADDR
// if not list then
26803: LD_VAR 0 5
26807: NOT
26808: IFFALSE 26812
// exit ;
26810: GO 26954
// weapon := list [ rand ( 1 , list ) ] ;
26812: LD_ADDR_VAR 0 18
26816: PUSH
26817: LD_VAR 0 5
26821: PUSH
26822: LD_INT 1
26824: PPUSH
26825: LD_VAR 0 5
26829: PPUSH
26830: CALL_OW 12
26834: ARRAY
26835: ST_TO_ADDR
// end ; if weapon then
26836: LD_VAR 0 18
26840: IFFALSE 26954
// begin tmp := CostOfWeapon ( weapon ) ;
26842: LD_ADDR_VAR 0 14
26846: PUSH
26847: LD_VAR 0 18
26851: PPUSH
26852: CALL_OW 451
26856: ST_TO_ADDR
// j := GetBase ( tower ) ;
26857: LD_ADDR_VAR 0 9
26861: PUSH
26862: LD_VAR 0 1
26866: PPUSH
26867: CALL_OW 274
26871: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26872: LD_VAR 0 9
26876: PPUSH
26877: LD_INT 1
26879: PPUSH
26880: CALL_OW 275
26884: PUSH
26885: LD_VAR 0 14
26889: PUSH
26890: LD_INT 1
26892: ARRAY
26893: GREATEREQUAL
26894: PUSH
26895: LD_VAR 0 9
26899: PPUSH
26900: LD_INT 2
26902: PPUSH
26903: CALL_OW 275
26907: PUSH
26908: LD_VAR 0 14
26912: PUSH
26913: LD_INT 2
26915: ARRAY
26916: GREATEREQUAL
26917: AND
26918: PUSH
26919: LD_VAR 0 9
26923: PPUSH
26924: LD_INT 3
26926: PPUSH
26927: CALL_OW 275
26931: PUSH
26932: LD_VAR 0 14
26936: PUSH
26937: LD_INT 3
26939: ARRAY
26940: GREATEREQUAL
26941: AND
26942: IFFALSE 26954
// result := weapon ;
26944: LD_ADDR_VAR 0 3
26948: PUSH
26949: LD_VAR 0 18
26953: ST_TO_ADDR
// end ; end ;
26954: LD_VAR 0 3
26958: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
26959: LD_INT 0
26961: PPUSH
26962: PPUSH
// result := true ;
26963: LD_ADDR_VAR 0 3
26967: PUSH
26968: LD_INT 1
26970: ST_TO_ADDR
// if array1 = array2 then
26971: LD_VAR 0 1
26975: PUSH
26976: LD_VAR 0 2
26980: EQUAL
26981: IFFALSE 27041
// begin for i = 1 to array1 do
26983: LD_ADDR_VAR 0 4
26987: PUSH
26988: DOUBLE
26989: LD_INT 1
26991: DEC
26992: ST_TO_ADDR
26993: LD_VAR 0 1
26997: PUSH
26998: FOR_TO
26999: IFFALSE 27037
// if array1 [ i ] <> array2 [ i ] then
27001: LD_VAR 0 1
27005: PUSH
27006: LD_VAR 0 4
27010: ARRAY
27011: PUSH
27012: LD_VAR 0 2
27016: PUSH
27017: LD_VAR 0 4
27021: ARRAY
27022: NONEQUAL
27023: IFFALSE 27035
// begin result := false ;
27025: LD_ADDR_VAR 0 3
27029: PUSH
27030: LD_INT 0
27032: ST_TO_ADDR
// break ;
27033: GO 27037
// end ;
27035: GO 26998
27037: POP
27038: POP
// end else
27039: GO 27049
// result := false ;
27041: LD_ADDR_VAR 0 3
27045: PUSH
27046: LD_INT 0
27048: ST_TO_ADDR
// end ;
27049: LD_VAR 0 3
27053: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27054: LD_INT 0
27056: PPUSH
27057: PPUSH
// if not array1 or not array2 then
27058: LD_VAR 0 1
27062: NOT
27063: PUSH
27064: LD_VAR 0 2
27068: NOT
27069: OR
27070: IFFALSE 27074
// exit ;
27072: GO 27138
// result := true ;
27074: LD_ADDR_VAR 0 3
27078: PUSH
27079: LD_INT 1
27081: ST_TO_ADDR
// for i = 1 to array1 do
27082: LD_ADDR_VAR 0 4
27086: PUSH
27087: DOUBLE
27088: LD_INT 1
27090: DEC
27091: ST_TO_ADDR
27092: LD_VAR 0 1
27096: PUSH
27097: FOR_TO
27098: IFFALSE 27136
// if array1 [ i ] <> array2 [ i ] then
27100: LD_VAR 0 1
27104: PUSH
27105: LD_VAR 0 4
27109: ARRAY
27110: PUSH
27111: LD_VAR 0 2
27115: PUSH
27116: LD_VAR 0 4
27120: ARRAY
27121: NONEQUAL
27122: IFFALSE 27134
// begin result := false ;
27124: LD_ADDR_VAR 0 3
27128: PUSH
27129: LD_INT 0
27131: ST_TO_ADDR
// break ;
27132: GO 27136
// end ;
27134: GO 27097
27136: POP
27137: POP
// end ;
27138: LD_VAR 0 3
27142: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27143: LD_INT 0
27145: PPUSH
27146: PPUSH
27147: PPUSH
// pom := GetBase ( fac ) ;
27148: LD_ADDR_VAR 0 5
27152: PUSH
27153: LD_VAR 0 1
27157: PPUSH
27158: CALL_OW 274
27162: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27163: LD_ADDR_VAR 0 4
27167: PUSH
27168: LD_VAR 0 2
27172: PUSH
27173: LD_INT 1
27175: ARRAY
27176: PPUSH
27177: LD_VAR 0 2
27181: PUSH
27182: LD_INT 2
27184: ARRAY
27185: PPUSH
27186: LD_VAR 0 2
27190: PUSH
27191: LD_INT 3
27193: ARRAY
27194: PPUSH
27195: LD_VAR 0 2
27199: PUSH
27200: LD_INT 4
27202: ARRAY
27203: PPUSH
27204: CALL_OW 449
27208: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27209: LD_ADDR_VAR 0 3
27213: PUSH
27214: LD_VAR 0 5
27218: PPUSH
27219: LD_INT 1
27221: PPUSH
27222: CALL_OW 275
27226: PUSH
27227: LD_VAR 0 4
27231: PUSH
27232: LD_INT 1
27234: ARRAY
27235: GREATEREQUAL
27236: PUSH
27237: LD_VAR 0 5
27241: PPUSH
27242: LD_INT 2
27244: PPUSH
27245: CALL_OW 275
27249: PUSH
27250: LD_VAR 0 4
27254: PUSH
27255: LD_INT 2
27257: ARRAY
27258: GREATEREQUAL
27259: AND
27260: PUSH
27261: LD_VAR 0 5
27265: PPUSH
27266: LD_INT 3
27268: PPUSH
27269: CALL_OW 275
27273: PUSH
27274: LD_VAR 0 4
27278: PUSH
27279: LD_INT 3
27281: ARRAY
27282: GREATEREQUAL
27283: AND
27284: ST_TO_ADDR
// end ;
27285: LD_VAR 0 3
27289: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27290: LD_INT 0
27292: PPUSH
27293: PPUSH
27294: PPUSH
27295: PPUSH
// pom := GetBase ( building ) ;
27296: LD_ADDR_VAR 0 3
27300: PUSH
27301: LD_VAR 0 1
27305: PPUSH
27306: CALL_OW 274
27310: ST_TO_ADDR
// if not pom then
27311: LD_VAR 0 3
27315: NOT
27316: IFFALSE 27320
// exit ;
27318: GO 27490
// btype := GetBType ( building ) ;
27320: LD_ADDR_VAR 0 5
27324: PUSH
27325: LD_VAR 0 1
27329: PPUSH
27330: CALL_OW 266
27334: ST_TO_ADDR
// if btype = b_armoury then
27335: LD_VAR 0 5
27339: PUSH
27340: LD_INT 4
27342: EQUAL
27343: IFFALSE 27353
// btype := b_barracks ;
27345: LD_ADDR_VAR 0 5
27349: PUSH
27350: LD_INT 5
27352: ST_TO_ADDR
// if btype = b_depot then
27353: LD_VAR 0 5
27357: PUSH
27358: LD_INT 0
27360: EQUAL
27361: IFFALSE 27371
// btype := b_warehouse ;
27363: LD_ADDR_VAR 0 5
27367: PUSH
27368: LD_INT 1
27370: ST_TO_ADDR
// if btype = b_workshop then
27371: LD_VAR 0 5
27375: PUSH
27376: LD_INT 2
27378: EQUAL
27379: IFFALSE 27389
// btype := b_factory ;
27381: LD_ADDR_VAR 0 5
27385: PUSH
27386: LD_INT 3
27388: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27389: LD_ADDR_VAR 0 4
27393: PUSH
27394: LD_VAR 0 5
27398: PPUSH
27399: LD_VAR 0 1
27403: PPUSH
27404: CALL_OW 248
27408: PPUSH
27409: CALL_OW 450
27413: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27414: LD_ADDR_VAR 0 2
27418: PUSH
27419: LD_VAR 0 3
27423: PPUSH
27424: LD_INT 1
27426: PPUSH
27427: CALL_OW 275
27431: PUSH
27432: LD_VAR 0 4
27436: PUSH
27437: LD_INT 1
27439: ARRAY
27440: GREATEREQUAL
27441: PUSH
27442: LD_VAR 0 3
27446: PPUSH
27447: LD_INT 2
27449: PPUSH
27450: CALL_OW 275
27454: PUSH
27455: LD_VAR 0 4
27459: PUSH
27460: LD_INT 2
27462: ARRAY
27463: GREATEREQUAL
27464: AND
27465: PUSH
27466: LD_VAR 0 3
27470: PPUSH
27471: LD_INT 3
27473: PPUSH
27474: CALL_OW 275
27478: PUSH
27479: LD_VAR 0 4
27483: PUSH
27484: LD_INT 3
27486: ARRAY
27487: GREATEREQUAL
27488: AND
27489: ST_TO_ADDR
// end ;
27490: LD_VAR 0 2
27494: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27495: LD_INT 0
27497: PPUSH
27498: PPUSH
27499: PPUSH
// pom := GetBase ( building ) ;
27500: LD_ADDR_VAR 0 4
27504: PUSH
27505: LD_VAR 0 1
27509: PPUSH
27510: CALL_OW 274
27514: ST_TO_ADDR
// if not pom then
27515: LD_VAR 0 4
27519: NOT
27520: IFFALSE 27524
// exit ;
27522: GO 27625
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27524: LD_ADDR_VAR 0 5
27528: PUSH
27529: LD_VAR 0 2
27533: PPUSH
27534: LD_VAR 0 1
27538: PPUSH
27539: CALL_OW 248
27543: PPUSH
27544: CALL_OW 450
27548: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27549: LD_ADDR_VAR 0 3
27553: PUSH
27554: LD_VAR 0 4
27558: PPUSH
27559: LD_INT 1
27561: PPUSH
27562: CALL_OW 275
27566: PUSH
27567: LD_VAR 0 5
27571: PUSH
27572: LD_INT 1
27574: ARRAY
27575: GREATEREQUAL
27576: PUSH
27577: LD_VAR 0 4
27581: PPUSH
27582: LD_INT 2
27584: PPUSH
27585: CALL_OW 275
27589: PUSH
27590: LD_VAR 0 5
27594: PUSH
27595: LD_INT 2
27597: ARRAY
27598: GREATEREQUAL
27599: AND
27600: PUSH
27601: LD_VAR 0 4
27605: PPUSH
27606: LD_INT 3
27608: PPUSH
27609: CALL_OW 275
27613: PUSH
27614: LD_VAR 0 5
27618: PUSH
27619: LD_INT 3
27621: ARRAY
27622: GREATEREQUAL
27623: AND
27624: ST_TO_ADDR
// end ;
27625: LD_VAR 0 3
27629: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27630: LD_INT 0
27632: PPUSH
27633: PPUSH
27634: PPUSH
27635: PPUSH
27636: PPUSH
27637: PPUSH
27638: PPUSH
27639: PPUSH
27640: PPUSH
27641: PPUSH
27642: PPUSH
// result := false ;
27643: LD_ADDR_VAR 0 8
27647: PUSH
27648: LD_INT 0
27650: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27651: LD_VAR 0 5
27655: NOT
27656: PUSH
27657: LD_VAR 0 1
27661: NOT
27662: OR
27663: PUSH
27664: LD_VAR 0 2
27668: NOT
27669: OR
27670: PUSH
27671: LD_VAR 0 3
27675: NOT
27676: OR
27677: IFFALSE 27681
// exit ;
27679: GO 28495
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27681: LD_ADDR_VAR 0 14
27685: PUSH
27686: LD_VAR 0 1
27690: PPUSH
27691: LD_VAR 0 2
27695: PPUSH
27696: LD_VAR 0 3
27700: PPUSH
27701: LD_VAR 0 4
27705: PPUSH
27706: LD_VAR 0 5
27710: PUSH
27711: LD_INT 1
27713: ARRAY
27714: PPUSH
27715: CALL_OW 248
27719: PPUSH
27720: LD_INT 0
27722: PPUSH
27723: CALL 29728 0 6
27727: ST_TO_ADDR
// if not hexes then
27728: LD_VAR 0 14
27732: NOT
27733: IFFALSE 27737
// exit ;
27735: GO 28495
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27737: LD_ADDR_VAR 0 17
27741: PUSH
27742: LD_VAR 0 5
27746: PPUSH
27747: LD_INT 22
27749: PUSH
27750: LD_VAR 0 13
27754: PPUSH
27755: CALL_OW 255
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 2
27766: PUSH
27767: LD_INT 30
27769: PUSH
27770: LD_INT 0
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 30
27779: PUSH
27780: LD_INT 1
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: LIST
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PPUSH
27796: CALL_OW 72
27800: ST_TO_ADDR
// for i = 1 to hexes do
27801: LD_ADDR_VAR 0 9
27805: PUSH
27806: DOUBLE
27807: LD_INT 1
27809: DEC
27810: ST_TO_ADDR
27811: LD_VAR 0 14
27815: PUSH
27816: FOR_TO
27817: IFFALSE 28493
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27819: LD_ADDR_VAR 0 13
27823: PUSH
27824: LD_VAR 0 14
27828: PUSH
27829: LD_VAR 0 9
27833: ARRAY
27834: PUSH
27835: LD_INT 1
27837: ARRAY
27838: PPUSH
27839: LD_VAR 0 14
27843: PUSH
27844: LD_VAR 0 9
27848: ARRAY
27849: PUSH
27850: LD_INT 2
27852: ARRAY
27853: PPUSH
27854: CALL_OW 428
27858: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27859: LD_VAR 0 14
27863: PUSH
27864: LD_VAR 0 9
27868: ARRAY
27869: PUSH
27870: LD_INT 1
27872: ARRAY
27873: PPUSH
27874: LD_VAR 0 14
27878: PUSH
27879: LD_VAR 0 9
27883: ARRAY
27884: PUSH
27885: LD_INT 2
27887: ARRAY
27888: PPUSH
27889: CALL_OW 351
27893: PUSH
27894: LD_VAR 0 14
27898: PUSH
27899: LD_VAR 0 9
27903: ARRAY
27904: PUSH
27905: LD_INT 1
27907: ARRAY
27908: PPUSH
27909: LD_VAR 0 14
27913: PUSH
27914: LD_VAR 0 9
27918: ARRAY
27919: PUSH
27920: LD_INT 2
27922: ARRAY
27923: PPUSH
27924: CALL_OW 488
27928: NOT
27929: OR
27930: PUSH
27931: LD_VAR 0 13
27935: PPUSH
27936: CALL_OW 247
27940: PUSH
27941: LD_INT 3
27943: EQUAL
27944: OR
27945: IFFALSE 27951
// exit ;
27947: POP
27948: POP
27949: GO 28495
// if not tmp then
27951: LD_VAR 0 13
27955: NOT
27956: IFFALSE 27960
// continue ;
27958: GO 27816
// result := true ;
27960: LD_ADDR_VAR 0 8
27964: PUSH
27965: LD_INT 1
27967: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
27968: LD_VAR 0 6
27972: PUSH
27973: LD_VAR 0 13
27977: PPUSH
27978: CALL_OW 247
27982: PUSH
27983: LD_INT 2
27985: EQUAL
27986: AND
27987: PUSH
27988: LD_VAR 0 13
27992: PPUSH
27993: CALL_OW 263
27997: PUSH
27998: LD_INT 1
28000: EQUAL
28001: AND
28002: IFFALSE 28166
// begin if IsDrivenBy ( tmp ) then
28004: LD_VAR 0 13
28008: PPUSH
28009: CALL_OW 311
28013: IFFALSE 28017
// continue ;
28015: GO 27816
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28017: LD_VAR 0 6
28021: PPUSH
28022: LD_INT 3
28024: PUSH
28025: LD_INT 60
28027: PUSH
28028: EMPTY
28029: LIST
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: LD_INT 3
28037: PUSH
28038: LD_INT 55
28040: PUSH
28041: EMPTY
28042: LIST
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PPUSH
28052: CALL_OW 72
28056: IFFALSE 28164
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28058: LD_ADDR_VAR 0 18
28062: PUSH
28063: LD_VAR 0 6
28067: PPUSH
28068: LD_INT 3
28070: PUSH
28071: LD_INT 60
28073: PUSH
28074: EMPTY
28075: LIST
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 3
28083: PUSH
28084: LD_INT 55
28086: PUSH
28087: EMPTY
28088: LIST
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: PPUSH
28098: CALL_OW 72
28102: PUSH
28103: LD_INT 1
28105: ARRAY
28106: ST_TO_ADDR
// if IsInUnit ( driver ) then
28107: LD_VAR 0 18
28111: PPUSH
28112: CALL_OW 310
28116: IFFALSE 28127
// ComExit ( driver ) ;
28118: LD_VAR 0 18
28122: PPUSH
28123: CALL 53508 0 1
// AddComEnterUnit ( driver , tmp ) ;
28127: LD_VAR 0 18
28131: PPUSH
28132: LD_VAR 0 13
28136: PPUSH
28137: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28141: LD_VAR 0 18
28145: PPUSH
28146: LD_VAR 0 7
28150: PPUSH
28151: CALL_OW 173
// AddComExitVehicle ( driver ) ;
28155: LD_VAR 0 18
28159: PPUSH
28160: CALL_OW 181
// end ; continue ;
28164: GO 27816
// end ; if not cleaners or not tmp in cleaners then
28166: LD_VAR 0 6
28170: NOT
28171: PUSH
28172: LD_VAR 0 13
28176: PUSH
28177: LD_VAR 0 6
28181: IN
28182: NOT
28183: OR
28184: IFFALSE 28491
// begin if dep then
28186: LD_VAR 0 17
28190: IFFALSE 28326
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28192: LD_ADDR_VAR 0 16
28196: PUSH
28197: LD_VAR 0 17
28201: PUSH
28202: LD_INT 1
28204: ARRAY
28205: PPUSH
28206: CALL_OW 250
28210: PPUSH
28211: LD_VAR 0 17
28215: PUSH
28216: LD_INT 1
28218: ARRAY
28219: PPUSH
28220: CALL_OW 254
28224: PPUSH
28225: LD_INT 5
28227: PPUSH
28228: CALL_OW 272
28232: PUSH
28233: LD_VAR 0 17
28237: PUSH
28238: LD_INT 1
28240: ARRAY
28241: PPUSH
28242: CALL_OW 251
28246: PPUSH
28247: LD_VAR 0 17
28251: PUSH
28252: LD_INT 1
28254: ARRAY
28255: PPUSH
28256: CALL_OW 254
28260: PPUSH
28261: LD_INT 5
28263: PPUSH
28264: CALL_OW 273
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28273: LD_VAR 0 16
28277: PUSH
28278: LD_INT 1
28280: ARRAY
28281: PPUSH
28282: LD_VAR 0 16
28286: PUSH
28287: LD_INT 2
28289: ARRAY
28290: PPUSH
28291: CALL_OW 488
28295: IFFALSE 28326
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28297: LD_VAR 0 13
28301: PPUSH
28302: LD_VAR 0 16
28306: PUSH
28307: LD_INT 1
28309: ARRAY
28310: PPUSH
28311: LD_VAR 0 16
28315: PUSH
28316: LD_INT 2
28318: ARRAY
28319: PPUSH
28320: CALL_OW 111
// continue ;
28324: GO 27816
// end ; end ; r := GetDir ( tmp ) ;
28326: LD_ADDR_VAR 0 15
28330: PUSH
28331: LD_VAR 0 13
28335: PPUSH
28336: CALL_OW 254
28340: ST_TO_ADDR
// if r = 5 then
28341: LD_VAR 0 15
28345: PUSH
28346: LD_INT 5
28348: EQUAL
28349: IFFALSE 28359
// r := 0 ;
28351: LD_ADDR_VAR 0 15
28355: PUSH
28356: LD_INT 0
28358: ST_TO_ADDR
// for j = r to 5 do
28359: LD_ADDR_VAR 0 10
28363: PUSH
28364: DOUBLE
28365: LD_VAR 0 15
28369: DEC
28370: ST_TO_ADDR
28371: LD_INT 5
28373: PUSH
28374: FOR_TO
28375: IFFALSE 28489
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28377: LD_ADDR_VAR 0 11
28381: PUSH
28382: LD_VAR 0 13
28386: PPUSH
28387: CALL_OW 250
28391: PPUSH
28392: LD_VAR 0 10
28396: PPUSH
28397: LD_INT 2
28399: PPUSH
28400: CALL_OW 272
28404: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28405: LD_ADDR_VAR 0 12
28409: PUSH
28410: LD_VAR 0 13
28414: PPUSH
28415: CALL_OW 251
28419: PPUSH
28420: LD_VAR 0 10
28424: PPUSH
28425: LD_INT 2
28427: PPUSH
28428: CALL_OW 273
28432: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28433: LD_VAR 0 11
28437: PPUSH
28438: LD_VAR 0 12
28442: PPUSH
28443: CALL_OW 488
28447: PUSH
28448: LD_VAR 0 11
28452: PPUSH
28453: LD_VAR 0 12
28457: PPUSH
28458: CALL_OW 428
28462: NOT
28463: AND
28464: IFFALSE 28487
// begin ComMoveXY ( tmp , _x , _y ) ;
28466: LD_VAR 0 13
28470: PPUSH
28471: LD_VAR 0 11
28475: PPUSH
28476: LD_VAR 0 12
28480: PPUSH
28481: CALL_OW 111
// break ;
28485: GO 28489
// end ; end ;
28487: GO 28374
28489: POP
28490: POP
// end ; end ;
28491: GO 27816
28493: POP
28494: POP
// end ;
28495: LD_VAR 0 8
28499: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28500: LD_INT 0
28502: PPUSH
// result := true ;
28503: LD_ADDR_VAR 0 3
28507: PUSH
28508: LD_INT 1
28510: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28511: LD_VAR 0 2
28515: PUSH
28516: LD_INT 24
28518: DOUBLE
28519: EQUAL
28520: IFTRUE 28530
28522: LD_INT 33
28524: DOUBLE
28525: EQUAL
28526: IFTRUE 28530
28528: GO 28555
28530: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28531: LD_ADDR_VAR 0 3
28535: PUSH
28536: LD_INT 32
28538: PPUSH
28539: LD_VAR 0 1
28543: PPUSH
28544: CALL_OW 321
28548: PUSH
28549: LD_INT 2
28551: EQUAL
28552: ST_TO_ADDR
28553: GO 28871
28555: LD_INT 20
28557: DOUBLE
28558: EQUAL
28559: IFTRUE 28563
28561: GO 28588
28563: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28564: LD_ADDR_VAR 0 3
28568: PUSH
28569: LD_INT 6
28571: PPUSH
28572: LD_VAR 0 1
28576: PPUSH
28577: CALL_OW 321
28581: PUSH
28582: LD_INT 2
28584: EQUAL
28585: ST_TO_ADDR
28586: GO 28871
28588: LD_INT 22
28590: DOUBLE
28591: EQUAL
28592: IFTRUE 28602
28594: LD_INT 36
28596: DOUBLE
28597: EQUAL
28598: IFTRUE 28602
28600: GO 28627
28602: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28603: LD_ADDR_VAR 0 3
28607: PUSH
28608: LD_INT 15
28610: PPUSH
28611: LD_VAR 0 1
28615: PPUSH
28616: CALL_OW 321
28620: PUSH
28621: LD_INT 2
28623: EQUAL
28624: ST_TO_ADDR
28625: GO 28871
28627: LD_INT 30
28629: DOUBLE
28630: EQUAL
28631: IFTRUE 28635
28633: GO 28660
28635: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28636: LD_ADDR_VAR 0 3
28640: PUSH
28641: LD_INT 20
28643: PPUSH
28644: LD_VAR 0 1
28648: PPUSH
28649: CALL_OW 321
28653: PUSH
28654: LD_INT 2
28656: EQUAL
28657: ST_TO_ADDR
28658: GO 28871
28660: LD_INT 28
28662: DOUBLE
28663: EQUAL
28664: IFTRUE 28674
28666: LD_INT 21
28668: DOUBLE
28669: EQUAL
28670: IFTRUE 28674
28672: GO 28699
28674: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28675: LD_ADDR_VAR 0 3
28679: PUSH
28680: LD_INT 21
28682: PPUSH
28683: LD_VAR 0 1
28687: PPUSH
28688: CALL_OW 321
28692: PUSH
28693: LD_INT 2
28695: EQUAL
28696: ST_TO_ADDR
28697: GO 28871
28699: LD_INT 16
28701: DOUBLE
28702: EQUAL
28703: IFTRUE 28707
28705: GO 28732
28707: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28708: LD_ADDR_VAR 0 3
28712: PUSH
28713: LD_INT 84
28715: PPUSH
28716: LD_VAR 0 1
28720: PPUSH
28721: CALL_OW 321
28725: PUSH
28726: LD_INT 2
28728: EQUAL
28729: ST_TO_ADDR
28730: GO 28871
28732: LD_INT 19
28734: DOUBLE
28735: EQUAL
28736: IFTRUE 28746
28738: LD_INT 23
28740: DOUBLE
28741: EQUAL
28742: IFTRUE 28746
28744: GO 28771
28746: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28747: LD_ADDR_VAR 0 3
28751: PUSH
28752: LD_INT 83
28754: PPUSH
28755: LD_VAR 0 1
28759: PPUSH
28760: CALL_OW 321
28764: PUSH
28765: LD_INT 2
28767: EQUAL
28768: ST_TO_ADDR
28769: GO 28871
28771: LD_INT 17
28773: DOUBLE
28774: EQUAL
28775: IFTRUE 28779
28777: GO 28804
28779: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28780: LD_ADDR_VAR 0 3
28784: PUSH
28785: LD_INT 39
28787: PPUSH
28788: LD_VAR 0 1
28792: PPUSH
28793: CALL_OW 321
28797: PUSH
28798: LD_INT 2
28800: EQUAL
28801: ST_TO_ADDR
28802: GO 28871
28804: LD_INT 18
28806: DOUBLE
28807: EQUAL
28808: IFTRUE 28812
28810: GO 28837
28812: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28813: LD_ADDR_VAR 0 3
28817: PUSH
28818: LD_INT 40
28820: PPUSH
28821: LD_VAR 0 1
28825: PPUSH
28826: CALL_OW 321
28830: PUSH
28831: LD_INT 2
28833: EQUAL
28834: ST_TO_ADDR
28835: GO 28871
28837: LD_INT 27
28839: DOUBLE
28840: EQUAL
28841: IFTRUE 28845
28843: GO 28870
28845: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28846: LD_ADDR_VAR 0 3
28850: PUSH
28851: LD_INT 35
28853: PPUSH
28854: LD_VAR 0 1
28858: PPUSH
28859: CALL_OW 321
28863: PUSH
28864: LD_INT 2
28866: EQUAL
28867: ST_TO_ADDR
28868: GO 28871
28870: POP
// end ;
28871: LD_VAR 0 3
28875: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
28876: LD_INT 0
28878: PPUSH
28879: PPUSH
28880: PPUSH
28881: PPUSH
28882: PPUSH
28883: PPUSH
28884: PPUSH
28885: PPUSH
28886: PPUSH
28887: PPUSH
28888: PPUSH
// result := false ;
28889: LD_ADDR_VAR 0 6
28893: PUSH
28894: LD_INT 0
28896: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28897: LD_VAR 0 1
28901: NOT
28902: PUSH
28903: LD_VAR 0 1
28907: PPUSH
28908: CALL_OW 266
28912: PUSH
28913: LD_INT 0
28915: PUSH
28916: LD_INT 1
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: IN
28923: NOT
28924: OR
28925: PUSH
28926: LD_VAR 0 2
28930: NOT
28931: OR
28932: PUSH
28933: LD_VAR 0 5
28937: PUSH
28938: LD_INT 0
28940: PUSH
28941: LD_INT 1
28943: PUSH
28944: LD_INT 2
28946: PUSH
28947: LD_INT 3
28949: PUSH
28950: LD_INT 4
28952: PUSH
28953: LD_INT 5
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: IN
28964: NOT
28965: OR
28966: PUSH
28967: LD_VAR 0 3
28971: PPUSH
28972: LD_VAR 0 4
28976: PPUSH
28977: CALL_OW 488
28981: NOT
28982: OR
28983: IFFALSE 28987
// exit ;
28985: GO 29723
// side := GetSide ( depot ) ;
28987: LD_ADDR_VAR 0 9
28991: PUSH
28992: LD_VAR 0 1
28996: PPUSH
28997: CALL_OW 255
29001: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29002: LD_VAR 0 9
29006: PPUSH
29007: LD_VAR 0 2
29011: PPUSH
29012: CALL 28500 0 2
29016: NOT
29017: IFFALSE 29021
// exit ;
29019: GO 29723
// pom := GetBase ( depot ) ;
29021: LD_ADDR_VAR 0 10
29025: PUSH
29026: LD_VAR 0 1
29030: PPUSH
29031: CALL_OW 274
29035: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29036: LD_ADDR_VAR 0 11
29040: PUSH
29041: LD_VAR 0 2
29045: PPUSH
29046: LD_VAR 0 1
29050: PPUSH
29051: CALL_OW 248
29055: PPUSH
29056: CALL_OW 450
29060: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29061: LD_VAR 0 10
29065: PPUSH
29066: LD_INT 1
29068: PPUSH
29069: CALL_OW 275
29073: PUSH
29074: LD_VAR 0 11
29078: PUSH
29079: LD_INT 1
29081: ARRAY
29082: GREATEREQUAL
29083: PUSH
29084: LD_VAR 0 10
29088: PPUSH
29089: LD_INT 2
29091: PPUSH
29092: CALL_OW 275
29096: PUSH
29097: LD_VAR 0 11
29101: PUSH
29102: LD_INT 2
29104: ARRAY
29105: GREATEREQUAL
29106: AND
29107: PUSH
29108: LD_VAR 0 10
29112: PPUSH
29113: LD_INT 3
29115: PPUSH
29116: CALL_OW 275
29120: PUSH
29121: LD_VAR 0 11
29125: PUSH
29126: LD_INT 3
29128: ARRAY
29129: GREATEREQUAL
29130: AND
29131: NOT
29132: IFFALSE 29136
// exit ;
29134: GO 29723
// if GetBType ( depot ) = b_depot then
29136: LD_VAR 0 1
29140: PPUSH
29141: CALL_OW 266
29145: PUSH
29146: LD_INT 0
29148: EQUAL
29149: IFFALSE 29161
// dist := 28 else
29151: LD_ADDR_VAR 0 14
29155: PUSH
29156: LD_INT 28
29158: ST_TO_ADDR
29159: GO 29169
// dist := 36 ;
29161: LD_ADDR_VAR 0 14
29165: PUSH
29166: LD_INT 36
29168: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29169: LD_VAR 0 1
29173: PPUSH
29174: LD_VAR 0 3
29178: PPUSH
29179: LD_VAR 0 4
29183: PPUSH
29184: CALL_OW 297
29188: PUSH
29189: LD_VAR 0 14
29193: GREATER
29194: IFFALSE 29198
// exit ;
29196: GO 29723
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
29198: LD_ADDR_VAR 0 12
29202: PUSH
29203: LD_VAR 0 2
29207: PPUSH
29208: LD_VAR 0 3
29212: PPUSH
29213: LD_VAR 0 4
29217: PPUSH
29218: LD_VAR 0 5
29222: PPUSH
29223: LD_VAR 0 1
29227: PPUSH
29228: CALL_OW 248
29232: PPUSH
29233: LD_INT 0
29235: PPUSH
29236: CALL 29728 0 6
29240: ST_TO_ADDR
// if not hexes then
29241: LD_VAR 0 12
29245: NOT
29246: IFFALSE 29250
// exit ;
29248: GO 29723
// hex := GetHexInfo ( x , y ) ;
29250: LD_ADDR_VAR 0 15
29254: PUSH
29255: LD_VAR 0 3
29259: PPUSH
29260: LD_VAR 0 4
29264: PPUSH
29265: CALL_OW 546
29269: ST_TO_ADDR
// if hex [ 1 ] then
29270: LD_VAR 0 15
29274: PUSH
29275: LD_INT 1
29277: ARRAY
29278: IFFALSE 29282
// exit ;
29280: GO 29723
// height := hex [ 2 ] ;
29282: LD_ADDR_VAR 0 13
29286: PUSH
29287: LD_VAR 0 15
29291: PUSH
29292: LD_INT 2
29294: ARRAY
29295: ST_TO_ADDR
// for i = 1 to hexes do
29296: LD_ADDR_VAR 0 7
29300: PUSH
29301: DOUBLE
29302: LD_INT 1
29304: DEC
29305: ST_TO_ADDR
29306: LD_VAR 0 12
29310: PUSH
29311: FOR_TO
29312: IFFALSE 29642
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29314: LD_VAR 0 12
29318: PUSH
29319: LD_VAR 0 7
29323: ARRAY
29324: PUSH
29325: LD_INT 1
29327: ARRAY
29328: PPUSH
29329: LD_VAR 0 12
29333: PUSH
29334: LD_VAR 0 7
29338: ARRAY
29339: PUSH
29340: LD_INT 2
29342: ARRAY
29343: PPUSH
29344: CALL_OW 488
29348: NOT
29349: PUSH
29350: LD_VAR 0 12
29354: PUSH
29355: LD_VAR 0 7
29359: ARRAY
29360: PUSH
29361: LD_INT 1
29363: ARRAY
29364: PPUSH
29365: LD_VAR 0 12
29369: PUSH
29370: LD_VAR 0 7
29374: ARRAY
29375: PUSH
29376: LD_INT 2
29378: ARRAY
29379: PPUSH
29380: CALL_OW 428
29384: PUSH
29385: LD_INT 0
29387: GREATER
29388: OR
29389: PUSH
29390: LD_VAR 0 12
29394: PUSH
29395: LD_VAR 0 7
29399: ARRAY
29400: PUSH
29401: LD_INT 1
29403: ARRAY
29404: PPUSH
29405: LD_VAR 0 12
29409: PUSH
29410: LD_VAR 0 7
29414: ARRAY
29415: PUSH
29416: LD_INT 2
29418: ARRAY
29419: PPUSH
29420: CALL_OW 351
29424: OR
29425: IFFALSE 29431
// exit ;
29427: POP
29428: POP
29429: GO 29723
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29431: LD_ADDR_VAR 0 8
29435: PUSH
29436: LD_VAR 0 12
29440: PUSH
29441: LD_VAR 0 7
29445: ARRAY
29446: PUSH
29447: LD_INT 1
29449: ARRAY
29450: PPUSH
29451: LD_VAR 0 12
29455: PUSH
29456: LD_VAR 0 7
29460: ARRAY
29461: PUSH
29462: LD_INT 2
29464: ARRAY
29465: PPUSH
29466: CALL_OW 546
29470: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29471: LD_VAR 0 8
29475: PUSH
29476: LD_INT 1
29478: ARRAY
29479: PUSH
29480: LD_VAR 0 8
29484: PUSH
29485: LD_INT 2
29487: ARRAY
29488: PUSH
29489: LD_VAR 0 13
29493: PUSH
29494: LD_INT 2
29496: PLUS
29497: GREATER
29498: OR
29499: PUSH
29500: LD_VAR 0 8
29504: PUSH
29505: LD_INT 2
29507: ARRAY
29508: PUSH
29509: LD_VAR 0 13
29513: PUSH
29514: LD_INT 2
29516: MINUS
29517: LESS
29518: OR
29519: PUSH
29520: LD_VAR 0 8
29524: PUSH
29525: LD_INT 3
29527: ARRAY
29528: PUSH
29529: LD_INT 0
29531: PUSH
29532: LD_INT 8
29534: PUSH
29535: LD_INT 9
29537: PUSH
29538: LD_INT 10
29540: PUSH
29541: LD_INT 11
29543: PUSH
29544: LD_INT 12
29546: PUSH
29547: LD_INT 13
29549: PUSH
29550: LD_INT 16
29552: PUSH
29553: LD_INT 17
29555: PUSH
29556: LD_INT 18
29558: PUSH
29559: LD_INT 19
29561: PUSH
29562: LD_INT 20
29564: PUSH
29565: LD_INT 21
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: IN
29583: NOT
29584: OR
29585: PUSH
29586: LD_VAR 0 8
29590: PUSH
29591: LD_INT 5
29593: ARRAY
29594: NOT
29595: OR
29596: PUSH
29597: LD_VAR 0 8
29601: PUSH
29602: LD_INT 6
29604: ARRAY
29605: PUSH
29606: LD_INT 1
29608: PUSH
29609: LD_INT 2
29611: PUSH
29612: LD_INT 7
29614: PUSH
29615: LD_INT 9
29617: PUSH
29618: LD_INT 10
29620: PUSH
29621: LD_INT 11
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: IN
29632: NOT
29633: OR
29634: IFFALSE 29640
// exit ;
29636: POP
29637: POP
29638: GO 29723
// end ;
29640: GO 29311
29642: POP
29643: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29644: LD_VAR 0 9
29648: PPUSH
29649: LD_VAR 0 3
29653: PPUSH
29654: LD_VAR 0 4
29658: PPUSH
29659: LD_INT 20
29661: PPUSH
29662: CALL 21675 0 4
29666: PUSH
29667: LD_INT 4
29669: ARRAY
29670: IFFALSE 29674
// exit ;
29672: GO 29723
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29674: LD_VAR 0 2
29678: PUSH
29679: LD_INT 29
29681: PUSH
29682: LD_INT 30
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: IN
29689: PUSH
29690: LD_VAR 0 3
29694: PPUSH
29695: LD_VAR 0 4
29699: PPUSH
29700: LD_VAR 0 9
29704: PPUSH
29705: CALL_OW 440
29709: NOT
29710: AND
29711: IFFALSE 29715
// exit ;
29713: GO 29723
// result := true ;
29715: LD_ADDR_VAR 0 6
29719: PUSH
29720: LD_INT 1
29722: ST_TO_ADDR
// end ;
29723: LD_VAR 0 6
29727: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29728: LD_INT 0
29730: PPUSH
29731: PPUSH
29732: PPUSH
29733: PPUSH
29734: PPUSH
29735: PPUSH
29736: PPUSH
29737: PPUSH
29738: PPUSH
29739: PPUSH
29740: PPUSH
29741: PPUSH
29742: PPUSH
29743: PPUSH
29744: PPUSH
29745: PPUSH
29746: PPUSH
29747: PPUSH
29748: PPUSH
29749: PPUSH
29750: PPUSH
29751: PPUSH
29752: PPUSH
29753: PPUSH
29754: PPUSH
29755: PPUSH
29756: PPUSH
29757: PPUSH
29758: PPUSH
29759: PPUSH
29760: PPUSH
29761: PPUSH
29762: PPUSH
29763: PPUSH
29764: PPUSH
29765: PPUSH
29766: PPUSH
29767: PPUSH
29768: PPUSH
29769: PPUSH
29770: PPUSH
29771: PPUSH
29772: PPUSH
29773: PPUSH
29774: PPUSH
29775: PPUSH
29776: PPUSH
29777: PPUSH
29778: PPUSH
29779: PPUSH
29780: PPUSH
29781: PPUSH
29782: PPUSH
29783: PPUSH
29784: PPUSH
29785: PPUSH
29786: PPUSH
29787: PPUSH
// result = [ ] ;
29788: LD_ADDR_VAR 0 7
29792: PUSH
29793: EMPTY
29794: ST_TO_ADDR
// temp_list = [ ] ;
29795: LD_ADDR_VAR 0 9
29799: PUSH
29800: EMPTY
29801: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29802: LD_VAR 0 4
29806: PUSH
29807: LD_INT 0
29809: PUSH
29810: LD_INT 1
29812: PUSH
29813: LD_INT 2
29815: PUSH
29816: LD_INT 3
29818: PUSH
29819: LD_INT 4
29821: PUSH
29822: LD_INT 5
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: IN
29833: NOT
29834: PUSH
29835: LD_VAR 0 1
29839: PUSH
29840: LD_INT 0
29842: PUSH
29843: LD_INT 1
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: IN
29850: PUSH
29851: LD_VAR 0 5
29855: PUSH
29856: LD_INT 1
29858: PUSH
29859: LD_INT 2
29861: PUSH
29862: LD_INT 3
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: LIST
29869: IN
29870: NOT
29871: AND
29872: OR
29873: IFFALSE 29877
// exit ;
29875: GO 48268
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29877: LD_VAR 0 1
29881: PUSH
29882: LD_INT 6
29884: PUSH
29885: LD_INT 7
29887: PUSH
29888: LD_INT 8
29890: PUSH
29891: LD_INT 13
29893: PUSH
29894: LD_INT 12
29896: PUSH
29897: LD_INT 15
29899: PUSH
29900: LD_INT 11
29902: PUSH
29903: LD_INT 14
29905: PUSH
29906: LD_INT 10
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: IN
29920: IFFALSE 29930
// btype = b_lab ;
29922: LD_ADDR_VAR 0 1
29926: PUSH
29927: LD_INT 6
29929: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
29930: LD_VAR 0 6
29934: PUSH
29935: LD_INT 0
29937: PUSH
29938: LD_INT 1
29940: PUSH
29941: LD_INT 2
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: LIST
29948: IN
29949: NOT
29950: PUSH
29951: LD_VAR 0 1
29955: PUSH
29956: LD_INT 0
29958: PUSH
29959: LD_INT 1
29961: PUSH
29962: LD_INT 2
29964: PUSH
29965: LD_INT 3
29967: PUSH
29968: LD_INT 6
29970: PUSH
29971: LD_INT 36
29973: PUSH
29974: LD_INT 4
29976: PUSH
29977: LD_INT 5
29979: PUSH
29980: LD_INT 31
29982: PUSH
29983: LD_INT 32
29985: PUSH
29986: LD_INT 33
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: IN
30002: NOT
30003: PUSH
30004: LD_VAR 0 6
30008: PUSH
30009: LD_INT 1
30011: EQUAL
30012: AND
30013: OR
30014: PUSH
30015: LD_VAR 0 1
30019: PUSH
30020: LD_INT 2
30022: PUSH
30023: LD_INT 3
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: IN
30030: NOT
30031: PUSH
30032: LD_VAR 0 6
30036: PUSH
30037: LD_INT 2
30039: EQUAL
30040: AND
30041: OR
30042: IFFALSE 30052
// mode = 0 ;
30044: LD_ADDR_VAR 0 6
30048: PUSH
30049: LD_INT 0
30051: ST_TO_ADDR
// case mode of 0 :
30052: LD_VAR 0 6
30056: PUSH
30057: LD_INT 0
30059: DOUBLE
30060: EQUAL
30061: IFTRUE 30065
30063: GO 41518
30065: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30066: LD_ADDR_VAR 0 11
30070: PUSH
30071: LD_INT 0
30073: PUSH
30074: LD_INT 0
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 0
30083: PUSH
30084: LD_INT 1
30086: NEG
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 1
30094: PUSH
30095: LD_INT 0
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 1
30104: PUSH
30105: LD_INT 1
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 0
30114: PUSH
30115: LD_INT 1
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 1
30124: NEG
30125: PUSH
30126: LD_INT 0
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: LD_INT 1
30135: NEG
30136: PUSH
30137: LD_INT 1
30139: NEG
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 1
30147: NEG
30148: PUSH
30149: LD_INT 2
30151: NEG
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 0
30159: PUSH
30160: LD_INT 2
30162: NEG
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 1
30170: PUSH
30171: LD_INT 1
30173: NEG
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 1
30181: PUSH
30182: LD_INT 2
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: LD_INT 0
30191: PUSH
30192: LD_INT 2
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 1
30201: NEG
30202: PUSH
30203: LD_INT 1
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 1
30212: PUSH
30213: LD_INT 3
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 0
30222: PUSH
30223: LD_INT 3
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 1
30232: NEG
30233: PUSH
30234: LD_INT 2
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30259: LD_ADDR_VAR 0 12
30263: PUSH
30264: LD_INT 0
30266: PUSH
30267: LD_INT 0
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 0
30276: PUSH
30277: LD_INT 1
30279: NEG
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 1
30287: PUSH
30288: LD_INT 0
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 1
30297: PUSH
30298: LD_INT 1
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 0
30307: PUSH
30308: LD_INT 1
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 1
30317: NEG
30318: PUSH
30319: LD_INT 0
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 1
30328: NEG
30329: PUSH
30330: LD_INT 1
30332: NEG
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PUSH
30338: LD_INT 1
30340: PUSH
30341: LD_INT 1
30343: NEG
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 2
30351: PUSH
30352: LD_INT 0
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 2
30361: PUSH
30362: LD_INT 1
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 1
30371: NEG
30372: PUSH
30373: LD_INT 1
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 2
30382: NEG
30383: PUSH
30384: LD_INT 0
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 2
30393: NEG
30394: PUSH
30395: LD_INT 1
30397: NEG
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 2
30405: NEG
30406: PUSH
30407: LD_INT 1
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: LD_INT 3
30416: NEG
30417: PUSH
30418: LD_INT 0
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 3
30427: NEG
30428: PUSH
30429: LD_INT 1
30431: NEG
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30455: LD_ADDR_VAR 0 13
30459: PUSH
30460: LD_INT 0
30462: PUSH
30463: LD_INT 0
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 0
30472: PUSH
30473: LD_INT 1
30475: NEG
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 1
30483: PUSH
30484: LD_INT 0
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 1
30493: PUSH
30494: LD_INT 1
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 0
30503: PUSH
30504: LD_INT 1
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 1
30513: NEG
30514: PUSH
30515: LD_INT 0
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: LD_INT 1
30524: NEG
30525: PUSH
30526: LD_INT 1
30528: NEG
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 1
30536: NEG
30537: PUSH
30538: LD_INT 2
30540: NEG
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 2
30548: PUSH
30549: LD_INT 1
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 2
30558: PUSH
30559: LD_INT 2
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 1
30568: PUSH
30569: LD_INT 2
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 2
30578: NEG
30579: PUSH
30580: LD_INT 1
30582: NEG
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 2
30590: NEG
30591: PUSH
30592: LD_INT 2
30594: NEG
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 2
30602: NEG
30603: PUSH
30604: LD_INT 3
30606: NEG
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: LD_INT 3
30614: NEG
30615: PUSH
30616: LD_INT 2
30618: NEG
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 3
30626: NEG
30627: PUSH
30628: LD_INT 3
30630: NEG
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30654: LD_ADDR_VAR 0 14
30658: PUSH
30659: LD_INT 0
30661: PUSH
30662: LD_INT 0
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 0
30671: PUSH
30672: LD_INT 1
30674: NEG
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 1
30682: PUSH
30683: LD_INT 0
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 1
30692: PUSH
30693: LD_INT 1
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: LD_INT 0
30702: PUSH
30703: LD_INT 1
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 1
30712: NEG
30713: PUSH
30714: LD_INT 0
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 1
30723: NEG
30724: PUSH
30725: LD_INT 1
30727: NEG
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 1
30735: NEG
30736: PUSH
30737: LD_INT 2
30739: NEG
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 0
30747: PUSH
30748: LD_INT 2
30750: NEG
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 1
30758: PUSH
30759: LD_INT 1
30761: NEG
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 1
30769: PUSH
30770: LD_INT 2
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 0
30779: PUSH
30780: LD_INT 2
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 1
30789: NEG
30790: PUSH
30791: LD_INT 1
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 1
30800: NEG
30801: PUSH
30802: LD_INT 3
30804: NEG
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 0
30812: PUSH
30813: LD_INT 3
30815: NEG
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 1
30823: PUSH
30824: LD_INT 2
30826: NEG
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30850: LD_ADDR_VAR 0 15
30854: PUSH
30855: LD_INT 0
30857: PUSH
30858: LD_INT 0
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 0
30867: PUSH
30868: LD_INT 1
30870: NEG
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 1
30878: PUSH
30879: LD_INT 0
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: LD_INT 1
30888: PUSH
30889: LD_INT 1
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: LD_INT 0
30898: PUSH
30899: LD_INT 1
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 1
30908: NEG
30909: PUSH
30910: LD_INT 0
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 1
30919: NEG
30920: PUSH
30921: LD_INT 1
30923: NEG
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 1
30931: PUSH
30932: LD_INT 1
30934: NEG
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 2
30942: PUSH
30943: LD_INT 0
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 2
30952: PUSH
30953: LD_INT 1
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 1
30962: NEG
30963: PUSH
30964: LD_INT 1
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 2
30973: NEG
30974: PUSH
30975: LD_INT 0
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 2
30984: NEG
30985: PUSH
30986: LD_INT 1
30988: NEG
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: LD_INT 2
30996: PUSH
30997: LD_INT 1
30999: NEG
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 3
31007: PUSH
31008: LD_INT 0
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 3
31017: PUSH
31018: LD_INT 1
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31043: LD_ADDR_VAR 0 16
31047: PUSH
31048: LD_INT 0
31050: PUSH
31051: LD_INT 0
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 0
31060: PUSH
31061: LD_INT 1
31063: NEG
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 1
31071: PUSH
31072: LD_INT 0
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 1
31081: PUSH
31082: LD_INT 1
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 0
31091: PUSH
31092: LD_INT 1
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 1
31101: NEG
31102: PUSH
31103: LD_INT 0
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 1
31112: NEG
31113: PUSH
31114: LD_INT 1
31116: NEG
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 1
31124: NEG
31125: PUSH
31126: LD_INT 2
31128: NEG
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 2
31136: PUSH
31137: LD_INT 1
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 2
31146: PUSH
31147: LD_INT 2
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 1
31156: PUSH
31157: LD_INT 2
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 2
31166: NEG
31167: PUSH
31168: LD_INT 1
31170: NEG
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 2
31178: NEG
31179: PUSH
31180: LD_INT 2
31182: NEG
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 3
31190: PUSH
31191: LD_INT 2
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 3
31200: PUSH
31201: LD_INT 3
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 2
31210: PUSH
31211: LD_INT 3
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31236: LD_ADDR_VAR 0 17
31240: PUSH
31241: LD_INT 0
31243: PUSH
31244: LD_INT 0
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 0
31253: PUSH
31254: LD_INT 1
31256: NEG
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 1
31264: PUSH
31265: LD_INT 0
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 1
31274: PUSH
31275: LD_INT 1
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 0
31284: PUSH
31285: LD_INT 1
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 1
31294: NEG
31295: PUSH
31296: LD_INT 0
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: LD_INT 1
31305: NEG
31306: PUSH
31307: LD_INT 1
31309: NEG
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 1
31317: NEG
31318: PUSH
31319: LD_INT 2
31321: NEG
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 0
31329: PUSH
31330: LD_INT 2
31332: NEG
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 1
31340: PUSH
31341: LD_INT 1
31343: NEG
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 2
31351: PUSH
31352: LD_INT 0
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 2
31361: PUSH
31362: LD_INT 1
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 2
31371: PUSH
31372: LD_INT 2
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 1
31381: PUSH
31382: LD_INT 2
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 0
31391: PUSH
31392: LD_INT 2
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: LD_INT 1
31401: NEG
31402: PUSH
31403: LD_INT 1
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 2
31412: NEG
31413: PUSH
31414: LD_INT 0
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 2
31423: NEG
31424: PUSH
31425: LD_INT 1
31427: NEG
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: LD_INT 2
31435: NEG
31436: PUSH
31437: LD_INT 2
31439: NEG
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31466: LD_ADDR_VAR 0 18
31470: PUSH
31471: LD_INT 0
31473: PUSH
31474: LD_INT 0
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 0
31483: PUSH
31484: LD_INT 1
31486: NEG
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 1
31494: PUSH
31495: LD_INT 0
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 1
31504: PUSH
31505: LD_INT 1
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 0
31514: PUSH
31515: LD_INT 1
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 1
31524: NEG
31525: PUSH
31526: LD_INT 0
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: LD_INT 1
31535: NEG
31536: PUSH
31537: LD_INT 1
31539: NEG
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 1
31547: NEG
31548: PUSH
31549: LD_INT 2
31551: NEG
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 0
31559: PUSH
31560: LD_INT 2
31562: NEG
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 1
31570: PUSH
31571: LD_INT 1
31573: NEG
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: LD_INT 2
31581: PUSH
31582: LD_INT 0
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: LD_INT 2
31591: PUSH
31592: LD_INT 1
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 2
31601: PUSH
31602: LD_INT 2
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 1
31611: PUSH
31612: LD_INT 2
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 0
31621: PUSH
31622: LD_INT 2
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 1
31631: NEG
31632: PUSH
31633: LD_INT 1
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 2
31642: NEG
31643: PUSH
31644: LD_INT 0
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 2
31653: NEG
31654: PUSH
31655: LD_INT 1
31657: NEG
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 2
31665: NEG
31666: PUSH
31667: LD_INT 2
31669: NEG
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31696: LD_ADDR_VAR 0 19
31700: PUSH
31701: LD_INT 0
31703: PUSH
31704: LD_INT 0
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 0
31713: PUSH
31714: LD_INT 1
31716: NEG
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: PUSH
31722: LD_INT 1
31724: PUSH
31725: LD_INT 0
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 1
31734: PUSH
31735: LD_INT 1
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 0
31744: PUSH
31745: LD_INT 1
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 1
31754: NEG
31755: PUSH
31756: LD_INT 0
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: LD_INT 1
31765: NEG
31766: PUSH
31767: LD_INT 1
31769: NEG
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 1
31777: NEG
31778: PUSH
31779: LD_INT 2
31781: NEG
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PUSH
31787: LD_INT 0
31789: PUSH
31790: LD_INT 2
31792: NEG
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 1
31800: PUSH
31801: LD_INT 1
31803: NEG
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 2
31811: PUSH
31812: LD_INT 0
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 2
31821: PUSH
31822: LD_INT 1
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 2
31831: PUSH
31832: LD_INT 2
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 1
31841: PUSH
31842: LD_INT 2
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 0
31851: PUSH
31852: LD_INT 2
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 1
31861: NEG
31862: PUSH
31863: LD_INT 1
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 2
31872: NEG
31873: PUSH
31874: LD_INT 0
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 2
31883: NEG
31884: PUSH
31885: LD_INT 1
31887: NEG
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 2
31895: NEG
31896: PUSH
31897: LD_INT 2
31899: NEG
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31926: LD_ADDR_VAR 0 20
31930: PUSH
31931: LD_INT 0
31933: PUSH
31934: LD_INT 0
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 0
31943: PUSH
31944: LD_INT 1
31946: NEG
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 1
31954: PUSH
31955: LD_INT 0
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 1
31964: PUSH
31965: LD_INT 1
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 0
31974: PUSH
31975: LD_INT 1
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 1
31984: NEG
31985: PUSH
31986: LD_INT 0
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 1
31995: NEG
31996: PUSH
31997: LD_INT 1
31999: NEG
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 1
32007: NEG
32008: PUSH
32009: LD_INT 2
32011: NEG
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 0
32019: PUSH
32020: LD_INT 2
32022: NEG
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 1
32030: PUSH
32031: LD_INT 1
32033: NEG
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 2
32041: PUSH
32042: LD_INT 0
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 2
32051: PUSH
32052: LD_INT 1
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PUSH
32059: LD_INT 2
32061: PUSH
32062: LD_INT 2
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 1
32071: PUSH
32072: LD_INT 2
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 0
32081: PUSH
32082: LD_INT 2
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 1
32091: NEG
32092: PUSH
32093: LD_INT 1
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: LD_INT 2
32102: NEG
32103: PUSH
32104: LD_INT 0
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 2
32113: NEG
32114: PUSH
32115: LD_INT 1
32117: NEG
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 2
32125: NEG
32126: PUSH
32127: LD_INT 2
32129: NEG
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32156: LD_ADDR_VAR 0 21
32160: PUSH
32161: LD_INT 0
32163: PUSH
32164: LD_INT 0
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 0
32173: PUSH
32174: LD_INT 1
32176: NEG
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: PUSH
32182: LD_INT 1
32184: PUSH
32185: LD_INT 0
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: LD_INT 1
32194: PUSH
32195: LD_INT 1
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 0
32204: PUSH
32205: LD_INT 1
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 1
32214: NEG
32215: PUSH
32216: LD_INT 0
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 1
32225: NEG
32226: PUSH
32227: LD_INT 1
32229: NEG
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 1
32237: NEG
32238: PUSH
32239: LD_INT 2
32241: NEG
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 0
32249: PUSH
32250: LD_INT 2
32252: NEG
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 1
32260: PUSH
32261: LD_INT 1
32263: NEG
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 2
32271: PUSH
32272: LD_INT 0
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 2
32281: PUSH
32282: LD_INT 1
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 2
32291: PUSH
32292: LD_INT 2
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 1
32301: PUSH
32302: LD_INT 2
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 0
32311: PUSH
32312: LD_INT 2
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 1
32321: NEG
32322: PUSH
32323: LD_INT 1
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 2
32332: NEG
32333: PUSH
32334: LD_INT 0
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 2
32343: NEG
32344: PUSH
32345: LD_INT 1
32347: NEG
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 2
32355: NEG
32356: PUSH
32357: LD_INT 2
32359: NEG
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32386: LD_ADDR_VAR 0 22
32390: PUSH
32391: LD_INT 0
32393: PUSH
32394: LD_INT 0
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 0
32403: PUSH
32404: LD_INT 1
32406: NEG
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 1
32414: PUSH
32415: LD_INT 0
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 1
32424: PUSH
32425: LD_INT 1
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: LD_INT 0
32434: PUSH
32435: LD_INT 1
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 1
32444: NEG
32445: PUSH
32446: LD_INT 0
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 1
32455: NEG
32456: PUSH
32457: LD_INT 1
32459: NEG
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 1
32467: NEG
32468: PUSH
32469: LD_INT 2
32471: NEG
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 0
32479: PUSH
32480: LD_INT 2
32482: NEG
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 1
32490: PUSH
32491: LD_INT 1
32493: NEG
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 2
32501: PUSH
32502: LD_INT 0
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 2
32511: PUSH
32512: LD_INT 1
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 2
32521: PUSH
32522: LD_INT 2
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 1
32531: PUSH
32532: LD_INT 2
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 0
32541: PUSH
32542: LD_INT 2
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 1
32551: NEG
32552: PUSH
32553: LD_INT 1
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 2
32562: NEG
32563: PUSH
32564: LD_INT 0
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 2
32573: NEG
32574: PUSH
32575: LD_INT 1
32577: NEG
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 2
32585: NEG
32586: PUSH
32587: LD_INT 2
32589: NEG
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32616: LD_ADDR_VAR 0 23
32620: PUSH
32621: LD_INT 0
32623: PUSH
32624: LD_INT 0
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 0
32633: PUSH
32634: LD_INT 1
32636: NEG
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 1
32644: PUSH
32645: LD_INT 0
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 1
32654: PUSH
32655: LD_INT 1
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 0
32664: PUSH
32665: LD_INT 1
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 1
32674: NEG
32675: PUSH
32676: LD_INT 0
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 1
32685: NEG
32686: PUSH
32687: LD_INT 1
32689: NEG
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 1
32697: NEG
32698: PUSH
32699: LD_INT 2
32701: NEG
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 0
32709: PUSH
32710: LD_INT 2
32712: NEG
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 1
32720: PUSH
32721: LD_INT 1
32723: NEG
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 2
32731: PUSH
32732: LD_INT 0
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 2
32741: PUSH
32742: LD_INT 1
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 2
32751: PUSH
32752: LD_INT 2
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 1
32761: PUSH
32762: LD_INT 2
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 0
32771: PUSH
32772: LD_INT 2
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 1
32781: NEG
32782: PUSH
32783: LD_INT 1
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 2
32792: NEG
32793: PUSH
32794: LD_INT 0
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 2
32803: NEG
32804: PUSH
32805: LD_INT 1
32807: NEG
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 2
32815: NEG
32816: PUSH
32817: LD_INT 2
32819: NEG
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 2
32827: NEG
32828: PUSH
32829: LD_INT 3
32831: NEG
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 1
32839: NEG
32840: PUSH
32841: LD_INT 3
32843: NEG
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 1
32851: PUSH
32852: LD_INT 2
32854: NEG
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 2
32862: PUSH
32863: LD_INT 1
32865: NEG
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32896: LD_ADDR_VAR 0 24
32900: PUSH
32901: LD_INT 0
32903: PUSH
32904: LD_INT 0
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 0
32913: PUSH
32914: LD_INT 1
32916: NEG
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 1
32924: PUSH
32925: LD_INT 0
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 1
32934: PUSH
32935: LD_INT 1
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 0
32944: PUSH
32945: LD_INT 1
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 1
32954: NEG
32955: PUSH
32956: LD_INT 0
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: LD_INT 1
32965: NEG
32966: PUSH
32967: LD_INT 1
32969: NEG
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 1
32977: NEG
32978: PUSH
32979: LD_INT 2
32981: NEG
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 0
32989: PUSH
32990: LD_INT 2
32992: NEG
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: LD_INT 1
33000: PUSH
33001: LD_INT 1
33003: NEG
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 2
33011: PUSH
33012: LD_INT 0
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 2
33021: PUSH
33022: LD_INT 1
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 2
33031: PUSH
33032: LD_INT 2
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 1
33041: PUSH
33042: LD_INT 2
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 0
33051: PUSH
33052: LD_INT 2
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 1
33061: NEG
33062: PUSH
33063: LD_INT 1
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 2
33072: NEG
33073: PUSH
33074: LD_INT 0
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 2
33083: NEG
33084: PUSH
33085: LD_INT 1
33087: NEG
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 2
33095: NEG
33096: PUSH
33097: LD_INT 2
33099: NEG
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 1
33107: PUSH
33108: LD_INT 2
33110: NEG
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 2
33118: PUSH
33119: LD_INT 1
33121: NEG
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 3
33129: PUSH
33130: LD_INT 1
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 3
33139: PUSH
33140: LD_INT 2
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33172: LD_ADDR_VAR 0 25
33176: PUSH
33177: LD_INT 0
33179: PUSH
33180: LD_INT 0
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 0
33189: PUSH
33190: LD_INT 1
33192: NEG
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 1
33200: PUSH
33201: LD_INT 0
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 1
33210: PUSH
33211: LD_INT 1
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: LD_INT 0
33220: PUSH
33221: LD_INT 1
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 1
33230: NEG
33231: PUSH
33232: LD_INT 0
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 1
33241: NEG
33242: PUSH
33243: LD_INT 1
33245: NEG
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 1
33253: NEG
33254: PUSH
33255: LD_INT 2
33257: NEG
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 0
33265: PUSH
33266: LD_INT 2
33268: NEG
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 1
33276: PUSH
33277: LD_INT 1
33279: NEG
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 2
33287: PUSH
33288: LD_INT 0
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 2
33297: PUSH
33298: LD_INT 1
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 2
33307: PUSH
33308: LD_INT 2
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 1
33317: PUSH
33318: LD_INT 2
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 0
33327: PUSH
33328: LD_INT 2
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 1
33337: NEG
33338: PUSH
33339: LD_INT 1
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 2
33348: NEG
33349: PUSH
33350: LD_INT 0
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 2
33359: NEG
33360: PUSH
33361: LD_INT 1
33363: NEG
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 2
33371: NEG
33372: PUSH
33373: LD_INT 2
33375: NEG
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 3
33383: PUSH
33384: LD_INT 1
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 3
33393: PUSH
33394: LD_INT 2
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 2
33403: PUSH
33404: LD_INT 3
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 1
33413: PUSH
33414: LD_INT 3
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33446: LD_ADDR_VAR 0 26
33450: PUSH
33451: LD_INT 0
33453: PUSH
33454: LD_INT 0
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 0
33463: PUSH
33464: LD_INT 1
33466: NEG
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 1
33474: PUSH
33475: LD_INT 0
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 1
33484: PUSH
33485: LD_INT 1
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 0
33494: PUSH
33495: LD_INT 1
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 1
33504: NEG
33505: PUSH
33506: LD_INT 0
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 1
33515: NEG
33516: PUSH
33517: LD_INT 1
33519: NEG
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 1
33527: NEG
33528: PUSH
33529: LD_INT 2
33531: NEG
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 0
33539: PUSH
33540: LD_INT 2
33542: NEG
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 1
33550: PUSH
33551: LD_INT 1
33553: NEG
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 2
33561: PUSH
33562: LD_INT 0
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 2
33571: PUSH
33572: LD_INT 1
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 2
33581: PUSH
33582: LD_INT 2
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 1
33591: PUSH
33592: LD_INT 2
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 0
33601: PUSH
33602: LD_INT 2
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 1
33611: NEG
33612: PUSH
33613: LD_INT 1
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 2
33622: NEG
33623: PUSH
33624: LD_INT 0
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 2
33633: NEG
33634: PUSH
33635: LD_INT 1
33637: NEG
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 2
33645: NEG
33646: PUSH
33647: LD_INT 2
33649: NEG
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 2
33657: PUSH
33658: LD_INT 3
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 1
33667: PUSH
33668: LD_INT 3
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 1
33677: NEG
33678: PUSH
33679: LD_INT 2
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: LD_INT 2
33688: NEG
33689: PUSH
33690: LD_INT 1
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33722: LD_ADDR_VAR 0 27
33726: PUSH
33727: LD_INT 0
33729: PUSH
33730: LD_INT 0
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: LD_INT 0
33739: PUSH
33740: LD_INT 1
33742: NEG
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 1
33750: PUSH
33751: LD_INT 0
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 1
33760: PUSH
33761: LD_INT 1
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 0
33770: PUSH
33771: LD_INT 1
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 1
33780: NEG
33781: PUSH
33782: LD_INT 0
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 1
33791: NEG
33792: PUSH
33793: LD_INT 1
33795: NEG
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 1
33803: NEG
33804: PUSH
33805: LD_INT 2
33807: NEG
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: LD_INT 0
33815: PUSH
33816: LD_INT 2
33818: NEG
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 1
33826: PUSH
33827: LD_INT 1
33829: NEG
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 2
33837: PUSH
33838: LD_INT 0
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 2
33847: PUSH
33848: LD_INT 1
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 2
33857: PUSH
33858: LD_INT 2
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 1
33867: PUSH
33868: LD_INT 2
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 0
33877: PUSH
33878: LD_INT 2
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 1
33887: NEG
33888: PUSH
33889: LD_INT 1
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 2
33898: NEG
33899: PUSH
33900: LD_INT 0
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 2
33909: NEG
33910: PUSH
33911: LD_INT 1
33913: NEG
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 2
33921: NEG
33922: PUSH
33923: LD_INT 2
33925: NEG
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 1
33933: NEG
33934: PUSH
33935: LD_INT 2
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 2
33944: NEG
33945: PUSH
33946: LD_INT 1
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 3
33955: NEG
33956: PUSH
33957: LD_INT 1
33959: NEG
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 3
33967: NEG
33968: PUSH
33969: LD_INT 2
33971: NEG
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34002: LD_ADDR_VAR 0 28
34006: PUSH
34007: LD_INT 0
34009: PUSH
34010: LD_INT 0
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 0
34019: PUSH
34020: LD_INT 1
34022: NEG
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 1
34030: PUSH
34031: LD_INT 0
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 1
34040: PUSH
34041: LD_INT 1
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 0
34050: PUSH
34051: LD_INT 1
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 1
34060: NEG
34061: PUSH
34062: LD_INT 0
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PUSH
34069: LD_INT 1
34071: NEG
34072: PUSH
34073: LD_INT 1
34075: NEG
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 1
34083: NEG
34084: PUSH
34085: LD_INT 2
34087: NEG
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 0
34095: PUSH
34096: LD_INT 2
34098: NEG
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 1
34106: PUSH
34107: LD_INT 1
34109: NEG
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 2
34117: PUSH
34118: LD_INT 0
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 2
34127: PUSH
34128: LD_INT 1
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 2
34137: PUSH
34138: LD_INT 2
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 1
34147: PUSH
34148: LD_INT 2
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 0
34157: PUSH
34158: LD_INT 2
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 1
34167: NEG
34168: PUSH
34169: LD_INT 1
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 2
34178: NEG
34179: PUSH
34180: LD_INT 0
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 2
34189: NEG
34190: PUSH
34191: LD_INT 1
34193: NEG
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 2
34201: NEG
34202: PUSH
34203: LD_INT 2
34205: NEG
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 2
34213: NEG
34214: PUSH
34215: LD_INT 3
34217: NEG
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 1
34225: NEG
34226: PUSH
34227: LD_INT 3
34229: NEG
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 3
34237: NEG
34238: PUSH
34239: LD_INT 1
34241: NEG
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 3
34249: NEG
34250: PUSH
34251: LD_INT 2
34253: NEG
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34284: LD_ADDR_VAR 0 29
34288: PUSH
34289: LD_INT 0
34291: PUSH
34292: LD_INT 0
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 0
34301: PUSH
34302: LD_INT 1
34304: NEG
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 1
34312: PUSH
34313: LD_INT 0
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 1
34322: PUSH
34323: LD_INT 1
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 0
34332: PUSH
34333: LD_INT 1
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 1
34342: NEG
34343: PUSH
34344: LD_INT 0
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: LD_INT 1
34353: NEG
34354: PUSH
34355: LD_INT 1
34357: NEG
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 1
34365: NEG
34366: PUSH
34367: LD_INT 2
34369: NEG
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 0
34377: PUSH
34378: LD_INT 2
34380: NEG
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 1
34388: PUSH
34389: LD_INT 1
34391: NEG
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 2
34399: PUSH
34400: LD_INT 0
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 2
34409: PUSH
34410: LD_INT 1
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 1
34419: PUSH
34420: LD_INT 2
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: LD_INT 0
34429: PUSH
34430: LD_INT 2
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 1
34439: NEG
34440: PUSH
34441: LD_INT 1
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: LD_INT 2
34450: NEG
34451: PUSH
34452: LD_INT 1
34454: NEG
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 2
34462: NEG
34463: PUSH
34464: LD_INT 2
34466: NEG
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_INT 2
34474: NEG
34475: PUSH
34476: LD_INT 3
34478: NEG
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 2
34486: PUSH
34487: LD_INT 1
34489: NEG
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 3
34497: PUSH
34498: LD_INT 1
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 1
34507: PUSH
34508: LD_INT 3
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_INT 1
34517: NEG
34518: PUSH
34519: LD_INT 2
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 3
34528: NEG
34529: PUSH
34530: LD_INT 2
34532: NEG
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34563: LD_ADDR_VAR 0 30
34567: PUSH
34568: LD_INT 0
34570: PUSH
34571: LD_INT 0
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 0
34580: PUSH
34581: LD_INT 1
34583: NEG
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: LD_INT 1
34591: PUSH
34592: LD_INT 0
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 1
34601: PUSH
34602: LD_INT 1
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 0
34611: PUSH
34612: LD_INT 1
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 1
34621: NEG
34622: PUSH
34623: LD_INT 0
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 1
34632: NEG
34633: PUSH
34634: LD_INT 1
34636: NEG
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 1
34644: NEG
34645: PUSH
34646: LD_INT 2
34648: NEG
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 0
34656: PUSH
34657: LD_INT 2
34659: NEG
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 1
34667: PUSH
34668: LD_INT 1
34670: NEG
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 2
34678: PUSH
34679: LD_INT 0
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 2
34688: PUSH
34689: LD_INT 1
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: LD_INT 2
34698: PUSH
34699: LD_INT 2
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 1
34708: PUSH
34709: LD_INT 2
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 1
34718: NEG
34719: PUSH
34720: LD_INT 1
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 2
34729: NEG
34730: PUSH
34731: LD_INT 0
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 2
34740: NEG
34741: PUSH
34742: LD_INT 1
34744: NEG
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 1
34752: NEG
34753: PUSH
34754: LD_INT 3
34756: NEG
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 1
34764: PUSH
34765: LD_INT 2
34767: NEG
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 3
34775: PUSH
34776: LD_INT 2
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 2
34785: PUSH
34786: LD_INT 3
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: LD_INT 2
34795: NEG
34796: PUSH
34797: LD_INT 1
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: LD_INT 3
34806: NEG
34807: PUSH
34808: LD_INT 1
34810: NEG
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34841: LD_ADDR_VAR 0 31
34845: PUSH
34846: LD_INT 0
34848: PUSH
34849: LD_INT 0
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 0
34858: PUSH
34859: LD_INT 1
34861: NEG
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 1
34869: PUSH
34870: LD_INT 0
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 1
34879: PUSH
34880: LD_INT 1
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 0
34889: PUSH
34890: LD_INT 1
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 1
34899: NEG
34900: PUSH
34901: LD_INT 0
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 1
34910: NEG
34911: PUSH
34912: LD_INT 1
34914: NEG
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 1
34922: NEG
34923: PUSH
34924: LD_INT 2
34926: NEG
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 1
34934: PUSH
34935: LD_INT 1
34937: NEG
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 2
34945: PUSH
34946: LD_INT 0
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 2
34955: PUSH
34956: LD_INT 1
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 2
34965: PUSH
34966: LD_INT 2
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 1
34975: PUSH
34976: LD_INT 2
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 0
34985: PUSH
34986: LD_INT 2
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 1
34995: NEG
34996: PUSH
34997: LD_INT 1
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 2
35006: NEG
35007: PUSH
35008: LD_INT 1
35010: NEG
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 2
35018: NEG
35019: PUSH
35020: LD_INT 2
35022: NEG
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 2
35030: NEG
35031: PUSH
35032: LD_INT 3
35034: NEG
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 2
35042: PUSH
35043: LD_INT 1
35045: NEG
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 3
35053: PUSH
35054: LD_INT 1
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 1
35063: PUSH
35064: LD_INT 3
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 1
35073: NEG
35074: PUSH
35075: LD_INT 2
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 3
35084: NEG
35085: PUSH
35086: LD_INT 2
35088: NEG
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35119: LD_ADDR_VAR 0 32
35123: PUSH
35124: LD_INT 0
35126: PUSH
35127: LD_INT 0
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 0
35136: PUSH
35137: LD_INT 1
35139: NEG
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 1
35147: PUSH
35148: LD_INT 0
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 1
35157: PUSH
35158: LD_INT 1
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 0
35167: PUSH
35168: LD_INT 1
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 1
35177: NEG
35178: PUSH
35179: LD_INT 0
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 1
35188: NEG
35189: PUSH
35190: LD_INT 1
35192: NEG
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 1
35200: NEG
35201: PUSH
35202: LD_INT 2
35204: NEG
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 0
35212: PUSH
35213: LD_INT 2
35215: NEG
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 1
35223: PUSH
35224: LD_INT 1
35226: NEG
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 2
35234: PUSH
35235: LD_INT 1
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 2
35244: PUSH
35245: LD_INT 2
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 1
35254: PUSH
35255: LD_INT 2
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 0
35264: PUSH
35265: LD_INT 2
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 1
35274: NEG
35275: PUSH
35276: LD_INT 1
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 2
35285: NEG
35286: PUSH
35287: LD_INT 0
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: PUSH
35294: LD_INT 2
35296: NEG
35297: PUSH
35298: LD_INT 1
35300: NEG
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 1
35308: NEG
35309: PUSH
35310: LD_INT 3
35312: NEG
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 1
35320: PUSH
35321: LD_INT 2
35323: NEG
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 3
35331: PUSH
35332: LD_INT 2
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 2
35341: PUSH
35342: LD_INT 3
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 2
35351: NEG
35352: PUSH
35353: LD_INT 1
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 3
35362: NEG
35363: PUSH
35364: LD_INT 1
35366: NEG
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35397: LD_ADDR_VAR 0 33
35401: PUSH
35402: LD_INT 0
35404: PUSH
35405: LD_INT 0
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 0
35414: PUSH
35415: LD_INT 1
35417: NEG
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 1
35425: PUSH
35426: LD_INT 0
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 1
35435: PUSH
35436: LD_INT 1
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 0
35445: PUSH
35446: LD_INT 1
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 1
35455: NEG
35456: PUSH
35457: LD_INT 0
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 1
35466: NEG
35467: PUSH
35468: LD_INT 1
35470: NEG
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 1
35478: NEG
35479: PUSH
35480: LD_INT 2
35482: NEG
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 1
35490: PUSH
35491: LD_INT 1
35493: NEG
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 2
35501: PUSH
35502: LD_INT 0
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 2
35511: PUSH
35512: LD_INT 1
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 1
35521: PUSH
35522: LD_INT 2
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 0
35531: PUSH
35532: LD_INT 2
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 1
35541: NEG
35542: PUSH
35543: LD_INT 1
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 2
35552: NEG
35553: PUSH
35554: LD_INT 0
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 2
35563: NEG
35564: PUSH
35565: LD_INT 1
35567: NEG
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 2
35575: NEG
35576: PUSH
35577: LD_INT 2
35579: NEG
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 2
35587: NEG
35588: PUSH
35589: LD_INT 3
35591: NEG
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 2
35599: PUSH
35600: LD_INT 1
35602: NEG
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 3
35610: PUSH
35611: LD_INT 1
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 1
35620: PUSH
35621: LD_INT 3
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: PUSH
35628: LD_INT 1
35630: NEG
35631: PUSH
35632: LD_INT 2
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 3
35641: NEG
35642: PUSH
35643: LD_INT 2
35645: NEG
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35676: LD_ADDR_VAR 0 34
35680: PUSH
35681: LD_INT 0
35683: PUSH
35684: LD_INT 0
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 0
35693: PUSH
35694: LD_INT 1
35696: NEG
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 1
35704: PUSH
35705: LD_INT 0
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 1
35714: PUSH
35715: LD_INT 1
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 0
35724: PUSH
35725: LD_INT 1
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 1
35734: NEG
35735: PUSH
35736: LD_INT 0
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 1
35745: NEG
35746: PUSH
35747: LD_INT 1
35749: NEG
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 1
35757: NEG
35758: PUSH
35759: LD_INT 2
35761: NEG
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 0
35769: PUSH
35770: LD_INT 2
35772: NEG
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 1
35780: PUSH
35781: LD_INT 1
35783: NEG
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 2
35791: PUSH
35792: LD_INT 1
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 2
35801: PUSH
35802: LD_INT 2
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 1
35811: PUSH
35812: LD_INT 2
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 1
35821: NEG
35822: PUSH
35823: LD_INT 1
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 2
35832: NEG
35833: PUSH
35834: LD_INT 0
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 2
35843: NEG
35844: PUSH
35845: LD_INT 1
35847: NEG
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 2
35855: NEG
35856: PUSH
35857: LD_INT 2
35859: NEG
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 1
35867: NEG
35868: PUSH
35869: LD_INT 3
35871: NEG
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 1
35879: PUSH
35880: LD_INT 2
35882: NEG
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 3
35890: PUSH
35891: LD_INT 2
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 2
35900: PUSH
35901: LD_INT 3
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 2
35910: NEG
35911: PUSH
35912: LD_INT 1
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 3
35921: NEG
35922: PUSH
35923: LD_INT 1
35925: NEG
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35956: LD_ADDR_VAR 0 35
35960: PUSH
35961: LD_INT 0
35963: PUSH
35964: LD_INT 0
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 0
35973: PUSH
35974: LD_INT 1
35976: NEG
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 1
35984: PUSH
35985: LD_INT 0
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 1
35994: PUSH
35995: LD_INT 1
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 0
36004: PUSH
36005: LD_INT 1
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 1
36014: NEG
36015: PUSH
36016: LD_INT 0
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 1
36025: NEG
36026: PUSH
36027: LD_INT 1
36029: NEG
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 2
36037: PUSH
36038: LD_INT 1
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 2
36047: NEG
36048: PUSH
36049: LD_INT 1
36051: NEG
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36068: LD_ADDR_VAR 0 36
36072: PUSH
36073: LD_INT 0
36075: PUSH
36076: LD_INT 0
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 0
36085: PUSH
36086: LD_INT 1
36088: NEG
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 1
36096: PUSH
36097: LD_INT 0
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PUSH
36104: LD_INT 1
36106: PUSH
36107: LD_INT 1
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: LD_INT 0
36116: PUSH
36117: LD_INT 1
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: LD_INT 1
36126: NEG
36127: PUSH
36128: LD_INT 0
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: LD_INT 1
36137: NEG
36138: PUSH
36139: LD_INT 1
36141: NEG
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: LD_INT 1
36149: NEG
36150: PUSH
36151: LD_INT 2
36153: NEG
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 1
36161: PUSH
36162: LD_INT 2
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36180: LD_ADDR_VAR 0 37
36184: PUSH
36185: LD_INT 0
36187: PUSH
36188: LD_INT 0
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 0
36197: PUSH
36198: LD_INT 1
36200: NEG
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 1
36208: PUSH
36209: LD_INT 0
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 1
36218: PUSH
36219: LD_INT 1
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 0
36228: PUSH
36229: LD_INT 1
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 1
36238: NEG
36239: PUSH
36240: LD_INT 0
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PUSH
36247: LD_INT 1
36249: NEG
36250: PUSH
36251: LD_INT 1
36253: NEG
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: PUSH
36259: LD_INT 1
36261: PUSH
36262: LD_INT 1
36264: NEG
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 1
36272: NEG
36273: PUSH
36274: LD_INT 1
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36292: LD_ADDR_VAR 0 38
36296: PUSH
36297: LD_INT 0
36299: PUSH
36300: LD_INT 0
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: PUSH
36307: LD_INT 0
36309: PUSH
36310: LD_INT 1
36312: NEG
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: LD_INT 1
36320: PUSH
36321: LD_INT 0
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: LD_INT 1
36330: PUSH
36331: LD_INT 1
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 0
36340: PUSH
36341: LD_INT 1
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 1
36350: NEG
36351: PUSH
36352: LD_INT 0
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 1
36361: NEG
36362: PUSH
36363: LD_INT 1
36365: NEG
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: LD_INT 2
36373: PUSH
36374: LD_INT 1
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 2
36383: NEG
36384: PUSH
36385: LD_INT 1
36387: NEG
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36404: LD_ADDR_VAR 0 39
36408: PUSH
36409: LD_INT 0
36411: PUSH
36412: LD_INT 0
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 0
36421: PUSH
36422: LD_INT 1
36424: NEG
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 1
36432: PUSH
36433: LD_INT 0
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 1
36442: PUSH
36443: LD_INT 1
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 0
36452: PUSH
36453: LD_INT 1
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 1
36462: NEG
36463: PUSH
36464: LD_INT 0
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 1
36473: NEG
36474: PUSH
36475: LD_INT 1
36477: NEG
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 1
36485: NEG
36486: PUSH
36487: LD_INT 2
36489: NEG
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 1
36497: PUSH
36498: LD_INT 2
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36516: LD_ADDR_VAR 0 40
36520: PUSH
36521: LD_INT 0
36523: PUSH
36524: LD_INT 0
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 0
36533: PUSH
36534: LD_INT 1
36536: NEG
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 1
36544: PUSH
36545: LD_INT 0
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 1
36554: PUSH
36555: LD_INT 1
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 0
36564: PUSH
36565: LD_INT 1
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 1
36574: NEG
36575: PUSH
36576: LD_INT 0
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 1
36585: NEG
36586: PUSH
36587: LD_INT 1
36589: NEG
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 1
36597: PUSH
36598: LD_INT 1
36600: NEG
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 1
36608: NEG
36609: PUSH
36610: LD_INT 1
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36628: LD_ADDR_VAR 0 41
36632: PUSH
36633: LD_INT 0
36635: PUSH
36636: LD_INT 0
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 0
36645: PUSH
36646: LD_INT 1
36648: NEG
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: LD_INT 1
36656: PUSH
36657: LD_INT 0
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 1
36666: PUSH
36667: LD_INT 1
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 0
36676: PUSH
36677: LD_INT 1
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 1
36686: NEG
36687: PUSH
36688: LD_INT 0
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 1
36697: NEG
36698: PUSH
36699: LD_INT 1
36701: NEG
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 1
36709: NEG
36710: PUSH
36711: LD_INT 2
36713: NEG
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 1
36721: PUSH
36722: LD_INT 1
36724: NEG
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 2
36732: PUSH
36733: LD_INT 0
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 2
36742: PUSH
36743: LD_INT 1
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 2
36752: PUSH
36753: LD_INT 2
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 1
36762: PUSH
36763: LD_INT 2
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 1
36772: NEG
36773: PUSH
36774: LD_INT 1
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 2
36783: NEG
36784: PUSH
36785: LD_INT 0
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 2
36794: NEG
36795: PUSH
36796: LD_INT 1
36798: NEG
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 2
36806: NEG
36807: PUSH
36808: LD_INT 2
36810: NEG
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 2
36818: NEG
36819: PUSH
36820: LD_INT 3
36822: NEG
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 2
36830: PUSH
36831: LD_INT 1
36833: NEG
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 3
36841: PUSH
36842: LD_INT 0
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 3
36851: PUSH
36852: LD_INT 1
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 3
36861: PUSH
36862: LD_INT 2
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 3
36871: PUSH
36872: LD_INT 3
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 2
36881: PUSH
36882: LD_INT 3
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 2
36891: NEG
36892: PUSH
36893: LD_INT 1
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 3
36902: NEG
36903: PUSH
36904: LD_INT 0
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 3
36913: NEG
36914: PUSH
36915: LD_INT 1
36917: NEG
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 3
36925: NEG
36926: PUSH
36927: LD_INT 2
36929: NEG
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 3
36937: NEG
36938: PUSH
36939: LD_INT 3
36941: NEG
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36978: LD_ADDR_VAR 0 42
36982: PUSH
36983: LD_INT 0
36985: PUSH
36986: LD_INT 0
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 0
36995: PUSH
36996: LD_INT 1
36998: NEG
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 1
37006: PUSH
37007: LD_INT 0
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 1
37016: PUSH
37017: LD_INT 1
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 0
37026: PUSH
37027: LD_INT 1
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 1
37036: NEG
37037: PUSH
37038: LD_INT 0
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 1
37047: NEG
37048: PUSH
37049: LD_INT 1
37051: NEG
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 1
37059: NEG
37060: PUSH
37061: LD_INT 2
37063: NEG
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 0
37071: PUSH
37072: LD_INT 2
37074: NEG
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 1
37082: PUSH
37083: LD_INT 1
37085: NEG
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 2
37093: PUSH
37094: LD_INT 1
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 2
37103: PUSH
37104: LD_INT 2
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 1
37113: PUSH
37114: LD_INT 2
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 0
37123: PUSH
37124: LD_INT 2
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 1
37133: NEG
37134: PUSH
37135: LD_INT 1
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 2
37144: NEG
37145: PUSH
37146: LD_INT 1
37148: NEG
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: LD_INT 2
37156: NEG
37157: PUSH
37158: LD_INT 2
37160: NEG
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 2
37168: NEG
37169: PUSH
37170: LD_INT 3
37172: NEG
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 1
37180: NEG
37181: PUSH
37182: LD_INT 3
37184: NEG
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 0
37192: PUSH
37193: LD_INT 3
37195: NEG
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 1
37203: PUSH
37204: LD_INT 2
37206: NEG
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 3
37214: PUSH
37215: LD_INT 2
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 3
37224: PUSH
37225: LD_INT 3
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 2
37234: PUSH
37235: LD_INT 3
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: LD_INT 1
37244: PUSH
37245: LD_INT 3
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 0
37254: PUSH
37255: LD_INT 3
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 1
37264: NEG
37265: PUSH
37266: LD_INT 2
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: LD_INT 3
37275: NEG
37276: PUSH
37277: LD_INT 2
37279: NEG
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 3
37287: NEG
37288: PUSH
37289: LD_INT 3
37291: NEG
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37328: LD_ADDR_VAR 0 43
37332: PUSH
37333: LD_INT 0
37335: PUSH
37336: LD_INT 0
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 0
37345: PUSH
37346: LD_INT 1
37348: NEG
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 1
37356: PUSH
37357: LD_INT 0
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 1
37366: PUSH
37367: LD_INT 1
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 0
37376: PUSH
37377: LD_INT 1
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 1
37386: NEG
37387: PUSH
37388: LD_INT 0
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 1
37397: NEG
37398: PUSH
37399: LD_INT 1
37401: NEG
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 1
37409: NEG
37410: PUSH
37411: LD_INT 2
37413: NEG
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 0
37421: PUSH
37422: LD_INT 2
37424: NEG
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 1
37432: PUSH
37433: LD_INT 1
37435: NEG
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 2
37443: PUSH
37444: LD_INT 0
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 2
37453: PUSH
37454: LD_INT 1
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 1
37463: PUSH
37464: LD_INT 2
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 0
37473: PUSH
37474: LD_INT 2
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 1
37483: NEG
37484: PUSH
37485: LD_INT 1
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 2
37494: NEG
37495: PUSH
37496: LD_INT 0
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 2
37505: NEG
37506: PUSH
37507: LD_INT 1
37509: NEG
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 1
37517: NEG
37518: PUSH
37519: LD_INT 3
37521: NEG
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: LD_INT 0
37529: PUSH
37530: LD_INT 3
37532: NEG
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 1
37540: PUSH
37541: LD_INT 2
37543: NEG
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 2
37551: PUSH
37552: LD_INT 1
37554: NEG
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 3
37562: PUSH
37563: LD_INT 0
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 3
37572: PUSH
37573: LD_INT 1
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 1
37582: PUSH
37583: LD_INT 3
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 0
37592: PUSH
37593: LD_INT 3
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 1
37602: NEG
37603: PUSH
37604: LD_INT 2
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 2
37613: NEG
37614: PUSH
37615: LD_INT 1
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 3
37624: NEG
37625: PUSH
37626: LD_INT 0
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 3
37635: NEG
37636: PUSH
37637: LD_INT 1
37639: NEG
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37676: LD_ADDR_VAR 0 44
37680: PUSH
37681: LD_INT 0
37683: PUSH
37684: LD_INT 0
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 0
37693: PUSH
37694: LD_INT 1
37696: NEG
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 1
37704: PUSH
37705: LD_INT 0
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 1
37714: PUSH
37715: LD_INT 1
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 0
37724: PUSH
37725: LD_INT 1
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 1
37734: NEG
37735: PUSH
37736: LD_INT 0
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 1
37745: NEG
37746: PUSH
37747: LD_INT 1
37749: NEG
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 1
37757: NEG
37758: PUSH
37759: LD_INT 2
37761: NEG
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 1
37769: PUSH
37770: LD_INT 1
37772: NEG
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 2
37780: PUSH
37781: LD_INT 0
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 2
37790: PUSH
37791: LD_INT 1
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 2
37800: PUSH
37801: LD_INT 2
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 1
37810: PUSH
37811: LD_INT 2
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 1
37820: NEG
37821: PUSH
37822: LD_INT 1
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 2
37831: NEG
37832: PUSH
37833: LD_INT 0
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 2
37842: NEG
37843: PUSH
37844: LD_INT 1
37846: NEG
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 2
37854: NEG
37855: PUSH
37856: LD_INT 2
37858: NEG
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 2
37866: NEG
37867: PUSH
37868: LD_INT 3
37870: NEG
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 2
37878: PUSH
37879: LD_INT 1
37881: NEG
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 3
37889: PUSH
37890: LD_INT 0
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 3
37899: PUSH
37900: LD_INT 1
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 3
37909: PUSH
37910: LD_INT 2
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 3
37919: PUSH
37920: LD_INT 3
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 2
37929: PUSH
37930: LD_INT 3
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 2
37939: NEG
37940: PUSH
37941: LD_INT 1
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 3
37950: NEG
37951: PUSH
37952: LD_INT 0
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 3
37961: NEG
37962: PUSH
37963: LD_INT 1
37965: NEG
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 3
37973: NEG
37974: PUSH
37975: LD_INT 2
37977: NEG
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 3
37985: NEG
37986: PUSH
37987: LD_INT 3
37989: NEG
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38026: LD_ADDR_VAR 0 45
38030: PUSH
38031: LD_INT 0
38033: PUSH
38034: LD_INT 0
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 0
38043: PUSH
38044: LD_INT 1
38046: NEG
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 1
38054: PUSH
38055: LD_INT 0
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 1
38064: PUSH
38065: LD_INT 1
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 0
38074: PUSH
38075: LD_INT 1
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 1
38084: NEG
38085: PUSH
38086: LD_INT 0
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 1
38095: NEG
38096: PUSH
38097: LD_INT 1
38099: NEG
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 1
38107: NEG
38108: PUSH
38109: LD_INT 2
38111: NEG
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: LD_INT 0
38119: PUSH
38120: LD_INT 2
38122: NEG
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 1
38130: PUSH
38131: LD_INT 1
38133: NEG
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 2
38141: PUSH
38142: LD_INT 1
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 2
38151: PUSH
38152: LD_INT 2
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 1
38161: PUSH
38162: LD_INT 2
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 0
38171: PUSH
38172: LD_INT 2
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 1
38181: NEG
38182: PUSH
38183: LD_INT 1
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 2
38192: NEG
38193: PUSH
38194: LD_INT 1
38196: NEG
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 2
38204: NEG
38205: PUSH
38206: LD_INT 2
38208: NEG
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 2
38216: NEG
38217: PUSH
38218: LD_INT 3
38220: NEG
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: LD_INT 1
38228: NEG
38229: PUSH
38230: LD_INT 3
38232: NEG
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 0
38240: PUSH
38241: LD_INT 3
38243: NEG
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 1
38251: PUSH
38252: LD_INT 2
38254: NEG
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 3
38262: PUSH
38263: LD_INT 2
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 3
38272: PUSH
38273: LD_INT 3
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 2
38282: PUSH
38283: LD_INT 3
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 1
38292: PUSH
38293: LD_INT 3
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 0
38302: PUSH
38303: LD_INT 3
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 1
38312: NEG
38313: PUSH
38314: LD_INT 2
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 3
38323: NEG
38324: PUSH
38325: LD_INT 2
38327: NEG
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 3
38335: NEG
38336: PUSH
38337: LD_INT 3
38339: NEG
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: LIST
38349: LIST
38350: LIST
38351: LIST
38352: LIST
38353: LIST
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38376: LD_ADDR_VAR 0 46
38380: PUSH
38381: LD_INT 0
38383: PUSH
38384: LD_INT 0
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 0
38393: PUSH
38394: LD_INT 1
38396: NEG
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 1
38404: PUSH
38405: LD_INT 0
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 1
38414: PUSH
38415: LD_INT 1
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 0
38424: PUSH
38425: LD_INT 1
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 1
38434: NEG
38435: PUSH
38436: LD_INT 0
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 1
38445: NEG
38446: PUSH
38447: LD_INT 1
38449: NEG
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 1
38457: NEG
38458: PUSH
38459: LD_INT 2
38461: NEG
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 0
38469: PUSH
38470: LD_INT 2
38472: NEG
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: LD_INT 1
38480: PUSH
38481: LD_INT 1
38483: NEG
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 2
38491: PUSH
38492: LD_INT 0
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 2
38501: PUSH
38502: LD_INT 1
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 1
38511: PUSH
38512: LD_INT 2
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 0
38521: PUSH
38522: LD_INT 2
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 1
38531: NEG
38532: PUSH
38533: LD_INT 1
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: LD_INT 2
38542: NEG
38543: PUSH
38544: LD_INT 0
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 2
38553: NEG
38554: PUSH
38555: LD_INT 1
38557: NEG
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 1
38565: NEG
38566: PUSH
38567: LD_INT 3
38569: NEG
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 0
38577: PUSH
38578: LD_INT 3
38580: NEG
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 1
38588: PUSH
38589: LD_INT 2
38591: NEG
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 2
38599: PUSH
38600: LD_INT 1
38602: NEG
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 3
38610: PUSH
38611: LD_INT 0
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 3
38620: PUSH
38621: LD_INT 1
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 1
38630: PUSH
38631: LD_INT 3
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 0
38640: PUSH
38641: LD_INT 3
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 1
38650: NEG
38651: PUSH
38652: LD_INT 2
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 2
38661: NEG
38662: PUSH
38663: LD_INT 1
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 3
38672: NEG
38673: PUSH
38674: LD_INT 0
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 3
38683: NEG
38684: PUSH
38685: LD_INT 1
38687: NEG
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38724: LD_ADDR_VAR 0 47
38728: PUSH
38729: LD_INT 0
38731: PUSH
38732: LD_INT 0
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 0
38741: PUSH
38742: LD_INT 1
38744: NEG
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 1
38752: PUSH
38753: LD_INT 0
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 1
38762: PUSH
38763: LD_INT 1
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 0
38772: PUSH
38773: LD_INT 1
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 1
38782: NEG
38783: PUSH
38784: LD_INT 0
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 1
38793: NEG
38794: PUSH
38795: LD_INT 1
38797: NEG
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 1
38805: NEG
38806: PUSH
38807: LD_INT 2
38809: NEG
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 0
38817: PUSH
38818: LD_INT 2
38820: NEG
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 1
38828: PUSH
38829: LD_INT 1
38831: NEG
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 2
38839: NEG
38840: PUSH
38841: LD_INT 1
38843: NEG
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 2
38851: NEG
38852: PUSH
38853: LD_INT 2
38855: NEG
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38875: LD_ADDR_VAR 0 48
38879: PUSH
38880: LD_INT 0
38882: PUSH
38883: LD_INT 0
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 0
38892: PUSH
38893: LD_INT 1
38895: NEG
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 1
38903: PUSH
38904: LD_INT 0
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 1
38913: PUSH
38914: LD_INT 1
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 0
38923: PUSH
38924: LD_INT 1
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 1
38933: NEG
38934: PUSH
38935: LD_INT 0
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 1
38944: NEG
38945: PUSH
38946: LD_INT 1
38948: NEG
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 1
38956: NEG
38957: PUSH
38958: LD_INT 2
38960: NEG
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 0
38968: PUSH
38969: LD_INT 2
38971: NEG
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 1
38979: PUSH
38980: LD_INT 1
38982: NEG
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 2
38990: PUSH
38991: LD_INT 0
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 2
39000: PUSH
39001: LD_INT 1
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39022: LD_ADDR_VAR 0 49
39026: PUSH
39027: LD_INT 0
39029: PUSH
39030: LD_INT 0
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 0
39039: PUSH
39040: LD_INT 1
39042: NEG
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 1
39050: PUSH
39051: LD_INT 0
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 1
39060: PUSH
39061: LD_INT 1
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 0
39070: PUSH
39071: LD_INT 1
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 1
39080: NEG
39081: PUSH
39082: LD_INT 0
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 1
39091: NEG
39092: PUSH
39093: LD_INT 1
39095: NEG
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 1
39103: PUSH
39104: LD_INT 1
39106: NEG
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 2
39114: PUSH
39115: LD_INT 0
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 2
39124: PUSH
39125: LD_INT 1
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 2
39134: PUSH
39135: LD_INT 2
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 1
39144: PUSH
39145: LD_INT 2
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39166: LD_ADDR_VAR 0 50
39170: PUSH
39171: LD_INT 0
39173: PUSH
39174: LD_INT 0
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 0
39183: PUSH
39184: LD_INT 1
39186: NEG
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 1
39194: PUSH
39195: LD_INT 0
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 1
39204: PUSH
39205: LD_INT 1
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 0
39214: PUSH
39215: LD_INT 1
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 1
39224: NEG
39225: PUSH
39226: LD_INT 0
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 1
39235: NEG
39236: PUSH
39237: LD_INT 1
39239: NEG
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: LD_INT 2
39247: PUSH
39248: LD_INT 1
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 2
39257: PUSH
39258: LD_INT 2
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: LD_INT 2
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 0
39277: PUSH
39278: LD_INT 2
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 1
39287: NEG
39288: PUSH
39289: LD_INT 1
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39310: LD_ADDR_VAR 0 51
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: LD_INT 0
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 0
39327: PUSH
39328: LD_INT 1
39330: NEG
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 1
39338: PUSH
39339: LD_INT 0
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 1
39348: PUSH
39349: LD_INT 1
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 0
39358: PUSH
39359: LD_INT 1
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 1
39368: NEG
39369: PUSH
39370: LD_INT 0
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 1
39379: NEG
39380: PUSH
39381: LD_INT 1
39383: NEG
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 1
39391: PUSH
39392: LD_INT 2
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 0
39401: PUSH
39402: LD_INT 2
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 1
39411: NEG
39412: PUSH
39413: LD_INT 1
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 2
39422: NEG
39423: PUSH
39424: LD_INT 0
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 2
39433: NEG
39434: PUSH
39435: LD_INT 1
39437: NEG
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39457: LD_ADDR_VAR 0 52
39461: PUSH
39462: LD_INT 0
39464: PUSH
39465: LD_INT 0
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 0
39474: PUSH
39475: LD_INT 1
39477: NEG
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 1
39485: PUSH
39486: LD_INT 0
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 1
39495: PUSH
39496: LD_INT 1
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 0
39505: PUSH
39506: LD_INT 1
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 1
39515: NEG
39516: PUSH
39517: LD_INT 0
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 1
39526: NEG
39527: PUSH
39528: LD_INT 1
39530: NEG
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 1
39538: NEG
39539: PUSH
39540: LD_INT 2
39542: NEG
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 1
39550: NEG
39551: PUSH
39552: LD_INT 1
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 2
39561: NEG
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 2
39572: NEG
39573: PUSH
39574: LD_INT 1
39576: NEG
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 2
39584: NEG
39585: PUSH
39586: LD_INT 2
39588: NEG
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39608: LD_ADDR_VAR 0 53
39612: PUSH
39613: LD_INT 0
39615: PUSH
39616: LD_INT 0
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 0
39625: PUSH
39626: LD_INT 1
39628: NEG
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 1
39636: PUSH
39637: LD_INT 0
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 1
39646: PUSH
39647: LD_INT 1
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 0
39656: PUSH
39657: LD_INT 1
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 1
39666: NEG
39667: PUSH
39668: LD_INT 0
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 1
39677: NEG
39678: PUSH
39679: LD_INT 1
39681: NEG
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 1
39689: NEG
39690: PUSH
39691: LD_INT 2
39693: NEG
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 0
39701: PUSH
39702: LD_INT 2
39704: NEG
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 1
39712: PUSH
39713: LD_INT 1
39715: NEG
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 2
39723: PUSH
39724: LD_INT 0
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 2
39733: PUSH
39734: LD_INT 1
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 2
39743: PUSH
39744: LD_INT 2
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 1
39753: PUSH
39754: LD_INT 2
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 0
39763: PUSH
39764: LD_INT 2
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 1
39773: NEG
39774: PUSH
39775: LD_INT 1
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 2
39784: NEG
39785: PUSH
39786: LD_INT 0
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 2
39795: NEG
39796: PUSH
39797: LD_INT 1
39799: NEG
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 2
39807: NEG
39808: PUSH
39809: LD_INT 2
39811: NEG
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39838: LD_ADDR_VAR 0 54
39842: PUSH
39843: LD_INT 0
39845: PUSH
39846: LD_INT 0
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 0
39855: PUSH
39856: LD_INT 1
39858: NEG
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 1
39866: PUSH
39867: LD_INT 0
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 1
39876: PUSH
39877: LD_INT 1
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 0
39886: PUSH
39887: LD_INT 1
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 1
39896: NEG
39897: PUSH
39898: LD_INT 0
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 1
39907: NEG
39908: PUSH
39909: LD_INT 1
39911: NEG
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 1
39919: NEG
39920: PUSH
39921: LD_INT 2
39923: NEG
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 0
39931: PUSH
39932: LD_INT 2
39934: NEG
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 1
39942: PUSH
39943: LD_INT 1
39945: NEG
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 2
39953: PUSH
39954: LD_INT 0
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 2
39963: PUSH
39964: LD_INT 1
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 2
39973: PUSH
39974: LD_INT 2
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 1
39983: PUSH
39984: LD_INT 2
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 0
39993: PUSH
39994: LD_INT 2
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 1
40003: NEG
40004: PUSH
40005: LD_INT 1
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 2
40014: NEG
40015: PUSH
40016: LD_INT 0
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 2
40025: NEG
40026: PUSH
40027: LD_INT 1
40029: NEG
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 2
40037: NEG
40038: PUSH
40039: LD_INT 2
40041: NEG
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40068: LD_ADDR_VAR 0 55
40072: PUSH
40073: LD_INT 0
40075: PUSH
40076: LD_INT 0
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 0
40085: PUSH
40086: LD_INT 1
40088: NEG
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 1
40096: PUSH
40097: LD_INT 0
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 1
40106: PUSH
40107: LD_INT 1
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 0
40116: PUSH
40117: LD_INT 1
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 1
40126: NEG
40127: PUSH
40128: LD_INT 0
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 1
40137: NEG
40138: PUSH
40139: LD_INT 1
40141: NEG
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 1
40149: NEG
40150: PUSH
40151: LD_INT 2
40153: NEG
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 0
40161: PUSH
40162: LD_INT 2
40164: NEG
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 1
40172: PUSH
40173: LD_INT 1
40175: NEG
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 2
40183: PUSH
40184: LD_INT 0
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 2
40193: PUSH
40194: LD_INT 1
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 2
40203: PUSH
40204: LD_INT 2
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 1
40213: PUSH
40214: LD_INT 2
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 0
40223: PUSH
40224: LD_INT 2
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 1
40233: NEG
40234: PUSH
40235: LD_INT 1
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 2
40244: NEG
40245: PUSH
40246: LD_INT 0
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 2
40255: NEG
40256: PUSH
40257: LD_INT 1
40259: NEG
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 2
40267: NEG
40268: PUSH
40269: LD_INT 2
40271: NEG
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40298: LD_ADDR_VAR 0 56
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: LD_INT 0
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 0
40315: PUSH
40316: LD_INT 1
40318: NEG
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 1
40326: PUSH
40327: LD_INT 0
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 1
40336: PUSH
40337: LD_INT 1
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 0
40346: PUSH
40347: LD_INT 1
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 1
40356: NEG
40357: PUSH
40358: LD_INT 0
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 1
40367: NEG
40368: PUSH
40369: LD_INT 1
40371: NEG
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 1
40379: NEG
40380: PUSH
40381: LD_INT 2
40383: NEG
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 0
40391: PUSH
40392: LD_INT 2
40394: NEG
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 1
40402: PUSH
40403: LD_INT 1
40405: NEG
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 2
40413: PUSH
40414: LD_INT 0
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 2
40423: PUSH
40424: LD_INT 1
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 2
40433: PUSH
40434: LD_INT 2
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 1
40443: PUSH
40444: LD_INT 2
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: LD_INT 2
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 1
40463: NEG
40464: PUSH
40465: LD_INT 1
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 2
40474: NEG
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 2
40485: NEG
40486: PUSH
40487: LD_INT 1
40489: NEG
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 2
40497: NEG
40498: PUSH
40499: LD_INT 2
40501: NEG
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40528: LD_ADDR_VAR 0 57
40532: PUSH
40533: LD_INT 0
40535: PUSH
40536: LD_INT 0
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 0
40545: PUSH
40546: LD_INT 1
40548: NEG
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 1
40556: PUSH
40557: LD_INT 0
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 1
40566: PUSH
40567: LD_INT 1
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 0
40576: PUSH
40577: LD_INT 1
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 1
40586: NEG
40587: PUSH
40588: LD_INT 0
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 1
40597: NEG
40598: PUSH
40599: LD_INT 1
40601: NEG
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 1
40609: NEG
40610: PUSH
40611: LD_INT 2
40613: NEG
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 0
40621: PUSH
40622: LD_INT 2
40624: NEG
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 1
40632: PUSH
40633: LD_INT 1
40635: NEG
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 2
40643: PUSH
40644: LD_INT 0
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 2
40653: PUSH
40654: LD_INT 1
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 2
40663: PUSH
40664: LD_INT 2
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 1
40673: PUSH
40674: LD_INT 2
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 0
40683: PUSH
40684: LD_INT 2
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 1
40693: NEG
40694: PUSH
40695: LD_INT 1
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 2
40704: NEG
40705: PUSH
40706: LD_INT 0
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 2
40715: NEG
40716: PUSH
40717: LD_INT 1
40719: NEG
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 2
40727: NEG
40728: PUSH
40729: LD_INT 2
40731: NEG
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40758: LD_ADDR_VAR 0 58
40762: PUSH
40763: LD_INT 0
40765: PUSH
40766: LD_INT 0
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 0
40775: PUSH
40776: LD_INT 1
40778: NEG
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 1
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 1
40796: PUSH
40797: LD_INT 1
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 0
40806: PUSH
40807: LD_INT 1
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 1
40816: NEG
40817: PUSH
40818: LD_INT 0
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 1
40827: NEG
40828: PUSH
40829: LD_INT 1
40831: NEG
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 1
40839: NEG
40840: PUSH
40841: LD_INT 2
40843: NEG
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 0
40851: PUSH
40852: LD_INT 2
40854: NEG
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 1
40862: PUSH
40863: LD_INT 1
40865: NEG
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 2
40873: PUSH
40874: LD_INT 0
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 2
40883: PUSH
40884: LD_INT 1
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 2
40893: PUSH
40894: LD_INT 2
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 1
40903: PUSH
40904: LD_INT 2
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 0
40913: PUSH
40914: LD_INT 2
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: LD_INT 1
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 2
40934: NEG
40935: PUSH
40936: LD_INT 0
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 2
40945: NEG
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 2
40957: NEG
40958: PUSH
40959: LD_INT 2
40961: NEG
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40988: LD_ADDR_VAR 0 59
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: LD_INT 0
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: LD_INT 1
41008: NEG
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 1
41016: PUSH
41017: LD_INT 0
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 1
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 0
41036: PUSH
41037: LD_INT 1
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 1
41046: NEG
41047: PUSH
41048: LD_INT 0
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 1
41057: NEG
41058: PUSH
41059: LD_INT 1
41061: NEG
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41076: LD_ADDR_VAR 0 60
41080: PUSH
41081: LD_INT 0
41083: PUSH
41084: LD_INT 0
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 0
41093: PUSH
41094: LD_INT 1
41096: NEG
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 1
41104: PUSH
41105: LD_INT 0
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 1
41114: PUSH
41115: LD_INT 1
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 0
41124: PUSH
41125: LD_INT 1
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 1
41134: NEG
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 1
41145: NEG
41146: PUSH
41147: LD_INT 1
41149: NEG
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41164: LD_ADDR_VAR 0 61
41168: PUSH
41169: LD_INT 0
41171: PUSH
41172: LD_INT 0
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: LD_INT 1
41184: NEG
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 1
41192: PUSH
41193: LD_INT 0
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 1
41202: PUSH
41203: LD_INT 1
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 0
41212: PUSH
41213: LD_INT 1
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 1
41222: NEG
41223: PUSH
41224: LD_INT 0
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 1
41233: NEG
41234: PUSH
41235: LD_INT 1
41237: NEG
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41252: LD_ADDR_VAR 0 62
41256: PUSH
41257: LD_INT 0
41259: PUSH
41260: LD_INT 0
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 0
41269: PUSH
41270: LD_INT 1
41272: NEG
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 1
41280: PUSH
41281: LD_INT 0
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 1
41290: PUSH
41291: LD_INT 1
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 0
41300: PUSH
41301: LD_INT 1
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 1
41310: NEG
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 1
41321: NEG
41322: PUSH
41323: LD_INT 1
41325: NEG
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41340: LD_ADDR_VAR 0 63
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: LD_INT 0
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 0
41357: PUSH
41358: LD_INT 1
41360: NEG
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 1
41368: PUSH
41369: LD_INT 0
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 1
41378: PUSH
41379: LD_INT 1
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 0
41388: PUSH
41389: LD_INT 1
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 1
41398: NEG
41399: PUSH
41400: LD_INT 0
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 1
41409: NEG
41410: PUSH
41411: LD_INT 1
41413: NEG
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41428: LD_ADDR_VAR 0 64
41432: PUSH
41433: LD_INT 0
41435: PUSH
41436: LD_INT 0
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 0
41445: PUSH
41446: LD_INT 1
41448: NEG
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 1
41456: PUSH
41457: LD_INT 0
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 1
41466: PUSH
41467: LD_INT 1
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 0
41476: PUSH
41477: LD_INT 1
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: PUSH
41488: LD_INT 0
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 1
41497: NEG
41498: PUSH
41499: LD_INT 1
41501: NEG
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: ST_TO_ADDR
// end ; 1 :
41516: GO 47413
41518: LD_INT 1
41520: DOUBLE
41521: EQUAL
41522: IFTRUE 41526
41524: GO 44149
41526: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41527: LD_ADDR_VAR 0 11
41531: PUSH
41532: LD_INT 1
41534: NEG
41535: PUSH
41536: LD_INT 3
41538: NEG
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 0
41546: PUSH
41547: LD_INT 3
41549: NEG
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 1
41557: PUSH
41558: LD_INT 2
41560: NEG
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: LIST
41570: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41571: LD_ADDR_VAR 0 12
41575: PUSH
41576: LD_INT 2
41578: PUSH
41579: LD_INT 1
41581: NEG
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 3
41589: PUSH
41590: LD_INT 0
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 3
41599: PUSH
41600: LD_INT 1
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: LIST
41611: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41612: LD_ADDR_VAR 0 13
41616: PUSH
41617: LD_INT 3
41619: PUSH
41620: LD_INT 2
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 3
41629: PUSH
41630: LD_INT 3
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 2
41639: PUSH
41640: LD_INT 3
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: LIST
41651: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41652: LD_ADDR_VAR 0 14
41656: PUSH
41657: LD_INT 1
41659: PUSH
41660: LD_INT 3
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 0
41669: PUSH
41670: LD_INT 3
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 1
41679: NEG
41680: PUSH
41681: LD_INT 2
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: LIST
41692: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41693: LD_ADDR_VAR 0 15
41697: PUSH
41698: LD_INT 2
41700: NEG
41701: PUSH
41702: LD_INT 1
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 3
41711: NEG
41712: PUSH
41713: LD_INT 0
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 3
41722: NEG
41723: PUSH
41724: LD_INT 1
41726: NEG
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: LIST
41736: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41737: LD_ADDR_VAR 0 16
41741: PUSH
41742: LD_INT 2
41744: NEG
41745: PUSH
41746: LD_INT 3
41748: NEG
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 3
41756: NEG
41757: PUSH
41758: LD_INT 2
41760: NEG
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 3
41768: NEG
41769: PUSH
41770: LD_INT 3
41772: NEG
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: LIST
41782: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41783: LD_ADDR_VAR 0 17
41787: PUSH
41788: LD_INT 1
41790: NEG
41791: PUSH
41792: LD_INT 3
41794: NEG
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: LD_INT 3
41805: NEG
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 1
41813: PUSH
41814: LD_INT 2
41816: NEG
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: LIST
41826: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41827: LD_ADDR_VAR 0 18
41831: PUSH
41832: LD_INT 2
41834: PUSH
41835: LD_INT 1
41837: NEG
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 3
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 3
41855: PUSH
41856: LD_INT 1
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: LIST
41867: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41868: LD_ADDR_VAR 0 19
41872: PUSH
41873: LD_INT 3
41875: PUSH
41876: LD_INT 2
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 3
41885: PUSH
41886: LD_INT 3
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 2
41895: PUSH
41896: LD_INT 3
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: LIST
41907: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41908: LD_ADDR_VAR 0 20
41912: PUSH
41913: LD_INT 1
41915: PUSH
41916: LD_INT 3
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 0
41925: PUSH
41926: LD_INT 3
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 1
41935: NEG
41936: PUSH
41937: LD_INT 2
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: LIST
41948: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41949: LD_ADDR_VAR 0 21
41953: PUSH
41954: LD_INT 2
41956: NEG
41957: PUSH
41958: LD_INT 1
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 3
41967: NEG
41968: PUSH
41969: LD_INT 0
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 3
41978: NEG
41979: PUSH
41980: LD_INT 1
41982: NEG
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: LIST
41992: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41993: LD_ADDR_VAR 0 22
41997: PUSH
41998: LD_INT 2
42000: NEG
42001: PUSH
42002: LD_INT 3
42004: NEG
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 3
42012: NEG
42013: PUSH
42014: LD_INT 2
42016: NEG
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 3
42024: NEG
42025: PUSH
42026: LD_INT 3
42028: NEG
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: LIST
42038: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42039: LD_ADDR_VAR 0 23
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: LD_INT 3
42049: NEG
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 1
42057: NEG
42058: PUSH
42059: LD_INT 4
42061: NEG
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 1
42069: PUSH
42070: LD_INT 3
42072: NEG
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: LIST
42082: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42083: LD_ADDR_VAR 0 24
42087: PUSH
42088: LD_INT 3
42090: PUSH
42091: LD_INT 0
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 3
42100: PUSH
42101: LD_INT 1
42103: NEG
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 4
42111: PUSH
42112: LD_INT 1
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: LIST
42123: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42124: LD_ADDR_VAR 0 25
42128: PUSH
42129: LD_INT 3
42131: PUSH
42132: LD_INT 3
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 4
42141: PUSH
42142: LD_INT 3
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 3
42151: PUSH
42152: LD_INT 4
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: LIST
42163: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42164: LD_ADDR_VAR 0 26
42168: PUSH
42169: LD_INT 0
42171: PUSH
42172: LD_INT 3
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 1
42181: PUSH
42182: LD_INT 4
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 1
42191: NEG
42192: PUSH
42193: LD_INT 3
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: LIST
42204: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42205: LD_ADDR_VAR 0 27
42209: PUSH
42210: LD_INT 3
42212: NEG
42213: PUSH
42214: LD_INT 0
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 3
42223: NEG
42224: PUSH
42225: LD_INT 1
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 4
42234: NEG
42235: PUSH
42236: LD_INT 1
42238: NEG
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: LIST
42248: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42249: LD_ADDR_VAR 0 28
42253: PUSH
42254: LD_INT 3
42256: NEG
42257: PUSH
42258: LD_INT 3
42260: NEG
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 3
42268: NEG
42269: PUSH
42270: LD_INT 4
42272: NEG
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 4
42280: NEG
42281: PUSH
42282: LD_INT 3
42284: NEG
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: LIST
42294: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42295: LD_ADDR_VAR 0 29
42299: PUSH
42300: LD_INT 1
42302: NEG
42303: PUSH
42304: LD_INT 3
42306: NEG
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 0
42314: PUSH
42315: LD_INT 3
42317: NEG
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 1
42325: PUSH
42326: LD_INT 2
42328: NEG
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 1
42336: NEG
42337: PUSH
42338: LD_INT 4
42340: NEG
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: LD_INT 4
42351: NEG
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 1
42359: PUSH
42360: LD_INT 3
42362: NEG
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 1
42370: NEG
42371: PUSH
42372: LD_INT 5
42374: NEG
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: LD_INT 5
42385: NEG
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 1
42393: PUSH
42394: LD_INT 4
42396: NEG
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 1
42404: NEG
42405: PUSH
42406: LD_INT 6
42408: NEG
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 0
42416: PUSH
42417: LD_INT 6
42419: NEG
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 1
42427: PUSH
42428: LD_INT 5
42430: NEG
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42450: LD_ADDR_VAR 0 30
42454: PUSH
42455: LD_INT 2
42457: PUSH
42458: LD_INT 1
42460: NEG
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 3
42468: PUSH
42469: LD_INT 0
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 3
42478: PUSH
42479: LD_INT 1
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 3
42488: PUSH
42489: LD_INT 1
42491: NEG
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 4
42499: PUSH
42500: LD_INT 0
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 4
42509: PUSH
42510: LD_INT 1
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 4
42519: PUSH
42520: LD_INT 1
42522: NEG
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 5
42530: PUSH
42531: LD_INT 0
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 5
42540: PUSH
42541: LD_INT 1
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 5
42550: PUSH
42551: LD_INT 1
42553: NEG
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 6
42561: PUSH
42562: LD_INT 0
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 6
42571: PUSH
42572: LD_INT 1
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42593: LD_ADDR_VAR 0 31
42597: PUSH
42598: LD_INT 3
42600: PUSH
42601: LD_INT 2
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 3
42610: PUSH
42611: LD_INT 3
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 2
42620: PUSH
42621: LD_INT 3
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 4
42630: PUSH
42631: LD_INT 3
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 4
42640: PUSH
42641: LD_INT 4
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 3
42650: PUSH
42651: LD_INT 4
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 5
42660: PUSH
42661: LD_INT 4
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 5
42670: PUSH
42671: LD_INT 5
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 4
42680: PUSH
42681: LD_INT 5
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 6
42690: PUSH
42691: LD_INT 5
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 6
42700: PUSH
42701: LD_INT 6
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 5
42710: PUSH
42711: LD_INT 6
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42732: LD_ADDR_VAR 0 32
42736: PUSH
42737: LD_INT 1
42739: PUSH
42740: LD_INT 3
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 0
42749: PUSH
42750: LD_INT 3
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 1
42759: NEG
42760: PUSH
42761: LD_INT 2
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 1
42770: PUSH
42771: LD_INT 4
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 0
42780: PUSH
42781: LD_INT 4
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 1
42790: NEG
42791: PUSH
42792: LD_INT 3
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 1
42801: PUSH
42802: LD_INT 5
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 0
42811: PUSH
42812: LD_INT 5
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 1
42821: NEG
42822: PUSH
42823: LD_INT 4
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 1
42832: PUSH
42833: LD_INT 6
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 0
42842: PUSH
42843: LD_INT 6
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 1
42852: NEG
42853: PUSH
42854: LD_INT 5
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42875: LD_ADDR_VAR 0 33
42879: PUSH
42880: LD_INT 2
42882: NEG
42883: PUSH
42884: LD_INT 1
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 3
42893: NEG
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 3
42904: NEG
42905: PUSH
42906: LD_INT 1
42908: NEG
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 3
42916: NEG
42917: PUSH
42918: LD_INT 1
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 4
42927: NEG
42928: PUSH
42929: LD_INT 0
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 4
42938: NEG
42939: PUSH
42940: LD_INT 1
42942: NEG
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 4
42950: NEG
42951: PUSH
42952: LD_INT 1
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 5
42961: NEG
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 5
42972: NEG
42973: PUSH
42974: LD_INT 1
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 5
42984: NEG
42985: PUSH
42986: LD_INT 1
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 6
42995: NEG
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 6
43006: NEG
43007: PUSH
43008: LD_INT 1
43010: NEG
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43030: LD_ADDR_VAR 0 34
43034: PUSH
43035: LD_INT 2
43037: NEG
43038: PUSH
43039: LD_INT 3
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 3
43049: NEG
43050: PUSH
43051: LD_INT 2
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 3
43061: NEG
43062: PUSH
43063: LD_INT 3
43065: NEG
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 3
43073: NEG
43074: PUSH
43075: LD_INT 4
43077: NEG
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 4
43085: NEG
43086: PUSH
43087: LD_INT 3
43089: NEG
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 4
43097: NEG
43098: PUSH
43099: LD_INT 4
43101: NEG
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 4
43109: NEG
43110: PUSH
43111: LD_INT 5
43113: NEG
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 5
43121: NEG
43122: PUSH
43123: LD_INT 4
43125: NEG
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 5
43133: NEG
43134: PUSH
43135: LD_INT 5
43137: NEG
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 5
43145: NEG
43146: PUSH
43147: LD_INT 6
43149: NEG
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 6
43157: NEG
43158: PUSH
43159: LD_INT 5
43161: NEG
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 6
43169: NEG
43170: PUSH
43171: LD_INT 6
43173: NEG
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43193: LD_ADDR_VAR 0 41
43197: PUSH
43198: LD_INT 0
43200: PUSH
43201: LD_INT 2
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 1
43211: NEG
43212: PUSH
43213: LD_INT 3
43215: NEG
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 1
43223: PUSH
43224: LD_INT 2
43226: NEG
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: LIST
43236: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43237: LD_ADDR_VAR 0 42
43241: PUSH
43242: LD_INT 2
43244: PUSH
43245: LD_INT 0
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 2
43254: PUSH
43255: LD_INT 1
43257: NEG
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 3
43265: PUSH
43266: LD_INT 1
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: LIST
43277: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43278: LD_ADDR_VAR 0 43
43282: PUSH
43283: LD_INT 2
43285: PUSH
43286: LD_INT 2
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 3
43295: PUSH
43296: LD_INT 2
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 2
43305: PUSH
43306: LD_INT 3
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: LIST
43317: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43318: LD_ADDR_VAR 0 44
43322: PUSH
43323: LD_INT 0
43325: PUSH
43326: LD_INT 2
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 1
43335: PUSH
43336: LD_INT 3
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 1
43345: NEG
43346: PUSH
43347: LD_INT 2
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: LIST
43358: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43359: LD_ADDR_VAR 0 45
43363: PUSH
43364: LD_INT 2
43366: NEG
43367: PUSH
43368: LD_INT 0
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 2
43377: NEG
43378: PUSH
43379: LD_INT 1
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 3
43388: NEG
43389: PUSH
43390: LD_INT 1
43392: NEG
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: LIST
43402: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43403: LD_ADDR_VAR 0 46
43407: PUSH
43408: LD_INT 2
43410: NEG
43411: PUSH
43412: LD_INT 2
43414: NEG
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 2
43422: NEG
43423: PUSH
43424: LD_INT 3
43426: NEG
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 3
43434: NEG
43435: PUSH
43436: LD_INT 2
43438: NEG
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: LIST
43448: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43449: LD_ADDR_VAR 0 47
43453: PUSH
43454: LD_INT 2
43456: NEG
43457: PUSH
43458: LD_INT 3
43460: NEG
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 1
43468: NEG
43469: PUSH
43470: LD_INT 3
43472: NEG
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43482: LD_ADDR_VAR 0 48
43486: PUSH
43487: LD_INT 1
43489: PUSH
43490: LD_INT 2
43492: NEG
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 2
43500: PUSH
43501: LD_INT 1
43503: NEG
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43513: LD_ADDR_VAR 0 49
43517: PUSH
43518: LD_INT 3
43520: PUSH
43521: LD_INT 1
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 3
43530: PUSH
43531: LD_INT 2
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43542: LD_ADDR_VAR 0 50
43546: PUSH
43547: LD_INT 2
43549: PUSH
43550: LD_INT 3
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 1
43559: PUSH
43560: LD_INT 3
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43571: LD_ADDR_VAR 0 51
43575: PUSH
43576: LD_INT 1
43578: NEG
43579: PUSH
43580: LD_INT 2
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 2
43589: NEG
43590: PUSH
43591: LD_INT 1
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43602: LD_ADDR_VAR 0 52
43606: PUSH
43607: LD_INT 3
43609: NEG
43610: PUSH
43611: LD_INT 1
43613: NEG
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 3
43621: NEG
43622: PUSH
43623: LD_INT 2
43625: NEG
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43635: LD_ADDR_VAR 0 53
43639: PUSH
43640: LD_INT 1
43642: NEG
43643: PUSH
43644: LD_INT 3
43646: NEG
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 0
43654: PUSH
43655: LD_INT 3
43657: NEG
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 1
43665: PUSH
43666: LD_INT 2
43668: NEG
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: LIST
43678: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43679: LD_ADDR_VAR 0 54
43683: PUSH
43684: LD_INT 2
43686: PUSH
43687: LD_INT 1
43689: NEG
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 3
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 3
43707: PUSH
43708: LD_INT 1
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: LIST
43719: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43720: LD_ADDR_VAR 0 55
43724: PUSH
43725: LD_INT 3
43727: PUSH
43728: LD_INT 2
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 3
43737: PUSH
43738: LD_INT 3
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 2
43747: PUSH
43748: LD_INT 3
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: LIST
43759: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43760: LD_ADDR_VAR 0 56
43764: PUSH
43765: LD_INT 1
43767: PUSH
43768: LD_INT 3
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 0
43777: PUSH
43778: LD_INT 3
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 1
43787: NEG
43788: PUSH
43789: LD_INT 2
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: LIST
43800: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43801: LD_ADDR_VAR 0 57
43805: PUSH
43806: LD_INT 2
43808: NEG
43809: PUSH
43810: LD_INT 1
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 3
43819: NEG
43820: PUSH
43821: LD_INT 0
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 3
43830: NEG
43831: PUSH
43832: LD_INT 1
43834: NEG
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: LIST
43844: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43845: LD_ADDR_VAR 0 58
43849: PUSH
43850: LD_INT 2
43852: NEG
43853: PUSH
43854: LD_INT 3
43856: NEG
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 3
43864: NEG
43865: PUSH
43866: LD_INT 2
43868: NEG
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 3
43876: NEG
43877: PUSH
43878: LD_INT 3
43880: NEG
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: LIST
43890: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43891: LD_ADDR_VAR 0 59
43895: PUSH
43896: LD_INT 1
43898: NEG
43899: PUSH
43900: LD_INT 2
43902: NEG
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 0
43910: PUSH
43911: LD_INT 2
43913: NEG
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 1
43921: PUSH
43922: LD_INT 1
43924: NEG
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: LIST
43934: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43935: LD_ADDR_VAR 0 60
43939: PUSH
43940: LD_INT 1
43942: PUSH
43943: LD_INT 1
43945: NEG
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 2
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 2
43963: PUSH
43964: LD_INT 1
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: LIST
43975: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43976: LD_ADDR_VAR 0 61
43980: PUSH
43981: LD_INT 2
43983: PUSH
43984: LD_INT 1
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 2
43993: PUSH
43994: LD_INT 2
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 1
44003: PUSH
44004: LD_INT 2
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: LIST
44015: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44016: LD_ADDR_VAR 0 62
44020: PUSH
44021: LD_INT 1
44023: PUSH
44024: LD_INT 2
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: LD_INT 2
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: LD_INT 1
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: LIST
44056: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44057: LD_ADDR_VAR 0 63
44061: PUSH
44062: LD_INT 1
44064: NEG
44065: PUSH
44066: LD_INT 1
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 2
44075: NEG
44076: PUSH
44077: LD_INT 0
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 2
44086: NEG
44087: PUSH
44088: LD_INT 1
44090: NEG
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: LIST
44100: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44101: LD_ADDR_VAR 0 64
44105: PUSH
44106: LD_INT 1
44108: NEG
44109: PUSH
44110: LD_INT 2
44112: NEG
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 2
44120: NEG
44121: PUSH
44122: LD_INT 1
44124: NEG
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 2
44132: NEG
44133: PUSH
44134: LD_INT 2
44136: NEG
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: LIST
44146: ST_TO_ADDR
// end ; 2 :
44147: GO 47413
44149: LD_INT 2
44151: DOUBLE
44152: EQUAL
44153: IFTRUE 44157
44155: GO 47412
44157: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44158: LD_ADDR_VAR 0 29
44162: PUSH
44163: LD_INT 4
44165: PUSH
44166: LD_INT 0
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 4
44175: PUSH
44176: LD_INT 1
44178: NEG
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 5
44186: PUSH
44187: LD_INT 0
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 5
44196: PUSH
44197: LD_INT 1
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 4
44206: PUSH
44207: LD_INT 1
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 3
44216: PUSH
44217: LD_INT 0
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 3
44226: PUSH
44227: LD_INT 1
44229: NEG
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 3
44237: PUSH
44238: LD_INT 2
44240: NEG
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 5
44248: PUSH
44249: LD_INT 2
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 3
44258: PUSH
44259: LD_INT 3
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 3
44268: PUSH
44269: LD_INT 2
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 4
44278: PUSH
44279: LD_INT 3
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 4
44288: PUSH
44289: LD_INT 4
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 3
44298: PUSH
44299: LD_INT 4
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 2
44308: PUSH
44309: LD_INT 3
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 2
44318: PUSH
44319: LD_INT 2
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 4
44328: PUSH
44329: LD_INT 2
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 2
44338: PUSH
44339: LD_INT 4
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 0
44348: PUSH
44349: LD_INT 4
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 0
44358: PUSH
44359: LD_INT 3
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 1
44368: PUSH
44369: LD_INT 4
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 1
44378: PUSH
44379: LD_INT 5
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: LD_INT 5
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 1
44398: NEG
44399: PUSH
44400: LD_INT 4
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 1
44409: NEG
44410: PUSH
44411: LD_INT 3
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 2
44420: PUSH
44421: LD_INT 5
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 2
44430: NEG
44431: PUSH
44432: LD_INT 3
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 3
44441: NEG
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 3
44452: NEG
44453: PUSH
44454: LD_INT 1
44456: NEG
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 2
44464: NEG
44465: PUSH
44466: LD_INT 0
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 2
44475: NEG
44476: PUSH
44477: LD_INT 1
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 3
44486: NEG
44487: PUSH
44488: LD_INT 1
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 4
44497: NEG
44498: PUSH
44499: LD_INT 0
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 4
44508: NEG
44509: PUSH
44510: LD_INT 1
44512: NEG
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 4
44520: NEG
44521: PUSH
44522: LD_INT 2
44524: NEG
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 2
44532: NEG
44533: PUSH
44534: LD_INT 2
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 4
44543: NEG
44544: PUSH
44545: LD_INT 4
44547: NEG
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 4
44555: NEG
44556: PUSH
44557: LD_INT 5
44559: NEG
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 3
44567: NEG
44568: PUSH
44569: LD_INT 4
44571: NEG
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 3
44579: NEG
44580: PUSH
44581: LD_INT 3
44583: NEG
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 4
44591: NEG
44592: PUSH
44593: LD_INT 3
44595: NEG
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 5
44603: NEG
44604: PUSH
44605: LD_INT 4
44607: NEG
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 5
44615: NEG
44616: PUSH
44617: LD_INT 5
44619: NEG
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 3
44627: NEG
44628: PUSH
44629: LD_INT 5
44631: NEG
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 5
44639: NEG
44640: PUSH
44641: LD_INT 3
44643: NEG
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44696: LD_ADDR_VAR 0 30
44700: PUSH
44701: LD_INT 4
44703: PUSH
44704: LD_INT 4
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 4
44713: PUSH
44714: LD_INT 3
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 5
44723: PUSH
44724: LD_INT 4
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 5
44733: PUSH
44734: LD_INT 5
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 4
44743: PUSH
44744: LD_INT 5
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 3
44753: PUSH
44754: LD_INT 4
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 3
44763: PUSH
44764: LD_INT 3
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 5
44773: PUSH
44774: LD_INT 3
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 3
44783: PUSH
44784: LD_INT 5
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: LD_INT 3
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: LD_INT 2
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 1
44813: PUSH
44814: LD_INT 3
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 1
44823: PUSH
44824: LD_INT 4
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: LD_INT 4
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 1
44843: NEG
44844: PUSH
44845: LD_INT 3
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 1
44854: NEG
44855: PUSH
44856: LD_INT 2
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 2
44865: PUSH
44866: LD_INT 4
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 2
44875: NEG
44876: PUSH
44877: LD_INT 2
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 4
44886: NEG
44887: PUSH
44888: LD_INT 0
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 4
44897: NEG
44898: PUSH
44899: LD_INT 1
44901: NEG
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 3
44909: NEG
44910: PUSH
44911: LD_INT 0
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 3
44920: NEG
44921: PUSH
44922: LD_INT 1
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 4
44931: NEG
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 5
44942: NEG
44943: PUSH
44944: LD_INT 0
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 5
44953: NEG
44954: PUSH
44955: LD_INT 1
44957: NEG
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 5
44965: NEG
44966: PUSH
44967: LD_INT 2
44969: NEG
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 3
44977: NEG
44978: PUSH
44979: LD_INT 2
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 3
44988: NEG
44989: PUSH
44990: LD_INT 3
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 3
45000: NEG
45001: PUSH
45002: LD_INT 4
45004: NEG
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 2
45012: NEG
45013: PUSH
45014: LD_INT 3
45016: NEG
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 2
45024: NEG
45025: PUSH
45026: LD_INT 2
45028: NEG
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 3
45036: NEG
45037: PUSH
45038: LD_INT 2
45040: NEG
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 4
45048: NEG
45049: PUSH
45050: LD_INT 3
45052: NEG
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 4
45060: NEG
45061: PUSH
45062: LD_INT 4
45064: NEG
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 2
45072: NEG
45073: PUSH
45074: LD_INT 4
45076: NEG
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 4
45084: NEG
45085: PUSH
45086: LD_INT 2
45088: NEG
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: LD_INT 4
45099: NEG
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 0
45107: PUSH
45108: LD_INT 5
45110: NEG
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: LD_INT 4
45121: NEG
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 1
45129: PUSH
45130: LD_INT 3
45132: NEG
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: LD_INT 3
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 1
45151: NEG
45152: PUSH
45153: LD_INT 4
45155: NEG
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 1
45163: NEG
45164: PUSH
45165: LD_INT 5
45167: NEG
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 2
45175: PUSH
45176: LD_INT 3
45178: NEG
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 2
45186: NEG
45187: PUSH
45188: LD_INT 5
45190: NEG
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45243: LD_ADDR_VAR 0 31
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: LD_INT 4
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 0
45260: PUSH
45261: LD_INT 3
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 1
45270: PUSH
45271: LD_INT 4
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 1
45280: PUSH
45281: LD_INT 5
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: LD_INT 5
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 1
45300: NEG
45301: PUSH
45302: LD_INT 4
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 1
45311: NEG
45312: PUSH
45313: LD_INT 3
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 2
45322: PUSH
45323: LD_INT 5
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 2
45332: NEG
45333: PUSH
45334: LD_INT 3
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 3
45343: NEG
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 3
45354: NEG
45355: PUSH
45356: LD_INT 1
45358: NEG
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 2
45366: NEG
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 2
45377: NEG
45378: PUSH
45379: LD_INT 1
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 3
45388: NEG
45389: PUSH
45390: LD_INT 1
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 4
45399: NEG
45400: PUSH
45401: LD_INT 0
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 4
45410: NEG
45411: PUSH
45412: LD_INT 1
45414: NEG
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 4
45422: NEG
45423: PUSH
45424: LD_INT 2
45426: NEG
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 2
45434: NEG
45435: PUSH
45436: LD_INT 2
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 4
45445: NEG
45446: PUSH
45447: LD_INT 4
45449: NEG
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 4
45457: NEG
45458: PUSH
45459: LD_INT 5
45461: NEG
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 3
45469: NEG
45470: PUSH
45471: LD_INT 4
45473: NEG
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 3
45481: NEG
45482: PUSH
45483: LD_INT 3
45485: NEG
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 4
45493: NEG
45494: PUSH
45495: LD_INT 3
45497: NEG
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 5
45505: NEG
45506: PUSH
45507: LD_INT 4
45509: NEG
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 5
45517: NEG
45518: PUSH
45519: LD_INT 5
45521: NEG
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 3
45529: NEG
45530: PUSH
45531: LD_INT 5
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 5
45541: NEG
45542: PUSH
45543: LD_INT 3
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 0
45553: PUSH
45554: LD_INT 3
45556: NEG
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 0
45564: PUSH
45565: LD_INT 4
45567: NEG
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: LD_INT 3
45578: NEG
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 1
45586: PUSH
45587: LD_INT 2
45589: NEG
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: LD_INT 2
45600: NEG
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 1
45608: NEG
45609: PUSH
45610: LD_INT 3
45612: NEG
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PUSH
45622: LD_INT 4
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 2
45632: PUSH
45633: LD_INT 2
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 2
45643: NEG
45644: PUSH
45645: LD_INT 4
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 4
45655: PUSH
45656: LD_INT 0
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 4
45665: PUSH
45666: LD_INT 1
45668: NEG
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 5
45676: PUSH
45677: LD_INT 0
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 5
45686: PUSH
45687: LD_INT 1
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 4
45696: PUSH
45697: LD_INT 1
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 3
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 3
45716: PUSH
45717: LD_INT 1
45719: NEG
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 3
45727: PUSH
45728: LD_INT 2
45730: NEG
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 5
45738: PUSH
45739: LD_INT 2
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45793: LD_ADDR_VAR 0 32
45797: PUSH
45798: LD_INT 4
45800: NEG
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 4
45811: NEG
45812: PUSH
45813: LD_INT 1
45815: NEG
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 3
45823: NEG
45824: PUSH
45825: LD_INT 0
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 3
45834: NEG
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 4
45845: NEG
45846: PUSH
45847: LD_INT 1
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 5
45856: NEG
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 5
45867: NEG
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 5
45879: NEG
45880: PUSH
45881: LD_INT 2
45883: NEG
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 3
45891: NEG
45892: PUSH
45893: LD_INT 2
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 3
45902: NEG
45903: PUSH
45904: LD_INT 3
45906: NEG
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 3
45914: NEG
45915: PUSH
45916: LD_INT 4
45918: NEG
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 2
45926: NEG
45927: PUSH
45928: LD_INT 3
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 2
45938: NEG
45939: PUSH
45940: LD_INT 2
45942: NEG
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 3
45950: NEG
45951: PUSH
45952: LD_INT 2
45954: NEG
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 4
45962: NEG
45963: PUSH
45964: LD_INT 3
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 4
45974: NEG
45975: PUSH
45976: LD_INT 4
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 2
45986: NEG
45987: PUSH
45988: LD_INT 4
45990: NEG
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 4
45998: NEG
45999: PUSH
46000: LD_INT 2
46002: NEG
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: LD_INT 4
46013: NEG
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 0
46021: PUSH
46022: LD_INT 5
46024: NEG
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 1
46032: PUSH
46033: LD_INT 4
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: LD_INT 3
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: LD_INT 3
46057: NEG
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: LD_INT 4
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 1
46077: NEG
46078: PUSH
46079: LD_INT 5
46081: NEG
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 2
46089: PUSH
46090: LD_INT 3
46092: NEG
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 2
46100: NEG
46101: PUSH
46102: LD_INT 5
46104: NEG
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 3
46112: PUSH
46113: LD_INT 0
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 3
46122: PUSH
46123: LD_INT 1
46125: NEG
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 4
46133: PUSH
46134: LD_INT 0
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 4
46143: PUSH
46144: LD_INT 1
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 3
46153: PUSH
46154: LD_INT 1
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 2
46163: PUSH
46164: LD_INT 0
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 2
46173: PUSH
46174: LD_INT 1
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 2
46184: PUSH
46185: LD_INT 2
46187: NEG
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 4
46195: PUSH
46196: LD_INT 2
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 4
46205: PUSH
46206: LD_INT 4
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 4
46215: PUSH
46216: LD_INT 3
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 5
46225: PUSH
46226: LD_INT 4
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 5
46235: PUSH
46236: LD_INT 5
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 4
46245: PUSH
46246: LD_INT 5
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 3
46255: PUSH
46256: LD_INT 4
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 3
46265: PUSH
46266: LD_INT 3
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 5
46275: PUSH
46276: LD_INT 3
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 3
46285: PUSH
46286: LD_INT 5
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46340: LD_ADDR_VAR 0 33
46344: PUSH
46345: LD_INT 4
46347: NEG
46348: PUSH
46349: LD_INT 4
46351: NEG
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 4
46359: NEG
46360: PUSH
46361: LD_INT 5
46363: NEG
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 3
46371: NEG
46372: PUSH
46373: LD_INT 4
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 3
46383: NEG
46384: PUSH
46385: LD_INT 3
46387: NEG
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 4
46395: NEG
46396: PUSH
46397: LD_INT 3
46399: NEG
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 5
46407: NEG
46408: PUSH
46409: LD_INT 4
46411: NEG
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 5
46419: NEG
46420: PUSH
46421: LD_INT 5
46423: NEG
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 3
46431: NEG
46432: PUSH
46433: LD_INT 5
46435: NEG
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 5
46443: NEG
46444: PUSH
46445: LD_INT 3
46447: NEG
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: LD_INT 3
46458: NEG
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 0
46466: PUSH
46467: LD_INT 4
46469: NEG
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 1
46477: PUSH
46478: LD_INT 3
46480: NEG
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: PUSH
46489: LD_INT 2
46491: NEG
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 0
46499: PUSH
46500: LD_INT 2
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 1
46510: NEG
46511: PUSH
46512: LD_INT 3
46514: NEG
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 1
46522: NEG
46523: PUSH
46524: LD_INT 4
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 2
46534: PUSH
46535: LD_INT 2
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 2
46545: NEG
46546: PUSH
46547: LD_INT 4
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 4
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 4
46567: PUSH
46568: LD_INT 1
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 5
46578: PUSH
46579: LD_INT 0
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 5
46588: PUSH
46589: LD_INT 1
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 4
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 3
46608: PUSH
46609: LD_INT 0
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 3
46618: PUSH
46619: LD_INT 1
46621: NEG
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 3
46629: PUSH
46630: LD_INT 2
46632: NEG
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 5
46640: PUSH
46641: LD_INT 2
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 3
46650: PUSH
46651: LD_INT 3
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 3
46660: PUSH
46661: LD_INT 2
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 4
46670: PUSH
46671: LD_INT 3
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 4
46680: PUSH
46681: LD_INT 4
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 3
46690: PUSH
46691: LD_INT 4
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 2
46700: PUSH
46701: LD_INT 3
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 2
46710: PUSH
46711: LD_INT 2
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 4
46720: PUSH
46721: LD_INT 2
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 2
46730: PUSH
46731: LD_INT 4
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: LD_INT 4
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 0
46750: PUSH
46751: LD_INT 3
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 1
46760: PUSH
46761: LD_INT 4
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 1
46770: PUSH
46771: LD_INT 5
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: LD_INT 5
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: LD_INT 4
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: LD_INT 3
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 2
46812: PUSH
46813: LD_INT 5
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 2
46822: NEG
46823: PUSH
46824: LD_INT 3
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46878: LD_ADDR_VAR 0 34
46882: PUSH
46883: LD_INT 0
46885: PUSH
46886: LD_INT 4
46888: NEG
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 0
46896: PUSH
46897: LD_INT 5
46899: NEG
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 1
46907: PUSH
46908: LD_INT 4
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 1
46918: PUSH
46919: LD_INT 3
46921: NEG
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: LD_INT 3
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: LD_INT 4
46944: NEG
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 1
46952: NEG
46953: PUSH
46954: LD_INT 5
46956: NEG
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 2
46964: PUSH
46965: LD_INT 3
46967: NEG
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 2
46975: NEG
46976: PUSH
46977: LD_INT 5
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 3
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 3
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 4
47008: PUSH
47009: LD_INT 0
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 4
47018: PUSH
47019: LD_INT 1
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 3
47028: PUSH
47029: LD_INT 1
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 2
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 2
47048: PUSH
47049: LD_INT 1
47051: NEG
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 2
47059: PUSH
47060: LD_INT 2
47062: NEG
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 4
47070: PUSH
47071: LD_INT 2
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 4
47080: PUSH
47081: LD_INT 4
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 4
47090: PUSH
47091: LD_INT 3
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 5
47100: PUSH
47101: LD_INT 4
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 5
47110: PUSH
47111: LD_INT 5
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 4
47120: PUSH
47121: LD_INT 5
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 3
47130: PUSH
47131: LD_INT 4
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 3
47140: PUSH
47141: LD_INT 3
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 5
47150: PUSH
47151: LD_INT 3
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 3
47160: PUSH
47161: LD_INT 5
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 0
47170: PUSH
47171: LD_INT 3
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: LD_INT 2
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: LD_INT 3
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: LD_INT 4
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 0
47210: PUSH
47211: LD_INT 4
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: LD_INT 3
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: LD_INT 2
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 2
47242: PUSH
47243: LD_INT 4
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 2
47252: NEG
47253: PUSH
47254: LD_INT 2
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 4
47263: NEG
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 4
47274: NEG
47275: PUSH
47276: LD_INT 1
47278: NEG
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 3
47286: NEG
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 3
47297: NEG
47298: PUSH
47299: LD_INT 1
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 4
47308: NEG
47309: PUSH
47310: LD_INT 1
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 5
47319: NEG
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 5
47330: NEG
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 5
47342: NEG
47343: PUSH
47344: LD_INT 2
47346: NEG
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 3
47354: NEG
47355: PUSH
47356: LD_INT 2
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: ST_TO_ADDR
// end ; end ;
47410: GO 47413
47412: POP
// case btype of b_depot , b_warehouse :
47413: LD_VAR 0 1
47417: PUSH
47418: LD_INT 0
47420: DOUBLE
47421: EQUAL
47422: IFTRUE 47432
47424: LD_INT 1
47426: DOUBLE
47427: EQUAL
47428: IFTRUE 47432
47430: GO 47633
47432: POP
// case nation of nation_american :
47433: LD_VAR 0 5
47437: PUSH
47438: LD_INT 1
47440: DOUBLE
47441: EQUAL
47442: IFTRUE 47446
47444: GO 47502
47446: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47447: LD_ADDR_VAR 0 9
47451: PUSH
47452: LD_VAR 0 11
47456: PUSH
47457: LD_VAR 0 12
47461: PUSH
47462: LD_VAR 0 13
47466: PUSH
47467: LD_VAR 0 14
47471: PUSH
47472: LD_VAR 0 15
47476: PUSH
47477: LD_VAR 0 16
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: PUSH
47490: LD_VAR 0 4
47494: PUSH
47495: LD_INT 1
47497: PLUS
47498: ARRAY
47499: ST_TO_ADDR
47500: GO 47631
47502: LD_INT 2
47504: DOUBLE
47505: EQUAL
47506: IFTRUE 47510
47508: GO 47566
47510: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47511: LD_ADDR_VAR 0 9
47515: PUSH
47516: LD_VAR 0 17
47520: PUSH
47521: LD_VAR 0 18
47525: PUSH
47526: LD_VAR 0 19
47530: PUSH
47531: LD_VAR 0 20
47535: PUSH
47536: LD_VAR 0 21
47540: PUSH
47541: LD_VAR 0 22
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: PUSH
47554: LD_VAR 0 4
47558: PUSH
47559: LD_INT 1
47561: PLUS
47562: ARRAY
47563: ST_TO_ADDR
47564: GO 47631
47566: LD_INT 3
47568: DOUBLE
47569: EQUAL
47570: IFTRUE 47574
47572: GO 47630
47574: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47575: LD_ADDR_VAR 0 9
47579: PUSH
47580: LD_VAR 0 23
47584: PUSH
47585: LD_VAR 0 24
47589: PUSH
47590: LD_VAR 0 25
47594: PUSH
47595: LD_VAR 0 26
47599: PUSH
47600: LD_VAR 0 27
47604: PUSH
47605: LD_VAR 0 28
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: PUSH
47618: LD_VAR 0 4
47622: PUSH
47623: LD_INT 1
47625: PLUS
47626: ARRAY
47627: ST_TO_ADDR
47628: GO 47631
47630: POP
47631: GO 48186
47633: LD_INT 2
47635: DOUBLE
47636: EQUAL
47637: IFTRUE 47647
47639: LD_INT 3
47641: DOUBLE
47642: EQUAL
47643: IFTRUE 47647
47645: GO 47703
47647: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47648: LD_ADDR_VAR 0 9
47652: PUSH
47653: LD_VAR 0 29
47657: PUSH
47658: LD_VAR 0 30
47662: PUSH
47663: LD_VAR 0 31
47667: PUSH
47668: LD_VAR 0 32
47672: PUSH
47673: LD_VAR 0 33
47677: PUSH
47678: LD_VAR 0 34
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: PUSH
47691: LD_VAR 0 4
47695: PUSH
47696: LD_INT 1
47698: PLUS
47699: ARRAY
47700: ST_TO_ADDR
47701: GO 48186
47703: LD_INT 16
47705: DOUBLE
47706: EQUAL
47707: IFTRUE 47765
47709: LD_INT 17
47711: DOUBLE
47712: EQUAL
47713: IFTRUE 47765
47715: LD_INT 18
47717: DOUBLE
47718: EQUAL
47719: IFTRUE 47765
47721: LD_INT 19
47723: DOUBLE
47724: EQUAL
47725: IFTRUE 47765
47727: LD_INT 22
47729: DOUBLE
47730: EQUAL
47731: IFTRUE 47765
47733: LD_INT 20
47735: DOUBLE
47736: EQUAL
47737: IFTRUE 47765
47739: LD_INT 21
47741: DOUBLE
47742: EQUAL
47743: IFTRUE 47765
47745: LD_INT 23
47747: DOUBLE
47748: EQUAL
47749: IFTRUE 47765
47751: LD_INT 24
47753: DOUBLE
47754: EQUAL
47755: IFTRUE 47765
47757: LD_INT 25
47759: DOUBLE
47760: EQUAL
47761: IFTRUE 47765
47763: GO 47821
47765: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47766: LD_ADDR_VAR 0 9
47770: PUSH
47771: LD_VAR 0 35
47775: PUSH
47776: LD_VAR 0 36
47780: PUSH
47781: LD_VAR 0 37
47785: PUSH
47786: LD_VAR 0 38
47790: PUSH
47791: LD_VAR 0 39
47795: PUSH
47796: LD_VAR 0 40
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: PUSH
47809: LD_VAR 0 4
47813: PUSH
47814: LD_INT 1
47816: PLUS
47817: ARRAY
47818: ST_TO_ADDR
47819: GO 48186
47821: LD_INT 6
47823: DOUBLE
47824: EQUAL
47825: IFTRUE 47877
47827: LD_INT 7
47829: DOUBLE
47830: EQUAL
47831: IFTRUE 47877
47833: LD_INT 8
47835: DOUBLE
47836: EQUAL
47837: IFTRUE 47877
47839: LD_INT 13
47841: DOUBLE
47842: EQUAL
47843: IFTRUE 47877
47845: LD_INT 12
47847: DOUBLE
47848: EQUAL
47849: IFTRUE 47877
47851: LD_INT 15
47853: DOUBLE
47854: EQUAL
47855: IFTRUE 47877
47857: LD_INT 11
47859: DOUBLE
47860: EQUAL
47861: IFTRUE 47877
47863: LD_INT 14
47865: DOUBLE
47866: EQUAL
47867: IFTRUE 47877
47869: LD_INT 10
47871: DOUBLE
47872: EQUAL
47873: IFTRUE 47877
47875: GO 47933
47877: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
47878: LD_ADDR_VAR 0 9
47882: PUSH
47883: LD_VAR 0 41
47887: PUSH
47888: LD_VAR 0 42
47892: PUSH
47893: LD_VAR 0 43
47897: PUSH
47898: LD_VAR 0 44
47902: PUSH
47903: LD_VAR 0 45
47907: PUSH
47908: LD_VAR 0 46
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: PUSH
47921: LD_VAR 0 4
47925: PUSH
47926: LD_INT 1
47928: PLUS
47929: ARRAY
47930: ST_TO_ADDR
47931: GO 48186
47933: LD_INT 36
47935: DOUBLE
47936: EQUAL
47937: IFTRUE 47941
47939: GO 47997
47941: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
47942: LD_ADDR_VAR 0 9
47946: PUSH
47947: LD_VAR 0 47
47951: PUSH
47952: LD_VAR 0 48
47956: PUSH
47957: LD_VAR 0 49
47961: PUSH
47962: LD_VAR 0 50
47966: PUSH
47967: LD_VAR 0 51
47971: PUSH
47972: LD_VAR 0 52
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: PUSH
47985: LD_VAR 0 4
47989: PUSH
47990: LD_INT 1
47992: PLUS
47993: ARRAY
47994: ST_TO_ADDR
47995: GO 48186
47997: LD_INT 4
47999: DOUBLE
48000: EQUAL
48001: IFTRUE 48023
48003: LD_INT 5
48005: DOUBLE
48006: EQUAL
48007: IFTRUE 48023
48009: LD_INT 34
48011: DOUBLE
48012: EQUAL
48013: IFTRUE 48023
48015: LD_INT 37
48017: DOUBLE
48018: EQUAL
48019: IFTRUE 48023
48021: GO 48079
48023: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48024: LD_ADDR_VAR 0 9
48028: PUSH
48029: LD_VAR 0 53
48033: PUSH
48034: LD_VAR 0 54
48038: PUSH
48039: LD_VAR 0 55
48043: PUSH
48044: LD_VAR 0 56
48048: PUSH
48049: LD_VAR 0 57
48053: PUSH
48054: LD_VAR 0 58
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: PUSH
48067: LD_VAR 0 4
48071: PUSH
48072: LD_INT 1
48074: PLUS
48075: ARRAY
48076: ST_TO_ADDR
48077: GO 48186
48079: LD_INT 31
48081: DOUBLE
48082: EQUAL
48083: IFTRUE 48129
48085: LD_INT 32
48087: DOUBLE
48088: EQUAL
48089: IFTRUE 48129
48091: LD_INT 33
48093: DOUBLE
48094: EQUAL
48095: IFTRUE 48129
48097: LD_INT 27
48099: DOUBLE
48100: EQUAL
48101: IFTRUE 48129
48103: LD_INT 26
48105: DOUBLE
48106: EQUAL
48107: IFTRUE 48129
48109: LD_INT 28
48111: DOUBLE
48112: EQUAL
48113: IFTRUE 48129
48115: LD_INT 29
48117: DOUBLE
48118: EQUAL
48119: IFTRUE 48129
48121: LD_INT 30
48123: DOUBLE
48124: EQUAL
48125: IFTRUE 48129
48127: GO 48185
48129: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48130: LD_ADDR_VAR 0 9
48134: PUSH
48135: LD_VAR 0 59
48139: PUSH
48140: LD_VAR 0 60
48144: PUSH
48145: LD_VAR 0 61
48149: PUSH
48150: LD_VAR 0 62
48154: PUSH
48155: LD_VAR 0 63
48159: PUSH
48160: LD_VAR 0 64
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: PUSH
48173: LD_VAR 0 4
48177: PUSH
48178: LD_INT 1
48180: PLUS
48181: ARRAY
48182: ST_TO_ADDR
48183: GO 48186
48185: POP
// temp_list2 = [ ] ;
48186: LD_ADDR_VAR 0 10
48190: PUSH
48191: EMPTY
48192: ST_TO_ADDR
// for i in temp_list do
48193: LD_ADDR_VAR 0 8
48197: PUSH
48198: LD_VAR 0 9
48202: PUSH
48203: FOR_IN
48204: IFFALSE 48256
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48206: LD_ADDR_VAR 0 10
48210: PUSH
48211: LD_VAR 0 10
48215: PUSH
48216: LD_VAR 0 8
48220: PUSH
48221: LD_INT 1
48223: ARRAY
48224: PUSH
48225: LD_VAR 0 2
48229: PLUS
48230: PUSH
48231: LD_VAR 0 8
48235: PUSH
48236: LD_INT 2
48238: ARRAY
48239: PUSH
48240: LD_VAR 0 3
48244: PLUS
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: EMPTY
48251: LIST
48252: ADD
48253: ST_TO_ADDR
48254: GO 48203
48256: POP
48257: POP
// result = temp_list2 ;
48258: LD_ADDR_VAR 0 7
48262: PUSH
48263: LD_VAR 0 10
48267: ST_TO_ADDR
// end ;
48268: LD_VAR 0 7
48272: RET
// export function EnemyInRange ( unit , dist ) ; begin
48273: LD_INT 0
48275: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48276: LD_ADDR_VAR 0 3
48280: PUSH
48281: LD_VAR 0 1
48285: PPUSH
48286: CALL_OW 255
48290: PPUSH
48291: LD_VAR 0 1
48295: PPUSH
48296: CALL_OW 250
48300: PPUSH
48301: LD_VAR 0 1
48305: PPUSH
48306: CALL_OW 251
48310: PPUSH
48311: LD_VAR 0 2
48315: PPUSH
48316: CALL 21675 0 4
48320: PUSH
48321: LD_INT 4
48323: ARRAY
48324: ST_TO_ADDR
// end ;
48325: LD_VAR 0 3
48329: RET
// export function PlayerSeeMe ( unit ) ; begin
48330: LD_INT 0
48332: PPUSH
// result := See ( your_side , unit ) ;
48333: LD_ADDR_VAR 0 2
48337: PUSH
48338: LD_OWVAR 2
48342: PPUSH
48343: LD_VAR 0 1
48347: PPUSH
48348: CALL_OW 292
48352: ST_TO_ADDR
// end ;
48353: LD_VAR 0 2
48357: RET
// export function ReverseDir ( unit ) ; begin
48358: LD_INT 0
48360: PPUSH
// if not unit then
48361: LD_VAR 0 1
48365: NOT
48366: IFFALSE 48370
// exit ;
48368: GO 48393
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48370: LD_ADDR_VAR 0 2
48374: PUSH
48375: LD_VAR 0 1
48379: PPUSH
48380: CALL_OW 254
48384: PUSH
48385: LD_INT 3
48387: PLUS
48388: PUSH
48389: LD_INT 6
48391: MOD
48392: ST_TO_ADDR
// end ;
48393: LD_VAR 0 2
48397: RET
// export function ReverseArray ( array ) ; var i ; begin
48398: LD_INT 0
48400: PPUSH
48401: PPUSH
// if not array then
48402: LD_VAR 0 1
48406: NOT
48407: IFFALSE 48411
// exit ;
48409: GO 48466
// result := [ ] ;
48411: LD_ADDR_VAR 0 2
48415: PUSH
48416: EMPTY
48417: ST_TO_ADDR
// for i := array downto 1 do
48418: LD_ADDR_VAR 0 3
48422: PUSH
48423: DOUBLE
48424: LD_VAR 0 1
48428: INC
48429: ST_TO_ADDR
48430: LD_INT 1
48432: PUSH
48433: FOR_DOWNTO
48434: IFFALSE 48464
// result := Join ( result , array [ i ] ) ;
48436: LD_ADDR_VAR 0 2
48440: PUSH
48441: LD_VAR 0 2
48445: PPUSH
48446: LD_VAR 0 1
48450: PUSH
48451: LD_VAR 0 3
48455: ARRAY
48456: PPUSH
48457: CALL 53110 0 2
48461: ST_TO_ADDR
48462: GO 48433
48464: POP
48465: POP
// end ;
48466: LD_VAR 0 2
48470: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48471: LD_INT 0
48473: PPUSH
48474: PPUSH
48475: PPUSH
48476: PPUSH
48477: PPUSH
48478: PPUSH
// if not unit or not hexes then
48479: LD_VAR 0 1
48483: NOT
48484: PUSH
48485: LD_VAR 0 2
48489: NOT
48490: OR
48491: IFFALSE 48495
// exit ;
48493: GO 48618
// dist := 9999 ;
48495: LD_ADDR_VAR 0 5
48499: PUSH
48500: LD_INT 9999
48502: ST_TO_ADDR
// for i = 1 to hexes do
48503: LD_ADDR_VAR 0 4
48507: PUSH
48508: DOUBLE
48509: LD_INT 1
48511: DEC
48512: ST_TO_ADDR
48513: LD_VAR 0 2
48517: PUSH
48518: FOR_TO
48519: IFFALSE 48606
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48521: LD_ADDR_VAR 0 6
48525: PUSH
48526: LD_VAR 0 1
48530: PPUSH
48531: LD_VAR 0 2
48535: PUSH
48536: LD_VAR 0 4
48540: ARRAY
48541: PUSH
48542: LD_INT 1
48544: ARRAY
48545: PPUSH
48546: LD_VAR 0 2
48550: PUSH
48551: LD_VAR 0 4
48555: ARRAY
48556: PUSH
48557: LD_INT 2
48559: ARRAY
48560: PPUSH
48561: CALL_OW 297
48565: ST_TO_ADDR
// if tdist < dist then
48566: LD_VAR 0 6
48570: PUSH
48571: LD_VAR 0 5
48575: LESS
48576: IFFALSE 48604
// begin hex := hexes [ i ] ;
48578: LD_ADDR_VAR 0 8
48582: PUSH
48583: LD_VAR 0 2
48587: PUSH
48588: LD_VAR 0 4
48592: ARRAY
48593: ST_TO_ADDR
// dist := tdist ;
48594: LD_ADDR_VAR 0 5
48598: PUSH
48599: LD_VAR 0 6
48603: ST_TO_ADDR
// end ; end ;
48604: GO 48518
48606: POP
48607: POP
// result := hex ;
48608: LD_ADDR_VAR 0 3
48612: PUSH
48613: LD_VAR 0 8
48617: ST_TO_ADDR
// end ;
48618: LD_VAR 0 3
48622: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48623: LD_INT 0
48625: PPUSH
48626: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48627: LD_VAR 0 1
48631: NOT
48632: PUSH
48633: LD_VAR 0 1
48637: PUSH
48638: LD_INT 21
48640: PUSH
48641: LD_INT 2
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 23
48650: PUSH
48651: LD_INT 2
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PPUSH
48662: CALL_OW 69
48666: IN
48667: NOT
48668: OR
48669: IFFALSE 48673
// exit ;
48671: GO 48720
// for i = 1 to 3 do
48673: LD_ADDR_VAR 0 3
48677: PUSH
48678: DOUBLE
48679: LD_INT 1
48681: DEC
48682: ST_TO_ADDR
48683: LD_INT 3
48685: PUSH
48686: FOR_TO
48687: IFFALSE 48718
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48689: LD_VAR 0 1
48693: PPUSH
48694: CALL_OW 250
48698: PPUSH
48699: LD_VAR 0 1
48703: PPUSH
48704: CALL_OW 251
48708: PPUSH
48709: LD_INT 1
48711: PPUSH
48712: CALL_OW 453
48716: GO 48686
48718: POP
48719: POP
// end ;
48720: LD_VAR 0 2
48724: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48725: LD_INT 0
48727: PPUSH
48728: PPUSH
48729: PPUSH
48730: PPUSH
48731: PPUSH
48732: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
48733: LD_VAR 0 1
48737: NOT
48738: PUSH
48739: LD_VAR 0 2
48743: NOT
48744: OR
48745: PUSH
48746: LD_VAR 0 1
48750: PPUSH
48751: CALL_OW 314
48755: OR
48756: IFFALSE 48760
// exit ;
48758: GO 49227
// if GetLives ( i ) < 250 then
48760: LD_VAR 0 4
48764: PPUSH
48765: CALL_OW 256
48769: PUSH
48770: LD_INT 250
48772: LESS
48773: IFFALSE 48786
// begin ComAutodestruct ( i ) ;
48775: LD_VAR 0 4
48779: PPUSH
48780: CALL 48623 0 1
// exit ;
48784: GO 49227
// end ; x := GetX ( enemy_unit ) ;
48786: LD_ADDR_VAR 0 7
48790: PUSH
48791: LD_VAR 0 2
48795: PPUSH
48796: CALL_OW 250
48800: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48801: LD_ADDR_VAR 0 8
48805: PUSH
48806: LD_VAR 0 2
48810: PPUSH
48811: CALL_OW 251
48815: ST_TO_ADDR
// if not x or not y then
48816: LD_VAR 0 7
48820: NOT
48821: PUSH
48822: LD_VAR 0 8
48826: NOT
48827: OR
48828: IFFALSE 48832
// exit ;
48830: GO 49227
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48832: LD_ADDR_VAR 0 6
48836: PUSH
48837: LD_VAR 0 7
48841: PPUSH
48842: LD_INT 0
48844: PPUSH
48845: LD_INT 4
48847: PPUSH
48848: CALL_OW 272
48852: PUSH
48853: LD_VAR 0 8
48857: PPUSH
48858: LD_INT 0
48860: PPUSH
48861: LD_INT 4
48863: PPUSH
48864: CALL_OW 273
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_VAR 0 7
48877: PPUSH
48878: LD_INT 1
48880: PPUSH
48881: LD_INT 4
48883: PPUSH
48884: CALL_OW 272
48888: PUSH
48889: LD_VAR 0 8
48893: PPUSH
48894: LD_INT 1
48896: PPUSH
48897: LD_INT 4
48899: PPUSH
48900: CALL_OW 273
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_VAR 0 7
48913: PPUSH
48914: LD_INT 2
48916: PPUSH
48917: LD_INT 4
48919: PPUSH
48920: CALL_OW 272
48924: PUSH
48925: LD_VAR 0 8
48929: PPUSH
48930: LD_INT 2
48932: PPUSH
48933: LD_INT 4
48935: PPUSH
48936: CALL_OW 273
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_VAR 0 7
48949: PPUSH
48950: LD_INT 3
48952: PPUSH
48953: LD_INT 4
48955: PPUSH
48956: CALL_OW 272
48960: PUSH
48961: LD_VAR 0 8
48965: PPUSH
48966: LD_INT 3
48968: PPUSH
48969: LD_INT 4
48971: PPUSH
48972: CALL_OW 273
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_VAR 0 7
48985: PPUSH
48986: LD_INT 4
48988: PPUSH
48989: LD_INT 4
48991: PPUSH
48992: CALL_OW 272
48996: PUSH
48997: LD_VAR 0 8
49001: PPUSH
49002: LD_INT 4
49004: PPUSH
49005: LD_INT 4
49007: PPUSH
49008: CALL_OW 273
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_VAR 0 7
49021: PPUSH
49022: LD_INT 5
49024: PPUSH
49025: LD_INT 4
49027: PPUSH
49028: CALL_OW 272
49032: PUSH
49033: LD_VAR 0 8
49037: PPUSH
49038: LD_INT 5
49040: PPUSH
49041: LD_INT 4
49043: PPUSH
49044: CALL_OW 273
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: ST_TO_ADDR
// for i = tmp downto 1 do
49061: LD_ADDR_VAR 0 4
49065: PUSH
49066: DOUBLE
49067: LD_VAR 0 6
49071: INC
49072: ST_TO_ADDR
49073: LD_INT 1
49075: PUSH
49076: FOR_DOWNTO
49077: IFFALSE 49178
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49079: LD_VAR 0 6
49083: PUSH
49084: LD_VAR 0 4
49088: ARRAY
49089: PUSH
49090: LD_INT 1
49092: ARRAY
49093: PPUSH
49094: LD_VAR 0 6
49098: PUSH
49099: LD_VAR 0 4
49103: ARRAY
49104: PUSH
49105: LD_INT 2
49107: ARRAY
49108: PPUSH
49109: CALL_OW 488
49113: NOT
49114: PUSH
49115: LD_VAR 0 6
49119: PUSH
49120: LD_VAR 0 4
49124: ARRAY
49125: PUSH
49126: LD_INT 1
49128: ARRAY
49129: PPUSH
49130: LD_VAR 0 6
49134: PUSH
49135: LD_VAR 0 4
49139: ARRAY
49140: PUSH
49141: LD_INT 2
49143: ARRAY
49144: PPUSH
49145: CALL_OW 428
49149: PUSH
49150: LD_INT 0
49152: NONEQUAL
49153: OR
49154: IFFALSE 49176
// tmp := Delete ( tmp , i ) ;
49156: LD_ADDR_VAR 0 6
49160: PUSH
49161: LD_VAR 0 6
49165: PPUSH
49166: LD_VAR 0 4
49170: PPUSH
49171: CALL_OW 3
49175: ST_TO_ADDR
49176: GO 49076
49178: POP
49179: POP
// j := GetClosestHex ( unit , tmp ) ;
49180: LD_ADDR_VAR 0 5
49184: PUSH
49185: LD_VAR 0 1
49189: PPUSH
49190: LD_VAR 0 6
49194: PPUSH
49195: CALL 48471 0 2
49199: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49200: LD_VAR 0 1
49204: PPUSH
49205: LD_VAR 0 5
49209: PUSH
49210: LD_INT 1
49212: ARRAY
49213: PPUSH
49214: LD_VAR 0 5
49218: PUSH
49219: LD_INT 2
49221: ARRAY
49222: PPUSH
49223: CALL_OW 111
// end ;
49227: LD_VAR 0 3
49231: RET
// export function PrepareApemanSoldier ( ) ; begin
49232: LD_INT 0
49234: PPUSH
// uc_nation := 0 ;
49235: LD_ADDR_OWVAR 21
49239: PUSH
49240: LD_INT 0
49242: ST_TO_ADDR
// hc_sex := sex_male ;
49243: LD_ADDR_OWVAR 27
49247: PUSH
49248: LD_INT 1
49250: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
49251: LD_ADDR_OWVAR 28
49255: PUSH
49256: LD_INT 15
49258: ST_TO_ADDR
// hc_gallery :=  ;
49259: LD_ADDR_OWVAR 33
49263: PUSH
49264: LD_STRING 
49266: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49267: LD_ADDR_OWVAR 31
49271: PUSH
49272: LD_INT 0
49274: PPUSH
49275: LD_INT 3
49277: PPUSH
49278: CALL_OW 12
49282: PUSH
49283: LD_INT 0
49285: PPUSH
49286: LD_INT 3
49288: PPUSH
49289: CALL_OW 12
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: LD_INT 0
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: ST_TO_ADDR
// end ;
49306: LD_VAR 0 1
49310: RET
// export function PrepareApemanEngineer ( ) ; begin
49311: LD_INT 0
49313: PPUSH
// uc_nation := 0 ;
49314: LD_ADDR_OWVAR 21
49318: PUSH
49319: LD_INT 0
49321: ST_TO_ADDR
// hc_sex := sex_male ;
49322: LD_ADDR_OWVAR 27
49326: PUSH
49327: LD_INT 1
49329: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49330: LD_ADDR_OWVAR 28
49334: PUSH
49335: LD_INT 16
49337: ST_TO_ADDR
// hc_gallery :=  ;
49338: LD_ADDR_OWVAR 33
49342: PUSH
49343: LD_STRING 
49345: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49346: LD_ADDR_OWVAR 31
49350: PUSH
49351: LD_INT 0
49353: PPUSH
49354: LD_INT 3
49356: PPUSH
49357: CALL_OW 12
49361: PUSH
49362: LD_INT 0
49364: PPUSH
49365: LD_INT 3
49367: PPUSH
49368: CALL_OW 12
49372: PUSH
49373: LD_INT 0
49375: PUSH
49376: LD_INT 0
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: ST_TO_ADDR
// end ;
49385: LD_VAR 0 1
49389: RET
// export function PrepareApeman ( agressivity ) ; begin
49390: LD_INT 0
49392: PPUSH
// uc_side := 0 ;
49393: LD_ADDR_OWVAR 20
49397: PUSH
49398: LD_INT 0
49400: ST_TO_ADDR
// uc_nation := 0 ;
49401: LD_ADDR_OWVAR 21
49405: PUSH
49406: LD_INT 0
49408: ST_TO_ADDR
// hc_sex := sex_male ;
49409: LD_ADDR_OWVAR 27
49413: PUSH
49414: LD_INT 1
49416: ST_TO_ADDR
// hc_class := class_apeman ;
49417: LD_ADDR_OWVAR 28
49421: PUSH
49422: LD_INT 12
49424: ST_TO_ADDR
// hc_gallery :=  ;
49425: LD_ADDR_OWVAR 33
49429: PUSH
49430: LD_STRING 
49432: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49433: LD_ADDR_OWVAR 35
49437: PUSH
49438: LD_VAR 0 1
49442: NEG
49443: PPUSH
49444: LD_VAR 0 1
49448: PPUSH
49449: CALL_OW 12
49453: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49454: LD_ADDR_OWVAR 31
49458: PUSH
49459: LD_INT 0
49461: PPUSH
49462: LD_INT 3
49464: PPUSH
49465: CALL_OW 12
49469: PUSH
49470: LD_INT 0
49472: PPUSH
49473: LD_INT 3
49475: PPUSH
49476: CALL_OW 12
49480: PUSH
49481: LD_INT 0
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: ST_TO_ADDR
// end ;
49493: LD_VAR 0 2
49497: RET
// export function PrepareTiger ( agressivity ) ; begin
49498: LD_INT 0
49500: PPUSH
// uc_side := 0 ;
49501: LD_ADDR_OWVAR 20
49505: PUSH
49506: LD_INT 0
49508: ST_TO_ADDR
// uc_nation := 0 ;
49509: LD_ADDR_OWVAR 21
49513: PUSH
49514: LD_INT 0
49516: ST_TO_ADDR
// hc_class := class_tiger ;
49517: LD_ADDR_OWVAR 28
49521: PUSH
49522: LD_INT 14
49524: ST_TO_ADDR
// hc_gallery :=  ;
49525: LD_ADDR_OWVAR 33
49529: PUSH
49530: LD_STRING 
49532: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49533: LD_ADDR_OWVAR 35
49537: PUSH
49538: LD_VAR 0 1
49542: NEG
49543: PPUSH
49544: LD_VAR 0 1
49548: PPUSH
49549: CALL_OW 12
49553: ST_TO_ADDR
// end ;
49554: LD_VAR 0 2
49558: RET
// export function PrepareEnchidna ( ) ; begin
49559: LD_INT 0
49561: PPUSH
// uc_side := 0 ;
49562: LD_ADDR_OWVAR 20
49566: PUSH
49567: LD_INT 0
49569: ST_TO_ADDR
// uc_nation := 0 ;
49570: LD_ADDR_OWVAR 21
49574: PUSH
49575: LD_INT 0
49577: ST_TO_ADDR
// hc_class := class_baggie ;
49578: LD_ADDR_OWVAR 28
49582: PUSH
49583: LD_INT 13
49585: ST_TO_ADDR
// hc_gallery :=  ;
49586: LD_ADDR_OWVAR 33
49590: PUSH
49591: LD_STRING 
49593: ST_TO_ADDR
// end ;
49594: LD_VAR 0 1
49598: RET
// export function PrepareFrog ( ) ; begin
49599: LD_INT 0
49601: PPUSH
// uc_side := 0 ;
49602: LD_ADDR_OWVAR 20
49606: PUSH
49607: LD_INT 0
49609: ST_TO_ADDR
// uc_nation := 0 ;
49610: LD_ADDR_OWVAR 21
49614: PUSH
49615: LD_INT 0
49617: ST_TO_ADDR
// hc_class := class_frog ;
49618: LD_ADDR_OWVAR 28
49622: PUSH
49623: LD_INT 19
49625: ST_TO_ADDR
// hc_gallery :=  ;
49626: LD_ADDR_OWVAR 33
49630: PUSH
49631: LD_STRING 
49633: ST_TO_ADDR
// end ;
49634: LD_VAR 0 1
49638: RET
// export function PrepareFish ( ) ; begin
49639: LD_INT 0
49641: PPUSH
// uc_side := 0 ;
49642: LD_ADDR_OWVAR 20
49646: PUSH
49647: LD_INT 0
49649: ST_TO_ADDR
// uc_nation := 0 ;
49650: LD_ADDR_OWVAR 21
49654: PUSH
49655: LD_INT 0
49657: ST_TO_ADDR
// hc_class := class_fish ;
49658: LD_ADDR_OWVAR 28
49662: PUSH
49663: LD_INT 20
49665: ST_TO_ADDR
// hc_gallery :=  ;
49666: LD_ADDR_OWVAR 33
49670: PUSH
49671: LD_STRING 
49673: ST_TO_ADDR
// end ;
49674: LD_VAR 0 1
49678: RET
// export function PrepareBird ( ) ; begin
49679: LD_INT 0
49681: PPUSH
// uc_side := 0 ;
49682: LD_ADDR_OWVAR 20
49686: PUSH
49687: LD_INT 0
49689: ST_TO_ADDR
// uc_nation := 0 ;
49690: LD_ADDR_OWVAR 21
49694: PUSH
49695: LD_INT 0
49697: ST_TO_ADDR
// hc_class := class_phororhacos ;
49698: LD_ADDR_OWVAR 28
49702: PUSH
49703: LD_INT 18
49705: ST_TO_ADDR
// hc_gallery :=  ;
49706: LD_ADDR_OWVAR 33
49710: PUSH
49711: LD_STRING 
49713: ST_TO_ADDR
// end ;
49714: LD_VAR 0 1
49718: RET
// export function PrepareHorse ( ) ; begin
49719: LD_INT 0
49721: PPUSH
// uc_side := 0 ;
49722: LD_ADDR_OWVAR 20
49726: PUSH
49727: LD_INT 0
49729: ST_TO_ADDR
// uc_nation := 0 ;
49730: LD_ADDR_OWVAR 21
49734: PUSH
49735: LD_INT 0
49737: ST_TO_ADDR
// hc_class := class_horse ;
49738: LD_ADDR_OWVAR 28
49742: PUSH
49743: LD_INT 21
49745: ST_TO_ADDR
// hc_gallery :=  ;
49746: LD_ADDR_OWVAR 33
49750: PUSH
49751: LD_STRING 
49753: ST_TO_ADDR
// end ;
49754: LD_VAR 0 1
49758: RET
// export function PrepareMastodont ( ) ; begin
49759: LD_INT 0
49761: PPUSH
// uc_side := 0 ;
49762: LD_ADDR_OWVAR 20
49766: PUSH
49767: LD_INT 0
49769: ST_TO_ADDR
// uc_nation := 0 ;
49770: LD_ADDR_OWVAR 21
49774: PUSH
49775: LD_INT 0
49777: ST_TO_ADDR
// vc_chassis := class_mastodont ;
49778: LD_ADDR_OWVAR 37
49782: PUSH
49783: LD_INT 31
49785: ST_TO_ADDR
// vc_control := control_rider ;
49786: LD_ADDR_OWVAR 38
49790: PUSH
49791: LD_INT 4
49793: ST_TO_ADDR
// end ;
49794: LD_VAR 0 1
49798: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49799: LD_INT 0
49801: PPUSH
49802: PPUSH
49803: PPUSH
// uc_side = 0 ;
49804: LD_ADDR_OWVAR 20
49808: PUSH
49809: LD_INT 0
49811: ST_TO_ADDR
// uc_nation = 0 ;
49812: LD_ADDR_OWVAR 21
49816: PUSH
49817: LD_INT 0
49819: ST_TO_ADDR
// InitHc_All ( ) ;
49820: CALL_OW 584
// InitVc ;
49824: CALL_OW 20
// if mastodonts then
49828: LD_VAR 0 6
49832: IFFALSE 49899
// for i = 1 to mastodonts do
49834: LD_ADDR_VAR 0 11
49838: PUSH
49839: DOUBLE
49840: LD_INT 1
49842: DEC
49843: ST_TO_ADDR
49844: LD_VAR 0 6
49848: PUSH
49849: FOR_TO
49850: IFFALSE 49897
// begin vc_chassis := 31 ;
49852: LD_ADDR_OWVAR 37
49856: PUSH
49857: LD_INT 31
49859: ST_TO_ADDR
// vc_control := control_rider ;
49860: LD_ADDR_OWVAR 38
49864: PUSH
49865: LD_INT 4
49867: ST_TO_ADDR
// animal := CreateVehicle ;
49868: LD_ADDR_VAR 0 12
49872: PUSH
49873: CALL_OW 45
49877: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49878: LD_VAR 0 12
49882: PPUSH
49883: LD_VAR 0 8
49887: PPUSH
49888: LD_INT 0
49890: PPUSH
49891: CALL 52027 0 3
// end ;
49895: GO 49849
49897: POP
49898: POP
// if horses then
49899: LD_VAR 0 5
49903: IFFALSE 49970
// for i = 1 to horses do
49905: LD_ADDR_VAR 0 11
49909: PUSH
49910: DOUBLE
49911: LD_INT 1
49913: DEC
49914: ST_TO_ADDR
49915: LD_VAR 0 5
49919: PUSH
49920: FOR_TO
49921: IFFALSE 49968
// begin hc_class := 21 ;
49923: LD_ADDR_OWVAR 28
49927: PUSH
49928: LD_INT 21
49930: ST_TO_ADDR
// hc_gallery :=  ;
49931: LD_ADDR_OWVAR 33
49935: PUSH
49936: LD_STRING 
49938: ST_TO_ADDR
// animal := CreateHuman ;
49939: LD_ADDR_VAR 0 12
49943: PUSH
49944: CALL_OW 44
49948: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49949: LD_VAR 0 12
49953: PPUSH
49954: LD_VAR 0 8
49958: PPUSH
49959: LD_INT 0
49961: PPUSH
49962: CALL 52027 0 3
// end ;
49966: GO 49920
49968: POP
49969: POP
// if birds then
49970: LD_VAR 0 1
49974: IFFALSE 50041
// for i = 1 to birds do
49976: LD_ADDR_VAR 0 11
49980: PUSH
49981: DOUBLE
49982: LD_INT 1
49984: DEC
49985: ST_TO_ADDR
49986: LD_VAR 0 1
49990: PUSH
49991: FOR_TO
49992: IFFALSE 50039
// begin hc_class = 18 ;
49994: LD_ADDR_OWVAR 28
49998: PUSH
49999: LD_INT 18
50001: ST_TO_ADDR
// hc_gallery =  ;
50002: LD_ADDR_OWVAR 33
50006: PUSH
50007: LD_STRING 
50009: ST_TO_ADDR
// animal := CreateHuman ;
50010: LD_ADDR_VAR 0 12
50014: PUSH
50015: CALL_OW 44
50019: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50020: LD_VAR 0 12
50024: PPUSH
50025: LD_VAR 0 8
50029: PPUSH
50030: LD_INT 0
50032: PPUSH
50033: CALL 52027 0 3
// end ;
50037: GO 49991
50039: POP
50040: POP
// if tigers then
50041: LD_VAR 0 2
50045: IFFALSE 50129
// for i = 1 to tigers do
50047: LD_ADDR_VAR 0 11
50051: PUSH
50052: DOUBLE
50053: LD_INT 1
50055: DEC
50056: ST_TO_ADDR
50057: LD_VAR 0 2
50061: PUSH
50062: FOR_TO
50063: IFFALSE 50127
// begin hc_class = class_tiger ;
50065: LD_ADDR_OWVAR 28
50069: PUSH
50070: LD_INT 14
50072: ST_TO_ADDR
// hc_gallery =  ;
50073: LD_ADDR_OWVAR 33
50077: PUSH
50078: LD_STRING 
50080: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50081: LD_ADDR_OWVAR 35
50085: PUSH
50086: LD_INT 7
50088: NEG
50089: PPUSH
50090: LD_INT 7
50092: PPUSH
50093: CALL_OW 12
50097: ST_TO_ADDR
// animal := CreateHuman ;
50098: LD_ADDR_VAR 0 12
50102: PUSH
50103: CALL_OW 44
50107: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50108: LD_VAR 0 12
50112: PPUSH
50113: LD_VAR 0 8
50117: PPUSH
50118: LD_INT 0
50120: PPUSH
50121: CALL 52027 0 3
// end ;
50125: GO 50062
50127: POP
50128: POP
// if apemans then
50129: LD_VAR 0 3
50133: IFFALSE 50256
// for i = 1 to apemans do
50135: LD_ADDR_VAR 0 11
50139: PUSH
50140: DOUBLE
50141: LD_INT 1
50143: DEC
50144: ST_TO_ADDR
50145: LD_VAR 0 3
50149: PUSH
50150: FOR_TO
50151: IFFALSE 50254
// begin hc_class = class_apeman ;
50153: LD_ADDR_OWVAR 28
50157: PUSH
50158: LD_INT 12
50160: ST_TO_ADDR
// hc_gallery =  ;
50161: LD_ADDR_OWVAR 33
50165: PUSH
50166: LD_STRING 
50168: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50169: LD_ADDR_OWVAR 35
50173: PUSH
50174: LD_INT 2
50176: NEG
50177: PPUSH
50178: LD_INT 2
50180: PPUSH
50181: CALL_OW 12
50185: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50186: LD_ADDR_OWVAR 31
50190: PUSH
50191: LD_INT 1
50193: PPUSH
50194: LD_INT 3
50196: PPUSH
50197: CALL_OW 12
50201: PUSH
50202: LD_INT 1
50204: PPUSH
50205: LD_INT 3
50207: PPUSH
50208: CALL_OW 12
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: ST_TO_ADDR
// animal := CreateHuman ;
50225: LD_ADDR_VAR 0 12
50229: PUSH
50230: CALL_OW 44
50234: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50235: LD_VAR 0 12
50239: PPUSH
50240: LD_VAR 0 8
50244: PPUSH
50245: LD_INT 0
50247: PPUSH
50248: CALL 52027 0 3
// end ;
50252: GO 50150
50254: POP
50255: POP
// if enchidnas then
50256: LD_VAR 0 4
50260: IFFALSE 50327
// for i = 1 to enchidnas do
50262: LD_ADDR_VAR 0 11
50266: PUSH
50267: DOUBLE
50268: LD_INT 1
50270: DEC
50271: ST_TO_ADDR
50272: LD_VAR 0 4
50276: PUSH
50277: FOR_TO
50278: IFFALSE 50325
// begin hc_class = 13 ;
50280: LD_ADDR_OWVAR 28
50284: PUSH
50285: LD_INT 13
50287: ST_TO_ADDR
// hc_gallery =  ;
50288: LD_ADDR_OWVAR 33
50292: PUSH
50293: LD_STRING 
50295: ST_TO_ADDR
// animal := CreateHuman ;
50296: LD_ADDR_VAR 0 12
50300: PUSH
50301: CALL_OW 44
50305: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50306: LD_VAR 0 12
50310: PPUSH
50311: LD_VAR 0 8
50315: PPUSH
50316: LD_INT 0
50318: PPUSH
50319: CALL 52027 0 3
// end ;
50323: GO 50277
50325: POP
50326: POP
// if fishes then
50327: LD_VAR 0 7
50331: IFFALSE 50398
// for i = 1 to fishes do
50333: LD_ADDR_VAR 0 11
50337: PUSH
50338: DOUBLE
50339: LD_INT 1
50341: DEC
50342: ST_TO_ADDR
50343: LD_VAR 0 7
50347: PUSH
50348: FOR_TO
50349: IFFALSE 50396
// begin hc_class = 20 ;
50351: LD_ADDR_OWVAR 28
50355: PUSH
50356: LD_INT 20
50358: ST_TO_ADDR
// hc_gallery =  ;
50359: LD_ADDR_OWVAR 33
50363: PUSH
50364: LD_STRING 
50366: ST_TO_ADDR
// animal := CreateHuman ;
50367: LD_ADDR_VAR 0 12
50371: PUSH
50372: CALL_OW 44
50376: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50377: LD_VAR 0 12
50381: PPUSH
50382: LD_VAR 0 9
50386: PPUSH
50387: LD_INT 0
50389: PPUSH
50390: CALL 52027 0 3
// end ;
50394: GO 50348
50396: POP
50397: POP
// end ;
50398: LD_VAR 0 10
50402: RET
// export function WantHeal ( sci , unit ) ; begin
50403: LD_INT 0
50405: PPUSH
// if GetTaskList ( sci ) > 0 then
50406: LD_VAR 0 1
50410: PPUSH
50411: CALL_OW 437
50415: PUSH
50416: LD_INT 0
50418: GREATER
50419: IFFALSE 50489
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50421: LD_VAR 0 1
50425: PPUSH
50426: CALL_OW 437
50430: PUSH
50431: LD_INT 1
50433: ARRAY
50434: PUSH
50435: LD_INT 1
50437: ARRAY
50438: PUSH
50439: LD_STRING l
50441: EQUAL
50442: PUSH
50443: LD_VAR 0 1
50447: PPUSH
50448: CALL_OW 437
50452: PUSH
50453: LD_INT 1
50455: ARRAY
50456: PUSH
50457: LD_INT 4
50459: ARRAY
50460: PUSH
50461: LD_VAR 0 2
50465: EQUAL
50466: AND
50467: IFFALSE 50479
// result := true else
50469: LD_ADDR_VAR 0 3
50473: PUSH
50474: LD_INT 1
50476: ST_TO_ADDR
50477: GO 50487
// result := false ;
50479: LD_ADDR_VAR 0 3
50483: PUSH
50484: LD_INT 0
50486: ST_TO_ADDR
// end else
50487: GO 50497
// result := false ;
50489: LD_ADDR_VAR 0 3
50493: PUSH
50494: LD_INT 0
50496: ST_TO_ADDR
// end ;
50497: LD_VAR 0 3
50501: RET
// export function HealTarget ( sci ) ; begin
50502: LD_INT 0
50504: PPUSH
// if not sci then
50505: LD_VAR 0 1
50509: NOT
50510: IFFALSE 50514
// exit ;
50512: GO 50579
// result := 0 ;
50514: LD_ADDR_VAR 0 2
50518: PUSH
50519: LD_INT 0
50521: ST_TO_ADDR
// if GetTaskList ( sci ) then
50522: LD_VAR 0 1
50526: PPUSH
50527: CALL_OW 437
50531: IFFALSE 50579
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50533: LD_VAR 0 1
50537: PPUSH
50538: CALL_OW 437
50542: PUSH
50543: LD_INT 1
50545: ARRAY
50546: PUSH
50547: LD_INT 1
50549: ARRAY
50550: PUSH
50551: LD_STRING l
50553: EQUAL
50554: IFFALSE 50579
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50556: LD_ADDR_VAR 0 2
50560: PUSH
50561: LD_VAR 0 1
50565: PPUSH
50566: CALL_OW 437
50570: PUSH
50571: LD_INT 1
50573: ARRAY
50574: PUSH
50575: LD_INT 4
50577: ARRAY
50578: ST_TO_ADDR
// end ;
50579: LD_VAR 0 2
50583: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50584: LD_INT 0
50586: PPUSH
50587: PPUSH
50588: PPUSH
50589: PPUSH
// if not base_units then
50590: LD_VAR 0 1
50594: NOT
50595: IFFALSE 50599
// exit ;
50597: GO 50686
// result := false ;
50599: LD_ADDR_VAR 0 2
50603: PUSH
50604: LD_INT 0
50606: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50607: LD_ADDR_VAR 0 5
50611: PUSH
50612: LD_VAR 0 1
50616: PPUSH
50617: LD_INT 21
50619: PUSH
50620: LD_INT 3
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PPUSH
50627: CALL_OW 72
50631: ST_TO_ADDR
// if not tmp then
50632: LD_VAR 0 5
50636: NOT
50637: IFFALSE 50641
// exit ;
50639: GO 50686
// for i in tmp do
50641: LD_ADDR_VAR 0 3
50645: PUSH
50646: LD_VAR 0 5
50650: PUSH
50651: FOR_IN
50652: IFFALSE 50684
// begin result := EnemyInRange ( i , 22 ) ;
50654: LD_ADDR_VAR 0 2
50658: PUSH
50659: LD_VAR 0 3
50663: PPUSH
50664: LD_INT 22
50666: PPUSH
50667: CALL 48273 0 2
50671: ST_TO_ADDR
// if result then
50672: LD_VAR 0 2
50676: IFFALSE 50682
// exit ;
50678: POP
50679: POP
50680: GO 50686
// end ;
50682: GO 50651
50684: POP
50685: POP
// end ;
50686: LD_VAR 0 2
50690: RET
// export function FilterByTag ( units , tag ) ; begin
50691: LD_INT 0
50693: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
50694: LD_ADDR_VAR 0 3
50698: PUSH
50699: LD_VAR 0 1
50703: PPUSH
50704: LD_INT 120
50706: PUSH
50707: LD_VAR 0 2
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PPUSH
50716: CALL_OW 72
50720: ST_TO_ADDR
// end ;
50721: LD_VAR 0 3
50725: RET
// export function IsDriver ( un ) ; begin
50726: LD_INT 0
50728: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50729: LD_ADDR_VAR 0 2
50733: PUSH
50734: LD_VAR 0 1
50738: PUSH
50739: LD_INT 55
50741: PUSH
50742: EMPTY
50743: LIST
50744: PPUSH
50745: CALL_OW 69
50749: IN
50750: ST_TO_ADDR
// end ;
50751: LD_VAR 0 2
50755: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50756: LD_INT 0
50758: PPUSH
50759: PPUSH
// list := [ ] ;
50760: LD_ADDR_VAR 0 5
50764: PUSH
50765: EMPTY
50766: ST_TO_ADDR
// case d of 0 :
50767: LD_VAR 0 3
50771: PUSH
50772: LD_INT 0
50774: DOUBLE
50775: EQUAL
50776: IFTRUE 50780
50778: GO 50913
50780: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50781: LD_ADDR_VAR 0 5
50785: PUSH
50786: LD_VAR 0 1
50790: PUSH
50791: LD_INT 4
50793: MINUS
50794: PUSH
50795: LD_VAR 0 2
50799: PUSH
50800: LD_INT 4
50802: MINUS
50803: PUSH
50804: LD_INT 2
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: LIST
50811: PUSH
50812: LD_VAR 0 1
50816: PUSH
50817: LD_INT 3
50819: MINUS
50820: PUSH
50821: LD_VAR 0 2
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: LIST
50833: PUSH
50834: LD_VAR 0 1
50838: PUSH
50839: LD_INT 4
50841: PLUS
50842: PUSH
50843: LD_VAR 0 2
50847: PUSH
50848: LD_INT 4
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: LIST
50855: PUSH
50856: LD_VAR 0 1
50860: PUSH
50861: LD_INT 3
50863: PLUS
50864: PUSH
50865: LD_VAR 0 2
50869: PUSH
50870: LD_INT 3
50872: PLUS
50873: PUSH
50874: LD_INT 5
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: LIST
50881: PUSH
50882: LD_VAR 0 1
50886: PUSH
50887: LD_VAR 0 2
50891: PUSH
50892: LD_INT 4
50894: PLUS
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: LIST
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: ST_TO_ADDR
// end ; 1 :
50911: GO 51611
50913: LD_INT 1
50915: DOUBLE
50916: EQUAL
50917: IFTRUE 50921
50919: GO 51054
50921: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50922: LD_ADDR_VAR 0 5
50926: PUSH
50927: LD_VAR 0 1
50931: PUSH
50932: LD_VAR 0 2
50936: PUSH
50937: LD_INT 4
50939: MINUS
50940: PUSH
50941: LD_INT 3
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: LIST
50948: PUSH
50949: LD_VAR 0 1
50953: PUSH
50954: LD_INT 3
50956: MINUS
50957: PUSH
50958: LD_VAR 0 2
50962: PUSH
50963: LD_INT 3
50965: MINUS
50966: PUSH
50967: LD_INT 2
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: LIST
50974: PUSH
50975: LD_VAR 0 1
50979: PUSH
50980: LD_INT 4
50982: MINUS
50983: PUSH
50984: LD_VAR 0 2
50988: PUSH
50989: LD_INT 1
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: LIST
50996: PUSH
50997: LD_VAR 0 1
51001: PUSH
51002: LD_VAR 0 2
51006: PUSH
51007: LD_INT 3
51009: PLUS
51010: PUSH
51011: LD_INT 0
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: LIST
51018: PUSH
51019: LD_VAR 0 1
51023: PUSH
51024: LD_INT 4
51026: PLUS
51027: PUSH
51028: LD_VAR 0 2
51032: PUSH
51033: LD_INT 4
51035: PLUS
51036: PUSH
51037: LD_INT 5
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: LIST
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: ST_TO_ADDR
// end ; 2 :
51052: GO 51611
51054: LD_INT 2
51056: DOUBLE
51057: EQUAL
51058: IFTRUE 51062
51060: GO 51191
51062: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51063: LD_ADDR_VAR 0 5
51067: PUSH
51068: LD_VAR 0 1
51072: PUSH
51073: LD_VAR 0 2
51077: PUSH
51078: LD_INT 3
51080: MINUS
51081: PUSH
51082: LD_INT 3
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: LIST
51089: PUSH
51090: LD_VAR 0 1
51094: PUSH
51095: LD_INT 4
51097: PLUS
51098: PUSH
51099: LD_VAR 0 2
51103: PUSH
51104: LD_INT 4
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: LIST
51111: PUSH
51112: LD_VAR 0 1
51116: PUSH
51117: LD_VAR 0 2
51121: PUSH
51122: LD_INT 4
51124: PLUS
51125: PUSH
51126: LD_INT 0
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: LIST
51133: PUSH
51134: LD_VAR 0 1
51138: PUSH
51139: LD_INT 3
51141: MINUS
51142: PUSH
51143: LD_VAR 0 2
51147: PUSH
51148: LD_INT 1
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: LIST
51155: PUSH
51156: LD_VAR 0 1
51160: PUSH
51161: LD_INT 4
51163: MINUS
51164: PUSH
51165: LD_VAR 0 2
51169: PUSH
51170: LD_INT 4
51172: MINUS
51173: PUSH
51174: LD_INT 2
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: LIST
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: ST_TO_ADDR
// end ; 3 :
51189: GO 51611
51191: LD_INT 3
51193: DOUBLE
51194: EQUAL
51195: IFTRUE 51199
51197: GO 51332
51199: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51200: LD_ADDR_VAR 0 5
51204: PUSH
51205: LD_VAR 0 1
51209: PUSH
51210: LD_INT 3
51212: PLUS
51213: PUSH
51214: LD_VAR 0 2
51218: PUSH
51219: LD_INT 4
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: LIST
51226: PUSH
51227: LD_VAR 0 1
51231: PUSH
51232: LD_INT 4
51234: PLUS
51235: PUSH
51236: LD_VAR 0 2
51240: PUSH
51241: LD_INT 4
51243: PLUS
51244: PUSH
51245: LD_INT 5
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: LIST
51252: PUSH
51253: LD_VAR 0 1
51257: PUSH
51258: LD_INT 4
51260: MINUS
51261: PUSH
51262: LD_VAR 0 2
51266: PUSH
51267: LD_INT 1
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: LIST
51274: PUSH
51275: LD_VAR 0 1
51279: PUSH
51280: LD_VAR 0 2
51284: PUSH
51285: LD_INT 4
51287: MINUS
51288: PUSH
51289: LD_INT 3
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: LIST
51296: PUSH
51297: LD_VAR 0 1
51301: PUSH
51302: LD_INT 3
51304: MINUS
51305: PUSH
51306: LD_VAR 0 2
51310: PUSH
51311: LD_INT 3
51313: MINUS
51314: PUSH
51315: LD_INT 2
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: LIST
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: ST_TO_ADDR
// end ; 4 :
51330: GO 51611
51332: LD_INT 4
51334: DOUBLE
51335: EQUAL
51336: IFTRUE 51340
51338: GO 51473
51340: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51341: LD_ADDR_VAR 0 5
51345: PUSH
51346: LD_VAR 0 1
51350: PUSH
51351: LD_VAR 0 2
51355: PUSH
51356: LD_INT 4
51358: PLUS
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: LIST
51367: PUSH
51368: LD_VAR 0 1
51372: PUSH
51373: LD_INT 3
51375: PLUS
51376: PUSH
51377: LD_VAR 0 2
51381: PUSH
51382: LD_INT 3
51384: PLUS
51385: PUSH
51386: LD_INT 5
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: LIST
51393: PUSH
51394: LD_VAR 0 1
51398: PUSH
51399: LD_INT 4
51401: PLUS
51402: PUSH
51403: LD_VAR 0 2
51407: PUSH
51408: LD_INT 4
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: LIST
51415: PUSH
51416: LD_VAR 0 1
51420: PUSH
51421: LD_VAR 0 2
51425: PUSH
51426: LD_INT 3
51428: MINUS
51429: PUSH
51430: LD_INT 3
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: LIST
51437: PUSH
51438: LD_VAR 0 1
51442: PUSH
51443: LD_INT 4
51445: MINUS
51446: PUSH
51447: LD_VAR 0 2
51451: PUSH
51452: LD_INT 4
51454: MINUS
51455: PUSH
51456: LD_INT 2
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: LIST
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: ST_TO_ADDR
// end ; 5 :
51471: GO 51611
51473: LD_INT 5
51475: DOUBLE
51476: EQUAL
51477: IFTRUE 51481
51479: GO 51610
51481: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51482: LD_ADDR_VAR 0 5
51486: PUSH
51487: LD_VAR 0 1
51491: PUSH
51492: LD_INT 4
51494: MINUS
51495: PUSH
51496: LD_VAR 0 2
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: LIST
51508: PUSH
51509: LD_VAR 0 1
51513: PUSH
51514: LD_VAR 0 2
51518: PUSH
51519: LD_INT 4
51521: MINUS
51522: PUSH
51523: LD_INT 3
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: LIST
51530: PUSH
51531: LD_VAR 0 1
51535: PUSH
51536: LD_INT 4
51538: PLUS
51539: PUSH
51540: LD_VAR 0 2
51544: PUSH
51545: LD_INT 4
51547: PLUS
51548: PUSH
51549: LD_INT 5
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: LIST
51556: PUSH
51557: LD_VAR 0 1
51561: PUSH
51562: LD_INT 3
51564: PLUS
51565: PUSH
51566: LD_VAR 0 2
51570: PUSH
51571: LD_INT 4
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: LIST
51578: PUSH
51579: LD_VAR 0 1
51583: PUSH
51584: LD_VAR 0 2
51588: PUSH
51589: LD_INT 3
51591: PLUS
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: LIST
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: ST_TO_ADDR
// end ; end ;
51608: GO 51611
51610: POP
// result := list ;
51611: LD_ADDR_VAR 0 4
51615: PUSH
51616: LD_VAR 0 5
51620: ST_TO_ADDR
// end ;
51621: LD_VAR 0 4
51625: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51626: LD_INT 0
51628: PPUSH
51629: PPUSH
51630: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51631: LD_VAR 0 1
51635: NOT
51636: PUSH
51637: LD_VAR 0 2
51641: PUSH
51642: LD_INT 1
51644: PUSH
51645: LD_INT 2
51647: PUSH
51648: LD_INT 3
51650: PUSH
51651: LD_INT 4
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: IN
51660: NOT
51661: OR
51662: IFFALSE 51666
// exit ;
51664: GO 51749
// tmp := [ ] ;
51666: LD_ADDR_VAR 0 5
51670: PUSH
51671: EMPTY
51672: ST_TO_ADDR
// for i in units do
51673: LD_ADDR_VAR 0 4
51677: PUSH
51678: LD_VAR 0 1
51682: PUSH
51683: FOR_IN
51684: IFFALSE 51718
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
51686: LD_ADDR_VAR 0 5
51690: PUSH
51691: LD_VAR 0 5
51695: PPUSH
51696: LD_VAR 0 4
51700: PPUSH
51701: LD_VAR 0 2
51705: PPUSH
51706: CALL_OW 259
51710: PPUSH
51711: CALL 53110 0 2
51715: ST_TO_ADDR
51716: GO 51683
51718: POP
51719: POP
// if not tmp then
51720: LD_VAR 0 5
51724: NOT
51725: IFFALSE 51729
// exit ;
51727: GO 51749
// result := SortListByListDesc ( units , tmp ) ;
51729: LD_ADDR_VAR 0 3
51733: PUSH
51734: LD_VAR 0 1
51738: PPUSH
51739: LD_VAR 0 5
51743: PPUSH
51744: CALL_OW 77
51748: ST_TO_ADDR
// end ;
51749: LD_VAR 0 3
51753: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51754: LD_INT 0
51756: PPUSH
51757: PPUSH
51758: PPUSH
// result := false ;
51759: LD_ADDR_VAR 0 3
51763: PUSH
51764: LD_INT 0
51766: ST_TO_ADDR
// if not building then
51767: LD_VAR 0 2
51771: NOT
51772: IFFALSE 51776
// exit ;
51774: GO 51914
// x := GetX ( building ) ;
51776: LD_ADDR_VAR 0 4
51780: PUSH
51781: LD_VAR 0 2
51785: PPUSH
51786: CALL_OW 250
51790: ST_TO_ADDR
// y := GetY ( building ) ;
51791: LD_ADDR_VAR 0 5
51795: PUSH
51796: LD_VAR 0 2
51800: PPUSH
51801: CALL_OW 251
51805: ST_TO_ADDR
// if not x or not y then
51806: LD_VAR 0 4
51810: NOT
51811: PUSH
51812: LD_VAR 0 5
51816: NOT
51817: OR
51818: IFFALSE 51822
// exit ;
51820: GO 51914
// if GetTaskList ( unit ) then
51822: LD_VAR 0 1
51826: PPUSH
51827: CALL_OW 437
51831: IFFALSE 51914
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51833: LD_STRING e
51835: PUSH
51836: LD_VAR 0 1
51840: PPUSH
51841: CALL_OW 437
51845: PUSH
51846: LD_INT 1
51848: ARRAY
51849: PUSH
51850: LD_INT 1
51852: ARRAY
51853: EQUAL
51854: PUSH
51855: LD_VAR 0 4
51859: PUSH
51860: LD_VAR 0 1
51864: PPUSH
51865: CALL_OW 437
51869: PUSH
51870: LD_INT 1
51872: ARRAY
51873: PUSH
51874: LD_INT 2
51876: ARRAY
51877: EQUAL
51878: AND
51879: PUSH
51880: LD_VAR 0 5
51884: PUSH
51885: LD_VAR 0 1
51889: PPUSH
51890: CALL_OW 437
51894: PUSH
51895: LD_INT 1
51897: ARRAY
51898: PUSH
51899: LD_INT 3
51901: ARRAY
51902: EQUAL
51903: AND
51904: IFFALSE 51914
// result := true end ;
51906: LD_ADDR_VAR 0 3
51910: PUSH
51911: LD_INT 1
51913: ST_TO_ADDR
// end ;
51914: LD_VAR 0 3
51918: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
51919: LD_INT 0
51921: PPUSH
// result := false ;
51922: LD_ADDR_VAR 0 4
51926: PUSH
51927: LD_INT 0
51929: ST_TO_ADDR
// if GetTaskList ( unit ) then
51930: LD_VAR 0 1
51934: PPUSH
51935: CALL_OW 437
51939: IFFALSE 52022
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51941: LD_STRING M
51943: PUSH
51944: LD_VAR 0 1
51948: PPUSH
51949: CALL_OW 437
51953: PUSH
51954: LD_INT 1
51956: ARRAY
51957: PUSH
51958: LD_INT 1
51960: ARRAY
51961: EQUAL
51962: PUSH
51963: LD_VAR 0 2
51967: PUSH
51968: LD_VAR 0 1
51972: PPUSH
51973: CALL_OW 437
51977: PUSH
51978: LD_INT 1
51980: ARRAY
51981: PUSH
51982: LD_INT 2
51984: ARRAY
51985: EQUAL
51986: AND
51987: PUSH
51988: LD_VAR 0 3
51992: PUSH
51993: LD_VAR 0 1
51997: PPUSH
51998: CALL_OW 437
52002: PUSH
52003: LD_INT 1
52005: ARRAY
52006: PUSH
52007: LD_INT 3
52009: ARRAY
52010: EQUAL
52011: AND
52012: IFFALSE 52022
// result := true ;
52014: LD_ADDR_VAR 0 4
52018: PUSH
52019: LD_INT 1
52021: ST_TO_ADDR
// end ; end ;
52022: LD_VAR 0 4
52026: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52027: LD_INT 0
52029: PPUSH
52030: PPUSH
52031: PPUSH
52032: PPUSH
// if not unit or not area then
52033: LD_VAR 0 1
52037: NOT
52038: PUSH
52039: LD_VAR 0 2
52043: NOT
52044: OR
52045: IFFALSE 52049
// exit ;
52047: GO 52213
// tmp := AreaToList ( area , i ) ;
52049: LD_ADDR_VAR 0 6
52053: PUSH
52054: LD_VAR 0 2
52058: PPUSH
52059: LD_VAR 0 5
52063: PPUSH
52064: CALL_OW 517
52068: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52069: LD_ADDR_VAR 0 5
52073: PUSH
52074: DOUBLE
52075: LD_INT 1
52077: DEC
52078: ST_TO_ADDR
52079: LD_VAR 0 6
52083: PUSH
52084: LD_INT 1
52086: ARRAY
52087: PUSH
52088: FOR_TO
52089: IFFALSE 52211
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52091: LD_ADDR_VAR 0 7
52095: PUSH
52096: LD_VAR 0 6
52100: PUSH
52101: LD_INT 1
52103: ARRAY
52104: PUSH
52105: LD_VAR 0 5
52109: ARRAY
52110: PUSH
52111: LD_VAR 0 6
52115: PUSH
52116: LD_INT 2
52118: ARRAY
52119: PUSH
52120: LD_VAR 0 5
52124: ARRAY
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
52130: LD_VAR 0 7
52134: PUSH
52135: LD_INT 1
52137: ARRAY
52138: PPUSH
52139: LD_VAR 0 7
52143: PUSH
52144: LD_INT 2
52146: ARRAY
52147: PPUSH
52148: CALL_OW 428
52152: PUSH
52153: LD_INT 0
52155: EQUAL
52156: IFFALSE 52209
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52158: LD_VAR 0 1
52162: PPUSH
52163: LD_VAR 0 7
52167: PUSH
52168: LD_INT 1
52170: ARRAY
52171: PPUSH
52172: LD_VAR 0 7
52176: PUSH
52177: LD_INT 2
52179: ARRAY
52180: PPUSH
52181: LD_VAR 0 3
52185: PPUSH
52186: CALL_OW 48
// result := IsPlaced ( unit ) ;
52190: LD_ADDR_VAR 0 4
52194: PUSH
52195: LD_VAR 0 1
52199: PPUSH
52200: CALL_OW 305
52204: ST_TO_ADDR
// exit ;
52205: POP
52206: POP
52207: GO 52213
// end ; end ;
52209: GO 52088
52211: POP
52212: POP
// end ;
52213: LD_VAR 0 4
52217: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52218: LD_INT 0
52220: PPUSH
52221: PPUSH
52222: PPUSH
// if not side or side > 8 then
52223: LD_VAR 0 1
52227: NOT
52228: PUSH
52229: LD_VAR 0 1
52233: PUSH
52234: LD_INT 8
52236: GREATER
52237: OR
52238: IFFALSE 52242
// exit ;
52240: GO 52429
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52242: LD_ADDR_VAR 0 4
52246: PUSH
52247: LD_INT 22
52249: PUSH
52250: LD_VAR 0 1
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 21
52261: PUSH
52262: LD_INT 3
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PPUSH
52273: CALL_OW 69
52277: ST_TO_ADDR
// if not tmp then
52278: LD_VAR 0 4
52282: NOT
52283: IFFALSE 52287
// exit ;
52285: GO 52429
// enable_addtolog := true ;
52287: LD_ADDR_OWVAR 81
52291: PUSH
52292: LD_INT 1
52294: ST_TO_ADDR
// AddToLog ( [ ) ;
52295: LD_STRING [
52297: PPUSH
52298: CALL_OW 561
// for i in tmp do
52302: LD_ADDR_VAR 0 3
52306: PUSH
52307: LD_VAR 0 4
52311: PUSH
52312: FOR_IN
52313: IFFALSE 52420
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52315: LD_STRING [
52317: PUSH
52318: LD_VAR 0 3
52322: PPUSH
52323: CALL_OW 266
52327: STR
52328: PUSH
52329: LD_STRING , 
52331: STR
52332: PUSH
52333: LD_VAR 0 3
52337: PPUSH
52338: CALL_OW 250
52342: STR
52343: PUSH
52344: LD_STRING , 
52346: STR
52347: PUSH
52348: LD_VAR 0 3
52352: PPUSH
52353: CALL_OW 251
52357: STR
52358: PUSH
52359: LD_STRING , 
52361: STR
52362: PUSH
52363: LD_VAR 0 3
52367: PPUSH
52368: CALL_OW 254
52372: STR
52373: PUSH
52374: LD_STRING , 
52376: STR
52377: PUSH
52378: LD_VAR 0 3
52382: PPUSH
52383: LD_INT 1
52385: PPUSH
52386: CALL_OW 268
52390: STR
52391: PUSH
52392: LD_STRING , 
52394: STR
52395: PUSH
52396: LD_VAR 0 3
52400: PPUSH
52401: LD_INT 2
52403: PPUSH
52404: CALL_OW 268
52408: STR
52409: PUSH
52410: LD_STRING ],
52412: STR
52413: PPUSH
52414: CALL_OW 561
// end ;
52418: GO 52312
52420: POP
52421: POP
// AddToLog ( ]; ) ;
52422: LD_STRING ];
52424: PPUSH
52425: CALL_OW 561
// end ;
52429: LD_VAR 0 2
52433: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52434: LD_INT 0
52436: PPUSH
52437: PPUSH
52438: PPUSH
52439: PPUSH
52440: PPUSH
// if not area or not rate or not max then
52441: LD_VAR 0 1
52445: NOT
52446: PUSH
52447: LD_VAR 0 2
52451: NOT
52452: OR
52453: PUSH
52454: LD_VAR 0 4
52458: NOT
52459: OR
52460: IFFALSE 52464
// exit ;
52462: GO 52653
// while 1 do
52464: LD_INT 1
52466: IFFALSE 52653
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52468: LD_ADDR_VAR 0 9
52472: PUSH
52473: LD_VAR 0 1
52477: PPUSH
52478: LD_INT 1
52480: PPUSH
52481: CALL_OW 287
52485: PUSH
52486: LD_INT 10
52488: MUL
52489: ST_TO_ADDR
// r := rate / 10 ;
52490: LD_ADDR_VAR 0 7
52494: PUSH
52495: LD_VAR 0 2
52499: PUSH
52500: LD_INT 10
52502: DIVREAL
52503: ST_TO_ADDR
// time := 1 1$00 ;
52504: LD_ADDR_VAR 0 8
52508: PUSH
52509: LD_INT 2100
52511: ST_TO_ADDR
// if amount < min then
52512: LD_VAR 0 9
52516: PUSH
52517: LD_VAR 0 3
52521: LESS
52522: IFFALSE 52540
// r := r * 2 else
52524: LD_ADDR_VAR 0 7
52528: PUSH
52529: LD_VAR 0 7
52533: PUSH
52534: LD_INT 2
52536: MUL
52537: ST_TO_ADDR
52538: GO 52566
// if amount > max then
52540: LD_VAR 0 9
52544: PUSH
52545: LD_VAR 0 4
52549: GREATER
52550: IFFALSE 52566
// r := r / 2 ;
52552: LD_ADDR_VAR 0 7
52556: PUSH
52557: LD_VAR 0 7
52561: PUSH
52562: LD_INT 2
52564: DIVREAL
52565: ST_TO_ADDR
// time := time / r ;
52566: LD_ADDR_VAR 0 8
52570: PUSH
52571: LD_VAR 0 8
52575: PUSH
52576: LD_VAR 0 7
52580: DIVREAL
52581: ST_TO_ADDR
// if time < 0 then
52582: LD_VAR 0 8
52586: PUSH
52587: LD_INT 0
52589: LESS
52590: IFFALSE 52607
// time := time * - 1 ;
52592: LD_ADDR_VAR 0 8
52596: PUSH
52597: LD_VAR 0 8
52601: PUSH
52602: LD_INT 1
52604: NEG
52605: MUL
52606: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
52607: LD_VAR 0 8
52611: PUSH
52612: LD_INT 35
52614: PPUSH
52615: LD_INT 875
52617: PPUSH
52618: CALL_OW 12
52622: PLUS
52623: PPUSH
52624: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52628: LD_INT 1
52630: PPUSH
52631: LD_INT 5
52633: PPUSH
52634: CALL_OW 12
52638: PPUSH
52639: LD_VAR 0 1
52643: PPUSH
52644: LD_INT 1
52646: PPUSH
52647: CALL_OW 55
// end ;
52651: GO 52464
// end ;
52653: LD_VAR 0 5
52657: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52658: LD_INT 0
52660: PPUSH
52661: PPUSH
52662: PPUSH
52663: PPUSH
52664: PPUSH
52665: PPUSH
52666: PPUSH
52667: PPUSH
// if not turrets or not factories then
52668: LD_VAR 0 1
52672: NOT
52673: PUSH
52674: LD_VAR 0 2
52678: NOT
52679: OR
52680: IFFALSE 52684
// exit ;
52682: GO 52991
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52684: LD_ADDR_VAR 0 10
52688: PUSH
52689: LD_INT 5
52691: PUSH
52692: LD_INT 6
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 2
52701: PUSH
52702: LD_INT 4
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 3
52711: PUSH
52712: LD_INT 5
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 24
52726: PUSH
52727: LD_INT 25
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 23
52736: PUSH
52737: LD_INT 27
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 42
52750: PUSH
52751: LD_INT 43
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 44
52760: PUSH
52761: LD_INT 46
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 45
52770: PUSH
52771: LD_INT 47
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: LIST
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: LIST
52787: ST_TO_ADDR
// result := [ ] ;
52788: LD_ADDR_VAR 0 3
52792: PUSH
52793: EMPTY
52794: ST_TO_ADDR
// for i in turrets do
52795: LD_ADDR_VAR 0 4
52799: PUSH
52800: LD_VAR 0 1
52804: PUSH
52805: FOR_IN
52806: IFFALSE 52989
// begin nat := GetNation ( i ) ;
52808: LD_ADDR_VAR 0 7
52812: PUSH
52813: LD_VAR 0 4
52817: PPUSH
52818: CALL_OW 248
52822: ST_TO_ADDR
// weapon := 0 ;
52823: LD_ADDR_VAR 0 8
52827: PUSH
52828: LD_INT 0
52830: ST_TO_ADDR
// if not nat then
52831: LD_VAR 0 7
52835: NOT
52836: IFFALSE 52840
// continue ;
52838: GO 52805
// for j in list [ nat ] do
52840: LD_ADDR_VAR 0 5
52844: PUSH
52845: LD_VAR 0 10
52849: PUSH
52850: LD_VAR 0 7
52854: ARRAY
52855: PUSH
52856: FOR_IN
52857: IFFALSE 52898
// if GetBWeapon ( i ) = j [ 1 ] then
52859: LD_VAR 0 4
52863: PPUSH
52864: CALL_OW 269
52868: PUSH
52869: LD_VAR 0 5
52873: PUSH
52874: LD_INT 1
52876: ARRAY
52877: EQUAL
52878: IFFALSE 52896
// begin weapon := j [ 2 ] ;
52880: LD_ADDR_VAR 0 8
52884: PUSH
52885: LD_VAR 0 5
52889: PUSH
52890: LD_INT 2
52892: ARRAY
52893: ST_TO_ADDR
// break ;
52894: GO 52898
// end ;
52896: GO 52856
52898: POP
52899: POP
// if not weapon then
52900: LD_VAR 0 8
52904: NOT
52905: IFFALSE 52909
// continue ;
52907: GO 52805
// for k in factories do
52909: LD_ADDR_VAR 0 6
52913: PUSH
52914: LD_VAR 0 2
52918: PUSH
52919: FOR_IN
52920: IFFALSE 52985
// begin weapons := AvailableWeaponList ( k ) ;
52922: LD_ADDR_VAR 0 9
52926: PUSH
52927: LD_VAR 0 6
52931: PPUSH
52932: CALL_OW 478
52936: ST_TO_ADDR
// if not weapons then
52937: LD_VAR 0 9
52941: NOT
52942: IFFALSE 52946
// continue ;
52944: GO 52919
// if weapon in weapons then
52946: LD_VAR 0 8
52950: PUSH
52951: LD_VAR 0 9
52955: IN
52956: IFFALSE 52983
// begin result := [ i , weapon ] ;
52958: LD_ADDR_VAR 0 3
52962: PUSH
52963: LD_VAR 0 4
52967: PUSH
52968: LD_VAR 0 8
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: ST_TO_ADDR
// exit ;
52977: POP
52978: POP
52979: POP
52980: POP
52981: GO 52991
// end ; end ;
52983: GO 52919
52985: POP
52986: POP
// end ;
52987: GO 52805
52989: POP
52990: POP
// end ;
52991: LD_VAR 0 3
52995: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
52996: LD_INT 0
52998: PPUSH
// if not side or side > 8 then
52999: LD_VAR 0 3
53003: NOT
53004: PUSH
53005: LD_VAR 0 3
53009: PUSH
53010: LD_INT 8
53012: GREATER
53013: OR
53014: IFFALSE 53018
// exit ;
53016: GO 53077
// if not range then
53018: LD_VAR 0 4
53022: NOT
53023: IFFALSE 53034
// range := - 12 ;
53025: LD_ADDR_VAR 0 4
53029: PUSH
53030: LD_INT 12
53032: NEG
53033: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53034: LD_VAR 0 1
53038: PPUSH
53039: LD_VAR 0 2
53043: PPUSH
53044: LD_VAR 0 3
53048: PPUSH
53049: LD_VAR 0 4
53053: PPUSH
53054: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53058: LD_VAR 0 1
53062: PPUSH
53063: LD_VAR 0 2
53067: PPUSH
53068: LD_VAR 0 3
53072: PPUSH
53073: CALL_OW 331
// end ;
53077: LD_VAR 0 5
53081: RET
// export function Video ( mode ) ; begin
53082: LD_INT 0
53084: PPUSH
// ingame_video = mode ;
53085: LD_ADDR_OWVAR 52
53089: PUSH
53090: LD_VAR 0 1
53094: ST_TO_ADDR
// interface_hidden = mode ;
53095: LD_ADDR_OWVAR 54
53099: PUSH
53100: LD_VAR 0 1
53104: ST_TO_ADDR
// end ;
53105: LD_VAR 0 2
53109: RET
// export function Join ( array , element ) ; begin
53110: LD_INT 0
53112: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53113: LD_ADDR_VAR 0 3
53117: PUSH
53118: LD_VAR 0 1
53122: PPUSH
53123: LD_VAR 0 1
53127: PUSH
53128: LD_INT 1
53130: PLUS
53131: PPUSH
53132: LD_VAR 0 2
53136: PPUSH
53137: CALL_OW 1
53141: ST_TO_ADDR
// end ;
53142: LD_VAR 0 3
53146: RET
// export function JoinUnion ( array , element ) ; begin
53147: LD_INT 0
53149: PPUSH
// result := array union element ;
53150: LD_ADDR_VAR 0 3
53154: PUSH
53155: LD_VAR 0 1
53159: PUSH
53160: LD_VAR 0 2
53164: UNION
53165: ST_TO_ADDR
// end ;
53166: LD_VAR 0 3
53170: RET
// export function GetBehemoths ( side ) ; begin
53171: LD_INT 0
53173: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
53174: LD_ADDR_VAR 0 2
53178: PUSH
53179: LD_INT 22
53181: PUSH
53182: LD_VAR 0 1
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 31
53193: PUSH
53194: LD_INT 25
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PPUSH
53205: CALL_OW 69
53209: ST_TO_ADDR
// end ;
53210: LD_VAR 0 2
53214: RET
// export function Shuffle ( array ) ; var i , index ; begin
53215: LD_INT 0
53217: PPUSH
53218: PPUSH
53219: PPUSH
// result := [ ] ;
53220: LD_ADDR_VAR 0 2
53224: PUSH
53225: EMPTY
53226: ST_TO_ADDR
// if not array then
53227: LD_VAR 0 1
53231: NOT
53232: IFFALSE 53236
// exit ;
53234: GO 53335
// Randomize ;
53236: CALL_OW 10
// for i = array downto 1 do
53240: LD_ADDR_VAR 0 3
53244: PUSH
53245: DOUBLE
53246: LD_VAR 0 1
53250: INC
53251: ST_TO_ADDR
53252: LD_INT 1
53254: PUSH
53255: FOR_DOWNTO
53256: IFFALSE 53333
// begin index := rand ( 1 , array ) ;
53258: LD_ADDR_VAR 0 4
53262: PUSH
53263: LD_INT 1
53265: PPUSH
53266: LD_VAR 0 1
53270: PPUSH
53271: CALL_OW 12
53275: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53276: LD_ADDR_VAR 0 2
53280: PUSH
53281: LD_VAR 0 2
53285: PPUSH
53286: LD_VAR 0 2
53290: PUSH
53291: LD_INT 1
53293: PLUS
53294: PPUSH
53295: LD_VAR 0 1
53299: PUSH
53300: LD_VAR 0 4
53304: ARRAY
53305: PPUSH
53306: CALL_OW 2
53310: ST_TO_ADDR
// array := Delete ( array , index ) ;
53311: LD_ADDR_VAR 0 1
53315: PUSH
53316: LD_VAR 0 1
53320: PPUSH
53321: LD_VAR 0 4
53325: PPUSH
53326: CALL_OW 3
53330: ST_TO_ADDR
// end ;
53331: GO 53255
53333: POP
53334: POP
// end ;
53335: LD_VAR 0 2
53339: RET
// export function GetBaseMaterials ( base ) ; begin
53340: LD_INT 0
53342: PPUSH
// result := [ 0 , 0 , 0 ] ;
53343: LD_ADDR_VAR 0 2
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: LD_INT 0
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: LIST
53361: ST_TO_ADDR
// if not base then
53362: LD_VAR 0 1
53366: NOT
53367: IFFALSE 53371
// exit ;
53369: GO 53420
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53371: LD_ADDR_VAR 0 2
53375: PUSH
53376: LD_VAR 0 1
53380: PPUSH
53381: LD_INT 1
53383: PPUSH
53384: CALL_OW 275
53388: PUSH
53389: LD_VAR 0 1
53393: PPUSH
53394: LD_INT 2
53396: PPUSH
53397: CALL_OW 275
53401: PUSH
53402: LD_VAR 0 1
53406: PPUSH
53407: LD_INT 3
53409: PPUSH
53410: CALL_OW 275
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: LIST
53419: ST_TO_ADDR
// end ;
53420: LD_VAR 0 2
53424: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53425: LD_INT 0
53427: PPUSH
53428: PPUSH
// result := array ;
53429: LD_ADDR_VAR 0 3
53433: PUSH
53434: LD_VAR 0 1
53438: ST_TO_ADDR
// if size >= result then
53439: LD_VAR 0 2
53443: PUSH
53444: LD_VAR 0 3
53448: GREATEREQUAL
53449: IFFALSE 53453
// exit ;
53451: GO 53503
// if size then
53453: LD_VAR 0 2
53457: IFFALSE 53503
// for i := array downto size do
53459: LD_ADDR_VAR 0 4
53463: PUSH
53464: DOUBLE
53465: LD_VAR 0 1
53469: INC
53470: ST_TO_ADDR
53471: LD_VAR 0 2
53475: PUSH
53476: FOR_DOWNTO
53477: IFFALSE 53501
// result := Delete ( result , result ) ;
53479: LD_ADDR_VAR 0 3
53483: PUSH
53484: LD_VAR 0 3
53488: PPUSH
53489: LD_VAR 0 3
53493: PPUSH
53494: CALL_OW 3
53498: ST_TO_ADDR
53499: GO 53476
53501: POP
53502: POP
// end ;
53503: LD_VAR 0 3
53507: RET
// export function ComExit ( unit ) ; var tmp ; begin
53508: LD_INT 0
53510: PPUSH
53511: PPUSH
// if not IsInUnit ( unit ) then
53512: LD_VAR 0 1
53516: PPUSH
53517: CALL_OW 310
53521: NOT
53522: IFFALSE 53526
// exit ;
53524: GO 53586
// tmp := IsInUnit ( unit ) ;
53526: LD_ADDR_VAR 0 3
53530: PUSH
53531: LD_VAR 0 1
53535: PPUSH
53536: CALL_OW 310
53540: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53541: LD_VAR 0 3
53545: PPUSH
53546: CALL_OW 247
53550: PUSH
53551: LD_INT 2
53553: EQUAL
53554: IFFALSE 53567
// ComExitVehicle ( unit ) else
53556: LD_VAR 0 1
53560: PPUSH
53561: CALL_OW 121
53565: GO 53576
// ComExitBuilding ( unit ) ;
53567: LD_VAR 0 1
53571: PPUSH
53572: CALL_OW 122
// result := tmp ;
53576: LD_ADDR_VAR 0 2
53580: PUSH
53581: LD_VAR 0 3
53585: ST_TO_ADDR
// end ;
53586: LD_VAR 0 2
53590: RET
// export function ComExitAll ( units ) ; var i ; begin
53591: LD_INT 0
53593: PPUSH
53594: PPUSH
// if not units then
53595: LD_VAR 0 1
53599: NOT
53600: IFFALSE 53604
// exit ;
53602: GO 53630
// for i in units do
53604: LD_ADDR_VAR 0 3
53608: PUSH
53609: LD_VAR 0 1
53613: PUSH
53614: FOR_IN
53615: IFFALSE 53628
// ComExit ( i ) ;
53617: LD_VAR 0 3
53621: PPUSH
53622: CALL 53508 0 1
53626: GO 53614
53628: POP
53629: POP
// end ;
53630: LD_VAR 0 2
53634: RET
// export function ResetHc ; begin
53635: LD_INT 0
53637: PPUSH
// InitHc ;
53638: CALL_OW 19
// hc_importance := 0 ;
53642: LD_ADDR_OWVAR 32
53646: PUSH
53647: LD_INT 0
53649: ST_TO_ADDR
// end ;
53650: LD_VAR 0 1
53654: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53655: LD_INT 0
53657: PPUSH
53658: PPUSH
53659: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53660: LD_ADDR_VAR 0 6
53664: PUSH
53665: LD_VAR 0 1
53669: PUSH
53670: LD_VAR 0 3
53674: PLUS
53675: PUSH
53676: LD_INT 2
53678: DIV
53679: ST_TO_ADDR
// if _x < 0 then
53680: LD_VAR 0 6
53684: PUSH
53685: LD_INT 0
53687: LESS
53688: IFFALSE 53705
// _x := _x * - 1 ;
53690: LD_ADDR_VAR 0 6
53694: PUSH
53695: LD_VAR 0 6
53699: PUSH
53700: LD_INT 1
53702: NEG
53703: MUL
53704: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53705: LD_ADDR_VAR 0 7
53709: PUSH
53710: LD_VAR 0 2
53714: PUSH
53715: LD_VAR 0 4
53719: PLUS
53720: PUSH
53721: LD_INT 2
53723: DIV
53724: ST_TO_ADDR
// if _y < 0 then
53725: LD_VAR 0 7
53729: PUSH
53730: LD_INT 0
53732: LESS
53733: IFFALSE 53750
// _y := _y * - 1 ;
53735: LD_ADDR_VAR 0 7
53739: PUSH
53740: LD_VAR 0 7
53744: PUSH
53745: LD_INT 1
53747: NEG
53748: MUL
53749: ST_TO_ADDR
// result := [ _x , _y ] ;
53750: LD_ADDR_VAR 0 5
53754: PUSH
53755: LD_VAR 0 6
53759: PUSH
53760: LD_VAR 0 7
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: ST_TO_ADDR
// end ;
53769: LD_VAR 0 5
53773: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53774: LD_INT 0
53776: PPUSH
53777: PPUSH
53778: PPUSH
53779: PPUSH
// task := GetTaskList ( unit ) ;
53780: LD_ADDR_VAR 0 7
53784: PUSH
53785: LD_VAR 0 1
53789: PPUSH
53790: CALL_OW 437
53794: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53795: LD_VAR 0 7
53799: NOT
53800: PUSH
53801: LD_VAR 0 1
53805: PPUSH
53806: LD_VAR 0 2
53810: PPUSH
53811: CALL_OW 308
53815: NOT
53816: AND
53817: IFFALSE 53821
// exit ;
53819: GO 53939
// if IsInArea ( unit , area ) then
53821: LD_VAR 0 1
53825: PPUSH
53826: LD_VAR 0 2
53830: PPUSH
53831: CALL_OW 308
53835: IFFALSE 53853
// begin ComMoveToArea ( unit , goAway ) ;
53837: LD_VAR 0 1
53841: PPUSH
53842: LD_VAR 0 3
53846: PPUSH
53847: CALL_OW 113
// exit ;
53851: GO 53939
// end ; if task [ 1 ] [ 1 ] <> M then
53853: LD_VAR 0 7
53857: PUSH
53858: LD_INT 1
53860: ARRAY
53861: PUSH
53862: LD_INT 1
53864: ARRAY
53865: PUSH
53866: LD_STRING M
53868: NONEQUAL
53869: IFFALSE 53873
// exit ;
53871: GO 53939
// x := task [ 1 ] [ 2 ] ;
53873: LD_ADDR_VAR 0 5
53877: PUSH
53878: LD_VAR 0 7
53882: PUSH
53883: LD_INT 1
53885: ARRAY
53886: PUSH
53887: LD_INT 2
53889: ARRAY
53890: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
53891: LD_ADDR_VAR 0 6
53895: PUSH
53896: LD_VAR 0 7
53900: PUSH
53901: LD_INT 1
53903: ARRAY
53904: PUSH
53905: LD_INT 3
53907: ARRAY
53908: ST_TO_ADDR
// if InArea ( x , y , area ) then
53909: LD_VAR 0 5
53913: PPUSH
53914: LD_VAR 0 6
53918: PPUSH
53919: LD_VAR 0 2
53923: PPUSH
53924: CALL_OW 309
53928: IFFALSE 53939
// ComStop ( unit ) ;
53930: LD_VAR 0 1
53934: PPUSH
53935: CALL_OW 141
// end ;
53939: LD_VAR 0 4
53943: RET
// export function Abs ( value ) ; begin
53944: LD_INT 0
53946: PPUSH
// result := value ;
53947: LD_ADDR_VAR 0 2
53951: PUSH
53952: LD_VAR 0 1
53956: ST_TO_ADDR
// if value < 0 then
53957: LD_VAR 0 1
53961: PUSH
53962: LD_INT 0
53964: LESS
53965: IFFALSE 53982
// result := value * - 1 ;
53967: LD_ADDR_VAR 0 2
53971: PUSH
53972: LD_VAR 0 1
53976: PUSH
53977: LD_INT 1
53979: NEG
53980: MUL
53981: ST_TO_ADDR
// end ;
53982: LD_VAR 0 2
53986: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
53987: LD_INT 0
53989: PPUSH
53990: PPUSH
53991: PPUSH
53992: PPUSH
53993: PPUSH
53994: PPUSH
53995: PPUSH
53996: PPUSH
// if not unit or not building then
53997: LD_VAR 0 1
54001: NOT
54002: PUSH
54003: LD_VAR 0 2
54007: NOT
54008: OR
54009: IFFALSE 54013
// exit ;
54011: GO 54239
// x := GetX ( building ) ;
54013: LD_ADDR_VAR 0 4
54017: PUSH
54018: LD_VAR 0 2
54022: PPUSH
54023: CALL_OW 250
54027: ST_TO_ADDR
// y := GetY ( building ) ;
54028: LD_ADDR_VAR 0 6
54032: PUSH
54033: LD_VAR 0 2
54037: PPUSH
54038: CALL_OW 251
54042: ST_TO_ADDR
// d := GetDir ( building ) ;
54043: LD_ADDR_VAR 0 8
54047: PUSH
54048: LD_VAR 0 2
54052: PPUSH
54053: CALL_OW 254
54057: ST_TO_ADDR
// r := 4 ;
54058: LD_ADDR_VAR 0 9
54062: PUSH
54063: LD_INT 4
54065: ST_TO_ADDR
// for i := 1 to 5 do
54066: LD_ADDR_VAR 0 10
54070: PUSH
54071: DOUBLE
54072: LD_INT 1
54074: DEC
54075: ST_TO_ADDR
54076: LD_INT 5
54078: PUSH
54079: FOR_TO
54080: IFFALSE 54237
// begin _x := ShiftX ( x , d , r + i ) ;
54082: LD_ADDR_VAR 0 5
54086: PUSH
54087: LD_VAR 0 4
54091: PPUSH
54092: LD_VAR 0 8
54096: PPUSH
54097: LD_VAR 0 9
54101: PUSH
54102: LD_VAR 0 10
54106: PLUS
54107: PPUSH
54108: CALL_OW 272
54112: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54113: LD_ADDR_VAR 0 7
54117: PUSH
54118: LD_VAR 0 6
54122: PPUSH
54123: LD_VAR 0 8
54127: PPUSH
54128: LD_VAR 0 9
54132: PUSH
54133: LD_VAR 0 10
54137: PLUS
54138: PPUSH
54139: CALL_OW 273
54143: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54144: LD_VAR 0 5
54148: PPUSH
54149: LD_VAR 0 7
54153: PPUSH
54154: CALL_OW 488
54158: PUSH
54159: LD_VAR 0 5
54163: PPUSH
54164: LD_VAR 0 7
54168: PPUSH
54169: CALL_OW 428
54173: PPUSH
54174: CALL_OW 247
54178: PUSH
54179: LD_INT 3
54181: PUSH
54182: LD_INT 2
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: IN
54189: NOT
54190: AND
54191: IFFALSE 54235
// begin ComMoveXY ( unit , _x , _y ) ;
54193: LD_VAR 0 1
54197: PPUSH
54198: LD_VAR 0 5
54202: PPUSH
54203: LD_VAR 0 7
54207: PPUSH
54208: CALL_OW 111
// result := [ _x , _y ] ;
54212: LD_ADDR_VAR 0 3
54216: PUSH
54217: LD_VAR 0 5
54221: PUSH
54222: LD_VAR 0 7
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: ST_TO_ADDR
// exit ;
54231: POP
54232: POP
54233: GO 54239
// end ; end ;
54235: GO 54079
54237: POP
54238: POP
// end ;
54239: LD_VAR 0 3
54243: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54244: LD_INT 0
54246: PPUSH
54247: PPUSH
54248: PPUSH
// result := 0 ;
54249: LD_ADDR_VAR 0 3
54253: PUSH
54254: LD_INT 0
54256: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
54257: LD_VAR 0 1
54261: PUSH
54262: LD_INT 0
54264: LESS
54265: PUSH
54266: LD_VAR 0 1
54270: PUSH
54271: LD_INT 8
54273: GREATER
54274: OR
54275: PUSH
54276: LD_VAR 0 2
54280: PUSH
54281: LD_INT 0
54283: LESS
54284: OR
54285: PUSH
54286: LD_VAR 0 2
54290: PUSH
54291: LD_INT 8
54293: GREATER
54294: OR
54295: IFFALSE 54299
// exit ;
54297: GO 54374
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
54299: LD_ADDR_VAR 0 4
54303: PUSH
54304: LD_INT 22
54306: PUSH
54307: LD_VAR 0 2
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PPUSH
54316: CALL_OW 69
54320: PUSH
54321: FOR_IN
54322: IFFALSE 54372
// begin un := UnitShoot ( i ) ;
54324: LD_ADDR_VAR 0 5
54328: PUSH
54329: LD_VAR 0 4
54333: PPUSH
54334: CALL_OW 504
54338: ST_TO_ADDR
// if GetSide ( un ) = side1 then
54339: LD_VAR 0 5
54343: PPUSH
54344: CALL_OW 255
54348: PUSH
54349: LD_VAR 0 1
54353: EQUAL
54354: IFFALSE 54370
// begin result := un ;
54356: LD_ADDR_VAR 0 3
54360: PUSH
54361: LD_VAR 0 5
54365: ST_TO_ADDR
// exit ;
54366: POP
54367: POP
54368: GO 54374
// end ; end ;
54370: GO 54321
54372: POP
54373: POP
// end ;
54374: LD_VAR 0 3
54378: RET
// export function GetCargoBay ( units ) ; begin
54379: LD_INT 0
54381: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
54382: LD_ADDR_VAR 0 2
54386: PUSH
54387: LD_VAR 0 1
54391: PPUSH
54392: LD_INT 2
54394: PUSH
54395: LD_INT 34
54397: PUSH
54398: LD_INT 12
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 34
54407: PUSH
54408: LD_INT 51
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 34
54417: PUSH
54418: LD_INT 32
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 34
54427: PUSH
54428: LD_INT 89
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: PPUSH
54442: CALL_OW 72
54446: ST_TO_ADDR
// end ;
54447: LD_VAR 0 2
54451: RET
// export function Negate ( value ) ; begin
54452: LD_INT 0
54454: PPUSH
// result := not value ;
54455: LD_ADDR_VAR 0 2
54459: PUSH
54460: LD_VAR 0 1
54464: NOT
54465: ST_TO_ADDR
// end ;
54466: LD_VAR 0 2
54470: RET
// export function Inc ( value ) ; begin
54471: LD_INT 0
54473: PPUSH
// result := value + 1 ;
54474: LD_ADDR_VAR 0 2
54478: PUSH
54479: LD_VAR 0 1
54483: PUSH
54484: LD_INT 1
54486: PLUS
54487: ST_TO_ADDR
// end ;
54488: LD_VAR 0 2
54492: RET
// export function Dec ( value ) ; begin
54493: LD_INT 0
54495: PPUSH
// result := value - 1 ;
54496: LD_ADDR_VAR 0 2
54500: PUSH
54501: LD_VAR 0 1
54505: PUSH
54506: LD_INT 1
54508: MINUS
54509: ST_TO_ADDR
// end ;
54510: LD_VAR 0 2
54514: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54515: LD_INT 0
54517: PPUSH
54518: PPUSH
54519: PPUSH
54520: PPUSH
54521: PPUSH
54522: PPUSH
54523: PPUSH
54524: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54525: LD_VAR 0 1
54529: PPUSH
54530: LD_VAR 0 2
54534: PPUSH
54535: CALL_OW 488
54539: NOT
54540: PUSH
54541: LD_VAR 0 3
54545: PPUSH
54546: LD_VAR 0 4
54550: PPUSH
54551: CALL_OW 488
54555: NOT
54556: OR
54557: IFFALSE 54570
// begin result := - 1 ;
54559: LD_ADDR_VAR 0 5
54563: PUSH
54564: LD_INT 1
54566: NEG
54567: ST_TO_ADDR
// exit ;
54568: GO 54805
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54570: LD_ADDR_VAR 0 12
54574: PUSH
54575: LD_VAR 0 1
54579: PPUSH
54580: LD_VAR 0 2
54584: PPUSH
54585: LD_VAR 0 3
54589: PPUSH
54590: LD_VAR 0 4
54594: PPUSH
54595: CALL 53655 0 4
54599: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54600: LD_ADDR_VAR 0 11
54604: PUSH
54605: LD_VAR 0 1
54609: PPUSH
54610: LD_VAR 0 2
54614: PPUSH
54615: LD_VAR 0 12
54619: PUSH
54620: LD_INT 1
54622: ARRAY
54623: PPUSH
54624: LD_VAR 0 12
54628: PUSH
54629: LD_INT 2
54631: ARRAY
54632: PPUSH
54633: CALL_OW 298
54637: ST_TO_ADDR
// distance := 9999 ;
54638: LD_ADDR_VAR 0 10
54642: PUSH
54643: LD_INT 9999
54645: ST_TO_ADDR
// for i := 0 to 5 do
54646: LD_ADDR_VAR 0 6
54650: PUSH
54651: DOUBLE
54652: LD_INT 0
54654: DEC
54655: ST_TO_ADDR
54656: LD_INT 5
54658: PUSH
54659: FOR_TO
54660: IFFALSE 54803
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54662: LD_ADDR_VAR 0 7
54666: PUSH
54667: LD_VAR 0 1
54671: PPUSH
54672: LD_VAR 0 6
54676: PPUSH
54677: LD_VAR 0 11
54681: PPUSH
54682: CALL_OW 272
54686: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
54687: LD_ADDR_VAR 0 8
54691: PUSH
54692: LD_VAR 0 2
54696: PPUSH
54697: LD_VAR 0 6
54701: PPUSH
54702: LD_VAR 0 11
54706: PPUSH
54707: CALL_OW 273
54711: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54712: LD_VAR 0 7
54716: PPUSH
54717: LD_VAR 0 8
54721: PPUSH
54722: CALL_OW 488
54726: NOT
54727: IFFALSE 54731
// continue ;
54729: GO 54659
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
54731: LD_ADDR_VAR 0 9
54735: PUSH
54736: LD_VAR 0 12
54740: PUSH
54741: LD_INT 1
54743: ARRAY
54744: PPUSH
54745: LD_VAR 0 12
54749: PUSH
54750: LD_INT 2
54752: ARRAY
54753: PPUSH
54754: LD_VAR 0 7
54758: PPUSH
54759: LD_VAR 0 8
54763: PPUSH
54764: CALL_OW 298
54768: ST_TO_ADDR
// if tmp < distance then
54769: LD_VAR 0 9
54773: PUSH
54774: LD_VAR 0 10
54778: LESS
54779: IFFALSE 54801
// begin result := i ;
54781: LD_ADDR_VAR 0 5
54785: PUSH
54786: LD_VAR 0 6
54790: ST_TO_ADDR
// distance := tmp ;
54791: LD_ADDR_VAR 0 10
54795: PUSH
54796: LD_VAR 0 9
54800: ST_TO_ADDR
// end ; end ;
54801: GO 54659
54803: POP
54804: POP
// end ;
54805: LD_VAR 0 5
54809: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54810: LD_INT 0
54812: PPUSH
54813: PPUSH
// if not driver or not IsInUnit ( driver ) then
54814: LD_VAR 0 1
54818: NOT
54819: PUSH
54820: LD_VAR 0 1
54824: PPUSH
54825: CALL_OW 310
54829: NOT
54830: OR
54831: IFFALSE 54835
// exit ;
54833: GO 54925
// vehicle := IsInUnit ( driver ) ;
54835: LD_ADDR_VAR 0 3
54839: PUSH
54840: LD_VAR 0 1
54844: PPUSH
54845: CALL_OW 310
54849: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54850: LD_VAR 0 1
54854: PPUSH
54855: LD_STRING \
54857: PUSH
54858: LD_INT 0
54860: PUSH
54861: LD_INT 0
54863: PUSH
54864: LD_INT 0
54866: PUSH
54867: LD_INT 0
54869: PUSH
54870: LD_INT 0
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: PUSH
54885: LD_STRING E
54887: PUSH
54888: LD_INT 0
54890: PUSH
54891: LD_INT 0
54893: PUSH
54894: LD_VAR 0 3
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PPUSH
54921: CALL_OW 446
// end ;
54925: LD_VAR 0 2
54929: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54930: LD_INT 0
54932: PPUSH
54933: PPUSH
// if not driver or not IsInUnit ( driver ) then
54934: LD_VAR 0 1
54938: NOT
54939: PUSH
54940: LD_VAR 0 1
54944: PPUSH
54945: CALL_OW 310
54949: NOT
54950: OR
54951: IFFALSE 54955
// exit ;
54953: GO 55045
// vehicle := IsInUnit ( driver ) ;
54955: LD_ADDR_VAR 0 3
54959: PUSH
54960: LD_VAR 0 1
54964: PPUSH
54965: CALL_OW 310
54969: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54970: LD_VAR 0 1
54974: PPUSH
54975: LD_STRING \
54977: PUSH
54978: LD_INT 0
54980: PUSH
54981: LD_INT 0
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: LD_INT 0
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: PUSH
55005: LD_STRING E
55007: PUSH
55008: LD_INT 0
55010: PUSH
55011: LD_INT 0
55013: PUSH
55014: LD_VAR 0 3
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: LD_INT 0
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PPUSH
55041: CALL_OW 447
// end ;
55045: LD_VAR 0 2
55049: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55050: LD_INT 0
55052: PPUSH
55053: PPUSH
55054: PPUSH
// tmp := [ ] ;
55055: LD_ADDR_VAR 0 5
55059: PUSH
55060: EMPTY
55061: ST_TO_ADDR
// for i in units do
55062: LD_ADDR_VAR 0 4
55066: PUSH
55067: LD_VAR 0 1
55071: PUSH
55072: FOR_IN
55073: IFFALSE 55111
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55075: LD_ADDR_VAR 0 5
55079: PUSH
55080: LD_VAR 0 5
55084: PPUSH
55085: LD_VAR 0 5
55089: PUSH
55090: LD_INT 1
55092: PLUS
55093: PPUSH
55094: LD_VAR 0 4
55098: PPUSH
55099: CALL_OW 256
55103: PPUSH
55104: CALL_OW 2
55108: ST_TO_ADDR
55109: GO 55072
55111: POP
55112: POP
// if not tmp then
55113: LD_VAR 0 5
55117: NOT
55118: IFFALSE 55122
// exit ;
55120: GO 55170
// if asc then
55122: LD_VAR 0 2
55126: IFFALSE 55150
// result := SortListByListAsc ( units , tmp ) else
55128: LD_ADDR_VAR 0 3
55132: PUSH
55133: LD_VAR 0 1
55137: PPUSH
55138: LD_VAR 0 5
55142: PPUSH
55143: CALL_OW 76
55147: ST_TO_ADDR
55148: GO 55170
// result := SortListByListDesc ( units , tmp ) ;
55150: LD_ADDR_VAR 0 3
55154: PUSH
55155: LD_VAR 0 1
55159: PPUSH
55160: LD_VAR 0 5
55164: PPUSH
55165: CALL_OW 77
55169: ST_TO_ADDR
// end ;
55170: LD_VAR 0 3
55174: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55175: LD_INT 0
55177: PPUSH
55178: PPUSH
// task := GetTaskList ( mech ) ;
55179: LD_ADDR_VAR 0 4
55183: PUSH
55184: LD_VAR 0 1
55188: PPUSH
55189: CALL_OW 437
55193: ST_TO_ADDR
// if not task then
55194: LD_VAR 0 4
55198: NOT
55199: IFFALSE 55203
// exit ;
55201: GO 55245
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55203: LD_ADDR_VAR 0 3
55207: PUSH
55208: LD_VAR 0 4
55212: PUSH
55213: LD_INT 1
55215: ARRAY
55216: PUSH
55217: LD_INT 1
55219: ARRAY
55220: PUSH
55221: LD_STRING r
55223: EQUAL
55224: PUSH
55225: LD_VAR 0 4
55229: PUSH
55230: LD_INT 1
55232: ARRAY
55233: PUSH
55234: LD_INT 4
55236: ARRAY
55237: PUSH
55238: LD_VAR 0 2
55242: EQUAL
55243: AND
55244: ST_TO_ADDR
// end ;
55245: LD_VAR 0 3
55249: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
55250: LD_INT 0
55252: PPUSH
// SetDir ( unit , d ) ;
55253: LD_VAR 0 1
55257: PPUSH
55258: LD_VAR 0 4
55262: PPUSH
55263: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
55267: LD_VAR 0 1
55271: PPUSH
55272: LD_VAR 0 2
55276: PPUSH
55277: LD_VAR 0 3
55281: PPUSH
55282: LD_VAR 0 5
55286: PPUSH
55287: CALL_OW 48
// end ;
55291: LD_VAR 0 6
55295: RET
// export function ToNaturalNumber ( number ) ; begin
55296: LD_INT 0
55298: PPUSH
// result := number div 1 ;
55299: LD_ADDR_VAR 0 2
55303: PUSH
55304: LD_VAR 0 1
55308: PUSH
55309: LD_INT 1
55311: DIV
55312: ST_TO_ADDR
// if number < 0 then
55313: LD_VAR 0 1
55317: PUSH
55318: LD_INT 0
55320: LESS
55321: IFFALSE 55331
// result := 0 ;
55323: LD_ADDR_VAR 0 2
55327: PUSH
55328: LD_INT 0
55330: ST_TO_ADDR
// end ;
55331: LD_VAR 0 2
55335: RET
// export function SortByClass ( units , class ) ; var un ; begin
55336: LD_INT 0
55338: PPUSH
55339: PPUSH
// if not units or not class then
55340: LD_VAR 0 1
55344: NOT
55345: PUSH
55346: LD_VAR 0 2
55350: NOT
55351: OR
55352: IFFALSE 55356
// exit ;
55354: GO 55451
// result := [ ] ;
55356: LD_ADDR_VAR 0 3
55360: PUSH
55361: EMPTY
55362: ST_TO_ADDR
// for un in units do
55363: LD_ADDR_VAR 0 4
55367: PUSH
55368: LD_VAR 0 1
55372: PUSH
55373: FOR_IN
55374: IFFALSE 55449
// if GetClass ( un ) = class then
55376: LD_VAR 0 4
55380: PPUSH
55381: CALL_OW 257
55385: PUSH
55386: LD_VAR 0 2
55390: EQUAL
55391: IFFALSE 55418
// result := Insert ( result , 1 , un ) else
55393: LD_ADDR_VAR 0 3
55397: PUSH
55398: LD_VAR 0 3
55402: PPUSH
55403: LD_INT 1
55405: PPUSH
55406: LD_VAR 0 4
55410: PPUSH
55411: CALL_OW 2
55415: ST_TO_ADDR
55416: GO 55447
// result := Replace ( result , result + 1 , un ) ;
55418: LD_ADDR_VAR 0 3
55422: PUSH
55423: LD_VAR 0 3
55427: PPUSH
55428: LD_VAR 0 3
55432: PUSH
55433: LD_INT 1
55435: PLUS
55436: PPUSH
55437: LD_VAR 0 4
55441: PPUSH
55442: CALL_OW 1
55446: ST_TO_ADDR
55447: GO 55373
55449: POP
55450: POP
// end ;
55451: LD_VAR 0 3
55455: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
55456: LD_INT 0
55458: PPUSH
55459: PPUSH
55460: PPUSH
55461: PPUSH
55462: PPUSH
55463: PPUSH
55464: PPUSH
// result := [ ] ;
55465: LD_ADDR_VAR 0 4
55469: PUSH
55470: EMPTY
55471: ST_TO_ADDR
// if x - r < 0 then
55472: LD_VAR 0 1
55476: PUSH
55477: LD_VAR 0 3
55481: MINUS
55482: PUSH
55483: LD_INT 0
55485: LESS
55486: IFFALSE 55498
// min_x := 0 else
55488: LD_ADDR_VAR 0 8
55492: PUSH
55493: LD_INT 0
55495: ST_TO_ADDR
55496: GO 55514
// min_x := x - r ;
55498: LD_ADDR_VAR 0 8
55502: PUSH
55503: LD_VAR 0 1
55507: PUSH
55508: LD_VAR 0 3
55512: MINUS
55513: ST_TO_ADDR
// if y - r < 0 then
55514: LD_VAR 0 2
55518: PUSH
55519: LD_VAR 0 3
55523: MINUS
55524: PUSH
55525: LD_INT 0
55527: LESS
55528: IFFALSE 55540
// min_y := 0 else
55530: LD_ADDR_VAR 0 7
55534: PUSH
55535: LD_INT 0
55537: ST_TO_ADDR
55538: GO 55556
// min_y := y - r ;
55540: LD_ADDR_VAR 0 7
55544: PUSH
55545: LD_VAR 0 2
55549: PUSH
55550: LD_VAR 0 3
55554: MINUS
55555: ST_TO_ADDR
// max_x := x + r ;
55556: LD_ADDR_VAR 0 9
55560: PUSH
55561: LD_VAR 0 1
55565: PUSH
55566: LD_VAR 0 3
55570: PLUS
55571: ST_TO_ADDR
// max_y := y + r ;
55572: LD_ADDR_VAR 0 10
55576: PUSH
55577: LD_VAR 0 2
55581: PUSH
55582: LD_VAR 0 3
55586: PLUS
55587: ST_TO_ADDR
// for _x = min_x to max_x do
55588: LD_ADDR_VAR 0 5
55592: PUSH
55593: DOUBLE
55594: LD_VAR 0 8
55598: DEC
55599: ST_TO_ADDR
55600: LD_VAR 0 9
55604: PUSH
55605: FOR_TO
55606: IFFALSE 55707
// for _y = min_y to max_y do
55608: LD_ADDR_VAR 0 6
55612: PUSH
55613: DOUBLE
55614: LD_VAR 0 7
55618: DEC
55619: ST_TO_ADDR
55620: LD_VAR 0 10
55624: PUSH
55625: FOR_TO
55626: IFFALSE 55703
// begin if not ValidHex ( _x , _y ) then
55628: LD_VAR 0 5
55632: PPUSH
55633: LD_VAR 0 6
55637: PPUSH
55638: CALL_OW 488
55642: NOT
55643: IFFALSE 55647
// continue ;
55645: GO 55625
// if GetResourceTypeXY ( _x , _y ) then
55647: LD_VAR 0 5
55651: PPUSH
55652: LD_VAR 0 6
55656: PPUSH
55657: CALL_OW 283
55661: IFFALSE 55701
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55663: LD_ADDR_VAR 0 4
55667: PUSH
55668: LD_VAR 0 4
55672: PPUSH
55673: LD_VAR 0 4
55677: PUSH
55678: LD_INT 1
55680: PLUS
55681: PPUSH
55682: LD_VAR 0 5
55686: PUSH
55687: LD_VAR 0 6
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PPUSH
55696: CALL_OW 1
55700: ST_TO_ADDR
// end ;
55701: GO 55625
55703: POP
55704: POP
55705: GO 55605
55707: POP
55708: POP
// end ;
55709: LD_VAR 0 4
55713: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55714: LD_INT 0
55716: PPUSH
55717: PPUSH
55718: PPUSH
55719: PPUSH
55720: PPUSH
55721: PPUSH
55722: PPUSH
55723: PPUSH
// if not units then
55724: LD_VAR 0 1
55728: NOT
55729: IFFALSE 55733
// exit ;
55731: GO 56257
// result := UnitFilter ( units , [ f_ok ] ) ;
55733: LD_ADDR_VAR 0 3
55737: PUSH
55738: LD_VAR 0 1
55742: PPUSH
55743: LD_INT 50
55745: PUSH
55746: EMPTY
55747: LIST
55748: PPUSH
55749: CALL_OW 72
55753: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
55754: LD_ADDR_VAR 0 8
55758: PUSH
55759: LD_VAR 0 1
55763: PUSH
55764: LD_INT 1
55766: ARRAY
55767: PPUSH
55768: CALL_OW 255
55772: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
55773: LD_ADDR_VAR 0 10
55777: PUSH
55778: LD_INT 29
55780: PUSH
55781: LD_INT 91
55783: PUSH
55784: LD_INT 49
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: LIST
55791: ST_TO_ADDR
// if not result then
55792: LD_VAR 0 3
55796: NOT
55797: IFFALSE 55801
// exit ;
55799: GO 56257
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
55801: LD_ADDR_VAR 0 5
55805: PUSH
55806: LD_INT 81
55808: PUSH
55809: LD_VAR 0 8
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PPUSH
55818: CALL_OW 69
55822: ST_TO_ADDR
// for i in result do
55823: LD_ADDR_VAR 0 4
55827: PUSH
55828: LD_VAR 0 3
55832: PUSH
55833: FOR_IN
55834: IFFALSE 56255
// begin tag := GetTag ( i ) + 1 ;
55836: LD_ADDR_VAR 0 9
55840: PUSH
55841: LD_VAR 0 4
55845: PPUSH
55846: CALL_OW 110
55850: PUSH
55851: LD_INT 1
55853: PLUS
55854: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
55855: LD_ADDR_VAR 0 7
55859: PUSH
55860: LD_VAR 0 4
55864: PPUSH
55865: CALL_OW 250
55869: PPUSH
55870: LD_VAR 0 4
55874: PPUSH
55875: CALL_OW 251
55879: PPUSH
55880: LD_INT 6
55882: PPUSH
55883: CALL 55456 0 3
55887: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
55888: LD_VAR 0 4
55892: PPUSH
55893: CALL_OW 247
55897: PUSH
55898: LD_INT 2
55900: EQUAL
55901: PUSH
55902: LD_VAR 0 7
55906: AND
55907: PUSH
55908: LD_VAR 0 4
55912: PPUSH
55913: CALL_OW 264
55917: PUSH
55918: LD_VAR 0 10
55922: IN
55923: NOT
55924: AND
55925: IFFALSE 55964
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
55927: LD_VAR 0 4
55931: PPUSH
55932: LD_VAR 0 7
55936: PUSH
55937: LD_INT 1
55939: ARRAY
55940: PUSH
55941: LD_INT 1
55943: ARRAY
55944: PPUSH
55945: LD_VAR 0 7
55949: PUSH
55950: LD_INT 1
55952: ARRAY
55953: PUSH
55954: LD_INT 2
55956: ARRAY
55957: PPUSH
55958: CALL_OW 116
55962: GO 56253
// if path > tag then
55964: LD_VAR 0 2
55968: PUSH
55969: LD_VAR 0 9
55973: GREATER
55974: IFFALSE 56182
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
55976: LD_ADDR_VAR 0 6
55980: PUSH
55981: LD_VAR 0 5
55985: PPUSH
55986: LD_INT 91
55988: PUSH
55989: LD_VAR 0 4
55993: PUSH
55994: LD_INT 8
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: LIST
56001: PPUSH
56002: CALL_OW 72
56006: ST_TO_ADDR
// if nearEnemy then
56007: LD_VAR 0 6
56011: IFFALSE 56080
// begin if GetWeapon ( i ) = ru_time_lapser then
56013: LD_VAR 0 4
56017: PPUSH
56018: CALL_OW 264
56022: PUSH
56023: LD_INT 49
56025: EQUAL
56026: IFFALSE 56054
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56028: LD_VAR 0 4
56032: PPUSH
56033: LD_VAR 0 6
56037: PPUSH
56038: LD_VAR 0 4
56042: PPUSH
56043: CALL_OW 74
56047: PPUSH
56048: CALL_OW 112
56052: GO 56078
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
56054: LD_VAR 0 4
56058: PPUSH
56059: LD_VAR 0 6
56063: PPUSH
56064: LD_VAR 0 4
56068: PPUSH
56069: CALL_OW 74
56073: PPUSH
56074: CALL_OW 115
// end else
56078: GO 56180
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
56080: LD_VAR 0 4
56084: PPUSH
56085: LD_VAR 0 2
56089: PUSH
56090: LD_VAR 0 9
56094: ARRAY
56095: PUSH
56096: LD_INT 1
56098: ARRAY
56099: PPUSH
56100: LD_VAR 0 2
56104: PUSH
56105: LD_VAR 0 9
56109: ARRAY
56110: PUSH
56111: LD_INT 2
56113: ARRAY
56114: PPUSH
56115: CALL_OW 297
56119: PUSH
56120: LD_INT 6
56122: GREATER
56123: IFFALSE 56166
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
56125: LD_VAR 0 4
56129: PPUSH
56130: LD_VAR 0 2
56134: PUSH
56135: LD_VAR 0 9
56139: ARRAY
56140: PUSH
56141: LD_INT 1
56143: ARRAY
56144: PPUSH
56145: LD_VAR 0 2
56149: PUSH
56150: LD_VAR 0 9
56154: ARRAY
56155: PUSH
56156: LD_INT 2
56158: ARRAY
56159: PPUSH
56160: CALL_OW 114
56164: GO 56180
// SetTag ( i , tag ) ;
56166: LD_VAR 0 4
56170: PPUSH
56171: LD_VAR 0 9
56175: PPUSH
56176: CALL_OW 109
// end else
56180: GO 56253
// if enemy then
56182: LD_VAR 0 5
56186: IFFALSE 56253
// begin if GetWeapon ( i ) = ru_time_lapser then
56188: LD_VAR 0 4
56192: PPUSH
56193: CALL_OW 264
56197: PUSH
56198: LD_INT 49
56200: EQUAL
56201: IFFALSE 56229
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
56203: LD_VAR 0 4
56207: PPUSH
56208: LD_VAR 0 5
56212: PPUSH
56213: LD_VAR 0 4
56217: PPUSH
56218: CALL_OW 74
56222: PPUSH
56223: CALL_OW 112
56227: GO 56253
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
56229: LD_VAR 0 4
56233: PPUSH
56234: LD_VAR 0 5
56238: PPUSH
56239: LD_VAR 0 4
56243: PPUSH
56244: CALL_OW 74
56248: PPUSH
56249: CALL_OW 115
// end ; end ;
56253: GO 55833
56255: POP
56256: POP
// end ;
56257: LD_VAR 0 3
56261: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
56262: LD_INT 0
56264: PPUSH
56265: PPUSH
56266: PPUSH
// if not unit or IsInUnit ( unit ) then
56267: LD_VAR 0 1
56271: NOT
56272: PUSH
56273: LD_VAR 0 1
56277: PPUSH
56278: CALL_OW 310
56282: OR
56283: IFFALSE 56287
// exit ;
56285: GO 56378
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
56287: LD_ADDR_VAR 0 4
56291: PUSH
56292: LD_VAR 0 1
56296: PPUSH
56297: CALL_OW 250
56301: PPUSH
56302: LD_VAR 0 2
56306: PPUSH
56307: LD_INT 1
56309: PPUSH
56310: CALL_OW 272
56314: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
56315: LD_ADDR_VAR 0 5
56319: PUSH
56320: LD_VAR 0 1
56324: PPUSH
56325: CALL_OW 251
56329: PPUSH
56330: LD_VAR 0 2
56334: PPUSH
56335: LD_INT 1
56337: PPUSH
56338: CALL_OW 273
56342: ST_TO_ADDR
// if ValidHex ( x , y ) then
56343: LD_VAR 0 4
56347: PPUSH
56348: LD_VAR 0 5
56352: PPUSH
56353: CALL_OW 488
56357: IFFALSE 56378
// ComTurnXY ( unit , x , y ) ;
56359: LD_VAR 0 1
56363: PPUSH
56364: LD_VAR 0 4
56368: PPUSH
56369: LD_VAR 0 5
56373: PPUSH
56374: CALL_OW 118
// end ;
56378: LD_VAR 0 3
56382: RET
// export function SeeUnits ( side , units ) ; var i ; begin
56383: LD_INT 0
56385: PPUSH
56386: PPUSH
// result := false ;
56387: LD_ADDR_VAR 0 3
56391: PUSH
56392: LD_INT 0
56394: ST_TO_ADDR
// if not units then
56395: LD_VAR 0 2
56399: NOT
56400: IFFALSE 56404
// exit ;
56402: GO 56449
// for i in units do
56404: LD_ADDR_VAR 0 4
56408: PUSH
56409: LD_VAR 0 2
56413: PUSH
56414: FOR_IN
56415: IFFALSE 56447
// if See ( side , i ) then
56417: LD_VAR 0 1
56421: PPUSH
56422: LD_VAR 0 4
56426: PPUSH
56427: CALL_OW 292
56431: IFFALSE 56445
// begin result := true ;
56433: LD_ADDR_VAR 0 3
56437: PUSH
56438: LD_INT 1
56440: ST_TO_ADDR
// exit ;
56441: POP
56442: POP
56443: GO 56449
// end ;
56445: GO 56414
56447: POP
56448: POP
// end ;
56449: LD_VAR 0 3
56453: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
56454: LD_INT 0
56456: PPUSH
56457: PPUSH
56458: PPUSH
56459: PPUSH
// if not unit or not points then
56460: LD_VAR 0 1
56464: NOT
56465: PUSH
56466: LD_VAR 0 2
56470: NOT
56471: OR
56472: IFFALSE 56476
// exit ;
56474: GO 56566
// dist := 99999 ;
56476: LD_ADDR_VAR 0 5
56480: PUSH
56481: LD_INT 99999
56483: ST_TO_ADDR
// for i in points do
56484: LD_ADDR_VAR 0 4
56488: PUSH
56489: LD_VAR 0 2
56493: PUSH
56494: FOR_IN
56495: IFFALSE 56564
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56497: LD_ADDR_VAR 0 6
56501: PUSH
56502: LD_VAR 0 1
56506: PPUSH
56507: LD_VAR 0 4
56511: PUSH
56512: LD_INT 1
56514: ARRAY
56515: PPUSH
56516: LD_VAR 0 4
56520: PUSH
56521: LD_INT 2
56523: ARRAY
56524: PPUSH
56525: CALL_OW 297
56529: ST_TO_ADDR
// if tmpDist < dist then
56530: LD_VAR 0 6
56534: PUSH
56535: LD_VAR 0 5
56539: LESS
56540: IFFALSE 56562
// begin result := i ;
56542: LD_ADDR_VAR 0 3
56546: PUSH
56547: LD_VAR 0 4
56551: ST_TO_ADDR
// dist := tmpDist ;
56552: LD_ADDR_VAR 0 5
56556: PUSH
56557: LD_VAR 0 6
56561: ST_TO_ADDR
// end ; end ;
56562: GO 56494
56564: POP
56565: POP
// end ;
56566: LD_VAR 0 3
56570: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
56571: LD_INT 0
56573: PPUSH
// uc_side := side ;
56574: LD_ADDR_OWVAR 20
56578: PUSH
56579: LD_VAR 0 1
56583: ST_TO_ADDR
// uc_nation := 3 ;
56584: LD_ADDR_OWVAR 21
56588: PUSH
56589: LD_INT 3
56591: ST_TO_ADDR
// vc_chassis := 25 ;
56592: LD_ADDR_OWVAR 37
56596: PUSH
56597: LD_INT 25
56599: ST_TO_ADDR
// vc_engine := engine_siberite ;
56600: LD_ADDR_OWVAR 39
56604: PUSH
56605: LD_INT 3
56607: ST_TO_ADDR
// vc_control := control_computer ;
56608: LD_ADDR_OWVAR 38
56612: PUSH
56613: LD_INT 3
56615: ST_TO_ADDR
// vc_weapon := 59 ;
56616: LD_ADDR_OWVAR 40
56620: PUSH
56621: LD_INT 59
56623: ST_TO_ADDR
// result := CreateVehicle ;
56624: LD_ADDR_VAR 0 5
56628: PUSH
56629: CALL_OW 45
56633: ST_TO_ADDR
// SetDir ( result , d ) ;
56634: LD_VAR 0 5
56638: PPUSH
56639: LD_VAR 0 4
56643: PPUSH
56644: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
56648: LD_VAR 0 5
56652: PPUSH
56653: LD_VAR 0 2
56657: PPUSH
56658: LD_VAR 0 3
56662: PPUSH
56663: LD_INT 0
56665: PPUSH
56666: CALL_OW 48
// end ;
56670: LD_VAR 0 5
56674: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
56675: LD_INT 0
56677: PPUSH
56678: PPUSH
56679: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
56680: LD_ADDR_VAR 0 2
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: LD_INT 0
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
56703: LD_VAR 0 1
56707: NOT
56708: PUSH
56709: LD_VAR 0 1
56713: PPUSH
56714: CALL_OW 264
56718: PUSH
56719: LD_INT 12
56721: PUSH
56722: LD_INT 51
56724: PUSH
56725: LD_INT 32
56727: PUSH
56728: LD_INT 89
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: IN
56737: NOT
56738: OR
56739: IFFALSE 56743
// exit ;
56741: GO 56841
// for i := 1 to 3 do
56743: LD_ADDR_VAR 0 3
56747: PUSH
56748: DOUBLE
56749: LD_INT 1
56751: DEC
56752: ST_TO_ADDR
56753: LD_INT 3
56755: PUSH
56756: FOR_TO
56757: IFFALSE 56839
// begin tmp := GetCargo ( cargo , i ) ;
56759: LD_ADDR_VAR 0 4
56763: PUSH
56764: LD_VAR 0 1
56768: PPUSH
56769: LD_VAR 0 3
56773: PPUSH
56774: CALL_OW 289
56778: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
56779: LD_ADDR_VAR 0 2
56783: PUSH
56784: LD_VAR 0 2
56788: PPUSH
56789: LD_VAR 0 3
56793: PPUSH
56794: LD_VAR 0 4
56798: PPUSH
56799: CALL_OW 1
56803: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
56804: LD_ADDR_VAR 0 2
56808: PUSH
56809: LD_VAR 0 2
56813: PPUSH
56814: LD_INT 4
56816: PPUSH
56817: LD_VAR 0 2
56821: PUSH
56822: LD_INT 4
56824: ARRAY
56825: PUSH
56826: LD_VAR 0 4
56830: PLUS
56831: PPUSH
56832: CALL_OW 1
56836: ST_TO_ADDR
// end ;
56837: GO 56756
56839: POP
56840: POP
// end ;
56841: LD_VAR 0 2
56845: RET
// export function Length ( array ) ; begin
56846: LD_INT 0
56848: PPUSH
// result := array + 0 ;
56849: LD_ADDR_VAR 0 2
56853: PUSH
56854: LD_VAR 0 1
56858: PUSH
56859: LD_INT 0
56861: PLUS
56862: ST_TO_ADDR
// end ;
56863: LD_VAR 0 2
56867: RET
// export function PrepareArray ( array ) ; begin
56868: LD_INT 0
56870: PPUSH
// result := array diff 0 ;
56871: LD_ADDR_VAR 0 2
56875: PUSH
56876: LD_VAR 0 1
56880: PUSH
56881: LD_INT 0
56883: DIFF
56884: ST_TO_ADDR
// if not result [ 1 ] then
56885: LD_VAR 0 2
56889: PUSH
56890: LD_INT 1
56892: ARRAY
56893: NOT
56894: IFFALSE 56914
// result := Delete ( result , 1 ) ;
56896: LD_ADDR_VAR 0 2
56900: PUSH
56901: LD_VAR 0 2
56905: PPUSH
56906: LD_INT 1
56908: PPUSH
56909: CALL_OW 3
56913: ST_TO_ADDR
// end ;
56914: LD_VAR 0 2
56918: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
56919: LD_INT 0
56921: PPUSH
56922: PPUSH
56923: PPUSH
56924: PPUSH
// sibRocketRange := 25 ;
56925: LD_ADDR_VAR 0 6
56929: PUSH
56930: LD_INT 25
56932: ST_TO_ADDR
// result := false ;
56933: LD_ADDR_VAR 0 4
56937: PUSH
56938: LD_INT 0
56940: ST_TO_ADDR
// for i := 0 to 5 do
56941: LD_ADDR_VAR 0 5
56945: PUSH
56946: DOUBLE
56947: LD_INT 0
56949: DEC
56950: ST_TO_ADDR
56951: LD_INT 5
56953: PUSH
56954: FOR_TO
56955: IFFALSE 57022
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
56957: LD_VAR 0 1
56961: PPUSH
56962: LD_VAR 0 5
56966: PPUSH
56967: LD_VAR 0 6
56971: PPUSH
56972: CALL_OW 272
56976: PPUSH
56977: LD_VAR 0 2
56981: PPUSH
56982: LD_VAR 0 5
56986: PPUSH
56987: LD_VAR 0 6
56991: PPUSH
56992: CALL_OW 273
56996: PPUSH
56997: LD_VAR 0 3
57001: PPUSH
57002: CALL_OW 309
57006: IFFALSE 57020
// begin result := true ;
57008: LD_ADDR_VAR 0 4
57012: PUSH
57013: LD_INT 1
57015: ST_TO_ADDR
// exit ;
57016: POP
57017: POP
57018: GO 57024
// end ;
57020: GO 56954
57022: POP
57023: POP
// end ;
57024: LD_VAR 0 4
57028: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
57029: LD_INT 0
57031: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
57032: LD_VAR 0 1
57036: PPUSH
57037: LD_VAR 0 2
57041: PPUSH
57042: LD_INT 0
57044: PPUSH
57045: LD_INT 0
57047: PPUSH
57048: LD_INT 1
57050: PPUSH
57051: LD_INT 0
57053: PPUSH
57054: CALL_OW 587
// end ; end_of_file
57058: LD_VAR 0 3
57062: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
57063: LD_VAR 0 1
57067: PUSH
57068: LD_INT 200
57070: DOUBLE
57071: GREATEREQUAL
57072: IFFALSE 57080
57074: LD_INT 299
57076: DOUBLE
57077: LESSEQUAL
57078: IFTRUE 57082
57080: GO 57114
57082: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
57083: LD_VAR 0 1
57087: PPUSH
57088: LD_VAR 0 2
57092: PPUSH
57093: LD_VAR 0 3
57097: PPUSH
57098: LD_VAR 0 4
57102: PPUSH
57103: LD_VAR 0 5
57107: PPUSH
57108: CALL 57602 0 5
57112: GO 57191
57114: LD_INT 300
57116: DOUBLE
57117: GREATEREQUAL
57118: IFFALSE 57126
57120: LD_INT 399
57122: DOUBLE
57123: LESSEQUAL
57124: IFTRUE 57128
57126: GO 57190
57128: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
57129: LD_VAR 0 1
57133: PPUSH
57134: LD_VAR 0 2
57138: PPUSH
57139: LD_VAR 0 3
57143: PPUSH
57144: LD_VAR 0 4
57148: PPUSH
57149: LD_VAR 0 5
57153: PPUSH
57154: LD_VAR 0 6
57158: PPUSH
57159: LD_VAR 0 7
57163: PPUSH
57164: LD_VAR 0 8
57168: PPUSH
57169: LD_VAR 0 9
57173: PPUSH
57174: LD_VAR 0 10
57178: PPUSH
57179: LD_VAR 0 11
57183: PPUSH
57184: CALL 74018 0 11
57188: GO 57191
57190: POP
// end ;
57191: PPOPN 11
57193: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
57194: LD_VAR 0 1
57198: PPUSH
57199: LD_VAR 0 2
57203: PPUSH
57204: LD_VAR 0 3
57208: PPUSH
57209: LD_VAR 0 4
57213: PPUSH
57214: LD_VAR 0 5
57218: PPUSH
57219: CALL 57338 0 5
// end ; end_of_file
57223: PPOPN 5
57225: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
57226: LD_INT 0
57228: PPUSH
57229: PPUSH
57230: PPUSH
57231: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
57232: LD_VAR 0 1
57236: PPUSH
57237: CALL_OW 264
57241: PUSH
57242: LD_INT 91
57244: EQUAL
57245: IFFALSE 57317
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
57247: LD_INT 68
57249: PPUSH
57250: LD_VAR 0 1
57254: PPUSH
57255: CALL_OW 255
57259: PPUSH
57260: CALL_OW 321
57264: PUSH
57265: LD_INT 2
57267: EQUAL
57268: IFFALSE 57280
// eff := 70 else
57270: LD_ADDR_VAR 0 4
57274: PUSH
57275: LD_INT 70
57277: ST_TO_ADDR
57278: GO 57288
// eff := 30 ;
57280: LD_ADDR_VAR 0 4
57284: PUSH
57285: LD_INT 30
57287: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
57288: LD_VAR 0 1
57292: PPUSH
57293: CALL_OW 250
57297: PPUSH
57298: LD_VAR 0 1
57302: PPUSH
57303: CALL_OW 251
57307: PPUSH
57308: LD_VAR 0 4
57312: PPUSH
57313: CALL_OW 495
// end ; end ;
57317: LD_VAR 0 2
57321: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
57322: LD_INT 0
57324: PPUSH
// end ;
57325: LD_VAR 0 4
57329: RET
// export function SOS_Command ( cmd ) ; begin
57330: LD_INT 0
57332: PPUSH
// end ;
57333: LD_VAR 0 2
57337: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
57338: LD_INT 0
57340: PPUSH
// end ;
57341: LD_VAR 0 6
57345: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
57346: LD_INT 0
57348: PPUSH
57349: PPUSH
// if not vehicle or not factory then
57350: LD_VAR 0 1
57354: NOT
57355: PUSH
57356: LD_VAR 0 2
57360: NOT
57361: OR
57362: IFFALSE 57366
// exit ;
57364: GO 57597
// if factoryWaypoints >= factory then
57366: LD_EXP 104
57370: PUSH
57371: LD_VAR 0 2
57375: GREATEREQUAL
57376: IFFALSE 57597
// if factoryWaypoints [ factory ] then
57378: LD_EXP 104
57382: PUSH
57383: LD_VAR 0 2
57387: ARRAY
57388: IFFALSE 57597
// begin if GetControl ( vehicle ) = control_manual then
57390: LD_VAR 0 1
57394: PPUSH
57395: CALL_OW 263
57399: PUSH
57400: LD_INT 1
57402: EQUAL
57403: IFFALSE 57484
// begin driver := IsDrivenBy ( vehicle ) ;
57405: LD_ADDR_VAR 0 4
57409: PUSH
57410: LD_VAR 0 1
57414: PPUSH
57415: CALL_OW 311
57419: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
57420: LD_VAR 0 4
57424: PPUSH
57425: LD_EXP 104
57429: PUSH
57430: LD_VAR 0 2
57434: ARRAY
57435: PUSH
57436: LD_INT 3
57438: ARRAY
57439: PPUSH
57440: LD_EXP 104
57444: PUSH
57445: LD_VAR 0 2
57449: ARRAY
57450: PUSH
57451: LD_INT 4
57453: ARRAY
57454: PPUSH
57455: CALL_OW 171
// AddComExitVehicle ( driver ) ;
57459: LD_VAR 0 4
57463: PPUSH
57464: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
57468: LD_VAR 0 4
57472: PPUSH
57473: LD_VAR 0 2
57477: PPUSH
57478: CALL_OW 180
// end else
57482: GO 57597
// if GetControl ( vehicle ) = control_remote then
57484: LD_VAR 0 1
57488: PPUSH
57489: CALL_OW 263
57493: PUSH
57494: LD_INT 2
57496: EQUAL
57497: IFFALSE 57558
// begin wait ( 0 0$2 ) ;
57499: LD_INT 70
57501: PPUSH
57502: CALL_OW 67
// if Connect ( vehicle ) then
57506: LD_VAR 0 1
57510: PPUSH
57511: CALL 23748 0 1
57515: IFFALSE 57556
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
57517: LD_VAR 0 1
57521: PPUSH
57522: LD_EXP 104
57526: PUSH
57527: LD_VAR 0 2
57531: ARRAY
57532: PUSH
57533: LD_INT 3
57535: ARRAY
57536: PPUSH
57537: LD_EXP 104
57541: PUSH
57542: LD_VAR 0 2
57546: ARRAY
57547: PUSH
57548: LD_INT 4
57550: ARRAY
57551: PPUSH
57552: CALL_OW 171
// end else
57556: GO 57597
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
57558: LD_VAR 0 1
57562: PPUSH
57563: LD_EXP 104
57567: PUSH
57568: LD_VAR 0 2
57572: ARRAY
57573: PUSH
57574: LD_INT 3
57576: ARRAY
57577: PPUSH
57578: LD_EXP 104
57582: PUSH
57583: LD_VAR 0 2
57587: ARRAY
57588: PUSH
57589: LD_INT 4
57591: ARRAY
57592: PPUSH
57593: CALL_OW 171
// end ; end ;
57597: LD_VAR 0 3
57601: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
57602: LD_INT 0
57604: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
57605: LD_VAR 0 1
57609: PUSH
57610: LD_INT 250
57612: EQUAL
57613: PUSH
57614: LD_VAR 0 2
57618: PPUSH
57619: CALL_OW 264
57623: PUSH
57624: LD_INT 81
57626: EQUAL
57627: AND
57628: IFFALSE 57649
// MinerPlaceMine ( unit , x , y ) ;
57630: LD_VAR 0 2
57634: PPUSH
57635: LD_VAR 0 4
57639: PPUSH
57640: LD_VAR 0 5
57644: PPUSH
57645: CALL 60034 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
57649: LD_VAR 0 1
57653: PUSH
57654: LD_INT 251
57656: EQUAL
57657: PUSH
57658: LD_VAR 0 2
57662: PPUSH
57663: CALL_OW 264
57667: PUSH
57668: LD_INT 81
57670: EQUAL
57671: AND
57672: IFFALSE 57693
// MinerDetonateMine ( unit , x , y ) ;
57674: LD_VAR 0 2
57678: PPUSH
57679: LD_VAR 0 4
57683: PPUSH
57684: LD_VAR 0 5
57688: PPUSH
57689: CALL 60309 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
57693: LD_VAR 0 1
57697: PUSH
57698: LD_INT 252
57700: EQUAL
57701: PUSH
57702: LD_VAR 0 2
57706: PPUSH
57707: CALL_OW 264
57711: PUSH
57712: LD_INT 81
57714: EQUAL
57715: AND
57716: IFFALSE 57737
// MinerCreateMinefield ( unit , x , y ) ;
57718: LD_VAR 0 2
57722: PPUSH
57723: LD_VAR 0 4
57727: PPUSH
57728: LD_VAR 0 5
57732: PPUSH
57733: CALL 60726 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
57737: LD_VAR 0 1
57741: PUSH
57742: LD_INT 253
57744: EQUAL
57745: PUSH
57746: LD_VAR 0 2
57750: PPUSH
57751: CALL_OW 257
57755: PUSH
57756: LD_INT 5
57758: EQUAL
57759: AND
57760: IFFALSE 57781
// ComBinocular ( unit , x , y ) ;
57762: LD_VAR 0 2
57766: PPUSH
57767: LD_VAR 0 4
57771: PPUSH
57772: LD_VAR 0 5
57776: PPUSH
57777: CALL 61095 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
57781: LD_VAR 0 1
57785: PUSH
57786: LD_INT 254
57788: EQUAL
57789: PUSH
57790: LD_VAR 0 2
57794: PPUSH
57795: CALL_OW 264
57799: PUSH
57800: LD_INT 99
57802: EQUAL
57803: AND
57804: PUSH
57805: LD_VAR 0 3
57809: PPUSH
57810: CALL_OW 263
57814: PUSH
57815: LD_INT 3
57817: EQUAL
57818: AND
57819: IFFALSE 57835
// HackDestroyVehicle ( unit , selectedUnit ) ;
57821: LD_VAR 0 2
57825: PPUSH
57826: LD_VAR 0 3
57830: PPUSH
57831: CALL 59398 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
57835: LD_VAR 0 1
57839: PUSH
57840: LD_INT 255
57842: EQUAL
57843: PUSH
57844: LD_VAR 0 2
57848: PPUSH
57849: CALL_OW 264
57853: PUSH
57854: LD_INT 14
57856: PUSH
57857: LD_INT 53
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: IN
57864: AND
57865: PUSH
57866: LD_VAR 0 4
57870: PPUSH
57871: LD_VAR 0 5
57875: PPUSH
57876: CALL_OW 488
57880: AND
57881: IFFALSE 57905
// CutTreeXYR ( unit , x , y , 12 ) ;
57883: LD_VAR 0 2
57887: PPUSH
57888: LD_VAR 0 4
57892: PPUSH
57893: LD_VAR 0 5
57897: PPUSH
57898: LD_INT 12
57900: PPUSH
57901: CALL 57968 0 4
// if cmd = 256 then
57905: LD_VAR 0 1
57909: PUSH
57910: LD_INT 256
57912: EQUAL
57913: IFFALSE 57934
// SetFactoryWaypoint ( unit , x , y ) ;
57915: LD_VAR 0 2
57919: PPUSH
57920: LD_VAR 0 4
57924: PPUSH
57925: LD_VAR 0 5
57929: PPUSH
57930: CALL 75998 0 3
// if cmd = 257 then
57934: LD_VAR 0 1
57938: PUSH
57939: LD_INT 257
57941: EQUAL
57942: IFFALSE 57963
// SetWarehouseGatheringPoint ( unit , x , y ) ;
57944: LD_VAR 0 2
57948: PPUSH
57949: LD_VAR 0 4
57953: PPUSH
57954: LD_VAR 0 5
57958: PPUSH
57959: CALL 76360 0 3
// end ;
57963: LD_VAR 0 6
57967: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
57968: LD_INT 0
57970: PPUSH
57971: PPUSH
57972: PPUSH
57973: PPUSH
57974: PPUSH
57975: PPUSH
57976: PPUSH
57977: PPUSH
57978: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
57979: LD_VAR 0 1
57983: NOT
57984: PUSH
57985: LD_VAR 0 2
57989: PPUSH
57990: LD_VAR 0 3
57994: PPUSH
57995: CALL_OW 488
57999: NOT
58000: OR
58001: PUSH
58002: LD_VAR 0 4
58006: NOT
58007: OR
58008: IFFALSE 58012
// exit ;
58010: GO 58352
// list := [ ] ;
58012: LD_ADDR_VAR 0 13
58016: PUSH
58017: EMPTY
58018: ST_TO_ADDR
// if x - r < 0 then
58019: LD_VAR 0 2
58023: PUSH
58024: LD_VAR 0 4
58028: MINUS
58029: PUSH
58030: LD_INT 0
58032: LESS
58033: IFFALSE 58045
// min_x := 0 else
58035: LD_ADDR_VAR 0 7
58039: PUSH
58040: LD_INT 0
58042: ST_TO_ADDR
58043: GO 58061
// min_x := x - r ;
58045: LD_ADDR_VAR 0 7
58049: PUSH
58050: LD_VAR 0 2
58054: PUSH
58055: LD_VAR 0 4
58059: MINUS
58060: ST_TO_ADDR
// if y - r < 0 then
58061: LD_VAR 0 3
58065: PUSH
58066: LD_VAR 0 4
58070: MINUS
58071: PUSH
58072: LD_INT 0
58074: LESS
58075: IFFALSE 58087
// min_y := 0 else
58077: LD_ADDR_VAR 0 8
58081: PUSH
58082: LD_INT 0
58084: ST_TO_ADDR
58085: GO 58103
// min_y := y - r ;
58087: LD_ADDR_VAR 0 8
58091: PUSH
58092: LD_VAR 0 3
58096: PUSH
58097: LD_VAR 0 4
58101: MINUS
58102: ST_TO_ADDR
// max_x := x + r ;
58103: LD_ADDR_VAR 0 9
58107: PUSH
58108: LD_VAR 0 2
58112: PUSH
58113: LD_VAR 0 4
58117: PLUS
58118: ST_TO_ADDR
// max_y := y + r ;
58119: LD_ADDR_VAR 0 10
58123: PUSH
58124: LD_VAR 0 3
58128: PUSH
58129: LD_VAR 0 4
58133: PLUS
58134: ST_TO_ADDR
// for _x = min_x to max_x do
58135: LD_ADDR_VAR 0 11
58139: PUSH
58140: DOUBLE
58141: LD_VAR 0 7
58145: DEC
58146: ST_TO_ADDR
58147: LD_VAR 0 9
58151: PUSH
58152: FOR_TO
58153: IFFALSE 58270
// for _y = min_y to max_y do
58155: LD_ADDR_VAR 0 12
58159: PUSH
58160: DOUBLE
58161: LD_VAR 0 8
58165: DEC
58166: ST_TO_ADDR
58167: LD_VAR 0 10
58171: PUSH
58172: FOR_TO
58173: IFFALSE 58266
// begin if not ValidHex ( _x , _y ) then
58175: LD_VAR 0 11
58179: PPUSH
58180: LD_VAR 0 12
58184: PPUSH
58185: CALL_OW 488
58189: NOT
58190: IFFALSE 58194
// continue ;
58192: GO 58172
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58194: LD_VAR 0 11
58198: PPUSH
58199: LD_VAR 0 12
58203: PPUSH
58204: CALL_OW 351
58208: PUSH
58209: LD_VAR 0 11
58213: PPUSH
58214: LD_VAR 0 12
58218: PPUSH
58219: CALL_OW 554
58223: AND
58224: IFFALSE 58264
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58226: LD_ADDR_VAR 0 13
58230: PUSH
58231: LD_VAR 0 13
58235: PPUSH
58236: LD_VAR 0 13
58240: PUSH
58241: LD_INT 1
58243: PLUS
58244: PPUSH
58245: LD_VAR 0 11
58249: PUSH
58250: LD_VAR 0 12
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PPUSH
58259: CALL_OW 2
58263: ST_TO_ADDR
// end ;
58264: GO 58172
58266: POP
58267: POP
58268: GO 58152
58270: POP
58271: POP
// if not list then
58272: LD_VAR 0 13
58276: NOT
58277: IFFALSE 58281
// exit ;
58279: GO 58352
// for i in list do
58281: LD_ADDR_VAR 0 6
58285: PUSH
58286: LD_VAR 0 13
58290: PUSH
58291: FOR_IN
58292: IFFALSE 58350
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
58294: LD_VAR 0 1
58298: PPUSH
58299: LD_STRING M
58301: PUSH
58302: LD_VAR 0 6
58306: PUSH
58307: LD_INT 1
58309: ARRAY
58310: PUSH
58311: LD_VAR 0 6
58315: PUSH
58316: LD_INT 2
58318: ARRAY
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: LD_INT 0
58325: PUSH
58326: LD_INT 0
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: PUSH
58341: EMPTY
58342: LIST
58343: PPUSH
58344: CALL_OW 447
58348: GO 58291
58350: POP
58351: POP
// end ;
58352: LD_VAR 0 5
58356: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
58357: LD_EXP 35
58361: NOT
58362: IFFALSE 58412
58364: GO 58366
58366: DISABLE
// begin initHack := true ;
58367: LD_ADDR_EXP 35
58371: PUSH
58372: LD_INT 1
58374: ST_TO_ADDR
// hackTanks := [ ] ;
58375: LD_ADDR_EXP 36
58379: PUSH
58380: EMPTY
58381: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
58382: LD_ADDR_EXP 37
58386: PUSH
58387: EMPTY
58388: ST_TO_ADDR
// hackLimit := 3 ;
58389: LD_ADDR_EXP 38
58393: PUSH
58394: LD_INT 3
58396: ST_TO_ADDR
// hackDist := 12 ;
58397: LD_ADDR_EXP 39
58401: PUSH
58402: LD_INT 12
58404: ST_TO_ADDR
// hackCounter := [ ] ;
58405: LD_ADDR_EXP 40
58409: PUSH
58410: EMPTY
58411: ST_TO_ADDR
// end ;
58412: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
58413: LD_EXP 35
58417: PUSH
58418: LD_INT 34
58420: PUSH
58421: LD_INT 99
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PPUSH
58428: CALL_OW 69
58432: AND
58433: IFFALSE 58686
58435: GO 58437
58437: DISABLE
58438: LD_INT 0
58440: PPUSH
58441: PPUSH
// begin enable ;
58442: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
58443: LD_ADDR_VAR 0 1
58447: PUSH
58448: LD_INT 34
58450: PUSH
58451: LD_INT 99
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PPUSH
58458: CALL_OW 69
58462: PUSH
58463: FOR_IN
58464: IFFALSE 58684
// begin if not i in hackTanks then
58466: LD_VAR 0 1
58470: PUSH
58471: LD_EXP 36
58475: IN
58476: NOT
58477: IFFALSE 58560
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
58479: LD_ADDR_EXP 36
58483: PUSH
58484: LD_EXP 36
58488: PPUSH
58489: LD_EXP 36
58493: PUSH
58494: LD_INT 1
58496: PLUS
58497: PPUSH
58498: LD_VAR 0 1
58502: PPUSH
58503: CALL_OW 1
58507: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
58508: LD_ADDR_EXP 37
58512: PUSH
58513: LD_EXP 37
58517: PPUSH
58518: LD_EXP 37
58522: PUSH
58523: LD_INT 1
58525: PLUS
58526: PPUSH
58527: EMPTY
58528: PPUSH
58529: CALL_OW 1
58533: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
58534: LD_ADDR_EXP 40
58538: PUSH
58539: LD_EXP 40
58543: PPUSH
58544: LD_EXP 40
58548: PUSH
58549: LD_INT 1
58551: PLUS
58552: PPUSH
58553: EMPTY
58554: PPUSH
58555: CALL_OW 1
58559: ST_TO_ADDR
// end ; if not IsOk ( i ) then
58560: LD_VAR 0 1
58564: PPUSH
58565: CALL_OW 302
58569: NOT
58570: IFFALSE 58583
// begin HackUnlinkAll ( i ) ;
58572: LD_VAR 0 1
58576: PPUSH
58577: CALL 58689 0 1
// continue ;
58581: GO 58463
// end ; HackCheckCapturedStatus ( i ) ;
58583: LD_VAR 0 1
58587: PPUSH
58588: CALL 59132 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
58592: LD_ADDR_VAR 0 2
58596: PUSH
58597: LD_INT 81
58599: PUSH
58600: LD_VAR 0 1
58604: PPUSH
58605: CALL_OW 255
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 33
58616: PUSH
58617: LD_INT 3
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 91
58626: PUSH
58627: LD_VAR 0 1
58631: PUSH
58632: LD_EXP 39
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 50
58644: PUSH
58645: EMPTY
58646: LIST
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: PPUSH
58654: CALL_OW 69
58658: ST_TO_ADDR
// if not tmp then
58659: LD_VAR 0 2
58663: NOT
58664: IFFALSE 58668
// continue ;
58666: GO 58463
// HackLink ( i , tmp ) ;
58668: LD_VAR 0 1
58672: PPUSH
58673: LD_VAR 0 2
58677: PPUSH
58678: CALL 58825 0 2
// end ;
58682: GO 58463
58684: POP
58685: POP
// end ;
58686: PPOPN 2
58688: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
58689: LD_INT 0
58691: PPUSH
58692: PPUSH
58693: PPUSH
// if not hack in hackTanks then
58694: LD_VAR 0 1
58698: PUSH
58699: LD_EXP 36
58703: IN
58704: NOT
58705: IFFALSE 58709
// exit ;
58707: GO 58820
// index := GetElementIndex ( hackTanks , hack ) ;
58709: LD_ADDR_VAR 0 4
58713: PUSH
58714: LD_EXP 36
58718: PPUSH
58719: LD_VAR 0 1
58723: PPUSH
58724: CALL 20564 0 2
58728: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
58729: LD_EXP 37
58733: PUSH
58734: LD_VAR 0 4
58738: ARRAY
58739: IFFALSE 58820
// begin for i in hackTanksCaptured [ index ] do
58741: LD_ADDR_VAR 0 3
58745: PUSH
58746: LD_EXP 37
58750: PUSH
58751: LD_VAR 0 4
58755: ARRAY
58756: PUSH
58757: FOR_IN
58758: IFFALSE 58784
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
58760: LD_VAR 0 3
58764: PUSH
58765: LD_INT 1
58767: ARRAY
58768: PPUSH
58769: LD_VAR 0 3
58773: PUSH
58774: LD_INT 2
58776: ARRAY
58777: PPUSH
58778: CALL_OW 235
58782: GO 58757
58784: POP
58785: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
58786: LD_ADDR_EXP 37
58790: PUSH
58791: LD_EXP 37
58795: PPUSH
58796: LD_VAR 0 4
58800: PPUSH
58801: EMPTY
58802: PPUSH
58803: CALL_OW 1
58807: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
58808: LD_VAR 0 1
58812: PPUSH
58813: LD_INT 0
58815: PPUSH
58816: CALL_OW 505
// end ; end ;
58820: LD_VAR 0 2
58824: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
58825: LD_INT 0
58827: PPUSH
58828: PPUSH
58829: PPUSH
// if not hack in hackTanks or not vehicles then
58830: LD_VAR 0 1
58834: PUSH
58835: LD_EXP 36
58839: IN
58840: NOT
58841: PUSH
58842: LD_VAR 0 2
58846: NOT
58847: OR
58848: IFFALSE 58852
// exit ;
58850: GO 59127
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
58852: LD_ADDR_VAR 0 2
58856: PUSH
58857: LD_VAR 0 1
58861: PPUSH
58862: LD_VAR 0 2
58866: PPUSH
58867: LD_INT 1
58869: PPUSH
58870: LD_INT 1
58872: PPUSH
58873: CALL 21214 0 4
58877: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
58878: LD_ADDR_VAR 0 5
58882: PUSH
58883: LD_EXP 36
58887: PPUSH
58888: LD_VAR 0 1
58892: PPUSH
58893: CALL 20564 0 2
58897: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
58898: LD_EXP 37
58902: PUSH
58903: LD_VAR 0 5
58907: ARRAY
58908: PUSH
58909: LD_EXP 38
58913: LESS
58914: IFFALSE 59103
// begin for i := 1 to vehicles do
58916: LD_ADDR_VAR 0 4
58920: PUSH
58921: DOUBLE
58922: LD_INT 1
58924: DEC
58925: ST_TO_ADDR
58926: LD_VAR 0 2
58930: PUSH
58931: FOR_TO
58932: IFFALSE 59101
// begin if hackTanksCaptured [ index ] = hackLimit then
58934: LD_EXP 37
58938: PUSH
58939: LD_VAR 0 5
58943: ARRAY
58944: PUSH
58945: LD_EXP 38
58949: EQUAL
58950: IFFALSE 58954
// break ;
58952: GO 59101
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
58954: LD_ADDR_EXP 40
58958: PUSH
58959: LD_EXP 40
58963: PPUSH
58964: LD_VAR 0 5
58968: PPUSH
58969: LD_EXP 40
58973: PUSH
58974: LD_VAR 0 5
58978: ARRAY
58979: PUSH
58980: LD_INT 1
58982: PLUS
58983: PPUSH
58984: CALL_OW 1
58988: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
58989: LD_ADDR_EXP 37
58993: PUSH
58994: LD_EXP 37
58998: PPUSH
58999: LD_VAR 0 5
59003: PUSH
59004: LD_EXP 37
59008: PUSH
59009: LD_VAR 0 5
59013: ARRAY
59014: PUSH
59015: LD_INT 1
59017: PLUS
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PPUSH
59023: LD_VAR 0 2
59027: PUSH
59028: LD_VAR 0 4
59032: ARRAY
59033: PUSH
59034: LD_VAR 0 2
59038: PUSH
59039: LD_VAR 0 4
59043: ARRAY
59044: PPUSH
59045: CALL_OW 255
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PPUSH
59054: CALL 20779 0 3
59058: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
59059: LD_VAR 0 2
59063: PUSH
59064: LD_VAR 0 4
59068: ARRAY
59069: PPUSH
59070: LD_VAR 0 1
59074: PPUSH
59075: CALL_OW 255
59079: PPUSH
59080: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
59084: LD_VAR 0 2
59088: PUSH
59089: LD_VAR 0 4
59093: ARRAY
59094: PPUSH
59095: CALL_OW 141
// end ;
59099: GO 58931
59101: POP
59102: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59103: LD_VAR 0 1
59107: PPUSH
59108: LD_EXP 37
59112: PUSH
59113: LD_VAR 0 5
59117: ARRAY
59118: PUSH
59119: LD_INT 0
59121: PLUS
59122: PPUSH
59123: CALL_OW 505
// end ;
59127: LD_VAR 0 3
59131: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
59132: LD_INT 0
59134: PPUSH
59135: PPUSH
59136: PPUSH
59137: PPUSH
// if not hack in hackTanks then
59138: LD_VAR 0 1
59142: PUSH
59143: LD_EXP 36
59147: IN
59148: NOT
59149: IFFALSE 59153
// exit ;
59151: GO 59393
// index := GetElementIndex ( hackTanks , hack ) ;
59153: LD_ADDR_VAR 0 4
59157: PUSH
59158: LD_EXP 36
59162: PPUSH
59163: LD_VAR 0 1
59167: PPUSH
59168: CALL 20564 0 2
59172: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
59173: LD_ADDR_VAR 0 3
59177: PUSH
59178: DOUBLE
59179: LD_EXP 37
59183: PUSH
59184: LD_VAR 0 4
59188: ARRAY
59189: INC
59190: ST_TO_ADDR
59191: LD_INT 1
59193: PUSH
59194: FOR_DOWNTO
59195: IFFALSE 59367
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
59197: LD_ADDR_VAR 0 5
59201: PUSH
59202: LD_EXP 37
59206: PUSH
59207: LD_VAR 0 4
59211: ARRAY
59212: PUSH
59213: LD_VAR 0 3
59217: ARRAY
59218: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
59219: LD_VAR 0 5
59223: PUSH
59224: LD_INT 1
59226: ARRAY
59227: PPUSH
59228: CALL_OW 302
59232: NOT
59233: PUSH
59234: LD_VAR 0 5
59238: PUSH
59239: LD_INT 1
59241: ARRAY
59242: PPUSH
59243: CALL_OW 255
59247: PUSH
59248: LD_VAR 0 1
59252: PPUSH
59253: CALL_OW 255
59257: NONEQUAL
59258: OR
59259: IFFALSE 59365
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
59261: LD_VAR 0 5
59265: PUSH
59266: LD_INT 1
59268: ARRAY
59269: PPUSH
59270: CALL_OW 305
59274: PUSH
59275: LD_VAR 0 5
59279: PUSH
59280: LD_INT 1
59282: ARRAY
59283: PPUSH
59284: CALL_OW 255
59288: PUSH
59289: LD_VAR 0 1
59293: PPUSH
59294: CALL_OW 255
59298: EQUAL
59299: AND
59300: IFFALSE 59324
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
59302: LD_VAR 0 5
59306: PUSH
59307: LD_INT 1
59309: ARRAY
59310: PPUSH
59311: LD_VAR 0 5
59315: PUSH
59316: LD_INT 2
59318: ARRAY
59319: PPUSH
59320: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
59324: LD_ADDR_EXP 37
59328: PUSH
59329: LD_EXP 37
59333: PPUSH
59334: LD_VAR 0 4
59338: PPUSH
59339: LD_EXP 37
59343: PUSH
59344: LD_VAR 0 4
59348: ARRAY
59349: PPUSH
59350: LD_VAR 0 3
59354: PPUSH
59355: CALL_OW 3
59359: PPUSH
59360: CALL_OW 1
59364: ST_TO_ADDR
// end ; end ;
59365: GO 59194
59367: POP
59368: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59369: LD_VAR 0 1
59373: PPUSH
59374: LD_EXP 37
59378: PUSH
59379: LD_VAR 0 4
59383: ARRAY
59384: PUSH
59385: LD_INT 0
59387: PLUS
59388: PPUSH
59389: CALL_OW 505
// end ;
59393: LD_VAR 0 2
59397: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
59398: LD_INT 0
59400: PPUSH
59401: PPUSH
59402: PPUSH
59403: PPUSH
// if not hack in hackTanks then
59404: LD_VAR 0 1
59408: PUSH
59409: LD_EXP 36
59413: IN
59414: NOT
59415: IFFALSE 59419
// exit ;
59417: GO 59504
// index := GetElementIndex ( hackTanks , hack ) ;
59419: LD_ADDR_VAR 0 5
59423: PUSH
59424: LD_EXP 36
59428: PPUSH
59429: LD_VAR 0 1
59433: PPUSH
59434: CALL 20564 0 2
59438: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
59439: LD_ADDR_VAR 0 4
59443: PUSH
59444: DOUBLE
59445: LD_INT 1
59447: DEC
59448: ST_TO_ADDR
59449: LD_EXP 37
59453: PUSH
59454: LD_VAR 0 5
59458: ARRAY
59459: PUSH
59460: FOR_TO
59461: IFFALSE 59502
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
59463: LD_EXP 37
59467: PUSH
59468: LD_VAR 0 5
59472: ARRAY
59473: PUSH
59474: LD_VAR 0 4
59478: ARRAY
59479: PUSH
59480: LD_INT 1
59482: ARRAY
59483: PUSH
59484: LD_VAR 0 2
59488: EQUAL
59489: IFFALSE 59500
// KillUnit ( vehicle ) ;
59491: LD_VAR 0 2
59495: PPUSH
59496: CALL_OW 66
59500: GO 59460
59502: POP
59503: POP
// end ;
59504: LD_VAR 0 3
59508: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
59509: LD_EXP 41
59513: NOT
59514: IFFALSE 59549
59516: GO 59518
59518: DISABLE
// begin initMiner := true ;
59519: LD_ADDR_EXP 41
59523: PUSH
59524: LD_INT 1
59526: ST_TO_ADDR
// minersList := [ ] ;
59527: LD_ADDR_EXP 42
59531: PUSH
59532: EMPTY
59533: ST_TO_ADDR
// minerMinesList := [ ] ;
59534: LD_ADDR_EXP 43
59538: PUSH
59539: EMPTY
59540: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
59541: LD_ADDR_EXP 44
59545: PUSH
59546: LD_INT 5
59548: ST_TO_ADDR
// end ;
59549: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
59550: LD_EXP 41
59554: PUSH
59555: LD_INT 34
59557: PUSH
59558: LD_INT 81
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PPUSH
59565: CALL_OW 69
59569: AND
59570: IFFALSE 60031
59572: GO 59574
59574: DISABLE
59575: LD_INT 0
59577: PPUSH
59578: PPUSH
59579: PPUSH
59580: PPUSH
// begin enable ;
59581: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
59582: LD_ADDR_VAR 0 1
59586: PUSH
59587: LD_INT 34
59589: PUSH
59590: LD_INT 81
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PPUSH
59597: CALL_OW 69
59601: PUSH
59602: FOR_IN
59603: IFFALSE 59675
// begin if not i in minersList then
59605: LD_VAR 0 1
59609: PUSH
59610: LD_EXP 42
59614: IN
59615: NOT
59616: IFFALSE 59673
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
59618: LD_ADDR_EXP 42
59622: PUSH
59623: LD_EXP 42
59627: PPUSH
59628: LD_EXP 42
59632: PUSH
59633: LD_INT 1
59635: PLUS
59636: PPUSH
59637: LD_VAR 0 1
59641: PPUSH
59642: CALL_OW 1
59646: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59647: LD_ADDR_EXP 43
59651: PUSH
59652: LD_EXP 43
59656: PPUSH
59657: LD_EXP 43
59661: PUSH
59662: LD_INT 1
59664: PLUS
59665: PPUSH
59666: EMPTY
59667: PPUSH
59668: CALL_OW 1
59672: ST_TO_ADDR
// end end ;
59673: GO 59602
59675: POP
59676: POP
// for i := minerMinesList downto 1 do
59677: LD_ADDR_VAR 0 1
59681: PUSH
59682: DOUBLE
59683: LD_EXP 43
59687: INC
59688: ST_TO_ADDR
59689: LD_INT 1
59691: PUSH
59692: FOR_DOWNTO
59693: IFFALSE 60029
// begin if IsLive ( minersList [ i ] ) then
59695: LD_EXP 42
59699: PUSH
59700: LD_VAR 0 1
59704: ARRAY
59705: PPUSH
59706: CALL_OW 300
59710: IFFALSE 59738
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
59712: LD_EXP 42
59716: PUSH
59717: LD_VAR 0 1
59721: ARRAY
59722: PPUSH
59723: LD_EXP 43
59727: PUSH
59728: LD_VAR 0 1
59732: ARRAY
59733: PPUSH
59734: CALL_OW 505
// if not minerMinesList [ i ] then
59738: LD_EXP 43
59742: PUSH
59743: LD_VAR 0 1
59747: ARRAY
59748: NOT
59749: IFFALSE 59753
// continue ;
59751: GO 59692
// for j := minerMinesList [ i ] downto 1 do
59753: LD_ADDR_VAR 0 2
59757: PUSH
59758: DOUBLE
59759: LD_EXP 43
59763: PUSH
59764: LD_VAR 0 1
59768: ARRAY
59769: INC
59770: ST_TO_ADDR
59771: LD_INT 1
59773: PUSH
59774: FOR_DOWNTO
59775: IFFALSE 60025
// begin side := GetSide ( minersList [ i ] ) ;
59777: LD_ADDR_VAR 0 3
59781: PUSH
59782: LD_EXP 42
59786: PUSH
59787: LD_VAR 0 1
59791: ARRAY
59792: PPUSH
59793: CALL_OW 255
59797: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
59798: LD_ADDR_VAR 0 4
59802: PUSH
59803: LD_EXP 43
59807: PUSH
59808: LD_VAR 0 1
59812: ARRAY
59813: PUSH
59814: LD_VAR 0 2
59818: ARRAY
59819: PUSH
59820: LD_INT 1
59822: ARRAY
59823: PPUSH
59824: LD_EXP 43
59828: PUSH
59829: LD_VAR 0 1
59833: ARRAY
59834: PUSH
59835: LD_VAR 0 2
59839: ARRAY
59840: PUSH
59841: LD_INT 2
59843: ARRAY
59844: PPUSH
59845: CALL_OW 428
59849: ST_TO_ADDR
// if not tmp then
59850: LD_VAR 0 4
59854: NOT
59855: IFFALSE 59859
// continue ;
59857: GO 59774
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
59859: LD_VAR 0 4
59863: PUSH
59864: LD_INT 81
59866: PUSH
59867: LD_VAR 0 3
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PPUSH
59876: CALL_OW 69
59880: IN
59881: PUSH
59882: LD_EXP 43
59886: PUSH
59887: LD_VAR 0 1
59891: ARRAY
59892: PUSH
59893: LD_VAR 0 2
59897: ARRAY
59898: PUSH
59899: LD_INT 1
59901: ARRAY
59902: PPUSH
59903: LD_EXP 43
59907: PUSH
59908: LD_VAR 0 1
59912: ARRAY
59913: PUSH
59914: LD_VAR 0 2
59918: ARRAY
59919: PUSH
59920: LD_INT 2
59922: ARRAY
59923: PPUSH
59924: CALL_OW 458
59928: AND
59929: IFFALSE 60023
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
59931: LD_EXP 43
59935: PUSH
59936: LD_VAR 0 1
59940: ARRAY
59941: PUSH
59942: LD_VAR 0 2
59946: ARRAY
59947: PUSH
59948: LD_INT 1
59950: ARRAY
59951: PPUSH
59952: LD_EXP 43
59956: PUSH
59957: LD_VAR 0 1
59961: ARRAY
59962: PUSH
59963: LD_VAR 0 2
59967: ARRAY
59968: PUSH
59969: LD_INT 2
59971: ARRAY
59972: PPUSH
59973: LD_VAR 0 3
59977: PPUSH
59978: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59982: LD_ADDR_EXP 43
59986: PUSH
59987: LD_EXP 43
59991: PPUSH
59992: LD_VAR 0 1
59996: PPUSH
59997: LD_EXP 43
60001: PUSH
60002: LD_VAR 0 1
60006: ARRAY
60007: PPUSH
60008: LD_VAR 0 2
60012: PPUSH
60013: CALL_OW 3
60017: PPUSH
60018: CALL_OW 1
60022: ST_TO_ADDR
// end ; end ;
60023: GO 59774
60025: POP
60026: POP
// end ;
60027: GO 59692
60029: POP
60030: POP
// end ;
60031: PPOPN 4
60033: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
60034: LD_INT 0
60036: PPUSH
60037: PPUSH
// result := false ;
60038: LD_ADDR_VAR 0 4
60042: PUSH
60043: LD_INT 0
60045: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
60046: LD_VAR 0 1
60050: PPUSH
60051: CALL_OW 264
60055: PUSH
60056: LD_INT 81
60058: EQUAL
60059: NOT
60060: IFFALSE 60064
// exit ;
60062: GO 60304
// index := GetElementIndex ( minersList , unit ) ;
60064: LD_ADDR_VAR 0 5
60068: PUSH
60069: LD_EXP 42
60073: PPUSH
60074: LD_VAR 0 1
60078: PPUSH
60079: CALL 20564 0 2
60083: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
60084: LD_EXP 43
60088: PUSH
60089: LD_VAR 0 5
60093: ARRAY
60094: PUSH
60095: LD_EXP 44
60099: GREATEREQUAL
60100: IFFALSE 60104
// exit ;
60102: GO 60304
// ComMoveXY ( unit , x , y ) ;
60104: LD_VAR 0 1
60108: PPUSH
60109: LD_VAR 0 2
60113: PPUSH
60114: LD_VAR 0 3
60118: PPUSH
60119: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60123: LD_INT 35
60125: PPUSH
60126: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
60130: LD_VAR 0 1
60134: PPUSH
60135: LD_VAR 0 2
60139: PPUSH
60140: LD_VAR 0 3
60144: PPUSH
60145: CALL 51919 0 3
60149: NOT
60150: PUSH
60151: LD_VAR 0 1
60155: PPUSH
60156: CALL_OW 314
60160: AND
60161: IFFALSE 60165
// exit ;
60163: GO 60304
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
60165: LD_VAR 0 2
60169: PPUSH
60170: LD_VAR 0 3
60174: PPUSH
60175: CALL_OW 428
60179: PUSH
60180: LD_VAR 0 1
60184: EQUAL
60185: PUSH
60186: LD_VAR 0 1
60190: PPUSH
60191: CALL_OW 314
60195: NOT
60196: AND
60197: IFFALSE 60123
// PlaySoundXY ( x , y , PlantMine ) ;
60199: LD_VAR 0 2
60203: PPUSH
60204: LD_VAR 0 3
60208: PPUSH
60209: LD_STRING PlantMine
60211: PPUSH
60212: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
60216: LD_VAR 0 2
60220: PPUSH
60221: LD_VAR 0 3
60225: PPUSH
60226: LD_VAR 0 1
60230: PPUSH
60231: CALL_OW 255
60235: PPUSH
60236: LD_INT 0
60238: PPUSH
60239: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
60243: LD_ADDR_EXP 43
60247: PUSH
60248: LD_EXP 43
60252: PPUSH
60253: LD_VAR 0 5
60257: PUSH
60258: LD_EXP 43
60262: PUSH
60263: LD_VAR 0 5
60267: ARRAY
60268: PUSH
60269: LD_INT 1
60271: PLUS
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PPUSH
60277: LD_VAR 0 2
60281: PUSH
60282: LD_VAR 0 3
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PPUSH
60291: CALL 20779 0 3
60295: ST_TO_ADDR
// result := true ;
60296: LD_ADDR_VAR 0 4
60300: PUSH
60301: LD_INT 1
60303: ST_TO_ADDR
// end ;
60304: LD_VAR 0 4
60308: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
60309: LD_INT 0
60311: PPUSH
60312: PPUSH
60313: PPUSH
// if not unit in minersList then
60314: LD_VAR 0 1
60318: PUSH
60319: LD_EXP 42
60323: IN
60324: NOT
60325: IFFALSE 60329
// exit ;
60327: GO 60721
// index := GetElementIndex ( minersList , unit ) ;
60329: LD_ADDR_VAR 0 6
60333: PUSH
60334: LD_EXP 42
60338: PPUSH
60339: LD_VAR 0 1
60343: PPUSH
60344: CALL 20564 0 2
60348: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
60349: LD_ADDR_VAR 0 5
60353: PUSH
60354: DOUBLE
60355: LD_EXP 43
60359: PUSH
60360: LD_VAR 0 6
60364: ARRAY
60365: INC
60366: ST_TO_ADDR
60367: LD_INT 1
60369: PUSH
60370: FOR_DOWNTO
60371: IFFALSE 60532
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
60373: LD_EXP 43
60377: PUSH
60378: LD_VAR 0 6
60382: ARRAY
60383: PUSH
60384: LD_VAR 0 5
60388: ARRAY
60389: PUSH
60390: LD_INT 1
60392: ARRAY
60393: PUSH
60394: LD_VAR 0 2
60398: EQUAL
60399: PUSH
60400: LD_EXP 43
60404: PUSH
60405: LD_VAR 0 6
60409: ARRAY
60410: PUSH
60411: LD_VAR 0 5
60415: ARRAY
60416: PUSH
60417: LD_INT 2
60419: ARRAY
60420: PUSH
60421: LD_VAR 0 3
60425: EQUAL
60426: AND
60427: IFFALSE 60530
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60429: LD_EXP 43
60433: PUSH
60434: LD_VAR 0 6
60438: ARRAY
60439: PUSH
60440: LD_VAR 0 5
60444: ARRAY
60445: PUSH
60446: LD_INT 1
60448: ARRAY
60449: PPUSH
60450: LD_EXP 43
60454: PUSH
60455: LD_VAR 0 6
60459: ARRAY
60460: PUSH
60461: LD_VAR 0 5
60465: ARRAY
60466: PUSH
60467: LD_INT 2
60469: ARRAY
60470: PPUSH
60471: LD_VAR 0 1
60475: PPUSH
60476: CALL_OW 255
60480: PPUSH
60481: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60485: LD_ADDR_EXP 43
60489: PUSH
60490: LD_EXP 43
60494: PPUSH
60495: LD_VAR 0 6
60499: PPUSH
60500: LD_EXP 43
60504: PUSH
60505: LD_VAR 0 6
60509: ARRAY
60510: PPUSH
60511: LD_VAR 0 5
60515: PPUSH
60516: CALL_OW 3
60520: PPUSH
60521: CALL_OW 1
60525: ST_TO_ADDR
// exit ;
60526: POP
60527: POP
60528: GO 60721
// end ; end ;
60530: GO 60370
60532: POP
60533: POP
// for i := minerMinesList [ index ] downto 1 do
60534: LD_ADDR_VAR 0 5
60538: PUSH
60539: DOUBLE
60540: LD_EXP 43
60544: PUSH
60545: LD_VAR 0 6
60549: ARRAY
60550: INC
60551: ST_TO_ADDR
60552: LD_INT 1
60554: PUSH
60555: FOR_DOWNTO
60556: IFFALSE 60719
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
60558: LD_EXP 43
60562: PUSH
60563: LD_VAR 0 6
60567: ARRAY
60568: PUSH
60569: LD_VAR 0 5
60573: ARRAY
60574: PUSH
60575: LD_INT 1
60577: ARRAY
60578: PPUSH
60579: LD_EXP 43
60583: PUSH
60584: LD_VAR 0 6
60588: ARRAY
60589: PUSH
60590: LD_VAR 0 5
60594: ARRAY
60595: PUSH
60596: LD_INT 2
60598: ARRAY
60599: PPUSH
60600: LD_VAR 0 2
60604: PPUSH
60605: LD_VAR 0 3
60609: PPUSH
60610: CALL_OW 298
60614: PUSH
60615: LD_INT 6
60617: LESS
60618: IFFALSE 60717
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60620: LD_EXP 43
60624: PUSH
60625: LD_VAR 0 6
60629: ARRAY
60630: PUSH
60631: LD_VAR 0 5
60635: ARRAY
60636: PUSH
60637: LD_INT 1
60639: ARRAY
60640: PPUSH
60641: LD_EXP 43
60645: PUSH
60646: LD_VAR 0 6
60650: ARRAY
60651: PUSH
60652: LD_VAR 0 5
60656: ARRAY
60657: PUSH
60658: LD_INT 2
60660: ARRAY
60661: PPUSH
60662: LD_VAR 0 1
60666: PPUSH
60667: CALL_OW 255
60671: PPUSH
60672: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60676: LD_ADDR_EXP 43
60680: PUSH
60681: LD_EXP 43
60685: PPUSH
60686: LD_VAR 0 6
60690: PPUSH
60691: LD_EXP 43
60695: PUSH
60696: LD_VAR 0 6
60700: ARRAY
60701: PPUSH
60702: LD_VAR 0 5
60706: PPUSH
60707: CALL_OW 3
60711: PPUSH
60712: CALL_OW 1
60716: ST_TO_ADDR
// end ; end ;
60717: GO 60555
60719: POP
60720: POP
// end ;
60721: LD_VAR 0 4
60725: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
60726: LD_INT 0
60728: PPUSH
60729: PPUSH
60730: PPUSH
60731: PPUSH
60732: PPUSH
60733: PPUSH
60734: PPUSH
60735: PPUSH
60736: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
60737: LD_VAR 0 1
60741: PPUSH
60742: CALL_OW 264
60746: PUSH
60747: LD_INT 81
60749: EQUAL
60750: NOT
60751: PUSH
60752: LD_VAR 0 1
60756: PUSH
60757: LD_EXP 42
60761: IN
60762: NOT
60763: OR
60764: IFFALSE 60768
// exit ;
60766: GO 61090
// index := GetElementIndex ( minersList , unit ) ;
60768: LD_ADDR_VAR 0 6
60772: PUSH
60773: LD_EXP 42
60777: PPUSH
60778: LD_VAR 0 1
60782: PPUSH
60783: CALL 20564 0 2
60787: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
60788: LD_ADDR_VAR 0 8
60792: PUSH
60793: LD_EXP 44
60797: PUSH
60798: LD_EXP 43
60802: PUSH
60803: LD_VAR 0 6
60807: ARRAY
60808: MINUS
60809: ST_TO_ADDR
// if not minesFreeAmount then
60810: LD_VAR 0 8
60814: NOT
60815: IFFALSE 60819
// exit ;
60817: GO 61090
// tmp := [ ] ;
60819: LD_ADDR_VAR 0 7
60823: PUSH
60824: EMPTY
60825: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
60826: LD_ADDR_VAR 0 5
60830: PUSH
60831: DOUBLE
60832: LD_INT 1
60834: DEC
60835: ST_TO_ADDR
60836: LD_VAR 0 8
60840: PUSH
60841: FOR_TO
60842: IFFALSE 61037
// begin _d := rand ( 0 , 5 ) ;
60844: LD_ADDR_VAR 0 11
60848: PUSH
60849: LD_INT 0
60851: PPUSH
60852: LD_INT 5
60854: PPUSH
60855: CALL_OW 12
60859: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
60860: LD_ADDR_VAR 0 12
60864: PUSH
60865: LD_INT 2
60867: PPUSH
60868: LD_INT 6
60870: PPUSH
60871: CALL_OW 12
60875: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
60876: LD_ADDR_VAR 0 9
60880: PUSH
60881: LD_VAR 0 2
60885: PPUSH
60886: LD_VAR 0 11
60890: PPUSH
60891: LD_VAR 0 12
60895: PPUSH
60896: CALL_OW 272
60900: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
60901: LD_ADDR_VAR 0 10
60905: PUSH
60906: LD_VAR 0 3
60910: PPUSH
60911: LD_VAR 0 11
60915: PPUSH
60916: LD_VAR 0 12
60920: PPUSH
60921: CALL_OW 273
60925: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
60926: LD_VAR 0 9
60930: PPUSH
60931: LD_VAR 0 10
60935: PPUSH
60936: CALL_OW 488
60940: PUSH
60941: LD_VAR 0 9
60945: PUSH
60946: LD_VAR 0 10
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_VAR 0 7
60959: IN
60960: NOT
60961: AND
60962: PUSH
60963: LD_VAR 0 9
60967: PPUSH
60968: LD_VAR 0 10
60972: PPUSH
60973: CALL_OW 458
60977: NOT
60978: AND
60979: IFFALSE 61021
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
60981: LD_ADDR_VAR 0 7
60985: PUSH
60986: LD_VAR 0 7
60990: PPUSH
60991: LD_VAR 0 7
60995: PUSH
60996: LD_INT 1
60998: PLUS
60999: PPUSH
61000: LD_VAR 0 9
61004: PUSH
61005: LD_VAR 0 10
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PPUSH
61014: CALL_OW 1
61018: ST_TO_ADDR
61019: GO 61035
// i := i - 1 ;
61021: LD_ADDR_VAR 0 5
61025: PUSH
61026: LD_VAR 0 5
61030: PUSH
61031: LD_INT 1
61033: MINUS
61034: ST_TO_ADDR
// end ;
61035: GO 60841
61037: POP
61038: POP
// for i in tmp do
61039: LD_ADDR_VAR 0 5
61043: PUSH
61044: LD_VAR 0 7
61048: PUSH
61049: FOR_IN
61050: IFFALSE 61088
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
61052: LD_VAR 0 1
61056: PPUSH
61057: LD_VAR 0 5
61061: PUSH
61062: LD_INT 1
61064: ARRAY
61065: PPUSH
61066: LD_VAR 0 5
61070: PUSH
61071: LD_INT 2
61073: ARRAY
61074: PPUSH
61075: CALL 60034 0 3
61079: NOT
61080: IFFALSE 61086
// exit ;
61082: POP
61083: POP
61084: GO 61090
61086: GO 61049
61088: POP
61089: POP
// end ;
61090: LD_VAR 0 4
61094: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
61095: LD_INT 0
61097: PPUSH
61098: PPUSH
61099: PPUSH
61100: PPUSH
61101: PPUSH
61102: PPUSH
61103: PPUSH
// if not GetClass ( unit ) = class_sniper then
61104: LD_VAR 0 1
61108: PPUSH
61109: CALL_OW 257
61113: PUSH
61114: LD_INT 5
61116: EQUAL
61117: NOT
61118: IFFALSE 61122
// exit ;
61120: GO 61510
// dist := 8 ;
61122: LD_ADDR_VAR 0 5
61126: PUSH
61127: LD_INT 8
61129: ST_TO_ADDR
// viewRange := 12 ;
61130: LD_ADDR_VAR 0 7
61134: PUSH
61135: LD_INT 12
61137: ST_TO_ADDR
// side := GetSide ( unit ) ;
61138: LD_ADDR_VAR 0 6
61142: PUSH
61143: LD_VAR 0 1
61147: PPUSH
61148: CALL_OW 255
61152: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
61153: LD_INT 61
61155: PPUSH
61156: LD_VAR 0 6
61160: PPUSH
61161: CALL_OW 321
61165: PUSH
61166: LD_INT 2
61168: EQUAL
61169: IFFALSE 61179
// viewRange := 16 ;
61171: LD_ADDR_VAR 0 7
61175: PUSH
61176: LD_INT 16
61178: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
61179: LD_VAR 0 1
61183: PPUSH
61184: LD_VAR 0 2
61188: PPUSH
61189: LD_VAR 0 3
61193: PPUSH
61194: CALL_OW 297
61198: PUSH
61199: LD_VAR 0 5
61203: GREATER
61204: IFFALSE 61283
// begin ComMoveXY ( unit , x , y ) ;
61206: LD_VAR 0 1
61210: PPUSH
61211: LD_VAR 0 2
61215: PPUSH
61216: LD_VAR 0 3
61220: PPUSH
61221: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61225: LD_INT 35
61227: PPUSH
61228: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
61232: LD_VAR 0 1
61236: PPUSH
61237: LD_VAR 0 2
61241: PPUSH
61242: LD_VAR 0 3
61246: PPUSH
61247: CALL 51919 0 3
61251: NOT
61252: IFFALSE 61256
// exit ;
61254: GO 61510
// until GetDistUnitXY ( unit , x , y ) < dist ;
61256: LD_VAR 0 1
61260: PPUSH
61261: LD_VAR 0 2
61265: PPUSH
61266: LD_VAR 0 3
61270: PPUSH
61271: CALL_OW 297
61275: PUSH
61276: LD_VAR 0 5
61280: LESS
61281: IFFALSE 61225
// end ; ComTurnXY ( unit , x , y ) ;
61283: LD_VAR 0 1
61287: PPUSH
61288: LD_VAR 0 2
61292: PPUSH
61293: LD_VAR 0 3
61297: PPUSH
61298: CALL_OW 118
// wait ( 5 ) ;
61302: LD_INT 5
61304: PPUSH
61305: CALL_OW 67
// _d := GetDir ( unit ) ;
61309: LD_ADDR_VAR 0 10
61313: PUSH
61314: LD_VAR 0 1
61318: PPUSH
61319: CALL_OW 254
61323: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
61324: LD_ADDR_VAR 0 8
61328: PUSH
61329: LD_VAR 0 1
61333: PPUSH
61334: CALL_OW 250
61338: PPUSH
61339: LD_VAR 0 10
61343: PPUSH
61344: LD_VAR 0 5
61348: PPUSH
61349: CALL_OW 272
61353: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
61354: LD_ADDR_VAR 0 9
61358: PUSH
61359: LD_VAR 0 1
61363: PPUSH
61364: CALL_OW 251
61368: PPUSH
61369: LD_VAR 0 10
61373: PPUSH
61374: LD_VAR 0 5
61378: PPUSH
61379: CALL_OW 273
61383: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61384: LD_VAR 0 8
61388: PPUSH
61389: LD_VAR 0 9
61393: PPUSH
61394: CALL_OW 488
61398: NOT
61399: IFFALSE 61403
// exit ;
61401: GO 61510
// ComAnimCustom ( unit , 1 ) ;
61403: LD_VAR 0 1
61407: PPUSH
61408: LD_INT 1
61410: PPUSH
61411: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
61415: LD_VAR 0 8
61419: PPUSH
61420: LD_VAR 0 9
61424: PPUSH
61425: LD_VAR 0 6
61429: PPUSH
61430: LD_VAR 0 7
61434: PPUSH
61435: CALL_OW 330
// repeat wait ( 1 ) ;
61439: LD_INT 1
61441: PPUSH
61442: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
61446: LD_VAR 0 1
61450: PPUSH
61451: CALL_OW 316
61455: PUSH
61456: LD_VAR 0 1
61460: PPUSH
61461: CALL_OW 314
61465: OR
61466: PUSH
61467: LD_VAR 0 1
61471: PPUSH
61472: CALL_OW 302
61476: NOT
61477: OR
61478: PUSH
61479: LD_VAR 0 1
61483: PPUSH
61484: CALL_OW 301
61488: OR
61489: IFFALSE 61439
// RemoveSeeing ( _x , _y , side ) ;
61491: LD_VAR 0 8
61495: PPUSH
61496: LD_VAR 0 9
61500: PPUSH
61501: LD_VAR 0 6
61505: PPUSH
61506: CALL_OW 331
// end ; end_of_file
61510: LD_VAR 0 4
61514: RET
// export globalGameSaveCounter ; every 0 0$1 do
61515: GO 61517
61517: DISABLE
// begin enable ;
61518: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
61519: LD_STRING updateTimer(
61521: PUSH
61522: LD_OWVAR 1
61526: STR
61527: PUSH
61528: LD_STRING );
61530: STR
61531: PPUSH
61532: CALL_OW 559
// end ;
61536: END
// every 0 0$1 do
61537: GO 61539
61539: DISABLE
// begin globalGameSaveCounter := 0 ;
61540: LD_ADDR_EXP 45
61544: PUSH
61545: LD_INT 0
61547: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
61548: LD_STRING setGameSaveCounter(0)
61550: PPUSH
61551: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
61555: LD_STRING initStreamRollete();
61557: PPUSH
61558: CALL_OW 559
// InitStreamMode ;
61562: CALL 62888 0 0
// DefineStreamItems ( false ) ;
61566: LD_INT 0
61568: PPUSH
61569: CALL 63352 0 1
// end ;
61573: END
// export function SOS_MapStart ( ) ; begin
61574: LD_INT 0
61576: PPUSH
// if streamModeActive then
61577: LD_EXP 46
61581: IFFALSE 61590
// DefineStreamItems ( true ) ;
61583: LD_INT 1
61585: PPUSH
61586: CALL 63352 0 1
// UpdateLuaVariables ( ) ;
61590: CALL 61607 0 0
// UpdateFactoryWaypoints ( ) ;
61594: CALL 76213 0 0
// UpdateWarehouseGatheringPoints ( ) ;
61598: CALL 76470 0 0
// end ;
61602: LD_VAR 0 1
61606: RET
// function UpdateLuaVariables ( ) ; begin
61607: LD_INT 0
61609: PPUSH
// if globalGameSaveCounter then
61610: LD_EXP 45
61614: IFFALSE 61648
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
61616: LD_ADDR_EXP 45
61620: PUSH
61621: LD_EXP 45
61625: PPUSH
61626: CALL 54471 0 1
61630: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
61631: LD_STRING setGameSaveCounter(
61633: PUSH
61634: LD_EXP 45
61638: STR
61639: PUSH
61640: LD_STRING )
61642: STR
61643: PPUSH
61644: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
61648: LD_STRING setGameDifficulty(
61650: PUSH
61651: LD_OWVAR 67
61655: STR
61656: PUSH
61657: LD_STRING )
61659: STR
61660: PPUSH
61661: CALL_OW 559
// end ;
61665: LD_VAR 0 1
61669: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61670: LD_INT 0
61672: PPUSH
// if p2 = stream_mode then
61673: LD_VAR 0 2
61677: PUSH
61678: LD_INT 100
61680: EQUAL
61681: IFFALSE 62684
// begin if not StreamModeActive then
61683: LD_EXP 46
61687: NOT
61688: IFFALSE 61698
// StreamModeActive := true ;
61690: LD_ADDR_EXP 46
61694: PUSH
61695: LD_INT 1
61697: ST_TO_ADDR
// if p3 = 0 then
61698: LD_VAR 0 3
61702: PUSH
61703: LD_INT 0
61705: EQUAL
61706: IFFALSE 61712
// InitStreamMode ;
61708: CALL 62888 0 0
// if p3 = 1 then
61712: LD_VAR 0 3
61716: PUSH
61717: LD_INT 1
61719: EQUAL
61720: IFFALSE 61730
// sRocket := true ;
61722: LD_ADDR_EXP 51
61726: PUSH
61727: LD_INT 1
61729: ST_TO_ADDR
// if p3 = 2 then
61730: LD_VAR 0 3
61734: PUSH
61735: LD_INT 2
61737: EQUAL
61738: IFFALSE 61748
// sSpeed := true ;
61740: LD_ADDR_EXP 50
61744: PUSH
61745: LD_INT 1
61747: ST_TO_ADDR
// if p3 = 3 then
61748: LD_VAR 0 3
61752: PUSH
61753: LD_INT 3
61755: EQUAL
61756: IFFALSE 61766
// sEngine := true ;
61758: LD_ADDR_EXP 52
61762: PUSH
61763: LD_INT 1
61765: ST_TO_ADDR
// if p3 = 4 then
61766: LD_VAR 0 3
61770: PUSH
61771: LD_INT 4
61773: EQUAL
61774: IFFALSE 61784
// sSpec := true ;
61776: LD_ADDR_EXP 49
61780: PUSH
61781: LD_INT 1
61783: ST_TO_ADDR
// if p3 = 5 then
61784: LD_VAR 0 3
61788: PUSH
61789: LD_INT 5
61791: EQUAL
61792: IFFALSE 61802
// sLevel := true ;
61794: LD_ADDR_EXP 53
61798: PUSH
61799: LD_INT 1
61801: ST_TO_ADDR
// if p3 = 6 then
61802: LD_VAR 0 3
61806: PUSH
61807: LD_INT 6
61809: EQUAL
61810: IFFALSE 61820
// sArmoury := true ;
61812: LD_ADDR_EXP 54
61816: PUSH
61817: LD_INT 1
61819: ST_TO_ADDR
// if p3 = 7 then
61820: LD_VAR 0 3
61824: PUSH
61825: LD_INT 7
61827: EQUAL
61828: IFFALSE 61838
// sRadar := true ;
61830: LD_ADDR_EXP 55
61834: PUSH
61835: LD_INT 1
61837: ST_TO_ADDR
// if p3 = 8 then
61838: LD_VAR 0 3
61842: PUSH
61843: LD_INT 8
61845: EQUAL
61846: IFFALSE 61856
// sBunker := true ;
61848: LD_ADDR_EXP 56
61852: PUSH
61853: LD_INT 1
61855: ST_TO_ADDR
// if p3 = 9 then
61856: LD_VAR 0 3
61860: PUSH
61861: LD_INT 9
61863: EQUAL
61864: IFFALSE 61874
// sHack := true ;
61866: LD_ADDR_EXP 57
61870: PUSH
61871: LD_INT 1
61873: ST_TO_ADDR
// if p3 = 10 then
61874: LD_VAR 0 3
61878: PUSH
61879: LD_INT 10
61881: EQUAL
61882: IFFALSE 61892
// sFire := true ;
61884: LD_ADDR_EXP 58
61888: PUSH
61889: LD_INT 1
61891: ST_TO_ADDR
// if p3 = 11 then
61892: LD_VAR 0 3
61896: PUSH
61897: LD_INT 11
61899: EQUAL
61900: IFFALSE 61910
// sRefresh := true ;
61902: LD_ADDR_EXP 59
61906: PUSH
61907: LD_INT 1
61909: ST_TO_ADDR
// if p3 = 12 then
61910: LD_VAR 0 3
61914: PUSH
61915: LD_INT 12
61917: EQUAL
61918: IFFALSE 61928
// sExp := true ;
61920: LD_ADDR_EXP 60
61924: PUSH
61925: LD_INT 1
61927: ST_TO_ADDR
// if p3 = 13 then
61928: LD_VAR 0 3
61932: PUSH
61933: LD_INT 13
61935: EQUAL
61936: IFFALSE 61946
// sDepot := true ;
61938: LD_ADDR_EXP 61
61942: PUSH
61943: LD_INT 1
61945: ST_TO_ADDR
// if p3 = 14 then
61946: LD_VAR 0 3
61950: PUSH
61951: LD_INT 14
61953: EQUAL
61954: IFFALSE 61964
// sFlag := true ;
61956: LD_ADDR_EXP 62
61960: PUSH
61961: LD_INT 1
61963: ST_TO_ADDR
// if p3 = 15 then
61964: LD_VAR 0 3
61968: PUSH
61969: LD_INT 15
61971: EQUAL
61972: IFFALSE 61982
// sKamikadze := true ;
61974: LD_ADDR_EXP 70
61978: PUSH
61979: LD_INT 1
61981: ST_TO_ADDR
// if p3 = 16 then
61982: LD_VAR 0 3
61986: PUSH
61987: LD_INT 16
61989: EQUAL
61990: IFFALSE 62000
// sTroll := true ;
61992: LD_ADDR_EXP 71
61996: PUSH
61997: LD_INT 1
61999: ST_TO_ADDR
// if p3 = 17 then
62000: LD_VAR 0 3
62004: PUSH
62005: LD_INT 17
62007: EQUAL
62008: IFFALSE 62018
// sSlow := true ;
62010: LD_ADDR_EXP 72
62014: PUSH
62015: LD_INT 1
62017: ST_TO_ADDR
// if p3 = 18 then
62018: LD_VAR 0 3
62022: PUSH
62023: LD_INT 18
62025: EQUAL
62026: IFFALSE 62036
// sLack := true ;
62028: LD_ADDR_EXP 73
62032: PUSH
62033: LD_INT 1
62035: ST_TO_ADDR
// if p3 = 19 then
62036: LD_VAR 0 3
62040: PUSH
62041: LD_INT 19
62043: EQUAL
62044: IFFALSE 62054
// sTank := true ;
62046: LD_ADDR_EXP 75
62050: PUSH
62051: LD_INT 1
62053: ST_TO_ADDR
// if p3 = 20 then
62054: LD_VAR 0 3
62058: PUSH
62059: LD_INT 20
62061: EQUAL
62062: IFFALSE 62072
// sRemote := true ;
62064: LD_ADDR_EXP 76
62068: PUSH
62069: LD_INT 1
62071: ST_TO_ADDR
// if p3 = 21 then
62072: LD_VAR 0 3
62076: PUSH
62077: LD_INT 21
62079: EQUAL
62080: IFFALSE 62090
// sPowell := true ;
62082: LD_ADDR_EXP 77
62086: PUSH
62087: LD_INT 1
62089: ST_TO_ADDR
// if p3 = 22 then
62090: LD_VAR 0 3
62094: PUSH
62095: LD_INT 22
62097: EQUAL
62098: IFFALSE 62108
// sTeleport := true ;
62100: LD_ADDR_EXP 80
62104: PUSH
62105: LD_INT 1
62107: ST_TO_ADDR
// if p3 = 23 then
62108: LD_VAR 0 3
62112: PUSH
62113: LD_INT 23
62115: EQUAL
62116: IFFALSE 62126
// sOilTower := true ;
62118: LD_ADDR_EXP 82
62122: PUSH
62123: LD_INT 1
62125: ST_TO_ADDR
// if p3 = 24 then
62126: LD_VAR 0 3
62130: PUSH
62131: LD_INT 24
62133: EQUAL
62134: IFFALSE 62144
// sShovel := true ;
62136: LD_ADDR_EXP 83
62140: PUSH
62141: LD_INT 1
62143: ST_TO_ADDR
// if p3 = 25 then
62144: LD_VAR 0 3
62148: PUSH
62149: LD_INT 25
62151: EQUAL
62152: IFFALSE 62162
// sSheik := true ;
62154: LD_ADDR_EXP 84
62158: PUSH
62159: LD_INT 1
62161: ST_TO_ADDR
// if p3 = 26 then
62162: LD_VAR 0 3
62166: PUSH
62167: LD_INT 26
62169: EQUAL
62170: IFFALSE 62180
// sEarthquake := true ;
62172: LD_ADDR_EXP 86
62176: PUSH
62177: LD_INT 1
62179: ST_TO_ADDR
// if p3 = 27 then
62180: LD_VAR 0 3
62184: PUSH
62185: LD_INT 27
62187: EQUAL
62188: IFFALSE 62198
// sAI := true ;
62190: LD_ADDR_EXP 87
62194: PUSH
62195: LD_INT 1
62197: ST_TO_ADDR
// if p3 = 28 then
62198: LD_VAR 0 3
62202: PUSH
62203: LD_INT 28
62205: EQUAL
62206: IFFALSE 62216
// sCargo := true ;
62208: LD_ADDR_EXP 90
62212: PUSH
62213: LD_INT 1
62215: ST_TO_ADDR
// if p3 = 29 then
62216: LD_VAR 0 3
62220: PUSH
62221: LD_INT 29
62223: EQUAL
62224: IFFALSE 62234
// sDLaser := true ;
62226: LD_ADDR_EXP 91
62230: PUSH
62231: LD_INT 1
62233: ST_TO_ADDR
// if p3 = 30 then
62234: LD_VAR 0 3
62238: PUSH
62239: LD_INT 30
62241: EQUAL
62242: IFFALSE 62252
// sExchange := true ;
62244: LD_ADDR_EXP 92
62248: PUSH
62249: LD_INT 1
62251: ST_TO_ADDR
// if p3 = 31 then
62252: LD_VAR 0 3
62256: PUSH
62257: LD_INT 31
62259: EQUAL
62260: IFFALSE 62270
// sFac := true ;
62262: LD_ADDR_EXP 93
62266: PUSH
62267: LD_INT 1
62269: ST_TO_ADDR
// if p3 = 32 then
62270: LD_VAR 0 3
62274: PUSH
62275: LD_INT 32
62277: EQUAL
62278: IFFALSE 62288
// sPower := true ;
62280: LD_ADDR_EXP 94
62284: PUSH
62285: LD_INT 1
62287: ST_TO_ADDR
// if p3 = 33 then
62288: LD_VAR 0 3
62292: PUSH
62293: LD_INT 33
62295: EQUAL
62296: IFFALSE 62306
// sRandom := true ;
62298: LD_ADDR_EXP 95
62302: PUSH
62303: LD_INT 1
62305: ST_TO_ADDR
// if p3 = 34 then
62306: LD_VAR 0 3
62310: PUSH
62311: LD_INT 34
62313: EQUAL
62314: IFFALSE 62324
// sShield := true ;
62316: LD_ADDR_EXP 96
62320: PUSH
62321: LD_INT 1
62323: ST_TO_ADDR
// if p3 = 35 then
62324: LD_VAR 0 3
62328: PUSH
62329: LD_INT 35
62331: EQUAL
62332: IFFALSE 62342
// sTime := true ;
62334: LD_ADDR_EXP 97
62338: PUSH
62339: LD_INT 1
62341: ST_TO_ADDR
// if p3 = 36 then
62342: LD_VAR 0 3
62346: PUSH
62347: LD_INT 36
62349: EQUAL
62350: IFFALSE 62360
// sTools := true ;
62352: LD_ADDR_EXP 98
62356: PUSH
62357: LD_INT 1
62359: ST_TO_ADDR
// if p3 = 101 then
62360: LD_VAR 0 3
62364: PUSH
62365: LD_INT 101
62367: EQUAL
62368: IFFALSE 62378
// sSold := true ;
62370: LD_ADDR_EXP 63
62374: PUSH
62375: LD_INT 1
62377: ST_TO_ADDR
// if p3 = 102 then
62378: LD_VAR 0 3
62382: PUSH
62383: LD_INT 102
62385: EQUAL
62386: IFFALSE 62396
// sDiff := true ;
62388: LD_ADDR_EXP 64
62392: PUSH
62393: LD_INT 1
62395: ST_TO_ADDR
// if p3 = 103 then
62396: LD_VAR 0 3
62400: PUSH
62401: LD_INT 103
62403: EQUAL
62404: IFFALSE 62414
// sFog := true ;
62406: LD_ADDR_EXP 67
62410: PUSH
62411: LD_INT 1
62413: ST_TO_ADDR
// if p3 = 104 then
62414: LD_VAR 0 3
62418: PUSH
62419: LD_INT 104
62421: EQUAL
62422: IFFALSE 62432
// sReset := true ;
62424: LD_ADDR_EXP 68
62428: PUSH
62429: LD_INT 1
62431: ST_TO_ADDR
// if p3 = 105 then
62432: LD_VAR 0 3
62436: PUSH
62437: LD_INT 105
62439: EQUAL
62440: IFFALSE 62450
// sSun := true ;
62442: LD_ADDR_EXP 69
62446: PUSH
62447: LD_INT 1
62449: ST_TO_ADDR
// if p3 = 106 then
62450: LD_VAR 0 3
62454: PUSH
62455: LD_INT 106
62457: EQUAL
62458: IFFALSE 62468
// sTiger := true ;
62460: LD_ADDR_EXP 65
62464: PUSH
62465: LD_INT 1
62467: ST_TO_ADDR
// if p3 = 107 then
62468: LD_VAR 0 3
62472: PUSH
62473: LD_INT 107
62475: EQUAL
62476: IFFALSE 62486
// sBomb := true ;
62478: LD_ADDR_EXP 66
62482: PUSH
62483: LD_INT 1
62485: ST_TO_ADDR
// if p3 = 108 then
62486: LD_VAR 0 3
62490: PUSH
62491: LD_INT 108
62493: EQUAL
62494: IFFALSE 62504
// sWound := true ;
62496: LD_ADDR_EXP 74
62500: PUSH
62501: LD_INT 1
62503: ST_TO_ADDR
// if p3 = 109 then
62504: LD_VAR 0 3
62508: PUSH
62509: LD_INT 109
62511: EQUAL
62512: IFFALSE 62522
// sBetray := true ;
62514: LD_ADDR_EXP 78
62518: PUSH
62519: LD_INT 1
62521: ST_TO_ADDR
// if p3 = 110 then
62522: LD_VAR 0 3
62526: PUSH
62527: LD_INT 110
62529: EQUAL
62530: IFFALSE 62540
// sContamin := true ;
62532: LD_ADDR_EXP 79
62536: PUSH
62537: LD_INT 1
62539: ST_TO_ADDR
// if p3 = 111 then
62540: LD_VAR 0 3
62544: PUSH
62545: LD_INT 111
62547: EQUAL
62548: IFFALSE 62558
// sOil := true ;
62550: LD_ADDR_EXP 81
62554: PUSH
62555: LD_INT 1
62557: ST_TO_ADDR
// if p3 = 112 then
62558: LD_VAR 0 3
62562: PUSH
62563: LD_INT 112
62565: EQUAL
62566: IFFALSE 62576
// sStu := true ;
62568: LD_ADDR_EXP 85
62572: PUSH
62573: LD_INT 1
62575: ST_TO_ADDR
// if p3 = 113 then
62576: LD_VAR 0 3
62580: PUSH
62581: LD_INT 113
62583: EQUAL
62584: IFFALSE 62594
// sBazooka := true ;
62586: LD_ADDR_EXP 88
62590: PUSH
62591: LD_INT 1
62593: ST_TO_ADDR
// if p3 = 114 then
62594: LD_VAR 0 3
62598: PUSH
62599: LD_INT 114
62601: EQUAL
62602: IFFALSE 62612
// sMortar := true ;
62604: LD_ADDR_EXP 89
62608: PUSH
62609: LD_INT 1
62611: ST_TO_ADDR
// if p3 = 115 then
62612: LD_VAR 0 3
62616: PUSH
62617: LD_INT 115
62619: EQUAL
62620: IFFALSE 62630
// sRanger := true ;
62622: LD_ADDR_EXP 99
62626: PUSH
62627: LD_INT 1
62629: ST_TO_ADDR
// if p3 = 116 then
62630: LD_VAR 0 3
62634: PUSH
62635: LD_INT 116
62637: EQUAL
62638: IFFALSE 62648
// sComputer := true ;
62640: LD_ADDR_EXP 100
62644: PUSH
62645: LD_INT 1
62647: ST_TO_ADDR
// if p3 = 117 then
62648: LD_VAR 0 3
62652: PUSH
62653: LD_INT 117
62655: EQUAL
62656: IFFALSE 62666
// s30 := true ;
62658: LD_ADDR_EXP 101
62662: PUSH
62663: LD_INT 1
62665: ST_TO_ADDR
// if p3 = 118 then
62666: LD_VAR 0 3
62670: PUSH
62671: LD_INT 118
62673: EQUAL
62674: IFFALSE 62684
// s60 := true ;
62676: LD_ADDR_EXP 102
62680: PUSH
62681: LD_INT 1
62683: ST_TO_ADDR
// end ; if p2 = hack_mode then
62684: LD_VAR 0 2
62688: PUSH
62689: LD_INT 101
62691: EQUAL
62692: IFFALSE 62820
// begin case p3 of 1 :
62694: LD_VAR 0 3
62698: PUSH
62699: LD_INT 1
62701: DOUBLE
62702: EQUAL
62703: IFTRUE 62707
62705: GO 62714
62707: POP
// hHackUnlimitedResources ; 2 :
62708: CALL 74959 0 0
62712: GO 62820
62714: LD_INT 2
62716: DOUBLE
62717: EQUAL
62718: IFTRUE 62722
62720: GO 62729
62722: POP
// hHackSetLevel10 ; 3 :
62723: CALL 75092 0 0
62727: GO 62820
62729: LD_INT 3
62731: DOUBLE
62732: EQUAL
62733: IFTRUE 62737
62735: GO 62744
62737: POP
// hHackSetLevel10YourUnits ; 4 :
62738: CALL 75177 0 0
62742: GO 62820
62744: LD_INT 4
62746: DOUBLE
62747: EQUAL
62748: IFTRUE 62752
62750: GO 62759
62752: POP
// hHackInvincible ; 5 :
62753: CALL 75625 0 0
62757: GO 62820
62759: LD_INT 5
62761: DOUBLE
62762: EQUAL
62763: IFTRUE 62767
62765: GO 62774
62767: POP
// hHackInvisible ; 6 :
62768: CALL 75736 0 0
62772: GO 62820
62774: LD_INT 6
62776: DOUBLE
62777: EQUAL
62778: IFTRUE 62782
62780: GO 62789
62782: POP
// hHackChangeYourSide ; 7 :
62783: CALL 75793 0 0
62787: GO 62820
62789: LD_INT 7
62791: DOUBLE
62792: EQUAL
62793: IFTRUE 62797
62795: GO 62804
62797: POP
// hHackChangeUnitSide ; 8 :
62798: CALL 75835 0 0
62802: GO 62820
62804: LD_INT 8
62806: DOUBLE
62807: EQUAL
62808: IFTRUE 62812
62810: GO 62819
62812: POP
// hHackFog ; end ;
62813: CALL 75936 0 0
62817: GO 62820
62819: POP
// end ; if p2 = game_save_mode then
62820: LD_VAR 0 2
62824: PUSH
62825: LD_INT 102
62827: EQUAL
62828: IFFALSE 62883
// begin if p3 = 1 then
62830: LD_VAR 0 3
62834: PUSH
62835: LD_INT 1
62837: EQUAL
62838: IFFALSE 62850
// globalGameSaveCounter := p4 ;
62840: LD_ADDR_EXP 45
62844: PUSH
62845: LD_VAR 0 4
62849: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
62850: LD_VAR 0 3
62854: PUSH
62855: LD_INT 2
62857: EQUAL
62858: PUSH
62859: LD_EXP 45
62863: AND
62864: IFFALSE 62883
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
62866: LD_STRING setGameSaveCounter(
62868: PUSH
62869: LD_EXP 45
62873: STR
62874: PUSH
62875: LD_STRING )
62877: STR
62878: PPUSH
62879: CALL_OW 559
// end ; end ;
62883: LD_VAR 0 7
62887: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
62888: LD_INT 0
62890: PPUSH
// streamModeActive := false ;
62891: LD_ADDR_EXP 46
62895: PUSH
62896: LD_INT 0
62898: ST_TO_ADDR
// normalCounter := 36 ;
62899: LD_ADDR_EXP 47
62903: PUSH
62904: LD_INT 36
62906: ST_TO_ADDR
// hardcoreCounter := 18 ;
62907: LD_ADDR_EXP 48
62911: PUSH
62912: LD_INT 18
62914: ST_TO_ADDR
// sRocket := false ;
62915: LD_ADDR_EXP 51
62919: PUSH
62920: LD_INT 0
62922: ST_TO_ADDR
// sSpeed := false ;
62923: LD_ADDR_EXP 50
62927: PUSH
62928: LD_INT 0
62930: ST_TO_ADDR
// sEngine := false ;
62931: LD_ADDR_EXP 52
62935: PUSH
62936: LD_INT 0
62938: ST_TO_ADDR
// sSpec := false ;
62939: LD_ADDR_EXP 49
62943: PUSH
62944: LD_INT 0
62946: ST_TO_ADDR
// sLevel := false ;
62947: LD_ADDR_EXP 53
62951: PUSH
62952: LD_INT 0
62954: ST_TO_ADDR
// sArmoury := false ;
62955: LD_ADDR_EXP 54
62959: PUSH
62960: LD_INT 0
62962: ST_TO_ADDR
// sRadar := false ;
62963: LD_ADDR_EXP 55
62967: PUSH
62968: LD_INT 0
62970: ST_TO_ADDR
// sBunker := false ;
62971: LD_ADDR_EXP 56
62975: PUSH
62976: LD_INT 0
62978: ST_TO_ADDR
// sHack := false ;
62979: LD_ADDR_EXP 57
62983: PUSH
62984: LD_INT 0
62986: ST_TO_ADDR
// sFire := false ;
62987: LD_ADDR_EXP 58
62991: PUSH
62992: LD_INT 0
62994: ST_TO_ADDR
// sRefresh := false ;
62995: LD_ADDR_EXP 59
62999: PUSH
63000: LD_INT 0
63002: ST_TO_ADDR
// sExp := false ;
63003: LD_ADDR_EXP 60
63007: PUSH
63008: LD_INT 0
63010: ST_TO_ADDR
// sDepot := false ;
63011: LD_ADDR_EXP 61
63015: PUSH
63016: LD_INT 0
63018: ST_TO_ADDR
// sFlag := false ;
63019: LD_ADDR_EXP 62
63023: PUSH
63024: LD_INT 0
63026: ST_TO_ADDR
// sKamikadze := false ;
63027: LD_ADDR_EXP 70
63031: PUSH
63032: LD_INT 0
63034: ST_TO_ADDR
// sTroll := false ;
63035: LD_ADDR_EXP 71
63039: PUSH
63040: LD_INT 0
63042: ST_TO_ADDR
// sSlow := false ;
63043: LD_ADDR_EXP 72
63047: PUSH
63048: LD_INT 0
63050: ST_TO_ADDR
// sLack := false ;
63051: LD_ADDR_EXP 73
63055: PUSH
63056: LD_INT 0
63058: ST_TO_ADDR
// sTank := false ;
63059: LD_ADDR_EXP 75
63063: PUSH
63064: LD_INT 0
63066: ST_TO_ADDR
// sRemote := false ;
63067: LD_ADDR_EXP 76
63071: PUSH
63072: LD_INT 0
63074: ST_TO_ADDR
// sPowell := false ;
63075: LD_ADDR_EXP 77
63079: PUSH
63080: LD_INT 0
63082: ST_TO_ADDR
// sTeleport := false ;
63083: LD_ADDR_EXP 80
63087: PUSH
63088: LD_INT 0
63090: ST_TO_ADDR
// sOilTower := false ;
63091: LD_ADDR_EXP 82
63095: PUSH
63096: LD_INT 0
63098: ST_TO_ADDR
// sShovel := false ;
63099: LD_ADDR_EXP 83
63103: PUSH
63104: LD_INT 0
63106: ST_TO_ADDR
// sSheik := false ;
63107: LD_ADDR_EXP 84
63111: PUSH
63112: LD_INT 0
63114: ST_TO_ADDR
// sEarthquake := false ;
63115: LD_ADDR_EXP 86
63119: PUSH
63120: LD_INT 0
63122: ST_TO_ADDR
// sAI := false ;
63123: LD_ADDR_EXP 87
63127: PUSH
63128: LD_INT 0
63130: ST_TO_ADDR
// sCargo := false ;
63131: LD_ADDR_EXP 90
63135: PUSH
63136: LD_INT 0
63138: ST_TO_ADDR
// sDLaser := false ;
63139: LD_ADDR_EXP 91
63143: PUSH
63144: LD_INT 0
63146: ST_TO_ADDR
// sExchange := false ;
63147: LD_ADDR_EXP 92
63151: PUSH
63152: LD_INT 0
63154: ST_TO_ADDR
// sFac := false ;
63155: LD_ADDR_EXP 93
63159: PUSH
63160: LD_INT 0
63162: ST_TO_ADDR
// sPower := false ;
63163: LD_ADDR_EXP 94
63167: PUSH
63168: LD_INT 0
63170: ST_TO_ADDR
// sRandom := false ;
63171: LD_ADDR_EXP 95
63175: PUSH
63176: LD_INT 0
63178: ST_TO_ADDR
// sShield := false ;
63179: LD_ADDR_EXP 96
63183: PUSH
63184: LD_INT 0
63186: ST_TO_ADDR
// sTime := false ;
63187: LD_ADDR_EXP 97
63191: PUSH
63192: LD_INT 0
63194: ST_TO_ADDR
// sTools := false ;
63195: LD_ADDR_EXP 98
63199: PUSH
63200: LD_INT 0
63202: ST_TO_ADDR
// sSold := false ;
63203: LD_ADDR_EXP 63
63207: PUSH
63208: LD_INT 0
63210: ST_TO_ADDR
// sDiff := false ;
63211: LD_ADDR_EXP 64
63215: PUSH
63216: LD_INT 0
63218: ST_TO_ADDR
// sFog := false ;
63219: LD_ADDR_EXP 67
63223: PUSH
63224: LD_INT 0
63226: ST_TO_ADDR
// sReset := false ;
63227: LD_ADDR_EXP 68
63231: PUSH
63232: LD_INT 0
63234: ST_TO_ADDR
// sSun := false ;
63235: LD_ADDR_EXP 69
63239: PUSH
63240: LD_INT 0
63242: ST_TO_ADDR
// sTiger := false ;
63243: LD_ADDR_EXP 65
63247: PUSH
63248: LD_INT 0
63250: ST_TO_ADDR
// sBomb := false ;
63251: LD_ADDR_EXP 66
63255: PUSH
63256: LD_INT 0
63258: ST_TO_ADDR
// sWound := false ;
63259: LD_ADDR_EXP 74
63263: PUSH
63264: LD_INT 0
63266: ST_TO_ADDR
// sBetray := false ;
63267: LD_ADDR_EXP 78
63271: PUSH
63272: LD_INT 0
63274: ST_TO_ADDR
// sContamin := false ;
63275: LD_ADDR_EXP 79
63279: PUSH
63280: LD_INT 0
63282: ST_TO_ADDR
// sOil := false ;
63283: LD_ADDR_EXP 81
63287: PUSH
63288: LD_INT 0
63290: ST_TO_ADDR
// sStu := false ;
63291: LD_ADDR_EXP 85
63295: PUSH
63296: LD_INT 0
63298: ST_TO_ADDR
// sBazooka := false ;
63299: LD_ADDR_EXP 88
63303: PUSH
63304: LD_INT 0
63306: ST_TO_ADDR
// sMortar := false ;
63307: LD_ADDR_EXP 89
63311: PUSH
63312: LD_INT 0
63314: ST_TO_ADDR
// sRanger := false ;
63315: LD_ADDR_EXP 99
63319: PUSH
63320: LD_INT 0
63322: ST_TO_ADDR
// sComputer := false ;
63323: LD_ADDR_EXP 100
63327: PUSH
63328: LD_INT 0
63330: ST_TO_ADDR
// s30 := false ;
63331: LD_ADDR_EXP 101
63335: PUSH
63336: LD_INT 0
63338: ST_TO_ADDR
// s60 := false ;
63339: LD_ADDR_EXP 102
63343: PUSH
63344: LD_INT 0
63346: ST_TO_ADDR
// end ;
63347: LD_VAR 0 1
63351: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
63352: LD_INT 0
63354: PPUSH
63355: PPUSH
63356: PPUSH
63357: PPUSH
63358: PPUSH
63359: PPUSH
63360: PPUSH
// result := [ ] ;
63361: LD_ADDR_VAR 0 2
63365: PUSH
63366: EMPTY
63367: ST_TO_ADDR
// if campaign_id = 1 then
63368: LD_OWVAR 69
63372: PUSH
63373: LD_INT 1
63375: EQUAL
63376: IFFALSE 66542
// begin case mission_number of 1 :
63378: LD_OWVAR 70
63382: PUSH
63383: LD_INT 1
63385: DOUBLE
63386: EQUAL
63387: IFTRUE 63391
63389: GO 63467
63391: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
63392: LD_ADDR_VAR 0 2
63396: PUSH
63397: LD_INT 2
63399: PUSH
63400: LD_INT 4
63402: PUSH
63403: LD_INT 11
63405: PUSH
63406: LD_INT 12
63408: PUSH
63409: LD_INT 15
63411: PUSH
63412: LD_INT 16
63414: PUSH
63415: LD_INT 22
63417: PUSH
63418: LD_INT 23
63420: PUSH
63421: LD_INT 26
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 101
63437: PUSH
63438: LD_INT 102
63440: PUSH
63441: LD_INT 106
63443: PUSH
63444: LD_INT 116
63446: PUSH
63447: LD_INT 117
63449: PUSH
63450: LD_INT 118
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: ST_TO_ADDR
63465: GO 66540
63467: LD_INT 2
63469: DOUBLE
63470: EQUAL
63471: IFTRUE 63475
63473: GO 63559
63475: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
63476: LD_ADDR_VAR 0 2
63480: PUSH
63481: LD_INT 2
63483: PUSH
63484: LD_INT 4
63486: PUSH
63487: LD_INT 11
63489: PUSH
63490: LD_INT 12
63492: PUSH
63493: LD_INT 15
63495: PUSH
63496: LD_INT 16
63498: PUSH
63499: LD_INT 22
63501: PUSH
63502: LD_INT 23
63504: PUSH
63505: LD_INT 26
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 101
63521: PUSH
63522: LD_INT 102
63524: PUSH
63525: LD_INT 105
63527: PUSH
63528: LD_INT 106
63530: PUSH
63531: LD_INT 108
63533: PUSH
63534: LD_INT 116
63536: PUSH
63537: LD_INT 117
63539: PUSH
63540: LD_INT 118
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: ST_TO_ADDR
63557: GO 66540
63559: LD_INT 3
63561: DOUBLE
63562: EQUAL
63563: IFTRUE 63567
63565: GO 63655
63567: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
63568: LD_ADDR_VAR 0 2
63572: PUSH
63573: LD_INT 2
63575: PUSH
63576: LD_INT 4
63578: PUSH
63579: LD_INT 5
63581: PUSH
63582: LD_INT 11
63584: PUSH
63585: LD_INT 12
63587: PUSH
63588: LD_INT 15
63590: PUSH
63591: LD_INT 16
63593: PUSH
63594: LD_INT 22
63596: PUSH
63597: LD_INT 26
63599: PUSH
63600: LD_INT 36
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 101
63617: PUSH
63618: LD_INT 102
63620: PUSH
63621: LD_INT 105
63623: PUSH
63624: LD_INT 106
63626: PUSH
63627: LD_INT 108
63629: PUSH
63630: LD_INT 116
63632: PUSH
63633: LD_INT 117
63635: PUSH
63636: LD_INT 118
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: ST_TO_ADDR
63653: GO 66540
63655: LD_INT 4
63657: DOUBLE
63658: EQUAL
63659: IFTRUE 63663
63661: GO 63759
63663: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
63664: LD_ADDR_VAR 0 2
63668: PUSH
63669: LD_INT 2
63671: PUSH
63672: LD_INT 4
63674: PUSH
63675: LD_INT 5
63677: PUSH
63678: LD_INT 8
63680: PUSH
63681: LD_INT 11
63683: PUSH
63684: LD_INT 12
63686: PUSH
63687: LD_INT 15
63689: PUSH
63690: LD_INT 16
63692: PUSH
63693: LD_INT 22
63695: PUSH
63696: LD_INT 23
63698: PUSH
63699: LD_INT 26
63701: PUSH
63702: LD_INT 36
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 101
63721: PUSH
63722: LD_INT 102
63724: PUSH
63725: LD_INT 105
63727: PUSH
63728: LD_INT 106
63730: PUSH
63731: LD_INT 108
63733: PUSH
63734: LD_INT 116
63736: PUSH
63737: LD_INT 117
63739: PUSH
63740: LD_INT 118
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: ST_TO_ADDR
63757: GO 66540
63759: LD_INT 5
63761: DOUBLE
63762: EQUAL
63763: IFTRUE 63767
63765: GO 63879
63767: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
63768: LD_ADDR_VAR 0 2
63772: PUSH
63773: LD_INT 2
63775: PUSH
63776: LD_INT 4
63778: PUSH
63779: LD_INT 5
63781: PUSH
63782: LD_INT 6
63784: PUSH
63785: LD_INT 8
63787: PUSH
63788: LD_INT 11
63790: PUSH
63791: LD_INT 12
63793: PUSH
63794: LD_INT 15
63796: PUSH
63797: LD_INT 16
63799: PUSH
63800: LD_INT 22
63802: PUSH
63803: LD_INT 23
63805: PUSH
63806: LD_INT 25
63808: PUSH
63809: LD_INT 26
63811: PUSH
63812: LD_INT 36
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 101
63833: PUSH
63834: LD_INT 102
63836: PUSH
63837: LD_INT 105
63839: PUSH
63840: LD_INT 106
63842: PUSH
63843: LD_INT 108
63845: PUSH
63846: LD_INT 109
63848: PUSH
63849: LD_INT 112
63851: PUSH
63852: LD_INT 116
63854: PUSH
63855: LD_INT 117
63857: PUSH
63858: LD_INT 118
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: ST_TO_ADDR
63877: GO 66540
63879: LD_INT 6
63881: DOUBLE
63882: EQUAL
63883: IFTRUE 63887
63885: GO 64019
63887: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
63888: LD_ADDR_VAR 0 2
63892: PUSH
63893: LD_INT 2
63895: PUSH
63896: LD_INT 4
63898: PUSH
63899: LD_INT 5
63901: PUSH
63902: LD_INT 6
63904: PUSH
63905: LD_INT 8
63907: PUSH
63908: LD_INT 11
63910: PUSH
63911: LD_INT 12
63913: PUSH
63914: LD_INT 15
63916: PUSH
63917: LD_INT 16
63919: PUSH
63920: LD_INT 20
63922: PUSH
63923: LD_INT 21
63925: PUSH
63926: LD_INT 22
63928: PUSH
63929: LD_INT 23
63931: PUSH
63932: LD_INT 25
63934: PUSH
63935: LD_INT 26
63937: PUSH
63938: LD_INT 30
63940: PUSH
63941: LD_INT 31
63943: PUSH
63944: LD_INT 32
63946: PUSH
63947: LD_INT 36
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 101
63973: PUSH
63974: LD_INT 102
63976: PUSH
63977: LD_INT 105
63979: PUSH
63980: LD_INT 106
63982: PUSH
63983: LD_INT 108
63985: PUSH
63986: LD_INT 109
63988: PUSH
63989: LD_INT 112
63991: PUSH
63992: LD_INT 116
63994: PUSH
63995: LD_INT 117
63997: PUSH
63998: LD_INT 118
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: ST_TO_ADDR
64017: GO 66540
64019: LD_INT 7
64021: DOUBLE
64022: EQUAL
64023: IFTRUE 64027
64025: GO 64139
64027: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
64028: LD_ADDR_VAR 0 2
64032: PUSH
64033: LD_INT 2
64035: PUSH
64036: LD_INT 4
64038: PUSH
64039: LD_INT 5
64041: PUSH
64042: LD_INT 7
64044: PUSH
64045: LD_INT 11
64047: PUSH
64048: LD_INT 12
64050: PUSH
64051: LD_INT 15
64053: PUSH
64054: LD_INT 16
64056: PUSH
64057: LD_INT 20
64059: PUSH
64060: LD_INT 21
64062: PUSH
64063: LD_INT 22
64065: PUSH
64066: LD_INT 23
64068: PUSH
64069: LD_INT 25
64071: PUSH
64072: LD_INT 26
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 101
64093: PUSH
64094: LD_INT 102
64096: PUSH
64097: LD_INT 103
64099: PUSH
64100: LD_INT 105
64102: PUSH
64103: LD_INT 106
64105: PUSH
64106: LD_INT 108
64108: PUSH
64109: LD_INT 112
64111: PUSH
64112: LD_INT 116
64114: PUSH
64115: LD_INT 117
64117: PUSH
64118: LD_INT 118
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: ST_TO_ADDR
64137: GO 66540
64139: LD_INT 8
64141: DOUBLE
64142: EQUAL
64143: IFTRUE 64147
64145: GO 64287
64147: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
64148: LD_ADDR_VAR 0 2
64152: PUSH
64153: LD_INT 2
64155: PUSH
64156: LD_INT 4
64158: PUSH
64159: LD_INT 5
64161: PUSH
64162: LD_INT 6
64164: PUSH
64165: LD_INT 7
64167: PUSH
64168: LD_INT 8
64170: PUSH
64171: LD_INT 11
64173: PUSH
64174: LD_INT 12
64176: PUSH
64177: LD_INT 15
64179: PUSH
64180: LD_INT 16
64182: PUSH
64183: LD_INT 20
64185: PUSH
64186: LD_INT 21
64188: PUSH
64189: LD_INT 22
64191: PUSH
64192: LD_INT 23
64194: PUSH
64195: LD_INT 25
64197: PUSH
64198: LD_INT 26
64200: PUSH
64201: LD_INT 30
64203: PUSH
64204: LD_INT 31
64206: PUSH
64207: LD_INT 32
64209: PUSH
64210: LD_INT 36
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 101
64237: PUSH
64238: LD_INT 102
64240: PUSH
64241: LD_INT 103
64243: PUSH
64244: LD_INT 105
64246: PUSH
64247: LD_INT 106
64249: PUSH
64250: LD_INT 108
64252: PUSH
64253: LD_INT 109
64255: PUSH
64256: LD_INT 112
64258: PUSH
64259: LD_INT 116
64261: PUSH
64262: LD_INT 117
64264: PUSH
64265: LD_INT 118
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: ST_TO_ADDR
64285: GO 66540
64287: LD_INT 9
64289: DOUBLE
64290: EQUAL
64291: IFTRUE 64295
64293: GO 64443
64295: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
64296: LD_ADDR_VAR 0 2
64300: PUSH
64301: LD_INT 2
64303: PUSH
64304: LD_INT 4
64306: PUSH
64307: LD_INT 5
64309: PUSH
64310: LD_INT 6
64312: PUSH
64313: LD_INT 7
64315: PUSH
64316: LD_INT 8
64318: PUSH
64319: LD_INT 11
64321: PUSH
64322: LD_INT 12
64324: PUSH
64325: LD_INT 15
64327: PUSH
64328: LD_INT 16
64330: PUSH
64331: LD_INT 20
64333: PUSH
64334: LD_INT 21
64336: PUSH
64337: LD_INT 22
64339: PUSH
64340: LD_INT 23
64342: PUSH
64343: LD_INT 25
64345: PUSH
64346: LD_INT 26
64348: PUSH
64349: LD_INT 28
64351: PUSH
64352: LD_INT 30
64354: PUSH
64355: LD_INT 31
64357: PUSH
64358: LD_INT 32
64360: PUSH
64361: LD_INT 36
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: PUSH
64387: LD_INT 101
64389: PUSH
64390: LD_INT 102
64392: PUSH
64393: LD_INT 103
64395: PUSH
64396: LD_INT 105
64398: PUSH
64399: LD_INT 106
64401: PUSH
64402: LD_INT 108
64404: PUSH
64405: LD_INT 109
64407: PUSH
64408: LD_INT 112
64410: PUSH
64411: LD_INT 114
64413: PUSH
64414: LD_INT 116
64416: PUSH
64417: LD_INT 117
64419: PUSH
64420: LD_INT 118
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: ST_TO_ADDR
64441: GO 66540
64443: LD_INT 10
64445: DOUBLE
64446: EQUAL
64447: IFTRUE 64451
64449: GO 64647
64451: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
64452: LD_ADDR_VAR 0 2
64456: PUSH
64457: LD_INT 2
64459: PUSH
64460: LD_INT 4
64462: PUSH
64463: LD_INT 5
64465: PUSH
64466: LD_INT 6
64468: PUSH
64469: LD_INT 7
64471: PUSH
64472: LD_INT 8
64474: PUSH
64475: LD_INT 9
64477: PUSH
64478: LD_INT 10
64480: PUSH
64481: LD_INT 11
64483: PUSH
64484: LD_INT 12
64486: PUSH
64487: LD_INT 13
64489: PUSH
64490: LD_INT 14
64492: PUSH
64493: LD_INT 15
64495: PUSH
64496: LD_INT 16
64498: PUSH
64499: LD_INT 17
64501: PUSH
64502: LD_INT 18
64504: PUSH
64505: LD_INT 19
64507: PUSH
64508: LD_INT 20
64510: PUSH
64511: LD_INT 21
64513: PUSH
64514: LD_INT 22
64516: PUSH
64517: LD_INT 23
64519: PUSH
64520: LD_INT 24
64522: PUSH
64523: LD_INT 25
64525: PUSH
64526: LD_INT 26
64528: PUSH
64529: LD_INT 28
64531: PUSH
64532: LD_INT 30
64534: PUSH
64535: LD_INT 31
64537: PUSH
64538: LD_INT 32
64540: PUSH
64541: LD_INT 36
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 101
64577: PUSH
64578: LD_INT 102
64580: PUSH
64581: LD_INT 103
64583: PUSH
64584: LD_INT 104
64586: PUSH
64587: LD_INT 105
64589: PUSH
64590: LD_INT 106
64592: PUSH
64593: LD_INT 107
64595: PUSH
64596: LD_INT 108
64598: PUSH
64599: LD_INT 109
64601: PUSH
64602: LD_INT 110
64604: PUSH
64605: LD_INT 111
64607: PUSH
64608: LD_INT 112
64610: PUSH
64611: LD_INT 114
64613: PUSH
64614: LD_INT 116
64616: PUSH
64617: LD_INT 117
64619: PUSH
64620: LD_INT 118
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: ST_TO_ADDR
64645: GO 66540
64647: LD_INT 11
64649: DOUBLE
64650: EQUAL
64651: IFTRUE 64655
64653: GO 64859
64655: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
64656: LD_ADDR_VAR 0 2
64660: PUSH
64661: LD_INT 2
64663: PUSH
64664: LD_INT 3
64666: PUSH
64667: LD_INT 4
64669: PUSH
64670: LD_INT 5
64672: PUSH
64673: LD_INT 6
64675: PUSH
64676: LD_INT 7
64678: PUSH
64679: LD_INT 8
64681: PUSH
64682: LD_INT 9
64684: PUSH
64685: LD_INT 10
64687: PUSH
64688: LD_INT 11
64690: PUSH
64691: LD_INT 12
64693: PUSH
64694: LD_INT 13
64696: PUSH
64697: LD_INT 14
64699: PUSH
64700: LD_INT 15
64702: PUSH
64703: LD_INT 16
64705: PUSH
64706: LD_INT 17
64708: PUSH
64709: LD_INT 18
64711: PUSH
64712: LD_INT 19
64714: PUSH
64715: LD_INT 20
64717: PUSH
64718: LD_INT 21
64720: PUSH
64721: LD_INT 22
64723: PUSH
64724: LD_INT 23
64726: PUSH
64727: LD_INT 24
64729: PUSH
64730: LD_INT 25
64732: PUSH
64733: LD_INT 26
64735: PUSH
64736: LD_INT 28
64738: PUSH
64739: LD_INT 30
64741: PUSH
64742: LD_INT 31
64744: PUSH
64745: LD_INT 32
64747: PUSH
64748: LD_INT 34
64750: PUSH
64751: LD_INT 36
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: LIST
64777: LIST
64778: LIST
64779: LIST
64780: LIST
64781: LIST
64782: LIST
64783: LIST
64784: LIST
64785: LIST
64786: PUSH
64787: LD_INT 101
64789: PUSH
64790: LD_INT 102
64792: PUSH
64793: LD_INT 103
64795: PUSH
64796: LD_INT 104
64798: PUSH
64799: LD_INT 105
64801: PUSH
64802: LD_INT 106
64804: PUSH
64805: LD_INT 107
64807: PUSH
64808: LD_INT 108
64810: PUSH
64811: LD_INT 109
64813: PUSH
64814: LD_INT 110
64816: PUSH
64817: LD_INT 111
64819: PUSH
64820: LD_INT 112
64822: PUSH
64823: LD_INT 114
64825: PUSH
64826: LD_INT 116
64828: PUSH
64829: LD_INT 117
64831: PUSH
64832: LD_INT 118
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: LIST
64839: LIST
64840: LIST
64841: LIST
64842: LIST
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: ST_TO_ADDR
64857: GO 66540
64859: LD_INT 12
64861: DOUBLE
64862: EQUAL
64863: IFTRUE 64867
64865: GO 65087
64867: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
64868: LD_ADDR_VAR 0 2
64872: PUSH
64873: LD_INT 1
64875: PUSH
64876: LD_INT 2
64878: PUSH
64879: LD_INT 3
64881: PUSH
64882: LD_INT 4
64884: PUSH
64885: LD_INT 5
64887: PUSH
64888: LD_INT 6
64890: PUSH
64891: LD_INT 7
64893: PUSH
64894: LD_INT 8
64896: PUSH
64897: LD_INT 9
64899: PUSH
64900: LD_INT 10
64902: PUSH
64903: LD_INT 11
64905: PUSH
64906: LD_INT 12
64908: PUSH
64909: LD_INT 13
64911: PUSH
64912: LD_INT 14
64914: PUSH
64915: LD_INT 15
64917: PUSH
64918: LD_INT 16
64920: PUSH
64921: LD_INT 17
64923: PUSH
64924: LD_INT 18
64926: PUSH
64927: LD_INT 19
64929: PUSH
64930: LD_INT 20
64932: PUSH
64933: LD_INT 21
64935: PUSH
64936: LD_INT 22
64938: PUSH
64939: LD_INT 23
64941: PUSH
64942: LD_INT 24
64944: PUSH
64945: LD_INT 25
64947: PUSH
64948: LD_INT 26
64950: PUSH
64951: LD_INT 27
64953: PUSH
64954: LD_INT 28
64956: PUSH
64957: LD_INT 30
64959: PUSH
64960: LD_INT 31
64962: PUSH
64963: LD_INT 32
64965: PUSH
64966: LD_INT 33
64968: PUSH
64969: LD_INT 34
64971: PUSH
64972: LD_INT 36
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 101
65013: PUSH
65014: LD_INT 102
65016: PUSH
65017: LD_INT 103
65019: PUSH
65020: LD_INT 104
65022: PUSH
65023: LD_INT 105
65025: PUSH
65026: LD_INT 106
65028: PUSH
65029: LD_INT 107
65031: PUSH
65032: LD_INT 108
65034: PUSH
65035: LD_INT 109
65037: PUSH
65038: LD_INT 110
65040: PUSH
65041: LD_INT 111
65043: PUSH
65044: LD_INT 112
65046: PUSH
65047: LD_INT 113
65049: PUSH
65050: LD_INT 114
65052: PUSH
65053: LD_INT 116
65055: PUSH
65056: LD_INT 117
65058: PUSH
65059: LD_INT 118
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: ST_TO_ADDR
65085: GO 66540
65087: LD_INT 13
65089: DOUBLE
65090: EQUAL
65091: IFTRUE 65095
65093: GO 65303
65095: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
65096: LD_ADDR_VAR 0 2
65100: PUSH
65101: LD_INT 1
65103: PUSH
65104: LD_INT 2
65106: PUSH
65107: LD_INT 3
65109: PUSH
65110: LD_INT 4
65112: PUSH
65113: LD_INT 5
65115: PUSH
65116: LD_INT 8
65118: PUSH
65119: LD_INT 9
65121: PUSH
65122: LD_INT 10
65124: PUSH
65125: LD_INT 11
65127: PUSH
65128: LD_INT 12
65130: PUSH
65131: LD_INT 14
65133: PUSH
65134: LD_INT 15
65136: PUSH
65137: LD_INT 16
65139: PUSH
65140: LD_INT 17
65142: PUSH
65143: LD_INT 18
65145: PUSH
65146: LD_INT 19
65148: PUSH
65149: LD_INT 20
65151: PUSH
65152: LD_INT 21
65154: PUSH
65155: LD_INT 22
65157: PUSH
65158: LD_INT 23
65160: PUSH
65161: LD_INT 24
65163: PUSH
65164: LD_INT 25
65166: PUSH
65167: LD_INT 26
65169: PUSH
65170: LD_INT 27
65172: PUSH
65173: LD_INT 28
65175: PUSH
65176: LD_INT 30
65178: PUSH
65179: LD_INT 31
65181: PUSH
65182: LD_INT 32
65184: PUSH
65185: LD_INT 33
65187: PUSH
65188: LD_INT 34
65190: PUSH
65191: LD_INT 36
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: LIST
65212: LIST
65213: LIST
65214: LIST
65215: LIST
65216: LIST
65217: LIST
65218: LIST
65219: LIST
65220: LIST
65221: LIST
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 101
65229: PUSH
65230: LD_INT 102
65232: PUSH
65233: LD_INT 103
65235: PUSH
65236: LD_INT 104
65238: PUSH
65239: LD_INT 105
65241: PUSH
65242: LD_INT 106
65244: PUSH
65245: LD_INT 107
65247: PUSH
65248: LD_INT 108
65250: PUSH
65251: LD_INT 109
65253: PUSH
65254: LD_INT 110
65256: PUSH
65257: LD_INT 111
65259: PUSH
65260: LD_INT 112
65262: PUSH
65263: LD_INT 113
65265: PUSH
65266: LD_INT 114
65268: PUSH
65269: LD_INT 116
65271: PUSH
65272: LD_INT 117
65274: PUSH
65275: LD_INT 118
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: ST_TO_ADDR
65301: GO 66540
65303: LD_INT 14
65305: DOUBLE
65306: EQUAL
65307: IFTRUE 65311
65309: GO 65535
65311: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
65312: LD_ADDR_VAR 0 2
65316: PUSH
65317: LD_INT 1
65319: PUSH
65320: LD_INT 2
65322: PUSH
65323: LD_INT 3
65325: PUSH
65326: LD_INT 4
65328: PUSH
65329: LD_INT 5
65331: PUSH
65332: LD_INT 6
65334: PUSH
65335: LD_INT 7
65337: PUSH
65338: LD_INT 8
65340: PUSH
65341: LD_INT 9
65343: PUSH
65344: LD_INT 10
65346: PUSH
65347: LD_INT 11
65349: PUSH
65350: LD_INT 12
65352: PUSH
65353: LD_INT 13
65355: PUSH
65356: LD_INT 14
65358: PUSH
65359: LD_INT 15
65361: PUSH
65362: LD_INT 16
65364: PUSH
65365: LD_INT 17
65367: PUSH
65368: LD_INT 18
65370: PUSH
65371: LD_INT 19
65373: PUSH
65374: LD_INT 20
65376: PUSH
65377: LD_INT 21
65379: PUSH
65380: LD_INT 22
65382: PUSH
65383: LD_INT 23
65385: PUSH
65386: LD_INT 24
65388: PUSH
65389: LD_INT 25
65391: PUSH
65392: LD_INT 26
65394: PUSH
65395: LD_INT 27
65397: PUSH
65398: LD_INT 28
65400: PUSH
65401: LD_INT 29
65403: PUSH
65404: LD_INT 30
65406: PUSH
65407: LD_INT 31
65409: PUSH
65410: LD_INT 32
65412: PUSH
65413: LD_INT 33
65415: PUSH
65416: LD_INT 34
65418: PUSH
65419: LD_INT 36
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: LIST
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: PUSH
65459: LD_INT 101
65461: PUSH
65462: LD_INT 102
65464: PUSH
65465: LD_INT 103
65467: PUSH
65468: LD_INT 104
65470: PUSH
65471: LD_INT 105
65473: PUSH
65474: LD_INT 106
65476: PUSH
65477: LD_INT 107
65479: PUSH
65480: LD_INT 108
65482: PUSH
65483: LD_INT 109
65485: PUSH
65486: LD_INT 110
65488: PUSH
65489: LD_INT 111
65491: PUSH
65492: LD_INT 112
65494: PUSH
65495: LD_INT 113
65497: PUSH
65498: LD_INT 114
65500: PUSH
65501: LD_INT 116
65503: PUSH
65504: LD_INT 117
65506: PUSH
65507: LD_INT 118
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: ST_TO_ADDR
65533: GO 66540
65535: LD_INT 15
65537: DOUBLE
65538: EQUAL
65539: IFTRUE 65543
65541: GO 65767
65543: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
65544: LD_ADDR_VAR 0 2
65548: PUSH
65549: LD_INT 1
65551: PUSH
65552: LD_INT 2
65554: PUSH
65555: LD_INT 3
65557: PUSH
65558: LD_INT 4
65560: PUSH
65561: LD_INT 5
65563: PUSH
65564: LD_INT 6
65566: PUSH
65567: LD_INT 7
65569: PUSH
65570: LD_INT 8
65572: PUSH
65573: LD_INT 9
65575: PUSH
65576: LD_INT 10
65578: PUSH
65579: LD_INT 11
65581: PUSH
65582: LD_INT 12
65584: PUSH
65585: LD_INT 13
65587: PUSH
65588: LD_INT 14
65590: PUSH
65591: LD_INT 15
65593: PUSH
65594: LD_INT 16
65596: PUSH
65597: LD_INT 17
65599: PUSH
65600: LD_INT 18
65602: PUSH
65603: LD_INT 19
65605: PUSH
65606: LD_INT 20
65608: PUSH
65609: LD_INT 21
65611: PUSH
65612: LD_INT 22
65614: PUSH
65615: LD_INT 23
65617: PUSH
65618: LD_INT 24
65620: PUSH
65621: LD_INT 25
65623: PUSH
65624: LD_INT 26
65626: PUSH
65627: LD_INT 27
65629: PUSH
65630: LD_INT 28
65632: PUSH
65633: LD_INT 29
65635: PUSH
65636: LD_INT 30
65638: PUSH
65639: LD_INT 31
65641: PUSH
65642: LD_INT 32
65644: PUSH
65645: LD_INT 33
65647: PUSH
65648: LD_INT 34
65650: PUSH
65651: LD_INT 36
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 101
65693: PUSH
65694: LD_INT 102
65696: PUSH
65697: LD_INT 103
65699: PUSH
65700: LD_INT 104
65702: PUSH
65703: LD_INT 105
65705: PUSH
65706: LD_INT 106
65708: PUSH
65709: LD_INT 107
65711: PUSH
65712: LD_INT 108
65714: PUSH
65715: LD_INT 109
65717: PUSH
65718: LD_INT 110
65720: PUSH
65721: LD_INT 111
65723: PUSH
65724: LD_INT 112
65726: PUSH
65727: LD_INT 113
65729: PUSH
65730: LD_INT 114
65732: PUSH
65733: LD_INT 116
65735: PUSH
65736: LD_INT 117
65738: PUSH
65739: LD_INT 118
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: LIST
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: ST_TO_ADDR
65765: GO 66540
65767: LD_INT 16
65769: DOUBLE
65770: EQUAL
65771: IFTRUE 65775
65773: GO 65911
65775: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
65776: LD_ADDR_VAR 0 2
65780: PUSH
65781: LD_INT 2
65783: PUSH
65784: LD_INT 4
65786: PUSH
65787: LD_INT 5
65789: PUSH
65790: LD_INT 7
65792: PUSH
65793: LD_INT 11
65795: PUSH
65796: LD_INT 12
65798: PUSH
65799: LD_INT 15
65801: PUSH
65802: LD_INT 16
65804: PUSH
65805: LD_INT 20
65807: PUSH
65808: LD_INT 21
65810: PUSH
65811: LD_INT 22
65813: PUSH
65814: LD_INT 23
65816: PUSH
65817: LD_INT 25
65819: PUSH
65820: LD_INT 26
65822: PUSH
65823: LD_INT 30
65825: PUSH
65826: LD_INT 31
65828: PUSH
65829: LD_INT 32
65831: PUSH
65832: LD_INT 33
65834: PUSH
65835: LD_INT 34
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: PUSH
65859: LD_INT 101
65861: PUSH
65862: LD_INT 102
65864: PUSH
65865: LD_INT 103
65867: PUSH
65868: LD_INT 106
65870: PUSH
65871: LD_INT 108
65873: PUSH
65874: LD_INT 112
65876: PUSH
65877: LD_INT 113
65879: PUSH
65880: LD_INT 114
65882: PUSH
65883: LD_INT 116
65885: PUSH
65886: LD_INT 117
65888: PUSH
65889: LD_INT 118
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: ST_TO_ADDR
65909: GO 66540
65911: LD_INT 17
65913: DOUBLE
65914: EQUAL
65915: IFTRUE 65919
65917: GO 66143
65919: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
65920: LD_ADDR_VAR 0 2
65924: PUSH
65925: LD_INT 1
65927: PUSH
65928: LD_INT 2
65930: PUSH
65931: LD_INT 3
65933: PUSH
65934: LD_INT 4
65936: PUSH
65937: LD_INT 5
65939: PUSH
65940: LD_INT 6
65942: PUSH
65943: LD_INT 7
65945: PUSH
65946: LD_INT 8
65948: PUSH
65949: LD_INT 9
65951: PUSH
65952: LD_INT 10
65954: PUSH
65955: LD_INT 11
65957: PUSH
65958: LD_INT 12
65960: PUSH
65961: LD_INT 13
65963: PUSH
65964: LD_INT 14
65966: PUSH
65967: LD_INT 15
65969: PUSH
65970: LD_INT 16
65972: PUSH
65973: LD_INT 17
65975: PUSH
65976: LD_INT 18
65978: PUSH
65979: LD_INT 19
65981: PUSH
65982: LD_INT 20
65984: PUSH
65985: LD_INT 21
65987: PUSH
65988: LD_INT 22
65990: PUSH
65991: LD_INT 23
65993: PUSH
65994: LD_INT 24
65996: PUSH
65997: LD_INT 25
65999: PUSH
66000: LD_INT 26
66002: PUSH
66003: LD_INT 27
66005: PUSH
66006: LD_INT 28
66008: PUSH
66009: LD_INT 29
66011: PUSH
66012: LD_INT 30
66014: PUSH
66015: LD_INT 31
66017: PUSH
66018: LD_INT 32
66020: PUSH
66021: LD_INT 33
66023: PUSH
66024: LD_INT 34
66026: PUSH
66027: LD_INT 36
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: LIST
66034: LIST
66035: LIST
66036: LIST
66037: LIST
66038: LIST
66039: LIST
66040: LIST
66041: LIST
66042: LIST
66043: LIST
66044: LIST
66045: LIST
66046: LIST
66047: LIST
66048: LIST
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 101
66069: PUSH
66070: LD_INT 102
66072: PUSH
66073: LD_INT 103
66075: PUSH
66076: LD_INT 104
66078: PUSH
66079: LD_INT 105
66081: PUSH
66082: LD_INT 106
66084: PUSH
66085: LD_INT 107
66087: PUSH
66088: LD_INT 108
66090: PUSH
66091: LD_INT 109
66093: PUSH
66094: LD_INT 110
66096: PUSH
66097: LD_INT 111
66099: PUSH
66100: LD_INT 112
66102: PUSH
66103: LD_INT 113
66105: PUSH
66106: LD_INT 114
66108: PUSH
66109: LD_INT 116
66111: PUSH
66112: LD_INT 117
66114: PUSH
66115: LD_INT 118
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: ST_TO_ADDR
66141: GO 66540
66143: LD_INT 18
66145: DOUBLE
66146: EQUAL
66147: IFTRUE 66151
66149: GO 66299
66151: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
66152: LD_ADDR_VAR 0 2
66156: PUSH
66157: LD_INT 2
66159: PUSH
66160: LD_INT 4
66162: PUSH
66163: LD_INT 5
66165: PUSH
66166: LD_INT 7
66168: PUSH
66169: LD_INT 11
66171: PUSH
66172: LD_INT 12
66174: PUSH
66175: LD_INT 15
66177: PUSH
66178: LD_INT 16
66180: PUSH
66181: LD_INT 20
66183: PUSH
66184: LD_INT 21
66186: PUSH
66187: LD_INT 22
66189: PUSH
66190: LD_INT 23
66192: PUSH
66193: LD_INT 25
66195: PUSH
66196: LD_INT 26
66198: PUSH
66199: LD_INT 30
66201: PUSH
66202: LD_INT 31
66204: PUSH
66205: LD_INT 32
66207: PUSH
66208: LD_INT 33
66210: PUSH
66211: LD_INT 34
66213: PUSH
66214: LD_INT 35
66216: PUSH
66217: LD_INT 36
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: LIST
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 101
66245: PUSH
66246: LD_INT 102
66248: PUSH
66249: LD_INT 103
66251: PUSH
66252: LD_INT 106
66254: PUSH
66255: LD_INT 108
66257: PUSH
66258: LD_INT 112
66260: PUSH
66261: LD_INT 113
66263: PUSH
66264: LD_INT 114
66266: PUSH
66267: LD_INT 115
66269: PUSH
66270: LD_INT 116
66272: PUSH
66273: LD_INT 117
66275: PUSH
66276: LD_INT 118
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: LIST
66286: LIST
66287: LIST
66288: LIST
66289: LIST
66290: LIST
66291: LIST
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: ST_TO_ADDR
66297: GO 66540
66299: LD_INT 19
66301: DOUBLE
66302: EQUAL
66303: IFTRUE 66307
66305: GO 66539
66307: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
66308: LD_ADDR_VAR 0 2
66312: PUSH
66313: LD_INT 1
66315: PUSH
66316: LD_INT 2
66318: PUSH
66319: LD_INT 3
66321: PUSH
66322: LD_INT 4
66324: PUSH
66325: LD_INT 5
66327: PUSH
66328: LD_INT 6
66330: PUSH
66331: LD_INT 7
66333: PUSH
66334: LD_INT 8
66336: PUSH
66337: LD_INT 9
66339: PUSH
66340: LD_INT 10
66342: PUSH
66343: LD_INT 11
66345: PUSH
66346: LD_INT 12
66348: PUSH
66349: LD_INT 13
66351: PUSH
66352: LD_INT 14
66354: PUSH
66355: LD_INT 15
66357: PUSH
66358: LD_INT 16
66360: PUSH
66361: LD_INT 17
66363: PUSH
66364: LD_INT 18
66366: PUSH
66367: LD_INT 19
66369: PUSH
66370: LD_INT 20
66372: PUSH
66373: LD_INT 21
66375: PUSH
66376: LD_INT 22
66378: PUSH
66379: LD_INT 23
66381: PUSH
66382: LD_INT 24
66384: PUSH
66385: LD_INT 25
66387: PUSH
66388: LD_INT 26
66390: PUSH
66391: LD_INT 27
66393: PUSH
66394: LD_INT 28
66396: PUSH
66397: LD_INT 29
66399: PUSH
66400: LD_INT 30
66402: PUSH
66403: LD_INT 31
66405: PUSH
66406: LD_INT 32
66408: PUSH
66409: LD_INT 33
66411: PUSH
66412: LD_INT 34
66414: PUSH
66415: LD_INT 35
66417: PUSH
66418: LD_INT 36
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: LIST
66428: LIST
66429: LIST
66430: LIST
66431: LIST
66432: LIST
66433: LIST
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: LIST
66446: LIST
66447: LIST
66448: LIST
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: PUSH
66459: LD_INT 101
66461: PUSH
66462: LD_INT 102
66464: PUSH
66465: LD_INT 103
66467: PUSH
66468: LD_INT 104
66470: PUSH
66471: LD_INT 105
66473: PUSH
66474: LD_INT 106
66476: PUSH
66477: LD_INT 107
66479: PUSH
66480: LD_INT 108
66482: PUSH
66483: LD_INT 109
66485: PUSH
66486: LD_INT 110
66488: PUSH
66489: LD_INT 111
66491: PUSH
66492: LD_INT 112
66494: PUSH
66495: LD_INT 113
66497: PUSH
66498: LD_INT 114
66500: PUSH
66501: LD_INT 115
66503: PUSH
66504: LD_INT 116
66506: PUSH
66507: LD_INT 117
66509: PUSH
66510: LD_INT 118
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: LIST
66517: LIST
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: LIST
66527: LIST
66528: LIST
66529: LIST
66530: LIST
66531: LIST
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: ST_TO_ADDR
66537: GO 66540
66539: POP
// end else
66540: GO 66771
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
66542: LD_ADDR_VAR 0 2
66546: PUSH
66547: LD_INT 1
66549: PUSH
66550: LD_INT 2
66552: PUSH
66553: LD_INT 3
66555: PUSH
66556: LD_INT 4
66558: PUSH
66559: LD_INT 5
66561: PUSH
66562: LD_INT 6
66564: PUSH
66565: LD_INT 7
66567: PUSH
66568: LD_INT 8
66570: PUSH
66571: LD_INT 9
66573: PUSH
66574: LD_INT 10
66576: PUSH
66577: LD_INT 11
66579: PUSH
66580: LD_INT 12
66582: PUSH
66583: LD_INT 13
66585: PUSH
66586: LD_INT 14
66588: PUSH
66589: LD_INT 15
66591: PUSH
66592: LD_INT 16
66594: PUSH
66595: LD_INT 17
66597: PUSH
66598: LD_INT 18
66600: PUSH
66601: LD_INT 19
66603: PUSH
66604: LD_INT 20
66606: PUSH
66607: LD_INT 21
66609: PUSH
66610: LD_INT 22
66612: PUSH
66613: LD_INT 23
66615: PUSH
66616: LD_INT 24
66618: PUSH
66619: LD_INT 25
66621: PUSH
66622: LD_INT 26
66624: PUSH
66625: LD_INT 27
66627: PUSH
66628: LD_INT 28
66630: PUSH
66631: LD_INT 29
66633: PUSH
66634: LD_INT 30
66636: PUSH
66637: LD_INT 31
66639: PUSH
66640: LD_INT 32
66642: PUSH
66643: LD_INT 33
66645: PUSH
66646: LD_INT 34
66648: PUSH
66649: LD_INT 35
66651: PUSH
66652: LD_INT 36
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: PUSH
66693: LD_INT 101
66695: PUSH
66696: LD_INT 102
66698: PUSH
66699: LD_INT 103
66701: PUSH
66702: LD_INT 104
66704: PUSH
66705: LD_INT 105
66707: PUSH
66708: LD_INT 106
66710: PUSH
66711: LD_INT 107
66713: PUSH
66714: LD_INT 108
66716: PUSH
66717: LD_INT 109
66719: PUSH
66720: LD_INT 110
66722: PUSH
66723: LD_INT 111
66725: PUSH
66726: LD_INT 112
66728: PUSH
66729: LD_INT 113
66731: PUSH
66732: LD_INT 114
66734: PUSH
66735: LD_INT 115
66737: PUSH
66738: LD_INT 116
66740: PUSH
66741: LD_INT 117
66743: PUSH
66744: LD_INT 118
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: ST_TO_ADDR
// if result then
66771: LD_VAR 0 2
66775: IFFALSE 67561
// begin normal :=  ;
66777: LD_ADDR_VAR 0 5
66781: PUSH
66782: LD_STRING 
66784: ST_TO_ADDR
// hardcore :=  ;
66785: LD_ADDR_VAR 0 6
66789: PUSH
66790: LD_STRING 
66792: ST_TO_ADDR
// active :=  ;
66793: LD_ADDR_VAR 0 7
66797: PUSH
66798: LD_STRING 
66800: ST_TO_ADDR
// for i = 1 to normalCounter do
66801: LD_ADDR_VAR 0 8
66805: PUSH
66806: DOUBLE
66807: LD_INT 1
66809: DEC
66810: ST_TO_ADDR
66811: LD_EXP 47
66815: PUSH
66816: FOR_TO
66817: IFFALSE 66918
// begin tmp := 0 ;
66819: LD_ADDR_VAR 0 3
66823: PUSH
66824: LD_STRING 0
66826: ST_TO_ADDR
// if result [ 1 ] then
66827: LD_VAR 0 2
66831: PUSH
66832: LD_INT 1
66834: ARRAY
66835: IFFALSE 66900
// if result [ 1 ] [ 1 ] = i then
66837: LD_VAR 0 2
66841: PUSH
66842: LD_INT 1
66844: ARRAY
66845: PUSH
66846: LD_INT 1
66848: ARRAY
66849: PUSH
66850: LD_VAR 0 8
66854: EQUAL
66855: IFFALSE 66900
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
66857: LD_ADDR_VAR 0 2
66861: PUSH
66862: LD_VAR 0 2
66866: PPUSH
66867: LD_INT 1
66869: PPUSH
66870: LD_VAR 0 2
66874: PUSH
66875: LD_INT 1
66877: ARRAY
66878: PPUSH
66879: LD_INT 1
66881: PPUSH
66882: CALL_OW 3
66886: PPUSH
66887: CALL_OW 1
66891: ST_TO_ADDR
// tmp := 1 ;
66892: LD_ADDR_VAR 0 3
66896: PUSH
66897: LD_STRING 1
66899: ST_TO_ADDR
// end ; normal := normal & tmp ;
66900: LD_ADDR_VAR 0 5
66904: PUSH
66905: LD_VAR 0 5
66909: PUSH
66910: LD_VAR 0 3
66914: STR
66915: ST_TO_ADDR
// end ;
66916: GO 66816
66918: POP
66919: POP
// for i = 1 to hardcoreCounter do
66920: LD_ADDR_VAR 0 8
66924: PUSH
66925: DOUBLE
66926: LD_INT 1
66928: DEC
66929: ST_TO_ADDR
66930: LD_EXP 48
66934: PUSH
66935: FOR_TO
66936: IFFALSE 67041
// begin tmp := 0 ;
66938: LD_ADDR_VAR 0 3
66942: PUSH
66943: LD_STRING 0
66945: ST_TO_ADDR
// if result [ 2 ] then
66946: LD_VAR 0 2
66950: PUSH
66951: LD_INT 2
66953: ARRAY
66954: IFFALSE 67023
// if result [ 2 ] [ 1 ] = 100 + i then
66956: LD_VAR 0 2
66960: PUSH
66961: LD_INT 2
66963: ARRAY
66964: PUSH
66965: LD_INT 1
66967: ARRAY
66968: PUSH
66969: LD_INT 100
66971: PUSH
66972: LD_VAR 0 8
66976: PLUS
66977: EQUAL
66978: IFFALSE 67023
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
66980: LD_ADDR_VAR 0 2
66984: PUSH
66985: LD_VAR 0 2
66989: PPUSH
66990: LD_INT 2
66992: PPUSH
66993: LD_VAR 0 2
66997: PUSH
66998: LD_INT 2
67000: ARRAY
67001: PPUSH
67002: LD_INT 1
67004: PPUSH
67005: CALL_OW 3
67009: PPUSH
67010: CALL_OW 1
67014: ST_TO_ADDR
// tmp := 1 ;
67015: LD_ADDR_VAR 0 3
67019: PUSH
67020: LD_STRING 1
67022: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
67023: LD_ADDR_VAR 0 6
67027: PUSH
67028: LD_VAR 0 6
67032: PUSH
67033: LD_VAR 0 3
67037: STR
67038: ST_TO_ADDR
// end ;
67039: GO 66935
67041: POP
67042: POP
// if isGameLoad then
67043: LD_VAR 0 1
67047: IFFALSE 67522
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
67049: LD_ADDR_VAR 0 4
67053: PUSH
67054: LD_EXP 51
67058: PUSH
67059: LD_EXP 50
67063: PUSH
67064: LD_EXP 52
67068: PUSH
67069: LD_EXP 49
67073: PUSH
67074: LD_EXP 53
67078: PUSH
67079: LD_EXP 54
67083: PUSH
67084: LD_EXP 55
67088: PUSH
67089: LD_EXP 56
67093: PUSH
67094: LD_EXP 57
67098: PUSH
67099: LD_EXP 58
67103: PUSH
67104: LD_EXP 59
67108: PUSH
67109: LD_EXP 60
67113: PUSH
67114: LD_EXP 61
67118: PUSH
67119: LD_EXP 62
67123: PUSH
67124: LD_EXP 70
67128: PUSH
67129: LD_EXP 71
67133: PUSH
67134: LD_EXP 72
67138: PUSH
67139: LD_EXP 73
67143: PUSH
67144: LD_EXP 75
67148: PUSH
67149: LD_EXP 76
67153: PUSH
67154: LD_EXP 77
67158: PUSH
67159: LD_EXP 80
67163: PUSH
67164: LD_EXP 82
67168: PUSH
67169: LD_EXP 83
67173: PUSH
67174: LD_EXP 84
67178: PUSH
67179: LD_EXP 86
67183: PUSH
67184: LD_EXP 87
67188: PUSH
67189: LD_EXP 90
67193: PUSH
67194: LD_EXP 91
67198: PUSH
67199: LD_EXP 92
67203: PUSH
67204: LD_EXP 93
67208: PUSH
67209: LD_EXP 94
67213: PUSH
67214: LD_EXP 95
67218: PUSH
67219: LD_EXP 96
67223: PUSH
67224: LD_EXP 97
67228: PUSH
67229: LD_EXP 98
67233: PUSH
67234: LD_EXP 63
67238: PUSH
67239: LD_EXP 64
67243: PUSH
67244: LD_EXP 67
67248: PUSH
67249: LD_EXP 68
67253: PUSH
67254: LD_EXP 69
67258: PUSH
67259: LD_EXP 65
67263: PUSH
67264: LD_EXP 66
67268: PUSH
67269: LD_EXP 74
67273: PUSH
67274: LD_EXP 78
67278: PUSH
67279: LD_EXP 79
67283: PUSH
67284: LD_EXP 81
67288: PUSH
67289: LD_EXP 85
67293: PUSH
67294: LD_EXP 88
67298: PUSH
67299: LD_EXP 89
67303: PUSH
67304: LD_EXP 99
67308: PUSH
67309: LD_EXP 100
67313: PUSH
67314: LD_EXP 101
67318: PUSH
67319: LD_EXP 102
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: LIST
67356: LIST
67357: LIST
67358: LIST
67359: LIST
67360: LIST
67361: LIST
67362: LIST
67363: LIST
67364: LIST
67365: LIST
67366: LIST
67367: LIST
67368: LIST
67369: LIST
67370: LIST
67371: LIST
67372: LIST
67373: LIST
67374: LIST
67375: LIST
67376: LIST
67377: LIST
67378: LIST
67379: ST_TO_ADDR
// tmp :=  ;
67380: LD_ADDR_VAR 0 3
67384: PUSH
67385: LD_STRING 
67387: ST_TO_ADDR
// for i = 1 to normalCounter do
67388: LD_ADDR_VAR 0 8
67392: PUSH
67393: DOUBLE
67394: LD_INT 1
67396: DEC
67397: ST_TO_ADDR
67398: LD_EXP 47
67402: PUSH
67403: FOR_TO
67404: IFFALSE 67440
// begin if flags [ i ] then
67406: LD_VAR 0 4
67410: PUSH
67411: LD_VAR 0 8
67415: ARRAY
67416: IFFALSE 67438
// tmp := tmp & i & ; ;
67418: LD_ADDR_VAR 0 3
67422: PUSH
67423: LD_VAR 0 3
67427: PUSH
67428: LD_VAR 0 8
67432: STR
67433: PUSH
67434: LD_STRING ;
67436: STR
67437: ST_TO_ADDR
// end ;
67438: GO 67403
67440: POP
67441: POP
// for i = 1 to hardcoreCounter do
67442: LD_ADDR_VAR 0 8
67446: PUSH
67447: DOUBLE
67448: LD_INT 1
67450: DEC
67451: ST_TO_ADDR
67452: LD_EXP 48
67456: PUSH
67457: FOR_TO
67458: IFFALSE 67504
// begin if flags [ normalCounter + i ] then
67460: LD_VAR 0 4
67464: PUSH
67465: LD_EXP 47
67469: PUSH
67470: LD_VAR 0 8
67474: PLUS
67475: ARRAY
67476: IFFALSE 67502
// tmp := tmp & ( 100 + i ) & ; ;
67478: LD_ADDR_VAR 0 3
67482: PUSH
67483: LD_VAR 0 3
67487: PUSH
67488: LD_INT 100
67490: PUSH
67491: LD_VAR 0 8
67495: PLUS
67496: STR
67497: PUSH
67498: LD_STRING ;
67500: STR
67501: ST_TO_ADDR
// end ;
67502: GO 67457
67504: POP
67505: POP
// if tmp then
67506: LD_VAR 0 3
67510: IFFALSE 67522
// active := tmp ;
67512: LD_ADDR_VAR 0 7
67516: PUSH
67517: LD_VAR 0 3
67521: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
67522: LD_STRING getStreamItemsFromMission("
67524: PUSH
67525: LD_VAR 0 5
67529: STR
67530: PUSH
67531: LD_STRING ","
67533: STR
67534: PUSH
67535: LD_VAR 0 6
67539: STR
67540: PUSH
67541: LD_STRING ","
67543: STR
67544: PUSH
67545: LD_VAR 0 7
67549: STR
67550: PUSH
67551: LD_STRING ")
67553: STR
67554: PPUSH
67555: CALL_OW 559
// end else
67559: GO 67568
// ToLua ( getStreamItemsFromMission("","","") ) ;
67561: LD_STRING getStreamItemsFromMission("","","")
67563: PPUSH
67564: CALL_OW 559
// end ;
67568: LD_VAR 0 2
67572: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
67573: LD_EXP 46
67577: PUSH
67578: LD_EXP 51
67582: AND
67583: IFFALSE 67707
67585: GO 67587
67587: DISABLE
67588: LD_INT 0
67590: PPUSH
67591: PPUSH
// begin enable ;
67592: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
67593: LD_ADDR_VAR 0 2
67597: PUSH
67598: LD_INT 22
67600: PUSH
67601: LD_OWVAR 2
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: LD_INT 2
67612: PUSH
67613: LD_INT 34
67615: PUSH
67616: LD_INT 7
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PUSH
67623: LD_INT 34
67625: PUSH
67626: LD_INT 45
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 34
67635: PUSH
67636: LD_INT 28
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 34
67645: PUSH
67646: LD_INT 47
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: LIST
67657: LIST
67658: LIST
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PPUSH
67664: CALL_OW 69
67668: ST_TO_ADDR
// if not tmp then
67669: LD_VAR 0 2
67673: NOT
67674: IFFALSE 67678
// exit ;
67676: GO 67707
// for i in tmp do
67678: LD_ADDR_VAR 0 1
67682: PUSH
67683: LD_VAR 0 2
67687: PUSH
67688: FOR_IN
67689: IFFALSE 67705
// begin SetLives ( i , 0 ) ;
67691: LD_VAR 0 1
67695: PPUSH
67696: LD_INT 0
67698: PPUSH
67699: CALL_OW 234
// end ;
67703: GO 67688
67705: POP
67706: POP
// end ;
67707: PPOPN 2
67709: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
67710: LD_EXP 46
67714: PUSH
67715: LD_EXP 52
67719: AND
67720: IFFALSE 67804
67722: GO 67724
67724: DISABLE
67725: LD_INT 0
67727: PPUSH
67728: PPUSH
// begin enable ;
67729: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
67730: LD_ADDR_VAR 0 2
67734: PUSH
67735: LD_INT 22
67737: PUSH
67738: LD_OWVAR 2
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: PUSH
67747: LD_INT 32
67749: PUSH
67750: LD_INT 3
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PPUSH
67761: CALL_OW 69
67765: ST_TO_ADDR
// if not tmp then
67766: LD_VAR 0 2
67770: NOT
67771: IFFALSE 67775
// exit ;
67773: GO 67804
// for i in tmp do
67775: LD_ADDR_VAR 0 1
67779: PUSH
67780: LD_VAR 0 2
67784: PUSH
67785: FOR_IN
67786: IFFALSE 67802
// begin SetLives ( i , 0 ) ;
67788: LD_VAR 0 1
67792: PPUSH
67793: LD_INT 0
67795: PPUSH
67796: CALL_OW 234
// end ;
67800: GO 67785
67802: POP
67803: POP
// end ;
67804: PPOPN 2
67806: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
67807: LD_EXP 46
67811: PUSH
67812: LD_EXP 49
67816: AND
67817: IFFALSE 67910
67819: GO 67821
67821: DISABLE
67822: LD_INT 0
67824: PPUSH
// begin enable ;
67825: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
67826: LD_ADDR_VAR 0 1
67830: PUSH
67831: LD_INT 22
67833: PUSH
67834: LD_OWVAR 2
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: PUSH
67843: LD_INT 2
67845: PUSH
67846: LD_INT 25
67848: PUSH
67849: LD_INT 5
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 25
67858: PUSH
67859: LD_INT 9
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: LD_INT 25
67868: PUSH
67869: LD_INT 8
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PPUSH
67886: CALL_OW 69
67890: PUSH
67891: FOR_IN
67892: IFFALSE 67908
// begin SetClass ( i , 1 ) ;
67894: LD_VAR 0 1
67898: PPUSH
67899: LD_INT 1
67901: PPUSH
67902: CALL_OW 336
// end ;
67906: GO 67891
67908: POP
67909: POP
// end ;
67910: PPOPN 1
67912: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
67913: LD_EXP 46
67917: PUSH
67918: LD_EXP 50
67922: AND
67923: PUSH
67924: LD_OWVAR 65
67928: PUSH
67929: LD_INT 7
67931: LESS
67932: AND
67933: IFFALSE 67947
67935: GO 67937
67937: DISABLE
// begin enable ;
67938: ENABLE
// game_speed := 7 ;
67939: LD_ADDR_OWVAR 65
67943: PUSH
67944: LD_INT 7
67946: ST_TO_ADDR
// end ;
67947: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
67948: LD_EXP 46
67952: PUSH
67953: LD_EXP 53
67957: AND
67958: IFFALSE 68160
67960: GO 67962
67962: DISABLE
67963: LD_INT 0
67965: PPUSH
67966: PPUSH
67967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
67968: LD_ADDR_VAR 0 3
67972: PUSH
67973: LD_INT 81
67975: PUSH
67976: LD_OWVAR 2
67980: PUSH
67981: EMPTY
67982: LIST
67983: LIST
67984: PUSH
67985: LD_INT 21
67987: PUSH
67988: LD_INT 1
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PPUSH
67999: CALL_OW 69
68003: ST_TO_ADDR
// if not tmp then
68004: LD_VAR 0 3
68008: NOT
68009: IFFALSE 68013
// exit ;
68011: GO 68160
// if tmp > 5 then
68013: LD_VAR 0 3
68017: PUSH
68018: LD_INT 5
68020: GREATER
68021: IFFALSE 68033
// k := 5 else
68023: LD_ADDR_VAR 0 2
68027: PUSH
68028: LD_INT 5
68030: ST_TO_ADDR
68031: GO 68043
// k := tmp ;
68033: LD_ADDR_VAR 0 2
68037: PUSH
68038: LD_VAR 0 3
68042: ST_TO_ADDR
// for i := 1 to k do
68043: LD_ADDR_VAR 0 1
68047: PUSH
68048: DOUBLE
68049: LD_INT 1
68051: DEC
68052: ST_TO_ADDR
68053: LD_VAR 0 2
68057: PUSH
68058: FOR_TO
68059: IFFALSE 68158
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
68061: LD_VAR 0 3
68065: PUSH
68066: LD_VAR 0 1
68070: ARRAY
68071: PPUSH
68072: LD_VAR 0 1
68076: PUSH
68077: LD_INT 4
68079: MOD
68080: PUSH
68081: LD_INT 1
68083: PLUS
68084: PPUSH
68085: CALL_OW 259
68089: PUSH
68090: LD_INT 10
68092: LESS
68093: IFFALSE 68156
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
68095: LD_VAR 0 3
68099: PUSH
68100: LD_VAR 0 1
68104: ARRAY
68105: PPUSH
68106: LD_VAR 0 1
68110: PUSH
68111: LD_INT 4
68113: MOD
68114: PUSH
68115: LD_INT 1
68117: PLUS
68118: PPUSH
68119: LD_VAR 0 3
68123: PUSH
68124: LD_VAR 0 1
68128: ARRAY
68129: PPUSH
68130: LD_VAR 0 1
68134: PUSH
68135: LD_INT 4
68137: MOD
68138: PUSH
68139: LD_INT 1
68141: PLUS
68142: PPUSH
68143: CALL_OW 259
68147: PUSH
68148: LD_INT 1
68150: PLUS
68151: PPUSH
68152: CALL_OW 237
68156: GO 68058
68158: POP
68159: POP
// end ;
68160: PPOPN 3
68162: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
68163: LD_EXP 46
68167: PUSH
68168: LD_EXP 54
68172: AND
68173: IFFALSE 68193
68175: GO 68177
68177: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
68178: LD_INT 4
68180: PPUSH
68181: LD_OWVAR 2
68185: PPUSH
68186: LD_INT 0
68188: PPUSH
68189: CALL_OW 324
68193: END
// every 0 0$1 trigger StreamModeActive and sShovel do
68194: LD_EXP 46
68198: PUSH
68199: LD_EXP 83
68203: AND
68204: IFFALSE 68224
68206: GO 68208
68208: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
68209: LD_INT 19
68211: PPUSH
68212: LD_OWVAR 2
68216: PPUSH
68217: LD_INT 0
68219: PPUSH
68220: CALL_OW 324
68224: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
68225: LD_EXP 46
68229: PUSH
68230: LD_EXP 55
68234: AND
68235: IFFALSE 68337
68237: GO 68239
68239: DISABLE
68240: LD_INT 0
68242: PPUSH
68243: PPUSH
// begin enable ;
68244: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
68245: LD_ADDR_VAR 0 2
68249: PUSH
68250: LD_INT 22
68252: PUSH
68253: LD_OWVAR 2
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 2
68264: PUSH
68265: LD_INT 34
68267: PUSH
68268: LD_INT 11
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: LD_INT 34
68277: PUSH
68278: LD_INT 30
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: LIST
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: PPUSH
68294: CALL_OW 69
68298: ST_TO_ADDR
// if not tmp then
68299: LD_VAR 0 2
68303: NOT
68304: IFFALSE 68308
// exit ;
68306: GO 68337
// for i in tmp do
68308: LD_ADDR_VAR 0 1
68312: PUSH
68313: LD_VAR 0 2
68317: PUSH
68318: FOR_IN
68319: IFFALSE 68335
// begin SetLives ( i , 0 ) ;
68321: LD_VAR 0 1
68325: PPUSH
68326: LD_INT 0
68328: PPUSH
68329: CALL_OW 234
// end ;
68333: GO 68318
68335: POP
68336: POP
// end ;
68337: PPOPN 2
68339: END
// every 0 0$1 trigger StreamModeActive and sBunker do
68340: LD_EXP 46
68344: PUSH
68345: LD_EXP 56
68349: AND
68350: IFFALSE 68370
68352: GO 68354
68354: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
68355: LD_INT 32
68357: PPUSH
68358: LD_OWVAR 2
68362: PPUSH
68363: LD_INT 0
68365: PPUSH
68366: CALL_OW 324
68370: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
68371: LD_EXP 46
68375: PUSH
68376: LD_EXP 57
68380: AND
68381: IFFALSE 68562
68383: GO 68385
68385: DISABLE
68386: LD_INT 0
68388: PPUSH
68389: PPUSH
68390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
68391: LD_ADDR_VAR 0 2
68395: PUSH
68396: LD_INT 22
68398: PUSH
68399: LD_OWVAR 2
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: LD_INT 33
68410: PUSH
68411: LD_INT 3
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PPUSH
68422: CALL_OW 69
68426: ST_TO_ADDR
// if not tmp then
68427: LD_VAR 0 2
68431: NOT
68432: IFFALSE 68436
// exit ;
68434: GO 68562
// side := 0 ;
68436: LD_ADDR_VAR 0 3
68440: PUSH
68441: LD_INT 0
68443: ST_TO_ADDR
// for i := 1 to 8 do
68444: LD_ADDR_VAR 0 1
68448: PUSH
68449: DOUBLE
68450: LD_INT 1
68452: DEC
68453: ST_TO_ADDR
68454: LD_INT 8
68456: PUSH
68457: FOR_TO
68458: IFFALSE 68506
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
68460: LD_OWVAR 2
68464: PUSH
68465: LD_VAR 0 1
68469: NONEQUAL
68470: PUSH
68471: LD_OWVAR 2
68475: PPUSH
68476: LD_VAR 0 1
68480: PPUSH
68481: CALL_OW 81
68485: PUSH
68486: LD_INT 2
68488: EQUAL
68489: AND
68490: IFFALSE 68504
// begin side := i ;
68492: LD_ADDR_VAR 0 3
68496: PUSH
68497: LD_VAR 0 1
68501: ST_TO_ADDR
// break ;
68502: GO 68506
// end ;
68504: GO 68457
68506: POP
68507: POP
// if not side then
68508: LD_VAR 0 3
68512: NOT
68513: IFFALSE 68517
// exit ;
68515: GO 68562
// for i := 1 to tmp do
68517: LD_ADDR_VAR 0 1
68521: PUSH
68522: DOUBLE
68523: LD_INT 1
68525: DEC
68526: ST_TO_ADDR
68527: LD_VAR 0 2
68531: PUSH
68532: FOR_TO
68533: IFFALSE 68560
// if Prob ( 60 ) then
68535: LD_INT 60
68537: PPUSH
68538: CALL_OW 13
68542: IFFALSE 68558
// SetSide ( i , side ) ;
68544: LD_VAR 0 1
68548: PPUSH
68549: LD_VAR 0 3
68553: PPUSH
68554: CALL_OW 235
68558: GO 68532
68560: POP
68561: POP
// end ;
68562: PPOPN 3
68564: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
68565: LD_EXP 46
68569: PUSH
68570: LD_EXP 59
68574: AND
68575: IFFALSE 68694
68577: GO 68579
68579: DISABLE
68580: LD_INT 0
68582: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
68583: LD_ADDR_VAR 0 1
68587: PUSH
68588: LD_INT 22
68590: PUSH
68591: LD_OWVAR 2
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PUSH
68600: LD_INT 21
68602: PUSH
68603: LD_INT 1
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: PUSH
68610: LD_INT 3
68612: PUSH
68613: LD_INT 23
68615: PUSH
68616: LD_INT 0
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: LIST
68631: PPUSH
68632: CALL_OW 69
68636: PUSH
68637: FOR_IN
68638: IFFALSE 68692
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
68640: LD_VAR 0 1
68644: PPUSH
68645: CALL_OW 257
68649: PUSH
68650: LD_INT 1
68652: PUSH
68653: LD_INT 2
68655: PUSH
68656: LD_INT 3
68658: PUSH
68659: LD_INT 4
68661: PUSH
68662: EMPTY
68663: LIST
68664: LIST
68665: LIST
68666: LIST
68667: IN
68668: IFFALSE 68690
// SetClass ( un , rand ( 1 , 4 ) ) ;
68670: LD_VAR 0 1
68674: PPUSH
68675: LD_INT 1
68677: PPUSH
68678: LD_INT 4
68680: PPUSH
68681: CALL_OW 12
68685: PPUSH
68686: CALL_OW 336
68690: GO 68637
68692: POP
68693: POP
// end ;
68694: PPOPN 1
68696: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
68697: LD_EXP 46
68701: PUSH
68702: LD_EXP 58
68706: AND
68707: IFFALSE 68786
68709: GO 68711
68711: DISABLE
68712: LD_INT 0
68714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68715: LD_ADDR_VAR 0 1
68719: PUSH
68720: LD_INT 22
68722: PUSH
68723: LD_OWVAR 2
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 21
68734: PUSH
68735: LD_INT 3
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: PPUSH
68746: CALL_OW 69
68750: ST_TO_ADDR
// if not tmp then
68751: LD_VAR 0 1
68755: NOT
68756: IFFALSE 68760
// exit ;
68758: GO 68786
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
68760: LD_VAR 0 1
68764: PUSH
68765: LD_INT 1
68767: PPUSH
68768: LD_VAR 0 1
68772: PPUSH
68773: CALL_OW 12
68777: ARRAY
68778: PPUSH
68779: LD_INT 100
68781: PPUSH
68782: CALL_OW 234
// end ;
68786: PPOPN 1
68788: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
68789: LD_EXP 46
68793: PUSH
68794: LD_EXP 60
68798: AND
68799: IFFALSE 68897
68801: GO 68803
68803: DISABLE
68804: LD_INT 0
68806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68807: LD_ADDR_VAR 0 1
68811: PUSH
68812: LD_INT 22
68814: PUSH
68815: LD_OWVAR 2
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: LD_INT 21
68826: PUSH
68827: LD_INT 1
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: PUSH
68834: EMPTY
68835: LIST
68836: LIST
68837: PPUSH
68838: CALL_OW 69
68842: ST_TO_ADDR
// if not tmp then
68843: LD_VAR 0 1
68847: NOT
68848: IFFALSE 68852
// exit ;
68850: GO 68897
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
68852: LD_VAR 0 1
68856: PUSH
68857: LD_INT 1
68859: PPUSH
68860: LD_VAR 0 1
68864: PPUSH
68865: CALL_OW 12
68869: ARRAY
68870: PPUSH
68871: LD_INT 1
68873: PPUSH
68874: LD_INT 4
68876: PPUSH
68877: CALL_OW 12
68881: PPUSH
68882: LD_INT 3000
68884: PPUSH
68885: LD_INT 9000
68887: PPUSH
68888: CALL_OW 12
68892: PPUSH
68893: CALL_OW 492
// end ;
68897: PPOPN 1
68899: END
// every 0 0$1 trigger StreamModeActive and sDepot do
68900: LD_EXP 46
68904: PUSH
68905: LD_EXP 61
68909: AND
68910: IFFALSE 68930
68912: GO 68914
68914: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
68915: LD_INT 1
68917: PPUSH
68918: LD_OWVAR 2
68922: PPUSH
68923: LD_INT 0
68925: PPUSH
68926: CALL_OW 324
68930: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
68931: LD_EXP 46
68935: PUSH
68936: LD_EXP 62
68940: AND
68941: IFFALSE 69024
68943: GO 68945
68945: DISABLE
68946: LD_INT 0
68948: PPUSH
68949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68950: LD_ADDR_VAR 0 2
68954: PUSH
68955: LD_INT 22
68957: PUSH
68958: LD_OWVAR 2
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: PUSH
68967: LD_INT 21
68969: PUSH
68970: LD_INT 3
68972: PUSH
68973: EMPTY
68974: LIST
68975: LIST
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: PPUSH
68981: CALL_OW 69
68985: ST_TO_ADDR
// if not tmp then
68986: LD_VAR 0 2
68990: NOT
68991: IFFALSE 68995
// exit ;
68993: GO 69024
// for i in tmp do
68995: LD_ADDR_VAR 0 1
68999: PUSH
69000: LD_VAR 0 2
69004: PUSH
69005: FOR_IN
69006: IFFALSE 69022
// SetBLevel ( i , 10 ) ;
69008: LD_VAR 0 1
69012: PPUSH
69013: LD_INT 10
69015: PPUSH
69016: CALL_OW 241
69020: GO 69005
69022: POP
69023: POP
// end ;
69024: PPOPN 2
69026: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
69027: LD_EXP 46
69031: PUSH
69032: LD_EXP 63
69036: AND
69037: IFFALSE 69148
69039: GO 69041
69041: DISABLE
69042: LD_INT 0
69044: PPUSH
69045: PPUSH
69046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69047: LD_ADDR_VAR 0 3
69051: PUSH
69052: LD_INT 22
69054: PUSH
69055: LD_OWVAR 2
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 25
69066: PUSH
69067: LD_INT 1
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PPUSH
69078: CALL_OW 69
69082: ST_TO_ADDR
// if not tmp then
69083: LD_VAR 0 3
69087: NOT
69088: IFFALSE 69092
// exit ;
69090: GO 69148
// un := tmp [ rand ( 1 , tmp ) ] ;
69092: LD_ADDR_VAR 0 2
69096: PUSH
69097: LD_VAR 0 3
69101: PUSH
69102: LD_INT 1
69104: PPUSH
69105: LD_VAR 0 3
69109: PPUSH
69110: CALL_OW 12
69114: ARRAY
69115: ST_TO_ADDR
// if Crawls ( un ) then
69116: LD_VAR 0 2
69120: PPUSH
69121: CALL_OW 318
69125: IFFALSE 69136
// ComWalk ( un ) ;
69127: LD_VAR 0 2
69131: PPUSH
69132: CALL_OW 138
// SetClass ( un , class_sniper ) ;
69136: LD_VAR 0 2
69140: PPUSH
69141: LD_INT 5
69143: PPUSH
69144: CALL_OW 336
// end ;
69148: PPOPN 3
69150: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
69151: LD_EXP 46
69155: PUSH
69156: LD_EXP 64
69160: AND
69161: PUSH
69162: LD_OWVAR 67
69166: PUSH
69167: LD_INT 4
69169: LESS
69170: AND
69171: IFFALSE 69190
69173: GO 69175
69175: DISABLE
// begin Difficulty := Difficulty + 1 ;
69176: LD_ADDR_OWVAR 67
69180: PUSH
69181: LD_OWVAR 67
69185: PUSH
69186: LD_INT 1
69188: PLUS
69189: ST_TO_ADDR
// end ;
69190: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
69191: LD_EXP 46
69195: PUSH
69196: LD_EXP 65
69200: AND
69201: IFFALSE 69304
69203: GO 69205
69205: DISABLE
69206: LD_INT 0
69208: PPUSH
// begin for i := 1 to 5 do
69209: LD_ADDR_VAR 0 1
69213: PUSH
69214: DOUBLE
69215: LD_INT 1
69217: DEC
69218: ST_TO_ADDR
69219: LD_INT 5
69221: PUSH
69222: FOR_TO
69223: IFFALSE 69302
// begin uc_nation := nation_nature ;
69225: LD_ADDR_OWVAR 21
69229: PUSH
69230: LD_INT 0
69232: ST_TO_ADDR
// uc_side := 0 ;
69233: LD_ADDR_OWVAR 20
69237: PUSH
69238: LD_INT 0
69240: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69241: LD_ADDR_OWVAR 29
69245: PUSH
69246: LD_INT 12
69248: PUSH
69249: LD_INT 12
69251: PUSH
69252: EMPTY
69253: LIST
69254: LIST
69255: ST_TO_ADDR
// hc_agressivity := 20 ;
69256: LD_ADDR_OWVAR 35
69260: PUSH
69261: LD_INT 20
69263: ST_TO_ADDR
// hc_class := class_tiger ;
69264: LD_ADDR_OWVAR 28
69268: PUSH
69269: LD_INT 14
69271: ST_TO_ADDR
// hc_gallery :=  ;
69272: LD_ADDR_OWVAR 33
69276: PUSH
69277: LD_STRING 
69279: ST_TO_ADDR
// hc_name :=  ;
69280: LD_ADDR_OWVAR 26
69284: PUSH
69285: LD_STRING 
69287: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
69288: CALL_OW 44
69292: PPUSH
69293: LD_INT 0
69295: PPUSH
69296: CALL_OW 51
// end ;
69300: GO 69222
69302: POP
69303: POP
// end ;
69304: PPOPN 1
69306: END
// every 0 0$1 trigger StreamModeActive and sBomb do
69307: LD_EXP 46
69311: PUSH
69312: LD_EXP 66
69316: AND
69317: IFFALSE 69326
69319: GO 69321
69321: DISABLE
// StreamSibBomb ;
69322: CALL 69327 0 0
69326: END
// export function StreamSibBomb ; var i , x , y ; begin
69327: LD_INT 0
69329: PPUSH
69330: PPUSH
69331: PPUSH
69332: PPUSH
// result := false ;
69333: LD_ADDR_VAR 0 1
69337: PUSH
69338: LD_INT 0
69340: ST_TO_ADDR
// for i := 1 to 16 do
69341: LD_ADDR_VAR 0 2
69345: PUSH
69346: DOUBLE
69347: LD_INT 1
69349: DEC
69350: ST_TO_ADDR
69351: LD_INT 16
69353: PUSH
69354: FOR_TO
69355: IFFALSE 69554
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
69357: LD_ADDR_VAR 0 3
69361: PUSH
69362: LD_INT 10
69364: PUSH
69365: LD_INT 20
69367: PUSH
69368: LD_INT 30
69370: PUSH
69371: LD_INT 40
69373: PUSH
69374: LD_INT 50
69376: PUSH
69377: LD_INT 60
69379: PUSH
69380: LD_INT 70
69382: PUSH
69383: LD_INT 80
69385: PUSH
69386: LD_INT 90
69388: PUSH
69389: LD_INT 100
69391: PUSH
69392: LD_INT 110
69394: PUSH
69395: LD_INT 120
69397: PUSH
69398: LD_INT 130
69400: PUSH
69401: LD_INT 140
69403: PUSH
69404: LD_INT 150
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: LIST
69411: LIST
69412: LIST
69413: LIST
69414: LIST
69415: LIST
69416: LIST
69417: LIST
69418: LIST
69419: LIST
69420: LIST
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 1
69426: PPUSH
69427: LD_INT 15
69429: PPUSH
69430: CALL_OW 12
69434: ARRAY
69435: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
69436: LD_ADDR_VAR 0 4
69440: PUSH
69441: LD_INT 10
69443: PUSH
69444: LD_INT 20
69446: PUSH
69447: LD_INT 30
69449: PUSH
69450: LD_INT 40
69452: PUSH
69453: LD_INT 50
69455: PUSH
69456: LD_INT 60
69458: PUSH
69459: LD_INT 70
69461: PUSH
69462: LD_INT 80
69464: PUSH
69465: LD_INT 90
69467: PUSH
69468: LD_INT 100
69470: PUSH
69471: LD_INT 110
69473: PUSH
69474: LD_INT 120
69476: PUSH
69477: LD_INT 130
69479: PUSH
69480: LD_INT 140
69482: PUSH
69483: LD_INT 150
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: LIST
69496: LIST
69497: LIST
69498: LIST
69499: LIST
69500: LIST
69501: LIST
69502: PUSH
69503: LD_INT 1
69505: PPUSH
69506: LD_INT 15
69508: PPUSH
69509: CALL_OW 12
69513: ARRAY
69514: ST_TO_ADDR
// if ValidHex ( x , y ) then
69515: LD_VAR 0 3
69519: PPUSH
69520: LD_VAR 0 4
69524: PPUSH
69525: CALL_OW 488
69529: IFFALSE 69552
// begin result := [ x , y ] ;
69531: LD_ADDR_VAR 0 1
69535: PUSH
69536: LD_VAR 0 3
69540: PUSH
69541: LD_VAR 0 4
69545: PUSH
69546: EMPTY
69547: LIST
69548: LIST
69549: ST_TO_ADDR
// break ;
69550: GO 69554
// end ; end ;
69552: GO 69354
69554: POP
69555: POP
// if result then
69556: LD_VAR 0 1
69560: IFFALSE 69620
// begin ToLua ( playSibBomb() ) ;
69562: LD_STRING playSibBomb()
69564: PPUSH
69565: CALL_OW 559
// wait ( 0 0$14 ) ;
69569: LD_INT 490
69571: PPUSH
69572: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
69576: LD_VAR 0 1
69580: PUSH
69581: LD_INT 1
69583: ARRAY
69584: PPUSH
69585: LD_VAR 0 1
69589: PUSH
69590: LD_INT 2
69592: ARRAY
69593: PPUSH
69594: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
69598: LD_VAR 0 1
69602: PUSH
69603: LD_INT 1
69605: ARRAY
69606: PPUSH
69607: LD_VAR 0 1
69611: PUSH
69612: LD_INT 2
69614: ARRAY
69615: PPUSH
69616: CALL_OW 429
// end ; end ;
69620: LD_VAR 0 1
69624: RET
// every 0 0$1 trigger StreamModeActive and sReset do
69625: LD_EXP 46
69629: PUSH
69630: LD_EXP 68
69634: AND
69635: IFFALSE 69647
69637: GO 69639
69639: DISABLE
// YouLost (  ) ;
69640: LD_STRING 
69642: PPUSH
69643: CALL_OW 104
69647: END
// every 0 0$1 trigger StreamModeActive and sFog do
69648: LD_EXP 46
69652: PUSH
69653: LD_EXP 67
69657: AND
69658: IFFALSE 69672
69660: GO 69662
69662: DISABLE
// FogOff ( your_side ) ;
69663: LD_OWVAR 2
69667: PPUSH
69668: CALL_OW 344
69672: END
// every 0 0$1 trigger StreamModeActive and sSun do
69673: LD_EXP 46
69677: PUSH
69678: LD_EXP 69
69682: AND
69683: IFFALSE 69711
69685: GO 69687
69687: DISABLE
// begin solar_recharge_percent := 0 ;
69688: LD_ADDR_OWVAR 79
69692: PUSH
69693: LD_INT 0
69695: ST_TO_ADDR
// wait ( 5 5$00 ) ;
69696: LD_INT 10500
69698: PPUSH
69699: CALL_OW 67
// solar_recharge_percent := 100 ;
69703: LD_ADDR_OWVAR 79
69707: PUSH
69708: LD_INT 100
69710: ST_TO_ADDR
// end ;
69711: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
69712: LD_EXP 46
69716: PUSH
69717: LD_EXP 70
69721: AND
69722: IFFALSE 69961
69724: GO 69726
69726: DISABLE
69727: LD_INT 0
69729: PPUSH
69730: PPUSH
69731: PPUSH
// begin tmp := [ ] ;
69732: LD_ADDR_VAR 0 3
69736: PUSH
69737: EMPTY
69738: ST_TO_ADDR
// for i := 1 to 6 do
69739: LD_ADDR_VAR 0 1
69743: PUSH
69744: DOUBLE
69745: LD_INT 1
69747: DEC
69748: ST_TO_ADDR
69749: LD_INT 6
69751: PUSH
69752: FOR_TO
69753: IFFALSE 69858
// begin uc_nation := nation_nature ;
69755: LD_ADDR_OWVAR 21
69759: PUSH
69760: LD_INT 0
69762: ST_TO_ADDR
// uc_side := 0 ;
69763: LD_ADDR_OWVAR 20
69767: PUSH
69768: LD_INT 0
69770: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69771: LD_ADDR_OWVAR 29
69775: PUSH
69776: LD_INT 12
69778: PUSH
69779: LD_INT 12
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: ST_TO_ADDR
// hc_agressivity := 20 ;
69786: LD_ADDR_OWVAR 35
69790: PUSH
69791: LD_INT 20
69793: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
69794: LD_ADDR_OWVAR 28
69798: PUSH
69799: LD_INT 17
69801: ST_TO_ADDR
// hc_gallery :=  ;
69802: LD_ADDR_OWVAR 33
69806: PUSH
69807: LD_STRING 
69809: ST_TO_ADDR
// hc_name :=  ;
69810: LD_ADDR_OWVAR 26
69814: PUSH
69815: LD_STRING 
69817: ST_TO_ADDR
// un := CreateHuman ;
69818: LD_ADDR_VAR 0 2
69822: PUSH
69823: CALL_OW 44
69827: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
69828: LD_VAR 0 2
69832: PPUSH
69833: LD_INT 1
69835: PPUSH
69836: CALL_OW 51
// tmp := tmp ^ un ;
69840: LD_ADDR_VAR 0 3
69844: PUSH
69845: LD_VAR 0 3
69849: PUSH
69850: LD_VAR 0 2
69854: ADD
69855: ST_TO_ADDR
// end ;
69856: GO 69752
69858: POP
69859: POP
// repeat wait ( 0 0$1 ) ;
69860: LD_INT 35
69862: PPUSH
69863: CALL_OW 67
// for un in tmp do
69867: LD_ADDR_VAR 0 2
69871: PUSH
69872: LD_VAR 0 3
69876: PUSH
69877: FOR_IN
69878: IFFALSE 69952
// begin if IsDead ( un ) then
69880: LD_VAR 0 2
69884: PPUSH
69885: CALL_OW 301
69889: IFFALSE 69909
// begin tmp := tmp diff un ;
69891: LD_ADDR_VAR 0 3
69895: PUSH
69896: LD_VAR 0 3
69900: PUSH
69901: LD_VAR 0 2
69905: DIFF
69906: ST_TO_ADDR
// continue ;
69907: GO 69877
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
69909: LD_VAR 0 2
69913: PPUSH
69914: LD_INT 3
69916: PUSH
69917: LD_INT 22
69919: PUSH
69920: LD_INT 0
69922: PUSH
69923: EMPTY
69924: LIST
69925: LIST
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: PPUSH
69931: CALL_OW 69
69935: PPUSH
69936: LD_VAR 0 2
69940: PPUSH
69941: CALL_OW 74
69945: PPUSH
69946: CALL_OW 115
// end ;
69950: GO 69877
69952: POP
69953: POP
// until not tmp ;
69954: LD_VAR 0 3
69958: NOT
69959: IFFALSE 69860
// end ;
69961: PPOPN 3
69963: END
// every 0 0$1 trigger StreamModeActive and sTroll do
69964: LD_EXP 46
69968: PUSH
69969: LD_EXP 71
69973: AND
69974: IFFALSE 70028
69976: GO 69978
69978: DISABLE
// begin ToLua ( displayTroll(); ) ;
69979: LD_STRING displayTroll();
69981: PPUSH
69982: CALL_OW 559
// wait ( 3 3$00 ) ;
69986: LD_INT 6300
69988: PPUSH
69989: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69993: LD_STRING hideTroll();
69995: PPUSH
69996: CALL_OW 559
// wait ( 1 1$00 ) ;
70000: LD_INT 2100
70002: PPUSH
70003: CALL_OW 67
// ToLua ( displayTroll(); ) ;
70007: LD_STRING displayTroll();
70009: PPUSH
70010: CALL_OW 559
// wait ( 1 1$00 ) ;
70014: LD_INT 2100
70016: PPUSH
70017: CALL_OW 67
// ToLua ( hideTroll(); ) ;
70021: LD_STRING hideTroll();
70023: PPUSH
70024: CALL_OW 559
// end ;
70028: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
70029: LD_EXP 46
70033: PUSH
70034: LD_EXP 72
70038: AND
70039: IFFALSE 70102
70041: GO 70043
70043: DISABLE
70044: LD_INT 0
70046: PPUSH
// begin p := 0 ;
70047: LD_ADDR_VAR 0 1
70051: PUSH
70052: LD_INT 0
70054: ST_TO_ADDR
// repeat game_speed := 1 ;
70055: LD_ADDR_OWVAR 65
70059: PUSH
70060: LD_INT 1
70062: ST_TO_ADDR
// wait ( 0 0$1 ) ;
70063: LD_INT 35
70065: PPUSH
70066: CALL_OW 67
// p := p + 1 ;
70070: LD_ADDR_VAR 0 1
70074: PUSH
70075: LD_VAR 0 1
70079: PUSH
70080: LD_INT 1
70082: PLUS
70083: ST_TO_ADDR
// until p >= 60 ;
70084: LD_VAR 0 1
70088: PUSH
70089: LD_INT 60
70091: GREATEREQUAL
70092: IFFALSE 70055
// game_speed := 4 ;
70094: LD_ADDR_OWVAR 65
70098: PUSH
70099: LD_INT 4
70101: ST_TO_ADDR
// end ;
70102: PPOPN 1
70104: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
70105: LD_EXP 46
70109: PUSH
70110: LD_EXP 73
70114: AND
70115: IFFALSE 70261
70117: GO 70119
70119: DISABLE
70120: LD_INT 0
70122: PPUSH
70123: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70124: LD_ADDR_VAR 0 1
70128: PUSH
70129: LD_INT 22
70131: PUSH
70132: LD_OWVAR 2
70136: PUSH
70137: EMPTY
70138: LIST
70139: LIST
70140: PUSH
70141: LD_INT 2
70143: PUSH
70144: LD_INT 30
70146: PUSH
70147: LD_INT 0
70149: PUSH
70150: EMPTY
70151: LIST
70152: LIST
70153: PUSH
70154: LD_INT 30
70156: PUSH
70157: LD_INT 1
70159: PUSH
70160: EMPTY
70161: LIST
70162: LIST
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: LIST
70168: PUSH
70169: EMPTY
70170: LIST
70171: LIST
70172: PPUSH
70173: CALL_OW 69
70177: ST_TO_ADDR
// if not depot then
70178: LD_VAR 0 1
70182: NOT
70183: IFFALSE 70187
// exit ;
70185: GO 70261
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
70187: LD_ADDR_VAR 0 2
70191: PUSH
70192: LD_VAR 0 1
70196: PUSH
70197: LD_INT 1
70199: PPUSH
70200: LD_VAR 0 1
70204: PPUSH
70205: CALL_OW 12
70209: ARRAY
70210: PPUSH
70211: CALL_OW 274
70215: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
70216: LD_VAR 0 2
70220: PPUSH
70221: LD_INT 1
70223: PPUSH
70224: LD_INT 0
70226: PPUSH
70227: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
70231: LD_VAR 0 2
70235: PPUSH
70236: LD_INT 2
70238: PPUSH
70239: LD_INT 0
70241: PPUSH
70242: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
70246: LD_VAR 0 2
70250: PPUSH
70251: LD_INT 3
70253: PPUSH
70254: LD_INT 0
70256: PPUSH
70257: CALL_OW 277
// end ;
70261: PPOPN 2
70263: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
70264: LD_EXP 46
70268: PUSH
70269: LD_EXP 74
70273: AND
70274: IFFALSE 70371
70276: GO 70278
70278: DISABLE
70279: LD_INT 0
70281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
70282: LD_ADDR_VAR 0 1
70286: PUSH
70287: LD_INT 22
70289: PUSH
70290: LD_OWVAR 2
70294: PUSH
70295: EMPTY
70296: LIST
70297: LIST
70298: PUSH
70299: LD_INT 21
70301: PUSH
70302: LD_INT 1
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: PUSH
70309: LD_INT 3
70311: PUSH
70312: LD_INT 23
70314: PUSH
70315: LD_INT 0
70317: PUSH
70318: EMPTY
70319: LIST
70320: LIST
70321: PUSH
70322: EMPTY
70323: LIST
70324: LIST
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: LIST
70330: PPUSH
70331: CALL_OW 69
70335: ST_TO_ADDR
// if not tmp then
70336: LD_VAR 0 1
70340: NOT
70341: IFFALSE 70345
// exit ;
70343: GO 70371
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
70345: LD_VAR 0 1
70349: PUSH
70350: LD_INT 1
70352: PPUSH
70353: LD_VAR 0 1
70357: PPUSH
70358: CALL_OW 12
70362: ARRAY
70363: PPUSH
70364: LD_INT 200
70366: PPUSH
70367: CALL_OW 234
// end ;
70371: PPOPN 1
70373: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
70374: LD_EXP 46
70378: PUSH
70379: LD_EXP 75
70383: AND
70384: IFFALSE 70463
70386: GO 70388
70388: DISABLE
70389: LD_INT 0
70391: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
70392: LD_ADDR_VAR 0 1
70396: PUSH
70397: LD_INT 22
70399: PUSH
70400: LD_OWVAR 2
70404: PUSH
70405: EMPTY
70406: LIST
70407: LIST
70408: PUSH
70409: LD_INT 21
70411: PUSH
70412: LD_INT 2
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: PPUSH
70423: CALL_OW 69
70427: ST_TO_ADDR
// if not tmp then
70428: LD_VAR 0 1
70432: NOT
70433: IFFALSE 70437
// exit ;
70435: GO 70463
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
70437: LD_VAR 0 1
70441: PUSH
70442: LD_INT 1
70444: PPUSH
70445: LD_VAR 0 1
70449: PPUSH
70450: CALL_OW 12
70454: ARRAY
70455: PPUSH
70456: LD_INT 60
70458: PPUSH
70459: CALL_OW 234
// end ;
70463: PPOPN 1
70465: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
70466: LD_EXP 46
70470: PUSH
70471: LD_EXP 76
70475: AND
70476: IFFALSE 70575
70478: GO 70480
70480: DISABLE
70481: LD_INT 0
70483: PPUSH
70484: PPUSH
// begin enable ;
70485: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
70486: LD_ADDR_VAR 0 1
70490: PUSH
70491: LD_INT 22
70493: PUSH
70494: LD_OWVAR 2
70498: PUSH
70499: EMPTY
70500: LIST
70501: LIST
70502: PUSH
70503: LD_INT 61
70505: PUSH
70506: EMPTY
70507: LIST
70508: PUSH
70509: LD_INT 33
70511: PUSH
70512: LD_INT 2
70514: PUSH
70515: EMPTY
70516: LIST
70517: LIST
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: LIST
70523: PPUSH
70524: CALL_OW 69
70528: ST_TO_ADDR
// if not tmp then
70529: LD_VAR 0 1
70533: NOT
70534: IFFALSE 70538
// exit ;
70536: GO 70575
// for i in tmp do
70538: LD_ADDR_VAR 0 2
70542: PUSH
70543: LD_VAR 0 1
70547: PUSH
70548: FOR_IN
70549: IFFALSE 70573
// if IsControledBy ( i ) then
70551: LD_VAR 0 2
70555: PPUSH
70556: CALL_OW 312
70560: IFFALSE 70571
// ComUnlink ( i ) ;
70562: LD_VAR 0 2
70566: PPUSH
70567: CALL_OW 136
70571: GO 70548
70573: POP
70574: POP
// end ;
70575: PPOPN 2
70577: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
70578: LD_EXP 46
70582: PUSH
70583: LD_EXP 77
70587: AND
70588: IFFALSE 70728
70590: GO 70592
70592: DISABLE
70593: LD_INT 0
70595: PPUSH
70596: PPUSH
// begin ToLua ( displayPowell(); ) ;
70597: LD_STRING displayPowell();
70599: PPUSH
70600: CALL_OW 559
// uc_side := 0 ;
70604: LD_ADDR_OWVAR 20
70608: PUSH
70609: LD_INT 0
70611: ST_TO_ADDR
// uc_nation := 2 ;
70612: LD_ADDR_OWVAR 21
70616: PUSH
70617: LD_INT 2
70619: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
70620: LD_ADDR_OWVAR 37
70624: PUSH
70625: LD_INT 14
70627: ST_TO_ADDR
// vc_engine := engine_siberite ;
70628: LD_ADDR_OWVAR 39
70632: PUSH
70633: LD_INT 3
70635: ST_TO_ADDR
// vc_control := control_apeman ;
70636: LD_ADDR_OWVAR 38
70640: PUSH
70641: LD_INT 5
70643: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
70644: LD_ADDR_OWVAR 40
70648: PUSH
70649: LD_INT 29
70651: ST_TO_ADDR
// un := CreateVehicle ;
70652: LD_ADDR_VAR 0 2
70656: PUSH
70657: CALL_OW 45
70661: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70662: LD_VAR 0 2
70666: PPUSH
70667: LD_INT 1
70669: PPUSH
70670: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
70674: LD_INT 35
70676: PPUSH
70677: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
70681: LD_VAR 0 2
70685: PPUSH
70686: LD_INT 22
70688: PUSH
70689: LD_OWVAR 2
70693: PUSH
70694: EMPTY
70695: LIST
70696: LIST
70697: PPUSH
70698: CALL_OW 69
70702: PPUSH
70703: LD_VAR 0 2
70707: PPUSH
70708: CALL_OW 74
70712: PPUSH
70713: CALL_OW 115
// until IsDead ( un ) ;
70717: LD_VAR 0 2
70721: PPUSH
70722: CALL_OW 301
70726: IFFALSE 70674
// end ;
70728: PPOPN 2
70730: END
// every 0 0$1 trigger StreamModeActive and sStu do
70731: LD_EXP 46
70735: PUSH
70736: LD_EXP 85
70740: AND
70741: IFFALSE 70757
70743: GO 70745
70745: DISABLE
// begin ToLua ( displayStucuk(); ) ;
70746: LD_STRING displayStucuk();
70748: PPUSH
70749: CALL_OW 559
// ResetFog ;
70753: CALL_OW 335
// end ;
70757: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
70758: LD_EXP 46
70762: PUSH
70763: LD_EXP 78
70767: AND
70768: IFFALSE 70909
70770: GO 70772
70772: DISABLE
70773: LD_INT 0
70775: PPUSH
70776: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70777: LD_ADDR_VAR 0 2
70781: PUSH
70782: LD_INT 22
70784: PUSH
70785: LD_OWVAR 2
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: PUSH
70794: LD_INT 21
70796: PUSH
70797: LD_INT 1
70799: PUSH
70800: EMPTY
70801: LIST
70802: LIST
70803: PUSH
70804: EMPTY
70805: LIST
70806: LIST
70807: PPUSH
70808: CALL_OW 69
70812: ST_TO_ADDR
// if not tmp then
70813: LD_VAR 0 2
70817: NOT
70818: IFFALSE 70822
// exit ;
70820: GO 70909
// un := tmp [ rand ( 1 , tmp ) ] ;
70822: LD_ADDR_VAR 0 1
70826: PUSH
70827: LD_VAR 0 2
70831: PUSH
70832: LD_INT 1
70834: PPUSH
70835: LD_VAR 0 2
70839: PPUSH
70840: CALL_OW 12
70844: ARRAY
70845: ST_TO_ADDR
// SetSide ( un , 0 ) ;
70846: LD_VAR 0 1
70850: PPUSH
70851: LD_INT 0
70853: PPUSH
70854: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
70858: LD_VAR 0 1
70862: PPUSH
70863: LD_OWVAR 3
70867: PUSH
70868: LD_VAR 0 1
70872: DIFF
70873: PPUSH
70874: LD_VAR 0 1
70878: PPUSH
70879: CALL_OW 74
70883: PPUSH
70884: CALL_OW 115
// wait ( 0 0$20 ) ;
70888: LD_INT 700
70890: PPUSH
70891: CALL_OW 67
// SetSide ( un , your_side ) ;
70895: LD_VAR 0 1
70899: PPUSH
70900: LD_OWVAR 2
70904: PPUSH
70905: CALL_OW 235
// end ;
70909: PPOPN 2
70911: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
70912: LD_EXP 46
70916: PUSH
70917: LD_EXP 79
70921: AND
70922: IFFALSE 71028
70924: GO 70926
70926: DISABLE
70927: LD_INT 0
70929: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70930: LD_ADDR_VAR 0 1
70934: PUSH
70935: LD_INT 22
70937: PUSH
70938: LD_OWVAR 2
70942: PUSH
70943: EMPTY
70944: LIST
70945: LIST
70946: PUSH
70947: LD_INT 2
70949: PUSH
70950: LD_INT 30
70952: PUSH
70953: LD_INT 0
70955: PUSH
70956: EMPTY
70957: LIST
70958: LIST
70959: PUSH
70960: LD_INT 30
70962: PUSH
70963: LD_INT 1
70965: PUSH
70966: EMPTY
70967: LIST
70968: LIST
70969: PUSH
70970: EMPTY
70971: LIST
70972: LIST
70973: LIST
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: PPUSH
70979: CALL_OW 69
70983: ST_TO_ADDR
// if not depot then
70984: LD_VAR 0 1
70988: NOT
70989: IFFALSE 70993
// exit ;
70991: GO 71028
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
70993: LD_VAR 0 1
70997: PUSH
70998: LD_INT 1
71000: ARRAY
71001: PPUSH
71002: CALL_OW 250
71006: PPUSH
71007: LD_VAR 0 1
71011: PUSH
71012: LD_INT 1
71014: ARRAY
71015: PPUSH
71016: CALL_OW 251
71020: PPUSH
71021: LD_INT 70
71023: PPUSH
71024: CALL_OW 495
// end ;
71028: PPOPN 1
71030: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
71031: LD_EXP 46
71035: PUSH
71036: LD_EXP 80
71040: AND
71041: IFFALSE 71252
71043: GO 71045
71045: DISABLE
71046: LD_INT 0
71048: PPUSH
71049: PPUSH
71050: PPUSH
71051: PPUSH
71052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
71053: LD_ADDR_VAR 0 5
71057: PUSH
71058: LD_INT 22
71060: PUSH
71061: LD_OWVAR 2
71065: PUSH
71066: EMPTY
71067: LIST
71068: LIST
71069: PUSH
71070: LD_INT 21
71072: PUSH
71073: LD_INT 1
71075: PUSH
71076: EMPTY
71077: LIST
71078: LIST
71079: PUSH
71080: EMPTY
71081: LIST
71082: LIST
71083: PPUSH
71084: CALL_OW 69
71088: ST_TO_ADDR
// if not tmp then
71089: LD_VAR 0 5
71093: NOT
71094: IFFALSE 71098
// exit ;
71096: GO 71252
// for i in tmp do
71098: LD_ADDR_VAR 0 1
71102: PUSH
71103: LD_VAR 0 5
71107: PUSH
71108: FOR_IN
71109: IFFALSE 71250
// begin d := rand ( 0 , 5 ) ;
71111: LD_ADDR_VAR 0 4
71115: PUSH
71116: LD_INT 0
71118: PPUSH
71119: LD_INT 5
71121: PPUSH
71122: CALL_OW 12
71126: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
71127: LD_ADDR_VAR 0 2
71131: PUSH
71132: LD_VAR 0 1
71136: PPUSH
71137: CALL_OW 250
71141: PPUSH
71142: LD_VAR 0 4
71146: PPUSH
71147: LD_INT 3
71149: PPUSH
71150: LD_INT 12
71152: PPUSH
71153: CALL_OW 12
71157: PPUSH
71158: CALL_OW 272
71162: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
71163: LD_ADDR_VAR 0 3
71167: PUSH
71168: LD_VAR 0 1
71172: PPUSH
71173: CALL_OW 251
71177: PPUSH
71178: LD_VAR 0 4
71182: PPUSH
71183: LD_INT 3
71185: PPUSH
71186: LD_INT 12
71188: PPUSH
71189: CALL_OW 12
71193: PPUSH
71194: CALL_OW 273
71198: ST_TO_ADDR
// if ValidHex ( x , y ) then
71199: LD_VAR 0 2
71203: PPUSH
71204: LD_VAR 0 3
71208: PPUSH
71209: CALL_OW 488
71213: IFFALSE 71248
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
71215: LD_VAR 0 1
71219: PPUSH
71220: LD_VAR 0 2
71224: PPUSH
71225: LD_VAR 0 3
71229: PPUSH
71230: LD_INT 3
71232: PPUSH
71233: LD_INT 6
71235: PPUSH
71236: CALL_OW 12
71240: PPUSH
71241: LD_INT 1
71243: PPUSH
71244: CALL_OW 483
// end ;
71248: GO 71108
71250: POP
71251: POP
// end ;
71252: PPOPN 5
71254: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
71255: LD_EXP 46
71259: PUSH
71260: LD_EXP 81
71264: AND
71265: IFFALSE 71359
71267: GO 71269
71269: DISABLE
71270: LD_INT 0
71272: PPUSH
71273: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
71274: LD_ADDR_VAR 0 2
71278: PUSH
71279: LD_INT 22
71281: PUSH
71282: LD_OWVAR 2
71286: PUSH
71287: EMPTY
71288: LIST
71289: LIST
71290: PUSH
71291: LD_INT 32
71293: PUSH
71294: LD_INT 1
71296: PUSH
71297: EMPTY
71298: LIST
71299: LIST
71300: PUSH
71301: LD_INT 21
71303: PUSH
71304: LD_INT 2
71306: PUSH
71307: EMPTY
71308: LIST
71309: LIST
71310: PUSH
71311: EMPTY
71312: LIST
71313: LIST
71314: LIST
71315: PPUSH
71316: CALL_OW 69
71320: ST_TO_ADDR
// if not tmp then
71321: LD_VAR 0 2
71325: NOT
71326: IFFALSE 71330
// exit ;
71328: GO 71359
// for i in tmp do
71330: LD_ADDR_VAR 0 1
71334: PUSH
71335: LD_VAR 0 2
71339: PUSH
71340: FOR_IN
71341: IFFALSE 71357
// SetFuel ( i , 0 ) ;
71343: LD_VAR 0 1
71347: PPUSH
71348: LD_INT 0
71350: PPUSH
71351: CALL_OW 240
71355: GO 71340
71357: POP
71358: POP
// end ;
71359: PPOPN 2
71361: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
71362: LD_EXP 46
71366: PUSH
71367: LD_EXP 82
71371: AND
71372: IFFALSE 71438
71374: GO 71376
71376: DISABLE
71377: LD_INT 0
71379: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
71380: LD_ADDR_VAR 0 1
71384: PUSH
71385: LD_INT 22
71387: PUSH
71388: LD_OWVAR 2
71392: PUSH
71393: EMPTY
71394: LIST
71395: LIST
71396: PUSH
71397: LD_INT 30
71399: PUSH
71400: LD_INT 29
71402: PUSH
71403: EMPTY
71404: LIST
71405: LIST
71406: PUSH
71407: EMPTY
71408: LIST
71409: LIST
71410: PPUSH
71411: CALL_OW 69
71415: ST_TO_ADDR
// if not tmp then
71416: LD_VAR 0 1
71420: NOT
71421: IFFALSE 71425
// exit ;
71423: GO 71438
// DestroyUnit ( tmp [ 1 ] ) ;
71425: LD_VAR 0 1
71429: PUSH
71430: LD_INT 1
71432: ARRAY
71433: PPUSH
71434: CALL_OW 65
// end ;
71438: PPOPN 1
71440: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
71441: LD_EXP 46
71445: PUSH
71446: LD_EXP 84
71450: AND
71451: IFFALSE 71580
71453: GO 71455
71455: DISABLE
71456: LD_INT 0
71458: PPUSH
// begin uc_side := 0 ;
71459: LD_ADDR_OWVAR 20
71463: PUSH
71464: LD_INT 0
71466: ST_TO_ADDR
// uc_nation := nation_arabian ;
71467: LD_ADDR_OWVAR 21
71471: PUSH
71472: LD_INT 2
71474: ST_TO_ADDR
// hc_gallery :=  ;
71475: LD_ADDR_OWVAR 33
71479: PUSH
71480: LD_STRING 
71482: ST_TO_ADDR
// hc_name :=  ;
71483: LD_ADDR_OWVAR 26
71487: PUSH
71488: LD_STRING 
71490: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
71491: LD_INT 1
71493: PPUSH
71494: LD_INT 11
71496: PPUSH
71497: LD_INT 10
71499: PPUSH
71500: CALL_OW 380
// un := CreateHuman ;
71504: LD_ADDR_VAR 0 1
71508: PUSH
71509: CALL_OW 44
71513: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71514: LD_VAR 0 1
71518: PPUSH
71519: LD_INT 1
71521: PPUSH
71522: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
71526: LD_INT 35
71528: PPUSH
71529: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
71533: LD_VAR 0 1
71537: PPUSH
71538: LD_INT 22
71540: PUSH
71541: LD_OWVAR 2
71545: PUSH
71546: EMPTY
71547: LIST
71548: LIST
71549: PPUSH
71550: CALL_OW 69
71554: PPUSH
71555: LD_VAR 0 1
71559: PPUSH
71560: CALL_OW 74
71564: PPUSH
71565: CALL_OW 115
// until IsDead ( un ) ;
71569: LD_VAR 0 1
71573: PPUSH
71574: CALL_OW 301
71578: IFFALSE 71526
// end ;
71580: PPOPN 1
71582: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
71583: LD_EXP 46
71587: PUSH
71588: LD_EXP 86
71592: AND
71593: IFFALSE 71605
71595: GO 71597
71597: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
71598: LD_STRING earthquake(getX(game), 0, 32)
71600: PPUSH
71601: CALL_OW 559
71605: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
71606: LD_EXP 46
71610: PUSH
71611: LD_EXP 87
71615: AND
71616: IFFALSE 71707
71618: GO 71620
71620: DISABLE
71621: LD_INT 0
71623: PPUSH
// begin enable ;
71624: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
71625: LD_ADDR_VAR 0 1
71629: PUSH
71630: LD_INT 22
71632: PUSH
71633: LD_OWVAR 2
71637: PUSH
71638: EMPTY
71639: LIST
71640: LIST
71641: PUSH
71642: LD_INT 21
71644: PUSH
71645: LD_INT 2
71647: PUSH
71648: EMPTY
71649: LIST
71650: LIST
71651: PUSH
71652: LD_INT 33
71654: PUSH
71655: LD_INT 3
71657: PUSH
71658: EMPTY
71659: LIST
71660: LIST
71661: PUSH
71662: EMPTY
71663: LIST
71664: LIST
71665: LIST
71666: PPUSH
71667: CALL_OW 69
71671: ST_TO_ADDR
// if not tmp then
71672: LD_VAR 0 1
71676: NOT
71677: IFFALSE 71681
// exit ;
71679: GO 71707
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
71681: LD_VAR 0 1
71685: PUSH
71686: LD_INT 1
71688: PPUSH
71689: LD_VAR 0 1
71693: PPUSH
71694: CALL_OW 12
71698: ARRAY
71699: PPUSH
71700: LD_INT 1
71702: PPUSH
71703: CALL_OW 234
// end ;
71707: PPOPN 1
71709: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
71710: LD_EXP 46
71714: PUSH
71715: LD_EXP 88
71719: AND
71720: IFFALSE 71861
71722: GO 71724
71724: DISABLE
71725: LD_INT 0
71727: PPUSH
71728: PPUSH
71729: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71730: LD_ADDR_VAR 0 3
71734: PUSH
71735: LD_INT 22
71737: PUSH
71738: LD_OWVAR 2
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: PUSH
71747: LD_INT 25
71749: PUSH
71750: LD_INT 1
71752: PUSH
71753: EMPTY
71754: LIST
71755: LIST
71756: PUSH
71757: EMPTY
71758: LIST
71759: LIST
71760: PPUSH
71761: CALL_OW 69
71765: ST_TO_ADDR
// if not tmp then
71766: LD_VAR 0 3
71770: NOT
71771: IFFALSE 71775
// exit ;
71773: GO 71861
// un := tmp [ rand ( 1 , tmp ) ] ;
71775: LD_ADDR_VAR 0 2
71779: PUSH
71780: LD_VAR 0 3
71784: PUSH
71785: LD_INT 1
71787: PPUSH
71788: LD_VAR 0 3
71792: PPUSH
71793: CALL_OW 12
71797: ARRAY
71798: ST_TO_ADDR
// if Crawls ( un ) then
71799: LD_VAR 0 2
71803: PPUSH
71804: CALL_OW 318
71808: IFFALSE 71819
// ComWalk ( un ) ;
71810: LD_VAR 0 2
71814: PPUSH
71815: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
71819: LD_VAR 0 2
71823: PPUSH
71824: LD_INT 9
71826: PPUSH
71827: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
71831: LD_INT 28
71833: PPUSH
71834: LD_OWVAR 2
71838: PPUSH
71839: LD_INT 2
71841: PPUSH
71842: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
71846: LD_INT 29
71848: PPUSH
71849: LD_OWVAR 2
71853: PPUSH
71854: LD_INT 2
71856: PPUSH
71857: CALL_OW 322
// end ;
71861: PPOPN 3
71863: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
71864: LD_EXP 46
71868: PUSH
71869: LD_EXP 89
71873: AND
71874: IFFALSE 71985
71876: GO 71878
71878: DISABLE
71879: LD_INT 0
71881: PPUSH
71882: PPUSH
71883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71884: LD_ADDR_VAR 0 3
71888: PUSH
71889: LD_INT 22
71891: PUSH
71892: LD_OWVAR 2
71896: PUSH
71897: EMPTY
71898: LIST
71899: LIST
71900: PUSH
71901: LD_INT 25
71903: PUSH
71904: LD_INT 1
71906: PUSH
71907: EMPTY
71908: LIST
71909: LIST
71910: PUSH
71911: EMPTY
71912: LIST
71913: LIST
71914: PPUSH
71915: CALL_OW 69
71919: ST_TO_ADDR
// if not tmp then
71920: LD_VAR 0 3
71924: NOT
71925: IFFALSE 71929
// exit ;
71927: GO 71985
// un := tmp [ rand ( 1 , tmp ) ] ;
71929: LD_ADDR_VAR 0 2
71933: PUSH
71934: LD_VAR 0 3
71938: PUSH
71939: LD_INT 1
71941: PPUSH
71942: LD_VAR 0 3
71946: PPUSH
71947: CALL_OW 12
71951: ARRAY
71952: ST_TO_ADDR
// if Crawls ( un ) then
71953: LD_VAR 0 2
71957: PPUSH
71958: CALL_OW 318
71962: IFFALSE 71973
// ComWalk ( un ) ;
71964: LD_VAR 0 2
71968: PPUSH
71969: CALL_OW 138
// SetClass ( un , class_mortar ) ;
71973: LD_VAR 0 2
71977: PPUSH
71978: LD_INT 8
71980: PPUSH
71981: CALL_OW 336
// end ;
71985: PPOPN 3
71987: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
71988: LD_EXP 46
71992: PUSH
71993: LD_EXP 90
71997: AND
71998: IFFALSE 72142
72000: GO 72002
72002: DISABLE
72003: LD_INT 0
72005: PPUSH
72006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
72007: LD_ADDR_VAR 0 2
72011: PUSH
72012: LD_INT 22
72014: PUSH
72015: LD_OWVAR 2
72019: PUSH
72020: EMPTY
72021: LIST
72022: LIST
72023: PUSH
72024: LD_INT 21
72026: PUSH
72027: LD_INT 2
72029: PUSH
72030: EMPTY
72031: LIST
72032: LIST
72033: PUSH
72034: LD_INT 2
72036: PUSH
72037: LD_INT 34
72039: PUSH
72040: LD_INT 12
72042: PUSH
72043: EMPTY
72044: LIST
72045: LIST
72046: PUSH
72047: LD_INT 34
72049: PUSH
72050: LD_INT 51
72052: PUSH
72053: EMPTY
72054: LIST
72055: LIST
72056: PUSH
72057: LD_INT 34
72059: PUSH
72060: LD_INT 32
72062: PUSH
72063: EMPTY
72064: LIST
72065: LIST
72066: PUSH
72067: EMPTY
72068: LIST
72069: LIST
72070: LIST
72071: LIST
72072: PUSH
72073: EMPTY
72074: LIST
72075: LIST
72076: LIST
72077: PPUSH
72078: CALL_OW 69
72082: ST_TO_ADDR
// if not tmp then
72083: LD_VAR 0 2
72087: NOT
72088: IFFALSE 72092
// exit ;
72090: GO 72142
// for i in tmp do
72092: LD_ADDR_VAR 0 1
72096: PUSH
72097: LD_VAR 0 2
72101: PUSH
72102: FOR_IN
72103: IFFALSE 72140
// if GetCargo ( i , mat_artifact ) = 0 then
72105: LD_VAR 0 1
72109: PPUSH
72110: LD_INT 4
72112: PPUSH
72113: CALL_OW 289
72117: PUSH
72118: LD_INT 0
72120: EQUAL
72121: IFFALSE 72138
// SetCargo ( i , mat_siberit , 100 ) ;
72123: LD_VAR 0 1
72127: PPUSH
72128: LD_INT 3
72130: PPUSH
72131: LD_INT 100
72133: PPUSH
72134: CALL_OW 290
72138: GO 72102
72140: POP
72141: POP
// end ;
72142: PPOPN 2
72144: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
72145: LD_EXP 46
72149: PUSH
72150: LD_EXP 91
72154: AND
72155: IFFALSE 72338
72157: GO 72159
72159: DISABLE
72160: LD_INT 0
72162: PPUSH
72163: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
72164: LD_ADDR_VAR 0 2
72168: PUSH
72169: LD_INT 22
72171: PUSH
72172: LD_OWVAR 2
72176: PUSH
72177: EMPTY
72178: LIST
72179: LIST
72180: PPUSH
72181: CALL_OW 69
72185: ST_TO_ADDR
// if not tmp then
72186: LD_VAR 0 2
72190: NOT
72191: IFFALSE 72195
// exit ;
72193: GO 72338
// for i := 1 to 2 do
72195: LD_ADDR_VAR 0 1
72199: PUSH
72200: DOUBLE
72201: LD_INT 1
72203: DEC
72204: ST_TO_ADDR
72205: LD_INT 2
72207: PUSH
72208: FOR_TO
72209: IFFALSE 72336
// begin uc_side := your_side ;
72211: LD_ADDR_OWVAR 20
72215: PUSH
72216: LD_OWVAR 2
72220: ST_TO_ADDR
// uc_nation := nation_american ;
72221: LD_ADDR_OWVAR 21
72225: PUSH
72226: LD_INT 1
72228: ST_TO_ADDR
// vc_chassis := us_morphling ;
72229: LD_ADDR_OWVAR 37
72233: PUSH
72234: LD_INT 5
72236: ST_TO_ADDR
// vc_engine := engine_siberite ;
72237: LD_ADDR_OWVAR 39
72241: PUSH
72242: LD_INT 3
72244: ST_TO_ADDR
// vc_control := control_computer ;
72245: LD_ADDR_OWVAR 38
72249: PUSH
72250: LD_INT 3
72252: ST_TO_ADDR
// vc_weapon := us_double_laser ;
72253: LD_ADDR_OWVAR 40
72257: PUSH
72258: LD_INT 10
72260: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
72261: LD_VAR 0 2
72265: PUSH
72266: LD_INT 1
72268: ARRAY
72269: PPUSH
72270: CALL_OW 310
72274: NOT
72275: IFFALSE 72322
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
72277: CALL_OW 45
72281: PPUSH
72282: LD_VAR 0 2
72286: PUSH
72287: LD_INT 1
72289: ARRAY
72290: PPUSH
72291: CALL_OW 250
72295: PPUSH
72296: LD_VAR 0 2
72300: PUSH
72301: LD_INT 1
72303: ARRAY
72304: PPUSH
72305: CALL_OW 251
72309: PPUSH
72310: LD_INT 12
72312: PPUSH
72313: LD_INT 1
72315: PPUSH
72316: CALL_OW 50
72320: GO 72334
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
72322: CALL_OW 45
72326: PPUSH
72327: LD_INT 1
72329: PPUSH
72330: CALL_OW 51
// end ;
72334: GO 72208
72336: POP
72337: POP
// end ;
72338: PPOPN 2
72340: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
72341: LD_EXP 46
72345: PUSH
72346: LD_EXP 92
72350: AND
72351: IFFALSE 72573
72353: GO 72355
72355: DISABLE
72356: LD_INT 0
72358: PPUSH
72359: PPUSH
72360: PPUSH
72361: PPUSH
72362: PPUSH
72363: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72364: LD_ADDR_VAR 0 6
72368: PUSH
72369: LD_INT 22
72371: PUSH
72372: LD_OWVAR 2
72376: PUSH
72377: EMPTY
72378: LIST
72379: LIST
72380: PUSH
72381: LD_INT 21
72383: PUSH
72384: LD_INT 1
72386: PUSH
72387: EMPTY
72388: LIST
72389: LIST
72390: PUSH
72391: LD_INT 3
72393: PUSH
72394: LD_INT 23
72396: PUSH
72397: LD_INT 0
72399: PUSH
72400: EMPTY
72401: LIST
72402: LIST
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: PUSH
72408: EMPTY
72409: LIST
72410: LIST
72411: LIST
72412: PPUSH
72413: CALL_OW 69
72417: ST_TO_ADDR
// if not tmp then
72418: LD_VAR 0 6
72422: NOT
72423: IFFALSE 72427
// exit ;
72425: GO 72573
// s1 := rand ( 1 , 4 ) ;
72427: LD_ADDR_VAR 0 2
72431: PUSH
72432: LD_INT 1
72434: PPUSH
72435: LD_INT 4
72437: PPUSH
72438: CALL_OW 12
72442: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
72443: LD_ADDR_VAR 0 4
72447: PUSH
72448: LD_VAR 0 6
72452: PUSH
72453: LD_INT 1
72455: ARRAY
72456: PPUSH
72457: LD_VAR 0 2
72461: PPUSH
72462: CALL_OW 259
72466: ST_TO_ADDR
// if s1 = 1 then
72467: LD_VAR 0 2
72471: PUSH
72472: LD_INT 1
72474: EQUAL
72475: IFFALSE 72495
// s2 := rand ( 2 , 4 ) else
72477: LD_ADDR_VAR 0 3
72481: PUSH
72482: LD_INT 2
72484: PPUSH
72485: LD_INT 4
72487: PPUSH
72488: CALL_OW 12
72492: ST_TO_ADDR
72493: GO 72503
// s2 := 1 ;
72495: LD_ADDR_VAR 0 3
72499: PUSH
72500: LD_INT 1
72502: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
72503: LD_ADDR_VAR 0 5
72507: PUSH
72508: LD_VAR 0 6
72512: PUSH
72513: LD_INT 1
72515: ARRAY
72516: PPUSH
72517: LD_VAR 0 3
72521: PPUSH
72522: CALL_OW 259
72526: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
72527: LD_VAR 0 6
72531: PUSH
72532: LD_INT 1
72534: ARRAY
72535: PPUSH
72536: LD_VAR 0 2
72540: PPUSH
72541: LD_VAR 0 5
72545: PPUSH
72546: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
72550: LD_VAR 0 6
72554: PUSH
72555: LD_INT 1
72557: ARRAY
72558: PPUSH
72559: LD_VAR 0 3
72563: PPUSH
72564: LD_VAR 0 4
72568: PPUSH
72569: CALL_OW 237
// end ;
72573: PPOPN 6
72575: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
72576: LD_EXP 46
72580: PUSH
72581: LD_EXP 93
72585: AND
72586: IFFALSE 72665
72588: GO 72590
72590: DISABLE
72591: LD_INT 0
72593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
72594: LD_ADDR_VAR 0 1
72598: PUSH
72599: LD_INT 22
72601: PUSH
72602: LD_OWVAR 2
72606: PUSH
72607: EMPTY
72608: LIST
72609: LIST
72610: PUSH
72611: LD_INT 30
72613: PUSH
72614: LD_INT 3
72616: PUSH
72617: EMPTY
72618: LIST
72619: LIST
72620: PUSH
72621: EMPTY
72622: LIST
72623: LIST
72624: PPUSH
72625: CALL_OW 69
72629: ST_TO_ADDR
// if not tmp then
72630: LD_VAR 0 1
72634: NOT
72635: IFFALSE 72639
// exit ;
72637: GO 72665
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
72639: LD_VAR 0 1
72643: PUSH
72644: LD_INT 1
72646: PPUSH
72647: LD_VAR 0 1
72651: PPUSH
72652: CALL_OW 12
72656: ARRAY
72657: PPUSH
72658: LD_INT 1
72660: PPUSH
72661: CALL_OW 234
// end ;
72665: PPOPN 1
72667: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
72668: LD_EXP 46
72672: PUSH
72673: LD_EXP 94
72677: AND
72678: IFFALSE 72790
72680: GO 72682
72682: DISABLE
72683: LD_INT 0
72685: PPUSH
72686: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
72687: LD_ADDR_VAR 0 2
72691: PUSH
72692: LD_INT 22
72694: PUSH
72695: LD_OWVAR 2
72699: PUSH
72700: EMPTY
72701: LIST
72702: LIST
72703: PUSH
72704: LD_INT 2
72706: PUSH
72707: LD_INT 30
72709: PUSH
72710: LD_INT 27
72712: PUSH
72713: EMPTY
72714: LIST
72715: LIST
72716: PUSH
72717: LD_INT 30
72719: PUSH
72720: LD_INT 26
72722: PUSH
72723: EMPTY
72724: LIST
72725: LIST
72726: PUSH
72727: LD_INT 30
72729: PUSH
72730: LD_INT 28
72732: PUSH
72733: EMPTY
72734: LIST
72735: LIST
72736: PUSH
72737: EMPTY
72738: LIST
72739: LIST
72740: LIST
72741: LIST
72742: PUSH
72743: EMPTY
72744: LIST
72745: LIST
72746: PPUSH
72747: CALL_OW 69
72751: ST_TO_ADDR
// if not tmp then
72752: LD_VAR 0 2
72756: NOT
72757: IFFALSE 72761
// exit ;
72759: GO 72790
// for i in tmp do
72761: LD_ADDR_VAR 0 1
72765: PUSH
72766: LD_VAR 0 2
72770: PUSH
72771: FOR_IN
72772: IFFALSE 72788
// SetLives ( i , 1 ) ;
72774: LD_VAR 0 1
72778: PPUSH
72779: LD_INT 1
72781: PPUSH
72782: CALL_OW 234
72786: GO 72771
72788: POP
72789: POP
// end ;
72790: PPOPN 2
72792: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
72793: LD_EXP 46
72797: PUSH
72798: LD_EXP 95
72802: AND
72803: IFFALSE 73090
72805: GO 72807
72807: DISABLE
72808: LD_INT 0
72810: PPUSH
72811: PPUSH
72812: PPUSH
// begin i := rand ( 1 , 7 ) ;
72813: LD_ADDR_VAR 0 1
72817: PUSH
72818: LD_INT 1
72820: PPUSH
72821: LD_INT 7
72823: PPUSH
72824: CALL_OW 12
72828: ST_TO_ADDR
// case i of 1 :
72829: LD_VAR 0 1
72833: PUSH
72834: LD_INT 1
72836: DOUBLE
72837: EQUAL
72838: IFTRUE 72842
72840: GO 72852
72842: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
72843: LD_STRING earthquake(getX(game), 0, 32)
72845: PPUSH
72846: CALL_OW 559
72850: GO 73090
72852: LD_INT 2
72854: DOUBLE
72855: EQUAL
72856: IFTRUE 72860
72858: GO 72874
72860: POP
// begin ToLua ( displayStucuk(); ) ;
72861: LD_STRING displayStucuk();
72863: PPUSH
72864: CALL_OW 559
// ResetFog ;
72868: CALL_OW 335
// end ; 3 :
72872: GO 73090
72874: LD_INT 3
72876: DOUBLE
72877: EQUAL
72878: IFTRUE 72882
72880: GO 72986
72882: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72883: LD_ADDR_VAR 0 2
72887: PUSH
72888: LD_INT 22
72890: PUSH
72891: LD_OWVAR 2
72895: PUSH
72896: EMPTY
72897: LIST
72898: LIST
72899: PUSH
72900: LD_INT 25
72902: PUSH
72903: LD_INT 1
72905: PUSH
72906: EMPTY
72907: LIST
72908: LIST
72909: PUSH
72910: EMPTY
72911: LIST
72912: LIST
72913: PPUSH
72914: CALL_OW 69
72918: ST_TO_ADDR
// if not tmp then
72919: LD_VAR 0 2
72923: NOT
72924: IFFALSE 72928
// exit ;
72926: GO 73090
// un := tmp [ rand ( 1 , tmp ) ] ;
72928: LD_ADDR_VAR 0 3
72932: PUSH
72933: LD_VAR 0 2
72937: PUSH
72938: LD_INT 1
72940: PPUSH
72941: LD_VAR 0 2
72945: PPUSH
72946: CALL_OW 12
72950: ARRAY
72951: ST_TO_ADDR
// if Crawls ( un ) then
72952: LD_VAR 0 3
72956: PPUSH
72957: CALL_OW 318
72961: IFFALSE 72972
// ComWalk ( un ) ;
72963: LD_VAR 0 3
72967: PPUSH
72968: CALL_OW 138
// SetClass ( un , class_mortar ) ;
72972: LD_VAR 0 3
72976: PPUSH
72977: LD_INT 8
72979: PPUSH
72980: CALL_OW 336
// end ; 4 :
72984: GO 73090
72986: LD_INT 4
72988: DOUBLE
72989: EQUAL
72990: IFTRUE 72994
72992: GO 73068
72994: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
72995: LD_ADDR_VAR 0 2
72999: PUSH
73000: LD_INT 22
73002: PUSH
73003: LD_OWVAR 2
73007: PUSH
73008: EMPTY
73009: LIST
73010: LIST
73011: PUSH
73012: LD_INT 30
73014: PUSH
73015: LD_INT 29
73017: PUSH
73018: EMPTY
73019: LIST
73020: LIST
73021: PUSH
73022: EMPTY
73023: LIST
73024: LIST
73025: PPUSH
73026: CALL_OW 69
73030: ST_TO_ADDR
// if not tmp then
73031: LD_VAR 0 2
73035: NOT
73036: IFFALSE 73040
// exit ;
73038: GO 73090
// CenterNowOnUnits ( tmp [ 1 ] ) ;
73040: LD_VAR 0 2
73044: PUSH
73045: LD_INT 1
73047: ARRAY
73048: PPUSH
73049: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
73053: LD_VAR 0 2
73057: PUSH
73058: LD_INT 1
73060: ARRAY
73061: PPUSH
73062: CALL_OW 65
// end ; 5 .. 7 :
73066: GO 73090
73068: LD_INT 5
73070: DOUBLE
73071: GREATEREQUAL
73072: IFFALSE 73080
73074: LD_INT 7
73076: DOUBLE
73077: LESSEQUAL
73078: IFTRUE 73082
73080: GO 73089
73082: POP
// StreamSibBomb ; end ;
73083: CALL 69327 0 0
73087: GO 73090
73089: POP
// end ;
73090: PPOPN 3
73092: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
73093: LD_EXP 46
73097: PUSH
73098: LD_EXP 96
73102: AND
73103: IFFALSE 73259
73105: GO 73107
73107: DISABLE
73108: LD_INT 0
73110: PPUSH
73111: PPUSH
73112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
73113: LD_ADDR_VAR 0 2
73117: PUSH
73118: LD_INT 81
73120: PUSH
73121: LD_OWVAR 2
73125: PUSH
73126: EMPTY
73127: LIST
73128: LIST
73129: PUSH
73130: LD_INT 2
73132: PUSH
73133: LD_INT 21
73135: PUSH
73136: LD_INT 1
73138: PUSH
73139: EMPTY
73140: LIST
73141: LIST
73142: PUSH
73143: LD_INT 21
73145: PUSH
73146: LD_INT 2
73148: PUSH
73149: EMPTY
73150: LIST
73151: LIST
73152: PUSH
73153: EMPTY
73154: LIST
73155: LIST
73156: LIST
73157: PUSH
73158: EMPTY
73159: LIST
73160: LIST
73161: PPUSH
73162: CALL_OW 69
73166: ST_TO_ADDR
// if not tmp then
73167: LD_VAR 0 2
73171: NOT
73172: IFFALSE 73176
// exit ;
73174: GO 73259
// p := 0 ;
73176: LD_ADDR_VAR 0 3
73180: PUSH
73181: LD_INT 0
73183: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73184: LD_INT 35
73186: PPUSH
73187: CALL_OW 67
// p := p + 1 ;
73191: LD_ADDR_VAR 0 3
73195: PUSH
73196: LD_VAR 0 3
73200: PUSH
73201: LD_INT 1
73203: PLUS
73204: ST_TO_ADDR
// for i in tmp do
73205: LD_ADDR_VAR 0 1
73209: PUSH
73210: LD_VAR 0 2
73214: PUSH
73215: FOR_IN
73216: IFFALSE 73247
// if GetLives ( i ) < 1000 then
73218: LD_VAR 0 1
73222: PPUSH
73223: CALL_OW 256
73227: PUSH
73228: LD_INT 1000
73230: LESS
73231: IFFALSE 73245
// SetLives ( i , 1000 ) ;
73233: LD_VAR 0 1
73237: PPUSH
73238: LD_INT 1000
73240: PPUSH
73241: CALL_OW 234
73245: GO 73215
73247: POP
73248: POP
// until p > 20 ;
73249: LD_VAR 0 3
73253: PUSH
73254: LD_INT 20
73256: GREATER
73257: IFFALSE 73184
// end ;
73259: PPOPN 3
73261: END
// every 0 0$1 trigger StreamModeActive and sTime do
73262: LD_EXP 46
73266: PUSH
73267: LD_EXP 97
73271: AND
73272: IFFALSE 73307
73274: GO 73276
73276: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
73277: LD_INT 28
73279: PPUSH
73280: LD_OWVAR 2
73284: PPUSH
73285: LD_INT 2
73287: PPUSH
73288: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
73292: LD_INT 30
73294: PPUSH
73295: LD_OWVAR 2
73299: PPUSH
73300: LD_INT 2
73302: PPUSH
73303: CALL_OW 322
// end ;
73307: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
73308: LD_EXP 46
73312: PUSH
73313: LD_EXP 98
73317: AND
73318: IFFALSE 73439
73320: GO 73322
73322: DISABLE
73323: LD_INT 0
73325: PPUSH
73326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
73327: LD_ADDR_VAR 0 2
73331: PUSH
73332: LD_INT 22
73334: PUSH
73335: LD_OWVAR 2
73339: PUSH
73340: EMPTY
73341: LIST
73342: LIST
73343: PUSH
73344: LD_INT 21
73346: PUSH
73347: LD_INT 1
73349: PUSH
73350: EMPTY
73351: LIST
73352: LIST
73353: PUSH
73354: LD_INT 3
73356: PUSH
73357: LD_INT 23
73359: PUSH
73360: LD_INT 0
73362: PUSH
73363: EMPTY
73364: LIST
73365: LIST
73366: PUSH
73367: EMPTY
73368: LIST
73369: LIST
73370: PUSH
73371: EMPTY
73372: LIST
73373: LIST
73374: LIST
73375: PPUSH
73376: CALL_OW 69
73380: ST_TO_ADDR
// if not tmp then
73381: LD_VAR 0 2
73385: NOT
73386: IFFALSE 73390
// exit ;
73388: GO 73439
// for i in tmp do
73390: LD_ADDR_VAR 0 1
73394: PUSH
73395: LD_VAR 0 2
73399: PUSH
73400: FOR_IN
73401: IFFALSE 73437
// begin if Crawls ( i ) then
73403: LD_VAR 0 1
73407: PPUSH
73408: CALL_OW 318
73412: IFFALSE 73423
// ComWalk ( i ) ;
73414: LD_VAR 0 1
73418: PPUSH
73419: CALL_OW 138
// SetClass ( i , 2 ) ;
73423: LD_VAR 0 1
73427: PPUSH
73428: LD_INT 2
73430: PPUSH
73431: CALL_OW 336
// end ;
73435: GO 73400
73437: POP
73438: POP
// end ;
73439: PPOPN 2
73441: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
73442: LD_EXP 46
73446: PUSH
73447: LD_EXP 99
73451: AND
73452: IFFALSE 73740
73454: GO 73456
73456: DISABLE
73457: LD_INT 0
73459: PPUSH
73460: PPUSH
73461: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
73462: LD_OWVAR 2
73466: PPUSH
73467: LD_INT 9
73469: PPUSH
73470: LD_INT 1
73472: PPUSH
73473: LD_INT 1
73475: PPUSH
73476: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
73480: LD_INT 9
73482: PPUSH
73483: LD_OWVAR 2
73487: PPUSH
73488: CALL_OW 343
// uc_side := 9 ;
73492: LD_ADDR_OWVAR 20
73496: PUSH
73497: LD_INT 9
73499: ST_TO_ADDR
// uc_nation := 2 ;
73500: LD_ADDR_OWVAR 21
73504: PUSH
73505: LD_INT 2
73507: ST_TO_ADDR
// hc_name := Dark Warrior ;
73508: LD_ADDR_OWVAR 26
73512: PUSH
73513: LD_STRING Dark Warrior
73515: ST_TO_ADDR
// hc_gallery :=  ;
73516: LD_ADDR_OWVAR 33
73520: PUSH
73521: LD_STRING 
73523: ST_TO_ADDR
// hc_noskilllimit := true ;
73524: LD_ADDR_OWVAR 76
73528: PUSH
73529: LD_INT 1
73531: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
73532: LD_ADDR_OWVAR 31
73536: PUSH
73537: LD_INT 30
73539: PUSH
73540: LD_INT 30
73542: PUSH
73543: LD_INT 30
73545: PUSH
73546: LD_INT 30
73548: PUSH
73549: EMPTY
73550: LIST
73551: LIST
73552: LIST
73553: LIST
73554: ST_TO_ADDR
// un := CreateHuman ;
73555: LD_ADDR_VAR 0 3
73559: PUSH
73560: CALL_OW 44
73564: ST_TO_ADDR
// hc_noskilllimit := false ;
73565: LD_ADDR_OWVAR 76
73569: PUSH
73570: LD_INT 0
73572: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73573: LD_VAR 0 3
73577: PPUSH
73578: LD_INT 1
73580: PPUSH
73581: CALL_OW 51
// ToLua ( playRanger() ) ;
73585: LD_STRING playRanger()
73587: PPUSH
73588: CALL_OW 559
// p := 0 ;
73592: LD_ADDR_VAR 0 2
73596: PUSH
73597: LD_INT 0
73599: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73600: LD_INT 35
73602: PPUSH
73603: CALL_OW 67
// p := p + 1 ;
73607: LD_ADDR_VAR 0 2
73611: PUSH
73612: LD_VAR 0 2
73616: PUSH
73617: LD_INT 1
73619: PLUS
73620: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
73621: LD_VAR 0 3
73625: PPUSH
73626: CALL_OW 256
73630: PUSH
73631: LD_INT 1000
73633: LESS
73634: IFFALSE 73648
// SetLives ( un , 1000 ) ;
73636: LD_VAR 0 3
73640: PPUSH
73641: LD_INT 1000
73643: PPUSH
73644: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
73648: LD_VAR 0 3
73652: PPUSH
73653: LD_INT 81
73655: PUSH
73656: LD_OWVAR 2
73660: PUSH
73661: EMPTY
73662: LIST
73663: LIST
73664: PUSH
73665: LD_INT 91
73667: PUSH
73668: LD_VAR 0 3
73672: PUSH
73673: LD_INT 30
73675: PUSH
73676: EMPTY
73677: LIST
73678: LIST
73679: LIST
73680: PUSH
73681: EMPTY
73682: LIST
73683: LIST
73684: PPUSH
73685: CALL_OW 69
73689: PPUSH
73690: LD_VAR 0 3
73694: PPUSH
73695: CALL_OW 74
73699: PPUSH
73700: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
73704: LD_VAR 0 2
73708: PUSH
73709: LD_INT 80
73711: GREATER
73712: PUSH
73713: LD_VAR 0 3
73717: PPUSH
73718: CALL_OW 301
73722: OR
73723: IFFALSE 73600
// if un then
73725: LD_VAR 0 3
73729: IFFALSE 73740
// RemoveUnit ( un ) ;
73731: LD_VAR 0 3
73735: PPUSH
73736: CALL_OW 64
// end ;
73740: PPOPN 3
73742: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
73743: LD_EXP 100
73747: IFFALSE 73863
73749: GO 73751
73751: DISABLE
73752: LD_INT 0
73754: PPUSH
73755: PPUSH
73756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
73757: LD_ADDR_VAR 0 2
73761: PUSH
73762: LD_INT 81
73764: PUSH
73765: LD_OWVAR 2
73769: PUSH
73770: EMPTY
73771: LIST
73772: LIST
73773: PUSH
73774: LD_INT 21
73776: PUSH
73777: LD_INT 1
73779: PUSH
73780: EMPTY
73781: LIST
73782: LIST
73783: PUSH
73784: EMPTY
73785: LIST
73786: LIST
73787: PPUSH
73788: CALL_OW 69
73792: ST_TO_ADDR
// ToLua ( playComputer() ) ;
73793: LD_STRING playComputer()
73795: PPUSH
73796: CALL_OW 559
// if not tmp then
73800: LD_VAR 0 2
73804: NOT
73805: IFFALSE 73809
// exit ;
73807: GO 73863
// for i in tmp do
73809: LD_ADDR_VAR 0 1
73813: PUSH
73814: LD_VAR 0 2
73818: PUSH
73819: FOR_IN
73820: IFFALSE 73861
// for j := 1 to 4 do
73822: LD_ADDR_VAR 0 3
73826: PUSH
73827: DOUBLE
73828: LD_INT 1
73830: DEC
73831: ST_TO_ADDR
73832: LD_INT 4
73834: PUSH
73835: FOR_TO
73836: IFFALSE 73857
// SetSkill ( i , j , 10 ) ;
73838: LD_VAR 0 1
73842: PPUSH
73843: LD_VAR 0 3
73847: PPUSH
73848: LD_INT 10
73850: PPUSH
73851: CALL_OW 237
73855: GO 73835
73857: POP
73858: POP
73859: GO 73819
73861: POP
73862: POP
// end ;
73863: PPOPN 3
73865: END
// every 0 0$1 trigger s30 do var i , tmp ;
73866: LD_EXP 101
73870: IFFALSE 73939
73872: GO 73874
73874: DISABLE
73875: LD_INT 0
73877: PPUSH
73878: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73879: LD_ADDR_VAR 0 2
73883: PUSH
73884: LD_INT 22
73886: PUSH
73887: LD_OWVAR 2
73891: PUSH
73892: EMPTY
73893: LIST
73894: LIST
73895: PPUSH
73896: CALL_OW 69
73900: ST_TO_ADDR
// if not tmp then
73901: LD_VAR 0 2
73905: NOT
73906: IFFALSE 73910
// exit ;
73908: GO 73939
// for i in tmp do
73910: LD_ADDR_VAR 0 1
73914: PUSH
73915: LD_VAR 0 2
73919: PUSH
73920: FOR_IN
73921: IFFALSE 73937
// SetLives ( i , 300 ) ;
73923: LD_VAR 0 1
73927: PPUSH
73928: LD_INT 300
73930: PPUSH
73931: CALL_OW 234
73935: GO 73920
73937: POP
73938: POP
// end ;
73939: PPOPN 2
73941: END
// every 0 0$1 trigger s60 do var i , tmp ;
73942: LD_EXP 102
73946: IFFALSE 74015
73948: GO 73950
73950: DISABLE
73951: LD_INT 0
73953: PPUSH
73954: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73955: LD_ADDR_VAR 0 2
73959: PUSH
73960: LD_INT 22
73962: PUSH
73963: LD_OWVAR 2
73967: PUSH
73968: EMPTY
73969: LIST
73970: LIST
73971: PPUSH
73972: CALL_OW 69
73976: ST_TO_ADDR
// if not tmp then
73977: LD_VAR 0 2
73981: NOT
73982: IFFALSE 73986
// exit ;
73984: GO 74015
// for i in tmp do
73986: LD_ADDR_VAR 0 1
73990: PUSH
73991: LD_VAR 0 2
73995: PUSH
73996: FOR_IN
73997: IFFALSE 74013
// SetLives ( i , 600 ) ;
73999: LD_VAR 0 1
74003: PPUSH
74004: LD_INT 600
74006: PPUSH
74007: CALL_OW 234
74011: GO 73996
74013: POP
74014: POP
// end ;
74015: PPOPN 2
74017: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
74018: LD_INT 0
74020: PPUSH
// case cmd of 301 :
74021: LD_VAR 0 1
74025: PUSH
74026: LD_INT 301
74028: DOUBLE
74029: EQUAL
74030: IFTRUE 74034
74032: GO 74066
74034: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
74035: LD_VAR 0 6
74039: PPUSH
74040: LD_VAR 0 7
74044: PPUSH
74045: LD_VAR 0 8
74049: PPUSH
74050: LD_VAR 0 4
74054: PPUSH
74055: LD_VAR 0 5
74059: PPUSH
74060: CALL 75267 0 5
74064: GO 74187
74066: LD_INT 302
74068: DOUBLE
74069: EQUAL
74070: IFTRUE 74074
74072: GO 74111
74074: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
74075: LD_VAR 0 6
74079: PPUSH
74080: LD_VAR 0 7
74084: PPUSH
74085: LD_VAR 0 8
74089: PPUSH
74090: LD_VAR 0 9
74094: PPUSH
74095: LD_VAR 0 4
74099: PPUSH
74100: LD_VAR 0 5
74104: PPUSH
74105: CALL 75358 0 6
74109: GO 74187
74111: LD_INT 303
74113: DOUBLE
74114: EQUAL
74115: IFTRUE 74119
74117: GO 74156
74119: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
74120: LD_VAR 0 6
74124: PPUSH
74125: LD_VAR 0 7
74129: PPUSH
74130: LD_VAR 0 8
74134: PPUSH
74135: LD_VAR 0 9
74139: PPUSH
74140: LD_VAR 0 4
74144: PPUSH
74145: LD_VAR 0 5
74149: PPUSH
74150: CALL 74192 0 6
74154: GO 74187
74156: LD_INT 304
74158: DOUBLE
74159: EQUAL
74160: IFTRUE 74164
74162: GO 74186
74164: POP
// hHackTeleport ( unit , x , y ) ; end ;
74165: LD_VAR 0 2
74169: PPUSH
74170: LD_VAR 0 4
74174: PPUSH
74175: LD_VAR 0 5
74179: PPUSH
74180: CALL 75951 0 3
74184: GO 74187
74186: POP
// end ;
74187: LD_VAR 0 12
74191: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
74192: LD_INT 0
74194: PPUSH
74195: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
74196: LD_VAR 0 1
74200: PUSH
74201: LD_INT 1
74203: LESS
74204: PUSH
74205: LD_VAR 0 1
74209: PUSH
74210: LD_INT 3
74212: GREATER
74213: OR
74214: PUSH
74215: LD_VAR 0 5
74219: PPUSH
74220: LD_VAR 0 6
74224: PPUSH
74225: CALL_OW 428
74229: OR
74230: IFFALSE 74234
// exit ;
74232: GO 74954
// uc_side := your_side ;
74234: LD_ADDR_OWVAR 20
74238: PUSH
74239: LD_OWVAR 2
74243: ST_TO_ADDR
// uc_nation := nation ;
74244: LD_ADDR_OWVAR 21
74248: PUSH
74249: LD_VAR 0 1
74253: ST_TO_ADDR
// bc_level = 1 ;
74254: LD_ADDR_OWVAR 43
74258: PUSH
74259: LD_INT 1
74261: ST_TO_ADDR
// case btype of 1 :
74262: LD_VAR 0 2
74266: PUSH
74267: LD_INT 1
74269: DOUBLE
74270: EQUAL
74271: IFTRUE 74275
74273: GO 74286
74275: POP
// bc_type := b_depot ; 2 :
74276: LD_ADDR_OWVAR 42
74280: PUSH
74281: LD_INT 0
74283: ST_TO_ADDR
74284: GO 74898
74286: LD_INT 2
74288: DOUBLE
74289: EQUAL
74290: IFTRUE 74294
74292: GO 74305
74294: POP
// bc_type := b_warehouse ; 3 :
74295: LD_ADDR_OWVAR 42
74299: PUSH
74300: LD_INT 1
74302: ST_TO_ADDR
74303: GO 74898
74305: LD_INT 3
74307: DOUBLE
74308: EQUAL
74309: IFTRUE 74313
74311: GO 74324
74313: POP
// bc_type := b_lab ; 4 .. 9 :
74314: LD_ADDR_OWVAR 42
74318: PUSH
74319: LD_INT 6
74321: ST_TO_ADDR
74322: GO 74898
74324: LD_INT 4
74326: DOUBLE
74327: GREATEREQUAL
74328: IFFALSE 74336
74330: LD_INT 9
74332: DOUBLE
74333: LESSEQUAL
74334: IFTRUE 74338
74336: GO 74390
74338: POP
// begin bc_type := b_lab_half ;
74339: LD_ADDR_OWVAR 42
74343: PUSH
74344: LD_INT 7
74346: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
74347: LD_ADDR_OWVAR 44
74351: PUSH
74352: LD_INT 10
74354: PUSH
74355: LD_INT 11
74357: PUSH
74358: LD_INT 12
74360: PUSH
74361: LD_INT 15
74363: PUSH
74364: LD_INT 14
74366: PUSH
74367: LD_INT 13
74369: PUSH
74370: EMPTY
74371: LIST
74372: LIST
74373: LIST
74374: LIST
74375: LIST
74376: LIST
74377: PUSH
74378: LD_VAR 0 2
74382: PUSH
74383: LD_INT 3
74385: MINUS
74386: ARRAY
74387: ST_TO_ADDR
// end ; 10 .. 13 :
74388: GO 74898
74390: LD_INT 10
74392: DOUBLE
74393: GREATEREQUAL
74394: IFFALSE 74402
74396: LD_INT 13
74398: DOUBLE
74399: LESSEQUAL
74400: IFTRUE 74404
74402: GO 74481
74404: POP
// begin bc_type := b_lab_full ;
74405: LD_ADDR_OWVAR 42
74409: PUSH
74410: LD_INT 8
74412: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
74413: LD_ADDR_OWVAR 44
74417: PUSH
74418: LD_INT 10
74420: PUSH
74421: LD_INT 12
74423: PUSH
74424: LD_INT 14
74426: PUSH
74427: LD_INT 13
74429: PUSH
74430: EMPTY
74431: LIST
74432: LIST
74433: LIST
74434: LIST
74435: PUSH
74436: LD_VAR 0 2
74440: PUSH
74441: LD_INT 9
74443: MINUS
74444: ARRAY
74445: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
74446: LD_ADDR_OWVAR 45
74450: PUSH
74451: LD_INT 11
74453: PUSH
74454: LD_INT 15
74456: PUSH
74457: LD_INT 12
74459: PUSH
74460: LD_INT 15
74462: PUSH
74463: EMPTY
74464: LIST
74465: LIST
74466: LIST
74467: LIST
74468: PUSH
74469: LD_VAR 0 2
74473: PUSH
74474: LD_INT 9
74476: MINUS
74477: ARRAY
74478: ST_TO_ADDR
// end ; 14 :
74479: GO 74898
74481: LD_INT 14
74483: DOUBLE
74484: EQUAL
74485: IFTRUE 74489
74487: GO 74500
74489: POP
// bc_type := b_workshop ; 15 :
74490: LD_ADDR_OWVAR 42
74494: PUSH
74495: LD_INT 2
74497: ST_TO_ADDR
74498: GO 74898
74500: LD_INT 15
74502: DOUBLE
74503: EQUAL
74504: IFTRUE 74508
74506: GO 74519
74508: POP
// bc_type := b_factory ; 16 :
74509: LD_ADDR_OWVAR 42
74513: PUSH
74514: LD_INT 3
74516: ST_TO_ADDR
74517: GO 74898
74519: LD_INT 16
74521: DOUBLE
74522: EQUAL
74523: IFTRUE 74527
74525: GO 74538
74527: POP
// bc_type := b_ext_gun ; 17 :
74528: LD_ADDR_OWVAR 42
74532: PUSH
74533: LD_INT 17
74535: ST_TO_ADDR
74536: GO 74898
74538: LD_INT 17
74540: DOUBLE
74541: EQUAL
74542: IFTRUE 74546
74544: GO 74574
74546: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
74547: LD_ADDR_OWVAR 42
74551: PUSH
74552: LD_INT 19
74554: PUSH
74555: LD_INT 23
74557: PUSH
74558: LD_INT 19
74560: PUSH
74561: EMPTY
74562: LIST
74563: LIST
74564: LIST
74565: PUSH
74566: LD_VAR 0 1
74570: ARRAY
74571: ST_TO_ADDR
74572: GO 74898
74574: LD_INT 18
74576: DOUBLE
74577: EQUAL
74578: IFTRUE 74582
74580: GO 74593
74582: POP
// bc_type := b_ext_radar ; 19 :
74583: LD_ADDR_OWVAR 42
74587: PUSH
74588: LD_INT 20
74590: ST_TO_ADDR
74591: GO 74898
74593: LD_INT 19
74595: DOUBLE
74596: EQUAL
74597: IFTRUE 74601
74599: GO 74612
74601: POP
// bc_type := b_ext_radio ; 20 :
74602: LD_ADDR_OWVAR 42
74606: PUSH
74607: LD_INT 22
74609: ST_TO_ADDR
74610: GO 74898
74612: LD_INT 20
74614: DOUBLE
74615: EQUAL
74616: IFTRUE 74620
74618: GO 74631
74620: POP
// bc_type := b_ext_siberium ; 21 :
74621: LD_ADDR_OWVAR 42
74625: PUSH
74626: LD_INT 21
74628: ST_TO_ADDR
74629: GO 74898
74631: LD_INT 21
74633: DOUBLE
74634: EQUAL
74635: IFTRUE 74639
74637: GO 74650
74639: POP
// bc_type := b_ext_computer ; 22 :
74640: LD_ADDR_OWVAR 42
74644: PUSH
74645: LD_INT 24
74647: ST_TO_ADDR
74648: GO 74898
74650: LD_INT 22
74652: DOUBLE
74653: EQUAL
74654: IFTRUE 74658
74656: GO 74669
74658: POP
// bc_type := b_ext_track ; 23 :
74659: LD_ADDR_OWVAR 42
74663: PUSH
74664: LD_INT 16
74666: ST_TO_ADDR
74667: GO 74898
74669: LD_INT 23
74671: DOUBLE
74672: EQUAL
74673: IFTRUE 74677
74675: GO 74688
74677: POP
// bc_type := b_ext_laser ; 24 :
74678: LD_ADDR_OWVAR 42
74682: PUSH
74683: LD_INT 25
74685: ST_TO_ADDR
74686: GO 74898
74688: LD_INT 24
74690: DOUBLE
74691: EQUAL
74692: IFTRUE 74696
74694: GO 74707
74696: POP
// bc_type := b_control_tower ; 25 :
74697: LD_ADDR_OWVAR 42
74701: PUSH
74702: LD_INT 36
74704: ST_TO_ADDR
74705: GO 74898
74707: LD_INT 25
74709: DOUBLE
74710: EQUAL
74711: IFTRUE 74715
74713: GO 74726
74715: POP
// bc_type := b_breastwork ; 26 :
74716: LD_ADDR_OWVAR 42
74720: PUSH
74721: LD_INT 31
74723: ST_TO_ADDR
74724: GO 74898
74726: LD_INT 26
74728: DOUBLE
74729: EQUAL
74730: IFTRUE 74734
74732: GO 74745
74734: POP
// bc_type := b_bunker ; 27 :
74735: LD_ADDR_OWVAR 42
74739: PUSH
74740: LD_INT 32
74742: ST_TO_ADDR
74743: GO 74898
74745: LD_INT 27
74747: DOUBLE
74748: EQUAL
74749: IFTRUE 74753
74751: GO 74764
74753: POP
// bc_type := b_turret ; 28 :
74754: LD_ADDR_OWVAR 42
74758: PUSH
74759: LD_INT 33
74761: ST_TO_ADDR
74762: GO 74898
74764: LD_INT 28
74766: DOUBLE
74767: EQUAL
74768: IFTRUE 74772
74770: GO 74783
74772: POP
// bc_type := b_armoury ; 29 :
74773: LD_ADDR_OWVAR 42
74777: PUSH
74778: LD_INT 4
74780: ST_TO_ADDR
74781: GO 74898
74783: LD_INT 29
74785: DOUBLE
74786: EQUAL
74787: IFTRUE 74791
74789: GO 74802
74791: POP
// bc_type := b_barracks ; 30 :
74792: LD_ADDR_OWVAR 42
74796: PUSH
74797: LD_INT 5
74799: ST_TO_ADDR
74800: GO 74898
74802: LD_INT 30
74804: DOUBLE
74805: EQUAL
74806: IFTRUE 74810
74808: GO 74821
74810: POP
// bc_type := b_solar_power ; 31 :
74811: LD_ADDR_OWVAR 42
74815: PUSH
74816: LD_INT 27
74818: ST_TO_ADDR
74819: GO 74898
74821: LD_INT 31
74823: DOUBLE
74824: EQUAL
74825: IFTRUE 74829
74827: GO 74840
74829: POP
// bc_type := b_oil_power ; 32 :
74830: LD_ADDR_OWVAR 42
74834: PUSH
74835: LD_INT 26
74837: ST_TO_ADDR
74838: GO 74898
74840: LD_INT 32
74842: DOUBLE
74843: EQUAL
74844: IFTRUE 74848
74846: GO 74859
74848: POP
// bc_type := b_siberite_power ; 33 :
74849: LD_ADDR_OWVAR 42
74853: PUSH
74854: LD_INT 28
74856: ST_TO_ADDR
74857: GO 74898
74859: LD_INT 33
74861: DOUBLE
74862: EQUAL
74863: IFTRUE 74867
74865: GO 74878
74867: POP
// bc_type := b_oil_mine ; 34 :
74868: LD_ADDR_OWVAR 42
74872: PUSH
74873: LD_INT 29
74875: ST_TO_ADDR
74876: GO 74898
74878: LD_INT 34
74880: DOUBLE
74881: EQUAL
74882: IFTRUE 74886
74884: GO 74897
74886: POP
// bc_type := b_siberite_mine ; end ;
74887: LD_ADDR_OWVAR 42
74891: PUSH
74892: LD_INT 30
74894: ST_TO_ADDR
74895: GO 74898
74897: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
74898: LD_ADDR_VAR 0 8
74902: PUSH
74903: LD_VAR 0 5
74907: PPUSH
74908: LD_VAR 0 6
74912: PPUSH
74913: LD_VAR 0 3
74917: PPUSH
74918: CALL_OW 47
74922: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
74923: LD_OWVAR 42
74927: PUSH
74928: LD_INT 32
74930: PUSH
74931: LD_INT 33
74933: PUSH
74934: EMPTY
74935: LIST
74936: LIST
74937: IN
74938: IFFALSE 74954
// PlaceWeaponTurret ( b , weapon ) ;
74940: LD_VAR 0 8
74944: PPUSH
74945: LD_VAR 0 4
74949: PPUSH
74950: CALL_OW 431
// end ;
74954: LD_VAR 0 7
74958: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
74959: LD_INT 0
74961: PPUSH
74962: PPUSH
74963: PPUSH
74964: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
74965: LD_ADDR_VAR 0 4
74969: PUSH
74970: LD_INT 22
74972: PUSH
74973: LD_OWVAR 2
74977: PUSH
74978: EMPTY
74979: LIST
74980: LIST
74981: PUSH
74982: LD_INT 2
74984: PUSH
74985: LD_INT 30
74987: PUSH
74988: LD_INT 0
74990: PUSH
74991: EMPTY
74992: LIST
74993: LIST
74994: PUSH
74995: LD_INT 30
74997: PUSH
74998: LD_INT 1
75000: PUSH
75001: EMPTY
75002: LIST
75003: LIST
75004: PUSH
75005: EMPTY
75006: LIST
75007: LIST
75008: LIST
75009: PUSH
75010: EMPTY
75011: LIST
75012: LIST
75013: PPUSH
75014: CALL_OW 69
75018: ST_TO_ADDR
// if not tmp then
75019: LD_VAR 0 4
75023: NOT
75024: IFFALSE 75028
// exit ;
75026: GO 75087
// for i in tmp do
75028: LD_ADDR_VAR 0 2
75032: PUSH
75033: LD_VAR 0 4
75037: PUSH
75038: FOR_IN
75039: IFFALSE 75085
// for j = 1 to 3 do
75041: LD_ADDR_VAR 0 3
75045: PUSH
75046: DOUBLE
75047: LD_INT 1
75049: DEC
75050: ST_TO_ADDR
75051: LD_INT 3
75053: PUSH
75054: FOR_TO
75055: IFFALSE 75081
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
75057: LD_VAR 0 2
75061: PPUSH
75062: CALL_OW 274
75066: PPUSH
75067: LD_VAR 0 3
75071: PPUSH
75072: LD_INT 99999
75074: PPUSH
75075: CALL_OW 277
75079: GO 75054
75081: POP
75082: POP
75083: GO 75038
75085: POP
75086: POP
// end ;
75087: LD_VAR 0 1
75091: RET
// export function hHackSetLevel10 ; var i , j ; begin
75092: LD_INT 0
75094: PPUSH
75095: PPUSH
75096: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
75097: LD_ADDR_VAR 0 2
75101: PUSH
75102: LD_INT 21
75104: PUSH
75105: LD_INT 1
75107: PUSH
75108: EMPTY
75109: LIST
75110: LIST
75111: PPUSH
75112: CALL_OW 69
75116: PUSH
75117: FOR_IN
75118: IFFALSE 75170
// if IsSelected ( i ) then
75120: LD_VAR 0 2
75124: PPUSH
75125: CALL_OW 306
75129: IFFALSE 75168
// begin for j := 1 to 4 do
75131: LD_ADDR_VAR 0 3
75135: PUSH
75136: DOUBLE
75137: LD_INT 1
75139: DEC
75140: ST_TO_ADDR
75141: LD_INT 4
75143: PUSH
75144: FOR_TO
75145: IFFALSE 75166
// SetSkill ( i , j , 10 ) ;
75147: LD_VAR 0 2
75151: PPUSH
75152: LD_VAR 0 3
75156: PPUSH
75157: LD_INT 10
75159: PPUSH
75160: CALL_OW 237
75164: GO 75144
75166: POP
75167: POP
// end ;
75168: GO 75117
75170: POP
75171: POP
// end ;
75172: LD_VAR 0 1
75176: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
75177: LD_INT 0
75179: PPUSH
75180: PPUSH
75181: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
75182: LD_ADDR_VAR 0 2
75186: PUSH
75187: LD_INT 22
75189: PUSH
75190: LD_OWVAR 2
75194: PUSH
75195: EMPTY
75196: LIST
75197: LIST
75198: PUSH
75199: LD_INT 21
75201: PUSH
75202: LD_INT 1
75204: PUSH
75205: EMPTY
75206: LIST
75207: LIST
75208: PUSH
75209: EMPTY
75210: LIST
75211: LIST
75212: PPUSH
75213: CALL_OW 69
75217: PUSH
75218: FOR_IN
75219: IFFALSE 75260
// begin for j := 1 to 4 do
75221: LD_ADDR_VAR 0 3
75225: PUSH
75226: DOUBLE
75227: LD_INT 1
75229: DEC
75230: ST_TO_ADDR
75231: LD_INT 4
75233: PUSH
75234: FOR_TO
75235: IFFALSE 75256
// SetSkill ( i , j , 10 ) ;
75237: LD_VAR 0 2
75241: PPUSH
75242: LD_VAR 0 3
75246: PPUSH
75247: LD_INT 10
75249: PPUSH
75250: CALL_OW 237
75254: GO 75234
75256: POP
75257: POP
// end ;
75258: GO 75218
75260: POP
75261: POP
// end ;
75262: LD_VAR 0 1
75266: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
75267: LD_INT 0
75269: PPUSH
// uc_side := your_side ;
75270: LD_ADDR_OWVAR 20
75274: PUSH
75275: LD_OWVAR 2
75279: ST_TO_ADDR
// uc_nation := nation ;
75280: LD_ADDR_OWVAR 21
75284: PUSH
75285: LD_VAR 0 1
75289: ST_TO_ADDR
// InitHc ;
75290: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
75294: LD_INT 0
75296: PPUSH
75297: LD_VAR 0 2
75301: PPUSH
75302: LD_VAR 0 3
75306: PPUSH
75307: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
75311: LD_VAR 0 4
75315: PPUSH
75316: LD_VAR 0 5
75320: PPUSH
75321: CALL_OW 428
75325: PUSH
75326: LD_INT 0
75328: EQUAL
75329: IFFALSE 75353
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
75331: CALL_OW 44
75335: PPUSH
75336: LD_VAR 0 4
75340: PPUSH
75341: LD_VAR 0 5
75345: PPUSH
75346: LD_INT 1
75348: PPUSH
75349: CALL_OW 48
// end ;
75353: LD_VAR 0 6
75357: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
75358: LD_INT 0
75360: PPUSH
75361: PPUSH
// uc_side := your_side ;
75362: LD_ADDR_OWVAR 20
75366: PUSH
75367: LD_OWVAR 2
75371: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
75372: LD_VAR 0 1
75376: PUSH
75377: LD_INT 1
75379: PUSH
75380: LD_INT 2
75382: PUSH
75383: LD_INT 3
75385: PUSH
75386: LD_INT 4
75388: PUSH
75389: LD_INT 5
75391: PUSH
75392: EMPTY
75393: LIST
75394: LIST
75395: LIST
75396: LIST
75397: LIST
75398: IN
75399: IFFALSE 75411
// uc_nation := nation_american else
75401: LD_ADDR_OWVAR 21
75405: PUSH
75406: LD_INT 1
75408: ST_TO_ADDR
75409: GO 75454
// if chassis in [ 11 , 12 , 13 , 14 ] then
75411: LD_VAR 0 1
75415: PUSH
75416: LD_INT 11
75418: PUSH
75419: LD_INT 12
75421: PUSH
75422: LD_INT 13
75424: PUSH
75425: LD_INT 14
75427: PUSH
75428: EMPTY
75429: LIST
75430: LIST
75431: LIST
75432: LIST
75433: IN
75434: IFFALSE 75446
// uc_nation := nation_arabian else
75436: LD_ADDR_OWVAR 21
75440: PUSH
75441: LD_INT 2
75443: ST_TO_ADDR
75444: GO 75454
// uc_nation := nation_russian ;
75446: LD_ADDR_OWVAR 21
75450: PUSH
75451: LD_INT 3
75453: ST_TO_ADDR
// vc_chassis := chassis ;
75454: LD_ADDR_OWVAR 37
75458: PUSH
75459: LD_VAR 0 1
75463: ST_TO_ADDR
// vc_engine := engine ;
75464: LD_ADDR_OWVAR 39
75468: PUSH
75469: LD_VAR 0 2
75473: ST_TO_ADDR
// vc_control := control ;
75474: LD_ADDR_OWVAR 38
75478: PUSH
75479: LD_VAR 0 3
75483: ST_TO_ADDR
// vc_weapon := weapon ;
75484: LD_ADDR_OWVAR 40
75488: PUSH
75489: LD_VAR 0 4
75493: ST_TO_ADDR
// un := CreateVehicle ;
75494: LD_ADDR_VAR 0 8
75498: PUSH
75499: CALL_OW 45
75503: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
75504: LD_VAR 0 8
75508: PPUSH
75509: LD_INT 0
75511: PPUSH
75512: LD_INT 5
75514: PPUSH
75515: CALL_OW 12
75519: PPUSH
75520: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
75524: LD_VAR 0 8
75528: PPUSH
75529: LD_VAR 0 5
75533: PPUSH
75534: LD_VAR 0 6
75538: PPUSH
75539: LD_INT 1
75541: PPUSH
75542: CALL_OW 48
// end ;
75546: LD_VAR 0 7
75550: RET
// export hInvincible ; every 1 do
75551: GO 75553
75553: DISABLE
// hInvincible := [ ] ;
75554: LD_ADDR_EXP 103
75558: PUSH
75559: EMPTY
75560: ST_TO_ADDR
75561: END
// every 10 do var i ;
75562: GO 75564
75564: DISABLE
75565: LD_INT 0
75567: PPUSH
// begin enable ;
75568: ENABLE
// if not hInvincible then
75569: LD_EXP 103
75573: NOT
75574: IFFALSE 75578
// exit ;
75576: GO 75622
// for i in hInvincible do
75578: LD_ADDR_VAR 0 1
75582: PUSH
75583: LD_EXP 103
75587: PUSH
75588: FOR_IN
75589: IFFALSE 75620
// if GetLives ( i ) < 1000 then
75591: LD_VAR 0 1
75595: PPUSH
75596: CALL_OW 256
75600: PUSH
75601: LD_INT 1000
75603: LESS
75604: IFFALSE 75618
// SetLives ( i , 1000 ) ;
75606: LD_VAR 0 1
75610: PPUSH
75611: LD_INT 1000
75613: PPUSH
75614: CALL_OW 234
75618: GO 75588
75620: POP
75621: POP
// end ;
75622: PPOPN 1
75624: END
// export function hHackInvincible ; var i ; begin
75625: LD_INT 0
75627: PPUSH
75628: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
75629: LD_ADDR_VAR 0 2
75633: PUSH
75634: LD_INT 2
75636: PUSH
75637: LD_INT 21
75639: PUSH
75640: LD_INT 1
75642: PUSH
75643: EMPTY
75644: LIST
75645: LIST
75646: PUSH
75647: LD_INT 21
75649: PUSH
75650: LD_INT 2
75652: PUSH
75653: EMPTY
75654: LIST
75655: LIST
75656: PUSH
75657: EMPTY
75658: LIST
75659: LIST
75660: LIST
75661: PPUSH
75662: CALL_OW 69
75666: PUSH
75667: FOR_IN
75668: IFFALSE 75729
// if IsSelected ( i ) then
75670: LD_VAR 0 2
75674: PPUSH
75675: CALL_OW 306
75679: IFFALSE 75727
// begin if i in hInvincible then
75681: LD_VAR 0 2
75685: PUSH
75686: LD_EXP 103
75690: IN
75691: IFFALSE 75711
// hInvincible := hInvincible diff i else
75693: LD_ADDR_EXP 103
75697: PUSH
75698: LD_EXP 103
75702: PUSH
75703: LD_VAR 0 2
75707: DIFF
75708: ST_TO_ADDR
75709: GO 75727
// hInvincible := hInvincible union i ;
75711: LD_ADDR_EXP 103
75715: PUSH
75716: LD_EXP 103
75720: PUSH
75721: LD_VAR 0 2
75725: UNION
75726: ST_TO_ADDR
// end ;
75727: GO 75667
75729: POP
75730: POP
// end ;
75731: LD_VAR 0 1
75735: RET
// export function hHackInvisible ; var i , j ; begin
75736: LD_INT 0
75738: PPUSH
75739: PPUSH
75740: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
75741: LD_ADDR_VAR 0 2
75745: PUSH
75746: LD_INT 21
75748: PUSH
75749: LD_INT 1
75751: PUSH
75752: EMPTY
75753: LIST
75754: LIST
75755: PPUSH
75756: CALL_OW 69
75760: PUSH
75761: FOR_IN
75762: IFFALSE 75786
// if IsSelected ( i ) then
75764: LD_VAR 0 2
75768: PPUSH
75769: CALL_OW 306
75773: IFFALSE 75784
// ComForceInvisible ( i ) ;
75775: LD_VAR 0 2
75779: PPUSH
75780: CALL_OW 496
75784: GO 75761
75786: POP
75787: POP
// end ;
75788: LD_VAR 0 1
75792: RET
// export function hHackChangeYourSide ; begin
75793: LD_INT 0
75795: PPUSH
// if your_side = 8 then
75796: LD_OWVAR 2
75800: PUSH
75801: LD_INT 8
75803: EQUAL
75804: IFFALSE 75816
// your_side := 0 else
75806: LD_ADDR_OWVAR 2
75810: PUSH
75811: LD_INT 0
75813: ST_TO_ADDR
75814: GO 75830
// your_side := your_side + 1 ;
75816: LD_ADDR_OWVAR 2
75820: PUSH
75821: LD_OWVAR 2
75825: PUSH
75826: LD_INT 1
75828: PLUS
75829: ST_TO_ADDR
// end ;
75830: LD_VAR 0 1
75834: RET
// export function hHackChangeUnitSide ; var i , j ; begin
75835: LD_INT 0
75837: PPUSH
75838: PPUSH
75839: PPUSH
// for i in all_units do
75840: LD_ADDR_VAR 0 2
75844: PUSH
75845: LD_OWVAR 3
75849: PUSH
75850: FOR_IN
75851: IFFALSE 75929
// if IsSelected ( i ) then
75853: LD_VAR 0 2
75857: PPUSH
75858: CALL_OW 306
75862: IFFALSE 75927
// begin j := GetSide ( i ) ;
75864: LD_ADDR_VAR 0 3
75868: PUSH
75869: LD_VAR 0 2
75873: PPUSH
75874: CALL_OW 255
75878: ST_TO_ADDR
// if j = 8 then
75879: LD_VAR 0 3
75883: PUSH
75884: LD_INT 8
75886: EQUAL
75887: IFFALSE 75899
// j := 0 else
75889: LD_ADDR_VAR 0 3
75893: PUSH
75894: LD_INT 0
75896: ST_TO_ADDR
75897: GO 75913
// j := j + 1 ;
75899: LD_ADDR_VAR 0 3
75903: PUSH
75904: LD_VAR 0 3
75908: PUSH
75909: LD_INT 1
75911: PLUS
75912: ST_TO_ADDR
// SetSide ( i , j ) ;
75913: LD_VAR 0 2
75917: PPUSH
75918: LD_VAR 0 3
75922: PPUSH
75923: CALL_OW 235
// end ;
75927: GO 75850
75929: POP
75930: POP
// end ;
75931: LD_VAR 0 1
75935: RET
// export function hHackFog ; begin
75936: LD_INT 0
75938: PPUSH
// FogOff ( true ) ;
75939: LD_INT 1
75941: PPUSH
75942: CALL_OW 344
// end ;
75946: LD_VAR 0 1
75950: RET
// export function hHackTeleport ( unit , x , y ) ; begin
75951: LD_INT 0
75953: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
75954: LD_VAR 0 1
75958: PPUSH
75959: LD_VAR 0 2
75963: PPUSH
75964: LD_VAR 0 3
75968: PPUSH
75969: LD_INT 1
75971: PPUSH
75972: LD_INT 1
75974: PPUSH
75975: CALL_OW 483
// CenterOnXY ( x , y ) ;
75979: LD_VAR 0 2
75983: PPUSH
75984: LD_VAR 0 3
75988: PPUSH
75989: CALL_OW 84
// end ;
75993: LD_VAR 0 4
75997: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
75998: LD_INT 0
76000: PPUSH
76001: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
76002: LD_VAR 0 1
76006: NOT
76007: PUSH
76008: LD_VAR 0 2
76012: PPUSH
76013: LD_VAR 0 3
76017: PPUSH
76018: CALL_OW 488
76022: NOT
76023: OR
76024: PUSH
76025: LD_VAR 0 1
76029: PPUSH
76030: CALL_OW 266
76034: PUSH
76035: LD_INT 3
76037: NONEQUAL
76038: PUSH
76039: LD_VAR 0 1
76043: PPUSH
76044: CALL_OW 247
76048: PUSH
76049: LD_INT 1
76051: EQUAL
76052: NOT
76053: AND
76054: OR
76055: IFFALSE 76059
// exit ;
76057: GO 76208
// if GetType ( factory ) = unit_human then
76059: LD_VAR 0 1
76063: PPUSH
76064: CALL_OW 247
76068: PUSH
76069: LD_INT 1
76071: EQUAL
76072: IFFALSE 76089
// factory := IsInUnit ( factory ) ;
76074: LD_ADDR_VAR 0 1
76078: PUSH
76079: LD_VAR 0 1
76083: PPUSH
76084: CALL_OW 310
76088: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
76089: LD_VAR 0 1
76093: PPUSH
76094: CALL_OW 266
76098: PUSH
76099: LD_INT 3
76101: NONEQUAL
76102: IFFALSE 76106
// exit ;
76104: GO 76208
// if HexInfo ( x , y ) = factory then
76106: LD_VAR 0 2
76110: PPUSH
76111: LD_VAR 0 3
76115: PPUSH
76116: CALL_OW 428
76120: PUSH
76121: LD_VAR 0 1
76125: EQUAL
76126: IFFALSE 76153
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
76128: LD_ADDR_EXP 104
76132: PUSH
76133: LD_EXP 104
76137: PPUSH
76138: LD_VAR 0 1
76142: PPUSH
76143: LD_INT 0
76145: PPUSH
76146: CALL_OW 1
76150: ST_TO_ADDR
76151: GO 76204
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
76153: LD_ADDR_EXP 104
76157: PUSH
76158: LD_EXP 104
76162: PPUSH
76163: LD_VAR 0 1
76167: PPUSH
76168: LD_VAR 0 1
76172: PPUSH
76173: CALL_OW 255
76177: PUSH
76178: LD_VAR 0 1
76182: PUSH
76183: LD_VAR 0 2
76187: PUSH
76188: LD_VAR 0 3
76192: PUSH
76193: EMPTY
76194: LIST
76195: LIST
76196: LIST
76197: LIST
76198: PPUSH
76199: CALL_OW 1
76203: ST_TO_ADDR
// UpdateFactoryWaypoints ;
76204: CALL 76213 0 0
// end ;
76208: LD_VAR 0 4
76212: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
76213: LD_INT 0
76215: PPUSH
76216: PPUSH
76217: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
76218: LD_STRING resetFactoryWaypoint();
76220: PPUSH
76221: CALL_OW 559
// if factoryWaypoints then
76225: LD_EXP 104
76229: IFFALSE 76355
// begin list := PrepareArray ( factoryWaypoints ) ;
76231: LD_ADDR_VAR 0 3
76235: PUSH
76236: LD_EXP 104
76240: PPUSH
76241: CALL 56868 0 1
76245: ST_TO_ADDR
// for i := 1 to list do
76246: LD_ADDR_VAR 0 2
76250: PUSH
76251: DOUBLE
76252: LD_INT 1
76254: DEC
76255: ST_TO_ADDR
76256: LD_VAR 0 3
76260: PUSH
76261: FOR_TO
76262: IFFALSE 76353
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
76264: LD_STRING setFactoryWaypointXY(
76266: PUSH
76267: LD_VAR 0 3
76271: PUSH
76272: LD_VAR 0 2
76276: ARRAY
76277: PUSH
76278: LD_INT 1
76280: ARRAY
76281: STR
76282: PUSH
76283: LD_STRING ,
76285: STR
76286: PUSH
76287: LD_VAR 0 3
76291: PUSH
76292: LD_VAR 0 2
76296: ARRAY
76297: PUSH
76298: LD_INT 2
76300: ARRAY
76301: STR
76302: PUSH
76303: LD_STRING ,
76305: STR
76306: PUSH
76307: LD_VAR 0 3
76311: PUSH
76312: LD_VAR 0 2
76316: ARRAY
76317: PUSH
76318: LD_INT 3
76320: ARRAY
76321: STR
76322: PUSH
76323: LD_STRING ,
76325: STR
76326: PUSH
76327: LD_VAR 0 3
76331: PUSH
76332: LD_VAR 0 2
76336: ARRAY
76337: PUSH
76338: LD_INT 4
76340: ARRAY
76341: STR
76342: PUSH
76343: LD_STRING )
76345: STR
76346: PPUSH
76347: CALL_OW 559
76351: GO 76261
76353: POP
76354: POP
// end ; end ;
76355: LD_VAR 0 1
76359: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
76360: LD_INT 0
76362: PPUSH
// if HexInfo ( x , y ) = warehouse then
76363: LD_VAR 0 2
76367: PPUSH
76368: LD_VAR 0 3
76372: PPUSH
76373: CALL_OW 428
76377: PUSH
76378: LD_VAR 0 1
76382: EQUAL
76383: IFFALSE 76410
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
76385: LD_ADDR_EXP 105
76389: PUSH
76390: LD_EXP 105
76394: PPUSH
76395: LD_VAR 0 1
76399: PPUSH
76400: LD_INT 0
76402: PPUSH
76403: CALL_OW 1
76407: ST_TO_ADDR
76408: GO 76461
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
76410: LD_ADDR_EXP 105
76414: PUSH
76415: LD_EXP 105
76419: PPUSH
76420: LD_VAR 0 1
76424: PPUSH
76425: LD_VAR 0 1
76429: PPUSH
76430: CALL_OW 255
76434: PUSH
76435: LD_VAR 0 1
76439: PUSH
76440: LD_VAR 0 2
76444: PUSH
76445: LD_VAR 0 3
76449: PUSH
76450: EMPTY
76451: LIST
76452: LIST
76453: LIST
76454: LIST
76455: PPUSH
76456: CALL_OW 1
76460: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
76461: CALL 76470 0 0
// end ;
76465: LD_VAR 0 4
76469: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
76470: LD_INT 0
76472: PPUSH
76473: PPUSH
76474: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
76475: LD_STRING resetWarehouseGatheringPoints();
76477: PPUSH
76478: CALL_OW 559
// if warehouseGatheringPoints then
76482: LD_EXP 105
76486: IFFALSE 76612
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
76488: LD_ADDR_VAR 0 3
76492: PUSH
76493: LD_EXP 105
76497: PPUSH
76498: CALL 56868 0 1
76502: ST_TO_ADDR
// for i := 1 to list do
76503: LD_ADDR_VAR 0 2
76507: PUSH
76508: DOUBLE
76509: LD_INT 1
76511: DEC
76512: ST_TO_ADDR
76513: LD_VAR 0 3
76517: PUSH
76518: FOR_TO
76519: IFFALSE 76610
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
76521: LD_STRING setWarehouseGatheringPointXY(
76523: PUSH
76524: LD_VAR 0 3
76528: PUSH
76529: LD_VAR 0 2
76533: ARRAY
76534: PUSH
76535: LD_INT 1
76537: ARRAY
76538: STR
76539: PUSH
76540: LD_STRING ,
76542: STR
76543: PUSH
76544: LD_VAR 0 3
76548: PUSH
76549: LD_VAR 0 2
76553: ARRAY
76554: PUSH
76555: LD_INT 2
76557: ARRAY
76558: STR
76559: PUSH
76560: LD_STRING ,
76562: STR
76563: PUSH
76564: LD_VAR 0 3
76568: PUSH
76569: LD_VAR 0 2
76573: ARRAY
76574: PUSH
76575: LD_INT 3
76577: ARRAY
76578: STR
76579: PUSH
76580: LD_STRING ,
76582: STR
76583: PUSH
76584: LD_VAR 0 3
76588: PUSH
76589: LD_VAR 0 2
76593: ARRAY
76594: PUSH
76595: LD_INT 4
76597: ARRAY
76598: STR
76599: PUSH
76600: LD_STRING )
76602: STR
76603: PPUSH
76604: CALL_OW 559
76608: GO 76518
76610: POP
76611: POP
// end ; end ;
76612: LD_VAR 0 1
76616: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
76617: LD_EXP 105
76621: IFFALSE 77306
76623: GO 76625
76625: DISABLE
76626: LD_INT 0
76628: PPUSH
76629: PPUSH
76630: PPUSH
76631: PPUSH
76632: PPUSH
76633: PPUSH
76634: PPUSH
76635: PPUSH
76636: PPUSH
// begin enable ;
76637: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
76638: LD_ADDR_VAR 0 3
76642: PUSH
76643: LD_EXP 105
76647: PPUSH
76648: CALL 56868 0 1
76652: ST_TO_ADDR
// if not list then
76653: LD_VAR 0 3
76657: NOT
76658: IFFALSE 76662
// exit ;
76660: GO 77306
// for i := 1 to list do
76662: LD_ADDR_VAR 0 1
76666: PUSH
76667: DOUBLE
76668: LD_INT 1
76670: DEC
76671: ST_TO_ADDR
76672: LD_VAR 0 3
76676: PUSH
76677: FOR_TO
76678: IFFALSE 77304
// begin depot := list [ i ] [ 2 ] ;
76680: LD_ADDR_VAR 0 8
76684: PUSH
76685: LD_VAR 0 3
76689: PUSH
76690: LD_VAR 0 1
76694: ARRAY
76695: PUSH
76696: LD_INT 2
76698: ARRAY
76699: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
76700: LD_ADDR_VAR 0 5
76704: PUSH
76705: LD_VAR 0 3
76709: PUSH
76710: LD_VAR 0 1
76714: ARRAY
76715: PUSH
76716: LD_INT 1
76718: ARRAY
76719: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
76720: LD_VAR 0 8
76724: PPUSH
76725: CALL_OW 301
76729: PUSH
76730: LD_VAR 0 5
76734: PUSH
76735: LD_VAR 0 8
76739: PPUSH
76740: CALL_OW 255
76744: NONEQUAL
76745: OR
76746: IFFALSE 76775
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
76748: LD_ADDR_EXP 105
76752: PUSH
76753: LD_EXP 105
76757: PPUSH
76758: LD_VAR 0 8
76762: PPUSH
76763: LD_INT 0
76765: PPUSH
76766: CALL_OW 1
76770: ST_TO_ADDR
// exit ;
76771: POP
76772: POP
76773: GO 77306
// end ; x := list [ i ] [ 3 ] ;
76775: LD_ADDR_VAR 0 6
76779: PUSH
76780: LD_VAR 0 3
76784: PUSH
76785: LD_VAR 0 1
76789: ARRAY
76790: PUSH
76791: LD_INT 3
76793: ARRAY
76794: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
76795: LD_ADDR_VAR 0 7
76799: PUSH
76800: LD_VAR 0 3
76804: PUSH
76805: LD_VAR 0 1
76809: ARRAY
76810: PUSH
76811: LD_INT 4
76813: ARRAY
76814: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
76815: LD_ADDR_VAR 0 9
76819: PUSH
76820: LD_VAR 0 6
76824: PPUSH
76825: LD_VAR 0 7
76829: PPUSH
76830: LD_INT 16
76832: PPUSH
76833: CALL 55456 0 3
76837: ST_TO_ADDR
// if not cratesNearbyPoint then
76838: LD_VAR 0 9
76842: NOT
76843: IFFALSE 76849
// exit ;
76845: POP
76846: POP
76847: GO 77306
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
76849: LD_ADDR_VAR 0 4
76853: PUSH
76854: LD_INT 22
76856: PUSH
76857: LD_VAR 0 5
76861: PUSH
76862: EMPTY
76863: LIST
76864: LIST
76865: PUSH
76866: LD_INT 3
76868: PUSH
76869: LD_INT 60
76871: PUSH
76872: EMPTY
76873: LIST
76874: PUSH
76875: EMPTY
76876: LIST
76877: LIST
76878: PUSH
76879: LD_INT 91
76881: PUSH
76882: LD_VAR 0 8
76886: PUSH
76887: LD_INT 6
76889: PUSH
76890: EMPTY
76891: LIST
76892: LIST
76893: LIST
76894: PUSH
76895: LD_INT 2
76897: PUSH
76898: LD_INT 25
76900: PUSH
76901: LD_INT 2
76903: PUSH
76904: EMPTY
76905: LIST
76906: LIST
76907: PUSH
76908: LD_INT 25
76910: PUSH
76911: LD_INT 16
76913: PUSH
76914: EMPTY
76915: LIST
76916: LIST
76917: PUSH
76918: EMPTY
76919: LIST
76920: LIST
76921: LIST
76922: PUSH
76923: EMPTY
76924: LIST
76925: LIST
76926: LIST
76927: LIST
76928: PPUSH
76929: CALL_OW 69
76933: PUSH
76934: LD_VAR 0 8
76938: PPUSH
76939: CALL_OW 313
76943: PPUSH
76944: LD_INT 3
76946: PUSH
76947: LD_INT 60
76949: PUSH
76950: EMPTY
76951: LIST
76952: PUSH
76953: EMPTY
76954: LIST
76955: LIST
76956: PUSH
76957: LD_INT 2
76959: PUSH
76960: LD_INT 25
76962: PUSH
76963: LD_INT 2
76965: PUSH
76966: EMPTY
76967: LIST
76968: LIST
76969: PUSH
76970: LD_INT 25
76972: PUSH
76973: LD_INT 16
76975: PUSH
76976: EMPTY
76977: LIST
76978: LIST
76979: PUSH
76980: EMPTY
76981: LIST
76982: LIST
76983: LIST
76984: PUSH
76985: EMPTY
76986: LIST
76987: LIST
76988: PPUSH
76989: CALL_OW 72
76993: UNION
76994: ST_TO_ADDR
// if tmp then
76995: LD_VAR 0 4
76999: IFFALSE 77079
// begin tmp := ShrinkArray ( tmp , 3 ) ;
77001: LD_ADDR_VAR 0 4
77005: PUSH
77006: LD_VAR 0 4
77010: PPUSH
77011: LD_INT 3
77013: PPUSH
77014: CALL 53425 0 2
77018: ST_TO_ADDR
// for j in tmp do
77019: LD_ADDR_VAR 0 2
77023: PUSH
77024: LD_VAR 0 4
77028: PUSH
77029: FOR_IN
77030: IFFALSE 77073
// begin if IsInUnit ( j ) then
77032: LD_VAR 0 2
77036: PPUSH
77037: CALL_OW 310
77041: IFFALSE 77052
// ComExit ( j ) ;
77043: LD_VAR 0 2
77047: PPUSH
77048: CALL 53508 0 1
// AddComCollect ( j , x , y ) ;
77052: LD_VAR 0 2
77056: PPUSH
77057: LD_VAR 0 6
77061: PPUSH
77062: LD_VAR 0 7
77066: PPUSH
77067: CALL_OW 177
// end ;
77071: GO 77029
77073: POP
77074: POP
// exit ;
77075: POP
77076: POP
77077: GO 77306
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
77079: LD_ADDR_VAR 0 4
77083: PUSH
77084: LD_INT 22
77086: PUSH
77087: LD_VAR 0 5
77091: PUSH
77092: EMPTY
77093: LIST
77094: LIST
77095: PUSH
77096: LD_INT 91
77098: PUSH
77099: LD_VAR 0 8
77103: PUSH
77104: LD_INT 8
77106: PUSH
77107: EMPTY
77108: LIST
77109: LIST
77110: LIST
77111: PUSH
77112: LD_INT 2
77114: PUSH
77115: LD_INT 34
77117: PUSH
77118: LD_INT 12
77120: PUSH
77121: EMPTY
77122: LIST
77123: LIST
77124: PUSH
77125: LD_INT 34
77127: PUSH
77128: LD_INT 51
77130: PUSH
77131: EMPTY
77132: LIST
77133: LIST
77134: PUSH
77135: LD_INT 34
77137: PUSH
77138: LD_INT 32
77140: PUSH
77141: EMPTY
77142: LIST
77143: LIST
77144: PUSH
77145: LD_INT 34
77147: PUSH
77148: LD_INT 89
77150: PUSH
77151: EMPTY
77152: LIST
77153: LIST
77154: PUSH
77155: EMPTY
77156: LIST
77157: LIST
77158: LIST
77159: LIST
77160: LIST
77161: PUSH
77162: EMPTY
77163: LIST
77164: LIST
77165: LIST
77166: PPUSH
77167: CALL_OW 69
77171: ST_TO_ADDR
// if tmp then
77172: LD_VAR 0 4
77176: IFFALSE 77302
// begin for j in tmp do
77178: LD_ADDR_VAR 0 2
77182: PUSH
77183: LD_VAR 0 4
77187: PUSH
77188: FOR_IN
77189: IFFALSE 77300
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
77191: LD_VAR 0 2
77195: PPUSH
77196: CALL_OW 262
77200: PUSH
77201: LD_INT 3
77203: EQUAL
77204: PUSH
77205: LD_VAR 0 2
77209: PPUSH
77210: CALL_OW 261
77214: PUSH
77215: LD_INT 20
77217: GREATER
77218: OR
77219: PUSH
77220: LD_VAR 0 2
77224: PPUSH
77225: CALL_OW 314
77229: NOT
77230: AND
77231: PUSH
77232: LD_VAR 0 2
77236: PPUSH
77237: CALL_OW 263
77241: PUSH
77242: LD_INT 1
77244: NONEQUAL
77245: PUSH
77246: LD_VAR 0 2
77250: PPUSH
77251: CALL_OW 311
77255: OR
77256: AND
77257: IFFALSE 77298
// begin ComCollect ( j , x , y ) ;
77259: LD_VAR 0 2
77263: PPUSH
77264: LD_VAR 0 6
77268: PPUSH
77269: LD_VAR 0 7
77273: PPUSH
77274: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
77278: LD_VAR 0 2
77282: PPUSH
77283: LD_VAR 0 8
77287: PPUSH
77288: CALL_OW 172
// exit ;
77292: POP
77293: POP
77294: POP
77295: POP
77296: GO 77306
// end ;
77298: GO 77188
77300: POP
77301: POP
// end ; end ;
77302: GO 76677
77304: POP
77305: POP
// end ; end_of_file
77306: PPOPN 9
77308: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77309: LD_VAR 0 1
77313: PPUSH
77314: LD_VAR 0 2
77318: PPUSH
77319: LD_VAR 0 3
77323: PPUSH
77324: LD_VAR 0 4
77328: PPUSH
77329: LD_VAR 0 5
77333: PPUSH
77334: LD_VAR 0 6
77338: PPUSH
77339: CALL 61670 0 6
// end ;
77343: PPOPN 6
77345: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77346: LD_INT 0
77348: PPUSH
// begin if not units then
77349: LD_VAR 0 1
77353: NOT
77354: IFFALSE 77358
// exit ;
77356: GO 77358
// end ;
77358: PPOPN 7
77360: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77361: CALL 61574 0 0
// end ; end_of_file
77365: PPOPN 1
77367: END
