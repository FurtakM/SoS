// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 62 0 0
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// CreateNature ( apemanSpawnArea , forestArea , riverArea ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 5
  20: PPUSH
  21: LD_INT 6
  23: PPUSH
  24: CALL 441 0 3
// PrepareAmerican ;
  28: CALL 2520 0 0
// PrepareArabian ;
  32: CALL 1161 0 0
// Action ;
  36: CALL 7463 0 0
// if debug then
  40: LD_EXP 1
  44: IFFALSE 61
// begin Difficulty := 4 ;
  46: LD_ADDR_OWVAR 67
  50: PUSH
  51: LD_INT 4
  53: ST_TO_ADDR
// FogOff ( 2 ) ;
  54: LD_INT 2
  56: PPUSH
  57: CALL_OW 344
// end ; end ;
  61: END
// export debug , prefix , scoutActive , scoutFailed , scoutSuccess , usAttacksAllowed , usSurrender , russianAttack , hasRockets , seeRemoteVehicle , seeHeavyGun , remoteControlLimit , sniperKillCounter , vehLossCounter ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// debug := false ;
  65: LD_ADDR_EXP 1
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// prefix := 06_ ;
  73: LD_ADDR_EXP 2
  77: PUSH
  78: LD_STRING 06_
  80: ST_TO_ADDR
// scoutActive := 0 ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// scoutFailed := false ;
  89: LD_ADDR_EXP 4
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// scoutSuccess := false ;
  97: LD_ADDR_EXP 5
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// usAttacksAllowed := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usSurrender := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// russianAttack := false ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// hasRockets := false ;
 129: LD_ADDR_EXP 9
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// seeRemoteVehicle := false ;
 137: LD_ADDR_EXP 10
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// seeHeavyGun := false ;
 145: LD_ADDR_EXP 11
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlLimit := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: LD_INT 2
 163: PUSH
 164: LD_INT 2
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// sniperKillCounter := 0 ;
 182: LD_ADDR_EXP 13
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// vehLossCounter := 0 ;
 190: LD_ADDR_EXP 14
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// end ;
 198: LD_VAR 0 1
 202: RET
// every 0 0$2 trigger sniperKillCounter >= 3 do
 203: LD_EXP 13
 207: PUSH
 208: LD_INT 3
 210: GREATEREQUAL
 211: IFFALSE 223
 213: GO 215
 215: DISABLE
// SetAchievement ( ACH_ANTSNIPER ) ; end_of_file
 216: LD_STRING ACH_ANTSNIPER
 218: PPUSH
 219: CALL_OW 543
 223: END
// export function SayX ( units , ident ) ; var i ; begin
 224: LD_INT 0
 226: PPUSH
 227: PPUSH
// result := false ;
 228: LD_ADDR_VAR 0 3
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// if not units then
 236: LD_VAR 0 1
 240: NOT
 241: IFFALSE 245
// exit ;
 243: GO 299
// for i in units do
 245: LD_ADDR_VAR 0 4
 249: PUSH
 250: LD_VAR 0 1
 254: PUSH
 255: FOR_IN
 256: IFFALSE 297
// if IsOk ( i ) then
 258: LD_VAR 0 4
 262: PPUSH
 263: CALL_OW 302
 267: IFFALSE 295
// begin Say ( i , ident ) ;
 269: LD_VAR 0 4
 273: PPUSH
 274: LD_VAR 0 2
 278: PPUSH
 279: CALL_OW 88
// result := i ;
 283: LD_ADDR_VAR 0 3
 287: PUSH
 288: LD_VAR 0 4
 292: ST_TO_ADDR
// break ;
 293: GO 297
// end ;
 295: GO 255
 297: POP
 298: POP
// end ;
 299: LD_VAR 0 3
 303: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 304: LD_INT 0
 306: PPUSH
 307: PPUSH
// InitUc ;
 308: CALL_OW 18
// InitHc ;
 312: CALL_OW 19
// uc_side := 0 ;
 316: LD_ADDR_OWVAR 20
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// uc_nation := 0 ;
 324: LD_ADDR_OWVAR 21
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// for i = 1 to amount do
 332: LD_ADDR_VAR 0 4
 336: PUSH
 337: DOUBLE
 338: LD_INT 1
 340: DEC
 341: ST_TO_ADDR
 342: LD_VAR 0 2
 346: PUSH
 347: FOR_TO
 348: IFFALSE 430
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 350: LD_ADDR_OWVAR 29
 354: PUSH
 355: LD_INT 9
 357: PPUSH
 358: LD_INT 12
 360: PPUSH
 361: CALL_OW 12
 365: PUSH
 366: LD_INT 9
 368: PPUSH
 369: LD_INT 12
 371: PPUSH
 372: CALL_OW 12
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 381: LD_ADDR_OWVAR 35
 385: PUSH
 386: LD_INT 1
 388: NEG
 389: PPUSH
 390: LD_INT 1
 392: PPUSH
 393: CALL_OW 12
 397: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 398: LD_INT 0
 400: PPUSH
 401: LD_INT 12
 403: PPUSH
 404: LD_INT 1
 406: PPUSH
 407: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 411: CALL_OW 44
 415: PPUSH
 416: LD_VAR 0 1
 420: PPUSH
 421: LD_INT 0
 423: PPUSH
 424: CALL_OW 49
// end ;
 428: GO 347
 430: POP
 431: POP
// InitHc ;
 432: CALL_OW 19
// end ;
 436: LD_VAR 0 3
 440: RET
// export function CreateNature ( apemanArea , forest , water ) ; var i ; begin
 441: LD_INT 0
 443: PPUSH
 444: PPUSH
// uc_side := 0 ;
 445: LD_ADDR_OWVAR 20
 449: PUSH
 450: LD_INT 0
 452: ST_TO_ADDR
// uc_nation := 0 ;
 453: LD_ADDR_OWVAR 21
 457: PUSH
 458: LD_INT 0
 460: ST_TO_ADDR
// SpawnApeman ( apemanArea , [ 9 , 8 , 7 , 6 ] [ Difficulty ] ) ;
 461: LD_VAR 0 1
 465: PPUSH
 466: LD_INT 9
 468: PUSH
 469: LD_INT 8
 471: PUSH
 472: LD_INT 7
 474: PUSH
 475: LD_INT 6
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: PUSH
 484: LD_OWVAR 67
 488: ARRAY
 489: PPUSH
 490: CALL 304 0 2
// for i := 1 to 4 do
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: DOUBLE
 500: LD_INT 1
 502: DEC
 503: ST_TO_ADDR
 504: LD_INT 4
 506: PUSH
 507: FOR_TO
 508: IFFALSE 545
// begin hc_class := class_horse ;
 510: LD_ADDR_OWVAR 28
 514: PUSH
 515: LD_INT 21
 517: ST_TO_ADDR
// hc_gallery :=  ;
 518: LD_ADDR_OWVAR 33
 522: PUSH
 523: LD_STRING 
 525: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 526: CALL_OW 44
 530: PPUSH
 531: LD_VAR 0 2
 535: PPUSH
 536: LD_INT 0
 538: PPUSH
 539: CALL_OW 49
// end ;
 543: GO 507
 545: POP
 546: POP
// for i = 1 to 5 do
 547: LD_ADDR_VAR 0 5
 551: PUSH
 552: DOUBLE
 553: LD_INT 1
 555: DEC
 556: ST_TO_ADDR
 557: LD_INT 5
 559: PUSH
 560: FOR_TO
 561: IFFALSE 615
// begin hc_class = class_tiger ;
 563: LD_ADDR_OWVAR 28
 567: PUSH
 568: LD_INT 14
 570: ST_TO_ADDR
// hc_gallery =  ;
 571: LD_ADDR_OWVAR 33
 575: PUSH
 576: LD_STRING 
 578: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 579: LD_ADDR_OWVAR 35
 583: PUSH
 584: LD_INT 7
 586: NEG
 587: PPUSH
 588: LD_INT 7
 590: PPUSH
 591: CALL_OW 12
 595: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 596: CALL_OW 44
 600: PPUSH
 601: LD_VAR 0 2
 605: PPUSH
 606: LD_INT 0
 608: PPUSH
 609: CALL_OW 49
// end ;
 613: GO 560
 615: POP
 616: POP
// for i := 1 to 4 do
 617: LD_ADDR_VAR 0 5
 621: PUSH
 622: DOUBLE
 623: LD_INT 1
 625: DEC
 626: ST_TO_ADDR
 627: LD_INT 4
 629: PUSH
 630: FOR_TO
 631: IFFALSE 668
// begin hc_class := class_phororhacos ;
 633: LD_ADDR_OWVAR 28
 637: PUSH
 638: LD_INT 18
 640: ST_TO_ADDR
// hc_gallery :=  ;
 641: LD_ADDR_OWVAR 33
 645: PUSH
 646: LD_STRING 
 648: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 649: CALL_OW 44
 653: PPUSH
 654: LD_VAR 0 2
 658: PPUSH
 659: LD_INT 0
 661: PPUSH
 662: CALL_OW 49
// end ;
 666: GO 630
 668: POP
 669: POP
// for i := 1 to 4 do
 670: LD_ADDR_VAR 0 5
 674: PUSH
 675: DOUBLE
 676: LD_INT 1
 678: DEC
 679: ST_TO_ADDR
 680: LD_INT 4
 682: PUSH
 683: FOR_TO
 684: IFFALSE 721
// begin hc_class := class_baggie ;
 686: LD_ADDR_OWVAR 28
 690: PUSH
 691: LD_INT 13
 693: ST_TO_ADDR
// hc_gallery :=  ;
 694: LD_ADDR_OWVAR 33
 698: PUSH
 699: LD_STRING 
 701: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 702: CALL_OW 44
 706: PPUSH
 707: LD_VAR 0 2
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 683
 721: POP
 722: POP
// for i := 1 to 5 do
 723: LD_ADDR_VAR 0 5
 727: PUSH
 728: DOUBLE
 729: LD_INT 1
 731: DEC
 732: ST_TO_ADDR
 733: LD_INT 5
 735: PUSH
 736: FOR_TO
 737: IFFALSE 774
// begin hc_class := class_fish ;
 739: LD_ADDR_OWVAR 28
 743: PUSH
 744: LD_INT 20
 746: ST_TO_ADDR
// hc_gallery :=  ;
 747: LD_ADDR_OWVAR 33
 751: PUSH
 752: LD_STRING 
 754: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , water , false ) ;
 755: CALL_OW 44
 759: PPUSH
 760: LD_VAR 0 3
 764: PPUSH
 765: LD_INT 0
 767: PPUSH
 768: CALL_OW 49
// end ;
 772: GO 736
 774: POP
 775: POP
// end ;
 776: LD_VAR 0 4
 780: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
// if not observer or not unit then
 786: LD_VAR 0 1
 790: NOT
 791: PUSH
 792: LD_VAR 0 2
 796: NOT
 797: OR
 798: IFFALSE 802
// exit ;
 800: GO 850
// if not See ( GetSide ( observer ) , unit ) then
 802: LD_VAR 0 1
 806: PPUSH
 807: CALL_OW 255
 811: PPUSH
 812: LD_VAR 0 2
 816: PPUSH
 817: CALL_OW 292
 821: NOT
 822: IFFALSE 826
// exit ;
 824: GO 850
// result := GetDistUnits ( observer , unit ) < 12 ;
 826: LD_ADDR_VAR 0 3
 830: PUSH
 831: LD_VAR 0 1
 835: PPUSH
 836: LD_VAR 0 2
 840: PPUSH
 841: CALL_OW 296
 845: PUSH
 846: LD_INT 12
 848: LESS
 849: ST_TO_ADDR
// end ;
 850: LD_VAR 0 3
 854: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 855: LD_INT 0
 857: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 858: LD_VAR 0 2
 862: PUSH
 863: LD_INT 1
 865: ARRAY
 866: PPUSH
 867: LD_VAR 0 2
 871: PUSH
 872: LD_INT 2
 874: ARRAY
 875: PPUSH
 876: CALL_OW 488
 880: PUSH
 881: LD_VAR 0 2
 885: PUSH
 886: LD_INT 1
 888: ARRAY
 889: PPUSH
 890: LD_VAR 0 2
 894: PUSH
 895: LD_INT 2
 897: ARRAY
 898: PPUSH
 899: CALL_OW 428
 903: PUSH
 904: LD_INT 0
 906: EQUAL
 907: AND
 908: IFFALSE 942
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 910: LD_VAR 0 1
 914: PPUSH
 915: LD_VAR 0 2
 919: PUSH
 920: LD_INT 1
 922: ARRAY
 923: PPUSH
 924: LD_VAR 0 2
 928: PUSH
 929: LD_INT 2
 931: ARRAY
 932: PPUSH
 933: LD_VAR 0 3
 937: PPUSH
 938: CALL_OW 48
// end ;
 942: LD_VAR 0 4
 946: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
 947: LD_INT 0
 949: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
 950: LD_VAR 0 1
 954: PPUSH
 955: LD_VAR 0 2
 959: PPUSH
 960: LD_VAR 0 3
 964: PPUSH
 965: LD_VAR 0 4
 969: PPUSH
 970: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
 974: LD_VAR 0 1
 978: PPUSH
 979: LD_VAR 0 2
 983: PPUSH
 984: LD_VAR 0 3
 988: PPUSH
 989: CALL_OW 331
// end ;
 993: LD_VAR 0 5
 997: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
 998: LD_INT 0
1000: PPUSH
// if not units then
1001: LD_VAR 0 1
1005: NOT
1006: IFFALSE 1010
// exit ;
1008: GO 1093
// result := true ;
1010: LD_ADDR_VAR 0 4
1014: PUSH
1015: LD_INT 1
1017: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1018: LD_VAR 0 1
1022: PPUSH
1023: LD_INT 26
1025: PUSH
1026: LD_INT 1
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: PPUSH
1033: CALL_OW 72
1037: PUSH
1038: LD_INT 1
1040: ARRAY
1041: PPUSH
1042: LD_VAR 0 2
1046: PPUSH
1047: CALL_OW 88
1051: NOT
1052: IFFALSE 1093
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1054: LD_ADDR_VAR 0 4
1058: PUSH
1059: LD_VAR 0 1
1063: PPUSH
1064: LD_INT 26
1066: PUSH
1067: LD_INT 2
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: PPUSH
1074: CALL_OW 72
1078: PUSH
1079: LD_INT 1
1081: ARRAY
1082: PPUSH
1083: LD_VAR 0 3
1087: PPUSH
1088: CALL_OW 88
1092: ST_TO_ADDR
// end ;
1093: LD_VAR 0 4
1097: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1098: LD_INT 0
1100: PPUSH
1101: PPUSH
// if not group then
1102: LD_VAR 0 2
1106: NOT
1107: IFFALSE 1111
// exit ;
1109: GO 1156
// for i in group do
1111: LD_ADDR_VAR 0 4
1115: PUSH
1116: LD_VAR 0 2
1120: PUSH
1121: FOR_IN
1122: IFFALSE 1154
// if See ( side , i ) then
1124: LD_VAR 0 1
1128: PPUSH
1129: LD_VAR 0 4
1133: PPUSH
1134: CALL_OW 292
1138: IFFALSE 1152
// begin result := true ;
1140: LD_ADDR_VAR 0 3
1144: PUSH
1145: LD_INT 1
1147: ST_TO_ADDR
// exit ;
1148: POP
1149: POP
1150: GO 1156
// end ;
1152: GO 1121
1154: POP
1155: POP
// end ; end_of_file
1156: LD_VAR 0 3
1160: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeApes , heikeVehicles ; export function PrepareArabian ; var i , tmp , counter , hasDrugs ; begin
1161: LD_INT 0
1163: PPUSH
1164: PPUSH
1165: PPUSH
1166: PPUSH
1167: PPUSH
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
1168: LD_ADDR_VAR 0 5
1172: PUSH
1173: LD_STRING 05_DrugsTested
1175: PPUSH
1176: LD_EXP 1
1180: PPUSH
1181: CALL_OW 30
1185: ST_TO_ADDR
// if hasDrugs then
1186: LD_VAR 0 5
1190: IFFALSE 1205
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
1192: LD_INT 5
1194: PPUSH
1195: LD_INT 2
1197: PPUSH
1198: LD_INT 2
1200: PPUSH
1201: CALL_OW 322
// uc_nation := 2 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 2
1212: ST_TO_ADDR
// uc_side := 5 ;
1213: LD_ADDR_OWVAR 20
1217: PUSH
1218: LD_INT 5
1220: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1221: LD_ADDR_EXP 23
1225: PUSH
1226: LD_STRING Abdul
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: LD_STRING 
1234: PPUSH
1235: CALL 15684 0 3
1239: ST_TO_ADDR
// uc_side := 2 ;
1240: LD_ADDR_OWVAR 20
1244: PUSH
1245: LD_INT 2
1247: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1248: LD_ADDR_EXP 15
1252: PUSH
1253: LD_STRING Heike
1255: PPUSH
1256: LD_EXP 1
1260: NOT
1261: PPUSH
1262: LD_EXP 2
1266: PPUSH
1267: CALL 15684 0 3
1271: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1272: LD_ADDR_EXP 18
1276: PUSH
1277: LD_STRING Ibrahim
1279: PPUSH
1280: LD_EXP 1
1284: NOT
1285: PPUSH
1286: LD_EXP 2
1290: PPUSH
1291: CALL 15684 0 3
1295: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1296: LD_ADDR_EXP 16
1300: PUSH
1301: LD_STRING Givi
1303: PPUSH
1304: LD_EXP 1
1308: NOT
1309: PPUSH
1310: LD_EXP 2
1314: PPUSH
1315: CALL 15684 0 3
1319: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1320: LD_ADDR_EXP 19
1324: PUSH
1325: LD_STRING Kamil
1327: PPUSH
1328: LD_EXP 1
1332: NOT
1333: PPUSH
1334: LD_EXP 2
1338: PPUSH
1339: CALL 15684 0 3
1343: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1344: LD_ADDR_EXP 20
1348: PUSH
1349: LD_STRING Kaia
1351: PPUSH
1352: LD_EXP 1
1356: NOT
1357: PPUSH
1358: LD_EXP 2
1362: PPUSH
1363: CALL 15684 0 3
1367: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1368: LD_ADDR_EXP 21
1372: PUSH
1373: LD_STRING Sophia
1375: PPUSH
1376: LD_EXP 1
1380: NOT
1381: PPUSH
1382: LD_EXP 2
1386: PPUSH
1387: CALL 15684 0 3
1391: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1392: LD_ADDR_EXP 22
1396: PUSH
1397: LD_STRING Markov
1399: PPUSH
1400: LD_EXP 1
1404: NOT
1405: PPUSH
1406: LD_EXP 2
1410: PPUSH
1411: CALL 15684 0 3
1415: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1416: LD_ADDR_EXP 26
1420: PUSH
1421: LD_STRING Aviradze
1423: PPUSH
1424: LD_EXP 1
1428: NOT
1429: PPUSH
1430: LD_EXP 2
1434: PPUSH
1435: CALL 15684 0 3
1439: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1440: LD_ADDR_EXP 25
1444: PUSH
1445: LD_STRING Kurt
1447: PPUSH
1448: LD_EXP 1
1452: NOT
1453: PPUSH
1454: LD_EXP 2
1458: PPUSH
1459: CALL 15684 0 3
1463: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1464: LD_ADDR_EXP 17
1468: PUSH
1469: LD_STRING Mike
1471: PPUSH
1472: LD_EXP 1
1476: NOT
1477: PPUSH
1478: LD_EXP 2
1482: PPUSH
1483: CALL 15684 0 3
1487: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1488: LD_ADDR_EXP 24
1492: PUSH
1493: LD_STRING Olaf
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: LD_EXP 2
1506: PPUSH
1507: CALL 15684 0 3
1511: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 06_others ) ;
1512: LD_ADDR_EXP 27
1516: PUSH
1517: LD_STRING 06_others
1519: PPUSH
1520: CALL_OW 31
1524: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 06_apes ) ;
1525: LD_ADDR_EXP 28
1529: PUSH
1530: LD_STRING 06_apes
1532: PPUSH
1533: CALL_OW 31
1537: ST_TO_ADDR
// if debug then
1538: LD_EXP 1
1542: IFFALSE 1815
// begin tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 750 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 900 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 100 , 0 ] ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 50 , 50 ] ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_mortar , 2 , 1000 , 0 ] ] ;
1544: LD_ADDR_VAR 0 3
1548: PUSH
1549: LD_INT 14
1551: PUSH
1552: LD_INT 1
1554: PUSH
1555: LD_INT 2
1557: PUSH
1558: LD_INT 25
1560: PUSH
1561: LD_INT 2
1563: PUSH
1564: LD_INT 1000
1566: PUSH
1567: LD_INT 0
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 14
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 31
1590: PUSH
1591: LD_INT 2
1593: PUSH
1594: LD_INT 1000
1596: PUSH
1597: LD_INT 0
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 14
1611: PUSH
1612: LD_INT 1
1614: PUSH
1615: LD_INT 1
1617: PUSH
1618: LD_INT 27
1620: PUSH
1621: LD_INT 2
1623: PUSH
1624: LD_INT 750
1626: PUSH
1627: LD_INT 0
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: PUSH
1639: LD_INT 14
1641: PUSH
1642: LD_INT 1
1644: PUSH
1645: LD_INT 1
1647: PUSH
1648: LD_INT 27
1650: PUSH
1651: LD_INT 2
1653: PUSH
1654: LD_INT 900
1656: PUSH
1657: LD_INT 0
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: PUSH
1669: LD_INT 14
1671: PUSH
1672: LD_INT 1
1674: PUSH
1675: LD_INT 1
1677: PUSH
1678: LD_INT 32
1680: PUSH
1681: LD_INT 2
1683: PUSH
1684: LD_INT 1000
1686: PUSH
1687: LD_INT 100
1689: PUSH
1690: LD_INT 0
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_INT 14
1708: PUSH
1709: LD_INT 1
1711: PUSH
1712: LD_INT 1
1714: PUSH
1715: LD_INT 32
1717: PUSH
1718: LD_INT 2
1720: PUSH
1721: LD_INT 1000
1723: PUSH
1724: LD_INT 50
1726: PUSH
1727: LD_INT 50
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: PUSH
1743: LD_INT 14
1745: PUSH
1746: LD_INT 1
1748: PUSH
1749: LD_INT 2
1751: PUSH
1752: LD_INT 27
1754: PUSH
1755: LD_INT 2
1757: PUSH
1758: LD_INT 1000
1760: PUSH
1761: LD_INT 0
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: PUSH
1773: LD_INT 14
1775: PUSH
1776: LD_INT 1
1778: PUSH
1779: LD_INT 1
1781: PUSH
1782: LD_INT 92
1784: PUSH
1785: LD_INT 2
1787: PUSH
1788: LD_INT 1000
1790: PUSH
1791: LD_INT 0
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: ST_TO_ADDR
// end else
1813: GO 1822
// tmp := [ ] ;
1815: LD_ADDR_VAR 0 3
1819: PUSH
1820: EMPTY
1821: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 06_Vehicles , tmp ) ;
1822: LD_ADDR_EXP 29
1826: PUSH
1827: LD_STRING 06_Vehicles
1829: PPUSH
1830: LD_VAR 0 3
1834: PPUSH
1835: CALL_OW 30
1839: ST_TO_ADDR
// counter := 0 ;
1840: LD_ADDR_VAR 0 4
1844: PUSH
1845: LD_INT 0
1847: ST_TO_ADDR
// if heikeVehicles then
1848: LD_EXP 29
1852: IFFALSE 1974
// begin for i := heikeVehicles downto 1 do
1854: LD_ADDR_VAR 0 2
1858: PUSH
1859: DOUBLE
1860: LD_EXP 29
1864: INC
1865: ST_TO_ADDR
1866: LD_INT 1
1868: PUSH
1869: FOR_DOWNTO
1870: IFFALSE 1972
// begin if heikeVehicles [ i ] [ 3 ] = control_remote then
1872: LD_EXP 29
1876: PUSH
1877: LD_VAR 0 2
1881: ARRAY
1882: PUSH
1883: LD_INT 3
1885: ARRAY
1886: PUSH
1887: LD_INT 2
1889: EQUAL
1890: IFFALSE 1970
// begin if counter < remoteControlLimit then
1892: LD_VAR 0 4
1896: PUSH
1897: LD_EXP 12
1901: LESS
1902: IFFALSE 1950
// begin counter := Inc ( counter ) ;
1904: LD_ADDR_VAR 0 4
1908: PUSH
1909: LD_VAR 0 4
1913: PPUSH
1914: CALL 54747 0 1
1918: ST_TO_ADDR
// heikeVehicles := Insert ( heikeVehicles , heikeVehicles , heikeVehicles [ i ] ) ;
1919: LD_ADDR_EXP 29
1923: PUSH
1924: LD_EXP 29
1928: PPUSH
1929: LD_EXP 29
1933: PPUSH
1934: LD_EXP 29
1938: PUSH
1939: LD_VAR 0 2
1943: ARRAY
1944: PPUSH
1945: CALL_OW 2
1949: ST_TO_ADDR
// end ; heikeVehicles := Delete ( heikeVehicles , i ) ;
1950: LD_ADDR_EXP 29
1954: PUSH
1955: LD_EXP 29
1959: PPUSH
1960: LD_VAR 0 2
1964: PPUSH
1965: CALL_OW 3
1969: ST_TO_ADDR
// end ; end ;
1970: GO 1869
1972: POP
1973: POP
// end ; end ;
1974: LD_VAR 0 1
1978: RET
// every 0 0$1 trigger scoutActive do var i , tmp ;
1979: LD_EXP 3
1983: IFFALSE 2517
1985: GO 1987
1987: DISABLE
1988: LD_INT 0
1990: PPUSH
1991: PPUSH
// begin tmp := [ [ [ 96 , 50 ] , [ 49 , 52 ] , [ 34 , 55 ] , [ 41 , 70 ] , [ 53 , 96 ] , [ 103 , 64 ] ] , [ [ 104 , 70 ] , [ 111 , 103 ] , [ 131 , 147 ] , [ 130 , 153 ] , [ 110 , 93 ] , [ 103 , 65 ] ] ] ;
1992: LD_ADDR_VAR 0 2
1996: PUSH
1997: LD_INT 96
1999: PUSH
2000: LD_INT 50
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 49
2009: PUSH
2010: LD_INT 52
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: PUSH
2017: LD_INT 34
2019: PUSH
2020: LD_INT 55
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: PUSH
2027: LD_INT 41
2029: PUSH
2030: LD_INT 70
2032: PUSH
2033: EMPTY
2034: LIST
2035: LIST
2036: PUSH
2037: LD_INT 53
2039: PUSH
2040: LD_INT 96
2042: PUSH
2043: EMPTY
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 103
2049: PUSH
2050: LD_INT 64
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: PUSH
2065: LD_INT 104
2067: PUSH
2068: LD_INT 70
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 111
2077: PUSH
2078: LD_INT 103
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: LD_INT 131
2087: PUSH
2088: LD_INT 147
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: PUSH
2095: LD_INT 130
2097: PUSH
2098: LD_INT 153
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: PUSH
2105: LD_INT 110
2107: PUSH
2108: LD_INT 93
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: PUSH
2115: LD_INT 103
2117: PUSH
2118: LD_INT 65
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: ST_TO_ADDR
// for i in tmp [ 1 ] do
2137: LD_ADDR_VAR 0 1
2141: PUSH
2142: LD_VAR 0 2
2146: PUSH
2147: LD_INT 1
2149: ARRAY
2150: PUSH
2151: FOR_IN
2152: IFFALSE 2204
// begin AddComAgressiveMove ( Mike , i [ 1 ] , i [ 2 ] ) ;
2154: LD_EXP 17
2158: PPUSH
2159: LD_VAR 0 1
2163: PUSH
2164: LD_INT 1
2166: ARRAY
2167: PPUSH
2168: LD_VAR 0 1
2172: PUSH
2173: LD_INT 2
2175: ARRAY
2176: PPUSH
2177: CALL_OW 174
// AddComHold ( Mike ) ;
2181: LD_EXP 17
2185: PPUSH
2186: CALL_OW 200
// AddComWait ( Mike , 0 0$5 ) ;
2190: LD_EXP 17
2194: PPUSH
2195: LD_INT 175
2197: PPUSH
2198: CALL_OW 202
// end ;
2202: GO 2151
2204: POP
2205: POP
// for i in tmp [ 2 ] do
2206: LD_ADDR_VAR 0 1
2210: PUSH
2211: LD_VAR 0 2
2215: PUSH
2216: LD_INT 2
2218: ARRAY
2219: PUSH
2220: FOR_IN
2221: IFFALSE 2273
// begin AddComAgressiveMove ( Kurt , i [ 1 ] , i [ 2 ] ) ;
2223: LD_EXP 25
2227: PPUSH
2228: LD_VAR 0 1
2232: PUSH
2233: LD_INT 1
2235: ARRAY
2236: PPUSH
2237: LD_VAR 0 1
2241: PUSH
2242: LD_INT 2
2244: ARRAY
2245: PPUSH
2246: CALL_OW 174
// AddComHold ( Kurt ) ;
2250: LD_EXP 25
2254: PPUSH
2255: CALL_OW 200
// AddComWait ( Kurt , 0 0$5 ) ;
2259: LD_EXP 25
2263: PPUSH
2264: LD_INT 175
2266: PPUSH
2267: CALL_OW 202
// end ;
2271: GO 2220
2273: POP
2274: POP
// wait ( 2 2$00 ) ;
2275: LD_INT 4200
2277: PPUSH
2278: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2282: LD_INT 35
2284: PPUSH
2285: CALL_OW 67
// until ( not HasTask ( Mike ) or IsDead ( Mike ) ) and ( not HasTask ( Kurt ) or IsDead ( Kurt ) ) ;
2289: LD_EXP 17
2293: PPUSH
2294: CALL_OW 314
2298: NOT
2299: PUSH
2300: LD_EXP 17
2304: PPUSH
2305: CALL_OW 301
2309: OR
2310: PUSH
2311: LD_EXP 25
2315: PPUSH
2316: CALL_OW 314
2320: NOT
2321: PUSH
2322: LD_EXP 25
2326: PPUSH
2327: CALL_OW 301
2331: OR
2332: AND
2333: IFFALSE 2282
// if IsDead ( Kurt ) and IsDead ( Mike ) then
2335: LD_EXP 25
2339: PPUSH
2340: CALL_OW 301
2344: PUSH
2345: LD_EXP 17
2349: PPUSH
2350: CALL_OW 301
2354: AND
2355: IFFALSE 2367
// begin scoutFailed := true ;
2357: LD_ADDR_EXP 4
2361: PUSH
2362: LD_INT 1
2364: ST_TO_ADDR
// exit ;
2365: GO 2517
// end ; ComMoveXY ( [ Kurt , Mike ] , 132 , 52 ) ;
2367: LD_EXP 25
2371: PUSH
2372: LD_EXP 17
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: PPUSH
2381: LD_INT 132
2383: PPUSH
2384: LD_INT 52
2386: PPUSH
2387: CALL_OW 111
// AddComMoveUnit ( [ Kurt , Mike ] , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
2391: LD_EXP 25
2395: PUSH
2396: LD_EXP 17
2400: PUSH
2401: EMPTY
2402: LIST
2403: LIST
2404: PPUSH
2405: LD_INT 22
2407: PUSH
2408: LD_INT 2
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: PPUSH
2415: CALL_OW 69
2419: PUSH
2420: LD_INT 1
2422: ARRAY
2423: PPUSH
2424: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
2428: LD_INT 35
2430: PPUSH
2431: CALL_OW 67
// until See ( 2 , Kurt ) or See ( 2 , Mike ) ;
2435: LD_INT 2
2437: PPUSH
2438: LD_EXP 25
2442: PPUSH
2443: CALL_OW 292
2447: PUSH
2448: LD_INT 2
2450: PPUSH
2451: LD_EXP 17
2455: PPUSH
2456: CALL_OW 292
2460: OR
2461: IFFALSE 2428
// if IsLive ( Kurt ) then
2463: LD_EXP 25
2467: PPUSH
2468: CALL_OW 300
2472: IFFALSE 2486
// SetSide ( Kurt , 2 ) ;
2474: LD_EXP 25
2478: PPUSH
2479: LD_INT 2
2481: PPUSH
2482: CALL_OW 235
// if IsLive ( Mike ) then
2486: LD_EXP 17
2490: PPUSH
2491: CALL_OW 300
2495: IFFALSE 2509
// SetSide ( Mike , 2 ) ;
2497: LD_EXP 17
2501: PPUSH
2502: LD_INT 2
2504: PPUSH
2505: CALL_OW 235
// scoutSuccess := true ;
2509: LD_ADDR_EXP 5
2513: PUSH
2514: LD_INT 1
2516: ST_TO_ADDR
// end ; end_of_file
2517: PPOPN 2
2519: END
// export usCommander , usForces , usCargo , usToBuild , usAdditionalForces ; export function PrepareAmerican ; var i , b , veh ; begin
2520: LD_INT 0
2522: PPUSH
2523: PPUSH
2524: PPUSH
2525: PPUSH
// uc_side := 1 ;
2526: LD_ADDR_OWVAR 20
2530: PUSH
2531: LD_INT 1
2533: ST_TO_ADDR
// uc_nation := 1 ;
2534: LD_ADDR_OWVAR 21
2538: PUSH
2539: LD_INT 1
2541: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 1500 , 2200 , 3500 , 3900 ] [ Difficulty ] ) ;
2542: LD_INT 1
2544: PPUSH
2545: CALL_OW 274
2549: PPUSH
2550: LD_INT 1
2552: PPUSH
2553: LD_INT 1500
2555: PUSH
2556: LD_INT 2200
2558: PUSH
2559: LD_INT 3500
2561: PUSH
2562: LD_INT 3900
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: PUSH
2571: LD_OWVAR 67
2575: ARRAY
2576: PPUSH
2577: CALL_OW 277
// SetResourceType ( GetBase ( usDepot ) , mat_oil , 800 ) ;
2581: LD_INT 1
2583: PPUSH
2584: CALL_OW 274
2588: PPUSH
2589: LD_INT 2
2591: PPUSH
2592: LD_INT 800
2594: PPUSH
2595: CALL_OW 277
// usForces := [ ] ;
2599: LD_ADDR_EXP 31
2603: PUSH
2604: EMPTY
2605: ST_TO_ADDR
// usToBuild := [ ] ;
2606: LD_ADDR_EXP 33
2610: PUSH
2611: EMPTY
2612: ST_TO_ADDR
// usAdditionalForces := [ ] ;
2613: LD_ADDR_EXP 34
2617: PUSH
2618: EMPTY
2619: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2620: LD_ADDR_VAR 0 2
2624: PUSH
2625: LD_INT 21
2627: PUSH
2628: LD_INT 3
2630: PUSH
2631: EMPTY
2632: LIST
2633: LIST
2634: PPUSH
2635: CALL_OW 69
2639: PUSH
2640: FOR_IN
2641: IFFALSE 2678
// SetBLevel ( i , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
2643: LD_VAR 0 2
2647: PPUSH
2648: LD_INT 6
2650: PUSH
2651: LD_INT 7
2653: PUSH
2654: LD_INT 8
2656: PUSH
2657: LD_INT 8
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: LIST
2664: LIST
2665: PUSH
2666: LD_OWVAR 67
2670: ARRAY
2671: PPUSH
2672: CALL_OW 241
2676: GO 2640
2678: POP
2679: POP
// for i in FilterAllUnits ( [ f_btype , b_bunker ] ) do
2680: LD_ADDR_VAR 0 2
2684: PUSH
2685: LD_INT 30
2687: PUSH
2688: LD_INT 32
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: PPUSH
2695: CALL_OW 69
2699: PUSH
2700: FOR_IN
2701: IFFALSE 2791
// begin if GetBWeapon ( i ) = us_radar then
2703: LD_VAR 0 2
2707: PPUSH
2708: CALL_OW 269
2712: PUSH
2713: LD_INT 11
2715: EQUAL
2716: IFFALSE 2741
// begin uc_nation := 0 ;
2718: LD_ADDR_OWVAR 21
2722: PUSH
2723: LD_INT 0
2725: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 2 ) ;
2726: LD_INT 0
2728: PPUSH
2729: LD_INT 16
2731: PPUSH
2732: LD_INT 2
2734: PPUSH
2735: CALL_OW 380
// end else
2739: GO 2775
// PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2741: LD_INT 0
2743: PPUSH
2744: LD_INT 1
2746: PPUSH
2747: LD_INT 5
2749: PUSH
2750: LD_INT 6
2752: PUSH
2753: LD_INT 7
2755: PUSH
2756: LD_INT 8
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: LIST
2763: LIST
2764: PUSH
2765: LD_OWVAR 67
2769: ARRAY
2770: PPUSH
2771: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2775: CALL_OW 44
2779: PPUSH
2780: LD_VAR 0 2
2784: PPUSH
2785: CALL_OW 52
// end ;
2789: GO 2700
2791: POP
2792: POP
// b := HexInfo ( 74 , 120 ) ;
2793: LD_ADDR_VAR 0 3
2797: PUSH
2798: LD_INT 74
2800: PPUSH
2801: LD_INT 120
2803: PPUSH
2804: CALL_OW 428
2808: ST_TO_ADDR
// uc_nation := 1 ;
2809: LD_ADDR_OWVAR 21
2813: PUSH
2814: LD_INT 1
2816: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
2817: LD_ADDR_VAR 0 2
2821: PUSH
2822: DOUBLE
2823: LD_INT 1
2825: DEC
2826: ST_TO_ADDR
2827: LD_INT 1
2829: PUSH
2830: LD_INT 2
2832: PUSH
2833: LD_INT 3
2835: PUSH
2836: LD_INT 4
2838: PUSH
2839: EMPTY
2840: LIST
2841: LIST
2842: LIST
2843: LIST
2844: PUSH
2845: LD_OWVAR 67
2849: ARRAY
2850: PUSH
2851: FOR_TO
2852: IFFALSE 2904
// begin PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2854: LD_INT 0
2856: PPUSH
2857: LD_INT 1
2859: PPUSH
2860: LD_INT 5
2862: PUSH
2863: LD_INT 6
2865: PUSH
2866: LD_INT 7
2868: PUSH
2869: LD_INT 8
2871: PUSH
2872: EMPTY
2873: LIST
2874: LIST
2875: LIST
2876: LIST
2877: PUSH
2878: LD_OWVAR 67
2882: ARRAY
2883: PPUSH
2884: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b ) ;
2888: CALL_OW 44
2892: PPUSH
2893: LD_VAR 0 3
2897: PPUSH
2898: CALL_OW 52
// end ;
2902: GO 2851
2904: POP
2905: POP
// SetClass ( UnitsInside ( b ) , class_sniper ) ;
2906: LD_VAR 0 3
2910: PPUSH
2911: CALL_OW 313
2915: PPUSH
2916: LD_INT 5
2918: PPUSH
2919: CALL_OW 336
// for i := 1 to 6 do
2923: LD_ADDR_VAR 0 2
2927: PUSH
2928: DOUBLE
2929: LD_INT 1
2931: DEC
2932: ST_TO_ADDR
2933: LD_INT 6
2935: PUSH
2936: FOR_TO
2937: IFFALSE 2987
// begin PrepareHuman ( false , 4 , 6 ) ;
2939: LD_INT 0
2941: PPUSH
2942: LD_INT 4
2944: PPUSH
2945: LD_INT 6
2947: PPUSH
2948: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ amLab1 , amLab2 ] [ i mod 2 + 1 ] ) ;
2952: CALL_OW 44
2956: PPUSH
2957: LD_INT 32
2959: PUSH
2960: LD_INT 33
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PUSH
2967: LD_VAR 0 2
2971: PUSH
2972: LD_INT 2
2974: MOD
2975: PUSH
2976: LD_INT 1
2978: PLUS
2979: ARRAY
2980: PPUSH
2981: CALL_OW 52
// end ;
2985: GO 2936
2987: POP
2988: POP
// for i := 1 to 3 do
2989: LD_ADDR_VAR 0 2
2993: PUSH
2994: DOUBLE
2995: LD_INT 1
2997: DEC
2998: ST_TO_ADDR
2999: LD_INT 3
3001: PUSH
3002: FOR_TO
3003: IFFALSE 3032
// begin PrepareHuman ( false , 3 , 6 ) ;
3005: LD_INT 0
3007: PPUSH
3008: LD_INT 3
3010: PPUSH
3011: LD_INT 6
3013: PPUSH
3014: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , amFac ) ;
3018: CALL_OW 44
3022: PPUSH
3023: LD_INT 25
3025: PPUSH
3026: CALL_OW 52
// end ;
3030: GO 3002
3032: POP
3033: POP
// for i := 1 to 3 do
3034: LD_ADDR_VAR 0 2
3038: PUSH
3039: DOUBLE
3040: LD_INT 1
3042: DEC
3043: ST_TO_ADDR
3044: LD_INT 3
3046: PUSH
3047: FOR_TO
3048: IFFALSE 3106
// begin PrepareHuman ( false , 3 , [ 6 , 7 , 7 , 7 ] [ Difficulty ] ) ;
3050: LD_INT 0
3052: PPUSH
3053: LD_INT 3
3055: PPUSH
3056: LD_INT 6
3058: PUSH
3059: LD_INT 7
3061: PUSH
3062: LD_INT 7
3064: PUSH
3065: LD_INT 7
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: PUSH
3074: LD_OWVAR 67
3078: ARRAY
3079: PPUSH
3080: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 78 , 130 ) ) ;
3084: CALL_OW 44
3088: PPUSH
3089: LD_INT 78
3091: PPUSH
3092: LD_INT 130
3094: PPUSH
3095: CALL_OW 428
3099: PPUSH
3100: CALL_OW 52
// end ;
3104: GO 3047
3106: POP
3107: POP
// for i := 1 to [ 1 , 2 , 3 , 3 ] [ Difficulty ] do
3108: LD_ADDR_VAR 0 2
3112: PUSH
3113: DOUBLE
3114: LD_INT 1
3116: DEC
3117: ST_TO_ADDR
3118: LD_INT 1
3120: PUSH
3121: LD_INT 2
3123: PUSH
3124: LD_INT 3
3126: PUSH
3127: LD_INT 3
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: PUSH
3136: LD_OWVAR 67
3140: ARRAY
3141: PUSH
3142: FOR_TO
3143: IFFALSE 3230
// begin PrepareVehicle ( us_medium_wheeled , engine_solar , control_manual , us_crane , 100 ) ;
3145: LD_INT 2
3147: PPUSH
3148: LD_INT 2
3150: PPUSH
3151: LD_INT 1
3153: PPUSH
3154: LD_INT 13
3156: PPUSH
3157: LD_INT 100
3159: PPUSH
3160: CALL 20524 0 5
// veh := CreateVehicle ;
3164: LD_ADDR_VAR 0 4
3168: PUSH
3169: CALL_OW 45
3173: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3174: LD_VAR 0 4
3178: PPUSH
3179: LD_INT 3
3181: PPUSH
3182: CALL_OW 233
// PlaceUnitArea ( veh , usCraneArea , false ) ;
3186: LD_VAR 0 4
3190: PPUSH
3191: LD_INT 9
3193: PPUSH
3194: LD_INT 0
3196: PPUSH
3197: CALL_OW 49
// PrepareHuman ( false , 3 , 6 ) ;
3201: LD_INT 0
3203: PPUSH
3204: LD_INT 3
3206: PPUSH
3207: LD_INT 6
3209: PPUSH
3210: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3214: CALL_OW 44
3218: PPUSH
3219: LD_VAR 0 4
3223: PPUSH
3224: CALL_OW 52
// end ;
3228: GO 3142
3230: POP
3231: POP
// InitHc ;
3232: CALL_OW 19
// hc_gallery := sandar ;
3236: LD_ADDR_OWVAR 33
3240: PUSH
3241: LD_STRING sandar
3243: ST_TO_ADDR
// hc_face_number := 38 ;
3244: LD_ADDR_OWVAR 34
3248: PUSH
3249: LD_INT 38
3251: ST_TO_ADDR
// hc_name := Doug Callahan ;
3252: LD_ADDR_OWVAR 26
3256: PUSH
3257: LD_STRING Doug Callahan
3259: ST_TO_ADDR
// hc_class := class_engineer ;
3260: LD_ADDR_OWVAR 28
3264: PUSH
3265: LD_INT 2
3267: ST_TO_ADDR
// hc_sex := sex_male ;
3268: LD_ADDR_OWVAR 27
3272: PUSH
3273: LD_INT 1
3275: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
3276: LD_ADDR_OWVAR 29
3280: PUSH
3281: LD_INT 10
3283: PUSH
3284: LD_INT 11
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
3291: LD_ADDR_OWVAR 30
3295: PUSH
3296: LD_INT 2
3298: PUSH
3299: LD_INT 1
3301: PUSH
3302: LD_INT 0
3304: PUSH
3305: LD_INT 0
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: LIST
3312: LIST
3313: ST_TO_ADDR
// hc_skills := [ 4 , 6 , 3 , 1 ] ;
3314: LD_ADDR_OWVAR 31
3318: PUSH
3319: LD_INT 4
3321: PUSH
3322: LD_INT 6
3324: PUSH
3325: LD_INT 3
3327: PUSH
3328: LD_INT 1
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: LIST
3335: LIST
3336: ST_TO_ADDR
// usCommander := CreateHuman ;
3337: LD_ADDR_EXP 30
3341: PUSH
3342: CALL_OW 44
3346: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
3347: LD_EXP 30
3351: PPUSH
3352: LD_INT 1
3354: PPUSH
3355: CALL_OW 52
// DoNotAttack ( 2 , usCommander ) ;
3359: LD_INT 2
3361: PPUSH
3362: LD_EXP 30
3366: PPUSH
3367: CALL_OW 471
// InitHC_All ( ) ;
3371: CALL_OW 584
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay , 100 ) ;
3375: LD_INT 2
3377: PPUSH
3378: LD_INT 1
3380: PPUSH
3381: LD_INT 2
3383: PPUSH
3384: LD_INT 12
3386: PPUSH
3387: LD_INT 100
3389: PPUSH
3390: CALL 20524 0 5
// usCargo := CreateVehicle ;
3394: LD_ADDR_EXP 32
3398: PUSH
3399: CALL_OW 45
3403: ST_TO_ADDR
// PlaceUnitXY ( usCargo , 81 , 143 , false ) ;
3404: LD_EXP 32
3408: PPUSH
3409: LD_INT 81
3411: PPUSH
3412: LD_INT 143
3414: PPUSH
3415: LD_INT 0
3417: PPUSH
3418: CALL_OW 48
// Connect ( usCargo ) ;
3422: LD_EXP 32
3426: PPUSH
3427: CALL 23992 0 1
// DoNotAttack ( 5 , usCargo ) ;
3431: LD_INT 5
3433: PPUSH
3434: LD_EXP 32
3438: PPUSH
3439: CALL_OW 471
// end ;
3443: LD_VAR 0 1
3447: RET
// every 6 6$00 trigger not usForces and usAttacksAllowed and IsOk ( amFac ) and BuildingStatus ( amFac ) = bs_idle do var i , chassis , weapon ;
3448: LD_EXP 31
3452: NOT
3453: PUSH
3454: LD_EXP 6
3458: AND
3459: PUSH
3460: LD_INT 25
3462: PPUSH
3463: CALL_OW 302
3467: AND
3468: PUSH
3469: LD_INT 25
3471: PPUSH
3472: CALL_OW 461
3476: PUSH
3477: LD_INT 2
3479: EQUAL
3480: AND
3481: IFFALSE 3638
3483: GO 3485
3485: DISABLE
3486: LD_INT 0
3488: PPUSH
3489: PPUSH
3490: PPUSH
// begin enable ;
3491: ENABLE
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
3492: LD_ADDR_VAR 0 1
3496: PUSH
3497: DOUBLE
3498: LD_INT 1
3500: DEC
3501: ST_TO_ADDR
3502: LD_INT 4
3504: PUSH
3505: LD_INT 5
3507: PUSH
3508: LD_INT 6
3510: PUSH
3511: LD_INT 6
3513: PUSH
3514: EMPTY
3515: LIST
3516: LIST
3517: LIST
3518: LIST
3519: PUSH
3520: LD_OWVAR 67
3524: ARRAY
3525: PUSH
3526: FOR_TO
3527: IFFALSE 3636
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3529: LD_ADDR_VAR 0 2
3533: PUSH
3534: LD_INT 2
3536: PUSH
3537: LD_INT 3
3539: PUSH
3540: LD_INT 4
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: LIST
3547: PUSH
3548: LD_INT 1
3550: PPUSH
3551: LD_INT 3
3553: PPUSH
3554: CALL_OW 12
3558: ARRAY
3559: ST_TO_ADDR
// if chassis = us_heavy_tracked then
3560: LD_VAR 0 2
3564: PUSH
3565: LD_INT 4
3567: EQUAL
3568: IFFALSE 3580
// weapon := us_heavy_gun else
3570: LD_ADDR_VAR 0 3
3574: PUSH
3575: LD_INT 6
3577: ST_TO_ADDR
3578: GO 3611
// weapon := [ us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3580: LD_ADDR_VAR 0 3
3584: PUSH
3585: LD_INT 5
3587: PUSH
3588: LD_INT 7
3590: PUSH
3591: LD_INT 4
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: LIST
3598: PUSH
3599: LD_INT 1
3601: PPUSH
3602: LD_INT 3
3604: PPUSH
3605: CALL_OW 12
3609: ARRAY
3610: ST_TO_ADDR
// AddComConstruct ( amFac , chassis , engine_combustion , control_remote , weapon ) ;
3611: LD_INT 25
3613: PPUSH
3614: LD_VAR 0 2
3618: PPUSH
3619: LD_INT 1
3621: PPUSH
3622: LD_INT 2
3624: PPUSH
3625: LD_VAR 0 3
3629: PPUSH
3630: CALL_OW 185
// end ;
3634: GO 3526
3636: POP
3637: POP
// end ;
3638: PPOPN 3
3640: END
// every 0 0$10 trigger usForces >= [ 4 , 5 , 6 , 6 ] [ Difficulty ] do var i , tmp ;
3641: LD_EXP 31
3645: PUSH
3646: LD_INT 4
3648: PUSH
3649: LD_INT 5
3651: PUSH
3652: LD_INT 6
3654: PUSH
3655: LD_INT 6
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: PUSH
3664: LD_OWVAR 67
3668: ARRAY
3669: GREATEREQUAL
3670: IFFALSE 3781
3672: GO 3674
3674: DISABLE
3675: LD_INT 0
3677: PPUSH
3678: PPUSH
// begin enable ;
3679: ENABLE
// tmp := usForces ;
3680: LD_ADDR_VAR 0 2
3684: PUSH
3685: LD_EXP 31
3689: ST_TO_ADDR
// usForces := [ ] ;
3690: LD_ADDR_EXP 31
3694: PUSH
3695: EMPTY
3696: ST_TO_ADDR
// if not tmp then
3697: LD_VAR 0 2
3701: NOT
3702: IFFALSE 3706
// exit ;
3704: GO 3781
// repeat wait ( 0 0$1 ) ;
3706: LD_INT 35
3708: PPUSH
3709: CALL_OW 67
// tmp := AgressiveMove ( tmp , [ [ 98 , 50 ] , [ 114 , 50 ] , [ 127 , 51 ] , [ 131 , 35 ] ] ) ;
3713: LD_ADDR_VAR 0 2
3717: PUSH
3718: LD_VAR 0 2
3722: PPUSH
3723: LD_INT 98
3725: PUSH
3726: LD_INT 50
3728: PUSH
3729: EMPTY
3730: LIST
3731: LIST
3732: PUSH
3733: LD_INT 114
3735: PUSH
3736: LD_INT 50
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: PUSH
3743: LD_INT 127
3745: PUSH
3746: LD_INT 51
3748: PUSH
3749: EMPTY
3750: LIST
3751: LIST
3752: PUSH
3753: LD_INT 131
3755: PUSH
3756: LD_INT 35
3758: PUSH
3759: EMPTY
3760: LIST
3761: LIST
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: PPUSH
3769: CALL 55990 0 2
3773: ST_TO_ADDR
// until not tmp ;
3774: LD_VAR 0 2
3778: NOT
3779: IFFALSE 3706
// end ;
3781: PPOPN 2
3783: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( southScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3784: LD_EXP 3
3788: PUSH
3789: LD_EXP 5
3793: NOT
3794: AND
3795: PUSH
3796: LD_INT 11
3798: PPUSH
3799: LD_INT 22
3801: PUSH
3802: LD_INT 2
3804: PUSH
3805: EMPTY
3806: LIST
3807: LIST
3808: PPUSH
3809: CALL_OW 70
3813: AND
3814: IFFALSE 3935
3816: GO 3818
3818: DISABLE
3819: LD_INT 0
3821: PPUSH
3822: PPUSH
3823: PPUSH
// begin uc_side := 1 ;
3824: LD_ADDR_OWVAR 20
3828: PUSH
3829: LD_INT 1
3831: ST_TO_ADDR
// uc_nation := 1 ;
3832: LD_ADDR_OWVAR 21
3836: PUSH
3837: LD_INT 1
3839: ST_TO_ADDR
// tmp := [ ] ;
3840: LD_ADDR_VAR 0 3
3844: PUSH
3845: EMPTY
3846: ST_TO_ADDR
// for i := 1 to 2 do
3847: LD_ADDR_VAR 0 1
3851: PUSH
3852: DOUBLE
3853: LD_INT 1
3855: DEC
3856: ST_TO_ADDR
3857: LD_INT 2
3859: PUSH
3860: FOR_TO
3861: IFFALSE 3933
// begin PrepareSoldier ( false , 7 ) ;
3863: LD_INT 0
3865: PPUSH
3866: LD_INT 7
3868: PPUSH
3869: CALL_OW 381
// un := CreateHuman ;
3873: LD_ADDR_VAR 0 2
3877: PUSH
3878: CALL_OW 44
3882: ST_TO_ADDR
// PlaceUnitXYR ( un , 130 , 153 , 3 , false ) ;
3883: LD_VAR 0 2
3887: PPUSH
3888: LD_INT 130
3890: PPUSH
3891: LD_INT 153
3893: PPUSH
3894: LD_INT 3
3896: PPUSH
3897: LD_INT 0
3899: PPUSH
3900: CALL_OW 50
// SetClass ( un , class_sniper ) ;
3904: LD_VAR 0 2
3908: PPUSH
3909: LD_INT 5
3911: PPUSH
3912: CALL_OW 336
// AddComAgressiveMove ( un , 108 , 108 ) ;
3916: LD_VAR 0 2
3920: PPUSH
3921: LD_INT 108
3923: PPUSH
3924: LD_INT 108
3926: PPUSH
3927: CALL_OW 174
// end ;
3931: GO 3860
3933: POP
3934: POP
// end ;
3935: PPOPN 3
3937: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( northScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3938: LD_EXP 3
3942: PUSH
3943: LD_EXP 5
3947: NOT
3948: AND
3949: PUSH
3950: LD_INT 10
3952: PPUSH
3953: LD_INT 22
3955: PUSH
3956: LD_INT 2
3958: PUSH
3959: EMPTY
3960: LIST
3961: LIST
3962: PPUSH
3963: CALL_OW 70
3967: AND
3968: IFFALSE 4089
3970: GO 3972
3972: DISABLE
3973: LD_INT 0
3975: PPUSH
3976: PPUSH
3977: PPUSH
// begin uc_side := 1 ;
3978: LD_ADDR_OWVAR 20
3982: PUSH
3983: LD_INT 1
3985: ST_TO_ADDR
// uc_nation := 1 ;
3986: LD_ADDR_OWVAR 21
3990: PUSH
3991: LD_INT 1
3993: ST_TO_ADDR
// tmp := [ ] ;
3994: LD_ADDR_VAR 0 3
3998: PUSH
3999: EMPTY
4000: ST_TO_ADDR
// for i := 1 to 2 do
4001: LD_ADDR_VAR 0 1
4005: PUSH
4006: DOUBLE
4007: LD_INT 1
4009: DEC
4010: ST_TO_ADDR
4011: LD_INT 2
4013: PUSH
4014: FOR_TO
4015: IFFALSE 4087
// begin PrepareSoldier ( false , 7 ) ;
4017: LD_INT 0
4019: PPUSH
4020: LD_INT 7
4022: PPUSH
4023: CALL_OW 381
// un := CreateHuman ;
4027: LD_ADDR_VAR 0 2
4031: PUSH
4032: CALL_OW 44
4036: ST_TO_ADDR
// PlaceUnitXYR ( un , 56 , 101 , 3 , false ) ;
4037: LD_VAR 0 2
4041: PPUSH
4042: LD_INT 56
4044: PPUSH
4045: LD_INT 101
4047: PPUSH
4048: LD_INT 3
4050: PPUSH
4051: LD_INT 0
4053: PPUSH
4054: CALL_OW 50
// SetClass ( un , class_sniper ) ;
4058: LD_VAR 0 2
4062: PPUSH
4063: LD_INT 5
4065: PPUSH
4066: CALL_OW 336
// AddComAgressiveMove ( un , 72 , 92 ) ;
4070: LD_VAR 0 2
4074: PPUSH
4075: LD_INT 72
4077: PPUSH
4078: LD_INT 92
4080: PPUSH
4081: CALL_OW 174
// end ;
4085: GO 4014
4087: POP
4088: POP
// end ;
4089: PPOPN 3
4091: END
// every 0 0$2 trigger IsOk ( usCargo ) and not usSurrender do var cr , enemyInArea ;
4092: LD_EXP 32
4096: PPUSH
4097: CALL_OW 302
4101: PUSH
4102: LD_EXP 7
4106: NOT
4107: AND
4108: IFFALSE 4371
4110: GO 4112
4112: DISABLE
4113: LD_INT 0
4115: PPUSH
4116: PPUSH
// begin enable ;
4117: ENABLE
// enemyInArea := FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4118: LD_ADDR_VAR 0 2
4122: PUSH
4123: LD_INT 16
4125: PPUSH
4126: LD_INT 81
4128: PUSH
4129: LD_INT 1
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PUSH
4136: LD_INT 50
4138: PUSH
4139: EMPTY
4140: LIST
4141: PUSH
4142: EMPTY
4143: LIST
4144: LIST
4145: PPUSH
4146: CALL_OW 70
4150: ST_TO_ADDR
// cr := GetListOfCratesInArea ( usCratesArea ) ;
4151: LD_ADDR_VAR 0 1
4155: PUSH
4156: LD_INT 12
4158: PPUSH
4159: CALL_OW 435
4163: ST_TO_ADDR
// if GetFuel ( usCargo ) < 10 and not See ( 2 , usCargo ) then
4164: LD_EXP 32
4168: PPUSH
4169: CALL_OW 261
4173: PUSH
4174: LD_INT 10
4176: LESS
4177: PUSH
4178: LD_INT 2
4180: PPUSH
4181: LD_EXP 32
4185: PPUSH
4186: CALL_OW 292
4190: NOT
4191: AND
4192: IFFALSE 4206
// SetFuel ( usCargo , 100 ) ;
4194: LD_EXP 32
4198: PPUSH
4199: LD_INT 100
4201: PPUSH
4202: CALL_OW 240
// if not HasTask ( usCargo ) and GetCargo ( usCargo , mat_cans ) < 100 and not enemyInArea then
4206: LD_EXP 32
4210: PPUSH
4211: CALL_OW 314
4215: NOT
4216: PUSH
4217: LD_EXP 32
4221: PPUSH
4222: LD_INT 1
4224: PPUSH
4225: CALL_OW 289
4229: PUSH
4230: LD_INT 100
4232: LESS
4233: AND
4234: PUSH
4235: LD_VAR 0 2
4239: NOT
4240: AND
4241: IFFALSE 4307
// begin if cr then
4243: LD_VAR 0 1
4247: IFFALSE 4278
// ComCollect ( usCargo , cr [ 1 ] , cr [ 2 ] ) else
4249: LD_EXP 32
4253: PPUSH
4254: LD_VAR 0 1
4258: PUSH
4259: LD_INT 1
4261: ARRAY
4262: PPUSH
4263: LD_VAR 0 1
4267: PUSH
4268: LD_INT 2
4270: ARRAY
4271: PPUSH
4272: CALL_OW 117
4276: GO 4305
// if not IsInArea ( usCargo , usCratesArea ) then
4278: LD_EXP 32
4282: PPUSH
4283: LD_INT 12
4285: PPUSH
4286: CALL_OW 308
4290: NOT
4291: IFFALSE 4305
// ComMoveToArea ( usCargo , usCratesArea ) ;
4293: LD_EXP 32
4297: PPUSH
4298: LD_INT 12
4300: PPUSH
4301: CALL_OW 113
// exit ;
4305: GO 4371
// end ; if enemyInArea and not IsInArea ( usCargo , americanBaseArea ) then
4307: LD_VAR 0 2
4311: PUSH
4312: LD_EXP 32
4316: PPUSH
4317: LD_INT 16
4319: PPUSH
4320: CALL_OW 308
4324: NOT
4325: AND
4326: IFFALSE 4345
// ComMoveXY ( usCargo , 80 , 143 ) else
4328: LD_EXP 32
4332: PPUSH
4333: LD_INT 80
4335: PPUSH
4336: LD_INT 143
4338: PPUSH
4339: CALL_OW 111
4343: GO 4371
// if GetCargo ( usCargo , mat_cans ) then
4345: LD_EXP 32
4349: PPUSH
4350: LD_INT 1
4352: PPUSH
4353: CALL_OW 289
4357: IFFALSE 4371
// ComGive ( usCargo , usDepot ) ;
4359: LD_EXP 32
4363: PPUSH
4364: LD_INT 1
4366: PPUSH
4367: CALL_OW 161
// end ;
4371: PPOPN 2
4373: END
// every 0 0$3 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) do var i , sci ;
4374: LD_EXP 7
4378: NOT
4379: PUSH
4380: LD_INT 22
4382: PUSH
4383: LD_INT 1
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PUSH
4390: LD_INT 21
4392: PUSH
4393: LD_INT 1
4395: PUSH
4396: EMPTY
4397: LIST
4398: LIST
4399: PUSH
4400: LD_INT 3
4402: PUSH
4403: LD_INT 50
4405: PUSH
4406: EMPTY
4407: LIST
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: LIST
4417: PPUSH
4418: CALL_OW 69
4422: AND
4423: PUSH
4424: LD_INT 22
4426: PUSH
4427: LD_INT 1
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: PUSH
4434: LD_INT 3
4436: PUSH
4437: LD_INT 60
4439: PUSH
4440: EMPTY
4441: LIST
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: PUSH
4447: LD_INT 25
4449: PUSH
4450: LD_INT 4
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: LIST
4461: PPUSH
4462: CALL_OW 69
4466: AND
4467: IFFALSE 4670
4469: GO 4471
4471: DISABLE
4472: LD_INT 0
4474: PPUSH
4475: PPUSH
// begin enable ;
4476: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) do
4477: LD_ADDR_VAR 0 1
4481: PUSH
4482: LD_INT 22
4484: PUSH
4485: LD_INT 1
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: LD_INT 21
4494: PUSH
4495: LD_INT 1
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PUSH
4502: LD_INT 3
4504: PUSH
4505: LD_INT 50
4507: PUSH
4508: EMPTY
4509: LIST
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: LIST
4519: PPUSH
4520: CALL_OW 69
4524: PUSH
4525: FOR_IN
4526: IFFALSE 4668
// begin sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) ;
4528: LD_ADDR_VAR 0 2
4532: PUSH
4533: LD_INT 22
4535: PUSH
4536: LD_INT 1
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: PUSH
4543: LD_INT 3
4545: PUSH
4546: LD_INT 60
4548: PUSH
4549: EMPTY
4550: LIST
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: PUSH
4556: LD_INT 25
4558: PUSH
4559: LD_INT 4
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: LIST
4570: PPUSH
4571: CALL_OW 69
4575: ST_TO_ADDR
// if not sci then
4576: LD_VAR 0 2
4580: NOT
4581: IFFALSE 4585
// break ;
4583: GO 4668
// sci := sci [ 1 ] ;
4585: LD_ADDR_VAR 0 2
4589: PUSH
4590: LD_VAR 0 2
4594: PUSH
4595: LD_INT 1
4597: ARRAY
4598: ST_TO_ADDR
// if IsInUnit ( sci ) then
4599: LD_VAR 0 2
4603: PPUSH
4604: CALL_OW 310
4608: IFFALSE 4621
// ComExit ( sci ) else
4610: LD_VAR 0 2
4614: PPUSH
4615: CALL 53784 0 1
4619: GO 4666
// begin ComHeal ( sci , i ) ;
4621: LD_VAR 0 2
4625: PPUSH
4626: LD_VAR 0 1
4630: PPUSH
4631: CALL_OW 128
// AddComEnterUnit ( sci , [ amLab1 , amLab2 ] [ rand ( 1 , 2 ) ] ) ;
4635: LD_VAR 0 2
4639: PPUSH
4640: LD_INT 32
4642: PUSH
4643: LD_INT 33
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: PUSH
4650: LD_INT 1
4652: PPUSH
4653: LD_INT 2
4655: PPUSH
4656: CALL_OW 12
4660: ARRAY
4661: PPUSH
4662: CALL_OW 180
// end ; end ;
4666: GO 4525
4668: POP
4669: POP
// end ;
4670: PPOPN 2
4672: END
// every 0 0$2 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) do var i , tmp , tmp2 ;
4673: LD_EXP 7
4677: NOT
4678: PUSH
4679: LD_INT 22
4681: PUSH
4682: LD_INT 1
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PUSH
4689: LD_INT 3
4691: PUSH
4692: LD_INT 60
4694: PUSH
4695: EMPTY
4696: LIST
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: PUSH
4702: LD_INT 50
4704: PUSH
4705: EMPTY
4706: LIST
4707: PUSH
4708: LD_INT 34
4710: PUSH
4711: LD_INT 13
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: PPUSH
4724: CALL_OW 69
4728: AND
4729: PUSH
4730: LD_INT 22
4732: PUSH
4733: LD_INT 1
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PUSH
4740: LD_INT 3
4742: PUSH
4743: LD_INT 24
4745: PUSH
4746: LD_INT 1000
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: LD_INT 21
4759: PUSH
4760: LD_INT 3
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PUSH
4767: LD_INT 3
4769: PUSH
4770: LD_INT 30
4772: PUSH
4773: LD_INT 29
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: PUSH
4780: EMPTY
4781: LIST
4782: LIST
4783: PUSH
4784: EMPTY
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: PPUSH
4790: CALL_OW 69
4794: AND
4795: IFFALSE 5064
4797: GO 4799
4799: DISABLE
4800: LD_INT 0
4802: PPUSH
4803: PPUSH
4804: PPUSH
// begin enable ;
4805: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4806: LD_ADDR_VAR 0 2
4810: PUSH
4811: LD_INT 22
4813: PUSH
4814: LD_INT 1
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: PUSH
4821: LD_INT 3
4823: PUSH
4824: LD_INT 24
4826: PUSH
4827: LD_INT 1000
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: LD_INT 21
4840: PUSH
4841: LD_INT 3
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PUSH
4848: LD_INT 3
4850: PUSH
4851: LD_INT 30
4853: PUSH
4854: LD_INT 29
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: PPUSH
4871: CALL_OW 69
4875: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4876: LD_ADDR_VAR 0 3
4880: PUSH
4881: LD_INT 22
4883: PUSH
4884: LD_INT 1
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: LD_INT 3
4893: PUSH
4894: LD_INT 24
4896: PUSH
4897: LD_INT 600
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 21
4910: PUSH
4911: LD_INT 3
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 3
4920: PUSH
4921: LD_INT 30
4923: PUSH
4924: LD_INT 29
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: LIST
4939: LIST
4940: PPUSH
4941: CALL_OW 69
4945: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4946: LD_ADDR_VAR 0 1
4950: PUSH
4951: LD_INT 22
4953: PUSH
4954: LD_INT 1
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: LD_INT 3
4963: PUSH
4964: LD_INT 60
4966: PUSH
4967: EMPTY
4968: LIST
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PUSH
4974: LD_INT 50
4976: PUSH
4977: EMPTY
4978: LIST
4979: PUSH
4980: LD_INT 34
4982: PUSH
4983: LD_INT 13
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: PPUSH
4996: CALL_OW 69
5000: PUSH
5001: FOR_IN
5002: IFFALSE 5062
// begin if tmp2 then
5004: LD_VAR 0 3
5008: IFFALSE 5036
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
5010: LD_VAR 0 1
5014: PPUSH
5015: LD_VAR 0 3
5019: PPUSH
5020: LD_VAR 0 1
5024: PPUSH
5025: CALL_OW 74
5029: PPUSH
5030: CALL_OW 130
5034: GO 5060
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
5036: LD_VAR 0 1
5040: PPUSH
5041: LD_VAR 0 2
5045: PPUSH
5046: LD_VAR 0 1
5050: PPUSH
5051: CALL_OW 74
5055: PPUSH
5056: CALL_OW 130
// end ;
5060: GO 5001
5062: POP
5063: POP
// end ;
5064: PPOPN 3
5066: END
// every 0 0$1 trigger not usSurrender and not FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) and usToBuild and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
5067: LD_EXP 7
5071: NOT
5072: PUSH
5073: LD_INT 16
5075: PPUSH
5076: LD_INT 81
5078: PUSH
5079: LD_INT 1
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: LD_INT 50
5088: PUSH
5089: EMPTY
5090: LIST
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PPUSH
5096: CALL_OW 70
5100: NOT
5101: AND
5102: PUSH
5103: LD_EXP 33
5107: AND
5108: PUSH
5109: LD_INT 22
5111: PUSH
5112: LD_INT 1
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: PUSH
5119: LD_INT 3
5121: PUSH
5122: LD_INT 60
5124: PUSH
5125: EMPTY
5126: LIST
5127: PUSH
5128: EMPTY
5129: LIST
5130: LIST
5131: PUSH
5132: LD_INT 50
5134: PUSH
5135: EMPTY
5136: LIST
5137: PUSH
5138: LD_INT 34
5140: PUSH
5141: LD_INT 13
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: LIST
5152: LIST
5153: PPUSH
5154: CALL_OW 69
5158: AND
5159: IFFALSE 5271
5161: GO 5163
5163: DISABLE
// begin enable ;
5164: ENABLE
// ComCraneBuild ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) , usToBuild [ 1 ] [ 1 ] , usToBuild [ 1 ] [ 2 ] , usToBuild [ 1 ] [ 3 ] , usToBuild [ 1 ] [ 4 ] ) ;
5165: LD_INT 22
5167: PUSH
5168: LD_INT 1
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PUSH
5175: LD_INT 3
5177: PUSH
5178: LD_INT 60
5180: PUSH
5181: EMPTY
5182: LIST
5183: PUSH
5184: EMPTY
5185: LIST
5186: LIST
5187: PUSH
5188: LD_INT 50
5190: PUSH
5191: EMPTY
5192: LIST
5193: PUSH
5194: LD_INT 34
5196: PUSH
5197: LD_INT 13
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: PPUSH
5210: CALL_OW 69
5214: PPUSH
5215: LD_EXP 33
5219: PUSH
5220: LD_INT 1
5222: ARRAY
5223: PUSH
5224: LD_INT 1
5226: ARRAY
5227: PPUSH
5228: LD_EXP 33
5232: PUSH
5233: LD_INT 1
5235: ARRAY
5236: PUSH
5237: LD_INT 2
5239: ARRAY
5240: PPUSH
5241: LD_EXP 33
5245: PUSH
5246: LD_INT 1
5248: ARRAY
5249: PUSH
5250: LD_INT 3
5252: ARRAY
5253: PPUSH
5254: LD_EXP 33
5258: PUSH
5259: LD_INT 1
5261: ARRAY
5262: PUSH
5263: LD_INT 4
5265: ARRAY
5266: PPUSH
5267: CALL_OW 566
// end ;
5271: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) do var i , tmp , btmp , barracks ;
5272: LD_INT 22
5274: PUSH
5275: LD_INT 1
5277: PUSH
5278: EMPTY
5279: LIST
5280: LIST
5281: PUSH
5282: LD_INT 50
5284: PUSH
5285: EMPTY
5286: LIST
5287: PUSH
5288: LD_INT 3
5290: PUSH
5291: LD_INT 54
5293: PUSH
5294: EMPTY
5295: LIST
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: PUSH
5301: LD_INT 2
5303: PUSH
5304: LD_INT 25
5306: PUSH
5307: LD_INT 1
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: PUSH
5314: LD_INT 25
5316: PUSH
5317: LD_INT 5
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: PUSH
5324: LD_INT 25
5326: PUSH
5327: LD_INT 16
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: LIST
5338: LIST
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: PPUSH
5346: CALL_OW 69
5350: IFFALSE 5712
5352: GO 5354
5354: DISABLE
5355: LD_INT 0
5357: PPUSH
5358: PPUSH
5359: PPUSH
5360: PPUSH
// begin enable ;
5361: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) ;
5362: LD_ADDR_VAR 0 2
5366: PUSH
5367: LD_INT 22
5369: PUSH
5370: LD_INT 1
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: PUSH
5377: LD_INT 50
5379: PUSH
5380: EMPTY
5381: LIST
5382: PUSH
5383: LD_INT 3
5385: PUSH
5386: LD_INT 54
5388: PUSH
5389: EMPTY
5390: LIST
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: PUSH
5396: LD_INT 2
5398: PUSH
5399: LD_INT 25
5401: PUSH
5402: LD_INT 1
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: PUSH
5409: LD_INT 25
5411: PUSH
5412: LD_INT 5
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: PUSH
5419: LD_INT 25
5421: PUSH
5422: LD_INT 16
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: PPUSH
5441: CALL_OW 69
5445: ST_TO_ADDR
// btmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
5446: LD_ADDR_VAR 0 3
5450: PUSH
5451: LD_INT 22
5453: PUSH
5454: LD_INT 1
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: PUSH
5461: LD_INT 50
5463: PUSH
5464: EMPTY
5465: LIST
5466: PUSH
5467: LD_INT 21
5469: PUSH
5470: LD_INT 3
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: PUSH
5477: LD_INT 30
5479: PUSH
5480: LD_INT 32
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: PUSH
5487: LD_INT 58
5489: PUSH
5490: EMPTY
5491: LIST
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: LIST
5497: LIST
5498: LIST
5499: PPUSH
5500: CALL_OW 69
5504: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) ;
5505: LD_ADDR_VAR 0 4
5509: PUSH
5510: LD_INT 22
5512: PUSH
5513: LD_INT 1
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: PUSH
5520: LD_INT 50
5522: PUSH
5523: EMPTY
5524: LIST
5525: PUSH
5526: LD_INT 30
5528: PUSH
5529: LD_INT 5
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PUSH
5536: EMPTY
5537: LIST
5538: LIST
5539: LIST
5540: PPUSH
5541: CALL_OW 69
5545: ST_TO_ADDR
// if not tmp then
5546: LD_VAR 0 2
5550: NOT
5551: IFFALSE 5555
// exit ;
5553: GO 5712
// for i in tmp do
5555: LD_ADDR_VAR 0 1
5559: PUSH
5560: LD_VAR 0 2
5564: PUSH
5565: FOR_IN
5566: IFFALSE 5710
// begin btmp := FilterByTag ( btmp , 0 ) ;
5568: LD_ADDR_VAR 0 3
5572: PUSH
5573: LD_VAR 0 3
5577: PPUSH
5578: LD_INT 0
5580: PPUSH
5581: CALL 50955 0 2
5585: ST_TO_ADDR
// if not btmp then
5586: LD_VAR 0 3
5590: NOT
5591: IFFALSE 5636
// begin if GetClass ( i ) <> class_apeman_engineer and barracks then
5593: LD_VAR 0 1
5597: PPUSH
5598: CALL_OW 257
5602: PUSH
5603: LD_INT 16
5605: NONEQUAL
5606: PUSH
5607: LD_VAR 0 4
5611: AND
5612: IFFALSE 5632
// ComEnterUnit ( i , barracks [ 1 ] ) ;
5614: LD_VAR 0 1
5618: PPUSH
5619: LD_VAR 0 4
5623: PUSH
5624: LD_INT 1
5626: ARRAY
5627: PPUSH
5628: CALL_OW 120
// continue ;
5632: GO 5565
// end else
5634: GO 5708
// begin SetTag ( btmp [ 1 ] , 1 ) ;
5636: LD_VAR 0 3
5640: PUSH
5641: LD_INT 1
5643: ARRAY
5644: PPUSH
5645: LD_INT 1
5647: PPUSH
5648: CALL_OW 109
// ComEnterUnit ( i , btmp [ 1 ] ) ;
5652: LD_VAR 0 1
5656: PPUSH
5657: LD_VAR 0 3
5661: PUSH
5662: LD_INT 1
5664: ARRAY
5665: PPUSH
5666: CALL_OW 120
// wait ( 0 0$9 ) ;
5670: LD_INT 315
5672: PPUSH
5673: CALL_OW 67
// if IsEmpty ( btmp [ 1 ] ) then
5677: LD_VAR 0 3
5681: PUSH
5682: LD_INT 1
5684: ARRAY
5685: PPUSH
5686: CALL 17808 0 1
5690: IFFALSE 5708
// SetTag ( btmp [ 1 ] , 0 ) ;
5692: LD_VAR 0 3
5696: PUSH
5697: LD_INT 1
5699: ARRAY
5700: PPUSH
5701: LD_INT 0
5703: PPUSH
5704: CALL_OW 109
// end ; end ;
5708: GO 5565
5710: POP
5711: POP
// end ;
5712: PPOPN 4
5714: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do var i , tmp ;
5715: LD_INT 22
5717: PUSH
5718: LD_INT 1
5720: PUSH
5721: EMPTY
5722: LIST
5723: LIST
5724: PUSH
5725: LD_INT 33
5727: PUSH
5728: LD_INT 2
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: PUSH
5735: LD_INT 50
5737: PUSH
5738: EMPTY
5739: LIST
5740: PUSH
5741: LD_INT 3
5743: PUSH
5744: LD_INT 61
5746: PUSH
5747: EMPTY
5748: LIST
5749: PUSH
5750: EMPTY
5751: LIST
5752: LIST
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: LIST
5758: LIST
5759: PPUSH
5760: CALL_OW 69
5764: IFFALSE 5855
5766: GO 5768
5768: DISABLE
5769: LD_INT 0
5771: PPUSH
5772: PPUSH
// begin enable ;
5773: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
5774: LD_ADDR_VAR 0 2
5778: PUSH
5779: LD_INT 22
5781: PUSH
5782: LD_INT 1
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PUSH
5789: LD_INT 33
5791: PUSH
5792: LD_INT 2
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: PUSH
5799: LD_INT 50
5801: PUSH
5802: EMPTY
5803: LIST
5804: PUSH
5805: LD_INT 3
5807: PUSH
5808: LD_INT 61
5810: PUSH
5811: EMPTY
5812: LIST
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: LIST
5822: LIST
5823: PPUSH
5824: CALL_OW 69
5828: ST_TO_ADDR
// for i in tmp do
5829: LD_ADDR_VAR 0 1
5833: PUSH
5834: LD_VAR 0 2
5838: PUSH
5839: FOR_IN
5840: IFFALSE 5853
// Connect ( i ) ;
5842: LD_VAR 0 1
5846: PPUSH
5847: CALL 23992 0 1
5851: GO 5839
5853: POP
5854: POP
// end ;
5855: PPOPN 2
5857: END
// every 1 1$00 trigger usAttacksAllowed and Difficulty > 1 do var i , un , veh , chassis , weapon ;
5858: LD_EXP 6
5862: PUSH
5863: LD_OWVAR 67
5867: PUSH
5868: LD_INT 1
5870: GREATER
5871: AND
5872: IFFALSE 6314
5874: GO 5876
5876: DISABLE
5877: LD_INT 0
5879: PPUSH
5880: PPUSH
5881: PPUSH
5882: PPUSH
5883: PPUSH
// begin wait ( [ 15 15$00 , 15 15$00 , 14 14$00 , 13 13$00 ] [ Difficulty ] ) ;
5884: LD_INT 31500
5886: PUSH
5887: LD_INT 31500
5889: PUSH
5890: LD_INT 29400
5892: PUSH
5893: LD_INT 27300
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: PUSH
5902: LD_OWVAR 67
5906: ARRAY
5907: PPUSH
5908: CALL_OW 67
// if usSurrender then
5912: LD_EXP 7
5916: IFFALSE 5920
// exit ;
5918: GO 6314
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] do
5920: LD_ADDR_VAR 0 1
5924: PUSH
5925: DOUBLE
5926: LD_INT 1
5928: DEC
5929: ST_TO_ADDR
5930: LD_INT 4
5932: PUSH
5933: LD_INT 5
5935: PUSH
5936: LD_INT 5
5938: PUSH
5939: LD_INT 6
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: PUSH
5948: LD_OWVAR 67
5952: ARRAY
5953: PUSH
5954: FOR_TO
5955: IFFALSE 6259
// begin uc_side := 1 ;
5957: LD_ADDR_OWVAR 20
5961: PUSH
5962: LD_INT 1
5964: ST_TO_ADDR
// uc_nation := 1 ;
5965: LD_ADDR_OWVAR 21
5969: PUSH
5970: LD_INT 1
5972: ST_TO_ADDR
// InitHc_All ( ) ;
5973: CALL_OW 584
// PrepareHuman ( false , 3 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
5977: LD_INT 0
5979: PPUSH
5980: LD_INT 3
5982: PPUSH
5983: LD_INT 5
5985: PUSH
5986: LD_INT 6
5988: PUSH
5989: LD_INT 7
5991: PUSH
5992: LD_INT 8
5994: PUSH
5995: EMPTY
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: PUSH
6001: LD_OWVAR 67
6005: ARRAY
6006: PPUSH
6007: CALL_OW 380
// un := CreateHuman ;
6011: LD_ADDR_VAR 0 2
6015: PUSH
6016: CALL_OW 44
6020: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ i mod 3 + 1 ] ;
6021: LD_ADDR_VAR 0 4
6025: PUSH
6026: LD_INT 2
6028: PUSH
6029: LD_INT 3
6031: PUSH
6032: LD_INT 4
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: LIST
6039: PUSH
6040: LD_VAR 0 1
6044: PUSH
6045: LD_INT 3
6047: MOD
6048: PUSH
6049: LD_INT 1
6051: PLUS
6052: ARRAY
6053: ST_TO_ADDR
// if chassis = us_heavy_tracked then
6054: LD_VAR 0 4
6058: PUSH
6059: LD_INT 4
6061: EQUAL
6062: IFFALSE 6097
// weapon := [ us_heavy_gun , us_gatling_gun , us_double_gun ] [ rand ( 1 , 3 ) ] else
6064: LD_ADDR_VAR 0 5
6068: PUSH
6069: LD_INT 6
6071: PUSH
6072: LD_INT 4
6074: PUSH
6075: LD_INT 5
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: LIST
6082: PUSH
6083: LD_INT 1
6085: PPUSH
6086: LD_INT 3
6088: PPUSH
6089: CALL_OW 12
6093: ARRAY
6094: ST_TO_ADDR
6095: GO 6132
// weapon := [ us_double_gun , us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6097: LD_ADDR_VAR 0 5
6101: PUSH
6102: LD_INT 5
6104: PUSH
6105: LD_INT 5
6107: PUSH
6108: LD_INT 7
6110: PUSH
6111: LD_INT 4
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: PUSH
6120: LD_INT 1
6122: PPUSH
6123: LD_INT 4
6125: PPUSH
6126: CALL_OW 12
6130: ARRAY
6131: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_manual , weapon , 30 ) ;
6132: LD_VAR 0 4
6136: PPUSH
6137: LD_INT 1
6139: PPUSH
6140: LD_INT 1
6142: PPUSH
6143: LD_VAR 0 5
6147: PPUSH
6148: LD_INT 30
6150: PPUSH
6151: CALL 20524 0 5
// veh := CreateVehicle ;
6155: LD_ADDR_VAR 0 3
6159: PUSH
6160: CALL_OW 45
6164: ST_TO_ADDR
// usAdditionalForces := Replace ( usAdditionalForces , usAdditionalForces + 1 , veh ) ;
6165: LD_ADDR_EXP 34
6169: PUSH
6170: LD_EXP 34
6174: PPUSH
6175: LD_EXP 34
6179: PUSH
6180: LD_INT 1
6182: PLUS
6183: PPUSH
6184: LD_VAR 0 3
6188: PPUSH
6189: CALL_OW 1
6193: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6194: LD_VAR 0 3
6198: PPUSH
6199: LD_INT 4
6201: PPUSH
6202: CALL_OW 233
// PlaceUnitArea ( veh , americanEastArea , false ) ;
6206: LD_VAR 0 3
6210: PPUSH
6211: LD_INT 17
6213: PPUSH
6214: LD_INT 0
6216: PPUSH
6217: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6221: LD_VAR 0 2
6225: PPUSH
6226: LD_VAR 0 3
6230: PPUSH
6231: CALL_OW 52
// ComMoveXY ( veh , 153 , 45 ) ;
6235: LD_VAR 0 3
6239: PPUSH
6240: LD_INT 153
6242: PPUSH
6243: LD_INT 45
6245: PPUSH
6246: CALL_OW 111
// wait ( 0 0$2 ) ;
6250: LD_INT 70
6252: PPUSH
6253: CALL_OW 67
// end ;
6257: GO 5954
6259: POP
6260: POP
// repeat wait ( 0 0$1 ) ;
6261: LD_INT 35
6263: PPUSH
6264: CALL_OW 67
// usAdditionalForces := AgressiveMove ( usAdditionalForces , [ [ 150 , 36 ] , [ 138 , 25 ] ] ) ;
6268: LD_ADDR_EXP 34
6272: PUSH
6273: LD_EXP 34
6277: PPUSH
6278: LD_INT 150
6280: PUSH
6281: LD_INT 36
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PUSH
6288: LD_INT 138
6290: PUSH
6291: LD_INT 25
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: PPUSH
6302: CALL 55990 0 2
6306: ST_TO_ADDR
// until not usAdditionalForces ;
6307: LD_EXP 34
6311: NOT
6312: IFFALSE 6261
// end ;
6314: PPOPN 5
6316: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 2 ] ] ) do
6317: LD_INT 22
6319: PUSH
6320: LD_INT 1
6322: PUSH
6323: EMPTY
6324: LIST
6325: LIST
6326: PUSH
6327: LD_INT 101
6329: PUSH
6330: LD_INT 2
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: PPUSH
6341: CALL_OW 69
6345: IFFALSE 6365
6347: GO 6349
6349: DISABLE
// begin wait ( 0 0$30 ) ;
6350: LD_INT 1050
6352: PPUSH
6353: CALL_OW 67
// usAttacksAllowed := true ;
6357: LD_ADDR_EXP 6
6361: PUSH
6362: LD_INT 1
6364: ST_TO_ADDR
// end ; end_of_file
6365: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6366: LD_VAR 0 1
6370: PPUSH
6371: CALL 57771 0 1
// if un = Heike then
6375: LD_VAR 0 1
6379: PUSH
6380: LD_EXP 15
6384: EQUAL
6385: IFFALSE 6394
// YouLost ( Heike ) ;
6387: LD_STRING Heike
6389: PPUSH
6390: CALL_OW 104
// if un = usCommander then
6394: LD_VAR 0 1
6398: PUSH
6399: LD_EXP 30
6403: EQUAL
6404: IFFALSE 6413
// YouLost ( Commander ) ;
6406: LD_STRING Commander
6408: PPUSH
6409: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_vehicle then
6413: LD_VAR 0 1
6417: PPUSH
6418: CALL_OW 255
6422: PUSH
6423: LD_INT 2
6425: EQUAL
6426: PUSH
6427: LD_VAR 0 1
6431: PPUSH
6432: CALL_OW 247
6436: PUSH
6437: LD_INT 2
6439: EQUAL
6440: AND
6441: IFFALSE 6458
// vehLossCounter := Inc ( vehLossCounter ) ;
6443: LD_ADDR_EXP 14
6447: PUSH
6448: LD_EXP 14
6452: PPUSH
6453: CALL 54747 0 1
6457: ST_TO_ADDR
// if GetSide ( un ) = 1 then
6458: LD_VAR 0 1
6462: PPUSH
6463: CALL_OW 255
6467: PUSH
6468: LD_INT 1
6470: EQUAL
6471: IFFALSE 6794
// begin if GetClass ( un ) = class_sniper then
6473: LD_VAR 0 1
6477: PPUSH
6478: CALL_OW 257
6482: PUSH
6483: LD_INT 5
6485: EQUAL
6486: IFFALSE 6503
// sniperKillCounter := Inc ( sniperKillCounter ) ;
6488: LD_ADDR_EXP 13
6492: PUSH
6493: LD_EXP 13
6497: PPUSH
6498: CALL 54747 0 1
6502: ST_TO_ADDR
// if GetWeapon ( un ) = us_crane and IsOk ( amFac ) then
6503: LD_VAR 0 1
6507: PPUSH
6508: CALL_OW 264
6512: PUSH
6513: LD_INT 13
6515: EQUAL
6516: PUSH
6517: LD_INT 25
6519: PPUSH
6520: CALL_OW 302
6524: AND
6525: IFFALSE 6588
// begin wait ( 0 0$05 * Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ) ) ;
6527: LD_INT 175
6529: PUSH
6530: LD_INT 22
6532: PUSH
6533: LD_INT 1
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: PUSH
6540: LD_INT 34
6542: PUSH
6543: LD_INT 13
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: PPUSH
6554: CALL_OW 69
6558: PPUSH
6559: CALL 17786 0 1
6563: MUL
6564: PPUSH
6565: CALL_OW 67
// AddComConstruct ( amFac , us_medium_wheeled , engine_solar , control_remote , us_crane ) ;
6569: LD_INT 25
6571: PPUSH
6572: LD_INT 2
6574: PPUSH
6575: LD_INT 2
6577: PPUSH
6578: LD_INT 2
6580: PPUSH
6581: LD_INT 13
6583: PPUSH
6584: CALL_OW 185
// end ; if GetWeapon ( un ) = us_cargo_bay and IsOk ( amFac ) then
6588: LD_VAR 0 1
6592: PPUSH
6593: CALL_OW 264
6597: PUSH
6598: LD_INT 12
6600: EQUAL
6601: PUSH
6602: LD_INT 25
6604: PPUSH
6605: CALL_OW 302
6609: AND
6610: IFFALSE 6631
// AddComConstruct ( amFac , us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ) ;
6612: LD_INT 25
6614: PPUSH
6615: LD_INT 2
6617: PPUSH
6618: LD_INT 1
6620: PPUSH
6621: LD_INT 2
6623: PPUSH
6624: LD_INT 12
6626: PPUSH
6627: CALL_OW 185
// if GetBType ( un ) = b_bunker then
6631: LD_VAR 0 1
6635: PPUSH
6636: CALL_OW 266
6640: PUSH
6641: LD_INT 32
6643: EQUAL
6644: IFFALSE 6709
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_bunker , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6646: LD_ADDR_EXP 33
6650: PUSH
6651: LD_EXP 33
6655: PPUSH
6656: LD_EXP 33
6660: PUSH
6661: LD_INT 1
6663: PLUS
6664: PPUSH
6665: LD_INT 32
6667: PUSH
6668: LD_VAR 0 1
6672: PPUSH
6673: CALL_OW 250
6677: PUSH
6678: LD_VAR 0 1
6682: PPUSH
6683: CALL_OW 251
6687: PUSH
6688: LD_VAR 0 1
6692: PPUSH
6693: CALL_OW 254
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: PPUSH
6704: CALL_OW 1
6708: ST_TO_ADDR
// if GetBType ( un ) in [ b_barracks , b_armoury ] then
6709: LD_VAR 0 1
6713: PPUSH
6714: CALL_OW 266
6718: PUSH
6719: LD_INT 5
6721: PUSH
6722: LD_INT 4
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: IN
6729: IFFALSE 6794
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_armoury , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6731: LD_ADDR_EXP 33
6735: PUSH
6736: LD_EXP 33
6740: PPUSH
6741: LD_EXP 33
6745: PUSH
6746: LD_INT 1
6748: PLUS
6749: PPUSH
6750: LD_INT 4
6752: PUSH
6753: LD_VAR 0 1
6757: PPUSH
6758: CALL_OW 250
6762: PUSH
6763: LD_VAR 0 1
6767: PPUSH
6768: CALL_OW 251
6772: PUSH
6773: LD_VAR 0 1
6777: PPUSH
6778: CALL_OW 254
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: PPUSH
6789: CALL_OW 1
6793: ST_TO_ADDR
// end ; end ;
6794: PPOPN 1
6796: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 1 and GetTag ( un ) = 1 then
6797: LD_VAR 0 1
6801: PPUSH
6802: CALL_OW 255
6806: PUSH
6807: LD_INT 1
6809: EQUAL
6810: PUSH
6811: LD_VAR 0 1
6815: PPUSH
6816: CALL_OW 110
6820: PUSH
6821: LD_INT 1
6823: EQUAL
6824: AND
6825: IFFALSE 6839
// SetTag ( un , 0 ) ;
6827: LD_VAR 0 1
6831: PPUSH
6832: LD_INT 0
6834: PPUSH
6835: CALL_OW 109
// if GetSide ( un ) = 1 and GetWeapon ( un ) = us_heavy_gun and not seeHeavyGun then
6839: LD_VAR 0 1
6843: PPUSH
6844: CALL_OW 255
6848: PUSH
6849: LD_INT 1
6851: EQUAL
6852: PUSH
6853: LD_VAR 0 1
6857: PPUSH
6858: CALL_OW 264
6862: PUSH
6863: LD_INT 6
6865: EQUAL
6866: AND
6867: PUSH
6868: LD_EXP 11
6872: NOT
6873: AND
6874: IFFALSE 6884
// seeHeavyGun := true ;
6876: LD_ADDR_EXP 11
6880: PUSH
6881: LD_INT 1
6883: ST_TO_ADDR
// if GetControl ( un ) = control_remote and GetSide ( un ) <> 2 then
6884: LD_VAR 0 1
6888: PPUSH
6889: CALL_OW 263
6893: PUSH
6894: LD_INT 2
6896: EQUAL
6897: PUSH
6898: LD_VAR 0 1
6902: PPUSH
6903: CALL_OW 255
6907: PUSH
6908: LD_INT 2
6910: NONEQUAL
6911: AND
6912: IFFALSE 6938
// begin ComUnlink ( un ) ;
6914: LD_VAR 0 1
6918: PPUSH
6919: CALL_OW 136
// if not seeRemoteVehicle then
6923: LD_EXP 10
6927: NOT
6928: IFFALSE 6938
// seeRemoteVehicle := true ;
6930: LD_ADDR_EXP 10
6934: PUSH
6935: LD_INT 1
6937: ST_TO_ADDR
// end ; end ;
6938: PPOPN 1
6940: END
// on BuildingComplete ( b ) do var i , barracks ;
6941: LD_INT 0
6943: PPUSH
6944: PPUSH
// begin if GetSide ( b ) = 2 then
6945: LD_VAR 0 1
6949: PPUSH
6950: CALL_OW 255
6954: PUSH
6955: LD_INT 2
6957: EQUAL
6958: IFFALSE 6996
// begin if GetBType ( b ) = b_depot and IsInArea ( b , westBankArea ) then
6960: LD_VAR 0 1
6964: PPUSH
6965: CALL_OW 266
6969: PUSH
6970: LD_INT 0
6972: EQUAL
6973: PUSH
6974: LD_VAR 0 1
6978: PPUSH
6979: LD_INT 18
6981: PPUSH
6982: CALL_OW 308
6986: AND
6987: IFFALSE 6996
// SetAchievement ( ACH_WEST ) ;
6989: LD_STRING ACH_WEST
6991: PPUSH
6992: CALL_OW 543
// end ; if GetSide ( b ) = 1 then
6996: LD_VAR 0 1
7000: PPUSH
7001: CALL_OW 255
7005: PUSH
7006: LD_INT 1
7008: EQUAL
7009: IFFALSE 7161
// begin usToBuild := Delete ( usToBuild , 1 ) ;
7011: LD_ADDR_EXP 33
7015: PUSH
7016: LD_EXP 33
7020: PPUSH
7021: LD_INT 1
7023: PPUSH
7024: CALL_OW 3
7028: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
7029: LD_VAR 0 1
7033: PPUSH
7034: CALL_OW 266
7038: PUSH
7039: LD_INT 4
7041: EQUAL
7042: IFFALSE 7053
// ComUpgrade ( b ) ;
7044: LD_VAR 0 1
7048: PPUSH
7049: CALL_OW 146
// if GetBType ( b ) = b_bunker then
7053: LD_VAR 0 1
7057: PPUSH
7058: CALL_OW 266
7062: PUSH
7063: LD_INT 32
7065: EQUAL
7066: IFFALSE 7161
// begin AddComPlaceWeapon ( b , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
7068: LD_VAR 0 1
7072: PPUSH
7073: LD_INT 6
7075: PUSH
7076: LD_INT 7
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: LD_INT 1
7085: PPUSH
7086: LD_INT 2
7088: PPUSH
7089: CALL_OW 12
7093: ARRAY
7094: PPUSH
7095: CALL_OW 208
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
7099: LD_ADDR_VAR 0 3
7103: PUSH
7104: LD_INT 22
7106: PUSH
7107: LD_INT 1
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PUSH
7114: LD_INT 30
7116: PUSH
7117: LD_INT 5
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PPUSH
7128: CALL_OW 69
7132: ST_TO_ADDR
// if barracks then
7133: LD_VAR 0 3
7137: IFFALSE 7161
// ComExitBuilding ( UnitsInside ( barracks [ 1 ] ) [ 1 ] ) ;
7139: LD_VAR 0 3
7143: PUSH
7144: LD_INT 1
7146: ARRAY
7147: PPUSH
7148: CALL_OW 313
7152: PUSH
7153: LD_INT 1
7155: ARRAY
7156: PPUSH
7157: CALL_OW 122
// end ; end ; end ;
7161: PPOPN 3
7163: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7164: LD_VAR 0 1
7168: PPUSH
7169: LD_VAR 0 2
7173: PPUSH
7174: CALL 57891 0 2
// if GetSide ( factory ) = 1 then
7178: LD_VAR 0 2
7182: PPUSH
7183: CALL_OW 255
7187: PUSH
7188: LD_INT 1
7190: EQUAL
7191: IFFALSE 7270
// begin if GetWeapon ( vehicle ) = us_cargo_bay then
7193: LD_VAR 0 1
7197: PPUSH
7198: CALL_OW 264
7202: PUSH
7203: LD_INT 12
7205: EQUAL
7206: IFFALSE 7218
// usCargo := vehicle ;
7208: LD_ADDR_EXP 32
7212: PUSH
7213: LD_VAR 0 1
7217: ST_TO_ADDR
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , us_crane ] then
7218: LD_VAR 0 1
7222: PPUSH
7223: CALL_OW 264
7227: PUSH
7228: LD_INT 12
7230: PUSH
7231: LD_INT 13
7233: PUSH
7234: EMPTY
7235: LIST
7236: LIST
7237: IN
7238: NOT
7239: IFFALSE 7270
// usForces := Replace ( usForces , usForces + 1 , vehicle ) ;
7241: LD_ADDR_EXP 31
7245: PUSH
7246: LD_EXP 31
7250: PPUSH
7251: LD_EXP 31
7255: PUSH
7256: LD_INT 1
7258: PLUS
7259: PPUSH
7260: LD_VAR 0 1
7264: PPUSH
7265: CALL_OW 1
7269: ST_TO_ADDR
// end ; end ;
7270: PPOPN 2
7272: END
// on EvacuateVehicle ( un , veh , p1 , p2 ) do begin if GetSide ( veh ) = 1 then
7273: LD_VAR 0 2
7277: PPUSH
7278: CALL_OW 255
7282: PUSH
7283: LD_INT 1
7285: EQUAL
7286: IFFALSE 7300
// AddComEnterUnit ( un , amFac ) ;
7288: LD_VAR 0 1
7292: PPUSH
7293: LD_INT 25
7295: PPUSH
7296: CALL_OW 180
// end ;
7300: PPOPN 4
7302: END
// on EvacuateBuilding ( b , un ) do begin if GetSide ( b ) = 1 and GetBType ( b ) = b_bunker and GetClass ( un ) in [ class_soldier , class_sniper ] and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] , [ f_ok ] ] ) then
7303: LD_VAR 0 1
7307: PPUSH
7308: CALL_OW 255
7312: PUSH
7313: LD_INT 1
7315: EQUAL
7316: PUSH
7317: LD_VAR 0 1
7321: PPUSH
7322: CALL_OW 266
7326: PUSH
7327: LD_INT 32
7329: EQUAL
7330: AND
7331: PUSH
7332: LD_VAR 0 2
7336: PPUSH
7337: CALL_OW 257
7341: PUSH
7342: LD_INT 1
7344: PUSH
7345: LD_INT 5
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: IN
7352: AND
7353: PUSH
7354: LD_INT 22
7356: PUSH
7357: LD_INT 1
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: PUSH
7364: LD_INT 30
7366: PUSH
7367: LD_INT 5
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: PUSH
7374: LD_INT 50
7376: PUSH
7377: EMPTY
7378: LIST
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: LIST
7384: PPUSH
7385: CALL_OW 69
7389: AND
7390: IFFALSE 7460
// if UnitsInside ( HexInfo ( 74 , 120 ) ) < 6 then
7392: LD_INT 74
7394: PPUSH
7395: LD_INT 120
7397: PPUSH
7398: CALL_OW 428
7402: PPUSH
7403: CALL_OW 313
7407: PUSH
7408: LD_INT 6
7410: LESS
7411: IFFALSE 7460
// begin ComEnterUnit ( un , HexInfo ( 74 , 120 ) ) ;
7413: LD_VAR 0 2
7417: PPUSH
7418: LD_INT 74
7420: PPUSH
7421: LD_INT 120
7423: PPUSH
7424: CALL_OW 428
7428: PPUSH
7429: CALL_OW 120
// if GetClass ( un ) = class_soldier then
7433: LD_VAR 0 2
7437: PPUSH
7438: CALL_OW 257
7442: PUSH
7443: LD_INT 1
7445: EQUAL
7446: IFFALSE 7460
// AddComChangeProfession ( un , class_sniper ) ;
7448: LD_VAR 0 2
7452: PPUSH
7453: LD_INT 5
7455: PPUSH
7456: CALL_OW 183
// end ; end ; end_of_file
7460: PPOPN 2
7462: END
// export function Action ; var i , j , veh , tmp , hasEng , hasCamera , driver , counter ; begin
7463: LD_INT 0
7465: PPUSH
7466: PPUSH
7467: PPUSH
7468: PPUSH
7469: PPUSH
7470: PPUSH
7471: PPUSH
7472: PPUSH
7473: PPUSH
// Video ( true ) ;
7474: LD_INT 1
7476: PPUSH
7477: CALL 53358 0 1
// music_nat := 1 ;
7481: LD_ADDR_OWVAR 71
7485: PUSH
7486: LD_INT 1
7488: ST_TO_ADDR
// music_class := music_recon ;
7489: LD_ADDR_OWVAR 72
7493: PUSH
7494: LD_INT 3
7496: ST_TO_ADDR
// PlaceSeeing ( 184 , 142 , 2 , - 10 ) ;
7497: LD_INT 184
7499: PPUSH
7500: LD_INT 142
7502: PPUSH
7503: LD_INT 2
7505: PPUSH
7506: LD_INT 10
7508: NEG
7509: PPUSH
7510: CALL_OW 330
// RemoveSeeing ( 184 , 142 , 2 ) ;
7514: LD_INT 184
7516: PPUSH
7517: LD_INT 142
7519: PPUSH
7520: LD_INT 2
7522: PPUSH
7523: CALL_OW 331
// PlaceSeeing ( 204 , 151 , 2 , - 10 ) ;
7527: LD_INT 204
7529: PPUSH
7530: LD_INT 151
7532: PPUSH
7533: LD_INT 2
7535: PPUSH
7536: LD_INT 10
7538: NEG
7539: PPUSH
7540: CALL_OW 330
// RemoveSeeing ( 204 , 151 , 2 ) ;
7544: LD_INT 204
7546: PPUSH
7547: LD_INT 151
7549: PPUSH
7550: LD_INT 2
7552: PPUSH
7553: CALL_OW 331
// CenterNowOnXY ( 184 , 142 ) ;
7557: LD_INT 184
7559: PPUSH
7560: LD_INT 142
7562: PPUSH
7563: CALL_OW 86
// wait ( 0 0$2 ) ;
7567: LD_INT 70
7569: PPUSH
7570: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
7574: LD_ADDR_VAR 0 5
7578: PUSH
7579: LD_EXP 15
7583: PUSH
7584: LD_EXP 16
7588: PUSH
7589: LD_EXP 17
7593: PUSH
7594: LD_EXP 18
7598: PUSH
7599: LD_EXP 19
7603: PUSH
7604: LD_EXP 20
7608: PUSH
7609: LD_EXP 21
7613: PUSH
7614: LD_EXP 22
7618: PUSH
7619: LD_EXP 24
7623: PUSH
7624: LD_EXP 25
7628: PUSH
7629: LD_EXP 26
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: PUSH
7647: LD_EXP 27
7651: UNION
7652: ST_TO_ADDR
// hasEng := UnitFilter ( tmp , [ f_class , 2 ] ) > 0 ;
7653: LD_ADDR_VAR 0 6
7657: PUSH
7658: LD_VAR 0 5
7662: PPUSH
7663: LD_INT 25
7665: PUSH
7666: LD_INT 2
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: PPUSH
7673: CALL_OW 72
7677: PUSH
7678: LD_INT 0
7680: GREATER
7681: ST_TO_ADDR
// hasCamera := false ;
7682: LD_ADDR_VAR 0 7
7686: PUSH
7687: LD_INT 0
7689: ST_TO_ADDR
// if not hasEng then
7690: LD_VAR 0 6
7694: NOT
7695: IFFALSE 7723
// SetClass ( tmp [ rand ( 1 , tmp ) ] , class_engineer ) ;
7697: LD_VAR 0 5
7701: PUSH
7702: LD_INT 1
7704: PPUSH
7705: LD_VAR 0 5
7709: PPUSH
7710: CALL_OW 12
7714: ARRAY
7715: PPUSH
7716: LD_INT 2
7718: PPUSH
7719: CALL_OW 336
// if heikeVehicles then
7723: LD_EXP 29
7727: IFFALSE 8351
// begin tmp := SortByClass ( tmp , class_mechanic ) ;
7729: LD_ADDR_VAR 0 5
7733: PUSH
7734: LD_VAR 0 5
7738: PPUSH
7739: LD_INT 3
7741: PPUSH
7742: CALL 55612 0 2
7746: ST_TO_ADDR
// for i in heikeVehicles do
7747: LD_ADDR_VAR 0 2
7751: PUSH
7752: LD_EXP 29
7756: PUSH
7757: FOR_IN
7758: IFFALSE 8349
// begin if not tmp then
7760: LD_VAR 0 5
7764: NOT
7765: IFFALSE 7769
// break ;
7767: GO 8349
// uc_side := 2 ;
7769: LD_ADDR_OWVAR 20
7773: PUSH
7774: LD_INT 2
7776: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
7777: LD_ADDR_OWVAR 21
7781: PUSH
7782: LD_VAR 0 2
7786: PUSH
7787: LD_INT 5
7789: ARRAY
7790: ST_TO_ADDR
// vc_chassis := i [ 1 ] ;
7791: LD_ADDR_OWVAR 37
7795: PUSH
7796: LD_VAR 0 2
7800: PUSH
7801: LD_INT 1
7803: ARRAY
7804: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
7805: LD_ADDR_OWVAR 39
7809: PUSH
7810: LD_VAR 0 2
7814: PUSH
7815: LD_INT 2
7817: ARRAY
7818: ST_TO_ADDR
// vc_control := i [ 3 ] ;
7819: LD_ADDR_OWVAR 38
7823: PUSH
7824: LD_VAR 0 2
7828: PUSH
7829: LD_INT 3
7831: ARRAY
7832: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
7833: LD_ADDR_OWVAR 40
7837: PUSH
7838: LD_VAR 0 2
7842: PUSH
7843: LD_INT 4
7845: ARRAY
7846: ST_TO_ADDR
// veh := CreateVehicle ;
7847: LD_ADDR_VAR 0 4
7851: PUSH
7852: CALL_OW 45
7856: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7857: LD_VAR 0 4
7861: PPUSH
7862: LD_INT 4
7864: PPUSH
7865: CALL_OW 233
// if i [ 3 ] = control_manual then
7869: LD_VAR 0 2
7873: PUSH
7874: LD_INT 3
7876: ARRAY
7877: PUSH
7878: LD_INT 1
7880: EQUAL
7881: IFFALSE 7966
// begin PlaceUnitArea ( veh , startArea , false ) ;
7883: LD_VAR 0 4
7887: PPUSH
7888: LD_INT 1
7890: PPUSH
7891: LD_INT 0
7893: PPUSH
7894: CALL_OW 49
// if i [ 4 ] = ar_control_tower then
7898: LD_VAR 0 2
7902: PUSH
7903: LD_INT 4
7905: ARRAY
7906: PUSH
7907: LD_INT 31
7909: EQUAL
7910: IFFALSE 7928
// SetClass ( tmp [ 1 ] , class_mechanic ) ;
7912: LD_VAR 0 5
7916: PUSH
7917: LD_INT 1
7919: ARRAY
7920: PPUSH
7921: LD_INT 3
7923: PPUSH
7924: CALL_OW 336
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
7928: LD_VAR 0 5
7932: PUSH
7933: LD_INT 1
7935: ARRAY
7936: PPUSH
7937: LD_VAR 0 4
7941: PPUSH
7942: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
7946: LD_ADDR_VAR 0 5
7950: PUSH
7951: LD_VAR 0 5
7955: PPUSH
7956: LD_INT 1
7958: PPUSH
7959: CALL_OW 3
7963: ST_TO_ADDR
// end else
7964: GO 8027
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
7966: LD_INT 22
7968: PUSH
7969: LD_INT 2
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: PUSH
7976: LD_INT 34
7978: PUSH
7979: LD_INT 31
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: PPUSH
7990: CALL_OW 69
7994: IFFALSE 8027
// begin PlaceUnitArea ( veh , startArea , false ) ;
7996: LD_VAR 0 4
8000: PPUSH
8001: LD_INT 1
8003: PPUSH
8004: LD_INT 0
8006: PPUSH
8007: CALL_OW 49
// Connect ( veh ) ;
8011: LD_VAR 0 4
8015: PPUSH
8016: CALL 23992 0 1
// wait ( 0 0$2 ) ;
8020: LD_INT 70
8022: PPUSH
8023: CALL_OW 67
// end ; SetLives ( veh , i [ 6 ] ) ;
8027: LD_VAR 0 4
8031: PPUSH
8032: LD_VAR 0 2
8036: PUSH
8037: LD_INT 6
8039: ARRAY
8040: PPUSH
8041: CALL_OW 234
// SetFuel ( veh , 20 ) ;
8045: LD_VAR 0 4
8049: PPUSH
8050: LD_INT 20
8052: PPUSH
8053: CALL_OW 240
// if i [ 7 ] and GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay ] then
8057: LD_VAR 0 2
8061: PUSH
8062: LD_INT 7
8064: ARRAY
8065: PUSH
8066: LD_VAR 0 4
8070: PPUSH
8071: CALL_OW 264
8075: PUSH
8076: LD_INT 51
8078: PUSH
8079: LD_INT 32
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: IN
8086: AND
8087: IFFALSE 8138
// begin for j := 1 to 2 do
8089: LD_ADDR_VAR 0 3
8093: PUSH
8094: DOUBLE
8095: LD_INT 1
8097: DEC
8098: ST_TO_ADDR
8099: LD_INT 2
8101: PUSH
8102: FOR_TO
8103: IFFALSE 8136
// AddCargo ( veh , j , i [ 7 ] [ j ] ) ;
8105: LD_VAR 0 4
8109: PPUSH
8110: LD_VAR 0 3
8114: PPUSH
8115: LD_VAR 0 2
8119: PUSH
8120: LD_INT 7
8122: ARRAY
8123: PUSH
8124: LD_VAR 0 3
8128: ARRAY
8129: PPUSH
8130: CALL_OW 291
8134: GO 8102
8136: POP
8137: POP
// end ; ComMoveXY ( veh , 185 , 144 ) ;
8138: LD_VAR 0 4
8142: PPUSH
8143: LD_INT 185
8145: PPUSH
8146: LD_INT 144
8148: PPUSH
8149: CALL_OW 111
// if GetControl ( veh ) = control_manual and not hasCamera and GetClass ( IsDrivenBy ( veh ) ) = 2 then
8153: LD_VAR 0 4
8157: PPUSH
8158: CALL_OW 263
8162: PUSH
8163: LD_INT 1
8165: EQUAL
8166: PUSH
8167: LD_VAR 0 7
8171: NOT
8172: AND
8173: PUSH
8174: LD_VAR 0 4
8178: PPUSH
8179: CALL_OW 311
8183: PPUSH
8184: CALL_OW 257
8188: PUSH
8189: LD_INT 2
8191: EQUAL
8192: AND
8193: IFFALSE 8298
// begin hasCamera := true ;
8195: LD_ADDR_VAR 0 7
8199: PUSH
8200: LD_INT 1
8202: ST_TO_ADDR
// driver := IsDrivenBy ( veh ) ;
8203: LD_ADDR_VAR 0 8
8207: PUSH
8208: LD_VAR 0 4
8212: PPUSH
8213: CALL_OW 311
8217: ST_TO_ADDR
// AddComMoveXY ( veh , 177 , 138 ) ;
8218: LD_VAR 0 4
8222: PPUSH
8223: LD_INT 177
8225: PPUSH
8226: LD_INT 138
8228: PPUSH
8229: CALL_OW 171
// AddComExitVehicle ( driver ) ;
8233: LD_VAR 0 8
8237: PPUSH
8238: CALL_OW 181
// AddComHiddenCamera ( driver , 190 , 150 ) ;
8242: LD_VAR 0 8
8246: PPUSH
8247: LD_INT 190
8249: PPUSH
8250: LD_INT 150
8252: PPUSH
8253: CALL_OW 217
// AddComEnterUnit ( driver , veh ) ;
8257: LD_VAR 0 8
8261: PPUSH
8262: LD_VAR 0 4
8266: PPUSH
8267: CALL_OW 180
// AddComMoveXY ( driver , 170 , 103 ) ;
8271: LD_VAR 0 8
8275: PPUSH
8276: LD_INT 170
8278: PPUSH
8279: LD_INT 103
8281: PPUSH
8282: CALL_OW 171
// CenterOnXY ( 190 , 150 ) ;
8286: LD_INT 190
8288: PPUSH
8289: LD_INT 150
8291: PPUSH
8292: CALL_OW 84
// end else
8296: GO 8340
// begin AddComWait ( veh , 0 0$2 ) ;
8298: LD_VAR 0 4
8302: PPUSH
8303: LD_INT 70
8305: PPUSH
8306: CALL_OW 202
// AddComMoveXY ( veh , 179 , 129 ) ;
8310: LD_VAR 0 4
8314: PPUSH
8315: LD_INT 179
8317: PPUSH
8318: LD_INT 129
8320: PPUSH
8321: CALL_OW 171
// AddComMoveXY ( veh , 170 , 103 ) ;
8325: LD_VAR 0 4
8329: PPUSH
8330: LD_INT 170
8332: PPUSH
8333: LD_INT 103
8335: PPUSH
8336: CALL_OW 171
// end ; wait ( 0 0$2 ) ;
8340: LD_INT 70
8342: PPUSH
8343: CALL_OW 67
// end ;
8347: GO 7757
8349: POP
8350: POP
// end ; if tmp then
8351: LD_VAR 0 5
8355: IFFALSE 8500
// begin for i in tmp do
8357: LD_ADDR_VAR 0 2
8361: PUSH
8362: LD_VAR 0 5
8366: PUSH
8367: FOR_IN
8368: IFFALSE 8498
// begin SetDir ( i , 4 ) ;
8370: LD_VAR 0 2
8374: PPUSH
8375: LD_INT 4
8377: PPUSH
8378: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
8382: LD_VAR 0 2
8386: PPUSH
8387: LD_INT 1
8389: PPUSH
8390: LD_INT 0
8392: PPUSH
8393: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
8397: LD_VAR 0 2
8401: PPUSH
8402: LD_INT 185
8404: PPUSH
8405: LD_INT 144
8407: PPUSH
8408: CALL_OW 111
// if GetClass ( i ) = 2 and not hasCamera then
8412: LD_VAR 0 2
8416: PPUSH
8417: CALL_OW 257
8421: PUSH
8422: LD_INT 2
8424: EQUAL
8425: PUSH
8426: LD_VAR 0 7
8430: NOT
8431: AND
8432: IFFALSE 8459
// begin hasCamera := true ;
8434: LD_ADDR_VAR 0 7
8438: PUSH
8439: LD_INT 1
8441: ST_TO_ADDR
// AddComHiddenCamera ( i , 190 , 150 ) ;
8442: LD_VAR 0 2
8446: PPUSH
8447: LD_INT 190
8449: PPUSH
8450: LD_INT 150
8452: PPUSH
8453: CALL_OW 217
// end else
8457: GO 8474
// AddComMoveXY ( i , 179 , 129 ) ;
8459: LD_VAR 0 2
8463: PPUSH
8464: LD_INT 179
8466: PPUSH
8467: LD_INT 129
8469: PPUSH
8470: CALL_OW 171
// AddComMoveXY ( i , 170 , 103 ) ;
8474: LD_VAR 0 2
8478: PPUSH
8479: LD_INT 170
8481: PPUSH
8482: LD_INT 103
8484: PPUSH
8485: CALL_OW 171
// wait ( 0 0$2 ) ;
8489: LD_INT 70
8491: PPUSH
8492: CALL_OW 67
// end ;
8496: GO 8367
8498: POP
8499: POP
// end ; if heikeApes then
8500: LD_EXP 28
8504: IFFALSE 8622
// begin counter := 0 ;
8506: LD_ADDR_VAR 0 9
8510: PUSH
8511: LD_INT 0
8513: ST_TO_ADDR
// for i in heikeApes do
8514: LD_ADDR_VAR 0 2
8518: PUSH
8519: LD_EXP 28
8523: PUSH
8524: FOR_IN
8525: IFFALSE 8620
// begin if counter > 2 then
8527: LD_VAR 0 9
8531: PUSH
8532: LD_INT 2
8534: GREATER
8535: IFFALSE 8539
// break ;
8537: GO 8620
// counter := Inc ( counter ) ;
8539: LD_ADDR_VAR 0 9
8543: PUSH
8544: LD_VAR 0 9
8548: PPUSH
8549: CALL 54747 0 1
8553: ST_TO_ADDR
// SetDir ( i , 4 ) ;
8554: LD_VAR 0 2
8558: PPUSH
8559: LD_INT 4
8561: PPUSH
8562: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
8566: LD_VAR 0 2
8570: PPUSH
8571: LD_INT 1
8573: PPUSH
8574: LD_INT 0
8576: PPUSH
8577: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
8581: LD_VAR 0 2
8585: PPUSH
8586: LD_INT 185
8588: PPUSH
8589: LD_INT 144
8591: PPUSH
8592: CALL_OW 111
// AddComMoveXY ( i , 170 , 103 ) ;
8596: LD_VAR 0 2
8600: PPUSH
8601: LD_INT 170
8603: PPUSH
8604: LD_INT 103
8606: PPUSH
8607: CALL_OW 171
// wait ( 0 0$2 ) ;
8611: LD_INT 70
8613: PPUSH
8614: CALL_OW 67
// end ;
8618: GO 8524
8620: POP
8621: POP
// end ; AddComMoveXY ( Heike , 163 , 89 ) ;
8622: LD_EXP 15
8626: PPUSH
8627: LD_INT 163
8629: PPUSH
8630: LD_INT 89
8632: PPUSH
8633: CALL_OW 171
// Say ( Heike , DH-Intro-1 ) ;
8637: LD_EXP 15
8641: PPUSH
8642: LD_STRING DH-Intro-1
8644: PPUSH
8645: CALL_OW 88
// CenterOnXY ( 175 , 117 ) ;
8649: LD_INT 175
8651: PPUSH
8652: LD_INT 117
8654: PPUSH
8655: CALL_OW 84
// if Markov then
8659: LD_EXP 22
8663: IFFALSE 9238
// begin Say ( Markov , DMar-Intro-2 ) ;
8665: LD_EXP 22
8669: PPUSH
8670: LD_STRING DMar-Intro-2
8672: PPUSH
8673: CALL_OW 88
// Say ( Markov , DMar-Intro-3 ) ;
8677: LD_EXP 22
8681: PPUSH
8682: LD_STRING DMar-Intro-3
8684: PPUSH
8685: CALL_OW 88
// wait ( 0 0$1 ) ;
8689: LD_INT 35
8691: PPUSH
8692: CALL_OW 67
// CenterOnUnits ( Heike ) ;
8696: LD_EXP 15
8700: PPUSH
8701: CALL_OW 85
// if Kurt then
8705: LD_EXP 25
8709: IFFALSE 8761
// begin if IsInUnit ( Kurt ) then
8711: LD_EXP 25
8715: PPUSH
8716: CALL_OW 310
8720: IFFALSE 8731
// ComExit ( Kurt ) ;
8722: LD_EXP 25
8726: PPUSH
8727: CALL 53784 0 1
// AddComMoveXY ( Kurt , 130 , 56 ) ;
8731: LD_EXP 25
8735: PPUSH
8736: LD_INT 130
8738: PPUSH
8739: LD_INT 56
8741: PPUSH
8742: CALL_OW 171
// AddComTurnXY ( Kurt , 129 , 56 ) ;
8746: LD_EXP 25
8750: PPUSH
8751: LD_INT 129
8753: PPUSH
8754: LD_INT 56
8756: PPUSH
8757: CALL_OW 178
// end ; if Kaia then
8761: LD_EXP 20
8765: IFFALSE 8945
// begin Say ( Kaia , DK-Intro-4 ) ;
8767: LD_EXP 20
8771: PPUSH
8772: LD_STRING DK-Intro-4
8774: PPUSH
8775: CALL_OW 88
// Say ( Markov , DMar-Intro-5 ) ;
8779: LD_EXP 22
8783: PPUSH
8784: LD_STRING DMar-Intro-5
8786: PPUSH
8787: CALL_OW 88
// Say ( Markov , DMar-Intro-6 ) ;
8791: LD_EXP 22
8795: PPUSH
8796: LD_STRING DMar-Intro-6
8798: PPUSH
8799: CALL_OW 88
// Say ( Olaf , DO-Intro-7 ) ;
8803: LD_EXP 24
8807: PPUSH
8808: LD_STRING DO-Intro-7
8810: PPUSH
8811: CALL_OW 88
// CenterOnXY ( 160 , 85 ) ;
8815: LD_INT 160
8817: PPUSH
8818: LD_INT 85
8820: PPUSH
8821: CALL_OW 84
// Say ( Markov , DMar-Intro-8 ) ;
8825: LD_EXP 22
8829: PPUSH
8830: LD_STRING DMar-Intro-8
8832: PPUSH
8833: CALL_OW 88
// Say ( Markov , DMar-Intro-9 ) ;
8837: LD_EXP 22
8841: PPUSH
8842: LD_STRING DMar-Intro-9
8844: PPUSH
8845: CALL_OW 88
// Say ( Markov , DMar-Intro-10 ) ;
8849: LD_EXP 22
8853: PPUSH
8854: LD_STRING DMar-Intro-10
8856: PPUSH
8857: CALL_OW 88
// Say ( Markov , DMar-Intro-11 ) ;
8861: LD_EXP 22
8865: PPUSH
8866: LD_STRING DMar-Intro-11
8868: PPUSH
8869: CALL_OW 88
// Say ( Givi , DG-Intro-12 ) ;
8873: LD_EXP 16
8877: PPUSH
8878: LD_STRING DG-Intro-12
8880: PPUSH
8881: CALL_OW 88
// Say ( Givi , DG-Intro-13 ) ;
8885: LD_EXP 16
8889: PPUSH
8890: LD_STRING DG-Intro-13
8892: PPUSH
8893: CALL_OW 88
// Say ( Givi , DG-Intro-14 ) ;
8897: LD_EXP 16
8901: PPUSH
8902: LD_STRING DG-Intro-14
8904: PPUSH
8905: CALL_OW 88
// Say ( Givi , DG-Intro-15 ) ;
8909: LD_EXP 16
8913: PPUSH
8914: LD_STRING DG-Intro-15
8916: PPUSH
8917: CALL_OW 88
// Say ( Heike , DH-Intro-16 ) ;
8921: LD_EXP 15
8925: PPUSH
8926: LD_STRING DH-Intro-16
8928: PPUSH
8929: CALL_OW 88
// Say ( Markov , DMar-Intro-17 ) ;
8933: LD_EXP 22
8937: PPUSH
8938: LD_STRING DMar-Intro-17
8940: PPUSH
8941: CALL_OW 88
// end ; if Kurt and Mike then
8945: LD_EXP 25
8949: PUSH
8950: LD_EXP 17
8954: AND
8955: IFFALSE 9238
// begin CenterNowOnUnits ( Kurt ) ;
8957: LD_EXP 25
8961: PPUSH
8962: CALL_OW 87
// ComTurnUnit ( Kurt , Heike ) ;
8966: LD_EXP 25
8970: PPUSH
8971: LD_EXP 15
8975: PPUSH
8976: CALL_OW 119
// Say ( Kurt , DKs-Intro-18 ) ;
8980: LD_EXP 25
8984: PPUSH
8985: LD_STRING DKs-Intro-18
8987: PPUSH
8988: CALL_OW 88
// Say ( Kurt , DKs-Intro-19 ) ;
8992: LD_EXP 25
8996: PPUSH
8997: LD_STRING DKs-Intro-19
8999: PPUSH
9000: CALL_OW 88
// CenterNowOnUnits ( Mike ) ;
9004: LD_EXP 17
9008: PPUSH
9009: CALL_OW 87
// if IsInUnit ( Mike ) then
9013: LD_EXP 17
9017: PPUSH
9018: CALL_OW 310
9022: IFFALSE 9033
// ComExit ( Mike ) ;
9024: LD_EXP 17
9028: PPUSH
9029: CALL 53784 0 1
// AddComMoveXY ( Mike , 129 , 53 ) ;
9033: LD_EXP 17
9037: PPUSH
9038: LD_INT 129
9040: PPUSH
9041: LD_INT 53
9043: PPUSH
9044: CALL_OW 171
// AddComHold ( Mike ) ;
9048: LD_EXP 17
9052: PPUSH
9053: CALL_OW 200
// wait ( 0 0$2 ) ;
9057: LD_INT 70
9059: PPUSH
9060: CALL_OW 67
// Say ( Mike , DM-Intro-20 ) ;
9064: LD_EXP 17
9068: PPUSH
9069: LD_STRING DM-Intro-20
9071: PPUSH
9072: CALL_OW 88
// scoutActive := Query ( Scout ) ;
9076: LD_ADDR_EXP 3
9080: PUSH
9081: LD_STRING Scout
9083: PPUSH
9084: CALL_OW 97
9088: ST_TO_ADDR
// if scoutActive = 1 then
9089: LD_EXP 3
9093: PUSH
9094: LD_INT 1
9096: EQUAL
9097: IFFALSE 9194
// begin CenterNowOnUnits ( Kurt ) ;
9099: LD_EXP 25
9103: PPUSH
9104: CALL_OW 87
// Say ( Heike , DH-Intro-21 ) ;
9108: LD_EXP 15
9112: PPUSH
9113: LD_STRING DH-Intro-21
9115: PPUSH
9116: CALL_OW 88
// Say ( Mike , DM-Intro-22 ) ;
9120: LD_EXP 17
9124: PPUSH
9125: LD_STRING DM-Intro-22
9127: PPUSH
9128: CALL_OW 88
// Say ( Kurt , DKs-Intro-23 ) ;
9132: LD_EXP 25
9136: PPUSH
9137: LD_STRING DKs-Intro-23
9139: PPUSH
9140: CALL_OW 88
// SetSide ( Kurt , 5 ) ;
9144: LD_EXP 25
9148: PPUSH
9149: LD_INT 5
9151: PPUSH
9152: CALL_OW 235
// SetSide ( Mike , 5 ) ;
9156: LD_EXP 17
9160: PPUSH
9161: LD_INT 5
9163: PPUSH
9164: CALL_OW 235
// ComMoveXY ( [ Kurt , Mike ] , 104 , 66 ) ;
9168: LD_EXP 25
9172: PUSH
9173: LD_EXP 17
9177: PUSH
9178: EMPTY
9179: LIST
9180: LIST
9181: PPUSH
9182: LD_INT 104
9184: PPUSH
9185: LD_INT 66
9187: PPUSH
9188: CALL_OW 111
// end else
9192: GO 9238
// begin scoutActive := 0 ;
9194: LD_ADDR_EXP 3
9198: PUSH
9199: LD_INT 0
9201: ST_TO_ADDR
// Say ( Heike , DH-Intro-a-21 ) ;
9202: LD_EXP 15
9206: PPUSH
9207: LD_STRING DH-Intro-a-21
9209: PPUSH
9210: CALL_OW 88
// Say ( Mike , DM-Intro-a-22 ) ;
9214: LD_EXP 17
9218: PPUSH
9219: LD_STRING DM-Intro-a-22
9221: PPUSH
9222: CALL_OW 88
// Say ( Kurt , DKs-Intro-a-23 ) ;
9226: LD_EXP 25
9230: PPUSH
9231: LD_STRING DKs-Intro-a-23
9233: PPUSH
9234: CALL_OW 88
// end ; end ; end ; Video ( false ) ;
9238: LD_INT 0
9240: PPUSH
9241: CALL 53358 0 1
// music_nat := music_auto ;
9245: LD_ADDR_OWVAR 71
9249: PUSH
9250: LD_INT 0
9252: ST_TO_ADDR
// music_class := music_auto ;
9253: LD_ADDR_OWVAR 72
9257: PUSH
9258: LD_INT 0
9260: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
9261: LD_STRING M1
9263: PPUSH
9264: CALL_OW 337
// wait ( 0 0$3 ) ;
9268: LD_INT 105
9270: PPUSH
9271: CALL_OW 67
// Say ( Heike , DH-Base-1 ) ;
9275: LD_EXP 15
9279: PPUSH
9280: LD_STRING DH-Base-1
9282: PPUSH
9283: CALL_OW 88
// if Kaia then
9287: LD_EXP 20
9291: IFFALSE 9401
// begin Say ( Kaia , DK-Base-2 ) ;
9293: LD_EXP 20
9297: PPUSH
9298: LD_STRING DK-Base-2
9300: PPUSH
9301: CALL_OW 88
// Say ( Heike , DH-Base-3 ) ;
9305: LD_EXP 15
9309: PPUSH
9310: LD_STRING DH-Base-3
9312: PPUSH
9313: CALL_OW 88
// if Aviradze then
9317: LD_EXP 26
9321: IFFALSE 9401
// begin Say ( Aviradze , DA-Base-4 ) ;
9323: LD_EXP 26
9327: PPUSH
9328: LD_STRING DA-Base-4
9330: PPUSH
9331: CALL_OW 88
// Say ( Kaia , DK-Base-5 ) ;
9335: LD_EXP 20
9339: PPUSH
9340: LD_STRING DK-Base-5
9342: PPUSH
9343: CALL_OW 88
// if Markov then
9347: LD_EXP 22
9351: IFFALSE 9401
// begin Say ( Markov , DMar-Base-6 ) ;
9353: LD_EXP 22
9357: PPUSH
9358: LD_STRING DMar-Base-6
9360: PPUSH
9361: CALL_OW 88
// Say ( Kaia , DK-Base-7 ) ;
9365: LD_EXP 20
9369: PPUSH
9370: LD_STRING DK-Base-7
9372: PPUSH
9373: CALL_OW 88
// Say ( Markov , DMar-Base-8 ) ;
9377: LD_EXP 22
9381: PPUSH
9382: LD_STRING DMar-Base-8
9384: PPUSH
9385: CALL_OW 88
// Say ( Markov , DMar-Base-9 ) ;
9389: LD_EXP 22
9393: PPUSH
9394: LD_STRING DMar-Base-9
9396: PPUSH
9397: CALL_OW 88
// end ; end ; end ; SaveForQuickRestart ;
9401: CALL_OW 22
// end ;
9405: LD_VAR 0 1
9409: RET
// every 0 0$1 trigger scoutSuccess do var i , tmp ;
9410: LD_EXP 5
9414: IFFALSE 10525
9416: GO 9418
9418: DISABLE
9419: LD_INT 0
9421: PPUSH
9422: PPUSH
// begin InGameOn ;
9423: CALL_OW 8
// ComTurnUnit ( [ Mike , Kurt ] , Heike ) ;
9427: LD_EXP 17
9431: PUSH
9432: LD_EXP 25
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: PPUSH
9441: LD_EXP 15
9445: PPUSH
9446: CALL_OW 119
// ComExit ( Heike ) ;
9450: LD_EXP 15
9454: PPUSH
9455: CALL 53784 0 1
// if IsOk ( Mike ) then
9459: LD_EXP 17
9463: PPUSH
9464: CALL_OW 302
9468: IFFALSE 9486
// AddComTurnUnit ( Heike , Mike ) else
9470: LD_EXP 15
9474: PPUSH
9475: LD_EXP 17
9479: PPUSH
9480: CALL_OW 179
9484: GO 9500
// AddComTurnUnit ( Heike , Kurt ) ;
9486: LD_EXP 15
9490: PPUSH
9491: LD_EXP 25
9495: PPUSH
9496: CALL_OW 179
// if IsOk ( Mike ) and IsOk ( Kurt ) then
9500: LD_EXP 17
9504: PPUSH
9505: CALL_OW 302
9509: PUSH
9510: LD_EXP 25
9514: PPUSH
9515: CALL_OW 302
9519: AND
9520: IFFALSE 9771
// begin CenterNowOnUnits ( Mike ) ;
9522: LD_EXP 17
9526: PPUSH
9527: CALL_OW 87
// Say ( Mike , DM-Scout-1 ) ;
9531: LD_EXP 17
9535: PPUSH
9536: LD_STRING DM-Scout-1
9538: PPUSH
9539: CALL_OW 88
// Say ( Heike , DH-Scout-2 ) ;
9543: LD_EXP 15
9547: PPUSH
9548: LD_STRING DH-Scout-2
9550: PPUSH
9551: CALL_OW 88
// Say ( Kurt , DKs-Scout-3 ) ;
9555: LD_EXP 25
9559: PPUSH
9560: LD_STRING DKs-Scout-3
9562: PPUSH
9563: CALL_OW 88
// Say ( Heike , DH-Scout-4 ) ;
9567: LD_EXP 15
9571: PPUSH
9572: LD_STRING DH-Scout-4
9574: PPUSH
9575: CALL_OW 88
// Say ( Heike , DH-Scout-5 ) ;
9579: LD_EXP 15
9583: PPUSH
9584: LD_STRING DH-Scout-5
9586: PPUSH
9587: CALL_OW 88
// tmp := [ [ 72 , 122 ] , [ 89 , 131 ] , [ 99 , 139 ] , [ 100 , 148 ] ] ;
9591: LD_ADDR_VAR 0 2
9595: PUSH
9596: LD_INT 72
9598: PUSH
9599: LD_INT 122
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PUSH
9606: LD_INT 89
9608: PUSH
9609: LD_INT 131
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: LD_INT 99
9618: PUSH
9619: LD_INT 139
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: PUSH
9626: LD_INT 100
9628: PUSH
9629: LD_INT 148
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: ST_TO_ADDR
// for i in tmp do
9642: LD_ADDR_VAR 0 1
9646: PUSH
9647: LD_VAR 0 2
9651: PUSH
9652: FOR_IN
9653: IFFALSE 9711
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 2 , - 6 ) ;
9655: LD_VAR 0 1
9659: PUSH
9660: LD_INT 1
9662: ARRAY
9663: PPUSH
9664: LD_VAR 0 1
9668: PUSH
9669: LD_INT 2
9671: ARRAY
9672: PPUSH
9673: LD_INT 2
9675: PPUSH
9676: LD_INT 6
9678: NEG
9679: PPUSH
9680: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 2 ) ;
9684: LD_VAR 0 1
9688: PUSH
9689: LD_INT 1
9691: ARRAY
9692: PPUSH
9693: LD_VAR 0 1
9697: PUSH
9698: LD_INT 2
9700: ARRAY
9701: PPUSH
9702: LD_INT 2
9704: PPUSH
9705: CALL_OW 331
// end ;
9709: GO 9652
9711: POP
9712: POP
// CenterOnXY ( 83 , 132 ) ;
9713: LD_INT 83
9715: PPUSH
9716: LD_INT 132
9718: PPUSH
9719: CALL_OW 84
// Say ( Kurt , DKs-Scout-6 ) ;
9723: LD_EXP 25
9727: PPUSH
9728: LD_STRING DKs-Scout-6
9730: PPUSH
9731: CALL_OW 88
// Say ( Mike , DM-Scout-7 ) ;
9735: LD_EXP 17
9739: PPUSH
9740: LD_STRING DM-Scout-7
9742: PPUSH
9743: CALL_OW 88
// Say ( Mike , DM-Scout-8 ) ;
9747: LD_EXP 17
9751: PPUSH
9752: LD_STRING DM-Scout-8
9754: PPUSH
9755: CALL_OW 88
// Say ( Kurt , DKs-Scout-9 ) ;
9759: LD_EXP 25
9763: PPUSH
9764: LD_STRING DKs-Scout-9
9766: PPUSH
9767: CALL_OW 88
// end ; if IsDead ( Mike ) then
9771: LD_EXP 17
9775: PPUSH
9776: CALL_OW 301
9780: IFFALSE 9947
// begin CenterNowOnUnits ( Kurt ) ;
9782: LD_EXP 25
9786: PPUSH
9787: CALL_OW 87
// Say ( Kurt , DKs-Scout-b-1 ) ;
9791: LD_EXP 25
9795: PPUSH
9796: LD_STRING DKs-Scout-b-1
9798: PPUSH
9799: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-2 ) ;
9803: LD_EXP 25
9807: PPUSH
9808: LD_STRING DKs-Scout-b-2
9810: PPUSH
9811: CALL_OW 88
// if IsOk ( Givi ) then
9815: LD_EXP 16
9819: PPUSH
9820: CALL_OW 302
9824: IFFALSE 9899
// begin ComExit ( Givi ) ;
9826: LD_EXP 16
9830: PPUSH
9831: CALL 53784 0 1
// AddComTurnUnit ( Givi , Kurt ) ;
9835: LD_EXP 16
9839: PPUSH
9840: LD_EXP 25
9844: PPUSH
9845: CALL_OW 179
// Say ( Givi , DG-Scout-b-3 ) ;
9849: LD_EXP 16
9853: PPUSH
9854: LD_STRING DG-Scout-b-3
9856: PPUSH
9857: CALL_OW 88
// Say ( Givi , DG-Scout-b-4 ) ;
9861: LD_EXP 16
9865: PPUSH
9866: LD_STRING DG-Scout-b-4
9868: PPUSH
9869: CALL_OW 88
// Say ( Givi , DG-Scout-b-5 ) ;
9873: LD_EXP 16
9877: PPUSH
9878: LD_STRING DG-Scout-b-5
9880: PPUSH
9881: CALL_OW 88
// Say ( Heike , DH-Scout-b-6 ) ;
9885: LD_EXP 15
9889: PPUSH
9890: LD_STRING DH-Scout-b-6
9892: PPUSH
9893: CALL_OW 88
// end else
9897: GO 9911
// Say ( Heike , DH-Scout-a-4 ) ;
9899: LD_EXP 15
9903: PPUSH
9904: LD_STRING DH-Scout-a-4
9906: PPUSH
9907: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-7 ) ;
9911: LD_EXP 25
9915: PPUSH
9916: LD_STRING DKs-Scout-b-7
9918: PPUSH
9919: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-8 ) ;
9923: LD_EXP 25
9927: PPUSH
9928: LD_STRING DKs-Scout-b-8
9930: PPUSH
9931: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-9 ) ;
9935: LD_EXP 25
9939: PPUSH
9940: LD_STRING DKs-Scout-b-9
9942: PPUSH
9943: CALL_OW 88
// end ; if IsDead ( Kurt ) then
9947: LD_EXP 25
9951: PPUSH
9952: CALL_OW 301
9956: IFFALSE 10235
// begin CenterNowOnUnits ( Mike ) ;
9958: LD_EXP 17
9962: PPUSH
9963: CALL_OW 87
// Say ( Mike , DM-Scout-a-1 ) ;
9967: LD_EXP 17
9971: PPUSH
9972: LD_STRING DM-Scout-a-1
9974: PPUSH
9975: CALL_OW 88
// Say ( Mike , DM-Scout-a-2 ) ;
9979: LD_EXP 17
9983: PPUSH
9984: LD_STRING DM-Scout-a-2
9986: PPUSH
9987: CALL_OW 88
// if GetLives ( Mike ) < 1000 then
9991: LD_EXP 17
9995: PPUSH
9996: CALL_OW 256
10000: PUSH
10001: LD_INT 1000
10003: LESS
10004: IFFALSE 10020
// Say ( Heike , DH-Scout-a-3 ) else
10006: LD_EXP 15
10010: PPUSH
10011: LD_STRING DH-Scout-a-3
10013: PPUSH
10014: CALL_OW 88
10018: GO 10032
// Say ( Heike , DH-Scout-a-4 ) ;
10020: LD_EXP 15
10024: PPUSH
10025: LD_STRING DH-Scout-a-4
10027: PPUSH
10028: CALL_OW 88
// Say ( Mike , DM-Scout-a-5 ) ;
10032: LD_EXP 17
10036: PPUSH
10037: LD_STRING DM-Scout-a-5
10039: PPUSH
10040: CALL_OW 88
// if IsOk ( Kaia ) then
10044: LD_EXP 20
10048: PPUSH
10049: CALL_OW 302
10053: IFFALSE 10235
// begin ComExit ( Kaia ) ;
10055: LD_EXP 20
10059: PPUSH
10060: CALL 53784 0 1
// AddComMoveUnit ( Kaia , Mike ) ;
10064: LD_EXP 20
10068: PPUSH
10069: LD_EXP 17
10073: PPUSH
10074: CALL_OW 172
// wait ( 0 0$2 ) ;
10078: LD_INT 70
10080: PPUSH
10081: CALL_OW 67
// ComTurnUnit ( Kaia , Mike ) ;
10085: LD_EXP 20
10089: PPUSH
10090: LD_EXP 17
10094: PPUSH
10095: CALL_OW 119
// ComTurnUnit ( Mike , Kaia ) ;
10099: LD_EXP 17
10103: PPUSH
10104: LD_EXP 20
10108: PPUSH
10109: CALL_OW 119
// Say ( Kaia , DK-Scout-a-6 ) ;
10113: LD_EXP 20
10117: PPUSH
10118: LD_STRING DK-Scout-a-6
10120: PPUSH
10121: CALL_OW 88
// Say ( Mike , DM-Scout-a-7 ) ;
10125: LD_EXP 17
10129: PPUSH
10130: LD_STRING DM-Scout-a-7
10132: PPUSH
10133: CALL_OW 88
// Say ( Kaia , DK-Scout-a-8 ) ;
10137: LD_EXP 20
10141: PPUSH
10142: LD_STRING DK-Scout-a-8
10144: PPUSH
10145: CALL_OW 88
// Say ( Kaia , DK-Scout-a-9 ) ;
10149: LD_EXP 20
10153: PPUSH
10154: LD_STRING DK-Scout-a-9
10156: PPUSH
10157: CALL_OW 88
// Say ( Heike , DH-Scout-a-10 ) ;
10161: LD_EXP 15
10165: PPUSH
10166: LD_STRING DH-Scout-a-10
10168: PPUSH
10169: CALL_OW 88
// ComTurnUnit ( Mike , Heike ) ;
10173: LD_EXP 17
10177: PPUSH
10178: LD_EXP 15
10182: PPUSH
10183: CALL_OW 119
// Say ( Mike , DM-Scout-a-11 ) ;
10187: LD_EXP 17
10191: PPUSH
10192: LD_STRING DM-Scout-a-11
10194: PPUSH
10195: CALL_OW 88
// Say ( Mike , DM-Scout-a-12 ) ;
10199: LD_EXP 17
10203: PPUSH
10204: LD_STRING DM-Scout-a-12
10206: PPUSH
10207: CALL_OW 88
// Say ( Mike , DM-Scout-a-13 ) ;
10211: LD_EXP 17
10215: PPUSH
10216: LD_STRING DM-Scout-a-13
10218: PPUSH
10219: CALL_OW 88
// Say ( Mike , DM-Scout-a-14 ) ;
10223: LD_EXP 17
10227: PPUSH
10228: LD_STRING DM-Scout-a-14
10230: PPUSH
10231: CALL_OW 88
// end ; end ; if IsOk ( Givi ) then
10235: LD_EXP 16
10239: PPUSH
10240: CALL_OW 302
10244: IFFALSE 10272
// begin Say ( Givi , DG-Scout-10 ) ;
10246: LD_EXP 16
10250: PPUSH
10251: LD_STRING DG-Scout-10
10253: PPUSH
10254: CALL_OW 88
// Say ( Givi , DG-Scout-11 ) ;
10258: LD_EXP 16
10262: PPUSH
10263: LD_STRING DG-Scout-11
10265: PPUSH
10266: CALL_OW 88
// end else
10270: GO 10329
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-10 ) then
10272: LD_EXP 27
10276: PPUSH
10277: LD_INT 26
10279: PUSH
10280: LD_INT 1
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PPUSH
10287: CALL_OW 72
10291: PPUSH
10292: LD_STRING DArm-Scout-10
10294: PPUSH
10295: CALL 224 0 2
10299: NOT
10300: IFFALSE 10329
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-10 ) ;
10302: LD_EXP 27
10306: PPUSH
10307: LD_INT 26
10309: PUSH
10310: LD_INT 2
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: PPUSH
10317: CALL_OW 72
10321: PPUSH
10322: LD_STRING DArf-Scout-10
10324: PPUSH
10325: CALL 224 0 2
// Say ( Heike , DH-Scout-12 ) ;
10329: LD_EXP 15
10333: PPUSH
10334: LD_STRING DH-Scout-12
10336: PPUSH
10337: CALL_OW 88
// Say ( Heike , DH-Scout-13 ) ;
10341: LD_EXP 15
10345: PPUSH
10346: LD_STRING DH-Scout-13
10348: PPUSH
10349: CALL_OW 88
// if IsOk ( Mike ) and IsOk ( Kurt ) then
10353: LD_EXP 17
10357: PPUSH
10358: CALL_OW 302
10362: PUSH
10363: LD_EXP 25
10367: PPUSH
10368: CALL_OW 302
10372: AND
10373: IFFALSE 10401
// begin Say ( Mike , DM-Scout-14 ) ;
10375: LD_EXP 17
10379: PPUSH
10380: LD_STRING DM-Scout-14
10382: PPUSH
10383: CALL_OW 88
// Say ( Heike , DH-Scout-c-14 ) ;
10387: LD_EXP 15
10391: PPUSH
10392: LD_STRING DH-Scout-c-14
10394: PPUSH
10395: CALL_OW 88
// end else
10399: GO 10494
// if IsOk ( Mike ) xor IsOk ( Kurt ) then
10401: LD_EXP 17
10405: PPUSH
10406: CALL_OW 302
10410: PUSH
10411: LD_EXP 25
10415: PPUSH
10416: CALL_OW 302
10420: XOR
10421: IFFALSE 10482
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-a-14 ) then
10423: LD_EXP 27
10427: PPUSH
10428: LD_INT 26
10430: PUSH
10431: LD_INT 1
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: PPUSH
10438: CALL_OW 72
10442: PPUSH
10443: LD_STRING DArm-Scout-a-14
10445: PPUSH
10446: CALL 224 0 2
10450: NOT
10451: IFFALSE 10480
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-a-14 ) ;
10453: LD_EXP 27
10457: PPUSH
10458: LD_INT 26
10460: PUSH
10461: LD_INT 2
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PPUSH
10468: CALL_OW 72
10472: PPUSH
10473: LD_STRING DArf-Scout-a-14
10475: PPUSH
10476: CALL 224 0 2
// end else
10480: GO 10494
// Say ( Heike , DH-Scout-d-14 ) ;
10482: LD_EXP 15
10486: PPUSH
10487: LD_STRING DH-Scout-d-14
10489: PPUSH
10490: CALL_OW 88
// Say ( Heike , DH-Scout-15 ) ;
10494: LD_EXP 15
10498: PPUSH
10499: LD_STRING DH-Scout-15
10501: PPUSH
10502: CALL_OW 88
// InGameOff ;
10506: CALL_OW 9
// wait ( 1 1$00 ) ;
10510: LD_INT 2100
10512: PPUSH
10513: CALL_OW 67
// usAttacksAllowed := true ;
10517: LD_ADDR_EXP 6
10521: PUSH
10522: LD_INT 1
10524: ST_TO_ADDR
// end ;
10525: PPOPN 2
10527: END
// every 0 0$1 trigger scoutFailed do var spoken ;
10528: LD_EXP 4
10532: IFFALSE 10709
10534: GO 10536
10536: DISABLE
10537: LD_INT 0
10539: PPUSH
// begin spoken := true ;
10540: LD_ADDR_VAR 0 1
10544: PUSH
10545: LD_INT 1
10547: ST_TO_ADDR
// wait ( 0 0$30 ) ;
10548: LD_INT 1050
10550: PPUSH
10551: CALL_OW 67
// Say ( Heike , DH-Scout-c-1 ) ;
10555: LD_EXP 15
10559: PPUSH
10560: LD_STRING DH-Scout-c-1
10562: PPUSH
10563: CALL_OW 88
// if not IsOk ( Givi ) then
10567: LD_EXP 16
10571: PPUSH
10572: CALL_OW 302
10576: NOT
10577: IFFALSE 10581
// exit ;
10579: GO 10709
// if IsOk ( Givi ) then
10581: LD_EXP 16
10585: PPUSH
10586: CALL_OW 302
10590: IFFALSE 10618
// begin Say ( Givi , DG-Scout-c-2 ) ;
10592: LD_EXP 16
10596: PPUSH
10597: LD_STRING DG-Scout-c-2
10599: PPUSH
10600: CALL_OW 88
// Say ( Givi , DG-Scout-c-3 ) ;
10604: LD_EXP 16
10608: PPUSH
10609: LD_STRING DG-Scout-c-3
10611: PPUSH
10612: CALL_OW 88
// end else
10616: GO 10691
// begin spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-c-3 ) ;
10618: LD_ADDR_VAR 0 1
10622: PUSH
10623: LD_EXP 27
10627: PPUSH
10628: LD_INT 26
10630: PUSH
10631: LD_INT 1
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PPUSH
10638: CALL_OW 72
10642: PPUSH
10643: LD_STRING DArm-Scout-c-3
10645: PPUSH
10646: CALL 224 0 2
10650: ST_TO_ADDR
// if not spoken then
10651: LD_VAR 0 1
10655: NOT
10656: IFFALSE 10691
// spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-c-3 ) ;
10658: LD_ADDR_VAR 0 1
10662: PUSH
10663: LD_EXP 27
10667: PPUSH
10668: LD_INT 26
10670: PUSH
10671: LD_INT 2
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PPUSH
10678: CALL_OW 72
10682: PPUSH
10683: LD_STRING DArf-Scout-c-3
10685: PPUSH
10686: CALL 224 0 2
10690: ST_TO_ADDR
// ; end ; if spoken then
10691: LD_VAR 0 1
10695: IFFALSE 10709
// Say ( Heike , DH-Scout-c-4 ) ;
10697: LD_EXP 15
10701: PPUSH
10702: LD_STRING DH-Scout-c-4
10704: PPUSH
10705: CALL_OW 88
// end ;
10709: PPOPN 1
10711: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_half ] ] ) and IsOk ( Aviradze ) do
10712: LD_INT 22
10714: PUSH
10715: LD_INT 2
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: PUSH
10722: LD_INT 30
10724: PUSH
10725: LD_INT 7
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PPUSH
10736: CALL_OW 69
10740: PUSH
10741: LD_EXP 26
10745: PPUSH
10746: CALL_OW 302
10750: AND
10751: IFFALSE 10836
10753: GO 10755
10755: DISABLE
// begin DialogueOn ;
10756: CALL_OW 6
// Say ( Aviradze , DA-Lab-1 ) ;
10760: LD_EXP 26
10764: PPUSH
10765: LD_STRING DA-Lab-1
10767: PPUSH
10768: CALL_OW 88
// Say ( Heike , DH-Lab-2 ) ;
10772: LD_EXP 15
10776: PPUSH
10777: LD_STRING DH-Lab-2
10779: PPUSH
10780: CALL_OW 88
// Say ( Aviradze , DA-Lab-3 ) ;
10784: LD_EXP 26
10788: PPUSH
10789: LD_STRING DA-Lab-3
10791: PPUSH
10792: CALL_OW 88
// Say ( Aviradze , DA-Lab-4 ) ;
10796: LD_EXP 26
10800: PPUSH
10801: LD_STRING DA-Lab-4
10803: PPUSH
10804: CALL_OW 88
// Say ( Aviradze , DA-Lab-5 ) ;
10808: LD_EXP 26
10812: PPUSH
10813: LD_STRING DA-Lab-5
10815: PPUSH
10816: CALL_OW 88
// Say ( Heike , DH-Lab-6 ) ;
10820: LD_EXP 15
10824: PPUSH
10825: LD_STRING DH-Lab-6
10827: PPUSH
10828: CALL_OW 88
// DialogueOff ;
10832: CALL_OW 7
// end ;
10836: END
// every 0 0$1 trigger GetTech ( tech_MatDet , 2 ) = state_researched and IsOk ( Givi ) do
10837: LD_INT 7
10839: PPUSH
10840: LD_INT 2
10842: PPUSH
10843: CALL_OW 321
10847: PUSH
10848: LD_INT 2
10850: EQUAL
10851: PUSH
10852: LD_EXP 16
10856: PPUSH
10857: CALL_OW 302
10861: AND
10862: IFFALSE 11031
10864: GO 10866
10866: DISABLE
// begin DialogueOn ;
10867: CALL_OW 6
// Say ( Givi , DG-Opt-1 ) ;
10871: LD_EXP 16
10875: PPUSH
10876: LD_STRING DG-Opt-1
10878: PPUSH
10879: CALL_OW 88
// Say ( Heike , DH-Opt-2 ) ;
10883: LD_EXP 15
10887: PPUSH
10888: LD_STRING DH-Opt-2
10890: PPUSH
10891: CALL_OW 88
// Say ( Givi , DG-Opt-3 ) ;
10895: LD_EXP 16
10899: PPUSH
10900: LD_STRING DG-Opt-3
10902: PPUSH
10903: CALL_OW 88
// Say ( Givi , DG-Opt-4 ) ;
10907: LD_EXP 16
10911: PPUSH
10912: LD_STRING DG-Opt-4
10914: PPUSH
10915: CALL_OW 88
// Say ( Heike , DH-Opt-5 ) ;
10919: LD_EXP 15
10923: PPUSH
10924: LD_STRING DH-Opt-5
10926: PPUSH
10927: CALL_OW 88
// Say ( Givi , DG-Opt-6 ) ;
10931: LD_EXP 16
10935: PPUSH
10936: LD_STRING DG-Opt-6
10938: PPUSH
10939: CALL_OW 88
// Say ( Heike , DH-Opt-7 ) ;
10943: LD_EXP 15
10947: PPUSH
10948: LD_STRING DH-Opt-7
10950: PPUSH
10951: CALL_OW 88
// Say ( Givi , DG-Opt-8 ) ;
10955: LD_EXP 16
10959: PPUSH
10960: LD_STRING DG-Opt-8
10962: PPUSH
10963: CALL_OW 88
// Say ( Givi , DG-Opt-9 ) ;
10967: LD_EXP 16
10971: PPUSH
10972: LD_STRING DG-Opt-9
10974: PPUSH
10975: CALL_OW 88
// Say ( Heike , DH-Opt-10 ) ;
10979: LD_EXP 15
10983: PPUSH
10984: LD_STRING DH-Opt-10
10986: PPUSH
10987: CALL_OW 88
// Say ( Givi , DG-Opt-11 ) ;
10991: LD_EXP 16
10995: PPUSH
10996: LD_STRING DG-Opt-11
10998: PPUSH
10999: CALL_OW 88
// Say ( Givi , DG-Opt-12 ) ;
11003: LD_EXP 16
11007: PPUSH
11008: LD_STRING DG-Opt-12
11010: PPUSH
11011: CALL_OW 88
// Say ( Heike , DH-Opt-13 ) ;
11015: LD_EXP 15
11019: PPUSH
11020: LD_STRING DH-Opt-13
11022: PPUSH
11023: CALL_OW 88
// DialogueOff ;
11027: CALL_OW 7
// end ;
11031: END
// every 0 0$2 trigger UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) do
11032: LD_EXP 27
11036: PPUSH
11037: LD_INT 95
11039: PUSH
11040: LD_INT 7
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PUSH
11047: LD_INT 23
11049: PUSH
11050: LD_INT 2
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: PUSH
11057: LD_INT 26
11059: PUSH
11060: LD_INT 1
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: LIST
11071: PPUSH
11072: CALL_OW 72
11076: IFFALSE 11137
11078: GO 11080
11080: DISABLE
// begin Say ( UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-River ) ;
11081: LD_EXP 27
11085: PPUSH
11086: LD_INT 95
11088: PUSH
11089: LD_INT 7
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: PUSH
11096: LD_INT 23
11098: PUSH
11099: LD_INT 2
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PUSH
11106: LD_INT 26
11108: PUSH
11109: LD_INT 1
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: LIST
11120: PPUSH
11121: CALL_OW 72
11125: PUSH
11126: LD_INT 1
11128: ARRAY
11129: PPUSH
11130: LD_STRING DArm-River
11132: PPUSH
11133: CALL_OW 88
// end ;
11137: END
// every 0 0$1 trigger GetTech ( tech_rocket , 2 ) = state_researched and IsOk ( Ibrahim ) do
11138: LD_INT 40
11140: PPUSH
11141: LD_INT 2
11143: PPUSH
11144: CALL_OW 321
11148: PUSH
11149: LD_INT 2
11151: EQUAL
11152: PUSH
11153: LD_EXP 18
11157: PPUSH
11158: CALL_OW 302
11162: AND
11163: IFFALSE 11413
11165: GO 11167
11167: DISABLE
// begin DialogueOn ;
11168: CALL_OW 6
// Say ( Ibrahim , DI-Roc-1 ) ;
11172: LD_EXP 18
11176: PPUSH
11177: LD_STRING DI-Roc-1
11179: PPUSH
11180: CALL_OW 88
// Say ( Heike , DH-Roc-2 ) ;
11184: LD_EXP 15
11188: PPUSH
11189: LD_STRING DH-Roc-2
11191: PPUSH
11192: CALL_OW 88
// Say ( Ibrahim , DI-Roc-3 ) ;
11196: LD_EXP 18
11200: PPUSH
11201: LD_STRING DI-Roc-3
11203: PPUSH
11204: CALL_OW 88
// Say ( Ibrahim , DI-Roc-4 ) ;
11208: LD_EXP 18
11212: PPUSH
11213: LD_STRING DI-Roc-4
11215: PPUSH
11216: CALL_OW 88
// Say ( Kaia , DK-Roc-5 ) ;
11220: LD_EXP 20
11224: PPUSH
11225: LD_STRING DK-Roc-5
11227: PPUSH
11228: CALL_OW 88
// Say ( Kaia , DK-Roc-6 ) ;
11232: LD_EXP 20
11236: PPUSH
11237: LD_STRING DK-Roc-6
11239: PPUSH
11240: CALL_OW 88
// Say ( Givi , DG-Roc-7 ) ;
11244: LD_EXP 16
11248: PPUSH
11249: LD_STRING DG-Roc-7
11251: PPUSH
11252: CALL_OW 88
// Say ( Givi , DG-Roc-8 ) ;
11256: LD_EXP 16
11260: PPUSH
11261: LD_STRING DG-Roc-8
11263: PPUSH
11264: CALL_OW 88
// if IsOk ( Markov ) and IsOk ( Kaia ) and IsOk ( Givi ) then
11268: LD_EXP 22
11272: PPUSH
11273: CALL_OW 302
11277: PUSH
11278: LD_EXP 20
11282: PPUSH
11283: CALL_OW 302
11287: AND
11288: PUSH
11289: LD_EXP 16
11293: PPUSH
11294: CALL_OW 302
11298: AND
11299: IFFALSE 11409
// begin Say ( Markov , DMar-Roc-9 ) ;
11301: LD_EXP 22
11305: PPUSH
11306: LD_STRING DMar-Roc-9
11308: PPUSH
11309: CALL_OW 88
// Say ( Markov , DMar-Roc-10 ) ;
11313: LD_EXP 22
11317: PPUSH
11318: LD_STRING DMar-Roc-10
11320: PPUSH
11321: CALL_OW 88
// Say ( Kaia , DK-Roc-11 ) ;
11325: LD_EXP 20
11329: PPUSH
11330: LD_STRING DK-Roc-11
11332: PPUSH
11333: CALL_OW 88
// Say ( Markov , DMar-Roc-12 ) ;
11337: LD_EXP 22
11341: PPUSH
11342: LD_STRING DMar-Roc-12
11344: PPUSH
11345: CALL_OW 88
// Say ( Kaia , DK-Roc-13 ) ;
11349: LD_EXP 20
11353: PPUSH
11354: LD_STRING DK-Roc-13
11356: PPUSH
11357: CALL_OW 88
// Say ( Givi , DG-Roc-14 ) ;
11361: LD_EXP 16
11365: PPUSH
11366: LD_STRING DG-Roc-14
11368: PPUSH
11369: CALL_OW 88
// Say ( Markov , DMar-Roc-15 ) ;
11373: LD_EXP 22
11377: PPUSH
11378: LD_STRING DMar-Roc-15
11380: PPUSH
11381: CALL_OW 88
// Say ( Markov , DMar-Roc-16 ) ;
11385: LD_EXP 22
11389: PPUSH
11390: LD_STRING DMar-Roc-16
11392: PPUSH
11393: CALL_OW 88
// Say ( Kaia , DK-Roc-17 ) ;
11397: LD_EXP 20
11401: PPUSH
11402: LD_STRING DK-Roc-17
11404: PPUSH
11405: CALL_OW 88
// end ; DialogueOff ;
11409: CALL_OW 7
// end ;
11413: END
// every 0 0$3 trigger GetLives ( usCommander ) < 1000 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] ] ) < 6 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) < 2 do var i , hurts , sci ;
11414: LD_EXP 30
11418: PPUSH
11419: CALL_OW 256
11423: PUSH
11424: LD_INT 1000
11426: LESS
11427: PUSH
11428: LD_INT 22
11430: PUSH
11431: LD_INT 1
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: PUSH
11438: LD_INT 21
11440: PUSH
11441: LD_INT 1
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PUSH
11448: LD_INT 23
11450: PUSH
11451: LD_INT 1
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: LIST
11462: PPUSH
11463: CALL_OW 69
11467: PUSH
11468: LD_INT 6
11470: LESS
11471: OR
11472: PUSH
11473: LD_INT 22
11475: PUSH
11476: LD_INT 1
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: PUSH
11483: LD_INT 21
11485: PUSH
11486: LD_INT 1
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: PUSH
11493: LD_INT 25
11495: PUSH
11496: LD_INT 1
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: LIST
11507: PPUSH
11508: CALL_OW 69
11512: PUSH
11513: LD_INT 2
11515: LESS
11516: OR
11517: IFFALSE 12763
11519: GO 11521
11521: DISABLE
11522: LD_INT 0
11524: PPUSH
11525: PPUSH
11526: PPUSH
// begin usAttacksAllowed := false ;
11527: LD_ADDR_EXP 6
11531: PUSH
11532: LD_INT 0
11534: ST_TO_ADDR
// usSurrender := true ;
11535: LD_ADDR_EXP 7
11539: PUSH
11540: LD_INT 1
11542: ST_TO_ADDR
// SetAttitude ( 1 , 2 , att_friend , true ) ;
11543: LD_INT 1
11545: PPUSH
11546: LD_INT 2
11548: PPUSH
11549: LD_INT 1
11551: PPUSH
11552: LD_INT 1
11554: PPUSH
11555: CALL_OW 80
// if IsDead ( usCommander ) then
11559: LD_EXP 30
11563: PPUSH
11564: CALL_OW 301
11568: IFFALSE 11572
// exit ;
11570: GO 12763
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_hastask ] ] ) do
11572: LD_ADDR_VAR 0 1
11576: PUSH
11577: LD_INT 22
11579: PUSH
11580: LD_INT 2
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PUSH
11587: LD_INT 21
11589: PUSH
11590: LD_INT 1
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 60
11599: PUSH
11600: EMPTY
11601: LIST
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: LIST
11607: PPUSH
11608: CALL_OW 69
11612: PUSH
11613: FOR_IN
11614: IFFALSE 11627
// ComStop ( i ) ;
11616: LD_VAR 0 1
11620: PPUSH
11621: CALL_OW 141
11625: GO 11613
11627: POP
11628: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_ok ] ] , [ f_type , unit_human ] ] ) do
11629: LD_ADDR_VAR 0 1
11633: PUSH
11634: LD_INT 22
11636: PUSH
11637: LD_INT 2
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: PUSH
11644: LD_INT 3
11646: PUSH
11647: LD_INT 50
11649: PUSH
11650: EMPTY
11651: LIST
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PUSH
11657: LD_INT 21
11659: PUSH
11660: LD_INT 1
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: LIST
11671: PPUSH
11672: CALL_OW 69
11676: PUSH
11677: FOR_IN
11678: IFFALSE 11694
// SetLives ( i , 251 ) ;
11680: LD_VAR 0 1
11684: PPUSH
11685: LD_INT 251
11687: PPUSH
11688: CALL_OW 234
11692: GO 11677
11694: POP
11695: POP
// InGameOn ;
11696: CALL_OW 8
// ComExit ( usCommander ) ;
11700: LD_EXP 30
11704: PPUSH
11705: CALL 53784 0 1
// AddComMoveXY ( usCommander , 81 , 143 ) ;
11709: LD_EXP 30
11713: PPUSH
11714: LD_INT 81
11716: PPUSH
11717: LD_INT 143
11719: PPUSH
11720: CALL_OW 171
// AddComTurnXY ( usCommander , 81 , 139 ) ;
11724: LD_EXP 30
11728: PPUSH
11729: LD_INT 81
11731: PPUSH
11732: LD_INT 139
11734: PPUSH
11735: CALL_OW 178
// PlaceSeeing ( 81 , 144 , 2 , - 10 ) ;
11739: LD_INT 81
11741: PPUSH
11742: LD_INT 144
11744: PPUSH
11745: LD_INT 2
11747: PPUSH
11748: LD_INT 10
11750: NEG
11751: PPUSH
11752: CALL_OW 330
// CenterNowOnUnits ( usCommander ) ;
11756: LD_EXP 30
11760: PPUSH
11761: CALL_OW 87
// wait ( 0 0$2 ) ;
11765: LD_INT 70
11767: PPUSH
11768: CALL_OW 67
// if not IsOk ( usCommander ) then
11772: LD_EXP 30
11776: PPUSH
11777: CALL_OW 302
11781: NOT
11782: IFFALSE 11796
// SetLives ( usCommander , 251 ) ;
11784: LD_EXP 30
11788: PPUSH
11789: LD_INT 251
11791: PPUSH
11792: CALL_OW 234
// Say ( usCommander , DCa-Surrender-1 ) ;
11796: LD_EXP 30
11800: PPUSH
11801: LD_STRING DCa-Surrender-1
11803: PPUSH
11804: CALL_OW 88
// Say ( Heike , DH-Surrender-2 ) ;
11808: LD_EXP 15
11812: PPUSH
11813: LD_STRING DH-Surrender-2
11815: PPUSH
11816: CALL_OW 88
// if GetType ( IsInUnit ( Heike ) ) = unit_building then
11820: LD_EXP 15
11824: PPUSH
11825: CALL_OW 310
11829: PPUSH
11830: CALL_OW 247
11834: PUSH
11835: LD_INT 3
11837: EQUAL
11838: IFFALSE 11856
// begin ComExit ( Heike ) ;
11840: LD_EXP 15
11844: PPUSH
11845: CALL 53784 0 1
// wait ( 3 ) ;
11849: LD_INT 3
11851: PPUSH
11852: CALL_OW 67
// end ; ComMoveXY ( Heike , 82 , 133 ) ;
11856: LD_EXP 15
11860: PPUSH
11861: LD_INT 82
11863: PPUSH
11864: LD_INT 133
11866: PPUSH
11867: CALL_OW 111
// AddComTurnUnit ( Heike , usCommander ) ;
11871: LD_EXP 15
11875: PPUSH
11876: LD_EXP 30
11880: PPUSH
11881: CALL_OW 179
// wait ( 0 0$3 ) ;
11885: LD_INT 105
11887: PPUSH
11888: CALL_OW 67
// Say ( Heike , DH-Surrender-3 ) ;
11892: LD_EXP 15
11896: PPUSH
11897: LD_STRING DH-Surrender-3
11899: PPUSH
11900: CALL_OW 88
// Say ( Heike , DH-Surrender-4 ) ;
11904: LD_EXP 15
11908: PPUSH
11909: LD_STRING DH-Surrender-4
11911: PPUSH
11912: CALL_OW 88
// RemoveSeeing ( 81 , 144 , 2 ) ;
11916: LD_INT 81
11918: PPUSH
11919: LD_INT 144
11921: PPUSH
11922: LD_INT 2
11924: PPUSH
11925: CALL_OW 331
// ChangeSideFog ( 1 , 2 ) ;
11929: LD_INT 1
11931: PPUSH
11932: LD_INT 2
11934: PPUSH
11935: CALL_OW 343
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_inside ] ] ) do
11939: LD_ADDR_VAR 0 1
11943: PUSH
11944: LD_INT 22
11946: PUSH
11947: LD_INT 1
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PUSH
11954: LD_INT 23
11956: PUSH
11957: LD_INT 1
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: PUSH
11964: LD_INT 54
11966: PUSH
11967: EMPTY
11968: LIST
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: LIST
11974: PPUSH
11975: CALL_OW 69
11979: PUSH
11980: FOR_IN
11981: IFFALSE 11994
// ComExit ( i ) ;
11983: LD_VAR 0 1
11987: PPUSH
11988: CALL 53784 0 1
11992: GO 11980
11994: POP
11995: POP
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
11996: LD_ADDR_VAR 0 3
12000: PUSH
12001: LD_INT 22
12003: PUSH
12004: LD_INT 1
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: PUSH
12011: LD_INT 25
12013: PUSH
12014: LD_INT 4
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: PPUSH
12025: CALL_OW 69
12029: ST_TO_ADDR
// hurts := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
12030: LD_ADDR_VAR 0 2
12034: PUSH
12035: LD_INT 22
12037: PUSH
12038: LD_INT 1
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: PUSH
12045: LD_INT 3
12047: PUSH
12048: LD_INT 50
12050: PUSH
12051: EMPTY
12052: LIST
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: PPUSH
12062: CALL_OW 69
12066: ST_TO_ADDR
// if sci and hurts then
12067: LD_VAR 0 3
12071: PUSH
12072: LD_VAR 0 2
12076: AND
12077: IFFALSE 12139
// begin for i := 1 to hurts do
12079: LD_ADDR_VAR 0 1
12083: PUSH
12084: DOUBLE
12085: LD_INT 1
12087: DEC
12088: ST_TO_ADDR
12089: LD_VAR 0 2
12093: PUSH
12094: FOR_TO
12095: IFFALSE 12137
// if i <= sci then
12097: LD_VAR 0 1
12101: PUSH
12102: LD_VAR 0 3
12106: LESSEQUAL
12107: IFFALSE 12135
// AddComHeal ( sci [ i ] , hurts [ i ] ) ;
12109: LD_VAR 0 3
12113: PUSH
12114: LD_VAR 0 1
12118: ARRAY
12119: PPUSH
12120: LD_VAR 0 2
12124: PUSH
12125: LD_VAR 0 1
12129: ARRAY
12130: PPUSH
12131: CALL_OW 188
12135: GO 12094
12137: POP
12138: POP
// end ; if IsOk ( Givi ) then
12139: LD_EXP 16
12143: PPUSH
12144: CALL_OW 302
12148: IFFALSE 12164
// Say ( Givi , DG-Surrender-5 ) else
12150: LD_EXP 16
12154: PPUSH
12155: LD_STRING DG-Surrender-5
12157: PPUSH
12158: CALL_OW 88
12162: GO 12176
// Say ( Heike , DH-Surrender-a-5 ) ;
12164: LD_EXP 15
12168: PPUSH
12169: LD_STRING DH-Surrender-a-5
12171: PPUSH
12172: CALL_OW 88
// Say ( usCommander , DCa-Surrender-6 ) ;
12176: LD_EXP 30
12180: PPUSH
12181: LD_STRING DCa-Surrender-6
12183: PPUSH
12184: CALL_OW 88
// Say ( usCommander , DCa-Surrender-7 ) ;
12188: LD_EXP 30
12192: PPUSH
12193: LD_STRING DCa-Surrender-7
12195: PPUSH
12196: CALL_OW 88
// if IsOk ( Givi ) then
12200: LD_EXP 16
12204: PPUSH
12205: CALL_OW 302
12209: IFFALSE 12225
// Say ( Givi , DG-Surrender-8 ) else
12211: LD_EXP 16
12215: PPUSH
12216: LD_STRING DG-Surrender-8
12218: PPUSH
12219: CALL_OW 88
12223: GO 12237
// Say ( Heike , DH-Surrender-a-8 ) ;
12225: LD_EXP 15
12229: PPUSH
12230: LD_STRING DH-Surrender-a-8
12232: PPUSH
12233: CALL_OW 88
// Say ( usCommander , DCa-Surrender-9 ) ;
12237: LD_EXP 30
12241: PPUSH
12242: LD_STRING DCa-Surrender-9
12244: PPUSH
12245: CALL_OW 88
// Say ( Heike , DH-Surrender-10 ) ;
12249: LD_EXP 15
12253: PPUSH
12254: LD_STRING DH-Surrender-10
12256: PPUSH
12257: CALL_OW 88
// Say ( usCommander , DCa-Surrender-11 ) ;
12261: LD_EXP 30
12265: PPUSH
12266: LD_STRING DCa-Surrender-11
12268: PPUSH
12269: CALL_OW 88
// Say ( Heike , DH-Surrender-12 ) ;
12273: LD_EXP 15
12277: PPUSH
12278: LD_STRING DH-Surrender-12
12280: PPUSH
12281: CALL_OW 88
// Say ( usCommander , DCa-Surrender-13 ) ;
12285: LD_EXP 30
12289: PPUSH
12290: LD_STRING DCa-Surrender-13
12292: PPUSH
12293: CALL_OW 88
// Say ( usCommander , DCa-Surrender-14 ) ;
12297: LD_EXP 30
12301: PPUSH
12302: LD_STRING DCa-Surrender-14
12304: PPUSH
12305: CALL_OW 88
// Say ( usCommander , DCa-Surrender-15 ) ;
12309: LD_EXP 30
12313: PPUSH
12314: LD_STRING DCa-Surrender-15
12316: PPUSH
12317: CALL_OW 88
// Say ( usCommander , DCa-Surrender-16 ) ;
12321: LD_EXP 30
12325: PPUSH
12326: LD_STRING DCa-Surrender-16
12328: PPUSH
12329: CALL_OW 88
// Say ( Kaia , DK-Surrender-17 ) ;
12333: LD_EXP 20
12337: PPUSH
12338: LD_STRING DK-Surrender-17
12340: PPUSH
12341: CALL_OW 88
// Say ( Olaf , DO-Surrender-18 ) ;
12345: LD_EXP 24
12349: PPUSH
12350: LD_STRING DO-Surrender-18
12352: PPUSH
12353: CALL_OW 88
// Say ( Olaf , DO-Surrender-19 ) ;
12357: LD_EXP 24
12361: PPUSH
12362: LD_STRING DO-Surrender-19
12364: PPUSH
12365: CALL_OW 88
// Say ( Kurt , DKs-Surrender-20 ) ;
12369: LD_EXP 25
12373: PPUSH
12374: LD_STRING DKs-Surrender-20
12376: PPUSH
12377: CALL_OW 88
// Say ( Kurt , DKs-Surrender-21 ) ;
12381: LD_EXP 25
12385: PPUSH
12386: LD_STRING DKs-Surrender-21
12388: PPUSH
12389: CALL_OW 88
// Say ( Markov , DMar-Surrender-22 ) ;
12393: LD_EXP 22
12397: PPUSH
12398: LD_STRING DMar-Surrender-22
12400: PPUSH
12401: CALL_OW 88
// Say ( Markov , DMar-Surrender-23 ) ;
12405: LD_EXP 22
12409: PPUSH
12410: LD_STRING DMar-Surrender-23
12412: PPUSH
12413: CALL_OW 88
// Say ( Sophia , DS-Surrender-24 ) ;
12417: LD_EXP 21
12421: PPUSH
12422: LD_STRING DS-Surrender-24
12424: PPUSH
12425: CALL_OW 88
// Say ( Aviradze , DA-Surrender-25 ) ;
12429: LD_EXP 26
12433: PPUSH
12434: LD_STRING DA-Surrender-25
12436: PPUSH
12437: CALL_OW 88
// Say ( Ibrahim , DI-Surrender-26 ) ;
12441: LD_EXP 18
12445: PPUSH
12446: LD_STRING DI-Surrender-26
12448: PPUSH
12449: CALL_OW 88
// Say ( Kamil , DKam-Surrender-27 ) ;
12453: LD_EXP 19
12457: PPUSH
12458: LD_STRING DKam-Surrender-27
12460: PPUSH
12461: CALL_OW 88
// if IsOk ( Givi ) then
12465: LD_EXP 16
12469: PPUSH
12470: CALL_OW 302
12474: IFFALSE 12514
// begin Say ( Givi , DG-Surrender-28 ) ;
12476: LD_EXP 16
12480: PPUSH
12481: LD_STRING DG-Surrender-28
12483: PPUSH
12484: CALL_OW 88
// Say ( Givi , DG-Surrender-29 ) ;
12488: LD_EXP 16
12492: PPUSH
12493: LD_STRING DG-Surrender-29
12495: PPUSH
12496: CALL_OW 88
// Say ( Givi , DG-Surrender-30 ) ;
12500: LD_EXP 16
12504: PPUSH
12505: LD_STRING DG-Surrender-30
12507: PPUSH
12508: CALL_OW 88
// end else
12512: GO 12550
// begin Say ( Heike , DH-Surrender-a-28 ) ;
12514: LD_EXP 15
12518: PPUSH
12519: LD_STRING DH-Surrender-a-28
12521: PPUSH
12522: CALL_OW 88
// Say ( Heike , DH-Surrender-a-29 ) ;
12526: LD_EXP 15
12530: PPUSH
12531: LD_STRING DH-Surrender-a-29
12533: PPUSH
12534: CALL_OW 88
// Say ( Heike , DH-Surrender-a-30 ) ;
12538: LD_EXP 15
12542: PPUSH
12543: LD_STRING DH-Surrender-a-30
12545: PPUSH
12546: CALL_OW 88
// end ; PrepareRussianFirstWaveAttack ;
12550: CALL 14510 0 0
// AgressiveMove ( FilterAllUnits ( [ f_side , 3 ] ) , [ [ 176 , 123 ] ] ) ;
12554: LD_INT 22
12556: PUSH
12557: LD_INT 3
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: PPUSH
12564: CALL_OW 69
12568: PPUSH
12569: LD_INT 176
12571: PUSH
12572: LD_INT 123
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PUSH
12579: EMPTY
12580: LIST
12581: PPUSH
12582: CALL 55990 0 2
// if not IsEnvironment ( 190 , 150 ) then
12586: LD_INT 190
12588: PPUSH
12589: LD_INT 150
12591: PPUSH
12592: CALL_OW 351
12596: NOT
12597: IFFALSE 12616
// PlaceSeeing ( 190 , 150 , 2 , - 8 ) ;
12599: LD_INT 190
12601: PPUSH
12602: LD_INT 150
12604: PPUSH
12605: LD_INT 2
12607: PPUSH
12608: LD_INT 8
12610: NEG
12611: PPUSH
12612: CALL_OW 330
// CenterOnXY ( 193 , 150 ) ;
12616: LD_INT 193
12618: PPUSH
12619: LD_INT 150
12621: PPUSH
12622: CALL_OW 84
// if IsOk ( Markov ) then
12626: LD_EXP 22
12630: PPUSH
12631: CALL_OW 302
12635: IFFALSE 12651
// Say ( Markov , DMar-Surrender-31 ) else
12637: LD_EXP 22
12641: PPUSH
12642: LD_STRING DMar-Surrender-31
12644: PPUSH
12645: CALL_OW 88
12649: GO 12708
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Surrender-a-31 ) then
12651: LD_EXP 27
12655: PPUSH
12656: LD_INT 26
12658: PUSH
12659: LD_INT 1
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: PPUSH
12666: CALL_OW 72
12670: PPUSH
12671: LD_STRING DArm-Surrender-a-31
12673: PPUSH
12674: CALL 224 0 2
12678: NOT
12679: IFFALSE 12708
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Surrender-a-31 ) ;
12681: LD_EXP 27
12685: PPUSH
12686: LD_INT 26
12688: PUSH
12689: LD_INT 2
12691: PUSH
12692: EMPTY
12693: LIST
12694: LIST
12695: PPUSH
12696: CALL_OW 72
12700: PPUSH
12701: LD_STRING DArf-Surrender-a-31
12703: PPUSH
12704: CALL 224 0 2
// Say ( Heike , DH-Surrender-32 ) ;
12708: LD_EXP 15
12712: PPUSH
12713: LD_STRING DH-Surrender-32
12715: PPUSH
12716: CALL_OW 88
// InGameOff ;
12720: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
12724: LD_STRING M2
12726: PPUSH
12727: CALL_OW 337
// wait ( 0 0$20 ) ;
12731: LD_INT 700
12733: PPUSH
12734: CALL_OW 67
// PrepareRussianLastWaveAttack ;
12738: CALL 14872 0 0
// russianAttack := true ;
12742: LD_ADDR_EXP 8
12746: PUSH
12747: LD_INT 1
12749: ST_TO_ADDR
// RemoveSeeing ( 190 , 150 , 2 ) ;
12750: LD_INT 190
12752: PPUSH
12753: LD_INT 150
12755: PPUSH
12756: LD_INT 2
12758: PPUSH
12759: CALL_OW 331
// end ;
12763: PPOPN 3
12765: END
// every 0 0$3 trigger seeHeavyGun and not InBattle ( 2 ) and IsOk ( Heike ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) and ( IsOk ( Markov ) or UnitFilter ( heikeSecondSquad , [ f_ok ] ) ) do
12766: LD_EXP 11
12770: PUSH
12771: LD_INT 2
12773: PPUSH
12774: CALL_OW 463
12778: NOT
12779: AND
12780: PUSH
12781: LD_EXP 15
12785: PPUSH
12786: CALL_OW 302
12790: AND
12791: PUSH
12792: LD_INT 22
12794: PUSH
12795: LD_INT 2
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: PUSH
12802: LD_INT 30
12804: PUSH
12805: LD_INT 3
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: PPUSH
12816: CALL_OW 69
12820: AND
12821: PUSH
12822: LD_EXP 22
12826: PPUSH
12827: CALL_OW 302
12831: PUSH
12832: LD_EXP 27
12836: PPUSH
12837: LD_INT 50
12839: PUSH
12840: EMPTY
12841: LIST
12842: PPUSH
12843: CALL_OW 72
12847: OR
12848: AND
12849: IFFALSE 13077
12851: GO 12853
12853: DISABLE
// begin DialogueOn ;
12854: CALL_OW 6
// Say ( Heike , DH-Heavy-1 ) ;
12858: LD_EXP 15
12862: PPUSH
12863: LD_STRING DH-Heavy-1
12865: PPUSH
12866: CALL_OW 88
// if IsOk ( Markov ) then
12870: LD_EXP 22
12874: PPUSH
12875: CALL_OW 302
12879: IFFALSE 13004
// begin Say ( Markov , DMar-Heavy-2 ) ;
12881: LD_EXP 22
12885: PPUSH
12886: LD_STRING DMar-Heavy-2
12888: PPUSH
12889: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
12893: LD_INT 22
12895: PUSH
12896: LD_INT 2
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: PUSH
12903: LD_INT 30
12905: PUSH
12906: LD_INT 3
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: PPUSH
12917: CALL_OW 69
12921: PUSH
12922: LD_INT 1
12924: ARRAY
12925: PPUSH
12926: CALL_OW 87
// Say ( Markov , DMar-Heavy-3 ) ;
12930: LD_EXP 22
12934: PPUSH
12935: LD_STRING DMar-Heavy-3
12937: PPUSH
12938: CALL_OW 88
// Say ( Markov , DMar-Heavy-4 ) ;
12942: LD_EXP 22
12946: PPUSH
12947: LD_STRING DMar-Heavy-4
12949: PPUSH
12950: CALL_OW 88
// Say ( Markov , DMar-Heavy-5 ) ;
12954: LD_EXP 22
12958: PPUSH
12959: LD_STRING DMar-Heavy-5
12961: PPUSH
12962: CALL_OW 88
// Say ( Markov , DMar-Heavy-6 ) ;
12966: LD_EXP 22
12970: PPUSH
12971: LD_STRING DMar-Heavy-6
12973: PPUSH
12974: CALL_OW 88
// Say ( Heike , DH-Heavy-7 ) ;
12978: LD_EXP 15
12982: PPUSH
12983: LD_STRING DH-Heavy-7
12985: PPUSH
12986: CALL_OW 88
// Say ( Heike , DH-Heavy-8 ) ;
12990: LD_EXP 15
12994: PPUSH
12995: LD_STRING DH-Heavy-8
12997: PPUSH
12998: CALL_OW 88
// end else
13002: GO 13061
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Heavy-a-2 ) then
13004: LD_EXP 27
13008: PPUSH
13009: LD_INT 26
13011: PUSH
13012: LD_INT 1
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: PPUSH
13019: CALL_OW 72
13023: PPUSH
13024: LD_STRING DArm-Heavy-a-2
13026: PPUSH
13027: CALL 224 0 2
13031: NOT
13032: IFFALSE 13061
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Heavy-a-2 ) ;
13034: LD_EXP 27
13038: PPUSH
13039: LD_INT 26
13041: PUSH
13042: LD_INT 2
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: PPUSH
13049: CALL_OW 72
13053: PPUSH
13054: LD_STRING DArf-Heavy-a-2
13056: PPUSH
13057: CALL 224 0 2
// end ; Say ( Heike , DH-Heavy-9 ) ;
13061: LD_EXP 15
13065: PPUSH
13066: LD_STRING DH-Heavy-9
13068: PPUSH
13069: CALL_OW 88
// DialogueOff ;
13073: CALL_OW 7
// end ;
13077: END
// every 0 0$2 trigger UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) and IsOk ( Heike ) and not usSurrender do
13078: LD_EXP 34
13082: PPUSH
13083: LD_INT 101
13085: PUSH
13086: LD_INT 2
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: PPUSH
13093: CALL_OW 72
13097: PUSH
13098: LD_EXP 15
13102: PPUSH
13103: CALL_OW 302
13107: AND
13108: PUSH
13109: LD_EXP 7
13113: NOT
13114: AND
13115: IFFALSE 13258
13117: GO 13119
13119: DISABLE
// begin DialogueOn ;
13120: CALL_OW 6
// CenterNowOnUnits ( UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) ) ;
13124: LD_EXP 34
13128: PPUSH
13129: LD_INT 101
13131: PUSH
13132: LD_INT 2
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PPUSH
13139: CALL_OW 72
13143: PPUSH
13144: CALL_OW 87
// Say ( Heike , DH-Flank-1 ) ;
13148: LD_EXP 15
13152: PPUSH
13153: LD_STRING DH-Flank-1
13155: PPUSH
13156: CALL_OW 88
// if IsOk ( Mike ) then
13160: LD_EXP 17
13164: PPUSH
13165: CALL_OW 302
13169: IFFALSE 13185
// Say ( Mike , DM-Flank-2 ) else
13171: LD_EXP 17
13175: PPUSH
13176: LD_STRING DM-Flank-2
13178: PPUSH
13179: CALL_OW 88
13183: GO 13242
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Flank-a-2 ) then
13185: LD_EXP 27
13189: PPUSH
13190: LD_INT 26
13192: PUSH
13193: LD_INT 1
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: PPUSH
13200: CALL_OW 72
13204: PPUSH
13205: LD_STRING DArm-Flank-a-2
13207: PPUSH
13208: CALL 224 0 2
13212: NOT
13213: IFFALSE 13242
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArm-Flank-a-2 ) ;
13215: LD_EXP 27
13219: PPUSH
13220: LD_INT 26
13222: PUSH
13223: LD_INT 2
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: PPUSH
13230: CALL_OW 72
13234: PPUSH
13235: LD_STRING DArm-Flank-a-2
13237: PPUSH
13238: CALL 224 0 2
// Say ( Heike , DH-Flank-3 ) ;
13242: LD_EXP 15
13246: PPUSH
13247: LD_STRING DH-Flank-3
13249: PPUSH
13250: CALL_OW 88
// DialogueOff ;
13254: CALL_OW 7
// end ;
13258: END
// every 0 0$3 trigger seeRemoteVehicle and not usSurrender do
13259: LD_EXP 10
13263: PUSH
13264: LD_EXP 7
13268: NOT
13269: AND
13270: IFFALSE 13494
13272: GO 13274
13274: DISABLE
// begin DialogueOn ;
13275: CALL_OW 6
// Say ( Heike , DH-USRC-1 ) ;
13279: LD_EXP 15
13283: PPUSH
13284: LD_STRING DH-USRC-1
13286: PPUSH
13287: CALL_OW 88
// if IsOk ( Markov ) then
13291: LD_EXP 22
13295: PPUSH
13296: CALL_OW 302
13300: IFFALSE 13316
// Say ( Markov , DMar-USRC-2 ) else
13302: LD_EXP 22
13306: PPUSH
13307: LD_STRING DMar-USRC-2
13309: PPUSH
13310: CALL_OW 88
13314: GO 13373
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-USRC-a-2 ) then
13316: LD_EXP 27
13320: PPUSH
13321: LD_INT 26
13323: PUSH
13324: LD_INT 1
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: PPUSH
13331: CALL_OW 72
13335: PPUSH
13336: LD_STRING DArm-USRC-a-2
13338: PPUSH
13339: CALL 224 0 2
13343: NOT
13344: IFFALSE 13373
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-USRC-a-2 ) ;
13346: LD_EXP 27
13350: PPUSH
13351: LD_INT 26
13353: PUSH
13354: LD_INT 2
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PPUSH
13361: CALL_OW 72
13365: PPUSH
13366: LD_STRING DArf-USRC-a-2
13368: PPUSH
13369: CALL 224 0 2
// DialogueOff ;
13373: CALL_OW 7
// wait ( 0 0$10 ) ;
13377: LD_INT 350
13379: PPUSH
13380: CALL_OW 67
// Say ( Heike , DH-USRC-3 ) ;
13384: LD_EXP 15
13388: PPUSH
13389: LD_STRING DH-USRC-3
13391: PPUSH
13392: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13396: LD_INT 35
13398: PPUSH
13399: CALL_OW 67
// until See ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
13403: LD_INT 2
13405: PPUSH
13406: LD_INT 22
13408: PUSH
13409: LD_INT 1
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: PUSH
13416: LD_INT 30
13418: PUSH
13419: LD_INT 36
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PPUSH
13430: CALL_OW 69
13434: PUSH
13435: LD_INT 1
13437: ARRAY
13438: PPUSH
13439: CALL_OW 292
13443: IFFALSE 13396
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
13445: LD_INT 22
13447: PUSH
13448: LD_INT 1
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: PUSH
13455: LD_INT 30
13457: PUSH
13458: LD_INT 36
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: PPUSH
13469: CALL_OW 69
13473: PUSH
13474: LD_INT 1
13476: ARRAY
13477: PPUSH
13478: CALL_OW 87
// Say ( Heike , DH-USRCFound-1 ) ;
13482: LD_EXP 15
13486: PPUSH
13487: LD_STRING DH-USRCFound-1
13489: PPUSH
13490: CALL_OW 88
// end ;
13494: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
13495: LD_EXP 20
13499: PPUSH
13500: CALL_OW 256
13504: PUSH
13505: LD_INT 3
13507: LESS
13508: IFFALSE 13545
13510: GO 13512
13512: DISABLE
// begin DialogueOn ;
13513: CALL_OW 6
// ForceSay ( Kaia , DK-Dead-1 ) ;
13517: LD_EXP 20
13521: PPUSH
13522: LD_STRING DK-Dead-1
13524: PPUSH
13525: CALL_OW 91
// ForceSay ( Kaia , DK-Dead-2 ) ;
13529: LD_EXP 20
13533: PPUSH
13534: LD_STRING DK-Dead-2
13536: PPUSH
13537: CALL_OW 91
// DialogueOff ;
13541: CALL_OW 7
// end ;
13545: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_bweapon , ar_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] ] ] ) do
13546: LD_INT 22
13548: PUSH
13549: LD_INT 2
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: PUSH
13556: LD_INT 2
13558: PUSH
13559: LD_INT 35
13561: PUSH
13562: LD_INT 28
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: PUSH
13569: LD_INT 34
13571: PUSH
13572: LD_INT 28
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: LIST
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PPUSH
13588: CALL_OW 69
13592: IFFALSE 13605
13594: GO 13596
13596: DISABLE
// hasRockets := true ;
13597: LD_ADDR_EXP 9
13601: PUSH
13602: LD_INT 1
13604: ST_TO_ADDR
13605: END
// every 0 0$1 trigger russianAttack and not FilterAllUnits ( [ f_side , 3 ] ) do
13606: LD_EXP 8
13610: PUSH
13611: LD_INT 22
13613: PUSH
13614: LD_INT 3
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PPUSH
13621: CALL_OW 69
13625: NOT
13626: AND
13627: IFFALSE 14289
13629: GO 13631
13631: DISABLE
// begin DialogueOn ;
13632: CALL_OW 6
// if vehLossCounter = 0 then
13636: LD_EXP 14
13640: PUSH
13641: LD_INT 0
13643: EQUAL
13644: IFFALSE 13653
// SetAchievement ( ACH_UNTOUCH ) ;
13646: LD_STRING ACH_UNTOUCH
13648: PPUSH
13649: CALL_OW 543
// if tick < 35 35$00 then
13653: LD_OWVAR 1
13657: PUSH
13658: LD_INT 73500
13660: LESS
13661: IFFALSE 13670
// SetAchievement ( ACH_HSPEED_7 ) ;
13663: LD_STRING ACH_HSPEED_7
13665: PPUSH
13666: CALL_OW 543
// CenterNowOnUnits ( Heike ) ;
13670: LD_EXP 15
13674: PPUSH
13675: CALL_OW 87
// Say ( Heike , DH-End-1 ) ;
13679: LD_EXP 15
13683: PPUSH
13684: LD_STRING DH-End-1
13686: PPUSH
13687: CALL_OW 88
// SayRadio ( Shariff , DShar-End-2 ) ;
13691: LD_EXP 23
13695: PPUSH
13696: LD_STRING DShar-End-2
13698: PPUSH
13699: CALL_OW 94
// Say ( Kaia , DK-End-3 ) ;
13703: LD_EXP 20
13707: PPUSH
13708: LD_STRING DK-End-3
13710: PPUSH
13711: CALL_OW 88
// Say ( Heike , DH-End-4 ) ;
13715: LD_EXP 15
13719: PPUSH
13720: LD_STRING DH-End-4
13722: PPUSH
13723: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
13727: LD_EXP 23
13731: PPUSH
13732: LD_STRING DShar-End-5
13734: PPUSH
13735: CALL_OW 94
// if IsOk ( Markov ) then
13739: LD_EXP 22
13743: PPUSH
13744: CALL_OW 302
13748: IFFALSE 13762
// Say ( Kaia , DK-End-6 ) ;
13750: LD_EXP 20
13754: PPUSH
13755: LD_STRING DK-End-6
13757: PPUSH
13758: CALL_OW 88
// Say ( Kaia , DK-End-7 ) ;
13762: LD_EXP 20
13766: PPUSH
13767: LD_STRING DK-End-7
13769: PPUSH
13770: CALL_OW 88
// if IsOk ( Kaia ) then
13774: LD_EXP 20
13778: PPUSH
13779: CALL_OW 302
13783: IFFALSE 13821
// begin Say ( Givi , DG-End-8 ) ;
13785: LD_EXP 16
13789: PPUSH
13790: LD_STRING DG-End-8
13792: PPUSH
13793: CALL_OW 88
// Say ( Givi , DG-End-9 ) ;
13797: LD_EXP 16
13801: PPUSH
13802: LD_STRING DG-End-9
13804: PPUSH
13805: CALL_OW 88
// Say ( Heike , DH-End-10 ) ;
13809: LD_EXP 15
13813: PPUSH
13814: LD_STRING DH-End-10
13816: PPUSH
13817: CALL_OW 88
// end ; Say ( Heike , DH-End-11 ) ;
13821: LD_EXP 15
13825: PPUSH
13826: LD_STRING DH-End-11
13828: PPUSH
13829: CALL_OW 88
// if GetTech ( tech_MatDet , 2 ) = state_researched then
13833: LD_INT 7
13835: PPUSH
13836: LD_INT 2
13838: PPUSH
13839: CALL_OW 321
13843: PUSH
13844: LD_INT 2
13846: EQUAL
13847: IFFALSE 13861
// AddMedal ( med1 , 1 ) else
13849: LD_STRING med1
13851: PPUSH
13852: LD_INT 1
13854: PPUSH
13855: CALL_OW 101
13859: GO 13872
// AddMedal ( med1 , - 1 ) ;
13861: LD_STRING med1
13863: PPUSH
13864: LD_INT 1
13866: NEG
13867: PPUSH
13868: CALL_OW 101
// if hasRockets then
13872: LD_EXP 9
13876: IFFALSE 13890
// AddMedal ( med2 , 1 ) else
13878: LD_STRING med2
13880: PPUSH
13881: LD_INT 1
13883: PPUSH
13884: CALL_OW 101
13888: GO 13901
// AddMedal ( med2 , - 1 ) ;
13890: LD_STRING med2
13892: PPUSH
13893: LD_INT 1
13895: NEG
13896: PPUSH
13897: CALL_OW 101
// if tick < [ 50 50$00 , 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
13901: LD_OWVAR 1
13905: PUSH
13906: LD_INT 105000
13908: PUSH
13909: LD_INT 94500
13911: PUSH
13912: LD_INT 84000
13914: PUSH
13915: LD_INT 73500
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: PUSH
13924: LD_OWVAR 67
13928: ARRAY
13929: LESS
13930: IFFALSE 13944
// AddMedal ( med3 , 1 ) else
13932: LD_STRING med3
13934: PPUSH
13935: LD_INT 1
13937: PPUSH
13938: CALL_OW 101
13942: GO 13955
// AddMedal ( med3 , - 1 ) ;
13944: LD_STRING med3
13946: PPUSH
13947: LD_INT 1
13949: NEG
13950: PPUSH
13951: CALL_OW 101
// GiveMedals ( MAIN ) ;
13955: LD_STRING MAIN
13957: PPUSH
13958: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13962: LD_INT 22
13964: PUSH
13965: LD_INT 2
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: PUSH
13972: LD_INT 23
13974: PUSH
13975: LD_INT 2
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: PUSH
13982: LD_INT 21
13984: PUSH
13985: LD_INT 1
13987: PUSH
13988: EMPTY
13989: LIST
13990: LIST
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: LIST
13996: PPUSH
13997: CALL_OW 69
14001: PPUSH
14002: CALL_OW 43
// SaveCharacters ( usCommander , 07_UsCommander ) ;
14006: LD_EXP 30
14010: PPUSH
14011: LD_STRING 07_UsCommander
14013: PPUSH
14014: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff usCommander , 07_Americans ) ;
14018: LD_INT 22
14020: PUSH
14021: LD_INT 1
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: PUSH
14028: LD_INT 23
14030: PUSH
14031: LD_INT 1
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: PUSH
14038: LD_INT 21
14040: PUSH
14041: LD_INT 1
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: LIST
14052: PPUSH
14053: CALL_OW 69
14057: PUSH
14058: LD_EXP 30
14062: DIFF
14063: PPUSH
14064: LD_STRING 07_Americans
14066: PPUSH
14067: CALL_OW 38
// SaveCharacters ( Heike , 07_Heike ) ;
14071: LD_EXP 15
14075: PPUSH
14076: LD_STRING 07_Heike
14078: PPUSH
14079: CALL_OW 38
// if Aviradze then
14083: LD_EXP 26
14087: IFFALSE 14101
// SaveCharacters ( Aviradze , 07_Aviradze ) ;
14089: LD_EXP 26
14093: PPUSH
14094: LD_STRING 07_Aviradze
14096: PPUSH
14097: CALL_OW 38
// if Ibrahim then
14101: LD_EXP 18
14105: IFFALSE 14119
// SaveCharacters ( Ibrahim , 07_Ibrahim ) ;
14107: LD_EXP 18
14111: PPUSH
14112: LD_STRING 07_Ibrahim
14114: PPUSH
14115: CALL_OW 38
// if Kamil then
14119: LD_EXP 19
14123: IFFALSE 14137
// SaveCharacters ( Kamil , 07_Kamil ) ;
14125: LD_EXP 19
14129: PPUSH
14130: LD_STRING 07_Kamil
14132: PPUSH
14133: CALL_OW 38
// if Sophia then
14137: LD_EXP 21
14141: IFFALSE 14155
// SaveCharacters ( Sophia , 07_Sophia ) ;
14143: LD_EXP 21
14147: PPUSH
14148: LD_STRING 07_Sophia
14150: PPUSH
14151: CALL_OW 38
// if Kaia then
14155: LD_EXP 20
14159: IFFALSE 14173
// SaveCharacters ( Kaia , 07_Kaia ) ;
14161: LD_EXP 20
14165: PPUSH
14166: LD_STRING 07_Kaia
14168: PPUSH
14169: CALL_OW 38
// if Givi then
14173: LD_EXP 16
14177: IFFALSE 14191
// SaveCharacters ( Givi , 07_Givi ) ;
14179: LD_EXP 16
14183: PPUSH
14184: LD_STRING 07_Givi
14186: PPUSH
14187: CALL_OW 38
// if Mike then
14191: LD_EXP 17
14195: IFFALSE 14209
// SaveCharacters ( Mike , 07_Mike ) ;
14197: LD_EXP 17
14201: PPUSH
14202: LD_STRING 07_Mike
14204: PPUSH
14205: CALL_OW 38
// if Markov then
14209: LD_EXP 22
14213: IFFALSE 14227
// SaveCharacters ( Markov , 07_Markov ) ;
14215: LD_EXP 22
14219: PPUSH
14220: LD_STRING 07_Markov
14222: PPUSH
14223: CALL_OW 38
// if Kurt then
14227: LD_EXP 25
14231: IFFALSE 14245
// SaveCharacters ( Kurt , 07_Kurt ) ;
14233: LD_EXP 25
14237: PPUSH
14238: LD_STRING 07_Kurt
14240: PPUSH
14241: CALL_OW 38
// if Olaf then
14245: LD_EXP 24
14249: IFFALSE 14263
// SaveCharacters ( Olaf , 07_Olaf ) ;
14251: LD_EXP 24
14255: PPUSH
14256: LD_STRING 07_Olaf
14258: PPUSH
14259: CALL_OW 38
// if heikeSecondSquad then
14263: LD_EXP 27
14267: IFFALSE 14281
// SaveCharacters ( heikeSecondSquad , 07_others ) ;
14269: LD_EXP 27
14273: PPUSH
14274: LD_STRING 07_others
14276: PPUSH
14277: CALL_OW 38
// YouWin ;
14281: CALL_OW 103
// DialogueOff ;
14285: CALL_OW 7
// end ; end_of_file
14289: END
// every 1 1$20 + 0 0$40 trigger GetResourceArea ( cratesRiverArea , mat_cans ) < [ 12 , 10 , 8 , 8 ] [ Difficulty ] do
14290: LD_INT 7
14292: PPUSH
14293: LD_INT 1
14295: PPUSH
14296: CALL_OW 287
14300: PUSH
14301: LD_INT 12
14303: PUSH
14304: LD_INT 10
14306: PUSH
14307: LD_INT 8
14309: PUSH
14310: LD_INT 8
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: PUSH
14319: LD_OWVAR 67
14323: ARRAY
14324: LESS
14325: IFFALSE 14352
14327: GO 14329
14329: DISABLE
// begin enable ;
14330: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesRiverArea , true ) ;
14331: LD_INT 1
14333: PPUSH
14334: LD_INT 5
14336: PPUSH
14337: CALL_OW 12
14341: PPUSH
14342: LD_INT 7
14344: PPUSH
14345: LD_INT 1
14347: PPUSH
14348: CALL_OW 55
// end ;
14352: END
// every 0 0$40 + 0 0$40 trigger GetResourceArea ( cratesForestArea , mat_cans ) < [ 25 , 22 , 17 , 14 ] [ Difficulty ] and tick < 24 24$00 do
14353: LD_INT 8
14355: PPUSH
14356: LD_INT 1
14358: PPUSH
14359: CALL_OW 287
14363: PUSH
14364: LD_INT 25
14366: PUSH
14367: LD_INT 22
14369: PUSH
14370: LD_INT 17
14372: PUSH
14373: LD_INT 14
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: PUSH
14382: LD_OWVAR 67
14386: ARRAY
14387: LESS
14388: PUSH
14389: LD_OWVAR 1
14393: PUSH
14394: LD_INT 50400
14396: LESS
14397: AND
14398: IFFALSE 14425
14400: GO 14402
14402: DISABLE
// begin enable ;
14403: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesForestArea , true ) ;
14404: LD_INT 1
14406: PPUSH
14407: LD_INT 5
14409: PPUSH
14410: CALL_OW 12
14414: PPUSH
14415: LD_INT 8
14417: PPUSH
14418: LD_INT 1
14420: PPUSH
14421: CALL_OW 55
// end ;
14425: END
// every 0 0$40 trigger tick < 8 8$10 do
14426: LD_OWVAR 1
14430: PUSH
14431: LD_INT 17150
14433: LESS
14434: IFFALSE 14467
14436: GO 14438
14438: DISABLE
// begin enable ;
14439: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 130 , 18 , 12 , true ) ;
14440: LD_INT 1
14442: PPUSH
14443: LD_INT 5
14445: PPUSH
14446: CALL_OW 12
14450: PPUSH
14451: LD_INT 130
14453: PPUSH
14454: LD_INT 18
14456: PPUSH
14457: LD_INT 12
14459: PPUSH
14460: LD_INT 1
14462: PPUSH
14463: CALL_OW 56
// end ;
14467: END
// every 1 1$00 + 0 0$30 trigger tick < 6 6$10 do
14468: LD_OWVAR 1
14472: PUSH
14473: LD_INT 12950
14475: LESS
14476: IFFALSE 14509
14478: GO 14480
14480: DISABLE
// begin enable ;
14481: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 172 , 97 , 12 , true ) ;
14482: LD_INT 1
14484: PPUSH
14485: LD_INT 5
14487: PPUSH
14488: CALL_OW 12
14492: PPUSH
14493: LD_INT 172
14495: PPUSH
14496: LD_INT 97
14498: PPUSH
14499: LD_INT 12
14501: PPUSH
14502: LD_INT 1
14504: PPUSH
14505: CALL_OW 56
// end ; end_of_file
14509: END
// export function PrepareRussianFirstWaveAttack ; var i , tmp , un , veh ; begin
14510: LD_INT 0
14512: PPUSH
14513: PPUSH
14514: PPUSH
14515: PPUSH
14516: PPUSH
// uc_side := 3 ;
14517: LD_ADDR_OWVAR 20
14521: PUSH
14522: LD_INT 3
14524: ST_TO_ADDR
// uc_nation := 3 ;
14525: LD_ADDR_OWVAR 21
14529: PUSH
14530: LD_INT 3
14532: ST_TO_ADDR
// tmp := [ [ 184 , 144 , 5 ] , [ 191 , 147 , 5 ] , [ 202 , 151 , 4 ] , [ 210 , 152 , 4 ] ] ;
14533: LD_ADDR_VAR 0 3
14537: PUSH
14538: LD_INT 184
14540: PUSH
14541: LD_INT 144
14543: PUSH
14544: LD_INT 5
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: LIST
14551: PUSH
14552: LD_INT 191
14554: PUSH
14555: LD_INT 147
14557: PUSH
14558: LD_INT 5
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: LIST
14565: PUSH
14566: LD_INT 202
14568: PUSH
14569: LD_INT 151
14571: PUSH
14572: LD_INT 4
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: LIST
14579: PUSH
14580: LD_INT 210
14582: PUSH
14583: LD_INT 152
14585: PUSH
14586: LD_INT 4
14588: PUSH
14589: EMPTY
14590: LIST
14591: LIST
14592: LIST
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: ST_TO_ADDR
// for i := 1 to 3 do
14600: LD_ADDR_VAR 0 2
14604: PUSH
14605: DOUBLE
14606: LD_INT 1
14608: DEC
14609: ST_TO_ADDR
14610: LD_INT 3
14612: PUSH
14613: FOR_TO
14614: IFFALSE 14783
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_gun ] [ i mod 3 + 1 ] , 40 ) ;
14616: LD_INT 24
14618: PPUSH
14619: LD_INT 1
14621: PPUSH
14622: LD_INT 1
14624: PPUSH
14625: LD_INT 43
14627: PUSH
14628: LD_INT 44
14630: PUSH
14631: LD_INT 46
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: LIST
14638: PUSH
14639: LD_VAR 0 2
14643: PUSH
14644: LD_INT 3
14646: MOD
14647: PUSH
14648: LD_INT 1
14650: PLUS
14651: ARRAY
14652: PPUSH
14653: LD_INT 40
14655: PPUSH
14656: CALL 20524 0 5
// veh := CreateVehicle ;
14660: LD_ADDR_VAR 0 5
14664: PUSH
14665: CALL_OW 45
14669: ST_TO_ADDR
// SetDir ( veh , tmp [ i ] [ 3 ] ) ;
14670: LD_VAR 0 5
14674: PPUSH
14675: LD_VAR 0 3
14679: PUSH
14680: LD_VAR 0 2
14684: ARRAY
14685: PUSH
14686: LD_INT 3
14688: ARRAY
14689: PPUSH
14690: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
14694: LD_VAR 0 5
14698: PPUSH
14699: LD_VAR 0 3
14703: PUSH
14704: LD_VAR 0 2
14708: ARRAY
14709: PUSH
14710: LD_INT 1
14712: ARRAY
14713: PPUSH
14714: LD_VAR 0 3
14718: PUSH
14719: LD_VAR 0 2
14723: ARRAY
14724: PUSH
14725: LD_INT 2
14727: ARRAY
14728: PPUSH
14729: LD_INT 0
14731: PPUSH
14732: CALL_OW 48
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14736: LD_INT 0
14738: PPUSH
14739: LD_INT 6
14741: PUSH
14742: LD_INT 7
14744: PUSH
14745: LD_INT 8
14747: PUSH
14748: LD_INT 8
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: PUSH
14757: LD_OWVAR 67
14761: ARRAY
14762: PPUSH
14763: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
14767: CALL_OW 44
14771: PPUSH
14772: LD_VAR 0 5
14776: PPUSH
14777: CALL_OW 52
// end ;
14781: GO 14613
14783: POP
14784: POP
// for i := 1 to 4 do
14785: LD_ADDR_VAR 0 2
14789: PUSH
14790: DOUBLE
14791: LD_INT 1
14793: DEC
14794: ST_TO_ADDR
14795: LD_INT 4
14797: PUSH
14798: FOR_TO
14799: IFFALSE 14865
// begin PrepareSoldier ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14801: LD_INT 0
14803: PPUSH
14804: LD_INT 6
14806: PUSH
14807: LD_INT 7
14809: PUSH
14810: LD_INT 8
14812: PUSH
14813: LD_INT 8
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: PUSH
14822: LD_OWVAR 67
14826: ARRAY
14827: PPUSH
14828: CALL_OW 381
// un := CreateHuman ;
14832: LD_ADDR_VAR 0 4
14836: PUSH
14837: CALL_OW 44
14841: ST_TO_ADDR
// PlaceUnitXYR ( un , 185 , 145 , 6 , false ) ;
14842: LD_VAR 0 4
14846: PPUSH
14847: LD_INT 185
14849: PPUSH
14850: LD_INT 145
14852: PPUSH
14853: LD_INT 6
14855: PPUSH
14856: LD_INT 0
14858: PPUSH
14859: CALL_OW 50
// end ;
14863: GO 14798
14865: POP
14866: POP
// end ;
14867: LD_VAR 0 1
14871: RET
// export function PrepareRussianLastWaveAttack ; var i , veh ; begin
14872: LD_INT 0
14874: PPUSH
14875: PPUSH
14876: PPUSH
// uc_side := 3 ;
14877: LD_ADDR_OWVAR 20
14881: PUSH
14882: LD_INT 3
14884: ST_TO_ADDR
// if Difficulty > 1 then
14885: LD_OWVAR 67
14889: PUSH
14890: LD_INT 1
14892: GREATER
14893: IFFALSE 15055
// begin uc_nation := 0 ;
14895: LD_ADDR_OWVAR 21
14899: PUSH
14900: LD_INT 0
14902: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty + 1 ] do
14903: LD_ADDR_VAR 0 2
14907: PUSH
14908: DOUBLE
14909: LD_INT 1
14911: DEC
14912: ST_TO_ADDR
14913: LD_INT 4
14915: PUSH
14916: LD_INT 5
14918: PUSH
14919: LD_INT 6
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: LIST
14926: PUSH
14927: LD_OWVAR 67
14931: PUSH
14932: LD_INT 1
14934: PLUS
14935: ARRAY
14936: PUSH
14937: FOR_TO
14938: IFFALSE 15053
// begin hc_class := class_apeman_soldier ;
14940: LD_ADDR_OWVAR 28
14944: PUSH
14945: LD_INT 15
14947: ST_TO_ADDR
// hc_gallery :=  ;
14948: LD_ADDR_OWVAR 33
14952: PUSH
14953: LD_STRING 
14955: ST_TO_ADDR
// hc_name := [ Treci , Ivan , Yaromir , Nadzieia , Krasna , Piaty ] [ rand ( 1 , 6 ) ] ;
14956: LD_ADDR_OWVAR 26
14960: PUSH
14961: LD_STRING Treci
14963: PUSH
14964: LD_STRING Ivan
14966: PUSH
14967: LD_STRING Yaromir
14969: PUSH
14970: LD_STRING Nadzieia
14972: PUSH
14973: LD_STRING Krasna
14975: PUSH
14976: LD_STRING Piaty
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: PUSH
14987: LD_INT 1
14989: PPUSH
14990: LD_INT 6
14992: PPUSH
14993: CALL_OW 12
14997: ARRAY
14998: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 0 , 0 ] ;
14999: LD_ADDR_OWVAR 31
15003: PUSH
15004: LD_INT 5
15006: PUSH
15007: LD_INT 0
15009: PUSH
15010: LD_INT 0
15012: PUSH
15013: LD_INT 0
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: ST_TO_ADDR
// hc_sex := sex_male ;
15022: LD_ADDR_OWVAR 27
15026: PUSH
15027: LD_INT 1
15029: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 178 , 148 , 6 , false ) ;
15030: CALL_OW 44
15034: PPUSH
15035: LD_INT 178
15037: PPUSH
15038: LD_INT 148
15040: PPUSH
15041: LD_INT 6
15043: PPUSH
15044: LD_INT 0
15046: PPUSH
15047: CALL_OW 50
// end ;
15051: GO 14937
15053: POP
15054: POP
// end ; for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
15055: LD_ADDR_VAR 0 2
15059: PUSH
15060: DOUBLE
15061: LD_INT 1
15063: DEC
15064: ST_TO_ADDR
15065: LD_INT 2
15067: PUSH
15068: LD_INT 3
15070: PUSH
15071: LD_INT 4
15073: PUSH
15074: LD_INT 5
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: PUSH
15083: LD_OWVAR 67
15087: ARRAY
15088: PUSH
15089: FOR_TO
15090: IFFALSE 15257
// begin uc_nation := 3 ;
15092: LD_ADDR_OWVAR 21
15096: PUSH
15097: LD_INT 3
15099: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gatling_gun , ru_gun ] [ i mod 3 + 1 ] , 44 ) ;
15100: LD_INT 22
15102: PPUSH
15103: LD_INT 1
15105: PPUSH
15106: LD_INT 1
15108: PPUSH
15109: LD_INT 45
15111: PUSH
15112: LD_INT 43
15114: PUSH
15115: LD_INT 44
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: LIST
15122: PUSH
15123: LD_VAR 0 2
15127: PUSH
15128: LD_INT 3
15130: MOD
15131: PUSH
15132: LD_INT 1
15134: PLUS
15135: ARRAY
15136: PPUSH
15137: LD_INT 44
15139: PPUSH
15140: CALL 20524 0 5
// veh := CreateVehicle ;
15144: LD_ADDR_VAR 0 3
15148: PUSH
15149: CALL_OW 45
15153: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
15154: LD_VAR 0 3
15158: PPUSH
15159: LD_INT 4
15161: PPUSH
15162: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
15166: LD_VAR 0 3
15170: PPUSH
15171: LD_INT 1
15173: PPUSH
15174: LD_INT 0
15176: PPUSH
15177: CALL_OW 49
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
15181: LD_INT 0
15183: PPUSH
15184: LD_INT 6
15186: PUSH
15187: LD_INT 7
15189: PUSH
15190: LD_INT 8
15192: PUSH
15193: LD_INT 8
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: PUSH
15202: LD_OWVAR 67
15206: ARRAY
15207: PPUSH
15208: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
15212: CALL_OW 44
15216: PPUSH
15217: LD_VAR 0 3
15221: PPUSH
15222: CALL_OW 52
// AgressiveMove ( veh , [ [ 178 , 137 ] ] ) ;
15226: LD_VAR 0 3
15230: PPUSH
15231: LD_INT 178
15233: PUSH
15234: LD_INT 137
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: PUSH
15241: EMPTY
15242: LIST
15243: PPUSH
15244: CALL 55990 0 2
// wait ( 0 0$2 ) ;
15248: LD_INT 70
15250: PPUSH
15251: CALL_OW 67
// end ;
15255: GO 15089
15257: POP
15258: POP
// end ;
15259: LD_VAR 0 1
15263: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i , tmp ;
15264: LD_INT 22
15266: PUSH
15267: LD_INT 3
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: LD_INT 32
15276: PUSH
15277: LD_INT 1
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: PPUSH
15288: CALL_OW 69
15292: IFFALSE 15380
15294: GO 15296
15296: DISABLE
15297: LD_INT 0
15299: PPUSH
15300: PPUSH
// begin enable ;
15301: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) ;
15302: LD_ADDR_VAR 0 2
15306: PUSH
15307: LD_INT 22
15309: PUSH
15310: LD_INT 3
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: PUSH
15317: LD_INT 32
15319: PUSH
15320: LD_INT 1
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PPUSH
15331: CALL_OW 69
15335: ST_TO_ADDR
// for i in tmp do
15336: LD_ADDR_VAR 0 1
15340: PUSH
15341: LD_VAR 0 2
15345: PUSH
15346: FOR_IN
15347: IFFALSE 15378
// if GetFuel ( i ) < 3 then
15349: LD_VAR 0 1
15353: PPUSH
15354: CALL_OW 261
15358: PUSH
15359: LD_INT 3
15361: LESS
15362: IFFALSE 15376
// SetFuel ( i , 3 ) ;
15364: LD_VAR 0 1
15368: PPUSH
15369: LD_INT 3
15371: PPUSH
15372: CALL_OW 240
15376: GO 15346
15378: POP
15379: POP
// end ;
15380: PPOPN 2
15382: END
// every 0 0$1 trigger russianAttack and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i , mech , tmp ;
15383: LD_EXP 8
15387: PUSH
15388: LD_INT 22
15390: PUSH
15391: LD_INT 3
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: PUSH
15398: LD_INT 21
15400: PUSH
15401: LD_INT 1
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PPUSH
15412: CALL_OW 69
15416: AND
15417: IFFALSE 15681
15419: GO 15421
15421: DISABLE
15422: LD_INT 0
15424: PPUSH
15425: PPUSH
15426: PPUSH
// begin enable ;
15427: ENABLE
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] ] ) ;
15428: LD_ADDR_VAR 0 2
15432: PUSH
15433: LD_INT 22
15435: PUSH
15436: LD_INT 3
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 25
15445: PUSH
15446: LD_INT 3
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: LD_INT 3
15455: PUSH
15456: LD_INT 55
15458: PUSH
15459: EMPTY
15460: LIST
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: LIST
15470: PPUSH
15471: CALL_OW 69
15475: ST_TO_ADDR
// if mech then
15476: LD_VAR 0 2
15480: IFFALSE 15550
// for i in mech do
15482: LD_ADDR_VAR 0 1
15486: PUSH
15487: LD_VAR 0 2
15491: PUSH
15492: FOR_IN
15493: IFFALSE 15548
// begin if IsInArea ( i , escapeArea ) then
15495: LD_VAR 0 1
15499: PPUSH
15500: LD_INT 13
15502: PPUSH
15503: CALL_OW 308
15507: IFFALSE 15520
// RemoveUnit ( i ) else
15509: LD_VAR 0 1
15513: PPUSH
15514: CALL_OW 64
15518: GO 15546
// if IsOk ( i ) then
15520: LD_VAR 0 1
15524: PPUSH
15525: CALL_OW 302
15529: IFFALSE 15546
// ComMoveXY ( i , 196 , 155 ) ;
15531: LD_VAR 0 1
15535: PPUSH
15536: LD_INT 196
15538: PPUSH
15539: LD_INT 155
15541: PPUSH
15542: CALL_OW 111
// end ;
15546: GO 15492
15548: POP
15549: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_apeman_soldier ] , [ f_type , unit_vehicle ] ] , [ f_ok ] ] ) ;
15550: LD_ADDR_VAR 0 3
15554: PUSH
15555: LD_INT 22
15557: PUSH
15558: LD_INT 3
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: PUSH
15565: LD_INT 2
15567: PUSH
15568: LD_INT 25
15570: PUSH
15571: LD_INT 1
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: PUSH
15578: LD_INT 25
15580: PUSH
15581: LD_INT 15
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PUSH
15588: LD_INT 21
15590: PUSH
15591: LD_INT 2
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: PUSH
15604: LD_INT 50
15606: PUSH
15607: EMPTY
15608: LIST
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: LIST
15614: PPUSH
15615: CALL_OW 69
15619: ST_TO_ADDR
// if tmp then
15620: LD_VAR 0 3
15624: IFFALSE 15681
// AgressiveMove ( tmp , [ [ 171 , 106 ] , [ 145 , 69 ] , [ 132 , 38 ] , [ 126 , 15 ] ] ) ;
15626: LD_VAR 0 3
15630: PPUSH
15631: LD_INT 171
15633: PUSH
15634: LD_INT 106
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: PUSH
15641: LD_INT 145
15643: PUSH
15644: LD_INT 69
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 132
15653: PUSH
15654: LD_INT 38
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: LD_INT 126
15663: PUSH
15664: LD_INT 15
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: PPUSH
15677: CALL 55990 0 2
// end ; end_of_file
15681: PPOPN 3
15683: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15684: LD_INT 0
15686: PPUSH
15687: PPUSH
// if exist_mode then
15688: LD_VAR 0 2
15692: IFFALSE 15717
// unit := CreateCharacter ( prefix & ident ) else
15694: LD_ADDR_VAR 0 5
15698: PUSH
15699: LD_VAR 0 3
15703: PUSH
15704: LD_VAR 0 1
15708: STR
15709: PPUSH
15710: CALL_OW 34
15714: ST_TO_ADDR
15715: GO 15732
// unit := NewCharacter ( ident ) ;
15717: LD_ADDR_VAR 0 5
15721: PUSH
15722: LD_VAR 0 1
15726: PPUSH
15727: CALL_OW 25
15731: ST_TO_ADDR
// result := unit ;
15732: LD_ADDR_VAR 0 4
15736: PUSH
15737: LD_VAR 0 5
15741: ST_TO_ADDR
// end ;
15742: LD_VAR 0 4
15746: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15747: LD_INT 0
15749: PPUSH
15750: PPUSH
// if not side or not nation then
15751: LD_VAR 0 1
15755: NOT
15756: PUSH
15757: LD_VAR 0 2
15761: NOT
15762: OR
15763: IFFALSE 15767
// exit ;
15765: GO 16535
// case nation of nation_american :
15767: LD_VAR 0 2
15771: PUSH
15772: LD_INT 1
15774: DOUBLE
15775: EQUAL
15776: IFTRUE 15780
15778: GO 15994
15780: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15781: LD_ADDR_VAR 0 4
15785: PUSH
15786: LD_INT 35
15788: PUSH
15789: LD_INT 45
15791: PUSH
15792: LD_INT 46
15794: PUSH
15795: LD_INT 47
15797: PUSH
15798: LD_INT 82
15800: PUSH
15801: LD_INT 83
15803: PUSH
15804: LD_INT 84
15806: PUSH
15807: LD_INT 85
15809: PUSH
15810: LD_INT 86
15812: PUSH
15813: LD_INT 1
15815: PUSH
15816: LD_INT 2
15818: PUSH
15819: LD_INT 6
15821: PUSH
15822: LD_INT 15
15824: PUSH
15825: LD_INT 16
15827: PUSH
15828: LD_INT 7
15830: PUSH
15831: LD_INT 12
15833: PUSH
15834: LD_INT 13
15836: PUSH
15837: LD_INT 10
15839: PUSH
15840: LD_INT 14
15842: PUSH
15843: LD_INT 20
15845: PUSH
15846: LD_INT 21
15848: PUSH
15849: LD_INT 22
15851: PUSH
15852: LD_INT 25
15854: PUSH
15855: LD_INT 32
15857: PUSH
15858: LD_INT 27
15860: PUSH
15861: LD_INT 36
15863: PUSH
15864: LD_INT 69
15866: PUSH
15867: LD_INT 39
15869: PUSH
15870: LD_INT 34
15872: PUSH
15873: LD_INT 40
15875: PUSH
15876: LD_INT 48
15878: PUSH
15879: LD_INT 49
15881: PUSH
15882: LD_INT 50
15884: PUSH
15885: LD_INT 51
15887: PUSH
15888: LD_INT 52
15890: PUSH
15891: LD_INT 53
15893: PUSH
15894: LD_INT 54
15896: PUSH
15897: LD_INT 55
15899: PUSH
15900: LD_INT 56
15902: PUSH
15903: LD_INT 57
15905: PUSH
15906: LD_INT 58
15908: PUSH
15909: LD_INT 59
15911: PUSH
15912: LD_INT 60
15914: PUSH
15915: LD_INT 61
15917: PUSH
15918: LD_INT 62
15920: PUSH
15921: LD_INT 80
15923: PUSH
15924: LD_INT 82
15926: PUSH
15927: LD_INT 83
15929: PUSH
15930: LD_INT 84
15932: PUSH
15933: LD_INT 85
15935: PUSH
15936: LD_INT 86
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: ST_TO_ADDR
15992: GO 16459
15994: LD_INT 2
15996: DOUBLE
15997: EQUAL
15998: IFTRUE 16002
16000: GO 16228
16002: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
16003: LD_ADDR_VAR 0 4
16007: PUSH
16008: LD_INT 35
16010: PUSH
16011: LD_INT 45
16013: PUSH
16014: LD_INT 46
16016: PUSH
16017: LD_INT 47
16019: PUSH
16020: LD_INT 82
16022: PUSH
16023: LD_INT 83
16025: PUSH
16026: LD_INT 84
16028: PUSH
16029: LD_INT 85
16031: PUSH
16032: LD_INT 87
16034: PUSH
16035: LD_INT 70
16037: PUSH
16038: LD_INT 1
16040: PUSH
16041: LD_INT 11
16043: PUSH
16044: LD_INT 3
16046: PUSH
16047: LD_INT 4
16049: PUSH
16050: LD_INT 5
16052: PUSH
16053: LD_INT 6
16055: PUSH
16056: LD_INT 15
16058: PUSH
16059: LD_INT 18
16061: PUSH
16062: LD_INT 7
16064: PUSH
16065: LD_INT 17
16067: PUSH
16068: LD_INT 8
16070: PUSH
16071: LD_INT 20
16073: PUSH
16074: LD_INT 21
16076: PUSH
16077: LD_INT 22
16079: PUSH
16080: LD_INT 72
16082: PUSH
16083: LD_INT 26
16085: PUSH
16086: LD_INT 69
16088: PUSH
16089: LD_INT 39
16091: PUSH
16092: LD_INT 40
16094: PUSH
16095: LD_INT 41
16097: PUSH
16098: LD_INT 42
16100: PUSH
16101: LD_INT 43
16103: PUSH
16104: LD_INT 48
16106: PUSH
16107: LD_INT 49
16109: PUSH
16110: LD_INT 50
16112: PUSH
16113: LD_INT 51
16115: PUSH
16116: LD_INT 52
16118: PUSH
16119: LD_INT 53
16121: PUSH
16122: LD_INT 54
16124: PUSH
16125: LD_INT 55
16127: PUSH
16128: LD_INT 56
16130: PUSH
16131: LD_INT 60
16133: PUSH
16134: LD_INT 61
16136: PUSH
16137: LD_INT 62
16139: PUSH
16140: LD_INT 66
16142: PUSH
16143: LD_INT 67
16145: PUSH
16146: LD_INT 68
16148: PUSH
16149: LD_INT 81
16151: PUSH
16152: LD_INT 82
16154: PUSH
16155: LD_INT 83
16157: PUSH
16158: LD_INT 84
16160: PUSH
16161: LD_INT 85
16163: PUSH
16164: LD_INT 87
16166: PUSH
16167: LD_INT 88
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: ST_TO_ADDR
16226: GO 16459
16228: LD_INT 3
16230: DOUBLE
16231: EQUAL
16232: IFTRUE 16236
16234: GO 16458
16236: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
16237: LD_ADDR_VAR 0 4
16241: PUSH
16242: LD_INT 46
16244: PUSH
16245: LD_INT 47
16247: PUSH
16248: LD_INT 1
16250: PUSH
16251: LD_INT 2
16253: PUSH
16254: LD_INT 82
16256: PUSH
16257: LD_INT 83
16259: PUSH
16260: LD_INT 84
16262: PUSH
16263: LD_INT 85
16265: PUSH
16266: LD_INT 86
16268: PUSH
16269: LD_INT 11
16271: PUSH
16272: LD_INT 9
16274: PUSH
16275: LD_INT 20
16277: PUSH
16278: LD_INT 19
16280: PUSH
16281: LD_INT 21
16283: PUSH
16284: LD_INT 24
16286: PUSH
16287: LD_INT 22
16289: PUSH
16290: LD_INT 25
16292: PUSH
16293: LD_INT 28
16295: PUSH
16296: LD_INT 29
16298: PUSH
16299: LD_INT 30
16301: PUSH
16302: LD_INT 31
16304: PUSH
16305: LD_INT 37
16307: PUSH
16308: LD_INT 38
16310: PUSH
16311: LD_INT 32
16313: PUSH
16314: LD_INT 27
16316: PUSH
16317: LD_INT 33
16319: PUSH
16320: LD_INT 69
16322: PUSH
16323: LD_INT 39
16325: PUSH
16326: LD_INT 34
16328: PUSH
16329: LD_INT 40
16331: PUSH
16332: LD_INT 71
16334: PUSH
16335: LD_INT 23
16337: PUSH
16338: LD_INT 44
16340: PUSH
16341: LD_INT 48
16343: PUSH
16344: LD_INT 49
16346: PUSH
16347: LD_INT 50
16349: PUSH
16350: LD_INT 51
16352: PUSH
16353: LD_INT 52
16355: PUSH
16356: LD_INT 53
16358: PUSH
16359: LD_INT 54
16361: PUSH
16362: LD_INT 55
16364: PUSH
16365: LD_INT 56
16367: PUSH
16368: LD_INT 57
16370: PUSH
16371: LD_INT 58
16373: PUSH
16374: LD_INT 59
16376: PUSH
16377: LD_INT 63
16379: PUSH
16380: LD_INT 64
16382: PUSH
16383: LD_INT 65
16385: PUSH
16386: LD_INT 82
16388: PUSH
16389: LD_INT 83
16391: PUSH
16392: LD_INT 84
16394: PUSH
16395: LD_INT 85
16397: PUSH
16398: LD_INT 86
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: ST_TO_ADDR
16456: GO 16459
16458: POP
// if state > - 1 and state < 3 then
16459: LD_VAR 0 3
16463: PUSH
16464: LD_INT 1
16466: NEG
16467: GREATER
16468: PUSH
16469: LD_VAR 0 3
16473: PUSH
16474: LD_INT 3
16476: LESS
16477: AND
16478: IFFALSE 16535
// for i in result do
16480: LD_ADDR_VAR 0 5
16484: PUSH
16485: LD_VAR 0 4
16489: PUSH
16490: FOR_IN
16491: IFFALSE 16533
// if GetTech ( i , side ) <> state then
16493: LD_VAR 0 5
16497: PPUSH
16498: LD_VAR 0 1
16502: PPUSH
16503: CALL_OW 321
16507: PUSH
16508: LD_VAR 0 3
16512: NONEQUAL
16513: IFFALSE 16531
// result := result diff i ;
16515: LD_ADDR_VAR 0 4
16519: PUSH
16520: LD_VAR 0 4
16524: PUSH
16525: LD_VAR 0 5
16529: DIFF
16530: ST_TO_ADDR
16531: GO 16490
16533: POP
16534: POP
// end ;
16535: LD_VAR 0 4
16539: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16540: LD_INT 0
16542: PPUSH
16543: PPUSH
16544: PPUSH
// result := true ;
16545: LD_ADDR_VAR 0 3
16549: PUSH
16550: LD_INT 1
16552: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16553: LD_ADDR_VAR 0 5
16557: PUSH
16558: LD_VAR 0 2
16562: PPUSH
16563: CALL_OW 480
16567: ST_TO_ADDR
// if not tmp then
16568: LD_VAR 0 5
16572: NOT
16573: IFFALSE 16577
// exit ;
16575: GO 16626
// for i in tmp do
16577: LD_ADDR_VAR 0 4
16581: PUSH
16582: LD_VAR 0 5
16586: PUSH
16587: FOR_IN
16588: IFFALSE 16624
// if GetTech ( i , side ) <> state_researched then
16590: LD_VAR 0 4
16594: PPUSH
16595: LD_VAR 0 1
16599: PPUSH
16600: CALL_OW 321
16604: PUSH
16605: LD_INT 2
16607: NONEQUAL
16608: IFFALSE 16622
// begin result := false ;
16610: LD_ADDR_VAR 0 3
16614: PUSH
16615: LD_INT 0
16617: ST_TO_ADDR
// exit ;
16618: POP
16619: POP
16620: GO 16626
// end ;
16622: GO 16587
16624: POP
16625: POP
// end ;
16626: LD_VAR 0 3
16630: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16631: LD_INT 0
16633: PPUSH
16634: PPUSH
16635: PPUSH
16636: PPUSH
16637: PPUSH
16638: PPUSH
16639: PPUSH
16640: PPUSH
16641: PPUSH
16642: PPUSH
16643: PPUSH
16644: PPUSH
16645: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16646: LD_VAR 0 1
16650: NOT
16651: PUSH
16652: LD_VAR 0 1
16656: PPUSH
16657: CALL_OW 257
16661: PUSH
16662: LD_INT 9
16664: NONEQUAL
16665: OR
16666: IFFALSE 16670
// exit ;
16668: GO 17243
// side := GetSide ( unit ) ;
16670: LD_ADDR_VAR 0 9
16674: PUSH
16675: LD_VAR 0 1
16679: PPUSH
16680: CALL_OW 255
16684: ST_TO_ADDR
// tech_space := tech_spacanom ;
16685: LD_ADDR_VAR 0 12
16689: PUSH
16690: LD_INT 29
16692: ST_TO_ADDR
// tech_time := tech_taurad ;
16693: LD_ADDR_VAR 0 13
16697: PUSH
16698: LD_INT 28
16700: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16701: LD_ADDR_VAR 0 11
16705: PUSH
16706: LD_VAR 0 1
16710: PPUSH
16711: CALL_OW 310
16715: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16716: LD_VAR 0 11
16720: PPUSH
16721: CALL_OW 247
16725: PUSH
16726: LD_INT 2
16728: EQUAL
16729: IFFALSE 16733
// exit ;
16731: GO 17243
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16733: LD_ADDR_VAR 0 8
16737: PUSH
16738: LD_INT 81
16740: PUSH
16741: LD_VAR 0 9
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: PUSH
16750: LD_INT 3
16752: PUSH
16753: LD_INT 21
16755: PUSH
16756: LD_INT 3
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PPUSH
16771: CALL_OW 69
16775: ST_TO_ADDR
// if not tmp then
16776: LD_VAR 0 8
16780: NOT
16781: IFFALSE 16785
// exit ;
16783: GO 17243
// if in_unit then
16785: LD_VAR 0 11
16789: IFFALSE 16813
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16791: LD_ADDR_VAR 0 10
16795: PUSH
16796: LD_VAR 0 8
16800: PPUSH
16801: LD_VAR 0 11
16805: PPUSH
16806: CALL_OW 74
16810: ST_TO_ADDR
16811: GO 16833
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16813: LD_ADDR_VAR 0 10
16817: PUSH
16818: LD_VAR 0 8
16822: PPUSH
16823: LD_VAR 0 1
16827: PPUSH
16828: CALL_OW 74
16832: ST_TO_ADDR
// if not enemy then
16833: LD_VAR 0 10
16837: NOT
16838: IFFALSE 16842
// exit ;
16840: GO 17243
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16842: LD_VAR 0 11
16846: PUSH
16847: LD_VAR 0 11
16851: PPUSH
16852: LD_VAR 0 10
16856: PPUSH
16857: CALL_OW 296
16861: PUSH
16862: LD_INT 13
16864: GREATER
16865: AND
16866: PUSH
16867: LD_VAR 0 1
16871: PPUSH
16872: LD_VAR 0 10
16876: PPUSH
16877: CALL_OW 296
16881: PUSH
16882: LD_INT 12
16884: GREATER
16885: OR
16886: IFFALSE 16890
// exit ;
16888: GO 17243
// missile := [ 1 ] ;
16890: LD_ADDR_VAR 0 14
16894: PUSH
16895: LD_INT 1
16897: PUSH
16898: EMPTY
16899: LIST
16900: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16901: LD_VAR 0 9
16905: PPUSH
16906: LD_VAR 0 12
16910: PPUSH
16911: CALL_OW 325
16915: IFFALSE 16944
// missile := Replace ( missile , missile + 1 , 2 ) ;
16917: LD_ADDR_VAR 0 14
16921: PUSH
16922: LD_VAR 0 14
16926: PPUSH
16927: LD_VAR 0 14
16931: PUSH
16932: LD_INT 1
16934: PLUS
16935: PPUSH
16936: LD_INT 2
16938: PPUSH
16939: CALL_OW 1
16943: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16944: LD_VAR 0 9
16948: PPUSH
16949: LD_VAR 0 13
16953: PPUSH
16954: CALL_OW 325
16958: PUSH
16959: LD_VAR 0 10
16963: PPUSH
16964: CALL_OW 255
16968: PPUSH
16969: LD_VAR 0 13
16973: PPUSH
16974: CALL_OW 325
16978: NOT
16979: AND
16980: IFFALSE 17009
// missile := Replace ( missile , missile + 1 , 3 ) ;
16982: LD_ADDR_VAR 0 14
16986: PUSH
16987: LD_VAR 0 14
16991: PPUSH
16992: LD_VAR 0 14
16996: PUSH
16997: LD_INT 1
16999: PLUS
17000: PPUSH
17001: LD_INT 3
17003: PPUSH
17004: CALL_OW 1
17008: ST_TO_ADDR
// if missile < 2 then
17009: LD_VAR 0 14
17013: PUSH
17014: LD_INT 2
17016: LESS
17017: IFFALSE 17021
// exit ;
17019: GO 17243
// x := GetX ( enemy ) ;
17021: LD_ADDR_VAR 0 4
17025: PUSH
17026: LD_VAR 0 10
17030: PPUSH
17031: CALL_OW 250
17035: ST_TO_ADDR
// y := GetY ( enemy ) ;
17036: LD_ADDR_VAR 0 5
17040: PUSH
17041: LD_VAR 0 10
17045: PPUSH
17046: CALL_OW 251
17050: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17051: LD_ADDR_VAR 0 6
17055: PUSH
17056: LD_VAR 0 4
17060: PUSH
17061: LD_INT 1
17063: NEG
17064: PPUSH
17065: LD_INT 1
17067: PPUSH
17068: CALL_OW 12
17072: PLUS
17073: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17074: LD_ADDR_VAR 0 7
17078: PUSH
17079: LD_VAR 0 5
17083: PUSH
17084: LD_INT 1
17086: NEG
17087: PPUSH
17088: LD_INT 1
17090: PPUSH
17091: CALL_OW 12
17095: PLUS
17096: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17097: LD_VAR 0 6
17101: PPUSH
17102: LD_VAR 0 7
17106: PPUSH
17107: CALL_OW 488
17111: NOT
17112: IFFALSE 17134
// begin _x := x ;
17114: LD_ADDR_VAR 0 6
17118: PUSH
17119: LD_VAR 0 4
17123: ST_TO_ADDR
// _y := y ;
17124: LD_ADDR_VAR 0 7
17128: PUSH
17129: LD_VAR 0 5
17133: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17134: LD_ADDR_VAR 0 3
17138: PUSH
17139: LD_INT 1
17141: PPUSH
17142: LD_VAR 0 14
17146: PPUSH
17147: CALL_OW 12
17151: ST_TO_ADDR
// case i of 1 :
17152: LD_VAR 0 3
17156: PUSH
17157: LD_INT 1
17159: DOUBLE
17160: EQUAL
17161: IFTRUE 17165
17163: GO 17182
17165: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17166: LD_VAR 0 1
17170: PPUSH
17171: LD_VAR 0 10
17175: PPUSH
17176: CALL_OW 115
17180: GO 17243
17182: LD_INT 2
17184: DOUBLE
17185: EQUAL
17186: IFTRUE 17190
17188: GO 17212
17190: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17191: LD_VAR 0 1
17195: PPUSH
17196: LD_VAR 0 6
17200: PPUSH
17201: LD_VAR 0 7
17205: PPUSH
17206: CALL_OW 153
17210: GO 17243
17212: LD_INT 3
17214: DOUBLE
17215: EQUAL
17216: IFTRUE 17220
17218: GO 17242
17220: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17221: LD_VAR 0 1
17225: PPUSH
17226: LD_VAR 0 6
17230: PPUSH
17231: LD_VAR 0 7
17235: PPUSH
17236: CALL_OW 154
17240: GO 17243
17242: POP
// end ;
17243: LD_VAR 0 2
17247: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17248: LD_INT 0
17250: PPUSH
17251: PPUSH
17252: PPUSH
17253: PPUSH
17254: PPUSH
17255: PPUSH
// if not unit or not building then
17256: LD_VAR 0 1
17260: NOT
17261: PUSH
17262: LD_VAR 0 2
17266: NOT
17267: OR
17268: IFFALSE 17272
// exit ;
17270: GO 17430
// x := GetX ( building ) ;
17272: LD_ADDR_VAR 0 5
17276: PUSH
17277: LD_VAR 0 2
17281: PPUSH
17282: CALL_OW 250
17286: ST_TO_ADDR
// y := GetY ( building ) ;
17287: LD_ADDR_VAR 0 6
17291: PUSH
17292: LD_VAR 0 2
17296: PPUSH
17297: CALL_OW 251
17301: ST_TO_ADDR
// for i = 0 to 5 do
17302: LD_ADDR_VAR 0 4
17306: PUSH
17307: DOUBLE
17308: LD_INT 0
17310: DEC
17311: ST_TO_ADDR
17312: LD_INT 5
17314: PUSH
17315: FOR_TO
17316: IFFALSE 17428
// begin _x := ShiftX ( x , i , 3 ) ;
17318: LD_ADDR_VAR 0 7
17322: PUSH
17323: LD_VAR 0 5
17327: PPUSH
17328: LD_VAR 0 4
17332: PPUSH
17333: LD_INT 3
17335: PPUSH
17336: CALL_OW 272
17340: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17341: LD_ADDR_VAR 0 8
17345: PUSH
17346: LD_VAR 0 6
17350: PPUSH
17351: LD_VAR 0 4
17355: PPUSH
17356: LD_INT 3
17358: PPUSH
17359: CALL_OW 273
17363: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17364: LD_VAR 0 7
17368: PPUSH
17369: LD_VAR 0 8
17373: PPUSH
17374: CALL_OW 488
17378: NOT
17379: IFFALSE 17383
// continue ;
17381: GO 17315
// if HexInfo ( _x , _y ) = 0 then
17383: LD_VAR 0 7
17387: PPUSH
17388: LD_VAR 0 8
17392: PPUSH
17393: CALL_OW 428
17397: PUSH
17398: LD_INT 0
17400: EQUAL
17401: IFFALSE 17426
// begin ComMoveXY ( unit , _x , _y ) ;
17403: LD_VAR 0 1
17407: PPUSH
17408: LD_VAR 0 7
17412: PPUSH
17413: LD_VAR 0 8
17417: PPUSH
17418: CALL_OW 111
// exit ;
17422: POP
17423: POP
17424: GO 17430
// end ; end ;
17426: GO 17315
17428: POP
17429: POP
// end ;
17430: LD_VAR 0 3
17434: RET
// export function ScanBase ( side , base_area ) ; begin
17435: LD_INT 0
17437: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17438: LD_ADDR_VAR 0 3
17442: PUSH
17443: LD_VAR 0 2
17447: PPUSH
17448: LD_INT 81
17450: PUSH
17451: LD_VAR 0 1
17455: PUSH
17456: EMPTY
17457: LIST
17458: LIST
17459: PPUSH
17460: CALL_OW 70
17464: ST_TO_ADDR
// end ;
17465: LD_VAR 0 3
17469: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17470: LD_INT 0
17472: PPUSH
17473: PPUSH
17474: PPUSH
17475: PPUSH
// result := false ;
17476: LD_ADDR_VAR 0 2
17480: PUSH
17481: LD_INT 0
17483: ST_TO_ADDR
// side := GetSide ( unit ) ;
17484: LD_ADDR_VAR 0 3
17488: PUSH
17489: LD_VAR 0 1
17493: PPUSH
17494: CALL_OW 255
17498: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17499: LD_ADDR_VAR 0 4
17503: PUSH
17504: LD_VAR 0 1
17508: PPUSH
17509: CALL_OW 248
17513: ST_TO_ADDR
// case nat of 1 :
17514: LD_VAR 0 4
17518: PUSH
17519: LD_INT 1
17521: DOUBLE
17522: EQUAL
17523: IFTRUE 17527
17525: GO 17538
17527: POP
// tech := tech_lassight ; 2 :
17528: LD_ADDR_VAR 0 5
17532: PUSH
17533: LD_INT 12
17535: ST_TO_ADDR
17536: GO 17577
17538: LD_INT 2
17540: DOUBLE
17541: EQUAL
17542: IFTRUE 17546
17544: GO 17557
17546: POP
// tech := tech_mortar ; 3 :
17547: LD_ADDR_VAR 0 5
17551: PUSH
17552: LD_INT 41
17554: ST_TO_ADDR
17555: GO 17577
17557: LD_INT 3
17559: DOUBLE
17560: EQUAL
17561: IFTRUE 17565
17563: GO 17576
17565: POP
// tech := tech_bazooka ; end ;
17566: LD_ADDR_VAR 0 5
17570: PUSH
17571: LD_INT 44
17573: ST_TO_ADDR
17574: GO 17577
17576: POP
// if Researched ( side , tech ) then
17577: LD_VAR 0 3
17581: PPUSH
17582: LD_VAR 0 5
17586: PPUSH
17587: CALL_OW 325
17591: IFFALSE 17618
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17593: LD_ADDR_VAR 0 2
17597: PUSH
17598: LD_INT 5
17600: PUSH
17601: LD_INT 8
17603: PUSH
17604: LD_INT 9
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: LIST
17611: PUSH
17612: LD_VAR 0 4
17616: ARRAY
17617: ST_TO_ADDR
// end ;
17618: LD_VAR 0 2
17622: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17623: LD_INT 0
17625: PPUSH
17626: PPUSH
17627: PPUSH
// if not mines then
17628: LD_VAR 0 2
17632: NOT
17633: IFFALSE 17637
// exit ;
17635: GO 17781
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17637: LD_ADDR_VAR 0 5
17641: PUSH
17642: LD_INT 81
17644: PUSH
17645: LD_VAR 0 1
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PUSH
17654: LD_INT 3
17656: PUSH
17657: LD_INT 21
17659: PUSH
17660: LD_INT 3
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: PPUSH
17675: CALL_OW 69
17679: ST_TO_ADDR
// for i in mines do
17680: LD_ADDR_VAR 0 4
17684: PUSH
17685: LD_VAR 0 2
17689: PUSH
17690: FOR_IN
17691: IFFALSE 17779
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17693: LD_VAR 0 4
17697: PUSH
17698: LD_INT 1
17700: ARRAY
17701: PPUSH
17702: LD_VAR 0 4
17706: PUSH
17707: LD_INT 2
17709: ARRAY
17710: PPUSH
17711: CALL_OW 458
17715: NOT
17716: IFFALSE 17720
// continue ;
17718: GO 17690
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17720: LD_VAR 0 4
17724: PUSH
17725: LD_INT 1
17727: ARRAY
17728: PPUSH
17729: LD_VAR 0 4
17733: PUSH
17734: LD_INT 2
17736: ARRAY
17737: PPUSH
17738: CALL_OW 428
17742: PUSH
17743: LD_VAR 0 5
17747: IN
17748: IFFALSE 17777
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17750: LD_VAR 0 4
17754: PUSH
17755: LD_INT 1
17757: ARRAY
17758: PPUSH
17759: LD_VAR 0 4
17763: PUSH
17764: LD_INT 2
17766: ARRAY
17767: PPUSH
17768: LD_VAR 0 1
17772: PPUSH
17773: CALL_OW 456
// end ;
17777: GO 17690
17779: POP
17780: POP
// end ;
17781: LD_VAR 0 3
17785: RET
// export function Count ( array ) ; begin
17786: LD_INT 0
17788: PPUSH
// result := array + 0 ;
17789: LD_ADDR_VAR 0 2
17793: PUSH
17794: LD_VAR 0 1
17798: PUSH
17799: LD_INT 0
17801: PLUS
17802: ST_TO_ADDR
// end ;
17803: LD_VAR 0 2
17807: RET
// export function IsEmpty ( building ) ; begin
17808: LD_INT 0
17810: PPUSH
// if not building then
17811: LD_VAR 0 1
17815: NOT
17816: IFFALSE 17820
// exit ;
17818: GO 17863
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17820: LD_ADDR_VAR 0 2
17824: PUSH
17825: LD_VAR 0 1
17829: PUSH
17830: LD_INT 22
17832: PUSH
17833: LD_VAR 0 1
17837: PPUSH
17838: CALL_OW 255
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PUSH
17847: LD_INT 58
17849: PUSH
17850: EMPTY
17851: LIST
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: PPUSH
17857: CALL_OW 69
17861: IN
17862: ST_TO_ADDR
// end ;
17863: LD_VAR 0 2
17867: RET
// export function IsNotFull ( building ) ; var places ; begin
17868: LD_INT 0
17870: PPUSH
17871: PPUSH
// if not building then
17872: LD_VAR 0 1
17876: NOT
17877: IFFALSE 17881
// exit ;
17879: GO 17909
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
17881: LD_ADDR_VAR 0 2
17885: PUSH
17886: LD_VAR 0 1
17890: PPUSH
17891: LD_INT 3
17893: PUSH
17894: LD_INT 62
17896: PUSH
17897: EMPTY
17898: LIST
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PPUSH
17904: CALL_OW 72
17908: ST_TO_ADDR
// end ;
17909: LD_VAR 0 2
17913: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17914: LD_INT 0
17916: PPUSH
17917: PPUSH
17918: PPUSH
17919: PPUSH
// tmp := [ ] ;
17920: LD_ADDR_VAR 0 3
17924: PUSH
17925: EMPTY
17926: ST_TO_ADDR
// list := [ ] ;
17927: LD_ADDR_VAR 0 5
17931: PUSH
17932: EMPTY
17933: ST_TO_ADDR
// for i = 16 to 25 do
17934: LD_ADDR_VAR 0 4
17938: PUSH
17939: DOUBLE
17940: LD_INT 16
17942: DEC
17943: ST_TO_ADDR
17944: LD_INT 25
17946: PUSH
17947: FOR_TO
17948: IFFALSE 18021
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17950: LD_ADDR_VAR 0 3
17954: PUSH
17955: LD_VAR 0 3
17959: PUSH
17960: LD_INT 22
17962: PUSH
17963: LD_VAR 0 1
17967: PPUSH
17968: CALL_OW 255
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PUSH
17977: LD_INT 91
17979: PUSH
17980: LD_VAR 0 1
17984: PUSH
17985: LD_INT 6
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: LIST
17992: PUSH
17993: LD_INT 30
17995: PUSH
17996: LD_VAR 0 4
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: LIST
18009: PUSH
18010: EMPTY
18011: LIST
18012: PPUSH
18013: CALL_OW 69
18017: ADD
18018: ST_TO_ADDR
18019: GO 17947
18021: POP
18022: POP
// for i = 1 to tmp do
18023: LD_ADDR_VAR 0 4
18027: PUSH
18028: DOUBLE
18029: LD_INT 1
18031: DEC
18032: ST_TO_ADDR
18033: LD_VAR 0 3
18037: PUSH
18038: FOR_TO
18039: IFFALSE 18127
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18041: LD_ADDR_VAR 0 5
18045: PUSH
18046: LD_VAR 0 5
18050: PUSH
18051: LD_VAR 0 3
18055: PUSH
18056: LD_VAR 0 4
18060: ARRAY
18061: PPUSH
18062: CALL_OW 266
18066: PUSH
18067: LD_VAR 0 3
18071: PUSH
18072: LD_VAR 0 4
18076: ARRAY
18077: PPUSH
18078: CALL_OW 250
18082: PUSH
18083: LD_VAR 0 3
18087: PUSH
18088: LD_VAR 0 4
18092: ARRAY
18093: PPUSH
18094: CALL_OW 251
18098: PUSH
18099: LD_VAR 0 3
18103: PUSH
18104: LD_VAR 0 4
18108: ARRAY
18109: PPUSH
18110: CALL_OW 254
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: PUSH
18121: EMPTY
18122: LIST
18123: ADD
18124: ST_TO_ADDR
18125: GO 18038
18127: POP
18128: POP
// result := list ;
18129: LD_ADDR_VAR 0 2
18133: PUSH
18134: LD_VAR 0 5
18138: ST_TO_ADDR
// end ;
18139: LD_VAR 0 2
18143: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18144: LD_INT 0
18146: PPUSH
18147: PPUSH
18148: PPUSH
18149: PPUSH
18150: PPUSH
18151: PPUSH
18152: PPUSH
// if not factory then
18153: LD_VAR 0 1
18157: NOT
18158: IFFALSE 18162
// exit ;
18160: GO 18755
// if control = control_apeman then
18162: LD_VAR 0 4
18166: PUSH
18167: LD_INT 5
18169: EQUAL
18170: IFFALSE 18279
// begin tmp := UnitsInside ( factory ) ;
18172: LD_ADDR_VAR 0 8
18176: PUSH
18177: LD_VAR 0 1
18181: PPUSH
18182: CALL_OW 313
18186: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18187: LD_VAR 0 8
18191: PPUSH
18192: LD_INT 25
18194: PUSH
18195: LD_INT 12
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PPUSH
18202: CALL_OW 72
18206: NOT
18207: IFFALSE 18217
// control := control_manual ;
18209: LD_ADDR_VAR 0 4
18213: PUSH
18214: LD_INT 1
18216: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18217: LD_ADDR_VAR 0 8
18221: PUSH
18222: LD_VAR 0 1
18226: PPUSH
18227: CALL 17914 0 1
18231: ST_TO_ADDR
// if tmp then
18232: LD_VAR 0 8
18236: IFFALSE 18279
// begin for i in tmp do
18238: LD_ADDR_VAR 0 7
18242: PUSH
18243: LD_VAR 0 8
18247: PUSH
18248: FOR_IN
18249: IFFALSE 18277
// if i [ 1 ] = b_ext_radio then
18251: LD_VAR 0 7
18255: PUSH
18256: LD_INT 1
18258: ARRAY
18259: PUSH
18260: LD_INT 22
18262: EQUAL
18263: IFFALSE 18275
// begin control := control_remote ;
18265: LD_ADDR_VAR 0 4
18269: PUSH
18270: LD_INT 2
18272: ST_TO_ADDR
// break ;
18273: GO 18277
// end ;
18275: GO 18248
18277: POP
18278: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18279: LD_VAR 0 1
18283: PPUSH
18284: LD_VAR 0 2
18288: PPUSH
18289: LD_VAR 0 3
18293: PPUSH
18294: LD_VAR 0 4
18298: PPUSH
18299: LD_VAR 0 5
18303: PPUSH
18304: CALL_OW 448
18308: IFFALSE 18343
// begin result := [ chassis , engine , control , weapon ] ;
18310: LD_ADDR_VAR 0 6
18314: PUSH
18315: LD_VAR 0 2
18319: PUSH
18320: LD_VAR 0 3
18324: PUSH
18325: LD_VAR 0 4
18329: PUSH
18330: LD_VAR 0 5
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: ST_TO_ADDR
// exit ;
18341: GO 18755
// end ; _chassis := AvailableChassisList ( factory ) ;
18343: LD_ADDR_VAR 0 9
18347: PUSH
18348: LD_VAR 0 1
18352: PPUSH
18353: CALL_OW 475
18357: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18358: LD_ADDR_VAR 0 11
18362: PUSH
18363: LD_VAR 0 1
18367: PPUSH
18368: CALL_OW 476
18372: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18373: LD_ADDR_VAR 0 12
18377: PUSH
18378: LD_VAR 0 1
18382: PPUSH
18383: CALL_OW 477
18387: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18388: LD_ADDR_VAR 0 10
18392: PUSH
18393: LD_VAR 0 1
18397: PPUSH
18398: CALL_OW 478
18402: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18403: LD_VAR 0 9
18407: NOT
18408: PUSH
18409: LD_VAR 0 11
18413: NOT
18414: OR
18415: PUSH
18416: LD_VAR 0 12
18420: NOT
18421: OR
18422: PUSH
18423: LD_VAR 0 10
18427: NOT
18428: OR
18429: IFFALSE 18464
// begin result := [ chassis , engine , control , weapon ] ;
18431: LD_ADDR_VAR 0 6
18435: PUSH
18436: LD_VAR 0 2
18440: PUSH
18441: LD_VAR 0 3
18445: PUSH
18446: LD_VAR 0 4
18450: PUSH
18451: LD_VAR 0 5
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: ST_TO_ADDR
// exit ;
18462: GO 18755
// end ; if not chassis in _chassis then
18464: LD_VAR 0 2
18468: PUSH
18469: LD_VAR 0 9
18473: IN
18474: NOT
18475: IFFALSE 18501
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18477: LD_ADDR_VAR 0 2
18481: PUSH
18482: LD_VAR 0 9
18486: PUSH
18487: LD_INT 1
18489: PPUSH
18490: LD_VAR 0 9
18494: PPUSH
18495: CALL_OW 12
18499: ARRAY
18500: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18501: LD_VAR 0 2
18505: PPUSH
18506: LD_VAR 0 3
18510: PPUSH
18511: CALL 18760 0 2
18515: NOT
18516: IFFALSE 18575
// repeat engine := _engine [ 1 ] ;
18518: LD_ADDR_VAR 0 3
18522: PUSH
18523: LD_VAR 0 11
18527: PUSH
18528: LD_INT 1
18530: ARRAY
18531: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18532: LD_ADDR_VAR 0 11
18536: PUSH
18537: LD_VAR 0 11
18541: PPUSH
18542: LD_INT 1
18544: PPUSH
18545: CALL_OW 3
18549: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18550: LD_VAR 0 2
18554: PPUSH
18555: LD_VAR 0 3
18559: PPUSH
18560: CALL 18760 0 2
18564: PUSH
18565: LD_VAR 0 11
18569: PUSH
18570: EMPTY
18571: EQUAL
18572: OR
18573: IFFALSE 18518
// if not control in _control then
18575: LD_VAR 0 4
18579: PUSH
18580: LD_VAR 0 12
18584: IN
18585: NOT
18586: IFFALSE 18612
// control := _control [ rand ( 1 , _control ) ] ;
18588: LD_ADDR_VAR 0 4
18592: PUSH
18593: LD_VAR 0 12
18597: PUSH
18598: LD_INT 1
18600: PPUSH
18601: LD_VAR 0 12
18605: PPUSH
18606: CALL_OW 12
18610: ARRAY
18611: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18612: LD_VAR 0 2
18616: PPUSH
18617: LD_VAR 0 5
18621: PPUSH
18622: CALL 18980 0 2
18626: NOT
18627: IFFALSE 18686
// repeat weapon := _weapon [ 1 ] ;
18629: LD_ADDR_VAR 0 5
18633: PUSH
18634: LD_VAR 0 10
18638: PUSH
18639: LD_INT 1
18641: ARRAY
18642: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18643: LD_ADDR_VAR 0 10
18647: PUSH
18648: LD_VAR 0 10
18652: PPUSH
18653: LD_INT 1
18655: PPUSH
18656: CALL_OW 3
18660: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18661: LD_VAR 0 2
18665: PPUSH
18666: LD_VAR 0 5
18670: PPUSH
18671: CALL 18980 0 2
18675: PUSH
18676: LD_VAR 0 10
18680: PUSH
18681: EMPTY
18682: EQUAL
18683: OR
18684: IFFALSE 18629
// result := [ ] ;
18686: LD_ADDR_VAR 0 6
18690: PUSH
18691: EMPTY
18692: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18693: LD_VAR 0 1
18697: PPUSH
18698: LD_VAR 0 2
18702: PPUSH
18703: LD_VAR 0 3
18707: PPUSH
18708: LD_VAR 0 4
18712: PPUSH
18713: LD_VAR 0 5
18717: PPUSH
18718: CALL_OW 448
18722: IFFALSE 18755
// result := [ chassis , engine , control , weapon ] ;
18724: LD_ADDR_VAR 0 6
18728: PUSH
18729: LD_VAR 0 2
18733: PUSH
18734: LD_VAR 0 3
18738: PUSH
18739: LD_VAR 0 4
18743: PUSH
18744: LD_VAR 0 5
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: ST_TO_ADDR
// end ;
18755: LD_VAR 0 6
18759: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18760: LD_INT 0
18762: PPUSH
// if not chassis or not engine then
18763: LD_VAR 0 1
18767: NOT
18768: PUSH
18769: LD_VAR 0 2
18773: NOT
18774: OR
18775: IFFALSE 18779
// exit ;
18777: GO 18975
// case engine of engine_solar :
18779: LD_VAR 0 2
18783: PUSH
18784: LD_INT 2
18786: DOUBLE
18787: EQUAL
18788: IFTRUE 18792
18790: GO 18830
18792: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18793: LD_ADDR_VAR 0 3
18797: PUSH
18798: LD_INT 11
18800: PUSH
18801: LD_INT 12
18803: PUSH
18804: LD_INT 13
18806: PUSH
18807: LD_INT 14
18809: PUSH
18810: LD_INT 1
18812: PUSH
18813: LD_INT 2
18815: PUSH
18816: LD_INT 3
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: ST_TO_ADDR
18828: GO 18959
18830: LD_INT 1
18832: DOUBLE
18833: EQUAL
18834: IFTRUE 18838
18836: GO 18900
18838: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18839: LD_ADDR_VAR 0 3
18843: PUSH
18844: LD_INT 11
18846: PUSH
18847: LD_INT 12
18849: PUSH
18850: LD_INT 13
18852: PUSH
18853: LD_INT 14
18855: PUSH
18856: LD_INT 1
18858: PUSH
18859: LD_INT 2
18861: PUSH
18862: LD_INT 3
18864: PUSH
18865: LD_INT 4
18867: PUSH
18868: LD_INT 5
18870: PUSH
18871: LD_INT 21
18873: PUSH
18874: LD_INT 23
18876: PUSH
18877: LD_INT 22
18879: PUSH
18880: LD_INT 24
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: ST_TO_ADDR
18898: GO 18959
18900: LD_INT 3
18902: DOUBLE
18903: EQUAL
18904: IFTRUE 18908
18906: GO 18958
18908: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18909: LD_ADDR_VAR 0 3
18913: PUSH
18914: LD_INT 13
18916: PUSH
18917: LD_INT 14
18919: PUSH
18920: LD_INT 2
18922: PUSH
18923: LD_INT 3
18925: PUSH
18926: LD_INT 4
18928: PUSH
18929: LD_INT 5
18931: PUSH
18932: LD_INT 21
18934: PUSH
18935: LD_INT 22
18937: PUSH
18938: LD_INT 23
18940: PUSH
18941: LD_INT 24
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: ST_TO_ADDR
18956: GO 18959
18958: POP
// result := ( chassis in result ) ;
18959: LD_ADDR_VAR 0 3
18963: PUSH
18964: LD_VAR 0 1
18968: PUSH
18969: LD_VAR 0 3
18973: IN
18974: ST_TO_ADDR
// end ;
18975: LD_VAR 0 3
18979: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18980: LD_INT 0
18982: PPUSH
// if not chassis or not weapon then
18983: LD_VAR 0 1
18987: NOT
18988: PUSH
18989: LD_VAR 0 2
18993: NOT
18994: OR
18995: IFFALSE 18999
// exit ;
18997: GO 20059
// case weapon of us_machine_gun :
18999: LD_VAR 0 2
19003: PUSH
19004: LD_INT 2
19006: DOUBLE
19007: EQUAL
19008: IFTRUE 19012
19010: GO 19042
19012: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19013: LD_ADDR_VAR 0 3
19017: PUSH
19018: LD_INT 1
19020: PUSH
19021: LD_INT 2
19023: PUSH
19024: LD_INT 3
19026: PUSH
19027: LD_INT 4
19029: PUSH
19030: LD_INT 5
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: ST_TO_ADDR
19040: GO 20043
19042: LD_INT 3
19044: DOUBLE
19045: EQUAL
19046: IFTRUE 19050
19048: GO 19080
19050: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19051: LD_ADDR_VAR 0 3
19055: PUSH
19056: LD_INT 1
19058: PUSH
19059: LD_INT 2
19061: PUSH
19062: LD_INT 3
19064: PUSH
19065: LD_INT 4
19067: PUSH
19068: LD_INT 5
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: ST_TO_ADDR
19078: GO 20043
19080: LD_INT 11
19082: DOUBLE
19083: EQUAL
19084: IFTRUE 19088
19086: GO 19118
19088: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19089: LD_ADDR_VAR 0 3
19093: PUSH
19094: LD_INT 1
19096: PUSH
19097: LD_INT 2
19099: PUSH
19100: LD_INT 3
19102: PUSH
19103: LD_INT 4
19105: PUSH
19106: LD_INT 5
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: ST_TO_ADDR
19116: GO 20043
19118: LD_INT 4
19120: DOUBLE
19121: EQUAL
19122: IFTRUE 19126
19124: GO 19152
19126: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19127: LD_ADDR_VAR 0 3
19131: PUSH
19132: LD_INT 2
19134: PUSH
19135: LD_INT 3
19137: PUSH
19138: LD_INT 4
19140: PUSH
19141: LD_INT 5
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: ST_TO_ADDR
19150: GO 20043
19152: LD_INT 5
19154: DOUBLE
19155: EQUAL
19156: IFTRUE 19160
19158: GO 19186
19160: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19161: LD_ADDR_VAR 0 3
19165: PUSH
19166: LD_INT 2
19168: PUSH
19169: LD_INT 3
19171: PUSH
19172: LD_INT 4
19174: PUSH
19175: LD_INT 5
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: ST_TO_ADDR
19184: GO 20043
19186: LD_INT 9
19188: DOUBLE
19189: EQUAL
19190: IFTRUE 19194
19192: GO 19220
19194: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19195: LD_ADDR_VAR 0 3
19199: PUSH
19200: LD_INT 2
19202: PUSH
19203: LD_INT 3
19205: PUSH
19206: LD_INT 4
19208: PUSH
19209: LD_INT 5
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: ST_TO_ADDR
19218: GO 20043
19220: LD_INT 7
19222: DOUBLE
19223: EQUAL
19224: IFTRUE 19228
19226: GO 19254
19228: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19229: LD_ADDR_VAR 0 3
19233: PUSH
19234: LD_INT 2
19236: PUSH
19237: LD_INT 3
19239: PUSH
19240: LD_INT 4
19242: PUSH
19243: LD_INT 5
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: ST_TO_ADDR
19252: GO 20043
19254: LD_INT 12
19256: DOUBLE
19257: EQUAL
19258: IFTRUE 19262
19260: GO 19288
19262: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19263: LD_ADDR_VAR 0 3
19267: PUSH
19268: LD_INT 2
19270: PUSH
19271: LD_INT 3
19273: PUSH
19274: LD_INT 4
19276: PUSH
19277: LD_INT 5
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: ST_TO_ADDR
19286: GO 20043
19288: LD_INT 13
19290: DOUBLE
19291: EQUAL
19292: IFTRUE 19296
19294: GO 19322
19296: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19297: LD_ADDR_VAR 0 3
19301: PUSH
19302: LD_INT 2
19304: PUSH
19305: LD_INT 3
19307: PUSH
19308: LD_INT 4
19310: PUSH
19311: LD_INT 5
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: ST_TO_ADDR
19320: GO 20043
19322: LD_INT 14
19324: DOUBLE
19325: EQUAL
19326: IFTRUE 19330
19328: GO 19348
19330: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19331: LD_ADDR_VAR 0 3
19335: PUSH
19336: LD_INT 4
19338: PUSH
19339: LD_INT 5
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: ST_TO_ADDR
19346: GO 20043
19348: LD_INT 6
19350: DOUBLE
19351: EQUAL
19352: IFTRUE 19356
19354: GO 19374
19356: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19357: LD_ADDR_VAR 0 3
19361: PUSH
19362: LD_INT 4
19364: PUSH
19365: LD_INT 5
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: ST_TO_ADDR
19372: GO 20043
19374: LD_INT 10
19376: DOUBLE
19377: EQUAL
19378: IFTRUE 19382
19380: GO 19400
19382: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19383: LD_ADDR_VAR 0 3
19387: PUSH
19388: LD_INT 4
19390: PUSH
19391: LD_INT 5
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: ST_TO_ADDR
19398: GO 20043
19400: LD_INT 22
19402: DOUBLE
19403: EQUAL
19404: IFTRUE 19408
19406: GO 19434
19408: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19409: LD_ADDR_VAR 0 3
19413: PUSH
19414: LD_INT 11
19416: PUSH
19417: LD_INT 12
19419: PUSH
19420: LD_INT 13
19422: PUSH
19423: LD_INT 14
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: ST_TO_ADDR
19432: GO 20043
19434: LD_INT 23
19436: DOUBLE
19437: EQUAL
19438: IFTRUE 19442
19440: GO 19468
19442: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19443: LD_ADDR_VAR 0 3
19447: PUSH
19448: LD_INT 11
19450: PUSH
19451: LD_INT 12
19453: PUSH
19454: LD_INT 13
19456: PUSH
19457: LD_INT 14
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: ST_TO_ADDR
19466: GO 20043
19468: LD_INT 24
19470: DOUBLE
19471: EQUAL
19472: IFTRUE 19476
19474: GO 19502
19476: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19477: LD_ADDR_VAR 0 3
19481: PUSH
19482: LD_INT 11
19484: PUSH
19485: LD_INT 12
19487: PUSH
19488: LD_INT 13
19490: PUSH
19491: LD_INT 14
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: ST_TO_ADDR
19500: GO 20043
19502: LD_INT 30
19504: DOUBLE
19505: EQUAL
19506: IFTRUE 19510
19508: GO 19536
19510: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19511: LD_ADDR_VAR 0 3
19515: PUSH
19516: LD_INT 11
19518: PUSH
19519: LD_INT 12
19521: PUSH
19522: LD_INT 13
19524: PUSH
19525: LD_INT 14
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: ST_TO_ADDR
19534: GO 20043
19536: LD_INT 25
19538: DOUBLE
19539: EQUAL
19540: IFTRUE 19544
19542: GO 19562
19544: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19545: LD_ADDR_VAR 0 3
19549: PUSH
19550: LD_INT 13
19552: PUSH
19553: LD_INT 14
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: ST_TO_ADDR
19560: GO 20043
19562: LD_INT 27
19564: DOUBLE
19565: EQUAL
19566: IFTRUE 19570
19568: GO 19588
19570: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19571: LD_ADDR_VAR 0 3
19575: PUSH
19576: LD_INT 13
19578: PUSH
19579: LD_INT 14
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: ST_TO_ADDR
19586: GO 20043
19588: LD_INT 92
19590: DOUBLE
19591: EQUAL
19592: IFTRUE 19596
19594: GO 19622
19596: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19597: LD_ADDR_VAR 0 3
19601: PUSH
19602: LD_INT 11
19604: PUSH
19605: LD_INT 12
19607: PUSH
19608: LD_INT 13
19610: PUSH
19611: LD_INT 14
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: ST_TO_ADDR
19620: GO 20043
19622: LD_INT 28
19624: DOUBLE
19625: EQUAL
19626: IFTRUE 19630
19628: GO 19648
19630: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19631: LD_ADDR_VAR 0 3
19635: PUSH
19636: LD_INT 13
19638: PUSH
19639: LD_INT 14
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: ST_TO_ADDR
19646: GO 20043
19648: LD_INT 29
19650: DOUBLE
19651: EQUAL
19652: IFTRUE 19656
19654: GO 19674
19656: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19657: LD_ADDR_VAR 0 3
19661: PUSH
19662: LD_INT 13
19664: PUSH
19665: LD_INT 14
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: ST_TO_ADDR
19672: GO 20043
19674: LD_INT 31
19676: DOUBLE
19677: EQUAL
19678: IFTRUE 19682
19680: GO 19700
19682: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19683: LD_ADDR_VAR 0 3
19687: PUSH
19688: LD_INT 13
19690: PUSH
19691: LD_INT 14
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: ST_TO_ADDR
19698: GO 20043
19700: LD_INT 26
19702: DOUBLE
19703: EQUAL
19704: IFTRUE 19708
19706: GO 19726
19708: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19709: LD_ADDR_VAR 0 3
19713: PUSH
19714: LD_INT 13
19716: PUSH
19717: LD_INT 14
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: ST_TO_ADDR
19724: GO 20043
19726: LD_INT 42
19728: DOUBLE
19729: EQUAL
19730: IFTRUE 19734
19732: GO 19760
19734: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19735: LD_ADDR_VAR 0 3
19739: PUSH
19740: LD_INT 21
19742: PUSH
19743: LD_INT 22
19745: PUSH
19746: LD_INT 23
19748: PUSH
19749: LD_INT 24
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: ST_TO_ADDR
19758: GO 20043
19760: LD_INT 43
19762: DOUBLE
19763: EQUAL
19764: IFTRUE 19768
19766: GO 19794
19768: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19769: LD_ADDR_VAR 0 3
19773: PUSH
19774: LD_INT 21
19776: PUSH
19777: LD_INT 22
19779: PUSH
19780: LD_INT 23
19782: PUSH
19783: LD_INT 24
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: ST_TO_ADDR
19792: GO 20043
19794: LD_INT 44
19796: DOUBLE
19797: EQUAL
19798: IFTRUE 19802
19800: GO 19828
19802: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19803: LD_ADDR_VAR 0 3
19807: PUSH
19808: LD_INT 21
19810: PUSH
19811: LD_INT 22
19813: PUSH
19814: LD_INT 23
19816: PUSH
19817: LD_INT 24
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: ST_TO_ADDR
19826: GO 20043
19828: LD_INT 45
19830: DOUBLE
19831: EQUAL
19832: IFTRUE 19836
19834: GO 19862
19836: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19837: LD_ADDR_VAR 0 3
19841: PUSH
19842: LD_INT 21
19844: PUSH
19845: LD_INT 22
19847: PUSH
19848: LD_INT 23
19850: PUSH
19851: LD_INT 24
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: ST_TO_ADDR
19860: GO 20043
19862: LD_INT 49
19864: DOUBLE
19865: EQUAL
19866: IFTRUE 19870
19868: GO 19896
19870: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19871: LD_ADDR_VAR 0 3
19875: PUSH
19876: LD_INT 21
19878: PUSH
19879: LD_INT 22
19881: PUSH
19882: LD_INT 23
19884: PUSH
19885: LD_INT 24
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: ST_TO_ADDR
19894: GO 20043
19896: LD_INT 51
19898: DOUBLE
19899: EQUAL
19900: IFTRUE 19904
19902: GO 19930
19904: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19905: LD_ADDR_VAR 0 3
19909: PUSH
19910: LD_INT 21
19912: PUSH
19913: LD_INT 22
19915: PUSH
19916: LD_INT 23
19918: PUSH
19919: LD_INT 24
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: ST_TO_ADDR
19928: GO 20043
19930: LD_INT 52
19932: DOUBLE
19933: EQUAL
19934: IFTRUE 19938
19936: GO 19964
19938: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19939: LD_ADDR_VAR 0 3
19943: PUSH
19944: LD_INT 21
19946: PUSH
19947: LD_INT 22
19949: PUSH
19950: LD_INT 23
19952: PUSH
19953: LD_INT 24
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: ST_TO_ADDR
19962: GO 20043
19964: LD_INT 53
19966: DOUBLE
19967: EQUAL
19968: IFTRUE 19972
19970: GO 19990
19972: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19973: LD_ADDR_VAR 0 3
19977: PUSH
19978: LD_INT 23
19980: PUSH
19981: LD_INT 24
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: ST_TO_ADDR
19988: GO 20043
19990: LD_INT 46
19992: DOUBLE
19993: EQUAL
19994: IFTRUE 19998
19996: GO 20016
19998: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19999: LD_ADDR_VAR 0 3
20003: PUSH
20004: LD_INT 23
20006: PUSH
20007: LD_INT 24
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: ST_TO_ADDR
20014: GO 20043
20016: LD_INT 47
20018: DOUBLE
20019: EQUAL
20020: IFTRUE 20024
20022: GO 20042
20024: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20025: LD_ADDR_VAR 0 3
20029: PUSH
20030: LD_INT 23
20032: PUSH
20033: LD_INT 24
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: ST_TO_ADDR
20040: GO 20043
20042: POP
// result := ( chassis in result ) ;
20043: LD_ADDR_VAR 0 3
20047: PUSH
20048: LD_VAR 0 1
20052: PUSH
20053: LD_VAR 0 3
20057: IN
20058: ST_TO_ADDR
// end ;
20059: LD_VAR 0 3
20063: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20064: LD_INT 0
20066: PPUSH
20067: PPUSH
20068: PPUSH
20069: PPUSH
20070: PPUSH
20071: PPUSH
20072: PPUSH
// result := array ;
20073: LD_ADDR_VAR 0 5
20077: PUSH
20078: LD_VAR 0 1
20082: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20083: LD_VAR 0 1
20087: NOT
20088: PUSH
20089: LD_VAR 0 2
20093: NOT
20094: OR
20095: PUSH
20096: LD_VAR 0 3
20100: NOT
20101: OR
20102: PUSH
20103: LD_VAR 0 2
20107: PUSH
20108: LD_VAR 0 1
20112: GREATER
20113: OR
20114: PUSH
20115: LD_VAR 0 3
20119: PUSH
20120: LD_VAR 0 1
20124: GREATER
20125: OR
20126: IFFALSE 20130
// exit ;
20128: GO 20426
// if direction then
20130: LD_VAR 0 4
20134: IFFALSE 20198
// begin d := 1 ;
20136: LD_ADDR_VAR 0 9
20140: PUSH
20141: LD_INT 1
20143: ST_TO_ADDR
// if i_from > i_to then
20144: LD_VAR 0 2
20148: PUSH
20149: LD_VAR 0 3
20153: GREATER
20154: IFFALSE 20180
// length := ( array - i_from ) + i_to else
20156: LD_ADDR_VAR 0 11
20160: PUSH
20161: LD_VAR 0 1
20165: PUSH
20166: LD_VAR 0 2
20170: MINUS
20171: PUSH
20172: LD_VAR 0 3
20176: PLUS
20177: ST_TO_ADDR
20178: GO 20196
// length := i_to - i_from ;
20180: LD_ADDR_VAR 0 11
20184: PUSH
20185: LD_VAR 0 3
20189: PUSH
20190: LD_VAR 0 2
20194: MINUS
20195: ST_TO_ADDR
// end else
20196: GO 20259
// begin d := - 1 ;
20198: LD_ADDR_VAR 0 9
20202: PUSH
20203: LD_INT 1
20205: NEG
20206: ST_TO_ADDR
// if i_from > i_to then
20207: LD_VAR 0 2
20211: PUSH
20212: LD_VAR 0 3
20216: GREATER
20217: IFFALSE 20237
// length := i_from - i_to else
20219: LD_ADDR_VAR 0 11
20223: PUSH
20224: LD_VAR 0 2
20228: PUSH
20229: LD_VAR 0 3
20233: MINUS
20234: ST_TO_ADDR
20235: GO 20259
// length := ( array - i_to ) + i_from ;
20237: LD_ADDR_VAR 0 11
20241: PUSH
20242: LD_VAR 0 1
20246: PUSH
20247: LD_VAR 0 3
20251: MINUS
20252: PUSH
20253: LD_VAR 0 2
20257: PLUS
20258: ST_TO_ADDR
// end ; if not length then
20259: LD_VAR 0 11
20263: NOT
20264: IFFALSE 20268
// exit ;
20266: GO 20426
// tmp := array ;
20268: LD_ADDR_VAR 0 10
20272: PUSH
20273: LD_VAR 0 1
20277: ST_TO_ADDR
// for i = 1 to length do
20278: LD_ADDR_VAR 0 6
20282: PUSH
20283: DOUBLE
20284: LD_INT 1
20286: DEC
20287: ST_TO_ADDR
20288: LD_VAR 0 11
20292: PUSH
20293: FOR_TO
20294: IFFALSE 20414
// begin for j = 1 to array do
20296: LD_ADDR_VAR 0 7
20300: PUSH
20301: DOUBLE
20302: LD_INT 1
20304: DEC
20305: ST_TO_ADDR
20306: LD_VAR 0 1
20310: PUSH
20311: FOR_TO
20312: IFFALSE 20400
// begin k := j + d ;
20314: LD_ADDR_VAR 0 8
20318: PUSH
20319: LD_VAR 0 7
20323: PUSH
20324: LD_VAR 0 9
20328: PLUS
20329: ST_TO_ADDR
// if k > array then
20330: LD_VAR 0 8
20334: PUSH
20335: LD_VAR 0 1
20339: GREATER
20340: IFFALSE 20350
// k := 1 ;
20342: LD_ADDR_VAR 0 8
20346: PUSH
20347: LD_INT 1
20349: ST_TO_ADDR
// if not k then
20350: LD_VAR 0 8
20354: NOT
20355: IFFALSE 20367
// k := array ;
20357: LD_ADDR_VAR 0 8
20361: PUSH
20362: LD_VAR 0 1
20366: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20367: LD_ADDR_VAR 0 10
20371: PUSH
20372: LD_VAR 0 10
20376: PPUSH
20377: LD_VAR 0 8
20381: PPUSH
20382: LD_VAR 0 1
20386: PUSH
20387: LD_VAR 0 7
20391: ARRAY
20392: PPUSH
20393: CALL_OW 1
20397: ST_TO_ADDR
// end ;
20398: GO 20311
20400: POP
20401: POP
// array := tmp ;
20402: LD_ADDR_VAR 0 1
20406: PUSH
20407: LD_VAR 0 10
20411: ST_TO_ADDR
// end ;
20412: GO 20293
20414: POP
20415: POP
// result := array ;
20416: LD_ADDR_VAR 0 5
20420: PUSH
20421: LD_VAR 0 1
20425: ST_TO_ADDR
// end ;
20426: LD_VAR 0 5
20430: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20431: LD_INT 0
20433: PPUSH
20434: PPUSH
// result := 0 ;
20435: LD_ADDR_VAR 0 3
20439: PUSH
20440: LD_INT 0
20442: ST_TO_ADDR
// if not array or not value in array then
20443: LD_VAR 0 1
20447: NOT
20448: PUSH
20449: LD_VAR 0 2
20453: PUSH
20454: LD_VAR 0 1
20458: IN
20459: NOT
20460: OR
20461: IFFALSE 20465
// exit ;
20463: GO 20519
// for i = 1 to array do
20465: LD_ADDR_VAR 0 4
20469: PUSH
20470: DOUBLE
20471: LD_INT 1
20473: DEC
20474: ST_TO_ADDR
20475: LD_VAR 0 1
20479: PUSH
20480: FOR_TO
20481: IFFALSE 20517
// if value = array [ i ] then
20483: LD_VAR 0 2
20487: PUSH
20488: LD_VAR 0 1
20492: PUSH
20493: LD_VAR 0 4
20497: ARRAY
20498: EQUAL
20499: IFFALSE 20515
// begin result := i ;
20501: LD_ADDR_VAR 0 3
20505: PUSH
20506: LD_VAR 0 4
20510: ST_TO_ADDR
// exit ;
20511: POP
20512: POP
20513: GO 20519
// end ;
20515: GO 20480
20517: POP
20518: POP
// end ;
20519: LD_VAR 0 3
20523: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20524: LD_INT 0
20526: PPUSH
// vc_chassis := chassis ;
20527: LD_ADDR_OWVAR 37
20531: PUSH
20532: LD_VAR 0 1
20536: ST_TO_ADDR
// vc_engine := engine ;
20537: LD_ADDR_OWVAR 39
20541: PUSH
20542: LD_VAR 0 2
20546: ST_TO_ADDR
// vc_control := control ;
20547: LD_ADDR_OWVAR 38
20551: PUSH
20552: LD_VAR 0 3
20556: ST_TO_ADDR
// vc_weapon := weapon ;
20557: LD_ADDR_OWVAR 40
20561: PUSH
20562: LD_VAR 0 4
20566: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20567: LD_ADDR_OWVAR 41
20571: PUSH
20572: LD_VAR 0 5
20576: ST_TO_ADDR
// end ;
20577: LD_VAR 0 6
20581: RET
// export function WantPlant ( unit ) ; var task ; begin
20582: LD_INT 0
20584: PPUSH
20585: PPUSH
// result := false ;
20586: LD_ADDR_VAR 0 2
20590: PUSH
20591: LD_INT 0
20593: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20594: LD_ADDR_VAR 0 3
20598: PUSH
20599: LD_VAR 0 1
20603: PPUSH
20604: CALL_OW 437
20608: ST_TO_ADDR
// if task then
20609: LD_VAR 0 3
20613: IFFALSE 20641
// if task [ 1 ] [ 1 ] = p then
20615: LD_VAR 0 3
20619: PUSH
20620: LD_INT 1
20622: ARRAY
20623: PUSH
20624: LD_INT 1
20626: ARRAY
20627: PUSH
20628: LD_STRING p
20630: EQUAL
20631: IFFALSE 20641
// result := true ;
20633: LD_ADDR_VAR 0 2
20637: PUSH
20638: LD_INT 1
20640: ST_TO_ADDR
// end ;
20641: LD_VAR 0 2
20645: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20646: LD_INT 0
20648: PPUSH
20649: PPUSH
20650: PPUSH
20651: PPUSH
// if pos < 1 then
20652: LD_VAR 0 2
20656: PUSH
20657: LD_INT 1
20659: LESS
20660: IFFALSE 20664
// exit ;
20662: GO 20967
// if pos = 1 then
20664: LD_VAR 0 2
20668: PUSH
20669: LD_INT 1
20671: EQUAL
20672: IFFALSE 20705
// result := Replace ( arr , pos [ 1 ] , value ) else
20674: LD_ADDR_VAR 0 4
20678: PUSH
20679: LD_VAR 0 1
20683: PPUSH
20684: LD_VAR 0 2
20688: PUSH
20689: LD_INT 1
20691: ARRAY
20692: PPUSH
20693: LD_VAR 0 3
20697: PPUSH
20698: CALL_OW 1
20702: ST_TO_ADDR
20703: GO 20967
// begin tmp := arr ;
20705: LD_ADDR_VAR 0 6
20709: PUSH
20710: LD_VAR 0 1
20714: ST_TO_ADDR
// s_arr := [ tmp ] ;
20715: LD_ADDR_VAR 0 7
20719: PUSH
20720: LD_VAR 0 6
20724: PUSH
20725: EMPTY
20726: LIST
20727: ST_TO_ADDR
// for i = 1 to pos - 1 do
20728: LD_ADDR_VAR 0 5
20732: PUSH
20733: DOUBLE
20734: LD_INT 1
20736: DEC
20737: ST_TO_ADDR
20738: LD_VAR 0 2
20742: PUSH
20743: LD_INT 1
20745: MINUS
20746: PUSH
20747: FOR_TO
20748: IFFALSE 20793
// begin tmp := tmp [ pos [ i ] ] ;
20750: LD_ADDR_VAR 0 6
20754: PUSH
20755: LD_VAR 0 6
20759: PUSH
20760: LD_VAR 0 2
20764: PUSH
20765: LD_VAR 0 5
20769: ARRAY
20770: ARRAY
20771: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20772: LD_ADDR_VAR 0 7
20776: PUSH
20777: LD_VAR 0 7
20781: PUSH
20782: LD_VAR 0 6
20786: PUSH
20787: EMPTY
20788: LIST
20789: ADD
20790: ST_TO_ADDR
// end ;
20791: GO 20747
20793: POP
20794: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20795: LD_ADDR_VAR 0 6
20799: PUSH
20800: LD_VAR 0 6
20804: PPUSH
20805: LD_VAR 0 2
20809: PUSH
20810: LD_VAR 0 2
20814: ARRAY
20815: PPUSH
20816: LD_VAR 0 3
20820: PPUSH
20821: CALL_OW 1
20825: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20826: LD_ADDR_VAR 0 7
20830: PUSH
20831: LD_VAR 0 7
20835: PPUSH
20836: LD_VAR 0 7
20840: PPUSH
20841: LD_VAR 0 6
20845: PPUSH
20846: CALL_OW 1
20850: ST_TO_ADDR
// for i = s_arr downto 2 do
20851: LD_ADDR_VAR 0 5
20855: PUSH
20856: DOUBLE
20857: LD_VAR 0 7
20861: INC
20862: ST_TO_ADDR
20863: LD_INT 2
20865: PUSH
20866: FOR_DOWNTO
20867: IFFALSE 20951
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20869: LD_ADDR_VAR 0 6
20873: PUSH
20874: LD_VAR 0 7
20878: PUSH
20879: LD_VAR 0 5
20883: PUSH
20884: LD_INT 1
20886: MINUS
20887: ARRAY
20888: PPUSH
20889: LD_VAR 0 2
20893: PUSH
20894: LD_VAR 0 5
20898: PUSH
20899: LD_INT 1
20901: MINUS
20902: ARRAY
20903: PPUSH
20904: LD_VAR 0 7
20908: PUSH
20909: LD_VAR 0 5
20913: ARRAY
20914: PPUSH
20915: CALL_OW 1
20919: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20920: LD_ADDR_VAR 0 7
20924: PUSH
20925: LD_VAR 0 7
20929: PPUSH
20930: LD_VAR 0 5
20934: PUSH
20935: LD_INT 1
20937: MINUS
20938: PPUSH
20939: LD_VAR 0 6
20943: PPUSH
20944: CALL_OW 1
20948: ST_TO_ADDR
// end ;
20949: GO 20866
20951: POP
20952: POP
// result := s_arr [ 1 ] ;
20953: LD_ADDR_VAR 0 4
20957: PUSH
20958: LD_VAR 0 7
20962: PUSH
20963: LD_INT 1
20965: ARRAY
20966: ST_TO_ADDR
// end ; end ;
20967: LD_VAR 0 4
20971: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20972: LD_INT 0
20974: PPUSH
20975: PPUSH
// if not list then
20976: LD_VAR 0 1
20980: NOT
20981: IFFALSE 20985
// exit ;
20983: GO 21076
// i := list [ pos1 ] ;
20985: LD_ADDR_VAR 0 5
20989: PUSH
20990: LD_VAR 0 1
20994: PUSH
20995: LD_VAR 0 2
20999: ARRAY
21000: ST_TO_ADDR
// if not i then
21001: LD_VAR 0 5
21005: NOT
21006: IFFALSE 21010
// exit ;
21008: GO 21076
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21010: LD_ADDR_VAR 0 1
21014: PUSH
21015: LD_VAR 0 1
21019: PPUSH
21020: LD_VAR 0 2
21024: PPUSH
21025: LD_VAR 0 1
21029: PUSH
21030: LD_VAR 0 3
21034: ARRAY
21035: PPUSH
21036: CALL_OW 1
21040: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21041: LD_ADDR_VAR 0 1
21045: PUSH
21046: LD_VAR 0 1
21050: PPUSH
21051: LD_VAR 0 3
21055: PPUSH
21056: LD_VAR 0 5
21060: PPUSH
21061: CALL_OW 1
21065: ST_TO_ADDR
// result := list ;
21066: LD_ADDR_VAR 0 4
21070: PUSH
21071: LD_VAR 0 1
21075: ST_TO_ADDR
// end ;
21076: LD_VAR 0 4
21080: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21081: LD_INT 0
21083: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21084: LD_ADDR_VAR 0 5
21088: PUSH
21089: LD_VAR 0 1
21093: PPUSH
21094: CALL_OW 250
21098: PPUSH
21099: LD_VAR 0 1
21103: PPUSH
21104: CALL_OW 251
21108: PPUSH
21109: LD_VAR 0 2
21113: PPUSH
21114: LD_VAR 0 3
21118: PPUSH
21119: LD_VAR 0 4
21123: PPUSH
21124: CALL 21502 0 5
21128: ST_TO_ADDR
// end ;
21129: LD_VAR 0 5
21133: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
21134: LD_INT 0
21136: PPUSH
21137: PPUSH
21138: PPUSH
21139: PPUSH
// if not list or not unit then
21140: LD_VAR 0 2
21144: NOT
21145: PUSH
21146: LD_VAR 0 1
21150: NOT
21151: OR
21152: IFFALSE 21156
// exit ;
21154: GO 21497
// result := [ ] ;
21156: LD_ADDR_VAR 0 5
21160: PUSH
21161: EMPTY
21162: ST_TO_ADDR
// for i in list do
21163: LD_ADDR_VAR 0 6
21167: PUSH
21168: LD_VAR 0 2
21172: PUSH
21173: FOR_IN
21174: IFFALSE 21392
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
21176: LD_ADDR_VAR 0 8
21180: PUSH
21181: LD_VAR 0 1
21185: PPUSH
21186: LD_VAR 0 6
21190: PUSH
21191: LD_INT 1
21193: ARRAY
21194: PPUSH
21195: LD_VAR 0 6
21199: PUSH
21200: LD_INT 2
21202: ARRAY
21203: PPUSH
21204: CALL_OW 297
21208: ST_TO_ADDR
// if not Count ( result ) then
21209: LD_VAR 0 5
21213: PPUSH
21214: CALL 17786 0 1
21218: NOT
21219: IFFALSE 21252
// begin result := Join ( result , [ i , tmp ] ) ;
21221: LD_ADDR_VAR 0 5
21225: PUSH
21226: LD_VAR 0 5
21230: PPUSH
21231: LD_VAR 0 6
21235: PUSH
21236: LD_VAR 0 8
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: PPUSH
21245: CALL 53386 0 2
21249: ST_TO_ADDR
// continue ;
21250: GO 21173
// end ; if result [ result ] [ 2 ] <= tmp then
21252: LD_VAR 0 5
21256: PUSH
21257: LD_VAR 0 5
21261: ARRAY
21262: PUSH
21263: LD_INT 2
21265: ARRAY
21266: PUSH
21267: LD_VAR 0 8
21271: LESSEQUAL
21272: IFFALSE 21305
// result := Join ( result , [ i , tmp ] ) else
21274: LD_ADDR_VAR 0 5
21278: PUSH
21279: LD_VAR 0 5
21283: PPUSH
21284: LD_VAR 0 6
21288: PUSH
21289: LD_VAR 0 8
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PPUSH
21298: CALL 53386 0 2
21302: ST_TO_ADDR
21303: GO 21390
// begin for j := 1 to Count ( result ) do
21305: LD_ADDR_VAR 0 7
21309: PUSH
21310: DOUBLE
21311: LD_INT 1
21313: DEC
21314: ST_TO_ADDR
21315: LD_VAR 0 5
21319: PPUSH
21320: CALL 17786 0 1
21324: PUSH
21325: FOR_TO
21326: IFFALSE 21388
// begin if tmp < result [ j ] [ 2 ] then
21328: LD_VAR 0 8
21332: PUSH
21333: LD_VAR 0 5
21337: PUSH
21338: LD_VAR 0 7
21342: ARRAY
21343: PUSH
21344: LD_INT 2
21346: ARRAY
21347: LESS
21348: IFFALSE 21386
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21350: LD_ADDR_VAR 0 5
21354: PUSH
21355: LD_VAR 0 5
21359: PPUSH
21360: LD_VAR 0 7
21364: PPUSH
21365: LD_VAR 0 6
21369: PUSH
21370: LD_VAR 0 8
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PPUSH
21379: CALL_OW 2
21383: ST_TO_ADDR
// break ;
21384: GO 21388
// end ; end ;
21386: GO 21325
21388: POP
21389: POP
// end ; end ;
21390: GO 21173
21392: POP
21393: POP
// if result and not asc then
21394: LD_VAR 0 5
21398: PUSH
21399: LD_VAR 0 3
21403: NOT
21404: AND
21405: IFFALSE 21422
// result := ReverseArray ( result ) ;
21407: LD_ADDR_VAR 0 5
21411: PUSH
21412: LD_VAR 0 5
21416: PPUSH
21417: CALL 48662 0 1
21421: ST_TO_ADDR
// tmp := [ ] ;
21422: LD_ADDR_VAR 0 8
21426: PUSH
21427: EMPTY
21428: ST_TO_ADDR
// if mode then
21429: LD_VAR 0 4
21433: IFFALSE 21497
// begin for i := 1 to result do
21435: LD_ADDR_VAR 0 6
21439: PUSH
21440: DOUBLE
21441: LD_INT 1
21443: DEC
21444: ST_TO_ADDR
21445: LD_VAR 0 5
21449: PUSH
21450: FOR_TO
21451: IFFALSE 21485
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
21453: LD_ADDR_VAR 0 8
21457: PUSH
21458: LD_VAR 0 8
21462: PPUSH
21463: LD_VAR 0 5
21467: PUSH
21468: LD_VAR 0 6
21472: ARRAY
21473: PUSH
21474: LD_INT 1
21476: ARRAY
21477: PPUSH
21478: CALL 53386 0 2
21482: ST_TO_ADDR
21483: GO 21450
21485: POP
21486: POP
// result := tmp ;
21487: LD_ADDR_VAR 0 5
21491: PUSH
21492: LD_VAR 0 8
21496: ST_TO_ADDR
// end ; end ;
21497: LD_VAR 0 5
21501: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21502: LD_INT 0
21504: PPUSH
21505: PPUSH
21506: PPUSH
21507: PPUSH
// if not list then
21508: LD_VAR 0 3
21512: NOT
21513: IFFALSE 21517
// exit ;
21515: GO 21905
// result := [ ] ;
21517: LD_ADDR_VAR 0 6
21521: PUSH
21522: EMPTY
21523: ST_TO_ADDR
// for i in list do
21524: LD_ADDR_VAR 0 7
21528: PUSH
21529: LD_VAR 0 3
21533: PUSH
21534: FOR_IN
21535: IFFALSE 21737
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21537: LD_ADDR_VAR 0 9
21541: PUSH
21542: LD_VAR 0 7
21546: PPUSH
21547: LD_VAR 0 1
21551: PPUSH
21552: LD_VAR 0 2
21556: PPUSH
21557: CALL_OW 297
21561: ST_TO_ADDR
// if not result then
21562: LD_VAR 0 6
21566: NOT
21567: IFFALSE 21593
// result := [ [ i , tmp ] ] else
21569: LD_ADDR_VAR 0 6
21573: PUSH
21574: LD_VAR 0 7
21578: PUSH
21579: LD_VAR 0 9
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: EMPTY
21589: LIST
21590: ST_TO_ADDR
21591: GO 21735
// begin if result [ result ] [ 2 ] < tmp then
21593: LD_VAR 0 6
21597: PUSH
21598: LD_VAR 0 6
21602: ARRAY
21603: PUSH
21604: LD_INT 2
21606: ARRAY
21607: PUSH
21608: LD_VAR 0 9
21612: LESS
21613: IFFALSE 21655
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21615: LD_ADDR_VAR 0 6
21619: PUSH
21620: LD_VAR 0 6
21624: PPUSH
21625: LD_VAR 0 6
21629: PUSH
21630: LD_INT 1
21632: PLUS
21633: PPUSH
21634: LD_VAR 0 7
21638: PUSH
21639: LD_VAR 0 9
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: PPUSH
21648: CALL_OW 2
21652: ST_TO_ADDR
21653: GO 21735
// for j = 1 to result do
21655: LD_ADDR_VAR 0 8
21659: PUSH
21660: DOUBLE
21661: LD_INT 1
21663: DEC
21664: ST_TO_ADDR
21665: LD_VAR 0 6
21669: PUSH
21670: FOR_TO
21671: IFFALSE 21733
// begin if tmp < result [ j ] [ 2 ] then
21673: LD_VAR 0 9
21677: PUSH
21678: LD_VAR 0 6
21682: PUSH
21683: LD_VAR 0 8
21687: ARRAY
21688: PUSH
21689: LD_INT 2
21691: ARRAY
21692: LESS
21693: IFFALSE 21731
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21695: LD_ADDR_VAR 0 6
21699: PUSH
21700: LD_VAR 0 6
21704: PPUSH
21705: LD_VAR 0 8
21709: PPUSH
21710: LD_VAR 0 7
21714: PUSH
21715: LD_VAR 0 9
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PPUSH
21724: CALL_OW 2
21728: ST_TO_ADDR
// break ;
21729: GO 21733
// end ; end ;
21731: GO 21670
21733: POP
21734: POP
// end ; end ;
21735: GO 21534
21737: POP
21738: POP
// if result and not asc then
21739: LD_VAR 0 6
21743: PUSH
21744: LD_VAR 0 4
21748: NOT
21749: AND
21750: IFFALSE 21825
// begin tmp := result ;
21752: LD_ADDR_VAR 0 9
21756: PUSH
21757: LD_VAR 0 6
21761: ST_TO_ADDR
// for i = tmp downto 1 do
21762: LD_ADDR_VAR 0 7
21766: PUSH
21767: DOUBLE
21768: LD_VAR 0 9
21772: INC
21773: ST_TO_ADDR
21774: LD_INT 1
21776: PUSH
21777: FOR_DOWNTO
21778: IFFALSE 21823
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21780: LD_ADDR_VAR 0 6
21784: PUSH
21785: LD_VAR 0 6
21789: PPUSH
21790: LD_VAR 0 9
21794: PUSH
21795: LD_VAR 0 7
21799: MINUS
21800: PUSH
21801: LD_INT 1
21803: PLUS
21804: PPUSH
21805: LD_VAR 0 9
21809: PUSH
21810: LD_VAR 0 7
21814: ARRAY
21815: PPUSH
21816: CALL_OW 1
21820: ST_TO_ADDR
21821: GO 21777
21823: POP
21824: POP
// end ; tmp := [ ] ;
21825: LD_ADDR_VAR 0 9
21829: PUSH
21830: EMPTY
21831: ST_TO_ADDR
// if mode then
21832: LD_VAR 0 5
21836: IFFALSE 21905
// begin for i = 1 to result do
21838: LD_ADDR_VAR 0 7
21842: PUSH
21843: DOUBLE
21844: LD_INT 1
21846: DEC
21847: ST_TO_ADDR
21848: LD_VAR 0 6
21852: PUSH
21853: FOR_TO
21854: IFFALSE 21893
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21856: LD_ADDR_VAR 0 9
21860: PUSH
21861: LD_VAR 0 9
21865: PPUSH
21866: LD_VAR 0 7
21870: PPUSH
21871: LD_VAR 0 6
21875: PUSH
21876: LD_VAR 0 7
21880: ARRAY
21881: PUSH
21882: LD_INT 1
21884: ARRAY
21885: PPUSH
21886: CALL_OW 1
21890: ST_TO_ADDR
21891: GO 21853
21893: POP
21894: POP
// result := tmp ;
21895: LD_ADDR_VAR 0 6
21899: PUSH
21900: LD_VAR 0 9
21904: ST_TO_ADDR
// end ; end ;
21905: LD_VAR 0 6
21909: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21910: LD_INT 0
21912: PPUSH
21913: PPUSH
21914: PPUSH
21915: PPUSH
21916: PPUSH
21917: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21918: LD_ADDR_VAR 0 5
21922: PUSH
21923: LD_INT 0
21925: PUSH
21926: LD_INT 0
21928: PUSH
21929: LD_INT 0
21931: PUSH
21932: EMPTY
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: ST_TO_ADDR
// if not x or not y then
21940: LD_VAR 0 2
21944: NOT
21945: PUSH
21946: LD_VAR 0 3
21950: NOT
21951: OR
21952: IFFALSE 21956
// exit ;
21954: GO 23606
// if not range then
21956: LD_VAR 0 4
21960: NOT
21961: IFFALSE 21971
// range := 10 ;
21963: LD_ADDR_VAR 0 4
21967: PUSH
21968: LD_INT 10
21970: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21971: LD_ADDR_VAR 0 8
21975: PUSH
21976: LD_INT 81
21978: PUSH
21979: LD_VAR 0 1
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 92
21990: PUSH
21991: LD_VAR 0 2
21995: PUSH
21996: LD_VAR 0 3
22000: PUSH
22001: LD_VAR 0 4
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: PUSH
22012: LD_INT 3
22014: PUSH
22015: LD_INT 21
22017: PUSH
22018: LD_INT 3
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: LIST
22033: PPUSH
22034: CALL_OW 69
22038: ST_TO_ADDR
// if not tmp then
22039: LD_VAR 0 8
22043: NOT
22044: IFFALSE 22048
// exit ;
22046: GO 23606
// for i in tmp do
22048: LD_ADDR_VAR 0 6
22052: PUSH
22053: LD_VAR 0 8
22057: PUSH
22058: FOR_IN
22059: IFFALSE 23581
// begin points := [ 0 , 0 , 0 ] ;
22061: LD_ADDR_VAR 0 9
22065: PUSH
22066: LD_INT 0
22068: PUSH
22069: LD_INT 0
22071: PUSH
22072: LD_INT 0
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: LIST
22079: ST_TO_ADDR
// bpoints := 1 ;
22080: LD_ADDR_VAR 0 10
22084: PUSH
22085: LD_INT 1
22087: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22088: LD_VAR 0 6
22092: PPUSH
22093: CALL_OW 247
22097: PUSH
22098: LD_INT 1
22100: DOUBLE
22101: EQUAL
22102: IFTRUE 22106
22104: GO 22684
22106: POP
// begin if GetClass ( i ) = 1 then
22107: LD_VAR 0 6
22111: PPUSH
22112: CALL_OW 257
22116: PUSH
22117: LD_INT 1
22119: EQUAL
22120: IFFALSE 22141
// points := [ 10 , 5 , 3 ] ;
22122: LD_ADDR_VAR 0 9
22126: PUSH
22127: LD_INT 10
22129: PUSH
22130: LD_INT 5
22132: PUSH
22133: LD_INT 3
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: LIST
22140: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22141: LD_VAR 0 6
22145: PPUSH
22146: CALL_OW 257
22150: PUSH
22151: LD_INT 2
22153: PUSH
22154: LD_INT 3
22156: PUSH
22157: LD_INT 4
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: LIST
22164: IN
22165: IFFALSE 22186
// points := [ 3 , 2 , 1 ] ;
22167: LD_ADDR_VAR 0 9
22171: PUSH
22172: LD_INT 3
22174: PUSH
22175: LD_INT 2
22177: PUSH
22178: LD_INT 1
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: LIST
22185: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22186: LD_VAR 0 6
22190: PPUSH
22191: CALL_OW 257
22195: PUSH
22196: LD_INT 5
22198: EQUAL
22199: IFFALSE 22220
// points := [ 130 , 5 , 2 ] ;
22201: LD_ADDR_VAR 0 9
22205: PUSH
22206: LD_INT 130
22208: PUSH
22209: LD_INT 5
22211: PUSH
22212: LD_INT 2
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: LIST
22219: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22220: LD_VAR 0 6
22224: PPUSH
22225: CALL_OW 257
22229: PUSH
22230: LD_INT 8
22232: EQUAL
22233: IFFALSE 22254
// points := [ 35 , 35 , 30 ] ;
22235: LD_ADDR_VAR 0 9
22239: PUSH
22240: LD_INT 35
22242: PUSH
22243: LD_INT 35
22245: PUSH
22246: LD_INT 30
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: LIST
22253: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22254: LD_VAR 0 6
22258: PPUSH
22259: CALL_OW 257
22263: PUSH
22264: LD_INT 9
22266: EQUAL
22267: IFFALSE 22288
// points := [ 20 , 55 , 40 ] ;
22269: LD_ADDR_VAR 0 9
22273: PUSH
22274: LD_INT 20
22276: PUSH
22277: LD_INT 55
22279: PUSH
22280: LD_INT 40
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: LIST
22287: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22288: LD_VAR 0 6
22292: PPUSH
22293: CALL_OW 257
22297: PUSH
22298: LD_INT 12
22300: PUSH
22301: LD_INT 16
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: IN
22308: IFFALSE 22329
// points := [ 5 , 3 , 2 ] ;
22310: LD_ADDR_VAR 0 9
22314: PUSH
22315: LD_INT 5
22317: PUSH
22318: LD_INT 3
22320: PUSH
22321: LD_INT 2
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: LIST
22328: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22329: LD_VAR 0 6
22333: PPUSH
22334: CALL_OW 257
22338: PUSH
22339: LD_INT 17
22341: EQUAL
22342: IFFALSE 22363
// points := [ 100 , 50 , 75 ] ;
22344: LD_ADDR_VAR 0 9
22348: PUSH
22349: LD_INT 100
22351: PUSH
22352: LD_INT 50
22354: PUSH
22355: LD_INT 75
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: LIST
22362: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22363: LD_VAR 0 6
22367: PPUSH
22368: CALL_OW 257
22372: PUSH
22373: LD_INT 15
22375: EQUAL
22376: IFFALSE 22397
// points := [ 10 , 5 , 3 ] ;
22378: LD_ADDR_VAR 0 9
22382: PUSH
22383: LD_INT 10
22385: PUSH
22386: LD_INT 5
22388: PUSH
22389: LD_INT 3
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: LIST
22396: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22397: LD_VAR 0 6
22401: PPUSH
22402: CALL_OW 257
22406: PUSH
22407: LD_INT 14
22409: EQUAL
22410: IFFALSE 22431
// points := [ 10 , 0 , 0 ] ;
22412: LD_ADDR_VAR 0 9
22416: PUSH
22417: LD_INT 10
22419: PUSH
22420: LD_INT 0
22422: PUSH
22423: LD_INT 0
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: LIST
22430: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22431: LD_VAR 0 6
22435: PPUSH
22436: CALL_OW 257
22440: PUSH
22441: LD_INT 11
22443: EQUAL
22444: IFFALSE 22465
// points := [ 30 , 10 , 5 ] ;
22446: LD_ADDR_VAR 0 9
22450: PUSH
22451: LD_INT 30
22453: PUSH
22454: LD_INT 10
22456: PUSH
22457: LD_INT 5
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: LIST
22464: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
22465: LD_VAR 0 1
22469: PPUSH
22470: LD_INT 5
22472: PPUSH
22473: CALL_OW 321
22477: PUSH
22478: LD_INT 2
22480: EQUAL
22481: IFFALSE 22498
// bpoints := bpoints * 1.8 ;
22483: LD_ADDR_VAR 0 10
22487: PUSH
22488: LD_VAR 0 10
22492: PUSH
22493: LD_REAL  1.80000000000000E+0000
22496: MUL
22497: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22498: LD_VAR 0 6
22502: PPUSH
22503: CALL_OW 257
22507: PUSH
22508: LD_INT 1
22510: PUSH
22511: LD_INT 2
22513: PUSH
22514: LD_INT 3
22516: PUSH
22517: LD_INT 4
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: IN
22526: PUSH
22527: LD_VAR 0 1
22531: PPUSH
22532: LD_INT 51
22534: PPUSH
22535: CALL_OW 321
22539: PUSH
22540: LD_INT 2
22542: EQUAL
22543: AND
22544: IFFALSE 22561
// bpoints := bpoints * 1.2 ;
22546: LD_ADDR_VAR 0 10
22550: PUSH
22551: LD_VAR 0 10
22555: PUSH
22556: LD_REAL  1.20000000000000E+0000
22559: MUL
22560: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22561: LD_VAR 0 6
22565: PPUSH
22566: CALL_OW 257
22570: PUSH
22571: LD_INT 5
22573: PUSH
22574: LD_INT 7
22576: PUSH
22577: LD_INT 9
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: LIST
22584: IN
22585: PUSH
22586: LD_VAR 0 1
22590: PPUSH
22591: LD_INT 52
22593: PPUSH
22594: CALL_OW 321
22598: PUSH
22599: LD_INT 2
22601: EQUAL
22602: AND
22603: IFFALSE 22620
// bpoints := bpoints * 1.5 ;
22605: LD_ADDR_VAR 0 10
22609: PUSH
22610: LD_VAR 0 10
22614: PUSH
22615: LD_REAL  1.50000000000000E+0000
22618: MUL
22619: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22620: LD_VAR 0 1
22624: PPUSH
22625: LD_INT 66
22627: PPUSH
22628: CALL_OW 321
22632: PUSH
22633: LD_INT 2
22635: EQUAL
22636: IFFALSE 22653
// bpoints := bpoints * 1.1 ;
22638: LD_ADDR_VAR 0 10
22642: PUSH
22643: LD_VAR 0 10
22647: PUSH
22648: LD_REAL  1.10000000000000E+0000
22651: MUL
22652: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22653: LD_ADDR_VAR 0 10
22657: PUSH
22658: LD_VAR 0 10
22662: PUSH
22663: LD_VAR 0 6
22667: PPUSH
22668: LD_INT 1
22670: PPUSH
22671: CALL_OW 259
22675: PUSH
22676: LD_REAL  1.15000000000000E+0000
22679: MUL
22680: MUL
22681: ST_TO_ADDR
// end ; unit_vehicle :
22682: GO 23510
22684: LD_INT 2
22686: DOUBLE
22687: EQUAL
22688: IFTRUE 22692
22690: GO 23498
22692: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22693: LD_VAR 0 6
22697: PPUSH
22698: CALL_OW 264
22702: PUSH
22703: LD_INT 2
22705: PUSH
22706: LD_INT 42
22708: PUSH
22709: LD_INT 24
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: LIST
22716: IN
22717: IFFALSE 22738
// points := [ 25 , 5 , 3 ] ;
22719: LD_ADDR_VAR 0 9
22723: PUSH
22724: LD_INT 25
22726: PUSH
22727: LD_INT 5
22729: PUSH
22730: LD_INT 3
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: LIST
22737: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22738: LD_VAR 0 6
22742: PPUSH
22743: CALL_OW 264
22747: PUSH
22748: LD_INT 4
22750: PUSH
22751: LD_INT 43
22753: PUSH
22754: LD_INT 25
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: LIST
22761: IN
22762: IFFALSE 22783
// points := [ 40 , 15 , 5 ] ;
22764: LD_ADDR_VAR 0 9
22768: PUSH
22769: LD_INT 40
22771: PUSH
22772: LD_INT 15
22774: PUSH
22775: LD_INT 5
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: LIST
22782: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22783: LD_VAR 0 6
22787: PPUSH
22788: CALL_OW 264
22792: PUSH
22793: LD_INT 3
22795: PUSH
22796: LD_INT 23
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: IN
22803: IFFALSE 22824
// points := [ 7 , 25 , 8 ] ;
22805: LD_ADDR_VAR 0 9
22809: PUSH
22810: LD_INT 7
22812: PUSH
22813: LD_INT 25
22815: PUSH
22816: LD_INT 8
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: LIST
22823: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22824: LD_VAR 0 6
22828: PPUSH
22829: CALL_OW 264
22833: PUSH
22834: LD_INT 5
22836: PUSH
22837: LD_INT 27
22839: PUSH
22840: LD_INT 44
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: LIST
22847: IN
22848: IFFALSE 22869
// points := [ 14 , 50 , 16 ] ;
22850: LD_ADDR_VAR 0 9
22854: PUSH
22855: LD_INT 14
22857: PUSH
22858: LD_INT 50
22860: PUSH
22861: LD_INT 16
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: LIST
22868: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22869: LD_VAR 0 6
22873: PPUSH
22874: CALL_OW 264
22878: PUSH
22879: LD_INT 6
22881: PUSH
22882: LD_INT 46
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: IN
22889: IFFALSE 22910
// points := [ 32 , 120 , 70 ] ;
22891: LD_ADDR_VAR 0 9
22895: PUSH
22896: LD_INT 32
22898: PUSH
22899: LD_INT 120
22901: PUSH
22902: LD_INT 70
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: LIST
22909: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22910: LD_VAR 0 6
22914: PPUSH
22915: CALL_OW 264
22919: PUSH
22920: LD_INT 7
22922: PUSH
22923: LD_INT 28
22925: PUSH
22926: LD_INT 45
22928: PUSH
22929: LD_INT 92
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: IN
22938: IFFALSE 22959
// points := [ 35 , 20 , 45 ] ;
22940: LD_ADDR_VAR 0 9
22944: PUSH
22945: LD_INT 35
22947: PUSH
22948: LD_INT 20
22950: PUSH
22951: LD_INT 45
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: LIST
22958: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22959: LD_VAR 0 6
22963: PPUSH
22964: CALL_OW 264
22968: PUSH
22969: LD_INT 47
22971: PUSH
22972: EMPTY
22973: LIST
22974: IN
22975: IFFALSE 22996
// points := [ 67 , 45 , 75 ] ;
22977: LD_ADDR_VAR 0 9
22981: PUSH
22982: LD_INT 67
22984: PUSH
22985: LD_INT 45
22987: PUSH
22988: LD_INT 75
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: LIST
22995: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22996: LD_VAR 0 6
23000: PPUSH
23001: CALL_OW 264
23005: PUSH
23006: LD_INT 26
23008: PUSH
23009: EMPTY
23010: LIST
23011: IN
23012: IFFALSE 23033
// points := [ 120 , 30 , 80 ] ;
23014: LD_ADDR_VAR 0 9
23018: PUSH
23019: LD_INT 120
23021: PUSH
23022: LD_INT 30
23024: PUSH
23025: LD_INT 80
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: LIST
23032: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23033: LD_VAR 0 6
23037: PPUSH
23038: CALL_OW 264
23042: PUSH
23043: LD_INT 22
23045: PUSH
23046: EMPTY
23047: LIST
23048: IN
23049: IFFALSE 23070
// points := [ 40 , 1 , 1 ] ;
23051: LD_ADDR_VAR 0 9
23055: PUSH
23056: LD_INT 40
23058: PUSH
23059: LD_INT 1
23061: PUSH
23062: LD_INT 1
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: LIST
23069: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23070: LD_VAR 0 6
23074: PPUSH
23075: CALL_OW 264
23079: PUSH
23080: LD_INT 29
23082: PUSH
23083: EMPTY
23084: LIST
23085: IN
23086: IFFALSE 23107
// points := [ 70 , 200 , 400 ] ;
23088: LD_ADDR_VAR 0 9
23092: PUSH
23093: LD_INT 70
23095: PUSH
23096: LD_INT 200
23098: PUSH
23099: LD_INT 400
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: LIST
23106: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23107: LD_VAR 0 6
23111: PPUSH
23112: CALL_OW 264
23116: PUSH
23117: LD_INT 14
23119: PUSH
23120: LD_INT 53
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: IN
23127: IFFALSE 23148
// points := [ 40 , 10 , 20 ] ;
23129: LD_ADDR_VAR 0 9
23133: PUSH
23134: LD_INT 40
23136: PUSH
23137: LD_INT 10
23139: PUSH
23140: LD_INT 20
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: LIST
23147: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23148: LD_VAR 0 6
23152: PPUSH
23153: CALL_OW 264
23157: PUSH
23158: LD_INT 9
23160: PUSH
23161: EMPTY
23162: LIST
23163: IN
23164: IFFALSE 23185
// points := [ 5 , 70 , 20 ] ;
23166: LD_ADDR_VAR 0 9
23170: PUSH
23171: LD_INT 5
23173: PUSH
23174: LD_INT 70
23176: PUSH
23177: LD_INT 20
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: LIST
23184: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23185: LD_VAR 0 6
23189: PPUSH
23190: CALL_OW 264
23194: PUSH
23195: LD_INT 10
23197: PUSH
23198: EMPTY
23199: LIST
23200: IN
23201: IFFALSE 23222
// points := [ 35 , 110 , 70 ] ;
23203: LD_ADDR_VAR 0 9
23207: PUSH
23208: LD_INT 35
23210: PUSH
23211: LD_INT 110
23213: PUSH
23214: LD_INT 70
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: LIST
23221: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23222: LD_VAR 0 6
23226: PPUSH
23227: CALL_OW 265
23231: PUSH
23232: LD_INT 25
23234: EQUAL
23235: IFFALSE 23256
// points := [ 80 , 65 , 100 ] ;
23237: LD_ADDR_VAR 0 9
23241: PUSH
23242: LD_INT 80
23244: PUSH
23245: LD_INT 65
23247: PUSH
23248: LD_INT 100
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: LIST
23255: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23256: LD_VAR 0 6
23260: PPUSH
23261: CALL_OW 263
23265: PUSH
23266: LD_INT 1
23268: EQUAL
23269: IFFALSE 23304
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23271: LD_ADDR_VAR 0 10
23275: PUSH
23276: LD_VAR 0 10
23280: PUSH
23281: LD_VAR 0 6
23285: PPUSH
23286: CALL_OW 311
23290: PPUSH
23291: LD_INT 3
23293: PPUSH
23294: CALL_OW 259
23298: PUSH
23299: LD_INT 4
23301: MUL
23302: MUL
23303: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23304: LD_VAR 0 6
23308: PPUSH
23309: CALL_OW 263
23313: PUSH
23314: LD_INT 2
23316: EQUAL
23317: IFFALSE 23368
// begin j := IsControledBy ( i ) ;
23319: LD_ADDR_VAR 0 7
23323: PUSH
23324: LD_VAR 0 6
23328: PPUSH
23329: CALL_OW 312
23333: ST_TO_ADDR
// if j then
23334: LD_VAR 0 7
23338: IFFALSE 23368
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23340: LD_ADDR_VAR 0 10
23344: PUSH
23345: LD_VAR 0 10
23349: PUSH
23350: LD_VAR 0 7
23354: PPUSH
23355: LD_INT 3
23357: PPUSH
23358: CALL_OW 259
23362: PUSH
23363: LD_INT 3
23365: MUL
23366: MUL
23367: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23368: LD_VAR 0 6
23372: PPUSH
23373: CALL_OW 264
23377: PUSH
23378: LD_INT 5
23380: PUSH
23381: LD_INT 6
23383: PUSH
23384: LD_INT 46
23386: PUSH
23387: LD_INT 44
23389: PUSH
23390: LD_INT 47
23392: PUSH
23393: LD_INT 45
23395: PUSH
23396: LD_INT 28
23398: PUSH
23399: LD_INT 7
23401: PUSH
23402: LD_INT 27
23404: PUSH
23405: LD_INT 29
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: IN
23420: PUSH
23421: LD_VAR 0 1
23425: PPUSH
23426: LD_INT 52
23428: PPUSH
23429: CALL_OW 321
23433: PUSH
23434: LD_INT 2
23436: EQUAL
23437: AND
23438: IFFALSE 23455
// bpoints := bpoints * 1.2 ;
23440: LD_ADDR_VAR 0 10
23444: PUSH
23445: LD_VAR 0 10
23449: PUSH
23450: LD_REAL  1.20000000000000E+0000
23453: MUL
23454: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
23455: LD_VAR 0 6
23459: PPUSH
23460: CALL_OW 264
23464: PUSH
23465: LD_INT 6
23467: PUSH
23468: LD_INT 46
23470: PUSH
23471: LD_INT 47
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: LIST
23478: IN
23479: IFFALSE 23496
// bpoints := bpoints * 1.2 ;
23481: LD_ADDR_VAR 0 10
23485: PUSH
23486: LD_VAR 0 10
23490: PUSH
23491: LD_REAL  1.20000000000000E+0000
23494: MUL
23495: ST_TO_ADDR
// end ; unit_building :
23496: GO 23510
23498: LD_INT 3
23500: DOUBLE
23501: EQUAL
23502: IFTRUE 23506
23504: GO 23509
23506: POP
// ; end ;
23507: GO 23510
23509: POP
// for j = 1 to 3 do
23510: LD_ADDR_VAR 0 7
23514: PUSH
23515: DOUBLE
23516: LD_INT 1
23518: DEC
23519: ST_TO_ADDR
23520: LD_INT 3
23522: PUSH
23523: FOR_TO
23524: IFFALSE 23577
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23526: LD_ADDR_VAR 0 5
23530: PUSH
23531: LD_VAR 0 5
23535: PPUSH
23536: LD_VAR 0 7
23540: PPUSH
23541: LD_VAR 0 5
23545: PUSH
23546: LD_VAR 0 7
23550: ARRAY
23551: PUSH
23552: LD_VAR 0 9
23556: PUSH
23557: LD_VAR 0 7
23561: ARRAY
23562: PUSH
23563: LD_VAR 0 10
23567: MUL
23568: PLUS
23569: PPUSH
23570: CALL_OW 1
23574: ST_TO_ADDR
23575: GO 23523
23577: POP
23578: POP
// end ;
23579: GO 22058
23581: POP
23582: POP
// result := Replace ( result , 4 , tmp ) ;
23583: LD_ADDR_VAR 0 5
23587: PUSH
23588: LD_VAR 0 5
23592: PPUSH
23593: LD_INT 4
23595: PPUSH
23596: LD_VAR 0 8
23600: PPUSH
23601: CALL_OW 1
23605: ST_TO_ADDR
// end ;
23606: LD_VAR 0 5
23610: RET
// export function DangerAtRange ( unit , range ) ; begin
23611: LD_INT 0
23613: PPUSH
// if not unit then
23614: LD_VAR 0 1
23618: NOT
23619: IFFALSE 23623
// exit ;
23621: GO 23668
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23623: LD_ADDR_VAR 0 3
23627: PUSH
23628: LD_VAR 0 1
23632: PPUSH
23633: CALL_OW 255
23637: PPUSH
23638: LD_VAR 0 1
23642: PPUSH
23643: CALL_OW 250
23647: PPUSH
23648: LD_VAR 0 1
23652: PPUSH
23653: CALL_OW 251
23657: PPUSH
23658: LD_VAR 0 2
23662: PPUSH
23663: CALL 21910 0 4
23667: ST_TO_ADDR
// end ;
23668: LD_VAR 0 3
23672: RET
// export function DangerInArea ( side , area ) ; begin
23673: LD_INT 0
23675: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23676: LD_ADDR_VAR 0 3
23680: PUSH
23681: LD_VAR 0 2
23685: PPUSH
23686: LD_INT 81
23688: PUSH
23689: LD_VAR 0 1
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PPUSH
23698: CALL_OW 70
23702: ST_TO_ADDR
// end ;
23703: LD_VAR 0 3
23707: RET
// export function IsExtension ( b ) ; begin
23708: LD_INT 0
23710: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23711: LD_ADDR_VAR 0 2
23715: PUSH
23716: LD_VAR 0 1
23720: PUSH
23721: LD_INT 23
23723: PUSH
23724: LD_INT 20
23726: PUSH
23727: LD_INT 22
23729: PUSH
23730: LD_INT 17
23732: PUSH
23733: LD_INT 24
23735: PUSH
23736: LD_INT 21
23738: PUSH
23739: LD_INT 19
23741: PUSH
23742: LD_INT 16
23744: PUSH
23745: LD_INT 25
23747: PUSH
23748: LD_INT 18
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: IN
23763: ST_TO_ADDR
// end ;
23764: LD_VAR 0 2
23768: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23769: LD_INT 0
23771: PPUSH
23772: PPUSH
23773: PPUSH
// result := [ ] ;
23774: LD_ADDR_VAR 0 4
23778: PUSH
23779: EMPTY
23780: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23781: LD_ADDR_VAR 0 5
23785: PUSH
23786: LD_VAR 0 2
23790: PPUSH
23791: LD_INT 21
23793: PUSH
23794: LD_INT 3
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PPUSH
23801: CALL_OW 70
23805: ST_TO_ADDR
// if not tmp then
23806: LD_VAR 0 5
23810: NOT
23811: IFFALSE 23815
// exit ;
23813: GO 23879
// if checkLink then
23815: LD_VAR 0 3
23819: IFFALSE 23869
// begin for i in tmp do
23821: LD_ADDR_VAR 0 6
23825: PUSH
23826: LD_VAR 0 5
23830: PUSH
23831: FOR_IN
23832: IFFALSE 23867
// if GetBase ( i ) <> base then
23834: LD_VAR 0 6
23838: PPUSH
23839: CALL_OW 274
23843: PUSH
23844: LD_VAR 0 1
23848: NONEQUAL
23849: IFFALSE 23865
// ComLinkToBase ( base , i ) ;
23851: LD_VAR 0 1
23855: PPUSH
23856: LD_VAR 0 6
23860: PPUSH
23861: CALL_OW 169
23865: GO 23831
23867: POP
23868: POP
// end ; result := tmp ;
23869: LD_ADDR_VAR 0 4
23873: PUSH
23874: LD_VAR 0 5
23878: ST_TO_ADDR
// end ;
23879: LD_VAR 0 4
23883: RET
// export function ComComplete ( units , b ) ; var i ; begin
23884: LD_INT 0
23886: PPUSH
23887: PPUSH
// if not units then
23888: LD_VAR 0 1
23892: NOT
23893: IFFALSE 23897
// exit ;
23895: GO 23987
// for i in units do
23897: LD_ADDR_VAR 0 4
23901: PUSH
23902: LD_VAR 0 1
23906: PUSH
23907: FOR_IN
23908: IFFALSE 23985
// if BuildingStatus ( b ) = bs_build then
23910: LD_VAR 0 2
23914: PPUSH
23915: CALL_OW 461
23919: PUSH
23920: LD_INT 1
23922: EQUAL
23923: IFFALSE 23983
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23925: LD_VAR 0 4
23929: PPUSH
23930: LD_STRING h
23932: PUSH
23933: LD_VAR 0 2
23937: PPUSH
23938: CALL_OW 250
23942: PUSH
23943: LD_VAR 0 2
23947: PPUSH
23948: CALL_OW 251
23952: PUSH
23953: LD_VAR 0 2
23957: PUSH
23958: LD_INT 0
23960: PUSH
23961: LD_INT 0
23963: PUSH
23964: LD_INT 0
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: PUSH
23976: EMPTY
23977: LIST
23978: PPUSH
23979: CALL_OW 446
23983: GO 23907
23985: POP
23986: POP
// end ;
23987: LD_VAR 0 3
23991: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23992: LD_INT 0
23994: PPUSH
23995: PPUSH
23996: PPUSH
23997: PPUSH
23998: PPUSH
23999: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24000: LD_VAR 0 1
24004: NOT
24005: PUSH
24006: LD_VAR 0 1
24010: PPUSH
24011: CALL_OW 263
24015: PUSH
24016: LD_INT 2
24018: NONEQUAL
24019: OR
24020: IFFALSE 24024
// exit ;
24022: GO 24340
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24024: LD_ADDR_VAR 0 6
24028: PUSH
24029: LD_INT 22
24031: PUSH
24032: LD_VAR 0 1
24036: PPUSH
24037: CALL_OW 255
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: LD_INT 2
24048: PUSH
24049: LD_INT 30
24051: PUSH
24052: LD_INT 36
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: LD_INT 34
24061: PUSH
24062: LD_INT 31
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: LIST
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PPUSH
24078: CALL_OW 69
24082: ST_TO_ADDR
// if not tmp then
24083: LD_VAR 0 6
24087: NOT
24088: IFFALSE 24092
// exit ;
24090: GO 24340
// result := [ ] ;
24092: LD_ADDR_VAR 0 2
24096: PUSH
24097: EMPTY
24098: ST_TO_ADDR
// for i in tmp do
24099: LD_ADDR_VAR 0 3
24103: PUSH
24104: LD_VAR 0 6
24108: PUSH
24109: FOR_IN
24110: IFFALSE 24181
// begin t := UnitsInside ( i ) ;
24112: LD_ADDR_VAR 0 4
24116: PUSH
24117: LD_VAR 0 3
24121: PPUSH
24122: CALL_OW 313
24126: ST_TO_ADDR
// if t then
24127: LD_VAR 0 4
24131: IFFALSE 24179
// for j in t do
24133: LD_ADDR_VAR 0 7
24137: PUSH
24138: LD_VAR 0 4
24142: PUSH
24143: FOR_IN
24144: IFFALSE 24177
// result := Replace ( result , result + 1 , j ) ;
24146: LD_ADDR_VAR 0 2
24150: PUSH
24151: LD_VAR 0 2
24155: PPUSH
24156: LD_VAR 0 2
24160: PUSH
24161: LD_INT 1
24163: PLUS
24164: PPUSH
24165: LD_VAR 0 7
24169: PPUSH
24170: CALL_OW 1
24174: ST_TO_ADDR
24175: GO 24143
24177: POP
24178: POP
// end ;
24179: GO 24109
24181: POP
24182: POP
// if not result then
24183: LD_VAR 0 2
24187: NOT
24188: IFFALSE 24192
// exit ;
24190: GO 24340
// mech := result [ 1 ] ;
24192: LD_ADDR_VAR 0 5
24196: PUSH
24197: LD_VAR 0 2
24201: PUSH
24202: LD_INT 1
24204: ARRAY
24205: ST_TO_ADDR
// if result > 1 then
24206: LD_VAR 0 2
24210: PUSH
24211: LD_INT 1
24213: GREATER
24214: IFFALSE 24326
// begin for i = 2 to result do
24216: LD_ADDR_VAR 0 3
24220: PUSH
24221: DOUBLE
24222: LD_INT 2
24224: DEC
24225: ST_TO_ADDR
24226: LD_VAR 0 2
24230: PUSH
24231: FOR_TO
24232: IFFALSE 24324
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24234: LD_ADDR_VAR 0 4
24238: PUSH
24239: LD_VAR 0 2
24243: PUSH
24244: LD_VAR 0 3
24248: ARRAY
24249: PPUSH
24250: LD_INT 3
24252: PPUSH
24253: CALL_OW 259
24257: PUSH
24258: LD_VAR 0 2
24262: PUSH
24263: LD_VAR 0 3
24267: ARRAY
24268: PPUSH
24269: CALL_OW 432
24273: MINUS
24274: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24275: LD_VAR 0 4
24279: PUSH
24280: LD_VAR 0 5
24284: PPUSH
24285: LD_INT 3
24287: PPUSH
24288: CALL_OW 259
24292: PUSH
24293: LD_VAR 0 5
24297: PPUSH
24298: CALL_OW 432
24302: MINUS
24303: GREATEREQUAL
24304: IFFALSE 24322
// mech := result [ i ] ;
24306: LD_ADDR_VAR 0 5
24310: PUSH
24311: LD_VAR 0 2
24315: PUSH
24316: LD_VAR 0 3
24320: ARRAY
24321: ST_TO_ADDR
// end ;
24322: GO 24231
24324: POP
24325: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24326: LD_VAR 0 1
24330: PPUSH
24331: LD_VAR 0 5
24335: PPUSH
24336: CALL_OW 135
// end ;
24340: LD_VAR 0 2
24344: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24345: LD_INT 0
24347: PPUSH
24348: PPUSH
24349: PPUSH
24350: PPUSH
24351: PPUSH
24352: PPUSH
24353: PPUSH
24354: PPUSH
24355: PPUSH
24356: PPUSH
24357: PPUSH
24358: PPUSH
24359: PPUSH
// result := [ ] ;
24360: LD_ADDR_VAR 0 7
24364: PUSH
24365: EMPTY
24366: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24367: LD_VAR 0 1
24371: PPUSH
24372: CALL_OW 266
24376: PUSH
24377: LD_INT 0
24379: PUSH
24380: LD_INT 1
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: IN
24387: NOT
24388: IFFALSE 24392
// exit ;
24390: GO 26026
// if name then
24392: LD_VAR 0 3
24396: IFFALSE 24412
// SetBName ( base_dep , name ) ;
24398: LD_VAR 0 1
24402: PPUSH
24403: LD_VAR 0 3
24407: PPUSH
24408: CALL_OW 500
// base := GetBase ( base_dep ) ;
24412: LD_ADDR_VAR 0 15
24416: PUSH
24417: LD_VAR 0 1
24421: PPUSH
24422: CALL_OW 274
24426: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24427: LD_ADDR_VAR 0 16
24431: PUSH
24432: LD_VAR 0 1
24436: PPUSH
24437: CALL_OW 255
24441: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
24442: LD_ADDR_VAR 0 17
24446: PUSH
24447: LD_VAR 0 1
24451: PPUSH
24452: CALL_OW 248
24456: ST_TO_ADDR
// if sources then
24457: LD_VAR 0 5
24461: IFFALSE 24508
// for i = 1 to 3 do
24463: LD_ADDR_VAR 0 8
24467: PUSH
24468: DOUBLE
24469: LD_INT 1
24471: DEC
24472: ST_TO_ADDR
24473: LD_INT 3
24475: PUSH
24476: FOR_TO
24477: IFFALSE 24506
// AddResourceType ( base , i , sources [ i ] ) ;
24479: LD_VAR 0 15
24483: PPUSH
24484: LD_VAR 0 8
24488: PPUSH
24489: LD_VAR 0 5
24493: PUSH
24494: LD_VAR 0 8
24498: ARRAY
24499: PPUSH
24500: CALL_OW 276
24504: GO 24476
24506: POP
24507: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
24508: LD_ADDR_VAR 0 18
24512: PUSH
24513: LD_VAR 0 15
24517: PPUSH
24518: LD_VAR 0 2
24522: PPUSH
24523: LD_INT 1
24525: PPUSH
24526: CALL 23769 0 3
24530: ST_TO_ADDR
// InitHc ;
24531: CALL_OW 19
// InitUc ;
24535: CALL_OW 18
// uc_side := side ;
24539: LD_ADDR_OWVAR 20
24543: PUSH
24544: LD_VAR 0 16
24548: ST_TO_ADDR
// uc_nation := nation ;
24549: LD_ADDR_OWVAR 21
24553: PUSH
24554: LD_VAR 0 17
24558: ST_TO_ADDR
// if buildings then
24559: LD_VAR 0 18
24563: IFFALSE 25885
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24565: LD_ADDR_VAR 0 19
24569: PUSH
24570: LD_VAR 0 18
24574: PPUSH
24575: LD_INT 2
24577: PUSH
24578: LD_INT 30
24580: PUSH
24581: LD_INT 29
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 30
24590: PUSH
24591: LD_INT 30
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: LIST
24602: PPUSH
24603: CALL_OW 72
24607: ST_TO_ADDR
// if tmp then
24608: LD_VAR 0 19
24612: IFFALSE 24660
// for i in tmp do
24614: LD_ADDR_VAR 0 8
24618: PUSH
24619: LD_VAR 0 19
24623: PUSH
24624: FOR_IN
24625: IFFALSE 24658
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24627: LD_VAR 0 8
24631: PPUSH
24632: CALL_OW 250
24636: PPUSH
24637: LD_VAR 0 8
24641: PPUSH
24642: CALL_OW 251
24646: PPUSH
24647: LD_VAR 0 16
24651: PPUSH
24652: CALL_OW 441
24656: GO 24624
24658: POP
24659: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24660: LD_VAR 0 18
24664: PPUSH
24665: LD_INT 2
24667: PUSH
24668: LD_INT 30
24670: PUSH
24671: LD_INT 32
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 30
24680: PUSH
24681: LD_INT 33
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: LIST
24692: PPUSH
24693: CALL_OW 72
24697: IFFALSE 24785
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24699: LD_ADDR_VAR 0 8
24703: PUSH
24704: LD_VAR 0 18
24708: PPUSH
24709: LD_INT 2
24711: PUSH
24712: LD_INT 30
24714: PUSH
24715: LD_INT 32
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: LD_INT 30
24724: PUSH
24725: LD_INT 33
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: LIST
24736: PPUSH
24737: CALL_OW 72
24741: PUSH
24742: FOR_IN
24743: IFFALSE 24783
// begin if not GetBWeapon ( i ) then
24745: LD_VAR 0 8
24749: PPUSH
24750: CALL_OW 269
24754: NOT
24755: IFFALSE 24781
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24757: LD_VAR 0 8
24761: PPUSH
24762: LD_VAR 0 8
24766: PPUSH
24767: LD_VAR 0 2
24771: PPUSH
24772: CALL 26031 0 2
24776: PPUSH
24777: CALL_OW 431
// end ;
24781: GO 24742
24783: POP
24784: POP
// end ; for i = 1 to personel do
24785: LD_ADDR_VAR 0 8
24789: PUSH
24790: DOUBLE
24791: LD_INT 1
24793: DEC
24794: ST_TO_ADDR
24795: LD_VAR 0 6
24799: PUSH
24800: FOR_TO
24801: IFFALSE 25865
// begin if i > 4 then
24803: LD_VAR 0 8
24807: PUSH
24808: LD_INT 4
24810: GREATER
24811: IFFALSE 24815
// break ;
24813: GO 25865
// case i of 1 :
24815: LD_VAR 0 8
24819: PUSH
24820: LD_INT 1
24822: DOUBLE
24823: EQUAL
24824: IFTRUE 24828
24826: GO 24908
24828: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24829: LD_ADDR_VAR 0 12
24833: PUSH
24834: LD_VAR 0 18
24838: PPUSH
24839: LD_INT 22
24841: PUSH
24842: LD_VAR 0 16
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: PUSH
24851: LD_INT 58
24853: PUSH
24854: EMPTY
24855: LIST
24856: PUSH
24857: LD_INT 2
24859: PUSH
24860: LD_INT 30
24862: PUSH
24863: LD_INT 32
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 30
24872: PUSH
24873: LD_INT 4
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 30
24882: PUSH
24883: LD_INT 5
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: LIST
24900: PPUSH
24901: CALL_OW 72
24905: ST_TO_ADDR
24906: GO 25130
24908: LD_INT 2
24910: DOUBLE
24911: EQUAL
24912: IFTRUE 24916
24914: GO 24978
24916: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24917: LD_ADDR_VAR 0 12
24921: PUSH
24922: LD_VAR 0 18
24926: PPUSH
24927: LD_INT 22
24929: PUSH
24930: LD_VAR 0 16
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 2
24941: PUSH
24942: LD_INT 30
24944: PUSH
24945: LD_INT 0
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 30
24954: PUSH
24955: LD_INT 1
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: LIST
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PPUSH
24971: CALL_OW 72
24975: ST_TO_ADDR
24976: GO 25130
24978: LD_INT 3
24980: DOUBLE
24981: EQUAL
24982: IFTRUE 24986
24984: GO 25048
24986: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24987: LD_ADDR_VAR 0 12
24991: PUSH
24992: LD_VAR 0 18
24996: PPUSH
24997: LD_INT 22
24999: PUSH
25000: LD_VAR 0 16
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 2
25011: PUSH
25012: LD_INT 30
25014: PUSH
25015: LD_INT 2
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 30
25024: PUSH
25025: LD_INT 3
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: LIST
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PPUSH
25041: CALL_OW 72
25045: ST_TO_ADDR
25046: GO 25130
25048: LD_INT 4
25050: DOUBLE
25051: EQUAL
25052: IFTRUE 25056
25054: GO 25129
25056: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25057: LD_ADDR_VAR 0 12
25061: PUSH
25062: LD_VAR 0 18
25066: PPUSH
25067: LD_INT 22
25069: PUSH
25070: LD_VAR 0 16
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 2
25081: PUSH
25082: LD_INT 30
25084: PUSH
25085: LD_INT 6
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 30
25094: PUSH
25095: LD_INT 7
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 30
25104: PUSH
25105: LD_INT 8
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PPUSH
25122: CALL_OW 72
25126: ST_TO_ADDR
25127: GO 25130
25129: POP
// if i = 1 then
25130: LD_VAR 0 8
25134: PUSH
25135: LD_INT 1
25137: EQUAL
25138: IFFALSE 25249
// begin tmp := [ ] ;
25140: LD_ADDR_VAR 0 19
25144: PUSH
25145: EMPTY
25146: ST_TO_ADDR
// for j in f do
25147: LD_ADDR_VAR 0 9
25151: PUSH
25152: LD_VAR 0 12
25156: PUSH
25157: FOR_IN
25158: IFFALSE 25231
// if GetBType ( j ) = b_bunker then
25160: LD_VAR 0 9
25164: PPUSH
25165: CALL_OW 266
25169: PUSH
25170: LD_INT 32
25172: EQUAL
25173: IFFALSE 25200
// tmp := Insert ( tmp , 1 , j ) else
25175: LD_ADDR_VAR 0 19
25179: PUSH
25180: LD_VAR 0 19
25184: PPUSH
25185: LD_INT 1
25187: PPUSH
25188: LD_VAR 0 9
25192: PPUSH
25193: CALL_OW 2
25197: ST_TO_ADDR
25198: GO 25229
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25200: LD_ADDR_VAR 0 19
25204: PUSH
25205: LD_VAR 0 19
25209: PPUSH
25210: LD_VAR 0 19
25214: PUSH
25215: LD_INT 1
25217: PLUS
25218: PPUSH
25219: LD_VAR 0 9
25223: PPUSH
25224: CALL_OW 2
25228: ST_TO_ADDR
25229: GO 25157
25231: POP
25232: POP
// if tmp then
25233: LD_VAR 0 19
25237: IFFALSE 25249
// f := tmp ;
25239: LD_ADDR_VAR 0 12
25243: PUSH
25244: LD_VAR 0 19
25248: ST_TO_ADDR
// end ; x := personel [ i ] ;
25249: LD_ADDR_VAR 0 13
25253: PUSH
25254: LD_VAR 0 6
25258: PUSH
25259: LD_VAR 0 8
25263: ARRAY
25264: ST_TO_ADDR
// if x = - 1 then
25265: LD_VAR 0 13
25269: PUSH
25270: LD_INT 1
25272: NEG
25273: EQUAL
25274: IFFALSE 25483
// begin for j in f do
25276: LD_ADDR_VAR 0 9
25280: PUSH
25281: LD_VAR 0 12
25285: PUSH
25286: FOR_IN
25287: IFFALSE 25479
// repeat InitHc ;
25289: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25293: LD_VAR 0 9
25297: PPUSH
25298: CALL_OW 266
25302: PUSH
25303: LD_INT 5
25305: EQUAL
25306: IFFALSE 25376
// begin if UnitsInside ( j ) < 3 then
25308: LD_VAR 0 9
25312: PPUSH
25313: CALL_OW 313
25317: PUSH
25318: LD_INT 3
25320: LESS
25321: IFFALSE 25357
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25323: LD_INT 0
25325: PPUSH
25326: LD_INT 5
25328: PUSH
25329: LD_INT 8
25331: PUSH
25332: LD_INT 9
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: LIST
25339: PUSH
25340: LD_VAR 0 17
25344: ARRAY
25345: PPUSH
25346: LD_VAR 0 4
25350: PPUSH
25351: CALL_OW 380
25355: GO 25374
// PrepareHuman ( false , i , skill ) ;
25357: LD_INT 0
25359: PPUSH
25360: LD_VAR 0 8
25364: PPUSH
25365: LD_VAR 0 4
25369: PPUSH
25370: CALL_OW 380
// end else
25374: GO 25393
// PrepareHuman ( false , i , skill ) ;
25376: LD_INT 0
25378: PPUSH
25379: LD_VAR 0 8
25383: PPUSH
25384: LD_VAR 0 4
25388: PPUSH
25389: CALL_OW 380
// un := CreateHuman ;
25393: LD_ADDR_VAR 0 14
25397: PUSH
25398: CALL_OW 44
25402: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25403: LD_ADDR_VAR 0 7
25407: PUSH
25408: LD_VAR 0 7
25412: PPUSH
25413: LD_INT 1
25415: PPUSH
25416: LD_VAR 0 14
25420: PPUSH
25421: CALL_OW 2
25425: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25426: LD_VAR 0 14
25430: PPUSH
25431: LD_VAR 0 9
25435: PPUSH
25436: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25440: LD_VAR 0 9
25444: PPUSH
25445: CALL_OW 313
25449: PUSH
25450: LD_INT 6
25452: EQUAL
25453: PUSH
25454: LD_VAR 0 9
25458: PPUSH
25459: CALL_OW 266
25463: PUSH
25464: LD_INT 32
25466: PUSH
25467: LD_INT 31
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: IN
25474: OR
25475: IFFALSE 25289
25477: GO 25286
25479: POP
25480: POP
// end else
25481: GO 25863
// for j = 1 to x do
25483: LD_ADDR_VAR 0 9
25487: PUSH
25488: DOUBLE
25489: LD_INT 1
25491: DEC
25492: ST_TO_ADDR
25493: LD_VAR 0 13
25497: PUSH
25498: FOR_TO
25499: IFFALSE 25861
// begin InitHc ;
25501: CALL_OW 19
// if not f then
25505: LD_VAR 0 12
25509: NOT
25510: IFFALSE 25599
// begin PrepareHuman ( false , i , skill ) ;
25512: LD_INT 0
25514: PPUSH
25515: LD_VAR 0 8
25519: PPUSH
25520: LD_VAR 0 4
25524: PPUSH
25525: CALL_OW 380
// un := CreateHuman ;
25529: LD_ADDR_VAR 0 14
25533: PUSH
25534: CALL_OW 44
25538: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25539: LD_ADDR_VAR 0 7
25543: PUSH
25544: LD_VAR 0 7
25548: PPUSH
25549: LD_INT 1
25551: PPUSH
25552: LD_VAR 0 14
25556: PPUSH
25557: CALL_OW 2
25561: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25562: LD_VAR 0 14
25566: PPUSH
25567: LD_VAR 0 1
25571: PPUSH
25572: CALL_OW 250
25576: PPUSH
25577: LD_VAR 0 1
25581: PPUSH
25582: CALL_OW 251
25586: PPUSH
25587: LD_INT 10
25589: PPUSH
25590: LD_INT 0
25592: PPUSH
25593: CALL_OW 50
// continue ;
25597: GO 25498
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25599: LD_VAR 0 12
25603: PUSH
25604: LD_INT 1
25606: ARRAY
25607: PPUSH
25608: CALL_OW 313
25612: PUSH
25613: LD_VAR 0 12
25617: PUSH
25618: LD_INT 1
25620: ARRAY
25621: PPUSH
25622: CALL_OW 266
25626: PUSH
25627: LD_INT 32
25629: PUSH
25630: LD_INT 31
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: IN
25637: AND
25638: PUSH
25639: LD_VAR 0 12
25643: PUSH
25644: LD_INT 1
25646: ARRAY
25647: PPUSH
25648: CALL_OW 313
25652: PUSH
25653: LD_INT 6
25655: EQUAL
25656: OR
25657: IFFALSE 25677
// f := Delete ( f , 1 ) ;
25659: LD_ADDR_VAR 0 12
25663: PUSH
25664: LD_VAR 0 12
25668: PPUSH
25669: LD_INT 1
25671: PPUSH
25672: CALL_OW 3
25676: ST_TO_ADDR
// if not f then
25677: LD_VAR 0 12
25681: NOT
25682: IFFALSE 25700
// begin x := x + 2 ;
25684: LD_ADDR_VAR 0 13
25688: PUSH
25689: LD_VAR 0 13
25693: PUSH
25694: LD_INT 2
25696: PLUS
25697: ST_TO_ADDR
// continue ;
25698: GO 25498
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25700: LD_VAR 0 12
25704: PUSH
25705: LD_INT 1
25707: ARRAY
25708: PPUSH
25709: CALL_OW 266
25713: PUSH
25714: LD_INT 5
25716: EQUAL
25717: IFFALSE 25791
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25719: LD_VAR 0 12
25723: PUSH
25724: LD_INT 1
25726: ARRAY
25727: PPUSH
25728: CALL_OW 313
25732: PUSH
25733: LD_INT 3
25735: LESS
25736: IFFALSE 25772
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25738: LD_INT 0
25740: PPUSH
25741: LD_INT 5
25743: PUSH
25744: LD_INT 8
25746: PUSH
25747: LD_INT 9
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: LIST
25754: PUSH
25755: LD_VAR 0 17
25759: ARRAY
25760: PPUSH
25761: LD_VAR 0 4
25765: PPUSH
25766: CALL_OW 380
25770: GO 25789
// PrepareHuman ( false , i , skill ) ;
25772: LD_INT 0
25774: PPUSH
25775: LD_VAR 0 8
25779: PPUSH
25780: LD_VAR 0 4
25784: PPUSH
25785: CALL_OW 380
// end else
25789: GO 25808
// PrepareHuman ( false , i , skill ) ;
25791: LD_INT 0
25793: PPUSH
25794: LD_VAR 0 8
25798: PPUSH
25799: LD_VAR 0 4
25803: PPUSH
25804: CALL_OW 380
// un := CreateHuman ;
25808: LD_ADDR_VAR 0 14
25812: PUSH
25813: CALL_OW 44
25817: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25818: LD_ADDR_VAR 0 7
25822: PUSH
25823: LD_VAR 0 7
25827: PPUSH
25828: LD_INT 1
25830: PPUSH
25831: LD_VAR 0 14
25835: PPUSH
25836: CALL_OW 2
25840: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25841: LD_VAR 0 14
25845: PPUSH
25846: LD_VAR 0 12
25850: PUSH
25851: LD_INT 1
25853: ARRAY
25854: PPUSH
25855: CALL_OW 52
// end ;
25859: GO 25498
25861: POP
25862: POP
// end ;
25863: GO 24800
25865: POP
25866: POP
// result := result ^ buildings ;
25867: LD_ADDR_VAR 0 7
25871: PUSH
25872: LD_VAR 0 7
25876: PUSH
25877: LD_VAR 0 18
25881: ADD
25882: ST_TO_ADDR
// end else
25883: GO 26026
// begin for i = 1 to personel do
25885: LD_ADDR_VAR 0 8
25889: PUSH
25890: DOUBLE
25891: LD_INT 1
25893: DEC
25894: ST_TO_ADDR
25895: LD_VAR 0 6
25899: PUSH
25900: FOR_TO
25901: IFFALSE 26024
// begin if i > 4 then
25903: LD_VAR 0 8
25907: PUSH
25908: LD_INT 4
25910: GREATER
25911: IFFALSE 25915
// break ;
25913: GO 26024
// x := personel [ i ] ;
25915: LD_ADDR_VAR 0 13
25919: PUSH
25920: LD_VAR 0 6
25924: PUSH
25925: LD_VAR 0 8
25929: ARRAY
25930: ST_TO_ADDR
// if x = - 1 then
25931: LD_VAR 0 13
25935: PUSH
25936: LD_INT 1
25938: NEG
25939: EQUAL
25940: IFFALSE 25944
// continue ;
25942: GO 25900
// PrepareHuman ( false , i , skill ) ;
25944: LD_INT 0
25946: PPUSH
25947: LD_VAR 0 8
25951: PPUSH
25952: LD_VAR 0 4
25956: PPUSH
25957: CALL_OW 380
// un := CreateHuman ;
25961: LD_ADDR_VAR 0 14
25965: PUSH
25966: CALL_OW 44
25970: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25971: LD_VAR 0 14
25975: PPUSH
25976: LD_VAR 0 1
25980: PPUSH
25981: CALL_OW 250
25985: PPUSH
25986: LD_VAR 0 1
25990: PPUSH
25991: CALL_OW 251
25995: PPUSH
25996: LD_INT 10
25998: PPUSH
25999: LD_INT 0
26001: PPUSH
26002: CALL_OW 50
// result := result ^ un ;
26006: LD_ADDR_VAR 0 7
26010: PUSH
26011: LD_VAR 0 7
26015: PUSH
26016: LD_VAR 0 14
26020: ADD
26021: ST_TO_ADDR
// end ;
26022: GO 25900
26024: POP
26025: POP
// end ; end ;
26026: LD_VAR 0 7
26030: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26031: LD_INT 0
26033: PPUSH
26034: PPUSH
26035: PPUSH
26036: PPUSH
26037: PPUSH
26038: PPUSH
26039: PPUSH
26040: PPUSH
26041: PPUSH
26042: PPUSH
26043: PPUSH
26044: PPUSH
26045: PPUSH
26046: PPUSH
26047: PPUSH
26048: PPUSH
// result := false ;
26049: LD_ADDR_VAR 0 3
26053: PUSH
26054: LD_INT 0
26056: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26057: LD_VAR 0 1
26061: NOT
26062: PUSH
26063: LD_VAR 0 1
26067: PPUSH
26068: CALL_OW 266
26072: PUSH
26073: LD_INT 32
26075: PUSH
26076: LD_INT 33
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: IN
26083: NOT
26084: OR
26085: IFFALSE 26089
// exit ;
26087: GO 27198
// nat := GetNation ( tower ) ;
26089: LD_ADDR_VAR 0 12
26093: PUSH
26094: LD_VAR 0 1
26098: PPUSH
26099: CALL_OW 248
26103: ST_TO_ADDR
// side := GetSide ( tower ) ;
26104: LD_ADDR_VAR 0 16
26108: PUSH
26109: LD_VAR 0 1
26113: PPUSH
26114: CALL_OW 255
26118: ST_TO_ADDR
// x := GetX ( tower ) ;
26119: LD_ADDR_VAR 0 10
26123: PUSH
26124: LD_VAR 0 1
26128: PPUSH
26129: CALL_OW 250
26133: ST_TO_ADDR
// y := GetY ( tower ) ;
26134: LD_ADDR_VAR 0 11
26138: PUSH
26139: LD_VAR 0 1
26143: PPUSH
26144: CALL_OW 251
26148: ST_TO_ADDR
// if not x or not y then
26149: LD_VAR 0 10
26153: NOT
26154: PUSH
26155: LD_VAR 0 11
26159: NOT
26160: OR
26161: IFFALSE 26165
// exit ;
26163: GO 27198
// weapon := 0 ;
26165: LD_ADDR_VAR 0 18
26169: PUSH
26170: LD_INT 0
26172: ST_TO_ADDR
// fac_list := [ ] ;
26173: LD_ADDR_VAR 0 17
26177: PUSH
26178: EMPTY
26179: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26180: LD_ADDR_VAR 0 6
26184: PUSH
26185: LD_VAR 0 1
26189: PPUSH
26190: CALL_OW 274
26194: PPUSH
26195: LD_VAR 0 2
26199: PPUSH
26200: LD_INT 0
26202: PPUSH
26203: CALL 23769 0 3
26207: PPUSH
26208: LD_INT 30
26210: PUSH
26211: LD_INT 3
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PPUSH
26218: CALL_OW 72
26222: ST_TO_ADDR
// if not factories then
26223: LD_VAR 0 6
26227: NOT
26228: IFFALSE 26232
// exit ;
26230: GO 27198
// for i in factories do
26232: LD_ADDR_VAR 0 8
26236: PUSH
26237: LD_VAR 0 6
26241: PUSH
26242: FOR_IN
26243: IFFALSE 26268
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26245: LD_ADDR_VAR 0 17
26249: PUSH
26250: LD_VAR 0 17
26254: PUSH
26255: LD_VAR 0 8
26259: PPUSH
26260: CALL_OW 478
26264: UNION
26265: ST_TO_ADDR
26266: GO 26242
26268: POP
26269: POP
// if not fac_list then
26270: LD_VAR 0 17
26274: NOT
26275: IFFALSE 26279
// exit ;
26277: GO 27198
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26279: LD_ADDR_VAR 0 5
26283: PUSH
26284: LD_INT 4
26286: PUSH
26287: LD_INT 5
26289: PUSH
26290: LD_INT 9
26292: PUSH
26293: LD_INT 10
26295: PUSH
26296: LD_INT 6
26298: PUSH
26299: LD_INT 7
26301: PUSH
26302: LD_INT 11
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: PUSH
26314: LD_INT 27
26316: PUSH
26317: LD_INT 28
26319: PUSH
26320: LD_INT 26
26322: PUSH
26323: LD_INT 30
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 43
26334: PUSH
26335: LD_INT 44
26337: PUSH
26338: LD_INT 46
26340: PUSH
26341: LD_INT 45
26343: PUSH
26344: LD_INT 47
26346: PUSH
26347: LD_INT 49
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: LIST
26362: PUSH
26363: LD_VAR 0 12
26367: ARRAY
26368: ST_TO_ADDR
// list := list isect fac_list ;
26369: LD_ADDR_VAR 0 5
26373: PUSH
26374: LD_VAR 0 5
26378: PUSH
26379: LD_VAR 0 17
26383: ISECT
26384: ST_TO_ADDR
// if not list then
26385: LD_VAR 0 5
26389: NOT
26390: IFFALSE 26394
// exit ;
26392: GO 27198
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26394: LD_VAR 0 12
26398: PUSH
26399: LD_INT 3
26401: EQUAL
26402: PUSH
26403: LD_INT 49
26405: PUSH
26406: LD_VAR 0 5
26410: IN
26411: AND
26412: PUSH
26413: LD_INT 31
26415: PPUSH
26416: LD_VAR 0 16
26420: PPUSH
26421: CALL_OW 321
26425: PUSH
26426: LD_INT 2
26428: EQUAL
26429: AND
26430: IFFALSE 26490
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26432: LD_INT 22
26434: PUSH
26435: LD_VAR 0 16
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 35
26446: PUSH
26447: LD_INT 49
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 91
26456: PUSH
26457: LD_VAR 0 1
26461: PUSH
26462: LD_INT 10
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: LIST
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: LIST
26474: PPUSH
26475: CALL_OW 69
26479: NOT
26480: IFFALSE 26490
// weapon := ru_time_lapser ;
26482: LD_ADDR_VAR 0 18
26486: PUSH
26487: LD_INT 49
26489: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26490: LD_VAR 0 12
26494: PUSH
26495: LD_INT 1
26497: PUSH
26498: LD_INT 2
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: IN
26505: PUSH
26506: LD_INT 11
26508: PUSH
26509: LD_VAR 0 5
26513: IN
26514: PUSH
26515: LD_INT 30
26517: PUSH
26518: LD_VAR 0 5
26522: IN
26523: OR
26524: AND
26525: PUSH
26526: LD_INT 6
26528: PPUSH
26529: LD_VAR 0 16
26533: PPUSH
26534: CALL_OW 321
26538: PUSH
26539: LD_INT 2
26541: EQUAL
26542: AND
26543: IFFALSE 26708
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26545: LD_INT 22
26547: PUSH
26548: LD_VAR 0 16
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: PUSH
26557: LD_INT 2
26559: PUSH
26560: LD_INT 35
26562: PUSH
26563: LD_INT 11
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 35
26572: PUSH
26573: LD_INT 30
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 91
26587: PUSH
26588: LD_VAR 0 1
26592: PUSH
26593: LD_INT 18
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: LIST
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: LIST
26605: PPUSH
26606: CALL_OW 69
26610: NOT
26611: PUSH
26612: LD_INT 22
26614: PUSH
26615: LD_VAR 0 16
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 2
26626: PUSH
26627: LD_INT 30
26629: PUSH
26630: LD_INT 32
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: LD_INT 30
26639: PUSH
26640: LD_INT 33
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: LIST
26651: PUSH
26652: LD_INT 91
26654: PUSH
26655: LD_VAR 0 1
26659: PUSH
26660: LD_INT 12
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: LIST
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: LIST
26672: PUSH
26673: EMPTY
26674: LIST
26675: PPUSH
26676: CALL_OW 69
26680: PUSH
26681: LD_INT 2
26683: GREATER
26684: AND
26685: IFFALSE 26708
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26687: LD_ADDR_VAR 0 18
26691: PUSH
26692: LD_INT 11
26694: PUSH
26695: LD_INT 30
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PUSH
26702: LD_VAR 0 12
26706: ARRAY
26707: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26708: LD_VAR 0 18
26712: NOT
26713: PUSH
26714: LD_INT 40
26716: PPUSH
26717: LD_VAR 0 16
26721: PPUSH
26722: CALL_OW 321
26726: PUSH
26727: LD_INT 2
26729: EQUAL
26730: AND
26731: PUSH
26732: LD_INT 7
26734: PUSH
26735: LD_VAR 0 5
26739: IN
26740: PUSH
26741: LD_INT 28
26743: PUSH
26744: LD_VAR 0 5
26748: IN
26749: OR
26750: PUSH
26751: LD_INT 45
26753: PUSH
26754: LD_VAR 0 5
26758: IN
26759: OR
26760: AND
26761: IFFALSE 27015
// begin hex := GetHexInfo ( x , y ) ;
26763: LD_ADDR_VAR 0 4
26767: PUSH
26768: LD_VAR 0 10
26772: PPUSH
26773: LD_VAR 0 11
26777: PPUSH
26778: CALL_OW 546
26782: ST_TO_ADDR
// if hex [ 1 ] then
26783: LD_VAR 0 4
26787: PUSH
26788: LD_INT 1
26790: ARRAY
26791: IFFALSE 26795
// exit ;
26793: GO 27198
// height := hex [ 2 ] ;
26795: LD_ADDR_VAR 0 15
26799: PUSH
26800: LD_VAR 0 4
26804: PUSH
26805: LD_INT 2
26807: ARRAY
26808: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26809: LD_ADDR_VAR 0 14
26813: PUSH
26814: LD_INT 0
26816: PUSH
26817: LD_INT 2
26819: PUSH
26820: LD_INT 3
26822: PUSH
26823: LD_INT 5
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: LIST
26830: LIST
26831: ST_TO_ADDR
// for i in tmp do
26832: LD_ADDR_VAR 0 8
26836: PUSH
26837: LD_VAR 0 14
26841: PUSH
26842: FOR_IN
26843: IFFALSE 27013
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26845: LD_ADDR_VAR 0 9
26849: PUSH
26850: LD_VAR 0 10
26854: PPUSH
26855: LD_VAR 0 8
26859: PPUSH
26860: LD_INT 5
26862: PPUSH
26863: CALL_OW 272
26867: PUSH
26868: LD_VAR 0 11
26872: PPUSH
26873: LD_VAR 0 8
26877: PPUSH
26878: LD_INT 5
26880: PPUSH
26881: CALL_OW 273
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26890: LD_VAR 0 9
26894: PUSH
26895: LD_INT 1
26897: ARRAY
26898: PPUSH
26899: LD_VAR 0 9
26903: PUSH
26904: LD_INT 2
26906: ARRAY
26907: PPUSH
26908: CALL_OW 488
26912: IFFALSE 27011
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26914: LD_ADDR_VAR 0 4
26918: PUSH
26919: LD_VAR 0 9
26923: PUSH
26924: LD_INT 1
26926: ARRAY
26927: PPUSH
26928: LD_VAR 0 9
26932: PUSH
26933: LD_INT 2
26935: ARRAY
26936: PPUSH
26937: CALL_OW 546
26941: ST_TO_ADDR
// if hex [ 1 ] then
26942: LD_VAR 0 4
26946: PUSH
26947: LD_INT 1
26949: ARRAY
26950: IFFALSE 26954
// continue ;
26952: GO 26842
// h := hex [ 2 ] ;
26954: LD_ADDR_VAR 0 13
26958: PUSH
26959: LD_VAR 0 4
26963: PUSH
26964: LD_INT 2
26966: ARRAY
26967: ST_TO_ADDR
// if h + 7 < height then
26968: LD_VAR 0 13
26972: PUSH
26973: LD_INT 7
26975: PLUS
26976: PUSH
26977: LD_VAR 0 15
26981: LESS
26982: IFFALSE 27011
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26984: LD_ADDR_VAR 0 18
26988: PUSH
26989: LD_INT 7
26991: PUSH
26992: LD_INT 28
26994: PUSH
26995: LD_INT 45
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: LIST
27002: PUSH
27003: LD_VAR 0 12
27007: ARRAY
27008: ST_TO_ADDR
// break ;
27009: GO 27013
// end ; end ; end ;
27011: GO 26842
27013: POP
27014: POP
// end ; if not weapon then
27015: LD_VAR 0 18
27019: NOT
27020: IFFALSE 27080
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27022: LD_ADDR_VAR 0 5
27026: PUSH
27027: LD_VAR 0 5
27031: PUSH
27032: LD_INT 11
27034: PUSH
27035: LD_INT 30
27037: PUSH
27038: LD_INT 49
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: LIST
27045: DIFF
27046: ST_TO_ADDR
// if not list then
27047: LD_VAR 0 5
27051: NOT
27052: IFFALSE 27056
// exit ;
27054: GO 27198
// weapon := list [ rand ( 1 , list ) ] ;
27056: LD_ADDR_VAR 0 18
27060: PUSH
27061: LD_VAR 0 5
27065: PUSH
27066: LD_INT 1
27068: PPUSH
27069: LD_VAR 0 5
27073: PPUSH
27074: CALL_OW 12
27078: ARRAY
27079: ST_TO_ADDR
// end ; if weapon then
27080: LD_VAR 0 18
27084: IFFALSE 27198
// begin tmp := CostOfWeapon ( weapon ) ;
27086: LD_ADDR_VAR 0 14
27090: PUSH
27091: LD_VAR 0 18
27095: PPUSH
27096: CALL_OW 451
27100: ST_TO_ADDR
// j := GetBase ( tower ) ;
27101: LD_ADDR_VAR 0 9
27105: PUSH
27106: LD_VAR 0 1
27110: PPUSH
27111: CALL_OW 274
27115: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27116: LD_VAR 0 9
27120: PPUSH
27121: LD_INT 1
27123: PPUSH
27124: CALL_OW 275
27128: PUSH
27129: LD_VAR 0 14
27133: PUSH
27134: LD_INT 1
27136: ARRAY
27137: GREATEREQUAL
27138: PUSH
27139: LD_VAR 0 9
27143: PPUSH
27144: LD_INT 2
27146: PPUSH
27147: CALL_OW 275
27151: PUSH
27152: LD_VAR 0 14
27156: PUSH
27157: LD_INT 2
27159: ARRAY
27160: GREATEREQUAL
27161: AND
27162: PUSH
27163: LD_VAR 0 9
27167: PPUSH
27168: LD_INT 3
27170: PPUSH
27171: CALL_OW 275
27175: PUSH
27176: LD_VAR 0 14
27180: PUSH
27181: LD_INT 3
27183: ARRAY
27184: GREATEREQUAL
27185: AND
27186: IFFALSE 27198
// result := weapon ;
27188: LD_ADDR_VAR 0 3
27192: PUSH
27193: LD_VAR 0 18
27197: ST_TO_ADDR
// end ; end ;
27198: LD_VAR 0 3
27202: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27203: LD_INT 0
27205: PPUSH
27206: PPUSH
// result := true ;
27207: LD_ADDR_VAR 0 3
27211: PUSH
27212: LD_INT 1
27214: ST_TO_ADDR
// if array1 = array2 then
27215: LD_VAR 0 1
27219: PUSH
27220: LD_VAR 0 2
27224: EQUAL
27225: IFFALSE 27285
// begin for i = 1 to array1 do
27227: LD_ADDR_VAR 0 4
27231: PUSH
27232: DOUBLE
27233: LD_INT 1
27235: DEC
27236: ST_TO_ADDR
27237: LD_VAR 0 1
27241: PUSH
27242: FOR_TO
27243: IFFALSE 27281
// if array1 [ i ] <> array2 [ i ] then
27245: LD_VAR 0 1
27249: PUSH
27250: LD_VAR 0 4
27254: ARRAY
27255: PUSH
27256: LD_VAR 0 2
27260: PUSH
27261: LD_VAR 0 4
27265: ARRAY
27266: NONEQUAL
27267: IFFALSE 27279
// begin result := false ;
27269: LD_ADDR_VAR 0 3
27273: PUSH
27274: LD_INT 0
27276: ST_TO_ADDR
// break ;
27277: GO 27281
// end ;
27279: GO 27242
27281: POP
27282: POP
// end else
27283: GO 27293
// result := false ;
27285: LD_ADDR_VAR 0 3
27289: PUSH
27290: LD_INT 0
27292: ST_TO_ADDR
// end ;
27293: LD_VAR 0 3
27297: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27298: LD_INT 0
27300: PPUSH
27301: PPUSH
// if not array1 or not array2 then
27302: LD_VAR 0 1
27306: NOT
27307: PUSH
27308: LD_VAR 0 2
27312: NOT
27313: OR
27314: IFFALSE 27318
// exit ;
27316: GO 27382
// result := true ;
27318: LD_ADDR_VAR 0 3
27322: PUSH
27323: LD_INT 1
27325: ST_TO_ADDR
// for i = 1 to array1 do
27326: LD_ADDR_VAR 0 4
27330: PUSH
27331: DOUBLE
27332: LD_INT 1
27334: DEC
27335: ST_TO_ADDR
27336: LD_VAR 0 1
27340: PUSH
27341: FOR_TO
27342: IFFALSE 27380
// if array1 [ i ] <> array2 [ i ] then
27344: LD_VAR 0 1
27348: PUSH
27349: LD_VAR 0 4
27353: ARRAY
27354: PUSH
27355: LD_VAR 0 2
27359: PUSH
27360: LD_VAR 0 4
27364: ARRAY
27365: NONEQUAL
27366: IFFALSE 27378
// begin result := false ;
27368: LD_ADDR_VAR 0 3
27372: PUSH
27373: LD_INT 0
27375: ST_TO_ADDR
// break ;
27376: GO 27380
// end ;
27378: GO 27341
27380: POP
27381: POP
// end ;
27382: LD_VAR 0 3
27386: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27387: LD_INT 0
27389: PPUSH
27390: PPUSH
27391: PPUSH
// pom := GetBase ( fac ) ;
27392: LD_ADDR_VAR 0 5
27396: PUSH
27397: LD_VAR 0 1
27401: PPUSH
27402: CALL_OW 274
27406: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27407: LD_ADDR_VAR 0 4
27411: PUSH
27412: LD_VAR 0 2
27416: PUSH
27417: LD_INT 1
27419: ARRAY
27420: PPUSH
27421: LD_VAR 0 2
27425: PUSH
27426: LD_INT 2
27428: ARRAY
27429: PPUSH
27430: LD_VAR 0 2
27434: PUSH
27435: LD_INT 3
27437: ARRAY
27438: PPUSH
27439: LD_VAR 0 2
27443: PUSH
27444: LD_INT 4
27446: ARRAY
27447: PPUSH
27448: CALL_OW 449
27452: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27453: LD_ADDR_VAR 0 3
27457: PUSH
27458: LD_VAR 0 5
27462: PPUSH
27463: LD_INT 1
27465: PPUSH
27466: CALL_OW 275
27470: PUSH
27471: LD_VAR 0 4
27475: PUSH
27476: LD_INT 1
27478: ARRAY
27479: GREATEREQUAL
27480: PUSH
27481: LD_VAR 0 5
27485: PPUSH
27486: LD_INT 2
27488: PPUSH
27489: CALL_OW 275
27493: PUSH
27494: LD_VAR 0 4
27498: PUSH
27499: LD_INT 2
27501: ARRAY
27502: GREATEREQUAL
27503: AND
27504: PUSH
27505: LD_VAR 0 5
27509: PPUSH
27510: LD_INT 3
27512: PPUSH
27513: CALL_OW 275
27517: PUSH
27518: LD_VAR 0 4
27522: PUSH
27523: LD_INT 3
27525: ARRAY
27526: GREATEREQUAL
27527: AND
27528: ST_TO_ADDR
// end ;
27529: LD_VAR 0 3
27533: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27534: LD_INT 0
27536: PPUSH
27537: PPUSH
27538: PPUSH
27539: PPUSH
// pom := GetBase ( building ) ;
27540: LD_ADDR_VAR 0 3
27544: PUSH
27545: LD_VAR 0 1
27549: PPUSH
27550: CALL_OW 274
27554: ST_TO_ADDR
// if not pom then
27555: LD_VAR 0 3
27559: NOT
27560: IFFALSE 27564
// exit ;
27562: GO 27734
// btype := GetBType ( building ) ;
27564: LD_ADDR_VAR 0 5
27568: PUSH
27569: LD_VAR 0 1
27573: PPUSH
27574: CALL_OW 266
27578: ST_TO_ADDR
// if btype = b_armoury then
27579: LD_VAR 0 5
27583: PUSH
27584: LD_INT 4
27586: EQUAL
27587: IFFALSE 27597
// btype := b_barracks ;
27589: LD_ADDR_VAR 0 5
27593: PUSH
27594: LD_INT 5
27596: ST_TO_ADDR
// if btype = b_depot then
27597: LD_VAR 0 5
27601: PUSH
27602: LD_INT 0
27604: EQUAL
27605: IFFALSE 27615
// btype := b_warehouse ;
27607: LD_ADDR_VAR 0 5
27611: PUSH
27612: LD_INT 1
27614: ST_TO_ADDR
// if btype = b_workshop then
27615: LD_VAR 0 5
27619: PUSH
27620: LD_INT 2
27622: EQUAL
27623: IFFALSE 27633
// btype := b_factory ;
27625: LD_ADDR_VAR 0 5
27629: PUSH
27630: LD_INT 3
27632: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27633: LD_ADDR_VAR 0 4
27637: PUSH
27638: LD_VAR 0 5
27642: PPUSH
27643: LD_VAR 0 1
27647: PPUSH
27648: CALL_OW 248
27652: PPUSH
27653: CALL_OW 450
27657: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27658: LD_ADDR_VAR 0 2
27662: PUSH
27663: LD_VAR 0 3
27667: PPUSH
27668: LD_INT 1
27670: PPUSH
27671: CALL_OW 275
27675: PUSH
27676: LD_VAR 0 4
27680: PUSH
27681: LD_INT 1
27683: ARRAY
27684: GREATEREQUAL
27685: PUSH
27686: LD_VAR 0 3
27690: PPUSH
27691: LD_INT 2
27693: PPUSH
27694: CALL_OW 275
27698: PUSH
27699: LD_VAR 0 4
27703: PUSH
27704: LD_INT 2
27706: ARRAY
27707: GREATEREQUAL
27708: AND
27709: PUSH
27710: LD_VAR 0 3
27714: PPUSH
27715: LD_INT 3
27717: PPUSH
27718: CALL_OW 275
27722: PUSH
27723: LD_VAR 0 4
27727: PUSH
27728: LD_INT 3
27730: ARRAY
27731: GREATEREQUAL
27732: AND
27733: ST_TO_ADDR
// end ;
27734: LD_VAR 0 2
27738: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27739: LD_INT 0
27741: PPUSH
27742: PPUSH
27743: PPUSH
// pom := GetBase ( building ) ;
27744: LD_ADDR_VAR 0 4
27748: PUSH
27749: LD_VAR 0 1
27753: PPUSH
27754: CALL_OW 274
27758: ST_TO_ADDR
// if not pom then
27759: LD_VAR 0 4
27763: NOT
27764: IFFALSE 27768
// exit ;
27766: GO 27869
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27768: LD_ADDR_VAR 0 5
27772: PUSH
27773: LD_VAR 0 2
27777: PPUSH
27778: LD_VAR 0 1
27782: PPUSH
27783: CALL_OW 248
27787: PPUSH
27788: CALL_OW 450
27792: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27793: LD_ADDR_VAR 0 3
27797: PUSH
27798: LD_VAR 0 4
27802: PPUSH
27803: LD_INT 1
27805: PPUSH
27806: CALL_OW 275
27810: PUSH
27811: LD_VAR 0 5
27815: PUSH
27816: LD_INT 1
27818: ARRAY
27819: GREATEREQUAL
27820: PUSH
27821: LD_VAR 0 4
27825: PPUSH
27826: LD_INT 2
27828: PPUSH
27829: CALL_OW 275
27833: PUSH
27834: LD_VAR 0 5
27838: PUSH
27839: LD_INT 2
27841: ARRAY
27842: GREATEREQUAL
27843: AND
27844: PUSH
27845: LD_VAR 0 4
27849: PPUSH
27850: LD_INT 3
27852: PPUSH
27853: CALL_OW 275
27857: PUSH
27858: LD_VAR 0 5
27862: PUSH
27863: LD_INT 3
27865: ARRAY
27866: GREATEREQUAL
27867: AND
27868: ST_TO_ADDR
// end ;
27869: LD_VAR 0 3
27873: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27874: LD_INT 0
27876: PPUSH
27877: PPUSH
27878: PPUSH
27879: PPUSH
27880: PPUSH
27881: PPUSH
27882: PPUSH
27883: PPUSH
27884: PPUSH
27885: PPUSH
27886: PPUSH
// result := false ;
27887: LD_ADDR_VAR 0 8
27891: PUSH
27892: LD_INT 0
27894: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27895: LD_VAR 0 5
27899: NOT
27900: PUSH
27901: LD_VAR 0 1
27905: NOT
27906: OR
27907: PUSH
27908: LD_VAR 0 2
27912: NOT
27913: OR
27914: PUSH
27915: LD_VAR 0 3
27919: NOT
27920: OR
27921: IFFALSE 27925
// exit ;
27923: GO 28739
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27925: LD_ADDR_VAR 0 14
27929: PUSH
27930: LD_VAR 0 1
27934: PPUSH
27935: LD_VAR 0 2
27939: PPUSH
27940: LD_VAR 0 3
27944: PPUSH
27945: LD_VAR 0 4
27949: PPUSH
27950: LD_VAR 0 5
27954: PUSH
27955: LD_INT 1
27957: ARRAY
27958: PPUSH
27959: CALL_OW 248
27963: PPUSH
27964: LD_INT 0
27966: PPUSH
27967: CALL 29992 0 6
27971: ST_TO_ADDR
// if not hexes then
27972: LD_VAR 0 14
27976: NOT
27977: IFFALSE 27981
// exit ;
27979: GO 28739
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27981: LD_ADDR_VAR 0 17
27985: PUSH
27986: LD_VAR 0 5
27990: PPUSH
27991: LD_INT 22
27993: PUSH
27994: LD_VAR 0 13
27998: PPUSH
27999: CALL_OW 255
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: LD_INT 2
28010: PUSH
28011: LD_INT 30
28013: PUSH
28014: LD_INT 0
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 30
28023: PUSH
28024: LD_INT 1
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: LIST
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PPUSH
28040: CALL_OW 72
28044: ST_TO_ADDR
// for i = 1 to hexes do
28045: LD_ADDR_VAR 0 9
28049: PUSH
28050: DOUBLE
28051: LD_INT 1
28053: DEC
28054: ST_TO_ADDR
28055: LD_VAR 0 14
28059: PUSH
28060: FOR_TO
28061: IFFALSE 28737
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28063: LD_ADDR_VAR 0 13
28067: PUSH
28068: LD_VAR 0 14
28072: PUSH
28073: LD_VAR 0 9
28077: ARRAY
28078: PUSH
28079: LD_INT 1
28081: ARRAY
28082: PPUSH
28083: LD_VAR 0 14
28087: PUSH
28088: LD_VAR 0 9
28092: ARRAY
28093: PUSH
28094: LD_INT 2
28096: ARRAY
28097: PPUSH
28098: CALL_OW 428
28102: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28103: LD_VAR 0 14
28107: PUSH
28108: LD_VAR 0 9
28112: ARRAY
28113: PUSH
28114: LD_INT 1
28116: ARRAY
28117: PPUSH
28118: LD_VAR 0 14
28122: PUSH
28123: LD_VAR 0 9
28127: ARRAY
28128: PUSH
28129: LD_INT 2
28131: ARRAY
28132: PPUSH
28133: CALL_OW 351
28137: PUSH
28138: LD_VAR 0 14
28142: PUSH
28143: LD_VAR 0 9
28147: ARRAY
28148: PUSH
28149: LD_INT 1
28151: ARRAY
28152: PPUSH
28153: LD_VAR 0 14
28157: PUSH
28158: LD_VAR 0 9
28162: ARRAY
28163: PUSH
28164: LD_INT 2
28166: ARRAY
28167: PPUSH
28168: CALL_OW 488
28172: NOT
28173: OR
28174: PUSH
28175: LD_VAR 0 13
28179: PPUSH
28180: CALL_OW 247
28184: PUSH
28185: LD_INT 3
28187: EQUAL
28188: OR
28189: IFFALSE 28195
// exit ;
28191: POP
28192: POP
28193: GO 28739
// if not tmp then
28195: LD_VAR 0 13
28199: NOT
28200: IFFALSE 28204
// continue ;
28202: GO 28060
// result := true ;
28204: LD_ADDR_VAR 0 8
28208: PUSH
28209: LD_INT 1
28211: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
28212: LD_VAR 0 6
28216: PUSH
28217: LD_VAR 0 13
28221: PPUSH
28222: CALL_OW 247
28226: PUSH
28227: LD_INT 2
28229: EQUAL
28230: AND
28231: PUSH
28232: LD_VAR 0 13
28236: PPUSH
28237: CALL_OW 263
28241: PUSH
28242: LD_INT 1
28244: EQUAL
28245: AND
28246: IFFALSE 28410
// begin if IsDrivenBy ( tmp ) then
28248: LD_VAR 0 13
28252: PPUSH
28253: CALL_OW 311
28257: IFFALSE 28261
// continue ;
28259: GO 28060
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28261: LD_VAR 0 6
28265: PPUSH
28266: LD_INT 3
28268: PUSH
28269: LD_INT 60
28271: PUSH
28272: EMPTY
28273: LIST
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 3
28281: PUSH
28282: LD_INT 55
28284: PUSH
28285: EMPTY
28286: LIST
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: PPUSH
28296: CALL_OW 72
28300: IFFALSE 28408
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28302: LD_ADDR_VAR 0 18
28306: PUSH
28307: LD_VAR 0 6
28311: PPUSH
28312: LD_INT 3
28314: PUSH
28315: LD_INT 60
28317: PUSH
28318: EMPTY
28319: LIST
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 3
28327: PUSH
28328: LD_INT 55
28330: PUSH
28331: EMPTY
28332: LIST
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: PPUSH
28342: CALL_OW 72
28346: PUSH
28347: LD_INT 1
28349: ARRAY
28350: ST_TO_ADDR
// if IsInUnit ( driver ) then
28351: LD_VAR 0 18
28355: PPUSH
28356: CALL_OW 310
28360: IFFALSE 28371
// ComExit ( driver ) ;
28362: LD_VAR 0 18
28366: PPUSH
28367: CALL 53784 0 1
// AddComEnterUnit ( driver , tmp ) ;
28371: LD_VAR 0 18
28375: PPUSH
28376: LD_VAR 0 13
28380: PPUSH
28381: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28385: LD_VAR 0 18
28389: PPUSH
28390: LD_VAR 0 7
28394: PPUSH
28395: CALL_OW 173
// AddComExitVehicle ( driver ) ;
28399: LD_VAR 0 18
28403: PPUSH
28404: CALL_OW 181
// end ; continue ;
28408: GO 28060
// end ; if not cleaners or not tmp in cleaners then
28410: LD_VAR 0 6
28414: NOT
28415: PUSH
28416: LD_VAR 0 13
28420: PUSH
28421: LD_VAR 0 6
28425: IN
28426: NOT
28427: OR
28428: IFFALSE 28735
// begin if dep then
28430: LD_VAR 0 17
28434: IFFALSE 28570
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28436: LD_ADDR_VAR 0 16
28440: PUSH
28441: LD_VAR 0 17
28445: PUSH
28446: LD_INT 1
28448: ARRAY
28449: PPUSH
28450: CALL_OW 250
28454: PPUSH
28455: LD_VAR 0 17
28459: PUSH
28460: LD_INT 1
28462: ARRAY
28463: PPUSH
28464: CALL_OW 254
28468: PPUSH
28469: LD_INT 5
28471: PPUSH
28472: CALL_OW 272
28476: PUSH
28477: LD_VAR 0 17
28481: PUSH
28482: LD_INT 1
28484: ARRAY
28485: PPUSH
28486: CALL_OW 251
28490: PPUSH
28491: LD_VAR 0 17
28495: PUSH
28496: LD_INT 1
28498: ARRAY
28499: PPUSH
28500: CALL_OW 254
28504: PPUSH
28505: LD_INT 5
28507: PPUSH
28508: CALL_OW 273
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28517: LD_VAR 0 16
28521: PUSH
28522: LD_INT 1
28524: ARRAY
28525: PPUSH
28526: LD_VAR 0 16
28530: PUSH
28531: LD_INT 2
28533: ARRAY
28534: PPUSH
28535: CALL_OW 488
28539: IFFALSE 28570
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28541: LD_VAR 0 13
28545: PPUSH
28546: LD_VAR 0 16
28550: PUSH
28551: LD_INT 1
28553: ARRAY
28554: PPUSH
28555: LD_VAR 0 16
28559: PUSH
28560: LD_INT 2
28562: ARRAY
28563: PPUSH
28564: CALL_OW 111
// continue ;
28568: GO 28060
// end ; end ; r := GetDir ( tmp ) ;
28570: LD_ADDR_VAR 0 15
28574: PUSH
28575: LD_VAR 0 13
28579: PPUSH
28580: CALL_OW 254
28584: ST_TO_ADDR
// if r = 5 then
28585: LD_VAR 0 15
28589: PUSH
28590: LD_INT 5
28592: EQUAL
28593: IFFALSE 28603
// r := 0 ;
28595: LD_ADDR_VAR 0 15
28599: PUSH
28600: LD_INT 0
28602: ST_TO_ADDR
// for j = r to 5 do
28603: LD_ADDR_VAR 0 10
28607: PUSH
28608: DOUBLE
28609: LD_VAR 0 15
28613: DEC
28614: ST_TO_ADDR
28615: LD_INT 5
28617: PUSH
28618: FOR_TO
28619: IFFALSE 28733
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28621: LD_ADDR_VAR 0 11
28625: PUSH
28626: LD_VAR 0 13
28630: PPUSH
28631: CALL_OW 250
28635: PPUSH
28636: LD_VAR 0 10
28640: PPUSH
28641: LD_INT 2
28643: PPUSH
28644: CALL_OW 272
28648: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28649: LD_ADDR_VAR 0 12
28653: PUSH
28654: LD_VAR 0 13
28658: PPUSH
28659: CALL_OW 251
28663: PPUSH
28664: LD_VAR 0 10
28668: PPUSH
28669: LD_INT 2
28671: PPUSH
28672: CALL_OW 273
28676: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28677: LD_VAR 0 11
28681: PPUSH
28682: LD_VAR 0 12
28686: PPUSH
28687: CALL_OW 488
28691: PUSH
28692: LD_VAR 0 11
28696: PPUSH
28697: LD_VAR 0 12
28701: PPUSH
28702: CALL_OW 428
28706: NOT
28707: AND
28708: IFFALSE 28731
// begin ComMoveXY ( tmp , _x , _y ) ;
28710: LD_VAR 0 13
28714: PPUSH
28715: LD_VAR 0 11
28719: PPUSH
28720: LD_VAR 0 12
28724: PPUSH
28725: CALL_OW 111
// break ;
28729: GO 28733
// end ; end ;
28731: GO 28618
28733: POP
28734: POP
// end ; end ;
28735: GO 28060
28737: POP
28738: POP
// end ;
28739: LD_VAR 0 8
28743: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28744: LD_INT 0
28746: PPUSH
// result := true ;
28747: LD_ADDR_VAR 0 3
28751: PUSH
28752: LD_INT 1
28754: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28755: LD_VAR 0 2
28759: PUSH
28760: LD_INT 24
28762: DOUBLE
28763: EQUAL
28764: IFTRUE 28774
28766: LD_INT 33
28768: DOUBLE
28769: EQUAL
28770: IFTRUE 28774
28772: GO 28799
28774: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28775: LD_ADDR_VAR 0 3
28779: PUSH
28780: LD_INT 32
28782: PPUSH
28783: LD_VAR 0 1
28787: PPUSH
28788: CALL_OW 321
28792: PUSH
28793: LD_INT 2
28795: EQUAL
28796: ST_TO_ADDR
28797: GO 29115
28799: LD_INT 20
28801: DOUBLE
28802: EQUAL
28803: IFTRUE 28807
28805: GO 28832
28807: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28808: LD_ADDR_VAR 0 3
28812: PUSH
28813: LD_INT 6
28815: PPUSH
28816: LD_VAR 0 1
28820: PPUSH
28821: CALL_OW 321
28825: PUSH
28826: LD_INT 2
28828: EQUAL
28829: ST_TO_ADDR
28830: GO 29115
28832: LD_INT 22
28834: DOUBLE
28835: EQUAL
28836: IFTRUE 28846
28838: LD_INT 36
28840: DOUBLE
28841: EQUAL
28842: IFTRUE 28846
28844: GO 28871
28846: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28847: LD_ADDR_VAR 0 3
28851: PUSH
28852: LD_INT 15
28854: PPUSH
28855: LD_VAR 0 1
28859: PPUSH
28860: CALL_OW 321
28864: PUSH
28865: LD_INT 2
28867: EQUAL
28868: ST_TO_ADDR
28869: GO 29115
28871: LD_INT 30
28873: DOUBLE
28874: EQUAL
28875: IFTRUE 28879
28877: GO 28904
28879: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28880: LD_ADDR_VAR 0 3
28884: PUSH
28885: LD_INT 20
28887: PPUSH
28888: LD_VAR 0 1
28892: PPUSH
28893: CALL_OW 321
28897: PUSH
28898: LD_INT 2
28900: EQUAL
28901: ST_TO_ADDR
28902: GO 29115
28904: LD_INT 28
28906: DOUBLE
28907: EQUAL
28908: IFTRUE 28918
28910: LD_INT 21
28912: DOUBLE
28913: EQUAL
28914: IFTRUE 28918
28916: GO 28943
28918: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28919: LD_ADDR_VAR 0 3
28923: PUSH
28924: LD_INT 21
28926: PPUSH
28927: LD_VAR 0 1
28931: PPUSH
28932: CALL_OW 321
28936: PUSH
28937: LD_INT 2
28939: EQUAL
28940: ST_TO_ADDR
28941: GO 29115
28943: LD_INT 16
28945: DOUBLE
28946: EQUAL
28947: IFTRUE 28951
28949: GO 28976
28951: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28952: LD_ADDR_VAR 0 3
28956: PUSH
28957: LD_INT 84
28959: PPUSH
28960: LD_VAR 0 1
28964: PPUSH
28965: CALL_OW 321
28969: PUSH
28970: LD_INT 2
28972: EQUAL
28973: ST_TO_ADDR
28974: GO 29115
28976: LD_INT 19
28978: DOUBLE
28979: EQUAL
28980: IFTRUE 28990
28982: LD_INT 23
28984: DOUBLE
28985: EQUAL
28986: IFTRUE 28990
28988: GO 29015
28990: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28991: LD_ADDR_VAR 0 3
28995: PUSH
28996: LD_INT 83
28998: PPUSH
28999: LD_VAR 0 1
29003: PPUSH
29004: CALL_OW 321
29008: PUSH
29009: LD_INT 2
29011: EQUAL
29012: ST_TO_ADDR
29013: GO 29115
29015: LD_INT 17
29017: DOUBLE
29018: EQUAL
29019: IFTRUE 29023
29021: GO 29048
29023: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29024: LD_ADDR_VAR 0 3
29028: PUSH
29029: LD_INT 39
29031: PPUSH
29032: LD_VAR 0 1
29036: PPUSH
29037: CALL_OW 321
29041: PUSH
29042: LD_INT 2
29044: EQUAL
29045: ST_TO_ADDR
29046: GO 29115
29048: LD_INT 18
29050: DOUBLE
29051: EQUAL
29052: IFTRUE 29056
29054: GO 29081
29056: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29057: LD_ADDR_VAR 0 3
29061: PUSH
29062: LD_INT 40
29064: PPUSH
29065: LD_VAR 0 1
29069: PPUSH
29070: CALL_OW 321
29074: PUSH
29075: LD_INT 2
29077: EQUAL
29078: ST_TO_ADDR
29079: GO 29115
29081: LD_INT 27
29083: DOUBLE
29084: EQUAL
29085: IFTRUE 29089
29087: GO 29114
29089: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29090: LD_ADDR_VAR 0 3
29094: PUSH
29095: LD_INT 35
29097: PPUSH
29098: LD_VAR 0 1
29102: PPUSH
29103: CALL_OW 321
29107: PUSH
29108: LD_INT 2
29110: EQUAL
29111: ST_TO_ADDR
29112: GO 29115
29114: POP
// end ;
29115: LD_VAR 0 3
29119: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29120: LD_INT 0
29122: PPUSH
29123: PPUSH
29124: PPUSH
29125: PPUSH
29126: PPUSH
29127: PPUSH
29128: PPUSH
29129: PPUSH
29130: PPUSH
29131: PPUSH
29132: PPUSH
// result := false ;
29133: LD_ADDR_VAR 0 6
29137: PUSH
29138: LD_INT 0
29140: ST_TO_ADDR
// if btype = b_depot then
29141: LD_VAR 0 2
29145: PUSH
29146: LD_INT 0
29148: EQUAL
29149: IFFALSE 29161
// begin result := true ;
29151: LD_ADDR_VAR 0 6
29155: PUSH
29156: LD_INT 1
29158: ST_TO_ADDR
// exit ;
29159: GO 29987
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29161: LD_VAR 0 1
29165: NOT
29166: PUSH
29167: LD_VAR 0 1
29171: PPUSH
29172: CALL_OW 266
29176: PUSH
29177: LD_INT 0
29179: PUSH
29180: LD_INT 1
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: IN
29187: NOT
29188: OR
29189: PUSH
29190: LD_VAR 0 2
29194: NOT
29195: OR
29196: PUSH
29197: LD_VAR 0 5
29201: PUSH
29202: LD_INT 0
29204: PUSH
29205: LD_INT 1
29207: PUSH
29208: LD_INT 2
29210: PUSH
29211: LD_INT 3
29213: PUSH
29214: LD_INT 4
29216: PUSH
29217: LD_INT 5
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: IN
29228: NOT
29229: OR
29230: PUSH
29231: LD_VAR 0 3
29235: PPUSH
29236: LD_VAR 0 4
29240: PPUSH
29241: CALL_OW 488
29245: NOT
29246: OR
29247: IFFALSE 29251
// exit ;
29249: GO 29987
// side := GetSide ( depot ) ;
29251: LD_ADDR_VAR 0 9
29255: PUSH
29256: LD_VAR 0 1
29260: PPUSH
29261: CALL_OW 255
29265: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29266: LD_VAR 0 9
29270: PPUSH
29271: LD_VAR 0 2
29275: PPUSH
29276: CALL 28744 0 2
29280: NOT
29281: IFFALSE 29285
// exit ;
29283: GO 29987
// pom := GetBase ( depot ) ;
29285: LD_ADDR_VAR 0 10
29289: PUSH
29290: LD_VAR 0 1
29294: PPUSH
29295: CALL_OW 274
29299: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29300: LD_ADDR_VAR 0 11
29304: PUSH
29305: LD_VAR 0 2
29309: PPUSH
29310: LD_VAR 0 1
29314: PPUSH
29315: CALL_OW 248
29319: PPUSH
29320: CALL_OW 450
29324: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29325: LD_VAR 0 10
29329: PPUSH
29330: LD_INT 1
29332: PPUSH
29333: CALL_OW 275
29337: PUSH
29338: LD_VAR 0 11
29342: PUSH
29343: LD_INT 1
29345: ARRAY
29346: GREATEREQUAL
29347: PUSH
29348: LD_VAR 0 10
29352: PPUSH
29353: LD_INT 2
29355: PPUSH
29356: CALL_OW 275
29360: PUSH
29361: LD_VAR 0 11
29365: PUSH
29366: LD_INT 2
29368: ARRAY
29369: GREATEREQUAL
29370: AND
29371: PUSH
29372: LD_VAR 0 10
29376: PPUSH
29377: LD_INT 3
29379: PPUSH
29380: CALL_OW 275
29384: PUSH
29385: LD_VAR 0 11
29389: PUSH
29390: LD_INT 3
29392: ARRAY
29393: GREATEREQUAL
29394: AND
29395: NOT
29396: IFFALSE 29400
// exit ;
29398: GO 29987
// if GetBType ( depot ) = b_depot then
29400: LD_VAR 0 1
29404: PPUSH
29405: CALL_OW 266
29409: PUSH
29410: LD_INT 0
29412: EQUAL
29413: IFFALSE 29425
// dist := 28 else
29415: LD_ADDR_VAR 0 14
29419: PUSH
29420: LD_INT 28
29422: ST_TO_ADDR
29423: GO 29433
// dist := 36 ;
29425: LD_ADDR_VAR 0 14
29429: PUSH
29430: LD_INT 36
29432: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29433: LD_VAR 0 1
29437: PPUSH
29438: LD_VAR 0 3
29442: PPUSH
29443: LD_VAR 0 4
29447: PPUSH
29448: CALL_OW 297
29452: PUSH
29453: LD_VAR 0 14
29457: GREATER
29458: IFFALSE 29462
// exit ;
29460: GO 29987
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
29462: LD_ADDR_VAR 0 12
29466: PUSH
29467: LD_VAR 0 2
29471: PPUSH
29472: LD_VAR 0 3
29476: PPUSH
29477: LD_VAR 0 4
29481: PPUSH
29482: LD_VAR 0 5
29486: PPUSH
29487: LD_VAR 0 1
29491: PPUSH
29492: CALL_OW 248
29496: PPUSH
29497: LD_INT 0
29499: PPUSH
29500: CALL 29992 0 6
29504: ST_TO_ADDR
// if not hexes then
29505: LD_VAR 0 12
29509: NOT
29510: IFFALSE 29514
// exit ;
29512: GO 29987
// hex := GetHexInfo ( x , y ) ;
29514: LD_ADDR_VAR 0 15
29518: PUSH
29519: LD_VAR 0 3
29523: PPUSH
29524: LD_VAR 0 4
29528: PPUSH
29529: CALL_OW 546
29533: ST_TO_ADDR
// if hex [ 1 ] then
29534: LD_VAR 0 15
29538: PUSH
29539: LD_INT 1
29541: ARRAY
29542: IFFALSE 29546
// exit ;
29544: GO 29987
// height := hex [ 2 ] ;
29546: LD_ADDR_VAR 0 13
29550: PUSH
29551: LD_VAR 0 15
29555: PUSH
29556: LD_INT 2
29558: ARRAY
29559: ST_TO_ADDR
// for i = 1 to hexes do
29560: LD_ADDR_VAR 0 7
29564: PUSH
29565: DOUBLE
29566: LD_INT 1
29568: DEC
29569: ST_TO_ADDR
29570: LD_VAR 0 12
29574: PUSH
29575: FOR_TO
29576: IFFALSE 29906
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29578: LD_VAR 0 12
29582: PUSH
29583: LD_VAR 0 7
29587: ARRAY
29588: PUSH
29589: LD_INT 1
29591: ARRAY
29592: PPUSH
29593: LD_VAR 0 12
29597: PUSH
29598: LD_VAR 0 7
29602: ARRAY
29603: PUSH
29604: LD_INT 2
29606: ARRAY
29607: PPUSH
29608: CALL_OW 488
29612: NOT
29613: PUSH
29614: LD_VAR 0 12
29618: PUSH
29619: LD_VAR 0 7
29623: ARRAY
29624: PUSH
29625: LD_INT 1
29627: ARRAY
29628: PPUSH
29629: LD_VAR 0 12
29633: PUSH
29634: LD_VAR 0 7
29638: ARRAY
29639: PUSH
29640: LD_INT 2
29642: ARRAY
29643: PPUSH
29644: CALL_OW 428
29648: PUSH
29649: LD_INT 0
29651: GREATER
29652: OR
29653: PUSH
29654: LD_VAR 0 12
29658: PUSH
29659: LD_VAR 0 7
29663: ARRAY
29664: PUSH
29665: LD_INT 1
29667: ARRAY
29668: PPUSH
29669: LD_VAR 0 12
29673: PUSH
29674: LD_VAR 0 7
29678: ARRAY
29679: PUSH
29680: LD_INT 2
29682: ARRAY
29683: PPUSH
29684: CALL_OW 351
29688: OR
29689: IFFALSE 29695
// exit ;
29691: POP
29692: POP
29693: GO 29987
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29695: LD_ADDR_VAR 0 8
29699: PUSH
29700: LD_VAR 0 12
29704: PUSH
29705: LD_VAR 0 7
29709: ARRAY
29710: PUSH
29711: LD_INT 1
29713: ARRAY
29714: PPUSH
29715: LD_VAR 0 12
29719: PUSH
29720: LD_VAR 0 7
29724: ARRAY
29725: PUSH
29726: LD_INT 2
29728: ARRAY
29729: PPUSH
29730: CALL_OW 546
29734: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29735: LD_VAR 0 8
29739: PUSH
29740: LD_INT 1
29742: ARRAY
29743: PUSH
29744: LD_VAR 0 8
29748: PUSH
29749: LD_INT 2
29751: ARRAY
29752: PUSH
29753: LD_VAR 0 13
29757: PUSH
29758: LD_INT 2
29760: PLUS
29761: GREATER
29762: OR
29763: PUSH
29764: LD_VAR 0 8
29768: PUSH
29769: LD_INT 2
29771: ARRAY
29772: PUSH
29773: LD_VAR 0 13
29777: PUSH
29778: LD_INT 2
29780: MINUS
29781: LESS
29782: OR
29783: PUSH
29784: LD_VAR 0 8
29788: PUSH
29789: LD_INT 3
29791: ARRAY
29792: PUSH
29793: LD_INT 0
29795: PUSH
29796: LD_INT 8
29798: PUSH
29799: LD_INT 9
29801: PUSH
29802: LD_INT 10
29804: PUSH
29805: LD_INT 11
29807: PUSH
29808: LD_INT 12
29810: PUSH
29811: LD_INT 13
29813: PUSH
29814: LD_INT 16
29816: PUSH
29817: LD_INT 17
29819: PUSH
29820: LD_INT 18
29822: PUSH
29823: LD_INT 19
29825: PUSH
29826: LD_INT 20
29828: PUSH
29829: LD_INT 21
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: IN
29847: NOT
29848: OR
29849: PUSH
29850: LD_VAR 0 8
29854: PUSH
29855: LD_INT 5
29857: ARRAY
29858: NOT
29859: OR
29860: PUSH
29861: LD_VAR 0 8
29865: PUSH
29866: LD_INT 6
29868: ARRAY
29869: PUSH
29870: LD_INT 1
29872: PUSH
29873: LD_INT 2
29875: PUSH
29876: LD_INT 7
29878: PUSH
29879: LD_INT 9
29881: PUSH
29882: LD_INT 10
29884: PUSH
29885: LD_INT 11
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: IN
29896: NOT
29897: OR
29898: IFFALSE 29904
// exit ;
29900: POP
29901: POP
29902: GO 29987
// end ;
29904: GO 29575
29906: POP
29907: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29908: LD_VAR 0 9
29912: PPUSH
29913: LD_VAR 0 3
29917: PPUSH
29918: LD_VAR 0 4
29922: PPUSH
29923: LD_INT 20
29925: PPUSH
29926: CALL 21910 0 4
29930: PUSH
29931: LD_INT 4
29933: ARRAY
29934: IFFALSE 29938
// exit ;
29936: GO 29987
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29938: LD_VAR 0 2
29942: PUSH
29943: LD_INT 29
29945: PUSH
29946: LD_INT 30
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: IN
29953: PUSH
29954: LD_VAR 0 3
29958: PPUSH
29959: LD_VAR 0 4
29963: PPUSH
29964: LD_VAR 0 9
29968: PPUSH
29969: CALL_OW 440
29973: NOT
29974: AND
29975: IFFALSE 29979
// exit ;
29977: GO 29987
// result := true ;
29979: LD_ADDR_VAR 0 6
29983: PUSH
29984: LD_INT 1
29986: ST_TO_ADDR
// end ;
29987: LD_VAR 0 6
29991: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29992: LD_INT 0
29994: PPUSH
29995: PPUSH
29996: PPUSH
29997: PPUSH
29998: PPUSH
29999: PPUSH
30000: PPUSH
30001: PPUSH
30002: PPUSH
30003: PPUSH
30004: PPUSH
30005: PPUSH
30006: PPUSH
30007: PPUSH
30008: PPUSH
30009: PPUSH
30010: PPUSH
30011: PPUSH
30012: PPUSH
30013: PPUSH
30014: PPUSH
30015: PPUSH
30016: PPUSH
30017: PPUSH
30018: PPUSH
30019: PPUSH
30020: PPUSH
30021: PPUSH
30022: PPUSH
30023: PPUSH
30024: PPUSH
30025: PPUSH
30026: PPUSH
30027: PPUSH
30028: PPUSH
30029: PPUSH
30030: PPUSH
30031: PPUSH
30032: PPUSH
30033: PPUSH
30034: PPUSH
30035: PPUSH
30036: PPUSH
30037: PPUSH
30038: PPUSH
30039: PPUSH
30040: PPUSH
30041: PPUSH
30042: PPUSH
30043: PPUSH
30044: PPUSH
30045: PPUSH
30046: PPUSH
30047: PPUSH
30048: PPUSH
30049: PPUSH
30050: PPUSH
30051: PPUSH
// result = [ ] ;
30052: LD_ADDR_VAR 0 7
30056: PUSH
30057: EMPTY
30058: ST_TO_ADDR
// temp_list = [ ] ;
30059: LD_ADDR_VAR 0 9
30063: PUSH
30064: EMPTY
30065: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30066: LD_VAR 0 4
30070: PUSH
30071: LD_INT 0
30073: PUSH
30074: LD_INT 1
30076: PUSH
30077: LD_INT 2
30079: PUSH
30080: LD_INT 3
30082: PUSH
30083: LD_INT 4
30085: PUSH
30086: LD_INT 5
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: IN
30097: NOT
30098: PUSH
30099: LD_VAR 0 1
30103: PUSH
30104: LD_INT 0
30106: PUSH
30107: LD_INT 1
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: IN
30114: PUSH
30115: LD_VAR 0 5
30119: PUSH
30120: LD_INT 1
30122: PUSH
30123: LD_INT 2
30125: PUSH
30126: LD_INT 3
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: LIST
30133: IN
30134: NOT
30135: AND
30136: OR
30137: IFFALSE 30141
// exit ;
30139: GO 48532
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30141: LD_VAR 0 1
30145: PUSH
30146: LD_INT 6
30148: PUSH
30149: LD_INT 7
30151: PUSH
30152: LD_INT 8
30154: PUSH
30155: LD_INT 13
30157: PUSH
30158: LD_INT 12
30160: PUSH
30161: LD_INT 15
30163: PUSH
30164: LD_INT 11
30166: PUSH
30167: LD_INT 14
30169: PUSH
30170: LD_INT 10
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: IN
30184: IFFALSE 30194
// btype = b_lab ;
30186: LD_ADDR_VAR 0 1
30190: PUSH
30191: LD_INT 6
30193: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30194: LD_VAR 0 6
30198: PUSH
30199: LD_INT 0
30201: PUSH
30202: LD_INT 1
30204: PUSH
30205: LD_INT 2
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: LIST
30212: IN
30213: NOT
30214: PUSH
30215: LD_VAR 0 1
30219: PUSH
30220: LD_INT 0
30222: PUSH
30223: LD_INT 1
30225: PUSH
30226: LD_INT 2
30228: PUSH
30229: LD_INT 3
30231: PUSH
30232: LD_INT 6
30234: PUSH
30235: LD_INT 36
30237: PUSH
30238: LD_INT 4
30240: PUSH
30241: LD_INT 5
30243: PUSH
30244: LD_INT 31
30246: PUSH
30247: LD_INT 32
30249: PUSH
30250: LD_INT 33
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: IN
30266: NOT
30267: PUSH
30268: LD_VAR 0 6
30272: PUSH
30273: LD_INT 1
30275: EQUAL
30276: AND
30277: OR
30278: PUSH
30279: LD_VAR 0 1
30283: PUSH
30284: LD_INT 2
30286: PUSH
30287: LD_INT 3
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: IN
30294: NOT
30295: PUSH
30296: LD_VAR 0 6
30300: PUSH
30301: LD_INT 2
30303: EQUAL
30304: AND
30305: OR
30306: IFFALSE 30316
// mode = 0 ;
30308: LD_ADDR_VAR 0 6
30312: PUSH
30313: LD_INT 0
30315: ST_TO_ADDR
// case mode of 0 :
30316: LD_VAR 0 6
30320: PUSH
30321: LD_INT 0
30323: DOUBLE
30324: EQUAL
30325: IFTRUE 30329
30327: GO 41782
30329: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30330: LD_ADDR_VAR 0 11
30334: PUSH
30335: LD_INT 0
30337: PUSH
30338: LD_INT 0
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 0
30347: PUSH
30348: LD_INT 1
30350: NEG
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 1
30358: PUSH
30359: LD_INT 0
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 1
30368: PUSH
30369: LD_INT 1
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 0
30378: PUSH
30379: LD_INT 1
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PUSH
30386: LD_INT 1
30388: NEG
30389: PUSH
30390: LD_INT 0
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 1
30399: NEG
30400: PUSH
30401: LD_INT 1
30403: NEG
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 1
30411: NEG
30412: PUSH
30413: LD_INT 2
30415: NEG
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 0
30423: PUSH
30424: LD_INT 2
30426: NEG
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PUSH
30432: LD_INT 1
30434: PUSH
30435: LD_INT 1
30437: NEG
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 1
30445: PUSH
30446: LD_INT 2
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 0
30455: PUSH
30456: LD_INT 2
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 1
30465: NEG
30466: PUSH
30467: LD_INT 1
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 1
30476: PUSH
30477: LD_INT 3
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_INT 0
30486: PUSH
30487: LD_INT 3
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 1
30496: NEG
30497: PUSH
30498: LD_INT 2
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30523: LD_ADDR_VAR 0 12
30527: PUSH
30528: LD_INT 0
30530: PUSH
30531: LD_INT 0
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 0
30540: PUSH
30541: LD_INT 1
30543: NEG
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 1
30551: PUSH
30552: LD_INT 0
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 1
30561: PUSH
30562: LD_INT 1
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 0
30571: PUSH
30572: LD_INT 1
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 1
30581: NEG
30582: PUSH
30583: LD_INT 0
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 1
30592: NEG
30593: PUSH
30594: LD_INT 1
30596: NEG
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 1
30604: PUSH
30605: LD_INT 1
30607: NEG
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 2
30615: PUSH
30616: LD_INT 0
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 2
30625: PUSH
30626: LD_INT 1
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 1
30635: NEG
30636: PUSH
30637: LD_INT 1
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 2
30646: NEG
30647: PUSH
30648: LD_INT 0
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 2
30657: NEG
30658: PUSH
30659: LD_INT 1
30661: NEG
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PUSH
30667: LD_INT 2
30669: NEG
30670: PUSH
30671: LD_INT 1
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 3
30680: NEG
30681: PUSH
30682: LD_INT 0
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 3
30691: NEG
30692: PUSH
30693: LD_INT 1
30695: NEG
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30719: LD_ADDR_VAR 0 13
30723: PUSH
30724: LD_INT 0
30726: PUSH
30727: LD_INT 0
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 0
30736: PUSH
30737: LD_INT 1
30739: NEG
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 1
30747: PUSH
30748: LD_INT 0
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 1
30757: PUSH
30758: LD_INT 1
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 0
30767: PUSH
30768: LD_INT 1
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 1
30777: NEG
30778: PUSH
30779: LD_INT 0
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: LD_INT 1
30788: NEG
30789: PUSH
30790: LD_INT 1
30792: NEG
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 1
30800: NEG
30801: PUSH
30802: LD_INT 2
30804: NEG
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 2
30812: PUSH
30813: LD_INT 1
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 2
30822: PUSH
30823: LD_INT 2
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 1
30832: PUSH
30833: LD_INT 2
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 2
30842: NEG
30843: PUSH
30844: LD_INT 1
30846: NEG
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 2
30854: NEG
30855: PUSH
30856: LD_INT 2
30858: NEG
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 2
30866: NEG
30867: PUSH
30868: LD_INT 3
30870: NEG
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 3
30878: NEG
30879: PUSH
30880: LD_INT 2
30882: NEG
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 3
30890: NEG
30891: PUSH
30892: LD_INT 3
30894: NEG
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30918: LD_ADDR_VAR 0 14
30922: PUSH
30923: LD_INT 0
30925: PUSH
30926: LD_INT 0
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 0
30935: PUSH
30936: LD_INT 1
30938: NEG
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: LD_INT 1
30946: PUSH
30947: LD_INT 0
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 1
30956: PUSH
30957: LD_INT 1
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 0
30966: PUSH
30967: LD_INT 1
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 1
30976: NEG
30977: PUSH
30978: LD_INT 0
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 1
30987: NEG
30988: PUSH
30989: LD_INT 1
30991: NEG
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 1
30999: NEG
31000: PUSH
31001: LD_INT 2
31003: NEG
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 0
31011: PUSH
31012: LD_INT 2
31014: NEG
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 1
31022: PUSH
31023: LD_INT 1
31025: NEG
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: LD_INT 1
31033: PUSH
31034: LD_INT 2
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: LD_INT 0
31043: PUSH
31044: LD_INT 2
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 1
31053: NEG
31054: PUSH
31055: LD_INT 1
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: LD_INT 1
31064: NEG
31065: PUSH
31066: LD_INT 3
31068: NEG
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 0
31076: PUSH
31077: LD_INT 3
31079: NEG
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 1
31087: PUSH
31088: LD_INT 2
31090: NEG
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31114: LD_ADDR_VAR 0 15
31118: PUSH
31119: LD_INT 0
31121: PUSH
31122: LD_INT 0
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 0
31131: PUSH
31132: LD_INT 1
31134: NEG
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 1
31142: PUSH
31143: LD_INT 0
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PUSH
31150: LD_INT 1
31152: PUSH
31153: LD_INT 1
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_INT 0
31162: PUSH
31163: LD_INT 1
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: LD_INT 1
31172: NEG
31173: PUSH
31174: LD_INT 0
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 1
31183: NEG
31184: PUSH
31185: LD_INT 1
31187: NEG
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 1
31195: PUSH
31196: LD_INT 1
31198: NEG
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 2
31206: PUSH
31207: LD_INT 0
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 2
31216: PUSH
31217: LD_INT 1
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 1
31226: NEG
31227: PUSH
31228: LD_INT 1
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 2
31237: NEG
31238: PUSH
31239: LD_INT 0
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 2
31248: NEG
31249: PUSH
31250: LD_INT 1
31252: NEG
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 2
31260: PUSH
31261: LD_INT 1
31263: NEG
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 3
31271: PUSH
31272: LD_INT 0
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 3
31281: PUSH
31282: LD_INT 1
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31307: LD_ADDR_VAR 0 16
31311: PUSH
31312: LD_INT 0
31314: PUSH
31315: LD_INT 0
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 0
31324: PUSH
31325: LD_INT 1
31327: NEG
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 1
31335: PUSH
31336: LD_INT 0
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 1
31345: PUSH
31346: LD_INT 1
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 0
31355: PUSH
31356: LD_INT 1
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 1
31365: NEG
31366: PUSH
31367: LD_INT 0
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 1
31376: NEG
31377: PUSH
31378: LD_INT 1
31380: NEG
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: LD_INT 1
31388: NEG
31389: PUSH
31390: LD_INT 2
31392: NEG
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 2
31400: PUSH
31401: LD_INT 1
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 2
31410: PUSH
31411: LD_INT 2
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 1
31420: PUSH
31421: LD_INT 2
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 2
31430: NEG
31431: PUSH
31432: LD_INT 1
31434: NEG
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 2
31442: NEG
31443: PUSH
31444: LD_INT 2
31446: NEG
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 3
31454: PUSH
31455: LD_INT 2
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 3
31464: PUSH
31465: LD_INT 3
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 2
31474: PUSH
31475: LD_INT 3
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31500: LD_ADDR_VAR 0 17
31504: PUSH
31505: LD_INT 0
31507: PUSH
31508: LD_INT 0
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: LD_INT 0
31517: PUSH
31518: LD_INT 1
31520: NEG
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 1
31528: PUSH
31529: LD_INT 0
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 1
31538: PUSH
31539: LD_INT 1
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 0
31548: PUSH
31549: LD_INT 1
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: LD_INT 1
31558: NEG
31559: PUSH
31560: LD_INT 0
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 1
31569: NEG
31570: PUSH
31571: LD_INT 1
31573: NEG
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: LD_INT 1
31581: NEG
31582: PUSH
31583: LD_INT 2
31585: NEG
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: LD_INT 0
31593: PUSH
31594: LD_INT 2
31596: NEG
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 1
31604: PUSH
31605: LD_INT 1
31607: NEG
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 2
31615: PUSH
31616: LD_INT 0
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 2
31625: PUSH
31626: LD_INT 1
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 2
31635: PUSH
31636: LD_INT 2
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 1
31645: PUSH
31646: LD_INT 2
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 0
31655: PUSH
31656: LD_INT 2
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 1
31665: NEG
31666: PUSH
31667: LD_INT 1
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 2
31676: NEG
31677: PUSH
31678: LD_INT 0
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 2
31687: NEG
31688: PUSH
31689: LD_INT 1
31691: NEG
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 2
31699: NEG
31700: PUSH
31701: LD_INT 2
31703: NEG
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31730: LD_ADDR_VAR 0 18
31734: PUSH
31735: LD_INT 0
31737: PUSH
31738: LD_INT 0
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 0
31747: PUSH
31748: LD_INT 1
31750: NEG
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 1
31758: PUSH
31759: LD_INT 0
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 1
31768: PUSH
31769: LD_INT 1
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 0
31778: PUSH
31779: LD_INT 1
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 1
31788: NEG
31789: PUSH
31790: LD_INT 0
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 1
31799: NEG
31800: PUSH
31801: LD_INT 1
31803: NEG
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 1
31811: NEG
31812: PUSH
31813: LD_INT 2
31815: NEG
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 0
31823: PUSH
31824: LD_INT 2
31826: NEG
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: PUSH
31832: LD_INT 1
31834: PUSH
31835: LD_INT 1
31837: NEG
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 2
31845: PUSH
31846: LD_INT 0
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 2
31855: PUSH
31856: LD_INT 1
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 2
31865: PUSH
31866: LD_INT 2
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 1
31875: PUSH
31876: LD_INT 2
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 0
31885: PUSH
31886: LD_INT 2
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 1
31895: NEG
31896: PUSH
31897: LD_INT 1
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 2
31906: NEG
31907: PUSH
31908: LD_INT 0
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 2
31917: NEG
31918: PUSH
31919: LD_INT 1
31921: NEG
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 2
31929: NEG
31930: PUSH
31931: LD_INT 2
31933: NEG
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31960: LD_ADDR_VAR 0 19
31964: PUSH
31965: LD_INT 0
31967: PUSH
31968: LD_INT 0
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 0
31977: PUSH
31978: LD_INT 1
31980: NEG
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 1
31988: PUSH
31989: LD_INT 0
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 1
31998: PUSH
31999: LD_INT 1
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 0
32008: PUSH
32009: LD_INT 1
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 1
32018: NEG
32019: PUSH
32020: LD_INT 0
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 1
32029: NEG
32030: PUSH
32031: LD_INT 1
32033: NEG
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 1
32041: NEG
32042: PUSH
32043: LD_INT 2
32045: NEG
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 0
32053: PUSH
32054: LD_INT 2
32056: NEG
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 1
32064: PUSH
32065: LD_INT 1
32067: NEG
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 2
32075: PUSH
32076: LD_INT 0
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 2
32085: PUSH
32086: LD_INT 1
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 2
32095: PUSH
32096: LD_INT 2
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 1
32105: PUSH
32106: LD_INT 2
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 0
32115: PUSH
32116: LD_INT 2
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 1
32125: NEG
32126: PUSH
32127: LD_INT 1
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 2
32136: NEG
32137: PUSH
32138: LD_INT 0
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: LD_INT 2
32147: NEG
32148: PUSH
32149: LD_INT 1
32151: NEG
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 2
32159: NEG
32160: PUSH
32161: LD_INT 2
32163: NEG
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32190: LD_ADDR_VAR 0 20
32194: PUSH
32195: LD_INT 0
32197: PUSH
32198: LD_INT 0
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 0
32207: PUSH
32208: LD_INT 1
32210: NEG
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 1
32218: PUSH
32219: LD_INT 0
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 1
32228: PUSH
32229: LD_INT 1
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 0
32238: PUSH
32239: LD_INT 1
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 1
32248: NEG
32249: PUSH
32250: LD_INT 0
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 1
32259: NEG
32260: PUSH
32261: LD_INT 1
32263: NEG
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 1
32271: NEG
32272: PUSH
32273: LD_INT 2
32275: NEG
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 0
32283: PUSH
32284: LD_INT 2
32286: NEG
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: LD_INT 1
32294: PUSH
32295: LD_INT 1
32297: NEG
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 2
32305: PUSH
32306: LD_INT 0
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 2
32315: PUSH
32316: LD_INT 1
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 2
32325: PUSH
32326: LD_INT 2
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 1
32335: PUSH
32336: LD_INT 2
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 0
32345: PUSH
32346: LD_INT 2
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 1
32355: NEG
32356: PUSH
32357: LD_INT 1
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 2
32366: NEG
32367: PUSH
32368: LD_INT 0
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 2
32377: NEG
32378: PUSH
32379: LD_INT 1
32381: NEG
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 2
32389: NEG
32390: PUSH
32391: LD_INT 2
32393: NEG
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32420: LD_ADDR_VAR 0 21
32424: PUSH
32425: LD_INT 0
32427: PUSH
32428: LD_INT 0
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 0
32437: PUSH
32438: LD_INT 1
32440: NEG
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 1
32448: PUSH
32449: LD_INT 0
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 1
32458: PUSH
32459: LD_INT 1
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: LD_INT 0
32468: PUSH
32469: LD_INT 1
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 1
32478: NEG
32479: PUSH
32480: LD_INT 0
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 1
32489: NEG
32490: PUSH
32491: LD_INT 1
32493: NEG
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 1
32501: NEG
32502: PUSH
32503: LD_INT 2
32505: NEG
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 0
32513: PUSH
32514: LD_INT 2
32516: NEG
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PUSH
32522: LD_INT 1
32524: PUSH
32525: LD_INT 1
32527: NEG
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 2
32535: PUSH
32536: LD_INT 0
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 2
32545: PUSH
32546: LD_INT 1
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 2
32555: PUSH
32556: LD_INT 2
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: LD_INT 1
32565: PUSH
32566: LD_INT 2
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: LD_INT 0
32575: PUSH
32576: LD_INT 2
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 1
32585: NEG
32586: PUSH
32587: LD_INT 1
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 2
32596: NEG
32597: PUSH
32598: LD_INT 0
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 2
32607: NEG
32608: PUSH
32609: LD_INT 1
32611: NEG
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: LD_INT 2
32619: NEG
32620: PUSH
32621: LD_INT 2
32623: NEG
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32650: LD_ADDR_VAR 0 22
32654: PUSH
32655: LD_INT 0
32657: PUSH
32658: LD_INT 0
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: LD_INT 0
32667: PUSH
32668: LD_INT 1
32670: NEG
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 1
32678: PUSH
32679: LD_INT 0
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 1
32688: PUSH
32689: LD_INT 1
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 0
32698: PUSH
32699: LD_INT 1
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 1
32708: NEG
32709: PUSH
32710: LD_INT 0
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 1
32719: NEG
32720: PUSH
32721: LD_INT 1
32723: NEG
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 1
32731: NEG
32732: PUSH
32733: LD_INT 2
32735: NEG
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 0
32743: PUSH
32744: LD_INT 2
32746: NEG
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 1
32754: PUSH
32755: LD_INT 1
32757: NEG
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 2
32765: PUSH
32766: LD_INT 0
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 2
32775: PUSH
32776: LD_INT 1
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 2
32785: PUSH
32786: LD_INT 2
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 1
32795: PUSH
32796: LD_INT 2
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 0
32805: PUSH
32806: LD_INT 2
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 1
32815: NEG
32816: PUSH
32817: LD_INT 1
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 2
32826: NEG
32827: PUSH
32828: LD_INT 0
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 2
32837: NEG
32838: PUSH
32839: LD_INT 1
32841: NEG
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 2
32849: NEG
32850: PUSH
32851: LD_INT 2
32853: NEG
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32880: LD_ADDR_VAR 0 23
32884: PUSH
32885: LD_INT 0
32887: PUSH
32888: LD_INT 0
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 0
32897: PUSH
32898: LD_INT 1
32900: NEG
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 1
32908: PUSH
32909: LD_INT 0
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 1
32918: PUSH
32919: LD_INT 1
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 0
32928: PUSH
32929: LD_INT 1
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 1
32938: NEG
32939: PUSH
32940: LD_INT 0
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 1
32949: NEG
32950: PUSH
32951: LD_INT 1
32953: NEG
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 1
32961: NEG
32962: PUSH
32963: LD_INT 2
32965: NEG
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 0
32973: PUSH
32974: LD_INT 2
32976: NEG
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 1
32984: PUSH
32985: LD_INT 1
32987: NEG
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 2
32995: PUSH
32996: LD_INT 0
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: LD_INT 2
33005: PUSH
33006: LD_INT 1
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 2
33015: PUSH
33016: LD_INT 2
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 1
33025: PUSH
33026: LD_INT 2
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 0
33035: PUSH
33036: LD_INT 2
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 1
33045: NEG
33046: PUSH
33047: LD_INT 1
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 2
33056: NEG
33057: PUSH
33058: LD_INT 0
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 2
33067: NEG
33068: PUSH
33069: LD_INT 1
33071: NEG
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 2
33079: NEG
33080: PUSH
33081: LD_INT 2
33083: NEG
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 2
33091: NEG
33092: PUSH
33093: LD_INT 3
33095: NEG
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 1
33103: NEG
33104: PUSH
33105: LD_INT 3
33107: NEG
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 1
33115: PUSH
33116: LD_INT 2
33118: NEG
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 2
33126: PUSH
33127: LD_INT 1
33129: NEG
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33160: LD_ADDR_VAR 0 24
33164: PUSH
33165: LD_INT 0
33167: PUSH
33168: LD_INT 0
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 0
33177: PUSH
33178: LD_INT 1
33180: NEG
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 1
33188: PUSH
33189: LD_INT 0
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 1
33198: PUSH
33199: LD_INT 1
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 0
33208: PUSH
33209: LD_INT 1
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 1
33218: NEG
33219: PUSH
33220: LD_INT 0
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 1
33229: NEG
33230: PUSH
33231: LD_INT 1
33233: NEG
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 1
33241: NEG
33242: PUSH
33243: LD_INT 2
33245: NEG
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 0
33253: PUSH
33254: LD_INT 2
33256: NEG
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 1
33264: PUSH
33265: LD_INT 1
33267: NEG
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 2
33275: PUSH
33276: LD_INT 0
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 2
33285: PUSH
33286: LD_INT 1
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: PUSH
33293: LD_INT 2
33295: PUSH
33296: LD_INT 2
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: PUSH
33303: LD_INT 1
33305: PUSH
33306: LD_INT 2
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 0
33315: PUSH
33316: LD_INT 2
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 1
33325: NEG
33326: PUSH
33327: LD_INT 1
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 2
33336: NEG
33337: PUSH
33338: LD_INT 0
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 2
33347: NEG
33348: PUSH
33349: LD_INT 1
33351: NEG
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 2
33359: NEG
33360: PUSH
33361: LD_INT 2
33363: NEG
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 1
33371: PUSH
33372: LD_INT 2
33374: NEG
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 2
33382: PUSH
33383: LD_INT 1
33385: NEG
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 3
33393: PUSH
33394: LD_INT 1
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 3
33403: PUSH
33404: LD_INT 2
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33436: LD_ADDR_VAR 0 25
33440: PUSH
33441: LD_INT 0
33443: PUSH
33444: LD_INT 0
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 0
33453: PUSH
33454: LD_INT 1
33456: NEG
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 1
33464: PUSH
33465: LD_INT 0
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 1
33474: PUSH
33475: LD_INT 1
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 0
33484: PUSH
33485: LD_INT 1
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 1
33494: NEG
33495: PUSH
33496: LD_INT 0
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 1
33505: NEG
33506: PUSH
33507: LD_INT 1
33509: NEG
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 1
33517: NEG
33518: PUSH
33519: LD_INT 2
33521: NEG
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: LD_INT 0
33529: PUSH
33530: LD_INT 2
33532: NEG
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PUSH
33538: LD_INT 1
33540: PUSH
33541: LD_INT 1
33543: NEG
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 2
33551: PUSH
33552: LD_INT 0
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 2
33561: PUSH
33562: LD_INT 1
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 2
33571: PUSH
33572: LD_INT 2
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 1
33581: PUSH
33582: LD_INT 2
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 0
33591: PUSH
33592: LD_INT 2
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 1
33601: NEG
33602: PUSH
33603: LD_INT 1
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 2
33612: NEG
33613: PUSH
33614: LD_INT 0
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 2
33623: NEG
33624: PUSH
33625: LD_INT 1
33627: NEG
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 2
33635: NEG
33636: PUSH
33637: LD_INT 2
33639: NEG
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 3
33647: PUSH
33648: LD_INT 1
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 3
33657: PUSH
33658: LD_INT 2
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 2
33667: PUSH
33668: LD_INT 3
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 1
33677: PUSH
33678: LD_INT 3
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33710: LD_ADDR_VAR 0 26
33714: PUSH
33715: LD_INT 0
33717: PUSH
33718: LD_INT 0
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 0
33727: PUSH
33728: LD_INT 1
33730: NEG
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 1
33738: PUSH
33739: LD_INT 0
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 1
33748: PUSH
33749: LD_INT 1
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 0
33758: PUSH
33759: LD_INT 1
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 1
33768: NEG
33769: PUSH
33770: LD_INT 0
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 1
33779: NEG
33780: PUSH
33781: LD_INT 1
33783: NEG
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 1
33791: NEG
33792: PUSH
33793: LD_INT 2
33795: NEG
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 0
33803: PUSH
33804: LD_INT 2
33806: NEG
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 1
33814: PUSH
33815: LD_INT 1
33817: NEG
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 2
33825: PUSH
33826: LD_INT 0
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: LD_INT 2
33835: PUSH
33836: LD_INT 1
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 2
33845: PUSH
33846: LD_INT 2
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 1
33855: PUSH
33856: LD_INT 2
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 0
33865: PUSH
33866: LD_INT 2
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 1
33875: NEG
33876: PUSH
33877: LD_INT 1
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 2
33886: NEG
33887: PUSH
33888: LD_INT 0
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: LD_INT 2
33897: NEG
33898: PUSH
33899: LD_INT 1
33901: NEG
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 2
33909: NEG
33910: PUSH
33911: LD_INT 2
33913: NEG
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 2
33921: PUSH
33922: LD_INT 3
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 1
33931: PUSH
33932: LD_INT 3
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 1
33941: NEG
33942: PUSH
33943: LD_INT 2
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: LD_INT 2
33952: NEG
33953: PUSH
33954: LD_INT 1
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33986: LD_ADDR_VAR 0 27
33990: PUSH
33991: LD_INT 0
33993: PUSH
33994: LD_INT 0
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 0
34003: PUSH
34004: LD_INT 1
34006: NEG
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 1
34014: PUSH
34015: LD_INT 0
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 1
34024: PUSH
34025: LD_INT 1
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 0
34034: PUSH
34035: LD_INT 1
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 1
34044: NEG
34045: PUSH
34046: LD_INT 0
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 1
34055: NEG
34056: PUSH
34057: LD_INT 1
34059: NEG
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 1
34067: NEG
34068: PUSH
34069: LD_INT 2
34071: NEG
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 0
34079: PUSH
34080: LD_INT 2
34082: NEG
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 1
34090: PUSH
34091: LD_INT 1
34093: NEG
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 2
34101: PUSH
34102: LD_INT 0
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 2
34111: PUSH
34112: LD_INT 1
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 2
34121: PUSH
34122: LD_INT 2
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 1
34131: PUSH
34132: LD_INT 2
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 0
34141: PUSH
34142: LD_INT 2
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 1
34151: NEG
34152: PUSH
34153: LD_INT 1
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 2
34162: NEG
34163: PUSH
34164: LD_INT 0
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 2
34173: NEG
34174: PUSH
34175: LD_INT 1
34177: NEG
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 2
34185: NEG
34186: PUSH
34187: LD_INT 2
34189: NEG
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 1
34197: NEG
34198: PUSH
34199: LD_INT 2
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 2
34208: NEG
34209: PUSH
34210: LD_INT 1
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 3
34219: NEG
34220: PUSH
34221: LD_INT 1
34223: NEG
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 3
34231: NEG
34232: PUSH
34233: LD_INT 2
34235: NEG
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34266: LD_ADDR_VAR 0 28
34270: PUSH
34271: LD_INT 0
34273: PUSH
34274: LD_INT 0
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 0
34283: PUSH
34284: LD_INT 1
34286: NEG
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 1
34294: PUSH
34295: LD_INT 0
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 1
34304: PUSH
34305: LD_INT 1
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 0
34314: PUSH
34315: LD_INT 1
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 1
34324: NEG
34325: PUSH
34326: LD_INT 0
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 1
34335: NEG
34336: PUSH
34337: LD_INT 1
34339: NEG
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 1
34347: NEG
34348: PUSH
34349: LD_INT 2
34351: NEG
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 0
34359: PUSH
34360: LD_INT 2
34362: NEG
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 1
34370: PUSH
34371: LD_INT 1
34373: NEG
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 2
34381: PUSH
34382: LD_INT 0
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 2
34391: PUSH
34392: LD_INT 1
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 2
34401: PUSH
34402: LD_INT 2
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 1
34411: PUSH
34412: LD_INT 2
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 0
34421: PUSH
34422: LD_INT 2
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 1
34431: NEG
34432: PUSH
34433: LD_INT 1
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 2
34442: NEG
34443: PUSH
34444: LD_INT 0
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: LD_INT 2
34453: NEG
34454: PUSH
34455: LD_INT 1
34457: NEG
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 2
34465: NEG
34466: PUSH
34467: LD_INT 2
34469: NEG
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 2
34477: NEG
34478: PUSH
34479: LD_INT 3
34481: NEG
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 1
34489: NEG
34490: PUSH
34491: LD_INT 3
34493: NEG
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 3
34501: NEG
34502: PUSH
34503: LD_INT 1
34505: NEG
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 3
34513: NEG
34514: PUSH
34515: LD_INT 2
34517: NEG
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34548: LD_ADDR_VAR 0 29
34552: PUSH
34553: LD_INT 0
34555: PUSH
34556: LD_INT 0
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 0
34565: PUSH
34566: LD_INT 1
34568: NEG
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 1
34576: PUSH
34577: LD_INT 0
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 1
34586: PUSH
34587: LD_INT 1
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 0
34596: PUSH
34597: LD_INT 1
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 1
34606: NEG
34607: PUSH
34608: LD_INT 0
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 1
34617: NEG
34618: PUSH
34619: LD_INT 1
34621: NEG
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 1
34629: NEG
34630: PUSH
34631: LD_INT 2
34633: NEG
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 0
34641: PUSH
34642: LD_INT 2
34644: NEG
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 1
34652: PUSH
34653: LD_INT 1
34655: NEG
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 2
34663: PUSH
34664: LD_INT 0
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 2
34673: PUSH
34674: LD_INT 1
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 1
34683: PUSH
34684: LD_INT 2
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: LD_INT 0
34693: PUSH
34694: LD_INT 2
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 1
34703: NEG
34704: PUSH
34705: LD_INT 1
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 2
34714: NEG
34715: PUSH
34716: LD_INT 1
34718: NEG
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 2
34726: NEG
34727: PUSH
34728: LD_INT 2
34730: NEG
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 2
34738: NEG
34739: PUSH
34740: LD_INT 3
34742: NEG
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: LD_INT 2
34750: PUSH
34751: LD_INT 1
34753: NEG
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: LD_INT 3
34761: PUSH
34762: LD_INT 1
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 1
34771: PUSH
34772: LD_INT 3
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 1
34781: NEG
34782: PUSH
34783: LD_INT 2
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 3
34792: NEG
34793: PUSH
34794: LD_INT 2
34796: NEG
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34827: LD_ADDR_VAR 0 30
34831: PUSH
34832: LD_INT 0
34834: PUSH
34835: LD_INT 0
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 0
34844: PUSH
34845: LD_INT 1
34847: NEG
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 1
34855: PUSH
34856: LD_INT 0
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 1
34865: PUSH
34866: LD_INT 1
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 0
34875: PUSH
34876: LD_INT 1
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 1
34885: NEG
34886: PUSH
34887: LD_INT 0
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 1
34896: NEG
34897: PUSH
34898: LD_INT 1
34900: NEG
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 1
34908: NEG
34909: PUSH
34910: LD_INT 2
34912: NEG
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 0
34920: PUSH
34921: LD_INT 2
34923: NEG
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 1
34931: PUSH
34932: LD_INT 1
34934: NEG
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 2
34942: PUSH
34943: LD_INT 0
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 2
34952: PUSH
34953: LD_INT 1
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 2
34962: PUSH
34963: LD_INT 2
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 1
34972: PUSH
34973: LD_INT 2
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 1
34982: NEG
34983: PUSH
34984: LD_INT 1
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 2
34993: NEG
34994: PUSH
34995: LD_INT 0
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 2
35004: NEG
35005: PUSH
35006: LD_INT 1
35008: NEG
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 1
35016: NEG
35017: PUSH
35018: LD_INT 3
35020: NEG
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 1
35028: PUSH
35029: LD_INT 2
35031: NEG
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: LD_INT 3
35039: PUSH
35040: LD_INT 2
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: LD_INT 2
35049: PUSH
35050: LD_INT 3
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 2
35059: NEG
35060: PUSH
35061: LD_INT 1
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 3
35070: NEG
35071: PUSH
35072: LD_INT 1
35074: NEG
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35105: LD_ADDR_VAR 0 31
35109: PUSH
35110: LD_INT 0
35112: PUSH
35113: LD_INT 0
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 0
35122: PUSH
35123: LD_INT 1
35125: NEG
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 1
35133: PUSH
35134: LD_INT 0
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 1
35143: PUSH
35144: LD_INT 1
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PUSH
35151: LD_INT 0
35153: PUSH
35154: LD_INT 1
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 1
35163: NEG
35164: PUSH
35165: LD_INT 0
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 1
35174: NEG
35175: PUSH
35176: LD_INT 1
35178: NEG
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 1
35186: NEG
35187: PUSH
35188: LD_INT 2
35190: NEG
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 1
35198: PUSH
35199: LD_INT 1
35201: NEG
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 2
35209: PUSH
35210: LD_INT 0
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 2
35219: PUSH
35220: LD_INT 1
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 2
35229: PUSH
35230: LD_INT 2
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: LD_INT 1
35239: PUSH
35240: LD_INT 2
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 0
35249: PUSH
35250: LD_INT 2
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 1
35259: NEG
35260: PUSH
35261: LD_INT 1
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 2
35270: NEG
35271: PUSH
35272: LD_INT 1
35274: NEG
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 2
35282: NEG
35283: PUSH
35284: LD_INT 2
35286: NEG
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 2
35294: NEG
35295: PUSH
35296: LD_INT 3
35298: NEG
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 2
35306: PUSH
35307: LD_INT 1
35309: NEG
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 3
35317: PUSH
35318: LD_INT 1
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: LD_INT 1
35327: PUSH
35328: LD_INT 3
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 1
35337: NEG
35338: PUSH
35339: LD_INT 2
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: PUSH
35346: LD_INT 3
35348: NEG
35349: PUSH
35350: LD_INT 2
35352: NEG
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35383: LD_ADDR_VAR 0 32
35387: PUSH
35388: LD_INT 0
35390: PUSH
35391: LD_INT 0
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 0
35400: PUSH
35401: LD_INT 1
35403: NEG
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: LD_INT 1
35411: PUSH
35412: LD_INT 0
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 1
35421: PUSH
35422: LD_INT 1
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: LD_INT 0
35431: PUSH
35432: LD_INT 1
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 1
35441: NEG
35442: PUSH
35443: LD_INT 0
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 1
35452: NEG
35453: PUSH
35454: LD_INT 1
35456: NEG
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 1
35464: NEG
35465: PUSH
35466: LD_INT 2
35468: NEG
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 0
35476: PUSH
35477: LD_INT 2
35479: NEG
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 1
35487: PUSH
35488: LD_INT 1
35490: NEG
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 2
35498: PUSH
35499: LD_INT 1
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 2
35508: PUSH
35509: LD_INT 2
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 1
35518: PUSH
35519: LD_INT 2
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: PUSH
35526: LD_INT 0
35528: PUSH
35529: LD_INT 2
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: PUSH
35536: LD_INT 1
35538: NEG
35539: PUSH
35540: LD_INT 1
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PUSH
35547: LD_INT 2
35549: NEG
35550: PUSH
35551: LD_INT 0
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 2
35560: NEG
35561: PUSH
35562: LD_INT 1
35564: NEG
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 1
35572: NEG
35573: PUSH
35574: LD_INT 3
35576: NEG
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 1
35584: PUSH
35585: LD_INT 2
35587: NEG
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 3
35595: PUSH
35596: LD_INT 2
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 2
35605: PUSH
35606: LD_INT 3
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 2
35615: NEG
35616: PUSH
35617: LD_INT 1
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 3
35626: NEG
35627: PUSH
35628: LD_INT 1
35630: NEG
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35661: LD_ADDR_VAR 0 33
35665: PUSH
35666: LD_INT 0
35668: PUSH
35669: LD_INT 0
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 0
35678: PUSH
35679: LD_INT 1
35681: NEG
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 1
35689: PUSH
35690: LD_INT 0
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 1
35699: PUSH
35700: LD_INT 1
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 0
35709: PUSH
35710: LD_INT 1
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 1
35719: NEG
35720: PUSH
35721: LD_INT 0
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 1
35730: NEG
35731: PUSH
35732: LD_INT 1
35734: NEG
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 1
35742: NEG
35743: PUSH
35744: LD_INT 2
35746: NEG
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 1
35754: PUSH
35755: LD_INT 1
35757: NEG
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 2
35765: PUSH
35766: LD_INT 0
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 2
35775: PUSH
35776: LD_INT 1
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 1
35785: PUSH
35786: LD_INT 2
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 0
35795: PUSH
35796: LD_INT 2
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 1
35805: NEG
35806: PUSH
35807: LD_INT 1
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 2
35816: NEG
35817: PUSH
35818: LD_INT 0
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 2
35827: NEG
35828: PUSH
35829: LD_INT 1
35831: NEG
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 2
35839: NEG
35840: PUSH
35841: LD_INT 2
35843: NEG
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 2
35851: NEG
35852: PUSH
35853: LD_INT 3
35855: NEG
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 2
35863: PUSH
35864: LD_INT 1
35866: NEG
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 3
35874: PUSH
35875: LD_INT 1
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 1
35884: PUSH
35885: LD_INT 3
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 1
35894: NEG
35895: PUSH
35896: LD_INT 2
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 3
35905: NEG
35906: PUSH
35907: LD_INT 2
35909: NEG
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35940: LD_ADDR_VAR 0 34
35944: PUSH
35945: LD_INT 0
35947: PUSH
35948: LD_INT 0
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 0
35957: PUSH
35958: LD_INT 1
35960: NEG
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 1
35968: PUSH
35969: LD_INT 0
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 1
35978: PUSH
35979: LD_INT 1
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 0
35988: PUSH
35989: LD_INT 1
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 1
35998: NEG
35999: PUSH
36000: LD_INT 0
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 1
36009: NEG
36010: PUSH
36011: LD_INT 1
36013: NEG
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 1
36021: NEG
36022: PUSH
36023: LD_INT 2
36025: NEG
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 0
36033: PUSH
36034: LD_INT 2
36036: NEG
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 1
36044: PUSH
36045: LD_INT 1
36047: NEG
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: LD_INT 2
36055: PUSH
36056: LD_INT 1
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 2
36065: PUSH
36066: LD_INT 2
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 1
36075: PUSH
36076: LD_INT 2
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 1
36085: NEG
36086: PUSH
36087: LD_INT 1
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 2
36096: NEG
36097: PUSH
36098: LD_INT 0
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 2
36107: NEG
36108: PUSH
36109: LD_INT 1
36111: NEG
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 2
36119: NEG
36120: PUSH
36121: LD_INT 2
36123: NEG
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 1
36131: NEG
36132: PUSH
36133: LD_INT 3
36135: NEG
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 1
36143: PUSH
36144: LD_INT 2
36146: NEG
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 3
36154: PUSH
36155: LD_INT 2
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 2
36164: PUSH
36165: LD_INT 3
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 2
36174: NEG
36175: PUSH
36176: LD_INT 1
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 3
36185: NEG
36186: PUSH
36187: LD_INT 1
36189: NEG
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36220: LD_ADDR_VAR 0 35
36224: PUSH
36225: LD_INT 0
36227: PUSH
36228: LD_INT 0
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 0
36237: PUSH
36238: LD_INT 1
36240: NEG
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 1
36248: PUSH
36249: LD_INT 0
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 1
36258: PUSH
36259: LD_INT 1
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 0
36268: PUSH
36269: LD_INT 1
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 1
36278: NEG
36279: PUSH
36280: LD_INT 0
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 1
36289: NEG
36290: PUSH
36291: LD_INT 1
36293: NEG
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 2
36301: PUSH
36302: LD_INT 1
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 2
36311: NEG
36312: PUSH
36313: LD_INT 1
36315: NEG
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36332: LD_ADDR_VAR 0 36
36336: PUSH
36337: LD_INT 0
36339: PUSH
36340: LD_INT 0
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 0
36349: PUSH
36350: LD_INT 1
36352: NEG
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: LD_INT 0
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 1
36370: PUSH
36371: LD_INT 1
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 0
36380: PUSH
36381: LD_INT 1
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 1
36390: NEG
36391: PUSH
36392: LD_INT 0
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 1
36401: NEG
36402: PUSH
36403: LD_INT 1
36405: NEG
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 1
36413: NEG
36414: PUSH
36415: LD_INT 2
36417: NEG
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 1
36425: PUSH
36426: LD_INT 2
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36444: LD_ADDR_VAR 0 37
36448: PUSH
36449: LD_INT 0
36451: PUSH
36452: LD_INT 0
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 0
36461: PUSH
36462: LD_INT 1
36464: NEG
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 1
36472: PUSH
36473: LD_INT 0
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 1
36482: PUSH
36483: LD_INT 1
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 0
36492: PUSH
36493: LD_INT 1
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 1
36502: NEG
36503: PUSH
36504: LD_INT 0
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 1
36513: NEG
36514: PUSH
36515: LD_INT 1
36517: NEG
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 1
36525: PUSH
36526: LD_INT 1
36528: NEG
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: PUSH
36534: LD_INT 1
36536: NEG
36537: PUSH
36538: LD_INT 1
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36556: LD_ADDR_VAR 0 38
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: LD_INT 0
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 0
36573: PUSH
36574: LD_INT 1
36576: NEG
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 1
36584: PUSH
36585: LD_INT 0
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 1
36594: PUSH
36595: LD_INT 1
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 0
36604: PUSH
36605: LD_INT 1
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 1
36614: NEG
36615: PUSH
36616: LD_INT 0
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 1
36625: NEG
36626: PUSH
36627: LD_INT 1
36629: NEG
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 2
36637: PUSH
36638: LD_INT 1
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: LD_INT 2
36647: NEG
36648: PUSH
36649: LD_INT 1
36651: NEG
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36668: LD_ADDR_VAR 0 39
36672: PUSH
36673: LD_INT 0
36675: PUSH
36676: LD_INT 0
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: LD_INT 1
36688: NEG
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 1
36696: PUSH
36697: LD_INT 0
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 1
36706: PUSH
36707: LD_INT 1
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 0
36716: PUSH
36717: LD_INT 1
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 1
36726: NEG
36727: PUSH
36728: LD_INT 0
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 1
36737: NEG
36738: PUSH
36739: LD_INT 1
36741: NEG
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 1
36749: NEG
36750: PUSH
36751: LD_INT 2
36753: NEG
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 1
36761: PUSH
36762: LD_INT 2
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36780: LD_ADDR_VAR 0 40
36784: PUSH
36785: LD_INT 0
36787: PUSH
36788: LD_INT 0
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 0
36797: PUSH
36798: LD_INT 1
36800: NEG
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 1
36808: PUSH
36809: LD_INT 0
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 1
36818: PUSH
36819: LD_INT 1
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 0
36828: PUSH
36829: LD_INT 1
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 1
36838: NEG
36839: PUSH
36840: LD_INT 0
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 1
36849: NEG
36850: PUSH
36851: LD_INT 1
36853: NEG
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 1
36861: PUSH
36862: LD_INT 1
36864: NEG
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 1
36872: NEG
36873: PUSH
36874: LD_INT 1
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36892: LD_ADDR_VAR 0 41
36896: PUSH
36897: LD_INT 0
36899: PUSH
36900: LD_INT 0
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 0
36909: PUSH
36910: LD_INT 1
36912: NEG
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 1
36920: PUSH
36921: LD_INT 0
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 1
36930: PUSH
36931: LD_INT 1
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 0
36940: PUSH
36941: LD_INT 1
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 1
36950: NEG
36951: PUSH
36952: LD_INT 0
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 1
36961: NEG
36962: PUSH
36963: LD_INT 1
36965: NEG
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 1
36973: NEG
36974: PUSH
36975: LD_INT 2
36977: NEG
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 1
36985: PUSH
36986: LD_INT 1
36988: NEG
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 2
36996: PUSH
36997: LD_INT 0
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 2
37006: PUSH
37007: LD_INT 1
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 2
37016: PUSH
37017: LD_INT 2
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 1
37026: PUSH
37027: LD_INT 2
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 1
37036: NEG
37037: PUSH
37038: LD_INT 1
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 2
37047: NEG
37048: PUSH
37049: LD_INT 0
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: LD_INT 2
37058: NEG
37059: PUSH
37060: LD_INT 1
37062: NEG
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: PUSH
37068: LD_INT 2
37070: NEG
37071: PUSH
37072: LD_INT 2
37074: NEG
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 2
37082: NEG
37083: PUSH
37084: LD_INT 3
37086: NEG
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 2
37094: PUSH
37095: LD_INT 1
37097: NEG
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 3
37105: PUSH
37106: LD_INT 0
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 3
37115: PUSH
37116: LD_INT 1
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 3
37125: PUSH
37126: LD_INT 2
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 3
37135: PUSH
37136: LD_INT 3
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 2
37145: PUSH
37146: LD_INT 3
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 2
37155: NEG
37156: PUSH
37157: LD_INT 1
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 3
37166: NEG
37167: PUSH
37168: LD_INT 0
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 3
37177: NEG
37178: PUSH
37179: LD_INT 1
37181: NEG
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 3
37189: NEG
37190: PUSH
37191: LD_INT 2
37193: NEG
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 3
37201: NEG
37202: PUSH
37203: LD_INT 3
37205: NEG
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37242: LD_ADDR_VAR 0 42
37246: PUSH
37247: LD_INT 0
37249: PUSH
37250: LD_INT 0
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 0
37259: PUSH
37260: LD_INT 1
37262: NEG
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 1
37270: PUSH
37271: LD_INT 0
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: LD_INT 1
37280: PUSH
37281: LD_INT 1
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 0
37290: PUSH
37291: LD_INT 1
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 1
37300: NEG
37301: PUSH
37302: LD_INT 0
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 1
37311: NEG
37312: PUSH
37313: LD_INT 1
37315: NEG
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 1
37323: NEG
37324: PUSH
37325: LD_INT 2
37327: NEG
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 0
37335: PUSH
37336: LD_INT 2
37338: NEG
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: LD_INT 1
37346: PUSH
37347: LD_INT 1
37349: NEG
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 2
37357: PUSH
37358: LD_INT 1
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 2
37367: PUSH
37368: LD_INT 2
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 1
37377: PUSH
37378: LD_INT 2
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 0
37387: PUSH
37388: LD_INT 2
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 1
37397: NEG
37398: PUSH
37399: LD_INT 1
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 2
37408: NEG
37409: PUSH
37410: LD_INT 1
37412: NEG
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 2
37420: NEG
37421: PUSH
37422: LD_INT 2
37424: NEG
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 2
37432: NEG
37433: PUSH
37434: LD_INT 3
37436: NEG
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 1
37444: NEG
37445: PUSH
37446: LD_INT 3
37448: NEG
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 0
37456: PUSH
37457: LD_INT 3
37459: NEG
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 1
37467: PUSH
37468: LD_INT 2
37470: NEG
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 3
37478: PUSH
37479: LD_INT 2
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 3
37488: PUSH
37489: LD_INT 3
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 2
37498: PUSH
37499: LD_INT 3
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 1
37508: PUSH
37509: LD_INT 3
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 0
37518: PUSH
37519: LD_INT 3
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 1
37528: NEG
37529: PUSH
37530: LD_INT 2
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 3
37539: NEG
37540: PUSH
37541: LD_INT 2
37543: NEG
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 3
37551: NEG
37552: PUSH
37553: LD_INT 3
37555: NEG
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37592: LD_ADDR_VAR 0 43
37596: PUSH
37597: LD_INT 0
37599: PUSH
37600: LD_INT 0
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 0
37609: PUSH
37610: LD_INT 1
37612: NEG
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 1
37620: PUSH
37621: LD_INT 0
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 1
37630: PUSH
37631: LD_INT 1
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 0
37640: PUSH
37641: LD_INT 1
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 1
37650: NEG
37651: PUSH
37652: LD_INT 0
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 1
37661: NEG
37662: PUSH
37663: LD_INT 1
37665: NEG
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 1
37673: NEG
37674: PUSH
37675: LD_INT 2
37677: NEG
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 0
37685: PUSH
37686: LD_INT 2
37688: NEG
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 1
37696: PUSH
37697: LD_INT 1
37699: NEG
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 2
37707: PUSH
37708: LD_INT 0
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 2
37717: PUSH
37718: LD_INT 1
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 1
37727: PUSH
37728: LD_INT 2
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 0
37737: PUSH
37738: LD_INT 2
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 1
37747: NEG
37748: PUSH
37749: LD_INT 1
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 2
37758: NEG
37759: PUSH
37760: LD_INT 0
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 2
37769: NEG
37770: PUSH
37771: LD_INT 1
37773: NEG
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 1
37781: NEG
37782: PUSH
37783: LD_INT 3
37785: NEG
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 0
37793: PUSH
37794: LD_INT 3
37796: NEG
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 1
37804: PUSH
37805: LD_INT 2
37807: NEG
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 2
37815: PUSH
37816: LD_INT 1
37818: NEG
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 3
37826: PUSH
37827: LD_INT 0
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 3
37836: PUSH
37837: LD_INT 1
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 1
37846: PUSH
37847: LD_INT 3
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 0
37856: PUSH
37857: LD_INT 3
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 1
37866: NEG
37867: PUSH
37868: LD_INT 2
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 2
37877: NEG
37878: PUSH
37879: LD_INT 1
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 3
37888: NEG
37889: PUSH
37890: LD_INT 0
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 3
37899: NEG
37900: PUSH
37901: LD_INT 1
37903: NEG
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37940: LD_ADDR_VAR 0 44
37944: PUSH
37945: LD_INT 0
37947: PUSH
37948: LD_INT 0
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 0
37957: PUSH
37958: LD_INT 1
37960: NEG
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: LD_INT 1
37968: PUSH
37969: LD_INT 0
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 1
37978: PUSH
37979: LD_INT 1
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 0
37988: PUSH
37989: LD_INT 1
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 1
37998: NEG
37999: PUSH
38000: LD_INT 0
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 1
38009: NEG
38010: PUSH
38011: LD_INT 1
38013: NEG
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 1
38021: NEG
38022: PUSH
38023: LD_INT 2
38025: NEG
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 1
38033: PUSH
38034: LD_INT 1
38036: NEG
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 2
38044: PUSH
38045: LD_INT 0
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 2
38054: PUSH
38055: LD_INT 1
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 2
38064: PUSH
38065: LD_INT 2
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 1
38074: PUSH
38075: LD_INT 2
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 1
38084: NEG
38085: PUSH
38086: LD_INT 1
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 2
38095: NEG
38096: PUSH
38097: LD_INT 0
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 2
38106: NEG
38107: PUSH
38108: LD_INT 1
38110: NEG
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 2
38118: NEG
38119: PUSH
38120: LD_INT 2
38122: NEG
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 2
38130: NEG
38131: PUSH
38132: LD_INT 3
38134: NEG
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 2
38142: PUSH
38143: LD_INT 1
38145: NEG
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 3
38153: PUSH
38154: LD_INT 0
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 3
38163: PUSH
38164: LD_INT 1
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_INT 3
38173: PUSH
38174: LD_INT 2
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 3
38183: PUSH
38184: LD_INT 3
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 2
38193: PUSH
38194: LD_INT 3
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 2
38203: NEG
38204: PUSH
38205: LD_INT 1
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 3
38214: NEG
38215: PUSH
38216: LD_INT 0
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 3
38225: NEG
38226: PUSH
38227: LD_INT 1
38229: NEG
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 3
38237: NEG
38238: PUSH
38239: LD_INT 2
38241: NEG
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 3
38249: NEG
38250: PUSH
38251: LD_INT 3
38253: NEG
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38290: LD_ADDR_VAR 0 45
38294: PUSH
38295: LD_INT 0
38297: PUSH
38298: LD_INT 0
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: LD_INT 0
38307: PUSH
38308: LD_INT 1
38310: NEG
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 1
38318: PUSH
38319: LD_INT 0
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 1
38328: PUSH
38329: LD_INT 1
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 0
38338: PUSH
38339: LD_INT 1
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 1
38348: NEG
38349: PUSH
38350: LD_INT 0
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 1
38359: NEG
38360: PUSH
38361: LD_INT 1
38363: NEG
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 1
38371: NEG
38372: PUSH
38373: LD_INT 2
38375: NEG
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 0
38383: PUSH
38384: LD_INT 2
38386: NEG
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 1
38394: PUSH
38395: LD_INT 1
38397: NEG
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 2
38405: PUSH
38406: LD_INT 1
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 2
38415: PUSH
38416: LD_INT 2
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 1
38425: PUSH
38426: LD_INT 2
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 0
38435: PUSH
38436: LD_INT 2
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 1
38445: NEG
38446: PUSH
38447: LD_INT 1
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 2
38456: NEG
38457: PUSH
38458: LD_INT 1
38460: NEG
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 2
38468: NEG
38469: PUSH
38470: LD_INT 2
38472: NEG
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: LD_INT 2
38480: NEG
38481: PUSH
38482: LD_INT 3
38484: NEG
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 1
38492: NEG
38493: PUSH
38494: LD_INT 3
38496: NEG
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 0
38504: PUSH
38505: LD_INT 3
38507: NEG
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 1
38515: PUSH
38516: LD_INT 2
38518: NEG
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 3
38526: PUSH
38527: LD_INT 2
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 3
38536: PUSH
38537: LD_INT 3
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 2
38546: PUSH
38547: LD_INT 3
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 1
38556: PUSH
38557: LD_INT 3
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 0
38566: PUSH
38567: LD_INT 3
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 1
38576: NEG
38577: PUSH
38578: LD_INT 2
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 3
38587: NEG
38588: PUSH
38589: LD_INT 2
38591: NEG
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 3
38599: NEG
38600: PUSH
38601: LD_INT 3
38603: NEG
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38640: LD_ADDR_VAR 0 46
38644: PUSH
38645: LD_INT 0
38647: PUSH
38648: LD_INT 0
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 0
38657: PUSH
38658: LD_INT 1
38660: NEG
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 1
38668: PUSH
38669: LD_INT 0
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 1
38678: PUSH
38679: LD_INT 1
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 0
38688: PUSH
38689: LD_INT 1
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 1
38698: NEG
38699: PUSH
38700: LD_INT 0
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 1
38709: NEG
38710: PUSH
38711: LD_INT 1
38713: NEG
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 1
38721: NEG
38722: PUSH
38723: LD_INT 2
38725: NEG
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 0
38733: PUSH
38734: LD_INT 2
38736: NEG
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 1
38744: PUSH
38745: LD_INT 1
38747: NEG
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 2
38755: PUSH
38756: LD_INT 0
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 2
38765: PUSH
38766: LD_INT 1
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 1
38775: PUSH
38776: LD_INT 2
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 0
38785: PUSH
38786: LD_INT 2
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 1
38795: NEG
38796: PUSH
38797: LD_INT 1
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 2
38806: NEG
38807: PUSH
38808: LD_INT 0
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 2
38817: NEG
38818: PUSH
38819: LD_INT 1
38821: NEG
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 1
38829: NEG
38830: PUSH
38831: LD_INT 3
38833: NEG
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 0
38841: PUSH
38842: LD_INT 3
38844: NEG
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 1
38852: PUSH
38853: LD_INT 2
38855: NEG
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 2
38863: PUSH
38864: LD_INT 1
38866: NEG
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 3
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 3
38884: PUSH
38885: LD_INT 1
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 1
38894: PUSH
38895: LD_INT 3
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 0
38904: PUSH
38905: LD_INT 3
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 1
38914: NEG
38915: PUSH
38916: LD_INT 2
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 2
38925: NEG
38926: PUSH
38927: LD_INT 1
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 3
38936: NEG
38937: PUSH
38938: LD_INT 0
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 3
38947: NEG
38948: PUSH
38949: LD_INT 1
38951: NEG
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38988: LD_ADDR_VAR 0 47
38992: PUSH
38993: LD_INT 0
38995: PUSH
38996: LD_INT 0
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 0
39005: PUSH
39006: LD_INT 1
39008: NEG
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 1
39016: PUSH
39017: LD_INT 0
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 1
39026: PUSH
39027: LD_INT 1
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 0
39036: PUSH
39037: LD_INT 1
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 1
39046: NEG
39047: PUSH
39048: LD_INT 0
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 1
39057: NEG
39058: PUSH
39059: LD_INT 1
39061: NEG
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 1
39069: NEG
39070: PUSH
39071: LD_INT 2
39073: NEG
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 0
39081: PUSH
39082: LD_INT 2
39084: NEG
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 1
39092: PUSH
39093: LD_INT 1
39095: NEG
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 2
39103: NEG
39104: PUSH
39105: LD_INT 1
39107: NEG
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 2
39115: NEG
39116: PUSH
39117: LD_INT 2
39119: NEG
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39139: LD_ADDR_VAR 0 48
39143: PUSH
39144: LD_INT 0
39146: PUSH
39147: LD_INT 0
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 0
39156: PUSH
39157: LD_INT 1
39159: NEG
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 1
39167: PUSH
39168: LD_INT 0
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: LD_INT 1
39177: PUSH
39178: LD_INT 1
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 0
39187: PUSH
39188: LD_INT 1
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 1
39197: NEG
39198: PUSH
39199: LD_INT 0
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 1
39208: NEG
39209: PUSH
39210: LD_INT 1
39212: NEG
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 1
39220: NEG
39221: PUSH
39222: LD_INT 2
39224: NEG
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 0
39232: PUSH
39233: LD_INT 2
39235: NEG
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 1
39243: PUSH
39244: LD_INT 1
39246: NEG
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 2
39254: PUSH
39255: LD_INT 0
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 2
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39286: LD_ADDR_VAR 0 49
39290: PUSH
39291: LD_INT 0
39293: PUSH
39294: LD_INT 0
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 0
39303: PUSH
39304: LD_INT 1
39306: NEG
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 1
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 1
39324: PUSH
39325: LD_INT 1
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 0
39334: PUSH
39335: LD_INT 1
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 1
39344: NEG
39345: PUSH
39346: LD_INT 0
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 1
39355: NEG
39356: PUSH
39357: LD_INT 1
39359: NEG
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 1
39367: PUSH
39368: LD_INT 1
39370: NEG
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 2
39378: PUSH
39379: LD_INT 0
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 2
39388: PUSH
39389: LD_INT 1
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 2
39398: PUSH
39399: LD_INT 2
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 1
39408: PUSH
39409: LD_INT 2
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39430: LD_ADDR_VAR 0 50
39434: PUSH
39435: LD_INT 0
39437: PUSH
39438: LD_INT 0
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 0
39447: PUSH
39448: LD_INT 1
39450: NEG
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 1
39458: PUSH
39459: LD_INT 0
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 1
39468: PUSH
39469: LD_INT 1
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 0
39478: PUSH
39479: LD_INT 1
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 1
39488: NEG
39489: PUSH
39490: LD_INT 0
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 1
39499: NEG
39500: PUSH
39501: LD_INT 1
39503: NEG
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 2
39511: PUSH
39512: LD_INT 1
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 2
39521: PUSH
39522: LD_INT 2
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 1
39531: PUSH
39532: LD_INT 2
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 0
39541: PUSH
39542: LD_INT 2
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 1
39551: NEG
39552: PUSH
39553: LD_INT 1
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39574: LD_ADDR_VAR 0 51
39578: PUSH
39579: LD_INT 0
39581: PUSH
39582: LD_INT 0
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 0
39591: PUSH
39592: LD_INT 1
39594: NEG
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 1
39602: PUSH
39603: LD_INT 0
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 1
39612: PUSH
39613: LD_INT 1
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 0
39622: PUSH
39623: LD_INT 1
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 1
39632: NEG
39633: PUSH
39634: LD_INT 0
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 1
39643: NEG
39644: PUSH
39645: LD_INT 1
39647: NEG
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 1
39655: PUSH
39656: LD_INT 2
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 0
39665: PUSH
39666: LD_INT 2
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 1
39675: NEG
39676: PUSH
39677: LD_INT 1
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 2
39686: NEG
39687: PUSH
39688: LD_INT 0
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 2
39697: NEG
39698: PUSH
39699: LD_INT 1
39701: NEG
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39721: LD_ADDR_VAR 0 52
39725: PUSH
39726: LD_INT 0
39728: PUSH
39729: LD_INT 0
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 0
39738: PUSH
39739: LD_INT 1
39741: NEG
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 1
39749: PUSH
39750: LD_INT 0
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 1
39759: PUSH
39760: LD_INT 1
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 0
39769: PUSH
39770: LD_INT 1
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 1
39779: NEG
39780: PUSH
39781: LD_INT 0
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 1
39790: NEG
39791: PUSH
39792: LD_INT 1
39794: NEG
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 1
39802: NEG
39803: PUSH
39804: LD_INT 2
39806: NEG
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 1
39814: NEG
39815: PUSH
39816: LD_INT 1
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 2
39825: NEG
39826: PUSH
39827: LD_INT 0
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 2
39836: NEG
39837: PUSH
39838: LD_INT 1
39840: NEG
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 2
39848: NEG
39849: PUSH
39850: LD_INT 2
39852: NEG
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39872: LD_ADDR_VAR 0 53
39876: PUSH
39877: LD_INT 0
39879: PUSH
39880: LD_INT 0
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 0
39889: PUSH
39890: LD_INT 1
39892: NEG
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 1
39900: PUSH
39901: LD_INT 0
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 1
39910: PUSH
39911: LD_INT 1
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 0
39920: PUSH
39921: LD_INT 1
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 1
39930: NEG
39931: PUSH
39932: LD_INT 0
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 1
39941: NEG
39942: PUSH
39943: LD_INT 1
39945: NEG
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 1
39953: NEG
39954: PUSH
39955: LD_INT 2
39957: NEG
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 0
39965: PUSH
39966: LD_INT 2
39968: NEG
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 1
39976: PUSH
39977: LD_INT 1
39979: NEG
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 2
39987: PUSH
39988: LD_INT 0
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 2
39997: PUSH
39998: LD_INT 1
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 2
40007: PUSH
40008: LD_INT 2
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 1
40017: PUSH
40018: LD_INT 2
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 0
40027: PUSH
40028: LD_INT 2
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 1
40037: NEG
40038: PUSH
40039: LD_INT 1
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 2
40048: NEG
40049: PUSH
40050: LD_INT 0
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 2
40059: NEG
40060: PUSH
40061: LD_INT 1
40063: NEG
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 2
40071: NEG
40072: PUSH
40073: LD_INT 2
40075: NEG
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40102: LD_ADDR_VAR 0 54
40106: PUSH
40107: LD_INT 0
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 0
40119: PUSH
40120: LD_INT 1
40122: NEG
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 1
40130: PUSH
40131: LD_INT 0
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 1
40140: PUSH
40141: LD_INT 1
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 0
40150: PUSH
40151: LD_INT 1
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 1
40160: NEG
40161: PUSH
40162: LD_INT 0
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 1
40171: NEG
40172: PUSH
40173: LD_INT 1
40175: NEG
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 1
40183: NEG
40184: PUSH
40185: LD_INT 2
40187: NEG
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 0
40195: PUSH
40196: LD_INT 2
40198: NEG
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 1
40206: PUSH
40207: LD_INT 1
40209: NEG
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 2
40217: PUSH
40218: LD_INT 0
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 2
40227: PUSH
40228: LD_INT 1
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 2
40237: PUSH
40238: LD_INT 2
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 1
40247: PUSH
40248: LD_INT 2
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 0
40257: PUSH
40258: LD_INT 2
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 1
40267: NEG
40268: PUSH
40269: LD_INT 1
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 2
40278: NEG
40279: PUSH
40280: LD_INT 0
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 2
40289: NEG
40290: PUSH
40291: LD_INT 1
40293: NEG
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 2
40301: NEG
40302: PUSH
40303: LD_INT 2
40305: NEG
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40332: LD_ADDR_VAR 0 55
40336: PUSH
40337: LD_INT 0
40339: PUSH
40340: LD_INT 0
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 0
40349: PUSH
40350: LD_INT 1
40352: NEG
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: LD_INT 0
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 1
40370: PUSH
40371: LD_INT 1
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 0
40380: PUSH
40381: LD_INT 1
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 1
40390: NEG
40391: PUSH
40392: LD_INT 0
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 1
40401: NEG
40402: PUSH
40403: LD_INT 1
40405: NEG
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 1
40413: NEG
40414: PUSH
40415: LD_INT 2
40417: NEG
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 0
40425: PUSH
40426: LD_INT 2
40428: NEG
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 1
40436: PUSH
40437: LD_INT 1
40439: NEG
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 2
40447: PUSH
40448: LD_INT 0
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 2
40457: PUSH
40458: LD_INT 1
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 2
40467: PUSH
40468: LD_INT 2
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 1
40477: PUSH
40478: LD_INT 2
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 0
40487: PUSH
40488: LD_INT 2
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 1
40497: NEG
40498: PUSH
40499: LD_INT 1
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 2
40508: NEG
40509: PUSH
40510: LD_INT 0
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 2
40519: NEG
40520: PUSH
40521: LD_INT 1
40523: NEG
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 2
40531: NEG
40532: PUSH
40533: LD_INT 2
40535: NEG
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40562: LD_ADDR_VAR 0 56
40566: PUSH
40567: LD_INT 0
40569: PUSH
40570: LD_INT 0
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 0
40579: PUSH
40580: LD_INT 1
40582: NEG
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 1
40590: PUSH
40591: LD_INT 0
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 1
40600: PUSH
40601: LD_INT 1
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 0
40610: PUSH
40611: LD_INT 1
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 1
40620: NEG
40621: PUSH
40622: LD_INT 0
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 1
40631: NEG
40632: PUSH
40633: LD_INT 1
40635: NEG
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 1
40643: NEG
40644: PUSH
40645: LD_INT 2
40647: NEG
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 0
40655: PUSH
40656: LD_INT 2
40658: NEG
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 1
40666: PUSH
40667: LD_INT 1
40669: NEG
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 2
40677: PUSH
40678: LD_INT 0
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 2
40687: PUSH
40688: LD_INT 1
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 2
40697: PUSH
40698: LD_INT 2
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 1
40707: PUSH
40708: LD_INT 2
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 0
40717: PUSH
40718: LD_INT 2
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 1
40727: NEG
40728: PUSH
40729: LD_INT 1
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 2
40738: NEG
40739: PUSH
40740: LD_INT 0
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 2
40749: NEG
40750: PUSH
40751: LD_INT 1
40753: NEG
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 2
40761: NEG
40762: PUSH
40763: LD_INT 2
40765: NEG
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40792: LD_ADDR_VAR 0 57
40796: PUSH
40797: LD_INT 0
40799: PUSH
40800: LD_INT 0
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 0
40809: PUSH
40810: LD_INT 1
40812: NEG
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 1
40820: PUSH
40821: LD_INT 0
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 1
40830: PUSH
40831: LD_INT 1
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 0
40840: PUSH
40841: LD_INT 1
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 1
40850: NEG
40851: PUSH
40852: LD_INT 0
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 1
40861: NEG
40862: PUSH
40863: LD_INT 1
40865: NEG
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 1
40873: NEG
40874: PUSH
40875: LD_INT 2
40877: NEG
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 0
40885: PUSH
40886: LD_INT 2
40888: NEG
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 1
40896: PUSH
40897: LD_INT 1
40899: NEG
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 2
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 2
40917: PUSH
40918: LD_INT 1
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 2
40927: PUSH
40928: LD_INT 2
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 1
40937: PUSH
40938: LD_INT 2
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 0
40947: PUSH
40948: LD_INT 2
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 1
40957: NEG
40958: PUSH
40959: LD_INT 1
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 2
40968: NEG
40969: PUSH
40970: LD_INT 0
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 2
40979: NEG
40980: PUSH
40981: LD_INT 1
40983: NEG
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 2
40991: NEG
40992: PUSH
40993: LD_INT 2
40995: NEG
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41022: LD_ADDR_VAR 0 58
41026: PUSH
41027: LD_INT 0
41029: PUSH
41030: LD_INT 0
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 0
41039: PUSH
41040: LD_INT 1
41042: NEG
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 1
41050: PUSH
41051: LD_INT 0
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 1
41060: PUSH
41061: LD_INT 1
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 0
41070: PUSH
41071: LD_INT 1
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 1
41080: NEG
41081: PUSH
41082: LD_INT 0
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 1
41091: NEG
41092: PUSH
41093: LD_INT 1
41095: NEG
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 1
41103: NEG
41104: PUSH
41105: LD_INT 2
41107: NEG
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 0
41115: PUSH
41116: LD_INT 2
41118: NEG
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 1
41126: PUSH
41127: LD_INT 1
41129: NEG
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 2
41137: PUSH
41138: LD_INT 0
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 2
41147: PUSH
41148: LD_INT 1
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 2
41157: PUSH
41158: LD_INT 2
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 1
41167: PUSH
41168: LD_INT 2
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 0
41177: PUSH
41178: LD_INT 2
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 1
41187: NEG
41188: PUSH
41189: LD_INT 1
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 2
41198: NEG
41199: PUSH
41200: LD_INT 0
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 2
41209: NEG
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 2
41221: NEG
41222: PUSH
41223: LD_INT 2
41225: NEG
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41252: LD_ADDR_VAR 0 59
41256: PUSH
41257: LD_INT 0
41259: PUSH
41260: LD_INT 0
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 0
41269: PUSH
41270: LD_INT 1
41272: NEG
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 1
41280: PUSH
41281: LD_INT 0
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 1
41290: PUSH
41291: LD_INT 1
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 0
41300: PUSH
41301: LD_INT 1
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 1
41310: NEG
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 1
41321: NEG
41322: PUSH
41323: LD_INT 1
41325: NEG
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41340: LD_ADDR_VAR 0 60
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: LD_INT 0
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 0
41357: PUSH
41358: LD_INT 1
41360: NEG
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 1
41368: PUSH
41369: LD_INT 0
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 1
41378: PUSH
41379: LD_INT 1
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 0
41388: PUSH
41389: LD_INT 1
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 1
41398: NEG
41399: PUSH
41400: LD_INT 0
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 1
41409: NEG
41410: PUSH
41411: LD_INT 1
41413: NEG
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41428: LD_ADDR_VAR 0 61
41432: PUSH
41433: LD_INT 0
41435: PUSH
41436: LD_INT 0
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 0
41445: PUSH
41446: LD_INT 1
41448: NEG
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 1
41456: PUSH
41457: LD_INT 0
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 1
41466: PUSH
41467: LD_INT 1
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 0
41476: PUSH
41477: LD_INT 1
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: PUSH
41488: LD_INT 0
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 1
41497: NEG
41498: PUSH
41499: LD_INT 1
41501: NEG
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41516: LD_ADDR_VAR 0 62
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: LD_INT 0
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 0
41533: PUSH
41534: LD_INT 1
41536: NEG
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: LD_INT 0
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 1
41554: PUSH
41555: LD_INT 1
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 0
41564: PUSH
41565: LD_INT 1
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 1
41574: NEG
41575: PUSH
41576: LD_INT 0
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 1
41585: NEG
41586: PUSH
41587: LD_INT 1
41589: NEG
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41604: LD_ADDR_VAR 0 63
41608: PUSH
41609: LD_INT 0
41611: PUSH
41612: LD_INT 0
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 0
41621: PUSH
41622: LD_INT 1
41624: NEG
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 1
41632: PUSH
41633: LD_INT 0
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 1
41642: PUSH
41643: LD_INT 1
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 0
41652: PUSH
41653: LD_INT 1
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 1
41662: NEG
41663: PUSH
41664: LD_INT 0
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 1
41673: NEG
41674: PUSH
41675: LD_INT 1
41677: NEG
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41692: LD_ADDR_VAR 0 64
41696: PUSH
41697: LD_INT 0
41699: PUSH
41700: LD_INT 0
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: LD_INT 1
41712: NEG
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 1
41720: PUSH
41721: LD_INT 0
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 1
41730: PUSH
41731: LD_INT 1
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: LD_INT 1
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 1
41750: NEG
41751: PUSH
41752: LD_INT 0
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 1
41761: NEG
41762: PUSH
41763: LD_INT 1
41765: NEG
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: ST_TO_ADDR
// end ; 1 :
41780: GO 47677
41782: LD_INT 1
41784: DOUBLE
41785: EQUAL
41786: IFTRUE 41790
41788: GO 44413
41790: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41791: LD_ADDR_VAR 0 11
41795: PUSH
41796: LD_INT 1
41798: NEG
41799: PUSH
41800: LD_INT 3
41802: NEG
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 0
41810: PUSH
41811: LD_INT 3
41813: NEG
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 1
41821: PUSH
41822: LD_INT 2
41824: NEG
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: LIST
41834: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41835: LD_ADDR_VAR 0 12
41839: PUSH
41840: LD_INT 2
41842: PUSH
41843: LD_INT 1
41845: NEG
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 3
41853: PUSH
41854: LD_INT 0
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 3
41863: PUSH
41864: LD_INT 1
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: LIST
41875: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41876: LD_ADDR_VAR 0 13
41880: PUSH
41881: LD_INT 3
41883: PUSH
41884: LD_INT 2
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 3
41893: PUSH
41894: LD_INT 3
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 2
41903: PUSH
41904: LD_INT 3
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: LIST
41915: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41916: LD_ADDR_VAR 0 14
41920: PUSH
41921: LD_INT 1
41923: PUSH
41924: LD_INT 3
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 0
41933: PUSH
41934: LD_INT 3
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 1
41943: NEG
41944: PUSH
41945: LD_INT 2
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: LIST
41956: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41957: LD_ADDR_VAR 0 15
41961: PUSH
41962: LD_INT 2
41964: NEG
41965: PUSH
41966: LD_INT 1
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 3
41975: NEG
41976: PUSH
41977: LD_INT 0
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 3
41986: NEG
41987: PUSH
41988: LD_INT 1
41990: NEG
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: LIST
42000: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42001: LD_ADDR_VAR 0 16
42005: PUSH
42006: LD_INT 2
42008: NEG
42009: PUSH
42010: LD_INT 3
42012: NEG
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 3
42020: NEG
42021: PUSH
42022: LD_INT 2
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 3
42032: NEG
42033: PUSH
42034: LD_INT 3
42036: NEG
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: LIST
42046: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42047: LD_ADDR_VAR 0 17
42051: PUSH
42052: LD_INT 1
42054: NEG
42055: PUSH
42056: LD_INT 3
42058: NEG
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 0
42066: PUSH
42067: LD_INT 3
42069: NEG
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 1
42077: PUSH
42078: LD_INT 2
42080: NEG
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: LIST
42090: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42091: LD_ADDR_VAR 0 18
42095: PUSH
42096: LD_INT 2
42098: PUSH
42099: LD_INT 1
42101: NEG
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 3
42109: PUSH
42110: LD_INT 0
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 3
42119: PUSH
42120: LD_INT 1
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: LIST
42131: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42132: LD_ADDR_VAR 0 19
42136: PUSH
42137: LD_INT 3
42139: PUSH
42140: LD_INT 2
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 3
42149: PUSH
42150: LD_INT 3
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 2
42159: PUSH
42160: LD_INT 3
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: LIST
42171: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42172: LD_ADDR_VAR 0 20
42176: PUSH
42177: LD_INT 1
42179: PUSH
42180: LD_INT 3
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 0
42189: PUSH
42190: LD_INT 3
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 1
42199: NEG
42200: PUSH
42201: LD_INT 2
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: LIST
42212: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42213: LD_ADDR_VAR 0 21
42217: PUSH
42218: LD_INT 2
42220: NEG
42221: PUSH
42222: LD_INT 1
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 3
42231: NEG
42232: PUSH
42233: LD_INT 0
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 3
42242: NEG
42243: PUSH
42244: LD_INT 1
42246: NEG
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: LIST
42256: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42257: LD_ADDR_VAR 0 22
42261: PUSH
42262: LD_INT 2
42264: NEG
42265: PUSH
42266: LD_INT 3
42268: NEG
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 3
42276: NEG
42277: PUSH
42278: LD_INT 2
42280: NEG
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 3
42288: NEG
42289: PUSH
42290: LD_INT 3
42292: NEG
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: LIST
42302: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42303: LD_ADDR_VAR 0 23
42307: PUSH
42308: LD_INT 0
42310: PUSH
42311: LD_INT 3
42313: NEG
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 1
42321: NEG
42322: PUSH
42323: LD_INT 4
42325: NEG
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 1
42333: PUSH
42334: LD_INT 3
42336: NEG
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: LIST
42346: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42347: LD_ADDR_VAR 0 24
42351: PUSH
42352: LD_INT 3
42354: PUSH
42355: LD_INT 0
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 3
42364: PUSH
42365: LD_INT 1
42367: NEG
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 4
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: LIST
42387: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42388: LD_ADDR_VAR 0 25
42392: PUSH
42393: LD_INT 3
42395: PUSH
42396: LD_INT 3
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 4
42405: PUSH
42406: LD_INT 3
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 3
42415: PUSH
42416: LD_INT 4
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: LIST
42427: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42428: LD_ADDR_VAR 0 26
42432: PUSH
42433: LD_INT 0
42435: PUSH
42436: LD_INT 3
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 1
42445: PUSH
42446: LD_INT 4
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 1
42455: NEG
42456: PUSH
42457: LD_INT 3
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: LIST
42468: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42469: LD_ADDR_VAR 0 27
42473: PUSH
42474: LD_INT 3
42476: NEG
42477: PUSH
42478: LD_INT 0
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 3
42487: NEG
42488: PUSH
42489: LD_INT 1
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 4
42498: NEG
42499: PUSH
42500: LD_INT 1
42502: NEG
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: LIST
42512: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42513: LD_ADDR_VAR 0 28
42517: PUSH
42518: LD_INT 3
42520: NEG
42521: PUSH
42522: LD_INT 3
42524: NEG
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 3
42532: NEG
42533: PUSH
42534: LD_INT 4
42536: NEG
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 4
42544: NEG
42545: PUSH
42546: LD_INT 3
42548: NEG
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: LIST
42558: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42559: LD_ADDR_VAR 0 29
42563: PUSH
42564: LD_INT 1
42566: NEG
42567: PUSH
42568: LD_INT 3
42570: NEG
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: LD_INT 3
42581: NEG
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 1
42589: PUSH
42590: LD_INT 2
42592: NEG
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 1
42600: NEG
42601: PUSH
42602: LD_INT 4
42604: NEG
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 0
42612: PUSH
42613: LD_INT 4
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 1
42623: PUSH
42624: LD_INT 3
42626: NEG
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 1
42634: NEG
42635: PUSH
42636: LD_INT 5
42638: NEG
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: LD_INT 5
42649: NEG
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 1
42657: PUSH
42658: LD_INT 4
42660: NEG
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 1
42668: NEG
42669: PUSH
42670: LD_INT 6
42672: NEG
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 0
42680: PUSH
42681: LD_INT 6
42683: NEG
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 1
42691: PUSH
42692: LD_INT 5
42694: NEG
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42714: LD_ADDR_VAR 0 30
42718: PUSH
42719: LD_INT 2
42721: PUSH
42722: LD_INT 1
42724: NEG
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 3
42732: PUSH
42733: LD_INT 0
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 3
42742: PUSH
42743: LD_INT 1
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 3
42752: PUSH
42753: LD_INT 1
42755: NEG
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 4
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 4
42773: PUSH
42774: LD_INT 1
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 4
42783: PUSH
42784: LD_INT 1
42786: NEG
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 5
42794: PUSH
42795: LD_INT 0
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 5
42804: PUSH
42805: LD_INT 1
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 5
42814: PUSH
42815: LD_INT 1
42817: NEG
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 6
42825: PUSH
42826: LD_INT 0
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 6
42835: PUSH
42836: LD_INT 1
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42857: LD_ADDR_VAR 0 31
42861: PUSH
42862: LD_INT 3
42864: PUSH
42865: LD_INT 2
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 3
42874: PUSH
42875: LD_INT 3
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 2
42884: PUSH
42885: LD_INT 3
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 4
42894: PUSH
42895: LD_INT 3
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 4
42904: PUSH
42905: LD_INT 4
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 3
42914: PUSH
42915: LD_INT 4
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 5
42924: PUSH
42925: LD_INT 4
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 5
42934: PUSH
42935: LD_INT 5
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 4
42944: PUSH
42945: LD_INT 5
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 6
42954: PUSH
42955: LD_INT 5
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 6
42964: PUSH
42965: LD_INT 6
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 5
42974: PUSH
42975: LD_INT 6
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42996: LD_ADDR_VAR 0 32
43000: PUSH
43001: LD_INT 1
43003: PUSH
43004: LD_INT 3
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 0
43013: PUSH
43014: LD_INT 3
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 1
43023: NEG
43024: PUSH
43025: LD_INT 2
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 1
43034: PUSH
43035: LD_INT 4
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 0
43044: PUSH
43045: LD_INT 4
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 1
43054: NEG
43055: PUSH
43056: LD_INT 3
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 1
43065: PUSH
43066: LD_INT 5
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 0
43075: PUSH
43076: LD_INT 5
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 1
43085: NEG
43086: PUSH
43087: LD_INT 4
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 1
43096: PUSH
43097: LD_INT 6
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 0
43106: PUSH
43107: LD_INT 6
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 1
43116: NEG
43117: PUSH
43118: LD_INT 5
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43139: LD_ADDR_VAR 0 33
43143: PUSH
43144: LD_INT 2
43146: NEG
43147: PUSH
43148: LD_INT 1
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 3
43157: NEG
43158: PUSH
43159: LD_INT 0
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 3
43168: NEG
43169: PUSH
43170: LD_INT 1
43172: NEG
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 3
43180: NEG
43181: PUSH
43182: LD_INT 1
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 4
43191: NEG
43192: PUSH
43193: LD_INT 0
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 4
43202: NEG
43203: PUSH
43204: LD_INT 1
43206: NEG
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 4
43214: NEG
43215: PUSH
43216: LD_INT 1
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 5
43225: NEG
43226: PUSH
43227: LD_INT 0
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 5
43236: NEG
43237: PUSH
43238: LD_INT 1
43240: NEG
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 5
43248: NEG
43249: PUSH
43250: LD_INT 1
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 6
43259: NEG
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 6
43270: NEG
43271: PUSH
43272: LD_INT 1
43274: NEG
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43294: LD_ADDR_VAR 0 34
43298: PUSH
43299: LD_INT 2
43301: NEG
43302: PUSH
43303: LD_INT 3
43305: NEG
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 3
43313: NEG
43314: PUSH
43315: LD_INT 2
43317: NEG
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 3
43325: NEG
43326: PUSH
43327: LD_INT 3
43329: NEG
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 3
43337: NEG
43338: PUSH
43339: LD_INT 4
43341: NEG
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 4
43349: NEG
43350: PUSH
43351: LD_INT 3
43353: NEG
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 4
43361: NEG
43362: PUSH
43363: LD_INT 4
43365: NEG
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 4
43373: NEG
43374: PUSH
43375: LD_INT 5
43377: NEG
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 5
43385: NEG
43386: PUSH
43387: LD_INT 4
43389: NEG
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 5
43397: NEG
43398: PUSH
43399: LD_INT 5
43401: NEG
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 5
43409: NEG
43410: PUSH
43411: LD_INT 6
43413: NEG
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 6
43421: NEG
43422: PUSH
43423: LD_INT 5
43425: NEG
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 6
43433: NEG
43434: PUSH
43435: LD_INT 6
43437: NEG
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43457: LD_ADDR_VAR 0 41
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: LD_INT 2
43467: NEG
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 1
43475: NEG
43476: PUSH
43477: LD_INT 3
43479: NEG
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 1
43487: PUSH
43488: LD_INT 2
43490: NEG
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: LIST
43500: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43501: LD_ADDR_VAR 0 42
43505: PUSH
43506: LD_INT 2
43508: PUSH
43509: LD_INT 0
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 2
43518: PUSH
43519: LD_INT 1
43521: NEG
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 3
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: LIST
43541: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43542: LD_ADDR_VAR 0 43
43546: PUSH
43547: LD_INT 2
43549: PUSH
43550: LD_INT 2
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 3
43559: PUSH
43560: LD_INT 2
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 2
43569: PUSH
43570: LD_INT 3
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: LIST
43581: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43582: LD_ADDR_VAR 0 44
43586: PUSH
43587: LD_INT 0
43589: PUSH
43590: LD_INT 2
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 1
43599: PUSH
43600: LD_INT 3
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 1
43609: NEG
43610: PUSH
43611: LD_INT 2
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: LIST
43622: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43623: LD_ADDR_VAR 0 45
43627: PUSH
43628: LD_INT 2
43630: NEG
43631: PUSH
43632: LD_INT 0
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 2
43641: NEG
43642: PUSH
43643: LD_INT 1
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 3
43652: NEG
43653: PUSH
43654: LD_INT 1
43656: NEG
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: LIST
43666: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43667: LD_ADDR_VAR 0 46
43671: PUSH
43672: LD_INT 2
43674: NEG
43675: PUSH
43676: LD_INT 2
43678: NEG
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 2
43686: NEG
43687: PUSH
43688: LD_INT 3
43690: NEG
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 3
43698: NEG
43699: PUSH
43700: LD_INT 2
43702: NEG
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: LIST
43712: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43713: LD_ADDR_VAR 0 47
43717: PUSH
43718: LD_INT 2
43720: NEG
43721: PUSH
43722: LD_INT 3
43724: NEG
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: NEG
43733: PUSH
43734: LD_INT 3
43736: NEG
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43746: LD_ADDR_VAR 0 48
43750: PUSH
43751: LD_INT 1
43753: PUSH
43754: LD_INT 2
43756: NEG
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 2
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43777: LD_ADDR_VAR 0 49
43781: PUSH
43782: LD_INT 3
43784: PUSH
43785: LD_INT 1
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 3
43794: PUSH
43795: LD_INT 2
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43806: LD_ADDR_VAR 0 50
43810: PUSH
43811: LD_INT 2
43813: PUSH
43814: LD_INT 3
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 1
43823: PUSH
43824: LD_INT 3
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43835: LD_ADDR_VAR 0 51
43839: PUSH
43840: LD_INT 1
43842: NEG
43843: PUSH
43844: LD_INT 2
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 2
43853: NEG
43854: PUSH
43855: LD_INT 1
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43866: LD_ADDR_VAR 0 52
43870: PUSH
43871: LD_INT 3
43873: NEG
43874: PUSH
43875: LD_INT 1
43877: NEG
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 3
43885: NEG
43886: PUSH
43887: LD_INT 2
43889: NEG
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43899: LD_ADDR_VAR 0 53
43903: PUSH
43904: LD_INT 1
43906: NEG
43907: PUSH
43908: LD_INT 3
43910: NEG
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 0
43918: PUSH
43919: LD_INT 3
43921: NEG
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: LD_INT 2
43932: NEG
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: LIST
43942: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43943: LD_ADDR_VAR 0 54
43947: PUSH
43948: LD_INT 2
43950: PUSH
43951: LD_INT 1
43953: NEG
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 3
43961: PUSH
43962: LD_INT 0
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 3
43971: PUSH
43972: LD_INT 1
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: LIST
43983: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43984: LD_ADDR_VAR 0 55
43988: PUSH
43989: LD_INT 3
43991: PUSH
43992: LD_INT 2
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 3
44001: PUSH
44002: LD_INT 3
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 2
44011: PUSH
44012: LD_INT 3
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: LIST
44023: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44024: LD_ADDR_VAR 0 56
44028: PUSH
44029: LD_INT 1
44031: PUSH
44032: LD_INT 3
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 0
44041: PUSH
44042: LD_INT 3
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 1
44051: NEG
44052: PUSH
44053: LD_INT 2
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: LIST
44064: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44065: LD_ADDR_VAR 0 57
44069: PUSH
44070: LD_INT 2
44072: NEG
44073: PUSH
44074: LD_INT 1
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 3
44083: NEG
44084: PUSH
44085: LD_INT 0
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 3
44094: NEG
44095: PUSH
44096: LD_INT 1
44098: NEG
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: LIST
44108: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44109: LD_ADDR_VAR 0 58
44113: PUSH
44114: LD_INT 2
44116: NEG
44117: PUSH
44118: LD_INT 3
44120: NEG
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 3
44128: NEG
44129: PUSH
44130: LD_INT 2
44132: NEG
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 3
44140: NEG
44141: PUSH
44142: LD_INT 3
44144: NEG
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: LIST
44154: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44155: LD_ADDR_VAR 0 59
44159: PUSH
44160: LD_INT 1
44162: NEG
44163: PUSH
44164: LD_INT 2
44166: NEG
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 0
44174: PUSH
44175: LD_INT 2
44177: NEG
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 1
44185: PUSH
44186: LD_INT 1
44188: NEG
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: LIST
44198: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44199: LD_ADDR_VAR 0 60
44203: PUSH
44204: LD_INT 1
44206: PUSH
44207: LD_INT 1
44209: NEG
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 2
44217: PUSH
44218: LD_INT 0
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 2
44227: PUSH
44228: LD_INT 1
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: LIST
44239: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44240: LD_ADDR_VAR 0 61
44244: PUSH
44245: LD_INT 2
44247: PUSH
44248: LD_INT 1
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 2
44257: PUSH
44258: LD_INT 2
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 1
44267: PUSH
44268: LD_INT 2
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: LIST
44279: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44280: LD_ADDR_VAR 0 62
44284: PUSH
44285: LD_INT 1
44287: PUSH
44288: LD_INT 2
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: LD_INT 2
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: LD_INT 1
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: LIST
44320: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44321: LD_ADDR_VAR 0 63
44325: PUSH
44326: LD_INT 1
44328: NEG
44329: PUSH
44330: LD_INT 1
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 2
44339: NEG
44340: PUSH
44341: LD_INT 0
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 2
44350: NEG
44351: PUSH
44352: LD_INT 1
44354: NEG
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: LIST
44364: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44365: LD_ADDR_VAR 0 64
44369: PUSH
44370: LD_INT 1
44372: NEG
44373: PUSH
44374: LD_INT 2
44376: NEG
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 2
44384: NEG
44385: PUSH
44386: LD_INT 1
44388: NEG
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 2
44396: NEG
44397: PUSH
44398: LD_INT 2
44400: NEG
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: LIST
44410: ST_TO_ADDR
// end ; 2 :
44411: GO 47677
44413: LD_INT 2
44415: DOUBLE
44416: EQUAL
44417: IFTRUE 44421
44419: GO 47676
44421: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44422: LD_ADDR_VAR 0 29
44426: PUSH
44427: LD_INT 4
44429: PUSH
44430: LD_INT 0
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 4
44439: PUSH
44440: LD_INT 1
44442: NEG
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 5
44450: PUSH
44451: LD_INT 0
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 5
44460: PUSH
44461: LD_INT 1
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 4
44470: PUSH
44471: LD_INT 1
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 3
44480: PUSH
44481: LD_INT 0
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 3
44490: PUSH
44491: LD_INT 1
44493: NEG
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 3
44501: PUSH
44502: LD_INT 2
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 5
44512: PUSH
44513: LD_INT 2
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 3
44522: PUSH
44523: LD_INT 3
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 3
44532: PUSH
44533: LD_INT 2
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 4
44542: PUSH
44543: LD_INT 3
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 4
44552: PUSH
44553: LD_INT 4
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 3
44562: PUSH
44563: LD_INT 4
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 2
44572: PUSH
44573: LD_INT 3
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 2
44582: PUSH
44583: LD_INT 2
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 4
44592: PUSH
44593: LD_INT 2
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 2
44602: PUSH
44603: LD_INT 4
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 0
44612: PUSH
44613: LD_INT 4
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: LD_INT 3
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 1
44632: PUSH
44633: LD_INT 4
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 1
44642: PUSH
44643: LD_INT 5
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 0
44652: PUSH
44653: LD_INT 5
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 1
44662: NEG
44663: PUSH
44664: LD_INT 4
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 1
44673: NEG
44674: PUSH
44675: LD_INT 3
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 2
44684: PUSH
44685: LD_INT 5
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 2
44694: NEG
44695: PUSH
44696: LD_INT 3
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 3
44705: NEG
44706: PUSH
44707: LD_INT 0
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 3
44716: NEG
44717: PUSH
44718: LD_INT 1
44720: NEG
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 2
44728: NEG
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 2
44739: NEG
44740: PUSH
44741: LD_INT 1
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 3
44750: NEG
44751: PUSH
44752: LD_INT 1
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 4
44761: NEG
44762: PUSH
44763: LD_INT 0
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 4
44772: NEG
44773: PUSH
44774: LD_INT 1
44776: NEG
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 4
44784: NEG
44785: PUSH
44786: LD_INT 2
44788: NEG
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 2
44796: NEG
44797: PUSH
44798: LD_INT 2
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 4
44807: NEG
44808: PUSH
44809: LD_INT 4
44811: NEG
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 4
44819: NEG
44820: PUSH
44821: LD_INT 5
44823: NEG
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 3
44831: NEG
44832: PUSH
44833: LD_INT 4
44835: NEG
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 3
44843: NEG
44844: PUSH
44845: LD_INT 3
44847: NEG
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 4
44855: NEG
44856: PUSH
44857: LD_INT 3
44859: NEG
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 5
44867: NEG
44868: PUSH
44869: LD_INT 4
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 5
44879: NEG
44880: PUSH
44881: LD_INT 5
44883: NEG
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 3
44891: NEG
44892: PUSH
44893: LD_INT 5
44895: NEG
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 5
44903: NEG
44904: PUSH
44905: LD_INT 3
44907: NEG
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44960: LD_ADDR_VAR 0 30
44964: PUSH
44965: LD_INT 4
44967: PUSH
44968: LD_INT 4
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 4
44977: PUSH
44978: LD_INT 3
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 5
44987: PUSH
44988: LD_INT 4
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 5
44997: PUSH
44998: LD_INT 5
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 4
45007: PUSH
45008: LD_INT 5
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 3
45017: PUSH
45018: LD_INT 4
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 3
45027: PUSH
45028: LD_INT 3
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 5
45037: PUSH
45038: LD_INT 3
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 3
45047: PUSH
45048: LD_INT 5
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 0
45057: PUSH
45058: LD_INT 3
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: LD_INT 2
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: LD_INT 3
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 1
45087: PUSH
45088: LD_INT 4
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 0
45097: PUSH
45098: LD_INT 4
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: NEG
45108: PUSH
45109: LD_INT 3
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 1
45118: NEG
45119: PUSH
45120: LD_INT 2
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 2
45129: PUSH
45130: LD_INT 4
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 2
45139: NEG
45140: PUSH
45141: LD_INT 2
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 4
45150: NEG
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 4
45161: NEG
45162: PUSH
45163: LD_INT 1
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 3
45173: NEG
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 3
45184: NEG
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 4
45195: NEG
45196: PUSH
45197: LD_INT 1
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 5
45206: NEG
45207: PUSH
45208: LD_INT 0
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 5
45217: NEG
45218: PUSH
45219: LD_INT 1
45221: NEG
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 5
45229: NEG
45230: PUSH
45231: LD_INT 2
45233: NEG
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 3
45241: NEG
45242: PUSH
45243: LD_INT 2
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 3
45252: NEG
45253: PUSH
45254: LD_INT 3
45256: NEG
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 3
45264: NEG
45265: PUSH
45266: LD_INT 4
45268: NEG
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 2
45276: NEG
45277: PUSH
45278: LD_INT 3
45280: NEG
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 2
45288: NEG
45289: PUSH
45290: LD_INT 2
45292: NEG
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 3
45300: NEG
45301: PUSH
45302: LD_INT 2
45304: NEG
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 4
45312: NEG
45313: PUSH
45314: LD_INT 3
45316: NEG
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 4
45324: NEG
45325: PUSH
45326: LD_INT 4
45328: NEG
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 2
45336: NEG
45337: PUSH
45338: LD_INT 4
45340: NEG
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 4
45348: NEG
45349: PUSH
45350: LD_INT 2
45352: NEG
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: LD_INT 4
45363: NEG
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 0
45371: PUSH
45372: LD_INT 5
45374: NEG
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 1
45382: PUSH
45383: LD_INT 4
45385: NEG
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 1
45393: PUSH
45394: LD_INT 3
45396: NEG
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 0
45404: PUSH
45405: LD_INT 3
45407: NEG
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 1
45415: NEG
45416: PUSH
45417: LD_INT 4
45419: NEG
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 1
45427: NEG
45428: PUSH
45429: LD_INT 5
45431: NEG
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 2
45439: PUSH
45440: LD_INT 3
45442: NEG
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 2
45450: NEG
45451: PUSH
45452: LD_INT 5
45454: NEG
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45507: LD_ADDR_VAR 0 31
45511: PUSH
45512: LD_INT 0
45514: PUSH
45515: LD_INT 4
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: LD_INT 3
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: LD_INT 4
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: LD_INT 5
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: LD_INT 5
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 1
45564: NEG
45565: PUSH
45566: LD_INT 4
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: LD_INT 3
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 2
45586: PUSH
45587: LD_INT 5
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 2
45596: NEG
45597: PUSH
45598: LD_INT 3
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 3
45607: NEG
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 3
45618: NEG
45619: PUSH
45620: LD_INT 1
45622: NEG
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 2
45630: NEG
45631: PUSH
45632: LD_INT 0
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 2
45641: NEG
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 3
45652: NEG
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 4
45663: NEG
45664: PUSH
45665: LD_INT 0
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 4
45674: NEG
45675: PUSH
45676: LD_INT 1
45678: NEG
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 4
45686: NEG
45687: PUSH
45688: LD_INT 2
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 2
45698: NEG
45699: PUSH
45700: LD_INT 2
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 4
45709: NEG
45710: PUSH
45711: LD_INT 4
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 4
45721: NEG
45722: PUSH
45723: LD_INT 5
45725: NEG
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 3
45733: NEG
45734: PUSH
45735: LD_INT 4
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 3
45745: NEG
45746: PUSH
45747: LD_INT 3
45749: NEG
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 4
45757: NEG
45758: PUSH
45759: LD_INT 3
45761: NEG
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 5
45769: NEG
45770: PUSH
45771: LD_INT 4
45773: NEG
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 5
45781: NEG
45782: PUSH
45783: LD_INT 5
45785: NEG
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 3
45793: NEG
45794: PUSH
45795: LD_INT 5
45797: NEG
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 5
45805: NEG
45806: PUSH
45807: LD_INT 3
45809: NEG
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: LD_INT 3
45820: NEG
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 0
45828: PUSH
45829: LD_INT 4
45831: NEG
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 1
45839: PUSH
45840: LD_INT 3
45842: NEG
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 1
45850: PUSH
45851: LD_INT 2
45853: NEG
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: LD_INT 2
45864: NEG
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 1
45872: NEG
45873: PUSH
45874: LD_INT 3
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: LD_INT 4
45888: NEG
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 2
45896: PUSH
45897: LD_INT 2
45899: NEG
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 2
45907: NEG
45908: PUSH
45909: LD_INT 4
45911: NEG
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 4
45919: PUSH
45920: LD_INT 0
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 4
45929: PUSH
45930: LD_INT 1
45932: NEG
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 5
45940: PUSH
45941: LD_INT 0
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 5
45950: PUSH
45951: LD_INT 1
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 4
45960: PUSH
45961: LD_INT 1
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 3
45970: PUSH
45971: LD_INT 0
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 3
45980: PUSH
45981: LD_INT 1
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 3
45991: PUSH
45992: LD_INT 2
45994: NEG
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 5
46002: PUSH
46003: LD_INT 2
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46057: LD_ADDR_VAR 0 32
46061: PUSH
46062: LD_INT 4
46064: NEG
46065: PUSH
46066: LD_INT 0
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 4
46075: NEG
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 3
46087: NEG
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 3
46098: NEG
46099: PUSH
46100: LD_INT 1
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 4
46109: NEG
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 5
46120: NEG
46121: PUSH
46122: LD_INT 0
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 5
46131: NEG
46132: PUSH
46133: LD_INT 1
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 5
46143: NEG
46144: PUSH
46145: LD_INT 2
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 3
46155: NEG
46156: PUSH
46157: LD_INT 2
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 3
46166: NEG
46167: PUSH
46168: LD_INT 3
46170: NEG
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 3
46178: NEG
46179: PUSH
46180: LD_INT 4
46182: NEG
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 2
46190: NEG
46191: PUSH
46192: LD_INT 3
46194: NEG
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 2
46202: NEG
46203: PUSH
46204: LD_INT 2
46206: NEG
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 3
46214: NEG
46215: PUSH
46216: LD_INT 2
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 4
46226: NEG
46227: PUSH
46228: LD_INT 3
46230: NEG
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 4
46238: NEG
46239: PUSH
46240: LD_INT 4
46242: NEG
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 2
46250: NEG
46251: PUSH
46252: LD_INT 4
46254: NEG
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 4
46262: NEG
46263: PUSH
46264: LD_INT 2
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 0
46274: PUSH
46275: LD_INT 4
46277: NEG
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 0
46285: PUSH
46286: LD_INT 5
46288: NEG
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: LD_INT 4
46299: NEG
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 1
46307: PUSH
46308: LD_INT 3
46310: NEG
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 0
46318: PUSH
46319: LD_INT 3
46321: NEG
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 1
46329: NEG
46330: PUSH
46331: LD_INT 4
46333: NEG
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 1
46341: NEG
46342: PUSH
46343: LD_INT 5
46345: NEG
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 2
46353: PUSH
46354: LD_INT 3
46356: NEG
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 2
46364: NEG
46365: PUSH
46366: LD_INT 5
46368: NEG
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 3
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 3
46386: PUSH
46387: LD_INT 1
46389: NEG
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 4
46397: PUSH
46398: LD_INT 0
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 4
46407: PUSH
46408: LD_INT 1
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 3
46417: PUSH
46418: LD_INT 1
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 2
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 2
46437: PUSH
46438: LD_INT 1
46440: NEG
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 2
46448: PUSH
46449: LD_INT 2
46451: NEG
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 4
46459: PUSH
46460: LD_INT 2
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 4
46469: PUSH
46470: LD_INT 4
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 4
46479: PUSH
46480: LD_INT 3
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 5
46489: PUSH
46490: LD_INT 4
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 5
46499: PUSH
46500: LD_INT 5
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 4
46509: PUSH
46510: LD_INT 5
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 3
46519: PUSH
46520: LD_INT 4
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 3
46529: PUSH
46530: LD_INT 3
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 5
46539: PUSH
46540: LD_INT 3
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 3
46549: PUSH
46550: LD_INT 5
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46604: LD_ADDR_VAR 0 33
46608: PUSH
46609: LD_INT 4
46611: NEG
46612: PUSH
46613: LD_INT 4
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 4
46623: NEG
46624: PUSH
46625: LD_INT 5
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 3
46635: NEG
46636: PUSH
46637: LD_INT 4
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 3
46647: NEG
46648: PUSH
46649: LD_INT 3
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 4
46659: NEG
46660: PUSH
46661: LD_INT 3
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 5
46671: NEG
46672: PUSH
46673: LD_INT 4
46675: NEG
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 5
46683: NEG
46684: PUSH
46685: LD_INT 5
46687: NEG
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 3
46695: NEG
46696: PUSH
46697: LD_INT 5
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 5
46707: NEG
46708: PUSH
46709: LD_INT 3
46711: NEG
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 0
46719: PUSH
46720: LD_INT 3
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: LD_INT 4
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: LD_INT 3
46744: NEG
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 1
46752: PUSH
46753: LD_INT 2
46755: NEG
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 0
46763: PUSH
46764: LD_INT 2
46766: NEG
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 1
46774: NEG
46775: PUSH
46776: LD_INT 3
46778: NEG
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 1
46786: NEG
46787: PUSH
46788: LD_INT 4
46790: NEG
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 2
46798: PUSH
46799: LD_INT 2
46801: NEG
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 2
46809: NEG
46810: PUSH
46811: LD_INT 4
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 4
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 4
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 5
46842: PUSH
46843: LD_INT 0
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 5
46852: PUSH
46853: LD_INT 1
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 4
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 3
46872: PUSH
46873: LD_INT 0
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 3
46882: PUSH
46883: LD_INT 1
46885: NEG
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 3
46893: PUSH
46894: LD_INT 2
46896: NEG
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 5
46904: PUSH
46905: LD_INT 2
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 3
46914: PUSH
46915: LD_INT 3
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 3
46924: PUSH
46925: LD_INT 2
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 4
46934: PUSH
46935: LD_INT 3
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 4
46944: PUSH
46945: LD_INT 4
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 3
46954: PUSH
46955: LD_INT 4
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 2
46964: PUSH
46965: LD_INT 3
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 2
46974: PUSH
46975: LD_INT 2
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 4
46984: PUSH
46985: LD_INT 2
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 2
46994: PUSH
46995: LD_INT 4
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: LD_INT 4
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 0
47014: PUSH
47015: LD_INT 3
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 1
47024: PUSH
47025: LD_INT 4
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 1
47034: PUSH
47035: LD_INT 5
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 0
47044: PUSH
47045: LD_INT 5
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 1
47054: NEG
47055: PUSH
47056: LD_INT 4
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 1
47065: NEG
47066: PUSH
47067: LD_INT 3
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 2
47076: PUSH
47077: LD_INT 5
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 2
47086: NEG
47087: PUSH
47088: LD_INT 3
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47142: LD_ADDR_VAR 0 34
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: LD_INT 4
47152: NEG
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 0
47160: PUSH
47161: LD_INT 5
47163: NEG
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 1
47171: PUSH
47172: LD_INT 4
47174: NEG
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 1
47182: PUSH
47183: LD_INT 3
47185: NEG
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 0
47193: PUSH
47194: LD_INT 3
47196: NEG
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 1
47204: NEG
47205: PUSH
47206: LD_INT 4
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: LD_INT 5
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 2
47228: PUSH
47229: LD_INT 3
47231: NEG
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 2
47239: NEG
47240: PUSH
47241: LD_INT 5
47243: NEG
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 3
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 3
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 4
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 4
47282: PUSH
47283: LD_INT 1
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 3
47292: PUSH
47293: LD_INT 1
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 2
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 2
47312: PUSH
47313: LD_INT 1
47315: NEG
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 2
47323: PUSH
47324: LD_INT 2
47326: NEG
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 4
47334: PUSH
47335: LD_INT 2
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 4
47344: PUSH
47345: LD_INT 4
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 4
47354: PUSH
47355: LD_INT 3
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 5
47364: PUSH
47365: LD_INT 4
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 5
47374: PUSH
47375: LD_INT 5
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 4
47384: PUSH
47385: LD_INT 5
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 3
47394: PUSH
47395: LD_INT 4
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 3
47404: PUSH
47405: LD_INT 3
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 5
47414: PUSH
47415: LD_INT 3
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 3
47424: PUSH
47425: LD_INT 5
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 0
47434: PUSH
47435: LD_INT 3
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: LD_INT 2
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 1
47454: PUSH
47455: LD_INT 3
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: LD_INT 4
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: LD_INT 4
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: LD_INT 3
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: LD_INT 2
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 2
47506: PUSH
47507: LD_INT 4
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 2
47516: NEG
47517: PUSH
47518: LD_INT 2
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 4
47527: NEG
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 4
47538: NEG
47539: PUSH
47540: LD_INT 1
47542: NEG
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 3
47550: NEG
47551: PUSH
47552: LD_INT 0
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 3
47561: NEG
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 4
47572: NEG
47573: PUSH
47574: LD_INT 1
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 5
47583: NEG
47584: PUSH
47585: LD_INT 0
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 5
47594: NEG
47595: PUSH
47596: LD_INT 1
47598: NEG
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 5
47606: NEG
47607: PUSH
47608: LD_INT 2
47610: NEG
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 3
47618: NEG
47619: PUSH
47620: LD_INT 2
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: ST_TO_ADDR
// end ; end ;
47674: GO 47677
47676: POP
// case btype of b_depot , b_warehouse :
47677: LD_VAR 0 1
47681: PUSH
47682: LD_INT 0
47684: DOUBLE
47685: EQUAL
47686: IFTRUE 47696
47688: LD_INT 1
47690: DOUBLE
47691: EQUAL
47692: IFTRUE 47696
47694: GO 47897
47696: POP
// case nation of nation_american :
47697: LD_VAR 0 5
47701: PUSH
47702: LD_INT 1
47704: DOUBLE
47705: EQUAL
47706: IFTRUE 47710
47708: GO 47766
47710: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47711: LD_ADDR_VAR 0 9
47715: PUSH
47716: LD_VAR 0 11
47720: PUSH
47721: LD_VAR 0 12
47725: PUSH
47726: LD_VAR 0 13
47730: PUSH
47731: LD_VAR 0 14
47735: PUSH
47736: LD_VAR 0 15
47740: PUSH
47741: LD_VAR 0 16
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: PUSH
47754: LD_VAR 0 4
47758: PUSH
47759: LD_INT 1
47761: PLUS
47762: ARRAY
47763: ST_TO_ADDR
47764: GO 47895
47766: LD_INT 2
47768: DOUBLE
47769: EQUAL
47770: IFTRUE 47774
47772: GO 47830
47774: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47775: LD_ADDR_VAR 0 9
47779: PUSH
47780: LD_VAR 0 17
47784: PUSH
47785: LD_VAR 0 18
47789: PUSH
47790: LD_VAR 0 19
47794: PUSH
47795: LD_VAR 0 20
47799: PUSH
47800: LD_VAR 0 21
47804: PUSH
47805: LD_VAR 0 22
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: PUSH
47818: LD_VAR 0 4
47822: PUSH
47823: LD_INT 1
47825: PLUS
47826: ARRAY
47827: ST_TO_ADDR
47828: GO 47895
47830: LD_INT 3
47832: DOUBLE
47833: EQUAL
47834: IFTRUE 47838
47836: GO 47894
47838: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47839: LD_ADDR_VAR 0 9
47843: PUSH
47844: LD_VAR 0 23
47848: PUSH
47849: LD_VAR 0 24
47853: PUSH
47854: LD_VAR 0 25
47858: PUSH
47859: LD_VAR 0 26
47863: PUSH
47864: LD_VAR 0 27
47868: PUSH
47869: LD_VAR 0 28
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: PUSH
47882: LD_VAR 0 4
47886: PUSH
47887: LD_INT 1
47889: PLUS
47890: ARRAY
47891: ST_TO_ADDR
47892: GO 47895
47894: POP
47895: GO 48450
47897: LD_INT 2
47899: DOUBLE
47900: EQUAL
47901: IFTRUE 47911
47903: LD_INT 3
47905: DOUBLE
47906: EQUAL
47907: IFTRUE 47911
47909: GO 47967
47911: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47912: LD_ADDR_VAR 0 9
47916: PUSH
47917: LD_VAR 0 29
47921: PUSH
47922: LD_VAR 0 30
47926: PUSH
47927: LD_VAR 0 31
47931: PUSH
47932: LD_VAR 0 32
47936: PUSH
47937: LD_VAR 0 33
47941: PUSH
47942: LD_VAR 0 34
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: PUSH
47955: LD_VAR 0 4
47959: PUSH
47960: LD_INT 1
47962: PLUS
47963: ARRAY
47964: ST_TO_ADDR
47965: GO 48450
47967: LD_INT 16
47969: DOUBLE
47970: EQUAL
47971: IFTRUE 48029
47973: LD_INT 17
47975: DOUBLE
47976: EQUAL
47977: IFTRUE 48029
47979: LD_INT 18
47981: DOUBLE
47982: EQUAL
47983: IFTRUE 48029
47985: LD_INT 19
47987: DOUBLE
47988: EQUAL
47989: IFTRUE 48029
47991: LD_INT 22
47993: DOUBLE
47994: EQUAL
47995: IFTRUE 48029
47997: LD_INT 20
47999: DOUBLE
48000: EQUAL
48001: IFTRUE 48029
48003: LD_INT 21
48005: DOUBLE
48006: EQUAL
48007: IFTRUE 48029
48009: LD_INT 23
48011: DOUBLE
48012: EQUAL
48013: IFTRUE 48029
48015: LD_INT 24
48017: DOUBLE
48018: EQUAL
48019: IFTRUE 48029
48021: LD_INT 25
48023: DOUBLE
48024: EQUAL
48025: IFTRUE 48029
48027: GO 48085
48029: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48030: LD_ADDR_VAR 0 9
48034: PUSH
48035: LD_VAR 0 35
48039: PUSH
48040: LD_VAR 0 36
48044: PUSH
48045: LD_VAR 0 37
48049: PUSH
48050: LD_VAR 0 38
48054: PUSH
48055: LD_VAR 0 39
48059: PUSH
48060: LD_VAR 0 40
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: PUSH
48073: LD_VAR 0 4
48077: PUSH
48078: LD_INT 1
48080: PLUS
48081: ARRAY
48082: ST_TO_ADDR
48083: GO 48450
48085: LD_INT 6
48087: DOUBLE
48088: EQUAL
48089: IFTRUE 48141
48091: LD_INT 7
48093: DOUBLE
48094: EQUAL
48095: IFTRUE 48141
48097: LD_INT 8
48099: DOUBLE
48100: EQUAL
48101: IFTRUE 48141
48103: LD_INT 13
48105: DOUBLE
48106: EQUAL
48107: IFTRUE 48141
48109: LD_INT 12
48111: DOUBLE
48112: EQUAL
48113: IFTRUE 48141
48115: LD_INT 15
48117: DOUBLE
48118: EQUAL
48119: IFTRUE 48141
48121: LD_INT 11
48123: DOUBLE
48124: EQUAL
48125: IFTRUE 48141
48127: LD_INT 14
48129: DOUBLE
48130: EQUAL
48131: IFTRUE 48141
48133: LD_INT 10
48135: DOUBLE
48136: EQUAL
48137: IFTRUE 48141
48139: GO 48197
48141: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48142: LD_ADDR_VAR 0 9
48146: PUSH
48147: LD_VAR 0 41
48151: PUSH
48152: LD_VAR 0 42
48156: PUSH
48157: LD_VAR 0 43
48161: PUSH
48162: LD_VAR 0 44
48166: PUSH
48167: LD_VAR 0 45
48171: PUSH
48172: LD_VAR 0 46
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: PUSH
48185: LD_VAR 0 4
48189: PUSH
48190: LD_INT 1
48192: PLUS
48193: ARRAY
48194: ST_TO_ADDR
48195: GO 48450
48197: LD_INT 36
48199: DOUBLE
48200: EQUAL
48201: IFTRUE 48205
48203: GO 48261
48205: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48206: LD_ADDR_VAR 0 9
48210: PUSH
48211: LD_VAR 0 47
48215: PUSH
48216: LD_VAR 0 48
48220: PUSH
48221: LD_VAR 0 49
48225: PUSH
48226: LD_VAR 0 50
48230: PUSH
48231: LD_VAR 0 51
48235: PUSH
48236: LD_VAR 0 52
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: PUSH
48249: LD_VAR 0 4
48253: PUSH
48254: LD_INT 1
48256: PLUS
48257: ARRAY
48258: ST_TO_ADDR
48259: GO 48450
48261: LD_INT 4
48263: DOUBLE
48264: EQUAL
48265: IFTRUE 48287
48267: LD_INT 5
48269: DOUBLE
48270: EQUAL
48271: IFTRUE 48287
48273: LD_INT 34
48275: DOUBLE
48276: EQUAL
48277: IFTRUE 48287
48279: LD_INT 37
48281: DOUBLE
48282: EQUAL
48283: IFTRUE 48287
48285: GO 48343
48287: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48288: LD_ADDR_VAR 0 9
48292: PUSH
48293: LD_VAR 0 53
48297: PUSH
48298: LD_VAR 0 54
48302: PUSH
48303: LD_VAR 0 55
48307: PUSH
48308: LD_VAR 0 56
48312: PUSH
48313: LD_VAR 0 57
48317: PUSH
48318: LD_VAR 0 58
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: PUSH
48331: LD_VAR 0 4
48335: PUSH
48336: LD_INT 1
48338: PLUS
48339: ARRAY
48340: ST_TO_ADDR
48341: GO 48450
48343: LD_INT 31
48345: DOUBLE
48346: EQUAL
48347: IFTRUE 48393
48349: LD_INT 32
48351: DOUBLE
48352: EQUAL
48353: IFTRUE 48393
48355: LD_INT 33
48357: DOUBLE
48358: EQUAL
48359: IFTRUE 48393
48361: LD_INT 27
48363: DOUBLE
48364: EQUAL
48365: IFTRUE 48393
48367: LD_INT 26
48369: DOUBLE
48370: EQUAL
48371: IFTRUE 48393
48373: LD_INT 28
48375: DOUBLE
48376: EQUAL
48377: IFTRUE 48393
48379: LD_INT 29
48381: DOUBLE
48382: EQUAL
48383: IFTRUE 48393
48385: LD_INT 30
48387: DOUBLE
48388: EQUAL
48389: IFTRUE 48393
48391: GO 48449
48393: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48394: LD_ADDR_VAR 0 9
48398: PUSH
48399: LD_VAR 0 59
48403: PUSH
48404: LD_VAR 0 60
48408: PUSH
48409: LD_VAR 0 61
48413: PUSH
48414: LD_VAR 0 62
48418: PUSH
48419: LD_VAR 0 63
48423: PUSH
48424: LD_VAR 0 64
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: PUSH
48437: LD_VAR 0 4
48441: PUSH
48442: LD_INT 1
48444: PLUS
48445: ARRAY
48446: ST_TO_ADDR
48447: GO 48450
48449: POP
// temp_list2 = [ ] ;
48450: LD_ADDR_VAR 0 10
48454: PUSH
48455: EMPTY
48456: ST_TO_ADDR
// for i in temp_list do
48457: LD_ADDR_VAR 0 8
48461: PUSH
48462: LD_VAR 0 9
48466: PUSH
48467: FOR_IN
48468: IFFALSE 48520
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48470: LD_ADDR_VAR 0 10
48474: PUSH
48475: LD_VAR 0 10
48479: PUSH
48480: LD_VAR 0 8
48484: PUSH
48485: LD_INT 1
48487: ARRAY
48488: PUSH
48489: LD_VAR 0 2
48493: PLUS
48494: PUSH
48495: LD_VAR 0 8
48499: PUSH
48500: LD_INT 2
48502: ARRAY
48503: PUSH
48504: LD_VAR 0 3
48508: PLUS
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: EMPTY
48515: LIST
48516: ADD
48517: ST_TO_ADDR
48518: GO 48467
48520: POP
48521: POP
// result = temp_list2 ;
48522: LD_ADDR_VAR 0 7
48526: PUSH
48527: LD_VAR 0 10
48531: ST_TO_ADDR
// end ;
48532: LD_VAR 0 7
48536: RET
// export function EnemyInRange ( unit , dist ) ; begin
48537: LD_INT 0
48539: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48540: LD_ADDR_VAR 0 3
48544: PUSH
48545: LD_VAR 0 1
48549: PPUSH
48550: CALL_OW 255
48554: PPUSH
48555: LD_VAR 0 1
48559: PPUSH
48560: CALL_OW 250
48564: PPUSH
48565: LD_VAR 0 1
48569: PPUSH
48570: CALL_OW 251
48574: PPUSH
48575: LD_VAR 0 2
48579: PPUSH
48580: CALL 21910 0 4
48584: PUSH
48585: LD_INT 4
48587: ARRAY
48588: ST_TO_ADDR
// end ;
48589: LD_VAR 0 3
48593: RET
// export function PlayerSeeMe ( unit ) ; begin
48594: LD_INT 0
48596: PPUSH
// result := See ( your_side , unit ) ;
48597: LD_ADDR_VAR 0 2
48601: PUSH
48602: LD_OWVAR 2
48606: PPUSH
48607: LD_VAR 0 1
48611: PPUSH
48612: CALL_OW 292
48616: ST_TO_ADDR
// end ;
48617: LD_VAR 0 2
48621: RET
// export function ReverseDir ( unit ) ; begin
48622: LD_INT 0
48624: PPUSH
// if not unit then
48625: LD_VAR 0 1
48629: NOT
48630: IFFALSE 48634
// exit ;
48632: GO 48657
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48634: LD_ADDR_VAR 0 2
48638: PUSH
48639: LD_VAR 0 1
48643: PPUSH
48644: CALL_OW 254
48648: PUSH
48649: LD_INT 3
48651: PLUS
48652: PUSH
48653: LD_INT 6
48655: MOD
48656: ST_TO_ADDR
// end ;
48657: LD_VAR 0 2
48661: RET
// export function ReverseArray ( array ) ; var i ; begin
48662: LD_INT 0
48664: PPUSH
48665: PPUSH
// if not array then
48666: LD_VAR 0 1
48670: NOT
48671: IFFALSE 48675
// exit ;
48673: GO 48730
// result := [ ] ;
48675: LD_ADDR_VAR 0 2
48679: PUSH
48680: EMPTY
48681: ST_TO_ADDR
// for i := array downto 1 do
48682: LD_ADDR_VAR 0 3
48686: PUSH
48687: DOUBLE
48688: LD_VAR 0 1
48692: INC
48693: ST_TO_ADDR
48694: LD_INT 1
48696: PUSH
48697: FOR_DOWNTO
48698: IFFALSE 48728
// result := Join ( result , array [ i ] ) ;
48700: LD_ADDR_VAR 0 2
48704: PUSH
48705: LD_VAR 0 2
48709: PPUSH
48710: LD_VAR 0 1
48714: PUSH
48715: LD_VAR 0 3
48719: ARRAY
48720: PPUSH
48721: CALL 53386 0 2
48725: ST_TO_ADDR
48726: GO 48697
48728: POP
48729: POP
// end ;
48730: LD_VAR 0 2
48734: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48735: LD_INT 0
48737: PPUSH
48738: PPUSH
48739: PPUSH
48740: PPUSH
48741: PPUSH
48742: PPUSH
// if not unit or not hexes then
48743: LD_VAR 0 1
48747: NOT
48748: PUSH
48749: LD_VAR 0 2
48753: NOT
48754: OR
48755: IFFALSE 48759
// exit ;
48757: GO 48882
// dist := 9999 ;
48759: LD_ADDR_VAR 0 5
48763: PUSH
48764: LD_INT 9999
48766: ST_TO_ADDR
// for i = 1 to hexes do
48767: LD_ADDR_VAR 0 4
48771: PUSH
48772: DOUBLE
48773: LD_INT 1
48775: DEC
48776: ST_TO_ADDR
48777: LD_VAR 0 2
48781: PUSH
48782: FOR_TO
48783: IFFALSE 48870
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48785: LD_ADDR_VAR 0 6
48789: PUSH
48790: LD_VAR 0 1
48794: PPUSH
48795: LD_VAR 0 2
48799: PUSH
48800: LD_VAR 0 4
48804: ARRAY
48805: PUSH
48806: LD_INT 1
48808: ARRAY
48809: PPUSH
48810: LD_VAR 0 2
48814: PUSH
48815: LD_VAR 0 4
48819: ARRAY
48820: PUSH
48821: LD_INT 2
48823: ARRAY
48824: PPUSH
48825: CALL_OW 297
48829: ST_TO_ADDR
// if tdist < dist then
48830: LD_VAR 0 6
48834: PUSH
48835: LD_VAR 0 5
48839: LESS
48840: IFFALSE 48868
// begin hex := hexes [ i ] ;
48842: LD_ADDR_VAR 0 8
48846: PUSH
48847: LD_VAR 0 2
48851: PUSH
48852: LD_VAR 0 4
48856: ARRAY
48857: ST_TO_ADDR
// dist := tdist ;
48858: LD_ADDR_VAR 0 5
48862: PUSH
48863: LD_VAR 0 6
48867: ST_TO_ADDR
// end ; end ;
48868: GO 48782
48870: POP
48871: POP
// result := hex ;
48872: LD_ADDR_VAR 0 3
48876: PUSH
48877: LD_VAR 0 8
48881: ST_TO_ADDR
// end ;
48882: LD_VAR 0 3
48886: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48887: LD_INT 0
48889: PPUSH
48890: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48891: LD_VAR 0 1
48895: NOT
48896: PUSH
48897: LD_VAR 0 1
48901: PUSH
48902: LD_INT 21
48904: PUSH
48905: LD_INT 2
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 23
48914: PUSH
48915: LD_INT 2
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PPUSH
48926: CALL_OW 69
48930: IN
48931: NOT
48932: OR
48933: IFFALSE 48937
// exit ;
48935: GO 48984
// for i = 1 to 3 do
48937: LD_ADDR_VAR 0 3
48941: PUSH
48942: DOUBLE
48943: LD_INT 1
48945: DEC
48946: ST_TO_ADDR
48947: LD_INT 3
48949: PUSH
48950: FOR_TO
48951: IFFALSE 48982
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48953: LD_VAR 0 1
48957: PPUSH
48958: CALL_OW 250
48962: PPUSH
48963: LD_VAR 0 1
48967: PPUSH
48968: CALL_OW 251
48972: PPUSH
48973: LD_INT 1
48975: PPUSH
48976: CALL_OW 453
48980: GO 48950
48982: POP
48983: POP
// end ;
48984: LD_VAR 0 2
48988: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48989: LD_INT 0
48991: PPUSH
48992: PPUSH
48993: PPUSH
48994: PPUSH
48995: PPUSH
48996: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
48997: LD_VAR 0 1
49001: NOT
49002: PUSH
49003: LD_VAR 0 2
49007: NOT
49008: OR
49009: PUSH
49010: LD_VAR 0 1
49014: PPUSH
49015: CALL_OW 314
49019: OR
49020: IFFALSE 49024
// exit ;
49022: GO 49491
// if GetLives ( i ) < 250 then
49024: LD_VAR 0 4
49028: PPUSH
49029: CALL_OW 256
49033: PUSH
49034: LD_INT 250
49036: LESS
49037: IFFALSE 49050
// begin ComAutodestruct ( i ) ;
49039: LD_VAR 0 4
49043: PPUSH
49044: CALL 48887 0 1
// exit ;
49048: GO 49491
// end ; x := GetX ( enemy_unit ) ;
49050: LD_ADDR_VAR 0 7
49054: PUSH
49055: LD_VAR 0 2
49059: PPUSH
49060: CALL_OW 250
49064: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49065: LD_ADDR_VAR 0 8
49069: PUSH
49070: LD_VAR 0 2
49074: PPUSH
49075: CALL_OW 251
49079: ST_TO_ADDR
// if not x or not y then
49080: LD_VAR 0 7
49084: NOT
49085: PUSH
49086: LD_VAR 0 8
49090: NOT
49091: OR
49092: IFFALSE 49096
// exit ;
49094: GO 49491
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49096: LD_ADDR_VAR 0 6
49100: PUSH
49101: LD_VAR 0 7
49105: PPUSH
49106: LD_INT 0
49108: PPUSH
49109: LD_INT 4
49111: PPUSH
49112: CALL_OW 272
49116: PUSH
49117: LD_VAR 0 8
49121: PPUSH
49122: LD_INT 0
49124: PPUSH
49125: LD_INT 4
49127: PPUSH
49128: CALL_OW 273
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_VAR 0 7
49141: PPUSH
49142: LD_INT 1
49144: PPUSH
49145: LD_INT 4
49147: PPUSH
49148: CALL_OW 272
49152: PUSH
49153: LD_VAR 0 8
49157: PPUSH
49158: LD_INT 1
49160: PPUSH
49161: LD_INT 4
49163: PPUSH
49164: CALL_OW 273
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_VAR 0 7
49177: PPUSH
49178: LD_INT 2
49180: PPUSH
49181: LD_INT 4
49183: PPUSH
49184: CALL_OW 272
49188: PUSH
49189: LD_VAR 0 8
49193: PPUSH
49194: LD_INT 2
49196: PPUSH
49197: LD_INT 4
49199: PPUSH
49200: CALL_OW 273
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_VAR 0 7
49213: PPUSH
49214: LD_INT 3
49216: PPUSH
49217: LD_INT 4
49219: PPUSH
49220: CALL_OW 272
49224: PUSH
49225: LD_VAR 0 8
49229: PPUSH
49230: LD_INT 3
49232: PPUSH
49233: LD_INT 4
49235: PPUSH
49236: CALL_OW 273
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_VAR 0 7
49249: PPUSH
49250: LD_INT 4
49252: PPUSH
49253: LD_INT 4
49255: PPUSH
49256: CALL_OW 272
49260: PUSH
49261: LD_VAR 0 8
49265: PPUSH
49266: LD_INT 4
49268: PPUSH
49269: LD_INT 4
49271: PPUSH
49272: CALL_OW 273
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_VAR 0 7
49285: PPUSH
49286: LD_INT 5
49288: PPUSH
49289: LD_INT 4
49291: PPUSH
49292: CALL_OW 272
49296: PUSH
49297: LD_VAR 0 8
49301: PPUSH
49302: LD_INT 5
49304: PPUSH
49305: LD_INT 4
49307: PPUSH
49308: CALL_OW 273
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: ST_TO_ADDR
// for i = tmp downto 1 do
49325: LD_ADDR_VAR 0 4
49329: PUSH
49330: DOUBLE
49331: LD_VAR 0 6
49335: INC
49336: ST_TO_ADDR
49337: LD_INT 1
49339: PUSH
49340: FOR_DOWNTO
49341: IFFALSE 49442
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49343: LD_VAR 0 6
49347: PUSH
49348: LD_VAR 0 4
49352: ARRAY
49353: PUSH
49354: LD_INT 1
49356: ARRAY
49357: PPUSH
49358: LD_VAR 0 6
49362: PUSH
49363: LD_VAR 0 4
49367: ARRAY
49368: PUSH
49369: LD_INT 2
49371: ARRAY
49372: PPUSH
49373: CALL_OW 488
49377: NOT
49378: PUSH
49379: LD_VAR 0 6
49383: PUSH
49384: LD_VAR 0 4
49388: ARRAY
49389: PUSH
49390: LD_INT 1
49392: ARRAY
49393: PPUSH
49394: LD_VAR 0 6
49398: PUSH
49399: LD_VAR 0 4
49403: ARRAY
49404: PUSH
49405: LD_INT 2
49407: ARRAY
49408: PPUSH
49409: CALL_OW 428
49413: PUSH
49414: LD_INT 0
49416: NONEQUAL
49417: OR
49418: IFFALSE 49440
// tmp := Delete ( tmp , i ) ;
49420: LD_ADDR_VAR 0 6
49424: PUSH
49425: LD_VAR 0 6
49429: PPUSH
49430: LD_VAR 0 4
49434: PPUSH
49435: CALL_OW 3
49439: ST_TO_ADDR
49440: GO 49340
49442: POP
49443: POP
// j := GetClosestHex ( unit , tmp ) ;
49444: LD_ADDR_VAR 0 5
49448: PUSH
49449: LD_VAR 0 1
49453: PPUSH
49454: LD_VAR 0 6
49458: PPUSH
49459: CALL 48735 0 2
49463: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49464: LD_VAR 0 1
49468: PPUSH
49469: LD_VAR 0 5
49473: PUSH
49474: LD_INT 1
49476: ARRAY
49477: PPUSH
49478: LD_VAR 0 5
49482: PUSH
49483: LD_INT 2
49485: ARRAY
49486: PPUSH
49487: CALL_OW 111
// end ;
49491: LD_VAR 0 3
49495: RET
// export function PrepareApemanSoldier ( ) ; begin
49496: LD_INT 0
49498: PPUSH
// uc_nation := 0 ;
49499: LD_ADDR_OWVAR 21
49503: PUSH
49504: LD_INT 0
49506: ST_TO_ADDR
// hc_sex := sex_male ;
49507: LD_ADDR_OWVAR 27
49511: PUSH
49512: LD_INT 1
49514: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
49515: LD_ADDR_OWVAR 28
49519: PUSH
49520: LD_INT 15
49522: ST_TO_ADDR
// hc_gallery :=  ;
49523: LD_ADDR_OWVAR 33
49527: PUSH
49528: LD_STRING 
49530: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49531: LD_ADDR_OWVAR 31
49535: PUSH
49536: LD_INT 0
49538: PPUSH
49539: LD_INT 3
49541: PPUSH
49542: CALL_OW 12
49546: PUSH
49547: LD_INT 0
49549: PPUSH
49550: LD_INT 3
49552: PPUSH
49553: CALL_OW 12
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: ST_TO_ADDR
// end ;
49570: LD_VAR 0 1
49574: RET
// export function PrepareApemanEngineer ( ) ; begin
49575: LD_INT 0
49577: PPUSH
// uc_nation := 0 ;
49578: LD_ADDR_OWVAR 21
49582: PUSH
49583: LD_INT 0
49585: ST_TO_ADDR
// hc_sex := sex_male ;
49586: LD_ADDR_OWVAR 27
49590: PUSH
49591: LD_INT 1
49593: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49594: LD_ADDR_OWVAR 28
49598: PUSH
49599: LD_INT 16
49601: ST_TO_ADDR
// hc_gallery :=  ;
49602: LD_ADDR_OWVAR 33
49606: PUSH
49607: LD_STRING 
49609: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49610: LD_ADDR_OWVAR 31
49614: PUSH
49615: LD_INT 0
49617: PPUSH
49618: LD_INT 3
49620: PPUSH
49621: CALL_OW 12
49625: PUSH
49626: LD_INT 0
49628: PPUSH
49629: LD_INT 3
49631: PPUSH
49632: CALL_OW 12
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: LD_INT 0
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: ST_TO_ADDR
// end ;
49649: LD_VAR 0 1
49653: RET
// export function PrepareApeman ( agressivity ) ; begin
49654: LD_INT 0
49656: PPUSH
// uc_side := 0 ;
49657: LD_ADDR_OWVAR 20
49661: PUSH
49662: LD_INT 0
49664: ST_TO_ADDR
// uc_nation := 0 ;
49665: LD_ADDR_OWVAR 21
49669: PUSH
49670: LD_INT 0
49672: ST_TO_ADDR
// hc_sex := sex_male ;
49673: LD_ADDR_OWVAR 27
49677: PUSH
49678: LD_INT 1
49680: ST_TO_ADDR
// hc_class := class_apeman ;
49681: LD_ADDR_OWVAR 28
49685: PUSH
49686: LD_INT 12
49688: ST_TO_ADDR
// hc_gallery :=  ;
49689: LD_ADDR_OWVAR 33
49693: PUSH
49694: LD_STRING 
49696: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49697: LD_ADDR_OWVAR 35
49701: PUSH
49702: LD_VAR 0 1
49706: NEG
49707: PPUSH
49708: LD_VAR 0 1
49712: PPUSH
49713: CALL_OW 12
49717: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49718: LD_ADDR_OWVAR 31
49722: PUSH
49723: LD_INT 0
49725: PPUSH
49726: LD_INT 3
49728: PPUSH
49729: CALL_OW 12
49733: PUSH
49734: LD_INT 0
49736: PPUSH
49737: LD_INT 3
49739: PPUSH
49740: CALL_OW 12
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: ST_TO_ADDR
// end ;
49757: LD_VAR 0 2
49761: RET
// export function PrepareTiger ( agressivity ) ; begin
49762: LD_INT 0
49764: PPUSH
// uc_side := 0 ;
49765: LD_ADDR_OWVAR 20
49769: PUSH
49770: LD_INT 0
49772: ST_TO_ADDR
// uc_nation := 0 ;
49773: LD_ADDR_OWVAR 21
49777: PUSH
49778: LD_INT 0
49780: ST_TO_ADDR
// hc_class := class_tiger ;
49781: LD_ADDR_OWVAR 28
49785: PUSH
49786: LD_INT 14
49788: ST_TO_ADDR
// hc_gallery :=  ;
49789: LD_ADDR_OWVAR 33
49793: PUSH
49794: LD_STRING 
49796: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49797: LD_ADDR_OWVAR 35
49801: PUSH
49802: LD_VAR 0 1
49806: NEG
49807: PPUSH
49808: LD_VAR 0 1
49812: PPUSH
49813: CALL_OW 12
49817: ST_TO_ADDR
// end ;
49818: LD_VAR 0 2
49822: RET
// export function PrepareEnchidna ( ) ; begin
49823: LD_INT 0
49825: PPUSH
// uc_side := 0 ;
49826: LD_ADDR_OWVAR 20
49830: PUSH
49831: LD_INT 0
49833: ST_TO_ADDR
// uc_nation := 0 ;
49834: LD_ADDR_OWVAR 21
49838: PUSH
49839: LD_INT 0
49841: ST_TO_ADDR
// hc_class := class_baggie ;
49842: LD_ADDR_OWVAR 28
49846: PUSH
49847: LD_INT 13
49849: ST_TO_ADDR
// hc_gallery :=  ;
49850: LD_ADDR_OWVAR 33
49854: PUSH
49855: LD_STRING 
49857: ST_TO_ADDR
// end ;
49858: LD_VAR 0 1
49862: RET
// export function PrepareFrog ( ) ; begin
49863: LD_INT 0
49865: PPUSH
// uc_side := 0 ;
49866: LD_ADDR_OWVAR 20
49870: PUSH
49871: LD_INT 0
49873: ST_TO_ADDR
// uc_nation := 0 ;
49874: LD_ADDR_OWVAR 21
49878: PUSH
49879: LD_INT 0
49881: ST_TO_ADDR
// hc_class := class_frog ;
49882: LD_ADDR_OWVAR 28
49886: PUSH
49887: LD_INT 19
49889: ST_TO_ADDR
// hc_gallery :=  ;
49890: LD_ADDR_OWVAR 33
49894: PUSH
49895: LD_STRING 
49897: ST_TO_ADDR
// end ;
49898: LD_VAR 0 1
49902: RET
// export function PrepareFish ( ) ; begin
49903: LD_INT 0
49905: PPUSH
// uc_side := 0 ;
49906: LD_ADDR_OWVAR 20
49910: PUSH
49911: LD_INT 0
49913: ST_TO_ADDR
// uc_nation := 0 ;
49914: LD_ADDR_OWVAR 21
49918: PUSH
49919: LD_INT 0
49921: ST_TO_ADDR
// hc_class := class_fish ;
49922: LD_ADDR_OWVAR 28
49926: PUSH
49927: LD_INT 20
49929: ST_TO_ADDR
// hc_gallery :=  ;
49930: LD_ADDR_OWVAR 33
49934: PUSH
49935: LD_STRING 
49937: ST_TO_ADDR
// end ;
49938: LD_VAR 0 1
49942: RET
// export function PrepareBird ( ) ; begin
49943: LD_INT 0
49945: PPUSH
// uc_side := 0 ;
49946: LD_ADDR_OWVAR 20
49950: PUSH
49951: LD_INT 0
49953: ST_TO_ADDR
// uc_nation := 0 ;
49954: LD_ADDR_OWVAR 21
49958: PUSH
49959: LD_INT 0
49961: ST_TO_ADDR
// hc_class := class_phororhacos ;
49962: LD_ADDR_OWVAR 28
49966: PUSH
49967: LD_INT 18
49969: ST_TO_ADDR
// hc_gallery :=  ;
49970: LD_ADDR_OWVAR 33
49974: PUSH
49975: LD_STRING 
49977: ST_TO_ADDR
// end ;
49978: LD_VAR 0 1
49982: RET
// export function PrepareHorse ( ) ; begin
49983: LD_INT 0
49985: PPUSH
// uc_side := 0 ;
49986: LD_ADDR_OWVAR 20
49990: PUSH
49991: LD_INT 0
49993: ST_TO_ADDR
// uc_nation := 0 ;
49994: LD_ADDR_OWVAR 21
49998: PUSH
49999: LD_INT 0
50001: ST_TO_ADDR
// hc_class := class_horse ;
50002: LD_ADDR_OWVAR 28
50006: PUSH
50007: LD_INT 21
50009: ST_TO_ADDR
// hc_gallery :=  ;
50010: LD_ADDR_OWVAR 33
50014: PUSH
50015: LD_STRING 
50017: ST_TO_ADDR
// end ;
50018: LD_VAR 0 1
50022: RET
// export function PrepareMastodont ( ) ; begin
50023: LD_INT 0
50025: PPUSH
// uc_side := 0 ;
50026: LD_ADDR_OWVAR 20
50030: PUSH
50031: LD_INT 0
50033: ST_TO_ADDR
// uc_nation := 0 ;
50034: LD_ADDR_OWVAR 21
50038: PUSH
50039: LD_INT 0
50041: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50042: LD_ADDR_OWVAR 37
50046: PUSH
50047: LD_INT 31
50049: ST_TO_ADDR
// vc_control := control_rider ;
50050: LD_ADDR_OWVAR 38
50054: PUSH
50055: LD_INT 4
50057: ST_TO_ADDR
// end ;
50058: LD_VAR 0 1
50062: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50063: LD_INT 0
50065: PPUSH
50066: PPUSH
50067: PPUSH
// uc_side = 0 ;
50068: LD_ADDR_OWVAR 20
50072: PUSH
50073: LD_INT 0
50075: ST_TO_ADDR
// uc_nation = 0 ;
50076: LD_ADDR_OWVAR 21
50080: PUSH
50081: LD_INT 0
50083: ST_TO_ADDR
// InitHc_All ( ) ;
50084: CALL_OW 584
// InitVc ;
50088: CALL_OW 20
// if mastodonts then
50092: LD_VAR 0 6
50096: IFFALSE 50163
// for i = 1 to mastodonts do
50098: LD_ADDR_VAR 0 11
50102: PUSH
50103: DOUBLE
50104: LD_INT 1
50106: DEC
50107: ST_TO_ADDR
50108: LD_VAR 0 6
50112: PUSH
50113: FOR_TO
50114: IFFALSE 50161
// begin vc_chassis := 31 ;
50116: LD_ADDR_OWVAR 37
50120: PUSH
50121: LD_INT 31
50123: ST_TO_ADDR
// vc_control := control_rider ;
50124: LD_ADDR_OWVAR 38
50128: PUSH
50129: LD_INT 4
50131: ST_TO_ADDR
// animal := CreateVehicle ;
50132: LD_ADDR_VAR 0 12
50136: PUSH
50137: CALL_OW 45
50141: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50142: LD_VAR 0 12
50146: PPUSH
50147: LD_VAR 0 8
50151: PPUSH
50152: LD_INT 0
50154: PPUSH
50155: CALL 52291 0 3
// end ;
50159: GO 50113
50161: POP
50162: POP
// if horses then
50163: LD_VAR 0 5
50167: IFFALSE 50234
// for i = 1 to horses do
50169: LD_ADDR_VAR 0 11
50173: PUSH
50174: DOUBLE
50175: LD_INT 1
50177: DEC
50178: ST_TO_ADDR
50179: LD_VAR 0 5
50183: PUSH
50184: FOR_TO
50185: IFFALSE 50232
// begin hc_class := 21 ;
50187: LD_ADDR_OWVAR 28
50191: PUSH
50192: LD_INT 21
50194: ST_TO_ADDR
// hc_gallery :=  ;
50195: LD_ADDR_OWVAR 33
50199: PUSH
50200: LD_STRING 
50202: ST_TO_ADDR
// animal := CreateHuman ;
50203: LD_ADDR_VAR 0 12
50207: PUSH
50208: CALL_OW 44
50212: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50213: LD_VAR 0 12
50217: PPUSH
50218: LD_VAR 0 8
50222: PPUSH
50223: LD_INT 0
50225: PPUSH
50226: CALL 52291 0 3
// end ;
50230: GO 50184
50232: POP
50233: POP
// if birds then
50234: LD_VAR 0 1
50238: IFFALSE 50305
// for i = 1 to birds do
50240: LD_ADDR_VAR 0 11
50244: PUSH
50245: DOUBLE
50246: LD_INT 1
50248: DEC
50249: ST_TO_ADDR
50250: LD_VAR 0 1
50254: PUSH
50255: FOR_TO
50256: IFFALSE 50303
// begin hc_class := 18 ;
50258: LD_ADDR_OWVAR 28
50262: PUSH
50263: LD_INT 18
50265: ST_TO_ADDR
// hc_gallery =  ;
50266: LD_ADDR_OWVAR 33
50270: PUSH
50271: LD_STRING 
50273: ST_TO_ADDR
// animal := CreateHuman ;
50274: LD_ADDR_VAR 0 12
50278: PUSH
50279: CALL_OW 44
50283: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50284: LD_VAR 0 12
50288: PPUSH
50289: LD_VAR 0 8
50293: PPUSH
50294: LD_INT 0
50296: PPUSH
50297: CALL 52291 0 3
// end ;
50301: GO 50255
50303: POP
50304: POP
// if tigers then
50305: LD_VAR 0 2
50309: IFFALSE 50393
// for i = 1 to tigers do
50311: LD_ADDR_VAR 0 11
50315: PUSH
50316: DOUBLE
50317: LD_INT 1
50319: DEC
50320: ST_TO_ADDR
50321: LD_VAR 0 2
50325: PUSH
50326: FOR_TO
50327: IFFALSE 50391
// begin hc_class = class_tiger ;
50329: LD_ADDR_OWVAR 28
50333: PUSH
50334: LD_INT 14
50336: ST_TO_ADDR
// hc_gallery =  ;
50337: LD_ADDR_OWVAR 33
50341: PUSH
50342: LD_STRING 
50344: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50345: LD_ADDR_OWVAR 35
50349: PUSH
50350: LD_INT 7
50352: NEG
50353: PPUSH
50354: LD_INT 7
50356: PPUSH
50357: CALL_OW 12
50361: ST_TO_ADDR
// animal := CreateHuman ;
50362: LD_ADDR_VAR 0 12
50366: PUSH
50367: CALL_OW 44
50371: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50372: LD_VAR 0 12
50376: PPUSH
50377: LD_VAR 0 8
50381: PPUSH
50382: LD_INT 0
50384: PPUSH
50385: CALL 52291 0 3
// end ;
50389: GO 50326
50391: POP
50392: POP
// if apemans then
50393: LD_VAR 0 3
50397: IFFALSE 50520
// for i = 1 to apemans do
50399: LD_ADDR_VAR 0 11
50403: PUSH
50404: DOUBLE
50405: LD_INT 1
50407: DEC
50408: ST_TO_ADDR
50409: LD_VAR 0 3
50413: PUSH
50414: FOR_TO
50415: IFFALSE 50518
// begin hc_class = class_apeman ;
50417: LD_ADDR_OWVAR 28
50421: PUSH
50422: LD_INT 12
50424: ST_TO_ADDR
// hc_gallery =  ;
50425: LD_ADDR_OWVAR 33
50429: PUSH
50430: LD_STRING 
50432: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50433: LD_ADDR_OWVAR 35
50437: PUSH
50438: LD_INT 2
50440: NEG
50441: PPUSH
50442: LD_INT 2
50444: PPUSH
50445: CALL_OW 12
50449: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50450: LD_ADDR_OWVAR 31
50454: PUSH
50455: LD_INT 1
50457: PPUSH
50458: LD_INT 3
50460: PPUSH
50461: CALL_OW 12
50465: PUSH
50466: LD_INT 1
50468: PPUSH
50469: LD_INT 3
50471: PPUSH
50472: CALL_OW 12
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: ST_TO_ADDR
// animal := CreateHuman ;
50489: LD_ADDR_VAR 0 12
50493: PUSH
50494: CALL_OW 44
50498: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50499: LD_VAR 0 12
50503: PPUSH
50504: LD_VAR 0 8
50508: PPUSH
50509: LD_INT 0
50511: PPUSH
50512: CALL 52291 0 3
// end ;
50516: GO 50414
50518: POP
50519: POP
// if enchidnas then
50520: LD_VAR 0 4
50524: IFFALSE 50591
// for i = 1 to enchidnas do
50526: LD_ADDR_VAR 0 11
50530: PUSH
50531: DOUBLE
50532: LD_INT 1
50534: DEC
50535: ST_TO_ADDR
50536: LD_VAR 0 4
50540: PUSH
50541: FOR_TO
50542: IFFALSE 50589
// begin hc_class = 13 ;
50544: LD_ADDR_OWVAR 28
50548: PUSH
50549: LD_INT 13
50551: ST_TO_ADDR
// hc_gallery =  ;
50552: LD_ADDR_OWVAR 33
50556: PUSH
50557: LD_STRING 
50559: ST_TO_ADDR
// animal := CreateHuman ;
50560: LD_ADDR_VAR 0 12
50564: PUSH
50565: CALL_OW 44
50569: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50570: LD_VAR 0 12
50574: PPUSH
50575: LD_VAR 0 8
50579: PPUSH
50580: LD_INT 0
50582: PPUSH
50583: CALL 52291 0 3
// end ;
50587: GO 50541
50589: POP
50590: POP
// if fishes then
50591: LD_VAR 0 7
50595: IFFALSE 50662
// for i = 1 to fishes do
50597: LD_ADDR_VAR 0 11
50601: PUSH
50602: DOUBLE
50603: LD_INT 1
50605: DEC
50606: ST_TO_ADDR
50607: LD_VAR 0 7
50611: PUSH
50612: FOR_TO
50613: IFFALSE 50660
// begin hc_class = 20 ;
50615: LD_ADDR_OWVAR 28
50619: PUSH
50620: LD_INT 20
50622: ST_TO_ADDR
// hc_gallery =  ;
50623: LD_ADDR_OWVAR 33
50627: PUSH
50628: LD_STRING 
50630: ST_TO_ADDR
// animal := CreateHuman ;
50631: LD_ADDR_VAR 0 12
50635: PUSH
50636: CALL_OW 44
50640: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50641: LD_VAR 0 12
50645: PPUSH
50646: LD_VAR 0 9
50650: PPUSH
50651: LD_INT 0
50653: PPUSH
50654: CALL 52291 0 3
// end ;
50658: GO 50612
50660: POP
50661: POP
// end ;
50662: LD_VAR 0 10
50666: RET
// export function WantHeal ( sci , unit ) ; begin
50667: LD_INT 0
50669: PPUSH
// if GetTaskList ( sci ) > 0 then
50670: LD_VAR 0 1
50674: PPUSH
50675: CALL_OW 437
50679: PUSH
50680: LD_INT 0
50682: GREATER
50683: IFFALSE 50753
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50685: LD_VAR 0 1
50689: PPUSH
50690: CALL_OW 437
50694: PUSH
50695: LD_INT 1
50697: ARRAY
50698: PUSH
50699: LD_INT 1
50701: ARRAY
50702: PUSH
50703: LD_STRING l
50705: EQUAL
50706: PUSH
50707: LD_VAR 0 1
50711: PPUSH
50712: CALL_OW 437
50716: PUSH
50717: LD_INT 1
50719: ARRAY
50720: PUSH
50721: LD_INT 4
50723: ARRAY
50724: PUSH
50725: LD_VAR 0 2
50729: EQUAL
50730: AND
50731: IFFALSE 50743
// result := true else
50733: LD_ADDR_VAR 0 3
50737: PUSH
50738: LD_INT 1
50740: ST_TO_ADDR
50741: GO 50751
// result := false ;
50743: LD_ADDR_VAR 0 3
50747: PUSH
50748: LD_INT 0
50750: ST_TO_ADDR
// end else
50751: GO 50761
// result := false ;
50753: LD_ADDR_VAR 0 3
50757: PUSH
50758: LD_INT 0
50760: ST_TO_ADDR
// end ;
50761: LD_VAR 0 3
50765: RET
// export function HealTarget ( sci ) ; begin
50766: LD_INT 0
50768: PPUSH
// if not sci then
50769: LD_VAR 0 1
50773: NOT
50774: IFFALSE 50778
// exit ;
50776: GO 50843
// result := 0 ;
50778: LD_ADDR_VAR 0 2
50782: PUSH
50783: LD_INT 0
50785: ST_TO_ADDR
// if GetTaskList ( sci ) then
50786: LD_VAR 0 1
50790: PPUSH
50791: CALL_OW 437
50795: IFFALSE 50843
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50797: LD_VAR 0 1
50801: PPUSH
50802: CALL_OW 437
50806: PUSH
50807: LD_INT 1
50809: ARRAY
50810: PUSH
50811: LD_INT 1
50813: ARRAY
50814: PUSH
50815: LD_STRING l
50817: EQUAL
50818: IFFALSE 50843
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50820: LD_ADDR_VAR 0 2
50824: PUSH
50825: LD_VAR 0 1
50829: PPUSH
50830: CALL_OW 437
50834: PUSH
50835: LD_INT 1
50837: ARRAY
50838: PUSH
50839: LD_INT 4
50841: ARRAY
50842: ST_TO_ADDR
// end ;
50843: LD_VAR 0 2
50847: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50848: LD_INT 0
50850: PPUSH
50851: PPUSH
50852: PPUSH
50853: PPUSH
// if not base_units then
50854: LD_VAR 0 1
50858: NOT
50859: IFFALSE 50863
// exit ;
50861: GO 50950
// result := false ;
50863: LD_ADDR_VAR 0 2
50867: PUSH
50868: LD_INT 0
50870: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50871: LD_ADDR_VAR 0 5
50875: PUSH
50876: LD_VAR 0 1
50880: PPUSH
50881: LD_INT 21
50883: PUSH
50884: LD_INT 3
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PPUSH
50891: CALL_OW 72
50895: ST_TO_ADDR
// if not tmp then
50896: LD_VAR 0 5
50900: NOT
50901: IFFALSE 50905
// exit ;
50903: GO 50950
// for i in tmp do
50905: LD_ADDR_VAR 0 3
50909: PUSH
50910: LD_VAR 0 5
50914: PUSH
50915: FOR_IN
50916: IFFALSE 50948
// begin result := EnemyInRange ( i , 22 ) ;
50918: LD_ADDR_VAR 0 2
50922: PUSH
50923: LD_VAR 0 3
50927: PPUSH
50928: LD_INT 22
50930: PPUSH
50931: CALL 48537 0 2
50935: ST_TO_ADDR
// if result then
50936: LD_VAR 0 2
50940: IFFALSE 50946
// exit ;
50942: POP
50943: POP
50944: GO 50950
// end ;
50946: GO 50915
50948: POP
50949: POP
// end ;
50950: LD_VAR 0 2
50954: RET
// export function FilterByTag ( units , tag ) ; begin
50955: LD_INT 0
50957: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
50958: LD_ADDR_VAR 0 3
50962: PUSH
50963: LD_VAR 0 1
50967: PPUSH
50968: LD_INT 120
50970: PUSH
50971: LD_VAR 0 2
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PPUSH
50980: CALL_OW 72
50984: ST_TO_ADDR
// end ;
50985: LD_VAR 0 3
50989: RET
// export function IsDriver ( un ) ; begin
50990: LD_INT 0
50992: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50993: LD_ADDR_VAR 0 2
50997: PUSH
50998: LD_VAR 0 1
51002: PUSH
51003: LD_INT 55
51005: PUSH
51006: EMPTY
51007: LIST
51008: PPUSH
51009: CALL_OW 69
51013: IN
51014: ST_TO_ADDR
// end ;
51015: LD_VAR 0 2
51019: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51020: LD_INT 0
51022: PPUSH
51023: PPUSH
// list := [ ] ;
51024: LD_ADDR_VAR 0 5
51028: PUSH
51029: EMPTY
51030: ST_TO_ADDR
// case d of 0 :
51031: LD_VAR 0 3
51035: PUSH
51036: LD_INT 0
51038: DOUBLE
51039: EQUAL
51040: IFTRUE 51044
51042: GO 51177
51044: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51045: LD_ADDR_VAR 0 5
51049: PUSH
51050: LD_VAR 0 1
51054: PUSH
51055: LD_INT 4
51057: MINUS
51058: PUSH
51059: LD_VAR 0 2
51063: PUSH
51064: LD_INT 4
51066: MINUS
51067: PUSH
51068: LD_INT 2
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: LIST
51075: PUSH
51076: LD_VAR 0 1
51080: PUSH
51081: LD_INT 3
51083: MINUS
51084: PUSH
51085: LD_VAR 0 2
51089: PUSH
51090: LD_INT 1
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: LIST
51097: PUSH
51098: LD_VAR 0 1
51102: PUSH
51103: LD_INT 4
51105: PLUS
51106: PUSH
51107: LD_VAR 0 2
51111: PUSH
51112: LD_INT 4
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: LIST
51119: PUSH
51120: LD_VAR 0 1
51124: PUSH
51125: LD_INT 3
51127: PLUS
51128: PUSH
51129: LD_VAR 0 2
51133: PUSH
51134: LD_INT 3
51136: PLUS
51137: PUSH
51138: LD_INT 5
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: LIST
51145: PUSH
51146: LD_VAR 0 1
51150: PUSH
51151: LD_VAR 0 2
51155: PUSH
51156: LD_INT 4
51158: PLUS
51159: PUSH
51160: LD_INT 0
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: LIST
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: ST_TO_ADDR
// end ; 1 :
51175: GO 51875
51177: LD_INT 1
51179: DOUBLE
51180: EQUAL
51181: IFTRUE 51185
51183: GO 51318
51185: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51186: LD_ADDR_VAR 0 5
51190: PUSH
51191: LD_VAR 0 1
51195: PUSH
51196: LD_VAR 0 2
51200: PUSH
51201: LD_INT 4
51203: MINUS
51204: PUSH
51205: LD_INT 3
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: LIST
51212: PUSH
51213: LD_VAR 0 1
51217: PUSH
51218: LD_INT 3
51220: MINUS
51221: PUSH
51222: LD_VAR 0 2
51226: PUSH
51227: LD_INT 3
51229: MINUS
51230: PUSH
51231: LD_INT 2
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: LIST
51238: PUSH
51239: LD_VAR 0 1
51243: PUSH
51244: LD_INT 4
51246: MINUS
51247: PUSH
51248: LD_VAR 0 2
51252: PUSH
51253: LD_INT 1
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: LIST
51260: PUSH
51261: LD_VAR 0 1
51265: PUSH
51266: LD_VAR 0 2
51270: PUSH
51271: LD_INT 3
51273: PLUS
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: LIST
51282: PUSH
51283: LD_VAR 0 1
51287: PUSH
51288: LD_INT 4
51290: PLUS
51291: PUSH
51292: LD_VAR 0 2
51296: PUSH
51297: LD_INT 4
51299: PLUS
51300: PUSH
51301: LD_INT 5
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: LIST
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: ST_TO_ADDR
// end ; 2 :
51316: GO 51875
51318: LD_INT 2
51320: DOUBLE
51321: EQUAL
51322: IFTRUE 51326
51324: GO 51455
51326: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51327: LD_ADDR_VAR 0 5
51331: PUSH
51332: LD_VAR 0 1
51336: PUSH
51337: LD_VAR 0 2
51341: PUSH
51342: LD_INT 3
51344: MINUS
51345: PUSH
51346: LD_INT 3
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: LIST
51353: PUSH
51354: LD_VAR 0 1
51358: PUSH
51359: LD_INT 4
51361: PLUS
51362: PUSH
51363: LD_VAR 0 2
51367: PUSH
51368: LD_INT 4
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: LIST
51375: PUSH
51376: LD_VAR 0 1
51380: PUSH
51381: LD_VAR 0 2
51385: PUSH
51386: LD_INT 4
51388: PLUS
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: LIST
51397: PUSH
51398: LD_VAR 0 1
51402: PUSH
51403: LD_INT 3
51405: MINUS
51406: PUSH
51407: LD_VAR 0 2
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: LIST
51419: PUSH
51420: LD_VAR 0 1
51424: PUSH
51425: LD_INT 4
51427: MINUS
51428: PUSH
51429: LD_VAR 0 2
51433: PUSH
51434: LD_INT 4
51436: MINUS
51437: PUSH
51438: LD_INT 2
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: LIST
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: ST_TO_ADDR
// end ; 3 :
51453: GO 51875
51455: LD_INT 3
51457: DOUBLE
51458: EQUAL
51459: IFTRUE 51463
51461: GO 51596
51463: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51464: LD_ADDR_VAR 0 5
51468: PUSH
51469: LD_VAR 0 1
51473: PUSH
51474: LD_INT 3
51476: PLUS
51477: PUSH
51478: LD_VAR 0 2
51482: PUSH
51483: LD_INT 4
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: LIST
51490: PUSH
51491: LD_VAR 0 1
51495: PUSH
51496: LD_INT 4
51498: PLUS
51499: PUSH
51500: LD_VAR 0 2
51504: PUSH
51505: LD_INT 4
51507: PLUS
51508: PUSH
51509: LD_INT 5
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: LIST
51516: PUSH
51517: LD_VAR 0 1
51521: PUSH
51522: LD_INT 4
51524: MINUS
51525: PUSH
51526: LD_VAR 0 2
51530: PUSH
51531: LD_INT 1
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: LIST
51538: PUSH
51539: LD_VAR 0 1
51543: PUSH
51544: LD_VAR 0 2
51548: PUSH
51549: LD_INT 4
51551: MINUS
51552: PUSH
51553: LD_INT 3
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: LIST
51560: PUSH
51561: LD_VAR 0 1
51565: PUSH
51566: LD_INT 3
51568: MINUS
51569: PUSH
51570: LD_VAR 0 2
51574: PUSH
51575: LD_INT 3
51577: MINUS
51578: PUSH
51579: LD_INT 2
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: LIST
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: ST_TO_ADDR
// end ; 4 :
51594: GO 51875
51596: LD_INT 4
51598: DOUBLE
51599: EQUAL
51600: IFTRUE 51604
51602: GO 51737
51604: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51605: LD_ADDR_VAR 0 5
51609: PUSH
51610: LD_VAR 0 1
51614: PUSH
51615: LD_VAR 0 2
51619: PUSH
51620: LD_INT 4
51622: PLUS
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: LIST
51631: PUSH
51632: LD_VAR 0 1
51636: PUSH
51637: LD_INT 3
51639: PLUS
51640: PUSH
51641: LD_VAR 0 2
51645: PUSH
51646: LD_INT 3
51648: PLUS
51649: PUSH
51650: LD_INT 5
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: LIST
51657: PUSH
51658: LD_VAR 0 1
51662: PUSH
51663: LD_INT 4
51665: PLUS
51666: PUSH
51667: LD_VAR 0 2
51671: PUSH
51672: LD_INT 4
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: LIST
51679: PUSH
51680: LD_VAR 0 1
51684: PUSH
51685: LD_VAR 0 2
51689: PUSH
51690: LD_INT 3
51692: MINUS
51693: PUSH
51694: LD_INT 3
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: LIST
51701: PUSH
51702: LD_VAR 0 1
51706: PUSH
51707: LD_INT 4
51709: MINUS
51710: PUSH
51711: LD_VAR 0 2
51715: PUSH
51716: LD_INT 4
51718: MINUS
51719: PUSH
51720: LD_INT 2
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: LIST
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: ST_TO_ADDR
// end ; 5 :
51735: GO 51875
51737: LD_INT 5
51739: DOUBLE
51740: EQUAL
51741: IFTRUE 51745
51743: GO 51874
51745: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51746: LD_ADDR_VAR 0 5
51750: PUSH
51751: LD_VAR 0 1
51755: PUSH
51756: LD_INT 4
51758: MINUS
51759: PUSH
51760: LD_VAR 0 2
51764: PUSH
51765: LD_INT 1
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: LIST
51772: PUSH
51773: LD_VAR 0 1
51777: PUSH
51778: LD_VAR 0 2
51782: PUSH
51783: LD_INT 4
51785: MINUS
51786: PUSH
51787: LD_INT 3
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: LIST
51794: PUSH
51795: LD_VAR 0 1
51799: PUSH
51800: LD_INT 4
51802: PLUS
51803: PUSH
51804: LD_VAR 0 2
51808: PUSH
51809: LD_INT 4
51811: PLUS
51812: PUSH
51813: LD_INT 5
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: LIST
51820: PUSH
51821: LD_VAR 0 1
51825: PUSH
51826: LD_INT 3
51828: PLUS
51829: PUSH
51830: LD_VAR 0 2
51834: PUSH
51835: LD_INT 4
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: LIST
51842: PUSH
51843: LD_VAR 0 1
51847: PUSH
51848: LD_VAR 0 2
51852: PUSH
51853: LD_INT 3
51855: PLUS
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: LIST
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: ST_TO_ADDR
// end ; end ;
51872: GO 51875
51874: POP
// result := list ;
51875: LD_ADDR_VAR 0 4
51879: PUSH
51880: LD_VAR 0 5
51884: ST_TO_ADDR
// end ;
51885: LD_VAR 0 4
51889: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51890: LD_INT 0
51892: PPUSH
51893: PPUSH
51894: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51895: LD_VAR 0 1
51899: NOT
51900: PUSH
51901: LD_VAR 0 2
51905: PUSH
51906: LD_INT 1
51908: PUSH
51909: LD_INT 2
51911: PUSH
51912: LD_INT 3
51914: PUSH
51915: LD_INT 4
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: IN
51924: NOT
51925: OR
51926: IFFALSE 51930
// exit ;
51928: GO 52013
// tmp := [ ] ;
51930: LD_ADDR_VAR 0 5
51934: PUSH
51935: EMPTY
51936: ST_TO_ADDR
// for i in units do
51937: LD_ADDR_VAR 0 4
51941: PUSH
51942: LD_VAR 0 1
51946: PUSH
51947: FOR_IN
51948: IFFALSE 51982
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
51950: LD_ADDR_VAR 0 5
51954: PUSH
51955: LD_VAR 0 5
51959: PPUSH
51960: LD_VAR 0 4
51964: PPUSH
51965: LD_VAR 0 2
51969: PPUSH
51970: CALL_OW 259
51974: PPUSH
51975: CALL 53386 0 2
51979: ST_TO_ADDR
51980: GO 51947
51982: POP
51983: POP
// if not tmp then
51984: LD_VAR 0 5
51988: NOT
51989: IFFALSE 51993
// exit ;
51991: GO 52013
// result := SortListByListDesc ( units , tmp ) ;
51993: LD_ADDR_VAR 0 3
51997: PUSH
51998: LD_VAR 0 1
52002: PPUSH
52003: LD_VAR 0 5
52007: PPUSH
52008: CALL_OW 77
52012: ST_TO_ADDR
// end ;
52013: LD_VAR 0 3
52017: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52018: LD_INT 0
52020: PPUSH
52021: PPUSH
52022: PPUSH
// result := false ;
52023: LD_ADDR_VAR 0 3
52027: PUSH
52028: LD_INT 0
52030: ST_TO_ADDR
// if not building then
52031: LD_VAR 0 2
52035: NOT
52036: IFFALSE 52040
// exit ;
52038: GO 52178
// x := GetX ( building ) ;
52040: LD_ADDR_VAR 0 4
52044: PUSH
52045: LD_VAR 0 2
52049: PPUSH
52050: CALL_OW 250
52054: ST_TO_ADDR
// y := GetY ( building ) ;
52055: LD_ADDR_VAR 0 5
52059: PUSH
52060: LD_VAR 0 2
52064: PPUSH
52065: CALL_OW 251
52069: ST_TO_ADDR
// if not x or not y then
52070: LD_VAR 0 4
52074: NOT
52075: PUSH
52076: LD_VAR 0 5
52080: NOT
52081: OR
52082: IFFALSE 52086
// exit ;
52084: GO 52178
// if GetTaskList ( unit ) then
52086: LD_VAR 0 1
52090: PPUSH
52091: CALL_OW 437
52095: IFFALSE 52178
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52097: LD_STRING e
52099: PUSH
52100: LD_VAR 0 1
52104: PPUSH
52105: CALL_OW 437
52109: PUSH
52110: LD_INT 1
52112: ARRAY
52113: PUSH
52114: LD_INT 1
52116: ARRAY
52117: EQUAL
52118: PUSH
52119: LD_VAR 0 4
52123: PUSH
52124: LD_VAR 0 1
52128: PPUSH
52129: CALL_OW 437
52133: PUSH
52134: LD_INT 1
52136: ARRAY
52137: PUSH
52138: LD_INT 2
52140: ARRAY
52141: EQUAL
52142: AND
52143: PUSH
52144: LD_VAR 0 5
52148: PUSH
52149: LD_VAR 0 1
52153: PPUSH
52154: CALL_OW 437
52158: PUSH
52159: LD_INT 1
52161: ARRAY
52162: PUSH
52163: LD_INT 3
52165: ARRAY
52166: EQUAL
52167: AND
52168: IFFALSE 52178
// result := true end ;
52170: LD_ADDR_VAR 0 3
52174: PUSH
52175: LD_INT 1
52177: ST_TO_ADDR
// end ;
52178: LD_VAR 0 3
52182: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52183: LD_INT 0
52185: PPUSH
// result := false ;
52186: LD_ADDR_VAR 0 4
52190: PUSH
52191: LD_INT 0
52193: ST_TO_ADDR
// if GetTaskList ( unit ) then
52194: LD_VAR 0 1
52198: PPUSH
52199: CALL_OW 437
52203: IFFALSE 52286
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52205: LD_STRING M
52207: PUSH
52208: LD_VAR 0 1
52212: PPUSH
52213: CALL_OW 437
52217: PUSH
52218: LD_INT 1
52220: ARRAY
52221: PUSH
52222: LD_INT 1
52224: ARRAY
52225: EQUAL
52226: PUSH
52227: LD_VAR 0 2
52231: PUSH
52232: LD_VAR 0 1
52236: PPUSH
52237: CALL_OW 437
52241: PUSH
52242: LD_INT 1
52244: ARRAY
52245: PUSH
52246: LD_INT 2
52248: ARRAY
52249: EQUAL
52250: AND
52251: PUSH
52252: LD_VAR 0 3
52256: PUSH
52257: LD_VAR 0 1
52261: PPUSH
52262: CALL_OW 437
52266: PUSH
52267: LD_INT 1
52269: ARRAY
52270: PUSH
52271: LD_INT 3
52273: ARRAY
52274: EQUAL
52275: AND
52276: IFFALSE 52286
// result := true ;
52278: LD_ADDR_VAR 0 4
52282: PUSH
52283: LD_INT 1
52285: ST_TO_ADDR
// end ; end ;
52286: LD_VAR 0 4
52290: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52291: LD_INT 0
52293: PPUSH
52294: PPUSH
52295: PPUSH
52296: PPUSH
// if not unit or not area then
52297: LD_VAR 0 1
52301: NOT
52302: PUSH
52303: LD_VAR 0 2
52307: NOT
52308: OR
52309: IFFALSE 52313
// exit ;
52311: GO 52489
// tmp := AreaToList ( area , i ) ;
52313: LD_ADDR_VAR 0 6
52317: PUSH
52318: LD_VAR 0 2
52322: PPUSH
52323: LD_VAR 0 5
52327: PPUSH
52328: CALL_OW 517
52332: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52333: LD_ADDR_VAR 0 5
52337: PUSH
52338: DOUBLE
52339: LD_INT 1
52341: DEC
52342: ST_TO_ADDR
52343: LD_VAR 0 6
52347: PUSH
52348: LD_INT 1
52350: ARRAY
52351: PUSH
52352: FOR_TO
52353: IFFALSE 52487
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52355: LD_ADDR_VAR 0 7
52359: PUSH
52360: LD_VAR 0 6
52364: PUSH
52365: LD_INT 1
52367: ARRAY
52368: PUSH
52369: LD_VAR 0 5
52373: ARRAY
52374: PUSH
52375: LD_VAR 0 6
52379: PUSH
52380: LD_INT 2
52382: ARRAY
52383: PUSH
52384: LD_VAR 0 5
52388: ARRAY
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
52394: LD_INT 92
52396: PUSH
52397: LD_VAR 0 7
52401: PUSH
52402: LD_INT 1
52404: ARRAY
52405: PUSH
52406: LD_VAR 0 7
52410: PUSH
52411: LD_INT 2
52413: ARRAY
52414: PUSH
52415: LD_INT 2
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: PPUSH
52424: CALL_OW 69
52428: PUSH
52429: LD_INT 0
52431: EQUAL
52432: IFFALSE 52485
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52434: LD_VAR 0 1
52438: PPUSH
52439: LD_VAR 0 7
52443: PUSH
52444: LD_INT 1
52446: ARRAY
52447: PPUSH
52448: LD_VAR 0 7
52452: PUSH
52453: LD_INT 2
52455: ARRAY
52456: PPUSH
52457: LD_VAR 0 3
52461: PPUSH
52462: CALL_OW 48
// result := IsPlaced ( unit ) ;
52466: LD_ADDR_VAR 0 4
52470: PUSH
52471: LD_VAR 0 1
52475: PPUSH
52476: CALL_OW 305
52480: ST_TO_ADDR
// exit ;
52481: POP
52482: POP
52483: GO 52489
// end ; end ;
52485: GO 52352
52487: POP
52488: POP
// end ;
52489: LD_VAR 0 4
52493: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52494: LD_INT 0
52496: PPUSH
52497: PPUSH
52498: PPUSH
// if not side or side > 8 then
52499: LD_VAR 0 1
52503: NOT
52504: PUSH
52505: LD_VAR 0 1
52509: PUSH
52510: LD_INT 8
52512: GREATER
52513: OR
52514: IFFALSE 52518
// exit ;
52516: GO 52705
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52518: LD_ADDR_VAR 0 4
52522: PUSH
52523: LD_INT 22
52525: PUSH
52526: LD_VAR 0 1
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 21
52537: PUSH
52538: LD_INT 3
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PPUSH
52549: CALL_OW 69
52553: ST_TO_ADDR
// if not tmp then
52554: LD_VAR 0 4
52558: NOT
52559: IFFALSE 52563
// exit ;
52561: GO 52705
// enable_addtolog := true ;
52563: LD_ADDR_OWVAR 81
52567: PUSH
52568: LD_INT 1
52570: ST_TO_ADDR
// AddToLog ( [ ) ;
52571: LD_STRING [
52573: PPUSH
52574: CALL_OW 561
// for i in tmp do
52578: LD_ADDR_VAR 0 3
52582: PUSH
52583: LD_VAR 0 4
52587: PUSH
52588: FOR_IN
52589: IFFALSE 52696
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52591: LD_STRING [
52593: PUSH
52594: LD_VAR 0 3
52598: PPUSH
52599: CALL_OW 266
52603: STR
52604: PUSH
52605: LD_STRING , 
52607: STR
52608: PUSH
52609: LD_VAR 0 3
52613: PPUSH
52614: CALL_OW 250
52618: STR
52619: PUSH
52620: LD_STRING , 
52622: STR
52623: PUSH
52624: LD_VAR 0 3
52628: PPUSH
52629: CALL_OW 251
52633: STR
52634: PUSH
52635: LD_STRING , 
52637: STR
52638: PUSH
52639: LD_VAR 0 3
52643: PPUSH
52644: CALL_OW 254
52648: STR
52649: PUSH
52650: LD_STRING , 
52652: STR
52653: PUSH
52654: LD_VAR 0 3
52658: PPUSH
52659: LD_INT 1
52661: PPUSH
52662: CALL_OW 268
52666: STR
52667: PUSH
52668: LD_STRING , 
52670: STR
52671: PUSH
52672: LD_VAR 0 3
52676: PPUSH
52677: LD_INT 2
52679: PPUSH
52680: CALL_OW 268
52684: STR
52685: PUSH
52686: LD_STRING ],
52688: STR
52689: PPUSH
52690: CALL_OW 561
// end ;
52694: GO 52588
52696: POP
52697: POP
// AddToLog ( ]; ) ;
52698: LD_STRING ];
52700: PPUSH
52701: CALL_OW 561
// end ;
52705: LD_VAR 0 2
52709: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52710: LD_INT 0
52712: PPUSH
52713: PPUSH
52714: PPUSH
52715: PPUSH
52716: PPUSH
// if not area or not rate or not max then
52717: LD_VAR 0 1
52721: NOT
52722: PUSH
52723: LD_VAR 0 2
52727: NOT
52728: OR
52729: PUSH
52730: LD_VAR 0 4
52734: NOT
52735: OR
52736: IFFALSE 52740
// exit ;
52738: GO 52929
// while 1 do
52740: LD_INT 1
52742: IFFALSE 52929
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52744: LD_ADDR_VAR 0 9
52748: PUSH
52749: LD_VAR 0 1
52753: PPUSH
52754: LD_INT 1
52756: PPUSH
52757: CALL_OW 287
52761: PUSH
52762: LD_INT 10
52764: MUL
52765: ST_TO_ADDR
// r := rate / 10 ;
52766: LD_ADDR_VAR 0 7
52770: PUSH
52771: LD_VAR 0 2
52775: PUSH
52776: LD_INT 10
52778: DIVREAL
52779: ST_TO_ADDR
// time := 1 1$00 ;
52780: LD_ADDR_VAR 0 8
52784: PUSH
52785: LD_INT 2100
52787: ST_TO_ADDR
// if amount < min then
52788: LD_VAR 0 9
52792: PUSH
52793: LD_VAR 0 3
52797: LESS
52798: IFFALSE 52816
// r := r * 2 else
52800: LD_ADDR_VAR 0 7
52804: PUSH
52805: LD_VAR 0 7
52809: PUSH
52810: LD_INT 2
52812: MUL
52813: ST_TO_ADDR
52814: GO 52842
// if amount > max then
52816: LD_VAR 0 9
52820: PUSH
52821: LD_VAR 0 4
52825: GREATER
52826: IFFALSE 52842
// r := r / 2 ;
52828: LD_ADDR_VAR 0 7
52832: PUSH
52833: LD_VAR 0 7
52837: PUSH
52838: LD_INT 2
52840: DIVREAL
52841: ST_TO_ADDR
// time := time / r ;
52842: LD_ADDR_VAR 0 8
52846: PUSH
52847: LD_VAR 0 8
52851: PUSH
52852: LD_VAR 0 7
52856: DIVREAL
52857: ST_TO_ADDR
// if time < 0 then
52858: LD_VAR 0 8
52862: PUSH
52863: LD_INT 0
52865: LESS
52866: IFFALSE 52883
// time := time * - 1 ;
52868: LD_ADDR_VAR 0 8
52872: PUSH
52873: LD_VAR 0 8
52877: PUSH
52878: LD_INT 1
52880: NEG
52881: MUL
52882: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
52883: LD_VAR 0 8
52887: PUSH
52888: LD_INT 35
52890: PPUSH
52891: LD_INT 875
52893: PPUSH
52894: CALL_OW 12
52898: PLUS
52899: PPUSH
52900: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52904: LD_INT 1
52906: PPUSH
52907: LD_INT 5
52909: PPUSH
52910: CALL_OW 12
52914: PPUSH
52915: LD_VAR 0 1
52919: PPUSH
52920: LD_INT 1
52922: PPUSH
52923: CALL_OW 55
// end ;
52927: GO 52740
// end ;
52929: LD_VAR 0 5
52933: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52934: LD_INT 0
52936: PPUSH
52937: PPUSH
52938: PPUSH
52939: PPUSH
52940: PPUSH
52941: PPUSH
52942: PPUSH
52943: PPUSH
// if not turrets or not factories then
52944: LD_VAR 0 1
52948: NOT
52949: PUSH
52950: LD_VAR 0 2
52954: NOT
52955: OR
52956: IFFALSE 52960
// exit ;
52958: GO 53267
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52960: LD_ADDR_VAR 0 10
52964: PUSH
52965: LD_INT 5
52967: PUSH
52968: LD_INT 6
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 2
52977: PUSH
52978: LD_INT 4
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 3
52987: PUSH
52988: LD_INT 5
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 24
53002: PUSH
53003: LD_INT 25
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 23
53012: PUSH
53013: LD_INT 27
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 42
53026: PUSH
53027: LD_INT 43
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 44
53036: PUSH
53037: LD_INT 46
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 45
53046: PUSH
53047: LD_INT 47
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: LIST
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: LIST
53063: ST_TO_ADDR
// result := [ ] ;
53064: LD_ADDR_VAR 0 3
53068: PUSH
53069: EMPTY
53070: ST_TO_ADDR
// for i in turrets do
53071: LD_ADDR_VAR 0 4
53075: PUSH
53076: LD_VAR 0 1
53080: PUSH
53081: FOR_IN
53082: IFFALSE 53265
// begin nat := GetNation ( i ) ;
53084: LD_ADDR_VAR 0 7
53088: PUSH
53089: LD_VAR 0 4
53093: PPUSH
53094: CALL_OW 248
53098: ST_TO_ADDR
// weapon := 0 ;
53099: LD_ADDR_VAR 0 8
53103: PUSH
53104: LD_INT 0
53106: ST_TO_ADDR
// if not nat then
53107: LD_VAR 0 7
53111: NOT
53112: IFFALSE 53116
// continue ;
53114: GO 53081
// for j in list [ nat ] do
53116: LD_ADDR_VAR 0 5
53120: PUSH
53121: LD_VAR 0 10
53125: PUSH
53126: LD_VAR 0 7
53130: ARRAY
53131: PUSH
53132: FOR_IN
53133: IFFALSE 53174
// if GetBWeapon ( i ) = j [ 1 ] then
53135: LD_VAR 0 4
53139: PPUSH
53140: CALL_OW 269
53144: PUSH
53145: LD_VAR 0 5
53149: PUSH
53150: LD_INT 1
53152: ARRAY
53153: EQUAL
53154: IFFALSE 53172
// begin weapon := j [ 2 ] ;
53156: LD_ADDR_VAR 0 8
53160: PUSH
53161: LD_VAR 0 5
53165: PUSH
53166: LD_INT 2
53168: ARRAY
53169: ST_TO_ADDR
// break ;
53170: GO 53174
// end ;
53172: GO 53132
53174: POP
53175: POP
// if not weapon then
53176: LD_VAR 0 8
53180: NOT
53181: IFFALSE 53185
// continue ;
53183: GO 53081
// for k in factories do
53185: LD_ADDR_VAR 0 6
53189: PUSH
53190: LD_VAR 0 2
53194: PUSH
53195: FOR_IN
53196: IFFALSE 53261
// begin weapons := AvailableWeaponList ( k ) ;
53198: LD_ADDR_VAR 0 9
53202: PUSH
53203: LD_VAR 0 6
53207: PPUSH
53208: CALL_OW 478
53212: ST_TO_ADDR
// if not weapons then
53213: LD_VAR 0 9
53217: NOT
53218: IFFALSE 53222
// continue ;
53220: GO 53195
// if weapon in weapons then
53222: LD_VAR 0 8
53226: PUSH
53227: LD_VAR 0 9
53231: IN
53232: IFFALSE 53259
// begin result := [ i , weapon ] ;
53234: LD_ADDR_VAR 0 3
53238: PUSH
53239: LD_VAR 0 4
53243: PUSH
53244: LD_VAR 0 8
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: ST_TO_ADDR
// exit ;
53253: POP
53254: POP
53255: POP
53256: POP
53257: GO 53267
// end ; end ;
53259: GO 53195
53261: POP
53262: POP
// end ;
53263: GO 53081
53265: POP
53266: POP
// end ;
53267: LD_VAR 0 3
53271: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53272: LD_INT 0
53274: PPUSH
// if not side or side > 8 then
53275: LD_VAR 0 3
53279: NOT
53280: PUSH
53281: LD_VAR 0 3
53285: PUSH
53286: LD_INT 8
53288: GREATER
53289: OR
53290: IFFALSE 53294
// exit ;
53292: GO 53353
// if not range then
53294: LD_VAR 0 4
53298: NOT
53299: IFFALSE 53310
// range := - 12 ;
53301: LD_ADDR_VAR 0 4
53305: PUSH
53306: LD_INT 12
53308: NEG
53309: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53310: LD_VAR 0 1
53314: PPUSH
53315: LD_VAR 0 2
53319: PPUSH
53320: LD_VAR 0 3
53324: PPUSH
53325: LD_VAR 0 4
53329: PPUSH
53330: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53334: LD_VAR 0 1
53338: PPUSH
53339: LD_VAR 0 2
53343: PPUSH
53344: LD_VAR 0 3
53348: PPUSH
53349: CALL_OW 331
// end ;
53353: LD_VAR 0 5
53357: RET
// export function Video ( mode ) ; begin
53358: LD_INT 0
53360: PPUSH
// ingame_video = mode ;
53361: LD_ADDR_OWVAR 52
53365: PUSH
53366: LD_VAR 0 1
53370: ST_TO_ADDR
// interface_hidden = mode ;
53371: LD_ADDR_OWVAR 54
53375: PUSH
53376: LD_VAR 0 1
53380: ST_TO_ADDR
// end ;
53381: LD_VAR 0 2
53385: RET
// export function Join ( array , element ) ; begin
53386: LD_INT 0
53388: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53389: LD_ADDR_VAR 0 3
53393: PUSH
53394: LD_VAR 0 1
53398: PPUSH
53399: LD_VAR 0 1
53403: PUSH
53404: LD_INT 1
53406: PLUS
53407: PPUSH
53408: LD_VAR 0 2
53412: PPUSH
53413: CALL_OW 1
53417: ST_TO_ADDR
// end ;
53418: LD_VAR 0 3
53422: RET
// export function JoinUnion ( array , element ) ; begin
53423: LD_INT 0
53425: PPUSH
// result := array union element ;
53426: LD_ADDR_VAR 0 3
53430: PUSH
53431: LD_VAR 0 1
53435: PUSH
53436: LD_VAR 0 2
53440: UNION
53441: ST_TO_ADDR
// end ;
53442: LD_VAR 0 3
53446: RET
// export function GetBehemoths ( side ) ; begin
53447: LD_INT 0
53449: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
53450: LD_ADDR_VAR 0 2
53454: PUSH
53455: LD_INT 22
53457: PUSH
53458: LD_VAR 0 1
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 31
53469: PUSH
53470: LD_INT 25
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PPUSH
53481: CALL_OW 69
53485: ST_TO_ADDR
// end ;
53486: LD_VAR 0 2
53490: RET
// export function Shuffle ( array ) ; var i , index ; begin
53491: LD_INT 0
53493: PPUSH
53494: PPUSH
53495: PPUSH
// result := [ ] ;
53496: LD_ADDR_VAR 0 2
53500: PUSH
53501: EMPTY
53502: ST_TO_ADDR
// if not array then
53503: LD_VAR 0 1
53507: NOT
53508: IFFALSE 53512
// exit ;
53510: GO 53611
// Randomize ;
53512: CALL_OW 10
// for i = array downto 1 do
53516: LD_ADDR_VAR 0 3
53520: PUSH
53521: DOUBLE
53522: LD_VAR 0 1
53526: INC
53527: ST_TO_ADDR
53528: LD_INT 1
53530: PUSH
53531: FOR_DOWNTO
53532: IFFALSE 53609
// begin index := rand ( 1 , array ) ;
53534: LD_ADDR_VAR 0 4
53538: PUSH
53539: LD_INT 1
53541: PPUSH
53542: LD_VAR 0 1
53546: PPUSH
53547: CALL_OW 12
53551: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53552: LD_ADDR_VAR 0 2
53556: PUSH
53557: LD_VAR 0 2
53561: PPUSH
53562: LD_VAR 0 2
53566: PUSH
53567: LD_INT 1
53569: PLUS
53570: PPUSH
53571: LD_VAR 0 1
53575: PUSH
53576: LD_VAR 0 4
53580: ARRAY
53581: PPUSH
53582: CALL_OW 2
53586: ST_TO_ADDR
// array := Delete ( array , index ) ;
53587: LD_ADDR_VAR 0 1
53591: PUSH
53592: LD_VAR 0 1
53596: PPUSH
53597: LD_VAR 0 4
53601: PPUSH
53602: CALL_OW 3
53606: ST_TO_ADDR
// end ;
53607: GO 53531
53609: POP
53610: POP
// end ;
53611: LD_VAR 0 2
53615: RET
// export function GetBaseMaterials ( base ) ; begin
53616: LD_INT 0
53618: PPUSH
// result := [ 0 , 0 , 0 ] ;
53619: LD_ADDR_VAR 0 2
53623: PUSH
53624: LD_INT 0
53626: PUSH
53627: LD_INT 0
53629: PUSH
53630: LD_INT 0
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: LIST
53637: ST_TO_ADDR
// if not base then
53638: LD_VAR 0 1
53642: NOT
53643: IFFALSE 53647
// exit ;
53645: GO 53696
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53647: LD_ADDR_VAR 0 2
53651: PUSH
53652: LD_VAR 0 1
53656: PPUSH
53657: LD_INT 1
53659: PPUSH
53660: CALL_OW 275
53664: PUSH
53665: LD_VAR 0 1
53669: PPUSH
53670: LD_INT 2
53672: PPUSH
53673: CALL_OW 275
53677: PUSH
53678: LD_VAR 0 1
53682: PPUSH
53683: LD_INT 3
53685: PPUSH
53686: CALL_OW 275
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: LIST
53695: ST_TO_ADDR
// end ;
53696: LD_VAR 0 2
53700: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53701: LD_INT 0
53703: PPUSH
53704: PPUSH
// result := array ;
53705: LD_ADDR_VAR 0 3
53709: PUSH
53710: LD_VAR 0 1
53714: ST_TO_ADDR
// if size >= result then
53715: LD_VAR 0 2
53719: PUSH
53720: LD_VAR 0 3
53724: GREATEREQUAL
53725: IFFALSE 53729
// exit ;
53727: GO 53779
// if size then
53729: LD_VAR 0 2
53733: IFFALSE 53779
// for i := array downto size do
53735: LD_ADDR_VAR 0 4
53739: PUSH
53740: DOUBLE
53741: LD_VAR 0 1
53745: INC
53746: ST_TO_ADDR
53747: LD_VAR 0 2
53751: PUSH
53752: FOR_DOWNTO
53753: IFFALSE 53777
// result := Delete ( result , result ) ;
53755: LD_ADDR_VAR 0 3
53759: PUSH
53760: LD_VAR 0 3
53764: PPUSH
53765: LD_VAR 0 3
53769: PPUSH
53770: CALL_OW 3
53774: ST_TO_ADDR
53775: GO 53752
53777: POP
53778: POP
// end ;
53779: LD_VAR 0 3
53783: RET
// export function ComExit ( unit ) ; var tmp ; begin
53784: LD_INT 0
53786: PPUSH
53787: PPUSH
// if not IsInUnit ( unit ) then
53788: LD_VAR 0 1
53792: PPUSH
53793: CALL_OW 310
53797: NOT
53798: IFFALSE 53802
// exit ;
53800: GO 53862
// tmp := IsInUnit ( unit ) ;
53802: LD_ADDR_VAR 0 3
53806: PUSH
53807: LD_VAR 0 1
53811: PPUSH
53812: CALL_OW 310
53816: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53817: LD_VAR 0 3
53821: PPUSH
53822: CALL_OW 247
53826: PUSH
53827: LD_INT 2
53829: EQUAL
53830: IFFALSE 53843
// ComExitVehicle ( unit ) else
53832: LD_VAR 0 1
53836: PPUSH
53837: CALL_OW 121
53841: GO 53852
// ComExitBuilding ( unit ) ;
53843: LD_VAR 0 1
53847: PPUSH
53848: CALL_OW 122
// result := tmp ;
53852: LD_ADDR_VAR 0 2
53856: PUSH
53857: LD_VAR 0 3
53861: ST_TO_ADDR
// end ;
53862: LD_VAR 0 2
53866: RET
// export function ComExitAll ( units ) ; var i ; begin
53867: LD_INT 0
53869: PPUSH
53870: PPUSH
// if not units then
53871: LD_VAR 0 1
53875: NOT
53876: IFFALSE 53880
// exit ;
53878: GO 53906
// for i in units do
53880: LD_ADDR_VAR 0 3
53884: PUSH
53885: LD_VAR 0 1
53889: PUSH
53890: FOR_IN
53891: IFFALSE 53904
// ComExit ( i ) ;
53893: LD_VAR 0 3
53897: PPUSH
53898: CALL 53784 0 1
53902: GO 53890
53904: POP
53905: POP
// end ;
53906: LD_VAR 0 2
53910: RET
// export function ResetHc ; begin
53911: LD_INT 0
53913: PPUSH
// InitHc ;
53914: CALL_OW 19
// hc_importance := 0 ;
53918: LD_ADDR_OWVAR 32
53922: PUSH
53923: LD_INT 0
53925: ST_TO_ADDR
// end ;
53926: LD_VAR 0 1
53930: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53931: LD_INT 0
53933: PPUSH
53934: PPUSH
53935: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53936: LD_ADDR_VAR 0 6
53940: PUSH
53941: LD_VAR 0 1
53945: PUSH
53946: LD_VAR 0 3
53950: PLUS
53951: PUSH
53952: LD_INT 2
53954: DIV
53955: ST_TO_ADDR
// if _x < 0 then
53956: LD_VAR 0 6
53960: PUSH
53961: LD_INT 0
53963: LESS
53964: IFFALSE 53981
// _x := _x * - 1 ;
53966: LD_ADDR_VAR 0 6
53970: PUSH
53971: LD_VAR 0 6
53975: PUSH
53976: LD_INT 1
53978: NEG
53979: MUL
53980: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53981: LD_ADDR_VAR 0 7
53985: PUSH
53986: LD_VAR 0 2
53990: PUSH
53991: LD_VAR 0 4
53995: PLUS
53996: PUSH
53997: LD_INT 2
53999: DIV
54000: ST_TO_ADDR
// if _y < 0 then
54001: LD_VAR 0 7
54005: PUSH
54006: LD_INT 0
54008: LESS
54009: IFFALSE 54026
// _y := _y * - 1 ;
54011: LD_ADDR_VAR 0 7
54015: PUSH
54016: LD_VAR 0 7
54020: PUSH
54021: LD_INT 1
54023: NEG
54024: MUL
54025: ST_TO_ADDR
// result := [ _x , _y ] ;
54026: LD_ADDR_VAR 0 5
54030: PUSH
54031: LD_VAR 0 6
54035: PUSH
54036: LD_VAR 0 7
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: ST_TO_ADDR
// end ;
54045: LD_VAR 0 5
54049: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54050: LD_INT 0
54052: PPUSH
54053: PPUSH
54054: PPUSH
54055: PPUSH
// task := GetTaskList ( unit ) ;
54056: LD_ADDR_VAR 0 7
54060: PUSH
54061: LD_VAR 0 1
54065: PPUSH
54066: CALL_OW 437
54070: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54071: LD_VAR 0 7
54075: NOT
54076: PUSH
54077: LD_VAR 0 1
54081: PPUSH
54082: LD_VAR 0 2
54086: PPUSH
54087: CALL_OW 308
54091: NOT
54092: AND
54093: IFFALSE 54097
// exit ;
54095: GO 54215
// if IsInArea ( unit , area ) then
54097: LD_VAR 0 1
54101: PPUSH
54102: LD_VAR 0 2
54106: PPUSH
54107: CALL_OW 308
54111: IFFALSE 54129
// begin ComMoveToArea ( unit , goAway ) ;
54113: LD_VAR 0 1
54117: PPUSH
54118: LD_VAR 0 3
54122: PPUSH
54123: CALL_OW 113
// exit ;
54127: GO 54215
// end ; if task [ 1 ] [ 1 ] <> M then
54129: LD_VAR 0 7
54133: PUSH
54134: LD_INT 1
54136: ARRAY
54137: PUSH
54138: LD_INT 1
54140: ARRAY
54141: PUSH
54142: LD_STRING M
54144: NONEQUAL
54145: IFFALSE 54149
// exit ;
54147: GO 54215
// x := task [ 1 ] [ 2 ] ;
54149: LD_ADDR_VAR 0 5
54153: PUSH
54154: LD_VAR 0 7
54158: PUSH
54159: LD_INT 1
54161: ARRAY
54162: PUSH
54163: LD_INT 2
54165: ARRAY
54166: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54167: LD_ADDR_VAR 0 6
54171: PUSH
54172: LD_VAR 0 7
54176: PUSH
54177: LD_INT 1
54179: ARRAY
54180: PUSH
54181: LD_INT 3
54183: ARRAY
54184: ST_TO_ADDR
// if InArea ( x , y , area ) then
54185: LD_VAR 0 5
54189: PPUSH
54190: LD_VAR 0 6
54194: PPUSH
54195: LD_VAR 0 2
54199: PPUSH
54200: CALL_OW 309
54204: IFFALSE 54215
// ComStop ( unit ) ;
54206: LD_VAR 0 1
54210: PPUSH
54211: CALL_OW 141
// end ;
54215: LD_VAR 0 4
54219: RET
// export function Abs ( value ) ; begin
54220: LD_INT 0
54222: PPUSH
// result := value ;
54223: LD_ADDR_VAR 0 2
54227: PUSH
54228: LD_VAR 0 1
54232: ST_TO_ADDR
// if value < 0 then
54233: LD_VAR 0 1
54237: PUSH
54238: LD_INT 0
54240: LESS
54241: IFFALSE 54258
// result := value * - 1 ;
54243: LD_ADDR_VAR 0 2
54247: PUSH
54248: LD_VAR 0 1
54252: PUSH
54253: LD_INT 1
54255: NEG
54256: MUL
54257: ST_TO_ADDR
// end ;
54258: LD_VAR 0 2
54262: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54263: LD_INT 0
54265: PPUSH
54266: PPUSH
54267: PPUSH
54268: PPUSH
54269: PPUSH
54270: PPUSH
54271: PPUSH
54272: PPUSH
// if not unit or not building then
54273: LD_VAR 0 1
54277: NOT
54278: PUSH
54279: LD_VAR 0 2
54283: NOT
54284: OR
54285: IFFALSE 54289
// exit ;
54287: GO 54515
// x := GetX ( building ) ;
54289: LD_ADDR_VAR 0 4
54293: PUSH
54294: LD_VAR 0 2
54298: PPUSH
54299: CALL_OW 250
54303: ST_TO_ADDR
// y := GetY ( building ) ;
54304: LD_ADDR_VAR 0 6
54308: PUSH
54309: LD_VAR 0 2
54313: PPUSH
54314: CALL_OW 251
54318: ST_TO_ADDR
// d := GetDir ( building ) ;
54319: LD_ADDR_VAR 0 8
54323: PUSH
54324: LD_VAR 0 2
54328: PPUSH
54329: CALL_OW 254
54333: ST_TO_ADDR
// r := 4 ;
54334: LD_ADDR_VAR 0 9
54338: PUSH
54339: LD_INT 4
54341: ST_TO_ADDR
// for i := 1 to 5 do
54342: LD_ADDR_VAR 0 10
54346: PUSH
54347: DOUBLE
54348: LD_INT 1
54350: DEC
54351: ST_TO_ADDR
54352: LD_INT 5
54354: PUSH
54355: FOR_TO
54356: IFFALSE 54513
// begin _x := ShiftX ( x , d , r + i ) ;
54358: LD_ADDR_VAR 0 5
54362: PUSH
54363: LD_VAR 0 4
54367: PPUSH
54368: LD_VAR 0 8
54372: PPUSH
54373: LD_VAR 0 9
54377: PUSH
54378: LD_VAR 0 10
54382: PLUS
54383: PPUSH
54384: CALL_OW 272
54388: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54389: LD_ADDR_VAR 0 7
54393: PUSH
54394: LD_VAR 0 6
54398: PPUSH
54399: LD_VAR 0 8
54403: PPUSH
54404: LD_VAR 0 9
54408: PUSH
54409: LD_VAR 0 10
54413: PLUS
54414: PPUSH
54415: CALL_OW 273
54419: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54420: LD_VAR 0 5
54424: PPUSH
54425: LD_VAR 0 7
54429: PPUSH
54430: CALL_OW 488
54434: PUSH
54435: LD_VAR 0 5
54439: PPUSH
54440: LD_VAR 0 7
54444: PPUSH
54445: CALL_OW 428
54449: PPUSH
54450: CALL_OW 247
54454: PUSH
54455: LD_INT 3
54457: PUSH
54458: LD_INT 2
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: IN
54465: NOT
54466: AND
54467: IFFALSE 54511
// begin ComMoveXY ( unit , _x , _y ) ;
54469: LD_VAR 0 1
54473: PPUSH
54474: LD_VAR 0 5
54478: PPUSH
54479: LD_VAR 0 7
54483: PPUSH
54484: CALL_OW 111
// result := [ _x , _y ] ;
54488: LD_ADDR_VAR 0 3
54492: PUSH
54493: LD_VAR 0 5
54497: PUSH
54498: LD_VAR 0 7
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: ST_TO_ADDR
// exit ;
54507: POP
54508: POP
54509: GO 54515
// end ; end ;
54511: GO 54355
54513: POP
54514: POP
// end ;
54515: LD_VAR 0 3
54519: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54520: LD_INT 0
54522: PPUSH
54523: PPUSH
54524: PPUSH
// result := 0 ;
54525: LD_ADDR_VAR 0 3
54529: PUSH
54530: LD_INT 0
54532: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
54533: LD_VAR 0 1
54537: PUSH
54538: LD_INT 0
54540: LESS
54541: PUSH
54542: LD_VAR 0 1
54546: PUSH
54547: LD_INT 8
54549: GREATER
54550: OR
54551: PUSH
54552: LD_VAR 0 2
54556: PUSH
54557: LD_INT 0
54559: LESS
54560: OR
54561: PUSH
54562: LD_VAR 0 2
54566: PUSH
54567: LD_INT 8
54569: GREATER
54570: OR
54571: IFFALSE 54575
// exit ;
54573: GO 54650
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
54575: LD_ADDR_VAR 0 4
54579: PUSH
54580: LD_INT 22
54582: PUSH
54583: LD_VAR 0 2
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PPUSH
54592: CALL_OW 69
54596: PUSH
54597: FOR_IN
54598: IFFALSE 54648
// begin un := UnitShoot ( i ) ;
54600: LD_ADDR_VAR 0 5
54604: PUSH
54605: LD_VAR 0 4
54609: PPUSH
54610: CALL_OW 504
54614: ST_TO_ADDR
// if GetSide ( un ) = side1 then
54615: LD_VAR 0 5
54619: PPUSH
54620: CALL_OW 255
54624: PUSH
54625: LD_VAR 0 1
54629: EQUAL
54630: IFFALSE 54646
// begin result := un ;
54632: LD_ADDR_VAR 0 3
54636: PUSH
54637: LD_VAR 0 5
54641: ST_TO_ADDR
// exit ;
54642: POP
54643: POP
54644: GO 54650
// end ; end ;
54646: GO 54597
54648: POP
54649: POP
// end ;
54650: LD_VAR 0 3
54654: RET
// export function GetCargoBay ( units ) ; begin
54655: LD_INT 0
54657: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
54658: LD_ADDR_VAR 0 2
54662: PUSH
54663: LD_VAR 0 1
54667: PPUSH
54668: LD_INT 2
54670: PUSH
54671: LD_INT 34
54673: PUSH
54674: LD_INT 12
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 34
54683: PUSH
54684: LD_INT 51
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 34
54693: PUSH
54694: LD_INT 32
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 34
54703: PUSH
54704: LD_INT 89
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: PPUSH
54718: CALL_OW 72
54722: ST_TO_ADDR
// end ;
54723: LD_VAR 0 2
54727: RET
// export function Negate ( value ) ; begin
54728: LD_INT 0
54730: PPUSH
// result := not value ;
54731: LD_ADDR_VAR 0 2
54735: PUSH
54736: LD_VAR 0 1
54740: NOT
54741: ST_TO_ADDR
// end ;
54742: LD_VAR 0 2
54746: RET
// export function Inc ( value ) ; begin
54747: LD_INT 0
54749: PPUSH
// result := value + 1 ;
54750: LD_ADDR_VAR 0 2
54754: PUSH
54755: LD_VAR 0 1
54759: PUSH
54760: LD_INT 1
54762: PLUS
54763: ST_TO_ADDR
// end ;
54764: LD_VAR 0 2
54768: RET
// export function Dec ( value ) ; begin
54769: LD_INT 0
54771: PPUSH
// result := value - 1 ;
54772: LD_ADDR_VAR 0 2
54776: PUSH
54777: LD_VAR 0 1
54781: PUSH
54782: LD_INT 1
54784: MINUS
54785: ST_TO_ADDR
// end ;
54786: LD_VAR 0 2
54790: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54791: LD_INT 0
54793: PPUSH
54794: PPUSH
54795: PPUSH
54796: PPUSH
54797: PPUSH
54798: PPUSH
54799: PPUSH
54800: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54801: LD_VAR 0 1
54805: PPUSH
54806: LD_VAR 0 2
54810: PPUSH
54811: CALL_OW 488
54815: NOT
54816: PUSH
54817: LD_VAR 0 3
54821: PPUSH
54822: LD_VAR 0 4
54826: PPUSH
54827: CALL_OW 488
54831: NOT
54832: OR
54833: IFFALSE 54846
// begin result := - 1 ;
54835: LD_ADDR_VAR 0 5
54839: PUSH
54840: LD_INT 1
54842: NEG
54843: ST_TO_ADDR
// exit ;
54844: GO 55081
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54846: LD_ADDR_VAR 0 12
54850: PUSH
54851: LD_VAR 0 1
54855: PPUSH
54856: LD_VAR 0 2
54860: PPUSH
54861: LD_VAR 0 3
54865: PPUSH
54866: LD_VAR 0 4
54870: PPUSH
54871: CALL 53931 0 4
54875: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54876: LD_ADDR_VAR 0 11
54880: PUSH
54881: LD_VAR 0 1
54885: PPUSH
54886: LD_VAR 0 2
54890: PPUSH
54891: LD_VAR 0 12
54895: PUSH
54896: LD_INT 1
54898: ARRAY
54899: PPUSH
54900: LD_VAR 0 12
54904: PUSH
54905: LD_INT 2
54907: ARRAY
54908: PPUSH
54909: CALL_OW 298
54913: ST_TO_ADDR
// distance := 9999 ;
54914: LD_ADDR_VAR 0 10
54918: PUSH
54919: LD_INT 9999
54921: ST_TO_ADDR
// for i := 0 to 5 do
54922: LD_ADDR_VAR 0 6
54926: PUSH
54927: DOUBLE
54928: LD_INT 0
54930: DEC
54931: ST_TO_ADDR
54932: LD_INT 5
54934: PUSH
54935: FOR_TO
54936: IFFALSE 55079
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54938: LD_ADDR_VAR 0 7
54942: PUSH
54943: LD_VAR 0 1
54947: PPUSH
54948: LD_VAR 0 6
54952: PPUSH
54953: LD_VAR 0 11
54957: PPUSH
54958: CALL_OW 272
54962: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
54963: LD_ADDR_VAR 0 8
54967: PUSH
54968: LD_VAR 0 2
54972: PPUSH
54973: LD_VAR 0 6
54977: PPUSH
54978: LD_VAR 0 11
54982: PPUSH
54983: CALL_OW 273
54987: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54988: LD_VAR 0 7
54992: PPUSH
54993: LD_VAR 0 8
54997: PPUSH
54998: CALL_OW 488
55002: NOT
55003: IFFALSE 55007
// continue ;
55005: GO 54935
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55007: LD_ADDR_VAR 0 9
55011: PUSH
55012: LD_VAR 0 12
55016: PUSH
55017: LD_INT 1
55019: ARRAY
55020: PPUSH
55021: LD_VAR 0 12
55025: PUSH
55026: LD_INT 2
55028: ARRAY
55029: PPUSH
55030: LD_VAR 0 7
55034: PPUSH
55035: LD_VAR 0 8
55039: PPUSH
55040: CALL_OW 298
55044: ST_TO_ADDR
// if tmp < distance then
55045: LD_VAR 0 9
55049: PUSH
55050: LD_VAR 0 10
55054: LESS
55055: IFFALSE 55077
// begin result := i ;
55057: LD_ADDR_VAR 0 5
55061: PUSH
55062: LD_VAR 0 6
55066: ST_TO_ADDR
// distance := tmp ;
55067: LD_ADDR_VAR 0 10
55071: PUSH
55072: LD_VAR 0 9
55076: ST_TO_ADDR
// end ; end ;
55077: GO 54935
55079: POP
55080: POP
// end ;
55081: LD_VAR 0 5
55085: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55086: LD_INT 0
55088: PPUSH
55089: PPUSH
// if not driver or not IsInUnit ( driver ) then
55090: LD_VAR 0 1
55094: NOT
55095: PUSH
55096: LD_VAR 0 1
55100: PPUSH
55101: CALL_OW 310
55105: NOT
55106: OR
55107: IFFALSE 55111
// exit ;
55109: GO 55201
// vehicle := IsInUnit ( driver ) ;
55111: LD_ADDR_VAR 0 3
55115: PUSH
55116: LD_VAR 0 1
55120: PPUSH
55121: CALL_OW 310
55125: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55126: LD_VAR 0 1
55130: PPUSH
55131: LD_STRING \
55133: PUSH
55134: LD_INT 0
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: LD_INT 0
55142: PUSH
55143: LD_INT 0
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: LD_INT 0
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: PUSH
55161: LD_STRING E
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: LD_VAR 0 3
55174: PUSH
55175: LD_INT 0
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: LD_INT 0
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PPUSH
55197: CALL_OW 446
// end ;
55201: LD_VAR 0 2
55205: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55206: LD_INT 0
55208: PPUSH
55209: PPUSH
// if not driver or not IsInUnit ( driver ) then
55210: LD_VAR 0 1
55214: NOT
55215: PUSH
55216: LD_VAR 0 1
55220: PPUSH
55221: CALL_OW 310
55225: NOT
55226: OR
55227: IFFALSE 55231
// exit ;
55229: GO 55321
// vehicle := IsInUnit ( driver ) ;
55231: LD_ADDR_VAR 0 3
55235: PUSH
55236: LD_VAR 0 1
55240: PPUSH
55241: CALL_OW 310
55245: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55246: LD_VAR 0 1
55250: PPUSH
55251: LD_STRING \
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: LD_INT 0
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: PUSH
55281: LD_STRING E
55283: PUSH
55284: LD_INT 0
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: LD_VAR 0 3
55294: PUSH
55295: LD_INT 0
55297: PUSH
55298: LD_INT 0
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PPUSH
55317: CALL_OW 447
// end ;
55321: LD_VAR 0 2
55325: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55326: LD_INT 0
55328: PPUSH
55329: PPUSH
55330: PPUSH
// tmp := [ ] ;
55331: LD_ADDR_VAR 0 5
55335: PUSH
55336: EMPTY
55337: ST_TO_ADDR
// for i in units do
55338: LD_ADDR_VAR 0 4
55342: PUSH
55343: LD_VAR 0 1
55347: PUSH
55348: FOR_IN
55349: IFFALSE 55387
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55351: LD_ADDR_VAR 0 5
55355: PUSH
55356: LD_VAR 0 5
55360: PPUSH
55361: LD_VAR 0 5
55365: PUSH
55366: LD_INT 1
55368: PLUS
55369: PPUSH
55370: LD_VAR 0 4
55374: PPUSH
55375: CALL_OW 256
55379: PPUSH
55380: CALL_OW 2
55384: ST_TO_ADDR
55385: GO 55348
55387: POP
55388: POP
// if not tmp then
55389: LD_VAR 0 5
55393: NOT
55394: IFFALSE 55398
// exit ;
55396: GO 55446
// if asc then
55398: LD_VAR 0 2
55402: IFFALSE 55426
// result := SortListByListAsc ( units , tmp ) else
55404: LD_ADDR_VAR 0 3
55408: PUSH
55409: LD_VAR 0 1
55413: PPUSH
55414: LD_VAR 0 5
55418: PPUSH
55419: CALL_OW 76
55423: ST_TO_ADDR
55424: GO 55446
// result := SortListByListDesc ( units , tmp ) ;
55426: LD_ADDR_VAR 0 3
55430: PUSH
55431: LD_VAR 0 1
55435: PPUSH
55436: LD_VAR 0 5
55440: PPUSH
55441: CALL_OW 77
55445: ST_TO_ADDR
// end ;
55446: LD_VAR 0 3
55450: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55451: LD_INT 0
55453: PPUSH
55454: PPUSH
// task := GetTaskList ( mech ) ;
55455: LD_ADDR_VAR 0 4
55459: PUSH
55460: LD_VAR 0 1
55464: PPUSH
55465: CALL_OW 437
55469: ST_TO_ADDR
// if not task then
55470: LD_VAR 0 4
55474: NOT
55475: IFFALSE 55479
// exit ;
55477: GO 55521
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55479: LD_ADDR_VAR 0 3
55483: PUSH
55484: LD_VAR 0 4
55488: PUSH
55489: LD_INT 1
55491: ARRAY
55492: PUSH
55493: LD_INT 1
55495: ARRAY
55496: PUSH
55497: LD_STRING r
55499: EQUAL
55500: PUSH
55501: LD_VAR 0 4
55505: PUSH
55506: LD_INT 1
55508: ARRAY
55509: PUSH
55510: LD_INT 4
55512: ARRAY
55513: PUSH
55514: LD_VAR 0 2
55518: EQUAL
55519: AND
55520: ST_TO_ADDR
// end ;
55521: LD_VAR 0 3
55525: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
55526: LD_INT 0
55528: PPUSH
// SetDir ( unit , d ) ;
55529: LD_VAR 0 1
55533: PPUSH
55534: LD_VAR 0 4
55538: PPUSH
55539: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
55543: LD_VAR 0 1
55547: PPUSH
55548: LD_VAR 0 2
55552: PPUSH
55553: LD_VAR 0 3
55557: PPUSH
55558: LD_VAR 0 5
55562: PPUSH
55563: CALL_OW 48
// end ;
55567: LD_VAR 0 6
55571: RET
// export function ToNaturalNumber ( number ) ; begin
55572: LD_INT 0
55574: PPUSH
// result := number div 1 ;
55575: LD_ADDR_VAR 0 2
55579: PUSH
55580: LD_VAR 0 1
55584: PUSH
55585: LD_INT 1
55587: DIV
55588: ST_TO_ADDR
// if number < 0 then
55589: LD_VAR 0 1
55593: PUSH
55594: LD_INT 0
55596: LESS
55597: IFFALSE 55607
// result := 0 ;
55599: LD_ADDR_VAR 0 2
55603: PUSH
55604: LD_INT 0
55606: ST_TO_ADDR
// end ;
55607: LD_VAR 0 2
55611: RET
// export function SortByClass ( units , class ) ; var un ; begin
55612: LD_INT 0
55614: PPUSH
55615: PPUSH
// if not units or not class then
55616: LD_VAR 0 1
55620: NOT
55621: PUSH
55622: LD_VAR 0 2
55626: NOT
55627: OR
55628: IFFALSE 55632
// exit ;
55630: GO 55727
// result := [ ] ;
55632: LD_ADDR_VAR 0 3
55636: PUSH
55637: EMPTY
55638: ST_TO_ADDR
// for un in units do
55639: LD_ADDR_VAR 0 4
55643: PUSH
55644: LD_VAR 0 1
55648: PUSH
55649: FOR_IN
55650: IFFALSE 55725
// if GetClass ( un ) = class then
55652: LD_VAR 0 4
55656: PPUSH
55657: CALL_OW 257
55661: PUSH
55662: LD_VAR 0 2
55666: EQUAL
55667: IFFALSE 55694
// result := Insert ( result , 1 , un ) else
55669: LD_ADDR_VAR 0 3
55673: PUSH
55674: LD_VAR 0 3
55678: PPUSH
55679: LD_INT 1
55681: PPUSH
55682: LD_VAR 0 4
55686: PPUSH
55687: CALL_OW 2
55691: ST_TO_ADDR
55692: GO 55723
// result := Replace ( result , result + 1 , un ) ;
55694: LD_ADDR_VAR 0 3
55698: PUSH
55699: LD_VAR 0 3
55703: PPUSH
55704: LD_VAR 0 3
55708: PUSH
55709: LD_INT 1
55711: PLUS
55712: PPUSH
55713: LD_VAR 0 4
55717: PPUSH
55718: CALL_OW 1
55722: ST_TO_ADDR
55723: GO 55649
55725: POP
55726: POP
// end ;
55727: LD_VAR 0 3
55731: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
55732: LD_INT 0
55734: PPUSH
55735: PPUSH
55736: PPUSH
55737: PPUSH
55738: PPUSH
55739: PPUSH
55740: PPUSH
// result := [ ] ;
55741: LD_ADDR_VAR 0 4
55745: PUSH
55746: EMPTY
55747: ST_TO_ADDR
// if x - r < 0 then
55748: LD_VAR 0 1
55752: PUSH
55753: LD_VAR 0 3
55757: MINUS
55758: PUSH
55759: LD_INT 0
55761: LESS
55762: IFFALSE 55774
// min_x := 0 else
55764: LD_ADDR_VAR 0 8
55768: PUSH
55769: LD_INT 0
55771: ST_TO_ADDR
55772: GO 55790
// min_x := x - r ;
55774: LD_ADDR_VAR 0 8
55778: PUSH
55779: LD_VAR 0 1
55783: PUSH
55784: LD_VAR 0 3
55788: MINUS
55789: ST_TO_ADDR
// if y - r < 0 then
55790: LD_VAR 0 2
55794: PUSH
55795: LD_VAR 0 3
55799: MINUS
55800: PUSH
55801: LD_INT 0
55803: LESS
55804: IFFALSE 55816
// min_y := 0 else
55806: LD_ADDR_VAR 0 7
55810: PUSH
55811: LD_INT 0
55813: ST_TO_ADDR
55814: GO 55832
// min_y := y - r ;
55816: LD_ADDR_VAR 0 7
55820: PUSH
55821: LD_VAR 0 2
55825: PUSH
55826: LD_VAR 0 3
55830: MINUS
55831: ST_TO_ADDR
// max_x := x + r ;
55832: LD_ADDR_VAR 0 9
55836: PUSH
55837: LD_VAR 0 1
55841: PUSH
55842: LD_VAR 0 3
55846: PLUS
55847: ST_TO_ADDR
// max_y := y + r ;
55848: LD_ADDR_VAR 0 10
55852: PUSH
55853: LD_VAR 0 2
55857: PUSH
55858: LD_VAR 0 3
55862: PLUS
55863: ST_TO_ADDR
// for _x = min_x to max_x do
55864: LD_ADDR_VAR 0 5
55868: PUSH
55869: DOUBLE
55870: LD_VAR 0 8
55874: DEC
55875: ST_TO_ADDR
55876: LD_VAR 0 9
55880: PUSH
55881: FOR_TO
55882: IFFALSE 55983
// for _y = min_y to max_y do
55884: LD_ADDR_VAR 0 6
55888: PUSH
55889: DOUBLE
55890: LD_VAR 0 7
55894: DEC
55895: ST_TO_ADDR
55896: LD_VAR 0 10
55900: PUSH
55901: FOR_TO
55902: IFFALSE 55979
// begin if not ValidHex ( _x , _y ) then
55904: LD_VAR 0 5
55908: PPUSH
55909: LD_VAR 0 6
55913: PPUSH
55914: CALL_OW 488
55918: NOT
55919: IFFALSE 55923
// continue ;
55921: GO 55901
// if GetResourceTypeXY ( _x , _y ) then
55923: LD_VAR 0 5
55927: PPUSH
55928: LD_VAR 0 6
55932: PPUSH
55933: CALL_OW 283
55937: IFFALSE 55977
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55939: LD_ADDR_VAR 0 4
55943: PUSH
55944: LD_VAR 0 4
55948: PPUSH
55949: LD_VAR 0 4
55953: PUSH
55954: LD_INT 1
55956: PLUS
55957: PPUSH
55958: LD_VAR 0 5
55962: PUSH
55963: LD_VAR 0 6
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PPUSH
55972: CALL_OW 1
55976: ST_TO_ADDR
// end ;
55977: GO 55901
55979: POP
55980: POP
55981: GO 55881
55983: POP
55984: POP
// end ;
55985: LD_VAR 0 4
55989: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55990: LD_INT 0
55992: PPUSH
55993: PPUSH
55994: PPUSH
55995: PPUSH
55996: PPUSH
55997: PPUSH
55998: PPUSH
55999: PPUSH
// if not units then
56000: LD_VAR 0 1
56004: NOT
56005: IFFALSE 56009
// exit ;
56007: GO 56533
// result := UnitFilter ( units , [ f_ok ] ) ;
56009: LD_ADDR_VAR 0 3
56013: PUSH
56014: LD_VAR 0 1
56018: PPUSH
56019: LD_INT 50
56021: PUSH
56022: EMPTY
56023: LIST
56024: PPUSH
56025: CALL_OW 72
56029: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56030: LD_ADDR_VAR 0 8
56034: PUSH
56035: LD_VAR 0 1
56039: PUSH
56040: LD_INT 1
56042: ARRAY
56043: PPUSH
56044: CALL_OW 255
56048: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
56049: LD_ADDR_VAR 0 10
56053: PUSH
56054: LD_INT 29
56056: PUSH
56057: LD_INT 91
56059: PUSH
56060: LD_INT 49
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: LIST
56067: ST_TO_ADDR
// if not result then
56068: LD_VAR 0 3
56072: NOT
56073: IFFALSE 56077
// exit ;
56075: GO 56533
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56077: LD_ADDR_VAR 0 5
56081: PUSH
56082: LD_INT 81
56084: PUSH
56085: LD_VAR 0 8
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PPUSH
56094: CALL_OW 69
56098: ST_TO_ADDR
// for i in result do
56099: LD_ADDR_VAR 0 4
56103: PUSH
56104: LD_VAR 0 3
56108: PUSH
56109: FOR_IN
56110: IFFALSE 56531
// begin tag := GetTag ( i ) + 1 ;
56112: LD_ADDR_VAR 0 9
56116: PUSH
56117: LD_VAR 0 4
56121: PPUSH
56122: CALL_OW 110
56126: PUSH
56127: LD_INT 1
56129: PLUS
56130: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
56131: LD_ADDR_VAR 0 7
56135: PUSH
56136: LD_VAR 0 4
56140: PPUSH
56141: CALL_OW 250
56145: PPUSH
56146: LD_VAR 0 4
56150: PPUSH
56151: CALL_OW 251
56155: PPUSH
56156: LD_INT 6
56158: PPUSH
56159: CALL 55732 0 3
56163: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
56164: LD_VAR 0 4
56168: PPUSH
56169: CALL_OW 247
56173: PUSH
56174: LD_INT 2
56176: EQUAL
56177: PUSH
56178: LD_VAR 0 7
56182: AND
56183: PUSH
56184: LD_VAR 0 4
56188: PPUSH
56189: CALL_OW 264
56193: PUSH
56194: LD_VAR 0 10
56198: IN
56199: NOT
56200: AND
56201: IFFALSE 56240
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
56203: LD_VAR 0 4
56207: PPUSH
56208: LD_VAR 0 7
56212: PUSH
56213: LD_INT 1
56215: ARRAY
56216: PUSH
56217: LD_INT 1
56219: ARRAY
56220: PPUSH
56221: LD_VAR 0 7
56225: PUSH
56226: LD_INT 1
56228: ARRAY
56229: PUSH
56230: LD_INT 2
56232: ARRAY
56233: PPUSH
56234: CALL_OW 116
56238: GO 56529
// if path > tag then
56240: LD_VAR 0 2
56244: PUSH
56245: LD_VAR 0 9
56249: GREATER
56250: IFFALSE 56458
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
56252: LD_ADDR_VAR 0 6
56256: PUSH
56257: LD_VAR 0 5
56261: PPUSH
56262: LD_INT 91
56264: PUSH
56265: LD_VAR 0 4
56269: PUSH
56270: LD_INT 8
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: LIST
56277: PPUSH
56278: CALL_OW 72
56282: ST_TO_ADDR
// if nearEnemy then
56283: LD_VAR 0 6
56287: IFFALSE 56356
// begin if GetWeapon ( i ) = ru_time_lapser then
56289: LD_VAR 0 4
56293: PPUSH
56294: CALL_OW 264
56298: PUSH
56299: LD_INT 49
56301: EQUAL
56302: IFFALSE 56330
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56304: LD_VAR 0 4
56308: PPUSH
56309: LD_VAR 0 6
56313: PPUSH
56314: LD_VAR 0 4
56318: PPUSH
56319: CALL_OW 74
56323: PPUSH
56324: CALL_OW 112
56328: GO 56354
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
56330: LD_VAR 0 4
56334: PPUSH
56335: LD_VAR 0 6
56339: PPUSH
56340: LD_VAR 0 4
56344: PPUSH
56345: CALL_OW 74
56349: PPUSH
56350: CALL 57458 0 2
// end else
56354: GO 56456
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
56356: LD_VAR 0 4
56360: PPUSH
56361: LD_VAR 0 2
56365: PUSH
56366: LD_VAR 0 9
56370: ARRAY
56371: PUSH
56372: LD_INT 1
56374: ARRAY
56375: PPUSH
56376: LD_VAR 0 2
56380: PUSH
56381: LD_VAR 0 9
56385: ARRAY
56386: PUSH
56387: LD_INT 2
56389: ARRAY
56390: PPUSH
56391: CALL_OW 297
56395: PUSH
56396: LD_INT 6
56398: GREATER
56399: IFFALSE 56442
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
56401: LD_VAR 0 4
56405: PPUSH
56406: LD_VAR 0 2
56410: PUSH
56411: LD_VAR 0 9
56415: ARRAY
56416: PUSH
56417: LD_INT 1
56419: ARRAY
56420: PPUSH
56421: LD_VAR 0 2
56425: PUSH
56426: LD_VAR 0 9
56430: ARRAY
56431: PUSH
56432: LD_INT 2
56434: ARRAY
56435: PPUSH
56436: CALL_OW 114
56440: GO 56456
// SetTag ( i , tag ) ;
56442: LD_VAR 0 4
56446: PPUSH
56447: LD_VAR 0 9
56451: PPUSH
56452: CALL_OW 109
// end else
56456: GO 56529
// if enemy then
56458: LD_VAR 0 5
56462: IFFALSE 56529
// begin if GetWeapon ( i ) = ru_time_lapser then
56464: LD_VAR 0 4
56468: PPUSH
56469: CALL_OW 264
56473: PUSH
56474: LD_INT 49
56476: EQUAL
56477: IFFALSE 56505
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
56479: LD_VAR 0 4
56483: PPUSH
56484: LD_VAR 0 5
56488: PPUSH
56489: LD_VAR 0 4
56493: PPUSH
56494: CALL_OW 74
56498: PPUSH
56499: CALL_OW 112
56503: GO 56529
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
56505: LD_VAR 0 4
56509: PPUSH
56510: LD_VAR 0 5
56514: PPUSH
56515: LD_VAR 0 4
56519: PPUSH
56520: CALL_OW 74
56524: PPUSH
56525: CALL 57458 0 2
// end ; end ;
56529: GO 56109
56531: POP
56532: POP
// end ;
56533: LD_VAR 0 3
56537: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
56538: LD_INT 0
56540: PPUSH
56541: PPUSH
56542: PPUSH
// if not unit or IsInUnit ( unit ) then
56543: LD_VAR 0 1
56547: NOT
56548: PUSH
56549: LD_VAR 0 1
56553: PPUSH
56554: CALL_OW 310
56558: OR
56559: IFFALSE 56563
// exit ;
56561: GO 56654
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
56563: LD_ADDR_VAR 0 4
56567: PUSH
56568: LD_VAR 0 1
56572: PPUSH
56573: CALL_OW 250
56577: PPUSH
56578: LD_VAR 0 2
56582: PPUSH
56583: LD_INT 1
56585: PPUSH
56586: CALL_OW 272
56590: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
56591: LD_ADDR_VAR 0 5
56595: PUSH
56596: LD_VAR 0 1
56600: PPUSH
56601: CALL_OW 251
56605: PPUSH
56606: LD_VAR 0 2
56610: PPUSH
56611: LD_INT 1
56613: PPUSH
56614: CALL_OW 273
56618: ST_TO_ADDR
// if ValidHex ( x , y ) then
56619: LD_VAR 0 4
56623: PPUSH
56624: LD_VAR 0 5
56628: PPUSH
56629: CALL_OW 488
56633: IFFALSE 56654
// ComTurnXY ( unit , x , y ) ;
56635: LD_VAR 0 1
56639: PPUSH
56640: LD_VAR 0 4
56644: PPUSH
56645: LD_VAR 0 5
56649: PPUSH
56650: CALL_OW 118
// end ;
56654: LD_VAR 0 3
56658: RET
// export function SeeUnits ( side , units ) ; var i ; begin
56659: LD_INT 0
56661: PPUSH
56662: PPUSH
// result := false ;
56663: LD_ADDR_VAR 0 3
56667: PUSH
56668: LD_INT 0
56670: ST_TO_ADDR
// if not units then
56671: LD_VAR 0 2
56675: NOT
56676: IFFALSE 56680
// exit ;
56678: GO 56725
// for i in units do
56680: LD_ADDR_VAR 0 4
56684: PUSH
56685: LD_VAR 0 2
56689: PUSH
56690: FOR_IN
56691: IFFALSE 56723
// if See ( side , i ) then
56693: LD_VAR 0 1
56697: PPUSH
56698: LD_VAR 0 4
56702: PPUSH
56703: CALL_OW 292
56707: IFFALSE 56721
// begin result := true ;
56709: LD_ADDR_VAR 0 3
56713: PUSH
56714: LD_INT 1
56716: ST_TO_ADDR
// exit ;
56717: POP
56718: POP
56719: GO 56725
// end ;
56721: GO 56690
56723: POP
56724: POP
// end ;
56725: LD_VAR 0 3
56729: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
56730: LD_INT 0
56732: PPUSH
56733: PPUSH
56734: PPUSH
56735: PPUSH
// if not unit or not points then
56736: LD_VAR 0 1
56740: NOT
56741: PUSH
56742: LD_VAR 0 2
56746: NOT
56747: OR
56748: IFFALSE 56752
// exit ;
56750: GO 56842
// dist := 99999 ;
56752: LD_ADDR_VAR 0 5
56756: PUSH
56757: LD_INT 99999
56759: ST_TO_ADDR
// for i in points do
56760: LD_ADDR_VAR 0 4
56764: PUSH
56765: LD_VAR 0 2
56769: PUSH
56770: FOR_IN
56771: IFFALSE 56840
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56773: LD_ADDR_VAR 0 6
56777: PUSH
56778: LD_VAR 0 1
56782: PPUSH
56783: LD_VAR 0 4
56787: PUSH
56788: LD_INT 1
56790: ARRAY
56791: PPUSH
56792: LD_VAR 0 4
56796: PUSH
56797: LD_INT 2
56799: ARRAY
56800: PPUSH
56801: CALL_OW 297
56805: ST_TO_ADDR
// if tmpDist < dist then
56806: LD_VAR 0 6
56810: PUSH
56811: LD_VAR 0 5
56815: LESS
56816: IFFALSE 56838
// begin result := i ;
56818: LD_ADDR_VAR 0 3
56822: PUSH
56823: LD_VAR 0 4
56827: ST_TO_ADDR
// dist := tmpDist ;
56828: LD_ADDR_VAR 0 5
56832: PUSH
56833: LD_VAR 0 6
56837: ST_TO_ADDR
// end ; end ;
56838: GO 56770
56840: POP
56841: POP
// end ;
56842: LD_VAR 0 3
56846: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
56847: LD_INT 0
56849: PPUSH
// uc_side := side ;
56850: LD_ADDR_OWVAR 20
56854: PUSH
56855: LD_VAR 0 1
56859: ST_TO_ADDR
// uc_nation := 3 ;
56860: LD_ADDR_OWVAR 21
56864: PUSH
56865: LD_INT 3
56867: ST_TO_ADDR
// vc_chassis := 25 ;
56868: LD_ADDR_OWVAR 37
56872: PUSH
56873: LD_INT 25
56875: ST_TO_ADDR
// vc_engine := engine_siberite ;
56876: LD_ADDR_OWVAR 39
56880: PUSH
56881: LD_INT 3
56883: ST_TO_ADDR
// vc_control := control_computer ;
56884: LD_ADDR_OWVAR 38
56888: PUSH
56889: LD_INT 3
56891: ST_TO_ADDR
// vc_weapon := 59 ;
56892: LD_ADDR_OWVAR 40
56896: PUSH
56897: LD_INT 59
56899: ST_TO_ADDR
// result := CreateVehicle ;
56900: LD_ADDR_VAR 0 5
56904: PUSH
56905: CALL_OW 45
56909: ST_TO_ADDR
// SetDir ( result , d ) ;
56910: LD_VAR 0 5
56914: PPUSH
56915: LD_VAR 0 4
56919: PPUSH
56920: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
56924: LD_VAR 0 5
56928: PPUSH
56929: LD_VAR 0 2
56933: PPUSH
56934: LD_VAR 0 3
56938: PPUSH
56939: LD_INT 0
56941: PPUSH
56942: CALL_OW 48
// end ;
56946: LD_VAR 0 5
56950: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
56951: LD_INT 0
56953: PPUSH
56954: PPUSH
56955: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
56956: LD_ADDR_VAR 0 2
56960: PUSH
56961: LD_INT 0
56963: PUSH
56964: LD_INT 0
56966: PUSH
56967: LD_INT 0
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
56979: LD_VAR 0 1
56983: NOT
56984: PUSH
56985: LD_VAR 0 1
56989: PPUSH
56990: CALL_OW 264
56994: PUSH
56995: LD_INT 12
56997: PUSH
56998: LD_INT 51
57000: PUSH
57001: LD_INT 32
57003: PUSH
57004: LD_INT 89
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: IN
57013: NOT
57014: OR
57015: IFFALSE 57019
// exit ;
57017: GO 57117
// for i := 1 to 3 do
57019: LD_ADDR_VAR 0 3
57023: PUSH
57024: DOUBLE
57025: LD_INT 1
57027: DEC
57028: ST_TO_ADDR
57029: LD_INT 3
57031: PUSH
57032: FOR_TO
57033: IFFALSE 57115
// begin tmp := GetCargo ( cargo , i ) ;
57035: LD_ADDR_VAR 0 4
57039: PUSH
57040: LD_VAR 0 1
57044: PPUSH
57045: LD_VAR 0 3
57049: PPUSH
57050: CALL_OW 289
57054: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
57055: LD_ADDR_VAR 0 2
57059: PUSH
57060: LD_VAR 0 2
57064: PPUSH
57065: LD_VAR 0 3
57069: PPUSH
57070: LD_VAR 0 4
57074: PPUSH
57075: CALL_OW 1
57079: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
57080: LD_ADDR_VAR 0 2
57084: PUSH
57085: LD_VAR 0 2
57089: PPUSH
57090: LD_INT 4
57092: PPUSH
57093: LD_VAR 0 2
57097: PUSH
57098: LD_INT 4
57100: ARRAY
57101: PUSH
57102: LD_VAR 0 4
57106: PLUS
57107: PPUSH
57108: CALL_OW 1
57112: ST_TO_ADDR
// end ;
57113: GO 57032
57115: POP
57116: POP
// end ;
57117: LD_VAR 0 2
57121: RET
// export function Length ( array ) ; begin
57122: LD_INT 0
57124: PPUSH
// result := array + 0 ;
57125: LD_ADDR_VAR 0 2
57129: PUSH
57130: LD_VAR 0 1
57134: PUSH
57135: LD_INT 0
57137: PLUS
57138: ST_TO_ADDR
// end ;
57139: LD_VAR 0 2
57143: RET
// export function PrepareArray ( array ) ; begin
57144: LD_INT 0
57146: PPUSH
// result := array diff 0 ;
57147: LD_ADDR_VAR 0 2
57151: PUSH
57152: LD_VAR 0 1
57156: PUSH
57157: LD_INT 0
57159: DIFF
57160: ST_TO_ADDR
// if not result [ 1 ] then
57161: LD_VAR 0 2
57165: PUSH
57166: LD_INT 1
57168: ARRAY
57169: NOT
57170: IFFALSE 57190
// result := Delete ( result , 1 ) ;
57172: LD_ADDR_VAR 0 2
57176: PUSH
57177: LD_VAR 0 2
57181: PPUSH
57182: LD_INT 1
57184: PPUSH
57185: CALL_OW 3
57189: ST_TO_ADDR
// end ;
57190: LD_VAR 0 2
57194: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
57195: LD_INT 0
57197: PPUSH
57198: PPUSH
57199: PPUSH
57200: PPUSH
// sibRocketRange := 25 ;
57201: LD_ADDR_VAR 0 6
57205: PUSH
57206: LD_INT 25
57208: ST_TO_ADDR
// result := false ;
57209: LD_ADDR_VAR 0 4
57213: PUSH
57214: LD_INT 0
57216: ST_TO_ADDR
// for i := 0 to 5 do
57217: LD_ADDR_VAR 0 5
57221: PUSH
57222: DOUBLE
57223: LD_INT 0
57225: DEC
57226: ST_TO_ADDR
57227: LD_INT 5
57229: PUSH
57230: FOR_TO
57231: IFFALSE 57298
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
57233: LD_VAR 0 1
57237: PPUSH
57238: LD_VAR 0 5
57242: PPUSH
57243: LD_VAR 0 6
57247: PPUSH
57248: CALL_OW 272
57252: PPUSH
57253: LD_VAR 0 2
57257: PPUSH
57258: LD_VAR 0 5
57262: PPUSH
57263: LD_VAR 0 6
57267: PPUSH
57268: CALL_OW 273
57272: PPUSH
57273: LD_VAR 0 3
57277: PPUSH
57278: CALL_OW 309
57282: IFFALSE 57296
// begin result := true ;
57284: LD_ADDR_VAR 0 4
57288: PUSH
57289: LD_INT 1
57291: ST_TO_ADDR
// exit ;
57292: POP
57293: POP
57294: GO 57300
// end ;
57296: GO 57230
57298: POP
57299: POP
// end ;
57300: LD_VAR 0 4
57304: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
57305: LD_INT 0
57307: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
57308: LD_VAR 0 1
57312: PPUSH
57313: LD_VAR 0 2
57317: PPUSH
57318: LD_INT 0
57320: PPUSH
57321: LD_INT 0
57323: PPUSH
57324: LD_INT 1
57326: PPUSH
57327: LD_INT 0
57329: PPUSH
57330: CALL_OW 587
// end ;
57334: LD_VAR 0 3
57338: RET
// export function CenterOnNow ( unit ) ; begin
57339: LD_INT 0
57341: PPUSH
// result := IsInUnit ( unit ) ;
57342: LD_ADDR_VAR 0 2
57346: PUSH
57347: LD_VAR 0 1
57351: PPUSH
57352: CALL_OW 310
57356: ST_TO_ADDR
// if not result then
57357: LD_VAR 0 2
57361: NOT
57362: IFFALSE 57374
// result := unit ;
57364: LD_ADDR_VAR 0 2
57368: PUSH
57369: LD_VAR 0 1
57373: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
57374: LD_VAR 0 1
57378: PPUSH
57379: CALL_OW 87
// end ;
57383: LD_VAR 0 2
57387: RET
// export function ComMoveHex ( unit , hex ) ; begin
57388: LD_INT 0
57390: PPUSH
// if not hex then
57391: LD_VAR 0 2
57395: NOT
57396: IFFALSE 57400
// exit ;
57398: GO 57453
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
57400: LD_VAR 0 2
57404: PUSH
57405: LD_INT 1
57407: ARRAY
57408: PPUSH
57409: LD_VAR 0 2
57413: PUSH
57414: LD_INT 2
57416: ARRAY
57417: PPUSH
57418: CALL_OW 428
57422: IFFALSE 57426
// exit ;
57424: GO 57453
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
57426: LD_VAR 0 1
57430: PPUSH
57431: LD_VAR 0 2
57435: PUSH
57436: LD_INT 1
57438: ARRAY
57439: PPUSH
57440: LD_VAR 0 2
57444: PUSH
57445: LD_INT 2
57447: ARRAY
57448: PPUSH
57449: CALL_OW 111
// end ;
57453: LD_VAR 0 3
57457: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
57458: LD_INT 0
57460: PPUSH
57461: PPUSH
57462: PPUSH
// if not unit or not enemy then
57463: LD_VAR 0 1
57467: NOT
57468: PUSH
57469: LD_VAR 0 2
57473: NOT
57474: OR
57475: IFFALSE 57479
// exit ;
57477: GO 57603
// x := GetX ( enemy ) ;
57479: LD_ADDR_VAR 0 4
57483: PUSH
57484: LD_VAR 0 2
57488: PPUSH
57489: CALL_OW 250
57493: ST_TO_ADDR
// y := GetY ( enemy ) ;
57494: LD_ADDR_VAR 0 5
57498: PUSH
57499: LD_VAR 0 2
57503: PPUSH
57504: CALL_OW 251
57508: ST_TO_ADDR
// if ValidHex ( x , y ) then
57509: LD_VAR 0 4
57513: PPUSH
57514: LD_VAR 0 5
57518: PPUSH
57519: CALL_OW 488
57523: IFFALSE 57603
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
57525: LD_VAR 0 2
57529: PPUSH
57530: CALL_OW 247
57534: PUSH
57535: LD_INT 3
57537: PUSH
57538: LD_INT 2
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: IN
57545: PUSH
57546: LD_VAR 0 1
57550: PPUSH
57551: CALL_OW 255
57555: PPUSH
57556: LD_VAR 0 2
57560: PPUSH
57561: CALL_OW 292
57565: AND
57566: IFFALSE 57584
// ComAttackUnit ( unit , enemy ) else
57568: LD_VAR 0 1
57572: PPUSH
57573: LD_VAR 0 2
57577: PPUSH
57578: CALL_OW 115
57582: GO 57603
// ComAgressiveMove ( unit , x , y ) ;
57584: LD_VAR 0 1
57588: PPUSH
57589: LD_VAR 0 4
57593: PPUSH
57594: LD_VAR 0 5
57598: PPUSH
57599: CALL_OW 114
// end ; end_of_file
57603: LD_VAR 0 3
57607: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
57608: LD_VAR 0 1
57612: PUSH
57613: LD_INT 200
57615: DOUBLE
57616: GREATEREQUAL
57617: IFFALSE 57625
57619: LD_INT 299
57621: DOUBLE
57622: LESSEQUAL
57623: IFTRUE 57627
57625: GO 57659
57627: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
57628: LD_VAR 0 1
57632: PPUSH
57633: LD_VAR 0 2
57637: PPUSH
57638: LD_VAR 0 3
57642: PPUSH
57643: LD_VAR 0 4
57647: PPUSH
57648: LD_VAR 0 5
57652: PPUSH
57653: CALL 58147 0 5
57657: GO 57736
57659: LD_INT 300
57661: DOUBLE
57662: GREATEREQUAL
57663: IFFALSE 57671
57665: LD_INT 399
57667: DOUBLE
57668: LESSEQUAL
57669: IFTRUE 57673
57671: GO 57735
57673: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
57674: LD_VAR 0 1
57678: PPUSH
57679: LD_VAR 0 2
57683: PPUSH
57684: LD_VAR 0 3
57688: PPUSH
57689: LD_VAR 0 4
57693: PPUSH
57694: LD_VAR 0 5
57698: PPUSH
57699: LD_VAR 0 6
57703: PPUSH
57704: LD_VAR 0 7
57708: PPUSH
57709: LD_VAR 0 8
57713: PPUSH
57714: LD_VAR 0 9
57718: PPUSH
57719: LD_VAR 0 10
57723: PPUSH
57724: LD_VAR 0 11
57728: PPUSH
57729: CALL 75002 0 11
57733: GO 57736
57735: POP
// end ;
57736: PPOPN 11
57738: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
57739: LD_VAR 0 1
57743: PPUSH
57744: LD_VAR 0 2
57748: PPUSH
57749: LD_VAR 0 3
57753: PPUSH
57754: LD_VAR 0 4
57758: PPUSH
57759: LD_VAR 0 5
57763: PPUSH
57764: CALL 57883 0 5
// end ; end_of_file
57768: PPOPN 5
57770: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
57771: LD_INT 0
57773: PPUSH
57774: PPUSH
57775: PPUSH
57776: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
57777: LD_VAR 0 1
57781: PPUSH
57782: CALL_OW 264
57786: PUSH
57787: LD_INT 91
57789: EQUAL
57790: IFFALSE 57862
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
57792: LD_INT 68
57794: PPUSH
57795: LD_VAR 0 1
57799: PPUSH
57800: CALL_OW 255
57804: PPUSH
57805: CALL_OW 321
57809: PUSH
57810: LD_INT 2
57812: EQUAL
57813: IFFALSE 57825
// eff := 70 else
57815: LD_ADDR_VAR 0 4
57819: PUSH
57820: LD_INT 70
57822: ST_TO_ADDR
57823: GO 57833
// eff := 30 ;
57825: LD_ADDR_VAR 0 4
57829: PUSH
57830: LD_INT 30
57832: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
57833: LD_VAR 0 1
57837: PPUSH
57838: CALL_OW 250
57842: PPUSH
57843: LD_VAR 0 1
57847: PPUSH
57848: CALL_OW 251
57852: PPUSH
57853: LD_VAR 0 4
57857: PPUSH
57858: CALL_OW 495
// end ; end ;
57862: LD_VAR 0 2
57866: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
57867: LD_INT 0
57869: PPUSH
// end ;
57870: LD_VAR 0 4
57874: RET
// export function SOS_Command ( cmd ) ; begin
57875: LD_INT 0
57877: PPUSH
// end ;
57878: LD_VAR 0 2
57882: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
57883: LD_INT 0
57885: PPUSH
// end ;
57886: LD_VAR 0 6
57890: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
57891: LD_INT 0
57893: PPUSH
57894: PPUSH
// if not vehicle or not factory then
57895: LD_VAR 0 1
57899: NOT
57900: PUSH
57901: LD_VAR 0 2
57905: NOT
57906: OR
57907: IFFALSE 57911
// exit ;
57909: GO 58142
// if factoryWaypoints >= factory then
57911: LD_EXP 104
57915: PUSH
57916: LD_VAR 0 2
57920: GREATEREQUAL
57921: IFFALSE 58142
// if factoryWaypoints [ factory ] then
57923: LD_EXP 104
57927: PUSH
57928: LD_VAR 0 2
57932: ARRAY
57933: IFFALSE 58142
// begin if GetControl ( vehicle ) = control_manual then
57935: LD_VAR 0 1
57939: PPUSH
57940: CALL_OW 263
57944: PUSH
57945: LD_INT 1
57947: EQUAL
57948: IFFALSE 58029
// begin driver := IsDrivenBy ( vehicle ) ;
57950: LD_ADDR_VAR 0 4
57954: PUSH
57955: LD_VAR 0 1
57959: PPUSH
57960: CALL_OW 311
57964: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
57965: LD_VAR 0 4
57969: PPUSH
57970: LD_EXP 104
57974: PUSH
57975: LD_VAR 0 2
57979: ARRAY
57980: PUSH
57981: LD_INT 3
57983: ARRAY
57984: PPUSH
57985: LD_EXP 104
57989: PUSH
57990: LD_VAR 0 2
57994: ARRAY
57995: PUSH
57996: LD_INT 4
57998: ARRAY
57999: PPUSH
58000: CALL_OW 171
// AddComExitVehicle ( driver ) ;
58004: LD_VAR 0 4
58008: PPUSH
58009: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
58013: LD_VAR 0 4
58017: PPUSH
58018: LD_VAR 0 2
58022: PPUSH
58023: CALL_OW 180
// end else
58027: GO 58142
// if GetControl ( vehicle ) = control_remote then
58029: LD_VAR 0 1
58033: PPUSH
58034: CALL_OW 263
58038: PUSH
58039: LD_INT 2
58041: EQUAL
58042: IFFALSE 58103
// begin wait ( 0 0$2 ) ;
58044: LD_INT 70
58046: PPUSH
58047: CALL_OW 67
// if Connect ( vehicle ) then
58051: LD_VAR 0 1
58055: PPUSH
58056: CALL 23992 0 1
58060: IFFALSE 58101
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
58062: LD_VAR 0 1
58066: PPUSH
58067: LD_EXP 104
58071: PUSH
58072: LD_VAR 0 2
58076: ARRAY
58077: PUSH
58078: LD_INT 3
58080: ARRAY
58081: PPUSH
58082: LD_EXP 104
58086: PUSH
58087: LD_VAR 0 2
58091: ARRAY
58092: PUSH
58093: LD_INT 4
58095: ARRAY
58096: PPUSH
58097: CALL_OW 171
// end else
58101: GO 58142
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
58103: LD_VAR 0 1
58107: PPUSH
58108: LD_EXP 104
58112: PUSH
58113: LD_VAR 0 2
58117: ARRAY
58118: PUSH
58119: LD_INT 3
58121: ARRAY
58122: PPUSH
58123: LD_EXP 104
58127: PUSH
58128: LD_VAR 0 2
58132: ARRAY
58133: PUSH
58134: LD_INT 4
58136: ARRAY
58137: PPUSH
58138: CALL_OW 171
// end ; end ;
58142: LD_VAR 0 3
58146: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
58147: LD_INT 0
58149: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
58150: LD_VAR 0 1
58154: PUSH
58155: LD_INT 250
58157: EQUAL
58158: PUSH
58159: LD_VAR 0 2
58163: PPUSH
58164: CALL_OW 264
58168: PUSH
58169: LD_INT 81
58171: EQUAL
58172: AND
58173: IFFALSE 58194
// MinerPlaceMine ( unit , x , y ) ;
58175: LD_VAR 0 2
58179: PPUSH
58180: LD_VAR 0 4
58184: PPUSH
58185: LD_VAR 0 5
58189: PPUSH
58190: CALL 61018 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
58194: LD_VAR 0 1
58198: PUSH
58199: LD_INT 251
58201: EQUAL
58202: PUSH
58203: LD_VAR 0 2
58207: PPUSH
58208: CALL_OW 264
58212: PUSH
58213: LD_INT 81
58215: EQUAL
58216: AND
58217: IFFALSE 58238
// MinerDetonateMine ( unit , x , y ) ;
58219: LD_VAR 0 2
58223: PPUSH
58224: LD_VAR 0 4
58228: PPUSH
58229: LD_VAR 0 5
58233: PPUSH
58234: CALL 61293 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
58238: LD_VAR 0 1
58242: PUSH
58243: LD_INT 252
58245: EQUAL
58246: PUSH
58247: LD_VAR 0 2
58251: PPUSH
58252: CALL_OW 264
58256: PUSH
58257: LD_INT 81
58259: EQUAL
58260: AND
58261: IFFALSE 58282
// MinerCreateMinefield ( unit , x , y ) ;
58263: LD_VAR 0 2
58267: PPUSH
58268: LD_VAR 0 4
58272: PPUSH
58273: LD_VAR 0 5
58277: PPUSH
58278: CALL 61710 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
58282: LD_VAR 0 1
58286: PUSH
58287: LD_INT 253
58289: EQUAL
58290: PUSH
58291: LD_VAR 0 2
58295: PPUSH
58296: CALL_OW 257
58300: PUSH
58301: LD_INT 5
58303: EQUAL
58304: AND
58305: IFFALSE 58326
// ComBinocular ( unit , x , y ) ;
58307: LD_VAR 0 2
58311: PPUSH
58312: LD_VAR 0 4
58316: PPUSH
58317: LD_VAR 0 5
58321: PPUSH
58322: CALL 62079 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
58326: LD_VAR 0 1
58330: PUSH
58331: LD_INT 254
58333: EQUAL
58334: PUSH
58335: LD_VAR 0 2
58339: PPUSH
58340: CALL_OW 264
58344: PUSH
58345: LD_INT 99
58347: EQUAL
58348: AND
58349: PUSH
58350: LD_VAR 0 3
58354: PPUSH
58355: CALL_OW 263
58359: PUSH
58360: LD_INT 3
58362: EQUAL
58363: AND
58364: IFFALSE 58380
// HackDestroyVehicle ( unit , selectedUnit ) ;
58366: LD_VAR 0 2
58370: PPUSH
58371: LD_VAR 0 3
58375: PPUSH
58376: CALL 60382 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
58380: LD_VAR 0 1
58384: PUSH
58385: LD_INT 255
58387: EQUAL
58388: PUSH
58389: LD_VAR 0 2
58393: PPUSH
58394: CALL_OW 264
58398: PUSH
58399: LD_INT 14
58401: PUSH
58402: LD_INT 53
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: IN
58409: AND
58410: PUSH
58411: LD_VAR 0 4
58415: PPUSH
58416: LD_VAR 0 5
58420: PPUSH
58421: CALL_OW 488
58425: AND
58426: IFFALSE 58450
// CutTreeXYR ( unit , x , y , 12 ) ;
58428: LD_VAR 0 2
58432: PPUSH
58433: LD_VAR 0 4
58437: PPUSH
58438: LD_VAR 0 5
58442: PPUSH
58443: LD_INT 12
58445: PPUSH
58446: CALL 58545 0 4
// if cmd = 256 then
58450: LD_VAR 0 1
58454: PUSH
58455: LD_INT 256
58457: EQUAL
58458: IFFALSE 58479
// SetFactoryWaypoint ( unit , x , y ) ;
58460: LD_VAR 0 2
58464: PPUSH
58465: LD_VAR 0 4
58469: PPUSH
58470: LD_VAR 0 5
58474: PPUSH
58475: CALL 76990 0 3
// if cmd = 257 then
58479: LD_VAR 0 1
58483: PUSH
58484: LD_INT 257
58486: EQUAL
58487: IFFALSE 58508
// SetWarehouseGatheringPoint ( unit , x , y ) ;
58489: LD_VAR 0 2
58493: PPUSH
58494: LD_VAR 0 4
58498: PPUSH
58499: LD_VAR 0 5
58503: PPUSH
58504: CALL 77352 0 3
// if cmd = 258 then
58508: LD_VAR 0 1
58512: PUSH
58513: LD_INT 258
58515: EQUAL
58516: IFFALSE 58540
// BurnTreeXYR ( unit , x , y , 8 ) ;
58518: LD_VAR 0 2
58522: PPUSH
58523: LD_VAR 0 4
58527: PPUSH
58528: LD_VAR 0 5
58532: PPUSH
58533: LD_INT 8
58535: PPUSH
58536: CALL 58939 0 4
// end ;
58540: LD_VAR 0 6
58544: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
58545: LD_INT 0
58547: PPUSH
58548: PPUSH
58549: PPUSH
58550: PPUSH
58551: PPUSH
58552: PPUSH
58553: PPUSH
58554: PPUSH
58555: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
58556: LD_VAR 0 1
58560: PPUSH
58561: CALL_OW 302
58565: NOT
58566: PUSH
58567: LD_VAR 0 2
58571: PPUSH
58572: LD_VAR 0 3
58576: PPUSH
58577: CALL_OW 488
58581: NOT
58582: OR
58583: PUSH
58584: LD_VAR 0 4
58588: NOT
58589: OR
58590: IFFALSE 58594
// exit ;
58592: GO 58934
// list := [ ] ;
58594: LD_ADDR_VAR 0 13
58598: PUSH
58599: EMPTY
58600: ST_TO_ADDR
// if x - r < 0 then
58601: LD_VAR 0 2
58605: PUSH
58606: LD_VAR 0 4
58610: MINUS
58611: PUSH
58612: LD_INT 0
58614: LESS
58615: IFFALSE 58627
// min_x := 0 else
58617: LD_ADDR_VAR 0 7
58621: PUSH
58622: LD_INT 0
58624: ST_TO_ADDR
58625: GO 58643
// min_x := x - r ;
58627: LD_ADDR_VAR 0 7
58631: PUSH
58632: LD_VAR 0 2
58636: PUSH
58637: LD_VAR 0 4
58641: MINUS
58642: ST_TO_ADDR
// if y - r < 0 then
58643: LD_VAR 0 3
58647: PUSH
58648: LD_VAR 0 4
58652: MINUS
58653: PUSH
58654: LD_INT 0
58656: LESS
58657: IFFALSE 58669
// min_y := 0 else
58659: LD_ADDR_VAR 0 8
58663: PUSH
58664: LD_INT 0
58666: ST_TO_ADDR
58667: GO 58685
// min_y := y - r ;
58669: LD_ADDR_VAR 0 8
58673: PUSH
58674: LD_VAR 0 3
58678: PUSH
58679: LD_VAR 0 4
58683: MINUS
58684: ST_TO_ADDR
// max_x := x + r ;
58685: LD_ADDR_VAR 0 9
58689: PUSH
58690: LD_VAR 0 2
58694: PUSH
58695: LD_VAR 0 4
58699: PLUS
58700: ST_TO_ADDR
// max_y := y + r ;
58701: LD_ADDR_VAR 0 10
58705: PUSH
58706: LD_VAR 0 3
58710: PUSH
58711: LD_VAR 0 4
58715: PLUS
58716: ST_TO_ADDR
// for _x = min_x to max_x do
58717: LD_ADDR_VAR 0 11
58721: PUSH
58722: DOUBLE
58723: LD_VAR 0 7
58727: DEC
58728: ST_TO_ADDR
58729: LD_VAR 0 9
58733: PUSH
58734: FOR_TO
58735: IFFALSE 58852
// for _y = min_y to max_y do
58737: LD_ADDR_VAR 0 12
58741: PUSH
58742: DOUBLE
58743: LD_VAR 0 8
58747: DEC
58748: ST_TO_ADDR
58749: LD_VAR 0 10
58753: PUSH
58754: FOR_TO
58755: IFFALSE 58848
// begin if not ValidHex ( _x , _y ) then
58757: LD_VAR 0 11
58761: PPUSH
58762: LD_VAR 0 12
58766: PPUSH
58767: CALL_OW 488
58771: NOT
58772: IFFALSE 58776
// continue ;
58774: GO 58754
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58776: LD_VAR 0 11
58780: PPUSH
58781: LD_VAR 0 12
58785: PPUSH
58786: CALL_OW 351
58790: PUSH
58791: LD_VAR 0 11
58795: PPUSH
58796: LD_VAR 0 12
58800: PPUSH
58801: CALL_OW 554
58805: AND
58806: IFFALSE 58846
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58808: LD_ADDR_VAR 0 13
58812: PUSH
58813: LD_VAR 0 13
58817: PPUSH
58818: LD_VAR 0 13
58822: PUSH
58823: LD_INT 1
58825: PLUS
58826: PPUSH
58827: LD_VAR 0 11
58831: PUSH
58832: LD_VAR 0 12
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PPUSH
58841: CALL_OW 2
58845: ST_TO_ADDR
// end ;
58846: GO 58754
58848: POP
58849: POP
58850: GO 58734
58852: POP
58853: POP
// if not list then
58854: LD_VAR 0 13
58858: NOT
58859: IFFALSE 58863
// exit ;
58861: GO 58934
// for i in list do
58863: LD_ADDR_VAR 0 6
58867: PUSH
58868: LD_VAR 0 13
58872: PUSH
58873: FOR_IN
58874: IFFALSE 58932
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
58876: LD_VAR 0 1
58880: PPUSH
58881: LD_STRING M
58883: PUSH
58884: LD_VAR 0 6
58888: PUSH
58889: LD_INT 1
58891: ARRAY
58892: PUSH
58893: LD_VAR 0 6
58897: PUSH
58898: LD_INT 2
58900: ARRAY
58901: PUSH
58902: LD_INT 0
58904: PUSH
58905: LD_INT 0
58907: PUSH
58908: LD_INT 0
58910: PUSH
58911: LD_INT 0
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: PUSH
58923: EMPTY
58924: LIST
58925: PPUSH
58926: CALL_OW 447
58930: GO 58873
58932: POP
58933: POP
// end ;
58934: LD_VAR 0 5
58938: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
58939: LD_INT 0
58941: PPUSH
58942: PPUSH
58943: PPUSH
58944: PPUSH
58945: PPUSH
58946: PPUSH
58947: PPUSH
58948: PPUSH
58949: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
58950: LD_VAR 0 1
58954: PPUSH
58955: CALL_OW 302
58959: NOT
58960: PUSH
58961: LD_VAR 0 2
58965: PPUSH
58966: LD_VAR 0 3
58970: PPUSH
58971: CALL_OW 488
58975: NOT
58976: OR
58977: PUSH
58978: LD_VAR 0 4
58982: NOT
58983: OR
58984: IFFALSE 58988
// exit ;
58986: GO 59336
// list := [ ] ;
58988: LD_ADDR_VAR 0 13
58992: PUSH
58993: EMPTY
58994: ST_TO_ADDR
// if x - r < 0 then
58995: LD_VAR 0 2
58999: PUSH
59000: LD_VAR 0 4
59004: MINUS
59005: PUSH
59006: LD_INT 0
59008: LESS
59009: IFFALSE 59021
// min_x := 0 else
59011: LD_ADDR_VAR 0 7
59015: PUSH
59016: LD_INT 0
59018: ST_TO_ADDR
59019: GO 59037
// min_x := x - r ;
59021: LD_ADDR_VAR 0 7
59025: PUSH
59026: LD_VAR 0 2
59030: PUSH
59031: LD_VAR 0 4
59035: MINUS
59036: ST_TO_ADDR
// if y - r < 0 then
59037: LD_VAR 0 3
59041: PUSH
59042: LD_VAR 0 4
59046: MINUS
59047: PUSH
59048: LD_INT 0
59050: LESS
59051: IFFALSE 59063
// min_y := 0 else
59053: LD_ADDR_VAR 0 8
59057: PUSH
59058: LD_INT 0
59060: ST_TO_ADDR
59061: GO 59079
// min_y := y - r ;
59063: LD_ADDR_VAR 0 8
59067: PUSH
59068: LD_VAR 0 3
59072: PUSH
59073: LD_VAR 0 4
59077: MINUS
59078: ST_TO_ADDR
// max_x := x + r ;
59079: LD_ADDR_VAR 0 9
59083: PUSH
59084: LD_VAR 0 2
59088: PUSH
59089: LD_VAR 0 4
59093: PLUS
59094: ST_TO_ADDR
// max_y := y + r ;
59095: LD_ADDR_VAR 0 10
59099: PUSH
59100: LD_VAR 0 3
59104: PUSH
59105: LD_VAR 0 4
59109: PLUS
59110: ST_TO_ADDR
// for _x = min_x to max_x do
59111: LD_ADDR_VAR 0 11
59115: PUSH
59116: DOUBLE
59117: LD_VAR 0 7
59121: DEC
59122: ST_TO_ADDR
59123: LD_VAR 0 9
59127: PUSH
59128: FOR_TO
59129: IFFALSE 59246
// for _y = min_y to max_y do
59131: LD_ADDR_VAR 0 12
59135: PUSH
59136: DOUBLE
59137: LD_VAR 0 8
59141: DEC
59142: ST_TO_ADDR
59143: LD_VAR 0 10
59147: PUSH
59148: FOR_TO
59149: IFFALSE 59242
// begin if not ValidHex ( _x , _y ) then
59151: LD_VAR 0 11
59155: PPUSH
59156: LD_VAR 0 12
59160: PPUSH
59161: CALL_OW 488
59165: NOT
59166: IFFALSE 59170
// continue ;
59168: GO 59148
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
59170: LD_VAR 0 11
59174: PPUSH
59175: LD_VAR 0 12
59179: PPUSH
59180: CALL_OW 351
59184: PUSH
59185: LD_VAR 0 11
59189: PPUSH
59190: LD_VAR 0 12
59194: PPUSH
59195: CALL_OW 554
59199: AND
59200: IFFALSE 59240
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
59202: LD_ADDR_VAR 0 13
59206: PUSH
59207: LD_VAR 0 13
59211: PPUSH
59212: LD_VAR 0 13
59216: PUSH
59217: LD_INT 1
59219: PLUS
59220: PPUSH
59221: LD_VAR 0 11
59225: PUSH
59226: LD_VAR 0 12
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PPUSH
59235: CALL_OW 2
59239: ST_TO_ADDR
// end ;
59240: GO 59148
59242: POP
59243: POP
59244: GO 59128
59246: POP
59247: POP
// if not list then
59248: LD_VAR 0 13
59252: NOT
59253: IFFALSE 59257
// exit ;
59255: GO 59336
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
59257: LD_ADDR_VAR 0 13
59261: PUSH
59262: LD_VAR 0 1
59266: PPUSH
59267: LD_VAR 0 13
59271: PPUSH
59272: LD_INT 1
59274: PPUSH
59275: LD_INT 1
59277: PPUSH
59278: CALL 21134 0 4
59282: ST_TO_ADDR
// ComStop ( flame ) ;
59283: LD_VAR 0 1
59287: PPUSH
59288: CALL_OW 141
// for i in list do
59292: LD_ADDR_VAR 0 6
59296: PUSH
59297: LD_VAR 0 13
59301: PUSH
59302: FOR_IN
59303: IFFALSE 59334
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
59305: LD_VAR 0 1
59309: PPUSH
59310: LD_VAR 0 6
59314: PUSH
59315: LD_INT 1
59317: ARRAY
59318: PPUSH
59319: LD_VAR 0 6
59323: PUSH
59324: LD_INT 2
59326: ARRAY
59327: PPUSH
59328: CALL_OW 176
59332: GO 59302
59334: POP
59335: POP
// end ;
59336: LD_VAR 0 5
59340: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
59341: LD_EXP 35
59345: NOT
59346: IFFALSE 59396
59348: GO 59350
59350: DISABLE
// begin initHack := true ;
59351: LD_ADDR_EXP 35
59355: PUSH
59356: LD_INT 1
59358: ST_TO_ADDR
// hackTanks := [ ] ;
59359: LD_ADDR_EXP 36
59363: PUSH
59364: EMPTY
59365: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
59366: LD_ADDR_EXP 37
59370: PUSH
59371: EMPTY
59372: ST_TO_ADDR
// hackLimit := 3 ;
59373: LD_ADDR_EXP 38
59377: PUSH
59378: LD_INT 3
59380: ST_TO_ADDR
// hackDist := 12 ;
59381: LD_ADDR_EXP 39
59385: PUSH
59386: LD_INT 12
59388: ST_TO_ADDR
// hackCounter := [ ] ;
59389: LD_ADDR_EXP 40
59393: PUSH
59394: EMPTY
59395: ST_TO_ADDR
// end ;
59396: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
59397: LD_EXP 35
59401: PUSH
59402: LD_INT 34
59404: PUSH
59405: LD_INT 99
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PPUSH
59412: CALL_OW 69
59416: AND
59417: IFFALSE 59670
59419: GO 59421
59421: DISABLE
59422: LD_INT 0
59424: PPUSH
59425: PPUSH
// begin enable ;
59426: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
59427: LD_ADDR_VAR 0 1
59431: PUSH
59432: LD_INT 34
59434: PUSH
59435: LD_INT 99
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PPUSH
59442: CALL_OW 69
59446: PUSH
59447: FOR_IN
59448: IFFALSE 59668
// begin if not i in hackTanks then
59450: LD_VAR 0 1
59454: PUSH
59455: LD_EXP 36
59459: IN
59460: NOT
59461: IFFALSE 59544
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
59463: LD_ADDR_EXP 36
59467: PUSH
59468: LD_EXP 36
59472: PPUSH
59473: LD_EXP 36
59477: PUSH
59478: LD_INT 1
59480: PLUS
59481: PPUSH
59482: LD_VAR 0 1
59486: PPUSH
59487: CALL_OW 1
59491: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
59492: LD_ADDR_EXP 37
59496: PUSH
59497: LD_EXP 37
59501: PPUSH
59502: LD_EXP 37
59506: PUSH
59507: LD_INT 1
59509: PLUS
59510: PPUSH
59511: EMPTY
59512: PPUSH
59513: CALL_OW 1
59517: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
59518: LD_ADDR_EXP 40
59522: PUSH
59523: LD_EXP 40
59527: PPUSH
59528: LD_EXP 40
59532: PUSH
59533: LD_INT 1
59535: PLUS
59536: PPUSH
59537: EMPTY
59538: PPUSH
59539: CALL_OW 1
59543: ST_TO_ADDR
// end ; if not IsOk ( i ) then
59544: LD_VAR 0 1
59548: PPUSH
59549: CALL_OW 302
59553: NOT
59554: IFFALSE 59567
// begin HackUnlinkAll ( i ) ;
59556: LD_VAR 0 1
59560: PPUSH
59561: CALL 59673 0 1
// continue ;
59565: GO 59447
// end ; HackCheckCapturedStatus ( i ) ;
59567: LD_VAR 0 1
59571: PPUSH
59572: CALL 60116 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
59576: LD_ADDR_VAR 0 2
59580: PUSH
59581: LD_INT 81
59583: PUSH
59584: LD_VAR 0 1
59588: PPUSH
59589: CALL_OW 255
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 33
59600: PUSH
59601: LD_INT 3
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 91
59610: PUSH
59611: LD_VAR 0 1
59615: PUSH
59616: LD_EXP 39
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 50
59628: PUSH
59629: EMPTY
59630: LIST
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: PPUSH
59638: CALL_OW 69
59642: ST_TO_ADDR
// if not tmp then
59643: LD_VAR 0 2
59647: NOT
59648: IFFALSE 59652
// continue ;
59650: GO 59447
// HackLink ( i , tmp ) ;
59652: LD_VAR 0 1
59656: PPUSH
59657: LD_VAR 0 2
59661: PPUSH
59662: CALL 59809 0 2
// end ;
59666: GO 59447
59668: POP
59669: POP
// end ;
59670: PPOPN 2
59672: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
59673: LD_INT 0
59675: PPUSH
59676: PPUSH
59677: PPUSH
// if not hack in hackTanks then
59678: LD_VAR 0 1
59682: PUSH
59683: LD_EXP 36
59687: IN
59688: NOT
59689: IFFALSE 59693
// exit ;
59691: GO 59804
// index := GetElementIndex ( hackTanks , hack ) ;
59693: LD_ADDR_VAR 0 4
59697: PUSH
59698: LD_EXP 36
59702: PPUSH
59703: LD_VAR 0 1
59707: PPUSH
59708: CALL 20431 0 2
59712: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
59713: LD_EXP 37
59717: PUSH
59718: LD_VAR 0 4
59722: ARRAY
59723: IFFALSE 59804
// begin for i in hackTanksCaptured [ index ] do
59725: LD_ADDR_VAR 0 3
59729: PUSH
59730: LD_EXP 37
59734: PUSH
59735: LD_VAR 0 4
59739: ARRAY
59740: PUSH
59741: FOR_IN
59742: IFFALSE 59768
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
59744: LD_VAR 0 3
59748: PUSH
59749: LD_INT 1
59751: ARRAY
59752: PPUSH
59753: LD_VAR 0 3
59757: PUSH
59758: LD_INT 2
59760: ARRAY
59761: PPUSH
59762: CALL_OW 235
59766: GO 59741
59768: POP
59769: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
59770: LD_ADDR_EXP 37
59774: PUSH
59775: LD_EXP 37
59779: PPUSH
59780: LD_VAR 0 4
59784: PPUSH
59785: EMPTY
59786: PPUSH
59787: CALL_OW 1
59791: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
59792: LD_VAR 0 1
59796: PPUSH
59797: LD_INT 0
59799: PPUSH
59800: CALL_OW 505
// end ; end ;
59804: LD_VAR 0 2
59808: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
59809: LD_INT 0
59811: PPUSH
59812: PPUSH
59813: PPUSH
// if not hack in hackTanks or not vehicles then
59814: LD_VAR 0 1
59818: PUSH
59819: LD_EXP 36
59823: IN
59824: NOT
59825: PUSH
59826: LD_VAR 0 2
59830: NOT
59831: OR
59832: IFFALSE 59836
// exit ;
59834: GO 60111
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
59836: LD_ADDR_VAR 0 2
59840: PUSH
59841: LD_VAR 0 1
59845: PPUSH
59846: LD_VAR 0 2
59850: PPUSH
59851: LD_INT 1
59853: PPUSH
59854: LD_INT 1
59856: PPUSH
59857: CALL 21081 0 4
59861: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
59862: LD_ADDR_VAR 0 5
59866: PUSH
59867: LD_EXP 36
59871: PPUSH
59872: LD_VAR 0 1
59876: PPUSH
59877: CALL 20431 0 2
59881: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
59882: LD_EXP 37
59886: PUSH
59887: LD_VAR 0 5
59891: ARRAY
59892: PUSH
59893: LD_EXP 38
59897: LESS
59898: IFFALSE 60087
// begin for i := 1 to vehicles do
59900: LD_ADDR_VAR 0 4
59904: PUSH
59905: DOUBLE
59906: LD_INT 1
59908: DEC
59909: ST_TO_ADDR
59910: LD_VAR 0 2
59914: PUSH
59915: FOR_TO
59916: IFFALSE 60085
// begin if hackTanksCaptured [ index ] = hackLimit then
59918: LD_EXP 37
59922: PUSH
59923: LD_VAR 0 5
59927: ARRAY
59928: PUSH
59929: LD_EXP 38
59933: EQUAL
59934: IFFALSE 59938
// break ;
59936: GO 60085
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
59938: LD_ADDR_EXP 40
59942: PUSH
59943: LD_EXP 40
59947: PPUSH
59948: LD_VAR 0 5
59952: PPUSH
59953: LD_EXP 40
59957: PUSH
59958: LD_VAR 0 5
59962: ARRAY
59963: PUSH
59964: LD_INT 1
59966: PLUS
59967: PPUSH
59968: CALL_OW 1
59972: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
59973: LD_ADDR_EXP 37
59977: PUSH
59978: LD_EXP 37
59982: PPUSH
59983: LD_VAR 0 5
59987: PUSH
59988: LD_EXP 37
59992: PUSH
59993: LD_VAR 0 5
59997: ARRAY
59998: PUSH
59999: LD_INT 1
60001: PLUS
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PPUSH
60007: LD_VAR 0 2
60011: PUSH
60012: LD_VAR 0 4
60016: ARRAY
60017: PUSH
60018: LD_VAR 0 2
60022: PUSH
60023: LD_VAR 0 4
60027: ARRAY
60028: PPUSH
60029: CALL_OW 255
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PPUSH
60038: CALL 20646 0 3
60042: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
60043: LD_VAR 0 2
60047: PUSH
60048: LD_VAR 0 4
60052: ARRAY
60053: PPUSH
60054: LD_VAR 0 1
60058: PPUSH
60059: CALL_OW 255
60063: PPUSH
60064: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
60068: LD_VAR 0 2
60072: PUSH
60073: LD_VAR 0 4
60077: ARRAY
60078: PPUSH
60079: CALL_OW 141
// end ;
60083: GO 59915
60085: POP
60086: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60087: LD_VAR 0 1
60091: PPUSH
60092: LD_EXP 37
60096: PUSH
60097: LD_VAR 0 5
60101: ARRAY
60102: PUSH
60103: LD_INT 0
60105: PLUS
60106: PPUSH
60107: CALL_OW 505
// end ;
60111: LD_VAR 0 3
60115: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
60116: LD_INT 0
60118: PPUSH
60119: PPUSH
60120: PPUSH
60121: PPUSH
// if not hack in hackTanks then
60122: LD_VAR 0 1
60126: PUSH
60127: LD_EXP 36
60131: IN
60132: NOT
60133: IFFALSE 60137
// exit ;
60135: GO 60377
// index := GetElementIndex ( hackTanks , hack ) ;
60137: LD_ADDR_VAR 0 4
60141: PUSH
60142: LD_EXP 36
60146: PPUSH
60147: LD_VAR 0 1
60151: PPUSH
60152: CALL 20431 0 2
60156: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
60157: LD_ADDR_VAR 0 3
60161: PUSH
60162: DOUBLE
60163: LD_EXP 37
60167: PUSH
60168: LD_VAR 0 4
60172: ARRAY
60173: INC
60174: ST_TO_ADDR
60175: LD_INT 1
60177: PUSH
60178: FOR_DOWNTO
60179: IFFALSE 60351
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
60181: LD_ADDR_VAR 0 5
60185: PUSH
60186: LD_EXP 37
60190: PUSH
60191: LD_VAR 0 4
60195: ARRAY
60196: PUSH
60197: LD_VAR 0 3
60201: ARRAY
60202: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
60203: LD_VAR 0 5
60207: PUSH
60208: LD_INT 1
60210: ARRAY
60211: PPUSH
60212: CALL_OW 302
60216: NOT
60217: PUSH
60218: LD_VAR 0 5
60222: PUSH
60223: LD_INT 1
60225: ARRAY
60226: PPUSH
60227: CALL_OW 255
60231: PUSH
60232: LD_VAR 0 1
60236: PPUSH
60237: CALL_OW 255
60241: NONEQUAL
60242: OR
60243: IFFALSE 60349
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
60245: LD_VAR 0 5
60249: PUSH
60250: LD_INT 1
60252: ARRAY
60253: PPUSH
60254: CALL_OW 305
60258: PUSH
60259: LD_VAR 0 5
60263: PUSH
60264: LD_INT 1
60266: ARRAY
60267: PPUSH
60268: CALL_OW 255
60272: PUSH
60273: LD_VAR 0 1
60277: PPUSH
60278: CALL_OW 255
60282: EQUAL
60283: AND
60284: IFFALSE 60308
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
60286: LD_VAR 0 5
60290: PUSH
60291: LD_INT 1
60293: ARRAY
60294: PPUSH
60295: LD_VAR 0 5
60299: PUSH
60300: LD_INT 2
60302: ARRAY
60303: PPUSH
60304: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
60308: LD_ADDR_EXP 37
60312: PUSH
60313: LD_EXP 37
60317: PPUSH
60318: LD_VAR 0 4
60322: PPUSH
60323: LD_EXP 37
60327: PUSH
60328: LD_VAR 0 4
60332: ARRAY
60333: PPUSH
60334: LD_VAR 0 3
60338: PPUSH
60339: CALL_OW 3
60343: PPUSH
60344: CALL_OW 1
60348: ST_TO_ADDR
// end ; end ;
60349: GO 60178
60351: POP
60352: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60353: LD_VAR 0 1
60357: PPUSH
60358: LD_EXP 37
60362: PUSH
60363: LD_VAR 0 4
60367: ARRAY
60368: PUSH
60369: LD_INT 0
60371: PLUS
60372: PPUSH
60373: CALL_OW 505
// end ;
60377: LD_VAR 0 2
60381: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
60382: LD_INT 0
60384: PPUSH
60385: PPUSH
60386: PPUSH
60387: PPUSH
// if not hack in hackTanks then
60388: LD_VAR 0 1
60392: PUSH
60393: LD_EXP 36
60397: IN
60398: NOT
60399: IFFALSE 60403
// exit ;
60401: GO 60488
// index := GetElementIndex ( hackTanks , hack ) ;
60403: LD_ADDR_VAR 0 5
60407: PUSH
60408: LD_EXP 36
60412: PPUSH
60413: LD_VAR 0 1
60417: PPUSH
60418: CALL 20431 0 2
60422: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
60423: LD_ADDR_VAR 0 4
60427: PUSH
60428: DOUBLE
60429: LD_INT 1
60431: DEC
60432: ST_TO_ADDR
60433: LD_EXP 37
60437: PUSH
60438: LD_VAR 0 5
60442: ARRAY
60443: PUSH
60444: FOR_TO
60445: IFFALSE 60486
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
60447: LD_EXP 37
60451: PUSH
60452: LD_VAR 0 5
60456: ARRAY
60457: PUSH
60458: LD_VAR 0 4
60462: ARRAY
60463: PUSH
60464: LD_INT 1
60466: ARRAY
60467: PUSH
60468: LD_VAR 0 2
60472: EQUAL
60473: IFFALSE 60484
// KillUnit ( vehicle ) ;
60475: LD_VAR 0 2
60479: PPUSH
60480: CALL_OW 66
60484: GO 60444
60486: POP
60487: POP
// end ;
60488: LD_VAR 0 3
60492: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
60493: LD_EXP 41
60497: NOT
60498: IFFALSE 60533
60500: GO 60502
60502: DISABLE
// begin initMiner := true ;
60503: LD_ADDR_EXP 41
60507: PUSH
60508: LD_INT 1
60510: ST_TO_ADDR
// minersList := [ ] ;
60511: LD_ADDR_EXP 42
60515: PUSH
60516: EMPTY
60517: ST_TO_ADDR
// minerMinesList := [ ] ;
60518: LD_ADDR_EXP 43
60522: PUSH
60523: EMPTY
60524: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
60525: LD_ADDR_EXP 44
60529: PUSH
60530: LD_INT 5
60532: ST_TO_ADDR
// end ;
60533: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
60534: LD_EXP 41
60538: PUSH
60539: LD_INT 34
60541: PUSH
60542: LD_INT 81
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PPUSH
60549: CALL_OW 69
60553: AND
60554: IFFALSE 61015
60556: GO 60558
60558: DISABLE
60559: LD_INT 0
60561: PPUSH
60562: PPUSH
60563: PPUSH
60564: PPUSH
// begin enable ;
60565: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
60566: LD_ADDR_VAR 0 1
60570: PUSH
60571: LD_INT 34
60573: PUSH
60574: LD_INT 81
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PPUSH
60581: CALL_OW 69
60585: PUSH
60586: FOR_IN
60587: IFFALSE 60659
// begin if not i in minersList then
60589: LD_VAR 0 1
60593: PUSH
60594: LD_EXP 42
60598: IN
60599: NOT
60600: IFFALSE 60657
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
60602: LD_ADDR_EXP 42
60606: PUSH
60607: LD_EXP 42
60611: PPUSH
60612: LD_EXP 42
60616: PUSH
60617: LD_INT 1
60619: PLUS
60620: PPUSH
60621: LD_VAR 0 1
60625: PPUSH
60626: CALL_OW 1
60630: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
60631: LD_ADDR_EXP 43
60635: PUSH
60636: LD_EXP 43
60640: PPUSH
60641: LD_EXP 43
60645: PUSH
60646: LD_INT 1
60648: PLUS
60649: PPUSH
60650: EMPTY
60651: PPUSH
60652: CALL_OW 1
60656: ST_TO_ADDR
// end end ;
60657: GO 60586
60659: POP
60660: POP
// for i := minerMinesList downto 1 do
60661: LD_ADDR_VAR 0 1
60665: PUSH
60666: DOUBLE
60667: LD_EXP 43
60671: INC
60672: ST_TO_ADDR
60673: LD_INT 1
60675: PUSH
60676: FOR_DOWNTO
60677: IFFALSE 61013
// begin if IsLive ( minersList [ i ] ) then
60679: LD_EXP 42
60683: PUSH
60684: LD_VAR 0 1
60688: ARRAY
60689: PPUSH
60690: CALL_OW 300
60694: IFFALSE 60722
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
60696: LD_EXP 42
60700: PUSH
60701: LD_VAR 0 1
60705: ARRAY
60706: PPUSH
60707: LD_EXP 43
60711: PUSH
60712: LD_VAR 0 1
60716: ARRAY
60717: PPUSH
60718: CALL_OW 505
// if not minerMinesList [ i ] then
60722: LD_EXP 43
60726: PUSH
60727: LD_VAR 0 1
60731: ARRAY
60732: NOT
60733: IFFALSE 60737
// continue ;
60735: GO 60676
// for j := minerMinesList [ i ] downto 1 do
60737: LD_ADDR_VAR 0 2
60741: PUSH
60742: DOUBLE
60743: LD_EXP 43
60747: PUSH
60748: LD_VAR 0 1
60752: ARRAY
60753: INC
60754: ST_TO_ADDR
60755: LD_INT 1
60757: PUSH
60758: FOR_DOWNTO
60759: IFFALSE 61009
// begin side := GetSide ( minersList [ i ] ) ;
60761: LD_ADDR_VAR 0 3
60765: PUSH
60766: LD_EXP 42
60770: PUSH
60771: LD_VAR 0 1
60775: ARRAY
60776: PPUSH
60777: CALL_OW 255
60781: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60782: LD_ADDR_VAR 0 4
60786: PUSH
60787: LD_EXP 43
60791: PUSH
60792: LD_VAR 0 1
60796: ARRAY
60797: PUSH
60798: LD_VAR 0 2
60802: ARRAY
60803: PUSH
60804: LD_INT 1
60806: ARRAY
60807: PPUSH
60808: LD_EXP 43
60812: PUSH
60813: LD_VAR 0 1
60817: ARRAY
60818: PUSH
60819: LD_VAR 0 2
60823: ARRAY
60824: PUSH
60825: LD_INT 2
60827: ARRAY
60828: PPUSH
60829: CALL_OW 428
60833: ST_TO_ADDR
// if not tmp then
60834: LD_VAR 0 4
60838: NOT
60839: IFFALSE 60843
// continue ;
60841: GO 60758
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
60843: LD_VAR 0 4
60847: PUSH
60848: LD_INT 81
60850: PUSH
60851: LD_VAR 0 3
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PPUSH
60860: CALL_OW 69
60864: IN
60865: PUSH
60866: LD_EXP 43
60870: PUSH
60871: LD_VAR 0 1
60875: ARRAY
60876: PUSH
60877: LD_VAR 0 2
60881: ARRAY
60882: PUSH
60883: LD_INT 1
60885: ARRAY
60886: PPUSH
60887: LD_EXP 43
60891: PUSH
60892: LD_VAR 0 1
60896: ARRAY
60897: PUSH
60898: LD_VAR 0 2
60902: ARRAY
60903: PUSH
60904: LD_INT 2
60906: ARRAY
60907: PPUSH
60908: CALL_OW 458
60912: AND
60913: IFFALSE 61007
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
60915: LD_EXP 43
60919: PUSH
60920: LD_VAR 0 1
60924: ARRAY
60925: PUSH
60926: LD_VAR 0 2
60930: ARRAY
60931: PUSH
60932: LD_INT 1
60934: ARRAY
60935: PPUSH
60936: LD_EXP 43
60940: PUSH
60941: LD_VAR 0 1
60945: ARRAY
60946: PUSH
60947: LD_VAR 0 2
60951: ARRAY
60952: PUSH
60953: LD_INT 2
60955: ARRAY
60956: PPUSH
60957: LD_VAR 0 3
60961: PPUSH
60962: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60966: LD_ADDR_EXP 43
60970: PUSH
60971: LD_EXP 43
60975: PPUSH
60976: LD_VAR 0 1
60980: PPUSH
60981: LD_EXP 43
60985: PUSH
60986: LD_VAR 0 1
60990: ARRAY
60991: PPUSH
60992: LD_VAR 0 2
60996: PPUSH
60997: CALL_OW 3
61001: PPUSH
61002: CALL_OW 1
61006: ST_TO_ADDR
// end ; end ;
61007: GO 60758
61009: POP
61010: POP
// end ;
61011: GO 60676
61013: POP
61014: POP
// end ;
61015: PPOPN 4
61017: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
61018: LD_INT 0
61020: PPUSH
61021: PPUSH
// result := false ;
61022: LD_ADDR_VAR 0 4
61026: PUSH
61027: LD_INT 0
61029: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
61030: LD_VAR 0 1
61034: PPUSH
61035: CALL_OW 264
61039: PUSH
61040: LD_INT 81
61042: EQUAL
61043: NOT
61044: IFFALSE 61048
// exit ;
61046: GO 61288
// index := GetElementIndex ( minersList , unit ) ;
61048: LD_ADDR_VAR 0 5
61052: PUSH
61053: LD_EXP 42
61057: PPUSH
61058: LD_VAR 0 1
61062: PPUSH
61063: CALL 20431 0 2
61067: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
61068: LD_EXP 43
61072: PUSH
61073: LD_VAR 0 5
61077: ARRAY
61078: PUSH
61079: LD_EXP 44
61083: GREATEREQUAL
61084: IFFALSE 61088
// exit ;
61086: GO 61288
// ComMoveXY ( unit , x , y ) ;
61088: LD_VAR 0 1
61092: PPUSH
61093: LD_VAR 0 2
61097: PPUSH
61098: LD_VAR 0 3
61102: PPUSH
61103: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61107: LD_INT 35
61109: PPUSH
61110: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
61114: LD_VAR 0 1
61118: PPUSH
61119: LD_VAR 0 2
61123: PPUSH
61124: LD_VAR 0 3
61128: PPUSH
61129: CALL 52183 0 3
61133: NOT
61134: PUSH
61135: LD_VAR 0 1
61139: PPUSH
61140: CALL_OW 314
61144: AND
61145: IFFALSE 61149
// exit ;
61147: GO 61288
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
61149: LD_VAR 0 2
61153: PPUSH
61154: LD_VAR 0 3
61158: PPUSH
61159: CALL_OW 428
61163: PUSH
61164: LD_VAR 0 1
61168: EQUAL
61169: PUSH
61170: LD_VAR 0 1
61174: PPUSH
61175: CALL_OW 314
61179: NOT
61180: AND
61181: IFFALSE 61107
// PlaySoundXY ( x , y , PlantMine ) ;
61183: LD_VAR 0 2
61187: PPUSH
61188: LD_VAR 0 3
61192: PPUSH
61193: LD_STRING PlantMine
61195: PPUSH
61196: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
61200: LD_VAR 0 2
61204: PPUSH
61205: LD_VAR 0 3
61209: PPUSH
61210: LD_VAR 0 1
61214: PPUSH
61215: CALL_OW 255
61219: PPUSH
61220: LD_INT 0
61222: PPUSH
61223: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
61227: LD_ADDR_EXP 43
61231: PUSH
61232: LD_EXP 43
61236: PPUSH
61237: LD_VAR 0 5
61241: PUSH
61242: LD_EXP 43
61246: PUSH
61247: LD_VAR 0 5
61251: ARRAY
61252: PUSH
61253: LD_INT 1
61255: PLUS
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PPUSH
61261: LD_VAR 0 2
61265: PUSH
61266: LD_VAR 0 3
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PPUSH
61275: CALL 20646 0 3
61279: ST_TO_ADDR
// result := true ;
61280: LD_ADDR_VAR 0 4
61284: PUSH
61285: LD_INT 1
61287: ST_TO_ADDR
// end ;
61288: LD_VAR 0 4
61292: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
61293: LD_INT 0
61295: PPUSH
61296: PPUSH
61297: PPUSH
// if not unit in minersList then
61298: LD_VAR 0 1
61302: PUSH
61303: LD_EXP 42
61307: IN
61308: NOT
61309: IFFALSE 61313
// exit ;
61311: GO 61705
// index := GetElementIndex ( minersList , unit ) ;
61313: LD_ADDR_VAR 0 6
61317: PUSH
61318: LD_EXP 42
61322: PPUSH
61323: LD_VAR 0 1
61327: PPUSH
61328: CALL 20431 0 2
61332: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
61333: LD_ADDR_VAR 0 5
61337: PUSH
61338: DOUBLE
61339: LD_EXP 43
61343: PUSH
61344: LD_VAR 0 6
61348: ARRAY
61349: INC
61350: ST_TO_ADDR
61351: LD_INT 1
61353: PUSH
61354: FOR_DOWNTO
61355: IFFALSE 61516
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
61357: LD_EXP 43
61361: PUSH
61362: LD_VAR 0 6
61366: ARRAY
61367: PUSH
61368: LD_VAR 0 5
61372: ARRAY
61373: PUSH
61374: LD_INT 1
61376: ARRAY
61377: PUSH
61378: LD_VAR 0 2
61382: EQUAL
61383: PUSH
61384: LD_EXP 43
61388: PUSH
61389: LD_VAR 0 6
61393: ARRAY
61394: PUSH
61395: LD_VAR 0 5
61399: ARRAY
61400: PUSH
61401: LD_INT 2
61403: ARRAY
61404: PUSH
61405: LD_VAR 0 3
61409: EQUAL
61410: AND
61411: IFFALSE 61514
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
61413: LD_EXP 43
61417: PUSH
61418: LD_VAR 0 6
61422: ARRAY
61423: PUSH
61424: LD_VAR 0 5
61428: ARRAY
61429: PUSH
61430: LD_INT 1
61432: ARRAY
61433: PPUSH
61434: LD_EXP 43
61438: PUSH
61439: LD_VAR 0 6
61443: ARRAY
61444: PUSH
61445: LD_VAR 0 5
61449: ARRAY
61450: PUSH
61451: LD_INT 2
61453: ARRAY
61454: PPUSH
61455: LD_VAR 0 1
61459: PPUSH
61460: CALL_OW 255
61464: PPUSH
61465: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
61469: LD_ADDR_EXP 43
61473: PUSH
61474: LD_EXP 43
61478: PPUSH
61479: LD_VAR 0 6
61483: PPUSH
61484: LD_EXP 43
61488: PUSH
61489: LD_VAR 0 6
61493: ARRAY
61494: PPUSH
61495: LD_VAR 0 5
61499: PPUSH
61500: CALL_OW 3
61504: PPUSH
61505: CALL_OW 1
61509: ST_TO_ADDR
// exit ;
61510: POP
61511: POP
61512: GO 61705
// end ; end ;
61514: GO 61354
61516: POP
61517: POP
// for i := minerMinesList [ index ] downto 1 do
61518: LD_ADDR_VAR 0 5
61522: PUSH
61523: DOUBLE
61524: LD_EXP 43
61528: PUSH
61529: LD_VAR 0 6
61533: ARRAY
61534: INC
61535: ST_TO_ADDR
61536: LD_INT 1
61538: PUSH
61539: FOR_DOWNTO
61540: IFFALSE 61703
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
61542: LD_EXP 43
61546: PUSH
61547: LD_VAR 0 6
61551: ARRAY
61552: PUSH
61553: LD_VAR 0 5
61557: ARRAY
61558: PUSH
61559: LD_INT 1
61561: ARRAY
61562: PPUSH
61563: LD_EXP 43
61567: PUSH
61568: LD_VAR 0 6
61572: ARRAY
61573: PUSH
61574: LD_VAR 0 5
61578: ARRAY
61579: PUSH
61580: LD_INT 2
61582: ARRAY
61583: PPUSH
61584: LD_VAR 0 2
61588: PPUSH
61589: LD_VAR 0 3
61593: PPUSH
61594: CALL_OW 298
61598: PUSH
61599: LD_INT 6
61601: LESS
61602: IFFALSE 61701
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
61604: LD_EXP 43
61608: PUSH
61609: LD_VAR 0 6
61613: ARRAY
61614: PUSH
61615: LD_VAR 0 5
61619: ARRAY
61620: PUSH
61621: LD_INT 1
61623: ARRAY
61624: PPUSH
61625: LD_EXP 43
61629: PUSH
61630: LD_VAR 0 6
61634: ARRAY
61635: PUSH
61636: LD_VAR 0 5
61640: ARRAY
61641: PUSH
61642: LD_INT 2
61644: ARRAY
61645: PPUSH
61646: LD_VAR 0 1
61650: PPUSH
61651: CALL_OW 255
61655: PPUSH
61656: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
61660: LD_ADDR_EXP 43
61664: PUSH
61665: LD_EXP 43
61669: PPUSH
61670: LD_VAR 0 6
61674: PPUSH
61675: LD_EXP 43
61679: PUSH
61680: LD_VAR 0 6
61684: ARRAY
61685: PPUSH
61686: LD_VAR 0 5
61690: PPUSH
61691: CALL_OW 3
61695: PPUSH
61696: CALL_OW 1
61700: ST_TO_ADDR
// end ; end ;
61701: GO 61539
61703: POP
61704: POP
// end ;
61705: LD_VAR 0 4
61709: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
61710: LD_INT 0
61712: PPUSH
61713: PPUSH
61714: PPUSH
61715: PPUSH
61716: PPUSH
61717: PPUSH
61718: PPUSH
61719: PPUSH
61720: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
61721: LD_VAR 0 1
61725: PPUSH
61726: CALL_OW 264
61730: PUSH
61731: LD_INT 81
61733: EQUAL
61734: NOT
61735: PUSH
61736: LD_VAR 0 1
61740: PUSH
61741: LD_EXP 42
61745: IN
61746: NOT
61747: OR
61748: IFFALSE 61752
// exit ;
61750: GO 62074
// index := GetElementIndex ( minersList , unit ) ;
61752: LD_ADDR_VAR 0 6
61756: PUSH
61757: LD_EXP 42
61761: PPUSH
61762: LD_VAR 0 1
61766: PPUSH
61767: CALL 20431 0 2
61771: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
61772: LD_ADDR_VAR 0 8
61776: PUSH
61777: LD_EXP 44
61781: PUSH
61782: LD_EXP 43
61786: PUSH
61787: LD_VAR 0 6
61791: ARRAY
61792: MINUS
61793: ST_TO_ADDR
// if not minesFreeAmount then
61794: LD_VAR 0 8
61798: NOT
61799: IFFALSE 61803
// exit ;
61801: GO 62074
// tmp := [ ] ;
61803: LD_ADDR_VAR 0 7
61807: PUSH
61808: EMPTY
61809: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
61810: LD_ADDR_VAR 0 5
61814: PUSH
61815: DOUBLE
61816: LD_INT 1
61818: DEC
61819: ST_TO_ADDR
61820: LD_VAR 0 8
61824: PUSH
61825: FOR_TO
61826: IFFALSE 62021
// begin _d := rand ( 0 , 5 ) ;
61828: LD_ADDR_VAR 0 11
61832: PUSH
61833: LD_INT 0
61835: PPUSH
61836: LD_INT 5
61838: PPUSH
61839: CALL_OW 12
61843: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
61844: LD_ADDR_VAR 0 12
61848: PUSH
61849: LD_INT 2
61851: PPUSH
61852: LD_INT 6
61854: PPUSH
61855: CALL_OW 12
61859: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
61860: LD_ADDR_VAR 0 9
61864: PUSH
61865: LD_VAR 0 2
61869: PPUSH
61870: LD_VAR 0 11
61874: PPUSH
61875: LD_VAR 0 12
61879: PPUSH
61880: CALL_OW 272
61884: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
61885: LD_ADDR_VAR 0 10
61889: PUSH
61890: LD_VAR 0 3
61894: PPUSH
61895: LD_VAR 0 11
61899: PPUSH
61900: LD_VAR 0 12
61904: PPUSH
61905: CALL_OW 273
61909: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
61910: LD_VAR 0 9
61914: PPUSH
61915: LD_VAR 0 10
61919: PPUSH
61920: CALL_OW 488
61924: PUSH
61925: LD_VAR 0 9
61929: PUSH
61930: LD_VAR 0 10
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_VAR 0 7
61943: IN
61944: NOT
61945: AND
61946: PUSH
61947: LD_VAR 0 9
61951: PPUSH
61952: LD_VAR 0 10
61956: PPUSH
61957: CALL_OW 458
61961: NOT
61962: AND
61963: IFFALSE 62005
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
61965: LD_ADDR_VAR 0 7
61969: PUSH
61970: LD_VAR 0 7
61974: PPUSH
61975: LD_VAR 0 7
61979: PUSH
61980: LD_INT 1
61982: PLUS
61983: PPUSH
61984: LD_VAR 0 9
61988: PUSH
61989: LD_VAR 0 10
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PPUSH
61998: CALL_OW 1
62002: ST_TO_ADDR
62003: GO 62019
// i := i - 1 ;
62005: LD_ADDR_VAR 0 5
62009: PUSH
62010: LD_VAR 0 5
62014: PUSH
62015: LD_INT 1
62017: MINUS
62018: ST_TO_ADDR
// end ;
62019: GO 61825
62021: POP
62022: POP
// for i in tmp do
62023: LD_ADDR_VAR 0 5
62027: PUSH
62028: LD_VAR 0 7
62032: PUSH
62033: FOR_IN
62034: IFFALSE 62072
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
62036: LD_VAR 0 1
62040: PPUSH
62041: LD_VAR 0 5
62045: PUSH
62046: LD_INT 1
62048: ARRAY
62049: PPUSH
62050: LD_VAR 0 5
62054: PUSH
62055: LD_INT 2
62057: ARRAY
62058: PPUSH
62059: CALL 61018 0 3
62063: NOT
62064: IFFALSE 62070
// exit ;
62066: POP
62067: POP
62068: GO 62074
62070: GO 62033
62072: POP
62073: POP
// end ;
62074: LD_VAR 0 4
62078: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
62079: LD_INT 0
62081: PPUSH
62082: PPUSH
62083: PPUSH
62084: PPUSH
62085: PPUSH
62086: PPUSH
62087: PPUSH
// if not GetClass ( unit ) = class_sniper then
62088: LD_VAR 0 1
62092: PPUSH
62093: CALL_OW 257
62097: PUSH
62098: LD_INT 5
62100: EQUAL
62101: NOT
62102: IFFALSE 62106
// exit ;
62104: GO 62494
// dist := 8 ;
62106: LD_ADDR_VAR 0 5
62110: PUSH
62111: LD_INT 8
62113: ST_TO_ADDR
// viewRange := 12 ;
62114: LD_ADDR_VAR 0 7
62118: PUSH
62119: LD_INT 12
62121: ST_TO_ADDR
// side := GetSide ( unit ) ;
62122: LD_ADDR_VAR 0 6
62126: PUSH
62127: LD_VAR 0 1
62131: PPUSH
62132: CALL_OW 255
62136: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
62137: LD_INT 61
62139: PPUSH
62140: LD_VAR 0 6
62144: PPUSH
62145: CALL_OW 321
62149: PUSH
62150: LD_INT 2
62152: EQUAL
62153: IFFALSE 62163
// viewRange := 16 ;
62155: LD_ADDR_VAR 0 7
62159: PUSH
62160: LD_INT 16
62162: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
62163: LD_VAR 0 1
62167: PPUSH
62168: LD_VAR 0 2
62172: PPUSH
62173: LD_VAR 0 3
62177: PPUSH
62178: CALL_OW 297
62182: PUSH
62183: LD_VAR 0 5
62187: GREATER
62188: IFFALSE 62267
// begin ComMoveXY ( unit , x , y ) ;
62190: LD_VAR 0 1
62194: PPUSH
62195: LD_VAR 0 2
62199: PPUSH
62200: LD_VAR 0 3
62204: PPUSH
62205: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62209: LD_INT 35
62211: PPUSH
62212: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
62216: LD_VAR 0 1
62220: PPUSH
62221: LD_VAR 0 2
62225: PPUSH
62226: LD_VAR 0 3
62230: PPUSH
62231: CALL 52183 0 3
62235: NOT
62236: IFFALSE 62240
// exit ;
62238: GO 62494
// until GetDistUnitXY ( unit , x , y ) < dist ;
62240: LD_VAR 0 1
62244: PPUSH
62245: LD_VAR 0 2
62249: PPUSH
62250: LD_VAR 0 3
62254: PPUSH
62255: CALL_OW 297
62259: PUSH
62260: LD_VAR 0 5
62264: LESS
62265: IFFALSE 62209
// end ; ComTurnXY ( unit , x , y ) ;
62267: LD_VAR 0 1
62271: PPUSH
62272: LD_VAR 0 2
62276: PPUSH
62277: LD_VAR 0 3
62281: PPUSH
62282: CALL_OW 118
// wait ( 5 ) ;
62286: LD_INT 5
62288: PPUSH
62289: CALL_OW 67
// _d := GetDir ( unit ) ;
62293: LD_ADDR_VAR 0 10
62297: PUSH
62298: LD_VAR 0 1
62302: PPUSH
62303: CALL_OW 254
62307: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
62308: LD_ADDR_VAR 0 8
62312: PUSH
62313: LD_VAR 0 1
62317: PPUSH
62318: CALL_OW 250
62322: PPUSH
62323: LD_VAR 0 10
62327: PPUSH
62328: LD_VAR 0 5
62332: PPUSH
62333: CALL_OW 272
62337: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
62338: LD_ADDR_VAR 0 9
62342: PUSH
62343: LD_VAR 0 1
62347: PPUSH
62348: CALL_OW 251
62352: PPUSH
62353: LD_VAR 0 10
62357: PPUSH
62358: LD_VAR 0 5
62362: PPUSH
62363: CALL_OW 273
62367: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62368: LD_VAR 0 8
62372: PPUSH
62373: LD_VAR 0 9
62377: PPUSH
62378: CALL_OW 488
62382: NOT
62383: IFFALSE 62387
// exit ;
62385: GO 62494
// ComAnimCustom ( unit , 1 ) ;
62387: LD_VAR 0 1
62391: PPUSH
62392: LD_INT 1
62394: PPUSH
62395: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
62399: LD_VAR 0 8
62403: PPUSH
62404: LD_VAR 0 9
62408: PPUSH
62409: LD_VAR 0 6
62413: PPUSH
62414: LD_VAR 0 7
62418: PPUSH
62419: CALL_OW 330
// repeat wait ( 1 ) ;
62423: LD_INT 1
62425: PPUSH
62426: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
62430: LD_VAR 0 1
62434: PPUSH
62435: CALL_OW 316
62439: PUSH
62440: LD_VAR 0 1
62444: PPUSH
62445: CALL_OW 314
62449: OR
62450: PUSH
62451: LD_VAR 0 1
62455: PPUSH
62456: CALL_OW 302
62460: NOT
62461: OR
62462: PUSH
62463: LD_VAR 0 1
62467: PPUSH
62468: CALL_OW 301
62472: OR
62473: IFFALSE 62423
// RemoveSeeing ( _x , _y , side ) ;
62475: LD_VAR 0 8
62479: PPUSH
62480: LD_VAR 0 9
62484: PPUSH
62485: LD_VAR 0 6
62489: PPUSH
62490: CALL_OW 331
// end ; end_of_file
62494: LD_VAR 0 4
62498: RET
// export globalGameSaveCounter ; every 0 0$1 do
62499: GO 62501
62501: DISABLE
// begin enable ;
62502: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
62503: LD_STRING updateTimer(
62505: PUSH
62506: LD_OWVAR 1
62510: STR
62511: PUSH
62512: LD_STRING );
62514: STR
62515: PPUSH
62516: CALL_OW 559
// end ;
62520: END
// every 0 0$1 do
62521: GO 62523
62523: DISABLE
// begin globalGameSaveCounter := 0 ;
62524: LD_ADDR_EXP 45
62528: PUSH
62529: LD_INT 0
62531: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
62532: LD_STRING setGameSaveCounter(0)
62534: PPUSH
62535: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
62539: LD_STRING initStreamRollete();
62541: PPUSH
62542: CALL_OW 559
// InitStreamMode ;
62546: CALL 63872 0 0
// DefineStreamItems ( false ) ;
62550: LD_INT 0
62552: PPUSH
62553: CALL 64336 0 1
// end ;
62557: END
// export function SOS_MapStart ( ) ; begin
62558: LD_INT 0
62560: PPUSH
// if streamModeActive then
62561: LD_EXP 46
62565: IFFALSE 62574
// DefineStreamItems ( true ) ;
62567: LD_INT 1
62569: PPUSH
62570: CALL 64336 0 1
// UpdateLuaVariables ( ) ;
62574: CALL 62591 0 0
// UpdateFactoryWaypoints ( ) ;
62578: CALL 77205 0 0
// UpdateWarehouseGatheringPoints ( ) ;
62582: CALL 77462 0 0
// end ;
62586: LD_VAR 0 1
62590: RET
// function UpdateLuaVariables ( ) ; begin
62591: LD_INT 0
62593: PPUSH
// if globalGameSaveCounter then
62594: LD_EXP 45
62598: IFFALSE 62632
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
62600: LD_ADDR_EXP 45
62604: PUSH
62605: LD_EXP 45
62609: PPUSH
62610: CALL 54747 0 1
62614: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
62615: LD_STRING setGameSaveCounter(
62617: PUSH
62618: LD_EXP 45
62622: STR
62623: PUSH
62624: LD_STRING )
62626: STR
62627: PPUSH
62628: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
62632: LD_STRING setGameDifficulty(
62634: PUSH
62635: LD_OWVAR 67
62639: STR
62640: PUSH
62641: LD_STRING )
62643: STR
62644: PPUSH
62645: CALL_OW 559
// end ;
62649: LD_VAR 0 1
62653: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
62654: LD_INT 0
62656: PPUSH
// if p2 = stream_mode then
62657: LD_VAR 0 2
62661: PUSH
62662: LD_INT 100
62664: EQUAL
62665: IFFALSE 63668
// begin if not StreamModeActive then
62667: LD_EXP 46
62671: NOT
62672: IFFALSE 62682
// StreamModeActive := true ;
62674: LD_ADDR_EXP 46
62678: PUSH
62679: LD_INT 1
62681: ST_TO_ADDR
// if p3 = 0 then
62682: LD_VAR 0 3
62686: PUSH
62687: LD_INT 0
62689: EQUAL
62690: IFFALSE 62696
// InitStreamMode ;
62692: CALL 63872 0 0
// if p3 = 1 then
62696: LD_VAR 0 3
62700: PUSH
62701: LD_INT 1
62703: EQUAL
62704: IFFALSE 62714
// sRocket := true ;
62706: LD_ADDR_EXP 51
62710: PUSH
62711: LD_INT 1
62713: ST_TO_ADDR
// if p3 = 2 then
62714: LD_VAR 0 3
62718: PUSH
62719: LD_INT 2
62721: EQUAL
62722: IFFALSE 62732
// sSpeed := true ;
62724: LD_ADDR_EXP 50
62728: PUSH
62729: LD_INT 1
62731: ST_TO_ADDR
// if p3 = 3 then
62732: LD_VAR 0 3
62736: PUSH
62737: LD_INT 3
62739: EQUAL
62740: IFFALSE 62750
// sEngine := true ;
62742: LD_ADDR_EXP 52
62746: PUSH
62747: LD_INT 1
62749: ST_TO_ADDR
// if p3 = 4 then
62750: LD_VAR 0 3
62754: PUSH
62755: LD_INT 4
62757: EQUAL
62758: IFFALSE 62768
// sSpec := true ;
62760: LD_ADDR_EXP 49
62764: PUSH
62765: LD_INT 1
62767: ST_TO_ADDR
// if p3 = 5 then
62768: LD_VAR 0 3
62772: PUSH
62773: LD_INT 5
62775: EQUAL
62776: IFFALSE 62786
// sLevel := true ;
62778: LD_ADDR_EXP 53
62782: PUSH
62783: LD_INT 1
62785: ST_TO_ADDR
// if p3 = 6 then
62786: LD_VAR 0 3
62790: PUSH
62791: LD_INT 6
62793: EQUAL
62794: IFFALSE 62804
// sArmoury := true ;
62796: LD_ADDR_EXP 54
62800: PUSH
62801: LD_INT 1
62803: ST_TO_ADDR
// if p3 = 7 then
62804: LD_VAR 0 3
62808: PUSH
62809: LD_INT 7
62811: EQUAL
62812: IFFALSE 62822
// sRadar := true ;
62814: LD_ADDR_EXP 55
62818: PUSH
62819: LD_INT 1
62821: ST_TO_ADDR
// if p3 = 8 then
62822: LD_VAR 0 3
62826: PUSH
62827: LD_INT 8
62829: EQUAL
62830: IFFALSE 62840
// sBunker := true ;
62832: LD_ADDR_EXP 56
62836: PUSH
62837: LD_INT 1
62839: ST_TO_ADDR
// if p3 = 9 then
62840: LD_VAR 0 3
62844: PUSH
62845: LD_INT 9
62847: EQUAL
62848: IFFALSE 62858
// sHack := true ;
62850: LD_ADDR_EXP 57
62854: PUSH
62855: LD_INT 1
62857: ST_TO_ADDR
// if p3 = 10 then
62858: LD_VAR 0 3
62862: PUSH
62863: LD_INT 10
62865: EQUAL
62866: IFFALSE 62876
// sFire := true ;
62868: LD_ADDR_EXP 58
62872: PUSH
62873: LD_INT 1
62875: ST_TO_ADDR
// if p3 = 11 then
62876: LD_VAR 0 3
62880: PUSH
62881: LD_INT 11
62883: EQUAL
62884: IFFALSE 62894
// sRefresh := true ;
62886: LD_ADDR_EXP 59
62890: PUSH
62891: LD_INT 1
62893: ST_TO_ADDR
// if p3 = 12 then
62894: LD_VAR 0 3
62898: PUSH
62899: LD_INT 12
62901: EQUAL
62902: IFFALSE 62912
// sExp := true ;
62904: LD_ADDR_EXP 60
62908: PUSH
62909: LD_INT 1
62911: ST_TO_ADDR
// if p3 = 13 then
62912: LD_VAR 0 3
62916: PUSH
62917: LD_INT 13
62919: EQUAL
62920: IFFALSE 62930
// sDepot := true ;
62922: LD_ADDR_EXP 61
62926: PUSH
62927: LD_INT 1
62929: ST_TO_ADDR
// if p3 = 14 then
62930: LD_VAR 0 3
62934: PUSH
62935: LD_INT 14
62937: EQUAL
62938: IFFALSE 62948
// sFlag := true ;
62940: LD_ADDR_EXP 62
62944: PUSH
62945: LD_INT 1
62947: ST_TO_ADDR
// if p3 = 15 then
62948: LD_VAR 0 3
62952: PUSH
62953: LD_INT 15
62955: EQUAL
62956: IFFALSE 62966
// sKamikadze := true ;
62958: LD_ADDR_EXP 70
62962: PUSH
62963: LD_INT 1
62965: ST_TO_ADDR
// if p3 = 16 then
62966: LD_VAR 0 3
62970: PUSH
62971: LD_INT 16
62973: EQUAL
62974: IFFALSE 62984
// sTroll := true ;
62976: LD_ADDR_EXP 71
62980: PUSH
62981: LD_INT 1
62983: ST_TO_ADDR
// if p3 = 17 then
62984: LD_VAR 0 3
62988: PUSH
62989: LD_INT 17
62991: EQUAL
62992: IFFALSE 63002
// sSlow := true ;
62994: LD_ADDR_EXP 72
62998: PUSH
62999: LD_INT 1
63001: ST_TO_ADDR
// if p3 = 18 then
63002: LD_VAR 0 3
63006: PUSH
63007: LD_INT 18
63009: EQUAL
63010: IFFALSE 63020
// sLack := true ;
63012: LD_ADDR_EXP 73
63016: PUSH
63017: LD_INT 1
63019: ST_TO_ADDR
// if p3 = 19 then
63020: LD_VAR 0 3
63024: PUSH
63025: LD_INT 19
63027: EQUAL
63028: IFFALSE 63038
// sTank := true ;
63030: LD_ADDR_EXP 75
63034: PUSH
63035: LD_INT 1
63037: ST_TO_ADDR
// if p3 = 20 then
63038: LD_VAR 0 3
63042: PUSH
63043: LD_INT 20
63045: EQUAL
63046: IFFALSE 63056
// sRemote := true ;
63048: LD_ADDR_EXP 76
63052: PUSH
63053: LD_INT 1
63055: ST_TO_ADDR
// if p3 = 21 then
63056: LD_VAR 0 3
63060: PUSH
63061: LD_INT 21
63063: EQUAL
63064: IFFALSE 63074
// sPowell := true ;
63066: LD_ADDR_EXP 77
63070: PUSH
63071: LD_INT 1
63073: ST_TO_ADDR
// if p3 = 22 then
63074: LD_VAR 0 3
63078: PUSH
63079: LD_INT 22
63081: EQUAL
63082: IFFALSE 63092
// sTeleport := true ;
63084: LD_ADDR_EXP 80
63088: PUSH
63089: LD_INT 1
63091: ST_TO_ADDR
// if p3 = 23 then
63092: LD_VAR 0 3
63096: PUSH
63097: LD_INT 23
63099: EQUAL
63100: IFFALSE 63110
// sOilTower := true ;
63102: LD_ADDR_EXP 82
63106: PUSH
63107: LD_INT 1
63109: ST_TO_ADDR
// if p3 = 24 then
63110: LD_VAR 0 3
63114: PUSH
63115: LD_INT 24
63117: EQUAL
63118: IFFALSE 63128
// sShovel := true ;
63120: LD_ADDR_EXP 83
63124: PUSH
63125: LD_INT 1
63127: ST_TO_ADDR
// if p3 = 25 then
63128: LD_VAR 0 3
63132: PUSH
63133: LD_INT 25
63135: EQUAL
63136: IFFALSE 63146
// sSheik := true ;
63138: LD_ADDR_EXP 84
63142: PUSH
63143: LD_INT 1
63145: ST_TO_ADDR
// if p3 = 26 then
63146: LD_VAR 0 3
63150: PUSH
63151: LD_INT 26
63153: EQUAL
63154: IFFALSE 63164
// sEarthquake := true ;
63156: LD_ADDR_EXP 86
63160: PUSH
63161: LD_INT 1
63163: ST_TO_ADDR
// if p3 = 27 then
63164: LD_VAR 0 3
63168: PUSH
63169: LD_INT 27
63171: EQUAL
63172: IFFALSE 63182
// sAI := true ;
63174: LD_ADDR_EXP 87
63178: PUSH
63179: LD_INT 1
63181: ST_TO_ADDR
// if p3 = 28 then
63182: LD_VAR 0 3
63186: PUSH
63187: LD_INT 28
63189: EQUAL
63190: IFFALSE 63200
// sCargo := true ;
63192: LD_ADDR_EXP 90
63196: PUSH
63197: LD_INT 1
63199: ST_TO_ADDR
// if p3 = 29 then
63200: LD_VAR 0 3
63204: PUSH
63205: LD_INT 29
63207: EQUAL
63208: IFFALSE 63218
// sDLaser := true ;
63210: LD_ADDR_EXP 91
63214: PUSH
63215: LD_INT 1
63217: ST_TO_ADDR
// if p3 = 30 then
63218: LD_VAR 0 3
63222: PUSH
63223: LD_INT 30
63225: EQUAL
63226: IFFALSE 63236
// sExchange := true ;
63228: LD_ADDR_EXP 92
63232: PUSH
63233: LD_INT 1
63235: ST_TO_ADDR
// if p3 = 31 then
63236: LD_VAR 0 3
63240: PUSH
63241: LD_INT 31
63243: EQUAL
63244: IFFALSE 63254
// sFac := true ;
63246: LD_ADDR_EXP 93
63250: PUSH
63251: LD_INT 1
63253: ST_TO_ADDR
// if p3 = 32 then
63254: LD_VAR 0 3
63258: PUSH
63259: LD_INT 32
63261: EQUAL
63262: IFFALSE 63272
// sPower := true ;
63264: LD_ADDR_EXP 94
63268: PUSH
63269: LD_INT 1
63271: ST_TO_ADDR
// if p3 = 33 then
63272: LD_VAR 0 3
63276: PUSH
63277: LD_INT 33
63279: EQUAL
63280: IFFALSE 63290
// sRandom := true ;
63282: LD_ADDR_EXP 95
63286: PUSH
63287: LD_INT 1
63289: ST_TO_ADDR
// if p3 = 34 then
63290: LD_VAR 0 3
63294: PUSH
63295: LD_INT 34
63297: EQUAL
63298: IFFALSE 63308
// sShield := true ;
63300: LD_ADDR_EXP 96
63304: PUSH
63305: LD_INT 1
63307: ST_TO_ADDR
// if p3 = 35 then
63308: LD_VAR 0 3
63312: PUSH
63313: LD_INT 35
63315: EQUAL
63316: IFFALSE 63326
// sTime := true ;
63318: LD_ADDR_EXP 97
63322: PUSH
63323: LD_INT 1
63325: ST_TO_ADDR
// if p3 = 36 then
63326: LD_VAR 0 3
63330: PUSH
63331: LD_INT 36
63333: EQUAL
63334: IFFALSE 63344
// sTools := true ;
63336: LD_ADDR_EXP 98
63340: PUSH
63341: LD_INT 1
63343: ST_TO_ADDR
// if p3 = 101 then
63344: LD_VAR 0 3
63348: PUSH
63349: LD_INT 101
63351: EQUAL
63352: IFFALSE 63362
// sSold := true ;
63354: LD_ADDR_EXP 63
63358: PUSH
63359: LD_INT 1
63361: ST_TO_ADDR
// if p3 = 102 then
63362: LD_VAR 0 3
63366: PUSH
63367: LD_INT 102
63369: EQUAL
63370: IFFALSE 63380
// sDiff := true ;
63372: LD_ADDR_EXP 64
63376: PUSH
63377: LD_INT 1
63379: ST_TO_ADDR
// if p3 = 103 then
63380: LD_VAR 0 3
63384: PUSH
63385: LD_INT 103
63387: EQUAL
63388: IFFALSE 63398
// sFog := true ;
63390: LD_ADDR_EXP 67
63394: PUSH
63395: LD_INT 1
63397: ST_TO_ADDR
// if p3 = 104 then
63398: LD_VAR 0 3
63402: PUSH
63403: LD_INT 104
63405: EQUAL
63406: IFFALSE 63416
// sReset := true ;
63408: LD_ADDR_EXP 68
63412: PUSH
63413: LD_INT 1
63415: ST_TO_ADDR
// if p3 = 105 then
63416: LD_VAR 0 3
63420: PUSH
63421: LD_INT 105
63423: EQUAL
63424: IFFALSE 63434
// sSun := true ;
63426: LD_ADDR_EXP 69
63430: PUSH
63431: LD_INT 1
63433: ST_TO_ADDR
// if p3 = 106 then
63434: LD_VAR 0 3
63438: PUSH
63439: LD_INT 106
63441: EQUAL
63442: IFFALSE 63452
// sTiger := true ;
63444: LD_ADDR_EXP 65
63448: PUSH
63449: LD_INT 1
63451: ST_TO_ADDR
// if p3 = 107 then
63452: LD_VAR 0 3
63456: PUSH
63457: LD_INT 107
63459: EQUAL
63460: IFFALSE 63470
// sBomb := true ;
63462: LD_ADDR_EXP 66
63466: PUSH
63467: LD_INT 1
63469: ST_TO_ADDR
// if p3 = 108 then
63470: LD_VAR 0 3
63474: PUSH
63475: LD_INT 108
63477: EQUAL
63478: IFFALSE 63488
// sWound := true ;
63480: LD_ADDR_EXP 74
63484: PUSH
63485: LD_INT 1
63487: ST_TO_ADDR
// if p3 = 109 then
63488: LD_VAR 0 3
63492: PUSH
63493: LD_INT 109
63495: EQUAL
63496: IFFALSE 63506
// sBetray := true ;
63498: LD_ADDR_EXP 78
63502: PUSH
63503: LD_INT 1
63505: ST_TO_ADDR
// if p3 = 110 then
63506: LD_VAR 0 3
63510: PUSH
63511: LD_INT 110
63513: EQUAL
63514: IFFALSE 63524
// sContamin := true ;
63516: LD_ADDR_EXP 79
63520: PUSH
63521: LD_INT 1
63523: ST_TO_ADDR
// if p3 = 111 then
63524: LD_VAR 0 3
63528: PUSH
63529: LD_INT 111
63531: EQUAL
63532: IFFALSE 63542
// sOil := true ;
63534: LD_ADDR_EXP 81
63538: PUSH
63539: LD_INT 1
63541: ST_TO_ADDR
// if p3 = 112 then
63542: LD_VAR 0 3
63546: PUSH
63547: LD_INT 112
63549: EQUAL
63550: IFFALSE 63560
// sStu := true ;
63552: LD_ADDR_EXP 85
63556: PUSH
63557: LD_INT 1
63559: ST_TO_ADDR
// if p3 = 113 then
63560: LD_VAR 0 3
63564: PUSH
63565: LD_INT 113
63567: EQUAL
63568: IFFALSE 63578
// sBazooka := true ;
63570: LD_ADDR_EXP 88
63574: PUSH
63575: LD_INT 1
63577: ST_TO_ADDR
// if p3 = 114 then
63578: LD_VAR 0 3
63582: PUSH
63583: LD_INT 114
63585: EQUAL
63586: IFFALSE 63596
// sMortar := true ;
63588: LD_ADDR_EXP 89
63592: PUSH
63593: LD_INT 1
63595: ST_TO_ADDR
// if p3 = 115 then
63596: LD_VAR 0 3
63600: PUSH
63601: LD_INT 115
63603: EQUAL
63604: IFFALSE 63614
// sRanger := true ;
63606: LD_ADDR_EXP 99
63610: PUSH
63611: LD_INT 1
63613: ST_TO_ADDR
// if p3 = 116 then
63614: LD_VAR 0 3
63618: PUSH
63619: LD_INT 116
63621: EQUAL
63622: IFFALSE 63632
// sComputer := true ;
63624: LD_ADDR_EXP 100
63628: PUSH
63629: LD_INT 1
63631: ST_TO_ADDR
// if p3 = 117 then
63632: LD_VAR 0 3
63636: PUSH
63637: LD_INT 117
63639: EQUAL
63640: IFFALSE 63650
// s30 := true ;
63642: LD_ADDR_EXP 101
63646: PUSH
63647: LD_INT 1
63649: ST_TO_ADDR
// if p3 = 118 then
63650: LD_VAR 0 3
63654: PUSH
63655: LD_INT 118
63657: EQUAL
63658: IFFALSE 63668
// s60 := true ;
63660: LD_ADDR_EXP 102
63664: PUSH
63665: LD_INT 1
63667: ST_TO_ADDR
// end ; if p2 = hack_mode then
63668: LD_VAR 0 2
63672: PUSH
63673: LD_INT 101
63675: EQUAL
63676: IFFALSE 63804
// begin case p3 of 1 :
63678: LD_VAR 0 3
63682: PUSH
63683: LD_INT 1
63685: DOUBLE
63686: EQUAL
63687: IFTRUE 63691
63689: GO 63698
63691: POP
// hHackUnlimitedResources ; 2 :
63692: CALL 75951 0 0
63696: GO 63804
63698: LD_INT 2
63700: DOUBLE
63701: EQUAL
63702: IFTRUE 63706
63704: GO 63713
63706: POP
// hHackSetLevel10 ; 3 :
63707: CALL 76084 0 0
63711: GO 63804
63713: LD_INT 3
63715: DOUBLE
63716: EQUAL
63717: IFTRUE 63721
63719: GO 63728
63721: POP
// hHackSetLevel10YourUnits ; 4 :
63722: CALL 76169 0 0
63726: GO 63804
63728: LD_INT 4
63730: DOUBLE
63731: EQUAL
63732: IFTRUE 63736
63734: GO 63743
63736: POP
// hHackInvincible ; 5 :
63737: CALL 76617 0 0
63741: GO 63804
63743: LD_INT 5
63745: DOUBLE
63746: EQUAL
63747: IFTRUE 63751
63749: GO 63758
63751: POP
// hHackInvisible ; 6 :
63752: CALL 76728 0 0
63756: GO 63804
63758: LD_INT 6
63760: DOUBLE
63761: EQUAL
63762: IFTRUE 63766
63764: GO 63773
63766: POP
// hHackChangeYourSide ; 7 :
63767: CALL 76785 0 0
63771: GO 63804
63773: LD_INT 7
63775: DOUBLE
63776: EQUAL
63777: IFTRUE 63781
63779: GO 63788
63781: POP
// hHackChangeUnitSide ; 8 :
63782: CALL 76827 0 0
63786: GO 63804
63788: LD_INT 8
63790: DOUBLE
63791: EQUAL
63792: IFTRUE 63796
63794: GO 63803
63796: POP
// hHackFog ; end ;
63797: CALL 76928 0 0
63801: GO 63804
63803: POP
// end ; if p2 = game_save_mode then
63804: LD_VAR 0 2
63808: PUSH
63809: LD_INT 102
63811: EQUAL
63812: IFFALSE 63867
// begin if p3 = 1 then
63814: LD_VAR 0 3
63818: PUSH
63819: LD_INT 1
63821: EQUAL
63822: IFFALSE 63834
// globalGameSaveCounter := p4 ;
63824: LD_ADDR_EXP 45
63828: PUSH
63829: LD_VAR 0 4
63833: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
63834: LD_VAR 0 3
63838: PUSH
63839: LD_INT 2
63841: EQUAL
63842: PUSH
63843: LD_EXP 45
63847: AND
63848: IFFALSE 63867
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
63850: LD_STRING setGameSaveCounter(
63852: PUSH
63853: LD_EXP 45
63857: STR
63858: PUSH
63859: LD_STRING )
63861: STR
63862: PPUSH
63863: CALL_OW 559
// end ; end ;
63867: LD_VAR 0 7
63871: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
63872: LD_INT 0
63874: PPUSH
// streamModeActive := false ;
63875: LD_ADDR_EXP 46
63879: PUSH
63880: LD_INT 0
63882: ST_TO_ADDR
// normalCounter := 36 ;
63883: LD_ADDR_EXP 47
63887: PUSH
63888: LD_INT 36
63890: ST_TO_ADDR
// hardcoreCounter := 18 ;
63891: LD_ADDR_EXP 48
63895: PUSH
63896: LD_INT 18
63898: ST_TO_ADDR
// sRocket := false ;
63899: LD_ADDR_EXP 51
63903: PUSH
63904: LD_INT 0
63906: ST_TO_ADDR
// sSpeed := false ;
63907: LD_ADDR_EXP 50
63911: PUSH
63912: LD_INT 0
63914: ST_TO_ADDR
// sEngine := false ;
63915: LD_ADDR_EXP 52
63919: PUSH
63920: LD_INT 0
63922: ST_TO_ADDR
// sSpec := false ;
63923: LD_ADDR_EXP 49
63927: PUSH
63928: LD_INT 0
63930: ST_TO_ADDR
// sLevel := false ;
63931: LD_ADDR_EXP 53
63935: PUSH
63936: LD_INT 0
63938: ST_TO_ADDR
// sArmoury := false ;
63939: LD_ADDR_EXP 54
63943: PUSH
63944: LD_INT 0
63946: ST_TO_ADDR
// sRadar := false ;
63947: LD_ADDR_EXP 55
63951: PUSH
63952: LD_INT 0
63954: ST_TO_ADDR
// sBunker := false ;
63955: LD_ADDR_EXP 56
63959: PUSH
63960: LD_INT 0
63962: ST_TO_ADDR
// sHack := false ;
63963: LD_ADDR_EXP 57
63967: PUSH
63968: LD_INT 0
63970: ST_TO_ADDR
// sFire := false ;
63971: LD_ADDR_EXP 58
63975: PUSH
63976: LD_INT 0
63978: ST_TO_ADDR
// sRefresh := false ;
63979: LD_ADDR_EXP 59
63983: PUSH
63984: LD_INT 0
63986: ST_TO_ADDR
// sExp := false ;
63987: LD_ADDR_EXP 60
63991: PUSH
63992: LD_INT 0
63994: ST_TO_ADDR
// sDepot := false ;
63995: LD_ADDR_EXP 61
63999: PUSH
64000: LD_INT 0
64002: ST_TO_ADDR
// sFlag := false ;
64003: LD_ADDR_EXP 62
64007: PUSH
64008: LD_INT 0
64010: ST_TO_ADDR
// sKamikadze := false ;
64011: LD_ADDR_EXP 70
64015: PUSH
64016: LD_INT 0
64018: ST_TO_ADDR
// sTroll := false ;
64019: LD_ADDR_EXP 71
64023: PUSH
64024: LD_INT 0
64026: ST_TO_ADDR
// sSlow := false ;
64027: LD_ADDR_EXP 72
64031: PUSH
64032: LD_INT 0
64034: ST_TO_ADDR
// sLack := false ;
64035: LD_ADDR_EXP 73
64039: PUSH
64040: LD_INT 0
64042: ST_TO_ADDR
// sTank := false ;
64043: LD_ADDR_EXP 75
64047: PUSH
64048: LD_INT 0
64050: ST_TO_ADDR
// sRemote := false ;
64051: LD_ADDR_EXP 76
64055: PUSH
64056: LD_INT 0
64058: ST_TO_ADDR
// sPowell := false ;
64059: LD_ADDR_EXP 77
64063: PUSH
64064: LD_INT 0
64066: ST_TO_ADDR
// sTeleport := false ;
64067: LD_ADDR_EXP 80
64071: PUSH
64072: LD_INT 0
64074: ST_TO_ADDR
// sOilTower := false ;
64075: LD_ADDR_EXP 82
64079: PUSH
64080: LD_INT 0
64082: ST_TO_ADDR
// sShovel := false ;
64083: LD_ADDR_EXP 83
64087: PUSH
64088: LD_INT 0
64090: ST_TO_ADDR
// sSheik := false ;
64091: LD_ADDR_EXP 84
64095: PUSH
64096: LD_INT 0
64098: ST_TO_ADDR
// sEarthquake := false ;
64099: LD_ADDR_EXP 86
64103: PUSH
64104: LD_INT 0
64106: ST_TO_ADDR
// sAI := false ;
64107: LD_ADDR_EXP 87
64111: PUSH
64112: LD_INT 0
64114: ST_TO_ADDR
// sCargo := false ;
64115: LD_ADDR_EXP 90
64119: PUSH
64120: LD_INT 0
64122: ST_TO_ADDR
// sDLaser := false ;
64123: LD_ADDR_EXP 91
64127: PUSH
64128: LD_INT 0
64130: ST_TO_ADDR
// sExchange := false ;
64131: LD_ADDR_EXP 92
64135: PUSH
64136: LD_INT 0
64138: ST_TO_ADDR
// sFac := false ;
64139: LD_ADDR_EXP 93
64143: PUSH
64144: LD_INT 0
64146: ST_TO_ADDR
// sPower := false ;
64147: LD_ADDR_EXP 94
64151: PUSH
64152: LD_INT 0
64154: ST_TO_ADDR
// sRandom := false ;
64155: LD_ADDR_EXP 95
64159: PUSH
64160: LD_INT 0
64162: ST_TO_ADDR
// sShield := false ;
64163: LD_ADDR_EXP 96
64167: PUSH
64168: LD_INT 0
64170: ST_TO_ADDR
// sTime := false ;
64171: LD_ADDR_EXP 97
64175: PUSH
64176: LD_INT 0
64178: ST_TO_ADDR
// sTools := false ;
64179: LD_ADDR_EXP 98
64183: PUSH
64184: LD_INT 0
64186: ST_TO_ADDR
// sSold := false ;
64187: LD_ADDR_EXP 63
64191: PUSH
64192: LD_INT 0
64194: ST_TO_ADDR
// sDiff := false ;
64195: LD_ADDR_EXP 64
64199: PUSH
64200: LD_INT 0
64202: ST_TO_ADDR
// sFog := false ;
64203: LD_ADDR_EXP 67
64207: PUSH
64208: LD_INT 0
64210: ST_TO_ADDR
// sReset := false ;
64211: LD_ADDR_EXP 68
64215: PUSH
64216: LD_INT 0
64218: ST_TO_ADDR
// sSun := false ;
64219: LD_ADDR_EXP 69
64223: PUSH
64224: LD_INT 0
64226: ST_TO_ADDR
// sTiger := false ;
64227: LD_ADDR_EXP 65
64231: PUSH
64232: LD_INT 0
64234: ST_TO_ADDR
// sBomb := false ;
64235: LD_ADDR_EXP 66
64239: PUSH
64240: LD_INT 0
64242: ST_TO_ADDR
// sWound := false ;
64243: LD_ADDR_EXP 74
64247: PUSH
64248: LD_INT 0
64250: ST_TO_ADDR
// sBetray := false ;
64251: LD_ADDR_EXP 78
64255: PUSH
64256: LD_INT 0
64258: ST_TO_ADDR
// sContamin := false ;
64259: LD_ADDR_EXP 79
64263: PUSH
64264: LD_INT 0
64266: ST_TO_ADDR
// sOil := false ;
64267: LD_ADDR_EXP 81
64271: PUSH
64272: LD_INT 0
64274: ST_TO_ADDR
// sStu := false ;
64275: LD_ADDR_EXP 85
64279: PUSH
64280: LD_INT 0
64282: ST_TO_ADDR
// sBazooka := false ;
64283: LD_ADDR_EXP 88
64287: PUSH
64288: LD_INT 0
64290: ST_TO_ADDR
// sMortar := false ;
64291: LD_ADDR_EXP 89
64295: PUSH
64296: LD_INT 0
64298: ST_TO_ADDR
// sRanger := false ;
64299: LD_ADDR_EXP 99
64303: PUSH
64304: LD_INT 0
64306: ST_TO_ADDR
// sComputer := false ;
64307: LD_ADDR_EXP 100
64311: PUSH
64312: LD_INT 0
64314: ST_TO_ADDR
// s30 := false ;
64315: LD_ADDR_EXP 101
64319: PUSH
64320: LD_INT 0
64322: ST_TO_ADDR
// s60 := false ;
64323: LD_ADDR_EXP 102
64327: PUSH
64328: LD_INT 0
64330: ST_TO_ADDR
// end ;
64331: LD_VAR 0 1
64335: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
64336: LD_INT 0
64338: PPUSH
64339: PPUSH
64340: PPUSH
64341: PPUSH
64342: PPUSH
64343: PPUSH
64344: PPUSH
// result := [ ] ;
64345: LD_ADDR_VAR 0 2
64349: PUSH
64350: EMPTY
64351: ST_TO_ADDR
// if campaign_id = 1 then
64352: LD_OWVAR 69
64356: PUSH
64357: LD_INT 1
64359: EQUAL
64360: IFFALSE 67526
// begin case mission_number of 1 :
64362: LD_OWVAR 70
64366: PUSH
64367: LD_INT 1
64369: DOUBLE
64370: EQUAL
64371: IFTRUE 64375
64373: GO 64451
64375: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
64376: LD_ADDR_VAR 0 2
64380: PUSH
64381: LD_INT 2
64383: PUSH
64384: LD_INT 4
64386: PUSH
64387: LD_INT 11
64389: PUSH
64390: LD_INT 12
64392: PUSH
64393: LD_INT 15
64395: PUSH
64396: LD_INT 16
64398: PUSH
64399: LD_INT 22
64401: PUSH
64402: LD_INT 23
64404: PUSH
64405: LD_INT 26
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 101
64421: PUSH
64422: LD_INT 102
64424: PUSH
64425: LD_INT 106
64427: PUSH
64428: LD_INT 116
64430: PUSH
64431: LD_INT 117
64433: PUSH
64434: LD_INT 118
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: ST_TO_ADDR
64449: GO 67524
64451: LD_INT 2
64453: DOUBLE
64454: EQUAL
64455: IFTRUE 64459
64457: GO 64543
64459: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
64460: LD_ADDR_VAR 0 2
64464: PUSH
64465: LD_INT 2
64467: PUSH
64468: LD_INT 4
64470: PUSH
64471: LD_INT 11
64473: PUSH
64474: LD_INT 12
64476: PUSH
64477: LD_INT 15
64479: PUSH
64480: LD_INT 16
64482: PUSH
64483: LD_INT 22
64485: PUSH
64486: LD_INT 23
64488: PUSH
64489: LD_INT 26
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 101
64505: PUSH
64506: LD_INT 102
64508: PUSH
64509: LD_INT 105
64511: PUSH
64512: LD_INT 106
64514: PUSH
64515: LD_INT 108
64517: PUSH
64518: LD_INT 116
64520: PUSH
64521: LD_INT 117
64523: PUSH
64524: LD_INT 118
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: ST_TO_ADDR
64541: GO 67524
64543: LD_INT 3
64545: DOUBLE
64546: EQUAL
64547: IFTRUE 64551
64549: GO 64639
64551: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
64552: LD_ADDR_VAR 0 2
64556: PUSH
64557: LD_INT 2
64559: PUSH
64560: LD_INT 4
64562: PUSH
64563: LD_INT 5
64565: PUSH
64566: LD_INT 11
64568: PUSH
64569: LD_INT 12
64571: PUSH
64572: LD_INT 15
64574: PUSH
64575: LD_INT 16
64577: PUSH
64578: LD_INT 22
64580: PUSH
64581: LD_INT 26
64583: PUSH
64584: LD_INT 36
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 101
64601: PUSH
64602: LD_INT 102
64604: PUSH
64605: LD_INT 105
64607: PUSH
64608: LD_INT 106
64610: PUSH
64611: LD_INT 108
64613: PUSH
64614: LD_INT 116
64616: PUSH
64617: LD_INT 117
64619: PUSH
64620: LD_INT 118
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: ST_TO_ADDR
64637: GO 67524
64639: LD_INT 4
64641: DOUBLE
64642: EQUAL
64643: IFTRUE 64647
64645: GO 64743
64647: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
64648: LD_ADDR_VAR 0 2
64652: PUSH
64653: LD_INT 2
64655: PUSH
64656: LD_INT 4
64658: PUSH
64659: LD_INT 5
64661: PUSH
64662: LD_INT 8
64664: PUSH
64665: LD_INT 11
64667: PUSH
64668: LD_INT 12
64670: PUSH
64671: LD_INT 15
64673: PUSH
64674: LD_INT 16
64676: PUSH
64677: LD_INT 22
64679: PUSH
64680: LD_INT 23
64682: PUSH
64683: LD_INT 26
64685: PUSH
64686: LD_INT 36
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 101
64705: PUSH
64706: LD_INT 102
64708: PUSH
64709: LD_INT 105
64711: PUSH
64712: LD_INT 106
64714: PUSH
64715: LD_INT 108
64717: PUSH
64718: LD_INT 116
64720: PUSH
64721: LD_INT 117
64723: PUSH
64724: LD_INT 118
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: ST_TO_ADDR
64741: GO 67524
64743: LD_INT 5
64745: DOUBLE
64746: EQUAL
64747: IFTRUE 64751
64749: GO 64863
64751: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
64752: LD_ADDR_VAR 0 2
64756: PUSH
64757: LD_INT 2
64759: PUSH
64760: LD_INT 4
64762: PUSH
64763: LD_INT 5
64765: PUSH
64766: LD_INT 6
64768: PUSH
64769: LD_INT 8
64771: PUSH
64772: LD_INT 11
64774: PUSH
64775: LD_INT 12
64777: PUSH
64778: LD_INT 15
64780: PUSH
64781: LD_INT 16
64783: PUSH
64784: LD_INT 22
64786: PUSH
64787: LD_INT 23
64789: PUSH
64790: LD_INT 25
64792: PUSH
64793: LD_INT 26
64795: PUSH
64796: LD_INT 36
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 101
64817: PUSH
64818: LD_INT 102
64820: PUSH
64821: LD_INT 105
64823: PUSH
64824: LD_INT 106
64826: PUSH
64827: LD_INT 108
64829: PUSH
64830: LD_INT 109
64832: PUSH
64833: LD_INT 112
64835: PUSH
64836: LD_INT 116
64838: PUSH
64839: LD_INT 117
64841: PUSH
64842: LD_INT 118
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: ST_TO_ADDR
64861: GO 67524
64863: LD_INT 6
64865: DOUBLE
64866: EQUAL
64867: IFTRUE 64871
64869: GO 65003
64871: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
64872: LD_ADDR_VAR 0 2
64876: PUSH
64877: LD_INT 2
64879: PUSH
64880: LD_INT 4
64882: PUSH
64883: LD_INT 5
64885: PUSH
64886: LD_INT 6
64888: PUSH
64889: LD_INT 8
64891: PUSH
64892: LD_INT 11
64894: PUSH
64895: LD_INT 12
64897: PUSH
64898: LD_INT 15
64900: PUSH
64901: LD_INT 16
64903: PUSH
64904: LD_INT 20
64906: PUSH
64907: LD_INT 21
64909: PUSH
64910: LD_INT 22
64912: PUSH
64913: LD_INT 23
64915: PUSH
64916: LD_INT 25
64918: PUSH
64919: LD_INT 26
64921: PUSH
64922: LD_INT 30
64924: PUSH
64925: LD_INT 31
64927: PUSH
64928: LD_INT 32
64930: PUSH
64931: LD_INT 36
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 101
64957: PUSH
64958: LD_INT 102
64960: PUSH
64961: LD_INT 105
64963: PUSH
64964: LD_INT 106
64966: PUSH
64967: LD_INT 108
64969: PUSH
64970: LD_INT 109
64972: PUSH
64973: LD_INT 112
64975: PUSH
64976: LD_INT 116
64978: PUSH
64979: LD_INT 117
64981: PUSH
64982: LD_INT 118
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: ST_TO_ADDR
65001: GO 67524
65003: LD_INT 7
65005: DOUBLE
65006: EQUAL
65007: IFTRUE 65011
65009: GO 65123
65011: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
65012: LD_ADDR_VAR 0 2
65016: PUSH
65017: LD_INT 2
65019: PUSH
65020: LD_INT 4
65022: PUSH
65023: LD_INT 5
65025: PUSH
65026: LD_INT 7
65028: PUSH
65029: LD_INT 11
65031: PUSH
65032: LD_INT 12
65034: PUSH
65035: LD_INT 15
65037: PUSH
65038: LD_INT 16
65040: PUSH
65041: LD_INT 20
65043: PUSH
65044: LD_INT 21
65046: PUSH
65047: LD_INT 22
65049: PUSH
65050: LD_INT 23
65052: PUSH
65053: LD_INT 25
65055: PUSH
65056: LD_INT 26
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: PUSH
65075: LD_INT 101
65077: PUSH
65078: LD_INT 102
65080: PUSH
65081: LD_INT 103
65083: PUSH
65084: LD_INT 105
65086: PUSH
65087: LD_INT 106
65089: PUSH
65090: LD_INT 108
65092: PUSH
65093: LD_INT 112
65095: PUSH
65096: LD_INT 116
65098: PUSH
65099: LD_INT 117
65101: PUSH
65102: LD_INT 118
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: LIST
65113: LIST
65114: LIST
65115: LIST
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: ST_TO_ADDR
65121: GO 67524
65123: LD_INT 8
65125: DOUBLE
65126: EQUAL
65127: IFTRUE 65131
65129: GO 65271
65131: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
65132: LD_ADDR_VAR 0 2
65136: PUSH
65137: LD_INT 2
65139: PUSH
65140: LD_INT 4
65142: PUSH
65143: LD_INT 5
65145: PUSH
65146: LD_INT 6
65148: PUSH
65149: LD_INT 7
65151: PUSH
65152: LD_INT 8
65154: PUSH
65155: LD_INT 11
65157: PUSH
65158: LD_INT 12
65160: PUSH
65161: LD_INT 15
65163: PUSH
65164: LD_INT 16
65166: PUSH
65167: LD_INT 20
65169: PUSH
65170: LD_INT 21
65172: PUSH
65173: LD_INT 22
65175: PUSH
65176: LD_INT 23
65178: PUSH
65179: LD_INT 25
65181: PUSH
65182: LD_INT 26
65184: PUSH
65185: LD_INT 30
65187: PUSH
65188: LD_INT 31
65190: PUSH
65191: LD_INT 32
65193: PUSH
65194: LD_INT 36
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: LIST
65212: LIST
65213: LIST
65214: LIST
65215: LIST
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 101
65221: PUSH
65222: LD_INT 102
65224: PUSH
65225: LD_INT 103
65227: PUSH
65228: LD_INT 105
65230: PUSH
65231: LD_INT 106
65233: PUSH
65234: LD_INT 108
65236: PUSH
65237: LD_INT 109
65239: PUSH
65240: LD_INT 112
65242: PUSH
65243: LD_INT 116
65245: PUSH
65246: LD_INT 117
65248: PUSH
65249: LD_INT 118
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: LIST
65263: LIST
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: ST_TO_ADDR
65269: GO 67524
65271: LD_INT 9
65273: DOUBLE
65274: EQUAL
65275: IFTRUE 65279
65277: GO 65427
65279: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
65280: LD_ADDR_VAR 0 2
65284: PUSH
65285: LD_INT 2
65287: PUSH
65288: LD_INT 4
65290: PUSH
65291: LD_INT 5
65293: PUSH
65294: LD_INT 6
65296: PUSH
65297: LD_INT 7
65299: PUSH
65300: LD_INT 8
65302: PUSH
65303: LD_INT 11
65305: PUSH
65306: LD_INT 12
65308: PUSH
65309: LD_INT 15
65311: PUSH
65312: LD_INT 16
65314: PUSH
65315: LD_INT 20
65317: PUSH
65318: LD_INT 21
65320: PUSH
65321: LD_INT 22
65323: PUSH
65324: LD_INT 23
65326: PUSH
65327: LD_INT 25
65329: PUSH
65330: LD_INT 26
65332: PUSH
65333: LD_INT 28
65335: PUSH
65336: LD_INT 30
65338: PUSH
65339: LD_INT 31
65341: PUSH
65342: LD_INT 32
65344: PUSH
65345: LD_INT 36
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 101
65373: PUSH
65374: LD_INT 102
65376: PUSH
65377: LD_INT 103
65379: PUSH
65380: LD_INT 105
65382: PUSH
65383: LD_INT 106
65385: PUSH
65386: LD_INT 108
65388: PUSH
65389: LD_INT 109
65391: PUSH
65392: LD_INT 112
65394: PUSH
65395: LD_INT 114
65397: PUSH
65398: LD_INT 116
65400: PUSH
65401: LD_INT 117
65403: PUSH
65404: LD_INT 118
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: LIST
65411: LIST
65412: LIST
65413: LIST
65414: LIST
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: LIST
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: ST_TO_ADDR
65425: GO 67524
65427: LD_INT 10
65429: DOUBLE
65430: EQUAL
65431: IFTRUE 65435
65433: GO 65631
65435: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
65436: LD_ADDR_VAR 0 2
65440: PUSH
65441: LD_INT 2
65443: PUSH
65444: LD_INT 4
65446: PUSH
65447: LD_INT 5
65449: PUSH
65450: LD_INT 6
65452: PUSH
65453: LD_INT 7
65455: PUSH
65456: LD_INT 8
65458: PUSH
65459: LD_INT 9
65461: PUSH
65462: LD_INT 10
65464: PUSH
65465: LD_INT 11
65467: PUSH
65468: LD_INT 12
65470: PUSH
65471: LD_INT 13
65473: PUSH
65474: LD_INT 14
65476: PUSH
65477: LD_INT 15
65479: PUSH
65480: LD_INT 16
65482: PUSH
65483: LD_INT 17
65485: PUSH
65486: LD_INT 18
65488: PUSH
65489: LD_INT 19
65491: PUSH
65492: LD_INT 20
65494: PUSH
65495: LD_INT 21
65497: PUSH
65498: LD_INT 22
65500: PUSH
65501: LD_INT 23
65503: PUSH
65504: LD_INT 24
65506: PUSH
65507: LD_INT 25
65509: PUSH
65510: LD_INT 26
65512: PUSH
65513: LD_INT 28
65515: PUSH
65516: LD_INT 30
65518: PUSH
65519: LD_INT 31
65521: PUSH
65522: LD_INT 32
65524: PUSH
65525: LD_INT 36
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: PUSH
65559: LD_INT 101
65561: PUSH
65562: LD_INT 102
65564: PUSH
65565: LD_INT 103
65567: PUSH
65568: LD_INT 104
65570: PUSH
65571: LD_INT 105
65573: PUSH
65574: LD_INT 106
65576: PUSH
65577: LD_INT 107
65579: PUSH
65580: LD_INT 108
65582: PUSH
65583: LD_INT 109
65585: PUSH
65586: LD_INT 110
65588: PUSH
65589: LD_INT 111
65591: PUSH
65592: LD_INT 112
65594: PUSH
65595: LD_INT 114
65597: PUSH
65598: LD_INT 116
65600: PUSH
65601: LD_INT 117
65603: PUSH
65604: LD_INT 118
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: ST_TO_ADDR
65629: GO 67524
65631: LD_INT 11
65633: DOUBLE
65634: EQUAL
65635: IFTRUE 65639
65637: GO 65843
65639: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
65640: LD_ADDR_VAR 0 2
65644: PUSH
65645: LD_INT 2
65647: PUSH
65648: LD_INT 3
65650: PUSH
65651: LD_INT 4
65653: PUSH
65654: LD_INT 5
65656: PUSH
65657: LD_INT 6
65659: PUSH
65660: LD_INT 7
65662: PUSH
65663: LD_INT 8
65665: PUSH
65666: LD_INT 9
65668: PUSH
65669: LD_INT 10
65671: PUSH
65672: LD_INT 11
65674: PUSH
65675: LD_INT 12
65677: PUSH
65678: LD_INT 13
65680: PUSH
65681: LD_INT 14
65683: PUSH
65684: LD_INT 15
65686: PUSH
65687: LD_INT 16
65689: PUSH
65690: LD_INT 17
65692: PUSH
65693: LD_INT 18
65695: PUSH
65696: LD_INT 19
65698: PUSH
65699: LD_INT 20
65701: PUSH
65702: LD_INT 21
65704: PUSH
65705: LD_INT 22
65707: PUSH
65708: LD_INT 23
65710: PUSH
65711: LD_INT 24
65713: PUSH
65714: LD_INT 25
65716: PUSH
65717: LD_INT 26
65719: PUSH
65720: LD_INT 28
65722: PUSH
65723: LD_INT 30
65725: PUSH
65726: LD_INT 31
65728: PUSH
65729: LD_INT 32
65731: PUSH
65732: LD_INT 34
65734: PUSH
65735: LD_INT 36
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: LIST
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: LIST
65767: LIST
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 101
65773: PUSH
65774: LD_INT 102
65776: PUSH
65777: LD_INT 103
65779: PUSH
65780: LD_INT 104
65782: PUSH
65783: LD_INT 105
65785: PUSH
65786: LD_INT 106
65788: PUSH
65789: LD_INT 107
65791: PUSH
65792: LD_INT 108
65794: PUSH
65795: LD_INT 109
65797: PUSH
65798: LD_INT 110
65800: PUSH
65801: LD_INT 111
65803: PUSH
65804: LD_INT 112
65806: PUSH
65807: LD_INT 114
65809: PUSH
65810: LD_INT 116
65812: PUSH
65813: LD_INT 117
65815: PUSH
65816: LD_INT 118
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: LIST
65826: LIST
65827: LIST
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: LIST
65835: LIST
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: ST_TO_ADDR
65841: GO 67524
65843: LD_INT 12
65845: DOUBLE
65846: EQUAL
65847: IFTRUE 65851
65849: GO 66071
65851: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
65852: LD_ADDR_VAR 0 2
65856: PUSH
65857: LD_INT 1
65859: PUSH
65860: LD_INT 2
65862: PUSH
65863: LD_INT 3
65865: PUSH
65866: LD_INT 4
65868: PUSH
65869: LD_INT 5
65871: PUSH
65872: LD_INT 6
65874: PUSH
65875: LD_INT 7
65877: PUSH
65878: LD_INT 8
65880: PUSH
65881: LD_INT 9
65883: PUSH
65884: LD_INT 10
65886: PUSH
65887: LD_INT 11
65889: PUSH
65890: LD_INT 12
65892: PUSH
65893: LD_INT 13
65895: PUSH
65896: LD_INT 14
65898: PUSH
65899: LD_INT 15
65901: PUSH
65902: LD_INT 16
65904: PUSH
65905: LD_INT 17
65907: PUSH
65908: LD_INT 18
65910: PUSH
65911: LD_INT 19
65913: PUSH
65914: LD_INT 20
65916: PUSH
65917: LD_INT 21
65919: PUSH
65920: LD_INT 22
65922: PUSH
65923: LD_INT 23
65925: PUSH
65926: LD_INT 24
65928: PUSH
65929: LD_INT 25
65931: PUSH
65932: LD_INT 26
65934: PUSH
65935: LD_INT 27
65937: PUSH
65938: LD_INT 28
65940: PUSH
65941: LD_INT 30
65943: PUSH
65944: LD_INT 31
65946: PUSH
65947: LD_INT 32
65949: PUSH
65950: LD_INT 33
65952: PUSH
65953: LD_INT 34
65955: PUSH
65956: LD_INT 36
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: LIST
65987: LIST
65988: LIST
65989: LIST
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 101
65997: PUSH
65998: LD_INT 102
66000: PUSH
66001: LD_INT 103
66003: PUSH
66004: LD_INT 104
66006: PUSH
66007: LD_INT 105
66009: PUSH
66010: LD_INT 106
66012: PUSH
66013: LD_INT 107
66015: PUSH
66016: LD_INT 108
66018: PUSH
66019: LD_INT 109
66021: PUSH
66022: LD_INT 110
66024: PUSH
66025: LD_INT 111
66027: PUSH
66028: LD_INT 112
66030: PUSH
66031: LD_INT 113
66033: PUSH
66034: LD_INT 114
66036: PUSH
66037: LD_INT 116
66039: PUSH
66040: LD_INT 117
66042: PUSH
66043: LD_INT 118
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: ST_TO_ADDR
66069: GO 67524
66071: LD_INT 13
66073: DOUBLE
66074: EQUAL
66075: IFTRUE 66079
66077: GO 66287
66079: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
66080: LD_ADDR_VAR 0 2
66084: PUSH
66085: LD_INT 1
66087: PUSH
66088: LD_INT 2
66090: PUSH
66091: LD_INT 3
66093: PUSH
66094: LD_INT 4
66096: PUSH
66097: LD_INT 5
66099: PUSH
66100: LD_INT 8
66102: PUSH
66103: LD_INT 9
66105: PUSH
66106: LD_INT 10
66108: PUSH
66109: LD_INT 11
66111: PUSH
66112: LD_INT 12
66114: PUSH
66115: LD_INT 14
66117: PUSH
66118: LD_INT 15
66120: PUSH
66121: LD_INT 16
66123: PUSH
66124: LD_INT 17
66126: PUSH
66127: LD_INT 18
66129: PUSH
66130: LD_INT 19
66132: PUSH
66133: LD_INT 20
66135: PUSH
66136: LD_INT 21
66138: PUSH
66139: LD_INT 22
66141: PUSH
66142: LD_INT 23
66144: PUSH
66145: LD_INT 24
66147: PUSH
66148: LD_INT 25
66150: PUSH
66151: LD_INT 26
66153: PUSH
66154: LD_INT 27
66156: PUSH
66157: LD_INT 28
66159: PUSH
66160: LD_INT 30
66162: PUSH
66163: LD_INT 31
66165: PUSH
66166: LD_INT 32
66168: PUSH
66169: LD_INT 33
66171: PUSH
66172: LD_INT 34
66174: PUSH
66175: LD_INT 36
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 101
66213: PUSH
66214: LD_INT 102
66216: PUSH
66217: LD_INT 103
66219: PUSH
66220: LD_INT 104
66222: PUSH
66223: LD_INT 105
66225: PUSH
66226: LD_INT 106
66228: PUSH
66229: LD_INT 107
66231: PUSH
66232: LD_INT 108
66234: PUSH
66235: LD_INT 109
66237: PUSH
66238: LD_INT 110
66240: PUSH
66241: LD_INT 111
66243: PUSH
66244: LD_INT 112
66246: PUSH
66247: LD_INT 113
66249: PUSH
66250: LD_INT 114
66252: PUSH
66253: LD_INT 116
66255: PUSH
66256: LD_INT 117
66258: PUSH
66259: LD_INT 118
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: ST_TO_ADDR
66285: GO 67524
66287: LD_INT 14
66289: DOUBLE
66290: EQUAL
66291: IFTRUE 66295
66293: GO 66519
66295: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
66296: LD_ADDR_VAR 0 2
66300: PUSH
66301: LD_INT 1
66303: PUSH
66304: LD_INT 2
66306: PUSH
66307: LD_INT 3
66309: PUSH
66310: LD_INT 4
66312: PUSH
66313: LD_INT 5
66315: PUSH
66316: LD_INT 6
66318: PUSH
66319: LD_INT 7
66321: PUSH
66322: LD_INT 8
66324: PUSH
66325: LD_INT 9
66327: PUSH
66328: LD_INT 10
66330: PUSH
66331: LD_INT 11
66333: PUSH
66334: LD_INT 12
66336: PUSH
66337: LD_INT 13
66339: PUSH
66340: LD_INT 14
66342: PUSH
66343: LD_INT 15
66345: PUSH
66346: LD_INT 16
66348: PUSH
66349: LD_INT 17
66351: PUSH
66352: LD_INT 18
66354: PUSH
66355: LD_INT 19
66357: PUSH
66358: LD_INT 20
66360: PUSH
66361: LD_INT 21
66363: PUSH
66364: LD_INT 22
66366: PUSH
66367: LD_INT 23
66369: PUSH
66370: LD_INT 24
66372: PUSH
66373: LD_INT 25
66375: PUSH
66376: LD_INT 26
66378: PUSH
66379: LD_INT 27
66381: PUSH
66382: LD_INT 28
66384: PUSH
66385: LD_INT 29
66387: PUSH
66388: LD_INT 30
66390: PUSH
66391: LD_INT 31
66393: PUSH
66394: LD_INT 32
66396: PUSH
66397: LD_INT 33
66399: PUSH
66400: LD_INT 34
66402: PUSH
66403: LD_INT 36
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: LIST
66410: LIST
66411: LIST
66412: LIST
66413: LIST
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: LIST
66421: LIST
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: LIST
66428: LIST
66429: LIST
66430: LIST
66431: LIST
66432: LIST
66433: LIST
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 101
66445: PUSH
66446: LD_INT 102
66448: PUSH
66449: LD_INT 103
66451: PUSH
66452: LD_INT 104
66454: PUSH
66455: LD_INT 105
66457: PUSH
66458: LD_INT 106
66460: PUSH
66461: LD_INT 107
66463: PUSH
66464: LD_INT 108
66466: PUSH
66467: LD_INT 109
66469: PUSH
66470: LD_INT 110
66472: PUSH
66473: LD_INT 111
66475: PUSH
66476: LD_INT 112
66478: PUSH
66479: LD_INT 113
66481: PUSH
66482: LD_INT 114
66484: PUSH
66485: LD_INT 116
66487: PUSH
66488: LD_INT 117
66490: PUSH
66491: LD_INT 118
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: LIST
66501: LIST
66502: LIST
66503: LIST
66504: LIST
66505: LIST
66506: LIST
66507: LIST
66508: LIST
66509: LIST
66510: LIST
66511: LIST
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: ST_TO_ADDR
66517: GO 67524
66519: LD_INT 15
66521: DOUBLE
66522: EQUAL
66523: IFTRUE 66527
66525: GO 66751
66527: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
66528: LD_ADDR_VAR 0 2
66532: PUSH
66533: LD_INT 1
66535: PUSH
66536: LD_INT 2
66538: PUSH
66539: LD_INT 3
66541: PUSH
66542: LD_INT 4
66544: PUSH
66545: LD_INT 5
66547: PUSH
66548: LD_INT 6
66550: PUSH
66551: LD_INT 7
66553: PUSH
66554: LD_INT 8
66556: PUSH
66557: LD_INT 9
66559: PUSH
66560: LD_INT 10
66562: PUSH
66563: LD_INT 11
66565: PUSH
66566: LD_INT 12
66568: PUSH
66569: LD_INT 13
66571: PUSH
66572: LD_INT 14
66574: PUSH
66575: LD_INT 15
66577: PUSH
66578: LD_INT 16
66580: PUSH
66581: LD_INT 17
66583: PUSH
66584: LD_INT 18
66586: PUSH
66587: LD_INT 19
66589: PUSH
66590: LD_INT 20
66592: PUSH
66593: LD_INT 21
66595: PUSH
66596: LD_INT 22
66598: PUSH
66599: LD_INT 23
66601: PUSH
66602: LD_INT 24
66604: PUSH
66605: LD_INT 25
66607: PUSH
66608: LD_INT 26
66610: PUSH
66611: LD_INT 27
66613: PUSH
66614: LD_INT 28
66616: PUSH
66617: LD_INT 29
66619: PUSH
66620: LD_INT 30
66622: PUSH
66623: LD_INT 31
66625: PUSH
66626: LD_INT 32
66628: PUSH
66629: LD_INT 33
66631: PUSH
66632: LD_INT 34
66634: PUSH
66635: LD_INT 36
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: PUSH
66675: LD_INT 101
66677: PUSH
66678: LD_INT 102
66680: PUSH
66681: LD_INT 103
66683: PUSH
66684: LD_INT 104
66686: PUSH
66687: LD_INT 105
66689: PUSH
66690: LD_INT 106
66692: PUSH
66693: LD_INT 107
66695: PUSH
66696: LD_INT 108
66698: PUSH
66699: LD_INT 109
66701: PUSH
66702: LD_INT 110
66704: PUSH
66705: LD_INT 111
66707: PUSH
66708: LD_INT 112
66710: PUSH
66711: LD_INT 113
66713: PUSH
66714: LD_INT 114
66716: PUSH
66717: LD_INT 116
66719: PUSH
66720: LD_INT 117
66722: PUSH
66723: LD_INT 118
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: ST_TO_ADDR
66749: GO 67524
66751: LD_INT 16
66753: DOUBLE
66754: EQUAL
66755: IFTRUE 66759
66757: GO 66895
66759: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
66760: LD_ADDR_VAR 0 2
66764: PUSH
66765: LD_INT 2
66767: PUSH
66768: LD_INT 4
66770: PUSH
66771: LD_INT 5
66773: PUSH
66774: LD_INT 7
66776: PUSH
66777: LD_INT 11
66779: PUSH
66780: LD_INT 12
66782: PUSH
66783: LD_INT 15
66785: PUSH
66786: LD_INT 16
66788: PUSH
66789: LD_INT 20
66791: PUSH
66792: LD_INT 21
66794: PUSH
66795: LD_INT 22
66797: PUSH
66798: LD_INT 23
66800: PUSH
66801: LD_INT 25
66803: PUSH
66804: LD_INT 26
66806: PUSH
66807: LD_INT 30
66809: PUSH
66810: LD_INT 31
66812: PUSH
66813: LD_INT 32
66815: PUSH
66816: LD_INT 33
66818: PUSH
66819: LD_INT 34
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: PUSH
66843: LD_INT 101
66845: PUSH
66846: LD_INT 102
66848: PUSH
66849: LD_INT 103
66851: PUSH
66852: LD_INT 106
66854: PUSH
66855: LD_INT 108
66857: PUSH
66858: LD_INT 112
66860: PUSH
66861: LD_INT 113
66863: PUSH
66864: LD_INT 114
66866: PUSH
66867: LD_INT 116
66869: PUSH
66870: LD_INT 117
66872: PUSH
66873: LD_INT 118
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: ST_TO_ADDR
66893: GO 67524
66895: LD_INT 17
66897: DOUBLE
66898: EQUAL
66899: IFTRUE 66903
66901: GO 67127
66903: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
66904: LD_ADDR_VAR 0 2
66908: PUSH
66909: LD_INT 1
66911: PUSH
66912: LD_INT 2
66914: PUSH
66915: LD_INT 3
66917: PUSH
66918: LD_INT 4
66920: PUSH
66921: LD_INT 5
66923: PUSH
66924: LD_INT 6
66926: PUSH
66927: LD_INT 7
66929: PUSH
66930: LD_INT 8
66932: PUSH
66933: LD_INT 9
66935: PUSH
66936: LD_INT 10
66938: PUSH
66939: LD_INT 11
66941: PUSH
66942: LD_INT 12
66944: PUSH
66945: LD_INT 13
66947: PUSH
66948: LD_INT 14
66950: PUSH
66951: LD_INT 15
66953: PUSH
66954: LD_INT 16
66956: PUSH
66957: LD_INT 17
66959: PUSH
66960: LD_INT 18
66962: PUSH
66963: LD_INT 19
66965: PUSH
66966: LD_INT 20
66968: PUSH
66969: LD_INT 21
66971: PUSH
66972: LD_INT 22
66974: PUSH
66975: LD_INT 23
66977: PUSH
66978: LD_INT 24
66980: PUSH
66981: LD_INT 25
66983: PUSH
66984: LD_INT 26
66986: PUSH
66987: LD_INT 27
66989: PUSH
66990: LD_INT 28
66992: PUSH
66993: LD_INT 29
66995: PUSH
66996: LD_INT 30
66998: PUSH
66999: LD_INT 31
67001: PUSH
67002: LD_INT 32
67004: PUSH
67005: LD_INT 33
67007: PUSH
67008: LD_INT 34
67010: PUSH
67011: LD_INT 36
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: LIST
67026: LIST
67027: LIST
67028: LIST
67029: LIST
67030: LIST
67031: LIST
67032: LIST
67033: LIST
67034: LIST
67035: LIST
67036: LIST
67037: LIST
67038: LIST
67039: LIST
67040: LIST
67041: LIST
67042: LIST
67043: LIST
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 101
67053: PUSH
67054: LD_INT 102
67056: PUSH
67057: LD_INT 103
67059: PUSH
67060: LD_INT 104
67062: PUSH
67063: LD_INT 105
67065: PUSH
67066: LD_INT 106
67068: PUSH
67069: LD_INT 107
67071: PUSH
67072: LD_INT 108
67074: PUSH
67075: LD_INT 109
67077: PUSH
67078: LD_INT 110
67080: PUSH
67081: LD_INT 111
67083: PUSH
67084: LD_INT 112
67086: PUSH
67087: LD_INT 113
67089: PUSH
67090: LD_INT 114
67092: PUSH
67093: LD_INT 116
67095: PUSH
67096: LD_INT 117
67098: PUSH
67099: LD_INT 118
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: LIST
67114: LIST
67115: LIST
67116: LIST
67117: LIST
67118: LIST
67119: LIST
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: ST_TO_ADDR
67125: GO 67524
67127: LD_INT 18
67129: DOUBLE
67130: EQUAL
67131: IFTRUE 67135
67133: GO 67283
67135: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
67136: LD_ADDR_VAR 0 2
67140: PUSH
67141: LD_INT 2
67143: PUSH
67144: LD_INT 4
67146: PUSH
67147: LD_INT 5
67149: PUSH
67150: LD_INT 7
67152: PUSH
67153: LD_INT 11
67155: PUSH
67156: LD_INT 12
67158: PUSH
67159: LD_INT 15
67161: PUSH
67162: LD_INT 16
67164: PUSH
67165: LD_INT 20
67167: PUSH
67168: LD_INT 21
67170: PUSH
67171: LD_INT 22
67173: PUSH
67174: LD_INT 23
67176: PUSH
67177: LD_INT 25
67179: PUSH
67180: LD_INT 26
67182: PUSH
67183: LD_INT 30
67185: PUSH
67186: LD_INT 31
67188: PUSH
67189: LD_INT 32
67191: PUSH
67192: LD_INT 33
67194: PUSH
67195: LD_INT 34
67197: PUSH
67198: LD_INT 35
67200: PUSH
67201: LD_INT 36
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: LIST
67217: LIST
67218: LIST
67219: LIST
67220: LIST
67221: LIST
67222: LIST
67223: LIST
67224: LIST
67225: LIST
67226: PUSH
67227: LD_INT 101
67229: PUSH
67230: LD_INT 102
67232: PUSH
67233: LD_INT 103
67235: PUSH
67236: LD_INT 106
67238: PUSH
67239: LD_INT 108
67241: PUSH
67242: LD_INT 112
67244: PUSH
67245: LD_INT 113
67247: PUSH
67248: LD_INT 114
67250: PUSH
67251: LD_INT 115
67253: PUSH
67254: LD_INT 116
67256: PUSH
67257: LD_INT 117
67259: PUSH
67260: LD_INT 118
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: ST_TO_ADDR
67281: GO 67524
67283: LD_INT 19
67285: DOUBLE
67286: EQUAL
67287: IFTRUE 67291
67289: GO 67523
67291: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
67292: LD_ADDR_VAR 0 2
67296: PUSH
67297: LD_INT 1
67299: PUSH
67300: LD_INT 2
67302: PUSH
67303: LD_INT 3
67305: PUSH
67306: LD_INT 4
67308: PUSH
67309: LD_INT 5
67311: PUSH
67312: LD_INT 6
67314: PUSH
67315: LD_INT 7
67317: PUSH
67318: LD_INT 8
67320: PUSH
67321: LD_INT 9
67323: PUSH
67324: LD_INT 10
67326: PUSH
67327: LD_INT 11
67329: PUSH
67330: LD_INT 12
67332: PUSH
67333: LD_INT 13
67335: PUSH
67336: LD_INT 14
67338: PUSH
67339: LD_INT 15
67341: PUSH
67342: LD_INT 16
67344: PUSH
67345: LD_INT 17
67347: PUSH
67348: LD_INT 18
67350: PUSH
67351: LD_INT 19
67353: PUSH
67354: LD_INT 20
67356: PUSH
67357: LD_INT 21
67359: PUSH
67360: LD_INT 22
67362: PUSH
67363: LD_INT 23
67365: PUSH
67366: LD_INT 24
67368: PUSH
67369: LD_INT 25
67371: PUSH
67372: LD_INT 26
67374: PUSH
67375: LD_INT 27
67377: PUSH
67378: LD_INT 28
67380: PUSH
67381: LD_INT 29
67383: PUSH
67384: LD_INT 30
67386: PUSH
67387: LD_INT 31
67389: PUSH
67390: LD_INT 32
67392: PUSH
67393: LD_INT 33
67395: PUSH
67396: LD_INT 34
67398: PUSH
67399: LD_INT 35
67401: PUSH
67402: LD_INT 36
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: LIST
67409: LIST
67410: LIST
67411: LIST
67412: LIST
67413: LIST
67414: LIST
67415: LIST
67416: LIST
67417: LIST
67418: LIST
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: LIST
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: LIST
67431: LIST
67432: LIST
67433: LIST
67434: LIST
67435: LIST
67436: LIST
67437: LIST
67438: LIST
67439: LIST
67440: LIST
67441: LIST
67442: PUSH
67443: LD_INT 101
67445: PUSH
67446: LD_INT 102
67448: PUSH
67449: LD_INT 103
67451: PUSH
67452: LD_INT 104
67454: PUSH
67455: LD_INT 105
67457: PUSH
67458: LD_INT 106
67460: PUSH
67461: LD_INT 107
67463: PUSH
67464: LD_INT 108
67466: PUSH
67467: LD_INT 109
67469: PUSH
67470: LD_INT 110
67472: PUSH
67473: LD_INT 111
67475: PUSH
67476: LD_INT 112
67478: PUSH
67479: LD_INT 113
67481: PUSH
67482: LD_INT 114
67484: PUSH
67485: LD_INT 115
67487: PUSH
67488: LD_INT 116
67490: PUSH
67491: LD_INT 117
67493: PUSH
67494: LD_INT 118
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: LIST
67510: LIST
67511: LIST
67512: LIST
67513: LIST
67514: LIST
67515: LIST
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: ST_TO_ADDR
67521: GO 67524
67523: POP
// end else
67524: GO 67755
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
67526: LD_ADDR_VAR 0 2
67530: PUSH
67531: LD_INT 1
67533: PUSH
67534: LD_INT 2
67536: PUSH
67537: LD_INT 3
67539: PUSH
67540: LD_INT 4
67542: PUSH
67543: LD_INT 5
67545: PUSH
67546: LD_INT 6
67548: PUSH
67549: LD_INT 7
67551: PUSH
67552: LD_INT 8
67554: PUSH
67555: LD_INT 9
67557: PUSH
67558: LD_INT 10
67560: PUSH
67561: LD_INT 11
67563: PUSH
67564: LD_INT 12
67566: PUSH
67567: LD_INT 13
67569: PUSH
67570: LD_INT 14
67572: PUSH
67573: LD_INT 15
67575: PUSH
67576: LD_INT 16
67578: PUSH
67579: LD_INT 17
67581: PUSH
67582: LD_INT 18
67584: PUSH
67585: LD_INT 19
67587: PUSH
67588: LD_INT 20
67590: PUSH
67591: LD_INT 21
67593: PUSH
67594: LD_INT 22
67596: PUSH
67597: LD_INT 23
67599: PUSH
67600: LD_INT 24
67602: PUSH
67603: LD_INT 25
67605: PUSH
67606: LD_INT 26
67608: PUSH
67609: LD_INT 27
67611: PUSH
67612: LD_INT 28
67614: PUSH
67615: LD_INT 29
67617: PUSH
67618: LD_INT 30
67620: PUSH
67621: LD_INT 31
67623: PUSH
67624: LD_INT 32
67626: PUSH
67627: LD_INT 33
67629: PUSH
67630: LD_INT 34
67632: PUSH
67633: LD_INT 35
67635: PUSH
67636: LD_INT 36
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: LIST
67643: LIST
67644: LIST
67645: LIST
67646: LIST
67647: LIST
67648: LIST
67649: LIST
67650: LIST
67651: LIST
67652: LIST
67653: LIST
67654: LIST
67655: LIST
67656: LIST
67657: LIST
67658: LIST
67659: LIST
67660: LIST
67661: LIST
67662: LIST
67663: LIST
67664: LIST
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 101
67679: PUSH
67680: LD_INT 102
67682: PUSH
67683: LD_INT 103
67685: PUSH
67686: LD_INT 104
67688: PUSH
67689: LD_INT 105
67691: PUSH
67692: LD_INT 106
67694: PUSH
67695: LD_INT 107
67697: PUSH
67698: LD_INT 108
67700: PUSH
67701: LD_INT 109
67703: PUSH
67704: LD_INT 110
67706: PUSH
67707: LD_INT 111
67709: PUSH
67710: LD_INT 112
67712: PUSH
67713: LD_INT 113
67715: PUSH
67716: LD_INT 114
67718: PUSH
67719: LD_INT 115
67721: PUSH
67722: LD_INT 116
67724: PUSH
67725: LD_INT 117
67727: PUSH
67728: LD_INT 118
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: LIST
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: ST_TO_ADDR
// if result then
67755: LD_VAR 0 2
67759: IFFALSE 68545
// begin normal :=  ;
67761: LD_ADDR_VAR 0 5
67765: PUSH
67766: LD_STRING 
67768: ST_TO_ADDR
// hardcore :=  ;
67769: LD_ADDR_VAR 0 6
67773: PUSH
67774: LD_STRING 
67776: ST_TO_ADDR
// active :=  ;
67777: LD_ADDR_VAR 0 7
67781: PUSH
67782: LD_STRING 
67784: ST_TO_ADDR
// for i = 1 to normalCounter do
67785: LD_ADDR_VAR 0 8
67789: PUSH
67790: DOUBLE
67791: LD_INT 1
67793: DEC
67794: ST_TO_ADDR
67795: LD_EXP 47
67799: PUSH
67800: FOR_TO
67801: IFFALSE 67902
// begin tmp := 0 ;
67803: LD_ADDR_VAR 0 3
67807: PUSH
67808: LD_STRING 0
67810: ST_TO_ADDR
// if result [ 1 ] then
67811: LD_VAR 0 2
67815: PUSH
67816: LD_INT 1
67818: ARRAY
67819: IFFALSE 67884
// if result [ 1 ] [ 1 ] = i then
67821: LD_VAR 0 2
67825: PUSH
67826: LD_INT 1
67828: ARRAY
67829: PUSH
67830: LD_INT 1
67832: ARRAY
67833: PUSH
67834: LD_VAR 0 8
67838: EQUAL
67839: IFFALSE 67884
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
67841: LD_ADDR_VAR 0 2
67845: PUSH
67846: LD_VAR 0 2
67850: PPUSH
67851: LD_INT 1
67853: PPUSH
67854: LD_VAR 0 2
67858: PUSH
67859: LD_INT 1
67861: ARRAY
67862: PPUSH
67863: LD_INT 1
67865: PPUSH
67866: CALL_OW 3
67870: PPUSH
67871: CALL_OW 1
67875: ST_TO_ADDR
// tmp := 1 ;
67876: LD_ADDR_VAR 0 3
67880: PUSH
67881: LD_STRING 1
67883: ST_TO_ADDR
// end ; normal := normal & tmp ;
67884: LD_ADDR_VAR 0 5
67888: PUSH
67889: LD_VAR 0 5
67893: PUSH
67894: LD_VAR 0 3
67898: STR
67899: ST_TO_ADDR
// end ;
67900: GO 67800
67902: POP
67903: POP
// for i = 1 to hardcoreCounter do
67904: LD_ADDR_VAR 0 8
67908: PUSH
67909: DOUBLE
67910: LD_INT 1
67912: DEC
67913: ST_TO_ADDR
67914: LD_EXP 48
67918: PUSH
67919: FOR_TO
67920: IFFALSE 68025
// begin tmp := 0 ;
67922: LD_ADDR_VAR 0 3
67926: PUSH
67927: LD_STRING 0
67929: ST_TO_ADDR
// if result [ 2 ] then
67930: LD_VAR 0 2
67934: PUSH
67935: LD_INT 2
67937: ARRAY
67938: IFFALSE 68007
// if result [ 2 ] [ 1 ] = 100 + i then
67940: LD_VAR 0 2
67944: PUSH
67945: LD_INT 2
67947: ARRAY
67948: PUSH
67949: LD_INT 1
67951: ARRAY
67952: PUSH
67953: LD_INT 100
67955: PUSH
67956: LD_VAR 0 8
67960: PLUS
67961: EQUAL
67962: IFFALSE 68007
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
67964: LD_ADDR_VAR 0 2
67968: PUSH
67969: LD_VAR 0 2
67973: PPUSH
67974: LD_INT 2
67976: PPUSH
67977: LD_VAR 0 2
67981: PUSH
67982: LD_INT 2
67984: ARRAY
67985: PPUSH
67986: LD_INT 1
67988: PPUSH
67989: CALL_OW 3
67993: PPUSH
67994: CALL_OW 1
67998: ST_TO_ADDR
// tmp := 1 ;
67999: LD_ADDR_VAR 0 3
68003: PUSH
68004: LD_STRING 1
68006: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
68007: LD_ADDR_VAR 0 6
68011: PUSH
68012: LD_VAR 0 6
68016: PUSH
68017: LD_VAR 0 3
68021: STR
68022: ST_TO_ADDR
// end ;
68023: GO 67919
68025: POP
68026: POP
// if isGameLoad then
68027: LD_VAR 0 1
68031: IFFALSE 68506
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
68033: LD_ADDR_VAR 0 4
68037: PUSH
68038: LD_EXP 51
68042: PUSH
68043: LD_EXP 50
68047: PUSH
68048: LD_EXP 52
68052: PUSH
68053: LD_EXP 49
68057: PUSH
68058: LD_EXP 53
68062: PUSH
68063: LD_EXP 54
68067: PUSH
68068: LD_EXP 55
68072: PUSH
68073: LD_EXP 56
68077: PUSH
68078: LD_EXP 57
68082: PUSH
68083: LD_EXP 58
68087: PUSH
68088: LD_EXP 59
68092: PUSH
68093: LD_EXP 60
68097: PUSH
68098: LD_EXP 61
68102: PUSH
68103: LD_EXP 62
68107: PUSH
68108: LD_EXP 70
68112: PUSH
68113: LD_EXP 71
68117: PUSH
68118: LD_EXP 72
68122: PUSH
68123: LD_EXP 73
68127: PUSH
68128: LD_EXP 75
68132: PUSH
68133: LD_EXP 76
68137: PUSH
68138: LD_EXP 77
68142: PUSH
68143: LD_EXP 80
68147: PUSH
68148: LD_EXP 82
68152: PUSH
68153: LD_EXP 83
68157: PUSH
68158: LD_EXP 84
68162: PUSH
68163: LD_EXP 86
68167: PUSH
68168: LD_EXP 87
68172: PUSH
68173: LD_EXP 90
68177: PUSH
68178: LD_EXP 91
68182: PUSH
68183: LD_EXP 92
68187: PUSH
68188: LD_EXP 93
68192: PUSH
68193: LD_EXP 94
68197: PUSH
68198: LD_EXP 95
68202: PUSH
68203: LD_EXP 96
68207: PUSH
68208: LD_EXP 97
68212: PUSH
68213: LD_EXP 98
68217: PUSH
68218: LD_EXP 63
68222: PUSH
68223: LD_EXP 64
68227: PUSH
68228: LD_EXP 67
68232: PUSH
68233: LD_EXP 68
68237: PUSH
68238: LD_EXP 69
68242: PUSH
68243: LD_EXP 65
68247: PUSH
68248: LD_EXP 66
68252: PUSH
68253: LD_EXP 74
68257: PUSH
68258: LD_EXP 78
68262: PUSH
68263: LD_EXP 79
68267: PUSH
68268: LD_EXP 81
68272: PUSH
68273: LD_EXP 85
68277: PUSH
68278: LD_EXP 88
68282: PUSH
68283: LD_EXP 89
68287: PUSH
68288: LD_EXP 99
68292: PUSH
68293: LD_EXP 100
68297: PUSH
68298: LD_EXP 101
68302: PUSH
68303: LD_EXP 102
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: LIST
68312: LIST
68313: LIST
68314: LIST
68315: LIST
68316: LIST
68317: LIST
68318: LIST
68319: LIST
68320: LIST
68321: LIST
68322: LIST
68323: LIST
68324: LIST
68325: LIST
68326: LIST
68327: LIST
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: LIST
68344: LIST
68345: LIST
68346: LIST
68347: LIST
68348: LIST
68349: LIST
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: LIST
68360: LIST
68361: LIST
68362: LIST
68363: ST_TO_ADDR
// tmp :=  ;
68364: LD_ADDR_VAR 0 3
68368: PUSH
68369: LD_STRING 
68371: ST_TO_ADDR
// for i = 1 to normalCounter do
68372: LD_ADDR_VAR 0 8
68376: PUSH
68377: DOUBLE
68378: LD_INT 1
68380: DEC
68381: ST_TO_ADDR
68382: LD_EXP 47
68386: PUSH
68387: FOR_TO
68388: IFFALSE 68424
// begin if flags [ i ] then
68390: LD_VAR 0 4
68394: PUSH
68395: LD_VAR 0 8
68399: ARRAY
68400: IFFALSE 68422
// tmp := tmp & i & ; ;
68402: LD_ADDR_VAR 0 3
68406: PUSH
68407: LD_VAR 0 3
68411: PUSH
68412: LD_VAR 0 8
68416: STR
68417: PUSH
68418: LD_STRING ;
68420: STR
68421: ST_TO_ADDR
// end ;
68422: GO 68387
68424: POP
68425: POP
// for i = 1 to hardcoreCounter do
68426: LD_ADDR_VAR 0 8
68430: PUSH
68431: DOUBLE
68432: LD_INT 1
68434: DEC
68435: ST_TO_ADDR
68436: LD_EXP 48
68440: PUSH
68441: FOR_TO
68442: IFFALSE 68488
// begin if flags [ normalCounter + i ] then
68444: LD_VAR 0 4
68448: PUSH
68449: LD_EXP 47
68453: PUSH
68454: LD_VAR 0 8
68458: PLUS
68459: ARRAY
68460: IFFALSE 68486
// tmp := tmp & ( 100 + i ) & ; ;
68462: LD_ADDR_VAR 0 3
68466: PUSH
68467: LD_VAR 0 3
68471: PUSH
68472: LD_INT 100
68474: PUSH
68475: LD_VAR 0 8
68479: PLUS
68480: STR
68481: PUSH
68482: LD_STRING ;
68484: STR
68485: ST_TO_ADDR
// end ;
68486: GO 68441
68488: POP
68489: POP
// if tmp then
68490: LD_VAR 0 3
68494: IFFALSE 68506
// active := tmp ;
68496: LD_ADDR_VAR 0 7
68500: PUSH
68501: LD_VAR 0 3
68505: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
68506: LD_STRING getStreamItemsFromMission("
68508: PUSH
68509: LD_VAR 0 5
68513: STR
68514: PUSH
68515: LD_STRING ","
68517: STR
68518: PUSH
68519: LD_VAR 0 6
68523: STR
68524: PUSH
68525: LD_STRING ","
68527: STR
68528: PUSH
68529: LD_VAR 0 7
68533: STR
68534: PUSH
68535: LD_STRING ")
68537: STR
68538: PPUSH
68539: CALL_OW 559
// end else
68543: GO 68552
// ToLua ( getStreamItemsFromMission("","","") ) ;
68545: LD_STRING getStreamItemsFromMission("","","")
68547: PPUSH
68548: CALL_OW 559
// end ;
68552: LD_VAR 0 2
68556: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
68557: LD_EXP 46
68561: PUSH
68562: LD_EXP 51
68566: AND
68567: IFFALSE 68691
68569: GO 68571
68571: DISABLE
68572: LD_INT 0
68574: PPUSH
68575: PPUSH
// begin enable ;
68576: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
68577: LD_ADDR_VAR 0 2
68581: PUSH
68582: LD_INT 22
68584: PUSH
68585: LD_OWVAR 2
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PUSH
68594: LD_INT 2
68596: PUSH
68597: LD_INT 34
68599: PUSH
68600: LD_INT 7
68602: PUSH
68603: EMPTY
68604: LIST
68605: LIST
68606: PUSH
68607: LD_INT 34
68609: PUSH
68610: LD_INT 45
68612: PUSH
68613: EMPTY
68614: LIST
68615: LIST
68616: PUSH
68617: LD_INT 34
68619: PUSH
68620: LD_INT 28
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: PUSH
68627: LD_INT 34
68629: PUSH
68630: LD_INT 47
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: LIST
68641: LIST
68642: LIST
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PPUSH
68648: CALL_OW 69
68652: ST_TO_ADDR
// if not tmp then
68653: LD_VAR 0 2
68657: NOT
68658: IFFALSE 68662
// exit ;
68660: GO 68691
// for i in tmp do
68662: LD_ADDR_VAR 0 1
68666: PUSH
68667: LD_VAR 0 2
68671: PUSH
68672: FOR_IN
68673: IFFALSE 68689
// begin SetLives ( i , 0 ) ;
68675: LD_VAR 0 1
68679: PPUSH
68680: LD_INT 0
68682: PPUSH
68683: CALL_OW 234
// end ;
68687: GO 68672
68689: POP
68690: POP
// end ;
68691: PPOPN 2
68693: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
68694: LD_EXP 46
68698: PUSH
68699: LD_EXP 52
68703: AND
68704: IFFALSE 68788
68706: GO 68708
68708: DISABLE
68709: LD_INT 0
68711: PPUSH
68712: PPUSH
// begin enable ;
68713: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
68714: LD_ADDR_VAR 0 2
68718: PUSH
68719: LD_INT 22
68721: PUSH
68722: LD_OWVAR 2
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: PUSH
68731: LD_INT 32
68733: PUSH
68734: LD_INT 3
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PPUSH
68745: CALL_OW 69
68749: ST_TO_ADDR
// if not tmp then
68750: LD_VAR 0 2
68754: NOT
68755: IFFALSE 68759
// exit ;
68757: GO 68788
// for i in tmp do
68759: LD_ADDR_VAR 0 1
68763: PUSH
68764: LD_VAR 0 2
68768: PUSH
68769: FOR_IN
68770: IFFALSE 68786
// begin SetLives ( i , 0 ) ;
68772: LD_VAR 0 1
68776: PPUSH
68777: LD_INT 0
68779: PPUSH
68780: CALL_OW 234
// end ;
68784: GO 68769
68786: POP
68787: POP
// end ;
68788: PPOPN 2
68790: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
68791: LD_EXP 46
68795: PUSH
68796: LD_EXP 49
68800: AND
68801: IFFALSE 68894
68803: GO 68805
68805: DISABLE
68806: LD_INT 0
68808: PPUSH
// begin enable ;
68809: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
68810: LD_ADDR_VAR 0 1
68814: PUSH
68815: LD_INT 22
68817: PUSH
68818: LD_OWVAR 2
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: LD_INT 2
68829: PUSH
68830: LD_INT 25
68832: PUSH
68833: LD_INT 5
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: LD_INT 25
68842: PUSH
68843: LD_INT 9
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: LD_INT 25
68852: PUSH
68853: LD_INT 8
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PPUSH
68870: CALL_OW 69
68874: PUSH
68875: FOR_IN
68876: IFFALSE 68892
// begin SetClass ( i , 1 ) ;
68878: LD_VAR 0 1
68882: PPUSH
68883: LD_INT 1
68885: PPUSH
68886: CALL_OW 336
// end ;
68890: GO 68875
68892: POP
68893: POP
// end ;
68894: PPOPN 1
68896: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
68897: LD_EXP 46
68901: PUSH
68902: LD_EXP 50
68906: AND
68907: PUSH
68908: LD_OWVAR 65
68912: PUSH
68913: LD_INT 7
68915: LESS
68916: AND
68917: IFFALSE 68931
68919: GO 68921
68921: DISABLE
// begin enable ;
68922: ENABLE
// game_speed := 7 ;
68923: LD_ADDR_OWVAR 65
68927: PUSH
68928: LD_INT 7
68930: ST_TO_ADDR
// end ;
68931: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
68932: LD_EXP 46
68936: PUSH
68937: LD_EXP 53
68941: AND
68942: IFFALSE 69144
68944: GO 68946
68946: DISABLE
68947: LD_INT 0
68949: PPUSH
68950: PPUSH
68951: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
68952: LD_ADDR_VAR 0 3
68956: PUSH
68957: LD_INT 81
68959: PUSH
68960: LD_OWVAR 2
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: PUSH
68969: LD_INT 21
68971: PUSH
68972: LD_INT 1
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PPUSH
68983: CALL_OW 69
68987: ST_TO_ADDR
// if not tmp then
68988: LD_VAR 0 3
68992: NOT
68993: IFFALSE 68997
// exit ;
68995: GO 69144
// if tmp > 5 then
68997: LD_VAR 0 3
69001: PUSH
69002: LD_INT 5
69004: GREATER
69005: IFFALSE 69017
// k := 5 else
69007: LD_ADDR_VAR 0 2
69011: PUSH
69012: LD_INT 5
69014: ST_TO_ADDR
69015: GO 69027
// k := tmp ;
69017: LD_ADDR_VAR 0 2
69021: PUSH
69022: LD_VAR 0 3
69026: ST_TO_ADDR
// for i := 1 to k do
69027: LD_ADDR_VAR 0 1
69031: PUSH
69032: DOUBLE
69033: LD_INT 1
69035: DEC
69036: ST_TO_ADDR
69037: LD_VAR 0 2
69041: PUSH
69042: FOR_TO
69043: IFFALSE 69142
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
69045: LD_VAR 0 3
69049: PUSH
69050: LD_VAR 0 1
69054: ARRAY
69055: PPUSH
69056: LD_VAR 0 1
69060: PUSH
69061: LD_INT 4
69063: MOD
69064: PUSH
69065: LD_INT 1
69067: PLUS
69068: PPUSH
69069: CALL_OW 259
69073: PUSH
69074: LD_INT 10
69076: LESS
69077: IFFALSE 69140
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
69079: LD_VAR 0 3
69083: PUSH
69084: LD_VAR 0 1
69088: ARRAY
69089: PPUSH
69090: LD_VAR 0 1
69094: PUSH
69095: LD_INT 4
69097: MOD
69098: PUSH
69099: LD_INT 1
69101: PLUS
69102: PPUSH
69103: LD_VAR 0 3
69107: PUSH
69108: LD_VAR 0 1
69112: ARRAY
69113: PPUSH
69114: LD_VAR 0 1
69118: PUSH
69119: LD_INT 4
69121: MOD
69122: PUSH
69123: LD_INT 1
69125: PLUS
69126: PPUSH
69127: CALL_OW 259
69131: PUSH
69132: LD_INT 1
69134: PLUS
69135: PPUSH
69136: CALL_OW 237
69140: GO 69042
69142: POP
69143: POP
// end ;
69144: PPOPN 3
69146: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
69147: LD_EXP 46
69151: PUSH
69152: LD_EXP 54
69156: AND
69157: IFFALSE 69177
69159: GO 69161
69161: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
69162: LD_INT 4
69164: PPUSH
69165: LD_OWVAR 2
69169: PPUSH
69170: LD_INT 0
69172: PPUSH
69173: CALL_OW 324
69177: END
// every 0 0$1 trigger StreamModeActive and sShovel do
69178: LD_EXP 46
69182: PUSH
69183: LD_EXP 83
69187: AND
69188: IFFALSE 69208
69190: GO 69192
69192: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
69193: LD_INT 19
69195: PPUSH
69196: LD_OWVAR 2
69200: PPUSH
69201: LD_INT 0
69203: PPUSH
69204: CALL_OW 324
69208: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
69209: LD_EXP 46
69213: PUSH
69214: LD_EXP 55
69218: AND
69219: IFFALSE 69321
69221: GO 69223
69223: DISABLE
69224: LD_INT 0
69226: PPUSH
69227: PPUSH
// begin enable ;
69228: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
69229: LD_ADDR_VAR 0 2
69233: PUSH
69234: LD_INT 22
69236: PUSH
69237: LD_OWVAR 2
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: PUSH
69246: LD_INT 2
69248: PUSH
69249: LD_INT 34
69251: PUSH
69252: LD_INT 11
69254: PUSH
69255: EMPTY
69256: LIST
69257: LIST
69258: PUSH
69259: LD_INT 34
69261: PUSH
69262: LD_INT 30
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: LIST
69273: PUSH
69274: EMPTY
69275: LIST
69276: LIST
69277: PPUSH
69278: CALL_OW 69
69282: ST_TO_ADDR
// if not tmp then
69283: LD_VAR 0 2
69287: NOT
69288: IFFALSE 69292
// exit ;
69290: GO 69321
// for i in tmp do
69292: LD_ADDR_VAR 0 1
69296: PUSH
69297: LD_VAR 0 2
69301: PUSH
69302: FOR_IN
69303: IFFALSE 69319
// begin SetLives ( i , 0 ) ;
69305: LD_VAR 0 1
69309: PPUSH
69310: LD_INT 0
69312: PPUSH
69313: CALL_OW 234
// end ;
69317: GO 69302
69319: POP
69320: POP
// end ;
69321: PPOPN 2
69323: END
// every 0 0$1 trigger StreamModeActive and sBunker do
69324: LD_EXP 46
69328: PUSH
69329: LD_EXP 56
69333: AND
69334: IFFALSE 69354
69336: GO 69338
69338: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
69339: LD_INT 32
69341: PPUSH
69342: LD_OWVAR 2
69346: PPUSH
69347: LD_INT 0
69349: PPUSH
69350: CALL_OW 324
69354: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
69355: LD_EXP 46
69359: PUSH
69360: LD_EXP 57
69364: AND
69365: IFFALSE 69546
69367: GO 69369
69369: DISABLE
69370: LD_INT 0
69372: PPUSH
69373: PPUSH
69374: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
69375: LD_ADDR_VAR 0 2
69379: PUSH
69380: LD_INT 22
69382: PUSH
69383: LD_OWVAR 2
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: PUSH
69392: LD_INT 33
69394: PUSH
69395: LD_INT 3
69397: PUSH
69398: EMPTY
69399: LIST
69400: LIST
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PPUSH
69406: CALL_OW 69
69410: ST_TO_ADDR
// if not tmp then
69411: LD_VAR 0 2
69415: NOT
69416: IFFALSE 69420
// exit ;
69418: GO 69546
// side := 0 ;
69420: LD_ADDR_VAR 0 3
69424: PUSH
69425: LD_INT 0
69427: ST_TO_ADDR
// for i := 1 to 8 do
69428: LD_ADDR_VAR 0 1
69432: PUSH
69433: DOUBLE
69434: LD_INT 1
69436: DEC
69437: ST_TO_ADDR
69438: LD_INT 8
69440: PUSH
69441: FOR_TO
69442: IFFALSE 69490
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
69444: LD_OWVAR 2
69448: PUSH
69449: LD_VAR 0 1
69453: NONEQUAL
69454: PUSH
69455: LD_OWVAR 2
69459: PPUSH
69460: LD_VAR 0 1
69464: PPUSH
69465: CALL_OW 81
69469: PUSH
69470: LD_INT 2
69472: EQUAL
69473: AND
69474: IFFALSE 69488
// begin side := i ;
69476: LD_ADDR_VAR 0 3
69480: PUSH
69481: LD_VAR 0 1
69485: ST_TO_ADDR
// break ;
69486: GO 69490
// end ;
69488: GO 69441
69490: POP
69491: POP
// if not side then
69492: LD_VAR 0 3
69496: NOT
69497: IFFALSE 69501
// exit ;
69499: GO 69546
// for i := 1 to tmp do
69501: LD_ADDR_VAR 0 1
69505: PUSH
69506: DOUBLE
69507: LD_INT 1
69509: DEC
69510: ST_TO_ADDR
69511: LD_VAR 0 2
69515: PUSH
69516: FOR_TO
69517: IFFALSE 69544
// if Prob ( 60 ) then
69519: LD_INT 60
69521: PPUSH
69522: CALL_OW 13
69526: IFFALSE 69542
// SetSide ( i , side ) ;
69528: LD_VAR 0 1
69532: PPUSH
69533: LD_VAR 0 3
69537: PPUSH
69538: CALL_OW 235
69542: GO 69516
69544: POP
69545: POP
// end ;
69546: PPOPN 3
69548: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
69549: LD_EXP 46
69553: PUSH
69554: LD_EXP 59
69558: AND
69559: IFFALSE 69678
69561: GO 69563
69563: DISABLE
69564: LD_INT 0
69566: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
69567: LD_ADDR_VAR 0 1
69571: PUSH
69572: LD_INT 22
69574: PUSH
69575: LD_OWVAR 2
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 21
69586: PUSH
69587: LD_INT 1
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: LD_INT 3
69596: PUSH
69597: LD_INT 23
69599: PUSH
69600: LD_INT 0
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: PUSH
69607: EMPTY
69608: LIST
69609: LIST
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: LIST
69615: PPUSH
69616: CALL_OW 69
69620: PUSH
69621: FOR_IN
69622: IFFALSE 69676
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
69624: LD_VAR 0 1
69628: PPUSH
69629: CALL_OW 257
69633: PUSH
69634: LD_INT 1
69636: PUSH
69637: LD_INT 2
69639: PUSH
69640: LD_INT 3
69642: PUSH
69643: LD_INT 4
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: LIST
69650: LIST
69651: IN
69652: IFFALSE 69674
// SetClass ( un , rand ( 1 , 4 ) ) ;
69654: LD_VAR 0 1
69658: PPUSH
69659: LD_INT 1
69661: PPUSH
69662: LD_INT 4
69664: PPUSH
69665: CALL_OW 12
69669: PPUSH
69670: CALL_OW 336
69674: GO 69621
69676: POP
69677: POP
// end ;
69678: PPOPN 1
69680: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
69681: LD_EXP 46
69685: PUSH
69686: LD_EXP 58
69690: AND
69691: IFFALSE 69770
69693: GO 69695
69695: DISABLE
69696: LD_INT 0
69698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
69699: LD_ADDR_VAR 0 1
69703: PUSH
69704: LD_INT 22
69706: PUSH
69707: LD_OWVAR 2
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: PUSH
69716: LD_INT 21
69718: PUSH
69719: LD_INT 3
69721: PUSH
69722: EMPTY
69723: LIST
69724: LIST
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PPUSH
69730: CALL_OW 69
69734: ST_TO_ADDR
// if not tmp then
69735: LD_VAR 0 1
69739: NOT
69740: IFFALSE 69744
// exit ;
69742: GO 69770
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
69744: LD_VAR 0 1
69748: PUSH
69749: LD_INT 1
69751: PPUSH
69752: LD_VAR 0 1
69756: PPUSH
69757: CALL_OW 12
69761: ARRAY
69762: PPUSH
69763: LD_INT 100
69765: PPUSH
69766: CALL_OW 234
// end ;
69770: PPOPN 1
69772: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
69773: LD_EXP 46
69777: PUSH
69778: LD_EXP 60
69782: AND
69783: IFFALSE 69881
69785: GO 69787
69787: DISABLE
69788: LD_INT 0
69790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
69791: LD_ADDR_VAR 0 1
69795: PUSH
69796: LD_INT 22
69798: PUSH
69799: LD_OWVAR 2
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: PUSH
69808: LD_INT 21
69810: PUSH
69811: LD_INT 1
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: PUSH
69818: EMPTY
69819: LIST
69820: LIST
69821: PPUSH
69822: CALL_OW 69
69826: ST_TO_ADDR
// if not tmp then
69827: LD_VAR 0 1
69831: NOT
69832: IFFALSE 69836
// exit ;
69834: GO 69881
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
69836: LD_VAR 0 1
69840: PUSH
69841: LD_INT 1
69843: PPUSH
69844: LD_VAR 0 1
69848: PPUSH
69849: CALL_OW 12
69853: ARRAY
69854: PPUSH
69855: LD_INT 1
69857: PPUSH
69858: LD_INT 4
69860: PPUSH
69861: CALL_OW 12
69865: PPUSH
69866: LD_INT 3000
69868: PPUSH
69869: LD_INT 9000
69871: PPUSH
69872: CALL_OW 12
69876: PPUSH
69877: CALL_OW 492
// end ;
69881: PPOPN 1
69883: END
// every 0 0$1 trigger StreamModeActive and sDepot do
69884: LD_EXP 46
69888: PUSH
69889: LD_EXP 61
69893: AND
69894: IFFALSE 69914
69896: GO 69898
69898: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
69899: LD_INT 1
69901: PPUSH
69902: LD_OWVAR 2
69906: PPUSH
69907: LD_INT 0
69909: PPUSH
69910: CALL_OW 324
69914: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
69915: LD_EXP 46
69919: PUSH
69920: LD_EXP 62
69924: AND
69925: IFFALSE 70008
69927: GO 69929
69929: DISABLE
69930: LD_INT 0
69932: PPUSH
69933: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
69934: LD_ADDR_VAR 0 2
69938: PUSH
69939: LD_INT 22
69941: PUSH
69942: LD_OWVAR 2
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PUSH
69951: LD_INT 21
69953: PUSH
69954: LD_INT 3
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: PPUSH
69965: CALL_OW 69
69969: ST_TO_ADDR
// if not tmp then
69970: LD_VAR 0 2
69974: NOT
69975: IFFALSE 69979
// exit ;
69977: GO 70008
// for i in tmp do
69979: LD_ADDR_VAR 0 1
69983: PUSH
69984: LD_VAR 0 2
69988: PUSH
69989: FOR_IN
69990: IFFALSE 70006
// SetBLevel ( i , 10 ) ;
69992: LD_VAR 0 1
69996: PPUSH
69997: LD_INT 10
69999: PPUSH
70000: CALL_OW 241
70004: GO 69989
70006: POP
70007: POP
// end ;
70008: PPOPN 2
70010: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
70011: LD_EXP 46
70015: PUSH
70016: LD_EXP 63
70020: AND
70021: IFFALSE 70132
70023: GO 70025
70025: DISABLE
70026: LD_INT 0
70028: PPUSH
70029: PPUSH
70030: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
70031: LD_ADDR_VAR 0 3
70035: PUSH
70036: LD_INT 22
70038: PUSH
70039: LD_OWVAR 2
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: LD_INT 25
70050: PUSH
70051: LD_INT 1
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: PPUSH
70062: CALL_OW 69
70066: ST_TO_ADDR
// if not tmp then
70067: LD_VAR 0 3
70071: NOT
70072: IFFALSE 70076
// exit ;
70074: GO 70132
// un := tmp [ rand ( 1 , tmp ) ] ;
70076: LD_ADDR_VAR 0 2
70080: PUSH
70081: LD_VAR 0 3
70085: PUSH
70086: LD_INT 1
70088: PPUSH
70089: LD_VAR 0 3
70093: PPUSH
70094: CALL_OW 12
70098: ARRAY
70099: ST_TO_ADDR
// if Crawls ( un ) then
70100: LD_VAR 0 2
70104: PPUSH
70105: CALL_OW 318
70109: IFFALSE 70120
// ComWalk ( un ) ;
70111: LD_VAR 0 2
70115: PPUSH
70116: CALL_OW 138
// SetClass ( un , class_sniper ) ;
70120: LD_VAR 0 2
70124: PPUSH
70125: LD_INT 5
70127: PPUSH
70128: CALL_OW 336
// end ;
70132: PPOPN 3
70134: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
70135: LD_EXP 46
70139: PUSH
70140: LD_EXP 64
70144: AND
70145: PUSH
70146: LD_OWVAR 67
70150: PUSH
70151: LD_INT 4
70153: LESS
70154: AND
70155: IFFALSE 70174
70157: GO 70159
70159: DISABLE
// begin Difficulty := Difficulty + 1 ;
70160: LD_ADDR_OWVAR 67
70164: PUSH
70165: LD_OWVAR 67
70169: PUSH
70170: LD_INT 1
70172: PLUS
70173: ST_TO_ADDR
// end ;
70174: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
70175: LD_EXP 46
70179: PUSH
70180: LD_EXP 65
70184: AND
70185: IFFALSE 70288
70187: GO 70189
70189: DISABLE
70190: LD_INT 0
70192: PPUSH
// begin for i := 1 to 5 do
70193: LD_ADDR_VAR 0 1
70197: PUSH
70198: DOUBLE
70199: LD_INT 1
70201: DEC
70202: ST_TO_ADDR
70203: LD_INT 5
70205: PUSH
70206: FOR_TO
70207: IFFALSE 70286
// begin uc_nation := nation_nature ;
70209: LD_ADDR_OWVAR 21
70213: PUSH
70214: LD_INT 0
70216: ST_TO_ADDR
// uc_side := 0 ;
70217: LD_ADDR_OWVAR 20
70221: PUSH
70222: LD_INT 0
70224: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
70225: LD_ADDR_OWVAR 29
70229: PUSH
70230: LD_INT 12
70232: PUSH
70233: LD_INT 12
70235: PUSH
70236: EMPTY
70237: LIST
70238: LIST
70239: ST_TO_ADDR
// hc_agressivity := 20 ;
70240: LD_ADDR_OWVAR 35
70244: PUSH
70245: LD_INT 20
70247: ST_TO_ADDR
// hc_class := class_tiger ;
70248: LD_ADDR_OWVAR 28
70252: PUSH
70253: LD_INT 14
70255: ST_TO_ADDR
// hc_gallery :=  ;
70256: LD_ADDR_OWVAR 33
70260: PUSH
70261: LD_STRING 
70263: ST_TO_ADDR
// hc_name :=  ;
70264: LD_ADDR_OWVAR 26
70268: PUSH
70269: LD_STRING 
70271: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
70272: CALL_OW 44
70276: PPUSH
70277: LD_INT 0
70279: PPUSH
70280: CALL_OW 51
// end ;
70284: GO 70206
70286: POP
70287: POP
// end ;
70288: PPOPN 1
70290: END
// every 0 0$1 trigger StreamModeActive and sBomb do
70291: LD_EXP 46
70295: PUSH
70296: LD_EXP 66
70300: AND
70301: IFFALSE 70310
70303: GO 70305
70305: DISABLE
// StreamSibBomb ;
70306: CALL 70311 0 0
70310: END
// export function StreamSibBomb ; var i , x , y ; begin
70311: LD_INT 0
70313: PPUSH
70314: PPUSH
70315: PPUSH
70316: PPUSH
// result := false ;
70317: LD_ADDR_VAR 0 1
70321: PUSH
70322: LD_INT 0
70324: ST_TO_ADDR
// for i := 1 to 16 do
70325: LD_ADDR_VAR 0 2
70329: PUSH
70330: DOUBLE
70331: LD_INT 1
70333: DEC
70334: ST_TO_ADDR
70335: LD_INT 16
70337: PUSH
70338: FOR_TO
70339: IFFALSE 70538
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
70341: LD_ADDR_VAR 0 3
70345: PUSH
70346: LD_INT 10
70348: PUSH
70349: LD_INT 20
70351: PUSH
70352: LD_INT 30
70354: PUSH
70355: LD_INT 40
70357: PUSH
70358: LD_INT 50
70360: PUSH
70361: LD_INT 60
70363: PUSH
70364: LD_INT 70
70366: PUSH
70367: LD_INT 80
70369: PUSH
70370: LD_INT 90
70372: PUSH
70373: LD_INT 100
70375: PUSH
70376: LD_INT 110
70378: PUSH
70379: LD_INT 120
70381: PUSH
70382: LD_INT 130
70384: PUSH
70385: LD_INT 140
70387: PUSH
70388: LD_INT 150
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: LIST
70395: LIST
70396: LIST
70397: LIST
70398: LIST
70399: LIST
70400: LIST
70401: LIST
70402: LIST
70403: LIST
70404: LIST
70405: LIST
70406: LIST
70407: PUSH
70408: LD_INT 1
70410: PPUSH
70411: LD_INT 15
70413: PPUSH
70414: CALL_OW 12
70418: ARRAY
70419: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
70420: LD_ADDR_VAR 0 4
70424: PUSH
70425: LD_INT 10
70427: PUSH
70428: LD_INT 20
70430: PUSH
70431: LD_INT 30
70433: PUSH
70434: LD_INT 40
70436: PUSH
70437: LD_INT 50
70439: PUSH
70440: LD_INT 60
70442: PUSH
70443: LD_INT 70
70445: PUSH
70446: LD_INT 80
70448: PUSH
70449: LD_INT 90
70451: PUSH
70452: LD_INT 100
70454: PUSH
70455: LD_INT 110
70457: PUSH
70458: LD_INT 120
70460: PUSH
70461: LD_INT 130
70463: PUSH
70464: LD_INT 140
70466: PUSH
70467: LD_INT 150
70469: PUSH
70470: EMPTY
70471: LIST
70472: LIST
70473: LIST
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: LIST
70482: LIST
70483: LIST
70484: LIST
70485: LIST
70486: PUSH
70487: LD_INT 1
70489: PPUSH
70490: LD_INT 15
70492: PPUSH
70493: CALL_OW 12
70497: ARRAY
70498: ST_TO_ADDR
// if ValidHex ( x , y ) then
70499: LD_VAR 0 3
70503: PPUSH
70504: LD_VAR 0 4
70508: PPUSH
70509: CALL_OW 488
70513: IFFALSE 70536
// begin result := [ x , y ] ;
70515: LD_ADDR_VAR 0 1
70519: PUSH
70520: LD_VAR 0 3
70524: PUSH
70525: LD_VAR 0 4
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: ST_TO_ADDR
// break ;
70534: GO 70538
// end ; end ;
70536: GO 70338
70538: POP
70539: POP
// if result then
70540: LD_VAR 0 1
70544: IFFALSE 70604
// begin ToLua ( playSibBomb() ) ;
70546: LD_STRING playSibBomb()
70548: PPUSH
70549: CALL_OW 559
// wait ( 0 0$14 ) ;
70553: LD_INT 490
70555: PPUSH
70556: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
70560: LD_VAR 0 1
70564: PUSH
70565: LD_INT 1
70567: ARRAY
70568: PPUSH
70569: LD_VAR 0 1
70573: PUSH
70574: LD_INT 2
70576: ARRAY
70577: PPUSH
70578: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
70582: LD_VAR 0 1
70586: PUSH
70587: LD_INT 1
70589: ARRAY
70590: PPUSH
70591: LD_VAR 0 1
70595: PUSH
70596: LD_INT 2
70598: ARRAY
70599: PPUSH
70600: CALL_OW 429
// end ; end ;
70604: LD_VAR 0 1
70608: RET
// every 0 0$1 trigger StreamModeActive and sReset do
70609: LD_EXP 46
70613: PUSH
70614: LD_EXP 68
70618: AND
70619: IFFALSE 70631
70621: GO 70623
70623: DISABLE
// YouLost (  ) ;
70624: LD_STRING 
70626: PPUSH
70627: CALL_OW 104
70631: END
// every 0 0$1 trigger StreamModeActive and sFog do
70632: LD_EXP 46
70636: PUSH
70637: LD_EXP 67
70641: AND
70642: IFFALSE 70656
70644: GO 70646
70646: DISABLE
// FogOff ( your_side ) ;
70647: LD_OWVAR 2
70651: PPUSH
70652: CALL_OW 344
70656: END
// every 0 0$1 trigger StreamModeActive and sSun do
70657: LD_EXP 46
70661: PUSH
70662: LD_EXP 69
70666: AND
70667: IFFALSE 70695
70669: GO 70671
70671: DISABLE
// begin solar_recharge_percent := 0 ;
70672: LD_ADDR_OWVAR 79
70676: PUSH
70677: LD_INT 0
70679: ST_TO_ADDR
// wait ( 5 5$00 ) ;
70680: LD_INT 10500
70682: PPUSH
70683: CALL_OW 67
// solar_recharge_percent := 100 ;
70687: LD_ADDR_OWVAR 79
70691: PUSH
70692: LD_INT 100
70694: ST_TO_ADDR
// end ;
70695: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
70696: LD_EXP 46
70700: PUSH
70701: LD_EXP 70
70705: AND
70706: IFFALSE 70945
70708: GO 70710
70710: DISABLE
70711: LD_INT 0
70713: PPUSH
70714: PPUSH
70715: PPUSH
// begin tmp := [ ] ;
70716: LD_ADDR_VAR 0 3
70720: PUSH
70721: EMPTY
70722: ST_TO_ADDR
// for i := 1 to 6 do
70723: LD_ADDR_VAR 0 1
70727: PUSH
70728: DOUBLE
70729: LD_INT 1
70731: DEC
70732: ST_TO_ADDR
70733: LD_INT 6
70735: PUSH
70736: FOR_TO
70737: IFFALSE 70842
// begin uc_nation := nation_nature ;
70739: LD_ADDR_OWVAR 21
70743: PUSH
70744: LD_INT 0
70746: ST_TO_ADDR
// uc_side := 0 ;
70747: LD_ADDR_OWVAR 20
70751: PUSH
70752: LD_INT 0
70754: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
70755: LD_ADDR_OWVAR 29
70759: PUSH
70760: LD_INT 12
70762: PUSH
70763: LD_INT 12
70765: PUSH
70766: EMPTY
70767: LIST
70768: LIST
70769: ST_TO_ADDR
// hc_agressivity := 20 ;
70770: LD_ADDR_OWVAR 35
70774: PUSH
70775: LD_INT 20
70777: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
70778: LD_ADDR_OWVAR 28
70782: PUSH
70783: LD_INT 17
70785: ST_TO_ADDR
// hc_gallery :=  ;
70786: LD_ADDR_OWVAR 33
70790: PUSH
70791: LD_STRING 
70793: ST_TO_ADDR
// hc_name :=  ;
70794: LD_ADDR_OWVAR 26
70798: PUSH
70799: LD_STRING 
70801: ST_TO_ADDR
// un := CreateHuman ;
70802: LD_ADDR_VAR 0 2
70806: PUSH
70807: CALL_OW 44
70811: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
70812: LD_VAR 0 2
70816: PPUSH
70817: LD_INT 1
70819: PPUSH
70820: CALL_OW 51
// tmp := tmp ^ un ;
70824: LD_ADDR_VAR 0 3
70828: PUSH
70829: LD_VAR 0 3
70833: PUSH
70834: LD_VAR 0 2
70838: ADD
70839: ST_TO_ADDR
// end ;
70840: GO 70736
70842: POP
70843: POP
// repeat wait ( 0 0$1 ) ;
70844: LD_INT 35
70846: PPUSH
70847: CALL_OW 67
// for un in tmp do
70851: LD_ADDR_VAR 0 2
70855: PUSH
70856: LD_VAR 0 3
70860: PUSH
70861: FOR_IN
70862: IFFALSE 70936
// begin if IsDead ( un ) then
70864: LD_VAR 0 2
70868: PPUSH
70869: CALL_OW 301
70873: IFFALSE 70893
// begin tmp := tmp diff un ;
70875: LD_ADDR_VAR 0 3
70879: PUSH
70880: LD_VAR 0 3
70884: PUSH
70885: LD_VAR 0 2
70889: DIFF
70890: ST_TO_ADDR
// continue ;
70891: GO 70861
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
70893: LD_VAR 0 2
70897: PPUSH
70898: LD_INT 3
70900: PUSH
70901: LD_INT 22
70903: PUSH
70904: LD_INT 0
70906: PUSH
70907: EMPTY
70908: LIST
70909: LIST
70910: PUSH
70911: EMPTY
70912: LIST
70913: LIST
70914: PPUSH
70915: CALL_OW 69
70919: PPUSH
70920: LD_VAR 0 2
70924: PPUSH
70925: CALL_OW 74
70929: PPUSH
70930: CALL_OW 115
// end ;
70934: GO 70861
70936: POP
70937: POP
// until not tmp ;
70938: LD_VAR 0 3
70942: NOT
70943: IFFALSE 70844
// end ;
70945: PPOPN 3
70947: END
// every 0 0$1 trigger StreamModeActive and sTroll do
70948: LD_EXP 46
70952: PUSH
70953: LD_EXP 71
70957: AND
70958: IFFALSE 71012
70960: GO 70962
70962: DISABLE
// begin ToLua ( displayTroll(); ) ;
70963: LD_STRING displayTroll();
70965: PPUSH
70966: CALL_OW 559
// wait ( 3 3$00 ) ;
70970: LD_INT 6300
70972: PPUSH
70973: CALL_OW 67
// ToLua ( hideTroll(); ) ;
70977: LD_STRING hideTroll();
70979: PPUSH
70980: CALL_OW 559
// wait ( 1 1$00 ) ;
70984: LD_INT 2100
70986: PPUSH
70987: CALL_OW 67
// ToLua ( displayTroll(); ) ;
70991: LD_STRING displayTroll();
70993: PPUSH
70994: CALL_OW 559
// wait ( 1 1$00 ) ;
70998: LD_INT 2100
71000: PPUSH
71001: CALL_OW 67
// ToLua ( hideTroll(); ) ;
71005: LD_STRING hideTroll();
71007: PPUSH
71008: CALL_OW 559
// end ;
71012: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
71013: LD_EXP 46
71017: PUSH
71018: LD_EXP 72
71022: AND
71023: IFFALSE 71086
71025: GO 71027
71027: DISABLE
71028: LD_INT 0
71030: PPUSH
// begin p := 0 ;
71031: LD_ADDR_VAR 0 1
71035: PUSH
71036: LD_INT 0
71038: ST_TO_ADDR
// repeat game_speed := 1 ;
71039: LD_ADDR_OWVAR 65
71043: PUSH
71044: LD_INT 1
71046: ST_TO_ADDR
// wait ( 0 0$1 ) ;
71047: LD_INT 35
71049: PPUSH
71050: CALL_OW 67
// p := p + 1 ;
71054: LD_ADDR_VAR 0 1
71058: PUSH
71059: LD_VAR 0 1
71063: PUSH
71064: LD_INT 1
71066: PLUS
71067: ST_TO_ADDR
// until p >= 60 ;
71068: LD_VAR 0 1
71072: PUSH
71073: LD_INT 60
71075: GREATEREQUAL
71076: IFFALSE 71039
// game_speed := 4 ;
71078: LD_ADDR_OWVAR 65
71082: PUSH
71083: LD_INT 4
71085: ST_TO_ADDR
// end ;
71086: PPOPN 1
71088: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
71089: LD_EXP 46
71093: PUSH
71094: LD_EXP 73
71098: AND
71099: IFFALSE 71245
71101: GO 71103
71103: DISABLE
71104: LD_INT 0
71106: PPUSH
71107: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71108: LD_ADDR_VAR 0 1
71112: PUSH
71113: LD_INT 22
71115: PUSH
71116: LD_OWVAR 2
71120: PUSH
71121: EMPTY
71122: LIST
71123: LIST
71124: PUSH
71125: LD_INT 2
71127: PUSH
71128: LD_INT 30
71130: PUSH
71131: LD_INT 0
71133: PUSH
71134: EMPTY
71135: LIST
71136: LIST
71137: PUSH
71138: LD_INT 30
71140: PUSH
71141: LD_INT 1
71143: PUSH
71144: EMPTY
71145: LIST
71146: LIST
71147: PUSH
71148: EMPTY
71149: LIST
71150: LIST
71151: LIST
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: PPUSH
71157: CALL_OW 69
71161: ST_TO_ADDR
// if not depot then
71162: LD_VAR 0 1
71166: NOT
71167: IFFALSE 71171
// exit ;
71169: GO 71245
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
71171: LD_ADDR_VAR 0 2
71175: PUSH
71176: LD_VAR 0 1
71180: PUSH
71181: LD_INT 1
71183: PPUSH
71184: LD_VAR 0 1
71188: PPUSH
71189: CALL_OW 12
71193: ARRAY
71194: PPUSH
71195: CALL_OW 274
71199: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
71200: LD_VAR 0 2
71204: PPUSH
71205: LD_INT 1
71207: PPUSH
71208: LD_INT 0
71210: PPUSH
71211: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
71215: LD_VAR 0 2
71219: PPUSH
71220: LD_INT 2
71222: PPUSH
71223: LD_INT 0
71225: PPUSH
71226: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
71230: LD_VAR 0 2
71234: PPUSH
71235: LD_INT 3
71237: PPUSH
71238: LD_INT 0
71240: PPUSH
71241: CALL_OW 277
// end ;
71245: PPOPN 2
71247: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
71248: LD_EXP 46
71252: PUSH
71253: LD_EXP 74
71257: AND
71258: IFFALSE 71355
71260: GO 71262
71262: DISABLE
71263: LD_INT 0
71265: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
71266: LD_ADDR_VAR 0 1
71270: PUSH
71271: LD_INT 22
71273: PUSH
71274: LD_OWVAR 2
71278: PUSH
71279: EMPTY
71280: LIST
71281: LIST
71282: PUSH
71283: LD_INT 21
71285: PUSH
71286: LD_INT 1
71288: PUSH
71289: EMPTY
71290: LIST
71291: LIST
71292: PUSH
71293: LD_INT 3
71295: PUSH
71296: LD_INT 23
71298: PUSH
71299: LD_INT 0
71301: PUSH
71302: EMPTY
71303: LIST
71304: LIST
71305: PUSH
71306: EMPTY
71307: LIST
71308: LIST
71309: PUSH
71310: EMPTY
71311: LIST
71312: LIST
71313: LIST
71314: PPUSH
71315: CALL_OW 69
71319: ST_TO_ADDR
// if not tmp then
71320: LD_VAR 0 1
71324: NOT
71325: IFFALSE 71329
// exit ;
71327: GO 71355
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
71329: LD_VAR 0 1
71333: PUSH
71334: LD_INT 1
71336: PPUSH
71337: LD_VAR 0 1
71341: PPUSH
71342: CALL_OW 12
71346: ARRAY
71347: PPUSH
71348: LD_INT 200
71350: PPUSH
71351: CALL_OW 234
// end ;
71355: PPOPN 1
71357: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
71358: LD_EXP 46
71362: PUSH
71363: LD_EXP 75
71367: AND
71368: IFFALSE 71447
71370: GO 71372
71372: DISABLE
71373: LD_INT 0
71375: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
71376: LD_ADDR_VAR 0 1
71380: PUSH
71381: LD_INT 22
71383: PUSH
71384: LD_OWVAR 2
71388: PUSH
71389: EMPTY
71390: LIST
71391: LIST
71392: PUSH
71393: LD_INT 21
71395: PUSH
71396: LD_INT 2
71398: PUSH
71399: EMPTY
71400: LIST
71401: LIST
71402: PUSH
71403: EMPTY
71404: LIST
71405: LIST
71406: PPUSH
71407: CALL_OW 69
71411: ST_TO_ADDR
// if not tmp then
71412: LD_VAR 0 1
71416: NOT
71417: IFFALSE 71421
// exit ;
71419: GO 71447
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
71421: LD_VAR 0 1
71425: PUSH
71426: LD_INT 1
71428: PPUSH
71429: LD_VAR 0 1
71433: PPUSH
71434: CALL_OW 12
71438: ARRAY
71439: PPUSH
71440: LD_INT 60
71442: PPUSH
71443: CALL_OW 234
// end ;
71447: PPOPN 1
71449: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
71450: LD_EXP 46
71454: PUSH
71455: LD_EXP 76
71459: AND
71460: IFFALSE 71559
71462: GO 71464
71464: DISABLE
71465: LD_INT 0
71467: PPUSH
71468: PPUSH
// begin enable ;
71469: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
71470: LD_ADDR_VAR 0 1
71474: PUSH
71475: LD_INT 22
71477: PUSH
71478: LD_OWVAR 2
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: PUSH
71487: LD_INT 61
71489: PUSH
71490: EMPTY
71491: LIST
71492: PUSH
71493: LD_INT 33
71495: PUSH
71496: LD_INT 2
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: LIST
71507: PPUSH
71508: CALL_OW 69
71512: ST_TO_ADDR
// if not tmp then
71513: LD_VAR 0 1
71517: NOT
71518: IFFALSE 71522
// exit ;
71520: GO 71559
// for i in tmp do
71522: LD_ADDR_VAR 0 2
71526: PUSH
71527: LD_VAR 0 1
71531: PUSH
71532: FOR_IN
71533: IFFALSE 71557
// if IsControledBy ( i ) then
71535: LD_VAR 0 2
71539: PPUSH
71540: CALL_OW 312
71544: IFFALSE 71555
// ComUnlink ( i ) ;
71546: LD_VAR 0 2
71550: PPUSH
71551: CALL_OW 136
71555: GO 71532
71557: POP
71558: POP
// end ;
71559: PPOPN 2
71561: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
71562: LD_EXP 46
71566: PUSH
71567: LD_EXP 77
71571: AND
71572: IFFALSE 71712
71574: GO 71576
71576: DISABLE
71577: LD_INT 0
71579: PPUSH
71580: PPUSH
// begin ToLua ( displayPowell(); ) ;
71581: LD_STRING displayPowell();
71583: PPUSH
71584: CALL_OW 559
// uc_side := 0 ;
71588: LD_ADDR_OWVAR 20
71592: PUSH
71593: LD_INT 0
71595: ST_TO_ADDR
// uc_nation := 2 ;
71596: LD_ADDR_OWVAR 21
71600: PUSH
71601: LD_INT 2
71603: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
71604: LD_ADDR_OWVAR 37
71608: PUSH
71609: LD_INT 14
71611: ST_TO_ADDR
// vc_engine := engine_siberite ;
71612: LD_ADDR_OWVAR 39
71616: PUSH
71617: LD_INT 3
71619: ST_TO_ADDR
// vc_control := control_apeman ;
71620: LD_ADDR_OWVAR 38
71624: PUSH
71625: LD_INT 5
71627: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
71628: LD_ADDR_OWVAR 40
71632: PUSH
71633: LD_INT 29
71635: ST_TO_ADDR
// un := CreateVehicle ;
71636: LD_ADDR_VAR 0 2
71640: PUSH
71641: CALL_OW 45
71645: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71646: LD_VAR 0 2
71650: PPUSH
71651: LD_INT 1
71653: PPUSH
71654: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
71658: LD_INT 35
71660: PPUSH
71661: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
71665: LD_VAR 0 2
71669: PPUSH
71670: LD_INT 22
71672: PUSH
71673: LD_OWVAR 2
71677: PUSH
71678: EMPTY
71679: LIST
71680: LIST
71681: PPUSH
71682: CALL_OW 69
71686: PPUSH
71687: LD_VAR 0 2
71691: PPUSH
71692: CALL_OW 74
71696: PPUSH
71697: CALL_OW 115
// until IsDead ( un ) ;
71701: LD_VAR 0 2
71705: PPUSH
71706: CALL_OW 301
71710: IFFALSE 71658
// end ;
71712: PPOPN 2
71714: END
// every 0 0$1 trigger StreamModeActive and sStu do
71715: LD_EXP 46
71719: PUSH
71720: LD_EXP 85
71724: AND
71725: IFFALSE 71741
71727: GO 71729
71729: DISABLE
// begin ToLua ( displayStucuk(); ) ;
71730: LD_STRING displayStucuk();
71732: PPUSH
71733: CALL_OW 559
// ResetFog ;
71737: CALL_OW 335
// end ;
71741: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
71742: LD_EXP 46
71746: PUSH
71747: LD_EXP 78
71751: AND
71752: IFFALSE 71893
71754: GO 71756
71756: DISABLE
71757: LD_INT 0
71759: PPUSH
71760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
71761: LD_ADDR_VAR 0 2
71765: PUSH
71766: LD_INT 22
71768: PUSH
71769: LD_OWVAR 2
71773: PUSH
71774: EMPTY
71775: LIST
71776: LIST
71777: PUSH
71778: LD_INT 21
71780: PUSH
71781: LD_INT 1
71783: PUSH
71784: EMPTY
71785: LIST
71786: LIST
71787: PUSH
71788: EMPTY
71789: LIST
71790: LIST
71791: PPUSH
71792: CALL_OW 69
71796: ST_TO_ADDR
// if not tmp then
71797: LD_VAR 0 2
71801: NOT
71802: IFFALSE 71806
// exit ;
71804: GO 71893
// un := tmp [ rand ( 1 , tmp ) ] ;
71806: LD_ADDR_VAR 0 1
71810: PUSH
71811: LD_VAR 0 2
71815: PUSH
71816: LD_INT 1
71818: PPUSH
71819: LD_VAR 0 2
71823: PPUSH
71824: CALL_OW 12
71828: ARRAY
71829: ST_TO_ADDR
// SetSide ( un , 0 ) ;
71830: LD_VAR 0 1
71834: PPUSH
71835: LD_INT 0
71837: PPUSH
71838: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
71842: LD_VAR 0 1
71846: PPUSH
71847: LD_OWVAR 3
71851: PUSH
71852: LD_VAR 0 1
71856: DIFF
71857: PPUSH
71858: LD_VAR 0 1
71862: PPUSH
71863: CALL_OW 74
71867: PPUSH
71868: CALL_OW 115
// wait ( 0 0$20 ) ;
71872: LD_INT 700
71874: PPUSH
71875: CALL_OW 67
// SetSide ( un , your_side ) ;
71879: LD_VAR 0 1
71883: PPUSH
71884: LD_OWVAR 2
71888: PPUSH
71889: CALL_OW 235
// end ;
71893: PPOPN 2
71895: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
71896: LD_EXP 46
71900: PUSH
71901: LD_EXP 79
71905: AND
71906: IFFALSE 72012
71908: GO 71910
71910: DISABLE
71911: LD_INT 0
71913: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71914: LD_ADDR_VAR 0 1
71918: PUSH
71919: LD_INT 22
71921: PUSH
71922: LD_OWVAR 2
71926: PUSH
71927: EMPTY
71928: LIST
71929: LIST
71930: PUSH
71931: LD_INT 2
71933: PUSH
71934: LD_INT 30
71936: PUSH
71937: LD_INT 0
71939: PUSH
71940: EMPTY
71941: LIST
71942: LIST
71943: PUSH
71944: LD_INT 30
71946: PUSH
71947: LD_INT 1
71949: PUSH
71950: EMPTY
71951: LIST
71952: LIST
71953: PUSH
71954: EMPTY
71955: LIST
71956: LIST
71957: LIST
71958: PUSH
71959: EMPTY
71960: LIST
71961: LIST
71962: PPUSH
71963: CALL_OW 69
71967: ST_TO_ADDR
// if not depot then
71968: LD_VAR 0 1
71972: NOT
71973: IFFALSE 71977
// exit ;
71975: GO 72012
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
71977: LD_VAR 0 1
71981: PUSH
71982: LD_INT 1
71984: ARRAY
71985: PPUSH
71986: CALL_OW 250
71990: PPUSH
71991: LD_VAR 0 1
71995: PUSH
71996: LD_INT 1
71998: ARRAY
71999: PPUSH
72000: CALL_OW 251
72004: PPUSH
72005: LD_INT 70
72007: PPUSH
72008: CALL_OW 495
// end ;
72012: PPOPN 1
72014: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
72015: LD_EXP 46
72019: PUSH
72020: LD_EXP 80
72024: AND
72025: IFFALSE 72236
72027: GO 72029
72029: DISABLE
72030: LD_INT 0
72032: PPUSH
72033: PPUSH
72034: PPUSH
72035: PPUSH
72036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
72037: LD_ADDR_VAR 0 5
72041: PUSH
72042: LD_INT 22
72044: PUSH
72045: LD_OWVAR 2
72049: PUSH
72050: EMPTY
72051: LIST
72052: LIST
72053: PUSH
72054: LD_INT 21
72056: PUSH
72057: LD_INT 1
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: PUSH
72064: EMPTY
72065: LIST
72066: LIST
72067: PPUSH
72068: CALL_OW 69
72072: ST_TO_ADDR
// if not tmp then
72073: LD_VAR 0 5
72077: NOT
72078: IFFALSE 72082
// exit ;
72080: GO 72236
// for i in tmp do
72082: LD_ADDR_VAR 0 1
72086: PUSH
72087: LD_VAR 0 5
72091: PUSH
72092: FOR_IN
72093: IFFALSE 72234
// begin d := rand ( 0 , 5 ) ;
72095: LD_ADDR_VAR 0 4
72099: PUSH
72100: LD_INT 0
72102: PPUSH
72103: LD_INT 5
72105: PPUSH
72106: CALL_OW 12
72110: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
72111: LD_ADDR_VAR 0 2
72115: PUSH
72116: LD_VAR 0 1
72120: PPUSH
72121: CALL_OW 250
72125: PPUSH
72126: LD_VAR 0 4
72130: PPUSH
72131: LD_INT 3
72133: PPUSH
72134: LD_INT 12
72136: PPUSH
72137: CALL_OW 12
72141: PPUSH
72142: CALL_OW 272
72146: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
72147: LD_ADDR_VAR 0 3
72151: PUSH
72152: LD_VAR 0 1
72156: PPUSH
72157: CALL_OW 251
72161: PPUSH
72162: LD_VAR 0 4
72166: PPUSH
72167: LD_INT 3
72169: PPUSH
72170: LD_INT 12
72172: PPUSH
72173: CALL_OW 12
72177: PPUSH
72178: CALL_OW 273
72182: ST_TO_ADDR
// if ValidHex ( x , y ) then
72183: LD_VAR 0 2
72187: PPUSH
72188: LD_VAR 0 3
72192: PPUSH
72193: CALL_OW 488
72197: IFFALSE 72232
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
72199: LD_VAR 0 1
72203: PPUSH
72204: LD_VAR 0 2
72208: PPUSH
72209: LD_VAR 0 3
72213: PPUSH
72214: LD_INT 3
72216: PPUSH
72217: LD_INT 6
72219: PPUSH
72220: CALL_OW 12
72224: PPUSH
72225: LD_INT 1
72227: PPUSH
72228: CALL_OW 483
// end ;
72232: GO 72092
72234: POP
72235: POP
// end ;
72236: PPOPN 5
72238: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
72239: LD_EXP 46
72243: PUSH
72244: LD_EXP 81
72248: AND
72249: IFFALSE 72343
72251: GO 72253
72253: DISABLE
72254: LD_INT 0
72256: PPUSH
72257: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
72258: LD_ADDR_VAR 0 2
72262: PUSH
72263: LD_INT 22
72265: PUSH
72266: LD_OWVAR 2
72270: PUSH
72271: EMPTY
72272: LIST
72273: LIST
72274: PUSH
72275: LD_INT 32
72277: PUSH
72278: LD_INT 1
72280: PUSH
72281: EMPTY
72282: LIST
72283: LIST
72284: PUSH
72285: LD_INT 21
72287: PUSH
72288: LD_INT 2
72290: PUSH
72291: EMPTY
72292: LIST
72293: LIST
72294: PUSH
72295: EMPTY
72296: LIST
72297: LIST
72298: LIST
72299: PPUSH
72300: CALL_OW 69
72304: ST_TO_ADDR
// if not tmp then
72305: LD_VAR 0 2
72309: NOT
72310: IFFALSE 72314
// exit ;
72312: GO 72343
// for i in tmp do
72314: LD_ADDR_VAR 0 1
72318: PUSH
72319: LD_VAR 0 2
72323: PUSH
72324: FOR_IN
72325: IFFALSE 72341
// SetFuel ( i , 0 ) ;
72327: LD_VAR 0 1
72331: PPUSH
72332: LD_INT 0
72334: PPUSH
72335: CALL_OW 240
72339: GO 72324
72341: POP
72342: POP
// end ;
72343: PPOPN 2
72345: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
72346: LD_EXP 46
72350: PUSH
72351: LD_EXP 82
72355: AND
72356: IFFALSE 72422
72358: GO 72360
72360: DISABLE
72361: LD_INT 0
72363: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
72364: LD_ADDR_VAR 0 1
72368: PUSH
72369: LD_INT 22
72371: PUSH
72372: LD_OWVAR 2
72376: PUSH
72377: EMPTY
72378: LIST
72379: LIST
72380: PUSH
72381: LD_INT 30
72383: PUSH
72384: LD_INT 29
72386: PUSH
72387: EMPTY
72388: LIST
72389: LIST
72390: PUSH
72391: EMPTY
72392: LIST
72393: LIST
72394: PPUSH
72395: CALL_OW 69
72399: ST_TO_ADDR
// if not tmp then
72400: LD_VAR 0 1
72404: NOT
72405: IFFALSE 72409
// exit ;
72407: GO 72422
// DestroyUnit ( tmp [ 1 ] ) ;
72409: LD_VAR 0 1
72413: PUSH
72414: LD_INT 1
72416: ARRAY
72417: PPUSH
72418: CALL_OW 65
// end ;
72422: PPOPN 1
72424: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
72425: LD_EXP 46
72429: PUSH
72430: LD_EXP 84
72434: AND
72435: IFFALSE 72564
72437: GO 72439
72439: DISABLE
72440: LD_INT 0
72442: PPUSH
// begin uc_side := 0 ;
72443: LD_ADDR_OWVAR 20
72447: PUSH
72448: LD_INT 0
72450: ST_TO_ADDR
// uc_nation := nation_arabian ;
72451: LD_ADDR_OWVAR 21
72455: PUSH
72456: LD_INT 2
72458: ST_TO_ADDR
// hc_gallery :=  ;
72459: LD_ADDR_OWVAR 33
72463: PUSH
72464: LD_STRING 
72466: ST_TO_ADDR
// hc_name :=  ;
72467: LD_ADDR_OWVAR 26
72471: PUSH
72472: LD_STRING 
72474: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
72475: LD_INT 1
72477: PPUSH
72478: LD_INT 11
72480: PPUSH
72481: LD_INT 10
72483: PPUSH
72484: CALL_OW 380
// un := CreateHuman ;
72488: LD_ADDR_VAR 0 1
72492: PUSH
72493: CALL_OW 44
72497: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
72498: LD_VAR 0 1
72502: PPUSH
72503: LD_INT 1
72505: PPUSH
72506: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
72510: LD_INT 35
72512: PPUSH
72513: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
72517: LD_VAR 0 1
72521: PPUSH
72522: LD_INT 22
72524: PUSH
72525: LD_OWVAR 2
72529: PUSH
72530: EMPTY
72531: LIST
72532: LIST
72533: PPUSH
72534: CALL_OW 69
72538: PPUSH
72539: LD_VAR 0 1
72543: PPUSH
72544: CALL_OW 74
72548: PPUSH
72549: CALL_OW 115
// until IsDead ( un ) ;
72553: LD_VAR 0 1
72557: PPUSH
72558: CALL_OW 301
72562: IFFALSE 72510
// end ;
72564: PPOPN 1
72566: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
72567: LD_EXP 46
72571: PUSH
72572: LD_EXP 86
72576: AND
72577: IFFALSE 72589
72579: GO 72581
72581: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
72582: LD_STRING earthquake(getX(game), 0, 32)
72584: PPUSH
72585: CALL_OW 559
72589: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
72590: LD_EXP 46
72594: PUSH
72595: LD_EXP 87
72599: AND
72600: IFFALSE 72691
72602: GO 72604
72604: DISABLE
72605: LD_INT 0
72607: PPUSH
// begin enable ;
72608: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
72609: LD_ADDR_VAR 0 1
72613: PUSH
72614: LD_INT 22
72616: PUSH
72617: LD_OWVAR 2
72621: PUSH
72622: EMPTY
72623: LIST
72624: LIST
72625: PUSH
72626: LD_INT 21
72628: PUSH
72629: LD_INT 2
72631: PUSH
72632: EMPTY
72633: LIST
72634: LIST
72635: PUSH
72636: LD_INT 33
72638: PUSH
72639: LD_INT 3
72641: PUSH
72642: EMPTY
72643: LIST
72644: LIST
72645: PUSH
72646: EMPTY
72647: LIST
72648: LIST
72649: LIST
72650: PPUSH
72651: CALL_OW 69
72655: ST_TO_ADDR
// if not tmp then
72656: LD_VAR 0 1
72660: NOT
72661: IFFALSE 72665
// exit ;
72663: GO 72691
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
72665: LD_VAR 0 1
72669: PUSH
72670: LD_INT 1
72672: PPUSH
72673: LD_VAR 0 1
72677: PPUSH
72678: CALL_OW 12
72682: ARRAY
72683: PPUSH
72684: LD_INT 1
72686: PPUSH
72687: CALL_OW 234
// end ;
72691: PPOPN 1
72693: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
72694: LD_EXP 46
72698: PUSH
72699: LD_EXP 88
72703: AND
72704: IFFALSE 72845
72706: GO 72708
72708: DISABLE
72709: LD_INT 0
72711: PPUSH
72712: PPUSH
72713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72714: LD_ADDR_VAR 0 3
72718: PUSH
72719: LD_INT 22
72721: PUSH
72722: LD_OWVAR 2
72726: PUSH
72727: EMPTY
72728: LIST
72729: LIST
72730: PUSH
72731: LD_INT 25
72733: PUSH
72734: LD_INT 1
72736: PUSH
72737: EMPTY
72738: LIST
72739: LIST
72740: PUSH
72741: EMPTY
72742: LIST
72743: LIST
72744: PPUSH
72745: CALL_OW 69
72749: ST_TO_ADDR
// if not tmp then
72750: LD_VAR 0 3
72754: NOT
72755: IFFALSE 72759
// exit ;
72757: GO 72845
// un := tmp [ rand ( 1 , tmp ) ] ;
72759: LD_ADDR_VAR 0 2
72763: PUSH
72764: LD_VAR 0 3
72768: PUSH
72769: LD_INT 1
72771: PPUSH
72772: LD_VAR 0 3
72776: PPUSH
72777: CALL_OW 12
72781: ARRAY
72782: ST_TO_ADDR
// if Crawls ( un ) then
72783: LD_VAR 0 2
72787: PPUSH
72788: CALL_OW 318
72792: IFFALSE 72803
// ComWalk ( un ) ;
72794: LD_VAR 0 2
72798: PPUSH
72799: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
72803: LD_VAR 0 2
72807: PPUSH
72808: LD_INT 9
72810: PPUSH
72811: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
72815: LD_INT 28
72817: PPUSH
72818: LD_OWVAR 2
72822: PPUSH
72823: LD_INT 2
72825: PPUSH
72826: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
72830: LD_INT 29
72832: PPUSH
72833: LD_OWVAR 2
72837: PPUSH
72838: LD_INT 2
72840: PPUSH
72841: CALL_OW 322
// end ;
72845: PPOPN 3
72847: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
72848: LD_EXP 46
72852: PUSH
72853: LD_EXP 89
72857: AND
72858: IFFALSE 72969
72860: GO 72862
72862: DISABLE
72863: LD_INT 0
72865: PPUSH
72866: PPUSH
72867: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72868: LD_ADDR_VAR 0 3
72872: PUSH
72873: LD_INT 22
72875: PUSH
72876: LD_OWVAR 2
72880: PUSH
72881: EMPTY
72882: LIST
72883: LIST
72884: PUSH
72885: LD_INT 25
72887: PUSH
72888: LD_INT 1
72890: PUSH
72891: EMPTY
72892: LIST
72893: LIST
72894: PUSH
72895: EMPTY
72896: LIST
72897: LIST
72898: PPUSH
72899: CALL_OW 69
72903: ST_TO_ADDR
// if not tmp then
72904: LD_VAR 0 3
72908: NOT
72909: IFFALSE 72913
// exit ;
72911: GO 72969
// un := tmp [ rand ( 1 , tmp ) ] ;
72913: LD_ADDR_VAR 0 2
72917: PUSH
72918: LD_VAR 0 3
72922: PUSH
72923: LD_INT 1
72925: PPUSH
72926: LD_VAR 0 3
72930: PPUSH
72931: CALL_OW 12
72935: ARRAY
72936: ST_TO_ADDR
// if Crawls ( un ) then
72937: LD_VAR 0 2
72941: PPUSH
72942: CALL_OW 318
72946: IFFALSE 72957
// ComWalk ( un ) ;
72948: LD_VAR 0 2
72952: PPUSH
72953: CALL_OW 138
// SetClass ( un , class_mortar ) ;
72957: LD_VAR 0 2
72961: PPUSH
72962: LD_INT 8
72964: PPUSH
72965: CALL_OW 336
// end ;
72969: PPOPN 3
72971: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
72972: LD_EXP 46
72976: PUSH
72977: LD_EXP 90
72981: AND
72982: IFFALSE 73126
72984: GO 72986
72986: DISABLE
72987: LD_INT 0
72989: PPUSH
72990: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
72991: LD_ADDR_VAR 0 2
72995: PUSH
72996: LD_INT 22
72998: PUSH
72999: LD_OWVAR 2
73003: PUSH
73004: EMPTY
73005: LIST
73006: LIST
73007: PUSH
73008: LD_INT 21
73010: PUSH
73011: LD_INT 2
73013: PUSH
73014: EMPTY
73015: LIST
73016: LIST
73017: PUSH
73018: LD_INT 2
73020: PUSH
73021: LD_INT 34
73023: PUSH
73024: LD_INT 12
73026: PUSH
73027: EMPTY
73028: LIST
73029: LIST
73030: PUSH
73031: LD_INT 34
73033: PUSH
73034: LD_INT 51
73036: PUSH
73037: EMPTY
73038: LIST
73039: LIST
73040: PUSH
73041: LD_INT 34
73043: PUSH
73044: LD_INT 32
73046: PUSH
73047: EMPTY
73048: LIST
73049: LIST
73050: PUSH
73051: EMPTY
73052: LIST
73053: LIST
73054: LIST
73055: LIST
73056: PUSH
73057: EMPTY
73058: LIST
73059: LIST
73060: LIST
73061: PPUSH
73062: CALL_OW 69
73066: ST_TO_ADDR
// if not tmp then
73067: LD_VAR 0 2
73071: NOT
73072: IFFALSE 73076
// exit ;
73074: GO 73126
// for i in tmp do
73076: LD_ADDR_VAR 0 1
73080: PUSH
73081: LD_VAR 0 2
73085: PUSH
73086: FOR_IN
73087: IFFALSE 73124
// if GetCargo ( i , mat_artifact ) = 0 then
73089: LD_VAR 0 1
73093: PPUSH
73094: LD_INT 4
73096: PPUSH
73097: CALL_OW 289
73101: PUSH
73102: LD_INT 0
73104: EQUAL
73105: IFFALSE 73122
// SetCargo ( i , mat_siberit , 100 ) ;
73107: LD_VAR 0 1
73111: PPUSH
73112: LD_INT 3
73114: PPUSH
73115: LD_INT 100
73117: PPUSH
73118: CALL_OW 290
73122: GO 73086
73124: POP
73125: POP
// end ;
73126: PPOPN 2
73128: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
73129: LD_EXP 46
73133: PUSH
73134: LD_EXP 91
73138: AND
73139: IFFALSE 73322
73141: GO 73143
73143: DISABLE
73144: LD_INT 0
73146: PPUSH
73147: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73148: LD_ADDR_VAR 0 2
73152: PUSH
73153: LD_INT 22
73155: PUSH
73156: LD_OWVAR 2
73160: PUSH
73161: EMPTY
73162: LIST
73163: LIST
73164: PPUSH
73165: CALL_OW 69
73169: ST_TO_ADDR
// if not tmp then
73170: LD_VAR 0 2
73174: NOT
73175: IFFALSE 73179
// exit ;
73177: GO 73322
// for i := 1 to 2 do
73179: LD_ADDR_VAR 0 1
73183: PUSH
73184: DOUBLE
73185: LD_INT 1
73187: DEC
73188: ST_TO_ADDR
73189: LD_INT 2
73191: PUSH
73192: FOR_TO
73193: IFFALSE 73320
// begin uc_side := your_side ;
73195: LD_ADDR_OWVAR 20
73199: PUSH
73200: LD_OWVAR 2
73204: ST_TO_ADDR
// uc_nation := nation_american ;
73205: LD_ADDR_OWVAR 21
73209: PUSH
73210: LD_INT 1
73212: ST_TO_ADDR
// vc_chassis := us_morphling ;
73213: LD_ADDR_OWVAR 37
73217: PUSH
73218: LD_INT 5
73220: ST_TO_ADDR
// vc_engine := engine_siberite ;
73221: LD_ADDR_OWVAR 39
73225: PUSH
73226: LD_INT 3
73228: ST_TO_ADDR
// vc_control := control_computer ;
73229: LD_ADDR_OWVAR 38
73233: PUSH
73234: LD_INT 3
73236: ST_TO_ADDR
// vc_weapon := us_double_laser ;
73237: LD_ADDR_OWVAR 40
73241: PUSH
73242: LD_INT 10
73244: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
73245: LD_VAR 0 2
73249: PUSH
73250: LD_INT 1
73252: ARRAY
73253: PPUSH
73254: CALL_OW 310
73258: NOT
73259: IFFALSE 73306
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
73261: CALL_OW 45
73265: PPUSH
73266: LD_VAR 0 2
73270: PUSH
73271: LD_INT 1
73273: ARRAY
73274: PPUSH
73275: CALL_OW 250
73279: PPUSH
73280: LD_VAR 0 2
73284: PUSH
73285: LD_INT 1
73287: ARRAY
73288: PPUSH
73289: CALL_OW 251
73293: PPUSH
73294: LD_INT 12
73296: PPUSH
73297: LD_INT 1
73299: PPUSH
73300: CALL_OW 50
73304: GO 73318
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
73306: CALL_OW 45
73310: PPUSH
73311: LD_INT 1
73313: PPUSH
73314: CALL_OW 51
// end ;
73318: GO 73192
73320: POP
73321: POP
// end ;
73322: PPOPN 2
73324: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
73325: LD_EXP 46
73329: PUSH
73330: LD_EXP 92
73334: AND
73335: IFFALSE 73557
73337: GO 73339
73339: DISABLE
73340: LD_INT 0
73342: PPUSH
73343: PPUSH
73344: PPUSH
73345: PPUSH
73346: PPUSH
73347: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
73348: LD_ADDR_VAR 0 6
73352: PUSH
73353: LD_INT 22
73355: PUSH
73356: LD_OWVAR 2
73360: PUSH
73361: EMPTY
73362: LIST
73363: LIST
73364: PUSH
73365: LD_INT 21
73367: PUSH
73368: LD_INT 1
73370: PUSH
73371: EMPTY
73372: LIST
73373: LIST
73374: PUSH
73375: LD_INT 3
73377: PUSH
73378: LD_INT 23
73380: PUSH
73381: LD_INT 0
73383: PUSH
73384: EMPTY
73385: LIST
73386: LIST
73387: PUSH
73388: EMPTY
73389: LIST
73390: LIST
73391: PUSH
73392: EMPTY
73393: LIST
73394: LIST
73395: LIST
73396: PPUSH
73397: CALL_OW 69
73401: ST_TO_ADDR
// if not tmp then
73402: LD_VAR 0 6
73406: NOT
73407: IFFALSE 73411
// exit ;
73409: GO 73557
// s1 := rand ( 1 , 4 ) ;
73411: LD_ADDR_VAR 0 2
73415: PUSH
73416: LD_INT 1
73418: PPUSH
73419: LD_INT 4
73421: PPUSH
73422: CALL_OW 12
73426: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
73427: LD_ADDR_VAR 0 4
73431: PUSH
73432: LD_VAR 0 6
73436: PUSH
73437: LD_INT 1
73439: ARRAY
73440: PPUSH
73441: LD_VAR 0 2
73445: PPUSH
73446: CALL_OW 259
73450: ST_TO_ADDR
// if s1 = 1 then
73451: LD_VAR 0 2
73455: PUSH
73456: LD_INT 1
73458: EQUAL
73459: IFFALSE 73479
// s2 := rand ( 2 , 4 ) else
73461: LD_ADDR_VAR 0 3
73465: PUSH
73466: LD_INT 2
73468: PPUSH
73469: LD_INT 4
73471: PPUSH
73472: CALL_OW 12
73476: ST_TO_ADDR
73477: GO 73487
// s2 := 1 ;
73479: LD_ADDR_VAR 0 3
73483: PUSH
73484: LD_INT 1
73486: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
73487: LD_ADDR_VAR 0 5
73491: PUSH
73492: LD_VAR 0 6
73496: PUSH
73497: LD_INT 1
73499: ARRAY
73500: PPUSH
73501: LD_VAR 0 3
73505: PPUSH
73506: CALL_OW 259
73510: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
73511: LD_VAR 0 6
73515: PUSH
73516: LD_INT 1
73518: ARRAY
73519: PPUSH
73520: LD_VAR 0 2
73524: PPUSH
73525: LD_VAR 0 5
73529: PPUSH
73530: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
73534: LD_VAR 0 6
73538: PUSH
73539: LD_INT 1
73541: ARRAY
73542: PPUSH
73543: LD_VAR 0 3
73547: PPUSH
73548: LD_VAR 0 4
73552: PPUSH
73553: CALL_OW 237
// end ;
73557: PPOPN 6
73559: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
73560: LD_EXP 46
73564: PUSH
73565: LD_EXP 93
73569: AND
73570: IFFALSE 73649
73572: GO 73574
73574: DISABLE
73575: LD_INT 0
73577: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
73578: LD_ADDR_VAR 0 1
73582: PUSH
73583: LD_INT 22
73585: PUSH
73586: LD_OWVAR 2
73590: PUSH
73591: EMPTY
73592: LIST
73593: LIST
73594: PUSH
73595: LD_INT 30
73597: PUSH
73598: LD_INT 3
73600: PUSH
73601: EMPTY
73602: LIST
73603: LIST
73604: PUSH
73605: EMPTY
73606: LIST
73607: LIST
73608: PPUSH
73609: CALL_OW 69
73613: ST_TO_ADDR
// if not tmp then
73614: LD_VAR 0 1
73618: NOT
73619: IFFALSE 73623
// exit ;
73621: GO 73649
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
73623: LD_VAR 0 1
73627: PUSH
73628: LD_INT 1
73630: PPUSH
73631: LD_VAR 0 1
73635: PPUSH
73636: CALL_OW 12
73640: ARRAY
73641: PPUSH
73642: LD_INT 1
73644: PPUSH
73645: CALL_OW 234
// end ;
73649: PPOPN 1
73651: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
73652: LD_EXP 46
73656: PUSH
73657: LD_EXP 94
73661: AND
73662: IFFALSE 73774
73664: GO 73666
73666: DISABLE
73667: LD_INT 0
73669: PPUSH
73670: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
73671: LD_ADDR_VAR 0 2
73675: PUSH
73676: LD_INT 22
73678: PUSH
73679: LD_OWVAR 2
73683: PUSH
73684: EMPTY
73685: LIST
73686: LIST
73687: PUSH
73688: LD_INT 2
73690: PUSH
73691: LD_INT 30
73693: PUSH
73694: LD_INT 27
73696: PUSH
73697: EMPTY
73698: LIST
73699: LIST
73700: PUSH
73701: LD_INT 30
73703: PUSH
73704: LD_INT 26
73706: PUSH
73707: EMPTY
73708: LIST
73709: LIST
73710: PUSH
73711: LD_INT 30
73713: PUSH
73714: LD_INT 28
73716: PUSH
73717: EMPTY
73718: LIST
73719: LIST
73720: PUSH
73721: EMPTY
73722: LIST
73723: LIST
73724: LIST
73725: LIST
73726: PUSH
73727: EMPTY
73728: LIST
73729: LIST
73730: PPUSH
73731: CALL_OW 69
73735: ST_TO_ADDR
// if not tmp then
73736: LD_VAR 0 2
73740: NOT
73741: IFFALSE 73745
// exit ;
73743: GO 73774
// for i in tmp do
73745: LD_ADDR_VAR 0 1
73749: PUSH
73750: LD_VAR 0 2
73754: PUSH
73755: FOR_IN
73756: IFFALSE 73772
// SetLives ( i , 1 ) ;
73758: LD_VAR 0 1
73762: PPUSH
73763: LD_INT 1
73765: PPUSH
73766: CALL_OW 234
73770: GO 73755
73772: POP
73773: POP
// end ;
73774: PPOPN 2
73776: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
73777: LD_EXP 46
73781: PUSH
73782: LD_EXP 95
73786: AND
73787: IFFALSE 74074
73789: GO 73791
73791: DISABLE
73792: LD_INT 0
73794: PPUSH
73795: PPUSH
73796: PPUSH
// begin i := rand ( 1 , 7 ) ;
73797: LD_ADDR_VAR 0 1
73801: PUSH
73802: LD_INT 1
73804: PPUSH
73805: LD_INT 7
73807: PPUSH
73808: CALL_OW 12
73812: ST_TO_ADDR
// case i of 1 :
73813: LD_VAR 0 1
73817: PUSH
73818: LD_INT 1
73820: DOUBLE
73821: EQUAL
73822: IFTRUE 73826
73824: GO 73836
73826: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
73827: LD_STRING earthquake(getX(game), 0, 32)
73829: PPUSH
73830: CALL_OW 559
73834: GO 74074
73836: LD_INT 2
73838: DOUBLE
73839: EQUAL
73840: IFTRUE 73844
73842: GO 73858
73844: POP
// begin ToLua ( displayStucuk(); ) ;
73845: LD_STRING displayStucuk();
73847: PPUSH
73848: CALL_OW 559
// ResetFog ;
73852: CALL_OW 335
// end ; 3 :
73856: GO 74074
73858: LD_INT 3
73860: DOUBLE
73861: EQUAL
73862: IFTRUE 73866
73864: GO 73970
73866: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73867: LD_ADDR_VAR 0 2
73871: PUSH
73872: LD_INT 22
73874: PUSH
73875: LD_OWVAR 2
73879: PUSH
73880: EMPTY
73881: LIST
73882: LIST
73883: PUSH
73884: LD_INT 25
73886: PUSH
73887: LD_INT 1
73889: PUSH
73890: EMPTY
73891: LIST
73892: LIST
73893: PUSH
73894: EMPTY
73895: LIST
73896: LIST
73897: PPUSH
73898: CALL_OW 69
73902: ST_TO_ADDR
// if not tmp then
73903: LD_VAR 0 2
73907: NOT
73908: IFFALSE 73912
// exit ;
73910: GO 74074
// un := tmp [ rand ( 1 , tmp ) ] ;
73912: LD_ADDR_VAR 0 3
73916: PUSH
73917: LD_VAR 0 2
73921: PUSH
73922: LD_INT 1
73924: PPUSH
73925: LD_VAR 0 2
73929: PPUSH
73930: CALL_OW 12
73934: ARRAY
73935: ST_TO_ADDR
// if Crawls ( un ) then
73936: LD_VAR 0 3
73940: PPUSH
73941: CALL_OW 318
73945: IFFALSE 73956
// ComWalk ( un ) ;
73947: LD_VAR 0 3
73951: PPUSH
73952: CALL_OW 138
// SetClass ( un , class_mortar ) ;
73956: LD_VAR 0 3
73960: PPUSH
73961: LD_INT 8
73963: PPUSH
73964: CALL_OW 336
// end ; 4 :
73968: GO 74074
73970: LD_INT 4
73972: DOUBLE
73973: EQUAL
73974: IFTRUE 73978
73976: GO 74052
73978: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
73979: LD_ADDR_VAR 0 2
73983: PUSH
73984: LD_INT 22
73986: PUSH
73987: LD_OWVAR 2
73991: PUSH
73992: EMPTY
73993: LIST
73994: LIST
73995: PUSH
73996: LD_INT 30
73998: PUSH
73999: LD_INT 29
74001: PUSH
74002: EMPTY
74003: LIST
74004: LIST
74005: PUSH
74006: EMPTY
74007: LIST
74008: LIST
74009: PPUSH
74010: CALL_OW 69
74014: ST_TO_ADDR
// if not tmp then
74015: LD_VAR 0 2
74019: NOT
74020: IFFALSE 74024
// exit ;
74022: GO 74074
// CenterNowOnUnits ( tmp [ 1 ] ) ;
74024: LD_VAR 0 2
74028: PUSH
74029: LD_INT 1
74031: ARRAY
74032: PPUSH
74033: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
74037: LD_VAR 0 2
74041: PUSH
74042: LD_INT 1
74044: ARRAY
74045: PPUSH
74046: CALL_OW 65
// end ; 5 .. 7 :
74050: GO 74074
74052: LD_INT 5
74054: DOUBLE
74055: GREATEREQUAL
74056: IFFALSE 74064
74058: LD_INT 7
74060: DOUBLE
74061: LESSEQUAL
74062: IFTRUE 74066
74064: GO 74073
74066: POP
// StreamSibBomb ; end ;
74067: CALL 70311 0 0
74071: GO 74074
74073: POP
// end ;
74074: PPOPN 3
74076: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
74077: LD_EXP 46
74081: PUSH
74082: LD_EXP 96
74086: AND
74087: IFFALSE 74243
74089: GO 74091
74091: DISABLE
74092: LD_INT 0
74094: PPUSH
74095: PPUSH
74096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
74097: LD_ADDR_VAR 0 2
74101: PUSH
74102: LD_INT 81
74104: PUSH
74105: LD_OWVAR 2
74109: PUSH
74110: EMPTY
74111: LIST
74112: LIST
74113: PUSH
74114: LD_INT 2
74116: PUSH
74117: LD_INT 21
74119: PUSH
74120: LD_INT 1
74122: PUSH
74123: EMPTY
74124: LIST
74125: LIST
74126: PUSH
74127: LD_INT 21
74129: PUSH
74130: LD_INT 2
74132: PUSH
74133: EMPTY
74134: LIST
74135: LIST
74136: PUSH
74137: EMPTY
74138: LIST
74139: LIST
74140: LIST
74141: PUSH
74142: EMPTY
74143: LIST
74144: LIST
74145: PPUSH
74146: CALL_OW 69
74150: ST_TO_ADDR
// if not tmp then
74151: LD_VAR 0 2
74155: NOT
74156: IFFALSE 74160
// exit ;
74158: GO 74243
// p := 0 ;
74160: LD_ADDR_VAR 0 3
74164: PUSH
74165: LD_INT 0
74167: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
74168: LD_INT 35
74170: PPUSH
74171: CALL_OW 67
// p := p + 1 ;
74175: LD_ADDR_VAR 0 3
74179: PUSH
74180: LD_VAR 0 3
74184: PUSH
74185: LD_INT 1
74187: PLUS
74188: ST_TO_ADDR
// for i in tmp do
74189: LD_ADDR_VAR 0 1
74193: PUSH
74194: LD_VAR 0 2
74198: PUSH
74199: FOR_IN
74200: IFFALSE 74231
// if GetLives ( i ) < 1000 then
74202: LD_VAR 0 1
74206: PPUSH
74207: CALL_OW 256
74211: PUSH
74212: LD_INT 1000
74214: LESS
74215: IFFALSE 74229
// SetLives ( i , 1000 ) ;
74217: LD_VAR 0 1
74221: PPUSH
74222: LD_INT 1000
74224: PPUSH
74225: CALL_OW 234
74229: GO 74199
74231: POP
74232: POP
// until p > 20 ;
74233: LD_VAR 0 3
74237: PUSH
74238: LD_INT 20
74240: GREATER
74241: IFFALSE 74168
// end ;
74243: PPOPN 3
74245: END
// every 0 0$1 trigger StreamModeActive and sTime do
74246: LD_EXP 46
74250: PUSH
74251: LD_EXP 97
74255: AND
74256: IFFALSE 74291
74258: GO 74260
74260: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
74261: LD_INT 28
74263: PPUSH
74264: LD_OWVAR 2
74268: PPUSH
74269: LD_INT 2
74271: PPUSH
74272: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
74276: LD_INT 30
74278: PPUSH
74279: LD_OWVAR 2
74283: PPUSH
74284: LD_INT 2
74286: PPUSH
74287: CALL_OW 322
// end ;
74291: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
74292: LD_EXP 46
74296: PUSH
74297: LD_EXP 98
74301: AND
74302: IFFALSE 74423
74304: GO 74306
74306: DISABLE
74307: LD_INT 0
74309: PPUSH
74310: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
74311: LD_ADDR_VAR 0 2
74315: PUSH
74316: LD_INT 22
74318: PUSH
74319: LD_OWVAR 2
74323: PUSH
74324: EMPTY
74325: LIST
74326: LIST
74327: PUSH
74328: LD_INT 21
74330: PUSH
74331: LD_INT 1
74333: PUSH
74334: EMPTY
74335: LIST
74336: LIST
74337: PUSH
74338: LD_INT 3
74340: PUSH
74341: LD_INT 23
74343: PUSH
74344: LD_INT 0
74346: PUSH
74347: EMPTY
74348: LIST
74349: LIST
74350: PUSH
74351: EMPTY
74352: LIST
74353: LIST
74354: PUSH
74355: EMPTY
74356: LIST
74357: LIST
74358: LIST
74359: PPUSH
74360: CALL_OW 69
74364: ST_TO_ADDR
// if not tmp then
74365: LD_VAR 0 2
74369: NOT
74370: IFFALSE 74374
// exit ;
74372: GO 74423
// for i in tmp do
74374: LD_ADDR_VAR 0 1
74378: PUSH
74379: LD_VAR 0 2
74383: PUSH
74384: FOR_IN
74385: IFFALSE 74421
// begin if Crawls ( i ) then
74387: LD_VAR 0 1
74391: PPUSH
74392: CALL_OW 318
74396: IFFALSE 74407
// ComWalk ( i ) ;
74398: LD_VAR 0 1
74402: PPUSH
74403: CALL_OW 138
// SetClass ( i , 2 ) ;
74407: LD_VAR 0 1
74411: PPUSH
74412: LD_INT 2
74414: PPUSH
74415: CALL_OW 336
// end ;
74419: GO 74384
74421: POP
74422: POP
// end ;
74423: PPOPN 2
74425: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
74426: LD_EXP 46
74430: PUSH
74431: LD_EXP 99
74435: AND
74436: IFFALSE 74724
74438: GO 74440
74440: DISABLE
74441: LD_INT 0
74443: PPUSH
74444: PPUSH
74445: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
74446: LD_OWVAR 2
74450: PPUSH
74451: LD_INT 9
74453: PPUSH
74454: LD_INT 1
74456: PPUSH
74457: LD_INT 1
74459: PPUSH
74460: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
74464: LD_INT 9
74466: PPUSH
74467: LD_OWVAR 2
74471: PPUSH
74472: CALL_OW 343
// uc_side := 9 ;
74476: LD_ADDR_OWVAR 20
74480: PUSH
74481: LD_INT 9
74483: ST_TO_ADDR
// uc_nation := 2 ;
74484: LD_ADDR_OWVAR 21
74488: PUSH
74489: LD_INT 2
74491: ST_TO_ADDR
// hc_name := Dark Warrior ;
74492: LD_ADDR_OWVAR 26
74496: PUSH
74497: LD_STRING Dark Warrior
74499: ST_TO_ADDR
// hc_gallery :=  ;
74500: LD_ADDR_OWVAR 33
74504: PUSH
74505: LD_STRING 
74507: ST_TO_ADDR
// hc_noskilllimit := true ;
74508: LD_ADDR_OWVAR 76
74512: PUSH
74513: LD_INT 1
74515: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
74516: LD_ADDR_OWVAR 31
74520: PUSH
74521: LD_INT 30
74523: PUSH
74524: LD_INT 30
74526: PUSH
74527: LD_INT 30
74529: PUSH
74530: LD_INT 30
74532: PUSH
74533: EMPTY
74534: LIST
74535: LIST
74536: LIST
74537: LIST
74538: ST_TO_ADDR
// un := CreateHuman ;
74539: LD_ADDR_VAR 0 3
74543: PUSH
74544: CALL_OW 44
74548: ST_TO_ADDR
// hc_noskilllimit := false ;
74549: LD_ADDR_OWVAR 76
74553: PUSH
74554: LD_INT 0
74556: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
74557: LD_VAR 0 3
74561: PPUSH
74562: LD_INT 1
74564: PPUSH
74565: CALL_OW 51
// ToLua ( playRanger() ) ;
74569: LD_STRING playRanger()
74571: PPUSH
74572: CALL_OW 559
// p := 0 ;
74576: LD_ADDR_VAR 0 2
74580: PUSH
74581: LD_INT 0
74583: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
74584: LD_INT 35
74586: PPUSH
74587: CALL_OW 67
// p := p + 1 ;
74591: LD_ADDR_VAR 0 2
74595: PUSH
74596: LD_VAR 0 2
74600: PUSH
74601: LD_INT 1
74603: PLUS
74604: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
74605: LD_VAR 0 3
74609: PPUSH
74610: CALL_OW 256
74614: PUSH
74615: LD_INT 1000
74617: LESS
74618: IFFALSE 74632
// SetLives ( un , 1000 ) ;
74620: LD_VAR 0 3
74624: PPUSH
74625: LD_INT 1000
74627: PPUSH
74628: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
74632: LD_VAR 0 3
74636: PPUSH
74637: LD_INT 81
74639: PUSH
74640: LD_OWVAR 2
74644: PUSH
74645: EMPTY
74646: LIST
74647: LIST
74648: PUSH
74649: LD_INT 91
74651: PUSH
74652: LD_VAR 0 3
74656: PUSH
74657: LD_INT 30
74659: PUSH
74660: EMPTY
74661: LIST
74662: LIST
74663: LIST
74664: PUSH
74665: EMPTY
74666: LIST
74667: LIST
74668: PPUSH
74669: CALL_OW 69
74673: PPUSH
74674: LD_VAR 0 3
74678: PPUSH
74679: CALL_OW 74
74683: PPUSH
74684: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
74688: LD_VAR 0 2
74692: PUSH
74693: LD_INT 80
74695: GREATER
74696: PUSH
74697: LD_VAR 0 3
74701: PPUSH
74702: CALL_OW 301
74706: OR
74707: IFFALSE 74584
// if un then
74709: LD_VAR 0 3
74713: IFFALSE 74724
// RemoveUnit ( un ) ;
74715: LD_VAR 0 3
74719: PPUSH
74720: CALL_OW 64
// end ;
74724: PPOPN 3
74726: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
74727: LD_EXP 100
74731: IFFALSE 74847
74733: GO 74735
74735: DISABLE
74736: LD_INT 0
74738: PPUSH
74739: PPUSH
74740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
74741: LD_ADDR_VAR 0 2
74745: PUSH
74746: LD_INT 81
74748: PUSH
74749: LD_OWVAR 2
74753: PUSH
74754: EMPTY
74755: LIST
74756: LIST
74757: PUSH
74758: LD_INT 21
74760: PUSH
74761: LD_INT 1
74763: PUSH
74764: EMPTY
74765: LIST
74766: LIST
74767: PUSH
74768: EMPTY
74769: LIST
74770: LIST
74771: PPUSH
74772: CALL_OW 69
74776: ST_TO_ADDR
// ToLua ( playComputer() ) ;
74777: LD_STRING playComputer()
74779: PPUSH
74780: CALL_OW 559
// if not tmp then
74784: LD_VAR 0 2
74788: NOT
74789: IFFALSE 74793
// exit ;
74791: GO 74847
// for i in tmp do
74793: LD_ADDR_VAR 0 1
74797: PUSH
74798: LD_VAR 0 2
74802: PUSH
74803: FOR_IN
74804: IFFALSE 74845
// for j := 1 to 4 do
74806: LD_ADDR_VAR 0 3
74810: PUSH
74811: DOUBLE
74812: LD_INT 1
74814: DEC
74815: ST_TO_ADDR
74816: LD_INT 4
74818: PUSH
74819: FOR_TO
74820: IFFALSE 74841
// SetSkill ( i , j , 10 ) ;
74822: LD_VAR 0 1
74826: PPUSH
74827: LD_VAR 0 3
74831: PPUSH
74832: LD_INT 10
74834: PPUSH
74835: CALL_OW 237
74839: GO 74819
74841: POP
74842: POP
74843: GO 74803
74845: POP
74846: POP
// end ;
74847: PPOPN 3
74849: END
// every 0 0$1 trigger s30 do var i , tmp ;
74850: LD_EXP 101
74854: IFFALSE 74923
74856: GO 74858
74858: DISABLE
74859: LD_INT 0
74861: PPUSH
74862: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
74863: LD_ADDR_VAR 0 2
74867: PUSH
74868: LD_INT 22
74870: PUSH
74871: LD_OWVAR 2
74875: PUSH
74876: EMPTY
74877: LIST
74878: LIST
74879: PPUSH
74880: CALL_OW 69
74884: ST_TO_ADDR
// if not tmp then
74885: LD_VAR 0 2
74889: NOT
74890: IFFALSE 74894
// exit ;
74892: GO 74923
// for i in tmp do
74894: LD_ADDR_VAR 0 1
74898: PUSH
74899: LD_VAR 0 2
74903: PUSH
74904: FOR_IN
74905: IFFALSE 74921
// SetLives ( i , 300 ) ;
74907: LD_VAR 0 1
74911: PPUSH
74912: LD_INT 300
74914: PPUSH
74915: CALL_OW 234
74919: GO 74904
74921: POP
74922: POP
// end ;
74923: PPOPN 2
74925: END
// every 0 0$1 trigger s60 do var i , tmp ;
74926: LD_EXP 102
74930: IFFALSE 74999
74932: GO 74934
74934: DISABLE
74935: LD_INT 0
74937: PPUSH
74938: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
74939: LD_ADDR_VAR 0 2
74943: PUSH
74944: LD_INT 22
74946: PUSH
74947: LD_OWVAR 2
74951: PUSH
74952: EMPTY
74953: LIST
74954: LIST
74955: PPUSH
74956: CALL_OW 69
74960: ST_TO_ADDR
// if not tmp then
74961: LD_VAR 0 2
74965: NOT
74966: IFFALSE 74970
// exit ;
74968: GO 74999
// for i in tmp do
74970: LD_ADDR_VAR 0 1
74974: PUSH
74975: LD_VAR 0 2
74979: PUSH
74980: FOR_IN
74981: IFFALSE 74997
// SetLives ( i , 600 ) ;
74983: LD_VAR 0 1
74987: PPUSH
74988: LD_INT 600
74990: PPUSH
74991: CALL_OW 234
74995: GO 74980
74997: POP
74998: POP
// end ;
74999: PPOPN 2
75001: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
75002: LD_INT 0
75004: PPUSH
// case cmd of 301 :
75005: LD_VAR 0 1
75009: PUSH
75010: LD_INT 301
75012: DOUBLE
75013: EQUAL
75014: IFTRUE 75018
75016: GO 75050
75018: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
75019: LD_VAR 0 6
75023: PPUSH
75024: LD_VAR 0 7
75028: PPUSH
75029: LD_VAR 0 8
75033: PPUSH
75034: LD_VAR 0 4
75038: PPUSH
75039: LD_VAR 0 5
75043: PPUSH
75044: CALL 76259 0 5
75048: GO 75171
75050: LD_INT 302
75052: DOUBLE
75053: EQUAL
75054: IFTRUE 75058
75056: GO 75095
75058: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
75059: LD_VAR 0 6
75063: PPUSH
75064: LD_VAR 0 7
75068: PPUSH
75069: LD_VAR 0 8
75073: PPUSH
75074: LD_VAR 0 9
75078: PPUSH
75079: LD_VAR 0 4
75083: PPUSH
75084: LD_VAR 0 5
75088: PPUSH
75089: CALL 76350 0 6
75093: GO 75171
75095: LD_INT 303
75097: DOUBLE
75098: EQUAL
75099: IFTRUE 75103
75101: GO 75140
75103: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
75104: LD_VAR 0 6
75108: PPUSH
75109: LD_VAR 0 7
75113: PPUSH
75114: LD_VAR 0 8
75118: PPUSH
75119: LD_VAR 0 9
75123: PPUSH
75124: LD_VAR 0 4
75128: PPUSH
75129: LD_VAR 0 5
75133: PPUSH
75134: CALL 75176 0 6
75138: GO 75171
75140: LD_INT 304
75142: DOUBLE
75143: EQUAL
75144: IFTRUE 75148
75146: GO 75170
75148: POP
// hHackTeleport ( unit , x , y ) ; end ;
75149: LD_VAR 0 2
75153: PPUSH
75154: LD_VAR 0 4
75158: PPUSH
75159: LD_VAR 0 5
75163: PPUSH
75164: CALL 76943 0 3
75168: GO 75171
75170: POP
// end ;
75171: LD_VAR 0 12
75175: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
75176: LD_INT 0
75178: PPUSH
75179: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
75180: LD_VAR 0 1
75184: PUSH
75185: LD_INT 1
75187: LESS
75188: PUSH
75189: LD_VAR 0 1
75193: PUSH
75194: LD_INT 3
75196: GREATER
75197: OR
75198: PUSH
75199: LD_VAR 0 5
75203: PPUSH
75204: LD_VAR 0 6
75208: PPUSH
75209: CALL_OW 428
75213: OR
75214: IFFALSE 75218
// exit ;
75216: GO 75946
// uc_side := your_side ;
75218: LD_ADDR_OWVAR 20
75222: PUSH
75223: LD_OWVAR 2
75227: ST_TO_ADDR
// uc_nation := nation ;
75228: LD_ADDR_OWVAR 21
75232: PUSH
75233: LD_VAR 0 1
75237: ST_TO_ADDR
// bc_level = 1 ;
75238: LD_ADDR_OWVAR 43
75242: PUSH
75243: LD_INT 1
75245: ST_TO_ADDR
// case btype of 1 :
75246: LD_VAR 0 2
75250: PUSH
75251: LD_INT 1
75253: DOUBLE
75254: EQUAL
75255: IFTRUE 75259
75257: GO 75270
75259: POP
// bc_type := b_depot ; 2 :
75260: LD_ADDR_OWVAR 42
75264: PUSH
75265: LD_INT 0
75267: ST_TO_ADDR
75268: GO 75890
75270: LD_INT 2
75272: DOUBLE
75273: EQUAL
75274: IFTRUE 75278
75276: GO 75289
75278: POP
// bc_type := b_warehouse ; 3 :
75279: LD_ADDR_OWVAR 42
75283: PUSH
75284: LD_INT 1
75286: ST_TO_ADDR
75287: GO 75890
75289: LD_INT 3
75291: DOUBLE
75292: EQUAL
75293: IFTRUE 75297
75295: GO 75308
75297: POP
// bc_type := b_lab ; 4 .. 9 :
75298: LD_ADDR_OWVAR 42
75302: PUSH
75303: LD_INT 6
75305: ST_TO_ADDR
75306: GO 75890
75308: LD_INT 4
75310: DOUBLE
75311: GREATEREQUAL
75312: IFFALSE 75320
75314: LD_INT 9
75316: DOUBLE
75317: LESSEQUAL
75318: IFTRUE 75322
75320: GO 75382
75322: POP
// begin bc_type := b_lab_half ;
75323: LD_ADDR_OWVAR 42
75327: PUSH
75328: LD_INT 7
75330: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
75331: LD_ADDR_OWVAR 44
75335: PUSH
75336: LD_INT 10
75338: PUSH
75339: LD_INT 11
75341: PUSH
75342: LD_INT 12
75344: PUSH
75345: LD_INT 15
75347: PUSH
75348: LD_INT 14
75350: PUSH
75351: LD_INT 13
75353: PUSH
75354: EMPTY
75355: LIST
75356: LIST
75357: LIST
75358: LIST
75359: LIST
75360: LIST
75361: PUSH
75362: LD_VAR 0 2
75366: PUSH
75367: LD_INT 3
75369: MINUS
75370: ARRAY
75371: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
75372: LD_ADDR_OWVAR 45
75376: PUSH
75377: LD_INT 9
75379: ST_TO_ADDR
// end ; 10 .. 13 :
75380: GO 75890
75382: LD_INT 10
75384: DOUBLE
75385: GREATEREQUAL
75386: IFFALSE 75394
75388: LD_INT 13
75390: DOUBLE
75391: LESSEQUAL
75392: IFTRUE 75396
75394: GO 75473
75396: POP
// begin bc_type := b_lab_full ;
75397: LD_ADDR_OWVAR 42
75401: PUSH
75402: LD_INT 8
75404: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
75405: LD_ADDR_OWVAR 44
75409: PUSH
75410: LD_INT 10
75412: PUSH
75413: LD_INT 12
75415: PUSH
75416: LD_INT 14
75418: PUSH
75419: LD_INT 13
75421: PUSH
75422: EMPTY
75423: LIST
75424: LIST
75425: LIST
75426: LIST
75427: PUSH
75428: LD_VAR 0 2
75432: PUSH
75433: LD_INT 9
75435: MINUS
75436: ARRAY
75437: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
75438: LD_ADDR_OWVAR 45
75442: PUSH
75443: LD_INT 11
75445: PUSH
75446: LD_INT 15
75448: PUSH
75449: LD_INT 12
75451: PUSH
75452: LD_INT 15
75454: PUSH
75455: EMPTY
75456: LIST
75457: LIST
75458: LIST
75459: LIST
75460: PUSH
75461: LD_VAR 0 2
75465: PUSH
75466: LD_INT 9
75468: MINUS
75469: ARRAY
75470: ST_TO_ADDR
// end ; 14 :
75471: GO 75890
75473: LD_INT 14
75475: DOUBLE
75476: EQUAL
75477: IFTRUE 75481
75479: GO 75492
75481: POP
// bc_type := b_workshop ; 15 :
75482: LD_ADDR_OWVAR 42
75486: PUSH
75487: LD_INT 2
75489: ST_TO_ADDR
75490: GO 75890
75492: LD_INT 15
75494: DOUBLE
75495: EQUAL
75496: IFTRUE 75500
75498: GO 75511
75500: POP
// bc_type := b_factory ; 16 :
75501: LD_ADDR_OWVAR 42
75505: PUSH
75506: LD_INT 3
75508: ST_TO_ADDR
75509: GO 75890
75511: LD_INT 16
75513: DOUBLE
75514: EQUAL
75515: IFTRUE 75519
75517: GO 75530
75519: POP
// bc_type := b_ext_gun ; 17 :
75520: LD_ADDR_OWVAR 42
75524: PUSH
75525: LD_INT 17
75527: ST_TO_ADDR
75528: GO 75890
75530: LD_INT 17
75532: DOUBLE
75533: EQUAL
75534: IFTRUE 75538
75536: GO 75566
75538: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
75539: LD_ADDR_OWVAR 42
75543: PUSH
75544: LD_INT 19
75546: PUSH
75547: LD_INT 23
75549: PUSH
75550: LD_INT 19
75552: PUSH
75553: EMPTY
75554: LIST
75555: LIST
75556: LIST
75557: PUSH
75558: LD_VAR 0 1
75562: ARRAY
75563: ST_TO_ADDR
75564: GO 75890
75566: LD_INT 18
75568: DOUBLE
75569: EQUAL
75570: IFTRUE 75574
75572: GO 75585
75574: POP
// bc_type := b_ext_radar ; 19 :
75575: LD_ADDR_OWVAR 42
75579: PUSH
75580: LD_INT 20
75582: ST_TO_ADDR
75583: GO 75890
75585: LD_INT 19
75587: DOUBLE
75588: EQUAL
75589: IFTRUE 75593
75591: GO 75604
75593: POP
// bc_type := b_ext_radio ; 20 :
75594: LD_ADDR_OWVAR 42
75598: PUSH
75599: LD_INT 22
75601: ST_TO_ADDR
75602: GO 75890
75604: LD_INT 20
75606: DOUBLE
75607: EQUAL
75608: IFTRUE 75612
75610: GO 75623
75612: POP
// bc_type := b_ext_siberium ; 21 :
75613: LD_ADDR_OWVAR 42
75617: PUSH
75618: LD_INT 21
75620: ST_TO_ADDR
75621: GO 75890
75623: LD_INT 21
75625: DOUBLE
75626: EQUAL
75627: IFTRUE 75631
75629: GO 75642
75631: POP
// bc_type := b_ext_computer ; 22 :
75632: LD_ADDR_OWVAR 42
75636: PUSH
75637: LD_INT 24
75639: ST_TO_ADDR
75640: GO 75890
75642: LD_INT 22
75644: DOUBLE
75645: EQUAL
75646: IFTRUE 75650
75648: GO 75661
75650: POP
// bc_type := b_ext_track ; 23 :
75651: LD_ADDR_OWVAR 42
75655: PUSH
75656: LD_INT 16
75658: ST_TO_ADDR
75659: GO 75890
75661: LD_INT 23
75663: DOUBLE
75664: EQUAL
75665: IFTRUE 75669
75667: GO 75680
75669: POP
// bc_type := b_ext_laser ; 24 :
75670: LD_ADDR_OWVAR 42
75674: PUSH
75675: LD_INT 25
75677: ST_TO_ADDR
75678: GO 75890
75680: LD_INT 24
75682: DOUBLE
75683: EQUAL
75684: IFTRUE 75688
75686: GO 75699
75688: POP
// bc_type := b_control_tower ; 25 :
75689: LD_ADDR_OWVAR 42
75693: PUSH
75694: LD_INT 36
75696: ST_TO_ADDR
75697: GO 75890
75699: LD_INT 25
75701: DOUBLE
75702: EQUAL
75703: IFTRUE 75707
75705: GO 75718
75707: POP
// bc_type := b_breastwork ; 26 :
75708: LD_ADDR_OWVAR 42
75712: PUSH
75713: LD_INT 31
75715: ST_TO_ADDR
75716: GO 75890
75718: LD_INT 26
75720: DOUBLE
75721: EQUAL
75722: IFTRUE 75726
75724: GO 75737
75726: POP
// bc_type := b_bunker ; 27 :
75727: LD_ADDR_OWVAR 42
75731: PUSH
75732: LD_INT 32
75734: ST_TO_ADDR
75735: GO 75890
75737: LD_INT 27
75739: DOUBLE
75740: EQUAL
75741: IFTRUE 75745
75743: GO 75756
75745: POP
// bc_type := b_turret ; 28 :
75746: LD_ADDR_OWVAR 42
75750: PUSH
75751: LD_INT 33
75753: ST_TO_ADDR
75754: GO 75890
75756: LD_INT 28
75758: DOUBLE
75759: EQUAL
75760: IFTRUE 75764
75762: GO 75775
75764: POP
// bc_type := b_armoury ; 29 :
75765: LD_ADDR_OWVAR 42
75769: PUSH
75770: LD_INT 4
75772: ST_TO_ADDR
75773: GO 75890
75775: LD_INT 29
75777: DOUBLE
75778: EQUAL
75779: IFTRUE 75783
75781: GO 75794
75783: POP
// bc_type := b_barracks ; 30 :
75784: LD_ADDR_OWVAR 42
75788: PUSH
75789: LD_INT 5
75791: ST_TO_ADDR
75792: GO 75890
75794: LD_INT 30
75796: DOUBLE
75797: EQUAL
75798: IFTRUE 75802
75800: GO 75813
75802: POP
// bc_type := b_solar_power ; 31 :
75803: LD_ADDR_OWVAR 42
75807: PUSH
75808: LD_INT 27
75810: ST_TO_ADDR
75811: GO 75890
75813: LD_INT 31
75815: DOUBLE
75816: EQUAL
75817: IFTRUE 75821
75819: GO 75832
75821: POP
// bc_type := b_oil_power ; 32 :
75822: LD_ADDR_OWVAR 42
75826: PUSH
75827: LD_INT 26
75829: ST_TO_ADDR
75830: GO 75890
75832: LD_INT 32
75834: DOUBLE
75835: EQUAL
75836: IFTRUE 75840
75838: GO 75851
75840: POP
// bc_type := b_siberite_power ; 33 :
75841: LD_ADDR_OWVAR 42
75845: PUSH
75846: LD_INT 28
75848: ST_TO_ADDR
75849: GO 75890
75851: LD_INT 33
75853: DOUBLE
75854: EQUAL
75855: IFTRUE 75859
75857: GO 75870
75859: POP
// bc_type := b_oil_mine ; 34 :
75860: LD_ADDR_OWVAR 42
75864: PUSH
75865: LD_INT 29
75867: ST_TO_ADDR
75868: GO 75890
75870: LD_INT 34
75872: DOUBLE
75873: EQUAL
75874: IFTRUE 75878
75876: GO 75889
75878: POP
// bc_type := b_siberite_mine ; end ;
75879: LD_ADDR_OWVAR 42
75883: PUSH
75884: LD_INT 30
75886: ST_TO_ADDR
75887: GO 75890
75889: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
75890: LD_ADDR_VAR 0 8
75894: PUSH
75895: LD_VAR 0 5
75899: PPUSH
75900: LD_VAR 0 6
75904: PPUSH
75905: LD_VAR 0 3
75909: PPUSH
75910: CALL_OW 47
75914: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
75915: LD_OWVAR 42
75919: PUSH
75920: LD_INT 32
75922: PUSH
75923: LD_INT 33
75925: PUSH
75926: EMPTY
75927: LIST
75928: LIST
75929: IN
75930: IFFALSE 75946
// PlaceWeaponTurret ( b , weapon ) ;
75932: LD_VAR 0 8
75936: PPUSH
75937: LD_VAR 0 4
75941: PPUSH
75942: CALL_OW 431
// end ;
75946: LD_VAR 0 7
75950: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
75951: LD_INT 0
75953: PPUSH
75954: PPUSH
75955: PPUSH
75956: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75957: LD_ADDR_VAR 0 4
75961: PUSH
75962: LD_INT 22
75964: PUSH
75965: LD_OWVAR 2
75969: PUSH
75970: EMPTY
75971: LIST
75972: LIST
75973: PUSH
75974: LD_INT 2
75976: PUSH
75977: LD_INT 30
75979: PUSH
75980: LD_INT 0
75982: PUSH
75983: EMPTY
75984: LIST
75985: LIST
75986: PUSH
75987: LD_INT 30
75989: PUSH
75990: LD_INT 1
75992: PUSH
75993: EMPTY
75994: LIST
75995: LIST
75996: PUSH
75997: EMPTY
75998: LIST
75999: LIST
76000: LIST
76001: PUSH
76002: EMPTY
76003: LIST
76004: LIST
76005: PPUSH
76006: CALL_OW 69
76010: ST_TO_ADDR
// if not tmp then
76011: LD_VAR 0 4
76015: NOT
76016: IFFALSE 76020
// exit ;
76018: GO 76079
// for i in tmp do
76020: LD_ADDR_VAR 0 2
76024: PUSH
76025: LD_VAR 0 4
76029: PUSH
76030: FOR_IN
76031: IFFALSE 76077
// for j = 1 to 3 do
76033: LD_ADDR_VAR 0 3
76037: PUSH
76038: DOUBLE
76039: LD_INT 1
76041: DEC
76042: ST_TO_ADDR
76043: LD_INT 3
76045: PUSH
76046: FOR_TO
76047: IFFALSE 76073
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
76049: LD_VAR 0 2
76053: PPUSH
76054: CALL_OW 274
76058: PPUSH
76059: LD_VAR 0 3
76063: PPUSH
76064: LD_INT 99999
76066: PPUSH
76067: CALL_OW 277
76071: GO 76046
76073: POP
76074: POP
76075: GO 76030
76077: POP
76078: POP
// end ;
76079: LD_VAR 0 1
76083: RET
// export function hHackSetLevel10 ; var i , j ; begin
76084: LD_INT 0
76086: PPUSH
76087: PPUSH
76088: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
76089: LD_ADDR_VAR 0 2
76093: PUSH
76094: LD_INT 21
76096: PUSH
76097: LD_INT 1
76099: PUSH
76100: EMPTY
76101: LIST
76102: LIST
76103: PPUSH
76104: CALL_OW 69
76108: PUSH
76109: FOR_IN
76110: IFFALSE 76162
// if IsSelected ( i ) then
76112: LD_VAR 0 2
76116: PPUSH
76117: CALL_OW 306
76121: IFFALSE 76160
// begin for j := 1 to 4 do
76123: LD_ADDR_VAR 0 3
76127: PUSH
76128: DOUBLE
76129: LD_INT 1
76131: DEC
76132: ST_TO_ADDR
76133: LD_INT 4
76135: PUSH
76136: FOR_TO
76137: IFFALSE 76158
// SetSkill ( i , j , 10 ) ;
76139: LD_VAR 0 2
76143: PPUSH
76144: LD_VAR 0 3
76148: PPUSH
76149: LD_INT 10
76151: PPUSH
76152: CALL_OW 237
76156: GO 76136
76158: POP
76159: POP
// end ;
76160: GO 76109
76162: POP
76163: POP
// end ;
76164: LD_VAR 0 1
76168: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
76169: LD_INT 0
76171: PPUSH
76172: PPUSH
76173: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
76174: LD_ADDR_VAR 0 2
76178: PUSH
76179: LD_INT 22
76181: PUSH
76182: LD_OWVAR 2
76186: PUSH
76187: EMPTY
76188: LIST
76189: LIST
76190: PUSH
76191: LD_INT 21
76193: PUSH
76194: LD_INT 1
76196: PUSH
76197: EMPTY
76198: LIST
76199: LIST
76200: PUSH
76201: EMPTY
76202: LIST
76203: LIST
76204: PPUSH
76205: CALL_OW 69
76209: PUSH
76210: FOR_IN
76211: IFFALSE 76252
// begin for j := 1 to 4 do
76213: LD_ADDR_VAR 0 3
76217: PUSH
76218: DOUBLE
76219: LD_INT 1
76221: DEC
76222: ST_TO_ADDR
76223: LD_INT 4
76225: PUSH
76226: FOR_TO
76227: IFFALSE 76248
// SetSkill ( i , j , 10 ) ;
76229: LD_VAR 0 2
76233: PPUSH
76234: LD_VAR 0 3
76238: PPUSH
76239: LD_INT 10
76241: PPUSH
76242: CALL_OW 237
76246: GO 76226
76248: POP
76249: POP
// end ;
76250: GO 76210
76252: POP
76253: POP
// end ;
76254: LD_VAR 0 1
76258: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
76259: LD_INT 0
76261: PPUSH
// uc_side := your_side ;
76262: LD_ADDR_OWVAR 20
76266: PUSH
76267: LD_OWVAR 2
76271: ST_TO_ADDR
// uc_nation := nation ;
76272: LD_ADDR_OWVAR 21
76276: PUSH
76277: LD_VAR 0 1
76281: ST_TO_ADDR
// InitHc ;
76282: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
76286: LD_INT 0
76288: PPUSH
76289: LD_VAR 0 2
76293: PPUSH
76294: LD_VAR 0 3
76298: PPUSH
76299: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
76303: LD_VAR 0 4
76307: PPUSH
76308: LD_VAR 0 5
76312: PPUSH
76313: CALL_OW 428
76317: PUSH
76318: LD_INT 0
76320: EQUAL
76321: IFFALSE 76345
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
76323: CALL_OW 44
76327: PPUSH
76328: LD_VAR 0 4
76332: PPUSH
76333: LD_VAR 0 5
76337: PPUSH
76338: LD_INT 1
76340: PPUSH
76341: CALL_OW 48
// end ;
76345: LD_VAR 0 6
76349: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
76350: LD_INT 0
76352: PPUSH
76353: PPUSH
// uc_side := your_side ;
76354: LD_ADDR_OWVAR 20
76358: PUSH
76359: LD_OWVAR 2
76363: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
76364: LD_VAR 0 1
76368: PUSH
76369: LD_INT 1
76371: PUSH
76372: LD_INT 2
76374: PUSH
76375: LD_INT 3
76377: PUSH
76378: LD_INT 4
76380: PUSH
76381: LD_INT 5
76383: PUSH
76384: EMPTY
76385: LIST
76386: LIST
76387: LIST
76388: LIST
76389: LIST
76390: IN
76391: IFFALSE 76403
// uc_nation := nation_american else
76393: LD_ADDR_OWVAR 21
76397: PUSH
76398: LD_INT 1
76400: ST_TO_ADDR
76401: GO 76446
// if chassis in [ 11 , 12 , 13 , 14 ] then
76403: LD_VAR 0 1
76407: PUSH
76408: LD_INT 11
76410: PUSH
76411: LD_INT 12
76413: PUSH
76414: LD_INT 13
76416: PUSH
76417: LD_INT 14
76419: PUSH
76420: EMPTY
76421: LIST
76422: LIST
76423: LIST
76424: LIST
76425: IN
76426: IFFALSE 76438
// uc_nation := nation_arabian else
76428: LD_ADDR_OWVAR 21
76432: PUSH
76433: LD_INT 2
76435: ST_TO_ADDR
76436: GO 76446
// uc_nation := nation_russian ;
76438: LD_ADDR_OWVAR 21
76442: PUSH
76443: LD_INT 3
76445: ST_TO_ADDR
// vc_chassis := chassis ;
76446: LD_ADDR_OWVAR 37
76450: PUSH
76451: LD_VAR 0 1
76455: ST_TO_ADDR
// vc_engine := engine ;
76456: LD_ADDR_OWVAR 39
76460: PUSH
76461: LD_VAR 0 2
76465: ST_TO_ADDR
// vc_control := control ;
76466: LD_ADDR_OWVAR 38
76470: PUSH
76471: LD_VAR 0 3
76475: ST_TO_ADDR
// vc_weapon := weapon ;
76476: LD_ADDR_OWVAR 40
76480: PUSH
76481: LD_VAR 0 4
76485: ST_TO_ADDR
// un := CreateVehicle ;
76486: LD_ADDR_VAR 0 8
76490: PUSH
76491: CALL_OW 45
76495: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
76496: LD_VAR 0 8
76500: PPUSH
76501: LD_INT 0
76503: PPUSH
76504: LD_INT 5
76506: PPUSH
76507: CALL_OW 12
76511: PPUSH
76512: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
76516: LD_VAR 0 8
76520: PPUSH
76521: LD_VAR 0 5
76525: PPUSH
76526: LD_VAR 0 6
76530: PPUSH
76531: LD_INT 1
76533: PPUSH
76534: CALL_OW 48
// end ;
76538: LD_VAR 0 7
76542: RET
// export hInvincible ; every 1 do
76543: GO 76545
76545: DISABLE
// hInvincible := [ ] ;
76546: LD_ADDR_EXP 103
76550: PUSH
76551: EMPTY
76552: ST_TO_ADDR
76553: END
// every 10 do var i ;
76554: GO 76556
76556: DISABLE
76557: LD_INT 0
76559: PPUSH
// begin enable ;
76560: ENABLE
// if not hInvincible then
76561: LD_EXP 103
76565: NOT
76566: IFFALSE 76570
// exit ;
76568: GO 76614
// for i in hInvincible do
76570: LD_ADDR_VAR 0 1
76574: PUSH
76575: LD_EXP 103
76579: PUSH
76580: FOR_IN
76581: IFFALSE 76612
// if GetLives ( i ) < 1000 then
76583: LD_VAR 0 1
76587: PPUSH
76588: CALL_OW 256
76592: PUSH
76593: LD_INT 1000
76595: LESS
76596: IFFALSE 76610
// SetLives ( i , 1000 ) ;
76598: LD_VAR 0 1
76602: PPUSH
76603: LD_INT 1000
76605: PPUSH
76606: CALL_OW 234
76610: GO 76580
76612: POP
76613: POP
// end ;
76614: PPOPN 1
76616: END
// export function hHackInvincible ; var i ; begin
76617: LD_INT 0
76619: PPUSH
76620: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
76621: LD_ADDR_VAR 0 2
76625: PUSH
76626: LD_INT 2
76628: PUSH
76629: LD_INT 21
76631: PUSH
76632: LD_INT 1
76634: PUSH
76635: EMPTY
76636: LIST
76637: LIST
76638: PUSH
76639: LD_INT 21
76641: PUSH
76642: LD_INT 2
76644: PUSH
76645: EMPTY
76646: LIST
76647: LIST
76648: PUSH
76649: EMPTY
76650: LIST
76651: LIST
76652: LIST
76653: PPUSH
76654: CALL_OW 69
76658: PUSH
76659: FOR_IN
76660: IFFALSE 76721
// if IsSelected ( i ) then
76662: LD_VAR 0 2
76666: PPUSH
76667: CALL_OW 306
76671: IFFALSE 76719
// begin if i in hInvincible then
76673: LD_VAR 0 2
76677: PUSH
76678: LD_EXP 103
76682: IN
76683: IFFALSE 76703
// hInvincible := hInvincible diff i else
76685: LD_ADDR_EXP 103
76689: PUSH
76690: LD_EXP 103
76694: PUSH
76695: LD_VAR 0 2
76699: DIFF
76700: ST_TO_ADDR
76701: GO 76719
// hInvincible := hInvincible union i ;
76703: LD_ADDR_EXP 103
76707: PUSH
76708: LD_EXP 103
76712: PUSH
76713: LD_VAR 0 2
76717: UNION
76718: ST_TO_ADDR
// end ;
76719: GO 76659
76721: POP
76722: POP
// end ;
76723: LD_VAR 0 1
76727: RET
// export function hHackInvisible ; var i , j ; begin
76728: LD_INT 0
76730: PPUSH
76731: PPUSH
76732: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
76733: LD_ADDR_VAR 0 2
76737: PUSH
76738: LD_INT 21
76740: PUSH
76741: LD_INT 1
76743: PUSH
76744: EMPTY
76745: LIST
76746: LIST
76747: PPUSH
76748: CALL_OW 69
76752: PUSH
76753: FOR_IN
76754: IFFALSE 76778
// if IsSelected ( i ) then
76756: LD_VAR 0 2
76760: PPUSH
76761: CALL_OW 306
76765: IFFALSE 76776
// ComForceInvisible ( i ) ;
76767: LD_VAR 0 2
76771: PPUSH
76772: CALL_OW 496
76776: GO 76753
76778: POP
76779: POP
// end ;
76780: LD_VAR 0 1
76784: RET
// export function hHackChangeYourSide ; begin
76785: LD_INT 0
76787: PPUSH
// if your_side = 8 then
76788: LD_OWVAR 2
76792: PUSH
76793: LD_INT 8
76795: EQUAL
76796: IFFALSE 76808
// your_side := 0 else
76798: LD_ADDR_OWVAR 2
76802: PUSH
76803: LD_INT 0
76805: ST_TO_ADDR
76806: GO 76822
// your_side := your_side + 1 ;
76808: LD_ADDR_OWVAR 2
76812: PUSH
76813: LD_OWVAR 2
76817: PUSH
76818: LD_INT 1
76820: PLUS
76821: ST_TO_ADDR
// end ;
76822: LD_VAR 0 1
76826: RET
// export function hHackChangeUnitSide ; var i , j ; begin
76827: LD_INT 0
76829: PPUSH
76830: PPUSH
76831: PPUSH
// for i in all_units do
76832: LD_ADDR_VAR 0 2
76836: PUSH
76837: LD_OWVAR 3
76841: PUSH
76842: FOR_IN
76843: IFFALSE 76921
// if IsSelected ( i ) then
76845: LD_VAR 0 2
76849: PPUSH
76850: CALL_OW 306
76854: IFFALSE 76919
// begin j := GetSide ( i ) ;
76856: LD_ADDR_VAR 0 3
76860: PUSH
76861: LD_VAR 0 2
76865: PPUSH
76866: CALL_OW 255
76870: ST_TO_ADDR
// if j = 8 then
76871: LD_VAR 0 3
76875: PUSH
76876: LD_INT 8
76878: EQUAL
76879: IFFALSE 76891
// j := 0 else
76881: LD_ADDR_VAR 0 3
76885: PUSH
76886: LD_INT 0
76888: ST_TO_ADDR
76889: GO 76905
// j := j + 1 ;
76891: LD_ADDR_VAR 0 3
76895: PUSH
76896: LD_VAR 0 3
76900: PUSH
76901: LD_INT 1
76903: PLUS
76904: ST_TO_ADDR
// SetSide ( i , j ) ;
76905: LD_VAR 0 2
76909: PPUSH
76910: LD_VAR 0 3
76914: PPUSH
76915: CALL_OW 235
// end ;
76919: GO 76842
76921: POP
76922: POP
// end ;
76923: LD_VAR 0 1
76927: RET
// export function hHackFog ; begin
76928: LD_INT 0
76930: PPUSH
// FogOff ( true ) ;
76931: LD_INT 1
76933: PPUSH
76934: CALL_OW 344
// end ;
76938: LD_VAR 0 1
76942: RET
// export function hHackTeleport ( unit , x , y ) ; begin
76943: LD_INT 0
76945: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
76946: LD_VAR 0 1
76950: PPUSH
76951: LD_VAR 0 2
76955: PPUSH
76956: LD_VAR 0 3
76960: PPUSH
76961: LD_INT 1
76963: PPUSH
76964: LD_INT 1
76966: PPUSH
76967: CALL_OW 483
// CenterOnXY ( x , y ) ;
76971: LD_VAR 0 2
76975: PPUSH
76976: LD_VAR 0 3
76980: PPUSH
76981: CALL_OW 84
// end ;
76985: LD_VAR 0 4
76989: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
76990: LD_INT 0
76992: PPUSH
76993: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
76994: LD_VAR 0 1
76998: NOT
76999: PUSH
77000: LD_VAR 0 2
77004: PPUSH
77005: LD_VAR 0 3
77009: PPUSH
77010: CALL_OW 488
77014: NOT
77015: OR
77016: PUSH
77017: LD_VAR 0 1
77021: PPUSH
77022: CALL_OW 266
77026: PUSH
77027: LD_INT 3
77029: NONEQUAL
77030: PUSH
77031: LD_VAR 0 1
77035: PPUSH
77036: CALL_OW 247
77040: PUSH
77041: LD_INT 1
77043: EQUAL
77044: NOT
77045: AND
77046: OR
77047: IFFALSE 77051
// exit ;
77049: GO 77200
// if GetType ( factory ) = unit_human then
77051: LD_VAR 0 1
77055: PPUSH
77056: CALL_OW 247
77060: PUSH
77061: LD_INT 1
77063: EQUAL
77064: IFFALSE 77081
// factory := IsInUnit ( factory ) ;
77066: LD_ADDR_VAR 0 1
77070: PUSH
77071: LD_VAR 0 1
77075: PPUSH
77076: CALL_OW 310
77080: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
77081: LD_VAR 0 1
77085: PPUSH
77086: CALL_OW 266
77090: PUSH
77091: LD_INT 3
77093: NONEQUAL
77094: IFFALSE 77098
// exit ;
77096: GO 77200
// if HexInfo ( x , y ) = factory then
77098: LD_VAR 0 2
77102: PPUSH
77103: LD_VAR 0 3
77107: PPUSH
77108: CALL_OW 428
77112: PUSH
77113: LD_VAR 0 1
77117: EQUAL
77118: IFFALSE 77145
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
77120: LD_ADDR_EXP 104
77124: PUSH
77125: LD_EXP 104
77129: PPUSH
77130: LD_VAR 0 1
77134: PPUSH
77135: LD_INT 0
77137: PPUSH
77138: CALL_OW 1
77142: ST_TO_ADDR
77143: GO 77196
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
77145: LD_ADDR_EXP 104
77149: PUSH
77150: LD_EXP 104
77154: PPUSH
77155: LD_VAR 0 1
77159: PPUSH
77160: LD_VAR 0 1
77164: PPUSH
77165: CALL_OW 255
77169: PUSH
77170: LD_VAR 0 1
77174: PUSH
77175: LD_VAR 0 2
77179: PUSH
77180: LD_VAR 0 3
77184: PUSH
77185: EMPTY
77186: LIST
77187: LIST
77188: LIST
77189: LIST
77190: PPUSH
77191: CALL_OW 1
77195: ST_TO_ADDR
// UpdateFactoryWaypoints ;
77196: CALL 77205 0 0
// end ;
77200: LD_VAR 0 4
77204: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
77205: LD_INT 0
77207: PPUSH
77208: PPUSH
77209: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
77210: LD_STRING resetFactoryWaypoint();
77212: PPUSH
77213: CALL_OW 559
// if factoryWaypoints then
77217: LD_EXP 104
77221: IFFALSE 77347
// begin list := PrepareArray ( factoryWaypoints ) ;
77223: LD_ADDR_VAR 0 3
77227: PUSH
77228: LD_EXP 104
77232: PPUSH
77233: CALL 57144 0 1
77237: ST_TO_ADDR
// for i := 1 to list do
77238: LD_ADDR_VAR 0 2
77242: PUSH
77243: DOUBLE
77244: LD_INT 1
77246: DEC
77247: ST_TO_ADDR
77248: LD_VAR 0 3
77252: PUSH
77253: FOR_TO
77254: IFFALSE 77345
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
77256: LD_STRING setFactoryWaypointXY(
77258: PUSH
77259: LD_VAR 0 3
77263: PUSH
77264: LD_VAR 0 2
77268: ARRAY
77269: PUSH
77270: LD_INT 1
77272: ARRAY
77273: STR
77274: PUSH
77275: LD_STRING ,
77277: STR
77278: PUSH
77279: LD_VAR 0 3
77283: PUSH
77284: LD_VAR 0 2
77288: ARRAY
77289: PUSH
77290: LD_INT 2
77292: ARRAY
77293: STR
77294: PUSH
77295: LD_STRING ,
77297: STR
77298: PUSH
77299: LD_VAR 0 3
77303: PUSH
77304: LD_VAR 0 2
77308: ARRAY
77309: PUSH
77310: LD_INT 3
77312: ARRAY
77313: STR
77314: PUSH
77315: LD_STRING ,
77317: STR
77318: PUSH
77319: LD_VAR 0 3
77323: PUSH
77324: LD_VAR 0 2
77328: ARRAY
77329: PUSH
77330: LD_INT 4
77332: ARRAY
77333: STR
77334: PUSH
77335: LD_STRING )
77337: STR
77338: PPUSH
77339: CALL_OW 559
77343: GO 77253
77345: POP
77346: POP
// end ; end ;
77347: LD_VAR 0 1
77351: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
77352: LD_INT 0
77354: PPUSH
// if HexInfo ( x , y ) = warehouse then
77355: LD_VAR 0 2
77359: PPUSH
77360: LD_VAR 0 3
77364: PPUSH
77365: CALL_OW 428
77369: PUSH
77370: LD_VAR 0 1
77374: EQUAL
77375: IFFALSE 77402
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
77377: LD_ADDR_EXP 105
77381: PUSH
77382: LD_EXP 105
77386: PPUSH
77387: LD_VAR 0 1
77391: PPUSH
77392: LD_INT 0
77394: PPUSH
77395: CALL_OW 1
77399: ST_TO_ADDR
77400: GO 77453
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
77402: LD_ADDR_EXP 105
77406: PUSH
77407: LD_EXP 105
77411: PPUSH
77412: LD_VAR 0 1
77416: PPUSH
77417: LD_VAR 0 1
77421: PPUSH
77422: CALL_OW 255
77426: PUSH
77427: LD_VAR 0 1
77431: PUSH
77432: LD_VAR 0 2
77436: PUSH
77437: LD_VAR 0 3
77441: PUSH
77442: EMPTY
77443: LIST
77444: LIST
77445: LIST
77446: LIST
77447: PPUSH
77448: CALL_OW 1
77452: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
77453: CALL 77462 0 0
// end ;
77457: LD_VAR 0 4
77461: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
77462: LD_INT 0
77464: PPUSH
77465: PPUSH
77466: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
77467: LD_STRING resetWarehouseGatheringPoints();
77469: PPUSH
77470: CALL_OW 559
// if warehouseGatheringPoints then
77474: LD_EXP 105
77478: IFFALSE 77604
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
77480: LD_ADDR_VAR 0 3
77484: PUSH
77485: LD_EXP 105
77489: PPUSH
77490: CALL 57144 0 1
77494: ST_TO_ADDR
// for i := 1 to list do
77495: LD_ADDR_VAR 0 2
77499: PUSH
77500: DOUBLE
77501: LD_INT 1
77503: DEC
77504: ST_TO_ADDR
77505: LD_VAR 0 3
77509: PUSH
77510: FOR_TO
77511: IFFALSE 77602
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
77513: LD_STRING setWarehouseGatheringPointXY(
77515: PUSH
77516: LD_VAR 0 3
77520: PUSH
77521: LD_VAR 0 2
77525: ARRAY
77526: PUSH
77527: LD_INT 1
77529: ARRAY
77530: STR
77531: PUSH
77532: LD_STRING ,
77534: STR
77535: PUSH
77536: LD_VAR 0 3
77540: PUSH
77541: LD_VAR 0 2
77545: ARRAY
77546: PUSH
77547: LD_INT 2
77549: ARRAY
77550: STR
77551: PUSH
77552: LD_STRING ,
77554: STR
77555: PUSH
77556: LD_VAR 0 3
77560: PUSH
77561: LD_VAR 0 2
77565: ARRAY
77566: PUSH
77567: LD_INT 3
77569: ARRAY
77570: STR
77571: PUSH
77572: LD_STRING ,
77574: STR
77575: PUSH
77576: LD_VAR 0 3
77580: PUSH
77581: LD_VAR 0 2
77585: ARRAY
77586: PUSH
77587: LD_INT 4
77589: ARRAY
77590: STR
77591: PUSH
77592: LD_STRING )
77594: STR
77595: PPUSH
77596: CALL_OW 559
77600: GO 77510
77602: POP
77603: POP
// end ; end ;
77604: LD_VAR 0 1
77608: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
77609: LD_EXP 105
77613: IFFALSE 78298
77615: GO 77617
77617: DISABLE
77618: LD_INT 0
77620: PPUSH
77621: PPUSH
77622: PPUSH
77623: PPUSH
77624: PPUSH
77625: PPUSH
77626: PPUSH
77627: PPUSH
77628: PPUSH
// begin enable ;
77629: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
77630: LD_ADDR_VAR 0 3
77634: PUSH
77635: LD_EXP 105
77639: PPUSH
77640: CALL 57144 0 1
77644: ST_TO_ADDR
// if not list then
77645: LD_VAR 0 3
77649: NOT
77650: IFFALSE 77654
// exit ;
77652: GO 78298
// for i := 1 to list do
77654: LD_ADDR_VAR 0 1
77658: PUSH
77659: DOUBLE
77660: LD_INT 1
77662: DEC
77663: ST_TO_ADDR
77664: LD_VAR 0 3
77668: PUSH
77669: FOR_TO
77670: IFFALSE 78296
// begin depot := list [ i ] [ 2 ] ;
77672: LD_ADDR_VAR 0 8
77676: PUSH
77677: LD_VAR 0 3
77681: PUSH
77682: LD_VAR 0 1
77686: ARRAY
77687: PUSH
77688: LD_INT 2
77690: ARRAY
77691: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
77692: LD_ADDR_VAR 0 5
77696: PUSH
77697: LD_VAR 0 3
77701: PUSH
77702: LD_VAR 0 1
77706: ARRAY
77707: PUSH
77708: LD_INT 1
77710: ARRAY
77711: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
77712: LD_VAR 0 8
77716: PPUSH
77717: CALL_OW 301
77721: PUSH
77722: LD_VAR 0 5
77726: PUSH
77727: LD_VAR 0 8
77731: PPUSH
77732: CALL_OW 255
77736: NONEQUAL
77737: OR
77738: IFFALSE 77767
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
77740: LD_ADDR_EXP 105
77744: PUSH
77745: LD_EXP 105
77749: PPUSH
77750: LD_VAR 0 8
77754: PPUSH
77755: LD_INT 0
77757: PPUSH
77758: CALL_OW 1
77762: ST_TO_ADDR
// exit ;
77763: POP
77764: POP
77765: GO 78298
// end ; x := list [ i ] [ 3 ] ;
77767: LD_ADDR_VAR 0 6
77771: PUSH
77772: LD_VAR 0 3
77776: PUSH
77777: LD_VAR 0 1
77781: ARRAY
77782: PUSH
77783: LD_INT 3
77785: ARRAY
77786: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
77787: LD_ADDR_VAR 0 7
77791: PUSH
77792: LD_VAR 0 3
77796: PUSH
77797: LD_VAR 0 1
77801: ARRAY
77802: PUSH
77803: LD_INT 4
77805: ARRAY
77806: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
77807: LD_ADDR_VAR 0 9
77811: PUSH
77812: LD_VAR 0 6
77816: PPUSH
77817: LD_VAR 0 7
77821: PPUSH
77822: LD_INT 16
77824: PPUSH
77825: CALL 55732 0 3
77829: ST_TO_ADDR
// if not cratesNearbyPoint then
77830: LD_VAR 0 9
77834: NOT
77835: IFFALSE 77841
// exit ;
77837: POP
77838: POP
77839: GO 78298
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
77841: LD_ADDR_VAR 0 4
77845: PUSH
77846: LD_INT 22
77848: PUSH
77849: LD_VAR 0 5
77853: PUSH
77854: EMPTY
77855: LIST
77856: LIST
77857: PUSH
77858: LD_INT 3
77860: PUSH
77861: LD_INT 60
77863: PUSH
77864: EMPTY
77865: LIST
77866: PUSH
77867: EMPTY
77868: LIST
77869: LIST
77870: PUSH
77871: LD_INT 91
77873: PUSH
77874: LD_VAR 0 8
77878: PUSH
77879: LD_INT 6
77881: PUSH
77882: EMPTY
77883: LIST
77884: LIST
77885: LIST
77886: PUSH
77887: LD_INT 2
77889: PUSH
77890: LD_INT 25
77892: PUSH
77893: LD_INT 2
77895: PUSH
77896: EMPTY
77897: LIST
77898: LIST
77899: PUSH
77900: LD_INT 25
77902: PUSH
77903: LD_INT 16
77905: PUSH
77906: EMPTY
77907: LIST
77908: LIST
77909: PUSH
77910: EMPTY
77911: LIST
77912: LIST
77913: LIST
77914: PUSH
77915: EMPTY
77916: LIST
77917: LIST
77918: LIST
77919: LIST
77920: PPUSH
77921: CALL_OW 69
77925: PUSH
77926: LD_VAR 0 8
77930: PPUSH
77931: CALL_OW 313
77935: PPUSH
77936: LD_INT 3
77938: PUSH
77939: LD_INT 60
77941: PUSH
77942: EMPTY
77943: LIST
77944: PUSH
77945: EMPTY
77946: LIST
77947: LIST
77948: PUSH
77949: LD_INT 2
77951: PUSH
77952: LD_INT 25
77954: PUSH
77955: LD_INT 2
77957: PUSH
77958: EMPTY
77959: LIST
77960: LIST
77961: PUSH
77962: LD_INT 25
77964: PUSH
77965: LD_INT 16
77967: PUSH
77968: EMPTY
77969: LIST
77970: LIST
77971: PUSH
77972: EMPTY
77973: LIST
77974: LIST
77975: LIST
77976: PUSH
77977: EMPTY
77978: LIST
77979: LIST
77980: PPUSH
77981: CALL_OW 72
77985: UNION
77986: ST_TO_ADDR
// if tmp then
77987: LD_VAR 0 4
77991: IFFALSE 78071
// begin tmp := ShrinkArray ( tmp , 3 ) ;
77993: LD_ADDR_VAR 0 4
77997: PUSH
77998: LD_VAR 0 4
78002: PPUSH
78003: LD_INT 3
78005: PPUSH
78006: CALL 53701 0 2
78010: ST_TO_ADDR
// for j in tmp do
78011: LD_ADDR_VAR 0 2
78015: PUSH
78016: LD_VAR 0 4
78020: PUSH
78021: FOR_IN
78022: IFFALSE 78065
// begin if IsInUnit ( j ) then
78024: LD_VAR 0 2
78028: PPUSH
78029: CALL_OW 310
78033: IFFALSE 78044
// ComExit ( j ) ;
78035: LD_VAR 0 2
78039: PPUSH
78040: CALL 53784 0 1
// AddComCollect ( j , x , y ) ;
78044: LD_VAR 0 2
78048: PPUSH
78049: LD_VAR 0 6
78053: PPUSH
78054: LD_VAR 0 7
78058: PPUSH
78059: CALL_OW 177
// end ;
78063: GO 78021
78065: POP
78066: POP
// exit ;
78067: POP
78068: POP
78069: GO 78298
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
78071: LD_ADDR_VAR 0 4
78075: PUSH
78076: LD_INT 22
78078: PUSH
78079: LD_VAR 0 5
78083: PUSH
78084: EMPTY
78085: LIST
78086: LIST
78087: PUSH
78088: LD_INT 91
78090: PUSH
78091: LD_VAR 0 8
78095: PUSH
78096: LD_INT 8
78098: PUSH
78099: EMPTY
78100: LIST
78101: LIST
78102: LIST
78103: PUSH
78104: LD_INT 2
78106: PUSH
78107: LD_INT 34
78109: PUSH
78110: LD_INT 12
78112: PUSH
78113: EMPTY
78114: LIST
78115: LIST
78116: PUSH
78117: LD_INT 34
78119: PUSH
78120: LD_INT 51
78122: PUSH
78123: EMPTY
78124: LIST
78125: LIST
78126: PUSH
78127: LD_INT 34
78129: PUSH
78130: LD_INT 32
78132: PUSH
78133: EMPTY
78134: LIST
78135: LIST
78136: PUSH
78137: LD_INT 34
78139: PUSH
78140: LD_INT 89
78142: PUSH
78143: EMPTY
78144: LIST
78145: LIST
78146: PUSH
78147: EMPTY
78148: LIST
78149: LIST
78150: LIST
78151: LIST
78152: LIST
78153: PUSH
78154: EMPTY
78155: LIST
78156: LIST
78157: LIST
78158: PPUSH
78159: CALL_OW 69
78163: ST_TO_ADDR
// if tmp then
78164: LD_VAR 0 4
78168: IFFALSE 78294
// begin for j in tmp do
78170: LD_ADDR_VAR 0 2
78174: PUSH
78175: LD_VAR 0 4
78179: PUSH
78180: FOR_IN
78181: IFFALSE 78292
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
78183: LD_VAR 0 2
78187: PPUSH
78188: CALL_OW 262
78192: PUSH
78193: LD_INT 3
78195: EQUAL
78196: PUSH
78197: LD_VAR 0 2
78201: PPUSH
78202: CALL_OW 261
78206: PUSH
78207: LD_INT 20
78209: GREATER
78210: OR
78211: PUSH
78212: LD_VAR 0 2
78216: PPUSH
78217: CALL_OW 314
78221: NOT
78222: AND
78223: PUSH
78224: LD_VAR 0 2
78228: PPUSH
78229: CALL_OW 263
78233: PUSH
78234: LD_INT 1
78236: NONEQUAL
78237: PUSH
78238: LD_VAR 0 2
78242: PPUSH
78243: CALL_OW 311
78247: OR
78248: AND
78249: IFFALSE 78290
// begin ComCollect ( j , x , y ) ;
78251: LD_VAR 0 2
78255: PPUSH
78256: LD_VAR 0 6
78260: PPUSH
78261: LD_VAR 0 7
78265: PPUSH
78266: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
78270: LD_VAR 0 2
78274: PPUSH
78275: LD_VAR 0 8
78279: PPUSH
78280: CALL_OW 172
// exit ;
78284: POP
78285: POP
78286: POP
78287: POP
78288: GO 78298
// end ;
78290: GO 78180
78292: POP
78293: POP
// end ; end ;
78294: GO 77669
78296: POP
78297: POP
// end ; end_of_file
78298: PPOPN 9
78300: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78301: LD_VAR 0 1
78305: PPUSH
78306: LD_VAR 0 2
78310: PPUSH
78311: LD_VAR 0 3
78315: PPUSH
78316: LD_VAR 0 4
78320: PPUSH
78321: LD_VAR 0 5
78325: PPUSH
78326: LD_VAR 0 6
78330: PPUSH
78331: CALL 62654 0 6
// end ;
78335: PPOPN 6
78337: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
78338: LD_INT 0
78340: PPUSH
// begin if not units then
78341: LD_VAR 0 1
78345: NOT
78346: IFFALSE 78350
// exit ;
78348: GO 78350
// end ;
78350: PPOPN 7
78352: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78353: CALL 62558 0 0
// end ; end_of_file
78357: PPOPN 1
78359: END
