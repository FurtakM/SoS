// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 74344 0 0
// Init ;
   8: CALL 66 0 0
// AnimateTrees ( true ) ;
  12: LD_INT 1
  14: PPUSH
  15: CALL_OW 573
// CreateNature ( apemanSpawnArea , forestArea , riverArea ) ;
  19: LD_INT 4
  21: PPUSH
  22: LD_INT 5
  24: PPUSH
  25: LD_INT 6
  27: PPUSH
  28: CALL 379 0 3
// PrepareAmerican ;
  32: CALL 2459 0 0
// PrepareArabian ;
  36: CALL 1177 0 0
// Action ;
  40: CALL 7167 0 0
// if debug then
  44: LD_EXP 1
  48: IFFALSE 65
// begin Difficulty := 4 ;
  50: LD_ADDR_OWVAR 67
  54: PUSH
  55: LD_INT 4
  57: ST_TO_ADDR
// FogOff ( 2 ) ;
  58: LD_INT 2
  60: PPUSH
  61: CALL_OW 344
// end ; end ;
  65: END
// export debug , prefix , scoutActive , scoutFailed , scoutSuccess , usAttacksAllowed , usSurrender , russianAttack , hasRockets , seeRemoteVehicle , seeHeavyGun ; function Init ; begin
  66: LD_INT 0
  68: PPUSH
// debug := false ;
  69: LD_ADDR_EXP 1
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// prefix := 06_ ;
  77: LD_ADDR_EXP 2
  81: PUSH
  82: LD_STRING 06_
  84: ST_TO_ADDR
// scoutActive := 0 ;
  85: LD_ADDR_EXP 3
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// scoutFailed := false ;
  93: LD_ADDR_EXP 4
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// scoutSuccess := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// usAttacksAllowed := false ;
 109: LD_ADDR_EXP 6
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// usSurrender := false ;
 117: LD_ADDR_EXP 7
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// russianAttack := false ;
 125: LD_ADDR_EXP 8
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// hasRockets := false ;
 133: LD_ADDR_EXP 9
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// seeRemoteVehicle := false ;
 141: LD_ADDR_EXP 10
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// seeHeavyGun := false ;
 149: LD_ADDR_EXP 11
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// end ; end_of_file
 157: LD_VAR 0 1
 161: RET
// export function SayX ( units , ident ) ; var i ; begin
 162: LD_INT 0
 164: PPUSH
 165: PPUSH
// result := false ;
 166: LD_ADDR_VAR 0 3
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// if not units then
 174: LD_VAR 0 1
 178: NOT
 179: IFFALSE 183
// exit ;
 181: GO 237
// for i in units do
 183: LD_ADDR_VAR 0 4
 187: PUSH
 188: LD_VAR 0 1
 192: PUSH
 193: FOR_IN
 194: IFFALSE 235
// if IsOk ( i ) then
 196: LD_VAR 0 4
 200: PPUSH
 201: CALL_OW 302
 205: IFFALSE 233
// begin Say ( i , ident ) ;
 207: LD_VAR 0 4
 211: PPUSH
 212: LD_VAR 0 2
 216: PPUSH
 217: CALL_OW 88
// result := i ;
 221: LD_ADDR_VAR 0 3
 225: PUSH
 226: LD_VAR 0 4
 230: ST_TO_ADDR
// break ;
 231: GO 235
// end ;
 233: GO 193
 235: POP
 236: POP
// end ;
 237: LD_VAR 0 3
 241: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 242: LD_INT 0
 244: PPUSH
 245: PPUSH
// InitUc ;
 246: CALL_OW 18
// InitHc ;
 250: CALL_OW 19
// uc_side := 0 ;
 254: LD_ADDR_OWVAR 20
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// uc_nation := 0 ;
 262: LD_ADDR_OWVAR 21
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// for i = 1 to amount do
 270: LD_ADDR_VAR 0 4
 274: PUSH
 275: DOUBLE
 276: LD_INT 1
 278: DEC
 279: ST_TO_ADDR
 280: LD_VAR 0 2
 284: PUSH
 285: FOR_TO
 286: IFFALSE 368
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 288: LD_ADDR_OWVAR 29
 292: PUSH
 293: LD_INT 9
 295: PPUSH
 296: LD_INT 12
 298: PPUSH
 299: CALL_OW 12
 303: PUSH
 304: LD_INT 9
 306: PPUSH
 307: LD_INT 12
 309: PPUSH
 310: CALL_OW 12
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 319: LD_ADDR_OWVAR 35
 323: PUSH
 324: LD_INT 1
 326: NEG
 327: PPUSH
 328: LD_INT 1
 330: PPUSH
 331: CALL_OW 12
 335: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 336: LD_INT 0
 338: PPUSH
 339: LD_INT 12
 341: PPUSH
 342: LD_INT 1
 344: PPUSH
 345: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 349: CALL_OW 44
 353: PPUSH
 354: LD_VAR 0 1
 358: PPUSH
 359: LD_INT 0
 361: PPUSH
 362: CALL_OW 49
// end ;
 366: GO 285
 368: POP
 369: POP
// InitHc ;
 370: CALL_OW 19
// end ;
 374: LD_VAR 0 3
 378: RET
// export function CreateNature ( apemanArea , forest , water ) ; var i ; begin
 379: LD_INT 0
 381: PPUSH
 382: PPUSH
// uc_side := 0 ;
 383: LD_ADDR_OWVAR 20
 387: PUSH
 388: LD_INT 0
 390: ST_TO_ADDR
// uc_nation := 0 ;
 391: LD_ADDR_OWVAR 21
 395: PUSH
 396: LD_INT 0
 398: ST_TO_ADDR
// SpawnApeman ( apemanArea , [ 9 , 8 , 7 , 6 ] [ Difficulty ] ) ;
 399: LD_VAR 0 1
 403: PPUSH
 404: LD_INT 9
 406: PUSH
 407: LD_INT 8
 409: PUSH
 410: LD_INT 7
 412: PUSH
 413: LD_INT 6
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: LIST
 420: LIST
 421: PUSH
 422: LD_OWVAR 67
 426: ARRAY
 427: PPUSH
 428: CALL 242 0 2
// for i := 1 to 4 do
 432: LD_ADDR_VAR 0 5
 436: PUSH
 437: DOUBLE
 438: LD_INT 1
 440: DEC
 441: ST_TO_ADDR
 442: LD_INT 4
 444: PUSH
 445: FOR_TO
 446: IFFALSE 485
// begin hc_class := class_horse ;
 448: LD_ADDR_OWVAR 28
 452: PUSH
 453: LD_EXP 119
 457: ST_TO_ADDR
// hc_gallery :=  ;
 458: LD_ADDR_OWVAR 33
 462: PUSH
 463: LD_STRING 
 465: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 466: CALL_OW 44
 470: PPUSH
 471: LD_VAR 0 2
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 49
// end ;
 483: GO 445
 485: POP
 486: POP
// for i = 1 to 5 do
 487: LD_ADDR_VAR 0 5
 491: PUSH
 492: DOUBLE
 493: LD_INT 1
 495: DEC
 496: ST_TO_ADDR
 497: LD_INT 5
 499: PUSH
 500: FOR_TO
 501: IFFALSE 555
// begin hc_class = class_tiger ;
 503: LD_ADDR_OWVAR 28
 507: PUSH
 508: LD_INT 14
 510: ST_TO_ADDR
// hc_gallery =  ;
 511: LD_ADDR_OWVAR 33
 515: PUSH
 516: LD_STRING 
 518: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 519: LD_ADDR_OWVAR 35
 523: PUSH
 524: LD_INT 7
 526: NEG
 527: PPUSH
 528: LD_INT 7
 530: PPUSH
 531: CALL_OW 12
 535: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
 536: CALL_OW 44
 540: PPUSH
 541: LD_VAR 0 2
 545: PPUSH
 546: LD_INT 0
 548: PPUSH
 549: CALL 50735 0 3
// end ;
 553: GO 500
 555: POP
 556: POP
// for i := 1 to 4 do
 557: LD_ADDR_VAR 0 5
 561: PUSH
 562: DOUBLE
 563: LD_INT 1
 565: DEC
 566: ST_TO_ADDR
 567: LD_INT 4
 569: PUSH
 570: FOR_TO
 571: IFFALSE 608
// begin hc_class := class_phororhacos ;
 573: LD_ADDR_OWVAR 28
 577: PUSH
 578: LD_INT 18
 580: ST_TO_ADDR
// hc_gallery :=  ;
 581: LD_ADDR_OWVAR 33
 585: PUSH
 586: LD_STRING 
 588: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 589: CALL_OW 44
 593: PPUSH
 594: LD_VAR 0 2
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: CALL_OW 49
// end ;
 606: GO 570
 608: POP
 609: POP
// for i := 1 to 4 do
 610: LD_ADDR_VAR 0 5
 614: PUSH
 615: DOUBLE
 616: LD_INT 1
 618: DEC
 619: ST_TO_ADDR
 620: LD_INT 4
 622: PUSH
 623: FOR_TO
 624: IFFALSE 661
// begin hc_class := class_baggie ;
 626: LD_ADDR_OWVAR 28
 630: PUSH
 631: LD_INT 13
 633: ST_TO_ADDR
// hc_gallery :=  ;
 634: LD_ADDR_OWVAR 33
 638: PUSH
 639: LD_STRING 
 641: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 642: CALL_OW 44
 646: PPUSH
 647: LD_VAR 0 2
 651: PPUSH
 652: LD_INT 0
 654: PPUSH
 655: CALL_OW 49
// end ;
 659: GO 623
 661: POP
 662: POP
// for i := 1 to 5 do
 663: LD_ADDR_VAR 0 5
 667: PUSH
 668: DOUBLE
 669: LD_INT 1
 671: DEC
 672: ST_TO_ADDR
 673: LD_INT 5
 675: PUSH
 676: FOR_TO
 677: IFFALSE 714
// begin hc_class := class_fish ;
 679: LD_ADDR_OWVAR 28
 683: PUSH
 684: LD_INT 20
 686: ST_TO_ADDR
// hc_gallery :=  ;
 687: LD_ADDR_OWVAR 33
 691: PUSH
 692: LD_STRING 
 694: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , water , false ) ;
 695: CALL_OW 44
 699: PPUSH
 700: LD_VAR 0 3
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: CALL_OW 49
// end ;
 712: GO 676
 714: POP
 715: POP
// end ;
 716: LD_VAR 0 4
 720: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 721: LD_INT 0
 723: PPUSH
 724: PPUSH
 725: PPUSH
// if not observer or not unit then
 726: LD_VAR 0 1
 730: NOT
 731: PUSH
 732: LD_VAR 0 2
 736: NOT
 737: OR
 738: IFFALSE 742
// exit ;
 740: GO 790
// if not See ( GetSide ( observer ) , unit ) then
 742: LD_VAR 0 1
 746: PPUSH
 747: CALL_OW 255
 751: PPUSH
 752: LD_VAR 0 2
 756: PPUSH
 757: CALL_OW 292
 761: NOT
 762: IFFALSE 766
// exit ;
 764: GO 790
// result := GetDistUnits ( observer , unit ) < 12 ;
 766: LD_ADDR_VAR 0 3
 770: PUSH
 771: LD_VAR 0 1
 775: PPUSH
 776: LD_VAR 0 2
 780: PPUSH
 781: CALL_OW 296
 785: PUSH
 786: LD_INT 12
 788: LESS
 789: ST_TO_ADDR
// end ;
 790: LD_VAR 0 3
 794: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 795: LD_INT 0
 797: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 798: LD_VAR 0 2
 802: PUSH
 803: LD_INT 1
 805: ARRAY
 806: PPUSH
 807: LD_VAR 0 2
 811: PUSH
 812: LD_INT 2
 814: ARRAY
 815: PPUSH
 816: CALL_OW 488
 820: PUSH
 821: LD_VAR 0 2
 825: PUSH
 826: LD_INT 1
 828: ARRAY
 829: PPUSH
 830: LD_VAR 0 2
 834: PUSH
 835: LD_INT 2
 837: ARRAY
 838: PPUSH
 839: CALL_OW 428
 843: PUSH
 844: LD_INT 0
 846: EQUAL
 847: AND
 848: IFFALSE 882
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 850: LD_VAR 0 1
 854: PPUSH
 855: LD_VAR 0 2
 859: PUSH
 860: LD_INT 1
 862: ARRAY
 863: PPUSH
 864: LD_VAR 0 2
 868: PUSH
 869: LD_INT 2
 871: ARRAY
 872: PPUSH
 873: LD_VAR 0 3
 877: PPUSH
 878: CALL_OW 48
// end ;
 882: LD_VAR 0 4
 886: RET
// export function ReverseArray ( array ) ; var i ; begin
 887: LD_INT 0
 889: PPUSH
 890: PPUSH
// if not array then
 891: LD_VAR 0 1
 895: NOT
 896: IFFALSE 900
// exit ;
 898: GO 958
// result := [ ] ;
 900: LD_ADDR_VAR 0 2
 904: PUSH
 905: EMPTY
 906: ST_TO_ADDR
// for i := 1 to array do
 907: LD_ADDR_VAR 0 3
 911: PUSH
 912: DOUBLE
 913: LD_INT 1
 915: DEC
 916: ST_TO_ADDR
 917: LD_VAR 0 1
 921: PUSH
 922: FOR_TO
 923: IFFALSE 956
// result := Insert ( result , 1 , array [ i ] ) ;
 925: LD_ADDR_VAR 0 2
 929: PUSH
 930: LD_VAR 0 2
 934: PPUSH
 935: LD_INT 1
 937: PPUSH
 938: LD_VAR 0 1
 942: PUSH
 943: LD_VAR 0 3
 947: ARRAY
 948: PPUSH
 949: CALL_OW 2
 953: ST_TO_ADDR
 954: GO 922
 956: POP
 957: POP
// end ;
 958: LD_VAR 0 2
 962: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
 963: LD_INT 0
 965: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
 966: LD_VAR 0 1
 970: PPUSH
 971: LD_VAR 0 2
 975: PPUSH
 976: LD_VAR 0 3
 980: PPUSH
 981: LD_VAR 0 4
 985: PPUSH
 986: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
 990: LD_VAR 0 1
 994: PPUSH
 995: LD_VAR 0 2
 999: PPUSH
1000: LD_VAR 0 3
1004: PPUSH
1005: CALL_OW 331
// end ;
1009: LD_VAR 0 5
1013: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1014: LD_INT 0
1016: PPUSH
// if not units then
1017: LD_VAR 0 1
1021: NOT
1022: IFFALSE 1026
// exit ;
1024: GO 1109
// result := true ;
1026: LD_ADDR_VAR 0 4
1030: PUSH
1031: LD_INT 1
1033: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1034: LD_VAR 0 1
1038: PPUSH
1039: LD_INT 26
1041: PUSH
1042: LD_INT 1
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: PPUSH
1049: CALL_OW 72
1053: PUSH
1054: LD_INT 1
1056: ARRAY
1057: PPUSH
1058: LD_VAR 0 2
1062: PPUSH
1063: CALL_OW 88
1067: NOT
1068: IFFALSE 1109
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1070: LD_ADDR_VAR 0 4
1074: PUSH
1075: LD_VAR 0 1
1079: PPUSH
1080: LD_INT 26
1082: PUSH
1083: LD_INT 2
1085: PUSH
1086: EMPTY
1087: LIST
1088: LIST
1089: PPUSH
1090: CALL_OW 72
1094: PUSH
1095: LD_INT 1
1097: ARRAY
1098: PPUSH
1099: LD_VAR 0 3
1103: PPUSH
1104: CALL_OW 88
1108: ST_TO_ADDR
// end ;
1109: LD_VAR 0 4
1113: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1114: LD_INT 0
1116: PPUSH
1117: PPUSH
// if not group then
1118: LD_VAR 0 2
1122: NOT
1123: IFFALSE 1127
// exit ;
1125: GO 1172
// for i in group do
1127: LD_ADDR_VAR 0 4
1131: PUSH
1132: LD_VAR 0 2
1136: PUSH
1137: FOR_IN
1138: IFFALSE 1170
// if See ( side , i ) then
1140: LD_VAR 0 1
1144: PPUSH
1145: LD_VAR 0 4
1149: PPUSH
1150: CALL_OW 292
1154: IFFALSE 1168
// begin result := true ;
1156: LD_ADDR_VAR 0 3
1160: PUSH
1161: LD_INT 1
1163: ST_TO_ADDR
// exit ;
1164: POP
1165: POP
1166: GO 1172
// end ;
1168: GO 1137
1170: POP
1171: POP
// end ; end_of_file
1172: LD_VAR 0 3
1176: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeApes , heikeVehicles ; export function PrepareArabian ; var i , tmp ; begin
1177: LD_INT 0
1179: PPUSH
1180: PPUSH
1181: PPUSH
// uc_nation := 2 ;
1182: LD_ADDR_OWVAR 21
1186: PUSH
1187: LD_INT 2
1189: ST_TO_ADDR
// uc_side := 5 ;
1190: LD_ADDR_OWVAR 20
1194: PUSH
1195: LD_INT 5
1197: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1198: LD_ADDR_EXP 20
1202: PUSH
1203: LD_STRING Abdul
1205: PPUSH
1206: LD_INT 0
1208: PPUSH
1209: LD_STRING 
1211: PPUSH
1212: CALL 15084 0 3
1216: ST_TO_ADDR
// uc_side := 2 ;
1217: LD_ADDR_OWVAR 20
1221: PUSH
1222: LD_INT 2
1224: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1225: LD_ADDR_EXP 12
1229: PUSH
1230: LD_STRING Heike
1232: PPUSH
1233: LD_EXP 1
1237: NOT
1238: PPUSH
1239: LD_EXP 2
1243: PPUSH
1244: CALL 15084 0 3
1248: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1249: LD_ADDR_EXP 15
1253: PUSH
1254: LD_STRING Ibrahim
1256: PPUSH
1257: LD_EXP 1
1261: NOT
1262: PPUSH
1263: LD_EXP 2
1267: PPUSH
1268: CALL 15084 0 3
1272: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1273: LD_ADDR_EXP 13
1277: PUSH
1278: LD_STRING Givi
1280: PPUSH
1281: LD_EXP 1
1285: NOT
1286: PPUSH
1287: LD_EXP 2
1291: PPUSH
1292: CALL 15084 0 3
1296: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1297: LD_ADDR_EXP 16
1301: PUSH
1302: LD_STRING Kamil
1304: PPUSH
1305: LD_EXP 1
1309: NOT
1310: PPUSH
1311: LD_EXP 2
1315: PPUSH
1316: CALL 15084 0 3
1320: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1321: LD_ADDR_EXP 17
1325: PUSH
1326: LD_STRING Kaia
1328: PPUSH
1329: LD_EXP 1
1333: NOT
1334: PPUSH
1335: LD_EXP 2
1339: PPUSH
1340: CALL 15084 0 3
1344: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1345: LD_ADDR_EXP 18
1349: PUSH
1350: LD_STRING Sophia
1352: PPUSH
1353: LD_EXP 1
1357: NOT
1358: PPUSH
1359: LD_EXP 2
1363: PPUSH
1364: CALL 15084 0 3
1368: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1369: LD_ADDR_EXP 19
1373: PUSH
1374: LD_STRING Markov
1376: PPUSH
1377: LD_EXP 1
1381: NOT
1382: PPUSH
1383: LD_EXP 2
1387: PPUSH
1388: CALL 15084 0 3
1392: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1393: LD_ADDR_EXP 23
1397: PUSH
1398: LD_STRING Aviradze
1400: PPUSH
1401: LD_EXP 1
1405: NOT
1406: PPUSH
1407: LD_EXP 2
1411: PPUSH
1412: CALL 15084 0 3
1416: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1417: LD_ADDR_EXP 22
1421: PUSH
1422: LD_STRING Kurt
1424: PPUSH
1425: LD_EXP 1
1429: NOT
1430: PPUSH
1431: LD_EXP 2
1435: PPUSH
1436: CALL 15084 0 3
1440: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1441: LD_ADDR_EXP 14
1445: PUSH
1446: LD_STRING Mike
1448: PPUSH
1449: LD_EXP 1
1453: NOT
1454: PPUSH
1455: LD_EXP 2
1459: PPUSH
1460: CALL 15084 0 3
1464: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1465: LD_ADDR_EXP 21
1469: PUSH
1470: LD_STRING Olaf
1472: PPUSH
1473: LD_INT 0
1475: PPUSH
1476: LD_STRING 
1478: PPUSH
1479: CALL 15084 0 3
1483: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 06_others ) ;
1484: LD_ADDR_EXP 24
1488: PUSH
1489: LD_STRING 06_others
1491: PPUSH
1492: CALL_OW 31
1496: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 06_apes ) ;
1497: LD_ADDR_EXP 25
1501: PUSH
1502: LD_STRING 06_apes
1504: PPUSH
1505: CALL_OW 31
1509: ST_TO_ADDR
// if debug then
1510: LD_EXP 1
1514: IFFALSE 1789
// begin tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 750 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 900 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 100 , 0 ] ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 50 , 50 ] ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_mortar , 2 , 1000 , 0 ] ] ;
1516: LD_ADDR_VAR 0 3
1520: PUSH
1521: LD_INT 14
1523: PUSH
1524: LD_INT 1
1526: PUSH
1527: LD_INT 2
1529: PUSH
1530: LD_INT 25
1532: PUSH
1533: LD_INT 2
1535: PUSH
1536: LD_INT 1000
1538: PUSH
1539: LD_INT 0
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: PUSH
1551: LD_INT 14
1553: PUSH
1554: LD_INT 1
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: LD_INT 31
1562: PUSH
1563: LD_INT 2
1565: PUSH
1566: LD_INT 1000
1568: PUSH
1569: LD_INT 0
1571: PUSH
1572: EMPTY
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: LIST
1579: LIST
1580: PUSH
1581: LD_INT 14
1583: PUSH
1584: LD_INT 1
1586: PUSH
1587: LD_INT 1
1589: PUSH
1590: LD_INT 27
1592: PUSH
1593: LD_INT 2
1595: PUSH
1596: LD_INT 750
1598: PUSH
1599: LD_INT 0
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: PUSH
1611: LD_INT 14
1613: PUSH
1614: LD_INT 1
1616: PUSH
1617: LD_INT 1
1619: PUSH
1620: LD_INT 27
1622: PUSH
1623: LD_INT 2
1625: PUSH
1626: LD_INT 900
1628: PUSH
1629: LD_INT 0
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: PUSH
1641: LD_INT 14
1643: PUSH
1644: LD_INT 1
1646: PUSH
1647: LD_INT 1
1649: PUSH
1650: LD_INT 32
1652: PUSH
1653: LD_INT 2
1655: PUSH
1656: LD_INT 1000
1658: PUSH
1659: LD_INT 100
1661: PUSH
1662: LD_INT 0
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 14
1680: PUSH
1681: LD_INT 1
1683: PUSH
1684: LD_INT 1
1686: PUSH
1687: LD_INT 32
1689: PUSH
1690: LD_INT 2
1692: PUSH
1693: LD_INT 1000
1695: PUSH
1696: LD_INT 50
1698: PUSH
1699: LD_INT 50
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: LIST
1710: LIST
1711: LIST
1712: LIST
1713: LIST
1714: PUSH
1715: LD_INT 14
1717: PUSH
1718: LD_INT 1
1720: PUSH
1721: LD_INT 2
1723: PUSH
1724: LD_INT 27
1726: PUSH
1727: LD_INT 2
1729: PUSH
1730: LD_INT 1000
1732: PUSH
1733: LD_INT 0
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_INT 14
1747: PUSH
1748: LD_INT 1
1750: PUSH
1751: LD_INT 1
1753: PUSH
1754: LD_EXP 106
1758: PUSH
1759: LD_INT 2
1761: PUSH
1762: LD_INT 1000
1764: PUSH
1765: LD_INT 0
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: ST_TO_ADDR
// end else
1787: GO 1796
// tmp := [ ] ;
1789: LD_ADDR_VAR 0 3
1793: PUSH
1794: EMPTY
1795: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 06_Vehicles , tmp ) ;
1796: LD_ADDR_EXP 26
1800: PUSH
1801: LD_STRING 06_Vehicles
1803: PPUSH
1804: LD_VAR 0 3
1808: PPUSH
1809: CALL_OW 30
1813: ST_TO_ADDR
// if heikeVehicles then
1814: LD_EXP 26
1818: IFFALSE 1913
// begin for i := heikeVehicles downto 1 do
1820: LD_ADDR_VAR 0 2
1824: PUSH
1825: DOUBLE
1826: LD_EXP 26
1830: INC
1831: ST_TO_ADDR
1832: LD_INT 1
1834: PUSH
1835: FOR_DOWNTO
1836: IFFALSE 1911
// begin if heikeVehicles [ i ] [ 3 ] = control_remote then
1838: LD_EXP 26
1842: PUSH
1843: LD_VAR 0 2
1847: ARRAY
1848: PUSH
1849: LD_INT 3
1851: ARRAY
1852: PUSH
1853: LD_INT 2
1855: EQUAL
1856: IFFALSE 1909
// begin heikeVehicles := Insert ( heikeVehicles , heikeVehicles , heikeVehicles [ i ] ) ;
1858: LD_ADDR_EXP 26
1862: PUSH
1863: LD_EXP 26
1867: PPUSH
1868: LD_EXP 26
1872: PPUSH
1873: LD_EXP 26
1877: PUSH
1878: LD_VAR 0 2
1882: ARRAY
1883: PPUSH
1884: CALL_OW 2
1888: ST_TO_ADDR
// heikeVehicles := Delete ( heikeVehicles , i ) ;
1889: LD_ADDR_EXP 26
1893: PUSH
1894: LD_EXP 26
1898: PPUSH
1899: LD_VAR 0 2
1903: PPUSH
1904: CALL_OW 3
1908: ST_TO_ADDR
// end ; end ;
1909: GO 1835
1911: POP
1912: POP
// end ; end ;
1913: LD_VAR 0 1
1917: RET
// every 0 0$1 trigger scoutActive do var i , tmp ;
1918: LD_EXP 3
1922: IFFALSE 2456
1924: GO 1926
1926: DISABLE
1927: LD_INT 0
1929: PPUSH
1930: PPUSH
// begin tmp := [ [ [ 96 , 50 ] , [ 49 , 52 ] , [ 34 , 55 ] , [ 41 , 70 ] , [ 53 , 96 ] , [ 103 , 64 ] ] , [ [ 104 , 70 ] , [ 111 , 103 ] , [ 131 , 147 ] , [ 130 , 153 ] , [ 110 , 93 ] , [ 103 , 65 ] ] ] ;
1931: LD_ADDR_VAR 0 2
1935: PUSH
1936: LD_INT 96
1938: PUSH
1939: LD_INT 50
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 49
1948: PUSH
1949: LD_INT 52
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: LD_INT 34
1958: PUSH
1959: LD_INT 55
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: PUSH
1966: LD_INT 41
1968: PUSH
1969: LD_INT 70
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: PUSH
1976: LD_INT 53
1978: PUSH
1979: LD_INT 96
1981: PUSH
1982: EMPTY
1983: LIST
1984: LIST
1985: PUSH
1986: LD_INT 103
1988: PUSH
1989: LD_INT 64
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: PUSH
2004: LD_INT 104
2006: PUSH
2007: LD_INT 70
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: LD_INT 111
2016: PUSH
2017: LD_INT 103
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PUSH
2024: LD_INT 131
2026: PUSH
2027: LD_INT 147
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PUSH
2034: LD_INT 130
2036: PUSH
2037: LD_INT 153
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PUSH
2044: LD_INT 110
2046: PUSH
2047: LD_INT 93
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: PUSH
2054: LD_INT 103
2056: PUSH
2057: LD_INT 65
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: ST_TO_ADDR
// for i in tmp [ 1 ] do
2076: LD_ADDR_VAR 0 1
2080: PUSH
2081: LD_VAR 0 2
2085: PUSH
2086: LD_INT 1
2088: ARRAY
2089: PUSH
2090: FOR_IN
2091: IFFALSE 2143
// begin AddComAgressiveMove ( Mike , i [ 1 ] , i [ 2 ] ) ;
2093: LD_EXP 14
2097: PPUSH
2098: LD_VAR 0 1
2102: PUSH
2103: LD_INT 1
2105: ARRAY
2106: PPUSH
2107: LD_VAR 0 1
2111: PUSH
2112: LD_INT 2
2114: ARRAY
2115: PPUSH
2116: CALL_OW 174
// AddComHold ( Mike ) ;
2120: LD_EXP 14
2124: PPUSH
2125: CALL_OW 200
// AddComWait ( Mike , 0 0$5 ) ;
2129: LD_EXP 14
2133: PPUSH
2134: LD_INT 175
2136: PPUSH
2137: CALL_OW 202
// end ;
2141: GO 2090
2143: POP
2144: POP
// for i in tmp [ 2 ] do
2145: LD_ADDR_VAR 0 1
2149: PUSH
2150: LD_VAR 0 2
2154: PUSH
2155: LD_INT 2
2157: ARRAY
2158: PUSH
2159: FOR_IN
2160: IFFALSE 2212
// begin AddComAgressiveMove ( Kurt , i [ 1 ] , i [ 2 ] ) ;
2162: LD_EXP 22
2166: PPUSH
2167: LD_VAR 0 1
2171: PUSH
2172: LD_INT 1
2174: ARRAY
2175: PPUSH
2176: LD_VAR 0 1
2180: PUSH
2181: LD_INT 2
2183: ARRAY
2184: PPUSH
2185: CALL_OW 174
// AddComHold ( Kurt ) ;
2189: LD_EXP 22
2193: PPUSH
2194: CALL_OW 200
// AddComWait ( Kurt , 0 0$5 ) ;
2198: LD_EXP 22
2202: PPUSH
2203: LD_INT 175
2205: PPUSH
2206: CALL_OW 202
// end ;
2210: GO 2159
2212: POP
2213: POP
// wait ( 2 2$00 ) ;
2214: LD_INT 4200
2216: PPUSH
2217: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2221: LD_INT 35
2223: PPUSH
2224: CALL_OW 67
// until ( not HasTask ( Mike ) or IsDead ( Mike ) ) and ( not HasTask ( Kurt ) or IsDead ( Kurt ) ) ;
2228: LD_EXP 14
2232: PPUSH
2233: CALL_OW 314
2237: NOT
2238: PUSH
2239: LD_EXP 14
2243: PPUSH
2244: CALL_OW 301
2248: OR
2249: PUSH
2250: LD_EXP 22
2254: PPUSH
2255: CALL_OW 314
2259: NOT
2260: PUSH
2261: LD_EXP 22
2265: PPUSH
2266: CALL_OW 301
2270: OR
2271: AND
2272: IFFALSE 2221
// if IsDead ( Kurt ) and IsDead ( Mike ) then
2274: LD_EXP 22
2278: PPUSH
2279: CALL_OW 301
2283: PUSH
2284: LD_EXP 14
2288: PPUSH
2289: CALL_OW 301
2293: AND
2294: IFFALSE 2306
// begin scoutFailed := true ;
2296: LD_ADDR_EXP 4
2300: PUSH
2301: LD_INT 1
2303: ST_TO_ADDR
// exit ;
2304: GO 2456
// end ; ComMoveXY ( [ Kurt , Mike ] , 132 , 52 ) ;
2306: LD_EXP 22
2310: PUSH
2311: LD_EXP 14
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PPUSH
2320: LD_INT 132
2322: PPUSH
2323: LD_INT 52
2325: PPUSH
2326: CALL_OW 111
// AddComMoveUnit ( [ Kurt , Mike ] , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
2330: LD_EXP 22
2334: PUSH
2335: LD_EXP 14
2339: PUSH
2340: EMPTY
2341: LIST
2342: LIST
2343: PPUSH
2344: LD_INT 22
2346: PUSH
2347: LD_INT 2
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: PPUSH
2354: CALL_OW 69
2358: PUSH
2359: LD_INT 1
2361: ARRAY
2362: PPUSH
2363: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
2367: LD_INT 35
2369: PPUSH
2370: CALL_OW 67
// until See ( 2 , Kurt ) or See ( 2 , Mike ) ;
2374: LD_INT 2
2376: PPUSH
2377: LD_EXP 22
2381: PPUSH
2382: CALL_OW 292
2386: PUSH
2387: LD_INT 2
2389: PPUSH
2390: LD_EXP 14
2394: PPUSH
2395: CALL_OW 292
2399: OR
2400: IFFALSE 2367
// if IsLive ( Kurt ) then
2402: LD_EXP 22
2406: PPUSH
2407: CALL_OW 300
2411: IFFALSE 2425
// SetSide ( Kurt , 2 ) ;
2413: LD_EXP 22
2417: PPUSH
2418: LD_INT 2
2420: PPUSH
2421: CALL_OW 235
// if IsLive ( Mike ) then
2425: LD_EXP 14
2429: PPUSH
2430: CALL_OW 300
2434: IFFALSE 2448
// SetSide ( Mike , 2 ) ;
2436: LD_EXP 14
2440: PPUSH
2441: LD_INT 2
2443: PPUSH
2444: CALL_OW 235
// scoutSuccess := true ;
2448: LD_ADDR_EXP 5
2452: PUSH
2453: LD_INT 1
2455: ST_TO_ADDR
// end ; end_of_file
2456: PPOPN 2
2458: END
// export usCommander , usForces , usCargo , usToBuild , usAdditionalForces ; export function PrepareAmerican ; var i , b , veh ; begin
2459: LD_INT 0
2461: PPUSH
2462: PPUSH
2463: PPUSH
2464: PPUSH
// uc_side := 1 ;
2465: LD_ADDR_OWVAR 20
2469: PUSH
2470: LD_INT 1
2472: ST_TO_ADDR
// uc_nation := 1 ;
2473: LD_ADDR_OWVAR 21
2477: PUSH
2478: LD_INT 1
2480: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 2500 , 3200 , 3500 , 3900 ] [ Difficulty ] ) ;
2481: LD_INT 1
2483: PPUSH
2484: CALL_OW 274
2488: PPUSH
2489: LD_INT 1
2491: PPUSH
2492: LD_INT 2500
2494: PUSH
2495: LD_INT 3200
2497: PUSH
2498: LD_INT 3500
2500: PUSH
2501: LD_INT 3900
2503: PUSH
2504: EMPTY
2505: LIST
2506: LIST
2507: LIST
2508: LIST
2509: PUSH
2510: LD_OWVAR 67
2514: ARRAY
2515: PPUSH
2516: CALL_OW 277
// SetResourceType ( GetBase ( usDepot ) , mat_oil , 800 ) ;
2520: LD_INT 1
2522: PPUSH
2523: CALL_OW 274
2527: PPUSH
2528: LD_INT 2
2530: PPUSH
2531: LD_INT 800
2533: PPUSH
2534: CALL_OW 277
// usForces := [ ] ;
2538: LD_ADDR_EXP 28
2542: PUSH
2543: EMPTY
2544: ST_TO_ADDR
// usToBuild := [ ] ;
2545: LD_ADDR_EXP 30
2549: PUSH
2550: EMPTY
2551: ST_TO_ADDR
// usAdditionalForces := [ ] ;
2552: LD_ADDR_EXP 31
2556: PUSH
2557: EMPTY
2558: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2559: LD_ADDR_VAR 0 2
2563: PUSH
2564: LD_INT 21
2566: PUSH
2567: LD_INT 3
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: PPUSH
2574: CALL_OW 69
2578: PUSH
2579: FOR_IN
2580: IFFALSE 2617
// SetBLevel ( i , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
2582: LD_VAR 0 2
2586: PPUSH
2587: LD_INT 6
2589: PUSH
2590: LD_INT 7
2592: PUSH
2593: LD_INT 8
2595: PUSH
2596: LD_INT 8
2598: PUSH
2599: EMPTY
2600: LIST
2601: LIST
2602: LIST
2603: LIST
2604: PUSH
2605: LD_OWVAR 67
2609: ARRAY
2610: PPUSH
2611: CALL_OW 241
2615: GO 2579
2617: POP
2618: POP
// for i in FilterAllUnits ( [ f_btype , b_bunker ] ) do
2619: LD_ADDR_VAR 0 2
2623: PUSH
2624: LD_INT 30
2626: PUSH
2627: LD_INT 32
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: PPUSH
2634: CALL_OW 69
2638: PUSH
2639: FOR_IN
2640: IFFALSE 2730
// begin if GetBWeapon ( i ) = us_radar then
2642: LD_VAR 0 2
2646: PPUSH
2647: CALL_OW 269
2651: PUSH
2652: LD_INT 11
2654: EQUAL
2655: IFFALSE 2680
// begin uc_nation := 0 ;
2657: LD_ADDR_OWVAR 21
2661: PUSH
2662: LD_INT 0
2664: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 2 ) ;
2665: LD_INT 0
2667: PPUSH
2668: LD_INT 16
2670: PPUSH
2671: LD_INT 2
2673: PPUSH
2674: CALL_OW 380
// end else
2678: GO 2714
// PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2680: LD_INT 0
2682: PPUSH
2683: LD_INT 1
2685: PPUSH
2686: LD_INT 5
2688: PUSH
2689: LD_INT 6
2691: PUSH
2692: LD_INT 7
2694: PUSH
2695: LD_INT 8
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: LIST
2702: LIST
2703: PUSH
2704: LD_OWVAR 67
2708: ARRAY
2709: PPUSH
2710: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2714: CALL_OW 44
2718: PPUSH
2719: LD_VAR 0 2
2723: PPUSH
2724: CALL_OW 52
// end ;
2728: GO 2639
2730: POP
2731: POP
// b := HexInfo ( 74 , 120 ) ;
2732: LD_ADDR_VAR 0 3
2736: PUSH
2737: LD_INT 74
2739: PPUSH
2740: LD_INT 120
2742: PPUSH
2743: CALL_OW 428
2747: ST_TO_ADDR
// uc_nation := 1 ;
2748: LD_ADDR_OWVAR 21
2752: PUSH
2753: LD_INT 1
2755: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
2756: LD_ADDR_VAR 0 2
2760: PUSH
2761: DOUBLE
2762: LD_INT 1
2764: DEC
2765: ST_TO_ADDR
2766: LD_INT 1
2768: PUSH
2769: LD_INT 2
2771: PUSH
2772: LD_INT 3
2774: PUSH
2775: LD_INT 4
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: LIST
2782: LIST
2783: PUSH
2784: LD_OWVAR 67
2788: ARRAY
2789: PUSH
2790: FOR_TO
2791: IFFALSE 2843
// begin PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2793: LD_INT 0
2795: PPUSH
2796: LD_INT 1
2798: PPUSH
2799: LD_INT 5
2801: PUSH
2802: LD_INT 6
2804: PUSH
2805: LD_INT 7
2807: PUSH
2808: LD_INT 8
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: LIST
2815: LIST
2816: PUSH
2817: LD_OWVAR 67
2821: ARRAY
2822: PPUSH
2823: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b ) ;
2827: CALL_OW 44
2831: PPUSH
2832: LD_VAR 0 3
2836: PPUSH
2837: CALL_OW 52
// end ;
2841: GO 2790
2843: POP
2844: POP
// SetClass ( UnitsInside ( b ) , class_sniper ) ;
2845: LD_VAR 0 3
2849: PPUSH
2850: CALL_OW 313
2854: PPUSH
2855: LD_INT 5
2857: PPUSH
2858: CALL_OW 336
// for i := 1 to 6 do
2862: LD_ADDR_VAR 0 2
2866: PUSH
2867: DOUBLE
2868: LD_INT 1
2870: DEC
2871: ST_TO_ADDR
2872: LD_INT 6
2874: PUSH
2875: FOR_TO
2876: IFFALSE 2926
// begin PrepareHuman ( false , 4 , 6 ) ;
2878: LD_INT 0
2880: PPUSH
2881: LD_INT 4
2883: PPUSH
2884: LD_INT 6
2886: PPUSH
2887: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ amLab1 , amLab2 ] [ i mod 2 + 1 ] ) ;
2891: CALL_OW 44
2895: PPUSH
2896: LD_INT 32
2898: PUSH
2899: LD_INT 33
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: LD_VAR 0 2
2910: PUSH
2911: LD_INT 2
2913: MOD
2914: PUSH
2915: LD_INT 1
2917: PLUS
2918: ARRAY
2919: PPUSH
2920: CALL_OW 52
// end ;
2924: GO 2875
2926: POP
2927: POP
// for i := 1 to 3 do
2928: LD_ADDR_VAR 0 2
2932: PUSH
2933: DOUBLE
2934: LD_INT 1
2936: DEC
2937: ST_TO_ADDR
2938: LD_INT 3
2940: PUSH
2941: FOR_TO
2942: IFFALSE 2971
// begin PrepareHuman ( false , 3 , 6 ) ;
2944: LD_INT 0
2946: PPUSH
2947: LD_INT 3
2949: PPUSH
2950: LD_INT 6
2952: PPUSH
2953: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , amFac ) ;
2957: CALL_OW 44
2961: PPUSH
2962: LD_INT 25
2964: PPUSH
2965: CALL_OW 52
// end ;
2969: GO 2941
2971: POP
2972: POP
// for i := 1 to 3 do
2973: LD_ADDR_VAR 0 2
2977: PUSH
2978: DOUBLE
2979: LD_INT 1
2981: DEC
2982: ST_TO_ADDR
2983: LD_INT 3
2985: PUSH
2986: FOR_TO
2987: IFFALSE 3045
// begin PrepareHuman ( false , 3 , [ 6 , 7 , 7 , 7 ] [ Difficulty ] ) ;
2989: LD_INT 0
2991: PPUSH
2992: LD_INT 3
2994: PPUSH
2995: LD_INT 6
2997: PUSH
2998: LD_INT 7
3000: PUSH
3001: LD_INT 7
3003: PUSH
3004: LD_INT 7
3006: PUSH
3007: EMPTY
3008: LIST
3009: LIST
3010: LIST
3011: LIST
3012: PUSH
3013: LD_OWVAR 67
3017: ARRAY
3018: PPUSH
3019: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 78 , 130 ) ) ;
3023: CALL_OW 44
3027: PPUSH
3028: LD_INT 78
3030: PPUSH
3031: LD_INT 130
3033: PPUSH
3034: CALL_OW 428
3038: PPUSH
3039: CALL_OW 52
// end ;
3043: GO 2986
3045: POP
3046: POP
// for i := 1 to 3 do
3047: LD_ADDR_VAR 0 2
3051: PUSH
3052: DOUBLE
3053: LD_INT 1
3055: DEC
3056: ST_TO_ADDR
3057: LD_INT 3
3059: PUSH
3060: FOR_TO
3061: IFFALSE 3148
// begin PrepareVehicle ( us_medium_wheeled , engine_solar , control_manual , us_crane , 100 ) ;
3063: LD_INT 2
3065: PPUSH
3066: LD_INT 2
3068: PPUSH
3069: LD_INT 1
3071: PPUSH
3072: LD_INT 13
3074: PPUSH
3075: LD_INT 100
3077: PPUSH
3078: CALL 19948 0 5
// veh := CreateVehicle ;
3082: LD_ADDR_VAR 0 4
3086: PUSH
3087: CALL_OW 45
3091: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3092: LD_VAR 0 4
3096: PPUSH
3097: LD_INT 3
3099: PPUSH
3100: CALL_OW 233
// PlaceUnitArea ( veh , usCraneArea , false ) ;
3104: LD_VAR 0 4
3108: PPUSH
3109: LD_INT 9
3111: PPUSH
3112: LD_INT 0
3114: PPUSH
3115: CALL_OW 49
// PrepareHuman ( false , 3 , 6 ) ;
3119: LD_INT 0
3121: PPUSH
3122: LD_INT 3
3124: PPUSH
3125: LD_INT 6
3127: PPUSH
3128: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3132: CALL_OW 44
3136: PPUSH
3137: LD_VAR 0 4
3141: PPUSH
3142: CALL_OW 52
// end ;
3146: GO 3060
3148: POP
3149: POP
// InitHc ;
3150: CALL_OW 19
// hc_gallery := us ;
3154: LD_ADDR_OWVAR 33
3158: PUSH
3159: LD_STRING us
3161: ST_TO_ADDR
// hc_face_number := 26 ;
3162: LD_ADDR_OWVAR 34
3166: PUSH
3167: LD_INT 26
3169: ST_TO_ADDR
// hc_name := Max Caldera ;
3170: LD_ADDR_OWVAR 26
3174: PUSH
3175: LD_STRING Max Caldera
3177: ST_TO_ADDR
// hc_class := class_engineer ;
3178: LD_ADDR_OWVAR 28
3182: PUSH
3183: LD_INT 2
3185: ST_TO_ADDR
// hc_sex := sex_male ;
3186: LD_ADDR_OWVAR 27
3190: PUSH
3191: LD_INT 1
3193: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
3194: LD_ADDR_OWVAR 29
3198: PUSH
3199: LD_INT 10
3201: PUSH
3202: LD_INT 11
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
3209: LD_ADDR_OWVAR 30
3213: PUSH
3214: LD_INT 2
3216: PUSH
3217: LD_INT 1
3219: PUSH
3220: LD_INT 0
3222: PUSH
3223: LD_INT 0
3225: PUSH
3226: EMPTY
3227: LIST
3228: LIST
3229: LIST
3230: LIST
3231: ST_TO_ADDR
// hc_skills := [ 4 , 6 , 3 , 1 ] ;
3232: LD_ADDR_OWVAR 31
3236: PUSH
3237: LD_INT 4
3239: PUSH
3240: LD_INT 6
3242: PUSH
3243: LD_INT 3
3245: PUSH
3246: LD_INT 1
3248: PUSH
3249: EMPTY
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: ST_TO_ADDR
// usCommander := CreateHuman ;
3255: LD_ADDR_EXP 27
3259: PUSH
3260: CALL_OW 44
3264: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
3265: LD_EXP 27
3269: PPUSH
3270: LD_INT 1
3272: PPUSH
3273: CALL_OW 52
// InitHC_All ( ) ;
3277: CALL_OW 584
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay , 100 ) ;
3281: LD_INT 2
3283: PPUSH
3284: LD_INT 1
3286: PPUSH
3287: LD_INT 2
3289: PPUSH
3290: LD_INT 12
3292: PPUSH
3293: LD_INT 100
3295: PPUSH
3296: CALL 19948 0 5
// usCargo := CreateVehicle ;
3300: LD_ADDR_EXP 29
3304: PUSH
3305: CALL_OW 45
3309: ST_TO_ADDR
// PlaceUnitXY ( usCargo , 81 , 143 , false ) ;
3310: LD_EXP 29
3314: PPUSH
3315: LD_INT 81
3317: PPUSH
3318: LD_INT 143
3320: PPUSH
3321: LD_INT 0
3323: PPUSH
3324: CALL_OW 48
// Connect ( usCargo ) ;
3328: LD_EXP 29
3332: PPUSH
3333: CALL 23041 0 1
// DoNotAttack ( 5 , usCargo ) ;
3337: LD_INT 5
3339: PPUSH
3340: LD_EXP 29
3344: PPUSH
3345: CALL_OW 471
// end ;
3349: LD_VAR 0 1
3353: RET
// every 6 6$00 trigger not usForces and usAttacksAllowed and IsOk ( amFac ) and BuildingStatus ( amFac ) = bs_idle do var i , chassis , weapon ;
3354: LD_EXP 28
3358: NOT
3359: PUSH
3360: LD_EXP 6
3364: AND
3365: PUSH
3366: LD_INT 25
3368: PPUSH
3369: CALL_OW 302
3373: AND
3374: PUSH
3375: LD_INT 25
3377: PPUSH
3378: CALL_OW 461
3382: PUSH
3383: LD_INT 2
3385: EQUAL
3386: AND
3387: IFFALSE 3544
3389: GO 3391
3391: DISABLE
3392: LD_INT 0
3394: PPUSH
3395: PPUSH
3396: PPUSH
// begin enable ;
3397: ENABLE
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3398: LD_ADDR_VAR 0 1
3402: PUSH
3403: DOUBLE
3404: LD_INT 1
3406: DEC
3407: ST_TO_ADDR
3408: LD_INT 5
3410: PUSH
3411: LD_INT 6
3413: PUSH
3414: LD_INT 7
3416: PUSH
3417: LD_INT 8
3419: PUSH
3420: EMPTY
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: PUSH
3426: LD_OWVAR 67
3430: ARRAY
3431: PUSH
3432: FOR_TO
3433: IFFALSE 3542
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3435: LD_ADDR_VAR 0 2
3439: PUSH
3440: LD_INT 2
3442: PUSH
3443: LD_INT 3
3445: PUSH
3446: LD_INT 4
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: LIST
3453: PUSH
3454: LD_INT 1
3456: PPUSH
3457: LD_INT 3
3459: PPUSH
3460: CALL_OW 12
3464: ARRAY
3465: ST_TO_ADDR
// if chassis = us_heavy_tracked then
3466: LD_VAR 0 2
3470: PUSH
3471: LD_INT 4
3473: EQUAL
3474: IFFALSE 3486
// weapon := us_heavy_gun else
3476: LD_ADDR_VAR 0 3
3480: PUSH
3481: LD_INT 6
3483: ST_TO_ADDR
3484: GO 3517
// weapon := [ us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3486: LD_ADDR_VAR 0 3
3490: PUSH
3491: LD_INT 5
3493: PUSH
3494: LD_INT 7
3496: PUSH
3497: LD_INT 4
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: LIST
3504: PUSH
3505: LD_INT 1
3507: PPUSH
3508: LD_INT 3
3510: PPUSH
3511: CALL_OW 12
3515: ARRAY
3516: ST_TO_ADDR
// AddComConstruct ( amFac , chassis , engine_combustion , control_remote , weapon ) ;
3517: LD_INT 25
3519: PPUSH
3520: LD_VAR 0 2
3524: PPUSH
3525: LD_INT 1
3527: PPUSH
3528: LD_INT 2
3530: PPUSH
3531: LD_VAR 0 3
3535: PPUSH
3536: CALL_OW 185
// end ;
3540: GO 3432
3542: POP
3543: POP
// end ;
3544: PPOPN 3
3546: END
// every 0 0$10 trigger usForces >= [ 5 , 6 , 7 , 8 ] [ Difficulty ] do var i , tmp ;
3547: LD_EXP 28
3551: PUSH
3552: LD_INT 5
3554: PUSH
3555: LD_INT 6
3557: PUSH
3558: LD_INT 7
3560: PUSH
3561: LD_INT 8
3563: PUSH
3564: EMPTY
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: PUSH
3570: LD_OWVAR 67
3574: ARRAY
3575: GREATEREQUAL
3576: IFFALSE 3687
3578: GO 3580
3580: DISABLE
3581: LD_INT 0
3583: PPUSH
3584: PPUSH
// begin enable ;
3585: ENABLE
// tmp := usForces ;
3586: LD_ADDR_VAR 0 2
3590: PUSH
3591: LD_EXP 28
3595: ST_TO_ADDR
// usForces := [ ] ;
3596: LD_ADDR_EXP 28
3600: PUSH
3601: EMPTY
3602: ST_TO_ADDR
// if not tmp then
3603: LD_VAR 0 2
3607: NOT
3608: IFFALSE 3612
// exit ;
3610: GO 3687
// repeat wait ( 0 0$1 ) ;
3612: LD_INT 35
3614: PPUSH
3615: CALL_OW 67
// tmp := AgressiveMove ( tmp , [ [ 98 , 50 ] , [ 114 , 50 ] , [ 127 , 51 ] , [ 131 , 35 ] ] ) ;
3619: LD_ADDR_VAR 0 2
3623: PUSH
3624: LD_VAR 0 2
3628: PPUSH
3629: LD_INT 98
3631: PUSH
3632: LD_INT 50
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: LD_INT 114
3641: PUSH
3642: LD_INT 50
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: PUSH
3649: LD_INT 127
3651: PUSH
3652: LD_INT 51
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: PUSH
3659: LD_INT 131
3661: PUSH
3662: LD_INT 35
3664: PUSH
3665: EMPTY
3666: LIST
3667: LIST
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: PPUSH
3675: CALL 54417 0 2
3679: ST_TO_ADDR
// until not tmp ;
3680: LD_VAR 0 2
3684: NOT
3685: IFFALSE 3612
// end ;
3687: PPOPN 2
3689: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( southScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3690: LD_EXP 3
3694: PUSH
3695: LD_EXP 5
3699: NOT
3700: AND
3701: PUSH
3702: LD_INT 11
3704: PPUSH
3705: LD_INT 22
3707: PUSH
3708: LD_INT 2
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: PPUSH
3715: CALL_OW 70
3719: AND
3720: IFFALSE 3841
3722: GO 3724
3724: DISABLE
3725: LD_INT 0
3727: PPUSH
3728: PPUSH
3729: PPUSH
// begin uc_side := 1 ;
3730: LD_ADDR_OWVAR 20
3734: PUSH
3735: LD_INT 1
3737: ST_TO_ADDR
// uc_nation := 1 ;
3738: LD_ADDR_OWVAR 21
3742: PUSH
3743: LD_INT 1
3745: ST_TO_ADDR
// tmp := [ ] ;
3746: LD_ADDR_VAR 0 3
3750: PUSH
3751: EMPTY
3752: ST_TO_ADDR
// for i := 1 to 2 do
3753: LD_ADDR_VAR 0 1
3757: PUSH
3758: DOUBLE
3759: LD_INT 1
3761: DEC
3762: ST_TO_ADDR
3763: LD_INT 2
3765: PUSH
3766: FOR_TO
3767: IFFALSE 3839
// begin PrepareSoldier ( false , 7 ) ;
3769: LD_INT 0
3771: PPUSH
3772: LD_INT 7
3774: PPUSH
3775: CALL_OW 381
// un := CreateHuman ;
3779: LD_ADDR_VAR 0 2
3783: PUSH
3784: CALL_OW 44
3788: ST_TO_ADDR
// PlaceUnitXYR ( un , 130 , 153 , 3 , false ) ;
3789: LD_VAR 0 2
3793: PPUSH
3794: LD_INT 130
3796: PPUSH
3797: LD_INT 153
3799: PPUSH
3800: LD_INT 3
3802: PPUSH
3803: LD_INT 0
3805: PPUSH
3806: CALL_OW 50
// SetClass ( un , class_sniper ) ;
3810: LD_VAR 0 2
3814: PPUSH
3815: LD_INT 5
3817: PPUSH
3818: CALL_OW 336
// AddComAgressiveMove ( un , 108 , 108 ) ;
3822: LD_VAR 0 2
3826: PPUSH
3827: LD_INT 108
3829: PPUSH
3830: LD_INT 108
3832: PPUSH
3833: CALL_OW 174
// end ;
3837: GO 3766
3839: POP
3840: POP
// end ;
3841: PPOPN 3
3843: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( northScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3844: LD_EXP 3
3848: PUSH
3849: LD_EXP 5
3853: NOT
3854: AND
3855: PUSH
3856: LD_INT 10
3858: PPUSH
3859: LD_INT 22
3861: PUSH
3862: LD_INT 2
3864: PUSH
3865: EMPTY
3866: LIST
3867: LIST
3868: PPUSH
3869: CALL_OW 70
3873: AND
3874: IFFALSE 3995
3876: GO 3878
3878: DISABLE
3879: LD_INT 0
3881: PPUSH
3882: PPUSH
3883: PPUSH
// begin uc_side := 1 ;
3884: LD_ADDR_OWVAR 20
3888: PUSH
3889: LD_INT 1
3891: ST_TO_ADDR
// uc_nation := 1 ;
3892: LD_ADDR_OWVAR 21
3896: PUSH
3897: LD_INT 1
3899: ST_TO_ADDR
// tmp := [ ] ;
3900: LD_ADDR_VAR 0 3
3904: PUSH
3905: EMPTY
3906: ST_TO_ADDR
// for i := 1 to 2 do
3907: LD_ADDR_VAR 0 1
3911: PUSH
3912: DOUBLE
3913: LD_INT 1
3915: DEC
3916: ST_TO_ADDR
3917: LD_INT 2
3919: PUSH
3920: FOR_TO
3921: IFFALSE 3993
// begin PrepareSoldier ( false , 7 ) ;
3923: LD_INT 0
3925: PPUSH
3926: LD_INT 7
3928: PPUSH
3929: CALL_OW 381
// un := CreateHuman ;
3933: LD_ADDR_VAR 0 2
3937: PUSH
3938: CALL_OW 44
3942: ST_TO_ADDR
// PlaceUnitXYR ( un , 56 , 101 , 3 , false ) ;
3943: LD_VAR 0 2
3947: PPUSH
3948: LD_INT 56
3950: PPUSH
3951: LD_INT 101
3953: PPUSH
3954: LD_INT 3
3956: PPUSH
3957: LD_INT 0
3959: PPUSH
3960: CALL_OW 50
// SetClass ( un , class_sniper ) ;
3964: LD_VAR 0 2
3968: PPUSH
3969: LD_INT 5
3971: PPUSH
3972: CALL_OW 336
// AddComAgressiveMove ( un , 72 , 92 ) ;
3976: LD_VAR 0 2
3980: PPUSH
3981: LD_INT 72
3983: PPUSH
3984: LD_INT 92
3986: PPUSH
3987: CALL_OW 174
// end ;
3991: GO 3920
3993: POP
3994: POP
// end ;
3995: PPOPN 3
3997: END
// every 0 0$2 trigger IsOk ( usCargo ) and not usSurrender do var cr , enemyInArea ;
3998: LD_EXP 29
4002: PPUSH
4003: CALL_OW 302
4007: PUSH
4008: LD_EXP 7
4012: NOT
4013: AND
4014: IFFALSE 4277
4016: GO 4018
4018: DISABLE
4019: LD_INT 0
4021: PPUSH
4022: PPUSH
// begin enable ;
4023: ENABLE
// enemyInArea := FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4024: LD_ADDR_VAR 0 2
4028: PUSH
4029: LD_INT 14
4031: PPUSH
4032: LD_INT 81
4034: PUSH
4035: LD_INT 1
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: PUSH
4042: LD_INT 50
4044: PUSH
4045: EMPTY
4046: LIST
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: PPUSH
4052: CALL_OW 70
4056: ST_TO_ADDR
// cr := GetListOfCratesInArea ( usCratesArea ) ;
4057: LD_ADDR_VAR 0 1
4061: PUSH
4062: LD_INT 12
4064: PPUSH
4065: CALL_OW 435
4069: ST_TO_ADDR
// if GetFuel ( usCargo ) < 10 and not See ( 2 , usCargo ) then
4070: LD_EXP 29
4074: PPUSH
4075: CALL_OW 261
4079: PUSH
4080: LD_INT 10
4082: LESS
4083: PUSH
4084: LD_INT 2
4086: PPUSH
4087: LD_EXP 29
4091: PPUSH
4092: CALL_OW 292
4096: NOT
4097: AND
4098: IFFALSE 4112
// SetFuel ( usCargo , 100 ) ;
4100: LD_EXP 29
4104: PPUSH
4105: LD_INT 100
4107: PPUSH
4108: CALL_OW 240
// if not HasTask ( usCargo ) and GetCargo ( usCargo , mat_cans ) < 100 and not enemyInArea then
4112: LD_EXP 29
4116: PPUSH
4117: CALL_OW 314
4121: NOT
4122: PUSH
4123: LD_EXP 29
4127: PPUSH
4128: LD_INT 1
4130: PPUSH
4131: CALL_OW 289
4135: PUSH
4136: LD_INT 100
4138: LESS
4139: AND
4140: PUSH
4141: LD_VAR 0 2
4145: NOT
4146: AND
4147: IFFALSE 4213
// begin if cr then
4149: LD_VAR 0 1
4153: IFFALSE 4184
// ComCollect ( usCargo , cr [ 1 ] , cr [ 2 ] ) else
4155: LD_EXP 29
4159: PPUSH
4160: LD_VAR 0 1
4164: PUSH
4165: LD_INT 1
4167: ARRAY
4168: PPUSH
4169: LD_VAR 0 1
4173: PUSH
4174: LD_INT 2
4176: ARRAY
4177: PPUSH
4178: CALL_OW 117
4182: GO 4211
// if not IsInArea ( usCargo , usCratesArea ) then
4184: LD_EXP 29
4188: PPUSH
4189: LD_INT 12
4191: PPUSH
4192: CALL_OW 308
4196: NOT
4197: IFFALSE 4211
// ComMoveToArea ( usCargo , usCratesArea ) ;
4199: LD_EXP 29
4203: PPUSH
4204: LD_INT 12
4206: PPUSH
4207: CALL_OW 113
// exit ;
4211: GO 4277
// end ; if enemyInArea and not IsInArea ( usCargo , americanBaseArea ) then
4213: LD_VAR 0 2
4217: PUSH
4218: LD_EXP 29
4222: PPUSH
4223: LD_INT 14
4225: PPUSH
4226: CALL_OW 308
4230: NOT
4231: AND
4232: IFFALSE 4251
// ComMoveXY ( usCargo , 80 , 143 ) else
4234: LD_EXP 29
4238: PPUSH
4239: LD_INT 80
4241: PPUSH
4242: LD_INT 143
4244: PPUSH
4245: CALL_OW 111
4249: GO 4277
// if GetCargo ( usCargo , mat_cans ) then
4251: LD_EXP 29
4255: PPUSH
4256: LD_INT 1
4258: PPUSH
4259: CALL_OW 289
4263: IFFALSE 4277
// ComGive ( usCargo , usDepot ) ;
4265: LD_EXP 29
4269: PPUSH
4270: LD_INT 1
4272: PPUSH
4273: CALL_OW 161
// end ;
4277: PPOPN 2
4279: END
// every 0 0$3 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) do var i , sci ;
4280: LD_EXP 7
4284: NOT
4285: PUSH
4286: LD_INT 22
4288: PUSH
4289: LD_INT 1
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PUSH
4296: LD_INT 21
4298: PUSH
4299: LD_INT 1
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: PUSH
4306: LD_INT 3
4308: PUSH
4309: LD_INT 50
4311: PUSH
4312: EMPTY
4313: LIST
4314: PUSH
4315: EMPTY
4316: LIST
4317: LIST
4318: PUSH
4319: EMPTY
4320: LIST
4321: LIST
4322: LIST
4323: PPUSH
4324: CALL_OW 69
4328: AND
4329: PUSH
4330: LD_INT 22
4332: PUSH
4333: LD_INT 1
4335: PUSH
4336: EMPTY
4337: LIST
4338: LIST
4339: PUSH
4340: LD_INT 3
4342: PUSH
4343: LD_INT 60
4345: PUSH
4346: EMPTY
4347: LIST
4348: PUSH
4349: EMPTY
4350: LIST
4351: LIST
4352: PUSH
4353: LD_INT 25
4355: PUSH
4356: LD_INT 4
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: LIST
4367: PPUSH
4368: CALL_OW 69
4372: AND
4373: IFFALSE 4576
4375: GO 4377
4377: DISABLE
4378: LD_INT 0
4380: PPUSH
4381: PPUSH
// begin enable ;
4382: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) do
4383: LD_ADDR_VAR 0 1
4387: PUSH
4388: LD_INT 22
4390: PUSH
4391: LD_INT 1
4393: PUSH
4394: EMPTY
4395: LIST
4396: LIST
4397: PUSH
4398: LD_INT 21
4400: PUSH
4401: LD_INT 1
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: PUSH
4408: LD_INT 3
4410: PUSH
4411: LD_INT 50
4413: PUSH
4414: EMPTY
4415: LIST
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: LIST
4425: PPUSH
4426: CALL_OW 69
4430: PUSH
4431: FOR_IN
4432: IFFALSE 4574
// begin sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) ;
4434: LD_ADDR_VAR 0 2
4438: PUSH
4439: LD_INT 22
4441: PUSH
4442: LD_INT 1
4444: PUSH
4445: EMPTY
4446: LIST
4447: LIST
4448: PUSH
4449: LD_INT 3
4451: PUSH
4452: LD_INT 60
4454: PUSH
4455: EMPTY
4456: LIST
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PUSH
4462: LD_INT 25
4464: PUSH
4465: LD_INT 4
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: LIST
4476: PPUSH
4477: CALL_OW 69
4481: ST_TO_ADDR
// if not sci then
4482: LD_VAR 0 2
4486: NOT
4487: IFFALSE 4491
// break ;
4489: GO 4574
// sci := sci [ 1 ] ;
4491: LD_ADDR_VAR 0 2
4495: PUSH
4496: LD_VAR 0 2
4500: PUSH
4501: LD_INT 1
4503: ARRAY
4504: ST_TO_ADDR
// if IsInUnit ( sci ) then
4505: LD_VAR 0 2
4509: PPUSH
4510: CALL_OW 310
4514: IFFALSE 4527
// ComExit ( sci ) else
4516: LD_VAR 0 2
4520: PPUSH
4521: CALL 52209 0 1
4525: GO 4572
// begin ComHeal ( sci , i ) ;
4527: LD_VAR 0 2
4531: PPUSH
4532: LD_VAR 0 1
4536: PPUSH
4537: CALL_OW 128
// AddComEnterUnit ( sci , [ amLab1 , amLab2 ] [ rand ( 1 , 2 ) ] ) ;
4541: LD_VAR 0 2
4545: PPUSH
4546: LD_INT 32
4548: PUSH
4549: LD_INT 33
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: PUSH
4556: LD_INT 1
4558: PPUSH
4559: LD_INT 2
4561: PPUSH
4562: CALL_OW 12
4566: ARRAY
4567: PPUSH
4568: CALL_OW 180
// end ; end ;
4572: GO 4431
4574: POP
4575: POP
// end ;
4576: PPOPN 2
4578: END
// every 0 0$2 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) do var i , tmp , tmp2 ;
4579: LD_EXP 7
4583: NOT
4584: PUSH
4585: LD_INT 22
4587: PUSH
4588: LD_INT 1
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PUSH
4595: LD_INT 3
4597: PUSH
4598: LD_INT 60
4600: PUSH
4601: EMPTY
4602: LIST
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: PUSH
4608: LD_INT 50
4610: PUSH
4611: EMPTY
4612: LIST
4613: PUSH
4614: LD_INT 34
4616: PUSH
4617: LD_INT 13
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: PUSH
4624: EMPTY
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: PPUSH
4630: CALL_OW 69
4634: AND
4635: PUSH
4636: LD_INT 22
4638: PUSH
4639: LD_INT 1
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: PUSH
4646: LD_INT 3
4648: PUSH
4649: LD_INT 24
4651: PUSH
4652: LD_INT 1000
4654: PUSH
4655: EMPTY
4656: LIST
4657: LIST
4658: PUSH
4659: EMPTY
4660: LIST
4661: LIST
4662: PUSH
4663: LD_INT 21
4665: PUSH
4666: LD_INT 3
4668: PUSH
4669: EMPTY
4670: LIST
4671: LIST
4672: PUSH
4673: LD_INT 3
4675: PUSH
4676: LD_INT 30
4678: PUSH
4679: LD_INT 29
4681: PUSH
4682: EMPTY
4683: LIST
4684: LIST
4685: PUSH
4686: EMPTY
4687: LIST
4688: LIST
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: PPUSH
4696: CALL_OW 69
4700: AND
4701: IFFALSE 4970
4703: GO 4705
4705: DISABLE
4706: LD_INT 0
4708: PPUSH
4709: PPUSH
4710: PPUSH
// begin enable ;
4711: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4712: LD_ADDR_VAR 0 2
4716: PUSH
4717: LD_INT 22
4719: PUSH
4720: LD_INT 1
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: PUSH
4727: LD_INT 3
4729: PUSH
4730: LD_INT 24
4732: PUSH
4733: LD_INT 1000
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: PUSH
4744: LD_INT 21
4746: PUSH
4747: LD_INT 3
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: PUSH
4754: LD_INT 3
4756: PUSH
4757: LD_INT 30
4759: PUSH
4760: LD_INT 29
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: PPUSH
4777: CALL_OW 69
4781: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4782: LD_ADDR_VAR 0 3
4786: PUSH
4787: LD_INT 22
4789: PUSH
4790: LD_INT 1
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: PUSH
4797: LD_INT 3
4799: PUSH
4800: LD_INT 24
4802: PUSH
4803: LD_INT 600
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PUSH
4810: EMPTY
4811: LIST
4812: LIST
4813: PUSH
4814: LD_INT 21
4816: PUSH
4817: LD_INT 3
4819: PUSH
4820: EMPTY
4821: LIST
4822: LIST
4823: PUSH
4824: LD_INT 3
4826: PUSH
4827: LD_INT 30
4829: PUSH
4830: LD_INT 29
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: PUSH
4841: EMPTY
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: PPUSH
4847: CALL_OW 69
4851: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4852: LD_ADDR_VAR 0 1
4856: PUSH
4857: LD_INT 22
4859: PUSH
4860: LD_INT 1
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: PUSH
4867: LD_INT 3
4869: PUSH
4870: LD_INT 60
4872: PUSH
4873: EMPTY
4874: LIST
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: PUSH
4880: LD_INT 50
4882: PUSH
4883: EMPTY
4884: LIST
4885: PUSH
4886: LD_INT 34
4888: PUSH
4889: LD_INT 13
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: PPUSH
4902: CALL_OW 69
4906: PUSH
4907: FOR_IN
4908: IFFALSE 4968
// begin if tmp2 then
4910: LD_VAR 0 3
4914: IFFALSE 4942
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
4916: LD_VAR 0 1
4920: PPUSH
4921: LD_VAR 0 3
4925: PPUSH
4926: LD_VAR 0 1
4930: PPUSH
4931: CALL_OW 74
4935: PPUSH
4936: CALL_OW 130
4940: GO 4966
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
4942: LD_VAR 0 1
4946: PPUSH
4947: LD_VAR 0 2
4951: PPUSH
4952: LD_VAR 0 1
4956: PPUSH
4957: CALL_OW 74
4961: PPUSH
4962: CALL_OW 130
// end ;
4966: GO 4907
4968: POP
4969: POP
// end ;
4970: PPOPN 3
4972: END
// every 0 0$1 trigger not usSurrender and not FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) and usToBuild and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4973: LD_EXP 7
4977: NOT
4978: PUSH
4979: LD_INT 14
4981: PPUSH
4982: LD_INT 81
4984: PUSH
4985: LD_INT 1
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PUSH
4992: LD_INT 50
4994: PUSH
4995: EMPTY
4996: LIST
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PPUSH
5002: CALL_OW 70
5006: NOT
5007: AND
5008: PUSH
5009: LD_EXP 30
5013: AND
5014: PUSH
5015: LD_INT 22
5017: PUSH
5018: LD_INT 1
5020: PUSH
5021: EMPTY
5022: LIST
5023: LIST
5024: PUSH
5025: LD_INT 3
5027: PUSH
5028: LD_INT 60
5030: PUSH
5031: EMPTY
5032: LIST
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: PUSH
5038: LD_INT 50
5040: PUSH
5041: EMPTY
5042: LIST
5043: PUSH
5044: LD_INT 34
5046: PUSH
5047: LD_INT 13
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: PUSH
5054: EMPTY
5055: LIST
5056: LIST
5057: LIST
5058: LIST
5059: PPUSH
5060: CALL_OW 69
5064: AND
5065: IFFALSE 5177
5067: GO 5069
5069: DISABLE
// begin enable ;
5070: ENABLE
// ComCraneBuild ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) , usToBuild [ 1 ] [ 1 ] , usToBuild [ 1 ] [ 2 ] , usToBuild [ 1 ] [ 3 ] , usToBuild [ 1 ] [ 4 ] ) ;
5071: LD_INT 22
5073: PUSH
5074: LD_INT 1
5076: PUSH
5077: EMPTY
5078: LIST
5079: LIST
5080: PUSH
5081: LD_INT 3
5083: PUSH
5084: LD_INT 60
5086: PUSH
5087: EMPTY
5088: LIST
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: PUSH
5094: LD_INT 50
5096: PUSH
5097: EMPTY
5098: LIST
5099: PUSH
5100: LD_INT 34
5102: PUSH
5103: LD_INT 13
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: LIST
5114: LIST
5115: PPUSH
5116: CALL_OW 69
5120: PPUSH
5121: LD_EXP 30
5125: PUSH
5126: LD_INT 1
5128: ARRAY
5129: PUSH
5130: LD_INT 1
5132: ARRAY
5133: PPUSH
5134: LD_EXP 30
5138: PUSH
5139: LD_INT 1
5141: ARRAY
5142: PUSH
5143: LD_INT 2
5145: ARRAY
5146: PPUSH
5147: LD_EXP 30
5151: PUSH
5152: LD_INT 1
5154: ARRAY
5155: PUSH
5156: LD_INT 3
5158: ARRAY
5159: PPUSH
5160: LD_EXP 30
5164: PUSH
5165: LD_INT 1
5167: ARRAY
5168: PUSH
5169: LD_INT 4
5171: ARRAY
5172: PPUSH
5173: CALL_OW 566
// end ;
5177: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) do var i , tmp , btmp , barracks ;
5178: LD_INT 22
5180: PUSH
5181: LD_INT 1
5183: PUSH
5184: EMPTY
5185: LIST
5186: LIST
5187: PUSH
5188: LD_INT 50
5190: PUSH
5191: EMPTY
5192: LIST
5193: PUSH
5194: LD_INT 3
5196: PUSH
5197: LD_INT 54
5199: PUSH
5200: EMPTY
5201: LIST
5202: PUSH
5203: EMPTY
5204: LIST
5205: LIST
5206: PUSH
5207: LD_INT 2
5209: PUSH
5210: LD_INT 25
5212: PUSH
5213: LD_INT 1
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: PUSH
5220: LD_INT 25
5222: PUSH
5223: LD_INT 5
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: PUSH
5230: LD_INT 25
5232: PUSH
5233: LD_INT 16
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: PUSH
5240: EMPTY
5241: LIST
5242: LIST
5243: LIST
5244: LIST
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: LIST
5250: LIST
5251: PPUSH
5252: CALL_OW 69
5256: IFFALSE 5618
5258: GO 5260
5260: DISABLE
5261: LD_INT 0
5263: PPUSH
5264: PPUSH
5265: PPUSH
5266: PPUSH
// begin enable ;
5267: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) ;
5268: LD_ADDR_VAR 0 2
5272: PUSH
5273: LD_INT 22
5275: PUSH
5276: LD_INT 1
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: PUSH
5283: LD_INT 50
5285: PUSH
5286: EMPTY
5287: LIST
5288: PUSH
5289: LD_INT 3
5291: PUSH
5292: LD_INT 54
5294: PUSH
5295: EMPTY
5296: LIST
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: PUSH
5302: LD_INT 2
5304: PUSH
5305: LD_INT 25
5307: PUSH
5308: LD_INT 1
5310: PUSH
5311: EMPTY
5312: LIST
5313: LIST
5314: PUSH
5315: LD_INT 25
5317: PUSH
5318: LD_INT 5
5320: PUSH
5321: EMPTY
5322: LIST
5323: LIST
5324: PUSH
5325: LD_INT 25
5327: PUSH
5328: LD_INT 16
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: LIST
5339: LIST
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: LIST
5345: LIST
5346: PPUSH
5347: CALL_OW 69
5351: ST_TO_ADDR
// btmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
5352: LD_ADDR_VAR 0 3
5356: PUSH
5357: LD_INT 22
5359: PUSH
5360: LD_INT 1
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: PUSH
5367: LD_INT 50
5369: PUSH
5370: EMPTY
5371: LIST
5372: PUSH
5373: LD_INT 21
5375: PUSH
5376: LD_INT 3
5378: PUSH
5379: EMPTY
5380: LIST
5381: LIST
5382: PUSH
5383: LD_INT 30
5385: PUSH
5386: LD_INT 32
5388: PUSH
5389: EMPTY
5390: LIST
5391: LIST
5392: PUSH
5393: LD_INT 58
5395: PUSH
5396: EMPTY
5397: LIST
5398: PUSH
5399: EMPTY
5400: LIST
5401: LIST
5402: LIST
5403: LIST
5404: LIST
5405: PPUSH
5406: CALL_OW 69
5410: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) ;
5411: LD_ADDR_VAR 0 4
5415: PUSH
5416: LD_INT 22
5418: PUSH
5419: LD_INT 1
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: PUSH
5426: LD_INT 50
5428: PUSH
5429: EMPTY
5430: LIST
5431: PUSH
5432: LD_INT 30
5434: PUSH
5435: LD_INT 5
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: LIST
5446: PPUSH
5447: CALL_OW 69
5451: ST_TO_ADDR
// if not tmp then
5452: LD_VAR 0 2
5456: NOT
5457: IFFALSE 5461
// exit ;
5459: GO 5618
// for i in tmp do
5461: LD_ADDR_VAR 0 1
5465: PUSH
5466: LD_VAR 0 2
5470: PUSH
5471: FOR_IN
5472: IFFALSE 5616
// begin btmp := FilterByTag ( btmp , 0 ) ;
5474: LD_ADDR_VAR 0 3
5478: PUSH
5479: LD_VAR 0 3
5483: PPUSH
5484: LD_INT 0
5486: PPUSH
5487: CALL 49339 0 2
5491: ST_TO_ADDR
// if not btmp then
5492: LD_VAR 0 3
5496: NOT
5497: IFFALSE 5542
// begin if GetClass ( i ) <> class_apeman_engineer and barracks then
5499: LD_VAR 0 1
5503: PPUSH
5504: CALL_OW 257
5508: PUSH
5509: LD_INT 16
5511: NONEQUAL
5512: PUSH
5513: LD_VAR 0 4
5517: AND
5518: IFFALSE 5538
// ComEnterUnit ( i , barracks [ 1 ] ) ;
5520: LD_VAR 0 1
5524: PPUSH
5525: LD_VAR 0 4
5529: PUSH
5530: LD_INT 1
5532: ARRAY
5533: PPUSH
5534: CALL_OW 120
// continue ;
5538: GO 5471
// end else
5540: GO 5614
// begin SetTag ( btmp [ 1 ] , 1 ) ;
5542: LD_VAR 0 3
5546: PUSH
5547: LD_INT 1
5549: ARRAY
5550: PPUSH
5551: LD_INT 1
5553: PPUSH
5554: CALL_OW 109
// ComEnterUnit ( i , btmp [ 1 ] ) ;
5558: LD_VAR 0 1
5562: PPUSH
5563: LD_VAR 0 3
5567: PUSH
5568: LD_INT 1
5570: ARRAY
5571: PPUSH
5572: CALL_OW 120
// wait ( 0 0$9 ) ;
5576: LD_INT 315
5578: PPUSH
5579: CALL_OW 67
// if IsEmpty ( btmp [ 1 ] ) then
5583: LD_VAR 0 3
5587: PUSH
5588: LD_INT 1
5590: ARRAY
5591: PPUSH
5592: CALL 17240 0 1
5596: IFFALSE 5614
// SetTag ( btmp [ 1 ] , 0 ) ;
5598: LD_VAR 0 3
5602: PUSH
5603: LD_INT 1
5605: ARRAY
5606: PPUSH
5607: LD_INT 0
5609: PPUSH
5610: CALL_OW 109
// end ; end ;
5614: GO 5471
5616: POP
5617: POP
// end ;
5618: PPOPN 4
5620: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do var i , tmp ;
5621: LD_INT 22
5623: PUSH
5624: LD_INT 1
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: PUSH
5631: LD_INT 33
5633: PUSH
5634: LD_INT 2
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: PUSH
5641: LD_INT 50
5643: PUSH
5644: EMPTY
5645: LIST
5646: PUSH
5647: LD_INT 3
5649: PUSH
5650: LD_INT 61
5652: PUSH
5653: EMPTY
5654: LIST
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: PUSH
5660: EMPTY
5661: LIST
5662: LIST
5663: LIST
5664: LIST
5665: PPUSH
5666: CALL_OW 69
5670: IFFALSE 5761
5672: GO 5674
5674: DISABLE
5675: LD_INT 0
5677: PPUSH
5678: PPUSH
// begin enable ;
5679: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
5680: LD_ADDR_VAR 0 2
5684: PUSH
5685: LD_INT 22
5687: PUSH
5688: LD_INT 1
5690: PUSH
5691: EMPTY
5692: LIST
5693: LIST
5694: PUSH
5695: LD_INT 33
5697: PUSH
5698: LD_INT 2
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: PUSH
5705: LD_INT 50
5707: PUSH
5708: EMPTY
5709: LIST
5710: PUSH
5711: LD_INT 3
5713: PUSH
5714: LD_INT 61
5716: PUSH
5717: EMPTY
5718: LIST
5719: PUSH
5720: EMPTY
5721: LIST
5722: LIST
5723: PUSH
5724: EMPTY
5725: LIST
5726: LIST
5727: LIST
5728: LIST
5729: PPUSH
5730: CALL_OW 69
5734: ST_TO_ADDR
// for i in tmp do
5735: LD_ADDR_VAR 0 1
5739: PUSH
5740: LD_VAR 0 2
5744: PUSH
5745: FOR_IN
5746: IFFALSE 5759
// Connect ( i ) ;
5748: LD_VAR 0 1
5752: PPUSH
5753: CALL 23041 0 1
5757: GO 5745
5759: POP
5760: POP
// end ;
5761: PPOPN 2
5763: END
// every 1 1$00 trigger usAttacksAllowed and Difficulty > 1 do var i , un , veh , chassis , weapon ;
5764: LD_EXP 6
5768: PUSH
5769: LD_OWVAR 67
5773: PUSH
5774: LD_INT 1
5776: GREATER
5777: AND
5778: IFFALSE 6216
5780: GO 5782
5782: DISABLE
5783: LD_INT 0
5785: PPUSH
5786: PPUSH
5787: PPUSH
5788: PPUSH
5789: PPUSH
// begin wait ( [ 10 10$00 , 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] ) ;
5790: LD_INT 21000
5792: PUSH
5793: LD_INT 18900
5795: PUSH
5796: LD_INT 16800
5798: PUSH
5799: LD_INT 14700
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: LIST
5806: LIST
5807: PUSH
5808: LD_OWVAR 67
5812: ARRAY
5813: PPUSH
5814: CALL_OW 67
// if usSurrender then
5818: LD_EXP 7
5822: IFFALSE 5826
// exit ;
5824: GO 6216
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] do
5826: LD_ADDR_VAR 0 1
5830: PUSH
5831: DOUBLE
5832: LD_INT 1
5834: DEC
5835: ST_TO_ADDR
5836: LD_INT 4
5838: PUSH
5839: LD_INT 5
5841: PUSH
5842: LD_INT 5
5844: PUSH
5845: LD_INT 6
5847: PUSH
5848: EMPTY
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: PUSH
5854: LD_OWVAR 67
5858: ARRAY
5859: PUSH
5860: FOR_TO
5861: IFFALSE 6161
// begin uc_side := 1 ;
5863: LD_ADDR_OWVAR 20
5867: PUSH
5868: LD_INT 1
5870: ST_TO_ADDR
// uc_nation := 1 ;
5871: LD_ADDR_OWVAR 21
5875: PUSH
5876: LD_INT 1
5878: ST_TO_ADDR
// PrepareHuman ( false , 3 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
5879: LD_INT 0
5881: PPUSH
5882: LD_INT 3
5884: PPUSH
5885: LD_INT 5
5887: PUSH
5888: LD_INT 6
5890: PUSH
5891: LD_INT 7
5893: PUSH
5894: LD_INT 8
5896: PUSH
5897: EMPTY
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: PUSH
5903: LD_OWVAR 67
5907: ARRAY
5908: PPUSH
5909: CALL_OW 380
// un := CreateHuman ;
5913: LD_ADDR_VAR 0 2
5917: PUSH
5918: CALL_OW 44
5922: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ i mod 3 + 1 ] ;
5923: LD_ADDR_VAR 0 4
5927: PUSH
5928: LD_INT 2
5930: PUSH
5931: LD_INT 3
5933: PUSH
5934: LD_INT 4
5936: PUSH
5937: EMPTY
5938: LIST
5939: LIST
5940: LIST
5941: PUSH
5942: LD_VAR 0 1
5946: PUSH
5947: LD_INT 3
5949: MOD
5950: PUSH
5951: LD_INT 1
5953: PLUS
5954: ARRAY
5955: ST_TO_ADDR
// if chassis = us_heavy_tracked then
5956: LD_VAR 0 4
5960: PUSH
5961: LD_INT 4
5963: EQUAL
5964: IFFALSE 5999
// weapon := [ us_heavy_gun , us_gatling_gun , us_double_gun ] [ rand ( 1 , 3 ) ] else
5966: LD_ADDR_VAR 0 5
5970: PUSH
5971: LD_INT 6
5973: PUSH
5974: LD_INT 4
5976: PUSH
5977: LD_INT 5
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: LIST
5984: PUSH
5985: LD_INT 1
5987: PPUSH
5988: LD_INT 3
5990: PPUSH
5991: CALL_OW 12
5995: ARRAY
5996: ST_TO_ADDR
5997: GO 6034
// weapon := [ us_heavy_gun , us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 4 ) ] ;
5999: LD_ADDR_VAR 0 5
6003: PUSH
6004: LD_INT 6
6006: PUSH
6007: LD_INT 5
6009: PUSH
6010: LD_INT 7
6012: PUSH
6013: LD_INT 4
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: PUSH
6022: LD_INT 1
6024: PPUSH
6025: LD_INT 4
6027: PPUSH
6028: CALL_OW 12
6032: ARRAY
6033: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_manual , weapon , 30 ) ;
6034: LD_VAR 0 4
6038: PPUSH
6039: LD_INT 1
6041: PPUSH
6042: LD_INT 1
6044: PPUSH
6045: LD_VAR 0 5
6049: PPUSH
6050: LD_INT 30
6052: PPUSH
6053: CALL 19948 0 5
// veh := CreateVehicle ;
6057: LD_ADDR_VAR 0 3
6061: PUSH
6062: CALL_OW 45
6066: ST_TO_ADDR
// usAdditionalForces := Replace ( usAdditionalForces , usAdditionalForces + 1 , veh ) ;
6067: LD_ADDR_EXP 31
6071: PUSH
6072: LD_EXP 31
6076: PPUSH
6077: LD_EXP 31
6081: PUSH
6082: LD_INT 1
6084: PLUS
6085: PPUSH
6086: LD_VAR 0 3
6090: PPUSH
6091: CALL_OW 1
6095: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6096: LD_VAR 0 3
6100: PPUSH
6101: LD_INT 4
6103: PPUSH
6104: CALL_OW 233
// PlaceUnitArea ( veh , americanEastArea , false ) ;
6108: LD_VAR 0 3
6112: PPUSH
6113: LD_INT 15
6115: PPUSH
6116: LD_INT 0
6118: PPUSH
6119: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6123: LD_VAR 0 2
6127: PPUSH
6128: LD_VAR 0 3
6132: PPUSH
6133: CALL_OW 52
// ComMoveXY ( veh , 153 , 45 ) ;
6137: LD_VAR 0 3
6141: PPUSH
6142: LD_INT 153
6144: PPUSH
6145: LD_INT 45
6147: PPUSH
6148: CALL_OW 111
// wait ( 0 0$2 ) ;
6152: LD_INT 70
6154: PPUSH
6155: CALL_OW 67
// end ;
6159: GO 5860
6161: POP
6162: POP
// repeat wait ( 0 0$1 ) ;
6163: LD_INT 35
6165: PPUSH
6166: CALL_OW 67
// usAdditionalForces := AgressiveMove ( usAdditionalForces , [ [ 150 , 36 ] , [ 138 , 25 ] ] ) ;
6170: LD_ADDR_EXP 31
6174: PUSH
6175: LD_EXP 31
6179: PPUSH
6180: LD_INT 150
6182: PUSH
6183: LD_INT 36
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PUSH
6190: LD_INT 138
6192: PUSH
6193: LD_INT 25
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PPUSH
6204: CALL 54417 0 2
6208: ST_TO_ADDR
// until not usAdditionalForces ;
6209: LD_EXP 31
6213: NOT
6214: IFFALSE 6163
// end ;
6216: PPOPN 5
6218: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 2 ] ] ) do
6219: LD_INT 22
6221: PUSH
6222: LD_INT 1
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: PUSH
6229: LD_INT 101
6231: PUSH
6232: LD_INT 2
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PPUSH
6243: CALL_OW 69
6247: IFFALSE 6260
6249: GO 6251
6251: DISABLE
// usAttacksAllowed := true ; end_of_file
6252: LD_ADDR_EXP 6
6256: PUSH
6257: LD_INT 1
6259: ST_TO_ADDR
6260: END
// on UnitDestroyed ( un ) do begin if un = Heike then
6261: LD_VAR 0 1
6265: PUSH
6266: LD_EXP 12
6270: EQUAL
6271: IFFALSE 6280
// YouLost ( Heike ) ;
6273: LD_STRING Heike
6275: PPUSH
6276: CALL_OW 104
// if un = usCommander then
6280: LD_VAR 0 1
6284: PUSH
6285: LD_EXP 27
6289: EQUAL
6290: IFFALSE 6299
// YouLost ( Commander ) ;
6292: LD_STRING Commander
6294: PPUSH
6295: CALL_OW 104
// if GetSide ( un ) = 1 then
6299: LD_VAR 0 1
6303: PPUSH
6304: CALL_OW 255
6308: PUSH
6309: LD_INT 1
6311: EQUAL
6312: IFFALSE 6563
// begin if GetWeapon ( un ) = us_crane and IsOk ( amFac ) then
6314: LD_VAR 0 1
6318: PPUSH
6319: CALL_OW 264
6323: PUSH
6324: LD_INT 13
6326: EQUAL
6327: PUSH
6328: LD_INT 25
6330: PPUSH
6331: CALL_OW 302
6335: AND
6336: IFFALSE 6357
// AddComConstruct ( amFac , us_medium_wheeled , engine_solar , control_remote , us_crane ) ;
6338: LD_INT 25
6340: PPUSH
6341: LD_INT 2
6343: PPUSH
6344: LD_INT 2
6346: PPUSH
6347: LD_INT 2
6349: PPUSH
6350: LD_INT 13
6352: PPUSH
6353: CALL_OW 185
// if GetWeapon ( un ) = us_cargo_bay and IsOk ( amFac ) then
6357: LD_VAR 0 1
6361: PPUSH
6362: CALL_OW 264
6366: PUSH
6367: LD_INT 12
6369: EQUAL
6370: PUSH
6371: LD_INT 25
6373: PPUSH
6374: CALL_OW 302
6378: AND
6379: IFFALSE 6400
// AddComConstruct ( amFac , us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ) ;
6381: LD_INT 25
6383: PPUSH
6384: LD_INT 2
6386: PPUSH
6387: LD_INT 1
6389: PPUSH
6390: LD_INT 2
6392: PPUSH
6393: LD_INT 12
6395: PPUSH
6396: CALL_OW 185
// if GetBType ( un ) = b_bunker then
6400: LD_VAR 0 1
6404: PPUSH
6405: CALL_OW 266
6409: PUSH
6410: LD_INT 32
6412: EQUAL
6413: IFFALSE 6478
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_bunker , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6415: LD_ADDR_EXP 30
6419: PUSH
6420: LD_EXP 30
6424: PPUSH
6425: LD_EXP 30
6429: PUSH
6430: LD_INT 1
6432: PLUS
6433: PPUSH
6434: LD_INT 32
6436: PUSH
6437: LD_VAR 0 1
6441: PPUSH
6442: CALL_OW 250
6446: PUSH
6447: LD_VAR 0 1
6451: PPUSH
6452: CALL_OW 251
6456: PUSH
6457: LD_VAR 0 1
6461: PPUSH
6462: CALL_OW 254
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: PPUSH
6473: CALL_OW 1
6477: ST_TO_ADDR
// if GetBType ( un ) in [ b_barracks , b_armoury ] then
6478: LD_VAR 0 1
6482: PPUSH
6483: CALL_OW 266
6487: PUSH
6488: LD_INT 5
6490: PUSH
6491: LD_INT 4
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: IN
6498: IFFALSE 6563
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_armoury , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6500: LD_ADDR_EXP 30
6504: PUSH
6505: LD_EXP 30
6509: PPUSH
6510: LD_EXP 30
6514: PUSH
6515: LD_INT 1
6517: PLUS
6518: PPUSH
6519: LD_INT 4
6521: PUSH
6522: LD_VAR 0 1
6526: PPUSH
6527: CALL_OW 250
6531: PUSH
6532: LD_VAR 0 1
6536: PPUSH
6537: CALL_OW 251
6541: PUSH
6542: LD_VAR 0 1
6546: PPUSH
6547: CALL_OW 254
6551: PUSH
6552: EMPTY
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: PPUSH
6558: CALL_OW 1
6562: ST_TO_ADDR
// end ; end ;
6563: PPOPN 1
6565: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 1 and GetTag ( un ) = 1 then
6566: LD_VAR 0 1
6570: PPUSH
6571: CALL_OW 255
6575: PUSH
6576: LD_INT 1
6578: EQUAL
6579: PUSH
6580: LD_VAR 0 1
6584: PPUSH
6585: CALL_OW 110
6589: PUSH
6590: LD_INT 1
6592: EQUAL
6593: AND
6594: IFFALSE 6608
// SetTag ( un , 0 ) ;
6596: LD_VAR 0 1
6600: PPUSH
6601: LD_INT 0
6603: PPUSH
6604: CALL_OW 109
// if GetSide ( un ) = 1 and GetWeapon ( un ) = us_heavy_gun and not seeHeavyGun then
6608: LD_VAR 0 1
6612: PPUSH
6613: CALL_OW 255
6617: PUSH
6618: LD_INT 1
6620: EQUAL
6621: PUSH
6622: LD_VAR 0 1
6626: PPUSH
6627: CALL_OW 264
6631: PUSH
6632: LD_INT 6
6634: EQUAL
6635: AND
6636: PUSH
6637: LD_EXP 11
6641: NOT
6642: AND
6643: IFFALSE 6653
// seeHeavyGun := true ;
6645: LD_ADDR_EXP 11
6649: PUSH
6650: LD_INT 1
6652: ST_TO_ADDR
// if GetControl ( un ) = control_remote and GetSide ( un ) <> 2 then
6653: LD_VAR 0 1
6657: PPUSH
6658: CALL_OW 263
6662: PUSH
6663: LD_INT 2
6665: EQUAL
6666: PUSH
6667: LD_VAR 0 1
6671: PPUSH
6672: CALL_OW 255
6676: PUSH
6677: LD_INT 2
6679: NONEQUAL
6680: AND
6681: IFFALSE 6707
// begin ComUnlink ( un ) ;
6683: LD_VAR 0 1
6687: PPUSH
6688: CALL_OW 136
// if not seeRemoteVehicle then
6692: LD_EXP 10
6696: NOT
6697: IFFALSE 6707
// seeRemoteVehicle := true ;
6699: LD_ADDR_EXP 10
6703: PUSH
6704: LD_INT 1
6706: ST_TO_ADDR
// end ; end ;
6707: PPOPN 1
6709: END
// on BuildingComplete ( b ) do var i , barracks ;
6710: LD_INT 0
6712: PPUSH
6713: PPUSH
// begin if GetSide ( b ) = 1 then
6714: LD_VAR 0 1
6718: PPUSH
6719: CALL_OW 255
6723: PUSH
6724: LD_INT 1
6726: EQUAL
6727: IFFALSE 6879
// begin usToBuild := Delete ( usToBuild , 1 ) ;
6729: LD_ADDR_EXP 30
6733: PUSH
6734: LD_EXP 30
6738: PPUSH
6739: LD_INT 1
6741: PPUSH
6742: CALL_OW 3
6746: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
6747: LD_VAR 0 1
6751: PPUSH
6752: CALL_OW 266
6756: PUSH
6757: LD_INT 4
6759: EQUAL
6760: IFFALSE 6771
// ComUpgrade ( b ) ;
6762: LD_VAR 0 1
6766: PPUSH
6767: CALL_OW 146
// if GetBType ( b ) = b_bunker then
6771: LD_VAR 0 1
6775: PPUSH
6776: CALL_OW 266
6780: PUSH
6781: LD_INT 32
6783: EQUAL
6784: IFFALSE 6879
// begin AddComPlaceWeapon ( b , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
6786: LD_VAR 0 1
6790: PPUSH
6791: LD_INT 6
6793: PUSH
6794: LD_INT 7
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 1
6803: PPUSH
6804: LD_INT 2
6806: PPUSH
6807: CALL_OW 12
6811: ARRAY
6812: PPUSH
6813: CALL_OW 208
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
6817: LD_ADDR_VAR 0 3
6821: PUSH
6822: LD_INT 22
6824: PUSH
6825: LD_INT 1
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: PUSH
6832: LD_INT 30
6834: PUSH
6835: LD_INT 5
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: PPUSH
6846: CALL_OW 69
6850: ST_TO_ADDR
// if barracks then
6851: LD_VAR 0 3
6855: IFFALSE 6879
// ComExitBuilding ( UnitsInside ( barracks [ 1 ] ) [ 1 ] ) ;
6857: LD_VAR 0 3
6861: PUSH
6862: LD_INT 1
6864: ARRAY
6865: PPUSH
6866: CALL_OW 313
6870: PUSH
6871: LD_INT 1
6873: ARRAY
6874: PPUSH
6875: CALL_OW 122
// end ; end ; end ;
6879: PPOPN 3
6881: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( factory ) = 1 then
6882: LD_VAR 0 2
6886: PPUSH
6887: CALL_OW 255
6891: PUSH
6892: LD_INT 1
6894: EQUAL
6895: IFFALSE 6974
// begin if GetWeapon ( vehicle ) = us_cargo_bay then
6897: LD_VAR 0 1
6901: PPUSH
6902: CALL_OW 264
6906: PUSH
6907: LD_INT 12
6909: EQUAL
6910: IFFALSE 6922
// usCargo := vehicle ;
6912: LD_ADDR_EXP 29
6916: PUSH
6917: LD_VAR 0 1
6921: ST_TO_ADDR
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , us_crane ] then
6922: LD_VAR 0 1
6926: PPUSH
6927: CALL_OW 264
6931: PUSH
6932: LD_INT 12
6934: PUSH
6935: LD_INT 13
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: IN
6942: NOT
6943: IFFALSE 6974
// usForces := Replace ( usForces , usForces + 1 , vehicle ) ;
6945: LD_ADDR_EXP 28
6949: PUSH
6950: LD_EXP 28
6954: PPUSH
6955: LD_EXP 28
6959: PUSH
6960: LD_INT 1
6962: PLUS
6963: PPUSH
6964: LD_VAR 0 1
6968: PPUSH
6969: CALL_OW 1
6973: ST_TO_ADDR
// end ; end ;
6974: PPOPN 2
6976: END
// on EvacuateVehicle ( un , veh , p1 , p2 ) do begin if GetSide ( veh ) = 1 then
6977: LD_VAR 0 2
6981: PPUSH
6982: CALL_OW 255
6986: PUSH
6987: LD_INT 1
6989: EQUAL
6990: IFFALSE 7004
// AddComEnterUnit ( un , amFac ) ;
6992: LD_VAR 0 1
6996: PPUSH
6997: LD_INT 25
6999: PPUSH
7000: CALL_OW 180
// end ;
7004: PPOPN 4
7006: END
// on EvacuateBuilding ( b , un ) do begin if GetSide ( b ) = 1 and GetBType ( b ) = b_bunker and GetClass ( un ) in [ class_soldier , class_sniper ] and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] , [ f_ok ] ] ) then
7007: LD_VAR 0 1
7011: PPUSH
7012: CALL_OW 255
7016: PUSH
7017: LD_INT 1
7019: EQUAL
7020: PUSH
7021: LD_VAR 0 1
7025: PPUSH
7026: CALL_OW 266
7030: PUSH
7031: LD_INT 32
7033: EQUAL
7034: AND
7035: PUSH
7036: LD_VAR 0 2
7040: PPUSH
7041: CALL_OW 257
7045: PUSH
7046: LD_INT 1
7048: PUSH
7049: LD_INT 5
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: IN
7056: AND
7057: PUSH
7058: LD_INT 22
7060: PUSH
7061: LD_INT 1
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: PUSH
7068: LD_INT 30
7070: PUSH
7071: LD_INT 5
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: PUSH
7078: LD_INT 50
7080: PUSH
7081: EMPTY
7082: LIST
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: LIST
7088: PPUSH
7089: CALL_OW 69
7093: AND
7094: IFFALSE 7164
// if UnitsInside ( HexInfo ( 74 , 120 ) ) < 6 then
7096: LD_INT 74
7098: PPUSH
7099: LD_INT 120
7101: PPUSH
7102: CALL_OW 428
7106: PPUSH
7107: CALL_OW 313
7111: PUSH
7112: LD_INT 6
7114: LESS
7115: IFFALSE 7164
// begin ComEnterUnit ( un , HexInfo ( 74 , 120 ) ) ;
7117: LD_VAR 0 2
7121: PPUSH
7122: LD_INT 74
7124: PPUSH
7125: LD_INT 120
7127: PPUSH
7128: CALL_OW 428
7132: PPUSH
7133: CALL_OW 120
// if GetClass ( un ) = class_soldier then
7137: LD_VAR 0 2
7141: PPUSH
7142: CALL_OW 257
7146: PUSH
7147: LD_INT 1
7149: EQUAL
7150: IFFALSE 7164
// AddComChangeProfession ( un , class_sniper ) ;
7152: LD_VAR 0 2
7156: PPUSH
7157: LD_INT 5
7159: PPUSH
7160: CALL_OW 183
// end ; end ; end_of_file
7164: PPOPN 2
7166: END
// export function Action ; var i , j , veh , tmp , hasEng , hasCamera , driver ; begin
7167: LD_INT 0
7169: PPUSH
7170: PPUSH
7171: PPUSH
7172: PPUSH
7173: PPUSH
7174: PPUSH
7175: PPUSH
7176: PPUSH
// Video ( true ) ;
7177: LD_INT 1
7179: PPUSH
7180: CALL 51793 0 1
// music_nat := 1 ;
7184: LD_ADDR_OWVAR 71
7188: PUSH
7189: LD_INT 1
7191: ST_TO_ADDR
// music_class := music_recon ;
7192: LD_ADDR_OWVAR 72
7196: PUSH
7197: LD_INT 3
7199: ST_TO_ADDR
// PlaceSeeing ( 184 , 142 , 2 , - 10 ) ;
7200: LD_INT 184
7202: PPUSH
7203: LD_INT 142
7205: PPUSH
7206: LD_INT 2
7208: PPUSH
7209: LD_INT 10
7211: NEG
7212: PPUSH
7213: CALL_OW 330
// RemoveSeeing ( 184 , 142 , 2 ) ;
7217: LD_INT 184
7219: PPUSH
7220: LD_INT 142
7222: PPUSH
7223: LD_INT 2
7225: PPUSH
7226: CALL_OW 331
// PlaceSeeing ( 204 , 151 , 2 , - 10 ) ;
7230: LD_INT 204
7232: PPUSH
7233: LD_INT 151
7235: PPUSH
7236: LD_INT 2
7238: PPUSH
7239: LD_INT 10
7241: NEG
7242: PPUSH
7243: CALL_OW 330
// RemoveSeeing ( 204 , 151 , 2 ) ;
7247: LD_INT 204
7249: PPUSH
7250: LD_INT 151
7252: PPUSH
7253: LD_INT 2
7255: PPUSH
7256: CALL_OW 331
// CenterNowOnXY ( 184 , 142 ) ;
7260: LD_INT 184
7262: PPUSH
7263: LD_INT 142
7265: PPUSH
7266: CALL_OW 86
// wait ( 0 0$2 ) ;
7270: LD_INT 70
7272: PPUSH
7273: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
7277: LD_ADDR_VAR 0 5
7281: PUSH
7282: LD_EXP 12
7286: PUSH
7287: LD_EXP 13
7291: PUSH
7292: LD_EXP 14
7296: PUSH
7297: LD_EXP 15
7301: PUSH
7302: LD_EXP 16
7306: PUSH
7307: LD_EXP 17
7311: PUSH
7312: LD_EXP 18
7316: PUSH
7317: LD_EXP 19
7321: PUSH
7322: LD_EXP 21
7326: PUSH
7327: LD_EXP 22
7331: PUSH
7332: LD_EXP 23
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: PUSH
7350: LD_EXP 24
7354: UNION
7355: ST_TO_ADDR
// hasEng := UnitFilter ( tmp , [ f_class , 2 ] ) > 0 ;
7356: LD_ADDR_VAR 0 6
7360: PUSH
7361: LD_VAR 0 5
7365: PPUSH
7366: LD_INT 25
7368: PUSH
7369: LD_INT 2
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: PPUSH
7376: CALL_OW 72
7380: PUSH
7381: LD_INT 0
7383: GREATER
7384: ST_TO_ADDR
// hasCamera := false ;
7385: LD_ADDR_VAR 0 7
7389: PUSH
7390: LD_INT 0
7392: ST_TO_ADDR
// if not hasEng then
7393: LD_VAR 0 6
7397: NOT
7398: IFFALSE 7426
// SetClass ( tmp [ rand ( 1 , tmp ) ] , class_engineer ) ;
7400: LD_VAR 0 5
7404: PUSH
7405: LD_INT 1
7407: PPUSH
7408: LD_VAR 0 5
7412: PPUSH
7413: CALL_OW 12
7417: ARRAY
7418: PPUSH
7419: LD_INT 2
7421: PPUSH
7422: CALL_OW 336
// if heikeVehicles then
7426: LD_EXP 26
7430: IFFALSE 8054
// begin tmp := SortByClass ( tmp , class_mechanic ) ;
7432: LD_ADDR_VAR 0 5
7436: PUSH
7437: LD_VAR 0 5
7441: PPUSH
7442: LD_INT 3
7444: PPUSH
7445: CALL 54039 0 2
7449: ST_TO_ADDR
// for i in heikeVehicles do
7450: LD_ADDR_VAR 0 2
7454: PUSH
7455: LD_EXP 26
7459: PUSH
7460: FOR_IN
7461: IFFALSE 8052
// begin if not tmp then
7463: LD_VAR 0 5
7467: NOT
7468: IFFALSE 7472
// break ;
7470: GO 8052
// uc_side := 2 ;
7472: LD_ADDR_OWVAR 20
7476: PUSH
7477: LD_INT 2
7479: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
7480: LD_ADDR_OWVAR 21
7484: PUSH
7485: LD_VAR 0 2
7489: PUSH
7490: LD_INT 5
7492: ARRAY
7493: ST_TO_ADDR
// vc_chassis := i [ 1 ] ;
7494: LD_ADDR_OWVAR 37
7498: PUSH
7499: LD_VAR 0 2
7503: PUSH
7504: LD_INT 1
7506: ARRAY
7507: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
7508: LD_ADDR_OWVAR 39
7512: PUSH
7513: LD_VAR 0 2
7517: PUSH
7518: LD_INT 2
7520: ARRAY
7521: ST_TO_ADDR
// vc_control := i [ 3 ] ;
7522: LD_ADDR_OWVAR 38
7526: PUSH
7527: LD_VAR 0 2
7531: PUSH
7532: LD_INT 3
7534: ARRAY
7535: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
7536: LD_ADDR_OWVAR 40
7540: PUSH
7541: LD_VAR 0 2
7545: PUSH
7546: LD_INT 4
7548: ARRAY
7549: ST_TO_ADDR
// veh := CreateVehicle ;
7550: LD_ADDR_VAR 0 4
7554: PUSH
7555: CALL_OW 45
7559: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7560: LD_VAR 0 4
7564: PPUSH
7565: LD_INT 4
7567: PPUSH
7568: CALL_OW 233
// if i [ 3 ] = control_manual then
7572: LD_VAR 0 2
7576: PUSH
7577: LD_INT 3
7579: ARRAY
7580: PUSH
7581: LD_INT 1
7583: EQUAL
7584: IFFALSE 7669
// begin PlaceUnitArea ( veh , startArea , false ) ;
7586: LD_VAR 0 4
7590: PPUSH
7591: LD_INT 1
7593: PPUSH
7594: LD_INT 0
7596: PPUSH
7597: CALL_OW 49
// if i [ 4 ] = ar_control_tower then
7601: LD_VAR 0 2
7605: PUSH
7606: LD_INT 4
7608: ARRAY
7609: PUSH
7610: LD_INT 31
7612: EQUAL
7613: IFFALSE 7631
// SetClass ( tmp [ 1 ] , class_mechanic ) ;
7615: LD_VAR 0 5
7619: PUSH
7620: LD_INT 1
7622: ARRAY
7623: PPUSH
7624: LD_INT 3
7626: PPUSH
7627: CALL_OW 336
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
7631: LD_VAR 0 5
7635: PUSH
7636: LD_INT 1
7638: ARRAY
7639: PPUSH
7640: LD_VAR 0 4
7644: PPUSH
7645: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
7649: LD_ADDR_VAR 0 5
7653: PUSH
7654: LD_VAR 0 5
7658: PPUSH
7659: LD_INT 1
7661: PPUSH
7662: CALL_OW 3
7666: ST_TO_ADDR
// end else
7667: GO 7730
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
7669: LD_INT 22
7671: PUSH
7672: LD_INT 2
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: PUSH
7679: LD_INT 34
7681: PUSH
7682: LD_INT 31
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: PUSH
7689: EMPTY
7690: LIST
7691: LIST
7692: PPUSH
7693: CALL_OW 69
7697: IFFALSE 7730
// begin PlaceUnitArea ( veh , startArea , false ) ;
7699: LD_VAR 0 4
7703: PPUSH
7704: LD_INT 1
7706: PPUSH
7707: LD_INT 0
7709: PPUSH
7710: CALL_OW 49
// Connect ( veh ) ;
7714: LD_VAR 0 4
7718: PPUSH
7719: CALL 23041 0 1
// wait ( 0 0$2 ) ;
7723: LD_INT 70
7725: PPUSH
7726: CALL_OW 67
// end ; SetLives ( veh , i [ 6 ] ) ;
7730: LD_VAR 0 4
7734: PPUSH
7735: LD_VAR 0 2
7739: PUSH
7740: LD_INT 6
7742: ARRAY
7743: PPUSH
7744: CALL_OW 234
// SetFuel ( veh , 20 ) ;
7748: LD_VAR 0 4
7752: PPUSH
7753: LD_INT 20
7755: PPUSH
7756: CALL_OW 240
// if i [ 7 ] and GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay ] then
7760: LD_VAR 0 2
7764: PUSH
7765: LD_INT 7
7767: ARRAY
7768: PUSH
7769: LD_VAR 0 4
7773: PPUSH
7774: CALL_OW 264
7778: PUSH
7779: LD_INT 51
7781: PUSH
7782: LD_INT 32
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: IN
7789: AND
7790: IFFALSE 7841
// begin for j := 1 to 2 do
7792: LD_ADDR_VAR 0 3
7796: PUSH
7797: DOUBLE
7798: LD_INT 1
7800: DEC
7801: ST_TO_ADDR
7802: LD_INT 2
7804: PUSH
7805: FOR_TO
7806: IFFALSE 7839
// AddCargo ( veh , j , i [ 7 ] [ j ] ) ;
7808: LD_VAR 0 4
7812: PPUSH
7813: LD_VAR 0 3
7817: PPUSH
7818: LD_VAR 0 2
7822: PUSH
7823: LD_INT 7
7825: ARRAY
7826: PUSH
7827: LD_VAR 0 3
7831: ARRAY
7832: PPUSH
7833: CALL_OW 291
7837: GO 7805
7839: POP
7840: POP
// end ; ComMoveXY ( veh , 185 , 144 ) ;
7841: LD_VAR 0 4
7845: PPUSH
7846: LD_INT 185
7848: PPUSH
7849: LD_INT 144
7851: PPUSH
7852: CALL_OW 111
// if GetControl ( veh ) = control_manual and not hasCamera and GetClass ( IsDrivenBy ( veh ) ) = 2 then
7856: LD_VAR 0 4
7860: PPUSH
7861: CALL_OW 263
7865: PUSH
7866: LD_INT 1
7868: EQUAL
7869: PUSH
7870: LD_VAR 0 7
7874: NOT
7875: AND
7876: PUSH
7877: LD_VAR 0 4
7881: PPUSH
7882: CALL_OW 311
7886: PPUSH
7887: CALL_OW 257
7891: PUSH
7892: LD_INT 2
7894: EQUAL
7895: AND
7896: IFFALSE 8001
// begin hasCamera := true ;
7898: LD_ADDR_VAR 0 7
7902: PUSH
7903: LD_INT 1
7905: ST_TO_ADDR
// driver := IsDrivenBy ( veh ) ;
7906: LD_ADDR_VAR 0 8
7910: PUSH
7911: LD_VAR 0 4
7915: PPUSH
7916: CALL_OW 311
7920: ST_TO_ADDR
// AddComMoveXY ( veh , 177 , 138 ) ;
7921: LD_VAR 0 4
7925: PPUSH
7926: LD_INT 177
7928: PPUSH
7929: LD_INT 138
7931: PPUSH
7932: CALL_OW 171
// AddComExitVehicle ( driver ) ;
7936: LD_VAR 0 8
7940: PPUSH
7941: CALL_OW 181
// AddComHiddenCamera ( driver , 190 , 150 ) ;
7945: LD_VAR 0 8
7949: PPUSH
7950: LD_INT 190
7952: PPUSH
7953: LD_INT 150
7955: PPUSH
7956: CALL_OW 217
// AddComEnterUnit ( driver , veh ) ;
7960: LD_VAR 0 8
7964: PPUSH
7965: LD_VAR 0 4
7969: PPUSH
7970: CALL_OW 180
// AddComMoveXY ( driver , 170 , 103 ) ;
7974: LD_VAR 0 8
7978: PPUSH
7979: LD_INT 170
7981: PPUSH
7982: LD_INT 103
7984: PPUSH
7985: CALL_OW 171
// CenterOnXY ( 190 , 150 ) ;
7989: LD_INT 190
7991: PPUSH
7992: LD_INT 150
7994: PPUSH
7995: CALL_OW 84
// end else
7999: GO 8043
// begin AddComWait ( veh , 0 0$2 ) ;
8001: LD_VAR 0 4
8005: PPUSH
8006: LD_INT 70
8008: PPUSH
8009: CALL_OW 202
// AddComMoveXY ( veh , 179 , 129 ) ;
8013: LD_VAR 0 4
8017: PPUSH
8018: LD_INT 179
8020: PPUSH
8021: LD_INT 129
8023: PPUSH
8024: CALL_OW 171
// AddComMoveXY ( veh , 170 , 103 ) ;
8028: LD_VAR 0 4
8032: PPUSH
8033: LD_INT 170
8035: PPUSH
8036: LD_INT 103
8038: PPUSH
8039: CALL_OW 171
// end ; wait ( 0 0$2 ) ;
8043: LD_INT 70
8045: PPUSH
8046: CALL_OW 67
// end ;
8050: GO 7460
8052: POP
8053: POP
// end ; if tmp then
8054: LD_VAR 0 5
8058: IFFALSE 8203
// begin for i in tmp do
8060: LD_ADDR_VAR 0 2
8064: PUSH
8065: LD_VAR 0 5
8069: PUSH
8070: FOR_IN
8071: IFFALSE 8201
// begin SetDir ( i , 4 ) ;
8073: LD_VAR 0 2
8077: PPUSH
8078: LD_INT 4
8080: PPUSH
8081: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
8085: LD_VAR 0 2
8089: PPUSH
8090: LD_INT 1
8092: PPUSH
8093: LD_INT 0
8095: PPUSH
8096: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
8100: LD_VAR 0 2
8104: PPUSH
8105: LD_INT 185
8107: PPUSH
8108: LD_INT 144
8110: PPUSH
8111: CALL_OW 111
// if GetClass ( i ) = 2 and not hasCamera then
8115: LD_VAR 0 2
8119: PPUSH
8120: CALL_OW 257
8124: PUSH
8125: LD_INT 2
8127: EQUAL
8128: PUSH
8129: LD_VAR 0 7
8133: NOT
8134: AND
8135: IFFALSE 8162
// begin hasCamera := true ;
8137: LD_ADDR_VAR 0 7
8141: PUSH
8142: LD_INT 1
8144: ST_TO_ADDR
// AddComHiddenCamera ( i , 190 , 150 ) ;
8145: LD_VAR 0 2
8149: PPUSH
8150: LD_INT 190
8152: PPUSH
8153: LD_INT 150
8155: PPUSH
8156: CALL_OW 217
// end else
8160: GO 8177
// AddComMoveXY ( i , 179 , 129 ) ;
8162: LD_VAR 0 2
8166: PPUSH
8167: LD_INT 179
8169: PPUSH
8170: LD_INT 129
8172: PPUSH
8173: CALL_OW 171
// AddComMoveXY ( i , 170 , 103 ) ;
8177: LD_VAR 0 2
8181: PPUSH
8182: LD_INT 170
8184: PPUSH
8185: LD_INT 103
8187: PPUSH
8188: CALL_OW 171
// wait ( 0 0$2 ) ;
8192: LD_INT 70
8194: PPUSH
8195: CALL_OW 67
// end ;
8199: GO 8070
8201: POP
8202: POP
// end ; if heikeApes then
8203: LD_EXP 25
8207: IFFALSE 8290
// begin for i in heikeApes do
8209: LD_ADDR_VAR 0 2
8213: PUSH
8214: LD_EXP 25
8218: PUSH
8219: FOR_IN
8220: IFFALSE 8288
// begin SetDir ( i , 4 ) ;
8222: LD_VAR 0 2
8226: PPUSH
8227: LD_INT 4
8229: PPUSH
8230: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
8234: LD_VAR 0 2
8238: PPUSH
8239: LD_INT 1
8241: PPUSH
8242: LD_INT 0
8244: PPUSH
8245: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
8249: LD_VAR 0 2
8253: PPUSH
8254: LD_INT 185
8256: PPUSH
8257: LD_INT 144
8259: PPUSH
8260: CALL_OW 111
// AddComMoveXY ( i , 170 , 103 ) ;
8264: LD_VAR 0 2
8268: PPUSH
8269: LD_INT 170
8271: PPUSH
8272: LD_INT 103
8274: PPUSH
8275: CALL_OW 171
// wait ( 0 0$2 ) ;
8279: LD_INT 70
8281: PPUSH
8282: CALL_OW 67
// end ;
8286: GO 8219
8288: POP
8289: POP
// end ; AddComMoveXY ( Heike , 163 , 89 ) ;
8290: LD_EXP 12
8294: PPUSH
8295: LD_INT 163
8297: PPUSH
8298: LD_INT 89
8300: PPUSH
8301: CALL_OW 171
// Say ( Heike , DH-Intro-1 ) ;
8305: LD_EXP 12
8309: PPUSH
8310: LD_STRING DH-Intro-1
8312: PPUSH
8313: CALL_OW 88
// CenterOnXY ( 175 , 117 ) ;
8317: LD_INT 175
8319: PPUSH
8320: LD_INT 117
8322: PPUSH
8323: CALL_OW 84
// if Markov then
8327: LD_EXP 19
8331: IFFALSE 8906
// begin Say ( Markov , DMar-Intro-2 ) ;
8333: LD_EXP 19
8337: PPUSH
8338: LD_STRING DMar-Intro-2
8340: PPUSH
8341: CALL_OW 88
// Say ( Markov , DMar-Intro-3 ) ;
8345: LD_EXP 19
8349: PPUSH
8350: LD_STRING DMar-Intro-3
8352: PPUSH
8353: CALL_OW 88
// wait ( 0 0$1 ) ;
8357: LD_INT 35
8359: PPUSH
8360: CALL_OW 67
// CenterOnUnits ( Heike ) ;
8364: LD_EXP 12
8368: PPUSH
8369: CALL_OW 85
// if Kurt then
8373: LD_EXP 22
8377: IFFALSE 8429
// begin if IsInUnit ( Kurt ) then
8379: LD_EXP 22
8383: PPUSH
8384: CALL_OW 310
8388: IFFALSE 8399
// ComExit ( Kurt ) ;
8390: LD_EXP 22
8394: PPUSH
8395: CALL 52209 0 1
// AddComMoveXY ( Kurt , 130 , 56 ) ;
8399: LD_EXP 22
8403: PPUSH
8404: LD_INT 130
8406: PPUSH
8407: LD_INT 56
8409: PPUSH
8410: CALL_OW 171
// AddComTurnXY ( Kurt , 129 , 56 ) ;
8414: LD_EXP 22
8418: PPUSH
8419: LD_INT 129
8421: PPUSH
8422: LD_INT 56
8424: PPUSH
8425: CALL_OW 178
// end ; if Kaia then
8429: LD_EXP 17
8433: IFFALSE 8613
// begin Say ( Kaia , DK-Intro-4 ) ;
8435: LD_EXP 17
8439: PPUSH
8440: LD_STRING DK-Intro-4
8442: PPUSH
8443: CALL_OW 88
// Say ( Markov , DMar-Intro-5 ) ;
8447: LD_EXP 19
8451: PPUSH
8452: LD_STRING DMar-Intro-5
8454: PPUSH
8455: CALL_OW 88
// Say ( Markov , DMar-Intro-6 ) ;
8459: LD_EXP 19
8463: PPUSH
8464: LD_STRING DMar-Intro-6
8466: PPUSH
8467: CALL_OW 88
// Say ( Olaf , DO-Intro-7 ) ;
8471: LD_EXP 21
8475: PPUSH
8476: LD_STRING DO-Intro-7
8478: PPUSH
8479: CALL_OW 88
// CenterOnXY ( 160 , 85 ) ;
8483: LD_INT 160
8485: PPUSH
8486: LD_INT 85
8488: PPUSH
8489: CALL_OW 84
// Say ( Markov , DMar-Intro-8 ) ;
8493: LD_EXP 19
8497: PPUSH
8498: LD_STRING DMar-Intro-8
8500: PPUSH
8501: CALL_OW 88
// Say ( Markov , DMar-Intro-9 ) ;
8505: LD_EXP 19
8509: PPUSH
8510: LD_STRING DMar-Intro-9
8512: PPUSH
8513: CALL_OW 88
// Say ( Markov , DMar-Intro-10 ) ;
8517: LD_EXP 19
8521: PPUSH
8522: LD_STRING DMar-Intro-10
8524: PPUSH
8525: CALL_OW 88
// Say ( Markov , DMar-Intro-11 ) ;
8529: LD_EXP 19
8533: PPUSH
8534: LD_STRING DMar-Intro-11
8536: PPUSH
8537: CALL_OW 88
// Say ( Givi , DG-Intro-12 ) ;
8541: LD_EXP 13
8545: PPUSH
8546: LD_STRING DG-Intro-12
8548: PPUSH
8549: CALL_OW 88
// Say ( Givi , DG-Intro-13 ) ;
8553: LD_EXP 13
8557: PPUSH
8558: LD_STRING DG-Intro-13
8560: PPUSH
8561: CALL_OW 88
// Say ( Givi , DG-Intro-14 ) ;
8565: LD_EXP 13
8569: PPUSH
8570: LD_STRING DG-Intro-14
8572: PPUSH
8573: CALL_OW 88
// Say ( Givi , DG-Intro-15 ) ;
8577: LD_EXP 13
8581: PPUSH
8582: LD_STRING DG-Intro-15
8584: PPUSH
8585: CALL_OW 88
// Say ( Heike , DH-Intro-16 ) ;
8589: LD_EXP 12
8593: PPUSH
8594: LD_STRING DH-Intro-16
8596: PPUSH
8597: CALL_OW 88
// Say ( Markov , DMar-Intro-17 ) ;
8601: LD_EXP 19
8605: PPUSH
8606: LD_STRING DMar-Intro-17
8608: PPUSH
8609: CALL_OW 88
// end ; if Kurt and Mike then
8613: LD_EXP 22
8617: PUSH
8618: LD_EXP 14
8622: AND
8623: IFFALSE 8906
// begin CenterNowOnUnits ( Kurt ) ;
8625: LD_EXP 22
8629: PPUSH
8630: CALL_OW 87
// ComTurnUnit ( Kurt , Heike ) ;
8634: LD_EXP 22
8638: PPUSH
8639: LD_EXP 12
8643: PPUSH
8644: CALL_OW 119
// Say ( Kurt , DKs-Intro-18 ) ;
8648: LD_EXP 22
8652: PPUSH
8653: LD_STRING DKs-Intro-18
8655: PPUSH
8656: CALL_OW 88
// Say ( Kurt , DKs-Intro-19 ) ;
8660: LD_EXP 22
8664: PPUSH
8665: LD_STRING DKs-Intro-19
8667: PPUSH
8668: CALL_OW 88
// CenterNowOnUnits ( Mike ) ;
8672: LD_EXP 14
8676: PPUSH
8677: CALL_OW 87
// if IsInUnit ( Mike ) then
8681: LD_EXP 14
8685: PPUSH
8686: CALL_OW 310
8690: IFFALSE 8701
// ComExit ( Mike ) ;
8692: LD_EXP 14
8696: PPUSH
8697: CALL 52209 0 1
// AddComMoveXY ( Mike , 129 , 53 ) ;
8701: LD_EXP 14
8705: PPUSH
8706: LD_INT 129
8708: PPUSH
8709: LD_INT 53
8711: PPUSH
8712: CALL_OW 171
// AddComHold ( Mike ) ;
8716: LD_EXP 14
8720: PPUSH
8721: CALL_OW 200
// wait ( 0 0$2 ) ;
8725: LD_INT 70
8727: PPUSH
8728: CALL_OW 67
// Say ( Mike , DM-Intro-20 ) ;
8732: LD_EXP 14
8736: PPUSH
8737: LD_STRING DM-Intro-20
8739: PPUSH
8740: CALL_OW 88
// scoutActive := Query ( Scout ) ;
8744: LD_ADDR_EXP 3
8748: PUSH
8749: LD_STRING Scout
8751: PPUSH
8752: CALL_OW 97
8756: ST_TO_ADDR
// if scoutActive = 1 then
8757: LD_EXP 3
8761: PUSH
8762: LD_INT 1
8764: EQUAL
8765: IFFALSE 8862
// begin CenterNowOnUnits ( Kurt ) ;
8767: LD_EXP 22
8771: PPUSH
8772: CALL_OW 87
// Say ( Heike , DH-Intro-21 ) ;
8776: LD_EXP 12
8780: PPUSH
8781: LD_STRING DH-Intro-21
8783: PPUSH
8784: CALL_OW 88
// Say ( Mike , DM-Intro-22 ) ;
8788: LD_EXP 14
8792: PPUSH
8793: LD_STRING DM-Intro-22
8795: PPUSH
8796: CALL_OW 88
// Say ( Kurt , DKs-Intro-23 ) ;
8800: LD_EXP 22
8804: PPUSH
8805: LD_STRING DKs-Intro-23
8807: PPUSH
8808: CALL_OW 88
// SetSide ( Kurt , 5 ) ;
8812: LD_EXP 22
8816: PPUSH
8817: LD_INT 5
8819: PPUSH
8820: CALL_OW 235
// SetSide ( Mike , 5 ) ;
8824: LD_EXP 14
8828: PPUSH
8829: LD_INT 5
8831: PPUSH
8832: CALL_OW 235
// ComMoveXY ( [ Kurt , Mike ] , 104 , 66 ) ;
8836: LD_EXP 22
8840: PUSH
8841: LD_EXP 14
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: PPUSH
8850: LD_INT 104
8852: PPUSH
8853: LD_INT 66
8855: PPUSH
8856: CALL_OW 111
// end else
8860: GO 8906
// begin scoutActive := 0 ;
8862: LD_ADDR_EXP 3
8866: PUSH
8867: LD_INT 0
8869: ST_TO_ADDR
// Say ( Heike , DH-Intro-a-21 ) ;
8870: LD_EXP 12
8874: PPUSH
8875: LD_STRING DH-Intro-a-21
8877: PPUSH
8878: CALL_OW 88
// Say ( Mike , DM-Intro-a-22 ) ;
8882: LD_EXP 14
8886: PPUSH
8887: LD_STRING DM-Intro-a-22
8889: PPUSH
8890: CALL_OW 88
// Say ( Kurt , DKs-Intro-a-23 ) ;
8894: LD_EXP 22
8898: PPUSH
8899: LD_STRING DKs-Intro-a-23
8901: PPUSH
8902: CALL_OW 88
// end ; end ; end ; Video ( false ) ;
8906: LD_INT 0
8908: PPUSH
8909: CALL 51793 0 1
// music_nat := music_auto ;
8913: LD_ADDR_OWVAR 71
8917: PUSH
8918: LD_INT 0
8920: ST_TO_ADDR
// music_class := music_auto ;
8921: LD_ADDR_OWVAR 72
8925: PUSH
8926: LD_INT 0
8928: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
8929: LD_STRING M1
8931: PPUSH
8932: CALL_OW 337
// wait ( 0 0$3 ) ;
8936: LD_INT 105
8938: PPUSH
8939: CALL_OW 67
// Say ( Heike , DH-Base-1 ) ;
8943: LD_EXP 12
8947: PPUSH
8948: LD_STRING DH-Base-1
8950: PPUSH
8951: CALL_OW 88
// if Kaia then
8955: LD_EXP 17
8959: IFFALSE 9069
// begin Say ( Kaia , DK-Base-2 ) ;
8961: LD_EXP 17
8965: PPUSH
8966: LD_STRING DK-Base-2
8968: PPUSH
8969: CALL_OW 88
// Say ( Heike , DH-Base-3 ) ;
8973: LD_EXP 12
8977: PPUSH
8978: LD_STRING DH-Base-3
8980: PPUSH
8981: CALL_OW 88
// if Aviradze then
8985: LD_EXP 23
8989: IFFALSE 9069
// begin Say ( Aviradze , DA-Base-4 ) ;
8991: LD_EXP 23
8995: PPUSH
8996: LD_STRING DA-Base-4
8998: PPUSH
8999: CALL_OW 88
// Say ( Kaia , DK-Base-5 ) ;
9003: LD_EXP 17
9007: PPUSH
9008: LD_STRING DK-Base-5
9010: PPUSH
9011: CALL_OW 88
// if Markov then
9015: LD_EXP 19
9019: IFFALSE 9069
// begin Say ( Markov , DMar-Base-6 ) ;
9021: LD_EXP 19
9025: PPUSH
9026: LD_STRING DMar-Base-6
9028: PPUSH
9029: CALL_OW 88
// Say ( Kaia , DK-Base-7 ) ;
9033: LD_EXP 17
9037: PPUSH
9038: LD_STRING DK-Base-7
9040: PPUSH
9041: CALL_OW 88
// Say ( Markov , DMar-Base-8 ) ;
9045: LD_EXP 19
9049: PPUSH
9050: LD_STRING DMar-Base-8
9052: PPUSH
9053: CALL_OW 88
// Say ( Markov , DMar-Base-9 ) ;
9057: LD_EXP 19
9061: PPUSH
9062: LD_STRING DMar-Base-9
9064: PPUSH
9065: CALL_OW 88
// end ; end ; end ; SaveForQuickRestart ;
9069: CALL_OW 22
// end ;
9073: LD_VAR 0 1
9077: RET
// every 0 0$1 trigger scoutSuccess do var i , tmp ;
9078: LD_EXP 5
9082: IFFALSE 10186
9084: GO 9086
9086: DISABLE
9087: LD_INT 0
9089: PPUSH
9090: PPUSH
// begin InGameOn ;
9091: CALL_OW 8
// ComTurnUnit ( [ Mike , Kurt ] , Heike ) ;
9095: LD_EXP 14
9099: PUSH
9100: LD_EXP 22
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: PPUSH
9109: LD_EXP 12
9113: PPUSH
9114: CALL_OW 119
// ComExit ( Heike ) ;
9118: LD_EXP 12
9122: PPUSH
9123: CALL 52209 0 1
// if IsOk ( Mike ) then
9127: LD_EXP 14
9131: PPUSH
9132: CALL_OW 302
9136: IFFALSE 9154
// AddComTurnUnit ( Heike , Mike ) else
9138: LD_EXP 12
9142: PPUSH
9143: LD_EXP 14
9147: PPUSH
9148: CALL_OW 179
9152: GO 9168
// AddComTurnUnit ( Heike , Kurt ) ;
9154: LD_EXP 12
9158: PPUSH
9159: LD_EXP 22
9163: PPUSH
9164: CALL_OW 179
// if IsOk ( Mike ) and IsOk ( Kurt ) then
9168: LD_EXP 14
9172: PPUSH
9173: CALL_OW 302
9177: PUSH
9178: LD_EXP 22
9182: PPUSH
9183: CALL_OW 302
9187: AND
9188: IFFALSE 9439
// begin CenterNowOnUnits ( Mike ) ;
9190: LD_EXP 14
9194: PPUSH
9195: CALL_OW 87
// Say ( Mike , DM-Scout-1 ) ;
9199: LD_EXP 14
9203: PPUSH
9204: LD_STRING DM-Scout-1
9206: PPUSH
9207: CALL_OW 88
// Say ( Heike , DH-Scout-2 ) ;
9211: LD_EXP 12
9215: PPUSH
9216: LD_STRING DH-Scout-2
9218: PPUSH
9219: CALL_OW 88
// Say ( Kurt , DKs-Scout-3 ) ;
9223: LD_EXP 22
9227: PPUSH
9228: LD_STRING DKs-Scout-3
9230: PPUSH
9231: CALL_OW 88
// Say ( Heike , DH-Scout-4 ) ;
9235: LD_EXP 12
9239: PPUSH
9240: LD_STRING DH-Scout-4
9242: PPUSH
9243: CALL_OW 88
// Say ( Heike , DH-Scout-5 ) ;
9247: LD_EXP 12
9251: PPUSH
9252: LD_STRING DH-Scout-5
9254: PPUSH
9255: CALL_OW 88
// tmp := [ [ 72 , 122 ] , [ 89 , 131 ] , [ 99 , 139 ] , [ 100 , 148 ] ] ;
9259: LD_ADDR_VAR 0 2
9263: PUSH
9264: LD_INT 72
9266: PUSH
9267: LD_INT 122
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: PUSH
9274: LD_INT 89
9276: PUSH
9277: LD_INT 131
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 99
9286: PUSH
9287: LD_INT 139
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: LD_INT 100
9296: PUSH
9297: LD_INT 148
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: PUSH
9304: EMPTY
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: ST_TO_ADDR
// for i in tmp do
9310: LD_ADDR_VAR 0 1
9314: PUSH
9315: LD_VAR 0 2
9319: PUSH
9320: FOR_IN
9321: IFFALSE 9379
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 2 , - 6 ) ;
9323: LD_VAR 0 1
9327: PUSH
9328: LD_INT 1
9330: ARRAY
9331: PPUSH
9332: LD_VAR 0 1
9336: PUSH
9337: LD_INT 2
9339: ARRAY
9340: PPUSH
9341: LD_INT 2
9343: PPUSH
9344: LD_INT 6
9346: NEG
9347: PPUSH
9348: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 2 ) ;
9352: LD_VAR 0 1
9356: PUSH
9357: LD_INT 1
9359: ARRAY
9360: PPUSH
9361: LD_VAR 0 1
9365: PUSH
9366: LD_INT 2
9368: ARRAY
9369: PPUSH
9370: LD_INT 2
9372: PPUSH
9373: CALL_OW 331
// end ;
9377: GO 9320
9379: POP
9380: POP
// CenterOnXY ( 83 , 132 ) ;
9381: LD_INT 83
9383: PPUSH
9384: LD_INT 132
9386: PPUSH
9387: CALL_OW 84
// Say ( Kurt , DKs-Scout-6 ) ;
9391: LD_EXP 22
9395: PPUSH
9396: LD_STRING DKs-Scout-6
9398: PPUSH
9399: CALL_OW 88
// Say ( Mike , DM-Scout-7 ) ;
9403: LD_EXP 14
9407: PPUSH
9408: LD_STRING DM-Scout-7
9410: PPUSH
9411: CALL_OW 88
// Say ( Mike , DM-Scout-8 ) ;
9415: LD_EXP 14
9419: PPUSH
9420: LD_STRING DM-Scout-8
9422: PPUSH
9423: CALL_OW 88
// Say ( Kurt , DKs-Scout-9 ) ;
9427: LD_EXP 22
9431: PPUSH
9432: LD_STRING DKs-Scout-9
9434: PPUSH
9435: CALL_OW 88
// end ; if IsDead ( Mike ) then
9439: LD_EXP 14
9443: PPUSH
9444: CALL_OW 301
9448: IFFALSE 9615
// begin CenterNowOnUnits ( Kurt ) ;
9450: LD_EXP 22
9454: PPUSH
9455: CALL_OW 87
// Say ( Kurt , DKs-Scout-b-1 ) ;
9459: LD_EXP 22
9463: PPUSH
9464: LD_STRING DKs-Scout-b-1
9466: PPUSH
9467: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-2 ) ;
9471: LD_EXP 22
9475: PPUSH
9476: LD_STRING DKs-Scout-b-2
9478: PPUSH
9479: CALL_OW 88
// if IsOk ( Givi ) then
9483: LD_EXP 13
9487: PPUSH
9488: CALL_OW 302
9492: IFFALSE 9567
// begin ComExit ( Givi ) ;
9494: LD_EXP 13
9498: PPUSH
9499: CALL 52209 0 1
// AddComTurnUnit ( Givi , Kurt ) ;
9503: LD_EXP 13
9507: PPUSH
9508: LD_EXP 22
9512: PPUSH
9513: CALL_OW 179
// Say ( Givi , DG-Scout-b-3 ) ;
9517: LD_EXP 13
9521: PPUSH
9522: LD_STRING DG-Scout-b-3
9524: PPUSH
9525: CALL_OW 88
// Say ( Givi , DG-Scout-b-4 ) ;
9529: LD_EXP 13
9533: PPUSH
9534: LD_STRING DG-Scout-b-4
9536: PPUSH
9537: CALL_OW 88
// Say ( Givi , DG-Scout-b-5 ) ;
9541: LD_EXP 13
9545: PPUSH
9546: LD_STRING DG-Scout-b-5
9548: PPUSH
9549: CALL_OW 88
// Say ( Heike , DH-Scout-b-6 ) ;
9553: LD_EXP 12
9557: PPUSH
9558: LD_STRING DH-Scout-b-6
9560: PPUSH
9561: CALL_OW 88
// end else
9565: GO 9579
// Say ( Heike , DH-Scout-a-4 ) ;
9567: LD_EXP 12
9571: PPUSH
9572: LD_STRING DH-Scout-a-4
9574: PPUSH
9575: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-7 ) ;
9579: LD_EXP 22
9583: PPUSH
9584: LD_STRING DKs-Scout-b-7
9586: PPUSH
9587: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-8 ) ;
9591: LD_EXP 22
9595: PPUSH
9596: LD_STRING DKs-Scout-b-8
9598: PPUSH
9599: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-9 ) ;
9603: LD_EXP 22
9607: PPUSH
9608: LD_STRING DKs-Scout-b-9
9610: PPUSH
9611: CALL_OW 88
// end ; if IsDead ( Kurt ) then
9615: LD_EXP 22
9619: PPUSH
9620: CALL_OW 301
9624: IFFALSE 9903
// begin CenterNowOnUnits ( Mike ) ;
9626: LD_EXP 14
9630: PPUSH
9631: CALL_OW 87
// Say ( Mike , DM-Scout-a-1 ) ;
9635: LD_EXP 14
9639: PPUSH
9640: LD_STRING DM-Scout-a-1
9642: PPUSH
9643: CALL_OW 88
// Say ( Mike , DM-Scout-a-2 ) ;
9647: LD_EXP 14
9651: PPUSH
9652: LD_STRING DM-Scout-a-2
9654: PPUSH
9655: CALL_OW 88
// if GetLives ( Mike ) < 1000 then
9659: LD_EXP 14
9663: PPUSH
9664: CALL_OW 256
9668: PUSH
9669: LD_INT 1000
9671: LESS
9672: IFFALSE 9688
// Say ( Heike , DH-Scout-a-3 ) else
9674: LD_EXP 12
9678: PPUSH
9679: LD_STRING DH-Scout-a-3
9681: PPUSH
9682: CALL_OW 88
9686: GO 9700
// Say ( Heike , DH-Scout-a-4 ) ;
9688: LD_EXP 12
9692: PPUSH
9693: LD_STRING DH-Scout-a-4
9695: PPUSH
9696: CALL_OW 88
// Say ( Mike , DM-Scout-a-5 ) ;
9700: LD_EXP 14
9704: PPUSH
9705: LD_STRING DM-Scout-a-5
9707: PPUSH
9708: CALL_OW 88
// if IsOk ( Kaia ) then
9712: LD_EXP 17
9716: PPUSH
9717: CALL_OW 302
9721: IFFALSE 9903
// begin ComExit ( Kaia ) ;
9723: LD_EXP 17
9727: PPUSH
9728: CALL 52209 0 1
// AddComMoveUnit ( Kaia , Mike ) ;
9732: LD_EXP 17
9736: PPUSH
9737: LD_EXP 14
9741: PPUSH
9742: CALL_OW 172
// wait ( 0 0$2 ) ;
9746: LD_INT 70
9748: PPUSH
9749: CALL_OW 67
// ComTurnUnit ( Kaia , Mike ) ;
9753: LD_EXP 17
9757: PPUSH
9758: LD_EXP 14
9762: PPUSH
9763: CALL_OW 119
// ComTurnUnit ( Mike , Kaia ) ;
9767: LD_EXP 14
9771: PPUSH
9772: LD_EXP 17
9776: PPUSH
9777: CALL_OW 119
// Say ( Kaia , DK-Scout-a-6 ) ;
9781: LD_EXP 17
9785: PPUSH
9786: LD_STRING DK-Scout-a-6
9788: PPUSH
9789: CALL_OW 88
// Say ( Mike , DM-Scout-a-7 ) ;
9793: LD_EXP 14
9797: PPUSH
9798: LD_STRING DM-Scout-a-7
9800: PPUSH
9801: CALL_OW 88
// Say ( Kaia , DK-Scout-a-8 ) ;
9805: LD_EXP 17
9809: PPUSH
9810: LD_STRING DK-Scout-a-8
9812: PPUSH
9813: CALL_OW 88
// Say ( Kaia , DK-Scout-a-9 ) ;
9817: LD_EXP 17
9821: PPUSH
9822: LD_STRING DK-Scout-a-9
9824: PPUSH
9825: CALL_OW 88
// Say ( Heike , DH-Scout-a-10 ) ;
9829: LD_EXP 12
9833: PPUSH
9834: LD_STRING DH-Scout-a-10
9836: PPUSH
9837: CALL_OW 88
// ComTurnUnit ( Mike , Heike ) ;
9841: LD_EXP 14
9845: PPUSH
9846: LD_EXP 12
9850: PPUSH
9851: CALL_OW 119
// Say ( Mike , DM-Scout-a-11 ) ;
9855: LD_EXP 14
9859: PPUSH
9860: LD_STRING DM-Scout-a-11
9862: PPUSH
9863: CALL_OW 88
// Say ( Mike , DM-Scout-a-12 ) ;
9867: LD_EXP 14
9871: PPUSH
9872: LD_STRING DM-Scout-a-12
9874: PPUSH
9875: CALL_OW 88
// Say ( Mike , DM-Scout-a-13 ) ;
9879: LD_EXP 14
9883: PPUSH
9884: LD_STRING DM-Scout-a-13
9886: PPUSH
9887: CALL_OW 88
// Say ( Mike , DM-Scout-a-14 ) ;
9891: LD_EXP 14
9895: PPUSH
9896: LD_STRING DM-Scout-a-14
9898: PPUSH
9899: CALL_OW 88
// end ; end ; if IsOk ( Givi ) then
9903: LD_EXP 13
9907: PPUSH
9908: CALL_OW 302
9912: IFFALSE 9940
// begin Say ( Givi , DG-Scout-10 ) ;
9914: LD_EXP 13
9918: PPUSH
9919: LD_STRING DG-Scout-10
9921: PPUSH
9922: CALL_OW 88
// Say ( Givi , DG-Scout-11 ) ;
9926: LD_EXP 13
9930: PPUSH
9931: LD_STRING DG-Scout-11
9933: PPUSH
9934: CALL_OW 88
// end else
9938: GO 9997
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-10 ) then
9940: LD_EXP 24
9944: PPUSH
9945: LD_INT 26
9947: PUSH
9948: LD_INT 1
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: PPUSH
9955: CALL_OW 72
9959: PPUSH
9960: LD_STRING DArm-Scout-10
9962: PPUSH
9963: CALL 162 0 2
9967: NOT
9968: IFFALSE 9997
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-10 ) ;
9970: LD_EXP 24
9974: PPUSH
9975: LD_INT 26
9977: PUSH
9978: LD_INT 2
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: PPUSH
9985: CALL_OW 72
9989: PPUSH
9990: LD_STRING DArf-Scout-10
9992: PPUSH
9993: CALL 162 0 2
// Say ( Heike , DH-Scout-12 ) ;
9997: LD_EXP 12
10001: PPUSH
10002: LD_STRING DH-Scout-12
10004: PPUSH
10005: CALL_OW 88
// Say ( Heike , DH-Scout-13 ) ;
10009: LD_EXP 12
10013: PPUSH
10014: LD_STRING DH-Scout-13
10016: PPUSH
10017: CALL_OW 88
// if IsOk ( Mike ) and IsOk ( Kurt ) then
10021: LD_EXP 14
10025: PPUSH
10026: CALL_OW 302
10030: PUSH
10031: LD_EXP 22
10035: PPUSH
10036: CALL_OW 302
10040: AND
10041: IFFALSE 10069
// begin Say ( Mike , DM-Scout-14 ) ;
10043: LD_EXP 14
10047: PPUSH
10048: LD_STRING DM-Scout-14
10050: PPUSH
10051: CALL_OW 88
// Say ( Heike , DH-Scout-c-14 ) ;
10055: LD_EXP 12
10059: PPUSH
10060: LD_STRING DH-Scout-c-14
10062: PPUSH
10063: CALL_OW 88
// end else
10067: GO 10162
// if IsOk ( Mike ) xor IsOk ( Kurt ) then
10069: LD_EXP 14
10073: PPUSH
10074: CALL_OW 302
10078: PUSH
10079: LD_EXP 22
10083: PPUSH
10084: CALL_OW 302
10088: XOR
10089: IFFALSE 10150
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-a-14 ) then
10091: LD_EXP 24
10095: PPUSH
10096: LD_INT 26
10098: PUSH
10099: LD_INT 1
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PPUSH
10106: CALL_OW 72
10110: PPUSH
10111: LD_STRING DArm-Scout-a-14
10113: PPUSH
10114: CALL 162 0 2
10118: NOT
10119: IFFALSE 10148
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-a-14 ) ;
10121: LD_EXP 24
10125: PPUSH
10126: LD_INT 26
10128: PUSH
10129: LD_INT 2
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PPUSH
10136: CALL_OW 72
10140: PPUSH
10141: LD_STRING DArf-Scout-a-14
10143: PPUSH
10144: CALL 162 0 2
// end else
10148: GO 10162
// Say ( Heike , DH-Scout-d-14 ) ;
10150: LD_EXP 12
10154: PPUSH
10155: LD_STRING DH-Scout-d-14
10157: PPUSH
10158: CALL_OW 88
// Say ( Heike , DH-Scout-15 ) ;
10162: LD_EXP 12
10166: PPUSH
10167: LD_STRING DH-Scout-15
10169: PPUSH
10170: CALL_OW 88
// InGameOff ;
10174: CALL_OW 9
// usAttacksAllowed := true ;
10178: LD_ADDR_EXP 6
10182: PUSH
10183: LD_INT 1
10185: ST_TO_ADDR
// end ;
10186: PPOPN 2
10188: END
// every 0 0$1 trigger scoutFailed do var spoken ;
10189: LD_EXP 4
10193: IFFALSE 10370
10195: GO 10197
10197: DISABLE
10198: LD_INT 0
10200: PPUSH
// begin spoken := true ;
10201: LD_ADDR_VAR 0 1
10205: PUSH
10206: LD_INT 1
10208: ST_TO_ADDR
// wait ( 0 0$30 ) ;
10209: LD_INT 1050
10211: PPUSH
10212: CALL_OW 67
// Say ( Heike , DH-Scout-c-1 ) ;
10216: LD_EXP 12
10220: PPUSH
10221: LD_STRING DH-Scout-c-1
10223: PPUSH
10224: CALL_OW 88
// if not IsOk ( Givi ) then
10228: LD_EXP 13
10232: PPUSH
10233: CALL_OW 302
10237: NOT
10238: IFFALSE 10242
// exit ;
10240: GO 10370
// if IsOk ( Givi ) then
10242: LD_EXP 13
10246: PPUSH
10247: CALL_OW 302
10251: IFFALSE 10279
// begin Say ( Givi , DG-Scout-c-2 ) ;
10253: LD_EXP 13
10257: PPUSH
10258: LD_STRING DG-Scout-c-2
10260: PPUSH
10261: CALL_OW 88
// Say ( Givi , DG-Scout-c-3 ) ;
10265: LD_EXP 13
10269: PPUSH
10270: LD_STRING DG-Scout-c-3
10272: PPUSH
10273: CALL_OW 88
// end else
10277: GO 10352
// begin spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-c-3 ) ;
10279: LD_ADDR_VAR 0 1
10283: PUSH
10284: LD_EXP 24
10288: PPUSH
10289: LD_INT 26
10291: PUSH
10292: LD_INT 1
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PPUSH
10299: CALL_OW 72
10303: PPUSH
10304: LD_STRING DArm-Scout-c-3
10306: PPUSH
10307: CALL 162 0 2
10311: ST_TO_ADDR
// if not spoken then
10312: LD_VAR 0 1
10316: NOT
10317: IFFALSE 10352
// spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-c-3 ) ;
10319: LD_ADDR_VAR 0 1
10323: PUSH
10324: LD_EXP 24
10328: PPUSH
10329: LD_INT 26
10331: PUSH
10332: LD_INT 2
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: PPUSH
10339: CALL_OW 72
10343: PPUSH
10344: LD_STRING DArf-Scout-c-3
10346: PPUSH
10347: CALL 162 0 2
10351: ST_TO_ADDR
// ; end ; if spoken then
10352: LD_VAR 0 1
10356: IFFALSE 10370
// Say ( Heike , DH-Scout-c-4 ) ;
10358: LD_EXP 12
10362: PPUSH
10363: LD_STRING DH-Scout-c-4
10365: PPUSH
10366: CALL_OW 88
// end ;
10370: PPOPN 1
10372: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_half ] ] ) and IsOk ( Aviradze ) do
10373: LD_INT 22
10375: PUSH
10376: LD_INT 2
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PUSH
10383: LD_INT 30
10385: PUSH
10386: LD_INT 7
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PPUSH
10397: CALL_OW 69
10401: PUSH
10402: LD_EXP 23
10406: PPUSH
10407: CALL_OW 302
10411: AND
10412: IFFALSE 10497
10414: GO 10416
10416: DISABLE
// begin DialogueOn ;
10417: CALL_OW 6
// Say ( Aviradze , DA-Lab-1 ) ;
10421: LD_EXP 23
10425: PPUSH
10426: LD_STRING DA-Lab-1
10428: PPUSH
10429: CALL_OW 88
// Say ( Heike , DH-Lab-2 ) ;
10433: LD_EXP 12
10437: PPUSH
10438: LD_STRING DH-Lab-2
10440: PPUSH
10441: CALL_OW 88
// Say ( Aviradze , DA-Lab-3 ) ;
10445: LD_EXP 23
10449: PPUSH
10450: LD_STRING DA-Lab-3
10452: PPUSH
10453: CALL_OW 88
// Say ( Aviradze , DA-Lab-4 ) ;
10457: LD_EXP 23
10461: PPUSH
10462: LD_STRING DA-Lab-4
10464: PPUSH
10465: CALL_OW 88
// Say ( Aviradze , DA-Lab-5 ) ;
10469: LD_EXP 23
10473: PPUSH
10474: LD_STRING DA-Lab-5
10476: PPUSH
10477: CALL_OW 88
// Say ( Heike , DH-Lab-6 ) ;
10481: LD_EXP 12
10485: PPUSH
10486: LD_STRING DH-Lab-6
10488: PPUSH
10489: CALL_OW 88
// DialogueOff ;
10493: CALL_OW 7
// end ;
10497: END
// every 0 0$1 trigger GetTech ( tech_MatDet , 2 ) = state_researched and IsOk ( Givi ) do
10498: LD_INT 7
10500: PPUSH
10501: LD_INT 2
10503: PPUSH
10504: CALL_OW 321
10508: PUSH
10509: LD_INT 2
10511: EQUAL
10512: PUSH
10513: LD_EXP 13
10517: PPUSH
10518: CALL_OW 302
10522: AND
10523: IFFALSE 10692
10525: GO 10527
10527: DISABLE
// begin DialogueOn ;
10528: CALL_OW 6
// Say ( Givi , DG-Opt-1 ) ;
10532: LD_EXP 13
10536: PPUSH
10537: LD_STRING DG-Opt-1
10539: PPUSH
10540: CALL_OW 88
// Say ( Heike , DH-Opt-2 ) ;
10544: LD_EXP 12
10548: PPUSH
10549: LD_STRING DH-Opt-2
10551: PPUSH
10552: CALL_OW 88
// Say ( Givi , DG-Opt-3 ) ;
10556: LD_EXP 13
10560: PPUSH
10561: LD_STRING DG-Opt-3
10563: PPUSH
10564: CALL_OW 88
// Say ( Givi , DG-Opt-4 ) ;
10568: LD_EXP 13
10572: PPUSH
10573: LD_STRING DG-Opt-4
10575: PPUSH
10576: CALL_OW 88
// Say ( Heike , DH-Opt-5 ) ;
10580: LD_EXP 12
10584: PPUSH
10585: LD_STRING DH-Opt-5
10587: PPUSH
10588: CALL_OW 88
// Say ( Givi , DG-Opt-6 ) ;
10592: LD_EXP 13
10596: PPUSH
10597: LD_STRING DG-Opt-6
10599: PPUSH
10600: CALL_OW 88
// Say ( Heike , DH-Opt-7 ) ;
10604: LD_EXP 12
10608: PPUSH
10609: LD_STRING DH-Opt-7
10611: PPUSH
10612: CALL_OW 88
// Say ( Givi , DG-Opt-8 ) ;
10616: LD_EXP 13
10620: PPUSH
10621: LD_STRING DG-Opt-8
10623: PPUSH
10624: CALL_OW 88
// Say ( Givi , DG-Opt-9 ) ;
10628: LD_EXP 13
10632: PPUSH
10633: LD_STRING DG-Opt-9
10635: PPUSH
10636: CALL_OW 88
// Say ( Heike , DH-Opt-10 ) ;
10640: LD_EXP 12
10644: PPUSH
10645: LD_STRING DH-Opt-10
10647: PPUSH
10648: CALL_OW 88
// Say ( Givi , DG-Opt-11 ) ;
10652: LD_EXP 13
10656: PPUSH
10657: LD_STRING DG-Opt-11
10659: PPUSH
10660: CALL_OW 88
// Say ( Givi , DG-Opt-12 ) ;
10664: LD_EXP 13
10668: PPUSH
10669: LD_STRING DG-Opt-12
10671: PPUSH
10672: CALL_OW 88
// Say ( Heike , DH-Opt-13 ) ;
10676: LD_EXP 12
10680: PPUSH
10681: LD_STRING DH-Opt-13
10683: PPUSH
10684: CALL_OW 88
// DialogueOff ;
10688: CALL_OW 7
// end ;
10692: END
// every 0 0$1 trigger GetTech ( tech_rocket , 2 ) = state_researched and IsOk ( Ibrahim ) do
10693: LD_INT 40
10695: PPUSH
10696: LD_INT 2
10698: PPUSH
10699: CALL_OW 321
10703: PUSH
10704: LD_INT 2
10706: EQUAL
10707: PUSH
10708: LD_EXP 15
10712: PPUSH
10713: CALL_OW 302
10717: AND
10718: IFFALSE 10968
10720: GO 10722
10722: DISABLE
// begin DialogueOn ;
10723: CALL_OW 6
// Say ( Ibrahim , DI-Roc-1 ) ;
10727: LD_EXP 15
10731: PPUSH
10732: LD_STRING DI-Roc-1
10734: PPUSH
10735: CALL_OW 88
// Say ( Heike , DH-Roc-2 ) ;
10739: LD_EXP 12
10743: PPUSH
10744: LD_STRING DH-Roc-2
10746: PPUSH
10747: CALL_OW 88
// Say ( Ibrahim , DI-Roc-3 ) ;
10751: LD_EXP 15
10755: PPUSH
10756: LD_STRING DI-Roc-3
10758: PPUSH
10759: CALL_OW 88
// Say ( Ibrahim , DI-Roc-4 ) ;
10763: LD_EXP 15
10767: PPUSH
10768: LD_STRING DI-Roc-4
10770: PPUSH
10771: CALL_OW 88
// Say ( Kaia , DK-Roc-5 ) ;
10775: LD_EXP 17
10779: PPUSH
10780: LD_STRING DK-Roc-5
10782: PPUSH
10783: CALL_OW 88
// Say ( Kaia , DK-Roc-6 ) ;
10787: LD_EXP 17
10791: PPUSH
10792: LD_STRING DK-Roc-6
10794: PPUSH
10795: CALL_OW 88
// Say ( Givi , DG-Roc-7 ) ;
10799: LD_EXP 13
10803: PPUSH
10804: LD_STRING DG-Roc-7
10806: PPUSH
10807: CALL_OW 88
// Say ( Givi , DG-Roc-8 ) ;
10811: LD_EXP 13
10815: PPUSH
10816: LD_STRING DG-Roc-8
10818: PPUSH
10819: CALL_OW 88
// if IsOk ( Markov ) and IsOk ( Kaia ) and IsOk ( Givi ) then
10823: LD_EXP 19
10827: PPUSH
10828: CALL_OW 302
10832: PUSH
10833: LD_EXP 17
10837: PPUSH
10838: CALL_OW 302
10842: AND
10843: PUSH
10844: LD_EXP 13
10848: PPUSH
10849: CALL_OW 302
10853: AND
10854: IFFALSE 10964
// begin Say ( Markov , DMar-Roc-9 ) ;
10856: LD_EXP 19
10860: PPUSH
10861: LD_STRING DMar-Roc-9
10863: PPUSH
10864: CALL_OW 88
// Say ( Markov , DMar-Roc-10 ) ;
10868: LD_EXP 19
10872: PPUSH
10873: LD_STRING DMar-Roc-10
10875: PPUSH
10876: CALL_OW 88
// Say ( Kaia , DK-Roc-11 ) ;
10880: LD_EXP 17
10884: PPUSH
10885: LD_STRING DK-Roc-11
10887: PPUSH
10888: CALL_OW 88
// Say ( Markov , DMar-Roc-12 ) ;
10892: LD_EXP 19
10896: PPUSH
10897: LD_STRING DMar-Roc-12
10899: PPUSH
10900: CALL_OW 88
// Say ( Kaia , DK-Roc-13 ) ;
10904: LD_EXP 17
10908: PPUSH
10909: LD_STRING DK-Roc-13
10911: PPUSH
10912: CALL_OW 88
// Say ( Givi , DG-Roc-14 ) ;
10916: LD_EXP 13
10920: PPUSH
10921: LD_STRING DG-Roc-14
10923: PPUSH
10924: CALL_OW 88
// Say ( Markov , DMar-Roc-15 ) ;
10928: LD_EXP 19
10932: PPUSH
10933: LD_STRING DMar-Roc-15
10935: PPUSH
10936: CALL_OW 88
// Say ( Markov , DMar-Roc-16 ) ;
10940: LD_EXP 19
10944: PPUSH
10945: LD_STRING DMar-Roc-16
10947: PPUSH
10948: CALL_OW 88
// Say ( Kaia , DK-Roc-17 ) ;
10952: LD_EXP 17
10956: PPUSH
10957: LD_STRING DK-Roc-17
10959: PPUSH
10960: CALL_OW 88
// end ; DialogueOff ;
10964: CALL_OW 7
// end ;
10968: END
// every 0 0$3 trigger GetLives ( usCommander ) < 1000 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] ] ) < 6 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) < 2 do var i , hurts , sci ;
10969: LD_EXP 27
10973: PPUSH
10974: CALL_OW 256
10978: PUSH
10979: LD_INT 1000
10981: LESS
10982: PUSH
10983: LD_INT 22
10985: PUSH
10986: LD_INT 1
10988: PUSH
10989: EMPTY
10990: LIST
10991: LIST
10992: PUSH
10993: LD_INT 21
10995: PUSH
10996: LD_INT 1
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: PUSH
11003: LD_INT 23
11005: PUSH
11006: LD_INT 1
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: LIST
11017: PPUSH
11018: CALL_OW 69
11022: PUSH
11023: LD_INT 6
11025: LESS
11026: OR
11027: PUSH
11028: LD_INT 22
11030: PUSH
11031: LD_INT 1
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: PUSH
11038: LD_INT 21
11040: PUSH
11041: LD_INT 1
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PUSH
11048: LD_INT 25
11050: PUSH
11051: LD_INT 1
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: LIST
11062: PPUSH
11063: CALL_OW 69
11067: PUSH
11068: LD_INT 2
11070: LESS
11071: OR
11072: IFFALSE 12281
11074: GO 11076
11076: DISABLE
11077: LD_INT 0
11079: PPUSH
11080: PPUSH
11081: PPUSH
// begin usAttacksAllowed := false ;
11082: LD_ADDR_EXP 6
11086: PUSH
11087: LD_INT 0
11089: ST_TO_ADDR
// usSurrender := true ;
11090: LD_ADDR_EXP 7
11094: PUSH
11095: LD_INT 1
11097: ST_TO_ADDR
// SetAttitude ( 1 , 2 , att_friend , true ) ;
11098: LD_INT 1
11100: PPUSH
11101: LD_INT 2
11103: PPUSH
11104: LD_INT 1
11106: PPUSH
11107: LD_INT 1
11109: PPUSH
11110: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_hastask ] ] ) do
11114: LD_ADDR_VAR 0 1
11118: PUSH
11119: LD_INT 22
11121: PUSH
11122: LD_INT 2
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PUSH
11129: LD_INT 21
11131: PUSH
11132: LD_INT 1
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PUSH
11139: LD_INT 60
11141: PUSH
11142: EMPTY
11143: LIST
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: LIST
11149: PPUSH
11150: CALL_OW 69
11154: PUSH
11155: FOR_IN
11156: IFFALSE 11169
// ComStop ( i ) ;
11158: LD_VAR 0 1
11162: PPUSH
11163: CALL_OW 141
11167: GO 11155
11169: POP
11170: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_ok ] ] , [ f_type , unit_human ] ] ) do
11171: LD_ADDR_VAR 0 1
11175: PUSH
11176: LD_INT 22
11178: PUSH
11179: LD_INT 2
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: PUSH
11186: LD_INT 3
11188: PUSH
11189: LD_INT 50
11191: PUSH
11192: EMPTY
11193: LIST
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: PUSH
11199: LD_INT 21
11201: PUSH
11202: LD_INT 1
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: LIST
11213: PPUSH
11214: CALL_OW 69
11218: PUSH
11219: FOR_IN
11220: IFFALSE 11236
// SetLives ( i , 251 ) ;
11222: LD_VAR 0 1
11226: PPUSH
11227: LD_INT 251
11229: PPUSH
11230: CALL_OW 234
11234: GO 11219
11236: POP
11237: POP
// InGameOn ;
11238: CALL_OW 8
// ComExit ( usCommander ) ;
11242: LD_EXP 27
11246: PPUSH
11247: CALL 52209 0 1
// AddComMoveXY ( usCommander , 81 , 143 ) ;
11251: LD_EXP 27
11255: PPUSH
11256: LD_INT 81
11258: PPUSH
11259: LD_INT 143
11261: PPUSH
11262: CALL_OW 171
// AddComTurnXY ( usCommander , 81 , 139 ) ;
11266: LD_EXP 27
11270: PPUSH
11271: LD_INT 81
11273: PPUSH
11274: LD_INT 139
11276: PPUSH
11277: CALL_OW 178
// PlaceSeeing ( 81 , 144 , 2 , - 10 ) ;
11281: LD_INT 81
11283: PPUSH
11284: LD_INT 144
11286: PPUSH
11287: LD_INT 2
11289: PPUSH
11290: LD_INT 10
11292: NEG
11293: PPUSH
11294: CALL_OW 330
// CenterNowOnUnits ( usCommander ) ;
11298: LD_EXP 27
11302: PPUSH
11303: CALL_OW 87
// wait ( 0 0$2 ) ;
11307: LD_INT 70
11309: PPUSH
11310: CALL_OW 67
// Say ( usCommander , DCa-Surrender-1 ) ;
11314: LD_EXP 27
11318: PPUSH
11319: LD_STRING DCa-Surrender-1
11321: PPUSH
11322: CALL_OW 88
// Say ( Heike , DH-Surrender-2 ) ;
11326: LD_EXP 12
11330: PPUSH
11331: LD_STRING DH-Surrender-2
11333: PPUSH
11334: CALL_OW 88
// if GetType ( IsInUnit ( Heike ) ) = unit_building then
11338: LD_EXP 12
11342: PPUSH
11343: CALL_OW 310
11347: PPUSH
11348: CALL_OW 247
11352: PUSH
11353: LD_INT 3
11355: EQUAL
11356: IFFALSE 11374
// begin ComExit ( Heike ) ;
11358: LD_EXP 12
11362: PPUSH
11363: CALL 52209 0 1
// wait ( 3 ) ;
11367: LD_INT 3
11369: PPUSH
11370: CALL_OW 67
// end ; ComMoveXY ( Heike , 82 , 133 ) ;
11374: LD_EXP 12
11378: PPUSH
11379: LD_INT 82
11381: PPUSH
11382: LD_INT 133
11384: PPUSH
11385: CALL_OW 111
// AddComTurnUnit ( Heike , usCommander ) ;
11389: LD_EXP 12
11393: PPUSH
11394: LD_EXP 27
11398: PPUSH
11399: CALL_OW 179
// wait ( 0 0$3 ) ;
11403: LD_INT 105
11405: PPUSH
11406: CALL_OW 67
// Say ( Heike , DH-Surrender-3 ) ;
11410: LD_EXP 12
11414: PPUSH
11415: LD_STRING DH-Surrender-3
11417: PPUSH
11418: CALL_OW 88
// Say ( Heike , DH-Surrender-4 ) ;
11422: LD_EXP 12
11426: PPUSH
11427: LD_STRING DH-Surrender-4
11429: PPUSH
11430: CALL_OW 88
// RemoveSeeing ( 81 , 144 , 2 ) ;
11434: LD_INT 81
11436: PPUSH
11437: LD_INT 144
11439: PPUSH
11440: LD_INT 2
11442: PPUSH
11443: CALL_OW 331
// ChangeSideFog ( 1 , 2 ) ;
11447: LD_INT 1
11449: PPUSH
11450: LD_INT 2
11452: PPUSH
11453: CALL_OW 343
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_inside ] ] ) do
11457: LD_ADDR_VAR 0 1
11461: PUSH
11462: LD_INT 22
11464: PUSH
11465: LD_INT 1
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PUSH
11472: LD_INT 23
11474: PUSH
11475: LD_INT 1
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PUSH
11482: LD_INT 54
11484: PUSH
11485: EMPTY
11486: LIST
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: LIST
11492: PPUSH
11493: CALL_OW 69
11497: PUSH
11498: FOR_IN
11499: IFFALSE 11512
// ComExit ( i ) ;
11501: LD_VAR 0 1
11505: PPUSH
11506: CALL 52209 0 1
11510: GO 11498
11512: POP
11513: POP
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
11514: LD_ADDR_VAR 0 3
11518: PUSH
11519: LD_INT 22
11521: PUSH
11522: LD_INT 1
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PUSH
11529: LD_INT 25
11531: PUSH
11532: LD_INT 4
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PPUSH
11543: CALL_OW 69
11547: ST_TO_ADDR
// hurts := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
11548: LD_ADDR_VAR 0 2
11552: PUSH
11553: LD_INT 22
11555: PUSH
11556: LD_INT 1
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: PUSH
11563: LD_INT 3
11565: PUSH
11566: LD_INT 50
11568: PUSH
11569: EMPTY
11570: LIST
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: PPUSH
11580: CALL_OW 69
11584: ST_TO_ADDR
// if sci and hurts then
11585: LD_VAR 0 3
11589: PUSH
11590: LD_VAR 0 2
11594: AND
11595: IFFALSE 11657
// begin for i := 1 to hurts do
11597: LD_ADDR_VAR 0 1
11601: PUSH
11602: DOUBLE
11603: LD_INT 1
11605: DEC
11606: ST_TO_ADDR
11607: LD_VAR 0 2
11611: PUSH
11612: FOR_TO
11613: IFFALSE 11655
// if i <= sci then
11615: LD_VAR 0 1
11619: PUSH
11620: LD_VAR 0 3
11624: LESSEQUAL
11625: IFFALSE 11653
// AddComHeal ( sci [ i ] , hurts [ i ] ) ;
11627: LD_VAR 0 3
11631: PUSH
11632: LD_VAR 0 1
11636: ARRAY
11637: PPUSH
11638: LD_VAR 0 2
11642: PUSH
11643: LD_VAR 0 1
11647: ARRAY
11648: PPUSH
11649: CALL_OW 188
11653: GO 11612
11655: POP
11656: POP
// end ; if IsOk ( Givi ) then
11657: LD_EXP 13
11661: PPUSH
11662: CALL_OW 302
11666: IFFALSE 11682
// Say ( Givi , DG-Surrender-5 ) else
11668: LD_EXP 13
11672: PPUSH
11673: LD_STRING DG-Surrender-5
11675: PPUSH
11676: CALL_OW 88
11680: GO 11694
// Say ( Heike , DH-Surrender-a-5 ) ;
11682: LD_EXP 12
11686: PPUSH
11687: LD_STRING DH-Surrender-a-5
11689: PPUSH
11690: CALL_OW 88
// Say ( usCommander , DCa-Surrender-6 ) ;
11694: LD_EXP 27
11698: PPUSH
11699: LD_STRING DCa-Surrender-6
11701: PPUSH
11702: CALL_OW 88
// Say ( usCommander , DCa-Surrender-7 ) ;
11706: LD_EXP 27
11710: PPUSH
11711: LD_STRING DCa-Surrender-7
11713: PPUSH
11714: CALL_OW 88
// if IsOk ( Givi ) then
11718: LD_EXP 13
11722: PPUSH
11723: CALL_OW 302
11727: IFFALSE 11743
// Say ( Givi , DG-Surrender-8 ) else
11729: LD_EXP 13
11733: PPUSH
11734: LD_STRING DG-Surrender-8
11736: PPUSH
11737: CALL_OW 88
11741: GO 11755
// Say ( Heike , DH-Surrender-a-8 ) ;
11743: LD_EXP 12
11747: PPUSH
11748: LD_STRING DH-Surrender-a-8
11750: PPUSH
11751: CALL_OW 88
// Say ( usCommander , DCa-Surrender-9 ) ;
11755: LD_EXP 27
11759: PPUSH
11760: LD_STRING DCa-Surrender-9
11762: PPUSH
11763: CALL_OW 88
// Say ( Heike , DH-Surrender-10 ) ;
11767: LD_EXP 12
11771: PPUSH
11772: LD_STRING DH-Surrender-10
11774: PPUSH
11775: CALL_OW 88
// Say ( usCommander , DCa-Surrender-11 ) ;
11779: LD_EXP 27
11783: PPUSH
11784: LD_STRING DCa-Surrender-11
11786: PPUSH
11787: CALL_OW 88
// Say ( Heike , DH-Surrender-12 ) ;
11791: LD_EXP 12
11795: PPUSH
11796: LD_STRING DH-Surrender-12
11798: PPUSH
11799: CALL_OW 88
// Say ( usCommander , DCa-Surrender-13 ) ;
11803: LD_EXP 27
11807: PPUSH
11808: LD_STRING DCa-Surrender-13
11810: PPUSH
11811: CALL_OW 88
// Say ( usCommander , DCa-Surrender-14 ) ;
11815: LD_EXP 27
11819: PPUSH
11820: LD_STRING DCa-Surrender-14
11822: PPUSH
11823: CALL_OW 88
// Say ( usCommander , DCa-Surrender-15 ) ;
11827: LD_EXP 27
11831: PPUSH
11832: LD_STRING DCa-Surrender-15
11834: PPUSH
11835: CALL_OW 88
// Say ( usCommander , DCa-Surrender-16 ) ;
11839: LD_EXP 27
11843: PPUSH
11844: LD_STRING DCa-Surrender-16
11846: PPUSH
11847: CALL_OW 88
// Say ( Kaia , DK-Surrender-17 ) ;
11851: LD_EXP 17
11855: PPUSH
11856: LD_STRING DK-Surrender-17
11858: PPUSH
11859: CALL_OW 88
// Say ( Olaf , DO-Surrender-18 ) ;
11863: LD_EXP 21
11867: PPUSH
11868: LD_STRING DO-Surrender-18
11870: PPUSH
11871: CALL_OW 88
// Say ( Olaf , DO-Surrender-19 ) ;
11875: LD_EXP 21
11879: PPUSH
11880: LD_STRING DO-Surrender-19
11882: PPUSH
11883: CALL_OW 88
// Say ( Kurt , DKs-Surrender-20 ) ;
11887: LD_EXP 22
11891: PPUSH
11892: LD_STRING DKs-Surrender-20
11894: PPUSH
11895: CALL_OW 88
// Say ( Kurt , DKs-Surrender-21 ) ;
11899: LD_EXP 22
11903: PPUSH
11904: LD_STRING DKs-Surrender-21
11906: PPUSH
11907: CALL_OW 88
// Say ( Markov , DMar-Surrender-22 ) ;
11911: LD_EXP 19
11915: PPUSH
11916: LD_STRING DMar-Surrender-22
11918: PPUSH
11919: CALL_OW 88
// Say ( Markov , DMar-Surrender-23 ) ;
11923: LD_EXP 19
11927: PPUSH
11928: LD_STRING DMar-Surrender-23
11930: PPUSH
11931: CALL_OW 88
// Say ( Sophia , DS-Surrender-24 ) ;
11935: LD_EXP 18
11939: PPUSH
11940: LD_STRING DS-Surrender-24
11942: PPUSH
11943: CALL_OW 88
// Say ( Aviradze , DA-Surrender-25 ) ;
11947: LD_EXP 23
11951: PPUSH
11952: LD_STRING DA-Surrender-25
11954: PPUSH
11955: CALL_OW 88
// Say ( Ibrahim , DI-Surrender-26 ) ;
11959: LD_EXP 15
11963: PPUSH
11964: LD_STRING DI-Surrender-26
11966: PPUSH
11967: CALL_OW 88
// Say ( Kamil , DKam-Surrender-27 ) ;
11971: LD_EXP 16
11975: PPUSH
11976: LD_STRING DKam-Surrender-27
11978: PPUSH
11979: CALL_OW 88
// if IsOk ( Givi ) then
11983: LD_EXP 13
11987: PPUSH
11988: CALL_OW 302
11992: IFFALSE 12032
// begin Say ( Givi , DG-Surrender-28 ) ;
11994: LD_EXP 13
11998: PPUSH
11999: LD_STRING DG-Surrender-28
12001: PPUSH
12002: CALL_OW 88
// Say ( Givi , DG-Surrender-29 ) ;
12006: LD_EXP 13
12010: PPUSH
12011: LD_STRING DG-Surrender-29
12013: PPUSH
12014: CALL_OW 88
// Say ( Givi , DG-Surrender-30 ) ;
12018: LD_EXP 13
12022: PPUSH
12023: LD_STRING DG-Surrender-30
12025: PPUSH
12026: CALL_OW 88
// end else
12030: GO 12068
// begin Say ( Heike , DH-Surrender-a-28 ) ;
12032: LD_EXP 12
12036: PPUSH
12037: LD_STRING DH-Surrender-a-28
12039: PPUSH
12040: CALL_OW 88
// Say ( Heike , DH-Surrender-a-29 ) ;
12044: LD_EXP 12
12048: PPUSH
12049: LD_STRING DH-Surrender-a-29
12051: PPUSH
12052: CALL_OW 88
// Say ( Heike , DH-Surrender-a-30 ) ;
12056: LD_EXP 12
12060: PPUSH
12061: LD_STRING DH-Surrender-a-30
12063: PPUSH
12064: CALL_OW 88
// end ; PrepareRussianFirstWaveAttack ;
12068: CALL 13910 0 0
// AgressiveMove ( FilterAllUnits ( [ f_side , 3 ] ) , [ [ 176 , 123 ] ] ) ;
12072: LD_INT 22
12074: PUSH
12075: LD_INT 3
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PPUSH
12082: CALL_OW 69
12086: PPUSH
12087: LD_INT 176
12089: PUSH
12090: LD_INT 123
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: PUSH
12097: EMPTY
12098: LIST
12099: PPUSH
12100: CALL 54417 0 2
// if not IsEnvironment ( 190 , 150 ) then
12104: LD_INT 190
12106: PPUSH
12107: LD_INT 150
12109: PPUSH
12110: CALL_OW 351
12114: NOT
12115: IFFALSE 12134
// PlaceSeeing ( 190 , 150 , 2 , - 8 ) ;
12117: LD_INT 190
12119: PPUSH
12120: LD_INT 150
12122: PPUSH
12123: LD_INT 2
12125: PPUSH
12126: LD_INT 8
12128: NEG
12129: PPUSH
12130: CALL_OW 330
// CenterOnXY ( 193 , 150 ) ;
12134: LD_INT 193
12136: PPUSH
12137: LD_INT 150
12139: PPUSH
12140: CALL_OW 84
// if IsOk ( Markov ) then
12144: LD_EXP 19
12148: PPUSH
12149: CALL_OW 302
12153: IFFALSE 12169
// Say ( Markov , DMar-Surrender-31 ) else
12155: LD_EXP 19
12159: PPUSH
12160: LD_STRING DMar-Surrender-31
12162: PPUSH
12163: CALL_OW 88
12167: GO 12226
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Surrender-a-31 ) then
12169: LD_EXP 24
12173: PPUSH
12174: LD_INT 26
12176: PUSH
12177: LD_INT 1
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: PPUSH
12184: CALL_OW 72
12188: PPUSH
12189: LD_STRING DArm-Surrender-a-31
12191: PPUSH
12192: CALL 162 0 2
12196: NOT
12197: IFFALSE 12226
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Surrender-a-31 ) ;
12199: LD_EXP 24
12203: PPUSH
12204: LD_INT 26
12206: PUSH
12207: LD_INT 2
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PPUSH
12214: CALL_OW 72
12218: PPUSH
12219: LD_STRING DArf-Surrender-a-31
12221: PPUSH
12222: CALL 162 0 2
// Say ( Heike , DH-Surrender-32 ) ;
12226: LD_EXP 12
12230: PPUSH
12231: LD_STRING DH-Surrender-32
12233: PPUSH
12234: CALL_OW 88
// InGameOff ;
12238: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
12242: LD_STRING M2
12244: PPUSH
12245: CALL_OW 337
// wait ( 0 0$20 ) ;
12249: LD_INT 700
12251: PPUSH
12252: CALL_OW 67
// PrepareRussianLastWaveAttack ;
12256: CALL 14272 0 0
// russianAttack := true ;
12260: LD_ADDR_EXP 8
12264: PUSH
12265: LD_INT 1
12267: ST_TO_ADDR
// RemoveSeeing ( 190 , 150 , 2 ) ;
12268: LD_INT 190
12270: PPUSH
12271: LD_INT 150
12273: PPUSH
12274: LD_INT 2
12276: PPUSH
12277: CALL_OW 331
// end ;
12281: PPOPN 3
12283: END
// every 0 0$3 trigger seeHeavyGun and not InBattle ( 2 ) and IsOk ( Heike ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) and ( IsOk ( Markov ) or UnitFilter ( heikeSecondSquad , [ f_ok ] ) ) do
12284: LD_EXP 11
12288: PUSH
12289: LD_INT 2
12291: PPUSH
12292: CALL_OW 463
12296: NOT
12297: AND
12298: PUSH
12299: LD_EXP 12
12303: PPUSH
12304: CALL_OW 302
12308: AND
12309: PUSH
12310: LD_INT 22
12312: PUSH
12313: LD_INT 2
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: PUSH
12320: LD_INT 30
12322: PUSH
12323: LD_INT 3
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PPUSH
12334: CALL_OW 69
12338: AND
12339: PUSH
12340: LD_EXP 19
12344: PPUSH
12345: CALL_OW 302
12349: PUSH
12350: LD_EXP 24
12354: PPUSH
12355: LD_INT 50
12357: PUSH
12358: EMPTY
12359: LIST
12360: PPUSH
12361: CALL_OW 72
12365: OR
12366: AND
12367: IFFALSE 12595
12369: GO 12371
12371: DISABLE
// begin DialogueOn ;
12372: CALL_OW 6
// Say ( Heike , DH-Heavy-1 ) ;
12376: LD_EXP 12
12380: PPUSH
12381: LD_STRING DH-Heavy-1
12383: PPUSH
12384: CALL_OW 88
// if IsOk ( Markov ) then
12388: LD_EXP 19
12392: PPUSH
12393: CALL_OW 302
12397: IFFALSE 12522
// begin Say ( Markov , DMar-Heavy-2 ) ;
12399: LD_EXP 19
12403: PPUSH
12404: LD_STRING DMar-Heavy-2
12406: PPUSH
12407: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
12411: LD_INT 22
12413: PUSH
12414: LD_INT 2
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: PUSH
12421: LD_INT 30
12423: PUSH
12424: LD_INT 3
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: PUSH
12431: EMPTY
12432: LIST
12433: LIST
12434: PPUSH
12435: CALL_OW 69
12439: PUSH
12440: LD_INT 1
12442: ARRAY
12443: PPUSH
12444: CALL_OW 87
// Say ( Markov , DMar-Heavy-3 ) ;
12448: LD_EXP 19
12452: PPUSH
12453: LD_STRING DMar-Heavy-3
12455: PPUSH
12456: CALL_OW 88
// Say ( Markov , DMar-Heavy-4 ) ;
12460: LD_EXP 19
12464: PPUSH
12465: LD_STRING DMar-Heavy-4
12467: PPUSH
12468: CALL_OW 88
// Say ( Markov , DMar-Heavy-5 ) ;
12472: LD_EXP 19
12476: PPUSH
12477: LD_STRING DMar-Heavy-5
12479: PPUSH
12480: CALL_OW 88
// Say ( Markov , DMar-Heavy-6 ) ;
12484: LD_EXP 19
12488: PPUSH
12489: LD_STRING DMar-Heavy-6
12491: PPUSH
12492: CALL_OW 88
// Say ( Heike , DH-Heavy-7 ) ;
12496: LD_EXP 12
12500: PPUSH
12501: LD_STRING DH-Heavy-7
12503: PPUSH
12504: CALL_OW 88
// Say ( Heike , DH-Heavy-8 ) ;
12508: LD_EXP 12
12512: PPUSH
12513: LD_STRING DH-Heavy-8
12515: PPUSH
12516: CALL_OW 88
// end else
12520: GO 12579
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Heavy-a-2 ) then
12522: LD_EXP 24
12526: PPUSH
12527: LD_INT 26
12529: PUSH
12530: LD_INT 1
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: PPUSH
12537: CALL_OW 72
12541: PPUSH
12542: LD_STRING DArm-Heavy-a-2
12544: PPUSH
12545: CALL 162 0 2
12549: NOT
12550: IFFALSE 12579
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Heavy-a-2 ) ;
12552: LD_EXP 24
12556: PPUSH
12557: LD_INT 26
12559: PUSH
12560: LD_INT 2
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: PPUSH
12567: CALL_OW 72
12571: PPUSH
12572: LD_STRING DArf-Heavy-a-2
12574: PPUSH
12575: CALL 162 0 2
// end ; Say ( Heike , DH-Heavy-9 ) ;
12579: LD_EXP 12
12583: PPUSH
12584: LD_STRING DH-Heavy-9
12586: PPUSH
12587: CALL_OW 88
// DialogueOff ;
12591: CALL_OW 7
// end ;
12595: END
// every 0 0$2 trigger UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) and IsOk ( Heike ) do
12596: LD_EXP 31
12600: PPUSH
12601: LD_INT 101
12603: PUSH
12604: LD_INT 2
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: PPUSH
12611: CALL_OW 72
12615: PUSH
12616: LD_EXP 12
12620: PPUSH
12621: CALL_OW 302
12625: AND
12626: IFFALSE 12769
12628: GO 12630
12630: DISABLE
// begin DialogueOn ;
12631: CALL_OW 6
// CenterNowOnUnits ( UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) ) ;
12635: LD_EXP 31
12639: PPUSH
12640: LD_INT 101
12642: PUSH
12643: LD_INT 2
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PPUSH
12650: CALL_OW 72
12654: PPUSH
12655: CALL_OW 87
// Say ( Heike , DH-Flank-1 ) ;
12659: LD_EXP 12
12663: PPUSH
12664: LD_STRING DH-Flank-1
12666: PPUSH
12667: CALL_OW 88
// if IsOk ( Mike ) then
12671: LD_EXP 14
12675: PPUSH
12676: CALL_OW 302
12680: IFFALSE 12696
// Say ( Mike , DM-Flank-2 ) else
12682: LD_EXP 14
12686: PPUSH
12687: LD_STRING DM-Flank-2
12689: PPUSH
12690: CALL_OW 88
12694: GO 12753
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Flank-a-2 ) then
12696: LD_EXP 24
12700: PPUSH
12701: LD_INT 26
12703: PUSH
12704: LD_INT 1
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: PPUSH
12711: CALL_OW 72
12715: PPUSH
12716: LD_STRING DArm-Flank-a-2
12718: PPUSH
12719: CALL 162 0 2
12723: NOT
12724: IFFALSE 12753
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArm-Flank-a-2 ) ;
12726: LD_EXP 24
12730: PPUSH
12731: LD_INT 26
12733: PUSH
12734: LD_INT 2
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: PPUSH
12741: CALL_OW 72
12745: PPUSH
12746: LD_STRING DArm-Flank-a-2
12748: PPUSH
12749: CALL 162 0 2
// Say ( Heike , DH-Flank-3 ) ;
12753: LD_EXP 12
12757: PPUSH
12758: LD_STRING DH-Flank-3
12760: PPUSH
12761: CALL_OW 88
// DialogueOff ;
12765: CALL_OW 7
// end ;
12769: END
// every 0 0$3 trigger seeRemoteVehicle do
12770: LD_EXP 10
12774: IFFALSE 12998
12776: GO 12778
12778: DISABLE
// begin DialogueOn ;
12779: CALL_OW 6
// Say ( Heike , DH-USRC-1 ) ;
12783: LD_EXP 12
12787: PPUSH
12788: LD_STRING DH-USRC-1
12790: PPUSH
12791: CALL_OW 88
// if IsOk ( Markov ) then
12795: LD_EXP 19
12799: PPUSH
12800: CALL_OW 302
12804: IFFALSE 12820
// Say ( Markov , DMar-USRC-2 ) else
12806: LD_EXP 19
12810: PPUSH
12811: LD_STRING DMar-USRC-2
12813: PPUSH
12814: CALL_OW 88
12818: GO 12877
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-USRC-a-2 ) then
12820: LD_EXP 24
12824: PPUSH
12825: LD_INT 26
12827: PUSH
12828: LD_INT 1
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: PPUSH
12835: CALL_OW 72
12839: PPUSH
12840: LD_STRING DArm-USRC-a-2
12842: PPUSH
12843: CALL 162 0 2
12847: NOT
12848: IFFALSE 12877
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-USRC-a-2 ) ;
12850: LD_EXP 24
12854: PPUSH
12855: LD_INT 26
12857: PUSH
12858: LD_INT 2
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: PPUSH
12865: CALL_OW 72
12869: PPUSH
12870: LD_STRING DArf-USRC-a-2
12872: PPUSH
12873: CALL 162 0 2
// DialogueOff ;
12877: CALL_OW 7
// wait ( 0 0$10 ) ;
12881: LD_INT 350
12883: PPUSH
12884: CALL_OW 67
// Say ( Heike , DH-USRC-3 ) ;
12888: LD_EXP 12
12892: PPUSH
12893: LD_STRING DH-USRC-3
12895: PPUSH
12896: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
12900: LD_INT 35
12902: PPUSH
12903: CALL_OW 67
// until See ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
12907: LD_INT 2
12909: PPUSH
12910: LD_INT 22
12912: PUSH
12913: LD_INT 1
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PUSH
12920: LD_INT 30
12922: PUSH
12923: LD_INT 36
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: EMPTY
12931: LIST
12932: LIST
12933: PPUSH
12934: CALL_OW 69
12938: PUSH
12939: LD_INT 1
12941: ARRAY
12942: PPUSH
12943: CALL_OW 292
12947: IFFALSE 12900
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
12949: LD_INT 22
12951: PUSH
12952: LD_INT 1
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PUSH
12959: LD_INT 30
12961: PUSH
12962: LD_INT 36
12964: PUSH
12965: EMPTY
12966: LIST
12967: LIST
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: PPUSH
12973: CALL_OW 69
12977: PUSH
12978: LD_INT 1
12980: ARRAY
12981: PPUSH
12982: CALL_OW 87
// Say ( Heike , DH-USRCFound-1 ) ;
12986: LD_EXP 12
12990: PPUSH
12991: LD_STRING DH-USRCFound-1
12993: PPUSH
12994: CALL_OW 88
// end ;
12998: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
12999: LD_EXP 17
13003: PPUSH
13004: CALL_OW 256
13008: PUSH
13009: LD_INT 3
13011: LESS
13012: IFFALSE 13049
13014: GO 13016
13016: DISABLE
// begin DialogueOn ;
13017: CALL_OW 6
// ForceSay ( Kaia , DK-Dead-1 ) ;
13021: LD_EXP 17
13025: PPUSH
13026: LD_STRING DK-Dead-1
13028: PPUSH
13029: CALL_OW 91
// ForceSay ( Kaia , DK-Dead-2 ) ;
13033: LD_EXP 17
13037: PPUSH
13038: LD_STRING DK-Dead-2
13040: PPUSH
13041: CALL_OW 91
// DialogueOff ;
13045: CALL_OW 7
// end ;
13049: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_bweapon , ar_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] ] ] ) do
13050: LD_INT 22
13052: PUSH
13053: LD_INT 2
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PUSH
13060: LD_INT 2
13062: PUSH
13063: LD_INT 35
13065: PUSH
13066: LD_INT 28
13068: PUSH
13069: EMPTY
13070: LIST
13071: LIST
13072: PUSH
13073: LD_INT 34
13075: PUSH
13076: LD_INT 28
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: LIST
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PPUSH
13092: CALL_OW 69
13096: IFFALSE 13109
13098: GO 13100
13100: DISABLE
// hasRockets := true ;
13101: LD_ADDR_EXP 9
13105: PUSH
13106: LD_INT 1
13108: ST_TO_ADDR
13109: END
// every 0 0$1 trigger russianAttack and not FilterAllUnits ( [ f_side , 3 ] ) do
13110: LD_EXP 8
13114: PUSH
13115: LD_INT 22
13117: PUSH
13118: LD_INT 3
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: PPUSH
13125: CALL_OW 69
13129: NOT
13130: AND
13131: IFFALSE 13741
13133: GO 13135
13135: DISABLE
// begin DialogueOn ;
13136: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
13140: LD_EXP 12
13144: PPUSH
13145: CALL_OW 87
// Say ( Heike , DH-End-1 ) ;
13149: LD_EXP 12
13153: PPUSH
13154: LD_STRING DH-End-1
13156: PPUSH
13157: CALL_OW 88
// SayRadio ( Shariff , DShar-End-2 ) ;
13161: LD_EXP 20
13165: PPUSH
13166: LD_STRING DShar-End-2
13168: PPUSH
13169: CALL_OW 94
// Say ( Kaia , DK-End-3 ) ;
13173: LD_EXP 17
13177: PPUSH
13178: LD_STRING DK-End-3
13180: PPUSH
13181: CALL_OW 88
// Say ( Heike , DH-End-4 ) ;
13185: LD_EXP 12
13189: PPUSH
13190: LD_STRING DH-End-4
13192: PPUSH
13193: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
13197: LD_EXP 20
13201: PPUSH
13202: LD_STRING DShar-End-5
13204: PPUSH
13205: CALL_OW 94
// if IsOk ( Markov ) then
13209: LD_EXP 19
13213: PPUSH
13214: CALL_OW 302
13218: IFFALSE 13232
// Say ( Kaia , DK-End-6 ) ;
13220: LD_EXP 17
13224: PPUSH
13225: LD_STRING DK-End-6
13227: PPUSH
13228: CALL_OW 88
// Say ( Kaia , DK-End-7 ) ;
13232: LD_EXP 17
13236: PPUSH
13237: LD_STRING DK-End-7
13239: PPUSH
13240: CALL_OW 88
// if IsOk ( Kaia ) then
13244: LD_EXP 17
13248: PPUSH
13249: CALL_OW 302
13253: IFFALSE 13291
// begin Say ( Givi , DG-End-8 ) ;
13255: LD_EXP 13
13259: PPUSH
13260: LD_STRING DG-End-8
13262: PPUSH
13263: CALL_OW 88
// Say ( Givi , DG-End-9 ) ;
13267: LD_EXP 13
13271: PPUSH
13272: LD_STRING DG-End-9
13274: PPUSH
13275: CALL_OW 88
// Say ( Heike , DH-End-10 ) ;
13279: LD_EXP 12
13283: PPUSH
13284: LD_STRING DH-End-10
13286: PPUSH
13287: CALL_OW 88
// end ; Say ( Heike , DH-End-11 ) ;
13291: LD_EXP 12
13295: PPUSH
13296: LD_STRING DH-End-11
13298: PPUSH
13299: CALL_OW 88
// if GetTech ( tech_MatDet , 2 ) = state_researched then
13303: LD_INT 7
13305: PPUSH
13306: LD_INT 2
13308: PPUSH
13309: CALL_OW 321
13313: PUSH
13314: LD_INT 2
13316: EQUAL
13317: IFFALSE 13331
// AddMedal ( med1 , 1 ) else
13319: LD_STRING med1
13321: PPUSH
13322: LD_INT 1
13324: PPUSH
13325: CALL_OW 101
13329: GO 13342
// AddMedal ( med1 , - 1 ) ;
13331: LD_STRING med1
13333: PPUSH
13334: LD_INT 1
13336: NEG
13337: PPUSH
13338: CALL_OW 101
// if hasRockets then
13342: LD_EXP 9
13346: IFFALSE 13360
// AddMedal ( med2 , 1 ) else
13348: LD_STRING med2
13350: PPUSH
13351: LD_INT 1
13353: PPUSH
13354: CALL_OW 101
13358: GO 13371
// AddMedal ( med2 , - 1 ) ;
13360: LD_STRING med2
13362: PPUSH
13363: LD_INT 1
13365: NEG
13366: PPUSH
13367: CALL_OW 101
// if tick < [ 50 50$00 , 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
13371: LD_OWVAR 1
13375: PUSH
13376: LD_INT 105000
13378: PUSH
13379: LD_INT 94500
13381: PUSH
13382: LD_INT 84000
13384: PUSH
13385: LD_INT 73500
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: PUSH
13394: LD_OWVAR 67
13398: ARRAY
13399: LESS
13400: IFFALSE 13414
// AddMedal ( med3 , 1 ) else
13402: LD_STRING med3
13404: PPUSH
13405: LD_INT 1
13407: PPUSH
13408: CALL_OW 101
13412: GO 13425
// AddMedal ( med3 , - 1 ) ;
13414: LD_STRING med3
13416: PPUSH
13417: LD_INT 1
13419: NEG
13420: PPUSH
13421: CALL_OW 101
// GiveMedals ( MAIN ) ;
13425: LD_STRING MAIN
13427: PPUSH
13428: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13432: LD_INT 22
13434: PUSH
13435: LD_INT 2
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: PUSH
13442: LD_INT 23
13444: PUSH
13445: LD_INT 2
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: PUSH
13452: LD_INT 21
13454: PUSH
13455: LD_INT 1
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: LIST
13466: PPUSH
13467: CALL_OW 69
13471: PPUSH
13472: CALL_OW 43
// SaveCharacters ( usCommander , 07_UsCommander ) ;
13476: LD_EXP 27
13480: PPUSH
13481: LD_STRING 07_UsCommander
13483: PPUSH
13484: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff usCommander , 07_Americans ) ;
13488: LD_INT 22
13490: PUSH
13491: LD_INT 1
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PUSH
13498: LD_INT 23
13500: PUSH
13501: LD_INT 1
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: PUSH
13508: LD_INT 21
13510: PUSH
13511: LD_INT 1
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: LIST
13522: PPUSH
13523: CALL_OW 69
13527: PUSH
13528: LD_EXP 27
13532: DIFF
13533: PPUSH
13534: LD_STRING 07_Americans
13536: PPUSH
13537: CALL_OW 38
// SaveCharacters ( Heike , 07_Heike ) ;
13541: LD_EXP 12
13545: PPUSH
13546: LD_STRING 07_Heike
13548: PPUSH
13549: CALL_OW 38
// if Aviradze then
13553: LD_EXP 23
13557: IFFALSE 13571
// SaveCharacters ( Aviradze , 07_Aviradze ) ;
13559: LD_EXP 23
13563: PPUSH
13564: LD_STRING 07_Aviradze
13566: PPUSH
13567: CALL_OW 38
// if Ibrahim then
13571: LD_EXP 15
13575: IFFALSE 13589
// SaveCharacters ( Ibrahim , 07_Ibrahim ) ;
13577: LD_EXP 15
13581: PPUSH
13582: LD_STRING 07_Ibrahim
13584: PPUSH
13585: CALL_OW 38
// if Kamil then
13589: LD_EXP 16
13593: IFFALSE 13607
// SaveCharacters ( Kamil , 07_Kamil ) ;
13595: LD_EXP 16
13599: PPUSH
13600: LD_STRING 07_Kamil
13602: PPUSH
13603: CALL_OW 38
// if Sophia then
13607: LD_EXP 18
13611: IFFALSE 13625
// SaveCharacters ( Sophia , 07_Sophia ) ;
13613: LD_EXP 18
13617: PPUSH
13618: LD_STRING 07_Sophia
13620: PPUSH
13621: CALL_OW 38
// if Kaia then
13625: LD_EXP 17
13629: IFFALSE 13643
// SaveCharacters ( Kaia , 07_Kaia ) ;
13631: LD_EXP 17
13635: PPUSH
13636: LD_STRING 07_Kaia
13638: PPUSH
13639: CALL_OW 38
// if Givi then
13643: LD_EXP 13
13647: IFFALSE 13661
// SaveCharacters ( Givi , 07_Givi ) ;
13649: LD_EXP 13
13653: PPUSH
13654: LD_STRING 07_Givi
13656: PPUSH
13657: CALL_OW 38
// if Mike then
13661: LD_EXP 14
13665: IFFALSE 13679
// SaveCharacters ( Mike , 07_Mike ) ;
13667: LD_EXP 14
13671: PPUSH
13672: LD_STRING 07_Mike
13674: PPUSH
13675: CALL_OW 38
// if Markov then
13679: LD_EXP 19
13683: IFFALSE 13697
// SaveCharacters ( Markov , 07_Markov ) ;
13685: LD_EXP 19
13689: PPUSH
13690: LD_STRING 07_Markov
13692: PPUSH
13693: CALL_OW 38
// if Kurt then
13697: LD_EXP 22
13701: IFFALSE 13715
// SaveCharacters ( Kurt , 07_Kurt ) ;
13703: LD_EXP 22
13707: PPUSH
13708: LD_STRING 07_Kurt
13710: PPUSH
13711: CALL_OW 38
// if heikeSecondSquad then
13715: LD_EXP 24
13719: IFFALSE 13733
// SaveCharacters ( heikeSecondSquad , 07_others ) ;
13721: LD_EXP 24
13725: PPUSH
13726: LD_STRING 07_others
13728: PPUSH
13729: CALL_OW 38
// YouWin ;
13733: CALL_OW 103
// DialogueOff ;
13737: CALL_OW 7
// end ; end_of_file
13741: END
// every 0 0$40 + 0 0$40 trigger GetResourceArea ( cratesRiverArea , mat_cans ) < [ 300 , 150 , 100 , 80 ] [ Difficulty ] do
13742: LD_INT 7
13744: PPUSH
13745: LD_INT 1
13747: PPUSH
13748: CALL_OW 287
13752: PUSH
13753: LD_INT 300
13755: PUSH
13756: LD_INT 150
13758: PUSH
13759: LD_INT 100
13761: PUSH
13762: LD_INT 80
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: PUSH
13771: LD_OWVAR 67
13775: ARRAY
13776: LESS
13777: IFFALSE 13804
13779: GO 13781
13781: DISABLE
// begin enable ;
13782: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesRiverArea , true ) ;
13783: LD_INT 1
13785: PPUSH
13786: LD_INT 5
13788: PPUSH
13789: CALL_OW 12
13793: PPUSH
13794: LD_INT 7
13796: PPUSH
13797: LD_INT 1
13799: PPUSH
13800: CALL_OW 55
// end ;
13804: END
// every 2 2$00 trigger GetResourceArea ( cratesForestArea , mat_cans ) < [ 300 , 250 , 200 , 180 ] [ Difficulty ] do
13805: LD_INT 8
13807: PPUSH
13808: LD_INT 1
13810: PPUSH
13811: CALL_OW 287
13815: PUSH
13816: LD_INT 300
13818: PUSH
13819: LD_INT 250
13821: PUSH
13822: LD_INT 200
13824: PUSH
13825: LD_INT 180
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: PUSH
13834: LD_OWVAR 67
13838: ARRAY
13839: LESS
13840: IFFALSE 13867
13842: GO 13844
13844: DISABLE
// begin enable ;
13845: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesForestArea , true ) ;
13846: LD_INT 1
13848: PPUSH
13849: LD_INT 5
13851: PPUSH
13852: CALL_OW 12
13856: PPUSH
13857: LD_INT 8
13859: PPUSH
13860: LD_INT 1
13862: PPUSH
13863: CALL_OW 55
// end ;
13867: END
// every 0 0$40 trigger tick < 4 4$10 do
13868: LD_OWVAR 1
13872: PUSH
13873: LD_INT 8750
13875: LESS
13876: IFFALSE 13909
13878: GO 13880
13880: DISABLE
// begin enable ;
13881: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 130 , 18 , 12 , true ) ;
13882: LD_INT 1
13884: PPUSH
13885: LD_INT 5
13887: PPUSH
13888: CALL_OW 12
13892: PPUSH
13893: LD_INT 130
13895: PPUSH
13896: LD_INT 18
13898: PPUSH
13899: LD_INT 12
13901: PPUSH
13902: LD_INT 1
13904: PPUSH
13905: CALL_OW 56
// end ; end_of_file
13909: END
// export function PrepareRussianFirstWaveAttack ; var i , tmp , un , veh ; begin
13910: LD_INT 0
13912: PPUSH
13913: PPUSH
13914: PPUSH
13915: PPUSH
13916: PPUSH
// uc_side := 3 ;
13917: LD_ADDR_OWVAR 20
13921: PUSH
13922: LD_INT 3
13924: ST_TO_ADDR
// uc_nation := 3 ;
13925: LD_ADDR_OWVAR 21
13929: PUSH
13930: LD_INT 3
13932: ST_TO_ADDR
// tmp := [ [ 184 , 144 , 5 ] , [ 191 , 147 , 5 ] , [ 202 , 151 , 4 ] , [ 210 , 152 , 4 ] ] ;
13933: LD_ADDR_VAR 0 3
13937: PUSH
13938: LD_INT 184
13940: PUSH
13941: LD_INT 144
13943: PUSH
13944: LD_INT 5
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: LIST
13951: PUSH
13952: LD_INT 191
13954: PUSH
13955: LD_INT 147
13957: PUSH
13958: LD_INT 5
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: LIST
13965: PUSH
13966: LD_INT 202
13968: PUSH
13969: LD_INT 151
13971: PUSH
13972: LD_INT 4
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: LIST
13979: PUSH
13980: LD_INT 210
13982: PUSH
13983: LD_INT 152
13985: PUSH
13986: LD_INT 4
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: LIST
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: ST_TO_ADDR
// for i := 1 to 4 do
14000: LD_ADDR_VAR 0 2
14004: PUSH
14005: DOUBLE
14006: LD_INT 1
14008: DEC
14009: ST_TO_ADDR
14010: LD_INT 4
14012: PUSH
14013: FOR_TO
14014: IFFALSE 14183
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_gun ] [ i mod 3 + 1 ] , 40 ) ;
14016: LD_INT 24
14018: PPUSH
14019: LD_INT 1
14021: PPUSH
14022: LD_INT 1
14024: PPUSH
14025: LD_INT 43
14027: PUSH
14028: LD_INT 44
14030: PUSH
14031: LD_INT 46
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: LIST
14038: PUSH
14039: LD_VAR 0 2
14043: PUSH
14044: LD_INT 3
14046: MOD
14047: PUSH
14048: LD_INT 1
14050: PLUS
14051: ARRAY
14052: PPUSH
14053: LD_INT 40
14055: PPUSH
14056: CALL 19948 0 5
// veh := CreateVehicle ;
14060: LD_ADDR_VAR 0 5
14064: PUSH
14065: CALL_OW 45
14069: ST_TO_ADDR
// SetDir ( veh , tmp [ i ] [ 3 ] ) ;
14070: LD_VAR 0 5
14074: PPUSH
14075: LD_VAR 0 3
14079: PUSH
14080: LD_VAR 0 2
14084: ARRAY
14085: PUSH
14086: LD_INT 3
14088: ARRAY
14089: PPUSH
14090: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
14094: LD_VAR 0 5
14098: PPUSH
14099: LD_VAR 0 3
14103: PUSH
14104: LD_VAR 0 2
14108: ARRAY
14109: PUSH
14110: LD_INT 1
14112: ARRAY
14113: PPUSH
14114: LD_VAR 0 3
14118: PUSH
14119: LD_VAR 0 2
14123: ARRAY
14124: PUSH
14125: LD_INT 2
14127: ARRAY
14128: PPUSH
14129: LD_INT 0
14131: PPUSH
14132: CALL_OW 48
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14136: LD_INT 0
14138: PPUSH
14139: LD_INT 6
14141: PUSH
14142: LD_INT 7
14144: PUSH
14145: LD_INT 8
14147: PUSH
14148: LD_INT 8
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: PUSH
14157: LD_OWVAR 67
14161: ARRAY
14162: PPUSH
14163: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
14167: CALL_OW 44
14171: PPUSH
14172: LD_VAR 0 5
14176: PPUSH
14177: CALL_OW 52
// end ;
14181: GO 14013
14183: POP
14184: POP
// for i := 1 to 4 do
14185: LD_ADDR_VAR 0 2
14189: PUSH
14190: DOUBLE
14191: LD_INT 1
14193: DEC
14194: ST_TO_ADDR
14195: LD_INT 4
14197: PUSH
14198: FOR_TO
14199: IFFALSE 14265
// begin PrepareSoldier ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14201: LD_INT 0
14203: PPUSH
14204: LD_INT 6
14206: PUSH
14207: LD_INT 7
14209: PUSH
14210: LD_INT 8
14212: PUSH
14213: LD_INT 8
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: PUSH
14222: LD_OWVAR 67
14226: ARRAY
14227: PPUSH
14228: CALL_OW 381
// un := CreateHuman ;
14232: LD_ADDR_VAR 0 4
14236: PUSH
14237: CALL_OW 44
14241: ST_TO_ADDR
// PlaceUnitXYR ( un , 185 , 145 , 6 , false ) ;
14242: LD_VAR 0 4
14246: PPUSH
14247: LD_INT 185
14249: PPUSH
14250: LD_INT 145
14252: PPUSH
14253: LD_INT 6
14255: PPUSH
14256: LD_INT 0
14258: PPUSH
14259: CALL_OW 50
// end ;
14263: GO 14198
14265: POP
14266: POP
// end ;
14267: LD_VAR 0 1
14271: RET
// export function PrepareRussianLastWaveAttack ; var i , veh ; begin
14272: LD_INT 0
14274: PPUSH
14275: PPUSH
14276: PPUSH
// uc_side := 3 ;
14277: LD_ADDR_OWVAR 20
14281: PUSH
14282: LD_INT 3
14284: ST_TO_ADDR
// if Difficulty > 1 then
14285: LD_OWVAR 67
14289: PUSH
14290: LD_INT 1
14292: GREATER
14293: IFFALSE 14455
// begin uc_nation := 0 ;
14295: LD_ADDR_OWVAR 21
14299: PUSH
14300: LD_INT 0
14302: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty + 1 ] do
14303: LD_ADDR_VAR 0 2
14307: PUSH
14308: DOUBLE
14309: LD_INT 1
14311: DEC
14312: ST_TO_ADDR
14313: LD_INT 4
14315: PUSH
14316: LD_INT 5
14318: PUSH
14319: LD_INT 6
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: LIST
14326: PUSH
14327: LD_OWVAR 67
14331: PUSH
14332: LD_INT 1
14334: PLUS
14335: ARRAY
14336: PUSH
14337: FOR_TO
14338: IFFALSE 14453
// begin hc_class := class_apeman_soldier ;
14340: LD_ADDR_OWVAR 28
14344: PUSH
14345: LD_INT 15
14347: ST_TO_ADDR
// hc_gallery :=  ;
14348: LD_ADDR_OWVAR 33
14352: PUSH
14353: LD_STRING 
14355: ST_TO_ADDR
// hc_name := [ Treci , Ivan , Yaromir , Nadzieia , Krasna , Piaty ] [ rand ( 1 , 6 ) ] ;
14356: LD_ADDR_OWVAR 26
14360: PUSH
14361: LD_STRING Treci
14363: PUSH
14364: LD_STRING Ivan
14366: PUSH
14367: LD_STRING Yaromir
14369: PUSH
14370: LD_STRING Nadzieia
14372: PUSH
14373: LD_STRING Krasna
14375: PUSH
14376: LD_STRING Piaty
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: PUSH
14387: LD_INT 1
14389: PPUSH
14390: LD_INT 6
14392: PPUSH
14393: CALL_OW 12
14397: ARRAY
14398: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 0 , 0 ] ;
14399: LD_ADDR_OWVAR 31
14403: PUSH
14404: LD_INT 5
14406: PUSH
14407: LD_INT 0
14409: PUSH
14410: LD_INT 0
14412: PUSH
14413: LD_INT 0
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: ST_TO_ADDR
// hc_sex := sex_male ;
14422: LD_ADDR_OWVAR 27
14426: PUSH
14427: LD_INT 1
14429: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 178 , 148 , 6 , false ) ;
14430: CALL_OW 44
14434: PPUSH
14435: LD_INT 178
14437: PPUSH
14438: LD_INT 148
14440: PPUSH
14441: LD_INT 6
14443: PPUSH
14444: LD_INT 0
14446: PPUSH
14447: CALL_OW 50
// end ;
14451: GO 14337
14453: POP
14454: POP
// end ; for i := 1 to [ 4 , 6 , 7 , 9 ] [ Difficulty ] do
14455: LD_ADDR_VAR 0 2
14459: PUSH
14460: DOUBLE
14461: LD_INT 1
14463: DEC
14464: ST_TO_ADDR
14465: LD_INT 4
14467: PUSH
14468: LD_INT 6
14470: PUSH
14471: LD_INT 7
14473: PUSH
14474: LD_INT 9
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: PUSH
14483: LD_OWVAR 67
14487: ARRAY
14488: PUSH
14489: FOR_TO
14490: IFFALSE 14657
// begin uc_nation := 3 ;
14492: LD_ADDR_OWVAR 21
14496: PUSH
14497: LD_INT 3
14499: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gatling_gun , ru_gun ] [ i mod 3 + 1 ] , 44 ) ;
14500: LD_INT 22
14502: PPUSH
14503: LD_INT 1
14505: PPUSH
14506: LD_INT 1
14508: PPUSH
14509: LD_INT 45
14511: PUSH
14512: LD_INT 43
14514: PUSH
14515: LD_INT 44
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: LIST
14522: PUSH
14523: LD_VAR 0 2
14527: PUSH
14528: LD_INT 3
14530: MOD
14531: PUSH
14532: LD_INT 1
14534: PLUS
14535: ARRAY
14536: PPUSH
14537: LD_INT 44
14539: PPUSH
14540: CALL 19948 0 5
// veh := CreateVehicle ;
14544: LD_ADDR_VAR 0 3
14548: PUSH
14549: CALL_OW 45
14553: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
14554: LD_VAR 0 3
14558: PPUSH
14559: LD_INT 4
14561: PPUSH
14562: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
14566: LD_VAR 0 3
14570: PPUSH
14571: LD_INT 1
14573: PPUSH
14574: LD_INT 0
14576: PPUSH
14577: CALL_OW 49
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14581: LD_INT 0
14583: PPUSH
14584: LD_INT 6
14586: PUSH
14587: LD_INT 7
14589: PUSH
14590: LD_INT 8
14592: PUSH
14593: LD_INT 8
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: PUSH
14602: LD_OWVAR 67
14606: ARRAY
14607: PPUSH
14608: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
14612: CALL_OW 44
14616: PPUSH
14617: LD_VAR 0 3
14621: PPUSH
14622: CALL_OW 52
// AgressiveMove ( veh , [ [ 178 , 137 ] ] ) ;
14626: LD_VAR 0 3
14630: PPUSH
14631: LD_INT 178
14633: PUSH
14634: LD_INT 137
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PUSH
14641: EMPTY
14642: LIST
14643: PPUSH
14644: CALL 54417 0 2
// wait ( 0 0$2 ) ;
14648: LD_INT 70
14650: PPUSH
14651: CALL_OW 67
// end ;
14655: GO 14489
14657: POP
14658: POP
// end ;
14659: LD_VAR 0 1
14663: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i , tmp ;
14664: LD_INT 22
14666: PUSH
14667: LD_INT 3
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: PUSH
14674: LD_INT 32
14676: PUSH
14677: LD_INT 1
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: PPUSH
14688: CALL_OW 69
14692: IFFALSE 14780
14694: GO 14696
14696: DISABLE
14697: LD_INT 0
14699: PPUSH
14700: PPUSH
// begin enable ;
14701: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) ;
14702: LD_ADDR_VAR 0 2
14706: PUSH
14707: LD_INT 22
14709: PUSH
14710: LD_INT 3
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: PUSH
14717: LD_INT 32
14719: PUSH
14720: LD_INT 1
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: PPUSH
14731: CALL_OW 69
14735: ST_TO_ADDR
// for i in tmp do
14736: LD_ADDR_VAR 0 1
14740: PUSH
14741: LD_VAR 0 2
14745: PUSH
14746: FOR_IN
14747: IFFALSE 14778
// if GetFuel ( i ) < 3 then
14749: LD_VAR 0 1
14753: PPUSH
14754: CALL_OW 261
14758: PUSH
14759: LD_INT 3
14761: LESS
14762: IFFALSE 14776
// SetFuel ( i , 3 ) ;
14764: LD_VAR 0 1
14768: PPUSH
14769: LD_INT 3
14771: PPUSH
14772: CALL_OW 240
14776: GO 14746
14778: POP
14779: POP
// end ;
14780: PPOPN 2
14782: END
// every 0 0$1 trigger russianAttack and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i , mech , tmp ;
14783: LD_EXP 8
14787: PUSH
14788: LD_INT 22
14790: PUSH
14791: LD_INT 3
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: PUSH
14798: LD_INT 21
14800: PUSH
14801: LD_INT 1
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: PPUSH
14812: CALL_OW 69
14816: AND
14817: IFFALSE 15081
14819: GO 14821
14821: DISABLE
14822: LD_INT 0
14824: PPUSH
14825: PPUSH
14826: PPUSH
// begin enable ;
14827: ENABLE
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] ] ) ;
14828: LD_ADDR_VAR 0 2
14832: PUSH
14833: LD_INT 22
14835: PUSH
14836: LD_INT 3
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: PUSH
14843: LD_INT 25
14845: PUSH
14846: LD_INT 3
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PUSH
14853: LD_INT 3
14855: PUSH
14856: LD_INT 55
14858: PUSH
14859: EMPTY
14860: LIST
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: LIST
14870: PPUSH
14871: CALL_OW 69
14875: ST_TO_ADDR
// if mech then
14876: LD_VAR 0 2
14880: IFFALSE 14950
// for i in mech do
14882: LD_ADDR_VAR 0 1
14886: PUSH
14887: LD_VAR 0 2
14891: PUSH
14892: FOR_IN
14893: IFFALSE 14948
// begin if IsInArea ( i , escapeArea ) then
14895: LD_VAR 0 1
14899: PPUSH
14900: LD_INT 13
14902: PPUSH
14903: CALL_OW 308
14907: IFFALSE 14920
// RemoveUnit ( i ) else
14909: LD_VAR 0 1
14913: PPUSH
14914: CALL_OW 64
14918: GO 14946
// if IsOk ( i ) then
14920: LD_VAR 0 1
14924: PPUSH
14925: CALL_OW 302
14929: IFFALSE 14946
// ComMoveXY ( i , 196 , 155 ) ;
14931: LD_VAR 0 1
14935: PPUSH
14936: LD_INT 196
14938: PPUSH
14939: LD_INT 155
14941: PPUSH
14942: CALL_OW 111
// end ;
14946: GO 14892
14948: POP
14949: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_apeman_soldier ] , [ f_type , unit_vehicle ] ] , [ f_ok ] ] ) ;
14950: LD_ADDR_VAR 0 3
14954: PUSH
14955: LD_INT 22
14957: PUSH
14958: LD_INT 3
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PUSH
14965: LD_INT 2
14967: PUSH
14968: LD_INT 25
14970: PUSH
14971: LD_INT 1
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 25
14980: PUSH
14981: LD_INT 15
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 21
14990: PUSH
14991: LD_INT 2
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: PUSH
15004: LD_INT 50
15006: PUSH
15007: EMPTY
15008: LIST
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: LIST
15014: PPUSH
15015: CALL_OW 69
15019: ST_TO_ADDR
// if tmp then
15020: LD_VAR 0 3
15024: IFFALSE 15081
// AgressiveMove ( tmp , [ [ 171 , 106 ] , [ 145 , 69 ] , [ 132 , 38 ] , [ 126 , 15 ] ] ) ;
15026: LD_VAR 0 3
15030: PPUSH
15031: LD_INT 171
15033: PUSH
15034: LD_INT 106
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: PUSH
15041: LD_INT 145
15043: PUSH
15044: LD_INT 69
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PUSH
15051: LD_INT 132
15053: PUSH
15054: LD_INT 38
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: PUSH
15061: LD_INT 126
15063: PUSH
15064: LD_INT 15
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: PPUSH
15077: CALL 54417 0 2
// end ; end_of_file
15081: PPOPN 3
15083: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15084: LD_INT 0
15086: PPUSH
15087: PPUSH
// if exist_mode then
15088: LD_VAR 0 2
15092: IFFALSE 15117
// unit := CreateCharacter ( prefix & ident ) else
15094: LD_ADDR_VAR 0 5
15098: PUSH
15099: LD_VAR 0 3
15103: PUSH
15104: LD_VAR 0 1
15108: STR
15109: PPUSH
15110: CALL_OW 34
15114: ST_TO_ADDR
15115: GO 15132
// unit := NewCharacter ( ident ) ;
15117: LD_ADDR_VAR 0 5
15121: PUSH
15122: LD_VAR 0 1
15126: PPUSH
15127: CALL_OW 25
15131: ST_TO_ADDR
// result := unit ;
15132: LD_ADDR_VAR 0 4
15136: PUSH
15137: LD_VAR 0 5
15141: ST_TO_ADDR
// end ;
15142: LD_VAR 0 4
15146: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15147: LD_INT 0
15149: PPUSH
15150: PPUSH
// if not side or not nation then
15151: LD_VAR 0 1
15155: NOT
15156: PUSH
15157: LD_VAR 0 2
15161: NOT
15162: OR
15163: IFFALSE 15167
// exit ;
15165: GO 15935
// case nation of nation_american :
15167: LD_VAR 0 2
15171: PUSH
15172: LD_INT 1
15174: DOUBLE
15175: EQUAL
15176: IFTRUE 15180
15178: GO 15394
15180: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15181: LD_ADDR_VAR 0 4
15185: PUSH
15186: LD_INT 35
15188: PUSH
15189: LD_INT 45
15191: PUSH
15192: LD_INT 46
15194: PUSH
15195: LD_INT 47
15197: PUSH
15198: LD_INT 82
15200: PUSH
15201: LD_INT 83
15203: PUSH
15204: LD_INT 84
15206: PUSH
15207: LD_INT 85
15209: PUSH
15210: LD_INT 86
15212: PUSH
15213: LD_INT 1
15215: PUSH
15216: LD_INT 2
15218: PUSH
15219: LD_INT 6
15221: PUSH
15222: LD_INT 15
15224: PUSH
15225: LD_INT 16
15227: PUSH
15228: LD_INT 7
15230: PUSH
15231: LD_INT 12
15233: PUSH
15234: LD_INT 13
15236: PUSH
15237: LD_INT 10
15239: PUSH
15240: LD_INT 14
15242: PUSH
15243: LD_INT 20
15245: PUSH
15246: LD_INT 21
15248: PUSH
15249: LD_INT 22
15251: PUSH
15252: LD_INT 25
15254: PUSH
15255: LD_INT 32
15257: PUSH
15258: LD_INT 27
15260: PUSH
15261: LD_INT 36
15263: PUSH
15264: LD_INT 69
15266: PUSH
15267: LD_INT 39
15269: PUSH
15270: LD_INT 34
15272: PUSH
15273: LD_INT 40
15275: PUSH
15276: LD_INT 48
15278: PUSH
15279: LD_INT 49
15281: PUSH
15282: LD_INT 50
15284: PUSH
15285: LD_INT 51
15287: PUSH
15288: LD_INT 52
15290: PUSH
15291: LD_INT 53
15293: PUSH
15294: LD_INT 54
15296: PUSH
15297: LD_INT 55
15299: PUSH
15300: LD_INT 56
15302: PUSH
15303: LD_INT 57
15305: PUSH
15306: LD_INT 58
15308: PUSH
15309: LD_INT 59
15311: PUSH
15312: LD_INT 60
15314: PUSH
15315: LD_INT 61
15317: PUSH
15318: LD_INT 62
15320: PUSH
15321: LD_INT 80
15323: PUSH
15324: LD_INT 82
15326: PUSH
15327: LD_INT 83
15329: PUSH
15330: LD_INT 84
15332: PUSH
15333: LD_INT 85
15335: PUSH
15336: LD_INT 86
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: ST_TO_ADDR
15392: GO 15859
15394: LD_INT 2
15396: DOUBLE
15397: EQUAL
15398: IFTRUE 15402
15400: GO 15628
15402: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15403: LD_ADDR_VAR 0 4
15407: PUSH
15408: LD_INT 35
15410: PUSH
15411: LD_INT 45
15413: PUSH
15414: LD_INT 46
15416: PUSH
15417: LD_INT 47
15419: PUSH
15420: LD_INT 82
15422: PUSH
15423: LD_INT 83
15425: PUSH
15426: LD_INT 84
15428: PUSH
15429: LD_INT 85
15431: PUSH
15432: LD_INT 87
15434: PUSH
15435: LD_INT 70
15437: PUSH
15438: LD_INT 1
15440: PUSH
15441: LD_INT 11
15443: PUSH
15444: LD_INT 3
15446: PUSH
15447: LD_INT 4
15449: PUSH
15450: LD_INT 5
15452: PUSH
15453: LD_INT 6
15455: PUSH
15456: LD_INT 15
15458: PUSH
15459: LD_INT 18
15461: PUSH
15462: LD_INT 7
15464: PUSH
15465: LD_INT 17
15467: PUSH
15468: LD_INT 8
15470: PUSH
15471: LD_INT 20
15473: PUSH
15474: LD_INT 21
15476: PUSH
15477: LD_INT 22
15479: PUSH
15480: LD_INT 72
15482: PUSH
15483: LD_INT 26
15485: PUSH
15486: LD_INT 69
15488: PUSH
15489: LD_INT 39
15491: PUSH
15492: LD_INT 40
15494: PUSH
15495: LD_INT 41
15497: PUSH
15498: LD_INT 42
15500: PUSH
15501: LD_INT 43
15503: PUSH
15504: LD_INT 48
15506: PUSH
15507: LD_INT 49
15509: PUSH
15510: LD_INT 50
15512: PUSH
15513: LD_INT 51
15515: PUSH
15516: LD_INT 52
15518: PUSH
15519: LD_INT 53
15521: PUSH
15522: LD_INT 54
15524: PUSH
15525: LD_INT 55
15527: PUSH
15528: LD_INT 56
15530: PUSH
15531: LD_INT 60
15533: PUSH
15534: LD_INT 61
15536: PUSH
15537: LD_INT 62
15539: PUSH
15540: LD_INT 66
15542: PUSH
15543: LD_INT 67
15545: PUSH
15546: LD_INT 68
15548: PUSH
15549: LD_INT 81
15551: PUSH
15552: LD_INT 82
15554: PUSH
15555: LD_INT 83
15557: PUSH
15558: LD_INT 84
15560: PUSH
15561: LD_INT 85
15563: PUSH
15564: LD_INT 87
15566: PUSH
15567: LD_INT 88
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: ST_TO_ADDR
15626: GO 15859
15628: LD_INT 3
15630: DOUBLE
15631: EQUAL
15632: IFTRUE 15636
15634: GO 15858
15636: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
15637: LD_ADDR_VAR 0 4
15641: PUSH
15642: LD_INT 46
15644: PUSH
15645: LD_INT 47
15647: PUSH
15648: LD_INT 1
15650: PUSH
15651: LD_INT 2
15653: PUSH
15654: LD_INT 82
15656: PUSH
15657: LD_INT 83
15659: PUSH
15660: LD_INT 84
15662: PUSH
15663: LD_INT 85
15665: PUSH
15666: LD_INT 86
15668: PUSH
15669: LD_INT 11
15671: PUSH
15672: LD_INT 9
15674: PUSH
15675: LD_INT 20
15677: PUSH
15678: LD_INT 19
15680: PUSH
15681: LD_INT 21
15683: PUSH
15684: LD_INT 24
15686: PUSH
15687: LD_INT 22
15689: PUSH
15690: LD_INT 25
15692: PUSH
15693: LD_INT 28
15695: PUSH
15696: LD_INT 29
15698: PUSH
15699: LD_INT 30
15701: PUSH
15702: LD_INT 31
15704: PUSH
15705: LD_INT 37
15707: PUSH
15708: LD_INT 38
15710: PUSH
15711: LD_INT 32
15713: PUSH
15714: LD_INT 27
15716: PUSH
15717: LD_INT 33
15719: PUSH
15720: LD_INT 69
15722: PUSH
15723: LD_INT 39
15725: PUSH
15726: LD_INT 34
15728: PUSH
15729: LD_INT 40
15731: PUSH
15732: LD_INT 71
15734: PUSH
15735: LD_INT 23
15737: PUSH
15738: LD_INT 44
15740: PUSH
15741: LD_INT 48
15743: PUSH
15744: LD_INT 49
15746: PUSH
15747: LD_INT 50
15749: PUSH
15750: LD_INT 51
15752: PUSH
15753: LD_INT 52
15755: PUSH
15756: LD_INT 53
15758: PUSH
15759: LD_INT 54
15761: PUSH
15762: LD_INT 55
15764: PUSH
15765: LD_INT 56
15767: PUSH
15768: LD_INT 57
15770: PUSH
15771: LD_INT 58
15773: PUSH
15774: LD_INT 59
15776: PUSH
15777: LD_INT 63
15779: PUSH
15780: LD_INT 64
15782: PUSH
15783: LD_INT 65
15785: PUSH
15786: LD_INT 82
15788: PUSH
15789: LD_INT 83
15791: PUSH
15792: LD_INT 84
15794: PUSH
15795: LD_INT 85
15797: PUSH
15798: LD_INT 86
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: ST_TO_ADDR
15856: GO 15859
15858: POP
// if state > - 1 and state < 3 then
15859: LD_VAR 0 3
15863: PUSH
15864: LD_INT 1
15866: NEG
15867: GREATER
15868: PUSH
15869: LD_VAR 0 3
15873: PUSH
15874: LD_INT 3
15876: LESS
15877: AND
15878: IFFALSE 15935
// for i in result do
15880: LD_ADDR_VAR 0 5
15884: PUSH
15885: LD_VAR 0 4
15889: PUSH
15890: FOR_IN
15891: IFFALSE 15933
// if GetTech ( i , side ) <> state then
15893: LD_VAR 0 5
15897: PPUSH
15898: LD_VAR 0 1
15902: PPUSH
15903: CALL_OW 321
15907: PUSH
15908: LD_VAR 0 3
15912: NONEQUAL
15913: IFFALSE 15931
// result := result diff i ;
15915: LD_ADDR_VAR 0 4
15919: PUSH
15920: LD_VAR 0 4
15924: PUSH
15925: LD_VAR 0 5
15929: DIFF
15930: ST_TO_ADDR
15931: GO 15890
15933: POP
15934: POP
// end ;
15935: LD_VAR 0 4
15939: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
15940: LD_INT 0
15942: PPUSH
15943: PPUSH
15944: PPUSH
// result := true ;
15945: LD_ADDR_VAR 0 3
15949: PUSH
15950: LD_INT 1
15952: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
15953: LD_ADDR_VAR 0 5
15957: PUSH
15958: LD_VAR 0 2
15962: PPUSH
15963: CALL_OW 480
15967: ST_TO_ADDR
// if not tmp then
15968: LD_VAR 0 5
15972: NOT
15973: IFFALSE 15977
// exit ;
15975: GO 16026
// for i in tmp do
15977: LD_ADDR_VAR 0 4
15981: PUSH
15982: LD_VAR 0 5
15986: PUSH
15987: FOR_IN
15988: IFFALSE 16024
// if GetTech ( i , side ) <> state_researched then
15990: LD_VAR 0 4
15994: PPUSH
15995: LD_VAR 0 1
15999: PPUSH
16000: CALL_OW 321
16004: PUSH
16005: LD_INT 2
16007: NONEQUAL
16008: IFFALSE 16022
// begin result := false ;
16010: LD_ADDR_VAR 0 3
16014: PUSH
16015: LD_INT 0
16017: ST_TO_ADDR
// exit ;
16018: POP
16019: POP
16020: GO 16026
// end ;
16022: GO 15987
16024: POP
16025: POP
// end ;
16026: LD_VAR 0 3
16030: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16031: LD_INT 0
16033: PPUSH
16034: PPUSH
16035: PPUSH
16036: PPUSH
16037: PPUSH
16038: PPUSH
16039: PPUSH
16040: PPUSH
16041: PPUSH
16042: PPUSH
16043: PPUSH
16044: PPUSH
16045: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16046: LD_VAR 0 1
16050: NOT
16051: PUSH
16052: LD_VAR 0 1
16056: PPUSH
16057: CALL_OW 257
16061: PUSH
16062: LD_INT 9
16064: NONEQUAL
16065: OR
16066: IFFALSE 16070
// exit ;
16068: GO 16643
// side := GetSide ( unit ) ;
16070: LD_ADDR_VAR 0 9
16074: PUSH
16075: LD_VAR 0 1
16079: PPUSH
16080: CALL_OW 255
16084: ST_TO_ADDR
// tech_space := tech_spacanom ;
16085: LD_ADDR_VAR 0 12
16089: PUSH
16090: LD_INT 29
16092: ST_TO_ADDR
// tech_time := tech_taurad ;
16093: LD_ADDR_VAR 0 13
16097: PUSH
16098: LD_INT 28
16100: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16101: LD_ADDR_VAR 0 11
16105: PUSH
16106: LD_VAR 0 1
16110: PPUSH
16111: CALL_OW 310
16115: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16116: LD_VAR 0 11
16120: PPUSH
16121: CALL_OW 247
16125: PUSH
16126: LD_INT 2
16128: EQUAL
16129: IFFALSE 16133
// exit ;
16131: GO 16643
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16133: LD_ADDR_VAR 0 8
16137: PUSH
16138: LD_INT 81
16140: PUSH
16141: LD_VAR 0 9
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PUSH
16150: LD_INT 3
16152: PUSH
16153: LD_INT 21
16155: PUSH
16156: LD_INT 3
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PUSH
16167: EMPTY
16168: LIST
16169: LIST
16170: PPUSH
16171: CALL_OW 69
16175: ST_TO_ADDR
// if not tmp then
16176: LD_VAR 0 8
16180: NOT
16181: IFFALSE 16185
// exit ;
16183: GO 16643
// if in_unit then
16185: LD_VAR 0 11
16189: IFFALSE 16213
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16191: LD_ADDR_VAR 0 10
16195: PUSH
16196: LD_VAR 0 8
16200: PPUSH
16201: LD_VAR 0 11
16205: PPUSH
16206: CALL_OW 74
16210: ST_TO_ADDR
16211: GO 16233
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16213: LD_ADDR_VAR 0 10
16217: PUSH
16218: LD_VAR 0 8
16222: PPUSH
16223: LD_VAR 0 1
16227: PPUSH
16228: CALL_OW 74
16232: ST_TO_ADDR
// if not enemy then
16233: LD_VAR 0 10
16237: NOT
16238: IFFALSE 16242
// exit ;
16240: GO 16643
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16242: LD_VAR 0 11
16246: PUSH
16247: LD_VAR 0 11
16251: PPUSH
16252: LD_VAR 0 10
16256: PPUSH
16257: CALL_OW 296
16261: PUSH
16262: LD_INT 13
16264: GREATER
16265: AND
16266: PUSH
16267: LD_VAR 0 1
16271: PPUSH
16272: LD_VAR 0 10
16276: PPUSH
16277: CALL_OW 296
16281: PUSH
16282: LD_INT 12
16284: GREATER
16285: OR
16286: IFFALSE 16290
// exit ;
16288: GO 16643
// missile := [ 1 ] ;
16290: LD_ADDR_VAR 0 14
16294: PUSH
16295: LD_INT 1
16297: PUSH
16298: EMPTY
16299: LIST
16300: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16301: LD_VAR 0 9
16305: PPUSH
16306: LD_VAR 0 12
16310: PPUSH
16311: CALL_OW 325
16315: IFFALSE 16344
// missile := Insert ( missile , missile + 1 , 2 ) ;
16317: LD_ADDR_VAR 0 14
16321: PUSH
16322: LD_VAR 0 14
16326: PPUSH
16327: LD_VAR 0 14
16331: PUSH
16332: LD_INT 1
16334: PLUS
16335: PPUSH
16336: LD_INT 2
16338: PPUSH
16339: CALL_OW 2
16343: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16344: LD_VAR 0 9
16348: PPUSH
16349: LD_VAR 0 13
16353: PPUSH
16354: CALL_OW 325
16358: PUSH
16359: LD_VAR 0 10
16363: PPUSH
16364: CALL_OW 255
16368: PPUSH
16369: LD_VAR 0 13
16373: PPUSH
16374: CALL_OW 325
16378: NOT
16379: AND
16380: IFFALSE 16409
// missile := Insert ( missile , missile + 1 , 3 ) ;
16382: LD_ADDR_VAR 0 14
16386: PUSH
16387: LD_VAR 0 14
16391: PPUSH
16392: LD_VAR 0 14
16396: PUSH
16397: LD_INT 1
16399: PLUS
16400: PPUSH
16401: LD_INT 3
16403: PPUSH
16404: CALL_OW 2
16408: ST_TO_ADDR
// if missile < 2 then
16409: LD_VAR 0 14
16413: PUSH
16414: LD_INT 2
16416: LESS
16417: IFFALSE 16421
// exit ;
16419: GO 16643
// x := GetX ( enemy ) ;
16421: LD_ADDR_VAR 0 4
16425: PUSH
16426: LD_VAR 0 10
16430: PPUSH
16431: CALL_OW 250
16435: ST_TO_ADDR
// y := GetY ( enemy ) ;
16436: LD_ADDR_VAR 0 5
16440: PUSH
16441: LD_VAR 0 10
16445: PPUSH
16446: CALL_OW 251
16450: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16451: LD_ADDR_VAR 0 6
16455: PUSH
16456: LD_VAR 0 4
16460: PUSH
16461: LD_INT 1
16463: NEG
16464: PPUSH
16465: LD_INT 1
16467: PPUSH
16468: CALL_OW 12
16472: PLUS
16473: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16474: LD_ADDR_VAR 0 7
16478: PUSH
16479: LD_VAR 0 5
16483: PUSH
16484: LD_INT 1
16486: NEG
16487: PPUSH
16488: LD_INT 1
16490: PPUSH
16491: CALL_OW 12
16495: PLUS
16496: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16497: LD_VAR 0 6
16501: PPUSH
16502: LD_VAR 0 7
16506: PPUSH
16507: CALL_OW 488
16511: NOT
16512: IFFALSE 16534
// begin _x := x ;
16514: LD_ADDR_VAR 0 6
16518: PUSH
16519: LD_VAR 0 4
16523: ST_TO_ADDR
// _y := y ;
16524: LD_ADDR_VAR 0 7
16528: PUSH
16529: LD_VAR 0 5
16533: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
16534: LD_ADDR_VAR 0 3
16538: PUSH
16539: LD_INT 1
16541: PPUSH
16542: LD_VAR 0 14
16546: PPUSH
16547: CALL_OW 12
16551: ST_TO_ADDR
// case i of 1 :
16552: LD_VAR 0 3
16556: PUSH
16557: LD_INT 1
16559: DOUBLE
16560: EQUAL
16561: IFTRUE 16565
16563: GO 16582
16565: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
16566: LD_VAR 0 1
16570: PPUSH
16571: LD_VAR 0 10
16575: PPUSH
16576: CALL_OW 115
16580: GO 16643
16582: LD_INT 2
16584: DOUBLE
16585: EQUAL
16586: IFTRUE 16590
16588: GO 16612
16590: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
16591: LD_VAR 0 1
16595: PPUSH
16596: LD_VAR 0 6
16600: PPUSH
16601: LD_VAR 0 7
16605: PPUSH
16606: CALL_OW 153
16610: GO 16643
16612: LD_INT 3
16614: DOUBLE
16615: EQUAL
16616: IFTRUE 16620
16618: GO 16642
16620: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
16621: LD_VAR 0 1
16625: PPUSH
16626: LD_VAR 0 6
16630: PPUSH
16631: LD_VAR 0 7
16635: PPUSH
16636: CALL_OW 154
16640: GO 16643
16642: POP
// end ;
16643: LD_VAR 0 2
16647: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
16648: LD_INT 0
16650: PPUSH
16651: PPUSH
16652: PPUSH
16653: PPUSH
16654: PPUSH
16655: PPUSH
// if not unit or not building then
16656: LD_VAR 0 1
16660: NOT
16661: PUSH
16662: LD_VAR 0 2
16666: NOT
16667: OR
16668: IFFALSE 16672
// exit ;
16670: GO 16830
// x := GetX ( building ) ;
16672: LD_ADDR_VAR 0 5
16676: PUSH
16677: LD_VAR 0 2
16681: PPUSH
16682: CALL_OW 250
16686: ST_TO_ADDR
// y := GetY ( building ) ;
16687: LD_ADDR_VAR 0 6
16691: PUSH
16692: LD_VAR 0 2
16696: PPUSH
16697: CALL_OW 251
16701: ST_TO_ADDR
// for i = 0 to 5 do
16702: LD_ADDR_VAR 0 4
16706: PUSH
16707: DOUBLE
16708: LD_INT 0
16710: DEC
16711: ST_TO_ADDR
16712: LD_INT 5
16714: PUSH
16715: FOR_TO
16716: IFFALSE 16828
// begin _x := ShiftX ( x , i , 3 ) ;
16718: LD_ADDR_VAR 0 7
16722: PUSH
16723: LD_VAR 0 5
16727: PPUSH
16728: LD_VAR 0 4
16732: PPUSH
16733: LD_INT 3
16735: PPUSH
16736: CALL_OW 272
16740: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
16741: LD_ADDR_VAR 0 8
16745: PUSH
16746: LD_VAR 0 6
16750: PPUSH
16751: LD_VAR 0 4
16755: PPUSH
16756: LD_INT 3
16758: PPUSH
16759: CALL_OW 273
16763: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16764: LD_VAR 0 7
16768: PPUSH
16769: LD_VAR 0 8
16773: PPUSH
16774: CALL_OW 488
16778: NOT
16779: IFFALSE 16783
// continue ;
16781: GO 16715
// if HexInfo ( _x , _y ) = 0 then
16783: LD_VAR 0 7
16787: PPUSH
16788: LD_VAR 0 8
16792: PPUSH
16793: CALL_OW 428
16797: PUSH
16798: LD_INT 0
16800: EQUAL
16801: IFFALSE 16826
// begin ComMoveXY ( unit , _x , _y ) ;
16803: LD_VAR 0 1
16807: PPUSH
16808: LD_VAR 0 7
16812: PPUSH
16813: LD_VAR 0 8
16817: PPUSH
16818: CALL_OW 111
// exit ;
16822: POP
16823: POP
16824: GO 16830
// end ; end ;
16826: GO 16715
16828: POP
16829: POP
// end ;
16830: LD_VAR 0 3
16834: RET
// export function ScanBase ( side , base_area ) ; begin
16835: LD_INT 0
16837: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
16838: LD_ADDR_VAR 0 3
16842: PUSH
16843: LD_VAR 0 2
16847: PPUSH
16848: LD_INT 81
16850: PUSH
16851: LD_VAR 0 1
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PPUSH
16860: CALL_OW 70
16864: ST_TO_ADDR
// end ;
16865: LD_VAR 0 3
16869: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
16870: LD_INT 0
16872: PPUSH
16873: PPUSH
16874: PPUSH
16875: PPUSH
// result := false ;
16876: LD_ADDR_VAR 0 2
16880: PUSH
16881: LD_INT 0
16883: ST_TO_ADDR
// side := GetSide ( unit ) ;
16884: LD_ADDR_VAR 0 3
16888: PUSH
16889: LD_VAR 0 1
16893: PPUSH
16894: CALL_OW 255
16898: ST_TO_ADDR
// nat := GetNation ( unit ) ;
16899: LD_ADDR_VAR 0 4
16903: PUSH
16904: LD_VAR 0 1
16908: PPUSH
16909: CALL_OW 248
16913: ST_TO_ADDR
// case nat of 1 :
16914: LD_VAR 0 4
16918: PUSH
16919: LD_INT 1
16921: DOUBLE
16922: EQUAL
16923: IFTRUE 16927
16925: GO 16938
16927: POP
// tech := tech_lassight ; 2 :
16928: LD_ADDR_VAR 0 5
16932: PUSH
16933: LD_INT 12
16935: ST_TO_ADDR
16936: GO 16977
16938: LD_INT 2
16940: DOUBLE
16941: EQUAL
16942: IFTRUE 16946
16944: GO 16957
16946: POP
// tech := tech_mortar ; 3 :
16947: LD_ADDR_VAR 0 5
16951: PUSH
16952: LD_INT 41
16954: ST_TO_ADDR
16955: GO 16977
16957: LD_INT 3
16959: DOUBLE
16960: EQUAL
16961: IFTRUE 16965
16963: GO 16976
16965: POP
// tech := tech_bazooka ; end ;
16966: LD_ADDR_VAR 0 5
16970: PUSH
16971: LD_INT 44
16973: ST_TO_ADDR
16974: GO 16977
16976: POP
// if Researched ( side , tech ) then
16977: LD_VAR 0 3
16981: PPUSH
16982: LD_VAR 0 5
16986: PPUSH
16987: CALL_OW 325
16991: IFFALSE 17018
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
16993: LD_ADDR_VAR 0 2
16997: PUSH
16998: LD_INT 5
17000: PUSH
17001: LD_INT 8
17003: PUSH
17004: LD_INT 9
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: LIST
17011: PUSH
17012: LD_VAR 0 4
17016: ARRAY
17017: ST_TO_ADDR
// end ;
17018: LD_VAR 0 2
17022: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17023: LD_INT 0
17025: PPUSH
17026: PPUSH
17027: PPUSH
// if not mines then
17028: LD_VAR 0 2
17032: NOT
17033: IFFALSE 17037
// exit ;
17035: GO 17181
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17037: LD_ADDR_VAR 0 5
17041: PUSH
17042: LD_INT 81
17044: PUSH
17045: LD_VAR 0 1
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 3
17056: PUSH
17057: LD_INT 21
17059: PUSH
17060: LD_INT 3
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: PPUSH
17075: CALL_OW 69
17079: ST_TO_ADDR
// for i in mines do
17080: LD_ADDR_VAR 0 4
17084: PUSH
17085: LD_VAR 0 2
17089: PUSH
17090: FOR_IN
17091: IFFALSE 17179
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17093: LD_VAR 0 4
17097: PUSH
17098: LD_INT 1
17100: ARRAY
17101: PPUSH
17102: LD_VAR 0 4
17106: PUSH
17107: LD_INT 2
17109: ARRAY
17110: PPUSH
17111: CALL_OW 458
17115: NOT
17116: IFFALSE 17120
// continue ;
17118: GO 17090
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17120: LD_VAR 0 4
17124: PUSH
17125: LD_INT 1
17127: ARRAY
17128: PPUSH
17129: LD_VAR 0 4
17133: PUSH
17134: LD_INT 2
17136: ARRAY
17137: PPUSH
17138: CALL_OW 428
17142: PUSH
17143: LD_VAR 0 5
17147: IN
17148: IFFALSE 17177
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17150: LD_VAR 0 4
17154: PUSH
17155: LD_INT 1
17157: ARRAY
17158: PPUSH
17159: LD_VAR 0 4
17163: PUSH
17164: LD_INT 2
17166: ARRAY
17167: PPUSH
17168: LD_VAR 0 1
17172: PPUSH
17173: CALL_OW 456
// end ;
17177: GO 17090
17179: POP
17180: POP
// end ;
17181: LD_VAR 0 3
17185: RET
// export function Count ( array ) ; var i ; begin
17186: LD_INT 0
17188: PPUSH
17189: PPUSH
// result := 0 ;
17190: LD_ADDR_VAR 0 2
17194: PUSH
17195: LD_INT 0
17197: ST_TO_ADDR
// for i in array do
17198: LD_ADDR_VAR 0 3
17202: PUSH
17203: LD_VAR 0 1
17207: PUSH
17208: FOR_IN
17209: IFFALSE 17233
// if i then
17211: LD_VAR 0 3
17215: IFFALSE 17231
// result := result + 1 ;
17217: LD_ADDR_VAR 0 2
17221: PUSH
17222: LD_VAR 0 2
17226: PUSH
17227: LD_INT 1
17229: PLUS
17230: ST_TO_ADDR
17231: GO 17208
17233: POP
17234: POP
// end ;
17235: LD_VAR 0 2
17239: RET
// export function IsEmpty ( building ) ; begin
17240: LD_INT 0
17242: PPUSH
// if not building then
17243: LD_VAR 0 1
17247: NOT
17248: IFFALSE 17252
// exit ;
17250: GO 17295
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17252: LD_ADDR_VAR 0 2
17256: PUSH
17257: LD_VAR 0 1
17261: PUSH
17262: LD_INT 22
17264: PUSH
17265: LD_VAR 0 1
17269: PPUSH
17270: CALL_OW 255
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: PUSH
17279: LD_INT 58
17281: PUSH
17282: EMPTY
17283: LIST
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: PPUSH
17289: CALL_OW 69
17293: IN
17294: ST_TO_ADDR
// end ;
17295: LD_VAR 0 2
17299: RET
// export function IsNotFull ( building ) ; begin
17300: LD_INT 0
17302: PPUSH
// if not building then
17303: LD_VAR 0 1
17307: NOT
17308: IFFALSE 17312
// exit ;
17310: GO 17331
// result := UnitsInside ( building ) < 6 ;
17312: LD_ADDR_VAR 0 2
17316: PUSH
17317: LD_VAR 0 1
17321: PPUSH
17322: CALL_OW 313
17326: PUSH
17327: LD_INT 6
17329: LESS
17330: ST_TO_ADDR
// end ;
17331: LD_VAR 0 2
17335: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17336: LD_INT 0
17338: PPUSH
17339: PPUSH
17340: PPUSH
17341: PPUSH
// tmp := [ ] ;
17342: LD_ADDR_VAR 0 3
17346: PUSH
17347: EMPTY
17348: ST_TO_ADDR
// list := [ ] ;
17349: LD_ADDR_VAR 0 5
17353: PUSH
17354: EMPTY
17355: ST_TO_ADDR
// for i = 16 to 25 do
17356: LD_ADDR_VAR 0 4
17360: PUSH
17361: DOUBLE
17362: LD_INT 16
17364: DEC
17365: ST_TO_ADDR
17366: LD_INT 25
17368: PUSH
17369: FOR_TO
17370: IFFALSE 17443
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17372: LD_ADDR_VAR 0 3
17376: PUSH
17377: LD_VAR 0 3
17381: PUSH
17382: LD_INT 22
17384: PUSH
17385: LD_VAR 0 1
17389: PPUSH
17390: CALL_OW 255
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: PUSH
17399: LD_INT 91
17401: PUSH
17402: LD_VAR 0 1
17406: PUSH
17407: LD_INT 6
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: LIST
17414: PUSH
17415: LD_INT 30
17417: PUSH
17418: LD_VAR 0 4
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: LIST
17431: PUSH
17432: EMPTY
17433: LIST
17434: PPUSH
17435: CALL_OW 69
17439: ADD
17440: ST_TO_ADDR
17441: GO 17369
17443: POP
17444: POP
// for i = 1 to tmp do
17445: LD_ADDR_VAR 0 4
17449: PUSH
17450: DOUBLE
17451: LD_INT 1
17453: DEC
17454: ST_TO_ADDR
17455: LD_VAR 0 3
17459: PUSH
17460: FOR_TO
17461: IFFALSE 17549
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17463: LD_ADDR_VAR 0 5
17467: PUSH
17468: LD_VAR 0 5
17472: PUSH
17473: LD_VAR 0 3
17477: PUSH
17478: LD_VAR 0 4
17482: ARRAY
17483: PPUSH
17484: CALL_OW 266
17488: PUSH
17489: LD_VAR 0 3
17493: PUSH
17494: LD_VAR 0 4
17498: ARRAY
17499: PPUSH
17500: CALL_OW 250
17504: PUSH
17505: LD_VAR 0 3
17509: PUSH
17510: LD_VAR 0 4
17514: ARRAY
17515: PPUSH
17516: CALL_OW 251
17520: PUSH
17521: LD_VAR 0 3
17525: PUSH
17526: LD_VAR 0 4
17530: ARRAY
17531: PPUSH
17532: CALL_OW 254
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: PUSH
17543: EMPTY
17544: LIST
17545: ADD
17546: ST_TO_ADDR
17547: GO 17460
17549: POP
17550: POP
// result := list ;
17551: LD_ADDR_VAR 0 2
17555: PUSH
17556: LD_VAR 0 5
17560: ST_TO_ADDR
// end ;
17561: LD_VAR 0 2
17565: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17566: LD_INT 0
17568: PPUSH
17569: PPUSH
17570: PPUSH
17571: PPUSH
17572: PPUSH
17573: PPUSH
17574: PPUSH
// if not factory then
17575: LD_VAR 0 1
17579: NOT
17580: IFFALSE 17584
// exit ;
17582: GO 18177
// if control = control_apeman then
17584: LD_VAR 0 4
17588: PUSH
17589: LD_INT 5
17591: EQUAL
17592: IFFALSE 17701
// begin tmp := UnitsInside ( factory ) ;
17594: LD_ADDR_VAR 0 8
17598: PUSH
17599: LD_VAR 0 1
17603: PPUSH
17604: CALL_OW 313
17608: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17609: LD_VAR 0 8
17613: PPUSH
17614: LD_INT 25
17616: PUSH
17617: LD_INT 12
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PPUSH
17624: CALL_OW 72
17628: NOT
17629: IFFALSE 17639
// control := control_manual ;
17631: LD_ADDR_VAR 0 4
17635: PUSH
17636: LD_INT 1
17638: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17639: LD_ADDR_VAR 0 8
17643: PUSH
17644: LD_VAR 0 1
17648: PPUSH
17649: CALL 17336 0 1
17653: ST_TO_ADDR
// if tmp then
17654: LD_VAR 0 8
17658: IFFALSE 17701
// begin for i in tmp do
17660: LD_ADDR_VAR 0 7
17664: PUSH
17665: LD_VAR 0 8
17669: PUSH
17670: FOR_IN
17671: IFFALSE 17699
// if i [ 1 ] = b_ext_radio then
17673: LD_VAR 0 7
17677: PUSH
17678: LD_INT 1
17680: ARRAY
17681: PUSH
17682: LD_INT 22
17684: EQUAL
17685: IFFALSE 17697
// begin control := control_remote ;
17687: LD_ADDR_VAR 0 4
17691: PUSH
17692: LD_INT 2
17694: ST_TO_ADDR
// break ;
17695: GO 17699
// end ;
17697: GO 17670
17699: POP
17700: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17701: LD_VAR 0 1
17705: PPUSH
17706: LD_VAR 0 2
17710: PPUSH
17711: LD_VAR 0 3
17715: PPUSH
17716: LD_VAR 0 4
17720: PPUSH
17721: LD_VAR 0 5
17725: PPUSH
17726: CALL_OW 448
17730: IFFALSE 17765
// begin result := [ chassis , engine , control , weapon ] ;
17732: LD_ADDR_VAR 0 6
17736: PUSH
17737: LD_VAR 0 2
17741: PUSH
17742: LD_VAR 0 3
17746: PUSH
17747: LD_VAR 0 4
17751: PUSH
17752: LD_VAR 0 5
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: ST_TO_ADDR
// exit ;
17763: GO 18177
// end ; _chassis := AvailableChassisList ( factory ) ;
17765: LD_ADDR_VAR 0 9
17769: PUSH
17770: LD_VAR 0 1
17774: PPUSH
17775: CALL_OW 475
17779: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
17780: LD_ADDR_VAR 0 11
17784: PUSH
17785: LD_VAR 0 1
17789: PPUSH
17790: CALL_OW 476
17794: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
17795: LD_ADDR_VAR 0 12
17799: PUSH
17800: LD_VAR 0 1
17804: PPUSH
17805: CALL_OW 477
17809: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
17810: LD_ADDR_VAR 0 10
17814: PUSH
17815: LD_VAR 0 1
17819: PPUSH
17820: CALL_OW 478
17824: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
17825: LD_VAR 0 9
17829: NOT
17830: PUSH
17831: LD_VAR 0 11
17835: NOT
17836: OR
17837: PUSH
17838: LD_VAR 0 12
17842: NOT
17843: OR
17844: PUSH
17845: LD_VAR 0 10
17849: NOT
17850: OR
17851: IFFALSE 17886
// begin result := [ chassis , engine , control , weapon ] ;
17853: LD_ADDR_VAR 0 6
17857: PUSH
17858: LD_VAR 0 2
17862: PUSH
17863: LD_VAR 0 3
17867: PUSH
17868: LD_VAR 0 4
17872: PUSH
17873: LD_VAR 0 5
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: ST_TO_ADDR
// exit ;
17884: GO 18177
// end ; if not chassis in _chassis then
17886: LD_VAR 0 2
17890: PUSH
17891: LD_VAR 0 9
17895: IN
17896: NOT
17897: IFFALSE 17923
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
17899: LD_ADDR_VAR 0 2
17903: PUSH
17904: LD_VAR 0 9
17908: PUSH
17909: LD_INT 1
17911: PPUSH
17912: LD_VAR 0 9
17916: PPUSH
17917: CALL_OW 12
17921: ARRAY
17922: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
17923: LD_VAR 0 2
17927: PPUSH
17928: LD_VAR 0 3
17932: PPUSH
17933: CALL 18182 0 2
17937: NOT
17938: IFFALSE 17997
// repeat engine := _engine [ 1 ] ;
17940: LD_ADDR_VAR 0 3
17944: PUSH
17945: LD_VAR 0 11
17949: PUSH
17950: LD_INT 1
17952: ARRAY
17953: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
17954: LD_ADDR_VAR 0 11
17958: PUSH
17959: LD_VAR 0 11
17963: PPUSH
17964: LD_INT 1
17966: PPUSH
17967: CALL_OW 3
17971: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
17972: LD_VAR 0 2
17976: PPUSH
17977: LD_VAR 0 3
17981: PPUSH
17982: CALL 18182 0 2
17986: PUSH
17987: LD_VAR 0 11
17991: PUSH
17992: EMPTY
17993: EQUAL
17994: OR
17995: IFFALSE 17940
// if not control in _control then
17997: LD_VAR 0 4
18001: PUSH
18002: LD_VAR 0 12
18006: IN
18007: NOT
18008: IFFALSE 18034
// control := _control [ rand ( 1 , _control ) ] ;
18010: LD_ADDR_VAR 0 4
18014: PUSH
18015: LD_VAR 0 12
18019: PUSH
18020: LD_INT 1
18022: PPUSH
18023: LD_VAR 0 12
18027: PPUSH
18028: CALL_OW 12
18032: ARRAY
18033: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18034: LD_VAR 0 2
18038: PPUSH
18039: LD_VAR 0 5
18043: PPUSH
18044: CALL 18402 0 2
18048: NOT
18049: IFFALSE 18108
// repeat weapon := _weapon [ 1 ] ;
18051: LD_ADDR_VAR 0 5
18055: PUSH
18056: LD_VAR 0 10
18060: PUSH
18061: LD_INT 1
18063: ARRAY
18064: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18065: LD_ADDR_VAR 0 10
18069: PUSH
18070: LD_VAR 0 10
18074: PPUSH
18075: LD_INT 1
18077: PPUSH
18078: CALL_OW 3
18082: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18083: LD_VAR 0 2
18087: PPUSH
18088: LD_VAR 0 5
18092: PPUSH
18093: CALL 18402 0 2
18097: PUSH
18098: LD_VAR 0 10
18102: PUSH
18103: EMPTY
18104: EQUAL
18105: OR
18106: IFFALSE 18051
// result := [ ] ;
18108: LD_ADDR_VAR 0 6
18112: PUSH
18113: EMPTY
18114: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18115: LD_VAR 0 1
18119: PPUSH
18120: LD_VAR 0 2
18124: PPUSH
18125: LD_VAR 0 3
18129: PPUSH
18130: LD_VAR 0 4
18134: PPUSH
18135: LD_VAR 0 5
18139: PPUSH
18140: CALL_OW 448
18144: IFFALSE 18177
// result := [ chassis , engine , control , weapon ] ;
18146: LD_ADDR_VAR 0 6
18150: PUSH
18151: LD_VAR 0 2
18155: PUSH
18156: LD_VAR 0 3
18160: PUSH
18161: LD_VAR 0 4
18165: PUSH
18166: LD_VAR 0 5
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: ST_TO_ADDR
// end ;
18177: LD_VAR 0 6
18181: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18182: LD_INT 0
18184: PPUSH
// if not chassis or not engine then
18185: LD_VAR 0 1
18189: NOT
18190: PUSH
18191: LD_VAR 0 2
18195: NOT
18196: OR
18197: IFFALSE 18201
// exit ;
18199: GO 18397
// case engine of engine_solar :
18201: LD_VAR 0 2
18205: PUSH
18206: LD_INT 2
18208: DOUBLE
18209: EQUAL
18210: IFTRUE 18214
18212: GO 18252
18214: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18215: LD_ADDR_VAR 0 3
18219: PUSH
18220: LD_INT 11
18222: PUSH
18223: LD_INT 12
18225: PUSH
18226: LD_INT 13
18228: PUSH
18229: LD_INT 14
18231: PUSH
18232: LD_INT 1
18234: PUSH
18235: LD_INT 2
18237: PUSH
18238: LD_INT 3
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: ST_TO_ADDR
18250: GO 18381
18252: LD_INT 1
18254: DOUBLE
18255: EQUAL
18256: IFTRUE 18260
18258: GO 18322
18260: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18261: LD_ADDR_VAR 0 3
18265: PUSH
18266: LD_INT 11
18268: PUSH
18269: LD_INT 12
18271: PUSH
18272: LD_INT 13
18274: PUSH
18275: LD_INT 14
18277: PUSH
18278: LD_INT 1
18280: PUSH
18281: LD_INT 2
18283: PUSH
18284: LD_INT 3
18286: PUSH
18287: LD_INT 4
18289: PUSH
18290: LD_INT 5
18292: PUSH
18293: LD_INT 21
18295: PUSH
18296: LD_INT 23
18298: PUSH
18299: LD_INT 22
18301: PUSH
18302: LD_INT 24
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: ST_TO_ADDR
18320: GO 18381
18322: LD_INT 3
18324: DOUBLE
18325: EQUAL
18326: IFTRUE 18330
18328: GO 18380
18330: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18331: LD_ADDR_VAR 0 3
18335: PUSH
18336: LD_INT 13
18338: PUSH
18339: LD_INT 14
18341: PUSH
18342: LD_INT 2
18344: PUSH
18345: LD_INT 3
18347: PUSH
18348: LD_INT 4
18350: PUSH
18351: LD_INT 5
18353: PUSH
18354: LD_INT 21
18356: PUSH
18357: LD_INT 22
18359: PUSH
18360: LD_INT 23
18362: PUSH
18363: LD_INT 24
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: ST_TO_ADDR
18378: GO 18381
18380: POP
// result := ( chassis in result ) ;
18381: LD_ADDR_VAR 0 3
18385: PUSH
18386: LD_VAR 0 1
18390: PUSH
18391: LD_VAR 0 3
18395: IN
18396: ST_TO_ADDR
// end ;
18397: LD_VAR 0 3
18401: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18402: LD_INT 0
18404: PPUSH
// if not chassis or not weapon then
18405: LD_VAR 0 1
18409: NOT
18410: PUSH
18411: LD_VAR 0 2
18415: NOT
18416: OR
18417: IFFALSE 18421
// exit ;
18419: GO 19483
// case weapon of us_machine_gun :
18421: LD_VAR 0 2
18425: PUSH
18426: LD_INT 2
18428: DOUBLE
18429: EQUAL
18430: IFTRUE 18434
18432: GO 18464
18434: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18435: LD_ADDR_VAR 0 3
18439: PUSH
18440: LD_INT 1
18442: PUSH
18443: LD_INT 2
18445: PUSH
18446: LD_INT 3
18448: PUSH
18449: LD_INT 4
18451: PUSH
18452: LD_INT 5
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: ST_TO_ADDR
18462: GO 19467
18464: LD_INT 3
18466: DOUBLE
18467: EQUAL
18468: IFTRUE 18472
18470: GO 18502
18472: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18473: LD_ADDR_VAR 0 3
18477: PUSH
18478: LD_INT 1
18480: PUSH
18481: LD_INT 2
18483: PUSH
18484: LD_INT 3
18486: PUSH
18487: LD_INT 4
18489: PUSH
18490: LD_INT 5
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: ST_TO_ADDR
18500: GO 19467
18502: LD_INT 11
18504: DOUBLE
18505: EQUAL
18506: IFTRUE 18510
18508: GO 18540
18510: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18511: LD_ADDR_VAR 0 3
18515: PUSH
18516: LD_INT 1
18518: PUSH
18519: LD_INT 2
18521: PUSH
18522: LD_INT 3
18524: PUSH
18525: LD_INT 4
18527: PUSH
18528: LD_INT 5
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: ST_TO_ADDR
18538: GO 19467
18540: LD_INT 4
18542: DOUBLE
18543: EQUAL
18544: IFTRUE 18548
18546: GO 18574
18548: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18549: LD_ADDR_VAR 0 3
18553: PUSH
18554: LD_INT 2
18556: PUSH
18557: LD_INT 3
18559: PUSH
18560: LD_INT 4
18562: PUSH
18563: LD_INT 5
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: ST_TO_ADDR
18572: GO 19467
18574: LD_INT 5
18576: DOUBLE
18577: EQUAL
18578: IFTRUE 18582
18580: GO 18608
18582: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18583: LD_ADDR_VAR 0 3
18587: PUSH
18588: LD_INT 2
18590: PUSH
18591: LD_INT 3
18593: PUSH
18594: LD_INT 4
18596: PUSH
18597: LD_INT 5
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: ST_TO_ADDR
18606: GO 19467
18608: LD_INT 9
18610: DOUBLE
18611: EQUAL
18612: IFTRUE 18616
18614: GO 18642
18616: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18617: LD_ADDR_VAR 0 3
18621: PUSH
18622: LD_INT 2
18624: PUSH
18625: LD_INT 3
18627: PUSH
18628: LD_INT 4
18630: PUSH
18631: LD_INT 5
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: ST_TO_ADDR
18640: GO 19467
18642: LD_INT 7
18644: DOUBLE
18645: EQUAL
18646: IFTRUE 18650
18648: GO 18676
18650: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
18651: LD_ADDR_VAR 0 3
18655: PUSH
18656: LD_INT 2
18658: PUSH
18659: LD_INT 3
18661: PUSH
18662: LD_INT 4
18664: PUSH
18665: LD_INT 5
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: ST_TO_ADDR
18674: GO 19467
18676: LD_INT 12
18678: DOUBLE
18679: EQUAL
18680: IFTRUE 18684
18682: GO 18710
18684: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
18685: LD_ADDR_VAR 0 3
18689: PUSH
18690: LD_INT 2
18692: PUSH
18693: LD_INT 3
18695: PUSH
18696: LD_INT 4
18698: PUSH
18699: LD_INT 5
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: ST_TO_ADDR
18708: GO 19467
18710: LD_INT 13
18712: DOUBLE
18713: EQUAL
18714: IFTRUE 18718
18716: GO 18744
18718: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
18719: LD_ADDR_VAR 0 3
18723: PUSH
18724: LD_INT 2
18726: PUSH
18727: LD_INT 3
18729: PUSH
18730: LD_INT 4
18732: PUSH
18733: LD_INT 5
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: ST_TO_ADDR
18742: GO 19467
18744: LD_INT 14
18746: DOUBLE
18747: EQUAL
18748: IFTRUE 18752
18750: GO 18770
18752: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
18753: LD_ADDR_VAR 0 3
18757: PUSH
18758: LD_INT 4
18760: PUSH
18761: LD_INT 5
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: ST_TO_ADDR
18768: GO 19467
18770: LD_INT 6
18772: DOUBLE
18773: EQUAL
18774: IFTRUE 18778
18776: GO 18796
18778: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
18779: LD_ADDR_VAR 0 3
18783: PUSH
18784: LD_INT 4
18786: PUSH
18787: LD_INT 5
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: ST_TO_ADDR
18794: GO 19467
18796: LD_INT 10
18798: DOUBLE
18799: EQUAL
18800: IFTRUE 18804
18802: GO 18822
18804: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
18805: LD_ADDR_VAR 0 3
18809: PUSH
18810: LD_INT 4
18812: PUSH
18813: LD_INT 5
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: ST_TO_ADDR
18820: GO 19467
18822: LD_INT 22
18824: DOUBLE
18825: EQUAL
18826: IFTRUE 18830
18828: GO 18856
18830: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
18831: LD_ADDR_VAR 0 3
18835: PUSH
18836: LD_INT 11
18838: PUSH
18839: LD_INT 12
18841: PUSH
18842: LD_INT 13
18844: PUSH
18845: LD_INT 14
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: ST_TO_ADDR
18854: GO 19467
18856: LD_INT 23
18858: DOUBLE
18859: EQUAL
18860: IFTRUE 18864
18862: GO 18890
18864: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
18865: LD_ADDR_VAR 0 3
18869: PUSH
18870: LD_INT 11
18872: PUSH
18873: LD_INT 12
18875: PUSH
18876: LD_INT 13
18878: PUSH
18879: LD_INT 14
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: ST_TO_ADDR
18888: GO 19467
18890: LD_INT 24
18892: DOUBLE
18893: EQUAL
18894: IFTRUE 18898
18896: GO 18924
18898: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
18899: LD_ADDR_VAR 0 3
18903: PUSH
18904: LD_INT 11
18906: PUSH
18907: LD_INT 12
18909: PUSH
18910: LD_INT 13
18912: PUSH
18913: LD_INT 14
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: ST_TO_ADDR
18922: GO 19467
18924: LD_INT 30
18926: DOUBLE
18927: EQUAL
18928: IFTRUE 18932
18930: GO 18958
18932: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
18933: LD_ADDR_VAR 0 3
18937: PUSH
18938: LD_INT 11
18940: PUSH
18941: LD_INT 12
18943: PUSH
18944: LD_INT 13
18946: PUSH
18947: LD_INT 14
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: ST_TO_ADDR
18956: GO 19467
18958: LD_INT 25
18960: DOUBLE
18961: EQUAL
18962: IFTRUE 18966
18964: GO 18984
18966: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
18967: LD_ADDR_VAR 0 3
18971: PUSH
18972: LD_INT 13
18974: PUSH
18975: LD_INT 14
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: ST_TO_ADDR
18982: GO 19467
18984: LD_INT 27
18986: DOUBLE
18987: EQUAL
18988: IFTRUE 18992
18990: GO 19010
18992: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
18993: LD_ADDR_VAR 0 3
18997: PUSH
18998: LD_INT 13
19000: PUSH
19001: LD_INT 14
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: ST_TO_ADDR
19008: GO 19467
19010: LD_EXP 106
19014: DOUBLE
19015: EQUAL
19016: IFTRUE 19020
19018: GO 19046
19020: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19021: LD_ADDR_VAR 0 3
19025: PUSH
19026: LD_INT 11
19028: PUSH
19029: LD_INT 12
19031: PUSH
19032: LD_INT 13
19034: PUSH
19035: LD_INT 14
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: ST_TO_ADDR
19044: GO 19467
19046: LD_INT 28
19048: DOUBLE
19049: EQUAL
19050: IFTRUE 19054
19052: GO 19072
19054: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19055: LD_ADDR_VAR 0 3
19059: PUSH
19060: LD_INT 13
19062: PUSH
19063: LD_INT 14
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: ST_TO_ADDR
19070: GO 19467
19072: LD_INT 29
19074: DOUBLE
19075: EQUAL
19076: IFTRUE 19080
19078: GO 19098
19080: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19081: LD_ADDR_VAR 0 3
19085: PUSH
19086: LD_INT 13
19088: PUSH
19089: LD_INT 14
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: ST_TO_ADDR
19096: GO 19467
19098: LD_INT 31
19100: DOUBLE
19101: EQUAL
19102: IFTRUE 19106
19104: GO 19124
19106: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19107: LD_ADDR_VAR 0 3
19111: PUSH
19112: LD_INT 13
19114: PUSH
19115: LD_INT 14
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: ST_TO_ADDR
19122: GO 19467
19124: LD_INT 26
19126: DOUBLE
19127: EQUAL
19128: IFTRUE 19132
19130: GO 19150
19132: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19133: LD_ADDR_VAR 0 3
19137: PUSH
19138: LD_INT 13
19140: PUSH
19141: LD_INT 14
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: ST_TO_ADDR
19148: GO 19467
19150: LD_INT 42
19152: DOUBLE
19153: EQUAL
19154: IFTRUE 19158
19156: GO 19184
19158: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19159: LD_ADDR_VAR 0 3
19163: PUSH
19164: LD_INT 21
19166: PUSH
19167: LD_INT 22
19169: PUSH
19170: LD_INT 23
19172: PUSH
19173: LD_INT 24
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: ST_TO_ADDR
19182: GO 19467
19184: LD_INT 43
19186: DOUBLE
19187: EQUAL
19188: IFTRUE 19192
19190: GO 19218
19192: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19193: LD_ADDR_VAR 0 3
19197: PUSH
19198: LD_INT 21
19200: PUSH
19201: LD_INT 22
19203: PUSH
19204: LD_INT 23
19206: PUSH
19207: LD_INT 24
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: ST_TO_ADDR
19216: GO 19467
19218: LD_INT 44
19220: DOUBLE
19221: EQUAL
19222: IFTRUE 19226
19224: GO 19252
19226: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19227: LD_ADDR_VAR 0 3
19231: PUSH
19232: LD_INT 21
19234: PUSH
19235: LD_INT 22
19237: PUSH
19238: LD_INT 23
19240: PUSH
19241: LD_INT 24
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: ST_TO_ADDR
19250: GO 19467
19252: LD_INT 45
19254: DOUBLE
19255: EQUAL
19256: IFTRUE 19260
19258: GO 19286
19260: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19261: LD_ADDR_VAR 0 3
19265: PUSH
19266: LD_INT 21
19268: PUSH
19269: LD_INT 22
19271: PUSH
19272: LD_INT 23
19274: PUSH
19275: LD_INT 24
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: ST_TO_ADDR
19284: GO 19467
19286: LD_INT 49
19288: DOUBLE
19289: EQUAL
19290: IFTRUE 19294
19292: GO 19320
19294: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19295: LD_ADDR_VAR 0 3
19299: PUSH
19300: LD_INT 21
19302: PUSH
19303: LD_INT 22
19305: PUSH
19306: LD_INT 23
19308: PUSH
19309: LD_INT 24
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: ST_TO_ADDR
19318: GO 19467
19320: LD_INT 51
19322: DOUBLE
19323: EQUAL
19324: IFTRUE 19328
19326: GO 19354
19328: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19329: LD_ADDR_VAR 0 3
19333: PUSH
19334: LD_INT 21
19336: PUSH
19337: LD_INT 22
19339: PUSH
19340: LD_INT 23
19342: PUSH
19343: LD_INT 24
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: ST_TO_ADDR
19352: GO 19467
19354: LD_INT 52
19356: DOUBLE
19357: EQUAL
19358: IFTRUE 19362
19360: GO 19388
19362: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19363: LD_ADDR_VAR 0 3
19367: PUSH
19368: LD_INT 21
19370: PUSH
19371: LD_INT 22
19373: PUSH
19374: LD_INT 23
19376: PUSH
19377: LD_INT 24
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: ST_TO_ADDR
19386: GO 19467
19388: LD_INT 53
19390: DOUBLE
19391: EQUAL
19392: IFTRUE 19396
19394: GO 19414
19396: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19397: LD_ADDR_VAR 0 3
19401: PUSH
19402: LD_INT 23
19404: PUSH
19405: LD_INT 24
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: ST_TO_ADDR
19412: GO 19467
19414: LD_INT 46
19416: DOUBLE
19417: EQUAL
19418: IFTRUE 19422
19420: GO 19440
19422: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19423: LD_ADDR_VAR 0 3
19427: PUSH
19428: LD_INT 23
19430: PUSH
19431: LD_INT 24
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: ST_TO_ADDR
19438: GO 19467
19440: LD_INT 47
19442: DOUBLE
19443: EQUAL
19444: IFTRUE 19448
19446: GO 19466
19448: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19449: LD_ADDR_VAR 0 3
19453: PUSH
19454: LD_INT 23
19456: PUSH
19457: LD_INT 24
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: ST_TO_ADDR
19464: GO 19467
19466: POP
// result := ( chassis in result ) ;
19467: LD_ADDR_VAR 0 3
19471: PUSH
19472: LD_VAR 0 1
19476: PUSH
19477: LD_VAR 0 3
19481: IN
19482: ST_TO_ADDR
// end ;
19483: LD_VAR 0 3
19487: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19488: LD_INT 0
19490: PPUSH
19491: PPUSH
19492: PPUSH
19493: PPUSH
19494: PPUSH
19495: PPUSH
19496: PPUSH
// result := array ;
19497: LD_ADDR_VAR 0 5
19501: PUSH
19502: LD_VAR 0 1
19506: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19507: LD_VAR 0 1
19511: NOT
19512: PUSH
19513: LD_VAR 0 2
19517: NOT
19518: OR
19519: PUSH
19520: LD_VAR 0 3
19524: NOT
19525: OR
19526: PUSH
19527: LD_VAR 0 2
19531: PUSH
19532: LD_VAR 0 1
19536: GREATER
19537: OR
19538: PUSH
19539: LD_VAR 0 3
19543: PUSH
19544: LD_VAR 0 1
19548: GREATER
19549: OR
19550: IFFALSE 19554
// exit ;
19552: GO 19850
// if direction then
19554: LD_VAR 0 4
19558: IFFALSE 19622
// begin d := 1 ;
19560: LD_ADDR_VAR 0 9
19564: PUSH
19565: LD_INT 1
19567: ST_TO_ADDR
// if i_from > i_to then
19568: LD_VAR 0 2
19572: PUSH
19573: LD_VAR 0 3
19577: GREATER
19578: IFFALSE 19604
// length := ( array - i_from ) + i_to else
19580: LD_ADDR_VAR 0 11
19584: PUSH
19585: LD_VAR 0 1
19589: PUSH
19590: LD_VAR 0 2
19594: MINUS
19595: PUSH
19596: LD_VAR 0 3
19600: PLUS
19601: ST_TO_ADDR
19602: GO 19620
// length := i_to - i_from ;
19604: LD_ADDR_VAR 0 11
19608: PUSH
19609: LD_VAR 0 3
19613: PUSH
19614: LD_VAR 0 2
19618: MINUS
19619: ST_TO_ADDR
// end else
19620: GO 19683
// begin d := - 1 ;
19622: LD_ADDR_VAR 0 9
19626: PUSH
19627: LD_INT 1
19629: NEG
19630: ST_TO_ADDR
// if i_from > i_to then
19631: LD_VAR 0 2
19635: PUSH
19636: LD_VAR 0 3
19640: GREATER
19641: IFFALSE 19661
// length := i_from - i_to else
19643: LD_ADDR_VAR 0 11
19647: PUSH
19648: LD_VAR 0 2
19652: PUSH
19653: LD_VAR 0 3
19657: MINUS
19658: ST_TO_ADDR
19659: GO 19683
// length := ( array - i_to ) + i_from ;
19661: LD_ADDR_VAR 0 11
19665: PUSH
19666: LD_VAR 0 1
19670: PUSH
19671: LD_VAR 0 3
19675: MINUS
19676: PUSH
19677: LD_VAR 0 2
19681: PLUS
19682: ST_TO_ADDR
// end ; if not length then
19683: LD_VAR 0 11
19687: NOT
19688: IFFALSE 19692
// exit ;
19690: GO 19850
// tmp := array ;
19692: LD_ADDR_VAR 0 10
19696: PUSH
19697: LD_VAR 0 1
19701: ST_TO_ADDR
// for i = 1 to length do
19702: LD_ADDR_VAR 0 6
19706: PUSH
19707: DOUBLE
19708: LD_INT 1
19710: DEC
19711: ST_TO_ADDR
19712: LD_VAR 0 11
19716: PUSH
19717: FOR_TO
19718: IFFALSE 19838
// begin for j = 1 to array do
19720: LD_ADDR_VAR 0 7
19724: PUSH
19725: DOUBLE
19726: LD_INT 1
19728: DEC
19729: ST_TO_ADDR
19730: LD_VAR 0 1
19734: PUSH
19735: FOR_TO
19736: IFFALSE 19824
// begin k := j + d ;
19738: LD_ADDR_VAR 0 8
19742: PUSH
19743: LD_VAR 0 7
19747: PUSH
19748: LD_VAR 0 9
19752: PLUS
19753: ST_TO_ADDR
// if k > array then
19754: LD_VAR 0 8
19758: PUSH
19759: LD_VAR 0 1
19763: GREATER
19764: IFFALSE 19774
// k := 1 ;
19766: LD_ADDR_VAR 0 8
19770: PUSH
19771: LD_INT 1
19773: ST_TO_ADDR
// if not k then
19774: LD_VAR 0 8
19778: NOT
19779: IFFALSE 19791
// k := array ;
19781: LD_ADDR_VAR 0 8
19785: PUSH
19786: LD_VAR 0 1
19790: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
19791: LD_ADDR_VAR 0 10
19795: PUSH
19796: LD_VAR 0 10
19800: PPUSH
19801: LD_VAR 0 8
19805: PPUSH
19806: LD_VAR 0 1
19810: PUSH
19811: LD_VAR 0 7
19815: ARRAY
19816: PPUSH
19817: CALL_OW 1
19821: ST_TO_ADDR
// end ;
19822: GO 19735
19824: POP
19825: POP
// array := tmp ;
19826: LD_ADDR_VAR 0 1
19830: PUSH
19831: LD_VAR 0 10
19835: ST_TO_ADDR
// end ;
19836: GO 19717
19838: POP
19839: POP
// result := array ;
19840: LD_ADDR_VAR 0 5
19844: PUSH
19845: LD_VAR 0 1
19849: ST_TO_ADDR
// end ;
19850: LD_VAR 0 5
19854: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
19855: LD_INT 0
19857: PPUSH
19858: PPUSH
// result := 0 ;
19859: LD_ADDR_VAR 0 3
19863: PUSH
19864: LD_INT 0
19866: ST_TO_ADDR
// if not array or not value in array then
19867: LD_VAR 0 1
19871: NOT
19872: PUSH
19873: LD_VAR 0 2
19877: PUSH
19878: LD_VAR 0 1
19882: IN
19883: NOT
19884: OR
19885: IFFALSE 19889
// exit ;
19887: GO 19943
// for i = 1 to array do
19889: LD_ADDR_VAR 0 4
19893: PUSH
19894: DOUBLE
19895: LD_INT 1
19897: DEC
19898: ST_TO_ADDR
19899: LD_VAR 0 1
19903: PUSH
19904: FOR_TO
19905: IFFALSE 19941
// if value = array [ i ] then
19907: LD_VAR 0 2
19911: PUSH
19912: LD_VAR 0 1
19916: PUSH
19917: LD_VAR 0 4
19921: ARRAY
19922: EQUAL
19923: IFFALSE 19939
// begin result := i ;
19925: LD_ADDR_VAR 0 3
19929: PUSH
19930: LD_VAR 0 4
19934: ST_TO_ADDR
// exit ;
19935: POP
19936: POP
19937: GO 19943
// end ;
19939: GO 19904
19941: POP
19942: POP
// end ;
19943: LD_VAR 0 3
19947: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
19948: LD_INT 0
19950: PPUSH
// vc_chassis := chassis ;
19951: LD_ADDR_OWVAR 37
19955: PUSH
19956: LD_VAR 0 1
19960: ST_TO_ADDR
// vc_engine := engine ;
19961: LD_ADDR_OWVAR 39
19965: PUSH
19966: LD_VAR 0 2
19970: ST_TO_ADDR
// vc_control := control ;
19971: LD_ADDR_OWVAR 38
19975: PUSH
19976: LD_VAR 0 3
19980: ST_TO_ADDR
// vc_weapon := weapon ;
19981: LD_ADDR_OWVAR 40
19985: PUSH
19986: LD_VAR 0 4
19990: ST_TO_ADDR
// vc_fuel_battery := fuel ;
19991: LD_ADDR_OWVAR 41
19995: PUSH
19996: LD_VAR 0 5
20000: ST_TO_ADDR
// end ;
20001: LD_VAR 0 6
20005: RET
// export function WantPlant ( unit ) ; var task ; begin
20006: LD_INT 0
20008: PPUSH
20009: PPUSH
// result := false ;
20010: LD_ADDR_VAR 0 2
20014: PUSH
20015: LD_INT 0
20017: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20018: LD_ADDR_VAR 0 3
20022: PUSH
20023: LD_VAR 0 1
20027: PPUSH
20028: CALL_OW 437
20032: ST_TO_ADDR
// if task then
20033: LD_VAR 0 3
20037: IFFALSE 20065
// if task [ 1 ] [ 1 ] = p then
20039: LD_VAR 0 3
20043: PUSH
20044: LD_INT 1
20046: ARRAY
20047: PUSH
20048: LD_INT 1
20050: ARRAY
20051: PUSH
20052: LD_STRING p
20054: EQUAL
20055: IFFALSE 20065
// result := true ;
20057: LD_ADDR_VAR 0 2
20061: PUSH
20062: LD_INT 1
20064: ST_TO_ADDR
// end ;
20065: LD_VAR 0 2
20069: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20070: LD_INT 0
20072: PPUSH
20073: PPUSH
20074: PPUSH
20075: PPUSH
// if pos < 1 then
20076: LD_VAR 0 2
20080: PUSH
20081: LD_INT 1
20083: LESS
20084: IFFALSE 20088
// exit ;
20086: GO 20391
// if pos = 1 then
20088: LD_VAR 0 2
20092: PUSH
20093: LD_INT 1
20095: EQUAL
20096: IFFALSE 20129
// result := Replace ( arr , pos [ 1 ] , value ) else
20098: LD_ADDR_VAR 0 4
20102: PUSH
20103: LD_VAR 0 1
20107: PPUSH
20108: LD_VAR 0 2
20112: PUSH
20113: LD_INT 1
20115: ARRAY
20116: PPUSH
20117: LD_VAR 0 3
20121: PPUSH
20122: CALL_OW 1
20126: ST_TO_ADDR
20127: GO 20391
// begin tmp := arr ;
20129: LD_ADDR_VAR 0 6
20133: PUSH
20134: LD_VAR 0 1
20138: ST_TO_ADDR
// s_arr := [ tmp ] ;
20139: LD_ADDR_VAR 0 7
20143: PUSH
20144: LD_VAR 0 6
20148: PUSH
20149: EMPTY
20150: LIST
20151: ST_TO_ADDR
// for i = 1 to pos - 1 do
20152: LD_ADDR_VAR 0 5
20156: PUSH
20157: DOUBLE
20158: LD_INT 1
20160: DEC
20161: ST_TO_ADDR
20162: LD_VAR 0 2
20166: PUSH
20167: LD_INT 1
20169: MINUS
20170: PUSH
20171: FOR_TO
20172: IFFALSE 20217
// begin tmp := tmp [ pos [ i ] ] ;
20174: LD_ADDR_VAR 0 6
20178: PUSH
20179: LD_VAR 0 6
20183: PUSH
20184: LD_VAR 0 2
20188: PUSH
20189: LD_VAR 0 5
20193: ARRAY
20194: ARRAY
20195: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20196: LD_ADDR_VAR 0 7
20200: PUSH
20201: LD_VAR 0 7
20205: PUSH
20206: LD_VAR 0 6
20210: PUSH
20211: EMPTY
20212: LIST
20213: ADD
20214: ST_TO_ADDR
// end ;
20215: GO 20171
20217: POP
20218: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20219: LD_ADDR_VAR 0 6
20223: PUSH
20224: LD_VAR 0 6
20228: PPUSH
20229: LD_VAR 0 2
20233: PUSH
20234: LD_VAR 0 2
20238: ARRAY
20239: PPUSH
20240: LD_VAR 0 3
20244: PPUSH
20245: CALL_OW 1
20249: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20250: LD_ADDR_VAR 0 7
20254: PUSH
20255: LD_VAR 0 7
20259: PPUSH
20260: LD_VAR 0 7
20264: PPUSH
20265: LD_VAR 0 6
20269: PPUSH
20270: CALL_OW 1
20274: ST_TO_ADDR
// for i = s_arr downto 2 do
20275: LD_ADDR_VAR 0 5
20279: PUSH
20280: DOUBLE
20281: LD_VAR 0 7
20285: INC
20286: ST_TO_ADDR
20287: LD_INT 2
20289: PUSH
20290: FOR_DOWNTO
20291: IFFALSE 20375
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20293: LD_ADDR_VAR 0 6
20297: PUSH
20298: LD_VAR 0 7
20302: PUSH
20303: LD_VAR 0 5
20307: PUSH
20308: LD_INT 1
20310: MINUS
20311: ARRAY
20312: PPUSH
20313: LD_VAR 0 2
20317: PUSH
20318: LD_VAR 0 5
20322: PUSH
20323: LD_INT 1
20325: MINUS
20326: ARRAY
20327: PPUSH
20328: LD_VAR 0 7
20332: PUSH
20333: LD_VAR 0 5
20337: ARRAY
20338: PPUSH
20339: CALL_OW 1
20343: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20344: LD_ADDR_VAR 0 7
20348: PUSH
20349: LD_VAR 0 7
20353: PPUSH
20354: LD_VAR 0 5
20358: PUSH
20359: LD_INT 1
20361: MINUS
20362: PPUSH
20363: LD_VAR 0 6
20367: PPUSH
20368: CALL_OW 1
20372: ST_TO_ADDR
// end ;
20373: GO 20290
20375: POP
20376: POP
// result := s_arr [ 1 ] ;
20377: LD_ADDR_VAR 0 4
20381: PUSH
20382: LD_VAR 0 7
20386: PUSH
20387: LD_INT 1
20389: ARRAY
20390: ST_TO_ADDR
// end ; end ;
20391: LD_VAR 0 4
20395: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20396: LD_INT 0
20398: PPUSH
20399: PPUSH
// if not list then
20400: LD_VAR 0 1
20404: NOT
20405: IFFALSE 20409
// exit ;
20407: GO 20500
// i := list [ pos1 ] ;
20409: LD_ADDR_VAR 0 5
20413: PUSH
20414: LD_VAR 0 1
20418: PUSH
20419: LD_VAR 0 2
20423: ARRAY
20424: ST_TO_ADDR
// if not i then
20425: LD_VAR 0 5
20429: NOT
20430: IFFALSE 20434
// exit ;
20432: GO 20500
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20434: LD_ADDR_VAR 0 1
20438: PUSH
20439: LD_VAR 0 1
20443: PPUSH
20444: LD_VAR 0 2
20448: PPUSH
20449: LD_VAR 0 1
20453: PUSH
20454: LD_VAR 0 3
20458: ARRAY
20459: PPUSH
20460: CALL_OW 1
20464: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20465: LD_ADDR_VAR 0 1
20469: PUSH
20470: LD_VAR 0 1
20474: PPUSH
20475: LD_VAR 0 3
20479: PPUSH
20480: LD_VAR 0 5
20484: PPUSH
20485: CALL_OW 1
20489: ST_TO_ADDR
// result := list ;
20490: LD_ADDR_VAR 0 4
20494: PUSH
20495: LD_VAR 0 1
20499: ST_TO_ADDR
// end ;
20500: LD_VAR 0 4
20504: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20505: LD_INT 0
20507: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20508: LD_ADDR_VAR 0 5
20512: PUSH
20513: LD_VAR 0 1
20517: PPUSH
20518: CALL_OW 250
20522: PPUSH
20523: LD_VAR 0 1
20527: PPUSH
20528: CALL_OW 251
20532: PPUSH
20533: LD_VAR 0 2
20537: PPUSH
20538: LD_VAR 0 3
20542: PPUSH
20543: LD_VAR 0 4
20547: PPUSH
20548: CALL 20558 0 5
20552: ST_TO_ADDR
// end ;
20553: LD_VAR 0 5
20557: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
20558: LD_INT 0
20560: PPUSH
20561: PPUSH
20562: PPUSH
20563: PPUSH
// if not list then
20564: LD_VAR 0 3
20568: NOT
20569: IFFALSE 20573
// exit ;
20571: GO 20961
// result := [ ] ;
20573: LD_ADDR_VAR 0 6
20577: PUSH
20578: EMPTY
20579: ST_TO_ADDR
// for i in list do
20580: LD_ADDR_VAR 0 7
20584: PUSH
20585: LD_VAR 0 3
20589: PUSH
20590: FOR_IN
20591: IFFALSE 20793
// begin tmp := GetDistUnitXY ( i , x , y ) ;
20593: LD_ADDR_VAR 0 9
20597: PUSH
20598: LD_VAR 0 7
20602: PPUSH
20603: LD_VAR 0 1
20607: PPUSH
20608: LD_VAR 0 2
20612: PPUSH
20613: CALL_OW 297
20617: ST_TO_ADDR
// if not result then
20618: LD_VAR 0 6
20622: NOT
20623: IFFALSE 20649
// result := [ [ i , tmp ] ] else
20625: LD_ADDR_VAR 0 6
20629: PUSH
20630: LD_VAR 0 7
20634: PUSH
20635: LD_VAR 0 9
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: PUSH
20644: EMPTY
20645: LIST
20646: ST_TO_ADDR
20647: GO 20791
// begin if result [ result ] [ 2 ] < tmp then
20649: LD_VAR 0 6
20653: PUSH
20654: LD_VAR 0 6
20658: ARRAY
20659: PUSH
20660: LD_INT 2
20662: ARRAY
20663: PUSH
20664: LD_VAR 0 9
20668: LESS
20669: IFFALSE 20711
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
20671: LD_ADDR_VAR 0 6
20675: PUSH
20676: LD_VAR 0 6
20680: PPUSH
20681: LD_VAR 0 6
20685: PUSH
20686: LD_INT 1
20688: PLUS
20689: PPUSH
20690: LD_VAR 0 7
20694: PUSH
20695: LD_VAR 0 9
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PPUSH
20704: CALL_OW 2
20708: ST_TO_ADDR
20709: GO 20791
// for j = 1 to result do
20711: LD_ADDR_VAR 0 8
20715: PUSH
20716: DOUBLE
20717: LD_INT 1
20719: DEC
20720: ST_TO_ADDR
20721: LD_VAR 0 6
20725: PUSH
20726: FOR_TO
20727: IFFALSE 20789
// begin if tmp < result [ j ] [ 2 ] then
20729: LD_VAR 0 9
20733: PUSH
20734: LD_VAR 0 6
20738: PUSH
20739: LD_VAR 0 8
20743: ARRAY
20744: PUSH
20745: LD_INT 2
20747: ARRAY
20748: LESS
20749: IFFALSE 20787
// begin result := Insert ( result , j , [ i , tmp ] ) ;
20751: LD_ADDR_VAR 0 6
20755: PUSH
20756: LD_VAR 0 6
20760: PPUSH
20761: LD_VAR 0 8
20765: PPUSH
20766: LD_VAR 0 7
20770: PUSH
20771: LD_VAR 0 9
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: PPUSH
20780: CALL_OW 2
20784: ST_TO_ADDR
// break ;
20785: GO 20789
// end ; end ;
20787: GO 20726
20789: POP
20790: POP
// end ; end ;
20791: GO 20590
20793: POP
20794: POP
// if result and not asc then
20795: LD_VAR 0 6
20799: PUSH
20800: LD_VAR 0 4
20804: NOT
20805: AND
20806: IFFALSE 20881
// begin tmp := result ;
20808: LD_ADDR_VAR 0 9
20812: PUSH
20813: LD_VAR 0 6
20817: ST_TO_ADDR
// for i = tmp downto 1 do
20818: LD_ADDR_VAR 0 7
20822: PUSH
20823: DOUBLE
20824: LD_VAR 0 9
20828: INC
20829: ST_TO_ADDR
20830: LD_INT 1
20832: PUSH
20833: FOR_DOWNTO
20834: IFFALSE 20879
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
20836: LD_ADDR_VAR 0 6
20840: PUSH
20841: LD_VAR 0 6
20845: PPUSH
20846: LD_VAR 0 9
20850: PUSH
20851: LD_VAR 0 7
20855: MINUS
20856: PUSH
20857: LD_INT 1
20859: PLUS
20860: PPUSH
20861: LD_VAR 0 9
20865: PUSH
20866: LD_VAR 0 7
20870: ARRAY
20871: PPUSH
20872: CALL_OW 1
20876: ST_TO_ADDR
20877: GO 20833
20879: POP
20880: POP
// end ; tmp := [ ] ;
20881: LD_ADDR_VAR 0 9
20885: PUSH
20886: EMPTY
20887: ST_TO_ADDR
// if mode then
20888: LD_VAR 0 5
20892: IFFALSE 20961
// begin for i = 1 to result do
20894: LD_ADDR_VAR 0 7
20898: PUSH
20899: DOUBLE
20900: LD_INT 1
20902: DEC
20903: ST_TO_ADDR
20904: LD_VAR 0 6
20908: PUSH
20909: FOR_TO
20910: IFFALSE 20949
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
20912: LD_ADDR_VAR 0 9
20916: PUSH
20917: LD_VAR 0 9
20921: PPUSH
20922: LD_VAR 0 7
20926: PPUSH
20927: LD_VAR 0 6
20931: PUSH
20932: LD_VAR 0 7
20936: ARRAY
20937: PUSH
20938: LD_INT 1
20940: ARRAY
20941: PPUSH
20942: CALL_OW 1
20946: ST_TO_ADDR
20947: GO 20909
20949: POP
20950: POP
// result := tmp ;
20951: LD_ADDR_VAR 0 6
20955: PUSH
20956: LD_VAR 0 9
20960: ST_TO_ADDR
// end ; end ;
20961: LD_VAR 0 6
20965: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
20966: LD_INT 0
20968: PPUSH
20969: PPUSH
20970: PPUSH
20971: PPUSH
20972: PPUSH
20973: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
20974: LD_ADDR_VAR 0 5
20978: PUSH
20979: LD_INT 0
20981: PUSH
20982: LD_INT 0
20984: PUSH
20985: LD_INT 0
20987: PUSH
20988: EMPTY
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: ST_TO_ADDR
// if not x or not y then
20996: LD_VAR 0 2
21000: NOT
21001: PUSH
21002: LD_VAR 0 3
21006: NOT
21007: OR
21008: IFFALSE 21012
// exit ;
21010: GO 22664
// if not range then
21012: LD_VAR 0 4
21016: NOT
21017: IFFALSE 21027
// range := 10 ;
21019: LD_ADDR_VAR 0 4
21023: PUSH
21024: LD_INT 10
21026: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21027: LD_ADDR_VAR 0 8
21031: PUSH
21032: LD_INT 81
21034: PUSH
21035: LD_VAR 0 1
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 92
21046: PUSH
21047: LD_VAR 0 2
21051: PUSH
21052: LD_VAR 0 3
21056: PUSH
21057: LD_VAR 0 4
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: PUSH
21068: LD_INT 3
21070: PUSH
21071: LD_INT 21
21073: PUSH
21074: LD_INT 3
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: LIST
21089: PPUSH
21090: CALL_OW 69
21094: ST_TO_ADDR
// if not tmp then
21095: LD_VAR 0 8
21099: NOT
21100: IFFALSE 21104
// exit ;
21102: GO 22664
// for i in tmp do
21104: LD_ADDR_VAR 0 6
21108: PUSH
21109: LD_VAR 0 8
21113: PUSH
21114: FOR_IN
21115: IFFALSE 22639
// begin points := [ 0 , 0 , 0 ] ;
21117: LD_ADDR_VAR 0 9
21121: PUSH
21122: LD_INT 0
21124: PUSH
21125: LD_INT 0
21127: PUSH
21128: LD_INT 0
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: LIST
21135: ST_TO_ADDR
// bpoints := 1 ;
21136: LD_ADDR_VAR 0 10
21140: PUSH
21141: LD_INT 1
21143: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21144: LD_VAR 0 6
21148: PPUSH
21149: CALL_OW 247
21153: PUSH
21154: LD_INT 1
21156: DOUBLE
21157: EQUAL
21158: IFTRUE 21162
21160: GO 21740
21162: POP
// begin if GetClass ( i ) = 1 then
21163: LD_VAR 0 6
21167: PPUSH
21168: CALL_OW 257
21172: PUSH
21173: LD_INT 1
21175: EQUAL
21176: IFFALSE 21197
// points := [ 10 , 5 , 3 ] ;
21178: LD_ADDR_VAR 0 9
21182: PUSH
21183: LD_INT 10
21185: PUSH
21186: LD_INT 5
21188: PUSH
21189: LD_INT 3
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: LIST
21196: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21197: LD_VAR 0 6
21201: PPUSH
21202: CALL_OW 257
21206: PUSH
21207: LD_INT 2
21209: PUSH
21210: LD_INT 3
21212: PUSH
21213: LD_INT 4
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: LIST
21220: IN
21221: IFFALSE 21242
// points := [ 3 , 2 , 1 ] ;
21223: LD_ADDR_VAR 0 9
21227: PUSH
21228: LD_INT 3
21230: PUSH
21231: LD_INT 2
21233: PUSH
21234: LD_INT 1
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: LIST
21241: ST_TO_ADDR
// if GetClass ( i ) = 5 then
21242: LD_VAR 0 6
21246: PPUSH
21247: CALL_OW 257
21251: PUSH
21252: LD_INT 5
21254: EQUAL
21255: IFFALSE 21276
// points := [ 130 , 5 , 2 ] ;
21257: LD_ADDR_VAR 0 9
21261: PUSH
21262: LD_INT 130
21264: PUSH
21265: LD_INT 5
21267: PUSH
21268: LD_INT 2
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: LIST
21275: ST_TO_ADDR
// if GetClass ( i ) = 8 then
21276: LD_VAR 0 6
21280: PPUSH
21281: CALL_OW 257
21285: PUSH
21286: LD_INT 8
21288: EQUAL
21289: IFFALSE 21310
// points := [ 35 , 35 , 30 ] ;
21291: LD_ADDR_VAR 0 9
21295: PUSH
21296: LD_INT 35
21298: PUSH
21299: LD_INT 35
21301: PUSH
21302: LD_INT 30
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: LIST
21309: ST_TO_ADDR
// if GetClass ( i ) = 9 then
21310: LD_VAR 0 6
21314: PPUSH
21315: CALL_OW 257
21319: PUSH
21320: LD_INT 9
21322: EQUAL
21323: IFFALSE 21344
// points := [ 20 , 55 , 40 ] ;
21325: LD_ADDR_VAR 0 9
21329: PUSH
21330: LD_INT 20
21332: PUSH
21333: LD_INT 55
21335: PUSH
21336: LD_INT 40
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: LIST
21343: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
21344: LD_VAR 0 6
21348: PPUSH
21349: CALL_OW 257
21353: PUSH
21354: LD_INT 12
21356: PUSH
21357: LD_INT 16
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: IN
21364: IFFALSE 21385
// points := [ 5 , 3 , 2 ] ;
21366: LD_ADDR_VAR 0 9
21370: PUSH
21371: LD_INT 5
21373: PUSH
21374: LD_INT 3
21376: PUSH
21377: LD_INT 2
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: LIST
21384: ST_TO_ADDR
// if GetClass ( i ) = 17 then
21385: LD_VAR 0 6
21389: PPUSH
21390: CALL_OW 257
21394: PUSH
21395: LD_INT 17
21397: EQUAL
21398: IFFALSE 21419
// points := [ 100 , 50 , 75 ] ;
21400: LD_ADDR_VAR 0 9
21404: PUSH
21405: LD_INT 100
21407: PUSH
21408: LD_INT 50
21410: PUSH
21411: LD_INT 75
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: LIST
21418: ST_TO_ADDR
// if GetClass ( i ) = 15 then
21419: LD_VAR 0 6
21423: PPUSH
21424: CALL_OW 257
21428: PUSH
21429: LD_INT 15
21431: EQUAL
21432: IFFALSE 21453
// points := [ 10 , 5 , 3 ] ;
21434: LD_ADDR_VAR 0 9
21438: PUSH
21439: LD_INT 10
21441: PUSH
21442: LD_INT 5
21444: PUSH
21445: LD_INT 3
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: LIST
21452: ST_TO_ADDR
// if GetClass ( i ) = 14 then
21453: LD_VAR 0 6
21457: PPUSH
21458: CALL_OW 257
21462: PUSH
21463: LD_INT 14
21465: EQUAL
21466: IFFALSE 21487
// points := [ 10 , 0 , 0 ] ;
21468: LD_ADDR_VAR 0 9
21472: PUSH
21473: LD_INT 10
21475: PUSH
21476: LD_INT 0
21478: PUSH
21479: LD_INT 0
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: LIST
21486: ST_TO_ADDR
// if GetClass ( i ) = 11 then
21487: LD_VAR 0 6
21491: PPUSH
21492: CALL_OW 257
21496: PUSH
21497: LD_INT 11
21499: EQUAL
21500: IFFALSE 21521
// points := [ 30 , 10 , 5 ] ;
21502: LD_ADDR_VAR 0 9
21506: PUSH
21507: LD_INT 30
21509: PUSH
21510: LD_INT 10
21512: PUSH
21513: LD_INT 5
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: LIST
21520: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
21521: LD_VAR 0 1
21525: PPUSH
21526: LD_INT 5
21528: PPUSH
21529: CALL_OW 321
21533: PUSH
21534: LD_INT 2
21536: EQUAL
21537: IFFALSE 21554
// bpoints := bpoints * 1.8 ;
21539: LD_ADDR_VAR 0 10
21543: PUSH
21544: LD_VAR 0 10
21548: PUSH
21549: LD_REAL  1.80000000000000E+0000
21552: MUL
21553: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
21554: LD_VAR 0 6
21558: PPUSH
21559: CALL_OW 257
21563: PUSH
21564: LD_INT 1
21566: PUSH
21567: LD_INT 2
21569: PUSH
21570: LD_INT 3
21572: PUSH
21573: LD_INT 4
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: IN
21582: PUSH
21583: LD_VAR 0 1
21587: PPUSH
21588: LD_INT 51
21590: PPUSH
21591: CALL_OW 321
21595: PUSH
21596: LD_INT 2
21598: EQUAL
21599: AND
21600: IFFALSE 21617
// bpoints := bpoints * 1.2 ;
21602: LD_ADDR_VAR 0 10
21606: PUSH
21607: LD_VAR 0 10
21611: PUSH
21612: LD_REAL  1.20000000000000E+0000
21615: MUL
21616: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
21617: LD_VAR 0 6
21621: PPUSH
21622: CALL_OW 257
21626: PUSH
21627: LD_INT 5
21629: PUSH
21630: LD_INT 7
21632: PUSH
21633: LD_INT 9
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: LIST
21640: IN
21641: PUSH
21642: LD_VAR 0 1
21646: PPUSH
21647: LD_INT 52
21649: PPUSH
21650: CALL_OW 321
21654: PUSH
21655: LD_INT 2
21657: EQUAL
21658: AND
21659: IFFALSE 21676
// bpoints := bpoints * 1.5 ;
21661: LD_ADDR_VAR 0 10
21665: PUSH
21666: LD_VAR 0 10
21670: PUSH
21671: LD_REAL  1.50000000000000E+0000
21674: MUL
21675: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
21676: LD_VAR 0 1
21680: PPUSH
21681: LD_INT 66
21683: PPUSH
21684: CALL_OW 321
21688: PUSH
21689: LD_INT 2
21691: EQUAL
21692: IFFALSE 21709
// bpoints := bpoints * 1.1 ;
21694: LD_ADDR_VAR 0 10
21698: PUSH
21699: LD_VAR 0 10
21703: PUSH
21704: LD_REAL  1.10000000000000E+0000
21707: MUL
21708: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
21709: LD_ADDR_VAR 0 10
21713: PUSH
21714: LD_VAR 0 10
21718: PUSH
21719: LD_VAR 0 6
21723: PPUSH
21724: LD_INT 1
21726: PPUSH
21727: CALL_OW 259
21731: PUSH
21732: LD_REAL  1.15000000000000E+0000
21735: MUL
21736: MUL
21737: ST_TO_ADDR
// end ; unit_vehicle :
21738: GO 22568
21740: LD_INT 2
21742: DOUBLE
21743: EQUAL
21744: IFTRUE 21748
21746: GO 22556
21748: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
21749: LD_VAR 0 6
21753: PPUSH
21754: CALL_OW 264
21758: PUSH
21759: LD_INT 2
21761: PUSH
21762: LD_INT 42
21764: PUSH
21765: LD_INT 24
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: LIST
21772: IN
21773: IFFALSE 21794
// points := [ 25 , 5 , 3 ] ;
21775: LD_ADDR_VAR 0 9
21779: PUSH
21780: LD_INT 25
21782: PUSH
21783: LD_INT 5
21785: PUSH
21786: LD_INT 3
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: LIST
21793: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
21794: LD_VAR 0 6
21798: PPUSH
21799: CALL_OW 264
21803: PUSH
21804: LD_INT 4
21806: PUSH
21807: LD_INT 43
21809: PUSH
21810: LD_INT 25
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: LIST
21817: IN
21818: IFFALSE 21839
// points := [ 40 , 15 , 5 ] ;
21820: LD_ADDR_VAR 0 9
21824: PUSH
21825: LD_INT 40
21827: PUSH
21828: LD_INT 15
21830: PUSH
21831: LD_INT 5
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: LIST
21838: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
21839: LD_VAR 0 6
21843: PPUSH
21844: CALL_OW 264
21848: PUSH
21849: LD_INT 3
21851: PUSH
21852: LD_INT 23
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: IN
21859: IFFALSE 21880
// points := [ 7 , 25 , 8 ] ;
21861: LD_ADDR_VAR 0 9
21865: PUSH
21866: LD_INT 7
21868: PUSH
21869: LD_INT 25
21871: PUSH
21872: LD_INT 8
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: LIST
21879: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
21880: LD_VAR 0 6
21884: PPUSH
21885: CALL_OW 264
21889: PUSH
21890: LD_INT 5
21892: PUSH
21893: LD_INT 27
21895: PUSH
21896: LD_INT 44
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: LIST
21903: IN
21904: IFFALSE 21925
// points := [ 14 , 50 , 16 ] ;
21906: LD_ADDR_VAR 0 9
21910: PUSH
21911: LD_INT 14
21913: PUSH
21914: LD_INT 50
21916: PUSH
21917: LD_INT 16
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: LIST
21924: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
21925: LD_VAR 0 6
21929: PPUSH
21930: CALL_OW 264
21934: PUSH
21935: LD_INT 6
21937: PUSH
21938: LD_INT 46
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: IN
21945: IFFALSE 21966
// points := [ 32 , 120 , 70 ] ;
21947: LD_ADDR_VAR 0 9
21951: PUSH
21952: LD_INT 32
21954: PUSH
21955: LD_INT 120
21957: PUSH
21958: LD_INT 70
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: LIST
21965: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
21966: LD_VAR 0 6
21970: PPUSH
21971: CALL_OW 264
21975: PUSH
21976: LD_INT 7
21978: PUSH
21979: LD_INT 28
21981: PUSH
21982: LD_INT 45
21984: PUSH
21985: LD_EXP 106
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: IN
21996: IFFALSE 22017
// points := [ 35 , 20 , 45 ] ;
21998: LD_ADDR_VAR 0 9
22002: PUSH
22003: LD_INT 35
22005: PUSH
22006: LD_INT 20
22008: PUSH
22009: LD_INT 45
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: LIST
22016: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22017: LD_VAR 0 6
22021: PPUSH
22022: CALL_OW 264
22026: PUSH
22027: LD_INT 47
22029: PUSH
22030: EMPTY
22031: LIST
22032: IN
22033: IFFALSE 22054
// points := [ 67 , 45 , 75 ] ;
22035: LD_ADDR_VAR 0 9
22039: PUSH
22040: LD_INT 67
22042: PUSH
22043: LD_INT 45
22045: PUSH
22046: LD_INT 75
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: LIST
22053: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22054: LD_VAR 0 6
22058: PPUSH
22059: CALL_OW 264
22063: PUSH
22064: LD_INT 26
22066: PUSH
22067: EMPTY
22068: LIST
22069: IN
22070: IFFALSE 22091
// points := [ 120 , 30 , 80 ] ;
22072: LD_ADDR_VAR 0 9
22076: PUSH
22077: LD_INT 120
22079: PUSH
22080: LD_INT 30
22082: PUSH
22083: LD_INT 80
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: LIST
22090: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22091: LD_VAR 0 6
22095: PPUSH
22096: CALL_OW 264
22100: PUSH
22101: LD_INT 22
22103: PUSH
22104: EMPTY
22105: LIST
22106: IN
22107: IFFALSE 22128
// points := [ 40 , 1 , 1 ] ;
22109: LD_ADDR_VAR 0 9
22113: PUSH
22114: LD_INT 40
22116: PUSH
22117: LD_INT 1
22119: PUSH
22120: LD_INT 1
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: LIST
22127: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22128: LD_VAR 0 6
22132: PPUSH
22133: CALL_OW 264
22137: PUSH
22138: LD_INT 29
22140: PUSH
22141: EMPTY
22142: LIST
22143: IN
22144: IFFALSE 22165
// points := [ 70 , 200 , 400 ] ;
22146: LD_ADDR_VAR 0 9
22150: PUSH
22151: LD_INT 70
22153: PUSH
22154: LD_INT 200
22156: PUSH
22157: LD_INT 400
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: LIST
22164: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22165: LD_VAR 0 6
22169: PPUSH
22170: CALL_OW 264
22174: PUSH
22175: LD_INT 14
22177: PUSH
22178: LD_INT 53
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: IN
22185: IFFALSE 22206
// points := [ 40 , 10 , 20 ] ;
22187: LD_ADDR_VAR 0 9
22191: PUSH
22192: LD_INT 40
22194: PUSH
22195: LD_INT 10
22197: PUSH
22198: LD_INT 20
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: LIST
22205: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22206: LD_VAR 0 6
22210: PPUSH
22211: CALL_OW 264
22215: PUSH
22216: LD_INT 9
22218: PUSH
22219: EMPTY
22220: LIST
22221: IN
22222: IFFALSE 22243
// points := [ 5 , 70 , 20 ] ;
22224: LD_ADDR_VAR 0 9
22228: PUSH
22229: LD_INT 5
22231: PUSH
22232: LD_INT 70
22234: PUSH
22235: LD_INT 20
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: LIST
22242: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
22243: LD_VAR 0 6
22247: PPUSH
22248: CALL_OW 264
22252: PUSH
22253: LD_INT 10
22255: PUSH
22256: EMPTY
22257: LIST
22258: IN
22259: IFFALSE 22280
// points := [ 35 , 110 , 70 ] ;
22261: LD_ADDR_VAR 0 9
22265: PUSH
22266: LD_INT 35
22268: PUSH
22269: LD_INT 110
22271: PUSH
22272: LD_INT 70
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: LIST
22279: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
22280: LD_VAR 0 6
22284: PPUSH
22285: CALL_OW 265
22289: PUSH
22290: LD_INT 25
22292: EQUAL
22293: IFFALSE 22314
// points := [ 80 , 65 , 100 ] ;
22295: LD_ADDR_VAR 0 9
22299: PUSH
22300: LD_INT 80
22302: PUSH
22303: LD_INT 65
22305: PUSH
22306: LD_INT 100
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: LIST
22313: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
22314: LD_VAR 0 6
22318: PPUSH
22319: CALL_OW 263
22323: PUSH
22324: LD_INT 1
22326: EQUAL
22327: IFFALSE 22362
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
22329: LD_ADDR_VAR 0 10
22333: PUSH
22334: LD_VAR 0 10
22338: PUSH
22339: LD_VAR 0 6
22343: PPUSH
22344: CALL_OW 311
22348: PPUSH
22349: LD_INT 3
22351: PPUSH
22352: CALL_OW 259
22356: PUSH
22357: LD_INT 4
22359: MUL
22360: MUL
22361: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
22362: LD_VAR 0 6
22366: PPUSH
22367: CALL_OW 263
22371: PUSH
22372: LD_INT 2
22374: EQUAL
22375: IFFALSE 22426
// begin j := IsControledBy ( i ) ;
22377: LD_ADDR_VAR 0 7
22381: PUSH
22382: LD_VAR 0 6
22386: PPUSH
22387: CALL_OW 312
22391: ST_TO_ADDR
// if j then
22392: LD_VAR 0 7
22396: IFFALSE 22426
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
22398: LD_ADDR_VAR 0 10
22402: PUSH
22403: LD_VAR 0 10
22407: PUSH
22408: LD_VAR 0 7
22412: PPUSH
22413: LD_INT 3
22415: PPUSH
22416: CALL_OW 259
22420: PUSH
22421: LD_INT 3
22423: MUL
22424: MUL
22425: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
22426: LD_VAR 0 6
22430: PPUSH
22431: CALL_OW 264
22435: PUSH
22436: LD_INT 5
22438: PUSH
22439: LD_INT 6
22441: PUSH
22442: LD_INT 46
22444: PUSH
22445: LD_INT 44
22447: PUSH
22448: LD_INT 47
22450: PUSH
22451: LD_INT 45
22453: PUSH
22454: LD_INT 28
22456: PUSH
22457: LD_INT 7
22459: PUSH
22460: LD_INT 27
22462: PUSH
22463: LD_INT 29
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: IN
22478: PUSH
22479: LD_VAR 0 1
22483: PPUSH
22484: LD_INT 52
22486: PPUSH
22487: CALL_OW 321
22491: PUSH
22492: LD_INT 2
22494: EQUAL
22495: AND
22496: IFFALSE 22513
// bpoints := bpoints * 1.2 ;
22498: LD_ADDR_VAR 0 10
22502: PUSH
22503: LD_VAR 0 10
22507: PUSH
22508: LD_REAL  1.20000000000000E+0000
22511: MUL
22512: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
22513: LD_VAR 0 6
22517: PPUSH
22518: CALL_OW 264
22522: PUSH
22523: LD_INT 6
22525: PUSH
22526: LD_INT 46
22528: PUSH
22529: LD_INT 47
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: LIST
22536: IN
22537: IFFALSE 22554
// bpoints := bpoints * 1.2 ;
22539: LD_ADDR_VAR 0 10
22543: PUSH
22544: LD_VAR 0 10
22548: PUSH
22549: LD_REAL  1.20000000000000E+0000
22552: MUL
22553: ST_TO_ADDR
// end ; unit_building :
22554: GO 22568
22556: LD_INT 3
22558: DOUBLE
22559: EQUAL
22560: IFTRUE 22564
22562: GO 22567
22564: POP
// ; end ;
22565: GO 22568
22567: POP
// for j = 1 to 3 do
22568: LD_ADDR_VAR 0 7
22572: PUSH
22573: DOUBLE
22574: LD_INT 1
22576: DEC
22577: ST_TO_ADDR
22578: LD_INT 3
22580: PUSH
22581: FOR_TO
22582: IFFALSE 22635
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
22584: LD_ADDR_VAR 0 5
22588: PUSH
22589: LD_VAR 0 5
22593: PPUSH
22594: LD_VAR 0 7
22598: PPUSH
22599: LD_VAR 0 5
22603: PUSH
22604: LD_VAR 0 7
22608: ARRAY
22609: PUSH
22610: LD_VAR 0 9
22614: PUSH
22615: LD_VAR 0 7
22619: ARRAY
22620: PUSH
22621: LD_VAR 0 10
22625: MUL
22626: PLUS
22627: PPUSH
22628: CALL_OW 1
22632: ST_TO_ADDR
22633: GO 22581
22635: POP
22636: POP
// end ;
22637: GO 21114
22639: POP
22640: POP
// result := Replace ( result , 4 , tmp ) ;
22641: LD_ADDR_VAR 0 5
22645: PUSH
22646: LD_VAR 0 5
22650: PPUSH
22651: LD_INT 4
22653: PPUSH
22654: LD_VAR 0 8
22658: PPUSH
22659: CALL_OW 1
22663: ST_TO_ADDR
// end ;
22664: LD_VAR 0 5
22668: RET
// export function DangerAtRange ( unit , range ) ; begin
22669: LD_INT 0
22671: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
22672: LD_ADDR_VAR 0 3
22676: PUSH
22677: LD_VAR 0 1
22681: PPUSH
22682: CALL_OW 255
22686: PPUSH
22687: LD_VAR 0 1
22691: PPUSH
22692: CALL_OW 250
22696: PPUSH
22697: LD_VAR 0 1
22701: PPUSH
22702: CALL_OW 251
22706: PPUSH
22707: LD_VAR 0 2
22711: PPUSH
22712: CALL 20966 0 4
22716: ST_TO_ADDR
// end ;
22717: LD_VAR 0 3
22721: RET
// export function DangerInArea ( side , area ) ; begin
22722: LD_INT 0
22724: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
22725: LD_ADDR_VAR 0 3
22729: PUSH
22730: LD_VAR 0 2
22734: PPUSH
22735: LD_INT 81
22737: PUSH
22738: LD_VAR 0 1
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: PPUSH
22747: CALL_OW 70
22751: ST_TO_ADDR
// end ;
22752: LD_VAR 0 3
22756: RET
// export function IsExtension ( b ) ; begin
22757: LD_INT 0
22759: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
22760: LD_ADDR_VAR 0 2
22764: PUSH
22765: LD_VAR 0 1
22769: PUSH
22770: LD_INT 23
22772: PUSH
22773: LD_INT 20
22775: PUSH
22776: LD_INT 22
22778: PUSH
22779: LD_INT 17
22781: PUSH
22782: LD_INT 24
22784: PUSH
22785: LD_INT 21
22787: PUSH
22788: LD_INT 19
22790: PUSH
22791: LD_INT 16
22793: PUSH
22794: LD_INT 25
22796: PUSH
22797: LD_INT 18
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: IN
22812: ST_TO_ADDR
// end ;
22813: LD_VAR 0 2
22817: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
22818: LD_INT 0
22820: PPUSH
22821: PPUSH
22822: PPUSH
// result := [ ] ;
22823: LD_ADDR_VAR 0 4
22827: PUSH
22828: EMPTY
22829: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
22830: LD_ADDR_VAR 0 5
22834: PUSH
22835: LD_VAR 0 2
22839: PPUSH
22840: LD_INT 21
22842: PUSH
22843: LD_INT 3
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PPUSH
22850: CALL_OW 70
22854: ST_TO_ADDR
// if not tmp then
22855: LD_VAR 0 5
22859: NOT
22860: IFFALSE 22864
// exit ;
22862: GO 22928
// if checkLink then
22864: LD_VAR 0 3
22868: IFFALSE 22918
// begin for i in tmp do
22870: LD_ADDR_VAR 0 6
22874: PUSH
22875: LD_VAR 0 5
22879: PUSH
22880: FOR_IN
22881: IFFALSE 22916
// if GetBase ( i ) <> base then
22883: LD_VAR 0 6
22887: PPUSH
22888: CALL_OW 274
22892: PUSH
22893: LD_VAR 0 1
22897: NONEQUAL
22898: IFFALSE 22914
// ComLinkToBase ( base , i ) ;
22900: LD_VAR 0 1
22904: PPUSH
22905: LD_VAR 0 6
22909: PPUSH
22910: CALL_OW 169
22914: GO 22880
22916: POP
22917: POP
// end ; result := tmp ;
22918: LD_ADDR_VAR 0 4
22922: PUSH
22923: LD_VAR 0 5
22927: ST_TO_ADDR
// end ;
22928: LD_VAR 0 4
22932: RET
// export function ComComplete ( units , b ) ; var i ; begin
22933: LD_INT 0
22935: PPUSH
22936: PPUSH
// if not units then
22937: LD_VAR 0 1
22941: NOT
22942: IFFALSE 22946
// exit ;
22944: GO 23036
// for i in units do
22946: LD_ADDR_VAR 0 4
22950: PUSH
22951: LD_VAR 0 1
22955: PUSH
22956: FOR_IN
22957: IFFALSE 23034
// if BuildingStatus ( b ) = bs_build then
22959: LD_VAR 0 2
22963: PPUSH
22964: CALL_OW 461
22968: PUSH
22969: LD_INT 1
22971: EQUAL
22972: IFFALSE 23032
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
22974: LD_VAR 0 4
22978: PPUSH
22979: LD_STRING h
22981: PUSH
22982: LD_VAR 0 2
22986: PPUSH
22987: CALL_OW 250
22991: PUSH
22992: LD_VAR 0 2
22996: PPUSH
22997: CALL_OW 251
23001: PUSH
23002: LD_VAR 0 2
23006: PUSH
23007: LD_INT 0
23009: PUSH
23010: LD_INT 0
23012: PUSH
23013: LD_INT 0
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: PUSH
23025: EMPTY
23026: LIST
23027: PPUSH
23028: CALL_OW 446
23032: GO 22956
23034: POP
23035: POP
// end ;
23036: LD_VAR 0 3
23040: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23041: LD_INT 0
23043: PPUSH
23044: PPUSH
23045: PPUSH
23046: PPUSH
23047: PPUSH
23048: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23049: LD_VAR 0 1
23053: NOT
23054: PUSH
23055: LD_VAR 0 1
23059: PPUSH
23060: CALL_OW 263
23064: PUSH
23065: LD_INT 2
23067: NONEQUAL
23068: OR
23069: IFFALSE 23073
// exit ;
23071: GO 23389
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23073: LD_ADDR_VAR 0 6
23077: PUSH
23078: LD_INT 22
23080: PUSH
23081: LD_VAR 0 1
23085: PPUSH
23086: CALL_OW 255
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: PUSH
23095: LD_INT 2
23097: PUSH
23098: LD_INT 30
23100: PUSH
23101: LD_INT 36
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 34
23110: PUSH
23111: LD_INT 31
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: LIST
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: PPUSH
23127: CALL_OW 69
23131: ST_TO_ADDR
// if not tmp then
23132: LD_VAR 0 6
23136: NOT
23137: IFFALSE 23141
// exit ;
23139: GO 23389
// result := [ ] ;
23141: LD_ADDR_VAR 0 2
23145: PUSH
23146: EMPTY
23147: ST_TO_ADDR
// for i in tmp do
23148: LD_ADDR_VAR 0 3
23152: PUSH
23153: LD_VAR 0 6
23157: PUSH
23158: FOR_IN
23159: IFFALSE 23230
// begin t := UnitsInside ( i ) ;
23161: LD_ADDR_VAR 0 4
23165: PUSH
23166: LD_VAR 0 3
23170: PPUSH
23171: CALL_OW 313
23175: ST_TO_ADDR
// if t then
23176: LD_VAR 0 4
23180: IFFALSE 23228
// for j in t do
23182: LD_ADDR_VAR 0 7
23186: PUSH
23187: LD_VAR 0 4
23191: PUSH
23192: FOR_IN
23193: IFFALSE 23226
// result := Replace ( result , result + 1 , j ) ;
23195: LD_ADDR_VAR 0 2
23199: PUSH
23200: LD_VAR 0 2
23204: PPUSH
23205: LD_VAR 0 2
23209: PUSH
23210: LD_INT 1
23212: PLUS
23213: PPUSH
23214: LD_VAR 0 7
23218: PPUSH
23219: CALL_OW 1
23223: ST_TO_ADDR
23224: GO 23192
23226: POP
23227: POP
// end ;
23228: GO 23158
23230: POP
23231: POP
// if not result then
23232: LD_VAR 0 2
23236: NOT
23237: IFFALSE 23241
// exit ;
23239: GO 23389
// mech := result [ 1 ] ;
23241: LD_ADDR_VAR 0 5
23245: PUSH
23246: LD_VAR 0 2
23250: PUSH
23251: LD_INT 1
23253: ARRAY
23254: ST_TO_ADDR
// if result > 1 then
23255: LD_VAR 0 2
23259: PUSH
23260: LD_INT 1
23262: GREATER
23263: IFFALSE 23375
// begin for i = 2 to result do
23265: LD_ADDR_VAR 0 3
23269: PUSH
23270: DOUBLE
23271: LD_INT 2
23273: DEC
23274: ST_TO_ADDR
23275: LD_VAR 0 2
23279: PUSH
23280: FOR_TO
23281: IFFALSE 23373
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
23283: LD_ADDR_VAR 0 4
23287: PUSH
23288: LD_VAR 0 2
23292: PUSH
23293: LD_VAR 0 3
23297: ARRAY
23298: PPUSH
23299: LD_INT 3
23301: PPUSH
23302: CALL_OW 259
23306: PUSH
23307: LD_VAR 0 2
23311: PUSH
23312: LD_VAR 0 3
23316: ARRAY
23317: PPUSH
23318: CALL_OW 432
23322: MINUS
23323: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
23324: LD_VAR 0 4
23328: PUSH
23329: LD_VAR 0 5
23333: PPUSH
23334: LD_INT 3
23336: PPUSH
23337: CALL_OW 259
23341: PUSH
23342: LD_VAR 0 5
23346: PPUSH
23347: CALL_OW 432
23351: MINUS
23352: GREATEREQUAL
23353: IFFALSE 23371
// mech := result [ i ] ;
23355: LD_ADDR_VAR 0 5
23359: PUSH
23360: LD_VAR 0 2
23364: PUSH
23365: LD_VAR 0 3
23369: ARRAY
23370: ST_TO_ADDR
// end ;
23371: GO 23280
23373: POP
23374: POP
// end ; ComLinkTo ( vehicle , mech ) ;
23375: LD_VAR 0 1
23379: PPUSH
23380: LD_VAR 0 5
23384: PPUSH
23385: CALL_OW 135
// end ;
23389: LD_VAR 0 2
23393: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
23394: LD_INT 0
23396: PPUSH
23397: PPUSH
23398: PPUSH
23399: PPUSH
23400: PPUSH
23401: PPUSH
23402: PPUSH
23403: PPUSH
23404: PPUSH
23405: PPUSH
23406: PPUSH
23407: PPUSH
23408: PPUSH
// result := [ ] ;
23409: LD_ADDR_VAR 0 7
23413: PUSH
23414: EMPTY
23415: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
23416: LD_VAR 0 1
23420: PPUSH
23421: CALL_OW 266
23425: PUSH
23426: LD_INT 0
23428: PUSH
23429: LD_INT 1
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: IN
23436: NOT
23437: IFFALSE 23441
// exit ;
23439: GO 25075
// if name then
23441: LD_VAR 0 3
23445: IFFALSE 23461
// SetBName ( base_dep , name ) ;
23447: LD_VAR 0 1
23451: PPUSH
23452: LD_VAR 0 3
23456: PPUSH
23457: CALL_OW 500
// base := GetBase ( base_dep ) ;
23461: LD_ADDR_VAR 0 15
23465: PUSH
23466: LD_VAR 0 1
23470: PPUSH
23471: CALL_OW 274
23475: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
23476: LD_ADDR_VAR 0 16
23480: PUSH
23481: LD_VAR 0 1
23485: PPUSH
23486: CALL_OW 255
23490: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
23491: LD_ADDR_VAR 0 17
23495: PUSH
23496: LD_VAR 0 1
23500: PPUSH
23501: CALL_OW 248
23505: ST_TO_ADDR
// if sources then
23506: LD_VAR 0 5
23510: IFFALSE 23557
// for i = 1 to 3 do
23512: LD_ADDR_VAR 0 8
23516: PUSH
23517: DOUBLE
23518: LD_INT 1
23520: DEC
23521: ST_TO_ADDR
23522: LD_INT 3
23524: PUSH
23525: FOR_TO
23526: IFFALSE 23555
// AddResourceType ( base , i , sources [ i ] ) ;
23528: LD_VAR 0 15
23532: PPUSH
23533: LD_VAR 0 8
23537: PPUSH
23538: LD_VAR 0 5
23542: PUSH
23543: LD_VAR 0 8
23547: ARRAY
23548: PPUSH
23549: CALL_OW 276
23553: GO 23525
23555: POP
23556: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
23557: LD_ADDR_VAR 0 18
23561: PUSH
23562: LD_VAR 0 15
23566: PPUSH
23567: LD_VAR 0 2
23571: PPUSH
23572: LD_INT 1
23574: PPUSH
23575: CALL 22818 0 3
23579: ST_TO_ADDR
// InitHc ;
23580: CALL_OW 19
// InitUc ;
23584: CALL_OW 18
// uc_side := side ;
23588: LD_ADDR_OWVAR 20
23592: PUSH
23593: LD_VAR 0 16
23597: ST_TO_ADDR
// uc_nation := nation ;
23598: LD_ADDR_OWVAR 21
23602: PUSH
23603: LD_VAR 0 17
23607: ST_TO_ADDR
// if buildings then
23608: LD_VAR 0 18
23612: IFFALSE 24934
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
23614: LD_ADDR_VAR 0 19
23618: PUSH
23619: LD_VAR 0 18
23623: PPUSH
23624: LD_INT 2
23626: PUSH
23627: LD_INT 30
23629: PUSH
23630: LD_INT 29
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 30
23639: PUSH
23640: LD_INT 30
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: LIST
23651: PPUSH
23652: CALL_OW 72
23656: ST_TO_ADDR
// if tmp then
23657: LD_VAR 0 19
23661: IFFALSE 23709
// for i in tmp do
23663: LD_ADDR_VAR 0 8
23667: PUSH
23668: LD_VAR 0 19
23672: PUSH
23673: FOR_IN
23674: IFFALSE 23707
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
23676: LD_VAR 0 8
23680: PPUSH
23681: CALL_OW 250
23685: PPUSH
23686: LD_VAR 0 8
23690: PPUSH
23691: CALL_OW 251
23695: PPUSH
23696: LD_VAR 0 16
23700: PPUSH
23701: CALL_OW 441
23705: GO 23673
23707: POP
23708: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
23709: LD_VAR 0 18
23713: PPUSH
23714: LD_INT 2
23716: PUSH
23717: LD_INT 30
23719: PUSH
23720: LD_INT 32
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: PUSH
23727: LD_INT 30
23729: PUSH
23730: LD_INT 33
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: LIST
23741: PPUSH
23742: CALL_OW 72
23746: IFFALSE 23834
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
23748: LD_ADDR_VAR 0 8
23752: PUSH
23753: LD_VAR 0 18
23757: PPUSH
23758: LD_INT 2
23760: PUSH
23761: LD_INT 30
23763: PUSH
23764: LD_INT 32
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: LD_INT 30
23773: PUSH
23774: LD_INT 33
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: LIST
23785: PPUSH
23786: CALL_OW 72
23790: PUSH
23791: FOR_IN
23792: IFFALSE 23832
// begin if not GetBWeapon ( i ) then
23794: LD_VAR 0 8
23798: PPUSH
23799: CALL_OW 269
23803: NOT
23804: IFFALSE 23830
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
23806: LD_VAR 0 8
23810: PPUSH
23811: LD_VAR 0 8
23815: PPUSH
23816: LD_VAR 0 2
23820: PPUSH
23821: CALL 25080 0 2
23825: PPUSH
23826: CALL_OW 431
// end ;
23830: GO 23791
23832: POP
23833: POP
// end ; for i = 1 to personel do
23834: LD_ADDR_VAR 0 8
23838: PUSH
23839: DOUBLE
23840: LD_INT 1
23842: DEC
23843: ST_TO_ADDR
23844: LD_VAR 0 6
23848: PUSH
23849: FOR_TO
23850: IFFALSE 24914
// begin if i > 4 then
23852: LD_VAR 0 8
23856: PUSH
23857: LD_INT 4
23859: GREATER
23860: IFFALSE 23864
// break ;
23862: GO 24914
// case i of 1 :
23864: LD_VAR 0 8
23868: PUSH
23869: LD_INT 1
23871: DOUBLE
23872: EQUAL
23873: IFTRUE 23877
23875: GO 23957
23877: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
23878: LD_ADDR_VAR 0 12
23882: PUSH
23883: LD_VAR 0 18
23887: PPUSH
23888: LD_INT 22
23890: PUSH
23891: LD_VAR 0 16
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 58
23902: PUSH
23903: EMPTY
23904: LIST
23905: PUSH
23906: LD_INT 2
23908: PUSH
23909: LD_INT 30
23911: PUSH
23912: LD_INT 32
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 30
23921: PUSH
23922: LD_INT 4
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: LD_INT 30
23931: PUSH
23932: LD_INT 5
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: LIST
23949: PPUSH
23950: CALL_OW 72
23954: ST_TO_ADDR
23955: GO 24179
23957: LD_INT 2
23959: DOUBLE
23960: EQUAL
23961: IFTRUE 23965
23963: GO 24027
23965: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
23966: LD_ADDR_VAR 0 12
23970: PUSH
23971: LD_VAR 0 18
23975: PPUSH
23976: LD_INT 22
23978: PUSH
23979: LD_VAR 0 16
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 2
23990: PUSH
23991: LD_INT 30
23993: PUSH
23994: LD_INT 0
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PUSH
24001: LD_INT 30
24003: PUSH
24004: LD_INT 1
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: LIST
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: PPUSH
24020: CALL_OW 72
24024: ST_TO_ADDR
24025: GO 24179
24027: LD_INT 3
24029: DOUBLE
24030: EQUAL
24031: IFTRUE 24035
24033: GO 24097
24035: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24036: LD_ADDR_VAR 0 12
24040: PUSH
24041: LD_VAR 0 18
24045: PPUSH
24046: LD_INT 22
24048: PUSH
24049: LD_VAR 0 16
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 2
24060: PUSH
24061: LD_INT 30
24063: PUSH
24064: LD_INT 2
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: PUSH
24071: LD_INT 30
24073: PUSH
24074: LD_INT 3
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: LIST
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: PPUSH
24090: CALL_OW 72
24094: ST_TO_ADDR
24095: GO 24179
24097: LD_INT 4
24099: DOUBLE
24100: EQUAL
24101: IFTRUE 24105
24103: GO 24178
24105: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24106: LD_ADDR_VAR 0 12
24110: PUSH
24111: LD_VAR 0 18
24115: PPUSH
24116: LD_INT 22
24118: PUSH
24119: LD_VAR 0 16
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PUSH
24128: LD_INT 2
24130: PUSH
24131: LD_INT 30
24133: PUSH
24134: LD_INT 6
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 30
24143: PUSH
24144: LD_INT 7
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: LD_INT 30
24153: PUSH
24154: LD_INT 8
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PPUSH
24171: CALL_OW 72
24175: ST_TO_ADDR
24176: GO 24179
24178: POP
// if i = 1 then
24179: LD_VAR 0 8
24183: PUSH
24184: LD_INT 1
24186: EQUAL
24187: IFFALSE 24298
// begin tmp := [ ] ;
24189: LD_ADDR_VAR 0 19
24193: PUSH
24194: EMPTY
24195: ST_TO_ADDR
// for j in f do
24196: LD_ADDR_VAR 0 9
24200: PUSH
24201: LD_VAR 0 12
24205: PUSH
24206: FOR_IN
24207: IFFALSE 24280
// if GetBType ( j ) = b_bunker then
24209: LD_VAR 0 9
24213: PPUSH
24214: CALL_OW 266
24218: PUSH
24219: LD_INT 32
24221: EQUAL
24222: IFFALSE 24249
// tmp := Insert ( tmp , 1 , j ) else
24224: LD_ADDR_VAR 0 19
24228: PUSH
24229: LD_VAR 0 19
24233: PPUSH
24234: LD_INT 1
24236: PPUSH
24237: LD_VAR 0 9
24241: PPUSH
24242: CALL_OW 2
24246: ST_TO_ADDR
24247: GO 24278
// tmp := Insert ( tmp , tmp + 1 , j ) ;
24249: LD_ADDR_VAR 0 19
24253: PUSH
24254: LD_VAR 0 19
24258: PPUSH
24259: LD_VAR 0 19
24263: PUSH
24264: LD_INT 1
24266: PLUS
24267: PPUSH
24268: LD_VAR 0 9
24272: PPUSH
24273: CALL_OW 2
24277: ST_TO_ADDR
24278: GO 24206
24280: POP
24281: POP
// if tmp then
24282: LD_VAR 0 19
24286: IFFALSE 24298
// f := tmp ;
24288: LD_ADDR_VAR 0 12
24292: PUSH
24293: LD_VAR 0 19
24297: ST_TO_ADDR
// end ; x := personel [ i ] ;
24298: LD_ADDR_VAR 0 13
24302: PUSH
24303: LD_VAR 0 6
24307: PUSH
24308: LD_VAR 0 8
24312: ARRAY
24313: ST_TO_ADDR
// if x = - 1 then
24314: LD_VAR 0 13
24318: PUSH
24319: LD_INT 1
24321: NEG
24322: EQUAL
24323: IFFALSE 24532
// begin for j in f do
24325: LD_ADDR_VAR 0 9
24329: PUSH
24330: LD_VAR 0 12
24334: PUSH
24335: FOR_IN
24336: IFFALSE 24528
// repeat InitHc ;
24338: CALL_OW 19
// if GetBType ( j ) = b_barracks then
24342: LD_VAR 0 9
24346: PPUSH
24347: CALL_OW 266
24351: PUSH
24352: LD_INT 5
24354: EQUAL
24355: IFFALSE 24425
// begin if UnitsInside ( j ) < 3 then
24357: LD_VAR 0 9
24361: PPUSH
24362: CALL_OW 313
24366: PUSH
24367: LD_INT 3
24369: LESS
24370: IFFALSE 24406
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24372: LD_INT 0
24374: PPUSH
24375: LD_INT 5
24377: PUSH
24378: LD_INT 8
24380: PUSH
24381: LD_INT 9
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: LIST
24388: PUSH
24389: LD_VAR 0 17
24393: ARRAY
24394: PPUSH
24395: LD_VAR 0 4
24399: PPUSH
24400: CALL_OW 380
24404: GO 24423
// PrepareHuman ( false , i , skill ) ;
24406: LD_INT 0
24408: PPUSH
24409: LD_VAR 0 8
24413: PPUSH
24414: LD_VAR 0 4
24418: PPUSH
24419: CALL_OW 380
// end else
24423: GO 24442
// PrepareHuman ( false , i , skill ) ;
24425: LD_INT 0
24427: PPUSH
24428: LD_VAR 0 8
24432: PPUSH
24433: LD_VAR 0 4
24437: PPUSH
24438: CALL_OW 380
// un := CreateHuman ;
24442: LD_ADDR_VAR 0 14
24446: PUSH
24447: CALL_OW 44
24451: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24452: LD_ADDR_VAR 0 7
24456: PUSH
24457: LD_VAR 0 7
24461: PPUSH
24462: LD_INT 1
24464: PPUSH
24465: LD_VAR 0 14
24469: PPUSH
24470: CALL_OW 2
24474: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
24475: LD_VAR 0 14
24479: PPUSH
24480: LD_VAR 0 9
24484: PPUSH
24485: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
24489: LD_VAR 0 9
24493: PPUSH
24494: CALL_OW 313
24498: PUSH
24499: LD_INT 6
24501: EQUAL
24502: PUSH
24503: LD_VAR 0 9
24507: PPUSH
24508: CALL_OW 266
24512: PUSH
24513: LD_INT 32
24515: PUSH
24516: LD_INT 31
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: IN
24523: OR
24524: IFFALSE 24338
24526: GO 24335
24528: POP
24529: POP
// end else
24530: GO 24912
// for j = 1 to x do
24532: LD_ADDR_VAR 0 9
24536: PUSH
24537: DOUBLE
24538: LD_INT 1
24540: DEC
24541: ST_TO_ADDR
24542: LD_VAR 0 13
24546: PUSH
24547: FOR_TO
24548: IFFALSE 24910
// begin InitHc ;
24550: CALL_OW 19
// if not f then
24554: LD_VAR 0 12
24558: NOT
24559: IFFALSE 24648
// begin PrepareHuman ( false , i , skill ) ;
24561: LD_INT 0
24563: PPUSH
24564: LD_VAR 0 8
24568: PPUSH
24569: LD_VAR 0 4
24573: PPUSH
24574: CALL_OW 380
// un := CreateHuman ;
24578: LD_ADDR_VAR 0 14
24582: PUSH
24583: CALL_OW 44
24587: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24588: LD_ADDR_VAR 0 7
24592: PUSH
24593: LD_VAR 0 7
24597: PPUSH
24598: LD_INT 1
24600: PPUSH
24601: LD_VAR 0 14
24605: PPUSH
24606: CALL_OW 2
24610: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24611: LD_VAR 0 14
24615: PPUSH
24616: LD_VAR 0 1
24620: PPUSH
24621: CALL_OW 250
24625: PPUSH
24626: LD_VAR 0 1
24630: PPUSH
24631: CALL_OW 251
24635: PPUSH
24636: LD_INT 10
24638: PPUSH
24639: LD_INT 0
24641: PPUSH
24642: CALL_OW 50
// continue ;
24646: GO 24547
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
24648: LD_VAR 0 12
24652: PUSH
24653: LD_INT 1
24655: ARRAY
24656: PPUSH
24657: CALL_OW 313
24661: PUSH
24662: LD_VAR 0 12
24666: PUSH
24667: LD_INT 1
24669: ARRAY
24670: PPUSH
24671: CALL_OW 266
24675: PUSH
24676: LD_INT 32
24678: PUSH
24679: LD_INT 31
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: IN
24686: AND
24687: PUSH
24688: LD_VAR 0 12
24692: PUSH
24693: LD_INT 1
24695: ARRAY
24696: PPUSH
24697: CALL_OW 313
24701: PUSH
24702: LD_INT 6
24704: EQUAL
24705: OR
24706: IFFALSE 24726
// f := Delete ( f , 1 ) ;
24708: LD_ADDR_VAR 0 12
24712: PUSH
24713: LD_VAR 0 12
24717: PPUSH
24718: LD_INT 1
24720: PPUSH
24721: CALL_OW 3
24725: ST_TO_ADDR
// if not f then
24726: LD_VAR 0 12
24730: NOT
24731: IFFALSE 24749
// begin x := x + 2 ;
24733: LD_ADDR_VAR 0 13
24737: PUSH
24738: LD_VAR 0 13
24742: PUSH
24743: LD_INT 2
24745: PLUS
24746: ST_TO_ADDR
// continue ;
24747: GO 24547
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
24749: LD_VAR 0 12
24753: PUSH
24754: LD_INT 1
24756: ARRAY
24757: PPUSH
24758: CALL_OW 266
24762: PUSH
24763: LD_INT 5
24765: EQUAL
24766: IFFALSE 24840
// begin if UnitsInside ( f [ 1 ] ) < 3 then
24768: LD_VAR 0 12
24772: PUSH
24773: LD_INT 1
24775: ARRAY
24776: PPUSH
24777: CALL_OW 313
24781: PUSH
24782: LD_INT 3
24784: LESS
24785: IFFALSE 24821
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24787: LD_INT 0
24789: PPUSH
24790: LD_INT 5
24792: PUSH
24793: LD_INT 8
24795: PUSH
24796: LD_INT 9
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: LIST
24803: PUSH
24804: LD_VAR 0 17
24808: ARRAY
24809: PPUSH
24810: LD_VAR 0 4
24814: PPUSH
24815: CALL_OW 380
24819: GO 24838
// PrepareHuman ( false , i , skill ) ;
24821: LD_INT 0
24823: PPUSH
24824: LD_VAR 0 8
24828: PPUSH
24829: LD_VAR 0 4
24833: PPUSH
24834: CALL_OW 380
// end else
24838: GO 24857
// PrepareHuman ( false , i , skill ) ;
24840: LD_INT 0
24842: PPUSH
24843: LD_VAR 0 8
24847: PPUSH
24848: LD_VAR 0 4
24852: PPUSH
24853: CALL_OW 380
// un := CreateHuman ;
24857: LD_ADDR_VAR 0 14
24861: PUSH
24862: CALL_OW 44
24866: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24867: LD_ADDR_VAR 0 7
24871: PUSH
24872: LD_VAR 0 7
24876: PPUSH
24877: LD_INT 1
24879: PPUSH
24880: LD_VAR 0 14
24884: PPUSH
24885: CALL_OW 2
24889: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
24890: LD_VAR 0 14
24894: PPUSH
24895: LD_VAR 0 12
24899: PUSH
24900: LD_INT 1
24902: ARRAY
24903: PPUSH
24904: CALL_OW 52
// end ;
24908: GO 24547
24910: POP
24911: POP
// end ;
24912: GO 23849
24914: POP
24915: POP
// result := result ^ buildings ;
24916: LD_ADDR_VAR 0 7
24920: PUSH
24921: LD_VAR 0 7
24925: PUSH
24926: LD_VAR 0 18
24930: ADD
24931: ST_TO_ADDR
// end else
24932: GO 25075
// begin for i = 1 to personel do
24934: LD_ADDR_VAR 0 8
24938: PUSH
24939: DOUBLE
24940: LD_INT 1
24942: DEC
24943: ST_TO_ADDR
24944: LD_VAR 0 6
24948: PUSH
24949: FOR_TO
24950: IFFALSE 25073
// begin if i > 4 then
24952: LD_VAR 0 8
24956: PUSH
24957: LD_INT 4
24959: GREATER
24960: IFFALSE 24964
// break ;
24962: GO 25073
// x := personel [ i ] ;
24964: LD_ADDR_VAR 0 13
24968: PUSH
24969: LD_VAR 0 6
24973: PUSH
24974: LD_VAR 0 8
24978: ARRAY
24979: ST_TO_ADDR
// if x = - 1 then
24980: LD_VAR 0 13
24984: PUSH
24985: LD_INT 1
24987: NEG
24988: EQUAL
24989: IFFALSE 24993
// continue ;
24991: GO 24949
// PrepareHuman ( false , i , skill ) ;
24993: LD_INT 0
24995: PPUSH
24996: LD_VAR 0 8
25000: PPUSH
25001: LD_VAR 0 4
25005: PPUSH
25006: CALL_OW 380
// un := CreateHuman ;
25010: LD_ADDR_VAR 0 14
25014: PUSH
25015: CALL_OW 44
25019: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25020: LD_VAR 0 14
25024: PPUSH
25025: LD_VAR 0 1
25029: PPUSH
25030: CALL_OW 250
25034: PPUSH
25035: LD_VAR 0 1
25039: PPUSH
25040: CALL_OW 251
25044: PPUSH
25045: LD_INT 10
25047: PPUSH
25048: LD_INT 0
25050: PPUSH
25051: CALL_OW 50
// result := result ^ un ;
25055: LD_ADDR_VAR 0 7
25059: PUSH
25060: LD_VAR 0 7
25064: PUSH
25065: LD_VAR 0 14
25069: ADD
25070: ST_TO_ADDR
// end ;
25071: GO 24949
25073: POP
25074: POP
// end ; end ;
25075: LD_VAR 0 7
25079: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25080: LD_INT 0
25082: PPUSH
25083: PPUSH
25084: PPUSH
25085: PPUSH
25086: PPUSH
25087: PPUSH
25088: PPUSH
25089: PPUSH
25090: PPUSH
25091: PPUSH
25092: PPUSH
25093: PPUSH
25094: PPUSH
25095: PPUSH
25096: PPUSH
25097: PPUSH
// result := false ;
25098: LD_ADDR_VAR 0 3
25102: PUSH
25103: LD_INT 0
25105: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25106: LD_VAR 0 1
25110: NOT
25111: PUSH
25112: LD_VAR 0 1
25116: PPUSH
25117: CALL_OW 266
25121: PUSH
25122: LD_INT 32
25124: PUSH
25125: LD_INT 33
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: IN
25132: NOT
25133: OR
25134: IFFALSE 25138
// exit ;
25136: GO 26247
// nat := GetNation ( tower ) ;
25138: LD_ADDR_VAR 0 12
25142: PUSH
25143: LD_VAR 0 1
25147: PPUSH
25148: CALL_OW 248
25152: ST_TO_ADDR
// side := GetSide ( tower ) ;
25153: LD_ADDR_VAR 0 16
25157: PUSH
25158: LD_VAR 0 1
25162: PPUSH
25163: CALL_OW 255
25167: ST_TO_ADDR
// x := GetX ( tower ) ;
25168: LD_ADDR_VAR 0 10
25172: PUSH
25173: LD_VAR 0 1
25177: PPUSH
25178: CALL_OW 250
25182: ST_TO_ADDR
// y := GetY ( tower ) ;
25183: LD_ADDR_VAR 0 11
25187: PUSH
25188: LD_VAR 0 1
25192: PPUSH
25193: CALL_OW 251
25197: ST_TO_ADDR
// if not x or not y then
25198: LD_VAR 0 10
25202: NOT
25203: PUSH
25204: LD_VAR 0 11
25208: NOT
25209: OR
25210: IFFALSE 25214
// exit ;
25212: GO 26247
// weapon := 0 ;
25214: LD_ADDR_VAR 0 18
25218: PUSH
25219: LD_INT 0
25221: ST_TO_ADDR
// fac_list := [ ] ;
25222: LD_ADDR_VAR 0 17
25226: PUSH
25227: EMPTY
25228: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
25229: LD_ADDR_VAR 0 6
25233: PUSH
25234: LD_VAR 0 1
25238: PPUSH
25239: CALL_OW 274
25243: PPUSH
25244: LD_VAR 0 2
25248: PPUSH
25249: LD_INT 0
25251: PPUSH
25252: CALL 22818 0 3
25256: PPUSH
25257: LD_INT 30
25259: PUSH
25260: LD_INT 3
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PPUSH
25267: CALL_OW 72
25271: ST_TO_ADDR
// if not factories then
25272: LD_VAR 0 6
25276: NOT
25277: IFFALSE 25281
// exit ;
25279: GO 26247
// for i in factories do
25281: LD_ADDR_VAR 0 8
25285: PUSH
25286: LD_VAR 0 6
25290: PUSH
25291: FOR_IN
25292: IFFALSE 25317
// fac_list := fac_list union AvailableWeaponList ( i ) ;
25294: LD_ADDR_VAR 0 17
25298: PUSH
25299: LD_VAR 0 17
25303: PUSH
25304: LD_VAR 0 8
25308: PPUSH
25309: CALL_OW 478
25313: UNION
25314: ST_TO_ADDR
25315: GO 25291
25317: POP
25318: POP
// if not fac_list then
25319: LD_VAR 0 17
25323: NOT
25324: IFFALSE 25328
// exit ;
25326: GO 26247
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
25328: LD_ADDR_VAR 0 5
25332: PUSH
25333: LD_INT 4
25335: PUSH
25336: LD_INT 5
25338: PUSH
25339: LD_INT 9
25341: PUSH
25342: LD_INT 10
25344: PUSH
25345: LD_INT 6
25347: PUSH
25348: LD_INT 7
25350: PUSH
25351: LD_INT 11
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 27
25365: PUSH
25366: LD_INT 28
25368: PUSH
25369: LD_INT 26
25371: PUSH
25372: LD_INT 30
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: PUSH
25381: LD_INT 43
25383: PUSH
25384: LD_INT 44
25386: PUSH
25387: LD_INT 46
25389: PUSH
25390: LD_INT 45
25392: PUSH
25393: LD_INT 47
25395: PUSH
25396: LD_INT 49
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: LIST
25411: PUSH
25412: LD_VAR 0 12
25416: ARRAY
25417: ST_TO_ADDR
// list := list isect fac_list ;
25418: LD_ADDR_VAR 0 5
25422: PUSH
25423: LD_VAR 0 5
25427: PUSH
25428: LD_VAR 0 17
25432: ISECT
25433: ST_TO_ADDR
// if not list then
25434: LD_VAR 0 5
25438: NOT
25439: IFFALSE 25443
// exit ;
25441: GO 26247
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
25443: LD_VAR 0 12
25447: PUSH
25448: LD_INT 3
25450: EQUAL
25451: PUSH
25452: LD_INT 49
25454: PUSH
25455: LD_VAR 0 5
25459: IN
25460: AND
25461: PUSH
25462: LD_INT 31
25464: PPUSH
25465: LD_VAR 0 16
25469: PPUSH
25470: CALL_OW 321
25474: PUSH
25475: LD_INT 2
25477: EQUAL
25478: AND
25479: IFFALSE 25539
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
25481: LD_INT 22
25483: PUSH
25484: LD_VAR 0 16
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 35
25495: PUSH
25496: LD_INT 49
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 91
25505: PUSH
25506: LD_VAR 0 1
25510: PUSH
25511: LD_INT 10
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: LIST
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: LIST
25523: PPUSH
25524: CALL_OW 69
25528: NOT
25529: IFFALSE 25539
// weapon := ru_time_lapser ;
25531: LD_ADDR_VAR 0 18
25535: PUSH
25536: LD_INT 49
25538: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
25539: LD_VAR 0 12
25543: PUSH
25544: LD_INT 1
25546: PUSH
25547: LD_INT 2
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: IN
25554: PUSH
25555: LD_INT 11
25557: PUSH
25558: LD_VAR 0 5
25562: IN
25563: PUSH
25564: LD_INT 30
25566: PUSH
25567: LD_VAR 0 5
25571: IN
25572: OR
25573: AND
25574: PUSH
25575: LD_INT 6
25577: PPUSH
25578: LD_VAR 0 16
25582: PPUSH
25583: CALL_OW 321
25587: PUSH
25588: LD_INT 2
25590: EQUAL
25591: AND
25592: IFFALSE 25757
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
25594: LD_INT 22
25596: PUSH
25597: LD_VAR 0 16
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PUSH
25606: LD_INT 2
25608: PUSH
25609: LD_INT 35
25611: PUSH
25612: LD_INT 11
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 35
25621: PUSH
25622: LD_INT 30
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: LIST
25633: PUSH
25634: LD_INT 91
25636: PUSH
25637: LD_VAR 0 1
25641: PUSH
25642: LD_INT 18
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: LIST
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: LIST
25654: PPUSH
25655: CALL_OW 69
25659: NOT
25660: PUSH
25661: LD_INT 22
25663: PUSH
25664: LD_VAR 0 16
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 2
25675: PUSH
25676: LD_INT 30
25678: PUSH
25679: LD_INT 32
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: LD_INT 30
25688: PUSH
25689: LD_INT 33
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 91
25703: PUSH
25704: LD_VAR 0 1
25708: PUSH
25709: LD_INT 12
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: LIST
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: LIST
25721: PUSH
25722: EMPTY
25723: LIST
25724: PPUSH
25725: CALL_OW 69
25729: PUSH
25730: LD_INT 2
25732: GREATER
25733: AND
25734: IFFALSE 25757
// weapon := [ us_radar , ar_radar ] [ nat ] ;
25736: LD_ADDR_VAR 0 18
25740: PUSH
25741: LD_INT 11
25743: PUSH
25744: LD_INT 30
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_VAR 0 12
25755: ARRAY
25756: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
25757: LD_VAR 0 18
25761: NOT
25762: PUSH
25763: LD_INT 40
25765: PPUSH
25766: LD_VAR 0 16
25770: PPUSH
25771: CALL_OW 321
25775: PUSH
25776: LD_INT 2
25778: EQUAL
25779: AND
25780: PUSH
25781: LD_INT 7
25783: PUSH
25784: LD_VAR 0 5
25788: IN
25789: PUSH
25790: LD_INT 28
25792: PUSH
25793: LD_VAR 0 5
25797: IN
25798: OR
25799: PUSH
25800: LD_INT 45
25802: PUSH
25803: LD_VAR 0 5
25807: IN
25808: OR
25809: AND
25810: IFFALSE 26064
// begin hex := GetHexInfo ( x , y ) ;
25812: LD_ADDR_VAR 0 4
25816: PUSH
25817: LD_VAR 0 10
25821: PPUSH
25822: LD_VAR 0 11
25826: PPUSH
25827: CALL_OW 546
25831: ST_TO_ADDR
// if hex [ 1 ] then
25832: LD_VAR 0 4
25836: PUSH
25837: LD_INT 1
25839: ARRAY
25840: IFFALSE 25844
// exit ;
25842: GO 26247
// height := hex [ 2 ] ;
25844: LD_ADDR_VAR 0 15
25848: PUSH
25849: LD_VAR 0 4
25853: PUSH
25854: LD_INT 2
25856: ARRAY
25857: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
25858: LD_ADDR_VAR 0 14
25862: PUSH
25863: LD_INT 0
25865: PUSH
25866: LD_INT 2
25868: PUSH
25869: LD_INT 3
25871: PUSH
25872: LD_INT 5
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: ST_TO_ADDR
// for i in tmp do
25881: LD_ADDR_VAR 0 8
25885: PUSH
25886: LD_VAR 0 14
25890: PUSH
25891: FOR_IN
25892: IFFALSE 26062
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
25894: LD_ADDR_VAR 0 9
25898: PUSH
25899: LD_VAR 0 10
25903: PPUSH
25904: LD_VAR 0 8
25908: PPUSH
25909: LD_INT 5
25911: PPUSH
25912: CALL_OW 272
25916: PUSH
25917: LD_VAR 0 11
25921: PPUSH
25922: LD_VAR 0 8
25926: PPUSH
25927: LD_INT 5
25929: PPUSH
25930: CALL_OW 273
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
25939: LD_VAR 0 9
25943: PUSH
25944: LD_INT 1
25946: ARRAY
25947: PPUSH
25948: LD_VAR 0 9
25952: PUSH
25953: LD_INT 2
25955: ARRAY
25956: PPUSH
25957: CALL_OW 488
25961: IFFALSE 26060
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
25963: LD_ADDR_VAR 0 4
25967: PUSH
25968: LD_VAR 0 9
25972: PUSH
25973: LD_INT 1
25975: ARRAY
25976: PPUSH
25977: LD_VAR 0 9
25981: PUSH
25982: LD_INT 2
25984: ARRAY
25985: PPUSH
25986: CALL_OW 546
25990: ST_TO_ADDR
// if hex [ 1 ] then
25991: LD_VAR 0 4
25995: PUSH
25996: LD_INT 1
25998: ARRAY
25999: IFFALSE 26003
// continue ;
26001: GO 25891
// h := hex [ 2 ] ;
26003: LD_ADDR_VAR 0 13
26007: PUSH
26008: LD_VAR 0 4
26012: PUSH
26013: LD_INT 2
26015: ARRAY
26016: ST_TO_ADDR
// if h + 7 < height then
26017: LD_VAR 0 13
26021: PUSH
26022: LD_INT 7
26024: PLUS
26025: PUSH
26026: LD_VAR 0 15
26030: LESS
26031: IFFALSE 26060
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26033: LD_ADDR_VAR 0 18
26037: PUSH
26038: LD_INT 7
26040: PUSH
26041: LD_INT 28
26043: PUSH
26044: LD_INT 45
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: LIST
26051: PUSH
26052: LD_VAR 0 12
26056: ARRAY
26057: ST_TO_ADDR
// break ;
26058: GO 26062
// end ; end ; end ;
26060: GO 25891
26062: POP
26063: POP
// end ; if not weapon then
26064: LD_VAR 0 18
26068: NOT
26069: IFFALSE 26129
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26071: LD_ADDR_VAR 0 5
26075: PUSH
26076: LD_VAR 0 5
26080: PUSH
26081: LD_INT 11
26083: PUSH
26084: LD_INT 30
26086: PUSH
26087: LD_INT 49
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: LIST
26094: DIFF
26095: ST_TO_ADDR
// if not list then
26096: LD_VAR 0 5
26100: NOT
26101: IFFALSE 26105
// exit ;
26103: GO 26247
// weapon := list [ rand ( 1 , list ) ] ;
26105: LD_ADDR_VAR 0 18
26109: PUSH
26110: LD_VAR 0 5
26114: PUSH
26115: LD_INT 1
26117: PPUSH
26118: LD_VAR 0 5
26122: PPUSH
26123: CALL_OW 12
26127: ARRAY
26128: ST_TO_ADDR
// end ; if weapon then
26129: LD_VAR 0 18
26133: IFFALSE 26247
// begin tmp := CostOfWeapon ( weapon ) ;
26135: LD_ADDR_VAR 0 14
26139: PUSH
26140: LD_VAR 0 18
26144: PPUSH
26145: CALL_OW 451
26149: ST_TO_ADDR
// j := GetBase ( tower ) ;
26150: LD_ADDR_VAR 0 9
26154: PUSH
26155: LD_VAR 0 1
26159: PPUSH
26160: CALL_OW 274
26164: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26165: LD_VAR 0 9
26169: PPUSH
26170: LD_INT 1
26172: PPUSH
26173: CALL_OW 275
26177: PUSH
26178: LD_VAR 0 14
26182: PUSH
26183: LD_INT 1
26185: ARRAY
26186: GREATEREQUAL
26187: PUSH
26188: LD_VAR 0 9
26192: PPUSH
26193: LD_INT 2
26195: PPUSH
26196: CALL_OW 275
26200: PUSH
26201: LD_VAR 0 14
26205: PUSH
26206: LD_INT 2
26208: ARRAY
26209: GREATEREQUAL
26210: AND
26211: PUSH
26212: LD_VAR 0 9
26216: PPUSH
26217: LD_INT 3
26219: PPUSH
26220: CALL_OW 275
26224: PUSH
26225: LD_VAR 0 14
26229: PUSH
26230: LD_INT 3
26232: ARRAY
26233: GREATEREQUAL
26234: AND
26235: IFFALSE 26247
// result := weapon ;
26237: LD_ADDR_VAR 0 3
26241: PUSH
26242: LD_VAR 0 18
26246: ST_TO_ADDR
// end ; end ;
26247: LD_VAR 0 3
26251: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
26252: LD_INT 0
26254: PPUSH
26255: PPUSH
// result := true ;
26256: LD_ADDR_VAR 0 3
26260: PUSH
26261: LD_INT 1
26263: ST_TO_ADDR
// if array1 = array2 then
26264: LD_VAR 0 1
26268: PUSH
26269: LD_VAR 0 2
26273: EQUAL
26274: IFFALSE 26334
// begin for i = 1 to array1 do
26276: LD_ADDR_VAR 0 4
26280: PUSH
26281: DOUBLE
26282: LD_INT 1
26284: DEC
26285: ST_TO_ADDR
26286: LD_VAR 0 1
26290: PUSH
26291: FOR_TO
26292: IFFALSE 26330
// if array1 [ i ] <> array2 [ i ] then
26294: LD_VAR 0 1
26298: PUSH
26299: LD_VAR 0 4
26303: ARRAY
26304: PUSH
26305: LD_VAR 0 2
26309: PUSH
26310: LD_VAR 0 4
26314: ARRAY
26315: NONEQUAL
26316: IFFALSE 26328
// begin result := false ;
26318: LD_ADDR_VAR 0 3
26322: PUSH
26323: LD_INT 0
26325: ST_TO_ADDR
// break ;
26326: GO 26330
// end ;
26328: GO 26291
26330: POP
26331: POP
// end else
26332: GO 26342
// result := false ;
26334: LD_ADDR_VAR 0 3
26338: PUSH
26339: LD_INT 0
26341: ST_TO_ADDR
// end ;
26342: LD_VAR 0 3
26346: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
26347: LD_INT 0
26349: PPUSH
26350: PPUSH
// if not array1 or not array2 then
26351: LD_VAR 0 1
26355: NOT
26356: PUSH
26357: LD_VAR 0 2
26361: NOT
26362: OR
26363: IFFALSE 26367
// exit ;
26365: GO 26431
// result := true ;
26367: LD_ADDR_VAR 0 3
26371: PUSH
26372: LD_INT 1
26374: ST_TO_ADDR
// for i = 1 to array1 do
26375: LD_ADDR_VAR 0 4
26379: PUSH
26380: DOUBLE
26381: LD_INT 1
26383: DEC
26384: ST_TO_ADDR
26385: LD_VAR 0 1
26389: PUSH
26390: FOR_TO
26391: IFFALSE 26429
// if array1 [ i ] <> array2 [ i ] then
26393: LD_VAR 0 1
26397: PUSH
26398: LD_VAR 0 4
26402: ARRAY
26403: PUSH
26404: LD_VAR 0 2
26408: PUSH
26409: LD_VAR 0 4
26413: ARRAY
26414: NONEQUAL
26415: IFFALSE 26427
// begin result := false ;
26417: LD_ADDR_VAR 0 3
26421: PUSH
26422: LD_INT 0
26424: ST_TO_ADDR
// break ;
26425: GO 26429
// end ;
26427: GO 26390
26429: POP
26430: POP
// end ;
26431: LD_VAR 0 3
26435: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
26436: LD_INT 0
26438: PPUSH
26439: PPUSH
26440: PPUSH
// pom := GetBase ( fac ) ;
26441: LD_ADDR_VAR 0 5
26445: PUSH
26446: LD_VAR 0 1
26450: PPUSH
26451: CALL_OW 274
26455: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
26456: LD_ADDR_VAR 0 4
26460: PUSH
26461: LD_VAR 0 2
26465: PUSH
26466: LD_INT 1
26468: ARRAY
26469: PPUSH
26470: LD_VAR 0 2
26474: PUSH
26475: LD_INT 2
26477: ARRAY
26478: PPUSH
26479: LD_VAR 0 2
26483: PUSH
26484: LD_INT 3
26486: ARRAY
26487: PPUSH
26488: LD_VAR 0 2
26492: PUSH
26493: LD_INT 4
26495: ARRAY
26496: PPUSH
26497: CALL_OW 449
26501: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26502: LD_ADDR_VAR 0 3
26506: PUSH
26507: LD_VAR 0 5
26511: PPUSH
26512: LD_INT 1
26514: PPUSH
26515: CALL_OW 275
26519: PUSH
26520: LD_VAR 0 4
26524: PUSH
26525: LD_INT 1
26527: ARRAY
26528: GREATEREQUAL
26529: PUSH
26530: LD_VAR 0 5
26534: PPUSH
26535: LD_INT 2
26537: PPUSH
26538: CALL_OW 275
26542: PUSH
26543: LD_VAR 0 4
26547: PUSH
26548: LD_INT 2
26550: ARRAY
26551: GREATEREQUAL
26552: AND
26553: PUSH
26554: LD_VAR 0 5
26558: PPUSH
26559: LD_INT 3
26561: PPUSH
26562: CALL_OW 275
26566: PUSH
26567: LD_VAR 0 4
26571: PUSH
26572: LD_INT 3
26574: ARRAY
26575: GREATEREQUAL
26576: AND
26577: ST_TO_ADDR
// end ;
26578: LD_VAR 0 3
26582: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
26583: LD_INT 0
26585: PPUSH
26586: PPUSH
26587: PPUSH
26588: PPUSH
// pom := GetBase ( building ) ;
26589: LD_ADDR_VAR 0 3
26593: PUSH
26594: LD_VAR 0 1
26598: PPUSH
26599: CALL_OW 274
26603: ST_TO_ADDR
// if not pom then
26604: LD_VAR 0 3
26608: NOT
26609: IFFALSE 26613
// exit ;
26611: GO 26783
// btype := GetBType ( building ) ;
26613: LD_ADDR_VAR 0 5
26617: PUSH
26618: LD_VAR 0 1
26622: PPUSH
26623: CALL_OW 266
26627: ST_TO_ADDR
// if btype = b_armoury then
26628: LD_VAR 0 5
26632: PUSH
26633: LD_INT 4
26635: EQUAL
26636: IFFALSE 26646
// btype := b_barracks ;
26638: LD_ADDR_VAR 0 5
26642: PUSH
26643: LD_INT 5
26645: ST_TO_ADDR
// if btype = b_depot then
26646: LD_VAR 0 5
26650: PUSH
26651: LD_INT 0
26653: EQUAL
26654: IFFALSE 26664
// btype := b_warehouse ;
26656: LD_ADDR_VAR 0 5
26660: PUSH
26661: LD_INT 1
26663: ST_TO_ADDR
// if btype = b_workshop then
26664: LD_VAR 0 5
26668: PUSH
26669: LD_INT 2
26671: EQUAL
26672: IFFALSE 26682
// btype := b_factory ;
26674: LD_ADDR_VAR 0 5
26678: PUSH
26679: LD_INT 3
26681: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
26682: LD_ADDR_VAR 0 4
26686: PUSH
26687: LD_VAR 0 5
26691: PPUSH
26692: LD_VAR 0 1
26696: PPUSH
26697: CALL_OW 248
26701: PPUSH
26702: CALL_OW 450
26706: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26707: LD_ADDR_VAR 0 2
26711: PUSH
26712: LD_VAR 0 3
26716: PPUSH
26717: LD_INT 1
26719: PPUSH
26720: CALL_OW 275
26724: PUSH
26725: LD_VAR 0 4
26729: PUSH
26730: LD_INT 1
26732: ARRAY
26733: GREATEREQUAL
26734: PUSH
26735: LD_VAR 0 3
26739: PPUSH
26740: LD_INT 2
26742: PPUSH
26743: CALL_OW 275
26747: PUSH
26748: LD_VAR 0 4
26752: PUSH
26753: LD_INT 2
26755: ARRAY
26756: GREATEREQUAL
26757: AND
26758: PUSH
26759: LD_VAR 0 3
26763: PPUSH
26764: LD_INT 3
26766: PPUSH
26767: CALL_OW 275
26771: PUSH
26772: LD_VAR 0 4
26776: PUSH
26777: LD_INT 3
26779: ARRAY
26780: GREATEREQUAL
26781: AND
26782: ST_TO_ADDR
// end ;
26783: LD_VAR 0 2
26787: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
26788: LD_INT 0
26790: PPUSH
26791: PPUSH
26792: PPUSH
// pom := GetBase ( building ) ;
26793: LD_ADDR_VAR 0 4
26797: PUSH
26798: LD_VAR 0 1
26802: PPUSH
26803: CALL_OW 274
26807: ST_TO_ADDR
// if not pom then
26808: LD_VAR 0 4
26812: NOT
26813: IFFALSE 26817
// exit ;
26815: GO 26918
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
26817: LD_ADDR_VAR 0 5
26821: PUSH
26822: LD_VAR 0 2
26826: PPUSH
26827: LD_VAR 0 1
26831: PPUSH
26832: CALL_OW 248
26836: PPUSH
26837: CALL_OW 450
26841: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26842: LD_ADDR_VAR 0 3
26846: PUSH
26847: LD_VAR 0 4
26851: PPUSH
26852: LD_INT 1
26854: PPUSH
26855: CALL_OW 275
26859: PUSH
26860: LD_VAR 0 5
26864: PUSH
26865: LD_INT 1
26867: ARRAY
26868: GREATEREQUAL
26869: PUSH
26870: LD_VAR 0 4
26874: PPUSH
26875: LD_INT 2
26877: PPUSH
26878: CALL_OW 275
26882: PUSH
26883: LD_VAR 0 5
26887: PUSH
26888: LD_INT 2
26890: ARRAY
26891: GREATEREQUAL
26892: AND
26893: PUSH
26894: LD_VAR 0 4
26898: PPUSH
26899: LD_INT 3
26901: PPUSH
26902: CALL_OW 275
26906: PUSH
26907: LD_VAR 0 5
26911: PUSH
26912: LD_INT 3
26914: ARRAY
26915: GREATEREQUAL
26916: AND
26917: ST_TO_ADDR
// end ;
26918: LD_VAR 0 3
26922: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
26923: LD_INT 0
26925: PPUSH
26926: PPUSH
26927: PPUSH
26928: PPUSH
26929: PPUSH
26930: PPUSH
26931: PPUSH
26932: PPUSH
26933: PPUSH
26934: PPUSH
26935: PPUSH
// result := false ;
26936: LD_ADDR_VAR 0 8
26940: PUSH
26941: LD_INT 0
26943: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
26944: LD_VAR 0 5
26948: NOT
26949: PUSH
26950: LD_VAR 0 1
26954: NOT
26955: OR
26956: PUSH
26957: LD_VAR 0 2
26961: NOT
26962: OR
26963: PUSH
26964: LD_VAR 0 3
26968: NOT
26969: OR
26970: IFFALSE 26974
// exit ;
26972: GO 27788
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
26974: LD_ADDR_VAR 0 14
26978: PUSH
26979: LD_VAR 0 1
26983: PPUSH
26984: LD_VAR 0 2
26988: PPUSH
26989: LD_VAR 0 3
26993: PPUSH
26994: LD_VAR 0 4
26998: PPUSH
26999: LD_VAR 0 5
27003: PUSH
27004: LD_INT 1
27006: ARRAY
27007: PPUSH
27008: CALL_OW 248
27012: PPUSH
27013: LD_INT 0
27015: PPUSH
27016: CALL 29025 0 6
27020: ST_TO_ADDR
// if not hexes then
27021: LD_VAR 0 14
27025: NOT
27026: IFFALSE 27030
// exit ;
27028: GO 27788
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27030: LD_ADDR_VAR 0 17
27034: PUSH
27035: LD_VAR 0 5
27039: PPUSH
27040: LD_INT 22
27042: PUSH
27043: LD_VAR 0 13
27047: PPUSH
27048: CALL_OW 255
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 2
27059: PUSH
27060: LD_INT 30
27062: PUSH
27063: LD_INT 0
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: LD_INT 30
27072: PUSH
27073: LD_INT 1
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: LIST
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PPUSH
27089: CALL_OW 72
27093: ST_TO_ADDR
// for i = 1 to hexes do
27094: LD_ADDR_VAR 0 9
27098: PUSH
27099: DOUBLE
27100: LD_INT 1
27102: DEC
27103: ST_TO_ADDR
27104: LD_VAR 0 14
27108: PUSH
27109: FOR_TO
27110: IFFALSE 27786
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27112: LD_ADDR_VAR 0 13
27116: PUSH
27117: LD_VAR 0 14
27121: PUSH
27122: LD_VAR 0 9
27126: ARRAY
27127: PUSH
27128: LD_INT 1
27130: ARRAY
27131: PPUSH
27132: LD_VAR 0 14
27136: PUSH
27137: LD_VAR 0 9
27141: ARRAY
27142: PUSH
27143: LD_INT 2
27145: ARRAY
27146: PPUSH
27147: CALL_OW 428
27151: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27152: LD_VAR 0 14
27156: PUSH
27157: LD_VAR 0 9
27161: ARRAY
27162: PUSH
27163: LD_INT 1
27165: ARRAY
27166: PPUSH
27167: LD_VAR 0 14
27171: PUSH
27172: LD_VAR 0 9
27176: ARRAY
27177: PUSH
27178: LD_INT 2
27180: ARRAY
27181: PPUSH
27182: CALL_OW 351
27186: PUSH
27187: LD_VAR 0 14
27191: PUSH
27192: LD_VAR 0 9
27196: ARRAY
27197: PUSH
27198: LD_INT 1
27200: ARRAY
27201: PPUSH
27202: LD_VAR 0 14
27206: PUSH
27207: LD_VAR 0 9
27211: ARRAY
27212: PUSH
27213: LD_INT 2
27215: ARRAY
27216: PPUSH
27217: CALL_OW 488
27221: NOT
27222: OR
27223: PUSH
27224: LD_VAR 0 13
27228: PPUSH
27229: CALL_OW 247
27233: PUSH
27234: LD_INT 3
27236: EQUAL
27237: OR
27238: IFFALSE 27244
// exit ;
27240: POP
27241: POP
27242: GO 27788
// if not tmp then
27244: LD_VAR 0 13
27248: NOT
27249: IFFALSE 27253
// continue ;
27251: GO 27109
// result := true ;
27253: LD_ADDR_VAR 0 8
27257: PUSH
27258: LD_INT 1
27260: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
27261: LD_VAR 0 6
27265: PUSH
27266: LD_VAR 0 13
27270: PPUSH
27271: CALL_OW 247
27275: PUSH
27276: LD_INT 2
27278: EQUAL
27279: AND
27280: PUSH
27281: LD_VAR 0 13
27285: PPUSH
27286: CALL_OW 263
27290: PUSH
27291: LD_INT 1
27293: EQUAL
27294: AND
27295: IFFALSE 27459
// begin if IsDrivenBy ( tmp ) then
27297: LD_VAR 0 13
27301: PPUSH
27302: CALL_OW 311
27306: IFFALSE 27310
// continue ;
27308: GO 27109
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
27310: LD_VAR 0 6
27314: PPUSH
27315: LD_INT 3
27317: PUSH
27318: LD_INT 60
27320: PUSH
27321: EMPTY
27322: LIST
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: LD_INT 3
27330: PUSH
27331: LD_INT 55
27333: PUSH
27334: EMPTY
27335: LIST
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PPUSH
27345: CALL_OW 72
27349: IFFALSE 27457
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
27351: LD_ADDR_VAR 0 18
27355: PUSH
27356: LD_VAR 0 6
27360: PPUSH
27361: LD_INT 3
27363: PUSH
27364: LD_INT 60
27366: PUSH
27367: EMPTY
27368: LIST
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 3
27376: PUSH
27377: LD_INT 55
27379: PUSH
27380: EMPTY
27381: LIST
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PPUSH
27391: CALL_OW 72
27395: PUSH
27396: LD_INT 1
27398: ARRAY
27399: ST_TO_ADDR
// if IsInUnit ( driver ) then
27400: LD_VAR 0 18
27404: PPUSH
27405: CALL_OW 310
27409: IFFALSE 27420
// ComExit ( driver ) ;
27411: LD_VAR 0 18
27415: PPUSH
27416: CALL 52209 0 1
// AddComEnterUnit ( driver , tmp ) ;
27420: LD_VAR 0 18
27424: PPUSH
27425: LD_VAR 0 13
27429: PPUSH
27430: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
27434: LD_VAR 0 18
27438: PPUSH
27439: LD_VAR 0 7
27443: PPUSH
27444: CALL_OW 173
// AddComExitVehicle ( driver ) ;
27448: LD_VAR 0 18
27452: PPUSH
27453: CALL_OW 181
// end ; continue ;
27457: GO 27109
// end ; if not cleaners or not tmp in cleaners then
27459: LD_VAR 0 6
27463: NOT
27464: PUSH
27465: LD_VAR 0 13
27469: PUSH
27470: LD_VAR 0 6
27474: IN
27475: NOT
27476: OR
27477: IFFALSE 27784
// begin if dep then
27479: LD_VAR 0 17
27483: IFFALSE 27619
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
27485: LD_ADDR_VAR 0 16
27489: PUSH
27490: LD_VAR 0 17
27494: PUSH
27495: LD_INT 1
27497: ARRAY
27498: PPUSH
27499: CALL_OW 250
27503: PPUSH
27504: LD_VAR 0 17
27508: PUSH
27509: LD_INT 1
27511: ARRAY
27512: PPUSH
27513: CALL_OW 254
27517: PPUSH
27518: LD_INT 5
27520: PPUSH
27521: CALL_OW 272
27525: PUSH
27526: LD_VAR 0 17
27530: PUSH
27531: LD_INT 1
27533: ARRAY
27534: PPUSH
27535: CALL_OW 251
27539: PPUSH
27540: LD_VAR 0 17
27544: PUSH
27545: LD_INT 1
27547: ARRAY
27548: PPUSH
27549: CALL_OW 254
27553: PPUSH
27554: LD_INT 5
27556: PPUSH
27557: CALL_OW 273
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
27566: LD_VAR 0 16
27570: PUSH
27571: LD_INT 1
27573: ARRAY
27574: PPUSH
27575: LD_VAR 0 16
27579: PUSH
27580: LD_INT 2
27582: ARRAY
27583: PPUSH
27584: CALL_OW 488
27588: IFFALSE 27619
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
27590: LD_VAR 0 13
27594: PPUSH
27595: LD_VAR 0 16
27599: PUSH
27600: LD_INT 1
27602: ARRAY
27603: PPUSH
27604: LD_VAR 0 16
27608: PUSH
27609: LD_INT 2
27611: ARRAY
27612: PPUSH
27613: CALL_OW 111
// continue ;
27617: GO 27109
// end ; end ; r := GetDir ( tmp ) ;
27619: LD_ADDR_VAR 0 15
27623: PUSH
27624: LD_VAR 0 13
27628: PPUSH
27629: CALL_OW 254
27633: ST_TO_ADDR
// if r = 5 then
27634: LD_VAR 0 15
27638: PUSH
27639: LD_INT 5
27641: EQUAL
27642: IFFALSE 27652
// r := 0 ;
27644: LD_ADDR_VAR 0 15
27648: PUSH
27649: LD_INT 0
27651: ST_TO_ADDR
// for j = r to 5 do
27652: LD_ADDR_VAR 0 10
27656: PUSH
27657: DOUBLE
27658: LD_VAR 0 15
27662: DEC
27663: ST_TO_ADDR
27664: LD_INT 5
27666: PUSH
27667: FOR_TO
27668: IFFALSE 27782
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
27670: LD_ADDR_VAR 0 11
27674: PUSH
27675: LD_VAR 0 13
27679: PPUSH
27680: CALL_OW 250
27684: PPUSH
27685: LD_VAR 0 10
27689: PPUSH
27690: LD_INT 2
27692: PPUSH
27693: CALL_OW 272
27697: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
27698: LD_ADDR_VAR 0 12
27702: PUSH
27703: LD_VAR 0 13
27707: PPUSH
27708: CALL_OW 251
27712: PPUSH
27713: LD_VAR 0 10
27717: PPUSH
27718: LD_INT 2
27720: PPUSH
27721: CALL_OW 273
27725: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
27726: LD_VAR 0 11
27730: PPUSH
27731: LD_VAR 0 12
27735: PPUSH
27736: CALL_OW 488
27740: PUSH
27741: LD_VAR 0 11
27745: PPUSH
27746: LD_VAR 0 12
27750: PPUSH
27751: CALL_OW 428
27755: NOT
27756: AND
27757: IFFALSE 27780
// begin ComMoveXY ( tmp , _x , _y ) ;
27759: LD_VAR 0 13
27763: PPUSH
27764: LD_VAR 0 11
27768: PPUSH
27769: LD_VAR 0 12
27773: PPUSH
27774: CALL_OW 111
// break ;
27778: GO 27782
// end ; end ;
27780: GO 27667
27782: POP
27783: POP
// end ; end ;
27784: GO 27109
27786: POP
27787: POP
// end ;
27788: LD_VAR 0 8
27792: RET
// export function BuildingTechInvented ( side , btype ) ; begin
27793: LD_INT 0
27795: PPUSH
// result := true ;
27796: LD_ADDR_VAR 0 3
27800: PUSH
27801: LD_INT 1
27803: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
27804: LD_VAR 0 2
27808: PUSH
27809: LD_INT 24
27811: DOUBLE
27812: EQUAL
27813: IFTRUE 27823
27815: LD_INT 33
27817: DOUBLE
27818: EQUAL
27819: IFTRUE 27823
27821: GO 27848
27823: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
27824: LD_ADDR_VAR 0 3
27828: PUSH
27829: LD_INT 32
27831: PPUSH
27832: LD_VAR 0 1
27836: PPUSH
27837: CALL_OW 321
27841: PUSH
27842: LD_INT 2
27844: EQUAL
27845: ST_TO_ADDR
27846: GO 28168
27848: LD_INT 20
27850: DOUBLE
27851: EQUAL
27852: IFTRUE 27856
27854: GO 27881
27856: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
27857: LD_ADDR_VAR 0 3
27861: PUSH
27862: LD_INT 6
27864: PPUSH
27865: LD_VAR 0 1
27869: PPUSH
27870: CALL_OW 321
27874: PUSH
27875: LD_INT 2
27877: EQUAL
27878: ST_TO_ADDR
27879: GO 28168
27881: LD_INT 22
27883: DOUBLE
27884: EQUAL
27885: IFTRUE 27895
27887: LD_INT 36
27889: DOUBLE
27890: EQUAL
27891: IFTRUE 27895
27893: GO 27920
27895: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
27896: LD_ADDR_VAR 0 3
27900: PUSH
27901: LD_INT 15
27903: PPUSH
27904: LD_VAR 0 1
27908: PPUSH
27909: CALL_OW 321
27913: PUSH
27914: LD_INT 2
27916: EQUAL
27917: ST_TO_ADDR
27918: GO 28168
27920: LD_INT 30
27922: DOUBLE
27923: EQUAL
27924: IFTRUE 27928
27926: GO 27953
27928: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
27929: LD_ADDR_VAR 0 3
27933: PUSH
27934: LD_INT 20
27936: PPUSH
27937: LD_VAR 0 1
27941: PPUSH
27942: CALL_OW 321
27946: PUSH
27947: LD_INT 2
27949: EQUAL
27950: ST_TO_ADDR
27951: GO 28168
27953: LD_INT 28
27955: DOUBLE
27956: EQUAL
27957: IFTRUE 27967
27959: LD_INT 21
27961: DOUBLE
27962: EQUAL
27963: IFTRUE 27967
27965: GO 27992
27967: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
27968: LD_ADDR_VAR 0 3
27972: PUSH
27973: LD_INT 21
27975: PPUSH
27976: LD_VAR 0 1
27980: PPUSH
27981: CALL_OW 321
27985: PUSH
27986: LD_INT 2
27988: EQUAL
27989: ST_TO_ADDR
27990: GO 28168
27992: LD_INT 16
27994: DOUBLE
27995: EQUAL
27996: IFTRUE 28000
27998: GO 28027
28000: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28001: LD_ADDR_VAR 0 3
28005: PUSH
28006: LD_EXP 113
28010: PPUSH
28011: LD_VAR 0 1
28015: PPUSH
28016: CALL_OW 321
28020: PUSH
28021: LD_INT 2
28023: EQUAL
28024: ST_TO_ADDR
28025: GO 28168
28027: LD_INT 19
28029: DOUBLE
28030: EQUAL
28031: IFTRUE 28041
28033: LD_INT 23
28035: DOUBLE
28036: EQUAL
28037: IFTRUE 28041
28039: GO 28068
28041: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28042: LD_ADDR_VAR 0 3
28046: PUSH
28047: LD_EXP 112
28051: PPUSH
28052: LD_VAR 0 1
28056: PPUSH
28057: CALL_OW 321
28061: PUSH
28062: LD_INT 2
28064: EQUAL
28065: ST_TO_ADDR
28066: GO 28168
28068: LD_INT 17
28070: DOUBLE
28071: EQUAL
28072: IFTRUE 28076
28074: GO 28101
28076: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28077: LD_ADDR_VAR 0 3
28081: PUSH
28082: LD_INT 39
28084: PPUSH
28085: LD_VAR 0 1
28089: PPUSH
28090: CALL_OW 321
28094: PUSH
28095: LD_INT 2
28097: EQUAL
28098: ST_TO_ADDR
28099: GO 28168
28101: LD_INT 18
28103: DOUBLE
28104: EQUAL
28105: IFTRUE 28109
28107: GO 28134
28109: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28110: LD_ADDR_VAR 0 3
28114: PUSH
28115: LD_INT 40
28117: PPUSH
28118: LD_VAR 0 1
28122: PPUSH
28123: CALL_OW 321
28127: PUSH
28128: LD_INT 2
28130: EQUAL
28131: ST_TO_ADDR
28132: GO 28168
28134: LD_INT 27
28136: DOUBLE
28137: EQUAL
28138: IFTRUE 28142
28140: GO 28167
28142: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28143: LD_ADDR_VAR 0 3
28147: PUSH
28148: LD_INT 35
28150: PPUSH
28151: LD_VAR 0 1
28155: PPUSH
28156: CALL_OW 321
28160: PUSH
28161: LD_INT 2
28163: EQUAL
28164: ST_TO_ADDR
28165: GO 28168
28167: POP
// end ;
28168: LD_VAR 0 3
28172: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
28173: LD_INT 0
28175: PPUSH
28176: PPUSH
28177: PPUSH
28178: PPUSH
28179: PPUSH
28180: PPUSH
28181: PPUSH
28182: PPUSH
28183: PPUSH
28184: PPUSH
28185: PPUSH
// result := false ;
28186: LD_ADDR_VAR 0 6
28190: PUSH
28191: LD_INT 0
28193: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28194: LD_VAR 0 1
28198: NOT
28199: PUSH
28200: LD_VAR 0 1
28204: PPUSH
28205: CALL_OW 266
28209: PUSH
28210: LD_INT 0
28212: PUSH
28213: LD_INT 1
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: IN
28220: NOT
28221: OR
28222: PUSH
28223: LD_VAR 0 2
28227: NOT
28228: OR
28229: PUSH
28230: LD_VAR 0 5
28234: PUSH
28235: LD_INT 0
28237: PUSH
28238: LD_INT 1
28240: PUSH
28241: LD_INT 2
28243: PUSH
28244: LD_INT 3
28246: PUSH
28247: LD_INT 4
28249: PUSH
28250: LD_INT 5
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: IN
28261: NOT
28262: OR
28263: PUSH
28264: LD_VAR 0 3
28268: PPUSH
28269: LD_VAR 0 4
28273: PPUSH
28274: CALL_OW 488
28278: NOT
28279: OR
28280: IFFALSE 28284
// exit ;
28282: GO 29020
// side := GetSide ( depot ) ;
28284: LD_ADDR_VAR 0 9
28288: PUSH
28289: LD_VAR 0 1
28293: PPUSH
28294: CALL_OW 255
28298: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
28299: LD_VAR 0 9
28303: PPUSH
28304: LD_VAR 0 2
28308: PPUSH
28309: CALL 27793 0 2
28313: NOT
28314: IFFALSE 28318
// exit ;
28316: GO 29020
// pom := GetBase ( depot ) ;
28318: LD_ADDR_VAR 0 10
28322: PUSH
28323: LD_VAR 0 1
28327: PPUSH
28328: CALL_OW 274
28332: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
28333: LD_ADDR_VAR 0 11
28337: PUSH
28338: LD_VAR 0 2
28342: PPUSH
28343: LD_VAR 0 1
28347: PPUSH
28348: CALL_OW 248
28352: PPUSH
28353: CALL_OW 450
28357: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
28358: LD_VAR 0 10
28362: PPUSH
28363: LD_INT 1
28365: PPUSH
28366: CALL_OW 275
28370: PUSH
28371: LD_VAR 0 11
28375: PUSH
28376: LD_INT 1
28378: ARRAY
28379: GREATEREQUAL
28380: PUSH
28381: LD_VAR 0 10
28385: PPUSH
28386: LD_INT 2
28388: PPUSH
28389: CALL_OW 275
28393: PUSH
28394: LD_VAR 0 11
28398: PUSH
28399: LD_INT 2
28401: ARRAY
28402: GREATEREQUAL
28403: AND
28404: PUSH
28405: LD_VAR 0 10
28409: PPUSH
28410: LD_INT 3
28412: PPUSH
28413: CALL_OW 275
28417: PUSH
28418: LD_VAR 0 11
28422: PUSH
28423: LD_INT 3
28425: ARRAY
28426: GREATEREQUAL
28427: AND
28428: NOT
28429: IFFALSE 28433
// exit ;
28431: GO 29020
// if GetBType ( depot ) = b_depot then
28433: LD_VAR 0 1
28437: PPUSH
28438: CALL_OW 266
28442: PUSH
28443: LD_INT 0
28445: EQUAL
28446: IFFALSE 28458
// dist := 28 else
28448: LD_ADDR_VAR 0 14
28452: PUSH
28453: LD_INT 28
28455: ST_TO_ADDR
28456: GO 28466
// dist := 36 ;
28458: LD_ADDR_VAR 0 14
28462: PUSH
28463: LD_INT 36
28465: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
28466: LD_VAR 0 1
28470: PPUSH
28471: LD_VAR 0 3
28475: PPUSH
28476: LD_VAR 0 4
28480: PPUSH
28481: CALL_OW 297
28485: PUSH
28486: LD_VAR 0 14
28490: GREATER
28491: IFFALSE 28495
// exit ;
28493: GO 29020
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
28495: LD_ADDR_VAR 0 12
28499: PUSH
28500: LD_VAR 0 2
28504: PPUSH
28505: LD_VAR 0 3
28509: PPUSH
28510: LD_VAR 0 4
28514: PPUSH
28515: LD_VAR 0 5
28519: PPUSH
28520: LD_VAR 0 1
28524: PPUSH
28525: CALL_OW 248
28529: PPUSH
28530: LD_INT 0
28532: PPUSH
28533: CALL 29025 0 6
28537: ST_TO_ADDR
// if not hexes then
28538: LD_VAR 0 12
28542: NOT
28543: IFFALSE 28547
// exit ;
28545: GO 29020
// hex := GetHexInfo ( x , y ) ;
28547: LD_ADDR_VAR 0 15
28551: PUSH
28552: LD_VAR 0 3
28556: PPUSH
28557: LD_VAR 0 4
28561: PPUSH
28562: CALL_OW 546
28566: ST_TO_ADDR
// if hex [ 1 ] then
28567: LD_VAR 0 15
28571: PUSH
28572: LD_INT 1
28574: ARRAY
28575: IFFALSE 28579
// exit ;
28577: GO 29020
// height := hex [ 2 ] ;
28579: LD_ADDR_VAR 0 13
28583: PUSH
28584: LD_VAR 0 15
28588: PUSH
28589: LD_INT 2
28591: ARRAY
28592: ST_TO_ADDR
// for i = 1 to hexes do
28593: LD_ADDR_VAR 0 7
28597: PUSH
28598: DOUBLE
28599: LD_INT 1
28601: DEC
28602: ST_TO_ADDR
28603: LD_VAR 0 12
28607: PUSH
28608: FOR_TO
28609: IFFALSE 28939
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
28611: LD_VAR 0 12
28615: PUSH
28616: LD_VAR 0 7
28620: ARRAY
28621: PUSH
28622: LD_INT 1
28624: ARRAY
28625: PPUSH
28626: LD_VAR 0 12
28630: PUSH
28631: LD_VAR 0 7
28635: ARRAY
28636: PUSH
28637: LD_INT 2
28639: ARRAY
28640: PPUSH
28641: CALL_OW 488
28645: NOT
28646: PUSH
28647: LD_VAR 0 12
28651: PUSH
28652: LD_VAR 0 7
28656: ARRAY
28657: PUSH
28658: LD_INT 1
28660: ARRAY
28661: PPUSH
28662: LD_VAR 0 12
28666: PUSH
28667: LD_VAR 0 7
28671: ARRAY
28672: PUSH
28673: LD_INT 2
28675: ARRAY
28676: PPUSH
28677: CALL_OW 428
28681: PUSH
28682: LD_INT 0
28684: GREATER
28685: OR
28686: PUSH
28687: LD_VAR 0 12
28691: PUSH
28692: LD_VAR 0 7
28696: ARRAY
28697: PUSH
28698: LD_INT 1
28700: ARRAY
28701: PPUSH
28702: LD_VAR 0 12
28706: PUSH
28707: LD_VAR 0 7
28711: ARRAY
28712: PUSH
28713: LD_INT 2
28715: ARRAY
28716: PPUSH
28717: CALL_OW 351
28721: OR
28722: IFFALSE 28728
// exit ;
28724: POP
28725: POP
28726: GO 29020
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28728: LD_ADDR_VAR 0 8
28732: PUSH
28733: LD_VAR 0 12
28737: PUSH
28738: LD_VAR 0 7
28742: ARRAY
28743: PUSH
28744: LD_INT 1
28746: ARRAY
28747: PPUSH
28748: LD_VAR 0 12
28752: PUSH
28753: LD_VAR 0 7
28757: ARRAY
28758: PUSH
28759: LD_INT 2
28761: ARRAY
28762: PPUSH
28763: CALL_OW 546
28767: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
28768: LD_VAR 0 8
28772: PUSH
28773: LD_INT 1
28775: ARRAY
28776: PUSH
28777: LD_VAR 0 8
28781: PUSH
28782: LD_INT 2
28784: ARRAY
28785: PUSH
28786: LD_VAR 0 13
28790: PUSH
28791: LD_INT 2
28793: PLUS
28794: GREATER
28795: OR
28796: PUSH
28797: LD_VAR 0 8
28801: PUSH
28802: LD_INT 2
28804: ARRAY
28805: PUSH
28806: LD_VAR 0 13
28810: PUSH
28811: LD_INT 2
28813: MINUS
28814: LESS
28815: OR
28816: PUSH
28817: LD_VAR 0 8
28821: PUSH
28822: LD_INT 3
28824: ARRAY
28825: PUSH
28826: LD_INT 0
28828: PUSH
28829: LD_INT 8
28831: PUSH
28832: LD_INT 9
28834: PUSH
28835: LD_INT 10
28837: PUSH
28838: LD_INT 11
28840: PUSH
28841: LD_INT 12
28843: PUSH
28844: LD_INT 13
28846: PUSH
28847: LD_INT 16
28849: PUSH
28850: LD_INT 17
28852: PUSH
28853: LD_INT 18
28855: PUSH
28856: LD_INT 19
28858: PUSH
28859: LD_INT 20
28861: PUSH
28862: LD_INT 21
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: IN
28880: NOT
28881: OR
28882: PUSH
28883: LD_VAR 0 8
28887: PUSH
28888: LD_INT 5
28890: ARRAY
28891: NOT
28892: OR
28893: PUSH
28894: LD_VAR 0 8
28898: PUSH
28899: LD_INT 6
28901: ARRAY
28902: PUSH
28903: LD_INT 1
28905: PUSH
28906: LD_INT 2
28908: PUSH
28909: LD_INT 7
28911: PUSH
28912: LD_INT 9
28914: PUSH
28915: LD_INT 10
28917: PUSH
28918: LD_INT 11
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: IN
28929: NOT
28930: OR
28931: IFFALSE 28937
// exit ;
28933: POP
28934: POP
28935: GO 29020
// end ;
28937: GO 28608
28939: POP
28940: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
28941: LD_VAR 0 9
28945: PPUSH
28946: LD_VAR 0 3
28950: PPUSH
28951: LD_VAR 0 4
28955: PPUSH
28956: LD_INT 20
28958: PPUSH
28959: CALL 20966 0 4
28963: PUSH
28964: LD_INT 4
28966: ARRAY
28967: IFFALSE 28971
// exit ;
28969: GO 29020
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
28971: LD_VAR 0 2
28975: PUSH
28976: LD_INT 29
28978: PUSH
28979: LD_INT 30
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: IN
28986: PUSH
28987: LD_VAR 0 3
28991: PPUSH
28992: LD_VAR 0 4
28996: PPUSH
28997: LD_VAR 0 9
29001: PPUSH
29002: CALL_OW 440
29006: NOT
29007: AND
29008: IFFALSE 29012
// exit ;
29010: GO 29020
// result := true ;
29012: LD_ADDR_VAR 0 6
29016: PUSH
29017: LD_INT 1
29019: ST_TO_ADDR
// end ;
29020: LD_VAR 0 6
29024: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29025: LD_INT 0
29027: PPUSH
29028: PPUSH
29029: PPUSH
29030: PPUSH
29031: PPUSH
29032: PPUSH
29033: PPUSH
29034: PPUSH
29035: PPUSH
29036: PPUSH
29037: PPUSH
29038: PPUSH
29039: PPUSH
29040: PPUSH
29041: PPUSH
29042: PPUSH
29043: PPUSH
29044: PPUSH
29045: PPUSH
29046: PPUSH
29047: PPUSH
29048: PPUSH
29049: PPUSH
29050: PPUSH
29051: PPUSH
29052: PPUSH
29053: PPUSH
29054: PPUSH
29055: PPUSH
29056: PPUSH
29057: PPUSH
29058: PPUSH
29059: PPUSH
29060: PPUSH
29061: PPUSH
29062: PPUSH
29063: PPUSH
29064: PPUSH
29065: PPUSH
29066: PPUSH
29067: PPUSH
29068: PPUSH
29069: PPUSH
29070: PPUSH
29071: PPUSH
29072: PPUSH
29073: PPUSH
29074: PPUSH
29075: PPUSH
29076: PPUSH
29077: PPUSH
29078: PPUSH
29079: PPUSH
29080: PPUSH
29081: PPUSH
29082: PPUSH
29083: PPUSH
29084: PPUSH
// result = [ ] ;
29085: LD_ADDR_VAR 0 7
29089: PUSH
29090: EMPTY
29091: ST_TO_ADDR
// temp_list = [ ] ;
29092: LD_ADDR_VAR 0 9
29096: PUSH
29097: EMPTY
29098: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29099: LD_VAR 0 4
29103: PUSH
29104: LD_INT 0
29106: PUSH
29107: LD_INT 1
29109: PUSH
29110: LD_INT 2
29112: PUSH
29113: LD_INT 3
29115: PUSH
29116: LD_INT 4
29118: PUSH
29119: LD_INT 5
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: IN
29130: NOT
29131: PUSH
29132: LD_VAR 0 1
29136: PUSH
29137: LD_INT 0
29139: PUSH
29140: LD_INT 1
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: IN
29147: PUSH
29148: LD_VAR 0 5
29152: PUSH
29153: LD_INT 1
29155: PUSH
29156: LD_INT 2
29158: PUSH
29159: LD_INT 3
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: LIST
29166: IN
29167: NOT
29168: AND
29169: OR
29170: IFFALSE 29174
// exit ;
29172: GO 47565
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29174: LD_VAR 0 1
29178: PUSH
29179: LD_INT 6
29181: PUSH
29182: LD_INT 7
29184: PUSH
29185: LD_INT 8
29187: PUSH
29188: LD_INT 13
29190: PUSH
29191: LD_INT 12
29193: PUSH
29194: LD_INT 15
29196: PUSH
29197: LD_INT 11
29199: PUSH
29200: LD_INT 14
29202: PUSH
29203: LD_INT 10
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: IN
29217: IFFALSE 29227
// btype = b_lab ;
29219: LD_ADDR_VAR 0 1
29223: PUSH
29224: LD_INT 6
29226: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
29227: LD_VAR 0 6
29231: PUSH
29232: LD_INT 0
29234: PUSH
29235: LD_INT 1
29237: PUSH
29238: LD_INT 2
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: LIST
29245: IN
29246: NOT
29247: PUSH
29248: LD_VAR 0 1
29252: PUSH
29253: LD_INT 0
29255: PUSH
29256: LD_INT 1
29258: PUSH
29259: LD_INT 2
29261: PUSH
29262: LD_INT 3
29264: PUSH
29265: LD_INT 6
29267: PUSH
29268: LD_INT 36
29270: PUSH
29271: LD_INT 4
29273: PUSH
29274: LD_INT 5
29276: PUSH
29277: LD_INT 31
29279: PUSH
29280: LD_INT 32
29282: PUSH
29283: LD_INT 33
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: IN
29299: NOT
29300: PUSH
29301: LD_VAR 0 6
29305: PUSH
29306: LD_INT 1
29308: EQUAL
29309: AND
29310: OR
29311: PUSH
29312: LD_VAR 0 1
29316: PUSH
29317: LD_INT 2
29319: PUSH
29320: LD_INT 3
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: IN
29327: NOT
29328: PUSH
29329: LD_VAR 0 6
29333: PUSH
29334: LD_INT 2
29336: EQUAL
29337: AND
29338: OR
29339: IFFALSE 29349
// mode = 0 ;
29341: LD_ADDR_VAR 0 6
29345: PUSH
29346: LD_INT 0
29348: ST_TO_ADDR
// case mode of 0 :
29349: LD_VAR 0 6
29353: PUSH
29354: LD_INT 0
29356: DOUBLE
29357: EQUAL
29358: IFTRUE 29362
29360: GO 40815
29362: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29363: LD_ADDR_VAR 0 11
29367: PUSH
29368: LD_INT 0
29370: PUSH
29371: LD_INT 0
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: LD_INT 0
29380: PUSH
29381: LD_INT 1
29383: NEG
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 1
29391: PUSH
29392: LD_INT 0
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 1
29401: PUSH
29402: LD_INT 1
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 0
29411: PUSH
29412: LD_INT 1
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 1
29421: NEG
29422: PUSH
29423: LD_INT 0
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 1
29432: NEG
29433: PUSH
29434: LD_INT 1
29436: NEG
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PUSH
29442: LD_INT 1
29444: NEG
29445: PUSH
29446: LD_INT 2
29448: NEG
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: LD_INT 0
29456: PUSH
29457: LD_INT 2
29459: NEG
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: LD_INT 1
29467: PUSH
29468: LD_INT 1
29470: NEG
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 1
29478: PUSH
29479: LD_INT 2
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 0
29488: PUSH
29489: LD_INT 2
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: LD_INT 1
29498: NEG
29499: PUSH
29500: LD_INT 1
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 1
29509: PUSH
29510: LD_INT 3
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 0
29519: PUSH
29520: LD_INT 3
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 1
29529: NEG
29530: PUSH
29531: LD_INT 2
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29556: LD_ADDR_VAR 0 12
29560: PUSH
29561: LD_INT 0
29563: PUSH
29564: LD_INT 0
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 0
29573: PUSH
29574: LD_INT 1
29576: NEG
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 1
29584: PUSH
29585: LD_INT 0
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 1
29594: PUSH
29595: LD_INT 1
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 0
29604: PUSH
29605: LD_INT 1
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 1
29614: NEG
29615: PUSH
29616: LD_INT 0
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 1
29625: NEG
29626: PUSH
29627: LD_INT 1
29629: NEG
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 1
29637: PUSH
29638: LD_INT 1
29640: NEG
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: LD_INT 2
29648: PUSH
29649: LD_INT 0
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: LD_INT 2
29658: PUSH
29659: LD_INT 1
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 1
29668: NEG
29669: PUSH
29670: LD_INT 1
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 2
29679: NEG
29680: PUSH
29681: LD_INT 0
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 2
29690: NEG
29691: PUSH
29692: LD_INT 1
29694: NEG
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 2
29702: NEG
29703: PUSH
29704: LD_INT 1
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 3
29713: NEG
29714: PUSH
29715: LD_INT 0
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: LD_INT 3
29724: NEG
29725: PUSH
29726: LD_INT 1
29728: NEG
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29752: LD_ADDR_VAR 0 13
29756: PUSH
29757: LD_INT 0
29759: PUSH
29760: LD_INT 0
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 0
29769: PUSH
29770: LD_INT 1
29772: NEG
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: LD_INT 1
29780: PUSH
29781: LD_INT 0
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 1
29790: PUSH
29791: LD_INT 1
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: LD_INT 0
29800: PUSH
29801: LD_INT 1
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 1
29810: NEG
29811: PUSH
29812: LD_INT 0
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 1
29821: NEG
29822: PUSH
29823: LD_INT 1
29825: NEG
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 1
29833: NEG
29834: PUSH
29835: LD_INT 2
29837: NEG
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PUSH
29843: LD_INT 2
29845: PUSH
29846: LD_INT 1
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 2
29855: PUSH
29856: LD_INT 2
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 1
29865: PUSH
29866: LD_INT 2
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 2
29875: NEG
29876: PUSH
29877: LD_INT 1
29879: NEG
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 2
29887: NEG
29888: PUSH
29889: LD_INT 2
29891: NEG
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 2
29899: NEG
29900: PUSH
29901: LD_INT 3
29903: NEG
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 3
29911: NEG
29912: PUSH
29913: LD_INT 2
29915: NEG
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PUSH
29921: LD_INT 3
29923: NEG
29924: PUSH
29925: LD_INT 3
29927: NEG
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29951: LD_ADDR_VAR 0 14
29955: PUSH
29956: LD_INT 0
29958: PUSH
29959: LD_INT 0
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: LD_INT 0
29968: PUSH
29969: LD_INT 1
29971: NEG
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: LD_INT 1
29979: PUSH
29980: LD_INT 0
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 1
29989: PUSH
29990: LD_INT 1
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: LD_INT 0
29999: PUSH
30000: LD_INT 1
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: LD_INT 1
30009: NEG
30010: PUSH
30011: LD_INT 0
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 1
30020: NEG
30021: PUSH
30022: LD_INT 1
30024: NEG
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 1
30032: NEG
30033: PUSH
30034: LD_INT 2
30036: NEG
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 0
30044: PUSH
30045: LD_INT 2
30047: NEG
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 1
30055: PUSH
30056: LD_INT 1
30058: NEG
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 1
30066: PUSH
30067: LD_INT 2
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 0
30076: PUSH
30077: LD_INT 2
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 1
30086: NEG
30087: PUSH
30088: LD_INT 1
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 1
30097: NEG
30098: PUSH
30099: LD_INT 3
30101: NEG
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: LD_INT 0
30109: PUSH
30110: LD_INT 3
30112: NEG
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 1
30120: PUSH
30121: LD_INT 2
30123: NEG
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30147: LD_ADDR_VAR 0 15
30151: PUSH
30152: LD_INT 0
30154: PUSH
30155: LD_INT 0
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 0
30164: PUSH
30165: LD_INT 1
30167: NEG
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 1
30175: PUSH
30176: LD_INT 0
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: LD_INT 1
30185: PUSH
30186: LD_INT 1
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 0
30195: PUSH
30196: LD_INT 1
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 1
30205: NEG
30206: PUSH
30207: LD_INT 0
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: LD_INT 1
30216: NEG
30217: PUSH
30218: LD_INT 1
30220: NEG
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 1
30228: PUSH
30229: LD_INT 1
30231: NEG
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 2
30239: PUSH
30240: LD_INT 0
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 2
30249: PUSH
30250: LD_INT 1
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 1
30259: NEG
30260: PUSH
30261: LD_INT 1
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 2
30270: NEG
30271: PUSH
30272: LD_INT 0
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 2
30281: NEG
30282: PUSH
30283: LD_INT 1
30285: NEG
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 2
30293: PUSH
30294: LD_INT 1
30296: NEG
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 3
30304: PUSH
30305: LD_INT 0
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 3
30314: PUSH
30315: LD_INT 1
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30340: LD_ADDR_VAR 0 16
30344: PUSH
30345: LD_INT 0
30347: PUSH
30348: LD_INT 0
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 0
30357: PUSH
30358: LD_INT 1
30360: NEG
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 1
30368: PUSH
30369: LD_INT 0
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 1
30378: PUSH
30379: LD_INT 1
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PUSH
30386: LD_INT 0
30388: PUSH
30389: LD_INT 1
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 1
30398: NEG
30399: PUSH
30400: LD_INT 0
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 1
30409: NEG
30410: PUSH
30411: LD_INT 1
30413: NEG
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 1
30421: NEG
30422: PUSH
30423: LD_INT 2
30425: NEG
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 2
30433: PUSH
30434: LD_INT 1
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 2
30443: PUSH
30444: LD_INT 2
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 1
30453: PUSH
30454: LD_INT 2
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 2
30463: NEG
30464: PUSH
30465: LD_INT 1
30467: NEG
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 2
30475: NEG
30476: PUSH
30477: LD_INT 2
30479: NEG
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: PUSH
30485: LD_INT 3
30487: PUSH
30488: LD_INT 2
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 3
30497: PUSH
30498: LD_INT 3
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: LD_INT 2
30507: PUSH
30508: LD_INT 3
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30533: LD_ADDR_VAR 0 17
30537: PUSH
30538: LD_INT 0
30540: PUSH
30541: LD_INT 0
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 0
30550: PUSH
30551: LD_INT 1
30553: NEG
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 1
30561: PUSH
30562: LD_INT 0
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 1
30571: PUSH
30572: LD_INT 1
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 0
30581: PUSH
30582: LD_INT 1
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 1
30591: NEG
30592: PUSH
30593: LD_INT 0
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 1
30602: NEG
30603: PUSH
30604: LD_INT 1
30606: NEG
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: LD_INT 1
30614: NEG
30615: PUSH
30616: LD_INT 2
30618: NEG
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 0
30626: PUSH
30627: LD_INT 2
30629: NEG
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 1
30637: PUSH
30638: LD_INT 1
30640: NEG
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 2
30648: PUSH
30649: LD_INT 0
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 2
30658: PUSH
30659: LD_INT 1
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 2
30668: PUSH
30669: LD_INT 2
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 1
30678: PUSH
30679: LD_INT 2
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 0
30688: PUSH
30689: LD_INT 2
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 1
30698: NEG
30699: PUSH
30700: LD_INT 1
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 2
30709: NEG
30710: PUSH
30711: LD_INT 0
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 2
30720: NEG
30721: PUSH
30722: LD_INT 1
30724: NEG
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 2
30732: NEG
30733: PUSH
30734: LD_INT 2
30736: NEG
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30763: LD_ADDR_VAR 0 18
30767: PUSH
30768: LD_INT 0
30770: PUSH
30771: LD_INT 0
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 0
30780: PUSH
30781: LD_INT 1
30783: NEG
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 1
30791: PUSH
30792: LD_INT 0
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 1
30801: PUSH
30802: LD_INT 1
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 0
30811: PUSH
30812: LD_INT 1
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 1
30821: NEG
30822: PUSH
30823: LD_INT 0
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 1
30832: NEG
30833: PUSH
30834: LD_INT 1
30836: NEG
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 1
30844: NEG
30845: PUSH
30846: LD_INT 2
30848: NEG
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 0
30856: PUSH
30857: LD_INT 2
30859: NEG
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 1
30867: PUSH
30868: LD_INT 1
30870: NEG
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 2
30878: PUSH
30879: LD_INT 0
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: LD_INT 2
30888: PUSH
30889: LD_INT 1
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: LD_INT 2
30898: PUSH
30899: LD_INT 2
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 1
30908: PUSH
30909: LD_INT 2
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 0
30918: PUSH
30919: LD_INT 2
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 1
30928: NEG
30929: PUSH
30930: LD_INT 1
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 2
30939: NEG
30940: PUSH
30941: LD_INT 0
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 2
30950: NEG
30951: PUSH
30952: LD_INT 1
30954: NEG
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 2
30962: NEG
30963: PUSH
30964: LD_INT 2
30966: NEG
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30993: LD_ADDR_VAR 0 19
30997: PUSH
30998: LD_INT 0
31000: PUSH
31001: LD_INT 0
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 0
31010: PUSH
31011: LD_INT 1
31013: NEG
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 1
31021: PUSH
31022: LD_INT 0
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 1
31031: PUSH
31032: LD_INT 1
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 0
31041: PUSH
31042: LD_INT 1
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 1
31051: NEG
31052: PUSH
31053: LD_INT 0
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 1
31062: NEG
31063: PUSH
31064: LD_INT 1
31066: NEG
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 1
31074: NEG
31075: PUSH
31076: LD_INT 2
31078: NEG
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 0
31086: PUSH
31087: LD_INT 2
31089: NEG
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 1
31097: PUSH
31098: LD_INT 1
31100: NEG
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 2
31108: PUSH
31109: LD_INT 0
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 2
31118: PUSH
31119: LD_INT 1
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 2
31128: PUSH
31129: LD_INT 2
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 1
31138: PUSH
31139: LD_INT 2
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 0
31148: PUSH
31149: LD_INT 2
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 1
31158: NEG
31159: PUSH
31160: LD_INT 1
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 2
31169: NEG
31170: PUSH
31171: LD_INT 0
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 2
31180: NEG
31181: PUSH
31182: LD_INT 1
31184: NEG
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 2
31192: NEG
31193: PUSH
31194: LD_INT 2
31196: NEG
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31223: LD_ADDR_VAR 0 20
31227: PUSH
31228: LD_INT 0
31230: PUSH
31231: LD_INT 0
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 0
31240: PUSH
31241: LD_INT 1
31243: NEG
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 1
31251: PUSH
31252: LD_INT 0
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 1
31261: PUSH
31262: LD_INT 1
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 0
31271: PUSH
31272: LD_INT 1
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 1
31281: NEG
31282: PUSH
31283: LD_INT 0
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 1
31292: NEG
31293: PUSH
31294: LD_INT 1
31296: NEG
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 1
31304: NEG
31305: PUSH
31306: LD_INT 2
31308: NEG
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 0
31316: PUSH
31317: LD_INT 2
31319: NEG
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 1
31327: PUSH
31328: LD_INT 1
31330: NEG
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 2
31338: PUSH
31339: LD_INT 0
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 2
31348: PUSH
31349: LD_INT 1
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 2
31358: PUSH
31359: LD_INT 2
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 1
31368: PUSH
31369: LD_INT 2
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: LD_INT 0
31378: PUSH
31379: LD_INT 2
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: LD_INT 1
31388: NEG
31389: PUSH
31390: LD_INT 1
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 2
31399: NEG
31400: PUSH
31401: LD_INT 0
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 2
31410: NEG
31411: PUSH
31412: LD_INT 1
31414: NEG
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 2
31422: NEG
31423: PUSH
31424: LD_INT 2
31426: NEG
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31453: LD_ADDR_VAR 0 21
31457: PUSH
31458: LD_INT 0
31460: PUSH
31461: LD_INT 0
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 0
31470: PUSH
31471: LD_INT 1
31473: NEG
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 1
31481: PUSH
31482: LD_INT 0
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 1
31491: PUSH
31492: LD_INT 1
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PUSH
31499: LD_INT 0
31501: PUSH
31502: LD_INT 1
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 1
31511: NEG
31512: PUSH
31513: LD_INT 0
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 1
31522: NEG
31523: PUSH
31524: LD_INT 1
31526: NEG
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 1
31534: NEG
31535: PUSH
31536: LD_INT 2
31538: NEG
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 0
31546: PUSH
31547: LD_INT 2
31549: NEG
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 1
31557: PUSH
31558: LD_INT 1
31560: NEG
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 2
31568: PUSH
31569: LD_INT 0
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: PUSH
31576: LD_INT 2
31578: PUSH
31579: LD_INT 1
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 2
31588: PUSH
31589: LD_INT 2
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 1
31598: PUSH
31599: LD_INT 2
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 0
31608: PUSH
31609: LD_INT 2
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 1
31618: NEG
31619: PUSH
31620: LD_INT 1
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 2
31629: NEG
31630: PUSH
31631: LD_INT 0
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 2
31640: NEG
31641: PUSH
31642: LD_INT 1
31644: NEG
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: LD_INT 2
31652: NEG
31653: PUSH
31654: LD_INT 2
31656: NEG
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31683: LD_ADDR_VAR 0 22
31687: PUSH
31688: LD_INT 0
31690: PUSH
31691: LD_INT 0
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 0
31700: PUSH
31701: LD_INT 1
31703: NEG
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 1
31711: PUSH
31712: LD_INT 0
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 1
31721: PUSH
31722: LD_INT 1
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 0
31731: PUSH
31732: LD_INT 1
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 1
31741: NEG
31742: PUSH
31743: LD_INT 0
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 1
31752: NEG
31753: PUSH
31754: LD_INT 1
31756: NEG
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 1
31764: NEG
31765: PUSH
31766: LD_INT 2
31768: NEG
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 0
31776: PUSH
31777: LD_INT 2
31779: NEG
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 1
31787: PUSH
31788: LD_INT 1
31790: NEG
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PUSH
31796: LD_INT 2
31798: PUSH
31799: LD_INT 0
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 2
31808: PUSH
31809: LD_INT 1
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 2
31818: PUSH
31819: LD_INT 2
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 1
31828: PUSH
31829: LD_INT 2
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 0
31838: PUSH
31839: LD_INT 2
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: LD_INT 1
31848: NEG
31849: PUSH
31850: LD_INT 1
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 2
31859: NEG
31860: PUSH
31861: LD_INT 0
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 2
31870: NEG
31871: PUSH
31872: LD_INT 1
31874: NEG
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 2
31882: NEG
31883: PUSH
31884: LD_INT 2
31886: NEG
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31913: LD_ADDR_VAR 0 23
31917: PUSH
31918: LD_INT 0
31920: PUSH
31921: LD_INT 0
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 0
31930: PUSH
31931: LD_INT 1
31933: NEG
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 1
31941: PUSH
31942: LD_INT 0
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 1
31951: PUSH
31952: LD_INT 1
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 0
31961: PUSH
31962: LD_INT 1
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 1
31971: NEG
31972: PUSH
31973: LD_INT 0
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 1
31982: NEG
31983: PUSH
31984: LD_INT 1
31986: NEG
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 1
31994: NEG
31995: PUSH
31996: LD_INT 2
31998: NEG
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 0
32006: PUSH
32007: LD_INT 2
32009: NEG
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 1
32017: PUSH
32018: LD_INT 1
32020: NEG
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 2
32028: PUSH
32029: LD_INT 0
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 2
32038: PUSH
32039: LD_INT 1
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 2
32048: PUSH
32049: LD_INT 2
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 1
32058: PUSH
32059: LD_INT 2
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 0
32068: PUSH
32069: LD_INT 2
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 1
32078: NEG
32079: PUSH
32080: LD_INT 1
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 2
32089: NEG
32090: PUSH
32091: LD_INT 0
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 2
32100: NEG
32101: PUSH
32102: LD_INT 1
32104: NEG
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 2
32112: NEG
32113: PUSH
32114: LD_INT 2
32116: NEG
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 2
32124: NEG
32125: PUSH
32126: LD_INT 3
32128: NEG
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 1
32136: NEG
32137: PUSH
32138: LD_INT 3
32140: NEG
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 1
32148: PUSH
32149: LD_INT 2
32151: NEG
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 2
32159: PUSH
32160: LD_INT 1
32162: NEG
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32193: LD_ADDR_VAR 0 24
32197: PUSH
32198: LD_INT 0
32200: PUSH
32201: LD_INT 0
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 0
32210: PUSH
32211: LD_INT 1
32213: NEG
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 1
32221: PUSH
32222: LD_INT 0
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 1
32231: PUSH
32232: LD_INT 1
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 0
32241: PUSH
32242: LD_INT 1
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 1
32251: NEG
32252: PUSH
32253: LD_INT 0
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 1
32262: NEG
32263: PUSH
32264: LD_INT 1
32266: NEG
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 1
32274: NEG
32275: PUSH
32276: LD_INT 2
32278: NEG
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 0
32286: PUSH
32287: LD_INT 2
32289: NEG
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 1
32297: PUSH
32298: LD_INT 1
32300: NEG
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 2
32308: PUSH
32309: LD_INT 0
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 2
32318: PUSH
32319: LD_INT 1
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 2
32328: PUSH
32329: LD_INT 2
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 1
32338: PUSH
32339: LD_INT 2
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 0
32348: PUSH
32349: LD_INT 2
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 1
32358: NEG
32359: PUSH
32360: LD_INT 1
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 2
32369: NEG
32370: PUSH
32371: LD_INT 0
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 2
32380: NEG
32381: PUSH
32382: LD_INT 1
32384: NEG
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 2
32392: NEG
32393: PUSH
32394: LD_INT 2
32396: NEG
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 1
32404: PUSH
32405: LD_INT 2
32407: NEG
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 2
32415: PUSH
32416: LD_INT 1
32418: NEG
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 3
32426: PUSH
32427: LD_INT 1
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 3
32436: PUSH
32437: LD_INT 2
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
32469: LD_ADDR_VAR 0 25
32473: PUSH
32474: LD_INT 0
32476: PUSH
32477: LD_INT 0
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 0
32486: PUSH
32487: LD_INT 1
32489: NEG
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 1
32497: PUSH
32498: LD_INT 0
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 1
32507: PUSH
32508: LD_INT 1
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 0
32517: PUSH
32518: LD_INT 1
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 1
32527: NEG
32528: PUSH
32529: LD_INT 0
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: LD_INT 1
32538: NEG
32539: PUSH
32540: LD_INT 1
32542: NEG
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 1
32550: NEG
32551: PUSH
32552: LD_INT 2
32554: NEG
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 0
32562: PUSH
32563: LD_INT 2
32565: NEG
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 1
32573: PUSH
32574: LD_INT 1
32576: NEG
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: LD_INT 2
32584: PUSH
32585: LD_INT 0
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 2
32594: PUSH
32595: LD_INT 1
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 2
32604: PUSH
32605: LD_INT 2
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 1
32614: PUSH
32615: LD_INT 2
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 0
32624: PUSH
32625: LD_INT 2
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 1
32634: NEG
32635: PUSH
32636: LD_INT 1
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 2
32645: NEG
32646: PUSH
32647: LD_INT 0
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 2
32656: NEG
32657: PUSH
32658: LD_INT 1
32660: NEG
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 2
32668: NEG
32669: PUSH
32670: LD_INT 2
32672: NEG
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 3
32680: PUSH
32681: LD_INT 1
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 3
32690: PUSH
32691: LD_INT 2
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 2
32700: PUSH
32701: LD_INT 3
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 1
32710: PUSH
32711: LD_INT 3
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32743: LD_ADDR_VAR 0 26
32747: PUSH
32748: LD_INT 0
32750: PUSH
32751: LD_INT 0
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 0
32760: PUSH
32761: LD_INT 1
32763: NEG
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 1
32771: PUSH
32772: LD_INT 0
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 1
32781: PUSH
32782: LD_INT 1
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 0
32791: PUSH
32792: LD_INT 1
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 1
32801: NEG
32802: PUSH
32803: LD_INT 0
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 1
32812: NEG
32813: PUSH
32814: LD_INT 1
32816: NEG
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 1
32824: NEG
32825: PUSH
32826: LD_INT 2
32828: NEG
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 0
32836: PUSH
32837: LD_INT 2
32839: NEG
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: LD_INT 1
32847: PUSH
32848: LD_INT 1
32850: NEG
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 2
32858: PUSH
32859: LD_INT 0
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 2
32868: PUSH
32869: LD_INT 1
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 2
32878: PUSH
32879: LD_INT 2
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 1
32888: PUSH
32889: LD_INT 2
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 0
32898: PUSH
32899: LD_INT 2
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 1
32908: NEG
32909: PUSH
32910: LD_INT 1
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 2
32919: NEG
32920: PUSH
32921: LD_INT 0
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 2
32930: NEG
32931: PUSH
32932: LD_INT 1
32934: NEG
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 2
32942: NEG
32943: PUSH
32944: LD_INT 2
32946: NEG
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 2
32954: PUSH
32955: LD_INT 3
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 1
32964: PUSH
32965: LD_INT 3
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 1
32974: NEG
32975: PUSH
32976: LD_INT 2
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 2
32985: NEG
32986: PUSH
32987: LD_INT 1
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33019: LD_ADDR_VAR 0 27
33023: PUSH
33024: LD_INT 0
33026: PUSH
33027: LD_INT 0
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 0
33036: PUSH
33037: LD_INT 1
33039: NEG
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 1
33047: PUSH
33048: LD_INT 0
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 1
33057: PUSH
33058: LD_INT 1
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 0
33067: PUSH
33068: LD_INT 1
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 1
33077: NEG
33078: PUSH
33079: LD_INT 0
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 1
33088: NEG
33089: PUSH
33090: LD_INT 1
33092: NEG
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 1
33100: NEG
33101: PUSH
33102: LD_INT 2
33104: NEG
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 0
33112: PUSH
33113: LD_INT 2
33115: NEG
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 1
33123: PUSH
33124: LD_INT 1
33126: NEG
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 2
33134: PUSH
33135: LD_INT 0
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 2
33144: PUSH
33145: LD_INT 1
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 2
33154: PUSH
33155: LD_INT 2
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 1
33164: PUSH
33165: LD_INT 2
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 0
33174: PUSH
33175: LD_INT 2
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 1
33184: NEG
33185: PUSH
33186: LD_INT 1
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 2
33195: NEG
33196: PUSH
33197: LD_INT 0
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 2
33206: NEG
33207: PUSH
33208: LD_INT 1
33210: NEG
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 2
33218: NEG
33219: PUSH
33220: LD_INT 2
33222: NEG
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 1
33230: NEG
33231: PUSH
33232: LD_INT 2
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 2
33241: NEG
33242: PUSH
33243: LD_INT 1
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 3
33252: NEG
33253: PUSH
33254: LD_INT 1
33256: NEG
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 3
33264: NEG
33265: PUSH
33266: LD_INT 2
33268: NEG
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33299: LD_ADDR_VAR 0 28
33303: PUSH
33304: LD_INT 0
33306: PUSH
33307: LD_INT 0
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: LD_INT 0
33316: PUSH
33317: LD_INT 1
33319: NEG
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 1
33327: PUSH
33328: LD_INT 0
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 1
33337: PUSH
33338: LD_INT 1
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 0
33347: PUSH
33348: LD_INT 1
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 1
33357: NEG
33358: PUSH
33359: LD_INT 0
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 1
33368: NEG
33369: PUSH
33370: LD_INT 1
33372: NEG
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 1
33380: NEG
33381: PUSH
33382: LD_INT 2
33384: NEG
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: LD_INT 0
33392: PUSH
33393: LD_INT 2
33395: NEG
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 1
33403: PUSH
33404: LD_INT 1
33406: NEG
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: LD_INT 2
33414: PUSH
33415: LD_INT 0
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 2
33424: PUSH
33425: LD_INT 1
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 2
33434: PUSH
33435: LD_INT 2
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: LD_INT 1
33444: PUSH
33445: LD_INT 2
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 0
33454: PUSH
33455: LD_INT 2
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 1
33464: NEG
33465: PUSH
33466: LD_INT 1
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 2
33475: NEG
33476: PUSH
33477: LD_INT 0
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 2
33486: NEG
33487: PUSH
33488: LD_INT 1
33490: NEG
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: LD_INT 2
33498: NEG
33499: PUSH
33500: LD_INT 2
33502: NEG
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_INT 2
33510: NEG
33511: PUSH
33512: LD_INT 3
33514: NEG
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 1
33522: NEG
33523: PUSH
33524: LD_INT 3
33526: NEG
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 3
33534: NEG
33535: PUSH
33536: LD_INT 1
33538: NEG
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 3
33546: NEG
33547: PUSH
33548: LD_INT 2
33550: NEG
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33581: LD_ADDR_VAR 0 29
33585: PUSH
33586: LD_INT 0
33588: PUSH
33589: LD_INT 0
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 0
33598: PUSH
33599: LD_INT 1
33601: NEG
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 1
33609: PUSH
33610: LD_INT 0
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 1
33619: PUSH
33620: LD_INT 1
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 0
33629: PUSH
33630: LD_INT 1
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 1
33639: NEG
33640: PUSH
33641: LD_INT 0
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 1
33650: NEG
33651: PUSH
33652: LD_INT 1
33654: NEG
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 1
33662: NEG
33663: PUSH
33664: LD_INT 2
33666: NEG
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 0
33674: PUSH
33675: LD_INT 2
33677: NEG
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 1
33685: PUSH
33686: LD_INT 1
33688: NEG
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 2
33696: PUSH
33697: LD_INT 0
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 2
33706: PUSH
33707: LD_INT 1
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 1
33716: PUSH
33717: LD_INT 2
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 0
33726: PUSH
33727: LD_INT 2
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 1
33736: NEG
33737: PUSH
33738: LD_INT 1
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 2
33747: NEG
33748: PUSH
33749: LD_INT 1
33751: NEG
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 2
33759: NEG
33760: PUSH
33761: LD_INT 2
33763: NEG
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 2
33771: NEG
33772: PUSH
33773: LD_INT 3
33775: NEG
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 2
33783: PUSH
33784: LD_INT 1
33786: NEG
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 3
33794: PUSH
33795: LD_INT 1
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 1
33804: PUSH
33805: LD_INT 3
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 1
33814: NEG
33815: PUSH
33816: LD_INT 2
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 3
33825: NEG
33826: PUSH
33827: LD_INT 2
33829: NEG
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33860: LD_ADDR_VAR 0 30
33864: PUSH
33865: LD_INT 0
33867: PUSH
33868: LD_INT 0
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 0
33877: PUSH
33878: LD_INT 1
33880: NEG
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 1
33888: PUSH
33889: LD_INT 0
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 1
33898: PUSH
33899: LD_INT 1
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: LD_INT 0
33908: PUSH
33909: LD_INT 1
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 1
33918: NEG
33919: PUSH
33920: LD_INT 0
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 1
33929: NEG
33930: PUSH
33931: LD_INT 1
33933: NEG
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 1
33941: NEG
33942: PUSH
33943: LD_INT 2
33945: NEG
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 0
33953: PUSH
33954: LD_INT 2
33956: NEG
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 1
33964: PUSH
33965: LD_INT 1
33967: NEG
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 2
33975: PUSH
33976: LD_INT 0
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 2
33985: PUSH
33986: LD_INT 1
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 2
33995: PUSH
33996: LD_INT 2
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 1
34005: PUSH
34006: LD_INT 2
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 1
34015: NEG
34016: PUSH
34017: LD_INT 1
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 2
34026: NEG
34027: PUSH
34028: LD_INT 0
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 2
34037: NEG
34038: PUSH
34039: LD_INT 1
34041: NEG
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 1
34049: NEG
34050: PUSH
34051: LD_INT 3
34053: NEG
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 1
34061: PUSH
34062: LD_INT 2
34064: NEG
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 3
34072: PUSH
34073: LD_INT 2
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 2
34082: PUSH
34083: LD_INT 3
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 2
34092: NEG
34093: PUSH
34094: LD_INT 1
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: LD_INT 3
34103: NEG
34104: PUSH
34105: LD_INT 1
34107: NEG
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34138: LD_ADDR_VAR 0 31
34142: PUSH
34143: LD_INT 0
34145: PUSH
34146: LD_INT 0
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: LD_INT 0
34155: PUSH
34156: LD_INT 1
34158: NEG
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 1
34166: PUSH
34167: LD_INT 0
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 1
34176: PUSH
34177: LD_INT 1
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 0
34186: PUSH
34187: LD_INT 1
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 1
34196: NEG
34197: PUSH
34198: LD_INT 0
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: LD_INT 1
34207: NEG
34208: PUSH
34209: LD_INT 1
34211: NEG
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 1
34219: NEG
34220: PUSH
34221: LD_INT 2
34223: NEG
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 1
34231: PUSH
34232: LD_INT 1
34234: NEG
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 2
34242: PUSH
34243: LD_INT 0
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: LD_INT 2
34252: PUSH
34253: LD_INT 1
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 2
34262: PUSH
34263: LD_INT 2
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 1
34272: PUSH
34273: LD_INT 2
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 0
34282: PUSH
34283: LD_INT 2
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: LD_INT 1
34292: NEG
34293: PUSH
34294: LD_INT 1
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 2
34303: NEG
34304: PUSH
34305: LD_INT 1
34307: NEG
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 2
34315: NEG
34316: PUSH
34317: LD_INT 2
34319: NEG
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 2
34327: NEG
34328: PUSH
34329: LD_INT 3
34331: NEG
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 2
34339: PUSH
34340: LD_INT 1
34342: NEG
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 3
34350: PUSH
34351: LD_INT 1
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 1
34360: PUSH
34361: LD_INT 3
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 1
34370: NEG
34371: PUSH
34372: LD_INT 2
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 3
34381: NEG
34382: PUSH
34383: LD_INT 2
34385: NEG
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34416: LD_ADDR_VAR 0 32
34420: PUSH
34421: LD_INT 0
34423: PUSH
34424: LD_INT 0
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 0
34433: PUSH
34434: LD_INT 1
34436: NEG
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 1
34444: PUSH
34445: LD_INT 0
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 1
34454: PUSH
34455: LD_INT 1
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 0
34464: PUSH
34465: LD_INT 1
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_INT 1
34474: NEG
34475: PUSH
34476: LD_INT 0
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 1
34485: NEG
34486: PUSH
34487: LD_INT 1
34489: NEG
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 1
34497: NEG
34498: PUSH
34499: LD_INT 2
34501: NEG
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 0
34509: PUSH
34510: LD_INT 2
34512: NEG
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 1
34520: PUSH
34521: LD_INT 1
34523: NEG
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 2
34531: PUSH
34532: LD_INT 1
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: LD_INT 2
34541: PUSH
34542: LD_INT 2
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 1
34551: PUSH
34552: LD_INT 2
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 0
34561: PUSH
34562: LD_INT 2
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 1
34571: NEG
34572: PUSH
34573: LD_INT 1
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 2
34582: NEG
34583: PUSH
34584: LD_INT 0
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 2
34593: NEG
34594: PUSH
34595: LD_INT 1
34597: NEG
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 1
34605: NEG
34606: PUSH
34607: LD_INT 3
34609: NEG
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 1
34617: PUSH
34618: LD_INT 2
34620: NEG
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 3
34628: PUSH
34629: LD_INT 2
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: LD_INT 2
34638: PUSH
34639: LD_INT 3
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PUSH
34646: LD_INT 2
34648: NEG
34649: PUSH
34650: LD_INT 1
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 3
34659: NEG
34660: PUSH
34661: LD_INT 1
34663: NEG
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34694: LD_ADDR_VAR 0 33
34698: PUSH
34699: LD_INT 0
34701: PUSH
34702: LD_INT 0
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: LD_INT 0
34711: PUSH
34712: LD_INT 1
34714: NEG
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 1
34722: PUSH
34723: LD_INT 0
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 1
34732: PUSH
34733: LD_INT 1
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 0
34742: PUSH
34743: LD_INT 1
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 1
34752: NEG
34753: PUSH
34754: LD_INT 0
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 1
34763: NEG
34764: PUSH
34765: LD_INT 1
34767: NEG
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 1
34775: NEG
34776: PUSH
34777: LD_INT 2
34779: NEG
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 1
34787: PUSH
34788: LD_INT 1
34790: NEG
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 2
34798: PUSH
34799: LD_INT 0
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 2
34808: PUSH
34809: LD_INT 1
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 1
34818: PUSH
34819: LD_INT 2
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 0
34828: PUSH
34829: LD_INT 2
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 1
34838: NEG
34839: PUSH
34840: LD_INT 1
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 2
34849: NEG
34850: PUSH
34851: LD_INT 0
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 2
34860: NEG
34861: PUSH
34862: LD_INT 1
34864: NEG
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: LD_INT 2
34872: NEG
34873: PUSH
34874: LD_INT 2
34876: NEG
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 2
34884: NEG
34885: PUSH
34886: LD_INT 3
34888: NEG
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 2
34896: PUSH
34897: LD_INT 1
34899: NEG
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 3
34907: PUSH
34908: LD_INT 1
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 1
34917: PUSH
34918: LD_INT 3
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 1
34927: NEG
34928: PUSH
34929: LD_INT 2
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 3
34938: NEG
34939: PUSH
34940: LD_INT 2
34942: NEG
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34973: LD_ADDR_VAR 0 34
34977: PUSH
34978: LD_INT 0
34980: PUSH
34981: LD_INT 0
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 0
34990: PUSH
34991: LD_INT 1
34993: NEG
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 1
35001: PUSH
35002: LD_INT 0
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 1
35011: PUSH
35012: LD_INT 1
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 0
35021: PUSH
35022: LD_INT 1
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 1
35031: NEG
35032: PUSH
35033: LD_INT 0
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 1
35042: NEG
35043: PUSH
35044: LD_INT 1
35046: NEG
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 1
35054: NEG
35055: PUSH
35056: LD_INT 2
35058: NEG
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 0
35066: PUSH
35067: LD_INT 2
35069: NEG
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 1
35077: PUSH
35078: LD_INT 1
35080: NEG
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PUSH
35086: LD_INT 2
35088: PUSH
35089: LD_INT 1
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 2
35098: PUSH
35099: LD_INT 2
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: LD_INT 1
35108: PUSH
35109: LD_INT 2
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: LD_INT 1
35118: NEG
35119: PUSH
35120: LD_INT 1
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: PUSH
35127: LD_INT 2
35129: NEG
35130: PUSH
35131: LD_INT 0
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PUSH
35138: LD_INT 2
35140: NEG
35141: PUSH
35142: LD_INT 1
35144: NEG
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 2
35152: NEG
35153: PUSH
35154: LD_INT 2
35156: NEG
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 1
35164: NEG
35165: PUSH
35166: LD_INT 3
35168: NEG
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 1
35176: PUSH
35177: LD_INT 2
35179: NEG
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PUSH
35185: LD_INT 3
35187: PUSH
35188: LD_INT 2
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 2
35197: PUSH
35198: LD_INT 3
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 2
35207: NEG
35208: PUSH
35209: LD_INT 1
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 3
35218: NEG
35219: PUSH
35220: LD_INT 1
35222: NEG
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35253: LD_ADDR_VAR 0 35
35257: PUSH
35258: LD_INT 0
35260: PUSH
35261: LD_INT 0
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 0
35270: PUSH
35271: LD_INT 1
35273: NEG
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: PUSH
35279: LD_INT 1
35281: PUSH
35282: LD_INT 0
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 1
35291: PUSH
35292: LD_INT 1
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: LD_INT 0
35301: PUSH
35302: LD_INT 1
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 1
35311: NEG
35312: PUSH
35313: LD_INT 0
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: LD_INT 1
35322: NEG
35323: PUSH
35324: LD_INT 1
35326: NEG
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 2
35334: PUSH
35335: LD_INT 1
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 2
35344: NEG
35345: PUSH
35346: LD_INT 1
35348: NEG
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35365: LD_ADDR_VAR 0 36
35369: PUSH
35370: LD_INT 0
35372: PUSH
35373: LD_INT 0
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 0
35382: PUSH
35383: LD_INT 1
35385: NEG
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 1
35393: PUSH
35394: LD_INT 0
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 1
35403: PUSH
35404: LD_INT 1
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 0
35413: PUSH
35414: LD_INT 1
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 1
35423: NEG
35424: PUSH
35425: LD_INT 0
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 1
35434: NEG
35435: PUSH
35436: LD_INT 1
35438: NEG
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 1
35446: NEG
35447: PUSH
35448: LD_INT 2
35450: NEG
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 1
35458: PUSH
35459: LD_INT 2
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35477: LD_ADDR_VAR 0 37
35481: PUSH
35482: LD_INT 0
35484: PUSH
35485: LD_INT 0
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 0
35494: PUSH
35495: LD_INT 1
35497: NEG
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 1
35505: PUSH
35506: LD_INT 0
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 1
35515: PUSH
35516: LD_INT 1
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 0
35525: PUSH
35526: LD_INT 1
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 1
35535: NEG
35536: PUSH
35537: LD_INT 0
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 1
35546: NEG
35547: PUSH
35548: LD_INT 1
35550: NEG
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 1
35558: PUSH
35559: LD_INT 1
35561: NEG
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 1
35569: NEG
35570: PUSH
35571: LD_INT 1
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35589: LD_ADDR_VAR 0 38
35593: PUSH
35594: LD_INT 0
35596: PUSH
35597: LD_INT 0
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: LD_INT 0
35606: PUSH
35607: LD_INT 1
35609: NEG
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: LD_INT 1
35617: PUSH
35618: LD_INT 0
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: PUSH
35625: LD_INT 1
35627: PUSH
35628: LD_INT 1
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 0
35637: PUSH
35638: LD_INT 1
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 1
35647: NEG
35648: PUSH
35649: LD_INT 0
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 1
35658: NEG
35659: PUSH
35660: LD_INT 1
35662: NEG
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 2
35670: PUSH
35671: LD_INT 1
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 2
35680: NEG
35681: PUSH
35682: LD_INT 1
35684: NEG
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35701: LD_ADDR_VAR 0 39
35705: PUSH
35706: LD_INT 0
35708: PUSH
35709: LD_INT 0
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 0
35718: PUSH
35719: LD_INT 1
35721: NEG
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 1
35729: PUSH
35730: LD_INT 0
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 1
35739: PUSH
35740: LD_INT 1
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 0
35749: PUSH
35750: LD_INT 1
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 1
35759: NEG
35760: PUSH
35761: LD_INT 0
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 1
35770: NEG
35771: PUSH
35772: LD_INT 1
35774: NEG
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 1
35782: NEG
35783: PUSH
35784: LD_INT 2
35786: NEG
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 1
35794: PUSH
35795: LD_INT 2
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35813: LD_ADDR_VAR 0 40
35817: PUSH
35818: LD_INT 0
35820: PUSH
35821: LD_INT 0
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 0
35830: PUSH
35831: LD_INT 1
35833: NEG
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 1
35841: PUSH
35842: LD_INT 0
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 1
35851: PUSH
35852: LD_INT 1
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 0
35861: PUSH
35862: LD_INT 1
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 1
35871: NEG
35872: PUSH
35873: LD_INT 0
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 1
35882: NEG
35883: PUSH
35884: LD_INT 1
35886: NEG
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 1
35894: PUSH
35895: LD_INT 1
35897: NEG
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 1
35905: NEG
35906: PUSH
35907: LD_INT 1
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35925: LD_ADDR_VAR 0 41
35929: PUSH
35930: LD_INT 0
35932: PUSH
35933: LD_INT 0
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 0
35942: PUSH
35943: LD_INT 1
35945: NEG
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 1
35953: PUSH
35954: LD_INT 0
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 1
35963: PUSH
35964: LD_INT 1
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 0
35973: PUSH
35974: LD_INT 1
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 1
35983: NEG
35984: PUSH
35985: LD_INT 0
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 1
35994: NEG
35995: PUSH
35996: LD_INT 1
35998: NEG
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 1
36006: NEG
36007: PUSH
36008: LD_INT 2
36010: NEG
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 1
36018: PUSH
36019: LD_INT 1
36021: NEG
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 2
36029: PUSH
36030: LD_INT 0
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 2
36039: PUSH
36040: LD_INT 1
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 2
36049: PUSH
36050: LD_INT 2
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 1
36059: PUSH
36060: LD_INT 2
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 1
36069: NEG
36070: PUSH
36071: LD_INT 1
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 2
36080: NEG
36081: PUSH
36082: LD_INT 0
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 2
36091: NEG
36092: PUSH
36093: LD_INT 1
36095: NEG
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 2
36103: NEG
36104: PUSH
36105: LD_INT 2
36107: NEG
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 2
36115: NEG
36116: PUSH
36117: LD_INT 3
36119: NEG
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: LD_INT 2
36127: PUSH
36128: LD_INT 1
36130: NEG
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: PUSH
36136: LD_INT 3
36138: PUSH
36139: LD_INT 0
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 3
36148: PUSH
36149: LD_INT 1
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 3
36158: PUSH
36159: LD_INT 2
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 3
36168: PUSH
36169: LD_INT 3
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: LD_INT 2
36178: PUSH
36179: LD_INT 3
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 2
36188: NEG
36189: PUSH
36190: LD_INT 1
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 3
36199: NEG
36200: PUSH
36201: LD_INT 0
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 3
36210: NEG
36211: PUSH
36212: LD_INT 1
36214: NEG
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 3
36222: NEG
36223: PUSH
36224: LD_INT 2
36226: NEG
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 3
36234: NEG
36235: PUSH
36236: LD_INT 3
36238: NEG
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36275: LD_ADDR_VAR 0 42
36279: PUSH
36280: LD_INT 0
36282: PUSH
36283: LD_INT 0
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 0
36292: PUSH
36293: LD_INT 1
36295: NEG
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 1
36303: PUSH
36304: LD_INT 0
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 1
36313: PUSH
36314: LD_INT 1
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 0
36323: PUSH
36324: LD_INT 1
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: LD_INT 1
36333: NEG
36334: PUSH
36335: LD_INT 0
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: PUSH
36342: LD_INT 1
36344: NEG
36345: PUSH
36346: LD_INT 1
36348: NEG
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 1
36356: NEG
36357: PUSH
36358: LD_INT 2
36360: NEG
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 0
36368: PUSH
36369: LD_INT 2
36371: NEG
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 1
36379: PUSH
36380: LD_INT 1
36382: NEG
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 2
36390: PUSH
36391: LD_INT 1
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 2
36400: PUSH
36401: LD_INT 2
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: LD_INT 1
36410: PUSH
36411: LD_INT 2
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 0
36420: PUSH
36421: LD_INT 2
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 1
36430: NEG
36431: PUSH
36432: LD_INT 1
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 2
36441: NEG
36442: PUSH
36443: LD_INT 1
36445: NEG
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 2
36453: NEG
36454: PUSH
36455: LD_INT 2
36457: NEG
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 2
36465: NEG
36466: PUSH
36467: LD_INT 3
36469: NEG
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 1
36477: NEG
36478: PUSH
36479: LD_INT 3
36481: NEG
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 0
36489: PUSH
36490: LD_INT 3
36492: NEG
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PUSH
36498: LD_INT 1
36500: PUSH
36501: LD_INT 2
36503: NEG
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 3
36511: PUSH
36512: LD_INT 2
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 3
36521: PUSH
36522: LD_INT 3
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 2
36531: PUSH
36532: LD_INT 3
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 1
36541: PUSH
36542: LD_INT 3
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 0
36551: PUSH
36552: LD_INT 3
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 1
36561: NEG
36562: PUSH
36563: LD_INT 2
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 3
36572: NEG
36573: PUSH
36574: LD_INT 2
36576: NEG
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 3
36584: NEG
36585: PUSH
36586: LD_INT 3
36588: NEG
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36625: LD_ADDR_VAR 0 43
36629: PUSH
36630: LD_INT 0
36632: PUSH
36633: LD_INT 0
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 0
36642: PUSH
36643: LD_INT 1
36645: NEG
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 1
36653: PUSH
36654: LD_INT 0
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 1
36663: PUSH
36664: LD_INT 1
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: LD_INT 0
36673: PUSH
36674: LD_INT 1
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 1
36683: NEG
36684: PUSH
36685: LD_INT 0
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 1
36694: NEG
36695: PUSH
36696: LD_INT 1
36698: NEG
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 1
36706: NEG
36707: PUSH
36708: LD_INT 2
36710: NEG
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 0
36718: PUSH
36719: LD_INT 2
36721: NEG
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 1
36729: PUSH
36730: LD_INT 1
36732: NEG
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PUSH
36738: LD_INT 2
36740: PUSH
36741: LD_INT 0
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 2
36750: PUSH
36751: LD_INT 1
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 1
36760: PUSH
36761: LD_INT 2
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: LD_INT 0
36770: PUSH
36771: LD_INT 2
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_INT 1
36780: NEG
36781: PUSH
36782: LD_INT 1
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 2
36791: NEG
36792: PUSH
36793: LD_INT 0
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 2
36802: NEG
36803: PUSH
36804: LD_INT 1
36806: NEG
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 1
36814: NEG
36815: PUSH
36816: LD_INT 3
36818: NEG
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 0
36826: PUSH
36827: LD_INT 3
36829: NEG
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 1
36837: PUSH
36838: LD_INT 2
36840: NEG
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 2
36848: PUSH
36849: LD_INT 1
36851: NEG
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 3
36859: PUSH
36860: LD_INT 0
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: LD_INT 3
36869: PUSH
36870: LD_INT 1
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: LD_INT 1
36879: PUSH
36880: LD_INT 3
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: LD_INT 0
36889: PUSH
36890: LD_INT 3
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: LD_INT 1
36899: NEG
36900: PUSH
36901: LD_INT 2
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: LD_INT 2
36910: NEG
36911: PUSH
36912: LD_INT 1
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 3
36921: NEG
36922: PUSH
36923: LD_INT 0
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 3
36932: NEG
36933: PUSH
36934: LD_INT 1
36936: NEG
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36973: LD_ADDR_VAR 0 44
36977: PUSH
36978: LD_INT 0
36980: PUSH
36981: LD_INT 0
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 0
36990: PUSH
36991: LD_INT 1
36993: NEG
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 1
37001: PUSH
37002: LD_INT 0
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 1
37011: PUSH
37012: LD_INT 1
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 0
37021: PUSH
37022: LD_INT 1
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 1
37031: NEG
37032: PUSH
37033: LD_INT 0
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 1
37042: NEG
37043: PUSH
37044: LD_INT 1
37046: NEG
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 1
37054: NEG
37055: PUSH
37056: LD_INT 2
37058: NEG
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 1
37066: PUSH
37067: LD_INT 1
37069: NEG
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 2
37077: PUSH
37078: LD_INT 0
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 2
37087: PUSH
37088: LD_INT 1
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 2
37097: PUSH
37098: LD_INT 2
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 1
37107: PUSH
37108: LD_INT 2
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: LD_INT 1
37117: NEG
37118: PUSH
37119: LD_INT 1
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 2
37128: NEG
37129: PUSH
37130: LD_INT 0
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 2
37139: NEG
37140: PUSH
37141: LD_INT 1
37143: NEG
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 2
37151: NEG
37152: PUSH
37153: LD_INT 2
37155: NEG
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 2
37163: NEG
37164: PUSH
37165: LD_INT 3
37167: NEG
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 2
37175: PUSH
37176: LD_INT 1
37178: NEG
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 3
37186: PUSH
37187: LD_INT 0
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 3
37196: PUSH
37197: LD_INT 1
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 3
37206: PUSH
37207: LD_INT 2
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 3
37216: PUSH
37217: LD_INT 3
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 2
37226: PUSH
37227: LD_INT 3
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 2
37236: NEG
37237: PUSH
37238: LD_INT 1
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 3
37247: NEG
37248: PUSH
37249: LD_INT 0
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 3
37258: NEG
37259: PUSH
37260: LD_INT 1
37262: NEG
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 3
37270: NEG
37271: PUSH
37272: LD_INT 2
37274: NEG
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 3
37282: NEG
37283: PUSH
37284: LD_INT 3
37286: NEG
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37323: LD_ADDR_VAR 0 45
37327: PUSH
37328: LD_INT 0
37330: PUSH
37331: LD_INT 0
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 0
37340: PUSH
37341: LD_INT 1
37343: NEG
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 1
37351: PUSH
37352: LD_INT 0
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 1
37361: PUSH
37362: LD_INT 1
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: LD_INT 0
37371: PUSH
37372: LD_INT 1
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: PUSH
37379: LD_INT 1
37381: NEG
37382: PUSH
37383: LD_INT 0
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 1
37392: NEG
37393: PUSH
37394: LD_INT 1
37396: NEG
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 1
37404: NEG
37405: PUSH
37406: LD_INT 2
37408: NEG
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 0
37416: PUSH
37417: LD_INT 2
37419: NEG
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 1
37427: PUSH
37428: LD_INT 1
37430: NEG
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 2
37438: PUSH
37439: LD_INT 1
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 2
37448: PUSH
37449: LD_INT 2
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 1
37458: PUSH
37459: LD_INT 2
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 0
37468: PUSH
37469: LD_INT 2
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 1
37478: NEG
37479: PUSH
37480: LD_INT 1
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 2
37489: NEG
37490: PUSH
37491: LD_INT 1
37493: NEG
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 2
37501: NEG
37502: PUSH
37503: LD_INT 2
37505: NEG
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 2
37513: NEG
37514: PUSH
37515: LD_INT 3
37517: NEG
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 1
37525: NEG
37526: PUSH
37527: LD_INT 3
37529: NEG
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 0
37537: PUSH
37538: LD_INT 3
37540: NEG
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 1
37548: PUSH
37549: LD_INT 2
37551: NEG
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 3
37559: PUSH
37560: LD_INT 2
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 3
37569: PUSH
37570: LD_INT 3
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 2
37579: PUSH
37580: LD_INT 3
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: LD_INT 1
37589: PUSH
37590: LD_INT 3
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 0
37599: PUSH
37600: LD_INT 3
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 1
37609: NEG
37610: PUSH
37611: LD_INT 2
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 3
37620: NEG
37621: PUSH
37622: LD_INT 2
37624: NEG
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: LD_INT 3
37632: NEG
37633: PUSH
37634: LD_INT 3
37636: NEG
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37673: LD_ADDR_VAR 0 46
37677: PUSH
37678: LD_INT 0
37680: PUSH
37681: LD_INT 0
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 0
37690: PUSH
37691: LD_INT 1
37693: NEG
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 1
37701: PUSH
37702: LD_INT 0
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 1
37711: PUSH
37712: LD_INT 1
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 0
37721: PUSH
37722: LD_INT 1
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 1
37731: NEG
37732: PUSH
37733: LD_INT 0
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 1
37742: NEG
37743: PUSH
37744: LD_INT 1
37746: NEG
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 1
37754: NEG
37755: PUSH
37756: LD_INT 2
37758: NEG
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 0
37766: PUSH
37767: LD_INT 2
37769: NEG
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 1
37777: PUSH
37778: LD_INT 1
37780: NEG
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 2
37788: PUSH
37789: LD_INT 0
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 2
37798: PUSH
37799: LD_INT 1
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 1
37808: PUSH
37809: LD_INT 2
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 0
37818: PUSH
37819: LD_INT 2
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 1
37828: NEG
37829: PUSH
37830: LD_INT 1
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 2
37839: NEG
37840: PUSH
37841: LD_INT 0
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: LD_INT 2
37850: NEG
37851: PUSH
37852: LD_INT 1
37854: NEG
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 1
37862: NEG
37863: PUSH
37864: LD_INT 3
37866: NEG
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 0
37874: PUSH
37875: LD_INT 3
37877: NEG
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 1
37885: PUSH
37886: LD_INT 2
37888: NEG
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 2
37896: PUSH
37897: LD_INT 1
37899: NEG
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 3
37907: PUSH
37908: LD_INT 0
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 3
37917: PUSH
37918: LD_INT 1
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: LD_INT 1
37927: PUSH
37928: LD_INT 3
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PUSH
37935: LD_INT 0
37937: PUSH
37938: LD_INT 3
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 1
37947: NEG
37948: PUSH
37949: LD_INT 2
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 2
37958: NEG
37959: PUSH
37960: LD_INT 1
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 3
37969: NEG
37970: PUSH
37971: LD_INT 0
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 3
37980: NEG
37981: PUSH
37982: LD_INT 1
37984: NEG
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38021: LD_ADDR_VAR 0 47
38025: PUSH
38026: LD_INT 0
38028: PUSH
38029: LD_INT 0
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 0
38038: PUSH
38039: LD_INT 1
38041: NEG
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 1
38049: PUSH
38050: LD_INT 0
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: PUSH
38057: LD_INT 1
38059: PUSH
38060: LD_INT 1
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 0
38069: PUSH
38070: LD_INT 1
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 1
38079: NEG
38080: PUSH
38081: LD_INT 0
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 1
38090: NEG
38091: PUSH
38092: LD_INT 1
38094: NEG
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 1
38102: NEG
38103: PUSH
38104: LD_INT 2
38106: NEG
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 0
38114: PUSH
38115: LD_INT 2
38117: NEG
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 1
38125: PUSH
38126: LD_INT 1
38128: NEG
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 2
38136: NEG
38137: PUSH
38138: LD_INT 1
38140: NEG
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 2
38148: NEG
38149: PUSH
38150: LD_INT 2
38152: NEG
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38172: LD_ADDR_VAR 0 48
38176: PUSH
38177: LD_INT 0
38179: PUSH
38180: LD_INT 0
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 0
38189: PUSH
38190: LD_INT 1
38192: NEG
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 1
38200: PUSH
38201: LD_INT 0
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 1
38210: PUSH
38211: LD_INT 1
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 0
38220: PUSH
38221: LD_INT 1
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 1
38230: NEG
38231: PUSH
38232: LD_INT 0
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 1
38241: NEG
38242: PUSH
38243: LD_INT 1
38245: NEG
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 1
38253: NEG
38254: PUSH
38255: LD_INT 2
38257: NEG
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 0
38265: PUSH
38266: LD_INT 2
38268: NEG
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 1
38276: PUSH
38277: LD_INT 1
38279: NEG
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 2
38287: PUSH
38288: LD_INT 0
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 2
38297: PUSH
38298: LD_INT 1
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38319: LD_ADDR_VAR 0 49
38323: PUSH
38324: LD_INT 0
38326: PUSH
38327: LD_INT 0
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 0
38336: PUSH
38337: LD_INT 1
38339: NEG
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 1
38347: PUSH
38348: LD_INT 0
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 1
38357: PUSH
38358: LD_INT 1
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 0
38367: PUSH
38368: LD_INT 1
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: LD_INT 1
38377: NEG
38378: PUSH
38379: LD_INT 0
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 1
38388: NEG
38389: PUSH
38390: LD_INT 1
38392: NEG
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 1
38400: PUSH
38401: LD_INT 1
38403: NEG
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: LD_INT 2
38411: PUSH
38412: LD_INT 0
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 2
38421: PUSH
38422: LD_INT 1
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 2
38431: PUSH
38432: LD_INT 2
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 1
38441: PUSH
38442: LD_INT 2
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38463: LD_ADDR_VAR 0 50
38467: PUSH
38468: LD_INT 0
38470: PUSH
38471: LD_INT 0
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: LD_INT 0
38480: PUSH
38481: LD_INT 1
38483: NEG
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 1
38491: PUSH
38492: LD_INT 0
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 1
38501: PUSH
38502: LD_INT 1
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 0
38511: PUSH
38512: LD_INT 1
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 1
38521: NEG
38522: PUSH
38523: LD_INT 0
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 1
38532: NEG
38533: PUSH
38534: LD_INT 1
38536: NEG
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 2
38544: PUSH
38545: LD_INT 1
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 2
38554: PUSH
38555: LD_INT 2
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 1
38564: PUSH
38565: LD_INT 2
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 0
38574: PUSH
38575: LD_INT 2
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 1
38584: NEG
38585: PUSH
38586: LD_INT 1
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38607: LD_ADDR_VAR 0 51
38611: PUSH
38612: LD_INT 0
38614: PUSH
38615: LD_INT 0
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 0
38624: PUSH
38625: LD_INT 1
38627: NEG
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 1
38635: PUSH
38636: LD_INT 0
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 1
38645: PUSH
38646: LD_INT 1
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 0
38655: PUSH
38656: LD_INT 1
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 1
38665: NEG
38666: PUSH
38667: LD_INT 0
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 1
38676: NEG
38677: PUSH
38678: LD_INT 1
38680: NEG
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 1
38688: PUSH
38689: LD_INT 2
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 0
38698: PUSH
38699: LD_INT 2
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 1
38708: NEG
38709: PUSH
38710: LD_INT 1
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 2
38719: NEG
38720: PUSH
38721: LD_INT 0
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 2
38730: NEG
38731: PUSH
38732: LD_INT 1
38734: NEG
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38754: LD_ADDR_VAR 0 52
38758: PUSH
38759: LD_INT 0
38761: PUSH
38762: LD_INT 0
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 0
38771: PUSH
38772: LD_INT 1
38774: NEG
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 1
38782: PUSH
38783: LD_INT 0
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 1
38792: PUSH
38793: LD_INT 1
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 0
38802: PUSH
38803: LD_INT 1
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 1
38812: NEG
38813: PUSH
38814: LD_INT 0
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 1
38823: NEG
38824: PUSH
38825: LD_INT 1
38827: NEG
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 1
38835: NEG
38836: PUSH
38837: LD_INT 2
38839: NEG
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 1
38847: NEG
38848: PUSH
38849: LD_INT 1
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 2
38858: NEG
38859: PUSH
38860: LD_INT 0
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 2
38869: NEG
38870: PUSH
38871: LD_INT 1
38873: NEG
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 2
38881: NEG
38882: PUSH
38883: LD_INT 2
38885: NEG
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38905: LD_ADDR_VAR 0 53
38909: PUSH
38910: LD_INT 0
38912: PUSH
38913: LD_INT 0
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 0
38922: PUSH
38923: LD_INT 1
38925: NEG
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 1
38933: PUSH
38934: LD_INT 0
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 1
38943: PUSH
38944: LD_INT 1
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 0
38953: PUSH
38954: LD_INT 1
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 1
38963: NEG
38964: PUSH
38965: LD_INT 0
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 1
38974: NEG
38975: PUSH
38976: LD_INT 1
38978: NEG
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 1
38986: NEG
38987: PUSH
38988: LD_INT 2
38990: NEG
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 0
38998: PUSH
38999: LD_INT 2
39001: NEG
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 1
39009: PUSH
39010: LD_INT 1
39012: NEG
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 2
39020: PUSH
39021: LD_INT 0
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 2
39030: PUSH
39031: LD_INT 1
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 2
39040: PUSH
39041: LD_INT 2
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 1
39050: PUSH
39051: LD_INT 2
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 0
39060: PUSH
39061: LD_INT 2
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 1
39070: NEG
39071: PUSH
39072: LD_INT 1
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 2
39081: NEG
39082: PUSH
39083: LD_INT 0
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 2
39092: NEG
39093: PUSH
39094: LD_INT 1
39096: NEG
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 2
39104: NEG
39105: PUSH
39106: LD_INT 2
39108: NEG
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39135: LD_ADDR_VAR 0 54
39139: PUSH
39140: LD_INT 0
39142: PUSH
39143: LD_INT 0
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 0
39152: PUSH
39153: LD_INT 1
39155: NEG
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 1
39163: PUSH
39164: LD_INT 0
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 1
39173: PUSH
39174: LD_INT 1
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 0
39183: PUSH
39184: LD_INT 1
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 1
39193: NEG
39194: PUSH
39195: LD_INT 0
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 1
39204: NEG
39205: PUSH
39206: LD_INT 1
39208: NEG
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 1
39216: NEG
39217: PUSH
39218: LD_INT 2
39220: NEG
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 0
39228: PUSH
39229: LD_INT 2
39231: NEG
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 1
39239: PUSH
39240: LD_INT 1
39242: NEG
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 2
39250: PUSH
39251: LD_INT 0
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 2
39260: PUSH
39261: LD_INT 1
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 2
39270: PUSH
39271: LD_INT 2
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 1
39280: PUSH
39281: LD_INT 2
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 0
39290: PUSH
39291: LD_INT 2
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 1
39300: NEG
39301: PUSH
39302: LD_INT 1
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 2
39311: NEG
39312: PUSH
39313: LD_INT 0
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 2
39322: NEG
39323: PUSH
39324: LD_INT 1
39326: NEG
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 2
39334: NEG
39335: PUSH
39336: LD_INT 2
39338: NEG
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39365: LD_ADDR_VAR 0 55
39369: PUSH
39370: LD_INT 0
39372: PUSH
39373: LD_INT 0
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 0
39382: PUSH
39383: LD_INT 1
39385: NEG
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 1
39393: PUSH
39394: LD_INT 0
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 1
39403: PUSH
39404: LD_INT 1
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 0
39413: PUSH
39414: LD_INT 1
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 1
39423: NEG
39424: PUSH
39425: LD_INT 0
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 1
39434: NEG
39435: PUSH
39436: LD_INT 1
39438: NEG
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 1
39446: NEG
39447: PUSH
39448: LD_INT 2
39450: NEG
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 0
39458: PUSH
39459: LD_INT 2
39461: NEG
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 1
39469: PUSH
39470: LD_INT 1
39472: NEG
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 2
39480: PUSH
39481: LD_INT 0
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 2
39490: PUSH
39491: LD_INT 1
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 2
39500: PUSH
39501: LD_INT 2
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 1
39510: PUSH
39511: LD_INT 2
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 0
39520: PUSH
39521: LD_INT 2
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 1
39530: NEG
39531: PUSH
39532: LD_INT 1
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 2
39541: NEG
39542: PUSH
39543: LD_INT 0
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 2
39552: NEG
39553: PUSH
39554: LD_INT 1
39556: NEG
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 2
39564: NEG
39565: PUSH
39566: LD_INT 2
39568: NEG
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39595: LD_ADDR_VAR 0 56
39599: PUSH
39600: LD_INT 0
39602: PUSH
39603: LD_INT 0
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 0
39612: PUSH
39613: LD_INT 1
39615: NEG
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 1
39623: PUSH
39624: LD_INT 0
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 1
39633: PUSH
39634: LD_INT 1
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 0
39643: PUSH
39644: LD_INT 1
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 1
39653: NEG
39654: PUSH
39655: LD_INT 0
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 1
39664: NEG
39665: PUSH
39666: LD_INT 1
39668: NEG
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 1
39676: NEG
39677: PUSH
39678: LD_INT 2
39680: NEG
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 0
39688: PUSH
39689: LD_INT 2
39691: NEG
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 1
39699: PUSH
39700: LD_INT 1
39702: NEG
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 2
39710: PUSH
39711: LD_INT 0
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 2
39720: PUSH
39721: LD_INT 1
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 2
39730: PUSH
39731: LD_INT 2
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 1
39740: PUSH
39741: LD_INT 2
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 0
39750: PUSH
39751: LD_INT 2
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 1
39760: NEG
39761: PUSH
39762: LD_INT 1
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 2
39771: NEG
39772: PUSH
39773: LD_INT 0
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 2
39782: NEG
39783: PUSH
39784: LD_INT 1
39786: NEG
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 2
39794: NEG
39795: PUSH
39796: LD_INT 2
39798: NEG
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39825: LD_ADDR_VAR 0 57
39829: PUSH
39830: LD_INT 0
39832: PUSH
39833: LD_INT 0
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 0
39842: PUSH
39843: LD_INT 1
39845: NEG
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 1
39853: PUSH
39854: LD_INT 0
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 1
39863: PUSH
39864: LD_INT 1
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 0
39873: PUSH
39874: LD_INT 1
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 1
39883: NEG
39884: PUSH
39885: LD_INT 0
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 1
39894: NEG
39895: PUSH
39896: LD_INT 1
39898: NEG
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 1
39906: NEG
39907: PUSH
39908: LD_INT 2
39910: NEG
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 0
39918: PUSH
39919: LD_INT 2
39921: NEG
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 1
39929: PUSH
39930: LD_INT 1
39932: NEG
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 2
39940: PUSH
39941: LD_INT 0
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 2
39950: PUSH
39951: LD_INT 1
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 2
39960: PUSH
39961: LD_INT 2
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 1
39970: PUSH
39971: LD_INT 2
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 0
39980: PUSH
39981: LD_INT 2
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 1
39990: NEG
39991: PUSH
39992: LD_INT 1
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 2
40001: NEG
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 2
40012: NEG
40013: PUSH
40014: LD_INT 1
40016: NEG
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 2
40024: NEG
40025: PUSH
40026: LD_INT 2
40028: NEG
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40055: LD_ADDR_VAR 0 58
40059: PUSH
40060: LD_INT 0
40062: PUSH
40063: LD_INT 0
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 0
40072: PUSH
40073: LD_INT 1
40075: NEG
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 1
40083: PUSH
40084: LD_INT 0
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 1
40093: PUSH
40094: LD_INT 1
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 0
40103: PUSH
40104: LD_INT 1
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 1
40113: NEG
40114: PUSH
40115: LD_INT 0
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 1
40124: NEG
40125: PUSH
40126: LD_INT 1
40128: NEG
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 1
40136: NEG
40137: PUSH
40138: LD_INT 2
40140: NEG
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 0
40148: PUSH
40149: LD_INT 2
40151: NEG
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 1
40159: PUSH
40160: LD_INT 1
40162: NEG
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 2
40170: PUSH
40171: LD_INT 0
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 2
40180: PUSH
40181: LD_INT 1
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 2
40190: PUSH
40191: LD_INT 2
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 1
40200: PUSH
40201: LD_INT 2
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 0
40210: PUSH
40211: LD_INT 2
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 1
40220: NEG
40221: PUSH
40222: LD_INT 1
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 2
40231: NEG
40232: PUSH
40233: LD_INT 0
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 2
40242: NEG
40243: PUSH
40244: LD_INT 1
40246: NEG
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 2
40254: NEG
40255: PUSH
40256: LD_INT 2
40258: NEG
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40285: LD_ADDR_VAR 0 59
40289: PUSH
40290: LD_INT 0
40292: PUSH
40293: LD_INT 0
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 0
40302: PUSH
40303: LD_INT 1
40305: NEG
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 1
40313: PUSH
40314: LD_INT 0
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 1
40323: PUSH
40324: LD_INT 1
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 0
40333: PUSH
40334: LD_INT 1
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 1
40343: NEG
40344: PUSH
40345: LD_INT 0
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 1
40354: NEG
40355: PUSH
40356: LD_INT 1
40358: NEG
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40373: LD_ADDR_VAR 0 60
40377: PUSH
40378: LD_INT 0
40380: PUSH
40381: LD_INT 0
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 0
40390: PUSH
40391: LD_INT 1
40393: NEG
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 1
40401: PUSH
40402: LD_INT 0
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 1
40411: PUSH
40412: LD_INT 1
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 0
40421: PUSH
40422: LD_INT 1
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 1
40431: NEG
40432: PUSH
40433: LD_INT 0
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 1
40442: NEG
40443: PUSH
40444: LD_INT 1
40446: NEG
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40461: LD_ADDR_VAR 0 61
40465: PUSH
40466: LD_INT 0
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: LD_INT 1
40481: NEG
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 1
40489: PUSH
40490: LD_INT 0
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 1
40499: PUSH
40500: LD_INT 1
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 0
40509: PUSH
40510: LD_INT 1
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 1
40519: NEG
40520: PUSH
40521: LD_INT 0
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 1
40530: NEG
40531: PUSH
40532: LD_INT 1
40534: NEG
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40549: LD_ADDR_VAR 0 62
40553: PUSH
40554: LD_INT 0
40556: PUSH
40557: LD_INT 0
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 0
40566: PUSH
40567: LD_INT 1
40569: NEG
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 1
40577: PUSH
40578: LD_INT 0
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 1
40587: PUSH
40588: LD_INT 1
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 0
40597: PUSH
40598: LD_INT 1
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 1
40607: NEG
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 1
40618: NEG
40619: PUSH
40620: LD_INT 1
40622: NEG
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40637: LD_ADDR_VAR 0 63
40641: PUSH
40642: LD_INT 0
40644: PUSH
40645: LD_INT 0
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 0
40654: PUSH
40655: LD_INT 1
40657: NEG
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 1
40665: PUSH
40666: LD_INT 0
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 1
40675: PUSH
40676: LD_INT 1
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 0
40685: PUSH
40686: LD_INT 1
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 1
40695: NEG
40696: PUSH
40697: LD_INT 0
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 1
40706: NEG
40707: PUSH
40708: LD_INT 1
40710: NEG
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40725: LD_ADDR_VAR 0 64
40729: PUSH
40730: LD_INT 0
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 0
40742: PUSH
40743: LD_INT 1
40745: NEG
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 1
40753: PUSH
40754: LD_INT 0
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 1
40763: PUSH
40764: LD_INT 1
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 0
40773: PUSH
40774: LD_INT 1
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 1
40783: NEG
40784: PUSH
40785: LD_INT 0
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 1
40794: NEG
40795: PUSH
40796: LD_INT 1
40798: NEG
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: ST_TO_ADDR
// end ; 1 :
40813: GO 46710
40815: LD_INT 1
40817: DOUBLE
40818: EQUAL
40819: IFTRUE 40823
40821: GO 43446
40823: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40824: LD_ADDR_VAR 0 11
40828: PUSH
40829: LD_INT 1
40831: NEG
40832: PUSH
40833: LD_INT 3
40835: NEG
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 0
40843: PUSH
40844: LD_INT 3
40846: NEG
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 1
40854: PUSH
40855: LD_INT 2
40857: NEG
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: LIST
40867: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40868: LD_ADDR_VAR 0 12
40872: PUSH
40873: LD_INT 2
40875: PUSH
40876: LD_INT 1
40878: NEG
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 3
40886: PUSH
40887: LD_INT 0
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 3
40896: PUSH
40897: LD_INT 1
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: LIST
40908: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40909: LD_ADDR_VAR 0 13
40913: PUSH
40914: LD_INT 3
40916: PUSH
40917: LD_INT 2
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 3
40926: PUSH
40927: LD_INT 3
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 2
40936: PUSH
40937: LD_INT 3
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: LIST
40948: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40949: LD_ADDR_VAR 0 14
40953: PUSH
40954: LD_INT 1
40956: PUSH
40957: LD_INT 3
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: LD_INT 0
40966: PUSH
40967: LD_INT 3
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 1
40976: NEG
40977: PUSH
40978: LD_INT 2
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: LIST
40989: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40990: LD_ADDR_VAR 0 15
40994: PUSH
40995: LD_INT 2
40997: NEG
40998: PUSH
40999: LD_INT 1
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 3
41008: NEG
41009: PUSH
41010: LD_INT 0
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 3
41019: NEG
41020: PUSH
41021: LD_INT 1
41023: NEG
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: LIST
41033: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41034: LD_ADDR_VAR 0 16
41038: PUSH
41039: LD_INT 2
41041: NEG
41042: PUSH
41043: LD_INT 3
41045: NEG
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 3
41053: NEG
41054: PUSH
41055: LD_INT 2
41057: NEG
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 3
41065: NEG
41066: PUSH
41067: LD_INT 3
41069: NEG
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: LIST
41079: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41080: LD_ADDR_VAR 0 17
41084: PUSH
41085: LD_INT 1
41087: NEG
41088: PUSH
41089: LD_INT 3
41091: NEG
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 0
41099: PUSH
41100: LD_INT 3
41102: NEG
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 1
41110: PUSH
41111: LD_INT 2
41113: NEG
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: LIST
41123: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41124: LD_ADDR_VAR 0 18
41128: PUSH
41129: LD_INT 2
41131: PUSH
41132: LD_INT 1
41134: NEG
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 3
41142: PUSH
41143: LD_INT 0
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 3
41152: PUSH
41153: LD_INT 1
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: LIST
41164: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41165: LD_ADDR_VAR 0 19
41169: PUSH
41170: LD_INT 3
41172: PUSH
41173: LD_INT 2
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 3
41182: PUSH
41183: LD_INT 3
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 2
41192: PUSH
41193: LD_INT 3
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: LIST
41204: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41205: LD_ADDR_VAR 0 20
41209: PUSH
41210: LD_INT 1
41212: PUSH
41213: LD_INT 3
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 0
41222: PUSH
41223: LD_INT 3
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 1
41232: NEG
41233: PUSH
41234: LD_INT 2
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: LIST
41245: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41246: LD_ADDR_VAR 0 21
41250: PUSH
41251: LD_INT 2
41253: NEG
41254: PUSH
41255: LD_INT 1
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 3
41264: NEG
41265: PUSH
41266: LD_INT 0
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 3
41275: NEG
41276: PUSH
41277: LD_INT 1
41279: NEG
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: LIST
41289: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41290: LD_ADDR_VAR 0 22
41294: PUSH
41295: LD_INT 2
41297: NEG
41298: PUSH
41299: LD_INT 3
41301: NEG
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 3
41309: NEG
41310: PUSH
41311: LD_INT 2
41313: NEG
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 3
41321: NEG
41322: PUSH
41323: LD_INT 3
41325: NEG
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: LIST
41335: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
41336: LD_ADDR_VAR 0 23
41340: PUSH
41341: LD_INT 0
41343: PUSH
41344: LD_INT 3
41346: NEG
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 1
41354: NEG
41355: PUSH
41356: LD_INT 4
41358: NEG
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 1
41366: PUSH
41367: LD_INT 3
41369: NEG
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: LIST
41379: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
41380: LD_ADDR_VAR 0 24
41384: PUSH
41385: LD_INT 3
41387: PUSH
41388: LD_INT 0
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 3
41397: PUSH
41398: LD_INT 1
41400: NEG
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 4
41408: PUSH
41409: LD_INT 1
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: LIST
41420: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
41421: LD_ADDR_VAR 0 25
41425: PUSH
41426: LD_INT 3
41428: PUSH
41429: LD_INT 3
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 4
41438: PUSH
41439: LD_INT 3
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 3
41448: PUSH
41449: LD_INT 4
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: LIST
41460: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
41461: LD_ADDR_VAR 0 26
41465: PUSH
41466: LD_INT 0
41468: PUSH
41469: LD_INT 3
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 1
41478: PUSH
41479: LD_INT 4
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 1
41488: NEG
41489: PUSH
41490: LD_INT 3
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: LIST
41501: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
41502: LD_ADDR_VAR 0 27
41506: PUSH
41507: LD_INT 3
41509: NEG
41510: PUSH
41511: LD_INT 0
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 3
41520: NEG
41521: PUSH
41522: LD_INT 1
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 4
41531: NEG
41532: PUSH
41533: LD_INT 1
41535: NEG
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: LIST
41545: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
41546: LD_ADDR_VAR 0 28
41550: PUSH
41551: LD_INT 3
41553: NEG
41554: PUSH
41555: LD_INT 3
41557: NEG
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 3
41565: NEG
41566: PUSH
41567: LD_INT 4
41569: NEG
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 4
41577: NEG
41578: PUSH
41579: LD_INT 3
41581: NEG
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: LIST
41591: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
41592: LD_ADDR_VAR 0 29
41596: PUSH
41597: LD_INT 1
41599: NEG
41600: PUSH
41601: LD_INT 3
41603: NEG
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 0
41611: PUSH
41612: LD_INT 3
41614: NEG
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 1
41622: PUSH
41623: LD_INT 2
41625: NEG
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 1
41633: NEG
41634: PUSH
41635: LD_INT 4
41637: NEG
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 0
41645: PUSH
41646: LD_INT 4
41648: NEG
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 1
41656: PUSH
41657: LD_INT 3
41659: NEG
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 1
41667: NEG
41668: PUSH
41669: LD_INT 5
41671: NEG
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 0
41679: PUSH
41680: LD_INT 5
41682: NEG
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 1
41690: PUSH
41691: LD_INT 4
41693: NEG
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 1
41701: NEG
41702: PUSH
41703: LD_INT 6
41705: NEG
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 0
41713: PUSH
41714: LD_INT 6
41716: NEG
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 1
41724: PUSH
41725: LD_INT 5
41727: NEG
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
41747: LD_ADDR_VAR 0 30
41751: PUSH
41752: LD_INT 2
41754: PUSH
41755: LD_INT 1
41757: NEG
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 3
41765: PUSH
41766: LD_INT 0
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 3
41775: PUSH
41776: LD_INT 1
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 3
41785: PUSH
41786: LD_INT 1
41788: NEG
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 4
41796: PUSH
41797: LD_INT 0
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 4
41806: PUSH
41807: LD_INT 1
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 4
41816: PUSH
41817: LD_INT 1
41819: NEG
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 5
41827: PUSH
41828: LD_INT 0
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 5
41837: PUSH
41838: LD_INT 1
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 5
41847: PUSH
41848: LD_INT 1
41850: NEG
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 6
41858: PUSH
41859: LD_INT 0
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 6
41868: PUSH
41869: LD_INT 1
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
41890: LD_ADDR_VAR 0 31
41894: PUSH
41895: LD_INT 3
41897: PUSH
41898: LD_INT 2
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 3
41907: PUSH
41908: LD_INT 3
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 2
41917: PUSH
41918: LD_INT 3
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 4
41927: PUSH
41928: LD_INT 3
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 4
41937: PUSH
41938: LD_INT 4
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 3
41947: PUSH
41948: LD_INT 4
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 5
41957: PUSH
41958: LD_INT 4
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 5
41967: PUSH
41968: LD_INT 5
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 4
41977: PUSH
41978: LD_INT 5
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 6
41987: PUSH
41988: LD_INT 5
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 6
41997: PUSH
41998: LD_INT 6
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 5
42007: PUSH
42008: LD_INT 6
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42029: LD_ADDR_VAR 0 32
42033: PUSH
42034: LD_INT 1
42036: PUSH
42037: LD_INT 3
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: LD_INT 3
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 1
42056: NEG
42057: PUSH
42058: LD_INT 2
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 1
42067: PUSH
42068: LD_INT 4
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: LD_INT 4
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 1
42087: NEG
42088: PUSH
42089: LD_INT 3
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 1
42098: PUSH
42099: LD_INT 5
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 0
42108: PUSH
42109: LD_INT 5
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 1
42118: NEG
42119: PUSH
42120: LD_INT 4
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 1
42129: PUSH
42130: LD_INT 6
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 0
42139: PUSH
42140: LD_INT 6
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: NEG
42150: PUSH
42151: LD_INT 5
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42172: LD_ADDR_VAR 0 33
42176: PUSH
42177: LD_INT 2
42179: NEG
42180: PUSH
42181: LD_INT 1
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 3
42190: NEG
42191: PUSH
42192: LD_INT 0
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 3
42201: NEG
42202: PUSH
42203: LD_INT 1
42205: NEG
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 3
42213: NEG
42214: PUSH
42215: LD_INT 1
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 4
42224: NEG
42225: PUSH
42226: LD_INT 0
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 4
42235: NEG
42236: PUSH
42237: LD_INT 1
42239: NEG
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 4
42247: NEG
42248: PUSH
42249: LD_INT 1
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 5
42258: NEG
42259: PUSH
42260: LD_INT 0
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 5
42269: NEG
42270: PUSH
42271: LD_INT 1
42273: NEG
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 5
42281: NEG
42282: PUSH
42283: LD_INT 1
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 6
42292: NEG
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 6
42303: NEG
42304: PUSH
42305: LD_INT 1
42307: NEG
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
42327: LD_ADDR_VAR 0 34
42331: PUSH
42332: LD_INT 2
42334: NEG
42335: PUSH
42336: LD_INT 3
42338: NEG
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 3
42346: NEG
42347: PUSH
42348: LD_INT 2
42350: NEG
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 3
42358: NEG
42359: PUSH
42360: LD_INT 3
42362: NEG
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 3
42370: NEG
42371: PUSH
42372: LD_INT 4
42374: NEG
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 4
42382: NEG
42383: PUSH
42384: LD_INT 3
42386: NEG
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 4
42394: NEG
42395: PUSH
42396: LD_INT 4
42398: NEG
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 4
42406: NEG
42407: PUSH
42408: LD_INT 5
42410: NEG
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 5
42418: NEG
42419: PUSH
42420: LD_INT 4
42422: NEG
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 5
42430: NEG
42431: PUSH
42432: LD_INT 5
42434: NEG
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 5
42442: NEG
42443: PUSH
42444: LD_INT 6
42446: NEG
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 6
42454: NEG
42455: PUSH
42456: LD_INT 5
42458: NEG
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 6
42466: NEG
42467: PUSH
42468: LD_INT 6
42470: NEG
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
42490: LD_ADDR_VAR 0 41
42494: PUSH
42495: LD_INT 0
42497: PUSH
42498: LD_INT 2
42500: NEG
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 1
42508: NEG
42509: PUSH
42510: LD_INT 3
42512: NEG
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 1
42520: PUSH
42521: LD_INT 2
42523: NEG
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: LIST
42533: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
42534: LD_ADDR_VAR 0 42
42538: PUSH
42539: LD_INT 2
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 2
42551: PUSH
42552: LD_INT 1
42554: NEG
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 3
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: LIST
42574: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
42575: LD_ADDR_VAR 0 43
42579: PUSH
42580: LD_INT 2
42582: PUSH
42583: LD_INT 2
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 3
42592: PUSH
42593: LD_INT 2
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 2
42602: PUSH
42603: LD_INT 3
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: LIST
42614: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
42615: LD_ADDR_VAR 0 44
42619: PUSH
42620: LD_INT 0
42622: PUSH
42623: LD_INT 2
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: LD_INT 3
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 1
42642: NEG
42643: PUSH
42644: LD_INT 2
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: LIST
42655: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42656: LD_ADDR_VAR 0 45
42660: PUSH
42661: LD_INT 2
42663: NEG
42664: PUSH
42665: LD_INT 0
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 2
42674: NEG
42675: PUSH
42676: LD_INT 1
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 3
42685: NEG
42686: PUSH
42687: LD_INT 1
42689: NEG
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: LIST
42699: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
42700: LD_ADDR_VAR 0 46
42704: PUSH
42705: LD_INT 2
42707: NEG
42708: PUSH
42709: LD_INT 2
42711: NEG
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 2
42719: NEG
42720: PUSH
42721: LD_INT 3
42723: NEG
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 3
42731: NEG
42732: PUSH
42733: LD_INT 2
42735: NEG
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: LIST
42745: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
42746: LD_ADDR_VAR 0 47
42750: PUSH
42751: LD_INT 2
42753: NEG
42754: PUSH
42755: LD_INT 3
42757: NEG
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 1
42765: NEG
42766: PUSH
42767: LD_INT 3
42769: NEG
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42779: LD_ADDR_VAR 0 48
42783: PUSH
42784: LD_INT 1
42786: PUSH
42787: LD_INT 2
42789: NEG
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 2
42797: PUSH
42798: LD_INT 1
42800: NEG
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
42810: LD_ADDR_VAR 0 49
42814: PUSH
42815: LD_INT 3
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 3
42827: PUSH
42828: LD_INT 2
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
42839: LD_ADDR_VAR 0 50
42843: PUSH
42844: LD_INT 2
42846: PUSH
42847: LD_INT 3
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 1
42856: PUSH
42857: LD_INT 3
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42868: LD_ADDR_VAR 0 51
42872: PUSH
42873: LD_INT 1
42875: NEG
42876: PUSH
42877: LD_INT 2
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 2
42886: NEG
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42899: LD_ADDR_VAR 0 52
42903: PUSH
42904: LD_INT 3
42906: NEG
42907: PUSH
42908: LD_INT 1
42910: NEG
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 3
42918: NEG
42919: PUSH
42920: LD_INT 2
42922: NEG
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42932: LD_ADDR_VAR 0 53
42936: PUSH
42937: LD_INT 1
42939: NEG
42940: PUSH
42941: LD_INT 3
42943: NEG
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 0
42951: PUSH
42952: LD_INT 3
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 1
42962: PUSH
42963: LD_INT 2
42965: NEG
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: LIST
42975: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42976: LD_ADDR_VAR 0 54
42980: PUSH
42981: LD_INT 2
42983: PUSH
42984: LD_INT 1
42986: NEG
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 3
42994: PUSH
42995: LD_INT 0
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 3
43004: PUSH
43005: LD_INT 1
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: LIST
43016: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43017: LD_ADDR_VAR 0 55
43021: PUSH
43022: LD_INT 3
43024: PUSH
43025: LD_INT 2
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 3
43034: PUSH
43035: LD_INT 3
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 2
43044: PUSH
43045: LD_INT 3
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: LIST
43056: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43057: LD_ADDR_VAR 0 56
43061: PUSH
43062: LD_INT 1
43064: PUSH
43065: LD_INT 3
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 0
43074: PUSH
43075: LD_INT 3
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 1
43084: NEG
43085: PUSH
43086: LD_INT 2
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: LIST
43097: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43098: LD_ADDR_VAR 0 57
43102: PUSH
43103: LD_INT 2
43105: NEG
43106: PUSH
43107: LD_INT 1
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 3
43116: NEG
43117: PUSH
43118: LD_INT 0
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 3
43127: NEG
43128: PUSH
43129: LD_INT 1
43131: NEG
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: LIST
43141: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43142: LD_ADDR_VAR 0 58
43146: PUSH
43147: LD_INT 2
43149: NEG
43150: PUSH
43151: LD_INT 3
43153: NEG
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 3
43161: NEG
43162: PUSH
43163: LD_INT 2
43165: NEG
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 3
43173: NEG
43174: PUSH
43175: LD_INT 3
43177: NEG
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: LIST
43187: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43188: LD_ADDR_VAR 0 59
43192: PUSH
43193: LD_INT 1
43195: NEG
43196: PUSH
43197: LD_INT 2
43199: NEG
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 0
43207: PUSH
43208: LD_INT 2
43210: NEG
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 1
43218: PUSH
43219: LD_INT 1
43221: NEG
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: LIST
43231: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43232: LD_ADDR_VAR 0 60
43236: PUSH
43237: LD_INT 1
43239: PUSH
43240: LD_INT 1
43242: NEG
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 2
43250: PUSH
43251: LD_INT 0
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 2
43260: PUSH
43261: LD_INT 1
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: LIST
43272: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43273: LD_ADDR_VAR 0 61
43277: PUSH
43278: LD_INT 2
43280: PUSH
43281: LD_INT 1
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 2
43290: PUSH
43291: LD_INT 2
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 1
43300: PUSH
43301: LD_INT 2
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: LIST
43312: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43313: LD_ADDR_VAR 0 62
43317: PUSH
43318: LD_INT 1
43320: PUSH
43321: LD_INT 2
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: LD_INT 2
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 1
43340: NEG
43341: PUSH
43342: LD_INT 1
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: LIST
43353: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43354: LD_ADDR_VAR 0 63
43358: PUSH
43359: LD_INT 1
43361: NEG
43362: PUSH
43363: LD_INT 1
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 2
43372: NEG
43373: PUSH
43374: LD_INT 0
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 2
43383: NEG
43384: PUSH
43385: LD_INT 1
43387: NEG
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: LIST
43397: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43398: LD_ADDR_VAR 0 64
43402: PUSH
43403: LD_INT 1
43405: NEG
43406: PUSH
43407: LD_INT 2
43409: NEG
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 2
43417: NEG
43418: PUSH
43419: LD_INT 1
43421: NEG
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 2
43429: NEG
43430: PUSH
43431: LD_INT 2
43433: NEG
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: LIST
43443: ST_TO_ADDR
// end ; 2 :
43444: GO 46710
43446: LD_INT 2
43448: DOUBLE
43449: EQUAL
43450: IFTRUE 43454
43452: GO 46709
43454: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
43455: LD_ADDR_VAR 0 29
43459: PUSH
43460: LD_INT 4
43462: PUSH
43463: LD_INT 0
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 4
43472: PUSH
43473: LD_INT 1
43475: NEG
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 5
43483: PUSH
43484: LD_INT 0
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 5
43493: PUSH
43494: LD_INT 1
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 4
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 3
43513: PUSH
43514: LD_INT 0
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 3
43523: PUSH
43524: LD_INT 1
43526: NEG
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 3
43534: PUSH
43535: LD_INT 2
43537: NEG
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 5
43545: PUSH
43546: LD_INT 2
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 3
43555: PUSH
43556: LD_INT 3
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 3
43565: PUSH
43566: LD_INT 2
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 4
43575: PUSH
43576: LD_INT 3
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 4
43585: PUSH
43586: LD_INT 4
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 3
43595: PUSH
43596: LD_INT 4
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 2
43605: PUSH
43606: LD_INT 3
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 2
43615: PUSH
43616: LD_INT 2
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 4
43625: PUSH
43626: LD_INT 2
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 2
43635: PUSH
43636: LD_INT 4
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 0
43645: PUSH
43646: LD_INT 4
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 0
43655: PUSH
43656: LD_INT 3
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 1
43665: PUSH
43666: LD_INT 4
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: LD_INT 5
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 0
43685: PUSH
43686: LD_INT 5
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 1
43695: NEG
43696: PUSH
43697: LD_INT 4
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 1
43706: NEG
43707: PUSH
43708: LD_INT 3
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 2
43717: PUSH
43718: LD_INT 5
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 2
43727: NEG
43728: PUSH
43729: LD_INT 3
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 3
43738: NEG
43739: PUSH
43740: LD_INT 0
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 3
43749: NEG
43750: PUSH
43751: LD_INT 1
43753: NEG
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 2
43761: NEG
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 2
43772: NEG
43773: PUSH
43774: LD_INT 1
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 3
43783: NEG
43784: PUSH
43785: LD_INT 1
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 4
43794: NEG
43795: PUSH
43796: LD_INT 0
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 4
43805: NEG
43806: PUSH
43807: LD_INT 1
43809: NEG
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 4
43817: NEG
43818: PUSH
43819: LD_INT 2
43821: NEG
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 2
43829: NEG
43830: PUSH
43831: LD_INT 2
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 4
43840: NEG
43841: PUSH
43842: LD_INT 4
43844: NEG
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 4
43852: NEG
43853: PUSH
43854: LD_INT 5
43856: NEG
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 3
43864: NEG
43865: PUSH
43866: LD_INT 4
43868: NEG
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 3
43876: NEG
43877: PUSH
43878: LD_INT 3
43880: NEG
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 4
43888: NEG
43889: PUSH
43890: LD_INT 3
43892: NEG
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 5
43900: NEG
43901: PUSH
43902: LD_INT 4
43904: NEG
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 5
43912: NEG
43913: PUSH
43914: LD_INT 5
43916: NEG
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 3
43924: NEG
43925: PUSH
43926: LD_INT 5
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 5
43936: NEG
43937: PUSH
43938: LD_INT 3
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
43993: LD_ADDR_VAR 0 30
43997: PUSH
43998: LD_INT 4
44000: PUSH
44001: LD_INT 4
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 4
44010: PUSH
44011: LD_INT 3
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 5
44020: PUSH
44021: LD_INT 4
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 5
44030: PUSH
44031: LD_INT 5
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 4
44040: PUSH
44041: LD_INT 5
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 3
44050: PUSH
44051: LD_INT 4
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 3
44060: PUSH
44061: LD_INT 3
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 5
44070: PUSH
44071: LD_INT 3
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 3
44080: PUSH
44081: LD_INT 5
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 0
44090: PUSH
44091: LD_INT 3
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: LD_INT 2
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: PUSH
44111: LD_INT 3
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 1
44120: PUSH
44121: LD_INT 4
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 0
44130: PUSH
44131: LD_INT 4
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 1
44140: NEG
44141: PUSH
44142: LD_INT 3
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 1
44151: NEG
44152: PUSH
44153: LD_INT 2
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 2
44162: PUSH
44163: LD_INT 4
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 2
44172: NEG
44173: PUSH
44174: LD_INT 2
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 4
44183: NEG
44184: PUSH
44185: LD_INT 0
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 4
44194: NEG
44195: PUSH
44196: LD_INT 1
44198: NEG
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 3
44206: NEG
44207: PUSH
44208: LD_INT 0
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 3
44217: NEG
44218: PUSH
44219: LD_INT 1
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 4
44228: NEG
44229: PUSH
44230: LD_INT 1
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 5
44239: NEG
44240: PUSH
44241: LD_INT 0
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 5
44250: NEG
44251: PUSH
44252: LD_INT 1
44254: NEG
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 5
44262: NEG
44263: PUSH
44264: LD_INT 2
44266: NEG
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 3
44274: NEG
44275: PUSH
44276: LD_INT 2
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 3
44285: NEG
44286: PUSH
44287: LD_INT 3
44289: NEG
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 3
44297: NEG
44298: PUSH
44299: LD_INT 4
44301: NEG
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 2
44309: NEG
44310: PUSH
44311: LD_INT 3
44313: NEG
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 2
44321: NEG
44322: PUSH
44323: LD_INT 2
44325: NEG
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 3
44333: NEG
44334: PUSH
44335: LD_INT 2
44337: NEG
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 4
44345: NEG
44346: PUSH
44347: LD_INT 3
44349: NEG
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 4
44357: NEG
44358: PUSH
44359: LD_INT 4
44361: NEG
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 2
44369: NEG
44370: PUSH
44371: LD_INT 4
44373: NEG
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 4
44381: NEG
44382: PUSH
44383: LD_INT 2
44385: NEG
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: LD_INT 4
44396: NEG
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 0
44404: PUSH
44405: LD_INT 5
44407: NEG
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 1
44415: PUSH
44416: LD_INT 4
44418: NEG
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 1
44426: PUSH
44427: LD_INT 3
44429: NEG
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: LD_INT 3
44440: NEG
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 1
44448: NEG
44449: PUSH
44450: LD_INT 4
44452: NEG
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 1
44460: NEG
44461: PUSH
44462: LD_INT 5
44464: NEG
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 2
44472: PUSH
44473: LD_INT 3
44475: NEG
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 2
44483: NEG
44484: PUSH
44485: LD_INT 5
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
44540: LD_ADDR_VAR 0 31
44544: PUSH
44545: LD_INT 0
44547: PUSH
44548: LD_INT 4
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: LD_INT 3
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 1
44567: PUSH
44568: LD_INT 4
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 1
44577: PUSH
44578: LD_INT 5
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 0
44587: PUSH
44588: LD_INT 5
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 1
44597: NEG
44598: PUSH
44599: LD_INT 4
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 1
44608: NEG
44609: PUSH
44610: LD_INT 3
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 2
44619: PUSH
44620: LD_INT 5
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 2
44629: NEG
44630: PUSH
44631: LD_INT 3
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 3
44640: NEG
44641: PUSH
44642: LD_INT 0
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 3
44651: NEG
44652: PUSH
44653: LD_INT 1
44655: NEG
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 2
44663: NEG
44664: PUSH
44665: LD_INT 0
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 2
44674: NEG
44675: PUSH
44676: LD_INT 1
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 3
44685: NEG
44686: PUSH
44687: LD_INT 1
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 4
44696: NEG
44697: PUSH
44698: LD_INT 0
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 4
44707: NEG
44708: PUSH
44709: LD_INT 1
44711: NEG
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 4
44719: NEG
44720: PUSH
44721: LD_INT 2
44723: NEG
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 2
44731: NEG
44732: PUSH
44733: LD_INT 2
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 4
44742: NEG
44743: PUSH
44744: LD_INT 4
44746: NEG
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 4
44754: NEG
44755: PUSH
44756: LD_INT 5
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 3
44766: NEG
44767: PUSH
44768: LD_INT 4
44770: NEG
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 3
44778: NEG
44779: PUSH
44780: LD_INT 3
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 4
44790: NEG
44791: PUSH
44792: LD_INT 3
44794: NEG
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 5
44802: NEG
44803: PUSH
44804: LD_INT 4
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 5
44814: NEG
44815: PUSH
44816: LD_INT 5
44818: NEG
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 3
44826: NEG
44827: PUSH
44828: LD_INT 5
44830: NEG
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 5
44838: NEG
44839: PUSH
44840: LD_INT 3
44842: NEG
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 0
44850: PUSH
44851: LD_INT 3
44853: NEG
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: LD_INT 4
44864: NEG
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: LD_INT 3
44875: NEG
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 1
44883: PUSH
44884: LD_INT 2
44886: NEG
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 0
44894: PUSH
44895: LD_INT 2
44897: NEG
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 1
44905: NEG
44906: PUSH
44907: LD_INT 3
44909: NEG
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 1
44917: NEG
44918: PUSH
44919: LD_INT 4
44921: NEG
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 2
44929: PUSH
44930: LD_INT 2
44932: NEG
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 2
44940: NEG
44941: PUSH
44942: LD_INT 4
44944: NEG
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 4
44952: PUSH
44953: LD_INT 0
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 4
44962: PUSH
44963: LD_INT 1
44965: NEG
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 5
44973: PUSH
44974: LD_INT 0
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 5
44983: PUSH
44984: LD_INT 1
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 4
44993: PUSH
44994: LD_INT 1
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 3
45003: PUSH
45004: LD_INT 0
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 3
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 3
45024: PUSH
45025: LD_INT 2
45027: NEG
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 5
45035: PUSH
45036: LD_INT 2
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45090: LD_ADDR_VAR 0 32
45094: PUSH
45095: LD_INT 4
45097: NEG
45098: PUSH
45099: LD_INT 0
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 4
45108: NEG
45109: PUSH
45110: LD_INT 1
45112: NEG
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 3
45120: NEG
45121: PUSH
45122: LD_INT 0
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 3
45131: NEG
45132: PUSH
45133: LD_INT 1
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 4
45142: NEG
45143: PUSH
45144: LD_INT 1
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 5
45153: NEG
45154: PUSH
45155: LD_INT 0
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 5
45164: NEG
45165: PUSH
45166: LD_INT 1
45168: NEG
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 5
45176: NEG
45177: PUSH
45178: LD_INT 2
45180: NEG
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 3
45188: NEG
45189: PUSH
45190: LD_INT 2
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 3
45199: NEG
45200: PUSH
45201: LD_INT 3
45203: NEG
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 3
45211: NEG
45212: PUSH
45213: LD_INT 4
45215: NEG
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 2
45223: NEG
45224: PUSH
45225: LD_INT 3
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 2
45235: NEG
45236: PUSH
45237: LD_INT 2
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 3
45247: NEG
45248: PUSH
45249: LD_INT 2
45251: NEG
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 4
45259: NEG
45260: PUSH
45261: LD_INT 3
45263: NEG
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 4
45271: NEG
45272: PUSH
45273: LD_INT 4
45275: NEG
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 2
45283: NEG
45284: PUSH
45285: LD_INT 4
45287: NEG
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 4
45295: NEG
45296: PUSH
45297: LD_INT 2
45299: NEG
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: LD_INT 4
45310: NEG
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: LD_INT 5
45321: NEG
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 1
45329: PUSH
45330: LD_INT 4
45332: NEG
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 1
45340: PUSH
45341: LD_INT 3
45343: NEG
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: LD_INT 3
45354: NEG
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 1
45362: NEG
45363: PUSH
45364: LD_INT 4
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: NEG
45375: PUSH
45376: LD_INT 5
45378: NEG
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 2
45386: PUSH
45387: LD_INT 3
45389: NEG
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 2
45397: NEG
45398: PUSH
45399: LD_INT 5
45401: NEG
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 3
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 3
45419: PUSH
45420: LD_INT 1
45422: NEG
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 4
45430: PUSH
45431: LD_INT 0
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 4
45440: PUSH
45441: LD_INT 1
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 3
45450: PUSH
45451: LD_INT 1
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 2
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 2
45470: PUSH
45471: LD_INT 1
45473: NEG
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 2
45481: PUSH
45482: LD_INT 2
45484: NEG
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 4
45492: PUSH
45493: LD_INT 2
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 4
45502: PUSH
45503: LD_INT 4
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 4
45512: PUSH
45513: LD_INT 3
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 5
45522: PUSH
45523: LD_INT 4
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 5
45532: PUSH
45533: LD_INT 5
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 4
45542: PUSH
45543: LD_INT 5
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 3
45552: PUSH
45553: LD_INT 4
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 3
45562: PUSH
45563: LD_INT 3
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 5
45572: PUSH
45573: LD_INT 3
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 3
45582: PUSH
45583: LD_INT 5
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
45637: LD_ADDR_VAR 0 33
45641: PUSH
45642: LD_INT 4
45644: NEG
45645: PUSH
45646: LD_INT 4
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 4
45656: NEG
45657: PUSH
45658: LD_INT 5
45660: NEG
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 3
45668: NEG
45669: PUSH
45670: LD_INT 4
45672: NEG
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 3
45680: NEG
45681: PUSH
45682: LD_INT 3
45684: NEG
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 4
45692: NEG
45693: PUSH
45694: LD_INT 3
45696: NEG
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 5
45704: NEG
45705: PUSH
45706: LD_INT 4
45708: NEG
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 5
45716: NEG
45717: PUSH
45718: LD_INT 5
45720: NEG
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 3
45728: NEG
45729: PUSH
45730: LD_INT 5
45732: NEG
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 5
45740: NEG
45741: PUSH
45742: LD_INT 3
45744: NEG
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 0
45752: PUSH
45753: LD_INT 3
45755: NEG
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 0
45763: PUSH
45764: LD_INT 4
45766: NEG
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 1
45774: PUSH
45775: LD_INT 3
45777: NEG
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 1
45785: PUSH
45786: LD_INT 2
45788: NEG
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: LD_INT 2
45799: NEG
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: NEG
45808: PUSH
45809: LD_INT 3
45811: NEG
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: PUSH
45821: LD_INT 4
45823: NEG
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 2
45831: PUSH
45832: LD_INT 2
45834: NEG
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 2
45842: NEG
45843: PUSH
45844: LD_INT 4
45846: NEG
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 4
45854: PUSH
45855: LD_INT 0
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 4
45864: PUSH
45865: LD_INT 1
45867: NEG
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 5
45875: PUSH
45876: LD_INT 0
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 5
45885: PUSH
45886: LD_INT 1
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 4
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 3
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 3
45915: PUSH
45916: LD_INT 1
45918: NEG
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 3
45926: PUSH
45927: LD_INT 2
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 5
45937: PUSH
45938: LD_INT 2
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 3
45947: PUSH
45948: LD_INT 3
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 3
45957: PUSH
45958: LD_INT 2
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 4
45967: PUSH
45968: LD_INT 3
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 4
45977: PUSH
45978: LD_INT 4
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 3
45987: PUSH
45988: LD_INT 4
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 2
45997: PUSH
45998: LD_INT 3
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 2
46007: PUSH
46008: LD_INT 2
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 4
46017: PUSH
46018: LD_INT 2
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 2
46027: PUSH
46028: LD_INT 4
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: LD_INT 4
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: LD_INT 3
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: PUSH
46058: LD_INT 4
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 1
46067: PUSH
46068: LD_INT 5
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 0
46077: PUSH
46078: LD_INT 5
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 1
46087: NEG
46088: PUSH
46089: LD_INT 4
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: NEG
46099: PUSH
46100: LD_INT 3
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 2
46109: PUSH
46110: LD_INT 5
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 2
46119: NEG
46120: PUSH
46121: LD_INT 3
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46175: LD_ADDR_VAR 0 34
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: LD_INT 4
46185: NEG
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 0
46193: PUSH
46194: LD_INT 5
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 1
46204: PUSH
46205: LD_INT 4
46207: NEG
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: LD_INT 3
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: LD_INT 3
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: NEG
46238: PUSH
46239: LD_INT 4
46241: NEG
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 1
46249: NEG
46250: PUSH
46251: LD_INT 5
46253: NEG
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 2
46261: PUSH
46262: LD_INT 3
46264: NEG
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 2
46272: NEG
46273: PUSH
46274: LD_INT 5
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 3
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 3
46294: PUSH
46295: LD_INT 1
46297: NEG
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 4
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 4
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 3
46325: PUSH
46326: LD_INT 1
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 2
46335: PUSH
46336: LD_INT 0
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 2
46345: PUSH
46346: LD_INT 1
46348: NEG
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 2
46356: PUSH
46357: LD_INT 2
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 4
46367: PUSH
46368: LD_INT 2
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 4
46377: PUSH
46378: LD_INT 4
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 4
46387: PUSH
46388: LD_INT 3
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 5
46397: PUSH
46398: LD_INT 4
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 5
46407: PUSH
46408: LD_INT 5
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 4
46417: PUSH
46418: LD_INT 5
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 3
46427: PUSH
46428: LD_INT 4
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 3
46437: PUSH
46438: LD_INT 3
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 5
46447: PUSH
46448: LD_INT 3
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 3
46457: PUSH
46458: LD_INT 5
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 0
46467: PUSH
46468: LD_INT 3
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 0
46477: PUSH
46478: LD_INT 2
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 1
46487: PUSH
46488: LD_INT 3
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: LD_INT 4
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: LD_INT 4
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: LD_INT 3
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: NEG
46529: PUSH
46530: LD_INT 2
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 2
46539: PUSH
46540: LD_INT 4
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 2
46549: NEG
46550: PUSH
46551: LD_INT 2
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 4
46560: NEG
46561: PUSH
46562: LD_INT 0
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 4
46571: NEG
46572: PUSH
46573: LD_INT 1
46575: NEG
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 3
46583: NEG
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 3
46594: NEG
46595: PUSH
46596: LD_INT 1
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 4
46605: NEG
46606: PUSH
46607: LD_INT 1
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 5
46616: NEG
46617: PUSH
46618: LD_INT 0
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 5
46627: NEG
46628: PUSH
46629: LD_INT 1
46631: NEG
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 5
46639: NEG
46640: PUSH
46641: LD_INT 2
46643: NEG
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 3
46651: NEG
46652: PUSH
46653: LD_INT 2
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: ST_TO_ADDR
// end ; end ;
46707: GO 46710
46709: POP
// case btype of b_depot , b_warehouse :
46710: LD_VAR 0 1
46714: PUSH
46715: LD_INT 0
46717: DOUBLE
46718: EQUAL
46719: IFTRUE 46729
46721: LD_INT 1
46723: DOUBLE
46724: EQUAL
46725: IFTRUE 46729
46727: GO 46930
46729: POP
// case nation of nation_american :
46730: LD_VAR 0 5
46734: PUSH
46735: LD_INT 1
46737: DOUBLE
46738: EQUAL
46739: IFTRUE 46743
46741: GO 46799
46743: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
46744: LD_ADDR_VAR 0 9
46748: PUSH
46749: LD_VAR 0 11
46753: PUSH
46754: LD_VAR 0 12
46758: PUSH
46759: LD_VAR 0 13
46763: PUSH
46764: LD_VAR 0 14
46768: PUSH
46769: LD_VAR 0 15
46773: PUSH
46774: LD_VAR 0 16
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: PUSH
46787: LD_VAR 0 4
46791: PUSH
46792: LD_INT 1
46794: PLUS
46795: ARRAY
46796: ST_TO_ADDR
46797: GO 46928
46799: LD_INT 2
46801: DOUBLE
46802: EQUAL
46803: IFTRUE 46807
46805: GO 46863
46807: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
46808: LD_ADDR_VAR 0 9
46812: PUSH
46813: LD_VAR 0 17
46817: PUSH
46818: LD_VAR 0 18
46822: PUSH
46823: LD_VAR 0 19
46827: PUSH
46828: LD_VAR 0 20
46832: PUSH
46833: LD_VAR 0 21
46837: PUSH
46838: LD_VAR 0 22
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: PUSH
46851: LD_VAR 0 4
46855: PUSH
46856: LD_INT 1
46858: PLUS
46859: ARRAY
46860: ST_TO_ADDR
46861: GO 46928
46863: LD_INT 3
46865: DOUBLE
46866: EQUAL
46867: IFTRUE 46871
46869: GO 46927
46871: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
46872: LD_ADDR_VAR 0 9
46876: PUSH
46877: LD_VAR 0 23
46881: PUSH
46882: LD_VAR 0 24
46886: PUSH
46887: LD_VAR 0 25
46891: PUSH
46892: LD_VAR 0 26
46896: PUSH
46897: LD_VAR 0 27
46901: PUSH
46902: LD_VAR 0 28
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: PUSH
46915: LD_VAR 0 4
46919: PUSH
46920: LD_INT 1
46922: PLUS
46923: ARRAY
46924: ST_TO_ADDR
46925: GO 46928
46927: POP
46928: GO 47483
46930: LD_INT 2
46932: DOUBLE
46933: EQUAL
46934: IFTRUE 46944
46936: LD_INT 3
46938: DOUBLE
46939: EQUAL
46940: IFTRUE 46944
46942: GO 47000
46944: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
46945: LD_ADDR_VAR 0 9
46949: PUSH
46950: LD_VAR 0 29
46954: PUSH
46955: LD_VAR 0 30
46959: PUSH
46960: LD_VAR 0 31
46964: PUSH
46965: LD_VAR 0 32
46969: PUSH
46970: LD_VAR 0 33
46974: PUSH
46975: LD_VAR 0 34
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: PUSH
46988: LD_VAR 0 4
46992: PUSH
46993: LD_INT 1
46995: PLUS
46996: ARRAY
46997: ST_TO_ADDR
46998: GO 47483
47000: LD_INT 16
47002: DOUBLE
47003: EQUAL
47004: IFTRUE 47062
47006: LD_INT 17
47008: DOUBLE
47009: EQUAL
47010: IFTRUE 47062
47012: LD_INT 18
47014: DOUBLE
47015: EQUAL
47016: IFTRUE 47062
47018: LD_INT 19
47020: DOUBLE
47021: EQUAL
47022: IFTRUE 47062
47024: LD_INT 22
47026: DOUBLE
47027: EQUAL
47028: IFTRUE 47062
47030: LD_INT 20
47032: DOUBLE
47033: EQUAL
47034: IFTRUE 47062
47036: LD_INT 21
47038: DOUBLE
47039: EQUAL
47040: IFTRUE 47062
47042: LD_INT 23
47044: DOUBLE
47045: EQUAL
47046: IFTRUE 47062
47048: LD_INT 24
47050: DOUBLE
47051: EQUAL
47052: IFTRUE 47062
47054: LD_INT 25
47056: DOUBLE
47057: EQUAL
47058: IFTRUE 47062
47060: GO 47118
47062: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47063: LD_ADDR_VAR 0 9
47067: PUSH
47068: LD_VAR 0 35
47072: PUSH
47073: LD_VAR 0 36
47077: PUSH
47078: LD_VAR 0 37
47082: PUSH
47083: LD_VAR 0 38
47087: PUSH
47088: LD_VAR 0 39
47092: PUSH
47093: LD_VAR 0 40
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: PUSH
47106: LD_VAR 0 4
47110: PUSH
47111: LD_INT 1
47113: PLUS
47114: ARRAY
47115: ST_TO_ADDR
47116: GO 47483
47118: LD_INT 6
47120: DOUBLE
47121: EQUAL
47122: IFTRUE 47174
47124: LD_INT 7
47126: DOUBLE
47127: EQUAL
47128: IFTRUE 47174
47130: LD_INT 8
47132: DOUBLE
47133: EQUAL
47134: IFTRUE 47174
47136: LD_INT 13
47138: DOUBLE
47139: EQUAL
47140: IFTRUE 47174
47142: LD_INT 12
47144: DOUBLE
47145: EQUAL
47146: IFTRUE 47174
47148: LD_INT 15
47150: DOUBLE
47151: EQUAL
47152: IFTRUE 47174
47154: LD_INT 11
47156: DOUBLE
47157: EQUAL
47158: IFTRUE 47174
47160: LD_INT 14
47162: DOUBLE
47163: EQUAL
47164: IFTRUE 47174
47166: LD_INT 10
47168: DOUBLE
47169: EQUAL
47170: IFTRUE 47174
47172: GO 47230
47174: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
47175: LD_ADDR_VAR 0 9
47179: PUSH
47180: LD_VAR 0 41
47184: PUSH
47185: LD_VAR 0 42
47189: PUSH
47190: LD_VAR 0 43
47194: PUSH
47195: LD_VAR 0 44
47199: PUSH
47200: LD_VAR 0 45
47204: PUSH
47205: LD_VAR 0 46
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: PUSH
47218: LD_VAR 0 4
47222: PUSH
47223: LD_INT 1
47225: PLUS
47226: ARRAY
47227: ST_TO_ADDR
47228: GO 47483
47230: LD_INT 36
47232: DOUBLE
47233: EQUAL
47234: IFTRUE 47238
47236: GO 47294
47238: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
47239: LD_ADDR_VAR 0 9
47243: PUSH
47244: LD_VAR 0 47
47248: PUSH
47249: LD_VAR 0 48
47253: PUSH
47254: LD_VAR 0 49
47258: PUSH
47259: LD_VAR 0 50
47263: PUSH
47264: LD_VAR 0 51
47268: PUSH
47269: LD_VAR 0 52
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: PUSH
47282: LD_VAR 0 4
47286: PUSH
47287: LD_INT 1
47289: PLUS
47290: ARRAY
47291: ST_TO_ADDR
47292: GO 47483
47294: LD_INT 4
47296: DOUBLE
47297: EQUAL
47298: IFTRUE 47320
47300: LD_INT 5
47302: DOUBLE
47303: EQUAL
47304: IFTRUE 47320
47306: LD_INT 34
47308: DOUBLE
47309: EQUAL
47310: IFTRUE 47320
47312: LD_INT 37
47314: DOUBLE
47315: EQUAL
47316: IFTRUE 47320
47318: GO 47376
47320: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
47321: LD_ADDR_VAR 0 9
47325: PUSH
47326: LD_VAR 0 53
47330: PUSH
47331: LD_VAR 0 54
47335: PUSH
47336: LD_VAR 0 55
47340: PUSH
47341: LD_VAR 0 56
47345: PUSH
47346: LD_VAR 0 57
47350: PUSH
47351: LD_VAR 0 58
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: PUSH
47364: LD_VAR 0 4
47368: PUSH
47369: LD_INT 1
47371: PLUS
47372: ARRAY
47373: ST_TO_ADDR
47374: GO 47483
47376: LD_INT 31
47378: DOUBLE
47379: EQUAL
47380: IFTRUE 47426
47382: LD_INT 32
47384: DOUBLE
47385: EQUAL
47386: IFTRUE 47426
47388: LD_INT 33
47390: DOUBLE
47391: EQUAL
47392: IFTRUE 47426
47394: LD_INT 27
47396: DOUBLE
47397: EQUAL
47398: IFTRUE 47426
47400: LD_INT 26
47402: DOUBLE
47403: EQUAL
47404: IFTRUE 47426
47406: LD_INT 28
47408: DOUBLE
47409: EQUAL
47410: IFTRUE 47426
47412: LD_INT 29
47414: DOUBLE
47415: EQUAL
47416: IFTRUE 47426
47418: LD_INT 30
47420: DOUBLE
47421: EQUAL
47422: IFTRUE 47426
47424: GO 47482
47426: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
47427: LD_ADDR_VAR 0 9
47431: PUSH
47432: LD_VAR 0 59
47436: PUSH
47437: LD_VAR 0 60
47441: PUSH
47442: LD_VAR 0 61
47446: PUSH
47447: LD_VAR 0 62
47451: PUSH
47452: LD_VAR 0 63
47456: PUSH
47457: LD_VAR 0 64
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: PUSH
47470: LD_VAR 0 4
47474: PUSH
47475: LD_INT 1
47477: PLUS
47478: ARRAY
47479: ST_TO_ADDR
47480: GO 47483
47482: POP
// temp_list2 = [ ] ;
47483: LD_ADDR_VAR 0 10
47487: PUSH
47488: EMPTY
47489: ST_TO_ADDR
// for i in temp_list do
47490: LD_ADDR_VAR 0 8
47494: PUSH
47495: LD_VAR 0 9
47499: PUSH
47500: FOR_IN
47501: IFFALSE 47553
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
47503: LD_ADDR_VAR 0 10
47507: PUSH
47508: LD_VAR 0 10
47512: PUSH
47513: LD_VAR 0 8
47517: PUSH
47518: LD_INT 1
47520: ARRAY
47521: PUSH
47522: LD_VAR 0 2
47526: PLUS
47527: PUSH
47528: LD_VAR 0 8
47532: PUSH
47533: LD_INT 2
47535: ARRAY
47536: PUSH
47537: LD_VAR 0 3
47541: PLUS
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: EMPTY
47548: LIST
47549: ADD
47550: ST_TO_ADDR
47551: GO 47500
47553: POP
47554: POP
// result = temp_list2 ;
47555: LD_ADDR_VAR 0 7
47559: PUSH
47560: LD_VAR 0 10
47564: ST_TO_ADDR
// end ;
47565: LD_VAR 0 7
47569: RET
// export function EnemyInRange ( unit , dist ) ; begin
47570: LD_INT 0
47572: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
47573: LD_ADDR_VAR 0 3
47577: PUSH
47578: LD_VAR 0 1
47582: PPUSH
47583: CALL_OW 255
47587: PPUSH
47588: LD_VAR 0 1
47592: PPUSH
47593: CALL_OW 250
47597: PPUSH
47598: LD_VAR 0 1
47602: PPUSH
47603: CALL_OW 251
47607: PPUSH
47608: LD_VAR 0 2
47612: PPUSH
47613: CALL 20966 0 4
47617: PUSH
47618: LD_INT 4
47620: ARRAY
47621: ST_TO_ADDR
// end ;
47622: LD_VAR 0 3
47626: RET
// export function PlayerSeeMe ( unit ) ; begin
47627: LD_INT 0
47629: PPUSH
// result := See ( your_side , unit ) ;
47630: LD_ADDR_VAR 0 2
47634: PUSH
47635: LD_OWVAR 2
47639: PPUSH
47640: LD_VAR 0 1
47644: PPUSH
47645: CALL_OW 292
47649: ST_TO_ADDR
// end ;
47650: LD_VAR 0 2
47654: RET
// export function ReverseDir ( unit ) ; begin
47655: LD_INT 0
47657: PPUSH
// if not unit then
47658: LD_VAR 0 1
47662: NOT
47663: IFFALSE 47667
// exit ;
47665: GO 47690
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
47667: LD_ADDR_VAR 0 2
47671: PUSH
47672: LD_VAR 0 1
47676: PPUSH
47677: CALL_OW 254
47681: PUSH
47682: LD_INT 3
47684: PLUS
47685: PUSH
47686: LD_INT 6
47688: MOD
47689: ST_TO_ADDR
// end ;
47690: LD_VAR 0 2
47694: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
47695: LD_INT 0
47697: PPUSH
47698: PPUSH
47699: PPUSH
47700: PPUSH
47701: PPUSH
// if not hexes then
47702: LD_VAR 0 2
47706: NOT
47707: IFFALSE 47711
// exit ;
47709: GO 47859
// dist := 9999 ;
47711: LD_ADDR_VAR 0 5
47715: PUSH
47716: LD_INT 9999
47718: ST_TO_ADDR
// for i = 1 to hexes do
47719: LD_ADDR_VAR 0 4
47723: PUSH
47724: DOUBLE
47725: LD_INT 1
47727: DEC
47728: ST_TO_ADDR
47729: LD_VAR 0 2
47733: PUSH
47734: FOR_TO
47735: IFFALSE 47847
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
47737: LD_VAR 0 1
47741: PPUSH
47742: LD_VAR 0 2
47746: PUSH
47747: LD_VAR 0 4
47751: ARRAY
47752: PUSH
47753: LD_INT 1
47755: ARRAY
47756: PPUSH
47757: LD_VAR 0 2
47761: PUSH
47762: LD_VAR 0 4
47766: ARRAY
47767: PUSH
47768: LD_INT 2
47770: ARRAY
47771: PPUSH
47772: CALL_OW 297
47776: PUSH
47777: LD_VAR 0 5
47781: LESS
47782: IFFALSE 47845
// begin hex := hexes [ i ] ;
47784: LD_ADDR_VAR 0 7
47788: PUSH
47789: LD_VAR 0 2
47793: PUSH
47794: LD_VAR 0 4
47798: ARRAY
47799: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47800: LD_ADDR_VAR 0 5
47804: PUSH
47805: LD_VAR 0 1
47809: PPUSH
47810: LD_VAR 0 2
47814: PUSH
47815: LD_VAR 0 4
47819: ARRAY
47820: PUSH
47821: LD_INT 1
47823: ARRAY
47824: PPUSH
47825: LD_VAR 0 2
47829: PUSH
47830: LD_VAR 0 4
47834: ARRAY
47835: PUSH
47836: LD_INT 2
47838: ARRAY
47839: PPUSH
47840: CALL_OW 297
47844: ST_TO_ADDR
// end ; end ;
47845: GO 47734
47847: POP
47848: POP
// result := hex ;
47849: LD_ADDR_VAR 0 3
47853: PUSH
47854: LD_VAR 0 7
47858: ST_TO_ADDR
// end ;
47859: LD_VAR 0 3
47863: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
47864: LD_INT 0
47866: PPUSH
47867: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
47868: LD_VAR 0 1
47872: NOT
47873: PUSH
47874: LD_VAR 0 1
47878: PUSH
47879: LD_INT 21
47881: PUSH
47882: LD_INT 2
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 23
47891: PUSH
47892: LD_INT 2
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PPUSH
47903: CALL_OW 69
47907: IN
47908: NOT
47909: OR
47910: IFFALSE 47914
// exit ;
47912: GO 47961
// for i = 1 to 3 do
47914: LD_ADDR_VAR 0 3
47918: PUSH
47919: DOUBLE
47920: LD_INT 1
47922: DEC
47923: ST_TO_ADDR
47924: LD_INT 3
47926: PUSH
47927: FOR_TO
47928: IFFALSE 47959
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
47930: LD_VAR 0 1
47934: PPUSH
47935: CALL_OW 250
47939: PPUSH
47940: LD_VAR 0 1
47944: PPUSH
47945: CALL_OW 251
47949: PPUSH
47950: LD_INT 1
47952: PPUSH
47953: CALL_OW 453
47957: GO 47927
47959: POP
47960: POP
// end ;
47961: LD_VAR 0 2
47965: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
47966: LD_INT 0
47968: PPUSH
47969: PPUSH
47970: PPUSH
47971: PPUSH
47972: PPUSH
47973: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
47974: LD_VAR 0 1
47978: NOT
47979: PUSH
47980: LD_VAR 0 2
47984: NOT
47985: OR
47986: PUSH
47987: LD_VAR 0 1
47991: PPUSH
47992: CALL_OW 314
47996: OR
47997: IFFALSE 48001
// exit ;
47999: GO 48442
// x := GetX ( enemy_unit ) ;
48001: LD_ADDR_VAR 0 7
48005: PUSH
48006: LD_VAR 0 2
48010: PPUSH
48011: CALL_OW 250
48015: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48016: LD_ADDR_VAR 0 8
48020: PUSH
48021: LD_VAR 0 2
48025: PPUSH
48026: CALL_OW 251
48030: ST_TO_ADDR
// if not x or not y then
48031: LD_VAR 0 7
48035: NOT
48036: PUSH
48037: LD_VAR 0 8
48041: NOT
48042: OR
48043: IFFALSE 48047
// exit ;
48045: GO 48442
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48047: LD_ADDR_VAR 0 6
48051: PUSH
48052: LD_VAR 0 7
48056: PPUSH
48057: LD_INT 0
48059: PPUSH
48060: LD_INT 4
48062: PPUSH
48063: CALL_OW 272
48067: PUSH
48068: LD_VAR 0 8
48072: PPUSH
48073: LD_INT 0
48075: PPUSH
48076: LD_INT 4
48078: PPUSH
48079: CALL_OW 273
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_VAR 0 7
48092: PPUSH
48093: LD_INT 1
48095: PPUSH
48096: LD_INT 4
48098: PPUSH
48099: CALL_OW 272
48103: PUSH
48104: LD_VAR 0 8
48108: PPUSH
48109: LD_INT 1
48111: PPUSH
48112: LD_INT 4
48114: PPUSH
48115: CALL_OW 273
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_VAR 0 7
48128: PPUSH
48129: LD_INT 2
48131: PPUSH
48132: LD_INT 4
48134: PPUSH
48135: CALL_OW 272
48139: PUSH
48140: LD_VAR 0 8
48144: PPUSH
48145: LD_INT 2
48147: PPUSH
48148: LD_INT 4
48150: PPUSH
48151: CALL_OW 273
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_VAR 0 7
48164: PPUSH
48165: LD_INT 3
48167: PPUSH
48168: LD_INT 4
48170: PPUSH
48171: CALL_OW 272
48175: PUSH
48176: LD_VAR 0 8
48180: PPUSH
48181: LD_INT 3
48183: PPUSH
48184: LD_INT 4
48186: PPUSH
48187: CALL_OW 273
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_VAR 0 7
48200: PPUSH
48201: LD_INT 4
48203: PPUSH
48204: LD_INT 4
48206: PPUSH
48207: CALL_OW 272
48211: PUSH
48212: LD_VAR 0 8
48216: PPUSH
48217: LD_INT 4
48219: PPUSH
48220: LD_INT 4
48222: PPUSH
48223: CALL_OW 273
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_VAR 0 7
48236: PPUSH
48237: LD_INT 5
48239: PPUSH
48240: LD_INT 4
48242: PPUSH
48243: CALL_OW 272
48247: PUSH
48248: LD_VAR 0 8
48252: PPUSH
48253: LD_INT 5
48255: PPUSH
48256: LD_INT 4
48258: PPUSH
48259: CALL_OW 273
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: ST_TO_ADDR
// for i = tmp downto 1 do
48276: LD_ADDR_VAR 0 4
48280: PUSH
48281: DOUBLE
48282: LD_VAR 0 6
48286: INC
48287: ST_TO_ADDR
48288: LD_INT 1
48290: PUSH
48291: FOR_DOWNTO
48292: IFFALSE 48393
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
48294: LD_VAR 0 6
48298: PUSH
48299: LD_VAR 0 4
48303: ARRAY
48304: PUSH
48305: LD_INT 1
48307: ARRAY
48308: PPUSH
48309: LD_VAR 0 6
48313: PUSH
48314: LD_VAR 0 4
48318: ARRAY
48319: PUSH
48320: LD_INT 2
48322: ARRAY
48323: PPUSH
48324: CALL_OW 488
48328: NOT
48329: PUSH
48330: LD_VAR 0 6
48334: PUSH
48335: LD_VAR 0 4
48339: ARRAY
48340: PUSH
48341: LD_INT 1
48343: ARRAY
48344: PPUSH
48345: LD_VAR 0 6
48349: PUSH
48350: LD_VAR 0 4
48354: ARRAY
48355: PUSH
48356: LD_INT 2
48358: ARRAY
48359: PPUSH
48360: CALL_OW 428
48364: PUSH
48365: LD_INT 0
48367: NONEQUAL
48368: OR
48369: IFFALSE 48391
// tmp := Delete ( tmp , i ) ;
48371: LD_ADDR_VAR 0 6
48375: PUSH
48376: LD_VAR 0 6
48380: PPUSH
48381: LD_VAR 0 4
48385: PPUSH
48386: CALL_OW 3
48390: ST_TO_ADDR
48391: GO 48291
48393: POP
48394: POP
// j := GetClosestHex ( unit , tmp ) ;
48395: LD_ADDR_VAR 0 5
48399: PUSH
48400: LD_VAR 0 1
48404: PPUSH
48405: LD_VAR 0 6
48409: PPUSH
48410: CALL 47695 0 2
48414: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
48415: LD_VAR 0 1
48419: PPUSH
48420: LD_VAR 0 5
48424: PUSH
48425: LD_INT 1
48427: ARRAY
48428: PPUSH
48429: LD_VAR 0 5
48433: PUSH
48434: LD_INT 2
48436: ARRAY
48437: PPUSH
48438: CALL_OW 111
// end ;
48442: LD_VAR 0 3
48446: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
48447: LD_INT 0
48449: PPUSH
48450: PPUSH
48451: PPUSH
// uc_side = 0 ;
48452: LD_ADDR_OWVAR 20
48456: PUSH
48457: LD_INT 0
48459: ST_TO_ADDR
// uc_nation = 0 ;
48460: LD_ADDR_OWVAR 21
48464: PUSH
48465: LD_INT 0
48467: ST_TO_ADDR
// InitHc_All ( ) ;
48468: CALL_OW 584
// InitVc ;
48472: CALL_OW 20
// if mastodonts then
48476: LD_VAR 0 6
48480: IFFALSE 48547
// for i = 1 to mastodonts do
48482: LD_ADDR_VAR 0 11
48486: PUSH
48487: DOUBLE
48488: LD_INT 1
48490: DEC
48491: ST_TO_ADDR
48492: LD_VAR 0 6
48496: PUSH
48497: FOR_TO
48498: IFFALSE 48545
// begin vc_chassis := 31 ;
48500: LD_ADDR_OWVAR 37
48504: PUSH
48505: LD_INT 31
48507: ST_TO_ADDR
// vc_control := control_rider ;
48508: LD_ADDR_OWVAR 38
48512: PUSH
48513: LD_INT 4
48515: ST_TO_ADDR
// animal := CreateVehicle ;
48516: LD_ADDR_VAR 0 12
48520: PUSH
48521: CALL_OW 45
48525: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48526: LD_VAR 0 12
48530: PPUSH
48531: LD_VAR 0 8
48535: PPUSH
48536: LD_INT 0
48538: PPUSH
48539: CALL 50735 0 3
// end ;
48543: GO 48497
48545: POP
48546: POP
// if horses then
48547: LD_VAR 0 5
48551: IFFALSE 48618
// for i = 1 to horses do
48553: LD_ADDR_VAR 0 11
48557: PUSH
48558: DOUBLE
48559: LD_INT 1
48561: DEC
48562: ST_TO_ADDR
48563: LD_VAR 0 5
48567: PUSH
48568: FOR_TO
48569: IFFALSE 48616
// begin hc_class := 21 ;
48571: LD_ADDR_OWVAR 28
48575: PUSH
48576: LD_INT 21
48578: ST_TO_ADDR
// hc_gallery :=  ;
48579: LD_ADDR_OWVAR 33
48583: PUSH
48584: LD_STRING 
48586: ST_TO_ADDR
// animal := CreateHuman ;
48587: LD_ADDR_VAR 0 12
48591: PUSH
48592: CALL_OW 44
48596: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48597: LD_VAR 0 12
48601: PPUSH
48602: LD_VAR 0 8
48606: PPUSH
48607: LD_INT 0
48609: PPUSH
48610: CALL 50735 0 3
// end ;
48614: GO 48568
48616: POP
48617: POP
// if birds then
48618: LD_VAR 0 1
48622: IFFALSE 48689
// for i = 1 to birds do
48624: LD_ADDR_VAR 0 11
48628: PUSH
48629: DOUBLE
48630: LD_INT 1
48632: DEC
48633: ST_TO_ADDR
48634: LD_VAR 0 1
48638: PUSH
48639: FOR_TO
48640: IFFALSE 48687
// begin hc_class = 18 ;
48642: LD_ADDR_OWVAR 28
48646: PUSH
48647: LD_INT 18
48649: ST_TO_ADDR
// hc_gallery =  ;
48650: LD_ADDR_OWVAR 33
48654: PUSH
48655: LD_STRING 
48657: ST_TO_ADDR
// animal := CreateHuman ;
48658: LD_ADDR_VAR 0 12
48662: PUSH
48663: CALL_OW 44
48667: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48668: LD_VAR 0 12
48672: PPUSH
48673: LD_VAR 0 8
48677: PPUSH
48678: LD_INT 0
48680: PPUSH
48681: CALL 50735 0 3
// end ;
48685: GO 48639
48687: POP
48688: POP
// if tigers then
48689: LD_VAR 0 2
48693: IFFALSE 48777
// for i = 1 to tigers do
48695: LD_ADDR_VAR 0 11
48699: PUSH
48700: DOUBLE
48701: LD_INT 1
48703: DEC
48704: ST_TO_ADDR
48705: LD_VAR 0 2
48709: PUSH
48710: FOR_TO
48711: IFFALSE 48775
// begin hc_class = class_tiger ;
48713: LD_ADDR_OWVAR 28
48717: PUSH
48718: LD_INT 14
48720: ST_TO_ADDR
// hc_gallery =  ;
48721: LD_ADDR_OWVAR 33
48725: PUSH
48726: LD_STRING 
48728: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
48729: LD_ADDR_OWVAR 35
48733: PUSH
48734: LD_INT 7
48736: NEG
48737: PPUSH
48738: LD_INT 7
48740: PPUSH
48741: CALL_OW 12
48745: ST_TO_ADDR
// animal := CreateHuman ;
48746: LD_ADDR_VAR 0 12
48750: PUSH
48751: CALL_OW 44
48755: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48756: LD_VAR 0 12
48760: PPUSH
48761: LD_VAR 0 8
48765: PPUSH
48766: LD_INT 0
48768: PPUSH
48769: CALL 50735 0 3
// end ;
48773: GO 48710
48775: POP
48776: POP
// if apemans then
48777: LD_VAR 0 3
48781: IFFALSE 48904
// for i = 1 to apemans do
48783: LD_ADDR_VAR 0 11
48787: PUSH
48788: DOUBLE
48789: LD_INT 1
48791: DEC
48792: ST_TO_ADDR
48793: LD_VAR 0 3
48797: PUSH
48798: FOR_TO
48799: IFFALSE 48902
// begin hc_class = class_apeman ;
48801: LD_ADDR_OWVAR 28
48805: PUSH
48806: LD_INT 12
48808: ST_TO_ADDR
// hc_gallery =  ;
48809: LD_ADDR_OWVAR 33
48813: PUSH
48814: LD_STRING 
48816: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
48817: LD_ADDR_OWVAR 35
48821: PUSH
48822: LD_INT 2
48824: NEG
48825: PPUSH
48826: LD_INT 2
48828: PPUSH
48829: CALL_OW 12
48833: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
48834: LD_ADDR_OWVAR 31
48838: PUSH
48839: LD_INT 1
48841: PPUSH
48842: LD_INT 3
48844: PPUSH
48845: CALL_OW 12
48849: PUSH
48850: LD_INT 1
48852: PPUSH
48853: LD_INT 3
48855: PPUSH
48856: CALL_OW 12
48860: PUSH
48861: LD_INT 0
48863: PUSH
48864: LD_INT 0
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: ST_TO_ADDR
// animal := CreateHuman ;
48873: LD_ADDR_VAR 0 12
48877: PUSH
48878: CALL_OW 44
48882: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48883: LD_VAR 0 12
48887: PPUSH
48888: LD_VAR 0 8
48892: PPUSH
48893: LD_INT 0
48895: PPUSH
48896: CALL 50735 0 3
// end ;
48900: GO 48798
48902: POP
48903: POP
// if enchidnas then
48904: LD_VAR 0 4
48908: IFFALSE 48975
// for i = 1 to enchidnas do
48910: LD_ADDR_VAR 0 11
48914: PUSH
48915: DOUBLE
48916: LD_INT 1
48918: DEC
48919: ST_TO_ADDR
48920: LD_VAR 0 4
48924: PUSH
48925: FOR_TO
48926: IFFALSE 48973
// begin hc_class = 13 ;
48928: LD_ADDR_OWVAR 28
48932: PUSH
48933: LD_INT 13
48935: ST_TO_ADDR
// hc_gallery =  ;
48936: LD_ADDR_OWVAR 33
48940: PUSH
48941: LD_STRING 
48943: ST_TO_ADDR
// animal := CreateHuman ;
48944: LD_ADDR_VAR 0 12
48948: PUSH
48949: CALL_OW 44
48953: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48954: LD_VAR 0 12
48958: PPUSH
48959: LD_VAR 0 8
48963: PPUSH
48964: LD_INT 0
48966: PPUSH
48967: CALL 50735 0 3
// end ;
48971: GO 48925
48973: POP
48974: POP
// if fishes then
48975: LD_VAR 0 7
48979: IFFALSE 49046
// for i = 1 to fishes do
48981: LD_ADDR_VAR 0 11
48985: PUSH
48986: DOUBLE
48987: LD_INT 1
48989: DEC
48990: ST_TO_ADDR
48991: LD_VAR 0 7
48995: PUSH
48996: FOR_TO
48997: IFFALSE 49044
// begin hc_class = 20 ;
48999: LD_ADDR_OWVAR 28
49003: PUSH
49004: LD_INT 20
49006: ST_TO_ADDR
// hc_gallery =  ;
49007: LD_ADDR_OWVAR 33
49011: PUSH
49012: LD_STRING 
49014: ST_TO_ADDR
// animal := CreateHuman ;
49015: LD_ADDR_VAR 0 12
49019: PUSH
49020: CALL_OW 44
49024: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
49025: LD_VAR 0 12
49029: PPUSH
49030: LD_VAR 0 9
49034: PPUSH
49035: LD_INT 0
49037: PPUSH
49038: CALL 50735 0 3
// end ;
49042: GO 48996
49044: POP
49045: POP
// end ;
49046: LD_VAR 0 10
49050: RET
// export function WantHeal ( sci , unit ) ; begin
49051: LD_INT 0
49053: PPUSH
// if GetTaskList ( sci ) > 0 then
49054: LD_VAR 0 1
49058: PPUSH
49059: CALL_OW 437
49063: PUSH
49064: LD_INT 0
49066: GREATER
49067: IFFALSE 49137
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
49069: LD_VAR 0 1
49073: PPUSH
49074: CALL_OW 437
49078: PUSH
49079: LD_INT 1
49081: ARRAY
49082: PUSH
49083: LD_INT 1
49085: ARRAY
49086: PUSH
49087: LD_STRING l
49089: EQUAL
49090: PUSH
49091: LD_VAR 0 1
49095: PPUSH
49096: CALL_OW 437
49100: PUSH
49101: LD_INT 1
49103: ARRAY
49104: PUSH
49105: LD_INT 4
49107: ARRAY
49108: PUSH
49109: LD_VAR 0 2
49113: EQUAL
49114: AND
49115: IFFALSE 49127
// result := true else
49117: LD_ADDR_VAR 0 3
49121: PUSH
49122: LD_INT 1
49124: ST_TO_ADDR
49125: GO 49135
// result := false ;
49127: LD_ADDR_VAR 0 3
49131: PUSH
49132: LD_INT 0
49134: ST_TO_ADDR
// end else
49135: GO 49145
// result := false ;
49137: LD_ADDR_VAR 0 3
49141: PUSH
49142: LD_INT 0
49144: ST_TO_ADDR
// end ;
49145: LD_VAR 0 3
49149: RET
// export function HealTarget ( sci ) ; begin
49150: LD_INT 0
49152: PPUSH
// if not sci then
49153: LD_VAR 0 1
49157: NOT
49158: IFFALSE 49162
// exit ;
49160: GO 49227
// result := 0 ;
49162: LD_ADDR_VAR 0 2
49166: PUSH
49167: LD_INT 0
49169: ST_TO_ADDR
// if GetTaskList ( sci ) then
49170: LD_VAR 0 1
49174: PPUSH
49175: CALL_OW 437
49179: IFFALSE 49227
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
49181: LD_VAR 0 1
49185: PPUSH
49186: CALL_OW 437
49190: PUSH
49191: LD_INT 1
49193: ARRAY
49194: PUSH
49195: LD_INT 1
49197: ARRAY
49198: PUSH
49199: LD_STRING l
49201: EQUAL
49202: IFFALSE 49227
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
49204: LD_ADDR_VAR 0 2
49208: PUSH
49209: LD_VAR 0 1
49213: PPUSH
49214: CALL_OW 437
49218: PUSH
49219: LD_INT 1
49221: ARRAY
49222: PUSH
49223: LD_INT 4
49225: ARRAY
49226: ST_TO_ADDR
// end ;
49227: LD_VAR 0 2
49231: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
49232: LD_INT 0
49234: PPUSH
49235: PPUSH
49236: PPUSH
49237: PPUSH
// if not base_units then
49238: LD_VAR 0 1
49242: NOT
49243: IFFALSE 49247
// exit ;
49245: GO 49334
// result := false ;
49247: LD_ADDR_VAR 0 2
49251: PUSH
49252: LD_INT 0
49254: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
49255: LD_ADDR_VAR 0 5
49259: PUSH
49260: LD_VAR 0 1
49264: PPUSH
49265: LD_INT 21
49267: PUSH
49268: LD_INT 3
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PPUSH
49275: CALL_OW 72
49279: ST_TO_ADDR
// if not tmp then
49280: LD_VAR 0 5
49284: NOT
49285: IFFALSE 49289
// exit ;
49287: GO 49334
// for i in tmp do
49289: LD_ADDR_VAR 0 3
49293: PUSH
49294: LD_VAR 0 5
49298: PUSH
49299: FOR_IN
49300: IFFALSE 49332
// begin result := EnemyInRange ( i , 22 ) ;
49302: LD_ADDR_VAR 0 2
49306: PUSH
49307: LD_VAR 0 3
49311: PPUSH
49312: LD_INT 22
49314: PPUSH
49315: CALL 47570 0 2
49319: ST_TO_ADDR
// if result then
49320: LD_VAR 0 2
49324: IFFALSE 49330
// exit ;
49326: POP
49327: POP
49328: GO 49334
// end ;
49330: GO 49299
49332: POP
49333: POP
// end ;
49334: LD_VAR 0 2
49338: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
49339: LD_INT 0
49341: PPUSH
49342: PPUSH
// if not units then
49343: LD_VAR 0 1
49347: NOT
49348: IFFALSE 49352
// exit ;
49350: GO 49422
// result := [ ] ;
49352: LD_ADDR_VAR 0 3
49356: PUSH
49357: EMPTY
49358: ST_TO_ADDR
// for i in units do
49359: LD_ADDR_VAR 0 4
49363: PUSH
49364: LD_VAR 0 1
49368: PUSH
49369: FOR_IN
49370: IFFALSE 49420
// if GetTag ( i ) = tag then
49372: LD_VAR 0 4
49376: PPUSH
49377: CALL_OW 110
49381: PUSH
49382: LD_VAR 0 2
49386: EQUAL
49387: IFFALSE 49418
// result := Replace ( result , result + 1 , i ) ;
49389: LD_ADDR_VAR 0 3
49393: PUSH
49394: LD_VAR 0 3
49398: PPUSH
49399: LD_VAR 0 3
49403: PUSH
49404: LD_INT 1
49406: PLUS
49407: PPUSH
49408: LD_VAR 0 4
49412: PPUSH
49413: CALL_OW 1
49417: ST_TO_ADDR
49418: GO 49369
49420: POP
49421: POP
// end ;
49422: LD_VAR 0 3
49426: RET
// export function IsDriver ( un ) ; begin
49427: LD_INT 0
49429: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
49430: LD_ADDR_VAR 0 2
49434: PUSH
49435: LD_VAR 0 1
49439: PUSH
49440: LD_INT 55
49442: PUSH
49443: EMPTY
49444: LIST
49445: PPUSH
49446: CALL_OW 69
49450: IN
49451: ST_TO_ADDR
// end ;
49452: LD_VAR 0 2
49456: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
49457: LD_INT 0
49459: PPUSH
49460: PPUSH
// list := [ ] ;
49461: LD_ADDR_VAR 0 5
49465: PUSH
49466: EMPTY
49467: ST_TO_ADDR
// case d of 0 :
49468: LD_VAR 0 3
49472: PUSH
49473: LD_INT 0
49475: DOUBLE
49476: EQUAL
49477: IFTRUE 49481
49479: GO 49614
49481: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
49482: LD_ADDR_VAR 0 5
49486: PUSH
49487: LD_VAR 0 1
49491: PUSH
49492: LD_INT 4
49494: MINUS
49495: PUSH
49496: LD_VAR 0 2
49500: PUSH
49501: LD_INT 4
49503: MINUS
49504: PUSH
49505: LD_INT 2
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: LIST
49512: PUSH
49513: LD_VAR 0 1
49517: PUSH
49518: LD_INT 3
49520: MINUS
49521: PUSH
49522: LD_VAR 0 2
49526: PUSH
49527: LD_INT 1
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: LIST
49534: PUSH
49535: LD_VAR 0 1
49539: PUSH
49540: LD_INT 4
49542: PLUS
49543: PUSH
49544: LD_VAR 0 2
49548: PUSH
49549: LD_INT 4
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: LIST
49556: PUSH
49557: LD_VAR 0 1
49561: PUSH
49562: LD_INT 3
49564: PLUS
49565: PUSH
49566: LD_VAR 0 2
49570: PUSH
49571: LD_INT 3
49573: PLUS
49574: PUSH
49575: LD_INT 5
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: LIST
49582: PUSH
49583: LD_VAR 0 1
49587: PUSH
49588: LD_VAR 0 2
49592: PUSH
49593: LD_INT 4
49595: PLUS
49596: PUSH
49597: LD_INT 0
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: LIST
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: ST_TO_ADDR
// end ; 1 :
49612: GO 50312
49614: LD_INT 1
49616: DOUBLE
49617: EQUAL
49618: IFTRUE 49622
49620: GO 49755
49622: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
49623: LD_ADDR_VAR 0 5
49627: PUSH
49628: LD_VAR 0 1
49632: PUSH
49633: LD_VAR 0 2
49637: PUSH
49638: LD_INT 4
49640: MINUS
49641: PUSH
49642: LD_INT 3
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: LIST
49649: PUSH
49650: LD_VAR 0 1
49654: PUSH
49655: LD_INT 3
49657: MINUS
49658: PUSH
49659: LD_VAR 0 2
49663: PUSH
49664: LD_INT 3
49666: MINUS
49667: PUSH
49668: LD_INT 2
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: LIST
49675: PUSH
49676: LD_VAR 0 1
49680: PUSH
49681: LD_INT 4
49683: MINUS
49684: PUSH
49685: LD_VAR 0 2
49689: PUSH
49690: LD_INT 1
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: LIST
49697: PUSH
49698: LD_VAR 0 1
49702: PUSH
49703: LD_VAR 0 2
49707: PUSH
49708: LD_INT 3
49710: PLUS
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: LIST
49719: PUSH
49720: LD_VAR 0 1
49724: PUSH
49725: LD_INT 4
49727: PLUS
49728: PUSH
49729: LD_VAR 0 2
49733: PUSH
49734: LD_INT 4
49736: PLUS
49737: PUSH
49738: LD_INT 5
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: LIST
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: ST_TO_ADDR
// end ; 2 :
49753: GO 50312
49755: LD_INT 2
49757: DOUBLE
49758: EQUAL
49759: IFTRUE 49763
49761: GO 49892
49763: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
49764: LD_ADDR_VAR 0 5
49768: PUSH
49769: LD_VAR 0 1
49773: PUSH
49774: LD_VAR 0 2
49778: PUSH
49779: LD_INT 3
49781: MINUS
49782: PUSH
49783: LD_INT 3
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: LIST
49790: PUSH
49791: LD_VAR 0 1
49795: PUSH
49796: LD_INT 4
49798: PLUS
49799: PUSH
49800: LD_VAR 0 2
49804: PUSH
49805: LD_INT 4
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: LIST
49812: PUSH
49813: LD_VAR 0 1
49817: PUSH
49818: LD_VAR 0 2
49822: PUSH
49823: LD_INT 4
49825: PLUS
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: LIST
49834: PUSH
49835: LD_VAR 0 1
49839: PUSH
49840: LD_INT 3
49842: MINUS
49843: PUSH
49844: LD_VAR 0 2
49848: PUSH
49849: LD_INT 1
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: LIST
49856: PUSH
49857: LD_VAR 0 1
49861: PUSH
49862: LD_INT 4
49864: MINUS
49865: PUSH
49866: LD_VAR 0 2
49870: PUSH
49871: LD_INT 4
49873: MINUS
49874: PUSH
49875: LD_INT 2
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: LIST
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: ST_TO_ADDR
// end ; 3 :
49890: GO 50312
49892: LD_INT 3
49894: DOUBLE
49895: EQUAL
49896: IFTRUE 49900
49898: GO 50033
49900: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
49901: LD_ADDR_VAR 0 5
49905: PUSH
49906: LD_VAR 0 1
49910: PUSH
49911: LD_INT 3
49913: PLUS
49914: PUSH
49915: LD_VAR 0 2
49919: PUSH
49920: LD_INT 4
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: LIST
49927: PUSH
49928: LD_VAR 0 1
49932: PUSH
49933: LD_INT 4
49935: PLUS
49936: PUSH
49937: LD_VAR 0 2
49941: PUSH
49942: LD_INT 4
49944: PLUS
49945: PUSH
49946: LD_INT 5
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: LIST
49953: PUSH
49954: LD_VAR 0 1
49958: PUSH
49959: LD_INT 4
49961: MINUS
49962: PUSH
49963: LD_VAR 0 2
49967: PUSH
49968: LD_INT 1
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: LIST
49975: PUSH
49976: LD_VAR 0 1
49980: PUSH
49981: LD_VAR 0 2
49985: PUSH
49986: LD_INT 4
49988: MINUS
49989: PUSH
49990: LD_INT 3
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: LIST
49997: PUSH
49998: LD_VAR 0 1
50002: PUSH
50003: LD_INT 3
50005: MINUS
50006: PUSH
50007: LD_VAR 0 2
50011: PUSH
50012: LD_INT 3
50014: MINUS
50015: PUSH
50016: LD_INT 2
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: LIST
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: ST_TO_ADDR
// end ; 4 :
50031: GO 50312
50033: LD_INT 4
50035: DOUBLE
50036: EQUAL
50037: IFTRUE 50041
50039: GO 50174
50041: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
50042: LD_ADDR_VAR 0 5
50046: PUSH
50047: LD_VAR 0 1
50051: PUSH
50052: LD_VAR 0 2
50056: PUSH
50057: LD_INT 4
50059: PLUS
50060: PUSH
50061: LD_INT 0
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: LIST
50068: PUSH
50069: LD_VAR 0 1
50073: PUSH
50074: LD_INT 3
50076: PLUS
50077: PUSH
50078: LD_VAR 0 2
50082: PUSH
50083: LD_INT 3
50085: PLUS
50086: PUSH
50087: LD_INT 5
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: LIST
50094: PUSH
50095: LD_VAR 0 1
50099: PUSH
50100: LD_INT 4
50102: PLUS
50103: PUSH
50104: LD_VAR 0 2
50108: PUSH
50109: LD_INT 4
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: LIST
50116: PUSH
50117: LD_VAR 0 1
50121: PUSH
50122: LD_VAR 0 2
50126: PUSH
50127: LD_INT 3
50129: MINUS
50130: PUSH
50131: LD_INT 3
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: LIST
50138: PUSH
50139: LD_VAR 0 1
50143: PUSH
50144: LD_INT 4
50146: MINUS
50147: PUSH
50148: LD_VAR 0 2
50152: PUSH
50153: LD_INT 4
50155: MINUS
50156: PUSH
50157: LD_INT 2
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: LIST
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: ST_TO_ADDR
// end ; 5 :
50172: GO 50312
50174: LD_INT 5
50176: DOUBLE
50177: EQUAL
50178: IFTRUE 50182
50180: GO 50311
50182: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
50183: LD_ADDR_VAR 0 5
50187: PUSH
50188: LD_VAR 0 1
50192: PUSH
50193: LD_INT 4
50195: MINUS
50196: PUSH
50197: LD_VAR 0 2
50201: PUSH
50202: LD_INT 1
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: LIST
50209: PUSH
50210: LD_VAR 0 1
50214: PUSH
50215: LD_VAR 0 2
50219: PUSH
50220: LD_INT 4
50222: MINUS
50223: PUSH
50224: LD_INT 3
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: LIST
50231: PUSH
50232: LD_VAR 0 1
50236: PUSH
50237: LD_INT 4
50239: PLUS
50240: PUSH
50241: LD_VAR 0 2
50245: PUSH
50246: LD_INT 4
50248: PLUS
50249: PUSH
50250: LD_INT 5
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: LIST
50257: PUSH
50258: LD_VAR 0 1
50262: PUSH
50263: LD_INT 3
50265: PLUS
50266: PUSH
50267: LD_VAR 0 2
50271: PUSH
50272: LD_INT 4
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: LIST
50279: PUSH
50280: LD_VAR 0 1
50284: PUSH
50285: LD_VAR 0 2
50289: PUSH
50290: LD_INT 3
50292: PLUS
50293: PUSH
50294: LD_INT 0
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: LIST
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: ST_TO_ADDR
// end ; end ;
50309: GO 50312
50311: POP
// result := list ;
50312: LD_ADDR_VAR 0 4
50316: PUSH
50317: LD_VAR 0 5
50321: ST_TO_ADDR
// end ;
50322: LD_VAR 0 4
50326: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
50327: LD_INT 0
50329: PPUSH
50330: PPUSH
50331: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
50332: LD_VAR 0 1
50336: NOT
50337: PUSH
50338: LD_VAR 0 2
50342: PUSH
50343: LD_INT 1
50345: PUSH
50346: LD_INT 2
50348: PUSH
50349: LD_INT 3
50351: PUSH
50352: LD_INT 4
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: IN
50361: NOT
50362: OR
50363: IFFALSE 50367
// exit ;
50365: GO 50459
// tmp := [ ] ;
50367: LD_ADDR_VAR 0 5
50371: PUSH
50372: EMPTY
50373: ST_TO_ADDR
// for i in units do
50374: LD_ADDR_VAR 0 4
50378: PUSH
50379: LD_VAR 0 1
50383: PUSH
50384: FOR_IN
50385: IFFALSE 50428
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
50387: LD_ADDR_VAR 0 5
50391: PUSH
50392: LD_VAR 0 5
50396: PPUSH
50397: LD_VAR 0 5
50401: PUSH
50402: LD_INT 1
50404: PLUS
50405: PPUSH
50406: LD_VAR 0 4
50410: PPUSH
50411: LD_VAR 0 2
50415: PPUSH
50416: CALL_OW 259
50420: PPUSH
50421: CALL_OW 2
50425: ST_TO_ADDR
50426: GO 50384
50428: POP
50429: POP
// if not tmp then
50430: LD_VAR 0 5
50434: NOT
50435: IFFALSE 50439
// exit ;
50437: GO 50459
// result := SortListByListDesc ( units , tmp ) ;
50439: LD_ADDR_VAR 0 3
50443: PUSH
50444: LD_VAR 0 1
50448: PPUSH
50449: LD_VAR 0 5
50453: PPUSH
50454: CALL_OW 77
50458: ST_TO_ADDR
// end ;
50459: LD_VAR 0 3
50463: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
50464: LD_INT 0
50466: PPUSH
50467: PPUSH
50468: PPUSH
// result := false ;
50469: LD_ADDR_VAR 0 3
50473: PUSH
50474: LD_INT 0
50476: ST_TO_ADDR
// x := GetX ( building ) ;
50477: LD_ADDR_VAR 0 4
50481: PUSH
50482: LD_VAR 0 2
50486: PPUSH
50487: CALL_OW 250
50491: ST_TO_ADDR
// y := GetY ( building ) ;
50492: LD_ADDR_VAR 0 5
50496: PUSH
50497: LD_VAR 0 2
50501: PPUSH
50502: CALL_OW 251
50506: ST_TO_ADDR
// if not building or not x or not y then
50507: LD_VAR 0 2
50511: NOT
50512: PUSH
50513: LD_VAR 0 4
50517: NOT
50518: OR
50519: PUSH
50520: LD_VAR 0 5
50524: NOT
50525: OR
50526: IFFALSE 50530
// exit ;
50528: GO 50622
// if GetTaskList ( unit ) then
50530: LD_VAR 0 1
50534: PPUSH
50535: CALL_OW 437
50539: IFFALSE 50622
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
50541: LD_STRING e
50543: PUSH
50544: LD_VAR 0 1
50548: PPUSH
50549: CALL_OW 437
50553: PUSH
50554: LD_INT 1
50556: ARRAY
50557: PUSH
50558: LD_INT 1
50560: ARRAY
50561: EQUAL
50562: PUSH
50563: LD_VAR 0 4
50567: PUSH
50568: LD_VAR 0 1
50572: PPUSH
50573: CALL_OW 437
50577: PUSH
50578: LD_INT 1
50580: ARRAY
50581: PUSH
50582: LD_INT 2
50584: ARRAY
50585: EQUAL
50586: AND
50587: PUSH
50588: LD_VAR 0 5
50592: PUSH
50593: LD_VAR 0 1
50597: PPUSH
50598: CALL_OW 437
50602: PUSH
50603: LD_INT 1
50605: ARRAY
50606: PUSH
50607: LD_INT 3
50609: ARRAY
50610: EQUAL
50611: AND
50612: IFFALSE 50622
// result := true end ;
50614: LD_ADDR_VAR 0 3
50618: PUSH
50619: LD_INT 1
50621: ST_TO_ADDR
// end ;
50622: LD_VAR 0 3
50626: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
50627: LD_INT 0
50629: PPUSH
// result := false ;
50630: LD_ADDR_VAR 0 4
50634: PUSH
50635: LD_INT 0
50637: ST_TO_ADDR
// if GetTaskList ( unit ) then
50638: LD_VAR 0 1
50642: PPUSH
50643: CALL_OW 437
50647: IFFALSE 50730
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
50649: LD_STRING M
50651: PUSH
50652: LD_VAR 0 1
50656: PPUSH
50657: CALL_OW 437
50661: PUSH
50662: LD_INT 1
50664: ARRAY
50665: PUSH
50666: LD_INT 1
50668: ARRAY
50669: EQUAL
50670: PUSH
50671: LD_VAR 0 2
50675: PUSH
50676: LD_VAR 0 1
50680: PPUSH
50681: CALL_OW 437
50685: PUSH
50686: LD_INT 1
50688: ARRAY
50689: PUSH
50690: LD_INT 2
50692: ARRAY
50693: EQUAL
50694: AND
50695: PUSH
50696: LD_VAR 0 3
50700: PUSH
50701: LD_VAR 0 1
50705: PPUSH
50706: CALL_OW 437
50710: PUSH
50711: LD_INT 1
50713: ARRAY
50714: PUSH
50715: LD_INT 3
50717: ARRAY
50718: EQUAL
50719: AND
50720: IFFALSE 50730
// result := true ;
50722: LD_ADDR_VAR 0 4
50726: PUSH
50727: LD_INT 1
50729: ST_TO_ADDR
// end ; end ;
50730: LD_VAR 0 4
50734: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
50735: LD_INT 0
50737: PPUSH
50738: PPUSH
50739: PPUSH
50740: PPUSH
// if not unit or not area then
50741: LD_VAR 0 1
50745: NOT
50746: PUSH
50747: LD_VAR 0 2
50751: NOT
50752: OR
50753: IFFALSE 50757
// exit ;
50755: GO 50921
// tmp := AreaToList ( area , i ) ;
50757: LD_ADDR_VAR 0 6
50761: PUSH
50762: LD_VAR 0 2
50766: PPUSH
50767: LD_VAR 0 5
50771: PPUSH
50772: CALL_OW 517
50776: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
50777: LD_ADDR_VAR 0 5
50781: PUSH
50782: DOUBLE
50783: LD_INT 1
50785: DEC
50786: ST_TO_ADDR
50787: LD_VAR 0 6
50791: PUSH
50792: LD_INT 1
50794: ARRAY
50795: PUSH
50796: FOR_TO
50797: IFFALSE 50919
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
50799: LD_ADDR_VAR 0 7
50803: PUSH
50804: LD_VAR 0 6
50808: PUSH
50809: LD_INT 1
50811: ARRAY
50812: PUSH
50813: LD_VAR 0 5
50817: ARRAY
50818: PUSH
50819: LD_VAR 0 6
50823: PUSH
50824: LD_INT 2
50826: ARRAY
50827: PUSH
50828: LD_VAR 0 5
50832: ARRAY
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
50838: LD_VAR 0 7
50842: PUSH
50843: LD_INT 1
50845: ARRAY
50846: PPUSH
50847: LD_VAR 0 7
50851: PUSH
50852: LD_INT 2
50854: ARRAY
50855: PPUSH
50856: CALL_OW 428
50860: PUSH
50861: LD_INT 0
50863: EQUAL
50864: IFFALSE 50917
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
50866: LD_VAR 0 1
50870: PPUSH
50871: LD_VAR 0 7
50875: PUSH
50876: LD_INT 1
50878: ARRAY
50879: PPUSH
50880: LD_VAR 0 7
50884: PUSH
50885: LD_INT 2
50887: ARRAY
50888: PPUSH
50889: LD_VAR 0 3
50893: PPUSH
50894: CALL_OW 48
// result := IsPlaced ( unit ) ;
50898: LD_ADDR_VAR 0 4
50902: PUSH
50903: LD_VAR 0 1
50907: PPUSH
50908: CALL_OW 305
50912: ST_TO_ADDR
// exit ;
50913: POP
50914: POP
50915: GO 50921
// end ; end ;
50917: GO 50796
50919: POP
50920: POP
// end ;
50921: LD_VAR 0 4
50925: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
50926: LD_INT 0
50928: PPUSH
50929: PPUSH
50930: PPUSH
// if not side or side > 8 then
50931: LD_VAR 0 1
50935: NOT
50936: PUSH
50937: LD_VAR 0 1
50941: PUSH
50942: LD_INT 8
50944: GREATER
50945: OR
50946: IFFALSE 50950
// exit ;
50948: GO 51137
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
50950: LD_ADDR_VAR 0 4
50954: PUSH
50955: LD_INT 22
50957: PUSH
50958: LD_VAR 0 1
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 21
50969: PUSH
50970: LD_INT 3
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PPUSH
50981: CALL_OW 69
50985: ST_TO_ADDR
// if not tmp then
50986: LD_VAR 0 4
50990: NOT
50991: IFFALSE 50995
// exit ;
50993: GO 51137
// enable_addtolog := true ;
50995: LD_ADDR_OWVAR 81
50999: PUSH
51000: LD_INT 1
51002: ST_TO_ADDR
// AddToLog ( [ ) ;
51003: LD_STRING [
51005: PPUSH
51006: CALL_OW 561
// for i in tmp do
51010: LD_ADDR_VAR 0 3
51014: PUSH
51015: LD_VAR 0 4
51019: PUSH
51020: FOR_IN
51021: IFFALSE 51128
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
51023: LD_STRING [
51025: PUSH
51026: LD_VAR 0 3
51030: PPUSH
51031: CALL_OW 266
51035: STR
51036: PUSH
51037: LD_STRING , 
51039: STR
51040: PUSH
51041: LD_VAR 0 3
51045: PPUSH
51046: CALL_OW 250
51050: STR
51051: PUSH
51052: LD_STRING , 
51054: STR
51055: PUSH
51056: LD_VAR 0 3
51060: PPUSH
51061: CALL_OW 251
51065: STR
51066: PUSH
51067: LD_STRING , 
51069: STR
51070: PUSH
51071: LD_VAR 0 3
51075: PPUSH
51076: CALL_OW 254
51080: STR
51081: PUSH
51082: LD_STRING , 
51084: STR
51085: PUSH
51086: LD_VAR 0 3
51090: PPUSH
51091: LD_INT 1
51093: PPUSH
51094: CALL_OW 268
51098: STR
51099: PUSH
51100: LD_STRING , 
51102: STR
51103: PUSH
51104: LD_VAR 0 3
51108: PPUSH
51109: LD_INT 2
51111: PPUSH
51112: CALL_OW 268
51116: STR
51117: PUSH
51118: LD_STRING ],
51120: STR
51121: PPUSH
51122: CALL_OW 561
// end ;
51126: GO 51020
51128: POP
51129: POP
// AddToLog ( ]; ) ;
51130: LD_STRING ];
51132: PPUSH
51133: CALL_OW 561
// end ;
51137: LD_VAR 0 2
51141: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
51142: LD_INT 0
51144: PPUSH
51145: PPUSH
51146: PPUSH
51147: PPUSH
51148: PPUSH
// if not area or not rate or not max then
51149: LD_VAR 0 1
51153: NOT
51154: PUSH
51155: LD_VAR 0 2
51159: NOT
51160: OR
51161: PUSH
51162: LD_VAR 0 4
51166: NOT
51167: OR
51168: IFFALSE 51172
// exit ;
51170: GO 51364
// while 1 do
51172: LD_INT 1
51174: IFFALSE 51364
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
51176: LD_ADDR_VAR 0 9
51180: PUSH
51181: LD_VAR 0 1
51185: PPUSH
51186: LD_INT 1
51188: PPUSH
51189: CALL_OW 287
51193: PUSH
51194: LD_INT 10
51196: MUL
51197: ST_TO_ADDR
// r := rate / 10 ;
51198: LD_ADDR_VAR 0 7
51202: PUSH
51203: LD_VAR 0 2
51207: PUSH
51208: LD_INT 10
51210: DIVREAL
51211: ST_TO_ADDR
// time := 1 1$00 ;
51212: LD_ADDR_VAR 0 8
51216: PUSH
51217: LD_INT 2100
51219: ST_TO_ADDR
// if amount < min then
51220: LD_VAR 0 9
51224: PUSH
51225: LD_VAR 0 3
51229: LESS
51230: IFFALSE 51248
// r := r * 2 else
51232: LD_ADDR_VAR 0 7
51236: PUSH
51237: LD_VAR 0 7
51241: PUSH
51242: LD_INT 2
51244: MUL
51245: ST_TO_ADDR
51246: GO 51274
// if amount > max then
51248: LD_VAR 0 9
51252: PUSH
51253: LD_VAR 0 4
51257: GREATER
51258: IFFALSE 51274
// r := r / 2 ;
51260: LD_ADDR_VAR 0 7
51264: PUSH
51265: LD_VAR 0 7
51269: PUSH
51270: LD_INT 2
51272: DIVREAL
51273: ST_TO_ADDR
// time := time / r ;
51274: LD_ADDR_VAR 0 8
51278: PUSH
51279: LD_VAR 0 8
51283: PUSH
51284: LD_VAR 0 7
51288: DIVREAL
51289: ST_TO_ADDR
// if time < 0 then
51290: LD_VAR 0 8
51294: PUSH
51295: LD_INT 0
51297: LESS
51298: IFFALSE 51315
// time := time * - 1 ;
51300: LD_ADDR_VAR 0 8
51304: PUSH
51305: LD_VAR 0 8
51309: PUSH
51310: LD_INT 1
51312: NEG
51313: MUL
51314: ST_TO_ADDR
// wait ( time ) ;
51315: LD_VAR 0 8
51319: PPUSH
51320: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
51324: LD_INT 35
51326: PPUSH
51327: LD_INT 875
51329: PPUSH
51330: CALL_OW 12
51334: PPUSH
51335: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
51339: LD_INT 1
51341: PPUSH
51342: LD_INT 5
51344: PPUSH
51345: CALL_OW 12
51349: PPUSH
51350: LD_VAR 0 1
51354: PPUSH
51355: LD_INT 1
51357: PPUSH
51358: CALL_OW 55
// end ;
51362: GO 51172
// end ;
51364: LD_VAR 0 5
51368: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
51369: LD_INT 0
51371: PPUSH
51372: PPUSH
51373: PPUSH
51374: PPUSH
51375: PPUSH
51376: PPUSH
51377: PPUSH
51378: PPUSH
// if not turrets or not factories then
51379: LD_VAR 0 1
51383: NOT
51384: PUSH
51385: LD_VAR 0 2
51389: NOT
51390: OR
51391: IFFALSE 51395
// exit ;
51393: GO 51702
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
51395: LD_ADDR_VAR 0 10
51399: PUSH
51400: LD_INT 5
51402: PUSH
51403: LD_INT 6
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 2
51412: PUSH
51413: LD_INT 4
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 3
51422: PUSH
51423: LD_INT 5
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 24
51437: PUSH
51438: LD_INT 25
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 23
51447: PUSH
51448: LD_INT 27
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 42
51461: PUSH
51462: LD_INT 43
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 44
51471: PUSH
51472: LD_INT 46
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 45
51481: PUSH
51482: LD_INT 47
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: LIST
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: LIST
51498: ST_TO_ADDR
// result := [ ] ;
51499: LD_ADDR_VAR 0 3
51503: PUSH
51504: EMPTY
51505: ST_TO_ADDR
// for i in turrets do
51506: LD_ADDR_VAR 0 4
51510: PUSH
51511: LD_VAR 0 1
51515: PUSH
51516: FOR_IN
51517: IFFALSE 51700
// begin nat := GetNation ( i ) ;
51519: LD_ADDR_VAR 0 7
51523: PUSH
51524: LD_VAR 0 4
51528: PPUSH
51529: CALL_OW 248
51533: ST_TO_ADDR
// weapon := 0 ;
51534: LD_ADDR_VAR 0 8
51538: PUSH
51539: LD_INT 0
51541: ST_TO_ADDR
// if not nat then
51542: LD_VAR 0 7
51546: NOT
51547: IFFALSE 51551
// continue ;
51549: GO 51516
// for j in list [ nat ] do
51551: LD_ADDR_VAR 0 5
51555: PUSH
51556: LD_VAR 0 10
51560: PUSH
51561: LD_VAR 0 7
51565: ARRAY
51566: PUSH
51567: FOR_IN
51568: IFFALSE 51609
// if GetBWeapon ( i ) = j [ 1 ] then
51570: LD_VAR 0 4
51574: PPUSH
51575: CALL_OW 269
51579: PUSH
51580: LD_VAR 0 5
51584: PUSH
51585: LD_INT 1
51587: ARRAY
51588: EQUAL
51589: IFFALSE 51607
// begin weapon := j [ 2 ] ;
51591: LD_ADDR_VAR 0 8
51595: PUSH
51596: LD_VAR 0 5
51600: PUSH
51601: LD_INT 2
51603: ARRAY
51604: ST_TO_ADDR
// break ;
51605: GO 51609
// end ;
51607: GO 51567
51609: POP
51610: POP
// if not weapon then
51611: LD_VAR 0 8
51615: NOT
51616: IFFALSE 51620
// continue ;
51618: GO 51516
// for k in factories do
51620: LD_ADDR_VAR 0 6
51624: PUSH
51625: LD_VAR 0 2
51629: PUSH
51630: FOR_IN
51631: IFFALSE 51696
// begin weapons := AvailableWeaponList ( k ) ;
51633: LD_ADDR_VAR 0 9
51637: PUSH
51638: LD_VAR 0 6
51642: PPUSH
51643: CALL_OW 478
51647: ST_TO_ADDR
// if not weapons then
51648: LD_VAR 0 9
51652: NOT
51653: IFFALSE 51657
// continue ;
51655: GO 51630
// if weapon in weapons then
51657: LD_VAR 0 8
51661: PUSH
51662: LD_VAR 0 9
51666: IN
51667: IFFALSE 51694
// begin result := [ i , weapon ] ;
51669: LD_ADDR_VAR 0 3
51673: PUSH
51674: LD_VAR 0 4
51678: PUSH
51679: LD_VAR 0 8
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: ST_TO_ADDR
// exit ;
51688: POP
51689: POP
51690: POP
51691: POP
51692: GO 51702
// end ; end ;
51694: GO 51630
51696: POP
51697: POP
// end ;
51698: GO 51516
51700: POP
51701: POP
// end ;
51702: LD_VAR 0 3
51706: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
51707: LD_INT 0
51709: PPUSH
// if not side or side > 8 then
51710: LD_VAR 0 3
51714: NOT
51715: PUSH
51716: LD_VAR 0 3
51720: PUSH
51721: LD_INT 8
51723: GREATER
51724: OR
51725: IFFALSE 51729
// exit ;
51727: GO 51788
// if not range then
51729: LD_VAR 0 4
51733: NOT
51734: IFFALSE 51745
// range := - 12 ;
51736: LD_ADDR_VAR 0 4
51740: PUSH
51741: LD_INT 12
51743: NEG
51744: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
51745: LD_VAR 0 1
51749: PPUSH
51750: LD_VAR 0 2
51754: PPUSH
51755: LD_VAR 0 3
51759: PPUSH
51760: LD_VAR 0 4
51764: PPUSH
51765: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
51769: LD_VAR 0 1
51773: PPUSH
51774: LD_VAR 0 2
51778: PPUSH
51779: LD_VAR 0 3
51783: PPUSH
51784: CALL_OW 331
// end ;
51788: LD_VAR 0 5
51792: RET
// export function Video ( mode ) ; begin
51793: LD_INT 0
51795: PPUSH
// ingame_video = mode ;
51796: LD_ADDR_OWVAR 52
51800: PUSH
51801: LD_VAR 0 1
51805: ST_TO_ADDR
// interface_hidden = mode ;
51806: LD_ADDR_OWVAR 54
51810: PUSH
51811: LD_VAR 0 1
51815: ST_TO_ADDR
// end ;
51816: LD_VAR 0 2
51820: RET
// export function Join ( array , element ) ; begin
51821: LD_INT 0
51823: PPUSH
// result := Replace ( array , array + 1 , element ) ;
51824: LD_ADDR_VAR 0 3
51828: PUSH
51829: LD_VAR 0 1
51833: PPUSH
51834: LD_VAR 0 1
51838: PUSH
51839: LD_INT 1
51841: PLUS
51842: PPUSH
51843: LD_VAR 0 2
51847: PPUSH
51848: CALL_OW 1
51852: ST_TO_ADDR
// end ;
51853: LD_VAR 0 3
51857: RET
// export function JoinUnion ( array , element ) ; begin
51858: LD_INT 0
51860: PPUSH
// result := array union element ;
51861: LD_ADDR_VAR 0 3
51865: PUSH
51866: LD_VAR 0 1
51870: PUSH
51871: LD_VAR 0 2
51875: UNION
51876: ST_TO_ADDR
// end ;
51877: LD_VAR 0 3
51881: RET
// export function GetBehemoths ( side ) ; begin
51882: LD_INT 0
51884: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
51885: LD_ADDR_VAR 0 2
51889: PUSH
51890: LD_INT 22
51892: PUSH
51893: LD_VAR 0 1
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 31
51904: PUSH
51905: LD_INT 25
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PPUSH
51916: CALL_OW 69
51920: ST_TO_ADDR
// end ;
51921: LD_VAR 0 2
51925: RET
// export function Shuffle ( array ) ; var i , index ; begin
51926: LD_INT 0
51928: PPUSH
51929: PPUSH
51930: PPUSH
// result := [ ] ;
51931: LD_ADDR_VAR 0 2
51935: PUSH
51936: EMPTY
51937: ST_TO_ADDR
// if not array then
51938: LD_VAR 0 1
51942: NOT
51943: IFFALSE 51947
// exit ;
51945: GO 52046
// Randomize ;
51947: CALL_OW 10
// for i = array downto 1 do
51951: LD_ADDR_VAR 0 3
51955: PUSH
51956: DOUBLE
51957: LD_VAR 0 1
51961: INC
51962: ST_TO_ADDR
51963: LD_INT 1
51965: PUSH
51966: FOR_DOWNTO
51967: IFFALSE 52044
// begin index := rand ( 1 , array ) ;
51969: LD_ADDR_VAR 0 4
51973: PUSH
51974: LD_INT 1
51976: PPUSH
51977: LD_VAR 0 1
51981: PPUSH
51982: CALL_OW 12
51986: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
51987: LD_ADDR_VAR 0 2
51991: PUSH
51992: LD_VAR 0 2
51996: PPUSH
51997: LD_VAR 0 2
52001: PUSH
52002: LD_INT 1
52004: PLUS
52005: PPUSH
52006: LD_VAR 0 1
52010: PUSH
52011: LD_VAR 0 4
52015: ARRAY
52016: PPUSH
52017: CALL_OW 2
52021: ST_TO_ADDR
// array := Delete ( array , index ) ;
52022: LD_ADDR_VAR 0 1
52026: PUSH
52027: LD_VAR 0 1
52031: PPUSH
52032: LD_VAR 0 4
52036: PPUSH
52037: CALL_OW 3
52041: ST_TO_ADDR
// end ;
52042: GO 51966
52044: POP
52045: POP
// end ;
52046: LD_VAR 0 2
52050: RET
// export function GetBaseMaterials ( base ) ; begin
52051: LD_INT 0
52053: PPUSH
// result := [ 0 , 0 , 0 ] ;
52054: LD_ADDR_VAR 0 2
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: LD_INT 0
52064: PUSH
52065: LD_INT 0
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: LIST
52072: ST_TO_ADDR
// if not base then
52073: LD_VAR 0 1
52077: NOT
52078: IFFALSE 52082
// exit ;
52080: GO 52131
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
52082: LD_ADDR_VAR 0 2
52086: PUSH
52087: LD_VAR 0 1
52091: PPUSH
52092: LD_INT 1
52094: PPUSH
52095: CALL_OW 275
52099: PUSH
52100: LD_VAR 0 1
52104: PPUSH
52105: LD_INT 2
52107: PPUSH
52108: CALL_OW 275
52112: PUSH
52113: LD_VAR 0 1
52117: PPUSH
52118: LD_INT 3
52120: PPUSH
52121: CALL_OW 275
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: LIST
52130: ST_TO_ADDR
// end ;
52131: LD_VAR 0 2
52135: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
52136: LD_INT 0
52138: PPUSH
52139: PPUSH
// result := array ;
52140: LD_ADDR_VAR 0 3
52144: PUSH
52145: LD_VAR 0 1
52149: ST_TO_ADDR
// if size > 0 then
52150: LD_VAR 0 2
52154: PUSH
52155: LD_INT 0
52157: GREATER
52158: IFFALSE 52204
// for i := array downto size do
52160: LD_ADDR_VAR 0 4
52164: PUSH
52165: DOUBLE
52166: LD_VAR 0 1
52170: INC
52171: ST_TO_ADDR
52172: LD_VAR 0 2
52176: PUSH
52177: FOR_DOWNTO
52178: IFFALSE 52202
// result := Delete ( result , result ) ;
52180: LD_ADDR_VAR 0 3
52184: PUSH
52185: LD_VAR 0 3
52189: PPUSH
52190: LD_VAR 0 3
52194: PPUSH
52195: CALL_OW 3
52199: ST_TO_ADDR
52200: GO 52177
52202: POP
52203: POP
// end ;
52204: LD_VAR 0 3
52208: RET
// export function ComExit ( unit ) ; var tmp ; begin
52209: LD_INT 0
52211: PPUSH
52212: PPUSH
// if not IsInUnit ( unit ) then
52213: LD_VAR 0 1
52217: PPUSH
52218: CALL_OW 310
52222: NOT
52223: IFFALSE 52227
// exit ;
52225: GO 52287
// tmp := IsInUnit ( unit ) ;
52227: LD_ADDR_VAR 0 3
52231: PUSH
52232: LD_VAR 0 1
52236: PPUSH
52237: CALL_OW 310
52241: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
52242: LD_VAR 0 3
52246: PPUSH
52247: CALL_OW 247
52251: PUSH
52252: LD_INT 2
52254: EQUAL
52255: IFFALSE 52268
// ComExitVehicle ( unit ) else
52257: LD_VAR 0 1
52261: PPUSH
52262: CALL_OW 121
52266: GO 52277
// ComExitBuilding ( unit ) ;
52268: LD_VAR 0 1
52272: PPUSH
52273: CALL_OW 122
// result := tmp ;
52277: LD_ADDR_VAR 0 2
52281: PUSH
52282: LD_VAR 0 3
52286: ST_TO_ADDR
// end ;
52287: LD_VAR 0 2
52291: RET
// export function ComExitAll ( units ) ; var i ; begin
52292: LD_INT 0
52294: PPUSH
52295: PPUSH
// if not units then
52296: LD_VAR 0 1
52300: NOT
52301: IFFALSE 52305
// exit ;
52303: GO 52331
// for i in units do
52305: LD_ADDR_VAR 0 3
52309: PUSH
52310: LD_VAR 0 1
52314: PUSH
52315: FOR_IN
52316: IFFALSE 52329
// ComExit ( i ) ;
52318: LD_VAR 0 3
52322: PPUSH
52323: CALL 52209 0 1
52327: GO 52315
52329: POP
52330: POP
// end ;
52331: LD_VAR 0 2
52335: RET
// export function ResetHc ; begin
52336: LD_INT 0
52338: PPUSH
// InitHc ;
52339: CALL_OW 19
// hc_importance := 0 ;
52343: LD_ADDR_OWVAR 32
52347: PUSH
52348: LD_INT 0
52350: ST_TO_ADDR
// end ;
52351: LD_VAR 0 1
52355: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
52356: LD_INT 0
52358: PPUSH
52359: PPUSH
52360: PPUSH
// _x := ( x1 + x2 ) div 2 ;
52361: LD_ADDR_VAR 0 6
52365: PUSH
52366: LD_VAR 0 1
52370: PUSH
52371: LD_VAR 0 3
52375: PLUS
52376: PUSH
52377: LD_INT 2
52379: DIV
52380: ST_TO_ADDR
// if _x < 0 then
52381: LD_VAR 0 6
52385: PUSH
52386: LD_INT 0
52388: LESS
52389: IFFALSE 52406
// _x := _x * - 1 ;
52391: LD_ADDR_VAR 0 6
52395: PUSH
52396: LD_VAR 0 6
52400: PUSH
52401: LD_INT 1
52403: NEG
52404: MUL
52405: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
52406: LD_ADDR_VAR 0 7
52410: PUSH
52411: LD_VAR 0 2
52415: PUSH
52416: LD_VAR 0 4
52420: PLUS
52421: PUSH
52422: LD_INT 2
52424: DIV
52425: ST_TO_ADDR
// if _y < 0 then
52426: LD_VAR 0 7
52430: PUSH
52431: LD_INT 0
52433: LESS
52434: IFFALSE 52451
// _y := _y * - 1 ;
52436: LD_ADDR_VAR 0 7
52440: PUSH
52441: LD_VAR 0 7
52445: PUSH
52446: LD_INT 1
52448: NEG
52449: MUL
52450: ST_TO_ADDR
// result := [ _x , _y ] ;
52451: LD_ADDR_VAR 0 5
52455: PUSH
52456: LD_VAR 0 6
52460: PUSH
52461: LD_VAR 0 7
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: ST_TO_ADDR
// end ;
52470: LD_VAR 0 5
52474: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
52475: LD_INT 0
52477: PPUSH
52478: PPUSH
52479: PPUSH
52480: PPUSH
// task := GetTaskList ( unit ) ;
52481: LD_ADDR_VAR 0 7
52485: PUSH
52486: LD_VAR 0 1
52490: PPUSH
52491: CALL_OW 437
52495: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
52496: LD_VAR 0 7
52500: NOT
52501: PUSH
52502: LD_VAR 0 1
52506: PPUSH
52507: LD_VAR 0 2
52511: PPUSH
52512: CALL_OW 308
52516: NOT
52517: AND
52518: IFFALSE 52522
// exit ;
52520: GO 52640
// if IsInArea ( unit , area ) then
52522: LD_VAR 0 1
52526: PPUSH
52527: LD_VAR 0 2
52531: PPUSH
52532: CALL_OW 308
52536: IFFALSE 52554
// begin ComMoveToArea ( unit , goAway ) ;
52538: LD_VAR 0 1
52542: PPUSH
52543: LD_VAR 0 3
52547: PPUSH
52548: CALL_OW 113
// exit ;
52552: GO 52640
// end ; if task [ 1 ] [ 1 ] <> M then
52554: LD_VAR 0 7
52558: PUSH
52559: LD_INT 1
52561: ARRAY
52562: PUSH
52563: LD_INT 1
52565: ARRAY
52566: PUSH
52567: LD_STRING M
52569: NONEQUAL
52570: IFFALSE 52574
// exit ;
52572: GO 52640
// x := task [ 1 ] [ 2 ] ;
52574: LD_ADDR_VAR 0 5
52578: PUSH
52579: LD_VAR 0 7
52583: PUSH
52584: LD_INT 1
52586: ARRAY
52587: PUSH
52588: LD_INT 2
52590: ARRAY
52591: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
52592: LD_ADDR_VAR 0 6
52596: PUSH
52597: LD_VAR 0 7
52601: PUSH
52602: LD_INT 1
52604: ARRAY
52605: PUSH
52606: LD_INT 3
52608: ARRAY
52609: ST_TO_ADDR
// if InArea ( x , y , area ) then
52610: LD_VAR 0 5
52614: PPUSH
52615: LD_VAR 0 6
52619: PPUSH
52620: LD_VAR 0 2
52624: PPUSH
52625: CALL_OW 309
52629: IFFALSE 52640
// ComStop ( unit ) ;
52631: LD_VAR 0 1
52635: PPUSH
52636: CALL_OW 141
// end ;
52640: LD_VAR 0 4
52644: RET
// export function Abs ( value ) ; begin
52645: LD_INT 0
52647: PPUSH
// result := value ;
52648: LD_ADDR_VAR 0 2
52652: PUSH
52653: LD_VAR 0 1
52657: ST_TO_ADDR
// if value < 0 then
52658: LD_VAR 0 1
52662: PUSH
52663: LD_INT 0
52665: LESS
52666: IFFALSE 52683
// result := value * - 1 ;
52668: LD_ADDR_VAR 0 2
52672: PUSH
52673: LD_VAR 0 1
52677: PUSH
52678: LD_INT 1
52680: NEG
52681: MUL
52682: ST_TO_ADDR
// end ;
52683: LD_VAR 0 2
52687: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
52688: LD_INT 0
52690: PPUSH
52691: PPUSH
52692: PPUSH
52693: PPUSH
52694: PPUSH
52695: PPUSH
52696: PPUSH
52697: PPUSH
// if not unit or not building then
52698: LD_VAR 0 1
52702: NOT
52703: PUSH
52704: LD_VAR 0 2
52708: NOT
52709: OR
52710: IFFALSE 52714
// exit ;
52712: GO 52940
// x := GetX ( building ) ;
52714: LD_ADDR_VAR 0 4
52718: PUSH
52719: LD_VAR 0 2
52723: PPUSH
52724: CALL_OW 250
52728: ST_TO_ADDR
// y := GetY ( building ) ;
52729: LD_ADDR_VAR 0 6
52733: PUSH
52734: LD_VAR 0 2
52738: PPUSH
52739: CALL_OW 251
52743: ST_TO_ADDR
// d := GetDir ( building ) ;
52744: LD_ADDR_VAR 0 8
52748: PUSH
52749: LD_VAR 0 2
52753: PPUSH
52754: CALL_OW 254
52758: ST_TO_ADDR
// r := 4 ;
52759: LD_ADDR_VAR 0 9
52763: PUSH
52764: LD_INT 4
52766: ST_TO_ADDR
// for i := 1 to 5 do
52767: LD_ADDR_VAR 0 10
52771: PUSH
52772: DOUBLE
52773: LD_INT 1
52775: DEC
52776: ST_TO_ADDR
52777: LD_INT 5
52779: PUSH
52780: FOR_TO
52781: IFFALSE 52938
// begin _x := ShiftX ( x , d , r + i ) ;
52783: LD_ADDR_VAR 0 5
52787: PUSH
52788: LD_VAR 0 4
52792: PPUSH
52793: LD_VAR 0 8
52797: PPUSH
52798: LD_VAR 0 9
52802: PUSH
52803: LD_VAR 0 10
52807: PLUS
52808: PPUSH
52809: CALL_OW 272
52813: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
52814: LD_ADDR_VAR 0 7
52818: PUSH
52819: LD_VAR 0 6
52823: PPUSH
52824: LD_VAR 0 8
52828: PPUSH
52829: LD_VAR 0 9
52833: PUSH
52834: LD_VAR 0 10
52838: PLUS
52839: PPUSH
52840: CALL_OW 273
52844: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
52845: LD_VAR 0 5
52849: PPUSH
52850: LD_VAR 0 7
52854: PPUSH
52855: CALL_OW 488
52859: PUSH
52860: LD_VAR 0 5
52864: PPUSH
52865: LD_VAR 0 7
52869: PPUSH
52870: CALL_OW 428
52874: PPUSH
52875: CALL_OW 247
52879: PUSH
52880: LD_INT 3
52882: PUSH
52883: LD_INT 2
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: IN
52890: NOT
52891: AND
52892: IFFALSE 52936
// begin ComMoveXY ( unit , _x , _y ) ;
52894: LD_VAR 0 1
52898: PPUSH
52899: LD_VAR 0 5
52903: PPUSH
52904: LD_VAR 0 7
52908: PPUSH
52909: CALL_OW 111
// result := [ _x , _y ] ;
52913: LD_ADDR_VAR 0 3
52917: PUSH
52918: LD_VAR 0 5
52922: PUSH
52923: LD_VAR 0 7
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: ST_TO_ADDR
// exit ;
52932: POP
52933: POP
52934: GO 52940
// end ; end ;
52936: GO 52780
52938: POP
52939: POP
// end ;
52940: LD_VAR 0 3
52944: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
52945: LD_INT 0
52947: PPUSH
52948: PPUSH
52949: PPUSH
// result := 0 ;
52950: LD_ADDR_VAR 0 3
52954: PUSH
52955: LD_INT 0
52957: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
52958: LD_VAR 0 1
52962: PUSH
52963: LD_INT 0
52965: LESS
52966: PUSH
52967: LD_VAR 0 1
52971: PUSH
52972: LD_INT 8
52974: GREATER
52975: OR
52976: PUSH
52977: LD_VAR 0 2
52981: PUSH
52982: LD_INT 0
52984: LESS
52985: OR
52986: PUSH
52987: LD_VAR 0 2
52991: PUSH
52992: LD_INT 8
52994: GREATER
52995: OR
52996: IFFALSE 53000
// exit ;
52998: GO 53075
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
53000: LD_ADDR_VAR 0 4
53004: PUSH
53005: LD_INT 22
53007: PUSH
53008: LD_VAR 0 2
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PPUSH
53017: CALL_OW 69
53021: PUSH
53022: FOR_IN
53023: IFFALSE 53073
// begin un := UnitShoot ( i ) ;
53025: LD_ADDR_VAR 0 5
53029: PUSH
53030: LD_VAR 0 4
53034: PPUSH
53035: CALL_OW 504
53039: ST_TO_ADDR
// if GetSide ( un ) = side1 then
53040: LD_VAR 0 5
53044: PPUSH
53045: CALL_OW 255
53049: PUSH
53050: LD_VAR 0 1
53054: EQUAL
53055: IFFALSE 53071
// begin result := un ;
53057: LD_ADDR_VAR 0 3
53061: PUSH
53062: LD_VAR 0 5
53066: ST_TO_ADDR
// exit ;
53067: POP
53068: POP
53069: GO 53075
// end ; end ;
53071: GO 53022
53073: POP
53074: POP
// end ;
53075: LD_VAR 0 3
53079: RET
// export function GetCargoBay ( units ) ; begin
53080: LD_INT 0
53082: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
53083: LD_ADDR_VAR 0 2
53087: PUSH
53088: LD_VAR 0 1
53092: PPUSH
53093: LD_INT 2
53095: PUSH
53096: LD_INT 34
53098: PUSH
53099: LD_INT 12
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 34
53108: PUSH
53109: LD_INT 51
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 34
53118: PUSH
53119: LD_INT 32
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 34
53128: PUSH
53129: LD_EXP 102
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: PPUSH
53145: CALL_OW 72
53149: ST_TO_ADDR
// end ;
53150: LD_VAR 0 2
53154: RET
// export function Negate ( value ) ; begin
53155: LD_INT 0
53157: PPUSH
// result := not value ;
53158: LD_ADDR_VAR 0 2
53162: PUSH
53163: LD_VAR 0 1
53167: NOT
53168: ST_TO_ADDR
// end ;
53169: LD_VAR 0 2
53173: RET
// export function Inc ( value ) ; begin
53174: LD_INT 0
53176: PPUSH
// result := value + 1 ;
53177: LD_ADDR_VAR 0 2
53181: PUSH
53182: LD_VAR 0 1
53186: PUSH
53187: LD_INT 1
53189: PLUS
53190: ST_TO_ADDR
// end ;
53191: LD_VAR 0 2
53195: RET
// export function Dec ( value ) ; begin
53196: LD_INT 0
53198: PPUSH
// result := value - 1 ;
53199: LD_ADDR_VAR 0 2
53203: PUSH
53204: LD_VAR 0 1
53208: PUSH
53209: LD_INT 1
53211: MINUS
53212: ST_TO_ADDR
// end ;
53213: LD_VAR 0 2
53217: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
53218: LD_INT 0
53220: PPUSH
53221: PPUSH
53222: PPUSH
53223: PPUSH
53224: PPUSH
53225: PPUSH
53226: PPUSH
53227: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
53228: LD_VAR 0 1
53232: PPUSH
53233: LD_VAR 0 2
53237: PPUSH
53238: CALL_OW 488
53242: NOT
53243: PUSH
53244: LD_VAR 0 3
53248: PPUSH
53249: LD_VAR 0 4
53253: PPUSH
53254: CALL_OW 488
53258: NOT
53259: OR
53260: IFFALSE 53273
// begin result := - 1 ;
53262: LD_ADDR_VAR 0 5
53266: PUSH
53267: LD_INT 1
53269: NEG
53270: ST_TO_ADDR
// exit ;
53271: GO 53508
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
53273: LD_ADDR_VAR 0 12
53277: PUSH
53278: LD_VAR 0 1
53282: PPUSH
53283: LD_VAR 0 2
53287: PPUSH
53288: LD_VAR 0 3
53292: PPUSH
53293: LD_VAR 0 4
53297: PPUSH
53298: CALL 52356 0 4
53302: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
53303: LD_ADDR_VAR 0 11
53307: PUSH
53308: LD_VAR 0 1
53312: PPUSH
53313: LD_VAR 0 2
53317: PPUSH
53318: LD_VAR 0 12
53322: PUSH
53323: LD_INT 1
53325: ARRAY
53326: PPUSH
53327: LD_VAR 0 12
53331: PUSH
53332: LD_INT 2
53334: ARRAY
53335: PPUSH
53336: CALL_OW 298
53340: ST_TO_ADDR
// distance := 9999 ;
53341: LD_ADDR_VAR 0 10
53345: PUSH
53346: LD_INT 9999
53348: ST_TO_ADDR
// for i := 0 to 5 do
53349: LD_ADDR_VAR 0 6
53353: PUSH
53354: DOUBLE
53355: LD_INT 0
53357: DEC
53358: ST_TO_ADDR
53359: LD_INT 5
53361: PUSH
53362: FOR_TO
53363: IFFALSE 53506
// begin _x := ShiftX ( x1 , i , centerDist ) ;
53365: LD_ADDR_VAR 0 7
53369: PUSH
53370: LD_VAR 0 1
53374: PPUSH
53375: LD_VAR 0 6
53379: PPUSH
53380: LD_VAR 0 11
53384: PPUSH
53385: CALL_OW 272
53389: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
53390: LD_ADDR_VAR 0 8
53394: PUSH
53395: LD_VAR 0 2
53399: PPUSH
53400: LD_VAR 0 6
53404: PPUSH
53405: LD_VAR 0 11
53409: PPUSH
53410: CALL_OW 273
53414: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
53415: LD_VAR 0 7
53419: PPUSH
53420: LD_VAR 0 8
53424: PPUSH
53425: CALL_OW 488
53429: NOT
53430: IFFALSE 53434
// continue ;
53432: GO 53362
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
53434: LD_ADDR_VAR 0 9
53438: PUSH
53439: LD_VAR 0 12
53443: PUSH
53444: LD_INT 1
53446: ARRAY
53447: PPUSH
53448: LD_VAR 0 12
53452: PUSH
53453: LD_INT 2
53455: ARRAY
53456: PPUSH
53457: LD_VAR 0 7
53461: PPUSH
53462: LD_VAR 0 8
53466: PPUSH
53467: CALL_OW 298
53471: ST_TO_ADDR
// if tmp < distance then
53472: LD_VAR 0 9
53476: PUSH
53477: LD_VAR 0 10
53481: LESS
53482: IFFALSE 53504
// begin result := i ;
53484: LD_ADDR_VAR 0 5
53488: PUSH
53489: LD_VAR 0 6
53493: ST_TO_ADDR
// distance := tmp ;
53494: LD_ADDR_VAR 0 10
53498: PUSH
53499: LD_VAR 0 9
53503: ST_TO_ADDR
// end ; end ;
53504: GO 53362
53506: POP
53507: POP
// end ;
53508: LD_VAR 0 5
53512: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
53513: LD_INT 0
53515: PPUSH
53516: PPUSH
// if not driver or not IsInUnit ( driver ) then
53517: LD_VAR 0 1
53521: NOT
53522: PUSH
53523: LD_VAR 0 1
53527: PPUSH
53528: CALL_OW 310
53532: NOT
53533: OR
53534: IFFALSE 53538
// exit ;
53536: GO 53628
// vehicle := IsInUnit ( driver ) ;
53538: LD_ADDR_VAR 0 3
53542: PUSH
53543: LD_VAR 0 1
53547: PPUSH
53548: CALL_OW 310
53552: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
53553: LD_VAR 0 1
53557: PPUSH
53558: LD_STRING \
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: LD_INT 0
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: PUSH
53588: LD_STRING E
53590: PUSH
53591: LD_INT 0
53593: PUSH
53594: LD_INT 0
53596: PUSH
53597: LD_VAR 0 3
53601: PUSH
53602: LD_INT 0
53604: PUSH
53605: LD_INT 0
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PPUSH
53624: CALL_OW 446
// end ;
53628: LD_VAR 0 2
53632: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
53633: LD_INT 0
53635: PPUSH
53636: PPUSH
// if not driver or not IsInUnit ( driver ) then
53637: LD_VAR 0 1
53641: NOT
53642: PUSH
53643: LD_VAR 0 1
53647: PPUSH
53648: CALL_OW 310
53652: NOT
53653: OR
53654: IFFALSE 53658
// exit ;
53656: GO 53748
// vehicle := IsInUnit ( driver ) ;
53658: LD_ADDR_VAR 0 3
53662: PUSH
53663: LD_VAR 0 1
53667: PPUSH
53668: CALL_OW 310
53672: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
53673: LD_VAR 0 1
53677: PPUSH
53678: LD_STRING \
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: LD_INT 0
53692: PUSH
53693: LD_INT 0
53695: PUSH
53696: LD_INT 0
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: PUSH
53708: LD_STRING E
53710: PUSH
53711: LD_INT 0
53713: PUSH
53714: LD_INT 0
53716: PUSH
53717: LD_VAR 0 3
53721: PUSH
53722: LD_INT 0
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: LD_INT 0
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PPUSH
53744: CALL_OW 447
// end ;
53748: LD_VAR 0 2
53752: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
53753: LD_INT 0
53755: PPUSH
53756: PPUSH
53757: PPUSH
// tmp := [ ] ;
53758: LD_ADDR_VAR 0 5
53762: PUSH
53763: EMPTY
53764: ST_TO_ADDR
// for i in units do
53765: LD_ADDR_VAR 0 4
53769: PUSH
53770: LD_VAR 0 1
53774: PUSH
53775: FOR_IN
53776: IFFALSE 53814
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
53778: LD_ADDR_VAR 0 5
53782: PUSH
53783: LD_VAR 0 5
53787: PPUSH
53788: LD_VAR 0 5
53792: PUSH
53793: LD_INT 1
53795: PLUS
53796: PPUSH
53797: LD_VAR 0 4
53801: PPUSH
53802: CALL_OW 256
53806: PPUSH
53807: CALL_OW 2
53811: ST_TO_ADDR
53812: GO 53775
53814: POP
53815: POP
// if not tmp then
53816: LD_VAR 0 5
53820: NOT
53821: IFFALSE 53825
// exit ;
53823: GO 53873
// if asc then
53825: LD_VAR 0 2
53829: IFFALSE 53853
// result := SortListByListAsc ( units , tmp ) else
53831: LD_ADDR_VAR 0 3
53835: PUSH
53836: LD_VAR 0 1
53840: PPUSH
53841: LD_VAR 0 5
53845: PPUSH
53846: CALL_OW 76
53850: ST_TO_ADDR
53851: GO 53873
// result := SortListByListDesc ( units , tmp ) ;
53853: LD_ADDR_VAR 0 3
53857: PUSH
53858: LD_VAR 0 1
53862: PPUSH
53863: LD_VAR 0 5
53867: PPUSH
53868: CALL_OW 77
53872: ST_TO_ADDR
// end ;
53873: LD_VAR 0 3
53877: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
53878: LD_INT 0
53880: PPUSH
53881: PPUSH
// task := GetTaskList ( mech ) ;
53882: LD_ADDR_VAR 0 4
53886: PUSH
53887: LD_VAR 0 1
53891: PPUSH
53892: CALL_OW 437
53896: ST_TO_ADDR
// if not task then
53897: LD_VAR 0 4
53901: NOT
53902: IFFALSE 53906
// exit ;
53904: GO 53948
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
53906: LD_ADDR_VAR 0 3
53910: PUSH
53911: LD_VAR 0 4
53915: PUSH
53916: LD_INT 1
53918: ARRAY
53919: PUSH
53920: LD_INT 1
53922: ARRAY
53923: PUSH
53924: LD_STRING r
53926: EQUAL
53927: PUSH
53928: LD_VAR 0 4
53932: PUSH
53933: LD_INT 1
53935: ARRAY
53936: PUSH
53937: LD_INT 4
53939: ARRAY
53940: PUSH
53941: LD_VAR 0 2
53945: EQUAL
53946: AND
53947: ST_TO_ADDR
// end ;
53948: LD_VAR 0 3
53952: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
53953: LD_INT 0
53955: PPUSH
// SetDir ( unit , d ) ;
53956: LD_VAR 0 1
53960: PPUSH
53961: LD_VAR 0 4
53965: PPUSH
53966: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
53970: LD_VAR 0 1
53974: PPUSH
53975: LD_VAR 0 2
53979: PPUSH
53980: LD_VAR 0 3
53984: PPUSH
53985: LD_VAR 0 5
53989: PPUSH
53990: CALL_OW 48
// end ;
53994: LD_VAR 0 6
53998: RET
// export function ToNaturalNumber ( number ) ; begin
53999: LD_INT 0
54001: PPUSH
// result := number div 1 ;
54002: LD_ADDR_VAR 0 2
54006: PUSH
54007: LD_VAR 0 1
54011: PUSH
54012: LD_INT 1
54014: DIV
54015: ST_TO_ADDR
// if number < 0 then
54016: LD_VAR 0 1
54020: PUSH
54021: LD_INT 0
54023: LESS
54024: IFFALSE 54034
// result := 0 ;
54026: LD_ADDR_VAR 0 2
54030: PUSH
54031: LD_INT 0
54033: ST_TO_ADDR
// end ;
54034: LD_VAR 0 2
54038: RET
// export function SortByClass ( units , class ) ; var un ; begin
54039: LD_INT 0
54041: PPUSH
54042: PPUSH
// if not units or not class then
54043: LD_VAR 0 1
54047: NOT
54048: PUSH
54049: LD_VAR 0 2
54053: NOT
54054: OR
54055: IFFALSE 54059
// exit ;
54057: GO 54154
// result := [ ] ;
54059: LD_ADDR_VAR 0 3
54063: PUSH
54064: EMPTY
54065: ST_TO_ADDR
// for un in units do
54066: LD_ADDR_VAR 0 4
54070: PUSH
54071: LD_VAR 0 1
54075: PUSH
54076: FOR_IN
54077: IFFALSE 54152
// if GetClass ( un ) = class then
54079: LD_VAR 0 4
54083: PPUSH
54084: CALL_OW 257
54088: PUSH
54089: LD_VAR 0 2
54093: EQUAL
54094: IFFALSE 54121
// result := Insert ( result , 1 , un ) else
54096: LD_ADDR_VAR 0 3
54100: PUSH
54101: LD_VAR 0 3
54105: PPUSH
54106: LD_INT 1
54108: PPUSH
54109: LD_VAR 0 4
54113: PPUSH
54114: CALL_OW 2
54118: ST_TO_ADDR
54119: GO 54150
// result := Replace ( result , result + 1 , un ) ;
54121: LD_ADDR_VAR 0 3
54125: PUSH
54126: LD_VAR 0 3
54130: PPUSH
54131: LD_VAR 0 3
54135: PUSH
54136: LD_INT 1
54138: PLUS
54139: PPUSH
54140: LD_VAR 0 4
54144: PPUSH
54145: CALL_OW 1
54149: ST_TO_ADDR
54150: GO 54076
54152: POP
54153: POP
// end ;
54154: LD_VAR 0 3
54158: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
54159: LD_INT 0
54161: PPUSH
54162: PPUSH
54163: PPUSH
54164: PPUSH
54165: PPUSH
54166: PPUSH
54167: PPUSH
// result := [ ] ;
54168: LD_ADDR_VAR 0 4
54172: PUSH
54173: EMPTY
54174: ST_TO_ADDR
// if x - r < 0 then
54175: LD_VAR 0 1
54179: PUSH
54180: LD_VAR 0 3
54184: MINUS
54185: PUSH
54186: LD_INT 0
54188: LESS
54189: IFFALSE 54201
// min_x := 0 else
54191: LD_ADDR_VAR 0 8
54195: PUSH
54196: LD_INT 0
54198: ST_TO_ADDR
54199: GO 54217
// min_x := x - r ;
54201: LD_ADDR_VAR 0 8
54205: PUSH
54206: LD_VAR 0 1
54210: PUSH
54211: LD_VAR 0 3
54215: MINUS
54216: ST_TO_ADDR
// if y - r < 0 then
54217: LD_VAR 0 2
54221: PUSH
54222: LD_VAR 0 3
54226: MINUS
54227: PUSH
54228: LD_INT 0
54230: LESS
54231: IFFALSE 54243
// min_y := 0 else
54233: LD_ADDR_VAR 0 7
54237: PUSH
54238: LD_INT 0
54240: ST_TO_ADDR
54241: GO 54259
// min_y := y - r ;
54243: LD_ADDR_VAR 0 7
54247: PUSH
54248: LD_VAR 0 2
54252: PUSH
54253: LD_VAR 0 3
54257: MINUS
54258: ST_TO_ADDR
// max_x := x + r ;
54259: LD_ADDR_VAR 0 9
54263: PUSH
54264: LD_VAR 0 1
54268: PUSH
54269: LD_VAR 0 3
54273: PLUS
54274: ST_TO_ADDR
// max_y := y + r ;
54275: LD_ADDR_VAR 0 10
54279: PUSH
54280: LD_VAR 0 2
54284: PUSH
54285: LD_VAR 0 3
54289: PLUS
54290: ST_TO_ADDR
// for _x = min_x to max_x do
54291: LD_ADDR_VAR 0 5
54295: PUSH
54296: DOUBLE
54297: LD_VAR 0 8
54301: DEC
54302: ST_TO_ADDR
54303: LD_VAR 0 9
54307: PUSH
54308: FOR_TO
54309: IFFALSE 54410
// for _y = min_y to max_y do
54311: LD_ADDR_VAR 0 6
54315: PUSH
54316: DOUBLE
54317: LD_VAR 0 7
54321: DEC
54322: ST_TO_ADDR
54323: LD_VAR 0 10
54327: PUSH
54328: FOR_TO
54329: IFFALSE 54406
// begin if not ValidHex ( _x , _y ) then
54331: LD_VAR 0 5
54335: PPUSH
54336: LD_VAR 0 6
54340: PPUSH
54341: CALL_OW 488
54345: NOT
54346: IFFALSE 54350
// continue ;
54348: GO 54328
// if GetResourceTypeXY ( _x , _y ) then
54350: LD_VAR 0 5
54354: PPUSH
54355: LD_VAR 0 6
54359: PPUSH
54360: CALL_OW 283
54364: IFFALSE 54404
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
54366: LD_ADDR_VAR 0 4
54370: PUSH
54371: LD_VAR 0 4
54375: PPUSH
54376: LD_VAR 0 4
54380: PUSH
54381: LD_INT 1
54383: PLUS
54384: PPUSH
54385: LD_VAR 0 5
54389: PUSH
54390: LD_VAR 0 6
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PPUSH
54399: CALL_OW 1
54403: ST_TO_ADDR
// end ;
54404: GO 54328
54406: POP
54407: POP
54408: GO 54308
54410: POP
54411: POP
// end ;
54412: LD_VAR 0 4
54416: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
54417: LD_INT 0
54419: PPUSH
54420: PPUSH
54421: PPUSH
54422: PPUSH
54423: PPUSH
54424: PPUSH
54425: PPUSH
54426: PPUSH
// if not units then
54427: LD_VAR 0 1
54431: NOT
54432: IFFALSE 54436
// exit ;
54434: GO 54861
// result := UnitFilter ( units , [ f_ok ] ) ;
54436: LD_ADDR_VAR 0 3
54440: PUSH
54441: LD_VAR 0 1
54445: PPUSH
54446: LD_INT 50
54448: PUSH
54449: EMPTY
54450: LIST
54451: PPUSH
54452: CALL_OW 72
54456: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
54457: LD_ADDR_VAR 0 8
54461: PUSH
54462: LD_VAR 0 1
54466: PUSH
54467: LD_INT 1
54469: ARRAY
54470: PPUSH
54471: CALL_OW 255
54475: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
54476: LD_ADDR_VAR 0 10
54480: PUSH
54481: LD_INT 29
54483: PUSH
54484: LD_EXP 105
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: ST_TO_ADDR
// if not result then
54493: LD_VAR 0 3
54497: NOT
54498: IFFALSE 54502
// exit ;
54500: GO 54861
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
54502: LD_ADDR_VAR 0 5
54506: PUSH
54507: LD_INT 81
54509: PUSH
54510: LD_VAR 0 8
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PPUSH
54519: CALL_OW 69
54523: ST_TO_ADDR
// for i in result do
54524: LD_ADDR_VAR 0 4
54528: PUSH
54529: LD_VAR 0 3
54533: PUSH
54534: FOR_IN
54535: IFFALSE 54859
// begin tag := GetTag ( i ) + 1 ;
54537: LD_ADDR_VAR 0 9
54541: PUSH
54542: LD_VAR 0 4
54546: PPUSH
54547: CALL_OW 110
54551: PUSH
54552: LD_INT 1
54554: PLUS
54555: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
54556: LD_ADDR_VAR 0 7
54560: PUSH
54561: LD_VAR 0 4
54565: PPUSH
54566: CALL_OW 250
54570: PPUSH
54571: LD_VAR 0 4
54575: PPUSH
54576: CALL_OW 251
54580: PPUSH
54581: LD_INT 6
54583: PPUSH
54584: CALL 54159 0 3
54588: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
54589: LD_VAR 0 7
54593: PUSH
54594: LD_VAR 0 4
54598: PPUSH
54599: CALL_OW 264
54603: PUSH
54604: LD_VAR 0 10
54608: IN
54609: NOT
54610: AND
54611: IFFALSE 54650
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
54613: LD_VAR 0 4
54617: PPUSH
54618: LD_VAR 0 7
54622: PUSH
54623: LD_INT 1
54625: ARRAY
54626: PUSH
54627: LD_INT 1
54629: ARRAY
54630: PPUSH
54631: LD_VAR 0 7
54635: PUSH
54636: LD_INT 1
54638: ARRAY
54639: PUSH
54640: LD_INT 2
54642: ARRAY
54643: PPUSH
54644: CALL_OW 116
54648: GO 54857
// if path > tag then
54650: LD_VAR 0 2
54654: PUSH
54655: LD_VAR 0 9
54659: GREATER
54660: IFFALSE 54827
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
54662: LD_ADDR_VAR 0 6
54666: PUSH
54667: LD_VAR 0 5
54671: PPUSH
54672: LD_INT 91
54674: PUSH
54675: LD_VAR 0 4
54679: PUSH
54680: LD_INT 12
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: LIST
54687: PPUSH
54688: CALL_OW 72
54692: ST_TO_ADDR
// if nearEnemy then
54693: LD_VAR 0 6
54697: IFFALSE 54725
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
54699: LD_VAR 0 4
54703: PPUSH
54704: LD_VAR 0 6
54708: PPUSH
54709: LD_VAR 0 4
54713: PPUSH
54714: CALL_OW 74
54718: PPUSH
54719: CALL_OW 115
54723: GO 54825
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
54725: LD_VAR 0 4
54729: PPUSH
54730: LD_VAR 0 2
54734: PUSH
54735: LD_VAR 0 9
54739: ARRAY
54740: PUSH
54741: LD_INT 1
54743: ARRAY
54744: PPUSH
54745: LD_VAR 0 2
54749: PUSH
54750: LD_VAR 0 9
54754: ARRAY
54755: PUSH
54756: LD_INT 2
54758: ARRAY
54759: PPUSH
54760: CALL_OW 297
54764: PUSH
54765: LD_INT 6
54767: GREATER
54768: IFFALSE 54811
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
54770: LD_VAR 0 4
54774: PPUSH
54775: LD_VAR 0 2
54779: PUSH
54780: LD_VAR 0 9
54784: ARRAY
54785: PUSH
54786: LD_INT 1
54788: ARRAY
54789: PPUSH
54790: LD_VAR 0 2
54794: PUSH
54795: LD_VAR 0 9
54799: ARRAY
54800: PUSH
54801: LD_INT 2
54803: ARRAY
54804: PPUSH
54805: CALL_OW 114
54809: GO 54825
// SetTag ( i , tag ) ;
54811: LD_VAR 0 4
54815: PPUSH
54816: LD_VAR 0 9
54820: PPUSH
54821: CALL_OW 109
// end else
54825: GO 54857
// if enemy then
54827: LD_VAR 0 5
54831: IFFALSE 54857
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
54833: LD_VAR 0 4
54837: PPUSH
54838: LD_VAR 0 5
54842: PPUSH
54843: LD_VAR 0 4
54847: PPUSH
54848: CALL_OW 74
54852: PPUSH
54853: CALL_OW 115
// end ;
54857: GO 54534
54859: POP
54860: POP
// end ;
54861: LD_VAR 0 3
54865: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
54866: LD_INT 0
54868: PPUSH
54869: PPUSH
54870: PPUSH
// if not unit or IsInUnit ( unit ) then
54871: LD_VAR 0 1
54875: NOT
54876: PUSH
54877: LD_VAR 0 1
54881: PPUSH
54882: CALL_OW 310
54886: OR
54887: IFFALSE 54891
// exit ;
54889: GO 54982
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
54891: LD_ADDR_VAR 0 4
54895: PUSH
54896: LD_VAR 0 1
54900: PPUSH
54901: CALL_OW 250
54905: PPUSH
54906: LD_VAR 0 2
54910: PPUSH
54911: LD_INT 1
54913: PPUSH
54914: CALL_OW 272
54918: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
54919: LD_ADDR_VAR 0 5
54923: PUSH
54924: LD_VAR 0 1
54928: PPUSH
54929: CALL_OW 251
54933: PPUSH
54934: LD_VAR 0 2
54938: PPUSH
54939: LD_INT 1
54941: PPUSH
54942: CALL_OW 273
54946: ST_TO_ADDR
// if ValidHex ( x , y ) then
54947: LD_VAR 0 4
54951: PPUSH
54952: LD_VAR 0 5
54956: PPUSH
54957: CALL_OW 488
54961: IFFALSE 54982
// ComTurnXY ( unit , x , y ) ;
54963: LD_VAR 0 1
54967: PPUSH
54968: LD_VAR 0 4
54972: PPUSH
54973: LD_VAR 0 5
54977: PPUSH
54978: CALL_OW 118
// end ;
54982: LD_VAR 0 3
54986: RET
// export function SeeUnits ( side , units ) ; var i ; begin
54987: LD_INT 0
54989: PPUSH
54990: PPUSH
// result := false ;
54991: LD_ADDR_VAR 0 3
54995: PUSH
54996: LD_INT 0
54998: ST_TO_ADDR
// if not units then
54999: LD_VAR 0 2
55003: NOT
55004: IFFALSE 55008
// exit ;
55006: GO 55053
// for i in units do
55008: LD_ADDR_VAR 0 4
55012: PUSH
55013: LD_VAR 0 2
55017: PUSH
55018: FOR_IN
55019: IFFALSE 55051
// if See ( side , i ) then
55021: LD_VAR 0 1
55025: PPUSH
55026: LD_VAR 0 4
55030: PPUSH
55031: CALL_OW 292
55035: IFFALSE 55049
// begin result := true ;
55037: LD_ADDR_VAR 0 3
55041: PUSH
55042: LD_INT 1
55044: ST_TO_ADDR
// exit ;
55045: POP
55046: POP
55047: GO 55053
// end ;
55049: GO 55018
55051: POP
55052: POP
// end ;
55053: LD_VAR 0 3
55057: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
55058: LD_INT 0
55060: PPUSH
55061: PPUSH
55062: PPUSH
55063: PPUSH
// if not unit or not points then
55064: LD_VAR 0 1
55068: NOT
55069: PUSH
55070: LD_VAR 0 2
55074: NOT
55075: OR
55076: IFFALSE 55080
// exit ;
55078: GO 55170
// dist := 99999 ;
55080: LD_ADDR_VAR 0 5
55084: PUSH
55085: LD_INT 99999
55087: ST_TO_ADDR
// for i in points do
55088: LD_ADDR_VAR 0 4
55092: PUSH
55093: LD_VAR 0 2
55097: PUSH
55098: FOR_IN
55099: IFFALSE 55168
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
55101: LD_ADDR_VAR 0 6
55105: PUSH
55106: LD_VAR 0 1
55110: PPUSH
55111: LD_VAR 0 4
55115: PUSH
55116: LD_INT 1
55118: ARRAY
55119: PPUSH
55120: LD_VAR 0 4
55124: PUSH
55125: LD_INT 2
55127: ARRAY
55128: PPUSH
55129: CALL_OW 297
55133: ST_TO_ADDR
// if tmpDist < dist then
55134: LD_VAR 0 6
55138: PUSH
55139: LD_VAR 0 5
55143: LESS
55144: IFFALSE 55166
// begin result := i ;
55146: LD_ADDR_VAR 0 3
55150: PUSH
55151: LD_VAR 0 4
55155: ST_TO_ADDR
// dist := tmpDist ;
55156: LD_ADDR_VAR 0 5
55160: PUSH
55161: LD_VAR 0 6
55165: ST_TO_ADDR
// end ; end ;
55166: GO 55098
55168: POP
55169: POP
// end ; end_of_file
55170: LD_VAR 0 3
55174: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
55175: LD_VAR 0 1
55179: PUSH
55180: LD_INT 200
55182: DOUBLE
55183: GREATEREQUAL
55184: IFFALSE 55192
55186: LD_INT 299
55188: DOUBLE
55189: LESSEQUAL
55190: IFTRUE 55194
55192: GO 55226
55194: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
55195: LD_VAR 0 1
55199: PPUSH
55200: LD_VAR 0 2
55204: PPUSH
55205: LD_VAR 0 3
55209: PPUSH
55210: LD_VAR 0 4
55214: PPUSH
55215: LD_VAR 0 5
55219: PPUSH
55220: CALL 55716 0 5
55224: GO 55303
55226: LD_INT 300
55228: DOUBLE
55229: GREATEREQUAL
55230: IFFALSE 55238
55232: LD_INT 399
55234: DOUBLE
55235: LESSEQUAL
55236: IFTRUE 55240
55238: GO 55302
55240: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
55241: LD_VAR 0 1
55245: PPUSH
55246: LD_VAR 0 2
55250: PPUSH
55251: LD_VAR 0 3
55255: PPUSH
55256: LD_VAR 0 4
55260: PPUSH
55261: LD_VAR 0 5
55265: PPUSH
55266: LD_VAR 0 6
55270: PPUSH
55271: LD_VAR 0 7
55275: PPUSH
55276: LD_VAR 0 8
55280: PPUSH
55281: LD_VAR 0 9
55285: PPUSH
55286: LD_VAR 0 10
55290: PPUSH
55291: LD_VAR 0 11
55295: PPUSH
55296: CALL 72327 0 11
55300: GO 55303
55302: POP
// end ;
55303: PPOPN 11
55305: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
55306: LD_VAR 0 1
55310: PPUSH
55311: LD_VAR 0 2
55315: PPUSH
55316: LD_VAR 0 3
55320: PPUSH
55321: LD_VAR 0 4
55325: PPUSH
55326: LD_VAR 0 5
55330: PPUSH
55331: CALL 55452 0 5
// end ; end_of_file
55335: PPOPN 5
55337: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
55338: LD_INT 0
55340: PPUSH
55341: PPUSH
55342: PPUSH
55343: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
55344: LD_VAR 0 1
55348: PPUSH
55349: CALL_OW 264
55353: PUSH
55354: LD_EXP 105
55358: EQUAL
55359: IFFALSE 55431
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
55361: LD_INT 68
55363: PPUSH
55364: LD_VAR 0 1
55368: PPUSH
55369: CALL_OW 255
55373: PPUSH
55374: CALL_OW 321
55378: PUSH
55379: LD_INT 2
55381: EQUAL
55382: IFFALSE 55394
// eff := 70 else
55384: LD_ADDR_VAR 0 4
55388: PUSH
55389: LD_INT 70
55391: ST_TO_ADDR
55392: GO 55402
// eff := 30 ;
55394: LD_ADDR_VAR 0 4
55398: PUSH
55399: LD_INT 30
55401: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
55402: LD_VAR 0 1
55406: PPUSH
55407: CALL_OW 250
55411: PPUSH
55412: LD_VAR 0 1
55416: PPUSH
55417: CALL_OW 251
55421: PPUSH
55422: LD_VAR 0 4
55426: PPUSH
55427: CALL_OW 495
// end ; end ;
55431: LD_VAR 0 2
55435: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
55436: LD_INT 0
55438: PPUSH
// end ;
55439: LD_VAR 0 4
55443: RET
// export function SOS_Command ( cmd ) ; begin
55444: LD_INT 0
55446: PPUSH
// end ;
55447: LD_VAR 0 2
55451: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
55452: LD_INT 0
55454: PPUSH
// end ;
55455: LD_VAR 0 6
55459: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
55460: LD_INT 0
55462: PPUSH
55463: PPUSH
// if not vehicle or not factory then
55464: LD_VAR 0 1
55468: NOT
55469: PUSH
55470: LD_VAR 0 2
55474: NOT
55475: OR
55476: IFFALSE 55480
// exit ;
55478: GO 55711
// if factoryWaypoints >= factory then
55480: LD_EXP 32
55484: PUSH
55485: LD_VAR 0 2
55489: GREATEREQUAL
55490: IFFALSE 55711
// if factoryWaypoints [ factory ] then
55492: LD_EXP 32
55496: PUSH
55497: LD_VAR 0 2
55501: ARRAY
55502: IFFALSE 55711
// begin if GetControl ( vehicle ) = control_manual then
55504: LD_VAR 0 1
55508: PPUSH
55509: CALL_OW 263
55513: PUSH
55514: LD_INT 1
55516: EQUAL
55517: IFFALSE 55598
// begin driver := IsDrivenBy ( vehicle ) ;
55519: LD_ADDR_VAR 0 4
55523: PUSH
55524: LD_VAR 0 1
55528: PPUSH
55529: CALL_OW 311
55533: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
55534: LD_VAR 0 4
55538: PPUSH
55539: LD_EXP 32
55543: PUSH
55544: LD_VAR 0 2
55548: ARRAY
55549: PUSH
55550: LD_INT 1
55552: ARRAY
55553: PPUSH
55554: LD_EXP 32
55558: PUSH
55559: LD_VAR 0 2
55563: ARRAY
55564: PUSH
55565: LD_INT 2
55567: ARRAY
55568: PPUSH
55569: CALL_OW 171
// AddComExitVehicle ( driver ) ;
55573: LD_VAR 0 4
55577: PPUSH
55578: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
55582: LD_VAR 0 4
55586: PPUSH
55587: LD_VAR 0 2
55591: PPUSH
55592: CALL_OW 180
// end else
55596: GO 55711
// if GetControl ( vehicle ) = control_remote then
55598: LD_VAR 0 1
55602: PPUSH
55603: CALL_OW 263
55607: PUSH
55608: LD_INT 2
55610: EQUAL
55611: IFFALSE 55672
// begin wait ( 0 0$2 ) ;
55613: LD_INT 70
55615: PPUSH
55616: CALL_OW 67
// if Connect ( vehicle ) then
55620: LD_VAR 0 1
55624: PPUSH
55625: CALL 23041 0 1
55629: IFFALSE 55670
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
55631: LD_VAR 0 1
55635: PPUSH
55636: LD_EXP 32
55640: PUSH
55641: LD_VAR 0 2
55645: ARRAY
55646: PUSH
55647: LD_INT 1
55649: ARRAY
55650: PPUSH
55651: LD_EXP 32
55655: PUSH
55656: LD_VAR 0 2
55660: ARRAY
55661: PUSH
55662: LD_INT 2
55664: ARRAY
55665: PPUSH
55666: CALL_OW 171
// end else
55670: GO 55711
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
55672: LD_VAR 0 1
55676: PPUSH
55677: LD_EXP 32
55681: PUSH
55682: LD_VAR 0 2
55686: ARRAY
55687: PUSH
55688: LD_INT 1
55690: ARRAY
55691: PPUSH
55692: LD_EXP 32
55696: PUSH
55697: LD_VAR 0 2
55701: ARRAY
55702: PUSH
55703: LD_INT 2
55705: ARRAY
55706: PPUSH
55707: CALL_OW 171
// end ; end ;
55711: LD_VAR 0 3
55715: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
55716: LD_INT 0
55718: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
55719: LD_VAR 0 1
55723: PUSH
55724: LD_INT 250
55726: EQUAL
55727: PUSH
55728: LD_VAR 0 2
55732: PPUSH
55733: CALL_OW 264
55737: PUSH
55738: LD_EXP 108
55742: EQUAL
55743: AND
55744: IFFALSE 55765
// MinerPlaceMine ( unit , x , y ) ;
55746: LD_VAR 0 2
55750: PPUSH
55751: LD_VAR 0 4
55755: PPUSH
55756: LD_VAR 0 5
55760: PPUSH
55761: CALL 58493 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
55765: LD_VAR 0 1
55769: PUSH
55770: LD_INT 251
55772: EQUAL
55773: PUSH
55774: LD_VAR 0 2
55778: PPUSH
55779: CALL_OW 264
55783: PUSH
55784: LD_EXP 108
55788: EQUAL
55789: AND
55790: IFFALSE 55811
// MinerDetonateMine ( unit , x , y ) ;
55792: LD_VAR 0 2
55796: PPUSH
55797: LD_VAR 0 4
55801: PPUSH
55802: LD_VAR 0 5
55806: PPUSH
55807: CALL 58770 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
55811: LD_VAR 0 1
55815: PUSH
55816: LD_INT 252
55818: EQUAL
55819: PUSH
55820: LD_VAR 0 2
55824: PPUSH
55825: CALL_OW 264
55829: PUSH
55830: LD_EXP 108
55834: EQUAL
55835: AND
55836: IFFALSE 55857
// MinerCreateMinefield ( unit , x , y ) ;
55838: LD_VAR 0 2
55842: PPUSH
55843: LD_VAR 0 4
55847: PPUSH
55848: LD_VAR 0 5
55852: PPUSH
55853: CALL 59187 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
55857: LD_VAR 0 1
55861: PUSH
55862: LD_INT 253
55864: EQUAL
55865: PUSH
55866: LD_VAR 0 2
55870: PPUSH
55871: CALL_OW 257
55875: PUSH
55876: LD_INT 5
55878: EQUAL
55879: AND
55880: IFFALSE 55901
// ComBinocular ( unit , x , y ) ;
55882: LD_VAR 0 2
55886: PPUSH
55887: LD_VAR 0 4
55891: PPUSH
55892: LD_VAR 0 5
55896: PPUSH
55897: CALL 59558 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
55901: LD_VAR 0 1
55905: PUSH
55906: LD_INT 254
55908: EQUAL
55909: PUSH
55910: LD_VAR 0 2
55914: PPUSH
55915: CALL_OW 264
55919: PUSH
55920: LD_EXP 103
55924: EQUAL
55925: AND
55926: PUSH
55927: LD_VAR 0 3
55931: PPUSH
55932: CALL_OW 263
55936: PUSH
55937: LD_INT 3
55939: EQUAL
55940: AND
55941: IFFALSE 55957
// HackDestroyVehicle ( unit , selectedUnit ) ;
55943: LD_VAR 0 2
55947: PPUSH
55948: LD_VAR 0 3
55952: PPUSH
55953: CALL 57853 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
55957: LD_VAR 0 1
55961: PUSH
55962: LD_INT 255
55964: EQUAL
55965: PUSH
55966: LD_VAR 0 2
55970: PPUSH
55971: CALL_OW 264
55975: PUSH
55976: LD_INT 14
55978: PUSH
55979: LD_INT 53
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: IN
55986: AND
55987: PUSH
55988: LD_VAR 0 4
55992: PPUSH
55993: LD_VAR 0 5
55997: PPUSH
55998: CALL_OW 488
56002: AND
56003: IFFALSE 56027
// CutTreeXYR ( unit , x , y , 12 ) ;
56005: LD_VAR 0 2
56009: PPUSH
56010: LD_VAR 0 4
56014: PPUSH
56015: LD_VAR 0 5
56019: PPUSH
56020: LD_INT 12
56022: PPUSH
56023: CALL 56419 0 4
// if cmd = 256 then
56027: LD_VAR 0 1
56031: PUSH
56032: LD_INT 256
56034: EQUAL
56035: IFFALSE 56056
// SetFactoryWaypoint ( unit , x , y ) ;
56037: LD_VAR 0 2
56041: PPUSH
56042: LD_VAR 0 4
56046: PPUSH
56047: LD_VAR 0 5
56051: PPUSH
56052: CALL 56061 0 3
// end ;
56056: LD_VAR 0 6
56060: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
56061: LD_INT 0
56063: PPUSH
56064: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
56065: LD_VAR 0 1
56069: NOT
56070: PUSH
56071: LD_VAR 0 2
56075: PPUSH
56076: LD_VAR 0 3
56080: PPUSH
56081: CALL_OW 488
56085: NOT
56086: OR
56087: PUSH
56088: LD_VAR 0 1
56092: PPUSH
56093: CALL_OW 266
56097: PUSH
56098: LD_INT 3
56100: NONEQUAL
56101: PUSH
56102: LD_VAR 0 1
56106: PPUSH
56107: CALL_OW 247
56111: PUSH
56112: LD_INT 1
56114: EQUAL
56115: NOT
56116: AND
56117: OR
56118: IFFALSE 56122
// exit ;
56120: GO 56271
// if GetType ( factory ) = unit_human then
56122: LD_VAR 0 1
56126: PPUSH
56127: CALL_OW 247
56131: PUSH
56132: LD_INT 1
56134: EQUAL
56135: IFFALSE 56152
// factory := IsInUnit ( factory ) ;
56137: LD_ADDR_VAR 0 1
56141: PUSH
56142: LD_VAR 0 1
56146: PPUSH
56147: CALL_OW 310
56151: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
56152: LD_VAR 0 1
56156: PPUSH
56157: CALL_OW 266
56161: PUSH
56162: LD_INT 3
56164: NONEQUAL
56165: IFFALSE 56169
// exit ;
56167: GO 56271
// if HexInfo ( x , y ) = factory then
56169: LD_VAR 0 2
56173: PPUSH
56174: LD_VAR 0 3
56178: PPUSH
56179: CALL_OW 428
56183: PUSH
56184: LD_VAR 0 1
56188: EQUAL
56189: IFFALSE 56216
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
56191: LD_ADDR_EXP 32
56195: PUSH
56196: LD_EXP 32
56200: PPUSH
56201: LD_VAR 0 1
56205: PPUSH
56206: LD_INT 0
56208: PPUSH
56209: CALL_OW 1
56213: ST_TO_ADDR
56214: GO 56267
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
56216: LD_ADDR_EXP 32
56220: PUSH
56221: LD_EXP 32
56225: PPUSH
56226: LD_VAR 0 1
56230: PPUSH
56231: LD_VAR 0 1
56235: PPUSH
56236: CALL_OW 255
56240: PUSH
56241: LD_VAR 0 1
56245: PUSH
56246: LD_VAR 0 2
56250: PUSH
56251: LD_VAR 0 3
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: PPUSH
56262: CALL_OW 1
56266: ST_TO_ADDR
// UpdateFactoryWaypoints ;
56267: CALL 56276 0 0
// end ;
56271: LD_VAR 0 4
56275: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
56276: LD_INT 0
56278: PPUSH
56279: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
56280: LD_STRING resetFactoryWaypoint();
56282: PPUSH
56283: CALL_OW 559
// if factoryWaypoints then
56287: LD_EXP 32
56291: IFFALSE 56414
// begin for i := 1 to factoryWaypoints do
56293: LD_ADDR_VAR 0 2
56297: PUSH
56298: DOUBLE
56299: LD_INT 1
56301: DEC
56302: ST_TO_ADDR
56303: LD_EXP 32
56307: PUSH
56308: FOR_TO
56309: IFFALSE 56412
// if factoryWaypoints [ i ] then
56311: LD_EXP 32
56315: PUSH
56316: LD_VAR 0 2
56320: ARRAY
56321: IFFALSE 56410
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
56323: LD_STRING setFactoryWaypointXY(
56325: PUSH
56326: LD_EXP 32
56330: PUSH
56331: LD_VAR 0 2
56335: ARRAY
56336: PUSH
56337: LD_INT 1
56339: ARRAY
56340: STR
56341: PUSH
56342: LD_STRING ,
56344: STR
56345: PUSH
56346: LD_EXP 32
56350: PUSH
56351: LD_VAR 0 2
56355: ARRAY
56356: PUSH
56357: LD_INT 2
56359: ARRAY
56360: STR
56361: PUSH
56362: LD_STRING ,
56364: STR
56365: PUSH
56366: LD_EXP 32
56370: PUSH
56371: LD_VAR 0 2
56375: ARRAY
56376: PUSH
56377: LD_INT 3
56379: ARRAY
56380: STR
56381: PUSH
56382: LD_STRING ,
56384: STR
56385: PUSH
56386: LD_EXP 32
56390: PUSH
56391: LD_VAR 0 2
56395: ARRAY
56396: PUSH
56397: LD_INT 4
56399: ARRAY
56400: STR
56401: PUSH
56402: LD_STRING )
56404: STR
56405: PPUSH
56406: CALL_OW 559
56410: GO 56308
56412: POP
56413: POP
// end ; end ;
56414: LD_VAR 0 1
56418: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
56419: LD_INT 0
56421: PPUSH
56422: PPUSH
56423: PPUSH
56424: PPUSH
56425: PPUSH
56426: PPUSH
56427: PPUSH
56428: PPUSH
56429: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
56430: LD_VAR 0 1
56434: NOT
56435: PUSH
56436: LD_VAR 0 2
56440: PPUSH
56441: LD_VAR 0 3
56445: PPUSH
56446: CALL_OW 488
56450: NOT
56451: OR
56452: PUSH
56453: LD_VAR 0 4
56457: NOT
56458: OR
56459: IFFALSE 56463
// exit ;
56461: GO 56803
// list := [ ] ;
56463: LD_ADDR_VAR 0 13
56467: PUSH
56468: EMPTY
56469: ST_TO_ADDR
// if x - r < 0 then
56470: LD_VAR 0 2
56474: PUSH
56475: LD_VAR 0 4
56479: MINUS
56480: PUSH
56481: LD_INT 0
56483: LESS
56484: IFFALSE 56496
// min_x := 0 else
56486: LD_ADDR_VAR 0 7
56490: PUSH
56491: LD_INT 0
56493: ST_TO_ADDR
56494: GO 56512
// min_x := x - r ;
56496: LD_ADDR_VAR 0 7
56500: PUSH
56501: LD_VAR 0 2
56505: PUSH
56506: LD_VAR 0 4
56510: MINUS
56511: ST_TO_ADDR
// if y - r < 0 then
56512: LD_VAR 0 3
56516: PUSH
56517: LD_VAR 0 4
56521: MINUS
56522: PUSH
56523: LD_INT 0
56525: LESS
56526: IFFALSE 56538
// min_y := 0 else
56528: LD_ADDR_VAR 0 8
56532: PUSH
56533: LD_INT 0
56535: ST_TO_ADDR
56536: GO 56554
// min_y := y - r ;
56538: LD_ADDR_VAR 0 8
56542: PUSH
56543: LD_VAR 0 3
56547: PUSH
56548: LD_VAR 0 4
56552: MINUS
56553: ST_TO_ADDR
// max_x := x + r ;
56554: LD_ADDR_VAR 0 9
56558: PUSH
56559: LD_VAR 0 2
56563: PUSH
56564: LD_VAR 0 4
56568: PLUS
56569: ST_TO_ADDR
// max_y := y + r ;
56570: LD_ADDR_VAR 0 10
56574: PUSH
56575: LD_VAR 0 3
56579: PUSH
56580: LD_VAR 0 4
56584: PLUS
56585: ST_TO_ADDR
// for _x = min_x to max_x do
56586: LD_ADDR_VAR 0 11
56590: PUSH
56591: DOUBLE
56592: LD_VAR 0 7
56596: DEC
56597: ST_TO_ADDR
56598: LD_VAR 0 9
56602: PUSH
56603: FOR_TO
56604: IFFALSE 56721
// for _y = min_y to max_y do
56606: LD_ADDR_VAR 0 12
56610: PUSH
56611: DOUBLE
56612: LD_VAR 0 8
56616: DEC
56617: ST_TO_ADDR
56618: LD_VAR 0 10
56622: PUSH
56623: FOR_TO
56624: IFFALSE 56717
// begin if not ValidHex ( _x , _y ) then
56626: LD_VAR 0 11
56630: PPUSH
56631: LD_VAR 0 12
56635: PPUSH
56636: CALL_OW 488
56640: NOT
56641: IFFALSE 56645
// continue ;
56643: GO 56623
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56645: LD_VAR 0 11
56649: PPUSH
56650: LD_VAR 0 12
56654: PPUSH
56655: CALL_OW 351
56659: PUSH
56660: LD_VAR 0 11
56664: PPUSH
56665: LD_VAR 0 12
56669: PPUSH
56670: CALL_OW 554
56674: AND
56675: IFFALSE 56715
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56677: LD_ADDR_VAR 0 13
56681: PUSH
56682: LD_VAR 0 13
56686: PPUSH
56687: LD_VAR 0 13
56691: PUSH
56692: LD_INT 1
56694: PLUS
56695: PPUSH
56696: LD_VAR 0 11
56700: PUSH
56701: LD_VAR 0 12
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PPUSH
56710: CALL_OW 2
56714: ST_TO_ADDR
// end ;
56715: GO 56623
56717: POP
56718: POP
56719: GO 56603
56721: POP
56722: POP
// if not list then
56723: LD_VAR 0 13
56727: NOT
56728: IFFALSE 56732
// exit ;
56730: GO 56803
// for i in list do
56732: LD_ADDR_VAR 0 6
56736: PUSH
56737: LD_VAR 0 13
56741: PUSH
56742: FOR_IN
56743: IFFALSE 56801
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
56745: LD_VAR 0 1
56749: PPUSH
56750: LD_STRING M
56752: PUSH
56753: LD_VAR 0 6
56757: PUSH
56758: LD_INT 1
56760: ARRAY
56761: PUSH
56762: LD_VAR 0 6
56766: PUSH
56767: LD_INT 2
56769: ARRAY
56770: PUSH
56771: LD_INT 0
56773: PUSH
56774: LD_INT 0
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: PUSH
56792: EMPTY
56793: LIST
56794: PPUSH
56795: CALL_OW 447
56799: GO 56742
56801: POP
56802: POP
// end ;
56803: LD_VAR 0 5
56807: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
56808: LD_EXP 33
56812: NOT
56813: IFFALSE 56863
56815: GO 56817
56817: DISABLE
// begin initHack := true ;
56818: LD_ADDR_EXP 33
56822: PUSH
56823: LD_INT 1
56825: ST_TO_ADDR
// hackTanks := [ ] ;
56826: LD_ADDR_EXP 34
56830: PUSH
56831: EMPTY
56832: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
56833: LD_ADDR_EXP 35
56837: PUSH
56838: EMPTY
56839: ST_TO_ADDR
// hackLimit := 3 ;
56840: LD_ADDR_EXP 36
56844: PUSH
56845: LD_INT 3
56847: ST_TO_ADDR
// hackDist := 12 ;
56848: LD_ADDR_EXP 37
56852: PUSH
56853: LD_INT 12
56855: ST_TO_ADDR
// hackCounter := [ ] ;
56856: LD_ADDR_EXP 38
56860: PUSH
56861: EMPTY
56862: ST_TO_ADDR
// end ;
56863: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
56864: LD_EXP 33
56868: PUSH
56869: LD_INT 34
56871: PUSH
56872: LD_EXP 103
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PPUSH
56881: CALL_OW 69
56885: AND
56886: IFFALSE 57141
56888: GO 56890
56890: DISABLE
56891: LD_INT 0
56893: PPUSH
56894: PPUSH
// begin enable ;
56895: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
56896: LD_ADDR_VAR 0 1
56900: PUSH
56901: LD_INT 34
56903: PUSH
56904: LD_EXP 103
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PPUSH
56913: CALL_OW 69
56917: PUSH
56918: FOR_IN
56919: IFFALSE 57139
// begin if not i in hackTanks then
56921: LD_VAR 0 1
56925: PUSH
56926: LD_EXP 34
56930: IN
56931: NOT
56932: IFFALSE 57015
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
56934: LD_ADDR_EXP 34
56938: PUSH
56939: LD_EXP 34
56943: PPUSH
56944: LD_EXP 34
56948: PUSH
56949: LD_INT 1
56951: PLUS
56952: PPUSH
56953: LD_VAR 0 1
56957: PPUSH
56958: CALL_OW 1
56962: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
56963: LD_ADDR_EXP 35
56967: PUSH
56968: LD_EXP 35
56972: PPUSH
56973: LD_EXP 35
56977: PUSH
56978: LD_INT 1
56980: PLUS
56981: PPUSH
56982: EMPTY
56983: PPUSH
56984: CALL_OW 1
56988: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56989: LD_ADDR_EXP 38
56993: PUSH
56994: LD_EXP 38
56998: PPUSH
56999: LD_EXP 38
57003: PUSH
57004: LD_INT 1
57006: PLUS
57007: PPUSH
57008: EMPTY
57009: PPUSH
57010: CALL_OW 1
57014: ST_TO_ADDR
// end ; if not IsOk ( i ) then
57015: LD_VAR 0 1
57019: PPUSH
57020: CALL_OW 302
57024: NOT
57025: IFFALSE 57038
// begin HackUnlinkAll ( i ) ;
57027: LD_VAR 0 1
57031: PPUSH
57032: CALL 57144 0 1
// continue ;
57036: GO 56918
// end ; HackCheckCapturedStatus ( i ) ;
57038: LD_VAR 0 1
57042: PPUSH
57043: CALL 57587 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
57047: LD_ADDR_VAR 0 2
57051: PUSH
57052: LD_INT 81
57054: PUSH
57055: LD_VAR 0 1
57059: PPUSH
57060: CALL_OW 255
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 33
57071: PUSH
57072: LD_INT 3
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 91
57081: PUSH
57082: LD_VAR 0 1
57086: PUSH
57087: LD_EXP 37
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 50
57099: PUSH
57100: EMPTY
57101: LIST
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: PPUSH
57109: CALL_OW 69
57113: ST_TO_ADDR
// if not tmp then
57114: LD_VAR 0 2
57118: NOT
57119: IFFALSE 57123
// continue ;
57121: GO 56918
// HackLink ( i , tmp ) ;
57123: LD_VAR 0 1
57127: PPUSH
57128: LD_VAR 0 2
57132: PPUSH
57133: CALL 57280 0 2
// end ;
57137: GO 56918
57139: POP
57140: POP
// end ;
57141: PPOPN 2
57143: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
57144: LD_INT 0
57146: PPUSH
57147: PPUSH
57148: PPUSH
// if not hack in hackTanks then
57149: LD_VAR 0 1
57153: PUSH
57154: LD_EXP 34
57158: IN
57159: NOT
57160: IFFALSE 57164
// exit ;
57162: GO 57275
// index := GetElementIndex ( hackTanks , hack ) ;
57164: LD_ADDR_VAR 0 4
57168: PUSH
57169: LD_EXP 34
57173: PPUSH
57174: LD_VAR 0 1
57178: PPUSH
57179: CALL 19855 0 2
57183: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
57184: LD_EXP 35
57188: PUSH
57189: LD_VAR 0 4
57193: ARRAY
57194: IFFALSE 57275
// begin for i in hackTanksCaptured [ index ] do
57196: LD_ADDR_VAR 0 3
57200: PUSH
57201: LD_EXP 35
57205: PUSH
57206: LD_VAR 0 4
57210: ARRAY
57211: PUSH
57212: FOR_IN
57213: IFFALSE 57239
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
57215: LD_VAR 0 3
57219: PUSH
57220: LD_INT 1
57222: ARRAY
57223: PPUSH
57224: LD_VAR 0 3
57228: PUSH
57229: LD_INT 2
57231: ARRAY
57232: PPUSH
57233: CALL_OW 235
57237: GO 57212
57239: POP
57240: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
57241: LD_ADDR_EXP 35
57245: PUSH
57246: LD_EXP 35
57250: PPUSH
57251: LD_VAR 0 4
57255: PPUSH
57256: EMPTY
57257: PPUSH
57258: CALL_OW 1
57262: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
57263: LD_VAR 0 1
57267: PPUSH
57268: LD_INT 0
57270: PPUSH
57271: CALL_OW 505
// end ; end ;
57275: LD_VAR 0 2
57279: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
57280: LD_INT 0
57282: PPUSH
57283: PPUSH
57284: PPUSH
// if not hack in hackTanks or not vehicles then
57285: LD_VAR 0 1
57289: PUSH
57290: LD_EXP 34
57294: IN
57295: NOT
57296: PUSH
57297: LD_VAR 0 2
57301: NOT
57302: OR
57303: IFFALSE 57307
// exit ;
57305: GO 57582
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
57307: LD_ADDR_VAR 0 2
57311: PUSH
57312: LD_VAR 0 1
57316: PPUSH
57317: LD_VAR 0 2
57321: PPUSH
57322: LD_INT 1
57324: PPUSH
57325: LD_INT 1
57327: PPUSH
57328: CALL 20505 0 4
57332: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
57333: LD_ADDR_VAR 0 5
57337: PUSH
57338: LD_EXP 34
57342: PPUSH
57343: LD_VAR 0 1
57347: PPUSH
57348: CALL 19855 0 2
57352: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
57353: LD_EXP 35
57357: PUSH
57358: LD_VAR 0 5
57362: ARRAY
57363: PUSH
57364: LD_EXP 36
57368: LESS
57369: IFFALSE 57558
// begin for i := 1 to vehicles do
57371: LD_ADDR_VAR 0 4
57375: PUSH
57376: DOUBLE
57377: LD_INT 1
57379: DEC
57380: ST_TO_ADDR
57381: LD_VAR 0 2
57385: PUSH
57386: FOR_TO
57387: IFFALSE 57556
// begin if hackTanksCaptured [ index ] = hackLimit then
57389: LD_EXP 35
57393: PUSH
57394: LD_VAR 0 5
57398: ARRAY
57399: PUSH
57400: LD_EXP 36
57404: EQUAL
57405: IFFALSE 57409
// break ;
57407: GO 57556
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
57409: LD_ADDR_EXP 38
57413: PUSH
57414: LD_EXP 38
57418: PPUSH
57419: LD_VAR 0 5
57423: PPUSH
57424: LD_EXP 38
57428: PUSH
57429: LD_VAR 0 5
57433: ARRAY
57434: PUSH
57435: LD_INT 1
57437: PLUS
57438: PPUSH
57439: CALL_OW 1
57443: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
57444: LD_ADDR_EXP 35
57448: PUSH
57449: LD_EXP 35
57453: PPUSH
57454: LD_VAR 0 5
57458: PUSH
57459: LD_EXP 35
57463: PUSH
57464: LD_VAR 0 5
57468: ARRAY
57469: PUSH
57470: LD_INT 1
57472: PLUS
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PPUSH
57478: LD_VAR 0 2
57482: PUSH
57483: LD_VAR 0 4
57487: ARRAY
57488: PUSH
57489: LD_VAR 0 2
57493: PUSH
57494: LD_VAR 0 4
57498: ARRAY
57499: PPUSH
57500: CALL_OW 255
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PPUSH
57509: CALL 20070 0 3
57513: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
57514: LD_VAR 0 2
57518: PUSH
57519: LD_VAR 0 4
57523: ARRAY
57524: PPUSH
57525: LD_VAR 0 1
57529: PPUSH
57530: CALL_OW 255
57534: PPUSH
57535: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
57539: LD_VAR 0 2
57543: PUSH
57544: LD_VAR 0 4
57548: ARRAY
57549: PPUSH
57550: CALL_OW 141
// end ;
57554: GO 57386
57556: POP
57557: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57558: LD_VAR 0 1
57562: PPUSH
57563: LD_EXP 35
57567: PUSH
57568: LD_VAR 0 5
57572: ARRAY
57573: PUSH
57574: LD_INT 0
57576: PLUS
57577: PPUSH
57578: CALL_OW 505
// end ;
57582: LD_VAR 0 3
57586: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
57587: LD_INT 0
57589: PPUSH
57590: PPUSH
57591: PPUSH
57592: PPUSH
// if not hack in hackTanks then
57593: LD_VAR 0 1
57597: PUSH
57598: LD_EXP 34
57602: IN
57603: NOT
57604: IFFALSE 57608
// exit ;
57606: GO 57848
// index := GetElementIndex ( hackTanks , hack ) ;
57608: LD_ADDR_VAR 0 4
57612: PUSH
57613: LD_EXP 34
57617: PPUSH
57618: LD_VAR 0 1
57622: PPUSH
57623: CALL 19855 0 2
57627: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
57628: LD_ADDR_VAR 0 3
57632: PUSH
57633: DOUBLE
57634: LD_EXP 35
57638: PUSH
57639: LD_VAR 0 4
57643: ARRAY
57644: INC
57645: ST_TO_ADDR
57646: LD_INT 1
57648: PUSH
57649: FOR_DOWNTO
57650: IFFALSE 57822
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
57652: LD_ADDR_VAR 0 5
57656: PUSH
57657: LD_EXP 35
57661: PUSH
57662: LD_VAR 0 4
57666: ARRAY
57667: PUSH
57668: LD_VAR 0 3
57672: ARRAY
57673: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
57674: LD_VAR 0 5
57678: PUSH
57679: LD_INT 1
57681: ARRAY
57682: PPUSH
57683: CALL_OW 302
57687: NOT
57688: PUSH
57689: LD_VAR 0 5
57693: PUSH
57694: LD_INT 1
57696: ARRAY
57697: PPUSH
57698: CALL_OW 255
57702: PUSH
57703: LD_VAR 0 1
57707: PPUSH
57708: CALL_OW 255
57712: NONEQUAL
57713: OR
57714: IFFALSE 57820
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
57716: LD_VAR 0 5
57720: PUSH
57721: LD_INT 1
57723: ARRAY
57724: PPUSH
57725: CALL_OW 305
57729: PUSH
57730: LD_VAR 0 5
57734: PUSH
57735: LD_INT 1
57737: ARRAY
57738: PPUSH
57739: CALL_OW 255
57743: PUSH
57744: LD_VAR 0 1
57748: PPUSH
57749: CALL_OW 255
57753: EQUAL
57754: AND
57755: IFFALSE 57779
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
57757: LD_VAR 0 5
57761: PUSH
57762: LD_INT 1
57764: ARRAY
57765: PPUSH
57766: LD_VAR 0 5
57770: PUSH
57771: LD_INT 2
57773: ARRAY
57774: PPUSH
57775: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
57779: LD_ADDR_EXP 35
57783: PUSH
57784: LD_EXP 35
57788: PPUSH
57789: LD_VAR 0 4
57793: PPUSH
57794: LD_EXP 35
57798: PUSH
57799: LD_VAR 0 4
57803: ARRAY
57804: PPUSH
57805: LD_VAR 0 3
57809: PPUSH
57810: CALL_OW 3
57814: PPUSH
57815: CALL_OW 1
57819: ST_TO_ADDR
// end ; end ;
57820: GO 57649
57822: POP
57823: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57824: LD_VAR 0 1
57828: PPUSH
57829: LD_EXP 35
57833: PUSH
57834: LD_VAR 0 4
57838: ARRAY
57839: PUSH
57840: LD_INT 0
57842: PLUS
57843: PPUSH
57844: CALL_OW 505
// end ;
57848: LD_VAR 0 2
57852: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
57853: LD_INT 0
57855: PPUSH
57856: PPUSH
57857: PPUSH
57858: PPUSH
// if not hack in hackTanks then
57859: LD_VAR 0 1
57863: PUSH
57864: LD_EXP 34
57868: IN
57869: NOT
57870: IFFALSE 57874
// exit ;
57872: GO 57959
// index := GetElementIndex ( hackTanks , hack ) ;
57874: LD_ADDR_VAR 0 5
57878: PUSH
57879: LD_EXP 34
57883: PPUSH
57884: LD_VAR 0 1
57888: PPUSH
57889: CALL 19855 0 2
57893: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
57894: LD_ADDR_VAR 0 4
57898: PUSH
57899: DOUBLE
57900: LD_INT 1
57902: DEC
57903: ST_TO_ADDR
57904: LD_EXP 35
57908: PUSH
57909: LD_VAR 0 5
57913: ARRAY
57914: PUSH
57915: FOR_TO
57916: IFFALSE 57957
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
57918: LD_EXP 35
57922: PUSH
57923: LD_VAR 0 5
57927: ARRAY
57928: PUSH
57929: LD_VAR 0 4
57933: ARRAY
57934: PUSH
57935: LD_INT 1
57937: ARRAY
57938: PUSH
57939: LD_VAR 0 2
57943: EQUAL
57944: IFFALSE 57955
// KillUnit ( vehicle ) ;
57946: LD_VAR 0 2
57950: PPUSH
57951: CALL_OW 66
57955: GO 57915
57957: POP
57958: POP
// end ;
57959: LD_VAR 0 3
57963: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
57964: LD_EXP 39
57968: NOT
57969: IFFALSE 58004
57971: GO 57973
57973: DISABLE
// begin initMiner := true ;
57974: LD_ADDR_EXP 39
57978: PUSH
57979: LD_INT 1
57981: ST_TO_ADDR
// minersList := [ ] ;
57982: LD_ADDR_EXP 40
57986: PUSH
57987: EMPTY
57988: ST_TO_ADDR
// minerMinesList := [ ] ;
57989: LD_ADDR_EXP 41
57993: PUSH
57994: EMPTY
57995: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
57996: LD_ADDR_EXP 42
58000: PUSH
58001: LD_INT 5
58003: ST_TO_ADDR
// end ;
58004: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
58005: LD_EXP 39
58009: PUSH
58010: LD_INT 34
58012: PUSH
58013: LD_EXP 108
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PPUSH
58022: CALL_OW 69
58026: AND
58027: IFFALSE 58490
58029: GO 58031
58031: DISABLE
58032: LD_INT 0
58034: PPUSH
58035: PPUSH
58036: PPUSH
58037: PPUSH
// begin enable ;
58038: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
58039: LD_ADDR_VAR 0 1
58043: PUSH
58044: LD_INT 34
58046: PUSH
58047: LD_EXP 108
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PPUSH
58056: CALL_OW 69
58060: PUSH
58061: FOR_IN
58062: IFFALSE 58134
// begin if not i in minersList then
58064: LD_VAR 0 1
58068: PUSH
58069: LD_EXP 40
58073: IN
58074: NOT
58075: IFFALSE 58132
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
58077: LD_ADDR_EXP 40
58081: PUSH
58082: LD_EXP 40
58086: PPUSH
58087: LD_EXP 40
58091: PUSH
58092: LD_INT 1
58094: PLUS
58095: PPUSH
58096: LD_VAR 0 1
58100: PPUSH
58101: CALL_OW 1
58105: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
58106: LD_ADDR_EXP 41
58110: PUSH
58111: LD_EXP 41
58115: PPUSH
58116: LD_EXP 41
58120: PUSH
58121: LD_INT 1
58123: PLUS
58124: PPUSH
58125: EMPTY
58126: PPUSH
58127: CALL_OW 1
58131: ST_TO_ADDR
// end end ;
58132: GO 58061
58134: POP
58135: POP
// for i := minerMinesList downto 1 do
58136: LD_ADDR_VAR 0 1
58140: PUSH
58141: DOUBLE
58142: LD_EXP 41
58146: INC
58147: ST_TO_ADDR
58148: LD_INT 1
58150: PUSH
58151: FOR_DOWNTO
58152: IFFALSE 58488
// begin if IsLive ( minersList [ i ] ) then
58154: LD_EXP 40
58158: PUSH
58159: LD_VAR 0 1
58163: ARRAY
58164: PPUSH
58165: CALL_OW 300
58169: IFFALSE 58197
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
58171: LD_EXP 40
58175: PUSH
58176: LD_VAR 0 1
58180: ARRAY
58181: PPUSH
58182: LD_EXP 41
58186: PUSH
58187: LD_VAR 0 1
58191: ARRAY
58192: PPUSH
58193: CALL_OW 505
// if not minerMinesList [ i ] then
58197: LD_EXP 41
58201: PUSH
58202: LD_VAR 0 1
58206: ARRAY
58207: NOT
58208: IFFALSE 58212
// continue ;
58210: GO 58151
// for j := minerMinesList [ i ] downto 1 do
58212: LD_ADDR_VAR 0 2
58216: PUSH
58217: DOUBLE
58218: LD_EXP 41
58222: PUSH
58223: LD_VAR 0 1
58227: ARRAY
58228: INC
58229: ST_TO_ADDR
58230: LD_INT 1
58232: PUSH
58233: FOR_DOWNTO
58234: IFFALSE 58484
// begin side := GetSide ( minersList [ i ] ) ;
58236: LD_ADDR_VAR 0 3
58240: PUSH
58241: LD_EXP 40
58245: PUSH
58246: LD_VAR 0 1
58250: ARRAY
58251: PPUSH
58252: CALL_OW 255
58256: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58257: LD_ADDR_VAR 0 4
58261: PUSH
58262: LD_EXP 41
58266: PUSH
58267: LD_VAR 0 1
58271: ARRAY
58272: PUSH
58273: LD_VAR 0 2
58277: ARRAY
58278: PUSH
58279: LD_INT 1
58281: ARRAY
58282: PPUSH
58283: LD_EXP 41
58287: PUSH
58288: LD_VAR 0 1
58292: ARRAY
58293: PUSH
58294: LD_VAR 0 2
58298: ARRAY
58299: PUSH
58300: LD_INT 2
58302: ARRAY
58303: PPUSH
58304: CALL_OW 428
58308: ST_TO_ADDR
// if not tmp then
58309: LD_VAR 0 4
58313: NOT
58314: IFFALSE 58318
// continue ;
58316: GO 58233
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
58318: LD_VAR 0 4
58322: PUSH
58323: LD_INT 81
58325: PUSH
58326: LD_VAR 0 3
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PPUSH
58335: CALL_OW 69
58339: IN
58340: PUSH
58341: LD_EXP 41
58345: PUSH
58346: LD_VAR 0 1
58350: ARRAY
58351: PUSH
58352: LD_VAR 0 2
58356: ARRAY
58357: PUSH
58358: LD_INT 1
58360: ARRAY
58361: PPUSH
58362: LD_EXP 41
58366: PUSH
58367: LD_VAR 0 1
58371: ARRAY
58372: PUSH
58373: LD_VAR 0 2
58377: ARRAY
58378: PUSH
58379: LD_INT 2
58381: ARRAY
58382: PPUSH
58383: CALL_OW 458
58387: AND
58388: IFFALSE 58482
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
58390: LD_EXP 41
58394: PUSH
58395: LD_VAR 0 1
58399: ARRAY
58400: PUSH
58401: LD_VAR 0 2
58405: ARRAY
58406: PUSH
58407: LD_INT 1
58409: ARRAY
58410: PPUSH
58411: LD_EXP 41
58415: PUSH
58416: LD_VAR 0 1
58420: ARRAY
58421: PUSH
58422: LD_VAR 0 2
58426: ARRAY
58427: PUSH
58428: LD_INT 2
58430: ARRAY
58431: PPUSH
58432: LD_VAR 0 3
58436: PPUSH
58437: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
58441: LD_ADDR_EXP 41
58445: PUSH
58446: LD_EXP 41
58450: PPUSH
58451: LD_VAR 0 1
58455: PPUSH
58456: LD_EXP 41
58460: PUSH
58461: LD_VAR 0 1
58465: ARRAY
58466: PPUSH
58467: LD_VAR 0 2
58471: PPUSH
58472: CALL_OW 3
58476: PPUSH
58477: CALL_OW 1
58481: ST_TO_ADDR
// end ; end ;
58482: GO 58233
58484: POP
58485: POP
// end ;
58486: GO 58151
58488: POP
58489: POP
// end ;
58490: PPOPN 4
58492: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
58493: LD_INT 0
58495: PPUSH
58496: PPUSH
// result := false ;
58497: LD_ADDR_VAR 0 4
58501: PUSH
58502: LD_INT 0
58504: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
58505: LD_VAR 0 1
58509: PPUSH
58510: CALL_OW 264
58514: PUSH
58515: LD_EXP 108
58519: EQUAL
58520: NOT
58521: IFFALSE 58525
// exit ;
58523: GO 58765
// index := GetElementIndex ( minersList , unit ) ;
58525: LD_ADDR_VAR 0 5
58529: PUSH
58530: LD_EXP 40
58534: PPUSH
58535: LD_VAR 0 1
58539: PPUSH
58540: CALL 19855 0 2
58544: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
58545: LD_EXP 41
58549: PUSH
58550: LD_VAR 0 5
58554: ARRAY
58555: PUSH
58556: LD_EXP 42
58560: GREATEREQUAL
58561: IFFALSE 58565
// exit ;
58563: GO 58765
// ComMoveXY ( unit , x , y ) ;
58565: LD_VAR 0 1
58569: PPUSH
58570: LD_VAR 0 2
58574: PPUSH
58575: LD_VAR 0 3
58579: PPUSH
58580: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58584: LD_INT 35
58586: PPUSH
58587: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
58591: LD_VAR 0 1
58595: PPUSH
58596: LD_VAR 0 2
58600: PPUSH
58601: LD_VAR 0 3
58605: PPUSH
58606: CALL 50627 0 3
58610: NOT
58611: PUSH
58612: LD_VAR 0 1
58616: PPUSH
58617: CALL_OW 314
58621: AND
58622: IFFALSE 58626
// exit ;
58624: GO 58765
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
58626: LD_VAR 0 2
58630: PPUSH
58631: LD_VAR 0 3
58635: PPUSH
58636: CALL_OW 428
58640: PUSH
58641: LD_VAR 0 1
58645: EQUAL
58646: PUSH
58647: LD_VAR 0 1
58651: PPUSH
58652: CALL_OW 314
58656: NOT
58657: AND
58658: IFFALSE 58584
// PlaySoundXY ( x , y , PlantMine ) ;
58660: LD_VAR 0 2
58664: PPUSH
58665: LD_VAR 0 3
58669: PPUSH
58670: LD_STRING PlantMine
58672: PPUSH
58673: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
58677: LD_VAR 0 2
58681: PPUSH
58682: LD_VAR 0 3
58686: PPUSH
58687: LD_VAR 0 1
58691: PPUSH
58692: CALL_OW 255
58696: PPUSH
58697: LD_INT 0
58699: PPUSH
58700: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
58704: LD_ADDR_EXP 41
58708: PUSH
58709: LD_EXP 41
58713: PPUSH
58714: LD_VAR 0 5
58718: PUSH
58719: LD_EXP 41
58723: PUSH
58724: LD_VAR 0 5
58728: ARRAY
58729: PUSH
58730: LD_INT 1
58732: PLUS
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PPUSH
58738: LD_VAR 0 2
58742: PUSH
58743: LD_VAR 0 3
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PPUSH
58752: CALL 20070 0 3
58756: ST_TO_ADDR
// result := true ;
58757: LD_ADDR_VAR 0 4
58761: PUSH
58762: LD_INT 1
58764: ST_TO_ADDR
// end ;
58765: LD_VAR 0 4
58769: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
58770: LD_INT 0
58772: PPUSH
58773: PPUSH
58774: PPUSH
// if not unit in minersList then
58775: LD_VAR 0 1
58779: PUSH
58780: LD_EXP 40
58784: IN
58785: NOT
58786: IFFALSE 58790
// exit ;
58788: GO 59182
// index := GetElementIndex ( minersList , unit ) ;
58790: LD_ADDR_VAR 0 6
58794: PUSH
58795: LD_EXP 40
58799: PPUSH
58800: LD_VAR 0 1
58804: PPUSH
58805: CALL 19855 0 2
58809: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
58810: LD_ADDR_VAR 0 5
58814: PUSH
58815: DOUBLE
58816: LD_EXP 41
58820: PUSH
58821: LD_VAR 0 6
58825: ARRAY
58826: INC
58827: ST_TO_ADDR
58828: LD_INT 1
58830: PUSH
58831: FOR_DOWNTO
58832: IFFALSE 58993
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
58834: LD_EXP 41
58838: PUSH
58839: LD_VAR 0 6
58843: ARRAY
58844: PUSH
58845: LD_VAR 0 5
58849: ARRAY
58850: PUSH
58851: LD_INT 1
58853: ARRAY
58854: PUSH
58855: LD_VAR 0 2
58859: EQUAL
58860: PUSH
58861: LD_EXP 41
58865: PUSH
58866: LD_VAR 0 6
58870: ARRAY
58871: PUSH
58872: LD_VAR 0 5
58876: ARRAY
58877: PUSH
58878: LD_INT 2
58880: ARRAY
58881: PUSH
58882: LD_VAR 0 3
58886: EQUAL
58887: AND
58888: IFFALSE 58991
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58890: LD_EXP 41
58894: PUSH
58895: LD_VAR 0 6
58899: ARRAY
58900: PUSH
58901: LD_VAR 0 5
58905: ARRAY
58906: PUSH
58907: LD_INT 1
58909: ARRAY
58910: PPUSH
58911: LD_EXP 41
58915: PUSH
58916: LD_VAR 0 6
58920: ARRAY
58921: PUSH
58922: LD_VAR 0 5
58926: ARRAY
58927: PUSH
58928: LD_INT 2
58930: ARRAY
58931: PPUSH
58932: LD_VAR 0 1
58936: PPUSH
58937: CALL_OW 255
58941: PPUSH
58942: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58946: LD_ADDR_EXP 41
58950: PUSH
58951: LD_EXP 41
58955: PPUSH
58956: LD_VAR 0 6
58960: PPUSH
58961: LD_EXP 41
58965: PUSH
58966: LD_VAR 0 6
58970: ARRAY
58971: PPUSH
58972: LD_VAR 0 5
58976: PPUSH
58977: CALL_OW 3
58981: PPUSH
58982: CALL_OW 1
58986: ST_TO_ADDR
// exit ;
58987: POP
58988: POP
58989: GO 59182
// end ; end ;
58991: GO 58831
58993: POP
58994: POP
// for i := minerMinesList [ index ] downto 1 do
58995: LD_ADDR_VAR 0 5
58999: PUSH
59000: DOUBLE
59001: LD_EXP 41
59005: PUSH
59006: LD_VAR 0 6
59010: ARRAY
59011: INC
59012: ST_TO_ADDR
59013: LD_INT 1
59015: PUSH
59016: FOR_DOWNTO
59017: IFFALSE 59180
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
59019: LD_EXP 41
59023: PUSH
59024: LD_VAR 0 6
59028: ARRAY
59029: PUSH
59030: LD_VAR 0 5
59034: ARRAY
59035: PUSH
59036: LD_INT 1
59038: ARRAY
59039: PPUSH
59040: LD_EXP 41
59044: PUSH
59045: LD_VAR 0 6
59049: ARRAY
59050: PUSH
59051: LD_VAR 0 5
59055: ARRAY
59056: PUSH
59057: LD_INT 2
59059: ARRAY
59060: PPUSH
59061: LD_VAR 0 2
59065: PPUSH
59066: LD_VAR 0 3
59070: PPUSH
59071: CALL_OW 298
59075: PUSH
59076: LD_INT 6
59078: LESS
59079: IFFALSE 59178
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59081: LD_EXP 41
59085: PUSH
59086: LD_VAR 0 6
59090: ARRAY
59091: PUSH
59092: LD_VAR 0 5
59096: ARRAY
59097: PUSH
59098: LD_INT 1
59100: ARRAY
59101: PPUSH
59102: LD_EXP 41
59106: PUSH
59107: LD_VAR 0 6
59111: ARRAY
59112: PUSH
59113: LD_VAR 0 5
59117: ARRAY
59118: PUSH
59119: LD_INT 2
59121: ARRAY
59122: PPUSH
59123: LD_VAR 0 1
59127: PPUSH
59128: CALL_OW 255
59132: PPUSH
59133: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59137: LD_ADDR_EXP 41
59141: PUSH
59142: LD_EXP 41
59146: PPUSH
59147: LD_VAR 0 6
59151: PPUSH
59152: LD_EXP 41
59156: PUSH
59157: LD_VAR 0 6
59161: ARRAY
59162: PPUSH
59163: LD_VAR 0 5
59167: PPUSH
59168: CALL_OW 3
59172: PPUSH
59173: CALL_OW 1
59177: ST_TO_ADDR
// end ; end ;
59178: GO 59016
59180: POP
59181: POP
// end ;
59182: LD_VAR 0 4
59186: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
59187: LD_INT 0
59189: PPUSH
59190: PPUSH
59191: PPUSH
59192: PPUSH
59193: PPUSH
59194: PPUSH
59195: PPUSH
59196: PPUSH
59197: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
59198: LD_VAR 0 1
59202: PPUSH
59203: CALL_OW 264
59207: PUSH
59208: LD_EXP 108
59212: EQUAL
59213: NOT
59214: PUSH
59215: LD_VAR 0 1
59219: PUSH
59220: LD_EXP 40
59224: IN
59225: NOT
59226: OR
59227: IFFALSE 59231
// exit ;
59229: GO 59553
// index := GetElementIndex ( minersList , unit ) ;
59231: LD_ADDR_VAR 0 6
59235: PUSH
59236: LD_EXP 40
59240: PPUSH
59241: LD_VAR 0 1
59245: PPUSH
59246: CALL 19855 0 2
59250: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
59251: LD_ADDR_VAR 0 8
59255: PUSH
59256: LD_EXP 42
59260: PUSH
59261: LD_EXP 41
59265: PUSH
59266: LD_VAR 0 6
59270: ARRAY
59271: MINUS
59272: ST_TO_ADDR
// if not minesFreeAmount then
59273: LD_VAR 0 8
59277: NOT
59278: IFFALSE 59282
// exit ;
59280: GO 59553
// tmp := [ ] ;
59282: LD_ADDR_VAR 0 7
59286: PUSH
59287: EMPTY
59288: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
59289: LD_ADDR_VAR 0 5
59293: PUSH
59294: DOUBLE
59295: LD_INT 1
59297: DEC
59298: ST_TO_ADDR
59299: LD_VAR 0 8
59303: PUSH
59304: FOR_TO
59305: IFFALSE 59500
// begin _d := rand ( 0 , 5 ) ;
59307: LD_ADDR_VAR 0 11
59311: PUSH
59312: LD_INT 0
59314: PPUSH
59315: LD_INT 5
59317: PPUSH
59318: CALL_OW 12
59322: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
59323: LD_ADDR_VAR 0 12
59327: PUSH
59328: LD_INT 2
59330: PPUSH
59331: LD_INT 6
59333: PPUSH
59334: CALL_OW 12
59338: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
59339: LD_ADDR_VAR 0 9
59343: PUSH
59344: LD_VAR 0 2
59348: PPUSH
59349: LD_VAR 0 11
59353: PPUSH
59354: LD_VAR 0 12
59358: PPUSH
59359: CALL_OW 272
59363: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
59364: LD_ADDR_VAR 0 10
59368: PUSH
59369: LD_VAR 0 3
59373: PPUSH
59374: LD_VAR 0 11
59378: PPUSH
59379: LD_VAR 0 12
59383: PPUSH
59384: CALL_OW 273
59388: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
59389: LD_VAR 0 9
59393: PPUSH
59394: LD_VAR 0 10
59398: PPUSH
59399: CALL_OW 488
59403: PUSH
59404: LD_VAR 0 9
59408: PUSH
59409: LD_VAR 0 10
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_VAR 0 7
59422: IN
59423: NOT
59424: AND
59425: PUSH
59426: LD_VAR 0 9
59430: PPUSH
59431: LD_VAR 0 10
59435: PPUSH
59436: CALL_OW 458
59440: NOT
59441: AND
59442: IFFALSE 59484
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
59444: LD_ADDR_VAR 0 7
59448: PUSH
59449: LD_VAR 0 7
59453: PPUSH
59454: LD_VAR 0 7
59458: PUSH
59459: LD_INT 1
59461: PLUS
59462: PPUSH
59463: LD_VAR 0 9
59467: PUSH
59468: LD_VAR 0 10
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PPUSH
59477: CALL_OW 1
59481: ST_TO_ADDR
59482: GO 59498
// i := i - 1 ;
59484: LD_ADDR_VAR 0 5
59488: PUSH
59489: LD_VAR 0 5
59493: PUSH
59494: LD_INT 1
59496: MINUS
59497: ST_TO_ADDR
// end ;
59498: GO 59304
59500: POP
59501: POP
// for i in tmp do
59502: LD_ADDR_VAR 0 5
59506: PUSH
59507: LD_VAR 0 7
59511: PUSH
59512: FOR_IN
59513: IFFALSE 59551
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
59515: LD_VAR 0 1
59519: PPUSH
59520: LD_VAR 0 5
59524: PUSH
59525: LD_INT 1
59527: ARRAY
59528: PPUSH
59529: LD_VAR 0 5
59533: PUSH
59534: LD_INT 2
59536: ARRAY
59537: PPUSH
59538: CALL 58493 0 3
59542: NOT
59543: IFFALSE 59549
// exit ;
59545: POP
59546: POP
59547: GO 59553
59549: GO 59512
59551: POP
59552: POP
// end ;
59553: LD_VAR 0 4
59557: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
59558: LD_INT 0
59560: PPUSH
59561: PPUSH
59562: PPUSH
59563: PPUSH
59564: PPUSH
59565: PPUSH
59566: PPUSH
// if not GetClass ( unit ) = class_sniper then
59567: LD_VAR 0 1
59571: PPUSH
59572: CALL_OW 257
59576: PUSH
59577: LD_INT 5
59579: EQUAL
59580: NOT
59581: IFFALSE 59585
// exit ;
59583: GO 59973
// dist := 8 ;
59585: LD_ADDR_VAR 0 5
59589: PUSH
59590: LD_INT 8
59592: ST_TO_ADDR
// viewRange := 12 ;
59593: LD_ADDR_VAR 0 7
59597: PUSH
59598: LD_INT 12
59600: ST_TO_ADDR
// side := GetSide ( unit ) ;
59601: LD_ADDR_VAR 0 6
59605: PUSH
59606: LD_VAR 0 1
59610: PPUSH
59611: CALL_OW 255
59615: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
59616: LD_INT 61
59618: PPUSH
59619: LD_VAR 0 6
59623: PPUSH
59624: CALL_OW 321
59628: PUSH
59629: LD_INT 2
59631: EQUAL
59632: IFFALSE 59642
// viewRange := 16 ;
59634: LD_ADDR_VAR 0 7
59638: PUSH
59639: LD_INT 16
59641: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
59642: LD_VAR 0 1
59646: PPUSH
59647: LD_VAR 0 2
59651: PPUSH
59652: LD_VAR 0 3
59656: PPUSH
59657: CALL_OW 297
59661: PUSH
59662: LD_VAR 0 5
59666: GREATER
59667: IFFALSE 59746
// begin ComMoveXY ( unit , x , y ) ;
59669: LD_VAR 0 1
59673: PPUSH
59674: LD_VAR 0 2
59678: PPUSH
59679: LD_VAR 0 3
59683: PPUSH
59684: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59688: LD_INT 35
59690: PPUSH
59691: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
59695: LD_VAR 0 1
59699: PPUSH
59700: LD_VAR 0 2
59704: PPUSH
59705: LD_VAR 0 3
59709: PPUSH
59710: CALL 50627 0 3
59714: NOT
59715: IFFALSE 59719
// exit ;
59717: GO 59973
// until GetDistUnitXY ( unit , x , y ) < dist ;
59719: LD_VAR 0 1
59723: PPUSH
59724: LD_VAR 0 2
59728: PPUSH
59729: LD_VAR 0 3
59733: PPUSH
59734: CALL_OW 297
59738: PUSH
59739: LD_VAR 0 5
59743: LESS
59744: IFFALSE 59688
// end ; ComTurnXY ( unit , x , y ) ;
59746: LD_VAR 0 1
59750: PPUSH
59751: LD_VAR 0 2
59755: PPUSH
59756: LD_VAR 0 3
59760: PPUSH
59761: CALL_OW 118
// wait ( 5 ) ;
59765: LD_INT 5
59767: PPUSH
59768: CALL_OW 67
// _d := GetDir ( unit ) ;
59772: LD_ADDR_VAR 0 10
59776: PUSH
59777: LD_VAR 0 1
59781: PPUSH
59782: CALL_OW 254
59786: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
59787: LD_ADDR_VAR 0 8
59791: PUSH
59792: LD_VAR 0 1
59796: PPUSH
59797: CALL_OW 250
59801: PPUSH
59802: LD_VAR 0 10
59806: PPUSH
59807: LD_VAR 0 5
59811: PPUSH
59812: CALL_OW 272
59816: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
59817: LD_ADDR_VAR 0 9
59821: PUSH
59822: LD_VAR 0 1
59826: PPUSH
59827: CALL_OW 251
59831: PPUSH
59832: LD_VAR 0 10
59836: PPUSH
59837: LD_VAR 0 5
59841: PPUSH
59842: CALL_OW 273
59846: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59847: LD_VAR 0 8
59851: PPUSH
59852: LD_VAR 0 9
59856: PPUSH
59857: CALL_OW 488
59861: NOT
59862: IFFALSE 59866
// exit ;
59864: GO 59973
// ComAnimCustom ( unit , 1 ) ;
59866: LD_VAR 0 1
59870: PPUSH
59871: LD_INT 1
59873: PPUSH
59874: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
59878: LD_VAR 0 8
59882: PPUSH
59883: LD_VAR 0 9
59887: PPUSH
59888: LD_VAR 0 6
59892: PPUSH
59893: LD_VAR 0 7
59897: PPUSH
59898: CALL_OW 330
// repeat wait ( 1 ) ;
59902: LD_INT 1
59904: PPUSH
59905: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
59909: LD_VAR 0 1
59913: PPUSH
59914: CALL_OW 316
59918: PUSH
59919: LD_VAR 0 1
59923: PPUSH
59924: CALL_OW 314
59928: OR
59929: PUSH
59930: LD_VAR 0 1
59934: PPUSH
59935: CALL_OW 302
59939: NOT
59940: OR
59941: PUSH
59942: LD_VAR 0 1
59946: PPUSH
59947: CALL_OW 301
59951: OR
59952: IFFALSE 59902
// RemoveSeeing ( _x , _y , side ) ;
59954: LD_VAR 0 8
59958: PPUSH
59959: LD_VAR 0 9
59963: PPUSH
59964: LD_VAR 0 6
59968: PPUSH
59969: CALL_OW 331
// end ; end_of_file
59973: LD_VAR 0 4
59977: RET
// every 0 0$1 do
59978: GO 59980
59980: DISABLE
// begin enable ;
59981: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59982: LD_STRING updateTimer(
59984: PUSH
59985: LD_OWVAR 1
59989: STR
59990: PUSH
59991: LD_STRING );
59993: STR
59994: PPUSH
59995: CALL_OW 559
// end ;
59999: END
// on MapStart ( p ) do begin if streamModeActive then
60000: LD_EXP 43
60004: IFFALSE 60013
// DefineStreamItems ( true ) ;
60006: LD_INT 1
60008: PPUSH
60009: CALL 61661 0 1
// UpdateFactoryWaypoints ( ) ;
60013: CALL 56276 0 0
// end ;
60017: PPOPN 1
60019: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
60020: LD_INT 0
60022: PPUSH
// if p2 = 100 then
60023: LD_VAR 0 2
60027: PUSH
60028: LD_INT 100
60030: EQUAL
60031: IFFALSE 61034
// begin if not StreamModeActive then
60033: LD_EXP 43
60037: NOT
60038: IFFALSE 60048
// StreamModeActive := true ;
60040: LD_ADDR_EXP 43
60044: PUSH
60045: LD_INT 1
60047: ST_TO_ADDR
// if p3 = 0 then
60048: LD_VAR 0 3
60052: PUSH
60053: LD_INT 0
60055: EQUAL
60056: IFFALSE 60062
// InitStreamMode ;
60058: CALL 61197 0 0
// if p3 = 1 then
60062: LD_VAR 0 3
60066: PUSH
60067: LD_INT 1
60069: EQUAL
60070: IFFALSE 60080
// sRocket := true ;
60072: LD_ADDR_EXP 48
60076: PUSH
60077: LD_INT 1
60079: ST_TO_ADDR
// if p3 = 2 then
60080: LD_VAR 0 3
60084: PUSH
60085: LD_INT 2
60087: EQUAL
60088: IFFALSE 60098
// sSpeed := true ;
60090: LD_ADDR_EXP 47
60094: PUSH
60095: LD_INT 1
60097: ST_TO_ADDR
// if p3 = 3 then
60098: LD_VAR 0 3
60102: PUSH
60103: LD_INT 3
60105: EQUAL
60106: IFFALSE 60116
// sEngine := true ;
60108: LD_ADDR_EXP 49
60112: PUSH
60113: LD_INT 1
60115: ST_TO_ADDR
// if p3 = 4 then
60116: LD_VAR 0 3
60120: PUSH
60121: LD_INT 4
60123: EQUAL
60124: IFFALSE 60134
// sSpec := true ;
60126: LD_ADDR_EXP 46
60130: PUSH
60131: LD_INT 1
60133: ST_TO_ADDR
// if p3 = 5 then
60134: LD_VAR 0 3
60138: PUSH
60139: LD_INT 5
60141: EQUAL
60142: IFFALSE 60152
// sLevel := true ;
60144: LD_ADDR_EXP 50
60148: PUSH
60149: LD_INT 1
60151: ST_TO_ADDR
// if p3 = 6 then
60152: LD_VAR 0 3
60156: PUSH
60157: LD_INT 6
60159: EQUAL
60160: IFFALSE 60170
// sArmoury := true ;
60162: LD_ADDR_EXP 51
60166: PUSH
60167: LD_INT 1
60169: ST_TO_ADDR
// if p3 = 7 then
60170: LD_VAR 0 3
60174: PUSH
60175: LD_INT 7
60177: EQUAL
60178: IFFALSE 60188
// sRadar := true ;
60180: LD_ADDR_EXP 52
60184: PUSH
60185: LD_INT 1
60187: ST_TO_ADDR
// if p3 = 8 then
60188: LD_VAR 0 3
60192: PUSH
60193: LD_INT 8
60195: EQUAL
60196: IFFALSE 60206
// sBunker := true ;
60198: LD_ADDR_EXP 53
60202: PUSH
60203: LD_INT 1
60205: ST_TO_ADDR
// if p3 = 9 then
60206: LD_VAR 0 3
60210: PUSH
60211: LD_INT 9
60213: EQUAL
60214: IFFALSE 60224
// sHack := true ;
60216: LD_ADDR_EXP 54
60220: PUSH
60221: LD_INT 1
60223: ST_TO_ADDR
// if p3 = 10 then
60224: LD_VAR 0 3
60228: PUSH
60229: LD_INT 10
60231: EQUAL
60232: IFFALSE 60242
// sFire := true ;
60234: LD_ADDR_EXP 55
60238: PUSH
60239: LD_INT 1
60241: ST_TO_ADDR
// if p3 = 11 then
60242: LD_VAR 0 3
60246: PUSH
60247: LD_INT 11
60249: EQUAL
60250: IFFALSE 60260
// sRefresh := true ;
60252: LD_ADDR_EXP 56
60256: PUSH
60257: LD_INT 1
60259: ST_TO_ADDR
// if p3 = 12 then
60260: LD_VAR 0 3
60264: PUSH
60265: LD_INT 12
60267: EQUAL
60268: IFFALSE 60278
// sExp := true ;
60270: LD_ADDR_EXP 57
60274: PUSH
60275: LD_INT 1
60277: ST_TO_ADDR
// if p3 = 13 then
60278: LD_VAR 0 3
60282: PUSH
60283: LD_INT 13
60285: EQUAL
60286: IFFALSE 60296
// sDepot := true ;
60288: LD_ADDR_EXP 58
60292: PUSH
60293: LD_INT 1
60295: ST_TO_ADDR
// if p3 = 14 then
60296: LD_VAR 0 3
60300: PUSH
60301: LD_INT 14
60303: EQUAL
60304: IFFALSE 60314
// sFlag := true ;
60306: LD_ADDR_EXP 59
60310: PUSH
60311: LD_INT 1
60313: ST_TO_ADDR
// if p3 = 15 then
60314: LD_VAR 0 3
60318: PUSH
60319: LD_INT 15
60321: EQUAL
60322: IFFALSE 60332
// sKamikadze := true ;
60324: LD_ADDR_EXP 67
60328: PUSH
60329: LD_INT 1
60331: ST_TO_ADDR
// if p3 = 16 then
60332: LD_VAR 0 3
60336: PUSH
60337: LD_INT 16
60339: EQUAL
60340: IFFALSE 60350
// sTroll := true ;
60342: LD_ADDR_EXP 68
60346: PUSH
60347: LD_INT 1
60349: ST_TO_ADDR
// if p3 = 17 then
60350: LD_VAR 0 3
60354: PUSH
60355: LD_INT 17
60357: EQUAL
60358: IFFALSE 60368
// sSlow := true ;
60360: LD_ADDR_EXP 69
60364: PUSH
60365: LD_INT 1
60367: ST_TO_ADDR
// if p3 = 18 then
60368: LD_VAR 0 3
60372: PUSH
60373: LD_INT 18
60375: EQUAL
60376: IFFALSE 60386
// sLack := true ;
60378: LD_ADDR_EXP 70
60382: PUSH
60383: LD_INT 1
60385: ST_TO_ADDR
// if p3 = 19 then
60386: LD_VAR 0 3
60390: PUSH
60391: LD_INT 19
60393: EQUAL
60394: IFFALSE 60404
// sTank := true ;
60396: LD_ADDR_EXP 72
60400: PUSH
60401: LD_INT 1
60403: ST_TO_ADDR
// if p3 = 20 then
60404: LD_VAR 0 3
60408: PUSH
60409: LD_INT 20
60411: EQUAL
60412: IFFALSE 60422
// sRemote := true ;
60414: LD_ADDR_EXP 73
60418: PUSH
60419: LD_INT 1
60421: ST_TO_ADDR
// if p3 = 21 then
60422: LD_VAR 0 3
60426: PUSH
60427: LD_INT 21
60429: EQUAL
60430: IFFALSE 60440
// sPowell := true ;
60432: LD_ADDR_EXP 74
60436: PUSH
60437: LD_INT 1
60439: ST_TO_ADDR
// if p3 = 22 then
60440: LD_VAR 0 3
60444: PUSH
60445: LD_INT 22
60447: EQUAL
60448: IFFALSE 60458
// sTeleport := true ;
60450: LD_ADDR_EXP 77
60454: PUSH
60455: LD_INT 1
60457: ST_TO_ADDR
// if p3 = 23 then
60458: LD_VAR 0 3
60462: PUSH
60463: LD_INT 23
60465: EQUAL
60466: IFFALSE 60476
// sOilTower := true ;
60468: LD_ADDR_EXP 79
60472: PUSH
60473: LD_INT 1
60475: ST_TO_ADDR
// if p3 = 24 then
60476: LD_VAR 0 3
60480: PUSH
60481: LD_INT 24
60483: EQUAL
60484: IFFALSE 60494
// sShovel := true ;
60486: LD_ADDR_EXP 80
60490: PUSH
60491: LD_INT 1
60493: ST_TO_ADDR
// if p3 = 25 then
60494: LD_VAR 0 3
60498: PUSH
60499: LD_INT 25
60501: EQUAL
60502: IFFALSE 60512
// sSheik := true ;
60504: LD_ADDR_EXP 81
60508: PUSH
60509: LD_INT 1
60511: ST_TO_ADDR
// if p3 = 26 then
60512: LD_VAR 0 3
60516: PUSH
60517: LD_INT 26
60519: EQUAL
60520: IFFALSE 60530
// sEarthquake := true ;
60522: LD_ADDR_EXP 83
60526: PUSH
60527: LD_INT 1
60529: ST_TO_ADDR
// if p3 = 27 then
60530: LD_VAR 0 3
60534: PUSH
60535: LD_INT 27
60537: EQUAL
60538: IFFALSE 60548
// sAI := true ;
60540: LD_ADDR_EXP 84
60544: PUSH
60545: LD_INT 1
60547: ST_TO_ADDR
// if p3 = 28 then
60548: LD_VAR 0 3
60552: PUSH
60553: LD_INT 28
60555: EQUAL
60556: IFFALSE 60566
// sCargo := true ;
60558: LD_ADDR_EXP 87
60562: PUSH
60563: LD_INT 1
60565: ST_TO_ADDR
// if p3 = 29 then
60566: LD_VAR 0 3
60570: PUSH
60571: LD_INT 29
60573: EQUAL
60574: IFFALSE 60584
// sDLaser := true ;
60576: LD_ADDR_EXP 88
60580: PUSH
60581: LD_INT 1
60583: ST_TO_ADDR
// if p3 = 30 then
60584: LD_VAR 0 3
60588: PUSH
60589: LD_INT 30
60591: EQUAL
60592: IFFALSE 60602
// sExchange := true ;
60594: LD_ADDR_EXP 89
60598: PUSH
60599: LD_INT 1
60601: ST_TO_ADDR
// if p3 = 31 then
60602: LD_VAR 0 3
60606: PUSH
60607: LD_INT 31
60609: EQUAL
60610: IFFALSE 60620
// sFac := true ;
60612: LD_ADDR_EXP 90
60616: PUSH
60617: LD_INT 1
60619: ST_TO_ADDR
// if p3 = 32 then
60620: LD_VAR 0 3
60624: PUSH
60625: LD_INT 32
60627: EQUAL
60628: IFFALSE 60638
// sPower := true ;
60630: LD_ADDR_EXP 91
60634: PUSH
60635: LD_INT 1
60637: ST_TO_ADDR
// if p3 = 33 then
60638: LD_VAR 0 3
60642: PUSH
60643: LD_INT 33
60645: EQUAL
60646: IFFALSE 60656
// sRandom := true ;
60648: LD_ADDR_EXP 92
60652: PUSH
60653: LD_INT 1
60655: ST_TO_ADDR
// if p3 = 34 then
60656: LD_VAR 0 3
60660: PUSH
60661: LD_INT 34
60663: EQUAL
60664: IFFALSE 60674
// sShield := true ;
60666: LD_ADDR_EXP 93
60670: PUSH
60671: LD_INT 1
60673: ST_TO_ADDR
// if p3 = 35 then
60674: LD_VAR 0 3
60678: PUSH
60679: LD_INT 35
60681: EQUAL
60682: IFFALSE 60692
// sTime := true ;
60684: LD_ADDR_EXP 94
60688: PUSH
60689: LD_INT 1
60691: ST_TO_ADDR
// if p3 = 36 then
60692: LD_VAR 0 3
60696: PUSH
60697: LD_INT 36
60699: EQUAL
60700: IFFALSE 60710
// sTools := true ;
60702: LD_ADDR_EXP 95
60706: PUSH
60707: LD_INT 1
60709: ST_TO_ADDR
// if p3 = 101 then
60710: LD_VAR 0 3
60714: PUSH
60715: LD_INT 101
60717: EQUAL
60718: IFFALSE 60728
// sSold := true ;
60720: LD_ADDR_EXP 60
60724: PUSH
60725: LD_INT 1
60727: ST_TO_ADDR
// if p3 = 102 then
60728: LD_VAR 0 3
60732: PUSH
60733: LD_INT 102
60735: EQUAL
60736: IFFALSE 60746
// sDiff := true ;
60738: LD_ADDR_EXP 61
60742: PUSH
60743: LD_INT 1
60745: ST_TO_ADDR
// if p3 = 103 then
60746: LD_VAR 0 3
60750: PUSH
60751: LD_INT 103
60753: EQUAL
60754: IFFALSE 60764
// sFog := true ;
60756: LD_ADDR_EXP 64
60760: PUSH
60761: LD_INT 1
60763: ST_TO_ADDR
// if p3 = 104 then
60764: LD_VAR 0 3
60768: PUSH
60769: LD_INT 104
60771: EQUAL
60772: IFFALSE 60782
// sReset := true ;
60774: LD_ADDR_EXP 65
60778: PUSH
60779: LD_INT 1
60781: ST_TO_ADDR
// if p3 = 105 then
60782: LD_VAR 0 3
60786: PUSH
60787: LD_INT 105
60789: EQUAL
60790: IFFALSE 60800
// sSun := true ;
60792: LD_ADDR_EXP 66
60796: PUSH
60797: LD_INT 1
60799: ST_TO_ADDR
// if p3 = 106 then
60800: LD_VAR 0 3
60804: PUSH
60805: LD_INT 106
60807: EQUAL
60808: IFFALSE 60818
// sTiger := true ;
60810: LD_ADDR_EXP 62
60814: PUSH
60815: LD_INT 1
60817: ST_TO_ADDR
// if p3 = 107 then
60818: LD_VAR 0 3
60822: PUSH
60823: LD_INT 107
60825: EQUAL
60826: IFFALSE 60836
// sBomb := true ;
60828: LD_ADDR_EXP 63
60832: PUSH
60833: LD_INT 1
60835: ST_TO_ADDR
// if p3 = 108 then
60836: LD_VAR 0 3
60840: PUSH
60841: LD_INT 108
60843: EQUAL
60844: IFFALSE 60854
// sWound := true ;
60846: LD_ADDR_EXP 71
60850: PUSH
60851: LD_INT 1
60853: ST_TO_ADDR
// if p3 = 109 then
60854: LD_VAR 0 3
60858: PUSH
60859: LD_INT 109
60861: EQUAL
60862: IFFALSE 60872
// sBetray := true ;
60864: LD_ADDR_EXP 75
60868: PUSH
60869: LD_INT 1
60871: ST_TO_ADDR
// if p3 = 110 then
60872: LD_VAR 0 3
60876: PUSH
60877: LD_INT 110
60879: EQUAL
60880: IFFALSE 60890
// sContamin := true ;
60882: LD_ADDR_EXP 76
60886: PUSH
60887: LD_INT 1
60889: ST_TO_ADDR
// if p3 = 111 then
60890: LD_VAR 0 3
60894: PUSH
60895: LD_INT 111
60897: EQUAL
60898: IFFALSE 60908
// sOil := true ;
60900: LD_ADDR_EXP 78
60904: PUSH
60905: LD_INT 1
60907: ST_TO_ADDR
// if p3 = 112 then
60908: LD_VAR 0 3
60912: PUSH
60913: LD_INT 112
60915: EQUAL
60916: IFFALSE 60926
// sStu := true ;
60918: LD_ADDR_EXP 82
60922: PUSH
60923: LD_INT 1
60925: ST_TO_ADDR
// if p3 = 113 then
60926: LD_VAR 0 3
60930: PUSH
60931: LD_INT 113
60933: EQUAL
60934: IFFALSE 60944
// sBazooka := true ;
60936: LD_ADDR_EXP 85
60940: PUSH
60941: LD_INT 1
60943: ST_TO_ADDR
// if p3 = 114 then
60944: LD_VAR 0 3
60948: PUSH
60949: LD_INT 114
60951: EQUAL
60952: IFFALSE 60962
// sMortar := true ;
60954: LD_ADDR_EXP 86
60958: PUSH
60959: LD_INT 1
60961: ST_TO_ADDR
// if p3 = 115 then
60962: LD_VAR 0 3
60966: PUSH
60967: LD_INT 115
60969: EQUAL
60970: IFFALSE 60980
// sRanger := true ;
60972: LD_ADDR_EXP 96
60976: PUSH
60977: LD_INT 1
60979: ST_TO_ADDR
// if p3 = 116 then
60980: LD_VAR 0 3
60984: PUSH
60985: LD_INT 116
60987: EQUAL
60988: IFFALSE 60998
// sComputer := true ;
60990: LD_ADDR_EXP 97
60994: PUSH
60995: LD_INT 1
60997: ST_TO_ADDR
// if p3 = 117 then
60998: LD_VAR 0 3
61002: PUSH
61003: LD_INT 117
61005: EQUAL
61006: IFFALSE 61016
// s30 := true ;
61008: LD_ADDR_EXP 98
61012: PUSH
61013: LD_INT 1
61015: ST_TO_ADDR
// if p3 = 118 then
61016: LD_VAR 0 3
61020: PUSH
61021: LD_INT 118
61023: EQUAL
61024: IFFALSE 61034
// s60 := true ;
61026: LD_ADDR_EXP 99
61030: PUSH
61031: LD_INT 1
61033: ST_TO_ADDR
// end ; if p2 = 101 then
61034: LD_VAR 0 2
61038: PUSH
61039: LD_INT 101
61041: EQUAL
61042: IFFALSE 61170
// begin case p3 of 1 :
61044: LD_VAR 0 3
61048: PUSH
61049: LD_INT 1
61051: DOUBLE
61052: EQUAL
61053: IFTRUE 61057
61055: GO 61064
61057: POP
// hHackUnlimitedResources ; 2 :
61058: CALL 73268 0 0
61062: GO 61170
61064: LD_INT 2
61066: DOUBLE
61067: EQUAL
61068: IFTRUE 61072
61070: GO 61079
61072: POP
// hHackSetLevel10 ; 3 :
61073: CALL 73401 0 0
61077: GO 61170
61079: LD_INT 3
61081: DOUBLE
61082: EQUAL
61083: IFTRUE 61087
61085: GO 61094
61087: POP
// hHackSetLevel10YourUnits ; 4 :
61088: CALL 73486 0 0
61092: GO 61170
61094: LD_INT 4
61096: DOUBLE
61097: EQUAL
61098: IFTRUE 61102
61100: GO 61109
61102: POP
// hHackInvincible ; 5 :
61103: CALL 73934 0 0
61107: GO 61170
61109: LD_INT 5
61111: DOUBLE
61112: EQUAL
61113: IFTRUE 61117
61115: GO 61124
61117: POP
// hHackInvisible ; 6 :
61118: CALL 74045 0 0
61122: GO 61170
61124: LD_INT 6
61126: DOUBLE
61127: EQUAL
61128: IFTRUE 61132
61130: GO 61139
61132: POP
// hHackChangeYourSide ; 7 :
61133: CALL 74102 0 0
61137: GO 61170
61139: LD_INT 7
61141: DOUBLE
61142: EQUAL
61143: IFTRUE 61147
61145: GO 61154
61147: POP
// hHackChangeUnitSide ; 8 :
61148: CALL 74144 0 0
61152: GO 61170
61154: LD_INT 8
61156: DOUBLE
61157: EQUAL
61158: IFTRUE 61162
61160: GO 61169
61162: POP
// hHackFog ; end ;
61163: CALL 74245 0 0
61167: GO 61170
61169: POP
// end ; end ;
61170: LD_VAR 0 7
61174: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
61175: GO 61177
61177: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
61178: LD_STRING initStreamRollete();
61180: PPUSH
61181: CALL_OW 559
// InitStreamMode ;
61185: CALL 61197 0 0
// DefineStreamItems ( false ) ;
61189: LD_INT 0
61191: PPUSH
61192: CALL 61661 0 1
// end ;
61196: END
// function InitStreamMode ; begin
61197: LD_INT 0
61199: PPUSH
// streamModeActive := false ;
61200: LD_ADDR_EXP 43
61204: PUSH
61205: LD_INT 0
61207: ST_TO_ADDR
// normalCounter := 36 ;
61208: LD_ADDR_EXP 44
61212: PUSH
61213: LD_INT 36
61215: ST_TO_ADDR
// hardcoreCounter := 18 ;
61216: LD_ADDR_EXP 45
61220: PUSH
61221: LD_INT 18
61223: ST_TO_ADDR
// sRocket := false ;
61224: LD_ADDR_EXP 48
61228: PUSH
61229: LD_INT 0
61231: ST_TO_ADDR
// sSpeed := false ;
61232: LD_ADDR_EXP 47
61236: PUSH
61237: LD_INT 0
61239: ST_TO_ADDR
// sEngine := false ;
61240: LD_ADDR_EXP 49
61244: PUSH
61245: LD_INT 0
61247: ST_TO_ADDR
// sSpec := false ;
61248: LD_ADDR_EXP 46
61252: PUSH
61253: LD_INT 0
61255: ST_TO_ADDR
// sLevel := false ;
61256: LD_ADDR_EXP 50
61260: PUSH
61261: LD_INT 0
61263: ST_TO_ADDR
// sArmoury := false ;
61264: LD_ADDR_EXP 51
61268: PUSH
61269: LD_INT 0
61271: ST_TO_ADDR
// sRadar := false ;
61272: LD_ADDR_EXP 52
61276: PUSH
61277: LD_INT 0
61279: ST_TO_ADDR
// sBunker := false ;
61280: LD_ADDR_EXP 53
61284: PUSH
61285: LD_INT 0
61287: ST_TO_ADDR
// sHack := false ;
61288: LD_ADDR_EXP 54
61292: PUSH
61293: LD_INT 0
61295: ST_TO_ADDR
// sFire := false ;
61296: LD_ADDR_EXP 55
61300: PUSH
61301: LD_INT 0
61303: ST_TO_ADDR
// sRefresh := false ;
61304: LD_ADDR_EXP 56
61308: PUSH
61309: LD_INT 0
61311: ST_TO_ADDR
// sExp := false ;
61312: LD_ADDR_EXP 57
61316: PUSH
61317: LD_INT 0
61319: ST_TO_ADDR
// sDepot := false ;
61320: LD_ADDR_EXP 58
61324: PUSH
61325: LD_INT 0
61327: ST_TO_ADDR
// sFlag := false ;
61328: LD_ADDR_EXP 59
61332: PUSH
61333: LD_INT 0
61335: ST_TO_ADDR
// sKamikadze := false ;
61336: LD_ADDR_EXP 67
61340: PUSH
61341: LD_INT 0
61343: ST_TO_ADDR
// sTroll := false ;
61344: LD_ADDR_EXP 68
61348: PUSH
61349: LD_INT 0
61351: ST_TO_ADDR
// sSlow := false ;
61352: LD_ADDR_EXP 69
61356: PUSH
61357: LD_INT 0
61359: ST_TO_ADDR
// sLack := false ;
61360: LD_ADDR_EXP 70
61364: PUSH
61365: LD_INT 0
61367: ST_TO_ADDR
// sTank := false ;
61368: LD_ADDR_EXP 72
61372: PUSH
61373: LD_INT 0
61375: ST_TO_ADDR
// sRemote := false ;
61376: LD_ADDR_EXP 73
61380: PUSH
61381: LD_INT 0
61383: ST_TO_ADDR
// sPowell := false ;
61384: LD_ADDR_EXP 74
61388: PUSH
61389: LD_INT 0
61391: ST_TO_ADDR
// sTeleport := false ;
61392: LD_ADDR_EXP 77
61396: PUSH
61397: LD_INT 0
61399: ST_TO_ADDR
// sOilTower := false ;
61400: LD_ADDR_EXP 79
61404: PUSH
61405: LD_INT 0
61407: ST_TO_ADDR
// sShovel := false ;
61408: LD_ADDR_EXP 80
61412: PUSH
61413: LD_INT 0
61415: ST_TO_ADDR
// sSheik := false ;
61416: LD_ADDR_EXP 81
61420: PUSH
61421: LD_INT 0
61423: ST_TO_ADDR
// sEarthquake := false ;
61424: LD_ADDR_EXP 83
61428: PUSH
61429: LD_INT 0
61431: ST_TO_ADDR
// sAI := false ;
61432: LD_ADDR_EXP 84
61436: PUSH
61437: LD_INT 0
61439: ST_TO_ADDR
// sCargo := false ;
61440: LD_ADDR_EXP 87
61444: PUSH
61445: LD_INT 0
61447: ST_TO_ADDR
// sDLaser := false ;
61448: LD_ADDR_EXP 88
61452: PUSH
61453: LD_INT 0
61455: ST_TO_ADDR
// sExchange := false ;
61456: LD_ADDR_EXP 89
61460: PUSH
61461: LD_INT 0
61463: ST_TO_ADDR
// sFac := false ;
61464: LD_ADDR_EXP 90
61468: PUSH
61469: LD_INT 0
61471: ST_TO_ADDR
// sPower := false ;
61472: LD_ADDR_EXP 91
61476: PUSH
61477: LD_INT 0
61479: ST_TO_ADDR
// sRandom := false ;
61480: LD_ADDR_EXP 92
61484: PUSH
61485: LD_INT 0
61487: ST_TO_ADDR
// sShield := false ;
61488: LD_ADDR_EXP 93
61492: PUSH
61493: LD_INT 0
61495: ST_TO_ADDR
// sTime := false ;
61496: LD_ADDR_EXP 94
61500: PUSH
61501: LD_INT 0
61503: ST_TO_ADDR
// sTools := false ;
61504: LD_ADDR_EXP 95
61508: PUSH
61509: LD_INT 0
61511: ST_TO_ADDR
// sSold := false ;
61512: LD_ADDR_EXP 60
61516: PUSH
61517: LD_INT 0
61519: ST_TO_ADDR
// sDiff := false ;
61520: LD_ADDR_EXP 61
61524: PUSH
61525: LD_INT 0
61527: ST_TO_ADDR
// sFog := false ;
61528: LD_ADDR_EXP 64
61532: PUSH
61533: LD_INT 0
61535: ST_TO_ADDR
// sReset := false ;
61536: LD_ADDR_EXP 65
61540: PUSH
61541: LD_INT 0
61543: ST_TO_ADDR
// sSun := false ;
61544: LD_ADDR_EXP 66
61548: PUSH
61549: LD_INT 0
61551: ST_TO_ADDR
// sTiger := false ;
61552: LD_ADDR_EXP 62
61556: PUSH
61557: LD_INT 0
61559: ST_TO_ADDR
// sBomb := false ;
61560: LD_ADDR_EXP 63
61564: PUSH
61565: LD_INT 0
61567: ST_TO_ADDR
// sWound := false ;
61568: LD_ADDR_EXP 71
61572: PUSH
61573: LD_INT 0
61575: ST_TO_ADDR
// sBetray := false ;
61576: LD_ADDR_EXP 75
61580: PUSH
61581: LD_INT 0
61583: ST_TO_ADDR
// sContamin := false ;
61584: LD_ADDR_EXP 76
61588: PUSH
61589: LD_INT 0
61591: ST_TO_ADDR
// sOil := false ;
61592: LD_ADDR_EXP 78
61596: PUSH
61597: LD_INT 0
61599: ST_TO_ADDR
// sStu := false ;
61600: LD_ADDR_EXP 82
61604: PUSH
61605: LD_INT 0
61607: ST_TO_ADDR
// sBazooka := false ;
61608: LD_ADDR_EXP 85
61612: PUSH
61613: LD_INT 0
61615: ST_TO_ADDR
// sMortar := false ;
61616: LD_ADDR_EXP 86
61620: PUSH
61621: LD_INT 0
61623: ST_TO_ADDR
// sRanger := false ;
61624: LD_ADDR_EXP 96
61628: PUSH
61629: LD_INT 0
61631: ST_TO_ADDR
// sComputer := false ;
61632: LD_ADDR_EXP 97
61636: PUSH
61637: LD_INT 0
61639: ST_TO_ADDR
// s30 := false ;
61640: LD_ADDR_EXP 98
61644: PUSH
61645: LD_INT 0
61647: ST_TO_ADDR
// s60 := false ;
61648: LD_ADDR_EXP 99
61652: PUSH
61653: LD_INT 0
61655: ST_TO_ADDR
// end ;
61656: LD_VAR 0 1
61660: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
61661: LD_INT 0
61663: PPUSH
61664: PPUSH
61665: PPUSH
61666: PPUSH
61667: PPUSH
61668: PPUSH
61669: PPUSH
// result := [ ] ;
61670: LD_ADDR_VAR 0 2
61674: PUSH
61675: EMPTY
61676: ST_TO_ADDR
// if campaign_id = 1 then
61677: LD_OWVAR 69
61681: PUSH
61682: LD_INT 1
61684: EQUAL
61685: IFFALSE 64851
// begin case mission_number of 1 :
61687: LD_OWVAR 70
61691: PUSH
61692: LD_INT 1
61694: DOUBLE
61695: EQUAL
61696: IFTRUE 61700
61698: GO 61776
61700: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
61701: LD_ADDR_VAR 0 2
61705: PUSH
61706: LD_INT 2
61708: PUSH
61709: LD_INT 4
61711: PUSH
61712: LD_INT 11
61714: PUSH
61715: LD_INT 12
61717: PUSH
61718: LD_INT 15
61720: PUSH
61721: LD_INT 16
61723: PUSH
61724: LD_INT 22
61726: PUSH
61727: LD_INT 23
61729: PUSH
61730: LD_INT 26
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 101
61746: PUSH
61747: LD_INT 102
61749: PUSH
61750: LD_INT 106
61752: PUSH
61753: LD_INT 116
61755: PUSH
61756: LD_INT 117
61758: PUSH
61759: LD_INT 118
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: ST_TO_ADDR
61774: GO 64849
61776: LD_INT 2
61778: DOUBLE
61779: EQUAL
61780: IFTRUE 61784
61782: GO 61868
61784: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
61785: LD_ADDR_VAR 0 2
61789: PUSH
61790: LD_INT 2
61792: PUSH
61793: LD_INT 4
61795: PUSH
61796: LD_INT 11
61798: PUSH
61799: LD_INT 12
61801: PUSH
61802: LD_INT 15
61804: PUSH
61805: LD_INT 16
61807: PUSH
61808: LD_INT 22
61810: PUSH
61811: LD_INT 23
61813: PUSH
61814: LD_INT 26
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 101
61830: PUSH
61831: LD_INT 102
61833: PUSH
61834: LD_INT 105
61836: PUSH
61837: LD_INT 106
61839: PUSH
61840: LD_INT 108
61842: PUSH
61843: LD_INT 116
61845: PUSH
61846: LD_INT 117
61848: PUSH
61849: LD_INT 118
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: ST_TO_ADDR
61866: GO 64849
61868: LD_INT 3
61870: DOUBLE
61871: EQUAL
61872: IFTRUE 61876
61874: GO 61964
61876: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
61877: LD_ADDR_VAR 0 2
61881: PUSH
61882: LD_INT 2
61884: PUSH
61885: LD_INT 4
61887: PUSH
61888: LD_INT 5
61890: PUSH
61891: LD_INT 11
61893: PUSH
61894: LD_INT 12
61896: PUSH
61897: LD_INT 15
61899: PUSH
61900: LD_INT 16
61902: PUSH
61903: LD_INT 22
61905: PUSH
61906: LD_INT 26
61908: PUSH
61909: LD_INT 36
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 101
61926: PUSH
61927: LD_INT 102
61929: PUSH
61930: LD_INT 105
61932: PUSH
61933: LD_INT 106
61935: PUSH
61936: LD_INT 108
61938: PUSH
61939: LD_INT 116
61941: PUSH
61942: LD_INT 117
61944: PUSH
61945: LD_INT 118
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: ST_TO_ADDR
61962: GO 64849
61964: LD_INT 4
61966: DOUBLE
61967: EQUAL
61968: IFTRUE 61972
61970: GO 62068
61972: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
61973: LD_ADDR_VAR 0 2
61977: PUSH
61978: LD_INT 2
61980: PUSH
61981: LD_INT 4
61983: PUSH
61984: LD_INT 5
61986: PUSH
61987: LD_INT 8
61989: PUSH
61990: LD_INT 11
61992: PUSH
61993: LD_INT 12
61995: PUSH
61996: LD_INT 15
61998: PUSH
61999: LD_INT 16
62001: PUSH
62002: LD_INT 22
62004: PUSH
62005: LD_INT 23
62007: PUSH
62008: LD_INT 26
62010: PUSH
62011: LD_INT 36
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 101
62030: PUSH
62031: LD_INT 102
62033: PUSH
62034: LD_INT 105
62036: PUSH
62037: LD_INT 106
62039: PUSH
62040: LD_INT 108
62042: PUSH
62043: LD_INT 116
62045: PUSH
62046: LD_INT 117
62048: PUSH
62049: LD_INT 118
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: ST_TO_ADDR
62066: GO 64849
62068: LD_INT 5
62070: DOUBLE
62071: EQUAL
62072: IFTRUE 62076
62074: GO 62188
62076: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
62077: LD_ADDR_VAR 0 2
62081: PUSH
62082: LD_INT 2
62084: PUSH
62085: LD_INT 4
62087: PUSH
62088: LD_INT 5
62090: PUSH
62091: LD_INT 6
62093: PUSH
62094: LD_INT 8
62096: PUSH
62097: LD_INT 11
62099: PUSH
62100: LD_INT 12
62102: PUSH
62103: LD_INT 15
62105: PUSH
62106: LD_INT 16
62108: PUSH
62109: LD_INT 22
62111: PUSH
62112: LD_INT 23
62114: PUSH
62115: LD_INT 25
62117: PUSH
62118: LD_INT 26
62120: PUSH
62121: LD_INT 36
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 101
62142: PUSH
62143: LD_INT 102
62145: PUSH
62146: LD_INT 105
62148: PUSH
62149: LD_INT 106
62151: PUSH
62152: LD_INT 108
62154: PUSH
62155: LD_INT 109
62157: PUSH
62158: LD_INT 112
62160: PUSH
62161: LD_INT 116
62163: PUSH
62164: LD_INT 117
62166: PUSH
62167: LD_INT 118
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: ST_TO_ADDR
62186: GO 64849
62188: LD_INT 6
62190: DOUBLE
62191: EQUAL
62192: IFTRUE 62196
62194: GO 62328
62196: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
62197: LD_ADDR_VAR 0 2
62201: PUSH
62202: LD_INT 2
62204: PUSH
62205: LD_INT 4
62207: PUSH
62208: LD_INT 5
62210: PUSH
62211: LD_INT 6
62213: PUSH
62214: LD_INT 8
62216: PUSH
62217: LD_INT 11
62219: PUSH
62220: LD_INT 12
62222: PUSH
62223: LD_INT 15
62225: PUSH
62226: LD_INT 16
62228: PUSH
62229: LD_INT 20
62231: PUSH
62232: LD_INT 21
62234: PUSH
62235: LD_INT 22
62237: PUSH
62238: LD_INT 23
62240: PUSH
62241: LD_INT 25
62243: PUSH
62244: LD_INT 26
62246: PUSH
62247: LD_INT 30
62249: PUSH
62250: LD_INT 31
62252: PUSH
62253: LD_INT 32
62255: PUSH
62256: LD_INT 36
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 101
62282: PUSH
62283: LD_INT 102
62285: PUSH
62286: LD_INT 105
62288: PUSH
62289: LD_INT 106
62291: PUSH
62292: LD_INT 108
62294: PUSH
62295: LD_INT 109
62297: PUSH
62298: LD_INT 112
62300: PUSH
62301: LD_INT 116
62303: PUSH
62304: LD_INT 117
62306: PUSH
62307: LD_INT 118
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: ST_TO_ADDR
62326: GO 64849
62328: LD_INT 7
62330: DOUBLE
62331: EQUAL
62332: IFTRUE 62336
62334: GO 62448
62336: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
62337: LD_ADDR_VAR 0 2
62341: PUSH
62342: LD_INT 2
62344: PUSH
62345: LD_INT 4
62347: PUSH
62348: LD_INT 5
62350: PUSH
62351: LD_INT 7
62353: PUSH
62354: LD_INT 11
62356: PUSH
62357: LD_INT 12
62359: PUSH
62360: LD_INT 15
62362: PUSH
62363: LD_INT 16
62365: PUSH
62366: LD_INT 20
62368: PUSH
62369: LD_INT 21
62371: PUSH
62372: LD_INT 22
62374: PUSH
62375: LD_INT 23
62377: PUSH
62378: LD_INT 25
62380: PUSH
62381: LD_INT 26
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 101
62402: PUSH
62403: LD_INT 102
62405: PUSH
62406: LD_INT 103
62408: PUSH
62409: LD_INT 105
62411: PUSH
62412: LD_INT 106
62414: PUSH
62415: LD_INT 108
62417: PUSH
62418: LD_INT 112
62420: PUSH
62421: LD_INT 116
62423: PUSH
62424: LD_INT 117
62426: PUSH
62427: LD_INT 118
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: ST_TO_ADDR
62446: GO 64849
62448: LD_INT 8
62450: DOUBLE
62451: EQUAL
62452: IFTRUE 62456
62454: GO 62596
62456: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
62457: LD_ADDR_VAR 0 2
62461: PUSH
62462: LD_INT 2
62464: PUSH
62465: LD_INT 4
62467: PUSH
62468: LD_INT 5
62470: PUSH
62471: LD_INT 6
62473: PUSH
62474: LD_INT 7
62476: PUSH
62477: LD_INT 8
62479: PUSH
62480: LD_INT 11
62482: PUSH
62483: LD_INT 12
62485: PUSH
62486: LD_INT 15
62488: PUSH
62489: LD_INT 16
62491: PUSH
62492: LD_INT 20
62494: PUSH
62495: LD_INT 21
62497: PUSH
62498: LD_INT 22
62500: PUSH
62501: LD_INT 23
62503: PUSH
62504: LD_INT 25
62506: PUSH
62507: LD_INT 26
62509: PUSH
62510: LD_INT 30
62512: PUSH
62513: LD_INT 31
62515: PUSH
62516: LD_INT 32
62518: PUSH
62519: LD_INT 36
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 101
62546: PUSH
62547: LD_INT 102
62549: PUSH
62550: LD_INT 103
62552: PUSH
62553: LD_INT 105
62555: PUSH
62556: LD_INT 106
62558: PUSH
62559: LD_INT 108
62561: PUSH
62562: LD_INT 109
62564: PUSH
62565: LD_INT 112
62567: PUSH
62568: LD_INT 116
62570: PUSH
62571: LD_INT 117
62573: PUSH
62574: LD_INT 118
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: ST_TO_ADDR
62594: GO 64849
62596: LD_INT 9
62598: DOUBLE
62599: EQUAL
62600: IFTRUE 62604
62602: GO 62752
62604: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
62605: LD_ADDR_VAR 0 2
62609: PUSH
62610: LD_INT 2
62612: PUSH
62613: LD_INT 4
62615: PUSH
62616: LD_INT 5
62618: PUSH
62619: LD_INT 6
62621: PUSH
62622: LD_INT 7
62624: PUSH
62625: LD_INT 8
62627: PUSH
62628: LD_INT 11
62630: PUSH
62631: LD_INT 12
62633: PUSH
62634: LD_INT 15
62636: PUSH
62637: LD_INT 16
62639: PUSH
62640: LD_INT 20
62642: PUSH
62643: LD_INT 21
62645: PUSH
62646: LD_INT 22
62648: PUSH
62649: LD_INT 23
62651: PUSH
62652: LD_INT 25
62654: PUSH
62655: LD_INT 26
62657: PUSH
62658: LD_INT 28
62660: PUSH
62661: LD_INT 30
62663: PUSH
62664: LD_INT 31
62666: PUSH
62667: LD_INT 32
62669: PUSH
62670: LD_INT 36
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 101
62698: PUSH
62699: LD_INT 102
62701: PUSH
62702: LD_INT 103
62704: PUSH
62705: LD_INT 105
62707: PUSH
62708: LD_INT 106
62710: PUSH
62711: LD_INT 108
62713: PUSH
62714: LD_INT 109
62716: PUSH
62717: LD_INT 112
62719: PUSH
62720: LD_INT 114
62722: PUSH
62723: LD_INT 116
62725: PUSH
62726: LD_INT 117
62728: PUSH
62729: LD_INT 118
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: ST_TO_ADDR
62750: GO 64849
62752: LD_INT 10
62754: DOUBLE
62755: EQUAL
62756: IFTRUE 62760
62758: GO 62956
62760: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
62761: LD_ADDR_VAR 0 2
62765: PUSH
62766: LD_INT 2
62768: PUSH
62769: LD_INT 4
62771: PUSH
62772: LD_INT 5
62774: PUSH
62775: LD_INT 6
62777: PUSH
62778: LD_INT 7
62780: PUSH
62781: LD_INT 8
62783: PUSH
62784: LD_INT 9
62786: PUSH
62787: LD_INT 10
62789: PUSH
62790: LD_INT 11
62792: PUSH
62793: LD_INT 12
62795: PUSH
62796: LD_INT 13
62798: PUSH
62799: LD_INT 14
62801: PUSH
62802: LD_INT 15
62804: PUSH
62805: LD_INT 16
62807: PUSH
62808: LD_INT 17
62810: PUSH
62811: LD_INT 18
62813: PUSH
62814: LD_INT 19
62816: PUSH
62817: LD_INT 20
62819: PUSH
62820: LD_INT 21
62822: PUSH
62823: LD_INT 22
62825: PUSH
62826: LD_INT 23
62828: PUSH
62829: LD_INT 24
62831: PUSH
62832: LD_INT 25
62834: PUSH
62835: LD_INT 26
62837: PUSH
62838: LD_INT 28
62840: PUSH
62841: LD_INT 30
62843: PUSH
62844: LD_INT 31
62846: PUSH
62847: LD_INT 32
62849: PUSH
62850: LD_INT 36
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 101
62886: PUSH
62887: LD_INT 102
62889: PUSH
62890: LD_INT 103
62892: PUSH
62893: LD_INT 104
62895: PUSH
62896: LD_INT 105
62898: PUSH
62899: LD_INT 106
62901: PUSH
62902: LD_INT 107
62904: PUSH
62905: LD_INT 108
62907: PUSH
62908: LD_INT 109
62910: PUSH
62911: LD_INT 110
62913: PUSH
62914: LD_INT 111
62916: PUSH
62917: LD_INT 112
62919: PUSH
62920: LD_INT 114
62922: PUSH
62923: LD_INT 116
62925: PUSH
62926: LD_INT 117
62928: PUSH
62929: LD_INT 118
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: ST_TO_ADDR
62954: GO 64849
62956: LD_INT 11
62958: DOUBLE
62959: EQUAL
62960: IFTRUE 62964
62962: GO 63168
62964: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
62965: LD_ADDR_VAR 0 2
62969: PUSH
62970: LD_INT 2
62972: PUSH
62973: LD_INT 3
62975: PUSH
62976: LD_INT 4
62978: PUSH
62979: LD_INT 5
62981: PUSH
62982: LD_INT 6
62984: PUSH
62985: LD_INT 7
62987: PUSH
62988: LD_INT 8
62990: PUSH
62991: LD_INT 9
62993: PUSH
62994: LD_INT 10
62996: PUSH
62997: LD_INT 11
62999: PUSH
63000: LD_INT 12
63002: PUSH
63003: LD_INT 13
63005: PUSH
63006: LD_INT 14
63008: PUSH
63009: LD_INT 15
63011: PUSH
63012: LD_INT 16
63014: PUSH
63015: LD_INT 17
63017: PUSH
63018: LD_INT 18
63020: PUSH
63021: LD_INT 19
63023: PUSH
63024: LD_INT 20
63026: PUSH
63027: LD_INT 21
63029: PUSH
63030: LD_INT 22
63032: PUSH
63033: LD_INT 23
63035: PUSH
63036: LD_INT 24
63038: PUSH
63039: LD_INT 25
63041: PUSH
63042: LD_INT 26
63044: PUSH
63045: LD_INT 28
63047: PUSH
63048: LD_INT 30
63050: PUSH
63051: LD_INT 31
63053: PUSH
63054: LD_INT 32
63056: PUSH
63057: LD_INT 34
63059: PUSH
63060: LD_INT 36
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 101
63098: PUSH
63099: LD_INT 102
63101: PUSH
63102: LD_INT 103
63104: PUSH
63105: LD_INT 104
63107: PUSH
63108: LD_INT 105
63110: PUSH
63111: LD_INT 106
63113: PUSH
63114: LD_INT 107
63116: PUSH
63117: LD_INT 108
63119: PUSH
63120: LD_INT 109
63122: PUSH
63123: LD_INT 110
63125: PUSH
63126: LD_INT 111
63128: PUSH
63129: LD_INT 112
63131: PUSH
63132: LD_INT 114
63134: PUSH
63135: LD_INT 116
63137: PUSH
63138: LD_INT 117
63140: PUSH
63141: LD_INT 118
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: ST_TO_ADDR
63166: GO 64849
63168: LD_INT 12
63170: DOUBLE
63171: EQUAL
63172: IFTRUE 63176
63174: GO 63396
63176: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
63177: LD_ADDR_VAR 0 2
63181: PUSH
63182: LD_INT 1
63184: PUSH
63185: LD_INT 2
63187: PUSH
63188: LD_INT 3
63190: PUSH
63191: LD_INT 4
63193: PUSH
63194: LD_INT 5
63196: PUSH
63197: LD_INT 6
63199: PUSH
63200: LD_INT 7
63202: PUSH
63203: LD_INT 8
63205: PUSH
63206: LD_INT 9
63208: PUSH
63209: LD_INT 10
63211: PUSH
63212: LD_INT 11
63214: PUSH
63215: LD_INT 12
63217: PUSH
63218: LD_INT 13
63220: PUSH
63221: LD_INT 14
63223: PUSH
63224: LD_INT 15
63226: PUSH
63227: LD_INT 16
63229: PUSH
63230: LD_INT 17
63232: PUSH
63233: LD_INT 18
63235: PUSH
63236: LD_INT 19
63238: PUSH
63239: LD_INT 20
63241: PUSH
63242: LD_INT 21
63244: PUSH
63245: LD_INT 22
63247: PUSH
63248: LD_INT 23
63250: PUSH
63251: LD_INT 24
63253: PUSH
63254: LD_INT 25
63256: PUSH
63257: LD_INT 26
63259: PUSH
63260: LD_INT 27
63262: PUSH
63263: LD_INT 28
63265: PUSH
63266: LD_INT 30
63268: PUSH
63269: LD_INT 31
63271: PUSH
63272: LD_INT 32
63274: PUSH
63275: LD_INT 33
63277: PUSH
63278: LD_INT 34
63280: PUSH
63281: LD_INT 36
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 101
63322: PUSH
63323: LD_INT 102
63325: PUSH
63326: LD_INT 103
63328: PUSH
63329: LD_INT 104
63331: PUSH
63332: LD_INT 105
63334: PUSH
63335: LD_INT 106
63337: PUSH
63338: LD_INT 107
63340: PUSH
63341: LD_INT 108
63343: PUSH
63344: LD_INT 109
63346: PUSH
63347: LD_INT 110
63349: PUSH
63350: LD_INT 111
63352: PUSH
63353: LD_INT 112
63355: PUSH
63356: LD_INT 113
63358: PUSH
63359: LD_INT 114
63361: PUSH
63362: LD_INT 116
63364: PUSH
63365: LD_INT 117
63367: PUSH
63368: LD_INT 118
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: ST_TO_ADDR
63394: GO 64849
63396: LD_INT 13
63398: DOUBLE
63399: EQUAL
63400: IFTRUE 63404
63402: GO 63612
63404: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
63405: LD_ADDR_VAR 0 2
63409: PUSH
63410: LD_INT 1
63412: PUSH
63413: LD_INT 2
63415: PUSH
63416: LD_INT 3
63418: PUSH
63419: LD_INT 4
63421: PUSH
63422: LD_INT 5
63424: PUSH
63425: LD_INT 8
63427: PUSH
63428: LD_INT 9
63430: PUSH
63431: LD_INT 10
63433: PUSH
63434: LD_INT 11
63436: PUSH
63437: LD_INT 12
63439: PUSH
63440: LD_INT 14
63442: PUSH
63443: LD_INT 15
63445: PUSH
63446: LD_INT 16
63448: PUSH
63449: LD_INT 17
63451: PUSH
63452: LD_INT 18
63454: PUSH
63455: LD_INT 19
63457: PUSH
63458: LD_INT 20
63460: PUSH
63461: LD_INT 21
63463: PUSH
63464: LD_INT 22
63466: PUSH
63467: LD_INT 23
63469: PUSH
63470: LD_INT 24
63472: PUSH
63473: LD_INT 25
63475: PUSH
63476: LD_INT 26
63478: PUSH
63479: LD_INT 27
63481: PUSH
63482: LD_INT 28
63484: PUSH
63485: LD_INT 30
63487: PUSH
63488: LD_INT 31
63490: PUSH
63491: LD_INT 32
63493: PUSH
63494: LD_INT 33
63496: PUSH
63497: LD_INT 34
63499: PUSH
63500: LD_INT 36
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 101
63538: PUSH
63539: LD_INT 102
63541: PUSH
63542: LD_INT 103
63544: PUSH
63545: LD_INT 104
63547: PUSH
63548: LD_INT 105
63550: PUSH
63551: LD_INT 106
63553: PUSH
63554: LD_INT 107
63556: PUSH
63557: LD_INT 108
63559: PUSH
63560: LD_INT 109
63562: PUSH
63563: LD_INT 110
63565: PUSH
63566: LD_INT 111
63568: PUSH
63569: LD_INT 112
63571: PUSH
63572: LD_INT 113
63574: PUSH
63575: LD_INT 114
63577: PUSH
63578: LD_INT 116
63580: PUSH
63581: LD_INT 117
63583: PUSH
63584: LD_INT 118
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: ST_TO_ADDR
63610: GO 64849
63612: LD_INT 14
63614: DOUBLE
63615: EQUAL
63616: IFTRUE 63620
63618: GO 63844
63620: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
63621: LD_ADDR_VAR 0 2
63625: PUSH
63626: LD_INT 1
63628: PUSH
63629: LD_INT 2
63631: PUSH
63632: LD_INT 3
63634: PUSH
63635: LD_INT 4
63637: PUSH
63638: LD_INT 5
63640: PUSH
63641: LD_INT 6
63643: PUSH
63644: LD_INT 7
63646: PUSH
63647: LD_INT 8
63649: PUSH
63650: LD_INT 9
63652: PUSH
63653: LD_INT 10
63655: PUSH
63656: LD_INT 11
63658: PUSH
63659: LD_INT 12
63661: PUSH
63662: LD_INT 13
63664: PUSH
63665: LD_INT 14
63667: PUSH
63668: LD_INT 15
63670: PUSH
63671: LD_INT 16
63673: PUSH
63674: LD_INT 17
63676: PUSH
63677: LD_INT 18
63679: PUSH
63680: LD_INT 19
63682: PUSH
63683: LD_INT 20
63685: PUSH
63686: LD_INT 21
63688: PUSH
63689: LD_INT 22
63691: PUSH
63692: LD_INT 23
63694: PUSH
63695: LD_INT 24
63697: PUSH
63698: LD_INT 25
63700: PUSH
63701: LD_INT 26
63703: PUSH
63704: LD_INT 27
63706: PUSH
63707: LD_INT 28
63709: PUSH
63710: LD_INT 29
63712: PUSH
63713: LD_INT 30
63715: PUSH
63716: LD_INT 31
63718: PUSH
63719: LD_INT 32
63721: PUSH
63722: LD_INT 33
63724: PUSH
63725: LD_INT 34
63727: PUSH
63728: LD_INT 36
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 101
63770: PUSH
63771: LD_INT 102
63773: PUSH
63774: LD_INT 103
63776: PUSH
63777: LD_INT 104
63779: PUSH
63780: LD_INT 105
63782: PUSH
63783: LD_INT 106
63785: PUSH
63786: LD_INT 107
63788: PUSH
63789: LD_INT 108
63791: PUSH
63792: LD_INT 109
63794: PUSH
63795: LD_INT 110
63797: PUSH
63798: LD_INT 111
63800: PUSH
63801: LD_INT 112
63803: PUSH
63804: LD_INT 113
63806: PUSH
63807: LD_INT 114
63809: PUSH
63810: LD_INT 116
63812: PUSH
63813: LD_INT 117
63815: PUSH
63816: LD_INT 118
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: LIST
63831: LIST
63832: LIST
63833: LIST
63834: LIST
63835: LIST
63836: LIST
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: ST_TO_ADDR
63842: GO 64849
63844: LD_INT 15
63846: DOUBLE
63847: EQUAL
63848: IFTRUE 63852
63850: GO 64076
63852: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
63853: LD_ADDR_VAR 0 2
63857: PUSH
63858: LD_INT 1
63860: PUSH
63861: LD_INT 2
63863: PUSH
63864: LD_INT 3
63866: PUSH
63867: LD_INT 4
63869: PUSH
63870: LD_INT 5
63872: PUSH
63873: LD_INT 6
63875: PUSH
63876: LD_INT 7
63878: PUSH
63879: LD_INT 8
63881: PUSH
63882: LD_INT 9
63884: PUSH
63885: LD_INT 10
63887: PUSH
63888: LD_INT 11
63890: PUSH
63891: LD_INT 12
63893: PUSH
63894: LD_INT 13
63896: PUSH
63897: LD_INT 14
63899: PUSH
63900: LD_INT 15
63902: PUSH
63903: LD_INT 16
63905: PUSH
63906: LD_INT 17
63908: PUSH
63909: LD_INT 18
63911: PUSH
63912: LD_INT 19
63914: PUSH
63915: LD_INT 20
63917: PUSH
63918: LD_INT 21
63920: PUSH
63921: LD_INT 22
63923: PUSH
63924: LD_INT 23
63926: PUSH
63927: LD_INT 24
63929: PUSH
63930: LD_INT 25
63932: PUSH
63933: LD_INT 26
63935: PUSH
63936: LD_INT 27
63938: PUSH
63939: LD_INT 28
63941: PUSH
63942: LD_INT 29
63944: PUSH
63945: LD_INT 30
63947: PUSH
63948: LD_INT 31
63950: PUSH
63951: LD_INT 32
63953: PUSH
63954: LD_INT 33
63956: PUSH
63957: LD_INT 34
63959: PUSH
63960: LD_INT 36
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 101
64002: PUSH
64003: LD_INT 102
64005: PUSH
64006: LD_INT 103
64008: PUSH
64009: LD_INT 104
64011: PUSH
64012: LD_INT 105
64014: PUSH
64015: LD_INT 106
64017: PUSH
64018: LD_INT 107
64020: PUSH
64021: LD_INT 108
64023: PUSH
64024: LD_INT 109
64026: PUSH
64027: LD_INT 110
64029: PUSH
64030: LD_INT 111
64032: PUSH
64033: LD_INT 112
64035: PUSH
64036: LD_INT 113
64038: PUSH
64039: LD_INT 114
64041: PUSH
64042: LD_INT 116
64044: PUSH
64045: LD_INT 117
64047: PUSH
64048: LD_INT 118
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: ST_TO_ADDR
64074: GO 64849
64076: LD_INT 16
64078: DOUBLE
64079: EQUAL
64080: IFTRUE 64084
64082: GO 64220
64084: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
64085: LD_ADDR_VAR 0 2
64089: PUSH
64090: LD_INT 2
64092: PUSH
64093: LD_INT 4
64095: PUSH
64096: LD_INT 5
64098: PUSH
64099: LD_INT 7
64101: PUSH
64102: LD_INT 11
64104: PUSH
64105: LD_INT 12
64107: PUSH
64108: LD_INT 15
64110: PUSH
64111: LD_INT 16
64113: PUSH
64114: LD_INT 20
64116: PUSH
64117: LD_INT 21
64119: PUSH
64120: LD_INT 22
64122: PUSH
64123: LD_INT 23
64125: PUSH
64126: LD_INT 25
64128: PUSH
64129: LD_INT 26
64131: PUSH
64132: LD_INT 30
64134: PUSH
64135: LD_INT 31
64137: PUSH
64138: LD_INT 32
64140: PUSH
64141: LD_INT 33
64143: PUSH
64144: LD_INT 34
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 101
64170: PUSH
64171: LD_INT 102
64173: PUSH
64174: LD_INT 103
64176: PUSH
64177: LD_INT 106
64179: PUSH
64180: LD_INT 108
64182: PUSH
64183: LD_INT 112
64185: PUSH
64186: LD_INT 113
64188: PUSH
64189: LD_INT 114
64191: PUSH
64192: LD_INT 116
64194: PUSH
64195: LD_INT 117
64197: PUSH
64198: LD_INT 118
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: ST_TO_ADDR
64218: GO 64849
64220: LD_INT 17
64222: DOUBLE
64223: EQUAL
64224: IFTRUE 64228
64226: GO 64452
64228: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
64229: LD_ADDR_VAR 0 2
64233: PUSH
64234: LD_INT 1
64236: PUSH
64237: LD_INT 2
64239: PUSH
64240: LD_INT 3
64242: PUSH
64243: LD_INT 4
64245: PUSH
64246: LD_INT 5
64248: PUSH
64249: LD_INT 6
64251: PUSH
64252: LD_INT 7
64254: PUSH
64255: LD_INT 8
64257: PUSH
64258: LD_INT 9
64260: PUSH
64261: LD_INT 10
64263: PUSH
64264: LD_INT 11
64266: PUSH
64267: LD_INT 12
64269: PUSH
64270: LD_INT 13
64272: PUSH
64273: LD_INT 14
64275: PUSH
64276: LD_INT 15
64278: PUSH
64279: LD_INT 16
64281: PUSH
64282: LD_INT 17
64284: PUSH
64285: LD_INT 18
64287: PUSH
64288: LD_INT 19
64290: PUSH
64291: LD_INT 20
64293: PUSH
64294: LD_INT 21
64296: PUSH
64297: LD_INT 22
64299: PUSH
64300: LD_INT 23
64302: PUSH
64303: LD_INT 24
64305: PUSH
64306: LD_INT 25
64308: PUSH
64309: LD_INT 26
64311: PUSH
64312: LD_INT 27
64314: PUSH
64315: LD_INT 28
64317: PUSH
64318: LD_INT 29
64320: PUSH
64321: LD_INT 30
64323: PUSH
64324: LD_INT 31
64326: PUSH
64327: LD_INT 32
64329: PUSH
64330: LD_INT 33
64332: PUSH
64333: LD_INT 34
64335: PUSH
64336: LD_INT 36
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 101
64378: PUSH
64379: LD_INT 102
64381: PUSH
64382: LD_INT 103
64384: PUSH
64385: LD_INT 104
64387: PUSH
64388: LD_INT 105
64390: PUSH
64391: LD_INT 106
64393: PUSH
64394: LD_INT 107
64396: PUSH
64397: LD_INT 108
64399: PUSH
64400: LD_INT 109
64402: PUSH
64403: LD_INT 110
64405: PUSH
64406: LD_INT 111
64408: PUSH
64409: LD_INT 112
64411: PUSH
64412: LD_INT 113
64414: PUSH
64415: LD_INT 114
64417: PUSH
64418: LD_INT 116
64420: PUSH
64421: LD_INT 117
64423: PUSH
64424: LD_INT 118
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: ST_TO_ADDR
64450: GO 64849
64452: LD_INT 18
64454: DOUBLE
64455: EQUAL
64456: IFTRUE 64460
64458: GO 64608
64460: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
64461: LD_ADDR_VAR 0 2
64465: PUSH
64466: LD_INT 2
64468: PUSH
64469: LD_INT 4
64471: PUSH
64472: LD_INT 5
64474: PUSH
64475: LD_INT 7
64477: PUSH
64478: LD_INT 11
64480: PUSH
64481: LD_INT 12
64483: PUSH
64484: LD_INT 15
64486: PUSH
64487: LD_INT 16
64489: PUSH
64490: LD_INT 20
64492: PUSH
64493: LD_INT 21
64495: PUSH
64496: LD_INT 22
64498: PUSH
64499: LD_INT 23
64501: PUSH
64502: LD_INT 25
64504: PUSH
64505: LD_INT 26
64507: PUSH
64508: LD_INT 30
64510: PUSH
64511: LD_INT 31
64513: PUSH
64514: LD_INT 32
64516: PUSH
64517: LD_INT 33
64519: PUSH
64520: LD_INT 34
64522: PUSH
64523: LD_INT 35
64525: PUSH
64526: LD_INT 36
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 101
64554: PUSH
64555: LD_INT 102
64557: PUSH
64558: LD_INT 103
64560: PUSH
64561: LD_INT 106
64563: PUSH
64564: LD_INT 108
64566: PUSH
64567: LD_INT 112
64569: PUSH
64570: LD_INT 113
64572: PUSH
64573: LD_INT 114
64575: PUSH
64576: LD_INT 115
64578: PUSH
64579: LD_INT 116
64581: PUSH
64582: LD_INT 117
64584: PUSH
64585: LD_INT 118
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: ST_TO_ADDR
64606: GO 64849
64608: LD_INT 19
64610: DOUBLE
64611: EQUAL
64612: IFTRUE 64616
64614: GO 64848
64616: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
64617: LD_ADDR_VAR 0 2
64621: PUSH
64622: LD_INT 1
64624: PUSH
64625: LD_INT 2
64627: PUSH
64628: LD_INT 3
64630: PUSH
64631: LD_INT 4
64633: PUSH
64634: LD_INT 5
64636: PUSH
64637: LD_INT 6
64639: PUSH
64640: LD_INT 7
64642: PUSH
64643: LD_INT 8
64645: PUSH
64646: LD_INT 9
64648: PUSH
64649: LD_INT 10
64651: PUSH
64652: LD_INT 11
64654: PUSH
64655: LD_INT 12
64657: PUSH
64658: LD_INT 13
64660: PUSH
64661: LD_INT 14
64663: PUSH
64664: LD_INT 15
64666: PUSH
64667: LD_INT 16
64669: PUSH
64670: LD_INT 17
64672: PUSH
64673: LD_INT 18
64675: PUSH
64676: LD_INT 19
64678: PUSH
64679: LD_INT 20
64681: PUSH
64682: LD_INT 21
64684: PUSH
64685: LD_INT 22
64687: PUSH
64688: LD_INT 23
64690: PUSH
64691: LD_INT 24
64693: PUSH
64694: LD_INT 25
64696: PUSH
64697: LD_INT 26
64699: PUSH
64700: LD_INT 27
64702: PUSH
64703: LD_INT 28
64705: PUSH
64706: LD_INT 29
64708: PUSH
64709: LD_INT 30
64711: PUSH
64712: LD_INT 31
64714: PUSH
64715: LD_INT 32
64717: PUSH
64718: LD_INT 33
64720: PUSH
64721: LD_INT 34
64723: PUSH
64724: LD_INT 35
64726: PUSH
64727: LD_INT 36
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: PUSH
64768: LD_INT 101
64770: PUSH
64771: LD_INT 102
64773: PUSH
64774: LD_INT 103
64776: PUSH
64777: LD_INT 104
64779: PUSH
64780: LD_INT 105
64782: PUSH
64783: LD_INT 106
64785: PUSH
64786: LD_INT 107
64788: PUSH
64789: LD_INT 108
64791: PUSH
64792: LD_INT 109
64794: PUSH
64795: LD_INT 110
64797: PUSH
64798: LD_INT 111
64800: PUSH
64801: LD_INT 112
64803: PUSH
64804: LD_INT 113
64806: PUSH
64807: LD_INT 114
64809: PUSH
64810: LD_INT 115
64812: PUSH
64813: LD_INT 116
64815: PUSH
64816: LD_INT 117
64818: PUSH
64819: LD_INT 118
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: LIST
64835: LIST
64836: LIST
64837: LIST
64838: LIST
64839: LIST
64840: LIST
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: ST_TO_ADDR
64846: GO 64849
64848: POP
// end else
64849: GO 65080
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
64851: LD_ADDR_VAR 0 2
64855: PUSH
64856: LD_INT 1
64858: PUSH
64859: LD_INT 2
64861: PUSH
64862: LD_INT 3
64864: PUSH
64865: LD_INT 4
64867: PUSH
64868: LD_INT 5
64870: PUSH
64871: LD_INT 6
64873: PUSH
64874: LD_INT 7
64876: PUSH
64877: LD_INT 8
64879: PUSH
64880: LD_INT 9
64882: PUSH
64883: LD_INT 10
64885: PUSH
64886: LD_INT 11
64888: PUSH
64889: LD_INT 12
64891: PUSH
64892: LD_INT 13
64894: PUSH
64895: LD_INT 14
64897: PUSH
64898: LD_INT 15
64900: PUSH
64901: LD_INT 16
64903: PUSH
64904: LD_INT 17
64906: PUSH
64907: LD_INT 18
64909: PUSH
64910: LD_INT 19
64912: PUSH
64913: LD_INT 20
64915: PUSH
64916: LD_INT 21
64918: PUSH
64919: LD_INT 22
64921: PUSH
64922: LD_INT 23
64924: PUSH
64925: LD_INT 24
64927: PUSH
64928: LD_INT 25
64930: PUSH
64931: LD_INT 26
64933: PUSH
64934: LD_INT 27
64936: PUSH
64937: LD_INT 28
64939: PUSH
64940: LD_INT 29
64942: PUSH
64943: LD_INT 30
64945: PUSH
64946: LD_INT 31
64948: PUSH
64949: LD_INT 32
64951: PUSH
64952: LD_INT 33
64954: PUSH
64955: LD_INT 34
64957: PUSH
64958: LD_INT 35
64960: PUSH
64961: LD_INT 36
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: PUSH
65002: LD_INT 101
65004: PUSH
65005: LD_INT 102
65007: PUSH
65008: LD_INT 103
65010: PUSH
65011: LD_INT 104
65013: PUSH
65014: LD_INT 105
65016: PUSH
65017: LD_INT 106
65019: PUSH
65020: LD_INT 107
65022: PUSH
65023: LD_INT 108
65025: PUSH
65026: LD_INT 109
65028: PUSH
65029: LD_INT 110
65031: PUSH
65032: LD_INT 111
65034: PUSH
65035: LD_INT 112
65037: PUSH
65038: LD_INT 113
65040: PUSH
65041: LD_INT 114
65043: PUSH
65044: LD_INT 115
65046: PUSH
65047: LD_INT 116
65049: PUSH
65050: LD_INT 117
65052: PUSH
65053: LD_INT 118
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: ST_TO_ADDR
// if result then
65080: LD_VAR 0 2
65084: IFFALSE 65870
// begin normal :=  ;
65086: LD_ADDR_VAR 0 5
65090: PUSH
65091: LD_STRING 
65093: ST_TO_ADDR
// hardcore :=  ;
65094: LD_ADDR_VAR 0 6
65098: PUSH
65099: LD_STRING 
65101: ST_TO_ADDR
// active :=  ;
65102: LD_ADDR_VAR 0 7
65106: PUSH
65107: LD_STRING 
65109: ST_TO_ADDR
// for i = 1 to normalCounter do
65110: LD_ADDR_VAR 0 8
65114: PUSH
65115: DOUBLE
65116: LD_INT 1
65118: DEC
65119: ST_TO_ADDR
65120: LD_EXP 44
65124: PUSH
65125: FOR_TO
65126: IFFALSE 65227
// begin tmp := 0 ;
65128: LD_ADDR_VAR 0 3
65132: PUSH
65133: LD_STRING 0
65135: ST_TO_ADDR
// if result [ 1 ] then
65136: LD_VAR 0 2
65140: PUSH
65141: LD_INT 1
65143: ARRAY
65144: IFFALSE 65209
// if result [ 1 ] [ 1 ] = i then
65146: LD_VAR 0 2
65150: PUSH
65151: LD_INT 1
65153: ARRAY
65154: PUSH
65155: LD_INT 1
65157: ARRAY
65158: PUSH
65159: LD_VAR 0 8
65163: EQUAL
65164: IFFALSE 65209
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
65166: LD_ADDR_VAR 0 2
65170: PUSH
65171: LD_VAR 0 2
65175: PPUSH
65176: LD_INT 1
65178: PPUSH
65179: LD_VAR 0 2
65183: PUSH
65184: LD_INT 1
65186: ARRAY
65187: PPUSH
65188: LD_INT 1
65190: PPUSH
65191: CALL_OW 3
65195: PPUSH
65196: CALL_OW 1
65200: ST_TO_ADDR
// tmp := 1 ;
65201: LD_ADDR_VAR 0 3
65205: PUSH
65206: LD_STRING 1
65208: ST_TO_ADDR
// end ; normal := normal & tmp ;
65209: LD_ADDR_VAR 0 5
65213: PUSH
65214: LD_VAR 0 5
65218: PUSH
65219: LD_VAR 0 3
65223: STR
65224: ST_TO_ADDR
// end ;
65225: GO 65125
65227: POP
65228: POP
// for i = 1 to hardcoreCounter do
65229: LD_ADDR_VAR 0 8
65233: PUSH
65234: DOUBLE
65235: LD_INT 1
65237: DEC
65238: ST_TO_ADDR
65239: LD_EXP 45
65243: PUSH
65244: FOR_TO
65245: IFFALSE 65350
// begin tmp := 0 ;
65247: LD_ADDR_VAR 0 3
65251: PUSH
65252: LD_STRING 0
65254: ST_TO_ADDR
// if result [ 2 ] then
65255: LD_VAR 0 2
65259: PUSH
65260: LD_INT 2
65262: ARRAY
65263: IFFALSE 65332
// if result [ 2 ] [ 1 ] = 100 + i then
65265: LD_VAR 0 2
65269: PUSH
65270: LD_INT 2
65272: ARRAY
65273: PUSH
65274: LD_INT 1
65276: ARRAY
65277: PUSH
65278: LD_INT 100
65280: PUSH
65281: LD_VAR 0 8
65285: PLUS
65286: EQUAL
65287: IFFALSE 65332
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
65289: LD_ADDR_VAR 0 2
65293: PUSH
65294: LD_VAR 0 2
65298: PPUSH
65299: LD_INT 2
65301: PPUSH
65302: LD_VAR 0 2
65306: PUSH
65307: LD_INT 2
65309: ARRAY
65310: PPUSH
65311: LD_INT 1
65313: PPUSH
65314: CALL_OW 3
65318: PPUSH
65319: CALL_OW 1
65323: ST_TO_ADDR
// tmp := 1 ;
65324: LD_ADDR_VAR 0 3
65328: PUSH
65329: LD_STRING 1
65331: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
65332: LD_ADDR_VAR 0 6
65336: PUSH
65337: LD_VAR 0 6
65341: PUSH
65342: LD_VAR 0 3
65346: STR
65347: ST_TO_ADDR
// end ;
65348: GO 65244
65350: POP
65351: POP
// if isGameLoad then
65352: LD_VAR 0 1
65356: IFFALSE 65831
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
65358: LD_ADDR_VAR 0 4
65362: PUSH
65363: LD_EXP 48
65367: PUSH
65368: LD_EXP 47
65372: PUSH
65373: LD_EXP 49
65377: PUSH
65378: LD_EXP 46
65382: PUSH
65383: LD_EXP 50
65387: PUSH
65388: LD_EXP 51
65392: PUSH
65393: LD_EXP 52
65397: PUSH
65398: LD_EXP 53
65402: PUSH
65403: LD_EXP 54
65407: PUSH
65408: LD_EXP 55
65412: PUSH
65413: LD_EXP 56
65417: PUSH
65418: LD_EXP 57
65422: PUSH
65423: LD_EXP 58
65427: PUSH
65428: LD_EXP 59
65432: PUSH
65433: LD_EXP 67
65437: PUSH
65438: LD_EXP 68
65442: PUSH
65443: LD_EXP 69
65447: PUSH
65448: LD_EXP 70
65452: PUSH
65453: LD_EXP 72
65457: PUSH
65458: LD_EXP 73
65462: PUSH
65463: LD_EXP 74
65467: PUSH
65468: LD_EXP 77
65472: PUSH
65473: LD_EXP 79
65477: PUSH
65478: LD_EXP 80
65482: PUSH
65483: LD_EXP 81
65487: PUSH
65488: LD_EXP 83
65492: PUSH
65493: LD_EXP 84
65497: PUSH
65498: LD_EXP 87
65502: PUSH
65503: LD_EXP 88
65507: PUSH
65508: LD_EXP 89
65512: PUSH
65513: LD_EXP 90
65517: PUSH
65518: LD_EXP 91
65522: PUSH
65523: LD_EXP 92
65527: PUSH
65528: LD_EXP 93
65532: PUSH
65533: LD_EXP 94
65537: PUSH
65538: LD_EXP 95
65542: PUSH
65543: LD_EXP 60
65547: PUSH
65548: LD_EXP 61
65552: PUSH
65553: LD_EXP 64
65557: PUSH
65558: LD_EXP 65
65562: PUSH
65563: LD_EXP 66
65567: PUSH
65568: LD_EXP 62
65572: PUSH
65573: LD_EXP 63
65577: PUSH
65578: LD_EXP 71
65582: PUSH
65583: LD_EXP 75
65587: PUSH
65588: LD_EXP 76
65592: PUSH
65593: LD_EXP 78
65597: PUSH
65598: LD_EXP 82
65602: PUSH
65603: LD_EXP 85
65607: PUSH
65608: LD_EXP 86
65612: PUSH
65613: LD_EXP 96
65617: PUSH
65618: LD_EXP 97
65622: PUSH
65623: LD_EXP 98
65627: PUSH
65628: LD_EXP 99
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: ST_TO_ADDR
// tmp :=  ;
65689: LD_ADDR_VAR 0 3
65693: PUSH
65694: LD_STRING 
65696: ST_TO_ADDR
// for i = 1 to normalCounter do
65697: LD_ADDR_VAR 0 8
65701: PUSH
65702: DOUBLE
65703: LD_INT 1
65705: DEC
65706: ST_TO_ADDR
65707: LD_EXP 44
65711: PUSH
65712: FOR_TO
65713: IFFALSE 65749
// begin if flags [ i ] then
65715: LD_VAR 0 4
65719: PUSH
65720: LD_VAR 0 8
65724: ARRAY
65725: IFFALSE 65747
// tmp := tmp & i & ; ;
65727: LD_ADDR_VAR 0 3
65731: PUSH
65732: LD_VAR 0 3
65736: PUSH
65737: LD_VAR 0 8
65741: STR
65742: PUSH
65743: LD_STRING ;
65745: STR
65746: ST_TO_ADDR
// end ;
65747: GO 65712
65749: POP
65750: POP
// for i = 1 to hardcoreCounter do
65751: LD_ADDR_VAR 0 8
65755: PUSH
65756: DOUBLE
65757: LD_INT 1
65759: DEC
65760: ST_TO_ADDR
65761: LD_EXP 45
65765: PUSH
65766: FOR_TO
65767: IFFALSE 65813
// begin if flags [ normalCounter + i ] then
65769: LD_VAR 0 4
65773: PUSH
65774: LD_EXP 44
65778: PUSH
65779: LD_VAR 0 8
65783: PLUS
65784: ARRAY
65785: IFFALSE 65811
// tmp := tmp & ( 100 + i ) & ; ;
65787: LD_ADDR_VAR 0 3
65791: PUSH
65792: LD_VAR 0 3
65796: PUSH
65797: LD_INT 100
65799: PUSH
65800: LD_VAR 0 8
65804: PLUS
65805: STR
65806: PUSH
65807: LD_STRING ;
65809: STR
65810: ST_TO_ADDR
// end ;
65811: GO 65766
65813: POP
65814: POP
// if tmp then
65815: LD_VAR 0 3
65819: IFFALSE 65831
// active := tmp ;
65821: LD_ADDR_VAR 0 7
65825: PUSH
65826: LD_VAR 0 3
65830: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
65831: LD_STRING getStreamItemsFromMission("
65833: PUSH
65834: LD_VAR 0 5
65838: STR
65839: PUSH
65840: LD_STRING ","
65842: STR
65843: PUSH
65844: LD_VAR 0 6
65848: STR
65849: PUSH
65850: LD_STRING ","
65852: STR
65853: PUSH
65854: LD_VAR 0 7
65858: STR
65859: PUSH
65860: LD_STRING ")
65862: STR
65863: PPUSH
65864: CALL_OW 559
// end else
65868: GO 65877
// ToLua ( getStreamItemsFromMission("","","") ) ;
65870: LD_STRING getStreamItemsFromMission("","","")
65872: PPUSH
65873: CALL_OW 559
// end ;
65877: LD_VAR 0 2
65881: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
65882: LD_EXP 43
65886: PUSH
65887: LD_EXP 48
65891: AND
65892: IFFALSE 66016
65894: GO 65896
65896: DISABLE
65897: LD_INT 0
65899: PPUSH
65900: PPUSH
// begin enable ;
65901: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
65902: LD_ADDR_VAR 0 2
65906: PUSH
65907: LD_INT 22
65909: PUSH
65910: LD_OWVAR 2
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: LD_INT 2
65921: PUSH
65922: LD_INT 34
65924: PUSH
65925: LD_INT 7
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: LD_INT 34
65934: PUSH
65935: LD_INT 45
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: LD_INT 34
65944: PUSH
65945: LD_INT 28
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: LD_INT 34
65954: PUSH
65955: LD_INT 47
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PPUSH
65973: CALL_OW 69
65977: ST_TO_ADDR
// if not tmp then
65978: LD_VAR 0 2
65982: NOT
65983: IFFALSE 65987
// exit ;
65985: GO 66016
// for i in tmp do
65987: LD_ADDR_VAR 0 1
65991: PUSH
65992: LD_VAR 0 2
65996: PUSH
65997: FOR_IN
65998: IFFALSE 66014
// begin SetLives ( i , 0 ) ;
66000: LD_VAR 0 1
66004: PPUSH
66005: LD_INT 0
66007: PPUSH
66008: CALL_OW 234
// end ;
66012: GO 65997
66014: POP
66015: POP
// end ;
66016: PPOPN 2
66018: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
66019: LD_EXP 43
66023: PUSH
66024: LD_EXP 49
66028: AND
66029: IFFALSE 66113
66031: GO 66033
66033: DISABLE
66034: LD_INT 0
66036: PPUSH
66037: PPUSH
// begin enable ;
66038: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
66039: LD_ADDR_VAR 0 2
66043: PUSH
66044: LD_INT 22
66046: PUSH
66047: LD_OWVAR 2
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 32
66058: PUSH
66059: LD_INT 3
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PPUSH
66070: CALL_OW 69
66074: ST_TO_ADDR
// if not tmp then
66075: LD_VAR 0 2
66079: NOT
66080: IFFALSE 66084
// exit ;
66082: GO 66113
// for i in tmp do
66084: LD_ADDR_VAR 0 1
66088: PUSH
66089: LD_VAR 0 2
66093: PUSH
66094: FOR_IN
66095: IFFALSE 66111
// begin SetLives ( i , 0 ) ;
66097: LD_VAR 0 1
66101: PPUSH
66102: LD_INT 0
66104: PPUSH
66105: CALL_OW 234
// end ;
66109: GO 66094
66111: POP
66112: POP
// end ;
66113: PPOPN 2
66115: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
66116: LD_EXP 43
66120: PUSH
66121: LD_EXP 46
66125: AND
66126: IFFALSE 66219
66128: GO 66130
66130: DISABLE
66131: LD_INT 0
66133: PPUSH
// begin enable ;
66134: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
66135: LD_ADDR_VAR 0 1
66139: PUSH
66140: LD_INT 22
66142: PUSH
66143: LD_OWVAR 2
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: LD_INT 2
66154: PUSH
66155: LD_INT 25
66157: PUSH
66158: LD_INT 5
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 25
66167: PUSH
66168: LD_INT 9
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: PUSH
66175: LD_INT 25
66177: PUSH
66178: LD_INT 8
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PPUSH
66195: CALL_OW 69
66199: PUSH
66200: FOR_IN
66201: IFFALSE 66217
// begin SetClass ( i , 1 ) ;
66203: LD_VAR 0 1
66207: PPUSH
66208: LD_INT 1
66210: PPUSH
66211: CALL_OW 336
// end ;
66215: GO 66200
66217: POP
66218: POP
// end ;
66219: PPOPN 1
66221: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
66222: LD_EXP 43
66226: PUSH
66227: LD_EXP 47
66231: AND
66232: PUSH
66233: LD_OWVAR 65
66237: PUSH
66238: LD_INT 7
66240: LESS
66241: AND
66242: IFFALSE 66256
66244: GO 66246
66246: DISABLE
// begin enable ;
66247: ENABLE
// game_speed := 7 ;
66248: LD_ADDR_OWVAR 65
66252: PUSH
66253: LD_INT 7
66255: ST_TO_ADDR
// end ;
66256: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
66257: LD_EXP 43
66261: PUSH
66262: LD_EXP 50
66266: AND
66267: IFFALSE 66469
66269: GO 66271
66271: DISABLE
66272: LD_INT 0
66274: PPUSH
66275: PPUSH
66276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
66277: LD_ADDR_VAR 0 3
66281: PUSH
66282: LD_INT 81
66284: PUSH
66285: LD_OWVAR 2
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 21
66296: PUSH
66297: LD_INT 1
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PPUSH
66308: CALL_OW 69
66312: ST_TO_ADDR
// if not tmp then
66313: LD_VAR 0 3
66317: NOT
66318: IFFALSE 66322
// exit ;
66320: GO 66469
// if tmp > 5 then
66322: LD_VAR 0 3
66326: PUSH
66327: LD_INT 5
66329: GREATER
66330: IFFALSE 66342
// k := 5 else
66332: LD_ADDR_VAR 0 2
66336: PUSH
66337: LD_INT 5
66339: ST_TO_ADDR
66340: GO 66352
// k := tmp ;
66342: LD_ADDR_VAR 0 2
66346: PUSH
66347: LD_VAR 0 3
66351: ST_TO_ADDR
// for i := 1 to k do
66352: LD_ADDR_VAR 0 1
66356: PUSH
66357: DOUBLE
66358: LD_INT 1
66360: DEC
66361: ST_TO_ADDR
66362: LD_VAR 0 2
66366: PUSH
66367: FOR_TO
66368: IFFALSE 66467
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
66370: LD_VAR 0 3
66374: PUSH
66375: LD_VAR 0 1
66379: ARRAY
66380: PPUSH
66381: LD_VAR 0 1
66385: PUSH
66386: LD_INT 4
66388: MOD
66389: PUSH
66390: LD_INT 1
66392: PLUS
66393: PPUSH
66394: CALL_OW 259
66398: PUSH
66399: LD_INT 10
66401: LESS
66402: IFFALSE 66465
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
66404: LD_VAR 0 3
66408: PUSH
66409: LD_VAR 0 1
66413: ARRAY
66414: PPUSH
66415: LD_VAR 0 1
66419: PUSH
66420: LD_INT 4
66422: MOD
66423: PUSH
66424: LD_INT 1
66426: PLUS
66427: PPUSH
66428: LD_VAR 0 3
66432: PUSH
66433: LD_VAR 0 1
66437: ARRAY
66438: PPUSH
66439: LD_VAR 0 1
66443: PUSH
66444: LD_INT 4
66446: MOD
66447: PUSH
66448: LD_INT 1
66450: PLUS
66451: PPUSH
66452: CALL_OW 259
66456: PUSH
66457: LD_INT 1
66459: PLUS
66460: PPUSH
66461: CALL_OW 237
66465: GO 66367
66467: POP
66468: POP
// end ;
66469: PPOPN 3
66471: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
66472: LD_EXP 43
66476: PUSH
66477: LD_EXP 51
66481: AND
66482: IFFALSE 66502
66484: GO 66486
66486: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
66487: LD_INT 4
66489: PPUSH
66490: LD_OWVAR 2
66494: PPUSH
66495: LD_INT 0
66497: PPUSH
66498: CALL_OW 324
66502: END
// every 0 0$1 trigger StreamModeActive and sShovel do
66503: LD_EXP 43
66507: PUSH
66508: LD_EXP 80
66512: AND
66513: IFFALSE 66533
66515: GO 66517
66517: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
66518: LD_INT 19
66520: PPUSH
66521: LD_OWVAR 2
66525: PPUSH
66526: LD_INT 0
66528: PPUSH
66529: CALL_OW 324
66533: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
66534: LD_EXP 43
66538: PUSH
66539: LD_EXP 52
66543: AND
66544: IFFALSE 66646
66546: GO 66548
66548: DISABLE
66549: LD_INT 0
66551: PPUSH
66552: PPUSH
// begin enable ;
66553: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
66554: LD_ADDR_VAR 0 2
66558: PUSH
66559: LD_INT 22
66561: PUSH
66562: LD_OWVAR 2
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 2
66573: PUSH
66574: LD_INT 34
66576: PUSH
66577: LD_INT 11
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: LD_INT 34
66586: PUSH
66587: LD_INT 30
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: LIST
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PPUSH
66603: CALL_OW 69
66607: ST_TO_ADDR
// if not tmp then
66608: LD_VAR 0 2
66612: NOT
66613: IFFALSE 66617
// exit ;
66615: GO 66646
// for i in tmp do
66617: LD_ADDR_VAR 0 1
66621: PUSH
66622: LD_VAR 0 2
66626: PUSH
66627: FOR_IN
66628: IFFALSE 66644
// begin SetLives ( i , 0 ) ;
66630: LD_VAR 0 1
66634: PPUSH
66635: LD_INT 0
66637: PPUSH
66638: CALL_OW 234
// end ;
66642: GO 66627
66644: POP
66645: POP
// end ;
66646: PPOPN 2
66648: END
// every 0 0$1 trigger StreamModeActive and sBunker do
66649: LD_EXP 43
66653: PUSH
66654: LD_EXP 53
66658: AND
66659: IFFALSE 66679
66661: GO 66663
66663: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
66664: LD_INT 32
66666: PPUSH
66667: LD_OWVAR 2
66671: PPUSH
66672: LD_INT 0
66674: PPUSH
66675: CALL_OW 324
66679: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
66680: LD_EXP 43
66684: PUSH
66685: LD_EXP 54
66689: AND
66690: IFFALSE 66871
66692: GO 66694
66694: DISABLE
66695: LD_INT 0
66697: PPUSH
66698: PPUSH
66699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
66700: LD_ADDR_VAR 0 2
66704: PUSH
66705: LD_INT 22
66707: PUSH
66708: LD_OWVAR 2
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: PUSH
66717: LD_INT 33
66719: PUSH
66720: LD_INT 3
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PPUSH
66731: CALL_OW 69
66735: ST_TO_ADDR
// if not tmp then
66736: LD_VAR 0 2
66740: NOT
66741: IFFALSE 66745
// exit ;
66743: GO 66871
// side := 0 ;
66745: LD_ADDR_VAR 0 3
66749: PUSH
66750: LD_INT 0
66752: ST_TO_ADDR
// for i := 1 to 8 do
66753: LD_ADDR_VAR 0 1
66757: PUSH
66758: DOUBLE
66759: LD_INT 1
66761: DEC
66762: ST_TO_ADDR
66763: LD_INT 8
66765: PUSH
66766: FOR_TO
66767: IFFALSE 66815
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
66769: LD_OWVAR 2
66773: PUSH
66774: LD_VAR 0 1
66778: NONEQUAL
66779: PUSH
66780: LD_OWVAR 2
66784: PPUSH
66785: LD_VAR 0 1
66789: PPUSH
66790: CALL_OW 81
66794: PUSH
66795: LD_INT 2
66797: EQUAL
66798: AND
66799: IFFALSE 66813
// begin side := i ;
66801: LD_ADDR_VAR 0 3
66805: PUSH
66806: LD_VAR 0 1
66810: ST_TO_ADDR
// break ;
66811: GO 66815
// end ;
66813: GO 66766
66815: POP
66816: POP
// if not side then
66817: LD_VAR 0 3
66821: NOT
66822: IFFALSE 66826
// exit ;
66824: GO 66871
// for i := 1 to tmp do
66826: LD_ADDR_VAR 0 1
66830: PUSH
66831: DOUBLE
66832: LD_INT 1
66834: DEC
66835: ST_TO_ADDR
66836: LD_VAR 0 2
66840: PUSH
66841: FOR_TO
66842: IFFALSE 66869
// if Prob ( 60 ) then
66844: LD_INT 60
66846: PPUSH
66847: CALL_OW 13
66851: IFFALSE 66867
// SetSide ( i , side ) ;
66853: LD_VAR 0 1
66857: PPUSH
66858: LD_VAR 0 3
66862: PPUSH
66863: CALL_OW 235
66867: GO 66841
66869: POP
66870: POP
// end ;
66871: PPOPN 3
66873: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
66874: LD_EXP 43
66878: PUSH
66879: LD_EXP 56
66883: AND
66884: IFFALSE 67003
66886: GO 66888
66888: DISABLE
66889: LD_INT 0
66891: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
66892: LD_ADDR_VAR 0 1
66896: PUSH
66897: LD_INT 22
66899: PUSH
66900: LD_OWVAR 2
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 21
66911: PUSH
66912: LD_INT 1
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 3
66921: PUSH
66922: LD_INT 23
66924: PUSH
66925: LD_INT 0
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: LIST
66940: PPUSH
66941: CALL_OW 69
66945: PUSH
66946: FOR_IN
66947: IFFALSE 67001
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
66949: LD_VAR 0 1
66953: PPUSH
66954: CALL_OW 257
66958: PUSH
66959: LD_INT 1
66961: PUSH
66962: LD_INT 2
66964: PUSH
66965: LD_INT 3
66967: PUSH
66968: LD_INT 4
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: LIST
66975: LIST
66976: IN
66977: IFFALSE 66999
// SetClass ( un , rand ( 1 , 4 ) ) ;
66979: LD_VAR 0 1
66983: PPUSH
66984: LD_INT 1
66986: PPUSH
66987: LD_INT 4
66989: PPUSH
66990: CALL_OW 12
66994: PPUSH
66995: CALL_OW 336
66999: GO 66946
67001: POP
67002: POP
// end ;
67003: PPOPN 1
67005: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
67006: LD_EXP 43
67010: PUSH
67011: LD_EXP 55
67015: AND
67016: IFFALSE 67095
67018: GO 67020
67020: DISABLE
67021: LD_INT 0
67023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
67024: LD_ADDR_VAR 0 1
67028: PUSH
67029: LD_INT 22
67031: PUSH
67032: LD_OWVAR 2
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PUSH
67041: LD_INT 21
67043: PUSH
67044: LD_INT 3
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: EMPTY
67052: LIST
67053: LIST
67054: PPUSH
67055: CALL_OW 69
67059: ST_TO_ADDR
// if not tmp then
67060: LD_VAR 0 1
67064: NOT
67065: IFFALSE 67069
// exit ;
67067: GO 67095
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
67069: LD_VAR 0 1
67073: PUSH
67074: LD_INT 1
67076: PPUSH
67077: LD_VAR 0 1
67081: PPUSH
67082: CALL_OW 12
67086: ARRAY
67087: PPUSH
67088: LD_INT 100
67090: PPUSH
67091: CALL_OW 234
// end ;
67095: PPOPN 1
67097: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
67098: LD_EXP 43
67102: PUSH
67103: LD_EXP 57
67107: AND
67108: IFFALSE 67206
67110: GO 67112
67112: DISABLE
67113: LD_INT 0
67115: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67116: LD_ADDR_VAR 0 1
67120: PUSH
67121: LD_INT 22
67123: PUSH
67124: LD_OWVAR 2
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: LD_INT 21
67135: PUSH
67136: LD_INT 1
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PPUSH
67147: CALL_OW 69
67151: ST_TO_ADDR
// if not tmp then
67152: LD_VAR 0 1
67156: NOT
67157: IFFALSE 67161
// exit ;
67159: GO 67206
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
67161: LD_VAR 0 1
67165: PUSH
67166: LD_INT 1
67168: PPUSH
67169: LD_VAR 0 1
67173: PPUSH
67174: CALL_OW 12
67178: ARRAY
67179: PPUSH
67180: LD_INT 1
67182: PPUSH
67183: LD_INT 4
67185: PPUSH
67186: CALL_OW 12
67190: PPUSH
67191: LD_INT 3000
67193: PPUSH
67194: LD_INT 9000
67196: PPUSH
67197: CALL_OW 12
67201: PPUSH
67202: CALL_OW 492
// end ;
67206: PPOPN 1
67208: END
// every 0 0$1 trigger StreamModeActive and sDepot do
67209: LD_EXP 43
67213: PUSH
67214: LD_EXP 58
67218: AND
67219: IFFALSE 67239
67221: GO 67223
67223: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
67224: LD_INT 1
67226: PPUSH
67227: LD_OWVAR 2
67231: PPUSH
67232: LD_INT 0
67234: PPUSH
67235: CALL_OW 324
67239: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
67240: LD_EXP 43
67244: PUSH
67245: LD_EXP 59
67249: AND
67250: IFFALSE 67333
67252: GO 67254
67254: DISABLE
67255: LD_INT 0
67257: PPUSH
67258: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
67259: LD_ADDR_VAR 0 2
67263: PUSH
67264: LD_INT 22
67266: PUSH
67267: LD_OWVAR 2
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 21
67278: PUSH
67279: LD_INT 3
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: PPUSH
67290: CALL_OW 69
67294: ST_TO_ADDR
// if not tmp then
67295: LD_VAR 0 2
67299: NOT
67300: IFFALSE 67304
// exit ;
67302: GO 67333
// for i in tmp do
67304: LD_ADDR_VAR 0 1
67308: PUSH
67309: LD_VAR 0 2
67313: PUSH
67314: FOR_IN
67315: IFFALSE 67331
// SetBLevel ( i , 10 ) ;
67317: LD_VAR 0 1
67321: PPUSH
67322: LD_INT 10
67324: PPUSH
67325: CALL_OW 241
67329: GO 67314
67331: POP
67332: POP
// end ;
67333: PPOPN 2
67335: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
67336: LD_EXP 43
67340: PUSH
67341: LD_EXP 60
67345: AND
67346: IFFALSE 67457
67348: GO 67350
67350: DISABLE
67351: LD_INT 0
67353: PPUSH
67354: PPUSH
67355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67356: LD_ADDR_VAR 0 3
67360: PUSH
67361: LD_INT 22
67363: PUSH
67364: LD_OWVAR 2
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: PUSH
67373: LD_INT 25
67375: PUSH
67376: LD_INT 1
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PPUSH
67387: CALL_OW 69
67391: ST_TO_ADDR
// if not tmp then
67392: LD_VAR 0 3
67396: NOT
67397: IFFALSE 67401
// exit ;
67399: GO 67457
// un := tmp [ rand ( 1 , tmp ) ] ;
67401: LD_ADDR_VAR 0 2
67405: PUSH
67406: LD_VAR 0 3
67410: PUSH
67411: LD_INT 1
67413: PPUSH
67414: LD_VAR 0 3
67418: PPUSH
67419: CALL_OW 12
67423: ARRAY
67424: ST_TO_ADDR
// if Crawls ( un ) then
67425: LD_VAR 0 2
67429: PPUSH
67430: CALL_OW 318
67434: IFFALSE 67445
// ComWalk ( un ) ;
67436: LD_VAR 0 2
67440: PPUSH
67441: CALL_OW 138
// SetClass ( un , class_sniper ) ;
67445: LD_VAR 0 2
67449: PPUSH
67450: LD_INT 5
67452: PPUSH
67453: CALL_OW 336
// end ;
67457: PPOPN 3
67459: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
67460: LD_EXP 43
67464: PUSH
67465: LD_EXP 61
67469: AND
67470: PUSH
67471: LD_OWVAR 67
67475: PUSH
67476: LD_INT 4
67478: LESS
67479: AND
67480: IFFALSE 67499
67482: GO 67484
67484: DISABLE
// begin Difficulty := Difficulty + 1 ;
67485: LD_ADDR_OWVAR 67
67489: PUSH
67490: LD_OWVAR 67
67494: PUSH
67495: LD_INT 1
67497: PLUS
67498: ST_TO_ADDR
// end ;
67499: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
67500: LD_EXP 43
67504: PUSH
67505: LD_EXP 62
67509: AND
67510: IFFALSE 67613
67512: GO 67514
67514: DISABLE
67515: LD_INT 0
67517: PPUSH
// begin for i := 1 to 5 do
67518: LD_ADDR_VAR 0 1
67522: PUSH
67523: DOUBLE
67524: LD_INT 1
67526: DEC
67527: ST_TO_ADDR
67528: LD_INT 5
67530: PUSH
67531: FOR_TO
67532: IFFALSE 67611
// begin uc_nation := nation_nature ;
67534: LD_ADDR_OWVAR 21
67538: PUSH
67539: LD_INT 0
67541: ST_TO_ADDR
// uc_side := 0 ;
67542: LD_ADDR_OWVAR 20
67546: PUSH
67547: LD_INT 0
67549: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67550: LD_ADDR_OWVAR 29
67554: PUSH
67555: LD_INT 12
67557: PUSH
67558: LD_INT 12
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: ST_TO_ADDR
// hc_agressivity := 20 ;
67565: LD_ADDR_OWVAR 35
67569: PUSH
67570: LD_INT 20
67572: ST_TO_ADDR
// hc_class := class_tiger ;
67573: LD_ADDR_OWVAR 28
67577: PUSH
67578: LD_INT 14
67580: ST_TO_ADDR
// hc_gallery :=  ;
67581: LD_ADDR_OWVAR 33
67585: PUSH
67586: LD_STRING 
67588: ST_TO_ADDR
// hc_name :=  ;
67589: LD_ADDR_OWVAR 26
67593: PUSH
67594: LD_STRING 
67596: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
67597: CALL_OW 44
67601: PPUSH
67602: LD_INT 0
67604: PPUSH
67605: CALL_OW 51
// end ;
67609: GO 67531
67611: POP
67612: POP
// end ;
67613: PPOPN 1
67615: END
// every 0 0$1 trigger StreamModeActive and sBomb do
67616: LD_EXP 43
67620: PUSH
67621: LD_EXP 63
67625: AND
67626: IFFALSE 67635
67628: GO 67630
67630: DISABLE
// StreamSibBomb ;
67631: CALL 67636 0 0
67635: END
// export function StreamSibBomb ; var i , x , y ; begin
67636: LD_INT 0
67638: PPUSH
67639: PPUSH
67640: PPUSH
67641: PPUSH
// result := false ;
67642: LD_ADDR_VAR 0 1
67646: PUSH
67647: LD_INT 0
67649: ST_TO_ADDR
// for i := 1 to 16 do
67650: LD_ADDR_VAR 0 2
67654: PUSH
67655: DOUBLE
67656: LD_INT 1
67658: DEC
67659: ST_TO_ADDR
67660: LD_INT 16
67662: PUSH
67663: FOR_TO
67664: IFFALSE 67863
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
67666: LD_ADDR_VAR 0 3
67670: PUSH
67671: LD_INT 10
67673: PUSH
67674: LD_INT 20
67676: PUSH
67677: LD_INT 30
67679: PUSH
67680: LD_INT 40
67682: PUSH
67683: LD_INT 50
67685: PUSH
67686: LD_INT 60
67688: PUSH
67689: LD_INT 70
67691: PUSH
67692: LD_INT 80
67694: PUSH
67695: LD_INT 90
67697: PUSH
67698: LD_INT 100
67700: PUSH
67701: LD_INT 110
67703: PUSH
67704: LD_INT 120
67706: PUSH
67707: LD_INT 130
67709: PUSH
67710: LD_INT 140
67712: PUSH
67713: LD_INT 150
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: PUSH
67733: LD_INT 1
67735: PPUSH
67736: LD_INT 15
67738: PPUSH
67739: CALL_OW 12
67743: ARRAY
67744: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
67745: LD_ADDR_VAR 0 4
67749: PUSH
67750: LD_INT 10
67752: PUSH
67753: LD_INT 20
67755: PUSH
67756: LD_INT 30
67758: PUSH
67759: LD_INT 40
67761: PUSH
67762: LD_INT 50
67764: PUSH
67765: LD_INT 60
67767: PUSH
67768: LD_INT 70
67770: PUSH
67771: LD_INT 80
67773: PUSH
67774: LD_INT 90
67776: PUSH
67777: LD_INT 100
67779: PUSH
67780: LD_INT 110
67782: PUSH
67783: LD_INT 120
67785: PUSH
67786: LD_INT 130
67788: PUSH
67789: LD_INT 140
67791: PUSH
67792: LD_INT 150
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: LIST
67799: LIST
67800: LIST
67801: LIST
67802: LIST
67803: LIST
67804: LIST
67805: LIST
67806: LIST
67807: LIST
67808: LIST
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 1
67814: PPUSH
67815: LD_INT 15
67817: PPUSH
67818: CALL_OW 12
67822: ARRAY
67823: ST_TO_ADDR
// if ValidHex ( x , y ) then
67824: LD_VAR 0 3
67828: PPUSH
67829: LD_VAR 0 4
67833: PPUSH
67834: CALL_OW 488
67838: IFFALSE 67861
// begin result := [ x , y ] ;
67840: LD_ADDR_VAR 0 1
67844: PUSH
67845: LD_VAR 0 3
67849: PUSH
67850: LD_VAR 0 4
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: ST_TO_ADDR
// break ;
67859: GO 67863
// end ; end ;
67861: GO 67663
67863: POP
67864: POP
// if result then
67865: LD_VAR 0 1
67869: IFFALSE 67929
// begin ToLua ( playSibBomb() ) ;
67871: LD_STRING playSibBomb()
67873: PPUSH
67874: CALL_OW 559
// wait ( 0 0$14 ) ;
67878: LD_INT 490
67880: PPUSH
67881: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
67885: LD_VAR 0 1
67889: PUSH
67890: LD_INT 1
67892: ARRAY
67893: PPUSH
67894: LD_VAR 0 1
67898: PUSH
67899: LD_INT 2
67901: ARRAY
67902: PPUSH
67903: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
67907: LD_VAR 0 1
67911: PUSH
67912: LD_INT 1
67914: ARRAY
67915: PPUSH
67916: LD_VAR 0 1
67920: PUSH
67921: LD_INT 2
67923: ARRAY
67924: PPUSH
67925: CALL_OW 429
// end ; end ;
67929: LD_VAR 0 1
67933: RET
// every 0 0$1 trigger StreamModeActive and sReset do
67934: LD_EXP 43
67938: PUSH
67939: LD_EXP 65
67943: AND
67944: IFFALSE 67956
67946: GO 67948
67948: DISABLE
// YouLost (  ) ;
67949: LD_STRING 
67951: PPUSH
67952: CALL_OW 104
67956: END
// every 0 0$1 trigger StreamModeActive and sFog do
67957: LD_EXP 43
67961: PUSH
67962: LD_EXP 64
67966: AND
67967: IFFALSE 67981
67969: GO 67971
67971: DISABLE
// FogOff ( your_side ) ;
67972: LD_OWVAR 2
67976: PPUSH
67977: CALL_OW 344
67981: END
// every 0 0$1 trigger StreamModeActive and sSun do
67982: LD_EXP 43
67986: PUSH
67987: LD_EXP 66
67991: AND
67992: IFFALSE 68020
67994: GO 67996
67996: DISABLE
// begin solar_recharge_percent := 0 ;
67997: LD_ADDR_OWVAR 79
68001: PUSH
68002: LD_INT 0
68004: ST_TO_ADDR
// wait ( 5 5$00 ) ;
68005: LD_INT 10500
68007: PPUSH
68008: CALL_OW 67
// solar_recharge_percent := 100 ;
68012: LD_ADDR_OWVAR 79
68016: PUSH
68017: LD_INT 100
68019: ST_TO_ADDR
// end ;
68020: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
68021: LD_EXP 43
68025: PUSH
68026: LD_EXP 67
68030: AND
68031: IFFALSE 68270
68033: GO 68035
68035: DISABLE
68036: LD_INT 0
68038: PPUSH
68039: PPUSH
68040: PPUSH
// begin tmp := [ ] ;
68041: LD_ADDR_VAR 0 3
68045: PUSH
68046: EMPTY
68047: ST_TO_ADDR
// for i := 1 to 6 do
68048: LD_ADDR_VAR 0 1
68052: PUSH
68053: DOUBLE
68054: LD_INT 1
68056: DEC
68057: ST_TO_ADDR
68058: LD_INT 6
68060: PUSH
68061: FOR_TO
68062: IFFALSE 68167
// begin uc_nation := nation_nature ;
68064: LD_ADDR_OWVAR 21
68068: PUSH
68069: LD_INT 0
68071: ST_TO_ADDR
// uc_side := 0 ;
68072: LD_ADDR_OWVAR 20
68076: PUSH
68077: LD_INT 0
68079: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
68080: LD_ADDR_OWVAR 29
68084: PUSH
68085: LD_INT 12
68087: PUSH
68088: LD_INT 12
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: ST_TO_ADDR
// hc_agressivity := 20 ;
68095: LD_ADDR_OWVAR 35
68099: PUSH
68100: LD_INT 20
68102: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
68103: LD_ADDR_OWVAR 28
68107: PUSH
68108: LD_INT 17
68110: ST_TO_ADDR
// hc_gallery :=  ;
68111: LD_ADDR_OWVAR 33
68115: PUSH
68116: LD_STRING 
68118: ST_TO_ADDR
// hc_name :=  ;
68119: LD_ADDR_OWVAR 26
68123: PUSH
68124: LD_STRING 
68126: ST_TO_ADDR
// un := CreateHuman ;
68127: LD_ADDR_VAR 0 2
68131: PUSH
68132: CALL_OW 44
68136: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
68137: LD_VAR 0 2
68141: PPUSH
68142: LD_INT 1
68144: PPUSH
68145: CALL_OW 51
// tmp := tmp ^ un ;
68149: LD_ADDR_VAR 0 3
68153: PUSH
68154: LD_VAR 0 3
68158: PUSH
68159: LD_VAR 0 2
68163: ADD
68164: ST_TO_ADDR
// end ;
68165: GO 68061
68167: POP
68168: POP
// repeat wait ( 0 0$1 ) ;
68169: LD_INT 35
68171: PPUSH
68172: CALL_OW 67
// for un in tmp do
68176: LD_ADDR_VAR 0 2
68180: PUSH
68181: LD_VAR 0 3
68185: PUSH
68186: FOR_IN
68187: IFFALSE 68261
// begin if IsDead ( un ) then
68189: LD_VAR 0 2
68193: PPUSH
68194: CALL_OW 301
68198: IFFALSE 68218
// begin tmp := tmp diff un ;
68200: LD_ADDR_VAR 0 3
68204: PUSH
68205: LD_VAR 0 3
68209: PUSH
68210: LD_VAR 0 2
68214: DIFF
68215: ST_TO_ADDR
// continue ;
68216: GO 68186
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
68218: LD_VAR 0 2
68222: PPUSH
68223: LD_INT 3
68225: PUSH
68226: LD_INT 22
68228: PUSH
68229: LD_INT 0
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PPUSH
68240: CALL_OW 69
68244: PPUSH
68245: LD_VAR 0 2
68249: PPUSH
68250: CALL_OW 74
68254: PPUSH
68255: CALL_OW 115
// end ;
68259: GO 68186
68261: POP
68262: POP
// until not tmp ;
68263: LD_VAR 0 3
68267: NOT
68268: IFFALSE 68169
// end ;
68270: PPOPN 3
68272: END
// every 0 0$1 trigger StreamModeActive and sTroll do
68273: LD_EXP 43
68277: PUSH
68278: LD_EXP 68
68282: AND
68283: IFFALSE 68337
68285: GO 68287
68287: DISABLE
// begin ToLua ( displayTroll(); ) ;
68288: LD_STRING displayTroll();
68290: PPUSH
68291: CALL_OW 559
// wait ( 3 3$00 ) ;
68295: LD_INT 6300
68297: PPUSH
68298: CALL_OW 67
// ToLua ( hideTroll(); ) ;
68302: LD_STRING hideTroll();
68304: PPUSH
68305: CALL_OW 559
// wait ( 1 1$00 ) ;
68309: LD_INT 2100
68311: PPUSH
68312: CALL_OW 67
// ToLua ( displayTroll(); ) ;
68316: LD_STRING displayTroll();
68318: PPUSH
68319: CALL_OW 559
// wait ( 1 1$00 ) ;
68323: LD_INT 2100
68325: PPUSH
68326: CALL_OW 67
// ToLua ( hideTroll(); ) ;
68330: LD_STRING hideTroll();
68332: PPUSH
68333: CALL_OW 559
// end ;
68337: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
68338: LD_EXP 43
68342: PUSH
68343: LD_EXP 69
68347: AND
68348: IFFALSE 68411
68350: GO 68352
68352: DISABLE
68353: LD_INT 0
68355: PPUSH
// begin p := 0 ;
68356: LD_ADDR_VAR 0 1
68360: PUSH
68361: LD_INT 0
68363: ST_TO_ADDR
// repeat game_speed := 1 ;
68364: LD_ADDR_OWVAR 65
68368: PUSH
68369: LD_INT 1
68371: ST_TO_ADDR
// wait ( 0 0$1 ) ;
68372: LD_INT 35
68374: PPUSH
68375: CALL_OW 67
// p := p + 1 ;
68379: LD_ADDR_VAR 0 1
68383: PUSH
68384: LD_VAR 0 1
68388: PUSH
68389: LD_INT 1
68391: PLUS
68392: ST_TO_ADDR
// until p >= 60 ;
68393: LD_VAR 0 1
68397: PUSH
68398: LD_INT 60
68400: GREATEREQUAL
68401: IFFALSE 68364
// game_speed := 4 ;
68403: LD_ADDR_OWVAR 65
68407: PUSH
68408: LD_INT 4
68410: ST_TO_ADDR
// end ;
68411: PPOPN 1
68413: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
68414: LD_EXP 43
68418: PUSH
68419: LD_EXP 70
68423: AND
68424: IFFALSE 68570
68426: GO 68428
68428: DISABLE
68429: LD_INT 0
68431: PPUSH
68432: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
68433: LD_ADDR_VAR 0 1
68437: PUSH
68438: LD_INT 22
68440: PUSH
68441: LD_OWVAR 2
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PUSH
68450: LD_INT 2
68452: PUSH
68453: LD_INT 30
68455: PUSH
68456: LD_INT 0
68458: PUSH
68459: EMPTY
68460: LIST
68461: LIST
68462: PUSH
68463: LD_INT 30
68465: PUSH
68466: LD_INT 1
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: LIST
68477: PUSH
68478: EMPTY
68479: LIST
68480: LIST
68481: PPUSH
68482: CALL_OW 69
68486: ST_TO_ADDR
// if not depot then
68487: LD_VAR 0 1
68491: NOT
68492: IFFALSE 68496
// exit ;
68494: GO 68570
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
68496: LD_ADDR_VAR 0 2
68500: PUSH
68501: LD_VAR 0 1
68505: PUSH
68506: LD_INT 1
68508: PPUSH
68509: LD_VAR 0 1
68513: PPUSH
68514: CALL_OW 12
68518: ARRAY
68519: PPUSH
68520: CALL_OW 274
68524: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
68525: LD_VAR 0 2
68529: PPUSH
68530: LD_INT 1
68532: PPUSH
68533: LD_INT 0
68535: PPUSH
68536: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
68540: LD_VAR 0 2
68544: PPUSH
68545: LD_INT 2
68547: PPUSH
68548: LD_INT 0
68550: PPUSH
68551: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
68555: LD_VAR 0 2
68559: PPUSH
68560: LD_INT 3
68562: PPUSH
68563: LD_INT 0
68565: PPUSH
68566: CALL_OW 277
// end ;
68570: PPOPN 2
68572: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
68573: LD_EXP 43
68577: PUSH
68578: LD_EXP 71
68582: AND
68583: IFFALSE 68680
68585: GO 68587
68587: DISABLE
68588: LD_INT 0
68590: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68591: LD_ADDR_VAR 0 1
68595: PUSH
68596: LD_INT 22
68598: PUSH
68599: LD_OWVAR 2
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: PUSH
68608: LD_INT 21
68610: PUSH
68611: LD_INT 1
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: PUSH
68618: LD_INT 3
68620: PUSH
68621: LD_INT 23
68623: PUSH
68624: LD_INT 0
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: LIST
68639: PPUSH
68640: CALL_OW 69
68644: ST_TO_ADDR
// if not tmp then
68645: LD_VAR 0 1
68649: NOT
68650: IFFALSE 68654
// exit ;
68652: GO 68680
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
68654: LD_VAR 0 1
68658: PUSH
68659: LD_INT 1
68661: PPUSH
68662: LD_VAR 0 1
68666: PPUSH
68667: CALL_OW 12
68671: ARRAY
68672: PPUSH
68673: LD_INT 200
68675: PPUSH
68676: CALL_OW 234
// end ;
68680: PPOPN 1
68682: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
68683: LD_EXP 43
68687: PUSH
68688: LD_EXP 72
68692: AND
68693: IFFALSE 68772
68695: GO 68697
68697: DISABLE
68698: LD_INT 0
68700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
68701: LD_ADDR_VAR 0 1
68705: PUSH
68706: LD_INT 22
68708: PUSH
68709: LD_OWVAR 2
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 21
68720: PUSH
68721: LD_INT 2
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PPUSH
68732: CALL_OW 69
68736: ST_TO_ADDR
// if not tmp then
68737: LD_VAR 0 1
68741: NOT
68742: IFFALSE 68746
// exit ;
68744: GO 68772
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
68746: LD_VAR 0 1
68750: PUSH
68751: LD_INT 1
68753: PPUSH
68754: LD_VAR 0 1
68758: PPUSH
68759: CALL_OW 12
68763: ARRAY
68764: PPUSH
68765: LD_INT 60
68767: PPUSH
68768: CALL_OW 234
// end ;
68772: PPOPN 1
68774: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
68775: LD_EXP 43
68779: PUSH
68780: LD_EXP 73
68784: AND
68785: IFFALSE 68884
68787: GO 68789
68789: DISABLE
68790: LD_INT 0
68792: PPUSH
68793: PPUSH
// begin enable ;
68794: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
68795: LD_ADDR_VAR 0 1
68799: PUSH
68800: LD_INT 22
68802: PUSH
68803: LD_OWVAR 2
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: PUSH
68812: LD_INT 61
68814: PUSH
68815: EMPTY
68816: LIST
68817: PUSH
68818: LD_INT 33
68820: PUSH
68821: LD_INT 2
68823: PUSH
68824: EMPTY
68825: LIST
68826: LIST
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: LIST
68832: PPUSH
68833: CALL_OW 69
68837: ST_TO_ADDR
// if not tmp then
68838: LD_VAR 0 1
68842: NOT
68843: IFFALSE 68847
// exit ;
68845: GO 68884
// for i in tmp do
68847: LD_ADDR_VAR 0 2
68851: PUSH
68852: LD_VAR 0 1
68856: PUSH
68857: FOR_IN
68858: IFFALSE 68882
// if IsControledBy ( i ) then
68860: LD_VAR 0 2
68864: PPUSH
68865: CALL_OW 312
68869: IFFALSE 68880
// ComUnlink ( i ) ;
68871: LD_VAR 0 2
68875: PPUSH
68876: CALL_OW 136
68880: GO 68857
68882: POP
68883: POP
// end ;
68884: PPOPN 2
68886: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
68887: LD_EXP 43
68891: PUSH
68892: LD_EXP 74
68896: AND
68897: IFFALSE 69037
68899: GO 68901
68901: DISABLE
68902: LD_INT 0
68904: PPUSH
68905: PPUSH
// begin ToLua ( displayPowell(); ) ;
68906: LD_STRING displayPowell();
68908: PPUSH
68909: CALL_OW 559
// uc_side := 0 ;
68913: LD_ADDR_OWVAR 20
68917: PUSH
68918: LD_INT 0
68920: ST_TO_ADDR
// uc_nation := 2 ;
68921: LD_ADDR_OWVAR 21
68925: PUSH
68926: LD_INT 2
68928: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
68929: LD_ADDR_OWVAR 37
68933: PUSH
68934: LD_INT 14
68936: ST_TO_ADDR
// vc_engine := engine_siberite ;
68937: LD_ADDR_OWVAR 39
68941: PUSH
68942: LD_INT 3
68944: ST_TO_ADDR
// vc_control := control_apeman ;
68945: LD_ADDR_OWVAR 38
68949: PUSH
68950: LD_INT 5
68952: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
68953: LD_ADDR_OWVAR 40
68957: PUSH
68958: LD_INT 29
68960: ST_TO_ADDR
// un := CreateVehicle ;
68961: LD_ADDR_VAR 0 2
68965: PUSH
68966: CALL_OW 45
68970: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
68971: LD_VAR 0 2
68975: PPUSH
68976: LD_INT 1
68978: PPUSH
68979: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
68983: LD_INT 35
68985: PPUSH
68986: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
68990: LD_VAR 0 2
68994: PPUSH
68995: LD_INT 22
68997: PUSH
68998: LD_OWVAR 2
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PPUSH
69007: CALL_OW 69
69011: PPUSH
69012: LD_VAR 0 2
69016: PPUSH
69017: CALL_OW 74
69021: PPUSH
69022: CALL_OW 115
// until IsDead ( un ) ;
69026: LD_VAR 0 2
69030: PPUSH
69031: CALL_OW 301
69035: IFFALSE 68983
// end ;
69037: PPOPN 2
69039: END
// every 0 0$1 trigger StreamModeActive and sStu do
69040: LD_EXP 43
69044: PUSH
69045: LD_EXP 82
69049: AND
69050: IFFALSE 69066
69052: GO 69054
69054: DISABLE
// begin ToLua ( displayStucuk(); ) ;
69055: LD_STRING displayStucuk();
69057: PPUSH
69058: CALL_OW 559
// ResetFog ;
69062: CALL_OW 335
// end ;
69066: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
69067: LD_EXP 43
69071: PUSH
69072: LD_EXP 75
69076: AND
69077: IFFALSE 69218
69079: GO 69081
69081: DISABLE
69082: LD_INT 0
69084: PPUSH
69085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
69086: LD_ADDR_VAR 0 2
69090: PUSH
69091: LD_INT 22
69093: PUSH
69094: LD_OWVAR 2
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: PUSH
69103: LD_INT 21
69105: PUSH
69106: LD_INT 1
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: PPUSH
69117: CALL_OW 69
69121: ST_TO_ADDR
// if not tmp then
69122: LD_VAR 0 2
69126: NOT
69127: IFFALSE 69131
// exit ;
69129: GO 69218
// un := tmp [ rand ( 1 , tmp ) ] ;
69131: LD_ADDR_VAR 0 1
69135: PUSH
69136: LD_VAR 0 2
69140: PUSH
69141: LD_INT 1
69143: PPUSH
69144: LD_VAR 0 2
69148: PPUSH
69149: CALL_OW 12
69153: ARRAY
69154: ST_TO_ADDR
// SetSide ( un , 0 ) ;
69155: LD_VAR 0 1
69159: PPUSH
69160: LD_INT 0
69162: PPUSH
69163: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
69167: LD_VAR 0 1
69171: PPUSH
69172: LD_OWVAR 3
69176: PUSH
69177: LD_VAR 0 1
69181: DIFF
69182: PPUSH
69183: LD_VAR 0 1
69187: PPUSH
69188: CALL_OW 74
69192: PPUSH
69193: CALL_OW 115
// wait ( 0 0$20 ) ;
69197: LD_INT 700
69199: PPUSH
69200: CALL_OW 67
// SetSide ( un , your_side ) ;
69204: LD_VAR 0 1
69208: PPUSH
69209: LD_OWVAR 2
69213: PPUSH
69214: CALL_OW 235
// end ;
69218: PPOPN 2
69220: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
69221: LD_EXP 43
69225: PUSH
69226: LD_EXP 76
69230: AND
69231: IFFALSE 69337
69233: GO 69235
69235: DISABLE
69236: LD_INT 0
69238: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
69239: LD_ADDR_VAR 0 1
69243: PUSH
69244: LD_INT 22
69246: PUSH
69247: LD_OWVAR 2
69251: PUSH
69252: EMPTY
69253: LIST
69254: LIST
69255: PUSH
69256: LD_INT 2
69258: PUSH
69259: LD_INT 30
69261: PUSH
69262: LD_INT 0
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: PUSH
69269: LD_INT 30
69271: PUSH
69272: LD_INT 1
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: LIST
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PPUSH
69288: CALL_OW 69
69292: ST_TO_ADDR
// if not depot then
69293: LD_VAR 0 1
69297: NOT
69298: IFFALSE 69302
// exit ;
69300: GO 69337
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
69302: LD_VAR 0 1
69306: PUSH
69307: LD_INT 1
69309: ARRAY
69310: PPUSH
69311: CALL_OW 250
69315: PPUSH
69316: LD_VAR 0 1
69320: PUSH
69321: LD_INT 1
69323: ARRAY
69324: PPUSH
69325: CALL_OW 251
69329: PPUSH
69330: LD_INT 70
69332: PPUSH
69333: CALL_OW 495
// end ;
69337: PPOPN 1
69339: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
69340: LD_EXP 43
69344: PUSH
69345: LD_EXP 77
69349: AND
69350: IFFALSE 69561
69352: GO 69354
69354: DISABLE
69355: LD_INT 0
69357: PPUSH
69358: PPUSH
69359: PPUSH
69360: PPUSH
69361: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
69362: LD_ADDR_VAR 0 5
69366: PUSH
69367: LD_INT 22
69369: PUSH
69370: LD_OWVAR 2
69374: PUSH
69375: EMPTY
69376: LIST
69377: LIST
69378: PUSH
69379: LD_INT 21
69381: PUSH
69382: LD_INT 1
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: PPUSH
69393: CALL_OW 69
69397: ST_TO_ADDR
// if not tmp then
69398: LD_VAR 0 5
69402: NOT
69403: IFFALSE 69407
// exit ;
69405: GO 69561
// for i in tmp do
69407: LD_ADDR_VAR 0 1
69411: PUSH
69412: LD_VAR 0 5
69416: PUSH
69417: FOR_IN
69418: IFFALSE 69559
// begin d := rand ( 0 , 5 ) ;
69420: LD_ADDR_VAR 0 4
69424: PUSH
69425: LD_INT 0
69427: PPUSH
69428: LD_INT 5
69430: PPUSH
69431: CALL_OW 12
69435: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
69436: LD_ADDR_VAR 0 2
69440: PUSH
69441: LD_VAR 0 1
69445: PPUSH
69446: CALL_OW 250
69450: PPUSH
69451: LD_VAR 0 4
69455: PPUSH
69456: LD_INT 3
69458: PPUSH
69459: LD_INT 12
69461: PPUSH
69462: CALL_OW 12
69466: PPUSH
69467: CALL_OW 272
69471: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
69472: LD_ADDR_VAR 0 3
69476: PUSH
69477: LD_VAR 0 1
69481: PPUSH
69482: CALL_OW 251
69486: PPUSH
69487: LD_VAR 0 4
69491: PPUSH
69492: LD_INT 3
69494: PPUSH
69495: LD_INT 12
69497: PPUSH
69498: CALL_OW 12
69502: PPUSH
69503: CALL_OW 273
69507: ST_TO_ADDR
// if ValidHex ( x , y ) then
69508: LD_VAR 0 2
69512: PPUSH
69513: LD_VAR 0 3
69517: PPUSH
69518: CALL_OW 488
69522: IFFALSE 69557
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
69524: LD_VAR 0 1
69528: PPUSH
69529: LD_VAR 0 2
69533: PPUSH
69534: LD_VAR 0 3
69538: PPUSH
69539: LD_INT 3
69541: PPUSH
69542: LD_INT 6
69544: PPUSH
69545: CALL_OW 12
69549: PPUSH
69550: LD_INT 1
69552: PPUSH
69553: CALL_OW 483
// end ;
69557: GO 69417
69559: POP
69560: POP
// end ;
69561: PPOPN 5
69563: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
69564: LD_EXP 43
69568: PUSH
69569: LD_EXP 78
69573: AND
69574: IFFALSE 69668
69576: GO 69578
69578: DISABLE
69579: LD_INT 0
69581: PPUSH
69582: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
69583: LD_ADDR_VAR 0 2
69587: PUSH
69588: LD_INT 22
69590: PUSH
69591: LD_OWVAR 2
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: PUSH
69600: LD_INT 32
69602: PUSH
69603: LD_INT 1
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PUSH
69610: LD_INT 21
69612: PUSH
69613: LD_INT 2
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: EMPTY
69621: LIST
69622: LIST
69623: LIST
69624: PPUSH
69625: CALL_OW 69
69629: ST_TO_ADDR
// if not tmp then
69630: LD_VAR 0 2
69634: NOT
69635: IFFALSE 69639
// exit ;
69637: GO 69668
// for i in tmp do
69639: LD_ADDR_VAR 0 1
69643: PUSH
69644: LD_VAR 0 2
69648: PUSH
69649: FOR_IN
69650: IFFALSE 69666
// SetFuel ( i , 0 ) ;
69652: LD_VAR 0 1
69656: PPUSH
69657: LD_INT 0
69659: PPUSH
69660: CALL_OW 240
69664: GO 69649
69666: POP
69667: POP
// end ;
69668: PPOPN 2
69670: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
69671: LD_EXP 43
69675: PUSH
69676: LD_EXP 79
69680: AND
69681: IFFALSE 69747
69683: GO 69685
69685: DISABLE
69686: LD_INT 0
69688: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
69689: LD_ADDR_VAR 0 1
69693: PUSH
69694: LD_INT 22
69696: PUSH
69697: LD_OWVAR 2
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: PUSH
69706: LD_INT 30
69708: PUSH
69709: LD_INT 29
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: PPUSH
69720: CALL_OW 69
69724: ST_TO_ADDR
// if not tmp then
69725: LD_VAR 0 1
69729: NOT
69730: IFFALSE 69734
// exit ;
69732: GO 69747
// DestroyUnit ( tmp [ 1 ] ) ;
69734: LD_VAR 0 1
69738: PUSH
69739: LD_INT 1
69741: ARRAY
69742: PPUSH
69743: CALL_OW 65
// end ;
69747: PPOPN 1
69749: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
69750: LD_EXP 43
69754: PUSH
69755: LD_EXP 81
69759: AND
69760: IFFALSE 69889
69762: GO 69764
69764: DISABLE
69765: LD_INT 0
69767: PPUSH
// begin uc_side := 0 ;
69768: LD_ADDR_OWVAR 20
69772: PUSH
69773: LD_INT 0
69775: ST_TO_ADDR
// uc_nation := nation_arabian ;
69776: LD_ADDR_OWVAR 21
69780: PUSH
69781: LD_INT 2
69783: ST_TO_ADDR
// hc_gallery :=  ;
69784: LD_ADDR_OWVAR 33
69788: PUSH
69789: LD_STRING 
69791: ST_TO_ADDR
// hc_name :=  ;
69792: LD_ADDR_OWVAR 26
69796: PUSH
69797: LD_STRING 
69799: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
69800: LD_INT 1
69802: PPUSH
69803: LD_INT 11
69805: PPUSH
69806: LD_INT 10
69808: PPUSH
69809: CALL_OW 380
// un := CreateHuman ;
69813: LD_ADDR_VAR 0 1
69817: PUSH
69818: CALL_OW 44
69822: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
69823: LD_VAR 0 1
69827: PPUSH
69828: LD_INT 1
69830: PPUSH
69831: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
69835: LD_INT 35
69837: PPUSH
69838: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
69842: LD_VAR 0 1
69846: PPUSH
69847: LD_INT 22
69849: PUSH
69850: LD_OWVAR 2
69854: PUSH
69855: EMPTY
69856: LIST
69857: LIST
69858: PPUSH
69859: CALL_OW 69
69863: PPUSH
69864: LD_VAR 0 1
69868: PPUSH
69869: CALL_OW 74
69873: PPUSH
69874: CALL_OW 115
// until IsDead ( un ) ;
69878: LD_VAR 0 1
69882: PPUSH
69883: CALL_OW 301
69887: IFFALSE 69835
// end ;
69889: PPOPN 1
69891: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
69892: LD_EXP 43
69896: PUSH
69897: LD_EXP 83
69901: AND
69902: IFFALSE 69914
69904: GO 69906
69906: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
69907: LD_STRING earthquake(getX(game), 0, 32)
69909: PPUSH
69910: CALL_OW 559
69914: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
69915: LD_EXP 43
69919: PUSH
69920: LD_EXP 84
69924: AND
69925: IFFALSE 70016
69927: GO 69929
69929: DISABLE
69930: LD_INT 0
69932: PPUSH
// begin enable ;
69933: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
69934: LD_ADDR_VAR 0 1
69938: PUSH
69939: LD_INT 22
69941: PUSH
69942: LD_OWVAR 2
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PUSH
69951: LD_INT 21
69953: PUSH
69954: LD_INT 2
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: LD_INT 33
69963: PUSH
69964: LD_INT 3
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: LIST
69975: PPUSH
69976: CALL_OW 69
69980: ST_TO_ADDR
// if not tmp then
69981: LD_VAR 0 1
69985: NOT
69986: IFFALSE 69990
// exit ;
69988: GO 70016
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
69990: LD_VAR 0 1
69994: PUSH
69995: LD_INT 1
69997: PPUSH
69998: LD_VAR 0 1
70002: PPUSH
70003: CALL_OW 12
70007: ARRAY
70008: PPUSH
70009: LD_INT 1
70011: PPUSH
70012: CALL_OW 234
// end ;
70016: PPOPN 1
70018: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
70019: LD_EXP 43
70023: PUSH
70024: LD_EXP 85
70028: AND
70029: IFFALSE 70170
70031: GO 70033
70033: DISABLE
70034: LD_INT 0
70036: PPUSH
70037: PPUSH
70038: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
70039: LD_ADDR_VAR 0 3
70043: PUSH
70044: LD_INT 22
70046: PUSH
70047: LD_OWVAR 2
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: PUSH
70056: LD_INT 25
70058: PUSH
70059: LD_INT 1
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: PUSH
70066: EMPTY
70067: LIST
70068: LIST
70069: PPUSH
70070: CALL_OW 69
70074: ST_TO_ADDR
// if not tmp then
70075: LD_VAR 0 3
70079: NOT
70080: IFFALSE 70084
// exit ;
70082: GO 70170
// un := tmp [ rand ( 1 , tmp ) ] ;
70084: LD_ADDR_VAR 0 2
70088: PUSH
70089: LD_VAR 0 3
70093: PUSH
70094: LD_INT 1
70096: PPUSH
70097: LD_VAR 0 3
70101: PPUSH
70102: CALL_OW 12
70106: ARRAY
70107: ST_TO_ADDR
// if Crawls ( un ) then
70108: LD_VAR 0 2
70112: PPUSH
70113: CALL_OW 318
70117: IFFALSE 70128
// ComWalk ( un ) ;
70119: LD_VAR 0 2
70123: PPUSH
70124: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
70128: LD_VAR 0 2
70132: PPUSH
70133: LD_INT 9
70135: PPUSH
70136: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
70140: LD_INT 28
70142: PPUSH
70143: LD_OWVAR 2
70147: PPUSH
70148: LD_INT 2
70150: PPUSH
70151: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
70155: LD_INT 29
70157: PPUSH
70158: LD_OWVAR 2
70162: PPUSH
70163: LD_INT 2
70165: PPUSH
70166: CALL_OW 322
// end ;
70170: PPOPN 3
70172: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
70173: LD_EXP 43
70177: PUSH
70178: LD_EXP 86
70182: AND
70183: IFFALSE 70294
70185: GO 70187
70187: DISABLE
70188: LD_INT 0
70190: PPUSH
70191: PPUSH
70192: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
70193: LD_ADDR_VAR 0 3
70197: PUSH
70198: LD_INT 22
70200: PUSH
70201: LD_OWVAR 2
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: LD_INT 25
70212: PUSH
70213: LD_INT 1
70215: PUSH
70216: EMPTY
70217: LIST
70218: LIST
70219: PUSH
70220: EMPTY
70221: LIST
70222: LIST
70223: PPUSH
70224: CALL_OW 69
70228: ST_TO_ADDR
// if not tmp then
70229: LD_VAR 0 3
70233: NOT
70234: IFFALSE 70238
// exit ;
70236: GO 70294
// un := tmp [ rand ( 1 , tmp ) ] ;
70238: LD_ADDR_VAR 0 2
70242: PUSH
70243: LD_VAR 0 3
70247: PUSH
70248: LD_INT 1
70250: PPUSH
70251: LD_VAR 0 3
70255: PPUSH
70256: CALL_OW 12
70260: ARRAY
70261: ST_TO_ADDR
// if Crawls ( un ) then
70262: LD_VAR 0 2
70266: PPUSH
70267: CALL_OW 318
70271: IFFALSE 70282
// ComWalk ( un ) ;
70273: LD_VAR 0 2
70277: PPUSH
70278: CALL_OW 138
// SetClass ( un , class_mortar ) ;
70282: LD_VAR 0 2
70286: PPUSH
70287: LD_INT 8
70289: PPUSH
70290: CALL_OW 336
// end ;
70294: PPOPN 3
70296: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
70297: LD_EXP 43
70301: PUSH
70302: LD_EXP 87
70306: AND
70307: IFFALSE 70451
70309: GO 70311
70311: DISABLE
70312: LD_INT 0
70314: PPUSH
70315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
70316: LD_ADDR_VAR 0 2
70320: PUSH
70321: LD_INT 22
70323: PUSH
70324: LD_OWVAR 2
70328: PUSH
70329: EMPTY
70330: LIST
70331: LIST
70332: PUSH
70333: LD_INT 21
70335: PUSH
70336: LD_INT 2
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: PUSH
70343: LD_INT 2
70345: PUSH
70346: LD_INT 34
70348: PUSH
70349: LD_INT 12
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: PUSH
70356: LD_INT 34
70358: PUSH
70359: LD_INT 51
70361: PUSH
70362: EMPTY
70363: LIST
70364: LIST
70365: PUSH
70366: LD_INT 34
70368: PUSH
70369: LD_INT 32
70371: PUSH
70372: EMPTY
70373: LIST
70374: LIST
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: LIST
70380: LIST
70381: PUSH
70382: EMPTY
70383: LIST
70384: LIST
70385: LIST
70386: PPUSH
70387: CALL_OW 69
70391: ST_TO_ADDR
// if not tmp then
70392: LD_VAR 0 2
70396: NOT
70397: IFFALSE 70401
// exit ;
70399: GO 70451
// for i in tmp do
70401: LD_ADDR_VAR 0 1
70405: PUSH
70406: LD_VAR 0 2
70410: PUSH
70411: FOR_IN
70412: IFFALSE 70449
// if GetCargo ( i , mat_artifact ) = 0 then
70414: LD_VAR 0 1
70418: PPUSH
70419: LD_INT 4
70421: PPUSH
70422: CALL_OW 289
70426: PUSH
70427: LD_INT 0
70429: EQUAL
70430: IFFALSE 70447
// SetCargo ( i , mat_siberit , 100 ) ;
70432: LD_VAR 0 1
70436: PPUSH
70437: LD_INT 3
70439: PPUSH
70440: LD_INT 100
70442: PPUSH
70443: CALL_OW 290
70447: GO 70411
70449: POP
70450: POP
// end ;
70451: PPOPN 2
70453: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
70454: LD_EXP 43
70458: PUSH
70459: LD_EXP 88
70463: AND
70464: IFFALSE 70647
70466: GO 70468
70468: DISABLE
70469: LD_INT 0
70471: PPUSH
70472: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70473: LD_ADDR_VAR 0 2
70477: PUSH
70478: LD_INT 22
70480: PUSH
70481: LD_OWVAR 2
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: PPUSH
70490: CALL_OW 69
70494: ST_TO_ADDR
// if not tmp then
70495: LD_VAR 0 2
70499: NOT
70500: IFFALSE 70504
// exit ;
70502: GO 70647
// for i := 1 to 2 do
70504: LD_ADDR_VAR 0 1
70508: PUSH
70509: DOUBLE
70510: LD_INT 1
70512: DEC
70513: ST_TO_ADDR
70514: LD_INT 2
70516: PUSH
70517: FOR_TO
70518: IFFALSE 70645
// begin uc_side := your_side ;
70520: LD_ADDR_OWVAR 20
70524: PUSH
70525: LD_OWVAR 2
70529: ST_TO_ADDR
// uc_nation := nation_american ;
70530: LD_ADDR_OWVAR 21
70534: PUSH
70535: LD_INT 1
70537: ST_TO_ADDR
// vc_chassis := us_morphling ;
70538: LD_ADDR_OWVAR 37
70542: PUSH
70543: LD_INT 5
70545: ST_TO_ADDR
// vc_engine := engine_siberite ;
70546: LD_ADDR_OWVAR 39
70550: PUSH
70551: LD_INT 3
70553: ST_TO_ADDR
// vc_control := control_computer ;
70554: LD_ADDR_OWVAR 38
70558: PUSH
70559: LD_INT 3
70561: ST_TO_ADDR
// vc_weapon := us_double_laser ;
70562: LD_ADDR_OWVAR 40
70566: PUSH
70567: LD_INT 10
70569: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
70570: LD_VAR 0 2
70574: PUSH
70575: LD_INT 1
70577: ARRAY
70578: PPUSH
70579: CALL_OW 310
70583: NOT
70584: IFFALSE 70631
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
70586: CALL_OW 45
70590: PPUSH
70591: LD_VAR 0 2
70595: PUSH
70596: LD_INT 1
70598: ARRAY
70599: PPUSH
70600: CALL_OW 250
70604: PPUSH
70605: LD_VAR 0 2
70609: PUSH
70610: LD_INT 1
70612: ARRAY
70613: PPUSH
70614: CALL_OW 251
70618: PPUSH
70619: LD_INT 12
70621: PPUSH
70622: LD_INT 1
70624: PPUSH
70625: CALL_OW 50
70629: GO 70643
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
70631: CALL_OW 45
70635: PPUSH
70636: LD_INT 1
70638: PPUSH
70639: CALL_OW 51
// end ;
70643: GO 70517
70645: POP
70646: POP
// end ;
70647: PPOPN 2
70649: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
70650: LD_EXP 43
70654: PUSH
70655: LD_EXP 89
70659: AND
70660: IFFALSE 70882
70662: GO 70664
70664: DISABLE
70665: LD_INT 0
70667: PPUSH
70668: PPUSH
70669: PPUSH
70670: PPUSH
70671: PPUSH
70672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
70673: LD_ADDR_VAR 0 6
70677: PUSH
70678: LD_INT 22
70680: PUSH
70681: LD_OWVAR 2
70685: PUSH
70686: EMPTY
70687: LIST
70688: LIST
70689: PUSH
70690: LD_INT 21
70692: PUSH
70693: LD_INT 1
70695: PUSH
70696: EMPTY
70697: LIST
70698: LIST
70699: PUSH
70700: LD_INT 3
70702: PUSH
70703: LD_INT 23
70705: PUSH
70706: LD_INT 0
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: PUSH
70713: EMPTY
70714: LIST
70715: LIST
70716: PUSH
70717: EMPTY
70718: LIST
70719: LIST
70720: LIST
70721: PPUSH
70722: CALL_OW 69
70726: ST_TO_ADDR
// if not tmp then
70727: LD_VAR 0 6
70731: NOT
70732: IFFALSE 70736
// exit ;
70734: GO 70882
// s1 := rand ( 1 , 4 ) ;
70736: LD_ADDR_VAR 0 2
70740: PUSH
70741: LD_INT 1
70743: PPUSH
70744: LD_INT 4
70746: PPUSH
70747: CALL_OW 12
70751: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
70752: LD_ADDR_VAR 0 4
70756: PUSH
70757: LD_VAR 0 6
70761: PUSH
70762: LD_INT 1
70764: ARRAY
70765: PPUSH
70766: LD_VAR 0 2
70770: PPUSH
70771: CALL_OW 259
70775: ST_TO_ADDR
// if s1 = 1 then
70776: LD_VAR 0 2
70780: PUSH
70781: LD_INT 1
70783: EQUAL
70784: IFFALSE 70804
// s2 := rand ( 2 , 4 ) else
70786: LD_ADDR_VAR 0 3
70790: PUSH
70791: LD_INT 2
70793: PPUSH
70794: LD_INT 4
70796: PPUSH
70797: CALL_OW 12
70801: ST_TO_ADDR
70802: GO 70812
// s2 := 1 ;
70804: LD_ADDR_VAR 0 3
70808: PUSH
70809: LD_INT 1
70811: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
70812: LD_ADDR_VAR 0 5
70816: PUSH
70817: LD_VAR 0 6
70821: PUSH
70822: LD_INT 1
70824: ARRAY
70825: PPUSH
70826: LD_VAR 0 3
70830: PPUSH
70831: CALL_OW 259
70835: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
70836: LD_VAR 0 6
70840: PUSH
70841: LD_INT 1
70843: ARRAY
70844: PPUSH
70845: LD_VAR 0 2
70849: PPUSH
70850: LD_VAR 0 5
70854: PPUSH
70855: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
70859: LD_VAR 0 6
70863: PUSH
70864: LD_INT 1
70866: ARRAY
70867: PPUSH
70868: LD_VAR 0 3
70872: PPUSH
70873: LD_VAR 0 4
70877: PPUSH
70878: CALL_OW 237
// end ;
70882: PPOPN 6
70884: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
70885: LD_EXP 43
70889: PUSH
70890: LD_EXP 90
70894: AND
70895: IFFALSE 70974
70897: GO 70899
70899: DISABLE
70900: LD_INT 0
70902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
70903: LD_ADDR_VAR 0 1
70907: PUSH
70908: LD_INT 22
70910: PUSH
70911: LD_OWVAR 2
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: PUSH
70920: LD_INT 30
70922: PUSH
70923: LD_INT 3
70925: PUSH
70926: EMPTY
70927: LIST
70928: LIST
70929: PUSH
70930: EMPTY
70931: LIST
70932: LIST
70933: PPUSH
70934: CALL_OW 69
70938: ST_TO_ADDR
// if not tmp then
70939: LD_VAR 0 1
70943: NOT
70944: IFFALSE 70948
// exit ;
70946: GO 70974
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
70948: LD_VAR 0 1
70952: PUSH
70953: LD_INT 1
70955: PPUSH
70956: LD_VAR 0 1
70960: PPUSH
70961: CALL_OW 12
70965: ARRAY
70966: PPUSH
70967: LD_INT 1
70969: PPUSH
70970: CALL_OW 234
// end ;
70974: PPOPN 1
70976: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
70977: LD_EXP 43
70981: PUSH
70982: LD_EXP 91
70986: AND
70987: IFFALSE 71099
70989: GO 70991
70991: DISABLE
70992: LD_INT 0
70994: PPUSH
70995: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
70996: LD_ADDR_VAR 0 2
71000: PUSH
71001: LD_INT 22
71003: PUSH
71004: LD_OWVAR 2
71008: PUSH
71009: EMPTY
71010: LIST
71011: LIST
71012: PUSH
71013: LD_INT 2
71015: PUSH
71016: LD_INT 30
71018: PUSH
71019: LD_INT 27
71021: PUSH
71022: EMPTY
71023: LIST
71024: LIST
71025: PUSH
71026: LD_INT 30
71028: PUSH
71029: LD_INT 26
71031: PUSH
71032: EMPTY
71033: LIST
71034: LIST
71035: PUSH
71036: LD_INT 30
71038: PUSH
71039: LD_INT 28
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: PUSH
71046: EMPTY
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: PPUSH
71056: CALL_OW 69
71060: ST_TO_ADDR
// if not tmp then
71061: LD_VAR 0 2
71065: NOT
71066: IFFALSE 71070
// exit ;
71068: GO 71099
// for i in tmp do
71070: LD_ADDR_VAR 0 1
71074: PUSH
71075: LD_VAR 0 2
71079: PUSH
71080: FOR_IN
71081: IFFALSE 71097
// SetLives ( i , 1 ) ;
71083: LD_VAR 0 1
71087: PPUSH
71088: LD_INT 1
71090: PPUSH
71091: CALL_OW 234
71095: GO 71080
71097: POP
71098: POP
// end ;
71099: PPOPN 2
71101: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
71102: LD_EXP 43
71106: PUSH
71107: LD_EXP 92
71111: AND
71112: IFFALSE 71399
71114: GO 71116
71116: DISABLE
71117: LD_INT 0
71119: PPUSH
71120: PPUSH
71121: PPUSH
// begin i := rand ( 1 , 7 ) ;
71122: LD_ADDR_VAR 0 1
71126: PUSH
71127: LD_INT 1
71129: PPUSH
71130: LD_INT 7
71132: PPUSH
71133: CALL_OW 12
71137: ST_TO_ADDR
// case i of 1 :
71138: LD_VAR 0 1
71142: PUSH
71143: LD_INT 1
71145: DOUBLE
71146: EQUAL
71147: IFTRUE 71151
71149: GO 71161
71151: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
71152: LD_STRING earthquake(getX(game), 0, 32)
71154: PPUSH
71155: CALL_OW 559
71159: GO 71399
71161: LD_INT 2
71163: DOUBLE
71164: EQUAL
71165: IFTRUE 71169
71167: GO 71183
71169: POP
// begin ToLua ( displayStucuk(); ) ;
71170: LD_STRING displayStucuk();
71172: PPUSH
71173: CALL_OW 559
// ResetFog ;
71177: CALL_OW 335
// end ; 3 :
71181: GO 71399
71183: LD_INT 3
71185: DOUBLE
71186: EQUAL
71187: IFTRUE 71191
71189: GO 71295
71191: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71192: LD_ADDR_VAR 0 2
71196: PUSH
71197: LD_INT 22
71199: PUSH
71200: LD_OWVAR 2
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: PUSH
71209: LD_INT 25
71211: PUSH
71212: LD_INT 1
71214: PUSH
71215: EMPTY
71216: LIST
71217: LIST
71218: PUSH
71219: EMPTY
71220: LIST
71221: LIST
71222: PPUSH
71223: CALL_OW 69
71227: ST_TO_ADDR
// if not tmp then
71228: LD_VAR 0 2
71232: NOT
71233: IFFALSE 71237
// exit ;
71235: GO 71399
// un := tmp [ rand ( 1 , tmp ) ] ;
71237: LD_ADDR_VAR 0 3
71241: PUSH
71242: LD_VAR 0 2
71246: PUSH
71247: LD_INT 1
71249: PPUSH
71250: LD_VAR 0 2
71254: PPUSH
71255: CALL_OW 12
71259: ARRAY
71260: ST_TO_ADDR
// if Crawls ( un ) then
71261: LD_VAR 0 3
71265: PPUSH
71266: CALL_OW 318
71270: IFFALSE 71281
// ComWalk ( un ) ;
71272: LD_VAR 0 3
71276: PPUSH
71277: CALL_OW 138
// SetClass ( un , class_mortar ) ;
71281: LD_VAR 0 3
71285: PPUSH
71286: LD_INT 8
71288: PPUSH
71289: CALL_OW 336
// end ; 4 :
71293: GO 71399
71295: LD_INT 4
71297: DOUBLE
71298: EQUAL
71299: IFTRUE 71303
71301: GO 71377
71303: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
71304: LD_ADDR_VAR 0 2
71308: PUSH
71309: LD_INT 22
71311: PUSH
71312: LD_OWVAR 2
71316: PUSH
71317: EMPTY
71318: LIST
71319: LIST
71320: PUSH
71321: LD_INT 30
71323: PUSH
71324: LD_INT 29
71326: PUSH
71327: EMPTY
71328: LIST
71329: LIST
71330: PUSH
71331: EMPTY
71332: LIST
71333: LIST
71334: PPUSH
71335: CALL_OW 69
71339: ST_TO_ADDR
// if not tmp then
71340: LD_VAR 0 2
71344: NOT
71345: IFFALSE 71349
// exit ;
71347: GO 71399
// CenterNowOnUnits ( tmp [ 1 ] ) ;
71349: LD_VAR 0 2
71353: PUSH
71354: LD_INT 1
71356: ARRAY
71357: PPUSH
71358: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
71362: LD_VAR 0 2
71366: PUSH
71367: LD_INT 1
71369: ARRAY
71370: PPUSH
71371: CALL_OW 65
// end ; 5 .. 7 :
71375: GO 71399
71377: LD_INT 5
71379: DOUBLE
71380: GREATEREQUAL
71381: IFFALSE 71389
71383: LD_INT 7
71385: DOUBLE
71386: LESSEQUAL
71387: IFTRUE 71391
71389: GO 71398
71391: POP
// StreamSibBomb ; end ;
71392: CALL 67636 0 0
71396: GO 71399
71398: POP
// end ;
71399: PPOPN 3
71401: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
71402: LD_EXP 43
71406: PUSH
71407: LD_EXP 93
71411: AND
71412: IFFALSE 71568
71414: GO 71416
71416: DISABLE
71417: LD_INT 0
71419: PPUSH
71420: PPUSH
71421: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
71422: LD_ADDR_VAR 0 2
71426: PUSH
71427: LD_INT 81
71429: PUSH
71430: LD_OWVAR 2
71434: PUSH
71435: EMPTY
71436: LIST
71437: LIST
71438: PUSH
71439: LD_INT 2
71441: PUSH
71442: LD_INT 21
71444: PUSH
71445: LD_INT 1
71447: PUSH
71448: EMPTY
71449: LIST
71450: LIST
71451: PUSH
71452: LD_INT 21
71454: PUSH
71455: LD_INT 2
71457: PUSH
71458: EMPTY
71459: LIST
71460: LIST
71461: PUSH
71462: EMPTY
71463: LIST
71464: LIST
71465: LIST
71466: PUSH
71467: EMPTY
71468: LIST
71469: LIST
71470: PPUSH
71471: CALL_OW 69
71475: ST_TO_ADDR
// if not tmp then
71476: LD_VAR 0 2
71480: NOT
71481: IFFALSE 71485
// exit ;
71483: GO 71568
// p := 0 ;
71485: LD_ADDR_VAR 0 3
71489: PUSH
71490: LD_INT 0
71492: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
71493: LD_INT 35
71495: PPUSH
71496: CALL_OW 67
// p := p + 1 ;
71500: LD_ADDR_VAR 0 3
71504: PUSH
71505: LD_VAR 0 3
71509: PUSH
71510: LD_INT 1
71512: PLUS
71513: ST_TO_ADDR
// for i in tmp do
71514: LD_ADDR_VAR 0 1
71518: PUSH
71519: LD_VAR 0 2
71523: PUSH
71524: FOR_IN
71525: IFFALSE 71556
// if GetLives ( i ) < 1000 then
71527: LD_VAR 0 1
71531: PPUSH
71532: CALL_OW 256
71536: PUSH
71537: LD_INT 1000
71539: LESS
71540: IFFALSE 71554
// SetLives ( i , 1000 ) ;
71542: LD_VAR 0 1
71546: PPUSH
71547: LD_INT 1000
71549: PPUSH
71550: CALL_OW 234
71554: GO 71524
71556: POP
71557: POP
// until p > 20 ;
71558: LD_VAR 0 3
71562: PUSH
71563: LD_INT 20
71565: GREATER
71566: IFFALSE 71493
// end ;
71568: PPOPN 3
71570: END
// every 0 0$1 trigger StreamModeActive and sTime do
71571: LD_EXP 43
71575: PUSH
71576: LD_EXP 94
71580: AND
71581: IFFALSE 71616
71583: GO 71585
71585: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
71586: LD_INT 28
71588: PPUSH
71589: LD_OWVAR 2
71593: PPUSH
71594: LD_INT 2
71596: PPUSH
71597: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
71601: LD_INT 30
71603: PPUSH
71604: LD_OWVAR 2
71608: PPUSH
71609: LD_INT 2
71611: PPUSH
71612: CALL_OW 322
// end ;
71616: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
71617: LD_EXP 43
71621: PUSH
71622: LD_EXP 95
71626: AND
71627: IFFALSE 71748
71629: GO 71631
71631: DISABLE
71632: LD_INT 0
71634: PPUSH
71635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
71636: LD_ADDR_VAR 0 2
71640: PUSH
71641: LD_INT 22
71643: PUSH
71644: LD_OWVAR 2
71648: PUSH
71649: EMPTY
71650: LIST
71651: LIST
71652: PUSH
71653: LD_INT 21
71655: PUSH
71656: LD_INT 1
71658: PUSH
71659: EMPTY
71660: LIST
71661: LIST
71662: PUSH
71663: LD_INT 3
71665: PUSH
71666: LD_INT 23
71668: PUSH
71669: LD_INT 0
71671: PUSH
71672: EMPTY
71673: LIST
71674: LIST
71675: PUSH
71676: EMPTY
71677: LIST
71678: LIST
71679: PUSH
71680: EMPTY
71681: LIST
71682: LIST
71683: LIST
71684: PPUSH
71685: CALL_OW 69
71689: ST_TO_ADDR
// if not tmp then
71690: LD_VAR 0 2
71694: NOT
71695: IFFALSE 71699
// exit ;
71697: GO 71748
// for i in tmp do
71699: LD_ADDR_VAR 0 1
71703: PUSH
71704: LD_VAR 0 2
71708: PUSH
71709: FOR_IN
71710: IFFALSE 71746
// begin if Crawls ( i ) then
71712: LD_VAR 0 1
71716: PPUSH
71717: CALL_OW 318
71721: IFFALSE 71732
// ComWalk ( i ) ;
71723: LD_VAR 0 1
71727: PPUSH
71728: CALL_OW 138
// SetClass ( i , 2 ) ;
71732: LD_VAR 0 1
71736: PPUSH
71737: LD_INT 2
71739: PPUSH
71740: CALL_OW 336
// end ;
71744: GO 71709
71746: POP
71747: POP
// end ;
71748: PPOPN 2
71750: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
71751: LD_EXP 43
71755: PUSH
71756: LD_EXP 96
71760: AND
71761: IFFALSE 72049
71763: GO 71765
71765: DISABLE
71766: LD_INT 0
71768: PPUSH
71769: PPUSH
71770: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
71771: LD_OWVAR 2
71775: PPUSH
71776: LD_INT 9
71778: PPUSH
71779: LD_INT 1
71781: PPUSH
71782: LD_INT 1
71784: PPUSH
71785: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
71789: LD_INT 9
71791: PPUSH
71792: LD_OWVAR 2
71796: PPUSH
71797: CALL_OW 343
// uc_side := 9 ;
71801: LD_ADDR_OWVAR 20
71805: PUSH
71806: LD_INT 9
71808: ST_TO_ADDR
// uc_nation := 2 ;
71809: LD_ADDR_OWVAR 21
71813: PUSH
71814: LD_INT 2
71816: ST_TO_ADDR
// hc_name := Dark Warrior ;
71817: LD_ADDR_OWVAR 26
71821: PUSH
71822: LD_STRING Dark Warrior
71824: ST_TO_ADDR
// hc_gallery :=  ;
71825: LD_ADDR_OWVAR 33
71829: PUSH
71830: LD_STRING 
71832: ST_TO_ADDR
// hc_noskilllimit := true ;
71833: LD_ADDR_OWVAR 76
71837: PUSH
71838: LD_INT 1
71840: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
71841: LD_ADDR_OWVAR 31
71845: PUSH
71846: LD_INT 30
71848: PUSH
71849: LD_INT 30
71851: PUSH
71852: LD_INT 30
71854: PUSH
71855: LD_INT 30
71857: PUSH
71858: EMPTY
71859: LIST
71860: LIST
71861: LIST
71862: LIST
71863: ST_TO_ADDR
// un := CreateHuman ;
71864: LD_ADDR_VAR 0 3
71868: PUSH
71869: CALL_OW 44
71873: ST_TO_ADDR
// hc_noskilllimit := false ;
71874: LD_ADDR_OWVAR 76
71878: PUSH
71879: LD_INT 0
71881: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71882: LD_VAR 0 3
71886: PPUSH
71887: LD_INT 1
71889: PPUSH
71890: CALL_OW 51
// ToLua ( playRanger() ) ;
71894: LD_STRING playRanger()
71896: PPUSH
71897: CALL_OW 559
// p := 0 ;
71901: LD_ADDR_VAR 0 2
71905: PUSH
71906: LD_INT 0
71908: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
71909: LD_INT 35
71911: PPUSH
71912: CALL_OW 67
// p := p + 1 ;
71916: LD_ADDR_VAR 0 2
71920: PUSH
71921: LD_VAR 0 2
71925: PUSH
71926: LD_INT 1
71928: PLUS
71929: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
71930: LD_VAR 0 3
71934: PPUSH
71935: CALL_OW 256
71939: PUSH
71940: LD_INT 1000
71942: LESS
71943: IFFALSE 71957
// SetLives ( un , 1000 ) ;
71945: LD_VAR 0 3
71949: PPUSH
71950: LD_INT 1000
71952: PPUSH
71953: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
71957: LD_VAR 0 3
71961: PPUSH
71962: LD_INT 81
71964: PUSH
71965: LD_OWVAR 2
71969: PUSH
71970: EMPTY
71971: LIST
71972: LIST
71973: PUSH
71974: LD_INT 91
71976: PUSH
71977: LD_VAR 0 3
71981: PUSH
71982: LD_INT 30
71984: PUSH
71985: EMPTY
71986: LIST
71987: LIST
71988: LIST
71989: PUSH
71990: EMPTY
71991: LIST
71992: LIST
71993: PPUSH
71994: CALL_OW 69
71998: PPUSH
71999: LD_VAR 0 3
72003: PPUSH
72004: CALL_OW 74
72008: PPUSH
72009: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
72013: LD_VAR 0 2
72017: PUSH
72018: LD_INT 80
72020: GREATER
72021: PUSH
72022: LD_VAR 0 3
72026: PPUSH
72027: CALL_OW 301
72031: OR
72032: IFFALSE 71909
// if un then
72034: LD_VAR 0 3
72038: IFFALSE 72049
// RemoveUnit ( un ) ;
72040: LD_VAR 0 3
72044: PPUSH
72045: CALL_OW 64
// end ;
72049: PPOPN 3
72051: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
72052: LD_EXP 97
72056: IFFALSE 72172
72058: GO 72060
72060: DISABLE
72061: LD_INT 0
72063: PPUSH
72064: PPUSH
72065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
72066: LD_ADDR_VAR 0 2
72070: PUSH
72071: LD_INT 81
72073: PUSH
72074: LD_OWVAR 2
72078: PUSH
72079: EMPTY
72080: LIST
72081: LIST
72082: PUSH
72083: LD_INT 21
72085: PUSH
72086: LD_INT 1
72088: PUSH
72089: EMPTY
72090: LIST
72091: LIST
72092: PUSH
72093: EMPTY
72094: LIST
72095: LIST
72096: PPUSH
72097: CALL_OW 69
72101: ST_TO_ADDR
// ToLua ( playComputer() ) ;
72102: LD_STRING playComputer()
72104: PPUSH
72105: CALL_OW 559
// if not tmp then
72109: LD_VAR 0 2
72113: NOT
72114: IFFALSE 72118
// exit ;
72116: GO 72172
// for i in tmp do
72118: LD_ADDR_VAR 0 1
72122: PUSH
72123: LD_VAR 0 2
72127: PUSH
72128: FOR_IN
72129: IFFALSE 72170
// for j := 1 to 4 do
72131: LD_ADDR_VAR 0 3
72135: PUSH
72136: DOUBLE
72137: LD_INT 1
72139: DEC
72140: ST_TO_ADDR
72141: LD_INT 4
72143: PUSH
72144: FOR_TO
72145: IFFALSE 72166
// SetSkill ( i , j , 10 ) ;
72147: LD_VAR 0 1
72151: PPUSH
72152: LD_VAR 0 3
72156: PPUSH
72157: LD_INT 10
72159: PPUSH
72160: CALL_OW 237
72164: GO 72144
72166: POP
72167: POP
72168: GO 72128
72170: POP
72171: POP
// end ;
72172: PPOPN 3
72174: END
// every 0 0$1 trigger s30 do var i , tmp ;
72175: LD_EXP 98
72179: IFFALSE 72248
72181: GO 72183
72183: DISABLE
72184: LD_INT 0
72186: PPUSH
72187: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
72188: LD_ADDR_VAR 0 2
72192: PUSH
72193: LD_INT 22
72195: PUSH
72196: LD_OWVAR 2
72200: PUSH
72201: EMPTY
72202: LIST
72203: LIST
72204: PPUSH
72205: CALL_OW 69
72209: ST_TO_ADDR
// if not tmp then
72210: LD_VAR 0 2
72214: NOT
72215: IFFALSE 72219
// exit ;
72217: GO 72248
// for i in tmp do
72219: LD_ADDR_VAR 0 1
72223: PUSH
72224: LD_VAR 0 2
72228: PUSH
72229: FOR_IN
72230: IFFALSE 72246
// SetLives ( i , 300 ) ;
72232: LD_VAR 0 1
72236: PPUSH
72237: LD_INT 300
72239: PPUSH
72240: CALL_OW 234
72244: GO 72229
72246: POP
72247: POP
// end ;
72248: PPOPN 2
72250: END
// every 0 0$1 trigger s60 do var i , tmp ;
72251: LD_EXP 99
72255: IFFALSE 72324
72257: GO 72259
72259: DISABLE
72260: LD_INT 0
72262: PPUSH
72263: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
72264: LD_ADDR_VAR 0 2
72268: PUSH
72269: LD_INT 22
72271: PUSH
72272: LD_OWVAR 2
72276: PUSH
72277: EMPTY
72278: LIST
72279: LIST
72280: PPUSH
72281: CALL_OW 69
72285: ST_TO_ADDR
// if not tmp then
72286: LD_VAR 0 2
72290: NOT
72291: IFFALSE 72295
// exit ;
72293: GO 72324
// for i in tmp do
72295: LD_ADDR_VAR 0 1
72299: PUSH
72300: LD_VAR 0 2
72304: PUSH
72305: FOR_IN
72306: IFFALSE 72322
// SetLives ( i , 600 ) ;
72308: LD_VAR 0 1
72312: PPUSH
72313: LD_INT 600
72315: PPUSH
72316: CALL_OW 234
72320: GO 72305
72322: POP
72323: POP
// end ;
72324: PPOPN 2
72326: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
72327: LD_INT 0
72329: PPUSH
// case cmd of 301 :
72330: LD_VAR 0 1
72334: PUSH
72335: LD_INT 301
72337: DOUBLE
72338: EQUAL
72339: IFTRUE 72343
72341: GO 72375
72343: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
72344: LD_VAR 0 6
72348: PPUSH
72349: LD_VAR 0 7
72353: PPUSH
72354: LD_VAR 0 8
72358: PPUSH
72359: LD_VAR 0 4
72363: PPUSH
72364: LD_VAR 0 5
72368: PPUSH
72369: CALL 73576 0 5
72373: GO 72496
72375: LD_INT 302
72377: DOUBLE
72378: EQUAL
72379: IFTRUE 72383
72381: GO 72420
72383: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
72384: LD_VAR 0 6
72388: PPUSH
72389: LD_VAR 0 7
72393: PPUSH
72394: LD_VAR 0 8
72398: PPUSH
72399: LD_VAR 0 9
72403: PPUSH
72404: LD_VAR 0 4
72408: PPUSH
72409: LD_VAR 0 5
72413: PPUSH
72414: CALL 73667 0 6
72418: GO 72496
72420: LD_INT 303
72422: DOUBLE
72423: EQUAL
72424: IFTRUE 72428
72426: GO 72465
72428: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
72429: LD_VAR 0 6
72433: PPUSH
72434: LD_VAR 0 7
72438: PPUSH
72439: LD_VAR 0 8
72443: PPUSH
72444: LD_VAR 0 9
72448: PPUSH
72449: LD_VAR 0 4
72453: PPUSH
72454: LD_VAR 0 5
72458: PPUSH
72459: CALL 72501 0 6
72463: GO 72496
72465: LD_INT 304
72467: DOUBLE
72468: EQUAL
72469: IFTRUE 72473
72471: GO 72495
72473: POP
// hHackTeleport ( unit , x , y ) ; end ;
72474: LD_VAR 0 2
72478: PPUSH
72479: LD_VAR 0 4
72483: PPUSH
72484: LD_VAR 0 5
72488: PPUSH
72489: CALL 74260 0 3
72493: GO 72496
72495: POP
// end ;
72496: LD_VAR 0 12
72500: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
72501: LD_INT 0
72503: PPUSH
72504: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
72505: LD_VAR 0 1
72509: PUSH
72510: LD_INT 1
72512: LESS
72513: PUSH
72514: LD_VAR 0 1
72518: PUSH
72519: LD_INT 3
72521: GREATER
72522: OR
72523: PUSH
72524: LD_VAR 0 5
72528: PPUSH
72529: LD_VAR 0 6
72533: PPUSH
72534: CALL_OW 428
72538: OR
72539: IFFALSE 72543
// exit ;
72541: GO 73263
// uc_side := your_side ;
72543: LD_ADDR_OWVAR 20
72547: PUSH
72548: LD_OWVAR 2
72552: ST_TO_ADDR
// uc_nation := nation ;
72553: LD_ADDR_OWVAR 21
72557: PUSH
72558: LD_VAR 0 1
72562: ST_TO_ADDR
// bc_level = 1 ;
72563: LD_ADDR_OWVAR 43
72567: PUSH
72568: LD_INT 1
72570: ST_TO_ADDR
// case btype of 1 :
72571: LD_VAR 0 2
72575: PUSH
72576: LD_INT 1
72578: DOUBLE
72579: EQUAL
72580: IFTRUE 72584
72582: GO 72595
72584: POP
// bc_type := b_depot ; 2 :
72585: LD_ADDR_OWVAR 42
72589: PUSH
72590: LD_INT 0
72592: ST_TO_ADDR
72593: GO 73207
72595: LD_INT 2
72597: DOUBLE
72598: EQUAL
72599: IFTRUE 72603
72601: GO 72614
72603: POP
// bc_type := b_warehouse ; 3 :
72604: LD_ADDR_OWVAR 42
72608: PUSH
72609: LD_INT 1
72611: ST_TO_ADDR
72612: GO 73207
72614: LD_INT 3
72616: DOUBLE
72617: EQUAL
72618: IFTRUE 72622
72620: GO 72633
72622: POP
// bc_type := b_lab ; 4 .. 9 :
72623: LD_ADDR_OWVAR 42
72627: PUSH
72628: LD_INT 6
72630: ST_TO_ADDR
72631: GO 73207
72633: LD_INT 4
72635: DOUBLE
72636: GREATEREQUAL
72637: IFFALSE 72645
72639: LD_INT 9
72641: DOUBLE
72642: LESSEQUAL
72643: IFTRUE 72647
72645: GO 72699
72647: POP
// begin bc_type := b_lab_half ;
72648: LD_ADDR_OWVAR 42
72652: PUSH
72653: LD_INT 7
72655: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
72656: LD_ADDR_OWVAR 44
72660: PUSH
72661: LD_INT 10
72663: PUSH
72664: LD_INT 11
72666: PUSH
72667: LD_INT 12
72669: PUSH
72670: LD_INT 15
72672: PUSH
72673: LD_INT 14
72675: PUSH
72676: LD_INT 13
72678: PUSH
72679: EMPTY
72680: LIST
72681: LIST
72682: LIST
72683: LIST
72684: LIST
72685: LIST
72686: PUSH
72687: LD_VAR 0 2
72691: PUSH
72692: LD_INT 3
72694: MINUS
72695: ARRAY
72696: ST_TO_ADDR
// end ; 10 .. 13 :
72697: GO 73207
72699: LD_INT 10
72701: DOUBLE
72702: GREATEREQUAL
72703: IFFALSE 72711
72705: LD_INT 13
72707: DOUBLE
72708: LESSEQUAL
72709: IFTRUE 72713
72711: GO 72790
72713: POP
// begin bc_type := b_lab_full ;
72714: LD_ADDR_OWVAR 42
72718: PUSH
72719: LD_INT 8
72721: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
72722: LD_ADDR_OWVAR 44
72726: PUSH
72727: LD_INT 10
72729: PUSH
72730: LD_INT 12
72732: PUSH
72733: LD_INT 14
72735: PUSH
72736: LD_INT 13
72738: PUSH
72739: EMPTY
72740: LIST
72741: LIST
72742: LIST
72743: LIST
72744: PUSH
72745: LD_VAR 0 2
72749: PUSH
72750: LD_INT 9
72752: MINUS
72753: ARRAY
72754: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
72755: LD_ADDR_OWVAR 45
72759: PUSH
72760: LD_INT 11
72762: PUSH
72763: LD_INT 15
72765: PUSH
72766: LD_INT 12
72768: PUSH
72769: LD_INT 15
72771: PUSH
72772: EMPTY
72773: LIST
72774: LIST
72775: LIST
72776: LIST
72777: PUSH
72778: LD_VAR 0 2
72782: PUSH
72783: LD_INT 9
72785: MINUS
72786: ARRAY
72787: ST_TO_ADDR
// end ; 14 :
72788: GO 73207
72790: LD_INT 14
72792: DOUBLE
72793: EQUAL
72794: IFTRUE 72798
72796: GO 72809
72798: POP
// bc_type := b_workshop ; 15 :
72799: LD_ADDR_OWVAR 42
72803: PUSH
72804: LD_INT 2
72806: ST_TO_ADDR
72807: GO 73207
72809: LD_INT 15
72811: DOUBLE
72812: EQUAL
72813: IFTRUE 72817
72815: GO 72828
72817: POP
// bc_type := b_factory ; 16 :
72818: LD_ADDR_OWVAR 42
72822: PUSH
72823: LD_INT 3
72825: ST_TO_ADDR
72826: GO 73207
72828: LD_INT 16
72830: DOUBLE
72831: EQUAL
72832: IFTRUE 72836
72834: GO 72847
72836: POP
// bc_type := b_ext_gun ; 17 :
72837: LD_ADDR_OWVAR 42
72841: PUSH
72842: LD_INT 17
72844: ST_TO_ADDR
72845: GO 73207
72847: LD_INT 17
72849: DOUBLE
72850: EQUAL
72851: IFTRUE 72855
72853: GO 72883
72855: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
72856: LD_ADDR_OWVAR 42
72860: PUSH
72861: LD_INT 19
72863: PUSH
72864: LD_INT 23
72866: PUSH
72867: LD_INT 19
72869: PUSH
72870: EMPTY
72871: LIST
72872: LIST
72873: LIST
72874: PUSH
72875: LD_VAR 0 1
72879: ARRAY
72880: ST_TO_ADDR
72881: GO 73207
72883: LD_INT 18
72885: DOUBLE
72886: EQUAL
72887: IFTRUE 72891
72889: GO 72902
72891: POP
// bc_type := b_ext_radar ; 19 :
72892: LD_ADDR_OWVAR 42
72896: PUSH
72897: LD_INT 20
72899: ST_TO_ADDR
72900: GO 73207
72902: LD_INT 19
72904: DOUBLE
72905: EQUAL
72906: IFTRUE 72910
72908: GO 72921
72910: POP
// bc_type := b_ext_radio ; 20 :
72911: LD_ADDR_OWVAR 42
72915: PUSH
72916: LD_INT 22
72918: ST_TO_ADDR
72919: GO 73207
72921: LD_INT 20
72923: DOUBLE
72924: EQUAL
72925: IFTRUE 72929
72927: GO 72940
72929: POP
// bc_type := b_ext_siberium ; 21 :
72930: LD_ADDR_OWVAR 42
72934: PUSH
72935: LD_INT 21
72937: ST_TO_ADDR
72938: GO 73207
72940: LD_INT 21
72942: DOUBLE
72943: EQUAL
72944: IFTRUE 72948
72946: GO 72959
72948: POP
// bc_type := b_ext_computer ; 22 :
72949: LD_ADDR_OWVAR 42
72953: PUSH
72954: LD_INT 24
72956: ST_TO_ADDR
72957: GO 73207
72959: LD_INT 22
72961: DOUBLE
72962: EQUAL
72963: IFTRUE 72967
72965: GO 72978
72967: POP
// bc_type := b_ext_track ; 23 :
72968: LD_ADDR_OWVAR 42
72972: PUSH
72973: LD_INT 16
72975: ST_TO_ADDR
72976: GO 73207
72978: LD_INT 23
72980: DOUBLE
72981: EQUAL
72982: IFTRUE 72986
72984: GO 72997
72986: POP
// bc_type := b_ext_laser ; 24 :
72987: LD_ADDR_OWVAR 42
72991: PUSH
72992: LD_INT 25
72994: ST_TO_ADDR
72995: GO 73207
72997: LD_INT 24
72999: DOUBLE
73000: EQUAL
73001: IFTRUE 73005
73003: GO 73016
73005: POP
// bc_type := b_control_tower ; 25 :
73006: LD_ADDR_OWVAR 42
73010: PUSH
73011: LD_INT 36
73013: ST_TO_ADDR
73014: GO 73207
73016: LD_INT 25
73018: DOUBLE
73019: EQUAL
73020: IFTRUE 73024
73022: GO 73035
73024: POP
// bc_type := b_breastwork ; 26 :
73025: LD_ADDR_OWVAR 42
73029: PUSH
73030: LD_INT 31
73032: ST_TO_ADDR
73033: GO 73207
73035: LD_INT 26
73037: DOUBLE
73038: EQUAL
73039: IFTRUE 73043
73041: GO 73054
73043: POP
// bc_type := b_bunker ; 27 :
73044: LD_ADDR_OWVAR 42
73048: PUSH
73049: LD_INT 32
73051: ST_TO_ADDR
73052: GO 73207
73054: LD_INT 27
73056: DOUBLE
73057: EQUAL
73058: IFTRUE 73062
73060: GO 73073
73062: POP
// bc_type := b_turret ; 28 :
73063: LD_ADDR_OWVAR 42
73067: PUSH
73068: LD_INT 33
73070: ST_TO_ADDR
73071: GO 73207
73073: LD_INT 28
73075: DOUBLE
73076: EQUAL
73077: IFTRUE 73081
73079: GO 73092
73081: POP
// bc_type := b_armoury ; 29 :
73082: LD_ADDR_OWVAR 42
73086: PUSH
73087: LD_INT 4
73089: ST_TO_ADDR
73090: GO 73207
73092: LD_INT 29
73094: DOUBLE
73095: EQUAL
73096: IFTRUE 73100
73098: GO 73111
73100: POP
// bc_type := b_barracks ; 30 :
73101: LD_ADDR_OWVAR 42
73105: PUSH
73106: LD_INT 5
73108: ST_TO_ADDR
73109: GO 73207
73111: LD_INT 30
73113: DOUBLE
73114: EQUAL
73115: IFTRUE 73119
73117: GO 73130
73119: POP
// bc_type := b_solar_power ; 31 :
73120: LD_ADDR_OWVAR 42
73124: PUSH
73125: LD_INT 27
73127: ST_TO_ADDR
73128: GO 73207
73130: LD_INT 31
73132: DOUBLE
73133: EQUAL
73134: IFTRUE 73138
73136: GO 73149
73138: POP
// bc_type := b_oil_power ; 32 :
73139: LD_ADDR_OWVAR 42
73143: PUSH
73144: LD_INT 26
73146: ST_TO_ADDR
73147: GO 73207
73149: LD_INT 32
73151: DOUBLE
73152: EQUAL
73153: IFTRUE 73157
73155: GO 73168
73157: POP
// bc_type := b_siberite_power ; 33 :
73158: LD_ADDR_OWVAR 42
73162: PUSH
73163: LD_INT 28
73165: ST_TO_ADDR
73166: GO 73207
73168: LD_INT 33
73170: DOUBLE
73171: EQUAL
73172: IFTRUE 73176
73174: GO 73187
73176: POP
// bc_type := b_oil_mine ; 34 :
73177: LD_ADDR_OWVAR 42
73181: PUSH
73182: LD_INT 29
73184: ST_TO_ADDR
73185: GO 73207
73187: LD_INT 34
73189: DOUBLE
73190: EQUAL
73191: IFTRUE 73195
73193: GO 73206
73195: POP
// bc_type := b_siberite_mine ; end ;
73196: LD_ADDR_OWVAR 42
73200: PUSH
73201: LD_INT 30
73203: ST_TO_ADDR
73204: GO 73207
73206: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
73207: LD_ADDR_VAR 0 8
73211: PUSH
73212: LD_VAR 0 5
73216: PPUSH
73217: LD_VAR 0 6
73221: PPUSH
73222: LD_VAR 0 3
73226: PPUSH
73227: CALL_OW 47
73231: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
73232: LD_OWVAR 42
73236: PUSH
73237: LD_INT 32
73239: PUSH
73240: LD_INT 33
73242: PUSH
73243: EMPTY
73244: LIST
73245: LIST
73246: IN
73247: IFFALSE 73263
// PlaceWeaponTurret ( b , weapon ) ;
73249: LD_VAR 0 8
73253: PPUSH
73254: LD_VAR 0 4
73258: PPUSH
73259: CALL_OW 431
// end ;
73263: LD_VAR 0 7
73267: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
73268: LD_INT 0
73270: PPUSH
73271: PPUSH
73272: PPUSH
73273: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
73274: LD_ADDR_VAR 0 4
73278: PUSH
73279: LD_INT 22
73281: PUSH
73282: LD_OWVAR 2
73286: PUSH
73287: EMPTY
73288: LIST
73289: LIST
73290: PUSH
73291: LD_INT 2
73293: PUSH
73294: LD_INT 30
73296: PUSH
73297: LD_INT 0
73299: PUSH
73300: EMPTY
73301: LIST
73302: LIST
73303: PUSH
73304: LD_INT 30
73306: PUSH
73307: LD_INT 1
73309: PUSH
73310: EMPTY
73311: LIST
73312: LIST
73313: PUSH
73314: EMPTY
73315: LIST
73316: LIST
73317: LIST
73318: PUSH
73319: EMPTY
73320: LIST
73321: LIST
73322: PPUSH
73323: CALL_OW 69
73327: ST_TO_ADDR
// if not tmp then
73328: LD_VAR 0 4
73332: NOT
73333: IFFALSE 73337
// exit ;
73335: GO 73396
// for i in tmp do
73337: LD_ADDR_VAR 0 2
73341: PUSH
73342: LD_VAR 0 4
73346: PUSH
73347: FOR_IN
73348: IFFALSE 73394
// for j = 1 to 3 do
73350: LD_ADDR_VAR 0 3
73354: PUSH
73355: DOUBLE
73356: LD_INT 1
73358: DEC
73359: ST_TO_ADDR
73360: LD_INT 3
73362: PUSH
73363: FOR_TO
73364: IFFALSE 73390
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
73366: LD_VAR 0 2
73370: PPUSH
73371: CALL_OW 274
73375: PPUSH
73376: LD_VAR 0 3
73380: PPUSH
73381: LD_INT 99999
73383: PPUSH
73384: CALL_OW 277
73388: GO 73363
73390: POP
73391: POP
73392: GO 73347
73394: POP
73395: POP
// end ;
73396: LD_VAR 0 1
73400: RET
// export function hHackSetLevel10 ; var i , j ; begin
73401: LD_INT 0
73403: PPUSH
73404: PPUSH
73405: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
73406: LD_ADDR_VAR 0 2
73410: PUSH
73411: LD_INT 21
73413: PUSH
73414: LD_INT 1
73416: PUSH
73417: EMPTY
73418: LIST
73419: LIST
73420: PPUSH
73421: CALL_OW 69
73425: PUSH
73426: FOR_IN
73427: IFFALSE 73479
// if IsSelected ( i ) then
73429: LD_VAR 0 2
73433: PPUSH
73434: CALL_OW 306
73438: IFFALSE 73477
// begin for j := 1 to 4 do
73440: LD_ADDR_VAR 0 3
73444: PUSH
73445: DOUBLE
73446: LD_INT 1
73448: DEC
73449: ST_TO_ADDR
73450: LD_INT 4
73452: PUSH
73453: FOR_TO
73454: IFFALSE 73475
// SetSkill ( i , j , 10 ) ;
73456: LD_VAR 0 2
73460: PPUSH
73461: LD_VAR 0 3
73465: PPUSH
73466: LD_INT 10
73468: PPUSH
73469: CALL_OW 237
73473: GO 73453
73475: POP
73476: POP
// end ;
73477: GO 73426
73479: POP
73480: POP
// end ;
73481: LD_VAR 0 1
73485: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
73486: LD_INT 0
73488: PPUSH
73489: PPUSH
73490: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
73491: LD_ADDR_VAR 0 2
73495: PUSH
73496: LD_INT 22
73498: PUSH
73499: LD_OWVAR 2
73503: PUSH
73504: EMPTY
73505: LIST
73506: LIST
73507: PUSH
73508: LD_INT 21
73510: PUSH
73511: LD_INT 1
73513: PUSH
73514: EMPTY
73515: LIST
73516: LIST
73517: PUSH
73518: EMPTY
73519: LIST
73520: LIST
73521: PPUSH
73522: CALL_OW 69
73526: PUSH
73527: FOR_IN
73528: IFFALSE 73569
// begin for j := 1 to 4 do
73530: LD_ADDR_VAR 0 3
73534: PUSH
73535: DOUBLE
73536: LD_INT 1
73538: DEC
73539: ST_TO_ADDR
73540: LD_INT 4
73542: PUSH
73543: FOR_TO
73544: IFFALSE 73565
// SetSkill ( i , j , 10 ) ;
73546: LD_VAR 0 2
73550: PPUSH
73551: LD_VAR 0 3
73555: PPUSH
73556: LD_INT 10
73558: PPUSH
73559: CALL_OW 237
73563: GO 73543
73565: POP
73566: POP
// end ;
73567: GO 73527
73569: POP
73570: POP
// end ;
73571: LD_VAR 0 1
73575: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
73576: LD_INT 0
73578: PPUSH
// uc_side := your_side ;
73579: LD_ADDR_OWVAR 20
73583: PUSH
73584: LD_OWVAR 2
73588: ST_TO_ADDR
// uc_nation := nation ;
73589: LD_ADDR_OWVAR 21
73593: PUSH
73594: LD_VAR 0 1
73598: ST_TO_ADDR
// InitHc ;
73599: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
73603: LD_INT 0
73605: PPUSH
73606: LD_VAR 0 2
73610: PPUSH
73611: LD_VAR 0 3
73615: PPUSH
73616: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
73620: LD_VAR 0 4
73624: PPUSH
73625: LD_VAR 0 5
73629: PPUSH
73630: CALL_OW 428
73634: PUSH
73635: LD_INT 0
73637: EQUAL
73638: IFFALSE 73662
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
73640: CALL_OW 44
73644: PPUSH
73645: LD_VAR 0 4
73649: PPUSH
73650: LD_VAR 0 5
73654: PPUSH
73655: LD_INT 1
73657: PPUSH
73658: CALL_OW 48
// end ;
73662: LD_VAR 0 6
73666: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
73667: LD_INT 0
73669: PPUSH
73670: PPUSH
// uc_side := your_side ;
73671: LD_ADDR_OWVAR 20
73675: PUSH
73676: LD_OWVAR 2
73680: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
73681: LD_VAR 0 1
73685: PUSH
73686: LD_INT 1
73688: PUSH
73689: LD_INT 2
73691: PUSH
73692: LD_INT 3
73694: PUSH
73695: LD_INT 4
73697: PUSH
73698: LD_INT 5
73700: PUSH
73701: EMPTY
73702: LIST
73703: LIST
73704: LIST
73705: LIST
73706: LIST
73707: IN
73708: IFFALSE 73720
// uc_nation := nation_american else
73710: LD_ADDR_OWVAR 21
73714: PUSH
73715: LD_INT 1
73717: ST_TO_ADDR
73718: GO 73763
// if chassis in [ 11 , 12 , 13 , 14 ] then
73720: LD_VAR 0 1
73724: PUSH
73725: LD_INT 11
73727: PUSH
73728: LD_INT 12
73730: PUSH
73731: LD_INT 13
73733: PUSH
73734: LD_INT 14
73736: PUSH
73737: EMPTY
73738: LIST
73739: LIST
73740: LIST
73741: LIST
73742: IN
73743: IFFALSE 73755
// uc_nation := nation_arabian else
73745: LD_ADDR_OWVAR 21
73749: PUSH
73750: LD_INT 2
73752: ST_TO_ADDR
73753: GO 73763
// uc_nation := nation_russian ;
73755: LD_ADDR_OWVAR 21
73759: PUSH
73760: LD_INT 3
73762: ST_TO_ADDR
// vc_chassis := chassis ;
73763: LD_ADDR_OWVAR 37
73767: PUSH
73768: LD_VAR 0 1
73772: ST_TO_ADDR
// vc_engine := engine ;
73773: LD_ADDR_OWVAR 39
73777: PUSH
73778: LD_VAR 0 2
73782: ST_TO_ADDR
// vc_control := control ;
73783: LD_ADDR_OWVAR 38
73787: PUSH
73788: LD_VAR 0 3
73792: ST_TO_ADDR
// vc_weapon := weapon ;
73793: LD_ADDR_OWVAR 40
73797: PUSH
73798: LD_VAR 0 4
73802: ST_TO_ADDR
// un := CreateVehicle ;
73803: LD_ADDR_VAR 0 8
73807: PUSH
73808: CALL_OW 45
73812: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
73813: LD_VAR 0 8
73817: PPUSH
73818: LD_INT 0
73820: PPUSH
73821: LD_INT 5
73823: PPUSH
73824: CALL_OW 12
73828: PPUSH
73829: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
73833: LD_VAR 0 8
73837: PPUSH
73838: LD_VAR 0 5
73842: PPUSH
73843: LD_VAR 0 6
73847: PPUSH
73848: LD_INT 1
73850: PPUSH
73851: CALL_OW 48
// end ;
73855: LD_VAR 0 7
73859: RET
// export hInvincible ; every 1 do
73860: GO 73862
73862: DISABLE
// hInvincible := [ ] ;
73863: LD_ADDR_EXP 100
73867: PUSH
73868: EMPTY
73869: ST_TO_ADDR
73870: END
// every 10 do var i ;
73871: GO 73873
73873: DISABLE
73874: LD_INT 0
73876: PPUSH
// begin enable ;
73877: ENABLE
// if not hInvincible then
73878: LD_EXP 100
73882: NOT
73883: IFFALSE 73887
// exit ;
73885: GO 73931
// for i in hInvincible do
73887: LD_ADDR_VAR 0 1
73891: PUSH
73892: LD_EXP 100
73896: PUSH
73897: FOR_IN
73898: IFFALSE 73929
// if GetLives ( i ) < 1000 then
73900: LD_VAR 0 1
73904: PPUSH
73905: CALL_OW 256
73909: PUSH
73910: LD_INT 1000
73912: LESS
73913: IFFALSE 73927
// SetLives ( i , 1000 ) ;
73915: LD_VAR 0 1
73919: PPUSH
73920: LD_INT 1000
73922: PPUSH
73923: CALL_OW 234
73927: GO 73897
73929: POP
73930: POP
// end ;
73931: PPOPN 1
73933: END
// export function hHackInvincible ; var i ; begin
73934: LD_INT 0
73936: PPUSH
73937: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
73938: LD_ADDR_VAR 0 2
73942: PUSH
73943: LD_INT 2
73945: PUSH
73946: LD_INT 21
73948: PUSH
73949: LD_INT 1
73951: PUSH
73952: EMPTY
73953: LIST
73954: LIST
73955: PUSH
73956: LD_INT 21
73958: PUSH
73959: LD_INT 2
73961: PUSH
73962: EMPTY
73963: LIST
73964: LIST
73965: PUSH
73966: EMPTY
73967: LIST
73968: LIST
73969: LIST
73970: PPUSH
73971: CALL_OW 69
73975: PUSH
73976: FOR_IN
73977: IFFALSE 74038
// if IsSelected ( i ) then
73979: LD_VAR 0 2
73983: PPUSH
73984: CALL_OW 306
73988: IFFALSE 74036
// begin if i in hInvincible then
73990: LD_VAR 0 2
73994: PUSH
73995: LD_EXP 100
73999: IN
74000: IFFALSE 74020
// hInvincible := hInvincible diff i else
74002: LD_ADDR_EXP 100
74006: PUSH
74007: LD_EXP 100
74011: PUSH
74012: LD_VAR 0 2
74016: DIFF
74017: ST_TO_ADDR
74018: GO 74036
// hInvincible := hInvincible union i ;
74020: LD_ADDR_EXP 100
74024: PUSH
74025: LD_EXP 100
74029: PUSH
74030: LD_VAR 0 2
74034: UNION
74035: ST_TO_ADDR
// end ;
74036: GO 73976
74038: POP
74039: POP
// end ;
74040: LD_VAR 0 1
74044: RET
// export function hHackInvisible ; var i , j ; begin
74045: LD_INT 0
74047: PPUSH
74048: PPUSH
74049: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
74050: LD_ADDR_VAR 0 2
74054: PUSH
74055: LD_INT 21
74057: PUSH
74058: LD_INT 1
74060: PUSH
74061: EMPTY
74062: LIST
74063: LIST
74064: PPUSH
74065: CALL_OW 69
74069: PUSH
74070: FOR_IN
74071: IFFALSE 74095
// if IsSelected ( i ) then
74073: LD_VAR 0 2
74077: PPUSH
74078: CALL_OW 306
74082: IFFALSE 74093
// ComForceInvisible ( i ) ;
74084: LD_VAR 0 2
74088: PPUSH
74089: CALL_OW 496
74093: GO 74070
74095: POP
74096: POP
// end ;
74097: LD_VAR 0 1
74101: RET
// export function hHackChangeYourSide ; begin
74102: LD_INT 0
74104: PPUSH
// if your_side = 8 then
74105: LD_OWVAR 2
74109: PUSH
74110: LD_INT 8
74112: EQUAL
74113: IFFALSE 74125
// your_side := 0 else
74115: LD_ADDR_OWVAR 2
74119: PUSH
74120: LD_INT 0
74122: ST_TO_ADDR
74123: GO 74139
// your_side := your_side + 1 ;
74125: LD_ADDR_OWVAR 2
74129: PUSH
74130: LD_OWVAR 2
74134: PUSH
74135: LD_INT 1
74137: PLUS
74138: ST_TO_ADDR
// end ;
74139: LD_VAR 0 1
74143: RET
// export function hHackChangeUnitSide ; var i , j ; begin
74144: LD_INT 0
74146: PPUSH
74147: PPUSH
74148: PPUSH
// for i in all_units do
74149: LD_ADDR_VAR 0 2
74153: PUSH
74154: LD_OWVAR 3
74158: PUSH
74159: FOR_IN
74160: IFFALSE 74238
// if IsSelected ( i ) then
74162: LD_VAR 0 2
74166: PPUSH
74167: CALL_OW 306
74171: IFFALSE 74236
// begin j := GetSide ( i ) ;
74173: LD_ADDR_VAR 0 3
74177: PUSH
74178: LD_VAR 0 2
74182: PPUSH
74183: CALL_OW 255
74187: ST_TO_ADDR
// if j = 8 then
74188: LD_VAR 0 3
74192: PUSH
74193: LD_INT 8
74195: EQUAL
74196: IFFALSE 74208
// j := 0 else
74198: LD_ADDR_VAR 0 3
74202: PUSH
74203: LD_INT 0
74205: ST_TO_ADDR
74206: GO 74222
// j := j + 1 ;
74208: LD_ADDR_VAR 0 3
74212: PUSH
74213: LD_VAR 0 3
74217: PUSH
74218: LD_INT 1
74220: PLUS
74221: ST_TO_ADDR
// SetSide ( i , j ) ;
74222: LD_VAR 0 2
74226: PPUSH
74227: LD_VAR 0 3
74231: PPUSH
74232: CALL_OW 235
// end ;
74236: GO 74159
74238: POP
74239: POP
// end ;
74240: LD_VAR 0 1
74244: RET
// export function hHackFog ; begin
74245: LD_INT 0
74247: PPUSH
// FogOff ( true ) ;
74248: LD_INT 1
74250: PPUSH
74251: CALL_OW 344
// end ;
74255: LD_VAR 0 1
74259: RET
// export function hHackTeleport ( unit , x , y ) ; begin
74260: LD_INT 0
74262: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
74263: LD_VAR 0 1
74267: PPUSH
74268: LD_VAR 0 2
74272: PPUSH
74273: LD_VAR 0 3
74277: PPUSH
74278: LD_INT 1
74280: PPUSH
74281: LD_INT 1
74283: PPUSH
74284: CALL_OW 483
// CenterOnXY ( x , y ) ;
74288: LD_VAR 0 2
74292: PPUSH
74293: LD_VAR 0 3
74297: PPUSH
74298: CALL_OW 84
// end ; end_of_file
74302: LD_VAR 0 4
74306: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74307: LD_VAR 0 1
74311: PPUSH
74312: LD_VAR 0 2
74316: PPUSH
74317: LD_VAR 0 3
74321: PPUSH
74322: LD_VAR 0 4
74326: PPUSH
74327: LD_VAR 0 5
74331: PPUSH
74332: LD_VAR 0 6
74336: PPUSH
74337: CALL 60020 0 6
// end ; end_of_file end_of_file
74341: PPOPN 6
74343: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
74344: LD_INT 0
74346: PPUSH
// ar_miner := 81 ;
74347: LD_ADDR_EXP 108
74351: PUSH
74352: LD_INT 81
74354: ST_TO_ADDR
// ar_crane := 88 ;
74355: LD_ADDR_EXP 107
74359: PUSH
74360: LD_INT 88
74362: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
74363: LD_ADDR_EXP 102
74367: PUSH
74368: LD_INT 89
74370: ST_TO_ADDR
// us_hack := 99 ;
74371: LD_ADDR_EXP 103
74375: PUSH
74376: LD_INT 99
74378: ST_TO_ADDR
// us_artillery := 97 ;
74379: LD_ADDR_EXP 104
74383: PUSH
74384: LD_INT 97
74386: ST_TO_ADDR
// ar_bio_bomb := 91 ;
74387: LD_ADDR_EXP 105
74391: PUSH
74392: LD_INT 91
74394: ST_TO_ADDR
// ar_mortar := 92 ;
74395: LD_ADDR_EXP 106
74399: PUSH
74400: LD_INT 92
74402: ST_TO_ADDR
// ru_radar := 98 ;
74403: LD_ADDR_EXP 101
74407: PUSH
74408: LD_INT 98
74410: ST_TO_ADDR
// tech_Artillery := 80 ;
74411: LD_ADDR_EXP 109
74415: PUSH
74416: LD_INT 80
74418: ST_TO_ADDR
// tech_RadMat := 81 ;
74419: LD_ADDR_EXP 110
74423: PUSH
74424: LD_INT 81
74426: ST_TO_ADDR
// tech_BasicTools := 82 ;
74427: LD_ADDR_EXP 111
74431: PUSH
74432: LD_INT 82
74434: ST_TO_ADDR
// tech_Cargo := 83 ;
74435: LD_ADDR_EXP 112
74439: PUSH
74440: LD_INT 83
74442: ST_TO_ADDR
// tech_Track := 84 ;
74443: LD_ADDR_EXP 113
74447: PUSH
74448: LD_INT 84
74450: ST_TO_ADDR
// tech_Crane := 85 ;
74451: LD_ADDR_EXP 114
74455: PUSH
74456: LD_INT 85
74458: ST_TO_ADDR
// tech_Bulldozer := 86 ;
74459: LD_ADDR_EXP 115
74463: PUSH
74464: LD_INT 86
74466: ST_TO_ADDR
// tech_Hovercraft := 87 ;
74467: LD_ADDR_EXP 116
74471: PUSH
74472: LD_INT 87
74474: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
74475: LD_ADDR_EXP 117
74479: PUSH
74480: LD_INT 88
74482: ST_TO_ADDR
// class_mastodont := 31 ;
74483: LD_ADDR_EXP 118
74487: PUSH
74488: LD_INT 31
74490: ST_TO_ADDR
// class_horse := 21 ;
74491: LD_ADDR_EXP 119
74495: PUSH
74496: LD_INT 21
74498: ST_TO_ADDR
// end ;
74499: LD_VAR 0 1
74503: RET
// every 1 do
74504: GO 74506
74506: DISABLE
// InitGlobalVariables ;
74507: CALL 74344 0 0
74511: END
