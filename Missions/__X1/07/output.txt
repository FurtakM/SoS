// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 62 0 0
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// CreateNature ( apemanSpawnArea , forestArea , riverArea ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 5
  20: PPUSH
  21: LD_INT 6
  23: PPUSH
  24: CALL 441 0 3
// PrepareAmerican ;
  28: CALL 2520 0 0
// PrepareArabian ;
  32: CALL 1161 0 0
// Action ;
  36: CALL 8166 0 0
// if debug then
  40: LD_EXP 1
  44: IFFALSE 61
// begin Difficulty := 4 ;
  46: LD_ADDR_OWVAR 67
  50: PUSH
  51: LD_INT 4
  53: ST_TO_ADDR
// FogOff ( 2 ) ;
  54: LD_INT 2
  56: PPUSH
  57: CALL_OW 344
// end ; end ;
  61: END
// export debug , prefix , scoutActive , scoutFailed , scoutSuccess , usAttacksAllowed , usSurrender , russianAttack , hasRockets , seeRemoteVehicle , seeHeavyGun , remoteControlLimit , sniperKillCounter , vehLossCounter ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// debug := false ;
  65: LD_ADDR_EXP 1
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// prefix := 06_ ;
  73: LD_ADDR_EXP 2
  77: PUSH
  78: LD_STRING 06_
  80: ST_TO_ADDR
// scoutActive := 0 ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// scoutFailed := false ;
  89: LD_ADDR_EXP 4
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// scoutSuccess := false ;
  97: LD_ADDR_EXP 5
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// usAttacksAllowed := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usSurrender := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// russianAttack := false ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// hasRockets := false ;
 129: LD_ADDR_EXP 9
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// seeRemoteVehicle := false ;
 137: LD_ADDR_EXP 10
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// seeHeavyGun := false ;
 145: LD_ADDR_EXP 11
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlLimit := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: LD_INT 2
 163: PUSH
 164: LD_INT 2
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// sniperKillCounter := 0 ;
 182: LD_ADDR_EXP 13
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// vehLossCounter := 0 ;
 190: LD_ADDR_EXP 14
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// end ;
 198: LD_VAR 0 1
 202: RET
// every 0 0$2 trigger sniperKillCounter >= 3 do
 203: LD_EXP 13
 207: PUSH
 208: LD_INT 3
 210: GREATEREQUAL
 211: IFFALSE 223
 213: GO 215
 215: DISABLE
// SetAchievement ( ACH_ANTSNIPER ) ; end_of_file
 216: LD_STRING ACH_ANTSNIPER
 218: PPUSH
 219: CALL_OW 543
 223: END
// export function SayX ( units , ident ) ; var i ; begin
 224: LD_INT 0
 226: PPUSH
 227: PPUSH
// result := false ;
 228: LD_ADDR_VAR 0 3
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// if not units then
 236: LD_VAR 0 1
 240: NOT
 241: IFFALSE 245
// exit ;
 243: GO 299
// for i in units do
 245: LD_ADDR_VAR 0 4
 249: PUSH
 250: LD_VAR 0 1
 254: PUSH
 255: FOR_IN
 256: IFFALSE 297
// if IsOk ( i ) then
 258: LD_VAR 0 4
 262: PPUSH
 263: CALL_OW 302
 267: IFFALSE 295
// begin Say ( i , ident ) ;
 269: LD_VAR 0 4
 273: PPUSH
 274: LD_VAR 0 2
 278: PPUSH
 279: CALL_OW 88
// result := i ;
 283: LD_ADDR_VAR 0 3
 287: PUSH
 288: LD_VAR 0 4
 292: ST_TO_ADDR
// break ;
 293: GO 297
// end ;
 295: GO 255
 297: POP
 298: POP
// end ;
 299: LD_VAR 0 3
 303: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 304: LD_INT 0
 306: PPUSH
 307: PPUSH
// InitUc ;
 308: CALL_OW 18
// InitHc ;
 312: CALL_OW 19
// uc_side := 0 ;
 316: LD_ADDR_OWVAR 20
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// uc_nation := 0 ;
 324: LD_ADDR_OWVAR 21
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// for i = 1 to amount do
 332: LD_ADDR_VAR 0 4
 336: PUSH
 337: DOUBLE
 338: LD_INT 1
 340: DEC
 341: ST_TO_ADDR
 342: LD_VAR 0 2
 346: PUSH
 347: FOR_TO
 348: IFFALSE 430
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 350: LD_ADDR_OWVAR 29
 354: PUSH
 355: LD_INT 9
 357: PPUSH
 358: LD_INT 12
 360: PPUSH
 361: CALL_OW 12
 365: PUSH
 366: LD_INT 9
 368: PPUSH
 369: LD_INT 12
 371: PPUSH
 372: CALL_OW 12
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 381: LD_ADDR_OWVAR 35
 385: PUSH
 386: LD_INT 1
 388: NEG
 389: PPUSH
 390: LD_INT 1
 392: PPUSH
 393: CALL_OW 12
 397: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 398: LD_INT 0
 400: PPUSH
 401: LD_INT 12
 403: PPUSH
 404: LD_INT 1
 406: PPUSH
 407: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 411: CALL_OW 44
 415: PPUSH
 416: LD_VAR 0 1
 420: PPUSH
 421: LD_INT 0
 423: PPUSH
 424: CALL_OW 49
// end ;
 428: GO 347
 430: POP
 431: POP
// InitHc ;
 432: CALL_OW 19
// end ;
 436: LD_VAR 0 3
 440: RET
// export function CreateNature ( apemanArea , forest , water ) ; var i ; begin
 441: LD_INT 0
 443: PPUSH
 444: PPUSH
// uc_side := 0 ;
 445: LD_ADDR_OWVAR 20
 449: PUSH
 450: LD_INT 0
 452: ST_TO_ADDR
// uc_nation := 0 ;
 453: LD_ADDR_OWVAR 21
 457: PUSH
 458: LD_INT 0
 460: ST_TO_ADDR
// SpawnApeman ( apemanArea , [ 9 , 8 , 7 , 6 ] [ Difficulty ] ) ;
 461: LD_VAR 0 1
 465: PPUSH
 466: LD_INT 9
 468: PUSH
 469: LD_INT 8
 471: PUSH
 472: LD_INT 7
 474: PUSH
 475: LD_INT 6
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: PUSH
 484: LD_OWVAR 67
 488: ARRAY
 489: PPUSH
 490: CALL 304 0 2
// for i := 1 to 4 do
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: DOUBLE
 500: LD_INT 1
 502: DEC
 503: ST_TO_ADDR
 504: LD_INT 4
 506: PUSH
 507: FOR_TO
 508: IFFALSE 545
// begin hc_class := class_horse ;
 510: LD_ADDR_OWVAR 28
 514: PUSH
 515: LD_INT 21
 517: ST_TO_ADDR
// hc_gallery :=  ;
 518: LD_ADDR_OWVAR 33
 522: PUSH
 523: LD_STRING 
 525: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 526: CALL_OW 44
 530: PPUSH
 531: LD_VAR 0 2
 535: PPUSH
 536: LD_INT 0
 538: PPUSH
 539: CALL_OW 49
// end ;
 543: GO 507
 545: POP
 546: POP
// for i = 1 to 5 do
 547: LD_ADDR_VAR 0 5
 551: PUSH
 552: DOUBLE
 553: LD_INT 1
 555: DEC
 556: ST_TO_ADDR
 557: LD_INT 5
 559: PUSH
 560: FOR_TO
 561: IFFALSE 615
// begin hc_class = class_tiger ;
 563: LD_ADDR_OWVAR 28
 567: PUSH
 568: LD_INT 14
 570: ST_TO_ADDR
// hc_gallery =  ;
 571: LD_ADDR_OWVAR 33
 575: PUSH
 576: LD_STRING 
 578: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 579: LD_ADDR_OWVAR 35
 583: PUSH
 584: LD_INT 7
 586: NEG
 587: PPUSH
 588: LD_INT 7
 590: PPUSH
 591: CALL_OW 12
 595: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 596: CALL_OW 44
 600: PPUSH
 601: LD_VAR 0 2
 605: PPUSH
 606: LD_INT 0
 608: PPUSH
 609: CALL_OW 49
// end ;
 613: GO 560
 615: POP
 616: POP
// for i := 1 to 4 do
 617: LD_ADDR_VAR 0 5
 621: PUSH
 622: DOUBLE
 623: LD_INT 1
 625: DEC
 626: ST_TO_ADDR
 627: LD_INT 4
 629: PUSH
 630: FOR_TO
 631: IFFALSE 668
// begin hc_class := class_phororhacos ;
 633: LD_ADDR_OWVAR 28
 637: PUSH
 638: LD_INT 18
 640: ST_TO_ADDR
// hc_gallery :=  ;
 641: LD_ADDR_OWVAR 33
 645: PUSH
 646: LD_STRING 
 648: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 649: CALL_OW 44
 653: PPUSH
 654: LD_VAR 0 2
 658: PPUSH
 659: LD_INT 0
 661: PPUSH
 662: CALL_OW 49
// end ;
 666: GO 630
 668: POP
 669: POP
// for i := 1 to 4 do
 670: LD_ADDR_VAR 0 5
 674: PUSH
 675: DOUBLE
 676: LD_INT 1
 678: DEC
 679: ST_TO_ADDR
 680: LD_INT 4
 682: PUSH
 683: FOR_TO
 684: IFFALSE 721
// begin hc_class := class_baggie ;
 686: LD_ADDR_OWVAR 28
 690: PUSH
 691: LD_INT 13
 693: ST_TO_ADDR
// hc_gallery :=  ;
 694: LD_ADDR_OWVAR 33
 698: PUSH
 699: LD_STRING 
 701: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 702: CALL_OW 44
 706: PPUSH
 707: LD_VAR 0 2
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 683
 721: POP
 722: POP
// for i := 1 to 5 do
 723: LD_ADDR_VAR 0 5
 727: PUSH
 728: DOUBLE
 729: LD_INT 1
 731: DEC
 732: ST_TO_ADDR
 733: LD_INT 5
 735: PUSH
 736: FOR_TO
 737: IFFALSE 774
// begin hc_class := class_fish ;
 739: LD_ADDR_OWVAR 28
 743: PUSH
 744: LD_INT 20
 746: ST_TO_ADDR
// hc_gallery :=  ;
 747: LD_ADDR_OWVAR 33
 751: PUSH
 752: LD_STRING 
 754: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , water , false ) ;
 755: CALL_OW 44
 759: PPUSH
 760: LD_VAR 0 3
 764: PPUSH
 765: LD_INT 0
 767: PPUSH
 768: CALL_OW 49
// end ;
 772: GO 736
 774: POP
 775: POP
// end ;
 776: LD_VAR 0 4
 780: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
// if not observer or not unit then
 786: LD_VAR 0 1
 790: NOT
 791: PUSH
 792: LD_VAR 0 2
 796: NOT
 797: OR
 798: IFFALSE 802
// exit ;
 800: GO 850
// if not See ( GetSide ( observer ) , unit ) then
 802: LD_VAR 0 1
 806: PPUSH
 807: CALL_OW 255
 811: PPUSH
 812: LD_VAR 0 2
 816: PPUSH
 817: CALL_OW 292
 821: NOT
 822: IFFALSE 826
// exit ;
 824: GO 850
// result := GetDistUnits ( observer , unit ) < 12 ;
 826: LD_ADDR_VAR 0 3
 830: PUSH
 831: LD_VAR 0 1
 835: PPUSH
 836: LD_VAR 0 2
 840: PPUSH
 841: CALL_OW 296
 845: PUSH
 846: LD_INT 12
 848: LESS
 849: ST_TO_ADDR
// end ;
 850: LD_VAR 0 3
 854: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 855: LD_INT 0
 857: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 858: LD_VAR 0 2
 862: PUSH
 863: LD_INT 1
 865: ARRAY
 866: PPUSH
 867: LD_VAR 0 2
 871: PUSH
 872: LD_INT 2
 874: ARRAY
 875: PPUSH
 876: CALL_OW 488
 880: PUSH
 881: LD_VAR 0 2
 885: PUSH
 886: LD_INT 1
 888: ARRAY
 889: PPUSH
 890: LD_VAR 0 2
 894: PUSH
 895: LD_INT 2
 897: ARRAY
 898: PPUSH
 899: CALL_OW 428
 903: PUSH
 904: LD_INT 0
 906: EQUAL
 907: AND
 908: IFFALSE 942
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 910: LD_VAR 0 1
 914: PPUSH
 915: LD_VAR 0 2
 919: PUSH
 920: LD_INT 1
 922: ARRAY
 923: PPUSH
 924: LD_VAR 0 2
 928: PUSH
 929: LD_INT 2
 931: ARRAY
 932: PPUSH
 933: LD_VAR 0 3
 937: PPUSH
 938: CALL_OW 48
// end ;
 942: LD_VAR 0 4
 946: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
 947: LD_INT 0
 949: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
 950: LD_VAR 0 1
 954: PPUSH
 955: LD_VAR 0 2
 959: PPUSH
 960: LD_VAR 0 3
 964: PPUSH
 965: LD_VAR 0 4
 969: PPUSH
 970: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
 974: LD_VAR 0 1
 978: PPUSH
 979: LD_VAR 0 2
 983: PPUSH
 984: LD_VAR 0 3
 988: PPUSH
 989: CALL_OW 331
// end ;
 993: LD_VAR 0 5
 997: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
 998: LD_INT 0
1000: PPUSH
// if not units then
1001: LD_VAR 0 1
1005: NOT
1006: IFFALSE 1010
// exit ;
1008: GO 1093
// result := true ;
1010: LD_ADDR_VAR 0 4
1014: PUSH
1015: LD_INT 1
1017: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1018: LD_VAR 0 1
1022: PPUSH
1023: LD_INT 26
1025: PUSH
1026: LD_INT 1
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: PPUSH
1033: CALL_OW 72
1037: PUSH
1038: LD_INT 1
1040: ARRAY
1041: PPUSH
1042: LD_VAR 0 2
1046: PPUSH
1047: CALL_OW 88
1051: NOT
1052: IFFALSE 1093
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1054: LD_ADDR_VAR 0 4
1058: PUSH
1059: LD_VAR 0 1
1063: PPUSH
1064: LD_INT 26
1066: PUSH
1067: LD_INT 2
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: PPUSH
1074: CALL_OW 72
1078: PUSH
1079: LD_INT 1
1081: ARRAY
1082: PPUSH
1083: LD_VAR 0 3
1087: PPUSH
1088: CALL_OW 88
1092: ST_TO_ADDR
// end ;
1093: LD_VAR 0 4
1097: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1098: LD_INT 0
1100: PPUSH
1101: PPUSH
// if not group then
1102: LD_VAR 0 2
1106: NOT
1107: IFFALSE 1111
// exit ;
1109: GO 1156
// for i in group do
1111: LD_ADDR_VAR 0 4
1115: PUSH
1116: LD_VAR 0 2
1120: PUSH
1121: FOR_IN
1122: IFFALSE 1154
// if See ( side , i ) then
1124: LD_VAR 0 1
1128: PPUSH
1129: LD_VAR 0 4
1133: PPUSH
1134: CALL_OW 292
1138: IFFALSE 1152
// begin result := true ;
1140: LD_ADDR_VAR 0 3
1144: PUSH
1145: LD_INT 1
1147: ST_TO_ADDR
// exit ;
1148: POP
1149: POP
1150: GO 1156
// end ;
1152: GO 1121
1154: POP
1155: POP
// end ; end_of_file
1156: LD_VAR 0 3
1160: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeApes , heikeVehicles ; export function PrepareArabian ; var i , tmp , counter , hasDrugs ; begin
1161: LD_INT 0
1163: PPUSH
1164: PPUSH
1165: PPUSH
1166: PPUSH
1167: PPUSH
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
1168: LD_ADDR_VAR 0 5
1172: PUSH
1173: LD_STRING 05_DrugsTested
1175: PPUSH
1176: LD_EXP 1
1180: PPUSH
1181: CALL_OW 30
1185: ST_TO_ADDR
// if hasDrugs then
1186: LD_VAR 0 5
1190: IFFALSE 1205
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
1192: LD_INT 5
1194: PPUSH
1195: LD_INT 2
1197: PPUSH
1198: LD_INT 2
1200: PPUSH
1201: CALL_OW 322
// uc_nation := 2 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 2
1212: ST_TO_ADDR
// uc_side := 5 ;
1213: LD_ADDR_OWVAR 20
1217: PUSH
1218: LD_INT 5
1220: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1221: LD_ADDR_EXP 23
1225: PUSH
1226: LD_STRING Abdul
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: LD_STRING 
1234: PPUSH
1235: CALL 16459 0 3
1239: ST_TO_ADDR
// uc_side := 2 ;
1240: LD_ADDR_OWVAR 20
1244: PUSH
1245: LD_INT 2
1247: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1248: LD_ADDR_EXP 15
1252: PUSH
1253: LD_STRING Heike
1255: PPUSH
1256: LD_EXP 1
1260: NOT
1261: PPUSH
1262: LD_EXP 2
1266: PPUSH
1267: CALL 16459 0 3
1271: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1272: LD_ADDR_EXP 18
1276: PUSH
1277: LD_STRING Ibrahim
1279: PPUSH
1280: LD_EXP 1
1284: NOT
1285: PPUSH
1286: LD_EXP 2
1290: PPUSH
1291: CALL 16459 0 3
1295: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1296: LD_ADDR_EXP 16
1300: PUSH
1301: LD_STRING Givi
1303: PPUSH
1304: LD_EXP 1
1308: NOT
1309: PPUSH
1310: LD_EXP 2
1314: PPUSH
1315: CALL 16459 0 3
1319: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1320: LD_ADDR_EXP 19
1324: PUSH
1325: LD_STRING Kamil
1327: PPUSH
1328: LD_EXP 1
1332: NOT
1333: PPUSH
1334: LD_EXP 2
1338: PPUSH
1339: CALL 16459 0 3
1343: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1344: LD_ADDR_EXP 20
1348: PUSH
1349: LD_STRING Kaia
1351: PPUSH
1352: LD_EXP 1
1356: NOT
1357: PPUSH
1358: LD_EXP 2
1362: PPUSH
1363: CALL 16459 0 3
1367: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1368: LD_ADDR_EXP 21
1372: PUSH
1373: LD_STRING Sophia
1375: PPUSH
1376: LD_EXP 1
1380: NOT
1381: PPUSH
1382: LD_EXP 2
1386: PPUSH
1387: CALL 16459 0 3
1391: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1392: LD_ADDR_EXP 22
1396: PUSH
1397: LD_STRING Markov
1399: PPUSH
1400: LD_EXP 1
1404: NOT
1405: PPUSH
1406: LD_EXP 2
1410: PPUSH
1411: CALL 16459 0 3
1415: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1416: LD_ADDR_EXP 26
1420: PUSH
1421: LD_STRING Aviradze
1423: PPUSH
1424: LD_EXP 1
1428: NOT
1429: PPUSH
1430: LD_EXP 2
1434: PPUSH
1435: CALL 16459 0 3
1439: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1440: LD_ADDR_EXP 25
1444: PUSH
1445: LD_STRING Kurt
1447: PPUSH
1448: LD_EXP 1
1452: NOT
1453: PPUSH
1454: LD_EXP 2
1458: PPUSH
1459: CALL 16459 0 3
1463: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1464: LD_ADDR_EXP 17
1468: PUSH
1469: LD_STRING Mike
1471: PPUSH
1472: LD_EXP 1
1476: NOT
1477: PPUSH
1478: LD_EXP 2
1482: PPUSH
1483: CALL 16459 0 3
1487: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1488: LD_ADDR_EXP 24
1492: PUSH
1493: LD_STRING Olaf
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: LD_EXP 2
1506: PPUSH
1507: CALL 16459 0 3
1511: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 06_others ) ;
1512: LD_ADDR_EXP 27
1516: PUSH
1517: LD_STRING 06_others
1519: PPUSH
1520: CALL_OW 31
1524: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 06_apes ) ;
1525: LD_ADDR_EXP 28
1529: PUSH
1530: LD_STRING 06_apes
1532: PPUSH
1533: CALL_OW 31
1537: ST_TO_ADDR
// if debug then
1538: LD_EXP 1
1542: IFFALSE 1815
// begin tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 750 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 900 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 100 , 0 ] ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 50 , 50 ] ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_mortar , 2 , 1000 , 0 ] ] ;
1544: LD_ADDR_VAR 0 3
1548: PUSH
1549: LD_INT 14
1551: PUSH
1552: LD_INT 1
1554: PUSH
1555: LD_INT 2
1557: PUSH
1558: LD_INT 25
1560: PUSH
1561: LD_INT 2
1563: PUSH
1564: LD_INT 1000
1566: PUSH
1567: LD_INT 0
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 14
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 31
1590: PUSH
1591: LD_INT 2
1593: PUSH
1594: LD_INT 1000
1596: PUSH
1597: LD_INT 0
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 14
1611: PUSH
1612: LD_INT 1
1614: PUSH
1615: LD_INT 1
1617: PUSH
1618: LD_INT 27
1620: PUSH
1621: LD_INT 2
1623: PUSH
1624: LD_INT 750
1626: PUSH
1627: LD_INT 0
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: PUSH
1639: LD_INT 14
1641: PUSH
1642: LD_INT 1
1644: PUSH
1645: LD_INT 1
1647: PUSH
1648: LD_INT 27
1650: PUSH
1651: LD_INT 2
1653: PUSH
1654: LD_INT 900
1656: PUSH
1657: LD_INT 0
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: PUSH
1669: LD_INT 14
1671: PUSH
1672: LD_INT 1
1674: PUSH
1675: LD_INT 1
1677: PUSH
1678: LD_INT 32
1680: PUSH
1681: LD_INT 2
1683: PUSH
1684: LD_INT 1000
1686: PUSH
1687: LD_INT 100
1689: PUSH
1690: LD_INT 0
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_INT 14
1708: PUSH
1709: LD_INT 1
1711: PUSH
1712: LD_INT 1
1714: PUSH
1715: LD_INT 32
1717: PUSH
1718: LD_INT 2
1720: PUSH
1721: LD_INT 1000
1723: PUSH
1724: LD_INT 50
1726: PUSH
1727: LD_INT 50
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: PUSH
1743: LD_INT 14
1745: PUSH
1746: LD_INT 1
1748: PUSH
1749: LD_INT 2
1751: PUSH
1752: LD_INT 27
1754: PUSH
1755: LD_INT 2
1757: PUSH
1758: LD_INT 1000
1760: PUSH
1761: LD_INT 0
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: PUSH
1773: LD_INT 14
1775: PUSH
1776: LD_INT 1
1778: PUSH
1779: LD_INT 1
1781: PUSH
1782: LD_INT 92
1784: PUSH
1785: LD_INT 2
1787: PUSH
1788: LD_INT 1000
1790: PUSH
1791: LD_INT 0
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: ST_TO_ADDR
// end else
1813: GO 1822
// tmp := [ ] ;
1815: LD_ADDR_VAR 0 3
1819: PUSH
1820: EMPTY
1821: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 06_Vehicles , tmp ) ;
1822: LD_ADDR_EXP 29
1826: PUSH
1827: LD_STRING 06_Vehicles
1829: PPUSH
1830: LD_VAR 0 3
1834: PPUSH
1835: CALL_OW 30
1839: ST_TO_ADDR
// counter := 0 ;
1840: LD_ADDR_VAR 0 4
1844: PUSH
1845: LD_INT 0
1847: ST_TO_ADDR
// if heikeVehicles then
1848: LD_EXP 29
1852: IFFALSE 1974
// begin for i := heikeVehicles downto 1 do
1854: LD_ADDR_VAR 0 2
1858: PUSH
1859: DOUBLE
1860: LD_EXP 29
1864: INC
1865: ST_TO_ADDR
1866: LD_INT 1
1868: PUSH
1869: FOR_DOWNTO
1870: IFFALSE 1972
// begin if heikeVehicles [ i ] [ 3 ] = control_remote then
1872: LD_EXP 29
1876: PUSH
1877: LD_VAR 0 2
1881: ARRAY
1882: PUSH
1883: LD_INT 3
1885: ARRAY
1886: PUSH
1887: LD_INT 2
1889: EQUAL
1890: IFFALSE 1970
// begin if counter < remoteControlLimit then
1892: LD_VAR 0 4
1896: PUSH
1897: LD_EXP 12
1901: LESS
1902: IFFALSE 1950
// begin counter := Inc ( counter ) ;
1904: LD_ADDR_VAR 0 4
1908: PUSH
1909: LD_VAR 0 4
1913: PPUSH
1914: CALL 55522 0 1
1918: ST_TO_ADDR
// heikeVehicles := Insert ( heikeVehicles , heikeVehicles , heikeVehicles [ i ] ) ;
1919: LD_ADDR_EXP 29
1923: PUSH
1924: LD_EXP 29
1928: PPUSH
1929: LD_EXP 29
1933: PPUSH
1934: LD_EXP 29
1938: PUSH
1939: LD_VAR 0 2
1943: ARRAY
1944: PPUSH
1945: CALL_OW 2
1949: ST_TO_ADDR
// end ; heikeVehicles := Delete ( heikeVehicles , i ) ;
1950: LD_ADDR_EXP 29
1954: PUSH
1955: LD_EXP 29
1959: PPUSH
1960: LD_VAR 0 2
1964: PPUSH
1965: CALL_OW 3
1969: ST_TO_ADDR
// end ; end ;
1970: GO 1869
1972: POP
1973: POP
// end ; end ;
1974: LD_VAR 0 1
1978: RET
// every 0 0$1 trigger scoutActive do var i , tmp ;
1979: LD_EXP 3
1983: IFFALSE 2517
1985: GO 1987
1987: DISABLE
1988: LD_INT 0
1990: PPUSH
1991: PPUSH
// begin tmp := [ [ [ 96 , 50 ] , [ 49 , 52 ] , [ 34 , 55 ] , [ 41 , 70 ] , [ 53 , 96 ] , [ 103 , 64 ] ] , [ [ 104 , 70 ] , [ 111 , 103 ] , [ 131 , 147 ] , [ 130 , 153 ] , [ 110 , 93 ] , [ 103 , 65 ] ] ] ;
1992: LD_ADDR_VAR 0 2
1996: PUSH
1997: LD_INT 96
1999: PUSH
2000: LD_INT 50
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 49
2009: PUSH
2010: LD_INT 52
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: PUSH
2017: LD_INT 34
2019: PUSH
2020: LD_INT 55
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: PUSH
2027: LD_INT 41
2029: PUSH
2030: LD_INT 70
2032: PUSH
2033: EMPTY
2034: LIST
2035: LIST
2036: PUSH
2037: LD_INT 53
2039: PUSH
2040: LD_INT 96
2042: PUSH
2043: EMPTY
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 103
2049: PUSH
2050: LD_INT 64
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: PUSH
2065: LD_INT 104
2067: PUSH
2068: LD_INT 70
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 111
2077: PUSH
2078: LD_INT 103
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: LD_INT 131
2087: PUSH
2088: LD_INT 147
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: PUSH
2095: LD_INT 130
2097: PUSH
2098: LD_INT 153
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: PUSH
2105: LD_INT 110
2107: PUSH
2108: LD_INT 93
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: PUSH
2115: LD_INT 103
2117: PUSH
2118: LD_INT 65
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: ST_TO_ADDR
// for i in tmp [ 1 ] do
2137: LD_ADDR_VAR 0 1
2141: PUSH
2142: LD_VAR 0 2
2146: PUSH
2147: LD_INT 1
2149: ARRAY
2150: PUSH
2151: FOR_IN
2152: IFFALSE 2204
// begin AddComAgressiveMove ( Mike , i [ 1 ] , i [ 2 ] ) ;
2154: LD_EXP 17
2158: PPUSH
2159: LD_VAR 0 1
2163: PUSH
2164: LD_INT 1
2166: ARRAY
2167: PPUSH
2168: LD_VAR 0 1
2172: PUSH
2173: LD_INT 2
2175: ARRAY
2176: PPUSH
2177: CALL_OW 174
// AddComHold ( Mike ) ;
2181: LD_EXP 17
2185: PPUSH
2186: CALL_OW 200
// AddComWait ( Mike , 0 0$5 ) ;
2190: LD_EXP 17
2194: PPUSH
2195: LD_INT 175
2197: PPUSH
2198: CALL_OW 202
// end ;
2202: GO 2151
2204: POP
2205: POP
// for i in tmp [ 2 ] do
2206: LD_ADDR_VAR 0 1
2210: PUSH
2211: LD_VAR 0 2
2215: PUSH
2216: LD_INT 2
2218: ARRAY
2219: PUSH
2220: FOR_IN
2221: IFFALSE 2273
// begin AddComAgressiveMove ( Kurt , i [ 1 ] , i [ 2 ] ) ;
2223: LD_EXP 25
2227: PPUSH
2228: LD_VAR 0 1
2232: PUSH
2233: LD_INT 1
2235: ARRAY
2236: PPUSH
2237: LD_VAR 0 1
2241: PUSH
2242: LD_INT 2
2244: ARRAY
2245: PPUSH
2246: CALL_OW 174
// AddComHold ( Kurt ) ;
2250: LD_EXP 25
2254: PPUSH
2255: CALL_OW 200
// AddComWait ( Kurt , 0 0$5 ) ;
2259: LD_EXP 25
2263: PPUSH
2264: LD_INT 175
2266: PPUSH
2267: CALL_OW 202
// end ;
2271: GO 2220
2273: POP
2274: POP
// wait ( 2 2$00 ) ;
2275: LD_INT 4200
2277: PPUSH
2278: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2282: LD_INT 35
2284: PPUSH
2285: CALL_OW 67
// until ( not HasTask ( Mike ) or IsDead ( Mike ) ) and ( not HasTask ( Kurt ) or IsDead ( Kurt ) ) ;
2289: LD_EXP 17
2293: PPUSH
2294: CALL_OW 314
2298: NOT
2299: PUSH
2300: LD_EXP 17
2304: PPUSH
2305: CALL_OW 301
2309: OR
2310: PUSH
2311: LD_EXP 25
2315: PPUSH
2316: CALL_OW 314
2320: NOT
2321: PUSH
2322: LD_EXP 25
2326: PPUSH
2327: CALL_OW 301
2331: OR
2332: AND
2333: IFFALSE 2282
// if IsDead ( Kurt ) and IsDead ( Mike ) then
2335: LD_EXP 25
2339: PPUSH
2340: CALL_OW 301
2344: PUSH
2345: LD_EXP 17
2349: PPUSH
2350: CALL_OW 301
2354: AND
2355: IFFALSE 2367
// begin scoutFailed := true ;
2357: LD_ADDR_EXP 4
2361: PUSH
2362: LD_INT 1
2364: ST_TO_ADDR
// exit ;
2365: GO 2517
// end ; ComMoveXY ( [ Kurt , Mike ] , 132 , 52 ) ;
2367: LD_EXP 25
2371: PUSH
2372: LD_EXP 17
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: PPUSH
2381: LD_INT 132
2383: PPUSH
2384: LD_INT 52
2386: PPUSH
2387: CALL_OW 111
// AddComMoveUnit ( [ Kurt , Mike ] , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
2391: LD_EXP 25
2395: PUSH
2396: LD_EXP 17
2400: PUSH
2401: EMPTY
2402: LIST
2403: LIST
2404: PPUSH
2405: LD_INT 22
2407: PUSH
2408: LD_INT 2
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: PPUSH
2415: CALL_OW 69
2419: PUSH
2420: LD_INT 1
2422: ARRAY
2423: PPUSH
2424: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
2428: LD_INT 35
2430: PPUSH
2431: CALL_OW 67
// until See ( 2 , Kurt ) or See ( 2 , Mike ) ;
2435: LD_INT 2
2437: PPUSH
2438: LD_EXP 25
2442: PPUSH
2443: CALL_OW 292
2447: PUSH
2448: LD_INT 2
2450: PPUSH
2451: LD_EXP 17
2455: PPUSH
2456: CALL_OW 292
2460: OR
2461: IFFALSE 2428
// if IsLive ( Kurt ) then
2463: LD_EXP 25
2467: PPUSH
2468: CALL_OW 300
2472: IFFALSE 2486
// SetSide ( Kurt , 2 ) ;
2474: LD_EXP 25
2478: PPUSH
2479: LD_INT 2
2481: PPUSH
2482: CALL_OW 235
// if IsLive ( Mike ) then
2486: LD_EXP 17
2490: PPUSH
2491: CALL_OW 300
2495: IFFALSE 2509
// SetSide ( Mike , 2 ) ;
2497: LD_EXP 17
2501: PPUSH
2502: LD_INT 2
2504: PPUSH
2505: CALL_OW 235
// scoutSuccess := true ;
2509: LD_ADDR_EXP 5
2513: PUSH
2514: LD_INT 1
2516: ST_TO_ADDR
// end ; end_of_file
2517: PPOPN 2
2519: END
// export usCommander , usForces , usCargo , usToBuild , usAdditionalForces , usCratesCollector ; export function PrepareAmerican ; var i , b , veh ; begin
2520: LD_INT 0
2522: PPUSH
2523: PPUSH
2524: PPUSH
2525: PPUSH
// uc_side := 1 ;
2526: LD_ADDR_OWVAR 20
2530: PUSH
2531: LD_INT 1
2533: ST_TO_ADDR
// uc_nation := 1 ;
2534: LD_ADDR_OWVAR 21
2538: PUSH
2539: LD_INT 1
2541: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 1500 , 2200 , 3500 , 3900 ] [ Difficulty ] ) ;
2542: LD_INT 1
2544: PPUSH
2545: CALL_OW 274
2549: PPUSH
2550: LD_INT 1
2552: PPUSH
2553: LD_INT 1500
2555: PUSH
2556: LD_INT 2200
2558: PUSH
2559: LD_INT 3500
2561: PUSH
2562: LD_INT 3900
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: PUSH
2571: LD_OWVAR 67
2575: ARRAY
2576: PPUSH
2577: CALL_OW 277
// SetResourceType ( GetBase ( usDepot ) , mat_oil , 800 ) ;
2581: LD_INT 1
2583: PPUSH
2584: CALL_OW 274
2588: PPUSH
2589: LD_INT 2
2591: PPUSH
2592: LD_INT 800
2594: PPUSH
2595: CALL_OW 277
// usForces := [ ] ;
2599: LD_ADDR_EXP 31
2603: PUSH
2604: EMPTY
2605: ST_TO_ADDR
// usToBuild := [ ] ;
2606: LD_ADDR_EXP 33
2610: PUSH
2611: EMPTY
2612: ST_TO_ADDR
// usAdditionalForces := [ ] ;
2613: LD_ADDR_EXP 34
2617: PUSH
2618: EMPTY
2619: ST_TO_ADDR
// usCratesCollector := [ ] ;
2620: LD_ADDR_EXP 35
2624: PUSH
2625: EMPTY
2626: ST_TO_ADDR
// for i := 1 to 3 do
2627: LD_ADDR_VAR 0 2
2631: PUSH
2632: DOUBLE
2633: LD_INT 1
2635: DEC
2636: ST_TO_ADDR
2637: LD_INT 3
2639: PUSH
2640: FOR_TO
2641: IFFALSE 2695
// begin PrepareApemanEngineer ( ) ;
2643: CALL 50350 0 0
// usCratesCollector := Join ( usCratesCollector , CreateHuman ) ;
2647: LD_ADDR_EXP 35
2651: PUSH
2652: LD_EXP 35
2656: PPUSH
2657: CALL_OW 44
2661: PPUSH
2662: CALL 54161 0 2
2666: ST_TO_ADDR
// PlaceUnitXYR ( Last ( usCratesCollector ) , 81 , 142 , 4 , false ) ;
2667: LD_EXP 35
2671: PPUSH
2672: CALL 58658 0 1
2676: PPUSH
2677: LD_INT 81
2679: PPUSH
2680: LD_INT 142
2682: PPUSH
2683: LD_INT 4
2685: PPUSH
2686: LD_INT 0
2688: PPUSH
2689: CALL_OW 50
// end ;
2693: GO 2640
2695: POP
2696: POP
// InitHc ;
2697: CALL_OW 19
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2701: LD_ADDR_VAR 0 2
2705: PUSH
2706: LD_INT 21
2708: PUSH
2709: LD_INT 3
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PPUSH
2716: CALL_OW 69
2720: PUSH
2721: FOR_IN
2722: IFFALSE 2759
// SetBLevel ( i , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
2724: LD_VAR 0 2
2728: PPUSH
2729: LD_INT 6
2731: PUSH
2732: LD_INT 7
2734: PUSH
2735: LD_INT 8
2737: PUSH
2738: LD_INT 8
2740: PUSH
2741: EMPTY
2742: LIST
2743: LIST
2744: LIST
2745: LIST
2746: PUSH
2747: LD_OWVAR 67
2751: ARRAY
2752: PPUSH
2753: CALL_OW 241
2757: GO 2721
2759: POP
2760: POP
// for i in FilterAllUnits ( [ f_btype , b_bunker ] ) do
2761: LD_ADDR_VAR 0 2
2765: PUSH
2766: LD_INT 30
2768: PUSH
2769: LD_INT 32
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: PPUSH
2776: CALL_OW 69
2780: PUSH
2781: FOR_IN
2782: IFFALSE 2872
// begin if GetBWeapon ( i ) = us_radar then
2784: LD_VAR 0 2
2788: PPUSH
2789: CALL_OW 269
2793: PUSH
2794: LD_INT 11
2796: EQUAL
2797: IFFALSE 2822
// begin uc_nation := 0 ;
2799: LD_ADDR_OWVAR 21
2803: PUSH
2804: LD_INT 0
2806: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 2 ) ;
2807: LD_INT 0
2809: PPUSH
2810: LD_INT 16
2812: PPUSH
2813: LD_INT 2
2815: PPUSH
2816: CALL_OW 380
// end else
2820: GO 2856
// PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2822: LD_INT 0
2824: PPUSH
2825: LD_INT 1
2827: PPUSH
2828: LD_INT 5
2830: PUSH
2831: LD_INT 6
2833: PUSH
2834: LD_INT 7
2836: PUSH
2837: LD_INT 8
2839: PUSH
2840: EMPTY
2841: LIST
2842: LIST
2843: LIST
2844: LIST
2845: PUSH
2846: LD_OWVAR 67
2850: ARRAY
2851: PPUSH
2852: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2856: CALL_OW 44
2860: PPUSH
2861: LD_VAR 0 2
2865: PPUSH
2866: CALL_OW 52
// end ;
2870: GO 2781
2872: POP
2873: POP
// b := HexInfo ( 74 , 120 ) ;
2874: LD_ADDR_VAR 0 3
2878: PUSH
2879: LD_INT 74
2881: PPUSH
2882: LD_INT 120
2884: PPUSH
2885: CALL_OW 428
2889: ST_TO_ADDR
// uc_nation := 1 ;
2890: LD_ADDR_OWVAR 21
2894: PUSH
2895: LD_INT 1
2897: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
2898: LD_ADDR_VAR 0 2
2902: PUSH
2903: DOUBLE
2904: LD_INT 1
2906: DEC
2907: ST_TO_ADDR
2908: LD_INT 1
2910: PUSH
2911: LD_INT 2
2913: PUSH
2914: LD_INT 3
2916: PUSH
2917: LD_INT 4
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: LIST
2924: LIST
2925: PUSH
2926: LD_OWVAR 67
2930: ARRAY
2931: PUSH
2932: FOR_TO
2933: IFFALSE 2985
// begin PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2935: LD_INT 0
2937: PPUSH
2938: LD_INT 1
2940: PPUSH
2941: LD_INT 5
2943: PUSH
2944: LD_INT 6
2946: PUSH
2947: LD_INT 7
2949: PUSH
2950: LD_INT 8
2952: PUSH
2953: EMPTY
2954: LIST
2955: LIST
2956: LIST
2957: LIST
2958: PUSH
2959: LD_OWVAR 67
2963: ARRAY
2964: PPUSH
2965: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b ) ;
2969: CALL_OW 44
2973: PPUSH
2974: LD_VAR 0 3
2978: PPUSH
2979: CALL_OW 52
// end ;
2983: GO 2932
2985: POP
2986: POP
// SetClass ( UnitsInside ( b ) , class_sniper ) ;
2987: LD_VAR 0 3
2991: PPUSH
2992: CALL_OW 313
2996: PPUSH
2997: LD_INT 5
2999: PPUSH
3000: CALL_OW 336
// for i := 1 to 6 do
3004: LD_ADDR_VAR 0 2
3008: PUSH
3009: DOUBLE
3010: LD_INT 1
3012: DEC
3013: ST_TO_ADDR
3014: LD_INT 6
3016: PUSH
3017: FOR_TO
3018: IFFALSE 3068
// begin PrepareHuman ( false , 4 , 6 ) ;
3020: LD_INT 0
3022: PPUSH
3023: LD_INT 4
3025: PPUSH
3026: LD_INT 6
3028: PPUSH
3029: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ amLab1 , amLab2 ] [ i mod 2 + 1 ] ) ;
3033: CALL_OW 44
3037: PPUSH
3038: LD_INT 32
3040: PUSH
3041: LD_INT 33
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PUSH
3048: LD_VAR 0 2
3052: PUSH
3053: LD_INT 2
3055: MOD
3056: PUSH
3057: LD_INT 1
3059: PLUS
3060: ARRAY
3061: PPUSH
3062: CALL_OW 52
// end ;
3066: GO 3017
3068: POP
3069: POP
// for i := 1 to 3 do
3070: LD_ADDR_VAR 0 2
3074: PUSH
3075: DOUBLE
3076: LD_INT 1
3078: DEC
3079: ST_TO_ADDR
3080: LD_INT 3
3082: PUSH
3083: FOR_TO
3084: IFFALSE 3113
// begin PrepareHuman ( false , 3 , 6 ) ;
3086: LD_INT 0
3088: PPUSH
3089: LD_INT 3
3091: PPUSH
3092: LD_INT 6
3094: PPUSH
3095: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , amFac ) ;
3099: CALL_OW 44
3103: PPUSH
3104: LD_INT 25
3106: PPUSH
3107: CALL_OW 52
// end ;
3111: GO 3083
3113: POP
3114: POP
// for i := 1 to 3 do
3115: LD_ADDR_VAR 0 2
3119: PUSH
3120: DOUBLE
3121: LD_INT 1
3123: DEC
3124: ST_TO_ADDR
3125: LD_INT 3
3127: PUSH
3128: FOR_TO
3129: IFFALSE 3187
// begin PrepareHuman ( false , 3 , [ 6 , 7 , 7 , 7 ] [ Difficulty ] ) ;
3131: LD_INT 0
3133: PPUSH
3134: LD_INT 3
3136: PPUSH
3137: LD_INT 6
3139: PUSH
3140: LD_INT 7
3142: PUSH
3143: LD_INT 7
3145: PUSH
3146: LD_INT 7
3148: PUSH
3149: EMPTY
3150: LIST
3151: LIST
3152: LIST
3153: LIST
3154: PUSH
3155: LD_OWVAR 67
3159: ARRAY
3160: PPUSH
3161: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 78 , 130 ) ) ;
3165: CALL_OW 44
3169: PPUSH
3170: LD_INT 78
3172: PPUSH
3173: LD_INT 130
3175: PPUSH
3176: CALL_OW 428
3180: PPUSH
3181: CALL_OW 52
// end ;
3185: GO 3128
3187: POP
3188: POP
// for i := 1 to [ 1 , 2 , 3 , 3 ] [ Difficulty ] do
3189: LD_ADDR_VAR 0 2
3193: PUSH
3194: DOUBLE
3195: LD_INT 1
3197: DEC
3198: ST_TO_ADDR
3199: LD_INT 1
3201: PUSH
3202: LD_INT 2
3204: PUSH
3205: LD_INT 3
3207: PUSH
3208: LD_INT 3
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: PUSH
3217: LD_OWVAR 67
3221: ARRAY
3222: PUSH
3223: FOR_TO
3224: IFFALSE 3311
// begin PrepareVehicle ( us_medium_wheeled , engine_solar , control_manual , us_crane , 100 ) ;
3226: LD_INT 2
3228: PPUSH
3229: LD_INT 2
3231: PPUSH
3232: LD_INT 1
3234: PPUSH
3235: LD_INT 13
3237: PPUSH
3238: LD_INT 100
3240: PPUSH
3241: CALL 21299 0 5
// veh := CreateVehicle ;
3245: LD_ADDR_VAR 0 4
3249: PUSH
3250: CALL_OW 45
3254: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3255: LD_VAR 0 4
3259: PPUSH
3260: LD_INT 3
3262: PPUSH
3263: CALL_OW 233
// PlaceUnitArea ( veh , usCraneArea , false ) ;
3267: LD_VAR 0 4
3271: PPUSH
3272: LD_INT 9
3274: PPUSH
3275: LD_INT 0
3277: PPUSH
3278: CALL_OW 49
// PrepareHuman ( false , 3 , 6 ) ;
3282: LD_INT 0
3284: PPUSH
3285: LD_INT 3
3287: PPUSH
3288: LD_INT 6
3290: PPUSH
3291: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3295: CALL_OW 44
3299: PPUSH
3300: LD_VAR 0 4
3304: PPUSH
3305: CALL_OW 52
// end ;
3309: GO 3223
3311: POP
3312: POP
// InitHc ;
3313: CALL_OW 19
// hc_gallery := sandar ;
3317: LD_ADDR_OWVAR 33
3321: PUSH
3322: LD_STRING sandar
3324: ST_TO_ADDR
// hc_face_number := 38 ;
3325: LD_ADDR_OWVAR 34
3329: PUSH
3330: LD_INT 38
3332: ST_TO_ADDR
// hc_name := Doug Callahan ;
3333: LD_ADDR_OWVAR 26
3337: PUSH
3338: LD_STRING Doug Callahan
3340: ST_TO_ADDR
// hc_class := class_engineer ;
3341: LD_ADDR_OWVAR 28
3345: PUSH
3346: LD_INT 2
3348: ST_TO_ADDR
// hc_sex := sex_male ;
3349: LD_ADDR_OWVAR 27
3353: PUSH
3354: LD_INT 1
3356: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
3357: LD_ADDR_OWVAR 29
3361: PUSH
3362: LD_INT 10
3364: PUSH
3365: LD_INT 11
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
3372: LD_ADDR_OWVAR 30
3376: PUSH
3377: LD_INT 2
3379: PUSH
3380: LD_INT 1
3382: PUSH
3383: LD_INT 0
3385: PUSH
3386: LD_INT 0
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: ST_TO_ADDR
// hc_skills := [ 4 , 6 , 3 , 1 ] ;
3395: LD_ADDR_OWVAR 31
3399: PUSH
3400: LD_INT 4
3402: PUSH
3403: LD_INT 6
3405: PUSH
3406: LD_INT 3
3408: PUSH
3409: LD_INT 1
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: ST_TO_ADDR
// usCommander := CreateHuman ;
3418: LD_ADDR_EXP 30
3422: PUSH
3423: CALL_OW 44
3427: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
3428: LD_EXP 30
3432: PPUSH
3433: LD_INT 1
3435: PPUSH
3436: CALL_OW 52
// DoNotAttack ( 2 , usCommander ) ;
3440: LD_INT 2
3442: PPUSH
3443: LD_EXP 30
3447: PPUSH
3448: CALL_OW 471
// InitHC_All ( ) ;
3452: CALL_OW 584
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay , 100 ) ;
3456: LD_INT 2
3458: PPUSH
3459: LD_INT 1
3461: PPUSH
3462: LD_INT 2
3464: PPUSH
3465: LD_INT 12
3467: PPUSH
3468: LD_INT 100
3470: PPUSH
3471: CALL 21299 0 5
// usCargo := CreateVehicle ;
3475: LD_ADDR_EXP 32
3479: PUSH
3480: CALL_OW 45
3484: ST_TO_ADDR
// PlaceUnitXY ( usCargo , 81 , 143 , false ) ;
3485: LD_EXP 32
3489: PPUSH
3490: LD_INT 81
3492: PPUSH
3493: LD_INT 143
3495: PPUSH
3496: LD_INT 0
3498: PPUSH
3499: CALL_OW 48
// Connect ( usCargo ) ;
3503: LD_EXP 32
3507: PPUSH
3508: CALL 24767 0 1
// DoNotAttack ( 5 , usCargo ) ;
3512: LD_INT 5
3514: PPUSH
3515: LD_EXP 32
3519: PPUSH
3520: CALL_OW 471
// end ;
3524: LD_VAR 0 1
3528: RET
// every 6 6$00 trigger usAttacksAllowed and IsOk ( amFac ) and BuildingStatus ( amFac ) = bs_idle do var i , chassis , weapon ;
3529: LD_EXP 6
3533: PUSH
3534: LD_INT 25
3536: PPUSH
3537: CALL_OW 302
3541: AND
3542: PUSH
3543: LD_INT 25
3545: PPUSH
3546: CALL_OW 461
3550: PUSH
3551: LD_INT 2
3553: EQUAL
3554: AND
3555: IFFALSE 3712
3557: GO 3559
3559: DISABLE
3560: LD_INT 0
3562: PPUSH
3563: PPUSH
3564: PPUSH
// begin enable ;
3565: ENABLE
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
3566: LD_ADDR_VAR 0 1
3570: PUSH
3571: DOUBLE
3572: LD_INT 1
3574: DEC
3575: ST_TO_ADDR
3576: LD_INT 4
3578: PUSH
3579: LD_INT 5
3581: PUSH
3582: LD_INT 6
3584: PUSH
3585: LD_INT 6
3587: PUSH
3588: EMPTY
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: PUSH
3594: LD_OWVAR 67
3598: ARRAY
3599: PUSH
3600: FOR_TO
3601: IFFALSE 3710
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3603: LD_ADDR_VAR 0 2
3607: PUSH
3608: LD_INT 2
3610: PUSH
3611: LD_INT 3
3613: PUSH
3614: LD_INT 4
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: LIST
3621: PUSH
3622: LD_INT 1
3624: PPUSH
3625: LD_INT 3
3627: PPUSH
3628: CALL_OW 12
3632: ARRAY
3633: ST_TO_ADDR
// if chassis = us_heavy_tracked then
3634: LD_VAR 0 2
3638: PUSH
3639: LD_INT 4
3641: EQUAL
3642: IFFALSE 3654
// weapon := us_heavy_gun else
3644: LD_ADDR_VAR 0 3
3648: PUSH
3649: LD_INT 6
3651: ST_TO_ADDR
3652: GO 3685
// weapon := [ us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3654: LD_ADDR_VAR 0 3
3658: PUSH
3659: LD_INT 5
3661: PUSH
3662: LD_INT 7
3664: PUSH
3665: LD_INT 4
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: LIST
3672: PUSH
3673: LD_INT 1
3675: PPUSH
3676: LD_INT 3
3678: PPUSH
3679: CALL_OW 12
3683: ARRAY
3684: ST_TO_ADDR
// AddComConstruct ( amFac , chassis , engine_combustion , control_remote , weapon ) ;
3685: LD_INT 25
3687: PPUSH
3688: LD_VAR 0 2
3692: PPUSH
3693: LD_INT 1
3695: PPUSH
3696: LD_INT 2
3698: PPUSH
3699: LD_VAR 0 3
3703: PPUSH
3704: CALL_OW 185
// end ;
3708: GO 3600
3710: POP
3711: POP
// end ;
3712: PPOPN 3
3714: END
// every 0 0$01 do var i , un , tmp ;
3715: GO 3717
3717: DISABLE
3718: LD_INT 0
3720: PPUSH
3721: PPUSH
3722: PPUSH
// begin if Difficulty < 2 then
3723: LD_OWVAR 67
3727: PUSH
3728: LD_INT 2
3730: LESS
3731: IFFALSE 3735
// exit ;
3733: GO 4018
// tmp := [ ] ;
3735: LD_ADDR_VAR 0 3
3739: PUSH
3740: EMPTY
3741: ST_TO_ADDR
// for i := 1 to Difficulty do
3742: LD_ADDR_VAR 0 1
3746: PUSH
3747: DOUBLE
3748: LD_INT 1
3750: DEC
3751: ST_TO_ADDR
3752: LD_OWVAR 67
3756: PUSH
3757: FOR_TO
3758: IFFALSE 3854
// begin uc_side := 4 ;
3760: LD_ADDR_OWVAR 20
3764: PUSH
3765: LD_INT 4
3767: ST_TO_ADDR
// uc_nation := nation_american ;
3768: LD_ADDR_OWVAR 21
3772: PUSH
3773: LD_INT 1
3775: ST_TO_ADDR
// PrepareSoldier ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3776: LD_INT 0
3778: PPUSH
3779: LD_INT 3
3781: PUSH
3782: LD_INT 4
3784: PUSH
3785: LD_INT 5
3787: PUSH
3788: LD_INT 6
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: PUSH
3797: LD_OWVAR 67
3801: ARRAY
3802: PPUSH
3803: CALL_OW 381
// un := CreateHuman ;
3807: LD_ADDR_VAR 0 2
3811: PUSH
3812: CALL_OW 44
3816: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
3817: LD_ADDR_VAR 0 3
3821: PUSH
3822: LD_VAR 0 3
3826: PPUSH
3827: LD_VAR 0 2
3831: PPUSH
3832: CALL 54161 0 2
3836: ST_TO_ADDR
// PlaceUnitArea ( un , westSpawnArea , false ) ;
3837: LD_VAR 0 2
3841: PPUSH
3842: LD_INT 19
3844: PPUSH
3845: LD_INT 0
3847: PPUSH
3848: CALL_OW 49
// end ;
3852: GO 3757
3854: POP
3855: POP
// for i in tmp do
3856: LD_ADDR_VAR 0 1
3860: PUSH
3861: LD_VAR 0 3
3865: PUSH
3866: FOR_IN
3867: IFFALSE 3913
// begin ComAgressiveMove ( i , 54 , 51 ) ;
3869: LD_VAR 0 1
3873: PPUSH
3874: LD_INT 54
3876: PPUSH
3877: LD_INT 51
3879: PPUSH
3880: CALL_OW 114
// AddComWait ( i , 0 0$20 ) ;
3884: LD_VAR 0 1
3888: PPUSH
3889: LD_INT 700
3891: PPUSH
3892: CALL_OW 202
// AddComAgressiveMove ( i , 35 , 6 ) ;
3896: LD_VAR 0 1
3900: PPUSH
3901: LD_INT 35
3903: PPUSH
3904: LD_INT 6
3906: PPUSH
3907: CALL_OW 174
// end ;
3911: GO 3866
3913: POP
3914: POP
// repeat wait ( 7 7$00 ) ;
3915: LD_INT 14700
3917: PPUSH
3918: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
3922: LD_ADDR_VAR 0 3
3926: PUSH
3927: LD_VAR 0 3
3931: PPUSH
3932: LD_INT 50
3934: PUSH
3935: EMPTY
3936: LIST
3937: PPUSH
3938: CALL_OW 72
3942: ST_TO_ADDR
// if not tmp then
3943: LD_VAR 0 3
3947: NOT
3948: IFFALSE 3952
// exit ;
3950: GO 4018
// for i in tmp do
3952: LD_ADDR_VAR 0 1
3956: PUSH
3957: LD_VAR 0 3
3961: PUSH
3962: FOR_IN
3963: IFFALSE 4009
// begin ComAgressiveMove ( i , 54 , 51 ) ;
3965: LD_VAR 0 1
3969: PPUSH
3970: LD_INT 54
3972: PPUSH
3973: LD_INT 51
3975: PPUSH
3976: CALL_OW 114
// AddComWait ( i , 0 0$20 ) ;
3980: LD_VAR 0 1
3984: PPUSH
3985: LD_INT 700
3987: PPUSH
3988: CALL_OW 202
// AddComAgressiveMove ( i , 35 , 6 ) ;
3992: LD_VAR 0 1
3996: PPUSH
3997: LD_INT 35
3999: PPUSH
4000: LD_INT 6
4002: PPUSH
4003: CALL_OW 174
// end ;
4007: GO 3962
4009: POP
4010: POP
// until not tmp ;
4011: LD_VAR 0 3
4015: NOT
4016: IFFALSE 3915
// end ;
4018: PPOPN 3
4020: END
// every 0 0$10 trigger usForces >= [ 4 , 5 , 6 , 6 ] [ Difficulty ] do var i , tmp ;
4021: LD_EXP 31
4025: PUSH
4026: LD_INT 4
4028: PUSH
4029: LD_INT 5
4031: PUSH
4032: LD_INT 6
4034: PUSH
4035: LD_INT 6
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: LIST
4042: LIST
4043: PUSH
4044: LD_OWVAR 67
4048: ARRAY
4049: GREATEREQUAL
4050: IFFALSE 4232
4052: GO 4054
4054: DISABLE
4055: LD_INT 0
4057: PPUSH
4058: PPUSH
// begin enable ;
4059: ENABLE
// tmp := usForces ;
4060: LD_ADDR_VAR 0 2
4064: PUSH
4065: LD_EXP 31
4069: ST_TO_ADDR
// usForces := [ ] ;
4070: LD_ADDR_EXP 31
4074: PUSH
4075: EMPTY
4076: ST_TO_ADDR
// if not tmp then
4077: LD_VAR 0 2
4081: NOT
4082: IFFALSE 4086
// exit ;
4084: GO 4232
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 123 , 141 , 20 ] ] ) then
4086: LD_INT 22
4088: PUSH
4089: LD_INT 2
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PUSH
4096: LD_INT 92
4098: PUSH
4099: LD_INT 123
4101: PUSH
4102: LD_INT 141
4104: PUSH
4105: LD_INT 20
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: PPUSH
4118: CALL_OW 69
4122: IFFALSE 4146
// begin ComAgressiveMove ( tmp , 126 , 143 ) ;
4124: LD_VAR 0 2
4128: PPUSH
4129: LD_INT 126
4131: PPUSH
4132: LD_INT 143
4134: PPUSH
4135: CALL_OW 114
// wait ( 0 0$30 ) ;
4139: LD_INT 1050
4141: PPUSH
4142: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
4146: LD_INT 35
4148: PPUSH
4149: CALL_OW 67
// tmp := AgressiveMove ( tmp , [ [ 51 , 50 ] , [ 98 , 50 ] , [ 114 , 50 ] , [ 127 , 51 ] , [ 131 , 35 ] ] ) ;
4153: LD_ADDR_VAR 0 2
4157: PUSH
4158: LD_VAR 0 2
4162: PPUSH
4163: LD_INT 51
4165: PUSH
4166: LD_INT 50
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: PUSH
4173: LD_INT 98
4175: PUSH
4176: LD_INT 50
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: PUSH
4183: LD_INT 114
4185: PUSH
4186: LD_INT 50
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 127
4195: PUSH
4196: LD_INT 51
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 131
4205: PUSH
4206: LD_INT 35
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: LIST
4217: LIST
4218: LIST
4219: PPUSH
4220: CALL 56765 0 2
4224: ST_TO_ADDR
// until not tmp ;
4225: LD_VAR 0 2
4229: NOT
4230: IFFALSE 4146
// end ;
4232: PPOPN 2
4234: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( southScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
4235: LD_EXP 3
4239: PUSH
4240: LD_EXP 5
4244: NOT
4245: AND
4246: PUSH
4247: LD_INT 11
4249: PPUSH
4250: LD_INT 22
4252: PUSH
4253: LD_INT 2
4255: PUSH
4256: EMPTY
4257: LIST
4258: LIST
4259: PPUSH
4260: CALL_OW 70
4264: AND
4265: IFFALSE 4386
4267: GO 4269
4269: DISABLE
4270: LD_INT 0
4272: PPUSH
4273: PPUSH
4274: PPUSH
// begin uc_side := 1 ;
4275: LD_ADDR_OWVAR 20
4279: PUSH
4280: LD_INT 1
4282: ST_TO_ADDR
// uc_nation := 1 ;
4283: LD_ADDR_OWVAR 21
4287: PUSH
4288: LD_INT 1
4290: ST_TO_ADDR
// tmp := [ ] ;
4291: LD_ADDR_VAR 0 3
4295: PUSH
4296: EMPTY
4297: ST_TO_ADDR
// for i := 1 to 2 do
4298: LD_ADDR_VAR 0 1
4302: PUSH
4303: DOUBLE
4304: LD_INT 1
4306: DEC
4307: ST_TO_ADDR
4308: LD_INT 2
4310: PUSH
4311: FOR_TO
4312: IFFALSE 4384
// begin PrepareSoldier ( false , 7 ) ;
4314: LD_INT 0
4316: PPUSH
4317: LD_INT 7
4319: PPUSH
4320: CALL_OW 381
// un := CreateHuman ;
4324: LD_ADDR_VAR 0 2
4328: PUSH
4329: CALL_OW 44
4333: ST_TO_ADDR
// PlaceUnitXYR ( un , 130 , 153 , 3 , false ) ;
4334: LD_VAR 0 2
4338: PPUSH
4339: LD_INT 130
4341: PPUSH
4342: LD_INT 153
4344: PPUSH
4345: LD_INT 3
4347: PPUSH
4348: LD_INT 0
4350: PPUSH
4351: CALL_OW 50
// SetClass ( un , class_sniper ) ;
4355: LD_VAR 0 2
4359: PPUSH
4360: LD_INT 5
4362: PPUSH
4363: CALL_OW 336
// AddComAgressiveMove ( un , 108 , 108 ) ;
4367: LD_VAR 0 2
4371: PPUSH
4372: LD_INT 108
4374: PPUSH
4375: LD_INT 108
4377: PPUSH
4378: CALL_OW 174
// end ;
4382: GO 4311
4384: POP
4385: POP
// end ;
4386: PPOPN 3
4388: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( northScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
4389: LD_EXP 3
4393: PUSH
4394: LD_EXP 5
4398: NOT
4399: AND
4400: PUSH
4401: LD_INT 10
4403: PPUSH
4404: LD_INT 22
4406: PUSH
4407: LD_INT 2
4409: PUSH
4410: EMPTY
4411: LIST
4412: LIST
4413: PPUSH
4414: CALL_OW 70
4418: AND
4419: IFFALSE 4540
4421: GO 4423
4423: DISABLE
4424: LD_INT 0
4426: PPUSH
4427: PPUSH
4428: PPUSH
// begin uc_side := 1 ;
4429: LD_ADDR_OWVAR 20
4433: PUSH
4434: LD_INT 1
4436: ST_TO_ADDR
// uc_nation := 1 ;
4437: LD_ADDR_OWVAR 21
4441: PUSH
4442: LD_INT 1
4444: ST_TO_ADDR
// tmp := [ ] ;
4445: LD_ADDR_VAR 0 3
4449: PUSH
4450: EMPTY
4451: ST_TO_ADDR
// for i := 1 to 2 do
4452: LD_ADDR_VAR 0 1
4456: PUSH
4457: DOUBLE
4458: LD_INT 1
4460: DEC
4461: ST_TO_ADDR
4462: LD_INT 2
4464: PUSH
4465: FOR_TO
4466: IFFALSE 4538
// begin PrepareSoldier ( false , 7 ) ;
4468: LD_INT 0
4470: PPUSH
4471: LD_INT 7
4473: PPUSH
4474: CALL_OW 381
// un := CreateHuman ;
4478: LD_ADDR_VAR 0 2
4482: PUSH
4483: CALL_OW 44
4487: ST_TO_ADDR
// PlaceUnitXYR ( un , 56 , 101 , 3 , false ) ;
4488: LD_VAR 0 2
4492: PPUSH
4493: LD_INT 56
4495: PPUSH
4496: LD_INT 101
4498: PPUSH
4499: LD_INT 3
4501: PPUSH
4502: LD_INT 0
4504: PPUSH
4505: CALL_OW 50
// SetClass ( un , class_sniper ) ;
4509: LD_VAR 0 2
4513: PPUSH
4514: LD_INT 5
4516: PPUSH
4517: CALL_OW 336
// AddComAgressiveMove ( un , 72 , 92 ) ;
4521: LD_VAR 0 2
4525: PPUSH
4526: LD_INT 72
4528: PPUSH
4529: LD_INT 92
4531: PPUSH
4532: CALL_OW 174
// end ;
4536: GO 4465
4538: POP
4539: POP
// end ;
4540: PPOPN 3
4542: END
// every 0 0$2 trigger not usSurrender do var i , tmp , cr , enemyInArea ;
4543: LD_EXP 7
4547: NOT
4548: IFFALSE 4749
4550: GO 4552
4552: DISABLE
4553: LD_INT 0
4555: PPUSH
4556: PPUSH
4557: PPUSH
4558: PPUSH
// begin enable ;
4559: ENABLE
// enemyInArea := FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_distxy , 113 , 139 , 15 ] ] ) ;
4560: LD_ADDR_VAR 0 4
4564: PUSH
4565: LD_INT 81
4567: PUSH
4568: LD_INT 1
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: PUSH
4575: LD_INT 92
4577: PUSH
4578: LD_INT 113
4580: PUSH
4581: LD_INT 139
4583: PUSH
4584: LD_INT 15
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PPUSH
4597: CALL_OW 69
4601: ST_TO_ADDR
// cr := GetListOfCratesInArea ( americanCratesArea ) ;
4602: LD_ADDR_VAR 0 3
4606: PUSH
4607: LD_INT 20
4609: PPUSH
4610: CALL_OW 435
4614: ST_TO_ADDR
// tmp := UnitFilter ( usCratesCollector , [ f_ok ] ) ;
4615: LD_ADDR_VAR 0 2
4619: PUSH
4620: LD_EXP 35
4624: PPUSH
4625: LD_INT 50
4627: PUSH
4628: EMPTY
4629: LIST
4630: PPUSH
4631: CALL_OW 72
4635: ST_TO_ADDR
// if not tmp then
4636: LD_VAR 0 2
4640: NOT
4641: IFFALSE 4646
// begin disable ;
4643: DISABLE
// exit ;
4644: GO 4749
// end ; for i in tmp do
4646: LD_ADDR_VAR 0 1
4650: PUSH
4651: LD_VAR 0 2
4655: PUSH
4656: FOR_IN
4657: IFFALSE 4747
// begin if enemyInArea and GetDistUnits ( i , usDepot ) > 12 then
4659: LD_VAR 0 4
4663: PUSH
4664: LD_VAR 0 1
4668: PPUSH
4669: LD_INT 1
4671: PPUSH
4672: CALL_OW 296
4676: PUSH
4677: LD_INT 12
4679: GREATER
4680: AND
4681: IFFALSE 4700
// ComMoveXY ( i , 83 , 147 ) else
4683: LD_VAR 0 1
4687: PPUSH
4688: LD_INT 83
4690: PPUSH
4691: LD_INT 147
4693: PPUSH
4694: CALL_OW 111
4698: GO 4745
// if not HasTask ( i ) and cr then
4700: LD_VAR 0 1
4704: PPUSH
4705: CALL_OW 314
4709: NOT
4710: PUSH
4711: LD_VAR 0 3
4715: AND
4716: IFFALSE 4745
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
4718: LD_VAR 0 1
4722: PPUSH
4723: LD_VAR 0 3
4727: PUSH
4728: LD_INT 1
4730: ARRAY
4731: PPUSH
4732: LD_VAR 0 3
4736: PUSH
4737: LD_INT 2
4739: ARRAY
4740: PPUSH
4741: CALL_OW 117
// end ;
4745: GO 4656
4747: POP
4748: POP
// end ;
4749: PPOPN 4
4751: END
// every 0 0$2 trigger IsOk ( usCargo ) and not usSurrender do var cr , enemyInArea ;
4752: LD_EXP 32
4756: PPUSH
4757: CALL_OW 302
4761: PUSH
4762: LD_EXP 7
4766: NOT
4767: AND
4768: IFFALSE 5031
4770: GO 4772
4772: DISABLE
4773: LD_INT 0
4775: PPUSH
4776: PPUSH
// begin enable ;
4777: ENABLE
// enemyInArea := FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4778: LD_ADDR_VAR 0 2
4782: PUSH
4783: LD_INT 16
4785: PPUSH
4786: LD_INT 81
4788: PUSH
4789: LD_INT 1
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: LD_INT 50
4798: PUSH
4799: EMPTY
4800: LIST
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PPUSH
4806: CALL_OW 70
4810: ST_TO_ADDR
// cr := GetListOfCratesInArea ( usCratesArea ) ;
4811: LD_ADDR_VAR 0 1
4815: PUSH
4816: LD_INT 12
4818: PPUSH
4819: CALL_OW 435
4823: ST_TO_ADDR
// if GetFuel ( usCargo ) < 10 and not See ( 2 , usCargo ) then
4824: LD_EXP 32
4828: PPUSH
4829: CALL_OW 261
4833: PUSH
4834: LD_INT 10
4836: LESS
4837: PUSH
4838: LD_INT 2
4840: PPUSH
4841: LD_EXP 32
4845: PPUSH
4846: CALL_OW 292
4850: NOT
4851: AND
4852: IFFALSE 4866
// SetFuel ( usCargo , 100 ) ;
4854: LD_EXP 32
4858: PPUSH
4859: LD_INT 100
4861: PPUSH
4862: CALL_OW 240
// if not HasTask ( usCargo ) and GetCargo ( usCargo , mat_cans ) < 100 and not enemyInArea then
4866: LD_EXP 32
4870: PPUSH
4871: CALL_OW 314
4875: NOT
4876: PUSH
4877: LD_EXP 32
4881: PPUSH
4882: LD_INT 1
4884: PPUSH
4885: CALL_OW 289
4889: PUSH
4890: LD_INT 100
4892: LESS
4893: AND
4894: PUSH
4895: LD_VAR 0 2
4899: NOT
4900: AND
4901: IFFALSE 4967
// begin if cr then
4903: LD_VAR 0 1
4907: IFFALSE 4938
// ComCollect ( usCargo , cr [ 1 ] , cr [ 2 ] ) else
4909: LD_EXP 32
4913: PPUSH
4914: LD_VAR 0 1
4918: PUSH
4919: LD_INT 1
4921: ARRAY
4922: PPUSH
4923: LD_VAR 0 1
4927: PUSH
4928: LD_INT 2
4930: ARRAY
4931: PPUSH
4932: CALL_OW 117
4936: GO 4965
// if not IsInArea ( usCargo , usCratesArea ) then
4938: LD_EXP 32
4942: PPUSH
4943: LD_INT 12
4945: PPUSH
4946: CALL_OW 308
4950: NOT
4951: IFFALSE 4965
// ComMoveToArea ( usCargo , usCratesArea ) ;
4953: LD_EXP 32
4957: PPUSH
4958: LD_INT 12
4960: PPUSH
4961: CALL_OW 113
// exit ;
4965: GO 5031
// end ; if enemyInArea and not IsInArea ( usCargo , americanBaseArea ) then
4967: LD_VAR 0 2
4971: PUSH
4972: LD_EXP 32
4976: PPUSH
4977: LD_INT 16
4979: PPUSH
4980: CALL_OW 308
4984: NOT
4985: AND
4986: IFFALSE 5005
// ComMoveXY ( usCargo , 80 , 143 ) else
4988: LD_EXP 32
4992: PPUSH
4993: LD_INT 80
4995: PPUSH
4996: LD_INT 143
4998: PPUSH
4999: CALL_OW 111
5003: GO 5031
// if GetCargo ( usCargo , mat_cans ) then
5005: LD_EXP 32
5009: PPUSH
5010: LD_INT 1
5012: PPUSH
5013: CALL_OW 289
5017: IFFALSE 5031
// ComGive ( usCargo , usDepot ) ;
5019: LD_EXP 32
5023: PPUSH
5024: LD_INT 1
5026: PPUSH
5027: CALL_OW 161
// end ;
5031: PPOPN 2
5033: END
// every 0 0$3 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) do var i , sci ;
5034: LD_EXP 7
5038: NOT
5039: PUSH
5040: LD_INT 22
5042: PUSH
5043: LD_INT 1
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PUSH
5050: LD_INT 21
5052: PUSH
5053: LD_INT 1
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: PUSH
5060: LD_INT 3
5062: PUSH
5063: LD_INT 50
5065: PUSH
5066: EMPTY
5067: LIST
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: LIST
5077: PPUSH
5078: CALL_OW 69
5082: AND
5083: PUSH
5084: LD_INT 22
5086: PUSH
5087: LD_INT 1
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: PUSH
5094: LD_INT 3
5096: PUSH
5097: LD_INT 60
5099: PUSH
5100: EMPTY
5101: LIST
5102: PUSH
5103: EMPTY
5104: LIST
5105: LIST
5106: PUSH
5107: LD_INT 25
5109: PUSH
5110: LD_INT 4
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PUSH
5117: EMPTY
5118: LIST
5119: LIST
5120: LIST
5121: PPUSH
5122: CALL_OW 69
5126: AND
5127: IFFALSE 5330
5129: GO 5131
5131: DISABLE
5132: LD_INT 0
5134: PPUSH
5135: PPUSH
// begin enable ;
5136: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) do
5137: LD_ADDR_VAR 0 1
5141: PUSH
5142: LD_INT 22
5144: PUSH
5145: LD_INT 1
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: PUSH
5152: LD_INT 21
5154: PUSH
5155: LD_INT 1
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: PUSH
5162: LD_INT 3
5164: PUSH
5165: LD_INT 50
5167: PUSH
5168: EMPTY
5169: LIST
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: LIST
5179: PPUSH
5180: CALL_OW 69
5184: PUSH
5185: FOR_IN
5186: IFFALSE 5328
// begin sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) ;
5188: LD_ADDR_VAR 0 2
5192: PUSH
5193: LD_INT 22
5195: PUSH
5196: LD_INT 1
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: PUSH
5203: LD_INT 3
5205: PUSH
5206: LD_INT 60
5208: PUSH
5209: EMPTY
5210: LIST
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PUSH
5216: LD_INT 25
5218: PUSH
5219: LD_INT 4
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: LIST
5230: PPUSH
5231: CALL_OW 69
5235: ST_TO_ADDR
// if not sci then
5236: LD_VAR 0 2
5240: NOT
5241: IFFALSE 5245
// break ;
5243: GO 5328
// sci := sci [ 1 ] ;
5245: LD_ADDR_VAR 0 2
5249: PUSH
5250: LD_VAR 0 2
5254: PUSH
5255: LD_INT 1
5257: ARRAY
5258: ST_TO_ADDR
// if IsInUnit ( sci ) then
5259: LD_VAR 0 2
5263: PPUSH
5264: CALL_OW 310
5268: IFFALSE 5281
// ComExit ( sci ) else
5270: LD_VAR 0 2
5274: PPUSH
5275: CALL 54559 0 1
5279: GO 5326
// begin ComHeal ( sci , i ) ;
5281: LD_VAR 0 2
5285: PPUSH
5286: LD_VAR 0 1
5290: PPUSH
5291: CALL_OW 128
// AddComEnterUnit ( sci , [ amLab1 , amLab2 ] [ rand ( 1 , 2 ) ] ) ;
5295: LD_VAR 0 2
5299: PPUSH
5300: LD_INT 32
5302: PUSH
5303: LD_INT 33
5305: PUSH
5306: EMPTY
5307: LIST
5308: LIST
5309: PUSH
5310: LD_INT 1
5312: PPUSH
5313: LD_INT 2
5315: PPUSH
5316: CALL_OW 12
5320: ARRAY
5321: PPUSH
5322: CALL_OW 180
// end ; end ;
5326: GO 5185
5328: POP
5329: POP
// end ;
5330: PPOPN 2
5332: END
// every 0 0$2 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) do var i , tmp , tmp2 ;
5333: LD_EXP 7
5337: NOT
5338: PUSH
5339: LD_INT 22
5341: PUSH
5342: LD_INT 1
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: PUSH
5349: LD_INT 3
5351: PUSH
5352: LD_INT 60
5354: PUSH
5355: EMPTY
5356: LIST
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: PUSH
5362: LD_INT 50
5364: PUSH
5365: EMPTY
5366: LIST
5367: PUSH
5368: LD_INT 34
5370: PUSH
5371: LD_INT 13
5373: PUSH
5374: EMPTY
5375: LIST
5376: LIST
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: LIST
5382: LIST
5383: PPUSH
5384: CALL_OW 69
5388: AND
5389: PUSH
5390: LD_INT 22
5392: PUSH
5393: LD_INT 1
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: PUSH
5400: LD_INT 3
5402: PUSH
5403: LD_INT 24
5405: PUSH
5406: LD_INT 1000
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PUSH
5417: LD_INT 21
5419: PUSH
5420: LD_INT 3
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: PUSH
5427: LD_INT 3
5429: PUSH
5430: LD_INT 30
5432: PUSH
5433: LD_INT 29
5435: PUSH
5436: EMPTY
5437: LIST
5438: LIST
5439: PUSH
5440: EMPTY
5441: LIST
5442: LIST
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: PPUSH
5450: CALL_OW 69
5454: AND
5455: IFFALSE 5724
5457: GO 5459
5459: DISABLE
5460: LD_INT 0
5462: PPUSH
5463: PPUSH
5464: PPUSH
// begin enable ;
5465: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
5466: LD_ADDR_VAR 0 2
5470: PUSH
5471: LD_INT 22
5473: PUSH
5474: LD_INT 1
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: PUSH
5481: LD_INT 3
5483: PUSH
5484: LD_INT 24
5486: PUSH
5487: LD_INT 1000
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PUSH
5494: EMPTY
5495: LIST
5496: LIST
5497: PUSH
5498: LD_INT 21
5500: PUSH
5501: LD_INT 3
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: PUSH
5508: LD_INT 3
5510: PUSH
5511: LD_INT 30
5513: PUSH
5514: LD_INT 29
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: LIST
5529: LIST
5530: PPUSH
5531: CALL_OW 69
5535: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
5536: LD_ADDR_VAR 0 3
5540: PUSH
5541: LD_INT 22
5543: PUSH
5544: LD_INT 1
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: PUSH
5551: LD_INT 3
5553: PUSH
5554: LD_INT 24
5556: PUSH
5557: LD_INT 600
5559: PUSH
5560: EMPTY
5561: LIST
5562: LIST
5563: PUSH
5564: EMPTY
5565: LIST
5566: LIST
5567: PUSH
5568: LD_INT 21
5570: PUSH
5571: LD_INT 3
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: PUSH
5578: LD_INT 3
5580: PUSH
5581: LD_INT 30
5583: PUSH
5584: LD_INT 29
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: LIST
5599: LIST
5600: PPUSH
5601: CALL_OW 69
5605: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
5606: LD_ADDR_VAR 0 1
5610: PUSH
5611: LD_INT 22
5613: PUSH
5614: LD_INT 1
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: PUSH
5621: LD_INT 3
5623: PUSH
5624: LD_INT 60
5626: PUSH
5627: EMPTY
5628: LIST
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: PUSH
5634: LD_INT 50
5636: PUSH
5637: EMPTY
5638: LIST
5639: PUSH
5640: LD_INT 34
5642: PUSH
5643: LD_INT 13
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: LIST
5654: LIST
5655: PPUSH
5656: CALL_OW 69
5660: PUSH
5661: FOR_IN
5662: IFFALSE 5722
// begin if tmp2 then
5664: LD_VAR 0 3
5668: IFFALSE 5696
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
5670: LD_VAR 0 1
5674: PPUSH
5675: LD_VAR 0 3
5679: PPUSH
5680: LD_VAR 0 1
5684: PPUSH
5685: CALL_OW 74
5689: PPUSH
5690: CALL_OW 130
5694: GO 5720
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
5696: LD_VAR 0 1
5700: PPUSH
5701: LD_VAR 0 2
5705: PPUSH
5706: LD_VAR 0 1
5710: PPUSH
5711: CALL_OW 74
5715: PPUSH
5716: CALL_OW 130
// end ;
5720: GO 5661
5722: POP
5723: POP
// end ;
5724: PPOPN 3
5726: END
// every 0 0$1 trigger not usSurrender and not FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) and usToBuild and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
5727: LD_EXP 7
5731: NOT
5732: PUSH
5733: LD_INT 16
5735: PPUSH
5736: LD_INT 81
5738: PUSH
5739: LD_INT 1
5741: PUSH
5742: EMPTY
5743: LIST
5744: LIST
5745: PUSH
5746: LD_INT 50
5748: PUSH
5749: EMPTY
5750: LIST
5751: PUSH
5752: EMPTY
5753: LIST
5754: LIST
5755: PPUSH
5756: CALL_OW 70
5760: NOT
5761: AND
5762: PUSH
5763: LD_EXP 33
5767: AND
5768: PUSH
5769: LD_INT 22
5771: PUSH
5772: LD_INT 1
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: PUSH
5779: LD_INT 3
5781: PUSH
5782: LD_INT 60
5784: PUSH
5785: EMPTY
5786: LIST
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: PUSH
5792: LD_INT 50
5794: PUSH
5795: EMPTY
5796: LIST
5797: PUSH
5798: LD_INT 34
5800: PUSH
5801: LD_INT 13
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: PPUSH
5814: CALL_OW 69
5818: AND
5819: IFFALSE 5931
5821: GO 5823
5823: DISABLE
// begin enable ;
5824: ENABLE
// ComCraneBuild ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) , usToBuild [ 1 ] [ 1 ] , usToBuild [ 1 ] [ 2 ] , usToBuild [ 1 ] [ 3 ] , usToBuild [ 1 ] [ 4 ] ) ;
5825: LD_INT 22
5827: PUSH
5828: LD_INT 1
5830: PUSH
5831: EMPTY
5832: LIST
5833: LIST
5834: PUSH
5835: LD_INT 3
5837: PUSH
5838: LD_INT 60
5840: PUSH
5841: EMPTY
5842: LIST
5843: PUSH
5844: EMPTY
5845: LIST
5846: LIST
5847: PUSH
5848: LD_INT 50
5850: PUSH
5851: EMPTY
5852: LIST
5853: PUSH
5854: LD_INT 34
5856: PUSH
5857: LD_INT 13
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PUSH
5864: EMPTY
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: PPUSH
5870: CALL_OW 69
5874: PPUSH
5875: LD_EXP 33
5879: PUSH
5880: LD_INT 1
5882: ARRAY
5883: PUSH
5884: LD_INT 1
5886: ARRAY
5887: PPUSH
5888: LD_EXP 33
5892: PUSH
5893: LD_INT 1
5895: ARRAY
5896: PUSH
5897: LD_INT 2
5899: ARRAY
5900: PPUSH
5901: LD_EXP 33
5905: PUSH
5906: LD_INT 1
5908: ARRAY
5909: PUSH
5910: LD_INT 3
5912: ARRAY
5913: PPUSH
5914: LD_EXP 33
5918: PUSH
5919: LD_INT 1
5921: ARRAY
5922: PUSH
5923: LD_INT 4
5925: ARRAY
5926: PPUSH
5927: CALL_OW 566
// end ;
5931: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) do var i , tmp , btmp , barracks ;
5932: LD_INT 22
5934: PUSH
5935: LD_INT 1
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: PUSH
5942: LD_INT 50
5944: PUSH
5945: EMPTY
5946: LIST
5947: PUSH
5948: LD_INT 3
5950: PUSH
5951: LD_INT 54
5953: PUSH
5954: EMPTY
5955: LIST
5956: PUSH
5957: EMPTY
5958: LIST
5959: LIST
5960: PUSH
5961: LD_INT 2
5963: PUSH
5964: LD_INT 25
5966: PUSH
5967: LD_INT 1
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: PUSH
5974: LD_INT 25
5976: PUSH
5977: LD_INT 5
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: PUSH
5984: LD_INT 25
5986: PUSH
5987: LD_INT 16
5989: PUSH
5990: EMPTY
5991: LIST
5992: LIST
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: PPUSH
6006: CALL_OW 69
6010: IFFALSE 6372
6012: GO 6014
6014: DISABLE
6015: LD_INT 0
6017: PPUSH
6018: PPUSH
6019: PPUSH
6020: PPUSH
// begin enable ;
6021: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) ;
6022: LD_ADDR_VAR 0 2
6026: PUSH
6027: LD_INT 22
6029: PUSH
6030: LD_INT 1
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: PUSH
6037: LD_INT 50
6039: PUSH
6040: EMPTY
6041: LIST
6042: PUSH
6043: LD_INT 3
6045: PUSH
6046: LD_INT 54
6048: PUSH
6049: EMPTY
6050: LIST
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: PUSH
6056: LD_INT 2
6058: PUSH
6059: LD_INT 25
6061: PUSH
6062: LD_INT 1
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: PUSH
6069: LD_INT 25
6071: PUSH
6072: LD_INT 5
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: PUSH
6079: LD_INT 25
6081: PUSH
6082: LD_INT 16
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: PPUSH
6101: CALL_OW 69
6105: ST_TO_ADDR
// btmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
6106: LD_ADDR_VAR 0 3
6110: PUSH
6111: LD_INT 22
6113: PUSH
6114: LD_INT 1
6116: PUSH
6117: EMPTY
6118: LIST
6119: LIST
6120: PUSH
6121: LD_INT 50
6123: PUSH
6124: EMPTY
6125: LIST
6126: PUSH
6127: LD_INT 21
6129: PUSH
6130: LD_INT 3
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: PUSH
6137: LD_INT 30
6139: PUSH
6140: LD_INT 32
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: PUSH
6147: LD_INT 58
6149: PUSH
6150: EMPTY
6151: LIST
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: PPUSH
6160: CALL_OW 69
6164: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) ;
6165: LD_ADDR_VAR 0 4
6169: PUSH
6170: LD_INT 22
6172: PUSH
6173: LD_INT 1
6175: PUSH
6176: EMPTY
6177: LIST
6178: LIST
6179: PUSH
6180: LD_INT 50
6182: PUSH
6183: EMPTY
6184: LIST
6185: PUSH
6186: LD_INT 30
6188: PUSH
6189: LD_INT 5
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: LIST
6200: PPUSH
6201: CALL_OW 69
6205: ST_TO_ADDR
// if not tmp then
6206: LD_VAR 0 2
6210: NOT
6211: IFFALSE 6215
// exit ;
6213: GO 6372
// for i in tmp do
6215: LD_ADDR_VAR 0 1
6219: PUSH
6220: LD_VAR 0 2
6224: PUSH
6225: FOR_IN
6226: IFFALSE 6370
// begin btmp := FilterByTag ( btmp , 0 ) ;
6228: LD_ADDR_VAR 0 3
6232: PUSH
6233: LD_VAR 0 3
6237: PPUSH
6238: LD_INT 0
6240: PPUSH
6241: CALL 51730 0 2
6245: ST_TO_ADDR
// if not btmp then
6246: LD_VAR 0 3
6250: NOT
6251: IFFALSE 6296
// begin if GetClass ( i ) <> class_apeman_engineer and barracks then
6253: LD_VAR 0 1
6257: PPUSH
6258: CALL_OW 257
6262: PUSH
6263: LD_INT 16
6265: NONEQUAL
6266: PUSH
6267: LD_VAR 0 4
6271: AND
6272: IFFALSE 6292
// ComEnterUnit ( i , barracks [ 1 ] ) ;
6274: LD_VAR 0 1
6278: PPUSH
6279: LD_VAR 0 4
6283: PUSH
6284: LD_INT 1
6286: ARRAY
6287: PPUSH
6288: CALL_OW 120
// continue ;
6292: GO 6225
// end else
6294: GO 6368
// begin SetTag ( btmp [ 1 ] , 1 ) ;
6296: LD_VAR 0 3
6300: PUSH
6301: LD_INT 1
6303: ARRAY
6304: PPUSH
6305: LD_INT 1
6307: PPUSH
6308: CALL_OW 109
// ComEnterUnit ( i , btmp [ 1 ] ) ;
6312: LD_VAR 0 1
6316: PPUSH
6317: LD_VAR 0 3
6321: PUSH
6322: LD_INT 1
6324: ARRAY
6325: PPUSH
6326: CALL_OW 120
// wait ( 0 0$9 ) ;
6330: LD_INT 315
6332: PPUSH
6333: CALL_OW 67
// if IsEmpty ( btmp [ 1 ] ) then
6337: LD_VAR 0 3
6341: PUSH
6342: LD_INT 1
6344: ARRAY
6345: PPUSH
6346: CALL 18583 0 1
6350: IFFALSE 6368
// SetTag ( btmp [ 1 ] , 0 ) ;
6352: LD_VAR 0 3
6356: PUSH
6357: LD_INT 1
6359: ARRAY
6360: PPUSH
6361: LD_INT 0
6363: PPUSH
6364: CALL_OW 109
// end ; end ;
6368: GO 6225
6370: POP
6371: POP
// end ;
6372: PPOPN 4
6374: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do var i , tmp ;
6375: LD_INT 22
6377: PUSH
6378: LD_INT 1
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: PUSH
6385: LD_INT 33
6387: PUSH
6388: LD_INT 2
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: LD_INT 50
6397: PUSH
6398: EMPTY
6399: LIST
6400: PUSH
6401: LD_INT 3
6403: PUSH
6404: LD_INT 61
6406: PUSH
6407: EMPTY
6408: LIST
6409: PUSH
6410: EMPTY
6411: LIST
6412: LIST
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: PPUSH
6420: CALL_OW 69
6424: IFFALSE 6515
6426: GO 6428
6428: DISABLE
6429: LD_INT 0
6431: PPUSH
6432: PPUSH
// begin enable ;
6433: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
6434: LD_ADDR_VAR 0 2
6438: PUSH
6439: LD_INT 22
6441: PUSH
6442: LD_INT 1
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: PUSH
6449: LD_INT 33
6451: PUSH
6452: LD_INT 2
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PUSH
6459: LD_INT 50
6461: PUSH
6462: EMPTY
6463: LIST
6464: PUSH
6465: LD_INT 3
6467: PUSH
6468: LD_INT 61
6470: PUSH
6471: EMPTY
6472: LIST
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: PPUSH
6484: CALL_OW 69
6488: ST_TO_ADDR
// for i in tmp do
6489: LD_ADDR_VAR 0 1
6493: PUSH
6494: LD_VAR 0 2
6498: PUSH
6499: FOR_IN
6500: IFFALSE 6513
// Connect ( i ) ;
6502: LD_VAR 0 1
6506: PPUSH
6507: CALL 24767 0 1
6511: GO 6499
6513: POP
6514: POP
// end ;
6515: PPOPN 2
6517: END
// every 1 1$00 trigger usAttacksAllowed and Difficulty > 1 do var i , un , veh , chassis , weapon ;
6518: LD_EXP 6
6522: PUSH
6523: LD_OWVAR 67
6527: PUSH
6528: LD_INT 1
6530: GREATER
6531: AND
6532: IFFALSE 6974
6534: GO 6536
6536: DISABLE
6537: LD_INT 0
6539: PPUSH
6540: PPUSH
6541: PPUSH
6542: PPUSH
6543: PPUSH
// begin wait ( [ 15 15$00 , 15 15$00 , 14 14$00 , 13 13$00 ] [ Difficulty ] ) ;
6544: LD_INT 31500
6546: PUSH
6547: LD_INT 31500
6549: PUSH
6550: LD_INT 29400
6552: PUSH
6553: LD_INT 27300
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: PUSH
6562: LD_OWVAR 67
6566: ARRAY
6567: PPUSH
6568: CALL_OW 67
// if usSurrender then
6572: LD_EXP 7
6576: IFFALSE 6580
// exit ;
6578: GO 6974
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] do
6580: LD_ADDR_VAR 0 1
6584: PUSH
6585: DOUBLE
6586: LD_INT 1
6588: DEC
6589: ST_TO_ADDR
6590: LD_INT 4
6592: PUSH
6593: LD_INT 5
6595: PUSH
6596: LD_INT 5
6598: PUSH
6599: LD_INT 6
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: PUSH
6608: LD_OWVAR 67
6612: ARRAY
6613: PUSH
6614: FOR_TO
6615: IFFALSE 6919
// begin uc_side := 1 ;
6617: LD_ADDR_OWVAR 20
6621: PUSH
6622: LD_INT 1
6624: ST_TO_ADDR
// uc_nation := 1 ;
6625: LD_ADDR_OWVAR 21
6629: PUSH
6630: LD_INT 1
6632: ST_TO_ADDR
// InitHc_All ( ) ;
6633: CALL_OW 584
// PrepareHuman ( false , 3 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
6637: LD_INT 0
6639: PPUSH
6640: LD_INT 3
6642: PPUSH
6643: LD_INT 5
6645: PUSH
6646: LD_INT 6
6648: PUSH
6649: LD_INT 7
6651: PUSH
6652: LD_INT 8
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: PUSH
6661: LD_OWVAR 67
6665: ARRAY
6666: PPUSH
6667: CALL_OW 380
// un := CreateHuman ;
6671: LD_ADDR_VAR 0 2
6675: PUSH
6676: CALL_OW 44
6680: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ i mod 3 + 1 ] ;
6681: LD_ADDR_VAR 0 4
6685: PUSH
6686: LD_INT 2
6688: PUSH
6689: LD_INT 3
6691: PUSH
6692: LD_INT 4
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: LIST
6699: PUSH
6700: LD_VAR 0 1
6704: PUSH
6705: LD_INT 3
6707: MOD
6708: PUSH
6709: LD_INT 1
6711: PLUS
6712: ARRAY
6713: ST_TO_ADDR
// if chassis = us_heavy_tracked then
6714: LD_VAR 0 4
6718: PUSH
6719: LD_INT 4
6721: EQUAL
6722: IFFALSE 6757
// weapon := [ us_heavy_gun , us_gatling_gun , us_double_gun ] [ rand ( 1 , 3 ) ] else
6724: LD_ADDR_VAR 0 5
6728: PUSH
6729: LD_INT 6
6731: PUSH
6732: LD_INT 4
6734: PUSH
6735: LD_INT 5
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: LIST
6742: PUSH
6743: LD_INT 1
6745: PPUSH
6746: LD_INT 3
6748: PPUSH
6749: CALL_OW 12
6753: ARRAY
6754: ST_TO_ADDR
6755: GO 6792
// weapon := [ us_double_gun , us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6757: LD_ADDR_VAR 0 5
6761: PUSH
6762: LD_INT 5
6764: PUSH
6765: LD_INT 5
6767: PUSH
6768: LD_INT 7
6770: PUSH
6771: LD_INT 4
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: PUSH
6780: LD_INT 1
6782: PPUSH
6783: LD_INT 4
6785: PPUSH
6786: CALL_OW 12
6790: ARRAY
6791: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_manual , weapon , 30 ) ;
6792: LD_VAR 0 4
6796: PPUSH
6797: LD_INT 1
6799: PPUSH
6800: LD_INT 1
6802: PPUSH
6803: LD_VAR 0 5
6807: PPUSH
6808: LD_INT 30
6810: PPUSH
6811: CALL 21299 0 5
// veh := CreateVehicle ;
6815: LD_ADDR_VAR 0 3
6819: PUSH
6820: CALL_OW 45
6824: ST_TO_ADDR
// usAdditionalForces := Replace ( usAdditionalForces , usAdditionalForces + 1 , veh ) ;
6825: LD_ADDR_EXP 34
6829: PUSH
6830: LD_EXP 34
6834: PPUSH
6835: LD_EXP 34
6839: PUSH
6840: LD_INT 1
6842: PLUS
6843: PPUSH
6844: LD_VAR 0 3
6848: PPUSH
6849: CALL_OW 1
6853: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6854: LD_VAR 0 3
6858: PPUSH
6859: LD_INT 4
6861: PPUSH
6862: CALL_OW 233
// PlaceUnitArea ( veh , americanEastArea , false ) ;
6866: LD_VAR 0 3
6870: PPUSH
6871: LD_INT 17
6873: PPUSH
6874: LD_INT 0
6876: PPUSH
6877: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6881: LD_VAR 0 2
6885: PPUSH
6886: LD_VAR 0 3
6890: PPUSH
6891: CALL_OW 52
// ComMoveXY ( veh , 153 , 45 ) ;
6895: LD_VAR 0 3
6899: PPUSH
6900: LD_INT 153
6902: PPUSH
6903: LD_INT 45
6905: PPUSH
6906: CALL_OW 111
// wait ( 0 0$2 ) ;
6910: LD_INT 70
6912: PPUSH
6913: CALL_OW 67
// end ;
6917: GO 6614
6919: POP
6920: POP
// repeat wait ( 0 0$1 ) ;
6921: LD_INT 35
6923: PPUSH
6924: CALL_OW 67
// usAdditionalForces := AgressiveMove ( usAdditionalForces , [ [ 150 , 36 ] , [ 138 , 25 ] ] ) ;
6928: LD_ADDR_EXP 34
6932: PUSH
6933: LD_EXP 34
6937: PPUSH
6938: LD_INT 150
6940: PUSH
6941: LD_INT 36
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: PUSH
6948: LD_INT 138
6950: PUSH
6951: LD_INT 25
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: PPUSH
6962: CALL 56765 0 2
6966: ST_TO_ADDR
// until not usAdditionalForces ;
6967: LD_EXP 34
6971: NOT
6972: IFFALSE 6921
// end ;
6974: PPOPN 5
6976: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 2 ] ] ) do
6977: LD_INT 22
6979: PUSH
6980: LD_INT 1
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PUSH
6987: LD_INT 101
6989: PUSH
6990: LD_INT 2
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PPUSH
7001: CALL_OW 69
7005: IFFALSE 7025
7007: GO 7009
7009: DISABLE
// begin wait ( 0 0$30 ) ;
7010: LD_INT 1050
7012: PPUSH
7013: CALL_OW 67
// usAttacksAllowed := true ;
7017: LD_ADDR_EXP 6
7021: PUSH
7022: LD_INT 1
7024: ST_TO_ADDR
// end ; end_of_file
7025: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7026: LD_VAR 0 1
7030: PPUSH
7031: CALL 58854 0 1
// if un = Heike then
7035: LD_VAR 0 1
7039: PUSH
7040: LD_EXP 15
7044: EQUAL
7045: IFFALSE 7054
// YouLost ( Heike ) ;
7047: LD_STRING Heike
7049: PPUSH
7050: CALL_OW 104
// if un = usCommander then
7054: LD_VAR 0 1
7058: PUSH
7059: LD_EXP 30
7063: EQUAL
7064: IFFALSE 7073
// YouLost ( Commander ) ;
7066: LD_STRING Commander
7068: PPUSH
7069: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_vehicle then
7073: LD_VAR 0 1
7077: PPUSH
7078: CALL_OW 255
7082: PUSH
7083: LD_INT 2
7085: EQUAL
7086: PUSH
7087: LD_VAR 0 1
7091: PPUSH
7092: CALL_OW 247
7096: PUSH
7097: LD_INT 2
7099: EQUAL
7100: AND
7101: IFFALSE 7118
// vehLossCounter := Inc ( vehLossCounter ) ;
7103: LD_ADDR_EXP 14
7107: PUSH
7108: LD_EXP 14
7112: PPUSH
7113: CALL 55522 0 1
7117: ST_TO_ADDR
// if GetSide ( un ) = 1 then
7118: LD_VAR 0 1
7122: PPUSH
7123: CALL_OW 255
7127: PUSH
7128: LD_INT 1
7130: EQUAL
7131: IFFALSE 7473
// begin if GetClass ( un ) = class_sniper then
7133: LD_VAR 0 1
7137: PPUSH
7138: CALL_OW 257
7142: PUSH
7143: LD_INT 5
7145: EQUAL
7146: IFFALSE 7163
// sniperKillCounter := Inc ( sniperKillCounter ) ;
7148: LD_ADDR_EXP 13
7152: PUSH
7153: LD_EXP 13
7157: PPUSH
7158: CALL 55522 0 1
7162: ST_TO_ADDR
// if GetWeapon ( un ) = us_crane and IsOk ( amFac ) then
7163: LD_VAR 0 1
7167: PPUSH
7168: CALL_OW 264
7172: PUSH
7173: LD_INT 13
7175: EQUAL
7176: PUSH
7177: LD_INT 25
7179: PPUSH
7180: CALL_OW 302
7184: AND
7185: IFFALSE 7248
// begin wait ( 0 0$05 * Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ) ) ;
7187: LD_INT 175
7189: PUSH
7190: LD_INT 22
7192: PUSH
7193: LD_INT 1
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: LD_INT 34
7202: PUSH
7203: LD_INT 13
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 69
7218: PPUSH
7219: CALL 18561 0 1
7223: MUL
7224: PPUSH
7225: CALL_OW 67
// AddComConstruct ( amFac , us_medium_wheeled , engine_solar , control_remote , us_crane ) ;
7229: LD_INT 25
7231: PPUSH
7232: LD_INT 2
7234: PPUSH
7235: LD_INT 2
7237: PPUSH
7238: LD_INT 2
7240: PPUSH
7241: LD_INT 13
7243: PPUSH
7244: CALL_OW 185
// end ; if GetWeapon ( un ) = us_cargo_bay and IsOk ( amFac ) then
7248: LD_VAR 0 1
7252: PPUSH
7253: CALL_OW 264
7257: PUSH
7258: LD_INT 12
7260: EQUAL
7261: PUSH
7262: LD_INT 25
7264: PPUSH
7265: CALL_OW 302
7269: AND
7270: IFFALSE 7291
// AddComConstruct ( amFac , us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ) ;
7272: LD_INT 25
7274: PPUSH
7275: LD_INT 2
7277: PPUSH
7278: LD_INT 1
7280: PPUSH
7281: LD_INT 2
7283: PPUSH
7284: LD_INT 12
7286: PPUSH
7287: CALL_OW 185
// if GetBType ( un ) = b_bunker then
7291: LD_VAR 0 1
7295: PPUSH
7296: CALL_OW 266
7300: PUSH
7301: LD_INT 32
7303: EQUAL
7304: IFFALSE 7388
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ [ b_bunker , b_turret ] [ rand ( 1 , 2 ) ] , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
7306: LD_ADDR_EXP 33
7310: PUSH
7311: LD_EXP 33
7315: PPUSH
7316: LD_EXP 33
7320: PUSH
7321: LD_INT 1
7323: PLUS
7324: PPUSH
7325: LD_INT 32
7327: PUSH
7328: LD_INT 33
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: PUSH
7335: LD_INT 1
7337: PPUSH
7338: LD_INT 2
7340: PPUSH
7341: CALL_OW 12
7345: ARRAY
7346: PUSH
7347: LD_VAR 0 1
7351: PPUSH
7352: CALL_OW 250
7356: PUSH
7357: LD_VAR 0 1
7361: PPUSH
7362: CALL_OW 251
7366: PUSH
7367: LD_VAR 0 1
7371: PPUSH
7372: CALL_OW 254
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: PPUSH
7383: CALL_OW 1
7387: ST_TO_ADDR
// if GetBType ( un ) in [ b_barracks , b_armoury ] then
7388: LD_VAR 0 1
7392: PPUSH
7393: CALL_OW 266
7397: PUSH
7398: LD_INT 5
7400: PUSH
7401: LD_INT 4
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: IN
7408: IFFALSE 7473
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_armoury , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
7410: LD_ADDR_EXP 33
7414: PUSH
7415: LD_EXP 33
7419: PPUSH
7420: LD_EXP 33
7424: PUSH
7425: LD_INT 1
7427: PLUS
7428: PPUSH
7429: LD_INT 4
7431: PUSH
7432: LD_VAR 0 1
7436: PPUSH
7437: CALL_OW 250
7441: PUSH
7442: LD_VAR 0 1
7446: PPUSH
7447: CALL_OW 251
7451: PUSH
7452: LD_VAR 0 1
7456: PPUSH
7457: CALL_OW 254
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: PPUSH
7468: CALL_OW 1
7472: ST_TO_ADDR
// end ; end ;
7473: PPOPN 1
7475: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 1 and GetTag ( un ) = 1 then
7476: LD_VAR 0 1
7480: PPUSH
7481: CALL_OW 255
7485: PUSH
7486: LD_INT 1
7488: EQUAL
7489: PUSH
7490: LD_VAR 0 1
7494: PPUSH
7495: CALL_OW 110
7499: PUSH
7500: LD_INT 1
7502: EQUAL
7503: AND
7504: IFFALSE 7518
// SetTag ( un , 0 ) ;
7506: LD_VAR 0 1
7510: PPUSH
7511: LD_INT 0
7513: PPUSH
7514: CALL_OW 109
// if GetSide ( un ) = 1 and GetWeapon ( un ) = us_heavy_gun and not seeHeavyGun then
7518: LD_VAR 0 1
7522: PPUSH
7523: CALL_OW 255
7527: PUSH
7528: LD_INT 1
7530: EQUAL
7531: PUSH
7532: LD_VAR 0 1
7536: PPUSH
7537: CALL_OW 264
7541: PUSH
7542: LD_INT 6
7544: EQUAL
7545: AND
7546: PUSH
7547: LD_EXP 11
7551: NOT
7552: AND
7553: IFFALSE 7563
// seeHeavyGun := true ;
7555: LD_ADDR_EXP 11
7559: PUSH
7560: LD_INT 1
7562: ST_TO_ADDR
// if GetControl ( un ) = control_remote and GetSide ( un ) <> 2 then
7563: LD_VAR 0 1
7567: PPUSH
7568: CALL_OW 263
7572: PUSH
7573: LD_INT 2
7575: EQUAL
7576: PUSH
7577: LD_VAR 0 1
7581: PPUSH
7582: CALL_OW 255
7586: PUSH
7587: LD_INT 2
7589: NONEQUAL
7590: AND
7591: IFFALSE 7617
// begin ComUnlink ( un ) ;
7593: LD_VAR 0 1
7597: PPUSH
7598: CALL_OW 136
// if not seeRemoteVehicle then
7602: LD_EXP 10
7606: NOT
7607: IFFALSE 7617
// seeRemoteVehicle := true ;
7609: LD_ADDR_EXP 10
7613: PUSH
7614: LD_INT 1
7616: ST_TO_ADDR
// end ; end ;
7617: PPOPN 1
7619: END
// on BuildingComplete ( b ) do var i , barracks ;
7620: LD_INT 0
7622: PPUSH
7623: PPUSH
// begin if GetSide ( b ) = 2 then
7624: LD_VAR 0 1
7628: PPUSH
7629: CALL_OW 255
7633: PUSH
7634: LD_INT 2
7636: EQUAL
7637: IFFALSE 7675
// begin if GetBType ( b ) = b_depot and IsInArea ( b , westBankArea ) then
7639: LD_VAR 0 1
7643: PPUSH
7644: CALL_OW 266
7648: PUSH
7649: LD_INT 0
7651: EQUAL
7652: PUSH
7653: LD_VAR 0 1
7657: PPUSH
7658: LD_INT 18
7660: PPUSH
7661: CALL_OW 308
7665: AND
7666: IFFALSE 7675
// SetAchievement ( ACH_WEST ) ;
7668: LD_STRING ACH_WEST
7670: PPUSH
7671: CALL_OW 543
// end ; if GetSide ( b ) = 1 then
7675: LD_VAR 0 1
7679: PPUSH
7680: CALL_OW 255
7684: PUSH
7685: LD_INT 1
7687: EQUAL
7688: IFFALSE 7864
// begin usToBuild := Delete ( usToBuild , 1 ) ;
7690: LD_ADDR_EXP 33
7694: PUSH
7695: LD_EXP 33
7699: PPUSH
7700: LD_INT 1
7702: PPUSH
7703: CALL_OW 3
7707: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
7708: LD_VAR 0 1
7712: PPUSH
7713: CALL_OW 266
7717: PUSH
7718: LD_INT 4
7720: EQUAL
7721: IFFALSE 7732
// ComUpgrade ( b ) ;
7723: LD_VAR 0 1
7727: PPUSH
7728: CALL_OW 146
// if GetBType ( b ) in [ b_bunker , b_turret ] then
7732: LD_VAR 0 1
7736: PPUSH
7737: CALL_OW 266
7741: PUSH
7742: LD_INT 32
7744: PUSH
7745: LD_INT 33
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: IN
7752: IFFALSE 7864
// begin AddComPlaceWeapon ( b , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
7754: LD_VAR 0 1
7758: PPUSH
7759: LD_INT 6
7761: PUSH
7762: LD_INT 7
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_INT 1
7771: PPUSH
7772: LD_INT 2
7774: PPUSH
7775: CALL_OW 12
7779: ARRAY
7780: PPUSH
7781: CALL_OW 208
// if GetBType ( b ) = b_turret then
7785: LD_VAR 0 1
7789: PPUSH
7790: CALL_OW 266
7794: PUSH
7795: LD_INT 33
7797: EQUAL
7798: IFFALSE 7802
// exit ;
7800: GO 7864
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
7802: LD_ADDR_VAR 0 3
7806: PUSH
7807: LD_INT 22
7809: PUSH
7810: LD_INT 1
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: PUSH
7817: LD_INT 30
7819: PUSH
7820: LD_INT 5
7822: PUSH
7823: EMPTY
7824: LIST
7825: LIST
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: PPUSH
7831: CALL_OW 69
7835: ST_TO_ADDR
// if barracks then
7836: LD_VAR 0 3
7840: IFFALSE 7864
// ComExitBuilding ( UnitsInside ( barracks [ 1 ] ) [ 1 ] ) ;
7842: LD_VAR 0 3
7846: PUSH
7847: LD_INT 1
7849: ARRAY
7850: PPUSH
7851: CALL_OW 313
7855: PUSH
7856: LD_INT 1
7858: ARRAY
7859: PPUSH
7860: CALL_OW 122
// end ; end ; end ;
7864: PPOPN 3
7866: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7867: LD_VAR 0 1
7871: PPUSH
7872: LD_VAR 0 2
7876: PPUSH
7877: CALL 58974 0 2
// if GetSide ( factory ) = 1 then
7881: LD_VAR 0 2
7885: PPUSH
7886: CALL_OW 255
7890: PUSH
7891: LD_INT 1
7893: EQUAL
7894: IFFALSE 7973
// begin if GetWeapon ( vehicle ) = us_cargo_bay then
7896: LD_VAR 0 1
7900: PPUSH
7901: CALL_OW 264
7905: PUSH
7906: LD_INT 12
7908: EQUAL
7909: IFFALSE 7921
// usCargo := vehicle ;
7911: LD_ADDR_EXP 32
7915: PUSH
7916: LD_VAR 0 1
7920: ST_TO_ADDR
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , us_crane ] then
7921: LD_VAR 0 1
7925: PPUSH
7926: CALL_OW 264
7930: PUSH
7931: LD_INT 12
7933: PUSH
7934: LD_INT 13
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: IN
7941: NOT
7942: IFFALSE 7973
// usForces := Replace ( usForces , usForces + 1 , vehicle ) ;
7944: LD_ADDR_EXP 31
7948: PUSH
7949: LD_EXP 31
7953: PPUSH
7954: LD_EXP 31
7958: PUSH
7959: LD_INT 1
7961: PLUS
7962: PPUSH
7963: LD_VAR 0 1
7967: PPUSH
7968: CALL_OW 1
7972: ST_TO_ADDR
// end ; end ;
7973: PPOPN 2
7975: END
// on EvacuateVehicle ( un , veh , p1 , p2 ) do begin if GetSide ( veh ) = 1 then
7976: LD_VAR 0 2
7980: PPUSH
7981: CALL_OW 255
7985: PUSH
7986: LD_INT 1
7988: EQUAL
7989: IFFALSE 8003
// AddComEnterUnit ( un , amFac ) ;
7991: LD_VAR 0 1
7995: PPUSH
7996: LD_INT 25
7998: PPUSH
7999: CALL_OW 180
// end ;
8003: PPOPN 4
8005: END
// on EvacuateBuilding ( b , un ) do begin if GetSide ( b ) = 1 and GetBType ( b ) = b_bunker and GetClass ( un ) in [ class_soldier , class_sniper ] and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] , [ f_ok ] ] ) then
8006: LD_VAR 0 1
8010: PPUSH
8011: CALL_OW 255
8015: PUSH
8016: LD_INT 1
8018: EQUAL
8019: PUSH
8020: LD_VAR 0 1
8024: PPUSH
8025: CALL_OW 266
8029: PUSH
8030: LD_INT 32
8032: EQUAL
8033: AND
8034: PUSH
8035: LD_VAR 0 2
8039: PPUSH
8040: CALL_OW 257
8044: PUSH
8045: LD_INT 1
8047: PUSH
8048: LD_INT 5
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: IN
8055: AND
8056: PUSH
8057: LD_INT 22
8059: PUSH
8060: LD_INT 1
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: PUSH
8067: LD_INT 30
8069: PUSH
8070: LD_INT 5
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: PUSH
8077: LD_INT 50
8079: PUSH
8080: EMPTY
8081: LIST
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: LIST
8087: PPUSH
8088: CALL_OW 69
8092: AND
8093: IFFALSE 8163
// if UnitsInside ( HexInfo ( 74 , 120 ) ) < 6 then
8095: LD_INT 74
8097: PPUSH
8098: LD_INT 120
8100: PPUSH
8101: CALL_OW 428
8105: PPUSH
8106: CALL_OW 313
8110: PUSH
8111: LD_INT 6
8113: LESS
8114: IFFALSE 8163
// begin ComEnterUnit ( un , HexInfo ( 74 , 120 ) ) ;
8116: LD_VAR 0 2
8120: PPUSH
8121: LD_INT 74
8123: PPUSH
8124: LD_INT 120
8126: PPUSH
8127: CALL_OW 428
8131: PPUSH
8132: CALL_OW 120
// if GetClass ( un ) = class_soldier then
8136: LD_VAR 0 2
8140: PPUSH
8141: CALL_OW 257
8145: PUSH
8146: LD_INT 1
8148: EQUAL
8149: IFFALSE 8163
// AddComChangeProfession ( un , class_sniper ) ;
8151: LD_VAR 0 2
8155: PPUSH
8156: LD_INT 5
8158: PPUSH
8159: CALL_OW 183
// end ; end ; end_of_file
8163: PPOPN 2
8165: END
// export function Action ; var i , j , veh , tmp , hasEng , hasCamera , driver , counter ; begin
8166: LD_INT 0
8168: PPUSH
8169: PPUSH
8170: PPUSH
8171: PPUSH
8172: PPUSH
8173: PPUSH
8174: PPUSH
8175: PPUSH
8176: PPUSH
// Video ( true ) ;
8177: LD_INT 1
8179: PPUSH
8180: CALL 54133 0 1
// music_nat := 1 ;
8184: LD_ADDR_OWVAR 71
8188: PUSH
8189: LD_INT 1
8191: ST_TO_ADDR
// music_class := music_recon ;
8192: LD_ADDR_OWVAR 72
8196: PUSH
8197: LD_INT 3
8199: ST_TO_ADDR
// PlaceSeeing ( 184 , 142 , 2 , - 10 ) ;
8200: LD_INT 184
8202: PPUSH
8203: LD_INT 142
8205: PPUSH
8206: LD_INT 2
8208: PPUSH
8209: LD_INT 10
8211: NEG
8212: PPUSH
8213: CALL_OW 330
// RemoveSeeing ( 184 , 142 , 2 ) ;
8217: LD_INT 184
8219: PPUSH
8220: LD_INT 142
8222: PPUSH
8223: LD_INT 2
8225: PPUSH
8226: CALL_OW 331
// PlaceSeeing ( 204 , 151 , 2 , - 10 ) ;
8230: LD_INT 204
8232: PPUSH
8233: LD_INT 151
8235: PPUSH
8236: LD_INT 2
8238: PPUSH
8239: LD_INT 10
8241: NEG
8242: PPUSH
8243: CALL_OW 330
// RemoveSeeing ( 204 , 151 , 2 ) ;
8247: LD_INT 204
8249: PPUSH
8250: LD_INT 151
8252: PPUSH
8253: LD_INT 2
8255: PPUSH
8256: CALL_OW 331
// CenterNowOnXY ( 184 , 142 ) ;
8260: LD_INT 184
8262: PPUSH
8263: LD_INT 142
8265: PPUSH
8266: CALL_OW 86
// wait ( 0 0$2 ) ;
8270: LD_INT 70
8272: PPUSH
8273: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
8277: LD_ADDR_VAR 0 5
8281: PUSH
8282: LD_EXP 15
8286: PUSH
8287: LD_EXP 16
8291: PUSH
8292: LD_EXP 17
8296: PUSH
8297: LD_EXP 18
8301: PUSH
8302: LD_EXP 19
8306: PUSH
8307: LD_EXP 20
8311: PUSH
8312: LD_EXP 21
8316: PUSH
8317: LD_EXP 22
8321: PUSH
8322: LD_EXP 24
8326: PUSH
8327: LD_EXP 25
8331: PUSH
8332: LD_EXP 26
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: PUSH
8350: LD_EXP 27
8354: UNION
8355: ST_TO_ADDR
// hasEng := UnitFilter ( tmp , [ f_class , 2 ] ) > 0 ;
8356: LD_ADDR_VAR 0 6
8360: PUSH
8361: LD_VAR 0 5
8365: PPUSH
8366: LD_INT 25
8368: PUSH
8369: LD_INT 2
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PPUSH
8376: CALL_OW 72
8380: PUSH
8381: LD_INT 0
8383: GREATER
8384: ST_TO_ADDR
// hasCamera := false ;
8385: LD_ADDR_VAR 0 7
8389: PUSH
8390: LD_INT 0
8392: ST_TO_ADDR
// if not hasEng then
8393: LD_VAR 0 6
8397: NOT
8398: IFFALSE 8426
// SetClass ( tmp [ rand ( 1 , tmp ) ] , class_engineer ) ;
8400: LD_VAR 0 5
8404: PUSH
8405: LD_INT 1
8407: PPUSH
8408: LD_VAR 0 5
8412: PPUSH
8413: CALL_OW 12
8417: ARRAY
8418: PPUSH
8419: LD_INT 2
8421: PPUSH
8422: CALL_OW 336
// if heikeVehicles then
8426: LD_EXP 29
8430: IFFALSE 9054
// begin tmp := SortByClass ( tmp , class_mechanic ) ;
8432: LD_ADDR_VAR 0 5
8436: PUSH
8437: LD_VAR 0 5
8441: PPUSH
8442: LD_INT 3
8444: PPUSH
8445: CALL 56387 0 2
8449: ST_TO_ADDR
// for i in heikeVehicles do
8450: LD_ADDR_VAR 0 2
8454: PUSH
8455: LD_EXP 29
8459: PUSH
8460: FOR_IN
8461: IFFALSE 9052
// begin if not tmp then
8463: LD_VAR 0 5
8467: NOT
8468: IFFALSE 8472
// break ;
8470: GO 9052
// uc_side := 2 ;
8472: LD_ADDR_OWVAR 20
8476: PUSH
8477: LD_INT 2
8479: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
8480: LD_ADDR_OWVAR 21
8484: PUSH
8485: LD_VAR 0 2
8489: PUSH
8490: LD_INT 5
8492: ARRAY
8493: ST_TO_ADDR
// vc_chassis := i [ 1 ] ;
8494: LD_ADDR_OWVAR 37
8498: PUSH
8499: LD_VAR 0 2
8503: PUSH
8504: LD_INT 1
8506: ARRAY
8507: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
8508: LD_ADDR_OWVAR 39
8512: PUSH
8513: LD_VAR 0 2
8517: PUSH
8518: LD_INT 2
8520: ARRAY
8521: ST_TO_ADDR
// vc_control := i [ 3 ] ;
8522: LD_ADDR_OWVAR 38
8526: PUSH
8527: LD_VAR 0 2
8531: PUSH
8532: LD_INT 3
8534: ARRAY
8535: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
8536: LD_ADDR_OWVAR 40
8540: PUSH
8541: LD_VAR 0 2
8545: PUSH
8546: LD_INT 4
8548: ARRAY
8549: ST_TO_ADDR
// veh := CreateVehicle ;
8550: LD_ADDR_VAR 0 4
8554: PUSH
8555: CALL_OW 45
8559: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
8560: LD_VAR 0 4
8564: PPUSH
8565: LD_INT 4
8567: PPUSH
8568: CALL_OW 233
// if i [ 3 ] = control_manual then
8572: LD_VAR 0 2
8576: PUSH
8577: LD_INT 3
8579: ARRAY
8580: PUSH
8581: LD_INT 1
8583: EQUAL
8584: IFFALSE 8669
// begin PlaceUnitArea ( veh , startArea , false ) ;
8586: LD_VAR 0 4
8590: PPUSH
8591: LD_INT 1
8593: PPUSH
8594: LD_INT 0
8596: PPUSH
8597: CALL_OW 49
// if i [ 4 ] = ar_control_tower then
8601: LD_VAR 0 2
8605: PUSH
8606: LD_INT 4
8608: ARRAY
8609: PUSH
8610: LD_INT 31
8612: EQUAL
8613: IFFALSE 8631
// SetClass ( tmp [ 1 ] , class_mechanic ) ;
8615: LD_VAR 0 5
8619: PUSH
8620: LD_INT 1
8622: ARRAY
8623: PPUSH
8624: LD_INT 3
8626: PPUSH
8627: CALL_OW 336
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
8631: LD_VAR 0 5
8635: PUSH
8636: LD_INT 1
8638: ARRAY
8639: PPUSH
8640: LD_VAR 0 4
8644: PPUSH
8645: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
8649: LD_ADDR_VAR 0 5
8653: PUSH
8654: LD_VAR 0 5
8658: PPUSH
8659: LD_INT 1
8661: PPUSH
8662: CALL_OW 3
8666: ST_TO_ADDR
// end else
8667: GO 8730
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
8669: LD_INT 22
8671: PUSH
8672: LD_INT 2
8674: PUSH
8675: EMPTY
8676: LIST
8677: LIST
8678: PUSH
8679: LD_INT 34
8681: PUSH
8682: LD_INT 31
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PPUSH
8693: CALL_OW 69
8697: IFFALSE 8730
// begin PlaceUnitArea ( veh , startArea , false ) ;
8699: LD_VAR 0 4
8703: PPUSH
8704: LD_INT 1
8706: PPUSH
8707: LD_INT 0
8709: PPUSH
8710: CALL_OW 49
// Connect ( veh ) ;
8714: LD_VAR 0 4
8718: PPUSH
8719: CALL 24767 0 1
// wait ( 0 0$2 ) ;
8723: LD_INT 70
8725: PPUSH
8726: CALL_OW 67
// end ; SetLives ( veh , i [ 6 ] ) ;
8730: LD_VAR 0 4
8734: PPUSH
8735: LD_VAR 0 2
8739: PUSH
8740: LD_INT 6
8742: ARRAY
8743: PPUSH
8744: CALL_OW 234
// SetFuel ( veh , 20 ) ;
8748: LD_VAR 0 4
8752: PPUSH
8753: LD_INT 20
8755: PPUSH
8756: CALL_OW 240
// if i [ 7 ] and GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay ] then
8760: LD_VAR 0 2
8764: PUSH
8765: LD_INT 7
8767: ARRAY
8768: PUSH
8769: LD_VAR 0 4
8773: PPUSH
8774: CALL_OW 264
8778: PUSH
8779: LD_INT 51
8781: PUSH
8782: LD_INT 32
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: IN
8789: AND
8790: IFFALSE 8841
// begin for j := 1 to 2 do
8792: LD_ADDR_VAR 0 3
8796: PUSH
8797: DOUBLE
8798: LD_INT 1
8800: DEC
8801: ST_TO_ADDR
8802: LD_INT 2
8804: PUSH
8805: FOR_TO
8806: IFFALSE 8839
// AddCargo ( veh , j , i [ 7 ] [ j ] ) ;
8808: LD_VAR 0 4
8812: PPUSH
8813: LD_VAR 0 3
8817: PPUSH
8818: LD_VAR 0 2
8822: PUSH
8823: LD_INT 7
8825: ARRAY
8826: PUSH
8827: LD_VAR 0 3
8831: ARRAY
8832: PPUSH
8833: CALL_OW 291
8837: GO 8805
8839: POP
8840: POP
// end ; ComMoveXY ( veh , 185 , 144 ) ;
8841: LD_VAR 0 4
8845: PPUSH
8846: LD_INT 185
8848: PPUSH
8849: LD_INT 144
8851: PPUSH
8852: CALL_OW 111
// if GetControl ( veh ) = control_manual and not hasCamera and GetClass ( IsDrivenBy ( veh ) ) = 2 then
8856: LD_VAR 0 4
8860: PPUSH
8861: CALL_OW 263
8865: PUSH
8866: LD_INT 1
8868: EQUAL
8869: PUSH
8870: LD_VAR 0 7
8874: NOT
8875: AND
8876: PUSH
8877: LD_VAR 0 4
8881: PPUSH
8882: CALL_OW 311
8886: PPUSH
8887: CALL_OW 257
8891: PUSH
8892: LD_INT 2
8894: EQUAL
8895: AND
8896: IFFALSE 9001
// begin hasCamera := true ;
8898: LD_ADDR_VAR 0 7
8902: PUSH
8903: LD_INT 1
8905: ST_TO_ADDR
// driver := IsDrivenBy ( veh ) ;
8906: LD_ADDR_VAR 0 8
8910: PUSH
8911: LD_VAR 0 4
8915: PPUSH
8916: CALL_OW 311
8920: ST_TO_ADDR
// AddComMoveXY ( veh , 177 , 138 ) ;
8921: LD_VAR 0 4
8925: PPUSH
8926: LD_INT 177
8928: PPUSH
8929: LD_INT 138
8931: PPUSH
8932: CALL_OW 171
// AddComExitVehicle ( driver ) ;
8936: LD_VAR 0 8
8940: PPUSH
8941: CALL_OW 181
// AddComHiddenCamera ( driver , 190 , 150 ) ;
8945: LD_VAR 0 8
8949: PPUSH
8950: LD_INT 190
8952: PPUSH
8953: LD_INT 150
8955: PPUSH
8956: CALL_OW 217
// AddComEnterUnit ( driver , veh ) ;
8960: LD_VAR 0 8
8964: PPUSH
8965: LD_VAR 0 4
8969: PPUSH
8970: CALL_OW 180
// AddComMoveXY ( driver , 170 , 103 ) ;
8974: LD_VAR 0 8
8978: PPUSH
8979: LD_INT 170
8981: PPUSH
8982: LD_INT 103
8984: PPUSH
8985: CALL_OW 171
// CenterOnXY ( 190 , 150 ) ;
8989: LD_INT 190
8991: PPUSH
8992: LD_INT 150
8994: PPUSH
8995: CALL_OW 84
// end else
8999: GO 9043
// begin AddComWait ( veh , 0 0$2 ) ;
9001: LD_VAR 0 4
9005: PPUSH
9006: LD_INT 70
9008: PPUSH
9009: CALL_OW 202
// AddComMoveXY ( veh , 179 , 129 ) ;
9013: LD_VAR 0 4
9017: PPUSH
9018: LD_INT 179
9020: PPUSH
9021: LD_INT 129
9023: PPUSH
9024: CALL_OW 171
// AddComMoveXY ( veh , 170 , 103 ) ;
9028: LD_VAR 0 4
9032: PPUSH
9033: LD_INT 170
9035: PPUSH
9036: LD_INT 103
9038: PPUSH
9039: CALL_OW 171
// end ; wait ( 0 0$2 ) ;
9043: LD_INT 70
9045: PPUSH
9046: CALL_OW 67
// end ;
9050: GO 8460
9052: POP
9053: POP
// end ; if tmp then
9054: LD_VAR 0 5
9058: IFFALSE 9203
// begin for i in tmp do
9060: LD_ADDR_VAR 0 2
9064: PUSH
9065: LD_VAR 0 5
9069: PUSH
9070: FOR_IN
9071: IFFALSE 9201
// begin SetDir ( i , 4 ) ;
9073: LD_VAR 0 2
9077: PPUSH
9078: LD_INT 4
9080: PPUSH
9081: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
9085: LD_VAR 0 2
9089: PPUSH
9090: LD_INT 1
9092: PPUSH
9093: LD_INT 0
9095: PPUSH
9096: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
9100: LD_VAR 0 2
9104: PPUSH
9105: LD_INT 185
9107: PPUSH
9108: LD_INT 144
9110: PPUSH
9111: CALL_OW 111
// if GetClass ( i ) = 2 and not hasCamera then
9115: LD_VAR 0 2
9119: PPUSH
9120: CALL_OW 257
9124: PUSH
9125: LD_INT 2
9127: EQUAL
9128: PUSH
9129: LD_VAR 0 7
9133: NOT
9134: AND
9135: IFFALSE 9162
// begin hasCamera := true ;
9137: LD_ADDR_VAR 0 7
9141: PUSH
9142: LD_INT 1
9144: ST_TO_ADDR
// AddComHiddenCamera ( i , 190 , 150 ) ;
9145: LD_VAR 0 2
9149: PPUSH
9150: LD_INT 190
9152: PPUSH
9153: LD_INT 150
9155: PPUSH
9156: CALL_OW 217
// end else
9160: GO 9177
// AddComMoveXY ( i , 179 , 129 ) ;
9162: LD_VAR 0 2
9166: PPUSH
9167: LD_INT 179
9169: PPUSH
9170: LD_INT 129
9172: PPUSH
9173: CALL_OW 171
// AddComMoveXY ( i , 170 , 103 ) ;
9177: LD_VAR 0 2
9181: PPUSH
9182: LD_INT 170
9184: PPUSH
9185: LD_INT 103
9187: PPUSH
9188: CALL_OW 171
// wait ( 0 0$2 ) ;
9192: LD_INT 70
9194: PPUSH
9195: CALL_OW 67
// end ;
9199: GO 9070
9201: POP
9202: POP
// end ; if heikeApes then
9203: LD_EXP 28
9207: IFFALSE 9325
// begin counter := 0 ;
9209: LD_ADDR_VAR 0 9
9213: PUSH
9214: LD_INT 0
9216: ST_TO_ADDR
// for i in heikeApes do
9217: LD_ADDR_VAR 0 2
9221: PUSH
9222: LD_EXP 28
9226: PUSH
9227: FOR_IN
9228: IFFALSE 9323
// begin if counter > 2 then
9230: LD_VAR 0 9
9234: PUSH
9235: LD_INT 2
9237: GREATER
9238: IFFALSE 9242
// break ;
9240: GO 9323
// counter := Inc ( counter ) ;
9242: LD_ADDR_VAR 0 9
9246: PUSH
9247: LD_VAR 0 9
9251: PPUSH
9252: CALL 55522 0 1
9256: ST_TO_ADDR
// SetDir ( i , 4 ) ;
9257: LD_VAR 0 2
9261: PPUSH
9262: LD_INT 4
9264: PPUSH
9265: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
9269: LD_VAR 0 2
9273: PPUSH
9274: LD_INT 1
9276: PPUSH
9277: LD_INT 0
9279: PPUSH
9280: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
9284: LD_VAR 0 2
9288: PPUSH
9289: LD_INT 185
9291: PPUSH
9292: LD_INT 144
9294: PPUSH
9295: CALL_OW 111
// AddComMoveXY ( i , 170 , 103 ) ;
9299: LD_VAR 0 2
9303: PPUSH
9304: LD_INT 170
9306: PPUSH
9307: LD_INT 103
9309: PPUSH
9310: CALL_OW 171
// wait ( 0 0$2 ) ;
9314: LD_INT 70
9316: PPUSH
9317: CALL_OW 67
// end ;
9321: GO 9227
9323: POP
9324: POP
// end ; AddComMoveXY ( Heike , 163 , 89 ) ;
9325: LD_EXP 15
9329: PPUSH
9330: LD_INT 163
9332: PPUSH
9333: LD_INT 89
9335: PPUSH
9336: CALL_OW 171
// Say ( Heike , DH-Intro-1 ) ;
9340: LD_EXP 15
9344: PPUSH
9345: LD_STRING DH-Intro-1
9347: PPUSH
9348: CALL_OW 88
// CenterOnXY ( 175 , 117 ) ;
9352: LD_INT 175
9354: PPUSH
9355: LD_INT 117
9357: PPUSH
9358: CALL_OW 84
// if Markov then
9362: LD_EXP 22
9366: IFFALSE 9941
// begin Say ( Markov , DMar-Intro-2 ) ;
9368: LD_EXP 22
9372: PPUSH
9373: LD_STRING DMar-Intro-2
9375: PPUSH
9376: CALL_OW 88
// Say ( Markov , DMar-Intro-3 ) ;
9380: LD_EXP 22
9384: PPUSH
9385: LD_STRING DMar-Intro-3
9387: PPUSH
9388: CALL_OW 88
// wait ( 0 0$1 ) ;
9392: LD_INT 35
9394: PPUSH
9395: CALL_OW 67
// CenterOnUnits ( Heike ) ;
9399: LD_EXP 15
9403: PPUSH
9404: CALL_OW 85
// if Kurt then
9408: LD_EXP 25
9412: IFFALSE 9464
// begin if IsInUnit ( Kurt ) then
9414: LD_EXP 25
9418: PPUSH
9419: CALL_OW 310
9423: IFFALSE 9434
// ComExit ( Kurt ) ;
9425: LD_EXP 25
9429: PPUSH
9430: CALL 54559 0 1
// AddComMoveXY ( Kurt , 130 , 56 ) ;
9434: LD_EXP 25
9438: PPUSH
9439: LD_INT 130
9441: PPUSH
9442: LD_INT 56
9444: PPUSH
9445: CALL_OW 171
// AddComTurnXY ( Kurt , 129 , 56 ) ;
9449: LD_EXP 25
9453: PPUSH
9454: LD_INT 129
9456: PPUSH
9457: LD_INT 56
9459: PPUSH
9460: CALL_OW 178
// end ; if Kaia then
9464: LD_EXP 20
9468: IFFALSE 9648
// begin Say ( Kaia , DK-Intro-4 ) ;
9470: LD_EXP 20
9474: PPUSH
9475: LD_STRING DK-Intro-4
9477: PPUSH
9478: CALL_OW 88
// Say ( Markov , DMar-Intro-5 ) ;
9482: LD_EXP 22
9486: PPUSH
9487: LD_STRING DMar-Intro-5
9489: PPUSH
9490: CALL_OW 88
// Say ( Markov , DMar-Intro-6 ) ;
9494: LD_EXP 22
9498: PPUSH
9499: LD_STRING DMar-Intro-6
9501: PPUSH
9502: CALL_OW 88
// Say ( Olaf , DO-Intro-7 ) ;
9506: LD_EXP 24
9510: PPUSH
9511: LD_STRING DO-Intro-7
9513: PPUSH
9514: CALL_OW 88
// CenterOnXY ( 160 , 85 ) ;
9518: LD_INT 160
9520: PPUSH
9521: LD_INT 85
9523: PPUSH
9524: CALL_OW 84
// Say ( Markov , DMar-Intro-8 ) ;
9528: LD_EXP 22
9532: PPUSH
9533: LD_STRING DMar-Intro-8
9535: PPUSH
9536: CALL_OW 88
// Say ( Markov , DMar-Intro-9 ) ;
9540: LD_EXP 22
9544: PPUSH
9545: LD_STRING DMar-Intro-9
9547: PPUSH
9548: CALL_OW 88
// Say ( Markov , DMar-Intro-10 ) ;
9552: LD_EXP 22
9556: PPUSH
9557: LD_STRING DMar-Intro-10
9559: PPUSH
9560: CALL_OW 88
// Say ( Markov , DMar-Intro-11 ) ;
9564: LD_EXP 22
9568: PPUSH
9569: LD_STRING DMar-Intro-11
9571: PPUSH
9572: CALL_OW 88
// Say ( Givi , DG-Intro-12 ) ;
9576: LD_EXP 16
9580: PPUSH
9581: LD_STRING DG-Intro-12
9583: PPUSH
9584: CALL_OW 88
// Say ( Givi , DG-Intro-13 ) ;
9588: LD_EXP 16
9592: PPUSH
9593: LD_STRING DG-Intro-13
9595: PPUSH
9596: CALL_OW 88
// Say ( Givi , DG-Intro-14 ) ;
9600: LD_EXP 16
9604: PPUSH
9605: LD_STRING DG-Intro-14
9607: PPUSH
9608: CALL_OW 88
// Say ( Givi , DG-Intro-15 ) ;
9612: LD_EXP 16
9616: PPUSH
9617: LD_STRING DG-Intro-15
9619: PPUSH
9620: CALL_OW 88
// Say ( Heike , DH-Intro-16 ) ;
9624: LD_EXP 15
9628: PPUSH
9629: LD_STRING DH-Intro-16
9631: PPUSH
9632: CALL_OW 88
// Say ( Markov , DMar-Intro-17 ) ;
9636: LD_EXP 22
9640: PPUSH
9641: LD_STRING DMar-Intro-17
9643: PPUSH
9644: CALL_OW 88
// end ; if Kurt and Mike then
9648: LD_EXP 25
9652: PUSH
9653: LD_EXP 17
9657: AND
9658: IFFALSE 9941
// begin CenterNowOnUnits ( Kurt ) ;
9660: LD_EXP 25
9664: PPUSH
9665: CALL_OW 87
// ComTurnUnit ( Kurt , Heike ) ;
9669: LD_EXP 25
9673: PPUSH
9674: LD_EXP 15
9678: PPUSH
9679: CALL_OW 119
// Say ( Kurt , DKs-Intro-18 ) ;
9683: LD_EXP 25
9687: PPUSH
9688: LD_STRING DKs-Intro-18
9690: PPUSH
9691: CALL_OW 88
// Say ( Kurt , DKs-Intro-19 ) ;
9695: LD_EXP 25
9699: PPUSH
9700: LD_STRING DKs-Intro-19
9702: PPUSH
9703: CALL_OW 88
// CenterNowOnUnits ( Mike ) ;
9707: LD_EXP 17
9711: PPUSH
9712: CALL_OW 87
// if IsInUnit ( Mike ) then
9716: LD_EXP 17
9720: PPUSH
9721: CALL_OW 310
9725: IFFALSE 9736
// ComExit ( Mike ) ;
9727: LD_EXP 17
9731: PPUSH
9732: CALL 54559 0 1
// AddComMoveXY ( Mike , 129 , 53 ) ;
9736: LD_EXP 17
9740: PPUSH
9741: LD_INT 129
9743: PPUSH
9744: LD_INT 53
9746: PPUSH
9747: CALL_OW 171
// AddComHold ( Mike ) ;
9751: LD_EXP 17
9755: PPUSH
9756: CALL_OW 200
// wait ( 0 0$2 ) ;
9760: LD_INT 70
9762: PPUSH
9763: CALL_OW 67
// Say ( Mike , DM-Intro-20 ) ;
9767: LD_EXP 17
9771: PPUSH
9772: LD_STRING DM-Intro-20
9774: PPUSH
9775: CALL_OW 88
// scoutActive := Query ( Scout ) ;
9779: LD_ADDR_EXP 3
9783: PUSH
9784: LD_STRING Scout
9786: PPUSH
9787: CALL_OW 97
9791: ST_TO_ADDR
// if scoutActive = 1 then
9792: LD_EXP 3
9796: PUSH
9797: LD_INT 1
9799: EQUAL
9800: IFFALSE 9897
// begin CenterNowOnUnits ( Kurt ) ;
9802: LD_EXP 25
9806: PPUSH
9807: CALL_OW 87
// Say ( Heike , DH-Intro-21 ) ;
9811: LD_EXP 15
9815: PPUSH
9816: LD_STRING DH-Intro-21
9818: PPUSH
9819: CALL_OW 88
// Say ( Mike , DM-Intro-22 ) ;
9823: LD_EXP 17
9827: PPUSH
9828: LD_STRING DM-Intro-22
9830: PPUSH
9831: CALL_OW 88
// Say ( Kurt , DKs-Intro-23 ) ;
9835: LD_EXP 25
9839: PPUSH
9840: LD_STRING DKs-Intro-23
9842: PPUSH
9843: CALL_OW 88
// SetSide ( Kurt , 5 ) ;
9847: LD_EXP 25
9851: PPUSH
9852: LD_INT 5
9854: PPUSH
9855: CALL_OW 235
// SetSide ( Mike , 5 ) ;
9859: LD_EXP 17
9863: PPUSH
9864: LD_INT 5
9866: PPUSH
9867: CALL_OW 235
// ComMoveXY ( [ Kurt , Mike ] , 104 , 66 ) ;
9871: LD_EXP 25
9875: PUSH
9876: LD_EXP 17
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: PPUSH
9885: LD_INT 104
9887: PPUSH
9888: LD_INT 66
9890: PPUSH
9891: CALL_OW 111
// end else
9895: GO 9941
// begin scoutActive := 0 ;
9897: LD_ADDR_EXP 3
9901: PUSH
9902: LD_INT 0
9904: ST_TO_ADDR
// Say ( Heike , DH-Intro-a-21 ) ;
9905: LD_EXP 15
9909: PPUSH
9910: LD_STRING DH-Intro-a-21
9912: PPUSH
9913: CALL_OW 88
// Say ( Mike , DM-Intro-a-22 ) ;
9917: LD_EXP 17
9921: PPUSH
9922: LD_STRING DM-Intro-a-22
9924: PPUSH
9925: CALL_OW 88
// Say ( Kurt , DKs-Intro-a-23 ) ;
9929: LD_EXP 25
9933: PPUSH
9934: LD_STRING DKs-Intro-a-23
9936: PPUSH
9937: CALL_OW 88
// end ; end ; end ; Video ( false ) ;
9941: LD_INT 0
9943: PPUSH
9944: CALL 54133 0 1
// music_nat := music_auto ;
9948: LD_ADDR_OWVAR 71
9952: PUSH
9953: LD_INT 0
9955: ST_TO_ADDR
// music_class := music_auto ;
9956: LD_ADDR_OWVAR 72
9960: PUSH
9961: LD_INT 0
9963: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
9964: LD_STRING M1
9966: PPUSH
9967: CALL_OW 337
// wait ( 0 0$3 ) ;
9971: LD_INT 105
9973: PPUSH
9974: CALL_OW 67
// Say ( Heike , DH-Base-1 ) ;
9978: LD_EXP 15
9982: PPUSH
9983: LD_STRING DH-Base-1
9985: PPUSH
9986: CALL_OW 88
// if Kaia then
9990: LD_EXP 20
9994: IFFALSE 10104
// begin Say ( Kaia , DK-Base-2 ) ;
9996: LD_EXP 20
10000: PPUSH
10001: LD_STRING DK-Base-2
10003: PPUSH
10004: CALL_OW 88
// Say ( Heike , DH-Base-3 ) ;
10008: LD_EXP 15
10012: PPUSH
10013: LD_STRING DH-Base-3
10015: PPUSH
10016: CALL_OW 88
// if Aviradze then
10020: LD_EXP 26
10024: IFFALSE 10104
// begin Say ( Aviradze , DA-Base-4 ) ;
10026: LD_EXP 26
10030: PPUSH
10031: LD_STRING DA-Base-4
10033: PPUSH
10034: CALL_OW 88
// Say ( Kaia , DK-Base-5 ) ;
10038: LD_EXP 20
10042: PPUSH
10043: LD_STRING DK-Base-5
10045: PPUSH
10046: CALL_OW 88
// if Markov then
10050: LD_EXP 22
10054: IFFALSE 10104
// begin Say ( Markov , DMar-Base-6 ) ;
10056: LD_EXP 22
10060: PPUSH
10061: LD_STRING DMar-Base-6
10063: PPUSH
10064: CALL_OW 88
// Say ( Kaia , DK-Base-7 ) ;
10068: LD_EXP 20
10072: PPUSH
10073: LD_STRING DK-Base-7
10075: PPUSH
10076: CALL_OW 88
// Say ( Markov , DMar-Base-8 ) ;
10080: LD_EXP 22
10084: PPUSH
10085: LD_STRING DMar-Base-8
10087: PPUSH
10088: CALL_OW 88
// Say ( Markov , DMar-Base-9 ) ;
10092: LD_EXP 22
10096: PPUSH
10097: LD_STRING DMar-Base-9
10099: PPUSH
10100: CALL_OW 88
// end ; end ; end ; SaveForQuickRestart ;
10104: CALL_OW 22
// end ;
10108: LD_VAR 0 1
10112: RET
// every 0 0$1 trigger scoutSuccess do var i , tmp ;
10113: LD_EXP 5
10117: IFFALSE 11228
10119: GO 10121
10121: DISABLE
10122: LD_INT 0
10124: PPUSH
10125: PPUSH
// begin InGameOn ;
10126: CALL_OW 8
// ComTurnUnit ( [ Mike , Kurt ] , Heike ) ;
10130: LD_EXP 17
10134: PUSH
10135: LD_EXP 25
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: PPUSH
10144: LD_EXP 15
10148: PPUSH
10149: CALL_OW 119
// ComExit ( Heike ) ;
10153: LD_EXP 15
10157: PPUSH
10158: CALL 54559 0 1
// if IsOk ( Mike ) then
10162: LD_EXP 17
10166: PPUSH
10167: CALL_OW 302
10171: IFFALSE 10189
// AddComTurnUnit ( Heike , Mike ) else
10173: LD_EXP 15
10177: PPUSH
10178: LD_EXP 17
10182: PPUSH
10183: CALL_OW 179
10187: GO 10203
// AddComTurnUnit ( Heike , Kurt ) ;
10189: LD_EXP 15
10193: PPUSH
10194: LD_EXP 25
10198: PPUSH
10199: CALL_OW 179
// if IsOk ( Mike ) and IsOk ( Kurt ) then
10203: LD_EXP 17
10207: PPUSH
10208: CALL_OW 302
10212: PUSH
10213: LD_EXP 25
10217: PPUSH
10218: CALL_OW 302
10222: AND
10223: IFFALSE 10474
// begin CenterNowOnUnits ( Mike ) ;
10225: LD_EXP 17
10229: PPUSH
10230: CALL_OW 87
// Say ( Mike , DM-Scout-1 ) ;
10234: LD_EXP 17
10238: PPUSH
10239: LD_STRING DM-Scout-1
10241: PPUSH
10242: CALL_OW 88
// Say ( Heike , DH-Scout-2 ) ;
10246: LD_EXP 15
10250: PPUSH
10251: LD_STRING DH-Scout-2
10253: PPUSH
10254: CALL_OW 88
// Say ( Kurt , DKs-Scout-3 ) ;
10258: LD_EXP 25
10262: PPUSH
10263: LD_STRING DKs-Scout-3
10265: PPUSH
10266: CALL_OW 88
// Say ( Heike , DH-Scout-4 ) ;
10270: LD_EXP 15
10274: PPUSH
10275: LD_STRING DH-Scout-4
10277: PPUSH
10278: CALL_OW 88
// Say ( Heike , DH-Scout-5 ) ;
10282: LD_EXP 15
10286: PPUSH
10287: LD_STRING DH-Scout-5
10289: PPUSH
10290: CALL_OW 88
// tmp := [ [ 72 , 122 ] , [ 89 , 131 ] , [ 99 , 139 ] , [ 100 , 148 ] ] ;
10294: LD_ADDR_VAR 0 2
10298: PUSH
10299: LD_INT 72
10301: PUSH
10302: LD_INT 122
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: PUSH
10309: LD_INT 89
10311: PUSH
10312: LD_INT 131
10314: PUSH
10315: EMPTY
10316: LIST
10317: LIST
10318: PUSH
10319: LD_INT 99
10321: PUSH
10322: LD_INT 139
10324: PUSH
10325: EMPTY
10326: LIST
10327: LIST
10328: PUSH
10329: LD_INT 100
10331: PUSH
10332: LD_INT 148
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: ST_TO_ADDR
// for i in tmp do
10345: LD_ADDR_VAR 0 1
10349: PUSH
10350: LD_VAR 0 2
10354: PUSH
10355: FOR_IN
10356: IFFALSE 10414
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 2 , - 6 ) ;
10358: LD_VAR 0 1
10362: PUSH
10363: LD_INT 1
10365: ARRAY
10366: PPUSH
10367: LD_VAR 0 1
10371: PUSH
10372: LD_INT 2
10374: ARRAY
10375: PPUSH
10376: LD_INT 2
10378: PPUSH
10379: LD_INT 6
10381: NEG
10382: PPUSH
10383: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 2 ) ;
10387: LD_VAR 0 1
10391: PUSH
10392: LD_INT 1
10394: ARRAY
10395: PPUSH
10396: LD_VAR 0 1
10400: PUSH
10401: LD_INT 2
10403: ARRAY
10404: PPUSH
10405: LD_INT 2
10407: PPUSH
10408: CALL_OW 331
// end ;
10412: GO 10355
10414: POP
10415: POP
// CenterOnXY ( 83 , 132 ) ;
10416: LD_INT 83
10418: PPUSH
10419: LD_INT 132
10421: PPUSH
10422: CALL_OW 84
// Say ( Kurt , DKs-Scout-6 ) ;
10426: LD_EXP 25
10430: PPUSH
10431: LD_STRING DKs-Scout-6
10433: PPUSH
10434: CALL_OW 88
// Say ( Mike , DM-Scout-7 ) ;
10438: LD_EXP 17
10442: PPUSH
10443: LD_STRING DM-Scout-7
10445: PPUSH
10446: CALL_OW 88
// Say ( Mike , DM-Scout-8 ) ;
10450: LD_EXP 17
10454: PPUSH
10455: LD_STRING DM-Scout-8
10457: PPUSH
10458: CALL_OW 88
// Say ( Kurt , DKs-Scout-9 ) ;
10462: LD_EXP 25
10466: PPUSH
10467: LD_STRING DKs-Scout-9
10469: PPUSH
10470: CALL_OW 88
// end ; if IsDead ( Mike ) then
10474: LD_EXP 17
10478: PPUSH
10479: CALL_OW 301
10483: IFFALSE 10650
// begin CenterNowOnUnits ( Kurt ) ;
10485: LD_EXP 25
10489: PPUSH
10490: CALL_OW 87
// Say ( Kurt , DKs-Scout-b-1 ) ;
10494: LD_EXP 25
10498: PPUSH
10499: LD_STRING DKs-Scout-b-1
10501: PPUSH
10502: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-2 ) ;
10506: LD_EXP 25
10510: PPUSH
10511: LD_STRING DKs-Scout-b-2
10513: PPUSH
10514: CALL_OW 88
// if IsOk ( Givi ) then
10518: LD_EXP 16
10522: PPUSH
10523: CALL_OW 302
10527: IFFALSE 10602
// begin ComExit ( Givi ) ;
10529: LD_EXP 16
10533: PPUSH
10534: CALL 54559 0 1
// AddComTurnUnit ( Givi , Kurt ) ;
10538: LD_EXP 16
10542: PPUSH
10543: LD_EXP 25
10547: PPUSH
10548: CALL_OW 179
// Say ( Givi , DG-Scout-b-3 ) ;
10552: LD_EXP 16
10556: PPUSH
10557: LD_STRING DG-Scout-b-3
10559: PPUSH
10560: CALL_OW 88
// Say ( Givi , DG-Scout-b-4 ) ;
10564: LD_EXP 16
10568: PPUSH
10569: LD_STRING DG-Scout-b-4
10571: PPUSH
10572: CALL_OW 88
// Say ( Givi , DG-Scout-b-5 ) ;
10576: LD_EXP 16
10580: PPUSH
10581: LD_STRING DG-Scout-b-5
10583: PPUSH
10584: CALL_OW 88
// Say ( Heike , DH-Scout-b-6 ) ;
10588: LD_EXP 15
10592: PPUSH
10593: LD_STRING DH-Scout-b-6
10595: PPUSH
10596: CALL_OW 88
// end else
10600: GO 10614
// Say ( Heike , DH-Scout-a-4 ) ;
10602: LD_EXP 15
10606: PPUSH
10607: LD_STRING DH-Scout-a-4
10609: PPUSH
10610: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-7 ) ;
10614: LD_EXP 25
10618: PPUSH
10619: LD_STRING DKs-Scout-b-7
10621: PPUSH
10622: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-8 ) ;
10626: LD_EXP 25
10630: PPUSH
10631: LD_STRING DKs-Scout-b-8
10633: PPUSH
10634: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-9 ) ;
10638: LD_EXP 25
10642: PPUSH
10643: LD_STRING DKs-Scout-b-9
10645: PPUSH
10646: CALL_OW 88
// end ; if IsDead ( Kurt ) then
10650: LD_EXP 25
10654: PPUSH
10655: CALL_OW 301
10659: IFFALSE 10938
// begin CenterNowOnUnits ( Mike ) ;
10661: LD_EXP 17
10665: PPUSH
10666: CALL_OW 87
// Say ( Mike , DM-Scout-a-1 ) ;
10670: LD_EXP 17
10674: PPUSH
10675: LD_STRING DM-Scout-a-1
10677: PPUSH
10678: CALL_OW 88
// Say ( Mike , DM-Scout-a-2 ) ;
10682: LD_EXP 17
10686: PPUSH
10687: LD_STRING DM-Scout-a-2
10689: PPUSH
10690: CALL_OW 88
// if GetLives ( Mike ) < 1000 then
10694: LD_EXP 17
10698: PPUSH
10699: CALL_OW 256
10703: PUSH
10704: LD_INT 1000
10706: LESS
10707: IFFALSE 10723
// Say ( Heike , DH-Scout-a-3 ) else
10709: LD_EXP 15
10713: PPUSH
10714: LD_STRING DH-Scout-a-3
10716: PPUSH
10717: CALL_OW 88
10721: GO 10735
// Say ( Heike , DH-Scout-a-4 ) ;
10723: LD_EXP 15
10727: PPUSH
10728: LD_STRING DH-Scout-a-4
10730: PPUSH
10731: CALL_OW 88
// Say ( Mike , DM-Scout-a-5 ) ;
10735: LD_EXP 17
10739: PPUSH
10740: LD_STRING DM-Scout-a-5
10742: PPUSH
10743: CALL_OW 88
// if IsOk ( Kaia ) then
10747: LD_EXP 20
10751: PPUSH
10752: CALL_OW 302
10756: IFFALSE 10938
// begin ComExit ( Kaia ) ;
10758: LD_EXP 20
10762: PPUSH
10763: CALL 54559 0 1
// AddComMoveUnit ( Kaia , Mike ) ;
10767: LD_EXP 20
10771: PPUSH
10772: LD_EXP 17
10776: PPUSH
10777: CALL_OW 172
// wait ( 0 0$2 ) ;
10781: LD_INT 70
10783: PPUSH
10784: CALL_OW 67
// ComTurnUnit ( Kaia , Mike ) ;
10788: LD_EXP 20
10792: PPUSH
10793: LD_EXP 17
10797: PPUSH
10798: CALL_OW 119
// ComTurnUnit ( Mike , Kaia ) ;
10802: LD_EXP 17
10806: PPUSH
10807: LD_EXP 20
10811: PPUSH
10812: CALL_OW 119
// Say ( Kaia , DK-Scout-a-6 ) ;
10816: LD_EXP 20
10820: PPUSH
10821: LD_STRING DK-Scout-a-6
10823: PPUSH
10824: CALL_OW 88
// Say ( Mike , DM-Scout-a-7 ) ;
10828: LD_EXP 17
10832: PPUSH
10833: LD_STRING DM-Scout-a-7
10835: PPUSH
10836: CALL_OW 88
// Say ( Kaia , DK-Scout-a-8 ) ;
10840: LD_EXP 20
10844: PPUSH
10845: LD_STRING DK-Scout-a-8
10847: PPUSH
10848: CALL_OW 88
// Say ( Kaia , DK-Scout-a-9 ) ;
10852: LD_EXP 20
10856: PPUSH
10857: LD_STRING DK-Scout-a-9
10859: PPUSH
10860: CALL_OW 88
// Say ( Heike , DH-Scout-a-10 ) ;
10864: LD_EXP 15
10868: PPUSH
10869: LD_STRING DH-Scout-a-10
10871: PPUSH
10872: CALL_OW 88
// ComTurnUnit ( Mike , Heike ) ;
10876: LD_EXP 17
10880: PPUSH
10881: LD_EXP 15
10885: PPUSH
10886: CALL_OW 119
// Say ( Mike , DM-Scout-a-11 ) ;
10890: LD_EXP 17
10894: PPUSH
10895: LD_STRING DM-Scout-a-11
10897: PPUSH
10898: CALL_OW 88
// Say ( Mike , DM-Scout-a-12 ) ;
10902: LD_EXP 17
10906: PPUSH
10907: LD_STRING DM-Scout-a-12
10909: PPUSH
10910: CALL_OW 88
// Say ( Mike , DM-Scout-a-13 ) ;
10914: LD_EXP 17
10918: PPUSH
10919: LD_STRING DM-Scout-a-13
10921: PPUSH
10922: CALL_OW 88
// Say ( Mike , DM-Scout-a-14 ) ;
10926: LD_EXP 17
10930: PPUSH
10931: LD_STRING DM-Scout-a-14
10933: PPUSH
10934: CALL_OW 88
// end ; end ; if IsOk ( Givi ) then
10938: LD_EXP 16
10942: PPUSH
10943: CALL_OW 302
10947: IFFALSE 10975
// begin Say ( Givi , DG-Scout-10 ) ;
10949: LD_EXP 16
10953: PPUSH
10954: LD_STRING DG-Scout-10
10956: PPUSH
10957: CALL_OW 88
// Say ( Givi , DG-Scout-11 ) ;
10961: LD_EXP 16
10965: PPUSH
10966: LD_STRING DG-Scout-11
10968: PPUSH
10969: CALL_OW 88
// end else
10973: GO 11032
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-10 ) then
10975: LD_EXP 27
10979: PPUSH
10980: LD_INT 26
10982: PUSH
10983: LD_INT 1
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: PPUSH
10990: CALL_OW 72
10994: PPUSH
10995: LD_STRING DArm-Scout-10
10997: PPUSH
10998: CALL 224 0 2
11002: NOT
11003: IFFALSE 11032
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-10 ) ;
11005: LD_EXP 27
11009: PPUSH
11010: LD_INT 26
11012: PUSH
11013: LD_INT 2
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: PPUSH
11020: CALL_OW 72
11024: PPUSH
11025: LD_STRING DArf-Scout-10
11027: PPUSH
11028: CALL 224 0 2
// Say ( Heike , DH-Scout-12 ) ;
11032: LD_EXP 15
11036: PPUSH
11037: LD_STRING DH-Scout-12
11039: PPUSH
11040: CALL_OW 88
// Say ( Heike , DH-Scout-13 ) ;
11044: LD_EXP 15
11048: PPUSH
11049: LD_STRING DH-Scout-13
11051: PPUSH
11052: CALL_OW 88
// if IsOk ( Mike ) and IsOk ( Kurt ) then
11056: LD_EXP 17
11060: PPUSH
11061: CALL_OW 302
11065: PUSH
11066: LD_EXP 25
11070: PPUSH
11071: CALL_OW 302
11075: AND
11076: IFFALSE 11104
// begin Say ( Mike , DM-Scout-14 ) ;
11078: LD_EXP 17
11082: PPUSH
11083: LD_STRING DM-Scout-14
11085: PPUSH
11086: CALL_OW 88
// Say ( Heike , DH-Scout-c-14 ) ;
11090: LD_EXP 15
11094: PPUSH
11095: LD_STRING DH-Scout-c-14
11097: PPUSH
11098: CALL_OW 88
// end else
11102: GO 11197
// if IsOk ( Mike ) xor IsOk ( Kurt ) then
11104: LD_EXP 17
11108: PPUSH
11109: CALL_OW 302
11113: PUSH
11114: LD_EXP 25
11118: PPUSH
11119: CALL_OW 302
11123: XOR
11124: IFFALSE 11185
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-a-14 ) then
11126: LD_EXP 27
11130: PPUSH
11131: LD_INT 26
11133: PUSH
11134: LD_INT 1
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: PPUSH
11141: CALL_OW 72
11145: PPUSH
11146: LD_STRING DArm-Scout-a-14
11148: PPUSH
11149: CALL 224 0 2
11153: NOT
11154: IFFALSE 11183
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-a-14 ) ;
11156: LD_EXP 27
11160: PPUSH
11161: LD_INT 26
11163: PUSH
11164: LD_INT 2
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PPUSH
11171: CALL_OW 72
11175: PPUSH
11176: LD_STRING DArf-Scout-a-14
11178: PPUSH
11179: CALL 224 0 2
// end else
11183: GO 11197
// Say ( Heike , DH-Scout-d-14 ) ;
11185: LD_EXP 15
11189: PPUSH
11190: LD_STRING DH-Scout-d-14
11192: PPUSH
11193: CALL_OW 88
// Say ( Heike , DH-Scout-15 ) ;
11197: LD_EXP 15
11201: PPUSH
11202: LD_STRING DH-Scout-15
11204: PPUSH
11205: CALL_OW 88
// InGameOff ;
11209: CALL_OW 9
// wait ( 1 1$00 ) ;
11213: LD_INT 2100
11215: PPUSH
11216: CALL_OW 67
// usAttacksAllowed := true ;
11220: LD_ADDR_EXP 6
11224: PUSH
11225: LD_INT 1
11227: ST_TO_ADDR
// end ;
11228: PPOPN 2
11230: END
// every 0 0$1 trigger scoutFailed do var spoken ;
11231: LD_EXP 4
11235: IFFALSE 11412
11237: GO 11239
11239: DISABLE
11240: LD_INT 0
11242: PPUSH
// begin spoken := true ;
11243: LD_ADDR_VAR 0 1
11247: PUSH
11248: LD_INT 1
11250: ST_TO_ADDR
// wait ( 0 0$30 ) ;
11251: LD_INT 1050
11253: PPUSH
11254: CALL_OW 67
// Say ( Heike , DH-Scout-c-1 ) ;
11258: LD_EXP 15
11262: PPUSH
11263: LD_STRING DH-Scout-c-1
11265: PPUSH
11266: CALL_OW 88
// if not IsOk ( Givi ) then
11270: LD_EXP 16
11274: PPUSH
11275: CALL_OW 302
11279: NOT
11280: IFFALSE 11284
// exit ;
11282: GO 11412
// if IsOk ( Givi ) then
11284: LD_EXP 16
11288: PPUSH
11289: CALL_OW 302
11293: IFFALSE 11321
// begin Say ( Givi , DG-Scout-c-2 ) ;
11295: LD_EXP 16
11299: PPUSH
11300: LD_STRING DG-Scout-c-2
11302: PPUSH
11303: CALL_OW 88
// Say ( Givi , DG-Scout-c-3 ) ;
11307: LD_EXP 16
11311: PPUSH
11312: LD_STRING DG-Scout-c-3
11314: PPUSH
11315: CALL_OW 88
// end else
11319: GO 11394
// begin spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-c-3 ) ;
11321: LD_ADDR_VAR 0 1
11325: PUSH
11326: LD_EXP 27
11330: PPUSH
11331: LD_INT 26
11333: PUSH
11334: LD_INT 1
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PPUSH
11341: CALL_OW 72
11345: PPUSH
11346: LD_STRING DArm-Scout-c-3
11348: PPUSH
11349: CALL 224 0 2
11353: ST_TO_ADDR
// if not spoken then
11354: LD_VAR 0 1
11358: NOT
11359: IFFALSE 11394
// spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-c-3 ) ;
11361: LD_ADDR_VAR 0 1
11365: PUSH
11366: LD_EXP 27
11370: PPUSH
11371: LD_INT 26
11373: PUSH
11374: LD_INT 2
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: PPUSH
11381: CALL_OW 72
11385: PPUSH
11386: LD_STRING DArf-Scout-c-3
11388: PPUSH
11389: CALL 224 0 2
11393: ST_TO_ADDR
// ; end ; if spoken then
11394: LD_VAR 0 1
11398: IFFALSE 11412
// Say ( Heike , DH-Scout-c-4 ) ;
11400: LD_EXP 15
11404: PPUSH
11405: LD_STRING DH-Scout-c-4
11407: PPUSH
11408: CALL_OW 88
// end ;
11412: PPOPN 1
11414: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_half ] ] ) and IsOk ( Aviradze ) do
11415: LD_INT 22
11417: PUSH
11418: LD_INT 2
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: LD_INT 30
11427: PUSH
11428: LD_INT 7
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PPUSH
11439: CALL_OW 69
11443: PUSH
11444: LD_EXP 26
11448: PPUSH
11449: CALL_OW 302
11453: AND
11454: IFFALSE 11539
11456: GO 11458
11458: DISABLE
// begin DialogueOn ;
11459: CALL_OW 6
// Say ( Aviradze , DA-Lab-1 ) ;
11463: LD_EXP 26
11467: PPUSH
11468: LD_STRING DA-Lab-1
11470: PPUSH
11471: CALL_OW 88
// Say ( Heike , DH-Lab-2 ) ;
11475: LD_EXP 15
11479: PPUSH
11480: LD_STRING DH-Lab-2
11482: PPUSH
11483: CALL_OW 88
// Say ( Aviradze , DA-Lab-3 ) ;
11487: LD_EXP 26
11491: PPUSH
11492: LD_STRING DA-Lab-3
11494: PPUSH
11495: CALL_OW 88
// Say ( Aviradze , DA-Lab-4 ) ;
11499: LD_EXP 26
11503: PPUSH
11504: LD_STRING DA-Lab-4
11506: PPUSH
11507: CALL_OW 88
// Say ( Aviradze , DA-Lab-5 ) ;
11511: LD_EXP 26
11515: PPUSH
11516: LD_STRING DA-Lab-5
11518: PPUSH
11519: CALL_OW 88
// Say ( Heike , DH-Lab-6 ) ;
11523: LD_EXP 15
11527: PPUSH
11528: LD_STRING DH-Lab-6
11530: PPUSH
11531: CALL_OW 88
// DialogueOff ;
11535: CALL_OW 7
// end ;
11539: END
// every 0 0$1 trigger GetTech ( tech_MatDet , 2 ) = state_researched and IsOk ( Givi ) do
11540: LD_INT 7
11542: PPUSH
11543: LD_INT 2
11545: PPUSH
11546: CALL_OW 321
11550: PUSH
11551: LD_INT 2
11553: EQUAL
11554: PUSH
11555: LD_EXP 16
11559: PPUSH
11560: CALL_OW 302
11564: AND
11565: IFFALSE 11734
11567: GO 11569
11569: DISABLE
// begin DialogueOn ;
11570: CALL_OW 6
// Say ( Givi , DG-Opt-1 ) ;
11574: LD_EXP 16
11578: PPUSH
11579: LD_STRING DG-Opt-1
11581: PPUSH
11582: CALL_OW 88
// Say ( Heike , DH-Opt-2 ) ;
11586: LD_EXP 15
11590: PPUSH
11591: LD_STRING DH-Opt-2
11593: PPUSH
11594: CALL_OW 88
// Say ( Givi , DG-Opt-3 ) ;
11598: LD_EXP 16
11602: PPUSH
11603: LD_STRING DG-Opt-3
11605: PPUSH
11606: CALL_OW 88
// Say ( Givi , DG-Opt-4 ) ;
11610: LD_EXP 16
11614: PPUSH
11615: LD_STRING DG-Opt-4
11617: PPUSH
11618: CALL_OW 88
// Say ( Heike , DH-Opt-5 ) ;
11622: LD_EXP 15
11626: PPUSH
11627: LD_STRING DH-Opt-5
11629: PPUSH
11630: CALL_OW 88
// Say ( Givi , DG-Opt-6 ) ;
11634: LD_EXP 16
11638: PPUSH
11639: LD_STRING DG-Opt-6
11641: PPUSH
11642: CALL_OW 88
// Say ( Heike , DH-Opt-7 ) ;
11646: LD_EXP 15
11650: PPUSH
11651: LD_STRING DH-Opt-7
11653: PPUSH
11654: CALL_OW 88
// Say ( Givi , DG-Opt-8 ) ;
11658: LD_EXP 16
11662: PPUSH
11663: LD_STRING DG-Opt-8
11665: PPUSH
11666: CALL_OW 88
// Say ( Givi , DG-Opt-9 ) ;
11670: LD_EXP 16
11674: PPUSH
11675: LD_STRING DG-Opt-9
11677: PPUSH
11678: CALL_OW 88
// Say ( Heike , DH-Opt-10 ) ;
11682: LD_EXP 15
11686: PPUSH
11687: LD_STRING DH-Opt-10
11689: PPUSH
11690: CALL_OW 88
// Say ( Givi , DG-Opt-11 ) ;
11694: LD_EXP 16
11698: PPUSH
11699: LD_STRING DG-Opt-11
11701: PPUSH
11702: CALL_OW 88
// Say ( Givi , DG-Opt-12 ) ;
11706: LD_EXP 16
11710: PPUSH
11711: LD_STRING DG-Opt-12
11713: PPUSH
11714: CALL_OW 88
// Say ( Heike , DH-Opt-13 ) ;
11718: LD_EXP 15
11722: PPUSH
11723: LD_STRING DH-Opt-13
11725: PPUSH
11726: CALL_OW 88
// DialogueOff ;
11730: CALL_OW 7
// end ;
11734: END
// every 0 0$2 trigger UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) do
11735: LD_EXP 27
11739: PPUSH
11740: LD_INT 95
11742: PUSH
11743: LD_INT 7
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: PUSH
11750: LD_INT 23
11752: PUSH
11753: LD_INT 2
11755: PUSH
11756: EMPTY
11757: LIST
11758: LIST
11759: PUSH
11760: LD_INT 26
11762: PUSH
11763: LD_INT 1
11765: PUSH
11766: EMPTY
11767: LIST
11768: LIST
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: LIST
11774: PPUSH
11775: CALL_OW 72
11779: IFFALSE 11840
11781: GO 11783
11783: DISABLE
// begin Say ( UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-River ) ;
11784: LD_EXP 27
11788: PPUSH
11789: LD_INT 95
11791: PUSH
11792: LD_INT 7
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: PUSH
11799: LD_INT 23
11801: PUSH
11802: LD_INT 2
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: PUSH
11809: LD_INT 26
11811: PUSH
11812: LD_INT 1
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: LIST
11823: PPUSH
11824: CALL_OW 72
11828: PUSH
11829: LD_INT 1
11831: ARRAY
11832: PPUSH
11833: LD_STRING DArm-River
11835: PPUSH
11836: CALL_OW 88
// end ;
11840: END
// every 0 0$1 trigger GetTech ( tech_rocket , 2 ) = state_researched and IsOk ( Ibrahim ) do
11841: LD_INT 40
11843: PPUSH
11844: LD_INT 2
11846: PPUSH
11847: CALL_OW 321
11851: PUSH
11852: LD_INT 2
11854: EQUAL
11855: PUSH
11856: LD_EXP 18
11860: PPUSH
11861: CALL_OW 302
11865: AND
11866: IFFALSE 12116
11868: GO 11870
11870: DISABLE
// begin DialogueOn ;
11871: CALL_OW 6
// Say ( Ibrahim , DI-Roc-1 ) ;
11875: LD_EXP 18
11879: PPUSH
11880: LD_STRING DI-Roc-1
11882: PPUSH
11883: CALL_OW 88
// Say ( Heike , DH-Roc-2 ) ;
11887: LD_EXP 15
11891: PPUSH
11892: LD_STRING DH-Roc-2
11894: PPUSH
11895: CALL_OW 88
// Say ( Ibrahim , DI-Roc-3 ) ;
11899: LD_EXP 18
11903: PPUSH
11904: LD_STRING DI-Roc-3
11906: PPUSH
11907: CALL_OW 88
// Say ( Ibrahim , DI-Roc-4 ) ;
11911: LD_EXP 18
11915: PPUSH
11916: LD_STRING DI-Roc-4
11918: PPUSH
11919: CALL_OW 88
// Say ( Kaia , DK-Roc-5 ) ;
11923: LD_EXP 20
11927: PPUSH
11928: LD_STRING DK-Roc-5
11930: PPUSH
11931: CALL_OW 88
// Say ( Kaia , DK-Roc-6 ) ;
11935: LD_EXP 20
11939: PPUSH
11940: LD_STRING DK-Roc-6
11942: PPUSH
11943: CALL_OW 88
// Say ( Givi , DG-Roc-7 ) ;
11947: LD_EXP 16
11951: PPUSH
11952: LD_STRING DG-Roc-7
11954: PPUSH
11955: CALL_OW 88
// Say ( Givi , DG-Roc-8 ) ;
11959: LD_EXP 16
11963: PPUSH
11964: LD_STRING DG-Roc-8
11966: PPUSH
11967: CALL_OW 88
// if IsOk ( Markov ) and IsOk ( Kaia ) and IsOk ( Givi ) then
11971: LD_EXP 22
11975: PPUSH
11976: CALL_OW 302
11980: PUSH
11981: LD_EXP 20
11985: PPUSH
11986: CALL_OW 302
11990: AND
11991: PUSH
11992: LD_EXP 16
11996: PPUSH
11997: CALL_OW 302
12001: AND
12002: IFFALSE 12112
// begin Say ( Markov , DMar-Roc-9 ) ;
12004: LD_EXP 22
12008: PPUSH
12009: LD_STRING DMar-Roc-9
12011: PPUSH
12012: CALL_OW 88
// Say ( Markov , DMar-Roc-10 ) ;
12016: LD_EXP 22
12020: PPUSH
12021: LD_STRING DMar-Roc-10
12023: PPUSH
12024: CALL_OW 88
// Say ( Kaia , DK-Roc-11 ) ;
12028: LD_EXP 20
12032: PPUSH
12033: LD_STRING DK-Roc-11
12035: PPUSH
12036: CALL_OW 88
// Say ( Markov , DMar-Roc-12 ) ;
12040: LD_EXP 22
12044: PPUSH
12045: LD_STRING DMar-Roc-12
12047: PPUSH
12048: CALL_OW 88
// Say ( Kaia , DK-Roc-13 ) ;
12052: LD_EXP 20
12056: PPUSH
12057: LD_STRING DK-Roc-13
12059: PPUSH
12060: CALL_OW 88
// Say ( Givi , DG-Roc-14 ) ;
12064: LD_EXP 16
12068: PPUSH
12069: LD_STRING DG-Roc-14
12071: PPUSH
12072: CALL_OW 88
// Say ( Markov , DMar-Roc-15 ) ;
12076: LD_EXP 22
12080: PPUSH
12081: LD_STRING DMar-Roc-15
12083: PPUSH
12084: CALL_OW 88
// Say ( Markov , DMar-Roc-16 ) ;
12088: LD_EXP 22
12092: PPUSH
12093: LD_STRING DMar-Roc-16
12095: PPUSH
12096: CALL_OW 88
// Say ( Kaia , DK-Roc-17 ) ;
12100: LD_EXP 20
12104: PPUSH
12105: LD_STRING DK-Roc-17
12107: PPUSH
12108: CALL_OW 88
// end ; DialogueOff ;
12112: CALL_OW 7
// end ;
12116: END
// every 0 0$3 trigger GetLives ( usCommander ) < 1000 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] ] ) < 6 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) < 2 do var i , hurts , sci ;
12117: LD_EXP 30
12121: PPUSH
12122: CALL_OW 256
12126: PUSH
12127: LD_INT 1000
12129: LESS
12130: PUSH
12131: LD_INT 22
12133: PUSH
12134: LD_INT 1
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: LD_INT 21
12143: PUSH
12144: LD_INT 1
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: PUSH
12151: LD_INT 23
12153: PUSH
12154: LD_INT 1
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: PUSH
12161: EMPTY
12162: LIST
12163: LIST
12164: LIST
12165: PPUSH
12166: CALL_OW 69
12170: PUSH
12171: LD_INT 6
12173: LESS
12174: OR
12175: PUSH
12176: LD_INT 22
12178: PUSH
12179: LD_INT 1
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: PUSH
12186: LD_INT 21
12188: PUSH
12189: LD_INT 1
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: PUSH
12196: LD_INT 25
12198: PUSH
12199: LD_INT 1
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: LIST
12210: PPUSH
12211: CALL_OW 69
12215: PUSH
12216: LD_INT 2
12218: LESS
12219: OR
12220: IFFALSE 13496
12222: GO 12224
12224: DISABLE
12225: LD_INT 0
12227: PPUSH
12228: PPUSH
12229: PPUSH
// begin usAttacksAllowed := false ;
12230: LD_ADDR_EXP 6
12234: PUSH
12235: LD_INT 0
12237: ST_TO_ADDR
// usSurrender := true ;
12238: LD_ADDR_EXP 7
12242: PUSH
12243: LD_INT 1
12245: ST_TO_ADDR
// SetAttitude ( 1 , 2 , att_friend , true ) ;
12246: LD_INT 1
12248: PPUSH
12249: LD_INT 2
12251: PPUSH
12252: LD_INT 1
12254: PPUSH
12255: LD_INT 1
12257: PPUSH
12258: CALL_OW 80
// if IsDead ( usCommander ) then
12262: LD_EXP 30
12266: PPUSH
12267: CALL_OW 301
12271: IFFALSE 12275
// exit ;
12273: GO 13496
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_hastask ] ] ) do
12275: LD_ADDR_VAR 0 1
12279: PUSH
12280: LD_INT 22
12282: PUSH
12283: LD_INT 2
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: PUSH
12290: LD_INT 21
12292: PUSH
12293: LD_INT 1
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PUSH
12300: LD_INT 60
12302: PUSH
12303: EMPTY
12304: LIST
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: LIST
12310: PPUSH
12311: CALL_OW 69
12315: PUSH
12316: FOR_IN
12317: IFFALSE 12330
// ComStop ( i ) ;
12319: LD_VAR 0 1
12323: PPUSH
12324: CALL_OW 141
12328: GO 12316
12330: POP
12331: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_ok ] ] , [ f_type , unit_human ] ] ) do
12332: LD_ADDR_VAR 0 1
12336: PUSH
12337: LD_INT 22
12339: PUSH
12340: LD_INT 2
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: PUSH
12347: LD_INT 3
12349: PUSH
12350: LD_INT 50
12352: PUSH
12353: EMPTY
12354: LIST
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: PUSH
12360: LD_INT 21
12362: PUSH
12363: LD_INT 1
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: LIST
12374: PPUSH
12375: CALL_OW 69
12379: PUSH
12380: FOR_IN
12381: IFFALSE 12397
// SetLives ( i , 251 ) ;
12383: LD_VAR 0 1
12387: PPUSH
12388: LD_INT 251
12390: PPUSH
12391: CALL_OW 234
12395: GO 12380
12397: POP
12398: POP
// Video ( true ) ;
12399: LD_INT 1
12401: PPUSH
12402: CALL 54133 0 1
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
12406: LD_ADDR_VAR 0 1
12410: PUSH
12411: LD_INT 22
12413: PUSH
12414: LD_INT 2
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: PPUSH
12421: CALL_OW 69
12425: PUSH
12426: FOR_IN
12427: IFFALSE 12440
// ComStop ( i ) ;
12429: LD_VAR 0 1
12433: PPUSH
12434: CALL_OW 141
12438: GO 12426
12440: POP
12441: POP
// if not IsOk ( usCommander ) then
12442: LD_EXP 30
12446: PPUSH
12447: CALL_OW 302
12451: NOT
12452: IFFALSE 12466
// SetLives ( usCommander , 1000 ) ;
12454: LD_EXP 30
12458: PPUSH
12459: LD_INT 1000
12461: PPUSH
12462: CALL_OW 234
// InGameOn ;
12466: CALL_OW 8
// ComExit ( usCommander ) ;
12470: LD_EXP 30
12474: PPUSH
12475: CALL 54559 0 1
// AddComMoveXY ( usCommander , 81 , 143 ) ;
12479: LD_EXP 30
12483: PPUSH
12484: LD_INT 81
12486: PPUSH
12487: LD_INT 143
12489: PPUSH
12490: CALL_OW 171
// AddComTurnXY ( usCommander , 81 , 139 ) ;
12494: LD_EXP 30
12498: PPUSH
12499: LD_INT 81
12501: PPUSH
12502: LD_INT 139
12504: PPUSH
12505: CALL_OW 178
// PlaceSeeing ( 81 , 144 , 2 , - 10 ) ;
12509: LD_INT 81
12511: PPUSH
12512: LD_INT 144
12514: PPUSH
12515: LD_INT 2
12517: PPUSH
12518: LD_INT 10
12520: NEG
12521: PPUSH
12522: CALL_OW 330
// CenterNowOnUnits ( usCommander ) ;
12526: LD_EXP 30
12530: PPUSH
12531: CALL_OW 87
// wait ( 0 0$2 ) ;
12535: LD_INT 70
12537: PPUSH
12538: CALL_OW 67
// Say ( usCommander , DCa-Surrender-1 ) ;
12542: LD_EXP 30
12546: PPUSH
12547: LD_STRING DCa-Surrender-1
12549: PPUSH
12550: CALL_OW 88
// Say ( Heike , DH-Surrender-2 ) ;
12554: LD_EXP 15
12558: PPUSH
12559: LD_STRING DH-Surrender-2
12561: PPUSH
12562: CALL_OW 88
// if GetType ( IsInUnit ( Heike ) ) = unit_building then
12566: LD_EXP 15
12570: PPUSH
12571: CALL_OW 310
12575: PPUSH
12576: CALL_OW 247
12580: PUSH
12581: LD_INT 3
12583: EQUAL
12584: IFFALSE 12602
// begin ComExit ( Heike ) ;
12586: LD_EXP 15
12590: PPUSH
12591: CALL 54559 0 1
// wait ( 3 ) ;
12595: LD_INT 3
12597: PPUSH
12598: CALL_OW 67
// end ; ComMoveXY ( Heike , 82 , 133 ) ;
12602: LD_EXP 15
12606: PPUSH
12607: LD_INT 82
12609: PPUSH
12610: LD_INT 133
12612: PPUSH
12613: CALL_OW 111
// AddComTurnUnit ( Heike , usCommander ) ;
12617: LD_EXP 15
12621: PPUSH
12622: LD_EXP 30
12626: PPUSH
12627: CALL_OW 179
// wait ( 0 0$3 ) ;
12631: LD_INT 105
12633: PPUSH
12634: CALL_OW 67
// Say ( Heike , DH-Surrender-3 ) ;
12638: LD_EXP 15
12642: PPUSH
12643: LD_STRING DH-Surrender-3
12645: PPUSH
12646: CALL_OW 88
// Say ( Heike , DH-Surrender-4 ) ;
12650: LD_EXP 15
12654: PPUSH
12655: LD_STRING DH-Surrender-4
12657: PPUSH
12658: CALL_OW 88
// RemoveSeeing ( 81 , 144 , 2 ) ;
12662: LD_INT 81
12664: PPUSH
12665: LD_INT 144
12667: PPUSH
12668: LD_INT 2
12670: PPUSH
12671: CALL_OW 331
// ChangeSideFog ( 1 , 2 ) ;
12675: LD_INT 1
12677: PPUSH
12678: LD_INT 2
12680: PPUSH
12681: CALL_OW 343
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_inside ] ] ) do
12685: LD_ADDR_VAR 0 1
12689: PUSH
12690: LD_INT 22
12692: PUSH
12693: LD_INT 1
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: LD_INT 23
12702: PUSH
12703: LD_INT 1
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PUSH
12710: LD_INT 54
12712: PUSH
12713: EMPTY
12714: LIST
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: LIST
12720: PPUSH
12721: CALL_OW 69
12725: PUSH
12726: FOR_IN
12727: IFFALSE 12740
// ComExit ( i ) ;
12729: LD_VAR 0 1
12733: PPUSH
12734: CALL 54559 0 1
12738: GO 12726
12740: POP
12741: POP
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
12742: LD_ADDR_VAR 0 3
12746: PUSH
12747: LD_INT 22
12749: PUSH
12750: LD_INT 1
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: PUSH
12757: LD_INT 25
12759: PUSH
12760: LD_INT 4
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: PPUSH
12771: CALL_OW 69
12775: ST_TO_ADDR
// hurts := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
12776: LD_ADDR_VAR 0 2
12780: PUSH
12781: LD_INT 22
12783: PUSH
12784: LD_INT 1
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PUSH
12791: LD_INT 3
12793: PUSH
12794: LD_INT 50
12796: PUSH
12797: EMPTY
12798: LIST
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: PPUSH
12808: CALL_OW 69
12812: ST_TO_ADDR
// if sci and hurts then
12813: LD_VAR 0 3
12817: PUSH
12818: LD_VAR 0 2
12822: AND
12823: IFFALSE 12885
// begin for i := 1 to hurts do
12825: LD_ADDR_VAR 0 1
12829: PUSH
12830: DOUBLE
12831: LD_INT 1
12833: DEC
12834: ST_TO_ADDR
12835: LD_VAR 0 2
12839: PUSH
12840: FOR_TO
12841: IFFALSE 12883
// if i <= sci then
12843: LD_VAR 0 1
12847: PUSH
12848: LD_VAR 0 3
12852: LESSEQUAL
12853: IFFALSE 12881
// AddComHeal ( sci [ i ] , hurts [ i ] ) ;
12855: LD_VAR 0 3
12859: PUSH
12860: LD_VAR 0 1
12864: ARRAY
12865: PPUSH
12866: LD_VAR 0 2
12870: PUSH
12871: LD_VAR 0 1
12875: ARRAY
12876: PPUSH
12877: CALL_OW 188
12881: GO 12840
12883: POP
12884: POP
// end ; if IsOk ( Givi ) then
12885: LD_EXP 16
12889: PPUSH
12890: CALL_OW 302
12894: IFFALSE 12910
// Say ( Givi , DG-Surrender-5 ) else
12896: LD_EXP 16
12900: PPUSH
12901: LD_STRING DG-Surrender-5
12903: PPUSH
12904: CALL_OW 88
12908: GO 12922
// Say ( Heike , DH-Surrender-a-5 ) ;
12910: LD_EXP 15
12914: PPUSH
12915: LD_STRING DH-Surrender-a-5
12917: PPUSH
12918: CALL_OW 88
// Say ( usCommander , DCa-Surrender-6 ) ;
12922: LD_EXP 30
12926: PPUSH
12927: LD_STRING DCa-Surrender-6
12929: PPUSH
12930: CALL_OW 88
// Say ( usCommander , DCa-Surrender-7 ) ;
12934: LD_EXP 30
12938: PPUSH
12939: LD_STRING DCa-Surrender-7
12941: PPUSH
12942: CALL_OW 88
// if IsOk ( Givi ) then
12946: LD_EXP 16
12950: PPUSH
12951: CALL_OW 302
12955: IFFALSE 12971
// Say ( Givi , DG-Surrender-8 ) else
12957: LD_EXP 16
12961: PPUSH
12962: LD_STRING DG-Surrender-8
12964: PPUSH
12965: CALL_OW 88
12969: GO 12983
// Say ( Heike , DH-Surrender-a-8 ) ;
12971: LD_EXP 15
12975: PPUSH
12976: LD_STRING DH-Surrender-a-8
12978: PPUSH
12979: CALL_OW 88
// Say ( usCommander , DCa-Surrender-9 ) ;
12983: LD_EXP 30
12987: PPUSH
12988: LD_STRING DCa-Surrender-9
12990: PPUSH
12991: CALL_OW 88
// Say ( Heike , DH-Surrender-10 ) ;
12995: LD_EXP 15
12999: PPUSH
13000: LD_STRING DH-Surrender-10
13002: PPUSH
13003: CALL_OW 88
// Say ( usCommander , DCa-Surrender-11 ) ;
13007: LD_EXP 30
13011: PPUSH
13012: LD_STRING DCa-Surrender-11
13014: PPUSH
13015: CALL_OW 88
// Say ( Heike , DH-Surrender-12 ) ;
13019: LD_EXP 15
13023: PPUSH
13024: LD_STRING DH-Surrender-12
13026: PPUSH
13027: CALL_OW 88
// Say ( usCommander , DCa-Surrender-13 ) ;
13031: LD_EXP 30
13035: PPUSH
13036: LD_STRING DCa-Surrender-13
13038: PPUSH
13039: CALL_OW 88
// Say ( usCommander , DCa-Surrender-14 ) ;
13043: LD_EXP 30
13047: PPUSH
13048: LD_STRING DCa-Surrender-14
13050: PPUSH
13051: CALL_OW 88
// Say ( usCommander , DCa-Surrender-15 ) ;
13055: LD_EXP 30
13059: PPUSH
13060: LD_STRING DCa-Surrender-15
13062: PPUSH
13063: CALL_OW 88
// Say ( usCommander , DCa-Surrender-16 ) ;
13067: LD_EXP 30
13071: PPUSH
13072: LD_STRING DCa-Surrender-16
13074: PPUSH
13075: CALL_OW 88
// Say ( Kaia , DK-Surrender-17 ) ;
13079: LD_EXP 20
13083: PPUSH
13084: LD_STRING DK-Surrender-17
13086: PPUSH
13087: CALL_OW 88
// Say ( Olaf , DO-Surrender-18 ) ;
13091: LD_EXP 24
13095: PPUSH
13096: LD_STRING DO-Surrender-18
13098: PPUSH
13099: CALL_OW 88
// Say ( Olaf , DO-Surrender-19 ) ;
13103: LD_EXP 24
13107: PPUSH
13108: LD_STRING DO-Surrender-19
13110: PPUSH
13111: CALL_OW 88
// Say ( Kurt , DKs-Surrender-20 ) ;
13115: LD_EXP 25
13119: PPUSH
13120: LD_STRING DKs-Surrender-20
13122: PPUSH
13123: CALL_OW 88
// Say ( Kurt , DKs-Surrender-21 ) ;
13127: LD_EXP 25
13131: PPUSH
13132: LD_STRING DKs-Surrender-21
13134: PPUSH
13135: CALL_OW 88
// Say ( Markov , DMar-Surrender-22 ) ;
13139: LD_EXP 22
13143: PPUSH
13144: LD_STRING DMar-Surrender-22
13146: PPUSH
13147: CALL_OW 88
// Say ( Markov , DMar-Surrender-23 ) ;
13151: LD_EXP 22
13155: PPUSH
13156: LD_STRING DMar-Surrender-23
13158: PPUSH
13159: CALL_OW 88
// Say ( Sophia , DS-Surrender-24 ) ;
13163: LD_EXP 21
13167: PPUSH
13168: LD_STRING DS-Surrender-24
13170: PPUSH
13171: CALL_OW 88
// Say ( Aviradze , DA-Surrender-25 ) ;
13175: LD_EXP 26
13179: PPUSH
13180: LD_STRING DA-Surrender-25
13182: PPUSH
13183: CALL_OW 88
// Say ( Ibrahim , DI-Surrender-26 ) ;
13187: LD_EXP 18
13191: PPUSH
13192: LD_STRING DI-Surrender-26
13194: PPUSH
13195: CALL_OW 88
// Say ( Kamil , DKam-Surrender-27 ) ;
13199: LD_EXP 19
13203: PPUSH
13204: LD_STRING DKam-Surrender-27
13206: PPUSH
13207: CALL_OW 88
// if IsOk ( Givi ) then
13211: LD_EXP 16
13215: PPUSH
13216: CALL_OW 302
13220: IFFALSE 13260
// begin Say ( Givi , DG-Surrender-28 ) ;
13222: LD_EXP 16
13226: PPUSH
13227: LD_STRING DG-Surrender-28
13229: PPUSH
13230: CALL_OW 88
// Say ( Givi , DG-Surrender-29 ) ;
13234: LD_EXP 16
13238: PPUSH
13239: LD_STRING DG-Surrender-29
13241: PPUSH
13242: CALL_OW 88
// Say ( Givi , DG-Surrender-30 ) ;
13246: LD_EXP 16
13250: PPUSH
13251: LD_STRING DG-Surrender-30
13253: PPUSH
13254: CALL_OW 88
// end else
13258: GO 13296
// begin Say ( Heike , DH-Surrender-a-28 ) ;
13260: LD_EXP 15
13264: PPUSH
13265: LD_STRING DH-Surrender-a-28
13267: PPUSH
13268: CALL_OW 88
// Say ( Heike , DH-Surrender-a-29 ) ;
13272: LD_EXP 15
13276: PPUSH
13277: LD_STRING DH-Surrender-a-29
13279: PPUSH
13280: CALL_OW 88
// Say ( Heike , DH-Surrender-a-30 ) ;
13284: LD_EXP 15
13288: PPUSH
13289: LD_STRING DH-Surrender-a-30
13291: PPUSH
13292: CALL_OW 88
// end ; PrepareRussianFirstWaveAttack ;
13296: CALL 15285 0 0
// AgressiveMove ( FilterAllUnits ( [ f_side , 3 ] ) , [ [ 176 , 123 ] ] ) ;
13300: LD_INT 22
13302: PUSH
13303: LD_INT 3
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PPUSH
13310: CALL_OW 69
13314: PPUSH
13315: LD_INT 176
13317: PUSH
13318: LD_INT 123
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: PUSH
13325: EMPTY
13326: LIST
13327: PPUSH
13328: CALL 56765 0 2
// PlaceSeeing ( 190 , 150 , 2 , - 8 ) ;
13332: LD_INT 190
13334: PPUSH
13335: LD_INT 150
13337: PPUSH
13338: LD_INT 2
13340: PPUSH
13341: LD_INT 8
13343: NEG
13344: PPUSH
13345: CALL_OW 330
// CenterOnXY ( 193 , 150 ) ;
13349: LD_INT 193
13351: PPUSH
13352: LD_INT 150
13354: PPUSH
13355: CALL_OW 84
// if IsOk ( Markov ) then
13359: LD_EXP 22
13363: PPUSH
13364: CALL_OW 302
13368: IFFALSE 13384
// Say ( Markov , DMar-Surrender-31 ) else
13370: LD_EXP 22
13374: PPUSH
13375: LD_STRING DMar-Surrender-31
13377: PPUSH
13378: CALL_OW 88
13382: GO 13441
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Surrender-a-31 ) then
13384: LD_EXP 27
13388: PPUSH
13389: LD_INT 26
13391: PUSH
13392: LD_INT 1
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: PPUSH
13399: CALL_OW 72
13403: PPUSH
13404: LD_STRING DArm-Surrender-a-31
13406: PPUSH
13407: CALL 224 0 2
13411: NOT
13412: IFFALSE 13441
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Surrender-a-31 ) ;
13414: LD_EXP 27
13418: PPUSH
13419: LD_INT 26
13421: PUSH
13422: LD_INT 2
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: PPUSH
13429: CALL_OW 72
13433: PPUSH
13434: LD_STRING DArf-Surrender-a-31
13436: PPUSH
13437: CALL 224 0 2
// Say ( Heike , DH-Surrender-32 ) ;
13441: LD_EXP 15
13445: PPUSH
13446: LD_STRING DH-Surrender-32
13448: PPUSH
13449: CALL_OW 88
// InGameOff ;
13453: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
13457: LD_STRING M2
13459: PPUSH
13460: CALL_OW 337
// wait ( 0 0$20 ) ;
13464: LD_INT 700
13466: PPUSH
13467: CALL_OW 67
// PrepareRussianLastWaveAttack ;
13471: CALL 15647 0 0
// russianAttack := true ;
13475: LD_ADDR_EXP 8
13479: PUSH
13480: LD_INT 1
13482: ST_TO_ADDR
// RemoveSeeing ( 190 , 150 , 2 ) ;
13483: LD_INT 190
13485: PPUSH
13486: LD_INT 150
13488: PPUSH
13489: LD_INT 2
13491: PPUSH
13492: CALL_OW 331
// end ;
13496: PPOPN 3
13498: END
// every 0 0$3 trigger seeHeavyGun and not InBattle ( 2 ) and IsOk ( Heike ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) and ( IsOk ( Markov ) or UnitFilter ( heikeSecondSquad , [ f_ok ] ) ) do
13499: LD_EXP 11
13503: PUSH
13504: LD_INT 2
13506: PPUSH
13507: CALL_OW 463
13511: NOT
13512: AND
13513: PUSH
13514: LD_EXP 15
13518: PPUSH
13519: CALL_OW 302
13523: AND
13524: PUSH
13525: LD_INT 22
13527: PUSH
13528: LD_INT 2
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: PUSH
13535: LD_INT 30
13537: PUSH
13538: LD_INT 3
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: PPUSH
13549: CALL_OW 69
13553: AND
13554: PUSH
13555: LD_EXP 22
13559: PPUSH
13560: CALL_OW 302
13564: PUSH
13565: LD_EXP 27
13569: PPUSH
13570: LD_INT 50
13572: PUSH
13573: EMPTY
13574: LIST
13575: PPUSH
13576: CALL_OW 72
13580: OR
13581: AND
13582: IFFALSE 13810
13584: GO 13586
13586: DISABLE
// begin DialogueOn ;
13587: CALL_OW 6
// Say ( Heike , DH-Heavy-1 ) ;
13591: LD_EXP 15
13595: PPUSH
13596: LD_STRING DH-Heavy-1
13598: PPUSH
13599: CALL_OW 88
// if IsOk ( Markov ) then
13603: LD_EXP 22
13607: PPUSH
13608: CALL_OW 302
13612: IFFALSE 13737
// begin Say ( Markov , DMar-Heavy-2 ) ;
13614: LD_EXP 22
13618: PPUSH
13619: LD_STRING DMar-Heavy-2
13621: PPUSH
13622: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
13626: LD_INT 22
13628: PUSH
13629: LD_INT 2
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: PUSH
13636: LD_INT 30
13638: PUSH
13639: LD_INT 3
13641: PUSH
13642: EMPTY
13643: LIST
13644: LIST
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: PPUSH
13650: CALL_OW 69
13654: PUSH
13655: LD_INT 1
13657: ARRAY
13658: PPUSH
13659: CALL_OW 87
// Say ( Markov , DMar-Heavy-3 ) ;
13663: LD_EXP 22
13667: PPUSH
13668: LD_STRING DMar-Heavy-3
13670: PPUSH
13671: CALL_OW 88
// Say ( Markov , DMar-Heavy-4 ) ;
13675: LD_EXP 22
13679: PPUSH
13680: LD_STRING DMar-Heavy-4
13682: PPUSH
13683: CALL_OW 88
// Say ( Markov , DMar-Heavy-5 ) ;
13687: LD_EXP 22
13691: PPUSH
13692: LD_STRING DMar-Heavy-5
13694: PPUSH
13695: CALL_OW 88
// Say ( Markov , DMar-Heavy-6 ) ;
13699: LD_EXP 22
13703: PPUSH
13704: LD_STRING DMar-Heavy-6
13706: PPUSH
13707: CALL_OW 88
// Say ( Heike , DH-Heavy-7 ) ;
13711: LD_EXP 15
13715: PPUSH
13716: LD_STRING DH-Heavy-7
13718: PPUSH
13719: CALL_OW 88
// Say ( Heike , DH-Heavy-8 ) ;
13723: LD_EXP 15
13727: PPUSH
13728: LD_STRING DH-Heavy-8
13730: PPUSH
13731: CALL_OW 88
// end else
13735: GO 13794
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Heavy-a-2 ) then
13737: LD_EXP 27
13741: PPUSH
13742: LD_INT 26
13744: PUSH
13745: LD_INT 1
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: PPUSH
13752: CALL_OW 72
13756: PPUSH
13757: LD_STRING DArm-Heavy-a-2
13759: PPUSH
13760: CALL 224 0 2
13764: NOT
13765: IFFALSE 13794
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Heavy-a-2 ) ;
13767: LD_EXP 27
13771: PPUSH
13772: LD_INT 26
13774: PUSH
13775: LD_INT 2
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: PPUSH
13782: CALL_OW 72
13786: PPUSH
13787: LD_STRING DArf-Heavy-a-2
13789: PPUSH
13790: CALL 224 0 2
// end ; Say ( Heike , DH-Heavy-9 ) ;
13794: LD_EXP 15
13798: PPUSH
13799: LD_STRING DH-Heavy-9
13801: PPUSH
13802: CALL_OW 88
// DialogueOff ;
13806: CALL_OW 7
// end ;
13810: END
// every 0 0$2 trigger UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) and IsOk ( Heike ) and not usSurrender do
13811: LD_EXP 34
13815: PPUSH
13816: LD_INT 101
13818: PUSH
13819: LD_INT 2
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: PPUSH
13826: CALL_OW 72
13830: PUSH
13831: LD_EXP 15
13835: PPUSH
13836: CALL_OW 302
13840: AND
13841: PUSH
13842: LD_EXP 7
13846: NOT
13847: AND
13848: IFFALSE 13991
13850: GO 13852
13852: DISABLE
// begin DialogueOn ;
13853: CALL_OW 6
// CenterNowOnUnits ( UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) ) ;
13857: LD_EXP 34
13861: PPUSH
13862: LD_INT 101
13864: PUSH
13865: LD_INT 2
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: PPUSH
13872: CALL_OW 72
13876: PPUSH
13877: CALL_OW 87
// Say ( Heike , DH-Flank-1 ) ;
13881: LD_EXP 15
13885: PPUSH
13886: LD_STRING DH-Flank-1
13888: PPUSH
13889: CALL_OW 88
// if IsOk ( Mike ) then
13893: LD_EXP 17
13897: PPUSH
13898: CALL_OW 302
13902: IFFALSE 13918
// Say ( Mike , DM-Flank-2 ) else
13904: LD_EXP 17
13908: PPUSH
13909: LD_STRING DM-Flank-2
13911: PPUSH
13912: CALL_OW 88
13916: GO 13975
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Flank-a-2 ) then
13918: LD_EXP 27
13922: PPUSH
13923: LD_INT 26
13925: PUSH
13926: LD_INT 1
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: PPUSH
13933: CALL_OW 72
13937: PPUSH
13938: LD_STRING DArm-Flank-a-2
13940: PPUSH
13941: CALL 224 0 2
13945: NOT
13946: IFFALSE 13975
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArm-Flank-a-2 ) ;
13948: LD_EXP 27
13952: PPUSH
13953: LD_INT 26
13955: PUSH
13956: LD_INT 2
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: PPUSH
13963: CALL_OW 72
13967: PPUSH
13968: LD_STRING DArm-Flank-a-2
13970: PPUSH
13971: CALL 224 0 2
// Say ( Heike , DH-Flank-3 ) ;
13975: LD_EXP 15
13979: PPUSH
13980: LD_STRING DH-Flank-3
13982: PPUSH
13983: CALL_OW 88
// DialogueOff ;
13987: CALL_OW 7
// end ;
13991: END
// every 0 0$3 trigger seeRemoteVehicle and not usSurrender do
13992: LD_EXP 10
13996: PUSH
13997: LD_EXP 7
14001: NOT
14002: AND
14003: IFFALSE 14227
14005: GO 14007
14007: DISABLE
// begin DialogueOn ;
14008: CALL_OW 6
// Say ( Heike , DH-USRC-1 ) ;
14012: LD_EXP 15
14016: PPUSH
14017: LD_STRING DH-USRC-1
14019: PPUSH
14020: CALL_OW 88
// if IsOk ( Markov ) then
14024: LD_EXP 22
14028: PPUSH
14029: CALL_OW 302
14033: IFFALSE 14049
// Say ( Markov , DMar-USRC-2 ) else
14035: LD_EXP 22
14039: PPUSH
14040: LD_STRING DMar-USRC-2
14042: PPUSH
14043: CALL_OW 88
14047: GO 14106
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-USRC-a-2 ) then
14049: LD_EXP 27
14053: PPUSH
14054: LD_INT 26
14056: PUSH
14057: LD_INT 1
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: PPUSH
14064: CALL_OW 72
14068: PPUSH
14069: LD_STRING DArm-USRC-a-2
14071: PPUSH
14072: CALL 224 0 2
14076: NOT
14077: IFFALSE 14106
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-USRC-a-2 ) ;
14079: LD_EXP 27
14083: PPUSH
14084: LD_INT 26
14086: PUSH
14087: LD_INT 2
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PPUSH
14094: CALL_OW 72
14098: PPUSH
14099: LD_STRING DArf-USRC-a-2
14101: PPUSH
14102: CALL 224 0 2
// DialogueOff ;
14106: CALL_OW 7
// wait ( 0 0$10 ) ;
14110: LD_INT 350
14112: PPUSH
14113: CALL_OW 67
// Say ( Heike , DH-USRC-3 ) ;
14117: LD_EXP 15
14121: PPUSH
14122: LD_STRING DH-USRC-3
14124: PPUSH
14125: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14129: LD_INT 35
14131: PPUSH
14132: CALL_OW 67
// until See ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
14136: LD_INT 2
14138: PPUSH
14139: LD_INT 22
14141: PUSH
14142: LD_INT 1
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: PUSH
14149: LD_INT 30
14151: PUSH
14152: LD_INT 36
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: PPUSH
14163: CALL_OW 69
14167: PUSH
14168: LD_INT 1
14170: ARRAY
14171: PPUSH
14172: CALL_OW 292
14176: IFFALSE 14129
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
14178: LD_INT 22
14180: PUSH
14181: LD_INT 1
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: PUSH
14188: LD_INT 30
14190: PUSH
14191: LD_INT 36
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: PPUSH
14202: CALL_OW 69
14206: PUSH
14207: LD_INT 1
14209: ARRAY
14210: PPUSH
14211: CALL_OW 87
// Say ( Heike , DH-USRCFound-1 ) ;
14215: LD_EXP 15
14219: PPUSH
14220: LD_STRING DH-USRCFound-1
14222: PPUSH
14223: CALL_OW 88
// end ;
14227: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
14228: LD_EXP 20
14232: PPUSH
14233: CALL_OW 256
14237: PUSH
14238: LD_INT 3
14240: LESS
14241: IFFALSE 14278
14243: GO 14245
14245: DISABLE
// begin DialogueOn ;
14246: CALL_OW 6
// ForceSay ( Kaia , DK-Dead-1 ) ;
14250: LD_EXP 20
14254: PPUSH
14255: LD_STRING DK-Dead-1
14257: PPUSH
14258: CALL_OW 91
// ForceSay ( Kaia , DK-Dead-2 ) ;
14262: LD_EXP 20
14266: PPUSH
14267: LD_STRING DK-Dead-2
14269: PPUSH
14270: CALL_OW 91
// DialogueOff ;
14274: CALL_OW 7
// end ;
14278: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_bweapon , ar_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] ] ] ) do
14279: LD_INT 22
14281: PUSH
14282: LD_INT 2
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: PUSH
14289: LD_INT 2
14291: PUSH
14292: LD_INT 35
14294: PUSH
14295: LD_INT 28
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PUSH
14302: LD_INT 34
14304: PUSH
14305: LD_INT 28
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: LIST
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: PPUSH
14321: CALL_OW 69
14325: IFFALSE 14338
14327: GO 14329
14329: DISABLE
// hasRockets := true ;
14330: LD_ADDR_EXP 9
14334: PUSH
14335: LD_INT 1
14337: ST_TO_ADDR
14338: END
// every 0 0$1 trigger russianAttack and not FilterAllUnits ( [ f_side , 3 ] ) do
14339: LD_EXP 8
14343: PUSH
14344: LD_INT 22
14346: PUSH
14347: LD_INT 3
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PPUSH
14354: CALL_OW 69
14358: NOT
14359: AND
14360: IFFALSE 15022
14362: GO 14364
14364: DISABLE
// begin DialogueOn ;
14365: CALL_OW 6
// if vehLossCounter = 0 then
14369: LD_EXP 14
14373: PUSH
14374: LD_INT 0
14376: EQUAL
14377: IFFALSE 14386
// SetAchievement ( ACH_UNTOUCH ) ;
14379: LD_STRING ACH_UNTOUCH
14381: PPUSH
14382: CALL_OW 543
// if tick < 35 35$00 then
14386: LD_OWVAR 1
14390: PUSH
14391: LD_INT 73500
14393: LESS
14394: IFFALSE 14403
// SetAchievement ( ACH_HSPEED_7 ) ;
14396: LD_STRING ACH_HSPEED_7
14398: PPUSH
14399: CALL_OW 543
// CenterNowOnUnits ( Heike ) ;
14403: LD_EXP 15
14407: PPUSH
14408: CALL_OW 87
// Say ( Heike , DH-End-1 ) ;
14412: LD_EXP 15
14416: PPUSH
14417: LD_STRING DH-End-1
14419: PPUSH
14420: CALL_OW 88
// SayRadio ( Shariff , DShar-End-2 ) ;
14424: LD_EXP 23
14428: PPUSH
14429: LD_STRING DShar-End-2
14431: PPUSH
14432: CALL_OW 94
// Say ( Kaia , DK-End-3 ) ;
14436: LD_EXP 20
14440: PPUSH
14441: LD_STRING DK-End-3
14443: PPUSH
14444: CALL_OW 88
// Say ( Heike , DH-End-4 ) ;
14448: LD_EXP 15
14452: PPUSH
14453: LD_STRING DH-End-4
14455: PPUSH
14456: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
14460: LD_EXP 23
14464: PPUSH
14465: LD_STRING DShar-End-5
14467: PPUSH
14468: CALL_OW 94
// if IsOk ( Markov ) then
14472: LD_EXP 22
14476: PPUSH
14477: CALL_OW 302
14481: IFFALSE 14495
// Say ( Kaia , DK-End-6 ) ;
14483: LD_EXP 20
14487: PPUSH
14488: LD_STRING DK-End-6
14490: PPUSH
14491: CALL_OW 88
// Say ( Kaia , DK-End-7 ) ;
14495: LD_EXP 20
14499: PPUSH
14500: LD_STRING DK-End-7
14502: PPUSH
14503: CALL_OW 88
// if IsOk ( Kaia ) then
14507: LD_EXP 20
14511: PPUSH
14512: CALL_OW 302
14516: IFFALSE 14554
// begin Say ( Givi , DG-End-8 ) ;
14518: LD_EXP 16
14522: PPUSH
14523: LD_STRING DG-End-8
14525: PPUSH
14526: CALL_OW 88
// Say ( Givi , DG-End-9 ) ;
14530: LD_EXP 16
14534: PPUSH
14535: LD_STRING DG-End-9
14537: PPUSH
14538: CALL_OW 88
// Say ( Heike , DH-End-10 ) ;
14542: LD_EXP 15
14546: PPUSH
14547: LD_STRING DH-End-10
14549: PPUSH
14550: CALL_OW 88
// end ; Say ( Heike , DH-End-11 ) ;
14554: LD_EXP 15
14558: PPUSH
14559: LD_STRING DH-End-11
14561: PPUSH
14562: CALL_OW 88
// if GetTech ( tech_MatDet , 2 ) = state_researched then
14566: LD_INT 7
14568: PPUSH
14569: LD_INT 2
14571: PPUSH
14572: CALL_OW 321
14576: PUSH
14577: LD_INT 2
14579: EQUAL
14580: IFFALSE 14594
// AddMedal ( med1 , 1 ) else
14582: LD_STRING med1
14584: PPUSH
14585: LD_INT 1
14587: PPUSH
14588: CALL_OW 101
14592: GO 14605
// AddMedal ( med1 , - 1 ) ;
14594: LD_STRING med1
14596: PPUSH
14597: LD_INT 1
14599: NEG
14600: PPUSH
14601: CALL_OW 101
// if hasRockets then
14605: LD_EXP 9
14609: IFFALSE 14623
// AddMedal ( med2 , 1 ) else
14611: LD_STRING med2
14613: PPUSH
14614: LD_INT 1
14616: PPUSH
14617: CALL_OW 101
14621: GO 14634
// AddMedal ( med2 , - 1 ) ;
14623: LD_STRING med2
14625: PPUSH
14626: LD_INT 1
14628: NEG
14629: PPUSH
14630: CALL_OW 101
// if tick < [ 50 50$00 , 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
14634: LD_OWVAR 1
14638: PUSH
14639: LD_INT 105000
14641: PUSH
14642: LD_INT 94500
14644: PUSH
14645: LD_INT 84000
14647: PUSH
14648: LD_INT 73500
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: PUSH
14657: LD_OWVAR 67
14661: ARRAY
14662: LESS
14663: IFFALSE 14677
// AddMedal ( med3 , 1 ) else
14665: LD_STRING med3
14667: PPUSH
14668: LD_INT 1
14670: PPUSH
14671: CALL_OW 101
14675: GO 14688
// AddMedal ( med3 , - 1 ) ;
14677: LD_STRING med3
14679: PPUSH
14680: LD_INT 1
14682: NEG
14683: PPUSH
14684: CALL_OW 101
// GiveMedals ( MAIN ) ;
14688: LD_STRING MAIN
14690: PPUSH
14691: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
14695: LD_INT 22
14697: PUSH
14698: LD_INT 2
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: PUSH
14705: LD_INT 23
14707: PUSH
14708: LD_INT 2
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PUSH
14715: LD_INT 21
14717: PUSH
14718: LD_INT 1
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: LIST
14729: PPUSH
14730: CALL_OW 69
14734: PPUSH
14735: CALL_OW 43
// SaveCharacters ( usCommander , 07_UsCommander ) ;
14739: LD_EXP 30
14743: PPUSH
14744: LD_STRING 07_UsCommander
14746: PPUSH
14747: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff usCommander , 07_Americans ) ;
14751: LD_INT 22
14753: PUSH
14754: LD_INT 1
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: PUSH
14761: LD_INT 23
14763: PUSH
14764: LD_INT 1
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: PUSH
14771: LD_INT 21
14773: PUSH
14774: LD_INT 1
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: LIST
14785: PPUSH
14786: CALL_OW 69
14790: PUSH
14791: LD_EXP 30
14795: DIFF
14796: PPUSH
14797: LD_STRING 07_Americans
14799: PPUSH
14800: CALL_OW 38
// SaveCharacters ( Heike , 07_Heike ) ;
14804: LD_EXP 15
14808: PPUSH
14809: LD_STRING 07_Heike
14811: PPUSH
14812: CALL_OW 38
// if Aviradze then
14816: LD_EXP 26
14820: IFFALSE 14834
// SaveCharacters ( Aviradze , 07_Aviradze ) ;
14822: LD_EXP 26
14826: PPUSH
14827: LD_STRING 07_Aviradze
14829: PPUSH
14830: CALL_OW 38
// if Ibrahim then
14834: LD_EXP 18
14838: IFFALSE 14852
// SaveCharacters ( Ibrahim , 07_Ibrahim ) ;
14840: LD_EXP 18
14844: PPUSH
14845: LD_STRING 07_Ibrahim
14847: PPUSH
14848: CALL_OW 38
// if Kamil then
14852: LD_EXP 19
14856: IFFALSE 14870
// SaveCharacters ( Kamil , 07_Kamil ) ;
14858: LD_EXP 19
14862: PPUSH
14863: LD_STRING 07_Kamil
14865: PPUSH
14866: CALL_OW 38
// if Sophia then
14870: LD_EXP 21
14874: IFFALSE 14888
// SaveCharacters ( Sophia , 07_Sophia ) ;
14876: LD_EXP 21
14880: PPUSH
14881: LD_STRING 07_Sophia
14883: PPUSH
14884: CALL_OW 38
// if Kaia then
14888: LD_EXP 20
14892: IFFALSE 14906
// SaveCharacters ( Kaia , 07_Kaia ) ;
14894: LD_EXP 20
14898: PPUSH
14899: LD_STRING 07_Kaia
14901: PPUSH
14902: CALL_OW 38
// if Givi then
14906: LD_EXP 16
14910: IFFALSE 14924
// SaveCharacters ( Givi , 07_Givi ) ;
14912: LD_EXP 16
14916: PPUSH
14917: LD_STRING 07_Givi
14919: PPUSH
14920: CALL_OW 38
// if Mike then
14924: LD_EXP 17
14928: IFFALSE 14942
// SaveCharacters ( Mike , 07_Mike ) ;
14930: LD_EXP 17
14934: PPUSH
14935: LD_STRING 07_Mike
14937: PPUSH
14938: CALL_OW 38
// if Markov then
14942: LD_EXP 22
14946: IFFALSE 14960
// SaveCharacters ( Markov , 07_Markov ) ;
14948: LD_EXP 22
14952: PPUSH
14953: LD_STRING 07_Markov
14955: PPUSH
14956: CALL_OW 38
// if Kurt then
14960: LD_EXP 25
14964: IFFALSE 14978
// SaveCharacters ( Kurt , 07_Kurt ) ;
14966: LD_EXP 25
14970: PPUSH
14971: LD_STRING 07_Kurt
14973: PPUSH
14974: CALL_OW 38
// if Olaf then
14978: LD_EXP 24
14982: IFFALSE 14996
// SaveCharacters ( Olaf , 07_Olaf ) ;
14984: LD_EXP 24
14988: PPUSH
14989: LD_STRING 07_Olaf
14991: PPUSH
14992: CALL_OW 38
// if heikeSecondSquad then
14996: LD_EXP 27
15000: IFFALSE 15014
// SaveCharacters ( heikeSecondSquad , 07_others ) ;
15002: LD_EXP 27
15006: PPUSH
15007: LD_STRING 07_others
15009: PPUSH
15010: CALL_OW 38
// YouWin ;
15014: CALL_OW 103
// DialogueOff ;
15018: CALL_OW 7
// end ; end_of_file
15022: END
// every 1 1$20 + 0 0$40 trigger GetResourceArea ( cratesRiverArea , mat_cans ) < [ 12 , 10 , 8 , 8 ] [ Difficulty ] do
15023: LD_INT 7
15025: PPUSH
15026: LD_INT 1
15028: PPUSH
15029: CALL_OW 287
15033: PUSH
15034: LD_INT 12
15036: PUSH
15037: LD_INT 10
15039: PUSH
15040: LD_INT 8
15042: PUSH
15043: LD_INT 8
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: PUSH
15052: LD_OWVAR 67
15056: ARRAY
15057: LESS
15058: IFFALSE 15085
15060: GO 15062
15062: DISABLE
// begin enable ;
15063: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesRiverArea , true ) ;
15064: LD_INT 1
15066: PPUSH
15067: LD_INT 5
15069: PPUSH
15070: CALL_OW 12
15074: PPUSH
15075: LD_INT 7
15077: PPUSH
15078: LD_INT 1
15080: PPUSH
15081: CALL_OW 55
// end ;
15085: END
// every 0 0$40 + 0 0$40 trigger GetResourceArea ( cratesForestArea , mat_cans ) < [ 25 , 22 , 17 , 14 ] [ Difficulty ] and tick < 24 24$00 do
15086: LD_INT 8
15088: PPUSH
15089: LD_INT 1
15091: PPUSH
15092: CALL_OW 287
15096: PUSH
15097: LD_INT 25
15099: PUSH
15100: LD_INT 22
15102: PUSH
15103: LD_INT 17
15105: PUSH
15106: LD_INT 14
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: PUSH
15115: LD_OWVAR 67
15119: ARRAY
15120: LESS
15121: PUSH
15122: LD_OWVAR 1
15126: PUSH
15127: LD_INT 50400
15129: LESS
15130: AND
15131: IFFALSE 15158
15133: GO 15135
15135: DISABLE
// begin enable ;
15136: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesForestArea , true ) ;
15137: LD_INT 1
15139: PPUSH
15140: LD_INT 5
15142: PPUSH
15143: CALL_OW 12
15147: PPUSH
15148: LD_INT 8
15150: PPUSH
15151: LD_INT 1
15153: PPUSH
15154: CALL_OW 55
// end ;
15158: END
// every 0 0$40 trigger tick < 8 8$10 do
15159: LD_OWVAR 1
15163: PUSH
15164: LD_INT 17150
15166: LESS
15167: IFFALSE 15200
15169: GO 15171
15171: DISABLE
// begin enable ;
15172: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 130 , 18 , 12 , true ) ;
15173: LD_INT 1
15175: PPUSH
15176: LD_INT 5
15178: PPUSH
15179: CALL_OW 12
15183: PPUSH
15184: LD_INT 130
15186: PPUSH
15187: LD_INT 18
15189: PPUSH
15190: LD_INT 12
15192: PPUSH
15193: LD_INT 1
15195: PPUSH
15196: CALL_OW 56
// end ;
15200: END
// every 1 1$00 + 0 0$30 trigger tick < 6 6$10 do
15201: LD_OWVAR 1
15205: PUSH
15206: LD_INT 12950
15208: LESS
15209: IFFALSE 15242
15211: GO 15213
15213: DISABLE
// begin enable ;
15214: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 172 , 97 , 12 , true ) ;
15215: LD_INT 1
15217: PPUSH
15218: LD_INT 5
15220: PPUSH
15221: CALL_OW 12
15225: PPUSH
15226: LD_INT 172
15228: PPUSH
15229: LD_INT 97
15231: PPUSH
15232: LD_INT 12
15234: PPUSH
15235: LD_INT 1
15237: PPUSH
15238: CALL_OW 56
// end ;
15242: END
// every 2 2$20 trigger GetResourceArea ( americanCratesArea , mat_cans ) < 6 do
15243: LD_INT 20
15245: PPUSH
15246: LD_INT 1
15248: PPUSH
15249: CALL_OW 287
15253: PUSH
15254: LD_INT 6
15256: LESS
15257: IFFALSE 15284
15259: GO 15261
15261: DISABLE
// begin enable ;
15262: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , americanCratesArea , true ) ;
15263: LD_INT 1
15265: PPUSH
15266: LD_INT 5
15268: PPUSH
15269: CALL_OW 12
15273: PPUSH
15274: LD_INT 20
15276: PPUSH
15277: LD_INT 1
15279: PPUSH
15280: CALL_OW 55
// end ; end_of_file
15284: END
// export function PrepareRussianFirstWaveAttack ; var i , tmp , un , veh ; begin
15285: LD_INT 0
15287: PPUSH
15288: PPUSH
15289: PPUSH
15290: PPUSH
15291: PPUSH
// uc_side := 3 ;
15292: LD_ADDR_OWVAR 20
15296: PUSH
15297: LD_INT 3
15299: ST_TO_ADDR
// uc_nation := 3 ;
15300: LD_ADDR_OWVAR 21
15304: PUSH
15305: LD_INT 3
15307: ST_TO_ADDR
// tmp := [ [ 184 , 144 , 5 ] , [ 191 , 147 , 5 ] , [ 202 , 151 , 4 ] , [ 210 , 152 , 4 ] ] ;
15308: LD_ADDR_VAR 0 3
15312: PUSH
15313: LD_INT 184
15315: PUSH
15316: LD_INT 144
15318: PUSH
15319: LD_INT 5
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: LIST
15326: PUSH
15327: LD_INT 191
15329: PUSH
15330: LD_INT 147
15332: PUSH
15333: LD_INT 5
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 202
15343: PUSH
15344: LD_INT 151
15346: PUSH
15347: LD_INT 4
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: LIST
15354: PUSH
15355: LD_INT 210
15357: PUSH
15358: LD_INT 152
15360: PUSH
15361: LD_INT 4
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: LIST
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: ST_TO_ADDR
// for i := 1 to 3 do
15375: LD_ADDR_VAR 0 2
15379: PUSH
15380: DOUBLE
15381: LD_INT 1
15383: DEC
15384: ST_TO_ADDR
15385: LD_INT 3
15387: PUSH
15388: FOR_TO
15389: IFFALSE 15558
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_gun ] [ i mod 3 + 1 ] , 40 ) ;
15391: LD_INT 24
15393: PPUSH
15394: LD_INT 1
15396: PPUSH
15397: LD_INT 1
15399: PPUSH
15400: LD_INT 43
15402: PUSH
15403: LD_INT 44
15405: PUSH
15406: LD_INT 46
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: LIST
15413: PUSH
15414: LD_VAR 0 2
15418: PUSH
15419: LD_INT 3
15421: MOD
15422: PUSH
15423: LD_INT 1
15425: PLUS
15426: ARRAY
15427: PPUSH
15428: LD_INT 40
15430: PPUSH
15431: CALL 21299 0 5
// veh := CreateVehicle ;
15435: LD_ADDR_VAR 0 5
15439: PUSH
15440: CALL_OW 45
15444: ST_TO_ADDR
// SetDir ( veh , tmp [ i ] [ 3 ] ) ;
15445: LD_VAR 0 5
15449: PPUSH
15450: LD_VAR 0 3
15454: PUSH
15455: LD_VAR 0 2
15459: ARRAY
15460: PUSH
15461: LD_INT 3
15463: ARRAY
15464: PPUSH
15465: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
15469: LD_VAR 0 5
15473: PPUSH
15474: LD_VAR 0 3
15478: PUSH
15479: LD_VAR 0 2
15483: ARRAY
15484: PUSH
15485: LD_INT 1
15487: ARRAY
15488: PPUSH
15489: LD_VAR 0 3
15493: PUSH
15494: LD_VAR 0 2
15498: ARRAY
15499: PUSH
15500: LD_INT 2
15502: ARRAY
15503: PPUSH
15504: LD_INT 0
15506: PPUSH
15507: CALL_OW 48
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
15511: LD_INT 0
15513: PPUSH
15514: LD_INT 6
15516: PUSH
15517: LD_INT 7
15519: PUSH
15520: LD_INT 8
15522: PUSH
15523: LD_INT 8
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: PUSH
15532: LD_OWVAR 67
15536: ARRAY
15537: PPUSH
15538: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
15542: CALL_OW 44
15546: PPUSH
15547: LD_VAR 0 5
15551: PPUSH
15552: CALL_OW 52
// end ;
15556: GO 15388
15558: POP
15559: POP
// for i := 1 to 4 do
15560: LD_ADDR_VAR 0 2
15564: PUSH
15565: DOUBLE
15566: LD_INT 1
15568: DEC
15569: ST_TO_ADDR
15570: LD_INT 4
15572: PUSH
15573: FOR_TO
15574: IFFALSE 15640
// begin PrepareSoldier ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
15576: LD_INT 0
15578: PPUSH
15579: LD_INT 6
15581: PUSH
15582: LD_INT 7
15584: PUSH
15585: LD_INT 8
15587: PUSH
15588: LD_INT 8
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: PUSH
15597: LD_OWVAR 67
15601: ARRAY
15602: PPUSH
15603: CALL_OW 381
// un := CreateHuman ;
15607: LD_ADDR_VAR 0 4
15611: PUSH
15612: CALL_OW 44
15616: ST_TO_ADDR
// PlaceUnitXYR ( un , 185 , 145 , 6 , false ) ;
15617: LD_VAR 0 4
15621: PPUSH
15622: LD_INT 185
15624: PPUSH
15625: LD_INT 145
15627: PPUSH
15628: LD_INT 6
15630: PPUSH
15631: LD_INT 0
15633: PPUSH
15634: CALL_OW 50
// end ;
15638: GO 15573
15640: POP
15641: POP
// end ;
15642: LD_VAR 0 1
15646: RET
// export function PrepareRussianLastWaveAttack ; var i , veh ; begin
15647: LD_INT 0
15649: PPUSH
15650: PPUSH
15651: PPUSH
// uc_side := 3 ;
15652: LD_ADDR_OWVAR 20
15656: PUSH
15657: LD_INT 3
15659: ST_TO_ADDR
// if Difficulty > 1 then
15660: LD_OWVAR 67
15664: PUSH
15665: LD_INT 1
15667: GREATER
15668: IFFALSE 15830
// begin uc_nation := 0 ;
15670: LD_ADDR_OWVAR 21
15674: PUSH
15675: LD_INT 0
15677: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty + 1 ] do
15678: LD_ADDR_VAR 0 2
15682: PUSH
15683: DOUBLE
15684: LD_INT 1
15686: DEC
15687: ST_TO_ADDR
15688: LD_INT 4
15690: PUSH
15691: LD_INT 5
15693: PUSH
15694: LD_INT 6
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: LIST
15701: PUSH
15702: LD_OWVAR 67
15706: PUSH
15707: LD_INT 1
15709: PLUS
15710: ARRAY
15711: PUSH
15712: FOR_TO
15713: IFFALSE 15828
// begin hc_class := class_apeman_soldier ;
15715: LD_ADDR_OWVAR 28
15719: PUSH
15720: LD_INT 15
15722: ST_TO_ADDR
// hc_gallery :=  ;
15723: LD_ADDR_OWVAR 33
15727: PUSH
15728: LD_STRING 
15730: ST_TO_ADDR
// hc_name := [ Treci , Ivan , Yaromir , Nadzieia , Krasna , Piaty ] [ rand ( 1 , 6 ) ] ;
15731: LD_ADDR_OWVAR 26
15735: PUSH
15736: LD_STRING Treci
15738: PUSH
15739: LD_STRING Ivan
15741: PUSH
15742: LD_STRING Yaromir
15744: PUSH
15745: LD_STRING Nadzieia
15747: PUSH
15748: LD_STRING Krasna
15750: PUSH
15751: LD_STRING Piaty
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: PUSH
15762: LD_INT 1
15764: PPUSH
15765: LD_INT 6
15767: PPUSH
15768: CALL_OW 12
15772: ARRAY
15773: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 0 , 0 ] ;
15774: LD_ADDR_OWVAR 31
15778: PUSH
15779: LD_INT 5
15781: PUSH
15782: LD_INT 0
15784: PUSH
15785: LD_INT 0
15787: PUSH
15788: LD_INT 0
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: ST_TO_ADDR
// hc_sex := sex_male ;
15797: LD_ADDR_OWVAR 27
15801: PUSH
15802: LD_INT 1
15804: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 178 , 148 , 6 , false ) ;
15805: CALL_OW 44
15809: PPUSH
15810: LD_INT 178
15812: PPUSH
15813: LD_INT 148
15815: PPUSH
15816: LD_INT 6
15818: PPUSH
15819: LD_INT 0
15821: PPUSH
15822: CALL_OW 50
// end ;
15826: GO 15712
15828: POP
15829: POP
// end ; for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
15830: LD_ADDR_VAR 0 2
15834: PUSH
15835: DOUBLE
15836: LD_INT 1
15838: DEC
15839: ST_TO_ADDR
15840: LD_INT 2
15842: PUSH
15843: LD_INT 3
15845: PUSH
15846: LD_INT 4
15848: PUSH
15849: LD_INT 5
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: PUSH
15858: LD_OWVAR 67
15862: ARRAY
15863: PUSH
15864: FOR_TO
15865: IFFALSE 16032
// begin uc_nation := 3 ;
15867: LD_ADDR_OWVAR 21
15871: PUSH
15872: LD_INT 3
15874: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gatling_gun , ru_gun ] [ i mod 3 + 1 ] , 44 ) ;
15875: LD_INT 22
15877: PPUSH
15878: LD_INT 1
15880: PPUSH
15881: LD_INT 1
15883: PPUSH
15884: LD_INT 45
15886: PUSH
15887: LD_INT 43
15889: PUSH
15890: LD_INT 44
15892: PUSH
15893: EMPTY
15894: LIST
15895: LIST
15896: LIST
15897: PUSH
15898: LD_VAR 0 2
15902: PUSH
15903: LD_INT 3
15905: MOD
15906: PUSH
15907: LD_INT 1
15909: PLUS
15910: ARRAY
15911: PPUSH
15912: LD_INT 44
15914: PPUSH
15915: CALL 21299 0 5
// veh := CreateVehicle ;
15919: LD_ADDR_VAR 0 3
15923: PUSH
15924: CALL_OW 45
15928: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
15929: LD_VAR 0 3
15933: PPUSH
15934: LD_INT 4
15936: PPUSH
15937: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
15941: LD_VAR 0 3
15945: PPUSH
15946: LD_INT 1
15948: PPUSH
15949: LD_INT 0
15951: PPUSH
15952: CALL_OW 49
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
15956: LD_INT 0
15958: PPUSH
15959: LD_INT 6
15961: PUSH
15962: LD_INT 7
15964: PUSH
15965: LD_INT 8
15967: PUSH
15968: LD_INT 8
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: PUSH
15977: LD_OWVAR 67
15981: ARRAY
15982: PPUSH
15983: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
15987: CALL_OW 44
15991: PPUSH
15992: LD_VAR 0 3
15996: PPUSH
15997: CALL_OW 52
// AgressiveMove ( veh , [ [ 178 , 137 ] ] ) ;
16001: LD_VAR 0 3
16005: PPUSH
16006: LD_INT 178
16008: PUSH
16009: LD_INT 137
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: PUSH
16016: EMPTY
16017: LIST
16018: PPUSH
16019: CALL 56765 0 2
// wait ( 0 0$2 ) ;
16023: LD_INT 70
16025: PPUSH
16026: CALL_OW 67
// end ;
16030: GO 15864
16032: POP
16033: POP
// end ;
16034: LD_VAR 0 1
16038: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i , tmp ;
16039: LD_INT 22
16041: PUSH
16042: LD_INT 3
16044: PUSH
16045: EMPTY
16046: LIST
16047: LIST
16048: PUSH
16049: LD_INT 32
16051: PUSH
16052: LD_INT 1
16054: PUSH
16055: EMPTY
16056: LIST
16057: LIST
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: PPUSH
16063: CALL_OW 69
16067: IFFALSE 16155
16069: GO 16071
16071: DISABLE
16072: LD_INT 0
16074: PPUSH
16075: PPUSH
// begin enable ;
16076: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) ;
16077: LD_ADDR_VAR 0 2
16081: PUSH
16082: LD_INT 22
16084: PUSH
16085: LD_INT 3
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PUSH
16092: LD_INT 32
16094: PUSH
16095: LD_INT 1
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: PPUSH
16106: CALL_OW 69
16110: ST_TO_ADDR
// for i in tmp do
16111: LD_ADDR_VAR 0 1
16115: PUSH
16116: LD_VAR 0 2
16120: PUSH
16121: FOR_IN
16122: IFFALSE 16153
// if GetFuel ( i ) < 3 then
16124: LD_VAR 0 1
16128: PPUSH
16129: CALL_OW 261
16133: PUSH
16134: LD_INT 3
16136: LESS
16137: IFFALSE 16151
// SetFuel ( i , 3 ) ;
16139: LD_VAR 0 1
16143: PPUSH
16144: LD_INT 3
16146: PPUSH
16147: CALL_OW 240
16151: GO 16121
16153: POP
16154: POP
// end ;
16155: PPOPN 2
16157: END
// every 0 0$1 trigger russianAttack and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i , mech , tmp ;
16158: LD_EXP 8
16162: PUSH
16163: LD_INT 22
16165: PUSH
16166: LD_INT 3
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: PUSH
16173: LD_INT 21
16175: PUSH
16176: LD_INT 1
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: PPUSH
16187: CALL_OW 69
16191: AND
16192: IFFALSE 16456
16194: GO 16196
16196: DISABLE
16197: LD_INT 0
16199: PPUSH
16200: PPUSH
16201: PPUSH
// begin enable ;
16202: ENABLE
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] ] ) ;
16203: LD_ADDR_VAR 0 2
16207: PUSH
16208: LD_INT 22
16210: PUSH
16211: LD_INT 3
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: LD_INT 25
16220: PUSH
16221: LD_INT 3
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: PUSH
16228: LD_INT 3
16230: PUSH
16231: LD_INT 55
16233: PUSH
16234: EMPTY
16235: LIST
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: LIST
16245: PPUSH
16246: CALL_OW 69
16250: ST_TO_ADDR
// if mech then
16251: LD_VAR 0 2
16255: IFFALSE 16325
// for i in mech do
16257: LD_ADDR_VAR 0 1
16261: PUSH
16262: LD_VAR 0 2
16266: PUSH
16267: FOR_IN
16268: IFFALSE 16323
// begin if IsInArea ( i , escapeArea ) then
16270: LD_VAR 0 1
16274: PPUSH
16275: LD_INT 13
16277: PPUSH
16278: CALL_OW 308
16282: IFFALSE 16295
// RemoveUnit ( i ) else
16284: LD_VAR 0 1
16288: PPUSH
16289: CALL_OW 64
16293: GO 16321
// if IsOk ( i ) then
16295: LD_VAR 0 1
16299: PPUSH
16300: CALL_OW 302
16304: IFFALSE 16321
// ComMoveXY ( i , 196 , 155 ) ;
16306: LD_VAR 0 1
16310: PPUSH
16311: LD_INT 196
16313: PPUSH
16314: LD_INT 155
16316: PPUSH
16317: CALL_OW 111
// end ;
16321: GO 16267
16323: POP
16324: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_apeman_soldier ] , [ f_type , unit_vehicle ] ] , [ f_ok ] ] ) ;
16325: LD_ADDR_VAR 0 3
16329: PUSH
16330: LD_INT 22
16332: PUSH
16333: LD_INT 3
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: PUSH
16340: LD_INT 2
16342: PUSH
16343: LD_INT 25
16345: PUSH
16346: LD_INT 1
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PUSH
16353: LD_INT 25
16355: PUSH
16356: LD_INT 15
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: PUSH
16363: LD_INT 21
16365: PUSH
16366: LD_INT 2
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: PUSH
16379: LD_INT 50
16381: PUSH
16382: EMPTY
16383: LIST
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: LIST
16389: PPUSH
16390: CALL_OW 69
16394: ST_TO_ADDR
// if tmp then
16395: LD_VAR 0 3
16399: IFFALSE 16456
// AgressiveMove ( tmp , [ [ 171 , 106 ] , [ 145 , 69 ] , [ 132 , 38 ] , [ 126 , 15 ] ] ) ;
16401: LD_VAR 0 3
16405: PPUSH
16406: LD_INT 171
16408: PUSH
16409: LD_INT 106
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PUSH
16416: LD_INT 145
16418: PUSH
16419: LD_INT 69
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: PUSH
16426: LD_INT 132
16428: PUSH
16429: LD_INT 38
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PUSH
16436: LD_INT 126
16438: PUSH
16439: LD_INT 15
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: PPUSH
16452: CALL 56765 0 2
// end ; end_of_file
16456: PPOPN 3
16458: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16459: LD_INT 0
16461: PPUSH
16462: PPUSH
// if exist_mode then
16463: LD_VAR 0 2
16467: IFFALSE 16492
// unit := CreateCharacter ( prefix & ident ) else
16469: LD_ADDR_VAR 0 5
16473: PUSH
16474: LD_VAR 0 3
16478: PUSH
16479: LD_VAR 0 1
16483: STR
16484: PPUSH
16485: CALL_OW 34
16489: ST_TO_ADDR
16490: GO 16507
// unit := NewCharacter ( ident ) ;
16492: LD_ADDR_VAR 0 5
16496: PUSH
16497: LD_VAR 0 1
16501: PPUSH
16502: CALL_OW 25
16506: ST_TO_ADDR
// result := unit ;
16507: LD_ADDR_VAR 0 4
16511: PUSH
16512: LD_VAR 0 5
16516: ST_TO_ADDR
// end ;
16517: LD_VAR 0 4
16521: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16522: LD_INT 0
16524: PPUSH
16525: PPUSH
// if not side or not nation then
16526: LD_VAR 0 1
16530: NOT
16531: PUSH
16532: LD_VAR 0 2
16536: NOT
16537: OR
16538: IFFALSE 16542
// exit ;
16540: GO 17310
// case nation of nation_american :
16542: LD_VAR 0 2
16546: PUSH
16547: LD_INT 1
16549: DOUBLE
16550: EQUAL
16551: IFTRUE 16555
16553: GO 16769
16555: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
16556: LD_ADDR_VAR 0 4
16560: PUSH
16561: LD_INT 35
16563: PUSH
16564: LD_INT 45
16566: PUSH
16567: LD_INT 46
16569: PUSH
16570: LD_INT 47
16572: PUSH
16573: LD_INT 82
16575: PUSH
16576: LD_INT 83
16578: PUSH
16579: LD_INT 84
16581: PUSH
16582: LD_INT 85
16584: PUSH
16585: LD_INT 86
16587: PUSH
16588: LD_INT 1
16590: PUSH
16591: LD_INT 2
16593: PUSH
16594: LD_INT 6
16596: PUSH
16597: LD_INT 15
16599: PUSH
16600: LD_INT 16
16602: PUSH
16603: LD_INT 7
16605: PUSH
16606: LD_INT 12
16608: PUSH
16609: LD_INT 13
16611: PUSH
16612: LD_INT 10
16614: PUSH
16615: LD_INT 14
16617: PUSH
16618: LD_INT 20
16620: PUSH
16621: LD_INT 21
16623: PUSH
16624: LD_INT 22
16626: PUSH
16627: LD_INT 25
16629: PUSH
16630: LD_INT 32
16632: PUSH
16633: LD_INT 27
16635: PUSH
16636: LD_INT 36
16638: PUSH
16639: LD_INT 69
16641: PUSH
16642: LD_INT 39
16644: PUSH
16645: LD_INT 34
16647: PUSH
16648: LD_INT 40
16650: PUSH
16651: LD_INT 48
16653: PUSH
16654: LD_INT 49
16656: PUSH
16657: LD_INT 50
16659: PUSH
16660: LD_INT 51
16662: PUSH
16663: LD_INT 52
16665: PUSH
16666: LD_INT 53
16668: PUSH
16669: LD_INT 54
16671: PUSH
16672: LD_INT 55
16674: PUSH
16675: LD_INT 56
16677: PUSH
16678: LD_INT 57
16680: PUSH
16681: LD_INT 58
16683: PUSH
16684: LD_INT 59
16686: PUSH
16687: LD_INT 60
16689: PUSH
16690: LD_INT 61
16692: PUSH
16693: LD_INT 62
16695: PUSH
16696: LD_INT 80
16698: PUSH
16699: LD_INT 82
16701: PUSH
16702: LD_INT 83
16704: PUSH
16705: LD_INT 84
16707: PUSH
16708: LD_INT 85
16710: PUSH
16711: LD_INT 86
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: ST_TO_ADDR
16767: GO 17234
16769: LD_INT 2
16771: DOUBLE
16772: EQUAL
16773: IFTRUE 16777
16775: GO 17003
16777: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
16778: LD_ADDR_VAR 0 4
16782: PUSH
16783: LD_INT 35
16785: PUSH
16786: LD_INT 45
16788: PUSH
16789: LD_INT 46
16791: PUSH
16792: LD_INT 47
16794: PUSH
16795: LD_INT 82
16797: PUSH
16798: LD_INT 83
16800: PUSH
16801: LD_INT 84
16803: PUSH
16804: LD_INT 85
16806: PUSH
16807: LD_INT 87
16809: PUSH
16810: LD_INT 70
16812: PUSH
16813: LD_INT 1
16815: PUSH
16816: LD_INT 11
16818: PUSH
16819: LD_INT 3
16821: PUSH
16822: LD_INT 4
16824: PUSH
16825: LD_INT 5
16827: PUSH
16828: LD_INT 6
16830: PUSH
16831: LD_INT 15
16833: PUSH
16834: LD_INT 18
16836: PUSH
16837: LD_INT 7
16839: PUSH
16840: LD_INT 17
16842: PUSH
16843: LD_INT 8
16845: PUSH
16846: LD_INT 20
16848: PUSH
16849: LD_INT 21
16851: PUSH
16852: LD_INT 22
16854: PUSH
16855: LD_INT 72
16857: PUSH
16858: LD_INT 26
16860: PUSH
16861: LD_INT 69
16863: PUSH
16864: LD_INT 39
16866: PUSH
16867: LD_INT 40
16869: PUSH
16870: LD_INT 41
16872: PUSH
16873: LD_INT 42
16875: PUSH
16876: LD_INT 43
16878: PUSH
16879: LD_INT 48
16881: PUSH
16882: LD_INT 49
16884: PUSH
16885: LD_INT 50
16887: PUSH
16888: LD_INT 51
16890: PUSH
16891: LD_INT 52
16893: PUSH
16894: LD_INT 53
16896: PUSH
16897: LD_INT 54
16899: PUSH
16900: LD_INT 55
16902: PUSH
16903: LD_INT 56
16905: PUSH
16906: LD_INT 60
16908: PUSH
16909: LD_INT 61
16911: PUSH
16912: LD_INT 62
16914: PUSH
16915: LD_INT 66
16917: PUSH
16918: LD_INT 67
16920: PUSH
16921: LD_INT 68
16923: PUSH
16924: LD_INT 81
16926: PUSH
16927: LD_INT 82
16929: PUSH
16930: LD_INT 83
16932: PUSH
16933: LD_INT 84
16935: PUSH
16936: LD_INT 85
16938: PUSH
16939: LD_INT 87
16941: PUSH
16942: LD_INT 88
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: ST_TO_ADDR
17001: GO 17234
17003: LD_INT 3
17005: DOUBLE
17006: EQUAL
17007: IFTRUE 17011
17009: GO 17233
17011: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17012: LD_ADDR_VAR 0 4
17016: PUSH
17017: LD_INT 46
17019: PUSH
17020: LD_INT 47
17022: PUSH
17023: LD_INT 1
17025: PUSH
17026: LD_INT 2
17028: PUSH
17029: LD_INT 82
17031: PUSH
17032: LD_INT 83
17034: PUSH
17035: LD_INT 84
17037: PUSH
17038: LD_INT 85
17040: PUSH
17041: LD_INT 86
17043: PUSH
17044: LD_INT 11
17046: PUSH
17047: LD_INT 9
17049: PUSH
17050: LD_INT 20
17052: PUSH
17053: LD_INT 19
17055: PUSH
17056: LD_INT 21
17058: PUSH
17059: LD_INT 24
17061: PUSH
17062: LD_INT 22
17064: PUSH
17065: LD_INT 25
17067: PUSH
17068: LD_INT 28
17070: PUSH
17071: LD_INT 29
17073: PUSH
17074: LD_INT 30
17076: PUSH
17077: LD_INT 31
17079: PUSH
17080: LD_INT 37
17082: PUSH
17083: LD_INT 38
17085: PUSH
17086: LD_INT 32
17088: PUSH
17089: LD_INT 27
17091: PUSH
17092: LD_INT 33
17094: PUSH
17095: LD_INT 69
17097: PUSH
17098: LD_INT 39
17100: PUSH
17101: LD_INT 34
17103: PUSH
17104: LD_INT 40
17106: PUSH
17107: LD_INT 71
17109: PUSH
17110: LD_INT 23
17112: PUSH
17113: LD_INT 44
17115: PUSH
17116: LD_INT 48
17118: PUSH
17119: LD_INT 49
17121: PUSH
17122: LD_INT 50
17124: PUSH
17125: LD_INT 51
17127: PUSH
17128: LD_INT 52
17130: PUSH
17131: LD_INT 53
17133: PUSH
17134: LD_INT 54
17136: PUSH
17137: LD_INT 55
17139: PUSH
17140: LD_INT 56
17142: PUSH
17143: LD_INT 57
17145: PUSH
17146: LD_INT 58
17148: PUSH
17149: LD_INT 59
17151: PUSH
17152: LD_INT 63
17154: PUSH
17155: LD_INT 64
17157: PUSH
17158: LD_INT 65
17160: PUSH
17161: LD_INT 82
17163: PUSH
17164: LD_INT 83
17166: PUSH
17167: LD_INT 84
17169: PUSH
17170: LD_INT 85
17172: PUSH
17173: LD_INT 86
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: ST_TO_ADDR
17231: GO 17234
17233: POP
// if state > - 1 and state < 3 then
17234: LD_VAR 0 3
17238: PUSH
17239: LD_INT 1
17241: NEG
17242: GREATER
17243: PUSH
17244: LD_VAR 0 3
17248: PUSH
17249: LD_INT 3
17251: LESS
17252: AND
17253: IFFALSE 17310
// for i in result do
17255: LD_ADDR_VAR 0 5
17259: PUSH
17260: LD_VAR 0 4
17264: PUSH
17265: FOR_IN
17266: IFFALSE 17308
// if GetTech ( i , side ) <> state then
17268: LD_VAR 0 5
17272: PPUSH
17273: LD_VAR 0 1
17277: PPUSH
17278: CALL_OW 321
17282: PUSH
17283: LD_VAR 0 3
17287: NONEQUAL
17288: IFFALSE 17306
// result := result diff i ;
17290: LD_ADDR_VAR 0 4
17294: PUSH
17295: LD_VAR 0 4
17299: PUSH
17300: LD_VAR 0 5
17304: DIFF
17305: ST_TO_ADDR
17306: GO 17265
17308: POP
17309: POP
// end ;
17310: LD_VAR 0 4
17314: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17315: LD_INT 0
17317: PPUSH
17318: PPUSH
17319: PPUSH
// result := true ;
17320: LD_ADDR_VAR 0 3
17324: PUSH
17325: LD_INT 1
17327: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17328: LD_ADDR_VAR 0 5
17332: PUSH
17333: LD_VAR 0 2
17337: PPUSH
17338: CALL_OW 480
17342: ST_TO_ADDR
// if not tmp then
17343: LD_VAR 0 5
17347: NOT
17348: IFFALSE 17352
// exit ;
17350: GO 17401
// for i in tmp do
17352: LD_ADDR_VAR 0 4
17356: PUSH
17357: LD_VAR 0 5
17361: PUSH
17362: FOR_IN
17363: IFFALSE 17399
// if GetTech ( i , side ) <> state_researched then
17365: LD_VAR 0 4
17369: PPUSH
17370: LD_VAR 0 1
17374: PPUSH
17375: CALL_OW 321
17379: PUSH
17380: LD_INT 2
17382: NONEQUAL
17383: IFFALSE 17397
// begin result := false ;
17385: LD_ADDR_VAR 0 3
17389: PUSH
17390: LD_INT 0
17392: ST_TO_ADDR
// exit ;
17393: POP
17394: POP
17395: GO 17401
// end ;
17397: GO 17362
17399: POP
17400: POP
// end ;
17401: LD_VAR 0 3
17405: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17406: LD_INT 0
17408: PPUSH
17409: PPUSH
17410: PPUSH
17411: PPUSH
17412: PPUSH
17413: PPUSH
17414: PPUSH
17415: PPUSH
17416: PPUSH
17417: PPUSH
17418: PPUSH
17419: PPUSH
17420: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17421: LD_VAR 0 1
17425: NOT
17426: PUSH
17427: LD_VAR 0 1
17431: PPUSH
17432: CALL_OW 257
17436: PUSH
17437: LD_INT 9
17439: NONEQUAL
17440: OR
17441: IFFALSE 17445
// exit ;
17443: GO 18018
// side := GetSide ( unit ) ;
17445: LD_ADDR_VAR 0 9
17449: PUSH
17450: LD_VAR 0 1
17454: PPUSH
17455: CALL_OW 255
17459: ST_TO_ADDR
// tech_space := tech_spacanom ;
17460: LD_ADDR_VAR 0 12
17464: PUSH
17465: LD_INT 29
17467: ST_TO_ADDR
// tech_time := tech_taurad ;
17468: LD_ADDR_VAR 0 13
17472: PUSH
17473: LD_INT 28
17475: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17476: LD_ADDR_VAR 0 11
17480: PUSH
17481: LD_VAR 0 1
17485: PPUSH
17486: CALL_OW 310
17490: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17491: LD_VAR 0 11
17495: PPUSH
17496: CALL_OW 247
17500: PUSH
17501: LD_INT 2
17503: EQUAL
17504: IFFALSE 17508
// exit ;
17506: GO 18018
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17508: LD_ADDR_VAR 0 8
17512: PUSH
17513: LD_INT 81
17515: PUSH
17516: LD_VAR 0 9
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 3
17527: PUSH
17528: LD_INT 21
17530: PUSH
17531: LD_INT 3
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PPUSH
17546: CALL_OW 69
17550: ST_TO_ADDR
// if not tmp then
17551: LD_VAR 0 8
17555: NOT
17556: IFFALSE 17560
// exit ;
17558: GO 18018
// if in_unit then
17560: LD_VAR 0 11
17564: IFFALSE 17588
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
17566: LD_ADDR_VAR 0 10
17570: PUSH
17571: LD_VAR 0 8
17575: PPUSH
17576: LD_VAR 0 11
17580: PPUSH
17581: CALL_OW 74
17585: ST_TO_ADDR
17586: GO 17608
// enemy := NearestUnitToUnit ( tmp , unit ) ;
17588: LD_ADDR_VAR 0 10
17592: PUSH
17593: LD_VAR 0 8
17597: PPUSH
17598: LD_VAR 0 1
17602: PPUSH
17603: CALL_OW 74
17607: ST_TO_ADDR
// if not enemy then
17608: LD_VAR 0 10
17612: NOT
17613: IFFALSE 17617
// exit ;
17615: GO 18018
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
17617: LD_VAR 0 11
17621: PUSH
17622: LD_VAR 0 11
17626: PPUSH
17627: LD_VAR 0 10
17631: PPUSH
17632: CALL_OW 296
17636: PUSH
17637: LD_INT 13
17639: GREATER
17640: AND
17641: PUSH
17642: LD_VAR 0 1
17646: PPUSH
17647: LD_VAR 0 10
17651: PPUSH
17652: CALL_OW 296
17656: PUSH
17657: LD_INT 12
17659: GREATER
17660: OR
17661: IFFALSE 17665
// exit ;
17663: GO 18018
// missile := [ 1 ] ;
17665: LD_ADDR_VAR 0 14
17669: PUSH
17670: LD_INT 1
17672: PUSH
17673: EMPTY
17674: LIST
17675: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17676: LD_VAR 0 9
17680: PPUSH
17681: LD_VAR 0 12
17685: PPUSH
17686: CALL_OW 325
17690: IFFALSE 17719
// missile := Replace ( missile , missile + 1 , 2 ) ;
17692: LD_ADDR_VAR 0 14
17696: PUSH
17697: LD_VAR 0 14
17701: PPUSH
17702: LD_VAR 0 14
17706: PUSH
17707: LD_INT 1
17709: PLUS
17710: PPUSH
17711: LD_INT 2
17713: PPUSH
17714: CALL_OW 1
17718: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17719: LD_VAR 0 9
17723: PPUSH
17724: LD_VAR 0 13
17728: PPUSH
17729: CALL_OW 325
17733: PUSH
17734: LD_VAR 0 10
17738: PPUSH
17739: CALL_OW 255
17743: PPUSH
17744: LD_VAR 0 13
17748: PPUSH
17749: CALL_OW 325
17753: NOT
17754: AND
17755: IFFALSE 17784
// missile := Replace ( missile , missile + 1 , 3 ) ;
17757: LD_ADDR_VAR 0 14
17761: PUSH
17762: LD_VAR 0 14
17766: PPUSH
17767: LD_VAR 0 14
17771: PUSH
17772: LD_INT 1
17774: PLUS
17775: PPUSH
17776: LD_INT 3
17778: PPUSH
17779: CALL_OW 1
17783: ST_TO_ADDR
// if missile < 2 then
17784: LD_VAR 0 14
17788: PUSH
17789: LD_INT 2
17791: LESS
17792: IFFALSE 17796
// exit ;
17794: GO 18018
// x := GetX ( enemy ) ;
17796: LD_ADDR_VAR 0 4
17800: PUSH
17801: LD_VAR 0 10
17805: PPUSH
17806: CALL_OW 250
17810: ST_TO_ADDR
// y := GetY ( enemy ) ;
17811: LD_ADDR_VAR 0 5
17815: PUSH
17816: LD_VAR 0 10
17820: PPUSH
17821: CALL_OW 251
17825: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17826: LD_ADDR_VAR 0 6
17830: PUSH
17831: LD_VAR 0 4
17835: PUSH
17836: LD_INT 1
17838: NEG
17839: PPUSH
17840: LD_INT 1
17842: PPUSH
17843: CALL_OW 12
17847: PLUS
17848: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17849: LD_ADDR_VAR 0 7
17853: PUSH
17854: LD_VAR 0 5
17858: PUSH
17859: LD_INT 1
17861: NEG
17862: PPUSH
17863: LD_INT 1
17865: PPUSH
17866: CALL_OW 12
17870: PLUS
17871: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17872: LD_VAR 0 6
17876: PPUSH
17877: LD_VAR 0 7
17881: PPUSH
17882: CALL_OW 488
17886: NOT
17887: IFFALSE 17909
// begin _x := x ;
17889: LD_ADDR_VAR 0 6
17893: PUSH
17894: LD_VAR 0 4
17898: ST_TO_ADDR
// _y := y ;
17899: LD_ADDR_VAR 0 7
17903: PUSH
17904: LD_VAR 0 5
17908: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17909: LD_ADDR_VAR 0 3
17913: PUSH
17914: LD_INT 1
17916: PPUSH
17917: LD_VAR 0 14
17921: PPUSH
17922: CALL_OW 12
17926: ST_TO_ADDR
// case i of 1 :
17927: LD_VAR 0 3
17931: PUSH
17932: LD_INT 1
17934: DOUBLE
17935: EQUAL
17936: IFTRUE 17940
17938: GO 17957
17940: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17941: LD_VAR 0 1
17945: PPUSH
17946: LD_VAR 0 10
17950: PPUSH
17951: CALL_OW 115
17955: GO 18018
17957: LD_INT 2
17959: DOUBLE
17960: EQUAL
17961: IFTRUE 17965
17963: GO 17987
17965: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17966: LD_VAR 0 1
17970: PPUSH
17971: LD_VAR 0 6
17975: PPUSH
17976: LD_VAR 0 7
17980: PPUSH
17981: CALL_OW 153
17985: GO 18018
17987: LD_INT 3
17989: DOUBLE
17990: EQUAL
17991: IFTRUE 17995
17993: GO 18017
17995: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17996: LD_VAR 0 1
18000: PPUSH
18001: LD_VAR 0 6
18005: PPUSH
18006: LD_VAR 0 7
18010: PPUSH
18011: CALL_OW 154
18015: GO 18018
18017: POP
// end ;
18018: LD_VAR 0 2
18022: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18023: LD_INT 0
18025: PPUSH
18026: PPUSH
18027: PPUSH
18028: PPUSH
18029: PPUSH
18030: PPUSH
// if not unit or not building then
18031: LD_VAR 0 1
18035: NOT
18036: PUSH
18037: LD_VAR 0 2
18041: NOT
18042: OR
18043: IFFALSE 18047
// exit ;
18045: GO 18205
// x := GetX ( building ) ;
18047: LD_ADDR_VAR 0 5
18051: PUSH
18052: LD_VAR 0 2
18056: PPUSH
18057: CALL_OW 250
18061: ST_TO_ADDR
// y := GetY ( building ) ;
18062: LD_ADDR_VAR 0 6
18066: PUSH
18067: LD_VAR 0 2
18071: PPUSH
18072: CALL_OW 251
18076: ST_TO_ADDR
// for i = 0 to 5 do
18077: LD_ADDR_VAR 0 4
18081: PUSH
18082: DOUBLE
18083: LD_INT 0
18085: DEC
18086: ST_TO_ADDR
18087: LD_INT 5
18089: PUSH
18090: FOR_TO
18091: IFFALSE 18203
// begin _x := ShiftX ( x , i , 3 ) ;
18093: LD_ADDR_VAR 0 7
18097: PUSH
18098: LD_VAR 0 5
18102: PPUSH
18103: LD_VAR 0 4
18107: PPUSH
18108: LD_INT 3
18110: PPUSH
18111: CALL_OW 272
18115: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18116: LD_ADDR_VAR 0 8
18120: PUSH
18121: LD_VAR 0 6
18125: PPUSH
18126: LD_VAR 0 4
18130: PPUSH
18131: LD_INT 3
18133: PPUSH
18134: CALL_OW 273
18138: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18139: LD_VAR 0 7
18143: PPUSH
18144: LD_VAR 0 8
18148: PPUSH
18149: CALL_OW 488
18153: NOT
18154: IFFALSE 18158
// continue ;
18156: GO 18090
// if HexInfo ( _x , _y ) = 0 then
18158: LD_VAR 0 7
18162: PPUSH
18163: LD_VAR 0 8
18167: PPUSH
18168: CALL_OW 428
18172: PUSH
18173: LD_INT 0
18175: EQUAL
18176: IFFALSE 18201
// begin ComMoveXY ( unit , _x , _y ) ;
18178: LD_VAR 0 1
18182: PPUSH
18183: LD_VAR 0 7
18187: PPUSH
18188: LD_VAR 0 8
18192: PPUSH
18193: CALL_OW 111
// exit ;
18197: POP
18198: POP
18199: GO 18205
// end ; end ;
18201: GO 18090
18203: POP
18204: POP
// end ;
18205: LD_VAR 0 3
18209: RET
// export function ScanBase ( side , base_area ) ; begin
18210: LD_INT 0
18212: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18213: LD_ADDR_VAR 0 3
18217: PUSH
18218: LD_VAR 0 2
18222: PPUSH
18223: LD_INT 81
18225: PUSH
18226: LD_VAR 0 1
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PPUSH
18235: CALL_OW 70
18239: ST_TO_ADDR
// end ;
18240: LD_VAR 0 3
18244: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18245: LD_INT 0
18247: PPUSH
18248: PPUSH
18249: PPUSH
18250: PPUSH
// result := false ;
18251: LD_ADDR_VAR 0 2
18255: PUSH
18256: LD_INT 0
18258: ST_TO_ADDR
// side := GetSide ( unit ) ;
18259: LD_ADDR_VAR 0 3
18263: PUSH
18264: LD_VAR 0 1
18268: PPUSH
18269: CALL_OW 255
18273: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18274: LD_ADDR_VAR 0 4
18278: PUSH
18279: LD_VAR 0 1
18283: PPUSH
18284: CALL_OW 248
18288: ST_TO_ADDR
// case nat of 1 :
18289: LD_VAR 0 4
18293: PUSH
18294: LD_INT 1
18296: DOUBLE
18297: EQUAL
18298: IFTRUE 18302
18300: GO 18313
18302: POP
// tech := tech_lassight ; 2 :
18303: LD_ADDR_VAR 0 5
18307: PUSH
18308: LD_INT 12
18310: ST_TO_ADDR
18311: GO 18352
18313: LD_INT 2
18315: DOUBLE
18316: EQUAL
18317: IFTRUE 18321
18319: GO 18332
18321: POP
// tech := tech_mortar ; 3 :
18322: LD_ADDR_VAR 0 5
18326: PUSH
18327: LD_INT 41
18329: ST_TO_ADDR
18330: GO 18352
18332: LD_INT 3
18334: DOUBLE
18335: EQUAL
18336: IFTRUE 18340
18338: GO 18351
18340: POP
// tech := tech_bazooka ; end ;
18341: LD_ADDR_VAR 0 5
18345: PUSH
18346: LD_INT 44
18348: ST_TO_ADDR
18349: GO 18352
18351: POP
// if Researched ( side , tech ) then
18352: LD_VAR 0 3
18356: PPUSH
18357: LD_VAR 0 5
18361: PPUSH
18362: CALL_OW 325
18366: IFFALSE 18393
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18368: LD_ADDR_VAR 0 2
18372: PUSH
18373: LD_INT 5
18375: PUSH
18376: LD_INT 8
18378: PUSH
18379: LD_INT 9
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: LIST
18386: PUSH
18387: LD_VAR 0 4
18391: ARRAY
18392: ST_TO_ADDR
// end ;
18393: LD_VAR 0 2
18397: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18398: LD_INT 0
18400: PPUSH
18401: PPUSH
18402: PPUSH
// if not mines then
18403: LD_VAR 0 2
18407: NOT
18408: IFFALSE 18412
// exit ;
18410: GO 18556
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18412: LD_ADDR_VAR 0 5
18416: PUSH
18417: LD_INT 81
18419: PUSH
18420: LD_VAR 0 1
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: LD_INT 3
18431: PUSH
18432: LD_INT 21
18434: PUSH
18435: LD_INT 3
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PPUSH
18450: CALL_OW 69
18454: ST_TO_ADDR
// for i in mines do
18455: LD_ADDR_VAR 0 4
18459: PUSH
18460: LD_VAR 0 2
18464: PUSH
18465: FOR_IN
18466: IFFALSE 18554
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18468: LD_VAR 0 4
18472: PUSH
18473: LD_INT 1
18475: ARRAY
18476: PPUSH
18477: LD_VAR 0 4
18481: PUSH
18482: LD_INT 2
18484: ARRAY
18485: PPUSH
18486: CALL_OW 458
18490: NOT
18491: IFFALSE 18495
// continue ;
18493: GO 18465
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18495: LD_VAR 0 4
18499: PUSH
18500: LD_INT 1
18502: ARRAY
18503: PPUSH
18504: LD_VAR 0 4
18508: PUSH
18509: LD_INT 2
18511: ARRAY
18512: PPUSH
18513: CALL_OW 428
18517: PUSH
18518: LD_VAR 0 5
18522: IN
18523: IFFALSE 18552
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18525: LD_VAR 0 4
18529: PUSH
18530: LD_INT 1
18532: ARRAY
18533: PPUSH
18534: LD_VAR 0 4
18538: PUSH
18539: LD_INT 2
18541: ARRAY
18542: PPUSH
18543: LD_VAR 0 1
18547: PPUSH
18548: CALL_OW 456
// end ;
18552: GO 18465
18554: POP
18555: POP
// end ;
18556: LD_VAR 0 3
18560: RET
// export function Count ( array ) ; begin
18561: LD_INT 0
18563: PPUSH
// result := array + 0 ;
18564: LD_ADDR_VAR 0 2
18568: PUSH
18569: LD_VAR 0 1
18573: PUSH
18574: LD_INT 0
18576: PLUS
18577: ST_TO_ADDR
// end ;
18578: LD_VAR 0 2
18582: RET
// export function IsEmpty ( building ) ; begin
18583: LD_INT 0
18585: PPUSH
// if not building then
18586: LD_VAR 0 1
18590: NOT
18591: IFFALSE 18595
// exit ;
18593: GO 18638
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
18595: LD_ADDR_VAR 0 2
18599: PUSH
18600: LD_VAR 0 1
18604: PUSH
18605: LD_INT 22
18607: PUSH
18608: LD_VAR 0 1
18612: PPUSH
18613: CALL_OW 255
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: LD_INT 58
18624: PUSH
18625: EMPTY
18626: LIST
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PPUSH
18632: CALL_OW 69
18636: IN
18637: ST_TO_ADDR
// end ;
18638: LD_VAR 0 2
18642: RET
// export function IsNotFull ( building ) ; var places ; begin
18643: LD_INT 0
18645: PPUSH
18646: PPUSH
// if not building then
18647: LD_VAR 0 1
18651: NOT
18652: IFFALSE 18656
// exit ;
18654: GO 18684
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
18656: LD_ADDR_VAR 0 2
18660: PUSH
18661: LD_VAR 0 1
18665: PPUSH
18666: LD_INT 3
18668: PUSH
18669: LD_INT 62
18671: PUSH
18672: EMPTY
18673: LIST
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PPUSH
18679: CALL_OW 72
18683: ST_TO_ADDR
// end ;
18684: LD_VAR 0 2
18688: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18689: LD_INT 0
18691: PPUSH
18692: PPUSH
18693: PPUSH
18694: PPUSH
// tmp := [ ] ;
18695: LD_ADDR_VAR 0 3
18699: PUSH
18700: EMPTY
18701: ST_TO_ADDR
// list := [ ] ;
18702: LD_ADDR_VAR 0 5
18706: PUSH
18707: EMPTY
18708: ST_TO_ADDR
// for i = 16 to 25 do
18709: LD_ADDR_VAR 0 4
18713: PUSH
18714: DOUBLE
18715: LD_INT 16
18717: DEC
18718: ST_TO_ADDR
18719: LD_INT 25
18721: PUSH
18722: FOR_TO
18723: IFFALSE 18796
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18725: LD_ADDR_VAR 0 3
18729: PUSH
18730: LD_VAR 0 3
18734: PUSH
18735: LD_INT 22
18737: PUSH
18738: LD_VAR 0 1
18742: PPUSH
18743: CALL_OW 255
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: LD_INT 91
18754: PUSH
18755: LD_VAR 0 1
18759: PUSH
18760: LD_INT 6
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 30
18770: PUSH
18771: LD_VAR 0 4
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: LIST
18784: PUSH
18785: EMPTY
18786: LIST
18787: PPUSH
18788: CALL_OW 69
18792: ADD
18793: ST_TO_ADDR
18794: GO 18722
18796: POP
18797: POP
// for i = 1 to tmp do
18798: LD_ADDR_VAR 0 4
18802: PUSH
18803: DOUBLE
18804: LD_INT 1
18806: DEC
18807: ST_TO_ADDR
18808: LD_VAR 0 3
18812: PUSH
18813: FOR_TO
18814: IFFALSE 18902
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18816: LD_ADDR_VAR 0 5
18820: PUSH
18821: LD_VAR 0 5
18825: PUSH
18826: LD_VAR 0 3
18830: PUSH
18831: LD_VAR 0 4
18835: ARRAY
18836: PPUSH
18837: CALL_OW 266
18841: PUSH
18842: LD_VAR 0 3
18846: PUSH
18847: LD_VAR 0 4
18851: ARRAY
18852: PPUSH
18853: CALL_OW 250
18857: PUSH
18858: LD_VAR 0 3
18862: PUSH
18863: LD_VAR 0 4
18867: ARRAY
18868: PPUSH
18869: CALL_OW 251
18873: PUSH
18874: LD_VAR 0 3
18878: PUSH
18879: LD_VAR 0 4
18883: ARRAY
18884: PPUSH
18885: CALL_OW 254
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: PUSH
18896: EMPTY
18897: LIST
18898: ADD
18899: ST_TO_ADDR
18900: GO 18813
18902: POP
18903: POP
// result := list ;
18904: LD_ADDR_VAR 0 2
18908: PUSH
18909: LD_VAR 0 5
18913: ST_TO_ADDR
// end ;
18914: LD_VAR 0 2
18918: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18919: LD_INT 0
18921: PPUSH
18922: PPUSH
18923: PPUSH
18924: PPUSH
18925: PPUSH
18926: PPUSH
18927: PPUSH
// if not factory then
18928: LD_VAR 0 1
18932: NOT
18933: IFFALSE 18937
// exit ;
18935: GO 19530
// if control = control_apeman then
18937: LD_VAR 0 4
18941: PUSH
18942: LD_INT 5
18944: EQUAL
18945: IFFALSE 19054
// begin tmp := UnitsInside ( factory ) ;
18947: LD_ADDR_VAR 0 8
18951: PUSH
18952: LD_VAR 0 1
18956: PPUSH
18957: CALL_OW 313
18961: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18962: LD_VAR 0 8
18966: PPUSH
18967: LD_INT 25
18969: PUSH
18970: LD_INT 12
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PPUSH
18977: CALL_OW 72
18981: NOT
18982: IFFALSE 18992
// control := control_manual ;
18984: LD_ADDR_VAR 0 4
18988: PUSH
18989: LD_INT 1
18991: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18992: LD_ADDR_VAR 0 8
18996: PUSH
18997: LD_VAR 0 1
19001: PPUSH
19002: CALL 18689 0 1
19006: ST_TO_ADDR
// if tmp then
19007: LD_VAR 0 8
19011: IFFALSE 19054
// begin for i in tmp do
19013: LD_ADDR_VAR 0 7
19017: PUSH
19018: LD_VAR 0 8
19022: PUSH
19023: FOR_IN
19024: IFFALSE 19052
// if i [ 1 ] = b_ext_radio then
19026: LD_VAR 0 7
19030: PUSH
19031: LD_INT 1
19033: ARRAY
19034: PUSH
19035: LD_INT 22
19037: EQUAL
19038: IFFALSE 19050
// begin control := control_remote ;
19040: LD_ADDR_VAR 0 4
19044: PUSH
19045: LD_INT 2
19047: ST_TO_ADDR
// break ;
19048: GO 19052
// end ;
19050: GO 19023
19052: POP
19053: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19054: LD_VAR 0 1
19058: PPUSH
19059: LD_VAR 0 2
19063: PPUSH
19064: LD_VAR 0 3
19068: PPUSH
19069: LD_VAR 0 4
19073: PPUSH
19074: LD_VAR 0 5
19078: PPUSH
19079: CALL_OW 448
19083: IFFALSE 19118
// begin result := [ chassis , engine , control , weapon ] ;
19085: LD_ADDR_VAR 0 6
19089: PUSH
19090: LD_VAR 0 2
19094: PUSH
19095: LD_VAR 0 3
19099: PUSH
19100: LD_VAR 0 4
19104: PUSH
19105: LD_VAR 0 5
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: ST_TO_ADDR
// exit ;
19116: GO 19530
// end ; _chassis := AvailableChassisList ( factory ) ;
19118: LD_ADDR_VAR 0 9
19122: PUSH
19123: LD_VAR 0 1
19127: PPUSH
19128: CALL_OW 475
19132: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19133: LD_ADDR_VAR 0 11
19137: PUSH
19138: LD_VAR 0 1
19142: PPUSH
19143: CALL_OW 476
19147: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19148: LD_ADDR_VAR 0 12
19152: PUSH
19153: LD_VAR 0 1
19157: PPUSH
19158: CALL_OW 477
19162: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19163: LD_ADDR_VAR 0 10
19167: PUSH
19168: LD_VAR 0 1
19172: PPUSH
19173: CALL_OW 478
19177: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19178: LD_VAR 0 9
19182: NOT
19183: PUSH
19184: LD_VAR 0 11
19188: NOT
19189: OR
19190: PUSH
19191: LD_VAR 0 12
19195: NOT
19196: OR
19197: PUSH
19198: LD_VAR 0 10
19202: NOT
19203: OR
19204: IFFALSE 19239
// begin result := [ chassis , engine , control , weapon ] ;
19206: LD_ADDR_VAR 0 6
19210: PUSH
19211: LD_VAR 0 2
19215: PUSH
19216: LD_VAR 0 3
19220: PUSH
19221: LD_VAR 0 4
19225: PUSH
19226: LD_VAR 0 5
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: ST_TO_ADDR
// exit ;
19237: GO 19530
// end ; if not chassis in _chassis then
19239: LD_VAR 0 2
19243: PUSH
19244: LD_VAR 0 9
19248: IN
19249: NOT
19250: IFFALSE 19276
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19252: LD_ADDR_VAR 0 2
19256: PUSH
19257: LD_VAR 0 9
19261: PUSH
19262: LD_INT 1
19264: PPUSH
19265: LD_VAR 0 9
19269: PPUSH
19270: CALL_OW 12
19274: ARRAY
19275: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19276: LD_VAR 0 2
19280: PPUSH
19281: LD_VAR 0 3
19285: PPUSH
19286: CALL 19535 0 2
19290: NOT
19291: IFFALSE 19350
// repeat engine := _engine [ 1 ] ;
19293: LD_ADDR_VAR 0 3
19297: PUSH
19298: LD_VAR 0 11
19302: PUSH
19303: LD_INT 1
19305: ARRAY
19306: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19307: LD_ADDR_VAR 0 11
19311: PUSH
19312: LD_VAR 0 11
19316: PPUSH
19317: LD_INT 1
19319: PPUSH
19320: CALL_OW 3
19324: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19325: LD_VAR 0 2
19329: PPUSH
19330: LD_VAR 0 3
19334: PPUSH
19335: CALL 19535 0 2
19339: PUSH
19340: LD_VAR 0 11
19344: PUSH
19345: EMPTY
19346: EQUAL
19347: OR
19348: IFFALSE 19293
// if not control in _control then
19350: LD_VAR 0 4
19354: PUSH
19355: LD_VAR 0 12
19359: IN
19360: NOT
19361: IFFALSE 19387
// control := _control [ rand ( 1 , _control ) ] ;
19363: LD_ADDR_VAR 0 4
19367: PUSH
19368: LD_VAR 0 12
19372: PUSH
19373: LD_INT 1
19375: PPUSH
19376: LD_VAR 0 12
19380: PPUSH
19381: CALL_OW 12
19385: ARRAY
19386: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19387: LD_VAR 0 2
19391: PPUSH
19392: LD_VAR 0 5
19396: PPUSH
19397: CALL 19755 0 2
19401: NOT
19402: IFFALSE 19461
// repeat weapon := _weapon [ 1 ] ;
19404: LD_ADDR_VAR 0 5
19408: PUSH
19409: LD_VAR 0 10
19413: PUSH
19414: LD_INT 1
19416: ARRAY
19417: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19418: LD_ADDR_VAR 0 10
19422: PUSH
19423: LD_VAR 0 10
19427: PPUSH
19428: LD_INT 1
19430: PPUSH
19431: CALL_OW 3
19435: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19436: LD_VAR 0 2
19440: PPUSH
19441: LD_VAR 0 5
19445: PPUSH
19446: CALL 19755 0 2
19450: PUSH
19451: LD_VAR 0 10
19455: PUSH
19456: EMPTY
19457: EQUAL
19458: OR
19459: IFFALSE 19404
// result := [ ] ;
19461: LD_ADDR_VAR 0 6
19465: PUSH
19466: EMPTY
19467: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19468: LD_VAR 0 1
19472: PPUSH
19473: LD_VAR 0 2
19477: PPUSH
19478: LD_VAR 0 3
19482: PPUSH
19483: LD_VAR 0 4
19487: PPUSH
19488: LD_VAR 0 5
19492: PPUSH
19493: CALL_OW 448
19497: IFFALSE 19530
// result := [ chassis , engine , control , weapon ] ;
19499: LD_ADDR_VAR 0 6
19503: PUSH
19504: LD_VAR 0 2
19508: PUSH
19509: LD_VAR 0 3
19513: PUSH
19514: LD_VAR 0 4
19518: PUSH
19519: LD_VAR 0 5
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: ST_TO_ADDR
// end ;
19530: LD_VAR 0 6
19534: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
19535: LD_INT 0
19537: PPUSH
// if not chassis or not engine then
19538: LD_VAR 0 1
19542: NOT
19543: PUSH
19544: LD_VAR 0 2
19548: NOT
19549: OR
19550: IFFALSE 19554
// exit ;
19552: GO 19750
// case engine of engine_solar :
19554: LD_VAR 0 2
19558: PUSH
19559: LD_INT 2
19561: DOUBLE
19562: EQUAL
19563: IFTRUE 19567
19565: GO 19605
19567: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
19568: LD_ADDR_VAR 0 3
19572: PUSH
19573: LD_INT 11
19575: PUSH
19576: LD_INT 12
19578: PUSH
19579: LD_INT 13
19581: PUSH
19582: LD_INT 14
19584: PUSH
19585: LD_INT 1
19587: PUSH
19588: LD_INT 2
19590: PUSH
19591: LD_INT 3
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: ST_TO_ADDR
19603: GO 19734
19605: LD_INT 1
19607: DOUBLE
19608: EQUAL
19609: IFTRUE 19613
19611: GO 19675
19613: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
19614: LD_ADDR_VAR 0 3
19618: PUSH
19619: LD_INT 11
19621: PUSH
19622: LD_INT 12
19624: PUSH
19625: LD_INT 13
19627: PUSH
19628: LD_INT 14
19630: PUSH
19631: LD_INT 1
19633: PUSH
19634: LD_INT 2
19636: PUSH
19637: LD_INT 3
19639: PUSH
19640: LD_INT 4
19642: PUSH
19643: LD_INT 5
19645: PUSH
19646: LD_INT 21
19648: PUSH
19649: LD_INT 23
19651: PUSH
19652: LD_INT 22
19654: PUSH
19655: LD_INT 24
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: ST_TO_ADDR
19673: GO 19734
19675: LD_INT 3
19677: DOUBLE
19678: EQUAL
19679: IFTRUE 19683
19681: GO 19733
19683: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19684: LD_ADDR_VAR 0 3
19688: PUSH
19689: LD_INT 13
19691: PUSH
19692: LD_INT 14
19694: PUSH
19695: LD_INT 2
19697: PUSH
19698: LD_INT 3
19700: PUSH
19701: LD_INT 4
19703: PUSH
19704: LD_INT 5
19706: PUSH
19707: LD_INT 21
19709: PUSH
19710: LD_INT 22
19712: PUSH
19713: LD_INT 23
19715: PUSH
19716: LD_INT 24
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: ST_TO_ADDR
19731: GO 19734
19733: POP
// result := ( chassis in result ) ;
19734: LD_ADDR_VAR 0 3
19738: PUSH
19739: LD_VAR 0 1
19743: PUSH
19744: LD_VAR 0 3
19748: IN
19749: ST_TO_ADDR
// end ;
19750: LD_VAR 0 3
19754: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19755: LD_INT 0
19757: PPUSH
// if not chassis or not weapon then
19758: LD_VAR 0 1
19762: NOT
19763: PUSH
19764: LD_VAR 0 2
19768: NOT
19769: OR
19770: IFFALSE 19774
// exit ;
19772: GO 20834
// case weapon of us_machine_gun :
19774: LD_VAR 0 2
19778: PUSH
19779: LD_INT 2
19781: DOUBLE
19782: EQUAL
19783: IFTRUE 19787
19785: GO 19817
19787: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19788: LD_ADDR_VAR 0 3
19792: PUSH
19793: LD_INT 1
19795: PUSH
19796: LD_INT 2
19798: PUSH
19799: LD_INT 3
19801: PUSH
19802: LD_INT 4
19804: PUSH
19805: LD_INT 5
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: ST_TO_ADDR
19815: GO 20818
19817: LD_INT 3
19819: DOUBLE
19820: EQUAL
19821: IFTRUE 19825
19823: GO 19855
19825: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19826: LD_ADDR_VAR 0 3
19830: PUSH
19831: LD_INT 1
19833: PUSH
19834: LD_INT 2
19836: PUSH
19837: LD_INT 3
19839: PUSH
19840: LD_INT 4
19842: PUSH
19843: LD_INT 5
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: ST_TO_ADDR
19853: GO 20818
19855: LD_INT 11
19857: DOUBLE
19858: EQUAL
19859: IFTRUE 19863
19861: GO 19893
19863: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19864: LD_ADDR_VAR 0 3
19868: PUSH
19869: LD_INT 1
19871: PUSH
19872: LD_INT 2
19874: PUSH
19875: LD_INT 3
19877: PUSH
19878: LD_INT 4
19880: PUSH
19881: LD_INT 5
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: ST_TO_ADDR
19891: GO 20818
19893: LD_INT 4
19895: DOUBLE
19896: EQUAL
19897: IFTRUE 19901
19899: GO 19927
19901: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19902: LD_ADDR_VAR 0 3
19906: PUSH
19907: LD_INT 2
19909: PUSH
19910: LD_INT 3
19912: PUSH
19913: LD_INT 4
19915: PUSH
19916: LD_INT 5
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: ST_TO_ADDR
19925: GO 20818
19927: LD_INT 5
19929: DOUBLE
19930: EQUAL
19931: IFTRUE 19935
19933: GO 19961
19935: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19936: LD_ADDR_VAR 0 3
19940: PUSH
19941: LD_INT 2
19943: PUSH
19944: LD_INT 3
19946: PUSH
19947: LD_INT 4
19949: PUSH
19950: LD_INT 5
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: ST_TO_ADDR
19959: GO 20818
19961: LD_INT 9
19963: DOUBLE
19964: EQUAL
19965: IFTRUE 19969
19967: GO 19995
19969: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19970: LD_ADDR_VAR 0 3
19974: PUSH
19975: LD_INT 2
19977: PUSH
19978: LD_INT 3
19980: PUSH
19981: LD_INT 4
19983: PUSH
19984: LD_INT 5
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: ST_TO_ADDR
19993: GO 20818
19995: LD_INT 7
19997: DOUBLE
19998: EQUAL
19999: IFTRUE 20003
20001: GO 20029
20003: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20004: LD_ADDR_VAR 0 3
20008: PUSH
20009: LD_INT 2
20011: PUSH
20012: LD_INT 3
20014: PUSH
20015: LD_INT 4
20017: PUSH
20018: LD_INT 5
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: ST_TO_ADDR
20027: GO 20818
20029: LD_INT 12
20031: DOUBLE
20032: EQUAL
20033: IFTRUE 20037
20035: GO 20063
20037: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20038: LD_ADDR_VAR 0 3
20042: PUSH
20043: LD_INT 2
20045: PUSH
20046: LD_INT 3
20048: PUSH
20049: LD_INT 4
20051: PUSH
20052: LD_INT 5
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: ST_TO_ADDR
20061: GO 20818
20063: LD_INT 13
20065: DOUBLE
20066: EQUAL
20067: IFTRUE 20071
20069: GO 20097
20071: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20072: LD_ADDR_VAR 0 3
20076: PUSH
20077: LD_INT 2
20079: PUSH
20080: LD_INT 3
20082: PUSH
20083: LD_INT 4
20085: PUSH
20086: LD_INT 5
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: ST_TO_ADDR
20095: GO 20818
20097: LD_INT 14
20099: DOUBLE
20100: EQUAL
20101: IFTRUE 20105
20103: GO 20123
20105: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20106: LD_ADDR_VAR 0 3
20110: PUSH
20111: LD_INT 4
20113: PUSH
20114: LD_INT 5
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: ST_TO_ADDR
20121: GO 20818
20123: LD_INT 6
20125: DOUBLE
20126: EQUAL
20127: IFTRUE 20131
20129: GO 20149
20131: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20132: LD_ADDR_VAR 0 3
20136: PUSH
20137: LD_INT 4
20139: PUSH
20140: LD_INT 5
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: ST_TO_ADDR
20147: GO 20818
20149: LD_INT 10
20151: DOUBLE
20152: EQUAL
20153: IFTRUE 20157
20155: GO 20175
20157: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20158: LD_ADDR_VAR 0 3
20162: PUSH
20163: LD_INT 4
20165: PUSH
20166: LD_INT 5
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: ST_TO_ADDR
20173: GO 20818
20175: LD_INT 22
20177: DOUBLE
20178: EQUAL
20179: IFTRUE 20183
20181: GO 20209
20183: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20184: LD_ADDR_VAR 0 3
20188: PUSH
20189: LD_INT 11
20191: PUSH
20192: LD_INT 12
20194: PUSH
20195: LD_INT 13
20197: PUSH
20198: LD_INT 14
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: ST_TO_ADDR
20207: GO 20818
20209: LD_INT 23
20211: DOUBLE
20212: EQUAL
20213: IFTRUE 20217
20215: GO 20243
20217: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20218: LD_ADDR_VAR 0 3
20222: PUSH
20223: LD_INT 11
20225: PUSH
20226: LD_INT 12
20228: PUSH
20229: LD_INT 13
20231: PUSH
20232: LD_INT 14
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: ST_TO_ADDR
20241: GO 20818
20243: LD_INT 24
20245: DOUBLE
20246: EQUAL
20247: IFTRUE 20251
20249: GO 20277
20251: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20252: LD_ADDR_VAR 0 3
20256: PUSH
20257: LD_INT 11
20259: PUSH
20260: LD_INT 12
20262: PUSH
20263: LD_INT 13
20265: PUSH
20266: LD_INT 14
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: ST_TO_ADDR
20275: GO 20818
20277: LD_INT 30
20279: DOUBLE
20280: EQUAL
20281: IFTRUE 20285
20283: GO 20311
20285: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20286: LD_ADDR_VAR 0 3
20290: PUSH
20291: LD_INT 11
20293: PUSH
20294: LD_INT 12
20296: PUSH
20297: LD_INT 13
20299: PUSH
20300: LD_INT 14
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: ST_TO_ADDR
20309: GO 20818
20311: LD_INT 25
20313: DOUBLE
20314: EQUAL
20315: IFTRUE 20319
20317: GO 20337
20319: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20320: LD_ADDR_VAR 0 3
20324: PUSH
20325: LD_INT 13
20327: PUSH
20328: LD_INT 14
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: ST_TO_ADDR
20335: GO 20818
20337: LD_INT 27
20339: DOUBLE
20340: EQUAL
20341: IFTRUE 20345
20343: GO 20363
20345: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20346: LD_ADDR_VAR 0 3
20350: PUSH
20351: LD_INT 13
20353: PUSH
20354: LD_INT 14
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: ST_TO_ADDR
20361: GO 20818
20363: LD_INT 92
20365: DOUBLE
20366: EQUAL
20367: IFTRUE 20371
20369: GO 20397
20371: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20372: LD_ADDR_VAR 0 3
20376: PUSH
20377: LD_INT 11
20379: PUSH
20380: LD_INT 12
20382: PUSH
20383: LD_INT 13
20385: PUSH
20386: LD_INT 14
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: ST_TO_ADDR
20395: GO 20818
20397: LD_INT 28
20399: DOUBLE
20400: EQUAL
20401: IFTRUE 20405
20403: GO 20423
20405: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20406: LD_ADDR_VAR 0 3
20410: PUSH
20411: LD_INT 13
20413: PUSH
20414: LD_INT 14
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: ST_TO_ADDR
20421: GO 20818
20423: LD_INT 29
20425: DOUBLE
20426: EQUAL
20427: IFTRUE 20431
20429: GO 20449
20431: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20432: LD_ADDR_VAR 0 3
20436: PUSH
20437: LD_INT 13
20439: PUSH
20440: LD_INT 14
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: ST_TO_ADDR
20447: GO 20818
20449: LD_INT 31
20451: DOUBLE
20452: EQUAL
20453: IFTRUE 20457
20455: GO 20475
20457: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20458: LD_ADDR_VAR 0 3
20462: PUSH
20463: LD_INT 13
20465: PUSH
20466: LD_INT 14
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: ST_TO_ADDR
20473: GO 20818
20475: LD_INT 26
20477: DOUBLE
20478: EQUAL
20479: IFTRUE 20483
20481: GO 20501
20483: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20484: LD_ADDR_VAR 0 3
20488: PUSH
20489: LD_INT 13
20491: PUSH
20492: LD_INT 14
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: ST_TO_ADDR
20499: GO 20818
20501: LD_INT 42
20503: DOUBLE
20504: EQUAL
20505: IFTRUE 20509
20507: GO 20535
20509: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20510: LD_ADDR_VAR 0 3
20514: PUSH
20515: LD_INT 21
20517: PUSH
20518: LD_INT 22
20520: PUSH
20521: LD_INT 23
20523: PUSH
20524: LD_INT 24
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: ST_TO_ADDR
20533: GO 20818
20535: LD_INT 43
20537: DOUBLE
20538: EQUAL
20539: IFTRUE 20543
20541: GO 20569
20543: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
20544: LD_ADDR_VAR 0 3
20548: PUSH
20549: LD_INT 21
20551: PUSH
20552: LD_INT 22
20554: PUSH
20555: LD_INT 23
20557: PUSH
20558: LD_INT 24
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: ST_TO_ADDR
20567: GO 20818
20569: LD_INT 44
20571: DOUBLE
20572: EQUAL
20573: IFTRUE 20577
20575: GO 20603
20577: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
20578: LD_ADDR_VAR 0 3
20582: PUSH
20583: LD_INT 21
20585: PUSH
20586: LD_INT 22
20588: PUSH
20589: LD_INT 23
20591: PUSH
20592: LD_INT 24
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: ST_TO_ADDR
20601: GO 20818
20603: LD_INT 45
20605: DOUBLE
20606: EQUAL
20607: IFTRUE 20611
20609: GO 20637
20611: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
20612: LD_ADDR_VAR 0 3
20616: PUSH
20617: LD_INT 21
20619: PUSH
20620: LD_INT 22
20622: PUSH
20623: LD_INT 23
20625: PUSH
20626: LD_INT 24
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: ST_TO_ADDR
20635: GO 20818
20637: LD_INT 49
20639: DOUBLE
20640: EQUAL
20641: IFTRUE 20645
20643: GO 20671
20645: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20646: LD_ADDR_VAR 0 3
20650: PUSH
20651: LD_INT 21
20653: PUSH
20654: LD_INT 22
20656: PUSH
20657: LD_INT 23
20659: PUSH
20660: LD_INT 24
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: ST_TO_ADDR
20669: GO 20818
20671: LD_INT 51
20673: DOUBLE
20674: EQUAL
20675: IFTRUE 20679
20677: GO 20705
20679: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20680: LD_ADDR_VAR 0 3
20684: PUSH
20685: LD_INT 21
20687: PUSH
20688: LD_INT 22
20690: PUSH
20691: LD_INT 23
20693: PUSH
20694: LD_INT 24
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: ST_TO_ADDR
20703: GO 20818
20705: LD_INT 52
20707: DOUBLE
20708: EQUAL
20709: IFTRUE 20713
20711: GO 20739
20713: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20714: LD_ADDR_VAR 0 3
20718: PUSH
20719: LD_INT 21
20721: PUSH
20722: LD_INT 22
20724: PUSH
20725: LD_INT 23
20727: PUSH
20728: LD_INT 24
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: ST_TO_ADDR
20737: GO 20818
20739: LD_INT 53
20741: DOUBLE
20742: EQUAL
20743: IFTRUE 20747
20745: GO 20765
20747: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
20748: LD_ADDR_VAR 0 3
20752: PUSH
20753: LD_INT 23
20755: PUSH
20756: LD_INT 24
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: ST_TO_ADDR
20763: GO 20818
20765: LD_INT 46
20767: DOUBLE
20768: EQUAL
20769: IFTRUE 20773
20771: GO 20791
20773: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20774: LD_ADDR_VAR 0 3
20778: PUSH
20779: LD_INT 23
20781: PUSH
20782: LD_INT 24
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: ST_TO_ADDR
20789: GO 20818
20791: LD_INT 47
20793: DOUBLE
20794: EQUAL
20795: IFTRUE 20799
20797: GO 20817
20799: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20800: LD_ADDR_VAR 0 3
20804: PUSH
20805: LD_INT 23
20807: PUSH
20808: LD_INT 24
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: ST_TO_ADDR
20815: GO 20818
20817: POP
// result := ( chassis in result ) ;
20818: LD_ADDR_VAR 0 3
20822: PUSH
20823: LD_VAR 0 1
20827: PUSH
20828: LD_VAR 0 3
20832: IN
20833: ST_TO_ADDR
// end ;
20834: LD_VAR 0 3
20838: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20839: LD_INT 0
20841: PPUSH
20842: PPUSH
20843: PPUSH
20844: PPUSH
20845: PPUSH
20846: PPUSH
20847: PPUSH
// result := array ;
20848: LD_ADDR_VAR 0 5
20852: PUSH
20853: LD_VAR 0 1
20857: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20858: LD_VAR 0 1
20862: NOT
20863: PUSH
20864: LD_VAR 0 2
20868: NOT
20869: OR
20870: PUSH
20871: LD_VAR 0 3
20875: NOT
20876: OR
20877: PUSH
20878: LD_VAR 0 2
20882: PUSH
20883: LD_VAR 0 1
20887: GREATER
20888: OR
20889: PUSH
20890: LD_VAR 0 3
20894: PUSH
20895: LD_VAR 0 1
20899: GREATER
20900: OR
20901: IFFALSE 20905
// exit ;
20903: GO 21201
// if direction then
20905: LD_VAR 0 4
20909: IFFALSE 20973
// begin d := 1 ;
20911: LD_ADDR_VAR 0 9
20915: PUSH
20916: LD_INT 1
20918: ST_TO_ADDR
// if i_from > i_to then
20919: LD_VAR 0 2
20923: PUSH
20924: LD_VAR 0 3
20928: GREATER
20929: IFFALSE 20955
// length := ( array - i_from ) + i_to else
20931: LD_ADDR_VAR 0 11
20935: PUSH
20936: LD_VAR 0 1
20940: PUSH
20941: LD_VAR 0 2
20945: MINUS
20946: PUSH
20947: LD_VAR 0 3
20951: PLUS
20952: ST_TO_ADDR
20953: GO 20971
// length := i_to - i_from ;
20955: LD_ADDR_VAR 0 11
20959: PUSH
20960: LD_VAR 0 3
20964: PUSH
20965: LD_VAR 0 2
20969: MINUS
20970: ST_TO_ADDR
// end else
20971: GO 21034
// begin d := - 1 ;
20973: LD_ADDR_VAR 0 9
20977: PUSH
20978: LD_INT 1
20980: NEG
20981: ST_TO_ADDR
// if i_from > i_to then
20982: LD_VAR 0 2
20986: PUSH
20987: LD_VAR 0 3
20991: GREATER
20992: IFFALSE 21012
// length := i_from - i_to else
20994: LD_ADDR_VAR 0 11
20998: PUSH
20999: LD_VAR 0 2
21003: PUSH
21004: LD_VAR 0 3
21008: MINUS
21009: ST_TO_ADDR
21010: GO 21034
// length := ( array - i_to ) + i_from ;
21012: LD_ADDR_VAR 0 11
21016: PUSH
21017: LD_VAR 0 1
21021: PUSH
21022: LD_VAR 0 3
21026: MINUS
21027: PUSH
21028: LD_VAR 0 2
21032: PLUS
21033: ST_TO_ADDR
// end ; if not length then
21034: LD_VAR 0 11
21038: NOT
21039: IFFALSE 21043
// exit ;
21041: GO 21201
// tmp := array ;
21043: LD_ADDR_VAR 0 10
21047: PUSH
21048: LD_VAR 0 1
21052: ST_TO_ADDR
// for i = 1 to length do
21053: LD_ADDR_VAR 0 6
21057: PUSH
21058: DOUBLE
21059: LD_INT 1
21061: DEC
21062: ST_TO_ADDR
21063: LD_VAR 0 11
21067: PUSH
21068: FOR_TO
21069: IFFALSE 21189
// begin for j = 1 to array do
21071: LD_ADDR_VAR 0 7
21075: PUSH
21076: DOUBLE
21077: LD_INT 1
21079: DEC
21080: ST_TO_ADDR
21081: LD_VAR 0 1
21085: PUSH
21086: FOR_TO
21087: IFFALSE 21175
// begin k := j + d ;
21089: LD_ADDR_VAR 0 8
21093: PUSH
21094: LD_VAR 0 7
21098: PUSH
21099: LD_VAR 0 9
21103: PLUS
21104: ST_TO_ADDR
// if k > array then
21105: LD_VAR 0 8
21109: PUSH
21110: LD_VAR 0 1
21114: GREATER
21115: IFFALSE 21125
// k := 1 ;
21117: LD_ADDR_VAR 0 8
21121: PUSH
21122: LD_INT 1
21124: ST_TO_ADDR
// if not k then
21125: LD_VAR 0 8
21129: NOT
21130: IFFALSE 21142
// k := array ;
21132: LD_ADDR_VAR 0 8
21136: PUSH
21137: LD_VAR 0 1
21141: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21142: LD_ADDR_VAR 0 10
21146: PUSH
21147: LD_VAR 0 10
21151: PPUSH
21152: LD_VAR 0 8
21156: PPUSH
21157: LD_VAR 0 1
21161: PUSH
21162: LD_VAR 0 7
21166: ARRAY
21167: PPUSH
21168: CALL_OW 1
21172: ST_TO_ADDR
// end ;
21173: GO 21086
21175: POP
21176: POP
// array := tmp ;
21177: LD_ADDR_VAR 0 1
21181: PUSH
21182: LD_VAR 0 10
21186: ST_TO_ADDR
// end ;
21187: GO 21068
21189: POP
21190: POP
// result := array ;
21191: LD_ADDR_VAR 0 5
21195: PUSH
21196: LD_VAR 0 1
21200: ST_TO_ADDR
// end ;
21201: LD_VAR 0 5
21205: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21206: LD_INT 0
21208: PPUSH
21209: PPUSH
// result := 0 ;
21210: LD_ADDR_VAR 0 3
21214: PUSH
21215: LD_INT 0
21217: ST_TO_ADDR
// if not array or not value in array then
21218: LD_VAR 0 1
21222: NOT
21223: PUSH
21224: LD_VAR 0 2
21228: PUSH
21229: LD_VAR 0 1
21233: IN
21234: NOT
21235: OR
21236: IFFALSE 21240
// exit ;
21238: GO 21294
// for i = 1 to array do
21240: LD_ADDR_VAR 0 4
21244: PUSH
21245: DOUBLE
21246: LD_INT 1
21248: DEC
21249: ST_TO_ADDR
21250: LD_VAR 0 1
21254: PUSH
21255: FOR_TO
21256: IFFALSE 21292
// if value = array [ i ] then
21258: LD_VAR 0 2
21262: PUSH
21263: LD_VAR 0 1
21267: PUSH
21268: LD_VAR 0 4
21272: ARRAY
21273: EQUAL
21274: IFFALSE 21290
// begin result := i ;
21276: LD_ADDR_VAR 0 3
21280: PUSH
21281: LD_VAR 0 4
21285: ST_TO_ADDR
// exit ;
21286: POP
21287: POP
21288: GO 21294
// end ;
21290: GO 21255
21292: POP
21293: POP
// end ;
21294: LD_VAR 0 3
21298: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21299: LD_INT 0
21301: PPUSH
// vc_chassis := chassis ;
21302: LD_ADDR_OWVAR 37
21306: PUSH
21307: LD_VAR 0 1
21311: ST_TO_ADDR
// vc_engine := engine ;
21312: LD_ADDR_OWVAR 39
21316: PUSH
21317: LD_VAR 0 2
21321: ST_TO_ADDR
// vc_control := control ;
21322: LD_ADDR_OWVAR 38
21326: PUSH
21327: LD_VAR 0 3
21331: ST_TO_ADDR
// vc_weapon := weapon ;
21332: LD_ADDR_OWVAR 40
21336: PUSH
21337: LD_VAR 0 4
21341: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21342: LD_ADDR_OWVAR 41
21346: PUSH
21347: LD_VAR 0 5
21351: ST_TO_ADDR
// end ;
21352: LD_VAR 0 6
21356: RET
// export function WantPlant ( unit ) ; var task ; begin
21357: LD_INT 0
21359: PPUSH
21360: PPUSH
// result := false ;
21361: LD_ADDR_VAR 0 2
21365: PUSH
21366: LD_INT 0
21368: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21369: LD_ADDR_VAR 0 3
21373: PUSH
21374: LD_VAR 0 1
21378: PPUSH
21379: CALL_OW 437
21383: ST_TO_ADDR
// if task then
21384: LD_VAR 0 3
21388: IFFALSE 21416
// if task [ 1 ] [ 1 ] = p then
21390: LD_VAR 0 3
21394: PUSH
21395: LD_INT 1
21397: ARRAY
21398: PUSH
21399: LD_INT 1
21401: ARRAY
21402: PUSH
21403: LD_STRING p
21405: EQUAL
21406: IFFALSE 21416
// result := true ;
21408: LD_ADDR_VAR 0 2
21412: PUSH
21413: LD_INT 1
21415: ST_TO_ADDR
// end ;
21416: LD_VAR 0 2
21420: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21421: LD_INT 0
21423: PPUSH
21424: PPUSH
21425: PPUSH
21426: PPUSH
// if pos < 1 then
21427: LD_VAR 0 2
21431: PUSH
21432: LD_INT 1
21434: LESS
21435: IFFALSE 21439
// exit ;
21437: GO 21742
// if pos = 1 then
21439: LD_VAR 0 2
21443: PUSH
21444: LD_INT 1
21446: EQUAL
21447: IFFALSE 21480
// result := Replace ( arr , pos [ 1 ] , value ) else
21449: LD_ADDR_VAR 0 4
21453: PUSH
21454: LD_VAR 0 1
21458: PPUSH
21459: LD_VAR 0 2
21463: PUSH
21464: LD_INT 1
21466: ARRAY
21467: PPUSH
21468: LD_VAR 0 3
21472: PPUSH
21473: CALL_OW 1
21477: ST_TO_ADDR
21478: GO 21742
// begin tmp := arr ;
21480: LD_ADDR_VAR 0 6
21484: PUSH
21485: LD_VAR 0 1
21489: ST_TO_ADDR
// s_arr := [ tmp ] ;
21490: LD_ADDR_VAR 0 7
21494: PUSH
21495: LD_VAR 0 6
21499: PUSH
21500: EMPTY
21501: LIST
21502: ST_TO_ADDR
// for i = 1 to pos - 1 do
21503: LD_ADDR_VAR 0 5
21507: PUSH
21508: DOUBLE
21509: LD_INT 1
21511: DEC
21512: ST_TO_ADDR
21513: LD_VAR 0 2
21517: PUSH
21518: LD_INT 1
21520: MINUS
21521: PUSH
21522: FOR_TO
21523: IFFALSE 21568
// begin tmp := tmp [ pos [ i ] ] ;
21525: LD_ADDR_VAR 0 6
21529: PUSH
21530: LD_VAR 0 6
21534: PUSH
21535: LD_VAR 0 2
21539: PUSH
21540: LD_VAR 0 5
21544: ARRAY
21545: ARRAY
21546: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
21547: LD_ADDR_VAR 0 7
21551: PUSH
21552: LD_VAR 0 7
21556: PUSH
21557: LD_VAR 0 6
21561: PUSH
21562: EMPTY
21563: LIST
21564: ADD
21565: ST_TO_ADDR
// end ;
21566: GO 21522
21568: POP
21569: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
21570: LD_ADDR_VAR 0 6
21574: PUSH
21575: LD_VAR 0 6
21579: PPUSH
21580: LD_VAR 0 2
21584: PUSH
21585: LD_VAR 0 2
21589: ARRAY
21590: PPUSH
21591: LD_VAR 0 3
21595: PPUSH
21596: CALL_OW 1
21600: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21601: LD_ADDR_VAR 0 7
21605: PUSH
21606: LD_VAR 0 7
21610: PPUSH
21611: LD_VAR 0 7
21615: PPUSH
21616: LD_VAR 0 6
21620: PPUSH
21621: CALL_OW 1
21625: ST_TO_ADDR
// for i = s_arr downto 2 do
21626: LD_ADDR_VAR 0 5
21630: PUSH
21631: DOUBLE
21632: LD_VAR 0 7
21636: INC
21637: ST_TO_ADDR
21638: LD_INT 2
21640: PUSH
21641: FOR_DOWNTO
21642: IFFALSE 21726
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21644: LD_ADDR_VAR 0 6
21648: PUSH
21649: LD_VAR 0 7
21653: PUSH
21654: LD_VAR 0 5
21658: PUSH
21659: LD_INT 1
21661: MINUS
21662: ARRAY
21663: PPUSH
21664: LD_VAR 0 2
21668: PUSH
21669: LD_VAR 0 5
21673: PUSH
21674: LD_INT 1
21676: MINUS
21677: ARRAY
21678: PPUSH
21679: LD_VAR 0 7
21683: PUSH
21684: LD_VAR 0 5
21688: ARRAY
21689: PPUSH
21690: CALL_OW 1
21694: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21695: LD_ADDR_VAR 0 7
21699: PUSH
21700: LD_VAR 0 7
21704: PPUSH
21705: LD_VAR 0 5
21709: PUSH
21710: LD_INT 1
21712: MINUS
21713: PPUSH
21714: LD_VAR 0 6
21718: PPUSH
21719: CALL_OW 1
21723: ST_TO_ADDR
// end ;
21724: GO 21641
21726: POP
21727: POP
// result := s_arr [ 1 ] ;
21728: LD_ADDR_VAR 0 4
21732: PUSH
21733: LD_VAR 0 7
21737: PUSH
21738: LD_INT 1
21740: ARRAY
21741: ST_TO_ADDR
// end ; end ;
21742: LD_VAR 0 4
21746: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21747: LD_INT 0
21749: PPUSH
21750: PPUSH
// if not list then
21751: LD_VAR 0 1
21755: NOT
21756: IFFALSE 21760
// exit ;
21758: GO 21851
// i := list [ pos1 ] ;
21760: LD_ADDR_VAR 0 5
21764: PUSH
21765: LD_VAR 0 1
21769: PUSH
21770: LD_VAR 0 2
21774: ARRAY
21775: ST_TO_ADDR
// if not i then
21776: LD_VAR 0 5
21780: NOT
21781: IFFALSE 21785
// exit ;
21783: GO 21851
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21785: LD_ADDR_VAR 0 1
21789: PUSH
21790: LD_VAR 0 1
21794: PPUSH
21795: LD_VAR 0 2
21799: PPUSH
21800: LD_VAR 0 1
21804: PUSH
21805: LD_VAR 0 3
21809: ARRAY
21810: PPUSH
21811: CALL_OW 1
21815: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21816: LD_ADDR_VAR 0 1
21820: PUSH
21821: LD_VAR 0 1
21825: PPUSH
21826: LD_VAR 0 3
21830: PPUSH
21831: LD_VAR 0 5
21835: PPUSH
21836: CALL_OW 1
21840: ST_TO_ADDR
// result := list ;
21841: LD_ADDR_VAR 0 4
21845: PUSH
21846: LD_VAR 0 1
21850: ST_TO_ADDR
// end ;
21851: LD_VAR 0 4
21855: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21856: LD_INT 0
21858: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21859: LD_ADDR_VAR 0 5
21863: PUSH
21864: LD_VAR 0 1
21868: PPUSH
21869: CALL_OW 250
21873: PPUSH
21874: LD_VAR 0 1
21878: PPUSH
21879: CALL_OW 251
21883: PPUSH
21884: LD_VAR 0 2
21888: PPUSH
21889: LD_VAR 0 3
21893: PPUSH
21894: LD_VAR 0 4
21898: PPUSH
21899: CALL 22277 0 5
21903: ST_TO_ADDR
// end ;
21904: LD_VAR 0 5
21908: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
21909: LD_INT 0
21911: PPUSH
21912: PPUSH
21913: PPUSH
21914: PPUSH
// if not list or not unit then
21915: LD_VAR 0 2
21919: NOT
21920: PUSH
21921: LD_VAR 0 1
21925: NOT
21926: OR
21927: IFFALSE 21931
// exit ;
21929: GO 22272
// result := [ ] ;
21931: LD_ADDR_VAR 0 5
21935: PUSH
21936: EMPTY
21937: ST_TO_ADDR
// for i in list do
21938: LD_ADDR_VAR 0 6
21942: PUSH
21943: LD_VAR 0 2
21947: PUSH
21948: FOR_IN
21949: IFFALSE 22167
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
21951: LD_ADDR_VAR 0 8
21955: PUSH
21956: LD_VAR 0 1
21960: PPUSH
21961: LD_VAR 0 6
21965: PUSH
21966: LD_INT 1
21968: ARRAY
21969: PPUSH
21970: LD_VAR 0 6
21974: PUSH
21975: LD_INT 2
21977: ARRAY
21978: PPUSH
21979: CALL_OW 297
21983: ST_TO_ADDR
// if not Count ( result ) then
21984: LD_VAR 0 5
21988: PPUSH
21989: CALL 18561 0 1
21993: NOT
21994: IFFALSE 22027
// begin result := Join ( result , [ i , tmp ] ) ;
21996: LD_ADDR_VAR 0 5
22000: PUSH
22001: LD_VAR 0 5
22005: PPUSH
22006: LD_VAR 0 6
22010: PUSH
22011: LD_VAR 0 8
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PPUSH
22020: CALL 54161 0 2
22024: ST_TO_ADDR
// continue ;
22025: GO 21948
// end ; if result [ result ] [ 2 ] <= tmp then
22027: LD_VAR 0 5
22031: PUSH
22032: LD_VAR 0 5
22036: ARRAY
22037: PUSH
22038: LD_INT 2
22040: ARRAY
22041: PUSH
22042: LD_VAR 0 8
22046: LESSEQUAL
22047: IFFALSE 22080
// result := Join ( result , [ i , tmp ] ) else
22049: LD_ADDR_VAR 0 5
22053: PUSH
22054: LD_VAR 0 5
22058: PPUSH
22059: LD_VAR 0 6
22063: PUSH
22064: LD_VAR 0 8
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PPUSH
22073: CALL 54161 0 2
22077: ST_TO_ADDR
22078: GO 22165
// begin for j := 1 to Count ( result ) do
22080: LD_ADDR_VAR 0 7
22084: PUSH
22085: DOUBLE
22086: LD_INT 1
22088: DEC
22089: ST_TO_ADDR
22090: LD_VAR 0 5
22094: PPUSH
22095: CALL 18561 0 1
22099: PUSH
22100: FOR_TO
22101: IFFALSE 22163
// begin if tmp < result [ j ] [ 2 ] then
22103: LD_VAR 0 8
22107: PUSH
22108: LD_VAR 0 5
22112: PUSH
22113: LD_VAR 0 7
22117: ARRAY
22118: PUSH
22119: LD_INT 2
22121: ARRAY
22122: LESS
22123: IFFALSE 22161
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22125: LD_ADDR_VAR 0 5
22129: PUSH
22130: LD_VAR 0 5
22134: PPUSH
22135: LD_VAR 0 7
22139: PPUSH
22140: LD_VAR 0 6
22144: PUSH
22145: LD_VAR 0 8
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PPUSH
22154: CALL_OW 2
22158: ST_TO_ADDR
// break ;
22159: GO 22163
// end ; end ;
22161: GO 22100
22163: POP
22164: POP
// end ; end ;
22165: GO 21948
22167: POP
22168: POP
// if result and not asc then
22169: LD_VAR 0 5
22173: PUSH
22174: LD_VAR 0 3
22178: NOT
22179: AND
22180: IFFALSE 22197
// result := ReverseArray ( result ) ;
22182: LD_ADDR_VAR 0 5
22186: PUSH
22187: LD_VAR 0 5
22191: PPUSH
22192: CALL 49437 0 1
22196: ST_TO_ADDR
// tmp := [ ] ;
22197: LD_ADDR_VAR 0 8
22201: PUSH
22202: EMPTY
22203: ST_TO_ADDR
// if mode then
22204: LD_VAR 0 4
22208: IFFALSE 22272
// begin for i := 1 to result do
22210: LD_ADDR_VAR 0 6
22214: PUSH
22215: DOUBLE
22216: LD_INT 1
22218: DEC
22219: ST_TO_ADDR
22220: LD_VAR 0 5
22224: PUSH
22225: FOR_TO
22226: IFFALSE 22260
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
22228: LD_ADDR_VAR 0 8
22232: PUSH
22233: LD_VAR 0 8
22237: PPUSH
22238: LD_VAR 0 5
22242: PUSH
22243: LD_VAR 0 6
22247: ARRAY
22248: PUSH
22249: LD_INT 1
22251: ARRAY
22252: PPUSH
22253: CALL 54161 0 2
22257: ST_TO_ADDR
22258: GO 22225
22260: POP
22261: POP
// result := tmp ;
22262: LD_ADDR_VAR 0 5
22266: PUSH
22267: LD_VAR 0 8
22271: ST_TO_ADDR
// end ; end ;
22272: LD_VAR 0 5
22276: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22277: LD_INT 0
22279: PPUSH
22280: PPUSH
22281: PPUSH
22282: PPUSH
// if not list then
22283: LD_VAR 0 3
22287: NOT
22288: IFFALSE 22292
// exit ;
22290: GO 22680
// result := [ ] ;
22292: LD_ADDR_VAR 0 6
22296: PUSH
22297: EMPTY
22298: ST_TO_ADDR
// for i in list do
22299: LD_ADDR_VAR 0 7
22303: PUSH
22304: LD_VAR 0 3
22308: PUSH
22309: FOR_IN
22310: IFFALSE 22512
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22312: LD_ADDR_VAR 0 9
22316: PUSH
22317: LD_VAR 0 7
22321: PPUSH
22322: LD_VAR 0 1
22326: PPUSH
22327: LD_VAR 0 2
22331: PPUSH
22332: CALL_OW 297
22336: ST_TO_ADDR
// if not result then
22337: LD_VAR 0 6
22341: NOT
22342: IFFALSE 22368
// result := [ [ i , tmp ] ] else
22344: LD_ADDR_VAR 0 6
22348: PUSH
22349: LD_VAR 0 7
22353: PUSH
22354: LD_VAR 0 9
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: EMPTY
22364: LIST
22365: ST_TO_ADDR
22366: GO 22510
// begin if result [ result ] [ 2 ] < tmp then
22368: LD_VAR 0 6
22372: PUSH
22373: LD_VAR 0 6
22377: ARRAY
22378: PUSH
22379: LD_INT 2
22381: ARRAY
22382: PUSH
22383: LD_VAR 0 9
22387: LESS
22388: IFFALSE 22430
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22390: LD_ADDR_VAR 0 6
22394: PUSH
22395: LD_VAR 0 6
22399: PPUSH
22400: LD_VAR 0 6
22404: PUSH
22405: LD_INT 1
22407: PLUS
22408: PPUSH
22409: LD_VAR 0 7
22413: PUSH
22414: LD_VAR 0 9
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PPUSH
22423: CALL_OW 2
22427: ST_TO_ADDR
22428: GO 22510
// for j = 1 to result do
22430: LD_ADDR_VAR 0 8
22434: PUSH
22435: DOUBLE
22436: LD_INT 1
22438: DEC
22439: ST_TO_ADDR
22440: LD_VAR 0 6
22444: PUSH
22445: FOR_TO
22446: IFFALSE 22508
// begin if tmp < result [ j ] [ 2 ] then
22448: LD_VAR 0 9
22452: PUSH
22453: LD_VAR 0 6
22457: PUSH
22458: LD_VAR 0 8
22462: ARRAY
22463: PUSH
22464: LD_INT 2
22466: ARRAY
22467: LESS
22468: IFFALSE 22506
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22470: LD_ADDR_VAR 0 6
22474: PUSH
22475: LD_VAR 0 6
22479: PPUSH
22480: LD_VAR 0 8
22484: PPUSH
22485: LD_VAR 0 7
22489: PUSH
22490: LD_VAR 0 9
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PPUSH
22499: CALL_OW 2
22503: ST_TO_ADDR
// break ;
22504: GO 22508
// end ; end ;
22506: GO 22445
22508: POP
22509: POP
// end ; end ;
22510: GO 22309
22512: POP
22513: POP
// if result and not asc then
22514: LD_VAR 0 6
22518: PUSH
22519: LD_VAR 0 4
22523: NOT
22524: AND
22525: IFFALSE 22600
// begin tmp := result ;
22527: LD_ADDR_VAR 0 9
22531: PUSH
22532: LD_VAR 0 6
22536: ST_TO_ADDR
// for i = tmp downto 1 do
22537: LD_ADDR_VAR 0 7
22541: PUSH
22542: DOUBLE
22543: LD_VAR 0 9
22547: INC
22548: ST_TO_ADDR
22549: LD_INT 1
22551: PUSH
22552: FOR_DOWNTO
22553: IFFALSE 22598
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22555: LD_ADDR_VAR 0 6
22559: PUSH
22560: LD_VAR 0 6
22564: PPUSH
22565: LD_VAR 0 9
22569: PUSH
22570: LD_VAR 0 7
22574: MINUS
22575: PUSH
22576: LD_INT 1
22578: PLUS
22579: PPUSH
22580: LD_VAR 0 9
22584: PUSH
22585: LD_VAR 0 7
22589: ARRAY
22590: PPUSH
22591: CALL_OW 1
22595: ST_TO_ADDR
22596: GO 22552
22598: POP
22599: POP
// end ; tmp := [ ] ;
22600: LD_ADDR_VAR 0 9
22604: PUSH
22605: EMPTY
22606: ST_TO_ADDR
// if mode then
22607: LD_VAR 0 5
22611: IFFALSE 22680
// begin for i = 1 to result do
22613: LD_ADDR_VAR 0 7
22617: PUSH
22618: DOUBLE
22619: LD_INT 1
22621: DEC
22622: ST_TO_ADDR
22623: LD_VAR 0 6
22627: PUSH
22628: FOR_TO
22629: IFFALSE 22668
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22631: LD_ADDR_VAR 0 9
22635: PUSH
22636: LD_VAR 0 9
22640: PPUSH
22641: LD_VAR 0 7
22645: PPUSH
22646: LD_VAR 0 6
22650: PUSH
22651: LD_VAR 0 7
22655: ARRAY
22656: PUSH
22657: LD_INT 1
22659: ARRAY
22660: PPUSH
22661: CALL_OW 1
22665: ST_TO_ADDR
22666: GO 22628
22668: POP
22669: POP
// result := tmp ;
22670: LD_ADDR_VAR 0 6
22674: PUSH
22675: LD_VAR 0 9
22679: ST_TO_ADDR
// end ; end ;
22680: LD_VAR 0 6
22684: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22685: LD_INT 0
22687: PPUSH
22688: PPUSH
22689: PPUSH
22690: PPUSH
22691: PPUSH
22692: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22693: LD_ADDR_VAR 0 5
22697: PUSH
22698: LD_INT 0
22700: PUSH
22701: LD_INT 0
22703: PUSH
22704: LD_INT 0
22706: PUSH
22707: EMPTY
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: ST_TO_ADDR
// if not x or not y then
22715: LD_VAR 0 2
22719: NOT
22720: PUSH
22721: LD_VAR 0 3
22725: NOT
22726: OR
22727: IFFALSE 22731
// exit ;
22729: GO 24381
// if not range then
22731: LD_VAR 0 4
22735: NOT
22736: IFFALSE 22746
// range := 10 ;
22738: LD_ADDR_VAR 0 4
22742: PUSH
22743: LD_INT 10
22745: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22746: LD_ADDR_VAR 0 8
22750: PUSH
22751: LD_INT 81
22753: PUSH
22754: LD_VAR 0 1
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PUSH
22763: LD_INT 92
22765: PUSH
22766: LD_VAR 0 2
22770: PUSH
22771: LD_VAR 0 3
22775: PUSH
22776: LD_VAR 0 4
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: PUSH
22787: LD_INT 3
22789: PUSH
22790: LD_INT 21
22792: PUSH
22793: LD_INT 3
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: LIST
22808: PPUSH
22809: CALL_OW 69
22813: ST_TO_ADDR
// if not tmp then
22814: LD_VAR 0 8
22818: NOT
22819: IFFALSE 22823
// exit ;
22821: GO 24381
// for i in tmp do
22823: LD_ADDR_VAR 0 6
22827: PUSH
22828: LD_VAR 0 8
22832: PUSH
22833: FOR_IN
22834: IFFALSE 24356
// begin points := [ 0 , 0 , 0 ] ;
22836: LD_ADDR_VAR 0 9
22840: PUSH
22841: LD_INT 0
22843: PUSH
22844: LD_INT 0
22846: PUSH
22847: LD_INT 0
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: LIST
22854: ST_TO_ADDR
// bpoints := 1 ;
22855: LD_ADDR_VAR 0 10
22859: PUSH
22860: LD_INT 1
22862: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22863: LD_VAR 0 6
22867: PPUSH
22868: CALL_OW 247
22872: PUSH
22873: LD_INT 1
22875: DOUBLE
22876: EQUAL
22877: IFTRUE 22881
22879: GO 23459
22881: POP
// begin if GetClass ( i ) = 1 then
22882: LD_VAR 0 6
22886: PPUSH
22887: CALL_OW 257
22891: PUSH
22892: LD_INT 1
22894: EQUAL
22895: IFFALSE 22916
// points := [ 10 , 5 , 3 ] ;
22897: LD_ADDR_VAR 0 9
22901: PUSH
22902: LD_INT 10
22904: PUSH
22905: LD_INT 5
22907: PUSH
22908: LD_INT 3
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: LIST
22915: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22916: LD_VAR 0 6
22920: PPUSH
22921: CALL_OW 257
22925: PUSH
22926: LD_INT 2
22928: PUSH
22929: LD_INT 3
22931: PUSH
22932: LD_INT 4
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: LIST
22939: IN
22940: IFFALSE 22961
// points := [ 3 , 2 , 1 ] ;
22942: LD_ADDR_VAR 0 9
22946: PUSH
22947: LD_INT 3
22949: PUSH
22950: LD_INT 2
22952: PUSH
22953: LD_INT 1
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: LIST
22960: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22961: LD_VAR 0 6
22965: PPUSH
22966: CALL_OW 257
22970: PUSH
22971: LD_INT 5
22973: EQUAL
22974: IFFALSE 22995
// points := [ 130 , 5 , 2 ] ;
22976: LD_ADDR_VAR 0 9
22980: PUSH
22981: LD_INT 130
22983: PUSH
22984: LD_INT 5
22986: PUSH
22987: LD_INT 2
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: LIST
22994: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22995: LD_VAR 0 6
22999: PPUSH
23000: CALL_OW 257
23004: PUSH
23005: LD_INT 8
23007: EQUAL
23008: IFFALSE 23029
// points := [ 35 , 35 , 30 ] ;
23010: LD_ADDR_VAR 0 9
23014: PUSH
23015: LD_INT 35
23017: PUSH
23018: LD_INT 35
23020: PUSH
23021: LD_INT 30
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: LIST
23028: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23029: LD_VAR 0 6
23033: PPUSH
23034: CALL_OW 257
23038: PUSH
23039: LD_INT 9
23041: EQUAL
23042: IFFALSE 23063
// points := [ 20 , 55 , 40 ] ;
23044: LD_ADDR_VAR 0 9
23048: PUSH
23049: LD_INT 20
23051: PUSH
23052: LD_INT 55
23054: PUSH
23055: LD_INT 40
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: LIST
23062: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23063: LD_VAR 0 6
23067: PPUSH
23068: CALL_OW 257
23072: PUSH
23073: LD_INT 12
23075: PUSH
23076: LD_INT 16
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: IN
23083: IFFALSE 23104
// points := [ 5 , 3 , 2 ] ;
23085: LD_ADDR_VAR 0 9
23089: PUSH
23090: LD_INT 5
23092: PUSH
23093: LD_INT 3
23095: PUSH
23096: LD_INT 2
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: LIST
23103: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23104: LD_VAR 0 6
23108: PPUSH
23109: CALL_OW 257
23113: PUSH
23114: LD_INT 17
23116: EQUAL
23117: IFFALSE 23138
// points := [ 100 , 50 , 75 ] ;
23119: LD_ADDR_VAR 0 9
23123: PUSH
23124: LD_INT 100
23126: PUSH
23127: LD_INT 50
23129: PUSH
23130: LD_INT 75
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: LIST
23137: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23138: LD_VAR 0 6
23142: PPUSH
23143: CALL_OW 257
23147: PUSH
23148: LD_INT 15
23150: EQUAL
23151: IFFALSE 23172
// points := [ 10 , 5 , 3 ] ;
23153: LD_ADDR_VAR 0 9
23157: PUSH
23158: LD_INT 10
23160: PUSH
23161: LD_INT 5
23163: PUSH
23164: LD_INT 3
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: LIST
23171: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23172: LD_VAR 0 6
23176: PPUSH
23177: CALL_OW 257
23181: PUSH
23182: LD_INT 14
23184: EQUAL
23185: IFFALSE 23206
// points := [ 10 , 0 , 0 ] ;
23187: LD_ADDR_VAR 0 9
23191: PUSH
23192: LD_INT 10
23194: PUSH
23195: LD_INT 0
23197: PUSH
23198: LD_INT 0
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: LIST
23205: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23206: LD_VAR 0 6
23210: PPUSH
23211: CALL_OW 257
23215: PUSH
23216: LD_INT 11
23218: EQUAL
23219: IFFALSE 23240
// points := [ 30 , 10 , 5 ] ;
23221: LD_ADDR_VAR 0 9
23225: PUSH
23226: LD_INT 30
23228: PUSH
23229: LD_INT 10
23231: PUSH
23232: LD_INT 5
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: LIST
23239: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23240: LD_VAR 0 1
23244: PPUSH
23245: LD_INT 5
23247: PPUSH
23248: CALL_OW 321
23252: PUSH
23253: LD_INT 2
23255: EQUAL
23256: IFFALSE 23273
// bpoints := bpoints * 1.8 ;
23258: LD_ADDR_VAR 0 10
23262: PUSH
23263: LD_VAR 0 10
23267: PUSH
23268: LD_REAL  1.80000000000000E+0000
23271: MUL
23272: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23273: LD_VAR 0 6
23277: PPUSH
23278: CALL_OW 257
23282: PUSH
23283: LD_INT 1
23285: PUSH
23286: LD_INT 2
23288: PUSH
23289: LD_INT 3
23291: PUSH
23292: LD_INT 4
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: IN
23301: PUSH
23302: LD_VAR 0 1
23306: PPUSH
23307: LD_INT 51
23309: PPUSH
23310: CALL_OW 321
23314: PUSH
23315: LD_INT 2
23317: EQUAL
23318: AND
23319: IFFALSE 23336
// bpoints := bpoints * 1.2 ;
23321: LD_ADDR_VAR 0 10
23325: PUSH
23326: LD_VAR 0 10
23330: PUSH
23331: LD_REAL  1.20000000000000E+0000
23334: MUL
23335: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23336: LD_VAR 0 6
23340: PPUSH
23341: CALL_OW 257
23345: PUSH
23346: LD_INT 5
23348: PUSH
23349: LD_INT 7
23351: PUSH
23352: LD_INT 9
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: LIST
23359: IN
23360: PUSH
23361: LD_VAR 0 1
23365: PPUSH
23366: LD_INT 52
23368: PPUSH
23369: CALL_OW 321
23373: PUSH
23374: LD_INT 2
23376: EQUAL
23377: AND
23378: IFFALSE 23395
// bpoints := bpoints * 1.5 ;
23380: LD_ADDR_VAR 0 10
23384: PUSH
23385: LD_VAR 0 10
23389: PUSH
23390: LD_REAL  1.50000000000000E+0000
23393: MUL
23394: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23395: LD_VAR 0 1
23399: PPUSH
23400: LD_INT 66
23402: PPUSH
23403: CALL_OW 321
23407: PUSH
23408: LD_INT 2
23410: EQUAL
23411: IFFALSE 23428
// bpoints := bpoints * 1.1 ;
23413: LD_ADDR_VAR 0 10
23417: PUSH
23418: LD_VAR 0 10
23422: PUSH
23423: LD_REAL  1.10000000000000E+0000
23426: MUL
23427: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23428: LD_ADDR_VAR 0 10
23432: PUSH
23433: LD_VAR 0 10
23437: PUSH
23438: LD_VAR 0 6
23442: PPUSH
23443: LD_INT 1
23445: PPUSH
23446: CALL_OW 259
23450: PUSH
23451: LD_REAL  1.15000000000000E+0000
23454: MUL
23455: MUL
23456: ST_TO_ADDR
// end ; unit_vehicle :
23457: GO 24285
23459: LD_INT 2
23461: DOUBLE
23462: EQUAL
23463: IFTRUE 23467
23465: GO 24273
23467: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23468: LD_VAR 0 6
23472: PPUSH
23473: CALL_OW 264
23477: PUSH
23478: LD_INT 2
23480: PUSH
23481: LD_INT 42
23483: PUSH
23484: LD_INT 24
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: LIST
23491: IN
23492: IFFALSE 23513
// points := [ 25 , 5 , 3 ] ;
23494: LD_ADDR_VAR 0 9
23498: PUSH
23499: LD_INT 25
23501: PUSH
23502: LD_INT 5
23504: PUSH
23505: LD_INT 3
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: LIST
23512: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23513: LD_VAR 0 6
23517: PPUSH
23518: CALL_OW 264
23522: PUSH
23523: LD_INT 4
23525: PUSH
23526: LD_INT 43
23528: PUSH
23529: LD_INT 25
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: LIST
23536: IN
23537: IFFALSE 23558
// points := [ 40 , 15 , 5 ] ;
23539: LD_ADDR_VAR 0 9
23543: PUSH
23544: LD_INT 40
23546: PUSH
23547: LD_INT 15
23549: PUSH
23550: LD_INT 5
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: LIST
23557: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23558: LD_VAR 0 6
23562: PPUSH
23563: CALL_OW 264
23567: PUSH
23568: LD_INT 3
23570: PUSH
23571: LD_INT 23
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: IN
23578: IFFALSE 23599
// points := [ 7 , 25 , 8 ] ;
23580: LD_ADDR_VAR 0 9
23584: PUSH
23585: LD_INT 7
23587: PUSH
23588: LD_INT 25
23590: PUSH
23591: LD_INT 8
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: LIST
23598: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23599: LD_VAR 0 6
23603: PPUSH
23604: CALL_OW 264
23608: PUSH
23609: LD_INT 5
23611: PUSH
23612: LD_INT 27
23614: PUSH
23615: LD_INT 44
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: LIST
23622: IN
23623: IFFALSE 23644
// points := [ 14 , 50 , 16 ] ;
23625: LD_ADDR_VAR 0 9
23629: PUSH
23630: LD_INT 14
23632: PUSH
23633: LD_INT 50
23635: PUSH
23636: LD_INT 16
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: LIST
23643: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23644: LD_VAR 0 6
23648: PPUSH
23649: CALL_OW 264
23653: PUSH
23654: LD_INT 6
23656: PUSH
23657: LD_INT 46
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: IN
23664: IFFALSE 23685
// points := [ 32 , 120 , 70 ] ;
23666: LD_ADDR_VAR 0 9
23670: PUSH
23671: LD_INT 32
23673: PUSH
23674: LD_INT 120
23676: PUSH
23677: LD_INT 70
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: LIST
23684: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23685: LD_VAR 0 6
23689: PPUSH
23690: CALL_OW 264
23694: PUSH
23695: LD_INT 7
23697: PUSH
23698: LD_INT 28
23700: PUSH
23701: LD_INT 45
23703: PUSH
23704: LD_INT 92
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: IN
23713: IFFALSE 23734
// points := [ 35 , 20 , 45 ] ;
23715: LD_ADDR_VAR 0 9
23719: PUSH
23720: LD_INT 35
23722: PUSH
23723: LD_INT 20
23725: PUSH
23726: LD_INT 45
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: LIST
23733: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23734: LD_VAR 0 6
23738: PPUSH
23739: CALL_OW 264
23743: PUSH
23744: LD_INT 47
23746: PUSH
23747: EMPTY
23748: LIST
23749: IN
23750: IFFALSE 23771
// points := [ 67 , 45 , 75 ] ;
23752: LD_ADDR_VAR 0 9
23756: PUSH
23757: LD_INT 67
23759: PUSH
23760: LD_INT 45
23762: PUSH
23763: LD_INT 75
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: LIST
23770: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23771: LD_VAR 0 6
23775: PPUSH
23776: CALL_OW 264
23780: PUSH
23781: LD_INT 26
23783: PUSH
23784: EMPTY
23785: LIST
23786: IN
23787: IFFALSE 23808
// points := [ 120 , 30 , 80 ] ;
23789: LD_ADDR_VAR 0 9
23793: PUSH
23794: LD_INT 120
23796: PUSH
23797: LD_INT 30
23799: PUSH
23800: LD_INT 80
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: LIST
23807: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23808: LD_VAR 0 6
23812: PPUSH
23813: CALL_OW 264
23817: PUSH
23818: LD_INT 22
23820: PUSH
23821: EMPTY
23822: LIST
23823: IN
23824: IFFALSE 23845
// points := [ 40 , 1 , 1 ] ;
23826: LD_ADDR_VAR 0 9
23830: PUSH
23831: LD_INT 40
23833: PUSH
23834: LD_INT 1
23836: PUSH
23837: LD_INT 1
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: LIST
23844: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23845: LD_VAR 0 6
23849: PPUSH
23850: CALL_OW 264
23854: PUSH
23855: LD_INT 29
23857: PUSH
23858: EMPTY
23859: LIST
23860: IN
23861: IFFALSE 23882
// points := [ 70 , 200 , 400 ] ;
23863: LD_ADDR_VAR 0 9
23867: PUSH
23868: LD_INT 70
23870: PUSH
23871: LD_INT 200
23873: PUSH
23874: LD_INT 400
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: LIST
23881: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23882: LD_VAR 0 6
23886: PPUSH
23887: CALL_OW 264
23891: PUSH
23892: LD_INT 14
23894: PUSH
23895: LD_INT 53
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: IN
23902: IFFALSE 23923
// points := [ 40 , 10 , 20 ] ;
23904: LD_ADDR_VAR 0 9
23908: PUSH
23909: LD_INT 40
23911: PUSH
23912: LD_INT 10
23914: PUSH
23915: LD_INT 20
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: LIST
23922: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23923: LD_VAR 0 6
23927: PPUSH
23928: CALL_OW 264
23932: PUSH
23933: LD_INT 9
23935: PUSH
23936: EMPTY
23937: LIST
23938: IN
23939: IFFALSE 23960
// points := [ 5 , 70 , 20 ] ;
23941: LD_ADDR_VAR 0 9
23945: PUSH
23946: LD_INT 5
23948: PUSH
23949: LD_INT 70
23951: PUSH
23952: LD_INT 20
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: LIST
23959: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23960: LD_VAR 0 6
23964: PPUSH
23965: CALL_OW 264
23969: PUSH
23970: LD_INT 10
23972: PUSH
23973: EMPTY
23974: LIST
23975: IN
23976: IFFALSE 23997
// points := [ 35 , 110 , 70 ] ;
23978: LD_ADDR_VAR 0 9
23982: PUSH
23983: LD_INT 35
23985: PUSH
23986: LD_INT 110
23988: PUSH
23989: LD_INT 70
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: LIST
23996: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23997: LD_VAR 0 6
24001: PPUSH
24002: CALL_OW 265
24006: PUSH
24007: LD_INT 25
24009: EQUAL
24010: IFFALSE 24031
// points := [ 80 , 65 , 100 ] ;
24012: LD_ADDR_VAR 0 9
24016: PUSH
24017: LD_INT 80
24019: PUSH
24020: LD_INT 65
24022: PUSH
24023: LD_INT 100
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: LIST
24030: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24031: LD_VAR 0 6
24035: PPUSH
24036: CALL_OW 263
24040: PUSH
24041: LD_INT 1
24043: EQUAL
24044: IFFALSE 24079
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24046: LD_ADDR_VAR 0 10
24050: PUSH
24051: LD_VAR 0 10
24055: PUSH
24056: LD_VAR 0 6
24060: PPUSH
24061: CALL_OW 311
24065: PPUSH
24066: LD_INT 3
24068: PPUSH
24069: CALL_OW 259
24073: PUSH
24074: LD_INT 4
24076: MUL
24077: MUL
24078: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24079: LD_VAR 0 6
24083: PPUSH
24084: CALL_OW 263
24088: PUSH
24089: LD_INT 2
24091: EQUAL
24092: IFFALSE 24143
// begin j := IsControledBy ( i ) ;
24094: LD_ADDR_VAR 0 7
24098: PUSH
24099: LD_VAR 0 6
24103: PPUSH
24104: CALL_OW 312
24108: ST_TO_ADDR
// if j then
24109: LD_VAR 0 7
24113: IFFALSE 24143
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24115: LD_ADDR_VAR 0 10
24119: PUSH
24120: LD_VAR 0 10
24124: PUSH
24125: LD_VAR 0 7
24129: PPUSH
24130: LD_INT 3
24132: PPUSH
24133: CALL_OW 259
24137: PUSH
24138: LD_INT 3
24140: MUL
24141: MUL
24142: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24143: LD_VAR 0 6
24147: PPUSH
24148: CALL_OW 264
24152: PUSH
24153: LD_INT 5
24155: PUSH
24156: LD_INT 6
24158: PUSH
24159: LD_INT 46
24161: PUSH
24162: LD_INT 44
24164: PUSH
24165: LD_INT 47
24167: PUSH
24168: LD_INT 45
24170: PUSH
24171: LD_INT 28
24173: PUSH
24174: LD_INT 7
24176: PUSH
24177: LD_INT 27
24179: PUSH
24180: LD_INT 29
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: IN
24195: PUSH
24196: LD_VAR 0 1
24200: PPUSH
24201: LD_INT 52
24203: PPUSH
24204: CALL_OW 321
24208: PUSH
24209: LD_INT 2
24211: EQUAL
24212: AND
24213: IFFALSE 24230
// bpoints := bpoints * 1.2 ;
24215: LD_ADDR_VAR 0 10
24219: PUSH
24220: LD_VAR 0 10
24224: PUSH
24225: LD_REAL  1.20000000000000E+0000
24228: MUL
24229: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24230: LD_VAR 0 6
24234: PPUSH
24235: CALL_OW 264
24239: PUSH
24240: LD_INT 6
24242: PUSH
24243: LD_INT 46
24245: PUSH
24246: LD_INT 47
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: LIST
24253: IN
24254: IFFALSE 24271
// bpoints := bpoints * 1.2 ;
24256: LD_ADDR_VAR 0 10
24260: PUSH
24261: LD_VAR 0 10
24265: PUSH
24266: LD_REAL  1.20000000000000E+0000
24269: MUL
24270: ST_TO_ADDR
// end ; unit_building :
24271: GO 24285
24273: LD_INT 3
24275: DOUBLE
24276: EQUAL
24277: IFTRUE 24281
24279: GO 24284
24281: POP
// ; end ;
24282: GO 24285
24284: POP
// for j = 1 to 3 do
24285: LD_ADDR_VAR 0 7
24289: PUSH
24290: DOUBLE
24291: LD_INT 1
24293: DEC
24294: ST_TO_ADDR
24295: LD_INT 3
24297: PUSH
24298: FOR_TO
24299: IFFALSE 24352
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24301: LD_ADDR_VAR 0 5
24305: PUSH
24306: LD_VAR 0 5
24310: PPUSH
24311: LD_VAR 0 7
24315: PPUSH
24316: LD_VAR 0 5
24320: PUSH
24321: LD_VAR 0 7
24325: ARRAY
24326: PUSH
24327: LD_VAR 0 9
24331: PUSH
24332: LD_VAR 0 7
24336: ARRAY
24337: PUSH
24338: LD_VAR 0 10
24342: MUL
24343: PLUS
24344: PPUSH
24345: CALL_OW 1
24349: ST_TO_ADDR
24350: GO 24298
24352: POP
24353: POP
// end ;
24354: GO 22833
24356: POP
24357: POP
// result := Replace ( result , 4 , tmp ) ;
24358: LD_ADDR_VAR 0 5
24362: PUSH
24363: LD_VAR 0 5
24367: PPUSH
24368: LD_INT 4
24370: PPUSH
24371: LD_VAR 0 8
24375: PPUSH
24376: CALL_OW 1
24380: ST_TO_ADDR
// end ;
24381: LD_VAR 0 5
24385: RET
// export function DangerAtRange ( unit , range ) ; begin
24386: LD_INT 0
24388: PPUSH
// if not unit then
24389: LD_VAR 0 1
24393: NOT
24394: IFFALSE 24398
// exit ;
24396: GO 24443
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24398: LD_ADDR_VAR 0 3
24402: PUSH
24403: LD_VAR 0 1
24407: PPUSH
24408: CALL_OW 255
24412: PPUSH
24413: LD_VAR 0 1
24417: PPUSH
24418: CALL_OW 250
24422: PPUSH
24423: LD_VAR 0 1
24427: PPUSH
24428: CALL_OW 251
24432: PPUSH
24433: LD_VAR 0 2
24437: PPUSH
24438: CALL 22685 0 4
24442: ST_TO_ADDR
// end ;
24443: LD_VAR 0 3
24447: RET
// export function DangerInArea ( side , area ) ; begin
24448: LD_INT 0
24450: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24451: LD_ADDR_VAR 0 3
24455: PUSH
24456: LD_VAR 0 2
24460: PPUSH
24461: LD_INT 81
24463: PUSH
24464: LD_VAR 0 1
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PPUSH
24473: CALL_OW 70
24477: ST_TO_ADDR
// end ;
24478: LD_VAR 0 3
24482: RET
// export function IsExtension ( b ) ; begin
24483: LD_INT 0
24485: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24486: LD_ADDR_VAR 0 2
24490: PUSH
24491: LD_VAR 0 1
24495: PUSH
24496: LD_INT 23
24498: PUSH
24499: LD_INT 20
24501: PUSH
24502: LD_INT 22
24504: PUSH
24505: LD_INT 17
24507: PUSH
24508: LD_INT 24
24510: PUSH
24511: LD_INT 21
24513: PUSH
24514: LD_INT 19
24516: PUSH
24517: LD_INT 16
24519: PUSH
24520: LD_INT 25
24522: PUSH
24523: LD_INT 18
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: IN
24538: ST_TO_ADDR
// end ;
24539: LD_VAR 0 2
24543: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
24544: LD_INT 0
24546: PPUSH
24547: PPUSH
24548: PPUSH
// result := [ ] ;
24549: LD_ADDR_VAR 0 4
24553: PUSH
24554: EMPTY
24555: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24556: LD_ADDR_VAR 0 5
24560: PUSH
24561: LD_VAR 0 2
24565: PPUSH
24566: LD_INT 21
24568: PUSH
24569: LD_INT 3
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: PPUSH
24576: CALL_OW 70
24580: ST_TO_ADDR
// if not tmp then
24581: LD_VAR 0 5
24585: NOT
24586: IFFALSE 24590
// exit ;
24588: GO 24654
// if checkLink then
24590: LD_VAR 0 3
24594: IFFALSE 24644
// begin for i in tmp do
24596: LD_ADDR_VAR 0 6
24600: PUSH
24601: LD_VAR 0 5
24605: PUSH
24606: FOR_IN
24607: IFFALSE 24642
// if GetBase ( i ) <> base then
24609: LD_VAR 0 6
24613: PPUSH
24614: CALL_OW 274
24618: PUSH
24619: LD_VAR 0 1
24623: NONEQUAL
24624: IFFALSE 24640
// ComLinkToBase ( base , i ) ;
24626: LD_VAR 0 1
24630: PPUSH
24631: LD_VAR 0 6
24635: PPUSH
24636: CALL_OW 169
24640: GO 24606
24642: POP
24643: POP
// end ; result := tmp ;
24644: LD_ADDR_VAR 0 4
24648: PUSH
24649: LD_VAR 0 5
24653: ST_TO_ADDR
// end ;
24654: LD_VAR 0 4
24658: RET
// export function ComComplete ( units , b ) ; var i ; begin
24659: LD_INT 0
24661: PPUSH
24662: PPUSH
// if not units then
24663: LD_VAR 0 1
24667: NOT
24668: IFFALSE 24672
// exit ;
24670: GO 24762
// for i in units do
24672: LD_ADDR_VAR 0 4
24676: PUSH
24677: LD_VAR 0 1
24681: PUSH
24682: FOR_IN
24683: IFFALSE 24760
// if BuildingStatus ( b ) = bs_build then
24685: LD_VAR 0 2
24689: PPUSH
24690: CALL_OW 461
24694: PUSH
24695: LD_INT 1
24697: EQUAL
24698: IFFALSE 24758
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24700: LD_VAR 0 4
24704: PPUSH
24705: LD_STRING h
24707: PUSH
24708: LD_VAR 0 2
24712: PPUSH
24713: CALL_OW 250
24717: PUSH
24718: LD_VAR 0 2
24722: PPUSH
24723: CALL_OW 251
24727: PUSH
24728: LD_VAR 0 2
24732: PUSH
24733: LD_INT 0
24735: PUSH
24736: LD_INT 0
24738: PUSH
24739: LD_INT 0
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: PUSH
24751: EMPTY
24752: LIST
24753: PPUSH
24754: CALL_OW 446
24758: GO 24682
24760: POP
24761: POP
// end ;
24762: LD_VAR 0 3
24766: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24767: LD_INT 0
24769: PPUSH
24770: PPUSH
24771: PPUSH
24772: PPUSH
24773: PPUSH
24774: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24775: LD_VAR 0 1
24779: NOT
24780: PUSH
24781: LD_VAR 0 1
24785: PPUSH
24786: CALL_OW 263
24790: PUSH
24791: LD_INT 2
24793: NONEQUAL
24794: OR
24795: IFFALSE 24799
// exit ;
24797: GO 25115
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24799: LD_ADDR_VAR 0 6
24803: PUSH
24804: LD_INT 22
24806: PUSH
24807: LD_VAR 0 1
24811: PPUSH
24812: CALL_OW 255
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: LD_INT 2
24823: PUSH
24824: LD_INT 30
24826: PUSH
24827: LD_INT 36
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PUSH
24834: LD_INT 34
24836: PUSH
24837: LD_INT 31
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: LIST
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PPUSH
24853: CALL_OW 69
24857: ST_TO_ADDR
// if not tmp then
24858: LD_VAR 0 6
24862: NOT
24863: IFFALSE 24867
// exit ;
24865: GO 25115
// result := [ ] ;
24867: LD_ADDR_VAR 0 2
24871: PUSH
24872: EMPTY
24873: ST_TO_ADDR
// for i in tmp do
24874: LD_ADDR_VAR 0 3
24878: PUSH
24879: LD_VAR 0 6
24883: PUSH
24884: FOR_IN
24885: IFFALSE 24956
// begin t := UnitsInside ( i ) ;
24887: LD_ADDR_VAR 0 4
24891: PUSH
24892: LD_VAR 0 3
24896: PPUSH
24897: CALL_OW 313
24901: ST_TO_ADDR
// if t then
24902: LD_VAR 0 4
24906: IFFALSE 24954
// for j in t do
24908: LD_ADDR_VAR 0 7
24912: PUSH
24913: LD_VAR 0 4
24917: PUSH
24918: FOR_IN
24919: IFFALSE 24952
// result := Replace ( result , result + 1 , j ) ;
24921: LD_ADDR_VAR 0 2
24925: PUSH
24926: LD_VAR 0 2
24930: PPUSH
24931: LD_VAR 0 2
24935: PUSH
24936: LD_INT 1
24938: PLUS
24939: PPUSH
24940: LD_VAR 0 7
24944: PPUSH
24945: CALL_OW 1
24949: ST_TO_ADDR
24950: GO 24918
24952: POP
24953: POP
// end ;
24954: GO 24884
24956: POP
24957: POP
// if not result then
24958: LD_VAR 0 2
24962: NOT
24963: IFFALSE 24967
// exit ;
24965: GO 25115
// mech := result [ 1 ] ;
24967: LD_ADDR_VAR 0 5
24971: PUSH
24972: LD_VAR 0 2
24976: PUSH
24977: LD_INT 1
24979: ARRAY
24980: ST_TO_ADDR
// if result > 1 then
24981: LD_VAR 0 2
24985: PUSH
24986: LD_INT 1
24988: GREATER
24989: IFFALSE 25101
// begin for i = 2 to result do
24991: LD_ADDR_VAR 0 3
24995: PUSH
24996: DOUBLE
24997: LD_INT 2
24999: DEC
25000: ST_TO_ADDR
25001: LD_VAR 0 2
25005: PUSH
25006: FOR_TO
25007: IFFALSE 25099
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25009: LD_ADDR_VAR 0 4
25013: PUSH
25014: LD_VAR 0 2
25018: PUSH
25019: LD_VAR 0 3
25023: ARRAY
25024: PPUSH
25025: LD_INT 3
25027: PPUSH
25028: CALL_OW 259
25032: PUSH
25033: LD_VAR 0 2
25037: PUSH
25038: LD_VAR 0 3
25042: ARRAY
25043: PPUSH
25044: CALL_OW 432
25048: MINUS
25049: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25050: LD_VAR 0 4
25054: PUSH
25055: LD_VAR 0 5
25059: PPUSH
25060: LD_INT 3
25062: PPUSH
25063: CALL_OW 259
25067: PUSH
25068: LD_VAR 0 5
25072: PPUSH
25073: CALL_OW 432
25077: MINUS
25078: GREATEREQUAL
25079: IFFALSE 25097
// mech := result [ i ] ;
25081: LD_ADDR_VAR 0 5
25085: PUSH
25086: LD_VAR 0 2
25090: PUSH
25091: LD_VAR 0 3
25095: ARRAY
25096: ST_TO_ADDR
// end ;
25097: GO 25006
25099: POP
25100: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25101: LD_VAR 0 1
25105: PPUSH
25106: LD_VAR 0 5
25110: PPUSH
25111: CALL_OW 135
// end ;
25115: LD_VAR 0 2
25119: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25120: LD_INT 0
25122: PPUSH
25123: PPUSH
25124: PPUSH
25125: PPUSH
25126: PPUSH
25127: PPUSH
25128: PPUSH
25129: PPUSH
25130: PPUSH
25131: PPUSH
25132: PPUSH
25133: PPUSH
25134: PPUSH
// result := [ ] ;
25135: LD_ADDR_VAR 0 7
25139: PUSH
25140: EMPTY
25141: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25142: LD_VAR 0 1
25146: PPUSH
25147: CALL_OW 266
25151: PUSH
25152: LD_INT 0
25154: PUSH
25155: LD_INT 1
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: IN
25162: NOT
25163: IFFALSE 25167
// exit ;
25165: GO 26801
// if name then
25167: LD_VAR 0 3
25171: IFFALSE 25187
// SetBName ( base_dep , name ) ;
25173: LD_VAR 0 1
25177: PPUSH
25178: LD_VAR 0 3
25182: PPUSH
25183: CALL_OW 500
// base := GetBase ( base_dep ) ;
25187: LD_ADDR_VAR 0 15
25191: PUSH
25192: LD_VAR 0 1
25196: PPUSH
25197: CALL_OW 274
25201: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25202: LD_ADDR_VAR 0 16
25206: PUSH
25207: LD_VAR 0 1
25211: PPUSH
25212: CALL_OW 255
25216: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25217: LD_ADDR_VAR 0 17
25221: PUSH
25222: LD_VAR 0 1
25226: PPUSH
25227: CALL_OW 248
25231: ST_TO_ADDR
// if sources then
25232: LD_VAR 0 5
25236: IFFALSE 25283
// for i = 1 to 3 do
25238: LD_ADDR_VAR 0 8
25242: PUSH
25243: DOUBLE
25244: LD_INT 1
25246: DEC
25247: ST_TO_ADDR
25248: LD_INT 3
25250: PUSH
25251: FOR_TO
25252: IFFALSE 25281
// AddResourceType ( base , i , sources [ i ] ) ;
25254: LD_VAR 0 15
25258: PPUSH
25259: LD_VAR 0 8
25263: PPUSH
25264: LD_VAR 0 5
25268: PUSH
25269: LD_VAR 0 8
25273: ARRAY
25274: PPUSH
25275: CALL_OW 276
25279: GO 25251
25281: POP
25282: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25283: LD_ADDR_VAR 0 18
25287: PUSH
25288: LD_VAR 0 15
25292: PPUSH
25293: LD_VAR 0 2
25297: PPUSH
25298: LD_INT 1
25300: PPUSH
25301: CALL 24544 0 3
25305: ST_TO_ADDR
// InitHc ;
25306: CALL_OW 19
// InitUc ;
25310: CALL_OW 18
// uc_side := side ;
25314: LD_ADDR_OWVAR 20
25318: PUSH
25319: LD_VAR 0 16
25323: ST_TO_ADDR
// uc_nation := nation ;
25324: LD_ADDR_OWVAR 21
25328: PUSH
25329: LD_VAR 0 17
25333: ST_TO_ADDR
// if buildings then
25334: LD_VAR 0 18
25338: IFFALSE 26660
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25340: LD_ADDR_VAR 0 19
25344: PUSH
25345: LD_VAR 0 18
25349: PPUSH
25350: LD_INT 2
25352: PUSH
25353: LD_INT 30
25355: PUSH
25356: LD_INT 29
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 30
25365: PUSH
25366: LD_INT 30
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: LIST
25377: PPUSH
25378: CALL_OW 72
25382: ST_TO_ADDR
// if tmp then
25383: LD_VAR 0 19
25387: IFFALSE 25435
// for i in tmp do
25389: LD_ADDR_VAR 0 8
25393: PUSH
25394: LD_VAR 0 19
25398: PUSH
25399: FOR_IN
25400: IFFALSE 25433
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25402: LD_VAR 0 8
25406: PPUSH
25407: CALL_OW 250
25411: PPUSH
25412: LD_VAR 0 8
25416: PPUSH
25417: CALL_OW 251
25421: PPUSH
25422: LD_VAR 0 16
25426: PPUSH
25427: CALL_OW 441
25431: GO 25399
25433: POP
25434: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25435: LD_VAR 0 18
25439: PPUSH
25440: LD_INT 2
25442: PUSH
25443: LD_INT 30
25445: PUSH
25446: LD_INT 32
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 30
25455: PUSH
25456: LD_INT 33
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: LIST
25467: PPUSH
25468: CALL_OW 72
25472: IFFALSE 25560
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25474: LD_ADDR_VAR 0 8
25478: PUSH
25479: LD_VAR 0 18
25483: PPUSH
25484: LD_INT 2
25486: PUSH
25487: LD_INT 30
25489: PUSH
25490: LD_INT 32
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: LD_INT 30
25499: PUSH
25500: LD_INT 33
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: LIST
25511: PPUSH
25512: CALL_OW 72
25516: PUSH
25517: FOR_IN
25518: IFFALSE 25558
// begin if not GetBWeapon ( i ) then
25520: LD_VAR 0 8
25524: PPUSH
25525: CALL_OW 269
25529: NOT
25530: IFFALSE 25556
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25532: LD_VAR 0 8
25536: PPUSH
25537: LD_VAR 0 8
25541: PPUSH
25542: LD_VAR 0 2
25546: PPUSH
25547: CALL 26806 0 2
25551: PPUSH
25552: CALL_OW 431
// end ;
25556: GO 25517
25558: POP
25559: POP
// end ; for i = 1 to personel do
25560: LD_ADDR_VAR 0 8
25564: PUSH
25565: DOUBLE
25566: LD_INT 1
25568: DEC
25569: ST_TO_ADDR
25570: LD_VAR 0 6
25574: PUSH
25575: FOR_TO
25576: IFFALSE 26640
// begin if i > 4 then
25578: LD_VAR 0 8
25582: PUSH
25583: LD_INT 4
25585: GREATER
25586: IFFALSE 25590
// break ;
25588: GO 26640
// case i of 1 :
25590: LD_VAR 0 8
25594: PUSH
25595: LD_INT 1
25597: DOUBLE
25598: EQUAL
25599: IFTRUE 25603
25601: GO 25683
25603: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25604: LD_ADDR_VAR 0 12
25608: PUSH
25609: LD_VAR 0 18
25613: PPUSH
25614: LD_INT 22
25616: PUSH
25617: LD_VAR 0 16
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 58
25628: PUSH
25629: EMPTY
25630: LIST
25631: PUSH
25632: LD_INT 2
25634: PUSH
25635: LD_INT 30
25637: PUSH
25638: LD_INT 32
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: LD_INT 30
25647: PUSH
25648: LD_INT 4
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 30
25657: PUSH
25658: LD_INT 5
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: LIST
25675: PPUSH
25676: CALL_OW 72
25680: ST_TO_ADDR
25681: GO 25905
25683: LD_INT 2
25685: DOUBLE
25686: EQUAL
25687: IFTRUE 25691
25689: GO 25753
25691: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25692: LD_ADDR_VAR 0 12
25696: PUSH
25697: LD_VAR 0 18
25701: PPUSH
25702: LD_INT 22
25704: PUSH
25705: LD_VAR 0 16
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 2
25716: PUSH
25717: LD_INT 30
25719: PUSH
25720: LD_INT 0
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 30
25729: PUSH
25730: LD_INT 1
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: LIST
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PPUSH
25746: CALL_OW 72
25750: ST_TO_ADDR
25751: GO 25905
25753: LD_INT 3
25755: DOUBLE
25756: EQUAL
25757: IFTRUE 25761
25759: GO 25823
25761: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25762: LD_ADDR_VAR 0 12
25766: PUSH
25767: LD_VAR 0 18
25771: PPUSH
25772: LD_INT 22
25774: PUSH
25775: LD_VAR 0 16
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 2
25786: PUSH
25787: LD_INT 30
25789: PUSH
25790: LD_INT 2
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 30
25799: PUSH
25800: LD_INT 3
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: LIST
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PPUSH
25816: CALL_OW 72
25820: ST_TO_ADDR
25821: GO 25905
25823: LD_INT 4
25825: DOUBLE
25826: EQUAL
25827: IFTRUE 25831
25829: GO 25904
25831: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25832: LD_ADDR_VAR 0 12
25836: PUSH
25837: LD_VAR 0 18
25841: PPUSH
25842: LD_INT 22
25844: PUSH
25845: LD_VAR 0 16
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: LD_INT 2
25856: PUSH
25857: LD_INT 30
25859: PUSH
25860: LD_INT 6
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 30
25869: PUSH
25870: LD_INT 7
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: LD_INT 30
25879: PUSH
25880: LD_INT 8
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PPUSH
25897: CALL_OW 72
25901: ST_TO_ADDR
25902: GO 25905
25904: POP
// if i = 1 then
25905: LD_VAR 0 8
25909: PUSH
25910: LD_INT 1
25912: EQUAL
25913: IFFALSE 26024
// begin tmp := [ ] ;
25915: LD_ADDR_VAR 0 19
25919: PUSH
25920: EMPTY
25921: ST_TO_ADDR
// for j in f do
25922: LD_ADDR_VAR 0 9
25926: PUSH
25927: LD_VAR 0 12
25931: PUSH
25932: FOR_IN
25933: IFFALSE 26006
// if GetBType ( j ) = b_bunker then
25935: LD_VAR 0 9
25939: PPUSH
25940: CALL_OW 266
25944: PUSH
25945: LD_INT 32
25947: EQUAL
25948: IFFALSE 25975
// tmp := Insert ( tmp , 1 , j ) else
25950: LD_ADDR_VAR 0 19
25954: PUSH
25955: LD_VAR 0 19
25959: PPUSH
25960: LD_INT 1
25962: PPUSH
25963: LD_VAR 0 9
25967: PPUSH
25968: CALL_OW 2
25972: ST_TO_ADDR
25973: GO 26004
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25975: LD_ADDR_VAR 0 19
25979: PUSH
25980: LD_VAR 0 19
25984: PPUSH
25985: LD_VAR 0 19
25989: PUSH
25990: LD_INT 1
25992: PLUS
25993: PPUSH
25994: LD_VAR 0 9
25998: PPUSH
25999: CALL_OW 2
26003: ST_TO_ADDR
26004: GO 25932
26006: POP
26007: POP
// if tmp then
26008: LD_VAR 0 19
26012: IFFALSE 26024
// f := tmp ;
26014: LD_ADDR_VAR 0 12
26018: PUSH
26019: LD_VAR 0 19
26023: ST_TO_ADDR
// end ; x := personel [ i ] ;
26024: LD_ADDR_VAR 0 13
26028: PUSH
26029: LD_VAR 0 6
26033: PUSH
26034: LD_VAR 0 8
26038: ARRAY
26039: ST_TO_ADDR
// if x = - 1 then
26040: LD_VAR 0 13
26044: PUSH
26045: LD_INT 1
26047: NEG
26048: EQUAL
26049: IFFALSE 26258
// begin for j in f do
26051: LD_ADDR_VAR 0 9
26055: PUSH
26056: LD_VAR 0 12
26060: PUSH
26061: FOR_IN
26062: IFFALSE 26254
// repeat InitHc ;
26064: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26068: LD_VAR 0 9
26072: PPUSH
26073: CALL_OW 266
26077: PUSH
26078: LD_INT 5
26080: EQUAL
26081: IFFALSE 26151
// begin if UnitsInside ( j ) < 3 then
26083: LD_VAR 0 9
26087: PPUSH
26088: CALL_OW 313
26092: PUSH
26093: LD_INT 3
26095: LESS
26096: IFFALSE 26132
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26098: LD_INT 0
26100: PPUSH
26101: LD_INT 5
26103: PUSH
26104: LD_INT 8
26106: PUSH
26107: LD_INT 9
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: LIST
26114: PUSH
26115: LD_VAR 0 17
26119: ARRAY
26120: PPUSH
26121: LD_VAR 0 4
26125: PPUSH
26126: CALL_OW 380
26130: GO 26149
// PrepareHuman ( false , i , skill ) ;
26132: LD_INT 0
26134: PPUSH
26135: LD_VAR 0 8
26139: PPUSH
26140: LD_VAR 0 4
26144: PPUSH
26145: CALL_OW 380
// end else
26149: GO 26168
// PrepareHuman ( false , i , skill ) ;
26151: LD_INT 0
26153: PPUSH
26154: LD_VAR 0 8
26158: PPUSH
26159: LD_VAR 0 4
26163: PPUSH
26164: CALL_OW 380
// un := CreateHuman ;
26168: LD_ADDR_VAR 0 14
26172: PUSH
26173: CALL_OW 44
26177: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26178: LD_ADDR_VAR 0 7
26182: PUSH
26183: LD_VAR 0 7
26187: PPUSH
26188: LD_INT 1
26190: PPUSH
26191: LD_VAR 0 14
26195: PPUSH
26196: CALL_OW 2
26200: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26201: LD_VAR 0 14
26205: PPUSH
26206: LD_VAR 0 9
26210: PPUSH
26211: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26215: LD_VAR 0 9
26219: PPUSH
26220: CALL_OW 313
26224: PUSH
26225: LD_INT 6
26227: EQUAL
26228: PUSH
26229: LD_VAR 0 9
26233: PPUSH
26234: CALL_OW 266
26238: PUSH
26239: LD_INT 32
26241: PUSH
26242: LD_INT 31
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: IN
26249: OR
26250: IFFALSE 26064
26252: GO 26061
26254: POP
26255: POP
// end else
26256: GO 26638
// for j = 1 to x do
26258: LD_ADDR_VAR 0 9
26262: PUSH
26263: DOUBLE
26264: LD_INT 1
26266: DEC
26267: ST_TO_ADDR
26268: LD_VAR 0 13
26272: PUSH
26273: FOR_TO
26274: IFFALSE 26636
// begin InitHc ;
26276: CALL_OW 19
// if not f then
26280: LD_VAR 0 12
26284: NOT
26285: IFFALSE 26374
// begin PrepareHuman ( false , i , skill ) ;
26287: LD_INT 0
26289: PPUSH
26290: LD_VAR 0 8
26294: PPUSH
26295: LD_VAR 0 4
26299: PPUSH
26300: CALL_OW 380
// un := CreateHuman ;
26304: LD_ADDR_VAR 0 14
26308: PUSH
26309: CALL_OW 44
26313: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26314: LD_ADDR_VAR 0 7
26318: PUSH
26319: LD_VAR 0 7
26323: PPUSH
26324: LD_INT 1
26326: PPUSH
26327: LD_VAR 0 14
26331: PPUSH
26332: CALL_OW 2
26336: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26337: LD_VAR 0 14
26341: PPUSH
26342: LD_VAR 0 1
26346: PPUSH
26347: CALL_OW 250
26351: PPUSH
26352: LD_VAR 0 1
26356: PPUSH
26357: CALL_OW 251
26361: PPUSH
26362: LD_INT 10
26364: PPUSH
26365: LD_INT 0
26367: PPUSH
26368: CALL_OW 50
// continue ;
26372: GO 26273
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26374: LD_VAR 0 12
26378: PUSH
26379: LD_INT 1
26381: ARRAY
26382: PPUSH
26383: CALL_OW 313
26387: PUSH
26388: LD_VAR 0 12
26392: PUSH
26393: LD_INT 1
26395: ARRAY
26396: PPUSH
26397: CALL_OW 266
26401: PUSH
26402: LD_INT 32
26404: PUSH
26405: LD_INT 31
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: IN
26412: AND
26413: PUSH
26414: LD_VAR 0 12
26418: PUSH
26419: LD_INT 1
26421: ARRAY
26422: PPUSH
26423: CALL_OW 313
26427: PUSH
26428: LD_INT 6
26430: EQUAL
26431: OR
26432: IFFALSE 26452
// f := Delete ( f , 1 ) ;
26434: LD_ADDR_VAR 0 12
26438: PUSH
26439: LD_VAR 0 12
26443: PPUSH
26444: LD_INT 1
26446: PPUSH
26447: CALL_OW 3
26451: ST_TO_ADDR
// if not f then
26452: LD_VAR 0 12
26456: NOT
26457: IFFALSE 26475
// begin x := x + 2 ;
26459: LD_ADDR_VAR 0 13
26463: PUSH
26464: LD_VAR 0 13
26468: PUSH
26469: LD_INT 2
26471: PLUS
26472: ST_TO_ADDR
// continue ;
26473: GO 26273
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26475: LD_VAR 0 12
26479: PUSH
26480: LD_INT 1
26482: ARRAY
26483: PPUSH
26484: CALL_OW 266
26488: PUSH
26489: LD_INT 5
26491: EQUAL
26492: IFFALSE 26566
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26494: LD_VAR 0 12
26498: PUSH
26499: LD_INT 1
26501: ARRAY
26502: PPUSH
26503: CALL_OW 313
26507: PUSH
26508: LD_INT 3
26510: LESS
26511: IFFALSE 26547
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26513: LD_INT 0
26515: PPUSH
26516: LD_INT 5
26518: PUSH
26519: LD_INT 8
26521: PUSH
26522: LD_INT 9
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: LIST
26529: PUSH
26530: LD_VAR 0 17
26534: ARRAY
26535: PPUSH
26536: LD_VAR 0 4
26540: PPUSH
26541: CALL_OW 380
26545: GO 26564
// PrepareHuman ( false , i , skill ) ;
26547: LD_INT 0
26549: PPUSH
26550: LD_VAR 0 8
26554: PPUSH
26555: LD_VAR 0 4
26559: PPUSH
26560: CALL_OW 380
// end else
26564: GO 26583
// PrepareHuman ( false , i , skill ) ;
26566: LD_INT 0
26568: PPUSH
26569: LD_VAR 0 8
26573: PPUSH
26574: LD_VAR 0 4
26578: PPUSH
26579: CALL_OW 380
// un := CreateHuman ;
26583: LD_ADDR_VAR 0 14
26587: PUSH
26588: CALL_OW 44
26592: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26593: LD_ADDR_VAR 0 7
26597: PUSH
26598: LD_VAR 0 7
26602: PPUSH
26603: LD_INT 1
26605: PPUSH
26606: LD_VAR 0 14
26610: PPUSH
26611: CALL_OW 2
26615: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26616: LD_VAR 0 14
26620: PPUSH
26621: LD_VAR 0 12
26625: PUSH
26626: LD_INT 1
26628: ARRAY
26629: PPUSH
26630: CALL_OW 52
// end ;
26634: GO 26273
26636: POP
26637: POP
// end ;
26638: GO 25575
26640: POP
26641: POP
// result := result ^ buildings ;
26642: LD_ADDR_VAR 0 7
26646: PUSH
26647: LD_VAR 0 7
26651: PUSH
26652: LD_VAR 0 18
26656: ADD
26657: ST_TO_ADDR
// end else
26658: GO 26801
// begin for i = 1 to personel do
26660: LD_ADDR_VAR 0 8
26664: PUSH
26665: DOUBLE
26666: LD_INT 1
26668: DEC
26669: ST_TO_ADDR
26670: LD_VAR 0 6
26674: PUSH
26675: FOR_TO
26676: IFFALSE 26799
// begin if i > 4 then
26678: LD_VAR 0 8
26682: PUSH
26683: LD_INT 4
26685: GREATER
26686: IFFALSE 26690
// break ;
26688: GO 26799
// x := personel [ i ] ;
26690: LD_ADDR_VAR 0 13
26694: PUSH
26695: LD_VAR 0 6
26699: PUSH
26700: LD_VAR 0 8
26704: ARRAY
26705: ST_TO_ADDR
// if x = - 1 then
26706: LD_VAR 0 13
26710: PUSH
26711: LD_INT 1
26713: NEG
26714: EQUAL
26715: IFFALSE 26719
// continue ;
26717: GO 26675
// PrepareHuman ( false , i , skill ) ;
26719: LD_INT 0
26721: PPUSH
26722: LD_VAR 0 8
26726: PPUSH
26727: LD_VAR 0 4
26731: PPUSH
26732: CALL_OW 380
// un := CreateHuman ;
26736: LD_ADDR_VAR 0 14
26740: PUSH
26741: CALL_OW 44
26745: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26746: LD_VAR 0 14
26750: PPUSH
26751: LD_VAR 0 1
26755: PPUSH
26756: CALL_OW 250
26760: PPUSH
26761: LD_VAR 0 1
26765: PPUSH
26766: CALL_OW 251
26770: PPUSH
26771: LD_INT 10
26773: PPUSH
26774: LD_INT 0
26776: PPUSH
26777: CALL_OW 50
// result := result ^ un ;
26781: LD_ADDR_VAR 0 7
26785: PUSH
26786: LD_VAR 0 7
26790: PUSH
26791: LD_VAR 0 14
26795: ADD
26796: ST_TO_ADDR
// end ;
26797: GO 26675
26799: POP
26800: POP
// end ; end ;
26801: LD_VAR 0 7
26805: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26806: LD_INT 0
26808: PPUSH
26809: PPUSH
26810: PPUSH
26811: PPUSH
26812: PPUSH
26813: PPUSH
26814: PPUSH
26815: PPUSH
26816: PPUSH
26817: PPUSH
26818: PPUSH
26819: PPUSH
26820: PPUSH
26821: PPUSH
26822: PPUSH
26823: PPUSH
// result := false ;
26824: LD_ADDR_VAR 0 3
26828: PUSH
26829: LD_INT 0
26831: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26832: LD_VAR 0 1
26836: NOT
26837: PUSH
26838: LD_VAR 0 1
26842: PPUSH
26843: CALL_OW 266
26847: PUSH
26848: LD_INT 32
26850: PUSH
26851: LD_INT 33
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: IN
26858: NOT
26859: OR
26860: IFFALSE 26864
// exit ;
26862: GO 27973
// nat := GetNation ( tower ) ;
26864: LD_ADDR_VAR 0 12
26868: PUSH
26869: LD_VAR 0 1
26873: PPUSH
26874: CALL_OW 248
26878: ST_TO_ADDR
// side := GetSide ( tower ) ;
26879: LD_ADDR_VAR 0 16
26883: PUSH
26884: LD_VAR 0 1
26888: PPUSH
26889: CALL_OW 255
26893: ST_TO_ADDR
// x := GetX ( tower ) ;
26894: LD_ADDR_VAR 0 10
26898: PUSH
26899: LD_VAR 0 1
26903: PPUSH
26904: CALL_OW 250
26908: ST_TO_ADDR
// y := GetY ( tower ) ;
26909: LD_ADDR_VAR 0 11
26913: PUSH
26914: LD_VAR 0 1
26918: PPUSH
26919: CALL_OW 251
26923: ST_TO_ADDR
// if not x or not y then
26924: LD_VAR 0 10
26928: NOT
26929: PUSH
26930: LD_VAR 0 11
26934: NOT
26935: OR
26936: IFFALSE 26940
// exit ;
26938: GO 27973
// weapon := 0 ;
26940: LD_ADDR_VAR 0 18
26944: PUSH
26945: LD_INT 0
26947: ST_TO_ADDR
// fac_list := [ ] ;
26948: LD_ADDR_VAR 0 17
26952: PUSH
26953: EMPTY
26954: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26955: LD_ADDR_VAR 0 6
26959: PUSH
26960: LD_VAR 0 1
26964: PPUSH
26965: CALL_OW 274
26969: PPUSH
26970: LD_VAR 0 2
26974: PPUSH
26975: LD_INT 0
26977: PPUSH
26978: CALL 24544 0 3
26982: PPUSH
26983: LD_INT 30
26985: PUSH
26986: LD_INT 3
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PPUSH
26993: CALL_OW 72
26997: ST_TO_ADDR
// if not factories then
26998: LD_VAR 0 6
27002: NOT
27003: IFFALSE 27007
// exit ;
27005: GO 27973
// for i in factories do
27007: LD_ADDR_VAR 0 8
27011: PUSH
27012: LD_VAR 0 6
27016: PUSH
27017: FOR_IN
27018: IFFALSE 27043
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27020: LD_ADDR_VAR 0 17
27024: PUSH
27025: LD_VAR 0 17
27029: PUSH
27030: LD_VAR 0 8
27034: PPUSH
27035: CALL_OW 478
27039: UNION
27040: ST_TO_ADDR
27041: GO 27017
27043: POP
27044: POP
// if not fac_list then
27045: LD_VAR 0 17
27049: NOT
27050: IFFALSE 27054
// exit ;
27052: GO 27973
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27054: LD_ADDR_VAR 0 5
27058: PUSH
27059: LD_INT 4
27061: PUSH
27062: LD_INT 5
27064: PUSH
27065: LD_INT 9
27067: PUSH
27068: LD_INT 10
27070: PUSH
27071: LD_INT 6
27073: PUSH
27074: LD_INT 7
27076: PUSH
27077: LD_INT 11
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 27
27091: PUSH
27092: LD_INT 28
27094: PUSH
27095: LD_INT 26
27097: PUSH
27098: LD_INT 30
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 43
27109: PUSH
27110: LD_INT 44
27112: PUSH
27113: LD_INT 46
27115: PUSH
27116: LD_INT 45
27118: PUSH
27119: LD_INT 47
27121: PUSH
27122: LD_INT 49
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: LIST
27137: PUSH
27138: LD_VAR 0 12
27142: ARRAY
27143: ST_TO_ADDR
// list := list isect fac_list ;
27144: LD_ADDR_VAR 0 5
27148: PUSH
27149: LD_VAR 0 5
27153: PUSH
27154: LD_VAR 0 17
27158: ISECT
27159: ST_TO_ADDR
// if not list then
27160: LD_VAR 0 5
27164: NOT
27165: IFFALSE 27169
// exit ;
27167: GO 27973
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27169: LD_VAR 0 12
27173: PUSH
27174: LD_INT 3
27176: EQUAL
27177: PUSH
27178: LD_INT 49
27180: PUSH
27181: LD_VAR 0 5
27185: IN
27186: AND
27187: PUSH
27188: LD_INT 31
27190: PPUSH
27191: LD_VAR 0 16
27195: PPUSH
27196: CALL_OW 321
27200: PUSH
27201: LD_INT 2
27203: EQUAL
27204: AND
27205: IFFALSE 27265
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27207: LD_INT 22
27209: PUSH
27210: LD_VAR 0 16
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 35
27221: PUSH
27222: LD_INT 49
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: LD_INT 91
27231: PUSH
27232: LD_VAR 0 1
27236: PUSH
27237: LD_INT 10
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: LIST
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: LIST
27249: PPUSH
27250: CALL_OW 69
27254: NOT
27255: IFFALSE 27265
// weapon := ru_time_lapser ;
27257: LD_ADDR_VAR 0 18
27261: PUSH
27262: LD_INT 49
27264: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27265: LD_VAR 0 12
27269: PUSH
27270: LD_INT 1
27272: PUSH
27273: LD_INT 2
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: IN
27280: PUSH
27281: LD_INT 11
27283: PUSH
27284: LD_VAR 0 5
27288: IN
27289: PUSH
27290: LD_INT 30
27292: PUSH
27293: LD_VAR 0 5
27297: IN
27298: OR
27299: AND
27300: PUSH
27301: LD_INT 6
27303: PPUSH
27304: LD_VAR 0 16
27308: PPUSH
27309: CALL_OW 321
27313: PUSH
27314: LD_INT 2
27316: EQUAL
27317: AND
27318: IFFALSE 27483
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27320: LD_INT 22
27322: PUSH
27323: LD_VAR 0 16
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 2
27334: PUSH
27335: LD_INT 35
27337: PUSH
27338: LD_INT 11
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 35
27347: PUSH
27348: LD_INT 30
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 91
27362: PUSH
27363: LD_VAR 0 1
27367: PUSH
27368: LD_INT 18
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: LIST
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: LIST
27380: PPUSH
27381: CALL_OW 69
27385: NOT
27386: PUSH
27387: LD_INT 22
27389: PUSH
27390: LD_VAR 0 16
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: LD_INT 2
27401: PUSH
27402: LD_INT 30
27404: PUSH
27405: LD_INT 32
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 30
27414: PUSH
27415: LD_INT 33
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: LIST
27426: PUSH
27427: LD_INT 91
27429: PUSH
27430: LD_VAR 0 1
27434: PUSH
27435: LD_INT 12
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: LIST
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: LIST
27447: PUSH
27448: EMPTY
27449: LIST
27450: PPUSH
27451: CALL_OW 69
27455: PUSH
27456: LD_INT 2
27458: GREATER
27459: AND
27460: IFFALSE 27483
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27462: LD_ADDR_VAR 0 18
27466: PUSH
27467: LD_INT 11
27469: PUSH
27470: LD_INT 30
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_VAR 0 12
27481: ARRAY
27482: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27483: LD_VAR 0 18
27487: NOT
27488: PUSH
27489: LD_INT 40
27491: PPUSH
27492: LD_VAR 0 16
27496: PPUSH
27497: CALL_OW 321
27501: PUSH
27502: LD_INT 2
27504: EQUAL
27505: AND
27506: PUSH
27507: LD_INT 7
27509: PUSH
27510: LD_VAR 0 5
27514: IN
27515: PUSH
27516: LD_INT 28
27518: PUSH
27519: LD_VAR 0 5
27523: IN
27524: OR
27525: PUSH
27526: LD_INT 45
27528: PUSH
27529: LD_VAR 0 5
27533: IN
27534: OR
27535: AND
27536: IFFALSE 27790
// begin hex := GetHexInfo ( x , y ) ;
27538: LD_ADDR_VAR 0 4
27542: PUSH
27543: LD_VAR 0 10
27547: PPUSH
27548: LD_VAR 0 11
27552: PPUSH
27553: CALL_OW 546
27557: ST_TO_ADDR
// if hex [ 1 ] then
27558: LD_VAR 0 4
27562: PUSH
27563: LD_INT 1
27565: ARRAY
27566: IFFALSE 27570
// exit ;
27568: GO 27973
// height := hex [ 2 ] ;
27570: LD_ADDR_VAR 0 15
27574: PUSH
27575: LD_VAR 0 4
27579: PUSH
27580: LD_INT 2
27582: ARRAY
27583: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27584: LD_ADDR_VAR 0 14
27588: PUSH
27589: LD_INT 0
27591: PUSH
27592: LD_INT 2
27594: PUSH
27595: LD_INT 3
27597: PUSH
27598: LD_INT 5
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: ST_TO_ADDR
// for i in tmp do
27607: LD_ADDR_VAR 0 8
27611: PUSH
27612: LD_VAR 0 14
27616: PUSH
27617: FOR_IN
27618: IFFALSE 27788
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27620: LD_ADDR_VAR 0 9
27624: PUSH
27625: LD_VAR 0 10
27629: PPUSH
27630: LD_VAR 0 8
27634: PPUSH
27635: LD_INT 5
27637: PPUSH
27638: CALL_OW 272
27642: PUSH
27643: LD_VAR 0 11
27647: PPUSH
27648: LD_VAR 0 8
27652: PPUSH
27653: LD_INT 5
27655: PPUSH
27656: CALL_OW 273
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27665: LD_VAR 0 9
27669: PUSH
27670: LD_INT 1
27672: ARRAY
27673: PPUSH
27674: LD_VAR 0 9
27678: PUSH
27679: LD_INT 2
27681: ARRAY
27682: PPUSH
27683: CALL_OW 488
27687: IFFALSE 27786
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27689: LD_ADDR_VAR 0 4
27693: PUSH
27694: LD_VAR 0 9
27698: PUSH
27699: LD_INT 1
27701: ARRAY
27702: PPUSH
27703: LD_VAR 0 9
27707: PUSH
27708: LD_INT 2
27710: ARRAY
27711: PPUSH
27712: CALL_OW 546
27716: ST_TO_ADDR
// if hex [ 1 ] then
27717: LD_VAR 0 4
27721: PUSH
27722: LD_INT 1
27724: ARRAY
27725: IFFALSE 27729
// continue ;
27727: GO 27617
// h := hex [ 2 ] ;
27729: LD_ADDR_VAR 0 13
27733: PUSH
27734: LD_VAR 0 4
27738: PUSH
27739: LD_INT 2
27741: ARRAY
27742: ST_TO_ADDR
// if h + 7 < height then
27743: LD_VAR 0 13
27747: PUSH
27748: LD_INT 7
27750: PLUS
27751: PUSH
27752: LD_VAR 0 15
27756: LESS
27757: IFFALSE 27786
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27759: LD_ADDR_VAR 0 18
27763: PUSH
27764: LD_INT 7
27766: PUSH
27767: LD_INT 28
27769: PUSH
27770: LD_INT 45
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: LIST
27777: PUSH
27778: LD_VAR 0 12
27782: ARRAY
27783: ST_TO_ADDR
// break ;
27784: GO 27788
// end ; end ; end ;
27786: GO 27617
27788: POP
27789: POP
// end ; if not weapon then
27790: LD_VAR 0 18
27794: NOT
27795: IFFALSE 27855
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27797: LD_ADDR_VAR 0 5
27801: PUSH
27802: LD_VAR 0 5
27806: PUSH
27807: LD_INT 11
27809: PUSH
27810: LD_INT 30
27812: PUSH
27813: LD_INT 49
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: LIST
27820: DIFF
27821: ST_TO_ADDR
// if not list then
27822: LD_VAR 0 5
27826: NOT
27827: IFFALSE 27831
// exit ;
27829: GO 27973
// weapon := list [ rand ( 1 , list ) ] ;
27831: LD_ADDR_VAR 0 18
27835: PUSH
27836: LD_VAR 0 5
27840: PUSH
27841: LD_INT 1
27843: PPUSH
27844: LD_VAR 0 5
27848: PPUSH
27849: CALL_OW 12
27853: ARRAY
27854: ST_TO_ADDR
// end ; if weapon then
27855: LD_VAR 0 18
27859: IFFALSE 27973
// begin tmp := CostOfWeapon ( weapon ) ;
27861: LD_ADDR_VAR 0 14
27865: PUSH
27866: LD_VAR 0 18
27870: PPUSH
27871: CALL_OW 451
27875: ST_TO_ADDR
// j := GetBase ( tower ) ;
27876: LD_ADDR_VAR 0 9
27880: PUSH
27881: LD_VAR 0 1
27885: PPUSH
27886: CALL_OW 274
27890: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27891: LD_VAR 0 9
27895: PPUSH
27896: LD_INT 1
27898: PPUSH
27899: CALL_OW 275
27903: PUSH
27904: LD_VAR 0 14
27908: PUSH
27909: LD_INT 1
27911: ARRAY
27912: GREATEREQUAL
27913: PUSH
27914: LD_VAR 0 9
27918: PPUSH
27919: LD_INT 2
27921: PPUSH
27922: CALL_OW 275
27926: PUSH
27927: LD_VAR 0 14
27931: PUSH
27932: LD_INT 2
27934: ARRAY
27935: GREATEREQUAL
27936: AND
27937: PUSH
27938: LD_VAR 0 9
27942: PPUSH
27943: LD_INT 3
27945: PPUSH
27946: CALL_OW 275
27950: PUSH
27951: LD_VAR 0 14
27955: PUSH
27956: LD_INT 3
27958: ARRAY
27959: GREATEREQUAL
27960: AND
27961: IFFALSE 27973
// result := weapon ;
27963: LD_ADDR_VAR 0 3
27967: PUSH
27968: LD_VAR 0 18
27972: ST_TO_ADDR
// end ; end ;
27973: LD_VAR 0 3
27977: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27978: LD_INT 0
27980: PPUSH
27981: PPUSH
// result := true ;
27982: LD_ADDR_VAR 0 3
27986: PUSH
27987: LD_INT 1
27989: ST_TO_ADDR
// if array1 = array2 then
27990: LD_VAR 0 1
27994: PUSH
27995: LD_VAR 0 2
27999: EQUAL
28000: IFFALSE 28060
// begin for i = 1 to array1 do
28002: LD_ADDR_VAR 0 4
28006: PUSH
28007: DOUBLE
28008: LD_INT 1
28010: DEC
28011: ST_TO_ADDR
28012: LD_VAR 0 1
28016: PUSH
28017: FOR_TO
28018: IFFALSE 28056
// if array1 [ i ] <> array2 [ i ] then
28020: LD_VAR 0 1
28024: PUSH
28025: LD_VAR 0 4
28029: ARRAY
28030: PUSH
28031: LD_VAR 0 2
28035: PUSH
28036: LD_VAR 0 4
28040: ARRAY
28041: NONEQUAL
28042: IFFALSE 28054
// begin result := false ;
28044: LD_ADDR_VAR 0 3
28048: PUSH
28049: LD_INT 0
28051: ST_TO_ADDR
// break ;
28052: GO 28056
// end ;
28054: GO 28017
28056: POP
28057: POP
// end else
28058: GO 28068
// result := false ;
28060: LD_ADDR_VAR 0 3
28064: PUSH
28065: LD_INT 0
28067: ST_TO_ADDR
// end ;
28068: LD_VAR 0 3
28072: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28073: LD_INT 0
28075: PPUSH
28076: PPUSH
// if not array1 or not array2 then
28077: LD_VAR 0 1
28081: NOT
28082: PUSH
28083: LD_VAR 0 2
28087: NOT
28088: OR
28089: IFFALSE 28093
// exit ;
28091: GO 28157
// result := true ;
28093: LD_ADDR_VAR 0 3
28097: PUSH
28098: LD_INT 1
28100: ST_TO_ADDR
// for i = 1 to array1 do
28101: LD_ADDR_VAR 0 4
28105: PUSH
28106: DOUBLE
28107: LD_INT 1
28109: DEC
28110: ST_TO_ADDR
28111: LD_VAR 0 1
28115: PUSH
28116: FOR_TO
28117: IFFALSE 28155
// if array1 [ i ] <> array2 [ i ] then
28119: LD_VAR 0 1
28123: PUSH
28124: LD_VAR 0 4
28128: ARRAY
28129: PUSH
28130: LD_VAR 0 2
28134: PUSH
28135: LD_VAR 0 4
28139: ARRAY
28140: NONEQUAL
28141: IFFALSE 28153
// begin result := false ;
28143: LD_ADDR_VAR 0 3
28147: PUSH
28148: LD_INT 0
28150: ST_TO_ADDR
// break ;
28151: GO 28155
// end ;
28153: GO 28116
28155: POP
28156: POP
// end ;
28157: LD_VAR 0 3
28161: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28162: LD_INT 0
28164: PPUSH
28165: PPUSH
28166: PPUSH
// pom := GetBase ( fac ) ;
28167: LD_ADDR_VAR 0 5
28171: PUSH
28172: LD_VAR 0 1
28176: PPUSH
28177: CALL_OW 274
28181: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28182: LD_ADDR_VAR 0 4
28186: PUSH
28187: LD_VAR 0 2
28191: PUSH
28192: LD_INT 1
28194: ARRAY
28195: PPUSH
28196: LD_VAR 0 2
28200: PUSH
28201: LD_INT 2
28203: ARRAY
28204: PPUSH
28205: LD_VAR 0 2
28209: PUSH
28210: LD_INT 3
28212: ARRAY
28213: PPUSH
28214: LD_VAR 0 2
28218: PUSH
28219: LD_INT 4
28221: ARRAY
28222: PPUSH
28223: CALL_OW 449
28227: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28228: LD_ADDR_VAR 0 3
28232: PUSH
28233: LD_VAR 0 5
28237: PPUSH
28238: LD_INT 1
28240: PPUSH
28241: CALL_OW 275
28245: PUSH
28246: LD_VAR 0 4
28250: PUSH
28251: LD_INT 1
28253: ARRAY
28254: GREATEREQUAL
28255: PUSH
28256: LD_VAR 0 5
28260: PPUSH
28261: LD_INT 2
28263: PPUSH
28264: CALL_OW 275
28268: PUSH
28269: LD_VAR 0 4
28273: PUSH
28274: LD_INT 2
28276: ARRAY
28277: GREATEREQUAL
28278: AND
28279: PUSH
28280: LD_VAR 0 5
28284: PPUSH
28285: LD_INT 3
28287: PPUSH
28288: CALL_OW 275
28292: PUSH
28293: LD_VAR 0 4
28297: PUSH
28298: LD_INT 3
28300: ARRAY
28301: GREATEREQUAL
28302: AND
28303: ST_TO_ADDR
// end ;
28304: LD_VAR 0 3
28308: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28309: LD_INT 0
28311: PPUSH
28312: PPUSH
28313: PPUSH
28314: PPUSH
// pom := GetBase ( building ) ;
28315: LD_ADDR_VAR 0 3
28319: PUSH
28320: LD_VAR 0 1
28324: PPUSH
28325: CALL_OW 274
28329: ST_TO_ADDR
// if not pom then
28330: LD_VAR 0 3
28334: NOT
28335: IFFALSE 28339
// exit ;
28337: GO 28509
// btype := GetBType ( building ) ;
28339: LD_ADDR_VAR 0 5
28343: PUSH
28344: LD_VAR 0 1
28348: PPUSH
28349: CALL_OW 266
28353: ST_TO_ADDR
// if btype = b_armoury then
28354: LD_VAR 0 5
28358: PUSH
28359: LD_INT 4
28361: EQUAL
28362: IFFALSE 28372
// btype := b_barracks ;
28364: LD_ADDR_VAR 0 5
28368: PUSH
28369: LD_INT 5
28371: ST_TO_ADDR
// if btype = b_depot then
28372: LD_VAR 0 5
28376: PUSH
28377: LD_INT 0
28379: EQUAL
28380: IFFALSE 28390
// btype := b_warehouse ;
28382: LD_ADDR_VAR 0 5
28386: PUSH
28387: LD_INT 1
28389: ST_TO_ADDR
// if btype = b_workshop then
28390: LD_VAR 0 5
28394: PUSH
28395: LD_INT 2
28397: EQUAL
28398: IFFALSE 28408
// btype := b_factory ;
28400: LD_ADDR_VAR 0 5
28404: PUSH
28405: LD_INT 3
28407: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28408: LD_ADDR_VAR 0 4
28412: PUSH
28413: LD_VAR 0 5
28417: PPUSH
28418: LD_VAR 0 1
28422: PPUSH
28423: CALL_OW 248
28427: PPUSH
28428: CALL_OW 450
28432: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28433: LD_ADDR_VAR 0 2
28437: PUSH
28438: LD_VAR 0 3
28442: PPUSH
28443: LD_INT 1
28445: PPUSH
28446: CALL_OW 275
28450: PUSH
28451: LD_VAR 0 4
28455: PUSH
28456: LD_INT 1
28458: ARRAY
28459: GREATEREQUAL
28460: PUSH
28461: LD_VAR 0 3
28465: PPUSH
28466: LD_INT 2
28468: PPUSH
28469: CALL_OW 275
28473: PUSH
28474: LD_VAR 0 4
28478: PUSH
28479: LD_INT 2
28481: ARRAY
28482: GREATEREQUAL
28483: AND
28484: PUSH
28485: LD_VAR 0 3
28489: PPUSH
28490: LD_INT 3
28492: PPUSH
28493: CALL_OW 275
28497: PUSH
28498: LD_VAR 0 4
28502: PUSH
28503: LD_INT 3
28505: ARRAY
28506: GREATEREQUAL
28507: AND
28508: ST_TO_ADDR
// end ;
28509: LD_VAR 0 2
28513: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28514: LD_INT 0
28516: PPUSH
28517: PPUSH
28518: PPUSH
// pom := GetBase ( building ) ;
28519: LD_ADDR_VAR 0 4
28523: PUSH
28524: LD_VAR 0 1
28528: PPUSH
28529: CALL_OW 274
28533: ST_TO_ADDR
// if not pom then
28534: LD_VAR 0 4
28538: NOT
28539: IFFALSE 28543
// exit ;
28541: GO 28644
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28543: LD_ADDR_VAR 0 5
28547: PUSH
28548: LD_VAR 0 2
28552: PPUSH
28553: LD_VAR 0 1
28557: PPUSH
28558: CALL_OW 248
28562: PPUSH
28563: CALL_OW 450
28567: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28568: LD_ADDR_VAR 0 3
28572: PUSH
28573: LD_VAR 0 4
28577: PPUSH
28578: LD_INT 1
28580: PPUSH
28581: CALL_OW 275
28585: PUSH
28586: LD_VAR 0 5
28590: PUSH
28591: LD_INT 1
28593: ARRAY
28594: GREATEREQUAL
28595: PUSH
28596: LD_VAR 0 4
28600: PPUSH
28601: LD_INT 2
28603: PPUSH
28604: CALL_OW 275
28608: PUSH
28609: LD_VAR 0 5
28613: PUSH
28614: LD_INT 2
28616: ARRAY
28617: GREATEREQUAL
28618: AND
28619: PUSH
28620: LD_VAR 0 4
28624: PPUSH
28625: LD_INT 3
28627: PPUSH
28628: CALL_OW 275
28632: PUSH
28633: LD_VAR 0 5
28637: PUSH
28638: LD_INT 3
28640: ARRAY
28641: GREATEREQUAL
28642: AND
28643: ST_TO_ADDR
// end ;
28644: LD_VAR 0 3
28648: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28649: LD_INT 0
28651: PPUSH
28652: PPUSH
28653: PPUSH
28654: PPUSH
28655: PPUSH
28656: PPUSH
28657: PPUSH
28658: PPUSH
28659: PPUSH
28660: PPUSH
28661: PPUSH
// result := false ;
28662: LD_ADDR_VAR 0 8
28666: PUSH
28667: LD_INT 0
28669: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28670: LD_VAR 0 5
28674: NOT
28675: PUSH
28676: LD_VAR 0 1
28680: NOT
28681: OR
28682: PUSH
28683: LD_VAR 0 2
28687: NOT
28688: OR
28689: PUSH
28690: LD_VAR 0 3
28694: NOT
28695: OR
28696: IFFALSE 28700
// exit ;
28698: GO 29514
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28700: LD_ADDR_VAR 0 14
28704: PUSH
28705: LD_VAR 0 1
28709: PPUSH
28710: LD_VAR 0 2
28714: PPUSH
28715: LD_VAR 0 3
28719: PPUSH
28720: LD_VAR 0 4
28724: PPUSH
28725: LD_VAR 0 5
28729: PUSH
28730: LD_INT 1
28732: ARRAY
28733: PPUSH
28734: CALL_OW 248
28738: PPUSH
28739: LD_INT 0
28741: PPUSH
28742: CALL 30767 0 6
28746: ST_TO_ADDR
// if not hexes then
28747: LD_VAR 0 14
28751: NOT
28752: IFFALSE 28756
// exit ;
28754: GO 29514
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28756: LD_ADDR_VAR 0 17
28760: PUSH
28761: LD_VAR 0 5
28765: PPUSH
28766: LD_INT 22
28768: PUSH
28769: LD_VAR 0 13
28773: PPUSH
28774: CALL_OW 255
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 2
28785: PUSH
28786: LD_INT 30
28788: PUSH
28789: LD_INT 0
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 30
28798: PUSH
28799: LD_INT 1
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: LIST
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PPUSH
28815: CALL_OW 72
28819: ST_TO_ADDR
// for i = 1 to hexes do
28820: LD_ADDR_VAR 0 9
28824: PUSH
28825: DOUBLE
28826: LD_INT 1
28828: DEC
28829: ST_TO_ADDR
28830: LD_VAR 0 14
28834: PUSH
28835: FOR_TO
28836: IFFALSE 29512
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28838: LD_ADDR_VAR 0 13
28842: PUSH
28843: LD_VAR 0 14
28847: PUSH
28848: LD_VAR 0 9
28852: ARRAY
28853: PUSH
28854: LD_INT 1
28856: ARRAY
28857: PPUSH
28858: LD_VAR 0 14
28862: PUSH
28863: LD_VAR 0 9
28867: ARRAY
28868: PUSH
28869: LD_INT 2
28871: ARRAY
28872: PPUSH
28873: CALL_OW 428
28877: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28878: LD_VAR 0 14
28882: PUSH
28883: LD_VAR 0 9
28887: ARRAY
28888: PUSH
28889: LD_INT 1
28891: ARRAY
28892: PPUSH
28893: LD_VAR 0 14
28897: PUSH
28898: LD_VAR 0 9
28902: ARRAY
28903: PUSH
28904: LD_INT 2
28906: ARRAY
28907: PPUSH
28908: CALL_OW 351
28912: PUSH
28913: LD_VAR 0 14
28917: PUSH
28918: LD_VAR 0 9
28922: ARRAY
28923: PUSH
28924: LD_INT 1
28926: ARRAY
28927: PPUSH
28928: LD_VAR 0 14
28932: PUSH
28933: LD_VAR 0 9
28937: ARRAY
28938: PUSH
28939: LD_INT 2
28941: ARRAY
28942: PPUSH
28943: CALL_OW 488
28947: NOT
28948: OR
28949: PUSH
28950: LD_VAR 0 13
28954: PPUSH
28955: CALL_OW 247
28959: PUSH
28960: LD_INT 3
28962: EQUAL
28963: OR
28964: IFFALSE 28970
// exit ;
28966: POP
28967: POP
28968: GO 29514
// if not tmp then
28970: LD_VAR 0 13
28974: NOT
28975: IFFALSE 28979
// continue ;
28977: GO 28835
// result := true ;
28979: LD_ADDR_VAR 0 8
28983: PUSH
28984: LD_INT 1
28986: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
28987: LD_VAR 0 6
28991: PUSH
28992: LD_VAR 0 13
28996: PPUSH
28997: CALL_OW 247
29001: PUSH
29002: LD_INT 2
29004: EQUAL
29005: AND
29006: PUSH
29007: LD_VAR 0 13
29011: PPUSH
29012: CALL_OW 263
29016: PUSH
29017: LD_INT 1
29019: EQUAL
29020: AND
29021: IFFALSE 29185
// begin if IsDrivenBy ( tmp ) then
29023: LD_VAR 0 13
29027: PPUSH
29028: CALL_OW 311
29032: IFFALSE 29036
// continue ;
29034: GO 28835
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29036: LD_VAR 0 6
29040: PPUSH
29041: LD_INT 3
29043: PUSH
29044: LD_INT 60
29046: PUSH
29047: EMPTY
29048: LIST
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 3
29056: PUSH
29057: LD_INT 55
29059: PUSH
29060: EMPTY
29061: LIST
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PPUSH
29071: CALL_OW 72
29075: IFFALSE 29183
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29077: LD_ADDR_VAR 0 18
29081: PUSH
29082: LD_VAR 0 6
29086: PPUSH
29087: LD_INT 3
29089: PUSH
29090: LD_INT 60
29092: PUSH
29093: EMPTY
29094: LIST
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 3
29102: PUSH
29103: LD_INT 55
29105: PUSH
29106: EMPTY
29107: LIST
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PPUSH
29117: CALL_OW 72
29121: PUSH
29122: LD_INT 1
29124: ARRAY
29125: ST_TO_ADDR
// if IsInUnit ( driver ) then
29126: LD_VAR 0 18
29130: PPUSH
29131: CALL_OW 310
29135: IFFALSE 29146
// ComExit ( driver ) ;
29137: LD_VAR 0 18
29141: PPUSH
29142: CALL 54559 0 1
// AddComEnterUnit ( driver , tmp ) ;
29146: LD_VAR 0 18
29150: PPUSH
29151: LD_VAR 0 13
29155: PPUSH
29156: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29160: LD_VAR 0 18
29164: PPUSH
29165: LD_VAR 0 7
29169: PPUSH
29170: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29174: LD_VAR 0 18
29178: PPUSH
29179: CALL_OW 181
// end ; continue ;
29183: GO 28835
// end ; if not cleaners or not tmp in cleaners then
29185: LD_VAR 0 6
29189: NOT
29190: PUSH
29191: LD_VAR 0 13
29195: PUSH
29196: LD_VAR 0 6
29200: IN
29201: NOT
29202: OR
29203: IFFALSE 29510
// begin if dep then
29205: LD_VAR 0 17
29209: IFFALSE 29345
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29211: LD_ADDR_VAR 0 16
29215: PUSH
29216: LD_VAR 0 17
29220: PUSH
29221: LD_INT 1
29223: ARRAY
29224: PPUSH
29225: CALL_OW 250
29229: PPUSH
29230: LD_VAR 0 17
29234: PUSH
29235: LD_INT 1
29237: ARRAY
29238: PPUSH
29239: CALL_OW 254
29243: PPUSH
29244: LD_INT 5
29246: PPUSH
29247: CALL_OW 272
29251: PUSH
29252: LD_VAR 0 17
29256: PUSH
29257: LD_INT 1
29259: ARRAY
29260: PPUSH
29261: CALL_OW 251
29265: PPUSH
29266: LD_VAR 0 17
29270: PUSH
29271: LD_INT 1
29273: ARRAY
29274: PPUSH
29275: CALL_OW 254
29279: PPUSH
29280: LD_INT 5
29282: PPUSH
29283: CALL_OW 273
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29292: LD_VAR 0 16
29296: PUSH
29297: LD_INT 1
29299: ARRAY
29300: PPUSH
29301: LD_VAR 0 16
29305: PUSH
29306: LD_INT 2
29308: ARRAY
29309: PPUSH
29310: CALL_OW 488
29314: IFFALSE 29345
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29316: LD_VAR 0 13
29320: PPUSH
29321: LD_VAR 0 16
29325: PUSH
29326: LD_INT 1
29328: ARRAY
29329: PPUSH
29330: LD_VAR 0 16
29334: PUSH
29335: LD_INT 2
29337: ARRAY
29338: PPUSH
29339: CALL_OW 111
// continue ;
29343: GO 28835
// end ; end ; r := GetDir ( tmp ) ;
29345: LD_ADDR_VAR 0 15
29349: PUSH
29350: LD_VAR 0 13
29354: PPUSH
29355: CALL_OW 254
29359: ST_TO_ADDR
// if r = 5 then
29360: LD_VAR 0 15
29364: PUSH
29365: LD_INT 5
29367: EQUAL
29368: IFFALSE 29378
// r := 0 ;
29370: LD_ADDR_VAR 0 15
29374: PUSH
29375: LD_INT 0
29377: ST_TO_ADDR
// for j = r to 5 do
29378: LD_ADDR_VAR 0 10
29382: PUSH
29383: DOUBLE
29384: LD_VAR 0 15
29388: DEC
29389: ST_TO_ADDR
29390: LD_INT 5
29392: PUSH
29393: FOR_TO
29394: IFFALSE 29508
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29396: LD_ADDR_VAR 0 11
29400: PUSH
29401: LD_VAR 0 13
29405: PPUSH
29406: CALL_OW 250
29410: PPUSH
29411: LD_VAR 0 10
29415: PPUSH
29416: LD_INT 2
29418: PPUSH
29419: CALL_OW 272
29423: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29424: LD_ADDR_VAR 0 12
29428: PUSH
29429: LD_VAR 0 13
29433: PPUSH
29434: CALL_OW 251
29438: PPUSH
29439: LD_VAR 0 10
29443: PPUSH
29444: LD_INT 2
29446: PPUSH
29447: CALL_OW 273
29451: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29452: LD_VAR 0 11
29456: PPUSH
29457: LD_VAR 0 12
29461: PPUSH
29462: CALL_OW 488
29466: PUSH
29467: LD_VAR 0 11
29471: PPUSH
29472: LD_VAR 0 12
29476: PPUSH
29477: CALL_OW 428
29481: NOT
29482: AND
29483: IFFALSE 29506
// begin ComMoveXY ( tmp , _x , _y ) ;
29485: LD_VAR 0 13
29489: PPUSH
29490: LD_VAR 0 11
29494: PPUSH
29495: LD_VAR 0 12
29499: PPUSH
29500: CALL_OW 111
// break ;
29504: GO 29508
// end ; end ;
29506: GO 29393
29508: POP
29509: POP
// end ; end ;
29510: GO 28835
29512: POP
29513: POP
// end ;
29514: LD_VAR 0 8
29518: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29519: LD_INT 0
29521: PPUSH
// result := true ;
29522: LD_ADDR_VAR 0 3
29526: PUSH
29527: LD_INT 1
29529: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29530: LD_VAR 0 2
29534: PUSH
29535: LD_INT 24
29537: DOUBLE
29538: EQUAL
29539: IFTRUE 29549
29541: LD_INT 33
29543: DOUBLE
29544: EQUAL
29545: IFTRUE 29549
29547: GO 29574
29549: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29550: LD_ADDR_VAR 0 3
29554: PUSH
29555: LD_INT 32
29557: PPUSH
29558: LD_VAR 0 1
29562: PPUSH
29563: CALL_OW 321
29567: PUSH
29568: LD_INT 2
29570: EQUAL
29571: ST_TO_ADDR
29572: GO 29890
29574: LD_INT 20
29576: DOUBLE
29577: EQUAL
29578: IFTRUE 29582
29580: GO 29607
29582: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29583: LD_ADDR_VAR 0 3
29587: PUSH
29588: LD_INT 6
29590: PPUSH
29591: LD_VAR 0 1
29595: PPUSH
29596: CALL_OW 321
29600: PUSH
29601: LD_INT 2
29603: EQUAL
29604: ST_TO_ADDR
29605: GO 29890
29607: LD_INT 22
29609: DOUBLE
29610: EQUAL
29611: IFTRUE 29621
29613: LD_INT 36
29615: DOUBLE
29616: EQUAL
29617: IFTRUE 29621
29619: GO 29646
29621: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29622: LD_ADDR_VAR 0 3
29626: PUSH
29627: LD_INT 15
29629: PPUSH
29630: LD_VAR 0 1
29634: PPUSH
29635: CALL_OW 321
29639: PUSH
29640: LD_INT 2
29642: EQUAL
29643: ST_TO_ADDR
29644: GO 29890
29646: LD_INT 30
29648: DOUBLE
29649: EQUAL
29650: IFTRUE 29654
29652: GO 29679
29654: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29655: LD_ADDR_VAR 0 3
29659: PUSH
29660: LD_INT 20
29662: PPUSH
29663: LD_VAR 0 1
29667: PPUSH
29668: CALL_OW 321
29672: PUSH
29673: LD_INT 2
29675: EQUAL
29676: ST_TO_ADDR
29677: GO 29890
29679: LD_INT 28
29681: DOUBLE
29682: EQUAL
29683: IFTRUE 29693
29685: LD_INT 21
29687: DOUBLE
29688: EQUAL
29689: IFTRUE 29693
29691: GO 29718
29693: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29694: LD_ADDR_VAR 0 3
29698: PUSH
29699: LD_INT 21
29701: PPUSH
29702: LD_VAR 0 1
29706: PPUSH
29707: CALL_OW 321
29711: PUSH
29712: LD_INT 2
29714: EQUAL
29715: ST_TO_ADDR
29716: GO 29890
29718: LD_INT 16
29720: DOUBLE
29721: EQUAL
29722: IFTRUE 29726
29724: GO 29751
29726: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29727: LD_ADDR_VAR 0 3
29731: PUSH
29732: LD_INT 84
29734: PPUSH
29735: LD_VAR 0 1
29739: PPUSH
29740: CALL_OW 321
29744: PUSH
29745: LD_INT 2
29747: EQUAL
29748: ST_TO_ADDR
29749: GO 29890
29751: LD_INT 19
29753: DOUBLE
29754: EQUAL
29755: IFTRUE 29765
29757: LD_INT 23
29759: DOUBLE
29760: EQUAL
29761: IFTRUE 29765
29763: GO 29790
29765: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29766: LD_ADDR_VAR 0 3
29770: PUSH
29771: LD_INT 83
29773: PPUSH
29774: LD_VAR 0 1
29778: PPUSH
29779: CALL_OW 321
29783: PUSH
29784: LD_INT 2
29786: EQUAL
29787: ST_TO_ADDR
29788: GO 29890
29790: LD_INT 17
29792: DOUBLE
29793: EQUAL
29794: IFTRUE 29798
29796: GO 29823
29798: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29799: LD_ADDR_VAR 0 3
29803: PUSH
29804: LD_INT 39
29806: PPUSH
29807: LD_VAR 0 1
29811: PPUSH
29812: CALL_OW 321
29816: PUSH
29817: LD_INT 2
29819: EQUAL
29820: ST_TO_ADDR
29821: GO 29890
29823: LD_INT 18
29825: DOUBLE
29826: EQUAL
29827: IFTRUE 29831
29829: GO 29856
29831: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29832: LD_ADDR_VAR 0 3
29836: PUSH
29837: LD_INT 40
29839: PPUSH
29840: LD_VAR 0 1
29844: PPUSH
29845: CALL_OW 321
29849: PUSH
29850: LD_INT 2
29852: EQUAL
29853: ST_TO_ADDR
29854: GO 29890
29856: LD_INT 27
29858: DOUBLE
29859: EQUAL
29860: IFTRUE 29864
29862: GO 29889
29864: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29865: LD_ADDR_VAR 0 3
29869: PUSH
29870: LD_INT 35
29872: PPUSH
29873: LD_VAR 0 1
29877: PPUSH
29878: CALL_OW 321
29882: PUSH
29883: LD_INT 2
29885: EQUAL
29886: ST_TO_ADDR
29887: GO 29890
29889: POP
// end ;
29890: LD_VAR 0 3
29894: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29895: LD_INT 0
29897: PPUSH
29898: PPUSH
29899: PPUSH
29900: PPUSH
29901: PPUSH
29902: PPUSH
29903: PPUSH
29904: PPUSH
29905: PPUSH
29906: PPUSH
29907: PPUSH
// result := false ;
29908: LD_ADDR_VAR 0 6
29912: PUSH
29913: LD_INT 0
29915: ST_TO_ADDR
// if btype = b_depot then
29916: LD_VAR 0 2
29920: PUSH
29921: LD_INT 0
29923: EQUAL
29924: IFFALSE 29936
// begin result := true ;
29926: LD_ADDR_VAR 0 6
29930: PUSH
29931: LD_INT 1
29933: ST_TO_ADDR
// exit ;
29934: GO 30762
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29936: LD_VAR 0 1
29940: NOT
29941: PUSH
29942: LD_VAR 0 1
29946: PPUSH
29947: CALL_OW 266
29951: PUSH
29952: LD_INT 0
29954: PUSH
29955: LD_INT 1
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: IN
29962: NOT
29963: OR
29964: PUSH
29965: LD_VAR 0 2
29969: NOT
29970: OR
29971: PUSH
29972: LD_VAR 0 5
29976: PUSH
29977: LD_INT 0
29979: PUSH
29980: LD_INT 1
29982: PUSH
29983: LD_INT 2
29985: PUSH
29986: LD_INT 3
29988: PUSH
29989: LD_INT 4
29991: PUSH
29992: LD_INT 5
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: IN
30003: NOT
30004: OR
30005: PUSH
30006: LD_VAR 0 3
30010: PPUSH
30011: LD_VAR 0 4
30015: PPUSH
30016: CALL_OW 488
30020: NOT
30021: OR
30022: IFFALSE 30026
// exit ;
30024: GO 30762
// side := GetSide ( depot ) ;
30026: LD_ADDR_VAR 0 9
30030: PUSH
30031: LD_VAR 0 1
30035: PPUSH
30036: CALL_OW 255
30040: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30041: LD_VAR 0 9
30045: PPUSH
30046: LD_VAR 0 2
30050: PPUSH
30051: CALL 29519 0 2
30055: NOT
30056: IFFALSE 30060
// exit ;
30058: GO 30762
// pom := GetBase ( depot ) ;
30060: LD_ADDR_VAR 0 10
30064: PUSH
30065: LD_VAR 0 1
30069: PPUSH
30070: CALL_OW 274
30074: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30075: LD_ADDR_VAR 0 11
30079: PUSH
30080: LD_VAR 0 2
30084: PPUSH
30085: LD_VAR 0 1
30089: PPUSH
30090: CALL_OW 248
30094: PPUSH
30095: CALL_OW 450
30099: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30100: LD_VAR 0 10
30104: PPUSH
30105: LD_INT 1
30107: PPUSH
30108: CALL_OW 275
30112: PUSH
30113: LD_VAR 0 11
30117: PUSH
30118: LD_INT 1
30120: ARRAY
30121: GREATEREQUAL
30122: PUSH
30123: LD_VAR 0 10
30127: PPUSH
30128: LD_INT 2
30130: PPUSH
30131: CALL_OW 275
30135: PUSH
30136: LD_VAR 0 11
30140: PUSH
30141: LD_INT 2
30143: ARRAY
30144: GREATEREQUAL
30145: AND
30146: PUSH
30147: LD_VAR 0 10
30151: PPUSH
30152: LD_INT 3
30154: PPUSH
30155: CALL_OW 275
30159: PUSH
30160: LD_VAR 0 11
30164: PUSH
30165: LD_INT 3
30167: ARRAY
30168: GREATEREQUAL
30169: AND
30170: NOT
30171: IFFALSE 30175
// exit ;
30173: GO 30762
// if GetBType ( depot ) = b_depot then
30175: LD_VAR 0 1
30179: PPUSH
30180: CALL_OW 266
30184: PUSH
30185: LD_INT 0
30187: EQUAL
30188: IFFALSE 30200
// dist := 28 else
30190: LD_ADDR_VAR 0 14
30194: PUSH
30195: LD_INT 28
30197: ST_TO_ADDR
30198: GO 30208
// dist := 36 ;
30200: LD_ADDR_VAR 0 14
30204: PUSH
30205: LD_INT 36
30207: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30208: LD_VAR 0 1
30212: PPUSH
30213: LD_VAR 0 3
30217: PPUSH
30218: LD_VAR 0 4
30222: PPUSH
30223: CALL_OW 297
30227: PUSH
30228: LD_VAR 0 14
30232: GREATER
30233: IFFALSE 30237
// exit ;
30235: GO 30762
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30237: LD_ADDR_VAR 0 12
30241: PUSH
30242: LD_VAR 0 2
30246: PPUSH
30247: LD_VAR 0 3
30251: PPUSH
30252: LD_VAR 0 4
30256: PPUSH
30257: LD_VAR 0 5
30261: PPUSH
30262: LD_VAR 0 1
30266: PPUSH
30267: CALL_OW 248
30271: PPUSH
30272: LD_INT 0
30274: PPUSH
30275: CALL 30767 0 6
30279: ST_TO_ADDR
// if not hexes then
30280: LD_VAR 0 12
30284: NOT
30285: IFFALSE 30289
// exit ;
30287: GO 30762
// hex := GetHexInfo ( x , y ) ;
30289: LD_ADDR_VAR 0 15
30293: PUSH
30294: LD_VAR 0 3
30298: PPUSH
30299: LD_VAR 0 4
30303: PPUSH
30304: CALL_OW 546
30308: ST_TO_ADDR
// if hex [ 1 ] then
30309: LD_VAR 0 15
30313: PUSH
30314: LD_INT 1
30316: ARRAY
30317: IFFALSE 30321
// exit ;
30319: GO 30762
// height := hex [ 2 ] ;
30321: LD_ADDR_VAR 0 13
30325: PUSH
30326: LD_VAR 0 15
30330: PUSH
30331: LD_INT 2
30333: ARRAY
30334: ST_TO_ADDR
// for i = 1 to hexes do
30335: LD_ADDR_VAR 0 7
30339: PUSH
30340: DOUBLE
30341: LD_INT 1
30343: DEC
30344: ST_TO_ADDR
30345: LD_VAR 0 12
30349: PUSH
30350: FOR_TO
30351: IFFALSE 30681
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30353: LD_VAR 0 12
30357: PUSH
30358: LD_VAR 0 7
30362: ARRAY
30363: PUSH
30364: LD_INT 1
30366: ARRAY
30367: PPUSH
30368: LD_VAR 0 12
30372: PUSH
30373: LD_VAR 0 7
30377: ARRAY
30378: PUSH
30379: LD_INT 2
30381: ARRAY
30382: PPUSH
30383: CALL_OW 488
30387: NOT
30388: PUSH
30389: LD_VAR 0 12
30393: PUSH
30394: LD_VAR 0 7
30398: ARRAY
30399: PUSH
30400: LD_INT 1
30402: ARRAY
30403: PPUSH
30404: LD_VAR 0 12
30408: PUSH
30409: LD_VAR 0 7
30413: ARRAY
30414: PUSH
30415: LD_INT 2
30417: ARRAY
30418: PPUSH
30419: CALL_OW 428
30423: PUSH
30424: LD_INT 0
30426: GREATER
30427: OR
30428: PUSH
30429: LD_VAR 0 12
30433: PUSH
30434: LD_VAR 0 7
30438: ARRAY
30439: PUSH
30440: LD_INT 1
30442: ARRAY
30443: PPUSH
30444: LD_VAR 0 12
30448: PUSH
30449: LD_VAR 0 7
30453: ARRAY
30454: PUSH
30455: LD_INT 2
30457: ARRAY
30458: PPUSH
30459: CALL_OW 351
30463: OR
30464: IFFALSE 30470
// exit ;
30466: POP
30467: POP
30468: GO 30762
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30470: LD_ADDR_VAR 0 8
30474: PUSH
30475: LD_VAR 0 12
30479: PUSH
30480: LD_VAR 0 7
30484: ARRAY
30485: PUSH
30486: LD_INT 1
30488: ARRAY
30489: PPUSH
30490: LD_VAR 0 12
30494: PUSH
30495: LD_VAR 0 7
30499: ARRAY
30500: PUSH
30501: LD_INT 2
30503: ARRAY
30504: PPUSH
30505: CALL_OW 546
30509: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30510: LD_VAR 0 8
30514: PUSH
30515: LD_INT 1
30517: ARRAY
30518: PUSH
30519: LD_VAR 0 8
30523: PUSH
30524: LD_INT 2
30526: ARRAY
30527: PUSH
30528: LD_VAR 0 13
30532: PUSH
30533: LD_INT 2
30535: PLUS
30536: GREATER
30537: OR
30538: PUSH
30539: LD_VAR 0 8
30543: PUSH
30544: LD_INT 2
30546: ARRAY
30547: PUSH
30548: LD_VAR 0 13
30552: PUSH
30553: LD_INT 2
30555: MINUS
30556: LESS
30557: OR
30558: PUSH
30559: LD_VAR 0 8
30563: PUSH
30564: LD_INT 3
30566: ARRAY
30567: PUSH
30568: LD_INT 0
30570: PUSH
30571: LD_INT 8
30573: PUSH
30574: LD_INT 9
30576: PUSH
30577: LD_INT 10
30579: PUSH
30580: LD_INT 11
30582: PUSH
30583: LD_INT 12
30585: PUSH
30586: LD_INT 13
30588: PUSH
30589: LD_INT 16
30591: PUSH
30592: LD_INT 17
30594: PUSH
30595: LD_INT 18
30597: PUSH
30598: LD_INT 19
30600: PUSH
30601: LD_INT 20
30603: PUSH
30604: LD_INT 21
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: IN
30622: NOT
30623: OR
30624: PUSH
30625: LD_VAR 0 8
30629: PUSH
30630: LD_INT 5
30632: ARRAY
30633: NOT
30634: OR
30635: PUSH
30636: LD_VAR 0 8
30640: PUSH
30641: LD_INT 6
30643: ARRAY
30644: PUSH
30645: LD_INT 1
30647: PUSH
30648: LD_INT 2
30650: PUSH
30651: LD_INT 7
30653: PUSH
30654: LD_INT 9
30656: PUSH
30657: LD_INT 10
30659: PUSH
30660: LD_INT 11
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: IN
30671: NOT
30672: OR
30673: IFFALSE 30679
// exit ;
30675: POP
30676: POP
30677: GO 30762
// end ;
30679: GO 30350
30681: POP
30682: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30683: LD_VAR 0 9
30687: PPUSH
30688: LD_VAR 0 3
30692: PPUSH
30693: LD_VAR 0 4
30697: PPUSH
30698: LD_INT 20
30700: PPUSH
30701: CALL 22685 0 4
30705: PUSH
30706: LD_INT 4
30708: ARRAY
30709: IFFALSE 30713
// exit ;
30711: GO 30762
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30713: LD_VAR 0 2
30717: PUSH
30718: LD_INT 29
30720: PUSH
30721: LD_INT 30
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: IN
30728: PUSH
30729: LD_VAR 0 3
30733: PPUSH
30734: LD_VAR 0 4
30738: PPUSH
30739: LD_VAR 0 9
30743: PPUSH
30744: CALL_OW 440
30748: NOT
30749: AND
30750: IFFALSE 30754
// exit ;
30752: GO 30762
// result := true ;
30754: LD_ADDR_VAR 0 6
30758: PUSH
30759: LD_INT 1
30761: ST_TO_ADDR
// end ;
30762: LD_VAR 0 6
30766: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30767: LD_INT 0
30769: PPUSH
30770: PPUSH
30771: PPUSH
30772: PPUSH
30773: PPUSH
30774: PPUSH
30775: PPUSH
30776: PPUSH
30777: PPUSH
30778: PPUSH
30779: PPUSH
30780: PPUSH
30781: PPUSH
30782: PPUSH
30783: PPUSH
30784: PPUSH
30785: PPUSH
30786: PPUSH
30787: PPUSH
30788: PPUSH
30789: PPUSH
30790: PPUSH
30791: PPUSH
30792: PPUSH
30793: PPUSH
30794: PPUSH
30795: PPUSH
30796: PPUSH
30797: PPUSH
30798: PPUSH
30799: PPUSH
30800: PPUSH
30801: PPUSH
30802: PPUSH
30803: PPUSH
30804: PPUSH
30805: PPUSH
30806: PPUSH
30807: PPUSH
30808: PPUSH
30809: PPUSH
30810: PPUSH
30811: PPUSH
30812: PPUSH
30813: PPUSH
30814: PPUSH
30815: PPUSH
30816: PPUSH
30817: PPUSH
30818: PPUSH
30819: PPUSH
30820: PPUSH
30821: PPUSH
30822: PPUSH
30823: PPUSH
30824: PPUSH
30825: PPUSH
30826: PPUSH
// result = [ ] ;
30827: LD_ADDR_VAR 0 7
30831: PUSH
30832: EMPTY
30833: ST_TO_ADDR
// temp_list = [ ] ;
30834: LD_ADDR_VAR 0 9
30838: PUSH
30839: EMPTY
30840: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30841: LD_VAR 0 4
30845: PUSH
30846: LD_INT 0
30848: PUSH
30849: LD_INT 1
30851: PUSH
30852: LD_INT 2
30854: PUSH
30855: LD_INT 3
30857: PUSH
30858: LD_INT 4
30860: PUSH
30861: LD_INT 5
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: IN
30872: NOT
30873: PUSH
30874: LD_VAR 0 1
30878: PUSH
30879: LD_INT 0
30881: PUSH
30882: LD_INT 1
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: IN
30889: PUSH
30890: LD_VAR 0 5
30894: PUSH
30895: LD_INT 1
30897: PUSH
30898: LD_INT 2
30900: PUSH
30901: LD_INT 3
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: LIST
30908: IN
30909: NOT
30910: AND
30911: OR
30912: IFFALSE 30916
// exit ;
30914: GO 49307
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30916: LD_VAR 0 1
30920: PUSH
30921: LD_INT 6
30923: PUSH
30924: LD_INT 7
30926: PUSH
30927: LD_INT 8
30929: PUSH
30930: LD_INT 13
30932: PUSH
30933: LD_INT 12
30935: PUSH
30936: LD_INT 15
30938: PUSH
30939: LD_INT 11
30941: PUSH
30942: LD_INT 14
30944: PUSH
30945: LD_INT 10
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: IN
30959: IFFALSE 30969
// btype = b_lab ;
30961: LD_ADDR_VAR 0 1
30965: PUSH
30966: LD_INT 6
30968: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30969: LD_VAR 0 6
30973: PUSH
30974: LD_INT 0
30976: PUSH
30977: LD_INT 1
30979: PUSH
30980: LD_INT 2
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: LIST
30987: IN
30988: NOT
30989: PUSH
30990: LD_VAR 0 1
30994: PUSH
30995: LD_INT 0
30997: PUSH
30998: LD_INT 1
31000: PUSH
31001: LD_INT 2
31003: PUSH
31004: LD_INT 3
31006: PUSH
31007: LD_INT 6
31009: PUSH
31010: LD_INT 36
31012: PUSH
31013: LD_INT 4
31015: PUSH
31016: LD_INT 5
31018: PUSH
31019: LD_INT 31
31021: PUSH
31022: LD_INT 32
31024: PUSH
31025: LD_INT 33
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: IN
31041: NOT
31042: PUSH
31043: LD_VAR 0 6
31047: PUSH
31048: LD_INT 1
31050: EQUAL
31051: AND
31052: OR
31053: PUSH
31054: LD_VAR 0 1
31058: PUSH
31059: LD_INT 2
31061: PUSH
31062: LD_INT 3
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: IN
31069: NOT
31070: PUSH
31071: LD_VAR 0 6
31075: PUSH
31076: LD_INT 2
31078: EQUAL
31079: AND
31080: OR
31081: IFFALSE 31091
// mode = 0 ;
31083: LD_ADDR_VAR 0 6
31087: PUSH
31088: LD_INT 0
31090: ST_TO_ADDR
// case mode of 0 :
31091: LD_VAR 0 6
31095: PUSH
31096: LD_INT 0
31098: DOUBLE
31099: EQUAL
31100: IFTRUE 31104
31102: GO 42557
31104: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31105: LD_ADDR_VAR 0 11
31109: PUSH
31110: LD_INT 0
31112: PUSH
31113: LD_INT 0
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: LD_INT 0
31122: PUSH
31123: LD_INT 1
31125: NEG
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 1
31133: PUSH
31134: LD_INT 0
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 1
31143: PUSH
31144: LD_INT 1
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 0
31153: PUSH
31154: LD_INT 1
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 1
31163: NEG
31164: PUSH
31165: LD_INT 0
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 1
31174: NEG
31175: PUSH
31176: LD_INT 1
31178: NEG
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 1
31186: NEG
31187: PUSH
31188: LD_INT 2
31190: NEG
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 0
31198: PUSH
31199: LD_INT 2
31201: NEG
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 1
31209: PUSH
31210: LD_INT 1
31212: NEG
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 1
31220: PUSH
31221: LD_INT 2
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 0
31230: PUSH
31231: LD_INT 2
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 1
31240: NEG
31241: PUSH
31242: LD_INT 1
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 1
31251: PUSH
31252: LD_INT 3
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 0
31261: PUSH
31262: LD_INT 3
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 1
31271: NEG
31272: PUSH
31273: LD_INT 2
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31298: LD_ADDR_VAR 0 12
31302: PUSH
31303: LD_INT 0
31305: PUSH
31306: LD_INT 0
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 0
31315: PUSH
31316: LD_INT 1
31318: NEG
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 1
31326: PUSH
31327: LD_INT 0
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 1
31336: PUSH
31337: LD_INT 1
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 0
31346: PUSH
31347: LD_INT 1
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 1
31356: NEG
31357: PUSH
31358: LD_INT 0
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 1
31367: NEG
31368: PUSH
31369: LD_INT 1
31371: NEG
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 1
31379: PUSH
31380: LD_INT 1
31382: NEG
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 2
31390: PUSH
31391: LD_INT 0
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 2
31400: PUSH
31401: LD_INT 1
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 1
31410: NEG
31411: PUSH
31412: LD_INT 1
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 2
31421: NEG
31422: PUSH
31423: LD_INT 0
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 2
31432: NEG
31433: PUSH
31434: LD_INT 1
31436: NEG
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 2
31444: NEG
31445: PUSH
31446: LD_INT 1
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 3
31455: NEG
31456: PUSH
31457: LD_INT 0
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 3
31466: NEG
31467: PUSH
31468: LD_INT 1
31470: NEG
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31494: LD_ADDR_VAR 0 13
31498: PUSH
31499: LD_INT 0
31501: PUSH
31502: LD_INT 0
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 0
31511: PUSH
31512: LD_INT 1
31514: NEG
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 1
31522: PUSH
31523: LD_INT 0
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 1
31532: PUSH
31533: LD_INT 1
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 0
31542: PUSH
31543: LD_INT 1
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 1
31552: NEG
31553: PUSH
31554: LD_INT 0
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 1
31563: NEG
31564: PUSH
31565: LD_INT 1
31567: NEG
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 1
31575: NEG
31576: PUSH
31577: LD_INT 2
31579: NEG
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 2
31587: PUSH
31588: LD_INT 1
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 2
31597: PUSH
31598: LD_INT 2
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: LD_INT 1
31607: PUSH
31608: LD_INT 2
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 2
31617: NEG
31618: PUSH
31619: LD_INT 1
31621: NEG
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 2
31629: NEG
31630: PUSH
31631: LD_INT 2
31633: NEG
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 2
31641: NEG
31642: PUSH
31643: LD_INT 3
31645: NEG
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 3
31653: NEG
31654: PUSH
31655: LD_INT 2
31657: NEG
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 3
31665: NEG
31666: PUSH
31667: LD_INT 3
31669: NEG
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31693: LD_ADDR_VAR 0 14
31697: PUSH
31698: LD_INT 0
31700: PUSH
31701: LD_INT 0
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 0
31710: PUSH
31711: LD_INT 1
31713: NEG
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 1
31721: PUSH
31722: LD_INT 0
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 1
31731: PUSH
31732: LD_INT 1
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 0
31741: PUSH
31742: LD_INT 1
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: PUSH
31749: LD_INT 1
31751: NEG
31752: PUSH
31753: LD_INT 0
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 1
31762: NEG
31763: PUSH
31764: LD_INT 1
31766: NEG
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 1
31774: NEG
31775: PUSH
31776: LD_INT 2
31778: NEG
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 0
31786: PUSH
31787: LD_INT 2
31789: NEG
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 1
31797: PUSH
31798: LD_INT 1
31800: NEG
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 1
31808: PUSH
31809: LD_INT 2
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 0
31818: PUSH
31819: LD_INT 2
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 1
31828: NEG
31829: PUSH
31830: LD_INT 1
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 1
31839: NEG
31840: PUSH
31841: LD_INT 3
31843: NEG
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 0
31851: PUSH
31852: LD_INT 3
31854: NEG
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 1
31862: PUSH
31863: LD_INT 2
31865: NEG
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31889: LD_ADDR_VAR 0 15
31893: PUSH
31894: LD_INT 0
31896: PUSH
31897: LD_INT 0
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 0
31906: PUSH
31907: LD_INT 1
31909: NEG
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 1
31917: PUSH
31918: LD_INT 0
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 1
31927: PUSH
31928: LD_INT 1
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 0
31937: PUSH
31938: LD_INT 1
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: LD_INT 1
31947: NEG
31948: PUSH
31949: LD_INT 0
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 1
31958: NEG
31959: PUSH
31960: LD_INT 1
31962: NEG
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: LD_INT 1
31970: PUSH
31971: LD_INT 1
31973: NEG
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 2
31981: PUSH
31982: LD_INT 0
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 2
31991: PUSH
31992: LD_INT 1
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 1
32001: NEG
32002: PUSH
32003: LD_INT 1
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 2
32012: NEG
32013: PUSH
32014: LD_INT 0
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 2
32023: NEG
32024: PUSH
32025: LD_INT 1
32027: NEG
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 2
32035: PUSH
32036: LD_INT 1
32038: NEG
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 3
32046: PUSH
32047: LD_INT 0
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 3
32056: PUSH
32057: LD_INT 1
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32082: LD_ADDR_VAR 0 16
32086: PUSH
32087: LD_INT 0
32089: PUSH
32090: LD_INT 0
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 0
32099: PUSH
32100: LD_INT 1
32102: NEG
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 1
32110: PUSH
32111: LD_INT 0
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 1
32120: PUSH
32121: LD_INT 1
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 0
32130: PUSH
32131: LD_INT 1
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 1
32140: NEG
32141: PUSH
32142: LD_INT 0
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 1
32151: NEG
32152: PUSH
32153: LD_INT 1
32155: NEG
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: LD_INT 1
32163: NEG
32164: PUSH
32165: LD_INT 2
32167: NEG
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 2
32175: PUSH
32176: LD_INT 1
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 2
32185: PUSH
32186: LD_INT 2
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 1
32195: PUSH
32196: LD_INT 2
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 2
32205: NEG
32206: PUSH
32207: LD_INT 1
32209: NEG
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 2
32217: NEG
32218: PUSH
32219: LD_INT 2
32221: NEG
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 3
32229: PUSH
32230: LD_INT 2
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 3
32239: PUSH
32240: LD_INT 3
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 2
32249: PUSH
32250: LD_INT 3
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32275: LD_ADDR_VAR 0 17
32279: PUSH
32280: LD_INT 0
32282: PUSH
32283: LD_INT 0
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 0
32292: PUSH
32293: LD_INT 1
32295: NEG
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 1
32303: PUSH
32304: LD_INT 0
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 1
32313: PUSH
32314: LD_INT 1
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 0
32323: PUSH
32324: LD_INT 1
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 1
32333: NEG
32334: PUSH
32335: LD_INT 0
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 1
32344: NEG
32345: PUSH
32346: LD_INT 1
32348: NEG
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 1
32356: NEG
32357: PUSH
32358: LD_INT 2
32360: NEG
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 0
32368: PUSH
32369: LD_INT 2
32371: NEG
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 1
32379: PUSH
32380: LD_INT 1
32382: NEG
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 2
32390: PUSH
32391: LD_INT 0
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 2
32400: PUSH
32401: LD_INT 1
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 2
32410: PUSH
32411: LD_INT 2
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 1
32420: PUSH
32421: LD_INT 2
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 0
32430: PUSH
32431: LD_INT 2
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 1
32440: NEG
32441: PUSH
32442: LD_INT 1
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 2
32451: NEG
32452: PUSH
32453: LD_INT 0
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 2
32462: NEG
32463: PUSH
32464: LD_INT 1
32466: NEG
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 2
32474: NEG
32475: PUSH
32476: LD_INT 2
32478: NEG
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32505: LD_ADDR_VAR 0 18
32509: PUSH
32510: LD_INT 0
32512: PUSH
32513: LD_INT 0
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 0
32522: PUSH
32523: LD_INT 1
32525: NEG
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 1
32533: PUSH
32534: LD_INT 0
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: LD_INT 1
32543: PUSH
32544: LD_INT 1
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: LD_INT 0
32553: PUSH
32554: LD_INT 1
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 1
32563: NEG
32564: PUSH
32565: LD_INT 0
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: LD_INT 1
32574: NEG
32575: PUSH
32576: LD_INT 1
32578: NEG
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 1
32586: NEG
32587: PUSH
32588: LD_INT 2
32590: NEG
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 0
32598: PUSH
32599: LD_INT 2
32601: NEG
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 1
32609: PUSH
32610: LD_INT 1
32612: NEG
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 2
32620: PUSH
32621: LD_INT 0
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 2
32630: PUSH
32631: LD_INT 1
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: LD_INT 2
32640: PUSH
32641: LD_INT 2
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 1
32650: PUSH
32651: LD_INT 2
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 0
32660: PUSH
32661: LD_INT 2
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 1
32670: NEG
32671: PUSH
32672: LD_INT 1
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 2
32681: NEG
32682: PUSH
32683: LD_INT 0
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 2
32692: NEG
32693: PUSH
32694: LD_INT 1
32696: NEG
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 2
32704: NEG
32705: PUSH
32706: LD_INT 2
32708: NEG
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32735: LD_ADDR_VAR 0 19
32739: PUSH
32740: LD_INT 0
32742: PUSH
32743: LD_INT 0
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 0
32752: PUSH
32753: LD_INT 1
32755: NEG
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 1
32763: PUSH
32764: LD_INT 0
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 1
32773: PUSH
32774: LD_INT 1
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 0
32783: PUSH
32784: LD_INT 1
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 1
32793: NEG
32794: PUSH
32795: LD_INT 0
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 1
32804: NEG
32805: PUSH
32806: LD_INT 1
32808: NEG
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 1
32816: NEG
32817: PUSH
32818: LD_INT 2
32820: NEG
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 0
32828: PUSH
32829: LD_INT 2
32831: NEG
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 1
32839: PUSH
32840: LD_INT 1
32842: NEG
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 2
32850: PUSH
32851: LD_INT 0
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 2
32860: PUSH
32861: LD_INT 1
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 2
32870: PUSH
32871: LD_INT 2
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 1
32880: PUSH
32881: LD_INT 2
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 0
32890: PUSH
32891: LD_INT 2
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 1
32900: NEG
32901: PUSH
32902: LD_INT 1
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 2
32911: NEG
32912: PUSH
32913: LD_INT 0
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 2
32922: NEG
32923: PUSH
32924: LD_INT 1
32926: NEG
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 2
32934: NEG
32935: PUSH
32936: LD_INT 2
32938: NEG
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32965: LD_ADDR_VAR 0 20
32969: PUSH
32970: LD_INT 0
32972: PUSH
32973: LD_INT 0
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: LD_INT 0
32982: PUSH
32983: LD_INT 1
32985: NEG
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 1
32993: PUSH
32994: LD_INT 0
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 1
33003: PUSH
33004: LD_INT 1
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 0
33013: PUSH
33014: LD_INT 1
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 1
33023: NEG
33024: PUSH
33025: LD_INT 0
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 1
33034: NEG
33035: PUSH
33036: LD_INT 1
33038: NEG
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 1
33046: NEG
33047: PUSH
33048: LD_INT 2
33050: NEG
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 0
33058: PUSH
33059: LD_INT 2
33061: NEG
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 1
33069: PUSH
33070: LD_INT 1
33072: NEG
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 2
33080: PUSH
33081: LD_INT 0
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 2
33090: PUSH
33091: LD_INT 1
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 2
33100: PUSH
33101: LD_INT 2
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 1
33110: PUSH
33111: LD_INT 2
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 0
33120: PUSH
33121: LD_INT 2
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 1
33130: NEG
33131: PUSH
33132: LD_INT 1
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 2
33141: NEG
33142: PUSH
33143: LD_INT 0
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 2
33152: NEG
33153: PUSH
33154: LD_INT 1
33156: NEG
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 2
33164: NEG
33165: PUSH
33166: LD_INT 2
33168: NEG
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33195: LD_ADDR_VAR 0 21
33199: PUSH
33200: LD_INT 0
33202: PUSH
33203: LD_INT 0
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: LD_INT 0
33212: PUSH
33213: LD_INT 1
33215: NEG
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 1
33223: PUSH
33224: LD_INT 0
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 1
33233: PUSH
33234: LD_INT 1
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 0
33243: PUSH
33244: LD_INT 1
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 1
33253: NEG
33254: PUSH
33255: LD_INT 0
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 1
33264: NEG
33265: PUSH
33266: LD_INT 1
33268: NEG
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 1
33276: NEG
33277: PUSH
33278: LD_INT 2
33280: NEG
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 0
33288: PUSH
33289: LD_INT 2
33291: NEG
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 1
33299: PUSH
33300: LD_INT 1
33302: NEG
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 2
33310: PUSH
33311: LD_INT 0
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: LD_INT 2
33320: PUSH
33321: LD_INT 1
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 2
33330: PUSH
33331: LD_INT 2
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 1
33340: PUSH
33341: LD_INT 2
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 0
33350: PUSH
33351: LD_INT 2
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 1
33360: NEG
33361: PUSH
33362: LD_INT 1
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 2
33371: NEG
33372: PUSH
33373: LD_INT 0
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 2
33382: NEG
33383: PUSH
33384: LD_INT 1
33386: NEG
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 2
33394: NEG
33395: PUSH
33396: LD_INT 2
33398: NEG
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33425: LD_ADDR_VAR 0 22
33429: PUSH
33430: LD_INT 0
33432: PUSH
33433: LD_INT 0
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 0
33442: PUSH
33443: LD_INT 1
33445: NEG
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 1
33453: PUSH
33454: LD_INT 0
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 1
33463: PUSH
33464: LD_INT 1
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 0
33473: PUSH
33474: LD_INT 1
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 1
33483: NEG
33484: PUSH
33485: LD_INT 0
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 1
33494: NEG
33495: PUSH
33496: LD_INT 1
33498: NEG
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 1
33506: NEG
33507: PUSH
33508: LD_INT 2
33510: NEG
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 0
33518: PUSH
33519: LD_INT 2
33521: NEG
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: LD_INT 1
33529: PUSH
33530: LD_INT 1
33532: NEG
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PUSH
33538: LD_INT 2
33540: PUSH
33541: LD_INT 0
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 2
33550: PUSH
33551: LD_INT 1
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 2
33560: PUSH
33561: LD_INT 2
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 1
33570: PUSH
33571: LD_INT 2
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 0
33580: PUSH
33581: LD_INT 2
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 1
33590: NEG
33591: PUSH
33592: LD_INT 1
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 2
33601: NEG
33602: PUSH
33603: LD_INT 0
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 2
33612: NEG
33613: PUSH
33614: LD_INT 1
33616: NEG
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 2
33624: NEG
33625: PUSH
33626: LD_INT 2
33628: NEG
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33655: LD_ADDR_VAR 0 23
33659: PUSH
33660: LD_INT 0
33662: PUSH
33663: LD_INT 0
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: LD_INT 0
33672: PUSH
33673: LD_INT 1
33675: NEG
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 1
33683: PUSH
33684: LD_INT 0
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 1
33693: PUSH
33694: LD_INT 1
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 0
33703: PUSH
33704: LD_INT 1
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 1
33713: NEG
33714: PUSH
33715: LD_INT 0
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 1
33724: NEG
33725: PUSH
33726: LD_INT 1
33728: NEG
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 1
33736: NEG
33737: PUSH
33738: LD_INT 2
33740: NEG
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 0
33748: PUSH
33749: LD_INT 2
33751: NEG
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 1
33759: PUSH
33760: LD_INT 1
33762: NEG
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 2
33770: PUSH
33771: LD_INT 0
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 2
33780: PUSH
33781: LD_INT 1
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 2
33790: PUSH
33791: LD_INT 2
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 1
33800: PUSH
33801: LD_INT 2
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 0
33810: PUSH
33811: LD_INT 2
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 1
33820: NEG
33821: PUSH
33822: LD_INT 1
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 2
33831: NEG
33832: PUSH
33833: LD_INT 0
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 2
33842: NEG
33843: PUSH
33844: LD_INT 1
33846: NEG
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 2
33854: NEG
33855: PUSH
33856: LD_INT 2
33858: NEG
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 2
33866: NEG
33867: PUSH
33868: LD_INT 3
33870: NEG
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 1
33878: NEG
33879: PUSH
33880: LD_INT 3
33882: NEG
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 1
33890: PUSH
33891: LD_INT 2
33893: NEG
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 2
33901: PUSH
33902: LD_INT 1
33904: NEG
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33935: LD_ADDR_VAR 0 24
33939: PUSH
33940: LD_INT 0
33942: PUSH
33943: LD_INT 0
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: LD_INT 0
33952: PUSH
33953: LD_INT 1
33955: NEG
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 1
33963: PUSH
33964: LD_INT 0
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 1
33973: PUSH
33974: LD_INT 1
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 0
33983: PUSH
33984: LD_INT 1
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: LD_INT 1
33993: NEG
33994: PUSH
33995: LD_INT 0
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 1
34004: NEG
34005: PUSH
34006: LD_INT 1
34008: NEG
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: LD_INT 1
34016: NEG
34017: PUSH
34018: LD_INT 2
34020: NEG
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 0
34028: PUSH
34029: LD_INT 2
34031: NEG
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: LD_INT 1
34039: PUSH
34040: LD_INT 1
34042: NEG
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 2
34050: PUSH
34051: LD_INT 0
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 2
34060: PUSH
34061: LD_INT 1
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 2
34070: PUSH
34071: LD_INT 2
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 1
34080: PUSH
34081: LD_INT 2
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 0
34090: PUSH
34091: LD_INT 2
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 1
34100: NEG
34101: PUSH
34102: LD_INT 1
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 2
34111: NEG
34112: PUSH
34113: LD_INT 0
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 2
34122: NEG
34123: PUSH
34124: LD_INT 1
34126: NEG
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 2
34134: NEG
34135: PUSH
34136: LD_INT 2
34138: NEG
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 1
34146: PUSH
34147: LD_INT 2
34149: NEG
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 2
34157: PUSH
34158: LD_INT 1
34160: NEG
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 3
34168: PUSH
34169: LD_INT 1
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 3
34178: PUSH
34179: LD_INT 2
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34211: LD_ADDR_VAR 0 25
34215: PUSH
34216: LD_INT 0
34218: PUSH
34219: LD_INT 0
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: LD_INT 0
34228: PUSH
34229: LD_INT 1
34231: NEG
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 1
34239: PUSH
34240: LD_INT 0
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 1
34249: PUSH
34250: LD_INT 1
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 0
34259: PUSH
34260: LD_INT 1
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 1
34269: NEG
34270: PUSH
34271: LD_INT 0
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 1
34280: NEG
34281: PUSH
34282: LD_INT 1
34284: NEG
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: LD_INT 1
34292: NEG
34293: PUSH
34294: LD_INT 2
34296: NEG
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 0
34304: PUSH
34305: LD_INT 2
34307: NEG
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 1
34315: PUSH
34316: LD_INT 1
34318: NEG
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 2
34326: PUSH
34327: LD_INT 0
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 2
34336: PUSH
34337: LD_INT 1
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 2
34346: PUSH
34347: LD_INT 2
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: LD_INT 1
34356: PUSH
34357: LD_INT 2
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 0
34366: PUSH
34367: LD_INT 2
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 1
34376: NEG
34377: PUSH
34378: LD_INT 1
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 2
34387: NEG
34388: PUSH
34389: LD_INT 0
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 2
34398: NEG
34399: PUSH
34400: LD_INT 1
34402: NEG
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 2
34410: NEG
34411: PUSH
34412: LD_INT 2
34414: NEG
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 3
34422: PUSH
34423: LD_INT 1
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 3
34432: PUSH
34433: LD_INT 2
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 2
34442: PUSH
34443: LD_INT 3
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: LD_INT 1
34452: PUSH
34453: LD_INT 3
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34485: LD_ADDR_VAR 0 26
34489: PUSH
34490: LD_INT 0
34492: PUSH
34493: LD_INT 0
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 0
34502: PUSH
34503: LD_INT 1
34505: NEG
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 1
34513: PUSH
34514: LD_INT 0
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 1
34523: PUSH
34524: LD_INT 1
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 0
34533: PUSH
34534: LD_INT 1
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 1
34543: NEG
34544: PUSH
34545: LD_INT 0
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 1
34554: NEG
34555: PUSH
34556: LD_INT 1
34558: NEG
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 1
34566: NEG
34567: PUSH
34568: LD_INT 2
34570: NEG
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 0
34578: PUSH
34579: LD_INT 2
34581: NEG
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 1
34589: PUSH
34590: LD_INT 1
34592: NEG
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 2
34600: PUSH
34601: LD_INT 0
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 2
34610: PUSH
34611: LD_INT 1
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 2
34620: PUSH
34621: LD_INT 2
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 1
34630: PUSH
34631: LD_INT 2
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 0
34640: PUSH
34641: LD_INT 2
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 1
34650: NEG
34651: PUSH
34652: LD_INT 1
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 2
34661: NEG
34662: PUSH
34663: LD_INT 0
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 2
34672: NEG
34673: PUSH
34674: LD_INT 1
34676: NEG
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 2
34684: NEG
34685: PUSH
34686: LD_INT 2
34688: NEG
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 2
34696: PUSH
34697: LD_INT 3
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 1
34706: PUSH
34707: LD_INT 3
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 1
34716: NEG
34717: PUSH
34718: LD_INT 2
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 2
34727: NEG
34728: PUSH
34729: LD_INT 1
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34761: LD_ADDR_VAR 0 27
34765: PUSH
34766: LD_INT 0
34768: PUSH
34769: LD_INT 0
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 0
34778: PUSH
34779: LD_INT 1
34781: NEG
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 1
34789: PUSH
34790: LD_INT 0
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 1
34799: PUSH
34800: LD_INT 1
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 0
34809: PUSH
34810: LD_INT 1
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 1
34819: NEG
34820: PUSH
34821: LD_INT 0
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 1
34830: NEG
34831: PUSH
34832: LD_INT 1
34834: NEG
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 1
34842: NEG
34843: PUSH
34844: LD_INT 2
34846: NEG
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 0
34854: PUSH
34855: LD_INT 2
34857: NEG
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 1
34865: PUSH
34866: LD_INT 1
34868: NEG
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 2
34876: PUSH
34877: LD_INT 0
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 2
34886: PUSH
34887: LD_INT 1
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 2
34896: PUSH
34897: LD_INT 2
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 1
34906: PUSH
34907: LD_INT 2
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 0
34916: PUSH
34917: LD_INT 2
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 1
34926: NEG
34927: PUSH
34928: LD_INT 1
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 2
34937: NEG
34938: PUSH
34939: LD_INT 0
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 2
34948: NEG
34949: PUSH
34950: LD_INT 1
34952: NEG
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 2
34960: NEG
34961: PUSH
34962: LD_INT 2
34964: NEG
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 1
34972: NEG
34973: PUSH
34974: LD_INT 2
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 2
34983: NEG
34984: PUSH
34985: LD_INT 1
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 3
34994: NEG
34995: PUSH
34996: LD_INT 1
34998: NEG
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 3
35006: NEG
35007: PUSH
35008: LD_INT 2
35010: NEG
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35041: LD_ADDR_VAR 0 28
35045: PUSH
35046: LD_INT 0
35048: PUSH
35049: LD_INT 0
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 0
35058: PUSH
35059: LD_INT 1
35061: NEG
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 1
35069: PUSH
35070: LD_INT 0
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 1
35079: PUSH
35080: LD_INT 1
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PUSH
35087: LD_INT 0
35089: PUSH
35090: LD_INT 1
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 1
35099: NEG
35100: PUSH
35101: LD_INT 0
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 1
35110: NEG
35111: PUSH
35112: LD_INT 1
35114: NEG
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 1
35122: NEG
35123: PUSH
35124: LD_INT 2
35126: NEG
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 0
35134: PUSH
35135: LD_INT 2
35137: NEG
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 1
35145: PUSH
35146: LD_INT 1
35148: NEG
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 2
35156: PUSH
35157: LD_INT 0
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 2
35166: PUSH
35167: LD_INT 1
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 2
35176: PUSH
35177: LD_INT 2
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 1
35186: PUSH
35187: LD_INT 2
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 0
35196: PUSH
35197: LD_INT 2
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 1
35206: NEG
35207: PUSH
35208: LD_INT 1
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 2
35217: NEG
35218: PUSH
35219: LD_INT 0
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 2
35228: NEG
35229: PUSH
35230: LD_INT 1
35232: NEG
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 2
35240: NEG
35241: PUSH
35242: LD_INT 2
35244: NEG
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 2
35252: NEG
35253: PUSH
35254: LD_INT 3
35256: NEG
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 1
35264: NEG
35265: PUSH
35266: LD_INT 3
35268: NEG
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 3
35276: NEG
35277: PUSH
35278: LD_INT 1
35280: NEG
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: LD_INT 3
35288: NEG
35289: PUSH
35290: LD_INT 2
35292: NEG
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35323: LD_ADDR_VAR 0 29
35327: PUSH
35328: LD_INT 0
35330: PUSH
35331: LD_INT 0
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: LD_INT 0
35340: PUSH
35341: LD_INT 1
35343: NEG
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 1
35351: PUSH
35352: LD_INT 0
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 1
35361: PUSH
35362: LD_INT 1
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 0
35371: PUSH
35372: LD_INT 1
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 1
35381: NEG
35382: PUSH
35383: LD_INT 0
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 1
35392: NEG
35393: PUSH
35394: LD_INT 1
35396: NEG
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 1
35404: NEG
35405: PUSH
35406: LD_INT 2
35408: NEG
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 0
35416: PUSH
35417: LD_INT 2
35419: NEG
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 1
35427: PUSH
35428: LD_INT 1
35430: NEG
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 2
35438: PUSH
35439: LD_INT 0
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 2
35448: PUSH
35449: LD_INT 1
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 1
35458: PUSH
35459: LD_INT 2
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 0
35468: PUSH
35469: LD_INT 2
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 1
35478: NEG
35479: PUSH
35480: LD_INT 1
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 2
35489: NEG
35490: PUSH
35491: LD_INT 1
35493: NEG
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 2
35501: NEG
35502: PUSH
35503: LD_INT 2
35505: NEG
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 2
35513: NEG
35514: PUSH
35515: LD_INT 3
35517: NEG
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 2
35525: PUSH
35526: LD_INT 1
35528: NEG
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 3
35536: PUSH
35537: LD_INT 1
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 1
35546: PUSH
35547: LD_INT 3
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: LD_INT 1
35556: NEG
35557: PUSH
35558: LD_INT 2
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 3
35567: NEG
35568: PUSH
35569: LD_INT 2
35571: NEG
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35602: LD_ADDR_VAR 0 30
35606: PUSH
35607: LD_INT 0
35609: PUSH
35610: LD_INT 0
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 0
35619: PUSH
35620: LD_INT 1
35622: NEG
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: PUSH
35628: LD_INT 1
35630: PUSH
35631: LD_INT 0
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: LD_INT 1
35640: PUSH
35641: LD_INT 1
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 0
35650: PUSH
35651: LD_INT 1
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 1
35660: NEG
35661: PUSH
35662: LD_INT 0
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 1
35671: NEG
35672: PUSH
35673: LD_INT 1
35675: NEG
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 1
35683: NEG
35684: PUSH
35685: LD_INT 2
35687: NEG
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 0
35695: PUSH
35696: LD_INT 2
35698: NEG
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 1
35706: PUSH
35707: LD_INT 1
35709: NEG
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: LD_INT 2
35717: PUSH
35718: LD_INT 0
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 2
35727: PUSH
35728: LD_INT 1
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 2
35737: PUSH
35738: LD_INT 2
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 1
35747: PUSH
35748: LD_INT 2
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 1
35757: NEG
35758: PUSH
35759: LD_INT 1
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 2
35768: NEG
35769: PUSH
35770: LD_INT 0
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 2
35779: NEG
35780: PUSH
35781: LD_INT 1
35783: NEG
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 1
35791: NEG
35792: PUSH
35793: LD_INT 3
35795: NEG
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 1
35803: PUSH
35804: LD_INT 2
35806: NEG
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 3
35814: PUSH
35815: LD_INT 2
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 2
35824: PUSH
35825: LD_INT 3
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 2
35834: NEG
35835: PUSH
35836: LD_INT 1
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 3
35845: NEG
35846: PUSH
35847: LD_INT 1
35849: NEG
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35880: LD_ADDR_VAR 0 31
35884: PUSH
35885: LD_INT 0
35887: PUSH
35888: LD_INT 0
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 0
35897: PUSH
35898: LD_INT 1
35900: NEG
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 1
35908: PUSH
35909: LD_INT 0
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 1
35918: PUSH
35919: LD_INT 1
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 0
35928: PUSH
35929: LD_INT 1
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 1
35938: NEG
35939: PUSH
35940: LD_INT 0
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 1
35949: NEG
35950: PUSH
35951: LD_INT 1
35953: NEG
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 1
35961: NEG
35962: PUSH
35963: LD_INT 2
35965: NEG
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 1
35973: PUSH
35974: LD_INT 1
35976: NEG
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 2
35984: PUSH
35985: LD_INT 0
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 2
35994: PUSH
35995: LD_INT 1
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 2
36004: PUSH
36005: LD_INT 2
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 1
36014: PUSH
36015: LD_INT 2
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 0
36024: PUSH
36025: LD_INT 2
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 1
36034: NEG
36035: PUSH
36036: LD_INT 1
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 2
36045: NEG
36046: PUSH
36047: LD_INT 1
36049: NEG
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 2
36057: NEG
36058: PUSH
36059: LD_INT 2
36061: NEG
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 2
36069: NEG
36070: PUSH
36071: LD_INT 3
36073: NEG
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 2
36081: PUSH
36082: LD_INT 1
36084: NEG
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 3
36092: PUSH
36093: LD_INT 1
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 1
36102: PUSH
36103: LD_INT 3
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 1
36112: NEG
36113: PUSH
36114: LD_INT 2
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 3
36123: NEG
36124: PUSH
36125: LD_INT 2
36127: NEG
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36158: LD_ADDR_VAR 0 32
36162: PUSH
36163: LD_INT 0
36165: PUSH
36166: LD_INT 0
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 0
36175: PUSH
36176: LD_INT 1
36178: NEG
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 1
36186: PUSH
36187: LD_INT 0
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 1
36196: PUSH
36197: LD_INT 1
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 0
36206: PUSH
36207: LD_INT 1
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 1
36216: NEG
36217: PUSH
36218: LD_INT 0
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 1
36227: NEG
36228: PUSH
36229: LD_INT 1
36231: NEG
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: LD_INT 1
36239: NEG
36240: PUSH
36241: LD_INT 2
36243: NEG
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 0
36251: PUSH
36252: LD_INT 2
36254: NEG
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 1
36262: PUSH
36263: LD_INT 1
36265: NEG
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 2
36273: PUSH
36274: LD_INT 1
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 2
36283: PUSH
36284: LD_INT 2
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 1
36293: PUSH
36294: LD_INT 2
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 0
36303: PUSH
36304: LD_INT 2
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 1
36313: NEG
36314: PUSH
36315: LD_INT 1
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 2
36324: NEG
36325: PUSH
36326: LD_INT 0
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 2
36335: NEG
36336: PUSH
36337: LD_INT 1
36339: NEG
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 1
36347: NEG
36348: PUSH
36349: LD_INT 3
36351: NEG
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 1
36359: PUSH
36360: LD_INT 2
36362: NEG
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 3
36370: PUSH
36371: LD_INT 2
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 2
36380: PUSH
36381: LD_INT 3
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 2
36390: NEG
36391: PUSH
36392: LD_INT 1
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 3
36401: NEG
36402: PUSH
36403: LD_INT 1
36405: NEG
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36436: LD_ADDR_VAR 0 33
36440: PUSH
36441: LD_INT 0
36443: PUSH
36444: LD_INT 0
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 0
36453: PUSH
36454: LD_INT 1
36456: NEG
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 1
36464: PUSH
36465: LD_INT 0
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 1
36474: PUSH
36475: LD_INT 1
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 0
36484: PUSH
36485: LD_INT 1
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 1
36494: NEG
36495: PUSH
36496: LD_INT 0
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 1
36505: NEG
36506: PUSH
36507: LD_INT 1
36509: NEG
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 1
36517: NEG
36518: PUSH
36519: LD_INT 2
36521: NEG
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 1
36529: PUSH
36530: LD_INT 1
36532: NEG
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 2
36540: PUSH
36541: LD_INT 0
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: LD_INT 2
36550: PUSH
36551: LD_INT 1
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 1
36560: PUSH
36561: LD_INT 2
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 0
36570: PUSH
36571: LD_INT 2
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 1
36580: NEG
36581: PUSH
36582: LD_INT 1
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 2
36591: NEG
36592: PUSH
36593: LD_INT 0
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 2
36602: NEG
36603: PUSH
36604: LD_INT 1
36606: NEG
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 2
36614: NEG
36615: PUSH
36616: LD_INT 2
36618: NEG
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 2
36626: NEG
36627: PUSH
36628: LD_INT 3
36630: NEG
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 2
36638: PUSH
36639: LD_INT 1
36641: NEG
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 3
36649: PUSH
36650: LD_INT 1
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: LD_INT 1
36659: PUSH
36660: LD_INT 3
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 1
36669: NEG
36670: PUSH
36671: LD_INT 2
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 3
36680: NEG
36681: PUSH
36682: LD_INT 2
36684: NEG
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36715: LD_ADDR_VAR 0 34
36719: PUSH
36720: LD_INT 0
36722: PUSH
36723: LD_INT 0
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 0
36732: PUSH
36733: LD_INT 1
36735: NEG
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 1
36743: PUSH
36744: LD_INT 0
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 1
36753: PUSH
36754: LD_INT 1
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 0
36763: PUSH
36764: LD_INT 1
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 1
36773: NEG
36774: PUSH
36775: LD_INT 0
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 1
36784: NEG
36785: PUSH
36786: LD_INT 1
36788: NEG
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 1
36796: NEG
36797: PUSH
36798: LD_INT 2
36800: NEG
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 0
36808: PUSH
36809: LD_INT 2
36811: NEG
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 1
36819: PUSH
36820: LD_INT 1
36822: NEG
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 2
36830: PUSH
36831: LD_INT 1
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 2
36840: PUSH
36841: LD_INT 2
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 1
36850: PUSH
36851: LD_INT 2
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 1
36860: NEG
36861: PUSH
36862: LD_INT 1
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 2
36871: NEG
36872: PUSH
36873: LD_INT 0
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: LD_INT 2
36882: NEG
36883: PUSH
36884: LD_INT 1
36886: NEG
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 2
36894: NEG
36895: PUSH
36896: LD_INT 2
36898: NEG
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 1
36906: NEG
36907: PUSH
36908: LD_INT 3
36910: NEG
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 1
36918: PUSH
36919: LD_INT 2
36921: NEG
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: PUSH
36927: LD_INT 3
36929: PUSH
36930: LD_INT 2
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: LD_INT 2
36939: PUSH
36940: LD_INT 3
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 2
36949: NEG
36950: PUSH
36951: LD_INT 1
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 3
36960: NEG
36961: PUSH
36962: LD_INT 1
36964: NEG
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36995: LD_ADDR_VAR 0 35
36999: PUSH
37000: LD_INT 0
37002: PUSH
37003: LD_INT 0
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 0
37012: PUSH
37013: LD_INT 1
37015: NEG
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 1
37023: PUSH
37024: LD_INT 0
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 1
37033: PUSH
37034: LD_INT 1
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 0
37043: PUSH
37044: LD_INT 1
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 1
37053: NEG
37054: PUSH
37055: LD_INT 0
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 1
37064: NEG
37065: PUSH
37066: LD_INT 1
37068: NEG
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 2
37076: PUSH
37077: LD_INT 1
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: LD_INT 2
37086: NEG
37087: PUSH
37088: LD_INT 1
37090: NEG
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37107: LD_ADDR_VAR 0 36
37111: PUSH
37112: LD_INT 0
37114: PUSH
37115: LD_INT 0
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 0
37124: PUSH
37125: LD_INT 1
37127: NEG
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 1
37135: PUSH
37136: LD_INT 0
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 1
37145: PUSH
37146: LD_INT 1
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 0
37155: PUSH
37156: LD_INT 1
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 1
37165: NEG
37166: PUSH
37167: LD_INT 0
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 1
37176: NEG
37177: PUSH
37178: LD_INT 1
37180: NEG
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 1
37188: NEG
37189: PUSH
37190: LD_INT 2
37192: NEG
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 1
37200: PUSH
37201: LD_INT 2
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37219: LD_ADDR_VAR 0 37
37223: PUSH
37224: LD_INT 0
37226: PUSH
37227: LD_INT 0
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 0
37236: PUSH
37237: LD_INT 1
37239: NEG
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 1
37247: PUSH
37248: LD_INT 0
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 1
37257: PUSH
37258: LD_INT 1
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 0
37267: PUSH
37268: LD_INT 1
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 1
37277: NEG
37278: PUSH
37279: LD_INT 0
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 1
37288: NEG
37289: PUSH
37290: LD_INT 1
37292: NEG
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 1
37300: PUSH
37301: LD_INT 1
37303: NEG
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 1
37311: NEG
37312: PUSH
37313: LD_INT 1
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37331: LD_ADDR_VAR 0 38
37335: PUSH
37336: LD_INT 0
37338: PUSH
37339: LD_INT 0
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 0
37348: PUSH
37349: LD_INT 1
37351: NEG
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 1
37359: PUSH
37360: LD_INT 0
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 1
37369: PUSH
37370: LD_INT 1
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 0
37379: PUSH
37380: LD_INT 1
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 1
37389: NEG
37390: PUSH
37391: LD_INT 0
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: LD_INT 1
37400: NEG
37401: PUSH
37402: LD_INT 1
37404: NEG
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 2
37412: PUSH
37413: LD_INT 1
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 2
37422: NEG
37423: PUSH
37424: LD_INT 1
37426: NEG
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37443: LD_ADDR_VAR 0 39
37447: PUSH
37448: LD_INT 0
37450: PUSH
37451: LD_INT 0
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 0
37460: PUSH
37461: LD_INT 1
37463: NEG
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 1
37471: PUSH
37472: LD_INT 0
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: LD_INT 1
37481: PUSH
37482: LD_INT 1
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: LD_INT 0
37491: PUSH
37492: LD_INT 1
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 1
37501: NEG
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 1
37512: NEG
37513: PUSH
37514: LD_INT 1
37516: NEG
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 1
37524: NEG
37525: PUSH
37526: LD_INT 2
37528: NEG
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 1
37536: PUSH
37537: LD_INT 2
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37555: LD_ADDR_VAR 0 40
37559: PUSH
37560: LD_INT 0
37562: PUSH
37563: LD_INT 0
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 0
37572: PUSH
37573: LD_INT 1
37575: NEG
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 1
37583: PUSH
37584: LD_INT 0
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 1
37593: PUSH
37594: LD_INT 1
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 0
37603: PUSH
37604: LD_INT 1
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 1
37613: NEG
37614: PUSH
37615: LD_INT 0
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 1
37624: NEG
37625: PUSH
37626: LD_INT 1
37628: NEG
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 1
37636: PUSH
37637: LD_INT 1
37639: NEG
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 1
37647: NEG
37648: PUSH
37649: LD_INT 1
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37667: LD_ADDR_VAR 0 41
37671: PUSH
37672: LD_INT 0
37674: PUSH
37675: LD_INT 0
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 0
37684: PUSH
37685: LD_INT 1
37687: NEG
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 1
37695: PUSH
37696: LD_INT 0
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 1
37705: PUSH
37706: LD_INT 1
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 0
37715: PUSH
37716: LD_INT 1
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 1
37725: NEG
37726: PUSH
37727: LD_INT 0
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 1
37736: NEG
37737: PUSH
37738: LD_INT 1
37740: NEG
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PUSH
37746: LD_INT 1
37748: NEG
37749: PUSH
37750: LD_INT 2
37752: NEG
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 1
37760: PUSH
37761: LD_INT 1
37763: NEG
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 2
37771: PUSH
37772: LD_INT 0
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 2
37781: PUSH
37782: LD_INT 1
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 2
37791: PUSH
37792: LD_INT 2
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 1
37801: PUSH
37802: LD_INT 2
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 1
37811: NEG
37812: PUSH
37813: LD_INT 1
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 2
37822: NEG
37823: PUSH
37824: LD_INT 0
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 2
37833: NEG
37834: PUSH
37835: LD_INT 1
37837: NEG
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 2
37845: NEG
37846: PUSH
37847: LD_INT 2
37849: NEG
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 2
37857: NEG
37858: PUSH
37859: LD_INT 3
37861: NEG
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 2
37869: PUSH
37870: LD_INT 1
37872: NEG
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 3
37880: PUSH
37881: LD_INT 0
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: LD_INT 3
37890: PUSH
37891: LD_INT 1
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 3
37900: PUSH
37901: LD_INT 2
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: LD_INT 3
37910: PUSH
37911: LD_INT 3
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 2
37920: PUSH
37921: LD_INT 3
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 2
37930: NEG
37931: PUSH
37932: LD_INT 1
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 3
37941: NEG
37942: PUSH
37943: LD_INT 0
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 3
37952: NEG
37953: PUSH
37954: LD_INT 1
37956: NEG
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 3
37964: NEG
37965: PUSH
37966: LD_INT 2
37968: NEG
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 3
37976: NEG
37977: PUSH
37978: LD_INT 3
37980: NEG
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38017: LD_ADDR_VAR 0 42
38021: PUSH
38022: LD_INT 0
38024: PUSH
38025: LD_INT 0
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 0
38034: PUSH
38035: LD_INT 1
38037: NEG
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 1
38045: PUSH
38046: LD_INT 0
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 1
38055: PUSH
38056: LD_INT 1
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 0
38065: PUSH
38066: LD_INT 1
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 1
38075: NEG
38076: PUSH
38077: LD_INT 0
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 1
38086: NEG
38087: PUSH
38088: LD_INT 1
38090: NEG
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 1
38098: NEG
38099: PUSH
38100: LD_INT 2
38102: NEG
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: LD_INT 0
38110: PUSH
38111: LD_INT 2
38113: NEG
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 1
38121: PUSH
38122: LD_INT 1
38124: NEG
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PUSH
38130: LD_INT 2
38132: PUSH
38133: LD_INT 1
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 2
38142: PUSH
38143: LD_INT 2
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 1
38152: PUSH
38153: LD_INT 2
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 0
38162: PUSH
38163: LD_INT 2
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 1
38172: NEG
38173: PUSH
38174: LD_INT 1
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 2
38183: NEG
38184: PUSH
38185: LD_INT 1
38187: NEG
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 2
38195: NEG
38196: PUSH
38197: LD_INT 2
38199: NEG
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 2
38207: NEG
38208: PUSH
38209: LD_INT 3
38211: NEG
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 1
38219: NEG
38220: PUSH
38221: LD_INT 3
38223: NEG
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 0
38231: PUSH
38232: LD_INT 3
38234: NEG
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 1
38242: PUSH
38243: LD_INT 2
38245: NEG
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 3
38253: PUSH
38254: LD_INT 2
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 3
38263: PUSH
38264: LD_INT 3
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 2
38273: PUSH
38274: LD_INT 3
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 1
38283: PUSH
38284: LD_INT 3
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 0
38293: PUSH
38294: LD_INT 3
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 1
38303: NEG
38304: PUSH
38305: LD_INT 2
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 3
38314: NEG
38315: PUSH
38316: LD_INT 2
38318: NEG
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 3
38326: NEG
38327: PUSH
38328: LD_INT 3
38330: NEG
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: LIST
38345: LIST
38346: LIST
38347: LIST
38348: LIST
38349: LIST
38350: LIST
38351: LIST
38352: LIST
38353: LIST
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38367: LD_ADDR_VAR 0 43
38371: PUSH
38372: LD_INT 0
38374: PUSH
38375: LD_INT 0
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 0
38384: PUSH
38385: LD_INT 1
38387: NEG
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 1
38395: PUSH
38396: LD_INT 0
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 1
38405: PUSH
38406: LD_INT 1
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 0
38415: PUSH
38416: LD_INT 1
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 1
38425: NEG
38426: PUSH
38427: LD_INT 0
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: LD_INT 1
38436: NEG
38437: PUSH
38438: LD_INT 1
38440: NEG
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: LD_INT 1
38448: NEG
38449: PUSH
38450: LD_INT 2
38452: NEG
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 0
38460: PUSH
38461: LD_INT 2
38463: NEG
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 1
38471: PUSH
38472: LD_INT 1
38474: NEG
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 2
38482: PUSH
38483: LD_INT 0
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 2
38492: PUSH
38493: LD_INT 1
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 1
38502: PUSH
38503: LD_INT 2
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 0
38512: PUSH
38513: LD_INT 2
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 1
38522: NEG
38523: PUSH
38524: LD_INT 1
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 2
38533: NEG
38534: PUSH
38535: LD_INT 0
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 2
38544: NEG
38545: PUSH
38546: LD_INT 1
38548: NEG
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 1
38556: NEG
38557: PUSH
38558: LD_INT 3
38560: NEG
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 0
38568: PUSH
38569: LD_INT 3
38571: NEG
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 1
38579: PUSH
38580: LD_INT 2
38582: NEG
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: PUSH
38588: LD_INT 2
38590: PUSH
38591: LD_INT 1
38593: NEG
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 3
38601: PUSH
38602: LD_INT 0
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 3
38611: PUSH
38612: LD_INT 1
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 1
38621: PUSH
38622: LD_INT 3
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 0
38631: PUSH
38632: LD_INT 3
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 1
38641: NEG
38642: PUSH
38643: LD_INT 2
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 2
38652: NEG
38653: PUSH
38654: LD_INT 1
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 3
38663: NEG
38664: PUSH
38665: LD_INT 0
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 3
38674: NEG
38675: PUSH
38676: LD_INT 1
38678: NEG
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38715: LD_ADDR_VAR 0 44
38719: PUSH
38720: LD_INT 0
38722: PUSH
38723: LD_INT 0
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 0
38732: PUSH
38733: LD_INT 1
38735: NEG
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 1
38743: PUSH
38744: LD_INT 0
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 1
38753: PUSH
38754: LD_INT 1
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 0
38763: PUSH
38764: LD_INT 1
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 1
38773: NEG
38774: PUSH
38775: LD_INT 0
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 1
38784: NEG
38785: PUSH
38786: LD_INT 1
38788: NEG
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 1
38796: NEG
38797: PUSH
38798: LD_INT 2
38800: NEG
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 1
38808: PUSH
38809: LD_INT 1
38811: NEG
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 2
38819: PUSH
38820: LD_INT 0
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 2
38829: PUSH
38830: LD_INT 1
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 2
38839: PUSH
38840: LD_INT 2
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 1
38849: PUSH
38850: LD_INT 2
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 1
38859: NEG
38860: PUSH
38861: LD_INT 1
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 2
38870: NEG
38871: PUSH
38872: LD_INT 0
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 2
38881: NEG
38882: PUSH
38883: LD_INT 1
38885: NEG
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 2
38893: NEG
38894: PUSH
38895: LD_INT 2
38897: NEG
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 2
38905: NEG
38906: PUSH
38907: LD_INT 3
38909: NEG
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 2
38917: PUSH
38918: LD_INT 1
38920: NEG
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 3
38928: PUSH
38929: LD_INT 0
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 3
38938: PUSH
38939: LD_INT 1
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 3
38948: PUSH
38949: LD_INT 2
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 3
38958: PUSH
38959: LD_INT 3
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 2
38968: PUSH
38969: LD_INT 3
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 2
38978: NEG
38979: PUSH
38980: LD_INT 1
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 3
38989: NEG
38990: PUSH
38991: LD_INT 0
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 3
39000: NEG
39001: PUSH
39002: LD_INT 1
39004: NEG
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 3
39012: NEG
39013: PUSH
39014: LD_INT 2
39016: NEG
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 3
39024: NEG
39025: PUSH
39026: LD_INT 3
39028: NEG
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39065: LD_ADDR_VAR 0 45
39069: PUSH
39070: LD_INT 0
39072: PUSH
39073: LD_INT 0
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 0
39082: PUSH
39083: LD_INT 1
39085: NEG
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 1
39093: PUSH
39094: LD_INT 0
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 1
39103: PUSH
39104: LD_INT 1
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 0
39113: PUSH
39114: LD_INT 1
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 1
39123: NEG
39124: PUSH
39125: LD_INT 0
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 1
39134: NEG
39135: PUSH
39136: LD_INT 1
39138: NEG
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 1
39146: NEG
39147: PUSH
39148: LD_INT 2
39150: NEG
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 0
39158: PUSH
39159: LD_INT 2
39161: NEG
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 1
39169: PUSH
39170: LD_INT 1
39172: NEG
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 2
39180: PUSH
39181: LD_INT 1
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 2
39190: PUSH
39191: LD_INT 2
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 1
39200: PUSH
39201: LD_INT 2
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 0
39210: PUSH
39211: LD_INT 2
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 1
39220: NEG
39221: PUSH
39222: LD_INT 1
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 2
39231: NEG
39232: PUSH
39233: LD_INT 1
39235: NEG
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 2
39243: NEG
39244: PUSH
39245: LD_INT 2
39247: NEG
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 2
39255: NEG
39256: PUSH
39257: LD_INT 3
39259: NEG
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 1
39267: NEG
39268: PUSH
39269: LD_INT 3
39271: NEG
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 0
39279: PUSH
39280: LD_INT 3
39282: NEG
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 1
39290: PUSH
39291: LD_INT 2
39293: NEG
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 3
39301: PUSH
39302: LD_INT 2
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 3
39311: PUSH
39312: LD_INT 3
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 2
39321: PUSH
39322: LD_INT 3
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 1
39331: PUSH
39332: LD_INT 3
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 0
39341: PUSH
39342: LD_INT 3
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 1
39351: NEG
39352: PUSH
39353: LD_INT 2
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 3
39362: NEG
39363: PUSH
39364: LD_INT 2
39366: NEG
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 3
39374: NEG
39375: PUSH
39376: LD_INT 3
39378: NEG
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39415: LD_ADDR_VAR 0 46
39419: PUSH
39420: LD_INT 0
39422: PUSH
39423: LD_INT 0
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 0
39432: PUSH
39433: LD_INT 1
39435: NEG
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 1
39443: PUSH
39444: LD_INT 0
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 1
39453: PUSH
39454: LD_INT 1
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 0
39463: PUSH
39464: LD_INT 1
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 1
39473: NEG
39474: PUSH
39475: LD_INT 0
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 1
39484: NEG
39485: PUSH
39486: LD_INT 1
39488: NEG
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 1
39496: NEG
39497: PUSH
39498: LD_INT 2
39500: NEG
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 0
39508: PUSH
39509: LD_INT 2
39511: NEG
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 1
39519: PUSH
39520: LD_INT 1
39522: NEG
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 2
39530: PUSH
39531: LD_INT 0
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 2
39540: PUSH
39541: LD_INT 1
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 1
39550: PUSH
39551: LD_INT 2
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 0
39560: PUSH
39561: LD_INT 2
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: LD_INT 1
39570: NEG
39571: PUSH
39572: LD_INT 1
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 2
39581: NEG
39582: PUSH
39583: LD_INT 0
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 2
39592: NEG
39593: PUSH
39594: LD_INT 1
39596: NEG
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 1
39604: NEG
39605: PUSH
39606: LD_INT 3
39608: NEG
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 0
39616: PUSH
39617: LD_INT 3
39619: NEG
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 1
39627: PUSH
39628: LD_INT 2
39630: NEG
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 2
39638: PUSH
39639: LD_INT 1
39641: NEG
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 3
39649: PUSH
39650: LD_INT 0
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 3
39659: PUSH
39660: LD_INT 1
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 1
39669: PUSH
39670: LD_INT 3
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 0
39679: PUSH
39680: LD_INT 3
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 1
39689: NEG
39690: PUSH
39691: LD_INT 2
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 2
39700: NEG
39701: PUSH
39702: LD_INT 1
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 3
39711: NEG
39712: PUSH
39713: LD_INT 0
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 3
39722: NEG
39723: PUSH
39724: LD_INT 1
39726: NEG
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39763: LD_ADDR_VAR 0 47
39767: PUSH
39768: LD_INT 0
39770: PUSH
39771: LD_INT 0
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 0
39780: PUSH
39781: LD_INT 1
39783: NEG
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 1
39791: PUSH
39792: LD_INT 0
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 1
39801: PUSH
39802: LD_INT 1
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 0
39811: PUSH
39812: LD_INT 1
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 1
39821: NEG
39822: PUSH
39823: LD_INT 0
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 1
39832: NEG
39833: PUSH
39834: LD_INT 1
39836: NEG
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 1
39844: NEG
39845: PUSH
39846: LD_INT 2
39848: NEG
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 0
39856: PUSH
39857: LD_INT 2
39859: NEG
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 1
39867: PUSH
39868: LD_INT 1
39870: NEG
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 2
39878: NEG
39879: PUSH
39880: LD_INT 1
39882: NEG
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 2
39890: NEG
39891: PUSH
39892: LD_INT 2
39894: NEG
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: LIST
39913: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39914: LD_ADDR_VAR 0 48
39918: PUSH
39919: LD_INT 0
39921: PUSH
39922: LD_INT 0
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 0
39931: PUSH
39932: LD_INT 1
39934: NEG
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 1
39942: PUSH
39943: LD_INT 0
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 1
39952: PUSH
39953: LD_INT 1
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 0
39962: PUSH
39963: LD_INT 1
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 1
39972: NEG
39973: PUSH
39974: LD_INT 0
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 1
39983: NEG
39984: PUSH
39985: LD_INT 1
39987: NEG
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 1
39995: NEG
39996: PUSH
39997: LD_INT 2
39999: NEG
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 0
40007: PUSH
40008: LD_INT 2
40010: NEG
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 1
40018: PUSH
40019: LD_INT 1
40021: NEG
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 2
40029: PUSH
40030: LD_INT 0
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 2
40039: PUSH
40040: LD_INT 1
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40061: LD_ADDR_VAR 0 49
40065: PUSH
40066: LD_INT 0
40068: PUSH
40069: LD_INT 0
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 0
40078: PUSH
40079: LD_INT 1
40081: NEG
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 1
40089: PUSH
40090: LD_INT 0
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 1
40099: PUSH
40100: LD_INT 1
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 0
40109: PUSH
40110: LD_INT 1
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 1
40119: NEG
40120: PUSH
40121: LD_INT 0
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 1
40130: NEG
40131: PUSH
40132: LD_INT 1
40134: NEG
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 1
40142: PUSH
40143: LD_INT 1
40145: NEG
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 2
40153: PUSH
40154: LD_INT 0
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 2
40163: PUSH
40164: LD_INT 1
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 2
40173: PUSH
40174: LD_INT 2
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 1
40183: PUSH
40184: LD_INT 2
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40205: LD_ADDR_VAR 0 50
40209: PUSH
40210: LD_INT 0
40212: PUSH
40213: LD_INT 0
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 0
40222: PUSH
40223: LD_INT 1
40225: NEG
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 1
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 1
40243: PUSH
40244: LD_INT 1
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 0
40253: PUSH
40254: LD_INT 1
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 1
40263: NEG
40264: PUSH
40265: LD_INT 0
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 1
40274: NEG
40275: PUSH
40276: LD_INT 1
40278: NEG
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 2
40286: PUSH
40287: LD_INT 1
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 2
40296: PUSH
40297: LD_INT 2
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 1
40306: PUSH
40307: LD_INT 2
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 0
40316: PUSH
40317: LD_INT 2
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 1
40326: NEG
40327: PUSH
40328: LD_INT 1
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40349: LD_ADDR_VAR 0 51
40353: PUSH
40354: LD_INT 0
40356: PUSH
40357: LD_INT 0
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 0
40366: PUSH
40367: LD_INT 1
40369: NEG
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 1
40377: PUSH
40378: LD_INT 0
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 1
40387: PUSH
40388: LD_INT 1
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 0
40397: PUSH
40398: LD_INT 1
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 1
40407: NEG
40408: PUSH
40409: LD_INT 0
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 1
40418: NEG
40419: PUSH
40420: LD_INT 1
40422: NEG
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 1
40430: PUSH
40431: LD_INT 2
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 0
40440: PUSH
40441: LD_INT 2
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 1
40450: NEG
40451: PUSH
40452: LD_INT 1
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 2
40461: NEG
40462: PUSH
40463: LD_INT 0
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 2
40472: NEG
40473: PUSH
40474: LD_INT 1
40476: NEG
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40496: LD_ADDR_VAR 0 52
40500: PUSH
40501: LD_INT 0
40503: PUSH
40504: LD_INT 0
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 0
40513: PUSH
40514: LD_INT 1
40516: NEG
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 1
40524: PUSH
40525: LD_INT 0
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 1
40534: PUSH
40535: LD_INT 1
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 0
40544: PUSH
40545: LD_INT 1
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 1
40554: NEG
40555: PUSH
40556: LD_INT 0
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 1
40565: NEG
40566: PUSH
40567: LD_INT 1
40569: NEG
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 1
40577: NEG
40578: PUSH
40579: LD_INT 2
40581: NEG
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 1
40589: NEG
40590: PUSH
40591: LD_INT 1
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 2
40600: NEG
40601: PUSH
40602: LD_INT 0
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 2
40611: NEG
40612: PUSH
40613: LD_INT 1
40615: NEG
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 2
40623: NEG
40624: PUSH
40625: LD_INT 2
40627: NEG
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40647: LD_ADDR_VAR 0 53
40651: PUSH
40652: LD_INT 0
40654: PUSH
40655: LD_INT 0
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 0
40664: PUSH
40665: LD_INT 1
40667: NEG
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 1
40675: PUSH
40676: LD_INT 0
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 1
40685: PUSH
40686: LD_INT 1
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 0
40695: PUSH
40696: LD_INT 1
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 1
40705: NEG
40706: PUSH
40707: LD_INT 0
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 1
40716: NEG
40717: PUSH
40718: LD_INT 1
40720: NEG
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 1
40728: NEG
40729: PUSH
40730: LD_INT 2
40732: NEG
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 0
40740: PUSH
40741: LD_INT 2
40743: NEG
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 1
40751: PUSH
40752: LD_INT 1
40754: NEG
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 2
40762: PUSH
40763: LD_INT 0
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 2
40772: PUSH
40773: LD_INT 1
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 2
40782: PUSH
40783: LD_INT 2
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 1
40792: PUSH
40793: LD_INT 2
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 0
40802: PUSH
40803: LD_INT 2
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 1
40812: NEG
40813: PUSH
40814: LD_INT 1
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 2
40823: NEG
40824: PUSH
40825: LD_INT 0
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 2
40834: NEG
40835: PUSH
40836: LD_INT 1
40838: NEG
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 2
40846: NEG
40847: PUSH
40848: LD_INT 2
40850: NEG
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40877: LD_ADDR_VAR 0 54
40881: PUSH
40882: LD_INT 0
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: LD_INT 1
40897: NEG
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 1
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 1
40915: PUSH
40916: LD_INT 1
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 0
40925: PUSH
40926: LD_INT 1
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 1
40935: NEG
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 1
40946: NEG
40947: PUSH
40948: LD_INT 1
40950: NEG
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 1
40958: NEG
40959: PUSH
40960: LD_INT 2
40962: NEG
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 0
40970: PUSH
40971: LD_INT 2
40973: NEG
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: LD_INT 1
40984: NEG
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 2
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 2
41002: PUSH
41003: LD_INT 1
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 2
41012: PUSH
41013: LD_INT 2
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 1
41022: PUSH
41023: LD_INT 2
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 0
41032: PUSH
41033: LD_INT 2
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 1
41042: NEG
41043: PUSH
41044: LD_INT 1
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 2
41053: NEG
41054: PUSH
41055: LD_INT 0
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 2
41064: NEG
41065: PUSH
41066: LD_INT 1
41068: NEG
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 2
41076: NEG
41077: PUSH
41078: LD_INT 2
41080: NEG
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41107: LD_ADDR_VAR 0 55
41111: PUSH
41112: LD_INT 0
41114: PUSH
41115: LD_INT 0
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 0
41124: PUSH
41125: LD_INT 1
41127: NEG
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 1
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 1
41145: PUSH
41146: LD_INT 1
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 0
41155: PUSH
41156: LD_INT 1
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 1
41165: NEG
41166: PUSH
41167: LD_INT 0
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 1
41176: NEG
41177: PUSH
41178: LD_INT 1
41180: NEG
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 1
41188: NEG
41189: PUSH
41190: LD_INT 2
41192: NEG
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 0
41200: PUSH
41201: LD_INT 2
41203: NEG
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 1
41211: PUSH
41212: LD_INT 1
41214: NEG
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 2
41222: PUSH
41223: LD_INT 0
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 2
41232: PUSH
41233: LD_INT 1
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 2
41242: PUSH
41243: LD_INT 2
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 1
41252: PUSH
41253: LD_INT 2
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 0
41262: PUSH
41263: LD_INT 2
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 1
41272: NEG
41273: PUSH
41274: LD_INT 1
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 2
41283: NEG
41284: PUSH
41285: LD_INT 0
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 2
41294: NEG
41295: PUSH
41296: LD_INT 1
41298: NEG
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 2
41306: NEG
41307: PUSH
41308: LD_INT 2
41310: NEG
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41337: LD_ADDR_VAR 0 56
41341: PUSH
41342: LD_INT 0
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 0
41354: PUSH
41355: LD_INT 1
41357: NEG
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 1
41365: PUSH
41366: LD_INT 0
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 1
41375: PUSH
41376: LD_INT 1
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 0
41385: PUSH
41386: LD_INT 1
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 1
41395: NEG
41396: PUSH
41397: LD_INT 0
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 1
41406: NEG
41407: PUSH
41408: LD_INT 1
41410: NEG
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 1
41418: NEG
41419: PUSH
41420: LD_INT 2
41422: NEG
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 0
41430: PUSH
41431: LD_INT 2
41433: NEG
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: LD_INT 1
41444: NEG
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 2
41452: PUSH
41453: LD_INT 0
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 2
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 2
41472: PUSH
41473: LD_INT 2
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 1
41482: PUSH
41483: LD_INT 2
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: LD_INT 2
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 1
41502: NEG
41503: PUSH
41504: LD_INT 1
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 2
41513: NEG
41514: PUSH
41515: LD_INT 0
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 2
41524: NEG
41525: PUSH
41526: LD_INT 1
41528: NEG
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 2
41536: NEG
41537: PUSH
41538: LD_INT 2
41540: NEG
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41567: LD_ADDR_VAR 0 57
41571: PUSH
41572: LD_INT 0
41574: PUSH
41575: LD_INT 0
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 0
41584: PUSH
41585: LD_INT 1
41587: NEG
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 1
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 1
41605: PUSH
41606: LD_INT 1
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 0
41615: PUSH
41616: LD_INT 1
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 1
41625: NEG
41626: PUSH
41627: LD_INT 0
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 1
41636: NEG
41637: PUSH
41638: LD_INT 1
41640: NEG
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 1
41648: NEG
41649: PUSH
41650: LD_INT 2
41652: NEG
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 0
41660: PUSH
41661: LD_INT 2
41663: NEG
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 1
41671: PUSH
41672: LD_INT 1
41674: NEG
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 2
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 2
41692: PUSH
41693: LD_INT 1
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 2
41702: PUSH
41703: LD_INT 2
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 1
41712: PUSH
41713: LD_INT 2
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 0
41722: PUSH
41723: LD_INT 2
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 1
41732: NEG
41733: PUSH
41734: LD_INT 1
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 2
41743: NEG
41744: PUSH
41745: LD_INT 0
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 2
41754: NEG
41755: PUSH
41756: LD_INT 1
41758: NEG
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 2
41766: NEG
41767: PUSH
41768: LD_INT 2
41770: NEG
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41797: LD_ADDR_VAR 0 58
41801: PUSH
41802: LD_INT 0
41804: PUSH
41805: LD_INT 0
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 0
41814: PUSH
41815: LD_INT 1
41817: NEG
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 1
41825: PUSH
41826: LD_INT 0
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 1
41835: PUSH
41836: LD_INT 1
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 0
41845: PUSH
41846: LD_INT 1
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 1
41855: NEG
41856: PUSH
41857: LD_INT 0
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 1
41866: NEG
41867: PUSH
41868: LD_INT 1
41870: NEG
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 1
41878: NEG
41879: PUSH
41880: LD_INT 2
41882: NEG
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: LD_INT 2
41893: NEG
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 1
41901: PUSH
41902: LD_INT 1
41904: NEG
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 2
41912: PUSH
41913: LD_INT 0
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 2
41922: PUSH
41923: LD_INT 1
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 2
41932: PUSH
41933: LD_INT 2
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 1
41942: PUSH
41943: LD_INT 2
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 0
41952: PUSH
41953: LD_INT 2
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 1
41962: NEG
41963: PUSH
41964: LD_INT 1
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 2
41973: NEG
41974: PUSH
41975: LD_INT 0
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 2
41984: NEG
41985: PUSH
41986: LD_INT 1
41988: NEG
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 2
41996: NEG
41997: PUSH
41998: LD_INT 2
42000: NEG
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42027: LD_ADDR_VAR 0 59
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: LD_INT 0
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 0
42044: PUSH
42045: LD_INT 1
42047: NEG
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: LD_INT 0
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 1
42065: PUSH
42066: LD_INT 1
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 0
42075: PUSH
42076: LD_INT 1
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 1
42085: NEG
42086: PUSH
42087: LD_INT 0
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 1
42096: NEG
42097: PUSH
42098: LD_INT 1
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42115: LD_ADDR_VAR 0 60
42119: PUSH
42120: LD_INT 0
42122: PUSH
42123: LD_INT 0
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 0
42132: PUSH
42133: LD_INT 1
42135: NEG
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 1
42143: PUSH
42144: LD_INT 0
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 1
42153: PUSH
42154: LD_INT 1
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 0
42163: PUSH
42164: LD_INT 1
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 1
42173: NEG
42174: PUSH
42175: LD_INT 0
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 1
42184: NEG
42185: PUSH
42186: LD_INT 1
42188: NEG
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42203: LD_ADDR_VAR 0 61
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: LD_INT 0
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 0
42220: PUSH
42221: LD_INT 1
42223: NEG
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 1
42231: PUSH
42232: LD_INT 0
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 1
42241: PUSH
42242: LD_INT 1
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 0
42251: PUSH
42252: LD_INT 1
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 1
42261: NEG
42262: PUSH
42263: LD_INT 0
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 1
42272: NEG
42273: PUSH
42274: LD_INT 1
42276: NEG
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42291: LD_ADDR_VAR 0 62
42295: PUSH
42296: LD_INT 0
42298: PUSH
42299: LD_INT 0
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 0
42308: PUSH
42309: LD_INT 1
42311: NEG
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 1
42319: PUSH
42320: LD_INT 0
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 1
42329: PUSH
42330: LD_INT 1
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 0
42339: PUSH
42340: LD_INT 1
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 1
42349: NEG
42350: PUSH
42351: LD_INT 0
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 1
42360: NEG
42361: PUSH
42362: LD_INT 1
42364: NEG
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42379: LD_ADDR_VAR 0 63
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: LD_INT 1
42399: NEG
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 1
42407: PUSH
42408: LD_INT 0
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: LD_INT 1
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 0
42427: PUSH
42428: LD_INT 1
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 1
42437: NEG
42438: PUSH
42439: LD_INT 0
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 1
42448: NEG
42449: PUSH
42450: LD_INT 1
42452: NEG
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42467: LD_ADDR_VAR 0 64
42471: PUSH
42472: LD_INT 0
42474: PUSH
42475: LD_INT 0
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 0
42484: PUSH
42485: LD_INT 1
42487: NEG
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 1
42495: PUSH
42496: LD_INT 0
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 1
42505: PUSH
42506: LD_INT 1
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: LD_INT 1
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 1
42525: NEG
42526: PUSH
42527: LD_INT 0
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 1
42536: NEG
42537: PUSH
42538: LD_INT 1
42540: NEG
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: ST_TO_ADDR
// end ; 1 :
42555: GO 48452
42557: LD_INT 1
42559: DOUBLE
42560: EQUAL
42561: IFTRUE 42565
42563: GO 45188
42565: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42566: LD_ADDR_VAR 0 11
42570: PUSH
42571: LD_INT 1
42573: NEG
42574: PUSH
42575: LD_INT 3
42577: NEG
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: LD_INT 3
42588: NEG
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 1
42596: PUSH
42597: LD_INT 2
42599: NEG
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: LIST
42609: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42610: LD_ADDR_VAR 0 12
42614: PUSH
42615: LD_INT 2
42617: PUSH
42618: LD_INT 1
42620: NEG
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 3
42628: PUSH
42629: LD_INT 0
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 3
42638: PUSH
42639: LD_INT 1
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: LIST
42650: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42651: LD_ADDR_VAR 0 13
42655: PUSH
42656: LD_INT 3
42658: PUSH
42659: LD_INT 2
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 3
42668: PUSH
42669: LD_INT 3
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 2
42678: PUSH
42679: LD_INT 3
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: LIST
42690: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42691: LD_ADDR_VAR 0 14
42695: PUSH
42696: LD_INT 1
42698: PUSH
42699: LD_INT 3
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: LD_INT 3
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 1
42718: NEG
42719: PUSH
42720: LD_INT 2
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: LIST
42731: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42732: LD_ADDR_VAR 0 15
42736: PUSH
42737: LD_INT 2
42739: NEG
42740: PUSH
42741: LD_INT 1
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 3
42750: NEG
42751: PUSH
42752: LD_INT 0
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 3
42761: NEG
42762: PUSH
42763: LD_INT 1
42765: NEG
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: LIST
42775: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42776: LD_ADDR_VAR 0 16
42780: PUSH
42781: LD_INT 2
42783: NEG
42784: PUSH
42785: LD_INT 3
42787: NEG
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 3
42795: NEG
42796: PUSH
42797: LD_INT 2
42799: NEG
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 3
42807: NEG
42808: PUSH
42809: LD_INT 3
42811: NEG
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: LIST
42821: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42822: LD_ADDR_VAR 0 17
42826: PUSH
42827: LD_INT 1
42829: NEG
42830: PUSH
42831: LD_INT 3
42833: NEG
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 0
42841: PUSH
42842: LD_INT 3
42844: NEG
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 1
42852: PUSH
42853: LD_INT 2
42855: NEG
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: LIST
42865: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42866: LD_ADDR_VAR 0 18
42870: PUSH
42871: LD_INT 2
42873: PUSH
42874: LD_INT 1
42876: NEG
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 3
42884: PUSH
42885: LD_INT 0
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 3
42894: PUSH
42895: LD_INT 1
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: LIST
42906: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42907: LD_ADDR_VAR 0 19
42911: PUSH
42912: LD_INT 3
42914: PUSH
42915: LD_INT 2
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 3
42924: PUSH
42925: LD_INT 3
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 2
42934: PUSH
42935: LD_INT 3
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: LIST
42946: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42947: LD_ADDR_VAR 0 20
42951: PUSH
42952: LD_INT 1
42954: PUSH
42955: LD_INT 3
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 0
42964: PUSH
42965: LD_INT 3
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 1
42974: NEG
42975: PUSH
42976: LD_INT 2
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: LIST
42987: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42988: LD_ADDR_VAR 0 21
42992: PUSH
42993: LD_INT 2
42995: NEG
42996: PUSH
42997: LD_INT 1
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 3
43006: NEG
43007: PUSH
43008: LD_INT 0
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 3
43017: NEG
43018: PUSH
43019: LD_INT 1
43021: NEG
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: LIST
43031: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43032: LD_ADDR_VAR 0 22
43036: PUSH
43037: LD_INT 2
43039: NEG
43040: PUSH
43041: LD_INT 3
43043: NEG
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 3
43051: NEG
43052: PUSH
43053: LD_INT 2
43055: NEG
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 3
43063: NEG
43064: PUSH
43065: LD_INT 3
43067: NEG
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: LIST
43077: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43078: LD_ADDR_VAR 0 23
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: LD_INT 3
43088: NEG
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 1
43096: NEG
43097: PUSH
43098: LD_INT 4
43100: NEG
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 1
43108: PUSH
43109: LD_INT 3
43111: NEG
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: LIST
43121: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43122: LD_ADDR_VAR 0 24
43126: PUSH
43127: LD_INT 3
43129: PUSH
43130: LD_INT 0
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 3
43139: PUSH
43140: LD_INT 1
43142: NEG
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 4
43150: PUSH
43151: LD_INT 1
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: LIST
43162: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43163: LD_ADDR_VAR 0 25
43167: PUSH
43168: LD_INT 3
43170: PUSH
43171: LD_INT 3
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 4
43180: PUSH
43181: LD_INT 3
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 3
43190: PUSH
43191: LD_INT 4
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: LIST
43202: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43203: LD_ADDR_VAR 0 26
43207: PUSH
43208: LD_INT 0
43210: PUSH
43211: LD_INT 3
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 1
43220: PUSH
43221: LD_INT 4
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 1
43230: NEG
43231: PUSH
43232: LD_INT 3
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: LIST
43243: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43244: LD_ADDR_VAR 0 27
43248: PUSH
43249: LD_INT 3
43251: NEG
43252: PUSH
43253: LD_INT 0
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 3
43262: NEG
43263: PUSH
43264: LD_INT 1
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 4
43273: NEG
43274: PUSH
43275: LD_INT 1
43277: NEG
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: LIST
43287: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43288: LD_ADDR_VAR 0 28
43292: PUSH
43293: LD_INT 3
43295: NEG
43296: PUSH
43297: LD_INT 3
43299: NEG
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 3
43307: NEG
43308: PUSH
43309: LD_INT 4
43311: NEG
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 4
43319: NEG
43320: PUSH
43321: LD_INT 3
43323: NEG
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: LIST
43333: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43334: LD_ADDR_VAR 0 29
43338: PUSH
43339: LD_INT 1
43341: NEG
43342: PUSH
43343: LD_INT 3
43345: NEG
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: LD_INT 3
43356: NEG
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 1
43364: PUSH
43365: LD_INT 2
43367: NEG
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 1
43375: NEG
43376: PUSH
43377: LD_INT 4
43379: NEG
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 0
43387: PUSH
43388: LD_INT 4
43390: NEG
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 1
43398: PUSH
43399: LD_INT 3
43401: NEG
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 1
43409: NEG
43410: PUSH
43411: LD_INT 5
43413: NEG
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 0
43421: PUSH
43422: LD_INT 5
43424: NEG
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 1
43432: PUSH
43433: LD_INT 4
43435: NEG
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 1
43443: NEG
43444: PUSH
43445: LD_INT 6
43447: NEG
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 0
43455: PUSH
43456: LD_INT 6
43458: NEG
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 1
43466: PUSH
43467: LD_INT 5
43469: NEG
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43489: LD_ADDR_VAR 0 30
43493: PUSH
43494: LD_INT 2
43496: PUSH
43497: LD_INT 1
43499: NEG
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 3
43507: PUSH
43508: LD_INT 0
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 3
43517: PUSH
43518: LD_INT 1
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 3
43527: PUSH
43528: LD_INT 1
43530: NEG
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 4
43538: PUSH
43539: LD_INT 0
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 4
43548: PUSH
43549: LD_INT 1
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 4
43558: PUSH
43559: LD_INT 1
43561: NEG
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 5
43569: PUSH
43570: LD_INT 0
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 5
43579: PUSH
43580: LD_INT 1
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 5
43589: PUSH
43590: LD_INT 1
43592: NEG
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 6
43600: PUSH
43601: LD_INT 0
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 6
43610: PUSH
43611: LD_INT 1
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43632: LD_ADDR_VAR 0 31
43636: PUSH
43637: LD_INT 3
43639: PUSH
43640: LD_INT 2
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 3
43649: PUSH
43650: LD_INT 3
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 2
43659: PUSH
43660: LD_INT 3
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 4
43669: PUSH
43670: LD_INT 3
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 4
43679: PUSH
43680: LD_INT 4
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 3
43689: PUSH
43690: LD_INT 4
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 5
43699: PUSH
43700: LD_INT 4
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 5
43709: PUSH
43710: LD_INT 5
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 4
43719: PUSH
43720: LD_INT 5
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 6
43729: PUSH
43730: LD_INT 5
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 6
43739: PUSH
43740: LD_INT 6
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 5
43749: PUSH
43750: LD_INT 6
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43771: LD_ADDR_VAR 0 32
43775: PUSH
43776: LD_INT 1
43778: PUSH
43779: LD_INT 3
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 0
43788: PUSH
43789: LD_INT 3
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 1
43798: NEG
43799: PUSH
43800: LD_INT 2
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 1
43809: PUSH
43810: LD_INT 4
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 0
43819: PUSH
43820: LD_INT 4
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 1
43829: NEG
43830: PUSH
43831: LD_INT 3
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 1
43840: PUSH
43841: LD_INT 5
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: LD_INT 5
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 1
43860: NEG
43861: PUSH
43862: LD_INT 4
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 1
43871: PUSH
43872: LD_INT 6
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 0
43881: PUSH
43882: LD_INT 6
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 1
43891: NEG
43892: PUSH
43893: LD_INT 5
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43914: LD_ADDR_VAR 0 33
43918: PUSH
43919: LD_INT 2
43921: NEG
43922: PUSH
43923: LD_INT 1
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 3
43932: NEG
43933: PUSH
43934: LD_INT 0
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 3
43943: NEG
43944: PUSH
43945: LD_INT 1
43947: NEG
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 3
43955: NEG
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 4
43966: NEG
43967: PUSH
43968: LD_INT 0
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 4
43977: NEG
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 4
43989: NEG
43990: PUSH
43991: LD_INT 1
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 5
44000: NEG
44001: PUSH
44002: LD_INT 0
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 5
44011: NEG
44012: PUSH
44013: LD_INT 1
44015: NEG
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 5
44023: NEG
44024: PUSH
44025: LD_INT 1
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 6
44034: NEG
44035: PUSH
44036: LD_INT 0
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 6
44045: NEG
44046: PUSH
44047: LD_INT 1
44049: NEG
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44069: LD_ADDR_VAR 0 34
44073: PUSH
44074: LD_INT 2
44076: NEG
44077: PUSH
44078: LD_INT 3
44080: NEG
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 3
44088: NEG
44089: PUSH
44090: LD_INT 2
44092: NEG
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 3
44100: NEG
44101: PUSH
44102: LD_INT 3
44104: NEG
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 3
44112: NEG
44113: PUSH
44114: LD_INT 4
44116: NEG
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 4
44124: NEG
44125: PUSH
44126: LD_INT 3
44128: NEG
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 4
44136: NEG
44137: PUSH
44138: LD_INT 4
44140: NEG
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 4
44148: NEG
44149: PUSH
44150: LD_INT 5
44152: NEG
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 5
44160: NEG
44161: PUSH
44162: LD_INT 4
44164: NEG
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 5
44172: NEG
44173: PUSH
44174: LD_INT 5
44176: NEG
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 5
44184: NEG
44185: PUSH
44186: LD_INT 6
44188: NEG
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 6
44196: NEG
44197: PUSH
44198: LD_INT 5
44200: NEG
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 6
44208: NEG
44209: PUSH
44210: LD_INT 6
44212: NEG
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44232: LD_ADDR_VAR 0 41
44236: PUSH
44237: LD_INT 0
44239: PUSH
44240: LD_INT 2
44242: NEG
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 1
44250: NEG
44251: PUSH
44252: LD_INT 3
44254: NEG
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 1
44262: PUSH
44263: LD_INT 2
44265: NEG
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: LIST
44275: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44276: LD_ADDR_VAR 0 42
44280: PUSH
44281: LD_INT 2
44283: PUSH
44284: LD_INT 0
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 2
44293: PUSH
44294: LD_INT 1
44296: NEG
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 3
44304: PUSH
44305: LD_INT 1
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: LIST
44316: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44317: LD_ADDR_VAR 0 43
44321: PUSH
44322: LD_INT 2
44324: PUSH
44325: LD_INT 2
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 3
44334: PUSH
44335: LD_INT 2
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 2
44344: PUSH
44345: LD_INT 3
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: LIST
44356: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44357: LD_ADDR_VAR 0 44
44361: PUSH
44362: LD_INT 0
44364: PUSH
44365: LD_INT 2
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 1
44374: PUSH
44375: LD_INT 3
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 1
44384: NEG
44385: PUSH
44386: LD_INT 2
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: LIST
44397: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44398: LD_ADDR_VAR 0 45
44402: PUSH
44403: LD_INT 2
44405: NEG
44406: PUSH
44407: LD_INT 0
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 2
44416: NEG
44417: PUSH
44418: LD_INT 1
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 3
44427: NEG
44428: PUSH
44429: LD_INT 1
44431: NEG
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: LIST
44441: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44442: LD_ADDR_VAR 0 46
44446: PUSH
44447: LD_INT 2
44449: NEG
44450: PUSH
44451: LD_INT 2
44453: NEG
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 2
44461: NEG
44462: PUSH
44463: LD_INT 3
44465: NEG
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 3
44473: NEG
44474: PUSH
44475: LD_INT 2
44477: NEG
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: LIST
44487: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44488: LD_ADDR_VAR 0 47
44492: PUSH
44493: LD_INT 2
44495: NEG
44496: PUSH
44497: LD_INT 3
44499: NEG
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 1
44507: NEG
44508: PUSH
44509: LD_INT 3
44511: NEG
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44521: LD_ADDR_VAR 0 48
44525: PUSH
44526: LD_INT 1
44528: PUSH
44529: LD_INT 2
44531: NEG
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 2
44539: PUSH
44540: LD_INT 1
44542: NEG
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44552: LD_ADDR_VAR 0 49
44556: PUSH
44557: LD_INT 3
44559: PUSH
44560: LD_INT 1
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 3
44569: PUSH
44570: LD_INT 2
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44581: LD_ADDR_VAR 0 50
44585: PUSH
44586: LD_INT 2
44588: PUSH
44589: LD_INT 3
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 1
44598: PUSH
44599: LD_INT 3
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44610: LD_ADDR_VAR 0 51
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: LD_INT 2
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 2
44628: NEG
44629: PUSH
44630: LD_INT 1
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44641: LD_ADDR_VAR 0 52
44645: PUSH
44646: LD_INT 3
44648: NEG
44649: PUSH
44650: LD_INT 1
44652: NEG
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 3
44660: NEG
44661: PUSH
44662: LD_INT 2
44664: NEG
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44674: LD_ADDR_VAR 0 53
44678: PUSH
44679: LD_INT 1
44681: NEG
44682: PUSH
44683: LD_INT 3
44685: NEG
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 0
44693: PUSH
44694: LD_INT 3
44696: NEG
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 1
44704: PUSH
44705: LD_INT 2
44707: NEG
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: LIST
44717: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44718: LD_ADDR_VAR 0 54
44722: PUSH
44723: LD_INT 2
44725: PUSH
44726: LD_INT 1
44728: NEG
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 3
44736: PUSH
44737: LD_INT 0
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 3
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: LIST
44758: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44759: LD_ADDR_VAR 0 55
44763: PUSH
44764: LD_INT 3
44766: PUSH
44767: LD_INT 2
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 3
44776: PUSH
44777: LD_INT 3
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 2
44786: PUSH
44787: LD_INT 3
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: LIST
44798: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44799: LD_ADDR_VAR 0 56
44803: PUSH
44804: LD_INT 1
44806: PUSH
44807: LD_INT 3
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 0
44816: PUSH
44817: LD_INT 3
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 1
44826: NEG
44827: PUSH
44828: LD_INT 2
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: LIST
44839: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44840: LD_ADDR_VAR 0 57
44844: PUSH
44845: LD_INT 2
44847: NEG
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 3
44858: NEG
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 3
44869: NEG
44870: PUSH
44871: LD_INT 1
44873: NEG
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: LIST
44883: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44884: LD_ADDR_VAR 0 58
44888: PUSH
44889: LD_INT 2
44891: NEG
44892: PUSH
44893: LD_INT 3
44895: NEG
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 3
44903: NEG
44904: PUSH
44905: LD_INT 2
44907: NEG
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 3
44915: NEG
44916: PUSH
44917: LD_INT 3
44919: NEG
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: LIST
44929: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44930: LD_ADDR_VAR 0 59
44934: PUSH
44935: LD_INT 1
44937: NEG
44938: PUSH
44939: LD_INT 2
44941: NEG
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 0
44949: PUSH
44950: LD_INT 2
44952: NEG
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 1
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: LIST
44973: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44974: LD_ADDR_VAR 0 60
44978: PUSH
44979: LD_INT 1
44981: PUSH
44982: LD_INT 1
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 2
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 2
45002: PUSH
45003: LD_INT 1
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: LIST
45014: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45015: LD_ADDR_VAR 0 61
45019: PUSH
45020: LD_INT 2
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 2
45032: PUSH
45033: LD_INT 2
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: PUSH
45043: LD_INT 2
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: LIST
45054: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45055: LD_ADDR_VAR 0 62
45059: PUSH
45060: LD_INT 1
45062: PUSH
45063: LD_INT 2
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 0
45072: PUSH
45073: LD_INT 2
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 1
45082: NEG
45083: PUSH
45084: LD_INT 1
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: LIST
45095: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45096: LD_ADDR_VAR 0 63
45100: PUSH
45101: LD_INT 1
45103: NEG
45104: PUSH
45105: LD_INT 1
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 2
45114: NEG
45115: PUSH
45116: LD_INT 0
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 2
45125: NEG
45126: PUSH
45127: LD_INT 1
45129: NEG
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: LIST
45139: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45140: LD_ADDR_VAR 0 64
45144: PUSH
45145: LD_INT 1
45147: NEG
45148: PUSH
45149: LD_INT 2
45151: NEG
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 2
45159: NEG
45160: PUSH
45161: LD_INT 1
45163: NEG
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 2
45171: NEG
45172: PUSH
45173: LD_INT 2
45175: NEG
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: LIST
45185: ST_TO_ADDR
// end ; 2 :
45186: GO 48452
45188: LD_INT 2
45190: DOUBLE
45191: EQUAL
45192: IFTRUE 45196
45194: GO 48451
45196: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45197: LD_ADDR_VAR 0 29
45201: PUSH
45202: LD_INT 4
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 4
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 5
45225: PUSH
45226: LD_INT 0
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 5
45235: PUSH
45236: LD_INT 1
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 4
45245: PUSH
45246: LD_INT 1
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 3
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 3
45265: PUSH
45266: LD_INT 1
45268: NEG
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 3
45276: PUSH
45277: LD_INT 2
45279: NEG
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 5
45287: PUSH
45288: LD_INT 2
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 3
45297: PUSH
45298: LD_INT 3
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 3
45307: PUSH
45308: LD_INT 2
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 4
45317: PUSH
45318: LD_INT 3
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 4
45327: PUSH
45328: LD_INT 4
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 3
45337: PUSH
45338: LD_INT 4
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 2
45347: PUSH
45348: LD_INT 3
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 2
45357: PUSH
45358: LD_INT 2
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 4
45367: PUSH
45368: LD_INT 2
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 2
45377: PUSH
45378: LD_INT 4
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: LD_INT 4
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 0
45397: PUSH
45398: LD_INT 3
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 1
45407: PUSH
45408: LD_INT 4
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 1
45417: PUSH
45418: LD_INT 5
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 0
45427: PUSH
45428: LD_INT 5
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 1
45437: NEG
45438: PUSH
45439: LD_INT 4
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 1
45448: NEG
45449: PUSH
45450: LD_INT 3
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 2
45459: PUSH
45460: LD_INT 5
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 2
45469: NEG
45470: PUSH
45471: LD_INT 3
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 3
45480: NEG
45481: PUSH
45482: LD_INT 0
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 3
45491: NEG
45492: PUSH
45493: LD_INT 1
45495: NEG
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 2
45503: NEG
45504: PUSH
45505: LD_INT 0
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 2
45514: NEG
45515: PUSH
45516: LD_INT 1
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 3
45525: NEG
45526: PUSH
45527: LD_INT 1
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 4
45536: NEG
45537: PUSH
45538: LD_INT 0
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 4
45547: NEG
45548: PUSH
45549: LD_INT 1
45551: NEG
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 4
45559: NEG
45560: PUSH
45561: LD_INT 2
45563: NEG
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 2
45571: NEG
45572: PUSH
45573: LD_INT 2
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 4
45582: NEG
45583: PUSH
45584: LD_INT 4
45586: NEG
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 4
45594: NEG
45595: PUSH
45596: LD_INT 5
45598: NEG
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 3
45606: NEG
45607: PUSH
45608: LD_INT 4
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 3
45618: NEG
45619: PUSH
45620: LD_INT 3
45622: NEG
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 4
45630: NEG
45631: PUSH
45632: LD_INT 3
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 5
45642: NEG
45643: PUSH
45644: LD_INT 4
45646: NEG
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 5
45654: NEG
45655: PUSH
45656: LD_INT 5
45658: NEG
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 3
45666: NEG
45667: PUSH
45668: LD_INT 5
45670: NEG
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 5
45678: NEG
45679: PUSH
45680: LD_INT 3
45682: NEG
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45735: LD_ADDR_VAR 0 30
45739: PUSH
45740: LD_INT 4
45742: PUSH
45743: LD_INT 4
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 4
45752: PUSH
45753: LD_INT 3
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 5
45762: PUSH
45763: LD_INT 4
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 5
45772: PUSH
45773: LD_INT 5
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 4
45782: PUSH
45783: LD_INT 5
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 3
45792: PUSH
45793: LD_INT 4
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 3
45802: PUSH
45803: LD_INT 3
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 5
45812: PUSH
45813: LD_INT 3
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 3
45822: PUSH
45823: LD_INT 5
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 0
45832: PUSH
45833: LD_INT 3
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: LD_INT 2
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 1
45852: PUSH
45853: LD_INT 3
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 1
45862: PUSH
45863: LD_INT 4
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 0
45872: PUSH
45873: LD_INT 4
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 1
45882: NEG
45883: PUSH
45884: LD_INT 3
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 1
45893: NEG
45894: PUSH
45895: LD_INT 2
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 2
45904: PUSH
45905: LD_INT 4
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 2
45914: NEG
45915: PUSH
45916: LD_INT 2
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 4
45925: NEG
45926: PUSH
45927: LD_INT 0
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 4
45936: NEG
45937: PUSH
45938: LD_INT 1
45940: NEG
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 3
45948: NEG
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 3
45959: NEG
45960: PUSH
45961: LD_INT 1
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 4
45970: NEG
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 5
45981: NEG
45982: PUSH
45983: LD_INT 0
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 5
45992: NEG
45993: PUSH
45994: LD_INT 1
45996: NEG
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 5
46004: NEG
46005: PUSH
46006: LD_INT 2
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 3
46016: NEG
46017: PUSH
46018: LD_INT 2
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 3
46027: NEG
46028: PUSH
46029: LD_INT 3
46031: NEG
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 3
46039: NEG
46040: PUSH
46041: LD_INT 4
46043: NEG
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 2
46051: NEG
46052: PUSH
46053: LD_INT 3
46055: NEG
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 2
46063: NEG
46064: PUSH
46065: LD_INT 2
46067: NEG
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 3
46075: NEG
46076: PUSH
46077: LD_INT 2
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 4
46087: NEG
46088: PUSH
46089: LD_INT 3
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 4
46099: NEG
46100: PUSH
46101: LD_INT 4
46103: NEG
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 2
46111: NEG
46112: PUSH
46113: LD_INT 4
46115: NEG
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 4
46123: NEG
46124: PUSH
46125: LD_INT 2
46127: NEG
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 0
46135: PUSH
46136: LD_INT 4
46138: NEG
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 0
46146: PUSH
46147: LD_INT 5
46149: NEG
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 1
46157: PUSH
46158: LD_INT 4
46160: NEG
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: LD_INT 3
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 0
46179: PUSH
46180: LD_INT 3
46182: NEG
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 1
46190: NEG
46191: PUSH
46192: LD_INT 4
46194: NEG
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 1
46202: NEG
46203: PUSH
46204: LD_INT 5
46206: NEG
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 2
46214: PUSH
46215: LD_INT 3
46217: NEG
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 2
46225: NEG
46226: PUSH
46227: LD_INT 5
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46282: LD_ADDR_VAR 0 31
46286: PUSH
46287: LD_INT 0
46289: PUSH
46290: LD_INT 4
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: LD_INT 3
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 1
46309: PUSH
46310: LD_INT 4
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 1
46319: PUSH
46320: LD_INT 5
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 0
46329: PUSH
46330: LD_INT 5
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 1
46339: NEG
46340: PUSH
46341: LD_INT 4
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 1
46350: NEG
46351: PUSH
46352: LD_INT 3
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 2
46361: PUSH
46362: LD_INT 5
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 2
46371: NEG
46372: PUSH
46373: LD_INT 3
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 3
46382: NEG
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 3
46393: NEG
46394: PUSH
46395: LD_INT 1
46397: NEG
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 2
46405: NEG
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 2
46416: NEG
46417: PUSH
46418: LD_INT 1
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 3
46427: NEG
46428: PUSH
46429: LD_INT 1
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 4
46438: NEG
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 4
46449: NEG
46450: PUSH
46451: LD_INT 1
46453: NEG
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 4
46461: NEG
46462: PUSH
46463: LD_INT 2
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 2
46473: NEG
46474: PUSH
46475: LD_INT 2
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 4
46484: NEG
46485: PUSH
46486: LD_INT 4
46488: NEG
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 4
46496: NEG
46497: PUSH
46498: LD_INT 5
46500: NEG
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 3
46508: NEG
46509: PUSH
46510: LD_INT 4
46512: NEG
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 3
46520: NEG
46521: PUSH
46522: LD_INT 3
46524: NEG
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 4
46532: NEG
46533: PUSH
46534: LD_INT 3
46536: NEG
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 5
46544: NEG
46545: PUSH
46546: LD_INT 4
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 5
46556: NEG
46557: PUSH
46558: LD_INT 5
46560: NEG
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 3
46568: NEG
46569: PUSH
46570: LD_INT 5
46572: NEG
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 5
46580: NEG
46581: PUSH
46582: LD_INT 3
46584: NEG
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 0
46592: PUSH
46593: LD_INT 3
46595: NEG
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: LD_INT 4
46606: NEG
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: LD_INT 3
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 1
46625: PUSH
46626: LD_INT 2
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: LD_INT 2
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: LD_INT 3
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 1
46659: NEG
46660: PUSH
46661: LD_INT 4
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 2
46671: PUSH
46672: LD_INT 2
46674: NEG
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 2
46682: NEG
46683: PUSH
46684: LD_INT 4
46686: NEG
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 4
46694: PUSH
46695: LD_INT 0
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 4
46704: PUSH
46705: LD_INT 1
46707: NEG
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 5
46715: PUSH
46716: LD_INT 0
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 5
46725: PUSH
46726: LD_INT 1
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 4
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 3
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 3
46755: PUSH
46756: LD_INT 1
46758: NEG
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 3
46766: PUSH
46767: LD_INT 2
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 5
46777: PUSH
46778: LD_INT 2
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46832: LD_ADDR_VAR 0 32
46836: PUSH
46837: LD_INT 4
46839: NEG
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 4
46850: NEG
46851: PUSH
46852: LD_INT 1
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 3
46862: NEG
46863: PUSH
46864: LD_INT 0
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 3
46873: NEG
46874: PUSH
46875: LD_INT 1
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 4
46884: NEG
46885: PUSH
46886: LD_INT 1
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 5
46895: NEG
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 5
46906: NEG
46907: PUSH
46908: LD_INT 1
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 5
46918: NEG
46919: PUSH
46920: LD_INT 2
46922: NEG
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 3
46930: NEG
46931: PUSH
46932: LD_INT 2
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 3
46941: NEG
46942: PUSH
46943: LD_INT 3
46945: NEG
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 3
46953: NEG
46954: PUSH
46955: LD_INT 4
46957: NEG
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 2
46965: NEG
46966: PUSH
46967: LD_INT 3
46969: NEG
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 2
46977: NEG
46978: PUSH
46979: LD_INT 2
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 3
46989: NEG
46990: PUSH
46991: LD_INT 2
46993: NEG
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 4
47001: NEG
47002: PUSH
47003: LD_INT 3
47005: NEG
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 4
47013: NEG
47014: PUSH
47015: LD_INT 4
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 2
47025: NEG
47026: PUSH
47027: LD_INT 4
47029: NEG
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 4
47037: NEG
47038: PUSH
47039: LD_INT 2
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: LD_INT 4
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: LD_INT 5
47063: NEG
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 1
47071: PUSH
47072: LD_INT 4
47074: NEG
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 1
47082: PUSH
47083: LD_INT 3
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 0
47093: PUSH
47094: LD_INT 3
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: NEG
47105: PUSH
47106: LD_INT 4
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: LD_INT 5
47120: NEG
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 2
47128: PUSH
47129: LD_INT 3
47131: NEG
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 2
47139: NEG
47140: PUSH
47141: LD_INT 5
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 3
47151: PUSH
47152: LD_INT 0
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 3
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 4
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 4
47182: PUSH
47183: LD_INT 1
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 3
47192: PUSH
47193: LD_INT 1
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 2
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 2
47212: PUSH
47213: LD_INT 1
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 2
47223: PUSH
47224: LD_INT 2
47226: NEG
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 4
47234: PUSH
47235: LD_INT 2
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 4
47244: PUSH
47245: LD_INT 4
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 4
47254: PUSH
47255: LD_INT 3
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 5
47264: PUSH
47265: LD_INT 4
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 5
47274: PUSH
47275: LD_INT 5
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 4
47284: PUSH
47285: LD_INT 5
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 3
47294: PUSH
47295: LD_INT 4
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 3
47304: PUSH
47305: LD_INT 3
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 5
47314: PUSH
47315: LD_INT 3
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 3
47324: PUSH
47325: LD_INT 5
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47379: LD_ADDR_VAR 0 33
47383: PUSH
47384: LD_INT 4
47386: NEG
47387: PUSH
47388: LD_INT 4
47390: NEG
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 4
47398: NEG
47399: PUSH
47400: LD_INT 5
47402: NEG
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 3
47410: NEG
47411: PUSH
47412: LD_INT 4
47414: NEG
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 3
47422: NEG
47423: PUSH
47424: LD_INT 3
47426: NEG
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 4
47434: NEG
47435: PUSH
47436: LD_INT 3
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 5
47446: NEG
47447: PUSH
47448: LD_INT 4
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 5
47458: NEG
47459: PUSH
47460: LD_INT 5
47462: NEG
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 3
47470: NEG
47471: PUSH
47472: LD_INT 5
47474: NEG
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 5
47482: NEG
47483: PUSH
47484: LD_INT 3
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 0
47494: PUSH
47495: LD_INT 3
47497: NEG
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: LD_INT 4
47508: NEG
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: LD_INT 3
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 1
47527: PUSH
47528: LD_INT 2
47530: NEG
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: LD_INT 2
47541: NEG
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 1
47549: NEG
47550: PUSH
47551: LD_INT 3
47553: NEG
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 1
47561: NEG
47562: PUSH
47563: LD_INT 4
47565: NEG
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 2
47573: PUSH
47574: LD_INT 2
47576: NEG
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 2
47584: NEG
47585: PUSH
47586: LD_INT 4
47588: NEG
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 4
47596: PUSH
47597: LD_INT 0
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 4
47606: PUSH
47607: LD_INT 1
47609: NEG
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 5
47617: PUSH
47618: LD_INT 0
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 5
47627: PUSH
47628: LD_INT 1
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 4
47637: PUSH
47638: LD_INT 1
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 3
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 3
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 3
47668: PUSH
47669: LD_INT 2
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 5
47679: PUSH
47680: LD_INT 2
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 3
47689: PUSH
47690: LD_INT 3
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 3
47699: PUSH
47700: LD_INT 2
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 4
47709: PUSH
47710: LD_INT 3
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 4
47719: PUSH
47720: LD_INT 4
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 3
47729: PUSH
47730: LD_INT 4
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 2
47739: PUSH
47740: LD_INT 3
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 2
47749: PUSH
47750: LD_INT 2
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 4
47759: PUSH
47760: LD_INT 2
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 2
47769: PUSH
47770: LD_INT 4
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: LD_INT 4
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 0
47789: PUSH
47790: LD_INT 3
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 1
47799: PUSH
47800: LD_INT 4
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 1
47809: PUSH
47810: LD_INT 5
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 0
47819: PUSH
47820: LD_INT 5
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 1
47829: NEG
47830: PUSH
47831: LD_INT 4
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 1
47840: NEG
47841: PUSH
47842: LD_INT 3
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 2
47851: PUSH
47852: LD_INT 5
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 2
47861: NEG
47862: PUSH
47863: LD_INT 3
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47917: LD_ADDR_VAR 0 34
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: LD_INT 4
47927: NEG
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: LD_INT 5
47938: NEG
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 1
47946: PUSH
47947: LD_INT 4
47949: NEG
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 1
47957: PUSH
47958: LD_INT 3
47960: NEG
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 0
47968: PUSH
47969: LD_INT 3
47971: NEG
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 1
47979: NEG
47980: PUSH
47981: LD_INT 4
47983: NEG
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 1
47991: NEG
47992: PUSH
47993: LD_INT 5
47995: NEG
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 2
48003: PUSH
48004: LD_INT 3
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 2
48014: NEG
48015: PUSH
48016: LD_INT 5
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 3
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 3
48036: PUSH
48037: LD_INT 1
48039: NEG
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 4
48047: PUSH
48048: LD_INT 0
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 4
48057: PUSH
48058: LD_INT 1
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 3
48067: PUSH
48068: LD_INT 1
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 2
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 2
48087: PUSH
48088: LD_INT 1
48090: NEG
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 2
48098: PUSH
48099: LD_INT 2
48101: NEG
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 4
48109: PUSH
48110: LD_INT 2
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 4
48119: PUSH
48120: LD_INT 4
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 4
48129: PUSH
48130: LD_INT 3
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 5
48139: PUSH
48140: LD_INT 4
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 5
48149: PUSH
48150: LD_INT 5
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 4
48159: PUSH
48160: LD_INT 5
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 3
48169: PUSH
48170: LD_INT 4
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 3
48179: PUSH
48180: LD_INT 3
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 5
48189: PUSH
48190: LD_INT 3
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 3
48199: PUSH
48200: LD_INT 5
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: LD_INT 3
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: LD_INT 2
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: LD_INT 3
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 1
48239: PUSH
48240: LD_INT 4
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 0
48249: PUSH
48250: LD_INT 4
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 1
48259: NEG
48260: PUSH
48261: LD_INT 3
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: LD_INT 2
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 2
48281: PUSH
48282: LD_INT 4
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 2
48291: NEG
48292: PUSH
48293: LD_INT 2
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 4
48302: NEG
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 4
48313: NEG
48314: PUSH
48315: LD_INT 1
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 3
48325: NEG
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 3
48336: NEG
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 4
48347: NEG
48348: PUSH
48349: LD_INT 1
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 5
48358: NEG
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 5
48369: NEG
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 5
48381: NEG
48382: PUSH
48383: LD_INT 2
48385: NEG
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 3
48393: NEG
48394: PUSH
48395: LD_INT 2
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: ST_TO_ADDR
// end ; end ;
48449: GO 48452
48451: POP
// case btype of b_depot , b_warehouse :
48452: LD_VAR 0 1
48456: PUSH
48457: LD_INT 0
48459: DOUBLE
48460: EQUAL
48461: IFTRUE 48471
48463: LD_INT 1
48465: DOUBLE
48466: EQUAL
48467: IFTRUE 48471
48469: GO 48672
48471: POP
// case nation of nation_american :
48472: LD_VAR 0 5
48476: PUSH
48477: LD_INT 1
48479: DOUBLE
48480: EQUAL
48481: IFTRUE 48485
48483: GO 48541
48485: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48486: LD_ADDR_VAR 0 9
48490: PUSH
48491: LD_VAR 0 11
48495: PUSH
48496: LD_VAR 0 12
48500: PUSH
48501: LD_VAR 0 13
48505: PUSH
48506: LD_VAR 0 14
48510: PUSH
48511: LD_VAR 0 15
48515: PUSH
48516: LD_VAR 0 16
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: PUSH
48529: LD_VAR 0 4
48533: PUSH
48534: LD_INT 1
48536: PLUS
48537: ARRAY
48538: ST_TO_ADDR
48539: GO 48670
48541: LD_INT 2
48543: DOUBLE
48544: EQUAL
48545: IFTRUE 48549
48547: GO 48605
48549: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48550: LD_ADDR_VAR 0 9
48554: PUSH
48555: LD_VAR 0 17
48559: PUSH
48560: LD_VAR 0 18
48564: PUSH
48565: LD_VAR 0 19
48569: PUSH
48570: LD_VAR 0 20
48574: PUSH
48575: LD_VAR 0 21
48579: PUSH
48580: LD_VAR 0 22
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: PUSH
48593: LD_VAR 0 4
48597: PUSH
48598: LD_INT 1
48600: PLUS
48601: ARRAY
48602: ST_TO_ADDR
48603: GO 48670
48605: LD_INT 3
48607: DOUBLE
48608: EQUAL
48609: IFTRUE 48613
48611: GO 48669
48613: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48614: LD_ADDR_VAR 0 9
48618: PUSH
48619: LD_VAR 0 23
48623: PUSH
48624: LD_VAR 0 24
48628: PUSH
48629: LD_VAR 0 25
48633: PUSH
48634: LD_VAR 0 26
48638: PUSH
48639: LD_VAR 0 27
48643: PUSH
48644: LD_VAR 0 28
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: PUSH
48657: LD_VAR 0 4
48661: PUSH
48662: LD_INT 1
48664: PLUS
48665: ARRAY
48666: ST_TO_ADDR
48667: GO 48670
48669: POP
48670: GO 49225
48672: LD_INT 2
48674: DOUBLE
48675: EQUAL
48676: IFTRUE 48686
48678: LD_INT 3
48680: DOUBLE
48681: EQUAL
48682: IFTRUE 48686
48684: GO 48742
48686: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48687: LD_ADDR_VAR 0 9
48691: PUSH
48692: LD_VAR 0 29
48696: PUSH
48697: LD_VAR 0 30
48701: PUSH
48702: LD_VAR 0 31
48706: PUSH
48707: LD_VAR 0 32
48711: PUSH
48712: LD_VAR 0 33
48716: PUSH
48717: LD_VAR 0 34
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: PUSH
48730: LD_VAR 0 4
48734: PUSH
48735: LD_INT 1
48737: PLUS
48738: ARRAY
48739: ST_TO_ADDR
48740: GO 49225
48742: LD_INT 16
48744: DOUBLE
48745: EQUAL
48746: IFTRUE 48804
48748: LD_INT 17
48750: DOUBLE
48751: EQUAL
48752: IFTRUE 48804
48754: LD_INT 18
48756: DOUBLE
48757: EQUAL
48758: IFTRUE 48804
48760: LD_INT 19
48762: DOUBLE
48763: EQUAL
48764: IFTRUE 48804
48766: LD_INT 22
48768: DOUBLE
48769: EQUAL
48770: IFTRUE 48804
48772: LD_INT 20
48774: DOUBLE
48775: EQUAL
48776: IFTRUE 48804
48778: LD_INT 21
48780: DOUBLE
48781: EQUAL
48782: IFTRUE 48804
48784: LD_INT 23
48786: DOUBLE
48787: EQUAL
48788: IFTRUE 48804
48790: LD_INT 24
48792: DOUBLE
48793: EQUAL
48794: IFTRUE 48804
48796: LD_INT 25
48798: DOUBLE
48799: EQUAL
48800: IFTRUE 48804
48802: GO 48860
48804: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48805: LD_ADDR_VAR 0 9
48809: PUSH
48810: LD_VAR 0 35
48814: PUSH
48815: LD_VAR 0 36
48819: PUSH
48820: LD_VAR 0 37
48824: PUSH
48825: LD_VAR 0 38
48829: PUSH
48830: LD_VAR 0 39
48834: PUSH
48835: LD_VAR 0 40
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: PUSH
48848: LD_VAR 0 4
48852: PUSH
48853: LD_INT 1
48855: PLUS
48856: ARRAY
48857: ST_TO_ADDR
48858: GO 49225
48860: LD_INT 6
48862: DOUBLE
48863: EQUAL
48864: IFTRUE 48916
48866: LD_INT 7
48868: DOUBLE
48869: EQUAL
48870: IFTRUE 48916
48872: LD_INT 8
48874: DOUBLE
48875: EQUAL
48876: IFTRUE 48916
48878: LD_INT 13
48880: DOUBLE
48881: EQUAL
48882: IFTRUE 48916
48884: LD_INT 12
48886: DOUBLE
48887: EQUAL
48888: IFTRUE 48916
48890: LD_INT 15
48892: DOUBLE
48893: EQUAL
48894: IFTRUE 48916
48896: LD_INT 11
48898: DOUBLE
48899: EQUAL
48900: IFTRUE 48916
48902: LD_INT 14
48904: DOUBLE
48905: EQUAL
48906: IFTRUE 48916
48908: LD_INT 10
48910: DOUBLE
48911: EQUAL
48912: IFTRUE 48916
48914: GO 48972
48916: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48917: LD_ADDR_VAR 0 9
48921: PUSH
48922: LD_VAR 0 41
48926: PUSH
48927: LD_VAR 0 42
48931: PUSH
48932: LD_VAR 0 43
48936: PUSH
48937: LD_VAR 0 44
48941: PUSH
48942: LD_VAR 0 45
48946: PUSH
48947: LD_VAR 0 46
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: PUSH
48960: LD_VAR 0 4
48964: PUSH
48965: LD_INT 1
48967: PLUS
48968: ARRAY
48969: ST_TO_ADDR
48970: GO 49225
48972: LD_INT 36
48974: DOUBLE
48975: EQUAL
48976: IFTRUE 48980
48978: GO 49036
48980: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48981: LD_ADDR_VAR 0 9
48985: PUSH
48986: LD_VAR 0 47
48990: PUSH
48991: LD_VAR 0 48
48995: PUSH
48996: LD_VAR 0 49
49000: PUSH
49001: LD_VAR 0 50
49005: PUSH
49006: LD_VAR 0 51
49010: PUSH
49011: LD_VAR 0 52
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: PUSH
49024: LD_VAR 0 4
49028: PUSH
49029: LD_INT 1
49031: PLUS
49032: ARRAY
49033: ST_TO_ADDR
49034: GO 49225
49036: LD_INT 4
49038: DOUBLE
49039: EQUAL
49040: IFTRUE 49062
49042: LD_INT 5
49044: DOUBLE
49045: EQUAL
49046: IFTRUE 49062
49048: LD_INT 34
49050: DOUBLE
49051: EQUAL
49052: IFTRUE 49062
49054: LD_INT 37
49056: DOUBLE
49057: EQUAL
49058: IFTRUE 49062
49060: GO 49118
49062: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49063: LD_ADDR_VAR 0 9
49067: PUSH
49068: LD_VAR 0 53
49072: PUSH
49073: LD_VAR 0 54
49077: PUSH
49078: LD_VAR 0 55
49082: PUSH
49083: LD_VAR 0 56
49087: PUSH
49088: LD_VAR 0 57
49092: PUSH
49093: LD_VAR 0 58
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: PUSH
49106: LD_VAR 0 4
49110: PUSH
49111: LD_INT 1
49113: PLUS
49114: ARRAY
49115: ST_TO_ADDR
49116: GO 49225
49118: LD_INT 31
49120: DOUBLE
49121: EQUAL
49122: IFTRUE 49168
49124: LD_INT 32
49126: DOUBLE
49127: EQUAL
49128: IFTRUE 49168
49130: LD_INT 33
49132: DOUBLE
49133: EQUAL
49134: IFTRUE 49168
49136: LD_INT 27
49138: DOUBLE
49139: EQUAL
49140: IFTRUE 49168
49142: LD_INT 26
49144: DOUBLE
49145: EQUAL
49146: IFTRUE 49168
49148: LD_INT 28
49150: DOUBLE
49151: EQUAL
49152: IFTRUE 49168
49154: LD_INT 29
49156: DOUBLE
49157: EQUAL
49158: IFTRUE 49168
49160: LD_INT 30
49162: DOUBLE
49163: EQUAL
49164: IFTRUE 49168
49166: GO 49224
49168: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49169: LD_ADDR_VAR 0 9
49173: PUSH
49174: LD_VAR 0 59
49178: PUSH
49179: LD_VAR 0 60
49183: PUSH
49184: LD_VAR 0 61
49188: PUSH
49189: LD_VAR 0 62
49193: PUSH
49194: LD_VAR 0 63
49198: PUSH
49199: LD_VAR 0 64
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: PUSH
49212: LD_VAR 0 4
49216: PUSH
49217: LD_INT 1
49219: PLUS
49220: ARRAY
49221: ST_TO_ADDR
49222: GO 49225
49224: POP
// temp_list2 = [ ] ;
49225: LD_ADDR_VAR 0 10
49229: PUSH
49230: EMPTY
49231: ST_TO_ADDR
// for i in temp_list do
49232: LD_ADDR_VAR 0 8
49236: PUSH
49237: LD_VAR 0 9
49241: PUSH
49242: FOR_IN
49243: IFFALSE 49295
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49245: LD_ADDR_VAR 0 10
49249: PUSH
49250: LD_VAR 0 10
49254: PUSH
49255: LD_VAR 0 8
49259: PUSH
49260: LD_INT 1
49262: ARRAY
49263: PUSH
49264: LD_VAR 0 2
49268: PLUS
49269: PUSH
49270: LD_VAR 0 8
49274: PUSH
49275: LD_INT 2
49277: ARRAY
49278: PUSH
49279: LD_VAR 0 3
49283: PLUS
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: EMPTY
49290: LIST
49291: ADD
49292: ST_TO_ADDR
49293: GO 49242
49295: POP
49296: POP
// result = temp_list2 ;
49297: LD_ADDR_VAR 0 7
49301: PUSH
49302: LD_VAR 0 10
49306: ST_TO_ADDR
// end ;
49307: LD_VAR 0 7
49311: RET
// export function EnemyInRange ( unit , dist ) ; begin
49312: LD_INT 0
49314: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49315: LD_ADDR_VAR 0 3
49319: PUSH
49320: LD_VAR 0 1
49324: PPUSH
49325: CALL_OW 255
49329: PPUSH
49330: LD_VAR 0 1
49334: PPUSH
49335: CALL_OW 250
49339: PPUSH
49340: LD_VAR 0 1
49344: PPUSH
49345: CALL_OW 251
49349: PPUSH
49350: LD_VAR 0 2
49354: PPUSH
49355: CALL 22685 0 4
49359: PUSH
49360: LD_INT 4
49362: ARRAY
49363: ST_TO_ADDR
// end ;
49364: LD_VAR 0 3
49368: RET
// export function PlayerSeeMe ( unit ) ; begin
49369: LD_INT 0
49371: PPUSH
// result := See ( your_side , unit ) ;
49372: LD_ADDR_VAR 0 2
49376: PUSH
49377: LD_OWVAR 2
49381: PPUSH
49382: LD_VAR 0 1
49386: PPUSH
49387: CALL_OW 292
49391: ST_TO_ADDR
// end ;
49392: LD_VAR 0 2
49396: RET
// export function ReverseDir ( unit ) ; begin
49397: LD_INT 0
49399: PPUSH
// if not unit then
49400: LD_VAR 0 1
49404: NOT
49405: IFFALSE 49409
// exit ;
49407: GO 49432
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49409: LD_ADDR_VAR 0 2
49413: PUSH
49414: LD_VAR 0 1
49418: PPUSH
49419: CALL_OW 254
49423: PUSH
49424: LD_INT 3
49426: PLUS
49427: PUSH
49428: LD_INT 6
49430: MOD
49431: ST_TO_ADDR
// end ;
49432: LD_VAR 0 2
49436: RET
// export function ReverseArray ( array ) ; var i ; begin
49437: LD_INT 0
49439: PPUSH
49440: PPUSH
// if not array then
49441: LD_VAR 0 1
49445: NOT
49446: IFFALSE 49450
// exit ;
49448: GO 49505
// result := [ ] ;
49450: LD_ADDR_VAR 0 2
49454: PUSH
49455: EMPTY
49456: ST_TO_ADDR
// for i := array downto 1 do
49457: LD_ADDR_VAR 0 3
49461: PUSH
49462: DOUBLE
49463: LD_VAR 0 1
49467: INC
49468: ST_TO_ADDR
49469: LD_INT 1
49471: PUSH
49472: FOR_DOWNTO
49473: IFFALSE 49503
// result := Join ( result , array [ i ] ) ;
49475: LD_ADDR_VAR 0 2
49479: PUSH
49480: LD_VAR 0 2
49484: PPUSH
49485: LD_VAR 0 1
49489: PUSH
49490: LD_VAR 0 3
49494: ARRAY
49495: PPUSH
49496: CALL 54161 0 2
49500: ST_TO_ADDR
49501: GO 49472
49503: POP
49504: POP
// end ;
49505: LD_VAR 0 2
49509: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49510: LD_INT 0
49512: PPUSH
49513: PPUSH
49514: PPUSH
49515: PPUSH
49516: PPUSH
49517: PPUSH
// if not unit or not hexes then
49518: LD_VAR 0 1
49522: NOT
49523: PUSH
49524: LD_VAR 0 2
49528: NOT
49529: OR
49530: IFFALSE 49534
// exit ;
49532: GO 49657
// dist := 9999 ;
49534: LD_ADDR_VAR 0 5
49538: PUSH
49539: LD_INT 9999
49541: ST_TO_ADDR
// for i = 1 to hexes do
49542: LD_ADDR_VAR 0 4
49546: PUSH
49547: DOUBLE
49548: LD_INT 1
49550: DEC
49551: ST_TO_ADDR
49552: LD_VAR 0 2
49556: PUSH
49557: FOR_TO
49558: IFFALSE 49645
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49560: LD_ADDR_VAR 0 6
49564: PUSH
49565: LD_VAR 0 1
49569: PPUSH
49570: LD_VAR 0 2
49574: PUSH
49575: LD_VAR 0 4
49579: ARRAY
49580: PUSH
49581: LD_INT 1
49583: ARRAY
49584: PPUSH
49585: LD_VAR 0 2
49589: PUSH
49590: LD_VAR 0 4
49594: ARRAY
49595: PUSH
49596: LD_INT 2
49598: ARRAY
49599: PPUSH
49600: CALL_OW 297
49604: ST_TO_ADDR
// if tdist < dist then
49605: LD_VAR 0 6
49609: PUSH
49610: LD_VAR 0 5
49614: LESS
49615: IFFALSE 49643
// begin hex := hexes [ i ] ;
49617: LD_ADDR_VAR 0 8
49621: PUSH
49622: LD_VAR 0 2
49626: PUSH
49627: LD_VAR 0 4
49631: ARRAY
49632: ST_TO_ADDR
// dist := tdist ;
49633: LD_ADDR_VAR 0 5
49637: PUSH
49638: LD_VAR 0 6
49642: ST_TO_ADDR
// end ; end ;
49643: GO 49557
49645: POP
49646: POP
// result := hex ;
49647: LD_ADDR_VAR 0 3
49651: PUSH
49652: LD_VAR 0 8
49656: ST_TO_ADDR
// end ;
49657: LD_VAR 0 3
49661: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49662: LD_INT 0
49664: PPUSH
49665: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49666: LD_VAR 0 1
49670: NOT
49671: PUSH
49672: LD_VAR 0 1
49676: PUSH
49677: LD_INT 21
49679: PUSH
49680: LD_INT 2
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 23
49689: PUSH
49690: LD_INT 2
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PPUSH
49701: CALL_OW 69
49705: IN
49706: NOT
49707: OR
49708: IFFALSE 49712
// exit ;
49710: GO 49759
// for i = 1 to 3 do
49712: LD_ADDR_VAR 0 3
49716: PUSH
49717: DOUBLE
49718: LD_INT 1
49720: DEC
49721: ST_TO_ADDR
49722: LD_INT 3
49724: PUSH
49725: FOR_TO
49726: IFFALSE 49757
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49728: LD_VAR 0 1
49732: PPUSH
49733: CALL_OW 250
49737: PPUSH
49738: LD_VAR 0 1
49742: PPUSH
49743: CALL_OW 251
49747: PPUSH
49748: LD_INT 1
49750: PPUSH
49751: CALL_OW 453
49755: GO 49725
49757: POP
49758: POP
// end ;
49759: LD_VAR 0 2
49763: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49764: LD_INT 0
49766: PPUSH
49767: PPUSH
49768: PPUSH
49769: PPUSH
49770: PPUSH
49771: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
49772: LD_VAR 0 1
49776: NOT
49777: PUSH
49778: LD_VAR 0 2
49782: NOT
49783: OR
49784: PUSH
49785: LD_VAR 0 1
49789: PPUSH
49790: CALL_OW 314
49794: OR
49795: IFFALSE 49799
// exit ;
49797: GO 50266
// if GetLives ( i ) < 250 then
49799: LD_VAR 0 4
49803: PPUSH
49804: CALL_OW 256
49808: PUSH
49809: LD_INT 250
49811: LESS
49812: IFFALSE 49825
// begin ComAutodestruct ( i ) ;
49814: LD_VAR 0 4
49818: PPUSH
49819: CALL 49662 0 1
// exit ;
49823: GO 50266
// end ; x := GetX ( enemy_unit ) ;
49825: LD_ADDR_VAR 0 7
49829: PUSH
49830: LD_VAR 0 2
49834: PPUSH
49835: CALL_OW 250
49839: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49840: LD_ADDR_VAR 0 8
49844: PUSH
49845: LD_VAR 0 2
49849: PPUSH
49850: CALL_OW 251
49854: ST_TO_ADDR
// if not x or not y then
49855: LD_VAR 0 7
49859: NOT
49860: PUSH
49861: LD_VAR 0 8
49865: NOT
49866: OR
49867: IFFALSE 49871
// exit ;
49869: GO 50266
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49871: LD_ADDR_VAR 0 6
49875: PUSH
49876: LD_VAR 0 7
49880: PPUSH
49881: LD_INT 0
49883: PPUSH
49884: LD_INT 4
49886: PPUSH
49887: CALL_OW 272
49891: PUSH
49892: LD_VAR 0 8
49896: PPUSH
49897: LD_INT 0
49899: PPUSH
49900: LD_INT 4
49902: PPUSH
49903: CALL_OW 273
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_VAR 0 7
49916: PPUSH
49917: LD_INT 1
49919: PPUSH
49920: LD_INT 4
49922: PPUSH
49923: CALL_OW 272
49927: PUSH
49928: LD_VAR 0 8
49932: PPUSH
49933: LD_INT 1
49935: PPUSH
49936: LD_INT 4
49938: PPUSH
49939: CALL_OW 273
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_VAR 0 7
49952: PPUSH
49953: LD_INT 2
49955: PPUSH
49956: LD_INT 4
49958: PPUSH
49959: CALL_OW 272
49963: PUSH
49964: LD_VAR 0 8
49968: PPUSH
49969: LD_INT 2
49971: PPUSH
49972: LD_INT 4
49974: PPUSH
49975: CALL_OW 273
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_VAR 0 7
49988: PPUSH
49989: LD_INT 3
49991: PPUSH
49992: LD_INT 4
49994: PPUSH
49995: CALL_OW 272
49999: PUSH
50000: LD_VAR 0 8
50004: PPUSH
50005: LD_INT 3
50007: PPUSH
50008: LD_INT 4
50010: PPUSH
50011: CALL_OW 273
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_VAR 0 7
50024: PPUSH
50025: LD_INT 4
50027: PPUSH
50028: LD_INT 4
50030: PPUSH
50031: CALL_OW 272
50035: PUSH
50036: LD_VAR 0 8
50040: PPUSH
50041: LD_INT 4
50043: PPUSH
50044: LD_INT 4
50046: PPUSH
50047: CALL_OW 273
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_VAR 0 7
50060: PPUSH
50061: LD_INT 5
50063: PPUSH
50064: LD_INT 4
50066: PPUSH
50067: CALL_OW 272
50071: PUSH
50072: LD_VAR 0 8
50076: PPUSH
50077: LD_INT 5
50079: PPUSH
50080: LD_INT 4
50082: PPUSH
50083: CALL_OW 273
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: ST_TO_ADDR
// for i = tmp downto 1 do
50100: LD_ADDR_VAR 0 4
50104: PUSH
50105: DOUBLE
50106: LD_VAR 0 6
50110: INC
50111: ST_TO_ADDR
50112: LD_INT 1
50114: PUSH
50115: FOR_DOWNTO
50116: IFFALSE 50217
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50118: LD_VAR 0 6
50122: PUSH
50123: LD_VAR 0 4
50127: ARRAY
50128: PUSH
50129: LD_INT 1
50131: ARRAY
50132: PPUSH
50133: LD_VAR 0 6
50137: PUSH
50138: LD_VAR 0 4
50142: ARRAY
50143: PUSH
50144: LD_INT 2
50146: ARRAY
50147: PPUSH
50148: CALL_OW 488
50152: NOT
50153: PUSH
50154: LD_VAR 0 6
50158: PUSH
50159: LD_VAR 0 4
50163: ARRAY
50164: PUSH
50165: LD_INT 1
50167: ARRAY
50168: PPUSH
50169: LD_VAR 0 6
50173: PUSH
50174: LD_VAR 0 4
50178: ARRAY
50179: PUSH
50180: LD_INT 2
50182: ARRAY
50183: PPUSH
50184: CALL_OW 428
50188: PUSH
50189: LD_INT 0
50191: NONEQUAL
50192: OR
50193: IFFALSE 50215
// tmp := Delete ( tmp , i ) ;
50195: LD_ADDR_VAR 0 6
50199: PUSH
50200: LD_VAR 0 6
50204: PPUSH
50205: LD_VAR 0 4
50209: PPUSH
50210: CALL_OW 3
50214: ST_TO_ADDR
50215: GO 50115
50217: POP
50218: POP
// j := GetClosestHex ( unit , tmp ) ;
50219: LD_ADDR_VAR 0 5
50223: PUSH
50224: LD_VAR 0 1
50228: PPUSH
50229: LD_VAR 0 6
50233: PPUSH
50234: CALL 49510 0 2
50238: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50239: LD_VAR 0 1
50243: PPUSH
50244: LD_VAR 0 5
50248: PUSH
50249: LD_INT 1
50251: ARRAY
50252: PPUSH
50253: LD_VAR 0 5
50257: PUSH
50258: LD_INT 2
50260: ARRAY
50261: PPUSH
50262: CALL_OW 111
// end ;
50266: LD_VAR 0 3
50270: RET
// export function PrepareApemanSoldier ( ) ; begin
50271: LD_INT 0
50273: PPUSH
// uc_nation := 0 ;
50274: LD_ADDR_OWVAR 21
50278: PUSH
50279: LD_INT 0
50281: ST_TO_ADDR
// hc_sex := sex_male ;
50282: LD_ADDR_OWVAR 27
50286: PUSH
50287: LD_INT 1
50289: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50290: LD_ADDR_OWVAR 28
50294: PUSH
50295: LD_INT 15
50297: ST_TO_ADDR
// hc_gallery :=  ;
50298: LD_ADDR_OWVAR 33
50302: PUSH
50303: LD_STRING 
50305: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50306: LD_ADDR_OWVAR 31
50310: PUSH
50311: LD_INT 0
50313: PPUSH
50314: LD_INT 3
50316: PPUSH
50317: CALL_OW 12
50321: PUSH
50322: LD_INT 0
50324: PPUSH
50325: LD_INT 3
50327: PPUSH
50328: CALL_OW 12
50332: PUSH
50333: LD_INT 0
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: ST_TO_ADDR
// end ;
50345: LD_VAR 0 1
50349: RET
// export function PrepareApemanEngineer ( ) ; begin
50350: LD_INT 0
50352: PPUSH
// uc_nation := 0 ;
50353: LD_ADDR_OWVAR 21
50357: PUSH
50358: LD_INT 0
50360: ST_TO_ADDR
// hc_sex := sex_male ;
50361: LD_ADDR_OWVAR 27
50365: PUSH
50366: LD_INT 1
50368: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50369: LD_ADDR_OWVAR 28
50373: PUSH
50374: LD_INT 16
50376: ST_TO_ADDR
// hc_gallery :=  ;
50377: LD_ADDR_OWVAR 33
50381: PUSH
50382: LD_STRING 
50384: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50385: LD_ADDR_OWVAR 31
50389: PUSH
50390: LD_INT 0
50392: PPUSH
50393: LD_INT 3
50395: PPUSH
50396: CALL_OW 12
50400: PUSH
50401: LD_INT 0
50403: PPUSH
50404: LD_INT 3
50406: PPUSH
50407: CALL_OW 12
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: ST_TO_ADDR
// end ;
50424: LD_VAR 0 1
50428: RET
// export function PrepareApeman ( agressivity ) ; begin
50429: LD_INT 0
50431: PPUSH
// uc_side := 0 ;
50432: LD_ADDR_OWVAR 20
50436: PUSH
50437: LD_INT 0
50439: ST_TO_ADDR
// uc_nation := 0 ;
50440: LD_ADDR_OWVAR 21
50444: PUSH
50445: LD_INT 0
50447: ST_TO_ADDR
// hc_sex := sex_male ;
50448: LD_ADDR_OWVAR 27
50452: PUSH
50453: LD_INT 1
50455: ST_TO_ADDR
// hc_class := class_apeman ;
50456: LD_ADDR_OWVAR 28
50460: PUSH
50461: LD_INT 12
50463: ST_TO_ADDR
// hc_gallery :=  ;
50464: LD_ADDR_OWVAR 33
50468: PUSH
50469: LD_STRING 
50471: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50472: LD_ADDR_OWVAR 35
50476: PUSH
50477: LD_VAR 0 1
50481: NEG
50482: PPUSH
50483: LD_VAR 0 1
50487: PPUSH
50488: CALL_OW 12
50492: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50493: LD_ADDR_OWVAR 31
50497: PUSH
50498: LD_INT 0
50500: PPUSH
50501: LD_INT 3
50503: PPUSH
50504: CALL_OW 12
50508: PUSH
50509: LD_INT 0
50511: PPUSH
50512: LD_INT 3
50514: PPUSH
50515: CALL_OW 12
50519: PUSH
50520: LD_INT 0
50522: PUSH
50523: LD_INT 0
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: ST_TO_ADDR
// end ;
50532: LD_VAR 0 2
50536: RET
// export function PrepareTiger ( agressivity ) ; begin
50537: LD_INT 0
50539: PPUSH
// uc_side := 0 ;
50540: LD_ADDR_OWVAR 20
50544: PUSH
50545: LD_INT 0
50547: ST_TO_ADDR
// uc_nation := 0 ;
50548: LD_ADDR_OWVAR 21
50552: PUSH
50553: LD_INT 0
50555: ST_TO_ADDR
// hc_class := class_tiger ;
50556: LD_ADDR_OWVAR 28
50560: PUSH
50561: LD_INT 14
50563: ST_TO_ADDR
// hc_gallery :=  ;
50564: LD_ADDR_OWVAR 33
50568: PUSH
50569: LD_STRING 
50571: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50572: LD_ADDR_OWVAR 35
50576: PUSH
50577: LD_VAR 0 1
50581: NEG
50582: PPUSH
50583: LD_VAR 0 1
50587: PPUSH
50588: CALL_OW 12
50592: ST_TO_ADDR
// end ;
50593: LD_VAR 0 2
50597: RET
// export function PrepareEnchidna ( ) ; begin
50598: LD_INT 0
50600: PPUSH
// uc_side := 0 ;
50601: LD_ADDR_OWVAR 20
50605: PUSH
50606: LD_INT 0
50608: ST_TO_ADDR
// uc_nation := 0 ;
50609: LD_ADDR_OWVAR 21
50613: PUSH
50614: LD_INT 0
50616: ST_TO_ADDR
// hc_class := class_baggie ;
50617: LD_ADDR_OWVAR 28
50621: PUSH
50622: LD_INT 13
50624: ST_TO_ADDR
// hc_gallery :=  ;
50625: LD_ADDR_OWVAR 33
50629: PUSH
50630: LD_STRING 
50632: ST_TO_ADDR
// end ;
50633: LD_VAR 0 1
50637: RET
// export function PrepareFrog ( ) ; begin
50638: LD_INT 0
50640: PPUSH
// uc_side := 0 ;
50641: LD_ADDR_OWVAR 20
50645: PUSH
50646: LD_INT 0
50648: ST_TO_ADDR
// uc_nation := 0 ;
50649: LD_ADDR_OWVAR 21
50653: PUSH
50654: LD_INT 0
50656: ST_TO_ADDR
// hc_class := class_frog ;
50657: LD_ADDR_OWVAR 28
50661: PUSH
50662: LD_INT 19
50664: ST_TO_ADDR
// hc_gallery :=  ;
50665: LD_ADDR_OWVAR 33
50669: PUSH
50670: LD_STRING 
50672: ST_TO_ADDR
// end ;
50673: LD_VAR 0 1
50677: RET
// export function PrepareFish ( ) ; begin
50678: LD_INT 0
50680: PPUSH
// uc_side := 0 ;
50681: LD_ADDR_OWVAR 20
50685: PUSH
50686: LD_INT 0
50688: ST_TO_ADDR
// uc_nation := 0 ;
50689: LD_ADDR_OWVAR 21
50693: PUSH
50694: LD_INT 0
50696: ST_TO_ADDR
// hc_class := class_fish ;
50697: LD_ADDR_OWVAR 28
50701: PUSH
50702: LD_INT 20
50704: ST_TO_ADDR
// hc_gallery :=  ;
50705: LD_ADDR_OWVAR 33
50709: PUSH
50710: LD_STRING 
50712: ST_TO_ADDR
// end ;
50713: LD_VAR 0 1
50717: RET
// export function PrepareBird ( ) ; begin
50718: LD_INT 0
50720: PPUSH
// uc_side := 0 ;
50721: LD_ADDR_OWVAR 20
50725: PUSH
50726: LD_INT 0
50728: ST_TO_ADDR
// uc_nation := 0 ;
50729: LD_ADDR_OWVAR 21
50733: PUSH
50734: LD_INT 0
50736: ST_TO_ADDR
// hc_class := class_phororhacos ;
50737: LD_ADDR_OWVAR 28
50741: PUSH
50742: LD_INT 18
50744: ST_TO_ADDR
// hc_gallery :=  ;
50745: LD_ADDR_OWVAR 33
50749: PUSH
50750: LD_STRING 
50752: ST_TO_ADDR
// end ;
50753: LD_VAR 0 1
50757: RET
// export function PrepareHorse ( ) ; begin
50758: LD_INT 0
50760: PPUSH
// uc_side := 0 ;
50761: LD_ADDR_OWVAR 20
50765: PUSH
50766: LD_INT 0
50768: ST_TO_ADDR
// uc_nation := 0 ;
50769: LD_ADDR_OWVAR 21
50773: PUSH
50774: LD_INT 0
50776: ST_TO_ADDR
// hc_class := class_horse ;
50777: LD_ADDR_OWVAR 28
50781: PUSH
50782: LD_INT 21
50784: ST_TO_ADDR
// hc_gallery :=  ;
50785: LD_ADDR_OWVAR 33
50789: PUSH
50790: LD_STRING 
50792: ST_TO_ADDR
// end ;
50793: LD_VAR 0 1
50797: RET
// export function PrepareMastodont ( ) ; begin
50798: LD_INT 0
50800: PPUSH
// uc_side := 0 ;
50801: LD_ADDR_OWVAR 20
50805: PUSH
50806: LD_INT 0
50808: ST_TO_ADDR
// uc_nation := 0 ;
50809: LD_ADDR_OWVAR 21
50813: PUSH
50814: LD_INT 0
50816: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50817: LD_ADDR_OWVAR 37
50821: PUSH
50822: LD_INT 31
50824: ST_TO_ADDR
// vc_control := control_rider ;
50825: LD_ADDR_OWVAR 38
50829: PUSH
50830: LD_INT 4
50832: ST_TO_ADDR
// end ;
50833: LD_VAR 0 1
50837: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50838: LD_INT 0
50840: PPUSH
50841: PPUSH
50842: PPUSH
// uc_side = 0 ;
50843: LD_ADDR_OWVAR 20
50847: PUSH
50848: LD_INT 0
50850: ST_TO_ADDR
// uc_nation = 0 ;
50851: LD_ADDR_OWVAR 21
50855: PUSH
50856: LD_INT 0
50858: ST_TO_ADDR
// InitHc_All ( ) ;
50859: CALL_OW 584
// InitVc ;
50863: CALL_OW 20
// if mastodonts then
50867: LD_VAR 0 6
50871: IFFALSE 50938
// for i = 1 to mastodonts do
50873: LD_ADDR_VAR 0 11
50877: PUSH
50878: DOUBLE
50879: LD_INT 1
50881: DEC
50882: ST_TO_ADDR
50883: LD_VAR 0 6
50887: PUSH
50888: FOR_TO
50889: IFFALSE 50936
// begin vc_chassis := 31 ;
50891: LD_ADDR_OWVAR 37
50895: PUSH
50896: LD_INT 31
50898: ST_TO_ADDR
// vc_control := control_rider ;
50899: LD_ADDR_OWVAR 38
50903: PUSH
50904: LD_INT 4
50906: ST_TO_ADDR
// animal := CreateVehicle ;
50907: LD_ADDR_VAR 0 12
50911: PUSH
50912: CALL_OW 45
50916: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50917: LD_VAR 0 12
50921: PPUSH
50922: LD_VAR 0 8
50926: PPUSH
50927: LD_INT 0
50929: PPUSH
50930: CALL 53066 0 3
// end ;
50934: GO 50888
50936: POP
50937: POP
// if horses then
50938: LD_VAR 0 5
50942: IFFALSE 51009
// for i = 1 to horses do
50944: LD_ADDR_VAR 0 11
50948: PUSH
50949: DOUBLE
50950: LD_INT 1
50952: DEC
50953: ST_TO_ADDR
50954: LD_VAR 0 5
50958: PUSH
50959: FOR_TO
50960: IFFALSE 51007
// begin hc_class := 21 ;
50962: LD_ADDR_OWVAR 28
50966: PUSH
50967: LD_INT 21
50969: ST_TO_ADDR
// hc_gallery :=  ;
50970: LD_ADDR_OWVAR 33
50974: PUSH
50975: LD_STRING 
50977: ST_TO_ADDR
// animal := CreateHuman ;
50978: LD_ADDR_VAR 0 12
50982: PUSH
50983: CALL_OW 44
50987: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50988: LD_VAR 0 12
50992: PPUSH
50993: LD_VAR 0 8
50997: PPUSH
50998: LD_INT 0
51000: PPUSH
51001: CALL 53066 0 3
// end ;
51005: GO 50959
51007: POP
51008: POP
// if birds then
51009: LD_VAR 0 1
51013: IFFALSE 51080
// for i = 1 to birds do
51015: LD_ADDR_VAR 0 11
51019: PUSH
51020: DOUBLE
51021: LD_INT 1
51023: DEC
51024: ST_TO_ADDR
51025: LD_VAR 0 1
51029: PUSH
51030: FOR_TO
51031: IFFALSE 51078
// begin hc_class := 18 ;
51033: LD_ADDR_OWVAR 28
51037: PUSH
51038: LD_INT 18
51040: ST_TO_ADDR
// hc_gallery =  ;
51041: LD_ADDR_OWVAR 33
51045: PUSH
51046: LD_STRING 
51048: ST_TO_ADDR
// animal := CreateHuman ;
51049: LD_ADDR_VAR 0 12
51053: PUSH
51054: CALL_OW 44
51058: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51059: LD_VAR 0 12
51063: PPUSH
51064: LD_VAR 0 8
51068: PPUSH
51069: LD_INT 0
51071: PPUSH
51072: CALL 53066 0 3
// end ;
51076: GO 51030
51078: POP
51079: POP
// if tigers then
51080: LD_VAR 0 2
51084: IFFALSE 51168
// for i = 1 to tigers do
51086: LD_ADDR_VAR 0 11
51090: PUSH
51091: DOUBLE
51092: LD_INT 1
51094: DEC
51095: ST_TO_ADDR
51096: LD_VAR 0 2
51100: PUSH
51101: FOR_TO
51102: IFFALSE 51166
// begin hc_class = class_tiger ;
51104: LD_ADDR_OWVAR 28
51108: PUSH
51109: LD_INT 14
51111: ST_TO_ADDR
// hc_gallery =  ;
51112: LD_ADDR_OWVAR 33
51116: PUSH
51117: LD_STRING 
51119: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51120: LD_ADDR_OWVAR 35
51124: PUSH
51125: LD_INT 7
51127: NEG
51128: PPUSH
51129: LD_INT 7
51131: PPUSH
51132: CALL_OW 12
51136: ST_TO_ADDR
// animal := CreateHuman ;
51137: LD_ADDR_VAR 0 12
51141: PUSH
51142: CALL_OW 44
51146: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51147: LD_VAR 0 12
51151: PPUSH
51152: LD_VAR 0 8
51156: PPUSH
51157: LD_INT 0
51159: PPUSH
51160: CALL 53066 0 3
// end ;
51164: GO 51101
51166: POP
51167: POP
// if apemans then
51168: LD_VAR 0 3
51172: IFFALSE 51295
// for i = 1 to apemans do
51174: LD_ADDR_VAR 0 11
51178: PUSH
51179: DOUBLE
51180: LD_INT 1
51182: DEC
51183: ST_TO_ADDR
51184: LD_VAR 0 3
51188: PUSH
51189: FOR_TO
51190: IFFALSE 51293
// begin hc_class = class_apeman ;
51192: LD_ADDR_OWVAR 28
51196: PUSH
51197: LD_INT 12
51199: ST_TO_ADDR
// hc_gallery =  ;
51200: LD_ADDR_OWVAR 33
51204: PUSH
51205: LD_STRING 
51207: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51208: LD_ADDR_OWVAR 35
51212: PUSH
51213: LD_INT 2
51215: NEG
51216: PPUSH
51217: LD_INT 2
51219: PPUSH
51220: CALL_OW 12
51224: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51225: LD_ADDR_OWVAR 31
51229: PUSH
51230: LD_INT 1
51232: PPUSH
51233: LD_INT 3
51235: PPUSH
51236: CALL_OW 12
51240: PUSH
51241: LD_INT 1
51243: PPUSH
51244: LD_INT 3
51246: PPUSH
51247: CALL_OW 12
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: LD_INT 0
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: ST_TO_ADDR
// animal := CreateHuman ;
51264: LD_ADDR_VAR 0 12
51268: PUSH
51269: CALL_OW 44
51273: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51274: LD_VAR 0 12
51278: PPUSH
51279: LD_VAR 0 8
51283: PPUSH
51284: LD_INT 0
51286: PPUSH
51287: CALL 53066 0 3
// end ;
51291: GO 51189
51293: POP
51294: POP
// if enchidnas then
51295: LD_VAR 0 4
51299: IFFALSE 51366
// for i = 1 to enchidnas do
51301: LD_ADDR_VAR 0 11
51305: PUSH
51306: DOUBLE
51307: LD_INT 1
51309: DEC
51310: ST_TO_ADDR
51311: LD_VAR 0 4
51315: PUSH
51316: FOR_TO
51317: IFFALSE 51364
// begin hc_class = 13 ;
51319: LD_ADDR_OWVAR 28
51323: PUSH
51324: LD_INT 13
51326: ST_TO_ADDR
// hc_gallery =  ;
51327: LD_ADDR_OWVAR 33
51331: PUSH
51332: LD_STRING 
51334: ST_TO_ADDR
// animal := CreateHuman ;
51335: LD_ADDR_VAR 0 12
51339: PUSH
51340: CALL_OW 44
51344: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51345: LD_VAR 0 12
51349: PPUSH
51350: LD_VAR 0 8
51354: PPUSH
51355: LD_INT 0
51357: PPUSH
51358: CALL 53066 0 3
// end ;
51362: GO 51316
51364: POP
51365: POP
// if fishes then
51366: LD_VAR 0 7
51370: IFFALSE 51437
// for i = 1 to fishes do
51372: LD_ADDR_VAR 0 11
51376: PUSH
51377: DOUBLE
51378: LD_INT 1
51380: DEC
51381: ST_TO_ADDR
51382: LD_VAR 0 7
51386: PUSH
51387: FOR_TO
51388: IFFALSE 51435
// begin hc_class = 20 ;
51390: LD_ADDR_OWVAR 28
51394: PUSH
51395: LD_INT 20
51397: ST_TO_ADDR
// hc_gallery =  ;
51398: LD_ADDR_OWVAR 33
51402: PUSH
51403: LD_STRING 
51405: ST_TO_ADDR
// animal := CreateHuman ;
51406: LD_ADDR_VAR 0 12
51410: PUSH
51411: CALL_OW 44
51415: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51416: LD_VAR 0 12
51420: PPUSH
51421: LD_VAR 0 9
51425: PPUSH
51426: LD_INT 0
51428: PPUSH
51429: CALL 53066 0 3
// end ;
51433: GO 51387
51435: POP
51436: POP
// end ;
51437: LD_VAR 0 10
51441: RET
// export function WantHeal ( sci , unit ) ; begin
51442: LD_INT 0
51444: PPUSH
// if GetTaskList ( sci ) > 0 then
51445: LD_VAR 0 1
51449: PPUSH
51450: CALL_OW 437
51454: PUSH
51455: LD_INT 0
51457: GREATER
51458: IFFALSE 51528
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51460: LD_VAR 0 1
51464: PPUSH
51465: CALL_OW 437
51469: PUSH
51470: LD_INT 1
51472: ARRAY
51473: PUSH
51474: LD_INT 1
51476: ARRAY
51477: PUSH
51478: LD_STRING l
51480: EQUAL
51481: PUSH
51482: LD_VAR 0 1
51486: PPUSH
51487: CALL_OW 437
51491: PUSH
51492: LD_INT 1
51494: ARRAY
51495: PUSH
51496: LD_INT 4
51498: ARRAY
51499: PUSH
51500: LD_VAR 0 2
51504: EQUAL
51505: AND
51506: IFFALSE 51518
// result := true else
51508: LD_ADDR_VAR 0 3
51512: PUSH
51513: LD_INT 1
51515: ST_TO_ADDR
51516: GO 51526
// result := false ;
51518: LD_ADDR_VAR 0 3
51522: PUSH
51523: LD_INT 0
51525: ST_TO_ADDR
// end else
51526: GO 51536
// result := false ;
51528: LD_ADDR_VAR 0 3
51532: PUSH
51533: LD_INT 0
51535: ST_TO_ADDR
// end ;
51536: LD_VAR 0 3
51540: RET
// export function HealTarget ( sci ) ; begin
51541: LD_INT 0
51543: PPUSH
// if not sci then
51544: LD_VAR 0 1
51548: NOT
51549: IFFALSE 51553
// exit ;
51551: GO 51618
// result := 0 ;
51553: LD_ADDR_VAR 0 2
51557: PUSH
51558: LD_INT 0
51560: ST_TO_ADDR
// if GetTaskList ( sci ) then
51561: LD_VAR 0 1
51565: PPUSH
51566: CALL_OW 437
51570: IFFALSE 51618
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51572: LD_VAR 0 1
51576: PPUSH
51577: CALL_OW 437
51581: PUSH
51582: LD_INT 1
51584: ARRAY
51585: PUSH
51586: LD_INT 1
51588: ARRAY
51589: PUSH
51590: LD_STRING l
51592: EQUAL
51593: IFFALSE 51618
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51595: LD_ADDR_VAR 0 2
51599: PUSH
51600: LD_VAR 0 1
51604: PPUSH
51605: CALL_OW 437
51609: PUSH
51610: LD_INT 1
51612: ARRAY
51613: PUSH
51614: LD_INT 4
51616: ARRAY
51617: ST_TO_ADDR
// end ;
51618: LD_VAR 0 2
51622: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51623: LD_INT 0
51625: PPUSH
51626: PPUSH
51627: PPUSH
51628: PPUSH
// if not base_units then
51629: LD_VAR 0 1
51633: NOT
51634: IFFALSE 51638
// exit ;
51636: GO 51725
// result := false ;
51638: LD_ADDR_VAR 0 2
51642: PUSH
51643: LD_INT 0
51645: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51646: LD_ADDR_VAR 0 5
51650: PUSH
51651: LD_VAR 0 1
51655: PPUSH
51656: LD_INT 21
51658: PUSH
51659: LD_INT 3
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PPUSH
51666: CALL_OW 72
51670: ST_TO_ADDR
// if not tmp then
51671: LD_VAR 0 5
51675: NOT
51676: IFFALSE 51680
// exit ;
51678: GO 51725
// for i in tmp do
51680: LD_ADDR_VAR 0 3
51684: PUSH
51685: LD_VAR 0 5
51689: PUSH
51690: FOR_IN
51691: IFFALSE 51723
// begin result := EnemyInRange ( i , 22 ) ;
51693: LD_ADDR_VAR 0 2
51697: PUSH
51698: LD_VAR 0 3
51702: PPUSH
51703: LD_INT 22
51705: PPUSH
51706: CALL 49312 0 2
51710: ST_TO_ADDR
// if result then
51711: LD_VAR 0 2
51715: IFFALSE 51721
// exit ;
51717: POP
51718: POP
51719: GO 51725
// end ;
51721: GO 51690
51723: POP
51724: POP
// end ;
51725: LD_VAR 0 2
51729: RET
// export function FilterByTag ( units , tag ) ; begin
51730: LD_INT 0
51732: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51733: LD_ADDR_VAR 0 3
51737: PUSH
51738: LD_VAR 0 1
51742: PPUSH
51743: LD_INT 120
51745: PUSH
51746: LD_VAR 0 2
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PPUSH
51755: CALL_OW 72
51759: ST_TO_ADDR
// end ;
51760: LD_VAR 0 3
51764: RET
// export function IsDriver ( un ) ; begin
51765: LD_INT 0
51767: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51768: LD_ADDR_VAR 0 2
51772: PUSH
51773: LD_VAR 0 1
51777: PUSH
51778: LD_INT 55
51780: PUSH
51781: EMPTY
51782: LIST
51783: PPUSH
51784: CALL_OW 69
51788: IN
51789: ST_TO_ADDR
// end ;
51790: LD_VAR 0 2
51794: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51795: LD_INT 0
51797: PPUSH
51798: PPUSH
// list := [ ] ;
51799: LD_ADDR_VAR 0 5
51803: PUSH
51804: EMPTY
51805: ST_TO_ADDR
// case d of 0 :
51806: LD_VAR 0 3
51810: PUSH
51811: LD_INT 0
51813: DOUBLE
51814: EQUAL
51815: IFTRUE 51819
51817: GO 51952
51819: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51820: LD_ADDR_VAR 0 5
51824: PUSH
51825: LD_VAR 0 1
51829: PUSH
51830: LD_INT 4
51832: MINUS
51833: PUSH
51834: LD_VAR 0 2
51838: PUSH
51839: LD_INT 4
51841: MINUS
51842: PUSH
51843: LD_INT 2
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: LIST
51850: PUSH
51851: LD_VAR 0 1
51855: PUSH
51856: LD_INT 3
51858: MINUS
51859: PUSH
51860: LD_VAR 0 2
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: LIST
51872: PUSH
51873: LD_VAR 0 1
51877: PUSH
51878: LD_INT 4
51880: PLUS
51881: PUSH
51882: LD_VAR 0 2
51886: PUSH
51887: LD_INT 4
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: LIST
51894: PUSH
51895: LD_VAR 0 1
51899: PUSH
51900: LD_INT 3
51902: PLUS
51903: PUSH
51904: LD_VAR 0 2
51908: PUSH
51909: LD_INT 3
51911: PLUS
51912: PUSH
51913: LD_INT 5
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: LIST
51920: PUSH
51921: LD_VAR 0 1
51925: PUSH
51926: LD_VAR 0 2
51930: PUSH
51931: LD_INT 4
51933: PLUS
51934: PUSH
51935: LD_INT 0
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: LIST
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: ST_TO_ADDR
// end ; 1 :
51950: GO 52650
51952: LD_INT 1
51954: DOUBLE
51955: EQUAL
51956: IFTRUE 51960
51958: GO 52093
51960: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51961: LD_ADDR_VAR 0 5
51965: PUSH
51966: LD_VAR 0 1
51970: PUSH
51971: LD_VAR 0 2
51975: PUSH
51976: LD_INT 4
51978: MINUS
51979: PUSH
51980: LD_INT 3
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: LIST
51987: PUSH
51988: LD_VAR 0 1
51992: PUSH
51993: LD_INT 3
51995: MINUS
51996: PUSH
51997: LD_VAR 0 2
52001: PUSH
52002: LD_INT 3
52004: MINUS
52005: PUSH
52006: LD_INT 2
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: LIST
52013: PUSH
52014: LD_VAR 0 1
52018: PUSH
52019: LD_INT 4
52021: MINUS
52022: PUSH
52023: LD_VAR 0 2
52027: PUSH
52028: LD_INT 1
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: LIST
52035: PUSH
52036: LD_VAR 0 1
52040: PUSH
52041: LD_VAR 0 2
52045: PUSH
52046: LD_INT 3
52048: PLUS
52049: PUSH
52050: LD_INT 0
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: LIST
52057: PUSH
52058: LD_VAR 0 1
52062: PUSH
52063: LD_INT 4
52065: PLUS
52066: PUSH
52067: LD_VAR 0 2
52071: PUSH
52072: LD_INT 4
52074: PLUS
52075: PUSH
52076: LD_INT 5
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: LIST
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: ST_TO_ADDR
// end ; 2 :
52091: GO 52650
52093: LD_INT 2
52095: DOUBLE
52096: EQUAL
52097: IFTRUE 52101
52099: GO 52230
52101: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52102: LD_ADDR_VAR 0 5
52106: PUSH
52107: LD_VAR 0 1
52111: PUSH
52112: LD_VAR 0 2
52116: PUSH
52117: LD_INT 3
52119: MINUS
52120: PUSH
52121: LD_INT 3
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: LIST
52128: PUSH
52129: LD_VAR 0 1
52133: PUSH
52134: LD_INT 4
52136: PLUS
52137: PUSH
52138: LD_VAR 0 2
52142: PUSH
52143: LD_INT 4
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: LIST
52150: PUSH
52151: LD_VAR 0 1
52155: PUSH
52156: LD_VAR 0 2
52160: PUSH
52161: LD_INT 4
52163: PLUS
52164: PUSH
52165: LD_INT 0
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: LIST
52172: PUSH
52173: LD_VAR 0 1
52177: PUSH
52178: LD_INT 3
52180: MINUS
52181: PUSH
52182: LD_VAR 0 2
52186: PUSH
52187: LD_INT 1
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: LIST
52194: PUSH
52195: LD_VAR 0 1
52199: PUSH
52200: LD_INT 4
52202: MINUS
52203: PUSH
52204: LD_VAR 0 2
52208: PUSH
52209: LD_INT 4
52211: MINUS
52212: PUSH
52213: LD_INT 2
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: LIST
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: ST_TO_ADDR
// end ; 3 :
52228: GO 52650
52230: LD_INT 3
52232: DOUBLE
52233: EQUAL
52234: IFTRUE 52238
52236: GO 52371
52238: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52239: LD_ADDR_VAR 0 5
52243: PUSH
52244: LD_VAR 0 1
52248: PUSH
52249: LD_INT 3
52251: PLUS
52252: PUSH
52253: LD_VAR 0 2
52257: PUSH
52258: LD_INT 4
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: LIST
52265: PUSH
52266: LD_VAR 0 1
52270: PUSH
52271: LD_INT 4
52273: PLUS
52274: PUSH
52275: LD_VAR 0 2
52279: PUSH
52280: LD_INT 4
52282: PLUS
52283: PUSH
52284: LD_INT 5
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: LIST
52291: PUSH
52292: LD_VAR 0 1
52296: PUSH
52297: LD_INT 4
52299: MINUS
52300: PUSH
52301: LD_VAR 0 2
52305: PUSH
52306: LD_INT 1
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: LIST
52313: PUSH
52314: LD_VAR 0 1
52318: PUSH
52319: LD_VAR 0 2
52323: PUSH
52324: LD_INT 4
52326: MINUS
52327: PUSH
52328: LD_INT 3
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: LIST
52335: PUSH
52336: LD_VAR 0 1
52340: PUSH
52341: LD_INT 3
52343: MINUS
52344: PUSH
52345: LD_VAR 0 2
52349: PUSH
52350: LD_INT 3
52352: MINUS
52353: PUSH
52354: LD_INT 2
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: LIST
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: ST_TO_ADDR
// end ; 4 :
52369: GO 52650
52371: LD_INT 4
52373: DOUBLE
52374: EQUAL
52375: IFTRUE 52379
52377: GO 52512
52379: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52380: LD_ADDR_VAR 0 5
52384: PUSH
52385: LD_VAR 0 1
52389: PUSH
52390: LD_VAR 0 2
52394: PUSH
52395: LD_INT 4
52397: PLUS
52398: PUSH
52399: LD_INT 0
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: LIST
52406: PUSH
52407: LD_VAR 0 1
52411: PUSH
52412: LD_INT 3
52414: PLUS
52415: PUSH
52416: LD_VAR 0 2
52420: PUSH
52421: LD_INT 3
52423: PLUS
52424: PUSH
52425: LD_INT 5
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: LIST
52432: PUSH
52433: LD_VAR 0 1
52437: PUSH
52438: LD_INT 4
52440: PLUS
52441: PUSH
52442: LD_VAR 0 2
52446: PUSH
52447: LD_INT 4
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: LIST
52454: PUSH
52455: LD_VAR 0 1
52459: PUSH
52460: LD_VAR 0 2
52464: PUSH
52465: LD_INT 3
52467: MINUS
52468: PUSH
52469: LD_INT 3
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: LIST
52476: PUSH
52477: LD_VAR 0 1
52481: PUSH
52482: LD_INT 4
52484: MINUS
52485: PUSH
52486: LD_VAR 0 2
52490: PUSH
52491: LD_INT 4
52493: MINUS
52494: PUSH
52495: LD_INT 2
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: LIST
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: ST_TO_ADDR
// end ; 5 :
52510: GO 52650
52512: LD_INT 5
52514: DOUBLE
52515: EQUAL
52516: IFTRUE 52520
52518: GO 52649
52520: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52521: LD_ADDR_VAR 0 5
52525: PUSH
52526: LD_VAR 0 1
52530: PUSH
52531: LD_INT 4
52533: MINUS
52534: PUSH
52535: LD_VAR 0 2
52539: PUSH
52540: LD_INT 1
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: LIST
52547: PUSH
52548: LD_VAR 0 1
52552: PUSH
52553: LD_VAR 0 2
52557: PUSH
52558: LD_INT 4
52560: MINUS
52561: PUSH
52562: LD_INT 3
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: LIST
52569: PUSH
52570: LD_VAR 0 1
52574: PUSH
52575: LD_INT 4
52577: PLUS
52578: PUSH
52579: LD_VAR 0 2
52583: PUSH
52584: LD_INT 4
52586: PLUS
52587: PUSH
52588: LD_INT 5
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: LIST
52595: PUSH
52596: LD_VAR 0 1
52600: PUSH
52601: LD_INT 3
52603: PLUS
52604: PUSH
52605: LD_VAR 0 2
52609: PUSH
52610: LD_INT 4
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: LIST
52617: PUSH
52618: LD_VAR 0 1
52622: PUSH
52623: LD_VAR 0 2
52627: PUSH
52628: LD_INT 3
52630: PLUS
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: LIST
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: ST_TO_ADDR
// end ; end ;
52647: GO 52650
52649: POP
// result := list ;
52650: LD_ADDR_VAR 0 4
52654: PUSH
52655: LD_VAR 0 5
52659: ST_TO_ADDR
// end ;
52660: LD_VAR 0 4
52664: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52665: LD_INT 0
52667: PPUSH
52668: PPUSH
52669: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52670: LD_VAR 0 1
52674: NOT
52675: PUSH
52676: LD_VAR 0 2
52680: PUSH
52681: LD_INT 1
52683: PUSH
52684: LD_INT 2
52686: PUSH
52687: LD_INT 3
52689: PUSH
52690: LD_INT 4
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: IN
52699: NOT
52700: OR
52701: IFFALSE 52705
// exit ;
52703: GO 52788
// tmp := [ ] ;
52705: LD_ADDR_VAR 0 5
52709: PUSH
52710: EMPTY
52711: ST_TO_ADDR
// for i in units do
52712: LD_ADDR_VAR 0 4
52716: PUSH
52717: LD_VAR 0 1
52721: PUSH
52722: FOR_IN
52723: IFFALSE 52757
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52725: LD_ADDR_VAR 0 5
52729: PUSH
52730: LD_VAR 0 5
52734: PPUSH
52735: LD_VAR 0 4
52739: PPUSH
52740: LD_VAR 0 2
52744: PPUSH
52745: CALL_OW 259
52749: PPUSH
52750: CALL 54161 0 2
52754: ST_TO_ADDR
52755: GO 52722
52757: POP
52758: POP
// if not tmp then
52759: LD_VAR 0 5
52763: NOT
52764: IFFALSE 52768
// exit ;
52766: GO 52788
// result := SortListByListDesc ( units , tmp ) ;
52768: LD_ADDR_VAR 0 3
52772: PUSH
52773: LD_VAR 0 1
52777: PPUSH
52778: LD_VAR 0 5
52782: PPUSH
52783: CALL_OW 77
52787: ST_TO_ADDR
// end ;
52788: LD_VAR 0 3
52792: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52793: LD_INT 0
52795: PPUSH
52796: PPUSH
52797: PPUSH
// result := false ;
52798: LD_ADDR_VAR 0 3
52802: PUSH
52803: LD_INT 0
52805: ST_TO_ADDR
// if not building then
52806: LD_VAR 0 2
52810: NOT
52811: IFFALSE 52815
// exit ;
52813: GO 52953
// x := GetX ( building ) ;
52815: LD_ADDR_VAR 0 4
52819: PUSH
52820: LD_VAR 0 2
52824: PPUSH
52825: CALL_OW 250
52829: ST_TO_ADDR
// y := GetY ( building ) ;
52830: LD_ADDR_VAR 0 5
52834: PUSH
52835: LD_VAR 0 2
52839: PPUSH
52840: CALL_OW 251
52844: ST_TO_ADDR
// if not x or not y then
52845: LD_VAR 0 4
52849: NOT
52850: PUSH
52851: LD_VAR 0 5
52855: NOT
52856: OR
52857: IFFALSE 52861
// exit ;
52859: GO 52953
// if GetTaskList ( unit ) then
52861: LD_VAR 0 1
52865: PPUSH
52866: CALL_OW 437
52870: IFFALSE 52953
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52872: LD_STRING e
52874: PUSH
52875: LD_VAR 0 1
52879: PPUSH
52880: CALL_OW 437
52884: PUSH
52885: LD_INT 1
52887: ARRAY
52888: PUSH
52889: LD_INT 1
52891: ARRAY
52892: EQUAL
52893: PUSH
52894: LD_VAR 0 4
52898: PUSH
52899: LD_VAR 0 1
52903: PPUSH
52904: CALL_OW 437
52908: PUSH
52909: LD_INT 1
52911: ARRAY
52912: PUSH
52913: LD_INT 2
52915: ARRAY
52916: EQUAL
52917: AND
52918: PUSH
52919: LD_VAR 0 5
52923: PUSH
52924: LD_VAR 0 1
52928: PPUSH
52929: CALL_OW 437
52933: PUSH
52934: LD_INT 1
52936: ARRAY
52937: PUSH
52938: LD_INT 3
52940: ARRAY
52941: EQUAL
52942: AND
52943: IFFALSE 52953
// result := true end ;
52945: LD_ADDR_VAR 0 3
52949: PUSH
52950: LD_INT 1
52952: ST_TO_ADDR
// end ;
52953: LD_VAR 0 3
52957: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52958: LD_INT 0
52960: PPUSH
// result := false ;
52961: LD_ADDR_VAR 0 4
52965: PUSH
52966: LD_INT 0
52968: ST_TO_ADDR
// if GetTaskList ( unit ) then
52969: LD_VAR 0 1
52973: PPUSH
52974: CALL_OW 437
52978: IFFALSE 53061
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52980: LD_STRING M
52982: PUSH
52983: LD_VAR 0 1
52987: PPUSH
52988: CALL_OW 437
52992: PUSH
52993: LD_INT 1
52995: ARRAY
52996: PUSH
52997: LD_INT 1
52999: ARRAY
53000: EQUAL
53001: PUSH
53002: LD_VAR 0 2
53006: PUSH
53007: LD_VAR 0 1
53011: PPUSH
53012: CALL_OW 437
53016: PUSH
53017: LD_INT 1
53019: ARRAY
53020: PUSH
53021: LD_INT 2
53023: ARRAY
53024: EQUAL
53025: AND
53026: PUSH
53027: LD_VAR 0 3
53031: PUSH
53032: LD_VAR 0 1
53036: PPUSH
53037: CALL_OW 437
53041: PUSH
53042: LD_INT 1
53044: ARRAY
53045: PUSH
53046: LD_INT 3
53048: ARRAY
53049: EQUAL
53050: AND
53051: IFFALSE 53061
// result := true ;
53053: LD_ADDR_VAR 0 4
53057: PUSH
53058: LD_INT 1
53060: ST_TO_ADDR
// end ; end ;
53061: LD_VAR 0 4
53065: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53066: LD_INT 0
53068: PPUSH
53069: PPUSH
53070: PPUSH
53071: PPUSH
// if not unit or not area then
53072: LD_VAR 0 1
53076: NOT
53077: PUSH
53078: LD_VAR 0 2
53082: NOT
53083: OR
53084: IFFALSE 53088
// exit ;
53086: GO 53264
// tmp := AreaToList ( area , i ) ;
53088: LD_ADDR_VAR 0 6
53092: PUSH
53093: LD_VAR 0 2
53097: PPUSH
53098: LD_VAR 0 5
53102: PPUSH
53103: CALL_OW 517
53107: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53108: LD_ADDR_VAR 0 5
53112: PUSH
53113: DOUBLE
53114: LD_INT 1
53116: DEC
53117: ST_TO_ADDR
53118: LD_VAR 0 6
53122: PUSH
53123: LD_INT 1
53125: ARRAY
53126: PUSH
53127: FOR_TO
53128: IFFALSE 53262
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53130: LD_ADDR_VAR 0 7
53134: PUSH
53135: LD_VAR 0 6
53139: PUSH
53140: LD_INT 1
53142: ARRAY
53143: PUSH
53144: LD_VAR 0 5
53148: ARRAY
53149: PUSH
53150: LD_VAR 0 6
53154: PUSH
53155: LD_INT 2
53157: ARRAY
53158: PUSH
53159: LD_VAR 0 5
53163: ARRAY
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
53169: LD_INT 92
53171: PUSH
53172: LD_VAR 0 7
53176: PUSH
53177: LD_INT 1
53179: ARRAY
53180: PUSH
53181: LD_VAR 0 7
53185: PUSH
53186: LD_INT 2
53188: ARRAY
53189: PUSH
53190: LD_INT 2
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: PPUSH
53199: CALL_OW 69
53203: PUSH
53204: LD_INT 0
53206: EQUAL
53207: IFFALSE 53260
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53209: LD_VAR 0 1
53213: PPUSH
53214: LD_VAR 0 7
53218: PUSH
53219: LD_INT 1
53221: ARRAY
53222: PPUSH
53223: LD_VAR 0 7
53227: PUSH
53228: LD_INT 2
53230: ARRAY
53231: PPUSH
53232: LD_VAR 0 3
53236: PPUSH
53237: CALL_OW 48
// result := IsPlaced ( unit ) ;
53241: LD_ADDR_VAR 0 4
53245: PUSH
53246: LD_VAR 0 1
53250: PPUSH
53251: CALL_OW 305
53255: ST_TO_ADDR
// exit ;
53256: POP
53257: POP
53258: GO 53264
// end ; end ;
53260: GO 53127
53262: POP
53263: POP
// end ;
53264: LD_VAR 0 4
53268: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53269: LD_INT 0
53271: PPUSH
53272: PPUSH
53273: PPUSH
// if not side or side > 8 then
53274: LD_VAR 0 1
53278: NOT
53279: PUSH
53280: LD_VAR 0 1
53284: PUSH
53285: LD_INT 8
53287: GREATER
53288: OR
53289: IFFALSE 53293
// exit ;
53291: GO 53480
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53293: LD_ADDR_VAR 0 4
53297: PUSH
53298: LD_INT 22
53300: PUSH
53301: LD_VAR 0 1
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 21
53312: PUSH
53313: LD_INT 3
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PPUSH
53324: CALL_OW 69
53328: ST_TO_ADDR
// if not tmp then
53329: LD_VAR 0 4
53333: NOT
53334: IFFALSE 53338
// exit ;
53336: GO 53480
// enable_addtolog := true ;
53338: LD_ADDR_OWVAR 81
53342: PUSH
53343: LD_INT 1
53345: ST_TO_ADDR
// AddToLog ( [ ) ;
53346: LD_STRING [
53348: PPUSH
53349: CALL_OW 561
// for i in tmp do
53353: LD_ADDR_VAR 0 3
53357: PUSH
53358: LD_VAR 0 4
53362: PUSH
53363: FOR_IN
53364: IFFALSE 53471
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53366: LD_STRING [
53368: PUSH
53369: LD_VAR 0 3
53373: PPUSH
53374: CALL_OW 266
53378: STR
53379: PUSH
53380: LD_STRING , 
53382: STR
53383: PUSH
53384: LD_VAR 0 3
53388: PPUSH
53389: CALL_OW 250
53393: STR
53394: PUSH
53395: LD_STRING , 
53397: STR
53398: PUSH
53399: LD_VAR 0 3
53403: PPUSH
53404: CALL_OW 251
53408: STR
53409: PUSH
53410: LD_STRING , 
53412: STR
53413: PUSH
53414: LD_VAR 0 3
53418: PPUSH
53419: CALL_OW 254
53423: STR
53424: PUSH
53425: LD_STRING , 
53427: STR
53428: PUSH
53429: LD_VAR 0 3
53433: PPUSH
53434: LD_INT 1
53436: PPUSH
53437: CALL_OW 268
53441: STR
53442: PUSH
53443: LD_STRING , 
53445: STR
53446: PUSH
53447: LD_VAR 0 3
53451: PPUSH
53452: LD_INT 2
53454: PPUSH
53455: CALL_OW 268
53459: STR
53460: PUSH
53461: LD_STRING ],
53463: STR
53464: PPUSH
53465: CALL_OW 561
// end ;
53469: GO 53363
53471: POP
53472: POP
// AddToLog ( ]; ) ;
53473: LD_STRING ];
53475: PPUSH
53476: CALL_OW 561
// end ;
53480: LD_VAR 0 2
53484: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53485: LD_INT 0
53487: PPUSH
53488: PPUSH
53489: PPUSH
53490: PPUSH
53491: PPUSH
// if not area or not rate or not max then
53492: LD_VAR 0 1
53496: NOT
53497: PUSH
53498: LD_VAR 0 2
53502: NOT
53503: OR
53504: PUSH
53505: LD_VAR 0 4
53509: NOT
53510: OR
53511: IFFALSE 53515
// exit ;
53513: GO 53704
// while 1 do
53515: LD_INT 1
53517: IFFALSE 53704
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53519: LD_ADDR_VAR 0 9
53523: PUSH
53524: LD_VAR 0 1
53528: PPUSH
53529: LD_INT 1
53531: PPUSH
53532: CALL_OW 287
53536: PUSH
53537: LD_INT 10
53539: MUL
53540: ST_TO_ADDR
// r := rate / 10 ;
53541: LD_ADDR_VAR 0 7
53545: PUSH
53546: LD_VAR 0 2
53550: PUSH
53551: LD_INT 10
53553: DIVREAL
53554: ST_TO_ADDR
// time := 1 1$00 ;
53555: LD_ADDR_VAR 0 8
53559: PUSH
53560: LD_INT 2100
53562: ST_TO_ADDR
// if amount < min then
53563: LD_VAR 0 9
53567: PUSH
53568: LD_VAR 0 3
53572: LESS
53573: IFFALSE 53591
// r := r * 2 else
53575: LD_ADDR_VAR 0 7
53579: PUSH
53580: LD_VAR 0 7
53584: PUSH
53585: LD_INT 2
53587: MUL
53588: ST_TO_ADDR
53589: GO 53617
// if amount > max then
53591: LD_VAR 0 9
53595: PUSH
53596: LD_VAR 0 4
53600: GREATER
53601: IFFALSE 53617
// r := r / 2 ;
53603: LD_ADDR_VAR 0 7
53607: PUSH
53608: LD_VAR 0 7
53612: PUSH
53613: LD_INT 2
53615: DIVREAL
53616: ST_TO_ADDR
// time := time / r ;
53617: LD_ADDR_VAR 0 8
53621: PUSH
53622: LD_VAR 0 8
53626: PUSH
53627: LD_VAR 0 7
53631: DIVREAL
53632: ST_TO_ADDR
// if time < 0 then
53633: LD_VAR 0 8
53637: PUSH
53638: LD_INT 0
53640: LESS
53641: IFFALSE 53658
// time := time * - 1 ;
53643: LD_ADDR_VAR 0 8
53647: PUSH
53648: LD_VAR 0 8
53652: PUSH
53653: LD_INT 1
53655: NEG
53656: MUL
53657: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53658: LD_VAR 0 8
53662: PUSH
53663: LD_INT 35
53665: PPUSH
53666: LD_INT 875
53668: PPUSH
53669: CALL_OW 12
53673: PLUS
53674: PPUSH
53675: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53679: LD_INT 1
53681: PPUSH
53682: LD_INT 5
53684: PPUSH
53685: CALL_OW 12
53689: PPUSH
53690: LD_VAR 0 1
53694: PPUSH
53695: LD_INT 1
53697: PPUSH
53698: CALL_OW 55
// end ;
53702: GO 53515
// end ;
53704: LD_VAR 0 5
53708: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53709: LD_INT 0
53711: PPUSH
53712: PPUSH
53713: PPUSH
53714: PPUSH
53715: PPUSH
53716: PPUSH
53717: PPUSH
53718: PPUSH
// if not turrets or not factories then
53719: LD_VAR 0 1
53723: NOT
53724: PUSH
53725: LD_VAR 0 2
53729: NOT
53730: OR
53731: IFFALSE 53735
// exit ;
53733: GO 54042
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53735: LD_ADDR_VAR 0 10
53739: PUSH
53740: LD_INT 5
53742: PUSH
53743: LD_INT 6
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 2
53752: PUSH
53753: LD_INT 4
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 3
53762: PUSH
53763: LD_INT 5
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 24
53777: PUSH
53778: LD_INT 25
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 23
53787: PUSH
53788: LD_INT 27
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 42
53801: PUSH
53802: LD_INT 43
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 44
53811: PUSH
53812: LD_INT 46
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 45
53821: PUSH
53822: LD_INT 47
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: LIST
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: LIST
53838: ST_TO_ADDR
// result := [ ] ;
53839: LD_ADDR_VAR 0 3
53843: PUSH
53844: EMPTY
53845: ST_TO_ADDR
// for i in turrets do
53846: LD_ADDR_VAR 0 4
53850: PUSH
53851: LD_VAR 0 1
53855: PUSH
53856: FOR_IN
53857: IFFALSE 54040
// begin nat := GetNation ( i ) ;
53859: LD_ADDR_VAR 0 7
53863: PUSH
53864: LD_VAR 0 4
53868: PPUSH
53869: CALL_OW 248
53873: ST_TO_ADDR
// weapon := 0 ;
53874: LD_ADDR_VAR 0 8
53878: PUSH
53879: LD_INT 0
53881: ST_TO_ADDR
// if not nat then
53882: LD_VAR 0 7
53886: NOT
53887: IFFALSE 53891
// continue ;
53889: GO 53856
// for j in list [ nat ] do
53891: LD_ADDR_VAR 0 5
53895: PUSH
53896: LD_VAR 0 10
53900: PUSH
53901: LD_VAR 0 7
53905: ARRAY
53906: PUSH
53907: FOR_IN
53908: IFFALSE 53949
// if GetBWeapon ( i ) = j [ 1 ] then
53910: LD_VAR 0 4
53914: PPUSH
53915: CALL_OW 269
53919: PUSH
53920: LD_VAR 0 5
53924: PUSH
53925: LD_INT 1
53927: ARRAY
53928: EQUAL
53929: IFFALSE 53947
// begin weapon := j [ 2 ] ;
53931: LD_ADDR_VAR 0 8
53935: PUSH
53936: LD_VAR 0 5
53940: PUSH
53941: LD_INT 2
53943: ARRAY
53944: ST_TO_ADDR
// break ;
53945: GO 53949
// end ;
53947: GO 53907
53949: POP
53950: POP
// if not weapon then
53951: LD_VAR 0 8
53955: NOT
53956: IFFALSE 53960
// continue ;
53958: GO 53856
// for k in factories do
53960: LD_ADDR_VAR 0 6
53964: PUSH
53965: LD_VAR 0 2
53969: PUSH
53970: FOR_IN
53971: IFFALSE 54036
// begin weapons := AvailableWeaponList ( k ) ;
53973: LD_ADDR_VAR 0 9
53977: PUSH
53978: LD_VAR 0 6
53982: PPUSH
53983: CALL_OW 478
53987: ST_TO_ADDR
// if not weapons then
53988: LD_VAR 0 9
53992: NOT
53993: IFFALSE 53997
// continue ;
53995: GO 53970
// if weapon in weapons then
53997: LD_VAR 0 8
54001: PUSH
54002: LD_VAR 0 9
54006: IN
54007: IFFALSE 54034
// begin result := [ i , weapon ] ;
54009: LD_ADDR_VAR 0 3
54013: PUSH
54014: LD_VAR 0 4
54018: PUSH
54019: LD_VAR 0 8
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: ST_TO_ADDR
// exit ;
54028: POP
54029: POP
54030: POP
54031: POP
54032: GO 54042
// end ; end ;
54034: GO 53970
54036: POP
54037: POP
// end ;
54038: GO 53856
54040: POP
54041: POP
// end ;
54042: LD_VAR 0 3
54046: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54047: LD_INT 0
54049: PPUSH
// if not side or side > 8 then
54050: LD_VAR 0 3
54054: NOT
54055: PUSH
54056: LD_VAR 0 3
54060: PUSH
54061: LD_INT 8
54063: GREATER
54064: OR
54065: IFFALSE 54069
// exit ;
54067: GO 54128
// if not range then
54069: LD_VAR 0 4
54073: NOT
54074: IFFALSE 54085
// range := - 12 ;
54076: LD_ADDR_VAR 0 4
54080: PUSH
54081: LD_INT 12
54083: NEG
54084: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54085: LD_VAR 0 1
54089: PPUSH
54090: LD_VAR 0 2
54094: PPUSH
54095: LD_VAR 0 3
54099: PPUSH
54100: LD_VAR 0 4
54104: PPUSH
54105: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54109: LD_VAR 0 1
54113: PPUSH
54114: LD_VAR 0 2
54118: PPUSH
54119: LD_VAR 0 3
54123: PPUSH
54124: CALL_OW 331
// end ;
54128: LD_VAR 0 5
54132: RET
// export function Video ( mode ) ; begin
54133: LD_INT 0
54135: PPUSH
// ingame_video = mode ;
54136: LD_ADDR_OWVAR 52
54140: PUSH
54141: LD_VAR 0 1
54145: ST_TO_ADDR
// interface_hidden = mode ;
54146: LD_ADDR_OWVAR 54
54150: PUSH
54151: LD_VAR 0 1
54155: ST_TO_ADDR
// end ;
54156: LD_VAR 0 2
54160: RET
// export function Join ( array , element ) ; begin
54161: LD_INT 0
54163: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54164: LD_ADDR_VAR 0 3
54168: PUSH
54169: LD_VAR 0 1
54173: PPUSH
54174: LD_VAR 0 1
54178: PUSH
54179: LD_INT 1
54181: PLUS
54182: PPUSH
54183: LD_VAR 0 2
54187: PPUSH
54188: CALL_OW 1
54192: ST_TO_ADDR
// end ;
54193: LD_VAR 0 3
54197: RET
// export function JoinUnion ( array , element ) ; begin
54198: LD_INT 0
54200: PPUSH
// result := array union element ;
54201: LD_ADDR_VAR 0 3
54205: PUSH
54206: LD_VAR 0 1
54210: PUSH
54211: LD_VAR 0 2
54215: UNION
54216: ST_TO_ADDR
// end ;
54217: LD_VAR 0 3
54221: RET
// export function GetBehemoths ( side ) ; begin
54222: LD_INT 0
54224: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54225: LD_ADDR_VAR 0 2
54229: PUSH
54230: LD_INT 22
54232: PUSH
54233: LD_VAR 0 1
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 31
54244: PUSH
54245: LD_INT 25
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PPUSH
54256: CALL_OW 69
54260: ST_TO_ADDR
// end ;
54261: LD_VAR 0 2
54265: RET
// export function Shuffle ( array ) ; var i , index ; begin
54266: LD_INT 0
54268: PPUSH
54269: PPUSH
54270: PPUSH
// result := [ ] ;
54271: LD_ADDR_VAR 0 2
54275: PUSH
54276: EMPTY
54277: ST_TO_ADDR
// if not array then
54278: LD_VAR 0 1
54282: NOT
54283: IFFALSE 54287
// exit ;
54285: GO 54386
// Randomize ;
54287: CALL_OW 10
// for i = array downto 1 do
54291: LD_ADDR_VAR 0 3
54295: PUSH
54296: DOUBLE
54297: LD_VAR 0 1
54301: INC
54302: ST_TO_ADDR
54303: LD_INT 1
54305: PUSH
54306: FOR_DOWNTO
54307: IFFALSE 54384
// begin index := rand ( 1 , array ) ;
54309: LD_ADDR_VAR 0 4
54313: PUSH
54314: LD_INT 1
54316: PPUSH
54317: LD_VAR 0 1
54321: PPUSH
54322: CALL_OW 12
54326: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54327: LD_ADDR_VAR 0 2
54331: PUSH
54332: LD_VAR 0 2
54336: PPUSH
54337: LD_VAR 0 2
54341: PUSH
54342: LD_INT 1
54344: PLUS
54345: PPUSH
54346: LD_VAR 0 1
54350: PUSH
54351: LD_VAR 0 4
54355: ARRAY
54356: PPUSH
54357: CALL_OW 2
54361: ST_TO_ADDR
// array := Delete ( array , index ) ;
54362: LD_ADDR_VAR 0 1
54366: PUSH
54367: LD_VAR 0 1
54371: PPUSH
54372: LD_VAR 0 4
54376: PPUSH
54377: CALL_OW 3
54381: ST_TO_ADDR
// end ;
54382: GO 54306
54384: POP
54385: POP
// end ;
54386: LD_VAR 0 2
54390: RET
// export function GetBaseMaterials ( base ) ; begin
54391: LD_INT 0
54393: PPUSH
// result := [ 0 , 0 , 0 ] ;
54394: LD_ADDR_VAR 0 2
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: LD_INT 0
54404: PUSH
54405: LD_INT 0
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: LIST
54412: ST_TO_ADDR
// if not base then
54413: LD_VAR 0 1
54417: NOT
54418: IFFALSE 54422
// exit ;
54420: GO 54471
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54422: LD_ADDR_VAR 0 2
54426: PUSH
54427: LD_VAR 0 1
54431: PPUSH
54432: LD_INT 1
54434: PPUSH
54435: CALL_OW 275
54439: PUSH
54440: LD_VAR 0 1
54444: PPUSH
54445: LD_INT 2
54447: PPUSH
54448: CALL_OW 275
54452: PUSH
54453: LD_VAR 0 1
54457: PPUSH
54458: LD_INT 3
54460: PPUSH
54461: CALL_OW 275
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: LIST
54470: ST_TO_ADDR
// end ;
54471: LD_VAR 0 2
54475: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54476: LD_INT 0
54478: PPUSH
54479: PPUSH
// result := array ;
54480: LD_ADDR_VAR 0 3
54484: PUSH
54485: LD_VAR 0 1
54489: ST_TO_ADDR
// if size >= result then
54490: LD_VAR 0 2
54494: PUSH
54495: LD_VAR 0 3
54499: GREATEREQUAL
54500: IFFALSE 54504
// exit ;
54502: GO 54554
// if size then
54504: LD_VAR 0 2
54508: IFFALSE 54554
// for i := array downto size do
54510: LD_ADDR_VAR 0 4
54514: PUSH
54515: DOUBLE
54516: LD_VAR 0 1
54520: INC
54521: ST_TO_ADDR
54522: LD_VAR 0 2
54526: PUSH
54527: FOR_DOWNTO
54528: IFFALSE 54552
// result := Delete ( result , result ) ;
54530: LD_ADDR_VAR 0 3
54534: PUSH
54535: LD_VAR 0 3
54539: PPUSH
54540: LD_VAR 0 3
54544: PPUSH
54545: CALL_OW 3
54549: ST_TO_ADDR
54550: GO 54527
54552: POP
54553: POP
// end ;
54554: LD_VAR 0 3
54558: RET
// export function ComExit ( unit ) ; var tmp ; begin
54559: LD_INT 0
54561: PPUSH
54562: PPUSH
// if not IsInUnit ( unit ) then
54563: LD_VAR 0 1
54567: PPUSH
54568: CALL_OW 310
54572: NOT
54573: IFFALSE 54577
// exit ;
54575: GO 54637
// tmp := IsInUnit ( unit ) ;
54577: LD_ADDR_VAR 0 3
54581: PUSH
54582: LD_VAR 0 1
54586: PPUSH
54587: CALL_OW 310
54591: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54592: LD_VAR 0 3
54596: PPUSH
54597: CALL_OW 247
54601: PUSH
54602: LD_INT 2
54604: EQUAL
54605: IFFALSE 54618
// ComExitVehicle ( unit ) else
54607: LD_VAR 0 1
54611: PPUSH
54612: CALL_OW 121
54616: GO 54627
// ComExitBuilding ( unit ) ;
54618: LD_VAR 0 1
54622: PPUSH
54623: CALL_OW 122
// result := tmp ;
54627: LD_ADDR_VAR 0 2
54631: PUSH
54632: LD_VAR 0 3
54636: ST_TO_ADDR
// end ;
54637: LD_VAR 0 2
54641: RET
// export function ComExitAll ( units ) ; var i ; begin
54642: LD_INT 0
54644: PPUSH
54645: PPUSH
// if not units then
54646: LD_VAR 0 1
54650: NOT
54651: IFFALSE 54655
// exit ;
54653: GO 54681
// for i in units do
54655: LD_ADDR_VAR 0 3
54659: PUSH
54660: LD_VAR 0 1
54664: PUSH
54665: FOR_IN
54666: IFFALSE 54679
// ComExit ( i ) ;
54668: LD_VAR 0 3
54672: PPUSH
54673: CALL 54559 0 1
54677: GO 54665
54679: POP
54680: POP
// end ;
54681: LD_VAR 0 2
54685: RET
// export function ResetHc ; begin
54686: LD_INT 0
54688: PPUSH
// InitHc ;
54689: CALL_OW 19
// hc_importance := 0 ;
54693: LD_ADDR_OWVAR 32
54697: PUSH
54698: LD_INT 0
54700: ST_TO_ADDR
// end ;
54701: LD_VAR 0 1
54705: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54706: LD_INT 0
54708: PPUSH
54709: PPUSH
54710: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54711: LD_ADDR_VAR 0 6
54715: PUSH
54716: LD_VAR 0 1
54720: PUSH
54721: LD_VAR 0 3
54725: PLUS
54726: PUSH
54727: LD_INT 2
54729: DIV
54730: ST_TO_ADDR
// if _x < 0 then
54731: LD_VAR 0 6
54735: PUSH
54736: LD_INT 0
54738: LESS
54739: IFFALSE 54756
// _x := _x * - 1 ;
54741: LD_ADDR_VAR 0 6
54745: PUSH
54746: LD_VAR 0 6
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: MUL
54755: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54756: LD_ADDR_VAR 0 7
54760: PUSH
54761: LD_VAR 0 2
54765: PUSH
54766: LD_VAR 0 4
54770: PLUS
54771: PUSH
54772: LD_INT 2
54774: DIV
54775: ST_TO_ADDR
// if _y < 0 then
54776: LD_VAR 0 7
54780: PUSH
54781: LD_INT 0
54783: LESS
54784: IFFALSE 54801
// _y := _y * - 1 ;
54786: LD_ADDR_VAR 0 7
54790: PUSH
54791: LD_VAR 0 7
54795: PUSH
54796: LD_INT 1
54798: NEG
54799: MUL
54800: ST_TO_ADDR
// result := [ _x , _y ] ;
54801: LD_ADDR_VAR 0 5
54805: PUSH
54806: LD_VAR 0 6
54810: PUSH
54811: LD_VAR 0 7
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: ST_TO_ADDR
// end ;
54820: LD_VAR 0 5
54824: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54825: LD_INT 0
54827: PPUSH
54828: PPUSH
54829: PPUSH
54830: PPUSH
// task := GetTaskList ( unit ) ;
54831: LD_ADDR_VAR 0 7
54835: PUSH
54836: LD_VAR 0 1
54840: PPUSH
54841: CALL_OW 437
54845: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54846: LD_VAR 0 7
54850: NOT
54851: PUSH
54852: LD_VAR 0 1
54856: PPUSH
54857: LD_VAR 0 2
54861: PPUSH
54862: CALL_OW 308
54866: NOT
54867: AND
54868: IFFALSE 54872
// exit ;
54870: GO 54990
// if IsInArea ( unit , area ) then
54872: LD_VAR 0 1
54876: PPUSH
54877: LD_VAR 0 2
54881: PPUSH
54882: CALL_OW 308
54886: IFFALSE 54904
// begin ComMoveToArea ( unit , goAway ) ;
54888: LD_VAR 0 1
54892: PPUSH
54893: LD_VAR 0 3
54897: PPUSH
54898: CALL_OW 113
// exit ;
54902: GO 54990
// end ; if task [ 1 ] [ 1 ] <> M then
54904: LD_VAR 0 7
54908: PUSH
54909: LD_INT 1
54911: ARRAY
54912: PUSH
54913: LD_INT 1
54915: ARRAY
54916: PUSH
54917: LD_STRING M
54919: NONEQUAL
54920: IFFALSE 54924
// exit ;
54922: GO 54990
// x := task [ 1 ] [ 2 ] ;
54924: LD_ADDR_VAR 0 5
54928: PUSH
54929: LD_VAR 0 7
54933: PUSH
54934: LD_INT 1
54936: ARRAY
54937: PUSH
54938: LD_INT 2
54940: ARRAY
54941: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54942: LD_ADDR_VAR 0 6
54946: PUSH
54947: LD_VAR 0 7
54951: PUSH
54952: LD_INT 1
54954: ARRAY
54955: PUSH
54956: LD_INT 3
54958: ARRAY
54959: ST_TO_ADDR
// if InArea ( x , y , area ) then
54960: LD_VAR 0 5
54964: PPUSH
54965: LD_VAR 0 6
54969: PPUSH
54970: LD_VAR 0 2
54974: PPUSH
54975: CALL_OW 309
54979: IFFALSE 54990
// ComStop ( unit ) ;
54981: LD_VAR 0 1
54985: PPUSH
54986: CALL_OW 141
// end ;
54990: LD_VAR 0 4
54994: RET
// export function Abs ( value ) ; begin
54995: LD_INT 0
54997: PPUSH
// result := value ;
54998: LD_ADDR_VAR 0 2
55002: PUSH
55003: LD_VAR 0 1
55007: ST_TO_ADDR
// if value < 0 then
55008: LD_VAR 0 1
55012: PUSH
55013: LD_INT 0
55015: LESS
55016: IFFALSE 55033
// result := value * - 1 ;
55018: LD_ADDR_VAR 0 2
55022: PUSH
55023: LD_VAR 0 1
55027: PUSH
55028: LD_INT 1
55030: NEG
55031: MUL
55032: ST_TO_ADDR
// end ;
55033: LD_VAR 0 2
55037: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55038: LD_INT 0
55040: PPUSH
55041: PPUSH
55042: PPUSH
55043: PPUSH
55044: PPUSH
55045: PPUSH
55046: PPUSH
55047: PPUSH
// if not unit or not building then
55048: LD_VAR 0 1
55052: NOT
55053: PUSH
55054: LD_VAR 0 2
55058: NOT
55059: OR
55060: IFFALSE 55064
// exit ;
55062: GO 55290
// x := GetX ( building ) ;
55064: LD_ADDR_VAR 0 4
55068: PUSH
55069: LD_VAR 0 2
55073: PPUSH
55074: CALL_OW 250
55078: ST_TO_ADDR
// y := GetY ( building ) ;
55079: LD_ADDR_VAR 0 6
55083: PUSH
55084: LD_VAR 0 2
55088: PPUSH
55089: CALL_OW 251
55093: ST_TO_ADDR
// d := GetDir ( building ) ;
55094: LD_ADDR_VAR 0 8
55098: PUSH
55099: LD_VAR 0 2
55103: PPUSH
55104: CALL_OW 254
55108: ST_TO_ADDR
// r := 4 ;
55109: LD_ADDR_VAR 0 9
55113: PUSH
55114: LD_INT 4
55116: ST_TO_ADDR
// for i := 1 to 5 do
55117: LD_ADDR_VAR 0 10
55121: PUSH
55122: DOUBLE
55123: LD_INT 1
55125: DEC
55126: ST_TO_ADDR
55127: LD_INT 5
55129: PUSH
55130: FOR_TO
55131: IFFALSE 55288
// begin _x := ShiftX ( x , d , r + i ) ;
55133: LD_ADDR_VAR 0 5
55137: PUSH
55138: LD_VAR 0 4
55142: PPUSH
55143: LD_VAR 0 8
55147: PPUSH
55148: LD_VAR 0 9
55152: PUSH
55153: LD_VAR 0 10
55157: PLUS
55158: PPUSH
55159: CALL_OW 272
55163: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55164: LD_ADDR_VAR 0 7
55168: PUSH
55169: LD_VAR 0 6
55173: PPUSH
55174: LD_VAR 0 8
55178: PPUSH
55179: LD_VAR 0 9
55183: PUSH
55184: LD_VAR 0 10
55188: PLUS
55189: PPUSH
55190: CALL_OW 273
55194: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55195: LD_VAR 0 5
55199: PPUSH
55200: LD_VAR 0 7
55204: PPUSH
55205: CALL_OW 488
55209: PUSH
55210: LD_VAR 0 5
55214: PPUSH
55215: LD_VAR 0 7
55219: PPUSH
55220: CALL_OW 428
55224: PPUSH
55225: CALL_OW 247
55229: PUSH
55230: LD_INT 3
55232: PUSH
55233: LD_INT 2
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: IN
55240: NOT
55241: AND
55242: IFFALSE 55286
// begin ComMoveXY ( unit , _x , _y ) ;
55244: LD_VAR 0 1
55248: PPUSH
55249: LD_VAR 0 5
55253: PPUSH
55254: LD_VAR 0 7
55258: PPUSH
55259: CALL_OW 111
// result := [ _x , _y ] ;
55263: LD_ADDR_VAR 0 3
55267: PUSH
55268: LD_VAR 0 5
55272: PUSH
55273: LD_VAR 0 7
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: ST_TO_ADDR
// exit ;
55282: POP
55283: POP
55284: GO 55290
// end ; end ;
55286: GO 55130
55288: POP
55289: POP
// end ;
55290: LD_VAR 0 3
55294: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55295: LD_INT 0
55297: PPUSH
55298: PPUSH
55299: PPUSH
// result := 0 ;
55300: LD_ADDR_VAR 0 3
55304: PUSH
55305: LD_INT 0
55307: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55308: LD_VAR 0 1
55312: PUSH
55313: LD_INT 0
55315: LESS
55316: PUSH
55317: LD_VAR 0 1
55321: PUSH
55322: LD_INT 8
55324: GREATER
55325: OR
55326: PUSH
55327: LD_VAR 0 2
55331: PUSH
55332: LD_INT 0
55334: LESS
55335: OR
55336: PUSH
55337: LD_VAR 0 2
55341: PUSH
55342: LD_INT 8
55344: GREATER
55345: OR
55346: IFFALSE 55350
// exit ;
55348: GO 55425
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55350: LD_ADDR_VAR 0 4
55354: PUSH
55355: LD_INT 22
55357: PUSH
55358: LD_VAR 0 2
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PPUSH
55367: CALL_OW 69
55371: PUSH
55372: FOR_IN
55373: IFFALSE 55423
// begin un := UnitShoot ( i ) ;
55375: LD_ADDR_VAR 0 5
55379: PUSH
55380: LD_VAR 0 4
55384: PPUSH
55385: CALL_OW 504
55389: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55390: LD_VAR 0 5
55394: PPUSH
55395: CALL_OW 255
55399: PUSH
55400: LD_VAR 0 1
55404: EQUAL
55405: IFFALSE 55421
// begin result := un ;
55407: LD_ADDR_VAR 0 3
55411: PUSH
55412: LD_VAR 0 5
55416: ST_TO_ADDR
// exit ;
55417: POP
55418: POP
55419: GO 55425
// end ; end ;
55421: GO 55372
55423: POP
55424: POP
// end ;
55425: LD_VAR 0 3
55429: RET
// export function GetCargoBay ( units ) ; begin
55430: LD_INT 0
55432: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55433: LD_ADDR_VAR 0 2
55437: PUSH
55438: LD_VAR 0 1
55442: PPUSH
55443: LD_INT 2
55445: PUSH
55446: LD_INT 34
55448: PUSH
55449: LD_INT 12
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 34
55458: PUSH
55459: LD_INT 51
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 34
55468: PUSH
55469: LD_INT 32
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 34
55478: PUSH
55479: LD_INT 89
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: PPUSH
55493: CALL_OW 72
55497: ST_TO_ADDR
// end ;
55498: LD_VAR 0 2
55502: RET
// export function Negate ( value ) ; begin
55503: LD_INT 0
55505: PPUSH
// result := not value ;
55506: LD_ADDR_VAR 0 2
55510: PUSH
55511: LD_VAR 0 1
55515: NOT
55516: ST_TO_ADDR
// end ;
55517: LD_VAR 0 2
55521: RET
// export function Inc ( value ) ; begin
55522: LD_INT 0
55524: PPUSH
// result := value + 1 ;
55525: LD_ADDR_VAR 0 2
55529: PUSH
55530: LD_VAR 0 1
55534: PUSH
55535: LD_INT 1
55537: PLUS
55538: ST_TO_ADDR
// end ;
55539: LD_VAR 0 2
55543: RET
// export function Dec ( value ) ; begin
55544: LD_INT 0
55546: PPUSH
// result := value - 1 ;
55547: LD_ADDR_VAR 0 2
55551: PUSH
55552: LD_VAR 0 1
55556: PUSH
55557: LD_INT 1
55559: MINUS
55560: ST_TO_ADDR
// end ;
55561: LD_VAR 0 2
55565: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55566: LD_INT 0
55568: PPUSH
55569: PPUSH
55570: PPUSH
55571: PPUSH
55572: PPUSH
55573: PPUSH
55574: PPUSH
55575: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55576: LD_VAR 0 1
55580: PPUSH
55581: LD_VAR 0 2
55585: PPUSH
55586: CALL_OW 488
55590: NOT
55591: PUSH
55592: LD_VAR 0 3
55596: PPUSH
55597: LD_VAR 0 4
55601: PPUSH
55602: CALL_OW 488
55606: NOT
55607: OR
55608: IFFALSE 55621
// begin result := - 1 ;
55610: LD_ADDR_VAR 0 5
55614: PUSH
55615: LD_INT 1
55617: NEG
55618: ST_TO_ADDR
// exit ;
55619: GO 55856
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55621: LD_ADDR_VAR 0 12
55625: PUSH
55626: LD_VAR 0 1
55630: PPUSH
55631: LD_VAR 0 2
55635: PPUSH
55636: LD_VAR 0 3
55640: PPUSH
55641: LD_VAR 0 4
55645: PPUSH
55646: CALL 54706 0 4
55650: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55651: LD_ADDR_VAR 0 11
55655: PUSH
55656: LD_VAR 0 1
55660: PPUSH
55661: LD_VAR 0 2
55665: PPUSH
55666: LD_VAR 0 12
55670: PUSH
55671: LD_INT 1
55673: ARRAY
55674: PPUSH
55675: LD_VAR 0 12
55679: PUSH
55680: LD_INT 2
55682: ARRAY
55683: PPUSH
55684: CALL_OW 298
55688: ST_TO_ADDR
// distance := 9999 ;
55689: LD_ADDR_VAR 0 10
55693: PUSH
55694: LD_INT 9999
55696: ST_TO_ADDR
// for i := 0 to 5 do
55697: LD_ADDR_VAR 0 6
55701: PUSH
55702: DOUBLE
55703: LD_INT 0
55705: DEC
55706: ST_TO_ADDR
55707: LD_INT 5
55709: PUSH
55710: FOR_TO
55711: IFFALSE 55854
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55713: LD_ADDR_VAR 0 7
55717: PUSH
55718: LD_VAR 0 1
55722: PPUSH
55723: LD_VAR 0 6
55727: PPUSH
55728: LD_VAR 0 11
55732: PPUSH
55733: CALL_OW 272
55737: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55738: LD_ADDR_VAR 0 8
55742: PUSH
55743: LD_VAR 0 2
55747: PPUSH
55748: LD_VAR 0 6
55752: PPUSH
55753: LD_VAR 0 11
55757: PPUSH
55758: CALL_OW 273
55762: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55763: LD_VAR 0 7
55767: PPUSH
55768: LD_VAR 0 8
55772: PPUSH
55773: CALL_OW 488
55777: NOT
55778: IFFALSE 55782
// continue ;
55780: GO 55710
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55782: LD_ADDR_VAR 0 9
55786: PUSH
55787: LD_VAR 0 12
55791: PUSH
55792: LD_INT 1
55794: ARRAY
55795: PPUSH
55796: LD_VAR 0 12
55800: PUSH
55801: LD_INT 2
55803: ARRAY
55804: PPUSH
55805: LD_VAR 0 7
55809: PPUSH
55810: LD_VAR 0 8
55814: PPUSH
55815: CALL_OW 298
55819: ST_TO_ADDR
// if tmp < distance then
55820: LD_VAR 0 9
55824: PUSH
55825: LD_VAR 0 10
55829: LESS
55830: IFFALSE 55852
// begin result := i ;
55832: LD_ADDR_VAR 0 5
55836: PUSH
55837: LD_VAR 0 6
55841: ST_TO_ADDR
// distance := tmp ;
55842: LD_ADDR_VAR 0 10
55846: PUSH
55847: LD_VAR 0 9
55851: ST_TO_ADDR
// end ; end ;
55852: GO 55710
55854: POP
55855: POP
// end ;
55856: LD_VAR 0 5
55860: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55861: LD_INT 0
55863: PPUSH
55864: PPUSH
// if not driver or not IsInUnit ( driver ) then
55865: LD_VAR 0 1
55869: NOT
55870: PUSH
55871: LD_VAR 0 1
55875: PPUSH
55876: CALL_OW 310
55880: NOT
55881: OR
55882: IFFALSE 55886
// exit ;
55884: GO 55976
// vehicle := IsInUnit ( driver ) ;
55886: LD_ADDR_VAR 0 3
55890: PUSH
55891: LD_VAR 0 1
55895: PPUSH
55896: CALL_OW 310
55900: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55901: LD_VAR 0 1
55905: PPUSH
55906: LD_STRING \
55908: PUSH
55909: LD_INT 0
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: LD_INT 0
55920: PUSH
55921: LD_INT 0
55923: PUSH
55924: LD_INT 0
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: PUSH
55936: LD_STRING E
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: LD_INT 0
55944: PUSH
55945: LD_VAR 0 3
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: LD_INT 0
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PPUSH
55972: CALL_OW 446
// end ;
55976: LD_VAR 0 2
55980: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55981: LD_INT 0
55983: PPUSH
55984: PPUSH
// if not driver or not IsInUnit ( driver ) then
55985: LD_VAR 0 1
55989: NOT
55990: PUSH
55991: LD_VAR 0 1
55995: PPUSH
55996: CALL_OW 310
56000: NOT
56001: OR
56002: IFFALSE 56006
// exit ;
56004: GO 56096
// vehicle := IsInUnit ( driver ) ;
56006: LD_ADDR_VAR 0 3
56010: PUSH
56011: LD_VAR 0 1
56015: PPUSH
56016: CALL_OW 310
56020: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56021: LD_VAR 0 1
56025: PPUSH
56026: LD_STRING \
56028: PUSH
56029: LD_INT 0
56031: PUSH
56032: LD_INT 0
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: LD_INT 0
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: PUSH
56056: LD_STRING E
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: LD_VAR 0 3
56069: PUSH
56070: LD_INT 0
56072: PUSH
56073: LD_INT 0
56075: PUSH
56076: LD_INT 0
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PPUSH
56092: CALL_OW 447
// end ;
56096: LD_VAR 0 2
56100: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56101: LD_INT 0
56103: PPUSH
56104: PPUSH
56105: PPUSH
// tmp := [ ] ;
56106: LD_ADDR_VAR 0 5
56110: PUSH
56111: EMPTY
56112: ST_TO_ADDR
// for i in units do
56113: LD_ADDR_VAR 0 4
56117: PUSH
56118: LD_VAR 0 1
56122: PUSH
56123: FOR_IN
56124: IFFALSE 56162
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56126: LD_ADDR_VAR 0 5
56130: PUSH
56131: LD_VAR 0 5
56135: PPUSH
56136: LD_VAR 0 5
56140: PUSH
56141: LD_INT 1
56143: PLUS
56144: PPUSH
56145: LD_VAR 0 4
56149: PPUSH
56150: CALL_OW 256
56154: PPUSH
56155: CALL_OW 2
56159: ST_TO_ADDR
56160: GO 56123
56162: POP
56163: POP
// if not tmp then
56164: LD_VAR 0 5
56168: NOT
56169: IFFALSE 56173
// exit ;
56171: GO 56221
// if asc then
56173: LD_VAR 0 2
56177: IFFALSE 56201
// result := SortListByListAsc ( units , tmp ) else
56179: LD_ADDR_VAR 0 3
56183: PUSH
56184: LD_VAR 0 1
56188: PPUSH
56189: LD_VAR 0 5
56193: PPUSH
56194: CALL_OW 76
56198: ST_TO_ADDR
56199: GO 56221
// result := SortListByListDesc ( units , tmp ) ;
56201: LD_ADDR_VAR 0 3
56205: PUSH
56206: LD_VAR 0 1
56210: PPUSH
56211: LD_VAR 0 5
56215: PPUSH
56216: CALL_OW 77
56220: ST_TO_ADDR
// end ;
56221: LD_VAR 0 3
56225: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56226: LD_INT 0
56228: PPUSH
56229: PPUSH
// task := GetTaskList ( mech ) ;
56230: LD_ADDR_VAR 0 4
56234: PUSH
56235: LD_VAR 0 1
56239: PPUSH
56240: CALL_OW 437
56244: ST_TO_ADDR
// if not task then
56245: LD_VAR 0 4
56249: NOT
56250: IFFALSE 56254
// exit ;
56252: GO 56296
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56254: LD_ADDR_VAR 0 3
56258: PUSH
56259: LD_VAR 0 4
56263: PUSH
56264: LD_INT 1
56266: ARRAY
56267: PUSH
56268: LD_INT 1
56270: ARRAY
56271: PUSH
56272: LD_STRING r
56274: EQUAL
56275: PUSH
56276: LD_VAR 0 4
56280: PUSH
56281: LD_INT 1
56283: ARRAY
56284: PUSH
56285: LD_INT 4
56287: ARRAY
56288: PUSH
56289: LD_VAR 0 2
56293: EQUAL
56294: AND
56295: ST_TO_ADDR
// end ;
56296: LD_VAR 0 3
56300: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56301: LD_INT 0
56303: PPUSH
// SetDir ( unit , d ) ;
56304: LD_VAR 0 1
56308: PPUSH
56309: LD_VAR 0 4
56313: PPUSH
56314: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
56318: LD_VAR 0 1
56322: PPUSH
56323: LD_VAR 0 2
56327: PPUSH
56328: LD_VAR 0 3
56332: PPUSH
56333: LD_VAR 0 5
56337: PPUSH
56338: CALL_OW 48
// end ;
56342: LD_VAR 0 6
56346: RET
// export function ToNaturalNumber ( number ) ; begin
56347: LD_INT 0
56349: PPUSH
// result := number div 1 ;
56350: LD_ADDR_VAR 0 2
56354: PUSH
56355: LD_VAR 0 1
56359: PUSH
56360: LD_INT 1
56362: DIV
56363: ST_TO_ADDR
// if number < 0 then
56364: LD_VAR 0 1
56368: PUSH
56369: LD_INT 0
56371: LESS
56372: IFFALSE 56382
// result := 0 ;
56374: LD_ADDR_VAR 0 2
56378: PUSH
56379: LD_INT 0
56381: ST_TO_ADDR
// end ;
56382: LD_VAR 0 2
56386: RET
// export function SortByClass ( units , class ) ; var un ; begin
56387: LD_INT 0
56389: PPUSH
56390: PPUSH
// if not units or not class then
56391: LD_VAR 0 1
56395: NOT
56396: PUSH
56397: LD_VAR 0 2
56401: NOT
56402: OR
56403: IFFALSE 56407
// exit ;
56405: GO 56502
// result := [ ] ;
56407: LD_ADDR_VAR 0 3
56411: PUSH
56412: EMPTY
56413: ST_TO_ADDR
// for un in units do
56414: LD_ADDR_VAR 0 4
56418: PUSH
56419: LD_VAR 0 1
56423: PUSH
56424: FOR_IN
56425: IFFALSE 56500
// if GetClass ( un ) = class then
56427: LD_VAR 0 4
56431: PPUSH
56432: CALL_OW 257
56436: PUSH
56437: LD_VAR 0 2
56441: EQUAL
56442: IFFALSE 56469
// result := Insert ( result , 1 , un ) else
56444: LD_ADDR_VAR 0 3
56448: PUSH
56449: LD_VAR 0 3
56453: PPUSH
56454: LD_INT 1
56456: PPUSH
56457: LD_VAR 0 4
56461: PPUSH
56462: CALL_OW 2
56466: ST_TO_ADDR
56467: GO 56498
// result := Replace ( result , result + 1 , un ) ;
56469: LD_ADDR_VAR 0 3
56473: PUSH
56474: LD_VAR 0 3
56478: PPUSH
56479: LD_VAR 0 3
56483: PUSH
56484: LD_INT 1
56486: PLUS
56487: PPUSH
56488: LD_VAR 0 4
56492: PPUSH
56493: CALL_OW 1
56497: ST_TO_ADDR
56498: GO 56424
56500: POP
56501: POP
// end ;
56502: LD_VAR 0 3
56506: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56507: LD_INT 0
56509: PPUSH
56510: PPUSH
56511: PPUSH
56512: PPUSH
56513: PPUSH
56514: PPUSH
56515: PPUSH
// result := [ ] ;
56516: LD_ADDR_VAR 0 4
56520: PUSH
56521: EMPTY
56522: ST_TO_ADDR
// if x - r < 0 then
56523: LD_VAR 0 1
56527: PUSH
56528: LD_VAR 0 3
56532: MINUS
56533: PUSH
56534: LD_INT 0
56536: LESS
56537: IFFALSE 56549
// min_x := 0 else
56539: LD_ADDR_VAR 0 8
56543: PUSH
56544: LD_INT 0
56546: ST_TO_ADDR
56547: GO 56565
// min_x := x - r ;
56549: LD_ADDR_VAR 0 8
56553: PUSH
56554: LD_VAR 0 1
56558: PUSH
56559: LD_VAR 0 3
56563: MINUS
56564: ST_TO_ADDR
// if y - r < 0 then
56565: LD_VAR 0 2
56569: PUSH
56570: LD_VAR 0 3
56574: MINUS
56575: PUSH
56576: LD_INT 0
56578: LESS
56579: IFFALSE 56591
// min_y := 0 else
56581: LD_ADDR_VAR 0 7
56585: PUSH
56586: LD_INT 0
56588: ST_TO_ADDR
56589: GO 56607
// min_y := y - r ;
56591: LD_ADDR_VAR 0 7
56595: PUSH
56596: LD_VAR 0 2
56600: PUSH
56601: LD_VAR 0 3
56605: MINUS
56606: ST_TO_ADDR
// max_x := x + r ;
56607: LD_ADDR_VAR 0 9
56611: PUSH
56612: LD_VAR 0 1
56616: PUSH
56617: LD_VAR 0 3
56621: PLUS
56622: ST_TO_ADDR
// max_y := y + r ;
56623: LD_ADDR_VAR 0 10
56627: PUSH
56628: LD_VAR 0 2
56632: PUSH
56633: LD_VAR 0 3
56637: PLUS
56638: ST_TO_ADDR
// for _x = min_x to max_x do
56639: LD_ADDR_VAR 0 5
56643: PUSH
56644: DOUBLE
56645: LD_VAR 0 8
56649: DEC
56650: ST_TO_ADDR
56651: LD_VAR 0 9
56655: PUSH
56656: FOR_TO
56657: IFFALSE 56758
// for _y = min_y to max_y do
56659: LD_ADDR_VAR 0 6
56663: PUSH
56664: DOUBLE
56665: LD_VAR 0 7
56669: DEC
56670: ST_TO_ADDR
56671: LD_VAR 0 10
56675: PUSH
56676: FOR_TO
56677: IFFALSE 56754
// begin if not ValidHex ( _x , _y ) then
56679: LD_VAR 0 5
56683: PPUSH
56684: LD_VAR 0 6
56688: PPUSH
56689: CALL_OW 488
56693: NOT
56694: IFFALSE 56698
// continue ;
56696: GO 56676
// if GetResourceTypeXY ( _x , _y ) then
56698: LD_VAR 0 5
56702: PPUSH
56703: LD_VAR 0 6
56707: PPUSH
56708: CALL_OW 283
56712: IFFALSE 56752
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56714: LD_ADDR_VAR 0 4
56718: PUSH
56719: LD_VAR 0 4
56723: PPUSH
56724: LD_VAR 0 4
56728: PUSH
56729: LD_INT 1
56731: PLUS
56732: PPUSH
56733: LD_VAR 0 5
56737: PUSH
56738: LD_VAR 0 6
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PPUSH
56747: CALL_OW 1
56751: ST_TO_ADDR
// end ;
56752: GO 56676
56754: POP
56755: POP
56756: GO 56656
56758: POP
56759: POP
// end ;
56760: LD_VAR 0 4
56764: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56765: LD_INT 0
56767: PPUSH
56768: PPUSH
56769: PPUSH
56770: PPUSH
56771: PPUSH
56772: PPUSH
56773: PPUSH
56774: PPUSH
// if not units then
56775: LD_VAR 0 1
56779: NOT
56780: IFFALSE 56784
// exit ;
56782: GO 57308
// result := UnitFilter ( units , [ f_ok ] ) ;
56784: LD_ADDR_VAR 0 3
56788: PUSH
56789: LD_VAR 0 1
56793: PPUSH
56794: LD_INT 50
56796: PUSH
56797: EMPTY
56798: LIST
56799: PPUSH
56800: CALL_OW 72
56804: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56805: LD_ADDR_VAR 0 8
56809: PUSH
56810: LD_VAR 0 1
56814: PUSH
56815: LD_INT 1
56817: ARRAY
56818: PPUSH
56819: CALL_OW 255
56823: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
56824: LD_ADDR_VAR 0 10
56828: PUSH
56829: LD_INT 29
56831: PUSH
56832: LD_INT 91
56834: PUSH
56835: LD_INT 49
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: LIST
56842: ST_TO_ADDR
// if not result then
56843: LD_VAR 0 3
56847: NOT
56848: IFFALSE 56852
// exit ;
56850: GO 57308
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56852: LD_ADDR_VAR 0 5
56856: PUSH
56857: LD_INT 81
56859: PUSH
56860: LD_VAR 0 8
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PPUSH
56869: CALL_OW 69
56873: ST_TO_ADDR
// for i in result do
56874: LD_ADDR_VAR 0 4
56878: PUSH
56879: LD_VAR 0 3
56883: PUSH
56884: FOR_IN
56885: IFFALSE 57306
// begin tag := GetTag ( i ) + 1 ;
56887: LD_ADDR_VAR 0 9
56891: PUSH
56892: LD_VAR 0 4
56896: PPUSH
56897: CALL_OW 110
56901: PUSH
56902: LD_INT 1
56904: PLUS
56905: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
56906: LD_ADDR_VAR 0 7
56910: PUSH
56911: LD_VAR 0 4
56915: PPUSH
56916: CALL_OW 250
56920: PPUSH
56921: LD_VAR 0 4
56925: PPUSH
56926: CALL_OW 251
56930: PPUSH
56931: LD_INT 6
56933: PPUSH
56934: CALL 56507 0 3
56938: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
56939: LD_VAR 0 4
56943: PPUSH
56944: CALL_OW 247
56948: PUSH
56949: LD_INT 2
56951: EQUAL
56952: PUSH
56953: LD_VAR 0 7
56957: AND
56958: PUSH
56959: LD_VAR 0 4
56963: PPUSH
56964: CALL_OW 264
56968: PUSH
56969: LD_VAR 0 10
56973: IN
56974: NOT
56975: AND
56976: IFFALSE 57015
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
56978: LD_VAR 0 4
56982: PPUSH
56983: LD_VAR 0 7
56987: PUSH
56988: LD_INT 1
56990: ARRAY
56991: PUSH
56992: LD_INT 1
56994: ARRAY
56995: PPUSH
56996: LD_VAR 0 7
57000: PUSH
57001: LD_INT 1
57003: ARRAY
57004: PUSH
57005: LD_INT 2
57007: ARRAY
57008: PPUSH
57009: CALL_OW 116
57013: GO 57304
// if path > tag then
57015: LD_VAR 0 2
57019: PUSH
57020: LD_VAR 0 9
57024: GREATER
57025: IFFALSE 57233
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
57027: LD_ADDR_VAR 0 6
57031: PUSH
57032: LD_VAR 0 5
57036: PPUSH
57037: LD_INT 91
57039: PUSH
57040: LD_VAR 0 4
57044: PUSH
57045: LD_INT 8
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: LIST
57052: PPUSH
57053: CALL_OW 72
57057: ST_TO_ADDR
// if nearEnemy then
57058: LD_VAR 0 6
57062: IFFALSE 57131
// begin if GetWeapon ( i ) = ru_time_lapser then
57064: LD_VAR 0 4
57068: PPUSH
57069: CALL_OW 264
57073: PUSH
57074: LD_INT 49
57076: EQUAL
57077: IFFALSE 57105
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57079: LD_VAR 0 4
57083: PPUSH
57084: LD_VAR 0 6
57088: PPUSH
57089: LD_VAR 0 4
57093: PPUSH
57094: CALL_OW 74
57098: PPUSH
57099: CALL_OW 112
57103: GO 57129
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57105: LD_VAR 0 4
57109: PPUSH
57110: LD_VAR 0 6
57114: PPUSH
57115: LD_VAR 0 4
57119: PPUSH
57120: CALL_OW 74
57124: PPUSH
57125: CALL 58233 0 2
// end else
57129: GO 57231
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57131: LD_VAR 0 4
57135: PPUSH
57136: LD_VAR 0 2
57140: PUSH
57141: LD_VAR 0 9
57145: ARRAY
57146: PUSH
57147: LD_INT 1
57149: ARRAY
57150: PPUSH
57151: LD_VAR 0 2
57155: PUSH
57156: LD_VAR 0 9
57160: ARRAY
57161: PUSH
57162: LD_INT 2
57164: ARRAY
57165: PPUSH
57166: CALL_OW 297
57170: PUSH
57171: LD_INT 6
57173: GREATER
57174: IFFALSE 57217
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57176: LD_VAR 0 4
57180: PPUSH
57181: LD_VAR 0 2
57185: PUSH
57186: LD_VAR 0 9
57190: ARRAY
57191: PUSH
57192: LD_INT 1
57194: ARRAY
57195: PPUSH
57196: LD_VAR 0 2
57200: PUSH
57201: LD_VAR 0 9
57205: ARRAY
57206: PUSH
57207: LD_INT 2
57209: ARRAY
57210: PPUSH
57211: CALL_OW 114
57215: GO 57231
// SetTag ( i , tag ) ;
57217: LD_VAR 0 4
57221: PPUSH
57222: LD_VAR 0 9
57226: PPUSH
57227: CALL_OW 109
// end else
57231: GO 57304
// if enemy then
57233: LD_VAR 0 5
57237: IFFALSE 57304
// begin if GetWeapon ( i ) = ru_time_lapser then
57239: LD_VAR 0 4
57243: PPUSH
57244: CALL_OW 264
57248: PUSH
57249: LD_INT 49
57251: EQUAL
57252: IFFALSE 57280
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57254: LD_VAR 0 4
57258: PPUSH
57259: LD_VAR 0 5
57263: PPUSH
57264: LD_VAR 0 4
57268: PPUSH
57269: CALL_OW 74
57273: PPUSH
57274: CALL_OW 112
57278: GO 57304
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57280: LD_VAR 0 4
57284: PPUSH
57285: LD_VAR 0 5
57289: PPUSH
57290: LD_VAR 0 4
57294: PPUSH
57295: CALL_OW 74
57299: PPUSH
57300: CALL 58233 0 2
// end ; end ;
57304: GO 56884
57306: POP
57307: POP
// end ;
57308: LD_VAR 0 3
57312: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57313: LD_INT 0
57315: PPUSH
57316: PPUSH
57317: PPUSH
// if not unit or IsInUnit ( unit ) then
57318: LD_VAR 0 1
57322: NOT
57323: PUSH
57324: LD_VAR 0 1
57328: PPUSH
57329: CALL_OW 310
57333: OR
57334: IFFALSE 57338
// exit ;
57336: GO 57429
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57338: LD_ADDR_VAR 0 4
57342: PUSH
57343: LD_VAR 0 1
57347: PPUSH
57348: CALL_OW 250
57352: PPUSH
57353: LD_VAR 0 2
57357: PPUSH
57358: LD_INT 1
57360: PPUSH
57361: CALL_OW 272
57365: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57366: LD_ADDR_VAR 0 5
57370: PUSH
57371: LD_VAR 0 1
57375: PPUSH
57376: CALL_OW 251
57380: PPUSH
57381: LD_VAR 0 2
57385: PPUSH
57386: LD_INT 1
57388: PPUSH
57389: CALL_OW 273
57393: ST_TO_ADDR
// if ValidHex ( x , y ) then
57394: LD_VAR 0 4
57398: PPUSH
57399: LD_VAR 0 5
57403: PPUSH
57404: CALL_OW 488
57408: IFFALSE 57429
// ComTurnXY ( unit , x , y ) ;
57410: LD_VAR 0 1
57414: PPUSH
57415: LD_VAR 0 4
57419: PPUSH
57420: LD_VAR 0 5
57424: PPUSH
57425: CALL_OW 118
// end ;
57429: LD_VAR 0 3
57433: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57434: LD_INT 0
57436: PPUSH
57437: PPUSH
// result := false ;
57438: LD_ADDR_VAR 0 3
57442: PUSH
57443: LD_INT 0
57445: ST_TO_ADDR
// if not units then
57446: LD_VAR 0 2
57450: NOT
57451: IFFALSE 57455
// exit ;
57453: GO 57500
// for i in units do
57455: LD_ADDR_VAR 0 4
57459: PUSH
57460: LD_VAR 0 2
57464: PUSH
57465: FOR_IN
57466: IFFALSE 57498
// if See ( side , i ) then
57468: LD_VAR 0 1
57472: PPUSH
57473: LD_VAR 0 4
57477: PPUSH
57478: CALL_OW 292
57482: IFFALSE 57496
// begin result := true ;
57484: LD_ADDR_VAR 0 3
57488: PUSH
57489: LD_INT 1
57491: ST_TO_ADDR
// exit ;
57492: POP
57493: POP
57494: GO 57500
// end ;
57496: GO 57465
57498: POP
57499: POP
// end ;
57500: LD_VAR 0 3
57504: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57505: LD_INT 0
57507: PPUSH
57508: PPUSH
57509: PPUSH
57510: PPUSH
// if not unit or not points then
57511: LD_VAR 0 1
57515: NOT
57516: PUSH
57517: LD_VAR 0 2
57521: NOT
57522: OR
57523: IFFALSE 57527
// exit ;
57525: GO 57617
// dist := 99999 ;
57527: LD_ADDR_VAR 0 5
57531: PUSH
57532: LD_INT 99999
57534: ST_TO_ADDR
// for i in points do
57535: LD_ADDR_VAR 0 4
57539: PUSH
57540: LD_VAR 0 2
57544: PUSH
57545: FOR_IN
57546: IFFALSE 57615
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57548: LD_ADDR_VAR 0 6
57552: PUSH
57553: LD_VAR 0 1
57557: PPUSH
57558: LD_VAR 0 4
57562: PUSH
57563: LD_INT 1
57565: ARRAY
57566: PPUSH
57567: LD_VAR 0 4
57571: PUSH
57572: LD_INT 2
57574: ARRAY
57575: PPUSH
57576: CALL_OW 297
57580: ST_TO_ADDR
// if tmpDist < dist then
57581: LD_VAR 0 6
57585: PUSH
57586: LD_VAR 0 5
57590: LESS
57591: IFFALSE 57613
// begin result := i ;
57593: LD_ADDR_VAR 0 3
57597: PUSH
57598: LD_VAR 0 4
57602: ST_TO_ADDR
// dist := tmpDist ;
57603: LD_ADDR_VAR 0 5
57607: PUSH
57608: LD_VAR 0 6
57612: ST_TO_ADDR
// end ; end ;
57613: GO 57545
57615: POP
57616: POP
// end ;
57617: LD_VAR 0 3
57621: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57622: LD_INT 0
57624: PPUSH
// uc_side := side ;
57625: LD_ADDR_OWVAR 20
57629: PUSH
57630: LD_VAR 0 1
57634: ST_TO_ADDR
// uc_nation := 3 ;
57635: LD_ADDR_OWVAR 21
57639: PUSH
57640: LD_INT 3
57642: ST_TO_ADDR
// vc_chassis := 25 ;
57643: LD_ADDR_OWVAR 37
57647: PUSH
57648: LD_INT 25
57650: ST_TO_ADDR
// vc_engine := engine_siberite ;
57651: LD_ADDR_OWVAR 39
57655: PUSH
57656: LD_INT 3
57658: ST_TO_ADDR
// vc_control := control_computer ;
57659: LD_ADDR_OWVAR 38
57663: PUSH
57664: LD_INT 3
57666: ST_TO_ADDR
// vc_weapon := 59 ;
57667: LD_ADDR_OWVAR 40
57671: PUSH
57672: LD_INT 59
57674: ST_TO_ADDR
// result := CreateVehicle ;
57675: LD_ADDR_VAR 0 5
57679: PUSH
57680: CALL_OW 45
57684: ST_TO_ADDR
// SetDir ( result , d ) ;
57685: LD_VAR 0 5
57689: PPUSH
57690: LD_VAR 0 4
57694: PPUSH
57695: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57699: LD_VAR 0 5
57703: PPUSH
57704: LD_VAR 0 2
57708: PPUSH
57709: LD_VAR 0 3
57713: PPUSH
57714: LD_INT 0
57716: PPUSH
57717: CALL_OW 48
// end ;
57721: LD_VAR 0 5
57725: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57726: LD_INT 0
57728: PPUSH
57729: PPUSH
57730: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57731: LD_ADDR_VAR 0 2
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: LD_INT 0
57741: PUSH
57742: LD_INT 0
57744: PUSH
57745: LD_INT 0
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57754: LD_VAR 0 1
57758: NOT
57759: PUSH
57760: LD_VAR 0 1
57764: PPUSH
57765: CALL_OW 264
57769: PUSH
57770: LD_INT 12
57772: PUSH
57773: LD_INT 51
57775: PUSH
57776: LD_INT 32
57778: PUSH
57779: LD_INT 89
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: IN
57788: NOT
57789: OR
57790: IFFALSE 57794
// exit ;
57792: GO 57892
// for i := 1 to 3 do
57794: LD_ADDR_VAR 0 3
57798: PUSH
57799: DOUBLE
57800: LD_INT 1
57802: DEC
57803: ST_TO_ADDR
57804: LD_INT 3
57806: PUSH
57807: FOR_TO
57808: IFFALSE 57890
// begin tmp := GetCargo ( cargo , i ) ;
57810: LD_ADDR_VAR 0 4
57814: PUSH
57815: LD_VAR 0 1
57819: PPUSH
57820: LD_VAR 0 3
57824: PPUSH
57825: CALL_OW 289
57829: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
57830: LD_ADDR_VAR 0 2
57834: PUSH
57835: LD_VAR 0 2
57839: PPUSH
57840: LD_VAR 0 3
57844: PPUSH
57845: LD_VAR 0 4
57849: PPUSH
57850: CALL_OW 1
57854: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
57855: LD_ADDR_VAR 0 2
57859: PUSH
57860: LD_VAR 0 2
57864: PPUSH
57865: LD_INT 4
57867: PPUSH
57868: LD_VAR 0 2
57872: PUSH
57873: LD_INT 4
57875: ARRAY
57876: PUSH
57877: LD_VAR 0 4
57881: PLUS
57882: PPUSH
57883: CALL_OW 1
57887: ST_TO_ADDR
// end ;
57888: GO 57807
57890: POP
57891: POP
// end ;
57892: LD_VAR 0 2
57896: RET
// export function Length ( array ) ; begin
57897: LD_INT 0
57899: PPUSH
// result := array + 0 ;
57900: LD_ADDR_VAR 0 2
57904: PUSH
57905: LD_VAR 0 1
57909: PUSH
57910: LD_INT 0
57912: PLUS
57913: ST_TO_ADDR
// end ;
57914: LD_VAR 0 2
57918: RET
// export function PrepareArray ( array ) ; begin
57919: LD_INT 0
57921: PPUSH
// result := array diff 0 ;
57922: LD_ADDR_VAR 0 2
57926: PUSH
57927: LD_VAR 0 1
57931: PUSH
57932: LD_INT 0
57934: DIFF
57935: ST_TO_ADDR
// if not result [ 1 ] then
57936: LD_VAR 0 2
57940: PUSH
57941: LD_INT 1
57943: ARRAY
57944: NOT
57945: IFFALSE 57965
// result := Delete ( result , 1 ) ;
57947: LD_ADDR_VAR 0 2
57951: PUSH
57952: LD_VAR 0 2
57956: PPUSH
57957: LD_INT 1
57959: PPUSH
57960: CALL_OW 3
57964: ST_TO_ADDR
// end ;
57965: LD_VAR 0 2
57969: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
57970: LD_INT 0
57972: PPUSH
57973: PPUSH
57974: PPUSH
57975: PPUSH
// sibRocketRange := 25 ;
57976: LD_ADDR_VAR 0 6
57980: PUSH
57981: LD_INT 25
57983: ST_TO_ADDR
// result := false ;
57984: LD_ADDR_VAR 0 4
57988: PUSH
57989: LD_INT 0
57991: ST_TO_ADDR
// for i := 0 to 5 do
57992: LD_ADDR_VAR 0 5
57996: PUSH
57997: DOUBLE
57998: LD_INT 0
58000: DEC
58001: ST_TO_ADDR
58002: LD_INT 5
58004: PUSH
58005: FOR_TO
58006: IFFALSE 58073
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
58008: LD_VAR 0 1
58012: PPUSH
58013: LD_VAR 0 5
58017: PPUSH
58018: LD_VAR 0 6
58022: PPUSH
58023: CALL_OW 272
58027: PPUSH
58028: LD_VAR 0 2
58032: PPUSH
58033: LD_VAR 0 5
58037: PPUSH
58038: LD_VAR 0 6
58042: PPUSH
58043: CALL_OW 273
58047: PPUSH
58048: LD_VAR 0 3
58052: PPUSH
58053: CALL_OW 309
58057: IFFALSE 58071
// begin result := true ;
58059: LD_ADDR_VAR 0 4
58063: PUSH
58064: LD_INT 1
58066: ST_TO_ADDR
// exit ;
58067: POP
58068: POP
58069: GO 58075
// end ;
58071: GO 58005
58073: POP
58074: POP
// end ;
58075: LD_VAR 0 4
58079: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58080: LD_INT 0
58082: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58083: LD_VAR 0 1
58087: PPUSH
58088: LD_VAR 0 2
58092: PPUSH
58093: LD_INT 0
58095: PPUSH
58096: LD_INT 0
58098: PPUSH
58099: LD_INT 1
58101: PPUSH
58102: LD_INT 0
58104: PPUSH
58105: CALL_OW 587
// end ;
58109: LD_VAR 0 3
58113: RET
// export function CenterOnNow ( unit ) ; begin
58114: LD_INT 0
58116: PPUSH
// result := IsInUnit ( unit ) ;
58117: LD_ADDR_VAR 0 2
58121: PUSH
58122: LD_VAR 0 1
58126: PPUSH
58127: CALL_OW 310
58131: ST_TO_ADDR
// if not result then
58132: LD_VAR 0 2
58136: NOT
58137: IFFALSE 58149
// result := unit ;
58139: LD_ADDR_VAR 0 2
58143: PUSH
58144: LD_VAR 0 1
58148: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58149: LD_VAR 0 1
58153: PPUSH
58154: CALL_OW 87
// end ;
58158: LD_VAR 0 2
58162: RET
// export function ComMoveHex ( unit , hex ) ; begin
58163: LD_INT 0
58165: PPUSH
// if not hex then
58166: LD_VAR 0 2
58170: NOT
58171: IFFALSE 58175
// exit ;
58173: GO 58228
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58175: LD_VAR 0 2
58179: PUSH
58180: LD_INT 1
58182: ARRAY
58183: PPUSH
58184: LD_VAR 0 2
58188: PUSH
58189: LD_INT 2
58191: ARRAY
58192: PPUSH
58193: CALL_OW 428
58197: IFFALSE 58201
// exit ;
58199: GO 58228
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58201: LD_VAR 0 1
58205: PPUSH
58206: LD_VAR 0 2
58210: PUSH
58211: LD_INT 1
58213: ARRAY
58214: PPUSH
58215: LD_VAR 0 2
58219: PUSH
58220: LD_INT 2
58222: ARRAY
58223: PPUSH
58224: CALL_OW 111
// end ;
58228: LD_VAR 0 3
58232: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58233: LD_INT 0
58235: PPUSH
58236: PPUSH
58237: PPUSH
// if not unit or not enemy then
58238: LD_VAR 0 1
58242: NOT
58243: PUSH
58244: LD_VAR 0 2
58248: NOT
58249: OR
58250: IFFALSE 58254
// exit ;
58252: GO 58378
// x := GetX ( enemy ) ;
58254: LD_ADDR_VAR 0 4
58258: PUSH
58259: LD_VAR 0 2
58263: PPUSH
58264: CALL_OW 250
58268: ST_TO_ADDR
// y := GetY ( enemy ) ;
58269: LD_ADDR_VAR 0 5
58273: PUSH
58274: LD_VAR 0 2
58278: PPUSH
58279: CALL_OW 251
58283: ST_TO_ADDR
// if ValidHex ( x , y ) then
58284: LD_VAR 0 4
58288: PPUSH
58289: LD_VAR 0 5
58293: PPUSH
58294: CALL_OW 488
58298: IFFALSE 58378
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
58300: LD_VAR 0 2
58304: PPUSH
58305: CALL_OW 247
58309: PUSH
58310: LD_INT 3
58312: PUSH
58313: LD_INT 2
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: IN
58320: PUSH
58321: LD_VAR 0 1
58325: PPUSH
58326: CALL_OW 255
58330: PPUSH
58331: LD_VAR 0 2
58335: PPUSH
58336: CALL_OW 292
58340: AND
58341: IFFALSE 58359
// ComAttackUnit ( unit , enemy ) else
58343: LD_VAR 0 1
58347: PPUSH
58348: LD_VAR 0 2
58352: PPUSH
58353: CALL_OW 115
58357: GO 58378
// ComAgressiveMove ( unit , x , y ) ;
58359: LD_VAR 0 1
58363: PPUSH
58364: LD_VAR 0 4
58368: PPUSH
58369: LD_VAR 0 5
58373: PPUSH
58374: CALL_OW 114
// end ;
58378: LD_VAR 0 3
58382: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58383: LD_INT 0
58385: PPUSH
58386: PPUSH
58387: PPUSH
// list := AreaToList ( area , 0 ) ;
58388: LD_ADDR_VAR 0 5
58392: PUSH
58393: LD_VAR 0 1
58397: PPUSH
58398: LD_INT 0
58400: PPUSH
58401: CALL_OW 517
58405: ST_TO_ADDR
// if not list then
58406: LD_VAR 0 5
58410: NOT
58411: IFFALSE 58415
// exit ;
58413: GO 58545
// if all then
58415: LD_VAR 0 2
58419: IFFALSE 58507
// begin for i := 1 to list [ 1 ] do
58421: LD_ADDR_VAR 0 4
58425: PUSH
58426: DOUBLE
58427: LD_INT 1
58429: DEC
58430: ST_TO_ADDR
58431: LD_VAR 0 5
58435: PUSH
58436: LD_INT 1
58438: ARRAY
58439: PUSH
58440: FOR_TO
58441: IFFALSE 58503
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58443: LD_ADDR_VAR 0 3
58447: PUSH
58448: LD_VAR 0 3
58452: PPUSH
58453: LD_VAR 0 3
58457: PUSH
58458: LD_INT 1
58460: PLUS
58461: PPUSH
58462: LD_VAR 0 5
58466: PUSH
58467: LD_INT 1
58469: ARRAY
58470: PUSH
58471: LD_VAR 0 4
58475: ARRAY
58476: PUSH
58477: LD_VAR 0 5
58481: PUSH
58482: LD_INT 2
58484: ARRAY
58485: PUSH
58486: LD_VAR 0 4
58490: ARRAY
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PPUSH
58496: CALL_OW 1
58500: ST_TO_ADDR
58501: GO 58440
58503: POP
58504: POP
// exit ;
58505: GO 58545
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
58507: LD_ADDR_VAR 0 3
58511: PUSH
58512: LD_VAR 0 5
58516: PUSH
58517: LD_INT 1
58519: ARRAY
58520: PUSH
58521: LD_INT 1
58523: ARRAY
58524: PUSH
58525: LD_VAR 0 5
58529: PUSH
58530: LD_INT 2
58532: ARRAY
58533: PUSH
58534: LD_INT 1
58536: ARRAY
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: EMPTY
58543: LIST
58544: ST_TO_ADDR
// end ;
58545: LD_VAR 0 3
58549: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
58550: LD_INT 0
58552: PPUSH
58553: PPUSH
// list := AreaToList ( area , 0 ) ;
58554: LD_ADDR_VAR 0 4
58558: PUSH
58559: LD_VAR 0 1
58563: PPUSH
58564: LD_INT 0
58566: PPUSH
58567: CALL_OW 517
58571: ST_TO_ADDR
// if not list then
58572: LD_VAR 0 4
58576: NOT
58577: IFFALSE 58581
// exit ;
58579: GO 58622
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
58581: LD_ADDR_VAR 0 3
58585: PUSH
58586: LD_VAR 0 4
58590: PUSH
58591: LD_INT 1
58593: ARRAY
58594: PUSH
58595: LD_INT 1
58597: ARRAY
58598: PUSH
58599: LD_VAR 0 4
58603: PUSH
58604: LD_INT 2
58606: ARRAY
58607: PUSH
58608: LD_INT 1
58610: ARRAY
58611: PUSH
58612: LD_VAR 0 2
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: LIST
58621: ST_TO_ADDR
// end ;
58622: LD_VAR 0 3
58626: RET
// export function First ( array ) ; begin
58627: LD_INT 0
58629: PPUSH
// if not array then
58630: LD_VAR 0 1
58634: NOT
58635: IFFALSE 58639
// exit ;
58637: GO 58653
// result := array [ 1 ] ;
58639: LD_ADDR_VAR 0 2
58643: PUSH
58644: LD_VAR 0 1
58648: PUSH
58649: LD_INT 1
58651: ARRAY
58652: ST_TO_ADDR
// end ;
58653: LD_VAR 0 2
58657: RET
// export function Last ( array ) ; begin
58658: LD_INT 0
58660: PPUSH
// if not array then
58661: LD_VAR 0 1
58665: NOT
58666: IFFALSE 58670
// exit ;
58668: GO 58686
// result := array [ array ] ;
58670: LD_ADDR_VAR 0 2
58674: PUSH
58675: LD_VAR 0 1
58679: PUSH
58680: LD_VAR 0 1
58684: ARRAY
58685: ST_TO_ADDR
// end ; end_of_file
58686: LD_VAR 0 2
58690: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
58691: LD_VAR 0 1
58695: PUSH
58696: LD_INT 200
58698: DOUBLE
58699: GREATEREQUAL
58700: IFFALSE 58708
58702: LD_INT 299
58704: DOUBLE
58705: LESSEQUAL
58706: IFTRUE 58710
58708: GO 58742
58710: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
58711: LD_VAR 0 1
58715: PPUSH
58716: LD_VAR 0 2
58720: PPUSH
58721: LD_VAR 0 3
58725: PPUSH
58726: LD_VAR 0 4
58730: PPUSH
58731: LD_VAR 0 5
58735: PPUSH
58736: CALL 59230 0 5
58740: GO 58819
58742: LD_INT 300
58744: DOUBLE
58745: GREATEREQUAL
58746: IFFALSE 58754
58748: LD_INT 399
58750: DOUBLE
58751: LESSEQUAL
58752: IFTRUE 58756
58754: GO 58818
58756: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
58757: LD_VAR 0 1
58761: PPUSH
58762: LD_VAR 0 2
58766: PPUSH
58767: LD_VAR 0 3
58771: PPUSH
58772: LD_VAR 0 4
58776: PPUSH
58777: LD_VAR 0 5
58781: PPUSH
58782: LD_VAR 0 6
58786: PPUSH
58787: LD_VAR 0 7
58791: PPUSH
58792: LD_VAR 0 8
58796: PPUSH
58797: LD_VAR 0 9
58801: PPUSH
58802: LD_VAR 0 10
58806: PPUSH
58807: LD_VAR 0 11
58811: PPUSH
58812: CALL 76085 0 11
58816: GO 58819
58818: POP
// end ;
58819: PPOPN 11
58821: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
58822: LD_VAR 0 1
58826: PPUSH
58827: LD_VAR 0 2
58831: PPUSH
58832: LD_VAR 0 3
58836: PPUSH
58837: LD_VAR 0 4
58841: PPUSH
58842: LD_VAR 0 5
58846: PPUSH
58847: CALL 58966 0 5
// end ; end_of_file
58851: PPOPN 5
58853: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
58854: LD_INT 0
58856: PPUSH
58857: PPUSH
58858: PPUSH
58859: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
58860: LD_VAR 0 1
58864: PPUSH
58865: CALL_OW 264
58869: PUSH
58870: LD_INT 91
58872: EQUAL
58873: IFFALSE 58945
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
58875: LD_INT 68
58877: PPUSH
58878: LD_VAR 0 1
58882: PPUSH
58883: CALL_OW 255
58887: PPUSH
58888: CALL_OW 321
58892: PUSH
58893: LD_INT 2
58895: EQUAL
58896: IFFALSE 58908
// eff := 70 else
58898: LD_ADDR_VAR 0 4
58902: PUSH
58903: LD_INT 70
58905: ST_TO_ADDR
58906: GO 58916
// eff := 30 ;
58908: LD_ADDR_VAR 0 4
58912: PUSH
58913: LD_INT 30
58915: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
58916: LD_VAR 0 1
58920: PPUSH
58921: CALL_OW 250
58925: PPUSH
58926: LD_VAR 0 1
58930: PPUSH
58931: CALL_OW 251
58935: PPUSH
58936: LD_VAR 0 4
58940: PPUSH
58941: CALL_OW 495
// end ; end ;
58945: LD_VAR 0 2
58949: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
58950: LD_INT 0
58952: PPUSH
// end ;
58953: LD_VAR 0 4
58957: RET
// export function SOS_Command ( cmd ) ; begin
58958: LD_INT 0
58960: PPUSH
// end ;
58961: LD_VAR 0 2
58965: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
58966: LD_INT 0
58968: PPUSH
// end ;
58969: LD_VAR 0 6
58973: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
58974: LD_INT 0
58976: PPUSH
58977: PPUSH
// if not vehicle or not factory then
58978: LD_VAR 0 1
58982: NOT
58983: PUSH
58984: LD_VAR 0 2
58988: NOT
58989: OR
58990: IFFALSE 58994
// exit ;
58992: GO 59225
// if factoryWaypoints >= factory then
58994: LD_EXP 105
58998: PUSH
58999: LD_VAR 0 2
59003: GREATEREQUAL
59004: IFFALSE 59225
// if factoryWaypoints [ factory ] then
59006: LD_EXP 105
59010: PUSH
59011: LD_VAR 0 2
59015: ARRAY
59016: IFFALSE 59225
// begin if GetControl ( vehicle ) = control_manual then
59018: LD_VAR 0 1
59022: PPUSH
59023: CALL_OW 263
59027: PUSH
59028: LD_INT 1
59030: EQUAL
59031: IFFALSE 59112
// begin driver := IsDrivenBy ( vehicle ) ;
59033: LD_ADDR_VAR 0 4
59037: PUSH
59038: LD_VAR 0 1
59042: PPUSH
59043: CALL_OW 311
59047: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
59048: LD_VAR 0 4
59052: PPUSH
59053: LD_EXP 105
59057: PUSH
59058: LD_VAR 0 2
59062: ARRAY
59063: PUSH
59064: LD_INT 3
59066: ARRAY
59067: PPUSH
59068: LD_EXP 105
59072: PUSH
59073: LD_VAR 0 2
59077: ARRAY
59078: PUSH
59079: LD_INT 4
59081: ARRAY
59082: PPUSH
59083: CALL_OW 171
// AddComExitVehicle ( driver ) ;
59087: LD_VAR 0 4
59091: PPUSH
59092: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
59096: LD_VAR 0 4
59100: PPUSH
59101: LD_VAR 0 2
59105: PPUSH
59106: CALL_OW 180
// end else
59110: GO 59225
// if GetControl ( vehicle ) = control_remote then
59112: LD_VAR 0 1
59116: PPUSH
59117: CALL_OW 263
59121: PUSH
59122: LD_INT 2
59124: EQUAL
59125: IFFALSE 59186
// begin wait ( 0 0$2 ) ;
59127: LD_INT 70
59129: PPUSH
59130: CALL_OW 67
// if Connect ( vehicle ) then
59134: LD_VAR 0 1
59138: PPUSH
59139: CALL 24767 0 1
59143: IFFALSE 59184
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
59145: LD_VAR 0 1
59149: PPUSH
59150: LD_EXP 105
59154: PUSH
59155: LD_VAR 0 2
59159: ARRAY
59160: PUSH
59161: LD_INT 3
59163: ARRAY
59164: PPUSH
59165: LD_EXP 105
59169: PUSH
59170: LD_VAR 0 2
59174: ARRAY
59175: PUSH
59176: LD_INT 4
59178: ARRAY
59179: PPUSH
59180: CALL_OW 171
// end else
59184: GO 59225
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
59186: LD_VAR 0 1
59190: PPUSH
59191: LD_EXP 105
59195: PUSH
59196: LD_VAR 0 2
59200: ARRAY
59201: PUSH
59202: LD_INT 3
59204: ARRAY
59205: PPUSH
59206: LD_EXP 105
59210: PUSH
59211: LD_VAR 0 2
59215: ARRAY
59216: PUSH
59217: LD_INT 4
59219: ARRAY
59220: PPUSH
59221: CALL_OW 171
// end ; end ;
59225: LD_VAR 0 3
59229: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
59230: LD_INT 0
59232: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
59233: LD_VAR 0 1
59237: PUSH
59238: LD_INT 250
59240: EQUAL
59241: PUSH
59242: LD_VAR 0 2
59246: PPUSH
59247: CALL_OW 264
59251: PUSH
59252: LD_INT 81
59254: EQUAL
59255: AND
59256: IFFALSE 59277
// MinerPlaceMine ( unit , x , y ) ;
59258: LD_VAR 0 2
59262: PPUSH
59263: LD_VAR 0 4
59267: PPUSH
59268: LD_VAR 0 5
59272: PPUSH
59273: CALL 62101 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
59277: LD_VAR 0 1
59281: PUSH
59282: LD_INT 251
59284: EQUAL
59285: PUSH
59286: LD_VAR 0 2
59290: PPUSH
59291: CALL_OW 264
59295: PUSH
59296: LD_INT 81
59298: EQUAL
59299: AND
59300: IFFALSE 59321
// MinerDetonateMine ( unit , x , y ) ;
59302: LD_VAR 0 2
59306: PPUSH
59307: LD_VAR 0 4
59311: PPUSH
59312: LD_VAR 0 5
59316: PPUSH
59317: CALL 62376 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
59321: LD_VAR 0 1
59325: PUSH
59326: LD_INT 252
59328: EQUAL
59329: PUSH
59330: LD_VAR 0 2
59334: PPUSH
59335: CALL_OW 264
59339: PUSH
59340: LD_INT 81
59342: EQUAL
59343: AND
59344: IFFALSE 59365
// MinerCreateMinefield ( unit , x , y ) ;
59346: LD_VAR 0 2
59350: PPUSH
59351: LD_VAR 0 4
59355: PPUSH
59356: LD_VAR 0 5
59360: PPUSH
59361: CALL 62793 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
59365: LD_VAR 0 1
59369: PUSH
59370: LD_INT 253
59372: EQUAL
59373: PUSH
59374: LD_VAR 0 2
59378: PPUSH
59379: CALL_OW 257
59383: PUSH
59384: LD_INT 5
59386: EQUAL
59387: AND
59388: IFFALSE 59409
// ComBinocular ( unit , x , y ) ;
59390: LD_VAR 0 2
59394: PPUSH
59395: LD_VAR 0 4
59399: PPUSH
59400: LD_VAR 0 5
59404: PPUSH
59405: CALL 63162 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
59409: LD_VAR 0 1
59413: PUSH
59414: LD_INT 254
59416: EQUAL
59417: PUSH
59418: LD_VAR 0 2
59422: PPUSH
59423: CALL_OW 264
59427: PUSH
59428: LD_INT 99
59430: EQUAL
59431: AND
59432: PUSH
59433: LD_VAR 0 3
59437: PPUSH
59438: CALL_OW 263
59442: PUSH
59443: LD_INT 3
59445: EQUAL
59446: AND
59447: IFFALSE 59463
// HackDestroyVehicle ( unit , selectedUnit ) ;
59449: LD_VAR 0 2
59453: PPUSH
59454: LD_VAR 0 3
59458: PPUSH
59459: CALL 61465 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
59463: LD_VAR 0 1
59467: PUSH
59468: LD_INT 255
59470: EQUAL
59471: PUSH
59472: LD_VAR 0 2
59476: PPUSH
59477: CALL_OW 264
59481: PUSH
59482: LD_INT 14
59484: PUSH
59485: LD_INT 53
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: IN
59492: AND
59493: PUSH
59494: LD_VAR 0 4
59498: PPUSH
59499: LD_VAR 0 5
59503: PPUSH
59504: CALL_OW 488
59508: AND
59509: IFFALSE 59533
// CutTreeXYR ( unit , x , y , 12 ) ;
59511: LD_VAR 0 2
59515: PPUSH
59516: LD_VAR 0 4
59520: PPUSH
59521: LD_VAR 0 5
59525: PPUSH
59526: LD_INT 12
59528: PPUSH
59529: CALL 59628 0 4
// if cmd = 256 then
59533: LD_VAR 0 1
59537: PUSH
59538: LD_INT 256
59540: EQUAL
59541: IFFALSE 59562
// SetFactoryWaypoint ( unit , x , y ) ;
59543: LD_VAR 0 2
59547: PPUSH
59548: LD_VAR 0 4
59552: PPUSH
59553: LD_VAR 0 5
59557: PPUSH
59558: CALL 78073 0 3
// if cmd = 257 then
59562: LD_VAR 0 1
59566: PUSH
59567: LD_INT 257
59569: EQUAL
59570: IFFALSE 59591
// SetWarehouseGatheringPoint ( unit , x , y ) ;
59572: LD_VAR 0 2
59576: PPUSH
59577: LD_VAR 0 4
59581: PPUSH
59582: LD_VAR 0 5
59586: PPUSH
59587: CALL 78435 0 3
// if cmd = 258 then
59591: LD_VAR 0 1
59595: PUSH
59596: LD_INT 258
59598: EQUAL
59599: IFFALSE 59623
// BurnTreeXYR ( unit , x , y , 8 ) ;
59601: LD_VAR 0 2
59605: PPUSH
59606: LD_VAR 0 4
59610: PPUSH
59611: LD_VAR 0 5
59615: PPUSH
59616: LD_INT 8
59618: PPUSH
59619: CALL 60022 0 4
// end ;
59623: LD_VAR 0 6
59627: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
59628: LD_INT 0
59630: PPUSH
59631: PPUSH
59632: PPUSH
59633: PPUSH
59634: PPUSH
59635: PPUSH
59636: PPUSH
59637: PPUSH
59638: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
59639: LD_VAR 0 1
59643: PPUSH
59644: CALL_OW 302
59648: NOT
59649: PUSH
59650: LD_VAR 0 2
59654: PPUSH
59655: LD_VAR 0 3
59659: PPUSH
59660: CALL_OW 488
59664: NOT
59665: OR
59666: PUSH
59667: LD_VAR 0 4
59671: NOT
59672: OR
59673: IFFALSE 59677
// exit ;
59675: GO 60017
// list := [ ] ;
59677: LD_ADDR_VAR 0 13
59681: PUSH
59682: EMPTY
59683: ST_TO_ADDR
// if x - r < 0 then
59684: LD_VAR 0 2
59688: PUSH
59689: LD_VAR 0 4
59693: MINUS
59694: PUSH
59695: LD_INT 0
59697: LESS
59698: IFFALSE 59710
// min_x := 0 else
59700: LD_ADDR_VAR 0 7
59704: PUSH
59705: LD_INT 0
59707: ST_TO_ADDR
59708: GO 59726
// min_x := x - r ;
59710: LD_ADDR_VAR 0 7
59714: PUSH
59715: LD_VAR 0 2
59719: PUSH
59720: LD_VAR 0 4
59724: MINUS
59725: ST_TO_ADDR
// if y - r < 0 then
59726: LD_VAR 0 3
59730: PUSH
59731: LD_VAR 0 4
59735: MINUS
59736: PUSH
59737: LD_INT 0
59739: LESS
59740: IFFALSE 59752
// min_y := 0 else
59742: LD_ADDR_VAR 0 8
59746: PUSH
59747: LD_INT 0
59749: ST_TO_ADDR
59750: GO 59768
// min_y := y - r ;
59752: LD_ADDR_VAR 0 8
59756: PUSH
59757: LD_VAR 0 3
59761: PUSH
59762: LD_VAR 0 4
59766: MINUS
59767: ST_TO_ADDR
// max_x := x + r ;
59768: LD_ADDR_VAR 0 9
59772: PUSH
59773: LD_VAR 0 2
59777: PUSH
59778: LD_VAR 0 4
59782: PLUS
59783: ST_TO_ADDR
// max_y := y + r ;
59784: LD_ADDR_VAR 0 10
59788: PUSH
59789: LD_VAR 0 3
59793: PUSH
59794: LD_VAR 0 4
59798: PLUS
59799: ST_TO_ADDR
// for _x = min_x to max_x do
59800: LD_ADDR_VAR 0 11
59804: PUSH
59805: DOUBLE
59806: LD_VAR 0 7
59810: DEC
59811: ST_TO_ADDR
59812: LD_VAR 0 9
59816: PUSH
59817: FOR_TO
59818: IFFALSE 59935
// for _y = min_y to max_y do
59820: LD_ADDR_VAR 0 12
59824: PUSH
59825: DOUBLE
59826: LD_VAR 0 8
59830: DEC
59831: ST_TO_ADDR
59832: LD_VAR 0 10
59836: PUSH
59837: FOR_TO
59838: IFFALSE 59931
// begin if not ValidHex ( _x , _y ) then
59840: LD_VAR 0 11
59844: PPUSH
59845: LD_VAR 0 12
59849: PPUSH
59850: CALL_OW 488
59854: NOT
59855: IFFALSE 59859
// continue ;
59857: GO 59837
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
59859: LD_VAR 0 11
59863: PPUSH
59864: LD_VAR 0 12
59868: PPUSH
59869: CALL_OW 351
59873: PUSH
59874: LD_VAR 0 11
59878: PPUSH
59879: LD_VAR 0 12
59883: PPUSH
59884: CALL_OW 554
59888: AND
59889: IFFALSE 59929
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
59891: LD_ADDR_VAR 0 13
59895: PUSH
59896: LD_VAR 0 13
59900: PPUSH
59901: LD_VAR 0 13
59905: PUSH
59906: LD_INT 1
59908: PLUS
59909: PPUSH
59910: LD_VAR 0 11
59914: PUSH
59915: LD_VAR 0 12
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PPUSH
59924: CALL_OW 2
59928: ST_TO_ADDR
// end ;
59929: GO 59837
59931: POP
59932: POP
59933: GO 59817
59935: POP
59936: POP
// if not list then
59937: LD_VAR 0 13
59941: NOT
59942: IFFALSE 59946
// exit ;
59944: GO 60017
// for i in list do
59946: LD_ADDR_VAR 0 6
59950: PUSH
59951: LD_VAR 0 13
59955: PUSH
59956: FOR_IN
59957: IFFALSE 60015
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
59959: LD_VAR 0 1
59963: PPUSH
59964: LD_STRING M
59966: PUSH
59967: LD_VAR 0 6
59971: PUSH
59972: LD_INT 1
59974: ARRAY
59975: PUSH
59976: LD_VAR 0 6
59980: PUSH
59981: LD_INT 2
59983: ARRAY
59984: PUSH
59985: LD_INT 0
59987: PUSH
59988: LD_INT 0
59990: PUSH
59991: LD_INT 0
59993: PUSH
59994: LD_INT 0
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: PUSH
60006: EMPTY
60007: LIST
60008: PPUSH
60009: CALL_OW 447
60013: GO 59956
60015: POP
60016: POP
// end ;
60017: LD_VAR 0 5
60021: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
60022: LD_INT 0
60024: PPUSH
60025: PPUSH
60026: PPUSH
60027: PPUSH
60028: PPUSH
60029: PPUSH
60030: PPUSH
60031: PPUSH
60032: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
60033: LD_VAR 0 1
60037: PPUSH
60038: CALL_OW 302
60042: NOT
60043: PUSH
60044: LD_VAR 0 2
60048: PPUSH
60049: LD_VAR 0 3
60053: PPUSH
60054: CALL_OW 488
60058: NOT
60059: OR
60060: PUSH
60061: LD_VAR 0 4
60065: NOT
60066: OR
60067: IFFALSE 60071
// exit ;
60069: GO 60419
// list := [ ] ;
60071: LD_ADDR_VAR 0 13
60075: PUSH
60076: EMPTY
60077: ST_TO_ADDR
// if x - r < 0 then
60078: LD_VAR 0 2
60082: PUSH
60083: LD_VAR 0 4
60087: MINUS
60088: PUSH
60089: LD_INT 0
60091: LESS
60092: IFFALSE 60104
// min_x := 0 else
60094: LD_ADDR_VAR 0 7
60098: PUSH
60099: LD_INT 0
60101: ST_TO_ADDR
60102: GO 60120
// min_x := x - r ;
60104: LD_ADDR_VAR 0 7
60108: PUSH
60109: LD_VAR 0 2
60113: PUSH
60114: LD_VAR 0 4
60118: MINUS
60119: ST_TO_ADDR
// if y - r < 0 then
60120: LD_VAR 0 3
60124: PUSH
60125: LD_VAR 0 4
60129: MINUS
60130: PUSH
60131: LD_INT 0
60133: LESS
60134: IFFALSE 60146
// min_y := 0 else
60136: LD_ADDR_VAR 0 8
60140: PUSH
60141: LD_INT 0
60143: ST_TO_ADDR
60144: GO 60162
// min_y := y - r ;
60146: LD_ADDR_VAR 0 8
60150: PUSH
60151: LD_VAR 0 3
60155: PUSH
60156: LD_VAR 0 4
60160: MINUS
60161: ST_TO_ADDR
// max_x := x + r ;
60162: LD_ADDR_VAR 0 9
60166: PUSH
60167: LD_VAR 0 2
60171: PUSH
60172: LD_VAR 0 4
60176: PLUS
60177: ST_TO_ADDR
// max_y := y + r ;
60178: LD_ADDR_VAR 0 10
60182: PUSH
60183: LD_VAR 0 3
60187: PUSH
60188: LD_VAR 0 4
60192: PLUS
60193: ST_TO_ADDR
// for _x = min_x to max_x do
60194: LD_ADDR_VAR 0 11
60198: PUSH
60199: DOUBLE
60200: LD_VAR 0 7
60204: DEC
60205: ST_TO_ADDR
60206: LD_VAR 0 9
60210: PUSH
60211: FOR_TO
60212: IFFALSE 60329
// for _y = min_y to max_y do
60214: LD_ADDR_VAR 0 12
60218: PUSH
60219: DOUBLE
60220: LD_VAR 0 8
60224: DEC
60225: ST_TO_ADDR
60226: LD_VAR 0 10
60230: PUSH
60231: FOR_TO
60232: IFFALSE 60325
// begin if not ValidHex ( _x , _y ) then
60234: LD_VAR 0 11
60238: PPUSH
60239: LD_VAR 0 12
60243: PPUSH
60244: CALL_OW 488
60248: NOT
60249: IFFALSE 60253
// continue ;
60251: GO 60231
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
60253: LD_VAR 0 11
60257: PPUSH
60258: LD_VAR 0 12
60262: PPUSH
60263: CALL_OW 351
60267: PUSH
60268: LD_VAR 0 11
60272: PPUSH
60273: LD_VAR 0 12
60277: PPUSH
60278: CALL_OW 554
60282: AND
60283: IFFALSE 60323
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60285: LD_ADDR_VAR 0 13
60289: PUSH
60290: LD_VAR 0 13
60294: PPUSH
60295: LD_VAR 0 13
60299: PUSH
60300: LD_INT 1
60302: PLUS
60303: PPUSH
60304: LD_VAR 0 11
60308: PUSH
60309: LD_VAR 0 12
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PPUSH
60318: CALL_OW 2
60322: ST_TO_ADDR
// end ;
60323: GO 60231
60325: POP
60326: POP
60327: GO 60211
60329: POP
60330: POP
// if not list then
60331: LD_VAR 0 13
60335: NOT
60336: IFFALSE 60340
// exit ;
60338: GO 60419
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
60340: LD_ADDR_VAR 0 13
60344: PUSH
60345: LD_VAR 0 1
60349: PPUSH
60350: LD_VAR 0 13
60354: PPUSH
60355: LD_INT 1
60357: PPUSH
60358: LD_INT 1
60360: PPUSH
60361: CALL 21909 0 4
60365: ST_TO_ADDR
// ComStop ( flame ) ;
60366: LD_VAR 0 1
60370: PPUSH
60371: CALL_OW 141
// for i in list do
60375: LD_ADDR_VAR 0 6
60379: PUSH
60380: LD_VAR 0 13
60384: PUSH
60385: FOR_IN
60386: IFFALSE 60417
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
60388: LD_VAR 0 1
60392: PPUSH
60393: LD_VAR 0 6
60397: PUSH
60398: LD_INT 1
60400: ARRAY
60401: PPUSH
60402: LD_VAR 0 6
60406: PUSH
60407: LD_INT 2
60409: ARRAY
60410: PPUSH
60411: CALL_OW 176
60415: GO 60385
60417: POP
60418: POP
// end ;
60419: LD_VAR 0 5
60423: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
60424: LD_EXP 36
60428: NOT
60429: IFFALSE 60479
60431: GO 60433
60433: DISABLE
// begin initHack := true ;
60434: LD_ADDR_EXP 36
60438: PUSH
60439: LD_INT 1
60441: ST_TO_ADDR
// hackTanks := [ ] ;
60442: LD_ADDR_EXP 37
60446: PUSH
60447: EMPTY
60448: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
60449: LD_ADDR_EXP 38
60453: PUSH
60454: EMPTY
60455: ST_TO_ADDR
// hackLimit := 3 ;
60456: LD_ADDR_EXP 39
60460: PUSH
60461: LD_INT 3
60463: ST_TO_ADDR
// hackDist := 12 ;
60464: LD_ADDR_EXP 40
60468: PUSH
60469: LD_INT 12
60471: ST_TO_ADDR
// hackCounter := [ ] ;
60472: LD_ADDR_EXP 41
60476: PUSH
60477: EMPTY
60478: ST_TO_ADDR
// end ;
60479: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
60480: LD_EXP 36
60484: PUSH
60485: LD_INT 34
60487: PUSH
60488: LD_INT 99
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PPUSH
60495: CALL_OW 69
60499: AND
60500: IFFALSE 60753
60502: GO 60504
60504: DISABLE
60505: LD_INT 0
60507: PPUSH
60508: PPUSH
// begin enable ;
60509: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
60510: LD_ADDR_VAR 0 1
60514: PUSH
60515: LD_INT 34
60517: PUSH
60518: LD_INT 99
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PPUSH
60525: CALL_OW 69
60529: PUSH
60530: FOR_IN
60531: IFFALSE 60751
// begin if not i in hackTanks then
60533: LD_VAR 0 1
60537: PUSH
60538: LD_EXP 37
60542: IN
60543: NOT
60544: IFFALSE 60627
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
60546: LD_ADDR_EXP 37
60550: PUSH
60551: LD_EXP 37
60555: PPUSH
60556: LD_EXP 37
60560: PUSH
60561: LD_INT 1
60563: PLUS
60564: PPUSH
60565: LD_VAR 0 1
60569: PPUSH
60570: CALL_OW 1
60574: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
60575: LD_ADDR_EXP 38
60579: PUSH
60580: LD_EXP 38
60584: PPUSH
60585: LD_EXP 38
60589: PUSH
60590: LD_INT 1
60592: PLUS
60593: PPUSH
60594: EMPTY
60595: PPUSH
60596: CALL_OW 1
60600: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
60601: LD_ADDR_EXP 41
60605: PUSH
60606: LD_EXP 41
60610: PPUSH
60611: LD_EXP 41
60615: PUSH
60616: LD_INT 1
60618: PLUS
60619: PPUSH
60620: EMPTY
60621: PPUSH
60622: CALL_OW 1
60626: ST_TO_ADDR
// end ; if not IsOk ( i ) then
60627: LD_VAR 0 1
60631: PPUSH
60632: CALL_OW 302
60636: NOT
60637: IFFALSE 60650
// begin HackUnlinkAll ( i ) ;
60639: LD_VAR 0 1
60643: PPUSH
60644: CALL 60756 0 1
// continue ;
60648: GO 60530
// end ; HackCheckCapturedStatus ( i ) ;
60650: LD_VAR 0 1
60654: PPUSH
60655: CALL 61199 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
60659: LD_ADDR_VAR 0 2
60663: PUSH
60664: LD_INT 81
60666: PUSH
60667: LD_VAR 0 1
60671: PPUSH
60672: CALL_OW 255
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 33
60683: PUSH
60684: LD_INT 3
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 91
60693: PUSH
60694: LD_VAR 0 1
60698: PUSH
60699: LD_EXP 40
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 50
60711: PUSH
60712: EMPTY
60713: LIST
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: PPUSH
60721: CALL_OW 69
60725: ST_TO_ADDR
// if not tmp then
60726: LD_VAR 0 2
60730: NOT
60731: IFFALSE 60735
// continue ;
60733: GO 60530
// HackLink ( i , tmp ) ;
60735: LD_VAR 0 1
60739: PPUSH
60740: LD_VAR 0 2
60744: PPUSH
60745: CALL 60892 0 2
// end ;
60749: GO 60530
60751: POP
60752: POP
// end ;
60753: PPOPN 2
60755: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
60756: LD_INT 0
60758: PPUSH
60759: PPUSH
60760: PPUSH
// if not hack in hackTanks then
60761: LD_VAR 0 1
60765: PUSH
60766: LD_EXP 37
60770: IN
60771: NOT
60772: IFFALSE 60776
// exit ;
60774: GO 60887
// index := GetElementIndex ( hackTanks , hack ) ;
60776: LD_ADDR_VAR 0 4
60780: PUSH
60781: LD_EXP 37
60785: PPUSH
60786: LD_VAR 0 1
60790: PPUSH
60791: CALL 21206 0 2
60795: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
60796: LD_EXP 38
60800: PUSH
60801: LD_VAR 0 4
60805: ARRAY
60806: IFFALSE 60887
// begin for i in hackTanksCaptured [ index ] do
60808: LD_ADDR_VAR 0 3
60812: PUSH
60813: LD_EXP 38
60817: PUSH
60818: LD_VAR 0 4
60822: ARRAY
60823: PUSH
60824: FOR_IN
60825: IFFALSE 60851
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
60827: LD_VAR 0 3
60831: PUSH
60832: LD_INT 1
60834: ARRAY
60835: PPUSH
60836: LD_VAR 0 3
60840: PUSH
60841: LD_INT 2
60843: ARRAY
60844: PPUSH
60845: CALL_OW 235
60849: GO 60824
60851: POP
60852: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
60853: LD_ADDR_EXP 38
60857: PUSH
60858: LD_EXP 38
60862: PPUSH
60863: LD_VAR 0 4
60867: PPUSH
60868: EMPTY
60869: PPUSH
60870: CALL_OW 1
60874: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
60875: LD_VAR 0 1
60879: PPUSH
60880: LD_INT 0
60882: PPUSH
60883: CALL_OW 505
// end ; end ;
60887: LD_VAR 0 2
60891: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
60892: LD_INT 0
60894: PPUSH
60895: PPUSH
60896: PPUSH
// if not hack in hackTanks or not vehicles then
60897: LD_VAR 0 1
60901: PUSH
60902: LD_EXP 37
60906: IN
60907: NOT
60908: PUSH
60909: LD_VAR 0 2
60913: NOT
60914: OR
60915: IFFALSE 60919
// exit ;
60917: GO 61194
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
60919: LD_ADDR_VAR 0 2
60923: PUSH
60924: LD_VAR 0 1
60928: PPUSH
60929: LD_VAR 0 2
60933: PPUSH
60934: LD_INT 1
60936: PPUSH
60937: LD_INT 1
60939: PPUSH
60940: CALL 21856 0 4
60944: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
60945: LD_ADDR_VAR 0 5
60949: PUSH
60950: LD_EXP 37
60954: PPUSH
60955: LD_VAR 0 1
60959: PPUSH
60960: CALL 21206 0 2
60964: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
60965: LD_EXP 38
60969: PUSH
60970: LD_VAR 0 5
60974: ARRAY
60975: PUSH
60976: LD_EXP 39
60980: LESS
60981: IFFALSE 61170
// begin for i := 1 to vehicles do
60983: LD_ADDR_VAR 0 4
60987: PUSH
60988: DOUBLE
60989: LD_INT 1
60991: DEC
60992: ST_TO_ADDR
60993: LD_VAR 0 2
60997: PUSH
60998: FOR_TO
60999: IFFALSE 61168
// begin if hackTanksCaptured [ index ] = hackLimit then
61001: LD_EXP 38
61005: PUSH
61006: LD_VAR 0 5
61010: ARRAY
61011: PUSH
61012: LD_EXP 39
61016: EQUAL
61017: IFFALSE 61021
// break ;
61019: GO 61168
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
61021: LD_ADDR_EXP 41
61025: PUSH
61026: LD_EXP 41
61030: PPUSH
61031: LD_VAR 0 5
61035: PPUSH
61036: LD_EXP 41
61040: PUSH
61041: LD_VAR 0 5
61045: ARRAY
61046: PUSH
61047: LD_INT 1
61049: PLUS
61050: PPUSH
61051: CALL_OW 1
61055: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
61056: LD_ADDR_EXP 38
61060: PUSH
61061: LD_EXP 38
61065: PPUSH
61066: LD_VAR 0 5
61070: PUSH
61071: LD_EXP 38
61075: PUSH
61076: LD_VAR 0 5
61080: ARRAY
61081: PUSH
61082: LD_INT 1
61084: PLUS
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PPUSH
61090: LD_VAR 0 2
61094: PUSH
61095: LD_VAR 0 4
61099: ARRAY
61100: PUSH
61101: LD_VAR 0 2
61105: PUSH
61106: LD_VAR 0 4
61110: ARRAY
61111: PPUSH
61112: CALL_OW 255
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PPUSH
61121: CALL 21421 0 3
61125: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
61126: LD_VAR 0 2
61130: PUSH
61131: LD_VAR 0 4
61135: ARRAY
61136: PPUSH
61137: LD_VAR 0 1
61141: PPUSH
61142: CALL_OW 255
61146: PPUSH
61147: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
61151: LD_VAR 0 2
61155: PUSH
61156: LD_VAR 0 4
61160: ARRAY
61161: PPUSH
61162: CALL_OW 141
// end ;
61166: GO 60998
61168: POP
61169: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
61170: LD_VAR 0 1
61174: PPUSH
61175: LD_EXP 38
61179: PUSH
61180: LD_VAR 0 5
61184: ARRAY
61185: PUSH
61186: LD_INT 0
61188: PLUS
61189: PPUSH
61190: CALL_OW 505
// end ;
61194: LD_VAR 0 3
61198: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
61199: LD_INT 0
61201: PPUSH
61202: PPUSH
61203: PPUSH
61204: PPUSH
// if not hack in hackTanks then
61205: LD_VAR 0 1
61209: PUSH
61210: LD_EXP 37
61214: IN
61215: NOT
61216: IFFALSE 61220
// exit ;
61218: GO 61460
// index := GetElementIndex ( hackTanks , hack ) ;
61220: LD_ADDR_VAR 0 4
61224: PUSH
61225: LD_EXP 37
61229: PPUSH
61230: LD_VAR 0 1
61234: PPUSH
61235: CALL 21206 0 2
61239: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
61240: LD_ADDR_VAR 0 3
61244: PUSH
61245: DOUBLE
61246: LD_EXP 38
61250: PUSH
61251: LD_VAR 0 4
61255: ARRAY
61256: INC
61257: ST_TO_ADDR
61258: LD_INT 1
61260: PUSH
61261: FOR_DOWNTO
61262: IFFALSE 61434
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
61264: LD_ADDR_VAR 0 5
61268: PUSH
61269: LD_EXP 38
61273: PUSH
61274: LD_VAR 0 4
61278: ARRAY
61279: PUSH
61280: LD_VAR 0 3
61284: ARRAY
61285: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
61286: LD_VAR 0 5
61290: PUSH
61291: LD_INT 1
61293: ARRAY
61294: PPUSH
61295: CALL_OW 302
61299: NOT
61300: PUSH
61301: LD_VAR 0 5
61305: PUSH
61306: LD_INT 1
61308: ARRAY
61309: PPUSH
61310: CALL_OW 255
61314: PUSH
61315: LD_VAR 0 1
61319: PPUSH
61320: CALL_OW 255
61324: NONEQUAL
61325: OR
61326: IFFALSE 61432
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
61328: LD_VAR 0 5
61332: PUSH
61333: LD_INT 1
61335: ARRAY
61336: PPUSH
61337: CALL_OW 305
61341: PUSH
61342: LD_VAR 0 5
61346: PUSH
61347: LD_INT 1
61349: ARRAY
61350: PPUSH
61351: CALL_OW 255
61355: PUSH
61356: LD_VAR 0 1
61360: PPUSH
61361: CALL_OW 255
61365: EQUAL
61366: AND
61367: IFFALSE 61391
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
61369: LD_VAR 0 5
61373: PUSH
61374: LD_INT 1
61376: ARRAY
61377: PPUSH
61378: LD_VAR 0 5
61382: PUSH
61383: LD_INT 2
61385: ARRAY
61386: PPUSH
61387: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
61391: LD_ADDR_EXP 38
61395: PUSH
61396: LD_EXP 38
61400: PPUSH
61401: LD_VAR 0 4
61405: PPUSH
61406: LD_EXP 38
61410: PUSH
61411: LD_VAR 0 4
61415: ARRAY
61416: PPUSH
61417: LD_VAR 0 3
61421: PPUSH
61422: CALL_OW 3
61426: PPUSH
61427: CALL_OW 1
61431: ST_TO_ADDR
// end ; end ;
61432: GO 61261
61434: POP
61435: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
61436: LD_VAR 0 1
61440: PPUSH
61441: LD_EXP 38
61445: PUSH
61446: LD_VAR 0 4
61450: ARRAY
61451: PUSH
61452: LD_INT 0
61454: PLUS
61455: PPUSH
61456: CALL_OW 505
// end ;
61460: LD_VAR 0 2
61464: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
61465: LD_INT 0
61467: PPUSH
61468: PPUSH
61469: PPUSH
61470: PPUSH
// if not hack in hackTanks then
61471: LD_VAR 0 1
61475: PUSH
61476: LD_EXP 37
61480: IN
61481: NOT
61482: IFFALSE 61486
// exit ;
61484: GO 61571
// index := GetElementIndex ( hackTanks , hack ) ;
61486: LD_ADDR_VAR 0 5
61490: PUSH
61491: LD_EXP 37
61495: PPUSH
61496: LD_VAR 0 1
61500: PPUSH
61501: CALL 21206 0 2
61505: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
61506: LD_ADDR_VAR 0 4
61510: PUSH
61511: DOUBLE
61512: LD_INT 1
61514: DEC
61515: ST_TO_ADDR
61516: LD_EXP 38
61520: PUSH
61521: LD_VAR 0 5
61525: ARRAY
61526: PUSH
61527: FOR_TO
61528: IFFALSE 61569
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
61530: LD_EXP 38
61534: PUSH
61535: LD_VAR 0 5
61539: ARRAY
61540: PUSH
61541: LD_VAR 0 4
61545: ARRAY
61546: PUSH
61547: LD_INT 1
61549: ARRAY
61550: PUSH
61551: LD_VAR 0 2
61555: EQUAL
61556: IFFALSE 61567
// KillUnit ( vehicle ) ;
61558: LD_VAR 0 2
61562: PPUSH
61563: CALL_OW 66
61567: GO 61527
61569: POP
61570: POP
// end ;
61571: LD_VAR 0 3
61575: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
61576: LD_EXP 42
61580: NOT
61581: IFFALSE 61616
61583: GO 61585
61585: DISABLE
// begin initMiner := true ;
61586: LD_ADDR_EXP 42
61590: PUSH
61591: LD_INT 1
61593: ST_TO_ADDR
// minersList := [ ] ;
61594: LD_ADDR_EXP 43
61598: PUSH
61599: EMPTY
61600: ST_TO_ADDR
// minerMinesList := [ ] ;
61601: LD_ADDR_EXP 44
61605: PUSH
61606: EMPTY
61607: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
61608: LD_ADDR_EXP 45
61612: PUSH
61613: LD_INT 5
61615: ST_TO_ADDR
// end ;
61616: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
61617: LD_EXP 42
61621: PUSH
61622: LD_INT 34
61624: PUSH
61625: LD_INT 81
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PPUSH
61632: CALL_OW 69
61636: AND
61637: IFFALSE 62098
61639: GO 61641
61641: DISABLE
61642: LD_INT 0
61644: PPUSH
61645: PPUSH
61646: PPUSH
61647: PPUSH
// begin enable ;
61648: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
61649: LD_ADDR_VAR 0 1
61653: PUSH
61654: LD_INT 34
61656: PUSH
61657: LD_INT 81
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PPUSH
61664: CALL_OW 69
61668: PUSH
61669: FOR_IN
61670: IFFALSE 61742
// begin if not i in minersList then
61672: LD_VAR 0 1
61676: PUSH
61677: LD_EXP 43
61681: IN
61682: NOT
61683: IFFALSE 61740
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
61685: LD_ADDR_EXP 43
61689: PUSH
61690: LD_EXP 43
61694: PPUSH
61695: LD_EXP 43
61699: PUSH
61700: LD_INT 1
61702: PLUS
61703: PPUSH
61704: LD_VAR 0 1
61708: PPUSH
61709: CALL_OW 1
61713: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
61714: LD_ADDR_EXP 44
61718: PUSH
61719: LD_EXP 44
61723: PPUSH
61724: LD_EXP 44
61728: PUSH
61729: LD_INT 1
61731: PLUS
61732: PPUSH
61733: EMPTY
61734: PPUSH
61735: CALL_OW 1
61739: ST_TO_ADDR
// end end ;
61740: GO 61669
61742: POP
61743: POP
// for i := minerMinesList downto 1 do
61744: LD_ADDR_VAR 0 1
61748: PUSH
61749: DOUBLE
61750: LD_EXP 44
61754: INC
61755: ST_TO_ADDR
61756: LD_INT 1
61758: PUSH
61759: FOR_DOWNTO
61760: IFFALSE 62096
// begin if IsLive ( minersList [ i ] ) then
61762: LD_EXP 43
61766: PUSH
61767: LD_VAR 0 1
61771: ARRAY
61772: PPUSH
61773: CALL_OW 300
61777: IFFALSE 61805
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
61779: LD_EXP 43
61783: PUSH
61784: LD_VAR 0 1
61788: ARRAY
61789: PPUSH
61790: LD_EXP 44
61794: PUSH
61795: LD_VAR 0 1
61799: ARRAY
61800: PPUSH
61801: CALL_OW 505
// if not minerMinesList [ i ] then
61805: LD_EXP 44
61809: PUSH
61810: LD_VAR 0 1
61814: ARRAY
61815: NOT
61816: IFFALSE 61820
// continue ;
61818: GO 61759
// for j := minerMinesList [ i ] downto 1 do
61820: LD_ADDR_VAR 0 2
61824: PUSH
61825: DOUBLE
61826: LD_EXP 44
61830: PUSH
61831: LD_VAR 0 1
61835: ARRAY
61836: INC
61837: ST_TO_ADDR
61838: LD_INT 1
61840: PUSH
61841: FOR_DOWNTO
61842: IFFALSE 62092
// begin side := GetSide ( minersList [ i ] ) ;
61844: LD_ADDR_VAR 0 3
61848: PUSH
61849: LD_EXP 43
61853: PUSH
61854: LD_VAR 0 1
61858: ARRAY
61859: PPUSH
61860: CALL_OW 255
61864: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
61865: LD_ADDR_VAR 0 4
61869: PUSH
61870: LD_EXP 44
61874: PUSH
61875: LD_VAR 0 1
61879: ARRAY
61880: PUSH
61881: LD_VAR 0 2
61885: ARRAY
61886: PUSH
61887: LD_INT 1
61889: ARRAY
61890: PPUSH
61891: LD_EXP 44
61895: PUSH
61896: LD_VAR 0 1
61900: ARRAY
61901: PUSH
61902: LD_VAR 0 2
61906: ARRAY
61907: PUSH
61908: LD_INT 2
61910: ARRAY
61911: PPUSH
61912: CALL_OW 428
61916: ST_TO_ADDR
// if not tmp then
61917: LD_VAR 0 4
61921: NOT
61922: IFFALSE 61926
// continue ;
61924: GO 61841
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
61926: LD_VAR 0 4
61930: PUSH
61931: LD_INT 81
61933: PUSH
61934: LD_VAR 0 3
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PPUSH
61943: CALL_OW 69
61947: IN
61948: PUSH
61949: LD_EXP 44
61953: PUSH
61954: LD_VAR 0 1
61958: ARRAY
61959: PUSH
61960: LD_VAR 0 2
61964: ARRAY
61965: PUSH
61966: LD_INT 1
61968: ARRAY
61969: PPUSH
61970: LD_EXP 44
61974: PUSH
61975: LD_VAR 0 1
61979: ARRAY
61980: PUSH
61981: LD_VAR 0 2
61985: ARRAY
61986: PUSH
61987: LD_INT 2
61989: ARRAY
61990: PPUSH
61991: CALL_OW 458
61995: AND
61996: IFFALSE 62090
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
61998: LD_EXP 44
62002: PUSH
62003: LD_VAR 0 1
62007: ARRAY
62008: PUSH
62009: LD_VAR 0 2
62013: ARRAY
62014: PUSH
62015: LD_INT 1
62017: ARRAY
62018: PPUSH
62019: LD_EXP 44
62023: PUSH
62024: LD_VAR 0 1
62028: ARRAY
62029: PUSH
62030: LD_VAR 0 2
62034: ARRAY
62035: PUSH
62036: LD_INT 2
62038: ARRAY
62039: PPUSH
62040: LD_VAR 0 3
62044: PPUSH
62045: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
62049: LD_ADDR_EXP 44
62053: PUSH
62054: LD_EXP 44
62058: PPUSH
62059: LD_VAR 0 1
62063: PPUSH
62064: LD_EXP 44
62068: PUSH
62069: LD_VAR 0 1
62073: ARRAY
62074: PPUSH
62075: LD_VAR 0 2
62079: PPUSH
62080: CALL_OW 3
62084: PPUSH
62085: CALL_OW 1
62089: ST_TO_ADDR
// end ; end ;
62090: GO 61841
62092: POP
62093: POP
// end ;
62094: GO 61759
62096: POP
62097: POP
// end ;
62098: PPOPN 4
62100: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
62101: LD_INT 0
62103: PPUSH
62104: PPUSH
// result := false ;
62105: LD_ADDR_VAR 0 4
62109: PUSH
62110: LD_INT 0
62112: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
62113: LD_VAR 0 1
62117: PPUSH
62118: CALL_OW 264
62122: PUSH
62123: LD_INT 81
62125: EQUAL
62126: NOT
62127: IFFALSE 62131
// exit ;
62129: GO 62371
// index := GetElementIndex ( minersList , unit ) ;
62131: LD_ADDR_VAR 0 5
62135: PUSH
62136: LD_EXP 43
62140: PPUSH
62141: LD_VAR 0 1
62145: PPUSH
62146: CALL 21206 0 2
62150: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
62151: LD_EXP 44
62155: PUSH
62156: LD_VAR 0 5
62160: ARRAY
62161: PUSH
62162: LD_EXP 45
62166: GREATEREQUAL
62167: IFFALSE 62171
// exit ;
62169: GO 62371
// ComMoveXY ( unit , x , y ) ;
62171: LD_VAR 0 1
62175: PPUSH
62176: LD_VAR 0 2
62180: PPUSH
62181: LD_VAR 0 3
62185: PPUSH
62186: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62190: LD_INT 35
62192: PPUSH
62193: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
62197: LD_VAR 0 1
62201: PPUSH
62202: LD_VAR 0 2
62206: PPUSH
62207: LD_VAR 0 3
62211: PPUSH
62212: CALL 52958 0 3
62216: NOT
62217: PUSH
62218: LD_VAR 0 1
62222: PPUSH
62223: CALL_OW 314
62227: AND
62228: IFFALSE 62232
// exit ;
62230: GO 62371
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
62232: LD_VAR 0 2
62236: PPUSH
62237: LD_VAR 0 3
62241: PPUSH
62242: CALL_OW 428
62246: PUSH
62247: LD_VAR 0 1
62251: EQUAL
62252: PUSH
62253: LD_VAR 0 1
62257: PPUSH
62258: CALL_OW 314
62262: NOT
62263: AND
62264: IFFALSE 62190
// PlaySoundXY ( x , y , PlantMine ) ;
62266: LD_VAR 0 2
62270: PPUSH
62271: LD_VAR 0 3
62275: PPUSH
62276: LD_STRING PlantMine
62278: PPUSH
62279: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
62283: LD_VAR 0 2
62287: PPUSH
62288: LD_VAR 0 3
62292: PPUSH
62293: LD_VAR 0 1
62297: PPUSH
62298: CALL_OW 255
62302: PPUSH
62303: LD_INT 0
62305: PPUSH
62306: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
62310: LD_ADDR_EXP 44
62314: PUSH
62315: LD_EXP 44
62319: PPUSH
62320: LD_VAR 0 5
62324: PUSH
62325: LD_EXP 44
62329: PUSH
62330: LD_VAR 0 5
62334: ARRAY
62335: PUSH
62336: LD_INT 1
62338: PLUS
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PPUSH
62344: LD_VAR 0 2
62348: PUSH
62349: LD_VAR 0 3
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PPUSH
62358: CALL 21421 0 3
62362: ST_TO_ADDR
// result := true ;
62363: LD_ADDR_VAR 0 4
62367: PUSH
62368: LD_INT 1
62370: ST_TO_ADDR
// end ;
62371: LD_VAR 0 4
62375: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
62376: LD_INT 0
62378: PPUSH
62379: PPUSH
62380: PPUSH
// if not unit in minersList then
62381: LD_VAR 0 1
62385: PUSH
62386: LD_EXP 43
62390: IN
62391: NOT
62392: IFFALSE 62396
// exit ;
62394: GO 62788
// index := GetElementIndex ( minersList , unit ) ;
62396: LD_ADDR_VAR 0 6
62400: PUSH
62401: LD_EXP 43
62405: PPUSH
62406: LD_VAR 0 1
62410: PPUSH
62411: CALL 21206 0 2
62415: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
62416: LD_ADDR_VAR 0 5
62420: PUSH
62421: DOUBLE
62422: LD_EXP 44
62426: PUSH
62427: LD_VAR 0 6
62431: ARRAY
62432: INC
62433: ST_TO_ADDR
62434: LD_INT 1
62436: PUSH
62437: FOR_DOWNTO
62438: IFFALSE 62599
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
62440: LD_EXP 44
62444: PUSH
62445: LD_VAR 0 6
62449: ARRAY
62450: PUSH
62451: LD_VAR 0 5
62455: ARRAY
62456: PUSH
62457: LD_INT 1
62459: ARRAY
62460: PUSH
62461: LD_VAR 0 2
62465: EQUAL
62466: PUSH
62467: LD_EXP 44
62471: PUSH
62472: LD_VAR 0 6
62476: ARRAY
62477: PUSH
62478: LD_VAR 0 5
62482: ARRAY
62483: PUSH
62484: LD_INT 2
62486: ARRAY
62487: PUSH
62488: LD_VAR 0 3
62492: EQUAL
62493: AND
62494: IFFALSE 62597
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
62496: LD_EXP 44
62500: PUSH
62501: LD_VAR 0 6
62505: ARRAY
62506: PUSH
62507: LD_VAR 0 5
62511: ARRAY
62512: PUSH
62513: LD_INT 1
62515: ARRAY
62516: PPUSH
62517: LD_EXP 44
62521: PUSH
62522: LD_VAR 0 6
62526: ARRAY
62527: PUSH
62528: LD_VAR 0 5
62532: ARRAY
62533: PUSH
62534: LD_INT 2
62536: ARRAY
62537: PPUSH
62538: LD_VAR 0 1
62542: PPUSH
62543: CALL_OW 255
62547: PPUSH
62548: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
62552: LD_ADDR_EXP 44
62556: PUSH
62557: LD_EXP 44
62561: PPUSH
62562: LD_VAR 0 6
62566: PPUSH
62567: LD_EXP 44
62571: PUSH
62572: LD_VAR 0 6
62576: ARRAY
62577: PPUSH
62578: LD_VAR 0 5
62582: PPUSH
62583: CALL_OW 3
62587: PPUSH
62588: CALL_OW 1
62592: ST_TO_ADDR
// exit ;
62593: POP
62594: POP
62595: GO 62788
// end ; end ;
62597: GO 62437
62599: POP
62600: POP
// for i := minerMinesList [ index ] downto 1 do
62601: LD_ADDR_VAR 0 5
62605: PUSH
62606: DOUBLE
62607: LD_EXP 44
62611: PUSH
62612: LD_VAR 0 6
62616: ARRAY
62617: INC
62618: ST_TO_ADDR
62619: LD_INT 1
62621: PUSH
62622: FOR_DOWNTO
62623: IFFALSE 62786
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
62625: LD_EXP 44
62629: PUSH
62630: LD_VAR 0 6
62634: ARRAY
62635: PUSH
62636: LD_VAR 0 5
62640: ARRAY
62641: PUSH
62642: LD_INT 1
62644: ARRAY
62645: PPUSH
62646: LD_EXP 44
62650: PUSH
62651: LD_VAR 0 6
62655: ARRAY
62656: PUSH
62657: LD_VAR 0 5
62661: ARRAY
62662: PUSH
62663: LD_INT 2
62665: ARRAY
62666: PPUSH
62667: LD_VAR 0 2
62671: PPUSH
62672: LD_VAR 0 3
62676: PPUSH
62677: CALL_OW 298
62681: PUSH
62682: LD_INT 6
62684: LESS
62685: IFFALSE 62784
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
62687: LD_EXP 44
62691: PUSH
62692: LD_VAR 0 6
62696: ARRAY
62697: PUSH
62698: LD_VAR 0 5
62702: ARRAY
62703: PUSH
62704: LD_INT 1
62706: ARRAY
62707: PPUSH
62708: LD_EXP 44
62712: PUSH
62713: LD_VAR 0 6
62717: ARRAY
62718: PUSH
62719: LD_VAR 0 5
62723: ARRAY
62724: PUSH
62725: LD_INT 2
62727: ARRAY
62728: PPUSH
62729: LD_VAR 0 1
62733: PPUSH
62734: CALL_OW 255
62738: PPUSH
62739: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
62743: LD_ADDR_EXP 44
62747: PUSH
62748: LD_EXP 44
62752: PPUSH
62753: LD_VAR 0 6
62757: PPUSH
62758: LD_EXP 44
62762: PUSH
62763: LD_VAR 0 6
62767: ARRAY
62768: PPUSH
62769: LD_VAR 0 5
62773: PPUSH
62774: CALL_OW 3
62778: PPUSH
62779: CALL_OW 1
62783: ST_TO_ADDR
// end ; end ;
62784: GO 62622
62786: POP
62787: POP
// end ;
62788: LD_VAR 0 4
62792: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
62793: LD_INT 0
62795: PPUSH
62796: PPUSH
62797: PPUSH
62798: PPUSH
62799: PPUSH
62800: PPUSH
62801: PPUSH
62802: PPUSH
62803: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
62804: LD_VAR 0 1
62808: PPUSH
62809: CALL_OW 264
62813: PUSH
62814: LD_INT 81
62816: EQUAL
62817: NOT
62818: PUSH
62819: LD_VAR 0 1
62823: PUSH
62824: LD_EXP 43
62828: IN
62829: NOT
62830: OR
62831: IFFALSE 62835
// exit ;
62833: GO 63157
// index := GetElementIndex ( minersList , unit ) ;
62835: LD_ADDR_VAR 0 6
62839: PUSH
62840: LD_EXP 43
62844: PPUSH
62845: LD_VAR 0 1
62849: PPUSH
62850: CALL 21206 0 2
62854: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
62855: LD_ADDR_VAR 0 8
62859: PUSH
62860: LD_EXP 45
62864: PUSH
62865: LD_EXP 44
62869: PUSH
62870: LD_VAR 0 6
62874: ARRAY
62875: MINUS
62876: ST_TO_ADDR
// if not minesFreeAmount then
62877: LD_VAR 0 8
62881: NOT
62882: IFFALSE 62886
// exit ;
62884: GO 63157
// tmp := [ ] ;
62886: LD_ADDR_VAR 0 7
62890: PUSH
62891: EMPTY
62892: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
62893: LD_ADDR_VAR 0 5
62897: PUSH
62898: DOUBLE
62899: LD_INT 1
62901: DEC
62902: ST_TO_ADDR
62903: LD_VAR 0 8
62907: PUSH
62908: FOR_TO
62909: IFFALSE 63104
// begin _d := rand ( 0 , 5 ) ;
62911: LD_ADDR_VAR 0 11
62915: PUSH
62916: LD_INT 0
62918: PPUSH
62919: LD_INT 5
62921: PPUSH
62922: CALL_OW 12
62926: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
62927: LD_ADDR_VAR 0 12
62931: PUSH
62932: LD_INT 2
62934: PPUSH
62935: LD_INT 6
62937: PPUSH
62938: CALL_OW 12
62942: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
62943: LD_ADDR_VAR 0 9
62947: PUSH
62948: LD_VAR 0 2
62952: PPUSH
62953: LD_VAR 0 11
62957: PPUSH
62958: LD_VAR 0 12
62962: PPUSH
62963: CALL_OW 272
62967: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
62968: LD_ADDR_VAR 0 10
62972: PUSH
62973: LD_VAR 0 3
62977: PPUSH
62978: LD_VAR 0 11
62982: PPUSH
62983: LD_VAR 0 12
62987: PPUSH
62988: CALL_OW 273
62992: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
62993: LD_VAR 0 9
62997: PPUSH
62998: LD_VAR 0 10
63002: PPUSH
63003: CALL_OW 488
63007: PUSH
63008: LD_VAR 0 9
63012: PUSH
63013: LD_VAR 0 10
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_VAR 0 7
63026: IN
63027: NOT
63028: AND
63029: PUSH
63030: LD_VAR 0 9
63034: PPUSH
63035: LD_VAR 0 10
63039: PPUSH
63040: CALL_OW 458
63044: NOT
63045: AND
63046: IFFALSE 63088
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
63048: LD_ADDR_VAR 0 7
63052: PUSH
63053: LD_VAR 0 7
63057: PPUSH
63058: LD_VAR 0 7
63062: PUSH
63063: LD_INT 1
63065: PLUS
63066: PPUSH
63067: LD_VAR 0 9
63071: PUSH
63072: LD_VAR 0 10
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PPUSH
63081: CALL_OW 1
63085: ST_TO_ADDR
63086: GO 63102
// i := i - 1 ;
63088: LD_ADDR_VAR 0 5
63092: PUSH
63093: LD_VAR 0 5
63097: PUSH
63098: LD_INT 1
63100: MINUS
63101: ST_TO_ADDR
// end ;
63102: GO 62908
63104: POP
63105: POP
// for i in tmp do
63106: LD_ADDR_VAR 0 5
63110: PUSH
63111: LD_VAR 0 7
63115: PUSH
63116: FOR_IN
63117: IFFALSE 63155
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
63119: LD_VAR 0 1
63123: PPUSH
63124: LD_VAR 0 5
63128: PUSH
63129: LD_INT 1
63131: ARRAY
63132: PPUSH
63133: LD_VAR 0 5
63137: PUSH
63138: LD_INT 2
63140: ARRAY
63141: PPUSH
63142: CALL 62101 0 3
63146: NOT
63147: IFFALSE 63153
// exit ;
63149: POP
63150: POP
63151: GO 63157
63153: GO 63116
63155: POP
63156: POP
// end ;
63157: LD_VAR 0 4
63161: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
63162: LD_INT 0
63164: PPUSH
63165: PPUSH
63166: PPUSH
63167: PPUSH
63168: PPUSH
63169: PPUSH
63170: PPUSH
// if not GetClass ( unit ) = class_sniper then
63171: LD_VAR 0 1
63175: PPUSH
63176: CALL_OW 257
63180: PUSH
63181: LD_INT 5
63183: EQUAL
63184: NOT
63185: IFFALSE 63189
// exit ;
63187: GO 63577
// dist := 8 ;
63189: LD_ADDR_VAR 0 5
63193: PUSH
63194: LD_INT 8
63196: ST_TO_ADDR
// viewRange := 12 ;
63197: LD_ADDR_VAR 0 7
63201: PUSH
63202: LD_INT 12
63204: ST_TO_ADDR
// side := GetSide ( unit ) ;
63205: LD_ADDR_VAR 0 6
63209: PUSH
63210: LD_VAR 0 1
63214: PPUSH
63215: CALL_OW 255
63219: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
63220: LD_INT 61
63222: PPUSH
63223: LD_VAR 0 6
63227: PPUSH
63228: CALL_OW 321
63232: PUSH
63233: LD_INT 2
63235: EQUAL
63236: IFFALSE 63246
// viewRange := 16 ;
63238: LD_ADDR_VAR 0 7
63242: PUSH
63243: LD_INT 16
63245: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
63246: LD_VAR 0 1
63250: PPUSH
63251: LD_VAR 0 2
63255: PPUSH
63256: LD_VAR 0 3
63260: PPUSH
63261: CALL_OW 297
63265: PUSH
63266: LD_VAR 0 5
63270: GREATER
63271: IFFALSE 63350
// begin ComMoveXY ( unit , x , y ) ;
63273: LD_VAR 0 1
63277: PPUSH
63278: LD_VAR 0 2
63282: PPUSH
63283: LD_VAR 0 3
63287: PPUSH
63288: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63292: LD_INT 35
63294: PPUSH
63295: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
63299: LD_VAR 0 1
63303: PPUSH
63304: LD_VAR 0 2
63308: PPUSH
63309: LD_VAR 0 3
63313: PPUSH
63314: CALL 52958 0 3
63318: NOT
63319: IFFALSE 63323
// exit ;
63321: GO 63577
// until GetDistUnitXY ( unit , x , y ) < dist ;
63323: LD_VAR 0 1
63327: PPUSH
63328: LD_VAR 0 2
63332: PPUSH
63333: LD_VAR 0 3
63337: PPUSH
63338: CALL_OW 297
63342: PUSH
63343: LD_VAR 0 5
63347: LESS
63348: IFFALSE 63292
// end ; ComTurnXY ( unit , x , y ) ;
63350: LD_VAR 0 1
63354: PPUSH
63355: LD_VAR 0 2
63359: PPUSH
63360: LD_VAR 0 3
63364: PPUSH
63365: CALL_OW 118
// wait ( 5 ) ;
63369: LD_INT 5
63371: PPUSH
63372: CALL_OW 67
// _d := GetDir ( unit ) ;
63376: LD_ADDR_VAR 0 10
63380: PUSH
63381: LD_VAR 0 1
63385: PPUSH
63386: CALL_OW 254
63390: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
63391: LD_ADDR_VAR 0 8
63395: PUSH
63396: LD_VAR 0 1
63400: PPUSH
63401: CALL_OW 250
63405: PPUSH
63406: LD_VAR 0 10
63410: PPUSH
63411: LD_VAR 0 5
63415: PPUSH
63416: CALL_OW 272
63420: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
63421: LD_ADDR_VAR 0 9
63425: PUSH
63426: LD_VAR 0 1
63430: PPUSH
63431: CALL_OW 251
63435: PPUSH
63436: LD_VAR 0 10
63440: PPUSH
63441: LD_VAR 0 5
63445: PPUSH
63446: CALL_OW 273
63450: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63451: LD_VAR 0 8
63455: PPUSH
63456: LD_VAR 0 9
63460: PPUSH
63461: CALL_OW 488
63465: NOT
63466: IFFALSE 63470
// exit ;
63468: GO 63577
// ComAnimCustom ( unit , 1 ) ;
63470: LD_VAR 0 1
63474: PPUSH
63475: LD_INT 1
63477: PPUSH
63478: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
63482: LD_VAR 0 8
63486: PPUSH
63487: LD_VAR 0 9
63491: PPUSH
63492: LD_VAR 0 6
63496: PPUSH
63497: LD_VAR 0 7
63501: PPUSH
63502: CALL_OW 330
// repeat wait ( 1 ) ;
63506: LD_INT 1
63508: PPUSH
63509: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
63513: LD_VAR 0 1
63517: PPUSH
63518: CALL_OW 316
63522: PUSH
63523: LD_VAR 0 1
63527: PPUSH
63528: CALL_OW 314
63532: OR
63533: PUSH
63534: LD_VAR 0 1
63538: PPUSH
63539: CALL_OW 302
63543: NOT
63544: OR
63545: PUSH
63546: LD_VAR 0 1
63550: PPUSH
63551: CALL_OW 301
63555: OR
63556: IFFALSE 63506
// RemoveSeeing ( _x , _y , side ) ;
63558: LD_VAR 0 8
63562: PPUSH
63563: LD_VAR 0 9
63567: PPUSH
63568: LD_VAR 0 6
63572: PPUSH
63573: CALL_OW 331
// end ; end_of_file
63577: LD_VAR 0 4
63581: RET
// export globalGameSaveCounter ; every 0 0$1 do
63582: GO 63584
63584: DISABLE
// begin enable ;
63585: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63586: LD_STRING updateTimer(
63588: PUSH
63589: LD_OWVAR 1
63593: STR
63594: PUSH
63595: LD_STRING );
63597: STR
63598: PPUSH
63599: CALL_OW 559
// end ;
63603: END
// every 0 0$1 do
63604: GO 63606
63606: DISABLE
// begin globalGameSaveCounter := 0 ;
63607: LD_ADDR_EXP 46
63611: PUSH
63612: LD_INT 0
63614: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
63615: LD_STRING setGameSaveCounter(0)
63617: PPUSH
63618: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
63622: LD_STRING initStreamRollete();
63624: PPUSH
63625: CALL_OW 559
// InitStreamMode ;
63629: CALL 64955 0 0
// DefineStreamItems ( false ) ;
63633: LD_INT 0
63635: PPUSH
63636: CALL 65419 0 1
// end ;
63640: END
// export function SOS_MapStart ( ) ; begin
63641: LD_INT 0
63643: PPUSH
// if streamModeActive then
63644: LD_EXP 47
63648: IFFALSE 63657
// DefineStreamItems ( true ) ;
63650: LD_INT 1
63652: PPUSH
63653: CALL 65419 0 1
// UpdateLuaVariables ( ) ;
63657: CALL 63674 0 0
// UpdateFactoryWaypoints ( ) ;
63661: CALL 78288 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63665: CALL 78545 0 0
// end ;
63669: LD_VAR 0 1
63673: RET
// function UpdateLuaVariables ( ) ; begin
63674: LD_INT 0
63676: PPUSH
// if globalGameSaveCounter then
63677: LD_EXP 46
63681: IFFALSE 63715
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
63683: LD_ADDR_EXP 46
63687: PUSH
63688: LD_EXP 46
63692: PPUSH
63693: CALL 55522 0 1
63697: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
63698: LD_STRING setGameSaveCounter(
63700: PUSH
63701: LD_EXP 46
63705: STR
63706: PUSH
63707: LD_STRING )
63709: STR
63710: PPUSH
63711: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63715: LD_STRING setGameDifficulty(
63717: PUSH
63718: LD_OWVAR 67
63722: STR
63723: PUSH
63724: LD_STRING )
63726: STR
63727: PPUSH
63728: CALL_OW 559
// end ;
63732: LD_VAR 0 1
63736: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63737: LD_INT 0
63739: PPUSH
// if p2 = stream_mode then
63740: LD_VAR 0 2
63744: PUSH
63745: LD_INT 100
63747: EQUAL
63748: IFFALSE 64751
// begin if not StreamModeActive then
63750: LD_EXP 47
63754: NOT
63755: IFFALSE 63765
// StreamModeActive := true ;
63757: LD_ADDR_EXP 47
63761: PUSH
63762: LD_INT 1
63764: ST_TO_ADDR
// if p3 = 0 then
63765: LD_VAR 0 3
63769: PUSH
63770: LD_INT 0
63772: EQUAL
63773: IFFALSE 63779
// InitStreamMode ;
63775: CALL 64955 0 0
// if p3 = 1 then
63779: LD_VAR 0 3
63783: PUSH
63784: LD_INT 1
63786: EQUAL
63787: IFFALSE 63797
// sRocket := true ;
63789: LD_ADDR_EXP 52
63793: PUSH
63794: LD_INT 1
63796: ST_TO_ADDR
// if p3 = 2 then
63797: LD_VAR 0 3
63801: PUSH
63802: LD_INT 2
63804: EQUAL
63805: IFFALSE 63815
// sSpeed := true ;
63807: LD_ADDR_EXP 51
63811: PUSH
63812: LD_INT 1
63814: ST_TO_ADDR
// if p3 = 3 then
63815: LD_VAR 0 3
63819: PUSH
63820: LD_INT 3
63822: EQUAL
63823: IFFALSE 63833
// sEngine := true ;
63825: LD_ADDR_EXP 53
63829: PUSH
63830: LD_INT 1
63832: ST_TO_ADDR
// if p3 = 4 then
63833: LD_VAR 0 3
63837: PUSH
63838: LD_INT 4
63840: EQUAL
63841: IFFALSE 63851
// sSpec := true ;
63843: LD_ADDR_EXP 50
63847: PUSH
63848: LD_INT 1
63850: ST_TO_ADDR
// if p3 = 5 then
63851: LD_VAR 0 3
63855: PUSH
63856: LD_INT 5
63858: EQUAL
63859: IFFALSE 63869
// sLevel := true ;
63861: LD_ADDR_EXP 54
63865: PUSH
63866: LD_INT 1
63868: ST_TO_ADDR
// if p3 = 6 then
63869: LD_VAR 0 3
63873: PUSH
63874: LD_INT 6
63876: EQUAL
63877: IFFALSE 63887
// sArmoury := true ;
63879: LD_ADDR_EXP 55
63883: PUSH
63884: LD_INT 1
63886: ST_TO_ADDR
// if p3 = 7 then
63887: LD_VAR 0 3
63891: PUSH
63892: LD_INT 7
63894: EQUAL
63895: IFFALSE 63905
// sRadar := true ;
63897: LD_ADDR_EXP 56
63901: PUSH
63902: LD_INT 1
63904: ST_TO_ADDR
// if p3 = 8 then
63905: LD_VAR 0 3
63909: PUSH
63910: LD_INT 8
63912: EQUAL
63913: IFFALSE 63923
// sBunker := true ;
63915: LD_ADDR_EXP 57
63919: PUSH
63920: LD_INT 1
63922: ST_TO_ADDR
// if p3 = 9 then
63923: LD_VAR 0 3
63927: PUSH
63928: LD_INT 9
63930: EQUAL
63931: IFFALSE 63941
// sHack := true ;
63933: LD_ADDR_EXP 58
63937: PUSH
63938: LD_INT 1
63940: ST_TO_ADDR
// if p3 = 10 then
63941: LD_VAR 0 3
63945: PUSH
63946: LD_INT 10
63948: EQUAL
63949: IFFALSE 63959
// sFire := true ;
63951: LD_ADDR_EXP 59
63955: PUSH
63956: LD_INT 1
63958: ST_TO_ADDR
// if p3 = 11 then
63959: LD_VAR 0 3
63963: PUSH
63964: LD_INT 11
63966: EQUAL
63967: IFFALSE 63977
// sRefresh := true ;
63969: LD_ADDR_EXP 60
63973: PUSH
63974: LD_INT 1
63976: ST_TO_ADDR
// if p3 = 12 then
63977: LD_VAR 0 3
63981: PUSH
63982: LD_INT 12
63984: EQUAL
63985: IFFALSE 63995
// sExp := true ;
63987: LD_ADDR_EXP 61
63991: PUSH
63992: LD_INT 1
63994: ST_TO_ADDR
// if p3 = 13 then
63995: LD_VAR 0 3
63999: PUSH
64000: LD_INT 13
64002: EQUAL
64003: IFFALSE 64013
// sDepot := true ;
64005: LD_ADDR_EXP 62
64009: PUSH
64010: LD_INT 1
64012: ST_TO_ADDR
// if p3 = 14 then
64013: LD_VAR 0 3
64017: PUSH
64018: LD_INT 14
64020: EQUAL
64021: IFFALSE 64031
// sFlag := true ;
64023: LD_ADDR_EXP 63
64027: PUSH
64028: LD_INT 1
64030: ST_TO_ADDR
// if p3 = 15 then
64031: LD_VAR 0 3
64035: PUSH
64036: LD_INT 15
64038: EQUAL
64039: IFFALSE 64049
// sKamikadze := true ;
64041: LD_ADDR_EXP 71
64045: PUSH
64046: LD_INT 1
64048: ST_TO_ADDR
// if p3 = 16 then
64049: LD_VAR 0 3
64053: PUSH
64054: LD_INT 16
64056: EQUAL
64057: IFFALSE 64067
// sTroll := true ;
64059: LD_ADDR_EXP 72
64063: PUSH
64064: LD_INT 1
64066: ST_TO_ADDR
// if p3 = 17 then
64067: LD_VAR 0 3
64071: PUSH
64072: LD_INT 17
64074: EQUAL
64075: IFFALSE 64085
// sSlow := true ;
64077: LD_ADDR_EXP 73
64081: PUSH
64082: LD_INT 1
64084: ST_TO_ADDR
// if p3 = 18 then
64085: LD_VAR 0 3
64089: PUSH
64090: LD_INT 18
64092: EQUAL
64093: IFFALSE 64103
// sLack := true ;
64095: LD_ADDR_EXP 74
64099: PUSH
64100: LD_INT 1
64102: ST_TO_ADDR
// if p3 = 19 then
64103: LD_VAR 0 3
64107: PUSH
64108: LD_INT 19
64110: EQUAL
64111: IFFALSE 64121
// sTank := true ;
64113: LD_ADDR_EXP 76
64117: PUSH
64118: LD_INT 1
64120: ST_TO_ADDR
// if p3 = 20 then
64121: LD_VAR 0 3
64125: PUSH
64126: LD_INT 20
64128: EQUAL
64129: IFFALSE 64139
// sRemote := true ;
64131: LD_ADDR_EXP 77
64135: PUSH
64136: LD_INT 1
64138: ST_TO_ADDR
// if p3 = 21 then
64139: LD_VAR 0 3
64143: PUSH
64144: LD_INT 21
64146: EQUAL
64147: IFFALSE 64157
// sPowell := true ;
64149: LD_ADDR_EXP 78
64153: PUSH
64154: LD_INT 1
64156: ST_TO_ADDR
// if p3 = 22 then
64157: LD_VAR 0 3
64161: PUSH
64162: LD_INT 22
64164: EQUAL
64165: IFFALSE 64175
// sTeleport := true ;
64167: LD_ADDR_EXP 81
64171: PUSH
64172: LD_INT 1
64174: ST_TO_ADDR
// if p3 = 23 then
64175: LD_VAR 0 3
64179: PUSH
64180: LD_INT 23
64182: EQUAL
64183: IFFALSE 64193
// sOilTower := true ;
64185: LD_ADDR_EXP 83
64189: PUSH
64190: LD_INT 1
64192: ST_TO_ADDR
// if p3 = 24 then
64193: LD_VAR 0 3
64197: PUSH
64198: LD_INT 24
64200: EQUAL
64201: IFFALSE 64211
// sShovel := true ;
64203: LD_ADDR_EXP 84
64207: PUSH
64208: LD_INT 1
64210: ST_TO_ADDR
// if p3 = 25 then
64211: LD_VAR 0 3
64215: PUSH
64216: LD_INT 25
64218: EQUAL
64219: IFFALSE 64229
// sSheik := true ;
64221: LD_ADDR_EXP 85
64225: PUSH
64226: LD_INT 1
64228: ST_TO_ADDR
// if p3 = 26 then
64229: LD_VAR 0 3
64233: PUSH
64234: LD_INT 26
64236: EQUAL
64237: IFFALSE 64247
// sEarthquake := true ;
64239: LD_ADDR_EXP 87
64243: PUSH
64244: LD_INT 1
64246: ST_TO_ADDR
// if p3 = 27 then
64247: LD_VAR 0 3
64251: PUSH
64252: LD_INT 27
64254: EQUAL
64255: IFFALSE 64265
// sAI := true ;
64257: LD_ADDR_EXP 88
64261: PUSH
64262: LD_INT 1
64264: ST_TO_ADDR
// if p3 = 28 then
64265: LD_VAR 0 3
64269: PUSH
64270: LD_INT 28
64272: EQUAL
64273: IFFALSE 64283
// sCargo := true ;
64275: LD_ADDR_EXP 91
64279: PUSH
64280: LD_INT 1
64282: ST_TO_ADDR
// if p3 = 29 then
64283: LD_VAR 0 3
64287: PUSH
64288: LD_INT 29
64290: EQUAL
64291: IFFALSE 64301
// sDLaser := true ;
64293: LD_ADDR_EXP 92
64297: PUSH
64298: LD_INT 1
64300: ST_TO_ADDR
// if p3 = 30 then
64301: LD_VAR 0 3
64305: PUSH
64306: LD_INT 30
64308: EQUAL
64309: IFFALSE 64319
// sExchange := true ;
64311: LD_ADDR_EXP 93
64315: PUSH
64316: LD_INT 1
64318: ST_TO_ADDR
// if p3 = 31 then
64319: LD_VAR 0 3
64323: PUSH
64324: LD_INT 31
64326: EQUAL
64327: IFFALSE 64337
// sFac := true ;
64329: LD_ADDR_EXP 94
64333: PUSH
64334: LD_INT 1
64336: ST_TO_ADDR
// if p3 = 32 then
64337: LD_VAR 0 3
64341: PUSH
64342: LD_INT 32
64344: EQUAL
64345: IFFALSE 64355
// sPower := true ;
64347: LD_ADDR_EXP 95
64351: PUSH
64352: LD_INT 1
64354: ST_TO_ADDR
// if p3 = 33 then
64355: LD_VAR 0 3
64359: PUSH
64360: LD_INT 33
64362: EQUAL
64363: IFFALSE 64373
// sRandom := true ;
64365: LD_ADDR_EXP 96
64369: PUSH
64370: LD_INT 1
64372: ST_TO_ADDR
// if p3 = 34 then
64373: LD_VAR 0 3
64377: PUSH
64378: LD_INT 34
64380: EQUAL
64381: IFFALSE 64391
// sShield := true ;
64383: LD_ADDR_EXP 97
64387: PUSH
64388: LD_INT 1
64390: ST_TO_ADDR
// if p3 = 35 then
64391: LD_VAR 0 3
64395: PUSH
64396: LD_INT 35
64398: EQUAL
64399: IFFALSE 64409
// sTime := true ;
64401: LD_ADDR_EXP 98
64405: PUSH
64406: LD_INT 1
64408: ST_TO_ADDR
// if p3 = 36 then
64409: LD_VAR 0 3
64413: PUSH
64414: LD_INT 36
64416: EQUAL
64417: IFFALSE 64427
// sTools := true ;
64419: LD_ADDR_EXP 99
64423: PUSH
64424: LD_INT 1
64426: ST_TO_ADDR
// if p3 = 101 then
64427: LD_VAR 0 3
64431: PUSH
64432: LD_INT 101
64434: EQUAL
64435: IFFALSE 64445
// sSold := true ;
64437: LD_ADDR_EXP 64
64441: PUSH
64442: LD_INT 1
64444: ST_TO_ADDR
// if p3 = 102 then
64445: LD_VAR 0 3
64449: PUSH
64450: LD_INT 102
64452: EQUAL
64453: IFFALSE 64463
// sDiff := true ;
64455: LD_ADDR_EXP 65
64459: PUSH
64460: LD_INT 1
64462: ST_TO_ADDR
// if p3 = 103 then
64463: LD_VAR 0 3
64467: PUSH
64468: LD_INT 103
64470: EQUAL
64471: IFFALSE 64481
// sFog := true ;
64473: LD_ADDR_EXP 68
64477: PUSH
64478: LD_INT 1
64480: ST_TO_ADDR
// if p3 = 104 then
64481: LD_VAR 0 3
64485: PUSH
64486: LD_INT 104
64488: EQUAL
64489: IFFALSE 64499
// sReset := true ;
64491: LD_ADDR_EXP 69
64495: PUSH
64496: LD_INT 1
64498: ST_TO_ADDR
// if p3 = 105 then
64499: LD_VAR 0 3
64503: PUSH
64504: LD_INT 105
64506: EQUAL
64507: IFFALSE 64517
// sSun := true ;
64509: LD_ADDR_EXP 70
64513: PUSH
64514: LD_INT 1
64516: ST_TO_ADDR
// if p3 = 106 then
64517: LD_VAR 0 3
64521: PUSH
64522: LD_INT 106
64524: EQUAL
64525: IFFALSE 64535
// sTiger := true ;
64527: LD_ADDR_EXP 66
64531: PUSH
64532: LD_INT 1
64534: ST_TO_ADDR
// if p3 = 107 then
64535: LD_VAR 0 3
64539: PUSH
64540: LD_INT 107
64542: EQUAL
64543: IFFALSE 64553
// sBomb := true ;
64545: LD_ADDR_EXP 67
64549: PUSH
64550: LD_INT 1
64552: ST_TO_ADDR
// if p3 = 108 then
64553: LD_VAR 0 3
64557: PUSH
64558: LD_INT 108
64560: EQUAL
64561: IFFALSE 64571
// sWound := true ;
64563: LD_ADDR_EXP 75
64567: PUSH
64568: LD_INT 1
64570: ST_TO_ADDR
// if p3 = 109 then
64571: LD_VAR 0 3
64575: PUSH
64576: LD_INT 109
64578: EQUAL
64579: IFFALSE 64589
// sBetray := true ;
64581: LD_ADDR_EXP 79
64585: PUSH
64586: LD_INT 1
64588: ST_TO_ADDR
// if p3 = 110 then
64589: LD_VAR 0 3
64593: PUSH
64594: LD_INT 110
64596: EQUAL
64597: IFFALSE 64607
// sContamin := true ;
64599: LD_ADDR_EXP 80
64603: PUSH
64604: LD_INT 1
64606: ST_TO_ADDR
// if p3 = 111 then
64607: LD_VAR 0 3
64611: PUSH
64612: LD_INT 111
64614: EQUAL
64615: IFFALSE 64625
// sOil := true ;
64617: LD_ADDR_EXP 82
64621: PUSH
64622: LD_INT 1
64624: ST_TO_ADDR
// if p3 = 112 then
64625: LD_VAR 0 3
64629: PUSH
64630: LD_INT 112
64632: EQUAL
64633: IFFALSE 64643
// sStu := true ;
64635: LD_ADDR_EXP 86
64639: PUSH
64640: LD_INT 1
64642: ST_TO_ADDR
// if p3 = 113 then
64643: LD_VAR 0 3
64647: PUSH
64648: LD_INT 113
64650: EQUAL
64651: IFFALSE 64661
// sBazooka := true ;
64653: LD_ADDR_EXP 89
64657: PUSH
64658: LD_INT 1
64660: ST_TO_ADDR
// if p3 = 114 then
64661: LD_VAR 0 3
64665: PUSH
64666: LD_INT 114
64668: EQUAL
64669: IFFALSE 64679
// sMortar := true ;
64671: LD_ADDR_EXP 90
64675: PUSH
64676: LD_INT 1
64678: ST_TO_ADDR
// if p3 = 115 then
64679: LD_VAR 0 3
64683: PUSH
64684: LD_INT 115
64686: EQUAL
64687: IFFALSE 64697
// sRanger := true ;
64689: LD_ADDR_EXP 100
64693: PUSH
64694: LD_INT 1
64696: ST_TO_ADDR
// if p3 = 116 then
64697: LD_VAR 0 3
64701: PUSH
64702: LD_INT 116
64704: EQUAL
64705: IFFALSE 64715
// sComputer := true ;
64707: LD_ADDR_EXP 101
64711: PUSH
64712: LD_INT 1
64714: ST_TO_ADDR
// if p3 = 117 then
64715: LD_VAR 0 3
64719: PUSH
64720: LD_INT 117
64722: EQUAL
64723: IFFALSE 64733
// s30 := true ;
64725: LD_ADDR_EXP 102
64729: PUSH
64730: LD_INT 1
64732: ST_TO_ADDR
// if p3 = 118 then
64733: LD_VAR 0 3
64737: PUSH
64738: LD_INT 118
64740: EQUAL
64741: IFFALSE 64751
// s60 := true ;
64743: LD_ADDR_EXP 103
64747: PUSH
64748: LD_INT 1
64750: ST_TO_ADDR
// end ; if p2 = hack_mode then
64751: LD_VAR 0 2
64755: PUSH
64756: LD_INT 101
64758: EQUAL
64759: IFFALSE 64887
// begin case p3 of 1 :
64761: LD_VAR 0 3
64765: PUSH
64766: LD_INT 1
64768: DOUBLE
64769: EQUAL
64770: IFTRUE 64774
64772: GO 64781
64774: POP
// hHackUnlimitedResources ; 2 :
64775: CALL 77034 0 0
64779: GO 64887
64781: LD_INT 2
64783: DOUBLE
64784: EQUAL
64785: IFTRUE 64789
64787: GO 64796
64789: POP
// hHackSetLevel10 ; 3 :
64790: CALL 77167 0 0
64794: GO 64887
64796: LD_INT 3
64798: DOUBLE
64799: EQUAL
64800: IFTRUE 64804
64802: GO 64811
64804: POP
// hHackSetLevel10YourUnits ; 4 :
64805: CALL 77252 0 0
64809: GO 64887
64811: LD_INT 4
64813: DOUBLE
64814: EQUAL
64815: IFTRUE 64819
64817: GO 64826
64819: POP
// hHackInvincible ; 5 :
64820: CALL 77700 0 0
64824: GO 64887
64826: LD_INT 5
64828: DOUBLE
64829: EQUAL
64830: IFTRUE 64834
64832: GO 64841
64834: POP
// hHackInvisible ; 6 :
64835: CALL 77811 0 0
64839: GO 64887
64841: LD_INT 6
64843: DOUBLE
64844: EQUAL
64845: IFTRUE 64849
64847: GO 64856
64849: POP
// hHackChangeYourSide ; 7 :
64850: CALL 77868 0 0
64854: GO 64887
64856: LD_INT 7
64858: DOUBLE
64859: EQUAL
64860: IFTRUE 64864
64862: GO 64871
64864: POP
// hHackChangeUnitSide ; 8 :
64865: CALL 77910 0 0
64869: GO 64887
64871: LD_INT 8
64873: DOUBLE
64874: EQUAL
64875: IFTRUE 64879
64877: GO 64886
64879: POP
// hHackFog ; end ;
64880: CALL 78011 0 0
64884: GO 64887
64886: POP
// end ; if p2 = game_save_mode then
64887: LD_VAR 0 2
64891: PUSH
64892: LD_INT 102
64894: EQUAL
64895: IFFALSE 64950
// begin if p3 = 1 then
64897: LD_VAR 0 3
64901: PUSH
64902: LD_INT 1
64904: EQUAL
64905: IFFALSE 64917
// globalGameSaveCounter := p4 ;
64907: LD_ADDR_EXP 46
64911: PUSH
64912: LD_VAR 0 4
64916: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
64917: LD_VAR 0 3
64921: PUSH
64922: LD_INT 2
64924: EQUAL
64925: PUSH
64926: LD_EXP 46
64930: AND
64931: IFFALSE 64950
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
64933: LD_STRING setGameSaveCounter(
64935: PUSH
64936: LD_EXP 46
64940: STR
64941: PUSH
64942: LD_STRING )
64944: STR
64945: PPUSH
64946: CALL_OW 559
// end ; end ;
64950: LD_VAR 0 7
64954: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
64955: LD_INT 0
64957: PPUSH
// streamModeActive := false ;
64958: LD_ADDR_EXP 47
64962: PUSH
64963: LD_INT 0
64965: ST_TO_ADDR
// normalCounter := 36 ;
64966: LD_ADDR_EXP 48
64970: PUSH
64971: LD_INT 36
64973: ST_TO_ADDR
// hardcoreCounter := 18 ;
64974: LD_ADDR_EXP 49
64978: PUSH
64979: LD_INT 18
64981: ST_TO_ADDR
// sRocket := false ;
64982: LD_ADDR_EXP 52
64986: PUSH
64987: LD_INT 0
64989: ST_TO_ADDR
// sSpeed := false ;
64990: LD_ADDR_EXP 51
64994: PUSH
64995: LD_INT 0
64997: ST_TO_ADDR
// sEngine := false ;
64998: LD_ADDR_EXP 53
65002: PUSH
65003: LD_INT 0
65005: ST_TO_ADDR
// sSpec := false ;
65006: LD_ADDR_EXP 50
65010: PUSH
65011: LD_INT 0
65013: ST_TO_ADDR
// sLevel := false ;
65014: LD_ADDR_EXP 54
65018: PUSH
65019: LD_INT 0
65021: ST_TO_ADDR
// sArmoury := false ;
65022: LD_ADDR_EXP 55
65026: PUSH
65027: LD_INT 0
65029: ST_TO_ADDR
// sRadar := false ;
65030: LD_ADDR_EXP 56
65034: PUSH
65035: LD_INT 0
65037: ST_TO_ADDR
// sBunker := false ;
65038: LD_ADDR_EXP 57
65042: PUSH
65043: LD_INT 0
65045: ST_TO_ADDR
// sHack := false ;
65046: LD_ADDR_EXP 58
65050: PUSH
65051: LD_INT 0
65053: ST_TO_ADDR
// sFire := false ;
65054: LD_ADDR_EXP 59
65058: PUSH
65059: LD_INT 0
65061: ST_TO_ADDR
// sRefresh := false ;
65062: LD_ADDR_EXP 60
65066: PUSH
65067: LD_INT 0
65069: ST_TO_ADDR
// sExp := false ;
65070: LD_ADDR_EXP 61
65074: PUSH
65075: LD_INT 0
65077: ST_TO_ADDR
// sDepot := false ;
65078: LD_ADDR_EXP 62
65082: PUSH
65083: LD_INT 0
65085: ST_TO_ADDR
// sFlag := false ;
65086: LD_ADDR_EXP 63
65090: PUSH
65091: LD_INT 0
65093: ST_TO_ADDR
// sKamikadze := false ;
65094: LD_ADDR_EXP 71
65098: PUSH
65099: LD_INT 0
65101: ST_TO_ADDR
// sTroll := false ;
65102: LD_ADDR_EXP 72
65106: PUSH
65107: LD_INT 0
65109: ST_TO_ADDR
// sSlow := false ;
65110: LD_ADDR_EXP 73
65114: PUSH
65115: LD_INT 0
65117: ST_TO_ADDR
// sLack := false ;
65118: LD_ADDR_EXP 74
65122: PUSH
65123: LD_INT 0
65125: ST_TO_ADDR
// sTank := false ;
65126: LD_ADDR_EXP 76
65130: PUSH
65131: LD_INT 0
65133: ST_TO_ADDR
// sRemote := false ;
65134: LD_ADDR_EXP 77
65138: PUSH
65139: LD_INT 0
65141: ST_TO_ADDR
// sPowell := false ;
65142: LD_ADDR_EXP 78
65146: PUSH
65147: LD_INT 0
65149: ST_TO_ADDR
// sTeleport := false ;
65150: LD_ADDR_EXP 81
65154: PUSH
65155: LD_INT 0
65157: ST_TO_ADDR
// sOilTower := false ;
65158: LD_ADDR_EXP 83
65162: PUSH
65163: LD_INT 0
65165: ST_TO_ADDR
// sShovel := false ;
65166: LD_ADDR_EXP 84
65170: PUSH
65171: LD_INT 0
65173: ST_TO_ADDR
// sSheik := false ;
65174: LD_ADDR_EXP 85
65178: PUSH
65179: LD_INT 0
65181: ST_TO_ADDR
// sEarthquake := false ;
65182: LD_ADDR_EXP 87
65186: PUSH
65187: LD_INT 0
65189: ST_TO_ADDR
// sAI := false ;
65190: LD_ADDR_EXP 88
65194: PUSH
65195: LD_INT 0
65197: ST_TO_ADDR
// sCargo := false ;
65198: LD_ADDR_EXP 91
65202: PUSH
65203: LD_INT 0
65205: ST_TO_ADDR
// sDLaser := false ;
65206: LD_ADDR_EXP 92
65210: PUSH
65211: LD_INT 0
65213: ST_TO_ADDR
// sExchange := false ;
65214: LD_ADDR_EXP 93
65218: PUSH
65219: LD_INT 0
65221: ST_TO_ADDR
// sFac := false ;
65222: LD_ADDR_EXP 94
65226: PUSH
65227: LD_INT 0
65229: ST_TO_ADDR
// sPower := false ;
65230: LD_ADDR_EXP 95
65234: PUSH
65235: LD_INT 0
65237: ST_TO_ADDR
// sRandom := false ;
65238: LD_ADDR_EXP 96
65242: PUSH
65243: LD_INT 0
65245: ST_TO_ADDR
// sShield := false ;
65246: LD_ADDR_EXP 97
65250: PUSH
65251: LD_INT 0
65253: ST_TO_ADDR
// sTime := false ;
65254: LD_ADDR_EXP 98
65258: PUSH
65259: LD_INT 0
65261: ST_TO_ADDR
// sTools := false ;
65262: LD_ADDR_EXP 99
65266: PUSH
65267: LD_INT 0
65269: ST_TO_ADDR
// sSold := false ;
65270: LD_ADDR_EXP 64
65274: PUSH
65275: LD_INT 0
65277: ST_TO_ADDR
// sDiff := false ;
65278: LD_ADDR_EXP 65
65282: PUSH
65283: LD_INT 0
65285: ST_TO_ADDR
// sFog := false ;
65286: LD_ADDR_EXP 68
65290: PUSH
65291: LD_INT 0
65293: ST_TO_ADDR
// sReset := false ;
65294: LD_ADDR_EXP 69
65298: PUSH
65299: LD_INT 0
65301: ST_TO_ADDR
// sSun := false ;
65302: LD_ADDR_EXP 70
65306: PUSH
65307: LD_INT 0
65309: ST_TO_ADDR
// sTiger := false ;
65310: LD_ADDR_EXP 66
65314: PUSH
65315: LD_INT 0
65317: ST_TO_ADDR
// sBomb := false ;
65318: LD_ADDR_EXP 67
65322: PUSH
65323: LD_INT 0
65325: ST_TO_ADDR
// sWound := false ;
65326: LD_ADDR_EXP 75
65330: PUSH
65331: LD_INT 0
65333: ST_TO_ADDR
// sBetray := false ;
65334: LD_ADDR_EXP 79
65338: PUSH
65339: LD_INT 0
65341: ST_TO_ADDR
// sContamin := false ;
65342: LD_ADDR_EXP 80
65346: PUSH
65347: LD_INT 0
65349: ST_TO_ADDR
// sOil := false ;
65350: LD_ADDR_EXP 82
65354: PUSH
65355: LD_INT 0
65357: ST_TO_ADDR
// sStu := false ;
65358: LD_ADDR_EXP 86
65362: PUSH
65363: LD_INT 0
65365: ST_TO_ADDR
// sBazooka := false ;
65366: LD_ADDR_EXP 89
65370: PUSH
65371: LD_INT 0
65373: ST_TO_ADDR
// sMortar := false ;
65374: LD_ADDR_EXP 90
65378: PUSH
65379: LD_INT 0
65381: ST_TO_ADDR
// sRanger := false ;
65382: LD_ADDR_EXP 100
65386: PUSH
65387: LD_INT 0
65389: ST_TO_ADDR
// sComputer := false ;
65390: LD_ADDR_EXP 101
65394: PUSH
65395: LD_INT 0
65397: ST_TO_ADDR
// s30 := false ;
65398: LD_ADDR_EXP 102
65402: PUSH
65403: LD_INT 0
65405: ST_TO_ADDR
// s60 := false ;
65406: LD_ADDR_EXP 103
65410: PUSH
65411: LD_INT 0
65413: ST_TO_ADDR
// end ;
65414: LD_VAR 0 1
65418: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
65419: LD_INT 0
65421: PPUSH
65422: PPUSH
65423: PPUSH
65424: PPUSH
65425: PPUSH
65426: PPUSH
65427: PPUSH
// result := [ ] ;
65428: LD_ADDR_VAR 0 2
65432: PUSH
65433: EMPTY
65434: ST_TO_ADDR
// if campaign_id = 1 then
65435: LD_OWVAR 69
65439: PUSH
65440: LD_INT 1
65442: EQUAL
65443: IFFALSE 68609
// begin case mission_number of 1 :
65445: LD_OWVAR 70
65449: PUSH
65450: LD_INT 1
65452: DOUBLE
65453: EQUAL
65454: IFTRUE 65458
65456: GO 65534
65458: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
65459: LD_ADDR_VAR 0 2
65463: PUSH
65464: LD_INT 2
65466: PUSH
65467: LD_INT 4
65469: PUSH
65470: LD_INT 11
65472: PUSH
65473: LD_INT 12
65475: PUSH
65476: LD_INT 15
65478: PUSH
65479: LD_INT 16
65481: PUSH
65482: LD_INT 22
65484: PUSH
65485: LD_INT 23
65487: PUSH
65488: LD_INT 26
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 101
65504: PUSH
65505: LD_INT 102
65507: PUSH
65508: LD_INT 106
65510: PUSH
65511: LD_INT 116
65513: PUSH
65514: LD_INT 117
65516: PUSH
65517: LD_INT 118
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: LIST
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: ST_TO_ADDR
65532: GO 68607
65534: LD_INT 2
65536: DOUBLE
65537: EQUAL
65538: IFTRUE 65542
65540: GO 65626
65542: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
65543: LD_ADDR_VAR 0 2
65547: PUSH
65548: LD_INT 2
65550: PUSH
65551: LD_INT 4
65553: PUSH
65554: LD_INT 11
65556: PUSH
65557: LD_INT 12
65559: PUSH
65560: LD_INT 15
65562: PUSH
65563: LD_INT 16
65565: PUSH
65566: LD_INT 22
65568: PUSH
65569: LD_INT 23
65571: PUSH
65572: LD_INT 26
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: LIST
65584: LIST
65585: PUSH
65586: LD_INT 101
65588: PUSH
65589: LD_INT 102
65591: PUSH
65592: LD_INT 105
65594: PUSH
65595: LD_INT 106
65597: PUSH
65598: LD_INT 108
65600: PUSH
65601: LD_INT 116
65603: PUSH
65604: LD_INT 117
65606: PUSH
65607: LD_INT 118
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: ST_TO_ADDR
65624: GO 68607
65626: LD_INT 3
65628: DOUBLE
65629: EQUAL
65630: IFTRUE 65634
65632: GO 65722
65634: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
65635: LD_ADDR_VAR 0 2
65639: PUSH
65640: LD_INT 2
65642: PUSH
65643: LD_INT 4
65645: PUSH
65646: LD_INT 5
65648: PUSH
65649: LD_INT 11
65651: PUSH
65652: LD_INT 12
65654: PUSH
65655: LD_INT 15
65657: PUSH
65658: LD_INT 16
65660: PUSH
65661: LD_INT 22
65663: PUSH
65664: LD_INT 26
65666: PUSH
65667: LD_INT 36
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 101
65684: PUSH
65685: LD_INT 102
65687: PUSH
65688: LD_INT 105
65690: PUSH
65691: LD_INT 106
65693: PUSH
65694: LD_INT 108
65696: PUSH
65697: LD_INT 116
65699: PUSH
65700: LD_INT 117
65702: PUSH
65703: LD_INT 118
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: ST_TO_ADDR
65720: GO 68607
65722: LD_INT 4
65724: DOUBLE
65725: EQUAL
65726: IFTRUE 65730
65728: GO 65826
65730: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
65731: LD_ADDR_VAR 0 2
65735: PUSH
65736: LD_INT 2
65738: PUSH
65739: LD_INT 4
65741: PUSH
65742: LD_INT 5
65744: PUSH
65745: LD_INT 8
65747: PUSH
65748: LD_INT 11
65750: PUSH
65751: LD_INT 12
65753: PUSH
65754: LD_INT 15
65756: PUSH
65757: LD_INT 16
65759: PUSH
65760: LD_INT 22
65762: PUSH
65763: LD_INT 23
65765: PUSH
65766: LD_INT 26
65768: PUSH
65769: LD_INT 36
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 101
65788: PUSH
65789: LD_INT 102
65791: PUSH
65792: LD_INT 105
65794: PUSH
65795: LD_INT 106
65797: PUSH
65798: LD_INT 108
65800: PUSH
65801: LD_INT 116
65803: PUSH
65804: LD_INT 117
65806: PUSH
65807: LD_INT 118
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: ST_TO_ADDR
65824: GO 68607
65826: LD_INT 5
65828: DOUBLE
65829: EQUAL
65830: IFTRUE 65834
65832: GO 65946
65834: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
65835: LD_ADDR_VAR 0 2
65839: PUSH
65840: LD_INT 2
65842: PUSH
65843: LD_INT 4
65845: PUSH
65846: LD_INT 5
65848: PUSH
65849: LD_INT 6
65851: PUSH
65852: LD_INT 8
65854: PUSH
65855: LD_INT 11
65857: PUSH
65858: LD_INT 12
65860: PUSH
65861: LD_INT 15
65863: PUSH
65864: LD_INT 16
65866: PUSH
65867: LD_INT 22
65869: PUSH
65870: LD_INT 23
65872: PUSH
65873: LD_INT 25
65875: PUSH
65876: LD_INT 26
65878: PUSH
65879: LD_INT 36
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 101
65900: PUSH
65901: LD_INT 102
65903: PUSH
65904: LD_INT 105
65906: PUSH
65907: LD_INT 106
65909: PUSH
65910: LD_INT 108
65912: PUSH
65913: LD_INT 109
65915: PUSH
65916: LD_INT 112
65918: PUSH
65919: LD_INT 116
65921: PUSH
65922: LD_INT 117
65924: PUSH
65925: LD_INT 118
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: LIST
65932: LIST
65933: LIST
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: LIST
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: ST_TO_ADDR
65944: GO 68607
65946: LD_INT 6
65948: DOUBLE
65949: EQUAL
65950: IFTRUE 65954
65952: GO 66086
65954: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
65955: LD_ADDR_VAR 0 2
65959: PUSH
65960: LD_INT 2
65962: PUSH
65963: LD_INT 4
65965: PUSH
65966: LD_INT 5
65968: PUSH
65969: LD_INT 6
65971: PUSH
65972: LD_INT 8
65974: PUSH
65975: LD_INT 11
65977: PUSH
65978: LD_INT 12
65980: PUSH
65981: LD_INT 15
65983: PUSH
65984: LD_INT 16
65986: PUSH
65987: LD_INT 20
65989: PUSH
65990: LD_INT 21
65992: PUSH
65993: LD_INT 22
65995: PUSH
65996: LD_INT 23
65998: PUSH
65999: LD_INT 25
66001: PUSH
66002: LD_INT 26
66004: PUSH
66005: LD_INT 30
66007: PUSH
66008: LD_INT 31
66010: PUSH
66011: LD_INT 32
66013: PUSH
66014: LD_INT 36
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: LIST
66021: LIST
66022: LIST
66023: LIST
66024: LIST
66025: LIST
66026: LIST
66027: LIST
66028: LIST
66029: LIST
66030: LIST
66031: LIST
66032: LIST
66033: LIST
66034: LIST
66035: LIST
66036: LIST
66037: PUSH
66038: LD_INT 101
66040: PUSH
66041: LD_INT 102
66043: PUSH
66044: LD_INT 105
66046: PUSH
66047: LD_INT 106
66049: PUSH
66050: LD_INT 108
66052: PUSH
66053: LD_INT 109
66055: PUSH
66056: LD_INT 112
66058: PUSH
66059: LD_INT 116
66061: PUSH
66062: LD_INT 117
66064: PUSH
66065: LD_INT 118
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: LIST
66074: LIST
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: ST_TO_ADDR
66084: GO 68607
66086: LD_INT 7
66088: DOUBLE
66089: EQUAL
66090: IFTRUE 66094
66092: GO 66206
66094: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
66095: LD_ADDR_VAR 0 2
66099: PUSH
66100: LD_INT 2
66102: PUSH
66103: LD_INT 4
66105: PUSH
66106: LD_INT 5
66108: PUSH
66109: LD_INT 7
66111: PUSH
66112: LD_INT 11
66114: PUSH
66115: LD_INT 12
66117: PUSH
66118: LD_INT 15
66120: PUSH
66121: LD_INT 16
66123: PUSH
66124: LD_INT 20
66126: PUSH
66127: LD_INT 21
66129: PUSH
66130: LD_INT 22
66132: PUSH
66133: LD_INT 23
66135: PUSH
66136: LD_INT 25
66138: PUSH
66139: LD_INT 26
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 101
66160: PUSH
66161: LD_INT 102
66163: PUSH
66164: LD_INT 103
66166: PUSH
66167: LD_INT 105
66169: PUSH
66170: LD_INT 106
66172: PUSH
66173: LD_INT 108
66175: PUSH
66176: LD_INT 112
66178: PUSH
66179: LD_INT 116
66181: PUSH
66182: LD_INT 117
66184: PUSH
66185: LD_INT 118
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: ST_TO_ADDR
66204: GO 68607
66206: LD_INT 8
66208: DOUBLE
66209: EQUAL
66210: IFTRUE 66214
66212: GO 66354
66214: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
66215: LD_ADDR_VAR 0 2
66219: PUSH
66220: LD_INT 2
66222: PUSH
66223: LD_INT 4
66225: PUSH
66226: LD_INT 5
66228: PUSH
66229: LD_INT 6
66231: PUSH
66232: LD_INT 7
66234: PUSH
66235: LD_INT 8
66237: PUSH
66238: LD_INT 11
66240: PUSH
66241: LD_INT 12
66243: PUSH
66244: LD_INT 15
66246: PUSH
66247: LD_INT 16
66249: PUSH
66250: LD_INT 20
66252: PUSH
66253: LD_INT 21
66255: PUSH
66256: LD_INT 22
66258: PUSH
66259: LD_INT 23
66261: PUSH
66262: LD_INT 25
66264: PUSH
66265: LD_INT 26
66267: PUSH
66268: LD_INT 30
66270: PUSH
66271: LD_INT 31
66273: PUSH
66274: LD_INT 32
66276: PUSH
66277: LD_INT 36
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: LIST
66286: LIST
66287: LIST
66288: LIST
66289: LIST
66290: LIST
66291: LIST
66292: LIST
66293: LIST
66294: LIST
66295: LIST
66296: LIST
66297: LIST
66298: LIST
66299: LIST
66300: LIST
66301: PUSH
66302: LD_INT 101
66304: PUSH
66305: LD_INT 102
66307: PUSH
66308: LD_INT 103
66310: PUSH
66311: LD_INT 105
66313: PUSH
66314: LD_INT 106
66316: PUSH
66317: LD_INT 108
66319: PUSH
66320: LD_INT 109
66322: PUSH
66323: LD_INT 112
66325: PUSH
66326: LD_INT 116
66328: PUSH
66329: LD_INT 117
66331: PUSH
66332: LD_INT 118
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: ST_TO_ADDR
66352: GO 68607
66354: LD_INT 9
66356: DOUBLE
66357: EQUAL
66358: IFTRUE 66362
66360: GO 66510
66362: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
66363: LD_ADDR_VAR 0 2
66367: PUSH
66368: LD_INT 2
66370: PUSH
66371: LD_INT 4
66373: PUSH
66374: LD_INT 5
66376: PUSH
66377: LD_INT 6
66379: PUSH
66380: LD_INT 7
66382: PUSH
66383: LD_INT 8
66385: PUSH
66386: LD_INT 11
66388: PUSH
66389: LD_INT 12
66391: PUSH
66392: LD_INT 15
66394: PUSH
66395: LD_INT 16
66397: PUSH
66398: LD_INT 20
66400: PUSH
66401: LD_INT 21
66403: PUSH
66404: LD_INT 22
66406: PUSH
66407: LD_INT 23
66409: PUSH
66410: LD_INT 25
66412: PUSH
66413: LD_INT 26
66415: PUSH
66416: LD_INT 28
66418: PUSH
66419: LD_INT 30
66421: PUSH
66422: LD_INT 31
66424: PUSH
66425: LD_INT 32
66427: PUSH
66428: LD_INT 36
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: LIST
66446: LIST
66447: LIST
66448: LIST
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 101
66456: PUSH
66457: LD_INT 102
66459: PUSH
66460: LD_INT 103
66462: PUSH
66463: LD_INT 105
66465: PUSH
66466: LD_INT 106
66468: PUSH
66469: LD_INT 108
66471: PUSH
66472: LD_INT 109
66474: PUSH
66475: LD_INT 112
66477: PUSH
66478: LD_INT 114
66480: PUSH
66481: LD_INT 116
66483: PUSH
66484: LD_INT 117
66486: PUSH
66487: LD_INT 118
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: LIST
66494: LIST
66495: LIST
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: LIST
66501: LIST
66502: LIST
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: ST_TO_ADDR
66508: GO 68607
66510: LD_INT 10
66512: DOUBLE
66513: EQUAL
66514: IFTRUE 66518
66516: GO 66714
66518: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
66519: LD_ADDR_VAR 0 2
66523: PUSH
66524: LD_INT 2
66526: PUSH
66527: LD_INT 4
66529: PUSH
66530: LD_INT 5
66532: PUSH
66533: LD_INT 6
66535: PUSH
66536: LD_INT 7
66538: PUSH
66539: LD_INT 8
66541: PUSH
66542: LD_INT 9
66544: PUSH
66545: LD_INT 10
66547: PUSH
66548: LD_INT 11
66550: PUSH
66551: LD_INT 12
66553: PUSH
66554: LD_INT 13
66556: PUSH
66557: LD_INT 14
66559: PUSH
66560: LD_INT 15
66562: PUSH
66563: LD_INT 16
66565: PUSH
66566: LD_INT 17
66568: PUSH
66569: LD_INT 18
66571: PUSH
66572: LD_INT 19
66574: PUSH
66575: LD_INT 20
66577: PUSH
66578: LD_INT 21
66580: PUSH
66581: LD_INT 22
66583: PUSH
66584: LD_INT 23
66586: PUSH
66587: LD_INT 24
66589: PUSH
66590: LD_INT 25
66592: PUSH
66593: LD_INT 26
66595: PUSH
66596: LD_INT 28
66598: PUSH
66599: LD_INT 30
66601: PUSH
66602: LD_INT 31
66604: PUSH
66605: LD_INT 32
66607: PUSH
66608: LD_INT 36
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 101
66644: PUSH
66645: LD_INT 102
66647: PUSH
66648: LD_INT 103
66650: PUSH
66651: LD_INT 104
66653: PUSH
66654: LD_INT 105
66656: PUSH
66657: LD_INT 106
66659: PUSH
66660: LD_INT 107
66662: PUSH
66663: LD_INT 108
66665: PUSH
66666: LD_INT 109
66668: PUSH
66669: LD_INT 110
66671: PUSH
66672: LD_INT 111
66674: PUSH
66675: LD_INT 112
66677: PUSH
66678: LD_INT 114
66680: PUSH
66681: LD_INT 116
66683: PUSH
66684: LD_INT 117
66686: PUSH
66687: LD_INT 118
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: ST_TO_ADDR
66712: GO 68607
66714: LD_INT 11
66716: DOUBLE
66717: EQUAL
66718: IFTRUE 66722
66720: GO 66926
66722: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
66723: LD_ADDR_VAR 0 2
66727: PUSH
66728: LD_INT 2
66730: PUSH
66731: LD_INT 3
66733: PUSH
66734: LD_INT 4
66736: PUSH
66737: LD_INT 5
66739: PUSH
66740: LD_INT 6
66742: PUSH
66743: LD_INT 7
66745: PUSH
66746: LD_INT 8
66748: PUSH
66749: LD_INT 9
66751: PUSH
66752: LD_INT 10
66754: PUSH
66755: LD_INT 11
66757: PUSH
66758: LD_INT 12
66760: PUSH
66761: LD_INT 13
66763: PUSH
66764: LD_INT 14
66766: PUSH
66767: LD_INT 15
66769: PUSH
66770: LD_INT 16
66772: PUSH
66773: LD_INT 17
66775: PUSH
66776: LD_INT 18
66778: PUSH
66779: LD_INT 19
66781: PUSH
66782: LD_INT 20
66784: PUSH
66785: LD_INT 21
66787: PUSH
66788: LD_INT 22
66790: PUSH
66791: LD_INT 23
66793: PUSH
66794: LD_INT 24
66796: PUSH
66797: LD_INT 25
66799: PUSH
66800: LD_INT 26
66802: PUSH
66803: LD_INT 28
66805: PUSH
66806: LD_INT 30
66808: PUSH
66809: LD_INT 31
66811: PUSH
66812: LD_INT 32
66814: PUSH
66815: LD_INT 34
66817: PUSH
66818: LD_INT 36
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 101
66856: PUSH
66857: LD_INT 102
66859: PUSH
66860: LD_INT 103
66862: PUSH
66863: LD_INT 104
66865: PUSH
66866: LD_INT 105
66868: PUSH
66869: LD_INT 106
66871: PUSH
66872: LD_INT 107
66874: PUSH
66875: LD_INT 108
66877: PUSH
66878: LD_INT 109
66880: PUSH
66881: LD_INT 110
66883: PUSH
66884: LD_INT 111
66886: PUSH
66887: LD_INT 112
66889: PUSH
66890: LD_INT 114
66892: PUSH
66893: LD_INT 116
66895: PUSH
66896: LD_INT 117
66898: PUSH
66899: LD_INT 118
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: LIST
66906: LIST
66907: LIST
66908: LIST
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: LIST
66914: LIST
66915: LIST
66916: LIST
66917: LIST
66918: LIST
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: ST_TO_ADDR
66924: GO 68607
66926: LD_INT 12
66928: DOUBLE
66929: EQUAL
66930: IFTRUE 66934
66932: GO 67154
66934: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
66935: LD_ADDR_VAR 0 2
66939: PUSH
66940: LD_INT 1
66942: PUSH
66943: LD_INT 2
66945: PUSH
66946: LD_INT 3
66948: PUSH
66949: LD_INT 4
66951: PUSH
66952: LD_INT 5
66954: PUSH
66955: LD_INT 6
66957: PUSH
66958: LD_INT 7
66960: PUSH
66961: LD_INT 8
66963: PUSH
66964: LD_INT 9
66966: PUSH
66967: LD_INT 10
66969: PUSH
66970: LD_INT 11
66972: PUSH
66973: LD_INT 12
66975: PUSH
66976: LD_INT 13
66978: PUSH
66979: LD_INT 14
66981: PUSH
66982: LD_INT 15
66984: PUSH
66985: LD_INT 16
66987: PUSH
66988: LD_INT 17
66990: PUSH
66991: LD_INT 18
66993: PUSH
66994: LD_INT 19
66996: PUSH
66997: LD_INT 20
66999: PUSH
67000: LD_INT 21
67002: PUSH
67003: LD_INT 22
67005: PUSH
67006: LD_INT 23
67008: PUSH
67009: LD_INT 24
67011: PUSH
67012: LD_INT 25
67014: PUSH
67015: LD_INT 26
67017: PUSH
67018: LD_INT 27
67020: PUSH
67021: LD_INT 28
67023: PUSH
67024: LD_INT 30
67026: PUSH
67027: LD_INT 31
67029: PUSH
67030: LD_INT 32
67032: PUSH
67033: LD_INT 33
67035: PUSH
67036: LD_INT 34
67038: PUSH
67039: LD_INT 36
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: LIST
67059: LIST
67060: LIST
67061: LIST
67062: LIST
67063: LIST
67064: LIST
67065: LIST
67066: LIST
67067: LIST
67068: LIST
67069: LIST
67070: LIST
67071: LIST
67072: LIST
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 101
67080: PUSH
67081: LD_INT 102
67083: PUSH
67084: LD_INT 103
67086: PUSH
67087: LD_INT 104
67089: PUSH
67090: LD_INT 105
67092: PUSH
67093: LD_INT 106
67095: PUSH
67096: LD_INT 107
67098: PUSH
67099: LD_INT 108
67101: PUSH
67102: LD_INT 109
67104: PUSH
67105: LD_INT 110
67107: PUSH
67108: LD_INT 111
67110: PUSH
67111: LD_INT 112
67113: PUSH
67114: LD_INT 113
67116: PUSH
67117: LD_INT 114
67119: PUSH
67120: LD_INT 116
67122: PUSH
67123: LD_INT 117
67125: PUSH
67126: LD_INT 118
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: LIST
67133: LIST
67134: LIST
67135: LIST
67136: LIST
67137: LIST
67138: LIST
67139: LIST
67140: LIST
67141: LIST
67142: LIST
67143: LIST
67144: LIST
67145: LIST
67146: LIST
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: ST_TO_ADDR
67152: GO 68607
67154: LD_INT 13
67156: DOUBLE
67157: EQUAL
67158: IFTRUE 67162
67160: GO 67370
67162: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
67163: LD_ADDR_VAR 0 2
67167: PUSH
67168: LD_INT 1
67170: PUSH
67171: LD_INT 2
67173: PUSH
67174: LD_INT 3
67176: PUSH
67177: LD_INT 4
67179: PUSH
67180: LD_INT 5
67182: PUSH
67183: LD_INT 8
67185: PUSH
67186: LD_INT 9
67188: PUSH
67189: LD_INT 10
67191: PUSH
67192: LD_INT 11
67194: PUSH
67195: LD_INT 12
67197: PUSH
67198: LD_INT 14
67200: PUSH
67201: LD_INT 15
67203: PUSH
67204: LD_INT 16
67206: PUSH
67207: LD_INT 17
67209: PUSH
67210: LD_INT 18
67212: PUSH
67213: LD_INT 19
67215: PUSH
67216: LD_INT 20
67218: PUSH
67219: LD_INT 21
67221: PUSH
67222: LD_INT 22
67224: PUSH
67225: LD_INT 23
67227: PUSH
67228: LD_INT 24
67230: PUSH
67231: LD_INT 25
67233: PUSH
67234: LD_INT 26
67236: PUSH
67237: LD_INT 27
67239: PUSH
67240: LD_INT 28
67242: PUSH
67243: LD_INT 30
67245: PUSH
67246: LD_INT 31
67248: PUSH
67249: LD_INT 32
67251: PUSH
67252: LD_INT 33
67254: PUSH
67255: LD_INT 34
67257: PUSH
67258: LD_INT 36
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: LIST
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: LIST
67290: LIST
67291: LIST
67292: LIST
67293: PUSH
67294: LD_INT 101
67296: PUSH
67297: LD_INT 102
67299: PUSH
67300: LD_INT 103
67302: PUSH
67303: LD_INT 104
67305: PUSH
67306: LD_INT 105
67308: PUSH
67309: LD_INT 106
67311: PUSH
67312: LD_INT 107
67314: PUSH
67315: LD_INT 108
67317: PUSH
67318: LD_INT 109
67320: PUSH
67321: LD_INT 110
67323: PUSH
67324: LD_INT 111
67326: PUSH
67327: LD_INT 112
67329: PUSH
67330: LD_INT 113
67332: PUSH
67333: LD_INT 114
67335: PUSH
67336: LD_INT 116
67338: PUSH
67339: LD_INT 117
67341: PUSH
67342: LD_INT 118
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: LIST
67356: LIST
67357: LIST
67358: LIST
67359: LIST
67360: LIST
67361: LIST
67362: LIST
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: ST_TO_ADDR
67368: GO 68607
67370: LD_INT 14
67372: DOUBLE
67373: EQUAL
67374: IFTRUE 67378
67376: GO 67602
67378: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
67379: LD_ADDR_VAR 0 2
67383: PUSH
67384: LD_INT 1
67386: PUSH
67387: LD_INT 2
67389: PUSH
67390: LD_INT 3
67392: PUSH
67393: LD_INT 4
67395: PUSH
67396: LD_INT 5
67398: PUSH
67399: LD_INT 6
67401: PUSH
67402: LD_INT 7
67404: PUSH
67405: LD_INT 8
67407: PUSH
67408: LD_INT 9
67410: PUSH
67411: LD_INT 10
67413: PUSH
67414: LD_INT 11
67416: PUSH
67417: LD_INT 12
67419: PUSH
67420: LD_INT 13
67422: PUSH
67423: LD_INT 14
67425: PUSH
67426: LD_INT 15
67428: PUSH
67429: LD_INT 16
67431: PUSH
67432: LD_INT 17
67434: PUSH
67435: LD_INT 18
67437: PUSH
67438: LD_INT 19
67440: PUSH
67441: LD_INT 20
67443: PUSH
67444: LD_INT 21
67446: PUSH
67447: LD_INT 22
67449: PUSH
67450: LD_INT 23
67452: PUSH
67453: LD_INT 24
67455: PUSH
67456: LD_INT 25
67458: PUSH
67459: LD_INT 26
67461: PUSH
67462: LD_INT 27
67464: PUSH
67465: LD_INT 28
67467: PUSH
67468: LD_INT 29
67470: PUSH
67471: LD_INT 30
67473: PUSH
67474: LD_INT 31
67476: PUSH
67477: LD_INT 32
67479: PUSH
67480: LD_INT 33
67482: PUSH
67483: LD_INT 34
67485: PUSH
67486: LD_INT 36
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: LIST
67510: LIST
67511: LIST
67512: LIST
67513: LIST
67514: LIST
67515: LIST
67516: LIST
67517: LIST
67518: LIST
67519: LIST
67520: LIST
67521: LIST
67522: LIST
67523: LIST
67524: LIST
67525: PUSH
67526: LD_INT 101
67528: PUSH
67529: LD_INT 102
67531: PUSH
67532: LD_INT 103
67534: PUSH
67535: LD_INT 104
67537: PUSH
67538: LD_INT 105
67540: PUSH
67541: LD_INT 106
67543: PUSH
67544: LD_INT 107
67546: PUSH
67547: LD_INT 108
67549: PUSH
67550: LD_INT 109
67552: PUSH
67553: LD_INT 110
67555: PUSH
67556: LD_INT 111
67558: PUSH
67559: LD_INT 112
67561: PUSH
67562: LD_INT 113
67564: PUSH
67565: LD_INT 114
67567: PUSH
67568: LD_INT 116
67570: PUSH
67571: LD_INT 117
67573: PUSH
67574: LD_INT 118
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: LIST
67581: LIST
67582: LIST
67583: LIST
67584: LIST
67585: LIST
67586: LIST
67587: LIST
67588: LIST
67589: LIST
67590: LIST
67591: LIST
67592: LIST
67593: LIST
67594: LIST
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: ST_TO_ADDR
67600: GO 68607
67602: LD_INT 15
67604: DOUBLE
67605: EQUAL
67606: IFTRUE 67610
67608: GO 67834
67610: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
67611: LD_ADDR_VAR 0 2
67615: PUSH
67616: LD_INT 1
67618: PUSH
67619: LD_INT 2
67621: PUSH
67622: LD_INT 3
67624: PUSH
67625: LD_INT 4
67627: PUSH
67628: LD_INT 5
67630: PUSH
67631: LD_INT 6
67633: PUSH
67634: LD_INT 7
67636: PUSH
67637: LD_INT 8
67639: PUSH
67640: LD_INT 9
67642: PUSH
67643: LD_INT 10
67645: PUSH
67646: LD_INT 11
67648: PUSH
67649: LD_INT 12
67651: PUSH
67652: LD_INT 13
67654: PUSH
67655: LD_INT 14
67657: PUSH
67658: LD_INT 15
67660: PUSH
67661: LD_INT 16
67663: PUSH
67664: LD_INT 17
67666: PUSH
67667: LD_INT 18
67669: PUSH
67670: LD_INT 19
67672: PUSH
67673: LD_INT 20
67675: PUSH
67676: LD_INT 21
67678: PUSH
67679: LD_INT 22
67681: PUSH
67682: LD_INT 23
67684: PUSH
67685: LD_INT 24
67687: PUSH
67688: LD_INT 25
67690: PUSH
67691: LD_INT 26
67693: PUSH
67694: LD_INT 27
67696: PUSH
67697: LD_INT 28
67699: PUSH
67700: LD_INT 29
67702: PUSH
67703: LD_INT 30
67705: PUSH
67706: LD_INT 31
67708: PUSH
67709: LD_INT 32
67711: PUSH
67712: LD_INT 33
67714: PUSH
67715: LD_INT 34
67717: PUSH
67718: LD_INT 36
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: LIST
67750: LIST
67751: LIST
67752: LIST
67753: LIST
67754: LIST
67755: LIST
67756: LIST
67757: PUSH
67758: LD_INT 101
67760: PUSH
67761: LD_INT 102
67763: PUSH
67764: LD_INT 103
67766: PUSH
67767: LD_INT 104
67769: PUSH
67770: LD_INT 105
67772: PUSH
67773: LD_INT 106
67775: PUSH
67776: LD_INT 107
67778: PUSH
67779: LD_INT 108
67781: PUSH
67782: LD_INT 109
67784: PUSH
67785: LD_INT 110
67787: PUSH
67788: LD_INT 111
67790: PUSH
67791: LD_INT 112
67793: PUSH
67794: LD_INT 113
67796: PUSH
67797: LD_INT 114
67799: PUSH
67800: LD_INT 116
67802: PUSH
67803: LD_INT 117
67805: PUSH
67806: LD_INT 118
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: PUSH
67828: EMPTY
67829: LIST
67830: LIST
67831: ST_TO_ADDR
67832: GO 68607
67834: LD_INT 16
67836: DOUBLE
67837: EQUAL
67838: IFTRUE 67842
67840: GO 67978
67842: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
67843: LD_ADDR_VAR 0 2
67847: PUSH
67848: LD_INT 2
67850: PUSH
67851: LD_INT 4
67853: PUSH
67854: LD_INT 5
67856: PUSH
67857: LD_INT 7
67859: PUSH
67860: LD_INT 11
67862: PUSH
67863: LD_INT 12
67865: PUSH
67866: LD_INT 15
67868: PUSH
67869: LD_INT 16
67871: PUSH
67872: LD_INT 20
67874: PUSH
67875: LD_INT 21
67877: PUSH
67878: LD_INT 22
67880: PUSH
67881: LD_INT 23
67883: PUSH
67884: LD_INT 25
67886: PUSH
67887: LD_INT 26
67889: PUSH
67890: LD_INT 30
67892: PUSH
67893: LD_INT 31
67895: PUSH
67896: LD_INT 32
67898: PUSH
67899: LD_INT 33
67901: PUSH
67902: LD_INT 34
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: LIST
67922: LIST
67923: LIST
67924: LIST
67925: PUSH
67926: LD_INT 101
67928: PUSH
67929: LD_INT 102
67931: PUSH
67932: LD_INT 103
67934: PUSH
67935: LD_INT 106
67937: PUSH
67938: LD_INT 108
67940: PUSH
67941: LD_INT 112
67943: PUSH
67944: LD_INT 113
67946: PUSH
67947: LD_INT 114
67949: PUSH
67950: LD_INT 116
67952: PUSH
67953: LD_INT 117
67955: PUSH
67956: LD_INT 118
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: LIST
67963: LIST
67964: LIST
67965: LIST
67966: LIST
67967: LIST
67968: LIST
67969: LIST
67970: LIST
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: ST_TO_ADDR
67976: GO 68607
67978: LD_INT 17
67980: DOUBLE
67981: EQUAL
67982: IFTRUE 67986
67984: GO 68210
67986: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
67987: LD_ADDR_VAR 0 2
67991: PUSH
67992: LD_INT 1
67994: PUSH
67995: LD_INT 2
67997: PUSH
67998: LD_INT 3
68000: PUSH
68001: LD_INT 4
68003: PUSH
68004: LD_INT 5
68006: PUSH
68007: LD_INT 6
68009: PUSH
68010: LD_INT 7
68012: PUSH
68013: LD_INT 8
68015: PUSH
68016: LD_INT 9
68018: PUSH
68019: LD_INT 10
68021: PUSH
68022: LD_INT 11
68024: PUSH
68025: LD_INT 12
68027: PUSH
68028: LD_INT 13
68030: PUSH
68031: LD_INT 14
68033: PUSH
68034: LD_INT 15
68036: PUSH
68037: LD_INT 16
68039: PUSH
68040: LD_INT 17
68042: PUSH
68043: LD_INT 18
68045: PUSH
68046: LD_INT 19
68048: PUSH
68049: LD_INT 20
68051: PUSH
68052: LD_INT 21
68054: PUSH
68055: LD_INT 22
68057: PUSH
68058: LD_INT 23
68060: PUSH
68061: LD_INT 24
68063: PUSH
68064: LD_INT 25
68066: PUSH
68067: LD_INT 26
68069: PUSH
68070: LD_INT 27
68072: PUSH
68073: LD_INT 28
68075: PUSH
68076: LD_INT 29
68078: PUSH
68079: LD_INT 30
68081: PUSH
68082: LD_INT 31
68084: PUSH
68085: LD_INT 32
68087: PUSH
68088: LD_INT 33
68090: PUSH
68091: LD_INT 34
68093: PUSH
68094: LD_INT 36
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: LIST
68117: LIST
68118: LIST
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: PUSH
68134: LD_INT 101
68136: PUSH
68137: LD_INT 102
68139: PUSH
68140: LD_INT 103
68142: PUSH
68143: LD_INT 104
68145: PUSH
68146: LD_INT 105
68148: PUSH
68149: LD_INT 106
68151: PUSH
68152: LD_INT 107
68154: PUSH
68155: LD_INT 108
68157: PUSH
68158: LD_INT 109
68160: PUSH
68161: LD_INT 110
68163: PUSH
68164: LD_INT 111
68166: PUSH
68167: LD_INT 112
68169: PUSH
68170: LD_INT 113
68172: PUSH
68173: LD_INT 114
68175: PUSH
68176: LD_INT 116
68178: PUSH
68179: LD_INT 117
68181: PUSH
68182: LD_INT 118
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: LIST
68189: LIST
68190: LIST
68191: LIST
68192: LIST
68193: LIST
68194: LIST
68195: LIST
68196: LIST
68197: LIST
68198: LIST
68199: LIST
68200: LIST
68201: LIST
68202: LIST
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: ST_TO_ADDR
68208: GO 68607
68210: LD_INT 18
68212: DOUBLE
68213: EQUAL
68214: IFTRUE 68218
68216: GO 68366
68218: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
68219: LD_ADDR_VAR 0 2
68223: PUSH
68224: LD_INT 2
68226: PUSH
68227: LD_INT 4
68229: PUSH
68230: LD_INT 5
68232: PUSH
68233: LD_INT 7
68235: PUSH
68236: LD_INT 11
68238: PUSH
68239: LD_INT 12
68241: PUSH
68242: LD_INT 15
68244: PUSH
68245: LD_INT 16
68247: PUSH
68248: LD_INT 20
68250: PUSH
68251: LD_INT 21
68253: PUSH
68254: LD_INT 22
68256: PUSH
68257: LD_INT 23
68259: PUSH
68260: LD_INT 25
68262: PUSH
68263: LD_INT 26
68265: PUSH
68266: LD_INT 30
68268: PUSH
68269: LD_INT 31
68271: PUSH
68272: LD_INT 32
68274: PUSH
68275: LD_INT 33
68277: PUSH
68278: LD_INT 34
68280: PUSH
68281: LD_INT 35
68283: PUSH
68284: LD_INT 36
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: LIST
68291: LIST
68292: LIST
68293: LIST
68294: LIST
68295: LIST
68296: LIST
68297: LIST
68298: LIST
68299: LIST
68300: LIST
68301: LIST
68302: LIST
68303: LIST
68304: LIST
68305: LIST
68306: LIST
68307: LIST
68308: LIST
68309: PUSH
68310: LD_INT 101
68312: PUSH
68313: LD_INT 102
68315: PUSH
68316: LD_INT 103
68318: PUSH
68319: LD_INT 106
68321: PUSH
68322: LD_INT 108
68324: PUSH
68325: LD_INT 112
68327: PUSH
68328: LD_INT 113
68330: PUSH
68331: LD_INT 114
68333: PUSH
68334: LD_INT 115
68336: PUSH
68337: LD_INT 116
68339: PUSH
68340: LD_INT 117
68342: PUSH
68343: LD_INT 118
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: LIST
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: ST_TO_ADDR
68364: GO 68607
68366: LD_INT 19
68368: DOUBLE
68369: EQUAL
68370: IFTRUE 68374
68372: GO 68606
68374: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
68375: LD_ADDR_VAR 0 2
68379: PUSH
68380: LD_INT 1
68382: PUSH
68383: LD_INT 2
68385: PUSH
68386: LD_INT 3
68388: PUSH
68389: LD_INT 4
68391: PUSH
68392: LD_INT 5
68394: PUSH
68395: LD_INT 6
68397: PUSH
68398: LD_INT 7
68400: PUSH
68401: LD_INT 8
68403: PUSH
68404: LD_INT 9
68406: PUSH
68407: LD_INT 10
68409: PUSH
68410: LD_INT 11
68412: PUSH
68413: LD_INT 12
68415: PUSH
68416: LD_INT 13
68418: PUSH
68419: LD_INT 14
68421: PUSH
68422: LD_INT 15
68424: PUSH
68425: LD_INT 16
68427: PUSH
68428: LD_INT 17
68430: PUSH
68431: LD_INT 18
68433: PUSH
68434: LD_INT 19
68436: PUSH
68437: LD_INT 20
68439: PUSH
68440: LD_INT 21
68442: PUSH
68443: LD_INT 22
68445: PUSH
68446: LD_INT 23
68448: PUSH
68449: LD_INT 24
68451: PUSH
68452: LD_INT 25
68454: PUSH
68455: LD_INT 26
68457: PUSH
68458: LD_INT 27
68460: PUSH
68461: LD_INT 28
68463: PUSH
68464: LD_INT 29
68466: PUSH
68467: LD_INT 30
68469: PUSH
68470: LD_INT 31
68472: PUSH
68473: LD_INT 32
68475: PUSH
68476: LD_INT 33
68478: PUSH
68479: LD_INT 34
68481: PUSH
68482: LD_INT 35
68484: PUSH
68485: LD_INT 36
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: LIST
68503: LIST
68504: LIST
68505: LIST
68506: LIST
68507: LIST
68508: LIST
68509: LIST
68510: LIST
68511: LIST
68512: LIST
68513: LIST
68514: LIST
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 101
68528: PUSH
68529: LD_INT 102
68531: PUSH
68532: LD_INT 103
68534: PUSH
68535: LD_INT 104
68537: PUSH
68538: LD_INT 105
68540: PUSH
68541: LD_INT 106
68543: PUSH
68544: LD_INT 107
68546: PUSH
68547: LD_INT 108
68549: PUSH
68550: LD_INT 109
68552: PUSH
68553: LD_INT 110
68555: PUSH
68556: LD_INT 111
68558: PUSH
68559: LD_INT 112
68561: PUSH
68562: LD_INT 113
68564: PUSH
68565: LD_INT 114
68567: PUSH
68568: LD_INT 115
68570: PUSH
68571: LD_INT 116
68573: PUSH
68574: LD_INT 117
68576: PUSH
68577: LD_INT 118
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: LIST
68584: LIST
68585: LIST
68586: LIST
68587: LIST
68588: LIST
68589: LIST
68590: LIST
68591: LIST
68592: LIST
68593: LIST
68594: LIST
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: ST_TO_ADDR
68604: GO 68607
68606: POP
// end else
68607: GO 68838
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
68609: LD_ADDR_VAR 0 2
68613: PUSH
68614: LD_INT 1
68616: PUSH
68617: LD_INT 2
68619: PUSH
68620: LD_INT 3
68622: PUSH
68623: LD_INT 4
68625: PUSH
68626: LD_INT 5
68628: PUSH
68629: LD_INT 6
68631: PUSH
68632: LD_INT 7
68634: PUSH
68635: LD_INT 8
68637: PUSH
68638: LD_INT 9
68640: PUSH
68641: LD_INT 10
68643: PUSH
68644: LD_INT 11
68646: PUSH
68647: LD_INT 12
68649: PUSH
68650: LD_INT 13
68652: PUSH
68653: LD_INT 14
68655: PUSH
68656: LD_INT 15
68658: PUSH
68659: LD_INT 16
68661: PUSH
68662: LD_INT 17
68664: PUSH
68665: LD_INT 18
68667: PUSH
68668: LD_INT 19
68670: PUSH
68671: LD_INT 20
68673: PUSH
68674: LD_INT 21
68676: PUSH
68677: LD_INT 22
68679: PUSH
68680: LD_INT 23
68682: PUSH
68683: LD_INT 24
68685: PUSH
68686: LD_INT 25
68688: PUSH
68689: LD_INT 26
68691: PUSH
68692: LD_INT 27
68694: PUSH
68695: LD_INT 28
68697: PUSH
68698: LD_INT 29
68700: PUSH
68701: LD_INT 30
68703: PUSH
68704: LD_INT 31
68706: PUSH
68707: LD_INT 32
68709: PUSH
68710: LD_INT 33
68712: PUSH
68713: LD_INT 34
68715: PUSH
68716: LD_INT 35
68718: PUSH
68719: LD_INT 36
68721: PUSH
68722: EMPTY
68723: LIST
68724: LIST
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: LIST
68737: LIST
68738: LIST
68739: LIST
68740: LIST
68741: LIST
68742: LIST
68743: LIST
68744: LIST
68745: LIST
68746: LIST
68747: LIST
68748: LIST
68749: LIST
68750: LIST
68751: LIST
68752: LIST
68753: LIST
68754: LIST
68755: LIST
68756: LIST
68757: LIST
68758: LIST
68759: PUSH
68760: LD_INT 101
68762: PUSH
68763: LD_INT 102
68765: PUSH
68766: LD_INT 103
68768: PUSH
68769: LD_INT 104
68771: PUSH
68772: LD_INT 105
68774: PUSH
68775: LD_INT 106
68777: PUSH
68778: LD_INT 107
68780: PUSH
68781: LD_INT 108
68783: PUSH
68784: LD_INT 109
68786: PUSH
68787: LD_INT 110
68789: PUSH
68790: LD_INT 111
68792: PUSH
68793: LD_INT 112
68795: PUSH
68796: LD_INT 113
68798: PUSH
68799: LD_INT 114
68801: PUSH
68802: LD_INT 115
68804: PUSH
68805: LD_INT 116
68807: PUSH
68808: LD_INT 117
68810: PUSH
68811: LD_INT 118
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: LIST
68818: LIST
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: PUSH
68834: EMPTY
68835: LIST
68836: LIST
68837: ST_TO_ADDR
// if result then
68838: LD_VAR 0 2
68842: IFFALSE 69628
// begin normal :=  ;
68844: LD_ADDR_VAR 0 5
68848: PUSH
68849: LD_STRING 
68851: ST_TO_ADDR
// hardcore :=  ;
68852: LD_ADDR_VAR 0 6
68856: PUSH
68857: LD_STRING 
68859: ST_TO_ADDR
// active :=  ;
68860: LD_ADDR_VAR 0 7
68864: PUSH
68865: LD_STRING 
68867: ST_TO_ADDR
// for i = 1 to normalCounter do
68868: LD_ADDR_VAR 0 8
68872: PUSH
68873: DOUBLE
68874: LD_INT 1
68876: DEC
68877: ST_TO_ADDR
68878: LD_EXP 48
68882: PUSH
68883: FOR_TO
68884: IFFALSE 68985
// begin tmp := 0 ;
68886: LD_ADDR_VAR 0 3
68890: PUSH
68891: LD_STRING 0
68893: ST_TO_ADDR
// if result [ 1 ] then
68894: LD_VAR 0 2
68898: PUSH
68899: LD_INT 1
68901: ARRAY
68902: IFFALSE 68967
// if result [ 1 ] [ 1 ] = i then
68904: LD_VAR 0 2
68908: PUSH
68909: LD_INT 1
68911: ARRAY
68912: PUSH
68913: LD_INT 1
68915: ARRAY
68916: PUSH
68917: LD_VAR 0 8
68921: EQUAL
68922: IFFALSE 68967
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
68924: LD_ADDR_VAR 0 2
68928: PUSH
68929: LD_VAR 0 2
68933: PPUSH
68934: LD_INT 1
68936: PPUSH
68937: LD_VAR 0 2
68941: PUSH
68942: LD_INT 1
68944: ARRAY
68945: PPUSH
68946: LD_INT 1
68948: PPUSH
68949: CALL_OW 3
68953: PPUSH
68954: CALL_OW 1
68958: ST_TO_ADDR
// tmp := 1 ;
68959: LD_ADDR_VAR 0 3
68963: PUSH
68964: LD_STRING 1
68966: ST_TO_ADDR
// end ; normal := normal & tmp ;
68967: LD_ADDR_VAR 0 5
68971: PUSH
68972: LD_VAR 0 5
68976: PUSH
68977: LD_VAR 0 3
68981: STR
68982: ST_TO_ADDR
// end ;
68983: GO 68883
68985: POP
68986: POP
// for i = 1 to hardcoreCounter do
68987: LD_ADDR_VAR 0 8
68991: PUSH
68992: DOUBLE
68993: LD_INT 1
68995: DEC
68996: ST_TO_ADDR
68997: LD_EXP 49
69001: PUSH
69002: FOR_TO
69003: IFFALSE 69108
// begin tmp := 0 ;
69005: LD_ADDR_VAR 0 3
69009: PUSH
69010: LD_STRING 0
69012: ST_TO_ADDR
// if result [ 2 ] then
69013: LD_VAR 0 2
69017: PUSH
69018: LD_INT 2
69020: ARRAY
69021: IFFALSE 69090
// if result [ 2 ] [ 1 ] = 100 + i then
69023: LD_VAR 0 2
69027: PUSH
69028: LD_INT 2
69030: ARRAY
69031: PUSH
69032: LD_INT 1
69034: ARRAY
69035: PUSH
69036: LD_INT 100
69038: PUSH
69039: LD_VAR 0 8
69043: PLUS
69044: EQUAL
69045: IFFALSE 69090
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
69047: LD_ADDR_VAR 0 2
69051: PUSH
69052: LD_VAR 0 2
69056: PPUSH
69057: LD_INT 2
69059: PPUSH
69060: LD_VAR 0 2
69064: PUSH
69065: LD_INT 2
69067: ARRAY
69068: PPUSH
69069: LD_INT 1
69071: PPUSH
69072: CALL_OW 3
69076: PPUSH
69077: CALL_OW 1
69081: ST_TO_ADDR
// tmp := 1 ;
69082: LD_ADDR_VAR 0 3
69086: PUSH
69087: LD_STRING 1
69089: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
69090: LD_ADDR_VAR 0 6
69094: PUSH
69095: LD_VAR 0 6
69099: PUSH
69100: LD_VAR 0 3
69104: STR
69105: ST_TO_ADDR
// end ;
69106: GO 69002
69108: POP
69109: POP
// if isGameLoad then
69110: LD_VAR 0 1
69114: IFFALSE 69589
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
69116: LD_ADDR_VAR 0 4
69120: PUSH
69121: LD_EXP 52
69125: PUSH
69126: LD_EXP 51
69130: PUSH
69131: LD_EXP 53
69135: PUSH
69136: LD_EXP 50
69140: PUSH
69141: LD_EXP 54
69145: PUSH
69146: LD_EXP 55
69150: PUSH
69151: LD_EXP 56
69155: PUSH
69156: LD_EXP 57
69160: PUSH
69161: LD_EXP 58
69165: PUSH
69166: LD_EXP 59
69170: PUSH
69171: LD_EXP 60
69175: PUSH
69176: LD_EXP 61
69180: PUSH
69181: LD_EXP 62
69185: PUSH
69186: LD_EXP 63
69190: PUSH
69191: LD_EXP 71
69195: PUSH
69196: LD_EXP 72
69200: PUSH
69201: LD_EXP 73
69205: PUSH
69206: LD_EXP 74
69210: PUSH
69211: LD_EXP 76
69215: PUSH
69216: LD_EXP 77
69220: PUSH
69221: LD_EXP 78
69225: PUSH
69226: LD_EXP 81
69230: PUSH
69231: LD_EXP 83
69235: PUSH
69236: LD_EXP 84
69240: PUSH
69241: LD_EXP 85
69245: PUSH
69246: LD_EXP 87
69250: PUSH
69251: LD_EXP 88
69255: PUSH
69256: LD_EXP 91
69260: PUSH
69261: LD_EXP 92
69265: PUSH
69266: LD_EXP 93
69270: PUSH
69271: LD_EXP 94
69275: PUSH
69276: LD_EXP 95
69280: PUSH
69281: LD_EXP 96
69285: PUSH
69286: LD_EXP 97
69290: PUSH
69291: LD_EXP 98
69295: PUSH
69296: LD_EXP 99
69300: PUSH
69301: LD_EXP 64
69305: PUSH
69306: LD_EXP 65
69310: PUSH
69311: LD_EXP 68
69315: PUSH
69316: LD_EXP 69
69320: PUSH
69321: LD_EXP 70
69325: PUSH
69326: LD_EXP 66
69330: PUSH
69331: LD_EXP 67
69335: PUSH
69336: LD_EXP 75
69340: PUSH
69341: LD_EXP 79
69345: PUSH
69346: LD_EXP 80
69350: PUSH
69351: LD_EXP 82
69355: PUSH
69356: LD_EXP 86
69360: PUSH
69361: LD_EXP 89
69365: PUSH
69366: LD_EXP 90
69370: PUSH
69371: LD_EXP 100
69375: PUSH
69376: LD_EXP 101
69380: PUSH
69381: LD_EXP 102
69385: PUSH
69386: LD_EXP 103
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: LIST
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: LIST
69401: LIST
69402: LIST
69403: LIST
69404: LIST
69405: LIST
69406: LIST
69407: LIST
69408: LIST
69409: LIST
69410: LIST
69411: LIST
69412: LIST
69413: LIST
69414: LIST
69415: LIST
69416: LIST
69417: LIST
69418: LIST
69419: LIST
69420: LIST
69421: LIST
69422: LIST
69423: LIST
69424: LIST
69425: LIST
69426: LIST
69427: LIST
69428: LIST
69429: LIST
69430: LIST
69431: LIST
69432: LIST
69433: LIST
69434: LIST
69435: LIST
69436: LIST
69437: LIST
69438: LIST
69439: LIST
69440: LIST
69441: LIST
69442: LIST
69443: LIST
69444: LIST
69445: LIST
69446: ST_TO_ADDR
// tmp :=  ;
69447: LD_ADDR_VAR 0 3
69451: PUSH
69452: LD_STRING 
69454: ST_TO_ADDR
// for i = 1 to normalCounter do
69455: LD_ADDR_VAR 0 8
69459: PUSH
69460: DOUBLE
69461: LD_INT 1
69463: DEC
69464: ST_TO_ADDR
69465: LD_EXP 48
69469: PUSH
69470: FOR_TO
69471: IFFALSE 69507
// begin if flags [ i ] then
69473: LD_VAR 0 4
69477: PUSH
69478: LD_VAR 0 8
69482: ARRAY
69483: IFFALSE 69505
// tmp := tmp & i & ; ;
69485: LD_ADDR_VAR 0 3
69489: PUSH
69490: LD_VAR 0 3
69494: PUSH
69495: LD_VAR 0 8
69499: STR
69500: PUSH
69501: LD_STRING ;
69503: STR
69504: ST_TO_ADDR
// end ;
69505: GO 69470
69507: POP
69508: POP
// for i = 1 to hardcoreCounter do
69509: LD_ADDR_VAR 0 8
69513: PUSH
69514: DOUBLE
69515: LD_INT 1
69517: DEC
69518: ST_TO_ADDR
69519: LD_EXP 49
69523: PUSH
69524: FOR_TO
69525: IFFALSE 69571
// begin if flags [ normalCounter + i ] then
69527: LD_VAR 0 4
69531: PUSH
69532: LD_EXP 48
69536: PUSH
69537: LD_VAR 0 8
69541: PLUS
69542: ARRAY
69543: IFFALSE 69569
// tmp := tmp & ( 100 + i ) & ; ;
69545: LD_ADDR_VAR 0 3
69549: PUSH
69550: LD_VAR 0 3
69554: PUSH
69555: LD_INT 100
69557: PUSH
69558: LD_VAR 0 8
69562: PLUS
69563: STR
69564: PUSH
69565: LD_STRING ;
69567: STR
69568: ST_TO_ADDR
// end ;
69569: GO 69524
69571: POP
69572: POP
// if tmp then
69573: LD_VAR 0 3
69577: IFFALSE 69589
// active := tmp ;
69579: LD_ADDR_VAR 0 7
69583: PUSH
69584: LD_VAR 0 3
69588: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
69589: LD_STRING getStreamItemsFromMission("
69591: PUSH
69592: LD_VAR 0 5
69596: STR
69597: PUSH
69598: LD_STRING ","
69600: STR
69601: PUSH
69602: LD_VAR 0 6
69606: STR
69607: PUSH
69608: LD_STRING ","
69610: STR
69611: PUSH
69612: LD_VAR 0 7
69616: STR
69617: PUSH
69618: LD_STRING ")
69620: STR
69621: PPUSH
69622: CALL_OW 559
// end else
69626: GO 69635
// ToLua ( getStreamItemsFromMission("","","") ) ;
69628: LD_STRING getStreamItemsFromMission("","","")
69630: PPUSH
69631: CALL_OW 559
// end ;
69635: LD_VAR 0 2
69639: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
69640: LD_EXP 47
69644: PUSH
69645: LD_EXP 52
69649: AND
69650: IFFALSE 69774
69652: GO 69654
69654: DISABLE
69655: LD_INT 0
69657: PPUSH
69658: PPUSH
// begin enable ;
69659: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
69660: LD_ADDR_VAR 0 2
69664: PUSH
69665: LD_INT 22
69667: PUSH
69668: LD_OWVAR 2
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 2
69679: PUSH
69680: LD_INT 34
69682: PUSH
69683: LD_INT 7
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: LD_INT 34
69692: PUSH
69693: LD_INT 45
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: PUSH
69700: LD_INT 34
69702: PUSH
69703: LD_INT 28
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: PUSH
69710: LD_INT 34
69712: PUSH
69713: LD_INT 47
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: LIST
69724: LIST
69725: LIST
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: PPUSH
69731: CALL_OW 69
69735: ST_TO_ADDR
// if not tmp then
69736: LD_VAR 0 2
69740: NOT
69741: IFFALSE 69745
// exit ;
69743: GO 69774
// for i in tmp do
69745: LD_ADDR_VAR 0 1
69749: PUSH
69750: LD_VAR 0 2
69754: PUSH
69755: FOR_IN
69756: IFFALSE 69772
// begin SetLives ( i , 0 ) ;
69758: LD_VAR 0 1
69762: PPUSH
69763: LD_INT 0
69765: PPUSH
69766: CALL_OW 234
// end ;
69770: GO 69755
69772: POP
69773: POP
// end ;
69774: PPOPN 2
69776: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
69777: LD_EXP 47
69781: PUSH
69782: LD_EXP 53
69786: AND
69787: IFFALSE 69871
69789: GO 69791
69791: DISABLE
69792: LD_INT 0
69794: PPUSH
69795: PPUSH
// begin enable ;
69796: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
69797: LD_ADDR_VAR 0 2
69801: PUSH
69802: LD_INT 22
69804: PUSH
69805: LD_OWVAR 2
69809: PUSH
69810: EMPTY
69811: LIST
69812: LIST
69813: PUSH
69814: LD_INT 32
69816: PUSH
69817: LD_INT 3
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: EMPTY
69825: LIST
69826: LIST
69827: PPUSH
69828: CALL_OW 69
69832: ST_TO_ADDR
// if not tmp then
69833: LD_VAR 0 2
69837: NOT
69838: IFFALSE 69842
// exit ;
69840: GO 69871
// for i in tmp do
69842: LD_ADDR_VAR 0 1
69846: PUSH
69847: LD_VAR 0 2
69851: PUSH
69852: FOR_IN
69853: IFFALSE 69869
// begin SetLives ( i , 0 ) ;
69855: LD_VAR 0 1
69859: PPUSH
69860: LD_INT 0
69862: PPUSH
69863: CALL_OW 234
// end ;
69867: GO 69852
69869: POP
69870: POP
// end ;
69871: PPOPN 2
69873: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
69874: LD_EXP 47
69878: PUSH
69879: LD_EXP 50
69883: AND
69884: IFFALSE 69977
69886: GO 69888
69888: DISABLE
69889: LD_INT 0
69891: PPUSH
// begin enable ;
69892: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
69893: LD_ADDR_VAR 0 1
69897: PUSH
69898: LD_INT 22
69900: PUSH
69901: LD_OWVAR 2
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: PUSH
69910: LD_INT 2
69912: PUSH
69913: LD_INT 25
69915: PUSH
69916: LD_INT 5
69918: PUSH
69919: EMPTY
69920: LIST
69921: LIST
69922: PUSH
69923: LD_INT 25
69925: PUSH
69926: LD_INT 9
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 25
69935: PUSH
69936: LD_INT 8
69938: PUSH
69939: EMPTY
69940: LIST
69941: LIST
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: LIST
69947: LIST
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PPUSH
69953: CALL_OW 69
69957: PUSH
69958: FOR_IN
69959: IFFALSE 69975
// begin SetClass ( i , 1 ) ;
69961: LD_VAR 0 1
69965: PPUSH
69966: LD_INT 1
69968: PPUSH
69969: CALL_OW 336
// end ;
69973: GO 69958
69975: POP
69976: POP
// end ;
69977: PPOPN 1
69979: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
69980: LD_EXP 47
69984: PUSH
69985: LD_EXP 51
69989: AND
69990: PUSH
69991: LD_OWVAR 65
69995: PUSH
69996: LD_INT 7
69998: LESS
69999: AND
70000: IFFALSE 70014
70002: GO 70004
70004: DISABLE
// begin enable ;
70005: ENABLE
// game_speed := 7 ;
70006: LD_ADDR_OWVAR 65
70010: PUSH
70011: LD_INT 7
70013: ST_TO_ADDR
// end ;
70014: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
70015: LD_EXP 47
70019: PUSH
70020: LD_EXP 54
70024: AND
70025: IFFALSE 70227
70027: GO 70029
70029: DISABLE
70030: LD_INT 0
70032: PPUSH
70033: PPUSH
70034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
70035: LD_ADDR_VAR 0 3
70039: PUSH
70040: LD_INT 81
70042: PUSH
70043: LD_OWVAR 2
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PUSH
70052: LD_INT 21
70054: PUSH
70055: LD_INT 1
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: PPUSH
70066: CALL_OW 69
70070: ST_TO_ADDR
// if not tmp then
70071: LD_VAR 0 3
70075: NOT
70076: IFFALSE 70080
// exit ;
70078: GO 70227
// if tmp > 5 then
70080: LD_VAR 0 3
70084: PUSH
70085: LD_INT 5
70087: GREATER
70088: IFFALSE 70100
// k := 5 else
70090: LD_ADDR_VAR 0 2
70094: PUSH
70095: LD_INT 5
70097: ST_TO_ADDR
70098: GO 70110
// k := tmp ;
70100: LD_ADDR_VAR 0 2
70104: PUSH
70105: LD_VAR 0 3
70109: ST_TO_ADDR
// for i := 1 to k do
70110: LD_ADDR_VAR 0 1
70114: PUSH
70115: DOUBLE
70116: LD_INT 1
70118: DEC
70119: ST_TO_ADDR
70120: LD_VAR 0 2
70124: PUSH
70125: FOR_TO
70126: IFFALSE 70225
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
70128: LD_VAR 0 3
70132: PUSH
70133: LD_VAR 0 1
70137: ARRAY
70138: PPUSH
70139: LD_VAR 0 1
70143: PUSH
70144: LD_INT 4
70146: MOD
70147: PUSH
70148: LD_INT 1
70150: PLUS
70151: PPUSH
70152: CALL_OW 259
70156: PUSH
70157: LD_INT 10
70159: LESS
70160: IFFALSE 70223
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
70162: LD_VAR 0 3
70166: PUSH
70167: LD_VAR 0 1
70171: ARRAY
70172: PPUSH
70173: LD_VAR 0 1
70177: PUSH
70178: LD_INT 4
70180: MOD
70181: PUSH
70182: LD_INT 1
70184: PLUS
70185: PPUSH
70186: LD_VAR 0 3
70190: PUSH
70191: LD_VAR 0 1
70195: ARRAY
70196: PPUSH
70197: LD_VAR 0 1
70201: PUSH
70202: LD_INT 4
70204: MOD
70205: PUSH
70206: LD_INT 1
70208: PLUS
70209: PPUSH
70210: CALL_OW 259
70214: PUSH
70215: LD_INT 1
70217: PLUS
70218: PPUSH
70219: CALL_OW 237
70223: GO 70125
70225: POP
70226: POP
// end ;
70227: PPOPN 3
70229: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
70230: LD_EXP 47
70234: PUSH
70235: LD_EXP 55
70239: AND
70240: IFFALSE 70260
70242: GO 70244
70244: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
70245: LD_INT 4
70247: PPUSH
70248: LD_OWVAR 2
70252: PPUSH
70253: LD_INT 0
70255: PPUSH
70256: CALL_OW 324
70260: END
// every 0 0$1 trigger StreamModeActive and sShovel do
70261: LD_EXP 47
70265: PUSH
70266: LD_EXP 84
70270: AND
70271: IFFALSE 70291
70273: GO 70275
70275: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
70276: LD_INT 19
70278: PPUSH
70279: LD_OWVAR 2
70283: PPUSH
70284: LD_INT 0
70286: PPUSH
70287: CALL_OW 324
70291: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
70292: LD_EXP 47
70296: PUSH
70297: LD_EXP 56
70301: AND
70302: IFFALSE 70404
70304: GO 70306
70306: DISABLE
70307: LD_INT 0
70309: PPUSH
70310: PPUSH
// begin enable ;
70311: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
70312: LD_ADDR_VAR 0 2
70316: PUSH
70317: LD_INT 22
70319: PUSH
70320: LD_OWVAR 2
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: PUSH
70329: LD_INT 2
70331: PUSH
70332: LD_INT 34
70334: PUSH
70335: LD_INT 11
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: LD_INT 34
70344: PUSH
70345: LD_INT 30
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: LIST
70356: PUSH
70357: EMPTY
70358: LIST
70359: LIST
70360: PPUSH
70361: CALL_OW 69
70365: ST_TO_ADDR
// if not tmp then
70366: LD_VAR 0 2
70370: NOT
70371: IFFALSE 70375
// exit ;
70373: GO 70404
// for i in tmp do
70375: LD_ADDR_VAR 0 1
70379: PUSH
70380: LD_VAR 0 2
70384: PUSH
70385: FOR_IN
70386: IFFALSE 70402
// begin SetLives ( i , 0 ) ;
70388: LD_VAR 0 1
70392: PPUSH
70393: LD_INT 0
70395: PPUSH
70396: CALL_OW 234
// end ;
70400: GO 70385
70402: POP
70403: POP
// end ;
70404: PPOPN 2
70406: END
// every 0 0$1 trigger StreamModeActive and sBunker do
70407: LD_EXP 47
70411: PUSH
70412: LD_EXP 57
70416: AND
70417: IFFALSE 70437
70419: GO 70421
70421: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
70422: LD_INT 32
70424: PPUSH
70425: LD_OWVAR 2
70429: PPUSH
70430: LD_INT 0
70432: PPUSH
70433: CALL_OW 324
70437: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
70438: LD_EXP 47
70442: PUSH
70443: LD_EXP 58
70447: AND
70448: IFFALSE 70629
70450: GO 70452
70452: DISABLE
70453: LD_INT 0
70455: PPUSH
70456: PPUSH
70457: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
70458: LD_ADDR_VAR 0 2
70462: PUSH
70463: LD_INT 22
70465: PUSH
70466: LD_OWVAR 2
70470: PUSH
70471: EMPTY
70472: LIST
70473: LIST
70474: PUSH
70475: LD_INT 33
70477: PUSH
70478: LD_INT 3
70480: PUSH
70481: EMPTY
70482: LIST
70483: LIST
70484: PUSH
70485: EMPTY
70486: LIST
70487: LIST
70488: PPUSH
70489: CALL_OW 69
70493: ST_TO_ADDR
// if not tmp then
70494: LD_VAR 0 2
70498: NOT
70499: IFFALSE 70503
// exit ;
70501: GO 70629
// side := 0 ;
70503: LD_ADDR_VAR 0 3
70507: PUSH
70508: LD_INT 0
70510: ST_TO_ADDR
// for i := 1 to 8 do
70511: LD_ADDR_VAR 0 1
70515: PUSH
70516: DOUBLE
70517: LD_INT 1
70519: DEC
70520: ST_TO_ADDR
70521: LD_INT 8
70523: PUSH
70524: FOR_TO
70525: IFFALSE 70573
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
70527: LD_OWVAR 2
70531: PUSH
70532: LD_VAR 0 1
70536: NONEQUAL
70537: PUSH
70538: LD_OWVAR 2
70542: PPUSH
70543: LD_VAR 0 1
70547: PPUSH
70548: CALL_OW 81
70552: PUSH
70553: LD_INT 2
70555: EQUAL
70556: AND
70557: IFFALSE 70571
// begin side := i ;
70559: LD_ADDR_VAR 0 3
70563: PUSH
70564: LD_VAR 0 1
70568: ST_TO_ADDR
// break ;
70569: GO 70573
// end ;
70571: GO 70524
70573: POP
70574: POP
// if not side then
70575: LD_VAR 0 3
70579: NOT
70580: IFFALSE 70584
// exit ;
70582: GO 70629
// for i := 1 to tmp do
70584: LD_ADDR_VAR 0 1
70588: PUSH
70589: DOUBLE
70590: LD_INT 1
70592: DEC
70593: ST_TO_ADDR
70594: LD_VAR 0 2
70598: PUSH
70599: FOR_TO
70600: IFFALSE 70627
// if Prob ( 60 ) then
70602: LD_INT 60
70604: PPUSH
70605: CALL_OW 13
70609: IFFALSE 70625
// SetSide ( i , side ) ;
70611: LD_VAR 0 1
70615: PPUSH
70616: LD_VAR 0 3
70620: PPUSH
70621: CALL_OW 235
70625: GO 70599
70627: POP
70628: POP
// end ;
70629: PPOPN 3
70631: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
70632: LD_EXP 47
70636: PUSH
70637: LD_EXP 60
70641: AND
70642: IFFALSE 70761
70644: GO 70646
70646: DISABLE
70647: LD_INT 0
70649: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
70650: LD_ADDR_VAR 0 1
70654: PUSH
70655: LD_INT 22
70657: PUSH
70658: LD_OWVAR 2
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: PUSH
70667: LD_INT 21
70669: PUSH
70670: LD_INT 1
70672: PUSH
70673: EMPTY
70674: LIST
70675: LIST
70676: PUSH
70677: LD_INT 3
70679: PUSH
70680: LD_INT 23
70682: PUSH
70683: LD_INT 0
70685: PUSH
70686: EMPTY
70687: LIST
70688: LIST
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: PUSH
70694: EMPTY
70695: LIST
70696: LIST
70697: LIST
70698: PPUSH
70699: CALL_OW 69
70703: PUSH
70704: FOR_IN
70705: IFFALSE 70759
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
70707: LD_VAR 0 1
70711: PPUSH
70712: CALL_OW 257
70716: PUSH
70717: LD_INT 1
70719: PUSH
70720: LD_INT 2
70722: PUSH
70723: LD_INT 3
70725: PUSH
70726: LD_INT 4
70728: PUSH
70729: EMPTY
70730: LIST
70731: LIST
70732: LIST
70733: LIST
70734: IN
70735: IFFALSE 70757
// SetClass ( un , rand ( 1 , 4 ) ) ;
70737: LD_VAR 0 1
70741: PPUSH
70742: LD_INT 1
70744: PPUSH
70745: LD_INT 4
70747: PPUSH
70748: CALL_OW 12
70752: PPUSH
70753: CALL_OW 336
70757: GO 70704
70759: POP
70760: POP
// end ;
70761: PPOPN 1
70763: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
70764: LD_EXP 47
70768: PUSH
70769: LD_EXP 59
70773: AND
70774: IFFALSE 70853
70776: GO 70778
70778: DISABLE
70779: LD_INT 0
70781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
70782: LD_ADDR_VAR 0 1
70786: PUSH
70787: LD_INT 22
70789: PUSH
70790: LD_OWVAR 2
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 21
70801: PUSH
70802: LD_INT 3
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: PPUSH
70813: CALL_OW 69
70817: ST_TO_ADDR
// if not tmp then
70818: LD_VAR 0 1
70822: NOT
70823: IFFALSE 70827
// exit ;
70825: GO 70853
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
70827: LD_VAR 0 1
70831: PUSH
70832: LD_INT 1
70834: PPUSH
70835: LD_VAR 0 1
70839: PPUSH
70840: CALL_OW 12
70844: ARRAY
70845: PPUSH
70846: LD_INT 100
70848: PPUSH
70849: CALL_OW 234
// end ;
70853: PPOPN 1
70855: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
70856: LD_EXP 47
70860: PUSH
70861: LD_EXP 61
70865: AND
70866: IFFALSE 70964
70868: GO 70870
70870: DISABLE
70871: LD_INT 0
70873: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70874: LD_ADDR_VAR 0 1
70878: PUSH
70879: LD_INT 22
70881: PUSH
70882: LD_OWVAR 2
70886: PUSH
70887: EMPTY
70888: LIST
70889: LIST
70890: PUSH
70891: LD_INT 21
70893: PUSH
70894: LD_INT 1
70896: PUSH
70897: EMPTY
70898: LIST
70899: LIST
70900: PUSH
70901: EMPTY
70902: LIST
70903: LIST
70904: PPUSH
70905: CALL_OW 69
70909: ST_TO_ADDR
// if not tmp then
70910: LD_VAR 0 1
70914: NOT
70915: IFFALSE 70919
// exit ;
70917: GO 70964
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
70919: LD_VAR 0 1
70923: PUSH
70924: LD_INT 1
70926: PPUSH
70927: LD_VAR 0 1
70931: PPUSH
70932: CALL_OW 12
70936: ARRAY
70937: PPUSH
70938: LD_INT 1
70940: PPUSH
70941: LD_INT 4
70943: PPUSH
70944: CALL_OW 12
70948: PPUSH
70949: LD_INT 3000
70951: PPUSH
70952: LD_INT 9000
70954: PPUSH
70955: CALL_OW 12
70959: PPUSH
70960: CALL_OW 492
// end ;
70964: PPOPN 1
70966: END
// every 0 0$1 trigger StreamModeActive and sDepot do
70967: LD_EXP 47
70971: PUSH
70972: LD_EXP 62
70976: AND
70977: IFFALSE 70997
70979: GO 70981
70981: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
70982: LD_INT 1
70984: PPUSH
70985: LD_OWVAR 2
70989: PPUSH
70990: LD_INT 0
70992: PPUSH
70993: CALL_OW 324
70997: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
70998: LD_EXP 47
71002: PUSH
71003: LD_EXP 63
71007: AND
71008: IFFALSE 71091
71010: GO 71012
71012: DISABLE
71013: LD_INT 0
71015: PPUSH
71016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
71017: LD_ADDR_VAR 0 2
71021: PUSH
71022: LD_INT 22
71024: PUSH
71025: LD_OWVAR 2
71029: PUSH
71030: EMPTY
71031: LIST
71032: LIST
71033: PUSH
71034: LD_INT 21
71036: PUSH
71037: LD_INT 3
71039: PUSH
71040: EMPTY
71041: LIST
71042: LIST
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: PPUSH
71048: CALL_OW 69
71052: ST_TO_ADDR
// if not tmp then
71053: LD_VAR 0 2
71057: NOT
71058: IFFALSE 71062
// exit ;
71060: GO 71091
// for i in tmp do
71062: LD_ADDR_VAR 0 1
71066: PUSH
71067: LD_VAR 0 2
71071: PUSH
71072: FOR_IN
71073: IFFALSE 71089
// SetBLevel ( i , 10 ) ;
71075: LD_VAR 0 1
71079: PPUSH
71080: LD_INT 10
71082: PPUSH
71083: CALL_OW 241
71087: GO 71072
71089: POP
71090: POP
// end ;
71091: PPOPN 2
71093: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
71094: LD_EXP 47
71098: PUSH
71099: LD_EXP 64
71103: AND
71104: IFFALSE 71215
71106: GO 71108
71108: DISABLE
71109: LD_INT 0
71111: PPUSH
71112: PPUSH
71113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71114: LD_ADDR_VAR 0 3
71118: PUSH
71119: LD_INT 22
71121: PUSH
71122: LD_OWVAR 2
71126: PUSH
71127: EMPTY
71128: LIST
71129: LIST
71130: PUSH
71131: LD_INT 25
71133: PUSH
71134: LD_INT 1
71136: PUSH
71137: EMPTY
71138: LIST
71139: LIST
71140: PUSH
71141: EMPTY
71142: LIST
71143: LIST
71144: PPUSH
71145: CALL_OW 69
71149: ST_TO_ADDR
// if not tmp then
71150: LD_VAR 0 3
71154: NOT
71155: IFFALSE 71159
// exit ;
71157: GO 71215
// un := tmp [ rand ( 1 , tmp ) ] ;
71159: LD_ADDR_VAR 0 2
71163: PUSH
71164: LD_VAR 0 3
71168: PUSH
71169: LD_INT 1
71171: PPUSH
71172: LD_VAR 0 3
71176: PPUSH
71177: CALL_OW 12
71181: ARRAY
71182: ST_TO_ADDR
// if Crawls ( un ) then
71183: LD_VAR 0 2
71187: PPUSH
71188: CALL_OW 318
71192: IFFALSE 71203
// ComWalk ( un ) ;
71194: LD_VAR 0 2
71198: PPUSH
71199: CALL_OW 138
// SetClass ( un , class_sniper ) ;
71203: LD_VAR 0 2
71207: PPUSH
71208: LD_INT 5
71210: PPUSH
71211: CALL_OW 336
// end ;
71215: PPOPN 3
71217: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
71218: LD_EXP 47
71222: PUSH
71223: LD_EXP 65
71227: AND
71228: PUSH
71229: LD_OWVAR 67
71233: PUSH
71234: LD_INT 4
71236: LESS
71237: AND
71238: IFFALSE 71257
71240: GO 71242
71242: DISABLE
// begin Difficulty := Difficulty + 1 ;
71243: LD_ADDR_OWVAR 67
71247: PUSH
71248: LD_OWVAR 67
71252: PUSH
71253: LD_INT 1
71255: PLUS
71256: ST_TO_ADDR
// end ;
71257: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
71258: LD_EXP 47
71262: PUSH
71263: LD_EXP 66
71267: AND
71268: IFFALSE 71371
71270: GO 71272
71272: DISABLE
71273: LD_INT 0
71275: PPUSH
// begin for i := 1 to 5 do
71276: LD_ADDR_VAR 0 1
71280: PUSH
71281: DOUBLE
71282: LD_INT 1
71284: DEC
71285: ST_TO_ADDR
71286: LD_INT 5
71288: PUSH
71289: FOR_TO
71290: IFFALSE 71369
// begin uc_nation := nation_nature ;
71292: LD_ADDR_OWVAR 21
71296: PUSH
71297: LD_INT 0
71299: ST_TO_ADDR
// uc_side := 0 ;
71300: LD_ADDR_OWVAR 20
71304: PUSH
71305: LD_INT 0
71307: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
71308: LD_ADDR_OWVAR 29
71312: PUSH
71313: LD_INT 12
71315: PUSH
71316: LD_INT 12
71318: PUSH
71319: EMPTY
71320: LIST
71321: LIST
71322: ST_TO_ADDR
// hc_agressivity := 20 ;
71323: LD_ADDR_OWVAR 35
71327: PUSH
71328: LD_INT 20
71330: ST_TO_ADDR
// hc_class := class_tiger ;
71331: LD_ADDR_OWVAR 28
71335: PUSH
71336: LD_INT 14
71338: ST_TO_ADDR
// hc_gallery :=  ;
71339: LD_ADDR_OWVAR 33
71343: PUSH
71344: LD_STRING 
71346: ST_TO_ADDR
// hc_name :=  ;
71347: LD_ADDR_OWVAR 26
71351: PUSH
71352: LD_STRING 
71354: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
71355: CALL_OW 44
71359: PPUSH
71360: LD_INT 0
71362: PPUSH
71363: CALL_OW 51
// end ;
71367: GO 71289
71369: POP
71370: POP
// end ;
71371: PPOPN 1
71373: END
// every 0 0$1 trigger StreamModeActive and sBomb do
71374: LD_EXP 47
71378: PUSH
71379: LD_EXP 67
71383: AND
71384: IFFALSE 71393
71386: GO 71388
71388: DISABLE
// StreamSibBomb ;
71389: CALL 71394 0 0
71393: END
// export function StreamSibBomb ; var i , x , y ; begin
71394: LD_INT 0
71396: PPUSH
71397: PPUSH
71398: PPUSH
71399: PPUSH
// result := false ;
71400: LD_ADDR_VAR 0 1
71404: PUSH
71405: LD_INT 0
71407: ST_TO_ADDR
// for i := 1 to 16 do
71408: LD_ADDR_VAR 0 2
71412: PUSH
71413: DOUBLE
71414: LD_INT 1
71416: DEC
71417: ST_TO_ADDR
71418: LD_INT 16
71420: PUSH
71421: FOR_TO
71422: IFFALSE 71621
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
71424: LD_ADDR_VAR 0 3
71428: PUSH
71429: LD_INT 10
71431: PUSH
71432: LD_INT 20
71434: PUSH
71435: LD_INT 30
71437: PUSH
71438: LD_INT 40
71440: PUSH
71441: LD_INT 50
71443: PUSH
71444: LD_INT 60
71446: PUSH
71447: LD_INT 70
71449: PUSH
71450: LD_INT 80
71452: PUSH
71453: LD_INT 90
71455: PUSH
71456: LD_INT 100
71458: PUSH
71459: LD_INT 110
71461: PUSH
71462: LD_INT 120
71464: PUSH
71465: LD_INT 130
71467: PUSH
71468: LD_INT 140
71470: PUSH
71471: LD_INT 150
71473: PUSH
71474: EMPTY
71475: LIST
71476: LIST
71477: LIST
71478: LIST
71479: LIST
71480: LIST
71481: LIST
71482: LIST
71483: LIST
71484: LIST
71485: LIST
71486: LIST
71487: LIST
71488: LIST
71489: LIST
71490: PUSH
71491: LD_INT 1
71493: PPUSH
71494: LD_INT 15
71496: PPUSH
71497: CALL_OW 12
71501: ARRAY
71502: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
71503: LD_ADDR_VAR 0 4
71507: PUSH
71508: LD_INT 10
71510: PUSH
71511: LD_INT 20
71513: PUSH
71514: LD_INT 30
71516: PUSH
71517: LD_INT 40
71519: PUSH
71520: LD_INT 50
71522: PUSH
71523: LD_INT 60
71525: PUSH
71526: LD_INT 70
71528: PUSH
71529: LD_INT 80
71531: PUSH
71532: LD_INT 90
71534: PUSH
71535: LD_INT 100
71537: PUSH
71538: LD_INT 110
71540: PUSH
71541: LD_INT 120
71543: PUSH
71544: LD_INT 130
71546: PUSH
71547: LD_INT 140
71549: PUSH
71550: LD_INT 150
71552: PUSH
71553: EMPTY
71554: LIST
71555: LIST
71556: LIST
71557: LIST
71558: LIST
71559: LIST
71560: LIST
71561: LIST
71562: LIST
71563: LIST
71564: LIST
71565: LIST
71566: LIST
71567: LIST
71568: LIST
71569: PUSH
71570: LD_INT 1
71572: PPUSH
71573: LD_INT 15
71575: PPUSH
71576: CALL_OW 12
71580: ARRAY
71581: ST_TO_ADDR
// if ValidHex ( x , y ) then
71582: LD_VAR 0 3
71586: PPUSH
71587: LD_VAR 0 4
71591: PPUSH
71592: CALL_OW 488
71596: IFFALSE 71619
// begin result := [ x , y ] ;
71598: LD_ADDR_VAR 0 1
71602: PUSH
71603: LD_VAR 0 3
71607: PUSH
71608: LD_VAR 0 4
71612: PUSH
71613: EMPTY
71614: LIST
71615: LIST
71616: ST_TO_ADDR
// break ;
71617: GO 71621
// end ; end ;
71619: GO 71421
71621: POP
71622: POP
// if result then
71623: LD_VAR 0 1
71627: IFFALSE 71687
// begin ToLua ( playSibBomb() ) ;
71629: LD_STRING playSibBomb()
71631: PPUSH
71632: CALL_OW 559
// wait ( 0 0$14 ) ;
71636: LD_INT 490
71638: PPUSH
71639: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
71643: LD_VAR 0 1
71647: PUSH
71648: LD_INT 1
71650: ARRAY
71651: PPUSH
71652: LD_VAR 0 1
71656: PUSH
71657: LD_INT 2
71659: ARRAY
71660: PPUSH
71661: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
71665: LD_VAR 0 1
71669: PUSH
71670: LD_INT 1
71672: ARRAY
71673: PPUSH
71674: LD_VAR 0 1
71678: PUSH
71679: LD_INT 2
71681: ARRAY
71682: PPUSH
71683: CALL_OW 429
// end ; end ;
71687: LD_VAR 0 1
71691: RET
// every 0 0$1 trigger StreamModeActive and sReset do
71692: LD_EXP 47
71696: PUSH
71697: LD_EXP 69
71701: AND
71702: IFFALSE 71714
71704: GO 71706
71706: DISABLE
// YouLost (  ) ;
71707: LD_STRING 
71709: PPUSH
71710: CALL_OW 104
71714: END
// every 0 0$1 trigger StreamModeActive and sFog do
71715: LD_EXP 47
71719: PUSH
71720: LD_EXP 68
71724: AND
71725: IFFALSE 71739
71727: GO 71729
71729: DISABLE
// FogOff ( your_side ) ;
71730: LD_OWVAR 2
71734: PPUSH
71735: CALL_OW 344
71739: END
// every 0 0$1 trigger StreamModeActive and sSun do
71740: LD_EXP 47
71744: PUSH
71745: LD_EXP 70
71749: AND
71750: IFFALSE 71778
71752: GO 71754
71754: DISABLE
// begin solar_recharge_percent := 0 ;
71755: LD_ADDR_OWVAR 79
71759: PUSH
71760: LD_INT 0
71762: ST_TO_ADDR
// wait ( 5 5$00 ) ;
71763: LD_INT 10500
71765: PPUSH
71766: CALL_OW 67
// solar_recharge_percent := 100 ;
71770: LD_ADDR_OWVAR 79
71774: PUSH
71775: LD_INT 100
71777: ST_TO_ADDR
// end ;
71778: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
71779: LD_EXP 47
71783: PUSH
71784: LD_EXP 71
71788: AND
71789: IFFALSE 72028
71791: GO 71793
71793: DISABLE
71794: LD_INT 0
71796: PPUSH
71797: PPUSH
71798: PPUSH
// begin tmp := [ ] ;
71799: LD_ADDR_VAR 0 3
71803: PUSH
71804: EMPTY
71805: ST_TO_ADDR
// for i := 1 to 6 do
71806: LD_ADDR_VAR 0 1
71810: PUSH
71811: DOUBLE
71812: LD_INT 1
71814: DEC
71815: ST_TO_ADDR
71816: LD_INT 6
71818: PUSH
71819: FOR_TO
71820: IFFALSE 71925
// begin uc_nation := nation_nature ;
71822: LD_ADDR_OWVAR 21
71826: PUSH
71827: LD_INT 0
71829: ST_TO_ADDR
// uc_side := 0 ;
71830: LD_ADDR_OWVAR 20
71834: PUSH
71835: LD_INT 0
71837: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
71838: LD_ADDR_OWVAR 29
71842: PUSH
71843: LD_INT 12
71845: PUSH
71846: LD_INT 12
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: ST_TO_ADDR
// hc_agressivity := 20 ;
71853: LD_ADDR_OWVAR 35
71857: PUSH
71858: LD_INT 20
71860: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
71861: LD_ADDR_OWVAR 28
71865: PUSH
71866: LD_INT 17
71868: ST_TO_ADDR
// hc_gallery :=  ;
71869: LD_ADDR_OWVAR 33
71873: PUSH
71874: LD_STRING 
71876: ST_TO_ADDR
// hc_name :=  ;
71877: LD_ADDR_OWVAR 26
71881: PUSH
71882: LD_STRING 
71884: ST_TO_ADDR
// un := CreateHuman ;
71885: LD_ADDR_VAR 0 2
71889: PUSH
71890: CALL_OW 44
71894: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
71895: LD_VAR 0 2
71899: PPUSH
71900: LD_INT 1
71902: PPUSH
71903: CALL_OW 51
// tmp := tmp ^ un ;
71907: LD_ADDR_VAR 0 3
71911: PUSH
71912: LD_VAR 0 3
71916: PUSH
71917: LD_VAR 0 2
71921: ADD
71922: ST_TO_ADDR
// end ;
71923: GO 71819
71925: POP
71926: POP
// repeat wait ( 0 0$1 ) ;
71927: LD_INT 35
71929: PPUSH
71930: CALL_OW 67
// for un in tmp do
71934: LD_ADDR_VAR 0 2
71938: PUSH
71939: LD_VAR 0 3
71943: PUSH
71944: FOR_IN
71945: IFFALSE 72019
// begin if IsDead ( un ) then
71947: LD_VAR 0 2
71951: PPUSH
71952: CALL_OW 301
71956: IFFALSE 71976
// begin tmp := tmp diff un ;
71958: LD_ADDR_VAR 0 3
71962: PUSH
71963: LD_VAR 0 3
71967: PUSH
71968: LD_VAR 0 2
71972: DIFF
71973: ST_TO_ADDR
// continue ;
71974: GO 71944
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
71976: LD_VAR 0 2
71980: PPUSH
71981: LD_INT 3
71983: PUSH
71984: LD_INT 22
71986: PUSH
71987: LD_INT 0
71989: PUSH
71990: EMPTY
71991: LIST
71992: LIST
71993: PUSH
71994: EMPTY
71995: LIST
71996: LIST
71997: PPUSH
71998: CALL_OW 69
72002: PPUSH
72003: LD_VAR 0 2
72007: PPUSH
72008: CALL_OW 74
72012: PPUSH
72013: CALL_OW 115
// end ;
72017: GO 71944
72019: POP
72020: POP
// until not tmp ;
72021: LD_VAR 0 3
72025: NOT
72026: IFFALSE 71927
// end ;
72028: PPOPN 3
72030: END
// every 0 0$1 trigger StreamModeActive and sTroll do
72031: LD_EXP 47
72035: PUSH
72036: LD_EXP 72
72040: AND
72041: IFFALSE 72095
72043: GO 72045
72045: DISABLE
// begin ToLua ( displayTroll(); ) ;
72046: LD_STRING displayTroll();
72048: PPUSH
72049: CALL_OW 559
// wait ( 3 3$00 ) ;
72053: LD_INT 6300
72055: PPUSH
72056: CALL_OW 67
// ToLua ( hideTroll(); ) ;
72060: LD_STRING hideTroll();
72062: PPUSH
72063: CALL_OW 559
// wait ( 1 1$00 ) ;
72067: LD_INT 2100
72069: PPUSH
72070: CALL_OW 67
// ToLua ( displayTroll(); ) ;
72074: LD_STRING displayTroll();
72076: PPUSH
72077: CALL_OW 559
// wait ( 1 1$00 ) ;
72081: LD_INT 2100
72083: PPUSH
72084: CALL_OW 67
// ToLua ( hideTroll(); ) ;
72088: LD_STRING hideTroll();
72090: PPUSH
72091: CALL_OW 559
// end ;
72095: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
72096: LD_EXP 47
72100: PUSH
72101: LD_EXP 73
72105: AND
72106: IFFALSE 72169
72108: GO 72110
72110: DISABLE
72111: LD_INT 0
72113: PPUSH
// begin p := 0 ;
72114: LD_ADDR_VAR 0 1
72118: PUSH
72119: LD_INT 0
72121: ST_TO_ADDR
// repeat game_speed := 1 ;
72122: LD_ADDR_OWVAR 65
72126: PUSH
72127: LD_INT 1
72129: ST_TO_ADDR
// wait ( 0 0$1 ) ;
72130: LD_INT 35
72132: PPUSH
72133: CALL_OW 67
// p := p + 1 ;
72137: LD_ADDR_VAR 0 1
72141: PUSH
72142: LD_VAR 0 1
72146: PUSH
72147: LD_INT 1
72149: PLUS
72150: ST_TO_ADDR
// until p >= 60 ;
72151: LD_VAR 0 1
72155: PUSH
72156: LD_INT 60
72158: GREATEREQUAL
72159: IFFALSE 72122
// game_speed := 4 ;
72161: LD_ADDR_OWVAR 65
72165: PUSH
72166: LD_INT 4
72168: ST_TO_ADDR
// end ;
72169: PPOPN 1
72171: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
72172: LD_EXP 47
72176: PUSH
72177: LD_EXP 74
72181: AND
72182: IFFALSE 72328
72184: GO 72186
72186: DISABLE
72187: LD_INT 0
72189: PPUSH
72190: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
72191: LD_ADDR_VAR 0 1
72195: PUSH
72196: LD_INT 22
72198: PUSH
72199: LD_OWVAR 2
72203: PUSH
72204: EMPTY
72205: LIST
72206: LIST
72207: PUSH
72208: LD_INT 2
72210: PUSH
72211: LD_INT 30
72213: PUSH
72214: LD_INT 0
72216: PUSH
72217: EMPTY
72218: LIST
72219: LIST
72220: PUSH
72221: LD_INT 30
72223: PUSH
72224: LD_INT 1
72226: PUSH
72227: EMPTY
72228: LIST
72229: LIST
72230: PUSH
72231: EMPTY
72232: LIST
72233: LIST
72234: LIST
72235: PUSH
72236: EMPTY
72237: LIST
72238: LIST
72239: PPUSH
72240: CALL_OW 69
72244: ST_TO_ADDR
// if not depot then
72245: LD_VAR 0 1
72249: NOT
72250: IFFALSE 72254
// exit ;
72252: GO 72328
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
72254: LD_ADDR_VAR 0 2
72258: PUSH
72259: LD_VAR 0 1
72263: PUSH
72264: LD_INT 1
72266: PPUSH
72267: LD_VAR 0 1
72271: PPUSH
72272: CALL_OW 12
72276: ARRAY
72277: PPUSH
72278: CALL_OW 274
72282: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
72283: LD_VAR 0 2
72287: PPUSH
72288: LD_INT 1
72290: PPUSH
72291: LD_INT 0
72293: PPUSH
72294: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
72298: LD_VAR 0 2
72302: PPUSH
72303: LD_INT 2
72305: PPUSH
72306: LD_INT 0
72308: PPUSH
72309: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
72313: LD_VAR 0 2
72317: PPUSH
72318: LD_INT 3
72320: PPUSH
72321: LD_INT 0
72323: PPUSH
72324: CALL_OW 277
// end ;
72328: PPOPN 2
72330: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
72331: LD_EXP 47
72335: PUSH
72336: LD_EXP 75
72340: AND
72341: IFFALSE 72438
72343: GO 72345
72345: DISABLE
72346: LD_INT 0
72348: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72349: LD_ADDR_VAR 0 1
72353: PUSH
72354: LD_INT 22
72356: PUSH
72357: LD_OWVAR 2
72361: PUSH
72362: EMPTY
72363: LIST
72364: LIST
72365: PUSH
72366: LD_INT 21
72368: PUSH
72369: LD_INT 1
72371: PUSH
72372: EMPTY
72373: LIST
72374: LIST
72375: PUSH
72376: LD_INT 3
72378: PUSH
72379: LD_INT 23
72381: PUSH
72382: LD_INT 0
72384: PUSH
72385: EMPTY
72386: LIST
72387: LIST
72388: PUSH
72389: EMPTY
72390: LIST
72391: LIST
72392: PUSH
72393: EMPTY
72394: LIST
72395: LIST
72396: LIST
72397: PPUSH
72398: CALL_OW 69
72402: ST_TO_ADDR
// if not tmp then
72403: LD_VAR 0 1
72407: NOT
72408: IFFALSE 72412
// exit ;
72410: GO 72438
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
72412: LD_VAR 0 1
72416: PUSH
72417: LD_INT 1
72419: PPUSH
72420: LD_VAR 0 1
72424: PPUSH
72425: CALL_OW 12
72429: ARRAY
72430: PPUSH
72431: LD_INT 200
72433: PPUSH
72434: CALL_OW 234
// end ;
72438: PPOPN 1
72440: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
72441: LD_EXP 47
72445: PUSH
72446: LD_EXP 76
72450: AND
72451: IFFALSE 72530
72453: GO 72455
72455: DISABLE
72456: LD_INT 0
72458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
72459: LD_ADDR_VAR 0 1
72463: PUSH
72464: LD_INT 22
72466: PUSH
72467: LD_OWVAR 2
72471: PUSH
72472: EMPTY
72473: LIST
72474: LIST
72475: PUSH
72476: LD_INT 21
72478: PUSH
72479: LD_INT 2
72481: PUSH
72482: EMPTY
72483: LIST
72484: LIST
72485: PUSH
72486: EMPTY
72487: LIST
72488: LIST
72489: PPUSH
72490: CALL_OW 69
72494: ST_TO_ADDR
// if not tmp then
72495: LD_VAR 0 1
72499: NOT
72500: IFFALSE 72504
// exit ;
72502: GO 72530
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
72504: LD_VAR 0 1
72508: PUSH
72509: LD_INT 1
72511: PPUSH
72512: LD_VAR 0 1
72516: PPUSH
72517: CALL_OW 12
72521: ARRAY
72522: PPUSH
72523: LD_INT 60
72525: PPUSH
72526: CALL_OW 234
// end ;
72530: PPOPN 1
72532: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
72533: LD_EXP 47
72537: PUSH
72538: LD_EXP 77
72542: AND
72543: IFFALSE 72642
72545: GO 72547
72547: DISABLE
72548: LD_INT 0
72550: PPUSH
72551: PPUSH
// begin enable ;
72552: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
72553: LD_ADDR_VAR 0 1
72557: PUSH
72558: LD_INT 22
72560: PUSH
72561: LD_OWVAR 2
72565: PUSH
72566: EMPTY
72567: LIST
72568: LIST
72569: PUSH
72570: LD_INT 61
72572: PUSH
72573: EMPTY
72574: LIST
72575: PUSH
72576: LD_INT 33
72578: PUSH
72579: LD_INT 2
72581: PUSH
72582: EMPTY
72583: LIST
72584: LIST
72585: PUSH
72586: EMPTY
72587: LIST
72588: LIST
72589: LIST
72590: PPUSH
72591: CALL_OW 69
72595: ST_TO_ADDR
// if not tmp then
72596: LD_VAR 0 1
72600: NOT
72601: IFFALSE 72605
// exit ;
72603: GO 72642
// for i in tmp do
72605: LD_ADDR_VAR 0 2
72609: PUSH
72610: LD_VAR 0 1
72614: PUSH
72615: FOR_IN
72616: IFFALSE 72640
// if IsControledBy ( i ) then
72618: LD_VAR 0 2
72622: PPUSH
72623: CALL_OW 312
72627: IFFALSE 72638
// ComUnlink ( i ) ;
72629: LD_VAR 0 2
72633: PPUSH
72634: CALL_OW 136
72638: GO 72615
72640: POP
72641: POP
// end ;
72642: PPOPN 2
72644: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
72645: LD_EXP 47
72649: PUSH
72650: LD_EXP 78
72654: AND
72655: IFFALSE 72795
72657: GO 72659
72659: DISABLE
72660: LD_INT 0
72662: PPUSH
72663: PPUSH
// begin ToLua ( displayPowell(); ) ;
72664: LD_STRING displayPowell();
72666: PPUSH
72667: CALL_OW 559
// uc_side := 0 ;
72671: LD_ADDR_OWVAR 20
72675: PUSH
72676: LD_INT 0
72678: ST_TO_ADDR
// uc_nation := 2 ;
72679: LD_ADDR_OWVAR 21
72683: PUSH
72684: LD_INT 2
72686: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
72687: LD_ADDR_OWVAR 37
72691: PUSH
72692: LD_INT 14
72694: ST_TO_ADDR
// vc_engine := engine_siberite ;
72695: LD_ADDR_OWVAR 39
72699: PUSH
72700: LD_INT 3
72702: ST_TO_ADDR
// vc_control := control_apeman ;
72703: LD_ADDR_OWVAR 38
72707: PUSH
72708: LD_INT 5
72710: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
72711: LD_ADDR_OWVAR 40
72715: PUSH
72716: LD_INT 29
72718: ST_TO_ADDR
// un := CreateVehicle ;
72719: LD_ADDR_VAR 0 2
72723: PUSH
72724: CALL_OW 45
72728: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
72729: LD_VAR 0 2
72733: PPUSH
72734: LD_INT 1
72736: PPUSH
72737: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
72741: LD_INT 35
72743: PPUSH
72744: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
72748: LD_VAR 0 2
72752: PPUSH
72753: LD_INT 22
72755: PUSH
72756: LD_OWVAR 2
72760: PUSH
72761: EMPTY
72762: LIST
72763: LIST
72764: PPUSH
72765: CALL_OW 69
72769: PPUSH
72770: LD_VAR 0 2
72774: PPUSH
72775: CALL_OW 74
72779: PPUSH
72780: CALL_OW 115
// until IsDead ( un ) ;
72784: LD_VAR 0 2
72788: PPUSH
72789: CALL_OW 301
72793: IFFALSE 72741
// end ;
72795: PPOPN 2
72797: END
// every 0 0$1 trigger StreamModeActive and sStu do
72798: LD_EXP 47
72802: PUSH
72803: LD_EXP 86
72807: AND
72808: IFFALSE 72824
72810: GO 72812
72812: DISABLE
// begin ToLua ( displayStucuk(); ) ;
72813: LD_STRING displayStucuk();
72815: PPUSH
72816: CALL_OW 559
// ResetFog ;
72820: CALL_OW 335
// end ;
72824: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
72825: LD_EXP 47
72829: PUSH
72830: LD_EXP 79
72834: AND
72835: IFFALSE 72976
72837: GO 72839
72839: DISABLE
72840: LD_INT 0
72842: PPUSH
72843: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
72844: LD_ADDR_VAR 0 2
72848: PUSH
72849: LD_INT 22
72851: PUSH
72852: LD_OWVAR 2
72856: PUSH
72857: EMPTY
72858: LIST
72859: LIST
72860: PUSH
72861: LD_INT 21
72863: PUSH
72864: LD_INT 1
72866: PUSH
72867: EMPTY
72868: LIST
72869: LIST
72870: PUSH
72871: EMPTY
72872: LIST
72873: LIST
72874: PPUSH
72875: CALL_OW 69
72879: ST_TO_ADDR
// if not tmp then
72880: LD_VAR 0 2
72884: NOT
72885: IFFALSE 72889
// exit ;
72887: GO 72976
// un := tmp [ rand ( 1 , tmp ) ] ;
72889: LD_ADDR_VAR 0 1
72893: PUSH
72894: LD_VAR 0 2
72898: PUSH
72899: LD_INT 1
72901: PPUSH
72902: LD_VAR 0 2
72906: PPUSH
72907: CALL_OW 12
72911: ARRAY
72912: ST_TO_ADDR
// SetSide ( un , 0 ) ;
72913: LD_VAR 0 1
72917: PPUSH
72918: LD_INT 0
72920: PPUSH
72921: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
72925: LD_VAR 0 1
72929: PPUSH
72930: LD_OWVAR 3
72934: PUSH
72935: LD_VAR 0 1
72939: DIFF
72940: PPUSH
72941: LD_VAR 0 1
72945: PPUSH
72946: CALL_OW 74
72950: PPUSH
72951: CALL_OW 115
// wait ( 0 0$20 ) ;
72955: LD_INT 700
72957: PPUSH
72958: CALL_OW 67
// SetSide ( un , your_side ) ;
72962: LD_VAR 0 1
72966: PPUSH
72967: LD_OWVAR 2
72971: PPUSH
72972: CALL_OW 235
// end ;
72976: PPOPN 2
72978: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
72979: LD_EXP 47
72983: PUSH
72984: LD_EXP 80
72988: AND
72989: IFFALSE 73095
72991: GO 72993
72993: DISABLE
72994: LD_INT 0
72996: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
72997: LD_ADDR_VAR 0 1
73001: PUSH
73002: LD_INT 22
73004: PUSH
73005: LD_OWVAR 2
73009: PUSH
73010: EMPTY
73011: LIST
73012: LIST
73013: PUSH
73014: LD_INT 2
73016: PUSH
73017: LD_INT 30
73019: PUSH
73020: LD_INT 0
73022: PUSH
73023: EMPTY
73024: LIST
73025: LIST
73026: PUSH
73027: LD_INT 30
73029: PUSH
73030: LD_INT 1
73032: PUSH
73033: EMPTY
73034: LIST
73035: LIST
73036: PUSH
73037: EMPTY
73038: LIST
73039: LIST
73040: LIST
73041: PUSH
73042: EMPTY
73043: LIST
73044: LIST
73045: PPUSH
73046: CALL_OW 69
73050: ST_TO_ADDR
// if not depot then
73051: LD_VAR 0 1
73055: NOT
73056: IFFALSE 73060
// exit ;
73058: GO 73095
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
73060: LD_VAR 0 1
73064: PUSH
73065: LD_INT 1
73067: ARRAY
73068: PPUSH
73069: CALL_OW 250
73073: PPUSH
73074: LD_VAR 0 1
73078: PUSH
73079: LD_INT 1
73081: ARRAY
73082: PPUSH
73083: CALL_OW 251
73087: PPUSH
73088: LD_INT 70
73090: PPUSH
73091: CALL_OW 495
// end ;
73095: PPOPN 1
73097: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
73098: LD_EXP 47
73102: PUSH
73103: LD_EXP 81
73107: AND
73108: IFFALSE 73319
73110: GO 73112
73112: DISABLE
73113: LD_INT 0
73115: PPUSH
73116: PPUSH
73117: PPUSH
73118: PPUSH
73119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
73120: LD_ADDR_VAR 0 5
73124: PUSH
73125: LD_INT 22
73127: PUSH
73128: LD_OWVAR 2
73132: PUSH
73133: EMPTY
73134: LIST
73135: LIST
73136: PUSH
73137: LD_INT 21
73139: PUSH
73140: LD_INT 1
73142: PUSH
73143: EMPTY
73144: LIST
73145: LIST
73146: PUSH
73147: EMPTY
73148: LIST
73149: LIST
73150: PPUSH
73151: CALL_OW 69
73155: ST_TO_ADDR
// if not tmp then
73156: LD_VAR 0 5
73160: NOT
73161: IFFALSE 73165
// exit ;
73163: GO 73319
// for i in tmp do
73165: LD_ADDR_VAR 0 1
73169: PUSH
73170: LD_VAR 0 5
73174: PUSH
73175: FOR_IN
73176: IFFALSE 73317
// begin d := rand ( 0 , 5 ) ;
73178: LD_ADDR_VAR 0 4
73182: PUSH
73183: LD_INT 0
73185: PPUSH
73186: LD_INT 5
73188: PPUSH
73189: CALL_OW 12
73193: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
73194: LD_ADDR_VAR 0 2
73198: PUSH
73199: LD_VAR 0 1
73203: PPUSH
73204: CALL_OW 250
73208: PPUSH
73209: LD_VAR 0 4
73213: PPUSH
73214: LD_INT 3
73216: PPUSH
73217: LD_INT 12
73219: PPUSH
73220: CALL_OW 12
73224: PPUSH
73225: CALL_OW 272
73229: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
73230: LD_ADDR_VAR 0 3
73234: PUSH
73235: LD_VAR 0 1
73239: PPUSH
73240: CALL_OW 251
73244: PPUSH
73245: LD_VAR 0 4
73249: PPUSH
73250: LD_INT 3
73252: PPUSH
73253: LD_INT 12
73255: PPUSH
73256: CALL_OW 12
73260: PPUSH
73261: CALL_OW 273
73265: ST_TO_ADDR
// if ValidHex ( x , y ) then
73266: LD_VAR 0 2
73270: PPUSH
73271: LD_VAR 0 3
73275: PPUSH
73276: CALL_OW 488
73280: IFFALSE 73315
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
73282: LD_VAR 0 1
73286: PPUSH
73287: LD_VAR 0 2
73291: PPUSH
73292: LD_VAR 0 3
73296: PPUSH
73297: LD_INT 3
73299: PPUSH
73300: LD_INT 6
73302: PPUSH
73303: CALL_OW 12
73307: PPUSH
73308: LD_INT 1
73310: PPUSH
73311: CALL_OW 483
// end ;
73315: GO 73175
73317: POP
73318: POP
// end ;
73319: PPOPN 5
73321: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
73322: LD_EXP 47
73326: PUSH
73327: LD_EXP 82
73331: AND
73332: IFFALSE 73426
73334: GO 73336
73336: DISABLE
73337: LD_INT 0
73339: PPUSH
73340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
73341: LD_ADDR_VAR 0 2
73345: PUSH
73346: LD_INT 22
73348: PUSH
73349: LD_OWVAR 2
73353: PUSH
73354: EMPTY
73355: LIST
73356: LIST
73357: PUSH
73358: LD_INT 32
73360: PUSH
73361: LD_INT 1
73363: PUSH
73364: EMPTY
73365: LIST
73366: LIST
73367: PUSH
73368: LD_INT 21
73370: PUSH
73371: LD_INT 2
73373: PUSH
73374: EMPTY
73375: LIST
73376: LIST
73377: PUSH
73378: EMPTY
73379: LIST
73380: LIST
73381: LIST
73382: PPUSH
73383: CALL_OW 69
73387: ST_TO_ADDR
// if not tmp then
73388: LD_VAR 0 2
73392: NOT
73393: IFFALSE 73397
// exit ;
73395: GO 73426
// for i in tmp do
73397: LD_ADDR_VAR 0 1
73401: PUSH
73402: LD_VAR 0 2
73406: PUSH
73407: FOR_IN
73408: IFFALSE 73424
// SetFuel ( i , 0 ) ;
73410: LD_VAR 0 1
73414: PPUSH
73415: LD_INT 0
73417: PPUSH
73418: CALL_OW 240
73422: GO 73407
73424: POP
73425: POP
// end ;
73426: PPOPN 2
73428: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
73429: LD_EXP 47
73433: PUSH
73434: LD_EXP 83
73438: AND
73439: IFFALSE 73505
73441: GO 73443
73443: DISABLE
73444: LD_INT 0
73446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
73447: LD_ADDR_VAR 0 1
73451: PUSH
73452: LD_INT 22
73454: PUSH
73455: LD_OWVAR 2
73459: PUSH
73460: EMPTY
73461: LIST
73462: LIST
73463: PUSH
73464: LD_INT 30
73466: PUSH
73467: LD_INT 29
73469: PUSH
73470: EMPTY
73471: LIST
73472: LIST
73473: PUSH
73474: EMPTY
73475: LIST
73476: LIST
73477: PPUSH
73478: CALL_OW 69
73482: ST_TO_ADDR
// if not tmp then
73483: LD_VAR 0 1
73487: NOT
73488: IFFALSE 73492
// exit ;
73490: GO 73505
// DestroyUnit ( tmp [ 1 ] ) ;
73492: LD_VAR 0 1
73496: PUSH
73497: LD_INT 1
73499: ARRAY
73500: PPUSH
73501: CALL_OW 65
// end ;
73505: PPOPN 1
73507: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
73508: LD_EXP 47
73512: PUSH
73513: LD_EXP 85
73517: AND
73518: IFFALSE 73647
73520: GO 73522
73522: DISABLE
73523: LD_INT 0
73525: PPUSH
// begin uc_side := 0 ;
73526: LD_ADDR_OWVAR 20
73530: PUSH
73531: LD_INT 0
73533: ST_TO_ADDR
// uc_nation := nation_arabian ;
73534: LD_ADDR_OWVAR 21
73538: PUSH
73539: LD_INT 2
73541: ST_TO_ADDR
// hc_gallery :=  ;
73542: LD_ADDR_OWVAR 33
73546: PUSH
73547: LD_STRING 
73549: ST_TO_ADDR
// hc_name :=  ;
73550: LD_ADDR_OWVAR 26
73554: PUSH
73555: LD_STRING 
73557: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
73558: LD_INT 1
73560: PPUSH
73561: LD_INT 11
73563: PPUSH
73564: LD_INT 10
73566: PPUSH
73567: CALL_OW 380
// un := CreateHuman ;
73571: LD_ADDR_VAR 0 1
73575: PUSH
73576: CALL_OW 44
73580: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73581: LD_VAR 0 1
73585: PPUSH
73586: LD_INT 1
73588: PPUSH
73589: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
73593: LD_INT 35
73595: PPUSH
73596: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
73600: LD_VAR 0 1
73604: PPUSH
73605: LD_INT 22
73607: PUSH
73608: LD_OWVAR 2
73612: PUSH
73613: EMPTY
73614: LIST
73615: LIST
73616: PPUSH
73617: CALL_OW 69
73621: PPUSH
73622: LD_VAR 0 1
73626: PPUSH
73627: CALL_OW 74
73631: PPUSH
73632: CALL_OW 115
// until IsDead ( un ) ;
73636: LD_VAR 0 1
73640: PPUSH
73641: CALL_OW 301
73645: IFFALSE 73593
// end ;
73647: PPOPN 1
73649: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
73650: LD_EXP 47
73654: PUSH
73655: LD_EXP 87
73659: AND
73660: IFFALSE 73672
73662: GO 73664
73664: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
73665: LD_STRING earthquake(getX(game), 0, 32)
73667: PPUSH
73668: CALL_OW 559
73672: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
73673: LD_EXP 47
73677: PUSH
73678: LD_EXP 88
73682: AND
73683: IFFALSE 73774
73685: GO 73687
73687: DISABLE
73688: LD_INT 0
73690: PPUSH
// begin enable ;
73691: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
73692: LD_ADDR_VAR 0 1
73696: PUSH
73697: LD_INT 22
73699: PUSH
73700: LD_OWVAR 2
73704: PUSH
73705: EMPTY
73706: LIST
73707: LIST
73708: PUSH
73709: LD_INT 21
73711: PUSH
73712: LD_INT 2
73714: PUSH
73715: EMPTY
73716: LIST
73717: LIST
73718: PUSH
73719: LD_INT 33
73721: PUSH
73722: LD_INT 3
73724: PUSH
73725: EMPTY
73726: LIST
73727: LIST
73728: PUSH
73729: EMPTY
73730: LIST
73731: LIST
73732: LIST
73733: PPUSH
73734: CALL_OW 69
73738: ST_TO_ADDR
// if not tmp then
73739: LD_VAR 0 1
73743: NOT
73744: IFFALSE 73748
// exit ;
73746: GO 73774
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
73748: LD_VAR 0 1
73752: PUSH
73753: LD_INT 1
73755: PPUSH
73756: LD_VAR 0 1
73760: PPUSH
73761: CALL_OW 12
73765: ARRAY
73766: PPUSH
73767: LD_INT 1
73769: PPUSH
73770: CALL_OW 234
// end ;
73774: PPOPN 1
73776: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
73777: LD_EXP 47
73781: PUSH
73782: LD_EXP 89
73786: AND
73787: IFFALSE 73928
73789: GO 73791
73791: DISABLE
73792: LD_INT 0
73794: PPUSH
73795: PPUSH
73796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73797: LD_ADDR_VAR 0 3
73801: PUSH
73802: LD_INT 22
73804: PUSH
73805: LD_OWVAR 2
73809: PUSH
73810: EMPTY
73811: LIST
73812: LIST
73813: PUSH
73814: LD_INT 25
73816: PUSH
73817: LD_INT 1
73819: PUSH
73820: EMPTY
73821: LIST
73822: LIST
73823: PUSH
73824: EMPTY
73825: LIST
73826: LIST
73827: PPUSH
73828: CALL_OW 69
73832: ST_TO_ADDR
// if not tmp then
73833: LD_VAR 0 3
73837: NOT
73838: IFFALSE 73842
// exit ;
73840: GO 73928
// un := tmp [ rand ( 1 , tmp ) ] ;
73842: LD_ADDR_VAR 0 2
73846: PUSH
73847: LD_VAR 0 3
73851: PUSH
73852: LD_INT 1
73854: PPUSH
73855: LD_VAR 0 3
73859: PPUSH
73860: CALL_OW 12
73864: ARRAY
73865: ST_TO_ADDR
// if Crawls ( un ) then
73866: LD_VAR 0 2
73870: PPUSH
73871: CALL_OW 318
73875: IFFALSE 73886
// ComWalk ( un ) ;
73877: LD_VAR 0 2
73881: PPUSH
73882: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
73886: LD_VAR 0 2
73890: PPUSH
73891: LD_INT 9
73893: PPUSH
73894: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
73898: LD_INT 28
73900: PPUSH
73901: LD_OWVAR 2
73905: PPUSH
73906: LD_INT 2
73908: PPUSH
73909: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
73913: LD_INT 29
73915: PPUSH
73916: LD_OWVAR 2
73920: PPUSH
73921: LD_INT 2
73923: PPUSH
73924: CALL_OW 322
// end ;
73928: PPOPN 3
73930: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
73931: LD_EXP 47
73935: PUSH
73936: LD_EXP 90
73940: AND
73941: IFFALSE 74052
73943: GO 73945
73945: DISABLE
73946: LD_INT 0
73948: PPUSH
73949: PPUSH
73950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73951: LD_ADDR_VAR 0 3
73955: PUSH
73956: LD_INT 22
73958: PUSH
73959: LD_OWVAR 2
73963: PUSH
73964: EMPTY
73965: LIST
73966: LIST
73967: PUSH
73968: LD_INT 25
73970: PUSH
73971: LD_INT 1
73973: PUSH
73974: EMPTY
73975: LIST
73976: LIST
73977: PUSH
73978: EMPTY
73979: LIST
73980: LIST
73981: PPUSH
73982: CALL_OW 69
73986: ST_TO_ADDR
// if not tmp then
73987: LD_VAR 0 3
73991: NOT
73992: IFFALSE 73996
// exit ;
73994: GO 74052
// un := tmp [ rand ( 1 , tmp ) ] ;
73996: LD_ADDR_VAR 0 2
74000: PUSH
74001: LD_VAR 0 3
74005: PUSH
74006: LD_INT 1
74008: PPUSH
74009: LD_VAR 0 3
74013: PPUSH
74014: CALL_OW 12
74018: ARRAY
74019: ST_TO_ADDR
// if Crawls ( un ) then
74020: LD_VAR 0 2
74024: PPUSH
74025: CALL_OW 318
74029: IFFALSE 74040
// ComWalk ( un ) ;
74031: LD_VAR 0 2
74035: PPUSH
74036: CALL_OW 138
// SetClass ( un , class_mortar ) ;
74040: LD_VAR 0 2
74044: PPUSH
74045: LD_INT 8
74047: PPUSH
74048: CALL_OW 336
// end ;
74052: PPOPN 3
74054: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
74055: LD_EXP 47
74059: PUSH
74060: LD_EXP 91
74064: AND
74065: IFFALSE 74209
74067: GO 74069
74069: DISABLE
74070: LD_INT 0
74072: PPUSH
74073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
74074: LD_ADDR_VAR 0 2
74078: PUSH
74079: LD_INT 22
74081: PUSH
74082: LD_OWVAR 2
74086: PUSH
74087: EMPTY
74088: LIST
74089: LIST
74090: PUSH
74091: LD_INT 21
74093: PUSH
74094: LD_INT 2
74096: PUSH
74097: EMPTY
74098: LIST
74099: LIST
74100: PUSH
74101: LD_INT 2
74103: PUSH
74104: LD_INT 34
74106: PUSH
74107: LD_INT 12
74109: PUSH
74110: EMPTY
74111: LIST
74112: LIST
74113: PUSH
74114: LD_INT 34
74116: PUSH
74117: LD_INT 51
74119: PUSH
74120: EMPTY
74121: LIST
74122: LIST
74123: PUSH
74124: LD_INT 34
74126: PUSH
74127: LD_INT 32
74129: PUSH
74130: EMPTY
74131: LIST
74132: LIST
74133: PUSH
74134: EMPTY
74135: LIST
74136: LIST
74137: LIST
74138: LIST
74139: PUSH
74140: EMPTY
74141: LIST
74142: LIST
74143: LIST
74144: PPUSH
74145: CALL_OW 69
74149: ST_TO_ADDR
// if not tmp then
74150: LD_VAR 0 2
74154: NOT
74155: IFFALSE 74159
// exit ;
74157: GO 74209
// for i in tmp do
74159: LD_ADDR_VAR 0 1
74163: PUSH
74164: LD_VAR 0 2
74168: PUSH
74169: FOR_IN
74170: IFFALSE 74207
// if GetCargo ( i , mat_artifact ) = 0 then
74172: LD_VAR 0 1
74176: PPUSH
74177: LD_INT 4
74179: PPUSH
74180: CALL_OW 289
74184: PUSH
74185: LD_INT 0
74187: EQUAL
74188: IFFALSE 74205
// SetCargo ( i , mat_siberit , 100 ) ;
74190: LD_VAR 0 1
74194: PPUSH
74195: LD_INT 3
74197: PPUSH
74198: LD_INT 100
74200: PPUSH
74201: CALL_OW 290
74205: GO 74169
74207: POP
74208: POP
// end ;
74209: PPOPN 2
74211: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
74212: LD_EXP 47
74216: PUSH
74217: LD_EXP 92
74221: AND
74222: IFFALSE 74405
74224: GO 74226
74226: DISABLE
74227: LD_INT 0
74229: PPUSH
74230: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
74231: LD_ADDR_VAR 0 2
74235: PUSH
74236: LD_INT 22
74238: PUSH
74239: LD_OWVAR 2
74243: PUSH
74244: EMPTY
74245: LIST
74246: LIST
74247: PPUSH
74248: CALL_OW 69
74252: ST_TO_ADDR
// if not tmp then
74253: LD_VAR 0 2
74257: NOT
74258: IFFALSE 74262
// exit ;
74260: GO 74405
// for i := 1 to 2 do
74262: LD_ADDR_VAR 0 1
74266: PUSH
74267: DOUBLE
74268: LD_INT 1
74270: DEC
74271: ST_TO_ADDR
74272: LD_INT 2
74274: PUSH
74275: FOR_TO
74276: IFFALSE 74403
// begin uc_side := your_side ;
74278: LD_ADDR_OWVAR 20
74282: PUSH
74283: LD_OWVAR 2
74287: ST_TO_ADDR
// uc_nation := nation_american ;
74288: LD_ADDR_OWVAR 21
74292: PUSH
74293: LD_INT 1
74295: ST_TO_ADDR
// vc_chassis := us_morphling ;
74296: LD_ADDR_OWVAR 37
74300: PUSH
74301: LD_INT 5
74303: ST_TO_ADDR
// vc_engine := engine_siberite ;
74304: LD_ADDR_OWVAR 39
74308: PUSH
74309: LD_INT 3
74311: ST_TO_ADDR
// vc_control := control_computer ;
74312: LD_ADDR_OWVAR 38
74316: PUSH
74317: LD_INT 3
74319: ST_TO_ADDR
// vc_weapon := us_double_laser ;
74320: LD_ADDR_OWVAR 40
74324: PUSH
74325: LD_INT 10
74327: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
74328: LD_VAR 0 2
74332: PUSH
74333: LD_INT 1
74335: ARRAY
74336: PPUSH
74337: CALL_OW 310
74341: NOT
74342: IFFALSE 74389
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
74344: CALL_OW 45
74348: PPUSH
74349: LD_VAR 0 2
74353: PUSH
74354: LD_INT 1
74356: ARRAY
74357: PPUSH
74358: CALL_OW 250
74362: PPUSH
74363: LD_VAR 0 2
74367: PUSH
74368: LD_INT 1
74370: ARRAY
74371: PPUSH
74372: CALL_OW 251
74376: PPUSH
74377: LD_INT 12
74379: PPUSH
74380: LD_INT 1
74382: PPUSH
74383: CALL_OW 50
74387: GO 74401
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
74389: CALL_OW 45
74393: PPUSH
74394: LD_INT 1
74396: PPUSH
74397: CALL_OW 51
// end ;
74401: GO 74275
74403: POP
74404: POP
// end ;
74405: PPOPN 2
74407: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
74408: LD_EXP 47
74412: PUSH
74413: LD_EXP 93
74417: AND
74418: IFFALSE 74640
74420: GO 74422
74422: DISABLE
74423: LD_INT 0
74425: PPUSH
74426: PPUSH
74427: PPUSH
74428: PPUSH
74429: PPUSH
74430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
74431: LD_ADDR_VAR 0 6
74435: PUSH
74436: LD_INT 22
74438: PUSH
74439: LD_OWVAR 2
74443: PUSH
74444: EMPTY
74445: LIST
74446: LIST
74447: PUSH
74448: LD_INT 21
74450: PUSH
74451: LD_INT 1
74453: PUSH
74454: EMPTY
74455: LIST
74456: LIST
74457: PUSH
74458: LD_INT 3
74460: PUSH
74461: LD_INT 23
74463: PUSH
74464: LD_INT 0
74466: PUSH
74467: EMPTY
74468: LIST
74469: LIST
74470: PUSH
74471: EMPTY
74472: LIST
74473: LIST
74474: PUSH
74475: EMPTY
74476: LIST
74477: LIST
74478: LIST
74479: PPUSH
74480: CALL_OW 69
74484: ST_TO_ADDR
// if not tmp then
74485: LD_VAR 0 6
74489: NOT
74490: IFFALSE 74494
// exit ;
74492: GO 74640
// s1 := rand ( 1 , 4 ) ;
74494: LD_ADDR_VAR 0 2
74498: PUSH
74499: LD_INT 1
74501: PPUSH
74502: LD_INT 4
74504: PPUSH
74505: CALL_OW 12
74509: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
74510: LD_ADDR_VAR 0 4
74514: PUSH
74515: LD_VAR 0 6
74519: PUSH
74520: LD_INT 1
74522: ARRAY
74523: PPUSH
74524: LD_VAR 0 2
74528: PPUSH
74529: CALL_OW 259
74533: ST_TO_ADDR
// if s1 = 1 then
74534: LD_VAR 0 2
74538: PUSH
74539: LD_INT 1
74541: EQUAL
74542: IFFALSE 74562
// s2 := rand ( 2 , 4 ) else
74544: LD_ADDR_VAR 0 3
74548: PUSH
74549: LD_INT 2
74551: PPUSH
74552: LD_INT 4
74554: PPUSH
74555: CALL_OW 12
74559: ST_TO_ADDR
74560: GO 74570
// s2 := 1 ;
74562: LD_ADDR_VAR 0 3
74566: PUSH
74567: LD_INT 1
74569: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
74570: LD_ADDR_VAR 0 5
74574: PUSH
74575: LD_VAR 0 6
74579: PUSH
74580: LD_INT 1
74582: ARRAY
74583: PPUSH
74584: LD_VAR 0 3
74588: PPUSH
74589: CALL_OW 259
74593: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
74594: LD_VAR 0 6
74598: PUSH
74599: LD_INT 1
74601: ARRAY
74602: PPUSH
74603: LD_VAR 0 2
74607: PPUSH
74608: LD_VAR 0 5
74612: PPUSH
74613: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
74617: LD_VAR 0 6
74621: PUSH
74622: LD_INT 1
74624: ARRAY
74625: PPUSH
74626: LD_VAR 0 3
74630: PPUSH
74631: LD_VAR 0 4
74635: PPUSH
74636: CALL_OW 237
// end ;
74640: PPOPN 6
74642: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
74643: LD_EXP 47
74647: PUSH
74648: LD_EXP 94
74652: AND
74653: IFFALSE 74732
74655: GO 74657
74657: DISABLE
74658: LD_INT 0
74660: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
74661: LD_ADDR_VAR 0 1
74665: PUSH
74666: LD_INT 22
74668: PUSH
74669: LD_OWVAR 2
74673: PUSH
74674: EMPTY
74675: LIST
74676: LIST
74677: PUSH
74678: LD_INT 30
74680: PUSH
74681: LD_INT 3
74683: PUSH
74684: EMPTY
74685: LIST
74686: LIST
74687: PUSH
74688: EMPTY
74689: LIST
74690: LIST
74691: PPUSH
74692: CALL_OW 69
74696: ST_TO_ADDR
// if not tmp then
74697: LD_VAR 0 1
74701: NOT
74702: IFFALSE 74706
// exit ;
74704: GO 74732
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
74706: LD_VAR 0 1
74710: PUSH
74711: LD_INT 1
74713: PPUSH
74714: LD_VAR 0 1
74718: PPUSH
74719: CALL_OW 12
74723: ARRAY
74724: PPUSH
74725: LD_INT 1
74727: PPUSH
74728: CALL_OW 234
// end ;
74732: PPOPN 1
74734: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
74735: LD_EXP 47
74739: PUSH
74740: LD_EXP 95
74744: AND
74745: IFFALSE 74857
74747: GO 74749
74749: DISABLE
74750: LD_INT 0
74752: PPUSH
74753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
74754: LD_ADDR_VAR 0 2
74758: PUSH
74759: LD_INT 22
74761: PUSH
74762: LD_OWVAR 2
74766: PUSH
74767: EMPTY
74768: LIST
74769: LIST
74770: PUSH
74771: LD_INT 2
74773: PUSH
74774: LD_INT 30
74776: PUSH
74777: LD_INT 27
74779: PUSH
74780: EMPTY
74781: LIST
74782: LIST
74783: PUSH
74784: LD_INT 30
74786: PUSH
74787: LD_INT 26
74789: PUSH
74790: EMPTY
74791: LIST
74792: LIST
74793: PUSH
74794: LD_INT 30
74796: PUSH
74797: LD_INT 28
74799: PUSH
74800: EMPTY
74801: LIST
74802: LIST
74803: PUSH
74804: EMPTY
74805: LIST
74806: LIST
74807: LIST
74808: LIST
74809: PUSH
74810: EMPTY
74811: LIST
74812: LIST
74813: PPUSH
74814: CALL_OW 69
74818: ST_TO_ADDR
// if not tmp then
74819: LD_VAR 0 2
74823: NOT
74824: IFFALSE 74828
// exit ;
74826: GO 74857
// for i in tmp do
74828: LD_ADDR_VAR 0 1
74832: PUSH
74833: LD_VAR 0 2
74837: PUSH
74838: FOR_IN
74839: IFFALSE 74855
// SetLives ( i , 1 ) ;
74841: LD_VAR 0 1
74845: PPUSH
74846: LD_INT 1
74848: PPUSH
74849: CALL_OW 234
74853: GO 74838
74855: POP
74856: POP
// end ;
74857: PPOPN 2
74859: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
74860: LD_EXP 47
74864: PUSH
74865: LD_EXP 96
74869: AND
74870: IFFALSE 75157
74872: GO 74874
74874: DISABLE
74875: LD_INT 0
74877: PPUSH
74878: PPUSH
74879: PPUSH
// begin i := rand ( 1 , 7 ) ;
74880: LD_ADDR_VAR 0 1
74884: PUSH
74885: LD_INT 1
74887: PPUSH
74888: LD_INT 7
74890: PPUSH
74891: CALL_OW 12
74895: ST_TO_ADDR
// case i of 1 :
74896: LD_VAR 0 1
74900: PUSH
74901: LD_INT 1
74903: DOUBLE
74904: EQUAL
74905: IFTRUE 74909
74907: GO 74919
74909: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
74910: LD_STRING earthquake(getX(game), 0, 32)
74912: PPUSH
74913: CALL_OW 559
74917: GO 75157
74919: LD_INT 2
74921: DOUBLE
74922: EQUAL
74923: IFTRUE 74927
74925: GO 74941
74927: POP
// begin ToLua ( displayStucuk(); ) ;
74928: LD_STRING displayStucuk();
74930: PPUSH
74931: CALL_OW 559
// ResetFog ;
74935: CALL_OW 335
// end ; 3 :
74939: GO 75157
74941: LD_INT 3
74943: DOUBLE
74944: EQUAL
74945: IFTRUE 74949
74947: GO 75053
74949: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74950: LD_ADDR_VAR 0 2
74954: PUSH
74955: LD_INT 22
74957: PUSH
74958: LD_OWVAR 2
74962: PUSH
74963: EMPTY
74964: LIST
74965: LIST
74966: PUSH
74967: LD_INT 25
74969: PUSH
74970: LD_INT 1
74972: PUSH
74973: EMPTY
74974: LIST
74975: LIST
74976: PUSH
74977: EMPTY
74978: LIST
74979: LIST
74980: PPUSH
74981: CALL_OW 69
74985: ST_TO_ADDR
// if not tmp then
74986: LD_VAR 0 2
74990: NOT
74991: IFFALSE 74995
// exit ;
74993: GO 75157
// un := tmp [ rand ( 1 , tmp ) ] ;
74995: LD_ADDR_VAR 0 3
74999: PUSH
75000: LD_VAR 0 2
75004: PUSH
75005: LD_INT 1
75007: PPUSH
75008: LD_VAR 0 2
75012: PPUSH
75013: CALL_OW 12
75017: ARRAY
75018: ST_TO_ADDR
// if Crawls ( un ) then
75019: LD_VAR 0 3
75023: PPUSH
75024: CALL_OW 318
75028: IFFALSE 75039
// ComWalk ( un ) ;
75030: LD_VAR 0 3
75034: PPUSH
75035: CALL_OW 138
// SetClass ( un , class_mortar ) ;
75039: LD_VAR 0 3
75043: PPUSH
75044: LD_INT 8
75046: PPUSH
75047: CALL_OW 336
// end ; 4 :
75051: GO 75157
75053: LD_INT 4
75055: DOUBLE
75056: EQUAL
75057: IFTRUE 75061
75059: GO 75135
75061: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
75062: LD_ADDR_VAR 0 2
75066: PUSH
75067: LD_INT 22
75069: PUSH
75070: LD_OWVAR 2
75074: PUSH
75075: EMPTY
75076: LIST
75077: LIST
75078: PUSH
75079: LD_INT 30
75081: PUSH
75082: LD_INT 29
75084: PUSH
75085: EMPTY
75086: LIST
75087: LIST
75088: PUSH
75089: EMPTY
75090: LIST
75091: LIST
75092: PPUSH
75093: CALL_OW 69
75097: ST_TO_ADDR
// if not tmp then
75098: LD_VAR 0 2
75102: NOT
75103: IFFALSE 75107
// exit ;
75105: GO 75157
// CenterNowOnUnits ( tmp [ 1 ] ) ;
75107: LD_VAR 0 2
75111: PUSH
75112: LD_INT 1
75114: ARRAY
75115: PPUSH
75116: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
75120: LD_VAR 0 2
75124: PUSH
75125: LD_INT 1
75127: ARRAY
75128: PPUSH
75129: CALL_OW 65
// end ; 5 .. 7 :
75133: GO 75157
75135: LD_INT 5
75137: DOUBLE
75138: GREATEREQUAL
75139: IFFALSE 75147
75141: LD_INT 7
75143: DOUBLE
75144: LESSEQUAL
75145: IFTRUE 75149
75147: GO 75156
75149: POP
// StreamSibBomb ; end ;
75150: CALL 71394 0 0
75154: GO 75157
75156: POP
// end ;
75157: PPOPN 3
75159: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
75160: LD_EXP 47
75164: PUSH
75165: LD_EXP 97
75169: AND
75170: IFFALSE 75326
75172: GO 75174
75174: DISABLE
75175: LD_INT 0
75177: PPUSH
75178: PPUSH
75179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
75180: LD_ADDR_VAR 0 2
75184: PUSH
75185: LD_INT 81
75187: PUSH
75188: LD_OWVAR 2
75192: PUSH
75193: EMPTY
75194: LIST
75195: LIST
75196: PUSH
75197: LD_INT 2
75199: PUSH
75200: LD_INT 21
75202: PUSH
75203: LD_INT 1
75205: PUSH
75206: EMPTY
75207: LIST
75208: LIST
75209: PUSH
75210: LD_INT 21
75212: PUSH
75213: LD_INT 2
75215: PUSH
75216: EMPTY
75217: LIST
75218: LIST
75219: PUSH
75220: EMPTY
75221: LIST
75222: LIST
75223: LIST
75224: PUSH
75225: EMPTY
75226: LIST
75227: LIST
75228: PPUSH
75229: CALL_OW 69
75233: ST_TO_ADDR
// if not tmp then
75234: LD_VAR 0 2
75238: NOT
75239: IFFALSE 75243
// exit ;
75241: GO 75326
// p := 0 ;
75243: LD_ADDR_VAR 0 3
75247: PUSH
75248: LD_INT 0
75250: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
75251: LD_INT 35
75253: PPUSH
75254: CALL_OW 67
// p := p + 1 ;
75258: LD_ADDR_VAR 0 3
75262: PUSH
75263: LD_VAR 0 3
75267: PUSH
75268: LD_INT 1
75270: PLUS
75271: ST_TO_ADDR
// for i in tmp do
75272: LD_ADDR_VAR 0 1
75276: PUSH
75277: LD_VAR 0 2
75281: PUSH
75282: FOR_IN
75283: IFFALSE 75314
// if GetLives ( i ) < 1000 then
75285: LD_VAR 0 1
75289: PPUSH
75290: CALL_OW 256
75294: PUSH
75295: LD_INT 1000
75297: LESS
75298: IFFALSE 75312
// SetLives ( i , 1000 ) ;
75300: LD_VAR 0 1
75304: PPUSH
75305: LD_INT 1000
75307: PPUSH
75308: CALL_OW 234
75312: GO 75282
75314: POP
75315: POP
// until p > 20 ;
75316: LD_VAR 0 3
75320: PUSH
75321: LD_INT 20
75323: GREATER
75324: IFFALSE 75251
// end ;
75326: PPOPN 3
75328: END
// every 0 0$1 trigger StreamModeActive and sTime do
75329: LD_EXP 47
75333: PUSH
75334: LD_EXP 98
75338: AND
75339: IFFALSE 75374
75341: GO 75343
75343: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
75344: LD_INT 28
75346: PPUSH
75347: LD_OWVAR 2
75351: PPUSH
75352: LD_INT 2
75354: PPUSH
75355: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
75359: LD_INT 30
75361: PPUSH
75362: LD_OWVAR 2
75366: PPUSH
75367: LD_INT 2
75369: PPUSH
75370: CALL_OW 322
// end ;
75374: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
75375: LD_EXP 47
75379: PUSH
75380: LD_EXP 99
75384: AND
75385: IFFALSE 75506
75387: GO 75389
75389: DISABLE
75390: LD_INT 0
75392: PPUSH
75393: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75394: LD_ADDR_VAR 0 2
75398: PUSH
75399: LD_INT 22
75401: PUSH
75402: LD_OWVAR 2
75406: PUSH
75407: EMPTY
75408: LIST
75409: LIST
75410: PUSH
75411: LD_INT 21
75413: PUSH
75414: LD_INT 1
75416: PUSH
75417: EMPTY
75418: LIST
75419: LIST
75420: PUSH
75421: LD_INT 3
75423: PUSH
75424: LD_INT 23
75426: PUSH
75427: LD_INT 0
75429: PUSH
75430: EMPTY
75431: LIST
75432: LIST
75433: PUSH
75434: EMPTY
75435: LIST
75436: LIST
75437: PUSH
75438: EMPTY
75439: LIST
75440: LIST
75441: LIST
75442: PPUSH
75443: CALL_OW 69
75447: ST_TO_ADDR
// if not tmp then
75448: LD_VAR 0 2
75452: NOT
75453: IFFALSE 75457
// exit ;
75455: GO 75506
// for i in tmp do
75457: LD_ADDR_VAR 0 1
75461: PUSH
75462: LD_VAR 0 2
75466: PUSH
75467: FOR_IN
75468: IFFALSE 75504
// begin if Crawls ( i ) then
75470: LD_VAR 0 1
75474: PPUSH
75475: CALL_OW 318
75479: IFFALSE 75490
// ComWalk ( i ) ;
75481: LD_VAR 0 1
75485: PPUSH
75486: CALL_OW 138
// SetClass ( i , 2 ) ;
75490: LD_VAR 0 1
75494: PPUSH
75495: LD_INT 2
75497: PPUSH
75498: CALL_OW 336
// end ;
75502: GO 75467
75504: POP
75505: POP
// end ;
75506: PPOPN 2
75508: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
75509: LD_EXP 47
75513: PUSH
75514: LD_EXP 100
75518: AND
75519: IFFALSE 75807
75521: GO 75523
75523: DISABLE
75524: LD_INT 0
75526: PPUSH
75527: PPUSH
75528: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
75529: LD_OWVAR 2
75533: PPUSH
75534: LD_INT 9
75536: PPUSH
75537: LD_INT 1
75539: PPUSH
75540: LD_INT 1
75542: PPUSH
75543: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
75547: LD_INT 9
75549: PPUSH
75550: LD_OWVAR 2
75554: PPUSH
75555: CALL_OW 343
// uc_side := 9 ;
75559: LD_ADDR_OWVAR 20
75563: PUSH
75564: LD_INT 9
75566: ST_TO_ADDR
// uc_nation := 2 ;
75567: LD_ADDR_OWVAR 21
75571: PUSH
75572: LD_INT 2
75574: ST_TO_ADDR
// hc_name := Dark Warrior ;
75575: LD_ADDR_OWVAR 26
75579: PUSH
75580: LD_STRING Dark Warrior
75582: ST_TO_ADDR
// hc_gallery :=  ;
75583: LD_ADDR_OWVAR 33
75587: PUSH
75588: LD_STRING 
75590: ST_TO_ADDR
// hc_noskilllimit := true ;
75591: LD_ADDR_OWVAR 76
75595: PUSH
75596: LD_INT 1
75598: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
75599: LD_ADDR_OWVAR 31
75603: PUSH
75604: LD_INT 30
75606: PUSH
75607: LD_INT 30
75609: PUSH
75610: LD_INT 30
75612: PUSH
75613: LD_INT 30
75615: PUSH
75616: EMPTY
75617: LIST
75618: LIST
75619: LIST
75620: LIST
75621: ST_TO_ADDR
// un := CreateHuman ;
75622: LD_ADDR_VAR 0 3
75626: PUSH
75627: CALL_OW 44
75631: ST_TO_ADDR
// hc_noskilllimit := false ;
75632: LD_ADDR_OWVAR 76
75636: PUSH
75637: LD_INT 0
75639: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
75640: LD_VAR 0 3
75644: PPUSH
75645: LD_INT 1
75647: PPUSH
75648: CALL_OW 51
// ToLua ( playRanger() ) ;
75652: LD_STRING playRanger()
75654: PPUSH
75655: CALL_OW 559
// p := 0 ;
75659: LD_ADDR_VAR 0 2
75663: PUSH
75664: LD_INT 0
75666: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
75667: LD_INT 35
75669: PPUSH
75670: CALL_OW 67
// p := p + 1 ;
75674: LD_ADDR_VAR 0 2
75678: PUSH
75679: LD_VAR 0 2
75683: PUSH
75684: LD_INT 1
75686: PLUS
75687: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
75688: LD_VAR 0 3
75692: PPUSH
75693: CALL_OW 256
75697: PUSH
75698: LD_INT 1000
75700: LESS
75701: IFFALSE 75715
// SetLives ( un , 1000 ) ;
75703: LD_VAR 0 3
75707: PPUSH
75708: LD_INT 1000
75710: PPUSH
75711: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
75715: LD_VAR 0 3
75719: PPUSH
75720: LD_INT 81
75722: PUSH
75723: LD_OWVAR 2
75727: PUSH
75728: EMPTY
75729: LIST
75730: LIST
75731: PUSH
75732: LD_INT 91
75734: PUSH
75735: LD_VAR 0 3
75739: PUSH
75740: LD_INT 30
75742: PUSH
75743: EMPTY
75744: LIST
75745: LIST
75746: LIST
75747: PUSH
75748: EMPTY
75749: LIST
75750: LIST
75751: PPUSH
75752: CALL_OW 69
75756: PPUSH
75757: LD_VAR 0 3
75761: PPUSH
75762: CALL_OW 74
75766: PPUSH
75767: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
75771: LD_VAR 0 2
75775: PUSH
75776: LD_INT 80
75778: GREATER
75779: PUSH
75780: LD_VAR 0 3
75784: PPUSH
75785: CALL_OW 301
75789: OR
75790: IFFALSE 75667
// if un then
75792: LD_VAR 0 3
75796: IFFALSE 75807
// RemoveUnit ( un ) ;
75798: LD_VAR 0 3
75802: PPUSH
75803: CALL_OW 64
// end ;
75807: PPOPN 3
75809: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
75810: LD_EXP 101
75814: IFFALSE 75930
75816: GO 75818
75818: DISABLE
75819: LD_INT 0
75821: PPUSH
75822: PPUSH
75823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
75824: LD_ADDR_VAR 0 2
75828: PUSH
75829: LD_INT 81
75831: PUSH
75832: LD_OWVAR 2
75836: PUSH
75837: EMPTY
75838: LIST
75839: LIST
75840: PUSH
75841: LD_INT 21
75843: PUSH
75844: LD_INT 1
75846: PUSH
75847: EMPTY
75848: LIST
75849: LIST
75850: PUSH
75851: EMPTY
75852: LIST
75853: LIST
75854: PPUSH
75855: CALL_OW 69
75859: ST_TO_ADDR
// ToLua ( playComputer() ) ;
75860: LD_STRING playComputer()
75862: PPUSH
75863: CALL_OW 559
// if not tmp then
75867: LD_VAR 0 2
75871: NOT
75872: IFFALSE 75876
// exit ;
75874: GO 75930
// for i in tmp do
75876: LD_ADDR_VAR 0 1
75880: PUSH
75881: LD_VAR 0 2
75885: PUSH
75886: FOR_IN
75887: IFFALSE 75928
// for j := 1 to 4 do
75889: LD_ADDR_VAR 0 3
75893: PUSH
75894: DOUBLE
75895: LD_INT 1
75897: DEC
75898: ST_TO_ADDR
75899: LD_INT 4
75901: PUSH
75902: FOR_TO
75903: IFFALSE 75924
// SetSkill ( i , j , 10 ) ;
75905: LD_VAR 0 1
75909: PPUSH
75910: LD_VAR 0 3
75914: PPUSH
75915: LD_INT 10
75917: PPUSH
75918: CALL_OW 237
75922: GO 75902
75924: POP
75925: POP
75926: GO 75886
75928: POP
75929: POP
// end ;
75930: PPOPN 3
75932: END
// every 0 0$1 trigger s30 do var i , tmp ;
75933: LD_EXP 102
75937: IFFALSE 76006
75939: GO 75941
75941: DISABLE
75942: LD_INT 0
75944: PPUSH
75945: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
75946: LD_ADDR_VAR 0 2
75950: PUSH
75951: LD_INT 22
75953: PUSH
75954: LD_OWVAR 2
75958: PUSH
75959: EMPTY
75960: LIST
75961: LIST
75962: PPUSH
75963: CALL_OW 69
75967: ST_TO_ADDR
// if not tmp then
75968: LD_VAR 0 2
75972: NOT
75973: IFFALSE 75977
// exit ;
75975: GO 76006
// for i in tmp do
75977: LD_ADDR_VAR 0 1
75981: PUSH
75982: LD_VAR 0 2
75986: PUSH
75987: FOR_IN
75988: IFFALSE 76004
// SetLives ( i , 300 ) ;
75990: LD_VAR 0 1
75994: PPUSH
75995: LD_INT 300
75997: PPUSH
75998: CALL_OW 234
76002: GO 75987
76004: POP
76005: POP
// end ;
76006: PPOPN 2
76008: END
// every 0 0$1 trigger s60 do var i , tmp ;
76009: LD_EXP 103
76013: IFFALSE 76082
76015: GO 76017
76017: DISABLE
76018: LD_INT 0
76020: PPUSH
76021: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
76022: LD_ADDR_VAR 0 2
76026: PUSH
76027: LD_INT 22
76029: PUSH
76030: LD_OWVAR 2
76034: PUSH
76035: EMPTY
76036: LIST
76037: LIST
76038: PPUSH
76039: CALL_OW 69
76043: ST_TO_ADDR
// if not tmp then
76044: LD_VAR 0 2
76048: NOT
76049: IFFALSE 76053
// exit ;
76051: GO 76082
// for i in tmp do
76053: LD_ADDR_VAR 0 1
76057: PUSH
76058: LD_VAR 0 2
76062: PUSH
76063: FOR_IN
76064: IFFALSE 76080
// SetLives ( i , 600 ) ;
76066: LD_VAR 0 1
76070: PPUSH
76071: LD_INT 600
76073: PPUSH
76074: CALL_OW 234
76078: GO 76063
76080: POP
76081: POP
// end ;
76082: PPOPN 2
76084: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
76085: LD_INT 0
76087: PPUSH
// case cmd of 301 :
76088: LD_VAR 0 1
76092: PUSH
76093: LD_INT 301
76095: DOUBLE
76096: EQUAL
76097: IFTRUE 76101
76099: GO 76133
76101: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
76102: LD_VAR 0 6
76106: PPUSH
76107: LD_VAR 0 7
76111: PPUSH
76112: LD_VAR 0 8
76116: PPUSH
76117: LD_VAR 0 4
76121: PPUSH
76122: LD_VAR 0 5
76126: PPUSH
76127: CALL 77342 0 5
76131: GO 76254
76133: LD_INT 302
76135: DOUBLE
76136: EQUAL
76137: IFTRUE 76141
76139: GO 76178
76141: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
76142: LD_VAR 0 6
76146: PPUSH
76147: LD_VAR 0 7
76151: PPUSH
76152: LD_VAR 0 8
76156: PPUSH
76157: LD_VAR 0 9
76161: PPUSH
76162: LD_VAR 0 4
76166: PPUSH
76167: LD_VAR 0 5
76171: PPUSH
76172: CALL 77433 0 6
76176: GO 76254
76178: LD_INT 303
76180: DOUBLE
76181: EQUAL
76182: IFTRUE 76186
76184: GO 76223
76186: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
76187: LD_VAR 0 6
76191: PPUSH
76192: LD_VAR 0 7
76196: PPUSH
76197: LD_VAR 0 8
76201: PPUSH
76202: LD_VAR 0 9
76206: PPUSH
76207: LD_VAR 0 4
76211: PPUSH
76212: LD_VAR 0 5
76216: PPUSH
76217: CALL 76259 0 6
76221: GO 76254
76223: LD_INT 304
76225: DOUBLE
76226: EQUAL
76227: IFTRUE 76231
76229: GO 76253
76231: POP
// hHackTeleport ( unit , x , y ) ; end ;
76232: LD_VAR 0 2
76236: PPUSH
76237: LD_VAR 0 4
76241: PPUSH
76242: LD_VAR 0 5
76246: PPUSH
76247: CALL 78026 0 3
76251: GO 76254
76253: POP
// end ;
76254: LD_VAR 0 12
76258: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
76259: LD_INT 0
76261: PPUSH
76262: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
76263: LD_VAR 0 1
76267: PUSH
76268: LD_INT 1
76270: LESS
76271: PUSH
76272: LD_VAR 0 1
76276: PUSH
76277: LD_INT 3
76279: GREATER
76280: OR
76281: PUSH
76282: LD_VAR 0 5
76286: PPUSH
76287: LD_VAR 0 6
76291: PPUSH
76292: CALL_OW 428
76296: OR
76297: IFFALSE 76301
// exit ;
76299: GO 77029
// uc_side := your_side ;
76301: LD_ADDR_OWVAR 20
76305: PUSH
76306: LD_OWVAR 2
76310: ST_TO_ADDR
// uc_nation := nation ;
76311: LD_ADDR_OWVAR 21
76315: PUSH
76316: LD_VAR 0 1
76320: ST_TO_ADDR
// bc_level = 1 ;
76321: LD_ADDR_OWVAR 43
76325: PUSH
76326: LD_INT 1
76328: ST_TO_ADDR
// case btype of 1 :
76329: LD_VAR 0 2
76333: PUSH
76334: LD_INT 1
76336: DOUBLE
76337: EQUAL
76338: IFTRUE 76342
76340: GO 76353
76342: POP
// bc_type := b_depot ; 2 :
76343: LD_ADDR_OWVAR 42
76347: PUSH
76348: LD_INT 0
76350: ST_TO_ADDR
76351: GO 76973
76353: LD_INT 2
76355: DOUBLE
76356: EQUAL
76357: IFTRUE 76361
76359: GO 76372
76361: POP
// bc_type := b_warehouse ; 3 :
76362: LD_ADDR_OWVAR 42
76366: PUSH
76367: LD_INT 1
76369: ST_TO_ADDR
76370: GO 76973
76372: LD_INT 3
76374: DOUBLE
76375: EQUAL
76376: IFTRUE 76380
76378: GO 76391
76380: POP
// bc_type := b_lab ; 4 .. 9 :
76381: LD_ADDR_OWVAR 42
76385: PUSH
76386: LD_INT 6
76388: ST_TO_ADDR
76389: GO 76973
76391: LD_INT 4
76393: DOUBLE
76394: GREATEREQUAL
76395: IFFALSE 76403
76397: LD_INT 9
76399: DOUBLE
76400: LESSEQUAL
76401: IFTRUE 76405
76403: GO 76465
76405: POP
// begin bc_type := b_lab_half ;
76406: LD_ADDR_OWVAR 42
76410: PUSH
76411: LD_INT 7
76413: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
76414: LD_ADDR_OWVAR 44
76418: PUSH
76419: LD_INT 10
76421: PUSH
76422: LD_INT 11
76424: PUSH
76425: LD_INT 12
76427: PUSH
76428: LD_INT 15
76430: PUSH
76431: LD_INT 14
76433: PUSH
76434: LD_INT 13
76436: PUSH
76437: EMPTY
76438: LIST
76439: LIST
76440: LIST
76441: LIST
76442: LIST
76443: LIST
76444: PUSH
76445: LD_VAR 0 2
76449: PUSH
76450: LD_INT 3
76452: MINUS
76453: ARRAY
76454: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
76455: LD_ADDR_OWVAR 45
76459: PUSH
76460: LD_INT 9
76462: ST_TO_ADDR
// end ; 10 .. 13 :
76463: GO 76973
76465: LD_INT 10
76467: DOUBLE
76468: GREATEREQUAL
76469: IFFALSE 76477
76471: LD_INT 13
76473: DOUBLE
76474: LESSEQUAL
76475: IFTRUE 76479
76477: GO 76556
76479: POP
// begin bc_type := b_lab_full ;
76480: LD_ADDR_OWVAR 42
76484: PUSH
76485: LD_INT 8
76487: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
76488: LD_ADDR_OWVAR 44
76492: PUSH
76493: LD_INT 10
76495: PUSH
76496: LD_INT 12
76498: PUSH
76499: LD_INT 14
76501: PUSH
76502: LD_INT 13
76504: PUSH
76505: EMPTY
76506: LIST
76507: LIST
76508: LIST
76509: LIST
76510: PUSH
76511: LD_VAR 0 2
76515: PUSH
76516: LD_INT 9
76518: MINUS
76519: ARRAY
76520: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
76521: LD_ADDR_OWVAR 45
76525: PUSH
76526: LD_INT 11
76528: PUSH
76529: LD_INT 15
76531: PUSH
76532: LD_INT 12
76534: PUSH
76535: LD_INT 15
76537: PUSH
76538: EMPTY
76539: LIST
76540: LIST
76541: LIST
76542: LIST
76543: PUSH
76544: LD_VAR 0 2
76548: PUSH
76549: LD_INT 9
76551: MINUS
76552: ARRAY
76553: ST_TO_ADDR
// end ; 14 :
76554: GO 76973
76556: LD_INT 14
76558: DOUBLE
76559: EQUAL
76560: IFTRUE 76564
76562: GO 76575
76564: POP
// bc_type := b_workshop ; 15 :
76565: LD_ADDR_OWVAR 42
76569: PUSH
76570: LD_INT 2
76572: ST_TO_ADDR
76573: GO 76973
76575: LD_INT 15
76577: DOUBLE
76578: EQUAL
76579: IFTRUE 76583
76581: GO 76594
76583: POP
// bc_type := b_factory ; 16 :
76584: LD_ADDR_OWVAR 42
76588: PUSH
76589: LD_INT 3
76591: ST_TO_ADDR
76592: GO 76973
76594: LD_INT 16
76596: DOUBLE
76597: EQUAL
76598: IFTRUE 76602
76600: GO 76613
76602: POP
// bc_type := b_ext_gun ; 17 :
76603: LD_ADDR_OWVAR 42
76607: PUSH
76608: LD_INT 17
76610: ST_TO_ADDR
76611: GO 76973
76613: LD_INT 17
76615: DOUBLE
76616: EQUAL
76617: IFTRUE 76621
76619: GO 76649
76621: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
76622: LD_ADDR_OWVAR 42
76626: PUSH
76627: LD_INT 19
76629: PUSH
76630: LD_INT 23
76632: PUSH
76633: LD_INT 19
76635: PUSH
76636: EMPTY
76637: LIST
76638: LIST
76639: LIST
76640: PUSH
76641: LD_VAR 0 1
76645: ARRAY
76646: ST_TO_ADDR
76647: GO 76973
76649: LD_INT 18
76651: DOUBLE
76652: EQUAL
76653: IFTRUE 76657
76655: GO 76668
76657: POP
// bc_type := b_ext_radar ; 19 :
76658: LD_ADDR_OWVAR 42
76662: PUSH
76663: LD_INT 20
76665: ST_TO_ADDR
76666: GO 76973
76668: LD_INT 19
76670: DOUBLE
76671: EQUAL
76672: IFTRUE 76676
76674: GO 76687
76676: POP
// bc_type := b_ext_radio ; 20 :
76677: LD_ADDR_OWVAR 42
76681: PUSH
76682: LD_INT 22
76684: ST_TO_ADDR
76685: GO 76973
76687: LD_INT 20
76689: DOUBLE
76690: EQUAL
76691: IFTRUE 76695
76693: GO 76706
76695: POP
// bc_type := b_ext_siberium ; 21 :
76696: LD_ADDR_OWVAR 42
76700: PUSH
76701: LD_INT 21
76703: ST_TO_ADDR
76704: GO 76973
76706: LD_INT 21
76708: DOUBLE
76709: EQUAL
76710: IFTRUE 76714
76712: GO 76725
76714: POP
// bc_type := b_ext_computer ; 22 :
76715: LD_ADDR_OWVAR 42
76719: PUSH
76720: LD_INT 24
76722: ST_TO_ADDR
76723: GO 76973
76725: LD_INT 22
76727: DOUBLE
76728: EQUAL
76729: IFTRUE 76733
76731: GO 76744
76733: POP
// bc_type := b_ext_track ; 23 :
76734: LD_ADDR_OWVAR 42
76738: PUSH
76739: LD_INT 16
76741: ST_TO_ADDR
76742: GO 76973
76744: LD_INT 23
76746: DOUBLE
76747: EQUAL
76748: IFTRUE 76752
76750: GO 76763
76752: POP
// bc_type := b_ext_laser ; 24 :
76753: LD_ADDR_OWVAR 42
76757: PUSH
76758: LD_INT 25
76760: ST_TO_ADDR
76761: GO 76973
76763: LD_INT 24
76765: DOUBLE
76766: EQUAL
76767: IFTRUE 76771
76769: GO 76782
76771: POP
// bc_type := b_control_tower ; 25 :
76772: LD_ADDR_OWVAR 42
76776: PUSH
76777: LD_INT 36
76779: ST_TO_ADDR
76780: GO 76973
76782: LD_INT 25
76784: DOUBLE
76785: EQUAL
76786: IFTRUE 76790
76788: GO 76801
76790: POP
// bc_type := b_breastwork ; 26 :
76791: LD_ADDR_OWVAR 42
76795: PUSH
76796: LD_INT 31
76798: ST_TO_ADDR
76799: GO 76973
76801: LD_INT 26
76803: DOUBLE
76804: EQUAL
76805: IFTRUE 76809
76807: GO 76820
76809: POP
// bc_type := b_bunker ; 27 :
76810: LD_ADDR_OWVAR 42
76814: PUSH
76815: LD_INT 32
76817: ST_TO_ADDR
76818: GO 76973
76820: LD_INT 27
76822: DOUBLE
76823: EQUAL
76824: IFTRUE 76828
76826: GO 76839
76828: POP
// bc_type := b_turret ; 28 :
76829: LD_ADDR_OWVAR 42
76833: PUSH
76834: LD_INT 33
76836: ST_TO_ADDR
76837: GO 76973
76839: LD_INT 28
76841: DOUBLE
76842: EQUAL
76843: IFTRUE 76847
76845: GO 76858
76847: POP
// bc_type := b_armoury ; 29 :
76848: LD_ADDR_OWVAR 42
76852: PUSH
76853: LD_INT 4
76855: ST_TO_ADDR
76856: GO 76973
76858: LD_INT 29
76860: DOUBLE
76861: EQUAL
76862: IFTRUE 76866
76864: GO 76877
76866: POP
// bc_type := b_barracks ; 30 :
76867: LD_ADDR_OWVAR 42
76871: PUSH
76872: LD_INT 5
76874: ST_TO_ADDR
76875: GO 76973
76877: LD_INT 30
76879: DOUBLE
76880: EQUAL
76881: IFTRUE 76885
76883: GO 76896
76885: POP
// bc_type := b_solar_power ; 31 :
76886: LD_ADDR_OWVAR 42
76890: PUSH
76891: LD_INT 27
76893: ST_TO_ADDR
76894: GO 76973
76896: LD_INT 31
76898: DOUBLE
76899: EQUAL
76900: IFTRUE 76904
76902: GO 76915
76904: POP
// bc_type := b_oil_power ; 32 :
76905: LD_ADDR_OWVAR 42
76909: PUSH
76910: LD_INT 26
76912: ST_TO_ADDR
76913: GO 76973
76915: LD_INT 32
76917: DOUBLE
76918: EQUAL
76919: IFTRUE 76923
76921: GO 76934
76923: POP
// bc_type := b_siberite_power ; 33 :
76924: LD_ADDR_OWVAR 42
76928: PUSH
76929: LD_INT 28
76931: ST_TO_ADDR
76932: GO 76973
76934: LD_INT 33
76936: DOUBLE
76937: EQUAL
76938: IFTRUE 76942
76940: GO 76953
76942: POP
// bc_type := b_oil_mine ; 34 :
76943: LD_ADDR_OWVAR 42
76947: PUSH
76948: LD_INT 29
76950: ST_TO_ADDR
76951: GO 76973
76953: LD_INT 34
76955: DOUBLE
76956: EQUAL
76957: IFTRUE 76961
76959: GO 76972
76961: POP
// bc_type := b_siberite_mine ; end ;
76962: LD_ADDR_OWVAR 42
76966: PUSH
76967: LD_INT 30
76969: ST_TO_ADDR
76970: GO 76973
76972: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
76973: LD_ADDR_VAR 0 8
76977: PUSH
76978: LD_VAR 0 5
76982: PPUSH
76983: LD_VAR 0 6
76987: PPUSH
76988: LD_VAR 0 3
76992: PPUSH
76993: CALL_OW 47
76997: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
76998: LD_OWVAR 42
77002: PUSH
77003: LD_INT 32
77005: PUSH
77006: LD_INT 33
77008: PUSH
77009: EMPTY
77010: LIST
77011: LIST
77012: IN
77013: IFFALSE 77029
// PlaceWeaponTurret ( b , weapon ) ;
77015: LD_VAR 0 8
77019: PPUSH
77020: LD_VAR 0 4
77024: PPUSH
77025: CALL_OW 431
// end ;
77029: LD_VAR 0 7
77033: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
77034: LD_INT 0
77036: PPUSH
77037: PPUSH
77038: PPUSH
77039: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
77040: LD_ADDR_VAR 0 4
77044: PUSH
77045: LD_INT 22
77047: PUSH
77048: LD_OWVAR 2
77052: PUSH
77053: EMPTY
77054: LIST
77055: LIST
77056: PUSH
77057: LD_INT 2
77059: PUSH
77060: LD_INT 30
77062: PUSH
77063: LD_INT 0
77065: PUSH
77066: EMPTY
77067: LIST
77068: LIST
77069: PUSH
77070: LD_INT 30
77072: PUSH
77073: LD_INT 1
77075: PUSH
77076: EMPTY
77077: LIST
77078: LIST
77079: PUSH
77080: EMPTY
77081: LIST
77082: LIST
77083: LIST
77084: PUSH
77085: EMPTY
77086: LIST
77087: LIST
77088: PPUSH
77089: CALL_OW 69
77093: ST_TO_ADDR
// if not tmp then
77094: LD_VAR 0 4
77098: NOT
77099: IFFALSE 77103
// exit ;
77101: GO 77162
// for i in tmp do
77103: LD_ADDR_VAR 0 2
77107: PUSH
77108: LD_VAR 0 4
77112: PUSH
77113: FOR_IN
77114: IFFALSE 77160
// for j = 1 to 3 do
77116: LD_ADDR_VAR 0 3
77120: PUSH
77121: DOUBLE
77122: LD_INT 1
77124: DEC
77125: ST_TO_ADDR
77126: LD_INT 3
77128: PUSH
77129: FOR_TO
77130: IFFALSE 77156
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
77132: LD_VAR 0 2
77136: PPUSH
77137: CALL_OW 274
77141: PPUSH
77142: LD_VAR 0 3
77146: PPUSH
77147: LD_INT 99999
77149: PPUSH
77150: CALL_OW 277
77154: GO 77129
77156: POP
77157: POP
77158: GO 77113
77160: POP
77161: POP
// end ;
77162: LD_VAR 0 1
77166: RET
// export function hHackSetLevel10 ; var i , j ; begin
77167: LD_INT 0
77169: PPUSH
77170: PPUSH
77171: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
77172: LD_ADDR_VAR 0 2
77176: PUSH
77177: LD_INT 21
77179: PUSH
77180: LD_INT 1
77182: PUSH
77183: EMPTY
77184: LIST
77185: LIST
77186: PPUSH
77187: CALL_OW 69
77191: PUSH
77192: FOR_IN
77193: IFFALSE 77245
// if IsSelected ( i ) then
77195: LD_VAR 0 2
77199: PPUSH
77200: CALL_OW 306
77204: IFFALSE 77243
// begin for j := 1 to 4 do
77206: LD_ADDR_VAR 0 3
77210: PUSH
77211: DOUBLE
77212: LD_INT 1
77214: DEC
77215: ST_TO_ADDR
77216: LD_INT 4
77218: PUSH
77219: FOR_TO
77220: IFFALSE 77241
// SetSkill ( i , j , 10 ) ;
77222: LD_VAR 0 2
77226: PPUSH
77227: LD_VAR 0 3
77231: PPUSH
77232: LD_INT 10
77234: PPUSH
77235: CALL_OW 237
77239: GO 77219
77241: POP
77242: POP
// end ;
77243: GO 77192
77245: POP
77246: POP
// end ;
77247: LD_VAR 0 1
77251: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
77252: LD_INT 0
77254: PPUSH
77255: PPUSH
77256: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
77257: LD_ADDR_VAR 0 2
77261: PUSH
77262: LD_INT 22
77264: PUSH
77265: LD_OWVAR 2
77269: PUSH
77270: EMPTY
77271: LIST
77272: LIST
77273: PUSH
77274: LD_INT 21
77276: PUSH
77277: LD_INT 1
77279: PUSH
77280: EMPTY
77281: LIST
77282: LIST
77283: PUSH
77284: EMPTY
77285: LIST
77286: LIST
77287: PPUSH
77288: CALL_OW 69
77292: PUSH
77293: FOR_IN
77294: IFFALSE 77335
// begin for j := 1 to 4 do
77296: LD_ADDR_VAR 0 3
77300: PUSH
77301: DOUBLE
77302: LD_INT 1
77304: DEC
77305: ST_TO_ADDR
77306: LD_INT 4
77308: PUSH
77309: FOR_TO
77310: IFFALSE 77331
// SetSkill ( i , j , 10 ) ;
77312: LD_VAR 0 2
77316: PPUSH
77317: LD_VAR 0 3
77321: PPUSH
77322: LD_INT 10
77324: PPUSH
77325: CALL_OW 237
77329: GO 77309
77331: POP
77332: POP
// end ;
77333: GO 77293
77335: POP
77336: POP
// end ;
77337: LD_VAR 0 1
77341: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
77342: LD_INT 0
77344: PPUSH
// uc_side := your_side ;
77345: LD_ADDR_OWVAR 20
77349: PUSH
77350: LD_OWVAR 2
77354: ST_TO_ADDR
// uc_nation := nation ;
77355: LD_ADDR_OWVAR 21
77359: PUSH
77360: LD_VAR 0 1
77364: ST_TO_ADDR
// InitHc ;
77365: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
77369: LD_INT 0
77371: PPUSH
77372: LD_VAR 0 2
77376: PPUSH
77377: LD_VAR 0 3
77381: PPUSH
77382: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
77386: LD_VAR 0 4
77390: PPUSH
77391: LD_VAR 0 5
77395: PPUSH
77396: CALL_OW 428
77400: PUSH
77401: LD_INT 0
77403: EQUAL
77404: IFFALSE 77428
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
77406: CALL_OW 44
77410: PPUSH
77411: LD_VAR 0 4
77415: PPUSH
77416: LD_VAR 0 5
77420: PPUSH
77421: LD_INT 1
77423: PPUSH
77424: CALL_OW 48
// end ;
77428: LD_VAR 0 6
77432: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
77433: LD_INT 0
77435: PPUSH
77436: PPUSH
// uc_side := your_side ;
77437: LD_ADDR_OWVAR 20
77441: PUSH
77442: LD_OWVAR 2
77446: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
77447: LD_VAR 0 1
77451: PUSH
77452: LD_INT 1
77454: PUSH
77455: LD_INT 2
77457: PUSH
77458: LD_INT 3
77460: PUSH
77461: LD_INT 4
77463: PUSH
77464: LD_INT 5
77466: PUSH
77467: EMPTY
77468: LIST
77469: LIST
77470: LIST
77471: LIST
77472: LIST
77473: IN
77474: IFFALSE 77486
// uc_nation := nation_american else
77476: LD_ADDR_OWVAR 21
77480: PUSH
77481: LD_INT 1
77483: ST_TO_ADDR
77484: GO 77529
// if chassis in [ 11 , 12 , 13 , 14 ] then
77486: LD_VAR 0 1
77490: PUSH
77491: LD_INT 11
77493: PUSH
77494: LD_INT 12
77496: PUSH
77497: LD_INT 13
77499: PUSH
77500: LD_INT 14
77502: PUSH
77503: EMPTY
77504: LIST
77505: LIST
77506: LIST
77507: LIST
77508: IN
77509: IFFALSE 77521
// uc_nation := nation_arabian else
77511: LD_ADDR_OWVAR 21
77515: PUSH
77516: LD_INT 2
77518: ST_TO_ADDR
77519: GO 77529
// uc_nation := nation_russian ;
77521: LD_ADDR_OWVAR 21
77525: PUSH
77526: LD_INT 3
77528: ST_TO_ADDR
// vc_chassis := chassis ;
77529: LD_ADDR_OWVAR 37
77533: PUSH
77534: LD_VAR 0 1
77538: ST_TO_ADDR
// vc_engine := engine ;
77539: LD_ADDR_OWVAR 39
77543: PUSH
77544: LD_VAR 0 2
77548: ST_TO_ADDR
// vc_control := control ;
77549: LD_ADDR_OWVAR 38
77553: PUSH
77554: LD_VAR 0 3
77558: ST_TO_ADDR
// vc_weapon := weapon ;
77559: LD_ADDR_OWVAR 40
77563: PUSH
77564: LD_VAR 0 4
77568: ST_TO_ADDR
// un := CreateVehicle ;
77569: LD_ADDR_VAR 0 8
77573: PUSH
77574: CALL_OW 45
77578: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
77579: LD_VAR 0 8
77583: PPUSH
77584: LD_INT 0
77586: PPUSH
77587: LD_INT 5
77589: PPUSH
77590: CALL_OW 12
77594: PPUSH
77595: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
77599: LD_VAR 0 8
77603: PPUSH
77604: LD_VAR 0 5
77608: PPUSH
77609: LD_VAR 0 6
77613: PPUSH
77614: LD_INT 1
77616: PPUSH
77617: CALL_OW 48
// end ;
77621: LD_VAR 0 7
77625: RET
// export hInvincible ; every 1 do
77626: GO 77628
77628: DISABLE
// hInvincible := [ ] ;
77629: LD_ADDR_EXP 104
77633: PUSH
77634: EMPTY
77635: ST_TO_ADDR
77636: END
// every 10 do var i ;
77637: GO 77639
77639: DISABLE
77640: LD_INT 0
77642: PPUSH
// begin enable ;
77643: ENABLE
// if not hInvincible then
77644: LD_EXP 104
77648: NOT
77649: IFFALSE 77653
// exit ;
77651: GO 77697
// for i in hInvincible do
77653: LD_ADDR_VAR 0 1
77657: PUSH
77658: LD_EXP 104
77662: PUSH
77663: FOR_IN
77664: IFFALSE 77695
// if GetLives ( i ) < 1000 then
77666: LD_VAR 0 1
77670: PPUSH
77671: CALL_OW 256
77675: PUSH
77676: LD_INT 1000
77678: LESS
77679: IFFALSE 77693
// SetLives ( i , 1000 ) ;
77681: LD_VAR 0 1
77685: PPUSH
77686: LD_INT 1000
77688: PPUSH
77689: CALL_OW 234
77693: GO 77663
77695: POP
77696: POP
// end ;
77697: PPOPN 1
77699: END
// export function hHackInvincible ; var i ; begin
77700: LD_INT 0
77702: PPUSH
77703: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
77704: LD_ADDR_VAR 0 2
77708: PUSH
77709: LD_INT 2
77711: PUSH
77712: LD_INT 21
77714: PUSH
77715: LD_INT 1
77717: PUSH
77718: EMPTY
77719: LIST
77720: LIST
77721: PUSH
77722: LD_INT 21
77724: PUSH
77725: LD_INT 2
77727: PUSH
77728: EMPTY
77729: LIST
77730: LIST
77731: PUSH
77732: EMPTY
77733: LIST
77734: LIST
77735: LIST
77736: PPUSH
77737: CALL_OW 69
77741: PUSH
77742: FOR_IN
77743: IFFALSE 77804
// if IsSelected ( i ) then
77745: LD_VAR 0 2
77749: PPUSH
77750: CALL_OW 306
77754: IFFALSE 77802
// begin if i in hInvincible then
77756: LD_VAR 0 2
77760: PUSH
77761: LD_EXP 104
77765: IN
77766: IFFALSE 77786
// hInvincible := hInvincible diff i else
77768: LD_ADDR_EXP 104
77772: PUSH
77773: LD_EXP 104
77777: PUSH
77778: LD_VAR 0 2
77782: DIFF
77783: ST_TO_ADDR
77784: GO 77802
// hInvincible := hInvincible union i ;
77786: LD_ADDR_EXP 104
77790: PUSH
77791: LD_EXP 104
77795: PUSH
77796: LD_VAR 0 2
77800: UNION
77801: ST_TO_ADDR
// end ;
77802: GO 77742
77804: POP
77805: POP
// end ;
77806: LD_VAR 0 1
77810: RET
// export function hHackInvisible ; var i , j ; begin
77811: LD_INT 0
77813: PPUSH
77814: PPUSH
77815: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
77816: LD_ADDR_VAR 0 2
77820: PUSH
77821: LD_INT 21
77823: PUSH
77824: LD_INT 1
77826: PUSH
77827: EMPTY
77828: LIST
77829: LIST
77830: PPUSH
77831: CALL_OW 69
77835: PUSH
77836: FOR_IN
77837: IFFALSE 77861
// if IsSelected ( i ) then
77839: LD_VAR 0 2
77843: PPUSH
77844: CALL_OW 306
77848: IFFALSE 77859
// ComForceInvisible ( i ) ;
77850: LD_VAR 0 2
77854: PPUSH
77855: CALL_OW 496
77859: GO 77836
77861: POP
77862: POP
// end ;
77863: LD_VAR 0 1
77867: RET
// export function hHackChangeYourSide ; begin
77868: LD_INT 0
77870: PPUSH
// if your_side = 8 then
77871: LD_OWVAR 2
77875: PUSH
77876: LD_INT 8
77878: EQUAL
77879: IFFALSE 77891
// your_side := 0 else
77881: LD_ADDR_OWVAR 2
77885: PUSH
77886: LD_INT 0
77888: ST_TO_ADDR
77889: GO 77905
// your_side := your_side + 1 ;
77891: LD_ADDR_OWVAR 2
77895: PUSH
77896: LD_OWVAR 2
77900: PUSH
77901: LD_INT 1
77903: PLUS
77904: ST_TO_ADDR
// end ;
77905: LD_VAR 0 1
77909: RET
// export function hHackChangeUnitSide ; var i , j ; begin
77910: LD_INT 0
77912: PPUSH
77913: PPUSH
77914: PPUSH
// for i in all_units do
77915: LD_ADDR_VAR 0 2
77919: PUSH
77920: LD_OWVAR 3
77924: PUSH
77925: FOR_IN
77926: IFFALSE 78004
// if IsSelected ( i ) then
77928: LD_VAR 0 2
77932: PPUSH
77933: CALL_OW 306
77937: IFFALSE 78002
// begin j := GetSide ( i ) ;
77939: LD_ADDR_VAR 0 3
77943: PUSH
77944: LD_VAR 0 2
77948: PPUSH
77949: CALL_OW 255
77953: ST_TO_ADDR
// if j = 8 then
77954: LD_VAR 0 3
77958: PUSH
77959: LD_INT 8
77961: EQUAL
77962: IFFALSE 77974
// j := 0 else
77964: LD_ADDR_VAR 0 3
77968: PUSH
77969: LD_INT 0
77971: ST_TO_ADDR
77972: GO 77988
// j := j + 1 ;
77974: LD_ADDR_VAR 0 3
77978: PUSH
77979: LD_VAR 0 3
77983: PUSH
77984: LD_INT 1
77986: PLUS
77987: ST_TO_ADDR
// SetSide ( i , j ) ;
77988: LD_VAR 0 2
77992: PPUSH
77993: LD_VAR 0 3
77997: PPUSH
77998: CALL_OW 235
// end ;
78002: GO 77925
78004: POP
78005: POP
// end ;
78006: LD_VAR 0 1
78010: RET
// export function hHackFog ; begin
78011: LD_INT 0
78013: PPUSH
// FogOff ( true ) ;
78014: LD_INT 1
78016: PPUSH
78017: CALL_OW 344
// end ;
78021: LD_VAR 0 1
78025: RET
// export function hHackTeleport ( unit , x , y ) ; begin
78026: LD_INT 0
78028: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
78029: LD_VAR 0 1
78033: PPUSH
78034: LD_VAR 0 2
78038: PPUSH
78039: LD_VAR 0 3
78043: PPUSH
78044: LD_INT 1
78046: PPUSH
78047: LD_INT 1
78049: PPUSH
78050: CALL_OW 483
// CenterOnXY ( x , y ) ;
78054: LD_VAR 0 2
78058: PPUSH
78059: LD_VAR 0 3
78063: PPUSH
78064: CALL_OW 84
// end ;
78068: LD_VAR 0 4
78072: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
78073: LD_INT 0
78075: PPUSH
78076: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
78077: LD_VAR 0 1
78081: NOT
78082: PUSH
78083: LD_VAR 0 2
78087: PPUSH
78088: LD_VAR 0 3
78092: PPUSH
78093: CALL_OW 488
78097: NOT
78098: OR
78099: PUSH
78100: LD_VAR 0 1
78104: PPUSH
78105: CALL_OW 266
78109: PUSH
78110: LD_INT 3
78112: NONEQUAL
78113: PUSH
78114: LD_VAR 0 1
78118: PPUSH
78119: CALL_OW 247
78123: PUSH
78124: LD_INT 1
78126: EQUAL
78127: NOT
78128: AND
78129: OR
78130: IFFALSE 78134
// exit ;
78132: GO 78283
// if GetType ( factory ) = unit_human then
78134: LD_VAR 0 1
78138: PPUSH
78139: CALL_OW 247
78143: PUSH
78144: LD_INT 1
78146: EQUAL
78147: IFFALSE 78164
// factory := IsInUnit ( factory ) ;
78149: LD_ADDR_VAR 0 1
78153: PUSH
78154: LD_VAR 0 1
78158: PPUSH
78159: CALL_OW 310
78163: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
78164: LD_VAR 0 1
78168: PPUSH
78169: CALL_OW 266
78173: PUSH
78174: LD_INT 3
78176: NONEQUAL
78177: IFFALSE 78181
// exit ;
78179: GO 78283
// if HexInfo ( x , y ) = factory then
78181: LD_VAR 0 2
78185: PPUSH
78186: LD_VAR 0 3
78190: PPUSH
78191: CALL_OW 428
78195: PUSH
78196: LD_VAR 0 1
78200: EQUAL
78201: IFFALSE 78228
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
78203: LD_ADDR_EXP 105
78207: PUSH
78208: LD_EXP 105
78212: PPUSH
78213: LD_VAR 0 1
78217: PPUSH
78218: LD_INT 0
78220: PPUSH
78221: CALL_OW 1
78225: ST_TO_ADDR
78226: GO 78279
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
78228: LD_ADDR_EXP 105
78232: PUSH
78233: LD_EXP 105
78237: PPUSH
78238: LD_VAR 0 1
78242: PPUSH
78243: LD_VAR 0 1
78247: PPUSH
78248: CALL_OW 255
78252: PUSH
78253: LD_VAR 0 1
78257: PUSH
78258: LD_VAR 0 2
78262: PUSH
78263: LD_VAR 0 3
78267: PUSH
78268: EMPTY
78269: LIST
78270: LIST
78271: LIST
78272: LIST
78273: PPUSH
78274: CALL_OW 1
78278: ST_TO_ADDR
// UpdateFactoryWaypoints ;
78279: CALL 78288 0 0
// end ;
78283: LD_VAR 0 4
78287: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
78288: LD_INT 0
78290: PPUSH
78291: PPUSH
78292: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
78293: LD_STRING resetFactoryWaypoint();
78295: PPUSH
78296: CALL_OW 559
// if factoryWaypoints then
78300: LD_EXP 105
78304: IFFALSE 78430
// begin list := PrepareArray ( factoryWaypoints ) ;
78306: LD_ADDR_VAR 0 3
78310: PUSH
78311: LD_EXP 105
78315: PPUSH
78316: CALL 57919 0 1
78320: ST_TO_ADDR
// for i := 1 to list do
78321: LD_ADDR_VAR 0 2
78325: PUSH
78326: DOUBLE
78327: LD_INT 1
78329: DEC
78330: ST_TO_ADDR
78331: LD_VAR 0 3
78335: PUSH
78336: FOR_TO
78337: IFFALSE 78428
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
78339: LD_STRING setFactoryWaypointXY(
78341: PUSH
78342: LD_VAR 0 3
78346: PUSH
78347: LD_VAR 0 2
78351: ARRAY
78352: PUSH
78353: LD_INT 1
78355: ARRAY
78356: STR
78357: PUSH
78358: LD_STRING ,
78360: STR
78361: PUSH
78362: LD_VAR 0 3
78366: PUSH
78367: LD_VAR 0 2
78371: ARRAY
78372: PUSH
78373: LD_INT 2
78375: ARRAY
78376: STR
78377: PUSH
78378: LD_STRING ,
78380: STR
78381: PUSH
78382: LD_VAR 0 3
78386: PUSH
78387: LD_VAR 0 2
78391: ARRAY
78392: PUSH
78393: LD_INT 3
78395: ARRAY
78396: STR
78397: PUSH
78398: LD_STRING ,
78400: STR
78401: PUSH
78402: LD_VAR 0 3
78406: PUSH
78407: LD_VAR 0 2
78411: ARRAY
78412: PUSH
78413: LD_INT 4
78415: ARRAY
78416: STR
78417: PUSH
78418: LD_STRING )
78420: STR
78421: PPUSH
78422: CALL_OW 559
78426: GO 78336
78428: POP
78429: POP
// end ; end ;
78430: LD_VAR 0 1
78434: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
78435: LD_INT 0
78437: PPUSH
// if HexInfo ( x , y ) = warehouse then
78438: LD_VAR 0 2
78442: PPUSH
78443: LD_VAR 0 3
78447: PPUSH
78448: CALL_OW 428
78452: PUSH
78453: LD_VAR 0 1
78457: EQUAL
78458: IFFALSE 78485
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
78460: LD_ADDR_EXP 106
78464: PUSH
78465: LD_EXP 106
78469: PPUSH
78470: LD_VAR 0 1
78474: PPUSH
78475: LD_INT 0
78477: PPUSH
78478: CALL_OW 1
78482: ST_TO_ADDR
78483: GO 78536
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
78485: LD_ADDR_EXP 106
78489: PUSH
78490: LD_EXP 106
78494: PPUSH
78495: LD_VAR 0 1
78499: PPUSH
78500: LD_VAR 0 1
78504: PPUSH
78505: CALL_OW 255
78509: PUSH
78510: LD_VAR 0 1
78514: PUSH
78515: LD_VAR 0 2
78519: PUSH
78520: LD_VAR 0 3
78524: PUSH
78525: EMPTY
78526: LIST
78527: LIST
78528: LIST
78529: LIST
78530: PPUSH
78531: CALL_OW 1
78535: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
78536: CALL 78545 0 0
// end ;
78540: LD_VAR 0 4
78544: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
78545: LD_INT 0
78547: PPUSH
78548: PPUSH
78549: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
78550: LD_STRING resetWarehouseGatheringPoints();
78552: PPUSH
78553: CALL_OW 559
// if warehouseGatheringPoints then
78557: LD_EXP 106
78561: IFFALSE 78687
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
78563: LD_ADDR_VAR 0 3
78567: PUSH
78568: LD_EXP 106
78572: PPUSH
78573: CALL 57919 0 1
78577: ST_TO_ADDR
// for i := 1 to list do
78578: LD_ADDR_VAR 0 2
78582: PUSH
78583: DOUBLE
78584: LD_INT 1
78586: DEC
78587: ST_TO_ADDR
78588: LD_VAR 0 3
78592: PUSH
78593: FOR_TO
78594: IFFALSE 78685
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
78596: LD_STRING setWarehouseGatheringPointXY(
78598: PUSH
78599: LD_VAR 0 3
78603: PUSH
78604: LD_VAR 0 2
78608: ARRAY
78609: PUSH
78610: LD_INT 1
78612: ARRAY
78613: STR
78614: PUSH
78615: LD_STRING ,
78617: STR
78618: PUSH
78619: LD_VAR 0 3
78623: PUSH
78624: LD_VAR 0 2
78628: ARRAY
78629: PUSH
78630: LD_INT 2
78632: ARRAY
78633: STR
78634: PUSH
78635: LD_STRING ,
78637: STR
78638: PUSH
78639: LD_VAR 0 3
78643: PUSH
78644: LD_VAR 0 2
78648: ARRAY
78649: PUSH
78650: LD_INT 3
78652: ARRAY
78653: STR
78654: PUSH
78655: LD_STRING ,
78657: STR
78658: PUSH
78659: LD_VAR 0 3
78663: PUSH
78664: LD_VAR 0 2
78668: ARRAY
78669: PUSH
78670: LD_INT 4
78672: ARRAY
78673: STR
78674: PUSH
78675: LD_STRING )
78677: STR
78678: PPUSH
78679: CALL_OW 559
78683: GO 78593
78685: POP
78686: POP
// end ; end ;
78687: LD_VAR 0 1
78691: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
78692: LD_EXP 106
78696: IFFALSE 79381
78698: GO 78700
78700: DISABLE
78701: LD_INT 0
78703: PPUSH
78704: PPUSH
78705: PPUSH
78706: PPUSH
78707: PPUSH
78708: PPUSH
78709: PPUSH
78710: PPUSH
78711: PPUSH
// begin enable ;
78712: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
78713: LD_ADDR_VAR 0 3
78717: PUSH
78718: LD_EXP 106
78722: PPUSH
78723: CALL 57919 0 1
78727: ST_TO_ADDR
// if not list then
78728: LD_VAR 0 3
78732: NOT
78733: IFFALSE 78737
// exit ;
78735: GO 79381
// for i := 1 to list do
78737: LD_ADDR_VAR 0 1
78741: PUSH
78742: DOUBLE
78743: LD_INT 1
78745: DEC
78746: ST_TO_ADDR
78747: LD_VAR 0 3
78751: PUSH
78752: FOR_TO
78753: IFFALSE 79379
// begin depot := list [ i ] [ 2 ] ;
78755: LD_ADDR_VAR 0 8
78759: PUSH
78760: LD_VAR 0 3
78764: PUSH
78765: LD_VAR 0 1
78769: ARRAY
78770: PUSH
78771: LD_INT 2
78773: ARRAY
78774: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
78775: LD_ADDR_VAR 0 5
78779: PUSH
78780: LD_VAR 0 3
78784: PUSH
78785: LD_VAR 0 1
78789: ARRAY
78790: PUSH
78791: LD_INT 1
78793: ARRAY
78794: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
78795: LD_VAR 0 8
78799: PPUSH
78800: CALL_OW 301
78804: PUSH
78805: LD_VAR 0 5
78809: PUSH
78810: LD_VAR 0 8
78814: PPUSH
78815: CALL_OW 255
78819: NONEQUAL
78820: OR
78821: IFFALSE 78850
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
78823: LD_ADDR_EXP 106
78827: PUSH
78828: LD_EXP 106
78832: PPUSH
78833: LD_VAR 0 8
78837: PPUSH
78838: LD_INT 0
78840: PPUSH
78841: CALL_OW 1
78845: ST_TO_ADDR
// exit ;
78846: POP
78847: POP
78848: GO 79381
// end ; x := list [ i ] [ 3 ] ;
78850: LD_ADDR_VAR 0 6
78854: PUSH
78855: LD_VAR 0 3
78859: PUSH
78860: LD_VAR 0 1
78864: ARRAY
78865: PUSH
78866: LD_INT 3
78868: ARRAY
78869: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
78870: LD_ADDR_VAR 0 7
78874: PUSH
78875: LD_VAR 0 3
78879: PUSH
78880: LD_VAR 0 1
78884: ARRAY
78885: PUSH
78886: LD_INT 4
78888: ARRAY
78889: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
78890: LD_ADDR_VAR 0 9
78894: PUSH
78895: LD_VAR 0 6
78899: PPUSH
78900: LD_VAR 0 7
78904: PPUSH
78905: LD_INT 16
78907: PPUSH
78908: CALL 56507 0 3
78912: ST_TO_ADDR
// if not cratesNearbyPoint then
78913: LD_VAR 0 9
78917: NOT
78918: IFFALSE 78924
// exit ;
78920: POP
78921: POP
78922: GO 79381
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
78924: LD_ADDR_VAR 0 4
78928: PUSH
78929: LD_INT 22
78931: PUSH
78932: LD_VAR 0 5
78936: PUSH
78937: EMPTY
78938: LIST
78939: LIST
78940: PUSH
78941: LD_INT 3
78943: PUSH
78944: LD_INT 60
78946: PUSH
78947: EMPTY
78948: LIST
78949: PUSH
78950: EMPTY
78951: LIST
78952: LIST
78953: PUSH
78954: LD_INT 91
78956: PUSH
78957: LD_VAR 0 8
78961: PUSH
78962: LD_INT 6
78964: PUSH
78965: EMPTY
78966: LIST
78967: LIST
78968: LIST
78969: PUSH
78970: LD_INT 2
78972: PUSH
78973: LD_INT 25
78975: PUSH
78976: LD_INT 2
78978: PUSH
78979: EMPTY
78980: LIST
78981: LIST
78982: PUSH
78983: LD_INT 25
78985: PUSH
78986: LD_INT 16
78988: PUSH
78989: EMPTY
78990: LIST
78991: LIST
78992: PUSH
78993: EMPTY
78994: LIST
78995: LIST
78996: LIST
78997: PUSH
78998: EMPTY
78999: LIST
79000: LIST
79001: LIST
79002: LIST
79003: PPUSH
79004: CALL_OW 69
79008: PUSH
79009: LD_VAR 0 8
79013: PPUSH
79014: CALL_OW 313
79018: PPUSH
79019: LD_INT 3
79021: PUSH
79022: LD_INT 60
79024: PUSH
79025: EMPTY
79026: LIST
79027: PUSH
79028: EMPTY
79029: LIST
79030: LIST
79031: PUSH
79032: LD_INT 2
79034: PUSH
79035: LD_INT 25
79037: PUSH
79038: LD_INT 2
79040: PUSH
79041: EMPTY
79042: LIST
79043: LIST
79044: PUSH
79045: LD_INT 25
79047: PUSH
79048: LD_INT 16
79050: PUSH
79051: EMPTY
79052: LIST
79053: LIST
79054: PUSH
79055: EMPTY
79056: LIST
79057: LIST
79058: LIST
79059: PUSH
79060: EMPTY
79061: LIST
79062: LIST
79063: PPUSH
79064: CALL_OW 72
79068: UNION
79069: ST_TO_ADDR
// if tmp then
79070: LD_VAR 0 4
79074: IFFALSE 79154
// begin tmp := ShrinkArray ( tmp , 3 ) ;
79076: LD_ADDR_VAR 0 4
79080: PUSH
79081: LD_VAR 0 4
79085: PPUSH
79086: LD_INT 3
79088: PPUSH
79089: CALL 54476 0 2
79093: ST_TO_ADDR
// for j in tmp do
79094: LD_ADDR_VAR 0 2
79098: PUSH
79099: LD_VAR 0 4
79103: PUSH
79104: FOR_IN
79105: IFFALSE 79148
// begin if IsInUnit ( j ) then
79107: LD_VAR 0 2
79111: PPUSH
79112: CALL_OW 310
79116: IFFALSE 79127
// ComExit ( j ) ;
79118: LD_VAR 0 2
79122: PPUSH
79123: CALL 54559 0 1
// AddComCollect ( j , x , y ) ;
79127: LD_VAR 0 2
79131: PPUSH
79132: LD_VAR 0 6
79136: PPUSH
79137: LD_VAR 0 7
79141: PPUSH
79142: CALL_OW 177
// end ;
79146: GO 79104
79148: POP
79149: POP
// exit ;
79150: POP
79151: POP
79152: GO 79381
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
79154: LD_ADDR_VAR 0 4
79158: PUSH
79159: LD_INT 22
79161: PUSH
79162: LD_VAR 0 5
79166: PUSH
79167: EMPTY
79168: LIST
79169: LIST
79170: PUSH
79171: LD_INT 91
79173: PUSH
79174: LD_VAR 0 8
79178: PUSH
79179: LD_INT 8
79181: PUSH
79182: EMPTY
79183: LIST
79184: LIST
79185: LIST
79186: PUSH
79187: LD_INT 2
79189: PUSH
79190: LD_INT 34
79192: PUSH
79193: LD_INT 12
79195: PUSH
79196: EMPTY
79197: LIST
79198: LIST
79199: PUSH
79200: LD_INT 34
79202: PUSH
79203: LD_INT 51
79205: PUSH
79206: EMPTY
79207: LIST
79208: LIST
79209: PUSH
79210: LD_INT 34
79212: PUSH
79213: LD_INT 32
79215: PUSH
79216: EMPTY
79217: LIST
79218: LIST
79219: PUSH
79220: LD_INT 34
79222: PUSH
79223: LD_INT 89
79225: PUSH
79226: EMPTY
79227: LIST
79228: LIST
79229: PUSH
79230: EMPTY
79231: LIST
79232: LIST
79233: LIST
79234: LIST
79235: LIST
79236: PUSH
79237: EMPTY
79238: LIST
79239: LIST
79240: LIST
79241: PPUSH
79242: CALL_OW 69
79246: ST_TO_ADDR
// if tmp then
79247: LD_VAR 0 4
79251: IFFALSE 79377
// begin for j in tmp do
79253: LD_ADDR_VAR 0 2
79257: PUSH
79258: LD_VAR 0 4
79262: PUSH
79263: FOR_IN
79264: IFFALSE 79375
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
79266: LD_VAR 0 2
79270: PPUSH
79271: CALL_OW 262
79275: PUSH
79276: LD_INT 3
79278: EQUAL
79279: PUSH
79280: LD_VAR 0 2
79284: PPUSH
79285: CALL_OW 261
79289: PUSH
79290: LD_INT 20
79292: GREATER
79293: OR
79294: PUSH
79295: LD_VAR 0 2
79299: PPUSH
79300: CALL_OW 314
79304: NOT
79305: AND
79306: PUSH
79307: LD_VAR 0 2
79311: PPUSH
79312: CALL_OW 263
79316: PUSH
79317: LD_INT 1
79319: NONEQUAL
79320: PUSH
79321: LD_VAR 0 2
79325: PPUSH
79326: CALL_OW 311
79330: OR
79331: AND
79332: IFFALSE 79373
// begin ComCollect ( j , x , y ) ;
79334: LD_VAR 0 2
79338: PPUSH
79339: LD_VAR 0 6
79343: PPUSH
79344: LD_VAR 0 7
79348: PPUSH
79349: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
79353: LD_VAR 0 2
79357: PPUSH
79358: LD_VAR 0 8
79362: PPUSH
79363: CALL_OW 172
// exit ;
79367: POP
79368: POP
79369: POP
79370: POP
79371: GO 79381
// end ;
79373: GO 79263
79375: POP
79376: POP
// end ; end ;
79377: GO 78752
79379: POP
79380: POP
// end ; end_of_file
79381: PPOPN 9
79383: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79384: LD_VAR 0 1
79388: PPUSH
79389: LD_VAR 0 2
79393: PPUSH
79394: LD_VAR 0 3
79398: PPUSH
79399: LD_VAR 0 4
79403: PPUSH
79404: LD_VAR 0 5
79408: PPUSH
79409: LD_VAR 0 6
79413: PPUSH
79414: CALL 63737 0 6
// end ;
79418: PPOPN 6
79420: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
79421: LD_INT 0
79423: PPUSH
// begin if not units then
79424: LD_VAR 0 1
79428: NOT
79429: IFFALSE 79433
// exit ;
79431: GO 79433
// end ;
79433: PPOPN 7
79435: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79436: CALL 63641 0 0
// end ; end_of_file
79440: PPOPN 1
79442: END
