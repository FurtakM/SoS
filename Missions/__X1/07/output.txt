// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 69889 0 0
// Init ;
   8: CALL 58 0 0
// AnimateTrees ( true ) ;
  12: LD_INT 1
  14: PPUSH
  15: CALL_OW 573
// CreateNature ( apemanSpawnArea , forestArea , riverArea ) ;
  19: LD_INT 4
  21: PPUSH
  22: LD_INT 5
  24: PPUSH
  25: LD_INT 6
  27: PPUSH
  28: CALL 443 0 3
// PrepareAmerican ;
  32: CALL 2519 0 0
// PrepareArabian ;
  36: CALL 1237 0 0
// Action ;
  40: CALL 6636 0 0
// if debug then
  44: LD_EXP 1
  48: IFFALSE 57
// FogOff ( 2 ) ;
  50: LD_INT 2
  52: PPUSH
  53: CALL_OW 344
// end ;
  57: END
// export debug , prefix , scoutActive , scoutFailed , scoutSuccess , usAttacksAllowed , usSurrender , russianAttack , hasRockets ; function Init ; begin
  58: LD_INT 0
  60: PPUSH
// debug := false ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// prefix := 06_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 06_
  76: ST_TO_ADDR
// scoutActive := 0 ;
  77: LD_ADDR_EXP 3
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// scoutFailed := false ;
  85: LD_ADDR_EXP 4
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// scoutSuccess := false ;
  93: LD_ADDR_EXP 5
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// usAttacksAllowed := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// usSurrender := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// russianAttack := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// hasRockets := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// end ; end_of_file
 133: LD_VAR 0 1
 137: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 138: LD_INT 0
 140: PPUSH
// uc_side := side ;
 141: LD_ADDR_OWVAR 20
 145: PUSH
 146: LD_VAR 0 1
 150: ST_TO_ADDR
// uc_nation := nation ;
 151: LD_ADDR_OWVAR 21
 155: PUSH
 156: LD_VAR 0 2
 160: ST_TO_ADDR
// vc_chassis := chassis ;
 161: LD_ADDR_OWVAR 37
 165: PUSH
 166: LD_VAR 0 3
 170: ST_TO_ADDR
// vc_engine := engine ;
 171: LD_ADDR_OWVAR 39
 175: PUSH
 176: LD_VAR 0 4
 180: ST_TO_ADDR
// vc_control := control ;
 181: LD_ADDR_OWVAR 38
 185: PUSH
 186: LD_VAR 0 5
 190: ST_TO_ADDR
// vc_weapon := weapon ;
 191: LD_ADDR_OWVAR 40
 195: PUSH
 196: LD_VAR 0 6
 200: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 201: LD_ADDR_OWVAR 41
 205: PUSH
 206: LD_VAR 0 7
 210: ST_TO_ADDR
// result := CreateVehicle ;
 211: LD_ADDR_VAR 0 8
 215: PUSH
 216: CALL_OW 45
 220: ST_TO_ADDR
// end ;
 221: LD_VAR 0 8
 225: RET
// export function SayX ( units , ident ) ; var i ; begin
 226: LD_INT 0
 228: PPUSH
 229: PPUSH
// result := false ;
 230: LD_ADDR_VAR 0 3
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// if not units then
 238: LD_VAR 0 1
 242: NOT
 243: IFFALSE 247
// exit ;
 245: GO 301
// for i in units do
 247: LD_ADDR_VAR 0 4
 251: PUSH
 252: LD_VAR 0 1
 256: PUSH
 257: FOR_IN
 258: IFFALSE 299
// if IsOk ( i ) then
 260: LD_VAR 0 4
 264: PPUSH
 265: CALL_OW 302
 269: IFFALSE 297
// begin Say ( i , ident ) ;
 271: LD_VAR 0 4
 275: PPUSH
 276: LD_VAR 0 2
 280: PPUSH
 281: CALL_OW 88
// result := i ;
 285: LD_ADDR_VAR 0 3
 289: PUSH
 290: LD_VAR 0 4
 294: ST_TO_ADDR
// break ;
 295: GO 299
// end ;
 297: GO 257
 299: POP
 300: POP
// end ;
 301: LD_VAR 0 3
 305: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 306: LD_INT 0
 308: PPUSH
 309: PPUSH
// InitUc ;
 310: CALL_OW 18
// InitHc ;
 314: CALL_OW 19
// uc_side := 0 ;
 318: LD_ADDR_OWVAR 20
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// uc_nation := 0 ;
 326: LD_ADDR_OWVAR 21
 330: PUSH
 331: LD_INT 0
 333: ST_TO_ADDR
// for i = 1 to amount do
 334: LD_ADDR_VAR 0 4
 338: PUSH
 339: DOUBLE
 340: LD_INT 1
 342: DEC
 343: ST_TO_ADDR
 344: LD_VAR 0 2
 348: PUSH
 349: FOR_TO
 350: IFFALSE 432
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 352: LD_ADDR_OWVAR 29
 356: PUSH
 357: LD_INT 9
 359: PPUSH
 360: LD_INT 12
 362: PPUSH
 363: CALL_OW 12
 367: PUSH
 368: LD_INT 9
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 12
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 383: LD_ADDR_OWVAR 35
 387: PUSH
 388: LD_INT 1
 390: NEG
 391: PPUSH
 392: LD_INT 1
 394: PPUSH
 395: CALL_OW 12
 399: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 400: LD_INT 0
 402: PPUSH
 403: LD_INT 12
 405: PPUSH
 406: LD_INT 1
 408: PPUSH
 409: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 413: CALL_OW 44
 417: PPUSH
 418: LD_VAR 0 1
 422: PPUSH
 423: LD_INT 0
 425: PPUSH
 426: CALL_OW 49
// end ;
 430: GO 349
 432: POP
 433: POP
// InitHc ;
 434: CALL_OW 19
// end ;
 438: LD_VAR 0 3
 442: RET
// export function CreateNature ( apemanArea , forest , water ) ; var i ; begin
 443: LD_INT 0
 445: PPUSH
 446: PPUSH
// uc_side := 0 ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_INT 0
 454: ST_TO_ADDR
// uc_nation := 0 ;
 455: LD_ADDR_OWVAR 21
 459: PUSH
 460: LD_INT 0
 462: ST_TO_ADDR
// SpawnApeman ( apemanArea , [ 9 , 8 , 7 ] [ Difficulty ] ) ;
 463: LD_VAR 0 1
 467: PPUSH
 468: LD_INT 9
 470: PUSH
 471: LD_INT 8
 473: PUSH
 474: LD_INT 7
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: LD_OWVAR 67
 486: ARRAY
 487: PPUSH
 488: CALL 306 0 2
// for i := 1 to 4 do
 492: LD_ADDR_VAR 0 5
 496: PUSH
 497: DOUBLE
 498: LD_INT 1
 500: DEC
 501: ST_TO_ADDR
 502: LD_INT 4
 504: PUSH
 505: FOR_TO
 506: IFFALSE 545
// begin hc_class := class_horse ;
 508: LD_ADDR_OWVAR 28
 512: PUSH
 513: LD_EXP 114
 517: ST_TO_ADDR
// hc_gallery :=  ;
 518: LD_ADDR_OWVAR 33
 522: PUSH
 523: LD_STRING 
 525: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 526: CALL_OW 44
 530: PPUSH
 531: LD_VAR 0 2
 535: PPUSH
 536: LD_INT 0
 538: PPUSH
 539: CALL_OW 49
// end ;
 543: GO 505
 545: POP
 546: POP
// for i = 1 to 5 do
 547: LD_ADDR_VAR 0 5
 551: PUSH
 552: DOUBLE
 553: LD_INT 1
 555: DEC
 556: ST_TO_ADDR
 557: LD_INT 5
 559: PUSH
 560: FOR_TO
 561: IFFALSE 615
// begin hc_class = class_tiger ;
 563: LD_ADDR_OWVAR 28
 567: PUSH
 568: LD_INT 14
 570: ST_TO_ADDR
// hc_gallery =  ;
 571: LD_ADDR_OWVAR 33
 575: PUSH
 576: LD_STRING 
 578: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 579: LD_ADDR_OWVAR 35
 583: PUSH
 584: LD_INT 7
 586: NEG
 587: PPUSH
 588: LD_INT 7
 590: PPUSH
 591: CALL_OW 12
 595: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
 596: CALL_OW 44
 600: PPUSH
 601: LD_VAR 0 2
 605: PPUSH
 606: LD_INT 0
 608: PPUSH
 609: CALL 49279 0 3
// end ;
 613: GO 560
 615: POP
 616: POP
// for i := 1 to 4 do
 617: LD_ADDR_VAR 0 5
 621: PUSH
 622: DOUBLE
 623: LD_INT 1
 625: DEC
 626: ST_TO_ADDR
 627: LD_INT 4
 629: PUSH
 630: FOR_TO
 631: IFFALSE 668
// begin hc_class := class_phororhacos ;
 633: LD_ADDR_OWVAR 28
 637: PUSH
 638: LD_INT 18
 640: ST_TO_ADDR
// hc_gallery :=  ;
 641: LD_ADDR_OWVAR 33
 645: PUSH
 646: LD_STRING 
 648: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 649: CALL_OW 44
 653: PPUSH
 654: LD_VAR 0 2
 658: PPUSH
 659: LD_INT 0
 661: PPUSH
 662: CALL_OW 49
// end ;
 666: GO 630
 668: POP
 669: POP
// for i := 1 to 4 do
 670: LD_ADDR_VAR 0 5
 674: PUSH
 675: DOUBLE
 676: LD_INT 1
 678: DEC
 679: ST_TO_ADDR
 680: LD_INT 4
 682: PUSH
 683: FOR_TO
 684: IFFALSE 721
// begin hc_class := class_baggie ;
 686: LD_ADDR_OWVAR 28
 690: PUSH
 691: LD_INT 13
 693: ST_TO_ADDR
// hc_gallery :=  ;
 694: LD_ADDR_OWVAR 33
 698: PUSH
 699: LD_STRING 
 701: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 702: CALL_OW 44
 706: PPUSH
 707: LD_VAR 0 2
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 683
 721: POP
 722: POP
// for i := 1 to 5 do
 723: LD_ADDR_VAR 0 5
 727: PUSH
 728: DOUBLE
 729: LD_INT 1
 731: DEC
 732: ST_TO_ADDR
 733: LD_INT 5
 735: PUSH
 736: FOR_TO
 737: IFFALSE 774
// begin hc_class := class_fish ;
 739: LD_ADDR_OWVAR 28
 743: PUSH
 744: LD_INT 20
 746: ST_TO_ADDR
// hc_gallery :=  ;
 747: LD_ADDR_OWVAR 33
 751: PUSH
 752: LD_STRING 
 754: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , water , false ) ;
 755: CALL_OW 44
 759: PPUSH
 760: LD_VAR 0 3
 764: PPUSH
 765: LD_INT 0
 767: PPUSH
 768: CALL_OW 49
// end ;
 772: GO 736
 774: POP
 775: POP
// end ;
 776: LD_VAR 0 4
 780: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
// if not observer or not unit then
 786: LD_VAR 0 1
 790: NOT
 791: PUSH
 792: LD_VAR 0 2
 796: NOT
 797: OR
 798: IFFALSE 802
// exit ;
 800: GO 850
// if not See ( GetSide ( observer ) , unit ) then
 802: LD_VAR 0 1
 806: PPUSH
 807: CALL_OW 255
 811: PPUSH
 812: LD_VAR 0 2
 816: PPUSH
 817: CALL_OW 292
 821: NOT
 822: IFFALSE 826
// exit ;
 824: GO 850
// result := GetDistUnits ( observer , unit ) < 12 ;
 826: LD_ADDR_VAR 0 3
 830: PUSH
 831: LD_VAR 0 1
 835: PPUSH
 836: LD_VAR 0 2
 840: PPUSH
 841: CALL_OW 296
 845: PUSH
 846: LD_INT 12
 848: LESS
 849: ST_TO_ADDR
// end ;
 850: LD_VAR 0 3
 854: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 855: LD_INT 0
 857: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 858: LD_VAR 0 2
 862: PUSH
 863: LD_INT 1
 865: ARRAY
 866: PPUSH
 867: LD_VAR 0 2
 871: PUSH
 872: LD_INT 2
 874: ARRAY
 875: PPUSH
 876: CALL_OW 488
 880: PUSH
 881: LD_VAR 0 2
 885: PUSH
 886: LD_INT 1
 888: ARRAY
 889: PPUSH
 890: LD_VAR 0 2
 894: PUSH
 895: LD_INT 2
 897: ARRAY
 898: PPUSH
 899: CALL_OW 428
 903: PUSH
 904: LD_INT 0
 906: EQUAL
 907: AND
 908: IFFALSE 942
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 910: LD_VAR 0 1
 914: PPUSH
 915: LD_VAR 0 2
 919: PUSH
 920: LD_INT 1
 922: ARRAY
 923: PPUSH
 924: LD_VAR 0 2
 928: PUSH
 929: LD_INT 2
 931: ARRAY
 932: PPUSH
 933: LD_VAR 0 3
 937: PPUSH
 938: CALL_OW 48
// end ;
 942: LD_VAR 0 4
 946: RET
// export function ReverseArray ( array ) ; var i ; begin
 947: LD_INT 0
 949: PPUSH
 950: PPUSH
// if not array then
 951: LD_VAR 0 1
 955: NOT
 956: IFFALSE 960
// exit ;
 958: GO 1018
// result := [ ] ;
 960: LD_ADDR_VAR 0 2
 964: PUSH
 965: EMPTY
 966: ST_TO_ADDR
// for i := 1 to array do
 967: LD_ADDR_VAR 0 3
 971: PUSH
 972: DOUBLE
 973: LD_INT 1
 975: DEC
 976: ST_TO_ADDR
 977: LD_VAR 0 1
 981: PUSH
 982: FOR_TO
 983: IFFALSE 1016
// result := Insert ( result , 1 , array [ i ] ) ;
 985: LD_ADDR_VAR 0 2
 989: PUSH
 990: LD_VAR 0 2
 994: PPUSH
 995: LD_INT 1
 997: PPUSH
 998: LD_VAR 0 1
1002: PUSH
1003: LD_VAR 0 3
1007: ARRAY
1008: PPUSH
1009: CALL_OW 2
1013: ST_TO_ADDR
1014: GO 982
1016: POP
1017: POP
// end ;
1018: LD_VAR 0 2
1022: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1023: LD_INT 0
1025: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1026: LD_VAR 0 1
1030: PPUSH
1031: LD_VAR 0 2
1035: PPUSH
1036: LD_VAR 0 3
1040: PPUSH
1041: LD_VAR 0 4
1045: PPUSH
1046: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1050: LD_VAR 0 1
1054: PPUSH
1055: LD_VAR 0 2
1059: PPUSH
1060: LD_VAR 0 3
1064: PPUSH
1065: CALL_OW 331
// end ;
1069: LD_VAR 0 5
1073: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1074: LD_INT 0
1076: PPUSH
// if not units then
1077: LD_VAR 0 1
1081: NOT
1082: IFFALSE 1086
// exit ;
1084: GO 1169
// result := true ;
1086: LD_ADDR_VAR 0 4
1090: PUSH
1091: LD_INT 1
1093: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1094: LD_VAR 0 1
1098: PPUSH
1099: LD_INT 26
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: PPUSH
1109: CALL_OW 72
1113: PUSH
1114: LD_INT 1
1116: ARRAY
1117: PPUSH
1118: LD_VAR 0 2
1122: PPUSH
1123: CALL_OW 88
1127: NOT
1128: IFFALSE 1169
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1130: LD_ADDR_VAR 0 4
1134: PUSH
1135: LD_VAR 0 1
1139: PPUSH
1140: LD_INT 26
1142: PUSH
1143: LD_INT 2
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: PPUSH
1150: CALL_OW 72
1154: PUSH
1155: LD_INT 1
1157: ARRAY
1158: PPUSH
1159: LD_VAR 0 3
1163: PPUSH
1164: CALL_OW 88
1168: ST_TO_ADDR
// end ;
1169: LD_VAR 0 4
1173: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1174: LD_INT 0
1176: PPUSH
1177: PPUSH
// if not group then
1178: LD_VAR 0 2
1182: NOT
1183: IFFALSE 1187
// exit ;
1185: GO 1232
// for i in group do
1187: LD_ADDR_VAR 0 4
1191: PUSH
1192: LD_VAR 0 2
1196: PUSH
1197: FOR_IN
1198: IFFALSE 1230
// if See ( side , i ) then
1200: LD_VAR 0 1
1204: PPUSH
1205: LD_VAR 0 4
1209: PPUSH
1210: CALL_OW 292
1214: IFFALSE 1228
// begin result := true ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: LD_INT 1
1223: ST_TO_ADDR
// exit ;
1224: POP
1225: POP
1226: GO 1232
// end ;
1228: GO 1197
1230: POP
1231: POP
// end ; end_of_file
1232: LD_VAR 0 3
1236: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeApes , heikeVehicles ; export function PrepareArabian ; var i , tmp ; begin
1237: LD_INT 0
1239: PPUSH
1240: PPUSH
1241: PPUSH
// uc_nation := 2 ;
1242: LD_ADDR_OWVAR 21
1246: PUSH
1247: LD_INT 2
1249: ST_TO_ADDR
// uc_side := 5 ;
1250: LD_ADDR_OWVAR 20
1254: PUSH
1255: LD_INT 5
1257: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1258: LD_ADDR_EXP 18
1262: PUSH
1263: LD_STRING Abdul
1265: PPUSH
1266: LD_INT 0
1268: PPUSH
1269: LD_STRING 
1271: PPUSH
1272: CALL 13628 0 3
1276: ST_TO_ADDR
// uc_side := 2 ;
1277: LD_ADDR_OWVAR 20
1281: PUSH
1282: LD_INT 2
1284: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1285: LD_ADDR_EXP 10
1289: PUSH
1290: LD_STRING Heike
1292: PPUSH
1293: LD_EXP 1
1297: NOT
1298: PPUSH
1299: LD_EXP 2
1303: PPUSH
1304: CALL 13628 0 3
1308: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1309: LD_ADDR_EXP 13
1313: PUSH
1314: LD_STRING Ibrahim
1316: PPUSH
1317: LD_EXP 1
1321: NOT
1322: PPUSH
1323: LD_EXP 2
1327: PPUSH
1328: CALL 13628 0 3
1332: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1333: LD_ADDR_EXP 11
1337: PUSH
1338: LD_STRING Givi
1340: PPUSH
1341: LD_EXP 1
1345: NOT
1346: PPUSH
1347: LD_EXP 2
1351: PPUSH
1352: CALL 13628 0 3
1356: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1357: LD_ADDR_EXP 14
1361: PUSH
1362: LD_STRING Kamil
1364: PPUSH
1365: LD_EXP 1
1369: NOT
1370: PPUSH
1371: LD_EXP 2
1375: PPUSH
1376: CALL 13628 0 3
1380: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1381: LD_ADDR_EXP 15
1385: PUSH
1386: LD_STRING Kaia
1388: PPUSH
1389: LD_EXP 1
1393: NOT
1394: PPUSH
1395: LD_EXP 2
1399: PPUSH
1400: CALL 13628 0 3
1404: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1405: LD_ADDR_EXP 16
1409: PUSH
1410: LD_STRING Sophia
1412: PPUSH
1413: LD_EXP 1
1417: NOT
1418: PPUSH
1419: LD_EXP 2
1423: PPUSH
1424: CALL 13628 0 3
1428: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1429: LD_ADDR_EXP 17
1433: PUSH
1434: LD_STRING Markov
1436: PPUSH
1437: LD_EXP 1
1441: NOT
1442: PPUSH
1443: LD_EXP 2
1447: PPUSH
1448: CALL 13628 0 3
1452: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1453: LD_ADDR_EXP 21
1457: PUSH
1458: LD_STRING Aviradze
1460: PPUSH
1461: LD_EXP 1
1465: NOT
1466: PPUSH
1467: LD_EXP 2
1471: PPUSH
1472: CALL 13628 0 3
1476: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1477: LD_ADDR_EXP 20
1481: PUSH
1482: LD_STRING Kurt
1484: PPUSH
1485: LD_EXP 1
1489: NOT
1490: PPUSH
1491: LD_EXP 2
1495: PPUSH
1496: CALL 13628 0 3
1500: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1501: LD_ADDR_EXP 12
1505: PUSH
1506: LD_STRING Mike
1508: PPUSH
1509: LD_EXP 1
1513: NOT
1514: PPUSH
1515: LD_EXP 2
1519: PPUSH
1520: CALL 13628 0 3
1524: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1525: LD_ADDR_EXP 19
1529: PUSH
1530: LD_STRING Olaf
1532: PPUSH
1533: LD_INT 0
1535: PPUSH
1536: LD_STRING 
1538: PPUSH
1539: CALL 13628 0 3
1543: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 06_others ) ;
1544: LD_ADDR_EXP 22
1548: PUSH
1549: LD_STRING 06_others
1551: PPUSH
1552: CALL_OW 31
1556: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 06_apes ) ;
1557: LD_ADDR_EXP 23
1561: PUSH
1562: LD_STRING 06_apes
1564: PPUSH
1565: CALL_OW 31
1569: ST_TO_ADDR
// if debug then
1570: LD_EXP 1
1574: IFFALSE 1849
// begin tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 750 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 900 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 100 , 0 ] ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 50 , 50 ] ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_mortar , 2 , 1000 , 0 ] ] ;
1576: LD_ADDR_VAR 0 3
1580: PUSH
1581: LD_INT 14
1583: PUSH
1584: LD_INT 1
1586: PUSH
1587: LD_INT 2
1589: PUSH
1590: LD_INT 25
1592: PUSH
1593: LD_INT 2
1595: PUSH
1596: LD_INT 1000
1598: PUSH
1599: LD_INT 0
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: PUSH
1611: LD_INT 14
1613: PUSH
1614: LD_INT 1
1616: PUSH
1617: LD_INT 1
1619: PUSH
1620: LD_INT 31
1622: PUSH
1623: LD_INT 2
1625: PUSH
1626: LD_INT 1000
1628: PUSH
1629: LD_INT 0
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: PUSH
1641: LD_INT 14
1643: PUSH
1644: LD_INT 1
1646: PUSH
1647: LD_INT 1
1649: PUSH
1650: LD_INT 27
1652: PUSH
1653: LD_INT 2
1655: PUSH
1656: LD_INT 750
1658: PUSH
1659: LD_INT 0
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: PUSH
1671: LD_INT 14
1673: PUSH
1674: LD_INT 1
1676: PUSH
1677: LD_INT 1
1679: PUSH
1680: LD_INT 27
1682: PUSH
1683: LD_INT 2
1685: PUSH
1686: LD_INT 900
1688: PUSH
1689: LD_INT 0
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: LIST
1700: PUSH
1701: LD_INT 14
1703: PUSH
1704: LD_INT 1
1706: PUSH
1707: LD_INT 1
1709: PUSH
1710: LD_INT 32
1712: PUSH
1713: LD_INT 2
1715: PUSH
1716: LD_INT 1000
1718: PUSH
1719: LD_INT 100
1721: PUSH
1722: LD_INT 0
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 14
1740: PUSH
1741: LD_INT 1
1743: PUSH
1744: LD_INT 1
1746: PUSH
1747: LD_INT 32
1749: PUSH
1750: LD_INT 2
1752: PUSH
1753: LD_INT 1000
1755: PUSH
1756: LD_INT 50
1758: PUSH
1759: LD_INT 50
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: PUSH
1775: LD_INT 14
1777: PUSH
1778: LD_INT 1
1780: PUSH
1781: LD_INT 2
1783: PUSH
1784: LD_INT 27
1786: PUSH
1787: LD_INT 2
1789: PUSH
1790: LD_INT 1000
1792: PUSH
1793: LD_INT 0
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: PUSH
1805: LD_INT 14
1807: PUSH
1808: LD_INT 1
1810: PUSH
1811: LD_INT 1
1813: PUSH
1814: LD_EXP 101
1818: PUSH
1819: LD_INT 2
1821: PUSH
1822: LD_INT 1000
1824: PUSH
1825: LD_INT 0
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: ST_TO_ADDR
// end else
1847: GO 1856
// tmp := [ ] ;
1849: LD_ADDR_VAR 0 3
1853: PUSH
1854: EMPTY
1855: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 06_Vehicles , tmp ) ;
1856: LD_ADDR_EXP 24
1860: PUSH
1861: LD_STRING 06_Vehicles
1863: PPUSH
1864: LD_VAR 0 3
1868: PPUSH
1869: CALL_OW 30
1873: ST_TO_ADDR
// if heikeVehicles then
1874: LD_EXP 24
1878: IFFALSE 1973
// begin for i := heikeVehicles downto 1 do
1880: LD_ADDR_VAR 0 2
1884: PUSH
1885: DOUBLE
1886: LD_EXP 24
1890: INC
1891: ST_TO_ADDR
1892: LD_INT 1
1894: PUSH
1895: FOR_DOWNTO
1896: IFFALSE 1971
// begin if heikeVehicles [ i ] [ 3 ] = control_remote then
1898: LD_EXP 24
1902: PUSH
1903: LD_VAR 0 2
1907: ARRAY
1908: PUSH
1909: LD_INT 3
1911: ARRAY
1912: PUSH
1913: LD_INT 2
1915: EQUAL
1916: IFFALSE 1969
// begin heikeVehicles := Insert ( heikeVehicles , heikeVehicles , heikeVehicles [ i ] ) ;
1918: LD_ADDR_EXP 24
1922: PUSH
1923: LD_EXP 24
1927: PPUSH
1928: LD_EXP 24
1932: PPUSH
1933: LD_EXP 24
1937: PUSH
1938: LD_VAR 0 2
1942: ARRAY
1943: PPUSH
1944: CALL_OW 2
1948: ST_TO_ADDR
// heikeVehicles := Delete ( heikeVehicles , i ) ;
1949: LD_ADDR_EXP 24
1953: PUSH
1954: LD_EXP 24
1958: PPUSH
1959: LD_VAR 0 2
1963: PPUSH
1964: CALL_OW 3
1968: ST_TO_ADDR
// end ; end ;
1969: GO 1895
1971: POP
1972: POP
// end ; end ;
1973: LD_VAR 0 1
1977: RET
// every 0 0$1 trigger scoutActive do var i , tmp ;
1978: LD_EXP 3
1982: IFFALSE 2516
1984: GO 1986
1986: DISABLE
1987: LD_INT 0
1989: PPUSH
1990: PPUSH
// begin tmp := [ [ [ 96 , 50 ] , [ 49 , 52 ] , [ 34 , 55 ] , [ 41 , 70 ] , [ 53 , 96 ] , [ 103 , 64 ] ] , [ [ 104 , 70 ] , [ 111 , 103 ] , [ 131 , 147 ] , [ 130 , 153 ] , [ 110 , 93 ] , [ 103 , 65 ] ] ] ;
1991: LD_ADDR_VAR 0 2
1995: PUSH
1996: LD_INT 96
1998: PUSH
1999: LD_INT 50
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: PUSH
2006: LD_INT 49
2008: PUSH
2009: LD_INT 52
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: PUSH
2016: LD_INT 34
2018: PUSH
2019: LD_INT 55
2021: PUSH
2022: EMPTY
2023: LIST
2024: LIST
2025: PUSH
2026: LD_INT 41
2028: PUSH
2029: LD_INT 70
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: PUSH
2036: LD_INT 53
2038: PUSH
2039: LD_INT 96
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: PUSH
2046: LD_INT 103
2048: PUSH
2049: LD_INT 64
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: PUSH
2056: EMPTY
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: PUSH
2064: LD_INT 104
2066: PUSH
2067: LD_INT 70
2069: PUSH
2070: EMPTY
2071: LIST
2072: LIST
2073: PUSH
2074: LD_INT 111
2076: PUSH
2077: LD_INT 103
2079: PUSH
2080: EMPTY
2081: LIST
2082: LIST
2083: PUSH
2084: LD_INT 131
2086: PUSH
2087: LD_INT 147
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: PUSH
2094: LD_INT 130
2096: PUSH
2097: LD_INT 153
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 110
2106: PUSH
2107: LD_INT 93
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: PUSH
2114: LD_INT 103
2116: PUSH
2117: LD_INT 65
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: ST_TO_ADDR
// for i in tmp [ 1 ] do
2136: LD_ADDR_VAR 0 1
2140: PUSH
2141: LD_VAR 0 2
2145: PUSH
2146: LD_INT 1
2148: ARRAY
2149: PUSH
2150: FOR_IN
2151: IFFALSE 2203
// begin AddComAgressiveMove ( Mike , i [ 1 ] , i [ 2 ] ) ;
2153: LD_EXP 12
2157: PPUSH
2158: LD_VAR 0 1
2162: PUSH
2163: LD_INT 1
2165: ARRAY
2166: PPUSH
2167: LD_VAR 0 1
2171: PUSH
2172: LD_INT 2
2174: ARRAY
2175: PPUSH
2176: CALL_OW 174
// AddComHold ( Mike ) ;
2180: LD_EXP 12
2184: PPUSH
2185: CALL_OW 200
// AddComWait ( Mike , 0 0$5 ) ;
2189: LD_EXP 12
2193: PPUSH
2194: LD_INT 175
2196: PPUSH
2197: CALL_OW 202
// end ;
2201: GO 2150
2203: POP
2204: POP
// for i in tmp [ 2 ] do
2205: LD_ADDR_VAR 0 1
2209: PUSH
2210: LD_VAR 0 2
2214: PUSH
2215: LD_INT 2
2217: ARRAY
2218: PUSH
2219: FOR_IN
2220: IFFALSE 2272
// begin AddComAgressiveMove ( Kurt , i [ 1 ] , i [ 2 ] ) ;
2222: LD_EXP 20
2226: PPUSH
2227: LD_VAR 0 1
2231: PUSH
2232: LD_INT 1
2234: ARRAY
2235: PPUSH
2236: LD_VAR 0 1
2240: PUSH
2241: LD_INT 2
2243: ARRAY
2244: PPUSH
2245: CALL_OW 174
// AddComHold ( Kurt ) ;
2249: LD_EXP 20
2253: PPUSH
2254: CALL_OW 200
// AddComWait ( Kurt , 0 0$5 ) ;
2258: LD_EXP 20
2262: PPUSH
2263: LD_INT 175
2265: PPUSH
2266: CALL_OW 202
// end ;
2270: GO 2219
2272: POP
2273: POP
// wait ( 0 0$1 ) ;
2274: LD_INT 35
2276: PPUSH
2277: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2281: LD_INT 35
2283: PPUSH
2284: CALL_OW 67
// until ( not HasTask ( Mike ) or IsDead ( Mike ) ) and ( not HasTask ( Kurt ) or IsDead ( Kurt ) ) ;
2288: LD_EXP 12
2292: PPUSH
2293: CALL_OW 314
2297: NOT
2298: PUSH
2299: LD_EXP 12
2303: PPUSH
2304: CALL_OW 301
2308: OR
2309: PUSH
2310: LD_EXP 20
2314: PPUSH
2315: CALL_OW 314
2319: NOT
2320: PUSH
2321: LD_EXP 20
2325: PPUSH
2326: CALL_OW 301
2330: OR
2331: AND
2332: IFFALSE 2281
// if IsDead ( Kurt ) and IsDead ( Mike ) then
2334: LD_EXP 20
2338: PPUSH
2339: CALL_OW 301
2343: PUSH
2344: LD_EXP 12
2348: PPUSH
2349: CALL_OW 301
2353: AND
2354: IFFALSE 2366
// begin scoutFailed := true ;
2356: LD_ADDR_EXP 4
2360: PUSH
2361: LD_INT 1
2363: ST_TO_ADDR
// exit ;
2364: GO 2516
// end ; ComMoveXY ( [ Kurt , Mike ] , 132 , 52 ) ;
2366: LD_EXP 20
2370: PUSH
2371: LD_EXP 12
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: PPUSH
2380: LD_INT 132
2382: PPUSH
2383: LD_INT 52
2385: PPUSH
2386: CALL_OW 111
// AddComMoveUnit ( [ Kurt , Mike ] , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
2390: LD_EXP 20
2394: PUSH
2395: LD_EXP 12
2399: PUSH
2400: EMPTY
2401: LIST
2402: LIST
2403: PPUSH
2404: LD_INT 22
2406: PUSH
2407: LD_INT 2
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PPUSH
2414: CALL_OW 69
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
2427: LD_INT 35
2429: PPUSH
2430: CALL_OW 67
// until See ( 2 , Kurt ) or See ( 2 , Mike ) ;
2434: LD_INT 2
2436: PPUSH
2437: LD_EXP 20
2441: PPUSH
2442: CALL_OW 292
2446: PUSH
2447: LD_INT 2
2449: PPUSH
2450: LD_EXP 12
2454: PPUSH
2455: CALL_OW 292
2459: OR
2460: IFFALSE 2427
// if IsLive ( Kurt ) then
2462: LD_EXP 20
2466: PPUSH
2467: CALL_OW 300
2471: IFFALSE 2485
// SetSide ( Kurt , 2 ) ;
2473: LD_EXP 20
2477: PPUSH
2478: LD_INT 2
2480: PPUSH
2481: CALL_OW 235
// if IsLive ( Mike ) then
2485: LD_EXP 12
2489: PPUSH
2490: CALL_OW 300
2494: IFFALSE 2508
// SetSide ( Mike , 2 ) ;
2496: LD_EXP 12
2500: PPUSH
2501: LD_INT 2
2503: PPUSH
2504: CALL_OW 235
// scoutSuccess := true ;
2508: LD_ADDR_EXP 5
2512: PUSH
2513: LD_INT 1
2515: ST_TO_ADDR
// end ; end_of_file
2516: PPOPN 2
2518: END
// export usCommander , usForces , usCargo , usToBuild ; export function PrepareAmerican ; var i , b , veh ; begin
2519: LD_INT 0
2521: PPUSH
2522: PPUSH
2523: PPUSH
2524: PPUSH
// uc_side := 1 ;
2525: LD_ADDR_OWVAR 20
2529: PUSH
2530: LD_INT 1
2532: ST_TO_ADDR
// uc_nation := 1 ;
2533: LD_ADDR_OWVAR 21
2537: PUSH
2538: LD_INT 1
2540: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 2000 , 2500 , 3000 , 3500 ] [ Difficulty ] ) ;
2541: LD_INT 1
2543: PPUSH
2544: CALL_OW 274
2548: PPUSH
2549: LD_INT 1
2551: PPUSH
2552: LD_INT 2000
2554: PUSH
2555: LD_INT 2500
2557: PUSH
2558: LD_INT 3000
2560: PUSH
2561: LD_INT 3500
2563: PUSH
2564: EMPTY
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: PUSH
2570: LD_OWVAR 67
2574: ARRAY
2575: PPUSH
2576: CALL_OW 277
// SetResourceType ( GetBase ( usDepot ) , mat_oil , 600 ) ;
2580: LD_INT 1
2582: PPUSH
2583: CALL_OW 274
2587: PPUSH
2588: LD_INT 2
2590: PPUSH
2591: LD_INT 600
2593: PPUSH
2594: CALL_OW 277
// usForces := [ ] ;
2598: LD_ADDR_EXP 26
2602: PUSH
2603: EMPTY
2604: ST_TO_ADDR
// usToBuild := [ ] ;
2605: LD_ADDR_EXP 28
2609: PUSH
2610: EMPTY
2611: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2612: LD_ADDR_VAR 0 2
2616: PUSH
2617: LD_INT 21
2619: PUSH
2620: LD_INT 3
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: PPUSH
2627: CALL_OW 69
2631: PUSH
2632: FOR_IN
2633: IFFALSE 2670
// SetBLevel ( i , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
2635: LD_VAR 0 2
2639: PPUSH
2640: LD_INT 6
2642: PUSH
2643: LD_INT 7
2645: PUSH
2646: LD_INT 8
2648: PUSH
2649: LD_INT 8
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: LIST
2656: LIST
2657: PUSH
2658: LD_OWVAR 67
2662: ARRAY
2663: PPUSH
2664: CALL_OW 241
2668: GO 2632
2670: POP
2671: POP
// for i in FilterAllUnits ( [ f_btype , b_bunker ] ) do
2672: LD_ADDR_VAR 0 2
2676: PUSH
2677: LD_INT 30
2679: PUSH
2680: LD_INT 32
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PPUSH
2687: CALL_OW 69
2691: PUSH
2692: FOR_IN
2693: IFFALSE 2783
// begin if GetBWeapon ( i ) = us_radar then
2695: LD_VAR 0 2
2699: PPUSH
2700: CALL_OW 269
2704: PUSH
2705: LD_INT 11
2707: EQUAL
2708: IFFALSE 2733
// begin uc_nation := 0 ;
2710: LD_ADDR_OWVAR 21
2714: PUSH
2715: LD_INT 0
2717: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 2 ) ;
2718: LD_INT 0
2720: PPUSH
2721: LD_INT 16
2723: PPUSH
2724: LD_INT 2
2726: PPUSH
2727: CALL_OW 380
// end else
2731: GO 2767
// PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2733: LD_INT 0
2735: PPUSH
2736: LD_INT 1
2738: PPUSH
2739: LD_INT 5
2741: PUSH
2742: LD_INT 6
2744: PUSH
2745: LD_INT 7
2747: PUSH
2748: LD_INT 8
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: LIST
2755: LIST
2756: PUSH
2757: LD_OWVAR 67
2761: ARRAY
2762: PPUSH
2763: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2767: CALL_OW 44
2771: PPUSH
2772: LD_VAR 0 2
2776: PPUSH
2777: CALL_OW 52
// end ;
2781: GO 2692
2783: POP
2784: POP
// b := HexInfo ( 74 , 120 ) ;
2785: LD_ADDR_VAR 0 3
2789: PUSH
2790: LD_INT 74
2792: PPUSH
2793: LD_INT 120
2795: PPUSH
2796: CALL_OW 428
2800: ST_TO_ADDR
// uc_nation := 1 ;
2801: LD_ADDR_OWVAR 21
2805: PUSH
2806: LD_INT 1
2808: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
2809: LD_ADDR_VAR 0 2
2813: PUSH
2814: DOUBLE
2815: LD_INT 1
2817: DEC
2818: ST_TO_ADDR
2819: LD_INT 1
2821: PUSH
2822: LD_INT 2
2824: PUSH
2825: LD_INT 3
2827: PUSH
2828: LD_INT 4
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: PUSH
2837: LD_OWVAR 67
2841: ARRAY
2842: PUSH
2843: FOR_TO
2844: IFFALSE 2896
// begin PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2846: LD_INT 0
2848: PPUSH
2849: LD_INT 1
2851: PPUSH
2852: LD_INT 5
2854: PUSH
2855: LD_INT 6
2857: PUSH
2858: LD_INT 7
2860: PUSH
2861: LD_INT 8
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: LIST
2868: LIST
2869: PUSH
2870: LD_OWVAR 67
2874: ARRAY
2875: PPUSH
2876: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b ) ;
2880: CALL_OW 44
2884: PPUSH
2885: LD_VAR 0 3
2889: PPUSH
2890: CALL_OW 52
// end ;
2894: GO 2843
2896: POP
2897: POP
// SetClass ( UnitsInside ( b ) , class_sniper ) ;
2898: LD_VAR 0 3
2902: PPUSH
2903: CALL_OW 313
2907: PPUSH
2908: LD_INT 5
2910: PPUSH
2911: CALL_OW 336
// for i := 1 to 6 do
2915: LD_ADDR_VAR 0 2
2919: PUSH
2920: DOUBLE
2921: LD_INT 1
2923: DEC
2924: ST_TO_ADDR
2925: LD_INT 6
2927: PUSH
2928: FOR_TO
2929: IFFALSE 2979
// begin PrepareHuman ( false , 4 , 6 ) ;
2931: LD_INT 0
2933: PPUSH
2934: LD_INT 4
2936: PPUSH
2937: LD_INT 6
2939: PPUSH
2940: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ amLab1 , amLab2 ] [ i mod 2 + 1 ] ) ;
2944: CALL_OW 44
2948: PPUSH
2949: LD_INT 32
2951: PUSH
2952: LD_INT 33
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: PUSH
2959: LD_VAR 0 2
2963: PUSH
2964: LD_INT 2
2966: MOD
2967: PUSH
2968: LD_INT 1
2970: PLUS
2971: ARRAY
2972: PPUSH
2973: CALL_OW 52
// end ;
2977: GO 2928
2979: POP
2980: POP
// for i := 1 to 3 do
2981: LD_ADDR_VAR 0 2
2985: PUSH
2986: DOUBLE
2987: LD_INT 1
2989: DEC
2990: ST_TO_ADDR
2991: LD_INT 3
2993: PUSH
2994: FOR_TO
2995: IFFALSE 3024
// begin PrepareHuman ( false , 3 , 6 ) ;
2997: LD_INT 0
2999: PPUSH
3000: LD_INT 3
3002: PPUSH
3003: LD_INT 6
3005: PPUSH
3006: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , amFac ) ;
3010: CALL_OW 44
3014: PPUSH
3015: LD_INT 25
3017: PPUSH
3018: CALL_OW 52
// end ;
3022: GO 2994
3024: POP
3025: POP
// for i := 1 to 3 do
3026: LD_ADDR_VAR 0 2
3030: PUSH
3031: DOUBLE
3032: LD_INT 1
3034: DEC
3035: ST_TO_ADDR
3036: LD_INT 3
3038: PUSH
3039: FOR_TO
3040: IFFALSE 3098
// begin PrepareHuman ( false , 3 , [ 6 , 7 , 7 , 7 ] [ Difficulty ] ) ;
3042: LD_INT 0
3044: PPUSH
3045: LD_INT 3
3047: PPUSH
3048: LD_INT 6
3050: PUSH
3051: LD_INT 7
3053: PUSH
3054: LD_INT 7
3056: PUSH
3057: LD_INT 7
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: PUSH
3066: LD_OWVAR 67
3070: ARRAY
3071: PPUSH
3072: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 84 , 154 ) ) ;
3076: CALL_OW 44
3080: PPUSH
3081: LD_INT 84
3083: PPUSH
3084: LD_INT 154
3086: PPUSH
3087: CALL_OW 428
3091: PPUSH
3092: CALL_OW 52
// end ;
3096: GO 3039
3098: POP
3099: POP
// for i := 1 to 3 do
3100: LD_ADDR_VAR 0 2
3104: PUSH
3105: DOUBLE
3106: LD_INT 1
3108: DEC
3109: ST_TO_ADDR
3110: LD_INT 3
3112: PUSH
3113: FOR_TO
3114: IFFALSE 3201
// begin PrepareVehicle ( us_medium_wheeled , engine_solar , control_manual , us_crane , 100 ) ;
3116: LD_INT 2
3118: PPUSH
3119: LD_INT 2
3121: PPUSH
3122: LD_INT 1
3124: PPUSH
3125: LD_INT 13
3127: PPUSH
3128: LD_INT 100
3130: PPUSH
3131: CALL 18492 0 5
// veh := CreateVehicle ;
3135: LD_ADDR_VAR 0 4
3139: PUSH
3140: CALL_OW 45
3144: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3145: LD_VAR 0 4
3149: PPUSH
3150: LD_INT 3
3152: PPUSH
3153: CALL_OW 233
// PlaceUnitArea ( veh , usCraneArea , false ) ;
3157: LD_VAR 0 4
3161: PPUSH
3162: LD_INT 9
3164: PPUSH
3165: LD_INT 0
3167: PPUSH
3168: CALL_OW 49
// PrepareHuman ( false , 3 , 6 ) ;
3172: LD_INT 0
3174: PPUSH
3175: LD_INT 3
3177: PPUSH
3178: LD_INT 6
3180: PPUSH
3181: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3185: CALL_OW 44
3189: PPUSH
3190: LD_VAR 0 4
3194: PPUSH
3195: CALL_OW 52
// end ;
3199: GO 3113
3201: POP
3202: POP
// InitHc ;
3203: CALL_OW 19
// hc_gallery := us ;
3207: LD_ADDR_OWVAR 33
3211: PUSH
3212: LD_STRING us
3214: ST_TO_ADDR
// hc_face_number := 26 ;
3215: LD_ADDR_OWVAR 34
3219: PUSH
3220: LD_INT 26
3222: ST_TO_ADDR
// hc_name := Max Caldera ;
3223: LD_ADDR_OWVAR 26
3227: PUSH
3228: LD_STRING Max Caldera
3230: ST_TO_ADDR
// hc_class := class_engineer ;
3231: LD_ADDR_OWVAR 28
3235: PUSH
3236: LD_INT 2
3238: ST_TO_ADDR
// hc_sex := sex_male ;
3239: LD_ADDR_OWVAR 27
3243: PUSH
3244: LD_INT 1
3246: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
3247: LD_ADDR_OWVAR 29
3251: PUSH
3252: LD_INT 10
3254: PUSH
3255: LD_INT 11
3257: PUSH
3258: EMPTY
3259: LIST
3260: LIST
3261: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
3262: LD_ADDR_OWVAR 30
3266: PUSH
3267: LD_INT 2
3269: PUSH
3270: LD_INT 1
3272: PUSH
3273: LD_INT 0
3275: PUSH
3276: LD_INT 0
3278: PUSH
3279: EMPTY
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: ST_TO_ADDR
// hc_skills := [ 4 , 6 , 3 , 1 ] ;
3285: LD_ADDR_OWVAR 31
3289: PUSH
3290: LD_INT 4
3292: PUSH
3293: LD_INT 6
3295: PUSH
3296: LD_INT 3
3298: PUSH
3299: LD_INT 1
3301: PUSH
3302: EMPTY
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: ST_TO_ADDR
// usCommander := CreateHuman ;
3308: LD_ADDR_EXP 25
3312: PUSH
3313: CALL_OW 44
3317: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
3318: LD_EXP 25
3322: PPUSH
3323: LD_INT 1
3325: PPUSH
3326: CALL_OW 52
// InitHC_All ( ) ;
3330: CALL_OW 584
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay , 100 ) ;
3334: LD_INT 2
3336: PPUSH
3337: LD_INT 1
3339: PPUSH
3340: LD_INT 2
3342: PPUSH
3343: LD_INT 12
3345: PPUSH
3346: LD_INT 100
3348: PPUSH
3349: CALL 18492 0 5
// usCargo := CreateVehicle ;
3353: LD_ADDR_EXP 27
3357: PUSH
3358: CALL_OW 45
3362: ST_TO_ADDR
// PlaceUnitXY ( usCargo , 81 , 143 , false ) ;
3363: LD_EXP 27
3367: PPUSH
3368: LD_INT 81
3370: PPUSH
3371: LD_INT 143
3373: PPUSH
3374: LD_INT 0
3376: PPUSH
3377: CALL_OW 48
// Connect ( usCargo ) ;
3381: LD_EXP 27
3385: PPUSH
3386: CALL 21585 0 1
// DoNotAttack ( 5 , usCargo ) ;
3390: LD_INT 5
3392: PPUSH
3393: LD_EXP 27
3397: PPUSH
3398: CALL_OW 471
// end ;
3402: LD_VAR 0 1
3406: RET
// every 6 6$00 trigger not usForces and usAttacksAllowed and IsOk ( amFac ) and BuildingStatus ( amFac ) = bs_idle do var i , chassis , weapon ;
3407: LD_EXP 26
3411: NOT
3412: PUSH
3413: LD_EXP 6
3417: AND
3418: PUSH
3419: LD_INT 25
3421: PPUSH
3422: CALL_OW 302
3426: AND
3427: PUSH
3428: LD_INT 25
3430: PPUSH
3431: CALL_OW 461
3435: PUSH
3436: LD_INT 2
3438: EQUAL
3439: AND
3440: IFFALSE 3597
3442: GO 3444
3444: DISABLE
3445: LD_INT 0
3447: PPUSH
3448: PPUSH
3449: PPUSH
// begin enable ;
3450: ENABLE
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3451: LD_ADDR_VAR 0 1
3455: PUSH
3456: DOUBLE
3457: LD_INT 1
3459: DEC
3460: ST_TO_ADDR
3461: LD_INT 5
3463: PUSH
3464: LD_INT 6
3466: PUSH
3467: LD_INT 7
3469: PUSH
3470: LD_INT 8
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: PUSH
3479: LD_OWVAR 67
3483: ARRAY
3484: PUSH
3485: FOR_TO
3486: IFFALSE 3595
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3488: LD_ADDR_VAR 0 2
3492: PUSH
3493: LD_INT 2
3495: PUSH
3496: LD_INT 3
3498: PUSH
3499: LD_INT 4
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: LIST
3506: PUSH
3507: LD_INT 1
3509: PPUSH
3510: LD_INT 3
3512: PPUSH
3513: CALL_OW 12
3517: ARRAY
3518: ST_TO_ADDR
// if chassis = us_heavy_tracked then
3519: LD_VAR 0 2
3523: PUSH
3524: LD_INT 4
3526: EQUAL
3527: IFFALSE 3539
// weapon := us_heavy_gun else
3529: LD_ADDR_VAR 0 3
3533: PUSH
3534: LD_INT 6
3536: ST_TO_ADDR
3537: GO 3570
// weapon := [ us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3539: LD_ADDR_VAR 0 3
3543: PUSH
3544: LD_INT 5
3546: PUSH
3547: LD_INT 7
3549: PUSH
3550: LD_INT 4
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: LIST
3557: PUSH
3558: LD_INT 1
3560: PPUSH
3561: LD_INT 3
3563: PPUSH
3564: CALL_OW 12
3568: ARRAY
3569: ST_TO_ADDR
// AddComConstruct ( amFac , chassis , engine_combustion , control_remote , weapon ) ;
3570: LD_INT 25
3572: PPUSH
3573: LD_VAR 0 2
3577: PPUSH
3578: LD_INT 1
3580: PPUSH
3581: LD_INT 2
3583: PPUSH
3584: LD_VAR 0 3
3588: PPUSH
3589: CALL_OW 185
// end ;
3593: GO 3485
3595: POP
3596: POP
// end ;
3597: PPOPN 3
3599: END
// every 0 0$10 trigger usForces >= [ 5 , 6 , 7 , 8 ] [ Difficulty ] do var i , tmp ;
3600: LD_EXP 26
3604: PUSH
3605: LD_INT 5
3607: PUSH
3608: LD_INT 6
3610: PUSH
3611: LD_INT 7
3613: PUSH
3614: LD_INT 8
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: PUSH
3623: LD_OWVAR 67
3627: ARRAY
3628: GREATEREQUAL
3629: IFFALSE 3769
3631: GO 3633
3633: DISABLE
3634: LD_INT 0
3636: PPUSH
3637: PPUSH
// begin enable ;
3638: ENABLE
// tmp := usForces ;
3639: LD_ADDR_VAR 0 2
3643: PUSH
3644: LD_EXP 26
3648: ST_TO_ADDR
// usForces := [ ] ;
3649: LD_ADDR_EXP 26
3653: PUSH
3654: EMPTY
3655: ST_TO_ADDR
// if not tmp then
3656: LD_VAR 0 2
3660: NOT
3661: IFFALSE 3665
// exit ;
3663: GO 3769
// repeat wait ( 0 0$1 ) ;
3665: LD_INT 35
3667: PPUSH
3668: CALL_OW 67
// for i in tmp do
3672: LD_ADDR_VAR 0 1
3676: PUSH
3677: LD_VAR 0 2
3681: PUSH
3682: FOR_IN
3683: IFFALSE 3760
// begin if not IsOk ( i ) then
3685: LD_VAR 0 1
3689: PPUSH
3690: CALL_OW 302
3694: NOT
3695: IFFALSE 3724
// begin ComUnlink ( i ) ;
3697: LD_VAR 0 1
3701: PPUSH
3702: CALL_OW 136
// tmp := tmp diff i ;
3706: LD_ADDR_VAR 0 2
3710: PUSH
3711: LD_VAR 0 2
3715: PUSH
3716: LD_VAR 0 1
3720: DIFF
3721: ST_TO_ADDR
// end else
3722: GO 3758
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
3724: LD_VAR 0 1
3728: PPUSH
3729: LD_INT 22
3731: PUSH
3732: LD_INT 2
3734: PUSH
3735: EMPTY
3736: LIST
3737: LIST
3738: PPUSH
3739: CALL_OW 69
3743: PPUSH
3744: LD_VAR 0 1
3748: PPUSH
3749: CALL_OW 74
3753: PPUSH
3754: CALL_OW 115
// end ;
3758: GO 3682
3760: POP
3761: POP
// until not tmp ;
3762: LD_VAR 0 2
3766: NOT
3767: IFFALSE 3665
// end ;
3769: PPOPN 2
3771: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( southScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3772: LD_EXP 3
3776: PUSH
3777: LD_EXP 5
3781: NOT
3782: AND
3783: PUSH
3784: LD_INT 11
3786: PPUSH
3787: LD_INT 22
3789: PUSH
3790: LD_INT 2
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: PPUSH
3797: CALL_OW 70
3801: AND
3802: IFFALSE 3923
3804: GO 3806
3806: DISABLE
3807: LD_INT 0
3809: PPUSH
3810: PPUSH
3811: PPUSH
// begin uc_side := 1 ;
3812: LD_ADDR_OWVAR 20
3816: PUSH
3817: LD_INT 1
3819: ST_TO_ADDR
// uc_nation := 1 ;
3820: LD_ADDR_OWVAR 21
3824: PUSH
3825: LD_INT 1
3827: ST_TO_ADDR
// tmp := [ ] ;
3828: LD_ADDR_VAR 0 3
3832: PUSH
3833: EMPTY
3834: ST_TO_ADDR
// for i := 1 to 2 do
3835: LD_ADDR_VAR 0 1
3839: PUSH
3840: DOUBLE
3841: LD_INT 1
3843: DEC
3844: ST_TO_ADDR
3845: LD_INT 2
3847: PUSH
3848: FOR_TO
3849: IFFALSE 3921
// begin PrepareSoldier ( false , 7 ) ;
3851: LD_INT 0
3853: PPUSH
3854: LD_INT 7
3856: PPUSH
3857: CALL_OW 381
// un := CreateHuman ;
3861: LD_ADDR_VAR 0 2
3865: PUSH
3866: CALL_OW 44
3870: ST_TO_ADDR
// PlaceUnitXYR ( un , 130 , 153 , 3 , false ) ;
3871: LD_VAR 0 2
3875: PPUSH
3876: LD_INT 130
3878: PPUSH
3879: LD_INT 153
3881: PPUSH
3882: LD_INT 3
3884: PPUSH
3885: LD_INT 0
3887: PPUSH
3888: CALL_OW 50
// SetClass ( un , class_sniper ) ;
3892: LD_VAR 0 2
3896: PPUSH
3897: LD_INT 5
3899: PPUSH
3900: CALL_OW 336
// AddComAgressiveMove ( un , 108 , 108 ) ;
3904: LD_VAR 0 2
3908: PPUSH
3909: LD_INT 108
3911: PPUSH
3912: LD_INT 108
3914: PPUSH
3915: CALL_OW 174
// end ;
3919: GO 3848
3921: POP
3922: POP
// end ;
3923: PPOPN 3
3925: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( northScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3926: LD_EXP 3
3930: PUSH
3931: LD_EXP 5
3935: NOT
3936: AND
3937: PUSH
3938: LD_INT 10
3940: PPUSH
3941: LD_INT 22
3943: PUSH
3944: LD_INT 2
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PPUSH
3951: CALL_OW 70
3955: AND
3956: IFFALSE 4077
3958: GO 3960
3960: DISABLE
3961: LD_INT 0
3963: PPUSH
3964: PPUSH
3965: PPUSH
// begin uc_side := 1 ;
3966: LD_ADDR_OWVAR 20
3970: PUSH
3971: LD_INT 1
3973: ST_TO_ADDR
// uc_nation := 1 ;
3974: LD_ADDR_OWVAR 21
3978: PUSH
3979: LD_INT 1
3981: ST_TO_ADDR
// tmp := [ ] ;
3982: LD_ADDR_VAR 0 3
3986: PUSH
3987: EMPTY
3988: ST_TO_ADDR
// for i := 1 to 2 do
3989: LD_ADDR_VAR 0 1
3993: PUSH
3994: DOUBLE
3995: LD_INT 1
3997: DEC
3998: ST_TO_ADDR
3999: LD_INT 2
4001: PUSH
4002: FOR_TO
4003: IFFALSE 4075
// begin PrepareSoldier ( false , 7 ) ;
4005: LD_INT 0
4007: PPUSH
4008: LD_INT 7
4010: PPUSH
4011: CALL_OW 381
// un := CreateHuman ;
4015: LD_ADDR_VAR 0 2
4019: PUSH
4020: CALL_OW 44
4024: ST_TO_ADDR
// PlaceUnitXYR ( un , 56 , 101 , 3 , false ) ;
4025: LD_VAR 0 2
4029: PPUSH
4030: LD_INT 56
4032: PPUSH
4033: LD_INT 101
4035: PPUSH
4036: LD_INT 3
4038: PPUSH
4039: LD_INT 0
4041: PPUSH
4042: CALL_OW 50
// SetClass ( un , class_sniper ) ;
4046: LD_VAR 0 2
4050: PPUSH
4051: LD_INT 5
4053: PPUSH
4054: CALL_OW 336
// AddComAgressiveMove ( un , 72 , 92 ) ;
4058: LD_VAR 0 2
4062: PPUSH
4063: LD_INT 72
4065: PPUSH
4066: LD_INT 92
4068: PPUSH
4069: CALL_OW 174
// end ;
4073: GO 4002
4075: POP
4076: POP
// end ;
4077: PPOPN 3
4079: END
// every 0 0$1 trigger IsOk ( usCargo ) and not usSurrender do var cr ;
4080: LD_EXP 27
4084: PPUSH
4085: CALL_OW 302
4089: PUSH
4090: LD_EXP 7
4094: NOT
4095: AND
4096: IFFALSE 4327
4098: GO 4100
4100: DISABLE
4101: LD_INT 0
4103: PPUSH
// begin enable ;
4104: ENABLE
// if GetFuel ( usCargo ) < 10 and not See ( 2 , usCargo ) then
4105: LD_EXP 27
4109: PPUSH
4110: CALL_OW 261
4114: PUSH
4115: LD_INT 10
4117: LESS
4118: PUSH
4119: LD_INT 2
4121: PPUSH
4122: LD_EXP 27
4126: PPUSH
4127: CALL_OW 292
4131: NOT
4132: AND
4133: IFFALSE 4147
// SetFuel ( usCargo , 100 ) ;
4135: LD_EXP 27
4139: PPUSH
4140: LD_INT 100
4142: PPUSH
4143: CALL_OW 240
// if not HasTask ( usCargo ) and GetCargo ( usCargo , mat_cans ) < 100 and not IsInArea ( usCargo , usCratesArea ) and not FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) then
4147: LD_EXP 27
4151: PPUSH
4152: CALL_OW 314
4156: NOT
4157: PUSH
4158: LD_EXP 27
4162: PPUSH
4163: LD_INT 1
4165: PPUSH
4166: CALL_OW 289
4170: PUSH
4171: LD_INT 100
4173: LESS
4174: AND
4175: PUSH
4176: LD_EXP 27
4180: PPUSH
4181: LD_INT 12
4183: PPUSH
4184: CALL_OW 308
4188: NOT
4189: AND
4190: PUSH
4191: LD_INT 14
4193: PPUSH
4194: LD_INT 81
4196: PUSH
4197: LD_INT 1
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PUSH
4204: LD_INT 50
4206: PUSH
4207: EMPTY
4208: LIST
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PPUSH
4214: CALL_OW 70
4218: NOT
4219: AND
4220: IFFALSE 4297
// begin cr := GetListOfCratesInArea ( usCratesArea ) ;
4222: LD_ADDR_VAR 0 1
4226: PUSH
4227: LD_INT 12
4229: PPUSH
4230: CALL_OW 435
4234: ST_TO_ADDR
// if cr then
4235: LD_VAR 0 1
4239: IFFALSE 4270
// ComCollect ( usCargo , cr [ 1 ] , cr [ 2 ] ) else
4241: LD_EXP 27
4245: PPUSH
4246: LD_VAR 0 1
4250: PUSH
4251: LD_INT 1
4253: ARRAY
4254: PPUSH
4255: LD_VAR 0 1
4259: PUSH
4260: LD_INT 2
4262: ARRAY
4263: PPUSH
4264: CALL_OW 117
4268: GO 4297
// if not IsInArea ( usCargo , usCratesArea ) then
4270: LD_EXP 27
4274: PPUSH
4275: LD_INT 12
4277: PPUSH
4278: CALL_OW 308
4282: NOT
4283: IFFALSE 4297
// ComMoveToArea ( usCargo , usCratesArea ) ;
4285: LD_EXP 27
4289: PPUSH
4290: LD_INT 12
4292: PPUSH
4293: CALL_OW 113
// end ; if GetCargo ( usCargo , mat_cans ) = 100 then
4297: LD_EXP 27
4301: PPUSH
4302: LD_INT 1
4304: PPUSH
4305: CALL_OW 289
4309: PUSH
4310: LD_INT 100
4312: EQUAL
4313: IFFALSE 4327
// ComGive ( usCargo , usDepot ) ;
4315: LD_EXP 27
4319: PPUSH
4320: LD_INT 1
4322: PPUSH
4323: CALL_OW 161
// end ;
4327: PPOPN 1
4329: END
// every 0 0$3 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) do var i , sci ;
4330: LD_EXP 7
4334: NOT
4335: PUSH
4336: LD_INT 22
4338: PUSH
4339: LD_INT 1
4341: PUSH
4342: EMPTY
4343: LIST
4344: LIST
4345: PUSH
4346: LD_INT 21
4348: PUSH
4349: LD_INT 1
4351: PUSH
4352: EMPTY
4353: LIST
4354: LIST
4355: PUSH
4356: LD_INT 3
4358: PUSH
4359: LD_INT 50
4361: PUSH
4362: EMPTY
4363: LIST
4364: PUSH
4365: EMPTY
4366: LIST
4367: LIST
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: LIST
4373: PPUSH
4374: CALL_OW 69
4378: AND
4379: PUSH
4380: LD_INT 22
4382: PUSH
4383: LD_INT 1
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PUSH
4390: LD_INT 3
4392: PUSH
4393: LD_INT 60
4395: PUSH
4396: EMPTY
4397: LIST
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: PUSH
4403: LD_INT 25
4405: PUSH
4406: LD_INT 4
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: LIST
4417: PPUSH
4418: CALL_OW 69
4422: AND
4423: IFFALSE 4626
4425: GO 4427
4427: DISABLE
4428: LD_INT 0
4430: PPUSH
4431: PPUSH
// begin enable ;
4432: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) do
4433: LD_ADDR_VAR 0 1
4437: PUSH
4438: LD_INT 22
4440: PUSH
4441: LD_INT 1
4443: PUSH
4444: EMPTY
4445: LIST
4446: LIST
4447: PUSH
4448: LD_INT 21
4450: PUSH
4451: LD_INT 1
4453: PUSH
4454: EMPTY
4455: LIST
4456: LIST
4457: PUSH
4458: LD_INT 3
4460: PUSH
4461: LD_INT 50
4463: PUSH
4464: EMPTY
4465: LIST
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: LIST
4475: PPUSH
4476: CALL_OW 69
4480: PUSH
4481: FOR_IN
4482: IFFALSE 4624
// begin sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) ;
4484: LD_ADDR_VAR 0 2
4488: PUSH
4489: LD_INT 22
4491: PUSH
4492: LD_INT 1
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: PUSH
4499: LD_INT 3
4501: PUSH
4502: LD_INT 60
4504: PUSH
4505: EMPTY
4506: LIST
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: PUSH
4512: LD_INT 25
4514: PUSH
4515: LD_INT 4
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: LIST
4526: PPUSH
4527: CALL_OW 69
4531: ST_TO_ADDR
// if not sci then
4532: LD_VAR 0 2
4536: NOT
4537: IFFALSE 4541
// break ;
4539: GO 4624
// sci := sci [ 1 ] ;
4541: LD_ADDR_VAR 0 2
4545: PUSH
4546: LD_VAR 0 2
4550: PUSH
4551: LD_INT 1
4553: ARRAY
4554: ST_TO_ADDR
// if IsInUnit ( sci ) then
4555: LD_VAR 0 2
4559: PPUSH
4560: CALL_OW 310
4564: IFFALSE 4577
// ComExit ( sci ) else
4566: LD_VAR 0 2
4570: PPUSH
4571: CALL 50753 0 1
4575: GO 4622
// begin ComHeal ( sci , i ) ;
4577: LD_VAR 0 2
4581: PPUSH
4582: LD_VAR 0 1
4586: PPUSH
4587: CALL_OW 128
// AddComEnterUnit ( sci , [ amLab1 , amLab2 ] [ rand ( 1 , 2 ) ] ) ;
4591: LD_VAR 0 2
4595: PPUSH
4596: LD_INT 32
4598: PUSH
4599: LD_INT 33
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: PUSH
4606: LD_INT 1
4608: PPUSH
4609: LD_INT 2
4611: PPUSH
4612: CALL_OW 12
4616: ARRAY
4617: PPUSH
4618: CALL_OW 180
// end ; end ;
4622: GO 4481
4624: POP
4625: POP
// end ;
4626: PPOPN 2
4628: END
// every 0 0$2 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) do var i , tmp , tmp2 ;
4629: LD_EXP 7
4633: NOT
4634: PUSH
4635: LD_INT 22
4637: PUSH
4638: LD_INT 1
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: PUSH
4645: LD_INT 3
4647: PUSH
4648: LD_INT 60
4650: PUSH
4651: EMPTY
4652: LIST
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: PUSH
4658: LD_INT 50
4660: PUSH
4661: EMPTY
4662: LIST
4663: PUSH
4664: LD_INT 34
4666: PUSH
4667: LD_INT 13
4669: PUSH
4670: EMPTY
4671: LIST
4672: LIST
4673: PUSH
4674: EMPTY
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: PPUSH
4680: CALL_OW 69
4684: AND
4685: PUSH
4686: LD_INT 22
4688: PUSH
4689: LD_INT 1
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: PUSH
4696: LD_INT 3
4698: PUSH
4699: LD_INT 24
4701: PUSH
4702: LD_INT 1000
4704: PUSH
4705: EMPTY
4706: LIST
4707: LIST
4708: PUSH
4709: EMPTY
4710: LIST
4711: LIST
4712: PUSH
4713: LD_INT 21
4715: PUSH
4716: LD_INT 3
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: PUSH
4723: LD_INT 3
4725: PUSH
4726: LD_INT 30
4728: PUSH
4729: LD_INT 29
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: PPUSH
4746: CALL_OW 69
4750: AND
4751: IFFALSE 5020
4753: GO 4755
4755: DISABLE
4756: LD_INT 0
4758: PPUSH
4759: PPUSH
4760: PPUSH
// begin enable ;
4761: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4762: LD_ADDR_VAR 0 2
4766: PUSH
4767: LD_INT 22
4769: PUSH
4770: LD_INT 1
4772: PUSH
4773: EMPTY
4774: LIST
4775: LIST
4776: PUSH
4777: LD_INT 3
4779: PUSH
4780: LD_INT 24
4782: PUSH
4783: LD_INT 1000
4785: PUSH
4786: EMPTY
4787: LIST
4788: LIST
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: PUSH
4794: LD_INT 21
4796: PUSH
4797: LD_INT 3
4799: PUSH
4800: EMPTY
4801: LIST
4802: LIST
4803: PUSH
4804: LD_INT 3
4806: PUSH
4807: LD_INT 30
4809: PUSH
4810: LD_INT 29
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: PUSH
4821: EMPTY
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: PPUSH
4827: CALL_OW 69
4831: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4832: LD_ADDR_VAR 0 3
4836: PUSH
4837: LD_INT 22
4839: PUSH
4840: LD_INT 1
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: PUSH
4847: LD_INT 3
4849: PUSH
4850: LD_INT 24
4852: PUSH
4853: LD_INT 600
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: PUSH
4864: LD_INT 21
4866: PUSH
4867: LD_INT 3
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PUSH
4874: LD_INT 3
4876: PUSH
4877: LD_INT 30
4879: PUSH
4880: LD_INT 29
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: LIST
4895: LIST
4896: PPUSH
4897: CALL_OW 69
4901: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4902: LD_ADDR_VAR 0 1
4906: PUSH
4907: LD_INT 22
4909: PUSH
4910: LD_INT 1
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: LD_INT 3
4919: PUSH
4920: LD_INT 60
4922: PUSH
4923: EMPTY
4924: LIST
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: PUSH
4930: LD_INT 50
4932: PUSH
4933: EMPTY
4934: LIST
4935: PUSH
4936: LD_INT 34
4938: PUSH
4939: LD_INT 13
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: PPUSH
4952: CALL_OW 69
4956: PUSH
4957: FOR_IN
4958: IFFALSE 5018
// begin if tmp2 then
4960: LD_VAR 0 3
4964: IFFALSE 4992
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
4966: LD_VAR 0 1
4970: PPUSH
4971: LD_VAR 0 3
4975: PPUSH
4976: LD_VAR 0 1
4980: PPUSH
4981: CALL_OW 74
4985: PPUSH
4986: CALL_OW 130
4990: GO 5016
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
4992: LD_VAR 0 1
4996: PPUSH
4997: LD_VAR 0 2
5001: PPUSH
5002: LD_VAR 0 1
5006: PPUSH
5007: CALL_OW 74
5011: PPUSH
5012: CALL_OW 130
// end ;
5016: GO 4957
5018: POP
5019: POP
// end ;
5020: PPOPN 3
5022: END
// every 0 0$1 trigger not usSurrender and not FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) and usToBuild and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
5023: LD_EXP 7
5027: NOT
5028: PUSH
5029: LD_INT 14
5031: PPUSH
5032: LD_INT 81
5034: PUSH
5035: LD_INT 1
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: PUSH
5042: LD_INT 50
5044: PUSH
5045: EMPTY
5046: LIST
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: PPUSH
5052: CALL_OW 70
5056: NOT
5057: AND
5058: PUSH
5059: LD_EXP 28
5063: AND
5064: PUSH
5065: LD_INT 22
5067: PUSH
5068: LD_INT 1
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: PUSH
5075: LD_INT 3
5077: PUSH
5078: LD_INT 60
5080: PUSH
5081: EMPTY
5082: LIST
5083: PUSH
5084: EMPTY
5085: LIST
5086: LIST
5087: PUSH
5088: LD_INT 50
5090: PUSH
5091: EMPTY
5092: LIST
5093: PUSH
5094: LD_INT 34
5096: PUSH
5097: LD_INT 13
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: LIST
5108: LIST
5109: PPUSH
5110: CALL_OW 69
5114: AND
5115: IFFALSE 5227
5117: GO 5119
5119: DISABLE
// begin enable ;
5120: ENABLE
// ComCraneBuild ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) , usToBuild [ 1 ] [ 1 ] , usToBuild [ 1 ] [ 2 ] , usToBuild [ 1 ] [ 3 ] , usToBuild [ 1 ] [ 4 ] ) ;
5121: LD_INT 22
5123: PUSH
5124: LD_INT 1
5126: PUSH
5127: EMPTY
5128: LIST
5129: LIST
5130: PUSH
5131: LD_INT 3
5133: PUSH
5134: LD_INT 60
5136: PUSH
5137: EMPTY
5138: LIST
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: PUSH
5144: LD_INT 50
5146: PUSH
5147: EMPTY
5148: LIST
5149: PUSH
5150: LD_INT 34
5152: PUSH
5153: LD_INT 13
5155: PUSH
5156: EMPTY
5157: LIST
5158: LIST
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: PPUSH
5166: CALL_OW 69
5170: PPUSH
5171: LD_EXP 28
5175: PUSH
5176: LD_INT 1
5178: ARRAY
5179: PUSH
5180: LD_INT 1
5182: ARRAY
5183: PPUSH
5184: LD_EXP 28
5188: PUSH
5189: LD_INT 1
5191: ARRAY
5192: PUSH
5193: LD_INT 2
5195: ARRAY
5196: PPUSH
5197: LD_EXP 28
5201: PUSH
5202: LD_INT 1
5204: ARRAY
5205: PUSH
5206: LD_INT 3
5208: ARRAY
5209: PPUSH
5210: LD_EXP 28
5214: PUSH
5215: LD_INT 1
5217: ARRAY
5218: PUSH
5219: LD_INT 4
5221: ARRAY
5222: PPUSH
5223: CALL_OW 566
// end ;
5227: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) do var i , tmp , btmp , barracks ;
5228: LD_INT 22
5230: PUSH
5231: LD_INT 1
5233: PUSH
5234: EMPTY
5235: LIST
5236: LIST
5237: PUSH
5238: LD_INT 50
5240: PUSH
5241: EMPTY
5242: LIST
5243: PUSH
5244: LD_INT 3
5246: PUSH
5247: LD_INT 54
5249: PUSH
5250: EMPTY
5251: LIST
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: PUSH
5257: LD_INT 2
5259: PUSH
5260: LD_INT 25
5262: PUSH
5263: LD_INT 1
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: PUSH
5270: LD_INT 25
5272: PUSH
5273: LD_INT 5
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: PUSH
5280: LD_INT 25
5282: PUSH
5283: LD_INT 16
5285: PUSH
5286: EMPTY
5287: LIST
5288: LIST
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: LIST
5294: LIST
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: PPUSH
5302: CALL_OW 69
5306: IFFALSE 5668
5308: GO 5310
5310: DISABLE
5311: LD_INT 0
5313: PPUSH
5314: PPUSH
5315: PPUSH
5316: PPUSH
// begin enable ;
5317: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) ;
5318: LD_ADDR_VAR 0 2
5322: PUSH
5323: LD_INT 22
5325: PUSH
5326: LD_INT 1
5328: PUSH
5329: EMPTY
5330: LIST
5331: LIST
5332: PUSH
5333: LD_INT 50
5335: PUSH
5336: EMPTY
5337: LIST
5338: PUSH
5339: LD_INT 3
5341: PUSH
5342: LD_INT 54
5344: PUSH
5345: EMPTY
5346: LIST
5347: PUSH
5348: EMPTY
5349: LIST
5350: LIST
5351: PUSH
5352: LD_INT 2
5354: PUSH
5355: LD_INT 25
5357: PUSH
5358: LD_INT 1
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: PUSH
5365: LD_INT 25
5367: PUSH
5368: LD_INT 5
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PUSH
5375: LD_INT 25
5377: PUSH
5378: LD_INT 16
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: LIST
5389: LIST
5390: PUSH
5391: EMPTY
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: PPUSH
5397: CALL_OW 69
5401: ST_TO_ADDR
// btmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
5402: LD_ADDR_VAR 0 3
5406: PUSH
5407: LD_INT 22
5409: PUSH
5410: LD_INT 1
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PUSH
5417: LD_INT 50
5419: PUSH
5420: EMPTY
5421: LIST
5422: PUSH
5423: LD_INT 21
5425: PUSH
5426: LD_INT 3
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: PUSH
5433: LD_INT 30
5435: PUSH
5436: LD_INT 32
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: PUSH
5443: LD_INT 58
5445: PUSH
5446: EMPTY
5447: LIST
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: PPUSH
5456: CALL_OW 69
5460: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) ;
5461: LD_ADDR_VAR 0 4
5465: PUSH
5466: LD_INT 22
5468: PUSH
5469: LD_INT 1
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PUSH
5476: LD_INT 50
5478: PUSH
5479: EMPTY
5480: LIST
5481: PUSH
5482: LD_INT 30
5484: PUSH
5485: LD_INT 5
5487: PUSH
5488: EMPTY
5489: LIST
5490: LIST
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: LIST
5496: PPUSH
5497: CALL_OW 69
5501: ST_TO_ADDR
// if not tmp then
5502: LD_VAR 0 2
5506: NOT
5507: IFFALSE 5511
// exit ;
5509: GO 5668
// for i in tmp do
5511: LD_ADDR_VAR 0 1
5515: PUSH
5516: LD_VAR 0 2
5520: PUSH
5521: FOR_IN
5522: IFFALSE 5666
// begin btmp := FilterByTag ( btmp , 0 ) ;
5524: LD_ADDR_VAR 0 3
5528: PUSH
5529: LD_VAR 0 3
5533: PPUSH
5534: LD_INT 0
5536: PPUSH
5537: CALL 47883 0 2
5541: ST_TO_ADDR
// if not btmp then
5542: LD_VAR 0 3
5546: NOT
5547: IFFALSE 5592
// begin if GetClass ( i ) <> class_apeman_engineer and barracks then
5549: LD_VAR 0 1
5553: PPUSH
5554: CALL_OW 257
5558: PUSH
5559: LD_INT 16
5561: NONEQUAL
5562: PUSH
5563: LD_VAR 0 4
5567: AND
5568: IFFALSE 5588
// ComEnterUnit ( i , barracks [ 1 ] ) ;
5570: LD_VAR 0 1
5574: PPUSH
5575: LD_VAR 0 4
5579: PUSH
5580: LD_INT 1
5582: ARRAY
5583: PPUSH
5584: CALL_OW 120
// continue ;
5588: GO 5521
// end else
5590: GO 5664
// begin SetTag ( btmp [ 1 ] , 1 ) ;
5592: LD_VAR 0 3
5596: PUSH
5597: LD_INT 1
5599: ARRAY
5600: PPUSH
5601: LD_INT 1
5603: PPUSH
5604: CALL_OW 109
// ComEnterUnit ( i , btmp [ 1 ] ) ;
5608: LD_VAR 0 1
5612: PPUSH
5613: LD_VAR 0 3
5617: PUSH
5618: LD_INT 1
5620: ARRAY
5621: PPUSH
5622: CALL_OW 120
// wait ( 0 0$9 ) ;
5626: LD_INT 315
5628: PPUSH
5629: CALL_OW 67
// if IsEmpty ( btmp [ 1 ] ) then
5633: LD_VAR 0 3
5637: PUSH
5638: LD_INT 1
5640: ARRAY
5641: PPUSH
5642: CALL 15784 0 1
5646: IFFALSE 5664
// SetTag ( btmp [ 1 ] , 0 ) ;
5648: LD_VAR 0 3
5652: PUSH
5653: LD_INT 1
5655: ARRAY
5656: PPUSH
5657: LD_INT 0
5659: PPUSH
5660: CALL_OW 109
// end ; end ;
5664: GO 5521
5666: POP
5667: POP
// end ;
5668: PPOPN 4
5670: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do var i , tmp ;
5671: LD_INT 22
5673: PUSH
5674: LD_INT 1
5676: PUSH
5677: EMPTY
5678: LIST
5679: LIST
5680: PUSH
5681: LD_INT 33
5683: PUSH
5684: LD_INT 2
5686: PUSH
5687: EMPTY
5688: LIST
5689: LIST
5690: PUSH
5691: LD_INT 50
5693: PUSH
5694: EMPTY
5695: LIST
5696: PUSH
5697: LD_INT 3
5699: PUSH
5700: LD_INT 61
5702: PUSH
5703: EMPTY
5704: LIST
5705: PUSH
5706: EMPTY
5707: LIST
5708: LIST
5709: PUSH
5710: EMPTY
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: PPUSH
5716: CALL_OW 69
5720: IFFALSE 5811
5722: GO 5724
5724: DISABLE
5725: LD_INT 0
5727: PPUSH
5728: PPUSH
// begin enable ;
5729: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
5730: LD_ADDR_VAR 0 2
5734: PUSH
5735: LD_INT 22
5737: PUSH
5738: LD_INT 1
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: PUSH
5745: LD_INT 33
5747: PUSH
5748: LD_INT 2
5750: PUSH
5751: EMPTY
5752: LIST
5753: LIST
5754: PUSH
5755: LD_INT 50
5757: PUSH
5758: EMPTY
5759: LIST
5760: PUSH
5761: LD_INT 3
5763: PUSH
5764: LD_INT 61
5766: PUSH
5767: EMPTY
5768: LIST
5769: PUSH
5770: EMPTY
5771: LIST
5772: LIST
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: LIST
5778: LIST
5779: PPUSH
5780: CALL_OW 69
5784: ST_TO_ADDR
// for i in tmp do
5785: LD_ADDR_VAR 0 1
5789: PUSH
5790: LD_VAR 0 2
5794: PUSH
5795: FOR_IN
5796: IFFALSE 5809
// Connect ( i ) ;
5798: LD_VAR 0 1
5802: PPUSH
5803: CALL 21585 0 1
5807: GO 5795
5809: POP
5810: POP
// end ; end_of_file
5811: PPOPN 2
5813: END
// on UnitDestroyed ( un ) do begin if un = Heike then
5814: LD_VAR 0 1
5818: PUSH
5819: LD_EXP 10
5823: EQUAL
5824: IFFALSE 5833
// YouLost ( Heike ) ;
5826: LD_STRING Heike
5828: PPUSH
5829: CALL_OW 104
// if un = usCommander then
5833: LD_VAR 0 1
5837: PUSH
5838: LD_EXP 25
5842: EQUAL
5843: IFFALSE 5852
// YouLost ( Commander ) ;
5845: LD_STRING Commander
5847: PPUSH
5848: CALL_OW 104
// if GetSide ( un ) = 1 then
5852: LD_VAR 0 1
5856: PPUSH
5857: CALL_OW 255
5861: PUSH
5862: LD_INT 1
5864: EQUAL
5865: IFFALSE 6116
// begin if GetWeapon ( un ) = us_crane and IsOk ( amFac ) then
5867: LD_VAR 0 1
5871: PPUSH
5872: CALL_OW 264
5876: PUSH
5877: LD_INT 13
5879: EQUAL
5880: PUSH
5881: LD_INT 25
5883: PPUSH
5884: CALL_OW 302
5888: AND
5889: IFFALSE 5910
// AddComConstruct ( amFac , us_medium_wheeled , engine_solar , control_remote , us_crane ) ;
5891: LD_INT 25
5893: PPUSH
5894: LD_INT 2
5896: PPUSH
5897: LD_INT 2
5899: PPUSH
5900: LD_INT 2
5902: PPUSH
5903: LD_INT 13
5905: PPUSH
5906: CALL_OW 185
// if GetWeapon ( un ) = us_cargo_bay and IsOk ( amFac ) then
5910: LD_VAR 0 1
5914: PPUSH
5915: CALL_OW 264
5919: PUSH
5920: LD_INT 12
5922: EQUAL
5923: PUSH
5924: LD_INT 25
5926: PPUSH
5927: CALL_OW 302
5931: AND
5932: IFFALSE 5953
// AddComConstruct ( amFac , us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ) ;
5934: LD_INT 25
5936: PPUSH
5937: LD_INT 2
5939: PPUSH
5940: LD_INT 1
5942: PPUSH
5943: LD_INT 2
5945: PPUSH
5946: LD_INT 12
5948: PPUSH
5949: CALL_OW 185
// if GetBType ( un ) = b_bunker then
5953: LD_VAR 0 1
5957: PPUSH
5958: CALL_OW 266
5962: PUSH
5963: LD_INT 32
5965: EQUAL
5966: IFFALSE 6031
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_bunker , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
5968: LD_ADDR_EXP 28
5972: PUSH
5973: LD_EXP 28
5977: PPUSH
5978: LD_EXP 28
5982: PUSH
5983: LD_INT 1
5985: PLUS
5986: PPUSH
5987: LD_INT 32
5989: PUSH
5990: LD_VAR 0 1
5994: PPUSH
5995: CALL_OW 250
5999: PUSH
6000: LD_VAR 0 1
6004: PPUSH
6005: CALL_OW 251
6009: PUSH
6010: LD_VAR 0 1
6014: PPUSH
6015: CALL_OW 254
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: PPUSH
6026: CALL_OW 1
6030: ST_TO_ADDR
// if GetBType ( un ) in [ b_barracks , b_armoury ] then
6031: LD_VAR 0 1
6035: PPUSH
6036: CALL_OW 266
6040: PUSH
6041: LD_INT 5
6043: PUSH
6044: LD_INT 4
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: IN
6051: IFFALSE 6116
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_armoury , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6053: LD_ADDR_EXP 28
6057: PUSH
6058: LD_EXP 28
6062: PPUSH
6063: LD_EXP 28
6067: PUSH
6068: LD_INT 1
6070: PLUS
6071: PPUSH
6072: LD_INT 4
6074: PUSH
6075: LD_VAR 0 1
6079: PPUSH
6080: CALL_OW 250
6084: PUSH
6085: LD_VAR 0 1
6089: PPUSH
6090: CALL_OW 251
6094: PUSH
6095: LD_VAR 0 1
6099: PPUSH
6100: CALL_OW 254
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: PPUSH
6111: CALL_OW 1
6115: ST_TO_ADDR
// end ; end ;
6116: PPOPN 1
6118: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 1 and GetTag ( un ) = 1 then
6119: LD_VAR 0 1
6123: PPUSH
6124: CALL_OW 255
6128: PUSH
6129: LD_INT 1
6131: EQUAL
6132: PUSH
6133: LD_VAR 0 1
6137: PPUSH
6138: CALL_OW 110
6142: PUSH
6143: LD_INT 1
6145: EQUAL
6146: AND
6147: IFFALSE 6161
// SetTag ( un , 0 ) ;
6149: LD_VAR 0 1
6153: PPUSH
6154: LD_INT 0
6156: PPUSH
6157: CALL_OW 109
// end ;
6161: PPOPN 1
6163: END
// on BuildingComplete ( b ) do var i , barracks ;
6164: LD_INT 0
6166: PPUSH
6167: PPUSH
// begin if GetSide ( b ) = 1 then
6168: LD_VAR 0 1
6172: PPUSH
6173: CALL_OW 255
6177: PUSH
6178: LD_INT 1
6180: EQUAL
6181: IFFALSE 6333
// begin usToBuild := Delete ( usToBuild , 1 ) ;
6183: LD_ADDR_EXP 28
6187: PUSH
6188: LD_EXP 28
6192: PPUSH
6193: LD_INT 1
6195: PPUSH
6196: CALL_OW 3
6200: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
6201: LD_VAR 0 1
6205: PPUSH
6206: CALL_OW 266
6210: PUSH
6211: LD_INT 4
6213: EQUAL
6214: IFFALSE 6225
// ComUpgrade ( b ) ;
6216: LD_VAR 0 1
6220: PPUSH
6221: CALL_OW 146
// if GetBType ( b ) = b_bunker then
6225: LD_VAR 0 1
6229: PPUSH
6230: CALL_OW 266
6234: PUSH
6235: LD_INT 32
6237: EQUAL
6238: IFFALSE 6333
// begin AddComPlaceWeapon ( b , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
6240: LD_VAR 0 1
6244: PPUSH
6245: LD_INT 6
6247: PUSH
6248: LD_INT 7
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 1
6257: PPUSH
6258: LD_INT 2
6260: PPUSH
6261: CALL_OW 12
6265: ARRAY
6266: PPUSH
6267: CALL_OW 208
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
6271: LD_ADDR_VAR 0 3
6275: PUSH
6276: LD_INT 22
6278: PUSH
6279: LD_INT 1
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: PUSH
6286: LD_INT 30
6288: PUSH
6289: LD_INT 5
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: PPUSH
6300: CALL_OW 69
6304: ST_TO_ADDR
// if barracks then
6305: LD_VAR 0 3
6309: IFFALSE 6333
// ComExitBuilding ( UnitsInside ( barracks [ 1 ] ) [ 1 ] ) ;
6311: LD_VAR 0 3
6315: PUSH
6316: LD_INT 1
6318: ARRAY
6319: PPUSH
6320: CALL_OW 313
6324: PUSH
6325: LD_INT 1
6327: ARRAY
6328: PPUSH
6329: CALL_OW 122
// end ; end ; end ;
6333: PPOPN 3
6335: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( factory ) = 1 then
6336: LD_VAR 0 2
6340: PPUSH
6341: CALL_OW 255
6345: PUSH
6346: LD_INT 1
6348: EQUAL
6349: IFFALSE 6428
// begin if GetWeapon ( vehicle ) = us_cargo_bay then
6351: LD_VAR 0 1
6355: PPUSH
6356: CALL_OW 264
6360: PUSH
6361: LD_INT 12
6363: EQUAL
6364: IFFALSE 6376
// usCargo := vehicle ;
6366: LD_ADDR_EXP 27
6370: PUSH
6371: LD_VAR 0 1
6375: ST_TO_ADDR
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , us_crane ] then
6376: LD_VAR 0 1
6380: PPUSH
6381: CALL_OW 264
6385: PUSH
6386: LD_INT 12
6388: PUSH
6389: LD_INT 13
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: IN
6396: NOT
6397: IFFALSE 6428
// usForces := Replace ( usForces , usForces + 1 , vehicle ) ;
6399: LD_ADDR_EXP 26
6403: PUSH
6404: LD_EXP 26
6408: PPUSH
6409: LD_EXP 26
6413: PUSH
6414: LD_INT 1
6416: PLUS
6417: PPUSH
6418: LD_VAR 0 1
6422: PPUSH
6423: CALL_OW 1
6427: ST_TO_ADDR
// end ; end ;
6428: PPOPN 2
6430: END
// on EvacuateVehicle ( un , veh , p1 , p2 ) do begin if GetSide ( veh ) = 1 and GetWeapon ( veh ) = us_crane then
6431: LD_VAR 0 2
6435: PPUSH
6436: CALL_OW 255
6440: PUSH
6441: LD_INT 1
6443: EQUAL
6444: PUSH
6445: LD_VAR 0 2
6449: PPUSH
6450: CALL_OW 264
6454: PUSH
6455: LD_INT 13
6457: EQUAL
6458: AND
6459: IFFALSE 6473
// AddComEnterUnit ( un , amFac ) ;
6461: LD_VAR 0 1
6465: PPUSH
6466: LD_INT 25
6468: PPUSH
6469: CALL_OW 180
// end ;
6473: PPOPN 4
6475: END
// on EvacuateBuilding ( b , un ) do begin if GetSide ( b ) = 1 and GetBType ( b ) = b_bunker and GetClass ( un ) in [ class_soldier , class_sniper ] and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] , [ f_ok ] ] ) then
6476: LD_VAR 0 1
6480: PPUSH
6481: CALL_OW 255
6485: PUSH
6486: LD_INT 1
6488: EQUAL
6489: PUSH
6490: LD_VAR 0 1
6494: PPUSH
6495: CALL_OW 266
6499: PUSH
6500: LD_INT 32
6502: EQUAL
6503: AND
6504: PUSH
6505: LD_VAR 0 2
6509: PPUSH
6510: CALL_OW 257
6514: PUSH
6515: LD_INT 1
6517: PUSH
6518: LD_INT 5
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: IN
6525: AND
6526: PUSH
6527: LD_INT 22
6529: PUSH
6530: LD_INT 1
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: PUSH
6537: LD_INT 30
6539: PUSH
6540: LD_INT 5
6542: PUSH
6543: EMPTY
6544: LIST
6545: LIST
6546: PUSH
6547: LD_INT 50
6549: PUSH
6550: EMPTY
6551: LIST
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: LIST
6557: PPUSH
6558: CALL_OW 69
6562: AND
6563: IFFALSE 6633
// if UnitsInside ( HexInfo ( 74 , 120 ) ) < 6 then
6565: LD_INT 74
6567: PPUSH
6568: LD_INT 120
6570: PPUSH
6571: CALL_OW 428
6575: PPUSH
6576: CALL_OW 313
6580: PUSH
6581: LD_INT 6
6583: LESS
6584: IFFALSE 6633
// begin ComEnterUnit ( un , HexInfo ( 74 , 120 ) ) ;
6586: LD_VAR 0 2
6590: PPUSH
6591: LD_INT 74
6593: PPUSH
6594: LD_INT 120
6596: PPUSH
6597: CALL_OW 428
6601: PPUSH
6602: CALL_OW 120
// if GetClass ( un ) = class_soldier then
6606: LD_VAR 0 2
6610: PPUSH
6611: CALL_OW 257
6615: PUSH
6616: LD_INT 1
6618: EQUAL
6619: IFFALSE 6633
// AddComChangeProfession ( un , class_sniper ) ;
6621: LD_VAR 0 2
6625: PPUSH
6626: LD_INT 5
6628: PPUSH
6629: CALL_OW 183
// end ; end ; end_of_file
6633: PPOPN 2
6635: END
// export function Action ; var i , j , veh , tmp , hasEng , hasCamera , driver ; begin
6636: LD_INT 0
6638: PPUSH
6639: PPUSH
6640: PPUSH
6641: PPUSH
6642: PPUSH
6643: PPUSH
6644: PPUSH
6645: PPUSH
// Video ( true ) ;
6646: LD_INT 1
6648: PPUSH
6649: CALL 50337 0 1
// music_nat := 1 ;
6653: LD_ADDR_OWVAR 71
6657: PUSH
6658: LD_INT 1
6660: ST_TO_ADDR
// music_class := music_recon ;
6661: LD_ADDR_OWVAR 72
6665: PUSH
6666: LD_INT 3
6668: ST_TO_ADDR
// PlaceSeeing ( 184 , 142 , 2 , - 10 ) ;
6669: LD_INT 184
6671: PPUSH
6672: LD_INT 142
6674: PPUSH
6675: LD_INT 2
6677: PPUSH
6678: LD_INT 10
6680: NEG
6681: PPUSH
6682: CALL_OW 330
// RemoveSeeing ( 184 , 142 , 2 ) ;
6686: LD_INT 184
6688: PPUSH
6689: LD_INT 142
6691: PPUSH
6692: LD_INT 2
6694: PPUSH
6695: CALL_OW 331
// PlaceSeeing ( 204 , 151 , 2 , - 10 ) ;
6699: LD_INT 204
6701: PPUSH
6702: LD_INT 151
6704: PPUSH
6705: LD_INT 2
6707: PPUSH
6708: LD_INT 10
6710: NEG
6711: PPUSH
6712: CALL_OW 330
// RemoveSeeing ( 204 , 151 , 2 ) ;
6716: LD_INT 204
6718: PPUSH
6719: LD_INT 151
6721: PPUSH
6722: LD_INT 2
6724: PPUSH
6725: CALL_OW 331
// CenterNowOnXY ( 184 , 142 ) ;
6729: LD_INT 184
6731: PPUSH
6732: LD_INT 142
6734: PPUSH
6735: CALL_OW 86
// wait ( 0 0$2 ) ;
6739: LD_INT 70
6741: PPUSH
6742: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
6746: LD_ADDR_VAR 0 5
6750: PUSH
6751: LD_EXP 10
6755: PUSH
6756: LD_EXP 11
6760: PUSH
6761: LD_EXP 12
6765: PUSH
6766: LD_EXP 13
6770: PUSH
6771: LD_EXP 14
6775: PUSH
6776: LD_EXP 15
6780: PUSH
6781: LD_EXP 16
6785: PUSH
6786: LD_EXP 17
6790: PUSH
6791: LD_EXP 19
6795: PUSH
6796: LD_EXP 20
6800: PUSH
6801: LD_EXP 21
6805: PUSH
6806: EMPTY
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: PUSH
6819: LD_EXP 22
6823: UNION
6824: ST_TO_ADDR
// hasEng := UnitFilter ( tmp , [ f_class , 2 ] ) > 0 ;
6825: LD_ADDR_VAR 0 6
6829: PUSH
6830: LD_VAR 0 5
6834: PPUSH
6835: LD_INT 25
6837: PUSH
6838: LD_INT 2
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: PPUSH
6845: CALL_OW 72
6849: PUSH
6850: LD_INT 0
6852: GREATER
6853: ST_TO_ADDR
// hasCamera := false ;
6854: LD_ADDR_VAR 0 7
6858: PUSH
6859: LD_INT 0
6861: ST_TO_ADDR
// if not hasEng then
6862: LD_VAR 0 6
6866: NOT
6867: IFFALSE 6895
// SetClass ( tmp [ rand ( 1 , tmp ) ] , class_engineer ) ;
6869: LD_VAR 0 5
6873: PUSH
6874: LD_INT 1
6876: PPUSH
6877: LD_VAR 0 5
6881: PPUSH
6882: CALL_OW 12
6886: ARRAY
6887: PPUSH
6888: LD_INT 2
6890: PPUSH
6891: CALL_OW 336
// if heikeVehicles then
6895: LD_EXP 24
6899: IFFALSE 7513
// begin tmp := SortByClass ( tmp , class_mechanic ) ;
6901: LD_ADDR_VAR 0 5
6905: PUSH
6906: LD_VAR 0 5
6910: PPUSH
6911: LD_INT 3
6913: PPUSH
6914: CALL 52382 0 2
6918: ST_TO_ADDR
// for i in heikeVehicles do
6919: LD_ADDR_VAR 0 2
6923: PUSH
6924: LD_EXP 24
6928: PUSH
6929: FOR_IN
6930: IFFALSE 7511
// begin if not tmp then
6932: LD_VAR 0 5
6936: NOT
6937: IFFALSE 6941
// break ;
6939: GO 7511
// uc_side := 2 ;
6941: LD_ADDR_OWVAR 20
6945: PUSH
6946: LD_INT 2
6948: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
6949: LD_ADDR_OWVAR 21
6953: PUSH
6954: LD_VAR 0 2
6958: PUSH
6959: LD_INT 5
6961: ARRAY
6962: ST_TO_ADDR
// vc_chassis := i [ 1 ] ;
6963: LD_ADDR_OWVAR 37
6967: PUSH
6968: LD_VAR 0 2
6972: PUSH
6973: LD_INT 1
6975: ARRAY
6976: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
6977: LD_ADDR_OWVAR 39
6981: PUSH
6982: LD_VAR 0 2
6986: PUSH
6987: LD_INT 2
6989: ARRAY
6990: ST_TO_ADDR
// vc_control := i [ 3 ] ;
6991: LD_ADDR_OWVAR 38
6995: PUSH
6996: LD_VAR 0 2
7000: PUSH
7001: LD_INT 3
7003: ARRAY
7004: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
7005: LD_ADDR_OWVAR 40
7009: PUSH
7010: LD_VAR 0 2
7014: PUSH
7015: LD_INT 4
7017: ARRAY
7018: ST_TO_ADDR
// veh := CreateVehicle ;
7019: LD_ADDR_VAR 0 4
7023: PUSH
7024: CALL_OW 45
7028: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7029: LD_VAR 0 4
7033: PPUSH
7034: LD_INT 4
7036: PPUSH
7037: CALL_OW 233
// if i [ 3 ] = control_manual then
7041: LD_VAR 0 2
7045: PUSH
7046: LD_INT 3
7048: ARRAY
7049: PUSH
7050: LD_INT 1
7052: EQUAL
7053: IFFALSE 7138
// begin PlaceUnitArea ( veh , startArea , false ) ;
7055: LD_VAR 0 4
7059: PPUSH
7060: LD_INT 1
7062: PPUSH
7063: LD_INT 0
7065: PPUSH
7066: CALL_OW 49
// if i [ 4 ] = ar_control_tower then
7070: LD_VAR 0 2
7074: PUSH
7075: LD_INT 4
7077: ARRAY
7078: PUSH
7079: LD_INT 31
7081: EQUAL
7082: IFFALSE 7100
// SetClass ( tmp [ 1 ] , class_mechanic ) ;
7084: LD_VAR 0 5
7088: PUSH
7089: LD_INT 1
7091: ARRAY
7092: PPUSH
7093: LD_INT 3
7095: PPUSH
7096: CALL_OW 336
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
7100: LD_VAR 0 5
7104: PUSH
7105: LD_INT 1
7107: ARRAY
7108: PPUSH
7109: LD_VAR 0 4
7113: PPUSH
7114: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
7118: LD_ADDR_VAR 0 5
7122: PUSH
7123: LD_VAR 0 5
7127: PPUSH
7128: LD_INT 1
7130: PPUSH
7131: CALL_OW 3
7135: ST_TO_ADDR
// end else
7136: GO 7199
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
7138: LD_INT 22
7140: PUSH
7141: LD_INT 2
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PUSH
7148: LD_INT 34
7150: PUSH
7151: LD_INT 31
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PPUSH
7162: CALL_OW 69
7166: IFFALSE 7199
// begin PlaceUnitArea ( veh , startArea , false ) ;
7168: LD_VAR 0 4
7172: PPUSH
7173: LD_INT 1
7175: PPUSH
7176: LD_INT 0
7178: PPUSH
7179: CALL_OW 49
// Connect ( veh ) ;
7183: LD_VAR 0 4
7187: PPUSH
7188: CALL 21585 0 1
// wait ( 0 0$2 ) ;
7192: LD_INT 70
7194: PPUSH
7195: CALL_OW 67
// end ; SetLives ( veh , i [ 6 ] ) ;
7199: LD_VAR 0 4
7203: PPUSH
7204: LD_VAR 0 2
7208: PUSH
7209: LD_INT 6
7211: ARRAY
7212: PPUSH
7213: CALL_OW 234
// SetFuel ( veh , 20 ) ;
7217: LD_VAR 0 4
7221: PPUSH
7222: LD_INT 20
7224: PPUSH
7225: CALL_OW 240
// if i [ 7 ] and GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay ] then
7229: LD_VAR 0 2
7233: PUSH
7234: LD_INT 7
7236: ARRAY
7237: PUSH
7238: LD_VAR 0 4
7242: PPUSH
7243: CALL_OW 264
7247: PUSH
7248: LD_INT 51
7250: PUSH
7251: LD_INT 32
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: IN
7258: AND
7259: IFFALSE 7310
// begin for j := 1 to 2 do
7261: LD_ADDR_VAR 0 3
7265: PUSH
7266: DOUBLE
7267: LD_INT 1
7269: DEC
7270: ST_TO_ADDR
7271: LD_INT 2
7273: PUSH
7274: FOR_TO
7275: IFFALSE 7308
// AddCargo ( veh , j , i [ 7 ] [ j ] ) ;
7277: LD_VAR 0 4
7281: PPUSH
7282: LD_VAR 0 3
7286: PPUSH
7287: LD_VAR 0 2
7291: PUSH
7292: LD_INT 7
7294: ARRAY
7295: PUSH
7296: LD_VAR 0 3
7300: ARRAY
7301: PPUSH
7302: CALL_OW 291
7306: GO 7274
7308: POP
7309: POP
// end ; ComMoveXY ( veh , 185 , 144 ) ;
7310: LD_VAR 0 4
7314: PPUSH
7315: LD_INT 185
7317: PPUSH
7318: LD_INT 144
7320: PPUSH
7321: CALL_OW 111
// if GetControl ( veh ) = control_manual and not hasCamera and GetClass ( IsDrivenBy ( veh ) ) = 2 then
7325: LD_VAR 0 4
7329: PPUSH
7330: CALL_OW 263
7334: PUSH
7335: LD_INT 1
7337: EQUAL
7338: PUSH
7339: LD_VAR 0 7
7343: NOT
7344: AND
7345: PUSH
7346: LD_VAR 0 4
7350: PPUSH
7351: CALL_OW 311
7355: PPUSH
7356: CALL_OW 257
7360: PUSH
7361: LD_INT 2
7363: EQUAL
7364: AND
7365: IFFALSE 7460
// begin hasCamera := true ;
7367: LD_ADDR_VAR 0 7
7371: PUSH
7372: LD_INT 1
7374: ST_TO_ADDR
// driver := IsDrivenBy ( veh ) ;
7375: LD_ADDR_VAR 0 8
7379: PUSH
7380: LD_VAR 0 4
7384: PPUSH
7385: CALL_OW 311
7389: ST_TO_ADDR
// AddComMoveXY ( veh , 177 , 138 ) ;
7390: LD_VAR 0 4
7394: PPUSH
7395: LD_INT 177
7397: PPUSH
7398: LD_INT 138
7400: PPUSH
7401: CALL_OW 171
// AddComExitVehicle ( driver ) ;
7405: LD_VAR 0 8
7409: PPUSH
7410: CALL_OW 181
// AddComHiddenCamera ( driver , 190 , 150 ) ;
7414: LD_VAR 0 8
7418: PPUSH
7419: LD_INT 190
7421: PPUSH
7422: LD_INT 150
7424: PPUSH
7425: CALL_OW 217
// AddComEnterUnit ( driver , veh ) ;
7429: LD_VAR 0 8
7433: PPUSH
7434: LD_VAR 0 4
7438: PPUSH
7439: CALL_OW 180
// AddComMoveXY ( driver , 170 , 103 ) ;
7443: LD_VAR 0 8
7447: PPUSH
7448: LD_INT 170
7450: PPUSH
7451: LD_INT 103
7453: PPUSH
7454: CALL_OW 171
// end else
7458: GO 7502
// begin AddComWait ( veh , 0 0$2 ) ;
7460: LD_VAR 0 4
7464: PPUSH
7465: LD_INT 70
7467: PPUSH
7468: CALL_OW 202
// AddComMoveXY ( veh , 179 , 129 ) ;
7472: LD_VAR 0 4
7476: PPUSH
7477: LD_INT 179
7479: PPUSH
7480: LD_INT 129
7482: PPUSH
7483: CALL_OW 171
// AddComMoveXY ( veh , 170 , 103 ) ;
7487: LD_VAR 0 4
7491: PPUSH
7492: LD_INT 170
7494: PPUSH
7495: LD_INT 103
7497: PPUSH
7498: CALL_OW 171
// end ; wait ( 0 0$2 ) ;
7502: LD_INT 70
7504: PPUSH
7505: CALL_OW 67
// end ;
7509: GO 6929
7511: POP
7512: POP
// end ; if tmp then
7513: LD_VAR 0 5
7517: IFFALSE 7662
// begin for i in tmp do
7519: LD_ADDR_VAR 0 2
7523: PUSH
7524: LD_VAR 0 5
7528: PUSH
7529: FOR_IN
7530: IFFALSE 7660
// begin SetDir ( i , 4 ) ;
7532: LD_VAR 0 2
7536: PPUSH
7537: LD_INT 4
7539: PPUSH
7540: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
7544: LD_VAR 0 2
7548: PPUSH
7549: LD_INT 1
7551: PPUSH
7552: LD_INT 0
7554: PPUSH
7555: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
7559: LD_VAR 0 2
7563: PPUSH
7564: LD_INT 185
7566: PPUSH
7567: LD_INT 144
7569: PPUSH
7570: CALL_OW 111
// if GetClass ( i ) = 2 and not hasCamera then
7574: LD_VAR 0 2
7578: PPUSH
7579: CALL_OW 257
7583: PUSH
7584: LD_INT 2
7586: EQUAL
7587: PUSH
7588: LD_VAR 0 7
7592: NOT
7593: AND
7594: IFFALSE 7621
// begin hasCamera := true ;
7596: LD_ADDR_VAR 0 7
7600: PUSH
7601: LD_INT 1
7603: ST_TO_ADDR
// AddComHiddenCamera ( i , 190 , 150 ) ;
7604: LD_VAR 0 2
7608: PPUSH
7609: LD_INT 190
7611: PPUSH
7612: LD_INT 150
7614: PPUSH
7615: CALL_OW 217
// end else
7619: GO 7636
// AddComMoveXY ( i , 179 , 129 ) ;
7621: LD_VAR 0 2
7625: PPUSH
7626: LD_INT 179
7628: PPUSH
7629: LD_INT 129
7631: PPUSH
7632: CALL_OW 171
// AddComMoveXY ( i , 170 , 103 ) ;
7636: LD_VAR 0 2
7640: PPUSH
7641: LD_INT 170
7643: PPUSH
7644: LD_INT 103
7646: PPUSH
7647: CALL_OW 171
// wait ( 0 0$2 ) ;
7651: LD_INT 70
7653: PPUSH
7654: CALL_OW 67
// end ;
7658: GO 7529
7660: POP
7661: POP
// end ; if heikeApes then
7662: LD_EXP 23
7666: IFFALSE 7749
// begin for i in heikeApes do
7668: LD_ADDR_VAR 0 2
7672: PUSH
7673: LD_EXP 23
7677: PUSH
7678: FOR_IN
7679: IFFALSE 7747
// begin SetDir ( i , 4 ) ;
7681: LD_VAR 0 2
7685: PPUSH
7686: LD_INT 4
7688: PPUSH
7689: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
7693: LD_VAR 0 2
7697: PPUSH
7698: LD_INT 1
7700: PPUSH
7701: LD_INT 0
7703: PPUSH
7704: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
7708: LD_VAR 0 2
7712: PPUSH
7713: LD_INT 185
7715: PPUSH
7716: LD_INT 144
7718: PPUSH
7719: CALL_OW 111
// AddComMoveXY ( i , 170 , 103 ) ;
7723: LD_VAR 0 2
7727: PPUSH
7728: LD_INT 170
7730: PPUSH
7731: LD_INT 103
7733: PPUSH
7734: CALL_OW 171
// wait ( 0 0$2 ) ;
7738: LD_INT 70
7740: PPUSH
7741: CALL_OW 67
// end ;
7745: GO 7678
7747: POP
7748: POP
// end ; AddComMoveXY ( Heike , 163 , 89 ) ;
7749: LD_EXP 10
7753: PPUSH
7754: LD_INT 163
7756: PPUSH
7757: LD_INT 89
7759: PPUSH
7760: CALL_OW 171
// wait ( 0 0$2 ) ;
7764: LD_INT 70
7766: PPUSH
7767: CALL_OW 67
// CenterOnXY ( 175 , 117 ) ;
7771: LD_INT 175
7773: PPUSH
7774: LD_INT 117
7776: PPUSH
7777: CALL_OW 84
// CenterOnUnits ( Heike ) ;
7781: LD_EXP 10
7785: PPUSH
7786: CALL_OW 85
// Say ( Heike , DH-Intro-1 ) ;
7790: LD_EXP 10
7794: PPUSH
7795: LD_STRING DH-Intro-1
7797: PPUSH
7798: CALL_OW 88
// if Markov then
7802: LD_EXP 17
7806: IFFALSE 8373
// begin Say ( Markov , DMar-Intro-2 ) ;
7808: LD_EXP 17
7812: PPUSH
7813: LD_STRING DMar-Intro-2
7815: PPUSH
7816: CALL_OW 88
// Say ( Markov , DMar-Intro-3 ) ;
7820: LD_EXP 17
7824: PPUSH
7825: LD_STRING DMar-Intro-3
7827: PPUSH
7828: CALL_OW 88
// wait ( 0 0$1 ) ;
7832: LD_INT 35
7834: PPUSH
7835: CALL_OW 67
// CenterOnUnits ( Heike ) ;
7839: LD_EXP 10
7843: PPUSH
7844: CALL_OW 85
// if Kurt then
7848: LD_EXP 20
7852: IFFALSE 7904
// begin if IsInUnit ( Kurt ) then
7854: LD_EXP 20
7858: PPUSH
7859: CALL_OW 310
7863: IFFALSE 7874
// ComExit ( Kurt ) ;
7865: LD_EXP 20
7869: PPUSH
7870: CALL 50753 0 1
// AddComMoveXY ( Kurt , 130 , 56 ) ;
7874: LD_EXP 20
7878: PPUSH
7879: LD_INT 130
7881: PPUSH
7882: LD_INT 56
7884: PPUSH
7885: CALL_OW 171
// AddComTurnXY ( Kurt , 129 , 56 ) ;
7889: LD_EXP 20
7893: PPUSH
7894: LD_INT 129
7896: PPUSH
7897: LD_INT 56
7899: PPUSH
7900: CALL_OW 178
// end ; if Kaia then
7904: LD_EXP 15
7908: IFFALSE 8088
// begin Say ( Kaia , DK-Intro-4 ) ;
7910: LD_EXP 15
7914: PPUSH
7915: LD_STRING DK-Intro-4
7917: PPUSH
7918: CALL_OW 88
// Say ( Markov , DMar-Intro-5 ) ;
7922: LD_EXP 17
7926: PPUSH
7927: LD_STRING DMar-Intro-5
7929: PPUSH
7930: CALL_OW 88
// Say ( Markov , DMar-Intro-6 ) ;
7934: LD_EXP 17
7938: PPUSH
7939: LD_STRING DMar-Intro-6
7941: PPUSH
7942: CALL_OW 88
// Say ( Olaf , DO-Intro-7 ) ;
7946: LD_EXP 19
7950: PPUSH
7951: LD_STRING DO-Intro-7
7953: PPUSH
7954: CALL_OW 88
// CenterOnXY ( 160 , 85 ) ;
7958: LD_INT 160
7960: PPUSH
7961: LD_INT 85
7963: PPUSH
7964: CALL_OW 84
// Say ( Markov , DMar-Intro-8 ) ;
7968: LD_EXP 17
7972: PPUSH
7973: LD_STRING DMar-Intro-8
7975: PPUSH
7976: CALL_OW 88
// Say ( Markov , DMar-Intro-9 ) ;
7980: LD_EXP 17
7984: PPUSH
7985: LD_STRING DMar-Intro-9
7987: PPUSH
7988: CALL_OW 88
// Say ( Markov , DMar-Intro-10 ) ;
7992: LD_EXP 17
7996: PPUSH
7997: LD_STRING DMar-Intro-10
7999: PPUSH
8000: CALL_OW 88
// Say ( Markov , DMar-Intro-11 ) ;
8004: LD_EXP 17
8008: PPUSH
8009: LD_STRING DMar-Intro-11
8011: PPUSH
8012: CALL_OW 88
// Say ( Givi , DG-Intro-12 ) ;
8016: LD_EXP 11
8020: PPUSH
8021: LD_STRING DG-Intro-12
8023: PPUSH
8024: CALL_OW 88
// Say ( Givi , DG-Intro-13 ) ;
8028: LD_EXP 11
8032: PPUSH
8033: LD_STRING DG-Intro-13
8035: PPUSH
8036: CALL_OW 88
// Say ( Givi , DG-Intro-14 ) ;
8040: LD_EXP 11
8044: PPUSH
8045: LD_STRING DG-Intro-14
8047: PPUSH
8048: CALL_OW 88
// Say ( Givi , DG-Intro-15 ) ;
8052: LD_EXP 11
8056: PPUSH
8057: LD_STRING DG-Intro-15
8059: PPUSH
8060: CALL_OW 88
// Say ( Heike , DH-Intro-16 ) ;
8064: LD_EXP 10
8068: PPUSH
8069: LD_STRING DH-Intro-16
8071: PPUSH
8072: CALL_OW 88
// Say ( Markov , DMar-Intro-17 ) ;
8076: LD_EXP 17
8080: PPUSH
8081: LD_STRING DMar-Intro-17
8083: PPUSH
8084: CALL_OW 88
// end ; if Kurt and Mike then
8088: LD_EXP 20
8092: PUSH
8093: LD_EXP 12
8097: AND
8098: IFFALSE 8373
// begin CenterNowOnUnits ( Kurt ) ;
8100: LD_EXP 20
8104: PPUSH
8105: CALL_OW 87
// ComTurnUnit ( Kurt , Heike ) ;
8109: LD_EXP 20
8113: PPUSH
8114: LD_EXP 10
8118: PPUSH
8119: CALL_OW 119
// Say ( Kurt , DKs-Intro-18 ) ;
8123: LD_EXP 20
8127: PPUSH
8128: LD_STRING DKs-Intro-18
8130: PPUSH
8131: CALL_OW 88
// Say ( Kurt , DKs-Intro-19 ) ;
8135: LD_EXP 20
8139: PPUSH
8140: LD_STRING DKs-Intro-19
8142: PPUSH
8143: CALL_OW 88
// CenterNowOnUnits ( Mike ) ;
8147: LD_EXP 12
8151: PPUSH
8152: CALL_OW 87
// if IsInUnit ( Mike ) then
8156: LD_EXP 12
8160: PPUSH
8161: CALL_OW 310
8165: IFFALSE 8176
// ComExit ( Mike ) ;
8167: LD_EXP 12
8171: PPUSH
8172: CALL 50753 0 1
// AddComMoveXY ( Mike , 129 , 53 ) ;
8176: LD_EXP 12
8180: PPUSH
8181: LD_INT 129
8183: PPUSH
8184: LD_INT 53
8186: PPUSH
8187: CALL_OW 171
// AddComHold ( Mike ) ;
8191: LD_EXP 12
8195: PPUSH
8196: CALL_OW 200
// wait ( 0 0$2 ) ;
8200: LD_INT 70
8202: PPUSH
8203: CALL_OW 67
// Say ( Mike , DM-Intro-20 ) ;
8207: LD_EXP 12
8211: PPUSH
8212: LD_STRING DM-Intro-20
8214: PPUSH
8215: CALL_OW 88
// scoutActive := Query ( Scout ) ;
8219: LD_ADDR_EXP 3
8223: PUSH
8224: LD_STRING Scout
8226: PPUSH
8227: CALL_OW 97
8231: ST_TO_ADDR
// if scoutActive = 1 then
8232: LD_EXP 3
8236: PUSH
8237: LD_INT 1
8239: EQUAL
8240: IFFALSE 8337
// begin CenterNowOnUnits ( Kurt ) ;
8242: LD_EXP 20
8246: PPUSH
8247: CALL_OW 87
// Say ( Heike , DH-Intro-21 ) ;
8251: LD_EXP 10
8255: PPUSH
8256: LD_STRING DH-Intro-21
8258: PPUSH
8259: CALL_OW 88
// Say ( Mike , DM-Intro-22 ) ;
8263: LD_EXP 12
8267: PPUSH
8268: LD_STRING DM-Intro-22
8270: PPUSH
8271: CALL_OW 88
// Say ( Kurt , DKs-Intro-23 ) ;
8275: LD_EXP 20
8279: PPUSH
8280: LD_STRING DKs-Intro-23
8282: PPUSH
8283: CALL_OW 88
// SetSide ( Kurt , 5 ) ;
8287: LD_EXP 20
8291: PPUSH
8292: LD_INT 5
8294: PPUSH
8295: CALL_OW 235
// SetSide ( Mike , 5 ) ;
8299: LD_EXP 12
8303: PPUSH
8304: LD_INT 5
8306: PPUSH
8307: CALL_OW 235
// ComMoveXY ( [ Kurt , Mike ] , 104 , 66 ) ;
8311: LD_EXP 20
8315: PUSH
8316: LD_EXP 12
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: PPUSH
8325: LD_INT 104
8327: PPUSH
8328: LD_INT 66
8330: PPUSH
8331: CALL_OW 111
// end else
8335: GO 8373
// begin Say ( Heike , DH-Intro-a-21 ) ;
8337: LD_EXP 10
8341: PPUSH
8342: LD_STRING DH-Intro-a-21
8344: PPUSH
8345: CALL_OW 88
// Say ( Mike , DM-Intro-a-22 ) ;
8349: LD_EXP 12
8353: PPUSH
8354: LD_STRING DM-Intro-a-22
8356: PPUSH
8357: CALL_OW 88
// Say ( Kurt , DKs-Intro-a-23 ) ;
8361: LD_EXP 20
8365: PPUSH
8366: LD_STRING DKs-Intro-a-23
8368: PPUSH
8369: CALL_OW 88
// end ; end ; end ; Video ( false ) ;
8373: LD_INT 0
8375: PPUSH
8376: CALL 50337 0 1
// music_nat := music_auto ;
8380: LD_ADDR_OWVAR 71
8384: PUSH
8385: LD_INT 0
8387: ST_TO_ADDR
// music_class := music_auto ;
8388: LD_ADDR_OWVAR 72
8392: PUSH
8393: LD_INT 0
8395: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
8396: LD_STRING M1
8398: PPUSH
8399: CALL_OW 337
// wait ( 0 0$3 ) ;
8403: LD_INT 105
8405: PPUSH
8406: CALL_OW 67
// Say ( Heike , DH-Base-1 ) ;
8410: LD_EXP 10
8414: PPUSH
8415: LD_STRING DH-Base-1
8417: PPUSH
8418: CALL_OW 88
// if Kaia then
8422: LD_EXP 15
8426: IFFALSE 8536
// begin Say ( Kaia , DK-Base-2 ) ;
8428: LD_EXP 15
8432: PPUSH
8433: LD_STRING DK-Base-2
8435: PPUSH
8436: CALL_OW 88
// Say ( Heike , DH-Base-3 ) ;
8440: LD_EXP 10
8444: PPUSH
8445: LD_STRING DH-Base-3
8447: PPUSH
8448: CALL_OW 88
// if Aviradze then
8452: LD_EXP 21
8456: IFFALSE 8536
// begin Say ( Aviradze , DA-Base-4 ) ;
8458: LD_EXP 21
8462: PPUSH
8463: LD_STRING DA-Base-4
8465: PPUSH
8466: CALL_OW 88
// Say ( Kaia , DK-Base-5 ) ;
8470: LD_EXP 15
8474: PPUSH
8475: LD_STRING DK-Base-5
8477: PPUSH
8478: CALL_OW 88
// if Markov then
8482: LD_EXP 17
8486: IFFALSE 8536
// begin Say ( Markov , DMar-Base-6 ) ;
8488: LD_EXP 17
8492: PPUSH
8493: LD_STRING DMar-Base-6
8495: PPUSH
8496: CALL_OW 88
// Say ( Kaia , DK-Base-7 ) ;
8500: LD_EXP 15
8504: PPUSH
8505: LD_STRING DK-Base-7
8507: PPUSH
8508: CALL_OW 88
// Say ( Markov , DMar-Base-8 ) ;
8512: LD_EXP 17
8516: PPUSH
8517: LD_STRING DMar-Base-8
8519: PPUSH
8520: CALL_OW 88
// Say ( Markov , DMar-Base-9 ) ;
8524: LD_EXP 17
8528: PPUSH
8529: LD_STRING DMar-Base-9
8531: PPUSH
8532: CALL_OW 88
// end ; end ; end ; SaveForQuickRestart ;
8536: CALL_OW 22
// end ;
8540: LD_VAR 0 1
8544: RET
// every 0 0$1 trigger scoutSuccess do var i , tmp ;
8545: LD_EXP 5
8549: IFFALSE 9500
8551: GO 8553
8553: DISABLE
8554: LD_INT 0
8556: PPUSH
8557: PPUSH
// begin InGameOn ;
8558: CALL_OW 8
// ComTurnUnit ( [ Mike , Kurt ] , Heike ) ;
8562: LD_EXP 12
8566: PUSH
8567: LD_EXP 20
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: PPUSH
8576: LD_EXP 10
8580: PPUSH
8581: CALL_OW 119
// ComExit ( Heike ) ;
8585: LD_EXP 10
8589: PPUSH
8590: CALL 50753 0 1
// if IsOk ( Mike ) then
8594: LD_EXP 12
8598: PPUSH
8599: CALL_OW 302
8603: IFFALSE 8621
// AddComTurnUnit ( Heike , Mike ) else
8605: LD_EXP 10
8609: PPUSH
8610: LD_EXP 12
8614: PPUSH
8615: CALL_OW 179
8619: GO 8635
// AddComTurnUnit ( Heike , Kurt ) ;
8621: LD_EXP 10
8625: PPUSH
8626: LD_EXP 20
8630: PPUSH
8631: CALL_OW 179
// if IsOk ( Mike ) and IsOk ( Kurt ) then
8635: LD_EXP 12
8639: PPUSH
8640: CALL_OW 302
8644: PUSH
8645: LD_EXP 20
8649: PPUSH
8650: CALL_OW 302
8654: AND
8655: IFFALSE 8906
// begin CenterNowOnUnits ( Mike ) ;
8657: LD_EXP 12
8661: PPUSH
8662: CALL_OW 87
// Say ( Mike , DM-Scout-1 ) ;
8666: LD_EXP 12
8670: PPUSH
8671: LD_STRING DM-Scout-1
8673: PPUSH
8674: CALL_OW 88
// Say ( Heike , DH-Scout-2 ) ;
8678: LD_EXP 10
8682: PPUSH
8683: LD_STRING DH-Scout-2
8685: PPUSH
8686: CALL_OW 88
// Say ( Kurt , DKs-Scout-3 ) ;
8690: LD_EXP 20
8694: PPUSH
8695: LD_STRING DKs-Scout-3
8697: PPUSH
8698: CALL_OW 88
// Say ( Heike , DH-Scout-4 ) ;
8702: LD_EXP 10
8706: PPUSH
8707: LD_STRING DH-Scout-4
8709: PPUSH
8710: CALL_OW 88
// Say ( Heike , DH-Scout-5 ) ;
8714: LD_EXP 10
8718: PPUSH
8719: LD_STRING DH-Scout-5
8721: PPUSH
8722: CALL_OW 88
// tmp := [ [ 72 , 122 ] , [ 89 , 131 ] , [ 99 , 139 ] , [ 100 , 148 ] ] ;
8726: LD_ADDR_VAR 0 2
8730: PUSH
8731: LD_INT 72
8733: PUSH
8734: LD_INT 122
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: PUSH
8741: LD_INT 89
8743: PUSH
8744: LD_INT 131
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: PUSH
8751: LD_INT 99
8753: PUSH
8754: LD_INT 139
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: PUSH
8761: LD_INT 100
8763: PUSH
8764: LD_INT 148
8766: PUSH
8767: EMPTY
8768: LIST
8769: LIST
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: ST_TO_ADDR
// for i in tmp do
8777: LD_ADDR_VAR 0 1
8781: PUSH
8782: LD_VAR 0 2
8786: PUSH
8787: FOR_IN
8788: IFFALSE 8846
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 2 , - 6 ) ;
8790: LD_VAR 0 1
8794: PUSH
8795: LD_INT 1
8797: ARRAY
8798: PPUSH
8799: LD_VAR 0 1
8803: PUSH
8804: LD_INT 2
8806: ARRAY
8807: PPUSH
8808: LD_INT 2
8810: PPUSH
8811: LD_INT 6
8813: NEG
8814: PPUSH
8815: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 2 ) ;
8819: LD_VAR 0 1
8823: PUSH
8824: LD_INT 1
8826: ARRAY
8827: PPUSH
8828: LD_VAR 0 1
8832: PUSH
8833: LD_INT 2
8835: ARRAY
8836: PPUSH
8837: LD_INT 2
8839: PPUSH
8840: CALL_OW 331
// end ;
8844: GO 8787
8846: POP
8847: POP
// CenterOnXY ( 83 , 132 ) ;
8848: LD_INT 83
8850: PPUSH
8851: LD_INT 132
8853: PPUSH
8854: CALL_OW 84
// Say ( Kurt , DKs-Scout-6 ) ;
8858: LD_EXP 20
8862: PPUSH
8863: LD_STRING DKs-Scout-6
8865: PPUSH
8866: CALL_OW 88
// Say ( Mike , DM-Scout-7 ) ;
8870: LD_EXP 12
8874: PPUSH
8875: LD_STRING DM-Scout-7
8877: PPUSH
8878: CALL_OW 88
// Say ( Mike , DM-Scout-8 ) ;
8882: LD_EXP 12
8886: PPUSH
8887: LD_STRING DM-Scout-8
8889: PPUSH
8890: CALL_OW 88
// Say ( Kurt , DKs-Scout-9 ) ;
8894: LD_EXP 20
8898: PPUSH
8899: LD_STRING DKs-Scout-9
8901: PPUSH
8902: CALL_OW 88
// end ; if IsDead ( Mike ) then
8906: LD_EXP 12
8910: PPUSH
8911: CALL_OW 301
8915: IFFALSE 9082
// begin CenterNowOnUnits ( Kurt ) ;
8917: LD_EXP 20
8921: PPUSH
8922: CALL_OW 87
// Say ( Kurt , DKs-Scout-b-1 ) ;
8926: LD_EXP 20
8930: PPUSH
8931: LD_STRING DKs-Scout-b-1
8933: PPUSH
8934: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-2 ) ;
8938: LD_EXP 20
8942: PPUSH
8943: LD_STRING DKs-Scout-b-2
8945: PPUSH
8946: CALL_OW 88
// if IsOk ( Givi ) then
8950: LD_EXP 11
8954: PPUSH
8955: CALL_OW 302
8959: IFFALSE 9034
// begin ComExit ( Givi ) ;
8961: LD_EXP 11
8965: PPUSH
8966: CALL 50753 0 1
// AddComTurnUnit ( Givi , Kurt ) ;
8970: LD_EXP 11
8974: PPUSH
8975: LD_EXP 20
8979: PPUSH
8980: CALL_OW 179
// Say ( Givi , DG-Scout-b-3 ) ;
8984: LD_EXP 11
8988: PPUSH
8989: LD_STRING DG-Scout-b-3
8991: PPUSH
8992: CALL_OW 88
// Say ( Givi , DG-Scout-b-4 ) ;
8996: LD_EXP 11
9000: PPUSH
9001: LD_STRING DG-Scout-b-4
9003: PPUSH
9004: CALL_OW 88
// Say ( Givi , DG-Scout-b-5 ) ;
9008: LD_EXP 11
9012: PPUSH
9013: LD_STRING DG-Scout-b-5
9015: PPUSH
9016: CALL_OW 88
// Say ( Heike , DH-Scout-b-6 ) ;
9020: LD_EXP 10
9024: PPUSH
9025: LD_STRING DH-Scout-b-6
9027: PPUSH
9028: CALL_OW 88
// end else
9032: GO 9046
// Say ( Heike , DH-Scout-a-4 ) ;
9034: LD_EXP 10
9038: PPUSH
9039: LD_STRING DH-Scout-a-4
9041: PPUSH
9042: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-7 ) ;
9046: LD_EXP 20
9050: PPUSH
9051: LD_STRING DKs-Scout-b-7
9053: PPUSH
9054: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-8 ) ;
9058: LD_EXP 20
9062: PPUSH
9063: LD_STRING DKs-Scout-b-8
9065: PPUSH
9066: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-9 ) ;
9070: LD_EXP 20
9074: PPUSH
9075: LD_STRING DKs-Scout-b-9
9077: PPUSH
9078: CALL_OW 88
// end ; if IsDead ( Kurt ) then
9082: LD_EXP 20
9086: PPUSH
9087: CALL_OW 301
9091: IFFALSE 9370
// begin CenterNowOnUnits ( Mike ) ;
9093: LD_EXP 12
9097: PPUSH
9098: CALL_OW 87
// Say ( Mike , DM-Scout-a-1 ) ;
9102: LD_EXP 12
9106: PPUSH
9107: LD_STRING DM-Scout-a-1
9109: PPUSH
9110: CALL_OW 88
// Say ( Mike , DM-Scout-a-2 ) ;
9114: LD_EXP 12
9118: PPUSH
9119: LD_STRING DM-Scout-a-2
9121: PPUSH
9122: CALL_OW 88
// if GetLives ( Mike ) < 1000 then
9126: LD_EXP 12
9130: PPUSH
9131: CALL_OW 256
9135: PUSH
9136: LD_INT 1000
9138: LESS
9139: IFFALSE 9155
// Say ( Heike , DH-Scout-a-3 ) else
9141: LD_EXP 10
9145: PPUSH
9146: LD_STRING DH-Scout-a-3
9148: PPUSH
9149: CALL_OW 88
9153: GO 9167
// Say ( Heike , DH-Scout-a-4 ) ;
9155: LD_EXP 10
9159: PPUSH
9160: LD_STRING DH-Scout-a-4
9162: PPUSH
9163: CALL_OW 88
// Say ( Mike , DM-Scout-a-5 ) ;
9167: LD_EXP 12
9171: PPUSH
9172: LD_STRING DM-Scout-a-5
9174: PPUSH
9175: CALL_OW 88
// if IsOk ( Kaia ) then
9179: LD_EXP 15
9183: PPUSH
9184: CALL_OW 302
9188: IFFALSE 9370
// begin ComExit ( Kaia ) ;
9190: LD_EXP 15
9194: PPUSH
9195: CALL 50753 0 1
// AddComMoveUnit ( Kaia , Mike ) ;
9199: LD_EXP 15
9203: PPUSH
9204: LD_EXP 12
9208: PPUSH
9209: CALL_OW 172
// wait ( 0 0$2 ) ;
9213: LD_INT 70
9215: PPUSH
9216: CALL_OW 67
// ComTurnUnit ( Kaia , Mike ) ;
9220: LD_EXP 15
9224: PPUSH
9225: LD_EXP 12
9229: PPUSH
9230: CALL_OW 119
// ComTurnUnit ( Mike , Kaia ) ;
9234: LD_EXP 12
9238: PPUSH
9239: LD_EXP 15
9243: PPUSH
9244: CALL_OW 119
// Say ( Kaia , DK-Scout-a-6 ) ;
9248: LD_EXP 15
9252: PPUSH
9253: LD_STRING DK-Scout-a-6
9255: PPUSH
9256: CALL_OW 88
// Say ( Mike , DM-Scout-a-7 ) ;
9260: LD_EXP 12
9264: PPUSH
9265: LD_STRING DM-Scout-a-7
9267: PPUSH
9268: CALL_OW 88
// Say ( Kaia , DK-Scout-a-8 ) ;
9272: LD_EXP 15
9276: PPUSH
9277: LD_STRING DK-Scout-a-8
9279: PPUSH
9280: CALL_OW 88
// Say ( Kaia , DK-Scout-a-9 ) ;
9284: LD_EXP 15
9288: PPUSH
9289: LD_STRING DK-Scout-a-9
9291: PPUSH
9292: CALL_OW 88
// Say ( Heike , DH-Scout-a-10 ) ;
9296: LD_EXP 10
9300: PPUSH
9301: LD_STRING DH-Scout-a-10
9303: PPUSH
9304: CALL_OW 88
// ComTurnUnit ( Mike , Heike ) ;
9308: LD_EXP 12
9312: PPUSH
9313: LD_EXP 10
9317: PPUSH
9318: CALL_OW 119
// Say ( Mike , DM-Scout-a-11 ) ;
9322: LD_EXP 12
9326: PPUSH
9327: LD_STRING DM-Scout-a-11
9329: PPUSH
9330: CALL_OW 88
// Say ( Mike , DM-Scout-a-12 ) ;
9334: LD_EXP 12
9338: PPUSH
9339: LD_STRING DM-Scout-a-12
9341: PPUSH
9342: CALL_OW 88
// Say ( Mike , DM-Scout-a-13 ) ;
9346: LD_EXP 12
9350: PPUSH
9351: LD_STRING DM-Scout-a-13
9353: PPUSH
9354: CALL_OW 88
// Say ( Mike , DM-Scout-a-14 ) ;
9358: LD_EXP 12
9362: PPUSH
9363: LD_STRING DM-Scout-a-14
9365: PPUSH
9366: CALL_OW 88
// end ; end ; if IsOk ( Givi ) then
9370: LD_EXP 11
9374: PPUSH
9375: CALL_OW 302
9379: IFFALSE 9407
// begin Say ( Givi , DG-Scout-10 ) ;
9381: LD_EXP 11
9385: PPUSH
9386: LD_STRING DG-Scout-10
9388: PPUSH
9389: CALL_OW 88
// Say ( Givi , DG-Scout-11 ) ;
9393: LD_EXP 11
9397: PPUSH
9398: LD_STRING DG-Scout-11
9400: PPUSH
9401: CALL_OW 88
// end else
9405: GO 9464
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-10 ) then
9407: LD_EXP 22
9411: PPUSH
9412: LD_INT 26
9414: PUSH
9415: LD_INT 1
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: PPUSH
9422: CALL_OW 72
9426: PPUSH
9427: LD_STRING DArm-Scout-10
9429: PPUSH
9430: CALL 226 0 2
9434: NOT
9435: IFFALSE 9464
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-10 ) ;
9437: LD_EXP 22
9441: PPUSH
9442: LD_INT 26
9444: PUSH
9445: LD_INT 2
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PPUSH
9452: CALL_OW 72
9456: PPUSH
9457: LD_STRING DArf-Scout-10
9459: PPUSH
9460: CALL 226 0 2
// Say ( Heike , DH-Scout-12 ) ;
9464: LD_EXP 10
9468: PPUSH
9469: LD_STRING DH-Scout-12
9471: PPUSH
9472: CALL_OW 88
// Say ( Heike , DH-Scout-13 ) ;
9476: LD_EXP 10
9480: PPUSH
9481: LD_STRING DH-Scout-13
9483: PPUSH
9484: CALL_OW 88
// InGameOff ;
9488: CALL_OW 9
// usAttacksAllowed := true ;
9492: LD_ADDR_EXP 6
9496: PUSH
9497: LD_INT 1
9499: ST_TO_ADDR
// end ;
9500: PPOPN 2
9502: END
// every 0 0$1 trigger scoutFailed do
9503: LD_EXP 4
9507: IFFALSE 9581
9509: GO 9511
9511: DISABLE
// begin wait ( 0 0$30 ) ;
9512: LD_INT 1050
9514: PPUSH
9515: CALL_OW 67
// Say ( Heike , DH-Scout-c-1 ) ;
9519: LD_EXP 10
9523: PPUSH
9524: LD_STRING DH-Scout-c-1
9526: PPUSH
9527: CALL_OW 88
// if not IsOk ( Givi ) then
9531: LD_EXP 11
9535: PPUSH
9536: CALL_OW 302
9540: NOT
9541: IFFALSE 9545
// exit ;
9543: GO 9581
// Say ( Givi , DG-Scout-c-2 ) ;
9545: LD_EXP 11
9549: PPUSH
9550: LD_STRING DG-Scout-c-2
9552: PPUSH
9553: CALL_OW 88
// Say ( Givi , DG-Scout-c-3 ) ;
9557: LD_EXP 11
9561: PPUSH
9562: LD_STRING DG-Scout-c-3
9564: PPUSH
9565: CALL_OW 88
// Say ( Heike , DH-Scout-c-4 ) ;
9569: LD_EXP 10
9573: PPUSH
9574: LD_STRING DH-Scout-c-4
9576: PPUSH
9577: CALL_OW 88
// end ;
9581: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_half ] ] ) and IsOk ( Aviradze ) do
9582: LD_INT 22
9584: PUSH
9585: LD_INT 2
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: LD_INT 30
9594: PUSH
9595: LD_INT 7
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PPUSH
9606: CALL_OW 69
9610: PUSH
9611: LD_EXP 21
9615: PPUSH
9616: CALL_OW 302
9620: AND
9621: IFFALSE 9706
9623: GO 9625
9625: DISABLE
// begin DialogueOn ;
9626: CALL_OW 6
// Say ( Aviradze , DA-Lab-1 ) ;
9630: LD_EXP 21
9634: PPUSH
9635: LD_STRING DA-Lab-1
9637: PPUSH
9638: CALL_OW 88
// Say ( Heike , DH-Lab-2 ) ;
9642: LD_EXP 10
9646: PPUSH
9647: LD_STRING DH-Lab-2
9649: PPUSH
9650: CALL_OW 88
// Say ( Aviradze , DA-Lab-3 ) ;
9654: LD_EXP 21
9658: PPUSH
9659: LD_STRING DA-Lab-3
9661: PPUSH
9662: CALL_OW 88
// Say ( Aviradze , DA-Lab-4 ) ;
9666: LD_EXP 21
9670: PPUSH
9671: LD_STRING DA-Lab-4
9673: PPUSH
9674: CALL_OW 88
// Say ( Aviradze , DA-Lab-5 ) ;
9678: LD_EXP 21
9682: PPUSH
9683: LD_STRING DA-Lab-5
9685: PPUSH
9686: CALL_OW 88
// Say ( Heike , DH-Lab-6 ) ;
9690: LD_EXP 10
9694: PPUSH
9695: LD_STRING DH-Lab-6
9697: PPUSH
9698: CALL_OW 88
// DialogueOff ;
9702: CALL_OW 7
// end ;
9706: END
// every 0 0$1 trigger GetTech ( tech_MatDet , 2 ) = state_researched and IsOk ( Givi ) do
9707: LD_INT 7
9709: PPUSH
9710: LD_INT 2
9712: PPUSH
9713: CALL_OW 321
9717: PUSH
9718: LD_INT 2
9720: EQUAL
9721: PUSH
9722: LD_EXP 11
9726: PPUSH
9727: CALL_OW 302
9731: AND
9732: IFFALSE 9901
9734: GO 9736
9736: DISABLE
// begin DialogueOn ;
9737: CALL_OW 6
// Say ( Givi , DG-Opt-1 ) ;
9741: LD_EXP 11
9745: PPUSH
9746: LD_STRING DG-Opt-1
9748: PPUSH
9749: CALL_OW 88
// Say ( Heike , DH-Opt-2 ) ;
9753: LD_EXP 10
9757: PPUSH
9758: LD_STRING DH-Opt-2
9760: PPUSH
9761: CALL_OW 88
// Say ( Givi , DG-Opt-3 ) ;
9765: LD_EXP 11
9769: PPUSH
9770: LD_STRING DG-Opt-3
9772: PPUSH
9773: CALL_OW 88
// Say ( Givi , DG-Opt-4 ) ;
9777: LD_EXP 11
9781: PPUSH
9782: LD_STRING DG-Opt-4
9784: PPUSH
9785: CALL_OW 88
// Say ( Heike , DH-Opt-5 ) ;
9789: LD_EXP 10
9793: PPUSH
9794: LD_STRING DH-Opt-5
9796: PPUSH
9797: CALL_OW 88
// Say ( Givi , DG-Opt-6 ) ;
9801: LD_EXP 11
9805: PPUSH
9806: LD_STRING DG-Opt-6
9808: PPUSH
9809: CALL_OW 88
// Say ( Heike , DH-Opt-7 ) ;
9813: LD_EXP 10
9817: PPUSH
9818: LD_STRING DH-Opt-7
9820: PPUSH
9821: CALL_OW 88
// Say ( Givi , DG-Opt-8 ) ;
9825: LD_EXP 11
9829: PPUSH
9830: LD_STRING DG-Opt-8
9832: PPUSH
9833: CALL_OW 88
// Say ( Givi , DG-Opt-9 ) ;
9837: LD_EXP 11
9841: PPUSH
9842: LD_STRING DG-Opt-9
9844: PPUSH
9845: CALL_OW 88
// Say ( Heike , DH-Opt-10 ) ;
9849: LD_EXP 10
9853: PPUSH
9854: LD_STRING DH-Opt-10
9856: PPUSH
9857: CALL_OW 88
// Say ( Givi , DG-Opt-11 ) ;
9861: LD_EXP 11
9865: PPUSH
9866: LD_STRING DG-Opt-11
9868: PPUSH
9869: CALL_OW 88
// Say ( Givi , DG-Opt-12 ) ;
9873: LD_EXP 11
9877: PPUSH
9878: LD_STRING DG-Opt-12
9880: PPUSH
9881: CALL_OW 88
// Say ( Heike , DH-Opt-13 ) ;
9885: LD_EXP 10
9889: PPUSH
9890: LD_STRING DH-Opt-13
9892: PPUSH
9893: CALL_OW 88
// DialogueOff ;
9897: CALL_OW 7
// end ;
9901: END
// every 0 0$1 trigger GetTech ( tech_rocket , 2 ) = state_researched and IsOk ( Ibrahim ) do
9902: LD_INT 40
9904: PPUSH
9905: LD_INT 2
9907: PPUSH
9908: CALL_OW 321
9912: PUSH
9913: LD_INT 2
9915: EQUAL
9916: PUSH
9917: LD_EXP 13
9921: PPUSH
9922: CALL_OW 302
9926: AND
9927: IFFALSE 10177
9929: GO 9931
9931: DISABLE
// begin DialogueOn ;
9932: CALL_OW 6
// Say ( Ibrahim , DI-Roc-1 ) ;
9936: LD_EXP 13
9940: PPUSH
9941: LD_STRING DI-Roc-1
9943: PPUSH
9944: CALL_OW 88
// Say ( Heike , DH-Roc-2 ) ;
9948: LD_EXP 10
9952: PPUSH
9953: LD_STRING DH-Roc-2
9955: PPUSH
9956: CALL_OW 88
// Say ( Ibrahim , DI-Roc-3 ) ;
9960: LD_EXP 13
9964: PPUSH
9965: LD_STRING DI-Roc-3
9967: PPUSH
9968: CALL_OW 88
// Say ( Ibrahim , DI-Roc-4 ) ;
9972: LD_EXP 13
9976: PPUSH
9977: LD_STRING DI-Roc-4
9979: PPUSH
9980: CALL_OW 88
// Say ( Kaia , DK-Roc-5 ) ;
9984: LD_EXP 15
9988: PPUSH
9989: LD_STRING DK-Roc-5
9991: PPUSH
9992: CALL_OW 88
// Say ( Kaia , DK-Roc-6 ) ;
9996: LD_EXP 15
10000: PPUSH
10001: LD_STRING DK-Roc-6
10003: PPUSH
10004: CALL_OW 88
// Say ( Givi , DG-Roc-7 ) ;
10008: LD_EXP 11
10012: PPUSH
10013: LD_STRING DG-Roc-7
10015: PPUSH
10016: CALL_OW 88
// Say ( Givi , DG-Roc-8 ) ;
10020: LD_EXP 11
10024: PPUSH
10025: LD_STRING DG-Roc-8
10027: PPUSH
10028: CALL_OW 88
// if IsOk ( Markov ) and IsOk ( Kaia ) and IsOk ( Givi ) then
10032: LD_EXP 17
10036: PPUSH
10037: CALL_OW 302
10041: PUSH
10042: LD_EXP 15
10046: PPUSH
10047: CALL_OW 302
10051: AND
10052: PUSH
10053: LD_EXP 11
10057: PPUSH
10058: CALL_OW 302
10062: AND
10063: IFFALSE 10173
// begin Say ( Markov , DMar-Roc-9 ) ;
10065: LD_EXP 17
10069: PPUSH
10070: LD_STRING DMar-Roc-9
10072: PPUSH
10073: CALL_OW 88
// Say ( Markov , DMar-Roc-10 ) ;
10077: LD_EXP 17
10081: PPUSH
10082: LD_STRING DMar-Roc-10
10084: PPUSH
10085: CALL_OW 88
// Say ( Kaia , DK-Roc-11 ) ;
10089: LD_EXP 15
10093: PPUSH
10094: LD_STRING DK-Roc-11
10096: PPUSH
10097: CALL_OW 88
// Say ( Markov , DMar-Roc-12 ) ;
10101: LD_EXP 17
10105: PPUSH
10106: LD_STRING DMar-Roc-12
10108: PPUSH
10109: CALL_OW 88
// Say ( Kaia , DK-Roc-13 ) ;
10113: LD_EXP 15
10117: PPUSH
10118: LD_STRING DK-Roc-13
10120: PPUSH
10121: CALL_OW 88
// Say ( Givi , DG-Roc-14 ) ;
10125: LD_EXP 11
10129: PPUSH
10130: LD_STRING DG-Roc-14
10132: PPUSH
10133: CALL_OW 88
// Say ( Markov , DMar-Roc-15 ) ;
10137: LD_EXP 17
10141: PPUSH
10142: LD_STRING DMar-Roc-15
10144: PPUSH
10145: CALL_OW 88
// Say ( Markov , DMar-Roc-16 ) ;
10149: LD_EXP 17
10153: PPUSH
10154: LD_STRING DMar-Roc-16
10156: PPUSH
10157: CALL_OW 88
// Say ( Kaia , DK-Roc-17 ) ;
10161: LD_EXP 15
10165: PPUSH
10166: LD_STRING DK-Roc-17
10168: PPUSH
10169: CALL_OW 88
// end ; DialogueOff ;
10173: CALL_OW 7
// end ;
10177: END
// every 0 0$3 trigger GetLives ( usCommander ) < 1000 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] ] ) < 6 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) < 2 do var i , hurts , sci ;
10178: LD_EXP 25
10182: PPUSH
10183: CALL_OW 256
10187: PUSH
10188: LD_INT 1000
10190: LESS
10191: PUSH
10192: LD_INT 22
10194: PUSH
10195: LD_INT 1
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: PUSH
10202: LD_INT 21
10204: PUSH
10205: LD_INT 1
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: PUSH
10212: LD_INT 23
10214: PUSH
10215: LD_INT 1
10217: PUSH
10218: EMPTY
10219: LIST
10220: LIST
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: LIST
10226: PPUSH
10227: CALL_OW 69
10231: PUSH
10232: LD_INT 6
10234: LESS
10235: OR
10236: PUSH
10237: LD_INT 22
10239: PUSH
10240: LD_INT 1
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PUSH
10247: LD_INT 21
10249: PUSH
10250: LD_INT 1
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: LD_INT 25
10259: PUSH
10260: LD_INT 1
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: LIST
10271: PPUSH
10272: CALL_OW 69
10276: PUSH
10277: LD_INT 2
10279: LESS
10280: OR
10281: IFFALSE 11325
10283: GO 10285
10285: DISABLE
10286: LD_INT 0
10288: PPUSH
10289: PPUSH
10290: PPUSH
// begin usAttacksAllowed := false ;
10291: LD_ADDR_EXP 6
10295: PUSH
10296: LD_INT 0
10298: ST_TO_ADDR
// usSurrender := true ;
10299: LD_ADDR_EXP 7
10303: PUSH
10304: LD_INT 1
10306: ST_TO_ADDR
// SetAttitude ( 1 , 2 , att_friend , true ) ;
10307: LD_INT 1
10309: PPUSH
10310: LD_INT 2
10312: PPUSH
10313: LD_INT 1
10315: PPUSH
10316: LD_INT 1
10318: PPUSH
10319: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_hastask ] ] ) do
10323: LD_ADDR_VAR 0 1
10327: PUSH
10328: LD_INT 22
10330: PUSH
10331: LD_INT 2
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PUSH
10338: LD_INT 21
10340: PUSH
10341: LD_INT 1
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: PUSH
10348: LD_INT 60
10350: PUSH
10351: EMPTY
10352: LIST
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: LIST
10358: PPUSH
10359: CALL_OW 69
10363: PUSH
10364: FOR_IN
10365: IFFALSE 10378
// ComStop ( i ) ;
10367: LD_VAR 0 1
10371: PPUSH
10372: CALL_OW 141
10376: GO 10364
10378: POP
10379: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_ok ] ] , [ f_type , unit_human ] ] ) do
10380: LD_ADDR_VAR 0 1
10384: PUSH
10385: LD_INT 22
10387: PUSH
10388: LD_INT 2
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: PUSH
10395: LD_INT 3
10397: PUSH
10398: LD_INT 50
10400: PUSH
10401: EMPTY
10402: LIST
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: PUSH
10408: LD_INT 21
10410: PUSH
10411: LD_INT 1
10413: PUSH
10414: EMPTY
10415: LIST
10416: LIST
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: LIST
10422: PPUSH
10423: CALL_OW 69
10427: PUSH
10428: FOR_IN
10429: IFFALSE 10445
// SetLives ( i , 251 ) ;
10431: LD_VAR 0 1
10435: PPUSH
10436: LD_INT 251
10438: PPUSH
10439: CALL_OW 234
10443: GO 10428
10445: POP
10446: POP
// InGameOn ;
10447: CALL_OW 8
// ComExit ( usCommander ) ;
10451: LD_EXP 25
10455: PPUSH
10456: CALL 50753 0 1
// AddComMoveXY ( usCommander , 81 , 143 ) ;
10460: LD_EXP 25
10464: PPUSH
10465: LD_INT 81
10467: PPUSH
10468: LD_INT 143
10470: PPUSH
10471: CALL_OW 171
// AddComTurnXY ( usCommander , 81 , 139 ) ;
10475: LD_EXP 25
10479: PPUSH
10480: LD_INT 81
10482: PPUSH
10483: LD_INT 139
10485: PPUSH
10486: CALL_OW 178
// PlaceSeeing ( 81 , 144 , 2 , - 10 ) ;
10490: LD_INT 81
10492: PPUSH
10493: LD_INT 144
10495: PPUSH
10496: LD_INT 2
10498: PPUSH
10499: LD_INT 10
10501: NEG
10502: PPUSH
10503: CALL_OW 330
// CenterNowOnUnits ( usCommander ) ;
10507: LD_EXP 25
10511: PPUSH
10512: CALL_OW 87
// wait ( 0 0$2 ) ;
10516: LD_INT 70
10518: PPUSH
10519: CALL_OW 67
// Say ( usCommander , DCa-Surrender-1 ) ;
10523: LD_EXP 25
10527: PPUSH
10528: LD_STRING DCa-Surrender-1
10530: PPUSH
10531: CALL_OW 88
// Say ( Heike , DH-Surrender-2 ) ;
10535: LD_EXP 10
10539: PPUSH
10540: LD_STRING DH-Surrender-2
10542: PPUSH
10543: CALL_OW 88
// if GetType ( IsInUnit ( Heike ) ) = unit_building then
10547: LD_EXP 10
10551: PPUSH
10552: CALL_OW 310
10556: PPUSH
10557: CALL_OW 247
10561: PUSH
10562: LD_INT 3
10564: EQUAL
10565: IFFALSE 10583
// begin ComExit ( Heike ) ;
10567: LD_EXP 10
10571: PPUSH
10572: CALL 50753 0 1
// wait ( 3 ) ;
10576: LD_INT 3
10578: PPUSH
10579: CALL_OW 67
// end ; ComMoveXY ( Heike , 82 , 133 ) ;
10583: LD_EXP 10
10587: PPUSH
10588: LD_INT 82
10590: PPUSH
10591: LD_INT 133
10593: PPUSH
10594: CALL_OW 111
// AddComTurnUnit ( Heike , usCommander ) ;
10598: LD_EXP 10
10602: PPUSH
10603: LD_EXP 25
10607: PPUSH
10608: CALL_OW 179
// wait ( 0 0$3 ) ;
10612: LD_INT 105
10614: PPUSH
10615: CALL_OW 67
// Say ( Heike , DH-Surrender-3 ) ;
10619: LD_EXP 10
10623: PPUSH
10624: LD_STRING DH-Surrender-3
10626: PPUSH
10627: CALL_OW 88
// Say ( Heike , DH-Surrender-4 ) ;
10631: LD_EXP 10
10635: PPUSH
10636: LD_STRING DH-Surrender-4
10638: PPUSH
10639: CALL_OW 88
// RemoveSeeing ( 81 , 144 , 2 ) ;
10643: LD_INT 81
10645: PPUSH
10646: LD_INT 144
10648: PPUSH
10649: LD_INT 2
10651: PPUSH
10652: CALL_OW 331
// ChangeSideFog ( 1 , 2 ) ;
10656: LD_INT 1
10658: PPUSH
10659: LD_INT 2
10661: PPUSH
10662: CALL_OW 343
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_inside ] ] ) do
10666: LD_ADDR_VAR 0 1
10670: PUSH
10671: LD_INT 22
10673: PUSH
10674: LD_INT 1
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: PUSH
10681: LD_INT 23
10683: PUSH
10684: LD_INT 1
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: PUSH
10691: LD_INT 54
10693: PUSH
10694: EMPTY
10695: LIST
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: LIST
10701: PPUSH
10702: CALL_OW 69
10706: PUSH
10707: FOR_IN
10708: IFFALSE 10721
// ComExit ( i ) ;
10710: LD_VAR 0 1
10714: PPUSH
10715: CALL 50753 0 1
10719: GO 10707
10721: POP
10722: POP
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
10723: LD_ADDR_VAR 0 3
10727: PUSH
10728: LD_INT 22
10730: PUSH
10731: LD_INT 1
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: PUSH
10738: LD_INT 25
10740: PUSH
10741: LD_INT 4
10743: PUSH
10744: EMPTY
10745: LIST
10746: LIST
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: PPUSH
10752: CALL_OW 69
10756: ST_TO_ADDR
// hurts := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
10757: LD_ADDR_VAR 0 2
10761: PUSH
10762: LD_INT 22
10764: PUSH
10765: LD_INT 1
10767: PUSH
10768: EMPTY
10769: LIST
10770: LIST
10771: PUSH
10772: LD_INT 3
10774: PUSH
10775: LD_INT 50
10777: PUSH
10778: EMPTY
10779: LIST
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: PPUSH
10789: CALL_OW 69
10793: ST_TO_ADDR
// if sci and hurts then
10794: LD_VAR 0 3
10798: PUSH
10799: LD_VAR 0 2
10803: AND
10804: IFFALSE 10866
// begin for i := 1 to hurts do
10806: LD_ADDR_VAR 0 1
10810: PUSH
10811: DOUBLE
10812: LD_INT 1
10814: DEC
10815: ST_TO_ADDR
10816: LD_VAR 0 2
10820: PUSH
10821: FOR_TO
10822: IFFALSE 10864
// if i <= sci then
10824: LD_VAR 0 1
10828: PUSH
10829: LD_VAR 0 3
10833: LESSEQUAL
10834: IFFALSE 10862
// AddComHeal ( sci [ i ] , hurts [ i ] ) ;
10836: LD_VAR 0 3
10840: PUSH
10841: LD_VAR 0 1
10845: ARRAY
10846: PPUSH
10847: LD_VAR 0 2
10851: PUSH
10852: LD_VAR 0 1
10856: ARRAY
10857: PPUSH
10858: CALL_OW 188
10862: GO 10821
10864: POP
10865: POP
// end ; if IsOk ( Givi ) then
10866: LD_EXP 11
10870: PPUSH
10871: CALL_OW 302
10875: IFFALSE 10889
// Say ( Givi , DG-Surrender-5 ) ;
10877: LD_EXP 11
10881: PPUSH
10882: LD_STRING DG-Surrender-5
10884: PPUSH
10885: CALL_OW 88
// Say ( usCommander , DCa-Surrender-6 ) ;
10889: LD_EXP 25
10893: PPUSH
10894: LD_STRING DCa-Surrender-6
10896: PPUSH
10897: CALL_OW 88
// Say ( usCommander , DCa-Surrender-7 ) ;
10901: LD_EXP 25
10905: PPUSH
10906: LD_STRING DCa-Surrender-7
10908: PPUSH
10909: CALL_OW 88
// Say ( Givi , DG-Surrender-8 ) ;
10913: LD_EXP 11
10917: PPUSH
10918: LD_STRING DG-Surrender-8
10920: PPUSH
10921: CALL_OW 88
// Say ( usCommander , DCa-Surrender-9 ) ;
10925: LD_EXP 25
10929: PPUSH
10930: LD_STRING DCa-Surrender-9
10932: PPUSH
10933: CALL_OW 88
// Say ( Heike , DH-Surrender-10 ) ;
10937: LD_EXP 10
10941: PPUSH
10942: LD_STRING DH-Surrender-10
10944: PPUSH
10945: CALL_OW 88
// Say ( usCommander , DCa-Surrender-11 ) ;
10949: LD_EXP 25
10953: PPUSH
10954: LD_STRING DCa-Surrender-11
10956: PPUSH
10957: CALL_OW 88
// Say ( Heike , DH-Surrender-12 ) ;
10961: LD_EXP 10
10965: PPUSH
10966: LD_STRING DH-Surrender-12
10968: PPUSH
10969: CALL_OW 88
// Say ( usCommander , DCa-Surrender-13 ) ;
10973: LD_EXP 25
10977: PPUSH
10978: LD_STRING DCa-Surrender-13
10980: PPUSH
10981: CALL_OW 88
// Say ( usCommander , DCa-Surrender-14 ) ;
10985: LD_EXP 25
10989: PPUSH
10990: LD_STRING DCa-Surrender-14
10992: PPUSH
10993: CALL_OW 88
// Say ( usCommander , DCa-Surrender-15 ) ;
10997: LD_EXP 25
11001: PPUSH
11002: LD_STRING DCa-Surrender-15
11004: PPUSH
11005: CALL_OW 88
// Say ( usCommander , DCa-Surrender-16 ) ;
11009: LD_EXP 25
11013: PPUSH
11014: LD_STRING DCa-Surrender-16
11016: PPUSH
11017: CALL_OW 88
// Say ( Kaia , DK-Surrender-17 ) ;
11021: LD_EXP 15
11025: PPUSH
11026: LD_STRING DK-Surrender-17
11028: PPUSH
11029: CALL_OW 88
// Say ( Olaf , DO-Surrender-18 ) ;
11033: LD_EXP 19
11037: PPUSH
11038: LD_STRING DO-Surrender-18
11040: PPUSH
11041: CALL_OW 88
// Say ( Olaf , DO-Surrender-19 ) ;
11045: LD_EXP 19
11049: PPUSH
11050: LD_STRING DO-Surrender-19
11052: PPUSH
11053: CALL_OW 88
// Say ( Kurt , DKs-Surrender-20 ) ;
11057: LD_EXP 20
11061: PPUSH
11062: LD_STRING DKs-Surrender-20
11064: PPUSH
11065: CALL_OW 88
// Say ( Kurt , DKs-Surrender-21 ) ;
11069: LD_EXP 20
11073: PPUSH
11074: LD_STRING DKs-Surrender-21
11076: PPUSH
11077: CALL_OW 88
// Say ( Markov , DMar-Surrender-22 ) ;
11081: LD_EXP 17
11085: PPUSH
11086: LD_STRING DMar-Surrender-22
11088: PPUSH
11089: CALL_OW 88
// Say ( Markov , DMar-Surrender-23 ) ;
11093: LD_EXP 17
11097: PPUSH
11098: LD_STRING DMar-Surrender-23
11100: PPUSH
11101: CALL_OW 88
// Say ( Sophia , DS-Surrender-24 ) ;
11105: LD_EXP 16
11109: PPUSH
11110: LD_STRING DS-Surrender-24
11112: PPUSH
11113: CALL_OW 88
// Say ( Aviradze , DA-Surrender-25 ) ;
11117: LD_EXP 21
11121: PPUSH
11122: LD_STRING DA-Surrender-25
11124: PPUSH
11125: CALL_OW 88
// Say ( Ibrahim , DI-Surrender-26 ) ;
11129: LD_EXP 13
11133: PPUSH
11134: LD_STRING DI-Surrender-26
11136: PPUSH
11137: CALL_OW 88
// Say ( Kamil , DKam-Surrender-27 ) ;
11141: LD_EXP 14
11145: PPUSH
11146: LD_STRING DKam-Surrender-27
11148: PPUSH
11149: CALL_OW 88
// Say ( Givi , DG-Surrender-28 ) ;
11153: LD_EXP 11
11157: PPUSH
11158: LD_STRING DG-Surrender-28
11160: PPUSH
11161: CALL_OW 88
// Say ( Givi , DG-Surrender-29 ) ;
11165: LD_EXP 11
11169: PPUSH
11170: LD_STRING DG-Surrender-29
11172: PPUSH
11173: CALL_OW 88
// Say ( Givi , DG-Surrender-30 ) ;
11177: LD_EXP 11
11181: PPUSH
11182: LD_STRING DG-Surrender-30
11184: PPUSH
11185: CALL_OW 88
// PrepareRussianFirstWaveAttack ;
11189: CALL 12221 0 0
// ComMoveXY ( FilterAllUnits ( [ f_side , 3 ] ) , 176 , 123 ) ;
11193: LD_INT 22
11195: PUSH
11196: LD_INT 3
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: PPUSH
11203: CALL_OW 69
11207: PPUSH
11208: LD_INT 176
11210: PPUSH
11211: LD_INT 123
11213: PPUSH
11214: CALL_OW 111
// if not IsEnvironment ( 190 , 150 ) then
11218: LD_INT 190
11220: PPUSH
11221: LD_INT 150
11223: PPUSH
11224: CALL_OW 351
11228: NOT
11229: IFFALSE 11248
// PlaceSeeing ( 190 , 150 , 2 , - 8 ) ;
11231: LD_INT 190
11233: PPUSH
11234: LD_INT 150
11236: PPUSH
11237: LD_INT 2
11239: PPUSH
11240: LD_INT 8
11242: NEG
11243: PPUSH
11244: CALL_OW 330
// CenterOnXY ( 193 , 150 ) ;
11248: LD_INT 193
11250: PPUSH
11251: LD_INT 150
11253: PPUSH
11254: CALL_OW 84
// Say ( Markov , DMar-Surrender-31 ) ;
11258: LD_EXP 17
11262: PPUSH
11263: LD_STRING DMar-Surrender-31
11265: PPUSH
11266: CALL_OW 88
// Say ( Heike , DH-Surrender-32 ) ;
11270: LD_EXP 10
11274: PPUSH
11275: LD_STRING DH-Surrender-32
11277: PPUSH
11278: CALL_OW 88
// InGameOff ;
11282: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
11286: LD_STRING M2
11288: PPUSH
11289: CALL_OW 337
// wait ( 0 0$20 ) ;
11293: LD_INT 700
11295: PPUSH
11296: CALL_OW 67
// PrepareRussianLastWaveAttack ;
11300: CALL 12583 0 0
// russianAttack := true ;
11304: LD_ADDR_EXP 8
11308: PUSH
11309: LD_INT 1
11311: ST_TO_ADDR
// RemoveSeeing ( 190 , 150 , 2 ) ;
11312: LD_INT 190
11314: PPUSH
11315: LD_INT 150
11317: PPUSH
11318: LD_INT 2
11320: PPUSH
11321: CALL_OW 331
// end ;
11325: PPOPN 3
11327: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
11328: LD_EXP 15
11332: PPUSH
11333: CALL_OW 256
11337: PUSH
11338: LD_INT 3
11340: LESS
11341: IFFALSE 11378
11343: GO 11345
11345: DISABLE
// begin DialogueOn ;
11346: CALL_OW 6
// ForceSay ( Kaia , DK-Dead-1 ) ;
11350: LD_EXP 15
11354: PPUSH
11355: LD_STRING DK-Dead-1
11357: PPUSH
11358: CALL_OW 91
// ForceSay ( Kaia , DK-Dead-2 ) ;
11362: LD_EXP 15
11366: PPUSH
11367: LD_STRING DK-Dead-2
11369: PPUSH
11370: CALL_OW 91
// DialogueOff ;
11374: CALL_OW 7
// end ;
11378: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , ar_rocket_launcher ] ] ) do
11379: LD_INT 22
11381: PUSH
11382: LD_INT 2
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: PUSH
11389: LD_INT 21
11391: PUSH
11392: LD_INT 28
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: PPUSH
11403: CALL_OW 69
11407: IFFALSE 11420
11409: GO 11411
11411: DISABLE
// hasRockets := true ;
11412: LD_ADDR_EXP 9
11416: PUSH
11417: LD_INT 1
11419: ST_TO_ADDR
11420: END
// every 0 0$1 trigger russianAttack and not FilterAllUnits ( [ f_side , 3 ] ) do
11421: LD_EXP 8
11425: PUSH
11426: LD_INT 22
11428: PUSH
11429: LD_INT 3
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: PPUSH
11436: CALL_OW 69
11440: NOT
11441: AND
11442: IFFALSE 12052
11444: GO 11446
11446: DISABLE
// begin DialogueOn ;
11447: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
11451: LD_EXP 10
11455: PPUSH
11456: CALL_OW 87
// Say ( Heike , DH-End-1 ) ;
11460: LD_EXP 10
11464: PPUSH
11465: LD_STRING DH-End-1
11467: PPUSH
11468: CALL_OW 88
// SayRadio ( Shariff , DShar-End-2 ) ;
11472: LD_EXP 18
11476: PPUSH
11477: LD_STRING DShar-End-2
11479: PPUSH
11480: CALL_OW 94
// Say ( Kaia , DK-End-3 ) ;
11484: LD_EXP 15
11488: PPUSH
11489: LD_STRING DK-End-3
11491: PPUSH
11492: CALL_OW 88
// Say ( Heike , DH-End-4 ) ;
11496: LD_EXP 10
11500: PPUSH
11501: LD_STRING DH-End-4
11503: PPUSH
11504: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
11508: LD_EXP 18
11512: PPUSH
11513: LD_STRING DShar-End-5
11515: PPUSH
11516: CALL_OW 94
// if IsOk ( Markov ) then
11520: LD_EXP 17
11524: PPUSH
11525: CALL_OW 302
11529: IFFALSE 11543
// Say ( Kaia , DK-End-6 ) ;
11531: LD_EXP 15
11535: PPUSH
11536: LD_STRING DK-End-6
11538: PPUSH
11539: CALL_OW 88
// Say ( Kaia , DK-End-7 ) ;
11543: LD_EXP 15
11547: PPUSH
11548: LD_STRING DK-End-7
11550: PPUSH
11551: CALL_OW 88
// if IsOk ( Kaia ) then
11555: LD_EXP 15
11559: PPUSH
11560: CALL_OW 302
11564: IFFALSE 11602
// begin Say ( Givi , DG-End-8 ) ;
11566: LD_EXP 11
11570: PPUSH
11571: LD_STRING DG-End-8
11573: PPUSH
11574: CALL_OW 88
// Say ( Givi , DG-End-9 ) ;
11578: LD_EXP 11
11582: PPUSH
11583: LD_STRING DG-End-9
11585: PPUSH
11586: CALL_OW 88
// Say ( Heike , DH-End-10 ) ;
11590: LD_EXP 10
11594: PPUSH
11595: LD_STRING DH-End-10
11597: PPUSH
11598: CALL_OW 88
// end ; Say ( Heike , DH-End-11 ) ;
11602: LD_EXP 10
11606: PPUSH
11607: LD_STRING DH-End-11
11609: PPUSH
11610: CALL_OW 88
// if GetTech ( tech_MatDet , 2 ) = state_researched then
11614: LD_INT 7
11616: PPUSH
11617: LD_INT 2
11619: PPUSH
11620: CALL_OW 321
11624: PUSH
11625: LD_INT 2
11627: EQUAL
11628: IFFALSE 11642
// AddMedal ( med1 , 1 ) else
11630: LD_STRING med1
11632: PPUSH
11633: LD_INT 1
11635: PPUSH
11636: CALL_OW 101
11640: GO 11653
// AddMedal ( med1 , - 1 ) ;
11642: LD_STRING med1
11644: PPUSH
11645: LD_INT 1
11647: NEG
11648: PPUSH
11649: CALL_OW 101
// if hasRockets then
11653: LD_EXP 9
11657: IFFALSE 11671
// AddMedal ( med2 , 1 ) else
11659: LD_STRING med2
11661: PPUSH
11662: LD_INT 1
11664: PPUSH
11665: CALL_OW 101
11669: GO 11682
// AddMedal ( med2 , - 1 ) ;
11671: LD_STRING med2
11673: PPUSH
11674: LD_INT 1
11676: NEG
11677: PPUSH
11678: CALL_OW 101
// if tick < [ 50 50$00 , 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
11682: LD_OWVAR 1
11686: PUSH
11687: LD_INT 105000
11689: PUSH
11690: LD_INT 94500
11692: PUSH
11693: LD_INT 84000
11695: PUSH
11696: LD_INT 73500
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: PUSH
11705: LD_OWVAR 67
11709: ARRAY
11710: LESS
11711: IFFALSE 11725
// AddMedal ( med3 , 1 ) else
11713: LD_STRING med3
11715: PPUSH
11716: LD_INT 1
11718: PPUSH
11719: CALL_OW 101
11723: GO 11736
// AddMedal ( med3 , - 1 ) ;
11725: LD_STRING med3
11727: PPUSH
11728: LD_INT 1
11730: NEG
11731: PPUSH
11732: CALL_OW 101
// GiveMedals ( MAIN ) ;
11736: LD_STRING MAIN
11738: PPUSH
11739: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
11743: LD_INT 22
11745: PUSH
11746: LD_INT 2
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: PUSH
11753: LD_INT 23
11755: PUSH
11756: LD_INT 2
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: PUSH
11763: LD_INT 21
11765: PUSH
11766: LD_INT 1
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: LIST
11777: PPUSH
11778: CALL_OW 69
11782: PPUSH
11783: CALL_OW 43
// SaveCharacters ( usCommander , 07_UsCommander ) ;
11787: LD_EXP 25
11791: PPUSH
11792: LD_STRING 07_UsCommander
11794: PPUSH
11795: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff usCommander , 07_Americans ) ;
11799: LD_INT 22
11801: PUSH
11802: LD_INT 1
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: PUSH
11809: LD_INT 23
11811: PUSH
11812: LD_INT 1
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: PUSH
11819: LD_INT 21
11821: PUSH
11822: LD_INT 1
11824: PUSH
11825: EMPTY
11826: LIST
11827: LIST
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: LIST
11833: PPUSH
11834: CALL_OW 69
11838: PUSH
11839: LD_EXP 25
11843: DIFF
11844: PPUSH
11845: LD_STRING 07_Americans
11847: PPUSH
11848: CALL_OW 38
// SaveCharacters ( Heike , 07_Heike ) ;
11852: LD_EXP 10
11856: PPUSH
11857: LD_STRING 07_Heike
11859: PPUSH
11860: CALL_OW 38
// if Aviradze then
11864: LD_EXP 21
11868: IFFALSE 11882
// SaveCharacters ( Aviradze , 07_Aviradze ) ;
11870: LD_EXP 21
11874: PPUSH
11875: LD_STRING 07_Aviradze
11877: PPUSH
11878: CALL_OW 38
// if Ibrahim then
11882: LD_EXP 13
11886: IFFALSE 11900
// SaveCharacters ( Ibrahim , 07_Ibrahim ) ;
11888: LD_EXP 13
11892: PPUSH
11893: LD_STRING 07_Ibrahim
11895: PPUSH
11896: CALL_OW 38
// if Kamil then
11900: LD_EXP 14
11904: IFFALSE 11918
// SaveCharacters ( Kamil , 07_Kamil ) ;
11906: LD_EXP 14
11910: PPUSH
11911: LD_STRING 07_Kamil
11913: PPUSH
11914: CALL_OW 38
// if Sophia then
11918: LD_EXP 16
11922: IFFALSE 11936
// SaveCharacters ( Sophia , 07_Sophia ) ;
11924: LD_EXP 16
11928: PPUSH
11929: LD_STRING 07_Sophia
11931: PPUSH
11932: CALL_OW 38
// if Kaia then
11936: LD_EXP 15
11940: IFFALSE 11954
// SaveCharacters ( Kaia , 07_Kaia ) ;
11942: LD_EXP 15
11946: PPUSH
11947: LD_STRING 07_Kaia
11949: PPUSH
11950: CALL_OW 38
// if Givi then
11954: LD_EXP 11
11958: IFFALSE 11972
// SaveCharacters ( Givi , 07_Givi ) ;
11960: LD_EXP 11
11964: PPUSH
11965: LD_STRING 07_Givi
11967: PPUSH
11968: CALL_OW 38
// if Mike then
11972: LD_EXP 12
11976: IFFALSE 11990
// SaveCharacters ( Mike , 07_Mike ) ;
11978: LD_EXP 12
11982: PPUSH
11983: LD_STRING 07_Mike
11985: PPUSH
11986: CALL_OW 38
// if Markov then
11990: LD_EXP 17
11994: IFFALSE 12008
// SaveCharacters ( Markov , 07_Markov ) ;
11996: LD_EXP 17
12000: PPUSH
12001: LD_STRING 07_Markov
12003: PPUSH
12004: CALL_OW 38
// if Kurt then
12008: LD_EXP 20
12012: IFFALSE 12026
// SaveCharacters ( Kurt , 07_Kurt ) ;
12014: LD_EXP 20
12018: PPUSH
12019: LD_STRING 07_Kurt
12021: PPUSH
12022: CALL_OW 38
// if heikeSecondSquad then
12026: LD_EXP 22
12030: IFFALSE 12044
// SaveCharacters ( heikeSecondSquad , 07_others ) ;
12032: LD_EXP 22
12036: PPUSH
12037: LD_STRING 07_others
12039: PPUSH
12040: CALL_OW 38
// YouWin ;
12044: CALL_OW 103
// DialogueOff ;
12048: CALL_OW 7
// end ; end_of_file
12052: END
// every 0 0$40 + 0 0$40 trigger GetResourceArea ( cratesRiverArea , mat_cans ) < [ 500 , 450 , 400 , 380 ] [ Difficulty ] do
12053: LD_INT 7
12055: PPUSH
12056: LD_INT 1
12058: PPUSH
12059: CALL_OW 287
12063: PUSH
12064: LD_INT 500
12066: PUSH
12067: LD_INT 450
12069: PUSH
12070: LD_INT 400
12072: PUSH
12073: LD_INT 380
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: PUSH
12082: LD_OWVAR 67
12086: ARRAY
12087: LESS
12088: IFFALSE 12115
12090: GO 12092
12092: DISABLE
// begin enable ;
12093: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesRiverArea , true ) ;
12094: LD_INT 1
12096: PPUSH
12097: LD_INT 5
12099: PPUSH
12100: CALL_OW 12
12104: PPUSH
12105: LD_INT 7
12107: PPUSH
12108: LD_INT 1
12110: PPUSH
12111: CALL_OW 55
// end ;
12115: END
// every 2 2$00 trigger GetResourceArea ( cratesForestArea , mat_cans ) < [ 300 , 250 , 200 , 180 ] [ Difficulty ] do
12116: LD_INT 8
12118: PPUSH
12119: LD_INT 1
12121: PPUSH
12122: CALL_OW 287
12126: PUSH
12127: LD_INT 300
12129: PUSH
12130: LD_INT 250
12132: PUSH
12133: LD_INT 200
12135: PUSH
12136: LD_INT 180
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: PUSH
12145: LD_OWVAR 67
12149: ARRAY
12150: LESS
12151: IFFALSE 12178
12153: GO 12155
12155: DISABLE
// begin enable ;
12156: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesForestArea , true ) ;
12157: LD_INT 1
12159: PPUSH
12160: LD_INT 5
12162: PPUSH
12163: CALL_OW 12
12167: PPUSH
12168: LD_INT 8
12170: PPUSH
12171: LD_INT 1
12173: PPUSH
12174: CALL_OW 55
// end ;
12178: END
// every 0 0$30 trigger tick < 4 4$10 do
12179: LD_OWVAR 1
12183: PUSH
12184: LD_INT 8750
12186: LESS
12187: IFFALSE 12220
12189: GO 12191
12191: DISABLE
// begin enable ;
12192: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 130 , 18 , 12 , true ) ;
12193: LD_INT 1
12195: PPUSH
12196: LD_INT 5
12198: PPUSH
12199: CALL_OW 12
12203: PPUSH
12204: LD_INT 130
12206: PPUSH
12207: LD_INT 18
12209: PPUSH
12210: LD_INT 12
12212: PPUSH
12213: LD_INT 1
12215: PPUSH
12216: CALL_OW 56
// end ; end_of_file
12220: END
// export function PrepareRussianFirstWaveAttack ; var i , tmp , un , veh ; begin
12221: LD_INT 0
12223: PPUSH
12224: PPUSH
12225: PPUSH
12226: PPUSH
12227: PPUSH
// uc_side := 3 ;
12228: LD_ADDR_OWVAR 20
12232: PUSH
12233: LD_INT 3
12235: ST_TO_ADDR
// uc_nation := 3 ;
12236: LD_ADDR_OWVAR 21
12240: PUSH
12241: LD_INT 3
12243: ST_TO_ADDR
// tmp := [ [ 184 , 144 , 5 ] , [ 191 , 147 , 5 ] , [ 202 , 151 , 4 ] , [ 210 , 152 , 4 ] ] ;
12244: LD_ADDR_VAR 0 3
12248: PUSH
12249: LD_INT 184
12251: PUSH
12252: LD_INT 144
12254: PUSH
12255: LD_INT 5
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: LIST
12262: PUSH
12263: LD_INT 191
12265: PUSH
12266: LD_INT 147
12268: PUSH
12269: LD_INT 5
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: LIST
12276: PUSH
12277: LD_INT 202
12279: PUSH
12280: LD_INT 151
12282: PUSH
12283: LD_INT 4
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: LIST
12290: PUSH
12291: LD_INT 210
12293: PUSH
12294: LD_INT 152
12296: PUSH
12297: LD_INT 4
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: LIST
12304: PUSH
12305: EMPTY
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: ST_TO_ADDR
// for i := 1 to 4 do
12311: LD_ADDR_VAR 0 2
12315: PUSH
12316: DOUBLE
12317: LD_INT 1
12319: DEC
12320: ST_TO_ADDR
12321: LD_INT 4
12323: PUSH
12324: FOR_TO
12325: IFFALSE 12494
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_gun ] [ i mod 3 + 1 ] , 40 ) ;
12327: LD_INT 24
12329: PPUSH
12330: LD_INT 1
12332: PPUSH
12333: LD_INT 1
12335: PPUSH
12336: LD_INT 43
12338: PUSH
12339: LD_INT 44
12341: PUSH
12342: LD_INT 46
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: LIST
12349: PUSH
12350: LD_VAR 0 2
12354: PUSH
12355: LD_INT 3
12357: MOD
12358: PUSH
12359: LD_INT 1
12361: PLUS
12362: ARRAY
12363: PPUSH
12364: LD_INT 40
12366: PPUSH
12367: CALL 18492 0 5
// veh := CreateVehicle ;
12371: LD_ADDR_VAR 0 5
12375: PUSH
12376: CALL_OW 45
12380: ST_TO_ADDR
// SetDir ( veh , tmp [ i ] [ 3 ] ) ;
12381: LD_VAR 0 5
12385: PPUSH
12386: LD_VAR 0 3
12390: PUSH
12391: LD_VAR 0 2
12395: ARRAY
12396: PUSH
12397: LD_INT 3
12399: ARRAY
12400: PPUSH
12401: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
12405: LD_VAR 0 5
12409: PPUSH
12410: LD_VAR 0 3
12414: PUSH
12415: LD_VAR 0 2
12419: ARRAY
12420: PUSH
12421: LD_INT 1
12423: ARRAY
12424: PPUSH
12425: LD_VAR 0 3
12429: PUSH
12430: LD_VAR 0 2
12434: ARRAY
12435: PUSH
12436: LD_INT 2
12438: ARRAY
12439: PPUSH
12440: LD_INT 0
12442: PPUSH
12443: CALL_OW 48
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
12447: LD_INT 0
12449: PPUSH
12450: LD_INT 6
12452: PUSH
12453: LD_INT 7
12455: PUSH
12456: LD_INT 8
12458: PUSH
12459: LD_INT 8
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: PUSH
12468: LD_OWVAR 67
12472: ARRAY
12473: PPUSH
12474: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12478: CALL_OW 44
12482: PPUSH
12483: LD_VAR 0 5
12487: PPUSH
12488: CALL_OW 52
// end ;
12492: GO 12324
12494: POP
12495: POP
// for i := 1 to 4 do
12496: LD_ADDR_VAR 0 2
12500: PUSH
12501: DOUBLE
12502: LD_INT 1
12504: DEC
12505: ST_TO_ADDR
12506: LD_INT 4
12508: PUSH
12509: FOR_TO
12510: IFFALSE 12576
// begin PrepareSoldier ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
12512: LD_INT 0
12514: PPUSH
12515: LD_INT 6
12517: PUSH
12518: LD_INT 7
12520: PUSH
12521: LD_INT 8
12523: PUSH
12524: LD_INT 8
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: PUSH
12533: LD_OWVAR 67
12537: ARRAY
12538: PPUSH
12539: CALL_OW 381
// un := CreateHuman ;
12543: LD_ADDR_VAR 0 4
12547: PUSH
12548: CALL_OW 44
12552: ST_TO_ADDR
// PlaceUnitXYR ( un , 185 , 145 , 6 , false ) ;
12553: LD_VAR 0 4
12557: PPUSH
12558: LD_INT 185
12560: PPUSH
12561: LD_INT 145
12563: PPUSH
12564: LD_INT 6
12566: PPUSH
12567: LD_INT 0
12569: PPUSH
12570: CALL_OW 50
// end ;
12574: GO 12509
12576: POP
12577: POP
// end ;
12578: LD_VAR 0 1
12582: RET
// export function PrepareRussianLastWaveAttack ; var i , veh ; begin
12583: LD_INT 0
12585: PPUSH
12586: PPUSH
12587: PPUSH
// uc_side := 3 ;
12588: LD_ADDR_OWVAR 20
12592: PUSH
12593: LD_INT 3
12595: ST_TO_ADDR
// if Difficulty > 1 then
12596: LD_OWVAR 67
12600: PUSH
12601: LD_INT 1
12603: GREATER
12604: IFFALSE 12766
// begin uc_nation := 0 ;
12606: LD_ADDR_OWVAR 21
12610: PUSH
12611: LD_INT 0
12613: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty + 1 ] do
12614: LD_ADDR_VAR 0 2
12618: PUSH
12619: DOUBLE
12620: LD_INT 1
12622: DEC
12623: ST_TO_ADDR
12624: LD_INT 4
12626: PUSH
12627: LD_INT 5
12629: PUSH
12630: LD_INT 6
12632: PUSH
12633: EMPTY
12634: LIST
12635: LIST
12636: LIST
12637: PUSH
12638: LD_OWVAR 67
12642: PUSH
12643: LD_INT 1
12645: PLUS
12646: ARRAY
12647: PUSH
12648: FOR_TO
12649: IFFALSE 12764
// begin hc_class := class_apeman_soldier ;
12651: LD_ADDR_OWVAR 28
12655: PUSH
12656: LD_INT 15
12658: ST_TO_ADDR
// hc_gallery :=  ;
12659: LD_ADDR_OWVAR 33
12663: PUSH
12664: LD_STRING 
12666: ST_TO_ADDR
// hc_name := [ Treci , Ivan , Yaromir , Nadzieia , Krasna , Piaty ] [ rand ( 1 , 6 ) ] ;
12667: LD_ADDR_OWVAR 26
12671: PUSH
12672: LD_STRING Treci
12674: PUSH
12675: LD_STRING Ivan
12677: PUSH
12678: LD_STRING Yaromir
12680: PUSH
12681: LD_STRING Nadzieia
12683: PUSH
12684: LD_STRING Krasna
12686: PUSH
12687: LD_STRING Piaty
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: PUSH
12698: LD_INT 1
12700: PPUSH
12701: LD_INT 6
12703: PPUSH
12704: CALL_OW 12
12708: ARRAY
12709: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 0 , 0 ] ;
12710: LD_ADDR_OWVAR 31
12714: PUSH
12715: LD_INT 5
12717: PUSH
12718: LD_INT 0
12720: PUSH
12721: LD_INT 0
12723: PUSH
12724: LD_INT 0
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: ST_TO_ADDR
// hc_sex := sex_male ;
12733: LD_ADDR_OWVAR 27
12737: PUSH
12738: LD_INT 1
12740: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 178 , 148 , 6 , false ) ;
12741: CALL_OW 44
12745: PPUSH
12746: LD_INT 178
12748: PPUSH
12749: LD_INT 148
12751: PPUSH
12752: LD_INT 6
12754: PPUSH
12755: LD_INT 0
12757: PPUSH
12758: CALL_OW 50
// end ;
12762: GO 12648
12764: POP
12765: POP
// end ; for i := 1 to [ 4 , 6 , 7 , 9 ] [ Difficulty ] do
12766: LD_ADDR_VAR 0 2
12770: PUSH
12771: DOUBLE
12772: LD_INT 1
12774: DEC
12775: ST_TO_ADDR
12776: LD_INT 4
12778: PUSH
12779: LD_INT 6
12781: PUSH
12782: LD_INT 7
12784: PUSH
12785: LD_INT 9
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: PUSH
12794: LD_OWVAR 67
12798: ARRAY
12799: PUSH
12800: FOR_TO
12801: IFFALSE 12961
// begin uc_nation := 3 ;
12803: LD_ADDR_OWVAR 21
12807: PUSH
12808: LD_INT 3
12810: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gatling_gun , ru_gun ] [ i mod 3 + 1 ] , 44 ) ;
12811: LD_INT 22
12813: PPUSH
12814: LD_INT 1
12816: PPUSH
12817: LD_INT 1
12819: PPUSH
12820: LD_INT 45
12822: PUSH
12823: LD_INT 43
12825: PUSH
12826: LD_INT 44
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: LIST
12833: PUSH
12834: LD_VAR 0 2
12838: PUSH
12839: LD_INT 3
12841: MOD
12842: PUSH
12843: LD_INT 1
12845: PLUS
12846: ARRAY
12847: PPUSH
12848: LD_INT 44
12850: PPUSH
12851: CALL 18492 0 5
// veh := CreateVehicle ;
12855: LD_ADDR_VAR 0 3
12859: PUSH
12860: CALL_OW 45
12864: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
12865: LD_VAR 0 3
12869: PPUSH
12870: LD_INT 4
12872: PPUSH
12873: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
12877: LD_VAR 0 3
12881: PPUSH
12882: LD_INT 1
12884: PPUSH
12885: LD_INT 0
12887: PPUSH
12888: CALL_OW 49
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
12892: LD_INT 0
12894: PPUSH
12895: LD_INT 6
12897: PUSH
12898: LD_INT 7
12900: PUSH
12901: LD_INT 8
12903: PUSH
12904: LD_INT 8
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: PUSH
12913: LD_OWVAR 67
12917: ARRAY
12918: PPUSH
12919: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12923: CALL_OW 44
12927: PPUSH
12928: LD_VAR 0 3
12932: PPUSH
12933: CALL_OW 52
// ComMoveXY ( veh , 178 , 137 ) ;
12937: LD_VAR 0 3
12941: PPUSH
12942: LD_INT 178
12944: PPUSH
12945: LD_INT 137
12947: PPUSH
12948: CALL_OW 111
// wait ( 0 0$2 ) ;
12952: LD_INT 70
12954: PPUSH
12955: CALL_OW 67
// end ;
12959: GO 12800
12961: POP
12962: POP
// end ;
12963: LD_VAR 0 1
12967: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i , tmp ;
12968: LD_INT 22
12970: PUSH
12971: LD_INT 3
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: PUSH
12978: LD_INT 32
12980: PUSH
12981: LD_INT 1
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: PPUSH
12992: CALL_OW 69
12996: IFFALSE 13084
12998: GO 13000
13000: DISABLE
13001: LD_INT 0
13003: PPUSH
13004: PPUSH
// begin enable ;
13005: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) ;
13006: LD_ADDR_VAR 0 2
13010: PUSH
13011: LD_INT 22
13013: PUSH
13014: LD_INT 3
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: PUSH
13021: LD_INT 32
13023: PUSH
13024: LD_INT 1
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: PPUSH
13035: CALL_OW 69
13039: ST_TO_ADDR
// for i in tmp do
13040: LD_ADDR_VAR 0 1
13044: PUSH
13045: LD_VAR 0 2
13049: PUSH
13050: FOR_IN
13051: IFFALSE 13082
// if GetFuel ( i ) < 3 then
13053: LD_VAR 0 1
13057: PPUSH
13058: CALL_OW 261
13062: PUSH
13063: LD_INT 3
13065: LESS
13066: IFFALSE 13080
// SetFuel ( i , 3 ) ;
13068: LD_VAR 0 1
13072: PPUSH
13073: LD_INT 3
13075: PPUSH
13076: CALL_OW 240
13080: GO 13050
13082: POP
13083: POP
// end ;
13084: PPOPN 2
13086: END
// every 0 0$1 trigger russianAttack and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i , mech , tmp , nearest , isInBase , isInAmericanBase , enemy ;
13087: LD_EXP 8
13091: PUSH
13092: LD_INT 22
13094: PUSH
13095: LD_INT 3
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: PUSH
13102: LD_INT 21
13104: PUSH
13105: LD_INT 1
13107: PUSH
13108: EMPTY
13109: LIST
13110: LIST
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: PPUSH
13116: CALL_OW 69
13120: AND
13121: IFFALSE 13625
13123: GO 13125
13125: DISABLE
13126: LD_INT 0
13128: PPUSH
13129: PPUSH
13130: PPUSH
13131: PPUSH
13132: PPUSH
13133: PPUSH
13134: PPUSH
// begin enable ;
13135: ENABLE
// isInBase := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_distxy , 137 , 28 , 30 ] ] ) ;
13136: LD_ADDR_VAR 0 5
13140: PUSH
13141: LD_INT 22
13143: PUSH
13144: LD_INT 2
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PUSH
13151: LD_INT 21
13153: PUSH
13154: LD_INT 1
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: PUSH
13161: LD_INT 92
13163: PUSH
13164: LD_INT 137
13166: PUSH
13167: LD_INT 28
13169: PUSH
13170: LD_INT 30
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: LIST
13183: PPUSH
13184: CALL_OW 69
13188: ST_TO_ADDR
// isInAmericanBase := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_distxy , 82 , 138 , 30 ] ] ) ;
13189: LD_ADDR_VAR 0 6
13193: PUSH
13194: LD_INT 22
13196: PUSH
13197: LD_INT 2
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: PUSH
13204: LD_INT 21
13206: PUSH
13207: LD_INT 1
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PUSH
13214: LD_INT 92
13216: PUSH
13217: LD_INT 82
13219: PUSH
13220: LD_INT 138
13222: PUSH
13223: LD_INT 30
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: LIST
13236: PPUSH
13237: CALL_OW 69
13241: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
13242: LD_ADDR_VAR 0 7
13246: PUSH
13247: LD_INT 81
13249: PUSH
13250: LD_INT 3
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: PPUSH
13257: CALL_OW 69
13261: ST_TO_ADDR
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] ] ) ;
13262: LD_ADDR_VAR 0 2
13266: PUSH
13267: LD_INT 22
13269: PUSH
13270: LD_INT 3
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: PUSH
13277: LD_INT 25
13279: PUSH
13280: LD_INT 3
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: PUSH
13287: LD_INT 3
13289: PUSH
13290: LD_INT 55
13292: PUSH
13293: EMPTY
13294: LIST
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: LIST
13304: PPUSH
13305: CALL_OW 69
13309: ST_TO_ADDR
// if mech then
13310: LD_VAR 0 2
13314: IFFALSE 13384
// for i in mech do
13316: LD_ADDR_VAR 0 1
13320: PUSH
13321: LD_VAR 0 2
13325: PUSH
13326: FOR_IN
13327: IFFALSE 13382
// begin if IsInArea ( i , escapeArea ) then
13329: LD_VAR 0 1
13333: PPUSH
13334: LD_INT 13
13336: PPUSH
13337: CALL_OW 308
13341: IFFALSE 13354
// RemoveUnit ( i ) else
13343: LD_VAR 0 1
13347: PPUSH
13348: CALL_OW 64
13352: GO 13380
// if IsOk ( i ) then
13354: LD_VAR 0 1
13358: PPUSH
13359: CALL_OW 302
13363: IFFALSE 13380
// ComMoveXY ( i , 196 , 155 ) ;
13365: LD_VAR 0 1
13369: PPUSH
13370: LD_INT 196
13372: PPUSH
13373: LD_INT 155
13375: PPUSH
13376: CALL_OW 111
// end ;
13380: GO 13326
13382: POP
13383: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_apeman_soldier ] , [ f_type , unit_vehicle ] ] , [ f_ok ] ] ) ;
13384: LD_ADDR_VAR 0 3
13388: PUSH
13389: LD_INT 22
13391: PUSH
13392: LD_INT 3
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: PUSH
13399: LD_INT 2
13401: PUSH
13402: LD_INT 25
13404: PUSH
13405: LD_INT 1
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: PUSH
13412: LD_INT 25
13414: PUSH
13415: LD_INT 15
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PUSH
13422: LD_INT 21
13424: PUSH
13425: LD_INT 2
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: PUSH
13438: LD_INT 50
13440: PUSH
13441: EMPTY
13442: LIST
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: LIST
13448: PPUSH
13449: CALL_OW 69
13453: ST_TO_ADDR
// if tmp then
13454: LD_VAR 0 3
13458: IFFALSE 13625
// for i in tmp do
13460: LD_ADDR_VAR 0 1
13464: PUSH
13465: LD_VAR 0 3
13469: PUSH
13470: FOR_IN
13471: IFFALSE 13623
// begin if isInBase then
13473: LD_VAR 0 5
13477: IFFALSE 13530
// begin nearest := NearestUnitToUnit ( isInBase , i ) ;
13479: LD_ADDR_VAR 0 4
13483: PUSH
13484: LD_VAR 0 5
13488: PPUSH
13489: LD_VAR 0 1
13493: PPUSH
13494: CALL_OW 74
13498: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( nearest ) , GetY ( nearest ) ) ;
13499: LD_VAR 0 1
13503: PPUSH
13504: LD_VAR 0 4
13508: PPUSH
13509: CALL_OW 250
13513: PPUSH
13514: LD_VAR 0 4
13518: PPUSH
13519: CALL_OW 251
13523: PPUSH
13524: CALL_OW 114
// end else
13528: GO 13621
// if isInAmericanBase then
13530: LD_VAR 0 6
13534: IFFALSE 13587
// begin nearest := NearestUnitToUnit ( isInAmericanBase , i ) ;
13536: LD_ADDR_VAR 0 4
13540: PUSH
13541: LD_VAR 0 6
13545: PPUSH
13546: LD_VAR 0 1
13550: PPUSH
13551: CALL_OW 74
13555: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( nearest ) , GetY ( nearest ) ) ;
13556: LD_VAR 0 1
13560: PPUSH
13561: LD_VAR 0 4
13565: PPUSH
13566: CALL_OW 250
13570: PPUSH
13571: LD_VAR 0 4
13575: PPUSH
13576: CALL_OW 251
13580: PPUSH
13581: CALL_OW 114
// end else
13585: GO 13621
// begin nearest := NearestUnitToUnit ( enemy , i ) ;
13587: LD_ADDR_VAR 0 4
13591: PUSH
13592: LD_VAR 0 7
13596: PPUSH
13597: LD_VAR 0 1
13601: PPUSH
13602: CALL_OW 74
13606: ST_TO_ADDR
// ComAttackUnit ( i , nearest ) ;
13607: LD_VAR 0 1
13611: PPUSH
13612: LD_VAR 0 4
13616: PPUSH
13617: CALL_OW 115
// end ; end ;
13621: GO 13470
13623: POP
13624: POP
// end ; end_of_file
13625: PPOPN 7
13627: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
13628: LD_INT 0
13630: PPUSH
13631: PPUSH
// if exist_mode then
13632: LD_VAR 0 2
13636: IFFALSE 13661
// unit := CreateCharacter ( prefix & ident ) else
13638: LD_ADDR_VAR 0 5
13642: PUSH
13643: LD_VAR 0 3
13647: PUSH
13648: LD_VAR 0 1
13652: STR
13653: PPUSH
13654: CALL_OW 34
13658: ST_TO_ADDR
13659: GO 13676
// unit := NewCharacter ( ident ) ;
13661: LD_ADDR_VAR 0 5
13665: PUSH
13666: LD_VAR 0 1
13670: PPUSH
13671: CALL_OW 25
13675: ST_TO_ADDR
// result := unit ;
13676: LD_ADDR_VAR 0 4
13680: PUSH
13681: LD_VAR 0 5
13685: ST_TO_ADDR
// end ;
13686: LD_VAR 0 4
13690: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
13691: LD_INT 0
13693: PPUSH
13694: PPUSH
// if not side or not nation then
13695: LD_VAR 0 1
13699: NOT
13700: PUSH
13701: LD_VAR 0 2
13705: NOT
13706: OR
13707: IFFALSE 13711
// exit ;
13709: GO 14479
// case nation of nation_american :
13711: LD_VAR 0 2
13715: PUSH
13716: LD_INT 1
13718: DOUBLE
13719: EQUAL
13720: IFTRUE 13724
13722: GO 13938
13724: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
13725: LD_ADDR_VAR 0 4
13729: PUSH
13730: LD_INT 35
13732: PUSH
13733: LD_INT 45
13735: PUSH
13736: LD_INT 46
13738: PUSH
13739: LD_INT 47
13741: PUSH
13742: LD_INT 82
13744: PUSH
13745: LD_INT 83
13747: PUSH
13748: LD_INT 84
13750: PUSH
13751: LD_INT 85
13753: PUSH
13754: LD_INT 86
13756: PUSH
13757: LD_INT 1
13759: PUSH
13760: LD_INT 2
13762: PUSH
13763: LD_INT 6
13765: PUSH
13766: LD_INT 15
13768: PUSH
13769: LD_INT 16
13771: PUSH
13772: LD_INT 7
13774: PUSH
13775: LD_INT 12
13777: PUSH
13778: LD_INT 13
13780: PUSH
13781: LD_INT 10
13783: PUSH
13784: LD_INT 14
13786: PUSH
13787: LD_INT 20
13789: PUSH
13790: LD_INT 21
13792: PUSH
13793: LD_INT 22
13795: PUSH
13796: LD_INT 25
13798: PUSH
13799: LD_INT 32
13801: PUSH
13802: LD_INT 27
13804: PUSH
13805: LD_INT 36
13807: PUSH
13808: LD_INT 69
13810: PUSH
13811: LD_INT 39
13813: PUSH
13814: LD_INT 34
13816: PUSH
13817: LD_INT 40
13819: PUSH
13820: LD_INT 48
13822: PUSH
13823: LD_INT 49
13825: PUSH
13826: LD_INT 50
13828: PUSH
13829: LD_INT 51
13831: PUSH
13832: LD_INT 52
13834: PUSH
13835: LD_INT 53
13837: PUSH
13838: LD_INT 54
13840: PUSH
13841: LD_INT 55
13843: PUSH
13844: LD_INT 56
13846: PUSH
13847: LD_INT 57
13849: PUSH
13850: LD_INT 58
13852: PUSH
13853: LD_INT 59
13855: PUSH
13856: LD_INT 60
13858: PUSH
13859: LD_INT 61
13861: PUSH
13862: LD_INT 62
13864: PUSH
13865: LD_INT 80
13867: PUSH
13868: LD_INT 82
13870: PUSH
13871: LD_INT 83
13873: PUSH
13874: LD_INT 84
13876: PUSH
13877: LD_INT 85
13879: PUSH
13880: LD_INT 86
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: ST_TO_ADDR
13936: GO 14403
13938: LD_INT 2
13940: DOUBLE
13941: EQUAL
13942: IFTRUE 13946
13944: GO 14172
13946: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
13947: LD_ADDR_VAR 0 4
13951: PUSH
13952: LD_INT 35
13954: PUSH
13955: LD_INT 45
13957: PUSH
13958: LD_INT 46
13960: PUSH
13961: LD_INT 47
13963: PUSH
13964: LD_INT 82
13966: PUSH
13967: LD_INT 83
13969: PUSH
13970: LD_INT 84
13972: PUSH
13973: LD_INT 85
13975: PUSH
13976: LD_INT 87
13978: PUSH
13979: LD_INT 70
13981: PUSH
13982: LD_INT 1
13984: PUSH
13985: LD_INT 11
13987: PUSH
13988: LD_INT 3
13990: PUSH
13991: LD_INT 4
13993: PUSH
13994: LD_INT 5
13996: PUSH
13997: LD_INT 6
13999: PUSH
14000: LD_INT 15
14002: PUSH
14003: LD_INT 18
14005: PUSH
14006: LD_INT 7
14008: PUSH
14009: LD_INT 17
14011: PUSH
14012: LD_INT 8
14014: PUSH
14015: LD_INT 20
14017: PUSH
14018: LD_INT 21
14020: PUSH
14021: LD_INT 22
14023: PUSH
14024: LD_INT 72
14026: PUSH
14027: LD_INT 26
14029: PUSH
14030: LD_INT 69
14032: PUSH
14033: LD_INT 39
14035: PUSH
14036: LD_INT 40
14038: PUSH
14039: LD_INT 41
14041: PUSH
14042: LD_INT 42
14044: PUSH
14045: LD_INT 43
14047: PUSH
14048: LD_INT 48
14050: PUSH
14051: LD_INT 49
14053: PUSH
14054: LD_INT 50
14056: PUSH
14057: LD_INT 51
14059: PUSH
14060: LD_INT 52
14062: PUSH
14063: LD_INT 53
14065: PUSH
14066: LD_INT 54
14068: PUSH
14069: LD_INT 55
14071: PUSH
14072: LD_INT 56
14074: PUSH
14075: LD_INT 60
14077: PUSH
14078: LD_INT 61
14080: PUSH
14081: LD_INT 62
14083: PUSH
14084: LD_INT 66
14086: PUSH
14087: LD_INT 67
14089: PUSH
14090: LD_INT 68
14092: PUSH
14093: LD_INT 81
14095: PUSH
14096: LD_INT 82
14098: PUSH
14099: LD_INT 83
14101: PUSH
14102: LD_INT 84
14104: PUSH
14105: LD_INT 85
14107: PUSH
14108: LD_INT 87
14110: PUSH
14111: LD_INT 88
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: ST_TO_ADDR
14170: GO 14403
14172: LD_INT 3
14174: DOUBLE
14175: EQUAL
14176: IFTRUE 14180
14178: GO 14402
14180: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
14181: LD_ADDR_VAR 0 4
14185: PUSH
14186: LD_INT 46
14188: PUSH
14189: LD_INT 47
14191: PUSH
14192: LD_INT 1
14194: PUSH
14195: LD_INT 2
14197: PUSH
14198: LD_INT 82
14200: PUSH
14201: LD_INT 83
14203: PUSH
14204: LD_INT 84
14206: PUSH
14207: LD_INT 85
14209: PUSH
14210: LD_INT 86
14212: PUSH
14213: LD_INT 11
14215: PUSH
14216: LD_INT 9
14218: PUSH
14219: LD_INT 20
14221: PUSH
14222: LD_INT 19
14224: PUSH
14225: LD_INT 21
14227: PUSH
14228: LD_INT 24
14230: PUSH
14231: LD_INT 22
14233: PUSH
14234: LD_INT 25
14236: PUSH
14237: LD_INT 28
14239: PUSH
14240: LD_INT 29
14242: PUSH
14243: LD_INT 30
14245: PUSH
14246: LD_INT 31
14248: PUSH
14249: LD_INT 37
14251: PUSH
14252: LD_INT 38
14254: PUSH
14255: LD_INT 32
14257: PUSH
14258: LD_INT 27
14260: PUSH
14261: LD_INT 33
14263: PUSH
14264: LD_INT 69
14266: PUSH
14267: LD_INT 39
14269: PUSH
14270: LD_INT 34
14272: PUSH
14273: LD_INT 40
14275: PUSH
14276: LD_INT 71
14278: PUSH
14279: LD_INT 23
14281: PUSH
14282: LD_INT 44
14284: PUSH
14285: LD_INT 48
14287: PUSH
14288: LD_INT 49
14290: PUSH
14291: LD_INT 50
14293: PUSH
14294: LD_INT 51
14296: PUSH
14297: LD_INT 52
14299: PUSH
14300: LD_INT 53
14302: PUSH
14303: LD_INT 54
14305: PUSH
14306: LD_INT 55
14308: PUSH
14309: LD_INT 56
14311: PUSH
14312: LD_INT 57
14314: PUSH
14315: LD_INT 58
14317: PUSH
14318: LD_INT 59
14320: PUSH
14321: LD_INT 63
14323: PUSH
14324: LD_INT 64
14326: PUSH
14327: LD_INT 65
14329: PUSH
14330: LD_INT 82
14332: PUSH
14333: LD_INT 83
14335: PUSH
14336: LD_INT 84
14338: PUSH
14339: LD_INT 85
14341: PUSH
14342: LD_INT 86
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: ST_TO_ADDR
14400: GO 14403
14402: POP
// if state > - 1 and state < 3 then
14403: LD_VAR 0 3
14407: PUSH
14408: LD_INT 1
14410: NEG
14411: GREATER
14412: PUSH
14413: LD_VAR 0 3
14417: PUSH
14418: LD_INT 3
14420: LESS
14421: AND
14422: IFFALSE 14479
// for i in result do
14424: LD_ADDR_VAR 0 5
14428: PUSH
14429: LD_VAR 0 4
14433: PUSH
14434: FOR_IN
14435: IFFALSE 14477
// if GetTech ( i , side ) <> state then
14437: LD_VAR 0 5
14441: PPUSH
14442: LD_VAR 0 1
14446: PPUSH
14447: CALL_OW 321
14451: PUSH
14452: LD_VAR 0 3
14456: NONEQUAL
14457: IFFALSE 14475
// result := result diff i ;
14459: LD_ADDR_VAR 0 4
14463: PUSH
14464: LD_VAR 0 4
14468: PUSH
14469: LD_VAR 0 5
14473: DIFF
14474: ST_TO_ADDR
14475: GO 14434
14477: POP
14478: POP
// end ;
14479: LD_VAR 0 4
14483: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
14484: LD_INT 0
14486: PPUSH
14487: PPUSH
14488: PPUSH
// result := true ;
14489: LD_ADDR_VAR 0 3
14493: PUSH
14494: LD_INT 1
14496: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
14497: LD_ADDR_VAR 0 5
14501: PUSH
14502: LD_VAR 0 2
14506: PPUSH
14507: CALL_OW 480
14511: ST_TO_ADDR
// if not tmp then
14512: LD_VAR 0 5
14516: NOT
14517: IFFALSE 14521
// exit ;
14519: GO 14570
// for i in tmp do
14521: LD_ADDR_VAR 0 4
14525: PUSH
14526: LD_VAR 0 5
14530: PUSH
14531: FOR_IN
14532: IFFALSE 14568
// if GetTech ( i , side ) <> state_researched then
14534: LD_VAR 0 4
14538: PPUSH
14539: LD_VAR 0 1
14543: PPUSH
14544: CALL_OW 321
14548: PUSH
14549: LD_INT 2
14551: NONEQUAL
14552: IFFALSE 14566
// begin result := false ;
14554: LD_ADDR_VAR 0 3
14558: PUSH
14559: LD_INT 0
14561: ST_TO_ADDR
// exit ;
14562: POP
14563: POP
14564: GO 14570
// end ;
14566: GO 14531
14568: POP
14569: POP
// end ;
14570: LD_VAR 0 3
14574: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
14575: LD_INT 0
14577: PPUSH
14578: PPUSH
14579: PPUSH
14580: PPUSH
14581: PPUSH
14582: PPUSH
14583: PPUSH
14584: PPUSH
14585: PPUSH
14586: PPUSH
14587: PPUSH
14588: PPUSH
14589: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
14590: LD_VAR 0 1
14594: NOT
14595: PUSH
14596: LD_VAR 0 1
14600: PPUSH
14601: CALL_OW 257
14605: PUSH
14606: LD_INT 9
14608: NONEQUAL
14609: OR
14610: IFFALSE 14614
// exit ;
14612: GO 15187
// side := GetSide ( unit ) ;
14614: LD_ADDR_VAR 0 9
14618: PUSH
14619: LD_VAR 0 1
14623: PPUSH
14624: CALL_OW 255
14628: ST_TO_ADDR
// tech_space := tech_spacanom ;
14629: LD_ADDR_VAR 0 12
14633: PUSH
14634: LD_INT 29
14636: ST_TO_ADDR
// tech_time := tech_taurad ;
14637: LD_ADDR_VAR 0 13
14641: PUSH
14642: LD_INT 28
14644: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
14645: LD_ADDR_VAR 0 11
14649: PUSH
14650: LD_VAR 0 1
14654: PPUSH
14655: CALL_OW 310
14659: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
14660: LD_VAR 0 11
14664: PPUSH
14665: CALL_OW 247
14669: PUSH
14670: LD_INT 2
14672: EQUAL
14673: IFFALSE 14677
// exit ;
14675: GO 15187
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14677: LD_ADDR_VAR 0 8
14681: PUSH
14682: LD_INT 81
14684: PUSH
14685: LD_VAR 0 9
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PUSH
14694: LD_INT 3
14696: PUSH
14697: LD_INT 21
14699: PUSH
14700: LD_INT 3
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PPUSH
14715: CALL_OW 69
14719: ST_TO_ADDR
// if not tmp then
14720: LD_VAR 0 8
14724: NOT
14725: IFFALSE 14729
// exit ;
14727: GO 15187
// if in_unit then
14729: LD_VAR 0 11
14733: IFFALSE 14757
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
14735: LD_ADDR_VAR 0 10
14739: PUSH
14740: LD_VAR 0 8
14744: PPUSH
14745: LD_VAR 0 11
14749: PPUSH
14750: CALL_OW 74
14754: ST_TO_ADDR
14755: GO 14777
// enemy := NearestUnitToUnit ( tmp , unit ) ;
14757: LD_ADDR_VAR 0 10
14761: PUSH
14762: LD_VAR 0 8
14766: PPUSH
14767: LD_VAR 0 1
14771: PPUSH
14772: CALL_OW 74
14776: ST_TO_ADDR
// if not enemy then
14777: LD_VAR 0 10
14781: NOT
14782: IFFALSE 14786
// exit ;
14784: GO 15187
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
14786: LD_VAR 0 11
14790: PUSH
14791: LD_VAR 0 11
14795: PPUSH
14796: LD_VAR 0 10
14800: PPUSH
14801: CALL_OW 296
14805: PUSH
14806: LD_INT 13
14808: GREATER
14809: AND
14810: PUSH
14811: LD_VAR 0 1
14815: PPUSH
14816: LD_VAR 0 10
14820: PPUSH
14821: CALL_OW 296
14825: PUSH
14826: LD_INT 12
14828: GREATER
14829: OR
14830: IFFALSE 14834
// exit ;
14832: GO 15187
// missile := [ 1 ] ;
14834: LD_ADDR_VAR 0 14
14838: PUSH
14839: LD_INT 1
14841: PUSH
14842: EMPTY
14843: LIST
14844: ST_TO_ADDR
// if Researched ( side , tech_space ) then
14845: LD_VAR 0 9
14849: PPUSH
14850: LD_VAR 0 12
14854: PPUSH
14855: CALL_OW 325
14859: IFFALSE 14888
// missile := Insert ( missile , missile + 1 , 2 ) ;
14861: LD_ADDR_VAR 0 14
14865: PUSH
14866: LD_VAR 0 14
14870: PPUSH
14871: LD_VAR 0 14
14875: PUSH
14876: LD_INT 1
14878: PLUS
14879: PPUSH
14880: LD_INT 2
14882: PPUSH
14883: CALL_OW 2
14887: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
14888: LD_VAR 0 9
14892: PPUSH
14893: LD_VAR 0 13
14897: PPUSH
14898: CALL_OW 325
14902: PUSH
14903: LD_VAR 0 10
14907: PPUSH
14908: CALL_OW 255
14912: PPUSH
14913: LD_VAR 0 13
14917: PPUSH
14918: CALL_OW 325
14922: NOT
14923: AND
14924: IFFALSE 14953
// missile := Insert ( missile , missile + 1 , 3 ) ;
14926: LD_ADDR_VAR 0 14
14930: PUSH
14931: LD_VAR 0 14
14935: PPUSH
14936: LD_VAR 0 14
14940: PUSH
14941: LD_INT 1
14943: PLUS
14944: PPUSH
14945: LD_INT 3
14947: PPUSH
14948: CALL_OW 2
14952: ST_TO_ADDR
// if missile < 2 then
14953: LD_VAR 0 14
14957: PUSH
14958: LD_INT 2
14960: LESS
14961: IFFALSE 14965
// exit ;
14963: GO 15187
// x := GetX ( enemy ) ;
14965: LD_ADDR_VAR 0 4
14969: PUSH
14970: LD_VAR 0 10
14974: PPUSH
14975: CALL_OW 250
14979: ST_TO_ADDR
// y := GetY ( enemy ) ;
14980: LD_ADDR_VAR 0 5
14984: PUSH
14985: LD_VAR 0 10
14989: PPUSH
14990: CALL_OW 251
14994: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
14995: LD_ADDR_VAR 0 6
14999: PUSH
15000: LD_VAR 0 4
15004: PUSH
15005: LD_INT 1
15007: NEG
15008: PPUSH
15009: LD_INT 1
15011: PPUSH
15012: CALL_OW 12
15016: PLUS
15017: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
15018: LD_ADDR_VAR 0 7
15022: PUSH
15023: LD_VAR 0 5
15027: PUSH
15028: LD_INT 1
15030: NEG
15031: PPUSH
15032: LD_INT 1
15034: PPUSH
15035: CALL_OW 12
15039: PLUS
15040: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
15041: LD_VAR 0 6
15045: PPUSH
15046: LD_VAR 0 7
15050: PPUSH
15051: CALL_OW 488
15055: NOT
15056: IFFALSE 15078
// begin _x := x ;
15058: LD_ADDR_VAR 0 6
15062: PUSH
15063: LD_VAR 0 4
15067: ST_TO_ADDR
// _y := y ;
15068: LD_ADDR_VAR 0 7
15072: PUSH
15073: LD_VAR 0 5
15077: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
15078: LD_ADDR_VAR 0 3
15082: PUSH
15083: LD_INT 1
15085: PPUSH
15086: LD_VAR 0 14
15090: PPUSH
15091: CALL_OW 12
15095: ST_TO_ADDR
// case i of 1 :
15096: LD_VAR 0 3
15100: PUSH
15101: LD_INT 1
15103: DOUBLE
15104: EQUAL
15105: IFTRUE 15109
15107: GO 15126
15109: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
15110: LD_VAR 0 1
15114: PPUSH
15115: LD_VAR 0 10
15119: PPUSH
15120: CALL_OW 115
15124: GO 15187
15126: LD_INT 2
15128: DOUBLE
15129: EQUAL
15130: IFTRUE 15134
15132: GO 15156
15134: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
15135: LD_VAR 0 1
15139: PPUSH
15140: LD_VAR 0 6
15144: PPUSH
15145: LD_VAR 0 7
15149: PPUSH
15150: CALL_OW 153
15154: GO 15187
15156: LD_INT 3
15158: DOUBLE
15159: EQUAL
15160: IFTRUE 15164
15162: GO 15186
15164: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
15165: LD_VAR 0 1
15169: PPUSH
15170: LD_VAR 0 6
15174: PPUSH
15175: LD_VAR 0 7
15179: PPUSH
15180: CALL_OW 154
15184: GO 15187
15186: POP
// end ;
15187: LD_VAR 0 2
15191: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
15192: LD_INT 0
15194: PPUSH
15195: PPUSH
15196: PPUSH
15197: PPUSH
15198: PPUSH
15199: PPUSH
// if not unit or not building then
15200: LD_VAR 0 1
15204: NOT
15205: PUSH
15206: LD_VAR 0 2
15210: NOT
15211: OR
15212: IFFALSE 15216
// exit ;
15214: GO 15374
// x := GetX ( building ) ;
15216: LD_ADDR_VAR 0 5
15220: PUSH
15221: LD_VAR 0 2
15225: PPUSH
15226: CALL_OW 250
15230: ST_TO_ADDR
// y := GetY ( building ) ;
15231: LD_ADDR_VAR 0 6
15235: PUSH
15236: LD_VAR 0 2
15240: PPUSH
15241: CALL_OW 251
15245: ST_TO_ADDR
// for i = 0 to 5 do
15246: LD_ADDR_VAR 0 4
15250: PUSH
15251: DOUBLE
15252: LD_INT 0
15254: DEC
15255: ST_TO_ADDR
15256: LD_INT 5
15258: PUSH
15259: FOR_TO
15260: IFFALSE 15372
// begin _x := ShiftX ( x , i , 3 ) ;
15262: LD_ADDR_VAR 0 7
15266: PUSH
15267: LD_VAR 0 5
15271: PPUSH
15272: LD_VAR 0 4
15276: PPUSH
15277: LD_INT 3
15279: PPUSH
15280: CALL_OW 272
15284: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
15285: LD_ADDR_VAR 0 8
15289: PUSH
15290: LD_VAR 0 6
15294: PPUSH
15295: LD_VAR 0 4
15299: PPUSH
15300: LD_INT 3
15302: PPUSH
15303: CALL_OW 273
15307: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
15308: LD_VAR 0 7
15312: PPUSH
15313: LD_VAR 0 8
15317: PPUSH
15318: CALL_OW 488
15322: NOT
15323: IFFALSE 15327
// continue ;
15325: GO 15259
// if HexInfo ( _x , _y ) = 0 then
15327: LD_VAR 0 7
15331: PPUSH
15332: LD_VAR 0 8
15336: PPUSH
15337: CALL_OW 428
15341: PUSH
15342: LD_INT 0
15344: EQUAL
15345: IFFALSE 15370
// begin ComMoveXY ( unit , _x , _y ) ;
15347: LD_VAR 0 1
15351: PPUSH
15352: LD_VAR 0 7
15356: PPUSH
15357: LD_VAR 0 8
15361: PPUSH
15362: CALL_OW 111
// exit ;
15366: POP
15367: POP
15368: GO 15374
// end ; end ;
15370: GO 15259
15372: POP
15373: POP
// end ;
15374: LD_VAR 0 3
15378: RET
// export function ScanBase ( side , base_area ) ; begin
15379: LD_INT 0
15381: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
15382: LD_ADDR_VAR 0 3
15386: PUSH
15387: LD_VAR 0 2
15391: PPUSH
15392: LD_INT 81
15394: PUSH
15395: LD_VAR 0 1
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PPUSH
15404: CALL_OW 70
15408: ST_TO_ADDR
// end ;
15409: LD_VAR 0 3
15413: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
15414: LD_INT 0
15416: PPUSH
15417: PPUSH
15418: PPUSH
15419: PPUSH
// result := false ;
15420: LD_ADDR_VAR 0 2
15424: PUSH
15425: LD_INT 0
15427: ST_TO_ADDR
// side := GetSide ( unit ) ;
15428: LD_ADDR_VAR 0 3
15432: PUSH
15433: LD_VAR 0 1
15437: PPUSH
15438: CALL_OW 255
15442: ST_TO_ADDR
// nat := GetNation ( unit ) ;
15443: LD_ADDR_VAR 0 4
15447: PUSH
15448: LD_VAR 0 1
15452: PPUSH
15453: CALL_OW 248
15457: ST_TO_ADDR
// case nat of 1 :
15458: LD_VAR 0 4
15462: PUSH
15463: LD_INT 1
15465: DOUBLE
15466: EQUAL
15467: IFTRUE 15471
15469: GO 15482
15471: POP
// tech := tech_lassight ; 2 :
15472: LD_ADDR_VAR 0 5
15476: PUSH
15477: LD_INT 12
15479: ST_TO_ADDR
15480: GO 15521
15482: LD_INT 2
15484: DOUBLE
15485: EQUAL
15486: IFTRUE 15490
15488: GO 15501
15490: POP
// tech := tech_mortar ; 3 :
15491: LD_ADDR_VAR 0 5
15495: PUSH
15496: LD_INT 41
15498: ST_TO_ADDR
15499: GO 15521
15501: LD_INT 3
15503: DOUBLE
15504: EQUAL
15505: IFTRUE 15509
15507: GO 15520
15509: POP
// tech := tech_bazooka ; end ;
15510: LD_ADDR_VAR 0 5
15514: PUSH
15515: LD_INT 44
15517: ST_TO_ADDR
15518: GO 15521
15520: POP
// if Researched ( side , tech ) then
15521: LD_VAR 0 3
15525: PPUSH
15526: LD_VAR 0 5
15530: PPUSH
15531: CALL_OW 325
15535: IFFALSE 15562
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
15537: LD_ADDR_VAR 0 2
15541: PUSH
15542: LD_INT 5
15544: PUSH
15545: LD_INT 8
15547: PUSH
15548: LD_INT 9
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: LIST
15555: PUSH
15556: LD_VAR 0 4
15560: ARRAY
15561: ST_TO_ADDR
// end ;
15562: LD_VAR 0 2
15566: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
15567: LD_INT 0
15569: PPUSH
15570: PPUSH
15571: PPUSH
// if not mines then
15572: LD_VAR 0 2
15576: NOT
15577: IFFALSE 15581
// exit ;
15579: GO 15725
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15581: LD_ADDR_VAR 0 5
15585: PUSH
15586: LD_INT 81
15588: PUSH
15589: LD_VAR 0 1
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: PUSH
15598: LD_INT 3
15600: PUSH
15601: LD_INT 21
15603: PUSH
15604: LD_INT 3
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: PUSH
15611: EMPTY
15612: LIST
15613: LIST
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: PPUSH
15619: CALL_OW 69
15623: ST_TO_ADDR
// for i in mines do
15624: LD_ADDR_VAR 0 4
15628: PUSH
15629: LD_VAR 0 2
15633: PUSH
15634: FOR_IN
15635: IFFALSE 15723
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
15637: LD_VAR 0 4
15641: PUSH
15642: LD_INT 1
15644: ARRAY
15645: PPUSH
15646: LD_VAR 0 4
15650: PUSH
15651: LD_INT 2
15653: ARRAY
15654: PPUSH
15655: CALL_OW 458
15659: NOT
15660: IFFALSE 15664
// continue ;
15662: GO 15634
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
15664: LD_VAR 0 4
15668: PUSH
15669: LD_INT 1
15671: ARRAY
15672: PPUSH
15673: LD_VAR 0 4
15677: PUSH
15678: LD_INT 2
15680: ARRAY
15681: PPUSH
15682: CALL_OW 428
15686: PUSH
15687: LD_VAR 0 5
15691: IN
15692: IFFALSE 15721
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
15694: LD_VAR 0 4
15698: PUSH
15699: LD_INT 1
15701: ARRAY
15702: PPUSH
15703: LD_VAR 0 4
15707: PUSH
15708: LD_INT 2
15710: ARRAY
15711: PPUSH
15712: LD_VAR 0 1
15716: PPUSH
15717: CALL_OW 456
// end ;
15721: GO 15634
15723: POP
15724: POP
// end ;
15725: LD_VAR 0 3
15729: RET
// export function Count ( array ) ; var i ; begin
15730: LD_INT 0
15732: PPUSH
15733: PPUSH
// result := 0 ;
15734: LD_ADDR_VAR 0 2
15738: PUSH
15739: LD_INT 0
15741: ST_TO_ADDR
// for i in array do
15742: LD_ADDR_VAR 0 3
15746: PUSH
15747: LD_VAR 0 1
15751: PUSH
15752: FOR_IN
15753: IFFALSE 15777
// if i then
15755: LD_VAR 0 3
15759: IFFALSE 15775
// result := result + 1 ;
15761: LD_ADDR_VAR 0 2
15765: PUSH
15766: LD_VAR 0 2
15770: PUSH
15771: LD_INT 1
15773: PLUS
15774: ST_TO_ADDR
15775: GO 15752
15777: POP
15778: POP
// end ;
15779: LD_VAR 0 2
15783: RET
// export function IsEmpty ( building ) ; begin
15784: LD_INT 0
15786: PPUSH
// if not building then
15787: LD_VAR 0 1
15791: NOT
15792: IFFALSE 15796
// exit ;
15794: GO 15839
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
15796: LD_ADDR_VAR 0 2
15800: PUSH
15801: LD_VAR 0 1
15805: PUSH
15806: LD_INT 22
15808: PUSH
15809: LD_VAR 0 1
15813: PPUSH
15814: CALL_OW 255
15818: PUSH
15819: EMPTY
15820: LIST
15821: LIST
15822: PUSH
15823: LD_INT 58
15825: PUSH
15826: EMPTY
15827: LIST
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: PPUSH
15833: CALL_OW 69
15837: IN
15838: ST_TO_ADDR
// end ;
15839: LD_VAR 0 2
15843: RET
// export function IsNotFull ( building ) ; begin
15844: LD_INT 0
15846: PPUSH
// if not building then
15847: LD_VAR 0 1
15851: NOT
15852: IFFALSE 15856
// exit ;
15854: GO 15875
// result := UnitsInside ( building ) < 6 ;
15856: LD_ADDR_VAR 0 2
15860: PUSH
15861: LD_VAR 0 1
15865: PPUSH
15866: CALL_OW 313
15870: PUSH
15871: LD_INT 6
15873: LESS
15874: ST_TO_ADDR
// end ;
15875: LD_VAR 0 2
15879: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
15880: LD_INT 0
15882: PPUSH
15883: PPUSH
15884: PPUSH
15885: PPUSH
// tmp := [ ] ;
15886: LD_ADDR_VAR 0 3
15890: PUSH
15891: EMPTY
15892: ST_TO_ADDR
// list := [ ] ;
15893: LD_ADDR_VAR 0 5
15897: PUSH
15898: EMPTY
15899: ST_TO_ADDR
// for i = 16 to 25 do
15900: LD_ADDR_VAR 0 4
15904: PUSH
15905: DOUBLE
15906: LD_INT 16
15908: DEC
15909: ST_TO_ADDR
15910: LD_INT 25
15912: PUSH
15913: FOR_TO
15914: IFFALSE 15987
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
15916: LD_ADDR_VAR 0 3
15920: PUSH
15921: LD_VAR 0 3
15925: PUSH
15926: LD_INT 22
15928: PUSH
15929: LD_VAR 0 1
15933: PPUSH
15934: CALL_OW 255
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: PUSH
15943: LD_INT 91
15945: PUSH
15946: LD_VAR 0 1
15950: PUSH
15951: LD_INT 6
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 30
15961: PUSH
15962: LD_VAR 0 4
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: LIST
15975: PUSH
15976: EMPTY
15977: LIST
15978: PPUSH
15979: CALL_OW 69
15983: ADD
15984: ST_TO_ADDR
15985: GO 15913
15987: POP
15988: POP
// for i = 1 to tmp do
15989: LD_ADDR_VAR 0 4
15993: PUSH
15994: DOUBLE
15995: LD_INT 1
15997: DEC
15998: ST_TO_ADDR
15999: LD_VAR 0 3
16003: PUSH
16004: FOR_TO
16005: IFFALSE 16093
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
16007: LD_ADDR_VAR 0 5
16011: PUSH
16012: LD_VAR 0 5
16016: PUSH
16017: LD_VAR 0 3
16021: PUSH
16022: LD_VAR 0 4
16026: ARRAY
16027: PPUSH
16028: CALL_OW 266
16032: PUSH
16033: LD_VAR 0 3
16037: PUSH
16038: LD_VAR 0 4
16042: ARRAY
16043: PPUSH
16044: CALL_OW 250
16048: PUSH
16049: LD_VAR 0 3
16053: PUSH
16054: LD_VAR 0 4
16058: ARRAY
16059: PPUSH
16060: CALL_OW 251
16064: PUSH
16065: LD_VAR 0 3
16069: PUSH
16070: LD_VAR 0 4
16074: ARRAY
16075: PPUSH
16076: CALL_OW 254
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: PUSH
16087: EMPTY
16088: LIST
16089: ADD
16090: ST_TO_ADDR
16091: GO 16004
16093: POP
16094: POP
// result := list ;
16095: LD_ADDR_VAR 0 2
16099: PUSH
16100: LD_VAR 0 5
16104: ST_TO_ADDR
// end ;
16105: LD_VAR 0 2
16109: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
16110: LD_INT 0
16112: PPUSH
16113: PPUSH
16114: PPUSH
16115: PPUSH
16116: PPUSH
16117: PPUSH
16118: PPUSH
// if not factory then
16119: LD_VAR 0 1
16123: NOT
16124: IFFALSE 16128
// exit ;
16126: GO 16721
// if control = control_apeman then
16128: LD_VAR 0 4
16132: PUSH
16133: LD_INT 5
16135: EQUAL
16136: IFFALSE 16245
// begin tmp := UnitsInside ( factory ) ;
16138: LD_ADDR_VAR 0 8
16142: PUSH
16143: LD_VAR 0 1
16147: PPUSH
16148: CALL_OW 313
16152: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
16153: LD_VAR 0 8
16157: PPUSH
16158: LD_INT 25
16160: PUSH
16161: LD_INT 12
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PPUSH
16168: CALL_OW 72
16172: NOT
16173: IFFALSE 16183
// control := control_manual ;
16175: LD_ADDR_VAR 0 4
16179: PUSH
16180: LD_INT 1
16182: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
16183: LD_ADDR_VAR 0 8
16187: PUSH
16188: LD_VAR 0 1
16192: PPUSH
16193: CALL 15880 0 1
16197: ST_TO_ADDR
// if tmp then
16198: LD_VAR 0 8
16202: IFFALSE 16245
// begin for i in tmp do
16204: LD_ADDR_VAR 0 7
16208: PUSH
16209: LD_VAR 0 8
16213: PUSH
16214: FOR_IN
16215: IFFALSE 16243
// if i [ 1 ] = b_ext_radio then
16217: LD_VAR 0 7
16221: PUSH
16222: LD_INT 1
16224: ARRAY
16225: PUSH
16226: LD_INT 22
16228: EQUAL
16229: IFFALSE 16241
// begin control := control_remote ;
16231: LD_ADDR_VAR 0 4
16235: PUSH
16236: LD_INT 2
16238: ST_TO_ADDR
// break ;
16239: GO 16243
// end ;
16241: GO 16214
16243: POP
16244: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16245: LD_VAR 0 1
16249: PPUSH
16250: LD_VAR 0 2
16254: PPUSH
16255: LD_VAR 0 3
16259: PPUSH
16260: LD_VAR 0 4
16264: PPUSH
16265: LD_VAR 0 5
16269: PPUSH
16270: CALL_OW 448
16274: IFFALSE 16309
// begin result := [ chassis , engine , control , weapon ] ;
16276: LD_ADDR_VAR 0 6
16280: PUSH
16281: LD_VAR 0 2
16285: PUSH
16286: LD_VAR 0 3
16290: PUSH
16291: LD_VAR 0 4
16295: PUSH
16296: LD_VAR 0 5
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: ST_TO_ADDR
// exit ;
16307: GO 16721
// end ; _chassis := AvailableChassisList ( factory ) ;
16309: LD_ADDR_VAR 0 9
16313: PUSH
16314: LD_VAR 0 1
16318: PPUSH
16319: CALL_OW 475
16323: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
16324: LD_ADDR_VAR 0 11
16328: PUSH
16329: LD_VAR 0 1
16333: PPUSH
16334: CALL_OW 476
16338: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
16339: LD_ADDR_VAR 0 12
16343: PUSH
16344: LD_VAR 0 1
16348: PPUSH
16349: CALL_OW 477
16353: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
16354: LD_ADDR_VAR 0 10
16358: PUSH
16359: LD_VAR 0 1
16363: PPUSH
16364: CALL_OW 478
16368: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
16369: LD_VAR 0 9
16373: NOT
16374: PUSH
16375: LD_VAR 0 11
16379: NOT
16380: OR
16381: PUSH
16382: LD_VAR 0 12
16386: NOT
16387: OR
16388: PUSH
16389: LD_VAR 0 10
16393: NOT
16394: OR
16395: IFFALSE 16430
// begin result := [ chassis , engine , control , weapon ] ;
16397: LD_ADDR_VAR 0 6
16401: PUSH
16402: LD_VAR 0 2
16406: PUSH
16407: LD_VAR 0 3
16411: PUSH
16412: LD_VAR 0 4
16416: PUSH
16417: LD_VAR 0 5
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: ST_TO_ADDR
// exit ;
16428: GO 16721
// end ; if not chassis in _chassis then
16430: LD_VAR 0 2
16434: PUSH
16435: LD_VAR 0 9
16439: IN
16440: NOT
16441: IFFALSE 16467
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
16443: LD_ADDR_VAR 0 2
16447: PUSH
16448: LD_VAR 0 9
16452: PUSH
16453: LD_INT 1
16455: PPUSH
16456: LD_VAR 0 9
16460: PPUSH
16461: CALL_OW 12
16465: ARRAY
16466: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
16467: LD_VAR 0 2
16471: PPUSH
16472: LD_VAR 0 3
16476: PPUSH
16477: CALL 16726 0 2
16481: NOT
16482: IFFALSE 16541
// repeat engine := _engine [ 1 ] ;
16484: LD_ADDR_VAR 0 3
16488: PUSH
16489: LD_VAR 0 11
16493: PUSH
16494: LD_INT 1
16496: ARRAY
16497: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
16498: LD_ADDR_VAR 0 11
16502: PUSH
16503: LD_VAR 0 11
16507: PPUSH
16508: LD_INT 1
16510: PPUSH
16511: CALL_OW 3
16515: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
16516: LD_VAR 0 2
16520: PPUSH
16521: LD_VAR 0 3
16525: PPUSH
16526: CALL 16726 0 2
16530: PUSH
16531: LD_VAR 0 11
16535: PUSH
16536: EMPTY
16537: EQUAL
16538: OR
16539: IFFALSE 16484
// if not control in _control then
16541: LD_VAR 0 4
16545: PUSH
16546: LD_VAR 0 12
16550: IN
16551: NOT
16552: IFFALSE 16578
// control := _control [ rand ( 1 , _control ) ] ;
16554: LD_ADDR_VAR 0 4
16558: PUSH
16559: LD_VAR 0 12
16563: PUSH
16564: LD_INT 1
16566: PPUSH
16567: LD_VAR 0 12
16571: PPUSH
16572: CALL_OW 12
16576: ARRAY
16577: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
16578: LD_VAR 0 2
16582: PPUSH
16583: LD_VAR 0 5
16587: PPUSH
16588: CALL 16946 0 2
16592: NOT
16593: IFFALSE 16652
// repeat weapon := _weapon [ 1 ] ;
16595: LD_ADDR_VAR 0 5
16599: PUSH
16600: LD_VAR 0 10
16604: PUSH
16605: LD_INT 1
16607: ARRAY
16608: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
16609: LD_ADDR_VAR 0 10
16613: PUSH
16614: LD_VAR 0 10
16618: PPUSH
16619: LD_INT 1
16621: PPUSH
16622: CALL_OW 3
16626: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
16627: LD_VAR 0 2
16631: PPUSH
16632: LD_VAR 0 5
16636: PPUSH
16637: CALL 16946 0 2
16641: PUSH
16642: LD_VAR 0 10
16646: PUSH
16647: EMPTY
16648: EQUAL
16649: OR
16650: IFFALSE 16595
// result := [ ] ;
16652: LD_ADDR_VAR 0 6
16656: PUSH
16657: EMPTY
16658: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16659: LD_VAR 0 1
16663: PPUSH
16664: LD_VAR 0 2
16668: PPUSH
16669: LD_VAR 0 3
16673: PPUSH
16674: LD_VAR 0 4
16678: PPUSH
16679: LD_VAR 0 5
16683: PPUSH
16684: CALL_OW 448
16688: IFFALSE 16721
// result := [ chassis , engine , control , weapon ] ;
16690: LD_ADDR_VAR 0 6
16694: PUSH
16695: LD_VAR 0 2
16699: PUSH
16700: LD_VAR 0 3
16704: PUSH
16705: LD_VAR 0 4
16709: PUSH
16710: LD_VAR 0 5
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: ST_TO_ADDR
// end ;
16721: LD_VAR 0 6
16725: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
16726: LD_INT 0
16728: PPUSH
// if not chassis or not engine then
16729: LD_VAR 0 1
16733: NOT
16734: PUSH
16735: LD_VAR 0 2
16739: NOT
16740: OR
16741: IFFALSE 16745
// exit ;
16743: GO 16941
// case engine of engine_solar :
16745: LD_VAR 0 2
16749: PUSH
16750: LD_INT 2
16752: DOUBLE
16753: EQUAL
16754: IFTRUE 16758
16756: GO 16796
16758: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
16759: LD_ADDR_VAR 0 3
16763: PUSH
16764: LD_INT 11
16766: PUSH
16767: LD_INT 12
16769: PUSH
16770: LD_INT 13
16772: PUSH
16773: LD_INT 14
16775: PUSH
16776: LD_INT 1
16778: PUSH
16779: LD_INT 2
16781: PUSH
16782: LD_INT 3
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: ST_TO_ADDR
16794: GO 16925
16796: LD_INT 1
16798: DOUBLE
16799: EQUAL
16800: IFTRUE 16804
16802: GO 16866
16804: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
16805: LD_ADDR_VAR 0 3
16809: PUSH
16810: LD_INT 11
16812: PUSH
16813: LD_INT 12
16815: PUSH
16816: LD_INT 13
16818: PUSH
16819: LD_INT 14
16821: PUSH
16822: LD_INT 1
16824: PUSH
16825: LD_INT 2
16827: PUSH
16828: LD_INT 3
16830: PUSH
16831: LD_INT 4
16833: PUSH
16834: LD_INT 5
16836: PUSH
16837: LD_INT 21
16839: PUSH
16840: LD_INT 23
16842: PUSH
16843: LD_INT 22
16845: PUSH
16846: LD_INT 24
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: ST_TO_ADDR
16864: GO 16925
16866: LD_INT 3
16868: DOUBLE
16869: EQUAL
16870: IFTRUE 16874
16872: GO 16924
16874: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16875: LD_ADDR_VAR 0 3
16879: PUSH
16880: LD_INT 13
16882: PUSH
16883: LD_INT 14
16885: PUSH
16886: LD_INT 2
16888: PUSH
16889: LD_INT 3
16891: PUSH
16892: LD_INT 4
16894: PUSH
16895: LD_INT 5
16897: PUSH
16898: LD_INT 21
16900: PUSH
16901: LD_INT 22
16903: PUSH
16904: LD_INT 23
16906: PUSH
16907: LD_INT 24
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: ST_TO_ADDR
16922: GO 16925
16924: POP
// result := ( chassis in result ) ;
16925: LD_ADDR_VAR 0 3
16929: PUSH
16930: LD_VAR 0 1
16934: PUSH
16935: LD_VAR 0 3
16939: IN
16940: ST_TO_ADDR
// end ;
16941: LD_VAR 0 3
16945: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
16946: LD_INT 0
16948: PPUSH
// if not chassis or not weapon then
16949: LD_VAR 0 1
16953: NOT
16954: PUSH
16955: LD_VAR 0 2
16959: NOT
16960: OR
16961: IFFALSE 16965
// exit ;
16963: GO 18027
// case weapon of us_machine_gun :
16965: LD_VAR 0 2
16969: PUSH
16970: LD_INT 2
16972: DOUBLE
16973: EQUAL
16974: IFTRUE 16978
16976: GO 17008
16978: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
16979: LD_ADDR_VAR 0 3
16983: PUSH
16984: LD_INT 1
16986: PUSH
16987: LD_INT 2
16989: PUSH
16990: LD_INT 3
16992: PUSH
16993: LD_INT 4
16995: PUSH
16996: LD_INT 5
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: ST_TO_ADDR
17006: GO 18011
17008: LD_INT 3
17010: DOUBLE
17011: EQUAL
17012: IFTRUE 17016
17014: GO 17046
17016: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
17017: LD_ADDR_VAR 0 3
17021: PUSH
17022: LD_INT 1
17024: PUSH
17025: LD_INT 2
17027: PUSH
17028: LD_INT 3
17030: PUSH
17031: LD_INT 4
17033: PUSH
17034: LD_INT 5
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: ST_TO_ADDR
17044: GO 18011
17046: LD_INT 11
17048: DOUBLE
17049: EQUAL
17050: IFTRUE 17054
17052: GO 17084
17054: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
17055: LD_ADDR_VAR 0 3
17059: PUSH
17060: LD_INT 1
17062: PUSH
17063: LD_INT 2
17065: PUSH
17066: LD_INT 3
17068: PUSH
17069: LD_INT 4
17071: PUSH
17072: LD_INT 5
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: ST_TO_ADDR
17082: GO 18011
17084: LD_INT 4
17086: DOUBLE
17087: EQUAL
17088: IFTRUE 17092
17090: GO 17118
17092: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
17093: LD_ADDR_VAR 0 3
17097: PUSH
17098: LD_INT 2
17100: PUSH
17101: LD_INT 3
17103: PUSH
17104: LD_INT 4
17106: PUSH
17107: LD_INT 5
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: ST_TO_ADDR
17116: GO 18011
17118: LD_INT 5
17120: DOUBLE
17121: EQUAL
17122: IFTRUE 17126
17124: GO 17152
17126: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
17127: LD_ADDR_VAR 0 3
17131: PUSH
17132: LD_INT 2
17134: PUSH
17135: LD_INT 3
17137: PUSH
17138: LD_INT 4
17140: PUSH
17141: LD_INT 5
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: ST_TO_ADDR
17150: GO 18011
17152: LD_INT 9
17154: DOUBLE
17155: EQUAL
17156: IFTRUE 17160
17158: GO 17186
17160: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
17161: LD_ADDR_VAR 0 3
17165: PUSH
17166: LD_INT 2
17168: PUSH
17169: LD_INT 3
17171: PUSH
17172: LD_INT 4
17174: PUSH
17175: LD_INT 5
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: ST_TO_ADDR
17184: GO 18011
17186: LD_INT 7
17188: DOUBLE
17189: EQUAL
17190: IFTRUE 17194
17192: GO 17220
17194: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
17195: LD_ADDR_VAR 0 3
17199: PUSH
17200: LD_INT 2
17202: PUSH
17203: LD_INT 3
17205: PUSH
17206: LD_INT 4
17208: PUSH
17209: LD_INT 5
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: ST_TO_ADDR
17218: GO 18011
17220: LD_INT 12
17222: DOUBLE
17223: EQUAL
17224: IFTRUE 17228
17226: GO 17254
17228: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
17229: LD_ADDR_VAR 0 3
17233: PUSH
17234: LD_INT 2
17236: PUSH
17237: LD_INT 3
17239: PUSH
17240: LD_INT 4
17242: PUSH
17243: LD_INT 5
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: ST_TO_ADDR
17252: GO 18011
17254: LD_INT 13
17256: DOUBLE
17257: EQUAL
17258: IFTRUE 17262
17260: GO 17288
17262: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
17263: LD_ADDR_VAR 0 3
17267: PUSH
17268: LD_INT 2
17270: PUSH
17271: LD_INT 3
17273: PUSH
17274: LD_INT 4
17276: PUSH
17277: LD_INT 5
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: ST_TO_ADDR
17286: GO 18011
17288: LD_INT 14
17290: DOUBLE
17291: EQUAL
17292: IFTRUE 17296
17294: GO 17314
17296: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
17297: LD_ADDR_VAR 0 3
17301: PUSH
17302: LD_INT 4
17304: PUSH
17305: LD_INT 5
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: ST_TO_ADDR
17312: GO 18011
17314: LD_INT 6
17316: DOUBLE
17317: EQUAL
17318: IFTRUE 17322
17320: GO 17340
17322: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
17323: LD_ADDR_VAR 0 3
17327: PUSH
17328: LD_INT 4
17330: PUSH
17331: LD_INT 5
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: ST_TO_ADDR
17338: GO 18011
17340: LD_INT 10
17342: DOUBLE
17343: EQUAL
17344: IFTRUE 17348
17346: GO 17366
17348: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
17349: LD_ADDR_VAR 0 3
17353: PUSH
17354: LD_INT 4
17356: PUSH
17357: LD_INT 5
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: ST_TO_ADDR
17364: GO 18011
17366: LD_INT 22
17368: DOUBLE
17369: EQUAL
17370: IFTRUE 17374
17372: GO 17400
17374: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
17375: LD_ADDR_VAR 0 3
17379: PUSH
17380: LD_INT 11
17382: PUSH
17383: LD_INT 12
17385: PUSH
17386: LD_INT 13
17388: PUSH
17389: LD_INT 14
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: ST_TO_ADDR
17398: GO 18011
17400: LD_INT 23
17402: DOUBLE
17403: EQUAL
17404: IFTRUE 17408
17406: GO 17434
17408: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
17409: LD_ADDR_VAR 0 3
17413: PUSH
17414: LD_INT 11
17416: PUSH
17417: LD_INT 12
17419: PUSH
17420: LD_INT 13
17422: PUSH
17423: LD_INT 14
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: ST_TO_ADDR
17432: GO 18011
17434: LD_INT 24
17436: DOUBLE
17437: EQUAL
17438: IFTRUE 17442
17440: GO 17468
17442: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
17443: LD_ADDR_VAR 0 3
17447: PUSH
17448: LD_INT 11
17450: PUSH
17451: LD_INT 12
17453: PUSH
17454: LD_INT 13
17456: PUSH
17457: LD_INT 14
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: ST_TO_ADDR
17466: GO 18011
17468: LD_INT 30
17470: DOUBLE
17471: EQUAL
17472: IFTRUE 17476
17474: GO 17502
17476: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
17477: LD_ADDR_VAR 0 3
17481: PUSH
17482: LD_INT 11
17484: PUSH
17485: LD_INT 12
17487: PUSH
17488: LD_INT 13
17490: PUSH
17491: LD_INT 14
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: ST_TO_ADDR
17500: GO 18011
17502: LD_INT 25
17504: DOUBLE
17505: EQUAL
17506: IFTRUE 17510
17508: GO 17528
17510: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
17511: LD_ADDR_VAR 0 3
17515: PUSH
17516: LD_INT 13
17518: PUSH
17519: LD_INT 14
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: ST_TO_ADDR
17526: GO 18011
17528: LD_INT 27
17530: DOUBLE
17531: EQUAL
17532: IFTRUE 17536
17534: GO 17554
17536: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
17537: LD_ADDR_VAR 0 3
17541: PUSH
17542: LD_INT 13
17544: PUSH
17545: LD_INT 14
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: ST_TO_ADDR
17552: GO 18011
17554: LD_EXP 101
17558: DOUBLE
17559: EQUAL
17560: IFTRUE 17564
17562: GO 17590
17564: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
17565: LD_ADDR_VAR 0 3
17569: PUSH
17570: LD_INT 11
17572: PUSH
17573: LD_INT 12
17575: PUSH
17576: LD_INT 13
17578: PUSH
17579: LD_INT 14
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: ST_TO_ADDR
17588: GO 18011
17590: LD_INT 28
17592: DOUBLE
17593: EQUAL
17594: IFTRUE 17598
17596: GO 17616
17598: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
17599: LD_ADDR_VAR 0 3
17603: PUSH
17604: LD_INT 13
17606: PUSH
17607: LD_INT 14
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: ST_TO_ADDR
17614: GO 18011
17616: LD_INT 29
17618: DOUBLE
17619: EQUAL
17620: IFTRUE 17624
17622: GO 17642
17624: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
17625: LD_ADDR_VAR 0 3
17629: PUSH
17630: LD_INT 13
17632: PUSH
17633: LD_INT 14
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: ST_TO_ADDR
17640: GO 18011
17642: LD_INT 31
17644: DOUBLE
17645: EQUAL
17646: IFTRUE 17650
17648: GO 17668
17650: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
17651: LD_ADDR_VAR 0 3
17655: PUSH
17656: LD_INT 13
17658: PUSH
17659: LD_INT 14
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: ST_TO_ADDR
17666: GO 18011
17668: LD_INT 26
17670: DOUBLE
17671: EQUAL
17672: IFTRUE 17676
17674: GO 17694
17676: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
17677: LD_ADDR_VAR 0 3
17681: PUSH
17682: LD_INT 13
17684: PUSH
17685: LD_INT 14
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: ST_TO_ADDR
17692: GO 18011
17694: LD_INT 42
17696: DOUBLE
17697: EQUAL
17698: IFTRUE 17702
17700: GO 17728
17702: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
17703: LD_ADDR_VAR 0 3
17707: PUSH
17708: LD_INT 21
17710: PUSH
17711: LD_INT 22
17713: PUSH
17714: LD_INT 23
17716: PUSH
17717: LD_INT 24
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: ST_TO_ADDR
17726: GO 18011
17728: LD_INT 43
17730: DOUBLE
17731: EQUAL
17732: IFTRUE 17736
17734: GO 17762
17736: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
17737: LD_ADDR_VAR 0 3
17741: PUSH
17742: LD_INT 21
17744: PUSH
17745: LD_INT 22
17747: PUSH
17748: LD_INT 23
17750: PUSH
17751: LD_INT 24
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: ST_TO_ADDR
17760: GO 18011
17762: LD_INT 44
17764: DOUBLE
17765: EQUAL
17766: IFTRUE 17770
17768: GO 17796
17770: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
17771: LD_ADDR_VAR 0 3
17775: PUSH
17776: LD_INT 21
17778: PUSH
17779: LD_INT 22
17781: PUSH
17782: LD_INT 23
17784: PUSH
17785: LD_INT 24
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: ST_TO_ADDR
17794: GO 18011
17796: LD_INT 45
17798: DOUBLE
17799: EQUAL
17800: IFTRUE 17804
17802: GO 17830
17804: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
17805: LD_ADDR_VAR 0 3
17809: PUSH
17810: LD_INT 21
17812: PUSH
17813: LD_INT 22
17815: PUSH
17816: LD_INT 23
17818: PUSH
17819: LD_INT 24
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: ST_TO_ADDR
17828: GO 18011
17830: LD_INT 49
17832: DOUBLE
17833: EQUAL
17834: IFTRUE 17838
17836: GO 17864
17838: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
17839: LD_ADDR_VAR 0 3
17843: PUSH
17844: LD_INT 21
17846: PUSH
17847: LD_INT 22
17849: PUSH
17850: LD_INT 23
17852: PUSH
17853: LD_INT 24
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: ST_TO_ADDR
17862: GO 18011
17864: LD_INT 51
17866: DOUBLE
17867: EQUAL
17868: IFTRUE 17872
17870: GO 17898
17872: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
17873: LD_ADDR_VAR 0 3
17877: PUSH
17878: LD_INT 21
17880: PUSH
17881: LD_INT 22
17883: PUSH
17884: LD_INT 23
17886: PUSH
17887: LD_INT 24
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: ST_TO_ADDR
17896: GO 18011
17898: LD_INT 52
17900: DOUBLE
17901: EQUAL
17902: IFTRUE 17906
17904: GO 17932
17906: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
17907: LD_ADDR_VAR 0 3
17911: PUSH
17912: LD_INT 21
17914: PUSH
17915: LD_INT 22
17917: PUSH
17918: LD_INT 23
17920: PUSH
17921: LD_INT 24
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: ST_TO_ADDR
17930: GO 18011
17932: LD_INT 53
17934: DOUBLE
17935: EQUAL
17936: IFTRUE 17940
17938: GO 17958
17940: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
17941: LD_ADDR_VAR 0 3
17945: PUSH
17946: LD_INT 23
17948: PUSH
17949: LD_INT 24
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: ST_TO_ADDR
17956: GO 18011
17958: LD_INT 46
17960: DOUBLE
17961: EQUAL
17962: IFTRUE 17966
17964: GO 17984
17966: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
17967: LD_ADDR_VAR 0 3
17971: PUSH
17972: LD_INT 23
17974: PUSH
17975: LD_INT 24
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: ST_TO_ADDR
17982: GO 18011
17984: LD_INT 47
17986: DOUBLE
17987: EQUAL
17988: IFTRUE 17992
17990: GO 18010
17992: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17993: LD_ADDR_VAR 0 3
17997: PUSH
17998: LD_INT 23
18000: PUSH
18001: LD_INT 24
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: ST_TO_ADDR
18008: GO 18011
18010: POP
// result := ( chassis in result ) ;
18011: LD_ADDR_VAR 0 3
18015: PUSH
18016: LD_VAR 0 1
18020: PUSH
18021: LD_VAR 0 3
18025: IN
18026: ST_TO_ADDR
// end ;
18027: LD_VAR 0 3
18031: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
18032: LD_INT 0
18034: PPUSH
18035: PPUSH
18036: PPUSH
18037: PPUSH
18038: PPUSH
18039: PPUSH
18040: PPUSH
// result := array ;
18041: LD_ADDR_VAR 0 5
18045: PUSH
18046: LD_VAR 0 1
18050: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
18051: LD_VAR 0 1
18055: NOT
18056: PUSH
18057: LD_VAR 0 2
18061: NOT
18062: OR
18063: PUSH
18064: LD_VAR 0 3
18068: NOT
18069: OR
18070: PUSH
18071: LD_VAR 0 2
18075: PUSH
18076: LD_VAR 0 1
18080: GREATER
18081: OR
18082: PUSH
18083: LD_VAR 0 3
18087: PUSH
18088: LD_VAR 0 1
18092: GREATER
18093: OR
18094: IFFALSE 18098
// exit ;
18096: GO 18394
// if direction then
18098: LD_VAR 0 4
18102: IFFALSE 18166
// begin d := 1 ;
18104: LD_ADDR_VAR 0 9
18108: PUSH
18109: LD_INT 1
18111: ST_TO_ADDR
// if i_from > i_to then
18112: LD_VAR 0 2
18116: PUSH
18117: LD_VAR 0 3
18121: GREATER
18122: IFFALSE 18148
// length := ( array - i_from ) + i_to else
18124: LD_ADDR_VAR 0 11
18128: PUSH
18129: LD_VAR 0 1
18133: PUSH
18134: LD_VAR 0 2
18138: MINUS
18139: PUSH
18140: LD_VAR 0 3
18144: PLUS
18145: ST_TO_ADDR
18146: GO 18164
// length := i_to - i_from ;
18148: LD_ADDR_VAR 0 11
18152: PUSH
18153: LD_VAR 0 3
18157: PUSH
18158: LD_VAR 0 2
18162: MINUS
18163: ST_TO_ADDR
// end else
18164: GO 18227
// begin d := - 1 ;
18166: LD_ADDR_VAR 0 9
18170: PUSH
18171: LD_INT 1
18173: NEG
18174: ST_TO_ADDR
// if i_from > i_to then
18175: LD_VAR 0 2
18179: PUSH
18180: LD_VAR 0 3
18184: GREATER
18185: IFFALSE 18205
// length := i_from - i_to else
18187: LD_ADDR_VAR 0 11
18191: PUSH
18192: LD_VAR 0 2
18196: PUSH
18197: LD_VAR 0 3
18201: MINUS
18202: ST_TO_ADDR
18203: GO 18227
// length := ( array - i_to ) + i_from ;
18205: LD_ADDR_VAR 0 11
18209: PUSH
18210: LD_VAR 0 1
18214: PUSH
18215: LD_VAR 0 3
18219: MINUS
18220: PUSH
18221: LD_VAR 0 2
18225: PLUS
18226: ST_TO_ADDR
// end ; if not length then
18227: LD_VAR 0 11
18231: NOT
18232: IFFALSE 18236
// exit ;
18234: GO 18394
// tmp := array ;
18236: LD_ADDR_VAR 0 10
18240: PUSH
18241: LD_VAR 0 1
18245: ST_TO_ADDR
// for i = 1 to length do
18246: LD_ADDR_VAR 0 6
18250: PUSH
18251: DOUBLE
18252: LD_INT 1
18254: DEC
18255: ST_TO_ADDR
18256: LD_VAR 0 11
18260: PUSH
18261: FOR_TO
18262: IFFALSE 18382
// begin for j = 1 to array do
18264: LD_ADDR_VAR 0 7
18268: PUSH
18269: DOUBLE
18270: LD_INT 1
18272: DEC
18273: ST_TO_ADDR
18274: LD_VAR 0 1
18278: PUSH
18279: FOR_TO
18280: IFFALSE 18368
// begin k := j + d ;
18282: LD_ADDR_VAR 0 8
18286: PUSH
18287: LD_VAR 0 7
18291: PUSH
18292: LD_VAR 0 9
18296: PLUS
18297: ST_TO_ADDR
// if k > array then
18298: LD_VAR 0 8
18302: PUSH
18303: LD_VAR 0 1
18307: GREATER
18308: IFFALSE 18318
// k := 1 ;
18310: LD_ADDR_VAR 0 8
18314: PUSH
18315: LD_INT 1
18317: ST_TO_ADDR
// if not k then
18318: LD_VAR 0 8
18322: NOT
18323: IFFALSE 18335
// k := array ;
18325: LD_ADDR_VAR 0 8
18329: PUSH
18330: LD_VAR 0 1
18334: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
18335: LD_ADDR_VAR 0 10
18339: PUSH
18340: LD_VAR 0 10
18344: PPUSH
18345: LD_VAR 0 8
18349: PPUSH
18350: LD_VAR 0 1
18354: PUSH
18355: LD_VAR 0 7
18359: ARRAY
18360: PPUSH
18361: CALL_OW 1
18365: ST_TO_ADDR
// end ;
18366: GO 18279
18368: POP
18369: POP
// array := tmp ;
18370: LD_ADDR_VAR 0 1
18374: PUSH
18375: LD_VAR 0 10
18379: ST_TO_ADDR
// end ;
18380: GO 18261
18382: POP
18383: POP
// result := array ;
18384: LD_ADDR_VAR 0 5
18388: PUSH
18389: LD_VAR 0 1
18393: ST_TO_ADDR
// end ;
18394: LD_VAR 0 5
18398: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
18399: LD_INT 0
18401: PPUSH
18402: PPUSH
// result := 0 ;
18403: LD_ADDR_VAR 0 3
18407: PUSH
18408: LD_INT 0
18410: ST_TO_ADDR
// if not array or not value in array then
18411: LD_VAR 0 1
18415: NOT
18416: PUSH
18417: LD_VAR 0 2
18421: PUSH
18422: LD_VAR 0 1
18426: IN
18427: NOT
18428: OR
18429: IFFALSE 18433
// exit ;
18431: GO 18487
// for i = 1 to array do
18433: LD_ADDR_VAR 0 4
18437: PUSH
18438: DOUBLE
18439: LD_INT 1
18441: DEC
18442: ST_TO_ADDR
18443: LD_VAR 0 1
18447: PUSH
18448: FOR_TO
18449: IFFALSE 18485
// if value = array [ i ] then
18451: LD_VAR 0 2
18455: PUSH
18456: LD_VAR 0 1
18460: PUSH
18461: LD_VAR 0 4
18465: ARRAY
18466: EQUAL
18467: IFFALSE 18483
// begin result := i ;
18469: LD_ADDR_VAR 0 3
18473: PUSH
18474: LD_VAR 0 4
18478: ST_TO_ADDR
// exit ;
18479: POP
18480: POP
18481: GO 18487
// end ;
18483: GO 18448
18485: POP
18486: POP
// end ;
18487: LD_VAR 0 3
18491: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
18492: LD_INT 0
18494: PPUSH
// vc_chassis := chassis ;
18495: LD_ADDR_OWVAR 37
18499: PUSH
18500: LD_VAR 0 1
18504: ST_TO_ADDR
// vc_engine := engine ;
18505: LD_ADDR_OWVAR 39
18509: PUSH
18510: LD_VAR 0 2
18514: ST_TO_ADDR
// vc_control := control ;
18515: LD_ADDR_OWVAR 38
18519: PUSH
18520: LD_VAR 0 3
18524: ST_TO_ADDR
// vc_weapon := weapon ;
18525: LD_ADDR_OWVAR 40
18529: PUSH
18530: LD_VAR 0 4
18534: ST_TO_ADDR
// vc_fuel_battery := fuel ;
18535: LD_ADDR_OWVAR 41
18539: PUSH
18540: LD_VAR 0 5
18544: ST_TO_ADDR
// end ;
18545: LD_VAR 0 6
18549: RET
// export function WantPlant ( unit ) ; var task ; begin
18550: LD_INT 0
18552: PPUSH
18553: PPUSH
// result := false ;
18554: LD_ADDR_VAR 0 2
18558: PUSH
18559: LD_INT 0
18561: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
18562: LD_ADDR_VAR 0 3
18566: PUSH
18567: LD_VAR 0 1
18571: PPUSH
18572: CALL_OW 437
18576: ST_TO_ADDR
// if task then
18577: LD_VAR 0 3
18581: IFFALSE 18609
// if task [ 1 ] [ 1 ] = p then
18583: LD_VAR 0 3
18587: PUSH
18588: LD_INT 1
18590: ARRAY
18591: PUSH
18592: LD_INT 1
18594: ARRAY
18595: PUSH
18596: LD_STRING p
18598: EQUAL
18599: IFFALSE 18609
// result := true ;
18601: LD_ADDR_VAR 0 2
18605: PUSH
18606: LD_INT 1
18608: ST_TO_ADDR
// end ;
18609: LD_VAR 0 2
18613: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
18614: LD_INT 0
18616: PPUSH
18617: PPUSH
18618: PPUSH
18619: PPUSH
// if pos < 1 then
18620: LD_VAR 0 2
18624: PUSH
18625: LD_INT 1
18627: LESS
18628: IFFALSE 18632
// exit ;
18630: GO 18935
// if pos = 1 then
18632: LD_VAR 0 2
18636: PUSH
18637: LD_INT 1
18639: EQUAL
18640: IFFALSE 18673
// result := Replace ( arr , pos [ 1 ] , value ) else
18642: LD_ADDR_VAR 0 4
18646: PUSH
18647: LD_VAR 0 1
18651: PPUSH
18652: LD_VAR 0 2
18656: PUSH
18657: LD_INT 1
18659: ARRAY
18660: PPUSH
18661: LD_VAR 0 3
18665: PPUSH
18666: CALL_OW 1
18670: ST_TO_ADDR
18671: GO 18935
// begin tmp := arr ;
18673: LD_ADDR_VAR 0 6
18677: PUSH
18678: LD_VAR 0 1
18682: ST_TO_ADDR
// s_arr := [ tmp ] ;
18683: LD_ADDR_VAR 0 7
18687: PUSH
18688: LD_VAR 0 6
18692: PUSH
18693: EMPTY
18694: LIST
18695: ST_TO_ADDR
// for i = 1 to pos - 1 do
18696: LD_ADDR_VAR 0 5
18700: PUSH
18701: DOUBLE
18702: LD_INT 1
18704: DEC
18705: ST_TO_ADDR
18706: LD_VAR 0 2
18710: PUSH
18711: LD_INT 1
18713: MINUS
18714: PUSH
18715: FOR_TO
18716: IFFALSE 18761
// begin tmp := tmp [ pos [ i ] ] ;
18718: LD_ADDR_VAR 0 6
18722: PUSH
18723: LD_VAR 0 6
18727: PUSH
18728: LD_VAR 0 2
18732: PUSH
18733: LD_VAR 0 5
18737: ARRAY
18738: ARRAY
18739: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
18740: LD_ADDR_VAR 0 7
18744: PUSH
18745: LD_VAR 0 7
18749: PUSH
18750: LD_VAR 0 6
18754: PUSH
18755: EMPTY
18756: LIST
18757: ADD
18758: ST_TO_ADDR
// end ;
18759: GO 18715
18761: POP
18762: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
18763: LD_ADDR_VAR 0 6
18767: PUSH
18768: LD_VAR 0 6
18772: PPUSH
18773: LD_VAR 0 2
18777: PUSH
18778: LD_VAR 0 2
18782: ARRAY
18783: PPUSH
18784: LD_VAR 0 3
18788: PPUSH
18789: CALL_OW 1
18793: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
18794: LD_ADDR_VAR 0 7
18798: PUSH
18799: LD_VAR 0 7
18803: PPUSH
18804: LD_VAR 0 7
18808: PPUSH
18809: LD_VAR 0 6
18813: PPUSH
18814: CALL_OW 1
18818: ST_TO_ADDR
// for i = s_arr downto 2 do
18819: LD_ADDR_VAR 0 5
18823: PUSH
18824: DOUBLE
18825: LD_VAR 0 7
18829: INC
18830: ST_TO_ADDR
18831: LD_INT 2
18833: PUSH
18834: FOR_DOWNTO
18835: IFFALSE 18919
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
18837: LD_ADDR_VAR 0 6
18841: PUSH
18842: LD_VAR 0 7
18846: PUSH
18847: LD_VAR 0 5
18851: PUSH
18852: LD_INT 1
18854: MINUS
18855: ARRAY
18856: PPUSH
18857: LD_VAR 0 2
18861: PUSH
18862: LD_VAR 0 5
18866: PUSH
18867: LD_INT 1
18869: MINUS
18870: ARRAY
18871: PPUSH
18872: LD_VAR 0 7
18876: PUSH
18877: LD_VAR 0 5
18881: ARRAY
18882: PPUSH
18883: CALL_OW 1
18887: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
18888: LD_ADDR_VAR 0 7
18892: PUSH
18893: LD_VAR 0 7
18897: PPUSH
18898: LD_VAR 0 5
18902: PUSH
18903: LD_INT 1
18905: MINUS
18906: PPUSH
18907: LD_VAR 0 6
18911: PPUSH
18912: CALL_OW 1
18916: ST_TO_ADDR
// end ;
18917: GO 18834
18919: POP
18920: POP
// result := s_arr [ 1 ] ;
18921: LD_ADDR_VAR 0 4
18925: PUSH
18926: LD_VAR 0 7
18930: PUSH
18931: LD_INT 1
18933: ARRAY
18934: ST_TO_ADDR
// end ; end ;
18935: LD_VAR 0 4
18939: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
18940: LD_INT 0
18942: PPUSH
18943: PPUSH
// if not list then
18944: LD_VAR 0 1
18948: NOT
18949: IFFALSE 18953
// exit ;
18951: GO 19044
// i := list [ pos1 ] ;
18953: LD_ADDR_VAR 0 5
18957: PUSH
18958: LD_VAR 0 1
18962: PUSH
18963: LD_VAR 0 2
18967: ARRAY
18968: ST_TO_ADDR
// if not i then
18969: LD_VAR 0 5
18973: NOT
18974: IFFALSE 18978
// exit ;
18976: GO 19044
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
18978: LD_ADDR_VAR 0 1
18982: PUSH
18983: LD_VAR 0 1
18987: PPUSH
18988: LD_VAR 0 2
18992: PPUSH
18993: LD_VAR 0 1
18997: PUSH
18998: LD_VAR 0 3
19002: ARRAY
19003: PPUSH
19004: CALL_OW 1
19008: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
19009: LD_ADDR_VAR 0 1
19013: PUSH
19014: LD_VAR 0 1
19018: PPUSH
19019: LD_VAR 0 3
19023: PPUSH
19024: LD_VAR 0 5
19028: PPUSH
19029: CALL_OW 1
19033: ST_TO_ADDR
// result := list ;
19034: LD_ADDR_VAR 0 4
19038: PUSH
19039: LD_VAR 0 1
19043: ST_TO_ADDR
// end ;
19044: LD_VAR 0 4
19048: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
19049: LD_INT 0
19051: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
19052: LD_ADDR_VAR 0 5
19056: PUSH
19057: LD_VAR 0 1
19061: PPUSH
19062: CALL_OW 250
19066: PPUSH
19067: LD_VAR 0 1
19071: PPUSH
19072: CALL_OW 251
19076: PPUSH
19077: LD_VAR 0 2
19081: PPUSH
19082: LD_VAR 0 3
19086: PPUSH
19087: LD_VAR 0 4
19091: PPUSH
19092: CALL 19102 0 5
19096: ST_TO_ADDR
// end ;
19097: LD_VAR 0 5
19101: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
19102: LD_INT 0
19104: PPUSH
19105: PPUSH
19106: PPUSH
19107: PPUSH
// if not list then
19108: LD_VAR 0 3
19112: NOT
19113: IFFALSE 19117
// exit ;
19115: GO 19505
// result := [ ] ;
19117: LD_ADDR_VAR 0 6
19121: PUSH
19122: EMPTY
19123: ST_TO_ADDR
// for i in list do
19124: LD_ADDR_VAR 0 7
19128: PUSH
19129: LD_VAR 0 3
19133: PUSH
19134: FOR_IN
19135: IFFALSE 19337
// begin tmp := GetDistUnitXY ( i , x , y ) ;
19137: LD_ADDR_VAR 0 9
19141: PUSH
19142: LD_VAR 0 7
19146: PPUSH
19147: LD_VAR 0 1
19151: PPUSH
19152: LD_VAR 0 2
19156: PPUSH
19157: CALL_OW 297
19161: ST_TO_ADDR
// if not result then
19162: LD_VAR 0 6
19166: NOT
19167: IFFALSE 19193
// result := [ [ i , tmp ] ] else
19169: LD_ADDR_VAR 0 6
19173: PUSH
19174: LD_VAR 0 7
19178: PUSH
19179: LD_VAR 0 9
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PUSH
19188: EMPTY
19189: LIST
19190: ST_TO_ADDR
19191: GO 19335
// begin if result [ result ] [ 2 ] < tmp then
19193: LD_VAR 0 6
19197: PUSH
19198: LD_VAR 0 6
19202: ARRAY
19203: PUSH
19204: LD_INT 2
19206: ARRAY
19207: PUSH
19208: LD_VAR 0 9
19212: LESS
19213: IFFALSE 19255
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
19215: LD_ADDR_VAR 0 6
19219: PUSH
19220: LD_VAR 0 6
19224: PPUSH
19225: LD_VAR 0 6
19229: PUSH
19230: LD_INT 1
19232: PLUS
19233: PPUSH
19234: LD_VAR 0 7
19238: PUSH
19239: LD_VAR 0 9
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PPUSH
19248: CALL_OW 2
19252: ST_TO_ADDR
19253: GO 19335
// for j = 1 to result do
19255: LD_ADDR_VAR 0 8
19259: PUSH
19260: DOUBLE
19261: LD_INT 1
19263: DEC
19264: ST_TO_ADDR
19265: LD_VAR 0 6
19269: PUSH
19270: FOR_TO
19271: IFFALSE 19333
// begin if tmp < result [ j ] [ 2 ] then
19273: LD_VAR 0 9
19277: PUSH
19278: LD_VAR 0 6
19282: PUSH
19283: LD_VAR 0 8
19287: ARRAY
19288: PUSH
19289: LD_INT 2
19291: ARRAY
19292: LESS
19293: IFFALSE 19331
// begin result := Insert ( result , j , [ i , tmp ] ) ;
19295: LD_ADDR_VAR 0 6
19299: PUSH
19300: LD_VAR 0 6
19304: PPUSH
19305: LD_VAR 0 8
19309: PPUSH
19310: LD_VAR 0 7
19314: PUSH
19315: LD_VAR 0 9
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PPUSH
19324: CALL_OW 2
19328: ST_TO_ADDR
// break ;
19329: GO 19333
// end ; end ;
19331: GO 19270
19333: POP
19334: POP
// end ; end ;
19335: GO 19134
19337: POP
19338: POP
// if result and not asc then
19339: LD_VAR 0 6
19343: PUSH
19344: LD_VAR 0 4
19348: NOT
19349: AND
19350: IFFALSE 19425
// begin tmp := result ;
19352: LD_ADDR_VAR 0 9
19356: PUSH
19357: LD_VAR 0 6
19361: ST_TO_ADDR
// for i = tmp downto 1 do
19362: LD_ADDR_VAR 0 7
19366: PUSH
19367: DOUBLE
19368: LD_VAR 0 9
19372: INC
19373: ST_TO_ADDR
19374: LD_INT 1
19376: PUSH
19377: FOR_DOWNTO
19378: IFFALSE 19423
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
19380: LD_ADDR_VAR 0 6
19384: PUSH
19385: LD_VAR 0 6
19389: PPUSH
19390: LD_VAR 0 9
19394: PUSH
19395: LD_VAR 0 7
19399: MINUS
19400: PUSH
19401: LD_INT 1
19403: PLUS
19404: PPUSH
19405: LD_VAR 0 9
19409: PUSH
19410: LD_VAR 0 7
19414: ARRAY
19415: PPUSH
19416: CALL_OW 1
19420: ST_TO_ADDR
19421: GO 19377
19423: POP
19424: POP
// end ; tmp := [ ] ;
19425: LD_ADDR_VAR 0 9
19429: PUSH
19430: EMPTY
19431: ST_TO_ADDR
// if mode then
19432: LD_VAR 0 5
19436: IFFALSE 19505
// begin for i = 1 to result do
19438: LD_ADDR_VAR 0 7
19442: PUSH
19443: DOUBLE
19444: LD_INT 1
19446: DEC
19447: ST_TO_ADDR
19448: LD_VAR 0 6
19452: PUSH
19453: FOR_TO
19454: IFFALSE 19493
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
19456: LD_ADDR_VAR 0 9
19460: PUSH
19461: LD_VAR 0 9
19465: PPUSH
19466: LD_VAR 0 7
19470: PPUSH
19471: LD_VAR 0 6
19475: PUSH
19476: LD_VAR 0 7
19480: ARRAY
19481: PUSH
19482: LD_INT 1
19484: ARRAY
19485: PPUSH
19486: CALL_OW 1
19490: ST_TO_ADDR
19491: GO 19453
19493: POP
19494: POP
// result := tmp ;
19495: LD_ADDR_VAR 0 6
19499: PUSH
19500: LD_VAR 0 9
19504: ST_TO_ADDR
// end ; end ;
19505: LD_VAR 0 6
19509: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
19510: LD_INT 0
19512: PPUSH
19513: PPUSH
19514: PPUSH
19515: PPUSH
19516: PPUSH
19517: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
19518: LD_ADDR_VAR 0 5
19522: PUSH
19523: LD_INT 0
19525: PUSH
19526: LD_INT 0
19528: PUSH
19529: LD_INT 0
19531: PUSH
19532: EMPTY
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: ST_TO_ADDR
// if not x or not y then
19540: LD_VAR 0 2
19544: NOT
19545: PUSH
19546: LD_VAR 0 3
19550: NOT
19551: OR
19552: IFFALSE 19556
// exit ;
19554: GO 21208
// if not range then
19556: LD_VAR 0 4
19560: NOT
19561: IFFALSE 19571
// range := 10 ;
19563: LD_ADDR_VAR 0 4
19567: PUSH
19568: LD_INT 10
19570: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19571: LD_ADDR_VAR 0 8
19575: PUSH
19576: LD_INT 81
19578: PUSH
19579: LD_VAR 0 1
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 92
19590: PUSH
19591: LD_VAR 0 2
19595: PUSH
19596: LD_VAR 0 3
19600: PUSH
19601: LD_VAR 0 4
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: PUSH
19612: LD_INT 3
19614: PUSH
19615: LD_INT 21
19617: PUSH
19618: LD_INT 3
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: LIST
19633: PPUSH
19634: CALL_OW 69
19638: ST_TO_ADDR
// if not tmp then
19639: LD_VAR 0 8
19643: NOT
19644: IFFALSE 19648
// exit ;
19646: GO 21208
// for i in tmp do
19648: LD_ADDR_VAR 0 6
19652: PUSH
19653: LD_VAR 0 8
19657: PUSH
19658: FOR_IN
19659: IFFALSE 21183
// begin points := [ 0 , 0 , 0 ] ;
19661: LD_ADDR_VAR 0 9
19665: PUSH
19666: LD_INT 0
19668: PUSH
19669: LD_INT 0
19671: PUSH
19672: LD_INT 0
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: LIST
19679: ST_TO_ADDR
// bpoints := 1 ;
19680: LD_ADDR_VAR 0 10
19684: PUSH
19685: LD_INT 1
19687: ST_TO_ADDR
// case GetType ( i ) of unit_human :
19688: LD_VAR 0 6
19692: PPUSH
19693: CALL_OW 247
19697: PUSH
19698: LD_INT 1
19700: DOUBLE
19701: EQUAL
19702: IFTRUE 19706
19704: GO 20284
19706: POP
// begin if GetClass ( i ) = 1 then
19707: LD_VAR 0 6
19711: PPUSH
19712: CALL_OW 257
19716: PUSH
19717: LD_INT 1
19719: EQUAL
19720: IFFALSE 19741
// points := [ 10 , 5 , 3 ] ;
19722: LD_ADDR_VAR 0 9
19726: PUSH
19727: LD_INT 10
19729: PUSH
19730: LD_INT 5
19732: PUSH
19733: LD_INT 3
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: LIST
19740: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
19741: LD_VAR 0 6
19745: PPUSH
19746: CALL_OW 257
19750: PUSH
19751: LD_INT 2
19753: PUSH
19754: LD_INT 3
19756: PUSH
19757: LD_INT 4
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: LIST
19764: IN
19765: IFFALSE 19786
// points := [ 3 , 2 , 1 ] ;
19767: LD_ADDR_VAR 0 9
19771: PUSH
19772: LD_INT 3
19774: PUSH
19775: LD_INT 2
19777: PUSH
19778: LD_INT 1
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: LIST
19785: ST_TO_ADDR
// if GetClass ( i ) = 5 then
19786: LD_VAR 0 6
19790: PPUSH
19791: CALL_OW 257
19795: PUSH
19796: LD_INT 5
19798: EQUAL
19799: IFFALSE 19820
// points := [ 130 , 5 , 2 ] ;
19801: LD_ADDR_VAR 0 9
19805: PUSH
19806: LD_INT 130
19808: PUSH
19809: LD_INT 5
19811: PUSH
19812: LD_INT 2
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: LIST
19819: ST_TO_ADDR
// if GetClass ( i ) = 8 then
19820: LD_VAR 0 6
19824: PPUSH
19825: CALL_OW 257
19829: PUSH
19830: LD_INT 8
19832: EQUAL
19833: IFFALSE 19854
// points := [ 35 , 35 , 30 ] ;
19835: LD_ADDR_VAR 0 9
19839: PUSH
19840: LD_INT 35
19842: PUSH
19843: LD_INT 35
19845: PUSH
19846: LD_INT 30
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: LIST
19853: ST_TO_ADDR
// if GetClass ( i ) = 9 then
19854: LD_VAR 0 6
19858: PPUSH
19859: CALL_OW 257
19863: PUSH
19864: LD_INT 9
19866: EQUAL
19867: IFFALSE 19888
// points := [ 20 , 55 , 40 ] ;
19869: LD_ADDR_VAR 0 9
19873: PUSH
19874: LD_INT 20
19876: PUSH
19877: LD_INT 55
19879: PUSH
19880: LD_INT 40
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: LIST
19887: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
19888: LD_VAR 0 6
19892: PPUSH
19893: CALL_OW 257
19897: PUSH
19898: LD_INT 12
19900: PUSH
19901: LD_INT 16
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: IN
19908: IFFALSE 19929
// points := [ 5 , 3 , 2 ] ;
19910: LD_ADDR_VAR 0 9
19914: PUSH
19915: LD_INT 5
19917: PUSH
19918: LD_INT 3
19920: PUSH
19921: LD_INT 2
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: LIST
19928: ST_TO_ADDR
// if GetClass ( i ) = 17 then
19929: LD_VAR 0 6
19933: PPUSH
19934: CALL_OW 257
19938: PUSH
19939: LD_INT 17
19941: EQUAL
19942: IFFALSE 19963
// points := [ 100 , 50 , 75 ] ;
19944: LD_ADDR_VAR 0 9
19948: PUSH
19949: LD_INT 100
19951: PUSH
19952: LD_INT 50
19954: PUSH
19955: LD_INT 75
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: LIST
19962: ST_TO_ADDR
// if GetClass ( i ) = 15 then
19963: LD_VAR 0 6
19967: PPUSH
19968: CALL_OW 257
19972: PUSH
19973: LD_INT 15
19975: EQUAL
19976: IFFALSE 19997
// points := [ 10 , 5 , 3 ] ;
19978: LD_ADDR_VAR 0 9
19982: PUSH
19983: LD_INT 10
19985: PUSH
19986: LD_INT 5
19988: PUSH
19989: LD_INT 3
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: LIST
19996: ST_TO_ADDR
// if GetClass ( i ) = 14 then
19997: LD_VAR 0 6
20001: PPUSH
20002: CALL_OW 257
20006: PUSH
20007: LD_INT 14
20009: EQUAL
20010: IFFALSE 20031
// points := [ 10 , 0 , 0 ] ;
20012: LD_ADDR_VAR 0 9
20016: PUSH
20017: LD_INT 10
20019: PUSH
20020: LD_INT 0
20022: PUSH
20023: LD_INT 0
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: LIST
20030: ST_TO_ADDR
// if GetClass ( i ) = 11 then
20031: LD_VAR 0 6
20035: PPUSH
20036: CALL_OW 257
20040: PUSH
20041: LD_INT 11
20043: EQUAL
20044: IFFALSE 20065
// points := [ 30 , 10 , 5 ] ;
20046: LD_ADDR_VAR 0 9
20050: PUSH
20051: LD_INT 30
20053: PUSH
20054: LD_INT 10
20056: PUSH
20057: LD_INT 5
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: LIST
20064: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
20065: LD_VAR 0 1
20069: PPUSH
20070: LD_INT 5
20072: PPUSH
20073: CALL_OW 321
20077: PUSH
20078: LD_INT 2
20080: EQUAL
20081: IFFALSE 20098
// bpoints := bpoints * 1.8 ;
20083: LD_ADDR_VAR 0 10
20087: PUSH
20088: LD_VAR 0 10
20092: PUSH
20093: LD_REAL  1.80000000000000E+0000
20096: MUL
20097: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
20098: LD_VAR 0 6
20102: PPUSH
20103: CALL_OW 257
20107: PUSH
20108: LD_INT 1
20110: PUSH
20111: LD_INT 2
20113: PUSH
20114: LD_INT 3
20116: PUSH
20117: LD_INT 4
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: IN
20126: PUSH
20127: LD_VAR 0 1
20131: PPUSH
20132: LD_INT 51
20134: PPUSH
20135: CALL_OW 321
20139: PUSH
20140: LD_INT 2
20142: EQUAL
20143: AND
20144: IFFALSE 20161
// bpoints := bpoints * 1.2 ;
20146: LD_ADDR_VAR 0 10
20150: PUSH
20151: LD_VAR 0 10
20155: PUSH
20156: LD_REAL  1.20000000000000E+0000
20159: MUL
20160: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
20161: LD_VAR 0 6
20165: PPUSH
20166: CALL_OW 257
20170: PUSH
20171: LD_INT 5
20173: PUSH
20174: LD_INT 7
20176: PUSH
20177: LD_INT 9
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: LIST
20184: IN
20185: PUSH
20186: LD_VAR 0 1
20190: PPUSH
20191: LD_INT 52
20193: PPUSH
20194: CALL_OW 321
20198: PUSH
20199: LD_INT 2
20201: EQUAL
20202: AND
20203: IFFALSE 20220
// bpoints := bpoints * 1.5 ;
20205: LD_ADDR_VAR 0 10
20209: PUSH
20210: LD_VAR 0 10
20214: PUSH
20215: LD_REAL  1.50000000000000E+0000
20218: MUL
20219: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
20220: LD_VAR 0 1
20224: PPUSH
20225: LD_INT 66
20227: PPUSH
20228: CALL_OW 321
20232: PUSH
20233: LD_INT 2
20235: EQUAL
20236: IFFALSE 20253
// bpoints := bpoints * 1.1 ;
20238: LD_ADDR_VAR 0 10
20242: PUSH
20243: LD_VAR 0 10
20247: PUSH
20248: LD_REAL  1.10000000000000E+0000
20251: MUL
20252: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
20253: LD_ADDR_VAR 0 10
20257: PUSH
20258: LD_VAR 0 10
20262: PUSH
20263: LD_VAR 0 6
20267: PPUSH
20268: LD_INT 1
20270: PPUSH
20271: CALL_OW 259
20275: PUSH
20276: LD_REAL  1.15000000000000E+0000
20279: MUL
20280: MUL
20281: ST_TO_ADDR
// end ; unit_vehicle :
20282: GO 21112
20284: LD_INT 2
20286: DOUBLE
20287: EQUAL
20288: IFTRUE 20292
20290: GO 21100
20292: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
20293: LD_VAR 0 6
20297: PPUSH
20298: CALL_OW 264
20302: PUSH
20303: LD_INT 2
20305: PUSH
20306: LD_INT 42
20308: PUSH
20309: LD_INT 24
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: LIST
20316: IN
20317: IFFALSE 20338
// points := [ 25 , 5 , 3 ] ;
20319: LD_ADDR_VAR 0 9
20323: PUSH
20324: LD_INT 25
20326: PUSH
20327: LD_INT 5
20329: PUSH
20330: LD_INT 3
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: LIST
20337: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
20338: LD_VAR 0 6
20342: PPUSH
20343: CALL_OW 264
20347: PUSH
20348: LD_INT 4
20350: PUSH
20351: LD_INT 43
20353: PUSH
20354: LD_INT 25
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: LIST
20361: IN
20362: IFFALSE 20383
// points := [ 40 , 15 , 5 ] ;
20364: LD_ADDR_VAR 0 9
20368: PUSH
20369: LD_INT 40
20371: PUSH
20372: LD_INT 15
20374: PUSH
20375: LD_INT 5
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: LIST
20382: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
20383: LD_VAR 0 6
20387: PPUSH
20388: CALL_OW 264
20392: PUSH
20393: LD_INT 3
20395: PUSH
20396: LD_INT 23
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: IN
20403: IFFALSE 20424
// points := [ 7 , 25 , 8 ] ;
20405: LD_ADDR_VAR 0 9
20409: PUSH
20410: LD_INT 7
20412: PUSH
20413: LD_INT 25
20415: PUSH
20416: LD_INT 8
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: LIST
20423: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
20424: LD_VAR 0 6
20428: PPUSH
20429: CALL_OW 264
20433: PUSH
20434: LD_INT 5
20436: PUSH
20437: LD_INT 27
20439: PUSH
20440: LD_INT 44
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: LIST
20447: IN
20448: IFFALSE 20469
// points := [ 14 , 50 , 16 ] ;
20450: LD_ADDR_VAR 0 9
20454: PUSH
20455: LD_INT 14
20457: PUSH
20458: LD_INT 50
20460: PUSH
20461: LD_INT 16
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: LIST
20468: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
20469: LD_VAR 0 6
20473: PPUSH
20474: CALL_OW 264
20478: PUSH
20479: LD_INT 6
20481: PUSH
20482: LD_INT 46
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: IN
20489: IFFALSE 20510
// points := [ 32 , 120 , 70 ] ;
20491: LD_ADDR_VAR 0 9
20495: PUSH
20496: LD_INT 32
20498: PUSH
20499: LD_INT 120
20501: PUSH
20502: LD_INT 70
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: LIST
20509: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
20510: LD_VAR 0 6
20514: PPUSH
20515: CALL_OW 264
20519: PUSH
20520: LD_INT 7
20522: PUSH
20523: LD_INT 28
20525: PUSH
20526: LD_INT 45
20528: PUSH
20529: LD_EXP 101
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: IN
20540: IFFALSE 20561
// points := [ 35 , 20 , 45 ] ;
20542: LD_ADDR_VAR 0 9
20546: PUSH
20547: LD_INT 35
20549: PUSH
20550: LD_INT 20
20552: PUSH
20553: LD_INT 45
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: LIST
20560: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
20561: LD_VAR 0 6
20565: PPUSH
20566: CALL_OW 264
20570: PUSH
20571: LD_INT 47
20573: PUSH
20574: EMPTY
20575: LIST
20576: IN
20577: IFFALSE 20598
// points := [ 67 , 45 , 75 ] ;
20579: LD_ADDR_VAR 0 9
20583: PUSH
20584: LD_INT 67
20586: PUSH
20587: LD_INT 45
20589: PUSH
20590: LD_INT 75
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: LIST
20597: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
20598: LD_VAR 0 6
20602: PPUSH
20603: CALL_OW 264
20607: PUSH
20608: LD_INT 26
20610: PUSH
20611: EMPTY
20612: LIST
20613: IN
20614: IFFALSE 20635
// points := [ 120 , 30 , 80 ] ;
20616: LD_ADDR_VAR 0 9
20620: PUSH
20621: LD_INT 120
20623: PUSH
20624: LD_INT 30
20626: PUSH
20627: LD_INT 80
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: LIST
20634: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
20635: LD_VAR 0 6
20639: PPUSH
20640: CALL_OW 264
20644: PUSH
20645: LD_INT 22
20647: PUSH
20648: EMPTY
20649: LIST
20650: IN
20651: IFFALSE 20672
// points := [ 40 , 1 , 1 ] ;
20653: LD_ADDR_VAR 0 9
20657: PUSH
20658: LD_INT 40
20660: PUSH
20661: LD_INT 1
20663: PUSH
20664: LD_INT 1
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: LIST
20671: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
20672: LD_VAR 0 6
20676: PPUSH
20677: CALL_OW 264
20681: PUSH
20682: LD_INT 29
20684: PUSH
20685: EMPTY
20686: LIST
20687: IN
20688: IFFALSE 20709
// points := [ 70 , 200 , 400 ] ;
20690: LD_ADDR_VAR 0 9
20694: PUSH
20695: LD_INT 70
20697: PUSH
20698: LD_INT 200
20700: PUSH
20701: LD_INT 400
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: LIST
20708: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
20709: LD_VAR 0 6
20713: PPUSH
20714: CALL_OW 264
20718: PUSH
20719: LD_INT 14
20721: PUSH
20722: LD_INT 53
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: IN
20729: IFFALSE 20750
// points := [ 40 , 10 , 20 ] ;
20731: LD_ADDR_VAR 0 9
20735: PUSH
20736: LD_INT 40
20738: PUSH
20739: LD_INT 10
20741: PUSH
20742: LD_INT 20
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: LIST
20749: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
20750: LD_VAR 0 6
20754: PPUSH
20755: CALL_OW 264
20759: PUSH
20760: LD_INT 9
20762: PUSH
20763: EMPTY
20764: LIST
20765: IN
20766: IFFALSE 20787
// points := [ 5 , 70 , 20 ] ;
20768: LD_ADDR_VAR 0 9
20772: PUSH
20773: LD_INT 5
20775: PUSH
20776: LD_INT 70
20778: PUSH
20779: LD_INT 20
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: LIST
20786: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
20787: LD_VAR 0 6
20791: PPUSH
20792: CALL_OW 264
20796: PUSH
20797: LD_INT 10
20799: PUSH
20800: EMPTY
20801: LIST
20802: IN
20803: IFFALSE 20824
// points := [ 35 , 110 , 70 ] ;
20805: LD_ADDR_VAR 0 9
20809: PUSH
20810: LD_INT 35
20812: PUSH
20813: LD_INT 110
20815: PUSH
20816: LD_INT 70
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: LIST
20823: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
20824: LD_VAR 0 6
20828: PPUSH
20829: CALL_OW 265
20833: PUSH
20834: LD_INT 25
20836: EQUAL
20837: IFFALSE 20858
// points := [ 80 , 65 , 100 ] ;
20839: LD_ADDR_VAR 0 9
20843: PUSH
20844: LD_INT 80
20846: PUSH
20847: LD_INT 65
20849: PUSH
20850: LD_INT 100
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: LIST
20857: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
20858: LD_VAR 0 6
20862: PPUSH
20863: CALL_OW 263
20867: PUSH
20868: LD_INT 1
20870: EQUAL
20871: IFFALSE 20906
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
20873: LD_ADDR_VAR 0 10
20877: PUSH
20878: LD_VAR 0 10
20882: PUSH
20883: LD_VAR 0 6
20887: PPUSH
20888: CALL_OW 311
20892: PPUSH
20893: LD_INT 3
20895: PPUSH
20896: CALL_OW 259
20900: PUSH
20901: LD_INT 4
20903: MUL
20904: MUL
20905: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
20906: LD_VAR 0 6
20910: PPUSH
20911: CALL_OW 263
20915: PUSH
20916: LD_INT 2
20918: EQUAL
20919: IFFALSE 20970
// begin j := IsControledBy ( i ) ;
20921: LD_ADDR_VAR 0 7
20925: PUSH
20926: LD_VAR 0 6
20930: PPUSH
20931: CALL_OW 312
20935: ST_TO_ADDR
// if j then
20936: LD_VAR 0 7
20940: IFFALSE 20970
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
20942: LD_ADDR_VAR 0 10
20946: PUSH
20947: LD_VAR 0 10
20951: PUSH
20952: LD_VAR 0 7
20956: PPUSH
20957: LD_INT 3
20959: PPUSH
20960: CALL_OW 259
20964: PUSH
20965: LD_INT 3
20967: MUL
20968: MUL
20969: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
20970: LD_VAR 0 6
20974: PPUSH
20975: CALL_OW 264
20979: PUSH
20980: LD_INT 5
20982: PUSH
20983: LD_INT 6
20985: PUSH
20986: LD_INT 46
20988: PUSH
20989: LD_INT 44
20991: PUSH
20992: LD_INT 47
20994: PUSH
20995: LD_INT 45
20997: PUSH
20998: LD_INT 28
21000: PUSH
21001: LD_INT 7
21003: PUSH
21004: LD_INT 27
21006: PUSH
21007: LD_INT 29
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: IN
21022: PUSH
21023: LD_VAR 0 1
21027: PPUSH
21028: LD_INT 52
21030: PPUSH
21031: CALL_OW 321
21035: PUSH
21036: LD_INT 2
21038: EQUAL
21039: AND
21040: IFFALSE 21057
// bpoints := bpoints * 1.2 ;
21042: LD_ADDR_VAR 0 10
21046: PUSH
21047: LD_VAR 0 10
21051: PUSH
21052: LD_REAL  1.20000000000000E+0000
21055: MUL
21056: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
21057: LD_VAR 0 6
21061: PPUSH
21062: CALL_OW 264
21066: PUSH
21067: LD_INT 6
21069: PUSH
21070: LD_INT 46
21072: PUSH
21073: LD_INT 47
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: LIST
21080: IN
21081: IFFALSE 21098
// bpoints := bpoints * 1.2 ;
21083: LD_ADDR_VAR 0 10
21087: PUSH
21088: LD_VAR 0 10
21092: PUSH
21093: LD_REAL  1.20000000000000E+0000
21096: MUL
21097: ST_TO_ADDR
// end ; unit_building :
21098: GO 21112
21100: LD_INT 3
21102: DOUBLE
21103: EQUAL
21104: IFTRUE 21108
21106: GO 21111
21108: POP
// ; end ;
21109: GO 21112
21111: POP
// for j = 1 to 3 do
21112: LD_ADDR_VAR 0 7
21116: PUSH
21117: DOUBLE
21118: LD_INT 1
21120: DEC
21121: ST_TO_ADDR
21122: LD_INT 3
21124: PUSH
21125: FOR_TO
21126: IFFALSE 21179
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
21128: LD_ADDR_VAR 0 5
21132: PUSH
21133: LD_VAR 0 5
21137: PPUSH
21138: LD_VAR 0 7
21142: PPUSH
21143: LD_VAR 0 5
21147: PUSH
21148: LD_VAR 0 7
21152: ARRAY
21153: PUSH
21154: LD_VAR 0 9
21158: PUSH
21159: LD_VAR 0 7
21163: ARRAY
21164: PUSH
21165: LD_VAR 0 10
21169: MUL
21170: PLUS
21171: PPUSH
21172: CALL_OW 1
21176: ST_TO_ADDR
21177: GO 21125
21179: POP
21180: POP
// end ;
21181: GO 19658
21183: POP
21184: POP
// result := Replace ( result , 4 , tmp ) ;
21185: LD_ADDR_VAR 0 5
21189: PUSH
21190: LD_VAR 0 5
21194: PPUSH
21195: LD_INT 4
21197: PPUSH
21198: LD_VAR 0 8
21202: PPUSH
21203: CALL_OW 1
21207: ST_TO_ADDR
// end ;
21208: LD_VAR 0 5
21212: RET
// export function DangerAtRange ( unit , range ) ; begin
21213: LD_INT 0
21215: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
21216: LD_ADDR_VAR 0 3
21220: PUSH
21221: LD_VAR 0 1
21225: PPUSH
21226: CALL_OW 255
21230: PPUSH
21231: LD_VAR 0 1
21235: PPUSH
21236: CALL_OW 250
21240: PPUSH
21241: LD_VAR 0 1
21245: PPUSH
21246: CALL_OW 251
21250: PPUSH
21251: LD_VAR 0 2
21255: PPUSH
21256: CALL 19510 0 4
21260: ST_TO_ADDR
// end ;
21261: LD_VAR 0 3
21265: RET
// export function DangerInArea ( side , area ) ; begin
21266: LD_INT 0
21268: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
21269: LD_ADDR_VAR 0 3
21273: PUSH
21274: LD_VAR 0 2
21278: PPUSH
21279: LD_INT 81
21281: PUSH
21282: LD_VAR 0 1
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PPUSH
21291: CALL_OW 70
21295: ST_TO_ADDR
// end ;
21296: LD_VAR 0 3
21300: RET
// export function IsExtension ( b ) ; begin
21301: LD_INT 0
21303: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
21304: LD_ADDR_VAR 0 2
21308: PUSH
21309: LD_VAR 0 1
21313: PUSH
21314: LD_INT 23
21316: PUSH
21317: LD_INT 20
21319: PUSH
21320: LD_INT 22
21322: PUSH
21323: LD_INT 17
21325: PUSH
21326: LD_INT 24
21328: PUSH
21329: LD_INT 21
21331: PUSH
21332: LD_INT 19
21334: PUSH
21335: LD_INT 16
21337: PUSH
21338: LD_INT 25
21340: PUSH
21341: LD_INT 18
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: IN
21356: ST_TO_ADDR
// end ;
21357: LD_VAR 0 2
21361: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
21362: LD_INT 0
21364: PPUSH
21365: PPUSH
21366: PPUSH
// result := [ ] ;
21367: LD_ADDR_VAR 0 4
21371: PUSH
21372: EMPTY
21373: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
21374: LD_ADDR_VAR 0 5
21378: PUSH
21379: LD_VAR 0 2
21383: PPUSH
21384: LD_INT 21
21386: PUSH
21387: LD_INT 3
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: PPUSH
21394: CALL_OW 70
21398: ST_TO_ADDR
// if not tmp then
21399: LD_VAR 0 5
21403: NOT
21404: IFFALSE 21408
// exit ;
21406: GO 21472
// if checkLink then
21408: LD_VAR 0 3
21412: IFFALSE 21462
// begin for i in tmp do
21414: LD_ADDR_VAR 0 6
21418: PUSH
21419: LD_VAR 0 5
21423: PUSH
21424: FOR_IN
21425: IFFALSE 21460
// if GetBase ( i ) <> base then
21427: LD_VAR 0 6
21431: PPUSH
21432: CALL_OW 274
21436: PUSH
21437: LD_VAR 0 1
21441: NONEQUAL
21442: IFFALSE 21458
// ComLinkToBase ( base , i ) ;
21444: LD_VAR 0 1
21448: PPUSH
21449: LD_VAR 0 6
21453: PPUSH
21454: CALL_OW 169
21458: GO 21424
21460: POP
21461: POP
// end ; result := tmp ;
21462: LD_ADDR_VAR 0 4
21466: PUSH
21467: LD_VAR 0 5
21471: ST_TO_ADDR
// end ;
21472: LD_VAR 0 4
21476: RET
// export function ComComplete ( units , b ) ; var i ; begin
21477: LD_INT 0
21479: PPUSH
21480: PPUSH
// if not units then
21481: LD_VAR 0 1
21485: NOT
21486: IFFALSE 21490
// exit ;
21488: GO 21580
// for i in units do
21490: LD_ADDR_VAR 0 4
21494: PUSH
21495: LD_VAR 0 1
21499: PUSH
21500: FOR_IN
21501: IFFALSE 21578
// if BuildingStatus ( b ) = bs_build then
21503: LD_VAR 0 2
21507: PPUSH
21508: CALL_OW 461
21512: PUSH
21513: LD_INT 1
21515: EQUAL
21516: IFFALSE 21576
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
21518: LD_VAR 0 4
21522: PPUSH
21523: LD_STRING h
21525: PUSH
21526: LD_VAR 0 2
21530: PPUSH
21531: CALL_OW 250
21535: PUSH
21536: LD_VAR 0 2
21540: PPUSH
21541: CALL_OW 251
21545: PUSH
21546: LD_VAR 0 2
21550: PUSH
21551: LD_INT 0
21553: PUSH
21554: LD_INT 0
21556: PUSH
21557: LD_INT 0
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: PUSH
21569: EMPTY
21570: LIST
21571: PPUSH
21572: CALL_OW 446
21576: GO 21500
21578: POP
21579: POP
// end ;
21580: LD_VAR 0 3
21584: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
21585: LD_INT 0
21587: PPUSH
21588: PPUSH
21589: PPUSH
21590: PPUSH
21591: PPUSH
21592: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
21593: LD_VAR 0 1
21597: NOT
21598: PUSH
21599: LD_VAR 0 1
21603: PPUSH
21604: CALL_OW 263
21608: PUSH
21609: LD_INT 2
21611: NONEQUAL
21612: OR
21613: IFFALSE 21617
// exit ;
21615: GO 21933
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
21617: LD_ADDR_VAR 0 6
21621: PUSH
21622: LD_INT 22
21624: PUSH
21625: LD_VAR 0 1
21629: PPUSH
21630: CALL_OW 255
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: LD_INT 2
21641: PUSH
21642: LD_INT 30
21644: PUSH
21645: LD_INT 36
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 34
21654: PUSH
21655: LD_INT 31
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: LIST
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PPUSH
21671: CALL_OW 69
21675: ST_TO_ADDR
// if not tmp then
21676: LD_VAR 0 6
21680: NOT
21681: IFFALSE 21685
// exit ;
21683: GO 21933
// result := [ ] ;
21685: LD_ADDR_VAR 0 2
21689: PUSH
21690: EMPTY
21691: ST_TO_ADDR
// for i in tmp do
21692: LD_ADDR_VAR 0 3
21696: PUSH
21697: LD_VAR 0 6
21701: PUSH
21702: FOR_IN
21703: IFFALSE 21774
// begin t := UnitsInside ( i ) ;
21705: LD_ADDR_VAR 0 4
21709: PUSH
21710: LD_VAR 0 3
21714: PPUSH
21715: CALL_OW 313
21719: ST_TO_ADDR
// if t then
21720: LD_VAR 0 4
21724: IFFALSE 21772
// for j in t do
21726: LD_ADDR_VAR 0 7
21730: PUSH
21731: LD_VAR 0 4
21735: PUSH
21736: FOR_IN
21737: IFFALSE 21770
// result := Replace ( result , result + 1 , j ) ;
21739: LD_ADDR_VAR 0 2
21743: PUSH
21744: LD_VAR 0 2
21748: PPUSH
21749: LD_VAR 0 2
21753: PUSH
21754: LD_INT 1
21756: PLUS
21757: PPUSH
21758: LD_VAR 0 7
21762: PPUSH
21763: CALL_OW 1
21767: ST_TO_ADDR
21768: GO 21736
21770: POP
21771: POP
// end ;
21772: GO 21702
21774: POP
21775: POP
// if not result then
21776: LD_VAR 0 2
21780: NOT
21781: IFFALSE 21785
// exit ;
21783: GO 21933
// mech := result [ 1 ] ;
21785: LD_ADDR_VAR 0 5
21789: PUSH
21790: LD_VAR 0 2
21794: PUSH
21795: LD_INT 1
21797: ARRAY
21798: ST_TO_ADDR
// if result > 1 then
21799: LD_VAR 0 2
21803: PUSH
21804: LD_INT 1
21806: GREATER
21807: IFFALSE 21919
// begin for i = 2 to result do
21809: LD_ADDR_VAR 0 3
21813: PUSH
21814: DOUBLE
21815: LD_INT 2
21817: DEC
21818: ST_TO_ADDR
21819: LD_VAR 0 2
21823: PUSH
21824: FOR_TO
21825: IFFALSE 21917
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
21827: LD_ADDR_VAR 0 4
21831: PUSH
21832: LD_VAR 0 2
21836: PUSH
21837: LD_VAR 0 3
21841: ARRAY
21842: PPUSH
21843: LD_INT 3
21845: PPUSH
21846: CALL_OW 259
21850: PUSH
21851: LD_VAR 0 2
21855: PUSH
21856: LD_VAR 0 3
21860: ARRAY
21861: PPUSH
21862: CALL_OW 432
21866: MINUS
21867: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
21868: LD_VAR 0 4
21872: PUSH
21873: LD_VAR 0 5
21877: PPUSH
21878: LD_INT 3
21880: PPUSH
21881: CALL_OW 259
21885: PUSH
21886: LD_VAR 0 5
21890: PPUSH
21891: CALL_OW 432
21895: MINUS
21896: GREATEREQUAL
21897: IFFALSE 21915
// mech := result [ i ] ;
21899: LD_ADDR_VAR 0 5
21903: PUSH
21904: LD_VAR 0 2
21908: PUSH
21909: LD_VAR 0 3
21913: ARRAY
21914: ST_TO_ADDR
// end ;
21915: GO 21824
21917: POP
21918: POP
// end ; ComLinkTo ( vehicle , mech ) ;
21919: LD_VAR 0 1
21923: PPUSH
21924: LD_VAR 0 5
21928: PPUSH
21929: CALL_OW 135
// end ;
21933: LD_VAR 0 2
21937: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
21938: LD_INT 0
21940: PPUSH
21941: PPUSH
21942: PPUSH
21943: PPUSH
21944: PPUSH
21945: PPUSH
21946: PPUSH
21947: PPUSH
21948: PPUSH
21949: PPUSH
21950: PPUSH
21951: PPUSH
21952: PPUSH
// result := [ ] ;
21953: LD_ADDR_VAR 0 7
21957: PUSH
21958: EMPTY
21959: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
21960: LD_VAR 0 1
21964: PPUSH
21965: CALL_OW 266
21969: PUSH
21970: LD_INT 0
21972: PUSH
21973: LD_INT 1
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: IN
21980: NOT
21981: IFFALSE 21985
// exit ;
21983: GO 23619
// if name then
21985: LD_VAR 0 3
21989: IFFALSE 22005
// SetBName ( base_dep , name ) ;
21991: LD_VAR 0 1
21995: PPUSH
21996: LD_VAR 0 3
22000: PPUSH
22001: CALL_OW 500
// base := GetBase ( base_dep ) ;
22005: LD_ADDR_VAR 0 15
22009: PUSH
22010: LD_VAR 0 1
22014: PPUSH
22015: CALL_OW 274
22019: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
22020: LD_ADDR_VAR 0 16
22024: PUSH
22025: LD_VAR 0 1
22029: PPUSH
22030: CALL_OW 255
22034: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
22035: LD_ADDR_VAR 0 17
22039: PUSH
22040: LD_VAR 0 1
22044: PPUSH
22045: CALL_OW 248
22049: ST_TO_ADDR
// if sources then
22050: LD_VAR 0 5
22054: IFFALSE 22101
// for i = 1 to 3 do
22056: LD_ADDR_VAR 0 8
22060: PUSH
22061: DOUBLE
22062: LD_INT 1
22064: DEC
22065: ST_TO_ADDR
22066: LD_INT 3
22068: PUSH
22069: FOR_TO
22070: IFFALSE 22099
// AddResourceType ( base , i , sources [ i ] ) ;
22072: LD_VAR 0 15
22076: PPUSH
22077: LD_VAR 0 8
22081: PPUSH
22082: LD_VAR 0 5
22086: PUSH
22087: LD_VAR 0 8
22091: ARRAY
22092: PPUSH
22093: CALL_OW 276
22097: GO 22069
22099: POP
22100: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
22101: LD_ADDR_VAR 0 18
22105: PUSH
22106: LD_VAR 0 15
22110: PPUSH
22111: LD_VAR 0 2
22115: PPUSH
22116: LD_INT 1
22118: PPUSH
22119: CALL 21362 0 3
22123: ST_TO_ADDR
// InitHc ;
22124: CALL_OW 19
// InitUc ;
22128: CALL_OW 18
// uc_side := side ;
22132: LD_ADDR_OWVAR 20
22136: PUSH
22137: LD_VAR 0 16
22141: ST_TO_ADDR
// uc_nation := nation ;
22142: LD_ADDR_OWVAR 21
22146: PUSH
22147: LD_VAR 0 17
22151: ST_TO_ADDR
// if buildings then
22152: LD_VAR 0 18
22156: IFFALSE 23478
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
22158: LD_ADDR_VAR 0 19
22162: PUSH
22163: LD_VAR 0 18
22167: PPUSH
22168: LD_INT 2
22170: PUSH
22171: LD_INT 30
22173: PUSH
22174: LD_INT 29
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PUSH
22181: LD_INT 30
22183: PUSH
22184: LD_INT 30
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: LIST
22195: PPUSH
22196: CALL_OW 72
22200: ST_TO_ADDR
// if tmp then
22201: LD_VAR 0 19
22205: IFFALSE 22253
// for i in tmp do
22207: LD_ADDR_VAR 0 8
22211: PUSH
22212: LD_VAR 0 19
22216: PUSH
22217: FOR_IN
22218: IFFALSE 22251
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
22220: LD_VAR 0 8
22224: PPUSH
22225: CALL_OW 250
22229: PPUSH
22230: LD_VAR 0 8
22234: PPUSH
22235: CALL_OW 251
22239: PPUSH
22240: LD_VAR 0 16
22244: PPUSH
22245: CALL_OW 441
22249: GO 22217
22251: POP
22252: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
22253: LD_VAR 0 18
22257: PPUSH
22258: LD_INT 2
22260: PUSH
22261: LD_INT 30
22263: PUSH
22264: LD_INT 32
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PUSH
22271: LD_INT 30
22273: PUSH
22274: LD_INT 33
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: LIST
22285: PPUSH
22286: CALL_OW 72
22290: IFFALSE 22378
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
22292: LD_ADDR_VAR 0 8
22296: PUSH
22297: LD_VAR 0 18
22301: PPUSH
22302: LD_INT 2
22304: PUSH
22305: LD_INT 30
22307: PUSH
22308: LD_INT 32
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: PUSH
22315: LD_INT 30
22317: PUSH
22318: LD_INT 33
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: LIST
22329: PPUSH
22330: CALL_OW 72
22334: PUSH
22335: FOR_IN
22336: IFFALSE 22376
// begin if not GetBWeapon ( i ) then
22338: LD_VAR 0 8
22342: PPUSH
22343: CALL_OW 269
22347: NOT
22348: IFFALSE 22374
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
22350: LD_VAR 0 8
22354: PPUSH
22355: LD_VAR 0 8
22359: PPUSH
22360: LD_VAR 0 2
22364: PPUSH
22365: CALL 23624 0 2
22369: PPUSH
22370: CALL_OW 431
// end ;
22374: GO 22335
22376: POP
22377: POP
// end ; for i = 1 to personel do
22378: LD_ADDR_VAR 0 8
22382: PUSH
22383: DOUBLE
22384: LD_INT 1
22386: DEC
22387: ST_TO_ADDR
22388: LD_VAR 0 6
22392: PUSH
22393: FOR_TO
22394: IFFALSE 23458
// begin if i > 4 then
22396: LD_VAR 0 8
22400: PUSH
22401: LD_INT 4
22403: GREATER
22404: IFFALSE 22408
// break ;
22406: GO 23458
// case i of 1 :
22408: LD_VAR 0 8
22412: PUSH
22413: LD_INT 1
22415: DOUBLE
22416: EQUAL
22417: IFTRUE 22421
22419: GO 22501
22421: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
22422: LD_ADDR_VAR 0 12
22426: PUSH
22427: LD_VAR 0 18
22431: PPUSH
22432: LD_INT 22
22434: PUSH
22435: LD_VAR 0 16
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: LD_INT 58
22446: PUSH
22447: EMPTY
22448: LIST
22449: PUSH
22450: LD_INT 2
22452: PUSH
22453: LD_INT 30
22455: PUSH
22456: LD_INT 32
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: LD_INT 30
22465: PUSH
22466: LD_INT 4
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: PUSH
22473: LD_INT 30
22475: PUSH
22476: LD_INT 5
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: LIST
22493: PPUSH
22494: CALL_OW 72
22498: ST_TO_ADDR
22499: GO 22723
22501: LD_INT 2
22503: DOUBLE
22504: EQUAL
22505: IFTRUE 22509
22507: GO 22571
22509: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
22510: LD_ADDR_VAR 0 12
22514: PUSH
22515: LD_VAR 0 18
22519: PPUSH
22520: LD_INT 22
22522: PUSH
22523: LD_VAR 0 16
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PUSH
22532: LD_INT 2
22534: PUSH
22535: LD_INT 30
22537: PUSH
22538: LD_INT 0
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: PUSH
22545: LD_INT 30
22547: PUSH
22548: LD_INT 1
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: LIST
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PPUSH
22564: CALL_OW 72
22568: ST_TO_ADDR
22569: GO 22723
22571: LD_INT 3
22573: DOUBLE
22574: EQUAL
22575: IFTRUE 22579
22577: GO 22641
22579: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
22580: LD_ADDR_VAR 0 12
22584: PUSH
22585: LD_VAR 0 18
22589: PPUSH
22590: LD_INT 22
22592: PUSH
22593: LD_VAR 0 16
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: LD_INT 2
22604: PUSH
22605: LD_INT 30
22607: PUSH
22608: LD_INT 2
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 30
22617: PUSH
22618: LD_INT 3
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: LIST
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PPUSH
22634: CALL_OW 72
22638: ST_TO_ADDR
22639: GO 22723
22641: LD_INT 4
22643: DOUBLE
22644: EQUAL
22645: IFTRUE 22649
22647: GO 22722
22649: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
22650: LD_ADDR_VAR 0 12
22654: PUSH
22655: LD_VAR 0 18
22659: PPUSH
22660: LD_INT 22
22662: PUSH
22663: LD_VAR 0 16
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 2
22674: PUSH
22675: LD_INT 30
22677: PUSH
22678: LD_INT 6
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: PUSH
22685: LD_INT 30
22687: PUSH
22688: LD_INT 7
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: LD_INT 30
22697: PUSH
22698: LD_INT 8
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: PUSH
22705: EMPTY
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PPUSH
22715: CALL_OW 72
22719: ST_TO_ADDR
22720: GO 22723
22722: POP
// if i = 1 then
22723: LD_VAR 0 8
22727: PUSH
22728: LD_INT 1
22730: EQUAL
22731: IFFALSE 22842
// begin tmp := [ ] ;
22733: LD_ADDR_VAR 0 19
22737: PUSH
22738: EMPTY
22739: ST_TO_ADDR
// for j in f do
22740: LD_ADDR_VAR 0 9
22744: PUSH
22745: LD_VAR 0 12
22749: PUSH
22750: FOR_IN
22751: IFFALSE 22824
// if GetBType ( j ) = b_bunker then
22753: LD_VAR 0 9
22757: PPUSH
22758: CALL_OW 266
22762: PUSH
22763: LD_INT 32
22765: EQUAL
22766: IFFALSE 22793
// tmp := Insert ( tmp , 1 , j ) else
22768: LD_ADDR_VAR 0 19
22772: PUSH
22773: LD_VAR 0 19
22777: PPUSH
22778: LD_INT 1
22780: PPUSH
22781: LD_VAR 0 9
22785: PPUSH
22786: CALL_OW 2
22790: ST_TO_ADDR
22791: GO 22822
// tmp := Insert ( tmp , tmp + 1 , j ) ;
22793: LD_ADDR_VAR 0 19
22797: PUSH
22798: LD_VAR 0 19
22802: PPUSH
22803: LD_VAR 0 19
22807: PUSH
22808: LD_INT 1
22810: PLUS
22811: PPUSH
22812: LD_VAR 0 9
22816: PPUSH
22817: CALL_OW 2
22821: ST_TO_ADDR
22822: GO 22750
22824: POP
22825: POP
// if tmp then
22826: LD_VAR 0 19
22830: IFFALSE 22842
// f := tmp ;
22832: LD_ADDR_VAR 0 12
22836: PUSH
22837: LD_VAR 0 19
22841: ST_TO_ADDR
// end ; x := personel [ i ] ;
22842: LD_ADDR_VAR 0 13
22846: PUSH
22847: LD_VAR 0 6
22851: PUSH
22852: LD_VAR 0 8
22856: ARRAY
22857: ST_TO_ADDR
// if x = - 1 then
22858: LD_VAR 0 13
22862: PUSH
22863: LD_INT 1
22865: NEG
22866: EQUAL
22867: IFFALSE 23076
// begin for j in f do
22869: LD_ADDR_VAR 0 9
22873: PUSH
22874: LD_VAR 0 12
22878: PUSH
22879: FOR_IN
22880: IFFALSE 23072
// repeat InitHc ;
22882: CALL_OW 19
// if GetBType ( j ) = b_barracks then
22886: LD_VAR 0 9
22890: PPUSH
22891: CALL_OW 266
22895: PUSH
22896: LD_INT 5
22898: EQUAL
22899: IFFALSE 22969
// begin if UnitsInside ( j ) < 3 then
22901: LD_VAR 0 9
22905: PPUSH
22906: CALL_OW 313
22910: PUSH
22911: LD_INT 3
22913: LESS
22914: IFFALSE 22950
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22916: LD_INT 0
22918: PPUSH
22919: LD_INT 5
22921: PUSH
22922: LD_INT 8
22924: PUSH
22925: LD_INT 9
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: LIST
22932: PUSH
22933: LD_VAR 0 17
22937: ARRAY
22938: PPUSH
22939: LD_VAR 0 4
22943: PPUSH
22944: CALL_OW 380
22948: GO 22967
// PrepareHuman ( false , i , skill ) ;
22950: LD_INT 0
22952: PPUSH
22953: LD_VAR 0 8
22957: PPUSH
22958: LD_VAR 0 4
22962: PPUSH
22963: CALL_OW 380
// end else
22967: GO 22986
// PrepareHuman ( false , i , skill ) ;
22969: LD_INT 0
22971: PPUSH
22972: LD_VAR 0 8
22976: PPUSH
22977: LD_VAR 0 4
22981: PPUSH
22982: CALL_OW 380
// un := CreateHuman ;
22986: LD_ADDR_VAR 0 14
22990: PUSH
22991: CALL_OW 44
22995: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22996: LD_ADDR_VAR 0 7
23000: PUSH
23001: LD_VAR 0 7
23005: PPUSH
23006: LD_INT 1
23008: PPUSH
23009: LD_VAR 0 14
23013: PPUSH
23014: CALL_OW 2
23018: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
23019: LD_VAR 0 14
23023: PPUSH
23024: LD_VAR 0 9
23028: PPUSH
23029: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
23033: LD_VAR 0 9
23037: PPUSH
23038: CALL_OW 313
23042: PUSH
23043: LD_INT 6
23045: EQUAL
23046: PUSH
23047: LD_VAR 0 9
23051: PPUSH
23052: CALL_OW 266
23056: PUSH
23057: LD_INT 32
23059: PUSH
23060: LD_INT 31
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: IN
23067: OR
23068: IFFALSE 22882
23070: GO 22879
23072: POP
23073: POP
// end else
23074: GO 23456
// for j = 1 to x do
23076: LD_ADDR_VAR 0 9
23080: PUSH
23081: DOUBLE
23082: LD_INT 1
23084: DEC
23085: ST_TO_ADDR
23086: LD_VAR 0 13
23090: PUSH
23091: FOR_TO
23092: IFFALSE 23454
// begin InitHc ;
23094: CALL_OW 19
// if not f then
23098: LD_VAR 0 12
23102: NOT
23103: IFFALSE 23192
// begin PrepareHuman ( false , i , skill ) ;
23105: LD_INT 0
23107: PPUSH
23108: LD_VAR 0 8
23112: PPUSH
23113: LD_VAR 0 4
23117: PPUSH
23118: CALL_OW 380
// un := CreateHuman ;
23122: LD_ADDR_VAR 0 14
23126: PUSH
23127: CALL_OW 44
23131: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23132: LD_ADDR_VAR 0 7
23136: PUSH
23137: LD_VAR 0 7
23141: PPUSH
23142: LD_INT 1
23144: PPUSH
23145: LD_VAR 0 14
23149: PPUSH
23150: CALL_OW 2
23154: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23155: LD_VAR 0 14
23159: PPUSH
23160: LD_VAR 0 1
23164: PPUSH
23165: CALL_OW 250
23169: PPUSH
23170: LD_VAR 0 1
23174: PPUSH
23175: CALL_OW 251
23179: PPUSH
23180: LD_INT 10
23182: PPUSH
23183: LD_INT 0
23185: PPUSH
23186: CALL_OW 50
// continue ;
23190: GO 23091
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
23192: LD_VAR 0 12
23196: PUSH
23197: LD_INT 1
23199: ARRAY
23200: PPUSH
23201: CALL_OW 313
23205: PUSH
23206: LD_VAR 0 12
23210: PUSH
23211: LD_INT 1
23213: ARRAY
23214: PPUSH
23215: CALL_OW 266
23219: PUSH
23220: LD_INT 32
23222: PUSH
23223: LD_INT 31
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: IN
23230: AND
23231: PUSH
23232: LD_VAR 0 12
23236: PUSH
23237: LD_INT 1
23239: ARRAY
23240: PPUSH
23241: CALL_OW 313
23245: PUSH
23246: LD_INT 6
23248: EQUAL
23249: OR
23250: IFFALSE 23270
// f := Delete ( f , 1 ) ;
23252: LD_ADDR_VAR 0 12
23256: PUSH
23257: LD_VAR 0 12
23261: PPUSH
23262: LD_INT 1
23264: PPUSH
23265: CALL_OW 3
23269: ST_TO_ADDR
// if not f then
23270: LD_VAR 0 12
23274: NOT
23275: IFFALSE 23293
// begin x := x + 2 ;
23277: LD_ADDR_VAR 0 13
23281: PUSH
23282: LD_VAR 0 13
23286: PUSH
23287: LD_INT 2
23289: PLUS
23290: ST_TO_ADDR
// continue ;
23291: GO 23091
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
23293: LD_VAR 0 12
23297: PUSH
23298: LD_INT 1
23300: ARRAY
23301: PPUSH
23302: CALL_OW 266
23306: PUSH
23307: LD_INT 5
23309: EQUAL
23310: IFFALSE 23384
// begin if UnitsInside ( f [ 1 ] ) < 3 then
23312: LD_VAR 0 12
23316: PUSH
23317: LD_INT 1
23319: ARRAY
23320: PPUSH
23321: CALL_OW 313
23325: PUSH
23326: LD_INT 3
23328: LESS
23329: IFFALSE 23365
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23331: LD_INT 0
23333: PPUSH
23334: LD_INT 5
23336: PUSH
23337: LD_INT 8
23339: PUSH
23340: LD_INT 9
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: LIST
23347: PUSH
23348: LD_VAR 0 17
23352: ARRAY
23353: PPUSH
23354: LD_VAR 0 4
23358: PPUSH
23359: CALL_OW 380
23363: GO 23382
// PrepareHuman ( false , i , skill ) ;
23365: LD_INT 0
23367: PPUSH
23368: LD_VAR 0 8
23372: PPUSH
23373: LD_VAR 0 4
23377: PPUSH
23378: CALL_OW 380
// end else
23382: GO 23401
// PrepareHuman ( false , i , skill ) ;
23384: LD_INT 0
23386: PPUSH
23387: LD_VAR 0 8
23391: PPUSH
23392: LD_VAR 0 4
23396: PPUSH
23397: CALL_OW 380
// un := CreateHuman ;
23401: LD_ADDR_VAR 0 14
23405: PUSH
23406: CALL_OW 44
23410: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23411: LD_ADDR_VAR 0 7
23415: PUSH
23416: LD_VAR 0 7
23420: PPUSH
23421: LD_INT 1
23423: PPUSH
23424: LD_VAR 0 14
23428: PPUSH
23429: CALL_OW 2
23433: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
23434: LD_VAR 0 14
23438: PPUSH
23439: LD_VAR 0 12
23443: PUSH
23444: LD_INT 1
23446: ARRAY
23447: PPUSH
23448: CALL_OW 52
// end ;
23452: GO 23091
23454: POP
23455: POP
// end ;
23456: GO 22393
23458: POP
23459: POP
// result := result ^ buildings ;
23460: LD_ADDR_VAR 0 7
23464: PUSH
23465: LD_VAR 0 7
23469: PUSH
23470: LD_VAR 0 18
23474: ADD
23475: ST_TO_ADDR
// end else
23476: GO 23619
// begin for i = 1 to personel do
23478: LD_ADDR_VAR 0 8
23482: PUSH
23483: DOUBLE
23484: LD_INT 1
23486: DEC
23487: ST_TO_ADDR
23488: LD_VAR 0 6
23492: PUSH
23493: FOR_TO
23494: IFFALSE 23617
// begin if i > 4 then
23496: LD_VAR 0 8
23500: PUSH
23501: LD_INT 4
23503: GREATER
23504: IFFALSE 23508
// break ;
23506: GO 23617
// x := personel [ i ] ;
23508: LD_ADDR_VAR 0 13
23512: PUSH
23513: LD_VAR 0 6
23517: PUSH
23518: LD_VAR 0 8
23522: ARRAY
23523: ST_TO_ADDR
// if x = - 1 then
23524: LD_VAR 0 13
23528: PUSH
23529: LD_INT 1
23531: NEG
23532: EQUAL
23533: IFFALSE 23537
// continue ;
23535: GO 23493
// PrepareHuman ( false , i , skill ) ;
23537: LD_INT 0
23539: PPUSH
23540: LD_VAR 0 8
23544: PPUSH
23545: LD_VAR 0 4
23549: PPUSH
23550: CALL_OW 380
// un := CreateHuman ;
23554: LD_ADDR_VAR 0 14
23558: PUSH
23559: CALL_OW 44
23563: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23564: LD_VAR 0 14
23568: PPUSH
23569: LD_VAR 0 1
23573: PPUSH
23574: CALL_OW 250
23578: PPUSH
23579: LD_VAR 0 1
23583: PPUSH
23584: CALL_OW 251
23588: PPUSH
23589: LD_INT 10
23591: PPUSH
23592: LD_INT 0
23594: PPUSH
23595: CALL_OW 50
// result := result ^ un ;
23599: LD_ADDR_VAR 0 7
23603: PUSH
23604: LD_VAR 0 7
23608: PUSH
23609: LD_VAR 0 14
23613: ADD
23614: ST_TO_ADDR
// end ;
23615: GO 23493
23617: POP
23618: POP
// end ; end ;
23619: LD_VAR 0 7
23623: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
23624: LD_INT 0
23626: PPUSH
23627: PPUSH
23628: PPUSH
23629: PPUSH
23630: PPUSH
23631: PPUSH
23632: PPUSH
23633: PPUSH
23634: PPUSH
23635: PPUSH
23636: PPUSH
23637: PPUSH
23638: PPUSH
23639: PPUSH
23640: PPUSH
23641: PPUSH
// result := false ;
23642: LD_ADDR_VAR 0 3
23646: PUSH
23647: LD_INT 0
23649: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
23650: LD_VAR 0 1
23654: NOT
23655: PUSH
23656: LD_VAR 0 1
23660: PPUSH
23661: CALL_OW 266
23665: PUSH
23666: LD_INT 32
23668: PUSH
23669: LD_INT 33
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: IN
23676: NOT
23677: OR
23678: IFFALSE 23682
// exit ;
23680: GO 24791
// nat := GetNation ( tower ) ;
23682: LD_ADDR_VAR 0 12
23686: PUSH
23687: LD_VAR 0 1
23691: PPUSH
23692: CALL_OW 248
23696: ST_TO_ADDR
// side := GetSide ( tower ) ;
23697: LD_ADDR_VAR 0 16
23701: PUSH
23702: LD_VAR 0 1
23706: PPUSH
23707: CALL_OW 255
23711: ST_TO_ADDR
// x := GetX ( tower ) ;
23712: LD_ADDR_VAR 0 10
23716: PUSH
23717: LD_VAR 0 1
23721: PPUSH
23722: CALL_OW 250
23726: ST_TO_ADDR
// y := GetY ( tower ) ;
23727: LD_ADDR_VAR 0 11
23731: PUSH
23732: LD_VAR 0 1
23736: PPUSH
23737: CALL_OW 251
23741: ST_TO_ADDR
// if not x or not y then
23742: LD_VAR 0 10
23746: NOT
23747: PUSH
23748: LD_VAR 0 11
23752: NOT
23753: OR
23754: IFFALSE 23758
// exit ;
23756: GO 24791
// weapon := 0 ;
23758: LD_ADDR_VAR 0 18
23762: PUSH
23763: LD_INT 0
23765: ST_TO_ADDR
// fac_list := [ ] ;
23766: LD_ADDR_VAR 0 17
23770: PUSH
23771: EMPTY
23772: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
23773: LD_ADDR_VAR 0 6
23777: PUSH
23778: LD_VAR 0 1
23782: PPUSH
23783: CALL_OW 274
23787: PPUSH
23788: LD_VAR 0 2
23792: PPUSH
23793: LD_INT 0
23795: PPUSH
23796: CALL 21362 0 3
23800: PPUSH
23801: LD_INT 30
23803: PUSH
23804: LD_INT 3
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: PPUSH
23811: CALL_OW 72
23815: ST_TO_ADDR
// if not factories then
23816: LD_VAR 0 6
23820: NOT
23821: IFFALSE 23825
// exit ;
23823: GO 24791
// for i in factories do
23825: LD_ADDR_VAR 0 8
23829: PUSH
23830: LD_VAR 0 6
23834: PUSH
23835: FOR_IN
23836: IFFALSE 23861
// fac_list := fac_list union AvailableWeaponList ( i ) ;
23838: LD_ADDR_VAR 0 17
23842: PUSH
23843: LD_VAR 0 17
23847: PUSH
23848: LD_VAR 0 8
23852: PPUSH
23853: CALL_OW 478
23857: UNION
23858: ST_TO_ADDR
23859: GO 23835
23861: POP
23862: POP
// if not fac_list then
23863: LD_VAR 0 17
23867: NOT
23868: IFFALSE 23872
// exit ;
23870: GO 24791
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
23872: LD_ADDR_VAR 0 5
23876: PUSH
23877: LD_INT 4
23879: PUSH
23880: LD_INT 5
23882: PUSH
23883: LD_INT 9
23885: PUSH
23886: LD_INT 10
23888: PUSH
23889: LD_INT 6
23891: PUSH
23892: LD_INT 7
23894: PUSH
23895: LD_INT 11
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: PUSH
23907: LD_INT 27
23909: PUSH
23910: LD_INT 28
23912: PUSH
23913: LD_INT 26
23915: PUSH
23916: LD_INT 30
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 43
23927: PUSH
23928: LD_INT 44
23930: PUSH
23931: LD_INT 46
23933: PUSH
23934: LD_INT 45
23936: PUSH
23937: LD_INT 47
23939: PUSH
23940: LD_INT 49
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: LIST
23955: PUSH
23956: LD_VAR 0 12
23960: ARRAY
23961: ST_TO_ADDR
// list := list isect fac_list ;
23962: LD_ADDR_VAR 0 5
23966: PUSH
23967: LD_VAR 0 5
23971: PUSH
23972: LD_VAR 0 17
23976: ISECT
23977: ST_TO_ADDR
// if not list then
23978: LD_VAR 0 5
23982: NOT
23983: IFFALSE 23987
// exit ;
23985: GO 24791
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
23987: LD_VAR 0 12
23991: PUSH
23992: LD_INT 3
23994: EQUAL
23995: PUSH
23996: LD_INT 49
23998: PUSH
23999: LD_VAR 0 5
24003: IN
24004: AND
24005: PUSH
24006: LD_INT 31
24008: PPUSH
24009: LD_VAR 0 16
24013: PPUSH
24014: CALL_OW 321
24018: PUSH
24019: LD_INT 2
24021: EQUAL
24022: AND
24023: IFFALSE 24083
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
24025: LD_INT 22
24027: PUSH
24028: LD_VAR 0 16
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 35
24039: PUSH
24040: LD_INT 49
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 91
24049: PUSH
24050: LD_VAR 0 1
24054: PUSH
24055: LD_INT 10
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: LIST
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: LIST
24067: PPUSH
24068: CALL_OW 69
24072: NOT
24073: IFFALSE 24083
// weapon := ru_time_lapser ;
24075: LD_ADDR_VAR 0 18
24079: PUSH
24080: LD_INT 49
24082: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
24083: LD_VAR 0 12
24087: PUSH
24088: LD_INT 1
24090: PUSH
24091: LD_INT 2
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: IN
24098: PUSH
24099: LD_INT 11
24101: PUSH
24102: LD_VAR 0 5
24106: IN
24107: PUSH
24108: LD_INT 30
24110: PUSH
24111: LD_VAR 0 5
24115: IN
24116: OR
24117: AND
24118: PUSH
24119: LD_INT 6
24121: PPUSH
24122: LD_VAR 0 16
24126: PPUSH
24127: CALL_OW 321
24131: PUSH
24132: LD_INT 2
24134: EQUAL
24135: AND
24136: IFFALSE 24301
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
24138: LD_INT 22
24140: PUSH
24141: LD_VAR 0 16
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: LD_INT 2
24152: PUSH
24153: LD_INT 35
24155: PUSH
24156: LD_INT 11
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: LD_INT 35
24165: PUSH
24166: LD_INT 30
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: LIST
24177: PUSH
24178: LD_INT 91
24180: PUSH
24181: LD_VAR 0 1
24185: PUSH
24186: LD_INT 18
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: LIST
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: LIST
24198: PPUSH
24199: CALL_OW 69
24203: NOT
24204: PUSH
24205: LD_INT 22
24207: PUSH
24208: LD_VAR 0 16
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PUSH
24217: LD_INT 2
24219: PUSH
24220: LD_INT 30
24222: PUSH
24223: LD_INT 32
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: LD_INT 30
24232: PUSH
24233: LD_INT 33
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 91
24247: PUSH
24248: LD_VAR 0 1
24252: PUSH
24253: LD_INT 12
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: LIST
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: LIST
24265: PUSH
24266: EMPTY
24267: LIST
24268: PPUSH
24269: CALL_OW 69
24273: PUSH
24274: LD_INT 2
24276: GREATER
24277: AND
24278: IFFALSE 24301
// weapon := [ us_radar , ar_radar ] [ nat ] ;
24280: LD_ADDR_VAR 0 18
24284: PUSH
24285: LD_INT 11
24287: PUSH
24288: LD_INT 30
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PUSH
24295: LD_VAR 0 12
24299: ARRAY
24300: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
24301: LD_VAR 0 18
24305: NOT
24306: PUSH
24307: LD_INT 40
24309: PPUSH
24310: LD_VAR 0 16
24314: PPUSH
24315: CALL_OW 321
24319: PUSH
24320: LD_INT 2
24322: EQUAL
24323: AND
24324: PUSH
24325: LD_INT 7
24327: PUSH
24328: LD_VAR 0 5
24332: IN
24333: PUSH
24334: LD_INT 28
24336: PUSH
24337: LD_VAR 0 5
24341: IN
24342: OR
24343: PUSH
24344: LD_INT 45
24346: PUSH
24347: LD_VAR 0 5
24351: IN
24352: OR
24353: AND
24354: IFFALSE 24608
// begin hex := GetHexInfo ( x , y ) ;
24356: LD_ADDR_VAR 0 4
24360: PUSH
24361: LD_VAR 0 10
24365: PPUSH
24366: LD_VAR 0 11
24370: PPUSH
24371: CALL_OW 546
24375: ST_TO_ADDR
// if hex [ 1 ] then
24376: LD_VAR 0 4
24380: PUSH
24381: LD_INT 1
24383: ARRAY
24384: IFFALSE 24388
// exit ;
24386: GO 24791
// height := hex [ 2 ] ;
24388: LD_ADDR_VAR 0 15
24392: PUSH
24393: LD_VAR 0 4
24397: PUSH
24398: LD_INT 2
24400: ARRAY
24401: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
24402: LD_ADDR_VAR 0 14
24406: PUSH
24407: LD_INT 0
24409: PUSH
24410: LD_INT 2
24412: PUSH
24413: LD_INT 3
24415: PUSH
24416: LD_INT 5
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: ST_TO_ADDR
// for i in tmp do
24425: LD_ADDR_VAR 0 8
24429: PUSH
24430: LD_VAR 0 14
24434: PUSH
24435: FOR_IN
24436: IFFALSE 24606
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
24438: LD_ADDR_VAR 0 9
24442: PUSH
24443: LD_VAR 0 10
24447: PPUSH
24448: LD_VAR 0 8
24452: PPUSH
24453: LD_INT 5
24455: PPUSH
24456: CALL_OW 272
24460: PUSH
24461: LD_VAR 0 11
24465: PPUSH
24466: LD_VAR 0 8
24470: PPUSH
24471: LD_INT 5
24473: PPUSH
24474: CALL_OW 273
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
24483: LD_VAR 0 9
24487: PUSH
24488: LD_INT 1
24490: ARRAY
24491: PPUSH
24492: LD_VAR 0 9
24496: PUSH
24497: LD_INT 2
24499: ARRAY
24500: PPUSH
24501: CALL_OW 488
24505: IFFALSE 24604
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
24507: LD_ADDR_VAR 0 4
24511: PUSH
24512: LD_VAR 0 9
24516: PUSH
24517: LD_INT 1
24519: ARRAY
24520: PPUSH
24521: LD_VAR 0 9
24525: PUSH
24526: LD_INT 2
24528: ARRAY
24529: PPUSH
24530: CALL_OW 546
24534: ST_TO_ADDR
// if hex [ 1 ] then
24535: LD_VAR 0 4
24539: PUSH
24540: LD_INT 1
24542: ARRAY
24543: IFFALSE 24547
// continue ;
24545: GO 24435
// h := hex [ 2 ] ;
24547: LD_ADDR_VAR 0 13
24551: PUSH
24552: LD_VAR 0 4
24556: PUSH
24557: LD_INT 2
24559: ARRAY
24560: ST_TO_ADDR
// if h + 7 < height then
24561: LD_VAR 0 13
24565: PUSH
24566: LD_INT 7
24568: PLUS
24569: PUSH
24570: LD_VAR 0 15
24574: LESS
24575: IFFALSE 24604
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
24577: LD_ADDR_VAR 0 18
24581: PUSH
24582: LD_INT 7
24584: PUSH
24585: LD_INT 28
24587: PUSH
24588: LD_INT 45
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: LIST
24595: PUSH
24596: LD_VAR 0 12
24600: ARRAY
24601: ST_TO_ADDR
// break ;
24602: GO 24606
// end ; end ; end ;
24604: GO 24435
24606: POP
24607: POP
// end ; if not weapon then
24608: LD_VAR 0 18
24612: NOT
24613: IFFALSE 24673
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
24615: LD_ADDR_VAR 0 5
24619: PUSH
24620: LD_VAR 0 5
24624: PUSH
24625: LD_INT 11
24627: PUSH
24628: LD_INT 30
24630: PUSH
24631: LD_INT 49
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: LIST
24638: DIFF
24639: ST_TO_ADDR
// if not list then
24640: LD_VAR 0 5
24644: NOT
24645: IFFALSE 24649
// exit ;
24647: GO 24791
// weapon := list [ rand ( 1 , list ) ] ;
24649: LD_ADDR_VAR 0 18
24653: PUSH
24654: LD_VAR 0 5
24658: PUSH
24659: LD_INT 1
24661: PPUSH
24662: LD_VAR 0 5
24666: PPUSH
24667: CALL_OW 12
24671: ARRAY
24672: ST_TO_ADDR
// end ; if weapon then
24673: LD_VAR 0 18
24677: IFFALSE 24791
// begin tmp := CostOfWeapon ( weapon ) ;
24679: LD_ADDR_VAR 0 14
24683: PUSH
24684: LD_VAR 0 18
24688: PPUSH
24689: CALL_OW 451
24693: ST_TO_ADDR
// j := GetBase ( tower ) ;
24694: LD_ADDR_VAR 0 9
24698: PUSH
24699: LD_VAR 0 1
24703: PPUSH
24704: CALL_OW 274
24708: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
24709: LD_VAR 0 9
24713: PPUSH
24714: LD_INT 1
24716: PPUSH
24717: CALL_OW 275
24721: PUSH
24722: LD_VAR 0 14
24726: PUSH
24727: LD_INT 1
24729: ARRAY
24730: GREATEREQUAL
24731: PUSH
24732: LD_VAR 0 9
24736: PPUSH
24737: LD_INT 2
24739: PPUSH
24740: CALL_OW 275
24744: PUSH
24745: LD_VAR 0 14
24749: PUSH
24750: LD_INT 2
24752: ARRAY
24753: GREATEREQUAL
24754: AND
24755: PUSH
24756: LD_VAR 0 9
24760: PPUSH
24761: LD_INT 3
24763: PPUSH
24764: CALL_OW 275
24768: PUSH
24769: LD_VAR 0 14
24773: PUSH
24774: LD_INT 3
24776: ARRAY
24777: GREATEREQUAL
24778: AND
24779: IFFALSE 24791
// result := weapon ;
24781: LD_ADDR_VAR 0 3
24785: PUSH
24786: LD_VAR 0 18
24790: ST_TO_ADDR
// end ; end ;
24791: LD_VAR 0 3
24795: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
24796: LD_INT 0
24798: PPUSH
24799: PPUSH
// result := true ;
24800: LD_ADDR_VAR 0 3
24804: PUSH
24805: LD_INT 1
24807: ST_TO_ADDR
// if array1 = array2 then
24808: LD_VAR 0 1
24812: PUSH
24813: LD_VAR 0 2
24817: EQUAL
24818: IFFALSE 24878
// begin for i = 1 to array1 do
24820: LD_ADDR_VAR 0 4
24824: PUSH
24825: DOUBLE
24826: LD_INT 1
24828: DEC
24829: ST_TO_ADDR
24830: LD_VAR 0 1
24834: PUSH
24835: FOR_TO
24836: IFFALSE 24874
// if array1 [ i ] <> array2 [ i ] then
24838: LD_VAR 0 1
24842: PUSH
24843: LD_VAR 0 4
24847: ARRAY
24848: PUSH
24849: LD_VAR 0 2
24853: PUSH
24854: LD_VAR 0 4
24858: ARRAY
24859: NONEQUAL
24860: IFFALSE 24872
// begin result := false ;
24862: LD_ADDR_VAR 0 3
24866: PUSH
24867: LD_INT 0
24869: ST_TO_ADDR
// break ;
24870: GO 24874
// end ;
24872: GO 24835
24874: POP
24875: POP
// end else
24876: GO 24886
// result := false ;
24878: LD_ADDR_VAR 0 3
24882: PUSH
24883: LD_INT 0
24885: ST_TO_ADDR
// end ;
24886: LD_VAR 0 3
24890: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
24891: LD_INT 0
24893: PPUSH
24894: PPUSH
// if not array1 or not array2 then
24895: LD_VAR 0 1
24899: NOT
24900: PUSH
24901: LD_VAR 0 2
24905: NOT
24906: OR
24907: IFFALSE 24911
// exit ;
24909: GO 24975
// result := true ;
24911: LD_ADDR_VAR 0 3
24915: PUSH
24916: LD_INT 1
24918: ST_TO_ADDR
// for i = 1 to array1 do
24919: LD_ADDR_VAR 0 4
24923: PUSH
24924: DOUBLE
24925: LD_INT 1
24927: DEC
24928: ST_TO_ADDR
24929: LD_VAR 0 1
24933: PUSH
24934: FOR_TO
24935: IFFALSE 24973
// if array1 [ i ] <> array2 [ i ] then
24937: LD_VAR 0 1
24941: PUSH
24942: LD_VAR 0 4
24946: ARRAY
24947: PUSH
24948: LD_VAR 0 2
24952: PUSH
24953: LD_VAR 0 4
24957: ARRAY
24958: NONEQUAL
24959: IFFALSE 24971
// begin result := false ;
24961: LD_ADDR_VAR 0 3
24965: PUSH
24966: LD_INT 0
24968: ST_TO_ADDR
// break ;
24969: GO 24973
// end ;
24971: GO 24934
24973: POP
24974: POP
// end ;
24975: LD_VAR 0 3
24979: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
24980: LD_INT 0
24982: PPUSH
24983: PPUSH
24984: PPUSH
// pom := GetBase ( fac ) ;
24985: LD_ADDR_VAR 0 5
24989: PUSH
24990: LD_VAR 0 1
24994: PPUSH
24995: CALL_OW 274
24999: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
25000: LD_ADDR_VAR 0 4
25004: PUSH
25005: LD_VAR 0 2
25009: PUSH
25010: LD_INT 1
25012: ARRAY
25013: PPUSH
25014: LD_VAR 0 2
25018: PUSH
25019: LD_INT 2
25021: ARRAY
25022: PPUSH
25023: LD_VAR 0 2
25027: PUSH
25028: LD_INT 3
25030: ARRAY
25031: PPUSH
25032: LD_VAR 0 2
25036: PUSH
25037: LD_INT 4
25039: ARRAY
25040: PPUSH
25041: CALL_OW 449
25045: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25046: LD_ADDR_VAR 0 3
25050: PUSH
25051: LD_VAR 0 5
25055: PPUSH
25056: LD_INT 1
25058: PPUSH
25059: CALL_OW 275
25063: PUSH
25064: LD_VAR 0 4
25068: PUSH
25069: LD_INT 1
25071: ARRAY
25072: GREATEREQUAL
25073: PUSH
25074: LD_VAR 0 5
25078: PPUSH
25079: LD_INT 2
25081: PPUSH
25082: CALL_OW 275
25086: PUSH
25087: LD_VAR 0 4
25091: PUSH
25092: LD_INT 2
25094: ARRAY
25095: GREATEREQUAL
25096: AND
25097: PUSH
25098: LD_VAR 0 5
25102: PPUSH
25103: LD_INT 3
25105: PPUSH
25106: CALL_OW 275
25110: PUSH
25111: LD_VAR 0 4
25115: PUSH
25116: LD_INT 3
25118: ARRAY
25119: GREATEREQUAL
25120: AND
25121: ST_TO_ADDR
// end ;
25122: LD_VAR 0 3
25126: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
25127: LD_INT 0
25129: PPUSH
25130: PPUSH
25131: PPUSH
25132: PPUSH
// pom := GetBase ( building ) ;
25133: LD_ADDR_VAR 0 3
25137: PUSH
25138: LD_VAR 0 1
25142: PPUSH
25143: CALL_OW 274
25147: ST_TO_ADDR
// if not pom then
25148: LD_VAR 0 3
25152: NOT
25153: IFFALSE 25157
// exit ;
25155: GO 25327
// btype := GetBType ( building ) ;
25157: LD_ADDR_VAR 0 5
25161: PUSH
25162: LD_VAR 0 1
25166: PPUSH
25167: CALL_OW 266
25171: ST_TO_ADDR
// if btype = b_armoury then
25172: LD_VAR 0 5
25176: PUSH
25177: LD_INT 4
25179: EQUAL
25180: IFFALSE 25190
// btype := b_barracks ;
25182: LD_ADDR_VAR 0 5
25186: PUSH
25187: LD_INT 5
25189: ST_TO_ADDR
// if btype = b_depot then
25190: LD_VAR 0 5
25194: PUSH
25195: LD_INT 0
25197: EQUAL
25198: IFFALSE 25208
// btype := b_warehouse ;
25200: LD_ADDR_VAR 0 5
25204: PUSH
25205: LD_INT 1
25207: ST_TO_ADDR
// if btype = b_workshop then
25208: LD_VAR 0 5
25212: PUSH
25213: LD_INT 2
25215: EQUAL
25216: IFFALSE 25226
// btype := b_factory ;
25218: LD_ADDR_VAR 0 5
25222: PUSH
25223: LD_INT 3
25225: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25226: LD_ADDR_VAR 0 4
25230: PUSH
25231: LD_VAR 0 5
25235: PPUSH
25236: LD_VAR 0 1
25240: PPUSH
25241: CALL_OW 248
25245: PPUSH
25246: CALL_OW 450
25250: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25251: LD_ADDR_VAR 0 2
25255: PUSH
25256: LD_VAR 0 3
25260: PPUSH
25261: LD_INT 1
25263: PPUSH
25264: CALL_OW 275
25268: PUSH
25269: LD_VAR 0 4
25273: PUSH
25274: LD_INT 1
25276: ARRAY
25277: GREATEREQUAL
25278: PUSH
25279: LD_VAR 0 3
25283: PPUSH
25284: LD_INT 2
25286: PPUSH
25287: CALL_OW 275
25291: PUSH
25292: LD_VAR 0 4
25296: PUSH
25297: LD_INT 2
25299: ARRAY
25300: GREATEREQUAL
25301: AND
25302: PUSH
25303: LD_VAR 0 3
25307: PPUSH
25308: LD_INT 3
25310: PPUSH
25311: CALL_OW 275
25315: PUSH
25316: LD_VAR 0 4
25320: PUSH
25321: LD_INT 3
25323: ARRAY
25324: GREATEREQUAL
25325: AND
25326: ST_TO_ADDR
// end ;
25327: LD_VAR 0 2
25331: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
25332: LD_INT 0
25334: PPUSH
25335: PPUSH
25336: PPUSH
// pom := GetBase ( building ) ;
25337: LD_ADDR_VAR 0 4
25341: PUSH
25342: LD_VAR 0 1
25346: PPUSH
25347: CALL_OW 274
25351: ST_TO_ADDR
// if not pom then
25352: LD_VAR 0 4
25356: NOT
25357: IFFALSE 25361
// exit ;
25359: GO 25462
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25361: LD_ADDR_VAR 0 5
25365: PUSH
25366: LD_VAR 0 2
25370: PPUSH
25371: LD_VAR 0 1
25375: PPUSH
25376: CALL_OW 248
25380: PPUSH
25381: CALL_OW 450
25385: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25386: LD_ADDR_VAR 0 3
25390: PUSH
25391: LD_VAR 0 4
25395: PPUSH
25396: LD_INT 1
25398: PPUSH
25399: CALL_OW 275
25403: PUSH
25404: LD_VAR 0 5
25408: PUSH
25409: LD_INT 1
25411: ARRAY
25412: GREATEREQUAL
25413: PUSH
25414: LD_VAR 0 4
25418: PPUSH
25419: LD_INT 2
25421: PPUSH
25422: CALL_OW 275
25426: PUSH
25427: LD_VAR 0 5
25431: PUSH
25432: LD_INT 2
25434: ARRAY
25435: GREATEREQUAL
25436: AND
25437: PUSH
25438: LD_VAR 0 4
25442: PPUSH
25443: LD_INT 3
25445: PPUSH
25446: CALL_OW 275
25450: PUSH
25451: LD_VAR 0 5
25455: PUSH
25456: LD_INT 3
25458: ARRAY
25459: GREATEREQUAL
25460: AND
25461: ST_TO_ADDR
// end ;
25462: LD_VAR 0 3
25466: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
25467: LD_INT 0
25469: PPUSH
25470: PPUSH
25471: PPUSH
25472: PPUSH
25473: PPUSH
25474: PPUSH
25475: PPUSH
25476: PPUSH
25477: PPUSH
25478: PPUSH
25479: PPUSH
// result := false ;
25480: LD_ADDR_VAR 0 8
25484: PUSH
25485: LD_INT 0
25487: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
25488: LD_VAR 0 5
25492: NOT
25493: PUSH
25494: LD_VAR 0 1
25498: NOT
25499: OR
25500: PUSH
25501: LD_VAR 0 2
25505: NOT
25506: OR
25507: PUSH
25508: LD_VAR 0 3
25512: NOT
25513: OR
25514: IFFALSE 25518
// exit ;
25516: GO 26332
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
25518: LD_ADDR_VAR 0 14
25522: PUSH
25523: LD_VAR 0 1
25527: PPUSH
25528: LD_VAR 0 2
25532: PPUSH
25533: LD_VAR 0 3
25537: PPUSH
25538: LD_VAR 0 4
25542: PPUSH
25543: LD_VAR 0 5
25547: PUSH
25548: LD_INT 1
25550: ARRAY
25551: PPUSH
25552: CALL_OW 248
25556: PPUSH
25557: LD_INT 0
25559: PPUSH
25560: CALL 27569 0 6
25564: ST_TO_ADDR
// if not hexes then
25565: LD_VAR 0 14
25569: NOT
25570: IFFALSE 25574
// exit ;
25572: GO 26332
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25574: LD_ADDR_VAR 0 17
25578: PUSH
25579: LD_VAR 0 5
25583: PPUSH
25584: LD_INT 22
25586: PUSH
25587: LD_VAR 0 13
25591: PPUSH
25592: CALL_OW 255
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 2
25603: PUSH
25604: LD_INT 30
25606: PUSH
25607: LD_INT 0
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 30
25616: PUSH
25617: LD_INT 1
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: LIST
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PPUSH
25633: CALL_OW 72
25637: ST_TO_ADDR
// for i = 1 to hexes do
25638: LD_ADDR_VAR 0 9
25642: PUSH
25643: DOUBLE
25644: LD_INT 1
25646: DEC
25647: ST_TO_ADDR
25648: LD_VAR 0 14
25652: PUSH
25653: FOR_TO
25654: IFFALSE 26330
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25656: LD_ADDR_VAR 0 13
25660: PUSH
25661: LD_VAR 0 14
25665: PUSH
25666: LD_VAR 0 9
25670: ARRAY
25671: PUSH
25672: LD_INT 1
25674: ARRAY
25675: PPUSH
25676: LD_VAR 0 14
25680: PUSH
25681: LD_VAR 0 9
25685: ARRAY
25686: PUSH
25687: LD_INT 2
25689: ARRAY
25690: PPUSH
25691: CALL_OW 428
25695: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
25696: LD_VAR 0 14
25700: PUSH
25701: LD_VAR 0 9
25705: ARRAY
25706: PUSH
25707: LD_INT 1
25709: ARRAY
25710: PPUSH
25711: LD_VAR 0 14
25715: PUSH
25716: LD_VAR 0 9
25720: ARRAY
25721: PUSH
25722: LD_INT 2
25724: ARRAY
25725: PPUSH
25726: CALL_OW 351
25730: PUSH
25731: LD_VAR 0 14
25735: PUSH
25736: LD_VAR 0 9
25740: ARRAY
25741: PUSH
25742: LD_INT 1
25744: ARRAY
25745: PPUSH
25746: LD_VAR 0 14
25750: PUSH
25751: LD_VAR 0 9
25755: ARRAY
25756: PUSH
25757: LD_INT 2
25759: ARRAY
25760: PPUSH
25761: CALL_OW 488
25765: NOT
25766: OR
25767: PUSH
25768: LD_VAR 0 13
25772: PPUSH
25773: CALL_OW 247
25777: PUSH
25778: LD_INT 3
25780: EQUAL
25781: OR
25782: IFFALSE 25788
// exit ;
25784: POP
25785: POP
25786: GO 26332
// if not tmp then
25788: LD_VAR 0 13
25792: NOT
25793: IFFALSE 25797
// continue ;
25795: GO 25653
// result := true ;
25797: LD_ADDR_VAR 0 8
25801: PUSH
25802: LD_INT 1
25804: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
25805: LD_VAR 0 6
25809: PUSH
25810: LD_VAR 0 13
25814: PPUSH
25815: CALL_OW 247
25819: PUSH
25820: LD_INT 2
25822: EQUAL
25823: AND
25824: PUSH
25825: LD_VAR 0 13
25829: PPUSH
25830: CALL_OW 263
25834: PUSH
25835: LD_INT 1
25837: EQUAL
25838: AND
25839: IFFALSE 26003
// begin if IsDrivenBy ( tmp ) then
25841: LD_VAR 0 13
25845: PPUSH
25846: CALL_OW 311
25850: IFFALSE 25854
// continue ;
25852: GO 25653
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
25854: LD_VAR 0 6
25858: PPUSH
25859: LD_INT 3
25861: PUSH
25862: LD_INT 60
25864: PUSH
25865: EMPTY
25866: LIST
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 3
25874: PUSH
25875: LD_INT 55
25877: PUSH
25878: EMPTY
25879: LIST
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PPUSH
25889: CALL_OW 72
25893: IFFALSE 26001
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
25895: LD_ADDR_VAR 0 18
25899: PUSH
25900: LD_VAR 0 6
25904: PPUSH
25905: LD_INT 3
25907: PUSH
25908: LD_INT 60
25910: PUSH
25911: EMPTY
25912: LIST
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 3
25920: PUSH
25921: LD_INT 55
25923: PUSH
25924: EMPTY
25925: LIST
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PPUSH
25935: CALL_OW 72
25939: PUSH
25940: LD_INT 1
25942: ARRAY
25943: ST_TO_ADDR
// if IsInUnit ( driver ) then
25944: LD_VAR 0 18
25948: PPUSH
25949: CALL_OW 310
25953: IFFALSE 25964
// ComExit ( driver ) ;
25955: LD_VAR 0 18
25959: PPUSH
25960: CALL 50753 0 1
// AddComEnterUnit ( driver , tmp ) ;
25964: LD_VAR 0 18
25968: PPUSH
25969: LD_VAR 0 13
25973: PPUSH
25974: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
25978: LD_VAR 0 18
25982: PPUSH
25983: LD_VAR 0 7
25987: PPUSH
25988: CALL_OW 173
// AddComExitVehicle ( driver ) ;
25992: LD_VAR 0 18
25996: PPUSH
25997: CALL_OW 181
// end ; continue ;
26001: GO 25653
// end ; if not cleaners or not tmp in cleaners then
26003: LD_VAR 0 6
26007: NOT
26008: PUSH
26009: LD_VAR 0 13
26013: PUSH
26014: LD_VAR 0 6
26018: IN
26019: NOT
26020: OR
26021: IFFALSE 26328
// begin if dep then
26023: LD_VAR 0 17
26027: IFFALSE 26163
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
26029: LD_ADDR_VAR 0 16
26033: PUSH
26034: LD_VAR 0 17
26038: PUSH
26039: LD_INT 1
26041: ARRAY
26042: PPUSH
26043: CALL_OW 250
26047: PPUSH
26048: LD_VAR 0 17
26052: PUSH
26053: LD_INT 1
26055: ARRAY
26056: PPUSH
26057: CALL_OW 254
26061: PPUSH
26062: LD_INT 5
26064: PPUSH
26065: CALL_OW 272
26069: PUSH
26070: LD_VAR 0 17
26074: PUSH
26075: LD_INT 1
26077: ARRAY
26078: PPUSH
26079: CALL_OW 251
26083: PPUSH
26084: LD_VAR 0 17
26088: PUSH
26089: LD_INT 1
26091: ARRAY
26092: PPUSH
26093: CALL_OW 254
26097: PPUSH
26098: LD_INT 5
26100: PPUSH
26101: CALL_OW 273
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
26110: LD_VAR 0 16
26114: PUSH
26115: LD_INT 1
26117: ARRAY
26118: PPUSH
26119: LD_VAR 0 16
26123: PUSH
26124: LD_INT 2
26126: ARRAY
26127: PPUSH
26128: CALL_OW 488
26132: IFFALSE 26163
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
26134: LD_VAR 0 13
26138: PPUSH
26139: LD_VAR 0 16
26143: PUSH
26144: LD_INT 1
26146: ARRAY
26147: PPUSH
26148: LD_VAR 0 16
26152: PUSH
26153: LD_INT 2
26155: ARRAY
26156: PPUSH
26157: CALL_OW 111
// continue ;
26161: GO 25653
// end ; end ; r := GetDir ( tmp ) ;
26163: LD_ADDR_VAR 0 15
26167: PUSH
26168: LD_VAR 0 13
26172: PPUSH
26173: CALL_OW 254
26177: ST_TO_ADDR
// if r = 5 then
26178: LD_VAR 0 15
26182: PUSH
26183: LD_INT 5
26185: EQUAL
26186: IFFALSE 26196
// r := 0 ;
26188: LD_ADDR_VAR 0 15
26192: PUSH
26193: LD_INT 0
26195: ST_TO_ADDR
// for j = r to 5 do
26196: LD_ADDR_VAR 0 10
26200: PUSH
26201: DOUBLE
26202: LD_VAR 0 15
26206: DEC
26207: ST_TO_ADDR
26208: LD_INT 5
26210: PUSH
26211: FOR_TO
26212: IFFALSE 26326
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
26214: LD_ADDR_VAR 0 11
26218: PUSH
26219: LD_VAR 0 13
26223: PPUSH
26224: CALL_OW 250
26228: PPUSH
26229: LD_VAR 0 10
26233: PPUSH
26234: LD_INT 2
26236: PPUSH
26237: CALL_OW 272
26241: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
26242: LD_ADDR_VAR 0 12
26246: PUSH
26247: LD_VAR 0 13
26251: PPUSH
26252: CALL_OW 251
26256: PPUSH
26257: LD_VAR 0 10
26261: PPUSH
26262: LD_INT 2
26264: PPUSH
26265: CALL_OW 273
26269: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
26270: LD_VAR 0 11
26274: PPUSH
26275: LD_VAR 0 12
26279: PPUSH
26280: CALL_OW 488
26284: PUSH
26285: LD_VAR 0 11
26289: PPUSH
26290: LD_VAR 0 12
26294: PPUSH
26295: CALL_OW 428
26299: NOT
26300: AND
26301: IFFALSE 26324
// begin ComMoveXY ( tmp , _x , _y ) ;
26303: LD_VAR 0 13
26307: PPUSH
26308: LD_VAR 0 11
26312: PPUSH
26313: LD_VAR 0 12
26317: PPUSH
26318: CALL_OW 111
// break ;
26322: GO 26326
// end ; end ;
26324: GO 26211
26326: POP
26327: POP
// end ; end ;
26328: GO 25653
26330: POP
26331: POP
// end ;
26332: LD_VAR 0 8
26336: RET
// export function BuildingTechInvented ( side , btype ) ; begin
26337: LD_INT 0
26339: PPUSH
// result := true ;
26340: LD_ADDR_VAR 0 3
26344: PUSH
26345: LD_INT 1
26347: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
26348: LD_VAR 0 2
26352: PUSH
26353: LD_INT 24
26355: DOUBLE
26356: EQUAL
26357: IFTRUE 26367
26359: LD_INT 33
26361: DOUBLE
26362: EQUAL
26363: IFTRUE 26367
26365: GO 26392
26367: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
26368: LD_ADDR_VAR 0 3
26372: PUSH
26373: LD_INT 32
26375: PPUSH
26376: LD_VAR 0 1
26380: PPUSH
26381: CALL_OW 321
26385: PUSH
26386: LD_INT 2
26388: EQUAL
26389: ST_TO_ADDR
26390: GO 26712
26392: LD_INT 20
26394: DOUBLE
26395: EQUAL
26396: IFTRUE 26400
26398: GO 26425
26400: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
26401: LD_ADDR_VAR 0 3
26405: PUSH
26406: LD_INT 6
26408: PPUSH
26409: LD_VAR 0 1
26413: PPUSH
26414: CALL_OW 321
26418: PUSH
26419: LD_INT 2
26421: EQUAL
26422: ST_TO_ADDR
26423: GO 26712
26425: LD_INT 22
26427: DOUBLE
26428: EQUAL
26429: IFTRUE 26439
26431: LD_INT 36
26433: DOUBLE
26434: EQUAL
26435: IFTRUE 26439
26437: GO 26464
26439: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
26440: LD_ADDR_VAR 0 3
26444: PUSH
26445: LD_INT 15
26447: PPUSH
26448: LD_VAR 0 1
26452: PPUSH
26453: CALL_OW 321
26457: PUSH
26458: LD_INT 2
26460: EQUAL
26461: ST_TO_ADDR
26462: GO 26712
26464: LD_INT 30
26466: DOUBLE
26467: EQUAL
26468: IFTRUE 26472
26470: GO 26497
26472: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
26473: LD_ADDR_VAR 0 3
26477: PUSH
26478: LD_INT 20
26480: PPUSH
26481: LD_VAR 0 1
26485: PPUSH
26486: CALL_OW 321
26490: PUSH
26491: LD_INT 2
26493: EQUAL
26494: ST_TO_ADDR
26495: GO 26712
26497: LD_INT 28
26499: DOUBLE
26500: EQUAL
26501: IFTRUE 26511
26503: LD_INT 21
26505: DOUBLE
26506: EQUAL
26507: IFTRUE 26511
26509: GO 26536
26511: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
26512: LD_ADDR_VAR 0 3
26516: PUSH
26517: LD_INT 21
26519: PPUSH
26520: LD_VAR 0 1
26524: PPUSH
26525: CALL_OW 321
26529: PUSH
26530: LD_INT 2
26532: EQUAL
26533: ST_TO_ADDR
26534: GO 26712
26536: LD_INT 16
26538: DOUBLE
26539: EQUAL
26540: IFTRUE 26544
26542: GO 26571
26544: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
26545: LD_ADDR_VAR 0 3
26549: PUSH
26550: LD_EXP 108
26554: PPUSH
26555: LD_VAR 0 1
26559: PPUSH
26560: CALL_OW 321
26564: PUSH
26565: LD_INT 2
26567: EQUAL
26568: ST_TO_ADDR
26569: GO 26712
26571: LD_INT 19
26573: DOUBLE
26574: EQUAL
26575: IFTRUE 26585
26577: LD_INT 23
26579: DOUBLE
26580: EQUAL
26581: IFTRUE 26585
26583: GO 26612
26585: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
26586: LD_ADDR_VAR 0 3
26590: PUSH
26591: LD_EXP 107
26595: PPUSH
26596: LD_VAR 0 1
26600: PPUSH
26601: CALL_OW 321
26605: PUSH
26606: LD_INT 2
26608: EQUAL
26609: ST_TO_ADDR
26610: GO 26712
26612: LD_INT 17
26614: DOUBLE
26615: EQUAL
26616: IFTRUE 26620
26618: GO 26645
26620: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
26621: LD_ADDR_VAR 0 3
26625: PUSH
26626: LD_INT 39
26628: PPUSH
26629: LD_VAR 0 1
26633: PPUSH
26634: CALL_OW 321
26638: PUSH
26639: LD_INT 2
26641: EQUAL
26642: ST_TO_ADDR
26643: GO 26712
26645: LD_INT 18
26647: DOUBLE
26648: EQUAL
26649: IFTRUE 26653
26651: GO 26678
26653: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
26654: LD_ADDR_VAR 0 3
26658: PUSH
26659: LD_INT 40
26661: PPUSH
26662: LD_VAR 0 1
26666: PPUSH
26667: CALL_OW 321
26671: PUSH
26672: LD_INT 2
26674: EQUAL
26675: ST_TO_ADDR
26676: GO 26712
26678: LD_INT 27
26680: DOUBLE
26681: EQUAL
26682: IFTRUE 26686
26684: GO 26711
26686: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
26687: LD_ADDR_VAR 0 3
26691: PUSH
26692: LD_INT 35
26694: PPUSH
26695: LD_VAR 0 1
26699: PPUSH
26700: CALL_OW 321
26704: PUSH
26705: LD_INT 2
26707: EQUAL
26708: ST_TO_ADDR
26709: GO 26712
26711: POP
// end ;
26712: LD_VAR 0 3
26716: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
26717: LD_INT 0
26719: PPUSH
26720: PPUSH
26721: PPUSH
26722: PPUSH
26723: PPUSH
26724: PPUSH
26725: PPUSH
26726: PPUSH
26727: PPUSH
26728: PPUSH
26729: PPUSH
// result := false ;
26730: LD_ADDR_VAR 0 6
26734: PUSH
26735: LD_INT 0
26737: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
26738: LD_VAR 0 1
26742: NOT
26743: PUSH
26744: LD_VAR 0 1
26748: PPUSH
26749: CALL_OW 266
26753: PUSH
26754: LD_INT 0
26756: PUSH
26757: LD_INT 1
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: IN
26764: NOT
26765: OR
26766: PUSH
26767: LD_VAR 0 2
26771: NOT
26772: OR
26773: PUSH
26774: LD_VAR 0 5
26778: PUSH
26779: LD_INT 0
26781: PUSH
26782: LD_INT 1
26784: PUSH
26785: LD_INT 2
26787: PUSH
26788: LD_INT 3
26790: PUSH
26791: LD_INT 4
26793: PUSH
26794: LD_INT 5
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: IN
26805: NOT
26806: OR
26807: PUSH
26808: LD_VAR 0 3
26812: PPUSH
26813: LD_VAR 0 4
26817: PPUSH
26818: CALL_OW 488
26822: NOT
26823: OR
26824: IFFALSE 26828
// exit ;
26826: GO 27564
// side := GetSide ( depot ) ;
26828: LD_ADDR_VAR 0 9
26832: PUSH
26833: LD_VAR 0 1
26837: PPUSH
26838: CALL_OW 255
26842: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
26843: LD_VAR 0 9
26847: PPUSH
26848: LD_VAR 0 2
26852: PPUSH
26853: CALL 26337 0 2
26857: NOT
26858: IFFALSE 26862
// exit ;
26860: GO 27564
// pom := GetBase ( depot ) ;
26862: LD_ADDR_VAR 0 10
26866: PUSH
26867: LD_VAR 0 1
26871: PPUSH
26872: CALL_OW 274
26876: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
26877: LD_ADDR_VAR 0 11
26881: PUSH
26882: LD_VAR 0 2
26886: PPUSH
26887: LD_VAR 0 1
26891: PPUSH
26892: CALL_OW 248
26896: PPUSH
26897: CALL_OW 450
26901: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
26902: LD_VAR 0 10
26906: PPUSH
26907: LD_INT 1
26909: PPUSH
26910: CALL_OW 275
26914: PUSH
26915: LD_VAR 0 11
26919: PUSH
26920: LD_INT 1
26922: ARRAY
26923: GREATEREQUAL
26924: PUSH
26925: LD_VAR 0 10
26929: PPUSH
26930: LD_INT 2
26932: PPUSH
26933: CALL_OW 275
26937: PUSH
26938: LD_VAR 0 11
26942: PUSH
26943: LD_INT 2
26945: ARRAY
26946: GREATEREQUAL
26947: AND
26948: PUSH
26949: LD_VAR 0 10
26953: PPUSH
26954: LD_INT 3
26956: PPUSH
26957: CALL_OW 275
26961: PUSH
26962: LD_VAR 0 11
26966: PUSH
26967: LD_INT 3
26969: ARRAY
26970: GREATEREQUAL
26971: AND
26972: NOT
26973: IFFALSE 26977
// exit ;
26975: GO 27564
// if GetBType ( depot ) = b_depot then
26977: LD_VAR 0 1
26981: PPUSH
26982: CALL_OW 266
26986: PUSH
26987: LD_INT 0
26989: EQUAL
26990: IFFALSE 27002
// dist := 28 else
26992: LD_ADDR_VAR 0 14
26996: PUSH
26997: LD_INT 28
26999: ST_TO_ADDR
27000: GO 27010
// dist := 36 ;
27002: LD_ADDR_VAR 0 14
27006: PUSH
27007: LD_INT 36
27009: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
27010: LD_VAR 0 1
27014: PPUSH
27015: LD_VAR 0 3
27019: PPUSH
27020: LD_VAR 0 4
27024: PPUSH
27025: CALL_OW 297
27029: PUSH
27030: LD_VAR 0 14
27034: GREATER
27035: IFFALSE 27039
// exit ;
27037: GO 27564
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
27039: LD_ADDR_VAR 0 12
27043: PUSH
27044: LD_VAR 0 2
27048: PPUSH
27049: LD_VAR 0 3
27053: PPUSH
27054: LD_VAR 0 4
27058: PPUSH
27059: LD_VAR 0 5
27063: PPUSH
27064: LD_VAR 0 1
27068: PPUSH
27069: CALL_OW 248
27073: PPUSH
27074: LD_INT 0
27076: PPUSH
27077: CALL 27569 0 6
27081: ST_TO_ADDR
// if not hexes then
27082: LD_VAR 0 12
27086: NOT
27087: IFFALSE 27091
// exit ;
27089: GO 27564
// hex := GetHexInfo ( x , y ) ;
27091: LD_ADDR_VAR 0 15
27095: PUSH
27096: LD_VAR 0 3
27100: PPUSH
27101: LD_VAR 0 4
27105: PPUSH
27106: CALL_OW 546
27110: ST_TO_ADDR
// if hex [ 1 ] then
27111: LD_VAR 0 15
27115: PUSH
27116: LD_INT 1
27118: ARRAY
27119: IFFALSE 27123
// exit ;
27121: GO 27564
// height := hex [ 2 ] ;
27123: LD_ADDR_VAR 0 13
27127: PUSH
27128: LD_VAR 0 15
27132: PUSH
27133: LD_INT 2
27135: ARRAY
27136: ST_TO_ADDR
// for i = 1 to hexes do
27137: LD_ADDR_VAR 0 7
27141: PUSH
27142: DOUBLE
27143: LD_INT 1
27145: DEC
27146: ST_TO_ADDR
27147: LD_VAR 0 12
27151: PUSH
27152: FOR_TO
27153: IFFALSE 27483
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
27155: LD_VAR 0 12
27159: PUSH
27160: LD_VAR 0 7
27164: ARRAY
27165: PUSH
27166: LD_INT 1
27168: ARRAY
27169: PPUSH
27170: LD_VAR 0 12
27174: PUSH
27175: LD_VAR 0 7
27179: ARRAY
27180: PUSH
27181: LD_INT 2
27183: ARRAY
27184: PPUSH
27185: CALL_OW 488
27189: NOT
27190: PUSH
27191: LD_VAR 0 12
27195: PUSH
27196: LD_VAR 0 7
27200: ARRAY
27201: PUSH
27202: LD_INT 1
27204: ARRAY
27205: PPUSH
27206: LD_VAR 0 12
27210: PUSH
27211: LD_VAR 0 7
27215: ARRAY
27216: PUSH
27217: LD_INT 2
27219: ARRAY
27220: PPUSH
27221: CALL_OW 428
27225: PUSH
27226: LD_INT 0
27228: GREATER
27229: OR
27230: PUSH
27231: LD_VAR 0 12
27235: PUSH
27236: LD_VAR 0 7
27240: ARRAY
27241: PUSH
27242: LD_INT 1
27244: ARRAY
27245: PPUSH
27246: LD_VAR 0 12
27250: PUSH
27251: LD_VAR 0 7
27255: ARRAY
27256: PUSH
27257: LD_INT 2
27259: ARRAY
27260: PPUSH
27261: CALL_OW 351
27265: OR
27266: IFFALSE 27272
// exit ;
27268: POP
27269: POP
27270: GO 27564
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27272: LD_ADDR_VAR 0 8
27276: PUSH
27277: LD_VAR 0 12
27281: PUSH
27282: LD_VAR 0 7
27286: ARRAY
27287: PUSH
27288: LD_INT 1
27290: ARRAY
27291: PPUSH
27292: LD_VAR 0 12
27296: PUSH
27297: LD_VAR 0 7
27301: ARRAY
27302: PUSH
27303: LD_INT 2
27305: ARRAY
27306: PPUSH
27307: CALL_OW 546
27311: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
27312: LD_VAR 0 8
27316: PUSH
27317: LD_INT 1
27319: ARRAY
27320: PUSH
27321: LD_VAR 0 8
27325: PUSH
27326: LD_INT 2
27328: ARRAY
27329: PUSH
27330: LD_VAR 0 13
27334: PUSH
27335: LD_INT 2
27337: PLUS
27338: GREATER
27339: OR
27340: PUSH
27341: LD_VAR 0 8
27345: PUSH
27346: LD_INT 2
27348: ARRAY
27349: PUSH
27350: LD_VAR 0 13
27354: PUSH
27355: LD_INT 2
27357: MINUS
27358: LESS
27359: OR
27360: PUSH
27361: LD_VAR 0 8
27365: PUSH
27366: LD_INT 3
27368: ARRAY
27369: PUSH
27370: LD_INT 0
27372: PUSH
27373: LD_INT 8
27375: PUSH
27376: LD_INT 9
27378: PUSH
27379: LD_INT 10
27381: PUSH
27382: LD_INT 11
27384: PUSH
27385: LD_INT 12
27387: PUSH
27388: LD_INT 13
27390: PUSH
27391: LD_INT 16
27393: PUSH
27394: LD_INT 17
27396: PUSH
27397: LD_INT 18
27399: PUSH
27400: LD_INT 19
27402: PUSH
27403: LD_INT 20
27405: PUSH
27406: LD_INT 21
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: IN
27424: NOT
27425: OR
27426: PUSH
27427: LD_VAR 0 8
27431: PUSH
27432: LD_INT 5
27434: ARRAY
27435: NOT
27436: OR
27437: PUSH
27438: LD_VAR 0 8
27442: PUSH
27443: LD_INT 6
27445: ARRAY
27446: PUSH
27447: LD_INT 1
27449: PUSH
27450: LD_INT 2
27452: PUSH
27453: LD_INT 7
27455: PUSH
27456: LD_INT 9
27458: PUSH
27459: LD_INT 10
27461: PUSH
27462: LD_INT 11
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: IN
27473: NOT
27474: OR
27475: IFFALSE 27481
// exit ;
27477: POP
27478: POP
27479: GO 27564
// end ;
27481: GO 27152
27483: POP
27484: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
27485: LD_VAR 0 9
27489: PPUSH
27490: LD_VAR 0 3
27494: PPUSH
27495: LD_VAR 0 4
27499: PPUSH
27500: LD_INT 20
27502: PPUSH
27503: CALL 19510 0 4
27507: PUSH
27508: LD_INT 4
27510: ARRAY
27511: IFFALSE 27515
// exit ;
27513: GO 27564
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
27515: LD_VAR 0 2
27519: PUSH
27520: LD_INT 29
27522: PUSH
27523: LD_INT 30
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: IN
27530: PUSH
27531: LD_VAR 0 3
27535: PPUSH
27536: LD_VAR 0 4
27540: PPUSH
27541: LD_VAR 0 9
27545: PPUSH
27546: CALL_OW 440
27550: NOT
27551: AND
27552: IFFALSE 27556
// exit ;
27554: GO 27564
// result := true ;
27556: LD_ADDR_VAR 0 6
27560: PUSH
27561: LD_INT 1
27563: ST_TO_ADDR
// end ;
27564: LD_VAR 0 6
27568: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
27569: LD_INT 0
27571: PPUSH
27572: PPUSH
27573: PPUSH
27574: PPUSH
27575: PPUSH
27576: PPUSH
27577: PPUSH
27578: PPUSH
27579: PPUSH
27580: PPUSH
27581: PPUSH
27582: PPUSH
27583: PPUSH
27584: PPUSH
27585: PPUSH
27586: PPUSH
27587: PPUSH
27588: PPUSH
27589: PPUSH
27590: PPUSH
27591: PPUSH
27592: PPUSH
27593: PPUSH
27594: PPUSH
27595: PPUSH
27596: PPUSH
27597: PPUSH
27598: PPUSH
27599: PPUSH
27600: PPUSH
27601: PPUSH
27602: PPUSH
27603: PPUSH
27604: PPUSH
27605: PPUSH
27606: PPUSH
27607: PPUSH
27608: PPUSH
27609: PPUSH
27610: PPUSH
27611: PPUSH
27612: PPUSH
27613: PPUSH
27614: PPUSH
27615: PPUSH
27616: PPUSH
27617: PPUSH
27618: PPUSH
27619: PPUSH
27620: PPUSH
27621: PPUSH
27622: PPUSH
27623: PPUSH
27624: PPUSH
27625: PPUSH
27626: PPUSH
27627: PPUSH
27628: PPUSH
// result = [ ] ;
27629: LD_ADDR_VAR 0 7
27633: PUSH
27634: EMPTY
27635: ST_TO_ADDR
// temp_list = [ ] ;
27636: LD_ADDR_VAR 0 9
27640: PUSH
27641: EMPTY
27642: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
27643: LD_VAR 0 4
27647: PUSH
27648: LD_INT 0
27650: PUSH
27651: LD_INT 1
27653: PUSH
27654: LD_INT 2
27656: PUSH
27657: LD_INT 3
27659: PUSH
27660: LD_INT 4
27662: PUSH
27663: LD_INT 5
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: IN
27674: NOT
27675: PUSH
27676: LD_VAR 0 1
27680: PUSH
27681: LD_INT 0
27683: PUSH
27684: LD_INT 1
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: IN
27691: PUSH
27692: LD_VAR 0 5
27696: PUSH
27697: LD_INT 1
27699: PUSH
27700: LD_INT 2
27702: PUSH
27703: LD_INT 3
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: LIST
27710: IN
27711: NOT
27712: AND
27713: OR
27714: IFFALSE 27718
// exit ;
27716: GO 46109
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
27718: LD_VAR 0 1
27722: PUSH
27723: LD_INT 6
27725: PUSH
27726: LD_INT 7
27728: PUSH
27729: LD_INT 8
27731: PUSH
27732: LD_INT 13
27734: PUSH
27735: LD_INT 12
27737: PUSH
27738: LD_INT 15
27740: PUSH
27741: LD_INT 11
27743: PUSH
27744: LD_INT 14
27746: PUSH
27747: LD_INT 10
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: IN
27761: IFFALSE 27771
// btype = b_lab ;
27763: LD_ADDR_VAR 0 1
27767: PUSH
27768: LD_INT 6
27770: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
27771: LD_VAR 0 6
27775: PUSH
27776: LD_INT 0
27778: PUSH
27779: LD_INT 1
27781: PUSH
27782: LD_INT 2
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: LIST
27789: IN
27790: NOT
27791: PUSH
27792: LD_VAR 0 1
27796: PUSH
27797: LD_INT 0
27799: PUSH
27800: LD_INT 1
27802: PUSH
27803: LD_INT 2
27805: PUSH
27806: LD_INT 3
27808: PUSH
27809: LD_INT 6
27811: PUSH
27812: LD_INT 36
27814: PUSH
27815: LD_INT 4
27817: PUSH
27818: LD_INT 5
27820: PUSH
27821: LD_INT 31
27823: PUSH
27824: LD_INT 32
27826: PUSH
27827: LD_INT 33
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: IN
27843: NOT
27844: PUSH
27845: LD_VAR 0 6
27849: PUSH
27850: LD_INT 1
27852: EQUAL
27853: AND
27854: OR
27855: PUSH
27856: LD_VAR 0 1
27860: PUSH
27861: LD_INT 2
27863: PUSH
27864: LD_INT 3
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: IN
27871: NOT
27872: PUSH
27873: LD_VAR 0 6
27877: PUSH
27878: LD_INT 2
27880: EQUAL
27881: AND
27882: OR
27883: IFFALSE 27893
// mode = 0 ;
27885: LD_ADDR_VAR 0 6
27889: PUSH
27890: LD_INT 0
27892: ST_TO_ADDR
// case mode of 0 :
27893: LD_VAR 0 6
27897: PUSH
27898: LD_INT 0
27900: DOUBLE
27901: EQUAL
27902: IFTRUE 27906
27904: GO 39359
27906: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27907: LD_ADDR_VAR 0 11
27911: PUSH
27912: LD_INT 0
27914: PUSH
27915: LD_INT 0
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: PUSH
27922: LD_INT 0
27924: PUSH
27925: LD_INT 1
27927: NEG
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: LD_INT 1
27935: PUSH
27936: LD_INT 0
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 1
27945: PUSH
27946: LD_INT 1
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 0
27955: PUSH
27956: LD_INT 1
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 1
27965: NEG
27966: PUSH
27967: LD_INT 0
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: LD_INT 1
27976: NEG
27977: PUSH
27978: LD_INT 1
27980: NEG
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: LD_INT 1
27988: NEG
27989: PUSH
27990: LD_INT 2
27992: NEG
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 0
28000: PUSH
28001: LD_INT 2
28003: NEG
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 1
28011: PUSH
28012: LD_INT 1
28014: NEG
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 1
28022: PUSH
28023: LD_INT 2
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: LD_INT 0
28032: PUSH
28033: LD_INT 2
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 1
28042: NEG
28043: PUSH
28044: LD_INT 1
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 1
28053: PUSH
28054: LD_INT 3
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 0
28063: PUSH
28064: LD_INT 3
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 1
28073: NEG
28074: PUSH
28075: LD_INT 2
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28100: LD_ADDR_VAR 0 12
28104: PUSH
28105: LD_INT 0
28107: PUSH
28108: LD_INT 0
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: LD_INT 0
28117: PUSH
28118: LD_INT 1
28120: NEG
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 1
28128: PUSH
28129: LD_INT 0
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 1
28138: PUSH
28139: LD_INT 1
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 0
28148: PUSH
28149: LD_INT 1
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 1
28158: NEG
28159: PUSH
28160: LD_INT 0
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 1
28169: NEG
28170: PUSH
28171: LD_INT 1
28173: NEG
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 1
28181: PUSH
28182: LD_INT 1
28184: NEG
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 2
28192: PUSH
28193: LD_INT 0
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 2
28202: PUSH
28203: LD_INT 1
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 1
28212: NEG
28213: PUSH
28214: LD_INT 1
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 2
28223: NEG
28224: PUSH
28225: LD_INT 0
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 2
28234: NEG
28235: PUSH
28236: LD_INT 1
28238: NEG
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 2
28246: NEG
28247: PUSH
28248: LD_INT 1
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 3
28257: NEG
28258: PUSH
28259: LD_INT 0
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 3
28268: NEG
28269: PUSH
28270: LD_INT 1
28272: NEG
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28296: LD_ADDR_VAR 0 13
28300: PUSH
28301: LD_INT 0
28303: PUSH
28304: LD_INT 0
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 0
28313: PUSH
28314: LD_INT 1
28316: NEG
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: LD_INT 1
28324: PUSH
28325: LD_INT 0
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: LD_INT 1
28334: PUSH
28335: LD_INT 1
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: PUSH
28342: LD_INT 0
28344: PUSH
28345: LD_INT 1
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: LD_INT 1
28354: NEG
28355: PUSH
28356: LD_INT 0
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: LD_INT 1
28365: NEG
28366: PUSH
28367: LD_INT 1
28369: NEG
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: LD_INT 1
28377: NEG
28378: PUSH
28379: LD_INT 2
28381: NEG
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 2
28389: PUSH
28390: LD_INT 1
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 2
28399: PUSH
28400: LD_INT 2
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 1
28409: PUSH
28410: LD_INT 2
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 2
28419: NEG
28420: PUSH
28421: LD_INT 1
28423: NEG
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: LD_INT 2
28431: NEG
28432: PUSH
28433: LD_INT 2
28435: NEG
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 2
28443: NEG
28444: PUSH
28445: LD_INT 3
28447: NEG
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 3
28455: NEG
28456: PUSH
28457: LD_INT 2
28459: NEG
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 3
28467: NEG
28468: PUSH
28469: LD_INT 3
28471: NEG
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28495: LD_ADDR_VAR 0 14
28499: PUSH
28500: LD_INT 0
28502: PUSH
28503: LD_INT 0
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 0
28512: PUSH
28513: LD_INT 1
28515: NEG
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 1
28523: PUSH
28524: LD_INT 0
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 1
28533: PUSH
28534: LD_INT 1
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 0
28543: PUSH
28544: LD_INT 1
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 1
28553: NEG
28554: PUSH
28555: LD_INT 0
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: LD_INT 1
28564: NEG
28565: PUSH
28566: LD_INT 1
28568: NEG
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 1
28576: NEG
28577: PUSH
28578: LD_INT 2
28580: NEG
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 0
28588: PUSH
28589: LD_INT 2
28591: NEG
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 1
28599: PUSH
28600: LD_INT 1
28602: NEG
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 1
28610: PUSH
28611: LD_INT 2
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: LD_INT 0
28620: PUSH
28621: LD_INT 2
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 1
28630: NEG
28631: PUSH
28632: LD_INT 1
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 1
28641: NEG
28642: PUSH
28643: LD_INT 3
28645: NEG
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: LD_INT 0
28653: PUSH
28654: LD_INT 3
28656: NEG
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 1
28664: PUSH
28665: LD_INT 2
28667: NEG
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28691: LD_ADDR_VAR 0 15
28695: PUSH
28696: LD_INT 0
28698: PUSH
28699: LD_INT 0
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: LD_INT 0
28708: PUSH
28709: LD_INT 1
28711: NEG
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: LD_INT 1
28719: PUSH
28720: LD_INT 0
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 1
28729: PUSH
28730: LD_INT 1
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 0
28739: PUSH
28740: LD_INT 1
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 1
28749: NEG
28750: PUSH
28751: LD_INT 0
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 1
28760: NEG
28761: PUSH
28762: LD_INT 1
28764: NEG
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 1
28772: PUSH
28773: LD_INT 1
28775: NEG
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 2
28783: PUSH
28784: LD_INT 0
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 2
28793: PUSH
28794: LD_INT 1
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 1
28803: NEG
28804: PUSH
28805: LD_INT 1
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 2
28814: NEG
28815: PUSH
28816: LD_INT 0
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 2
28825: NEG
28826: PUSH
28827: LD_INT 1
28829: NEG
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 2
28837: PUSH
28838: LD_INT 1
28840: NEG
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 3
28848: PUSH
28849: LD_INT 0
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: LD_INT 3
28858: PUSH
28859: LD_INT 1
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28884: LD_ADDR_VAR 0 16
28888: PUSH
28889: LD_INT 0
28891: PUSH
28892: LD_INT 0
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 0
28901: PUSH
28902: LD_INT 1
28904: NEG
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 1
28912: PUSH
28913: LD_INT 0
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 1
28922: PUSH
28923: LD_INT 1
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 0
28932: PUSH
28933: LD_INT 1
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 1
28942: NEG
28943: PUSH
28944: LD_INT 0
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 1
28953: NEG
28954: PUSH
28955: LD_INT 1
28957: NEG
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 1
28965: NEG
28966: PUSH
28967: LD_INT 2
28969: NEG
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: LD_INT 2
28977: PUSH
28978: LD_INT 1
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 2
28987: PUSH
28988: LD_INT 2
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: LD_INT 1
28997: PUSH
28998: LD_INT 2
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 2
29007: NEG
29008: PUSH
29009: LD_INT 1
29011: NEG
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 2
29019: NEG
29020: PUSH
29021: LD_INT 2
29023: NEG
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 3
29031: PUSH
29032: LD_INT 2
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 3
29041: PUSH
29042: LD_INT 3
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 2
29051: PUSH
29052: LD_INT 3
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29077: LD_ADDR_VAR 0 17
29081: PUSH
29082: LD_INT 0
29084: PUSH
29085: LD_INT 0
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 0
29094: PUSH
29095: LD_INT 1
29097: NEG
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 1
29105: PUSH
29106: LD_INT 0
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 1
29115: PUSH
29116: LD_INT 1
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: LD_INT 0
29125: PUSH
29126: LD_INT 1
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 1
29135: NEG
29136: PUSH
29137: LD_INT 0
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 1
29146: NEG
29147: PUSH
29148: LD_INT 1
29150: NEG
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: LD_INT 1
29158: NEG
29159: PUSH
29160: LD_INT 2
29162: NEG
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: PUSH
29168: LD_INT 0
29170: PUSH
29171: LD_INT 2
29173: NEG
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 1
29181: PUSH
29182: LD_INT 1
29184: NEG
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 2
29192: PUSH
29193: LD_INT 0
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 2
29202: PUSH
29203: LD_INT 1
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: LD_INT 2
29212: PUSH
29213: LD_INT 2
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 1
29222: PUSH
29223: LD_INT 2
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 0
29232: PUSH
29233: LD_INT 2
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_INT 1
29242: NEG
29243: PUSH
29244: LD_INT 1
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: LD_INT 2
29253: NEG
29254: PUSH
29255: LD_INT 0
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: LD_INT 2
29264: NEG
29265: PUSH
29266: LD_INT 1
29268: NEG
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: LD_INT 2
29276: NEG
29277: PUSH
29278: LD_INT 2
29280: NEG
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29307: LD_ADDR_VAR 0 18
29311: PUSH
29312: LD_INT 0
29314: PUSH
29315: LD_INT 0
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: LD_INT 0
29324: PUSH
29325: LD_INT 1
29327: NEG
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 1
29335: PUSH
29336: LD_INT 0
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 1
29345: PUSH
29346: LD_INT 1
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 0
29355: PUSH
29356: LD_INT 1
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: LD_INT 1
29365: NEG
29366: PUSH
29367: LD_INT 0
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: LD_INT 1
29376: NEG
29377: PUSH
29378: LD_INT 1
29380: NEG
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 1
29388: NEG
29389: PUSH
29390: LD_INT 2
29392: NEG
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: LD_INT 0
29400: PUSH
29401: LD_INT 2
29403: NEG
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 1
29411: PUSH
29412: LD_INT 1
29414: NEG
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 2
29422: PUSH
29423: LD_INT 0
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 2
29432: PUSH
29433: LD_INT 1
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 2
29442: PUSH
29443: LD_INT 2
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 1
29452: PUSH
29453: LD_INT 2
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 0
29462: PUSH
29463: LD_INT 2
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 1
29472: NEG
29473: PUSH
29474: LD_INT 1
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 2
29483: NEG
29484: PUSH
29485: LD_INT 0
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: LD_INT 2
29494: NEG
29495: PUSH
29496: LD_INT 1
29498: NEG
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 2
29506: NEG
29507: PUSH
29508: LD_INT 2
29510: NEG
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29537: LD_ADDR_VAR 0 19
29541: PUSH
29542: LD_INT 0
29544: PUSH
29545: LD_INT 0
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 0
29554: PUSH
29555: LD_INT 1
29557: NEG
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PUSH
29563: LD_INT 1
29565: PUSH
29566: LD_INT 0
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PUSH
29573: LD_INT 1
29575: PUSH
29576: LD_INT 1
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: LD_INT 0
29585: PUSH
29586: LD_INT 1
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 1
29595: NEG
29596: PUSH
29597: LD_INT 0
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: LD_INT 1
29606: NEG
29607: PUSH
29608: LD_INT 1
29610: NEG
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 1
29618: NEG
29619: PUSH
29620: LD_INT 2
29622: NEG
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 0
29630: PUSH
29631: LD_INT 2
29633: NEG
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: LD_INT 1
29641: PUSH
29642: LD_INT 1
29644: NEG
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: LD_INT 2
29652: PUSH
29653: LD_INT 0
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: LD_INT 2
29662: PUSH
29663: LD_INT 1
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 2
29672: PUSH
29673: LD_INT 2
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 1
29682: PUSH
29683: LD_INT 2
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: LD_INT 0
29692: PUSH
29693: LD_INT 2
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 1
29702: NEG
29703: PUSH
29704: LD_INT 1
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 2
29713: NEG
29714: PUSH
29715: LD_INT 0
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: LD_INT 2
29724: NEG
29725: PUSH
29726: LD_INT 1
29728: NEG
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 2
29736: NEG
29737: PUSH
29738: LD_INT 2
29740: NEG
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29767: LD_ADDR_VAR 0 20
29771: PUSH
29772: LD_INT 0
29774: PUSH
29775: LD_INT 0
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 0
29784: PUSH
29785: LD_INT 1
29787: NEG
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 1
29795: PUSH
29796: LD_INT 0
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PUSH
29803: LD_INT 1
29805: PUSH
29806: LD_INT 1
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PUSH
29813: LD_INT 0
29815: PUSH
29816: LD_INT 1
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 1
29825: NEG
29826: PUSH
29827: LD_INT 0
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: LD_INT 1
29836: NEG
29837: PUSH
29838: LD_INT 1
29840: NEG
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: LD_INT 1
29848: NEG
29849: PUSH
29850: LD_INT 2
29852: NEG
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 0
29860: PUSH
29861: LD_INT 2
29863: NEG
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: LD_INT 1
29871: PUSH
29872: LD_INT 1
29874: NEG
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 2
29882: PUSH
29883: LD_INT 0
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 2
29892: PUSH
29893: LD_INT 1
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 2
29902: PUSH
29903: LD_INT 2
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 1
29912: PUSH
29913: LD_INT 2
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 0
29922: PUSH
29923: LD_INT 2
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 1
29932: NEG
29933: PUSH
29934: LD_INT 1
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 2
29943: NEG
29944: PUSH
29945: LD_INT 0
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 2
29954: NEG
29955: PUSH
29956: LD_INT 1
29958: NEG
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 2
29966: NEG
29967: PUSH
29968: LD_INT 2
29970: NEG
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29997: LD_ADDR_VAR 0 21
30001: PUSH
30002: LD_INT 0
30004: PUSH
30005: LD_INT 0
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 0
30014: PUSH
30015: LD_INT 1
30017: NEG
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 1
30025: PUSH
30026: LD_INT 0
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: LD_INT 1
30035: PUSH
30036: LD_INT 1
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: LD_INT 0
30045: PUSH
30046: LD_INT 1
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 1
30055: NEG
30056: PUSH
30057: LD_INT 0
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 1
30066: NEG
30067: PUSH
30068: LD_INT 1
30070: NEG
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 1
30078: NEG
30079: PUSH
30080: LD_INT 2
30082: NEG
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: LD_INT 0
30090: PUSH
30091: LD_INT 2
30093: NEG
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 1
30101: PUSH
30102: LD_INT 1
30104: NEG
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 2
30112: PUSH
30113: LD_INT 0
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 2
30122: PUSH
30123: LD_INT 1
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 2
30132: PUSH
30133: LD_INT 2
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 1
30142: PUSH
30143: LD_INT 2
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 0
30152: PUSH
30153: LD_INT 2
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 1
30162: NEG
30163: PUSH
30164: LD_INT 1
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PUSH
30171: LD_INT 2
30173: NEG
30174: PUSH
30175: LD_INT 0
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 2
30184: NEG
30185: PUSH
30186: LD_INT 1
30188: NEG
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 2
30196: NEG
30197: PUSH
30198: LD_INT 2
30200: NEG
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30227: LD_ADDR_VAR 0 22
30231: PUSH
30232: LD_INT 0
30234: PUSH
30235: LD_INT 0
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 0
30244: PUSH
30245: LD_INT 1
30247: NEG
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 1
30255: PUSH
30256: LD_INT 0
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 1
30265: PUSH
30266: LD_INT 1
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 0
30275: PUSH
30276: LD_INT 1
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 1
30285: NEG
30286: PUSH
30287: LD_INT 0
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 1
30296: NEG
30297: PUSH
30298: LD_INT 1
30300: NEG
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PUSH
30306: LD_INT 1
30308: NEG
30309: PUSH
30310: LD_INT 2
30312: NEG
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: LD_INT 0
30320: PUSH
30321: LD_INT 2
30323: NEG
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 1
30331: PUSH
30332: LD_INT 1
30334: NEG
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 2
30342: PUSH
30343: LD_INT 0
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 2
30352: PUSH
30353: LD_INT 1
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 2
30362: PUSH
30363: LD_INT 2
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 1
30372: PUSH
30373: LD_INT 2
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 0
30382: PUSH
30383: LD_INT 2
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 1
30392: NEG
30393: PUSH
30394: LD_INT 1
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 2
30403: NEG
30404: PUSH
30405: LD_INT 0
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 2
30414: NEG
30415: PUSH
30416: LD_INT 1
30418: NEG
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 2
30426: NEG
30427: PUSH
30428: LD_INT 2
30430: NEG
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30457: LD_ADDR_VAR 0 23
30461: PUSH
30462: LD_INT 0
30464: PUSH
30465: LD_INT 0
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 0
30474: PUSH
30475: LD_INT 1
30477: NEG
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 1
30485: PUSH
30486: LD_INT 0
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 1
30495: PUSH
30496: LD_INT 1
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 0
30505: PUSH
30506: LD_INT 1
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 1
30515: NEG
30516: PUSH
30517: LD_INT 0
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 1
30526: NEG
30527: PUSH
30528: LD_INT 1
30530: NEG
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 1
30538: NEG
30539: PUSH
30540: LD_INT 2
30542: NEG
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 0
30550: PUSH
30551: LD_INT 2
30553: NEG
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 1
30561: PUSH
30562: LD_INT 1
30564: NEG
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 2
30572: PUSH
30573: LD_INT 0
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 2
30582: PUSH
30583: LD_INT 1
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 2
30592: PUSH
30593: LD_INT 2
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 1
30602: PUSH
30603: LD_INT 2
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 0
30612: PUSH
30613: LD_INT 2
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 1
30622: NEG
30623: PUSH
30624: LD_INT 1
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 2
30633: NEG
30634: PUSH
30635: LD_INT 0
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: LD_INT 2
30644: NEG
30645: PUSH
30646: LD_INT 1
30648: NEG
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 2
30656: NEG
30657: PUSH
30658: LD_INT 2
30660: NEG
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 2
30668: NEG
30669: PUSH
30670: LD_INT 3
30672: NEG
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 1
30680: NEG
30681: PUSH
30682: LD_INT 3
30684: NEG
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 1
30692: PUSH
30693: LD_INT 2
30695: NEG
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 2
30703: PUSH
30704: LD_INT 1
30706: NEG
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
30737: LD_ADDR_VAR 0 24
30741: PUSH
30742: LD_INT 0
30744: PUSH
30745: LD_INT 0
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 0
30754: PUSH
30755: LD_INT 1
30757: NEG
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: LD_INT 1
30765: PUSH
30766: LD_INT 0
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PUSH
30773: LD_INT 1
30775: PUSH
30776: LD_INT 1
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 0
30785: PUSH
30786: LD_INT 1
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 1
30795: NEG
30796: PUSH
30797: LD_INT 0
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 1
30806: NEG
30807: PUSH
30808: LD_INT 1
30810: NEG
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 1
30818: NEG
30819: PUSH
30820: LD_INT 2
30822: NEG
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: LD_INT 0
30830: PUSH
30831: LD_INT 2
30833: NEG
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 1
30841: PUSH
30842: LD_INT 1
30844: NEG
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 2
30852: PUSH
30853: LD_INT 0
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 2
30862: PUSH
30863: LD_INT 1
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 2
30872: PUSH
30873: LD_INT 2
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: LD_INT 1
30882: PUSH
30883: LD_INT 2
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 0
30892: PUSH
30893: LD_INT 2
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 1
30902: NEG
30903: PUSH
30904: LD_INT 1
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 2
30913: NEG
30914: PUSH
30915: LD_INT 0
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 2
30924: NEG
30925: PUSH
30926: LD_INT 1
30928: NEG
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 2
30936: NEG
30937: PUSH
30938: LD_INT 2
30940: NEG
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PUSH
30946: LD_INT 1
30948: PUSH
30949: LD_INT 2
30951: NEG
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 2
30959: PUSH
30960: LD_INT 1
30962: NEG
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 3
30970: PUSH
30971: LD_INT 1
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 3
30980: PUSH
30981: LD_INT 2
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
31013: LD_ADDR_VAR 0 25
31017: PUSH
31018: LD_INT 0
31020: PUSH
31021: LD_INT 0
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 0
31030: PUSH
31031: LD_INT 1
31033: NEG
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 1
31041: PUSH
31042: LD_INT 0
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 1
31051: PUSH
31052: LD_INT 1
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 0
31061: PUSH
31062: LD_INT 1
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 1
31071: NEG
31072: PUSH
31073: LD_INT 0
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 1
31082: NEG
31083: PUSH
31084: LD_INT 1
31086: NEG
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 1
31094: NEG
31095: PUSH
31096: LD_INT 2
31098: NEG
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 0
31106: PUSH
31107: LD_INT 2
31109: NEG
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 1
31117: PUSH
31118: LD_INT 1
31120: NEG
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 2
31128: PUSH
31129: LD_INT 0
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 2
31138: PUSH
31139: LD_INT 1
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 2
31148: PUSH
31149: LD_INT 2
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 1
31158: PUSH
31159: LD_INT 2
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 0
31168: PUSH
31169: LD_INT 2
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 1
31178: NEG
31179: PUSH
31180: LD_INT 1
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 2
31189: NEG
31190: PUSH
31191: LD_INT 0
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 2
31200: NEG
31201: PUSH
31202: LD_INT 1
31204: NEG
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 2
31212: NEG
31213: PUSH
31214: LD_INT 2
31216: NEG
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: LD_INT 3
31224: PUSH
31225: LD_INT 1
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 3
31234: PUSH
31235: LD_INT 2
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 2
31244: PUSH
31245: LD_INT 3
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 1
31254: PUSH
31255: LD_INT 3
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31287: LD_ADDR_VAR 0 26
31291: PUSH
31292: LD_INT 0
31294: PUSH
31295: LD_INT 0
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 0
31304: PUSH
31305: LD_INT 1
31307: NEG
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 1
31315: PUSH
31316: LD_INT 0
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 1
31325: PUSH
31326: LD_INT 1
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 0
31335: PUSH
31336: LD_INT 1
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 1
31345: NEG
31346: PUSH
31347: LD_INT 0
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 1
31356: NEG
31357: PUSH
31358: LD_INT 1
31360: NEG
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 1
31368: NEG
31369: PUSH
31370: LD_INT 2
31372: NEG
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 0
31380: PUSH
31381: LD_INT 2
31383: NEG
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 1
31391: PUSH
31392: LD_INT 1
31394: NEG
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: LD_INT 2
31402: PUSH
31403: LD_INT 0
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 2
31412: PUSH
31413: LD_INT 1
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 2
31422: PUSH
31423: LD_INT 2
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 1
31432: PUSH
31433: LD_INT 2
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 0
31442: PUSH
31443: LD_INT 2
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 1
31452: NEG
31453: PUSH
31454: LD_INT 1
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 2
31463: NEG
31464: PUSH
31465: LD_INT 0
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 2
31474: NEG
31475: PUSH
31476: LD_INT 1
31478: NEG
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 2
31486: NEG
31487: PUSH
31488: LD_INT 2
31490: NEG
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 2
31498: PUSH
31499: LD_INT 3
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 1
31508: PUSH
31509: LD_INT 3
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 1
31518: NEG
31519: PUSH
31520: LD_INT 2
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 2
31529: NEG
31530: PUSH
31531: LD_INT 1
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31563: LD_ADDR_VAR 0 27
31567: PUSH
31568: LD_INT 0
31570: PUSH
31571: LD_INT 0
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 0
31580: PUSH
31581: LD_INT 1
31583: NEG
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: LD_INT 1
31591: PUSH
31592: LD_INT 0
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 1
31601: PUSH
31602: LD_INT 1
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 0
31611: PUSH
31612: LD_INT 1
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 1
31621: NEG
31622: PUSH
31623: LD_INT 0
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: LD_INT 1
31632: NEG
31633: PUSH
31634: LD_INT 1
31636: NEG
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 1
31644: NEG
31645: PUSH
31646: LD_INT 2
31648: NEG
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 0
31656: PUSH
31657: LD_INT 2
31659: NEG
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 1
31667: PUSH
31668: LD_INT 1
31670: NEG
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 2
31678: PUSH
31679: LD_INT 0
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 2
31688: PUSH
31689: LD_INT 1
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 2
31698: PUSH
31699: LD_INT 2
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 1
31708: PUSH
31709: LD_INT 2
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 0
31718: PUSH
31719: LD_INT 2
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: LD_INT 1
31728: NEG
31729: PUSH
31730: LD_INT 1
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: LD_INT 2
31739: NEG
31740: PUSH
31741: LD_INT 0
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 2
31750: NEG
31751: PUSH
31752: LD_INT 1
31754: NEG
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 2
31762: NEG
31763: PUSH
31764: LD_INT 2
31766: NEG
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 1
31774: NEG
31775: PUSH
31776: LD_INT 2
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: LD_INT 2
31785: NEG
31786: PUSH
31787: LD_INT 1
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: LD_INT 3
31796: NEG
31797: PUSH
31798: LD_INT 1
31800: NEG
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 3
31808: NEG
31809: PUSH
31810: LD_INT 2
31812: NEG
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31843: LD_ADDR_VAR 0 28
31847: PUSH
31848: LD_INT 0
31850: PUSH
31851: LD_INT 0
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 0
31860: PUSH
31861: LD_INT 1
31863: NEG
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 1
31871: PUSH
31872: LD_INT 0
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 1
31881: PUSH
31882: LD_INT 1
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 0
31891: PUSH
31892: LD_INT 1
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 1
31901: NEG
31902: PUSH
31903: LD_INT 0
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PUSH
31910: LD_INT 1
31912: NEG
31913: PUSH
31914: LD_INT 1
31916: NEG
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 1
31924: NEG
31925: PUSH
31926: LD_INT 2
31928: NEG
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 0
31936: PUSH
31937: LD_INT 2
31939: NEG
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: LD_INT 1
31947: PUSH
31948: LD_INT 1
31950: NEG
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 2
31958: PUSH
31959: LD_INT 0
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: LD_INT 2
31968: PUSH
31969: LD_INT 1
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: LD_INT 2
31978: PUSH
31979: LD_INT 2
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 1
31988: PUSH
31989: LD_INT 2
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 0
31998: PUSH
31999: LD_INT 2
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 1
32008: NEG
32009: PUSH
32010: LD_INT 1
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 2
32019: NEG
32020: PUSH
32021: LD_INT 0
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 2
32030: NEG
32031: PUSH
32032: LD_INT 1
32034: NEG
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 2
32042: NEG
32043: PUSH
32044: LD_INT 2
32046: NEG
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 2
32054: NEG
32055: PUSH
32056: LD_INT 3
32058: NEG
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 1
32066: NEG
32067: PUSH
32068: LD_INT 3
32070: NEG
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 3
32078: NEG
32079: PUSH
32080: LD_INT 1
32082: NEG
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 3
32090: NEG
32091: PUSH
32092: LD_INT 2
32094: NEG
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32125: LD_ADDR_VAR 0 29
32129: PUSH
32130: LD_INT 0
32132: PUSH
32133: LD_INT 0
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 0
32142: PUSH
32143: LD_INT 1
32145: NEG
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 1
32153: PUSH
32154: LD_INT 0
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: LD_INT 1
32163: PUSH
32164: LD_INT 1
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 0
32173: PUSH
32174: LD_INT 1
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 1
32183: NEG
32184: PUSH
32185: LD_INT 0
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: LD_INT 1
32194: NEG
32195: PUSH
32196: LD_INT 1
32198: NEG
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 1
32206: NEG
32207: PUSH
32208: LD_INT 2
32210: NEG
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 0
32218: PUSH
32219: LD_INT 2
32221: NEG
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 1
32229: PUSH
32230: LD_INT 1
32232: NEG
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 2
32240: PUSH
32241: LD_INT 0
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 2
32250: PUSH
32251: LD_INT 1
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 1
32260: PUSH
32261: LD_INT 2
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 0
32270: PUSH
32271: LD_INT 2
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 1
32280: NEG
32281: PUSH
32282: LD_INT 1
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 2
32291: NEG
32292: PUSH
32293: LD_INT 1
32295: NEG
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 2
32303: NEG
32304: PUSH
32305: LD_INT 2
32307: NEG
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 2
32315: NEG
32316: PUSH
32317: LD_INT 3
32319: NEG
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 2
32327: PUSH
32328: LD_INT 1
32330: NEG
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 3
32338: PUSH
32339: LD_INT 1
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 1
32348: PUSH
32349: LD_INT 3
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 1
32358: NEG
32359: PUSH
32360: LD_INT 2
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 3
32369: NEG
32370: PUSH
32371: LD_INT 2
32373: NEG
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32404: LD_ADDR_VAR 0 30
32408: PUSH
32409: LD_INT 0
32411: PUSH
32412: LD_INT 0
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 0
32421: PUSH
32422: LD_INT 1
32424: NEG
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 1
32432: PUSH
32433: LD_INT 0
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 1
32442: PUSH
32443: LD_INT 1
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 0
32452: PUSH
32453: LD_INT 1
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 1
32462: NEG
32463: PUSH
32464: LD_INT 0
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 1
32473: NEG
32474: PUSH
32475: LD_INT 1
32477: NEG
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 1
32485: NEG
32486: PUSH
32487: LD_INT 2
32489: NEG
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 0
32497: PUSH
32498: LD_INT 2
32500: NEG
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 1
32508: PUSH
32509: LD_INT 1
32511: NEG
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 2
32519: PUSH
32520: LD_INT 0
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 2
32529: PUSH
32530: LD_INT 1
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 2
32539: PUSH
32540: LD_INT 2
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 1
32549: PUSH
32550: LD_INT 2
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 1
32559: NEG
32560: PUSH
32561: LD_INT 1
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 2
32570: NEG
32571: PUSH
32572: LD_INT 0
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 2
32581: NEG
32582: PUSH
32583: LD_INT 1
32585: NEG
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 1
32593: NEG
32594: PUSH
32595: LD_INT 3
32597: NEG
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 1
32605: PUSH
32606: LD_INT 2
32608: NEG
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 3
32616: PUSH
32617: LD_INT 2
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 2
32626: PUSH
32627: LD_INT 3
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 2
32636: NEG
32637: PUSH
32638: LD_INT 1
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 3
32647: NEG
32648: PUSH
32649: LD_INT 1
32651: NEG
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32682: LD_ADDR_VAR 0 31
32686: PUSH
32687: LD_INT 0
32689: PUSH
32690: LD_INT 0
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 0
32699: PUSH
32700: LD_INT 1
32702: NEG
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 1
32710: PUSH
32711: LD_INT 0
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 1
32720: PUSH
32721: LD_INT 1
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 0
32730: PUSH
32731: LD_INT 1
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 1
32740: NEG
32741: PUSH
32742: LD_INT 0
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 1
32751: NEG
32752: PUSH
32753: LD_INT 1
32755: NEG
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 1
32763: NEG
32764: PUSH
32765: LD_INT 2
32767: NEG
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 1
32775: PUSH
32776: LD_INT 1
32778: NEG
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 2
32786: PUSH
32787: LD_INT 0
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 2
32796: PUSH
32797: LD_INT 1
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 2
32806: PUSH
32807: LD_INT 2
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 1
32816: PUSH
32817: LD_INT 2
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 0
32826: PUSH
32827: LD_INT 2
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 1
32836: NEG
32837: PUSH
32838: LD_INT 1
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: LD_INT 2
32847: NEG
32848: PUSH
32849: LD_INT 1
32851: NEG
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 2
32859: NEG
32860: PUSH
32861: LD_INT 2
32863: NEG
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 2
32871: NEG
32872: PUSH
32873: LD_INT 3
32875: NEG
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 2
32883: PUSH
32884: LD_INT 1
32886: NEG
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 3
32894: PUSH
32895: LD_INT 1
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 1
32904: PUSH
32905: LD_INT 3
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 1
32914: NEG
32915: PUSH
32916: LD_INT 2
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PUSH
32923: LD_INT 3
32925: NEG
32926: PUSH
32927: LD_INT 2
32929: NEG
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32960: LD_ADDR_VAR 0 32
32964: PUSH
32965: LD_INT 0
32967: PUSH
32968: LD_INT 0
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 0
32977: PUSH
32978: LD_INT 1
32980: NEG
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 1
32988: PUSH
32989: LD_INT 0
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 1
32998: PUSH
32999: LD_INT 1
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 0
33008: PUSH
33009: LD_INT 1
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 1
33018: NEG
33019: PUSH
33020: LD_INT 0
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 1
33029: NEG
33030: PUSH
33031: LD_INT 1
33033: NEG
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 1
33041: NEG
33042: PUSH
33043: LD_INT 2
33045: NEG
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 0
33053: PUSH
33054: LD_INT 2
33056: NEG
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 1
33064: PUSH
33065: LD_INT 1
33067: NEG
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: LD_INT 2
33075: PUSH
33076: LD_INT 1
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 2
33085: PUSH
33086: LD_INT 2
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 1
33095: PUSH
33096: LD_INT 2
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 0
33105: PUSH
33106: LD_INT 2
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 1
33115: NEG
33116: PUSH
33117: LD_INT 1
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 2
33126: NEG
33127: PUSH
33128: LD_INT 0
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 2
33137: NEG
33138: PUSH
33139: LD_INT 1
33141: NEG
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 1
33149: NEG
33150: PUSH
33151: LD_INT 3
33153: NEG
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 1
33161: PUSH
33162: LD_INT 2
33164: NEG
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 3
33172: PUSH
33173: LD_INT 2
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 2
33182: PUSH
33183: LD_INT 3
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 2
33192: NEG
33193: PUSH
33194: LD_INT 1
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 3
33203: NEG
33204: PUSH
33205: LD_INT 1
33207: NEG
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33238: LD_ADDR_VAR 0 33
33242: PUSH
33243: LD_INT 0
33245: PUSH
33246: LD_INT 0
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 0
33255: PUSH
33256: LD_INT 1
33258: NEG
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 1
33266: PUSH
33267: LD_INT 0
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 1
33276: PUSH
33277: LD_INT 1
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PUSH
33284: LD_INT 0
33286: PUSH
33287: LD_INT 1
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 1
33296: NEG
33297: PUSH
33298: LD_INT 0
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 1
33307: NEG
33308: PUSH
33309: LD_INT 1
33311: NEG
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 1
33319: NEG
33320: PUSH
33321: LD_INT 2
33323: NEG
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 1
33331: PUSH
33332: LD_INT 1
33334: NEG
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 2
33342: PUSH
33343: LD_INT 0
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 2
33352: PUSH
33353: LD_INT 1
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 1
33362: PUSH
33363: LD_INT 2
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 0
33372: PUSH
33373: LD_INT 2
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 1
33382: NEG
33383: PUSH
33384: LD_INT 1
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 2
33393: NEG
33394: PUSH
33395: LD_INT 0
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 2
33404: NEG
33405: PUSH
33406: LD_INT 1
33408: NEG
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 2
33416: NEG
33417: PUSH
33418: LD_INT 2
33420: NEG
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: LD_INT 2
33428: NEG
33429: PUSH
33430: LD_INT 3
33432: NEG
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 2
33440: PUSH
33441: LD_INT 1
33443: NEG
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 3
33451: PUSH
33452: LD_INT 1
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 1
33461: PUSH
33462: LD_INT 3
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 1
33471: NEG
33472: PUSH
33473: LD_INT 2
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 3
33482: NEG
33483: PUSH
33484: LD_INT 2
33486: NEG
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33517: LD_ADDR_VAR 0 34
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: LD_INT 0
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 0
33534: PUSH
33535: LD_INT 1
33537: NEG
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 1
33545: PUSH
33546: LD_INT 0
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 1
33555: PUSH
33556: LD_INT 1
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 0
33565: PUSH
33566: LD_INT 1
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: LD_INT 1
33575: NEG
33576: PUSH
33577: LD_INT 0
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 1
33586: NEG
33587: PUSH
33588: LD_INT 1
33590: NEG
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 1
33598: NEG
33599: PUSH
33600: LD_INT 2
33602: NEG
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 0
33610: PUSH
33611: LD_INT 2
33613: NEG
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 1
33621: PUSH
33622: LD_INT 1
33624: NEG
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 2
33632: PUSH
33633: LD_INT 1
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 2
33642: PUSH
33643: LD_INT 2
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 1
33652: PUSH
33653: LD_INT 2
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 1
33662: NEG
33663: PUSH
33664: LD_INT 1
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 2
33673: NEG
33674: PUSH
33675: LD_INT 0
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 2
33684: NEG
33685: PUSH
33686: LD_INT 1
33688: NEG
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 2
33696: NEG
33697: PUSH
33698: LD_INT 2
33700: NEG
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 1
33708: NEG
33709: PUSH
33710: LD_INT 3
33712: NEG
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 1
33720: PUSH
33721: LD_INT 2
33723: NEG
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 3
33731: PUSH
33732: LD_INT 2
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 2
33741: PUSH
33742: LD_INT 3
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 2
33751: NEG
33752: PUSH
33753: LD_INT 1
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 3
33762: NEG
33763: PUSH
33764: LD_INT 1
33766: NEG
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33797: LD_ADDR_VAR 0 35
33801: PUSH
33802: LD_INT 0
33804: PUSH
33805: LD_INT 0
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 0
33814: PUSH
33815: LD_INT 1
33817: NEG
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 1
33825: PUSH
33826: LD_INT 0
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: LD_INT 1
33835: PUSH
33836: LD_INT 1
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 0
33845: PUSH
33846: LD_INT 1
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 1
33855: NEG
33856: PUSH
33857: LD_INT 0
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 1
33866: NEG
33867: PUSH
33868: LD_INT 1
33870: NEG
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 2
33878: PUSH
33879: LD_INT 1
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 2
33888: NEG
33889: PUSH
33890: LD_INT 1
33892: NEG
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33909: LD_ADDR_VAR 0 36
33913: PUSH
33914: LD_INT 0
33916: PUSH
33917: LD_INT 0
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 0
33926: PUSH
33927: LD_INT 1
33929: NEG
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 1
33937: PUSH
33938: LD_INT 0
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 1
33947: PUSH
33948: LD_INT 1
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 0
33957: PUSH
33958: LD_INT 1
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 1
33967: NEG
33968: PUSH
33969: LD_INT 0
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 1
33978: NEG
33979: PUSH
33980: LD_INT 1
33982: NEG
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 1
33990: NEG
33991: PUSH
33992: LD_INT 2
33994: NEG
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 1
34002: PUSH
34003: LD_INT 2
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
34021: LD_ADDR_VAR 0 37
34025: PUSH
34026: LD_INT 0
34028: PUSH
34029: LD_INT 0
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 0
34038: PUSH
34039: LD_INT 1
34041: NEG
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 1
34049: PUSH
34050: LD_INT 0
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: LD_INT 1
34059: PUSH
34060: LD_INT 1
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 0
34069: PUSH
34070: LD_INT 1
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 1
34079: NEG
34080: PUSH
34081: LD_INT 0
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 1
34090: NEG
34091: PUSH
34092: LD_INT 1
34094: NEG
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 1
34102: PUSH
34103: LD_INT 1
34105: NEG
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 1
34113: NEG
34114: PUSH
34115: LD_INT 1
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
34133: LD_ADDR_VAR 0 38
34137: PUSH
34138: LD_INT 0
34140: PUSH
34141: LD_INT 0
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: LD_INT 0
34150: PUSH
34151: LD_INT 1
34153: NEG
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 1
34161: PUSH
34162: LD_INT 0
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 1
34171: PUSH
34172: LD_INT 1
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 0
34181: PUSH
34182: LD_INT 1
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 1
34191: NEG
34192: PUSH
34193: LD_INT 0
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 1
34202: NEG
34203: PUSH
34204: LD_INT 1
34206: NEG
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 2
34214: PUSH
34215: LD_INT 1
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 2
34224: NEG
34225: PUSH
34226: LD_INT 1
34228: NEG
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
34245: LD_ADDR_VAR 0 39
34249: PUSH
34250: LD_INT 0
34252: PUSH
34253: LD_INT 0
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 0
34262: PUSH
34263: LD_INT 1
34265: NEG
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 1
34273: PUSH
34274: LD_INT 0
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 1
34283: PUSH
34284: LD_INT 1
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 0
34293: PUSH
34294: LD_INT 1
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 1
34303: NEG
34304: PUSH
34305: LD_INT 0
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 1
34314: NEG
34315: PUSH
34316: LD_INT 1
34318: NEG
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 1
34326: NEG
34327: PUSH
34328: LD_INT 2
34330: NEG
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 1
34338: PUSH
34339: LD_INT 2
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
34357: LD_ADDR_VAR 0 40
34361: PUSH
34362: LD_INT 0
34364: PUSH
34365: LD_INT 0
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 0
34374: PUSH
34375: LD_INT 1
34377: NEG
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 1
34385: PUSH
34386: LD_INT 0
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 1
34395: PUSH
34396: LD_INT 1
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 0
34405: PUSH
34406: LD_INT 1
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 1
34415: NEG
34416: PUSH
34417: LD_INT 0
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 1
34426: NEG
34427: PUSH
34428: LD_INT 1
34430: NEG
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 1
34438: PUSH
34439: LD_INT 1
34441: NEG
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 1
34449: NEG
34450: PUSH
34451: LD_INT 1
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34469: LD_ADDR_VAR 0 41
34473: PUSH
34474: LD_INT 0
34476: PUSH
34477: LD_INT 0
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 0
34486: PUSH
34487: LD_INT 1
34489: NEG
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 1
34497: PUSH
34498: LD_INT 0
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 1
34507: PUSH
34508: LD_INT 1
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_INT 0
34517: PUSH
34518: LD_INT 1
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: PUSH
34525: LD_INT 1
34527: NEG
34528: PUSH
34529: LD_INT 0
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 1
34538: NEG
34539: PUSH
34540: LD_INT 1
34542: NEG
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 1
34550: NEG
34551: PUSH
34552: LD_INT 2
34554: NEG
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 1
34562: PUSH
34563: LD_INT 1
34565: NEG
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 2
34573: PUSH
34574: LD_INT 0
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 2
34583: PUSH
34584: LD_INT 1
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 2
34593: PUSH
34594: LD_INT 2
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 1
34603: PUSH
34604: LD_INT 2
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 1
34613: NEG
34614: PUSH
34615: LD_INT 1
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 2
34624: NEG
34625: PUSH
34626: LD_INT 0
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 2
34635: NEG
34636: PUSH
34637: LD_INT 1
34639: NEG
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 2
34647: NEG
34648: PUSH
34649: LD_INT 2
34651: NEG
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 2
34659: NEG
34660: PUSH
34661: LD_INT 3
34663: NEG
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 2
34671: PUSH
34672: LD_INT 1
34674: NEG
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: LD_INT 3
34682: PUSH
34683: LD_INT 0
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 3
34692: PUSH
34693: LD_INT 1
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 3
34702: PUSH
34703: LD_INT 2
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 3
34712: PUSH
34713: LD_INT 3
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 2
34722: PUSH
34723: LD_INT 3
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 2
34732: NEG
34733: PUSH
34734: LD_INT 1
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 3
34743: NEG
34744: PUSH
34745: LD_INT 0
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 3
34754: NEG
34755: PUSH
34756: LD_INT 1
34758: NEG
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 3
34766: NEG
34767: PUSH
34768: LD_INT 2
34770: NEG
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 3
34778: NEG
34779: PUSH
34780: LD_INT 3
34782: NEG
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34819: LD_ADDR_VAR 0 42
34823: PUSH
34824: LD_INT 0
34826: PUSH
34827: LD_INT 0
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 0
34836: PUSH
34837: LD_INT 1
34839: NEG
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 1
34847: PUSH
34848: LD_INT 0
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 1
34857: PUSH
34858: LD_INT 1
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 0
34867: PUSH
34868: LD_INT 1
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 1
34877: NEG
34878: PUSH
34879: LD_INT 0
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 1
34888: NEG
34889: PUSH
34890: LD_INT 1
34892: NEG
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 1
34900: NEG
34901: PUSH
34902: LD_INT 2
34904: NEG
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 0
34912: PUSH
34913: LD_INT 2
34915: NEG
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 1
34923: PUSH
34924: LD_INT 1
34926: NEG
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 2
34934: PUSH
34935: LD_INT 1
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 2
34944: PUSH
34945: LD_INT 2
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 1
34954: PUSH
34955: LD_INT 2
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 0
34964: PUSH
34965: LD_INT 2
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 1
34974: NEG
34975: PUSH
34976: LD_INT 1
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 2
34985: NEG
34986: PUSH
34987: LD_INT 1
34989: NEG
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 2
34997: NEG
34998: PUSH
34999: LD_INT 2
35001: NEG
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: LD_INT 2
35009: NEG
35010: PUSH
35011: LD_INT 3
35013: NEG
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 1
35021: NEG
35022: PUSH
35023: LD_INT 3
35025: NEG
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 0
35033: PUSH
35034: LD_INT 3
35036: NEG
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 1
35044: PUSH
35045: LD_INT 2
35047: NEG
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 3
35055: PUSH
35056: LD_INT 2
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 3
35065: PUSH
35066: LD_INT 3
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 2
35075: PUSH
35076: LD_INT 3
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 1
35085: PUSH
35086: LD_INT 3
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 0
35095: PUSH
35096: LD_INT 3
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 1
35105: NEG
35106: PUSH
35107: LD_INT 2
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 3
35116: NEG
35117: PUSH
35118: LD_INT 2
35120: NEG
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 3
35128: NEG
35129: PUSH
35130: LD_INT 3
35132: NEG
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35169: LD_ADDR_VAR 0 43
35173: PUSH
35174: LD_INT 0
35176: PUSH
35177: LD_INT 0
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 0
35186: PUSH
35187: LD_INT 1
35189: NEG
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 1
35197: PUSH
35198: LD_INT 0
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 1
35207: PUSH
35208: LD_INT 1
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 0
35217: PUSH
35218: LD_INT 1
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 1
35227: NEG
35228: PUSH
35229: LD_INT 0
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 1
35238: NEG
35239: PUSH
35240: LD_INT 1
35242: NEG
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 1
35250: NEG
35251: PUSH
35252: LD_INT 2
35254: NEG
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 0
35262: PUSH
35263: LD_INT 2
35265: NEG
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 1
35273: PUSH
35274: LD_INT 1
35276: NEG
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 2
35284: PUSH
35285: LD_INT 0
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 2
35294: PUSH
35295: LD_INT 1
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: LD_INT 1
35304: PUSH
35305: LD_INT 2
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 0
35314: PUSH
35315: LD_INT 2
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 1
35324: NEG
35325: PUSH
35326: LD_INT 1
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 2
35335: NEG
35336: PUSH
35337: LD_INT 0
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 2
35346: NEG
35347: PUSH
35348: LD_INT 1
35350: NEG
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: LD_INT 1
35358: NEG
35359: PUSH
35360: LD_INT 3
35362: NEG
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_INT 0
35370: PUSH
35371: LD_INT 3
35373: NEG
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 1
35381: PUSH
35382: LD_INT 2
35384: NEG
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 2
35392: PUSH
35393: LD_INT 1
35395: NEG
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 3
35403: PUSH
35404: LD_INT 0
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 3
35413: PUSH
35414: LD_INT 1
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 1
35423: PUSH
35424: LD_INT 3
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 0
35433: PUSH
35434: LD_INT 3
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 1
35443: NEG
35444: PUSH
35445: LD_INT 2
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 2
35454: NEG
35455: PUSH
35456: LD_INT 1
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 3
35465: NEG
35466: PUSH
35467: LD_INT 0
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 3
35476: NEG
35477: PUSH
35478: LD_INT 1
35480: NEG
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35517: LD_ADDR_VAR 0 44
35521: PUSH
35522: LD_INT 0
35524: PUSH
35525: LD_INT 0
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 0
35534: PUSH
35535: LD_INT 1
35537: NEG
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 1
35545: PUSH
35546: LD_INT 0
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 1
35555: PUSH
35556: LD_INT 1
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 0
35565: PUSH
35566: LD_INT 1
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 1
35575: NEG
35576: PUSH
35577: LD_INT 0
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 1
35586: NEG
35587: PUSH
35588: LD_INT 1
35590: NEG
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 1
35598: NEG
35599: PUSH
35600: LD_INT 2
35602: NEG
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 1
35610: PUSH
35611: LD_INT 1
35613: NEG
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 2
35621: PUSH
35622: LD_INT 0
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 2
35631: PUSH
35632: LD_INT 1
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 2
35641: PUSH
35642: LD_INT 2
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 1
35651: PUSH
35652: LD_INT 2
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 1
35661: NEG
35662: PUSH
35663: LD_INT 1
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: LD_INT 2
35672: NEG
35673: PUSH
35674: LD_INT 0
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 2
35683: NEG
35684: PUSH
35685: LD_INT 1
35687: NEG
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 2
35695: NEG
35696: PUSH
35697: LD_INT 2
35699: NEG
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: LD_INT 2
35707: NEG
35708: PUSH
35709: LD_INT 3
35711: NEG
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 2
35719: PUSH
35720: LD_INT 1
35722: NEG
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 3
35730: PUSH
35731: LD_INT 0
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 3
35740: PUSH
35741: LD_INT 1
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 3
35750: PUSH
35751: LD_INT 2
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 3
35760: PUSH
35761: LD_INT 3
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 2
35770: PUSH
35771: LD_INT 3
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 2
35780: NEG
35781: PUSH
35782: LD_INT 1
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 3
35791: NEG
35792: PUSH
35793: LD_INT 0
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 3
35802: NEG
35803: PUSH
35804: LD_INT 1
35806: NEG
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 3
35814: NEG
35815: PUSH
35816: LD_INT 2
35818: NEG
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: LD_INT 3
35826: NEG
35827: PUSH
35828: LD_INT 3
35830: NEG
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35867: LD_ADDR_VAR 0 45
35871: PUSH
35872: LD_INT 0
35874: PUSH
35875: LD_INT 0
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 0
35884: PUSH
35885: LD_INT 1
35887: NEG
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 1
35895: PUSH
35896: LD_INT 0
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 1
35905: PUSH
35906: LD_INT 1
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 0
35915: PUSH
35916: LD_INT 1
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 1
35925: NEG
35926: PUSH
35927: LD_INT 0
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 1
35936: NEG
35937: PUSH
35938: LD_INT 1
35940: NEG
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: LD_INT 1
35948: NEG
35949: PUSH
35950: LD_INT 2
35952: NEG
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 0
35960: PUSH
35961: LD_INT 2
35963: NEG
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 1
35971: PUSH
35972: LD_INT 1
35974: NEG
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 2
35982: PUSH
35983: LD_INT 1
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 2
35992: PUSH
35993: LD_INT 2
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 1
36002: PUSH
36003: LD_INT 2
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 0
36012: PUSH
36013: LD_INT 2
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 1
36022: NEG
36023: PUSH
36024: LD_INT 1
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 2
36033: NEG
36034: PUSH
36035: LD_INT 1
36037: NEG
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 2
36045: NEG
36046: PUSH
36047: LD_INT 2
36049: NEG
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 2
36057: NEG
36058: PUSH
36059: LD_INT 3
36061: NEG
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 1
36069: NEG
36070: PUSH
36071: LD_INT 3
36073: NEG
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 0
36081: PUSH
36082: LD_INT 3
36084: NEG
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 1
36092: PUSH
36093: LD_INT 2
36095: NEG
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 3
36103: PUSH
36104: LD_INT 2
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 3
36113: PUSH
36114: LD_INT 3
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 2
36123: PUSH
36124: LD_INT 3
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 1
36133: PUSH
36134: LD_INT 3
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 0
36143: PUSH
36144: LD_INT 3
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 1
36153: NEG
36154: PUSH
36155: LD_INT 2
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 3
36164: NEG
36165: PUSH
36166: LD_INT 2
36168: NEG
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 3
36176: NEG
36177: PUSH
36178: LD_INT 3
36180: NEG
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36217: LD_ADDR_VAR 0 46
36221: PUSH
36222: LD_INT 0
36224: PUSH
36225: LD_INT 0
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 0
36234: PUSH
36235: LD_INT 1
36237: NEG
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 1
36245: PUSH
36246: LD_INT 0
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: LD_INT 1
36255: PUSH
36256: LD_INT 1
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 0
36265: PUSH
36266: LD_INT 1
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 1
36275: NEG
36276: PUSH
36277: LD_INT 0
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 1
36286: NEG
36287: PUSH
36288: LD_INT 1
36290: NEG
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: LD_INT 1
36298: NEG
36299: PUSH
36300: LD_INT 2
36302: NEG
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 0
36310: PUSH
36311: LD_INT 2
36313: NEG
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: LD_INT 1
36321: PUSH
36322: LD_INT 1
36324: NEG
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: LD_INT 2
36332: PUSH
36333: LD_INT 0
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 2
36342: PUSH
36343: LD_INT 1
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 1
36352: PUSH
36353: LD_INT 2
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: PUSH
36360: LD_INT 0
36362: PUSH
36363: LD_INT 2
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PUSH
36370: LD_INT 1
36372: NEG
36373: PUSH
36374: LD_INT 1
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 2
36383: NEG
36384: PUSH
36385: LD_INT 0
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: LD_INT 2
36394: NEG
36395: PUSH
36396: LD_INT 1
36398: NEG
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 1
36406: NEG
36407: PUSH
36408: LD_INT 3
36410: NEG
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 0
36418: PUSH
36419: LD_INT 3
36421: NEG
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 1
36429: PUSH
36430: LD_INT 2
36432: NEG
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 2
36440: PUSH
36441: LD_INT 1
36443: NEG
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 3
36451: PUSH
36452: LD_INT 0
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 3
36461: PUSH
36462: LD_INT 1
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 1
36471: PUSH
36472: LD_INT 3
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 0
36481: PUSH
36482: LD_INT 3
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 1
36491: NEG
36492: PUSH
36493: LD_INT 2
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 2
36502: NEG
36503: PUSH
36504: LD_INT 1
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 3
36513: NEG
36514: PUSH
36515: LD_INT 0
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: PUSH
36522: LD_INT 3
36524: NEG
36525: PUSH
36526: LD_INT 1
36528: NEG
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36565: LD_ADDR_VAR 0 47
36569: PUSH
36570: LD_INT 0
36572: PUSH
36573: LD_INT 0
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 0
36582: PUSH
36583: LD_INT 1
36585: NEG
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 1
36593: PUSH
36594: LD_INT 0
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: LD_INT 1
36603: PUSH
36604: LD_INT 1
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 0
36613: PUSH
36614: LD_INT 1
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: LD_INT 1
36623: NEG
36624: PUSH
36625: LD_INT 0
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 1
36634: NEG
36635: PUSH
36636: LD_INT 1
36638: NEG
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 1
36646: NEG
36647: PUSH
36648: LD_INT 2
36650: NEG
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 0
36658: PUSH
36659: LD_INT 2
36661: NEG
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 1
36669: PUSH
36670: LD_INT 1
36672: NEG
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 2
36680: NEG
36681: PUSH
36682: LD_INT 1
36684: NEG
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 2
36692: NEG
36693: PUSH
36694: LD_INT 2
36696: NEG
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
36716: LD_ADDR_VAR 0 48
36720: PUSH
36721: LD_INT 0
36723: PUSH
36724: LD_INT 0
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 0
36733: PUSH
36734: LD_INT 1
36736: NEG
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 1
36744: PUSH
36745: LD_INT 0
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 1
36754: PUSH
36755: LD_INT 1
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 0
36764: PUSH
36765: LD_INT 1
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 1
36774: NEG
36775: PUSH
36776: LD_INT 0
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 1
36785: NEG
36786: PUSH
36787: LD_INT 1
36789: NEG
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 1
36797: NEG
36798: PUSH
36799: LD_INT 2
36801: NEG
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 0
36809: PUSH
36810: LD_INT 2
36812: NEG
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 1
36820: PUSH
36821: LD_INT 1
36823: NEG
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PUSH
36829: LD_INT 2
36831: PUSH
36832: LD_INT 0
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 2
36841: PUSH
36842: LD_INT 1
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36863: LD_ADDR_VAR 0 49
36867: PUSH
36868: LD_INT 0
36870: PUSH
36871: LD_INT 0
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 0
36880: PUSH
36881: LD_INT 1
36883: NEG
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 1
36891: PUSH
36892: LD_INT 0
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 1
36901: PUSH
36902: LD_INT 1
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 0
36911: PUSH
36912: LD_INT 1
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 1
36921: NEG
36922: PUSH
36923: LD_INT 0
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 1
36932: NEG
36933: PUSH
36934: LD_INT 1
36936: NEG
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 1
36944: PUSH
36945: LD_INT 1
36947: NEG
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 2
36955: PUSH
36956: LD_INT 0
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 2
36965: PUSH
36966: LD_INT 1
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 2
36975: PUSH
36976: LD_INT 2
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 1
36985: PUSH
36986: LD_INT 2
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37007: LD_ADDR_VAR 0 50
37011: PUSH
37012: LD_INT 0
37014: PUSH
37015: LD_INT 0
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 0
37024: PUSH
37025: LD_INT 1
37027: NEG
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 1
37035: PUSH
37036: LD_INT 0
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 1
37045: PUSH
37046: LD_INT 1
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 0
37055: PUSH
37056: LD_INT 1
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 1
37065: NEG
37066: PUSH
37067: LD_INT 0
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 1
37076: NEG
37077: PUSH
37078: LD_INT 1
37080: NEG
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 2
37088: PUSH
37089: LD_INT 1
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 2
37098: PUSH
37099: LD_INT 2
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 1
37108: PUSH
37109: LD_INT 2
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 0
37118: PUSH
37119: LD_INT 2
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 1
37128: NEG
37129: PUSH
37130: LD_INT 1
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37151: LD_ADDR_VAR 0 51
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: LD_INT 0
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 0
37168: PUSH
37169: LD_INT 1
37171: NEG
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 1
37179: PUSH
37180: LD_INT 0
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 1
37189: PUSH
37190: LD_INT 1
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 0
37199: PUSH
37200: LD_INT 1
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 1
37209: NEG
37210: PUSH
37211: LD_INT 0
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 1
37220: NEG
37221: PUSH
37222: LD_INT 1
37224: NEG
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 1
37232: PUSH
37233: LD_INT 2
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 0
37242: PUSH
37243: LD_INT 2
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 1
37252: NEG
37253: PUSH
37254: LD_INT 1
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 2
37263: NEG
37264: PUSH
37265: LD_INT 0
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 2
37274: NEG
37275: PUSH
37276: LD_INT 1
37278: NEG
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37298: LD_ADDR_VAR 0 52
37302: PUSH
37303: LD_INT 0
37305: PUSH
37306: LD_INT 0
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 0
37315: PUSH
37316: LD_INT 1
37318: NEG
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 1
37326: PUSH
37327: LD_INT 0
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PUSH
37334: LD_INT 1
37336: PUSH
37337: LD_INT 1
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: LD_INT 0
37346: PUSH
37347: LD_INT 1
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 1
37356: NEG
37357: PUSH
37358: LD_INT 0
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 1
37367: NEG
37368: PUSH
37369: LD_INT 1
37371: NEG
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 1
37379: NEG
37380: PUSH
37381: LD_INT 2
37383: NEG
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 1
37391: NEG
37392: PUSH
37393: LD_INT 1
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 2
37402: NEG
37403: PUSH
37404: LD_INT 0
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 2
37413: NEG
37414: PUSH
37415: LD_INT 1
37417: NEG
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 2
37425: NEG
37426: PUSH
37427: LD_INT 2
37429: NEG
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37449: LD_ADDR_VAR 0 53
37453: PUSH
37454: LD_INT 0
37456: PUSH
37457: LD_INT 0
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 0
37466: PUSH
37467: LD_INT 1
37469: NEG
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: LD_INT 1
37477: PUSH
37478: LD_INT 0
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: LD_INT 1
37487: PUSH
37488: LD_INT 1
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 0
37497: PUSH
37498: LD_INT 1
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 1
37507: NEG
37508: PUSH
37509: LD_INT 0
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 1
37518: NEG
37519: PUSH
37520: LD_INT 1
37522: NEG
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 1
37530: NEG
37531: PUSH
37532: LD_INT 2
37534: NEG
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 0
37542: PUSH
37543: LD_INT 2
37545: NEG
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 1
37553: PUSH
37554: LD_INT 1
37556: NEG
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: LD_INT 2
37564: PUSH
37565: LD_INT 0
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 2
37574: PUSH
37575: LD_INT 1
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 2
37584: PUSH
37585: LD_INT 2
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: LD_INT 1
37594: PUSH
37595: LD_INT 2
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 0
37604: PUSH
37605: LD_INT 2
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 1
37614: NEG
37615: PUSH
37616: LD_INT 1
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 2
37625: NEG
37626: PUSH
37627: LD_INT 0
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 2
37636: NEG
37637: PUSH
37638: LD_INT 1
37640: NEG
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 2
37648: NEG
37649: PUSH
37650: LD_INT 2
37652: NEG
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37679: LD_ADDR_VAR 0 54
37683: PUSH
37684: LD_INT 0
37686: PUSH
37687: LD_INT 0
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 0
37696: PUSH
37697: LD_INT 1
37699: NEG
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 1
37707: PUSH
37708: LD_INT 0
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 1
37717: PUSH
37718: LD_INT 1
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 0
37727: PUSH
37728: LD_INT 1
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 1
37737: NEG
37738: PUSH
37739: LD_INT 0
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PUSH
37746: LD_INT 1
37748: NEG
37749: PUSH
37750: LD_INT 1
37752: NEG
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 1
37760: NEG
37761: PUSH
37762: LD_INT 2
37764: NEG
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 0
37772: PUSH
37773: LD_INT 2
37775: NEG
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: LD_INT 1
37783: PUSH
37784: LD_INT 1
37786: NEG
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 2
37794: PUSH
37795: LD_INT 0
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 2
37804: PUSH
37805: LD_INT 1
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 2
37814: PUSH
37815: LD_INT 2
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 1
37824: PUSH
37825: LD_INT 2
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 0
37834: PUSH
37835: LD_INT 2
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 1
37844: NEG
37845: PUSH
37846: LD_INT 1
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 2
37855: NEG
37856: PUSH
37857: LD_INT 0
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 2
37866: NEG
37867: PUSH
37868: LD_INT 1
37870: NEG
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 2
37878: NEG
37879: PUSH
37880: LD_INT 2
37882: NEG
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37909: LD_ADDR_VAR 0 55
37913: PUSH
37914: LD_INT 0
37916: PUSH
37917: LD_INT 0
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 0
37926: PUSH
37927: LD_INT 1
37929: NEG
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PUSH
37935: LD_INT 1
37937: PUSH
37938: LD_INT 0
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 1
37947: PUSH
37948: LD_INT 1
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 0
37957: PUSH
37958: LD_INT 1
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 1
37967: NEG
37968: PUSH
37969: LD_INT 0
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 1
37978: NEG
37979: PUSH
37980: LD_INT 1
37982: NEG
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: LD_INT 1
37990: NEG
37991: PUSH
37992: LD_INT 2
37994: NEG
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: LD_INT 0
38002: PUSH
38003: LD_INT 2
38005: NEG
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 1
38013: PUSH
38014: LD_INT 1
38016: NEG
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 2
38024: PUSH
38025: LD_INT 0
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 2
38034: PUSH
38035: LD_INT 1
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 2
38044: PUSH
38045: LD_INT 2
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 1
38054: PUSH
38055: LD_INT 2
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 0
38064: PUSH
38065: LD_INT 2
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 1
38074: NEG
38075: PUSH
38076: LD_INT 1
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 2
38085: NEG
38086: PUSH
38087: LD_INT 0
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 2
38096: NEG
38097: PUSH
38098: LD_INT 1
38100: NEG
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 2
38108: NEG
38109: PUSH
38110: LD_INT 2
38112: NEG
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38139: LD_ADDR_VAR 0 56
38143: PUSH
38144: LD_INT 0
38146: PUSH
38147: LD_INT 0
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 0
38156: PUSH
38157: LD_INT 1
38159: NEG
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: LD_INT 1
38167: PUSH
38168: LD_INT 0
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 1
38177: PUSH
38178: LD_INT 1
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 0
38187: PUSH
38188: LD_INT 1
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 1
38197: NEG
38198: PUSH
38199: LD_INT 0
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 1
38208: NEG
38209: PUSH
38210: LD_INT 1
38212: NEG
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 1
38220: NEG
38221: PUSH
38222: LD_INT 2
38224: NEG
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 0
38232: PUSH
38233: LD_INT 2
38235: NEG
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 1
38243: PUSH
38244: LD_INT 1
38246: NEG
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: LD_INT 2
38254: PUSH
38255: LD_INT 0
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 2
38264: PUSH
38265: LD_INT 1
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 2
38274: PUSH
38275: LD_INT 2
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 1
38284: PUSH
38285: LD_INT 2
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 0
38294: PUSH
38295: LD_INT 2
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 1
38304: NEG
38305: PUSH
38306: LD_INT 1
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 2
38315: NEG
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 2
38326: NEG
38327: PUSH
38328: LD_INT 1
38330: NEG
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 2
38338: NEG
38339: PUSH
38340: LD_INT 2
38342: NEG
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: LIST
38352: LIST
38353: LIST
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38369: LD_ADDR_VAR 0 57
38373: PUSH
38374: LD_INT 0
38376: PUSH
38377: LD_INT 0
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 0
38386: PUSH
38387: LD_INT 1
38389: NEG
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 1
38397: PUSH
38398: LD_INT 0
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 1
38407: PUSH
38408: LD_INT 1
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 0
38417: PUSH
38418: LD_INT 1
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 1
38427: NEG
38428: PUSH
38429: LD_INT 0
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 1
38438: NEG
38439: PUSH
38440: LD_INT 1
38442: NEG
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 1
38450: NEG
38451: PUSH
38452: LD_INT 2
38454: NEG
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 0
38462: PUSH
38463: LD_INT 2
38465: NEG
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 1
38473: PUSH
38474: LD_INT 1
38476: NEG
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 2
38484: PUSH
38485: LD_INT 0
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PUSH
38492: LD_INT 2
38494: PUSH
38495: LD_INT 1
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 2
38504: PUSH
38505: LD_INT 2
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 1
38514: PUSH
38515: LD_INT 2
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 0
38524: PUSH
38525: LD_INT 2
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 1
38534: NEG
38535: PUSH
38536: LD_INT 1
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 2
38545: NEG
38546: PUSH
38547: LD_INT 0
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 2
38556: NEG
38557: PUSH
38558: LD_INT 1
38560: NEG
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 2
38568: NEG
38569: PUSH
38570: LD_INT 2
38572: NEG
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38599: LD_ADDR_VAR 0 58
38603: PUSH
38604: LD_INT 0
38606: PUSH
38607: LD_INT 0
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 0
38616: PUSH
38617: LD_INT 1
38619: NEG
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 1
38627: PUSH
38628: LD_INT 0
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 1
38637: PUSH
38638: LD_INT 1
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 0
38647: PUSH
38648: LD_INT 1
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 1
38657: NEG
38658: PUSH
38659: LD_INT 0
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 1
38668: NEG
38669: PUSH
38670: LD_INT 1
38672: NEG
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 1
38680: NEG
38681: PUSH
38682: LD_INT 2
38684: NEG
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 0
38692: PUSH
38693: LD_INT 2
38695: NEG
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 1
38703: PUSH
38704: LD_INT 1
38706: NEG
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 2
38714: PUSH
38715: LD_INT 0
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 2
38724: PUSH
38725: LD_INT 1
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 2
38734: PUSH
38735: LD_INT 2
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 1
38744: PUSH
38745: LD_INT 2
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 0
38754: PUSH
38755: LD_INT 2
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 1
38764: NEG
38765: PUSH
38766: LD_INT 1
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 2
38775: NEG
38776: PUSH
38777: LD_INT 0
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 2
38786: NEG
38787: PUSH
38788: LD_INT 1
38790: NEG
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 2
38798: NEG
38799: PUSH
38800: LD_INT 2
38802: NEG
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38829: LD_ADDR_VAR 0 59
38833: PUSH
38834: LD_INT 0
38836: PUSH
38837: LD_INT 0
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 0
38846: PUSH
38847: LD_INT 1
38849: NEG
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 1
38857: PUSH
38858: LD_INT 0
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: LD_INT 1
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: LD_INT 1
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 1
38887: NEG
38888: PUSH
38889: LD_INT 0
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 1
38898: NEG
38899: PUSH
38900: LD_INT 1
38902: NEG
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38917: LD_ADDR_VAR 0 60
38921: PUSH
38922: LD_INT 0
38924: PUSH
38925: LD_INT 0
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 0
38934: PUSH
38935: LD_INT 1
38937: NEG
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 1
38945: PUSH
38946: LD_INT 0
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 1
38955: PUSH
38956: LD_INT 1
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 0
38965: PUSH
38966: LD_INT 1
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 1
38975: NEG
38976: PUSH
38977: LD_INT 0
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 1
38986: NEG
38987: PUSH
38988: LD_INT 1
38990: NEG
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39005: LD_ADDR_VAR 0 61
39009: PUSH
39010: LD_INT 0
39012: PUSH
39013: LD_INT 0
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 0
39022: PUSH
39023: LD_INT 1
39025: NEG
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 1
39033: PUSH
39034: LD_INT 0
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 1
39043: PUSH
39044: LD_INT 1
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 0
39053: PUSH
39054: LD_INT 1
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PUSH
39061: LD_INT 1
39063: NEG
39064: PUSH
39065: LD_INT 0
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 1
39074: NEG
39075: PUSH
39076: LD_INT 1
39078: NEG
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39093: LD_ADDR_VAR 0 62
39097: PUSH
39098: LD_INT 0
39100: PUSH
39101: LD_INT 0
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 0
39110: PUSH
39111: LD_INT 1
39113: NEG
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 1
39121: PUSH
39122: LD_INT 0
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 1
39131: PUSH
39132: LD_INT 1
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 0
39141: PUSH
39142: LD_INT 1
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 1
39151: NEG
39152: PUSH
39153: LD_INT 0
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 1
39162: NEG
39163: PUSH
39164: LD_INT 1
39166: NEG
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39181: LD_ADDR_VAR 0 63
39185: PUSH
39186: LD_INT 0
39188: PUSH
39189: LD_INT 0
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 0
39198: PUSH
39199: LD_INT 1
39201: NEG
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 1
39209: PUSH
39210: LD_INT 0
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 1
39219: PUSH
39220: LD_INT 1
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 0
39229: PUSH
39230: LD_INT 1
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 1
39239: NEG
39240: PUSH
39241: LD_INT 0
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 1
39250: NEG
39251: PUSH
39252: LD_INT 1
39254: NEG
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39269: LD_ADDR_VAR 0 64
39273: PUSH
39274: LD_INT 0
39276: PUSH
39277: LD_INT 0
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 0
39286: PUSH
39287: LD_INT 1
39289: NEG
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 1
39297: PUSH
39298: LD_INT 0
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 1
39307: PUSH
39308: LD_INT 1
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: LD_INT 1
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 1
39327: NEG
39328: PUSH
39329: LD_INT 0
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 1
39338: NEG
39339: PUSH
39340: LD_INT 1
39342: NEG
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: ST_TO_ADDR
// end ; 1 :
39357: GO 45254
39359: LD_INT 1
39361: DOUBLE
39362: EQUAL
39363: IFTRUE 39367
39365: GO 41990
39367: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39368: LD_ADDR_VAR 0 11
39372: PUSH
39373: LD_INT 1
39375: NEG
39376: PUSH
39377: LD_INT 3
39379: NEG
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 0
39387: PUSH
39388: LD_INT 3
39390: NEG
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 1
39398: PUSH
39399: LD_INT 2
39401: NEG
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: LIST
39411: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39412: LD_ADDR_VAR 0 12
39416: PUSH
39417: LD_INT 2
39419: PUSH
39420: LD_INT 1
39422: NEG
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 3
39430: PUSH
39431: LD_INT 0
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 3
39440: PUSH
39441: LD_INT 1
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: LIST
39452: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39453: LD_ADDR_VAR 0 13
39457: PUSH
39458: LD_INT 3
39460: PUSH
39461: LD_INT 2
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 3
39470: PUSH
39471: LD_INT 3
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 2
39480: PUSH
39481: LD_INT 3
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: LIST
39492: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39493: LD_ADDR_VAR 0 14
39497: PUSH
39498: LD_INT 1
39500: PUSH
39501: LD_INT 3
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 0
39510: PUSH
39511: LD_INT 3
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 1
39520: NEG
39521: PUSH
39522: LD_INT 2
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: LIST
39533: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39534: LD_ADDR_VAR 0 15
39538: PUSH
39539: LD_INT 2
39541: NEG
39542: PUSH
39543: LD_INT 1
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 3
39552: NEG
39553: PUSH
39554: LD_INT 0
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 3
39563: NEG
39564: PUSH
39565: LD_INT 1
39567: NEG
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: LIST
39577: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39578: LD_ADDR_VAR 0 16
39582: PUSH
39583: LD_INT 2
39585: NEG
39586: PUSH
39587: LD_INT 3
39589: NEG
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 3
39597: NEG
39598: PUSH
39599: LD_INT 2
39601: NEG
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 3
39609: NEG
39610: PUSH
39611: LD_INT 3
39613: NEG
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: LIST
39623: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39624: LD_ADDR_VAR 0 17
39628: PUSH
39629: LD_INT 1
39631: NEG
39632: PUSH
39633: LD_INT 3
39635: NEG
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 0
39643: PUSH
39644: LD_INT 3
39646: NEG
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 1
39654: PUSH
39655: LD_INT 2
39657: NEG
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: LIST
39667: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39668: LD_ADDR_VAR 0 18
39672: PUSH
39673: LD_INT 2
39675: PUSH
39676: LD_INT 1
39678: NEG
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 3
39686: PUSH
39687: LD_INT 0
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 3
39696: PUSH
39697: LD_INT 1
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: LIST
39708: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39709: LD_ADDR_VAR 0 19
39713: PUSH
39714: LD_INT 3
39716: PUSH
39717: LD_INT 2
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 3
39726: PUSH
39727: LD_INT 3
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 2
39736: PUSH
39737: LD_INT 3
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: LIST
39748: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39749: LD_ADDR_VAR 0 20
39753: PUSH
39754: LD_INT 1
39756: PUSH
39757: LD_INT 3
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 0
39766: PUSH
39767: LD_INT 3
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 1
39776: NEG
39777: PUSH
39778: LD_INT 2
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: LIST
39789: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39790: LD_ADDR_VAR 0 21
39794: PUSH
39795: LD_INT 2
39797: NEG
39798: PUSH
39799: LD_INT 1
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 3
39808: NEG
39809: PUSH
39810: LD_INT 0
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 3
39819: NEG
39820: PUSH
39821: LD_INT 1
39823: NEG
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: LIST
39833: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39834: LD_ADDR_VAR 0 22
39838: PUSH
39839: LD_INT 2
39841: NEG
39842: PUSH
39843: LD_INT 3
39845: NEG
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 3
39853: NEG
39854: PUSH
39855: LD_INT 2
39857: NEG
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 3
39865: NEG
39866: PUSH
39867: LD_INT 3
39869: NEG
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: LIST
39879: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
39880: LD_ADDR_VAR 0 23
39884: PUSH
39885: LD_INT 0
39887: PUSH
39888: LD_INT 3
39890: NEG
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 1
39898: NEG
39899: PUSH
39900: LD_INT 4
39902: NEG
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 1
39910: PUSH
39911: LD_INT 3
39913: NEG
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: LIST
39923: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
39924: LD_ADDR_VAR 0 24
39928: PUSH
39929: LD_INT 3
39931: PUSH
39932: LD_INT 0
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 3
39941: PUSH
39942: LD_INT 1
39944: NEG
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 4
39952: PUSH
39953: LD_INT 1
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: LIST
39964: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
39965: LD_ADDR_VAR 0 25
39969: PUSH
39970: LD_INT 3
39972: PUSH
39973: LD_INT 3
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 4
39982: PUSH
39983: LD_INT 3
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 3
39992: PUSH
39993: LD_INT 4
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: LIST
40004: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
40005: LD_ADDR_VAR 0 26
40009: PUSH
40010: LD_INT 0
40012: PUSH
40013: LD_INT 3
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 1
40022: PUSH
40023: LD_INT 4
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 1
40032: NEG
40033: PUSH
40034: LD_INT 3
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: LIST
40045: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
40046: LD_ADDR_VAR 0 27
40050: PUSH
40051: LD_INT 3
40053: NEG
40054: PUSH
40055: LD_INT 0
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 3
40064: NEG
40065: PUSH
40066: LD_INT 1
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 4
40075: NEG
40076: PUSH
40077: LD_INT 1
40079: NEG
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: LIST
40089: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
40090: LD_ADDR_VAR 0 28
40094: PUSH
40095: LD_INT 3
40097: NEG
40098: PUSH
40099: LD_INT 3
40101: NEG
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 3
40109: NEG
40110: PUSH
40111: LD_INT 4
40113: NEG
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 4
40121: NEG
40122: PUSH
40123: LD_INT 3
40125: NEG
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: LIST
40135: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
40136: LD_ADDR_VAR 0 29
40140: PUSH
40141: LD_INT 1
40143: NEG
40144: PUSH
40145: LD_INT 3
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 0
40155: PUSH
40156: LD_INT 3
40158: NEG
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 1
40166: PUSH
40167: LD_INT 2
40169: NEG
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 1
40177: NEG
40178: PUSH
40179: LD_INT 4
40181: NEG
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 0
40189: PUSH
40190: LD_INT 4
40192: NEG
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 1
40200: PUSH
40201: LD_INT 3
40203: NEG
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 1
40211: NEG
40212: PUSH
40213: LD_INT 5
40215: NEG
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 0
40223: PUSH
40224: LD_INT 5
40226: NEG
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 1
40234: PUSH
40235: LD_INT 4
40237: NEG
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 1
40245: NEG
40246: PUSH
40247: LD_INT 6
40249: NEG
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 0
40257: PUSH
40258: LD_INT 6
40260: NEG
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 1
40268: PUSH
40269: LD_INT 5
40271: NEG
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
40291: LD_ADDR_VAR 0 30
40295: PUSH
40296: LD_INT 2
40298: PUSH
40299: LD_INT 1
40301: NEG
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 3
40309: PUSH
40310: LD_INT 0
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 3
40319: PUSH
40320: LD_INT 1
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 3
40329: PUSH
40330: LD_INT 1
40332: NEG
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 4
40340: PUSH
40341: LD_INT 0
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 4
40350: PUSH
40351: LD_INT 1
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 4
40360: PUSH
40361: LD_INT 1
40363: NEG
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 5
40371: PUSH
40372: LD_INT 0
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 5
40381: PUSH
40382: LD_INT 1
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 5
40391: PUSH
40392: LD_INT 1
40394: NEG
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 6
40402: PUSH
40403: LD_INT 0
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 6
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
40434: LD_ADDR_VAR 0 31
40438: PUSH
40439: LD_INT 3
40441: PUSH
40442: LD_INT 2
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 3
40451: PUSH
40452: LD_INT 3
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 2
40461: PUSH
40462: LD_INT 3
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 4
40471: PUSH
40472: LD_INT 3
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 4
40481: PUSH
40482: LD_INT 4
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 3
40491: PUSH
40492: LD_INT 4
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 5
40501: PUSH
40502: LD_INT 4
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 5
40511: PUSH
40512: LD_INT 5
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 4
40521: PUSH
40522: LD_INT 5
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 6
40531: PUSH
40532: LD_INT 5
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 6
40541: PUSH
40542: LD_INT 6
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 5
40551: PUSH
40552: LD_INT 6
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
40573: LD_ADDR_VAR 0 32
40577: PUSH
40578: LD_INT 1
40580: PUSH
40581: LD_INT 3
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 0
40590: PUSH
40591: LD_INT 3
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 1
40600: NEG
40601: PUSH
40602: LD_INT 2
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 1
40611: PUSH
40612: LD_INT 4
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 0
40621: PUSH
40622: LD_INT 4
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 1
40631: NEG
40632: PUSH
40633: LD_INT 3
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 1
40642: PUSH
40643: LD_INT 5
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 0
40652: PUSH
40653: LD_INT 5
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 1
40662: NEG
40663: PUSH
40664: LD_INT 4
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 1
40673: PUSH
40674: LD_INT 6
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 0
40683: PUSH
40684: LD_INT 6
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 1
40693: NEG
40694: PUSH
40695: LD_INT 5
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
40716: LD_ADDR_VAR 0 33
40720: PUSH
40721: LD_INT 2
40723: NEG
40724: PUSH
40725: LD_INT 1
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 3
40734: NEG
40735: PUSH
40736: LD_INT 0
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 3
40745: NEG
40746: PUSH
40747: LD_INT 1
40749: NEG
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 3
40757: NEG
40758: PUSH
40759: LD_INT 1
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 4
40768: NEG
40769: PUSH
40770: LD_INT 0
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 4
40779: NEG
40780: PUSH
40781: LD_INT 1
40783: NEG
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 4
40791: NEG
40792: PUSH
40793: LD_INT 1
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 5
40802: NEG
40803: PUSH
40804: LD_INT 0
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 5
40813: NEG
40814: PUSH
40815: LD_INT 1
40817: NEG
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 5
40825: NEG
40826: PUSH
40827: LD_INT 1
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 6
40836: NEG
40837: PUSH
40838: LD_INT 0
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 6
40847: NEG
40848: PUSH
40849: LD_INT 1
40851: NEG
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
40871: LD_ADDR_VAR 0 34
40875: PUSH
40876: LD_INT 2
40878: NEG
40879: PUSH
40880: LD_INT 3
40882: NEG
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 3
40890: NEG
40891: PUSH
40892: LD_INT 2
40894: NEG
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 3
40902: NEG
40903: PUSH
40904: LD_INT 3
40906: NEG
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 3
40914: NEG
40915: PUSH
40916: LD_INT 4
40918: NEG
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 4
40926: NEG
40927: PUSH
40928: LD_INT 3
40930: NEG
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 4
40938: NEG
40939: PUSH
40940: LD_INT 4
40942: NEG
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 4
40950: NEG
40951: PUSH
40952: LD_INT 5
40954: NEG
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 5
40962: NEG
40963: PUSH
40964: LD_INT 4
40966: NEG
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 5
40974: NEG
40975: PUSH
40976: LD_INT 5
40978: NEG
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 5
40986: NEG
40987: PUSH
40988: LD_INT 6
40990: NEG
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 6
40998: NEG
40999: PUSH
41000: LD_INT 5
41002: NEG
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 6
41010: NEG
41011: PUSH
41012: LD_INT 6
41014: NEG
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
41034: LD_ADDR_VAR 0 41
41038: PUSH
41039: LD_INT 0
41041: PUSH
41042: LD_INT 2
41044: NEG
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 1
41052: NEG
41053: PUSH
41054: LD_INT 3
41056: NEG
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 1
41064: PUSH
41065: LD_INT 2
41067: NEG
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: LIST
41077: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
41078: LD_ADDR_VAR 0 42
41082: PUSH
41083: LD_INT 2
41085: PUSH
41086: LD_INT 0
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 2
41095: PUSH
41096: LD_INT 1
41098: NEG
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 3
41106: PUSH
41107: LD_INT 1
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: LIST
41118: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
41119: LD_ADDR_VAR 0 43
41123: PUSH
41124: LD_INT 2
41126: PUSH
41127: LD_INT 2
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 3
41136: PUSH
41137: LD_INT 2
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 2
41146: PUSH
41147: LD_INT 3
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: LIST
41158: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
41159: LD_ADDR_VAR 0 44
41163: PUSH
41164: LD_INT 0
41166: PUSH
41167: LD_INT 2
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 1
41176: PUSH
41177: LD_INT 3
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 1
41186: NEG
41187: PUSH
41188: LD_INT 2
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: LIST
41199: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41200: LD_ADDR_VAR 0 45
41204: PUSH
41205: LD_INT 2
41207: NEG
41208: PUSH
41209: LD_INT 0
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 2
41218: NEG
41219: PUSH
41220: LD_INT 1
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 3
41229: NEG
41230: PUSH
41231: LD_INT 1
41233: NEG
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: LIST
41243: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
41244: LD_ADDR_VAR 0 46
41248: PUSH
41249: LD_INT 2
41251: NEG
41252: PUSH
41253: LD_INT 2
41255: NEG
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 2
41263: NEG
41264: PUSH
41265: LD_INT 3
41267: NEG
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 3
41275: NEG
41276: PUSH
41277: LD_INT 2
41279: NEG
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: LIST
41289: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
41290: LD_ADDR_VAR 0 47
41294: PUSH
41295: LD_INT 2
41297: NEG
41298: PUSH
41299: LD_INT 3
41301: NEG
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 1
41309: NEG
41310: PUSH
41311: LD_INT 3
41313: NEG
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41323: LD_ADDR_VAR 0 48
41327: PUSH
41328: LD_INT 1
41330: PUSH
41331: LD_INT 2
41333: NEG
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 2
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
41354: LD_ADDR_VAR 0 49
41358: PUSH
41359: LD_INT 3
41361: PUSH
41362: LD_INT 1
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 3
41371: PUSH
41372: LD_INT 2
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
41383: LD_ADDR_VAR 0 50
41387: PUSH
41388: LD_INT 2
41390: PUSH
41391: LD_INT 3
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: LD_INT 3
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41412: LD_ADDR_VAR 0 51
41416: PUSH
41417: LD_INT 1
41419: NEG
41420: PUSH
41421: LD_INT 2
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 2
41430: NEG
41431: PUSH
41432: LD_INT 1
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41443: LD_ADDR_VAR 0 52
41447: PUSH
41448: LD_INT 3
41450: NEG
41451: PUSH
41452: LD_INT 1
41454: NEG
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 3
41462: NEG
41463: PUSH
41464: LD_INT 2
41466: NEG
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41476: LD_ADDR_VAR 0 53
41480: PUSH
41481: LD_INT 1
41483: NEG
41484: PUSH
41485: LD_INT 3
41487: NEG
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: LD_INT 3
41498: NEG
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 1
41506: PUSH
41507: LD_INT 2
41509: NEG
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: LIST
41519: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41520: LD_ADDR_VAR 0 54
41524: PUSH
41525: LD_INT 2
41527: PUSH
41528: LD_INT 1
41530: NEG
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 3
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 3
41548: PUSH
41549: LD_INT 1
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: LIST
41560: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41561: LD_ADDR_VAR 0 55
41565: PUSH
41566: LD_INT 3
41568: PUSH
41569: LD_INT 2
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 3
41578: PUSH
41579: LD_INT 3
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 2
41588: PUSH
41589: LD_INT 3
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: LIST
41600: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41601: LD_ADDR_VAR 0 56
41605: PUSH
41606: LD_INT 1
41608: PUSH
41609: LD_INT 3
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 0
41618: PUSH
41619: LD_INT 3
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 1
41628: NEG
41629: PUSH
41630: LD_INT 2
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: LIST
41641: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41642: LD_ADDR_VAR 0 57
41646: PUSH
41647: LD_INT 2
41649: NEG
41650: PUSH
41651: LD_INT 1
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 3
41660: NEG
41661: PUSH
41662: LD_INT 0
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 3
41671: NEG
41672: PUSH
41673: LD_INT 1
41675: NEG
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: LIST
41685: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41686: LD_ADDR_VAR 0 58
41690: PUSH
41691: LD_INT 2
41693: NEG
41694: PUSH
41695: LD_INT 3
41697: NEG
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 3
41705: NEG
41706: PUSH
41707: LD_INT 2
41709: NEG
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 3
41717: NEG
41718: PUSH
41719: LD_INT 3
41721: NEG
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: LIST
41731: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
41732: LD_ADDR_VAR 0 59
41736: PUSH
41737: LD_INT 1
41739: NEG
41740: PUSH
41741: LD_INT 2
41743: NEG
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 0
41751: PUSH
41752: LD_INT 2
41754: NEG
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 1
41762: PUSH
41763: LD_INT 1
41765: NEG
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: LIST
41775: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41776: LD_ADDR_VAR 0 60
41780: PUSH
41781: LD_INT 1
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 2
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 2
41804: PUSH
41805: LD_INT 1
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: LIST
41816: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41817: LD_ADDR_VAR 0 61
41821: PUSH
41822: LD_INT 2
41824: PUSH
41825: LD_INT 1
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 2
41834: PUSH
41835: LD_INT 2
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 1
41844: PUSH
41845: LD_INT 2
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: LIST
41856: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41857: LD_ADDR_VAR 0 62
41861: PUSH
41862: LD_INT 1
41864: PUSH
41865: LD_INT 2
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 0
41874: PUSH
41875: LD_INT 2
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 1
41884: NEG
41885: PUSH
41886: LD_INT 1
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: LIST
41897: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41898: LD_ADDR_VAR 0 63
41902: PUSH
41903: LD_INT 1
41905: NEG
41906: PUSH
41907: LD_INT 1
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 2
41916: NEG
41917: PUSH
41918: LD_INT 0
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 2
41927: NEG
41928: PUSH
41929: LD_INT 1
41931: NEG
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: LIST
41941: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41942: LD_ADDR_VAR 0 64
41946: PUSH
41947: LD_INT 1
41949: NEG
41950: PUSH
41951: LD_INT 2
41953: NEG
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 2
41961: NEG
41962: PUSH
41963: LD_INT 1
41965: NEG
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 2
41973: NEG
41974: PUSH
41975: LD_INT 2
41977: NEG
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: LIST
41987: ST_TO_ADDR
// end ; 2 :
41988: GO 45254
41990: LD_INT 2
41992: DOUBLE
41993: EQUAL
41994: IFTRUE 41998
41996: GO 45253
41998: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
41999: LD_ADDR_VAR 0 29
42003: PUSH
42004: LD_INT 4
42006: PUSH
42007: LD_INT 0
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 4
42016: PUSH
42017: LD_INT 1
42019: NEG
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 5
42027: PUSH
42028: LD_INT 0
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 5
42037: PUSH
42038: LD_INT 1
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 4
42047: PUSH
42048: LD_INT 1
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 3
42057: PUSH
42058: LD_INT 0
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 3
42067: PUSH
42068: LD_INT 1
42070: NEG
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 3
42078: PUSH
42079: LD_INT 2
42081: NEG
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 5
42089: PUSH
42090: LD_INT 2
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 3
42099: PUSH
42100: LD_INT 3
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 3
42109: PUSH
42110: LD_INT 2
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 4
42119: PUSH
42120: LD_INT 3
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 4
42129: PUSH
42130: LD_INT 4
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 3
42139: PUSH
42140: LD_INT 4
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 2
42149: PUSH
42150: LD_INT 3
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 2
42159: PUSH
42160: LD_INT 2
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 4
42169: PUSH
42170: LD_INT 2
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 2
42179: PUSH
42180: LD_INT 4
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 0
42189: PUSH
42190: LD_INT 4
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 0
42199: PUSH
42200: LD_INT 3
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 1
42209: PUSH
42210: LD_INT 4
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 1
42219: PUSH
42220: LD_INT 5
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: LD_INT 5
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 1
42239: NEG
42240: PUSH
42241: LD_INT 4
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: LD_INT 3
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 2
42261: PUSH
42262: LD_INT 5
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 2
42271: NEG
42272: PUSH
42273: LD_INT 3
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 3
42282: NEG
42283: PUSH
42284: LD_INT 0
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 3
42293: NEG
42294: PUSH
42295: LD_INT 1
42297: NEG
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 2
42305: NEG
42306: PUSH
42307: LD_INT 0
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 2
42316: NEG
42317: PUSH
42318: LD_INT 1
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 3
42327: NEG
42328: PUSH
42329: LD_INT 1
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 4
42338: NEG
42339: PUSH
42340: LD_INT 0
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 4
42349: NEG
42350: PUSH
42351: LD_INT 1
42353: NEG
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 4
42361: NEG
42362: PUSH
42363: LD_INT 2
42365: NEG
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 2
42373: NEG
42374: PUSH
42375: LD_INT 2
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 4
42384: NEG
42385: PUSH
42386: LD_INT 4
42388: NEG
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 4
42396: NEG
42397: PUSH
42398: LD_INT 5
42400: NEG
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 3
42408: NEG
42409: PUSH
42410: LD_INT 4
42412: NEG
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 3
42420: NEG
42421: PUSH
42422: LD_INT 3
42424: NEG
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 4
42432: NEG
42433: PUSH
42434: LD_INT 3
42436: NEG
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 5
42444: NEG
42445: PUSH
42446: LD_INT 4
42448: NEG
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 5
42456: NEG
42457: PUSH
42458: LD_INT 5
42460: NEG
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 3
42468: NEG
42469: PUSH
42470: LD_INT 5
42472: NEG
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 5
42480: NEG
42481: PUSH
42482: LD_INT 3
42484: NEG
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
42537: LD_ADDR_VAR 0 30
42541: PUSH
42542: LD_INT 4
42544: PUSH
42545: LD_INT 4
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 4
42554: PUSH
42555: LD_INT 3
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 5
42564: PUSH
42565: LD_INT 4
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 5
42574: PUSH
42575: LD_INT 5
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 4
42584: PUSH
42585: LD_INT 5
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 3
42594: PUSH
42595: LD_INT 4
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 3
42604: PUSH
42605: LD_INT 3
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 5
42614: PUSH
42615: LD_INT 3
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 3
42624: PUSH
42625: LD_INT 5
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 0
42634: PUSH
42635: LD_INT 3
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 0
42644: PUSH
42645: LD_INT 2
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 1
42654: PUSH
42655: LD_INT 3
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 1
42664: PUSH
42665: LD_INT 4
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 0
42674: PUSH
42675: LD_INT 4
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 1
42684: NEG
42685: PUSH
42686: LD_INT 3
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 1
42695: NEG
42696: PUSH
42697: LD_INT 2
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 2
42706: PUSH
42707: LD_INT 4
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 2
42716: NEG
42717: PUSH
42718: LD_INT 2
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 4
42727: NEG
42728: PUSH
42729: LD_INT 0
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 4
42738: NEG
42739: PUSH
42740: LD_INT 1
42742: NEG
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 3
42750: NEG
42751: PUSH
42752: LD_INT 0
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 3
42761: NEG
42762: PUSH
42763: LD_INT 1
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 4
42772: NEG
42773: PUSH
42774: LD_INT 1
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 5
42783: NEG
42784: PUSH
42785: LD_INT 0
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 5
42794: NEG
42795: PUSH
42796: LD_INT 1
42798: NEG
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 5
42806: NEG
42807: PUSH
42808: LD_INT 2
42810: NEG
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 3
42818: NEG
42819: PUSH
42820: LD_INT 2
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 3
42829: NEG
42830: PUSH
42831: LD_INT 3
42833: NEG
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 3
42841: NEG
42842: PUSH
42843: LD_INT 4
42845: NEG
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 2
42853: NEG
42854: PUSH
42855: LD_INT 3
42857: NEG
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 2
42865: NEG
42866: PUSH
42867: LD_INT 2
42869: NEG
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 3
42877: NEG
42878: PUSH
42879: LD_INT 2
42881: NEG
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 4
42889: NEG
42890: PUSH
42891: LD_INT 3
42893: NEG
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 4
42901: NEG
42902: PUSH
42903: LD_INT 4
42905: NEG
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 2
42913: NEG
42914: PUSH
42915: LD_INT 4
42917: NEG
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 4
42925: NEG
42926: PUSH
42927: LD_INT 2
42929: NEG
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: LD_INT 4
42940: NEG
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 0
42948: PUSH
42949: LD_INT 5
42951: NEG
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 1
42959: PUSH
42960: LD_INT 4
42962: NEG
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 1
42970: PUSH
42971: LD_INT 3
42973: NEG
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: LD_INT 3
42984: NEG
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 1
42992: NEG
42993: PUSH
42994: LD_INT 4
42996: NEG
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: LD_INT 5
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 2
43016: PUSH
43017: LD_INT 3
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 2
43027: NEG
43028: PUSH
43029: LD_INT 5
43031: NEG
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
43084: LD_ADDR_VAR 0 31
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: LD_INT 4
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 0
43101: PUSH
43102: LD_INT 3
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 1
43111: PUSH
43112: LD_INT 4
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 1
43121: PUSH
43122: LD_INT 5
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 0
43131: PUSH
43132: LD_INT 5
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 1
43141: NEG
43142: PUSH
43143: LD_INT 4
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 1
43152: NEG
43153: PUSH
43154: LD_INT 3
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 2
43163: PUSH
43164: LD_INT 5
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 2
43173: NEG
43174: PUSH
43175: LD_INT 3
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 3
43184: NEG
43185: PUSH
43186: LD_INT 0
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 3
43195: NEG
43196: PUSH
43197: LD_INT 1
43199: NEG
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 2
43207: NEG
43208: PUSH
43209: LD_INT 0
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 2
43218: NEG
43219: PUSH
43220: LD_INT 1
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 3
43229: NEG
43230: PUSH
43231: LD_INT 1
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 4
43240: NEG
43241: PUSH
43242: LD_INT 0
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 4
43251: NEG
43252: PUSH
43253: LD_INT 1
43255: NEG
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 4
43263: NEG
43264: PUSH
43265: LD_INT 2
43267: NEG
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 2
43275: NEG
43276: PUSH
43277: LD_INT 2
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 4
43286: NEG
43287: PUSH
43288: LD_INT 4
43290: NEG
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 4
43298: NEG
43299: PUSH
43300: LD_INT 5
43302: NEG
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 3
43310: NEG
43311: PUSH
43312: LD_INT 4
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 3
43322: NEG
43323: PUSH
43324: LD_INT 3
43326: NEG
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 4
43334: NEG
43335: PUSH
43336: LD_INT 3
43338: NEG
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 5
43346: NEG
43347: PUSH
43348: LD_INT 4
43350: NEG
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 5
43358: NEG
43359: PUSH
43360: LD_INT 5
43362: NEG
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 3
43370: NEG
43371: PUSH
43372: LD_INT 5
43374: NEG
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 5
43382: NEG
43383: PUSH
43384: LD_INT 3
43386: NEG
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 0
43394: PUSH
43395: LD_INT 3
43397: NEG
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 0
43405: PUSH
43406: LD_INT 4
43408: NEG
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 1
43416: PUSH
43417: LD_INT 3
43419: NEG
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 1
43427: PUSH
43428: LD_INT 2
43430: NEG
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 0
43438: PUSH
43439: LD_INT 2
43441: NEG
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 1
43449: NEG
43450: PUSH
43451: LD_INT 3
43453: NEG
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 1
43461: NEG
43462: PUSH
43463: LD_INT 4
43465: NEG
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 2
43473: PUSH
43474: LD_INT 2
43476: NEG
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 2
43484: NEG
43485: PUSH
43486: LD_INT 4
43488: NEG
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 4
43496: PUSH
43497: LD_INT 0
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 4
43506: PUSH
43507: LD_INT 1
43509: NEG
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 5
43517: PUSH
43518: LD_INT 0
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 5
43527: PUSH
43528: LD_INT 1
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 4
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 3
43547: PUSH
43548: LD_INT 0
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 3
43557: PUSH
43558: LD_INT 1
43560: NEG
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 3
43568: PUSH
43569: LD_INT 2
43571: NEG
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 5
43579: PUSH
43580: LD_INT 2
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
43634: LD_ADDR_VAR 0 32
43638: PUSH
43639: LD_INT 4
43641: NEG
43642: PUSH
43643: LD_INT 0
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 4
43652: NEG
43653: PUSH
43654: LD_INT 1
43656: NEG
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 3
43664: NEG
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 3
43675: NEG
43676: PUSH
43677: LD_INT 1
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 4
43686: NEG
43687: PUSH
43688: LD_INT 1
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 5
43697: NEG
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 5
43708: NEG
43709: PUSH
43710: LD_INT 1
43712: NEG
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 5
43720: NEG
43721: PUSH
43722: LD_INT 2
43724: NEG
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 3
43732: NEG
43733: PUSH
43734: LD_INT 2
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 3
43743: NEG
43744: PUSH
43745: LD_INT 3
43747: NEG
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 3
43755: NEG
43756: PUSH
43757: LD_INT 4
43759: NEG
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 2
43767: NEG
43768: PUSH
43769: LD_INT 3
43771: NEG
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 2
43779: NEG
43780: PUSH
43781: LD_INT 2
43783: NEG
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 3
43791: NEG
43792: PUSH
43793: LD_INT 2
43795: NEG
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 4
43803: NEG
43804: PUSH
43805: LD_INT 3
43807: NEG
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 4
43815: NEG
43816: PUSH
43817: LD_INT 4
43819: NEG
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 2
43827: NEG
43828: PUSH
43829: LD_INT 4
43831: NEG
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 4
43839: NEG
43840: PUSH
43841: LD_INT 2
43843: NEG
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 0
43851: PUSH
43852: LD_INT 4
43854: NEG
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 0
43862: PUSH
43863: LD_INT 5
43865: NEG
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 1
43873: PUSH
43874: LD_INT 4
43876: NEG
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 1
43884: PUSH
43885: LD_INT 3
43887: NEG
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 0
43895: PUSH
43896: LD_INT 3
43898: NEG
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 1
43906: NEG
43907: PUSH
43908: LD_INT 4
43910: NEG
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: LD_INT 5
43922: NEG
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 2
43930: PUSH
43931: LD_INT 3
43933: NEG
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 2
43941: NEG
43942: PUSH
43943: LD_INT 5
43945: NEG
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 3
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 3
43963: PUSH
43964: LD_INT 1
43966: NEG
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 4
43974: PUSH
43975: LD_INT 0
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 4
43984: PUSH
43985: LD_INT 1
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 3
43994: PUSH
43995: LD_INT 1
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 2
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 2
44014: PUSH
44015: LD_INT 1
44017: NEG
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 2
44025: PUSH
44026: LD_INT 2
44028: NEG
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 4
44036: PUSH
44037: LD_INT 2
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 4
44046: PUSH
44047: LD_INT 4
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 4
44056: PUSH
44057: LD_INT 3
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 5
44066: PUSH
44067: LD_INT 4
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 5
44076: PUSH
44077: LD_INT 5
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 4
44086: PUSH
44087: LD_INT 5
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 3
44096: PUSH
44097: LD_INT 4
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 3
44106: PUSH
44107: LD_INT 3
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 5
44116: PUSH
44117: LD_INT 3
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 3
44126: PUSH
44127: LD_INT 5
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
44181: LD_ADDR_VAR 0 33
44185: PUSH
44186: LD_INT 4
44188: NEG
44189: PUSH
44190: LD_INT 4
44192: NEG
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 4
44200: NEG
44201: PUSH
44202: LD_INT 5
44204: NEG
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 3
44212: NEG
44213: PUSH
44214: LD_INT 4
44216: NEG
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 3
44224: NEG
44225: PUSH
44226: LD_INT 3
44228: NEG
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 4
44236: NEG
44237: PUSH
44238: LD_INT 3
44240: NEG
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 5
44248: NEG
44249: PUSH
44250: LD_INT 4
44252: NEG
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 5
44260: NEG
44261: PUSH
44262: LD_INT 5
44264: NEG
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 3
44272: NEG
44273: PUSH
44274: LD_INT 5
44276: NEG
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 5
44284: NEG
44285: PUSH
44286: LD_INT 3
44288: NEG
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: LD_INT 3
44299: NEG
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 0
44307: PUSH
44308: LD_INT 4
44310: NEG
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 1
44318: PUSH
44319: LD_INT 3
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: PUSH
44330: LD_INT 2
44332: NEG
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: LD_INT 2
44343: NEG
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 1
44351: NEG
44352: PUSH
44353: LD_INT 3
44355: NEG
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 1
44363: NEG
44364: PUSH
44365: LD_INT 4
44367: NEG
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 2
44375: PUSH
44376: LD_INT 2
44378: NEG
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 2
44386: NEG
44387: PUSH
44388: LD_INT 4
44390: NEG
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 4
44398: PUSH
44399: LD_INT 0
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 4
44408: PUSH
44409: LD_INT 1
44411: NEG
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 5
44419: PUSH
44420: LD_INT 0
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 5
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 4
44439: PUSH
44440: LD_INT 1
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 3
44449: PUSH
44450: LD_INT 0
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 3
44459: PUSH
44460: LD_INT 1
44462: NEG
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 3
44470: PUSH
44471: LD_INT 2
44473: NEG
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 5
44481: PUSH
44482: LD_INT 2
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 3
44491: PUSH
44492: LD_INT 3
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 3
44501: PUSH
44502: LD_INT 2
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 4
44511: PUSH
44512: LD_INT 3
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 4
44521: PUSH
44522: LD_INT 4
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 3
44531: PUSH
44532: LD_INT 4
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 2
44541: PUSH
44542: LD_INT 3
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 2
44551: PUSH
44552: LD_INT 2
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 4
44561: PUSH
44562: LD_INT 2
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 2
44571: PUSH
44572: LD_INT 4
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 0
44581: PUSH
44582: LD_INT 4
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 0
44591: PUSH
44592: LD_INT 3
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 1
44601: PUSH
44602: LD_INT 4
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 1
44611: PUSH
44612: LD_INT 5
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 0
44621: PUSH
44622: LD_INT 5
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 1
44631: NEG
44632: PUSH
44633: LD_INT 4
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 1
44642: NEG
44643: PUSH
44644: LD_INT 3
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 2
44653: PUSH
44654: LD_INT 5
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 2
44663: NEG
44664: PUSH
44665: LD_INT 3
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
44719: LD_ADDR_VAR 0 34
44723: PUSH
44724: LD_INT 0
44726: PUSH
44727: LD_INT 4
44729: NEG
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 0
44737: PUSH
44738: LD_INT 5
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 1
44748: PUSH
44749: LD_INT 4
44751: NEG
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 1
44759: PUSH
44760: LD_INT 3
44762: NEG
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: LD_INT 3
44773: NEG
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 1
44781: NEG
44782: PUSH
44783: LD_INT 4
44785: NEG
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 1
44793: NEG
44794: PUSH
44795: LD_INT 5
44797: NEG
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 2
44805: PUSH
44806: LD_INT 3
44808: NEG
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 2
44816: NEG
44817: PUSH
44818: LD_INT 5
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 3
44828: PUSH
44829: LD_INT 0
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 3
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 4
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 4
44859: PUSH
44860: LD_INT 1
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 3
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 2
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 2
44889: PUSH
44890: LD_INT 1
44892: NEG
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 2
44900: PUSH
44901: LD_INT 2
44903: NEG
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 4
44911: PUSH
44912: LD_INT 2
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 4
44921: PUSH
44922: LD_INT 4
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 4
44931: PUSH
44932: LD_INT 3
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 5
44941: PUSH
44942: LD_INT 4
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 5
44951: PUSH
44952: LD_INT 5
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 4
44961: PUSH
44962: LD_INT 5
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 3
44971: PUSH
44972: LD_INT 4
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 3
44981: PUSH
44982: LD_INT 3
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 5
44991: PUSH
44992: LD_INT 3
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 3
45001: PUSH
45002: LD_INT 5
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: LD_INT 3
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: LD_INT 2
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 1
45031: PUSH
45032: LD_INT 3
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 1
45041: PUSH
45042: LD_INT 4
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 0
45051: PUSH
45052: LD_INT 4
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 1
45061: NEG
45062: PUSH
45063: LD_INT 3
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 1
45072: NEG
45073: PUSH
45074: LD_INT 2
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 2
45083: PUSH
45084: LD_INT 4
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 2
45093: NEG
45094: PUSH
45095: LD_INT 2
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 4
45104: NEG
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 4
45115: NEG
45116: PUSH
45117: LD_INT 1
45119: NEG
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 3
45127: NEG
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 3
45138: NEG
45139: PUSH
45140: LD_INT 1
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 4
45149: NEG
45150: PUSH
45151: LD_INT 1
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 5
45160: NEG
45161: PUSH
45162: LD_INT 0
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 5
45171: NEG
45172: PUSH
45173: LD_INT 1
45175: NEG
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 5
45183: NEG
45184: PUSH
45185: LD_INT 2
45187: NEG
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 3
45195: NEG
45196: PUSH
45197: LD_INT 2
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: ST_TO_ADDR
// end ; end ;
45251: GO 45254
45253: POP
// case btype of b_depot , b_warehouse :
45254: LD_VAR 0 1
45258: PUSH
45259: LD_INT 0
45261: DOUBLE
45262: EQUAL
45263: IFTRUE 45273
45265: LD_INT 1
45267: DOUBLE
45268: EQUAL
45269: IFTRUE 45273
45271: GO 45474
45273: POP
// case nation of nation_american :
45274: LD_VAR 0 5
45278: PUSH
45279: LD_INT 1
45281: DOUBLE
45282: EQUAL
45283: IFTRUE 45287
45285: GO 45343
45287: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
45288: LD_ADDR_VAR 0 9
45292: PUSH
45293: LD_VAR 0 11
45297: PUSH
45298: LD_VAR 0 12
45302: PUSH
45303: LD_VAR 0 13
45307: PUSH
45308: LD_VAR 0 14
45312: PUSH
45313: LD_VAR 0 15
45317: PUSH
45318: LD_VAR 0 16
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: PUSH
45331: LD_VAR 0 4
45335: PUSH
45336: LD_INT 1
45338: PLUS
45339: ARRAY
45340: ST_TO_ADDR
45341: GO 45472
45343: LD_INT 2
45345: DOUBLE
45346: EQUAL
45347: IFTRUE 45351
45349: GO 45407
45351: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
45352: LD_ADDR_VAR 0 9
45356: PUSH
45357: LD_VAR 0 17
45361: PUSH
45362: LD_VAR 0 18
45366: PUSH
45367: LD_VAR 0 19
45371: PUSH
45372: LD_VAR 0 20
45376: PUSH
45377: LD_VAR 0 21
45381: PUSH
45382: LD_VAR 0 22
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: PUSH
45395: LD_VAR 0 4
45399: PUSH
45400: LD_INT 1
45402: PLUS
45403: ARRAY
45404: ST_TO_ADDR
45405: GO 45472
45407: LD_INT 3
45409: DOUBLE
45410: EQUAL
45411: IFTRUE 45415
45413: GO 45471
45415: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
45416: LD_ADDR_VAR 0 9
45420: PUSH
45421: LD_VAR 0 23
45425: PUSH
45426: LD_VAR 0 24
45430: PUSH
45431: LD_VAR 0 25
45435: PUSH
45436: LD_VAR 0 26
45440: PUSH
45441: LD_VAR 0 27
45445: PUSH
45446: LD_VAR 0 28
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: PUSH
45459: LD_VAR 0 4
45463: PUSH
45464: LD_INT 1
45466: PLUS
45467: ARRAY
45468: ST_TO_ADDR
45469: GO 45472
45471: POP
45472: GO 46027
45474: LD_INT 2
45476: DOUBLE
45477: EQUAL
45478: IFTRUE 45488
45480: LD_INT 3
45482: DOUBLE
45483: EQUAL
45484: IFTRUE 45488
45486: GO 45544
45488: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
45489: LD_ADDR_VAR 0 9
45493: PUSH
45494: LD_VAR 0 29
45498: PUSH
45499: LD_VAR 0 30
45503: PUSH
45504: LD_VAR 0 31
45508: PUSH
45509: LD_VAR 0 32
45513: PUSH
45514: LD_VAR 0 33
45518: PUSH
45519: LD_VAR 0 34
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: PUSH
45532: LD_VAR 0 4
45536: PUSH
45537: LD_INT 1
45539: PLUS
45540: ARRAY
45541: ST_TO_ADDR
45542: GO 46027
45544: LD_INT 16
45546: DOUBLE
45547: EQUAL
45548: IFTRUE 45606
45550: LD_INT 17
45552: DOUBLE
45553: EQUAL
45554: IFTRUE 45606
45556: LD_INT 18
45558: DOUBLE
45559: EQUAL
45560: IFTRUE 45606
45562: LD_INT 19
45564: DOUBLE
45565: EQUAL
45566: IFTRUE 45606
45568: LD_INT 22
45570: DOUBLE
45571: EQUAL
45572: IFTRUE 45606
45574: LD_INT 20
45576: DOUBLE
45577: EQUAL
45578: IFTRUE 45606
45580: LD_INT 21
45582: DOUBLE
45583: EQUAL
45584: IFTRUE 45606
45586: LD_INT 23
45588: DOUBLE
45589: EQUAL
45590: IFTRUE 45606
45592: LD_INT 24
45594: DOUBLE
45595: EQUAL
45596: IFTRUE 45606
45598: LD_INT 25
45600: DOUBLE
45601: EQUAL
45602: IFTRUE 45606
45604: GO 45662
45606: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
45607: LD_ADDR_VAR 0 9
45611: PUSH
45612: LD_VAR 0 35
45616: PUSH
45617: LD_VAR 0 36
45621: PUSH
45622: LD_VAR 0 37
45626: PUSH
45627: LD_VAR 0 38
45631: PUSH
45632: LD_VAR 0 39
45636: PUSH
45637: LD_VAR 0 40
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: PUSH
45650: LD_VAR 0 4
45654: PUSH
45655: LD_INT 1
45657: PLUS
45658: ARRAY
45659: ST_TO_ADDR
45660: GO 46027
45662: LD_INT 6
45664: DOUBLE
45665: EQUAL
45666: IFTRUE 45718
45668: LD_INT 7
45670: DOUBLE
45671: EQUAL
45672: IFTRUE 45718
45674: LD_INT 8
45676: DOUBLE
45677: EQUAL
45678: IFTRUE 45718
45680: LD_INT 13
45682: DOUBLE
45683: EQUAL
45684: IFTRUE 45718
45686: LD_INT 12
45688: DOUBLE
45689: EQUAL
45690: IFTRUE 45718
45692: LD_INT 15
45694: DOUBLE
45695: EQUAL
45696: IFTRUE 45718
45698: LD_INT 11
45700: DOUBLE
45701: EQUAL
45702: IFTRUE 45718
45704: LD_INT 14
45706: DOUBLE
45707: EQUAL
45708: IFTRUE 45718
45710: LD_INT 10
45712: DOUBLE
45713: EQUAL
45714: IFTRUE 45718
45716: GO 45774
45718: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
45719: LD_ADDR_VAR 0 9
45723: PUSH
45724: LD_VAR 0 41
45728: PUSH
45729: LD_VAR 0 42
45733: PUSH
45734: LD_VAR 0 43
45738: PUSH
45739: LD_VAR 0 44
45743: PUSH
45744: LD_VAR 0 45
45748: PUSH
45749: LD_VAR 0 46
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: PUSH
45762: LD_VAR 0 4
45766: PUSH
45767: LD_INT 1
45769: PLUS
45770: ARRAY
45771: ST_TO_ADDR
45772: GO 46027
45774: LD_INT 36
45776: DOUBLE
45777: EQUAL
45778: IFTRUE 45782
45780: GO 45838
45782: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
45783: LD_ADDR_VAR 0 9
45787: PUSH
45788: LD_VAR 0 47
45792: PUSH
45793: LD_VAR 0 48
45797: PUSH
45798: LD_VAR 0 49
45802: PUSH
45803: LD_VAR 0 50
45807: PUSH
45808: LD_VAR 0 51
45812: PUSH
45813: LD_VAR 0 52
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: PUSH
45826: LD_VAR 0 4
45830: PUSH
45831: LD_INT 1
45833: PLUS
45834: ARRAY
45835: ST_TO_ADDR
45836: GO 46027
45838: LD_INT 4
45840: DOUBLE
45841: EQUAL
45842: IFTRUE 45864
45844: LD_INT 5
45846: DOUBLE
45847: EQUAL
45848: IFTRUE 45864
45850: LD_INT 34
45852: DOUBLE
45853: EQUAL
45854: IFTRUE 45864
45856: LD_INT 37
45858: DOUBLE
45859: EQUAL
45860: IFTRUE 45864
45862: GO 45920
45864: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
45865: LD_ADDR_VAR 0 9
45869: PUSH
45870: LD_VAR 0 53
45874: PUSH
45875: LD_VAR 0 54
45879: PUSH
45880: LD_VAR 0 55
45884: PUSH
45885: LD_VAR 0 56
45889: PUSH
45890: LD_VAR 0 57
45894: PUSH
45895: LD_VAR 0 58
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: PUSH
45908: LD_VAR 0 4
45912: PUSH
45913: LD_INT 1
45915: PLUS
45916: ARRAY
45917: ST_TO_ADDR
45918: GO 46027
45920: LD_INT 31
45922: DOUBLE
45923: EQUAL
45924: IFTRUE 45970
45926: LD_INT 32
45928: DOUBLE
45929: EQUAL
45930: IFTRUE 45970
45932: LD_INT 33
45934: DOUBLE
45935: EQUAL
45936: IFTRUE 45970
45938: LD_INT 27
45940: DOUBLE
45941: EQUAL
45942: IFTRUE 45970
45944: LD_INT 26
45946: DOUBLE
45947: EQUAL
45948: IFTRUE 45970
45950: LD_INT 28
45952: DOUBLE
45953: EQUAL
45954: IFTRUE 45970
45956: LD_INT 29
45958: DOUBLE
45959: EQUAL
45960: IFTRUE 45970
45962: LD_INT 30
45964: DOUBLE
45965: EQUAL
45966: IFTRUE 45970
45968: GO 46026
45970: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
45971: LD_ADDR_VAR 0 9
45975: PUSH
45976: LD_VAR 0 59
45980: PUSH
45981: LD_VAR 0 60
45985: PUSH
45986: LD_VAR 0 61
45990: PUSH
45991: LD_VAR 0 62
45995: PUSH
45996: LD_VAR 0 63
46000: PUSH
46001: LD_VAR 0 64
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: PUSH
46014: LD_VAR 0 4
46018: PUSH
46019: LD_INT 1
46021: PLUS
46022: ARRAY
46023: ST_TO_ADDR
46024: GO 46027
46026: POP
// temp_list2 = [ ] ;
46027: LD_ADDR_VAR 0 10
46031: PUSH
46032: EMPTY
46033: ST_TO_ADDR
// for i in temp_list do
46034: LD_ADDR_VAR 0 8
46038: PUSH
46039: LD_VAR 0 9
46043: PUSH
46044: FOR_IN
46045: IFFALSE 46097
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
46047: LD_ADDR_VAR 0 10
46051: PUSH
46052: LD_VAR 0 10
46056: PUSH
46057: LD_VAR 0 8
46061: PUSH
46062: LD_INT 1
46064: ARRAY
46065: PUSH
46066: LD_VAR 0 2
46070: PLUS
46071: PUSH
46072: LD_VAR 0 8
46076: PUSH
46077: LD_INT 2
46079: ARRAY
46080: PUSH
46081: LD_VAR 0 3
46085: PLUS
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: EMPTY
46092: LIST
46093: ADD
46094: ST_TO_ADDR
46095: GO 46044
46097: POP
46098: POP
// result = temp_list2 ;
46099: LD_ADDR_VAR 0 7
46103: PUSH
46104: LD_VAR 0 10
46108: ST_TO_ADDR
// end ;
46109: LD_VAR 0 7
46113: RET
// export function EnemyInRange ( unit , dist ) ; begin
46114: LD_INT 0
46116: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
46117: LD_ADDR_VAR 0 3
46121: PUSH
46122: LD_VAR 0 1
46126: PPUSH
46127: CALL_OW 255
46131: PPUSH
46132: LD_VAR 0 1
46136: PPUSH
46137: CALL_OW 250
46141: PPUSH
46142: LD_VAR 0 1
46146: PPUSH
46147: CALL_OW 251
46151: PPUSH
46152: LD_VAR 0 2
46156: PPUSH
46157: CALL 19510 0 4
46161: PUSH
46162: LD_INT 4
46164: ARRAY
46165: ST_TO_ADDR
// end ;
46166: LD_VAR 0 3
46170: RET
// export function PlayerSeeMe ( unit ) ; begin
46171: LD_INT 0
46173: PPUSH
// result := See ( your_side , unit ) ;
46174: LD_ADDR_VAR 0 2
46178: PUSH
46179: LD_OWVAR 2
46183: PPUSH
46184: LD_VAR 0 1
46188: PPUSH
46189: CALL_OW 292
46193: ST_TO_ADDR
// end ;
46194: LD_VAR 0 2
46198: RET
// export function ReverseDir ( unit ) ; begin
46199: LD_INT 0
46201: PPUSH
// if not unit then
46202: LD_VAR 0 1
46206: NOT
46207: IFFALSE 46211
// exit ;
46209: GO 46234
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
46211: LD_ADDR_VAR 0 2
46215: PUSH
46216: LD_VAR 0 1
46220: PPUSH
46221: CALL_OW 254
46225: PUSH
46226: LD_INT 3
46228: PLUS
46229: PUSH
46230: LD_INT 6
46232: MOD
46233: ST_TO_ADDR
// end ;
46234: LD_VAR 0 2
46238: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
46239: LD_INT 0
46241: PPUSH
46242: PPUSH
46243: PPUSH
46244: PPUSH
46245: PPUSH
// if not hexes then
46246: LD_VAR 0 2
46250: NOT
46251: IFFALSE 46255
// exit ;
46253: GO 46403
// dist := 9999 ;
46255: LD_ADDR_VAR 0 5
46259: PUSH
46260: LD_INT 9999
46262: ST_TO_ADDR
// for i = 1 to hexes do
46263: LD_ADDR_VAR 0 4
46267: PUSH
46268: DOUBLE
46269: LD_INT 1
46271: DEC
46272: ST_TO_ADDR
46273: LD_VAR 0 2
46277: PUSH
46278: FOR_TO
46279: IFFALSE 46391
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
46281: LD_VAR 0 1
46285: PPUSH
46286: LD_VAR 0 2
46290: PUSH
46291: LD_VAR 0 4
46295: ARRAY
46296: PUSH
46297: LD_INT 1
46299: ARRAY
46300: PPUSH
46301: LD_VAR 0 2
46305: PUSH
46306: LD_VAR 0 4
46310: ARRAY
46311: PUSH
46312: LD_INT 2
46314: ARRAY
46315: PPUSH
46316: CALL_OW 297
46320: PUSH
46321: LD_VAR 0 5
46325: LESS
46326: IFFALSE 46389
// begin hex := hexes [ i ] ;
46328: LD_ADDR_VAR 0 7
46332: PUSH
46333: LD_VAR 0 2
46337: PUSH
46338: LD_VAR 0 4
46342: ARRAY
46343: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46344: LD_ADDR_VAR 0 5
46348: PUSH
46349: LD_VAR 0 1
46353: PPUSH
46354: LD_VAR 0 2
46358: PUSH
46359: LD_VAR 0 4
46363: ARRAY
46364: PUSH
46365: LD_INT 1
46367: ARRAY
46368: PPUSH
46369: LD_VAR 0 2
46373: PUSH
46374: LD_VAR 0 4
46378: ARRAY
46379: PUSH
46380: LD_INT 2
46382: ARRAY
46383: PPUSH
46384: CALL_OW 297
46388: ST_TO_ADDR
// end ; end ;
46389: GO 46278
46391: POP
46392: POP
// result := hex ;
46393: LD_ADDR_VAR 0 3
46397: PUSH
46398: LD_VAR 0 7
46402: ST_TO_ADDR
// end ;
46403: LD_VAR 0 3
46407: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
46408: LD_INT 0
46410: PPUSH
46411: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
46412: LD_VAR 0 1
46416: NOT
46417: PUSH
46418: LD_VAR 0 1
46422: PUSH
46423: LD_INT 21
46425: PUSH
46426: LD_INT 2
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 23
46435: PUSH
46436: LD_INT 2
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PPUSH
46447: CALL_OW 69
46451: IN
46452: NOT
46453: OR
46454: IFFALSE 46458
// exit ;
46456: GO 46505
// for i = 1 to 3 do
46458: LD_ADDR_VAR 0 3
46462: PUSH
46463: DOUBLE
46464: LD_INT 1
46466: DEC
46467: ST_TO_ADDR
46468: LD_INT 3
46470: PUSH
46471: FOR_TO
46472: IFFALSE 46503
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
46474: LD_VAR 0 1
46478: PPUSH
46479: CALL_OW 250
46483: PPUSH
46484: LD_VAR 0 1
46488: PPUSH
46489: CALL_OW 251
46493: PPUSH
46494: LD_INT 1
46496: PPUSH
46497: CALL_OW 453
46501: GO 46471
46503: POP
46504: POP
// end ;
46505: LD_VAR 0 2
46509: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
46510: LD_INT 0
46512: PPUSH
46513: PPUSH
46514: PPUSH
46515: PPUSH
46516: PPUSH
46517: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
46518: LD_VAR 0 1
46522: NOT
46523: PUSH
46524: LD_VAR 0 2
46528: NOT
46529: OR
46530: PUSH
46531: LD_VAR 0 1
46535: PPUSH
46536: CALL_OW 314
46540: OR
46541: IFFALSE 46545
// exit ;
46543: GO 46986
// x := GetX ( enemy_unit ) ;
46545: LD_ADDR_VAR 0 7
46549: PUSH
46550: LD_VAR 0 2
46554: PPUSH
46555: CALL_OW 250
46559: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
46560: LD_ADDR_VAR 0 8
46564: PUSH
46565: LD_VAR 0 2
46569: PPUSH
46570: CALL_OW 251
46574: ST_TO_ADDR
// if not x or not y then
46575: LD_VAR 0 7
46579: NOT
46580: PUSH
46581: LD_VAR 0 8
46585: NOT
46586: OR
46587: IFFALSE 46591
// exit ;
46589: GO 46986
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
46591: LD_ADDR_VAR 0 6
46595: PUSH
46596: LD_VAR 0 7
46600: PPUSH
46601: LD_INT 0
46603: PPUSH
46604: LD_INT 4
46606: PPUSH
46607: CALL_OW 272
46611: PUSH
46612: LD_VAR 0 8
46616: PPUSH
46617: LD_INT 0
46619: PPUSH
46620: LD_INT 4
46622: PPUSH
46623: CALL_OW 273
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_VAR 0 7
46636: PPUSH
46637: LD_INT 1
46639: PPUSH
46640: LD_INT 4
46642: PPUSH
46643: CALL_OW 272
46647: PUSH
46648: LD_VAR 0 8
46652: PPUSH
46653: LD_INT 1
46655: PPUSH
46656: LD_INT 4
46658: PPUSH
46659: CALL_OW 273
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_VAR 0 7
46672: PPUSH
46673: LD_INT 2
46675: PPUSH
46676: LD_INT 4
46678: PPUSH
46679: CALL_OW 272
46683: PUSH
46684: LD_VAR 0 8
46688: PPUSH
46689: LD_INT 2
46691: PPUSH
46692: LD_INT 4
46694: PPUSH
46695: CALL_OW 273
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_VAR 0 7
46708: PPUSH
46709: LD_INT 3
46711: PPUSH
46712: LD_INT 4
46714: PPUSH
46715: CALL_OW 272
46719: PUSH
46720: LD_VAR 0 8
46724: PPUSH
46725: LD_INT 3
46727: PPUSH
46728: LD_INT 4
46730: PPUSH
46731: CALL_OW 273
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_VAR 0 7
46744: PPUSH
46745: LD_INT 4
46747: PPUSH
46748: LD_INT 4
46750: PPUSH
46751: CALL_OW 272
46755: PUSH
46756: LD_VAR 0 8
46760: PPUSH
46761: LD_INT 4
46763: PPUSH
46764: LD_INT 4
46766: PPUSH
46767: CALL_OW 273
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_VAR 0 7
46780: PPUSH
46781: LD_INT 5
46783: PPUSH
46784: LD_INT 4
46786: PPUSH
46787: CALL_OW 272
46791: PUSH
46792: LD_VAR 0 8
46796: PPUSH
46797: LD_INT 5
46799: PPUSH
46800: LD_INT 4
46802: PPUSH
46803: CALL_OW 273
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: ST_TO_ADDR
// for i = tmp downto 1 do
46820: LD_ADDR_VAR 0 4
46824: PUSH
46825: DOUBLE
46826: LD_VAR 0 6
46830: INC
46831: ST_TO_ADDR
46832: LD_INT 1
46834: PUSH
46835: FOR_DOWNTO
46836: IFFALSE 46937
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
46838: LD_VAR 0 6
46842: PUSH
46843: LD_VAR 0 4
46847: ARRAY
46848: PUSH
46849: LD_INT 1
46851: ARRAY
46852: PPUSH
46853: LD_VAR 0 6
46857: PUSH
46858: LD_VAR 0 4
46862: ARRAY
46863: PUSH
46864: LD_INT 2
46866: ARRAY
46867: PPUSH
46868: CALL_OW 488
46872: NOT
46873: PUSH
46874: LD_VAR 0 6
46878: PUSH
46879: LD_VAR 0 4
46883: ARRAY
46884: PUSH
46885: LD_INT 1
46887: ARRAY
46888: PPUSH
46889: LD_VAR 0 6
46893: PUSH
46894: LD_VAR 0 4
46898: ARRAY
46899: PUSH
46900: LD_INT 2
46902: ARRAY
46903: PPUSH
46904: CALL_OW 428
46908: PUSH
46909: LD_INT 0
46911: NONEQUAL
46912: OR
46913: IFFALSE 46935
// tmp := Delete ( tmp , i ) ;
46915: LD_ADDR_VAR 0 6
46919: PUSH
46920: LD_VAR 0 6
46924: PPUSH
46925: LD_VAR 0 4
46929: PPUSH
46930: CALL_OW 3
46934: ST_TO_ADDR
46935: GO 46835
46937: POP
46938: POP
// j := GetClosestHex ( unit , tmp ) ;
46939: LD_ADDR_VAR 0 5
46943: PUSH
46944: LD_VAR 0 1
46948: PPUSH
46949: LD_VAR 0 6
46953: PPUSH
46954: CALL 46239 0 2
46958: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
46959: LD_VAR 0 1
46963: PPUSH
46964: LD_VAR 0 5
46968: PUSH
46969: LD_INT 1
46971: ARRAY
46972: PPUSH
46973: LD_VAR 0 5
46977: PUSH
46978: LD_INT 2
46980: ARRAY
46981: PPUSH
46982: CALL_OW 111
// end ;
46986: LD_VAR 0 3
46990: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
46991: LD_INT 0
46993: PPUSH
46994: PPUSH
46995: PPUSH
// uc_side = 0 ;
46996: LD_ADDR_OWVAR 20
47000: PUSH
47001: LD_INT 0
47003: ST_TO_ADDR
// uc_nation = 0 ;
47004: LD_ADDR_OWVAR 21
47008: PUSH
47009: LD_INT 0
47011: ST_TO_ADDR
// InitHc_All ( ) ;
47012: CALL_OW 584
// InitVc ;
47016: CALL_OW 20
// if mastodonts then
47020: LD_VAR 0 6
47024: IFFALSE 47091
// for i = 1 to mastodonts do
47026: LD_ADDR_VAR 0 11
47030: PUSH
47031: DOUBLE
47032: LD_INT 1
47034: DEC
47035: ST_TO_ADDR
47036: LD_VAR 0 6
47040: PUSH
47041: FOR_TO
47042: IFFALSE 47089
// begin vc_chassis := 31 ;
47044: LD_ADDR_OWVAR 37
47048: PUSH
47049: LD_INT 31
47051: ST_TO_ADDR
// vc_control := control_rider ;
47052: LD_ADDR_OWVAR 38
47056: PUSH
47057: LD_INT 4
47059: ST_TO_ADDR
// animal := CreateVehicle ;
47060: LD_ADDR_VAR 0 12
47064: PUSH
47065: CALL_OW 45
47069: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47070: LD_VAR 0 12
47074: PPUSH
47075: LD_VAR 0 8
47079: PPUSH
47080: LD_INT 0
47082: PPUSH
47083: CALL 49279 0 3
// end ;
47087: GO 47041
47089: POP
47090: POP
// if horses then
47091: LD_VAR 0 5
47095: IFFALSE 47162
// for i = 1 to horses do
47097: LD_ADDR_VAR 0 11
47101: PUSH
47102: DOUBLE
47103: LD_INT 1
47105: DEC
47106: ST_TO_ADDR
47107: LD_VAR 0 5
47111: PUSH
47112: FOR_TO
47113: IFFALSE 47160
// begin hc_class := 21 ;
47115: LD_ADDR_OWVAR 28
47119: PUSH
47120: LD_INT 21
47122: ST_TO_ADDR
// hc_gallery :=  ;
47123: LD_ADDR_OWVAR 33
47127: PUSH
47128: LD_STRING 
47130: ST_TO_ADDR
// animal := CreateHuman ;
47131: LD_ADDR_VAR 0 12
47135: PUSH
47136: CALL_OW 44
47140: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47141: LD_VAR 0 12
47145: PPUSH
47146: LD_VAR 0 8
47150: PPUSH
47151: LD_INT 0
47153: PPUSH
47154: CALL 49279 0 3
// end ;
47158: GO 47112
47160: POP
47161: POP
// if birds then
47162: LD_VAR 0 1
47166: IFFALSE 47233
// for i = 1 to birds do
47168: LD_ADDR_VAR 0 11
47172: PUSH
47173: DOUBLE
47174: LD_INT 1
47176: DEC
47177: ST_TO_ADDR
47178: LD_VAR 0 1
47182: PUSH
47183: FOR_TO
47184: IFFALSE 47231
// begin hc_class = 18 ;
47186: LD_ADDR_OWVAR 28
47190: PUSH
47191: LD_INT 18
47193: ST_TO_ADDR
// hc_gallery =  ;
47194: LD_ADDR_OWVAR 33
47198: PUSH
47199: LD_STRING 
47201: ST_TO_ADDR
// animal := CreateHuman ;
47202: LD_ADDR_VAR 0 12
47206: PUSH
47207: CALL_OW 44
47211: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47212: LD_VAR 0 12
47216: PPUSH
47217: LD_VAR 0 8
47221: PPUSH
47222: LD_INT 0
47224: PPUSH
47225: CALL 49279 0 3
// end ;
47229: GO 47183
47231: POP
47232: POP
// if tigers then
47233: LD_VAR 0 2
47237: IFFALSE 47321
// for i = 1 to tigers do
47239: LD_ADDR_VAR 0 11
47243: PUSH
47244: DOUBLE
47245: LD_INT 1
47247: DEC
47248: ST_TO_ADDR
47249: LD_VAR 0 2
47253: PUSH
47254: FOR_TO
47255: IFFALSE 47319
// begin hc_class = class_tiger ;
47257: LD_ADDR_OWVAR 28
47261: PUSH
47262: LD_INT 14
47264: ST_TO_ADDR
// hc_gallery =  ;
47265: LD_ADDR_OWVAR 33
47269: PUSH
47270: LD_STRING 
47272: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
47273: LD_ADDR_OWVAR 35
47277: PUSH
47278: LD_INT 7
47280: NEG
47281: PPUSH
47282: LD_INT 7
47284: PPUSH
47285: CALL_OW 12
47289: ST_TO_ADDR
// animal := CreateHuman ;
47290: LD_ADDR_VAR 0 12
47294: PUSH
47295: CALL_OW 44
47299: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47300: LD_VAR 0 12
47304: PPUSH
47305: LD_VAR 0 8
47309: PPUSH
47310: LD_INT 0
47312: PPUSH
47313: CALL 49279 0 3
// end ;
47317: GO 47254
47319: POP
47320: POP
// if apemans then
47321: LD_VAR 0 3
47325: IFFALSE 47448
// for i = 1 to apemans do
47327: LD_ADDR_VAR 0 11
47331: PUSH
47332: DOUBLE
47333: LD_INT 1
47335: DEC
47336: ST_TO_ADDR
47337: LD_VAR 0 3
47341: PUSH
47342: FOR_TO
47343: IFFALSE 47446
// begin hc_class = class_apeman ;
47345: LD_ADDR_OWVAR 28
47349: PUSH
47350: LD_INT 12
47352: ST_TO_ADDR
// hc_gallery =  ;
47353: LD_ADDR_OWVAR 33
47357: PUSH
47358: LD_STRING 
47360: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
47361: LD_ADDR_OWVAR 35
47365: PUSH
47366: LD_INT 2
47368: NEG
47369: PPUSH
47370: LD_INT 2
47372: PPUSH
47373: CALL_OW 12
47377: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
47378: LD_ADDR_OWVAR 31
47382: PUSH
47383: LD_INT 1
47385: PPUSH
47386: LD_INT 3
47388: PPUSH
47389: CALL_OW 12
47393: PUSH
47394: LD_INT 1
47396: PPUSH
47397: LD_INT 3
47399: PPUSH
47400: CALL_OW 12
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: ST_TO_ADDR
// animal := CreateHuman ;
47417: LD_ADDR_VAR 0 12
47421: PUSH
47422: CALL_OW 44
47426: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47427: LD_VAR 0 12
47431: PPUSH
47432: LD_VAR 0 8
47436: PPUSH
47437: LD_INT 0
47439: PPUSH
47440: CALL 49279 0 3
// end ;
47444: GO 47342
47446: POP
47447: POP
// if enchidnas then
47448: LD_VAR 0 4
47452: IFFALSE 47519
// for i = 1 to enchidnas do
47454: LD_ADDR_VAR 0 11
47458: PUSH
47459: DOUBLE
47460: LD_INT 1
47462: DEC
47463: ST_TO_ADDR
47464: LD_VAR 0 4
47468: PUSH
47469: FOR_TO
47470: IFFALSE 47517
// begin hc_class = 13 ;
47472: LD_ADDR_OWVAR 28
47476: PUSH
47477: LD_INT 13
47479: ST_TO_ADDR
// hc_gallery =  ;
47480: LD_ADDR_OWVAR 33
47484: PUSH
47485: LD_STRING 
47487: ST_TO_ADDR
// animal := CreateHuman ;
47488: LD_ADDR_VAR 0 12
47492: PUSH
47493: CALL_OW 44
47497: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47498: LD_VAR 0 12
47502: PPUSH
47503: LD_VAR 0 8
47507: PPUSH
47508: LD_INT 0
47510: PPUSH
47511: CALL 49279 0 3
// end ;
47515: GO 47469
47517: POP
47518: POP
// if fishes then
47519: LD_VAR 0 7
47523: IFFALSE 47590
// for i = 1 to fishes do
47525: LD_ADDR_VAR 0 11
47529: PUSH
47530: DOUBLE
47531: LD_INT 1
47533: DEC
47534: ST_TO_ADDR
47535: LD_VAR 0 7
47539: PUSH
47540: FOR_TO
47541: IFFALSE 47588
// begin hc_class = 20 ;
47543: LD_ADDR_OWVAR 28
47547: PUSH
47548: LD_INT 20
47550: ST_TO_ADDR
// hc_gallery =  ;
47551: LD_ADDR_OWVAR 33
47555: PUSH
47556: LD_STRING 
47558: ST_TO_ADDR
// animal := CreateHuman ;
47559: LD_ADDR_VAR 0 12
47563: PUSH
47564: CALL_OW 44
47568: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
47569: LD_VAR 0 12
47573: PPUSH
47574: LD_VAR 0 9
47578: PPUSH
47579: LD_INT 0
47581: PPUSH
47582: CALL 49279 0 3
// end ;
47586: GO 47540
47588: POP
47589: POP
// end ;
47590: LD_VAR 0 10
47594: RET
// export function WantHeal ( sci , unit ) ; begin
47595: LD_INT 0
47597: PPUSH
// if GetTaskList ( sci ) > 0 then
47598: LD_VAR 0 1
47602: PPUSH
47603: CALL_OW 437
47607: PUSH
47608: LD_INT 0
47610: GREATER
47611: IFFALSE 47681
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
47613: LD_VAR 0 1
47617: PPUSH
47618: CALL_OW 437
47622: PUSH
47623: LD_INT 1
47625: ARRAY
47626: PUSH
47627: LD_INT 1
47629: ARRAY
47630: PUSH
47631: LD_STRING l
47633: EQUAL
47634: PUSH
47635: LD_VAR 0 1
47639: PPUSH
47640: CALL_OW 437
47644: PUSH
47645: LD_INT 1
47647: ARRAY
47648: PUSH
47649: LD_INT 4
47651: ARRAY
47652: PUSH
47653: LD_VAR 0 2
47657: EQUAL
47658: AND
47659: IFFALSE 47671
// result := true else
47661: LD_ADDR_VAR 0 3
47665: PUSH
47666: LD_INT 1
47668: ST_TO_ADDR
47669: GO 47679
// result := false ;
47671: LD_ADDR_VAR 0 3
47675: PUSH
47676: LD_INT 0
47678: ST_TO_ADDR
// end else
47679: GO 47689
// result := false ;
47681: LD_ADDR_VAR 0 3
47685: PUSH
47686: LD_INT 0
47688: ST_TO_ADDR
// end ;
47689: LD_VAR 0 3
47693: RET
// export function HealTarget ( sci ) ; begin
47694: LD_INT 0
47696: PPUSH
// if not sci then
47697: LD_VAR 0 1
47701: NOT
47702: IFFALSE 47706
// exit ;
47704: GO 47771
// result := 0 ;
47706: LD_ADDR_VAR 0 2
47710: PUSH
47711: LD_INT 0
47713: ST_TO_ADDR
// if GetTaskList ( sci ) then
47714: LD_VAR 0 1
47718: PPUSH
47719: CALL_OW 437
47723: IFFALSE 47771
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
47725: LD_VAR 0 1
47729: PPUSH
47730: CALL_OW 437
47734: PUSH
47735: LD_INT 1
47737: ARRAY
47738: PUSH
47739: LD_INT 1
47741: ARRAY
47742: PUSH
47743: LD_STRING l
47745: EQUAL
47746: IFFALSE 47771
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
47748: LD_ADDR_VAR 0 2
47752: PUSH
47753: LD_VAR 0 1
47757: PPUSH
47758: CALL_OW 437
47762: PUSH
47763: LD_INT 1
47765: ARRAY
47766: PUSH
47767: LD_INT 4
47769: ARRAY
47770: ST_TO_ADDR
// end ;
47771: LD_VAR 0 2
47775: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
47776: LD_INT 0
47778: PPUSH
47779: PPUSH
47780: PPUSH
47781: PPUSH
// if not base_units then
47782: LD_VAR 0 1
47786: NOT
47787: IFFALSE 47791
// exit ;
47789: GO 47878
// result := false ;
47791: LD_ADDR_VAR 0 2
47795: PUSH
47796: LD_INT 0
47798: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
47799: LD_ADDR_VAR 0 5
47803: PUSH
47804: LD_VAR 0 1
47808: PPUSH
47809: LD_INT 21
47811: PUSH
47812: LD_INT 3
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PPUSH
47819: CALL_OW 72
47823: ST_TO_ADDR
// if not tmp then
47824: LD_VAR 0 5
47828: NOT
47829: IFFALSE 47833
// exit ;
47831: GO 47878
// for i in tmp do
47833: LD_ADDR_VAR 0 3
47837: PUSH
47838: LD_VAR 0 5
47842: PUSH
47843: FOR_IN
47844: IFFALSE 47876
// begin result := EnemyInRange ( i , 22 ) ;
47846: LD_ADDR_VAR 0 2
47850: PUSH
47851: LD_VAR 0 3
47855: PPUSH
47856: LD_INT 22
47858: PPUSH
47859: CALL 46114 0 2
47863: ST_TO_ADDR
// if result then
47864: LD_VAR 0 2
47868: IFFALSE 47874
// exit ;
47870: POP
47871: POP
47872: GO 47878
// end ;
47874: GO 47843
47876: POP
47877: POP
// end ;
47878: LD_VAR 0 2
47882: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
47883: LD_INT 0
47885: PPUSH
47886: PPUSH
// if not units then
47887: LD_VAR 0 1
47891: NOT
47892: IFFALSE 47896
// exit ;
47894: GO 47966
// result := [ ] ;
47896: LD_ADDR_VAR 0 3
47900: PUSH
47901: EMPTY
47902: ST_TO_ADDR
// for i in units do
47903: LD_ADDR_VAR 0 4
47907: PUSH
47908: LD_VAR 0 1
47912: PUSH
47913: FOR_IN
47914: IFFALSE 47964
// if GetTag ( i ) = tag then
47916: LD_VAR 0 4
47920: PPUSH
47921: CALL_OW 110
47925: PUSH
47926: LD_VAR 0 2
47930: EQUAL
47931: IFFALSE 47962
// result := Replace ( result , result + 1 , i ) ;
47933: LD_ADDR_VAR 0 3
47937: PUSH
47938: LD_VAR 0 3
47942: PPUSH
47943: LD_VAR 0 3
47947: PUSH
47948: LD_INT 1
47950: PLUS
47951: PPUSH
47952: LD_VAR 0 4
47956: PPUSH
47957: CALL_OW 1
47961: ST_TO_ADDR
47962: GO 47913
47964: POP
47965: POP
// end ;
47966: LD_VAR 0 3
47970: RET
// export function IsDriver ( un ) ; begin
47971: LD_INT 0
47973: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
47974: LD_ADDR_VAR 0 2
47978: PUSH
47979: LD_VAR 0 1
47983: PUSH
47984: LD_INT 55
47986: PUSH
47987: EMPTY
47988: LIST
47989: PPUSH
47990: CALL_OW 69
47994: IN
47995: ST_TO_ADDR
// end ;
47996: LD_VAR 0 2
48000: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
48001: LD_INT 0
48003: PPUSH
48004: PPUSH
// list := [ ] ;
48005: LD_ADDR_VAR 0 5
48009: PUSH
48010: EMPTY
48011: ST_TO_ADDR
// case d of 0 :
48012: LD_VAR 0 3
48016: PUSH
48017: LD_INT 0
48019: DOUBLE
48020: EQUAL
48021: IFTRUE 48025
48023: GO 48158
48025: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
48026: LD_ADDR_VAR 0 5
48030: PUSH
48031: LD_VAR 0 1
48035: PUSH
48036: LD_INT 4
48038: MINUS
48039: PUSH
48040: LD_VAR 0 2
48044: PUSH
48045: LD_INT 4
48047: MINUS
48048: PUSH
48049: LD_INT 2
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: LIST
48056: PUSH
48057: LD_VAR 0 1
48061: PUSH
48062: LD_INT 3
48064: MINUS
48065: PUSH
48066: LD_VAR 0 2
48070: PUSH
48071: LD_INT 1
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: LIST
48078: PUSH
48079: LD_VAR 0 1
48083: PUSH
48084: LD_INT 4
48086: PLUS
48087: PUSH
48088: LD_VAR 0 2
48092: PUSH
48093: LD_INT 4
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: LIST
48100: PUSH
48101: LD_VAR 0 1
48105: PUSH
48106: LD_INT 3
48108: PLUS
48109: PUSH
48110: LD_VAR 0 2
48114: PUSH
48115: LD_INT 3
48117: PLUS
48118: PUSH
48119: LD_INT 5
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: LIST
48126: PUSH
48127: LD_VAR 0 1
48131: PUSH
48132: LD_VAR 0 2
48136: PUSH
48137: LD_INT 4
48139: PLUS
48140: PUSH
48141: LD_INT 0
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: LIST
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: ST_TO_ADDR
// end ; 1 :
48156: GO 48856
48158: LD_INT 1
48160: DOUBLE
48161: EQUAL
48162: IFTRUE 48166
48164: GO 48299
48166: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
48167: LD_ADDR_VAR 0 5
48171: PUSH
48172: LD_VAR 0 1
48176: PUSH
48177: LD_VAR 0 2
48181: PUSH
48182: LD_INT 4
48184: MINUS
48185: PUSH
48186: LD_INT 3
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: LIST
48193: PUSH
48194: LD_VAR 0 1
48198: PUSH
48199: LD_INT 3
48201: MINUS
48202: PUSH
48203: LD_VAR 0 2
48207: PUSH
48208: LD_INT 3
48210: MINUS
48211: PUSH
48212: LD_INT 2
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: LIST
48219: PUSH
48220: LD_VAR 0 1
48224: PUSH
48225: LD_INT 4
48227: MINUS
48228: PUSH
48229: LD_VAR 0 2
48233: PUSH
48234: LD_INT 1
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: LIST
48241: PUSH
48242: LD_VAR 0 1
48246: PUSH
48247: LD_VAR 0 2
48251: PUSH
48252: LD_INT 3
48254: PLUS
48255: PUSH
48256: LD_INT 0
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: LIST
48263: PUSH
48264: LD_VAR 0 1
48268: PUSH
48269: LD_INT 4
48271: PLUS
48272: PUSH
48273: LD_VAR 0 2
48277: PUSH
48278: LD_INT 4
48280: PLUS
48281: PUSH
48282: LD_INT 5
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: LIST
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: ST_TO_ADDR
// end ; 2 :
48297: GO 48856
48299: LD_INT 2
48301: DOUBLE
48302: EQUAL
48303: IFTRUE 48307
48305: GO 48436
48307: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
48308: LD_ADDR_VAR 0 5
48312: PUSH
48313: LD_VAR 0 1
48317: PUSH
48318: LD_VAR 0 2
48322: PUSH
48323: LD_INT 3
48325: MINUS
48326: PUSH
48327: LD_INT 3
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: LIST
48334: PUSH
48335: LD_VAR 0 1
48339: PUSH
48340: LD_INT 4
48342: PLUS
48343: PUSH
48344: LD_VAR 0 2
48348: PUSH
48349: LD_INT 4
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: LIST
48356: PUSH
48357: LD_VAR 0 1
48361: PUSH
48362: LD_VAR 0 2
48366: PUSH
48367: LD_INT 4
48369: PLUS
48370: PUSH
48371: LD_INT 0
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: LIST
48378: PUSH
48379: LD_VAR 0 1
48383: PUSH
48384: LD_INT 3
48386: MINUS
48387: PUSH
48388: LD_VAR 0 2
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: LIST
48400: PUSH
48401: LD_VAR 0 1
48405: PUSH
48406: LD_INT 4
48408: MINUS
48409: PUSH
48410: LD_VAR 0 2
48414: PUSH
48415: LD_INT 4
48417: MINUS
48418: PUSH
48419: LD_INT 2
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: LIST
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: ST_TO_ADDR
// end ; 3 :
48434: GO 48856
48436: LD_INT 3
48438: DOUBLE
48439: EQUAL
48440: IFTRUE 48444
48442: GO 48577
48444: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
48445: LD_ADDR_VAR 0 5
48449: PUSH
48450: LD_VAR 0 1
48454: PUSH
48455: LD_INT 3
48457: PLUS
48458: PUSH
48459: LD_VAR 0 2
48463: PUSH
48464: LD_INT 4
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: LIST
48471: PUSH
48472: LD_VAR 0 1
48476: PUSH
48477: LD_INT 4
48479: PLUS
48480: PUSH
48481: LD_VAR 0 2
48485: PUSH
48486: LD_INT 4
48488: PLUS
48489: PUSH
48490: LD_INT 5
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: LIST
48497: PUSH
48498: LD_VAR 0 1
48502: PUSH
48503: LD_INT 4
48505: MINUS
48506: PUSH
48507: LD_VAR 0 2
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: LIST
48519: PUSH
48520: LD_VAR 0 1
48524: PUSH
48525: LD_VAR 0 2
48529: PUSH
48530: LD_INT 4
48532: MINUS
48533: PUSH
48534: LD_INT 3
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: LIST
48541: PUSH
48542: LD_VAR 0 1
48546: PUSH
48547: LD_INT 3
48549: MINUS
48550: PUSH
48551: LD_VAR 0 2
48555: PUSH
48556: LD_INT 3
48558: MINUS
48559: PUSH
48560: LD_INT 2
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: LIST
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: ST_TO_ADDR
// end ; 4 :
48575: GO 48856
48577: LD_INT 4
48579: DOUBLE
48580: EQUAL
48581: IFTRUE 48585
48583: GO 48718
48585: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
48586: LD_ADDR_VAR 0 5
48590: PUSH
48591: LD_VAR 0 1
48595: PUSH
48596: LD_VAR 0 2
48600: PUSH
48601: LD_INT 4
48603: PLUS
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: LIST
48612: PUSH
48613: LD_VAR 0 1
48617: PUSH
48618: LD_INT 3
48620: PLUS
48621: PUSH
48622: LD_VAR 0 2
48626: PUSH
48627: LD_INT 3
48629: PLUS
48630: PUSH
48631: LD_INT 5
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: LIST
48638: PUSH
48639: LD_VAR 0 1
48643: PUSH
48644: LD_INT 4
48646: PLUS
48647: PUSH
48648: LD_VAR 0 2
48652: PUSH
48653: LD_INT 4
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: LIST
48660: PUSH
48661: LD_VAR 0 1
48665: PUSH
48666: LD_VAR 0 2
48670: PUSH
48671: LD_INT 3
48673: MINUS
48674: PUSH
48675: LD_INT 3
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: LIST
48682: PUSH
48683: LD_VAR 0 1
48687: PUSH
48688: LD_INT 4
48690: MINUS
48691: PUSH
48692: LD_VAR 0 2
48696: PUSH
48697: LD_INT 4
48699: MINUS
48700: PUSH
48701: LD_INT 2
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: LIST
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: ST_TO_ADDR
// end ; 5 :
48716: GO 48856
48718: LD_INT 5
48720: DOUBLE
48721: EQUAL
48722: IFTRUE 48726
48724: GO 48855
48726: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
48727: LD_ADDR_VAR 0 5
48731: PUSH
48732: LD_VAR 0 1
48736: PUSH
48737: LD_INT 4
48739: MINUS
48740: PUSH
48741: LD_VAR 0 2
48745: PUSH
48746: LD_INT 1
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: LIST
48753: PUSH
48754: LD_VAR 0 1
48758: PUSH
48759: LD_VAR 0 2
48763: PUSH
48764: LD_INT 4
48766: MINUS
48767: PUSH
48768: LD_INT 3
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: LIST
48775: PUSH
48776: LD_VAR 0 1
48780: PUSH
48781: LD_INT 4
48783: PLUS
48784: PUSH
48785: LD_VAR 0 2
48789: PUSH
48790: LD_INT 4
48792: PLUS
48793: PUSH
48794: LD_INT 5
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: LIST
48801: PUSH
48802: LD_VAR 0 1
48806: PUSH
48807: LD_INT 3
48809: PLUS
48810: PUSH
48811: LD_VAR 0 2
48815: PUSH
48816: LD_INT 4
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: LIST
48823: PUSH
48824: LD_VAR 0 1
48828: PUSH
48829: LD_VAR 0 2
48833: PUSH
48834: LD_INT 3
48836: PLUS
48837: PUSH
48838: LD_INT 0
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: LIST
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: ST_TO_ADDR
// end ; end ;
48853: GO 48856
48855: POP
// result := list ;
48856: LD_ADDR_VAR 0 4
48860: PUSH
48861: LD_VAR 0 5
48865: ST_TO_ADDR
// end ;
48866: LD_VAR 0 4
48870: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
48871: LD_INT 0
48873: PPUSH
48874: PPUSH
48875: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
48876: LD_VAR 0 1
48880: NOT
48881: PUSH
48882: LD_VAR 0 2
48886: PUSH
48887: LD_INT 1
48889: PUSH
48890: LD_INT 2
48892: PUSH
48893: LD_INT 3
48895: PUSH
48896: LD_INT 4
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: IN
48905: NOT
48906: OR
48907: IFFALSE 48911
// exit ;
48909: GO 49003
// tmp := [ ] ;
48911: LD_ADDR_VAR 0 5
48915: PUSH
48916: EMPTY
48917: ST_TO_ADDR
// for i in units do
48918: LD_ADDR_VAR 0 4
48922: PUSH
48923: LD_VAR 0 1
48927: PUSH
48928: FOR_IN
48929: IFFALSE 48972
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
48931: LD_ADDR_VAR 0 5
48935: PUSH
48936: LD_VAR 0 5
48940: PPUSH
48941: LD_VAR 0 5
48945: PUSH
48946: LD_INT 1
48948: PLUS
48949: PPUSH
48950: LD_VAR 0 4
48954: PPUSH
48955: LD_VAR 0 2
48959: PPUSH
48960: CALL_OW 259
48964: PPUSH
48965: CALL_OW 2
48969: ST_TO_ADDR
48970: GO 48928
48972: POP
48973: POP
// if not tmp then
48974: LD_VAR 0 5
48978: NOT
48979: IFFALSE 48983
// exit ;
48981: GO 49003
// result := SortListByListDesc ( units , tmp ) ;
48983: LD_ADDR_VAR 0 3
48987: PUSH
48988: LD_VAR 0 1
48992: PPUSH
48993: LD_VAR 0 5
48997: PPUSH
48998: CALL_OW 77
49002: ST_TO_ADDR
// end ;
49003: LD_VAR 0 3
49007: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
49008: LD_INT 0
49010: PPUSH
49011: PPUSH
49012: PPUSH
// result := false ;
49013: LD_ADDR_VAR 0 3
49017: PUSH
49018: LD_INT 0
49020: ST_TO_ADDR
// x := GetX ( building ) ;
49021: LD_ADDR_VAR 0 4
49025: PUSH
49026: LD_VAR 0 2
49030: PPUSH
49031: CALL_OW 250
49035: ST_TO_ADDR
// y := GetY ( building ) ;
49036: LD_ADDR_VAR 0 5
49040: PUSH
49041: LD_VAR 0 2
49045: PPUSH
49046: CALL_OW 251
49050: ST_TO_ADDR
// if not building or not x or not y then
49051: LD_VAR 0 2
49055: NOT
49056: PUSH
49057: LD_VAR 0 4
49061: NOT
49062: OR
49063: PUSH
49064: LD_VAR 0 5
49068: NOT
49069: OR
49070: IFFALSE 49074
// exit ;
49072: GO 49166
// if GetTaskList ( unit ) then
49074: LD_VAR 0 1
49078: PPUSH
49079: CALL_OW 437
49083: IFFALSE 49166
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
49085: LD_STRING e
49087: PUSH
49088: LD_VAR 0 1
49092: PPUSH
49093: CALL_OW 437
49097: PUSH
49098: LD_INT 1
49100: ARRAY
49101: PUSH
49102: LD_INT 1
49104: ARRAY
49105: EQUAL
49106: PUSH
49107: LD_VAR 0 4
49111: PUSH
49112: LD_VAR 0 1
49116: PPUSH
49117: CALL_OW 437
49121: PUSH
49122: LD_INT 1
49124: ARRAY
49125: PUSH
49126: LD_INT 2
49128: ARRAY
49129: EQUAL
49130: AND
49131: PUSH
49132: LD_VAR 0 5
49136: PUSH
49137: LD_VAR 0 1
49141: PPUSH
49142: CALL_OW 437
49146: PUSH
49147: LD_INT 1
49149: ARRAY
49150: PUSH
49151: LD_INT 3
49153: ARRAY
49154: EQUAL
49155: AND
49156: IFFALSE 49166
// result := true end ;
49158: LD_ADDR_VAR 0 3
49162: PUSH
49163: LD_INT 1
49165: ST_TO_ADDR
// end ;
49166: LD_VAR 0 3
49170: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
49171: LD_INT 0
49173: PPUSH
// result := false ;
49174: LD_ADDR_VAR 0 4
49178: PUSH
49179: LD_INT 0
49181: ST_TO_ADDR
// if GetTaskList ( unit ) then
49182: LD_VAR 0 1
49186: PPUSH
49187: CALL_OW 437
49191: IFFALSE 49274
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
49193: LD_STRING M
49195: PUSH
49196: LD_VAR 0 1
49200: PPUSH
49201: CALL_OW 437
49205: PUSH
49206: LD_INT 1
49208: ARRAY
49209: PUSH
49210: LD_INT 1
49212: ARRAY
49213: EQUAL
49214: PUSH
49215: LD_VAR 0 2
49219: PUSH
49220: LD_VAR 0 1
49224: PPUSH
49225: CALL_OW 437
49229: PUSH
49230: LD_INT 1
49232: ARRAY
49233: PUSH
49234: LD_INT 2
49236: ARRAY
49237: EQUAL
49238: AND
49239: PUSH
49240: LD_VAR 0 3
49244: PUSH
49245: LD_VAR 0 1
49249: PPUSH
49250: CALL_OW 437
49254: PUSH
49255: LD_INT 1
49257: ARRAY
49258: PUSH
49259: LD_INT 3
49261: ARRAY
49262: EQUAL
49263: AND
49264: IFFALSE 49274
// result := true ;
49266: LD_ADDR_VAR 0 4
49270: PUSH
49271: LD_INT 1
49273: ST_TO_ADDR
// end ; end ;
49274: LD_VAR 0 4
49278: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
49279: LD_INT 0
49281: PPUSH
49282: PPUSH
49283: PPUSH
49284: PPUSH
// if not unit or not area then
49285: LD_VAR 0 1
49289: NOT
49290: PUSH
49291: LD_VAR 0 2
49295: NOT
49296: OR
49297: IFFALSE 49301
// exit ;
49299: GO 49465
// tmp := AreaToList ( area , i ) ;
49301: LD_ADDR_VAR 0 6
49305: PUSH
49306: LD_VAR 0 2
49310: PPUSH
49311: LD_VAR 0 5
49315: PPUSH
49316: CALL_OW 517
49320: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
49321: LD_ADDR_VAR 0 5
49325: PUSH
49326: DOUBLE
49327: LD_INT 1
49329: DEC
49330: ST_TO_ADDR
49331: LD_VAR 0 6
49335: PUSH
49336: LD_INT 1
49338: ARRAY
49339: PUSH
49340: FOR_TO
49341: IFFALSE 49463
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
49343: LD_ADDR_VAR 0 7
49347: PUSH
49348: LD_VAR 0 6
49352: PUSH
49353: LD_INT 1
49355: ARRAY
49356: PUSH
49357: LD_VAR 0 5
49361: ARRAY
49362: PUSH
49363: LD_VAR 0 6
49367: PUSH
49368: LD_INT 2
49370: ARRAY
49371: PUSH
49372: LD_VAR 0 5
49376: ARRAY
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
49382: LD_VAR 0 7
49386: PUSH
49387: LD_INT 1
49389: ARRAY
49390: PPUSH
49391: LD_VAR 0 7
49395: PUSH
49396: LD_INT 2
49398: ARRAY
49399: PPUSH
49400: CALL_OW 428
49404: PUSH
49405: LD_INT 0
49407: EQUAL
49408: IFFALSE 49461
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
49410: LD_VAR 0 1
49414: PPUSH
49415: LD_VAR 0 7
49419: PUSH
49420: LD_INT 1
49422: ARRAY
49423: PPUSH
49424: LD_VAR 0 7
49428: PUSH
49429: LD_INT 2
49431: ARRAY
49432: PPUSH
49433: LD_VAR 0 3
49437: PPUSH
49438: CALL_OW 48
// result := IsPlaced ( unit ) ;
49442: LD_ADDR_VAR 0 4
49446: PUSH
49447: LD_VAR 0 1
49451: PPUSH
49452: CALL_OW 305
49456: ST_TO_ADDR
// exit ;
49457: POP
49458: POP
49459: GO 49465
// end ; end ;
49461: GO 49340
49463: POP
49464: POP
// end ;
49465: LD_VAR 0 4
49469: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
49470: LD_INT 0
49472: PPUSH
49473: PPUSH
49474: PPUSH
// if not side or side > 8 then
49475: LD_VAR 0 1
49479: NOT
49480: PUSH
49481: LD_VAR 0 1
49485: PUSH
49486: LD_INT 8
49488: GREATER
49489: OR
49490: IFFALSE 49494
// exit ;
49492: GO 49681
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
49494: LD_ADDR_VAR 0 4
49498: PUSH
49499: LD_INT 22
49501: PUSH
49502: LD_VAR 0 1
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 21
49513: PUSH
49514: LD_INT 3
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PPUSH
49525: CALL_OW 69
49529: ST_TO_ADDR
// if not tmp then
49530: LD_VAR 0 4
49534: NOT
49535: IFFALSE 49539
// exit ;
49537: GO 49681
// enable_addtolog := true ;
49539: LD_ADDR_OWVAR 81
49543: PUSH
49544: LD_INT 1
49546: ST_TO_ADDR
// AddToLog ( [ ) ;
49547: LD_STRING [
49549: PPUSH
49550: CALL_OW 561
// for i in tmp do
49554: LD_ADDR_VAR 0 3
49558: PUSH
49559: LD_VAR 0 4
49563: PUSH
49564: FOR_IN
49565: IFFALSE 49672
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
49567: LD_STRING [
49569: PUSH
49570: LD_VAR 0 3
49574: PPUSH
49575: CALL_OW 266
49579: STR
49580: PUSH
49581: LD_STRING , 
49583: STR
49584: PUSH
49585: LD_VAR 0 3
49589: PPUSH
49590: CALL_OW 250
49594: STR
49595: PUSH
49596: LD_STRING , 
49598: STR
49599: PUSH
49600: LD_VAR 0 3
49604: PPUSH
49605: CALL_OW 251
49609: STR
49610: PUSH
49611: LD_STRING , 
49613: STR
49614: PUSH
49615: LD_VAR 0 3
49619: PPUSH
49620: CALL_OW 254
49624: STR
49625: PUSH
49626: LD_STRING , 
49628: STR
49629: PUSH
49630: LD_VAR 0 3
49634: PPUSH
49635: LD_INT 1
49637: PPUSH
49638: CALL_OW 268
49642: STR
49643: PUSH
49644: LD_STRING , 
49646: STR
49647: PUSH
49648: LD_VAR 0 3
49652: PPUSH
49653: LD_INT 2
49655: PPUSH
49656: CALL_OW 268
49660: STR
49661: PUSH
49662: LD_STRING ],
49664: STR
49665: PPUSH
49666: CALL_OW 561
// end ;
49670: GO 49564
49672: POP
49673: POP
// AddToLog ( ]; ) ;
49674: LD_STRING ];
49676: PPUSH
49677: CALL_OW 561
// end ;
49681: LD_VAR 0 2
49685: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
49686: LD_INT 0
49688: PPUSH
49689: PPUSH
49690: PPUSH
49691: PPUSH
49692: PPUSH
// if not area or not rate or not max then
49693: LD_VAR 0 1
49697: NOT
49698: PUSH
49699: LD_VAR 0 2
49703: NOT
49704: OR
49705: PUSH
49706: LD_VAR 0 4
49710: NOT
49711: OR
49712: IFFALSE 49716
// exit ;
49714: GO 49908
// while 1 do
49716: LD_INT 1
49718: IFFALSE 49908
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
49720: LD_ADDR_VAR 0 9
49724: PUSH
49725: LD_VAR 0 1
49729: PPUSH
49730: LD_INT 1
49732: PPUSH
49733: CALL_OW 287
49737: PUSH
49738: LD_INT 10
49740: MUL
49741: ST_TO_ADDR
// r := rate / 10 ;
49742: LD_ADDR_VAR 0 7
49746: PUSH
49747: LD_VAR 0 2
49751: PUSH
49752: LD_INT 10
49754: DIVREAL
49755: ST_TO_ADDR
// time := 1 1$00 ;
49756: LD_ADDR_VAR 0 8
49760: PUSH
49761: LD_INT 2100
49763: ST_TO_ADDR
// if amount < min then
49764: LD_VAR 0 9
49768: PUSH
49769: LD_VAR 0 3
49773: LESS
49774: IFFALSE 49792
// r := r * 2 else
49776: LD_ADDR_VAR 0 7
49780: PUSH
49781: LD_VAR 0 7
49785: PUSH
49786: LD_INT 2
49788: MUL
49789: ST_TO_ADDR
49790: GO 49818
// if amount > max then
49792: LD_VAR 0 9
49796: PUSH
49797: LD_VAR 0 4
49801: GREATER
49802: IFFALSE 49818
// r := r / 2 ;
49804: LD_ADDR_VAR 0 7
49808: PUSH
49809: LD_VAR 0 7
49813: PUSH
49814: LD_INT 2
49816: DIVREAL
49817: ST_TO_ADDR
// time := time / r ;
49818: LD_ADDR_VAR 0 8
49822: PUSH
49823: LD_VAR 0 8
49827: PUSH
49828: LD_VAR 0 7
49832: DIVREAL
49833: ST_TO_ADDR
// if time < 0 then
49834: LD_VAR 0 8
49838: PUSH
49839: LD_INT 0
49841: LESS
49842: IFFALSE 49859
// time := time * - 1 ;
49844: LD_ADDR_VAR 0 8
49848: PUSH
49849: LD_VAR 0 8
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: MUL
49858: ST_TO_ADDR
// wait ( time ) ;
49859: LD_VAR 0 8
49863: PPUSH
49864: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
49868: LD_INT 35
49870: PPUSH
49871: LD_INT 875
49873: PPUSH
49874: CALL_OW 12
49878: PPUSH
49879: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
49883: LD_INT 1
49885: PPUSH
49886: LD_INT 5
49888: PPUSH
49889: CALL_OW 12
49893: PPUSH
49894: LD_VAR 0 1
49898: PPUSH
49899: LD_INT 1
49901: PPUSH
49902: CALL_OW 55
// end ;
49906: GO 49716
// end ;
49908: LD_VAR 0 5
49912: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
49913: LD_INT 0
49915: PPUSH
49916: PPUSH
49917: PPUSH
49918: PPUSH
49919: PPUSH
49920: PPUSH
49921: PPUSH
49922: PPUSH
// if not turrets or not factories then
49923: LD_VAR 0 1
49927: NOT
49928: PUSH
49929: LD_VAR 0 2
49933: NOT
49934: OR
49935: IFFALSE 49939
// exit ;
49937: GO 50246
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
49939: LD_ADDR_VAR 0 10
49943: PUSH
49944: LD_INT 5
49946: PUSH
49947: LD_INT 6
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 2
49956: PUSH
49957: LD_INT 4
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 3
49966: PUSH
49967: LD_INT 5
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 24
49981: PUSH
49982: LD_INT 25
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 23
49991: PUSH
49992: LD_INT 27
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 42
50005: PUSH
50006: LD_INT 43
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 44
50015: PUSH
50016: LD_INT 46
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 45
50025: PUSH
50026: LD_INT 47
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: LIST
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: LIST
50042: ST_TO_ADDR
// result := [ ] ;
50043: LD_ADDR_VAR 0 3
50047: PUSH
50048: EMPTY
50049: ST_TO_ADDR
// for i in turrets do
50050: LD_ADDR_VAR 0 4
50054: PUSH
50055: LD_VAR 0 1
50059: PUSH
50060: FOR_IN
50061: IFFALSE 50244
// begin nat := GetNation ( i ) ;
50063: LD_ADDR_VAR 0 7
50067: PUSH
50068: LD_VAR 0 4
50072: PPUSH
50073: CALL_OW 248
50077: ST_TO_ADDR
// weapon := 0 ;
50078: LD_ADDR_VAR 0 8
50082: PUSH
50083: LD_INT 0
50085: ST_TO_ADDR
// if not nat then
50086: LD_VAR 0 7
50090: NOT
50091: IFFALSE 50095
// continue ;
50093: GO 50060
// for j in list [ nat ] do
50095: LD_ADDR_VAR 0 5
50099: PUSH
50100: LD_VAR 0 10
50104: PUSH
50105: LD_VAR 0 7
50109: ARRAY
50110: PUSH
50111: FOR_IN
50112: IFFALSE 50153
// if GetBWeapon ( i ) = j [ 1 ] then
50114: LD_VAR 0 4
50118: PPUSH
50119: CALL_OW 269
50123: PUSH
50124: LD_VAR 0 5
50128: PUSH
50129: LD_INT 1
50131: ARRAY
50132: EQUAL
50133: IFFALSE 50151
// begin weapon := j [ 2 ] ;
50135: LD_ADDR_VAR 0 8
50139: PUSH
50140: LD_VAR 0 5
50144: PUSH
50145: LD_INT 2
50147: ARRAY
50148: ST_TO_ADDR
// break ;
50149: GO 50153
// end ;
50151: GO 50111
50153: POP
50154: POP
// if not weapon then
50155: LD_VAR 0 8
50159: NOT
50160: IFFALSE 50164
// continue ;
50162: GO 50060
// for k in factories do
50164: LD_ADDR_VAR 0 6
50168: PUSH
50169: LD_VAR 0 2
50173: PUSH
50174: FOR_IN
50175: IFFALSE 50240
// begin weapons := AvailableWeaponList ( k ) ;
50177: LD_ADDR_VAR 0 9
50181: PUSH
50182: LD_VAR 0 6
50186: PPUSH
50187: CALL_OW 478
50191: ST_TO_ADDR
// if not weapons then
50192: LD_VAR 0 9
50196: NOT
50197: IFFALSE 50201
// continue ;
50199: GO 50174
// if weapon in weapons then
50201: LD_VAR 0 8
50205: PUSH
50206: LD_VAR 0 9
50210: IN
50211: IFFALSE 50238
// begin result := [ i , weapon ] ;
50213: LD_ADDR_VAR 0 3
50217: PUSH
50218: LD_VAR 0 4
50222: PUSH
50223: LD_VAR 0 8
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: ST_TO_ADDR
// exit ;
50232: POP
50233: POP
50234: POP
50235: POP
50236: GO 50246
// end ; end ;
50238: GO 50174
50240: POP
50241: POP
// end ;
50242: GO 50060
50244: POP
50245: POP
// end ;
50246: LD_VAR 0 3
50250: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
50251: LD_INT 0
50253: PPUSH
// if not side or side > 8 then
50254: LD_VAR 0 3
50258: NOT
50259: PUSH
50260: LD_VAR 0 3
50264: PUSH
50265: LD_INT 8
50267: GREATER
50268: OR
50269: IFFALSE 50273
// exit ;
50271: GO 50332
// if not range then
50273: LD_VAR 0 4
50277: NOT
50278: IFFALSE 50289
// range := - 12 ;
50280: LD_ADDR_VAR 0 4
50284: PUSH
50285: LD_INT 12
50287: NEG
50288: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
50289: LD_VAR 0 1
50293: PPUSH
50294: LD_VAR 0 2
50298: PPUSH
50299: LD_VAR 0 3
50303: PPUSH
50304: LD_VAR 0 4
50308: PPUSH
50309: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
50313: LD_VAR 0 1
50317: PPUSH
50318: LD_VAR 0 2
50322: PPUSH
50323: LD_VAR 0 3
50327: PPUSH
50328: CALL_OW 331
// end ;
50332: LD_VAR 0 5
50336: RET
// export function Video ( mode ) ; begin
50337: LD_INT 0
50339: PPUSH
// ingame_video = mode ;
50340: LD_ADDR_OWVAR 52
50344: PUSH
50345: LD_VAR 0 1
50349: ST_TO_ADDR
// interface_hidden = mode ;
50350: LD_ADDR_OWVAR 54
50354: PUSH
50355: LD_VAR 0 1
50359: ST_TO_ADDR
// end ;
50360: LD_VAR 0 2
50364: RET
// export function Join ( array , element ) ; begin
50365: LD_INT 0
50367: PPUSH
// result := Replace ( array , array + 1 , element ) ;
50368: LD_ADDR_VAR 0 3
50372: PUSH
50373: LD_VAR 0 1
50377: PPUSH
50378: LD_VAR 0 1
50382: PUSH
50383: LD_INT 1
50385: PLUS
50386: PPUSH
50387: LD_VAR 0 2
50391: PPUSH
50392: CALL_OW 1
50396: ST_TO_ADDR
// end ;
50397: LD_VAR 0 3
50401: RET
// export function JoinUnion ( array , element ) ; begin
50402: LD_INT 0
50404: PPUSH
// result := array union element ;
50405: LD_ADDR_VAR 0 3
50409: PUSH
50410: LD_VAR 0 1
50414: PUSH
50415: LD_VAR 0 2
50419: UNION
50420: ST_TO_ADDR
// end ;
50421: LD_VAR 0 3
50425: RET
// export function GetBehemoths ( side ) ; begin
50426: LD_INT 0
50428: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
50429: LD_ADDR_VAR 0 2
50433: PUSH
50434: LD_INT 22
50436: PUSH
50437: LD_VAR 0 1
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 31
50448: PUSH
50449: LD_INT 25
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PPUSH
50460: CALL_OW 69
50464: ST_TO_ADDR
// end ;
50465: LD_VAR 0 2
50469: RET
// export function Shuffle ( array ) ; var i , index ; begin
50470: LD_INT 0
50472: PPUSH
50473: PPUSH
50474: PPUSH
// result := [ ] ;
50475: LD_ADDR_VAR 0 2
50479: PUSH
50480: EMPTY
50481: ST_TO_ADDR
// if not array then
50482: LD_VAR 0 1
50486: NOT
50487: IFFALSE 50491
// exit ;
50489: GO 50590
// Randomize ;
50491: CALL_OW 10
// for i = array downto 1 do
50495: LD_ADDR_VAR 0 3
50499: PUSH
50500: DOUBLE
50501: LD_VAR 0 1
50505: INC
50506: ST_TO_ADDR
50507: LD_INT 1
50509: PUSH
50510: FOR_DOWNTO
50511: IFFALSE 50588
// begin index := rand ( 1 , array ) ;
50513: LD_ADDR_VAR 0 4
50517: PUSH
50518: LD_INT 1
50520: PPUSH
50521: LD_VAR 0 1
50525: PPUSH
50526: CALL_OW 12
50530: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
50531: LD_ADDR_VAR 0 2
50535: PUSH
50536: LD_VAR 0 2
50540: PPUSH
50541: LD_VAR 0 2
50545: PUSH
50546: LD_INT 1
50548: PLUS
50549: PPUSH
50550: LD_VAR 0 1
50554: PUSH
50555: LD_VAR 0 4
50559: ARRAY
50560: PPUSH
50561: CALL_OW 2
50565: ST_TO_ADDR
// array := Delete ( array , index ) ;
50566: LD_ADDR_VAR 0 1
50570: PUSH
50571: LD_VAR 0 1
50575: PPUSH
50576: LD_VAR 0 4
50580: PPUSH
50581: CALL_OW 3
50585: ST_TO_ADDR
// end ;
50586: GO 50510
50588: POP
50589: POP
// end ;
50590: LD_VAR 0 2
50594: RET
// export function GetBaseMaterials ( base ) ; begin
50595: LD_INT 0
50597: PPUSH
// result := [ 0 , 0 , 0 ] ;
50598: LD_ADDR_VAR 0 2
50602: PUSH
50603: LD_INT 0
50605: PUSH
50606: LD_INT 0
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: LIST
50616: ST_TO_ADDR
// if not base then
50617: LD_VAR 0 1
50621: NOT
50622: IFFALSE 50626
// exit ;
50624: GO 50675
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
50626: LD_ADDR_VAR 0 2
50630: PUSH
50631: LD_VAR 0 1
50635: PPUSH
50636: LD_INT 1
50638: PPUSH
50639: CALL_OW 275
50643: PUSH
50644: LD_VAR 0 1
50648: PPUSH
50649: LD_INT 2
50651: PPUSH
50652: CALL_OW 275
50656: PUSH
50657: LD_VAR 0 1
50661: PPUSH
50662: LD_INT 3
50664: PPUSH
50665: CALL_OW 275
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: LIST
50674: ST_TO_ADDR
// end ;
50675: LD_VAR 0 2
50679: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
50680: LD_INT 0
50682: PPUSH
50683: PPUSH
// result := array ;
50684: LD_ADDR_VAR 0 3
50688: PUSH
50689: LD_VAR 0 1
50693: ST_TO_ADDR
// if size > 0 then
50694: LD_VAR 0 2
50698: PUSH
50699: LD_INT 0
50701: GREATER
50702: IFFALSE 50748
// for i := array downto size do
50704: LD_ADDR_VAR 0 4
50708: PUSH
50709: DOUBLE
50710: LD_VAR 0 1
50714: INC
50715: ST_TO_ADDR
50716: LD_VAR 0 2
50720: PUSH
50721: FOR_DOWNTO
50722: IFFALSE 50746
// result := Delete ( result , result ) ;
50724: LD_ADDR_VAR 0 3
50728: PUSH
50729: LD_VAR 0 3
50733: PPUSH
50734: LD_VAR 0 3
50738: PPUSH
50739: CALL_OW 3
50743: ST_TO_ADDR
50744: GO 50721
50746: POP
50747: POP
// end ;
50748: LD_VAR 0 3
50752: RET
// export function ComExit ( unit ) ; var tmp ; begin
50753: LD_INT 0
50755: PPUSH
50756: PPUSH
// if not IsInUnit ( unit ) then
50757: LD_VAR 0 1
50761: PPUSH
50762: CALL_OW 310
50766: NOT
50767: IFFALSE 50771
// exit ;
50769: GO 50831
// tmp := IsInUnit ( unit ) ;
50771: LD_ADDR_VAR 0 3
50775: PUSH
50776: LD_VAR 0 1
50780: PPUSH
50781: CALL_OW 310
50785: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
50786: LD_VAR 0 3
50790: PPUSH
50791: CALL_OW 247
50795: PUSH
50796: LD_INT 2
50798: EQUAL
50799: IFFALSE 50812
// ComExitVehicle ( unit ) else
50801: LD_VAR 0 1
50805: PPUSH
50806: CALL_OW 121
50810: GO 50821
// ComExitBuilding ( unit ) ;
50812: LD_VAR 0 1
50816: PPUSH
50817: CALL_OW 122
// result := tmp ;
50821: LD_ADDR_VAR 0 2
50825: PUSH
50826: LD_VAR 0 3
50830: ST_TO_ADDR
// end ;
50831: LD_VAR 0 2
50835: RET
// export function ComExitAll ( units ) ; var i ; begin
50836: LD_INT 0
50838: PPUSH
50839: PPUSH
// if not units then
50840: LD_VAR 0 1
50844: NOT
50845: IFFALSE 50849
// exit ;
50847: GO 50875
// for i in units do
50849: LD_ADDR_VAR 0 3
50853: PUSH
50854: LD_VAR 0 1
50858: PUSH
50859: FOR_IN
50860: IFFALSE 50873
// ComExit ( i ) ;
50862: LD_VAR 0 3
50866: PPUSH
50867: CALL 50753 0 1
50871: GO 50859
50873: POP
50874: POP
// end ;
50875: LD_VAR 0 2
50879: RET
// export function ResetHc ; begin
50880: LD_INT 0
50882: PPUSH
// InitHc ;
50883: CALL_OW 19
// hc_importance := 0 ;
50887: LD_ADDR_OWVAR 32
50891: PUSH
50892: LD_INT 0
50894: ST_TO_ADDR
// end ;
50895: LD_VAR 0 1
50899: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
50900: LD_INT 0
50902: PPUSH
50903: PPUSH
50904: PPUSH
// _x := ( x1 + x2 ) div 2 ;
50905: LD_ADDR_VAR 0 6
50909: PUSH
50910: LD_VAR 0 1
50914: PUSH
50915: LD_VAR 0 3
50919: PLUS
50920: PUSH
50921: LD_INT 2
50923: DIV
50924: ST_TO_ADDR
// if _x < 0 then
50925: LD_VAR 0 6
50929: PUSH
50930: LD_INT 0
50932: LESS
50933: IFFALSE 50950
// _x := _x * - 1 ;
50935: LD_ADDR_VAR 0 6
50939: PUSH
50940: LD_VAR 0 6
50944: PUSH
50945: LD_INT 1
50947: NEG
50948: MUL
50949: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
50950: LD_ADDR_VAR 0 7
50954: PUSH
50955: LD_VAR 0 2
50959: PUSH
50960: LD_VAR 0 4
50964: PLUS
50965: PUSH
50966: LD_INT 2
50968: DIV
50969: ST_TO_ADDR
// if _y < 0 then
50970: LD_VAR 0 7
50974: PUSH
50975: LD_INT 0
50977: LESS
50978: IFFALSE 50995
// _y := _y * - 1 ;
50980: LD_ADDR_VAR 0 7
50984: PUSH
50985: LD_VAR 0 7
50989: PUSH
50990: LD_INT 1
50992: NEG
50993: MUL
50994: ST_TO_ADDR
// result := [ _x , _y ] ;
50995: LD_ADDR_VAR 0 5
50999: PUSH
51000: LD_VAR 0 6
51004: PUSH
51005: LD_VAR 0 7
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: ST_TO_ADDR
// end ;
51014: LD_VAR 0 5
51018: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
51019: LD_INT 0
51021: PPUSH
51022: PPUSH
51023: PPUSH
51024: PPUSH
// task := GetTaskList ( unit ) ;
51025: LD_ADDR_VAR 0 7
51029: PUSH
51030: LD_VAR 0 1
51034: PPUSH
51035: CALL_OW 437
51039: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
51040: LD_VAR 0 7
51044: NOT
51045: PUSH
51046: LD_VAR 0 1
51050: PPUSH
51051: LD_VAR 0 2
51055: PPUSH
51056: CALL_OW 308
51060: NOT
51061: AND
51062: IFFALSE 51066
// exit ;
51064: GO 51184
// if IsInArea ( unit , area ) then
51066: LD_VAR 0 1
51070: PPUSH
51071: LD_VAR 0 2
51075: PPUSH
51076: CALL_OW 308
51080: IFFALSE 51098
// begin ComMoveToArea ( unit , goAway ) ;
51082: LD_VAR 0 1
51086: PPUSH
51087: LD_VAR 0 3
51091: PPUSH
51092: CALL_OW 113
// exit ;
51096: GO 51184
// end ; if task [ 1 ] [ 1 ] <> M then
51098: LD_VAR 0 7
51102: PUSH
51103: LD_INT 1
51105: ARRAY
51106: PUSH
51107: LD_INT 1
51109: ARRAY
51110: PUSH
51111: LD_STRING M
51113: NONEQUAL
51114: IFFALSE 51118
// exit ;
51116: GO 51184
// x := task [ 1 ] [ 2 ] ;
51118: LD_ADDR_VAR 0 5
51122: PUSH
51123: LD_VAR 0 7
51127: PUSH
51128: LD_INT 1
51130: ARRAY
51131: PUSH
51132: LD_INT 2
51134: ARRAY
51135: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
51136: LD_ADDR_VAR 0 6
51140: PUSH
51141: LD_VAR 0 7
51145: PUSH
51146: LD_INT 1
51148: ARRAY
51149: PUSH
51150: LD_INT 3
51152: ARRAY
51153: ST_TO_ADDR
// if InArea ( x , y , area ) then
51154: LD_VAR 0 5
51158: PPUSH
51159: LD_VAR 0 6
51163: PPUSH
51164: LD_VAR 0 2
51168: PPUSH
51169: CALL_OW 309
51173: IFFALSE 51184
// ComStop ( unit ) ;
51175: LD_VAR 0 1
51179: PPUSH
51180: CALL_OW 141
// end ;
51184: LD_VAR 0 4
51188: RET
// export function Abs ( value ) ; begin
51189: LD_INT 0
51191: PPUSH
// result := value ;
51192: LD_ADDR_VAR 0 2
51196: PUSH
51197: LD_VAR 0 1
51201: ST_TO_ADDR
// if value < 0 then
51202: LD_VAR 0 1
51206: PUSH
51207: LD_INT 0
51209: LESS
51210: IFFALSE 51227
// result := value * - 1 ;
51212: LD_ADDR_VAR 0 2
51216: PUSH
51217: LD_VAR 0 1
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: MUL
51226: ST_TO_ADDR
// end ;
51227: LD_VAR 0 2
51231: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
51232: LD_INT 0
51234: PPUSH
51235: PPUSH
51236: PPUSH
51237: PPUSH
51238: PPUSH
51239: PPUSH
51240: PPUSH
51241: PPUSH
// if not unit or not building then
51242: LD_VAR 0 1
51246: NOT
51247: PUSH
51248: LD_VAR 0 2
51252: NOT
51253: OR
51254: IFFALSE 51258
// exit ;
51256: GO 51484
// x := GetX ( building ) ;
51258: LD_ADDR_VAR 0 4
51262: PUSH
51263: LD_VAR 0 2
51267: PPUSH
51268: CALL_OW 250
51272: ST_TO_ADDR
// y := GetY ( building ) ;
51273: LD_ADDR_VAR 0 6
51277: PUSH
51278: LD_VAR 0 2
51282: PPUSH
51283: CALL_OW 251
51287: ST_TO_ADDR
// d := GetDir ( building ) ;
51288: LD_ADDR_VAR 0 8
51292: PUSH
51293: LD_VAR 0 2
51297: PPUSH
51298: CALL_OW 254
51302: ST_TO_ADDR
// r := 4 ;
51303: LD_ADDR_VAR 0 9
51307: PUSH
51308: LD_INT 4
51310: ST_TO_ADDR
// for i := 1 to 5 do
51311: LD_ADDR_VAR 0 10
51315: PUSH
51316: DOUBLE
51317: LD_INT 1
51319: DEC
51320: ST_TO_ADDR
51321: LD_INT 5
51323: PUSH
51324: FOR_TO
51325: IFFALSE 51482
// begin _x := ShiftX ( x , d , r + i ) ;
51327: LD_ADDR_VAR 0 5
51331: PUSH
51332: LD_VAR 0 4
51336: PPUSH
51337: LD_VAR 0 8
51341: PPUSH
51342: LD_VAR 0 9
51346: PUSH
51347: LD_VAR 0 10
51351: PLUS
51352: PPUSH
51353: CALL_OW 272
51357: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
51358: LD_ADDR_VAR 0 7
51362: PUSH
51363: LD_VAR 0 6
51367: PPUSH
51368: LD_VAR 0 8
51372: PPUSH
51373: LD_VAR 0 9
51377: PUSH
51378: LD_VAR 0 10
51382: PLUS
51383: PPUSH
51384: CALL_OW 273
51388: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
51389: LD_VAR 0 5
51393: PPUSH
51394: LD_VAR 0 7
51398: PPUSH
51399: CALL_OW 488
51403: PUSH
51404: LD_VAR 0 5
51408: PPUSH
51409: LD_VAR 0 7
51413: PPUSH
51414: CALL_OW 428
51418: PPUSH
51419: CALL_OW 247
51423: PUSH
51424: LD_INT 3
51426: PUSH
51427: LD_INT 2
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: IN
51434: NOT
51435: AND
51436: IFFALSE 51480
// begin ComMoveXY ( unit , _x , _y ) ;
51438: LD_VAR 0 1
51442: PPUSH
51443: LD_VAR 0 5
51447: PPUSH
51448: LD_VAR 0 7
51452: PPUSH
51453: CALL_OW 111
// result := [ _x , _y ] ;
51457: LD_ADDR_VAR 0 3
51461: PUSH
51462: LD_VAR 0 5
51466: PUSH
51467: LD_VAR 0 7
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: ST_TO_ADDR
// exit ;
51476: POP
51477: POP
51478: GO 51484
// end ; end ;
51480: GO 51324
51482: POP
51483: POP
// end ;
51484: LD_VAR 0 3
51488: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
51489: LD_INT 0
51491: PPUSH
51492: PPUSH
51493: PPUSH
// result := 0 ;
51494: LD_ADDR_VAR 0 3
51498: PUSH
51499: LD_INT 0
51501: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
51502: LD_VAR 0 1
51506: PUSH
51507: LD_INT 0
51509: LESS
51510: PUSH
51511: LD_VAR 0 1
51515: PUSH
51516: LD_INT 8
51518: GREATER
51519: OR
51520: PUSH
51521: LD_VAR 0 2
51525: PUSH
51526: LD_INT 0
51528: LESS
51529: OR
51530: PUSH
51531: LD_VAR 0 2
51535: PUSH
51536: LD_INT 8
51538: GREATER
51539: OR
51540: IFFALSE 51544
// exit ;
51542: GO 51619
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
51544: LD_ADDR_VAR 0 4
51548: PUSH
51549: LD_INT 22
51551: PUSH
51552: LD_VAR 0 2
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PPUSH
51561: CALL_OW 69
51565: PUSH
51566: FOR_IN
51567: IFFALSE 51617
// begin un := UnitShoot ( i ) ;
51569: LD_ADDR_VAR 0 5
51573: PUSH
51574: LD_VAR 0 4
51578: PPUSH
51579: CALL_OW 504
51583: ST_TO_ADDR
// if GetSide ( un ) = side1 then
51584: LD_VAR 0 5
51588: PPUSH
51589: CALL_OW 255
51593: PUSH
51594: LD_VAR 0 1
51598: EQUAL
51599: IFFALSE 51615
// begin result := un ;
51601: LD_ADDR_VAR 0 3
51605: PUSH
51606: LD_VAR 0 5
51610: ST_TO_ADDR
// exit ;
51611: POP
51612: POP
51613: GO 51619
// end ; end ;
51615: GO 51566
51617: POP
51618: POP
// end ;
51619: LD_VAR 0 3
51623: RET
// export function GetCargoBay ( units ) ; begin
51624: LD_INT 0
51626: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
51627: LD_ADDR_VAR 0 2
51631: PUSH
51632: LD_VAR 0 1
51636: PPUSH
51637: LD_INT 2
51639: PUSH
51640: LD_INT 34
51642: PUSH
51643: LD_INT 12
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 34
51652: PUSH
51653: LD_INT 51
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 34
51662: PUSH
51663: LD_INT 32
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 34
51672: PUSH
51673: LD_EXP 97
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: PPUSH
51689: CALL_OW 72
51693: ST_TO_ADDR
// end ;
51694: LD_VAR 0 2
51698: RET
// export function Negate ( value ) ; begin
51699: LD_INT 0
51701: PPUSH
// result := not value ;
51702: LD_ADDR_VAR 0 2
51706: PUSH
51707: LD_VAR 0 1
51711: NOT
51712: ST_TO_ADDR
// end ;
51713: LD_VAR 0 2
51717: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
51718: LD_INT 0
51720: PPUSH
// if x1 = x2 then
51721: LD_VAR 0 1
51725: PUSH
51726: LD_VAR 0 3
51730: EQUAL
51731: IFFALSE 51765
// begin if y1 > y2 then
51733: LD_VAR 0 2
51737: PUSH
51738: LD_VAR 0 4
51742: GREATER
51743: IFFALSE 51755
// result := 0 else
51745: LD_ADDR_VAR 0 5
51749: PUSH
51750: LD_INT 0
51752: ST_TO_ADDR
51753: GO 51763
// result := 3 ;
51755: LD_ADDR_VAR 0 5
51759: PUSH
51760: LD_INT 3
51762: ST_TO_ADDR
// exit ;
51763: GO 51851
// end ; if y1 = y2 then
51765: LD_VAR 0 2
51769: PUSH
51770: LD_VAR 0 4
51774: EQUAL
51775: IFFALSE 51809
// begin if x1 > x2 then
51777: LD_VAR 0 1
51781: PUSH
51782: LD_VAR 0 3
51786: GREATER
51787: IFFALSE 51799
// result := 1 else
51789: LD_ADDR_VAR 0 5
51793: PUSH
51794: LD_INT 1
51796: ST_TO_ADDR
51797: GO 51807
// result := 4 ;
51799: LD_ADDR_VAR 0 5
51803: PUSH
51804: LD_INT 4
51806: ST_TO_ADDR
// exit ;
51807: GO 51851
// end ; if x1 > x2 and y1 > y2 then
51809: LD_VAR 0 1
51813: PUSH
51814: LD_VAR 0 3
51818: GREATER
51819: PUSH
51820: LD_VAR 0 2
51824: PUSH
51825: LD_VAR 0 4
51829: GREATER
51830: AND
51831: IFFALSE 51843
// result := 2 else
51833: LD_ADDR_VAR 0 5
51837: PUSH
51838: LD_INT 2
51840: ST_TO_ADDR
51841: GO 51851
// result := 5 ;
51843: LD_ADDR_VAR 0 5
51847: PUSH
51848: LD_INT 5
51850: ST_TO_ADDR
// end ;
51851: LD_VAR 0 5
51855: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51856: LD_INT 0
51858: PPUSH
51859: PPUSH
// if not driver or not IsInUnit ( driver ) then
51860: LD_VAR 0 1
51864: NOT
51865: PUSH
51866: LD_VAR 0 1
51870: PPUSH
51871: CALL_OW 310
51875: NOT
51876: OR
51877: IFFALSE 51881
// exit ;
51879: GO 51971
// vehicle := IsInUnit ( driver ) ;
51881: LD_ADDR_VAR 0 3
51885: PUSH
51886: LD_VAR 0 1
51890: PPUSH
51891: CALL_OW 310
51895: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51896: LD_VAR 0 1
51900: PPUSH
51901: LD_STRING \
51903: PUSH
51904: LD_INT 0
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: LD_INT 0
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: PUSH
51931: LD_STRING E
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: LD_VAR 0 3
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PPUSH
51967: CALL_OW 446
// end ;
51971: LD_VAR 0 2
51975: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51976: LD_INT 0
51978: PPUSH
51979: PPUSH
// if not driver or not IsInUnit ( driver ) then
51980: LD_VAR 0 1
51984: NOT
51985: PUSH
51986: LD_VAR 0 1
51990: PPUSH
51991: CALL_OW 310
51995: NOT
51996: OR
51997: IFFALSE 52001
// exit ;
51999: GO 52091
// vehicle := IsInUnit ( driver ) ;
52001: LD_ADDR_VAR 0 3
52005: PUSH
52006: LD_VAR 0 1
52010: PPUSH
52011: CALL_OW 310
52015: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
52016: LD_VAR 0 1
52020: PPUSH
52021: LD_STRING \
52023: PUSH
52024: LD_INT 0
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: LD_INT 0
52035: PUSH
52036: LD_INT 0
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: PUSH
52051: LD_STRING E
52053: PUSH
52054: LD_INT 0
52056: PUSH
52057: LD_INT 0
52059: PUSH
52060: LD_VAR 0 3
52064: PUSH
52065: LD_INT 0
52067: PUSH
52068: LD_INT 0
52070: PUSH
52071: LD_INT 0
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PPUSH
52087: CALL_OW 447
// end ;
52091: LD_VAR 0 2
52095: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
52096: LD_INT 0
52098: PPUSH
52099: PPUSH
52100: PPUSH
// tmp := [ ] ;
52101: LD_ADDR_VAR 0 5
52105: PUSH
52106: EMPTY
52107: ST_TO_ADDR
// for i in units do
52108: LD_ADDR_VAR 0 4
52112: PUSH
52113: LD_VAR 0 1
52117: PUSH
52118: FOR_IN
52119: IFFALSE 52157
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
52121: LD_ADDR_VAR 0 5
52125: PUSH
52126: LD_VAR 0 5
52130: PPUSH
52131: LD_VAR 0 5
52135: PUSH
52136: LD_INT 1
52138: PLUS
52139: PPUSH
52140: LD_VAR 0 4
52144: PPUSH
52145: CALL_OW 256
52149: PPUSH
52150: CALL_OW 2
52154: ST_TO_ADDR
52155: GO 52118
52157: POP
52158: POP
// if not tmp then
52159: LD_VAR 0 5
52163: NOT
52164: IFFALSE 52168
// exit ;
52166: GO 52216
// if asc then
52168: LD_VAR 0 2
52172: IFFALSE 52196
// result := SortListByListAsc ( units , tmp ) else
52174: LD_ADDR_VAR 0 3
52178: PUSH
52179: LD_VAR 0 1
52183: PPUSH
52184: LD_VAR 0 5
52188: PPUSH
52189: CALL_OW 76
52193: ST_TO_ADDR
52194: GO 52216
// result := SortListByListDesc ( units , tmp ) ;
52196: LD_ADDR_VAR 0 3
52200: PUSH
52201: LD_VAR 0 1
52205: PPUSH
52206: LD_VAR 0 5
52210: PPUSH
52211: CALL_OW 77
52215: ST_TO_ADDR
// end ;
52216: LD_VAR 0 3
52220: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
52221: LD_INT 0
52223: PPUSH
52224: PPUSH
// task := GetTaskList ( mech ) ;
52225: LD_ADDR_VAR 0 4
52229: PUSH
52230: LD_VAR 0 1
52234: PPUSH
52235: CALL_OW 437
52239: ST_TO_ADDR
// if not task then
52240: LD_VAR 0 4
52244: NOT
52245: IFFALSE 52249
// exit ;
52247: GO 52291
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
52249: LD_ADDR_VAR 0 3
52253: PUSH
52254: LD_VAR 0 4
52258: PUSH
52259: LD_INT 1
52261: ARRAY
52262: PUSH
52263: LD_INT 1
52265: ARRAY
52266: PUSH
52267: LD_STRING r
52269: EQUAL
52270: PUSH
52271: LD_VAR 0 4
52275: PUSH
52276: LD_INT 1
52278: ARRAY
52279: PUSH
52280: LD_INT 4
52282: ARRAY
52283: PUSH
52284: LD_VAR 0 2
52288: EQUAL
52289: AND
52290: ST_TO_ADDR
// end ;
52291: LD_VAR 0 3
52295: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
52296: LD_INT 0
52298: PPUSH
// SetDir ( unit , d ) ;
52299: LD_VAR 0 1
52303: PPUSH
52304: LD_VAR 0 4
52308: PPUSH
52309: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
52313: LD_VAR 0 1
52317: PPUSH
52318: LD_VAR 0 2
52322: PPUSH
52323: LD_VAR 0 3
52327: PPUSH
52328: LD_VAR 0 5
52332: PPUSH
52333: CALL_OW 48
// end ;
52337: LD_VAR 0 6
52341: RET
// export function ToNaturalNumber ( number ) ; begin
52342: LD_INT 0
52344: PPUSH
// result := number div 1 ;
52345: LD_ADDR_VAR 0 2
52349: PUSH
52350: LD_VAR 0 1
52354: PUSH
52355: LD_INT 1
52357: DIV
52358: ST_TO_ADDR
// if number < 0 then
52359: LD_VAR 0 1
52363: PUSH
52364: LD_INT 0
52366: LESS
52367: IFFALSE 52377
// result := 0 ;
52369: LD_ADDR_VAR 0 2
52373: PUSH
52374: LD_INT 0
52376: ST_TO_ADDR
// end ;
52377: LD_VAR 0 2
52381: RET
// export function SortByClass ( units , class ) ; var un ; begin
52382: LD_INT 0
52384: PPUSH
52385: PPUSH
// if not units or not class then
52386: LD_VAR 0 1
52390: NOT
52391: PUSH
52392: LD_VAR 0 2
52396: NOT
52397: OR
52398: IFFALSE 52402
// exit ;
52400: GO 52497
// result := [ ] ;
52402: LD_ADDR_VAR 0 3
52406: PUSH
52407: EMPTY
52408: ST_TO_ADDR
// for un in units do
52409: LD_ADDR_VAR 0 4
52413: PUSH
52414: LD_VAR 0 1
52418: PUSH
52419: FOR_IN
52420: IFFALSE 52495
// if GetClass ( un ) = class then
52422: LD_VAR 0 4
52426: PPUSH
52427: CALL_OW 257
52431: PUSH
52432: LD_VAR 0 2
52436: EQUAL
52437: IFFALSE 52464
// result := Insert ( result , 1 , un ) else
52439: LD_ADDR_VAR 0 3
52443: PUSH
52444: LD_VAR 0 3
52448: PPUSH
52449: LD_INT 1
52451: PPUSH
52452: LD_VAR 0 4
52456: PPUSH
52457: CALL_OW 2
52461: ST_TO_ADDR
52462: GO 52493
// result := Replace ( result , result + 1 , un ) ;
52464: LD_ADDR_VAR 0 3
52468: PUSH
52469: LD_VAR 0 3
52473: PPUSH
52474: LD_VAR 0 3
52478: PUSH
52479: LD_INT 1
52481: PLUS
52482: PPUSH
52483: LD_VAR 0 4
52487: PPUSH
52488: CALL_OW 1
52492: ST_TO_ADDR
52493: GO 52419
52495: POP
52496: POP
// end ; end_of_file
52497: LD_VAR 0 3
52501: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
52502: LD_VAR 0 1
52506: PUSH
52507: LD_INT 200
52509: DOUBLE
52510: GREATEREQUAL
52511: IFFALSE 52519
52513: LD_INT 299
52515: DOUBLE
52516: LESSEQUAL
52517: IFTRUE 52521
52519: GO 52553
52521: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
52522: LD_VAR 0 1
52526: PPUSH
52527: LD_VAR 0 2
52531: PPUSH
52532: LD_VAR 0 3
52536: PPUSH
52537: LD_VAR 0 4
52541: PPUSH
52542: LD_VAR 0 5
52546: PPUSH
52547: CALL 52797 0 5
52551: GO 52630
52553: LD_INT 300
52555: DOUBLE
52556: GREATEREQUAL
52557: IFFALSE 52565
52559: LD_INT 399
52561: DOUBLE
52562: LESSEQUAL
52563: IFTRUE 52567
52565: GO 52629
52567: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
52568: LD_VAR 0 1
52572: PPUSH
52573: LD_VAR 0 2
52577: PPUSH
52578: LD_VAR 0 3
52582: PPUSH
52583: LD_VAR 0 4
52587: PPUSH
52588: LD_VAR 0 5
52592: PPUSH
52593: LD_VAR 0 6
52597: PPUSH
52598: LD_VAR 0 7
52602: PPUSH
52603: LD_VAR 0 8
52607: PPUSH
52608: LD_VAR 0 9
52612: PPUSH
52613: LD_VAR 0 10
52617: PPUSH
52618: LD_VAR 0 11
52622: PPUSH
52623: CALL 67872 0 11
52627: GO 52630
52629: POP
// end ;
52630: PPOPN 11
52632: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
52633: LD_VAR 0 1
52637: PPUSH
52638: LD_VAR 0 2
52642: PPUSH
52643: LD_VAR 0 3
52647: PPUSH
52648: LD_VAR 0 4
52652: PPUSH
52653: LD_VAR 0 5
52657: PPUSH
52658: CALL 52779 0 5
// end ; end_of_file
52662: PPOPN 5
52664: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
52665: LD_INT 0
52667: PPUSH
52668: PPUSH
52669: PPUSH
52670: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
52671: LD_VAR 0 1
52675: PPUSH
52676: CALL_OW 264
52680: PUSH
52681: LD_EXP 100
52685: EQUAL
52686: IFFALSE 52758
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
52688: LD_INT 68
52690: PPUSH
52691: LD_VAR 0 1
52695: PPUSH
52696: CALL_OW 255
52700: PPUSH
52701: CALL_OW 321
52705: PUSH
52706: LD_INT 2
52708: EQUAL
52709: IFFALSE 52721
// eff := 70 else
52711: LD_ADDR_VAR 0 4
52715: PUSH
52716: LD_INT 70
52718: ST_TO_ADDR
52719: GO 52729
// eff := 30 ;
52721: LD_ADDR_VAR 0 4
52725: PUSH
52726: LD_INT 30
52728: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
52729: LD_VAR 0 1
52733: PPUSH
52734: CALL_OW 250
52738: PPUSH
52739: LD_VAR 0 1
52743: PPUSH
52744: CALL_OW 251
52748: PPUSH
52749: LD_VAR 0 4
52753: PPUSH
52754: CALL_OW 495
// end ; end ;
52758: LD_VAR 0 2
52762: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
52763: LD_INT 0
52765: PPUSH
// end ;
52766: LD_VAR 0 4
52770: RET
// export function SOS_Command ( cmd ) ; begin
52771: LD_INT 0
52773: PPUSH
// end ;
52774: LD_VAR 0 2
52778: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
52779: LD_INT 0
52781: PPUSH
// if cmd = 121 then
52782: LD_VAR 0 1
52786: PUSH
52787: LD_INT 121
52789: EQUAL
52790: IFFALSE 52792
// end ;
52792: LD_VAR 0 6
52796: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
52797: LD_INT 0
52799: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
52800: LD_VAR 0 1
52804: PUSH
52805: LD_INT 250
52807: EQUAL
52808: PUSH
52809: LD_VAR 0 2
52813: PPUSH
52814: CALL_OW 264
52818: PUSH
52819: LD_EXP 103
52823: EQUAL
52824: AND
52825: IFFALSE 52846
// MinerPlaceMine ( unit , x , y ) ;
52827: LD_VAR 0 2
52831: PPUSH
52832: LD_VAR 0 4
52836: PPUSH
52837: LD_VAR 0 5
52841: PPUSH
52842: CALL 55195 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
52846: LD_VAR 0 1
52850: PUSH
52851: LD_INT 251
52853: EQUAL
52854: PUSH
52855: LD_VAR 0 2
52859: PPUSH
52860: CALL_OW 264
52864: PUSH
52865: LD_EXP 103
52869: EQUAL
52870: AND
52871: IFFALSE 52892
// MinerDetonateMine ( unit , x , y ) ;
52873: LD_VAR 0 2
52877: PPUSH
52878: LD_VAR 0 4
52882: PPUSH
52883: LD_VAR 0 5
52887: PPUSH
52888: CALL 55472 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
52892: LD_VAR 0 1
52896: PUSH
52897: LD_INT 252
52899: EQUAL
52900: PUSH
52901: LD_VAR 0 2
52905: PPUSH
52906: CALL_OW 264
52910: PUSH
52911: LD_EXP 103
52915: EQUAL
52916: AND
52917: IFFALSE 52938
// MinerCreateMinefield ( unit , x , y ) ;
52919: LD_VAR 0 2
52923: PPUSH
52924: LD_VAR 0 4
52928: PPUSH
52929: LD_VAR 0 5
52933: PPUSH
52934: CALL 55889 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
52938: LD_VAR 0 1
52942: PUSH
52943: LD_INT 253
52945: EQUAL
52946: PUSH
52947: LD_VAR 0 2
52951: PPUSH
52952: CALL_OW 257
52956: PUSH
52957: LD_INT 5
52959: EQUAL
52960: AND
52961: IFFALSE 52982
// ComBinocular ( unit , x , y ) ;
52963: LD_VAR 0 2
52967: PPUSH
52968: LD_VAR 0 4
52972: PPUSH
52973: LD_VAR 0 5
52977: PPUSH
52978: CALL 56260 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
52982: LD_VAR 0 1
52986: PUSH
52987: LD_INT 254
52989: EQUAL
52990: PUSH
52991: LD_VAR 0 2
52995: PPUSH
52996: CALL_OW 264
53000: PUSH
53001: LD_EXP 98
53005: EQUAL
53006: AND
53007: PUSH
53008: LD_VAR 0 3
53012: PPUSH
53013: CALL_OW 263
53017: PUSH
53018: LD_INT 3
53020: EQUAL
53021: AND
53022: IFFALSE 53038
// HackDestroyVehicle ( unit , selectedUnit ) ;
53024: LD_VAR 0 2
53028: PPUSH
53029: LD_VAR 0 3
53033: PPUSH
53034: CALL 54555 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
53038: LD_VAR 0 1
53042: PUSH
53043: LD_INT 255
53045: EQUAL
53046: PUSH
53047: LD_VAR 0 2
53051: PPUSH
53052: CALL_OW 264
53056: PUSH
53057: LD_INT 14
53059: PUSH
53060: LD_INT 53
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: IN
53067: AND
53068: PUSH
53069: LD_VAR 0 4
53073: PPUSH
53074: LD_VAR 0 5
53078: PPUSH
53079: CALL_OW 488
53083: AND
53084: IFFALSE 53108
// CutTreeXYR ( unit , x , y , 12 ) ;
53086: LD_VAR 0 2
53090: PPUSH
53091: LD_VAR 0 4
53095: PPUSH
53096: LD_VAR 0 5
53100: PPUSH
53101: LD_INT 12
53103: PPUSH
53104: CALL 53121 0 4
// end ;
53108: LD_VAR 0 6
53112: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
53113: LD_INT 0
53115: PPUSH
// end ;
53116: LD_VAR 0 4
53120: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
53121: LD_INT 0
53123: PPUSH
53124: PPUSH
53125: PPUSH
53126: PPUSH
53127: PPUSH
53128: PPUSH
53129: PPUSH
53130: PPUSH
53131: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
53132: LD_VAR 0 1
53136: NOT
53137: PUSH
53138: LD_VAR 0 2
53142: PPUSH
53143: LD_VAR 0 3
53147: PPUSH
53148: CALL_OW 488
53152: NOT
53153: OR
53154: PUSH
53155: LD_VAR 0 4
53159: NOT
53160: OR
53161: IFFALSE 53165
// exit ;
53163: GO 53505
// list := [ ] ;
53165: LD_ADDR_VAR 0 13
53169: PUSH
53170: EMPTY
53171: ST_TO_ADDR
// if x - r < 0 then
53172: LD_VAR 0 2
53176: PUSH
53177: LD_VAR 0 4
53181: MINUS
53182: PUSH
53183: LD_INT 0
53185: LESS
53186: IFFALSE 53198
// min_x := 0 else
53188: LD_ADDR_VAR 0 7
53192: PUSH
53193: LD_INT 0
53195: ST_TO_ADDR
53196: GO 53214
// min_x := x - r ;
53198: LD_ADDR_VAR 0 7
53202: PUSH
53203: LD_VAR 0 2
53207: PUSH
53208: LD_VAR 0 4
53212: MINUS
53213: ST_TO_ADDR
// if y - r < 0 then
53214: LD_VAR 0 3
53218: PUSH
53219: LD_VAR 0 4
53223: MINUS
53224: PUSH
53225: LD_INT 0
53227: LESS
53228: IFFALSE 53240
// min_y := 0 else
53230: LD_ADDR_VAR 0 8
53234: PUSH
53235: LD_INT 0
53237: ST_TO_ADDR
53238: GO 53256
// min_y := y - r ;
53240: LD_ADDR_VAR 0 8
53244: PUSH
53245: LD_VAR 0 3
53249: PUSH
53250: LD_VAR 0 4
53254: MINUS
53255: ST_TO_ADDR
// max_x := x + r ;
53256: LD_ADDR_VAR 0 9
53260: PUSH
53261: LD_VAR 0 2
53265: PUSH
53266: LD_VAR 0 4
53270: PLUS
53271: ST_TO_ADDR
// max_y := y + r ;
53272: LD_ADDR_VAR 0 10
53276: PUSH
53277: LD_VAR 0 3
53281: PUSH
53282: LD_VAR 0 4
53286: PLUS
53287: ST_TO_ADDR
// for _x = min_x to max_x do
53288: LD_ADDR_VAR 0 11
53292: PUSH
53293: DOUBLE
53294: LD_VAR 0 7
53298: DEC
53299: ST_TO_ADDR
53300: LD_VAR 0 9
53304: PUSH
53305: FOR_TO
53306: IFFALSE 53423
// for _y = min_y to max_y do
53308: LD_ADDR_VAR 0 12
53312: PUSH
53313: DOUBLE
53314: LD_VAR 0 8
53318: DEC
53319: ST_TO_ADDR
53320: LD_VAR 0 10
53324: PUSH
53325: FOR_TO
53326: IFFALSE 53419
// begin if not ValidHex ( _x , _y ) then
53328: LD_VAR 0 11
53332: PPUSH
53333: LD_VAR 0 12
53337: PPUSH
53338: CALL_OW 488
53342: NOT
53343: IFFALSE 53347
// continue ;
53345: GO 53325
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
53347: LD_VAR 0 11
53351: PPUSH
53352: LD_VAR 0 12
53356: PPUSH
53357: CALL_OW 351
53361: PUSH
53362: LD_VAR 0 11
53366: PPUSH
53367: LD_VAR 0 12
53371: PPUSH
53372: CALL_OW 554
53376: AND
53377: IFFALSE 53417
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
53379: LD_ADDR_VAR 0 13
53383: PUSH
53384: LD_VAR 0 13
53388: PPUSH
53389: LD_VAR 0 13
53393: PUSH
53394: LD_INT 1
53396: PLUS
53397: PPUSH
53398: LD_VAR 0 11
53402: PUSH
53403: LD_VAR 0 12
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PPUSH
53412: CALL_OW 2
53416: ST_TO_ADDR
// end ;
53417: GO 53325
53419: POP
53420: POP
53421: GO 53305
53423: POP
53424: POP
// if not list then
53425: LD_VAR 0 13
53429: NOT
53430: IFFALSE 53434
// exit ;
53432: GO 53505
// for i in list do
53434: LD_ADDR_VAR 0 6
53438: PUSH
53439: LD_VAR 0 13
53443: PUSH
53444: FOR_IN
53445: IFFALSE 53503
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
53447: LD_VAR 0 1
53451: PPUSH
53452: LD_STRING M
53454: PUSH
53455: LD_VAR 0 6
53459: PUSH
53460: LD_INT 1
53462: ARRAY
53463: PUSH
53464: LD_VAR 0 6
53468: PUSH
53469: LD_INT 2
53471: ARRAY
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: LD_INT 0
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: LD_INT 0
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: PUSH
53494: EMPTY
53495: LIST
53496: PPUSH
53497: CALL_OW 447
53501: GO 53444
53503: POP
53504: POP
// end ;
53505: LD_VAR 0 5
53509: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
53510: LD_EXP 31
53514: NOT
53515: IFFALSE 53565
53517: GO 53519
53519: DISABLE
// begin initHack := true ;
53520: LD_ADDR_EXP 31
53524: PUSH
53525: LD_INT 1
53527: ST_TO_ADDR
// hackTanks := [ ] ;
53528: LD_ADDR_EXP 32
53532: PUSH
53533: EMPTY
53534: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
53535: LD_ADDR_EXP 33
53539: PUSH
53540: EMPTY
53541: ST_TO_ADDR
// hackLimit := 3 ;
53542: LD_ADDR_EXP 34
53546: PUSH
53547: LD_INT 3
53549: ST_TO_ADDR
// hackDist := 12 ;
53550: LD_ADDR_EXP 35
53554: PUSH
53555: LD_INT 12
53557: ST_TO_ADDR
// hackCounter := [ ] ;
53558: LD_ADDR_EXP 36
53562: PUSH
53563: EMPTY
53564: ST_TO_ADDR
// end ;
53565: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
53566: LD_EXP 31
53570: PUSH
53571: LD_INT 34
53573: PUSH
53574: LD_EXP 98
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PPUSH
53583: CALL_OW 69
53587: AND
53588: IFFALSE 53843
53590: GO 53592
53592: DISABLE
53593: LD_INT 0
53595: PPUSH
53596: PPUSH
// begin enable ;
53597: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
53598: LD_ADDR_VAR 0 1
53602: PUSH
53603: LD_INT 34
53605: PUSH
53606: LD_EXP 98
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PPUSH
53615: CALL_OW 69
53619: PUSH
53620: FOR_IN
53621: IFFALSE 53841
// begin if not i in hackTanks then
53623: LD_VAR 0 1
53627: PUSH
53628: LD_EXP 32
53632: IN
53633: NOT
53634: IFFALSE 53717
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
53636: LD_ADDR_EXP 32
53640: PUSH
53641: LD_EXP 32
53645: PPUSH
53646: LD_EXP 32
53650: PUSH
53651: LD_INT 1
53653: PLUS
53654: PPUSH
53655: LD_VAR 0 1
53659: PPUSH
53660: CALL_OW 1
53664: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
53665: LD_ADDR_EXP 33
53669: PUSH
53670: LD_EXP 33
53674: PPUSH
53675: LD_EXP 33
53679: PUSH
53680: LD_INT 1
53682: PLUS
53683: PPUSH
53684: EMPTY
53685: PPUSH
53686: CALL_OW 1
53690: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
53691: LD_ADDR_EXP 36
53695: PUSH
53696: LD_EXP 36
53700: PPUSH
53701: LD_EXP 36
53705: PUSH
53706: LD_INT 1
53708: PLUS
53709: PPUSH
53710: EMPTY
53711: PPUSH
53712: CALL_OW 1
53716: ST_TO_ADDR
// end ; if not IsOk ( i ) then
53717: LD_VAR 0 1
53721: PPUSH
53722: CALL_OW 302
53726: NOT
53727: IFFALSE 53740
// begin HackUnlinkAll ( i ) ;
53729: LD_VAR 0 1
53733: PPUSH
53734: CALL 53846 0 1
// continue ;
53738: GO 53620
// end ; HackCheckCapturedStatus ( i ) ;
53740: LD_VAR 0 1
53744: PPUSH
53745: CALL 54289 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
53749: LD_ADDR_VAR 0 2
53753: PUSH
53754: LD_INT 81
53756: PUSH
53757: LD_VAR 0 1
53761: PPUSH
53762: CALL_OW 255
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 33
53773: PUSH
53774: LD_INT 3
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 91
53783: PUSH
53784: LD_VAR 0 1
53788: PUSH
53789: LD_EXP 35
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 50
53801: PUSH
53802: EMPTY
53803: LIST
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: PPUSH
53811: CALL_OW 69
53815: ST_TO_ADDR
// if not tmp then
53816: LD_VAR 0 2
53820: NOT
53821: IFFALSE 53825
// continue ;
53823: GO 53620
// HackLink ( i , tmp ) ;
53825: LD_VAR 0 1
53829: PPUSH
53830: LD_VAR 0 2
53834: PPUSH
53835: CALL 53982 0 2
// end ;
53839: GO 53620
53841: POP
53842: POP
// end ;
53843: PPOPN 2
53845: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
53846: LD_INT 0
53848: PPUSH
53849: PPUSH
53850: PPUSH
// if not hack in hackTanks then
53851: LD_VAR 0 1
53855: PUSH
53856: LD_EXP 32
53860: IN
53861: NOT
53862: IFFALSE 53866
// exit ;
53864: GO 53977
// index := GetElementIndex ( hackTanks , hack ) ;
53866: LD_ADDR_VAR 0 4
53870: PUSH
53871: LD_EXP 32
53875: PPUSH
53876: LD_VAR 0 1
53880: PPUSH
53881: CALL 18399 0 2
53885: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
53886: LD_EXP 33
53890: PUSH
53891: LD_VAR 0 4
53895: ARRAY
53896: IFFALSE 53977
// begin for i in hackTanksCaptured [ index ] do
53898: LD_ADDR_VAR 0 3
53902: PUSH
53903: LD_EXP 33
53907: PUSH
53908: LD_VAR 0 4
53912: ARRAY
53913: PUSH
53914: FOR_IN
53915: IFFALSE 53941
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
53917: LD_VAR 0 3
53921: PUSH
53922: LD_INT 1
53924: ARRAY
53925: PPUSH
53926: LD_VAR 0 3
53930: PUSH
53931: LD_INT 2
53933: ARRAY
53934: PPUSH
53935: CALL_OW 235
53939: GO 53914
53941: POP
53942: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
53943: LD_ADDR_EXP 33
53947: PUSH
53948: LD_EXP 33
53952: PPUSH
53953: LD_VAR 0 4
53957: PPUSH
53958: EMPTY
53959: PPUSH
53960: CALL_OW 1
53964: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
53965: LD_VAR 0 1
53969: PPUSH
53970: LD_INT 0
53972: PPUSH
53973: CALL_OW 505
// end ; end ;
53977: LD_VAR 0 2
53981: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
53982: LD_INT 0
53984: PPUSH
53985: PPUSH
53986: PPUSH
// if not hack in hackTanks or not vehicles then
53987: LD_VAR 0 1
53991: PUSH
53992: LD_EXP 32
53996: IN
53997: NOT
53998: PUSH
53999: LD_VAR 0 2
54003: NOT
54004: OR
54005: IFFALSE 54009
// exit ;
54007: GO 54284
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
54009: LD_ADDR_VAR 0 2
54013: PUSH
54014: LD_VAR 0 1
54018: PPUSH
54019: LD_VAR 0 2
54023: PPUSH
54024: LD_INT 1
54026: PPUSH
54027: LD_INT 1
54029: PPUSH
54030: CALL 19049 0 4
54034: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
54035: LD_ADDR_VAR 0 5
54039: PUSH
54040: LD_EXP 32
54044: PPUSH
54045: LD_VAR 0 1
54049: PPUSH
54050: CALL 18399 0 2
54054: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
54055: LD_EXP 33
54059: PUSH
54060: LD_VAR 0 5
54064: ARRAY
54065: PUSH
54066: LD_EXP 34
54070: LESS
54071: IFFALSE 54260
// begin for i := 1 to vehicles do
54073: LD_ADDR_VAR 0 4
54077: PUSH
54078: DOUBLE
54079: LD_INT 1
54081: DEC
54082: ST_TO_ADDR
54083: LD_VAR 0 2
54087: PUSH
54088: FOR_TO
54089: IFFALSE 54258
// begin if hackTanksCaptured [ index ] = hackLimit then
54091: LD_EXP 33
54095: PUSH
54096: LD_VAR 0 5
54100: ARRAY
54101: PUSH
54102: LD_EXP 34
54106: EQUAL
54107: IFFALSE 54111
// break ;
54109: GO 54258
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
54111: LD_ADDR_EXP 36
54115: PUSH
54116: LD_EXP 36
54120: PPUSH
54121: LD_VAR 0 5
54125: PPUSH
54126: LD_EXP 36
54130: PUSH
54131: LD_VAR 0 5
54135: ARRAY
54136: PUSH
54137: LD_INT 1
54139: PLUS
54140: PPUSH
54141: CALL_OW 1
54145: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
54146: LD_ADDR_EXP 33
54150: PUSH
54151: LD_EXP 33
54155: PPUSH
54156: LD_VAR 0 5
54160: PUSH
54161: LD_EXP 33
54165: PUSH
54166: LD_VAR 0 5
54170: ARRAY
54171: PUSH
54172: LD_INT 1
54174: PLUS
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PPUSH
54180: LD_VAR 0 2
54184: PUSH
54185: LD_VAR 0 4
54189: ARRAY
54190: PUSH
54191: LD_VAR 0 2
54195: PUSH
54196: LD_VAR 0 4
54200: ARRAY
54201: PPUSH
54202: CALL_OW 255
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PPUSH
54211: CALL 18614 0 3
54215: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
54216: LD_VAR 0 2
54220: PUSH
54221: LD_VAR 0 4
54225: ARRAY
54226: PPUSH
54227: LD_VAR 0 1
54231: PPUSH
54232: CALL_OW 255
54236: PPUSH
54237: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
54241: LD_VAR 0 2
54245: PUSH
54246: LD_VAR 0 4
54250: ARRAY
54251: PPUSH
54252: CALL_OW 141
// end ;
54256: GO 54088
54258: POP
54259: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
54260: LD_VAR 0 1
54264: PPUSH
54265: LD_EXP 33
54269: PUSH
54270: LD_VAR 0 5
54274: ARRAY
54275: PUSH
54276: LD_INT 0
54278: PLUS
54279: PPUSH
54280: CALL_OW 505
// end ;
54284: LD_VAR 0 3
54288: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
54289: LD_INT 0
54291: PPUSH
54292: PPUSH
54293: PPUSH
54294: PPUSH
// if not hack in hackTanks then
54295: LD_VAR 0 1
54299: PUSH
54300: LD_EXP 32
54304: IN
54305: NOT
54306: IFFALSE 54310
// exit ;
54308: GO 54550
// index := GetElementIndex ( hackTanks , hack ) ;
54310: LD_ADDR_VAR 0 4
54314: PUSH
54315: LD_EXP 32
54319: PPUSH
54320: LD_VAR 0 1
54324: PPUSH
54325: CALL 18399 0 2
54329: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
54330: LD_ADDR_VAR 0 3
54334: PUSH
54335: DOUBLE
54336: LD_EXP 33
54340: PUSH
54341: LD_VAR 0 4
54345: ARRAY
54346: INC
54347: ST_TO_ADDR
54348: LD_INT 1
54350: PUSH
54351: FOR_DOWNTO
54352: IFFALSE 54524
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
54354: LD_ADDR_VAR 0 5
54358: PUSH
54359: LD_EXP 33
54363: PUSH
54364: LD_VAR 0 4
54368: ARRAY
54369: PUSH
54370: LD_VAR 0 3
54374: ARRAY
54375: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
54376: LD_VAR 0 5
54380: PUSH
54381: LD_INT 1
54383: ARRAY
54384: PPUSH
54385: CALL_OW 302
54389: NOT
54390: PUSH
54391: LD_VAR 0 5
54395: PUSH
54396: LD_INT 1
54398: ARRAY
54399: PPUSH
54400: CALL_OW 255
54404: PUSH
54405: LD_VAR 0 1
54409: PPUSH
54410: CALL_OW 255
54414: NONEQUAL
54415: OR
54416: IFFALSE 54522
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
54418: LD_VAR 0 5
54422: PUSH
54423: LD_INT 1
54425: ARRAY
54426: PPUSH
54427: CALL_OW 305
54431: PUSH
54432: LD_VAR 0 5
54436: PUSH
54437: LD_INT 1
54439: ARRAY
54440: PPUSH
54441: CALL_OW 255
54445: PUSH
54446: LD_VAR 0 1
54450: PPUSH
54451: CALL_OW 255
54455: EQUAL
54456: AND
54457: IFFALSE 54481
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
54459: LD_VAR 0 5
54463: PUSH
54464: LD_INT 1
54466: ARRAY
54467: PPUSH
54468: LD_VAR 0 5
54472: PUSH
54473: LD_INT 2
54475: ARRAY
54476: PPUSH
54477: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
54481: LD_ADDR_EXP 33
54485: PUSH
54486: LD_EXP 33
54490: PPUSH
54491: LD_VAR 0 4
54495: PPUSH
54496: LD_EXP 33
54500: PUSH
54501: LD_VAR 0 4
54505: ARRAY
54506: PPUSH
54507: LD_VAR 0 3
54511: PPUSH
54512: CALL_OW 3
54516: PPUSH
54517: CALL_OW 1
54521: ST_TO_ADDR
// end ; end ;
54522: GO 54351
54524: POP
54525: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
54526: LD_VAR 0 1
54530: PPUSH
54531: LD_EXP 33
54535: PUSH
54536: LD_VAR 0 4
54540: ARRAY
54541: PUSH
54542: LD_INT 0
54544: PLUS
54545: PPUSH
54546: CALL_OW 505
// end ;
54550: LD_VAR 0 2
54554: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
54555: LD_INT 0
54557: PPUSH
54558: PPUSH
54559: PPUSH
54560: PPUSH
// if not hack in hackTanks then
54561: LD_VAR 0 1
54565: PUSH
54566: LD_EXP 32
54570: IN
54571: NOT
54572: IFFALSE 54576
// exit ;
54574: GO 54661
// index := GetElementIndex ( hackTanks , hack ) ;
54576: LD_ADDR_VAR 0 5
54580: PUSH
54581: LD_EXP 32
54585: PPUSH
54586: LD_VAR 0 1
54590: PPUSH
54591: CALL 18399 0 2
54595: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
54596: LD_ADDR_VAR 0 4
54600: PUSH
54601: DOUBLE
54602: LD_INT 1
54604: DEC
54605: ST_TO_ADDR
54606: LD_EXP 33
54610: PUSH
54611: LD_VAR 0 5
54615: ARRAY
54616: PUSH
54617: FOR_TO
54618: IFFALSE 54659
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
54620: LD_EXP 33
54624: PUSH
54625: LD_VAR 0 5
54629: ARRAY
54630: PUSH
54631: LD_VAR 0 4
54635: ARRAY
54636: PUSH
54637: LD_INT 1
54639: ARRAY
54640: PUSH
54641: LD_VAR 0 2
54645: EQUAL
54646: IFFALSE 54657
// KillUnit ( vehicle ) ;
54648: LD_VAR 0 2
54652: PPUSH
54653: CALL_OW 66
54657: GO 54617
54659: POP
54660: POP
// end ;
54661: LD_VAR 0 3
54665: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
54666: LD_EXP 37
54670: NOT
54671: IFFALSE 54706
54673: GO 54675
54675: DISABLE
// begin initMiner := true ;
54676: LD_ADDR_EXP 37
54680: PUSH
54681: LD_INT 1
54683: ST_TO_ADDR
// minersList := [ ] ;
54684: LD_ADDR_EXP 38
54688: PUSH
54689: EMPTY
54690: ST_TO_ADDR
// minerMinesList := [ ] ;
54691: LD_ADDR_EXP 39
54695: PUSH
54696: EMPTY
54697: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
54698: LD_ADDR_EXP 40
54702: PUSH
54703: LD_INT 5
54705: ST_TO_ADDR
// end ;
54706: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
54707: LD_EXP 37
54711: PUSH
54712: LD_INT 34
54714: PUSH
54715: LD_EXP 103
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PPUSH
54724: CALL_OW 69
54728: AND
54729: IFFALSE 55192
54731: GO 54733
54733: DISABLE
54734: LD_INT 0
54736: PPUSH
54737: PPUSH
54738: PPUSH
54739: PPUSH
// begin enable ;
54740: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
54741: LD_ADDR_VAR 0 1
54745: PUSH
54746: LD_INT 34
54748: PUSH
54749: LD_EXP 103
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PPUSH
54758: CALL_OW 69
54762: PUSH
54763: FOR_IN
54764: IFFALSE 54836
// begin if not i in minersList then
54766: LD_VAR 0 1
54770: PUSH
54771: LD_EXP 38
54775: IN
54776: NOT
54777: IFFALSE 54834
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
54779: LD_ADDR_EXP 38
54783: PUSH
54784: LD_EXP 38
54788: PPUSH
54789: LD_EXP 38
54793: PUSH
54794: LD_INT 1
54796: PLUS
54797: PPUSH
54798: LD_VAR 0 1
54802: PPUSH
54803: CALL_OW 1
54807: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
54808: LD_ADDR_EXP 39
54812: PUSH
54813: LD_EXP 39
54817: PPUSH
54818: LD_EXP 39
54822: PUSH
54823: LD_INT 1
54825: PLUS
54826: PPUSH
54827: EMPTY
54828: PPUSH
54829: CALL_OW 1
54833: ST_TO_ADDR
// end end ;
54834: GO 54763
54836: POP
54837: POP
// for i := minerMinesList downto 1 do
54838: LD_ADDR_VAR 0 1
54842: PUSH
54843: DOUBLE
54844: LD_EXP 39
54848: INC
54849: ST_TO_ADDR
54850: LD_INT 1
54852: PUSH
54853: FOR_DOWNTO
54854: IFFALSE 55190
// begin if IsLive ( minersList [ i ] ) then
54856: LD_EXP 38
54860: PUSH
54861: LD_VAR 0 1
54865: ARRAY
54866: PPUSH
54867: CALL_OW 300
54871: IFFALSE 54899
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
54873: LD_EXP 38
54877: PUSH
54878: LD_VAR 0 1
54882: ARRAY
54883: PPUSH
54884: LD_EXP 39
54888: PUSH
54889: LD_VAR 0 1
54893: ARRAY
54894: PPUSH
54895: CALL_OW 505
// if not minerMinesList [ i ] then
54899: LD_EXP 39
54903: PUSH
54904: LD_VAR 0 1
54908: ARRAY
54909: NOT
54910: IFFALSE 54914
// continue ;
54912: GO 54853
// for j := minerMinesList [ i ] downto 1 do
54914: LD_ADDR_VAR 0 2
54918: PUSH
54919: DOUBLE
54920: LD_EXP 39
54924: PUSH
54925: LD_VAR 0 1
54929: ARRAY
54930: INC
54931: ST_TO_ADDR
54932: LD_INT 1
54934: PUSH
54935: FOR_DOWNTO
54936: IFFALSE 55186
// begin side := GetSide ( minersList [ i ] ) ;
54938: LD_ADDR_VAR 0 3
54942: PUSH
54943: LD_EXP 38
54947: PUSH
54948: LD_VAR 0 1
54952: ARRAY
54953: PPUSH
54954: CALL_OW 255
54958: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
54959: LD_ADDR_VAR 0 4
54963: PUSH
54964: LD_EXP 39
54968: PUSH
54969: LD_VAR 0 1
54973: ARRAY
54974: PUSH
54975: LD_VAR 0 2
54979: ARRAY
54980: PUSH
54981: LD_INT 1
54983: ARRAY
54984: PPUSH
54985: LD_EXP 39
54989: PUSH
54990: LD_VAR 0 1
54994: ARRAY
54995: PUSH
54996: LD_VAR 0 2
55000: ARRAY
55001: PUSH
55002: LD_INT 2
55004: ARRAY
55005: PPUSH
55006: CALL_OW 428
55010: ST_TO_ADDR
// if not tmp then
55011: LD_VAR 0 4
55015: NOT
55016: IFFALSE 55020
// continue ;
55018: GO 54935
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
55020: LD_VAR 0 4
55024: PUSH
55025: LD_INT 81
55027: PUSH
55028: LD_VAR 0 3
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PPUSH
55037: CALL_OW 69
55041: IN
55042: PUSH
55043: LD_EXP 39
55047: PUSH
55048: LD_VAR 0 1
55052: ARRAY
55053: PUSH
55054: LD_VAR 0 2
55058: ARRAY
55059: PUSH
55060: LD_INT 1
55062: ARRAY
55063: PPUSH
55064: LD_EXP 39
55068: PUSH
55069: LD_VAR 0 1
55073: ARRAY
55074: PUSH
55075: LD_VAR 0 2
55079: ARRAY
55080: PUSH
55081: LD_INT 2
55083: ARRAY
55084: PPUSH
55085: CALL_OW 458
55089: AND
55090: IFFALSE 55184
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
55092: LD_EXP 39
55096: PUSH
55097: LD_VAR 0 1
55101: ARRAY
55102: PUSH
55103: LD_VAR 0 2
55107: ARRAY
55108: PUSH
55109: LD_INT 1
55111: ARRAY
55112: PPUSH
55113: LD_EXP 39
55117: PUSH
55118: LD_VAR 0 1
55122: ARRAY
55123: PUSH
55124: LD_VAR 0 2
55128: ARRAY
55129: PUSH
55130: LD_INT 2
55132: ARRAY
55133: PPUSH
55134: LD_VAR 0 3
55138: PPUSH
55139: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
55143: LD_ADDR_EXP 39
55147: PUSH
55148: LD_EXP 39
55152: PPUSH
55153: LD_VAR 0 1
55157: PPUSH
55158: LD_EXP 39
55162: PUSH
55163: LD_VAR 0 1
55167: ARRAY
55168: PPUSH
55169: LD_VAR 0 2
55173: PPUSH
55174: CALL_OW 3
55178: PPUSH
55179: CALL_OW 1
55183: ST_TO_ADDR
// end ; end ;
55184: GO 54935
55186: POP
55187: POP
// end ;
55188: GO 54853
55190: POP
55191: POP
// end ;
55192: PPOPN 4
55194: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
55195: LD_INT 0
55197: PPUSH
55198: PPUSH
// result := false ;
55199: LD_ADDR_VAR 0 4
55203: PUSH
55204: LD_INT 0
55206: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
55207: LD_VAR 0 1
55211: PPUSH
55212: CALL_OW 264
55216: PUSH
55217: LD_EXP 103
55221: EQUAL
55222: NOT
55223: IFFALSE 55227
// exit ;
55225: GO 55467
// index := GetElementIndex ( minersList , unit ) ;
55227: LD_ADDR_VAR 0 5
55231: PUSH
55232: LD_EXP 38
55236: PPUSH
55237: LD_VAR 0 1
55241: PPUSH
55242: CALL 18399 0 2
55246: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
55247: LD_EXP 39
55251: PUSH
55252: LD_VAR 0 5
55256: ARRAY
55257: PUSH
55258: LD_EXP 40
55262: GREATEREQUAL
55263: IFFALSE 55267
// exit ;
55265: GO 55467
// ComMoveXY ( unit , x , y ) ;
55267: LD_VAR 0 1
55271: PPUSH
55272: LD_VAR 0 2
55276: PPUSH
55277: LD_VAR 0 3
55281: PPUSH
55282: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
55286: LD_INT 35
55288: PPUSH
55289: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
55293: LD_VAR 0 1
55297: PPUSH
55298: LD_VAR 0 2
55302: PPUSH
55303: LD_VAR 0 3
55307: PPUSH
55308: CALL 49171 0 3
55312: NOT
55313: PUSH
55314: LD_VAR 0 1
55318: PPUSH
55319: CALL_OW 314
55323: AND
55324: IFFALSE 55328
// exit ;
55326: GO 55467
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
55328: LD_VAR 0 2
55332: PPUSH
55333: LD_VAR 0 3
55337: PPUSH
55338: CALL_OW 428
55342: PUSH
55343: LD_VAR 0 1
55347: EQUAL
55348: PUSH
55349: LD_VAR 0 1
55353: PPUSH
55354: CALL_OW 314
55358: NOT
55359: AND
55360: IFFALSE 55286
// PlaySoundXY ( x , y , PlantMine ) ;
55362: LD_VAR 0 2
55366: PPUSH
55367: LD_VAR 0 3
55371: PPUSH
55372: LD_STRING PlantMine
55374: PPUSH
55375: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
55379: LD_VAR 0 2
55383: PPUSH
55384: LD_VAR 0 3
55388: PPUSH
55389: LD_VAR 0 1
55393: PPUSH
55394: CALL_OW 255
55398: PPUSH
55399: LD_INT 0
55401: PPUSH
55402: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
55406: LD_ADDR_EXP 39
55410: PUSH
55411: LD_EXP 39
55415: PPUSH
55416: LD_VAR 0 5
55420: PUSH
55421: LD_EXP 39
55425: PUSH
55426: LD_VAR 0 5
55430: ARRAY
55431: PUSH
55432: LD_INT 1
55434: PLUS
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PPUSH
55440: LD_VAR 0 2
55444: PUSH
55445: LD_VAR 0 3
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PPUSH
55454: CALL 18614 0 3
55458: ST_TO_ADDR
// result := true ;
55459: LD_ADDR_VAR 0 4
55463: PUSH
55464: LD_INT 1
55466: ST_TO_ADDR
// end ;
55467: LD_VAR 0 4
55471: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
55472: LD_INT 0
55474: PPUSH
55475: PPUSH
55476: PPUSH
// if not unit in minersList then
55477: LD_VAR 0 1
55481: PUSH
55482: LD_EXP 38
55486: IN
55487: NOT
55488: IFFALSE 55492
// exit ;
55490: GO 55884
// index := GetElementIndex ( minersList , unit ) ;
55492: LD_ADDR_VAR 0 6
55496: PUSH
55497: LD_EXP 38
55501: PPUSH
55502: LD_VAR 0 1
55506: PPUSH
55507: CALL 18399 0 2
55511: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
55512: LD_ADDR_VAR 0 5
55516: PUSH
55517: DOUBLE
55518: LD_EXP 39
55522: PUSH
55523: LD_VAR 0 6
55527: ARRAY
55528: INC
55529: ST_TO_ADDR
55530: LD_INT 1
55532: PUSH
55533: FOR_DOWNTO
55534: IFFALSE 55695
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
55536: LD_EXP 39
55540: PUSH
55541: LD_VAR 0 6
55545: ARRAY
55546: PUSH
55547: LD_VAR 0 5
55551: ARRAY
55552: PUSH
55553: LD_INT 1
55555: ARRAY
55556: PUSH
55557: LD_VAR 0 2
55561: EQUAL
55562: PUSH
55563: LD_EXP 39
55567: PUSH
55568: LD_VAR 0 6
55572: ARRAY
55573: PUSH
55574: LD_VAR 0 5
55578: ARRAY
55579: PUSH
55580: LD_INT 2
55582: ARRAY
55583: PUSH
55584: LD_VAR 0 3
55588: EQUAL
55589: AND
55590: IFFALSE 55693
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
55592: LD_EXP 39
55596: PUSH
55597: LD_VAR 0 6
55601: ARRAY
55602: PUSH
55603: LD_VAR 0 5
55607: ARRAY
55608: PUSH
55609: LD_INT 1
55611: ARRAY
55612: PPUSH
55613: LD_EXP 39
55617: PUSH
55618: LD_VAR 0 6
55622: ARRAY
55623: PUSH
55624: LD_VAR 0 5
55628: ARRAY
55629: PUSH
55630: LD_INT 2
55632: ARRAY
55633: PPUSH
55634: LD_VAR 0 1
55638: PPUSH
55639: CALL_OW 255
55643: PPUSH
55644: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
55648: LD_ADDR_EXP 39
55652: PUSH
55653: LD_EXP 39
55657: PPUSH
55658: LD_VAR 0 6
55662: PPUSH
55663: LD_EXP 39
55667: PUSH
55668: LD_VAR 0 6
55672: ARRAY
55673: PPUSH
55674: LD_VAR 0 5
55678: PPUSH
55679: CALL_OW 3
55683: PPUSH
55684: CALL_OW 1
55688: ST_TO_ADDR
// exit ;
55689: POP
55690: POP
55691: GO 55884
// end ; end ;
55693: GO 55533
55695: POP
55696: POP
// for i := minerMinesList [ index ] downto 1 do
55697: LD_ADDR_VAR 0 5
55701: PUSH
55702: DOUBLE
55703: LD_EXP 39
55707: PUSH
55708: LD_VAR 0 6
55712: ARRAY
55713: INC
55714: ST_TO_ADDR
55715: LD_INT 1
55717: PUSH
55718: FOR_DOWNTO
55719: IFFALSE 55882
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
55721: LD_EXP 39
55725: PUSH
55726: LD_VAR 0 6
55730: ARRAY
55731: PUSH
55732: LD_VAR 0 5
55736: ARRAY
55737: PUSH
55738: LD_INT 1
55740: ARRAY
55741: PPUSH
55742: LD_EXP 39
55746: PUSH
55747: LD_VAR 0 6
55751: ARRAY
55752: PUSH
55753: LD_VAR 0 5
55757: ARRAY
55758: PUSH
55759: LD_INT 2
55761: ARRAY
55762: PPUSH
55763: LD_VAR 0 2
55767: PPUSH
55768: LD_VAR 0 3
55772: PPUSH
55773: CALL_OW 298
55777: PUSH
55778: LD_INT 6
55780: LESS
55781: IFFALSE 55880
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
55783: LD_EXP 39
55787: PUSH
55788: LD_VAR 0 6
55792: ARRAY
55793: PUSH
55794: LD_VAR 0 5
55798: ARRAY
55799: PUSH
55800: LD_INT 1
55802: ARRAY
55803: PPUSH
55804: LD_EXP 39
55808: PUSH
55809: LD_VAR 0 6
55813: ARRAY
55814: PUSH
55815: LD_VAR 0 5
55819: ARRAY
55820: PUSH
55821: LD_INT 2
55823: ARRAY
55824: PPUSH
55825: LD_VAR 0 1
55829: PPUSH
55830: CALL_OW 255
55834: PPUSH
55835: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
55839: LD_ADDR_EXP 39
55843: PUSH
55844: LD_EXP 39
55848: PPUSH
55849: LD_VAR 0 6
55853: PPUSH
55854: LD_EXP 39
55858: PUSH
55859: LD_VAR 0 6
55863: ARRAY
55864: PPUSH
55865: LD_VAR 0 5
55869: PPUSH
55870: CALL_OW 3
55874: PPUSH
55875: CALL_OW 1
55879: ST_TO_ADDR
// end ; end ;
55880: GO 55718
55882: POP
55883: POP
// end ;
55884: LD_VAR 0 4
55888: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
55889: LD_INT 0
55891: PPUSH
55892: PPUSH
55893: PPUSH
55894: PPUSH
55895: PPUSH
55896: PPUSH
55897: PPUSH
55898: PPUSH
55899: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
55900: LD_VAR 0 1
55904: PPUSH
55905: CALL_OW 264
55909: PUSH
55910: LD_EXP 103
55914: EQUAL
55915: NOT
55916: PUSH
55917: LD_VAR 0 1
55921: PUSH
55922: LD_EXP 38
55926: IN
55927: NOT
55928: OR
55929: IFFALSE 55933
// exit ;
55931: GO 56255
// index := GetElementIndex ( minersList , unit ) ;
55933: LD_ADDR_VAR 0 6
55937: PUSH
55938: LD_EXP 38
55942: PPUSH
55943: LD_VAR 0 1
55947: PPUSH
55948: CALL 18399 0 2
55952: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
55953: LD_ADDR_VAR 0 8
55957: PUSH
55958: LD_EXP 40
55962: PUSH
55963: LD_EXP 39
55967: PUSH
55968: LD_VAR 0 6
55972: ARRAY
55973: MINUS
55974: ST_TO_ADDR
// if not minesFreeAmount then
55975: LD_VAR 0 8
55979: NOT
55980: IFFALSE 55984
// exit ;
55982: GO 56255
// tmp := [ ] ;
55984: LD_ADDR_VAR 0 7
55988: PUSH
55989: EMPTY
55990: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
55991: LD_ADDR_VAR 0 5
55995: PUSH
55996: DOUBLE
55997: LD_INT 1
55999: DEC
56000: ST_TO_ADDR
56001: LD_VAR 0 8
56005: PUSH
56006: FOR_TO
56007: IFFALSE 56202
// begin _d := rand ( 0 , 5 ) ;
56009: LD_ADDR_VAR 0 11
56013: PUSH
56014: LD_INT 0
56016: PPUSH
56017: LD_INT 5
56019: PPUSH
56020: CALL_OW 12
56024: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
56025: LD_ADDR_VAR 0 12
56029: PUSH
56030: LD_INT 2
56032: PPUSH
56033: LD_INT 6
56035: PPUSH
56036: CALL_OW 12
56040: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
56041: LD_ADDR_VAR 0 9
56045: PUSH
56046: LD_VAR 0 2
56050: PPUSH
56051: LD_VAR 0 11
56055: PPUSH
56056: LD_VAR 0 12
56060: PPUSH
56061: CALL_OW 272
56065: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
56066: LD_ADDR_VAR 0 10
56070: PUSH
56071: LD_VAR 0 3
56075: PPUSH
56076: LD_VAR 0 11
56080: PPUSH
56081: LD_VAR 0 12
56085: PPUSH
56086: CALL_OW 273
56090: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
56091: LD_VAR 0 9
56095: PPUSH
56096: LD_VAR 0 10
56100: PPUSH
56101: CALL_OW 488
56105: PUSH
56106: LD_VAR 0 9
56110: PUSH
56111: LD_VAR 0 10
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_VAR 0 7
56124: IN
56125: NOT
56126: AND
56127: PUSH
56128: LD_VAR 0 9
56132: PPUSH
56133: LD_VAR 0 10
56137: PPUSH
56138: CALL_OW 458
56142: NOT
56143: AND
56144: IFFALSE 56186
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
56146: LD_ADDR_VAR 0 7
56150: PUSH
56151: LD_VAR 0 7
56155: PPUSH
56156: LD_VAR 0 7
56160: PUSH
56161: LD_INT 1
56163: PLUS
56164: PPUSH
56165: LD_VAR 0 9
56169: PUSH
56170: LD_VAR 0 10
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PPUSH
56179: CALL_OW 1
56183: ST_TO_ADDR
56184: GO 56200
// i := i - 1 ;
56186: LD_ADDR_VAR 0 5
56190: PUSH
56191: LD_VAR 0 5
56195: PUSH
56196: LD_INT 1
56198: MINUS
56199: ST_TO_ADDR
// end ;
56200: GO 56006
56202: POP
56203: POP
// for i in tmp do
56204: LD_ADDR_VAR 0 5
56208: PUSH
56209: LD_VAR 0 7
56213: PUSH
56214: FOR_IN
56215: IFFALSE 56253
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
56217: LD_VAR 0 1
56221: PPUSH
56222: LD_VAR 0 5
56226: PUSH
56227: LD_INT 1
56229: ARRAY
56230: PPUSH
56231: LD_VAR 0 5
56235: PUSH
56236: LD_INT 2
56238: ARRAY
56239: PPUSH
56240: CALL 55195 0 3
56244: NOT
56245: IFFALSE 56251
// exit ;
56247: POP
56248: POP
56249: GO 56255
56251: GO 56214
56253: POP
56254: POP
// end ;
56255: LD_VAR 0 4
56259: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
56260: LD_INT 0
56262: PPUSH
56263: PPUSH
56264: PPUSH
56265: PPUSH
56266: PPUSH
56267: PPUSH
56268: PPUSH
// if not GetClass ( unit ) = class_sniper then
56269: LD_VAR 0 1
56273: PPUSH
56274: CALL_OW 257
56278: PUSH
56279: LD_INT 5
56281: EQUAL
56282: NOT
56283: IFFALSE 56287
// exit ;
56285: GO 56675
// dist := 8 ;
56287: LD_ADDR_VAR 0 5
56291: PUSH
56292: LD_INT 8
56294: ST_TO_ADDR
// viewRange := 12 ;
56295: LD_ADDR_VAR 0 7
56299: PUSH
56300: LD_INT 12
56302: ST_TO_ADDR
// side := GetSide ( unit ) ;
56303: LD_ADDR_VAR 0 6
56307: PUSH
56308: LD_VAR 0 1
56312: PPUSH
56313: CALL_OW 255
56317: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
56318: LD_INT 61
56320: PPUSH
56321: LD_VAR 0 6
56325: PPUSH
56326: CALL_OW 321
56330: PUSH
56331: LD_INT 2
56333: EQUAL
56334: IFFALSE 56344
// viewRange := 16 ;
56336: LD_ADDR_VAR 0 7
56340: PUSH
56341: LD_INT 16
56343: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
56344: LD_VAR 0 1
56348: PPUSH
56349: LD_VAR 0 2
56353: PPUSH
56354: LD_VAR 0 3
56358: PPUSH
56359: CALL_OW 297
56363: PUSH
56364: LD_VAR 0 5
56368: GREATER
56369: IFFALSE 56448
// begin ComMoveXY ( unit , x , y ) ;
56371: LD_VAR 0 1
56375: PPUSH
56376: LD_VAR 0 2
56380: PPUSH
56381: LD_VAR 0 3
56385: PPUSH
56386: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
56390: LD_INT 35
56392: PPUSH
56393: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
56397: LD_VAR 0 1
56401: PPUSH
56402: LD_VAR 0 2
56406: PPUSH
56407: LD_VAR 0 3
56411: PPUSH
56412: CALL 49171 0 3
56416: NOT
56417: IFFALSE 56421
// exit ;
56419: GO 56675
// until GetDistUnitXY ( unit , x , y ) < dist ;
56421: LD_VAR 0 1
56425: PPUSH
56426: LD_VAR 0 2
56430: PPUSH
56431: LD_VAR 0 3
56435: PPUSH
56436: CALL_OW 297
56440: PUSH
56441: LD_VAR 0 5
56445: LESS
56446: IFFALSE 56390
// end ; ComTurnXY ( unit , x , y ) ;
56448: LD_VAR 0 1
56452: PPUSH
56453: LD_VAR 0 2
56457: PPUSH
56458: LD_VAR 0 3
56462: PPUSH
56463: CALL_OW 118
// wait ( 5 ) ;
56467: LD_INT 5
56469: PPUSH
56470: CALL_OW 67
// _d := GetDir ( unit ) ;
56474: LD_ADDR_VAR 0 10
56478: PUSH
56479: LD_VAR 0 1
56483: PPUSH
56484: CALL_OW 254
56488: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
56489: LD_ADDR_VAR 0 8
56493: PUSH
56494: LD_VAR 0 1
56498: PPUSH
56499: CALL_OW 250
56503: PPUSH
56504: LD_VAR 0 10
56508: PPUSH
56509: LD_VAR 0 5
56513: PPUSH
56514: CALL_OW 272
56518: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
56519: LD_ADDR_VAR 0 9
56523: PUSH
56524: LD_VAR 0 1
56528: PPUSH
56529: CALL_OW 251
56533: PPUSH
56534: LD_VAR 0 10
56538: PPUSH
56539: LD_VAR 0 5
56543: PPUSH
56544: CALL_OW 273
56548: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56549: LD_VAR 0 8
56553: PPUSH
56554: LD_VAR 0 9
56558: PPUSH
56559: CALL_OW 488
56563: NOT
56564: IFFALSE 56568
// exit ;
56566: GO 56675
// ComAnimCustom ( unit , 1 ) ;
56568: LD_VAR 0 1
56572: PPUSH
56573: LD_INT 1
56575: PPUSH
56576: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
56580: LD_VAR 0 8
56584: PPUSH
56585: LD_VAR 0 9
56589: PPUSH
56590: LD_VAR 0 6
56594: PPUSH
56595: LD_VAR 0 7
56599: PPUSH
56600: CALL_OW 330
// repeat wait ( 1 ) ;
56604: LD_INT 1
56606: PPUSH
56607: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
56611: LD_VAR 0 1
56615: PPUSH
56616: CALL_OW 316
56620: PUSH
56621: LD_VAR 0 1
56625: PPUSH
56626: CALL_OW 314
56630: OR
56631: PUSH
56632: LD_VAR 0 1
56636: PPUSH
56637: CALL_OW 302
56641: NOT
56642: OR
56643: PUSH
56644: LD_VAR 0 1
56648: PPUSH
56649: CALL_OW 301
56653: OR
56654: IFFALSE 56604
// RemoveSeeing ( _x , _y , side ) ;
56656: LD_VAR 0 8
56660: PPUSH
56661: LD_VAR 0 9
56665: PPUSH
56666: LD_VAR 0 6
56670: PPUSH
56671: CALL_OW 331
// end ; end_of_file
56675: LD_VAR 0 4
56679: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
56680: LD_INT 0
56682: PPUSH
// if p2 = 100 then
56683: LD_VAR 0 2
56687: PUSH
56688: LD_INT 100
56690: EQUAL
56691: IFFALSE 57640
// begin if not StreamModeActive then
56693: LD_EXP 41
56697: NOT
56698: IFFALSE 56708
// StreamModeActive := true ;
56700: LD_ADDR_EXP 41
56704: PUSH
56705: LD_INT 1
56707: ST_TO_ADDR
// if p3 = 0 then
56708: LD_VAR 0 3
56712: PUSH
56713: LD_INT 0
56715: EQUAL
56716: IFFALSE 56722
// InitStreamMode ;
56718: CALL 57800 0 0
// if p3 = 1 then
56722: LD_VAR 0 3
56726: PUSH
56727: LD_INT 1
56729: EQUAL
56730: IFFALSE 56740
// sRocket := true ;
56732: LD_ADDR_EXP 46
56736: PUSH
56737: LD_INT 1
56739: ST_TO_ADDR
// if p3 = 2 then
56740: LD_VAR 0 3
56744: PUSH
56745: LD_INT 2
56747: EQUAL
56748: IFFALSE 56758
// sSpeed := true ;
56750: LD_ADDR_EXP 45
56754: PUSH
56755: LD_INT 1
56757: ST_TO_ADDR
// if p3 = 3 then
56758: LD_VAR 0 3
56762: PUSH
56763: LD_INT 3
56765: EQUAL
56766: IFFALSE 56776
// sEngine := true ;
56768: LD_ADDR_EXP 47
56772: PUSH
56773: LD_INT 1
56775: ST_TO_ADDR
// if p3 = 4 then
56776: LD_VAR 0 3
56780: PUSH
56781: LD_INT 4
56783: EQUAL
56784: IFFALSE 56794
// sSpec := true ;
56786: LD_ADDR_EXP 44
56790: PUSH
56791: LD_INT 1
56793: ST_TO_ADDR
// if p3 = 5 then
56794: LD_VAR 0 3
56798: PUSH
56799: LD_INT 5
56801: EQUAL
56802: IFFALSE 56812
// sLevel := true ;
56804: LD_ADDR_EXP 48
56808: PUSH
56809: LD_INT 1
56811: ST_TO_ADDR
// if p3 = 6 then
56812: LD_VAR 0 3
56816: PUSH
56817: LD_INT 6
56819: EQUAL
56820: IFFALSE 56830
// sArmoury := true ;
56822: LD_ADDR_EXP 49
56826: PUSH
56827: LD_INT 1
56829: ST_TO_ADDR
// if p3 = 7 then
56830: LD_VAR 0 3
56834: PUSH
56835: LD_INT 7
56837: EQUAL
56838: IFFALSE 56848
// sRadar := true ;
56840: LD_ADDR_EXP 50
56844: PUSH
56845: LD_INT 1
56847: ST_TO_ADDR
// if p3 = 8 then
56848: LD_VAR 0 3
56852: PUSH
56853: LD_INT 8
56855: EQUAL
56856: IFFALSE 56866
// sBunker := true ;
56858: LD_ADDR_EXP 51
56862: PUSH
56863: LD_INT 1
56865: ST_TO_ADDR
// if p3 = 9 then
56866: LD_VAR 0 3
56870: PUSH
56871: LD_INT 9
56873: EQUAL
56874: IFFALSE 56884
// sHack := true ;
56876: LD_ADDR_EXP 52
56880: PUSH
56881: LD_INT 1
56883: ST_TO_ADDR
// if p3 = 10 then
56884: LD_VAR 0 3
56888: PUSH
56889: LD_INT 10
56891: EQUAL
56892: IFFALSE 56902
// sFire := true ;
56894: LD_ADDR_EXP 53
56898: PUSH
56899: LD_INT 1
56901: ST_TO_ADDR
// if p3 = 11 then
56902: LD_VAR 0 3
56906: PUSH
56907: LD_INT 11
56909: EQUAL
56910: IFFALSE 56920
// sRefresh := true ;
56912: LD_ADDR_EXP 54
56916: PUSH
56917: LD_INT 1
56919: ST_TO_ADDR
// if p3 = 12 then
56920: LD_VAR 0 3
56924: PUSH
56925: LD_INT 12
56927: EQUAL
56928: IFFALSE 56938
// sExp := true ;
56930: LD_ADDR_EXP 55
56934: PUSH
56935: LD_INT 1
56937: ST_TO_ADDR
// if p3 = 13 then
56938: LD_VAR 0 3
56942: PUSH
56943: LD_INT 13
56945: EQUAL
56946: IFFALSE 56956
// sDepot := true ;
56948: LD_ADDR_EXP 56
56952: PUSH
56953: LD_INT 1
56955: ST_TO_ADDR
// if p3 = 14 then
56956: LD_VAR 0 3
56960: PUSH
56961: LD_INT 14
56963: EQUAL
56964: IFFALSE 56974
// sFlag := true ;
56966: LD_ADDR_EXP 57
56970: PUSH
56971: LD_INT 1
56973: ST_TO_ADDR
// if p3 = 15 then
56974: LD_VAR 0 3
56978: PUSH
56979: LD_INT 15
56981: EQUAL
56982: IFFALSE 56992
// sKamikadze := true ;
56984: LD_ADDR_EXP 65
56988: PUSH
56989: LD_INT 1
56991: ST_TO_ADDR
// if p3 = 16 then
56992: LD_VAR 0 3
56996: PUSH
56997: LD_INT 16
56999: EQUAL
57000: IFFALSE 57010
// sTroll := true ;
57002: LD_ADDR_EXP 66
57006: PUSH
57007: LD_INT 1
57009: ST_TO_ADDR
// if p3 = 17 then
57010: LD_VAR 0 3
57014: PUSH
57015: LD_INT 17
57017: EQUAL
57018: IFFALSE 57028
// sSlow := true ;
57020: LD_ADDR_EXP 67
57024: PUSH
57025: LD_INT 1
57027: ST_TO_ADDR
// if p3 = 18 then
57028: LD_VAR 0 3
57032: PUSH
57033: LD_INT 18
57035: EQUAL
57036: IFFALSE 57046
// sLack := true ;
57038: LD_ADDR_EXP 68
57042: PUSH
57043: LD_INT 1
57045: ST_TO_ADDR
// if p3 = 19 then
57046: LD_VAR 0 3
57050: PUSH
57051: LD_INT 19
57053: EQUAL
57054: IFFALSE 57064
// sTank := true ;
57056: LD_ADDR_EXP 70
57060: PUSH
57061: LD_INT 1
57063: ST_TO_ADDR
// if p3 = 20 then
57064: LD_VAR 0 3
57068: PUSH
57069: LD_INT 20
57071: EQUAL
57072: IFFALSE 57082
// sRemote := true ;
57074: LD_ADDR_EXP 71
57078: PUSH
57079: LD_INT 1
57081: ST_TO_ADDR
// if p3 = 21 then
57082: LD_VAR 0 3
57086: PUSH
57087: LD_INT 21
57089: EQUAL
57090: IFFALSE 57100
// sPowell := true ;
57092: LD_ADDR_EXP 72
57096: PUSH
57097: LD_INT 1
57099: ST_TO_ADDR
// if p3 = 22 then
57100: LD_VAR 0 3
57104: PUSH
57105: LD_INT 22
57107: EQUAL
57108: IFFALSE 57118
// sTeleport := true ;
57110: LD_ADDR_EXP 75
57114: PUSH
57115: LD_INT 1
57117: ST_TO_ADDR
// if p3 = 23 then
57118: LD_VAR 0 3
57122: PUSH
57123: LD_INT 23
57125: EQUAL
57126: IFFALSE 57136
// sOilTower := true ;
57128: LD_ADDR_EXP 77
57132: PUSH
57133: LD_INT 1
57135: ST_TO_ADDR
// if p3 = 24 then
57136: LD_VAR 0 3
57140: PUSH
57141: LD_INT 24
57143: EQUAL
57144: IFFALSE 57154
// sShovel := true ;
57146: LD_ADDR_EXP 78
57150: PUSH
57151: LD_INT 1
57153: ST_TO_ADDR
// if p3 = 25 then
57154: LD_VAR 0 3
57158: PUSH
57159: LD_INT 25
57161: EQUAL
57162: IFFALSE 57172
// sSheik := true ;
57164: LD_ADDR_EXP 79
57168: PUSH
57169: LD_INT 1
57171: ST_TO_ADDR
// if p3 = 26 then
57172: LD_VAR 0 3
57176: PUSH
57177: LD_INT 26
57179: EQUAL
57180: IFFALSE 57190
// sEarthquake := true ;
57182: LD_ADDR_EXP 81
57186: PUSH
57187: LD_INT 1
57189: ST_TO_ADDR
// if p3 = 27 then
57190: LD_VAR 0 3
57194: PUSH
57195: LD_INT 27
57197: EQUAL
57198: IFFALSE 57208
// sAI := true ;
57200: LD_ADDR_EXP 82
57204: PUSH
57205: LD_INT 1
57207: ST_TO_ADDR
// if p3 = 28 then
57208: LD_VAR 0 3
57212: PUSH
57213: LD_INT 28
57215: EQUAL
57216: IFFALSE 57226
// sCargo := true ;
57218: LD_ADDR_EXP 85
57222: PUSH
57223: LD_INT 1
57225: ST_TO_ADDR
// if p3 = 29 then
57226: LD_VAR 0 3
57230: PUSH
57231: LD_INT 29
57233: EQUAL
57234: IFFALSE 57244
// sDLaser := true ;
57236: LD_ADDR_EXP 86
57240: PUSH
57241: LD_INT 1
57243: ST_TO_ADDR
// if p3 = 30 then
57244: LD_VAR 0 3
57248: PUSH
57249: LD_INT 30
57251: EQUAL
57252: IFFALSE 57262
// sExchange := true ;
57254: LD_ADDR_EXP 87
57258: PUSH
57259: LD_INT 1
57261: ST_TO_ADDR
// if p3 = 31 then
57262: LD_VAR 0 3
57266: PUSH
57267: LD_INT 31
57269: EQUAL
57270: IFFALSE 57280
// sFac := true ;
57272: LD_ADDR_EXP 88
57276: PUSH
57277: LD_INT 1
57279: ST_TO_ADDR
// if p3 = 32 then
57280: LD_VAR 0 3
57284: PUSH
57285: LD_INT 32
57287: EQUAL
57288: IFFALSE 57298
// sPower := true ;
57290: LD_ADDR_EXP 89
57294: PUSH
57295: LD_INT 1
57297: ST_TO_ADDR
// if p3 = 33 then
57298: LD_VAR 0 3
57302: PUSH
57303: LD_INT 33
57305: EQUAL
57306: IFFALSE 57316
// sRandom := true ;
57308: LD_ADDR_EXP 90
57312: PUSH
57313: LD_INT 1
57315: ST_TO_ADDR
// if p3 = 34 then
57316: LD_VAR 0 3
57320: PUSH
57321: LD_INT 34
57323: EQUAL
57324: IFFALSE 57334
// sShield := true ;
57326: LD_ADDR_EXP 91
57330: PUSH
57331: LD_INT 1
57333: ST_TO_ADDR
// if p3 = 35 then
57334: LD_VAR 0 3
57338: PUSH
57339: LD_INT 35
57341: EQUAL
57342: IFFALSE 57352
// sTime := true ;
57344: LD_ADDR_EXP 92
57348: PUSH
57349: LD_INT 1
57351: ST_TO_ADDR
// if p3 = 36 then
57352: LD_VAR 0 3
57356: PUSH
57357: LD_INT 36
57359: EQUAL
57360: IFFALSE 57370
// sTools := true ;
57362: LD_ADDR_EXP 93
57366: PUSH
57367: LD_INT 1
57369: ST_TO_ADDR
// if p3 = 101 then
57370: LD_VAR 0 3
57374: PUSH
57375: LD_INT 101
57377: EQUAL
57378: IFFALSE 57388
// sSold := true ;
57380: LD_ADDR_EXP 58
57384: PUSH
57385: LD_INT 1
57387: ST_TO_ADDR
// if p3 = 102 then
57388: LD_VAR 0 3
57392: PUSH
57393: LD_INT 102
57395: EQUAL
57396: IFFALSE 57406
// sDiff := true ;
57398: LD_ADDR_EXP 59
57402: PUSH
57403: LD_INT 1
57405: ST_TO_ADDR
// if p3 = 103 then
57406: LD_VAR 0 3
57410: PUSH
57411: LD_INT 103
57413: EQUAL
57414: IFFALSE 57424
// sFog := true ;
57416: LD_ADDR_EXP 62
57420: PUSH
57421: LD_INT 1
57423: ST_TO_ADDR
// if p3 = 104 then
57424: LD_VAR 0 3
57428: PUSH
57429: LD_INT 104
57431: EQUAL
57432: IFFALSE 57442
// sReset := true ;
57434: LD_ADDR_EXP 63
57438: PUSH
57439: LD_INT 1
57441: ST_TO_ADDR
// if p3 = 105 then
57442: LD_VAR 0 3
57446: PUSH
57447: LD_INT 105
57449: EQUAL
57450: IFFALSE 57460
// sSun := true ;
57452: LD_ADDR_EXP 64
57456: PUSH
57457: LD_INT 1
57459: ST_TO_ADDR
// if p3 = 106 then
57460: LD_VAR 0 3
57464: PUSH
57465: LD_INT 106
57467: EQUAL
57468: IFFALSE 57478
// sTiger := true ;
57470: LD_ADDR_EXP 60
57474: PUSH
57475: LD_INT 1
57477: ST_TO_ADDR
// if p3 = 107 then
57478: LD_VAR 0 3
57482: PUSH
57483: LD_INT 107
57485: EQUAL
57486: IFFALSE 57496
// sBomb := true ;
57488: LD_ADDR_EXP 61
57492: PUSH
57493: LD_INT 1
57495: ST_TO_ADDR
// if p3 = 108 then
57496: LD_VAR 0 3
57500: PUSH
57501: LD_INT 108
57503: EQUAL
57504: IFFALSE 57514
// sWound := true ;
57506: LD_ADDR_EXP 69
57510: PUSH
57511: LD_INT 1
57513: ST_TO_ADDR
// if p3 = 109 then
57514: LD_VAR 0 3
57518: PUSH
57519: LD_INT 109
57521: EQUAL
57522: IFFALSE 57532
// sBetray := true ;
57524: LD_ADDR_EXP 73
57528: PUSH
57529: LD_INT 1
57531: ST_TO_ADDR
// if p3 = 110 then
57532: LD_VAR 0 3
57536: PUSH
57537: LD_INT 110
57539: EQUAL
57540: IFFALSE 57550
// sContamin := true ;
57542: LD_ADDR_EXP 74
57546: PUSH
57547: LD_INT 1
57549: ST_TO_ADDR
// if p3 = 111 then
57550: LD_VAR 0 3
57554: PUSH
57555: LD_INT 111
57557: EQUAL
57558: IFFALSE 57568
// sOil := true ;
57560: LD_ADDR_EXP 76
57564: PUSH
57565: LD_INT 1
57567: ST_TO_ADDR
// if p3 = 112 then
57568: LD_VAR 0 3
57572: PUSH
57573: LD_INT 112
57575: EQUAL
57576: IFFALSE 57586
// sStu := true ;
57578: LD_ADDR_EXP 80
57582: PUSH
57583: LD_INT 1
57585: ST_TO_ADDR
// if p3 = 113 then
57586: LD_VAR 0 3
57590: PUSH
57591: LD_INT 113
57593: EQUAL
57594: IFFALSE 57604
// sBazooka := true ;
57596: LD_ADDR_EXP 83
57600: PUSH
57601: LD_INT 1
57603: ST_TO_ADDR
// if p3 = 114 then
57604: LD_VAR 0 3
57608: PUSH
57609: LD_INT 114
57611: EQUAL
57612: IFFALSE 57622
// sMortar := true ;
57614: LD_ADDR_EXP 84
57618: PUSH
57619: LD_INT 1
57621: ST_TO_ADDR
// if p3 = 115 then
57622: LD_VAR 0 3
57626: PUSH
57627: LD_INT 115
57629: EQUAL
57630: IFFALSE 57640
// sRanger := true ;
57632: LD_ADDR_EXP 94
57636: PUSH
57637: LD_INT 1
57639: ST_TO_ADDR
// end ; if p2 = 101 then
57640: LD_VAR 0 2
57644: PUSH
57645: LD_INT 101
57647: EQUAL
57648: IFFALSE 57776
// begin case p3 of 1 :
57650: LD_VAR 0 3
57654: PUSH
57655: LD_INT 1
57657: DOUBLE
57658: EQUAL
57659: IFTRUE 57663
57661: GO 57670
57663: POP
// hHackUnlimitedResources ; 2 :
57664: CALL 68813 0 0
57668: GO 57776
57670: LD_INT 2
57672: DOUBLE
57673: EQUAL
57674: IFTRUE 57678
57676: GO 57685
57678: POP
// hHackSetLevel10 ; 3 :
57679: CALL 68946 0 0
57683: GO 57776
57685: LD_INT 3
57687: DOUBLE
57688: EQUAL
57689: IFTRUE 57693
57691: GO 57700
57693: POP
// hHackSetLevel10YourUnits ; 4 :
57694: CALL 69031 0 0
57698: GO 57776
57700: LD_INT 4
57702: DOUBLE
57703: EQUAL
57704: IFTRUE 57708
57706: GO 57715
57708: POP
// hHackInvincible ; 5 :
57709: CALL 69479 0 0
57713: GO 57776
57715: LD_INT 5
57717: DOUBLE
57718: EQUAL
57719: IFTRUE 57723
57721: GO 57730
57723: POP
// hHackInvisible ; 6 :
57724: CALL 69590 0 0
57728: GO 57776
57730: LD_INT 6
57732: DOUBLE
57733: EQUAL
57734: IFTRUE 57738
57736: GO 57745
57738: POP
// hHackChangeYourSide ; 7 :
57739: CALL 69647 0 0
57743: GO 57776
57745: LD_INT 7
57747: DOUBLE
57748: EQUAL
57749: IFTRUE 57753
57751: GO 57760
57753: POP
// hHackChangeUnitSide ; 8 :
57754: CALL 69689 0 0
57758: GO 57776
57760: LD_INT 8
57762: DOUBLE
57763: EQUAL
57764: IFTRUE 57768
57766: GO 57775
57768: POP
// hHackFog ; end ;
57769: CALL 69790 0 0
57773: GO 57776
57775: POP
// end ; end ;
57776: LD_VAR 0 7
57780: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
57781: GO 57783
57783: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
57784: LD_STRING initStreamRollete();
57786: PPUSH
57787: CALL_OW 559
// InitStreamMode ;
57791: CALL 57800 0 0
// DefineStreamItems ( ) ;
57795: CALL 58240 0 0
// end ;
57799: END
// function InitStreamMode ; begin
57800: LD_INT 0
57802: PPUSH
// streamModeActive := false ;
57803: LD_ADDR_EXP 41
57807: PUSH
57808: LD_INT 0
57810: ST_TO_ADDR
// normalCounter := 36 ;
57811: LD_ADDR_EXP 42
57815: PUSH
57816: LD_INT 36
57818: ST_TO_ADDR
// hardcoreCounter := 16 ;
57819: LD_ADDR_EXP 43
57823: PUSH
57824: LD_INT 16
57826: ST_TO_ADDR
// sRocket := false ;
57827: LD_ADDR_EXP 46
57831: PUSH
57832: LD_INT 0
57834: ST_TO_ADDR
// sSpeed := false ;
57835: LD_ADDR_EXP 45
57839: PUSH
57840: LD_INT 0
57842: ST_TO_ADDR
// sEngine := false ;
57843: LD_ADDR_EXP 47
57847: PUSH
57848: LD_INT 0
57850: ST_TO_ADDR
// sSpec := false ;
57851: LD_ADDR_EXP 44
57855: PUSH
57856: LD_INT 0
57858: ST_TO_ADDR
// sLevel := false ;
57859: LD_ADDR_EXP 48
57863: PUSH
57864: LD_INT 0
57866: ST_TO_ADDR
// sArmoury := false ;
57867: LD_ADDR_EXP 49
57871: PUSH
57872: LD_INT 0
57874: ST_TO_ADDR
// sRadar := false ;
57875: LD_ADDR_EXP 50
57879: PUSH
57880: LD_INT 0
57882: ST_TO_ADDR
// sBunker := false ;
57883: LD_ADDR_EXP 51
57887: PUSH
57888: LD_INT 0
57890: ST_TO_ADDR
// sHack := false ;
57891: LD_ADDR_EXP 52
57895: PUSH
57896: LD_INT 0
57898: ST_TO_ADDR
// sFire := false ;
57899: LD_ADDR_EXP 53
57903: PUSH
57904: LD_INT 0
57906: ST_TO_ADDR
// sRefresh := false ;
57907: LD_ADDR_EXP 54
57911: PUSH
57912: LD_INT 0
57914: ST_TO_ADDR
// sExp := false ;
57915: LD_ADDR_EXP 55
57919: PUSH
57920: LD_INT 0
57922: ST_TO_ADDR
// sDepot := false ;
57923: LD_ADDR_EXP 56
57927: PUSH
57928: LD_INT 0
57930: ST_TO_ADDR
// sFlag := false ;
57931: LD_ADDR_EXP 57
57935: PUSH
57936: LD_INT 0
57938: ST_TO_ADDR
// sKamikadze := false ;
57939: LD_ADDR_EXP 65
57943: PUSH
57944: LD_INT 0
57946: ST_TO_ADDR
// sTroll := false ;
57947: LD_ADDR_EXP 66
57951: PUSH
57952: LD_INT 0
57954: ST_TO_ADDR
// sSlow := false ;
57955: LD_ADDR_EXP 67
57959: PUSH
57960: LD_INT 0
57962: ST_TO_ADDR
// sLack := false ;
57963: LD_ADDR_EXP 68
57967: PUSH
57968: LD_INT 0
57970: ST_TO_ADDR
// sTank := false ;
57971: LD_ADDR_EXP 70
57975: PUSH
57976: LD_INT 0
57978: ST_TO_ADDR
// sRemote := false ;
57979: LD_ADDR_EXP 71
57983: PUSH
57984: LD_INT 0
57986: ST_TO_ADDR
// sPowell := false ;
57987: LD_ADDR_EXP 72
57991: PUSH
57992: LD_INT 0
57994: ST_TO_ADDR
// sTeleport := false ;
57995: LD_ADDR_EXP 75
57999: PUSH
58000: LD_INT 0
58002: ST_TO_ADDR
// sOilTower := false ;
58003: LD_ADDR_EXP 77
58007: PUSH
58008: LD_INT 0
58010: ST_TO_ADDR
// sShovel := false ;
58011: LD_ADDR_EXP 78
58015: PUSH
58016: LD_INT 0
58018: ST_TO_ADDR
// sSheik := false ;
58019: LD_ADDR_EXP 79
58023: PUSH
58024: LD_INT 0
58026: ST_TO_ADDR
// sEarthquake := false ;
58027: LD_ADDR_EXP 81
58031: PUSH
58032: LD_INT 0
58034: ST_TO_ADDR
// sAI := false ;
58035: LD_ADDR_EXP 82
58039: PUSH
58040: LD_INT 0
58042: ST_TO_ADDR
// sCargo := false ;
58043: LD_ADDR_EXP 85
58047: PUSH
58048: LD_INT 0
58050: ST_TO_ADDR
// sDLaser := false ;
58051: LD_ADDR_EXP 86
58055: PUSH
58056: LD_INT 0
58058: ST_TO_ADDR
// sExchange := false ;
58059: LD_ADDR_EXP 87
58063: PUSH
58064: LD_INT 0
58066: ST_TO_ADDR
// sFac := false ;
58067: LD_ADDR_EXP 88
58071: PUSH
58072: LD_INT 0
58074: ST_TO_ADDR
// sPower := false ;
58075: LD_ADDR_EXP 89
58079: PUSH
58080: LD_INT 0
58082: ST_TO_ADDR
// sRandom := false ;
58083: LD_ADDR_EXP 90
58087: PUSH
58088: LD_INT 0
58090: ST_TO_ADDR
// sShield := false ;
58091: LD_ADDR_EXP 91
58095: PUSH
58096: LD_INT 0
58098: ST_TO_ADDR
// sTime := false ;
58099: LD_ADDR_EXP 92
58103: PUSH
58104: LD_INT 0
58106: ST_TO_ADDR
// sTools := false ;
58107: LD_ADDR_EXP 93
58111: PUSH
58112: LD_INT 0
58114: ST_TO_ADDR
// sSold := false ;
58115: LD_ADDR_EXP 58
58119: PUSH
58120: LD_INT 0
58122: ST_TO_ADDR
// sDiff := false ;
58123: LD_ADDR_EXP 59
58127: PUSH
58128: LD_INT 0
58130: ST_TO_ADDR
// sFog := false ;
58131: LD_ADDR_EXP 62
58135: PUSH
58136: LD_INT 0
58138: ST_TO_ADDR
// sReset := false ;
58139: LD_ADDR_EXP 63
58143: PUSH
58144: LD_INT 0
58146: ST_TO_ADDR
// sSun := false ;
58147: LD_ADDR_EXP 64
58151: PUSH
58152: LD_INT 0
58154: ST_TO_ADDR
// sTiger := false ;
58155: LD_ADDR_EXP 60
58159: PUSH
58160: LD_INT 0
58162: ST_TO_ADDR
// sBomb := false ;
58163: LD_ADDR_EXP 61
58167: PUSH
58168: LD_INT 0
58170: ST_TO_ADDR
// sWound := false ;
58171: LD_ADDR_EXP 69
58175: PUSH
58176: LD_INT 0
58178: ST_TO_ADDR
// sBetray := false ;
58179: LD_ADDR_EXP 73
58183: PUSH
58184: LD_INT 0
58186: ST_TO_ADDR
// sContamin := false ;
58187: LD_ADDR_EXP 74
58191: PUSH
58192: LD_INT 0
58194: ST_TO_ADDR
// sOil := false ;
58195: LD_ADDR_EXP 76
58199: PUSH
58200: LD_INT 0
58202: ST_TO_ADDR
// sStu := false ;
58203: LD_ADDR_EXP 80
58207: PUSH
58208: LD_INT 0
58210: ST_TO_ADDR
// sBazooka := false ;
58211: LD_ADDR_EXP 83
58215: PUSH
58216: LD_INT 0
58218: ST_TO_ADDR
// sMortar := false ;
58219: LD_ADDR_EXP 84
58223: PUSH
58224: LD_INT 0
58226: ST_TO_ADDR
// sRanger := false ;
58227: LD_ADDR_EXP 94
58231: PUSH
58232: LD_INT 0
58234: ST_TO_ADDR
// end ;
58235: LD_VAR 0 1
58239: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
58240: LD_INT 0
58242: PPUSH
58243: PPUSH
58244: PPUSH
58245: PPUSH
58246: PPUSH
// result := [ ] ;
58247: LD_ADDR_VAR 0 1
58251: PUSH
58252: EMPTY
58253: ST_TO_ADDR
// if campaign_id = 1 then
58254: LD_OWVAR 69
58258: PUSH
58259: LD_INT 1
58261: EQUAL
58262: IFFALSE 61200
// begin case mission_number of 1 :
58264: LD_OWVAR 70
58268: PUSH
58269: LD_INT 1
58271: DOUBLE
58272: EQUAL
58273: IFTRUE 58277
58275: GO 58341
58277: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
58278: LD_ADDR_VAR 0 1
58282: PUSH
58283: LD_INT 2
58285: PUSH
58286: LD_INT 4
58288: PUSH
58289: LD_INT 11
58291: PUSH
58292: LD_INT 12
58294: PUSH
58295: LD_INT 15
58297: PUSH
58298: LD_INT 16
58300: PUSH
58301: LD_INT 22
58303: PUSH
58304: LD_INT 23
58306: PUSH
58307: LD_INT 26
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 101
58323: PUSH
58324: LD_INT 102
58326: PUSH
58327: LD_INT 106
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: LIST
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: ST_TO_ADDR
58339: GO 61198
58341: LD_INT 2
58343: DOUBLE
58344: EQUAL
58345: IFTRUE 58349
58347: GO 58421
58349: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
58350: LD_ADDR_VAR 0 1
58354: PUSH
58355: LD_INT 2
58357: PUSH
58358: LD_INT 4
58360: PUSH
58361: LD_INT 11
58363: PUSH
58364: LD_INT 12
58366: PUSH
58367: LD_INT 15
58369: PUSH
58370: LD_INT 16
58372: PUSH
58373: LD_INT 22
58375: PUSH
58376: LD_INT 23
58378: PUSH
58379: LD_INT 26
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 101
58395: PUSH
58396: LD_INT 102
58398: PUSH
58399: LD_INT 105
58401: PUSH
58402: LD_INT 106
58404: PUSH
58405: LD_INT 108
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: ST_TO_ADDR
58419: GO 61198
58421: LD_INT 3
58423: DOUBLE
58424: EQUAL
58425: IFTRUE 58429
58427: GO 58505
58429: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
58430: LD_ADDR_VAR 0 1
58434: PUSH
58435: LD_INT 2
58437: PUSH
58438: LD_INT 4
58440: PUSH
58441: LD_INT 5
58443: PUSH
58444: LD_INT 11
58446: PUSH
58447: LD_INT 12
58449: PUSH
58450: LD_INT 15
58452: PUSH
58453: LD_INT 16
58455: PUSH
58456: LD_INT 22
58458: PUSH
58459: LD_INT 26
58461: PUSH
58462: LD_INT 36
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 101
58479: PUSH
58480: LD_INT 102
58482: PUSH
58483: LD_INT 105
58485: PUSH
58486: LD_INT 106
58488: PUSH
58489: LD_INT 108
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: ST_TO_ADDR
58503: GO 61198
58505: LD_INT 4
58507: DOUBLE
58508: EQUAL
58509: IFTRUE 58513
58511: GO 58597
58513: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
58514: LD_ADDR_VAR 0 1
58518: PUSH
58519: LD_INT 2
58521: PUSH
58522: LD_INT 4
58524: PUSH
58525: LD_INT 5
58527: PUSH
58528: LD_INT 8
58530: PUSH
58531: LD_INT 11
58533: PUSH
58534: LD_INT 12
58536: PUSH
58537: LD_INT 15
58539: PUSH
58540: LD_INT 16
58542: PUSH
58543: LD_INT 22
58545: PUSH
58546: LD_INT 23
58548: PUSH
58549: LD_INT 26
58551: PUSH
58552: LD_INT 36
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 101
58571: PUSH
58572: LD_INT 102
58574: PUSH
58575: LD_INT 105
58577: PUSH
58578: LD_INT 106
58580: PUSH
58581: LD_INT 108
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: ST_TO_ADDR
58595: GO 61198
58597: LD_INT 5
58599: DOUBLE
58600: EQUAL
58601: IFTRUE 58605
58603: GO 58705
58605: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
58606: LD_ADDR_VAR 0 1
58610: PUSH
58611: LD_INT 2
58613: PUSH
58614: LD_INT 4
58616: PUSH
58617: LD_INT 5
58619: PUSH
58620: LD_INT 6
58622: PUSH
58623: LD_INT 8
58625: PUSH
58626: LD_INT 11
58628: PUSH
58629: LD_INT 12
58631: PUSH
58632: LD_INT 15
58634: PUSH
58635: LD_INT 16
58637: PUSH
58638: LD_INT 22
58640: PUSH
58641: LD_INT 23
58643: PUSH
58644: LD_INT 25
58646: PUSH
58647: LD_INT 26
58649: PUSH
58650: LD_INT 36
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 101
58671: PUSH
58672: LD_INT 102
58674: PUSH
58675: LD_INT 105
58677: PUSH
58678: LD_INT 106
58680: PUSH
58681: LD_INT 108
58683: PUSH
58684: LD_INT 109
58686: PUSH
58687: LD_INT 112
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: ST_TO_ADDR
58703: GO 61198
58705: LD_INT 6
58707: DOUBLE
58708: EQUAL
58709: IFTRUE 58713
58711: GO 58833
58713: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
58714: LD_ADDR_VAR 0 1
58718: PUSH
58719: LD_INT 2
58721: PUSH
58722: LD_INT 4
58724: PUSH
58725: LD_INT 5
58727: PUSH
58728: LD_INT 6
58730: PUSH
58731: LD_INT 8
58733: PUSH
58734: LD_INT 11
58736: PUSH
58737: LD_INT 12
58739: PUSH
58740: LD_INT 15
58742: PUSH
58743: LD_INT 16
58745: PUSH
58746: LD_INT 20
58748: PUSH
58749: LD_INT 21
58751: PUSH
58752: LD_INT 22
58754: PUSH
58755: LD_INT 23
58757: PUSH
58758: LD_INT 25
58760: PUSH
58761: LD_INT 26
58763: PUSH
58764: LD_INT 30
58766: PUSH
58767: LD_INT 31
58769: PUSH
58770: LD_INT 32
58772: PUSH
58773: LD_INT 36
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 101
58799: PUSH
58800: LD_INT 102
58802: PUSH
58803: LD_INT 105
58805: PUSH
58806: LD_INT 106
58808: PUSH
58809: LD_INT 108
58811: PUSH
58812: LD_INT 109
58814: PUSH
58815: LD_INT 112
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: ST_TO_ADDR
58831: GO 61198
58833: LD_INT 7
58835: DOUBLE
58836: EQUAL
58837: IFTRUE 58841
58839: GO 58941
58841: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
58842: LD_ADDR_VAR 0 1
58846: PUSH
58847: LD_INT 2
58849: PUSH
58850: LD_INT 4
58852: PUSH
58853: LD_INT 5
58855: PUSH
58856: LD_INT 7
58858: PUSH
58859: LD_INT 11
58861: PUSH
58862: LD_INT 12
58864: PUSH
58865: LD_INT 15
58867: PUSH
58868: LD_INT 16
58870: PUSH
58871: LD_INT 20
58873: PUSH
58874: LD_INT 21
58876: PUSH
58877: LD_INT 22
58879: PUSH
58880: LD_INT 23
58882: PUSH
58883: LD_INT 25
58885: PUSH
58886: LD_INT 26
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 101
58907: PUSH
58908: LD_INT 102
58910: PUSH
58911: LD_INT 103
58913: PUSH
58914: LD_INT 105
58916: PUSH
58917: LD_INT 106
58919: PUSH
58920: LD_INT 108
58922: PUSH
58923: LD_INT 112
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: ST_TO_ADDR
58939: GO 61198
58941: LD_INT 8
58943: DOUBLE
58944: EQUAL
58945: IFTRUE 58949
58947: GO 59077
58949: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
58950: LD_ADDR_VAR 0 1
58954: PUSH
58955: LD_INT 2
58957: PUSH
58958: LD_INT 4
58960: PUSH
58961: LD_INT 5
58963: PUSH
58964: LD_INT 6
58966: PUSH
58967: LD_INT 7
58969: PUSH
58970: LD_INT 8
58972: PUSH
58973: LD_INT 11
58975: PUSH
58976: LD_INT 12
58978: PUSH
58979: LD_INT 15
58981: PUSH
58982: LD_INT 16
58984: PUSH
58985: LD_INT 20
58987: PUSH
58988: LD_INT 21
58990: PUSH
58991: LD_INT 22
58993: PUSH
58994: LD_INT 23
58996: PUSH
58997: LD_INT 25
58999: PUSH
59000: LD_INT 26
59002: PUSH
59003: LD_INT 30
59005: PUSH
59006: LD_INT 31
59008: PUSH
59009: LD_INT 32
59011: PUSH
59012: LD_INT 36
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 101
59039: PUSH
59040: LD_INT 102
59042: PUSH
59043: LD_INT 103
59045: PUSH
59046: LD_INT 105
59048: PUSH
59049: LD_INT 106
59051: PUSH
59052: LD_INT 108
59054: PUSH
59055: LD_INT 109
59057: PUSH
59058: LD_INT 112
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: ST_TO_ADDR
59075: GO 61198
59077: LD_INT 9
59079: DOUBLE
59080: EQUAL
59081: IFTRUE 59085
59083: GO 59221
59085: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
59086: LD_ADDR_VAR 0 1
59090: PUSH
59091: LD_INT 2
59093: PUSH
59094: LD_INT 4
59096: PUSH
59097: LD_INT 5
59099: PUSH
59100: LD_INT 6
59102: PUSH
59103: LD_INT 7
59105: PUSH
59106: LD_INT 8
59108: PUSH
59109: LD_INT 11
59111: PUSH
59112: LD_INT 12
59114: PUSH
59115: LD_INT 15
59117: PUSH
59118: LD_INT 16
59120: PUSH
59121: LD_INT 20
59123: PUSH
59124: LD_INT 21
59126: PUSH
59127: LD_INT 22
59129: PUSH
59130: LD_INT 23
59132: PUSH
59133: LD_INT 25
59135: PUSH
59136: LD_INT 26
59138: PUSH
59139: LD_INT 28
59141: PUSH
59142: LD_INT 30
59144: PUSH
59145: LD_INT 31
59147: PUSH
59148: LD_INT 32
59150: PUSH
59151: LD_INT 36
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 101
59179: PUSH
59180: LD_INT 102
59182: PUSH
59183: LD_INT 103
59185: PUSH
59186: LD_INT 105
59188: PUSH
59189: LD_INT 106
59191: PUSH
59192: LD_INT 108
59194: PUSH
59195: LD_INT 109
59197: PUSH
59198: LD_INT 112
59200: PUSH
59201: LD_INT 114
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: ST_TO_ADDR
59219: GO 61198
59221: LD_INT 10
59223: DOUBLE
59224: EQUAL
59225: IFTRUE 59229
59227: GO 59413
59229: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
59230: LD_ADDR_VAR 0 1
59234: PUSH
59235: LD_INT 2
59237: PUSH
59238: LD_INT 4
59240: PUSH
59241: LD_INT 5
59243: PUSH
59244: LD_INT 6
59246: PUSH
59247: LD_INT 7
59249: PUSH
59250: LD_INT 8
59252: PUSH
59253: LD_INT 9
59255: PUSH
59256: LD_INT 10
59258: PUSH
59259: LD_INT 11
59261: PUSH
59262: LD_INT 12
59264: PUSH
59265: LD_INT 13
59267: PUSH
59268: LD_INT 14
59270: PUSH
59271: LD_INT 15
59273: PUSH
59274: LD_INT 16
59276: PUSH
59277: LD_INT 17
59279: PUSH
59280: LD_INT 18
59282: PUSH
59283: LD_INT 19
59285: PUSH
59286: LD_INT 20
59288: PUSH
59289: LD_INT 21
59291: PUSH
59292: LD_INT 22
59294: PUSH
59295: LD_INT 23
59297: PUSH
59298: LD_INT 24
59300: PUSH
59301: LD_INT 25
59303: PUSH
59304: LD_INT 26
59306: PUSH
59307: LD_INT 28
59309: PUSH
59310: LD_INT 30
59312: PUSH
59313: LD_INT 31
59315: PUSH
59316: LD_INT 32
59318: PUSH
59319: LD_INT 36
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 101
59355: PUSH
59356: LD_INT 102
59358: PUSH
59359: LD_INT 103
59361: PUSH
59362: LD_INT 104
59364: PUSH
59365: LD_INT 105
59367: PUSH
59368: LD_INT 106
59370: PUSH
59371: LD_INT 107
59373: PUSH
59374: LD_INT 108
59376: PUSH
59377: LD_INT 109
59379: PUSH
59380: LD_INT 110
59382: PUSH
59383: LD_INT 111
59385: PUSH
59386: LD_INT 112
59388: PUSH
59389: LD_INT 114
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: ST_TO_ADDR
59411: GO 61198
59413: LD_INT 11
59415: DOUBLE
59416: EQUAL
59417: IFTRUE 59421
59419: GO 59613
59421: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
59422: LD_ADDR_VAR 0 1
59426: PUSH
59427: LD_INT 2
59429: PUSH
59430: LD_INT 3
59432: PUSH
59433: LD_INT 4
59435: PUSH
59436: LD_INT 5
59438: PUSH
59439: LD_INT 6
59441: PUSH
59442: LD_INT 7
59444: PUSH
59445: LD_INT 8
59447: PUSH
59448: LD_INT 9
59450: PUSH
59451: LD_INT 10
59453: PUSH
59454: LD_INT 11
59456: PUSH
59457: LD_INT 12
59459: PUSH
59460: LD_INT 13
59462: PUSH
59463: LD_INT 14
59465: PUSH
59466: LD_INT 15
59468: PUSH
59469: LD_INT 16
59471: PUSH
59472: LD_INT 17
59474: PUSH
59475: LD_INT 18
59477: PUSH
59478: LD_INT 19
59480: PUSH
59481: LD_INT 20
59483: PUSH
59484: LD_INT 21
59486: PUSH
59487: LD_INT 22
59489: PUSH
59490: LD_INT 23
59492: PUSH
59493: LD_INT 24
59495: PUSH
59496: LD_INT 25
59498: PUSH
59499: LD_INT 26
59501: PUSH
59502: LD_INT 28
59504: PUSH
59505: LD_INT 30
59507: PUSH
59508: LD_INT 31
59510: PUSH
59511: LD_INT 32
59513: PUSH
59514: LD_INT 34
59516: PUSH
59517: LD_INT 36
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 101
59555: PUSH
59556: LD_INT 102
59558: PUSH
59559: LD_INT 103
59561: PUSH
59562: LD_INT 104
59564: PUSH
59565: LD_INT 105
59567: PUSH
59568: LD_INT 106
59570: PUSH
59571: LD_INT 107
59573: PUSH
59574: LD_INT 108
59576: PUSH
59577: LD_INT 109
59579: PUSH
59580: LD_INT 110
59582: PUSH
59583: LD_INT 111
59585: PUSH
59586: LD_INT 112
59588: PUSH
59589: LD_INT 114
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: ST_TO_ADDR
59611: GO 61198
59613: LD_INT 12
59615: DOUBLE
59616: EQUAL
59617: IFTRUE 59621
59619: GO 59829
59621: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
59622: LD_ADDR_VAR 0 1
59626: PUSH
59627: LD_INT 1
59629: PUSH
59630: LD_INT 2
59632: PUSH
59633: LD_INT 3
59635: PUSH
59636: LD_INT 4
59638: PUSH
59639: LD_INT 5
59641: PUSH
59642: LD_INT 6
59644: PUSH
59645: LD_INT 7
59647: PUSH
59648: LD_INT 8
59650: PUSH
59651: LD_INT 9
59653: PUSH
59654: LD_INT 10
59656: PUSH
59657: LD_INT 11
59659: PUSH
59660: LD_INT 12
59662: PUSH
59663: LD_INT 13
59665: PUSH
59666: LD_INT 14
59668: PUSH
59669: LD_INT 15
59671: PUSH
59672: LD_INT 16
59674: PUSH
59675: LD_INT 17
59677: PUSH
59678: LD_INT 18
59680: PUSH
59681: LD_INT 19
59683: PUSH
59684: LD_INT 20
59686: PUSH
59687: LD_INT 21
59689: PUSH
59690: LD_INT 22
59692: PUSH
59693: LD_INT 23
59695: PUSH
59696: LD_INT 24
59698: PUSH
59699: LD_INT 25
59701: PUSH
59702: LD_INT 26
59704: PUSH
59705: LD_INT 27
59707: PUSH
59708: LD_INT 28
59710: PUSH
59711: LD_INT 30
59713: PUSH
59714: LD_INT 31
59716: PUSH
59717: LD_INT 32
59719: PUSH
59720: LD_INT 33
59722: PUSH
59723: LD_INT 34
59725: PUSH
59726: LD_INT 36
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 101
59767: PUSH
59768: LD_INT 102
59770: PUSH
59771: LD_INT 103
59773: PUSH
59774: LD_INT 104
59776: PUSH
59777: LD_INT 105
59779: PUSH
59780: LD_INT 106
59782: PUSH
59783: LD_INT 107
59785: PUSH
59786: LD_INT 108
59788: PUSH
59789: LD_INT 109
59791: PUSH
59792: LD_INT 110
59794: PUSH
59795: LD_INT 111
59797: PUSH
59798: LD_INT 112
59800: PUSH
59801: LD_INT 113
59803: PUSH
59804: LD_INT 114
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: ST_TO_ADDR
59827: GO 61198
59829: LD_INT 13
59831: DOUBLE
59832: EQUAL
59833: IFTRUE 59837
59835: GO 60033
59837: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
59838: LD_ADDR_VAR 0 1
59842: PUSH
59843: LD_INT 1
59845: PUSH
59846: LD_INT 2
59848: PUSH
59849: LD_INT 3
59851: PUSH
59852: LD_INT 4
59854: PUSH
59855: LD_INT 5
59857: PUSH
59858: LD_INT 8
59860: PUSH
59861: LD_INT 9
59863: PUSH
59864: LD_INT 10
59866: PUSH
59867: LD_INT 11
59869: PUSH
59870: LD_INT 12
59872: PUSH
59873: LD_INT 14
59875: PUSH
59876: LD_INT 15
59878: PUSH
59879: LD_INT 16
59881: PUSH
59882: LD_INT 17
59884: PUSH
59885: LD_INT 18
59887: PUSH
59888: LD_INT 19
59890: PUSH
59891: LD_INT 20
59893: PUSH
59894: LD_INT 21
59896: PUSH
59897: LD_INT 22
59899: PUSH
59900: LD_INT 23
59902: PUSH
59903: LD_INT 24
59905: PUSH
59906: LD_INT 25
59908: PUSH
59909: LD_INT 26
59911: PUSH
59912: LD_INT 27
59914: PUSH
59915: LD_INT 28
59917: PUSH
59918: LD_INT 30
59920: PUSH
59921: LD_INT 31
59923: PUSH
59924: LD_INT 32
59926: PUSH
59927: LD_INT 33
59929: PUSH
59930: LD_INT 34
59932: PUSH
59933: LD_INT 36
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 101
59971: PUSH
59972: LD_INT 102
59974: PUSH
59975: LD_INT 103
59977: PUSH
59978: LD_INT 104
59980: PUSH
59981: LD_INT 105
59983: PUSH
59984: LD_INT 106
59986: PUSH
59987: LD_INT 107
59989: PUSH
59990: LD_INT 108
59992: PUSH
59993: LD_INT 109
59995: PUSH
59996: LD_INT 110
59998: PUSH
59999: LD_INT 111
60001: PUSH
60002: LD_INT 112
60004: PUSH
60005: LD_INT 113
60007: PUSH
60008: LD_INT 114
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: ST_TO_ADDR
60031: GO 61198
60033: LD_INT 14
60035: DOUBLE
60036: EQUAL
60037: IFTRUE 60041
60039: GO 60253
60041: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
60042: LD_ADDR_VAR 0 1
60046: PUSH
60047: LD_INT 1
60049: PUSH
60050: LD_INT 2
60052: PUSH
60053: LD_INT 3
60055: PUSH
60056: LD_INT 4
60058: PUSH
60059: LD_INT 5
60061: PUSH
60062: LD_INT 6
60064: PUSH
60065: LD_INT 7
60067: PUSH
60068: LD_INT 8
60070: PUSH
60071: LD_INT 9
60073: PUSH
60074: LD_INT 10
60076: PUSH
60077: LD_INT 11
60079: PUSH
60080: LD_INT 12
60082: PUSH
60083: LD_INT 13
60085: PUSH
60086: LD_INT 14
60088: PUSH
60089: LD_INT 15
60091: PUSH
60092: LD_INT 16
60094: PUSH
60095: LD_INT 17
60097: PUSH
60098: LD_INT 18
60100: PUSH
60101: LD_INT 19
60103: PUSH
60104: LD_INT 20
60106: PUSH
60107: LD_INT 21
60109: PUSH
60110: LD_INT 22
60112: PUSH
60113: LD_INT 23
60115: PUSH
60116: LD_INT 24
60118: PUSH
60119: LD_INT 25
60121: PUSH
60122: LD_INT 26
60124: PUSH
60125: LD_INT 27
60127: PUSH
60128: LD_INT 28
60130: PUSH
60131: LD_INT 29
60133: PUSH
60134: LD_INT 30
60136: PUSH
60137: LD_INT 31
60139: PUSH
60140: LD_INT 32
60142: PUSH
60143: LD_INT 33
60145: PUSH
60146: LD_INT 34
60148: PUSH
60149: LD_INT 36
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 101
60191: PUSH
60192: LD_INT 102
60194: PUSH
60195: LD_INT 103
60197: PUSH
60198: LD_INT 104
60200: PUSH
60201: LD_INT 105
60203: PUSH
60204: LD_INT 106
60206: PUSH
60207: LD_INT 107
60209: PUSH
60210: LD_INT 108
60212: PUSH
60213: LD_INT 109
60215: PUSH
60216: LD_INT 110
60218: PUSH
60219: LD_INT 111
60221: PUSH
60222: LD_INT 112
60224: PUSH
60225: LD_INT 113
60227: PUSH
60228: LD_INT 114
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: ST_TO_ADDR
60251: GO 61198
60253: LD_INT 15
60255: DOUBLE
60256: EQUAL
60257: IFTRUE 60261
60259: GO 60473
60261: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
60262: LD_ADDR_VAR 0 1
60266: PUSH
60267: LD_INT 1
60269: PUSH
60270: LD_INT 2
60272: PUSH
60273: LD_INT 3
60275: PUSH
60276: LD_INT 4
60278: PUSH
60279: LD_INT 5
60281: PUSH
60282: LD_INT 6
60284: PUSH
60285: LD_INT 7
60287: PUSH
60288: LD_INT 8
60290: PUSH
60291: LD_INT 9
60293: PUSH
60294: LD_INT 10
60296: PUSH
60297: LD_INT 11
60299: PUSH
60300: LD_INT 12
60302: PUSH
60303: LD_INT 13
60305: PUSH
60306: LD_INT 14
60308: PUSH
60309: LD_INT 15
60311: PUSH
60312: LD_INT 16
60314: PUSH
60315: LD_INT 17
60317: PUSH
60318: LD_INT 18
60320: PUSH
60321: LD_INT 19
60323: PUSH
60324: LD_INT 20
60326: PUSH
60327: LD_INT 21
60329: PUSH
60330: LD_INT 22
60332: PUSH
60333: LD_INT 23
60335: PUSH
60336: LD_INT 24
60338: PUSH
60339: LD_INT 25
60341: PUSH
60342: LD_INT 26
60344: PUSH
60345: LD_INT 27
60347: PUSH
60348: LD_INT 28
60350: PUSH
60351: LD_INT 29
60353: PUSH
60354: LD_INT 30
60356: PUSH
60357: LD_INT 31
60359: PUSH
60360: LD_INT 32
60362: PUSH
60363: LD_INT 33
60365: PUSH
60366: LD_INT 34
60368: PUSH
60369: LD_INT 36
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 101
60411: PUSH
60412: LD_INT 102
60414: PUSH
60415: LD_INT 103
60417: PUSH
60418: LD_INT 104
60420: PUSH
60421: LD_INT 105
60423: PUSH
60424: LD_INT 106
60426: PUSH
60427: LD_INT 107
60429: PUSH
60430: LD_INT 108
60432: PUSH
60433: LD_INT 109
60435: PUSH
60436: LD_INT 110
60438: PUSH
60439: LD_INT 111
60441: PUSH
60442: LD_INT 112
60444: PUSH
60445: LD_INT 113
60447: PUSH
60448: LD_INT 114
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: ST_TO_ADDR
60471: GO 61198
60473: LD_INT 16
60475: DOUBLE
60476: EQUAL
60477: IFTRUE 60481
60479: GO 60605
60481: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
60482: LD_ADDR_VAR 0 1
60486: PUSH
60487: LD_INT 2
60489: PUSH
60490: LD_INT 4
60492: PUSH
60493: LD_INT 5
60495: PUSH
60496: LD_INT 7
60498: PUSH
60499: LD_INT 11
60501: PUSH
60502: LD_INT 12
60504: PUSH
60505: LD_INT 15
60507: PUSH
60508: LD_INT 16
60510: PUSH
60511: LD_INT 20
60513: PUSH
60514: LD_INT 21
60516: PUSH
60517: LD_INT 22
60519: PUSH
60520: LD_INT 23
60522: PUSH
60523: LD_INT 25
60525: PUSH
60526: LD_INT 26
60528: PUSH
60529: LD_INT 30
60531: PUSH
60532: LD_INT 31
60534: PUSH
60535: LD_INT 32
60537: PUSH
60538: LD_INT 33
60540: PUSH
60541: LD_INT 34
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 101
60567: PUSH
60568: LD_INT 102
60570: PUSH
60571: LD_INT 103
60573: PUSH
60574: LD_INT 106
60576: PUSH
60577: LD_INT 108
60579: PUSH
60580: LD_INT 112
60582: PUSH
60583: LD_INT 113
60585: PUSH
60586: LD_INT 114
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: ST_TO_ADDR
60603: GO 61198
60605: LD_INT 17
60607: DOUBLE
60608: EQUAL
60609: IFTRUE 60613
60611: GO 60825
60613: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
60614: LD_ADDR_VAR 0 1
60618: PUSH
60619: LD_INT 1
60621: PUSH
60622: LD_INT 2
60624: PUSH
60625: LD_INT 3
60627: PUSH
60628: LD_INT 4
60630: PUSH
60631: LD_INT 5
60633: PUSH
60634: LD_INT 6
60636: PUSH
60637: LD_INT 7
60639: PUSH
60640: LD_INT 8
60642: PUSH
60643: LD_INT 9
60645: PUSH
60646: LD_INT 10
60648: PUSH
60649: LD_INT 11
60651: PUSH
60652: LD_INT 12
60654: PUSH
60655: LD_INT 13
60657: PUSH
60658: LD_INT 14
60660: PUSH
60661: LD_INT 15
60663: PUSH
60664: LD_INT 16
60666: PUSH
60667: LD_INT 17
60669: PUSH
60670: LD_INT 18
60672: PUSH
60673: LD_INT 19
60675: PUSH
60676: LD_INT 20
60678: PUSH
60679: LD_INT 21
60681: PUSH
60682: LD_INT 22
60684: PUSH
60685: LD_INT 23
60687: PUSH
60688: LD_INT 24
60690: PUSH
60691: LD_INT 25
60693: PUSH
60694: LD_INT 26
60696: PUSH
60697: LD_INT 27
60699: PUSH
60700: LD_INT 28
60702: PUSH
60703: LD_INT 29
60705: PUSH
60706: LD_INT 30
60708: PUSH
60709: LD_INT 31
60711: PUSH
60712: LD_INT 32
60714: PUSH
60715: LD_INT 33
60717: PUSH
60718: LD_INT 34
60720: PUSH
60721: LD_INT 36
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 101
60763: PUSH
60764: LD_INT 102
60766: PUSH
60767: LD_INT 103
60769: PUSH
60770: LD_INT 104
60772: PUSH
60773: LD_INT 105
60775: PUSH
60776: LD_INT 106
60778: PUSH
60779: LD_INT 107
60781: PUSH
60782: LD_INT 108
60784: PUSH
60785: LD_INT 109
60787: PUSH
60788: LD_INT 110
60790: PUSH
60791: LD_INT 111
60793: PUSH
60794: LD_INT 112
60796: PUSH
60797: LD_INT 113
60799: PUSH
60800: LD_INT 114
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: ST_TO_ADDR
60823: GO 61198
60825: LD_INT 18
60827: DOUBLE
60828: EQUAL
60829: IFTRUE 60833
60831: GO 60969
60833: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
60834: LD_ADDR_VAR 0 1
60838: PUSH
60839: LD_INT 2
60841: PUSH
60842: LD_INT 4
60844: PUSH
60845: LD_INT 5
60847: PUSH
60848: LD_INT 7
60850: PUSH
60851: LD_INT 11
60853: PUSH
60854: LD_INT 12
60856: PUSH
60857: LD_INT 15
60859: PUSH
60860: LD_INT 16
60862: PUSH
60863: LD_INT 20
60865: PUSH
60866: LD_INT 21
60868: PUSH
60869: LD_INT 22
60871: PUSH
60872: LD_INT 23
60874: PUSH
60875: LD_INT 25
60877: PUSH
60878: LD_INT 26
60880: PUSH
60881: LD_INT 30
60883: PUSH
60884: LD_INT 31
60886: PUSH
60887: LD_INT 32
60889: PUSH
60890: LD_INT 33
60892: PUSH
60893: LD_INT 34
60895: PUSH
60896: LD_INT 35
60898: PUSH
60899: LD_INT 36
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 101
60927: PUSH
60928: LD_INT 102
60930: PUSH
60931: LD_INT 103
60933: PUSH
60934: LD_INT 106
60936: PUSH
60937: LD_INT 108
60939: PUSH
60940: LD_INT 112
60942: PUSH
60943: LD_INT 113
60945: PUSH
60946: LD_INT 114
60948: PUSH
60949: LD_INT 115
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: ST_TO_ADDR
60967: GO 61198
60969: LD_INT 19
60971: DOUBLE
60972: EQUAL
60973: IFTRUE 60977
60975: GO 61197
60977: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
60978: LD_ADDR_VAR 0 1
60982: PUSH
60983: LD_INT 1
60985: PUSH
60986: LD_INT 2
60988: PUSH
60989: LD_INT 3
60991: PUSH
60992: LD_INT 4
60994: PUSH
60995: LD_INT 5
60997: PUSH
60998: LD_INT 6
61000: PUSH
61001: LD_INT 7
61003: PUSH
61004: LD_INT 8
61006: PUSH
61007: LD_INT 9
61009: PUSH
61010: LD_INT 10
61012: PUSH
61013: LD_INT 11
61015: PUSH
61016: LD_INT 12
61018: PUSH
61019: LD_INT 13
61021: PUSH
61022: LD_INT 14
61024: PUSH
61025: LD_INT 15
61027: PUSH
61028: LD_INT 16
61030: PUSH
61031: LD_INT 17
61033: PUSH
61034: LD_INT 18
61036: PUSH
61037: LD_INT 19
61039: PUSH
61040: LD_INT 20
61042: PUSH
61043: LD_INT 21
61045: PUSH
61046: LD_INT 22
61048: PUSH
61049: LD_INT 23
61051: PUSH
61052: LD_INT 24
61054: PUSH
61055: LD_INT 25
61057: PUSH
61058: LD_INT 26
61060: PUSH
61061: LD_INT 27
61063: PUSH
61064: LD_INT 28
61066: PUSH
61067: LD_INT 29
61069: PUSH
61070: LD_INT 30
61072: PUSH
61073: LD_INT 31
61075: PUSH
61076: LD_INT 32
61078: PUSH
61079: LD_INT 33
61081: PUSH
61082: LD_INT 34
61084: PUSH
61085: LD_INT 35
61087: PUSH
61088: LD_INT 36
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 101
61131: PUSH
61132: LD_INT 102
61134: PUSH
61135: LD_INT 103
61137: PUSH
61138: LD_INT 104
61140: PUSH
61141: LD_INT 105
61143: PUSH
61144: LD_INT 106
61146: PUSH
61147: LD_INT 107
61149: PUSH
61150: LD_INT 108
61152: PUSH
61153: LD_INT 109
61155: PUSH
61156: LD_INT 110
61158: PUSH
61159: LD_INT 111
61161: PUSH
61162: LD_INT 112
61164: PUSH
61165: LD_INT 113
61167: PUSH
61168: LD_INT 114
61170: PUSH
61171: LD_INT 115
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: ST_TO_ADDR
61195: GO 61198
61197: POP
// end else
61198: GO 61417
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
61200: LD_ADDR_VAR 0 1
61204: PUSH
61205: LD_INT 1
61207: PUSH
61208: LD_INT 2
61210: PUSH
61211: LD_INT 3
61213: PUSH
61214: LD_INT 4
61216: PUSH
61217: LD_INT 5
61219: PUSH
61220: LD_INT 6
61222: PUSH
61223: LD_INT 7
61225: PUSH
61226: LD_INT 8
61228: PUSH
61229: LD_INT 9
61231: PUSH
61232: LD_INT 10
61234: PUSH
61235: LD_INT 11
61237: PUSH
61238: LD_INT 12
61240: PUSH
61241: LD_INT 13
61243: PUSH
61244: LD_INT 14
61246: PUSH
61247: LD_INT 15
61249: PUSH
61250: LD_INT 16
61252: PUSH
61253: LD_INT 17
61255: PUSH
61256: LD_INT 18
61258: PUSH
61259: LD_INT 19
61261: PUSH
61262: LD_INT 20
61264: PUSH
61265: LD_INT 21
61267: PUSH
61268: LD_INT 22
61270: PUSH
61271: LD_INT 23
61273: PUSH
61274: LD_INT 24
61276: PUSH
61277: LD_INT 25
61279: PUSH
61280: LD_INT 26
61282: PUSH
61283: LD_INT 27
61285: PUSH
61286: LD_INT 28
61288: PUSH
61289: LD_INT 29
61291: PUSH
61292: LD_INT 30
61294: PUSH
61295: LD_INT 31
61297: PUSH
61298: LD_INT 32
61300: PUSH
61301: LD_INT 33
61303: PUSH
61304: LD_INT 34
61306: PUSH
61307: LD_INT 35
61309: PUSH
61310: LD_INT 36
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 101
61353: PUSH
61354: LD_INT 102
61356: PUSH
61357: LD_INT 103
61359: PUSH
61360: LD_INT 104
61362: PUSH
61363: LD_INT 105
61365: PUSH
61366: LD_INT 106
61368: PUSH
61369: LD_INT 107
61371: PUSH
61372: LD_INT 108
61374: PUSH
61375: LD_INT 109
61377: PUSH
61378: LD_INT 110
61380: PUSH
61381: LD_INT 111
61383: PUSH
61384: LD_INT 112
61386: PUSH
61387: LD_INT 113
61389: PUSH
61390: LD_INT 114
61392: PUSH
61393: LD_INT 115
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: ST_TO_ADDR
// if result then
61417: LD_VAR 0 1
61421: IFFALSE 61710
// begin normal :=  ;
61423: LD_ADDR_VAR 0 3
61427: PUSH
61428: LD_STRING 
61430: ST_TO_ADDR
// hardcore :=  ;
61431: LD_ADDR_VAR 0 4
61435: PUSH
61436: LD_STRING 
61438: ST_TO_ADDR
// for i = 1 to normalCounter do
61439: LD_ADDR_VAR 0 5
61443: PUSH
61444: DOUBLE
61445: LD_INT 1
61447: DEC
61448: ST_TO_ADDR
61449: LD_EXP 42
61453: PUSH
61454: FOR_TO
61455: IFFALSE 61556
// begin tmp := 0 ;
61457: LD_ADDR_VAR 0 2
61461: PUSH
61462: LD_STRING 0
61464: ST_TO_ADDR
// if result [ 1 ] then
61465: LD_VAR 0 1
61469: PUSH
61470: LD_INT 1
61472: ARRAY
61473: IFFALSE 61538
// if result [ 1 ] [ 1 ] = i then
61475: LD_VAR 0 1
61479: PUSH
61480: LD_INT 1
61482: ARRAY
61483: PUSH
61484: LD_INT 1
61486: ARRAY
61487: PUSH
61488: LD_VAR 0 5
61492: EQUAL
61493: IFFALSE 61538
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
61495: LD_ADDR_VAR 0 1
61499: PUSH
61500: LD_VAR 0 1
61504: PPUSH
61505: LD_INT 1
61507: PPUSH
61508: LD_VAR 0 1
61512: PUSH
61513: LD_INT 1
61515: ARRAY
61516: PPUSH
61517: LD_INT 1
61519: PPUSH
61520: CALL_OW 3
61524: PPUSH
61525: CALL_OW 1
61529: ST_TO_ADDR
// tmp := 1 ;
61530: LD_ADDR_VAR 0 2
61534: PUSH
61535: LD_STRING 1
61537: ST_TO_ADDR
// end ; normal := normal & tmp ;
61538: LD_ADDR_VAR 0 3
61542: PUSH
61543: LD_VAR 0 3
61547: PUSH
61548: LD_VAR 0 2
61552: STR
61553: ST_TO_ADDR
// end ;
61554: GO 61454
61556: POP
61557: POP
// for i = 1 to hardcoreCounter do
61558: LD_ADDR_VAR 0 5
61562: PUSH
61563: DOUBLE
61564: LD_INT 1
61566: DEC
61567: ST_TO_ADDR
61568: LD_EXP 43
61572: PUSH
61573: FOR_TO
61574: IFFALSE 61679
// begin tmp := 0 ;
61576: LD_ADDR_VAR 0 2
61580: PUSH
61581: LD_STRING 0
61583: ST_TO_ADDR
// if result [ 2 ] then
61584: LD_VAR 0 1
61588: PUSH
61589: LD_INT 2
61591: ARRAY
61592: IFFALSE 61661
// if result [ 2 ] [ 1 ] = 100 + i then
61594: LD_VAR 0 1
61598: PUSH
61599: LD_INT 2
61601: ARRAY
61602: PUSH
61603: LD_INT 1
61605: ARRAY
61606: PUSH
61607: LD_INT 100
61609: PUSH
61610: LD_VAR 0 5
61614: PLUS
61615: EQUAL
61616: IFFALSE 61661
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
61618: LD_ADDR_VAR 0 1
61622: PUSH
61623: LD_VAR 0 1
61627: PPUSH
61628: LD_INT 2
61630: PPUSH
61631: LD_VAR 0 1
61635: PUSH
61636: LD_INT 2
61638: ARRAY
61639: PPUSH
61640: LD_INT 1
61642: PPUSH
61643: CALL_OW 3
61647: PPUSH
61648: CALL_OW 1
61652: ST_TO_ADDR
// tmp := 1 ;
61653: LD_ADDR_VAR 0 2
61657: PUSH
61658: LD_STRING 1
61660: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
61661: LD_ADDR_VAR 0 4
61665: PUSH
61666: LD_VAR 0 4
61670: PUSH
61671: LD_VAR 0 2
61675: STR
61676: ST_TO_ADDR
// end ;
61677: GO 61573
61679: POP
61680: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
61681: LD_STRING getStreamItemsFromMission("
61683: PUSH
61684: LD_VAR 0 3
61688: STR
61689: PUSH
61690: LD_STRING ","
61692: STR
61693: PUSH
61694: LD_VAR 0 4
61698: STR
61699: PUSH
61700: LD_STRING ")
61702: STR
61703: PPUSH
61704: CALL_OW 559
// end else
61708: GO 61717
// ToLua ( getStreamItemsFromMission("","") ) ;
61710: LD_STRING getStreamItemsFromMission("","")
61712: PPUSH
61713: CALL_OW 559
// end ;
61717: LD_VAR 0 1
61721: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
61722: LD_EXP 41
61726: PUSH
61727: LD_EXP 46
61731: AND
61732: IFFALSE 61856
61734: GO 61736
61736: DISABLE
61737: LD_INT 0
61739: PPUSH
61740: PPUSH
// begin enable ;
61741: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
61742: LD_ADDR_VAR 0 2
61746: PUSH
61747: LD_INT 22
61749: PUSH
61750: LD_OWVAR 2
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 2
61761: PUSH
61762: LD_INT 34
61764: PUSH
61765: LD_INT 7
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 34
61774: PUSH
61775: LD_INT 45
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 34
61784: PUSH
61785: LD_INT 28
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 34
61794: PUSH
61795: LD_INT 47
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PPUSH
61813: CALL_OW 69
61817: ST_TO_ADDR
// if not tmp then
61818: LD_VAR 0 2
61822: NOT
61823: IFFALSE 61827
// exit ;
61825: GO 61856
// for i in tmp do
61827: LD_ADDR_VAR 0 1
61831: PUSH
61832: LD_VAR 0 2
61836: PUSH
61837: FOR_IN
61838: IFFALSE 61854
// begin SetLives ( i , 0 ) ;
61840: LD_VAR 0 1
61844: PPUSH
61845: LD_INT 0
61847: PPUSH
61848: CALL_OW 234
// end ;
61852: GO 61837
61854: POP
61855: POP
// end ;
61856: PPOPN 2
61858: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
61859: LD_EXP 41
61863: PUSH
61864: LD_EXP 47
61868: AND
61869: IFFALSE 61953
61871: GO 61873
61873: DISABLE
61874: LD_INT 0
61876: PPUSH
61877: PPUSH
// begin enable ;
61878: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
61879: LD_ADDR_VAR 0 2
61883: PUSH
61884: LD_INT 22
61886: PUSH
61887: LD_OWVAR 2
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 32
61898: PUSH
61899: LD_INT 3
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PPUSH
61910: CALL_OW 69
61914: ST_TO_ADDR
// if not tmp then
61915: LD_VAR 0 2
61919: NOT
61920: IFFALSE 61924
// exit ;
61922: GO 61953
// for i in tmp do
61924: LD_ADDR_VAR 0 1
61928: PUSH
61929: LD_VAR 0 2
61933: PUSH
61934: FOR_IN
61935: IFFALSE 61951
// begin SetLives ( i , 0 ) ;
61937: LD_VAR 0 1
61941: PPUSH
61942: LD_INT 0
61944: PPUSH
61945: CALL_OW 234
// end ;
61949: GO 61934
61951: POP
61952: POP
// end ;
61953: PPOPN 2
61955: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
61956: LD_EXP 41
61960: PUSH
61961: LD_EXP 44
61965: AND
61966: IFFALSE 62059
61968: GO 61970
61970: DISABLE
61971: LD_INT 0
61973: PPUSH
// begin enable ;
61974: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
61975: LD_ADDR_VAR 0 1
61979: PUSH
61980: LD_INT 22
61982: PUSH
61983: LD_OWVAR 2
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 2
61994: PUSH
61995: LD_INT 25
61997: PUSH
61998: LD_INT 5
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 25
62007: PUSH
62008: LD_INT 9
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 25
62017: PUSH
62018: LD_INT 8
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PPUSH
62035: CALL_OW 69
62039: PUSH
62040: FOR_IN
62041: IFFALSE 62057
// begin SetClass ( i , 1 ) ;
62043: LD_VAR 0 1
62047: PPUSH
62048: LD_INT 1
62050: PPUSH
62051: CALL_OW 336
// end ;
62055: GO 62040
62057: POP
62058: POP
// end ;
62059: PPOPN 1
62061: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
62062: LD_EXP 41
62066: PUSH
62067: LD_EXP 45
62071: AND
62072: PUSH
62073: LD_OWVAR 65
62077: PUSH
62078: LD_INT 7
62080: LESS
62081: AND
62082: IFFALSE 62096
62084: GO 62086
62086: DISABLE
// begin enable ;
62087: ENABLE
// game_speed := 7 ;
62088: LD_ADDR_OWVAR 65
62092: PUSH
62093: LD_INT 7
62095: ST_TO_ADDR
// end ;
62096: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
62097: LD_EXP 41
62101: PUSH
62102: LD_EXP 48
62106: AND
62107: IFFALSE 62309
62109: GO 62111
62111: DISABLE
62112: LD_INT 0
62114: PPUSH
62115: PPUSH
62116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
62117: LD_ADDR_VAR 0 3
62121: PUSH
62122: LD_INT 81
62124: PUSH
62125: LD_OWVAR 2
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 21
62136: PUSH
62137: LD_INT 1
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PPUSH
62148: CALL_OW 69
62152: ST_TO_ADDR
// if not tmp then
62153: LD_VAR 0 3
62157: NOT
62158: IFFALSE 62162
// exit ;
62160: GO 62309
// if tmp > 5 then
62162: LD_VAR 0 3
62166: PUSH
62167: LD_INT 5
62169: GREATER
62170: IFFALSE 62182
// k := 5 else
62172: LD_ADDR_VAR 0 2
62176: PUSH
62177: LD_INT 5
62179: ST_TO_ADDR
62180: GO 62192
// k := tmp ;
62182: LD_ADDR_VAR 0 2
62186: PUSH
62187: LD_VAR 0 3
62191: ST_TO_ADDR
// for i := 1 to k do
62192: LD_ADDR_VAR 0 1
62196: PUSH
62197: DOUBLE
62198: LD_INT 1
62200: DEC
62201: ST_TO_ADDR
62202: LD_VAR 0 2
62206: PUSH
62207: FOR_TO
62208: IFFALSE 62307
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
62210: LD_VAR 0 3
62214: PUSH
62215: LD_VAR 0 1
62219: ARRAY
62220: PPUSH
62221: LD_VAR 0 1
62225: PUSH
62226: LD_INT 4
62228: MOD
62229: PUSH
62230: LD_INT 1
62232: PLUS
62233: PPUSH
62234: CALL_OW 259
62238: PUSH
62239: LD_INT 10
62241: LESS
62242: IFFALSE 62305
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
62244: LD_VAR 0 3
62248: PUSH
62249: LD_VAR 0 1
62253: ARRAY
62254: PPUSH
62255: LD_VAR 0 1
62259: PUSH
62260: LD_INT 4
62262: MOD
62263: PUSH
62264: LD_INT 1
62266: PLUS
62267: PPUSH
62268: LD_VAR 0 3
62272: PUSH
62273: LD_VAR 0 1
62277: ARRAY
62278: PPUSH
62279: LD_VAR 0 1
62283: PUSH
62284: LD_INT 4
62286: MOD
62287: PUSH
62288: LD_INT 1
62290: PLUS
62291: PPUSH
62292: CALL_OW 259
62296: PUSH
62297: LD_INT 1
62299: PLUS
62300: PPUSH
62301: CALL_OW 237
62305: GO 62207
62307: POP
62308: POP
// end ;
62309: PPOPN 3
62311: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
62312: LD_EXP 41
62316: PUSH
62317: LD_EXP 49
62321: AND
62322: IFFALSE 62342
62324: GO 62326
62326: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
62327: LD_INT 4
62329: PPUSH
62330: LD_OWVAR 2
62334: PPUSH
62335: LD_INT 0
62337: PPUSH
62338: CALL_OW 324
62342: END
// every 0 0$1 trigger StreamModeActive and sShovel do
62343: LD_EXP 41
62347: PUSH
62348: LD_EXP 78
62352: AND
62353: IFFALSE 62373
62355: GO 62357
62357: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
62358: LD_INT 19
62360: PPUSH
62361: LD_OWVAR 2
62365: PPUSH
62366: LD_INT 0
62368: PPUSH
62369: CALL_OW 324
62373: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
62374: LD_EXP 41
62378: PUSH
62379: LD_EXP 50
62383: AND
62384: IFFALSE 62486
62386: GO 62388
62388: DISABLE
62389: LD_INT 0
62391: PPUSH
62392: PPUSH
// begin enable ;
62393: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
62394: LD_ADDR_VAR 0 2
62398: PUSH
62399: LD_INT 22
62401: PUSH
62402: LD_OWVAR 2
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 2
62413: PUSH
62414: LD_INT 34
62416: PUSH
62417: LD_INT 11
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 34
62426: PUSH
62427: LD_INT 30
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: LIST
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PPUSH
62443: CALL_OW 69
62447: ST_TO_ADDR
// if not tmp then
62448: LD_VAR 0 2
62452: NOT
62453: IFFALSE 62457
// exit ;
62455: GO 62486
// for i in tmp do
62457: LD_ADDR_VAR 0 1
62461: PUSH
62462: LD_VAR 0 2
62466: PUSH
62467: FOR_IN
62468: IFFALSE 62484
// begin SetLives ( i , 0 ) ;
62470: LD_VAR 0 1
62474: PPUSH
62475: LD_INT 0
62477: PPUSH
62478: CALL_OW 234
// end ;
62482: GO 62467
62484: POP
62485: POP
// end ;
62486: PPOPN 2
62488: END
// every 0 0$1 trigger StreamModeActive and sBunker do
62489: LD_EXP 41
62493: PUSH
62494: LD_EXP 51
62498: AND
62499: IFFALSE 62519
62501: GO 62503
62503: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
62504: LD_INT 32
62506: PPUSH
62507: LD_OWVAR 2
62511: PPUSH
62512: LD_INT 0
62514: PPUSH
62515: CALL_OW 324
62519: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
62520: LD_EXP 41
62524: PUSH
62525: LD_EXP 52
62529: AND
62530: IFFALSE 62711
62532: GO 62534
62534: DISABLE
62535: LD_INT 0
62537: PPUSH
62538: PPUSH
62539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
62540: LD_ADDR_VAR 0 2
62544: PUSH
62545: LD_INT 22
62547: PUSH
62548: LD_OWVAR 2
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 33
62559: PUSH
62560: LD_INT 3
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PPUSH
62571: CALL_OW 69
62575: ST_TO_ADDR
// if not tmp then
62576: LD_VAR 0 2
62580: NOT
62581: IFFALSE 62585
// exit ;
62583: GO 62711
// side := 0 ;
62585: LD_ADDR_VAR 0 3
62589: PUSH
62590: LD_INT 0
62592: ST_TO_ADDR
// for i := 1 to 8 do
62593: LD_ADDR_VAR 0 1
62597: PUSH
62598: DOUBLE
62599: LD_INT 1
62601: DEC
62602: ST_TO_ADDR
62603: LD_INT 8
62605: PUSH
62606: FOR_TO
62607: IFFALSE 62655
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
62609: LD_OWVAR 2
62613: PUSH
62614: LD_VAR 0 1
62618: NONEQUAL
62619: PUSH
62620: LD_OWVAR 2
62624: PPUSH
62625: LD_VAR 0 1
62629: PPUSH
62630: CALL_OW 81
62634: PUSH
62635: LD_INT 2
62637: EQUAL
62638: AND
62639: IFFALSE 62653
// begin side := i ;
62641: LD_ADDR_VAR 0 3
62645: PUSH
62646: LD_VAR 0 1
62650: ST_TO_ADDR
// break ;
62651: GO 62655
// end ;
62653: GO 62606
62655: POP
62656: POP
// if not side then
62657: LD_VAR 0 3
62661: NOT
62662: IFFALSE 62666
// exit ;
62664: GO 62711
// for i := 1 to tmp do
62666: LD_ADDR_VAR 0 1
62670: PUSH
62671: DOUBLE
62672: LD_INT 1
62674: DEC
62675: ST_TO_ADDR
62676: LD_VAR 0 2
62680: PUSH
62681: FOR_TO
62682: IFFALSE 62709
// if Prob ( 60 ) then
62684: LD_INT 60
62686: PPUSH
62687: CALL_OW 13
62691: IFFALSE 62707
// SetSide ( i , side ) ;
62693: LD_VAR 0 1
62697: PPUSH
62698: LD_VAR 0 3
62702: PPUSH
62703: CALL_OW 235
62707: GO 62681
62709: POP
62710: POP
// end ;
62711: PPOPN 3
62713: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
62714: LD_EXP 41
62718: PUSH
62719: LD_EXP 54
62723: AND
62724: IFFALSE 62843
62726: GO 62728
62728: DISABLE
62729: LD_INT 0
62731: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
62732: LD_ADDR_VAR 0 1
62736: PUSH
62737: LD_INT 22
62739: PUSH
62740: LD_OWVAR 2
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 21
62751: PUSH
62752: LD_INT 1
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 3
62761: PUSH
62762: LD_INT 23
62764: PUSH
62765: LD_INT 0
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: LIST
62780: PPUSH
62781: CALL_OW 69
62785: PUSH
62786: FOR_IN
62787: IFFALSE 62841
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
62789: LD_VAR 0 1
62793: PPUSH
62794: CALL_OW 257
62798: PUSH
62799: LD_INT 1
62801: PUSH
62802: LD_INT 2
62804: PUSH
62805: LD_INT 3
62807: PUSH
62808: LD_INT 4
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: IN
62817: IFFALSE 62839
// SetClass ( un , rand ( 1 , 4 ) ) ;
62819: LD_VAR 0 1
62823: PPUSH
62824: LD_INT 1
62826: PPUSH
62827: LD_INT 4
62829: PPUSH
62830: CALL_OW 12
62834: PPUSH
62835: CALL_OW 336
62839: GO 62786
62841: POP
62842: POP
// end ;
62843: PPOPN 1
62845: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
62846: LD_EXP 41
62850: PUSH
62851: LD_EXP 53
62855: AND
62856: IFFALSE 62935
62858: GO 62860
62860: DISABLE
62861: LD_INT 0
62863: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
62864: LD_ADDR_VAR 0 1
62868: PUSH
62869: LD_INT 22
62871: PUSH
62872: LD_OWVAR 2
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 21
62883: PUSH
62884: LD_INT 3
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PPUSH
62895: CALL_OW 69
62899: ST_TO_ADDR
// if not tmp then
62900: LD_VAR 0 1
62904: NOT
62905: IFFALSE 62909
// exit ;
62907: GO 62935
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
62909: LD_VAR 0 1
62913: PUSH
62914: LD_INT 1
62916: PPUSH
62917: LD_VAR 0 1
62921: PPUSH
62922: CALL_OW 12
62926: ARRAY
62927: PPUSH
62928: LD_INT 100
62930: PPUSH
62931: CALL_OW 234
// end ;
62935: PPOPN 1
62937: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
62938: LD_EXP 41
62942: PUSH
62943: LD_EXP 55
62947: AND
62948: IFFALSE 63046
62950: GO 62952
62952: DISABLE
62953: LD_INT 0
62955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
62956: LD_ADDR_VAR 0 1
62960: PUSH
62961: LD_INT 22
62963: PUSH
62964: LD_OWVAR 2
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 21
62975: PUSH
62976: LD_INT 1
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PPUSH
62987: CALL_OW 69
62991: ST_TO_ADDR
// if not tmp then
62992: LD_VAR 0 1
62996: NOT
62997: IFFALSE 63001
// exit ;
62999: GO 63046
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
63001: LD_VAR 0 1
63005: PUSH
63006: LD_INT 1
63008: PPUSH
63009: LD_VAR 0 1
63013: PPUSH
63014: CALL_OW 12
63018: ARRAY
63019: PPUSH
63020: LD_INT 1
63022: PPUSH
63023: LD_INT 4
63025: PPUSH
63026: CALL_OW 12
63030: PPUSH
63031: LD_INT 3000
63033: PPUSH
63034: LD_INT 9000
63036: PPUSH
63037: CALL_OW 12
63041: PPUSH
63042: CALL_OW 492
// end ;
63046: PPOPN 1
63048: END
// every 0 0$1 trigger StreamModeActive and sDepot do
63049: LD_EXP 41
63053: PUSH
63054: LD_EXP 56
63058: AND
63059: IFFALSE 63079
63061: GO 63063
63063: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
63064: LD_INT 1
63066: PPUSH
63067: LD_OWVAR 2
63071: PPUSH
63072: LD_INT 0
63074: PPUSH
63075: CALL_OW 324
63079: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
63080: LD_EXP 41
63084: PUSH
63085: LD_EXP 57
63089: AND
63090: IFFALSE 63173
63092: GO 63094
63094: DISABLE
63095: LD_INT 0
63097: PPUSH
63098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
63099: LD_ADDR_VAR 0 2
63103: PUSH
63104: LD_INT 22
63106: PUSH
63107: LD_OWVAR 2
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 21
63118: PUSH
63119: LD_INT 3
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PPUSH
63130: CALL_OW 69
63134: ST_TO_ADDR
// if not tmp then
63135: LD_VAR 0 2
63139: NOT
63140: IFFALSE 63144
// exit ;
63142: GO 63173
// for i in tmp do
63144: LD_ADDR_VAR 0 1
63148: PUSH
63149: LD_VAR 0 2
63153: PUSH
63154: FOR_IN
63155: IFFALSE 63171
// SetBLevel ( i , 10 ) ;
63157: LD_VAR 0 1
63161: PPUSH
63162: LD_INT 10
63164: PPUSH
63165: CALL_OW 241
63169: GO 63154
63171: POP
63172: POP
// end ;
63173: PPOPN 2
63175: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
63176: LD_EXP 41
63180: PUSH
63181: LD_EXP 58
63185: AND
63186: IFFALSE 63297
63188: GO 63190
63190: DISABLE
63191: LD_INT 0
63193: PPUSH
63194: PPUSH
63195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63196: LD_ADDR_VAR 0 3
63200: PUSH
63201: LD_INT 22
63203: PUSH
63204: LD_OWVAR 2
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 25
63215: PUSH
63216: LD_INT 1
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PPUSH
63227: CALL_OW 69
63231: ST_TO_ADDR
// if not tmp then
63232: LD_VAR 0 3
63236: NOT
63237: IFFALSE 63241
// exit ;
63239: GO 63297
// un := tmp [ rand ( 1 , tmp ) ] ;
63241: LD_ADDR_VAR 0 2
63245: PUSH
63246: LD_VAR 0 3
63250: PUSH
63251: LD_INT 1
63253: PPUSH
63254: LD_VAR 0 3
63258: PPUSH
63259: CALL_OW 12
63263: ARRAY
63264: ST_TO_ADDR
// if Crawls ( un ) then
63265: LD_VAR 0 2
63269: PPUSH
63270: CALL_OW 318
63274: IFFALSE 63285
// ComWalk ( un ) ;
63276: LD_VAR 0 2
63280: PPUSH
63281: CALL_OW 138
// SetClass ( un , class_sniper ) ;
63285: LD_VAR 0 2
63289: PPUSH
63290: LD_INT 5
63292: PPUSH
63293: CALL_OW 336
// end ;
63297: PPOPN 3
63299: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
63300: LD_EXP 41
63304: PUSH
63305: LD_EXP 59
63309: AND
63310: PUSH
63311: LD_OWVAR 67
63315: PUSH
63316: LD_INT 3
63318: LESS
63319: AND
63320: IFFALSE 63339
63322: GO 63324
63324: DISABLE
// Difficulty := Difficulty + 1 ;
63325: LD_ADDR_OWVAR 67
63329: PUSH
63330: LD_OWVAR 67
63334: PUSH
63335: LD_INT 1
63337: PLUS
63338: ST_TO_ADDR
63339: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
63340: LD_EXP 41
63344: PUSH
63345: LD_EXP 60
63349: AND
63350: IFFALSE 63453
63352: GO 63354
63354: DISABLE
63355: LD_INT 0
63357: PPUSH
// begin for i := 1 to 5 do
63358: LD_ADDR_VAR 0 1
63362: PUSH
63363: DOUBLE
63364: LD_INT 1
63366: DEC
63367: ST_TO_ADDR
63368: LD_INT 5
63370: PUSH
63371: FOR_TO
63372: IFFALSE 63451
// begin uc_nation := nation_nature ;
63374: LD_ADDR_OWVAR 21
63378: PUSH
63379: LD_INT 0
63381: ST_TO_ADDR
// uc_side := 0 ;
63382: LD_ADDR_OWVAR 20
63386: PUSH
63387: LD_INT 0
63389: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
63390: LD_ADDR_OWVAR 29
63394: PUSH
63395: LD_INT 12
63397: PUSH
63398: LD_INT 12
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: ST_TO_ADDR
// hc_agressivity := 20 ;
63405: LD_ADDR_OWVAR 35
63409: PUSH
63410: LD_INT 20
63412: ST_TO_ADDR
// hc_class := class_tiger ;
63413: LD_ADDR_OWVAR 28
63417: PUSH
63418: LD_INT 14
63420: ST_TO_ADDR
// hc_gallery :=  ;
63421: LD_ADDR_OWVAR 33
63425: PUSH
63426: LD_STRING 
63428: ST_TO_ADDR
// hc_name :=  ;
63429: LD_ADDR_OWVAR 26
63433: PUSH
63434: LD_STRING 
63436: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
63437: CALL_OW 44
63441: PPUSH
63442: LD_INT 0
63444: PPUSH
63445: CALL_OW 51
// end ;
63449: GO 63371
63451: POP
63452: POP
// end ;
63453: PPOPN 1
63455: END
// every 0 0$1 trigger StreamModeActive and sBomb do
63456: LD_EXP 41
63460: PUSH
63461: LD_EXP 61
63465: AND
63466: IFFALSE 63475
63468: GO 63470
63470: DISABLE
// StreamSibBomb ;
63471: CALL 63476 0 0
63475: END
// export function StreamSibBomb ; var i , x , y ; begin
63476: LD_INT 0
63478: PPUSH
63479: PPUSH
63480: PPUSH
63481: PPUSH
// result := false ;
63482: LD_ADDR_VAR 0 1
63486: PUSH
63487: LD_INT 0
63489: ST_TO_ADDR
// for i := 1 to 16 do
63490: LD_ADDR_VAR 0 2
63494: PUSH
63495: DOUBLE
63496: LD_INT 1
63498: DEC
63499: ST_TO_ADDR
63500: LD_INT 16
63502: PUSH
63503: FOR_TO
63504: IFFALSE 63703
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
63506: LD_ADDR_VAR 0 3
63510: PUSH
63511: LD_INT 10
63513: PUSH
63514: LD_INT 20
63516: PUSH
63517: LD_INT 30
63519: PUSH
63520: LD_INT 40
63522: PUSH
63523: LD_INT 50
63525: PUSH
63526: LD_INT 60
63528: PUSH
63529: LD_INT 70
63531: PUSH
63532: LD_INT 80
63534: PUSH
63535: LD_INT 90
63537: PUSH
63538: LD_INT 100
63540: PUSH
63541: LD_INT 110
63543: PUSH
63544: LD_INT 120
63546: PUSH
63547: LD_INT 130
63549: PUSH
63550: LD_INT 140
63552: PUSH
63553: LD_INT 150
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 1
63575: PPUSH
63576: LD_INT 15
63578: PPUSH
63579: CALL_OW 12
63583: ARRAY
63584: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
63585: LD_ADDR_VAR 0 4
63589: PUSH
63590: LD_INT 10
63592: PUSH
63593: LD_INT 20
63595: PUSH
63596: LD_INT 30
63598: PUSH
63599: LD_INT 40
63601: PUSH
63602: LD_INT 50
63604: PUSH
63605: LD_INT 60
63607: PUSH
63608: LD_INT 70
63610: PUSH
63611: LD_INT 80
63613: PUSH
63614: LD_INT 90
63616: PUSH
63617: LD_INT 100
63619: PUSH
63620: LD_INT 110
63622: PUSH
63623: LD_INT 120
63625: PUSH
63626: LD_INT 130
63628: PUSH
63629: LD_INT 140
63631: PUSH
63632: LD_INT 150
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 1
63654: PPUSH
63655: LD_INT 15
63657: PPUSH
63658: CALL_OW 12
63662: ARRAY
63663: ST_TO_ADDR
// if ValidHex ( x , y ) then
63664: LD_VAR 0 3
63668: PPUSH
63669: LD_VAR 0 4
63673: PPUSH
63674: CALL_OW 488
63678: IFFALSE 63701
// begin result := [ x , y ] ;
63680: LD_ADDR_VAR 0 1
63684: PUSH
63685: LD_VAR 0 3
63689: PUSH
63690: LD_VAR 0 4
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: ST_TO_ADDR
// break ;
63699: GO 63703
// end ; end ;
63701: GO 63503
63703: POP
63704: POP
// if result then
63705: LD_VAR 0 1
63709: IFFALSE 63769
// begin ToLua ( playSibBomb() ) ;
63711: LD_STRING playSibBomb()
63713: PPUSH
63714: CALL_OW 559
// wait ( 0 0$14 ) ;
63718: LD_INT 490
63720: PPUSH
63721: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
63725: LD_VAR 0 1
63729: PUSH
63730: LD_INT 1
63732: ARRAY
63733: PPUSH
63734: LD_VAR 0 1
63738: PUSH
63739: LD_INT 2
63741: ARRAY
63742: PPUSH
63743: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
63747: LD_VAR 0 1
63751: PUSH
63752: LD_INT 1
63754: ARRAY
63755: PPUSH
63756: LD_VAR 0 1
63760: PUSH
63761: LD_INT 2
63763: ARRAY
63764: PPUSH
63765: CALL_OW 429
// end ; end ;
63769: LD_VAR 0 1
63773: RET
// every 0 0$1 trigger StreamModeActive and sReset do
63774: LD_EXP 41
63778: PUSH
63779: LD_EXP 63
63783: AND
63784: IFFALSE 63796
63786: GO 63788
63788: DISABLE
// YouLost (  ) ;
63789: LD_STRING 
63791: PPUSH
63792: CALL_OW 104
63796: END
// every 0 0$1 trigger StreamModeActive and sFog do
63797: LD_EXP 41
63801: PUSH
63802: LD_EXP 62
63806: AND
63807: IFFALSE 63821
63809: GO 63811
63811: DISABLE
// FogOff ( your_side ) ;
63812: LD_OWVAR 2
63816: PPUSH
63817: CALL_OW 344
63821: END
// every 0 0$1 trigger StreamModeActive and sSun do
63822: LD_EXP 41
63826: PUSH
63827: LD_EXP 64
63831: AND
63832: IFFALSE 63860
63834: GO 63836
63836: DISABLE
// begin solar_recharge_percent := 0 ;
63837: LD_ADDR_OWVAR 79
63841: PUSH
63842: LD_INT 0
63844: ST_TO_ADDR
// wait ( 5 5$00 ) ;
63845: LD_INT 10500
63847: PPUSH
63848: CALL_OW 67
// solar_recharge_percent := 100 ;
63852: LD_ADDR_OWVAR 79
63856: PUSH
63857: LD_INT 100
63859: ST_TO_ADDR
// end ;
63860: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
63861: LD_EXP 41
63865: PUSH
63866: LD_EXP 65
63870: AND
63871: IFFALSE 64110
63873: GO 63875
63875: DISABLE
63876: LD_INT 0
63878: PPUSH
63879: PPUSH
63880: PPUSH
// begin tmp := [ ] ;
63881: LD_ADDR_VAR 0 3
63885: PUSH
63886: EMPTY
63887: ST_TO_ADDR
// for i := 1 to 6 do
63888: LD_ADDR_VAR 0 1
63892: PUSH
63893: DOUBLE
63894: LD_INT 1
63896: DEC
63897: ST_TO_ADDR
63898: LD_INT 6
63900: PUSH
63901: FOR_TO
63902: IFFALSE 64007
// begin uc_nation := nation_nature ;
63904: LD_ADDR_OWVAR 21
63908: PUSH
63909: LD_INT 0
63911: ST_TO_ADDR
// uc_side := 0 ;
63912: LD_ADDR_OWVAR 20
63916: PUSH
63917: LD_INT 0
63919: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
63920: LD_ADDR_OWVAR 29
63924: PUSH
63925: LD_INT 12
63927: PUSH
63928: LD_INT 12
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: ST_TO_ADDR
// hc_agressivity := 20 ;
63935: LD_ADDR_OWVAR 35
63939: PUSH
63940: LD_INT 20
63942: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
63943: LD_ADDR_OWVAR 28
63947: PUSH
63948: LD_INT 17
63950: ST_TO_ADDR
// hc_gallery :=  ;
63951: LD_ADDR_OWVAR 33
63955: PUSH
63956: LD_STRING 
63958: ST_TO_ADDR
// hc_name :=  ;
63959: LD_ADDR_OWVAR 26
63963: PUSH
63964: LD_STRING 
63966: ST_TO_ADDR
// un := CreateHuman ;
63967: LD_ADDR_VAR 0 2
63971: PUSH
63972: CALL_OW 44
63976: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
63977: LD_VAR 0 2
63981: PPUSH
63982: LD_INT 1
63984: PPUSH
63985: CALL_OW 51
// tmp := tmp ^ un ;
63989: LD_ADDR_VAR 0 3
63993: PUSH
63994: LD_VAR 0 3
63998: PUSH
63999: LD_VAR 0 2
64003: ADD
64004: ST_TO_ADDR
// end ;
64005: GO 63901
64007: POP
64008: POP
// repeat wait ( 0 0$1 ) ;
64009: LD_INT 35
64011: PPUSH
64012: CALL_OW 67
// for un in tmp do
64016: LD_ADDR_VAR 0 2
64020: PUSH
64021: LD_VAR 0 3
64025: PUSH
64026: FOR_IN
64027: IFFALSE 64101
// begin if IsDead ( un ) then
64029: LD_VAR 0 2
64033: PPUSH
64034: CALL_OW 301
64038: IFFALSE 64058
// begin tmp := tmp diff un ;
64040: LD_ADDR_VAR 0 3
64044: PUSH
64045: LD_VAR 0 3
64049: PUSH
64050: LD_VAR 0 2
64054: DIFF
64055: ST_TO_ADDR
// continue ;
64056: GO 64026
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
64058: LD_VAR 0 2
64062: PPUSH
64063: LD_INT 3
64065: PUSH
64066: LD_INT 22
64068: PUSH
64069: LD_INT 0
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PPUSH
64080: CALL_OW 69
64084: PPUSH
64085: LD_VAR 0 2
64089: PPUSH
64090: CALL_OW 74
64094: PPUSH
64095: CALL_OW 115
// end ;
64099: GO 64026
64101: POP
64102: POP
// until not tmp ;
64103: LD_VAR 0 3
64107: NOT
64108: IFFALSE 64009
// end ;
64110: PPOPN 3
64112: END
// every 0 0$1 trigger StreamModeActive and sTroll do
64113: LD_EXP 41
64117: PUSH
64118: LD_EXP 66
64122: AND
64123: IFFALSE 64177
64125: GO 64127
64127: DISABLE
// begin ToLua ( displayTroll(); ) ;
64128: LD_STRING displayTroll();
64130: PPUSH
64131: CALL_OW 559
// wait ( 3 3$00 ) ;
64135: LD_INT 6300
64137: PPUSH
64138: CALL_OW 67
// ToLua ( hideTroll(); ) ;
64142: LD_STRING hideTroll();
64144: PPUSH
64145: CALL_OW 559
// wait ( 1 1$00 ) ;
64149: LD_INT 2100
64151: PPUSH
64152: CALL_OW 67
// ToLua ( displayTroll(); ) ;
64156: LD_STRING displayTroll();
64158: PPUSH
64159: CALL_OW 559
// wait ( 1 1$00 ) ;
64163: LD_INT 2100
64165: PPUSH
64166: CALL_OW 67
// ToLua ( hideTroll(); ) ;
64170: LD_STRING hideTroll();
64172: PPUSH
64173: CALL_OW 559
// end ;
64177: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
64178: LD_EXP 41
64182: PUSH
64183: LD_EXP 67
64187: AND
64188: IFFALSE 64251
64190: GO 64192
64192: DISABLE
64193: LD_INT 0
64195: PPUSH
// begin p := 0 ;
64196: LD_ADDR_VAR 0 1
64200: PUSH
64201: LD_INT 0
64203: ST_TO_ADDR
// repeat game_speed := 1 ;
64204: LD_ADDR_OWVAR 65
64208: PUSH
64209: LD_INT 1
64211: ST_TO_ADDR
// wait ( 0 0$1 ) ;
64212: LD_INT 35
64214: PPUSH
64215: CALL_OW 67
// p := p + 1 ;
64219: LD_ADDR_VAR 0 1
64223: PUSH
64224: LD_VAR 0 1
64228: PUSH
64229: LD_INT 1
64231: PLUS
64232: ST_TO_ADDR
// until p >= 60 ;
64233: LD_VAR 0 1
64237: PUSH
64238: LD_INT 60
64240: GREATEREQUAL
64241: IFFALSE 64204
// game_speed := 4 ;
64243: LD_ADDR_OWVAR 65
64247: PUSH
64248: LD_INT 4
64250: ST_TO_ADDR
// end ;
64251: PPOPN 1
64253: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
64254: LD_EXP 41
64258: PUSH
64259: LD_EXP 68
64263: AND
64264: IFFALSE 64410
64266: GO 64268
64268: DISABLE
64269: LD_INT 0
64271: PPUSH
64272: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
64273: LD_ADDR_VAR 0 1
64277: PUSH
64278: LD_INT 22
64280: PUSH
64281: LD_OWVAR 2
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 2
64292: PUSH
64293: LD_INT 30
64295: PUSH
64296: LD_INT 0
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 30
64305: PUSH
64306: LD_INT 1
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: LIST
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PPUSH
64322: CALL_OW 69
64326: ST_TO_ADDR
// if not depot then
64327: LD_VAR 0 1
64331: NOT
64332: IFFALSE 64336
// exit ;
64334: GO 64410
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
64336: LD_ADDR_VAR 0 2
64340: PUSH
64341: LD_VAR 0 1
64345: PUSH
64346: LD_INT 1
64348: PPUSH
64349: LD_VAR 0 1
64353: PPUSH
64354: CALL_OW 12
64358: ARRAY
64359: PPUSH
64360: CALL_OW 274
64364: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
64365: LD_VAR 0 2
64369: PPUSH
64370: LD_INT 1
64372: PPUSH
64373: LD_INT 0
64375: PPUSH
64376: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
64380: LD_VAR 0 2
64384: PPUSH
64385: LD_INT 2
64387: PPUSH
64388: LD_INT 0
64390: PPUSH
64391: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
64395: LD_VAR 0 2
64399: PPUSH
64400: LD_INT 3
64402: PPUSH
64403: LD_INT 0
64405: PPUSH
64406: CALL_OW 277
// end ;
64410: PPOPN 2
64412: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
64413: LD_EXP 41
64417: PUSH
64418: LD_EXP 69
64422: AND
64423: IFFALSE 64520
64425: GO 64427
64427: DISABLE
64428: LD_INT 0
64430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
64431: LD_ADDR_VAR 0 1
64435: PUSH
64436: LD_INT 22
64438: PUSH
64439: LD_OWVAR 2
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 21
64450: PUSH
64451: LD_INT 1
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 3
64460: PUSH
64461: LD_INT 23
64463: PUSH
64464: LD_INT 0
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: LIST
64479: PPUSH
64480: CALL_OW 69
64484: ST_TO_ADDR
// if not tmp then
64485: LD_VAR 0 1
64489: NOT
64490: IFFALSE 64494
// exit ;
64492: GO 64520
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
64494: LD_VAR 0 1
64498: PUSH
64499: LD_INT 1
64501: PPUSH
64502: LD_VAR 0 1
64506: PPUSH
64507: CALL_OW 12
64511: ARRAY
64512: PPUSH
64513: LD_INT 200
64515: PPUSH
64516: CALL_OW 234
// end ;
64520: PPOPN 1
64522: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
64523: LD_EXP 41
64527: PUSH
64528: LD_EXP 70
64532: AND
64533: IFFALSE 64612
64535: GO 64537
64537: DISABLE
64538: LD_INT 0
64540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
64541: LD_ADDR_VAR 0 1
64545: PUSH
64546: LD_INT 22
64548: PUSH
64549: LD_OWVAR 2
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PUSH
64558: LD_INT 21
64560: PUSH
64561: LD_INT 2
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PPUSH
64572: CALL_OW 69
64576: ST_TO_ADDR
// if not tmp then
64577: LD_VAR 0 1
64581: NOT
64582: IFFALSE 64586
// exit ;
64584: GO 64612
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
64586: LD_VAR 0 1
64590: PUSH
64591: LD_INT 1
64593: PPUSH
64594: LD_VAR 0 1
64598: PPUSH
64599: CALL_OW 12
64603: ARRAY
64604: PPUSH
64605: LD_INT 60
64607: PPUSH
64608: CALL_OW 234
// end ;
64612: PPOPN 1
64614: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
64615: LD_EXP 41
64619: PUSH
64620: LD_EXP 71
64624: AND
64625: IFFALSE 64724
64627: GO 64629
64629: DISABLE
64630: LD_INT 0
64632: PPUSH
64633: PPUSH
// begin enable ;
64634: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
64635: LD_ADDR_VAR 0 1
64639: PUSH
64640: LD_INT 22
64642: PUSH
64643: LD_OWVAR 2
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: LD_INT 61
64654: PUSH
64655: EMPTY
64656: LIST
64657: PUSH
64658: LD_INT 33
64660: PUSH
64661: LD_INT 2
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: LIST
64672: PPUSH
64673: CALL_OW 69
64677: ST_TO_ADDR
// if not tmp then
64678: LD_VAR 0 1
64682: NOT
64683: IFFALSE 64687
// exit ;
64685: GO 64724
// for i in tmp do
64687: LD_ADDR_VAR 0 2
64691: PUSH
64692: LD_VAR 0 1
64696: PUSH
64697: FOR_IN
64698: IFFALSE 64722
// if IsControledBy ( i ) then
64700: LD_VAR 0 2
64704: PPUSH
64705: CALL_OW 312
64709: IFFALSE 64720
// ComUnlink ( i ) ;
64711: LD_VAR 0 2
64715: PPUSH
64716: CALL_OW 136
64720: GO 64697
64722: POP
64723: POP
// end ;
64724: PPOPN 2
64726: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
64727: LD_EXP 41
64731: PUSH
64732: LD_EXP 72
64736: AND
64737: IFFALSE 64877
64739: GO 64741
64741: DISABLE
64742: LD_INT 0
64744: PPUSH
64745: PPUSH
// begin ToLua ( displayPowell(); ) ;
64746: LD_STRING displayPowell();
64748: PPUSH
64749: CALL_OW 559
// uc_side := 0 ;
64753: LD_ADDR_OWVAR 20
64757: PUSH
64758: LD_INT 0
64760: ST_TO_ADDR
// uc_nation := 2 ;
64761: LD_ADDR_OWVAR 21
64765: PUSH
64766: LD_INT 2
64768: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
64769: LD_ADDR_OWVAR 37
64773: PUSH
64774: LD_INT 14
64776: ST_TO_ADDR
// vc_engine := engine_siberite ;
64777: LD_ADDR_OWVAR 39
64781: PUSH
64782: LD_INT 3
64784: ST_TO_ADDR
// vc_control := control_apeman ;
64785: LD_ADDR_OWVAR 38
64789: PUSH
64790: LD_INT 5
64792: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
64793: LD_ADDR_OWVAR 40
64797: PUSH
64798: LD_INT 29
64800: ST_TO_ADDR
// un := CreateVehicle ;
64801: LD_ADDR_VAR 0 2
64805: PUSH
64806: CALL_OW 45
64810: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
64811: LD_VAR 0 2
64815: PPUSH
64816: LD_INT 1
64818: PPUSH
64819: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
64823: LD_INT 35
64825: PPUSH
64826: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
64830: LD_VAR 0 2
64834: PPUSH
64835: LD_INT 22
64837: PUSH
64838: LD_OWVAR 2
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PPUSH
64847: CALL_OW 69
64851: PPUSH
64852: LD_VAR 0 2
64856: PPUSH
64857: CALL_OW 74
64861: PPUSH
64862: CALL_OW 115
// until IsDead ( un ) ;
64866: LD_VAR 0 2
64870: PPUSH
64871: CALL_OW 301
64875: IFFALSE 64823
// end ;
64877: PPOPN 2
64879: END
// every 0 0$1 trigger StreamModeActive and sStu do
64880: LD_EXP 41
64884: PUSH
64885: LD_EXP 80
64889: AND
64890: IFFALSE 64906
64892: GO 64894
64894: DISABLE
// begin ToLua ( displayStucuk(); ) ;
64895: LD_STRING displayStucuk();
64897: PPUSH
64898: CALL_OW 559
// ResetFog ;
64902: CALL_OW 335
// end ;
64906: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
64907: LD_EXP 41
64911: PUSH
64912: LD_EXP 73
64916: AND
64917: IFFALSE 65058
64919: GO 64921
64921: DISABLE
64922: LD_INT 0
64924: PPUSH
64925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
64926: LD_ADDR_VAR 0 2
64930: PUSH
64931: LD_INT 22
64933: PUSH
64934: LD_OWVAR 2
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: LD_INT 21
64945: PUSH
64946: LD_INT 1
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PPUSH
64957: CALL_OW 69
64961: ST_TO_ADDR
// if not tmp then
64962: LD_VAR 0 2
64966: NOT
64967: IFFALSE 64971
// exit ;
64969: GO 65058
// un := tmp [ rand ( 1 , tmp ) ] ;
64971: LD_ADDR_VAR 0 1
64975: PUSH
64976: LD_VAR 0 2
64980: PUSH
64981: LD_INT 1
64983: PPUSH
64984: LD_VAR 0 2
64988: PPUSH
64989: CALL_OW 12
64993: ARRAY
64994: ST_TO_ADDR
// SetSide ( un , 0 ) ;
64995: LD_VAR 0 1
64999: PPUSH
65000: LD_INT 0
65002: PPUSH
65003: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
65007: LD_VAR 0 1
65011: PPUSH
65012: LD_OWVAR 3
65016: PUSH
65017: LD_VAR 0 1
65021: DIFF
65022: PPUSH
65023: LD_VAR 0 1
65027: PPUSH
65028: CALL_OW 74
65032: PPUSH
65033: CALL_OW 115
// wait ( 0 0$20 ) ;
65037: LD_INT 700
65039: PPUSH
65040: CALL_OW 67
// SetSide ( un , your_side ) ;
65044: LD_VAR 0 1
65048: PPUSH
65049: LD_OWVAR 2
65053: PPUSH
65054: CALL_OW 235
// end ;
65058: PPOPN 2
65060: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
65061: LD_EXP 41
65065: PUSH
65066: LD_EXP 74
65070: AND
65071: IFFALSE 65177
65073: GO 65075
65075: DISABLE
65076: LD_INT 0
65078: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
65079: LD_ADDR_VAR 0 1
65083: PUSH
65084: LD_INT 22
65086: PUSH
65087: LD_OWVAR 2
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 2
65098: PUSH
65099: LD_INT 30
65101: PUSH
65102: LD_INT 0
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 30
65111: PUSH
65112: LD_INT 1
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: LIST
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PPUSH
65128: CALL_OW 69
65132: ST_TO_ADDR
// if not depot then
65133: LD_VAR 0 1
65137: NOT
65138: IFFALSE 65142
// exit ;
65140: GO 65177
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
65142: LD_VAR 0 1
65146: PUSH
65147: LD_INT 1
65149: ARRAY
65150: PPUSH
65151: CALL_OW 250
65155: PPUSH
65156: LD_VAR 0 1
65160: PUSH
65161: LD_INT 1
65163: ARRAY
65164: PPUSH
65165: CALL_OW 251
65169: PPUSH
65170: LD_INT 70
65172: PPUSH
65173: CALL_OW 495
// end ;
65177: PPOPN 1
65179: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
65180: LD_EXP 41
65184: PUSH
65185: LD_EXP 75
65189: AND
65190: IFFALSE 65401
65192: GO 65194
65194: DISABLE
65195: LD_INT 0
65197: PPUSH
65198: PPUSH
65199: PPUSH
65200: PPUSH
65201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
65202: LD_ADDR_VAR 0 5
65206: PUSH
65207: LD_INT 22
65209: PUSH
65210: LD_OWVAR 2
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 21
65221: PUSH
65222: LD_INT 1
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PPUSH
65233: CALL_OW 69
65237: ST_TO_ADDR
// if not tmp then
65238: LD_VAR 0 5
65242: NOT
65243: IFFALSE 65247
// exit ;
65245: GO 65401
// for i in tmp do
65247: LD_ADDR_VAR 0 1
65251: PUSH
65252: LD_VAR 0 5
65256: PUSH
65257: FOR_IN
65258: IFFALSE 65399
// begin d := rand ( 0 , 5 ) ;
65260: LD_ADDR_VAR 0 4
65264: PUSH
65265: LD_INT 0
65267: PPUSH
65268: LD_INT 5
65270: PPUSH
65271: CALL_OW 12
65275: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
65276: LD_ADDR_VAR 0 2
65280: PUSH
65281: LD_VAR 0 1
65285: PPUSH
65286: CALL_OW 250
65290: PPUSH
65291: LD_VAR 0 4
65295: PPUSH
65296: LD_INT 3
65298: PPUSH
65299: LD_INT 12
65301: PPUSH
65302: CALL_OW 12
65306: PPUSH
65307: CALL_OW 272
65311: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
65312: LD_ADDR_VAR 0 3
65316: PUSH
65317: LD_VAR 0 1
65321: PPUSH
65322: CALL_OW 251
65326: PPUSH
65327: LD_VAR 0 4
65331: PPUSH
65332: LD_INT 3
65334: PPUSH
65335: LD_INT 12
65337: PPUSH
65338: CALL_OW 12
65342: PPUSH
65343: CALL_OW 273
65347: ST_TO_ADDR
// if ValidHex ( x , y ) then
65348: LD_VAR 0 2
65352: PPUSH
65353: LD_VAR 0 3
65357: PPUSH
65358: CALL_OW 488
65362: IFFALSE 65397
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
65364: LD_VAR 0 1
65368: PPUSH
65369: LD_VAR 0 2
65373: PPUSH
65374: LD_VAR 0 3
65378: PPUSH
65379: LD_INT 3
65381: PPUSH
65382: LD_INT 6
65384: PPUSH
65385: CALL_OW 12
65389: PPUSH
65390: LD_INT 1
65392: PPUSH
65393: CALL_OW 483
// end ;
65397: GO 65257
65399: POP
65400: POP
// end ;
65401: PPOPN 5
65403: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
65404: LD_EXP 41
65408: PUSH
65409: LD_EXP 76
65413: AND
65414: IFFALSE 65508
65416: GO 65418
65418: DISABLE
65419: LD_INT 0
65421: PPUSH
65422: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
65423: LD_ADDR_VAR 0 2
65427: PUSH
65428: LD_INT 22
65430: PUSH
65431: LD_OWVAR 2
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 32
65442: PUSH
65443: LD_INT 1
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 21
65452: PUSH
65453: LD_INT 2
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: LIST
65464: PPUSH
65465: CALL_OW 69
65469: ST_TO_ADDR
// if not tmp then
65470: LD_VAR 0 2
65474: NOT
65475: IFFALSE 65479
// exit ;
65477: GO 65508
// for i in tmp do
65479: LD_ADDR_VAR 0 1
65483: PUSH
65484: LD_VAR 0 2
65488: PUSH
65489: FOR_IN
65490: IFFALSE 65506
// SetFuel ( i , 0 ) ;
65492: LD_VAR 0 1
65496: PPUSH
65497: LD_INT 0
65499: PPUSH
65500: CALL_OW 240
65504: GO 65489
65506: POP
65507: POP
// end ;
65508: PPOPN 2
65510: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
65511: LD_EXP 41
65515: PUSH
65516: LD_EXP 77
65520: AND
65521: IFFALSE 65587
65523: GO 65525
65525: DISABLE
65526: LD_INT 0
65528: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
65529: LD_ADDR_VAR 0 1
65533: PUSH
65534: LD_INT 22
65536: PUSH
65537: LD_OWVAR 2
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: LD_INT 30
65548: PUSH
65549: LD_INT 29
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PPUSH
65560: CALL_OW 69
65564: ST_TO_ADDR
// if not tmp then
65565: LD_VAR 0 1
65569: NOT
65570: IFFALSE 65574
// exit ;
65572: GO 65587
// DestroyUnit ( tmp [ 1 ] ) ;
65574: LD_VAR 0 1
65578: PUSH
65579: LD_INT 1
65581: ARRAY
65582: PPUSH
65583: CALL_OW 65
// end ;
65587: PPOPN 1
65589: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
65590: LD_EXP 41
65594: PUSH
65595: LD_EXP 79
65599: AND
65600: IFFALSE 65729
65602: GO 65604
65604: DISABLE
65605: LD_INT 0
65607: PPUSH
// begin uc_side := 0 ;
65608: LD_ADDR_OWVAR 20
65612: PUSH
65613: LD_INT 0
65615: ST_TO_ADDR
// uc_nation := nation_arabian ;
65616: LD_ADDR_OWVAR 21
65620: PUSH
65621: LD_INT 2
65623: ST_TO_ADDR
// hc_gallery :=  ;
65624: LD_ADDR_OWVAR 33
65628: PUSH
65629: LD_STRING 
65631: ST_TO_ADDR
// hc_name :=  ;
65632: LD_ADDR_OWVAR 26
65636: PUSH
65637: LD_STRING 
65639: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
65640: LD_INT 1
65642: PPUSH
65643: LD_INT 11
65645: PPUSH
65646: LD_INT 10
65648: PPUSH
65649: CALL_OW 380
// un := CreateHuman ;
65653: LD_ADDR_VAR 0 1
65657: PUSH
65658: CALL_OW 44
65662: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
65663: LD_VAR 0 1
65667: PPUSH
65668: LD_INT 1
65670: PPUSH
65671: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
65675: LD_INT 35
65677: PPUSH
65678: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
65682: LD_VAR 0 1
65686: PPUSH
65687: LD_INT 22
65689: PUSH
65690: LD_OWVAR 2
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PPUSH
65699: CALL_OW 69
65703: PPUSH
65704: LD_VAR 0 1
65708: PPUSH
65709: CALL_OW 74
65713: PPUSH
65714: CALL_OW 115
// until IsDead ( un ) ;
65718: LD_VAR 0 1
65722: PPUSH
65723: CALL_OW 301
65727: IFFALSE 65675
// end ;
65729: PPOPN 1
65731: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
65732: LD_EXP 41
65736: PUSH
65737: LD_EXP 81
65741: AND
65742: IFFALSE 65754
65744: GO 65746
65746: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
65747: LD_STRING earthquake(getX(game), 0, 32)
65749: PPUSH
65750: CALL_OW 559
65754: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
65755: LD_EXP 41
65759: PUSH
65760: LD_EXP 82
65764: AND
65765: IFFALSE 65856
65767: GO 65769
65769: DISABLE
65770: LD_INT 0
65772: PPUSH
// begin enable ;
65773: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
65774: LD_ADDR_VAR 0 1
65778: PUSH
65779: LD_INT 22
65781: PUSH
65782: LD_OWVAR 2
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 21
65793: PUSH
65794: LD_INT 2
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: LD_INT 33
65803: PUSH
65804: LD_INT 3
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: LIST
65815: PPUSH
65816: CALL_OW 69
65820: ST_TO_ADDR
// if not tmp then
65821: LD_VAR 0 1
65825: NOT
65826: IFFALSE 65830
// exit ;
65828: GO 65856
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
65830: LD_VAR 0 1
65834: PUSH
65835: LD_INT 1
65837: PPUSH
65838: LD_VAR 0 1
65842: PPUSH
65843: CALL_OW 12
65847: ARRAY
65848: PPUSH
65849: LD_INT 1
65851: PPUSH
65852: CALL_OW 234
// end ;
65856: PPOPN 1
65858: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
65859: LD_EXP 41
65863: PUSH
65864: LD_EXP 83
65868: AND
65869: IFFALSE 66010
65871: GO 65873
65873: DISABLE
65874: LD_INT 0
65876: PPUSH
65877: PPUSH
65878: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65879: LD_ADDR_VAR 0 3
65883: PUSH
65884: LD_INT 22
65886: PUSH
65887: LD_OWVAR 2
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 25
65898: PUSH
65899: LD_INT 1
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PPUSH
65910: CALL_OW 69
65914: ST_TO_ADDR
// if not tmp then
65915: LD_VAR 0 3
65919: NOT
65920: IFFALSE 65924
// exit ;
65922: GO 66010
// un := tmp [ rand ( 1 , tmp ) ] ;
65924: LD_ADDR_VAR 0 2
65928: PUSH
65929: LD_VAR 0 3
65933: PUSH
65934: LD_INT 1
65936: PPUSH
65937: LD_VAR 0 3
65941: PPUSH
65942: CALL_OW 12
65946: ARRAY
65947: ST_TO_ADDR
// if Crawls ( un ) then
65948: LD_VAR 0 2
65952: PPUSH
65953: CALL_OW 318
65957: IFFALSE 65968
// ComWalk ( un ) ;
65959: LD_VAR 0 2
65963: PPUSH
65964: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
65968: LD_VAR 0 2
65972: PPUSH
65973: LD_INT 9
65975: PPUSH
65976: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
65980: LD_INT 28
65982: PPUSH
65983: LD_OWVAR 2
65987: PPUSH
65988: LD_INT 2
65990: PPUSH
65991: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
65995: LD_INT 29
65997: PPUSH
65998: LD_OWVAR 2
66002: PPUSH
66003: LD_INT 2
66005: PPUSH
66006: CALL_OW 322
// end ;
66010: PPOPN 3
66012: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
66013: LD_EXP 41
66017: PUSH
66018: LD_EXP 84
66022: AND
66023: IFFALSE 66134
66025: GO 66027
66027: DISABLE
66028: LD_INT 0
66030: PPUSH
66031: PPUSH
66032: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
66033: LD_ADDR_VAR 0 3
66037: PUSH
66038: LD_INT 22
66040: PUSH
66041: LD_OWVAR 2
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 25
66052: PUSH
66053: LD_INT 1
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: PPUSH
66064: CALL_OW 69
66068: ST_TO_ADDR
// if not tmp then
66069: LD_VAR 0 3
66073: NOT
66074: IFFALSE 66078
// exit ;
66076: GO 66134
// un := tmp [ rand ( 1 , tmp ) ] ;
66078: LD_ADDR_VAR 0 2
66082: PUSH
66083: LD_VAR 0 3
66087: PUSH
66088: LD_INT 1
66090: PPUSH
66091: LD_VAR 0 3
66095: PPUSH
66096: CALL_OW 12
66100: ARRAY
66101: ST_TO_ADDR
// if Crawls ( un ) then
66102: LD_VAR 0 2
66106: PPUSH
66107: CALL_OW 318
66111: IFFALSE 66122
// ComWalk ( un ) ;
66113: LD_VAR 0 2
66117: PPUSH
66118: CALL_OW 138
// SetClass ( un , class_mortar ) ;
66122: LD_VAR 0 2
66126: PPUSH
66127: LD_INT 8
66129: PPUSH
66130: CALL_OW 336
// end ;
66134: PPOPN 3
66136: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
66137: LD_EXP 41
66141: PUSH
66142: LD_EXP 85
66146: AND
66147: IFFALSE 66291
66149: GO 66151
66151: DISABLE
66152: LD_INT 0
66154: PPUSH
66155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
66156: LD_ADDR_VAR 0 2
66160: PUSH
66161: LD_INT 22
66163: PUSH
66164: LD_OWVAR 2
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 21
66175: PUSH
66176: LD_INT 2
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: LD_INT 2
66185: PUSH
66186: LD_INT 34
66188: PUSH
66189: LD_INT 12
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 34
66198: PUSH
66199: LD_INT 51
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 34
66208: PUSH
66209: LD_INT 32
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: LIST
66226: PPUSH
66227: CALL_OW 69
66231: ST_TO_ADDR
// if not tmp then
66232: LD_VAR 0 2
66236: NOT
66237: IFFALSE 66241
// exit ;
66239: GO 66291
// for i in tmp do
66241: LD_ADDR_VAR 0 1
66245: PUSH
66246: LD_VAR 0 2
66250: PUSH
66251: FOR_IN
66252: IFFALSE 66289
// if GetCargo ( i , mat_artifact ) = 0 then
66254: LD_VAR 0 1
66258: PPUSH
66259: LD_INT 4
66261: PPUSH
66262: CALL_OW 289
66266: PUSH
66267: LD_INT 0
66269: EQUAL
66270: IFFALSE 66287
// SetCargo ( i , mat_siberit , 100 ) ;
66272: LD_VAR 0 1
66276: PPUSH
66277: LD_INT 3
66279: PPUSH
66280: LD_INT 100
66282: PPUSH
66283: CALL_OW 290
66287: GO 66251
66289: POP
66290: POP
// end ;
66291: PPOPN 2
66293: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
66294: LD_EXP 41
66298: PUSH
66299: LD_EXP 86
66303: AND
66304: IFFALSE 66487
66306: GO 66308
66308: DISABLE
66309: LD_INT 0
66311: PPUSH
66312: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
66313: LD_ADDR_VAR 0 2
66317: PUSH
66318: LD_INT 22
66320: PUSH
66321: LD_OWVAR 2
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PPUSH
66330: CALL_OW 69
66334: ST_TO_ADDR
// if not tmp then
66335: LD_VAR 0 2
66339: NOT
66340: IFFALSE 66344
// exit ;
66342: GO 66487
// for i := 1 to 2 do
66344: LD_ADDR_VAR 0 1
66348: PUSH
66349: DOUBLE
66350: LD_INT 1
66352: DEC
66353: ST_TO_ADDR
66354: LD_INT 2
66356: PUSH
66357: FOR_TO
66358: IFFALSE 66485
// begin uc_side := your_side ;
66360: LD_ADDR_OWVAR 20
66364: PUSH
66365: LD_OWVAR 2
66369: ST_TO_ADDR
// uc_nation := nation_american ;
66370: LD_ADDR_OWVAR 21
66374: PUSH
66375: LD_INT 1
66377: ST_TO_ADDR
// vc_chassis := us_morphling ;
66378: LD_ADDR_OWVAR 37
66382: PUSH
66383: LD_INT 5
66385: ST_TO_ADDR
// vc_engine := engine_siberite ;
66386: LD_ADDR_OWVAR 39
66390: PUSH
66391: LD_INT 3
66393: ST_TO_ADDR
// vc_control := control_computer ;
66394: LD_ADDR_OWVAR 38
66398: PUSH
66399: LD_INT 3
66401: ST_TO_ADDR
// vc_weapon := us_double_laser ;
66402: LD_ADDR_OWVAR 40
66406: PUSH
66407: LD_INT 10
66409: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
66410: LD_VAR 0 2
66414: PUSH
66415: LD_INT 1
66417: ARRAY
66418: PPUSH
66419: CALL_OW 310
66423: NOT
66424: IFFALSE 66471
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
66426: CALL_OW 45
66430: PPUSH
66431: LD_VAR 0 2
66435: PUSH
66436: LD_INT 1
66438: ARRAY
66439: PPUSH
66440: CALL_OW 250
66444: PPUSH
66445: LD_VAR 0 2
66449: PUSH
66450: LD_INT 1
66452: ARRAY
66453: PPUSH
66454: CALL_OW 251
66458: PPUSH
66459: LD_INT 12
66461: PPUSH
66462: LD_INT 1
66464: PPUSH
66465: CALL_OW 50
66469: GO 66483
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
66471: CALL_OW 45
66475: PPUSH
66476: LD_INT 1
66478: PPUSH
66479: CALL_OW 51
// end ;
66483: GO 66357
66485: POP
66486: POP
// end ;
66487: PPOPN 2
66489: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
66490: LD_EXP 41
66494: PUSH
66495: LD_EXP 87
66499: AND
66500: IFFALSE 66722
66502: GO 66504
66504: DISABLE
66505: LD_INT 0
66507: PPUSH
66508: PPUSH
66509: PPUSH
66510: PPUSH
66511: PPUSH
66512: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
66513: LD_ADDR_VAR 0 6
66517: PUSH
66518: LD_INT 22
66520: PUSH
66521: LD_OWVAR 2
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 21
66532: PUSH
66533: LD_INT 1
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 3
66542: PUSH
66543: LD_INT 23
66545: PUSH
66546: LD_INT 0
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: LIST
66561: PPUSH
66562: CALL_OW 69
66566: ST_TO_ADDR
// if not tmp then
66567: LD_VAR 0 6
66571: NOT
66572: IFFALSE 66576
// exit ;
66574: GO 66722
// s1 := rand ( 1 , 4 ) ;
66576: LD_ADDR_VAR 0 2
66580: PUSH
66581: LD_INT 1
66583: PPUSH
66584: LD_INT 4
66586: PPUSH
66587: CALL_OW 12
66591: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
66592: LD_ADDR_VAR 0 4
66596: PUSH
66597: LD_VAR 0 6
66601: PUSH
66602: LD_INT 1
66604: ARRAY
66605: PPUSH
66606: LD_VAR 0 2
66610: PPUSH
66611: CALL_OW 259
66615: ST_TO_ADDR
// if s1 = 1 then
66616: LD_VAR 0 2
66620: PUSH
66621: LD_INT 1
66623: EQUAL
66624: IFFALSE 66644
// s2 := rand ( 2 , 4 ) else
66626: LD_ADDR_VAR 0 3
66630: PUSH
66631: LD_INT 2
66633: PPUSH
66634: LD_INT 4
66636: PPUSH
66637: CALL_OW 12
66641: ST_TO_ADDR
66642: GO 66652
// s2 := 1 ;
66644: LD_ADDR_VAR 0 3
66648: PUSH
66649: LD_INT 1
66651: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
66652: LD_ADDR_VAR 0 5
66656: PUSH
66657: LD_VAR 0 6
66661: PUSH
66662: LD_INT 1
66664: ARRAY
66665: PPUSH
66666: LD_VAR 0 3
66670: PPUSH
66671: CALL_OW 259
66675: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
66676: LD_VAR 0 6
66680: PUSH
66681: LD_INT 1
66683: ARRAY
66684: PPUSH
66685: LD_VAR 0 2
66689: PPUSH
66690: LD_VAR 0 5
66694: PPUSH
66695: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
66699: LD_VAR 0 6
66703: PUSH
66704: LD_INT 1
66706: ARRAY
66707: PPUSH
66708: LD_VAR 0 3
66712: PPUSH
66713: LD_VAR 0 4
66717: PPUSH
66718: CALL_OW 237
// end ;
66722: PPOPN 6
66724: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
66725: LD_EXP 41
66729: PUSH
66730: LD_EXP 88
66734: AND
66735: IFFALSE 66814
66737: GO 66739
66739: DISABLE
66740: LD_INT 0
66742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
66743: LD_ADDR_VAR 0 1
66747: PUSH
66748: LD_INT 22
66750: PUSH
66751: LD_OWVAR 2
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: PUSH
66760: LD_INT 30
66762: PUSH
66763: LD_INT 3
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PPUSH
66774: CALL_OW 69
66778: ST_TO_ADDR
// if not tmp then
66779: LD_VAR 0 1
66783: NOT
66784: IFFALSE 66788
// exit ;
66786: GO 66814
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
66788: LD_VAR 0 1
66792: PUSH
66793: LD_INT 1
66795: PPUSH
66796: LD_VAR 0 1
66800: PPUSH
66801: CALL_OW 12
66805: ARRAY
66806: PPUSH
66807: LD_INT 1
66809: PPUSH
66810: CALL_OW 234
// end ;
66814: PPOPN 1
66816: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
66817: LD_EXP 41
66821: PUSH
66822: LD_EXP 89
66826: AND
66827: IFFALSE 66939
66829: GO 66831
66831: DISABLE
66832: LD_INT 0
66834: PPUSH
66835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
66836: LD_ADDR_VAR 0 2
66840: PUSH
66841: LD_INT 22
66843: PUSH
66844: LD_OWVAR 2
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 2
66855: PUSH
66856: LD_INT 30
66858: PUSH
66859: LD_INT 27
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 30
66868: PUSH
66869: LD_INT 26
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 30
66878: PUSH
66879: LD_INT 28
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PPUSH
66896: CALL_OW 69
66900: ST_TO_ADDR
// if not tmp then
66901: LD_VAR 0 2
66905: NOT
66906: IFFALSE 66910
// exit ;
66908: GO 66939
// for i in tmp do
66910: LD_ADDR_VAR 0 1
66914: PUSH
66915: LD_VAR 0 2
66919: PUSH
66920: FOR_IN
66921: IFFALSE 66937
// SetLives ( i , 1 ) ;
66923: LD_VAR 0 1
66927: PPUSH
66928: LD_INT 1
66930: PPUSH
66931: CALL_OW 234
66935: GO 66920
66937: POP
66938: POP
// end ;
66939: PPOPN 2
66941: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
66942: LD_EXP 41
66946: PUSH
66947: LD_EXP 90
66951: AND
66952: IFFALSE 67226
66954: GO 66956
66956: DISABLE
66957: LD_INT 0
66959: PPUSH
66960: PPUSH
66961: PPUSH
// begin i := rand ( 1 , 7 ) ;
66962: LD_ADDR_VAR 0 1
66966: PUSH
66967: LD_INT 1
66969: PPUSH
66970: LD_INT 7
66972: PPUSH
66973: CALL_OW 12
66977: ST_TO_ADDR
// case i of 1 :
66978: LD_VAR 0 1
66982: PUSH
66983: LD_INT 1
66985: DOUBLE
66986: EQUAL
66987: IFTRUE 66991
66989: GO 67001
66991: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
66992: LD_STRING earthquake(getX(game), 0, 32)
66994: PPUSH
66995: CALL_OW 559
66999: GO 67226
67001: LD_INT 2
67003: DOUBLE
67004: EQUAL
67005: IFTRUE 67009
67007: GO 67023
67009: POP
// begin ToLua ( displayStucuk(); ) ;
67010: LD_STRING displayStucuk();
67012: PPUSH
67013: CALL_OW 559
// ResetFog ;
67017: CALL_OW 335
// end ; 3 :
67021: GO 67226
67023: LD_INT 3
67025: DOUBLE
67026: EQUAL
67027: IFTRUE 67031
67029: GO 67135
67031: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67032: LD_ADDR_VAR 0 2
67036: PUSH
67037: LD_INT 22
67039: PUSH
67040: LD_OWVAR 2
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 25
67051: PUSH
67052: LD_INT 1
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PPUSH
67063: CALL_OW 69
67067: ST_TO_ADDR
// if not tmp then
67068: LD_VAR 0 2
67072: NOT
67073: IFFALSE 67077
// exit ;
67075: GO 67226
// un := tmp [ rand ( 1 , tmp ) ] ;
67077: LD_ADDR_VAR 0 3
67081: PUSH
67082: LD_VAR 0 2
67086: PUSH
67087: LD_INT 1
67089: PPUSH
67090: LD_VAR 0 2
67094: PPUSH
67095: CALL_OW 12
67099: ARRAY
67100: ST_TO_ADDR
// if Crawls ( un ) then
67101: LD_VAR 0 3
67105: PPUSH
67106: CALL_OW 318
67110: IFFALSE 67121
// ComWalk ( un ) ;
67112: LD_VAR 0 3
67116: PPUSH
67117: CALL_OW 138
// SetClass ( un , class_mortar ) ;
67121: LD_VAR 0 3
67125: PPUSH
67126: LD_INT 8
67128: PPUSH
67129: CALL_OW 336
// end ; 4 :
67133: GO 67226
67135: LD_INT 4
67137: DOUBLE
67138: EQUAL
67139: IFTRUE 67143
67141: GO 67204
67143: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
67144: LD_ADDR_VAR 0 2
67148: PUSH
67149: LD_INT 22
67151: PUSH
67152: LD_OWVAR 2
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: LD_INT 30
67163: PUSH
67164: LD_INT 29
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PPUSH
67175: CALL_OW 69
67179: ST_TO_ADDR
// if not tmp then
67180: LD_VAR 0 2
67184: NOT
67185: IFFALSE 67189
// exit ;
67187: GO 67226
// DestroyUnit ( tmp [ 1 ] ) ;
67189: LD_VAR 0 2
67193: PUSH
67194: LD_INT 1
67196: ARRAY
67197: PPUSH
67198: CALL_OW 65
// end ; 5 .. 7 :
67202: GO 67226
67204: LD_INT 5
67206: DOUBLE
67207: GREATEREQUAL
67208: IFFALSE 67216
67210: LD_INT 7
67212: DOUBLE
67213: LESSEQUAL
67214: IFTRUE 67218
67216: GO 67225
67218: POP
// StreamSibBomb ; end ;
67219: CALL 63476 0 0
67223: GO 67226
67225: POP
// end ;
67226: PPOPN 3
67228: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
67229: LD_EXP 41
67233: PUSH
67234: LD_EXP 91
67238: AND
67239: IFFALSE 67395
67241: GO 67243
67243: DISABLE
67244: LD_INT 0
67246: PPUSH
67247: PPUSH
67248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
67249: LD_ADDR_VAR 0 2
67253: PUSH
67254: LD_INT 81
67256: PUSH
67257: LD_OWVAR 2
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: PUSH
67266: LD_INT 2
67268: PUSH
67269: LD_INT 21
67271: PUSH
67272: LD_INT 1
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PUSH
67279: LD_INT 21
67281: PUSH
67282: LD_INT 2
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: LIST
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PPUSH
67298: CALL_OW 69
67302: ST_TO_ADDR
// if not tmp then
67303: LD_VAR 0 2
67307: NOT
67308: IFFALSE 67312
// exit ;
67310: GO 67395
// p := 0 ;
67312: LD_ADDR_VAR 0 3
67316: PUSH
67317: LD_INT 0
67319: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
67320: LD_INT 35
67322: PPUSH
67323: CALL_OW 67
// p := p + 1 ;
67327: LD_ADDR_VAR 0 3
67331: PUSH
67332: LD_VAR 0 3
67336: PUSH
67337: LD_INT 1
67339: PLUS
67340: ST_TO_ADDR
// for i in tmp do
67341: LD_ADDR_VAR 0 1
67345: PUSH
67346: LD_VAR 0 2
67350: PUSH
67351: FOR_IN
67352: IFFALSE 67383
// if GetLives ( i ) < 1000 then
67354: LD_VAR 0 1
67358: PPUSH
67359: CALL_OW 256
67363: PUSH
67364: LD_INT 1000
67366: LESS
67367: IFFALSE 67381
// SetLives ( i , 1000 ) ;
67369: LD_VAR 0 1
67373: PPUSH
67374: LD_INT 1000
67376: PPUSH
67377: CALL_OW 234
67381: GO 67351
67383: POP
67384: POP
// until p > 20 ;
67385: LD_VAR 0 3
67389: PUSH
67390: LD_INT 20
67392: GREATER
67393: IFFALSE 67320
// end ;
67395: PPOPN 3
67397: END
// every 0 0$1 trigger StreamModeActive and sTime do
67398: LD_EXP 41
67402: PUSH
67403: LD_EXP 92
67407: AND
67408: IFFALSE 67443
67410: GO 67412
67412: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
67413: LD_INT 28
67415: PPUSH
67416: LD_OWVAR 2
67420: PPUSH
67421: LD_INT 2
67423: PPUSH
67424: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
67428: LD_INT 30
67430: PPUSH
67431: LD_OWVAR 2
67435: PPUSH
67436: LD_INT 2
67438: PPUSH
67439: CALL_OW 322
// end ;
67443: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
67444: LD_EXP 41
67448: PUSH
67449: LD_EXP 93
67453: AND
67454: IFFALSE 67575
67456: GO 67458
67458: DISABLE
67459: LD_INT 0
67461: PPUSH
67462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
67463: LD_ADDR_VAR 0 2
67467: PUSH
67468: LD_INT 22
67470: PUSH
67471: LD_OWVAR 2
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: PUSH
67480: LD_INT 21
67482: PUSH
67483: LD_INT 1
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: PUSH
67490: LD_INT 3
67492: PUSH
67493: LD_INT 23
67495: PUSH
67496: LD_INT 0
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: LIST
67511: PPUSH
67512: CALL_OW 69
67516: ST_TO_ADDR
// if not tmp then
67517: LD_VAR 0 2
67521: NOT
67522: IFFALSE 67526
// exit ;
67524: GO 67575
// for i in tmp do
67526: LD_ADDR_VAR 0 1
67530: PUSH
67531: LD_VAR 0 2
67535: PUSH
67536: FOR_IN
67537: IFFALSE 67573
// begin if Crawls ( i ) then
67539: LD_VAR 0 1
67543: PPUSH
67544: CALL_OW 318
67548: IFFALSE 67559
// ComWalk ( i ) ;
67550: LD_VAR 0 1
67554: PPUSH
67555: CALL_OW 138
// SetClass ( i , 2 ) ;
67559: LD_VAR 0 1
67563: PPUSH
67564: LD_INT 2
67566: PPUSH
67567: CALL_OW 336
// end ;
67571: GO 67536
67573: POP
67574: POP
// end ;
67575: PPOPN 2
67577: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
67578: LD_EXP 41
67582: PUSH
67583: LD_EXP 94
67587: AND
67588: IFFALSE 67869
67590: GO 67592
67592: DISABLE
67593: LD_INT 0
67595: PPUSH
67596: PPUSH
67597: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
67598: LD_OWVAR 2
67602: PPUSH
67603: LD_INT 9
67605: PPUSH
67606: LD_INT 1
67608: PPUSH
67609: LD_INT 1
67611: PPUSH
67612: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
67616: LD_INT 9
67618: PPUSH
67619: LD_OWVAR 2
67623: PPUSH
67624: CALL_OW 343
// uc_side := 9 ;
67628: LD_ADDR_OWVAR 20
67632: PUSH
67633: LD_INT 9
67635: ST_TO_ADDR
// uc_nation := 2 ;
67636: LD_ADDR_OWVAR 21
67640: PUSH
67641: LD_INT 2
67643: ST_TO_ADDR
// hc_name := Dark Warrior ;
67644: LD_ADDR_OWVAR 26
67648: PUSH
67649: LD_STRING Dark Warrior
67651: ST_TO_ADDR
// hc_gallery :=  ;
67652: LD_ADDR_OWVAR 33
67656: PUSH
67657: LD_STRING 
67659: ST_TO_ADDR
// hc_noskilllimit := true ;
67660: LD_ADDR_OWVAR 76
67664: PUSH
67665: LD_INT 1
67667: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
67668: LD_ADDR_OWVAR 31
67672: PUSH
67673: LD_INT 30
67675: PUSH
67676: LD_INT 30
67678: PUSH
67679: LD_INT 30
67681: PUSH
67682: LD_INT 30
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: LIST
67689: LIST
67690: ST_TO_ADDR
// un := CreateHuman ;
67691: LD_ADDR_VAR 0 3
67695: PUSH
67696: CALL_OW 44
67700: ST_TO_ADDR
// hc_noskilllimit := false ;
67701: LD_ADDR_OWVAR 76
67705: PUSH
67706: LD_INT 0
67708: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67709: LD_VAR 0 3
67713: PPUSH
67714: LD_INT 1
67716: PPUSH
67717: CALL_OW 51
// p := 0 ;
67721: LD_ADDR_VAR 0 2
67725: PUSH
67726: LD_INT 0
67728: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
67729: LD_INT 35
67731: PPUSH
67732: CALL_OW 67
// p := p + 1 ;
67736: LD_ADDR_VAR 0 2
67740: PUSH
67741: LD_VAR 0 2
67745: PUSH
67746: LD_INT 1
67748: PLUS
67749: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
67750: LD_VAR 0 3
67754: PPUSH
67755: CALL_OW 256
67759: PUSH
67760: LD_INT 1000
67762: LESS
67763: IFFALSE 67777
// SetLives ( un , 1000 ) ;
67765: LD_VAR 0 3
67769: PPUSH
67770: LD_INT 1000
67772: PPUSH
67773: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
67777: LD_VAR 0 3
67781: PPUSH
67782: LD_INT 81
67784: PUSH
67785: LD_OWVAR 2
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 91
67796: PUSH
67797: LD_VAR 0 3
67801: PUSH
67802: LD_INT 30
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: LIST
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PPUSH
67814: CALL_OW 69
67818: PPUSH
67819: LD_VAR 0 3
67823: PPUSH
67824: CALL_OW 74
67828: PPUSH
67829: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
67833: LD_VAR 0 2
67837: PUSH
67838: LD_INT 60
67840: GREATER
67841: PUSH
67842: LD_VAR 0 3
67846: PPUSH
67847: CALL_OW 301
67851: OR
67852: IFFALSE 67729
// if un then
67854: LD_VAR 0 3
67858: IFFALSE 67869
// RemoveUnit ( un ) ;
67860: LD_VAR 0 3
67864: PPUSH
67865: CALL_OW 64
// end ;
67869: PPOPN 3
67871: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
67872: LD_INT 0
67874: PPUSH
// case cmd of 301 :
67875: LD_VAR 0 1
67879: PUSH
67880: LD_INT 301
67882: DOUBLE
67883: EQUAL
67884: IFTRUE 67888
67886: GO 67920
67888: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
67889: LD_VAR 0 6
67893: PPUSH
67894: LD_VAR 0 7
67898: PPUSH
67899: LD_VAR 0 8
67903: PPUSH
67904: LD_VAR 0 4
67908: PPUSH
67909: LD_VAR 0 5
67913: PPUSH
67914: CALL 69121 0 5
67918: GO 68041
67920: LD_INT 302
67922: DOUBLE
67923: EQUAL
67924: IFTRUE 67928
67926: GO 67965
67928: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
67929: LD_VAR 0 6
67933: PPUSH
67934: LD_VAR 0 7
67938: PPUSH
67939: LD_VAR 0 8
67943: PPUSH
67944: LD_VAR 0 9
67948: PPUSH
67949: LD_VAR 0 4
67953: PPUSH
67954: LD_VAR 0 5
67958: PPUSH
67959: CALL 69212 0 6
67963: GO 68041
67965: LD_INT 303
67967: DOUBLE
67968: EQUAL
67969: IFTRUE 67973
67971: GO 68010
67973: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
67974: LD_VAR 0 6
67978: PPUSH
67979: LD_VAR 0 7
67983: PPUSH
67984: LD_VAR 0 8
67988: PPUSH
67989: LD_VAR 0 9
67993: PPUSH
67994: LD_VAR 0 4
67998: PPUSH
67999: LD_VAR 0 5
68003: PPUSH
68004: CALL 68046 0 6
68008: GO 68041
68010: LD_INT 304
68012: DOUBLE
68013: EQUAL
68014: IFTRUE 68018
68016: GO 68040
68018: POP
// hHackTeleport ( unit , x , y ) ; end ;
68019: LD_VAR 0 2
68023: PPUSH
68024: LD_VAR 0 4
68028: PPUSH
68029: LD_VAR 0 5
68033: PPUSH
68034: CALL 69805 0 3
68038: GO 68041
68040: POP
// end ;
68041: LD_VAR 0 12
68045: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
68046: LD_INT 0
68048: PPUSH
68049: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
68050: LD_VAR 0 1
68054: PUSH
68055: LD_INT 1
68057: LESS
68058: PUSH
68059: LD_VAR 0 1
68063: PUSH
68064: LD_INT 3
68066: GREATER
68067: OR
68068: PUSH
68069: LD_VAR 0 5
68073: PPUSH
68074: LD_VAR 0 6
68078: PPUSH
68079: CALL_OW 428
68083: OR
68084: IFFALSE 68088
// exit ;
68086: GO 68808
// uc_side := your_side ;
68088: LD_ADDR_OWVAR 20
68092: PUSH
68093: LD_OWVAR 2
68097: ST_TO_ADDR
// uc_nation := nation ;
68098: LD_ADDR_OWVAR 21
68102: PUSH
68103: LD_VAR 0 1
68107: ST_TO_ADDR
// bc_level = 1 ;
68108: LD_ADDR_OWVAR 43
68112: PUSH
68113: LD_INT 1
68115: ST_TO_ADDR
// case btype of 1 :
68116: LD_VAR 0 2
68120: PUSH
68121: LD_INT 1
68123: DOUBLE
68124: EQUAL
68125: IFTRUE 68129
68127: GO 68140
68129: POP
// bc_type := b_depot ; 2 :
68130: LD_ADDR_OWVAR 42
68134: PUSH
68135: LD_INT 0
68137: ST_TO_ADDR
68138: GO 68752
68140: LD_INT 2
68142: DOUBLE
68143: EQUAL
68144: IFTRUE 68148
68146: GO 68159
68148: POP
// bc_type := b_warehouse ; 3 :
68149: LD_ADDR_OWVAR 42
68153: PUSH
68154: LD_INT 1
68156: ST_TO_ADDR
68157: GO 68752
68159: LD_INT 3
68161: DOUBLE
68162: EQUAL
68163: IFTRUE 68167
68165: GO 68178
68167: POP
// bc_type := b_lab ; 4 .. 9 :
68168: LD_ADDR_OWVAR 42
68172: PUSH
68173: LD_INT 6
68175: ST_TO_ADDR
68176: GO 68752
68178: LD_INT 4
68180: DOUBLE
68181: GREATEREQUAL
68182: IFFALSE 68190
68184: LD_INT 9
68186: DOUBLE
68187: LESSEQUAL
68188: IFTRUE 68192
68190: GO 68244
68192: POP
// begin bc_type := b_lab_half ;
68193: LD_ADDR_OWVAR 42
68197: PUSH
68198: LD_INT 7
68200: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
68201: LD_ADDR_OWVAR 44
68205: PUSH
68206: LD_INT 10
68208: PUSH
68209: LD_INT 11
68211: PUSH
68212: LD_INT 12
68214: PUSH
68215: LD_INT 15
68217: PUSH
68218: LD_INT 14
68220: PUSH
68221: LD_INT 13
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: LIST
68228: LIST
68229: LIST
68230: LIST
68231: PUSH
68232: LD_VAR 0 2
68236: PUSH
68237: LD_INT 3
68239: MINUS
68240: ARRAY
68241: ST_TO_ADDR
// end ; 10 .. 13 :
68242: GO 68752
68244: LD_INT 10
68246: DOUBLE
68247: GREATEREQUAL
68248: IFFALSE 68256
68250: LD_INT 13
68252: DOUBLE
68253: LESSEQUAL
68254: IFTRUE 68258
68256: GO 68335
68258: POP
// begin bc_type := b_lab_full ;
68259: LD_ADDR_OWVAR 42
68263: PUSH
68264: LD_INT 8
68266: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
68267: LD_ADDR_OWVAR 44
68271: PUSH
68272: LD_INT 10
68274: PUSH
68275: LD_INT 12
68277: PUSH
68278: LD_INT 14
68280: PUSH
68281: LD_INT 13
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: LIST
68288: LIST
68289: PUSH
68290: LD_VAR 0 2
68294: PUSH
68295: LD_INT 9
68297: MINUS
68298: ARRAY
68299: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
68300: LD_ADDR_OWVAR 45
68304: PUSH
68305: LD_INT 11
68307: PUSH
68308: LD_INT 15
68310: PUSH
68311: LD_INT 12
68313: PUSH
68314: LD_INT 15
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: LIST
68321: LIST
68322: PUSH
68323: LD_VAR 0 2
68327: PUSH
68328: LD_INT 9
68330: MINUS
68331: ARRAY
68332: ST_TO_ADDR
// end ; 14 :
68333: GO 68752
68335: LD_INT 14
68337: DOUBLE
68338: EQUAL
68339: IFTRUE 68343
68341: GO 68354
68343: POP
// bc_type := b_workshop ; 15 :
68344: LD_ADDR_OWVAR 42
68348: PUSH
68349: LD_INT 2
68351: ST_TO_ADDR
68352: GO 68752
68354: LD_INT 15
68356: DOUBLE
68357: EQUAL
68358: IFTRUE 68362
68360: GO 68373
68362: POP
// bc_type := b_factory ; 16 :
68363: LD_ADDR_OWVAR 42
68367: PUSH
68368: LD_INT 3
68370: ST_TO_ADDR
68371: GO 68752
68373: LD_INT 16
68375: DOUBLE
68376: EQUAL
68377: IFTRUE 68381
68379: GO 68392
68381: POP
// bc_type := b_ext_gun ; 17 :
68382: LD_ADDR_OWVAR 42
68386: PUSH
68387: LD_INT 17
68389: ST_TO_ADDR
68390: GO 68752
68392: LD_INT 17
68394: DOUBLE
68395: EQUAL
68396: IFTRUE 68400
68398: GO 68428
68400: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
68401: LD_ADDR_OWVAR 42
68405: PUSH
68406: LD_INT 19
68408: PUSH
68409: LD_INT 23
68411: PUSH
68412: LD_INT 19
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: LIST
68419: PUSH
68420: LD_VAR 0 1
68424: ARRAY
68425: ST_TO_ADDR
68426: GO 68752
68428: LD_INT 18
68430: DOUBLE
68431: EQUAL
68432: IFTRUE 68436
68434: GO 68447
68436: POP
// bc_type := b_ext_radar ; 19 :
68437: LD_ADDR_OWVAR 42
68441: PUSH
68442: LD_INT 20
68444: ST_TO_ADDR
68445: GO 68752
68447: LD_INT 19
68449: DOUBLE
68450: EQUAL
68451: IFTRUE 68455
68453: GO 68466
68455: POP
// bc_type := b_ext_radio ; 20 :
68456: LD_ADDR_OWVAR 42
68460: PUSH
68461: LD_INT 22
68463: ST_TO_ADDR
68464: GO 68752
68466: LD_INT 20
68468: DOUBLE
68469: EQUAL
68470: IFTRUE 68474
68472: GO 68485
68474: POP
// bc_type := b_ext_siberium ; 21 :
68475: LD_ADDR_OWVAR 42
68479: PUSH
68480: LD_INT 21
68482: ST_TO_ADDR
68483: GO 68752
68485: LD_INT 21
68487: DOUBLE
68488: EQUAL
68489: IFTRUE 68493
68491: GO 68504
68493: POP
// bc_type := b_ext_computer ; 22 :
68494: LD_ADDR_OWVAR 42
68498: PUSH
68499: LD_INT 24
68501: ST_TO_ADDR
68502: GO 68752
68504: LD_INT 22
68506: DOUBLE
68507: EQUAL
68508: IFTRUE 68512
68510: GO 68523
68512: POP
// bc_type := b_ext_track ; 23 :
68513: LD_ADDR_OWVAR 42
68517: PUSH
68518: LD_INT 16
68520: ST_TO_ADDR
68521: GO 68752
68523: LD_INT 23
68525: DOUBLE
68526: EQUAL
68527: IFTRUE 68531
68529: GO 68542
68531: POP
// bc_type := b_ext_laser ; 24 :
68532: LD_ADDR_OWVAR 42
68536: PUSH
68537: LD_INT 25
68539: ST_TO_ADDR
68540: GO 68752
68542: LD_INT 24
68544: DOUBLE
68545: EQUAL
68546: IFTRUE 68550
68548: GO 68561
68550: POP
// bc_type := b_control_tower ; 25 :
68551: LD_ADDR_OWVAR 42
68555: PUSH
68556: LD_INT 36
68558: ST_TO_ADDR
68559: GO 68752
68561: LD_INT 25
68563: DOUBLE
68564: EQUAL
68565: IFTRUE 68569
68567: GO 68580
68569: POP
// bc_type := b_breastwork ; 26 :
68570: LD_ADDR_OWVAR 42
68574: PUSH
68575: LD_INT 31
68577: ST_TO_ADDR
68578: GO 68752
68580: LD_INT 26
68582: DOUBLE
68583: EQUAL
68584: IFTRUE 68588
68586: GO 68599
68588: POP
// bc_type := b_bunker ; 27 :
68589: LD_ADDR_OWVAR 42
68593: PUSH
68594: LD_INT 32
68596: ST_TO_ADDR
68597: GO 68752
68599: LD_INT 27
68601: DOUBLE
68602: EQUAL
68603: IFTRUE 68607
68605: GO 68618
68607: POP
// bc_type := b_turret ; 28 :
68608: LD_ADDR_OWVAR 42
68612: PUSH
68613: LD_INT 33
68615: ST_TO_ADDR
68616: GO 68752
68618: LD_INT 28
68620: DOUBLE
68621: EQUAL
68622: IFTRUE 68626
68624: GO 68637
68626: POP
// bc_type := b_armoury ; 29 :
68627: LD_ADDR_OWVAR 42
68631: PUSH
68632: LD_INT 4
68634: ST_TO_ADDR
68635: GO 68752
68637: LD_INT 29
68639: DOUBLE
68640: EQUAL
68641: IFTRUE 68645
68643: GO 68656
68645: POP
// bc_type := b_barracks ; 30 :
68646: LD_ADDR_OWVAR 42
68650: PUSH
68651: LD_INT 5
68653: ST_TO_ADDR
68654: GO 68752
68656: LD_INT 30
68658: DOUBLE
68659: EQUAL
68660: IFTRUE 68664
68662: GO 68675
68664: POP
// bc_type := b_solar_power ; 31 :
68665: LD_ADDR_OWVAR 42
68669: PUSH
68670: LD_INT 27
68672: ST_TO_ADDR
68673: GO 68752
68675: LD_INT 31
68677: DOUBLE
68678: EQUAL
68679: IFTRUE 68683
68681: GO 68694
68683: POP
// bc_type := b_oil_power ; 32 :
68684: LD_ADDR_OWVAR 42
68688: PUSH
68689: LD_INT 26
68691: ST_TO_ADDR
68692: GO 68752
68694: LD_INT 32
68696: DOUBLE
68697: EQUAL
68698: IFTRUE 68702
68700: GO 68713
68702: POP
// bc_type := b_siberite_power ; 33 :
68703: LD_ADDR_OWVAR 42
68707: PUSH
68708: LD_INT 28
68710: ST_TO_ADDR
68711: GO 68752
68713: LD_INT 33
68715: DOUBLE
68716: EQUAL
68717: IFTRUE 68721
68719: GO 68732
68721: POP
// bc_type := b_oil_mine ; 34 :
68722: LD_ADDR_OWVAR 42
68726: PUSH
68727: LD_INT 29
68729: ST_TO_ADDR
68730: GO 68752
68732: LD_INT 34
68734: DOUBLE
68735: EQUAL
68736: IFTRUE 68740
68738: GO 68751
68740: POP
// bc_type := b_siberite_mine ; end ;
68741: LD_ADDR_OWVAR 42
68745: PUSH
68746: LD_INT 30
68748: ST_TO_ADDR
68749: GO 68752
68751: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
68752: LD_ADDR_VAR 0 8
68756: PUSH
68757: LD_VAR 0 5
68761: PPUSH
68762: LD_VAR 0 6
68766: PPUSH
68767: LD_VAR 0 3
68771: PPUSH
68772: CALL_OW 47
68776: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
68777: LD_OWVAR 42
68781: PUSH
68782: LD_INT 32
68784: PUSH
68785: LD_INT 33
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: IN
68792: IFFALSE 68808
// PlaceWeaponTurret ( b , weapon ) ;
68794: LD_VAR 0 8
68798: PPUSH
68799: LD_VAR 0 4
68803: PPUSH
68804: CALL_OW 431
// end ;
68808: LD_VAR 0 7
68812: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
68813: LD_INT 0
68815: PPUSH
68816: PPUSH
68817: PPUSH
68818: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
68819: LD_ADDR_VAR 0 4
68823: PUSH
68824: LD_INT 22
68826: PUSH
68827: LD_OWVAR 2
68831: PUSH
68832: EMPTY
68833: LIST
68834: LIST
68835: PUSH
68836: LD_INT 2
68838: PUSH
68839: LD_INT 30
68841: PUSH
68842: LD_INT 0
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: PUSH
68849: LD_INT 30
68851: PUSH
68852: LD_INT 1
68854: PUSH
68855: EMPTY
68856: LIST
68857: LIST
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: LIST
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: PPUSH
68868: CALL_OW 69
68872: ST_TO_ADDR
// if not tmp then
68873: LD_VAR 0 4
68877: NOT
68878: IFFALSE 68882
// exit ;
68880: GO 68941
// for i in tmp do
68882: LD_ADDR_VAR 0 2
68886: PUSH
68887: LD_VAR 0 4
68891: PUSH
68892: FOR_IN
68893: IFFALSE 68939
// for j = 1 to 3 do
68895: LD_ADDR_VAR 0 3
68899: PUSH
68900: DOUBLE
68901: LD_INT 1
68903: DEC
68904: ST_TO_ADDR
68905: LD_INT 3
68907: PUSH
68908: FOR_TO
68909: IFFALSE 68935
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
68911: LD_VAR 0 2
68915: PPUSH
68916: CALL_OW 274
68920: PPUSH
68921: LD_VAR 0 3
68925: PPUSH
68926: LD_INT 99999
68928: PPUSH
68929: CALL_OW 277
68933: GO 68908
68935: POP
68936: POP
68937: GO 68892
68939: POP
68940: POP
// end ;
68941: LD_VAR 0 1
68945: RET
// export function hHackSetLevel10 ; var i , j ; begin
68946: LD_INT 0
68948: PPUSH
68949: PPUSH
68950: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
68951: LD_ADDR_VAR 0 2
68955: PUSH
68956: LD_INT 21
68958: PUSH
68959: LD_INT 1
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: PPUSH
68966: CALL_OW 69
68970: PUSH
68971: FOR_IN
68972: IFFALSE 69024
// if IsSelected ( i ) then
68974: LD_VAR 0 2
68978: PPUSH
68979: CALL_OW 306
68983: IFFALSE 69022
// begin for j := 1 to 4 do
68985: LD_ADDR_VAR 0 3
68989: PUSH
68990: DOUBLE
68991: LD_INT 1
68993: DEC
68994: ST_TO_ADDR
68995: LD_INT 4
68997: PUSH
68998: FOR_TO
68999: IFFALSE 69020
// SetSkill ( i , j , 10 ) ;
69001: LD_VAR 0 2
69005: PPUSH
69006: LD_VAR 0 3
69010: PPUSH
69011: LD_INT 10
69013: PPUSH
69014: CALL_OW 237
69018: GO 68998
69020: POP
69021: POP
// end ;
69022: GO 68971
69024: POP
69025: POP
// end ;
69026: LD_VAR 0 1
69030: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
69031: LD_INT 0
69033: PPUSH
69034: PPUSH
69035: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
69036: LD_ADDR_VAR 0 2
69040: PUSH
69041: LD_INT 22
69043: PUSH
69044: LD_OWVAR 2
69048: PUSH
69049: EMPTY
69050: LIST
69051: LIST
69052: PUSH
69053: LD_INT 21
69055: PUSH
69056: LD_INT 1
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: EMPTY
69064: LIST
69065: LIST
69066: PPUSH
69067: CALL_OW 69
69071: PUSH
69072: FOR_IN
69073: IFFALSE 69114
// begin for j := 1 to 4 do
69075: LD_ADDR_VAR 0 3
69079: PUSH
69080: DOUBLE
69081: LD_INT 1
69083: DEC
69084: ST_TO_ADDR
69085: LD_INT 4
69087: PUSH
69088: FOR_TO
69089: IFFALSE 69110
// SetSkill ( i , j , 10 ) ;
69091: LD_VAR 0 2
69095: PPUSH
69096: LD_VAR 0 3
69100: PPUSH
69101: LD_INT 10
69103: PPUSH
69104: CALL_OW 237
69108: GO 69088
69110: POP
69111: POP
// end ;
69112: GO 69072
69114: POP
69115: POP
// end ;
69116: LD_VAR 0 1
69120: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
69121: LD_INT 0
69123: PPUSH
// uc_side := your_side ;
69124: LD_ADDR_OWVAR 20
69128: PUSH
69129: LD_OWVAR 2
69133: ST_TO_ADDR
// uc_nation := nation ;
69134: LD_ADDR_OWVAR 21
69138: PUSH
69139: LD_VAR 0 1
69143: ST_TO_ADDR
// InitHc ;
69144: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
69148: LD_INT 0
69150: PPUSH
69151: LD_VAR 0 2
69155: PPUSH
69156: LD_VAR 0 3
69160: PPUSH
69161: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
69165: LD_VAR 0 4
69169: PPUSH
69170: LD_VAR 0 5
69174: PPUSH
69175: CALL_OW 428
69179: PUSH
69180: LD_INT 0
69182: EQUAL
69183: IFFALSE 69207
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
69185: CALL_OW 44
69189: PPUSH
69190: LD_VAR 0 4
69194: PPUSH
69195: LD_VAR 0 5
69199: PPUSH
69200: LD_INT 1
69202: PPUSH
69203: CALL_OW 48
// end ;
69207: LD_VAR 0 6
69211: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
69212: LD_INT 0
69214: PPUSH
69215: PPUSH
// uc_side := your_side ;
69216: LD_ADDR_OWVAR 20
69220: PUSH
69221: LD_OWVAR 2
69225: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
69226: LD_VAR 0 1
69230: PUSH
69231: LD_INT 1
69233: PUSH
69234: LD_INT 2
69236: PUSH
69237: LD_INT 3
69239: PUSH
69240: LD_INT 4
69242: PUSH
69243: LD_INT 5
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: LIST
69250: LIST
69251: LIST
69252: IN
69253: IFFALSE 69265
// uc_nation := nation_american else
69255: LD_ADDR_OWVAR 21
69259: PUSH
69260: LD_INT 1
69262: ST_TO_ADDR
69263: GO 69308
// if chassis in [ 11 , 12 , 13 , 14 ] then
69265: LD_VAR 0 1
69269: PUSH
69270: LD_INT 11
69272: PUSH
69273: LD_INT 12
69275: PUSH
69276: LD_INT 13
69278: PUSH
69279: LD_INT 14
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: LIST
69286: LIST
69287: IN
69288: IFFALSE 69300
// uc_nation := nation_arabian else
69290: LD_ADDR_OWVAR 21
69294: PUSH
69295: LD_INT 2
69297: ST_TO_ADDR
69298: GO 69308
// uc_nation := nation_russian ;
69300: LD_ADDR_OWVAR 21
69304: PUSH
69305: LD_INT 3
69307: ST_TO_ADDR
// vc_chassis := chassis ;
69308: LD_ADDR_OWVAR 37
69312: PUSH
69313: LD_VAR 0 1
69317: ST_TO_ADDR
// vc_engine := engine ;
69318: LD_ADDR_OWVAR 39
69322: PUSH
69323: LD_VAR 0 2
69327: ST_TO_ADDR
// vc_control := control ;
69328: LD_ADDR_OWVAR 38
69332: PUSH
69333: LD_VAR 0 3
69337: ST_TO_ADDR
// vc_weapon := weapon ;
69338: LD_ADDR_OWVAR 40
69342: PUSH
69343: LD_VAR 0 4
69347: ST_TO_ADDR
// un := CreateVehicle ;
69348: LD_ADDR_VAR 0 8
69352: PUSH
69353: CALL_OW 45
69357: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
69358: LD_VAR 0 8
69362: PPUSH
69363: LD_INT 0
69365: PPUSH
69366: LD_INT 5
69368: PPUSH
69369: CALL_OW 12
69373: PPUSH
69374: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
69378: LD_VAR 0 8
69382: PPUSH
69383: LD_VAR 0 5
69387: PPUSH
69388: LD_VAR 0 6
69392: PPUSH
69393: LD_INT 1
69395: PPUSH
69396: CALL_OW 48
// end ;
69400: LD_VAR 0 7
69404: RET
// export hInvincible ; every 1 do
69405: GO 69407
69407: DISABLE
// hInvincible := [ ] ;
69408: LD_ADDR_EXP 95
69412: PUSH
69413: EMPTY
69414: ST_TO_ADDR
69415: END
// every 10 do var i ;
69416: GO 69418
69418: DISABLE
69419: LD_INT 0
69421: PPUSH
// begin enable ;
69422: ENABLE
// if not hInvincible then
69423: LD_EXP 95
69427: NOT
69428: IFFALSE 69432
// exit ;
69430: GO 69476
// for i in hInvincible do
69432: LD_ADDR_VAR 0 1
69436: PUSH
69437: LD_EXP 95
69441: PUSH
69442: FOR_IN
69443: IFFALSE 69474
// if GetLives ( i ) < 1000 then
69445: LD_VAR 0 1
69449: PPUSH
69450: CALL_OW 256
69454: PUSH
69455: LD_INT 1000
69457: LESS
69458: IFFALSE 69472
// SetLives ( i , 1000 ) ;
69460: LD_VAR 0 1
69464: PPUSH
69465: LD_INT 1000
69467: PPUSH
69468: CALL_OW 234
69472: GO 69442
69474: POP
69475: POP
// end ;
69476: PPOPN 1
69478: END
// export function hHackInvincible ; var i ; begin
69479: LD_INT 0
69481: PPUSH
69482: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
69483: LD_ADDR_VAR 0 2
69487: PUSH
69488: LD_INT 2
69490: PUSH
69491: LD_INT 21
69493: PUSH
69494: LD_INT 1
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: LD_INT 21
69503: PUSH
69504: LD_INT 2
69506: PUSH
69507: EMPTY
69508: LIST
69509: LIST
69510: PUSH
69511: EMPTY
69512: LIST
69513: LIST
69514: LIST
69515: PPUSH
69516: CALL_OW 69
69520: PUSH
69521: FOR_IN
69522: IFFALSE 69583
// if IsSelected ( i ) then
69524: LD_VAR 0 2
69528: PPUSH
69529: CALL_OW 306
69533: IFFALSE 69581
// begin if i in hInvincible then
69535: LD_VAR 0 2
69539: PUSH
69540: LD_EXP 95
69544: IN
69545: IFFALSE 69565
// hInvincible := hInvincible diff i else
69547: LD_ADDR_EXP 95
69551: PUSH
69552: LD_EXP 95
69556: PUSH
69557: LD_VAR 0 2
69561: DIFF
69562: ST_TO_ADDR
69563: GO 69581
// hInvincible := hInvincible union i ;
69565: LD_ADDR_EXP 95
69569: PUSH
69570: LD_EXP 95
69574: PUSH
69575: LD_VAR 0 2
69579: UNION
69580: ST_TO_ADDR
// end ;
69581: GO 69521
69583: POP
69584: POP
// end ;
69585: LD_VAR 0 1
69589: RET
// export function hHackInvisible ; var i , j ; begin
69590: LD_INT 0
69592: PPUSH
69593: PPUSH
69594: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
69595: LD_ADDR_VAR 0 2
69599: PUSH
69600: LD_INT 21
69602: PUSH
69603: LD_INT 1
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PPUSH
69610: CALL_OW 69
69614: PUSH
69615: FOR_IN
69616: IFFALSE 69640
// if IsSelected ( i ) then
69618: LD_VAR 0 2
69622: PPUSH
69623: CALL_OW 306
69627: IFFALSE 69638
// ComForceInvisible ( i ) ;
69629: LD_VAR 0 2
69633: PPUSH
69634: CALL_OW 496
69638: GO 69615
69640: POP
69641: POP
// end ;
69642: LD_VAR 0 1
69646: RET
// export function hHackChangeYourSide ; begin
69647: LD_INT 0
69649: PPUSH
// if your_side = 8 then
69650: LD_OWVAR 2
69654: PUSH
69655: LD_INT 8
69657: EQUAL
69658: IFFALSE 69670
// your_side := 0 else
69660: LD_ADDR_OWVAR 2
69664: PUSH
69665: LD_INT 0
69667: ST_TO_ADDR
69668: GO 69684
// your_side := your_side + 1 ;
69670: LD_ADDR_OWVAR 2
69674: PUSH
69675: LD_OWVAR 2
69679: PUSH
69680: LD_INT 1
69682: PLUS
69683: ST_TO_ADDR
// end ;
69684: LD_VAR 0 1
69688: RET
// export function hHackChangeUnitSide ; var i , j ; begin
69689: LD_INT 0
69691: PPUSH
69692: PPUSH
69693: PPUSH
// for i in all_units do
69694: LD_ADDR_VAR 0 2
69698: PUSH
69699: LD_OWVAR 3
69703: PUSH
69704: FOR_IN
69705: IFFALSE 69783
// if IsSelected ( i ) then
69707: LD_VAR 0 2
69711: PPUSH
69712: CALL_OW 306
69716: IFFALSE 69781
// begin j := GetSide ( i ) ;
69718: LD_ADDR_VAR 0 3
69722: PUSH
69723: LD_VAR 0 2
69727: PPUSH
69728: CALL_OW 255
69732: ST_TO_ADDR
// if j = 8 then
69733: LD_VAR 0 3
69737: PUSH
69738: LD_INT 8
69740: EQUAL
69741: IFFALSE 69753
// j := 0 else
69743: LD_ADDR_VAR 0 3
69747: PUSH
69748: LD_INT 0
69750: ST_TO_ADDR
69751: GO 69767
// j := j + 1 ;
69753: LD_ADDR_VAR 0 3
69757: PUSH
69758: LD_VAR 0 3
69762: PUSH
69763: LD_INT 1
69765: PLUS
69766: ST_TO_ADDR
// SetSide ( i , j ) ;
69767: LD_VAR 0 2
69771: PPUSH
69772: LD_VAR 0 3
69776: PPUSH
69777: CALL_OW 235
// end ;
69781: GO 69704
69783: POP
69784: POP
// end ;
69785: LD_VAR 0 1
69789: RET
// export function hHackFog ; begin
69790: LD_INT 0
69792: PPUSH
// FogOff ( true ) ;
69793: LD_INT 1
69795: PPUSH
69796: CALL_OW 344
// end ;
69800: LD_VAR 0 1
69804: RET
// export function hHackTeleport ( unit , x , y ) ; begin
69805: LD_INT 0
69807: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
69808: LD_VAR 0 1
69812: PPUSH
69813: LD_VAR 0 2
69817: PPUSH
69818: LD_VAR 0 3
69822: PPUSH
69823: LD_INT 1
69825: PPUSH
69826: LD_INT 1
69828: PPUSH
69829: CALL_OW 483
// CenterOnXY ( x , y ) ;
69833: LD_VAR 0 2
69837: PPUSH
69838: LD_VAR 0 3
69842: PPUSH
69843: CALL_OW 84
// end ; end_of_file
69847: LD_VAR 0 4
69851: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69852: LD_VAR 0 1
69856: PPUSH
69857: LD_VAR 0 2
69861: PPUSH
69862: LD_VAR 0 3
69866: PPUSH
69867: LD_VAR 0 4
69871: PPUSH
69872: LD_VAR 0 5
69876: PPUSH
69877: LD_VAR 0 6
69881: PPUSH
69882: CALL 56680 0 6
// end ; end_of_file end_of_file
69886: PPOPN 6
69888: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
69889: LD_INT 0
69891: PPUSH
// ar_miner := 81 ;
69892: LD_ADDR_EXP 103
69896: PUSH
69897: LD_INT 81
69899: ST_TO_ADDR
// ar_crane := 88 ;
69900: LD_ADDR_EXP 102
69904: PUSH
69905: LD_INT 88
69907: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
69908: LD_ADDR_EXP 97
69912: PUSH
69913: LD_INT 89
69915: ST_TO_ADDR
// us_hack := 99 ;
69916: LD_ADDR_EXP 98
69920: PUSH
69921: LD_INT 99
69923: ST_TO_ADDR
// us_artillery := 97 ;
69924: LD_ADDR_EXP 99
69928: PUSH
69929: LD_INT 97
69931: ST_TO_ADDR
// ar_bio_bomb := 91 ;
69932: LD_ADDR_EXP 100
69936: PUSH
69937: LD_INT 91
69939: ST_TO_ADDR
// ar_mortar := 92 ;
69940: LD_ADDR_EXP 101
69944: PUSH
69945: LD_INT 92
69947: ST_TO_ADDR
// ru_radar := 98 ;
69948: LD_ADDR_EXP 96
69952: PUSH
69953: LD_INT 98
69955: ST_TO_ADDR
// tech_Artillery := 80 ;
69956: LD_ADDR_EXP 104
69960: PUSH
69961: LD_INT 80
69963: ST_TO_ADDR
// tech_RadMat := 81 ;
69964: LD_ADDR_EXP 105
69968: PUSH
69969: LD_INT 81
69971: ST_TO_ADDR
// tech_BasicTools := 82 ;
69972: LD_ADDR_EXP 106
69976: PUSH
69977: LD_INT 82
69979: ST_TO_ADDR
// tech_Cargo := 83 ;
69980: LD_ADDR_EXP 107
69984: PUSH
69985: LD_INT 83
69987: ST_TO_ADDR
// tech_Track := 84 ;
69988: LD_ADDR_EXP 108
69992: PUSH
69993: LD_INT 84
69995: ST_TO_ADDR
// tech_Crane := 85 ;
69996: LD_ADDR_EXP 109
70000: PUSH
70001: LD_INT 85
70003: ST_TO_ADDR
// tech_Bulldozer := 86 ;
70004: LD_ADDR_EXP 110
70008: PUSH
70009: LD_INT 86
70011: ST_TO_ADDR
// tech_Hovercraft := 87 ;
70012: LD_ADDR_EXP 111
70016: PUSH
70017: LD_INT 87
70019: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
70020: LD_ADDR_EXP 112
70024: PUSH
70025: LD_INT 88
70027: ST_TO_ADDR
// class_mastodont := 31 ;
70028: LD_ADDR_EXP 113
70032: PUSH
70033: LD_INT 31
70035: ST_TO_ADDR
// class_horse := 21 ;
70036: LD_ADDR_EXP 114
70040: PUSH
70041: LD_INT 21
70043: ST_TO_ADDR
// end ;
70044: LD_VAR 0 1
70048: RET
// every 1 do
70049: GO 70051
70051: DISABLE
// InitGlobalVariables ;
70052: CALL 69889 0 0
70056: END
