// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 66046 0 0
// Init ;
   8: CALL 58 0 0
// AnimateTrees ( true ) ;
  12: LD_INT 1
  14: PPUSH
  15: CALL_OW 573
// CreateNature ( apemanSpawnArea , forestArea , riverArea ) ;
  19: LD_INT 4
  21: PPUSH
  22: LD_INT 5
  24: PPUSH
  25: LD_INT 6
  27: PPUSH
  28: CALL 443 0 3
// PrepareAmerican ;
  32: CALL 2519 0 0
// PrepareArabian ;
  36: CALL 1237 0 0
// Action ;
  40: CALL 4311 0 0
// if debug then
  44: LD_EXP 1
  48: IFFALSE 57
// FogOff ( 2 ) ;
  50: LD_INT 2
  52: PPUSH
  53: CALL_OW 344
// end ;
  57: END
// export debug , prefix , scoutActive , scoutFailed , scoutSuccess , usAttacksAllowed , usSurrender , russianAttack , hasRockets ; function Init ; begin
  58: LD_INT 0
  60: PPUSH
// debug := false ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// prefix := 06_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 06_
  76: ST_TO_ADDR
// scoutActive := 0 ;
  77: LD_ADDR_EXP 3
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// scoutFailed := false ;
  85: LD_ADDR_EXP 4
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// scoutSuccess := false ;
  93: LD_ADDR_EXP 5
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// usAttacksAllowed := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// usSurrender := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// russianAttack := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// hasRockets := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// end ; end_of_file
 133: LD_VAR 0 1
 137: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 138: LD_INT 0
 140: PPUSH
// uc_side := side ;
 141: LD_ADDR_OWVAR 20
 145: PUSH
 146: LD_VAR 0 1
 150: ST_TO_ADDR
// uc_nation := nation ;
 151: LD_ADDR_OWVAR 21
 155: PUSH
 156: LD_VAR 0 2
 160: ST_TO_ADDR
// vc_chassis := chassis ;
 161: LD_ADDR_OWVAR 37
 165: PUSH
 166: LD_VAR 0 3
 170: ST_TO_ADDR
// vc_engine := engine ;
 171: LD_ADDR_OWVAR 39
 175: PUSH
 176: LD_VAR 0 4
 180: ST_TO_ADDR
// vc_control := control ;
 181: LD_ADDR_OWVAR 38
 185: PUSH
 186: LD_VAR 0 5
 190: ST_TO_ADDR
// vc_weapon := weapon ;
 191: LD_ADDR_OWVAR 40
 195: PUSH
 196: LD_VAR 0 6
 200: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 201: LD_ADDR_OWVAR 41
 205: PUSH
 206: LD_VAR 0 7
 210: ST_TO_ADDR
// result := CreateVehicle ;
 211: LD_ADDR_VAR 0 8
 215: PUSH
 216: CALL_OW 45
 220: ST_TO_ADDR
// end ;
 221: LD_VAR 0 8
 225: RET
// export function SayX ( units , ident ) ; var i ; begin
 226: LD_INT 0
 228: PPUSH
 229: PPUSH
// result := false ;
 230: LD_ADDR_VAR 0 3
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// if not units then
 238: LD_VAR 0 1
 242: NOT
 243: IFFALSE 247
// exit ;
 245: GO 301
// for i in units do
 247: LD_ADDR_VAR 0 4
 251: PUSH
 252: LD_VAR 0 1
 256: PUSH
 257: FOR_IN
 258: IFFALSE 299
// if IsOk ( i ) then
 260: LD_VAR 0 4
 264: PPUSH
 265: CALL_OW 302
 269: IFFALSE 297
// begin Say ( i , ident ) ;
 271: LD_VAR 0 4
 275: PPUSH
 276: LD_VAR 0 2
 280: PPUSH
 281: CALL_OW 88
// result := i ;
 285: LD_ADDR_VAR 0 3
 289: PUSH
 290: LD_VAR 0 4
 294: ST_TO_ADDR
// break ;
 295: GO 299
// end ;
 297: GO 257
 299: POP
 300: POP
// end ;
 301: LD_VAR 0 3
 305: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 306: LD_INT 0
 308: PPUSH
 309: PPUSH
// InitUc ;
 310: CALL_OW 18
// InitHc ;
 314: CALL_OW 19
// uc_side := 0 ;
 318: LD_ADDR_OWVAR 20
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// uc_nation := 0 ;
 326: LD_ADDR_OWVAR 21
 330: PUSH
 331: LD_INT 0
 333: ST_TO_ADDR
// for i = 1 to amount do
 334: LD_ADDR_VAR 0 4
 338: PUSH
 339: DOUBLE
 340: LD_INT 1
 342: DEC
 343: ST_TO_ADDR
 344: LD_VAR 0 2
 348: PUSH
 349: FOR_TO
 350: IFFALSE 432
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 352: LD_ADDR_OWVAR 29
 356: PUSH
 357: LD_INT 9
 359: PPUSH
 360: LD_INT 12
 362: PPUSH
 363: CALL_OW 12
 367: PUSH
 368: LD_INT 9
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 12
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 383: LD_ADDR_OWVAR 35
 387: PUSH
 388: LD_INT 1
 390: NEG
 391: PPUSH
 392: LD_INT 1
 394: PPUSH
 395: CALL_OW 12
 399: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 400: LD_INT 0
 402: PPUSH
 403: LD_INT 12
 405: PPUSH
 406: LD_INT 1
 408: PPUSH
 409: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 413: CALL_OW 44
 417: PPUSH
 418: LD_VAR 0 1
 422: PPUSH
 423: LD_INT 0
 425: PPUSH
 426: CALL_OW 49
// end ;
 430: GO 349
 432: POP
 433: POP
// InitHc ;
 434: CALL_OW 19
// end ;
 438: LD_VAR 0 3
 442: RET
// export function CreateNature ( apemanArea , forest , water ) ; var i ; begin
 443: LD_INT 0
 445: PPUSH
 446: PPUSH
// uc_side := 0 ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_INT 0
 454: ST_TO_ADDR
// uc_nation := 0 ;
 455: LD_ADDR_OWVAR 21
 459: PUSH
 460: LD_INT 0
 462: ST_TO_ADDR
// SpawnApeman ( apemanArea , [ 9 , 8 , 7 ] [ Difficulty ] ) ;
 463: LD_VAR 0 1
 467: PPUSH
 468: LD_INT 9
 470: PUSH
 471: LD_INT 8
 473: PUSH
 474: LD_INT 7
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: LD_OWVAR 67
 486: ARRAY
 487: PPUSH
 488: CALL 306 0 2
// for i := 1 to 4 do
 492: LD_ADDR_VAR 0 5
 496: PUSH
 497: DOUBLE
 498: LD_INT 1
 500: DEC
 501: ST_TO_ADDR
 502: LD_INT 4
 504: PUSH
 505: FOR_TO
 506: IFFALSE 545
// begin hc_class := class_horse ;
 508: LD_ADDR_OWVAR 28
 512: PUSH
 513: LD_EXP 113
 517: ST_TO_ADDR
// hc_gallery :=  ;
 518: LD_ADDR_OWVAR 33
 522: PUSH
 523: LD_STRING 
 525: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 526: CALL_OW 44
 530: PPUSH
 531: LD_VAR 0 2
 535: PPUSH
 536: LD_INT 0
 538: PPUSH
 539: CALL_OW 49
// end ;
 543: GO 505
 545: POP
 546: POP
// for i = 1 to 5 do
 547: LD_ADDR_VAR 0 5
 551: PUSH
 552: DOUBLE
 553: LD_INT 1
 555: DEC
 556: ST_TO_ADDR
 557: LD_INT 5
 559: PUSH
 560: FOR_TO
 561: IFFALSE 615
// begin hc_class = class_tiger ;
 563: LD_ADDR_OWVAR 28
 567: PUSH
 568: LD_INT 14
 570: ST_TO_ADDR
// hc_gallery =  ;
 571: LD_ADDR_OWVAR 33
 575: PUSH
 576: LD_STRING 
 578: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 579: LD_ADDR_OWVAR 35
 583: PUSH
 584: LD_INT 7
 586: NEG
 587: PPUSH
 588: LD_INT 7
 590: PPUSH
 591: CALL_OW 12
 595: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
 596: CALL_OW 44
 600: PPUSH
 601: LD_VAR 0 2
 605: PPUSH
 606: LD_INT 0
 608: PPUSH
 609: CALL 45436 0 3
// end ;
 613: GO 560
 615: POP
 616: POP
// for i := 1 to 4 do
 617: LD_ADDR_VAR 0 5
 621: PUSH
 622: DOUBLE
 623: LD_INT 1
 625: DEC
 626: ST_TO_ADDR
 627: LD_INT 4
 629: PUSH
 630: FOR_TO
 631: IFFALSE 668
// begin hc_class := class_phororhacos ;
 633: LD_ADDR_OWVAR 28
 637: PUSH
 638: LD_INT 18
 640: ST_TO_ADDR
// hc_gallery :=  ;
 641: LD_ADDR_OWVAR 33
 645: PUSH
 646: LD_STRING 
 648: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 649: CALL_OW 44
 653: PPUSH
 654: LD_VAR 0 2
 658: PPUSH
 659: LD_INT 0
 661: PPUSH
 662: CALL_OW 49
// end ;
 666: GO 630
 668: POP
 669: POP
// for i := 1 to 4 do
 670: LD_ADDR_VAR 0 5
 674: PUSH
 675: DOUBLE
 676: LD_INT 1
 678: DEC
 679: ST_TO_ADDR
 680: LD_INT 4
 682: PUSH
 683: FOR_TO
 684: IFFALSE 721
// begin hc_class := class_baggie ;
 686: LD_ADDR_OWVAR 28
 690: PUSH
 691: LD_INT 13
 693: ST_TO_ADDR
// hc_gallery :=  ;
 694: LD_ADDR_OWVAR 33
 698: PUSH
 699: LD_STRING 
 701: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 702: CALL_OW 44
 706: PPUSH
 707: LD_VAR 0 2
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 683
 721: POP
 722: POP
// for i := 1 to 5 do
 723: LD_ADDR_VAR 0 5
 727: PUSH
 728: DOUBLE
 729: LD_INT 1
 731: DEC
 732: ST_TO_ADDR
 733: LD_INT 5
 735: PUSH
 736: FOR_TO
 737: IFFALSE 774
// begin hc_class := class_fish ;
 739: LD_ADDR_OWVAR 28
 743: PUSH
 744: LD_INT 20
 746: ST_TO_ADDR
// hc_gallery :=  ;
 747: LD_ADDR_OWVAR 33
 751: PUSH
 752: LD_STRING 
 754: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , water , false ) ;
 755: CALL_OW 44
 759: PPUSH
 760: LD_VAR 0 3
 764: PPUSH
 765: LD_INT 0
 767: PPUSH
 768: CALL_OW 49
// end ;
 772: GO 736
 774: POP
 775: POP
// end ;
 776: LD_VAR 0 4
 780: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
// if not observer or not unit then
 786: LD_VAR 0 1
 790: NOT
 791: PUSH
 792: LD_VAR 0 2
 796: NOT
 797: OR
 798: IFFALSE 802
// exit ;
 800: GO 850
// if not See ( GetSide ( observer ) , unit ) then
 802: LD_VAR 0 1
 806: PPUSH
 807: CALL_OW 255
 811: PPUSH
 812: LD_VAR 0 2
 816: PPUSH
 817: CALL_OW 292
 821: NOT
 822: IFFALSE 826
// exit ;
 824: GO 850
// result := GetDistUnits ( observer , unit ) < 12 ;
 826: LD_ADDR_VAR 0 3
 830: PUSH
 831: LD_VAR 0 1
 835: PPUSH
 836: LD_VAR 0 2
 840: PPUSH
 841: CALL_OW 296
 845: PUSH
 846: LD_INT 12
 848: LESS
 849: ST_TO_ADDR
// end ;
 850: LD_VAR 0 3
 854: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 855: LD_INT 0
 857: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 858: LD_VAR 0 2
 862: PUSH
 863: LD_INT 1
 865: ARRAY
 866: PPUSH
 867: LD_VAR 0 2
 871: PUSH
 872: LD_INT 2
 874: ARRAY
 875: PPUSH
 876: CALL_OW 488
 880: PUSH
 881: LD_VAR 0 2
 885: PUSH
 886: LD_INT 1
 888: ARRAY
 889: PPUSH
 890: LD_VAR 0 2
 894: PUSH
 895: LD_INT 2
 897: ARRAY
 898: PPUSH
 899: CALL_OW 428
 903: PUSH
 904: LD_INT 0
 906: EQUAL
 907: AND
 908: IFFALSE 942
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 910: LD_VAR 0 1
 914: PPUSH
 915: LD_VAR 0 2
 919: PUSH
 920: LD_INT 1
 922: ARRAY
 923: PPUSH
 924: LD_VAR 0 2
 928: PUSH
 929: LD_INT 2
 931: ARRAY
 932: PPUSH
 933: LD_VAR 0 3
 937: PPUSH
 938: CALL_OW 48
// end ;
 942: LD_VAR 0 4
 946: RET
// export function ReverseArray ( array ) ; var i ; begin
 947: LD_INT 0
 949: PPUSH
 950: PPUSH
// if not array then
 951: LD_VAR 0 1
 955: NOT
 956: IFFALSE 960
// exit ;
 958: GO 1018
// result := [ ] ;
 960: LD_ADDR_VAR 0 2
 964: PUSH
 965: EMPTY
 966: ST_TO_ADDR
// for i := 1 to array do
 967: LD_ADDR_VAR 0 3
 971: PUSH
 972: DOUBLE
 973: LD_INT 1
 975: DEC
 976: ST_TO_ADDR
 977: LD_VAR 0 1
 981: PUSH
 982: FOR_TO
 983: IFFALSE 1016
// result := Insert ( result , 1 , array [ i ] ) ;
 985: LD_ADDR_VAR 0 2
 989: PUSH
 990: LD_VAR 0 2
 994: PPUSH
 995: LD_INT 1
 997: PPUSH
 998: LD_VAR 0 1
1002: PUSH
1003: LD_VAR 0 3
1007: ARRAY
1008: PPUSH
1009: CALL_OW 2
1013: ST_TO_ADDR
1014: GO 982
1016: POP
1017: POP
// end ;
1018: LD_VAR 0 2
1022: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1023: LD_INT 0
1025: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1026: LD_VAR 0 1
1030: PPUSH
1031: LD_VAR 0 2
1035: PPUSH
1036: LD_VAR 0 3
1040: PPUSH
1041: LD_VAR 0 4
1045: PPUSH
1046: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1050: LD_VAR 0 1
1054: PPUSH
1055: LD_VAR 0 2
1059: PPUSH
1060: LD_VAR 0 3
1064: PPUSH
1065: CALL_OW 331
// end ;
1069: LD_VAR 0 5
1073: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1074: LD_INT 0
1076: PPUSH
// if not units then
1077: LD_VAR 0 1
1081: NOT
1082: IFFALSE 1086
// exit ;
1084: GO 1169
// result := true ;
1086: LD_ADDR_VAR 0 4
1090: PUSH
1091: LD_INT 1
1093: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1094: LD_VAR 0 1
1098: PPUSH
1099: LD_INT 26
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: PPUSH
1109: CALL_OW 72
1113: PUSH
1114: LD_INT 1
1116: ARRAY
1117: PPUSH
1118: LD_VAR 0 2
1122: PPUSH
1123: CALL_OW 88
1127: NOT
1128: IFFALSE 1169
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1130: LD_ADDR_VAR 0 4
1134: PUSH
1135: LD_VAR 0 1
1139: PPUSH
1140: LD_INT 26
1142: PUSH
1143: LD_INT 2
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: PPUSH
1150: CALL_OW 72
1154: PUSH
1155: LD_INT 1
1157: ARRAY
1158: PPUSH
1159: LD_VAR 0 3
1163: PPUSH
1164: CALL_OW 88
1168: ST_TO_ADDR
// end ;
1169: LD_VAR 0 4
1173: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1174: LD_INT 0
1176: PPUSH
1177: PPUSH
// if not group then
1178: LD_VAR 0 2
1182: NOT
1183: IFFALSE 1187
// exit ;
1185: GO 1232
// for i in group do
1187: LD_ADDR_VAR 0 4
1191: PUSH
1192: LD_VAR 0 2
1196: PUSH
1197: FOR_IN
1198: IFFALSE 1230
// if See ( side , i ) then
1200: LD_VAR 0 1
1204: PPUSH
1205: LD_VAR 0 4
1209: PPUSH
1210: CALL_OW 292
1214: IFFALSE 1228
// begin result := true ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: LD_INT 1
1223: ST_TO_ADDR
// exit ;
1224: POP
1225: POP
1226: GO 1232
// end ;
1228: GO 1197
1230: POP
1231: POP
// end ; end_of_file
1232: LD_VAR 0 3
1236: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeApes , heikeVehicles ; export function PrepareArabian ; var i , tmp ; begin
1237: LD_INT 0
1239: PPUSH
1240: PPUSH
1241: PPUSH
// uc_nation := 2 ;
1242: LD_ADDR_OWVAR 21
1246: PUSH
1247: LD_INT 2
1249: ST_TO_ADDR
// uc_side := 5 ;
1250: LD_ADDR_OWVAR 20
1254: PUSH
1255: LD_INT 5
1257: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1258: LD_ADDR_EXP 18
1262: PUSH
1263: LD_STRING Abdul
1265: PPUSH
1266: LD_INT 0
1268: PPUSH
1269: LD_STRING 
1271: PPUSH
1272: CALL 9785 0 3
1276: ST_TO_ADDR
// uc_side := 2 ;
1277: LD_ADDR_OWVAR 20
1281: PUSH
1282: LD_INT 2
1284: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1285: LD_ADDR_EXP 10
1289: PUSH
1290: LD_STRING Heike
1292: PPUSH
1293: LD_EXP 1
1297: NOT
1298: PPUSH
1299: LD_EXP 2
1303: PPUSH
1304: CALL 9785 0 3
1308: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1309: LD_ADDR_EXP 13
1313: PUSH
1314: LD_STRING Ibrahim
1316: PPUSH
1317: LD_EXP 1
1321: NOT
1322: PPUSH
1323: LD_EXP 2
1327: PPUSH
1328: CALL 9785 0 3
1332: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1333: LD_ADDR_EXP 11
1337: PUSH
1338: LD_STRING Givi
1340: PPUSH
1341: LD_EXP 1
1345: NOT
1346: PPUSH
1347: LD_EXP 2
1351: PPUSH
1352: CALL 9785 0 3
1356: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1357: LD_ADDR_EXP 14
1361: PUSH
1362: LD_STRING Kamil
1364: PPUSH
1365: LD_EXP 1
1369: NOT
1370: PPUSH
1371: LD_EXP 2
1375: PPUSH
1376: CALL 9785 0 3
1380: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1381: LD_ADDR_EXP 15
1385: PUSH
1386: LD_STRING Kaia
1388: PPUSH
1389: LD_EXP 1
1393: NOT
1394: PPUSH
1395: LD_EXP 2
1399: PPUSH
1400: CALL 9785 0 3
1404: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1405: LD_ADDR_EXP 16
1409: PUSH
1410: LD_STRING Sophia
1412: PPUSH
1413: LD_EXP 1
1417: NOT
1418: PPUSH
1419: LD_EXP 2
1423: PPUSH
1424: CALL 9785 0 3
1428: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1429: LD_ADDR_EXP 17
1433: PUSH
1434: LD_STRING Markov
1436: PPUSH
1437: LD_EXP 1
1441: NOT
1442: PPUSH
1443: LD_EXP 2
1447: PPUSH
1448: CALL 9785 0 3
1452: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1453: LD_ADDR_EXP 21
1457: PUSH
1458: LD_STRING Aviradze
1460: PPUSH
1461: LD_EXP 1
1465: NOT
1466: PPUSH
1467: LD_EXP 2
1471: PPUSH
1472: CALL 9785 0 3
1476: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1477: LD_ADDR_EXP 20
1481: PUSH
1482: LD_STRING Kurt
1484: PPUSH
1485: LD_EXP 1
1489: NOT
1490: PPUSH
1491: LD_EXP 2
1495: PPUSH
1496: CALL 9785 0 3
1500: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1501: LD_ADDR_EXP 12
1505: PUSH
1506: LD_STRING Mike
1508: PPUSH
1509: LD_EXP 1
1513: NOT
1514: PPUSH
1515: LD_EXP 2
1519: PPUSH
1520: CALL 9785 0 3
1524: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1525: LD_ADDR_EXP 19
1529: PUSH
1530: LD_STRING Olaf
1532: PPUSH
1533: LD_INT 0
1535: PPUSH
1536: LD_STRING 
1538: PPUSH
1539: CALL 9785 0 3
1543: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 06_others ) ;
1544: LD_ADDR_EXP 22
1548: PUSH
1549: LD_STRING 06_others
1551: PPUSH
1552: CALL_OW 31
1556: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 06_apes ) ;
1557: LD_ADDR_EXP 23
1561: PUSH
1562: LD_STRING 06_apes
1564: PPUSH
1565: CALL_OW 31
1569: ST_TO_ADDR
// if debug then
1570: LD_EXP 1
1574: IFFALSE 1849
// begin tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 750 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 900 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 100 , 0 ] ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 50 , 50 ] ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_mortar , 2 , 1000 , 0 ] ] ;
1576: LD_ADDR_VAR 0 3
1580: PUSH
1581: LD_INT 14
1583: PUSH
1584: LD_INT 1
1586: PUSH
1587: LD_INT 2
1589: PUSH
1590: LD_INT 25
1592: PUSH
1593: LD_INT 2
1595: PUSH
1596: LD_INT 1000
1598: PUSH
1599: LD_INT 0
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: PUSH
1611: LD_INT 14
1613: PUSH
1614: LD_INT 1
1616: PUSH
1617: LD_INT 1
1619: PUSH
1620: LD_INT 31
1622: PUSH
1623: LD_INT 2
1625: PUSH
1626: LD_INT 1000
1628: PUSH
1629: LD_INT 0
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: PUSH
1641: LD_INT 14
1643: PUSH
1644: LD_INT 1
1646: PUSH
1647: LD_INT 1
1649: PUSH
1650: LD_INT 27
1652: PUSH
1653: LD_INT 2
1655: PUSH
1656: LD_INT 750
1658: PUSH
1659: LD_INT 0
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: PUSH
1671: LD_INT 14
1673: PUSH
1674: LD_INT 1
1676: PUSH
1677: LD_INT 1
1679: PUSH
1680: LD_INT 27
1682: PUSH
1683: LD_INT 2
1685: PUSH
1686: LD_INT 900
1688: PUSH
1689: LD_INT 0
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: LIST
1700: PUSH
1701: LD_INT 14
1703: PUSH
1704: LD_INT 1
1706: PUSH
1707: LD_INT 1
1709: PUSH
1710: LD_INT 32
1712: PUSH
1713: LD_INT 2
1715: PUSH
1716: LD_INT 1000
1718: PUSH
1719: LD_INT 100
1721: PUSH
1722: LD_INT 0
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 14
1740: PUSH
1741: LD_INT 1
1743: PUSH
1744: LD_INT 1
1746: PUSH
1747: LD_INT 32
1749: PUSH
1750: LD_INT 2
1752: PUSH
1753: LD_INT 1000
1755: PUSH
1756: LD_INT 50
1758: PUSH
1759: LD_INT 50
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: PUSH
1775: LD_INT 14
1777: PUSH
1778: LD_INT 1
1780: PUSH
1781: LD_INT 2
1783: PUSH
1784: LD_INT 27
1786: PUSH
1787: LD_INT 2
1789: PUSH
1790: LD_INT 1000
1792: PUSH
1793: LD_INT 0
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: PUSH
1805: LD_INT 14
1807: PUSH
1808: LD_INT 1
1810: PUSH
1811: LD_INT 1
1813: PUSH
1814: LD_EXP 100
1818: PUSH
1819: LD_INT 2
1821: PUSH
1822: LD_INT 1000
1824: PUSH
1825: LD_INT 0
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: ST_TO_ADDR
// end else
1847: GO 1856
// tmp := [ ] ;
1849: LD_ADDR_VAR 0 3
1853: PUSH
1854: EMPTY
1855: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 06_Vehicles , tmp ) ;
1856: LD_ADDR_EXP 24
1860: PUSH
1861: LD_STRING 06_Vehicles
1863: PPUSH
1864: LD_VAR 0 3
1868: PPUSH
1869: CALL_OW 30
1873: ST_TO_ADDR
// if heikeVehicles then
1874: LD_EXP 24
1878: IFFALSE 1973
// begin for i := heikeVehicles downto 1 do
1880: LD_ADDR_VAR 0 2
1884: PUSH
1885: DOUBLE
1886: LD_EXP 24
1890: INC
1891: ST_TO_ADDR
1892: LD_INT 1
1894: PUSH
1895: FOR_DOWNTO
1896: IFFALSE 1971
// begin if heikeVehicles [ i ] [ 3 ] = control_remote then
1898: LD_EXP 24
1902: PUSH
1903: LD_VAR 0 2
1907: ARRAY
1908: PUSH
1909: LD_INT 3
1911: ARRAY
1912: PUSH
1913: LD_INT 2
1915: EQUAL
1916: IFFALSE 1969
// begin heikeVehicles := Insert ( heikeVehicles , heikeVehicles , heikeVehicles [ i ] ) ;
1918: LD_ADDR_EXP 24
1922: PUSH
1923: LD_EXP 24
1927: PPUSH
1928: LD_EXP 24
1932: PPUSH
1933: LD_EXP 24
1937: PUSH
1938: LD_VAR 0 2
1942: ARRAY
1943: PPUSH
1944: CALL_OW 2
1948: ST_TO_ADDR
// heikeVehicles := Delete ( heikeVehicles , i ) ;
1949: LD_ADDR_EXP 24
1953: PUSH
1954: LD_EXP 24
1958: PPUSH
1959: LD_VAR 0 2
1963: PPUSH
1964: CALL_OW 3
1968: ST_TO_ADDR
// end ; end ;
1969: GO 1895
1971: POP
1972: POP
// end ; end ;
1973: LD_VAR 0 1
1977: RET
// every 0 0$1 trigger scoutActive do var i , tmp ;
1978: LD_EXP 3
1982: IFFALSE 2516
1984: GO 1986
1986: DISABLE
1987: LD_INT 0
1989: PPUSH
1990: PPUSH
// begin tmp := [ [ [ 96 , 50 ] , [ 49 , 52 ] , [ 34 , 55 ] , [ 41 , 70 ] , [ 53 , 96 ] , [ 103 , 64 ] ] , [ [ 104 , 70 ] , [ 111 , 103 ] , [ 131 , 147 ] , [ 130 , 153 ] , [ 110 , 93 ] , [ 103 , 65 ] ] ] ;
1991: LD_ADDR_VAR 0 2
1995: PUSH
1996: LD_INT 96
1998: PUSH
1999: LD_INT 50
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: PUSH
2006: LD_INT 49
2008: PUSH
2009: LD_INT 52
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: PUSH
2016: LD_INT 34
2018: PUSH
2019: LD_INT 55
2021: PUSH
2022: EMPTY
2023: LIST
2024: LIST
2025: PUSH
2026: LD_INT 41
2028: PUSH
2029: LD_INT 70
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: PUSH
2036: LD_INT 53
2038: PUSH
2039: LD_INT 96
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: PUSH
2046: LD_INT 103
2048: PUSH
2049: LD_INT 64
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: PUSH
2056: EMPTY
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: PUSH
2064: LD_INT 104
2066: PUSH
2067: LD_INT 70
2069: PUSH
2070: EMPTY
2071: LIST
2072: LIST
2073: PUSH
2074: LD_INT 111
2076: PUSH
2077: LD_INT 103
2079: PUSH
2080: EMPTY
2081: LIST
2082: LIST
2083: PUSH
2084: LD_INT 131
2086: PUSH
2087: LD_INT 147
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: PUSH
2094: LD_INT 130
2096: PUSH
2097: LD_INT 153
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 110
2106: PUSH
2107: LD_INT 93
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: PUSH
2114: LD_INT 103
2116: PUSH
2117: LD_INT 65
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: ST_TO_ADDR
// for i in tmp [ 1 ] do
2136: LD_ADDR_VAR 0 1
2140: PUSH
2141: LD_VAR 0 2
2145: PUSH
2146: LD_INT 1
2148: ARRAY
2149: PUSH
2150: FOR_IN
2151: IFFALSE 2203
// begin AddComAgressiveMove ( Mike , i [ 1 ] , i [ 2 ] ) ;
2153: LD_EXP 12
2157: PPUSH
2158: LD_VAR 0 1
2162: PUSH
2163: LD_INT 1
2165: ARRAY
2166: PPUSH
2167: LD_VAR 0 1
2171: PUSH
2172: LD_INT 2
2174: ARRAY
2175: PPUSH
2176: CALL_OW 174
// AddComHold ( Mike ) ;
2180: LD_EXP 12
2184: PPUSH
2185: CALL_OW 200
// AddComWait ( Mike , 0 0$5 ) ;
2189: LD_EXP 12
2193: PPUSH
2194: LD_INT 175
2196: PPUSH
2197: CALL_OW 202
// end ;
2201: GO 2150
2203: POP
2204: POP
// for i in tmp [ 2 ] do
2205: LD_ADDR_VAR 0 1
2209: PUSH
2210: LD_VAR 0 2
2214: PUSH
2215: LD_INT 2
2217: ARRAY
2218: PUSH
2219: FOR_IN
2220: IFFALSE 2272
// begin AddComAgressiveMove ( Kurt , i [ 1 ] , i [ 2 ] ) ;
2222: LD_EXP 20
2226: PPUSH
2227: LD_VAR 0 1
2231: PUSH
2232: LD_INT 1
2234: ARRAY
2235: PPUSH
2236: LD_VAR 0 1
2240: PUSH
2241: LD_INT 2
2243: ARRAY
2244: PPUSH
2245: CALL_OW 174
// AddComHold ( Kurt ) ;
2249: LD_EXP 20
2253: PPUSH
2254: CALL_OW 200
// AddComWait ( Kurt , 0 0$5 ) ;
2258: LD_EXP 20
2262: PPUSH
2263: LD_INT 175
2265: PPUSH
2266: CALL_OW 202
// end ;
2270: GO 2219
2272: POP
2273: POP
// wait ( 0 0$1 ) ;
2274: LD_INT 35
2276: PPUSH
2277: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2281: LD_INT 35
2283: PPUSH
2284: CALL_OW 67
// until ( not HasTask ( Mike ) or IsDead ( Mike ) ) and ( not HasTask ( Kurt ) or IsDead ( Kurt ) ) ;
2288: LD_EXP 12
2292: PPUSH
2293: CALL_OW 314
2297: NOT
2298: PUSH
2299: LD_EXP 12
2303: PPUSH
2304: CALL_OW 301
2308: OR
2309: PUSH
2310: LD_EXP 20
2314: PPUSH
2315: CALL_OW 314
2319: NOT
2320: PUSH
2321: LD_EXP 20
2325: PPUSH
2326: CALL_OW 301
2330: OR
2331: AND
2332: IFFALSE 2281
// if IsDead ( Kurt ) and IsDead ( Mike ) then
2334: LD_EXP 20
2338: PPUSH
2339: CALL_OW 301
2343: PUSH
2344: LD_EXP 12
2348: PPUSH
2349: CALL_OW 301
2353: AND
2354: IFFALSE 2366
// begin scoutFailed := true ;
2356: LD_ADDR_EXP 4
2360: PUSH
2361: LD_INT 1
2363: ST_TO_ADDR
// exit ;
2364: GO 2516
// end ; ComMoveXY ( [ Kurt , Mike ] , 132 , 52 ) ;
2366: LD_EXP 20
2370: PUSH
2371: LD_EXP 12
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: PPUSH
2380: LD_INT 132
2382: PPUSH
2383: LD_INT 52
2385: PPUSH
2386: CALL_OW 111
// AddComMoveUnit ( [ Kurt , Mike ] , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
2390: LD_EXP 20
2394: PUSH
2395: LD_EXP 12
2399: PUSH
2400: EMPTY
2401: LIST
2402: LIST
2403: PPUSH
2404: LD_INT 22
2406: PUSH
2407: LD_INT 2
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PPUSH
2414: CALL_OW 69
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
2427: LD_INT 35
2429: PPUSH
2430: CALL_OW 67
// until See ( 2 , Kurt ) or See ( 2 , Mike ) ;
2434: LD_INT 2
2436: PPUSH
2437: LD_EXP 20
2441: PPUSH
2442: CALL_OW 292
2446: PUSH
2447: LD_INT 2
2449: PPUSH
2450: LD_EXP 12
2454: PPUSH
2455: CALL_OW 292
2459: OR
2460: IFFALSE 2427
// if IsLive ( Kurt ) then
2462: LD_EXP 20
2466: PPUSH
2467: CALL_OW 300
2471: IFFALSE 2485
// SetSide ( Kurt , 2 ) ;
2473: LD_EXP 20
2477: PPUSH
2478: LD_INT 2
2480: PPUSH
2481: CALL_OW 235
// if IsLive ( Mike ) then
2485: LD_EXP 12
2489: PPUSH
2490: CALL_OW 300
2494: IFFALSE 2508
// SetSide ( Mike , 2 ) ;
2496: LD_EXP 12
2500: PPUSH
2501: LD_INT 2
2503: PPUSH
2504: CALL_OW 235
// scoutSuccess := true ;
2508: LD_ADDR_EXP 5
2512: PUSH
2513: LD_INT 1
2515: ST_TO_ADDR
// end ; end_of_file
2516: PPOPN 2
2518: END
// export usCommander , usForces , usCargo ; export function PrepareAmerican ; var i , b , veh ; begin
2519: LD_INT 0
2521: PPUSH
2522: PPUSH
2523: PPUSH
2524: PPUSH
// uc_side := 1 ;
2525: LD_ADDR_OWVAR 20
2529: PUSH
2530: LD_INT 1
2532: ST_TO_ADDR
// uc_nation := 1 ;
2533: LD_ADDR_OWVAR 21
2537: PUSH
2538: LD_INT 1
2540: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 2000 , 2500 , 3000 , 3500 ] [ Difficulty ] ) ;
2541: LD_INT 1
2543: PPUSH
2544: CALL_OW 274
2548: PPUSH
2549: LD_INT 1
2551: PPUSH
2552: LD_INT 2000
2554: PUSH
2555: LD_INT 2500
2557: PUSH
2558: LD_INT 3000
2560: PUSH
2561: LD_INT 3500
2563: PUSH
2564: EMPTY
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: PUSH
2570: LD_OWVAR 67
2574: ARRAY
2575: PPUSH
2576: CALL_OW 277
// SetResourceType ( GetBase ( usDepot ) , mat_oil , 600 ) ;
2580: LD_INT 1
2582: PPUSH
2583: CALL_OW 274
2587: PPUSH
2588: LD_INT 2
2590: PPUSH
2591: LD_INT 600
2593: PPUSH
2594: CALL_OW 277
// usForces := [ ] ;
2598: LD_ADDR_EXP 26
2602: PUSH
2603: EMPTY
2604: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_btype , b_bunker ] ) do
2605: LD_ADDR_VAR 0 2
2609: PUSH
2610: LD_INT 30
2612: PUSH
2613: LD_INT 32
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PPUSH
2620: CALL_OW 69
2624: PUSH
2625: FOR_IN
2626: IFFALSE 2716
// begin if GetBWeapon ( i ) = us_radar then
2628: LD_VAR 0 2
2632: PPUSH
2633: CALL_OW 269
2637: PUSH
2638: LD_INT 11
2640: EQUAL
2641: IFFALSE 2666
// begin uc_nation := 0 ;
2643: LD_ADDR_OWVAR 21
2647: PUSH
2648: LD_INT 0
2650: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 2 ) ;
2651: LD_INT 0
2653: PPUSH
2654: LD_INT 16
2656: PPUSH
2657: LD_INT 2
2659: PPUSH
2660: CALL_OW 380
// end else
2664: GO 2700
// PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2666: LD_INT 0
2668: PPUSH
2669: LD_INT 1
2671: PPUSH
2672: LD_INT 5
2674: PUSH
2675: LD_INT 6
2677: PUSH
2678: LD_INT 7
2680: PUSH
2681: LD_INT 8
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: LIST
2688: LIST
2689: PUSH
2690: LD_OWVAR 67
2694: ARRAY
2695: PPUSH
2696: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2700: CALL_OW 44
2704: PPUSH
2705: LD_VAR 0 2
2709: PPUSH
2710: CALL_OW 52
// end ;
2714: GO 2625
2716: POP
2717: POP
// b := HexInfo ( 74 , 120 ) ;
2718: LD_ADDR_VAR 0 3
2722: PUSH
2723: LD_INT 74
2725: PPUSH
2726: LD_INT 120
2728: PPUSH
2729: CALL_OW 428
2733: ST_TO_ADDR
// uc_nation := 1 ;
2734: LD_ADDR_OWVAR 21
2738: PUSH
2739: LD_INT 1
2741: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
2742: LD_ADDR_VAR 0 2
2746: PUSH
2747: DOUBLE
2748: LD_INT 1
2750: DEC
2751: ST_TO_ADDR
2752: LD_INT 1
2754: PUSH
2755: LD_INT 2
2757: PUSH
2758: LD_INT 3
2760: PUSH
2761: LD_INT 4
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: LIST
2768: LIST
2769: PUSH
2770: LD_OWVAR 67
2774: ARRAY
2775: PUSH
2776: FOR_TO
2777: IFFALSE 2829
// begin PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2779: LD_INT 0
2781: PPUSH
2782: LD_INT 1
2784: PPUSH
2785: LD_INT 5
2787: PUSH
2788: LD_INT 6
2790: PUSH
2791: LD_INT 7
2793: PUSH
2794: LD_INT 8
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: LIST
2802: PUSH
2803: LD_OWVAR 67
2807: ARRAY
2808: PPUSH
2809: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b ) ;
2813: CALL_OW 44
2817: PPUSH
2818: LD_VAR 0 3
2822: PPUSH
2823: CALL_OW 52
// end ;
2827: GO 2776
2829: POP
2830: POP
// SetClass ( UnitsInside ( b ) , class_sniper ) ;
2831: LD_VAR 0 3
2835: PPUSH
2836: CALL_OW 313
2840: PPUSH
2841: LD_INT 5
2843: PPUSH
2844: CALL_OW 336
// for i := 1 to 6 do
2848: LD_ADDR_VAR 0 2
2852: PUSH
2853: DOUBLE
2854: LD_INT 1
2856: DEC
2857: ST_TO_ADDR
2858: LD_INT 6
2860: PUSH
2861: FOR_TO
2862: IFFALSE 2912
// begin PrepareHuman ( false , 4 , 6 ) ;
2864: LD_INT 0
2866: PPUSH
2867: LD_INT 4
2869: PPUSH
2870: LD_INT 6
2872: PPUSH
2873: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ amLab1 , amLab2 ] [ i mod 2 + 1 ] ) ;
2877: CALL_OW 44
2881: PPUSH
2882: LD_INT 32
2884: PUSH
2885: LD_INT 33
2887: PUSH
2888: EMPTY
2889: LIST
2890: LIST
2891: PUSH
2892: LD_VAR 0 2
2896: PUSH
2897: LD_INT 2
2899: MOD
2900: PUSH
2901: LD_INT 1
2903: PLUS
2904: ARRAY
2905: PPUSH
2906: CALL_OW 52
// end ;
2910: GO 2861
2912: POP
2913: POP
// for i := 1 to 4 do
2914: LD_ADDR_VAR 0 2
2918: PUSH
2919: DOUBLE
2920: LD_INT 1
2922: DEC
2923: ST_TO_ADDR
2924: LD_INT 4
2926: PUSH
2927: FOR_TO
2928: IFFALSE 2957
// begin PrepareHuman ( false , 3 , 6 ) ;
2930: LD_INT 0
2932: PPUSH
2933: LD_INT 3
2935: PPUSH
2936: LD_INT 6
2938: PPUSH
2939: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , amFac ) ;
2943: CALL_OW 44
2947: PPUSH
2948: LD_INT 25
2950: PPUSH
2951: CALL_OW 52
// end ;
2955: GO 2927
2957: POP
2958: POP
// for i := 1 to 3 do
2959: LD_ADDR_VAR 0 2
2963: PUSH
2964: DOUBLE
2965: LD_INT 1
2967: DEC
2968: ST_TO_ADDR
2969: LD_INT 3
2971: PUSH
2972: FOR_TO
2973: IFFALSE 3031
// begin PrepareHuman ( false , 3 , [ 6 , 7 , 7 , 7 ] [ Difficulty ] ) ;
2975: LD_INT 0
2977: PPUSH
2978: LD_INT 3
2980: PPUSH
2981: LD_INT 6
2983: PUSH
2984: LD_INT 7
2986: PUSH
2987: LD_INT 7
2989: PUSH
2990: LD_INT 7
2992: PUSH
2993: EMPTY
2994: LIST
2995: LIST
2996: LIST
2997: LIST
2998: PUSH
2999: LD_OWVAR 67
3003: ARRAY
3004: PPUSH
3005: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 84 , 154 ) ) ;
3009: CALL_OW 44
3013: PPUSH
3014: LD_INT 84
3016: PPUSH
3017: LD_INT 154
3019: PPUSH
3020: CALL_OW 428
3024: PPUSH
3025: CALL_OW 52
// end ;
3029: GO 2972
3031: POP
3032: POP
// for i := 1 to 3 do
3033: LD_ADDR_VAR 0 2
3037: PUSH
3038: DOUBLE
3039: LD_INT 1
3041: DEC
3042: ST_TO_ADDR
3043: LD_INT 3
3045: PUSH
3046: FOR_TO
3047: IFFALSE 3134
// begin PrepareVehicle ( us_medium_wheeled , engine_solar , control_manual , us_crane , 100 ) ;
3049: LD_INT 2
3051: PPUSH
3052: LD_INT 2
3054: PPUSH
3055: LD_INT 1
3057: PPUSH
3058: LD_INT 13
3060: PPUSH
3061: LD_INT 100
3063: PPUSH
3064: CALL 14649 0 5
// veh := CreateVehicle ;
3068: LD_ADDR_VAR 0 4
3072: PUSH
3073: CALL_OW 45
3077: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3078: LD_VAR 0 4
3082: PPUSH
3083: LD_INT 3
3085: PPUSH
3086: CALL_OW 233
// PlaceUnitArea ( veh , usCraneArea , false ) ;
3090: LD_VAR 0 4
3094: PPUSH
3095: LD_INT 9
3097: PPUSH
3098: LD_INT 0
3100: PPUSH
3101: CALL_OW 49
// PrepareHuman ( false , 3 , 6 ) ;
3105: LD_INT 0
3107: PPUSH
3108: LD_INT 3
3110: PPUSH
3111: LD_INT 6
3113: PPUSH
3114: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3118: CALL_OW 44
3122: PPUSH
3123: LD_VAR 0 4
3127: PPUSH
3128: CALL_OW 52
// end ;
3132: GO 3046
3134: POP
3135: POP
// InitHc ;
3136: CALL_OW 19
// hc_gallery := us ;
3140: LD_ADDR_OWVAR 33
3144: PUSH
3145: LD_STRING us
3147: ST_TO_ADDR
// hc_face_number := 26 ;
3148: LD_ADDR_OWVAR 34
3152: PUSH
3153: LD_INT 26
3155: ST_TO_ADDR
// hc_name := Max Caldera ;
3156: LD_ADDR_OWVAR 26
3160: PUSH
3161: LD_STRING Max Caldera
3163: ST_TO_ADDR
// hc_sex := sex_male ;
3164: LD_ADDR_OWVAR 27
3168: PUSH
3169: LD_INT 1
3171: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
3172: LD_ADDR_OWVAR 29
3176: PUSH
3177: LD_INT 10
3179: PUSH
3180: LD_INT 11
3182: PUSH
3183: EMPTY
3184: LIST
3185: LIST
3186: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
3187: LD_ADDR_OWVAR 30
3191: PUSH
3192: LD_INT 2
3194: PUSH
3195: LD_INT 1
3197: PUSH
3198: LD_INT 0
3200: PUSH
3201: LD_INT 0
3203: PUSH
3204: EMPTY
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: ST_TO_ADDR
// hc_skills := [ 8 , 4 , 3 , 1 ] ;
3210: LD_ADDR_OWVAR 31
3214: PUSH
3215: LD_INT 8
3217: PUSH
3218: LD_INT 4
3220: PUSH
3221: LD_INT 3
3223: PUSH
3224: LD_INT 1
3226: PUSH
3227: EMPTY
3228: LIST
3229: LIST
3230: LIST
3231: LIST
3232: ST_TO_ADDR
// usCommander := CreateHuman ;
3233: LD_ADDR_EXP 25
3237: PUSH
3238: CALL_OW 44
3242: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
3243: LD_EXP 25
3247: PPUSH
3248: LD_INT 1
3250: PPUSH
3251: CALL_OW 52
// InitHC_All ( ) ;
3255: CALL_OW 584
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay , 100 ) ;
3259: LD_INT 2
3261: PPUSH
3262: LD_INT 1
3264: PPUSH
3265: LD_INT 2
3267: PPUSH
3268: LD_INT 12
3270: PPUSH
3271: LD_INT 100
3273: PPUSH
3274: CALL 14649 0 5
// usCargo := CreateVehicle ;
3278: LD_ADDR_EXP 27
3282: PUSH
3283: CALL_OW 45
3287: ST_TO_ADDR
// PlaceUnitXY ( usCargo , 81 , 143 , false ) ;
3288: LD_EXP 27
3292: PPUSH
3293: LD_INT 81
3295: PPUSH
3296: LD_INT 143
3298: PPUSH
3299: LD_INT 0
3301: PPUSH
3302: CALL_OW 48
// Connect ( usCargo ) ;
3306: LD_EXP 27
3310: PPUSH
3311: CALL 17742 0 1
// DoNotAttack ( 5 , usCargo ) ;
3315: LD_INT 5
3317: PPUSH
3318: LD_EXP 27
3322: PPUSH
3323: CALL_OW 471
// end ;
3327: LD_VAR 0 1
3331: RET
// every 6 6$00 trigger not usForces and usAttacksAllowed and IsOk ( amFac ) and BuildingStatus ( amFac ) = bs_idle do var i , chassis , weapon ;
3332: LD_EXP 26
3336: NOT
3337: PUSH
3338: LD_EXP 6
3342: AND
3343: PUSH
3344: LD_INT 25
3346: PPUSH
3347: CALL_OW 302
3351: AND
3352: PUSH
3353: LD_INT 25
3355: PPUSH
3356: CALL_OW 461
3360: PUSH
3361: LD_INT 2
3363: EQUAL
3364: AND
3365: IFFALSE 3522
3367: GO 3369
3369: DISABLE
3370: LD_INT 0
3372: PPUSH
3373: PPUSH
3374: PPUSH
// begin enable ;
3375: ENABLE
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
3376: LD_ADDR_VAR 0 1
3380: PUSH
3381: DOUBLE
3382: LD_INT 1
3384: DEC
3385: ST_TO_ADDR
3386: LD_INT 4
3388: PUSH
3389: LD_INT 5
3391: PUSH
3392: LD_INT 6
3394: PUSH
3395: LD_INT 7
3397: PUSH
3398: EMPTY
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: PUSH
3404: LD_OWVAR 67
3408: ARRAY
3409: PUSH
3410: FOR_TO
3411: IFFALSE 3520
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3413: LD_ADDR_VAR 0 2
3417: PUSH
3418: LD_INT 2
3420: PUSH
3421: LD_INT 3
3423: PUSH
3424: LD_INT 4
3426: PUSH
3427: EMPTY
3428: LIST
3429: LIST
3430: LIST
3431: PUSH
3432: LD_INT 1
3434: PPUSH
3435: LD_INT 3
3437: PPUSH
3438: CALL_OW 12
3442: ARRAY
3443: ST_TO_ADDR
// if chassis = us_heavy_tracked then
3444: LD_VAR 0 2
3448: PUSH
3449: LD_INT 4
3451: EQUAL
3452: IFFALSE 3464
// weapon := us_heavy_gun else
3454: LD_ADDR_VAR 0 3
3458: PUSH
3459: LD_INT 6
3461: ST_TO_ADDR
3462: GO 3495
// weapon := [ us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3464: LD_ADDR_VAR 0 3
3468: PUSH
3469: LD_INT 5
3471: PUSH
3472: LD_INT 7
3474: PUSH
3475: LD_INT 4
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: LIST
3482: PUSH
3483: LD_INT 1
3485: PPUSH
3486: LD_INT 3
3488: PPUSH
3489: CALL_OW 12
3493: ARRAY
3494: ST_TO_ADDR
// AddComConstruct ( amFac , chassis , engine_combustion , control_remote , weapon ) ;
3495: LD_INT 25
3497: PPUSH
3498: LD_VAR 0 2
3502: PPUSH
3503: LD_INT 1
3505: PPUSH
3506: LD_INT 2
3508: PPUSH
3509: LD_VAR 0 3
3513: PPUSH
3514: CALL_OW 185
// end ;
3518: GO 3410
3520: POP
3521: POP
// end ;
3522: PPOPN 3
3524: END
// every 0 0$10 trigger usForces >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] do var i , tmp ;
3525: LD_EXP 26
3529: PUSH
3530: LD_INT 4
3532: PUSH
3533: LD_INT 5
3535: PUSH
3536: LD_INT 6
3538: PUSH
3539: LD_INT 7
3541: PUSH
3542: EMPTY
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: PUSH
3548: LD_OWVAR 67
3552: ARRAY
3553: GREATEREQUAL
3554: IFFALSE 3694
3556: GO 3558
3558: DISABLE
3559: LD_INT 0
3561: PPUSH
3562: PPUSH
// begin enable ;
3563: ENABLE
// tmp := usForces ;
3564: LD_ADDR_VAR 0 2
3568: PUSH
3569: LD_EXP 26
3573: ST_TO_ADDR
// usForces := [ ] ;
3574: LD_ADDR_EXP 26
3578: PUSH
3579: EMPTY
3580: ST_TO_ADDR
// if not tmp then
3581: LD_VAR 0 2
3585: NOT
3586: IFFALSE 3590
// exit ;
3588: GO 3694
// repeat wait ( 0 0$1 ) ;
3590: LD_INT 35
3592: PPUSH
3593: CALL_OW 67
// for i in tmp do
3597: LD_ADDR_VAR 0 1
3601: PUSH
3602: LD_VAR 0 2
3606: PUSH
3607: FOR_IN
3608: IFFALSE 3685
// begin if not IsOk ( i ) then
3610: LD_VAR 0 1
3614: PPUSH
3615: CALL_OW 302
3619: NOT
3620: IFFALSE 3649
// begin ComUnlink ( i ) ;
3622: LD_VAR 0 1
3626: PPUSH
3627: CALL_OW 136
// tmp := tmp diff i ;
3631: LD_ADDR_VAR 0 2
3635: PUSH
3636: LD_VAR 0 2
3640: PUSH
3641: LD_VAR 0 1
3645: DIFF
3646: ST_TO_ADDR
// end else
3647: GO 3683
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
3649: LD_VAR 0 1
3653: PPUSH
3654: LD_INT 22
3656: PUSH
3657: LD_INT 2
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: PPUSH
3664: CALL_OW 69
3668: PPUSH
3669: LD_VAR 0 1
3673: PPUSH
3674: CALL_OW 74
3678: PPUSH
3679: CALL_OW 115
// end ;
3683: GO 3607
3685: POP
3686: POP
// until not tmp ;
3687: LD_VAR 0 2
3691: NOT
3692: IFFALSE 3590
// end ;
3694: PPOPN 2
3696: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( southScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3697: LD_EXP 3
3701: PUSH
3702: LD_EXP 5
3706: NOT
3707: AND
3708: PUSH
3709: LD_INT 11
3711: PPUSH
3712: LD_INT 22
3714: PUSH
3715: LD_INT 2
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PPUSH
3722: CALL_OW 70
3726: AND
3727: IFFALSE 3848
3729: GO 3731
3731: DISABLE
3732: LD_INT 0
3734: PPUSH
3735: PPUSH
3736: PPUSH
// begin uc_side := 1 ;
3737: LD_ADDR_OWVAR 20
3741: PUSH
3742: LD_INT 1
3744: ST_TO_ADDR
// uc_nation := 1 ;
3745: LD_ADDR_OWVAR 21
3749: PUSH
3750: LD_INT 1
3752: ST_TO_ADDR
// tmp := [ ] ;
3753: LD_ADDR_VAR 0 3
3757: PUSH
3758: EMPTY
3759: ST_TO_ADDR
// for i := 1 to 2 do
3760: LD_ADDR_VAR 0 1
3764: PUSH
3765: DOUBLE
3766: LD_INT 1
3768: DEC
3769: ST_TO_ADDR
3770: LD_INT 2
3772: PUSH
3773: FOR_TO
3774: IFFALSE 3846
// begin PrepareSoldier ( false , 7 ) ;
3776: LD_INT 0
3778: PPUSH
3779: LD_INT 7
3781: PPUSH
3782: CALL_OW 381
// un := CreateHuman ;
3786: LD_ADDR_VAR 0 2
3790: PUSH
3791: CALL_OW 44
3795: ST_TO_ADDR
// PlaceUnitXYR ( un , 130 , 153 , 3 , false ) ;
3796: LD_VAR 0 2
3800: PPUSH
3801: LD_INT 130
3803: PPUSH
3804: LD_INT 153
3806: PPUSH
3807: LD_INT 3
3809: PPUSH
3810: LD_INT 0
3812: PPUSH
3813: CALL_OW 50
// SetClass ( un , class_sniper ) ;
3817: LD_VAR 0 2
3821: PPUSH
3822: LD_INT 5
3824: PPUSH
3825: CALL_OW 336
// AddComAgressiveMove ( un , 108 , 108 ) ;
3829: LD_VAR 0 2
3833: PPUSH
3834: LD_INT 108
3836: PPUSH
3837: LD_INT 108
3839: PPUSH
3840: CALL_OW 174
// end ;
3844: GO 3773
3846: POP
3847: POP
// end ;
3848: PPOPN 3
3850: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( northScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3851: LD_EXP 3
3855: PUSH
3856: LD_EXP 5
3860: NOT
3861: AND
3862: PUSH
3863: LD_INT 10
3865: PPUSH
3866: LD_INT 22
3868: PUSH
3869: LD_INT 2
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: PPUSH
3876: CALL_OW 70
3880: AND
3881: IFFALSE 4002
3883: GO 3885
3885: DISABLE
3886: LD_INT 0
3888: PPUSH
3889: PPUSH
3890: PPUSH
// begin uc_side := 1 ;
3891: LD_ADDR_OWVAR 20
3895: PUSH
3896: LD_INT 1
3898: ST_TO_ADDR
// uc_nation := 1 ;
3899: LD_ADDR_OWVAR 21
3903: PUSH
3904: LD_INT 1
3906: ST_TO_ADDR
// tmp := [ ] ;
3907: LD_ADDR_VAR 0 3
3911: PUSH
3912: EMPTY
3913: ST_TO_ADDR
// for i := 1 to 2 do
3914: LD_ADDR_VAR 0 1
3918: PUSH
3919: DOUBLE
3920: LD_INT 1
3922: DEC
3923: ST_TO_ADDR
3924: LD_INT 2
3926: PUSH
3927: FOR_TO
3928: IFFALSE 4000
// begin PrepareSoldier ( false , 7 ) ;
3930: LD_INT 0
3932: PPUSH
3933: LD_INT 7
3935: PPUSH
3936: CALL_OW 381
// un := CreateHuman ;
3940: LD_ADDR_VAR 0 2
3944: PUSH
3945: CALL_OW 44
3949: ST_TO_ADDR
// PlaceUnitXYR ( un , 56 , 101 , 3 , false ) ;
3950: LD_VAR 0 2
3954: PPUSH
3955: LD_INT 56
3957: PPUSH
3958: LD_INT 101
3960: PPUSH
3961: LD_INT 3
3963: PPUSH
3964: LD_INT 0
3966: PPUSH
3967: CALL_OW 50
// SetClass ( un , class_sniper ) ;
3971: LD_VAR 0 2
3975: PPUSH
3976: LD_INT 5
3978: PPUSH
3979: CALL_OW 336
// AddComAgressiveMove ( un , 72 , 92 ) ;
3983: LD_VAR 0 2
3987: PPUSH
3988: LD_INT 72
3990: PPUSH
3991: LD_INT 92
3993: PPUSH
3994: CALL_OW 174
// end ;
3998: GO 3927
4000: POP
4001: POP
// end ;
4002: PPOPN 3
4004: END
// every 0 0$1 trigger IsOk ( usCargo ) do var cr ;
4005: LD_EXP 27
4009: PPUSH
4010: CALL_OW 302
4014: IFFALSE 4215
4016: GO 4018
4018: DISABLE
4019: LD_INT 0
4021: PPUSH
// begin enable ;
4022: ENABLE
// if GetFuel ( usCargo ) < 10 and not See ( 2 , usCargo ) then
4023: LD_EXP 27
4027: PPUSH
4028: CALL_OW 261
4032: PUSH
4033: LD_INT 10
4035: LESS
4036: PUSH
4037: LD_INT 2
4039: PPUSH
4040: LD_EXP 27
4044: PPUSH
4045: CALL_OW 292
4049: NOT
4050: AND
4051: IFFALSE 4065
// SetFuel ( usCargo , 100 ) ;
4053: LD_EXP 27
4057: PPUSH
4058: LD_INT 100
4060: PPUSH
4061: CALL_OW 240
// if not HasTask ( usCargo ) and GetCargo ( usCargo , mat_cans ) < 100 and not IsInArea ( usCargo , usCratesArea ) then
4065: LD_EXP 27
4069: PPUSH
4070: CALL_OW 314
4074: NOT
4075: PUSH
4076: LD_EXP 27
4080: PPUSH
4081: LD_INT 1
4083: PPUSH
4084: CALL_OW 289
4088: PUSH
4089: LD_INT 100
4091: LESS
4092: AND
4093: PUSH
4094: LD_EXP 27
4098: PPUSH
4099: LD_INT 12
4101: PPUSH
4102: CALL_OW 308
4106: NOT
4107: AND
4108: IFFALSE 4185
// begin cr := GetListOfCratesInArea ( usCratesArea ) ;
4110: LD_ADDR_VAR 0 1
4114: PUSH
4115: LD_INT 12
4117: PPUSH
4118: CALL_OW 435
4122: ST_TO_ADDR
// if cr then
4123: LD_VAR 0 1
4127: IFFALSE 4158
// ComCollect ( usCargo , cr [ 1 ] , cr [ 2 ] ) else
4129: LD_EXP 27
4133: PPUSH
4134: LD_VAR 0 1
4138: PUSH
4139: LD_INT 1
4141: ARRAY
4142: PPUSH
4143: LD_VAR 0 1
4147: PUSH
4148: LD_INT 2
4150: ARRAY
4151: PPUSH
4152: CALL_OW 117
4156: GO 4185
// if not IsInArea ( usCargo , usCratesArea ) then
4158: LD_EXP 27
4162: PPUSH
4163: LD_INT 12
4165: PPUSH
4166: CALL_OW 308
4170: NOT
4171: IFFALSE 4185
// ComMoveToArea ( usCargo , usCratesArea ) ;
4173: LD_EXP 27
4177: PPUSH
4178: LD_INT 12
4180: PPUSH
4181: CALL_OW 113
// end ; if GetCargo ( usCargo , mat_cans ) = 100 then
4185: LD_EXP 27
4189: PPUSH
4190: LD_INT 1
4192: PPUSH
4193: CALL_OW 289
4197: PUSH
4198: LD_INT 100
4200: EQUAL
4201: IFFALSE 4215
// ComGive ( usCargo , usDepot ) ;
4203: LD_EXP 27
4207: PPUSH
4208: LD_INT 1
4210: PPUSH
4211: CALL_OW 161
// end ; end_of_file
4215: PPOPN 1
4217: END
// on UnitDestroyed ( un ) do begin if un = Heike then
4218: LD_VAR 0 1
4222: PUSH
4223: LD_EXP 10
4227: EQUAL
4228: IFFALSE 4237
// YouLost ( Heike ) ;
4230: LD_STRING Heike
4232: PPUSH
4233: CALL_OW 104
// end ;
4237: PPOPN 1
4239: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( factory ) = 1 then
4240: LD_VAR 0 2
4244: PPUSH
4245: CALL_OW 255
4249: PUSH
4250: LD_INT 1
4252: EQUAL
4253: IFFALSE 4308
// begin if GetControl ( vehicle ) = control_remote then
4255: LD_VAR 0 1
4259: PPUSH
4260: CALL_OW 263
4264: PUSH
4265: LD_INT 2
4267: EQUAL
4268: IFFALSE 4279
// Connect ( vehicle ) ;
4270: LD_VAR 0 1
4274: PPUSH
4275: CALL 17742 0 1
// usForces := Replace ( usForces , usForces + 1 , vehicle ) ;
4279: LD_ADDR_EXP 26
4283: PUSH
4284: LD_EXP 26
4288: PPUSH
4289: LD_EXP 26
4293: PUSH
4294: LD_INT 1
4296: PLUS
4297: PPUSH
4298: LD_VAR 0 1
4302: PPUSH
4303: CALL_OW 1
4307: ST_TO_ADDR
// end ; end ; end_of_file
4308: PPOPN 2
4310: END
// export function Action ; var i , j , veh , tmp , hasEng , hasCamera , driver ; begin
4311: LD_INT 0
4313: PPUSH
4314: PPUSH
4315: PPUSH
4316: PPUSH
4317: PPUSH
4318: PPUSH
4319: PPUSH
4320: PPUSH
// Video ( true ) ;
4321: LD_INT 1
4323: PPUSH
4324: CALL 46494 0 1
// music_nat := 1 ;
4328: LD_ADDR_OWVAR 71
4332: PUSH
4333: LD_INT 1
4335: ST_TO_ADDR
// music_class := music_recon ;
4336: LD_ADDR_OWVAR 72
4340: PUSH
4341: LD_INT 3
4343: ST_TO_ADDR
// PlaceSeeing ( 184 , 142 , 2 , - 10 ) ;
4344: LD_INT 184
4346: PPUSH
4347: LD_INT 142
4349: PPUSH
4350: LD_INT 2
4352: PPUSH
4353: LD_INT 10
4355: NEG
4356: PPUSH
4357: CALL_OW 330
// RemoveSeeing ( 184 , 142 , 2 ) ;
4361: LD_INT 184
4363: PPUSH
4364: LD_INT 142
4366: PPUSH
4367: LD_INT 2
4369: PPUSH
4370: CALL_OW 331
// PlaceSeeing ( 204 , 151 , 2 , - 10 ) ;
4374: LD_INT 204
4376: PPUSH
4377: LD_INT 151
4379: PPUSH
4380: LD_INT 2
4382: PPUSH
4383: LD_INT 10
4385: NEG
4386: PPUSH
4387: CALL_OW 330
// RemoveSeeing ( 204 , 151 , 2 ) ;
4391: LD_INT 204
4393: PPUSH
4394: LD_INT 151
4396: PPUSH
4397: LD_INT 2
4399: PPUSH
4400: CALL_OW 331
// CenterNowOnXY ( 184 , 142 ) ;
4404: LD_INT 184
4406: PPUSH
4407: LD_INT 142
4409: PPUSH
4410: CALL_OW 86
// wait ( 0 0$2 ) ;
4414: LD_INT 70
4416: PPUSH
4417: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
4421: LD_ADDR_VAR 0 5
4425: PUSH
4426: LD_EXP 10
4430: PUSH
4431: LD_EXP 11
4435: PUSH
4436: LD_EXP 12
4440: PUSH
4441: LD_EXP 13
4445: PUSH
4446: LD_EXP 14
4450: PUSH
4451: LD_EXP 15
4455: PUSH
4456: LD_EXP 16
4460: PUSH
4461: LD_EXP 17
4465: PUSH
4466: LD_EXP 19
4470: PUSH
4471: LD_EXP 20
4475: PUSH
4476: LD_EXP 21
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: PUSH
4494: LD_EXP 22
4498: UNION
4499: ST_TO_ADDR
// hasEng := UnitFilter ( tmp , [ f_class , 2 ] ) > 0 ;
4500: LD_ADDR_VAR 0 6
4504: PUSH
4505: LD_VAR 0 5
4509: PPUSH
4510: LD_INT 25
4512: PUSH
4513: LD_INT 2
4515: PUSH
4516: EMPTY
4517: LIST
4518: LIST
4519: PPUSH
4520: CALL_OW 72
4524: PUSH
4525: LD_INT 0
4527: GREATER
4528: ST_TO_ADDR
// hasCamera := false ;
4529: LD_ADDR_VAR 0 7
4533: PUSH
4534: LD_INT 0
4536: ST_TO_ADDR
// if not hasEng then
4537: LD_VAR 0 6
4541: NOT
4542: IFFALSE 4570
// SetClass ( tmp [ rand ( 1 , tmp ) ] , class_engineer ) ;
4544: LD_VAR 0 5
4548: PUSH
4549: LD_INT 1
4551: PPUSH
4552: LD_VAR 0 5
4556: PPUSH
4557: CALL_OW 12
4561: ARRAY
4562: PPUSH
4563: LD_INT 2
4565: PPUSH
4566: CALL_OW 336
// if heikeVehicles then
4570: LD_EXP 24
4574: IFFALSE 5188
// begin tmp := SortByClass ( tmp , class_mechanic ) ;
4576: LD_ADDR_VAR 0 5
4580: PUSH
4581: LD_VAR 0 5
4585: PPUSH
4586: LD_INT 3
4588: PPUSH
4589: CALL 48539 0 2
4593: ST_TO_ADDR
// for i in heikeVehicles do
4594: LD_ADDR_VAR 0 2
4598: PUSH
4599: LD_EXP 24
4603: PUSH
4604: FOR_IN
4605: IFFALSE 5186
// begin if not tmp then
4607: LD_VAR 0 5
4611: NOT
4612: IFFALSE 4616
// break ;
4614: GO 5186
// uc_side := 2 ;
4616: LD_ADDR_OWVAR 20
4620: PUSH
4621: LD_INT 2
4623: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
4624: LD_ADDR_OWVAR 21
4628: PUSH
4629: LD_VAR 0 2
4633: PUSH
4634: LD_INT 5
4636: ARRAY
4637: ST_TO_ADDR
// vc_chassis := i [ 1 ] ;
4638: LD_ADDR_OWVAR 37
4642: PUSH
4643: LD_VAR 0 2
4647: PUSH
4648: LD_INT 1
4650: ARRAY
4651: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
4652: LD_ADDR_OWVAR 39
4656: PUSH
4657: LD_VAR 0 2
4661: PUSH
4662: LD_INT 2
4664: ARRAY
4665: ST_TO_ADDR
// vc_control := i [ 3 ] ;
4666: LD_ADDR_OWVAR 38
4670: PUSH
4671: LD_VAR 0 2
4675: PUSH
4676: LD_INT 3
4678: ARRAY
4679: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
4680: LD_ADDR_OWVAR 40
4684: PUSH
4685: LD_VAR 0 2
4689: PUSH
4690: LD_INT 4
4692: ARRAY
4693: ST_TO_ADDR
// veh := CreateVehicle ;
4694: LD_ADDR_VAR 0 4
4698: PUSH
4699: CALL_OW 45
4703: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4704: LD_VAR 0 4
4708: PPUSH
4709: LD_INT 4
4711: PPUSH
4712: CALL_OW 233
// if i [ 3 ] = control_manual then
4716: LD_VAR 0 2
4720: PUSH
4721: LD_INT 3
4723: ARRAY
4724: PUSH
4725: LD_INT 1
4727: EQUAL
4728: IFFALSE 4813
// begin PlaceUnitArea ( veh , startArea , false ) ;
4730: LD_VAR 0 4
4734: PPUSH
4735: LD_INT 1
4737: PPUSH
4738: LD_INT 0
4740: PPUSH
4741: CALL_OW 49
// if i [ 4 ] = ar_control_tower then
4745: LD_VAR 0 2
4749: PUSH
4750: LD_INT 4
4752: ARRAY
4753: PUSH
4754: LD_INT 31
4756: EQUAL
4757: IFFALSE 4775
// SetClass ( tmp [ 1 ] , class_mechanic ) ;
4759: LD_VAR 0 5
4763: PUSH
4764: LD_INT 1
4766: ARRAY
4767: PPUSH
4768: LD_INT 3
4770: PPUSH
4771: CALL_OW 336
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
4775: LD_VAR 0 5
4779: PUSH
4780: LD_INT 1
4782: ARRAY
4783: PPUSH
4784: LD_VAR 0 4
4788: PPUSH
4789: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
4793: LD_ADDR_VAR 0 5
4797: PUSH
4798: LD_VAR 0 5
4802: PPUSH
4803: LD_INT 1
4805: PPUSH
4806: CALL_OW 3
4810: ST_TO_ADDR
// end else
4811: GO 4874
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
4813: LD_INT 22
4815: PUSH
4816: LD_INT 2
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: PUSH
4823: LD_INT 34
4825: PUSH
4826: LD_INT 31
4828: PUSH
4829: EMPTY
4830: LIST
4831: LIST
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: PPUSH
4837: CALL_OW 69
4841: IFFALSE 4874
// begin PlaceUnitArea ( veh , startArea , false ) ;
4843: LD_VAR 0 4
4847: PPUSH
4848: LD_INT 1
4850: PPUSH
4851: LD_INT 0
4853: PPUSH
4854: CALL_OW 49
// Connect ( veh ) ;
4858: LD_VAR 0 4
4862: PPUSH
4863: CALL 17742 0 1
// wait ( 0 0$2 ) ;
4867: LD_INT 70
4869: PPUSH
4870: CALL_OW 67
// end ; SetLives ( veh , i [ 6 ] ) ;
4874: LD_VAR 0 4
4878: PPUSH
4879: LD_VAR 0 2
4883: PUSH
4884: LD_INT 6
4886: ARRAY
4887: PPUSH
4888: CALL_OW 234
// SetFuel ( veh , 20 ) ;
4892: LD_VAR 0 4
4896: PPUSH
4897: LD_INT 20
4899: PPUSH
4900: CALL_OW 240
// if i [ 7 ] and GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay ] then
4904: LD_VAR 0 2
4908: PUSH
4909: LD_INT 7
4911: ARRAY
4912: PUSH
4913: LD_VAR 0 4
4917: PPUSH
4918: CALL_OW 264
4922: PUSH
4923: LD_INT 51
4925: PUSH
4926: LD_INT 32
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: IN
4933: AND
4934: IFFALSE 4985
// begin for j := 1 to 2 do
4936: LD_ADDR_VAR 0 3
4940: PUSH
4941: DOUBLE
4942: LD_INT 1
4944: DEC
4945: ST_TO_ADDR
4946: LD_INT 2
4948: PUSH
4949: FOR_TO
4950: IFFALSE 4983
// AddCargo ( veh , j , i [ 7 ] [ j ] ) ;
4952: LD_VAR 0 4
4956: PPUSH
4957: LD_VAR 0 3
4961: PPUSH
4962: LD_VAR 0 2
4966: PUSH
4967: LD_INT 7
4969: ARRAY
4970: PUSH
4971: LD_VAR 0 3
4975: ARRAY
4976: PPUSH
4977: CALL_OW 291
4981: GO 4949
4983: POP
4984: POP
// end ; ComMoveXY ( veh , 185 , 144 ) ;
4985: LD_VAR 0 4
4989: PPUSH
4990: LD_INT 185
4992: PPUSH
4993: LD_INT 144
4995: PPUSH
4996: CALL_OW 111
// if GetControl ( veh ) = control_manual and not hasCamera and GetClass ( IsDrivenBy ( veh ) ) = 2 then
5000: LD_VAR 0 4
5004: PPUSH
5005: CALL_OW 263
5009: PUSH
5010: LD_INT 1
5012: EQUAL
5013: PUSH
5014: LD_VAR 0 7
5018: NOT
5019: AND
5020: PUSH
5021: LD_VAR 0 4
5025: PPUSH
5026: CALL_OW 311
5030: PPUSH
5031: CALL_OW 257
5035: PUSH
5036: LD_INT 2
5038: EQUAL
5039: AND
5040: IFFALSE 5135
// begin hasCamera := true ;
5042: LD_ADDR_VAR 0 7
5046: PUSH
5047: LD_INT 1
5049: ST_TO_ADDR
// driver := IsDrivenBy ( veh ) ;
5050: LD_ADDR_VAR 0 8
5054: PUSH
5055: LD_VAR 0 4
5059: PPUSH
5060: CALL_OW 311
5064: ST_TO_ADDR
// AddComMoveXY ( veh , 177 , 138 ) ;
5065: LD_VAR 0 4
5069: PPUSH
5070: LD_INT 177
5072: PPUSH
5073: LD_INT 138
5075: PPUSH
5076: CALL_OW 171
// AddComExitVehicle ( driver ) ;
5080: LD_VAR 0 8
5084: PPUSH
5085: CALL_OW 181
// AddComHiddenCamera ( driver , 190 , 150 ) ;
5089: LD_VAR 0 8
5093: PPUSH
5094: LD_INT 190
5096: PPUSH
5097: LD_INT 150
5099: PPUSH
5100: CALL_OW 217
// AddComEnterUnit ( driver , veh ) ;
5104: LD_VAR 0 8
5108: PPUSH
5109: LD_VAR 0 4
5113: PPUSH
5114: CALL_OW 180
// AddComMoveXY ( driver , 170 , 103 ) ;
5118: LD_VAR 0 8
5122: PPUSH
5123: LD_INT 170
5125: PPUSH
5126: LD_INT 103
5128: PPUSH
5129: CALL_OW 171
// end else
5133: GO 5177
// begin AddComWait ( veh , 0 0$2 ) ;
5135: LD_VAR 0 4
5139: PPUSH
5140: LD_INT 70
5142: PPUSH
5143: CALL_OW 202
// AddComMoveXY ( veh , 179 , 129 ) ;
5147: LD_VAR 0 4
5151: PPUSH
5152: LD_INT 179
5154: PPUSH
5155: LD_INT 129
5157: PPUSH
5158: CALL_OW 171
// AddComMoveXY ( veh , 170 , 103 ) ;
5162: LD_VAR 0 4
5166: PPUSH
5167: LD_INT 170
5169: PPUSH
5170: LD_INT 103
5172: PPUSH
5173: CALL_OW 171
// end ; wait ( 0 0$2 ) ;
5177: LD_INT 70
5179: PPUSH
5180: CALL_OW 67
// end ;
5184: GO 4604
5186: POP
5187: POP
// end ; if tmp then
5188: LD_VAR 0 5
5192: IFFALSE 5337
// begin for i in tmp do
5194: LD_ADDR_VAR 0 2
5198: PUSH
5199: LD_VAR 0 5
5203: PUSH
5204: FOR_IN
5205: IFFALSE 5335
// begin SetDir ( i , 4 ) ;
5207: LD_VAR 0 2
5211: PPUSH
5212: LD_INT 4
5214: PPUSH
5215: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
5219: LD_VAR 0 2
5223: PPUSH
5224: LD_INT 1
5226: PPUSH
5227: LD_INT 0
5229: PPUSH
5230: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
5234: LD_VAR 0 2
5238: PPUSH
5239: LD_INT 185
5241: PPUSH
5242: LD_INT 144
5244: PPUSH
5245: CALL_OW 111
// if GetClass ( i ) = 2 and not hasCamera then
5249: LD_VAR 0 2
5253: PPUSH
5254: CALL_OW 257
5258: PUSH
5259: LD_INT 2
5261: EQUAL
5262: PUSH
5263: LD_VAR 0 7
5267: NOT
5268: AND
5269: IFFALSE 5296
// begin hasCamera := true ;
5271: LD_ADDR_VAR 0 7
5275: PUSH
5276: LD_INT 1
5278: ST_TO_ADDR
// AddComHiddenCamera ( i , 190 , 150 ) ;
5279: LD_VAR 0 2
5283: PPUSH
5284: LD_INT 190
5286: PPUSH
5287: LD_INT 150
5289: PPUSH
5290: CALL_OW 217
// end else
5294: GO 5311
// AddComMoveXY ( i , 179 , 129 ) ;
5296: LD_VAR 0 2
5300: PPUSH
5301: LD_INT 179
5303: PPUSH
5304: LD_INT 129
5306: PPUSH
5307: CALL_OW 171
// AddComMoveXY ( i , 170 , 103 ) ;
5311: LD_VAR 0 2
5315: PPUSH
5316: LD_INT 170
5318: PPUSH
5319: LD_INT 103
5321: PPUSH
5322: CALL_OW 171
// wait ( 0 0$2 ) ;
5326: LD_INT 70
5328: PPUSH
5329: CALL_OW 67
// end ;
5333: GO 5204
5335: POP
5336: POP
// end ; AddComMoveXY ( Heike , 163 , 89 ) ;
5337: LD_EXP 10
5341: PPUSH
5342: LD_INT 163
5344: PPUSH
5345: LD_INT 89
5347: PPUSH
5348: CALL_OW 171
// wait ( 0 0$2 ) ;
5352: LD_INT 70
5354: PPUSH
5355: CALL_OW 67
// CenterOnXY ( 175 , 117 ) ;
5359: LD_INT 175
5361: PPUSH
5362: LD_INT 117
5364: PPUSH
5365: CALL_OW 84
// CenterOnUnits ( Heike ) ;
5369: LD_EXP 10
5373: PPUSH
5374: CALL_OW 85
// Say ( Heike , DH-Intro-1 ) ;
5378: LD_EXP 10
5382: PPUSH
5383: LD_STRING DH-Intro-1
5385: PPUSH
5386: CALL_OW 88
// if Markov then
5390: LD_EXP 17
5394: IFFALSE 5961
// begin Say ( Markov , DMar-Intro-2 ) ;
5396: LD_EXP 17
5400: PPUSH
5401: LD_STRING DMar-Intro-2
5403: PPUSH
5404: CALL_OW 88
// Say ( Markov , DMar-Intro-3 ) ;
5408: LD_EXP 17
5412: PPUSH
5413: LD_STRING DMar-Intro-3
5415: PPUSH
5416: CALL_OW 88
// wait ( 0 0$1 ) ;
5420: LD_INT 35
5422: PPUSH
5423: CALL_OW 67
// CenterOnUnits ( Heike ) ;
5427: LD_EXP 10
5431: PPUSH
5432: CALL_OW 85
// if Kurt then
5436: LD_EXP 20
5440: IFFALSE 5492
// begin if IsInUnit ( Kurt ) then
5442: LD_EXP 20
5446: PPUSH
5447: CALL_OW 310
5451: IFFALSE 5462
// ComExit ( Kurt ) ;
5453: LD_EXP 20
5457: PPUSH
5458: CALL 46910 0 1
// AddComMoveXY ( Kurt , 130 , 56 ) ;
5462: LD_EXP 20
5466: PPUSH
5467: LD_INT 130
5469: PPUSH
5470: LD_INT 56
5472: PPUSH
5473: CALL_OW 171
// AddComTurnXY ( Kurt , 129 , 56 ) ;
5477: LD_EXP 20
5481: PPUSH
5482: LD_INT 129
5484: PPUSH
5485: LD_INT 56
5487: PPUSH
5488: CALL_OW 178
// end ; if Kaia then
5492: LD_EXP 15
5496: IFFALSE 5676
// begin Say ( Kaia , DK-Intro-4 ) ;
5498: LD_EXP 15
5502: PPUSH
5503: LD_STRING DK-Intro-4
5505: PPUSH
5506: CALL_OW 88
// Say ( Markov , DMar-Intro-5 ) ;
5510: LD_EXP 17
5514: PPUSH
5515: LD_STRING DMar-Intro-5
5517: PPUSH
5518: CALL_OW 88
// Say ( Markov , DMar-Intro-6 ) ;
5522: LD_EXP 17
5526: PPUSH
5527: LD_STRING DMar-Intro-6
5529: PPUSH
5530: CALL_OW 88
// Say ( Olaf , DO-Intro-7 ) ;
5534: LD_EXP 19
5538: PPUSH
5539: LD_STRING DO-Intro-7
5541: PPUSH
5542: CALL_OW 88
// CenterOnXY ( 160 , 85 ) ;
5546: LD_INT 160
5548: PPUSH
5549: LD_INT 85
5551: PPUSH
5552: CALL_OW 84
// Say ( Markov , DMar-Intro-8 ) ;
5556: LD_EXP 17
5560: PPUSH
5561: LD_STRING DMar-Intro-8
5563: PPUSH
5564: CALL_OW 88
// Say ( Markov , DMar-Intro-9 ) ;
5568: LD_EXP 17
5572: PPUSH
5573: LD_STRING DMar-Intro-9
5575: PPUSH
5576: CALL_OW 88
// Say ( Markov , DMar-Intro-10 ) ;
5580: LD_EXP 17
5584: PPUSH
5585: LD_STRING DMar-Intro-10
5587: PPUSH
5588: CALL_OW 88
// Say ( Markov , DMar-Intro-11 ) ;
5592: LD_EXP 17
5596: PPUSH
5597: LD_STRING DMar-Intro-11
5599: PPUSH
5600: CALL_OW 88
// Say ( Givi , DG-Intro-12 ) ;
5604: LD_EXP 11
5608: PPUSH
5609: LD_STRING DG-Intro-12
5611: PPUSH
5612: CALL_OW 88
// Say ( Givi , DG-Intro-13 ) ;
5616: LD_EXP 11
5620: PPUSH
5621: LD_STRING DG-Intro-13
5623: PPUSH
5624: CALL_OW 88
// Say ( Givi , DG-Intro-14 ) ;
5628: LD_EXP 11
5632: PPUSH
5633: LD_STRING DG-Intro-14
5635: PPUSH
5636: CALL_OW 88
// Say ( Givi , DG-Intro-15 ) ;
5640: LD_EXP 11
5644: PPUSH
5645: LD_STRING DG-Intro-15
5647: PPUSH
5648: CALL_OW 88
// Say ( Heike , DH-Intro-16 ) ;
5652: LD_EXP 10
5656: PPUSH
5657: LD_STRING DH-Intro-16
5659: PPUSH
5660: CALL_OW 88
// Say ( Markov , DMar-Intro-17 ) ;
5664: LD_EXP 17
5668: PPUSH
5669: LD_STRING DMar-Intro-17
5671: PPUSH
5672: CALL_OW 88
// end ; if Kurt and Mike then
5676: LD_EXP 20
5680: PUSH
5681: LD_EXP 12
5685: AND
5686: IFFALSE 5961
// begin CenterNowOnUnits ( Kurt ) ;
5688: LD_EXP 20
5692: PPUSH
5693: CALL_OW 87
// ComTurnUnit ( Kurt , Heike ) ;
5697: LD_EXP 20
5701: PPUSH
5702: LD_EXP 10
5706: PPUSH
5707: CALL_OW 119
// Say ( Kurt , DKs-Intro-18 ) ;
5711: LD_EXP 20
5715: PPUSH
5716: LD_STRING DKs-Intro-18
5718: PPUSH
5719: CALL_OW 88
// Say ( Kurt , DKs-Intro-19 ) ;
5723: LD_EXP 20
5727: PPUSH
5728: LD_STRING DKs-Intro-19
5730: PPUSH
5731: CALL_OW 88
// CenterNowOnUnits ( Mike ) ;
5735: LD_EXP 12
5739: PPUSH
5740: CALL_OW 87
// if IsInUnit ( Mike ) then
5744: LD_EXP 12
5748: PPUSH
5749: CALL_OW 310
5753: IFFALSE 5764
// ComExit ( Mike ) ;
5755: LD_EXP 12
5759: PPUSH
5760: CALL 46910 0 1
// AddComMoveXY ( Mike , 129 , 53 ) ;
5764: LD_EXP 12
5768: PPUSH
5769: LD_INT 129
5771: PPUSH
5772: LD_INT 53
5774: PPUSH
5775: CALL_OW 171
// AddComHold ( Mike ) ;
5779: LD_EXP 12
5783: PPUSH
5784: CALL_OW 200
// wait ( 0 0$2 ) ;
5788: LD_INT 70
5790: PPUSH
5791: CALL_OW 67
// Say ( Mike , DM-Intro-20 ) ;
5795: LD_EXP 12
5799: PPUSH
5800: LD_STRING DM-Intro-20
5802: PPUSH
5803: CALL_OW 88
// scoutActive := Query ( Scout ) ;
5807: LD_ADDR_EXP 3
5811: PUSH
5812: LD_STRING Scout
5814: PPUSH
5815: CALL_OW 97
5819: ST_TO_ADDR
// if scoutActive = 1 then
5820: LD_EXP 3
5824: PUSH
5825: LD_INT 1
5827: EQUAL
5828: IFFALSE 5925
// begin CenterNowOnUnits ( Kurt ) ;
5830: LD_EXP 20
5834: PPUSH
5835: CALL_OW 87
// Say ( Heike , DH-Intro-21 ) ;
5839: LD_EXP 10
5843: PPUSH
5844: LD_STRING DH-Intro-21
5846: PPUSH
5847: CALL_OW 88
// Say ( Mike , DM-Intro-22 ) ;
5851: LD_EXP 12
5855: PPUSH
5856: LD_STRING DM-Intro-22
5858: PPUSH
5859: CALL_OW 88
// Say ( Kurt , DKs-Intro-23 ) ;
5863: LD_EXP 20
5867: PPUSH
5868: LD_STRING DKs-Intro-23
5870: PPUSH
5871: CALL_OW 88
// SetSide ( Kurt , 5 ) ;
5875: LD_EXP 20
5879: PPUSH
5880: LD_INT 5
5882: PPUSH
5883: CALL_OW 235
// SetSide ( Mike , 5 ) ;
5887: LD_EXP 12
5891: PPUSH
5892: LD_INT 5
5894: PPUSH
5895: CALL_OW 235
// ComMoveXY ( [ Kurt , Mike ] , 104 , 66 ) ;
5899: LD_EXP 20
5903: PUSH
5904: LD_EXP 12
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: PPUSH
5913: LD_INT 104
5915: PPUSH
5916: LD_INT 66
5918: PPUSH
5919: CALL_OW 111
// end else
5923: GO 5961
// begin Say ( Heike , DH-Intro-a-21 ) ;
5925: LD_EXP 10
5929: PPUSH
5930: LD_STRING DH-Intro-a-21
5932: PPUSH
5933: CALL_OW 88
// Say ( Mike , DM-Intro-a-22 ) ;
5937: LD_EXP 12
5941: PPUSH
5942: LD_STRING DM-Intro-a-22
5944: PPUSH
5945: CALL_OW 88
// Say ( Kurt , DKs-Intro-a-23 ) ;
5949: LD_EXP 20
5953: PPUSH
5954: LD_STRING DKs-Intro-a-23
5956: PPUSH
5957: CALL_OW 88
// end ; end ; end ; Video ( false ) ;
5961: LD_INT 0
5963: PPUSH
5964: CALL 46494 0 1
// music_nat := music_auto ;
5968: LD_ADDR_OWVAR 71
5972: PUSH
5973: LD_INT 0
5975: ST_TO_ADDR
// music_class := music_auto ;
5976: LD_ADDR_OWVAR 72
5980: PUSH
5981: LD_INT 0
5983: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
5984: LD_STRING M1
5986: PPUSH
5987: CALL_OW 337
// wait ( 0 0$3 ) ;
5991: LD_INT 105
5993: PPUSH
5994: CALL_OW 67
// Say ( Heike , DH-Base-1 ) ;
5998: LD_EXP 10
6002: PPUSH
6003: LD_STRING DH-Base-1
6005: PPUSH
6006: CALL_OW 88
// if Kaia then
6010: LD_EXP 15
6014: IFFALSE 6124
// begin Say ( Kaia , DK-Base-2 ) ;
6016: LD_EXP 15
6020: PPUSH
6021: LD_STRING DK-Base-2
6023: PPUSH
6024: CALL_OW 88
// Say ( Heike , DH-Base-3 ) ;
6028: LD_EXP 10
6032: PPUSH
6033: LD_STRING DH-Base-3
6035: PPUSH
6036: CALL_OW 88
// if Aviradze then
6040: LD_EXP 21
6044: IFFALSE 6124
// begin Say ( Aviradze , DA-Base-4 ) ;
6046: LD_EXP 21
6050: PPUSH
6051: LD_STRING DA-Base-4
6053: PPUSH
6054: CALL_OW 88
// Say ( Kaia , DK-Base-5 ) ;
6058: LD_EXP 15
6062: PPUSH
6063: LD_STRING DK-Base-5
6065: PPUSH
6066: CALL_OW 88
// if Markov then
6070: LD_EXP 17
6074: IFFALSE 6124
// begin Say ( Markov , DMar-Base-6 ) ;
6076: LD_EXP 17
6080: PPUSH
6081: LD_STRING DMar-Base-6
6083: PPUSH
6084: CALL_OW 88
// Say ( Kaia , DK-Base-7 ) ;
6088: LD_EXP 15
6092: PPUSH
6093: LD_STRING DK-Base-7
6095: PPUSH
6096: CALL_OW 88
// Say ( Markov , DMar-Base-8 ) ;
6100: LD_EXP 17
6104: PPUSH
6105: LD_STRING DMar-Base-8
6107: PPUSH
6108: CALL_OW 88
// Say ( Markov , DMar-Base-9 ) ;
6112: LD_EXP 17
6116: PPUSH
6117: LD_STRING DMar-Base-9
6119: PPUSH
6120: CALL_OW 88
// end ; end ; end ; SaveForQuickRestart ;
6124: CALL_OW 22
// end ;
6128: LD_VAR 0 1
6132: RET
// every 0 0$1 trigger scoutSuccess do var i , tmp ;
6133: LD_EXP 5
6137: IFFALSE 7088
6139: GO 6141
6141: DISABLE
6142: LD_INT 0
6144: PPUSH
6145: PPUSH
// begin InGameOn ;
6146: CALL_OW 8
// ComTurnUnit ( [ Mike , Kurt ] , Heike ) ;
6150: LD_EXP 12
6154: PUSH
6155: LD_EXP 20
6159: PUSH
6160: EMPTY
6161: LIST
6162: LIST
6163: PPUSH
6164: LD_EXP 10
6168: PPUSH
6169: CALL_OW 119
// ComExit ( Heike ) ;
6173: LD_EXP 10
6177: PPUSH
6178: CALL 46910 0 1
// if IsOk ( Mike ) then
6182: LD_EXP 12
6186: PPUSH
6187: CALL_OW 302
6191: IFFALSE 6209
// AddComTurnUnit ( Heike , Mike ) else
6193: LD_EXP 10
6197: PPUSH
6198: LD_EXP 12
6202: PPUSH
6203: CALL_OW 179
6207: GO 6223
// AddComTurnUnit ( Heike , Kurt ) ;
6209: LD_EXP 10
6213: PPUSH
6214: LD_EXP 20
6218: PPUSH
6219: CALL_OW 179
// if IsOk ( Mike ) and IsOk ( Kurt ) then
6223: LD_EXP 12
6227: PPUSH
6228: CALL_OW 302
6232: PUSH
6233: LD_EXP 20
6237: PPUSH
6238: CALL_OW 302
6242: AND
6243: IFFALSE 6494
// begin CenterNowOnUnits ( Mike ) ;
6245: LD_EXP 12
6249: PPUSH
6250: CALL_OW 87
// Say ( Mike , DM-Scout-1 ) ;
6254: LD_EXP 12
6258: PPUSH
6259: LD_STRING DM-Scout-1
6261: PPUSH
6262: CALL_OW 88
// Say ( Heike , DH-Scout-2 ) ;
6266: LD_EXP 10
6270: PPUSH
6271: LD_STRING DH-Scout-2
6273: PPUSH
6274: CALL_OW 88
// Say ( Kurt , DKs-Scout-3 ) ;
6278: LD_EXP 20
6282: PPUSH
6283: LD_STRING DKs-Scout-3
6285: PPUSH
6286: CALL_OW 88
// Say ( Heike , DH-Scout-4 ) ;
6290: LD_EXP 10
6294: PPUSH
6295: LD_STRING DH-Scout-4
6297: PPUSH
6298: CALL_OW 88
// Say ( Heike , DH-Scout-5 ) ;
6302: LD_EXP 10
6306: PPUSH
6307: LD_STRING DH-Scout-5
6309: PPUSH
6310: CALL_OW 88
// tmp := [ [ 72 , 122 ] , [ 89 , 131 ] , [ 99 , 139 ] , [ 100 , 148 ] ] ;
6314: LD_ADDR_VAR 0 2
6318: PUSH
6319: LD_INT 72
6321: PUSH
6322: LD_INT 122
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: PUSH
6329: LD_INT 89
6331: PUSH
6332: LD_INT 131
6334: PUSH
6335: EMPTY
6336: LIST
6337: LIST
6338: PUSH
6339: LD_INT 99
6341: PUSH
6342: LD_INT 139
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: PUSH
6349: LD_INT 100
6351: PUSH
6352: LD_INT 148
6354: PUSH
6355: EMPTY
6356: LIST
6357: LIST
6358: PUSH
6359: EMPTY
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: ST_TO_ADDR
// for i in tmp do
6365: LD_ADDR_VAR 0 1
6369: PUSH
6370: LD_VAR 0 2
6374: PUSH
6375: FOR_IN
6376: IFFALSE 6434
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 2 , - 6 ) ;
6378: LD_VAR 0 1
6382: PUSH
6383: LD_INT 1
6385: ARRAY
6386: PPUSH
6387: LD_VAR 0 1
6391: PUSH
6392: LD_INT 2
6394: ARRAY
6395: PPUSH
6396: LD_INT 2
6398: PPUSH
6399: LD_INT 6
6401: NEG
6402: PPUSH
6403: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 2 ) ;
6407: LD_VAR 0 1
6411: PUSH
6412: LD_INT 1
6414: ARRAY
6415: PPUSH
6416: LD_VAR 0 1
6420: PUSH
6421: LD_INT 2
6423: ARRAY
6424: PPUSH
6425: LD_INT 2
6427: PPUSH
6428: CALL_OW 331
// end ;
6432: GO 6375
6434: POP
6435: POP
// CenterOnXY ( 83 , 132 ) ;
6436: LD_INT 83
6438: PPUSH
6439: LD_INT 132
6441: PPUSH
6442: CALL_OW 84
// Say ( Kurt , DKs-Scout-6 ) ;
6446: LD_EXP 20
6450: PPUSH
6451: LD_STRING DKs-Scout-6
6453: PPUSH
6454: CALL_OW 88
// Say ( Mike , DM-Scout-7 ) ;
6458: LD_EXP 12
6462: PPUSH
6463: LD_STRING DM-Scout-7
6465: PPUSH
6466: CALL_OW 88
// Say ( Mike , DM-Scout-8 ) ;
6470: LD_EXP 12
6474: PPUSH
6475: LD_STRING DM-Scout-8
6477: PPUSH
6478: CALL_OW 88
// Say ( Kurt , DKs-Scout-9 ) ;
6482: LD_EXP 20
6486: PPUSH
6487: LD_STRING DKs-Scout-9
6489: PPUSH
6490: CALL_OW 88
// end ; if IsDead ( Mike ) then
6494: LD_EXP 12
6498: PPUSH
6499: CALL_OW 301
6503: IFFALSE 6670
// begin CenterNowOnUnits ( Kurt ) ;
6505: LD_EXP 20
6509: PPUSH
6510: CALL_OW 87
// Say ( Kurt , DKs-Scout-b-1 ) ;
6514: LD_EXP 20
6518: PPUSH
6519: LD_STRING DKs-Scout-b-1
6521: PPUSH
6522: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-2 ) ;
6526: LD_EXP 20
6530: PPUSH
6531: LD_STRING DKs-Scout-b-2
6533: PPUSH
6534: CALL_OW 88
// if IsOk ( Givi ) then
6538: LD_EXP 11
6542: PPUSH
6543: CALL_OW 302
6547: IFFALSE 6622
// begin ComExit ( Givi ) ;
6549: LD_EXP 11
6553: PPUSH
6554: CALL 46910 0 1
// AddComTurnUnit ( Givi , Kurt ) ;
6558: LD_EXP 11
6562: PPUSH
6563: LD_EXP 20
6567: PPUSH
6568: CALL_OW 179
// Say ( Givi , DG-Scout-b-3 ) ;
6572: LD_EXP 11
6576: PPUSH
6577: LD_STRING DG-Scout-b-3
6579: PPUSH
6580: CALL_OW 88
// Say ( Givi , DG-Scout-b-4 ) ;
6584: LD_EXP 11
6588: PPUSH
6589: LD_STRING DG-Scout-b-4
6591: PPUSH
6592: CALL_OW 88
// Say ( Givi , DG-Scout-b-5 ) ;
6596: LD_EXP 11
6600: PPUSH
6601: LD_STRING DG-Scout-b-5
6603: PPUSH
6604: CALL_OW 88
// Say ( Heike , DH-Scout-b-6 ) ;
6608: LD_EXP 10
6612: PPUSH
6613: LD_STRING DH-Scout-b-6
6615: PPUSH
6616: CALL_OW 88
// end else
6620: GO 6634
// Say ( Heike , DH-Scout-a-4 ) ;
6622: LD_EXP 10
6626: PPUSH
6627: LD_STRING DH-Scout-a-4
6629: PPUSH
6630: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-7 ) ;
6634: LD_EXP 20
6638: PPUSH
6639: LD_STRING DKs-Scout-b-7
6641: PPUSH
6642: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-8 ) ;
6646: LD_EXP 20
6650: PPUSH
6651: LD_STRING DKs-Scout-b-8
6653: PPUSH
6654: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-9 ) ;
6658: LD_EXP 20
6662: PPUSH
6663: LD_STRING DKs-Scout-b-9
6665: PPUSH
6666: CALL_OW 88
// end ; if IsDead ( Kurt ) then
6670: LD_EXP 20
6674: PPUSH
6675: CALL_OW 301
6679: IFFALSE 6958
// begin CenterNowOnUnits ( Mike ) ;
6681: LD_EXP 12
6685: PPUSH
6686: CALL_OW 87
// Say ( Mike , DM-Scout-a-1 ) ;
6690: LD_EXP 12
6694: PPUSH
6695: LD_STRING DM-Scout-a-1
6697: PPUSH
6698: CALL_OW 88
// Say ( Mike , DM-Scout-a-2 ) ;
6702: LD_EXP 12
6706: PPUSH
6707: LD_STRING DM-Scout-a-2
6709: PPUSH
6710: CALL_OW 88
// if GetLives ( Mike ) < 1000 then
6714: LD_EXP 12
6718: PPUSH
6719: CALL_OW 256
6723: PUSH
6724: LD_INT 1000
6726: LESS
6727: IFFALSE 6743
// Say ( Heike , DH-Scout-a-3 ) else
6729: LD_EXP 10
6733: PPUSH
6734: LD_STRING DH-Scout-a-3
6736: PPUSH
6737: CALL_OW 88
6741: GO 6755
// Say ( Heike , DH-Scout-a-4 ) ;
6743: LD_EXP 10
6747: PPUSH
6748: LD_STRING DH-Scout-a-4
6750: PPUSH
6751: CALL_OW 88
// Say ( Mike , DM-Scout-a-5 ) ;
6755: LD_EXP 12
6759: PPUSH
6760: LD_STRING DM-Scout-a-5
6762: PPUSH
6763: CALL_OW 88
// if IsOk ( Kaia ) then
6767: LD_EXP 15
6771: PPUSH
6772: CALL_OW 302
6776: IFFALSE 6958
// begin ComExit ( Kaia ) ;
6778: LD_EXP 15
6782: PPUSH
6783: CALL 46910 0 1
// AddComMoveUnit ( Kaia , Mike ) ;
6787: LD_EXP 15
6791: PPUSH
6792: LD_EXP 12
6796: PPUSH
6797: CALL_OW 172
// wait ( 0 0$2 ) ;
6801: LD_INT 70
6803: PPUSH
6804: CALL_OW 67
// ComTurnUnit ( Kaia , Mike ) ;
6808: LD_EXP 15
6812: PPUSH
6813: LD_EXP 12
6817: PPUSH
6818: CALL_OW 119
// ComTurnUnit ( Mike , Kaia ) ;
6822: LD_EXP 12
6826: PPUSH
6827: LD_EXP 15
6831: PPUSH
6832: CALL_OW 119
// Say ( Kaia , DK-Scout-a-6 ) ;
6836: LD_EXP 15
6840: PPUSH
6841: LD_STRING DK-Scout-a-6
6843: PPUSH
6844: CALL_OW 88
// Say ( Mike , DM-Scout-a-7 ) ;
6848: LD_EXP 12
6852: PPUSH
6853: LD_STRING DM-Scout-a-7
6855: PPUSH
6856: CALL_OW 88
// Say ( Kaia , DK-Scout-a-8 ) ;
6860: LD_EXP 15
6864: PPUSH
6865: LD_STRING DK-Scout-a-8
6867: PPUSH
6868: CALL_OW 88
// Say ( Kaia , DK-Scout-a-9 ) ;
6872: LD_EXP 15
6876: PPUSH
6877: LD_STRING DK-Scout-a-9
6879: PPUSH
6880: CALL_OW 88
// Say ( Heike , DH-Scout-a-10 ) ;
6884: LD_EXP 10
6888: PPUSH
6889: LD_STRING DH-Scout-a-10
6891: PPUSH
6892: CALL_OW 88
// ComTurnUnit ( Mike , Heike ) ;
6896: LD_EXP 12
6900: PPUSH
6901: LD_EXP 10
6905: PPUSH
6906: CALL_OW 119
// Say ( Mike , DM-Scout-a-11 ) ;
6910: LD_EXP 12
6914: PPUSH
6915: LD_STRING DM-Scout-a-11
6917: PPUSH
6918: CALL_OW 88
// Say ( Mike , DM-Scout-a-12 ) ;
6922: LD_EXP 12
6926: PPUSH
6927: LD_STRING DM-Scout-a-12
6929: PPUSH
6930: CALL_OW 88
// Say ( Mike , DM-Scout-a-13 ) ;
6934: LD_EXP 12
6938: PPUSH
6939: LD_STRING DM-Scout-a-13
6941: PPUSH
6942: CALL_OW 88
// Say ( Mike , DM-Scout-a-14 ) ;
6946: LD_EXP 12
6950: PPUSH
6951: LD_STRING DM-Scout-a-14
6953: PPUSH
6954: CALL_OW 88
// end ; end ; if IsOk ( Givi ) then
6958: LD_EXP 11
6962: PPUSH
6963: CALL_OW 302
6967: IFFALSE 6995
// begin Say ( Givi , DG-Scout-10 ) ;
6969: LD_EXP 11
6973: PPUSH
6974: LD_STRING DG-Scout-10
6976: PPUSH
6977: CALL_OW 88
// Say ( Givi , DG-Scout-11 ) ;
6981: LD_EXP 11
6985: PPUSH
6986: LD_STRING DG-Scout-11
6988: PPUSH
6989: CALL_OW 88
// end else
6993: GO 7052
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-10 ) then
6995: LD_EXP 22
6999: PPUSH
7000: LD_INT 26
7002: PUSH
7003: LD_INT 1
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PPUSH
7010: CALL_OW 72
7014: PPUSH
7015: LD_STRING DArm-Scout-10
7017: PPUSH
7018: CALL 226 0 2
7022: NOT
7023: IFFALSE 7052
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-10 ) ;
7025: LD_EXP 22
7029: PPUSH
7030: LD_INT 26
7032: PUSH
7033: LD_INT 2
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: PPUSH
7040: CALL_OW 72
7044: PPUSH
7045: LD_STRING DArf-Scout-10
7047: PPUSH
7048: CALL 226 0 2
// Say ( Heike , DH-Scout-12 ) ;
7052: LD_EXP 10
7056: PPUSH
7057: LD_STRING DH-Scout-12
7059: PPUSH
7060: CALL_OW 88
// Say ( Heike , DH-Scout-13 ) ;
7064: LD_EXP 10
7068: PPUSH
7069: LD_STRING DH-Scout-13
7071: PPUSH
7072: CALL_OW 88
// InGameOff ;
7076: CALL_OW 9
// usAttacksAllowed := true ;
7080: LD_ADDR_EXP 6
7084: PUSH
7085: LD_INT 1
7087: ST_TO_ADDR
// end ;
7088: PPOPN 2
7090: END
// every 0 0$1 trigger scoutFailed do
7091: LD_EXP 4
7095: IFFALSE 7169
7097: GO 7099
7099: DISABLE
// begin wait ( 0 0$30 ) ;
7100: LD_INT 1050
7102: PPUSH
7103: CALL_OW 67
// Say ( Heike , DH-Scout-c-1 ) ;
7107: LD_EXP 10
7111: PPUSH
7112: LD_STRING DH-Scout-c-1
7114: PPUSH
7115: CALL_OW 88
// if not IsOk ( Givi ) then
7119: LD_EXP 11
7123: PPUSH
7124: CALL_OW 302
7128: NOT
7129: IFFALSE 7133
// exit ;
7131: GO 7169
// Say ( Givi , DG-Scout-c-2 ) ;
7133: LD_EXP 11
7137: PPUSH
7138: LD_STRING DG-Scout-c-2
7140: PPUSH
7141: CALL_OW 88
// Say ( Givi , DG-Scout-c-3 ) ;
7145: LD_EXP 11
7149: PPUSH
7150: LD_STRING DG-Scout-c-3
7152: PPUSH
7153: CALL_OW 88
// Say ( Heike , DH-Scout-c-4 ) ;
7157: LD_EXP 10
7161: PPUSH
7162: LD_STRING DH-Scout-c-4
7164: PPUSH
7165: CALL_OW 88
// end ;
7169: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_half ] ] ) and IsOk ( Aviradze ) do
7170: LD_INT 22
7172: PUSH
7173: LD_INT 2
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: PUSH
7180: LD_INT 30
7182: PUSH
7183: LD_INT 7
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PPUSH
7194: CALL_OW 69
7198: PUSH
7199: LD_EXP 21
7203: PPUSH
7204: CALL_OW 302
7208: AND
7209: IFFALSE 7294
7211: GO 7213
7213: DISABLE
// begin DialogueOn ;
7214: CALL_OW 6
// Say ( Aviradze , DA-Lab-1 ) ;
7218: LD_EXP 21
7222: PPUSH
7223: LD_STRING DA-Lab-1
7225: PPUSH
7226: CALL_OW 88
// Say ( Heike , DH-Lab-2 ) ;
7230: LD_EXP 10
7234: PPUSH
7235: LD_STRING DH-Lab-2
7237: PPUSH
7238: CALL_OW 88
// Say ( Aviradze , DA-Lab-3 ) ;
7242: LD_EXP 21
7246: PPUSH
7247: LD_STRING DA-Lab-3
7249: PPUSH
7250: CALL_OW 88
// Say ( Aviradze , DA-Lab-4 ) ;
7254: LD_EXP 21
7258: PPUSH
7259: LD_STRING DA-Lab-4
7261: PPUSH
7262: CALL_OW 88
// Say ( Aviradze , DA-Lab-5 ) ;
7266: LD_EXP 21
7270: PPUSH
7271: LD_STRING DA-Lab-5
7273: PPUSH
7274: CALL_OW 88
// Say ( Heike , DH-Lab-6 ) ;
7278: LD_EXP 10
7282: PPUSH
7283: LD_STRING DH-Lab-6
7285: PPUSH
7286: CALL_OW 88
// DialogueOff ;
7290: CALL_OW 7
// end ;
7294: END
// every 0 0$1 trigger GetTech ( tech_MatDet , 2 ) = state_researched and IsOk ( Givi ) do
7295: LD_INT 7
7297: PPUSH
7298: LD_INT 2
7300: PPUSH
7301: CALL_OW 321
7305: PUSH
7306: LD_INT 2
7308: EQUAL
7309: PUSH
7310: LD_EXP 11
7314: PPUSH
7315: CALL_OW 302
7319: AND
7320: IFFALSE 7489
7322: GO 7324
7324: DISABLE
// begin DialogueOn ;
7325: CALL_OW 6
// Say ( Givi , DG-Opt-1 ) ;
7329: LD_EXP 11
7333: PPUSH
7334: LD_STRING DG-Opt-1
7336: PPUSH
7337: CALL_OW 88
// Say ( Heike , DH-Opt-2 ) ;
7341: LD_EXP 10
7345: PPUSH
7346: LD_STRING DH-Opt-2
7348: PPUSH
7349: CALL_OW 88
// Say ( Givi , DG-Opt-3 ) ;
7353: LD_EXP 11
7357: PPUSH
7358: LD_STRING DG-Opt-3
7360: PPUSH
7361: CALL_OW 88
// Say ( Givi , DG-Opt-4 ) ;
7365: LD_EXP 11
7369: PPUSH
7370: LD_STRING DG-Opt-4
7372: PPUSH
7373: CALL_OW 88
// Say ( Heike , DH-Opt-5 ) ;
7377: LD_EXP 10
7381: PPUSH
7382: LD_STRING DH-Opt-5
7384: PPUSH
7385: CALL_OW 88
// Say ( Givi , DG-Opt-6 ) ;
7389: LD_EXP 11
7393: PPUSH
7394: LD_STRING DG-Opt-6
7396: PPUSH
7397: CALL_OW 88
// Say ( Heike , DH-Opt-7 ) ;
7401: LD_EXP 10
7405: PPUSH
7406: LD_STRING DH-Opt-7
7408: PPUSH
7409: CALL_OW 88
// Say ( Givi , DG-Opt-8 ) ;
7413: LD_EXP 11
7417: PPUSH
7418: LD_STRING DG-Opt-8
7420: PPUSH
7421: CALL_OW 88
// Say ( Givi , DG-Opt-9 ) ;
7425: LD_EXP 11
7429: PPUSH
7430: LD_STRING DG-Opt-9
7432: PPUSH
7433: CALL_OW 88
// Say ( Heike , DH-Opt-10 ) ;
7437: LD_EXP 10
7441: PPUSH
7442: LD_STRING DH-Opt-10
7444: PPUSH
7445: CALL_OW 88
// Say ( Givi , DG-Opt-11 ) ;
7449: LD_EXP 11
7453: PPUSH
7454: LD_STRING DG-Opt-11
7456: PPUSH
7457: CALL_OW 88
// Say ( Givi , DG-Opt-12 ) ;
7461: LD_EXP 11
7465: PPUSH
7466: LD_STRING DG-Opt-12
7468: PPUSH
7469: CALL_OW 88
// Say ( Heike , DH-Opt-13 ) ;
7473: LD_EXP 10
7477: PPUSH
7478: LD_STRING DH-Opt-13
7480: PPUSH
7481: CALL_OW 88
// DialogueOff ;
7485: CALL_OW 7
// end ;
7489: END
// every 0 0$1 trigger GetTech ( tech_rocket , 2 ) = state_researched and IsOk ( Ibrahim ) do
7490: LD_INT 40
7492: PPUSH
7493: LD_INT 2
7495: PPUSH
7496: CALL_OW 321
7500: PUSH
7501: LD_INT 2
7503: EQUAL
7504: PUSH
7505: LD_EXP 13
7509: PPUSH
7510: CALL_OW 302
7514: AND
7515: IFFALSE 7765
7517: GO 7519
7519: DISABLE
// begin DialogueOn ;
7520: CALL_OW 6
// Say ( Ibrahim , DI-Roc-1 ) ;
7524: LD_EXP 13
7528: PPUSH
7529: LD_STRING DI-Roc-1
7531: PPUSH
7532: CALL_OW 88
// Say ( Heike , DH-Roc-2 ) ;
7536: LD_EXP 10
7540: PPUSH
7541: LD_STRING DH-Roc-2
7543: PPUSH
7544: CALL_OW 88
// Say ( Ibrahim , DI-Roc-3 ) ;
7548: LD_EXP 13
7552: PPUSH
7553: LD_STRING DI-Roc-3
7555: PPUSH
7556: CALL_OW 88
// Say ( Ibrahim , DI-Roc-4 ) ;
7560: LD_EXP 13
7564: PPUSH
7565: LD_STRING DI-Roc-4
7567: PPUSH
7568: CALL_OW 88
// Say ( Kaia , DK-Roc-5 ) ;
7572: LD_EXP 15
7576: PPUSH
7577: LD_STRING DK-Roc-5
7579: PPUSH
7580: CALL_OW 88
// Say ( Kaia , DK-Roc-6 ) ;
7584: LD_EXP 15
7588: PPUSH
7589: LD_STRING DK-Roc-6
7591: PPUSH
7592: CALL_OW 88
// Say ( Givi , DG-Roc-7 ) ;
7596: LD_EXP 11
7600: PPUSH
7601: LD_STRING DG-Roc-7
7603: PPUSH
7604: CALL_OW 88
// Say ( Givi , DG-Roc-8 ) ;
7608: LD_EXP 11
7612: PPUSH
7613: LD_STRING DG-Roc-8
7615: PPUSH
7616: CALL_OW 88
// if IsOk ( Markov ) and IsOk ( Kaia ) and IsOk ( Givi ) then
7620: LD_EXP 17
7624: PPUSH
7625: CALL_OW 302
7629: PUSH
7630: LD_EXP 15
7634: PPUSH
7635: CALL_OW 302
7639: AND
7640: PUSH
7641: LD_EXP 11
7645: PPUSH
7646: CALL_OW 302
7650: AND
7651: IFFALSE 7761
// begin Say ( Markov , DMar-Roc-9 ) ;
7653: LD_EXP 17
7657: PPUSH
7658: LD_STRING DMar-Roc-9
7660: PPUSH
7661: CALL_OW 88
// Say ( Markov , DMar-Roc-10 ) ;
7665: LD_EXP 17
7669: PPUSH
7670: LD_STRING DMar-Roc-10
7672: PPUSH
7673: CALL_OW 88
// Say ( Kaia , DK-Roc-11 ) ;
7677: LD_EXP 15
7681: PPUSH
7682: LD_STRING DK-Roc-11
7684: PPUSH
7685: CALL_OW 88
// Say ( Markov , DMar-Roc-12 ) ;
7689: LD_EXP 17
7693: PPUSH
7694: LD_STRING DMar-Roc-12
7696: PPUSH
7697: CALL_OW 88
// Say ( Kaia , DK-Roc-13 ) ;
7701: LD_EXP 15
7705: PPUSH
7706: LD_STRING DK-Roc-13
7708: PPUSH
7709: CALL_OW 88
// Say ( Givi , DG-Roc-14 ) ;
7713: LD_EXP 11
7717: PPUSH
7718: LD_STRING DG-Roc-14
7720: PPUSH
7721: CALL_OW 88
// Say ( Markov , DMar-Roc-15 ) ;
7725: LD_EXP 17
7729: PPUSH
7730: LD_STRING DMar-Roc-15
7732: PPUSH
7733: CALL_OW 88
// Say ( Markov , DMar-Roc-16 ) ;
7737: LD_EXP 17
7741: PPUSH
7742: LD_STRING DMar-Roc-16
7744: PPUSH
7745: CALL_OW 88
// Say ( Kaia , DK-Roc-17 ) ;
7749: LD_EXP 15
7753: PPUSH
7754: LD_STRING DK-Roc-17
7756: PPUSH
7757: CALL_OW 88
// end ; DialogueOff ;
7761: CALL_OW 7
// end ;
7765: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] ] ) < 6 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) < 2 do var i , hurts , sci ;
7766: LD_INT 22
7768: PUSH
7769: LD_INT 1
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: PUSH
7776: LD_INT 21
7778: PUSH
7779: LD_INT 1
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PUSH
7786: LD_INT 23
7788: PUSH
7789: LD_INT 1
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: LIST
7800: PPUSH
7801: CALL_OW 69
7805: PUSH
7806: LD_INT 6
7808: LESS
7809: PUSH
7810: LD_INT 22
7812: PUSH
7813: LD_INT 1
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: PUSH
7820: LD_INT 21
7822: PUSH
7823: LD_INT 1
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: PUSH
7830: LD_INT 25
7832: PUSH
7833: LD_INT 1
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: PUSH
7840: EMPTY
7841: LIST
7842: LIST
7843: LIST
7844: PPUSH
7845: CALL_OW 69
7849: PUSH
7850: LD_INT 2
7852: LESS
7853: OR
7854: IFFALSE 8873
7856: GO 7858
7858: DISABLE
7859: LD_INT 0
7861: PPUSH
7862: PPUSH
7863: PPUSH
// begin usAttacksAllowed := false ;
7864: LD_ADDR_EXP 6
7868: PUSH
7869: LD_INT 0
7871: ST_TO_ADDR
// usSurrender := true ;
7872: LD_ADDR_EXP 7
7876: PUSH
7877: LD_INT 1
7879: ST_TO_ADDR
// SetAttitude ( 1 , 2 , att_friend , true ) ;
7880: LD_INT 1
7882: PPUSH
7883: LD_INT 2
7885: PPUSH
7886: LD_INT 1
7888: PPUSH
7889: LD_INT 1
7891: PPUSH
7892: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_hastask ] ] ) do
7896: LD_ADDR_VAR 0 1
7900: PUSH
7901: LD_INT 22
7903: PUSH
7904: LD_INT 2
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: PUSH
7911: LD_INT 21
7913: PUSH
7914: LD_INT 1
7916: PUSH
7917: EMPTY
7918: LIST
7919: LIST
7920: PUSH
7921: LD_INT 60
7923: PUSH
7924: EMPTY
7925: LIST
7926: PUSH
7927: EMPTY
7928: LIST
7929: LIST
7930: LIST
7931: PPUSH
7932: CALL_OW 69
7936: PUSH
7937: FOR_IN
7938: IFFALSE 7951
// ComStop ( i ) ;
7940: LD_VAR 0 1
7944: PPUSH
7945: CALL_OW 141
7949: GO 7937
7951: POP
7952: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_ok ] ] , [ f_type , unit_human ] ] ) do
7953: LD_ADDR_VAR 0 1
7957: PUSH
7958: LD_INT 22
7960: PUSH
7961: LD_INT 2
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: PUSH
7968: LD_INT 3
7970: PUSH
7971: LD_INT 50
7973: PUSH
7974: EMPTY
7975: LIST
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 21
7983: PUSH
7984: LD_INT 1
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: LIST
7995: PPUSH
7996: CALL_OW 69
8000: PUSH
8001: FOR_IN
8002: IFFALSE 8018
// SetLives ( i , 251 ) ;
8004: LD_VAR 0 1
8008: PPUSH
8009: LD_INT 251
8011: PPUSH
8012: CALL_OW 234
8016: GO 8001
8018: POP
8019: POP
// InGameOn ;
8020: CALL_OW 8
// ComExit ( usCommander ) ;
8024: LD_EXP 25
8028: PPUSH
8029: CALL 46910 0 1
// AddComMoveXY ( usCommander , 81 , 143 ) ;
8033: LD_EXP 25
8037: PPUSH
8038: LD_INT 81
8040: PPUSH
8041: LD_INT 143
8043: PPUSH
8044: CALL_OW 171
// AddComTurnXY ( usCommander , 81 , 139 ) ;
8048: LD_EXP 25
8052: PPUSH
8053: LD_INT 81
8055: PPUSH
8056: LD_INT 139
8058: PPUSH
8059: CALL_OW 178
// PlaceSeeing ( 81 , 144 , 2 , - 10 ) ;
8063: LD_INT 81
8065: PPUSH
8066: LD_INT 144
8068: PPUSH
8069: LD_INT 2
8071: PPUSH
8072: LD_INT 10
8074: NEG
8075: PPUSH
8076: CALL_OW 330
// CenterNowOnUnits ( usCommander ) ;
8080: LD_EXP 25
8084: PPUSH
8085: CALL_OW 87
// wait ( 0 0$2 ) ;
8089: LD_INT 70
8091: PPUSH
8092: CALL_OW 67
// Say ( usCommander , DCa-Surrender-1 ) ;
8096: LD_EXP 25
8100: PPUSH
8101: LD_STRING DCa-Surrender-1
8103: PPUSH
8104: CALL_OW 88
// Say ( Heike , DH-Surrender-2 ) ;
8108: LD_EXP 10
8112: PPUSH
8113: LD_STRING DH-Surrender-2
8115: PPUSH
8116: CALL_OW 88
// if GetType ( IsInUnit ( Heike ) ) = unit_building then
8120: LD_EXP 10
8124: PPUSH
8125: CALL_OW 310
8129: PPUSH
8130: CALL_OW 247
8134: PUSH
8135: LD_INT 3
8137: EQUAL
8138: IFFALSE 8156
// begin ComExit ( Heike ) ;
8140: LD_EXP 10
8144: PPUSH
8145: CALL 46910 0 1
// wait ( 3 ) ;
8149: LD_INT 3
8151: PPUSH
8152: CALL_OW 67
// end ; ComMoveXY ( Heike , 82 , 133 ) ;
8156: LD_EXP 10
8160: PPUSH
8161: LD_INT 82
8163: PPUSH
8164: LD_INT 133
8166: PPUSH
8167: CALL_OW 111
// AddComTurnUnit ( Heike , usCommander ) ;
8171: LD_EXP 10
8175: PPUSH
8176: LD_EXP 25
8180: PPUSH
8181: CALL_OW 179
// wait ( 0 0$3 ) ;
8185: LD_INT 105
8187: PPUSH
8188: CALL_OW 67
// Say ( Heike , DH-Surrender-3 ) ;
8192: LD_EXP 10
8196: PPUSH
8197: LD_STRING DH-Surrender-3
8199: PPUSH
8200: CALL_OW 88
// Say ( Heike , DH-Surrender-4 ) ;
8204: LD_EXP 10
8208: PPUSH
8209: LD_STRING DH-Surrender-4
8211: PPUSH
8212: CALL_OW 88
// RemoveSeeing ( 81 , 144 , 2 ) ;
8216: LD_INT 81
8218: PPUSH
8219: LD_INT 144
8221: PPUSH
8222: LD_INT 2
8224: PPUSH
8225: CALL_OW 331
// ChangeSideFog ( 1 , 2 ) ;
8229: LD_INT 1
8231: PPUSH
8232: LD_INT 2
8234: PPUSH
8235: CALL_OW 343
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_inside ] ] ) do
8239: LD_ADDR_VAR 0 1
8243: PUSH
8244: LD_INT 22
8246: PUSH
8247: LD_INT 1
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: PUSH
8254: LD_INT 23
8256: PUSH
8257: LD_INT 1
8259: PUSH
8260: EMPTY
8261: LIST
8262: LIST
8263: PUSH
8264: LD_INT 54
8266: PUSH
8267: EMPTY
8268: LIST
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: LIST
8274: PPUSH
8275: CALL_OW 69
8279: PUSH
8280: FOR_IN
8281: IFFALSE 8294
// ComExit ( i ) ;
8283: LD_VAR 0 1
8287: PPUSH
8288: CALL 46910 0 1
8292: GO 8280
8294: POP
8295: POP
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
8296: LD_ADDR_VAR 0 3
8300: PUSH
8301: LD_INT 22
8303: PUSH
8304: LD_INT 1
8306: PUSH
8307: EMPTY
8308: LIST
8309: LIST
8310: PUSH
8311: LD_INT 25
8313: PUSH
8314: LD_INT 4
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: PPUSH
8325: CALL_OW 69
8329: ST_TO_ADDR
// hurts := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
8330: LD_ADDR_VAR 0 2
8334: PUSH
8335: LD_INT 22
8337: PUSH
8338: LD_INT 1
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: PUSH
8345: LD_INT 3
8347: PUSH
8348: LD_INT 50
8350: PUSH
8351: EMPTY
8352: LIST
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PPUSH
8362: CALL_OW 69
8366: ST_TO_ADDR
// if sci and hurts then
8367: LD_VAR 0 3
8371: PUSH
8372: LD_VAR 0 2
8376: AND
8377: IFFALSE 8439
// begin for i := 1 to hurts do
8379: LD_ADDR_VAR 0 1
8383: PUSH
8384: DOUBLE
8385: LD_INT 1
8387: DEC
8388: ST_TO_ADDR
8389: LD_VAR 0 2
8393: PUSH
8394: FOR_TO
8395: IFFALSE 8437
// if i <= sci then
8397: LD_VAR 0 1
8401: PUSH
8402: LD_VAR 0 3
8406: LESSEQUAL
8407: IFFALSE 8435
// AddComHeal ( sci [ i ] , hurts [ i ] ) ;
8409: LD_VAR 0 3
8413: PUSH
8414: LD_VAR 0 1
8418: ARRAY
8419: PPUSH
8420: LD_VAR 0 2
8424: PUSH
8425: LD_VAR 0 1
8429: ARRAY
8430: PPUSH
8431: CALL_OW 188
8435: GO 8394
8437: POP
8438: POP
// end ; if IsOk ( Givi ) then
8439: LD_EXP 11
8443: PPUSH
8444: CALL_OW 302
8448: IFFALSE 8462
// Say ( Givi , DG-Surrender-5 ) ;
8450: LD_EXP 11
8454: PPUSH
8455: LD_STRING DG-Surrender-5
8457: PPUSH
8458: CALL_OW 88
// Say ( usCommander , DCa-Surrender-6 ) ;
8462: LD_EXP 25
8466: PPUSH
8467: LD_STRING DCa-Surrender-6
8469: PPUSH
8470: CALL_OW 88
// Say ( usCommander , DCa-Surrender-7 ) ;
8474: LD_EXP 25
8478: PPUSH
8479: LD_STRING DCa-Surrender-7
8481: PPUSH
8482: CALL_OW 88
// Say ( Givi , DG-Surrender-8 ) ;
8486: LD_EXP 11
8490: PPUSH
8491: LD_STRING DG-Surrender-8
8493: PPUSH
8494: CALL_OW 88
// Say ( usCommander , DCa-Surrender-9 ) ;
8498: LD_EXP 25
8502: PPUSH
8503: LD_STRING DCa-Surrender-9
8505: PPUSH
8506: CALL_OW 88
// Say ( Heike , DH-Surrender-10 ) ;
8510: LD_EXP 10
8514: PPUSH
8515: LD_STRING DH-Surrender-10
8517: PPUSH
8518: CALL_OW 88
// Say ( usCommander , DCa-Surrender-11 ) ;
8522: LD_EXP 25
8526: PPUSH
8527: LD_STRING DCa-Surrender-11
8529: PPUSH
8530: CALL_OW 88
// Say ( Heike , DH-Surrender-12 ) ;
8534: LD_EXP 10
8538: PPUSH
8539: LD_STRING DH-Surrender-12
8541: PPUSH
8542: CALL_OW 88
// Say ( usCommander , DCa-Surrender-13 ) ;
8546: LD_EXP 25
8550: PPUSH
8551: LD_STRING DCa-Surrender-13
8553: PPUSH
8554: CALL_OW 88
// Say ( usCommander , DCa-Surrender-14 ) ;
8558: LD_EXP 25
8562: PPUSH
8563: LD_STRING DCa-Surrender-14
8565: PPUSH
8566: CALL_OW 88
// Say ( usCommander , DCa-Surrender-15 ) ;
8570: LD_EXP 25
8574: PPUSH
8575: LD_STRING DCa-Surrender-15
8577: PPUSH
8578: CALL_OW 88
// Say ( usCommander , DCa-Surrender-16 ) ;
8582: LD_EXP 25
8586: PPUSH
8587: LD_STRING DCa-Surrender-16
8589: PPUSH
8590: CALL_OW 88
// Say ( Kaia , DK-Surrender-17 ) ;
8594: LD_EXP 15
8598: PPUSH
8599: LD_STRING DK-Surrender-17
8601: PPUSH
8602: CALL_OW 88
// Say ( Olaf , DO-Surrender-18 ) ;
8606: LD_EXP 19
8610: PPUSH
8611: LD_STRING DO-Surrender-18
8613: PPUSH
8614: CALL_OW 88
// Say ( Olaf , DO-Surrender-19 ) ;
8618: LD_EXP 19
8622: PPUSH
8623: LD_STRING DO-Surrender-19
8625: PPUSH
8626: CALL_OW 88
// Say ( Kurt , DKs-Surrender-20 ) ;
8630: LD_EXP 20
8634: PPUSH
8635: LD_STRING DKs-Surrender-20
8637: PPUSH
8638: CALL_OW 88
// Say ( Kurt , DKs-Surrender-21 ) ;
8642: LD_EXP 20
8646: PPUSH
8647: LD_STRING DKs-Surrender-21
8649: PPUSH
8650: CALL_OW 88
// Say ( Markov , DMar-Surrender-22 ) ;
8654: LD_EXP 17
8658: PPUSH
8659: LD_STRING DMar-Surrender-22
8661: PPUSH
8662: CALL_OW 88
// Say ( Markov , DMar-Surrender-23 ) ;
8666: LD_EXP 17
8670: PPUSH
8671: LD_STRING DMar-Surrender-23
8673: PPUSH
8674: CALL_OW 88
// Say ( Sophia , DS-Surrender-24 ) ;
8678: LD_EXP 16
8682: PPUSH
8683: LD_STRING DS-Surrender-24
8685: PPUSH
8686: CALL_OW 88
// Say ( Aviradze , DA-Surrender-25 ) ;
8690: LD_EXP 21
8694: PPUSH
8695: LD_STRING DA-Surrender-25
8697: PPUSH
8698: CALL_OW 88
// Say ( Ibrahim , DI-Surrender-26 ) ;
8702: LD_EXP 13
8706: PPUSH
8707: LD_STRING DI-Surrender-26
8709: PPUSH
8710: CALL_OW 88
// Say ( Kamil , DKam-Surrender-27 ) ;
8714: LD_EXP 14
8718: PPUSH
8719: LD_STRING DKam-Surrender-27
8721: PPUSH
8722: CALL_OW 88
// Say ( Givi , DG-Surrender-28 ) ;
8726: LD_EXP 11
8730: PPUSH
8731: LD_STRING DG-Surrender-28
8733: PPUSH
8734: CALL_OW 88
// Say ( Givi , DG-Surrender-29 ) ;
8738: LD_EXP 11
8742: PPUSH
8743: LD_STRING DG-Surrender-29
8745: PPUSH
8746: CALL_OW 88
// Say ( Givi , DG-Surrender-30 ) ;
8750: LD_EXP 11
8754: PPUSH
8755: LD_STRING DG-Surrender-30
8757: PPUSH
8758: CALL_OW 88
// PrepareRussianFirstWaveAttack ;
8762: CALL 9769 0 0
// if not IsEnvironment ( 190 , 150 ) then
8766: LD_INT 190
8768: PPUSH
8769: LD_INT 150
8771: PPUSH
8772: CALL_OW 351
8776: NOT
8777: IFFALSE 8796
// PlaceSeeing ( 190 , 150 , 2 , - 8 ) ;
8779: LD_INT 190
8781: PPUSH
8782: LD_INT 150
8784: PPUSH
8785: LD_INT 2
8787: PPUSH
8788: LD_INT 8
8790: NEG
8791: PPUSH
8792: CALL_OW 330
// CenterOnXY ( 193 , 150 ) ;
8796: LD_INT 193
8798: PPUSH
8799: LD_INT 150
8801: PPUSH
8802: CALL_OW 84
// Say ( Markov , DMar-Surrender-31 ) ;
8806: LD_EXP 17
8810: PPUSH
8811: LD_STRING DMar-Surrender-31
8813: PPUSH
8814: CALL_OW 88
// Say ( Heike , DH-Surrender-32 ) ;
8818: LD_EXP 10
8822: PPUSH
8823: LD_STRING DH-Surrender-32
8825: PPUSH
8826: CALL_OW 88
// InGameOff ;
8830: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
8834: LD_STRING M2
8836: PPUSH
8837: CALL_OW 337
// wait ( 0 0$20 ) ;
8841: LD_INT 700
8843: PPUSH
8844: CALL_OW 67
// PrepareRussianLastWaveAttack ;
8848: CALL 9777 0 0
// russianAttack := true ;
8852: LD_ADDR_EXP 8
8856: PUSH
8857: LD_INT 1
8859: ST_TO_ADDR
// RemoveSeeing ( 190 , 150 , 2 ) ;
8860: LD_INT 190
8862: PPUSH
8863: LD_INT 150
8865: PPUSH
8866: LD_INT 2
8868: PPUSH
8869: CALL_OW 331
// end ;
8873: PPOPN 3
8875: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
8876: LD_EXP 15
8880: PPUSH
8881: CALL_OW 256
8885: PUSH
8886: LD_INT 3
8888: LESS
8889: IFFALSE 8926
8891: GO 8893
8893: DISABLE
// begin DialogueOn ;
8894: CALL_OW 6
// ForceSay ( Kaia , DK-Dead-1 ) ;
8898: LD_EXP 15
8902: PPUSH
8903: LD_STRING DK-Dead-1
8905: PPUSH
8906: CALL_OW 91
// ForceSay ( Kaia , DK-Dead-2 ) ;
8910: LD_EXP 15
8914: PPUSH
8915: LD_STRING DK-Dead-2
8917: PPUSH
8918: CALL_OW 91
// DialogueOff ;
8922: CALL_OW 7
// end ;
8926: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , ar_rocket_launcher ] ] ) do
8927: LD_INT 22
8929: PUSH
8930: LD_INT 2
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PUSH
8937: LD_INT 21
8939: PUSH
8940: LD_INT 28
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: PPUSH
8951: CALL_OW 69
8955: IFFALSE 8968
8957: GO 8959
8959: DISABLE
// hasRockets := true ;
8960: LD_ADDR_EXP 9
8964: PUSH
8965: LD_INT 1
8967: ST_TO_ADDR
8968: END
// every 0 0$1 trigger russianAttack and not FilterAllUnits ( [ f_side , 3 ] ) do
8969: LD_EXP 8
8973: PUSH
8974: LD_INT 22
8976: PUSH
8977: LD_INT 3
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: PPUSH
8984: CALL_OW 69
8988: NOT
8989: AND
8990: IFFALSE 9600
8992: GO 8994
8994: DISABLE
// begin DialogueOn ;
8995: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
8999: LD_EXP 10
9003: PPUSH
9004: CALL_OW 87
// Say ( Heike , DH-End-1 ) ;
9008: LD_EXP 10
9012: PPUSH
9013: LD_STRING DH-End-1
9015: PPUSH
9016: CALL_OW 88
// SayRadio ( Shariff , DShar-End-2 ) ;
9020: LD_EXP 18
9024: PPUSH
9025: LD_STRING DShar-End-2
9027: PPUSH
9028: CALL_OW 94
// Say ( Kaia , DK-End-3 ) ;
9032: LD_EXP 15
9036: PPUSH
9037: LD_STRING DK-End-3
9039: PPUSH
9040: CALL_OW 88
// Say ( Heike , DH-End-4 ) ;
9044: LD_EXP 10
9048: PPUSH
9049: LD_STRING DH-End-4
9051: PPUSH
9052: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
9056: LD_EXP 18
9060: PPUSH
9061: LD_STRING DShar-End-5
9063: PPUSH
9064: CALL_OW 94
// if IsOk ( Markov ) then
9068: LD_EXP 17
9072: PPUSH
9073: CALL_OW 302
9077: IFFALSE 9091
// Say ( Kaia , DK-End-6 ) ;
9079: LD_EXP 15
9083: PPUSH
9084: LD_STRING DK-End-6
9086: PPUSH
9087: CALL_OW 88
// Say ( Kaia , DK-End-7 ) ;
9091: LD_EXP 15
9095: PPUSH
9096: LD_STRING DK-End-7
9098: PPUSH
9099: CALL_OW 88
// if IsOk ( Kaia ) then
9103: LD_EXP 15
9107: PPUSH
9108: CALL_OW 302
9112: IFFALSE 9150
// begin Say ( Givi , DG-End-8 ) ;
9114: LD_EXP 11
9118: PPUSH
9119: LD_STRING DG-End-8
9121: PPUSH
9122: CALL_OW 88
// Say ( Givi , DG-End-9 ) ;
9126: LD_EXP 11
9130: PPUSH
9131: LD_STRING DG-End-9
9133: PPUSH
9134: CALL_OW 88
// Say ( Heike , DH-End-10 ) ;
9138: LD_EXP 10
9142: PPUSH
9143: LD_STRING DH-End-10
9145: PPUSH
9146: CALL_OW 88
// end ; Say ( Heike , DH-End-11 ) ;
9150: LD_EXP 10
9154: PPUSH
9155: LD_STRING DH-End-11
9157: PPUSH
9158: CALL_OW 88
// if GetTech ( tech_MatDet , 2 ) = state_researched then
9162: LD_INT 7
9164: PPUSH
9165: LD_INT 2
9167: PPUSH
9168: CALL_OW 321
9172: PUSH
9173: LD_INT 2
9175: EQUAL
9176: IFFALSE 9190
// AddMedal ( med1 , 1 ) else
9178: LD_STRING med1
9180: PPUSH
9181: LD_INT 1
9183: PPUSH
9184: CALL_OW 101
9188: GO 9201
// AddMedal ( med1 , - 1 ) ;
9190: LD_STRING med1
9192: PPUSH
9193: LD_INT 1
9195: NEG
9196: PPUSH
9197: CALL_OW 101
// if hasRockets then
9201: LD_EXP 9
9205: IFFALSE 9219
// AddMedal ( med2 , 1 ) else
9207: LD_STRING med2
9209: PPUSH
9210: LD_INT 1
9212: PPUSH
9213: CALL_OW 101
9217: GO 9230
// AddMedal ( med2 , - 1 ) ;
9219: LD_STRING med2
9221: PPUSH
9222: LD_INT 1
9224: NEG
9225: PPUSH
9226: CALL_OW 101
// if tick < [ 50 50$00 , 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
9230: LD_OWVAR 1
9234: PUSH
9235: LD_INT 105000
9237: PUSH
9238: LD_INT 94500
9240: PUSH
9241: LD_INT 84000
9243: PUSH
9244: LD_INT 73500
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: PUSH
9253: LD_OWVAR 67
9257: ARRAY
9258: LESS
9259: IFFALSE 9273
// AddMedal ( med3 , 1 ) else
9261: LD_STRING med3
9263: PPUSH
9264: LD_INT 1
9266: PPUSH
9267: CALL_OW 101
9271: GO 9284
// AddMedal ( med3 , - 1 ) ;
9273: LD_STRING med3
9275: PPUSH
9276: LD_INT 1
9278: NEG
9279: PPUSH
9280: CALL_OW 101
// GiveMedals ( MAIN ) ;
9284: LD_STRING MAIN
9286: PPUSH
9287: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
9291: LD_INT 22
9293: PUSH
9294: LD_INT 2
9296: PUSH
9297: EMPTY
9298: LIST
9299: LIST
9300: PUSH
9301: LD_INT 23
9303: PUSH
9304: LD_INT 2
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: PUSH
9311: LD_INT 21
9313: PUSH
9314: LD_INT 1
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: PUSH
9321: EMPTY
9322: LIST
9323: LIST
9324: LIST
9325: PPUSH
9326: CALL_OW 69
9330: PPUSH
9331: CALL_OW 43
// SaveCharacters ( usCommander , 07_UsCommander ) ;
9335: LD_EXP 25
9339: PPUSH
9340: LD_STRING 07_UsCommander
9342: PPUSH
9343: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff usCommander , 07_Americans ) ;
9347: LD_INT 22
9349: PUSH
9350: LD_INT 1
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: PUSH
9357: LD_INT 23
9359: PUSH
9360: LD_INT 1
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: PUSH
9367: LD_INT 21
9369: PUSH
9370: LD_INT 1
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: LIST
9381: PPUSH
9382: CALL_OW 69
9386: PUSH
9387: LD_EXP 25
9391: DIFF
9392: PPUSH
9393: LD_STRING 07_Americans
9395: PPUSH
9396: CALL_OW 38
// SaveCharacters ( Heike , 07_Heike ) ;
9400: LD_EXP 10
9404: PPUSH
9405: LD_STRING 07_Heike
9407: PPUSH
9408: CALL_OW 38
// if Aviradze then
9412: LD_EXP 21
9416: IFFALSE 9430
// SaveCharacters ( Aviradze , 07_Aviradze ) ;
9418: LD_EXP 21
9422: PPUSH
9423: LD_STRING 07_Aviradze
9425: PPUSH
9426: CALL_OW 38
// if Ibrahim then
9430: LD_EXP 13
9434: IFFALSE 9448
// SaveCharacters ( Ibrahim , 07_Ibrahim ) ;
9436: LD_EXP 13
9440: PPUSH
9441: LD_STRING 07_Ibrahim
9443: PPUSH
9444: CALL_OW 38
// if Kamil then
9448: LD_EXP 14
9452: IFFALSE 9466
// SaveCharacters ( Kamil , 07_Kamil ) ;
9454: LD_EXP 14
9458: PPUSH
9459: LD_STRING 07_Kamil
9461: PPUSH
9462: CALL_OW 38
// if Sophia then
9466: LD_EXP 16
9470: IFFALSE 9484
// SaveCharacters ( Sophia , 07_Sophia ) ;
9472: LD_EXP 16
9476: PPUSH
9477: LD_STRING 07_Sophia
9479: PPUSH
9480: CALL_OW 38
// if Kaia then
9484: LD_EXP 15
9488: IFFALSE 9502
// SaveCharacters ( Kaia , 07_Kaia ) ;
9490: LD_EXP 15
9494: PPUSH
9495: LD_STRING 07_Kaia
9497: PPUSH
9498: CALL_OW 38
// if Givi then
9502: LD_EXP 11
9506: IFFALSE 9520
// SaveCharacters ( Givi , 07_Givi ) ;
9508: LD_EXP 11
9512: PPUSH
9513: LD_STRING 07_Givi
9515: PPUSH
9516: CALL_OW 38
// if Mike then
9520: LD_EXP 12
9524: IFFALSE 9538
// SaveCharacters ( Mike , 07_Mike ) ;
9526: LD_EXP 12
9530: PPUSH
9531: LD_STRING 07_Mike
9533: PPUSH
9534: CALL_OW 38
// if Markov then
9538: LD_EXP 17
9542: IFFALSE 9556
// SaveCharacters ( Markov , 07_Markov ) ;
9544: LD_EXP 17
9548: PPUSH
9549: LD_STRING 07_Markov
9551: PPUSH
9552: CALL_OW 38
// if Kurt then
9556: LD_EXP 20
9560: IFFALSE 9574
// SaveCharacters ( Kurt , 07_Kurt ) ;
9562: LD_EXP 20
9566: PPUSH
9567: LD_STRING 07_Kurt
9569: PPUSH
9570: CALL_OW 38
// if heikeSecondSquad then
9574: LD_EXP 22
9578: IFFALSE 9592
// SaveCharacters ( heikeSecondSquad , 07_others ) ;
9580: LD_EXP 22
9584: PPUSH
9585: LD_STRING 07_others
9587: PPUSH
9588: CALL_OW 38
// YouWin ;
9592: CALL_OW 103
// DialogueOff ;
9596: CALL_OW 7
// end ; end_of_file
9600: END
// every 0 0$40 + 0 0$40 trigger GetResourceArea ( cratesRiverArea , mat_cans ) < [ 500 , 450 , 400 , 380 ] [ Difficulty ] do
9601: LD_INT 7
9603: PPUSH
9604: LD_INT 1
9606: PPUSH
9607: CALL_OW 287
9611: PUSH
9612: LD_INT 500
9614: PUSH
9615: LD_INT 450
9617: PUSH
9618: LD_INT 400
9620: PUSH
9621: LD_INT 380
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: PUSH
9630: LD_OWVAR 67
9634: ARRAY
9635: LESS
9636: IFFALSE 9663
9638: GO 9640
9640: DISABLE
// begin enable ;
9641: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesRiverArea , true ) ;
9642: LD_INT 1
9644: PPUSH
9645: LD_INT 5
9647: PPUSH
9648: CALL_OW 12
9652: PPUSH
9653: LD_INT 7
9655: PPUSH
9656: LD_INT 1
9658: PPUSH
9659: CALL_OW 55
// end ;
9663: END
// every 2 2$00 trigger GetResourceArea ( cratesForestArea , mat_cans ) < [ 300 , 250 , 200 , 180 ] [ Difficulty ] do
9664: LD_INT 8
9666: PPUSH
9667: LD_INT 1
9669: PPUSH
9670: CALL_OW 287
9674: PUSH
9675: LD_INT 300
9677: PUSH
9678: LD_INT 250
9680: PUSH
9681: LD_INT 200
9683: PUSH
9684: LD_INT 180
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: PUSH
9693: LD_OWVAR 67
9697: ARRAY
9698: LESS
9699: IFFALSE 9726
9701: GO 9703
9703: DISABLE
// begin enable ;
9704: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesForestArea , true ) ;
9705: LD_INT 1
9707: PPUSH
9708: LD_INT 5
9710: PPUSH
9711: CALL_OW 12
9715: PPUSH
9716: LD_INT 8
9718: PPUSH
9719: LD_INT 1
9721: PPUSH
9722: CALL_OW 55
// end ;
9726: END
// every 0 0$30 trigger tick < 4 4$10 do
9727: LD_OWVAR 1
9731: PUSH
9732: LD_INT 8750
9734: LESS
9735: IFFALSE 9768
9737: GO 9739
9739: DISABLE
// begin enable ;
9740: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 130 , 18 , 12 , true ) ;
9741: LD_INT 1
9743: PPUSH
9744: LD_INT 5
9746: PPUSH
9747: CALL_OW 12
9751: PPUSH
9752: LD_INT 130
9754: PPUSH
9755: LD_INT 18
9757: PPUSH
9758: LD_INT 12
9760: PPUSH
9761: LD_INT 1
9763: PPUSH
9764: CALL_OW 56
// end ; end_of_file
9768: END
// export function PrepareRussianFirstWaveAttack ; begin
9769: LD_INT 0
9771: PPUSH
// end ;
9772: LD_VAR 0 1
9776: RET
// export function PrepareRussianLastWaveAttack ; begin
9777: LD_INT 0
9779: PPUSH
// end ; end_of_file
9780: LD_VAR 0 1
9784: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
9785: LD_INT 0
9787: PPUSH
9788: PPUSH
// if exist_mode then
9789: LD_VAR 0 2
9793: IFFALSE 9818
// unit := CreateCharacter ( prefix & ident ) else
9795: LD_ADDR_VAR 0 5
9799: PUSH
9800: LD_VAR 0 3
9804: PUSH
9805: LD_VAR 0 1
9809: STR
9810: PPUSH
9811: CALL_OW 34
9815: ST_TO_ADDR
9816: GO 9833
// unit := NewCharacter ( ident ) ;
9818: LD_ADDR_VAR 0 5
9822: PUSH
9823: LD_VAR 0 1
9827: PPUSH
9828: CALL_OW 25
9832: ST_TO_ADDR
// result := unit ;
9833: LD_ADDR_VAR 0 4
9837: PUSH
9838: LD_VAR 0 5
9842: ST_TO_ADDR
// end ;
9843: LD_VAR 0 4
9847: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
9848: LD_INT 0
9850: PPUSH
9851: PPUSH
// if not side or not nation then
9852: LD_VAR 0 1
9856: NOT
9857: PUSH
9858: LD_VAR 0 2
9862: NOT
9863: OR
9864: IFFALSE 9868
// exit ;
9866: GO 10636
// case nation of nation_american :
9868: LD_VAR 0 2
9872: PUSH
9873: LD_INT 1
9875: DOUBLE
9876: EQUAL
9877: IFTRUE 9881
9879: GO 10095
9881: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
9882: LD_ADDR_VAR 0 4
9886: PUSH
9887: LD_INT 35
9889: PUSH
9890: LD_INT 45
9892: PUSH
9893: LD_INT 46
9895: PUSH
9896: LD_INT 47
9898: PUSH
9899: LD_INT 82
9901: PUSH
9902: LD_INT 83
9904: PUSH
9905: LD_INT 84
9907: PUSH
9908: LD_INT 85
9910: PUSH
9911: LD_INT 86
9913: PUSH
9914: LD_INT 1
9916: PUSH
9917: LD_INT 2
9919: PUSH
9920: LD_INT 6
9922: PUSH
9923: LD_INT 15
9925: PUSH
9926: LD_INT 16
9928: PUSH
9929: LD_INT 7
9931: PUSH
9932: LD_INT 12
9934: PUSH
9935: LD_INT 13
9937: PUSH
9938: LD_INT 10
9940: PUSH
9941: LD_INT 14
9943: PUSH
9944: LD_INT 20
9946: PUSH
9947: LD_INT 21
9949: PUSH
9950: LD_INT 22
9952: PUSH
9953: LD_INT 25
9955: PUSH
9956: LD_INT 32
9958: PUSH
9959: LD_INT 27
9961: PUSH
9962: LD_INT 36
9964: PUSH
9965: LD_INT 69
9967: PUSH
9968: LD_INT 39
9970: PUSH
9971: LD_INT 34
9973: PUSH
9974: LD_INT 40
9976: PUSH
9977: LD_INT 48
9979: PUSH
9980: LD_INT 49
9982: PUSH
9983: LD_INT 50
9985: PUSH
9986: LD_INT 51
9988: PUSH
9989: LD_INT 52
9991: PUSH
9992: LD_INT 53
9994: PUSH
9995: LD_INT 54
9997: PUSH
9998: LD_INT 55
10000: PUSH
10001: LD_INT 56
10003: PUSH
10004: LD_INT 57
10006: PUSH
10007: LD_INT 58
10009: PUSH
10010: LD_INT 59
10012: PUSH
10013: LD_INT 60
10015: PUSH
10016: LD_INT 61
10018: PUSH
10019: LD_INT 62
10021: PUSH
10022: LD_INT 80
10024: PUSH
10025: LD_INT 82
10027: PUSH
10028: LD_INT 83
10030: PUSH
10031: LD_INT 84
10033: PUSH
10034: LD_INT 85
10036: PUSH
10037: LD_INT 86
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: ST_TO_ADDR
10093: GO 10560
10095: LD_INT 2
10097: DOUBLE
10098: EQUAL
10099: IFTRUE 10103
10101: GO 10329
10103: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
10104: LD_ADDR_VAR 0 4
10108: PUSH
10109: LD_INT 35
10111: PUSH
10112: LD_INT 45
10114: PUSH
10115: LD_INT 46
10117: PUSH
10118: LD_INT 47
10120: PUSH
10121: LD_INT 82
10123: PUSH
10124: LD_INT 83
10126: PUSH
10127: LD_INT 84
10129: PUSH
10130: LD_INT 85
10132: PUSH
10133: LD_INT 87
10135: PUSH
10136: LD_INT 70
10138: PUSH
10139: LD_INT 1
10141: PUSH
10142: LD_INT 11
10144: PUSH
10145: LD_INT 3
10147: PUSH
10148: LD_INT 4
10150: PUSH
10151: LD_INT 5
10153: PUSH
10154: LD_INT 6
10156: PUSH
10157: LD_INT 15
10159: PUSH
10160: LD_INT 18
10162: PUSH
10163: LD_INT 7
10165: PUSH
10166: LD_INT 17
10168: PUSH
10169: LD_INT 8
10171: PUSH
10172: LD_INT 20
10174: PUSH
10175: LD_INT 21
10177: PUSH
10178: LD_INT 22
10180: PUSH
10181: LD_INT 72
10183: PUSH
10184: LD_INT 26
10186: PUSH
10187: LD_INT 69
10189: PUSH
10190: LD_INT 39
10192: PUSH
10193: LD_INT 40
10195: PUSH
10196: LD_INT 41
10198: PUSH
10199: LD_INT 42
10201: PUSH
10202: LD_INT 43
10204: PUSH
10205: LD_INT 48
10207: PUSH
10208: LD_INT 49
10210: PUSH
10211: LD_INT 50
10213: PUSH
10214: LD_INT 51
10216: PUSH
10217: LD_INT 52
10219: PUSH
10220: LD_INT 53
10222: PUSH
10223: LD_INT 54
10225: PUSH
10226: LD_INT 55
10228: PUSH
10229: LD_INT 56
10231: PUSH
10232: LD_INT 60
10234: PUSH
10235: LD_INT 61
10237: PUSH
10238: LD_INT 62
10240: PUSH
10241: LD_INT 66
10243: PUSH
10244: LD_INT 67
10246: PUSH
10247: LD_INT 68
10249: PUSH
10250: LD_INT 81
10252: PUSH
10253: LD_INT 82
10255: PUSH
10256: LD_INT 83
10258: PUSH
10259: LD_INT 84
10261: PUSH
10262: LD_INT 85
10264: PUSH
10265: LD_INT 87
10267: PUSH
10268: LD_INT 88
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: ST_TO_ADDR
10327: GO 10560
10329: LD_INT 3
10331: DOUBLE
10332: EQUAL
10333: IFTRUE 10337
10335: GO 10559
10337: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
10338: LD_ADDR_VAR 0 4
10342: PUSH
10343: LD_INT 46
10345: PUSH
10346: LD_INT 47
10348: PUSH
10349: LD_INT 1
10351: PUSH
10352: LD_INT 2
10354: PUSH
10355: LD_INT 82
10357: PUSH
10358: LD_INT 83
10360: PUSH
10361: LD_INT 84
10363: PUSH
10364: LD_INT 85
10366: PUSH
10367: LD_INT 86
10369: PUSH
10370: LD_INT 11
10372: PUSH
10373: LD_INT 9
10375: PUSH
10376: LD_INT 20
10378: PUSH
10379: LD_INT 19
10381: PUSH
10382: LD_INT 21
10384: PUSH
10385: LD_INT 24
10387: PUSH
10388: LD_INT 22
10390: PUSH
10391: LD_INT 25
10393: PUSH
10394: LD_INT 28
10396: PUSH
10397: LD_INT 29
10399: PUSH
10400: LD_INT 30
10402: PUSH
10403: LD_INT 31
10405: PUSH
10406: LD_INT 37
10408: PUSH
10409: LD_INT 38
10411: PUSH
10412: LD_INT 32
10414: PUSH
10415: LD_INT 27
10417: PUSH
10418: LD_INT 33
10420: PUSH
10421: LD_INT 69
10423: PUSH
10424: LD_INT 39
10426: PUSH
10427: LD_INT 34
10429: PUSH
10430: LD_INT 40
10432: PUSH
10433: LD_INT 71
10435: PUSH
10436: LD_INT 23
10438: PUSH
10439: LD_INT 44
10441: PUSH
10442: LD_INT 48
10444: PUSH
10445: LD_INT 49
10447: PUSH
10448: LD_INT 50
10450: PUSH
10451: LD_INT 51
10453: PUSH
10454: LD_INT 52
10456: PUSH
10457: LD_INT 53
10459: PUSH
10460: LD_INT 54
10462: PUSH
10463: LD_INT 55
10465: PUSH
10466: LD_INT 56
10468: PUSH
10469: LD_INT 57
10471: PUSH
10472: LD_INT 58
10474: PUSH
10475: LD_INT 59
10477: PUSH
10478: LD_INT 63
10480: PUSH
10481: LD_INT 64
10483: PUSH
10484: LD_INT 65
10486: PUSH
10487: LD_INT 82
10489: PUSH
10490: LD_INT 83
10492: PUSH
10493: LD_INT 84
10495: PUSH
10496: LD_INT 85
10498: PUSH
10499: LD_INT 86
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: ST_TO_ADDR
10557: GO 10560
10559: POP
// if state > - 1 and state < 3 then
10560: LD_VAR 0 3
10564: PUSH
10565: LD_INT 1
10567: NEG
10568: GREATER
10569: PUSH
10570: LD_VAR 0 3
10574: PUSH
10575: LD_INT 3
10577: LESS
10578: AND
10579: IFFALSE 10636
// for i in result do
10581: LD_ADDR_VAR 0 5
10585: PUSH
10586: LD_VAR 0 4
10590: PUSH
10591: FOR_IN
10592: IFFALSE 10634
// if GetTech ( i , side ) <> state then
10594: LD_VAR 0 5
10598: PPUSH
10599: LD_VAR 0 1
10603: PPUSH
10604: CALL_OW 321
10608: PUSH
10609: LD_VAR 0 3
10613: NONEQUAL
10614: IFFALSE 10632
// result := result diff i ;
10616: LD_ADDR_VAR 0 4
10620: PUSH
10621: LD_VAR 0 4
10625: PUSH
10626: LD_VAR 0 5
10630: DIFF
10631: ST_TO_ADDR
10632: GO 10591
10634: POP
10635: POP
// end ;
10636: LD_VAR 0 4
10640: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10641: LD_INT 0
10643: PPUSH
10644: PPUSH
10645: PPUSH
// result := true ;
10646: LD_ADDR_VAR 0 3
10650: PUSH
10651: LD_INT 1
10653: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10654: LD_ADDR_VAR 0 5
10658: PUSH
10659: LD_VAR 0 2
10663: PPUSH
10664: CALL_OW 480
10668: ST_TO_ADDR
// if not tmp then
10669: LD_VAR 0 5
10673: NOT
10674: IFFALSE 10678
// exit ;
10676: GO 10727
// for i in tmp do
10678: LD_ADDR_VAR 0 4
10682: PUSH
10683: LD_VAR 0 5
10687: PUSH
10688: FOR_IN
10689: IFFALSE 10725
// if GetTech ( i , side ) <> state_researched then
10691: LD_VAR 0 4
10695: PPUSH
10696: LD_VAR 0 1
10700: PPUSH
10701: CALL_OW 321
10705: PUSH
10706: LD_INT 2
10708: NONEQUAL
10709: IFFALSE 10723
// begin result := false ;
10711: LD_ADDR_VAR 0 3
10715: PUSH
10716: LD_INT 0
10718: ST_TO_ADDR
// exit ;
10719: POP
10720: POP
10721: GO 10727
// end ;
10723: GO 10688
10725: POP
10726: POP
// end ;
10727: LD_VAR 0 3
10731: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
10732: LD_INT 0
10734: PPUSH
10735: PPUSH
10736: PPUSH
10737: PPUSH
10738: PPUSH
10739: PPUSH
10740: PPUSH
10741: PPUSH
10742: PPUSH
10743: PPUSH
10744: PPUSH
10745: PPUSH
10746: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
10747: LD_VAR 0 1
10751: NOT
10752: PUSH
10753: LD_VAR 0 1
10757: PPUSH
10758: CALL_OW 257
10762: PUSH
10763: LD_INT 9
10765: NONEQUAL
10766: OR
10767: IFFALSE 10771
// exit ;
10769: GO 11344
// side := GetSide ( unit ) ;
10771: LD_ADDR_VAR 0 9
10775: PUSH
10776: LD_VAR 0 1
10780: PPUSH
10781: CALL_OW 255
10785: ST_TO_ADDR
// tech_space := tech_spacanom ;
10786: LD_ADDR_VAR 0 12
10790: PUSH
10791: LD_INT 29
10793: ST_TO_ADDR
// tech_time := tech_taurad ;
10794: LD_ADDR_VAR 0 13
10798: PUSH
10799: LD_INT 28
10801: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
10802: LD_ADDR_VAR 0 11
10806: PUSH
10807: LD_VAR 0 1
10811: PPUSH
10812: CALL_OW 310
10816: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
10817: LD_VAR 0 11
10821: PPUSH
10822: CALL_OW 247
10826: PUSH
10827: LD_INT 2
10829: EQUAL
10830: IFFALSE 10834
// exit ;
10832: GO 11344
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10834: LD_ADDR_VAR 0 8
10838: PUSH
10839: LD_INT 81
10841: PUSH
10842: LD_VAR 0 9
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: PUSH
10851: LD_INT 3
10853: PUSH
10854: LD_INT 21
10856: PUSH
10857: LD_INT 3
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: PUSH
10868: EMPTY
10869: LIST
10870: LIST
10871: PPUSH
10872: CALL_OW 69
10876: ST_TO_ADDR
// if not tmp then
10877: LD_VAR 0 8
10881: NOT
10882: IFFALSE 10886
// exit ;
10884: GO 11344
// if in_unit then
10886: LD_VAR 0 11
10890: IFFALSE 10914
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
10892: LD_ADDR_VAR 0 10
10896: PUSH
10897: LD_VAR 0 8
10901: PPUSH
10902: LD_VAR 0 11
10906: PPUSH
10907: CALL_OW 74
10911: ST_TO_ADDR
10912: GO 10934
// enemy := NearestUnitToUnit ( tmp , unit ) ;
10914: LD_ADDR_VAR 0 10
10918: PUSH
10919: LD_VAR 0 8
10923: PPUSH
10924: LD_VAR 0 1
10928: PPUSH
10929: CALL_OW 74
10933: ST_TO_ADDR
// if not enemy then
10934: LD_VAR 0 10
10938: NOT
10939: IFFALSE 10943
// exit ;
10941: GO 11344
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
10943: LD_VAR 0 11
10947: PUSH
10948: LD_VAR 0 11
10952: PPUSH
10953: LD_VAR 0 10
10957: PPUSH
10958: CALL_OW 296
10962: PUSH
10963: LD_INT 13
10965: GREATER
10966: AND
10967: PUSH
10968: LD_VAR 0 1
10972: PPUSH
10973: LD_VAR 0 10
10977: PPUSH
10978: CALL_OW 296
10982: PUSH
10983: LD_INT 12
10985: GREATER
10986: OR
10987: IFFALSE 10991
// exit ;
10989: GO 11344
// missile := [ 1 ] ;
10991: LD_ADDR_VAR 0 14
10995: PUSH
10996: LD_INT 1
10998: PUSH
10999: EMPTY
11000: LIST
11001: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11002: LD_VAR 0 9
11006: PPUSH
11007: LD_VAR 0 12
11011: PPUSH
11012: CALL_OW 325
11016: IFFALSE 11045
// missile := Insert ( missile , missile + 1 , 2 ) ;
11018: LD_ADDR_VAR 0 14
11022: PUSH
11023: LD_VAR 0 14
11027: PPUSH
11028: LD_VAR 0 14
11032: PUSH
11033: LD_INT 1
11035: PLUS
11036: PPUSH
11037: LD_INT 2
11039: PPUSH
11040: CALL_OW 2
11044: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11045: LD_VAR 0 9
11049: PPUSH
11050: LD_VAR 0 13
11054: PPUSH
11055: CALL_OW 325
11059: PUSH
11060: LD_VAR 0 10
11064: PPUSH
11065: CALL_OW 255
11069: PPUSH
11070: LD_VAR 0 13
11074: PPUSH
11075: CALL_OW 325
11079: NOT
11080: AND
11081: IFFALSE 11110
// missile := Insert ( missile , missile + 1 , 3 ) ;
11083: LD_ADDR_VAR 0 14
11087: PUSH
11088: LD_VAR 0 14
11092: PPUSH
11093: LD_VAR 0 14
11097: PUSH
11098: LD_INT 1
11100: PLUS
11101: PPUSH
11102: LD_INT 3
11104: PPUSH
11105: CALL_OW 2
11109: ST_TO_ADDR
// if missile < 2 then
11110: LD_VAR 0 14
11114: PUSH
11115: LD_INT 2
11117: LESS
11118: IFFALSE 11122
// exit ;
11120: GO 11344
// x := GetX ( enemy ) ;
11122: LD_ADDR_VAR 0 4
11126: PUSH
11127: LD_VAR 0 10
11131: PPUSH
11132: CALL_OW 250
11136: ST_TO_ADDR
// y := GetY ( enemy ) ;
11137: LD_ADDR_VAR 0 5
11141: PUSH
11142: LD_VAR 0 10
11146: PPUSH
11147: CALL_OW 251
11151: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11152: LD_ADDR_VAR 0 6
11156: PUSH
11157: LD_VAR 0 4
11161: PUSH
11162: LD_INT 1
11164: NEG
11165: PPUSH
11166: LD_INT 1
11168: PPUSH
11169: CALL_OW 12
11173: PLUS
11174: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11175: LD_ADDR_VAR 0 7
11179: PUSH
11180: LD_VAR 0 5
11184: PUSH
11185: LD_INT 1
11187: NEG
11188: PPUSH
11189: LD_INT 1
11191: PPUSH
11192: CALL_OW 12
11196: PLUS
11197: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11198: LD_VAR 0 6
11202: PPUSH
11203: LD_VAR 0 7
11207: PPUSH
11208: CALL_OW 488
11212: NOT
11213: IFFALSE 11235
// begin _x := x ;
11215: LD_ADDR_VAR 0 6
11219: PUSH
11220: LD_VAR 0 4
11224: ST_TO_ADDR
// _y := y ;
11225: LD_ADDR_VAR 0 7
11229: PUSH
11230: LD_VAR 0 5
11234: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11235: LD_ADDR_VAR 0 3
11239: PUSH
11240: LD_INT 1
11242: PPUSH
11243: LD_VAR 0 14
11247: PPUSH
11248: CALL_OW 12
11252: ST_TO_ADDR
// case i of 1 :
11253: LD_VAR 0 3
11257: PUSH
11258: LD_INT 1
11260: DOUBLE
11261: EQUAL
11262: IFTRUE 11266
11264: GO 11283
11266: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11267: LD_VAR 0 1
11271: PPUSH
11272: LD_VAR 0 10
11276: PPUSH
11277: CALL_OW 115
11281: GO 11344
11283: LD_INT 2
11285: DOUBLE
11286: EQUAL
11287: IFTRUE 11291
11289: GO 11313
11291: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11292: LD_VAR 0 1
11296: PPUSH
11297: LD_VAR 0 6
11301: PPUSH
11302: LD_VAR 0 7
11306: PPUSH
11307: CALL_OW 153
11311: GO 11344
11313: LD_INT 3
11315: DOUBLE
11316: EQUAL
11317: IFTRUE 11321
11319: GO 11343
11321: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11322: LD_VAR 0 1
11326: PPUSH
11327: LD_VAR 0 6
11331: PPUSH
11332: LD_VAR 0 7
11336: PPUSH
11337: CALL_OW 154
11341: GO 11344
11343: POP
// end ;
11344: LD_VAR 0 2
11348: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11349: LD_INT 0
11351: PPUSH
11352: PPUSH
11353: PPUSH
11354: PPUSH
11355: PPUSH
11356: PPUSH
// if not unit or not building then
11357: LD_VAR 0 1
11361: NOT
11362: PUSH
11363: LD_VAR 0 2
11367: NOT
11368: OR
11369: IFFALSE 11373
// exit ;
11371: GO 11531
// x := GetX ( building ) ;
11373: LD_ADDR_VAR 0 5
11377: PUSH
11378: LD_VAR 0 2
11382: PPUSH
11383: CALL_OW 250
11387: ST_TO_ADDR
// y := GetY ( building ) ;
11388: LD_ADDR_VAR 0 6
11392: PUSH
11393: LD_VAR 0 2
11397: PPUSH
11398: CALL_OW 251
11402: ST_TO_ADDR
// for i = 0 to 5 do
11403: LD_ADDR_VAR 0 4
11407: PUSH
11408: DOUBLE
11409: LD_INT 0
11411: DEC
11412: ST_TO_ADDR
11413: LD_INT 5
11415: PUSH
11416: FOR_TO
11417: IFFALSE 11529
// begin _x := ShiftX ( x , i , 3 ) ;
11419: LD_ADDR_VAR 0 7
11423: PUSH
11424: LD_VAR 0 5
11428: PPUSH
11429: LD_VAR 0 4
11433: PPUSH
11434: LD_INT 3
11436: PPUSH
11437: CALL_OW 272
11441: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11442: LD_ADDR_VAR 0 8
11446: PUSH
11447: LD_VAR 0 6
11451: PPUSH
11452: LD_VAR 0 4
11456: PPUSH
11457: LD_INT 3
11459: PPUSH
11460: CALL_OW 273
11464: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11465: LD_VAR 0 7
11469: PPUSH
11470: LD_VAR 0 8
11474: PPUSH
11475: CALL_OW 488
11479: NOT
11480: IFFALSE 11484
// continue ;
11482: GO 11416
// if HexInfo ( _x , _y ) = 0 then
11484: LD_VAR 0 7
11488: PPUSH
11489: LD_VAR 0 8
11493: PPUSH
11494: CALL_OW 428
11498: PUSH
11499: LD_INT 0
11501: EQUAL
11502: IFFALSE 11527
// begin ComMoveXY ( unit , _x , _y ) ;
11504: LD_VAR 0 1
11508: PPUSH
11509: LD_VAR 0 7
11513: PPUSH
11514: LD_VAR 0 8
11518: PPUSH
11519: CALL_OW 111
// exit ;
11523: POP
11524: POP
11525: GO 11531
// end ; end ;
11527: GO 11416
11529: POP
11530: POP
// end ;
11531: LD_VAR 0 3
11535: RET
// export function ScanBase ( side , base_area ) ; begin
11536: LD_INT 0
11538: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11539: LD_ADDR_VAR 0 3
11543: PUSH
11544: LD_VAR 0 2
11548: PPUSH
11549: LD_INT 81
11551: PUSH
11552: LD_VAR 0 1
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: PPUSH
11561: CALL_OW 70
11565: ST_TO_ADDR
// end ;
11566: LD_VAR 0 3
11570: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11571: LD_INT 0
11573: PPUSH
11574: PPUSH
11575: PPUSH
11576: PPUSH
// result := false ;
11577: LD_ADDR_VAR 0 2
11581: PUSH
11582: LD_INT 0
11584: ST_TO_ADDR
// side := GetSide ( unit ) ;
11585: LD_ADDR_VAR 0 3
11589: PUSH
11590: LD_VAR 0 1
11594: PPUSH
11595: CALL_OW 255
11599: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11600: LD_ADDR_VAR 0 4
11604: PUSH
11605: LD_VAR 0 1
11609: PPUSH
11610: CALL_OW 248
11614: ST_TO_ADDR
// case nat of 1 :
11615: LD_VAR 0 4
11619: PUSH
11620: LD_INT 1
11622: DOUBLE
11623: EQUAL
11624: IFTRUE 11628
11626: GO 11639
11628: POP
// tech := tech_lassight ; 2 :
11629: LD_ADDR_VAR 0 5
11633: PUSH
11634: LD_INT 12
11636: ST_TO_ADDR
11637: GO 11678
11639: LD_INT 2
11641: DOUBLE
11642: EQUAL
11643: IFTRUE 11647
11645: GO 11658
11647: POP
// tech := tech_mortar ; 3 :
11648: LD_ADDR_VAR 0 5
11652: PUSH
11653: LD_INT 41
11655: ST_TO_ADDR
11656: GO 11678
11658: LD_INT 3
11660: DOUBLE
11661: EQUAL
11662: IFTRUE 11666
11664: GO 11677
11666: POP
// tech := tech_bazooka ; end ;
11667: LD_ADDR_VAR 0 5
11671: PUSH
11672: LD_INT 44
11674: ST_TO_ADDR
11675: GO 11678
11677: POP
// if Researched ( side , tech ) then
11678: LD_VAR 0 3
11682: PPUSH
11683: LD_VAR 0 5
11687: PPUSH
11688: CALL_OW 325
11692: IFFALSE 11719
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
11694: LD_ADDR_VAR 0 2
11698: PUSH
11699: LD_INT 5
11701: PUSH
11702: LD_INT 8
11704: PUSH
11705: LD_INT 9
11707: PUSH
11708: EMPTY
11709: LIST
11710: LIST
11711: LIST
11712: PUSH
11713: LD_VAR 0 4
11717: ARRAY
11718: ST_TO_ADDR
// end ;
11719: LD_VAR 0 2
11723: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
11724: LD_INT 0
11726: PPUSH
11727: PPUSH
11728: PPUSH
// if not mines then
11729: LD_VAR 0 2
11733: NOT
11734: IFFALSE 11738
// exit ;
11736: GO 11882
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11738: LD_ADDR_VAR 0 5
11742: PUSH
11743: LD_INT 81
11745: PUSH
11746: LD_VAR 0 1
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: PUSH
11755: LD_INT 3
11757: PUSH
11758: LD_INT 21
11760: PUSH
11761: LD_INT 3
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: PPUSH
11776: CALL_OW 69
11780: ST_TO_ADDR
// for i in mines do
11781: LD_ADDR_VAR 0 4
11785: PUSH
11786: LD_VAR 0 2
11790: PUSH
11791: FOR_IN
11792: IFFALSE 11880
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
11794: LD_VAR 0 4
11798: PUSH
11799: LD_INT 1
11801: ARRAY
11802: PPUSH
11803: LD_VAR 0 4
11807: PUSH
11808: LD_INT 2
11810: ARRAY
11811: PPUSH
11812: CALL_OW 458
11816: NOT
11817: IFFALSE 11821
// continue ;
11819: GO 11791
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
11821: LD_VAR 0 4
11825: PUSH
11826: LD_INT 1
11828: ARRAY
11829: PPUSH
11830: LD_VAR 0 4
11834: PUSH
11835: LD_INT 2
11837: ARRAY
11838: PPUSH
11839: CALL_OW 428
11843: PUSH
11844: LD_VAR 0 5
11848: IN
11849: IFFALSE 11878
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
11851: LD_VAR 0 4
11855: PUSH
11856: LD_INT 1
11858: ARRAY
11859: PPUSH
11860: LD_VAR 0 4
11864: PUSH
11865: LD_INT 2
11867: ARRAY
11868: PPUSH
11869: LD_VAR 0 1
11873: PPUSH
11874: CALL_OW 456
// end ;
11878: GO 11791
11880: POP
11881: POP
// end ;
11882: LD_VAR 0 3
11886: RET
// export function Count ( array ) ; var i ; begin
11887: LD_INT 0
11889: PPUSH
11890: PPUSH
// result := 0 ;
11891: LD_ADDR_VAR 0 2
11895: PUSH
11896: LD_INT 0
11898: ST_TO_ADDR
// for i in array do
11899: LD_ADDR_VAR 0 3
11903: PUSH
11904: LD_VAR 0 1
11908: PUSH
11909: FOR_IN
11910: IFFALSE 11934
// if i then
11912: LD_VAR 0 3
11916: IFFALSE 11932
// result := result + 1 ;
11918: LD_ADDR_VAR 0 2
11922: PUSH
11923: LD_VAR 0 2
11927: PUSH
11928: LD_INT 1
11930: PLUS
11931: ST_TO_ADDR
11932: GO 11909
11934: POP
11935: POP
// end ;
11936: LD_VAR 0 2
11940: RET
// export function IsEmpty ( building ) ; begin
11941: LD_INT 0
11943: PPUSH
// if not building then
11944: LD_VAR 0 1
11948: NOT
11949: IFFALSE 11953
// exit ;
11951: GO 11996
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
11953: LD_ADDR_VAR 0 2
11957: PUSH
11958: LD_VAR 0 1
11962: PUSH
11963: LD_INT 22
11965: PUSH
11966: LD_VAR 0 1
11970: PPUSH
11971: CALL_OW 255
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: PUSH
11980: LD_INT 58
11982: PUSH
11983: EMPTY
11984: LIST
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PPUSH
11990: CALL_OW 69
11994: IN
11995: ST_TO_ADDR
// end ;
11996: LD_VAR 0 2
12000: RET
// export function IsNotFull ( building ) ; begin
12001: LD_INT 0
12003: PPUSH
// if not building then
12004: LD_VAR 0 1
12008: NOT
12009: IFFALSE 12013
// exit ;
12011: GO 12032
// result := UnitsInside ( building ) < 6 ;
12013: LD_ADDR_VAR 0 2
12017: PUSH
12018: LD_VAR 0 1
12022: PPUSH
12023: CALL_OW 313
12027: PUSH
12028: LD_INT 6
12030: LESS
12031: ST_TO_ADDR
// end ;
12032: LD_VAR 0 2
12036: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12037: LD_INT 0
12039: PPUSH
12040: PPUSH
12041: PPUSH
12042: PPUSH
// tmp := [ ] ;
12043: LD_ADDR_VAR 0 3
12047: PUSH
12048: EMPTY
12049: ST_TO_ADDR
// list := [ ] ;
12050: LD_ADDR_VAR 0 5
12054: PUSH
12055: EMPTY
12056: ST_TO_ADDR
// for i = 16 to 25 do
12057: LD_ADDR_VAR 0 4
12061: PUSH
12062: DOUBLE
12063: LD_INT 16
12065: DEC
12066: ST_TO_ADDR
12067: LD_INT 25
12069: PUSH
12070: FOR_TO
12071: IFFALSE 12144
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12073: LD_ADDR_VAR 0 3
12077: PUSH
12078: LD_VAR 0 3
12082: PUSH
12083: LD_INT 22
12085: PUSH
12086: LD_VAR 0 1
12090: PPUSH
12091: CALL_OW 255
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PUSH
12100: LD_INT 91
12102: PUSH
12103: LD_VAR 0 1
12107: PUSH
12108: LD_INT 6
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: LIST
12115: PUSH
12116: LD_INT 30
12118: PUSH
12119: LD_VAR 0 4
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: LIST
12132: PUSH
12133: EMPTY
12134: LIST
12135: PPUSH
12136: CALL_OW 69
12140: ADD
12141: ST_TO_ADDR
12142: GO 12070
12144: POP
12145: POP
// for i = 1 to tmp do
12146: LD_ADDR_VAR 0 4
12150: PUSH
12151: DOUBLE
12152: LD_INT 1
12154: DEC
12155: ST_TO_ADDR
12156: LD_VAR 0 3
12160: PUSH
12161: FOR_TO
12162: IFFALSE 12250
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12164: LD_ADDR_VAR 0 5
12168: PUSH
12169: LD_VAR 0 5
12173: PUSH
12174: LD_VAR 0 3
12178: PUSH
12179: LD_VAR 0 4
12183: ARRAY
12184: PPUSH
12185: CALL_OW 266
12189: PUSH
12190: LD_VAR 0 3
12194: PUSH
12195: LD_VAR 0 4
12199: ARRAY
12200: PPUSH
12201: CALL_OW 250
12205: PUSH
12206: LD_VAR 0 3
12210: PUSH
12211: LD_VAR 0 4
12215: ARRAY
12216: PPUSH
12217: CALL_OW 251
12221: PUSH
12222: LD_VAR 0 3
12226: PUSH
12227: LD_VAR 0 4
12231: ARRAY
12232: PPUSH
12233: CALL_OW 254
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: PUSH
12244: EMPTY
12245: LIST
12246: ADD
12247: ST_TO_ADDR
12248: GO 12161
12250: POP
12251: POP
// result := list ;
12252: LD_ADDR_VAR 0 2
12256: PUSH
12257: LD_VAR 0 5
12261: ST_TO_ADDR
// end ;
12262: LD_VAR 0 2
12266: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12267: LD_INT 0
12269: PPUSH
12270: PPUSH
12271: PPUSH
12272: PPUSH
12273: PPUSH
12274: PPUSH
12275: PPUSH
// if not factory then
12276: LD_VAR 0 1
12280: NOT
12281: IFFALSE 12285
// exit ;
12283: GO 12878
// if control = control_apeman then
12285: LD_VAR 0 4
12289: PUSH
12290: LD_INT 5
12292: EQUAL
12293: IFFALSE 12402
// begin tmp := UnitsInside ( factory ) ;
12295: LD_ADDR_VAR 0 8
12299: PUSH
12300: LD_VAR 0 1
12304: PPUSH
12305: CALL_OW 313
12309: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12310: LD_VAR 0 8
12314: PPUSH
12315: LD_INT 25
12317: PUSH
12318: LD_INT 12
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: PPUSH
12325: CALL_OW 72
12329: NOT
12330: IFFALSE 12340
// control := control_manual ;
12332: LD_ADDR_VAR 0 4
12336: PUSH
12337: LD_INT 1
12339: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12340: LD_ADDR_VAR 0 8
12344: PUSH
12345: LD_VAR 0 1
12349: PPUSH
12350: CALL 12037 0 1
12354: ST_TO_ADDR
// if tmp then
12355: LD_VAR 0 8
12359: IFFALSE 12402
// begin for i in tmp do
12361: LD_ADDR_VAR 0 7
12365: PUSH
12366: LD_VAR 0 8
12370: PUSH
12371: FOR_IN
12372: IFFALSE 12400
// if i [ 1 ] = b_ext_radio then
12374: LD_VAR 0 7
12378: PUSH
12379: LD_INT 1
12381: ARRAY
12382: PUSH
12383: LD_INT 22
12385: EQUAL
12386: IFFALSE 12398
// begin control := control_remote ;
12388: LD_ADDR_VAR 0 4
12392: PUSH
12393: LD_INT 2
12395: ST_TO_ADDR
// break ;
12396: GO 12400
// end ;
12398: GO 12371
12400: POP
12401: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12402: LD_VAR 0 1
12406: PPUSH
12407: LD_VAR 0 2
12411: PPUSH
12412: LD_VAR 0 3
12416: PPUSH
12417: LD_VAR 0 4
12421: PPUSH
12422: LD_VAR 0 5
12426: PPUSH
12427: CALL_OW 448
12431: IFFALSE 12466
// begin result := [ chassis , engine , control , weapon ] ;
12433: LD_ADDR_VAR 0 6
12437: PUSH
12438: LD_VAR 0 2
12442: PUSH
12443: LD_VAR 0 3
12447: PUSH
12448: LD_VAR 0 4
12452: PUSH
12453: LD_VAR 0 5
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: ST_TO_ADDR
// exit ;
12464: GO 12878
// end ; _chassis := AvailableChassisList ( factory ) ;
12466: LD_ADDR_VAR 0 9
12470: PUSH
12471: LD_VAR 0 1
12475: PPUSH
12476: CALL_OW 475
12480: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12481: LD_ADDR_VAR 0 11
12485: PUSH
12486: LD_VAR 0 1
12490: PPUSH
12491: CALL_OW 476
12495: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12496: LD_ADDR_VAR 0 12
12500: PUSH
12501: LD_VAR 0 1
12505: PPUSH
12506: CALL_OW 477
12510: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12511: LD_ADDR_VAR 0 10
12515: PUSH
12516: LD_VAR 0 1
12520: PPUSH
12521: CALL_OW 478
12525: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12526: LD_VAR 0 9
12530: NOT
12531: PUSH
12532: LD_VAR 0 11
12536: NOT
12537: OR
12538: PUSH
12539: LD_VAR 0 12
12543: NOT
12544: OR
12545: PUSH
12546: LD_VAR 0 10
12550: NOT
12551: OR
12552: IFFALSE 12587
// begin result := [ chassis , engine , control , weapon ] ;
12554: LD_ADDR_VAR 0 6
12558: PUSH
12559: LD_VAR 0 2
12563: PUSH
12564: LD_VAR 0 3
12568: PUSH
12569: LD_VAR 0 4
12573: PUSH
12574: LD_VAR 0 5
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: ST_TO_ADDR
// exit ;
12585: GO 12878
// end ; if not chassis in _chassis then
12587: LD_VAR 0 2
12591: PUSH
12592: LD_VAR 0 9
12596: IN
12597: NOT
12598: IFFALSE 12624
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
12600: LD_ADDR_VAR 0 2
12604: PUSH
12605: LD_VAR 0 9
12609: PUSH
12610: LD_INT 1
12612: PPUSH
12613: LD_VAR 0 9
12617: PPUSH
12618: CALL_OW 12
12622: ARRAY
12623: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
12624: LD_VAR 0 2
12628: PPUSH
12629: LD_VAR 0 3
12633: PPUSH
12634: CALL 12883 0 2
12638: NOT
12639: IFFALSE 12698
// repeat engine := _engine [ 1 ] ;
12641: LD_ADDR_VAR 0 3
12645: PUSH
12646: LD_VAR 0 11
12650: PUSH
12651: LD_INT 1
12653: ARRAY
12654: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
12655: LD_ADDR_VAR 0 11
12659: PUSH
12660: LD_VAR 0 11
12664: PPUSH
12665: LD_INT 1
12667: PPUSH
12668: CALL_OW 3
12672: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
12673: LD_VAR 0 2
12677: PPUSH
12678: LD_VAR 0 3
12682: PPUSH
12683: CALL 12883 0 2
12687: PUSH
12688: LD_VAR 0 11
12692: PUSH
12693: EMPTY
12694: EQUAL
12695: OR
12696: IFFALSE 12641
// if not control in _control then
12698: LD_VAR 0 4
12702: PUSH
12703: LD_VAR 0 12
12707: IN
12708: NOT
12709: IFFALSE 12735
// control := _control [ rand ( 1 , _control ) ] ;
12711: LD_ADDR_VAR 0 4
12715: PUSH
12716: LD_VAR 0 12
12720: PUSH
12721: LD_INT 1
12723: PPUSH
12724: LD_VAR 0 12
12728: PPUSH
12729: CALL_OW 12
12733: ARRAY
12734: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
12735: LD_VAR 0 2
12739: PPUSH
12740: LD_VAR 0 5
12744: PPUSH
12745: CALL 13103 0 2
12749: NOT
12750: IFFALSE 12809
// repeat weapon := _weapon [ 1 ] ;
12752: LD_ADDR_VAR 0 5
12756: PUSH
12757: LD_VAR 0 10
12761: PUSH
12762: LD_INT 1
12764: ARRAY
12765: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
12766: LD_ADDR_VAR 0 10
12770: PUSH
12771: LD_VAR 0 10
12775: PPUSH
12776: LD_INT 1
12778: PPUSH
12779: CALL_OW 3
12783: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
12784: LD_VAR 0 2
12788: PPUSH
12789: LD_VAR 0 5
12793: PPUSH
12794: CALL 13103 0 2
12798: PUSH
12799: LD_VAR 0 10
12803: PUSH
12804: EMPTY
12805: EQUAL
12806: OR
12807: IFFALSE 12752
// result := [ ] ;
12809: LD_ADDR_VAR 0 6
12813: PUSH
12814: EMPTY
12815: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12816: LD_VAR 0 1
12820: PPUSH
12821: LD_VAR 0 2
12825: PPUSH
12826: LD_VAR 0 3
12830: PPUSH
12831: LD_VAR 0 4
12835: PPUSH
12836: LD_VAR 0 5
12840: PPUSH
12841: CALL_OW 448
12845: IFFALSE 12878
// result := [ chassis , engine , control , weapon ] ;
12847: LD_ADDR_VAR 0 6
12851: PUSH
12852: LD_VAR 0 2
12856: PUSH
12857: LD_VAR 0 3
12861: PUSH
12862: LD_VAR 0 4
12866: PUSH
12867: LD_VAR 0 5
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: ST_TO_ADDR
// end ;
12878: LD_VAR 0 6
12882: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
12883: LD_INT 0
12885: PPUSH
// if not chassis or not engine then
12886: LD_VAR 0 1
12890: NOT
12891: PUSH
12892: LD_VAR 0 2
12896: NOT
12897: OR
12898: IFFALSE 12902
// exit ;
12900: GO 13098
// case engine of engine_solar :
12902: LD_VAR 0 2
12906: PUSH
12907: LD_INT 2
12909: DOUBLE
12910: EQUAL
12911: IFTRUE 12915
12913: GO 12953
12915: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
12916: LD_ADDR_VAR 0 3
12920: PUSH
12921: LD_INT 11
12923: PUSH
12924: LD_INT 12
12926: PUSH
12927: LD_INT 13
12929: PUSH
12930: LD_INT 14
12932: PUSH
12933: LD_INT 1
12935: PUSH
12936: LD_INT 2
12938: PUSH
12939: LD_INT 3
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: ST_TO_ADDR
12951: GO 13082
12953: LD_INT 1
12955: DOUBLE
12956: EQUAL
12957: IFTRUE 12961
12959: GO 13023
12961: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
12962: LD_ADDR_VAR 0 3
12966: PUSH
12967: LD_INT 11
12969: PUSH
12970: LD_INT 12
12972: PUSH
12973: LD_INT 13
12975: PUSH
12976: LD_INT 14
12978: PUSH
12979: LD_INT 1
12981: PUSH
12982: LD_INT 2
12984: PUSH
12985: LD_INT 3
12987: PUSH
12988: LD_INT 4
12990: PUSH
12991: LD_INT 5
12993: PUSH
12994: LD_INT 21
12996: PUSH
12997: LD_INT 23
12999: PUSH
13000: LD_INT 22
13002: PUSH
13003: LD_INT 24
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: ST_TO_ADDR
13021: GO 13082
13023: LD_INT 3
13025: DOUBLE
13026: EQUAL
13027: IFTRUE 13031
13029: GO 13081
13031: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13032: LD_ADDR_VAR 0 3
13036: PUSH
13037: LD_INT 13
13039: PUSH
13040: LD_INT 14
13042: PUSH
13043: LD_INT 2
13045: PUSH
13046: LD_INT 3
13048: PUSH
13049: LD_INT 4
13051: PUSH
13052: LD_INT 5
13054: PUSH
13055: LD_INT 21
13057: PUSH
13058: LD_INT 22
13060: PUSH
13061: LD_INT 23
13063: PUSH
13064: LD_INT 24
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: ST_TO_ADDR
13079: GO 13082
13081: POP
// result := ( chassis in result ) ;
13082: LD_ADDR_VAR 0 3
13086: PUSH
13087: LD_VAR 0 1
13091: PUSH
13092: LD_VAR 0 3
13096: IN
13097: ST_TO_ADDR
// end ;
13098: LD_VAR 0 3
13102: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13103: LD_INT 0
13105: PPUSH
// if not chassis or not weapon then
13106: LD_VAR 0 1
13110: NOT
13111: PUSH
13112: LD_VAR 0 2
13116: NOT
13117: OR
13118: IFFALSE 13122
// exit ;
13120: GO 14184
// case weapon of us_machine_gun :
13122: LD_VAR 0 2
13126: PUSH
13127: LD_INT 2
13129: DOUBLE
13130: EQUAL
13131: IFTRUE 13135
13133: GO 13165
13135: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13136: LD_ADDR_VAR 0 3
13140: PUSH
13141: LD_INT 1
13143: PUSH
13144: LD_INT 2
13146: PUSH
13147: LD_INT 3
13149: PUSH
13150: LD_INT 4
13152: PUSH
13153: LD_INT 5
13155: PUSH
13156: EMPTY
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: ST_TO_ADDR
13163: GO 14168
13165: LD_INT 3
13167: DOUBLE
13168: EQUAL
13169: IFTRUE 13173
13171: GO 13203
13173: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13174: LD_ADDR_VAR 0 3
13178: PUSH
13179: LD_INT 1
13181: PUSH
13182: LD_INT 2
13184: PUSH
13185: LD_INT 3
13187: PUSH
13188: LD_INT 4
13190: PUSH
13191: LD_INT 5
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: ST_TO_ADDR
13201: GO 14168
13203: LD_INT 11
13205: DOUBLE
13206: EQUAL
13207: IFTRUE 13211
13209: GO 13241
13211: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13212: LD_ADDR_VAR 0 3
13216: PUSH
13217: LD_INT 1
13219: PUSH
13220: LD_INT 2
13222: PUSH
13223: LD_INT 3
13225: PUSH
13226: LD_INT 4
13228: PUSH
13229: LD_INT 5
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: ST_TO_ADDR
13239: GO 14168
13241: LD_INT 4
13243: DOUBLE
13244: EQUAL
13245: IFTRUE 13249
13247: GO 13275
13249: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13250: LD_ADDR_VAR 0 3
13254: PUSH
13255: LD_INT 2
13257: PUSH
13258: LD_INT 3
13260: PUSH
13261: LD_INT 4
13263: PUSH
13264: LD_INT 5
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: ST_TO_ADDR
13273: GO 14168
13275: LD_INT 5
13277: DOUBLE
13278: EQUAL
13279: IFTRUE 13283
13281: GO 13309
13283: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13284: LD_ADDR_VAR 0 3
13288: PUSH
13289: LD_INT 2
13291: PUSH
13292: LD_INT 3
13294: PUSH
13295: LD_INT 4
13297: PUSH
13298: LD_INT 5
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: ST_TO_ADDR
13307: GO 14168
13309: LD_INT 9
13311: DOUBLE
13312: EQUAL
13313: IFTRUE 13317
13315: GO 13343
13317: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13318: LD_ADDR_VAR 0 3
13322: PUSH
13323: LD_INT 2
13325: PUSH
13326: LD_INT 3
13328: PUSH
13329: LD_INT 4
13331: PUSH
13332: LD_INT 5
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: ST_TO_ADDR
13341: GO 14168
13343: LD_INT 7
13345: DOUBLE
13346: EQUAL
13347: IFTRUE 13351
13349: GO 13377
13351: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13352: LD_ADDR_VAR 0 3
13356: PUSH
13357: LD_INT 2
13359: PUSH
13360: LD_INT 3
13362: PUSH
13363: LD_INT 4
13365: PUSH
13366: LD_INT 5
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: ST_TO_ADDR
13375: GO 14168
13377: LD_INT 12
13379: DOUBLE
13380: EQUAL
13381: IFTRUE 13385
13383: GO 13411
13385: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
13386: LD_ADDR_VAR 0 3
13390: PUSH
13391: LD_INT 2
13393: PUSH
13394: LD_INT 3
13396: PUSH
13397: LD_INT 4
13399: PUSH
13400: LD_INT 5
13402: PUSH
13403: EMPTY
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: ST_TO_ADDR
13409: GO 14168
13411: LD_INT 13
13413: DOUBLE
13414: EQUAL
13415: IFTRUE 13419
13417: GO 13445
13419: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
13420: LD_ADDR_VAR 0 3
13424: PUSH
13425: LD_INT 2
13427: PUSH
13428: LD_INT 3
13430: PUSH
13431: LD_INT 4
13433: PUSH
13434: LD_INT 5
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: ST_TO_ADDR
13443: GO 14168
13445: LD_INT 14
13447: DOUBLE
13448: EQUAL
13449: IFTRUE 13453
13451: GO 13471
13453: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13454: LD_ADDR_VAR 0 3
13458: PUSH
13459: LD_INT 4
13461: PUSH
13462: LD_INT 5
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: ST_TO_ADDR
13469: GO 14168
13471: LD_INT 6
13473: DOUBLE
13474: EQUAL
13475: IFTRUE 13479
13477: GO 13497
13479: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13480: LD_ADDR_VAR 0 3
13484: PUSH
13485: LD_INT 4
13487: PUSH
13488: LD_INT 5
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: ST_TO_ADDR
13495: GO 14168
13497: LD_INT 10
13499: DOUBLE
13500: EQUAL
13501: IFTRUE 13505
13503: GO 13523
13505: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13506: LD_ADDR_VAR 0 3
13510: PUSH
13511: LD_INT 4
13513: PUSH
13514: LD_INT 5
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: ST_TO_ADDR
13521: GO 14168
13523: LD_INT 22
13525: DOUBLE
13526: EQUAL
13527: IFTRUE 13531
13529: GO 13557
13531: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13532: LD_ADDR_VAR 0 3
13536: PUSH
13537: LD_INT 11
13539: PUSH
13540: LD_INT 12
13542: PUSH
13543: LD_INT 13
13545: PUSH
13546: LD_INT 14
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: ST_TO_ADDR
13555: GO 14168
13557: LD_INT 23
13559: DOUBLE
13560: EQUAL
13561: IFTRUE 13565
13563: GO 13591
13565: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13566: LD_ADDR_VAR 0 3
13570: PUSH
13571: LD_INT 11
13573: PUSH
13574: LD_INT 12
13576: PUSH
13577: LD_INT 13
13579: PUSH
13580: LD_INT 14
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: ST_TO_ADDR
13589: GO 14168
13591: LD_INT 24
13593: DOUBLE
13594: EQUAL
13595: IFTRUE 13599
13597: GO 13625
13599: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
13600: LD_ADDR_VAR 0 3
13604: PUSH
13605: LD_INT 11
13607: PUSH
13608: LD_INT 12
13610: PUSH
13611: LD_INT 13
13613: PUSH
13614: LD_INT 14
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: ST_TO_ADDR
13623: GO 14168
13625: LD_INT 30
13627: DOUBLE
13628: EQUAL
13629: IFTRUE 13633
13631: GO 13659
13633: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
13634: LD_ADDR_VAR 0 3
13638: PUSH
13639: LD_INT 11
13641: PUSH
13642: LD_INT 12
13644: PUSH
13645: LD_INT 13
13647: PUSH
13648: LD_INT 14
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: ST_TO_ADDR
13657: GO 14168
13659: LD_INT 25
13661: DOUBLE
13662: EQUAL
13663: IFTRUE 13667
13665: GO 13685
13667: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
13668: LD_ADDR_VAR 0 3
13672: PUSH
13673: LD_INT 13
13675: PUSH
13676: LD_INT 14
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: ST_TO_ADDR
13683: GO 14168
13685: LD_INT 27
13687: DOUBLE
13688: EQUAL
13689: IFTRUE 13693
13691: GO 13711
13693: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
13694: LD_ADDR_VAR 0 3
13698: PUSH
13699: LD_INT 13
13701: PUSH
13702: LD_INT 14
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: ST_TO_ADDR
13709: GO 14168
13711: LD_EXP 100
13715: DOUBLE
13716: EQUAL
13717: IFTRUE 13721
13719: GO 13747
13721: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
13722: LD_ADDR_VAR 0 3
13726: PUSH
13727: LD_INT 11
13729: PUSH
13730: LD_INT 12
13732: PUSH
13733: LD_INT 13
13735: PUSH
13736: LD_INT 14
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: ST_TO_ADDR
13745: GO 14168
13747: LD_INT 28
13749: DOUBLE
13750: EQUAL
13751: IFTRUE 13755
13753: GO 13773
13755: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
13756: LD_ADDR_VAR 0 3
13760: PUSH
13761: LD_INT 13
13763: PUSH
13764: LD_INT 14
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: ST_TO_ADDR
13771: GO 14168
13773: LD_INT 29
13775: DOUBLE
13776: EQUAL
13777: IFTRUE 13781
13779: GO 13799
13781: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
13782: LD_ADDR_VAR 0 3
13786: PUSH
13787: LD_INT 13
13789: PUSH
13790: LD_INT 14
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: ST_TO_ADDR
13797: GO 14168
13799: LD_INT 31
13801: DOUBLE
13802: EQUAL
13803: IFTRUE 13807
13805: GO 13825
13807: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
13808: LD_ADDR_VAR 0 3
13812: PUSH
13813: LD_INT 13
13815: PUSH
13816: LD_INT 14
13818: PUSH
13819: EMPTY
13820: LIST
13821: LIST
13822: ST_TO_ADDR
13823: GO 14168
13825: LD_INT 26
13827: DOUBLE
13828: EQUAL
13829: IFTRUE 13833
13831: GO 13851
13833: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
13834: LD_ADDR_VAR 0 3
13838: PUSH
13839: LD_INT 13
13841: PUSH
13842: LD_INT 14
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: ST_TO_ADDR
13849: GO 14168
13851: LD_INT 42
13853: DOUBLE
13854: EQUAL
13855: IFTRUE 13859
13857: GO 13885
13859: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
13860: LD_ADDR_VAR 0 3
13864: PUSH
13865: LD_INT 21
13867: PUSH
13868: LD_INT 22
13870: PUSH
13871: LD_INT 23
13873: PUSH
13874: LD_INT 24
13876: PUSH
13877: EMPTY
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: ST_TO_ADDR
13883: GO 14168
13885: LD_INT 43
13887: DOUBLE
13888: EQUAL
13889: IFTRUE 13893
13891: GO 13919
13893: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
13894: LD_ADDR_VAR 0 3
13898: PUSH
13899: LD_INT 21
13901: PUSH
13902: LD_INT 22
13904: PUSH
13905: LD_INT 23
13907: PUSH
13908: LD_INT 24
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: ST_TO_ADDR
13917: GO 14168
13919: LD_INT 44
13921: DOUBLE
13922: EQUAL
13923: IFTRUE 13927
13925: GO 13953
13927: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
13928: LD_ADDR_VAR 0 3
13932: PUSH
13933: LD_INT 21
13935: PUSH
13936: LD_INT 22
13938: PUSH
13939: LD_INT 23
13941: PUSH
13942: LD_INT 24
13944: PUSH
13945: EMPTY
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: ST_TO_ADDR
13951: GO 14168
13953: LD_INT 45
13955: DOUBLE
13956: EQUAL
13957: IFTRUE 13961
13959: GO 13987
13961: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
13962: LD_ADDR_VAR 0 3
13966: PUSH
13967: LD_INT 21
13969: PUSH
13970: LD_INT 22
13972: PUSH
13973: LD_INT 23
13975: PUSH
13976: LD_INT 24
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: ST_TO_ADDR
13985: GO 14168
13987: LD_INT 49
13989: DOUBLE
13990: EQUAL
13991: IFTRUE 13995
13993: GO 14021
13995: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
13996: LD_ADDR_VAR 0 3
14000: PUSH
14001: LD_INT 21
14003: PUSH
14004: LD_INT 22
14006: PUSH
14007: LD_INT 23
14009: PUSH
14010: LD_INT 24
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: ST_TO_ADDR
14019: GO 14168
14021: LD_INT 51
14023: DOUBLE
14024: EQUAL
14025: IFTRUE 14029
14027: GO 14055
14029: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14030: LD_ADDR_VAR 0 3
14034: PUSH
14035: LD_INT 21
14037: PUSH
14038: LD_INT 22
14040: PUSH
14041: LD_INT 23
14043: PUSH
14044: LD_INT 24
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: ST_TO_ADDR
14053: GO 14168
14055: LD_INT 52
14057: DOUBLE
14058: EQUAL
14059: IFTRUE 14063
14061: GO 14089
14063: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14064: LD_ADDR_VAR 0 3
14068: PUSH
14069: LD_INT 21
14071: PUSH
14072: LD_INT 22
14074: PUSH
14075: LD_INT 23
14077: PUSH
14078: LD_INT 24
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: ST_TO_ADDR
14087: GO 14168
14089: LD_INT 53
14091: DOUBLE
14092: EQUAL
14093: IFTRUE 14097
14095: GO 14115
14097: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14098: LD_ADDR_VAR 0 3
14102: PUSH
14103: LD_INT 23
14105: PUSH
14106: LD_INT 24
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: ST_TO_ADDR
14113: GO 14168
14115: LD_INT 46
14117: DOUBLE
14118: EQUAL
14119: IFTRUE 14123
14121: GO 14141
14123: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14124: LD_ADDR_VAR 0 3
14128: PUSH
14129: LD_INT 23
14131: PUSH
14132: LD_INT 24
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: ST_TO_ADDR
14139: GO 14168
14141: LD_INT 47
14143: DOUBLE
14144: EQUAL
14145: IFTRUE 14149
14147: GO 14167
14149: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14150: LD_ADDR_VAR 0 3
14154: PUSH
14155: LD_INT 23
14157: PUSH
14158: LD_INT 24
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: ST_TO_ADDR
14165: GO 14168
14167: POP
// result := ( chassis in result ) ;
14168: LD_ADDR_VAR 0 3
14172: PUSH
14173: LD_VAR 0 1
14177: PUSH
14178: LD_VAR 0 3
14182: IN
14183: ST_TO_ADDR
// end ;
14184: LD_VAR 0 3
14188: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14189: LD_INT 0
14191: PPUSH
14192: PPUSH
14193: PPUSH
14194: PPUSH
14195: PPUSH
14196: PPUSH
14197: PPUSH
// result := array ;
14198: LD_ADDR_VAR 0 5
14202: PUSH
14203: LD_VAR 0 1
14207: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14208: LD_VAR 0 1
14212: NOT
14213: PUSH
14214: LD_VAR 0 2
14218: NOT
14219: OR
14220: PUSH
14221: LD_VAR 0 3
14225: NOT
14226: OR
14227: PUSH
14228: LD_VAR 0 2
14232: PUSH
14233: LD_VAR 0 1
14237: GREATER
14238: OR
14239: PUSH
14240: LD_VAR 0 3
14244: PUSH
14245: LD_VAR 0 1
14249: GREATER
14250: OR
14251: IFFALSE 14255
// exit ;
14253: GO 14551
// if direction then
14255: LD_VAR 0 4
14259: IFFALSE 14323
// begin d := 1 ;
14261: LD_ADDR_VAR 0 9
14265: PUSH
14266: LD_INT 1
14268: ST_TO_ADDR
// if i_from > i_to then
14269: LD_VAR 0 2
14273: PUSH
14274: LD_VAR 0 3
14278: GREATER
14279: IFFALSE 14305
// length := ( array - i_from ) + i_to else
14281: LD_ADDR_VAR 0 11
14285: PUSH
14286: LD_VAR 0 1
14290: PUSH
14291: LD_VAR 0 2
14295: MINUS
14296: PUSH
14297: LD_VAR 0 3
14301: PLUS
14302: ST_TO_ADDR
14303: GO 14321
// length := i_to - i_from ;
14305: LD_ADDR_VAR 0 11
14309: PUSH
14310: LD_VAR 0 3
14314: PUSH
14315: LD_VAR 0 2
14319: MINUS
14320: ST_TO_ADDR
// end else
14321: GO 14384
// begin d := - 1 ;
14323: LD_ADDR_VAR 0 9
14327: PUSH
14328: LD_INT 1
14330: NEG
14331: ST_TO_ADDR
// if i_from > i_to then
14332: LD_VAR 0 2
14336: PUSH
14337: LD_VAR 0 3
14341: GREATER
14342: IFFALSE 14362
// length := i_from - i_to else
14344: LD_ADDR_VAR 0 11
14348: PUSH
14349: LD_VAR 0 2
14353: PUSH
14354: LD_VAR 0 3
14358: MINUS
14359: ST_TO_ADDR
14360: GO 14384
// length := ( array - i_to ) + i_from ;
14362: LD_ADDR_VAR 0 11
14366: PUSH
14367: LD_VAR 0 1
14371: PUSH
14372: LD_VAR 0 3
14376: MINUS
14377: PUSH
14378: LD_VAR 0 2
14382: PLUS
14383: ST_TO_ADDR
// end ; if not length then
14384: LD_VAR 0 11
14388: NOT
14389: IFFALSE 14393
// exit ;
14391: GO 14551
// tmp := array ;
14393: LD_ADDR_VAR 0 10
14397: PUSH
14398: LD_VAR 0 1
14402: ST_TO_ADDR
// for i = 1 to length do
14403: LD_ADDR_VAR 0 6
14407: PUSH
14408: DOUBLE
14409: LD_INT 1
14411: DEC
14412: ST_TO_ADDR
14413: LD_VAR 0 11
14417: PUSH
14418: FOR_TO
14419: IFFALSE 14539
// begin for j = 1 to array do
14421: LD_ADDR_VAR 0 7
14425: PUSH
14426: DOUBLE
14427: LD_INT 1
14429: DEC
14430: ST_TO_ADDR
14431: LD_VAR 0 1
14435: PUSH
14436: FOR_TO
14437: IFFALSE 14525
// begin k := j + d ;
14439: LD_ADDR_VAR 0 8
14443: PUSH
14444: LD_VAR 0 7
14448: PUSH
14449: LD_VAR 0 9
14453: PLUS
14454: ST_TO_ADDR
// if k > array then
14455: LD_VAR 0 8
14459: PUSH
14460: LD_VAR 0 1
14464: GREATER
14465: IFFALSE 14475
// k := 1 ;
14467: LD_ADDR_VAR 0 8
14471: PUSH
14472: LD_INT 1
14474: ST_TO_ADDR
// if not k then
14475: LD_VAR 0 8
14479: NOT
14480: IFFALSE 14492
// k := array ;
14482: LD_ADDR_VAR 0 8
14486: PUSH
14487: LD_VAR 0 1
14491: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14492: LD_ADDR_VAR 0 10
14496: PUSH
14497: LD_VAR 0 10
14501: PPUSH
14502: LD_VAR 0 8
14506: PPUSH
14507: LD_VAR 0 1
14511: PUSH
14512: LD_VAR 0 7
14516: ARRAY
14517: PPUSH
14518: CALL_OW 1
14522: ST_TO_ADDR
// end ;
14523: GO 14436
14525: POP
14526: POP
// array := tmp ;
14527: LD_ADDR_VAR 0 1
14531: PUSH
14532: LD_VAR 0 10
14536: ST_TO_ADDR
// end ;
14537: GO 14418
14539: POP
14540: POP
// result := array ;
14541: LD_ADDR_VAR 0 5
14545: PUSH
14546: LD_VAR 0 1
14550: ST_TO_ADDR
// end ;
14551: LD_VAR 0 5
14555: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14556: LD_INT 0
14558: PPUSH
14559: PPUSH
// result := 0 ;
14560: LD_ADDR_VAR 0 3
14564: PUSH
14565: LD_INT 0
14567: ST_TO_ADDR
// if not array or not value in array then
14568: LD_VAR 0 1
14572: NOT
14573: PUSH
14574: LD_VAR 0 2
14578: PUSH
14579: LD_VAR 0 1
14583: IN
14584: NOT
14585: OR
14586: IFFALSE 14590
// exit ;
14588: GO 14644
// for i = 1 to array do
14590: LD_ADDR_VAR 0 4
14594: PUSH
14595: DOUBLE
14596: LD_INT 1
14598: DEC
14599: ST_TO_ADDR
14600: LD_VAR 0 1
14604: PUSH
14605: FOR_TO
14606: IFFALSE 14642
// if value = array [ i ] then
14608: LD_VAR 0 2
14612: PUSH
14613: LD_VAR 0 1
14617: PUSH
14618: LD_VAR 0 4
14622: ARRAY
14623: EQUAL
14624: IFFALSE 14640
// begin result := i ;
14626: LD_ADDR_VAR 0 3
14630: PUSH
14631: LD_VAR 0 4
14635: ST_TO_ADDR
// exit ;
14636: POP
14637: POP
14638: GO 14644
// end ;
14640: GO 14605
14642: POP
14643: POP
// end ;
14644: LD_VAR 0 3
14648: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
14649: LD_INT 0
14651: PPUSH
// vc_chassis := chassis ;
14652: LD_ADDR_OWVAR 37
14656: PUSH
14657: LD_VAR 0 1
14661: ST_TO_ADDR
// vc_engine := engine ;
14662: LD_ADDR_OWVAR 39
14666: PUSH
14667: LD_VAR 0 2
14671: ST_TO_ADDR
// vc_control := control ;
14672: LD_ADDR_OWVAR 38
14676: PUSH
14677: LD_VAR 0 3
14681: ST_TO_ADDR
// vc_weapon := weapon ;
14682: LD_ADDR_OWVAR 40
14686: PUSH
14687: LD_VAR 0 4
14691: ST_TO_ADDR
// vc_fuel_battery := fuel ;
14692: LD_ADDR_OWVAR 41
14696: PUSH
14697: LD_VAR 0 5
14701: ST_TO_ADDR
// end ;
14702: LD_VAR 0 6
14706: RET
// export function WantPlant ( unit ) ; var task ; begin
14707: LD_INT 0
14709: PPUSH
14710: PPUSH
// result := false ;
14711: LD_ADDR_VAR 0 2
14715: PUSH
14716: LD_INT 0
14718: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
14719: LD_ADDR_VAR 0 3
14723: PUSH
14724: LD_VAR 0 1
14728: PPUSH
14729: CALL_OW 437
14733: ST_TO_ADDR
// if task then
14734: LD_VAR 0 3
14738: IFFALSE 14766
// if task [ 1 ] [ 1 ] = p then
14740: LD_VAR 0 3
14744: PUSH
14745: LD_INT 1
14747: ARRAY
14748: PUSH
14749: LD_INT 1
14751: ARRAY
14752: PUSH
14753: LD_STRING p
14755: EQUAL
14756: IFFALSE 14766
// result := true ;
14758: LD_ADDR_VAR 0 2
14762: PUSH
14763: LD_INT 1
14765: ST_TO_ADDR
// end ;
14766: LD_VAR 0 2
14770: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
14771: LD_INT 0
14773: PPUSH
14774: PPUSH
14775: PPUSH
14776: PPUSH
// if pos < 1 then
14777: LD_VAR 0 2
14781: PUSH
14782: LD_INT 1
14784: LESS
14785: IFFALSE 14789
// exit ;
14787: GO 15092
// if pos = 1 then
14789: LD_VAR 0 2
14793: PUSH
14794: LD_INT 1
14796: EQUAL
14797: IFFALSE 14830
// result := Replace ( arr , pos [ 1 ] , value ) else
14799: LD_ADDR_VAR 0 4
14803: PUSH
14804: LD_VAR 0 1
14808: PPUSH
14809: LD_VAR 0 2
14813: PUSH
14814: LD_INT 1
14816: ARRAY
14817: PPUSH
14818: LD_VAR 0 3
14822: PPUSH
14823: CALL_OW 1
14827: ST_TO_ADDR
14828: GO 15092
// begin tmp := arr ;
14830: LD_ADDR_VAR 0 6
14834: PUSH
14835: LD_VAR 0 1
14839: ST_TO_ADDR
// s_arr := [ tmp ] ;
14840: LD_ADDR_VAR 0 7
14844: PUSH
14845: LD_VAR 0 6
14849: PUSH
14850: EMPTY
14851: LIST
14852: ST_TO_ADDR
// for i = 1 to pos - 1 do
14853: LD_ADDR_VAR 0 5
14857: PUSH
14858: DOUBLE
14859: LD_INT 1
14861: DEC
14862: ST_TO_ADDR
14863: LD_VAR 0 2
14867: PUSH
14868: LD_INT 1
14870: MINUS
14871: PUSH
14872: FOR_TO
14873: IFFALSE 14918
// begin tmp := tmp [ pos [ i ] ] ;
14875: LD_ADDR_VAR 0 6
14879: PUSH
14880: LD_VAR 0 6
14884: PUSH
14885: LD_VAR 0 2
14889: PUSH
14890: LD_VAR 0 5
14894: ARRAY
14895: ARRAY
14896: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
14897: LD_ADDR_VAR 0 7
14901: PUSH
14902: LD_VAR 0 7
14906: PUSH
14907: LD_VAR 0 6
14911: PUSH
14912: EMPTY
14913: LIST
14914: ADD
14915: ST_TO_ADDR
// end ;
14916: GO 14872
14918: POP
14919: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
14920: LD_ADDR_VAR 0 6
14924: PUSH
14925: LD_VAR 0 6
14929: PPUSH
14930: LD_VAR 0 2
14934: PUSH
14935: LD_VAR 0 2
14939: ARRAY
14940: PPUSH
14941: LD_VAR 0 3
14945: PPUSH
14946: CALL_OW 1
14950: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
14951: LD_ADDR_VAR 0 7
14955: PUSH
14956: LD_VAR 0 7
14960: PPUSH
14961: LD_VAR 0 7
14965: PPUSH
14966: LD_VAR 0 6
14970: PPUSH
14971: CALL_OW 1
14975: ST_TO_ADDR
// for i = s_arr downto 2 do
14976: LD_ADDR_VAR 0 5
14980: PUSH
14981: DOUBLE
14982: LD_VAR 0 7
14986: INC
14987: ST_TO_ADDR
14988: LD_INT 2
14990: PUSH
14991: FOR_DOWNTO
14992: IFFALSE 15076
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
14994: LD_ADDR_VAR 0 6
14998: PUSH
14999: LD_VAR 0 7
15003: PUSH
15004: LD_VAR 0 5
15008: PUSH
15009: LD_INT 1
15011: MINUS
15012: ARRAY
15013: PPUSH
15014: LD_VAR 0 2
15018: PUSH
15019: LD_VAR 0 5
15023: PUSH
15024: LD_INT 1
15026: MINUS
15027: ARRAY
15028: PPUSH
15029: LD_VAR 0 7
15033: PUSH
15034: LD_VAR 0 5
15038: ARRAY
15039: PPUSH
15040: CALL_OW 1
15044: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15045: LD_ADDR_VAR 0 7
15049: PUSH
15050: LD_VAR 0 7
15054: PPUSH
15055: LD_VAR 0 5
15059: PUSH
15060: LD_INT 1
15062: MINUS
15063: PPUSH
15064: LD_VAR 0 6
15068: PPUSH
15069: CALL_OW 1
15073: ST_TO_ADDR
// end ;
15074: GO 14991
15076: POP
15077: POP
// result := s_arr [ 1 ] ;
15078: LD_ADDR_VAR 0 4
15082: PUSH
15083: LD_VAR 0 7
15087: PUSH
15088: LD_INT 1
15090: ARRAY
15091: ST_TO_ADDR
// end ; end ;
15092: LD_VAR 0 4
15096: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15097: LD_INT 0
15099: PPUSH
15100: PPUSH
// if not list then
15101: LD_VAR 0 1
15105: NOT
15106: IFFALSE 15110
// exit ;
15108: GO 15201
// i := list [ pos1 ] ;
15110: LD_ADDR_VAR 0 5
15114: PUSH
15115: LD_VAR 0 1
15119: PUSH
15120: LD_VAR 0 2
15124: ARRAY
15125: ST_TO_ADDR
// if not i then
15126: LD_VAR 0 5
15130: NOT
15131: IFFALSE 15135
// exit ;
15133: GO 15201
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15135: LD_ADDR_VAR 0 1
15139: PUSH
15140: LD_VAR 0 1
15144: PPUSH
15145: LD_VAR 0 2
15149: PPUSH
15150: LD_VAR 0 1
15154: PUSH
15155: LD_VAR 0 3
15159: ARRAY
15160: PPUSH
15161: CALL_OW 1
15165: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15166: LD_ADDR_VAR 0 1
15170: PUSH
15171: LD_VAR 0 1
15175: PPUSH
15176: LD_VAR 0 3
15180: PPUSH
15181: LD_VAR 0 5
15185: PPUSH
15186: CALL_OW 1
15190: ST_TO_ADDR
// result := list ;
15191: LD_ADDR_VAR 0 4
15195: PUSH
15196: LD_VAR 0 1
15200: ST_TO_ADDR
// end ;
15201: LD_VAR 0 4
15205: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15206: LD_INT 0
15208: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15209: LD_ADDR_VAR 0 5
15213: PUSH
15214: LD_VAR 0 1
15218: PPUSH
15219: CALL_OW 250
15223: PPUSH
15224: LD_VAR 0 1
15228: PPUSH
15229: CALL_OW 251
15233: PPUSH
15234: LD_VAR 0 2
15238: PPUSH
15239: LD_VAR 0 3
15243: PPUSH
15244: LD_VAR 0 4
15248: PPUSH
15249: CALL 15259 0 5
15253: ST_TO_ADDR
// end ;
15254: LD_VAR 0 5
15258: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
15259: LD_INT 0
15261: PPUSH
15262: PPUSH
15263: PPUSH
15264: PPUSH
// if not list then
15265: LD_VAR 0 3
15269: NOT
15270: IFFALSE 15274
// exit ;
15272: GO 15662
// result := [ ] ;
15274: LD_ADDR_VAR 0 6
15278: PUSH
15279: EMPTY
15280: ST_TO_ADDR
// for i in list do
15281: LD_ADDR_VAR 0 7
15285: PUSH
15286: LD_VAR 0 3
15290: PUSH
15291: FOR_IN
15292: IFFALSE 15494
// begin tmp := GetDistUnitXY ( i , x , y ) ;
15294: LD_ADDR_VAR 0 9
15298: PUSH
15299: LD_VAR 0 7
15303: PPUSH
15304: LD_VAR 0 1
15308: PPUSH
15309: LD_VAR 0 2
15313: PPUSH
15314: CALL_OW 297
15318: ST_TO_ADDR
// if not result then
15319: LD_VAR 0 6
15323: NOT
15324: IFFALSE 15350
// result := [ [ i , tmp ] ] else
15326: LD_ADDR_VAR 0 6
15330: PUSH
15331: LD_VAR 0 7
15335: PUSH
15336: LD_VAR 0 9
15340: PUSH
15341: EMPTY
15342: LIST
15343: LIST
15344: PUSH
15345: EMPTY
15346: LIST
15347: ST_TO_ADDR
15348: GO 15492
// begin if result [ result ] [ 2 ] < tmp then
15350: LD_VAR 0 6
15354: PUSH
15355: LD_VAR 0 6
15359: ARRAY
15360: PUSH
15361: LD_INT 2
15363: ARRAY
15364: PUSH
15365: LD_VAR 0 9
15369: LESS
15370: IFFALSE 15412
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
15372: LD_ADDR_VAR 0 6
15376: PUSH
15377: LD_VAR 0 6
15381: PPUSH
15382: LD_VAR 0 6
15386: PUSH
15387: LD_INT 1
15389: PLUS
15390: PPUSH
15391: LD_VAR 0 7
15395: PUSH
15396: LD_VAR 0 9
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PPUSH
15405: CALL_OW 2
15409: ST_TO_ADDR
15410: GO 15492
// for j = 1 to result do
15412: LD_ADDR_VAR 0 8
15416: PUSH
15417: DOUBLE
15418: LD_INT 1
15420: DEC
15421: ST_TO_ADDR
15422: LD_VAR 0 6
15426: PUSH
15427: FOR_TO
15428: IFFALSE 15490
// begin if tmp < result [ j ] [ 2 ] then
15430: LD_VAR 0 9
15434: PUSH
15435: LD_VAR 0 6
15439: PUSH
15440: LD_VAR 0 8
15444: ARRAY
15445: PUSH
15446: LD_INT 2
15448: ARRAY
15449: LESS
15450: IFFALSE 15488
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15452: LD_ADDR_VAR 0 6
15456: PUSH
15457: LD_VAR 0 6
15461: PPUSH
15462: LD_VAR 0 8
15466: PPUSH
15467: LD_VAR 0 7
15471: PUSH
15472: LD_VAR 0 9
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PPUSH
15481: CALL_OW 2
15485: ST_TO_ADDR
// break ;
15486: GO 15490
// end ; end ;
15488: GO 15427
15490: POP
15491: POP
// end ; end ;
15492: GO 15291
15494: POP
15495: POP
// if result and not asc then
15496: LD_VAR 0 6
15500: PUSH
15501: LD_VAR 0 4
15505: NOT
15506: AND
15507: IFFALSE 15582
// begin tmp := result ;
15509: LD_ADDR_VAR 0 9
15513: PUSH
15514: LD_VAR 0 6
15518: ST_TO_ADDR
// for i = tmp downto 1 do
15519: LD_ADDR_VAR 0 7
15523: PUSH
15524: DOUBLE
15525: LD_VAR 0 9
15529: INC
15530: ST_TO_ADDR
15531: LD_INT 1
15533: PUSH
15534: FOR_DOWNTO
15535: IFFALSE 15580
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
15537: LD_ADDR_VAR 0 6
15541: PUSH
15542: LD_VAR 0 6
15546: PPUSH
15547: LD_VAR 0 9
15551: PUSH
15552: LD_VAR 0 7
15556: MINUS
15557: PUSH
15558: LD_INT 1
15560: PLUS
15561: PPUSH
15562: LD_VAR 0 9
15566: PUSH
15567: LD_VAR 0 7
15571: ARRAY
15572: PPUSH
15573: CALL_OW 1
15577: ST_TO_ADDR
15578: GO 15534
15580: POP
15581: POP
// end ; tmp := [ ] ;
15582: LD_ADDR_VAR 0 9
15586: PUSH
15587: EMPTY
15588: ST_TO_ADDR
// if mode then
15589: LD_VAR 0 5
15593: IFFALSE 15662
// begin for i = 1 to result do
15595: LD_ADDR_VAR 0 7
15599: PUSH
15600: DOUBLE
15601: LD_INT 1
15603: DEC
15604: ST_TO_ADDR
15605: LD_VAR 0 6
15609: PUSH
15610: FOR_TO
15611: IFFALSE 15650
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
15613: LD_ADDR_VAR 0 9
15617: PUSH
15618: LD_VAR 0 9
15622: PPUSH
15623: LD_VAR 0 7
15627: PPUSH
15628: LD_VAR 0 6
15632: PUSH
15633: LD_VAR 0 7
15637: ARRAY
15638: PUSH
15639: LD_INT 1
15641: ARRAY
15642: PPUSH
15643: CALL_OW 1
15647: ST_TO_ADDR
15648: GO 15610
15650: POP
15651: POP
// result := tmp ;
15652: LD_ADDR_VAR 0 6
15656: PUSH
15657: LD_VAR 0 9
15661: ST_TO_ADDR
// end ; end ;
15662: LD_VAR 0 6
15666: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
15667: LD_INT 0
15669: PPUSH
15670: PPUSH
15671: PPUSH
15672: PPUSH
15673: PPUSH
15674: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
15675: LD_ADDR_VAR 0 5
15679: PUSH
15680: LD_INT 0
15682: PUSH
15683: LD_INT 0
15685: PUSH
15686: LD_INT 0
15688: PUSH
15689: EMPTY
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: ST_TO_ADDR
// if not x or not y then
15697: LD_VAR 0 2
15701: NOT
15702: PUSH
15703: LD_VAR 0 3
15707: NOT
15708: OR
15709: IFFALSE 15713
// exit ;
15711: GO 17365
// if not range then
15713: LD_VAR 0 4
15717: NOT
15718: IFFALSE 15728
// range := 10 ;
15720: LD_ADDR_VAR 0 4
15724: PUSH
15725: LD_INT 10
15727: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15728: LD_ADDR_VAR 0 8
15732: PUSH
15733: LD_INT 81
15735: PUSH
15736: LD_VAR 0 1
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PUSH
15745: LD_INT 92
15747: PUSH
15748: LD_VAR 0 2
15752: PUSH
15753: LD_VAR 0 3
15757: PUSH
15758: LD_VAR 0 4
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: PUSH
15769: LD_INT 3
15771: PUSH
15772: LD_INT 21
15774: PUSH
15775: LD_INT 3
15777: PUSH
15778: EMPTY
15779: LIST
15780: LIST
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: LIST
15790: PPUSH
15791: CALL_OW 69
15795: ST_TO_ADDR
// if not tmp then
15796: LD_VAR 0 8
15800: NOT
15801: IFFALSE 15805
// exit ;
15803: GO 17365
// for i in tmp do
15805: LD_ADDR_VAR 0 6
15809: PUSH
15810: LD_VAR 0 8
15814: PUSH
15815: FOR_IN
15816: IFFALSE 17340
// begin points := [ 0 , 0 , 0 ] ;
15818: LD_ADDR_VAR 0 9
15822: PUSH
15823: LD_INT 0
15825: PUSH
15826: LD_INT 0
15828: PUSH
15829: LD_INT 0
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: LIST
15836: ST_TO_ADDR
// bpoints := 1 ;
15837: LD_ADDR_VAR 0 10
15841: PUSH
15842: LD_INT 1
15844: ST_TO_ADDR
// case GetType ( i ) of unit_human :
15845: LD_VAR 0 6
15849: PPUSH
15850: CALL_OW 247
15854: PUSH
15855: LD_INT 1
15857: DOUBLE
15858: EQUAL
15859: IFTRUE 15863
15861: GO 16441
15863: POP
// begin if GetClass ( i ) = 1 then
15864: LD_VAR 0 6
15868: PPUSH
15869: CALL_OW 257
15873: PUSH
15874: LD_INT 1
15876: EQUAL
15877: IFFALSE 15898
// points := [ 10 , 5 , 3 ] ;
15879: LD_ADDR_VAR 0 9
15883: PUSH
15884: LD_INT 10
15886: PUSH
15887: LD_INT 5
15889: PUSH
15890: LD_INT 3
15892: PUSH
15893: EMPTY
15894: LIST
15895: LIST
15896: LIST
15897: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
15898: LD_VAR 0 6
15902: PPUSH
15903: CALL_OW 257
15907: PUSH
15908: LD_INT 2
15910: PUSH
15911: LD_INT 3
15913: PUSH
15914: LD_INT 4
15916: PUSH
15917: EMPTY
15918: LIST
15919: LIST
15920: LIST
15921: IN
15922: IFFALSE 15943
// points := [ 3 , 2 , 1 ] ;
15924: LD_ADDR_VAR 0 9
15928: PUSH
15929: LD_INT 3
15931: PUSH
15932: LD_INT 2
15934: PUSH
15935: LD_INT 1
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: LIST
15942: ST_TO_ADDR
// if GetClass ( i ) = 5 then
15943: LD_VAR 0 6
15947: PPUSH
15948: CALL_OW 257
15952: PUSH
15953: LD_INT 5
15955: EQUAL
15956: IFFALSE 15977
// points := [ 130 , 5 , 2 ] ;
15958: LD_ADDR_VAR 0 9
15962: PUSH
15963: LD_INT 130
15965: PUSH
15966: LD_INT 5
15968: PUSH
15969: LD_INT 2
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: LIST
15976: ST_TO_ADDR
// if GetClass ( i ) = 8 then
15977: LD_VAR 0 6
15981: PPUSH
15982: CALL_OW 257
15986: PUSH
15987: LD_INT 8
15989: EQUAL
15990: IFFALSE 16011
// points := [ 35 , 35 , 30 ] ;
15992: LD_ADDR_VAR 0 9
15996: PUSH
15997: LD_INT 35
15999: PUSH
16000: LD_INT 35
16002: PUSH
16003: LD_INT 30
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: LIST
16010: ST_TO_ADDR
// if GetClass ( i ) = 9 then
16011: LD_VAR 0 6
16015: PPUSH
16016: CALL_OW 257
16020: PUSH
16021: LD_INT 9
16023: EQUAL
16024: IFFALSE 16045
// points := [ 20 , 55 , 40 ] ;
16026: LD_ADDR_VAR 0 9
16030: PUSH
16031: LD_INT 20
16033: PUSH
16034: LD_INT 55
16036: PUSH
16037: LD_INT 40
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: LIST
16044: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
16045: LD_VAR 0 6
16049: PPUSH
16050: CALL_OW 257
16054: PUSH
16055: LD_INT 12
16057: PUSH
16058: LD_INT 16
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: IN
16065: IFFALSE 16086
// points := [ 5 , 3 , 2 ] ;
16067: LD_ADDR_VAR 0 9
16071: PUSH
16072: LD_INT 5
16074: PUSH
16075: LD_INT 3
16077: PUSH
16078: LD_INT 2
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: LIST
16085: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16086: LD_VAR 0 6
16090: PPUSH
16091: CALL_OW 257
16095: PUSH
16096: LD_INT 17
16098: EQUAL
16099: IFFALSE 16120
// points := [ 100 , 50 , 75 ] ;
16101: LD_ADDR_VAR 0 9
16105: PUSH
16106: LD_INT 100
16108: PUSH
16109: LD_INT 50
16111: PUSH
16112: LD_INT 75
16114: PUSH
16115: EMPTY
16116: LIST
16117: LIST
16118: LIST
16119: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16120: LD_VAR 0 6
16124: PPUSH
16125: CALL_OW 257
16129: PUSH
16130: LD_INT 15
16132: EQUAL
16133: IFFALSE 16154
// points := [ 10 , 5 , 3 ] ;
16135: LD_ADDR_VAR 0 9
16139: PUSH
16140: LD_INT 10
16142: PUSH
16143: LD_INT 5
16145: PUSH
16146: LD_INT 3
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: LIST
16153: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16154: LD_VAR 0 6
16158: PPUSH
16159: CALL_OW 257
16163: PUSH
16164: LD_INT 14
16166: EQUAL
16167: IFFALSE 16188
// points := [ 10 , 0 , 0 ] ;
16169: LD_ADDR_VAR 0 9
16173: PUSH
16174: LD_INT 10
16176: PUSH
16177: LD_INT 0
16179: PUSH
16180: LD_INT 0
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: LIST
16187: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16188: LD_VAR 0 6
16192: PPUSH
16193: CALL_OW 257
16197: PUSH
16198: LD_INT 11
16200: EQUAL
16201: IFFALSE 16222
// points := [ 30 , 10 , 5 ] ;
16203: LD_ADDR_VAR 0 9
16207: PUSH
16208: LD_INT 30
16210: PUSH
16211: LD_INT 10
16213: PUSH
16214: LD_INT 5
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: LIST
16221: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
16222: LD_VAR 0 1
16226: PPUSH
16227: LD_INT 5
16229: PPUSH
16230: CALL_OW 321
16234: PUSH
16235: LD_INT 2
16237: EQUAL
16238: IFFALSE 16255
// bpoints := bpoints * 1.8 ;
16240: LD_ADDR_VAR 0 10
16244: PUSH
16245: LD_VAR 0 10
16249: PUSH
16250: LD_REAL  1.80000000000000E+0000
16253: MUL
16254: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
16255: LD_VAR 0 6
16259: PPUSH
16260: CALL_OW 257
16264: PUSH
16265: LD_INT 1
16267: PUSH
16268: LD_INT 2
16270: PUSH
16271: LD_INT 3
16273: PUSH
16274: LD_INT 4
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: IN
16283: PUSH
16284: LD_VAR 0 1
16288: PPUSH
16289: LD_INT 51
16291: PPUSH
16292: CALL_OW 321
16296: PUSH
16297: LD_INT 2
16299: EQUAL
16300: AND
16301: IFFALSE 16318
// bpoints := bpoints * 1.2 ;
16303: LD_ADDR_VAR 0 10
16307: PUSH
16308: LD_VAR 0 10
16312: PUSH
16313: LD_REAL  1.20000000000000E+0000
16316: MUL
16317: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
16318: LD_VAR 0 6
16322: PPUSH
16323: CALL_OW 257
16327: PUSH
16328: LD_INT 5
16330: PUSH
16331: LD_INT 7
16333: PUSH
16334: LD_INT 9
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: LIST
16341: IN
16342: PUSH
16343: LD_VAR 0 1
16347: PPUSH
16348: LD_INT 52
16350: PPUSH
16351: CALL_OW 321
16355: PUSH
16356: LD_INT 2
16358: EQUAL
16359: AND
16360: IFFALSE 16377
// bpoints := bpoints * 1.5 ;
16362: LD_ADDR_VAR 0 10
16366: PUSH
16367: LD_VAR 0 10
16371: PUSH
16372: LD_REAL  1.50000000000000E+0000
16375: MUL
16376: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
16377: LD_VAR 0 1
16381: PPUSH
16382: LD_INT 66
16384: PPUSH
16385: CALL_OW 321
16389: PUSH
16390: LD_INT 2
16392: EQUAL
16393: IFFALSE 16410
// bpoints := bpoints * 1.1 ;
16395: LD_ADDR_VAR 0 10
16399: PUSH
16400: LD_VAR 0 10
16404: PUSH
16405: LD_REAL  1.10000000000000E+0000
16408: MUL
16409: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
16410: LD_ADDR_VAR 0 10
16414: PUSH
16415: LD_VAR 0 10
16419: PUSH
16420: LD_VAR 0 6
16424: PPUSH
16425: LD_INT 1
16427: PPUSH
16428: CALL_OW 259
16432: PUSH
16433: LD_REAL  1.15000000000000E+0000
16436: MUL
16437: MUL
16438: ST_TO_ADDR
// end ; unit_vehicle :
16439: GO 17269
16441: LD_INT 2
16443: DOUBLE
16444: EQUAL
16445: IFTRUE 16449
16447: GO 17257
16449: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
16450: LD_VAR 0 6
16454: PPUSH
16455: CALL_OW 264
16459: PUSH
16460: LD_INT 2
16462: PUSH
16463: LD_INT 42
16465: PUSH
16466: LD_INT 24
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: LIST
16473: IN
16474: IFFALSE 16495
// points := [ 25 , 5 , 3 ] ;
16476: LD_ADDR_VAR 0 9
16480: PUSH
16481: LD_INT 25
16483: PUSH
16484: LD_INT 5
16486: PUSH
16487: LD_INT 3
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: LIST
16494: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
16495: LD_VAR 0 6
16499: PPUSH
16500: CALL_OW 264
16504: PUSH
16505: LD_INT 4
16507: PUSH
16508: LD_INT 43
16510: PUSH
16511: LD_INT 25
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: LIST
16518: IN
16519: IFFALSE 16540
// points := [ 40 , 15 , 5 ] ;
16521: LD_ADDR_VAR 0 9
16525: PUSH
16526: LD_INT 40
16528: PUSH
16529: LD_INT 15
16531: PUSH
16532: LD_INT 5
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: LIST
16539: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
16540: LD_VAR 0 6
16544: PPUSH
16545: CALL_OW 264
16549: PUSH
16550: LD_INT 3
16552: PUSH
16553: LD_INT 23
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: IN
16560: IFFALSE 16581
// points := [ 7 , 25 , 8 ] ;
16562: LD_ADDR_VAR 0 9
16566: PUSH
16567: LD_INT 7
16569: PUSH
16570: LD_INT 25
16572: PUSH
16573: LD_INT 8
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: LIST
16580: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
16581: LD_VAR 0 6
16585: PPUSH
16586: CALL_OW 264
16590: PUSH
16591: LD_INT 5
16593: PUSH
16594: LD_INT 27
16596: PUSH
16597: LD_INT 44
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: LIST
16604: IN
16605: IFFALSE 16626
// points := [ 14 , 50 , 16 ] ;
16607: LD_ADDR_VAR 0 9
16611: PUSH
16612: LD_INT 14
16614: PUSH
16615: LD_INT 50
16617: PUSH
16618: LD_INT 16
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: LIST
16625: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
16626: LD_VAR 0 6
16630: PPUSH
16631: CALL_OW 264
16635: PUSH
16636: LD_INT 6
16638: PUSH
16639: LD_INT 46
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: IN
16646: IFFALSE 16667
// points := [ 32 , 120 , 70 ] ;
16648: LD_ADDR_VAR 0 9
16652: PUSH
16653: LD_INT 32
16655: PUSH
16656: LD_INT 120
16658: PUSH
16659: LD_INT 70
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: LIST
16666: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
16667: LD_VAR 0 6
16671: PPUSH
16672: CALL_OW 264
16676: PUSH
16677: LD_INT 7
16679: PUSH
16680: LD_INT 28
16682: PUSH
16683: LD_INT 45
16685: PUSH
16686: LD_EXP 100
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: IN
16697: IFFALSE 16718
// points := [ 35 , 20 , 45 ] ;
16699: LD_ADDR_VAR 0 9
16703: PUSH
16704: LD_INT 35
16706: PUSH
16707: LD_INT 20
16709: PUSH
16710: LD_INT 45
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: LIST
16717: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
16718: LD_VAR 0 6
16722: PPUSH
16723: CALL_OW 264
16727: PUSH
16728: LD_INT 47
16730: PUSH
16731: EMPTY
16732: LIST
16733: IN
16734: IFFALSE 16755
// points := [ 67 , 45 , 75 ] ;
16736: LD_ADDR_VAR 0 9
16740: PUSH
16741: LD_INT 67
16743: PUSH
16744: LD_INT 45
16746: PUSH
16747: LD_INT 75
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: LIST
16754: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
16755: LD_VAR 0 6
16759: PPUSH
16760: CALL_OW 264
16764: PUSH
16765: LD_INT 26
16767: PUSH
16768: EMPTY
16769: LIST
16770: IN
16771: IFFALSE 16792
// points := [ 120 , 30 , 80 ] ;
16773: LD_ADDR_VAR 0 9
16777: PUSH
16778: LD_INT 120
16780: PUSH
16781: LD_INT 30
16783: PUSH
16784: LD_INT 80
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: LIST
16791: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
16792: LD_VAR 0 6
16796: PPUSH
16797: CALL_OW 264
16801: PUSH
16802: LD_INT 22
16804: PUSH
16805: EMPTY
16806: LIST
16807: IN
16808: IFFALSE 16829
// points := [ 40 , 1 , 1 ] ;
16810: LD_ADDR_VAR 0 9
16814: PUSH
16815: LD_INT 40
16817: PUSH
16818: LD_INT 1
16820: PUSH
16821: LD_INT 1
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: LIST
16828: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
16829: LD_VAR 0 6
16833: PPUSH
16834: CALL_OW 264
16838: PUSH
16839: LD_INT 29
16841: PUSH
16842: EMPTY
16843: LIST
16844: IN
16845: IFFALSE 16866
// points := [ 70 , 200 , 400 ] ;
16847: LD_ADDR_VAR 0 9
16851: PUSH
16852: LD_INT 70
16854: PUSH
16855: LD_INT 200
16857: PUSH
16858: LD_INT 400
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: LIST
16865: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
16866: LD_VAR 0 6
16870: PPUSH
16871: CALL_OW 264
16875: PUSH
16876: LD_INT 14
16878: PUSH
16879: LD_INT 53
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: IN
16886: IFFALSE 16907
// points := [ 40 , 10 , 20 ] ;
16888: LD_ADDR_VAR 0 9
16892: PUSH
16893: LD_INT 40
16895: PUSH
16896: LD_INT 10
16898: PUSH
16899: LD_INT 20
16901: PUSH
16902: EMPTY
16903: LIST
16904: LIST
16905: LIST
16906: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
16907: LD_VAR 0 6
16911: PPUSH
16912: CALL_OW 264
16916: PUSH
16917: LD_INT 9
16919: PUSH
16920: EMPTY
16921: LIST
16922: IN
16923: IFFALSE 16944
// points := [ 5 , 70 , 20 ] ;
16925: LD_ADDR_VAR 0 9
16929: PUSH
16930: LD_INT 5
16932: PUSH
16933: LD_INT 70
16935: PUSH
16936: LD_INT 20
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: LIST
16943: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
16944: LD_VAR 0 6
16948: PPUSH
16949: CALL_OW 264
16953: PUSH
16954: LD_INT 10
16956: PUSH
16957: EMPTY
16958: LIST
16959: IN
16960: IFFALSE 16981
// points := [ 35 , 110 , 70 ] ;
16962: LD_ADDR_VAR 0 9
16966: PUSH
16967: LD_INT 35
16969: PUSH
16970: LD_INT 110
16972: PUSH
16973: LD_INT 70
16975: PUSH
16976: EMPTY
16977: LIST
16978: LIST
16979: LIST
16980: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
16981: LD_VAR 0 6
16985: PPUSH
16986: CALL_OW 265
16990: PUSH
16991: LD_INT 25
16993: EQUAL
16994: IFFALSE 17015
// points := [ 80 , 65 , 100 ] ;
16996: LD_ADDR_VAR 0 9
17000: PUSH
17001: LD_INT 80
17003: PUSH
17004: LD_INT 65
17006: PUSH
17007: LD_INT 100
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: LIST
17014: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
17015: LD_VAR 0 6
17019: PPUSH
17020: CALL_OW 263
17024: PUSH
17025: LD_INT 1
17027: EQUAL
17028: IFFALSE 17063
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
17030: LD_ADDR_VAR 0 10
17034: PUSH
17035: LD_VAR 0 10
17039: PUSH
17040: LD_VAR 0 6
17044: PPUSH
17045: CALL_OW 311
17049: PPUSH
17050: LD_INT 3
17052: PPUSH
17053: CALL_OW 259
17057: PUSH
17058: LD_INT 4
17060: MUL
17061: MUL
17062: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
17063: LD_VAR 0 6
17067: PPUSH
17068: CALL_OW 263
17072: PUSH
17073: LD_INT 2
17075: EQUAL
17076: IFFALSE 17127
// begin j := IsControledBy ( i ) ;
17078: LD_ADDR_VAR 0 7
17082: PUSH
17083: LD_VAR 0 6
17087: PPUSH
17088: CALL_OW 312
17092: ST_TO_ADDR
// if j then
17093: LD_VAR 0 7
17097: IFFALSE 17127
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17099: LD_ADDR_VAR 0 10
17103: PUSH
17104: LD_VAR 0 10
17108: PUSH
17109: LD_VAR 0 7
17113: PPUSH
17114: LD_INT 3
17116: PPUSH
17117: CALL_OW 259
17121: PUSH
17122: LD_INT 3
17124: MUL
17125: MUL
17126: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17127: LD_VAR 0 6
17131: PPUSH
17132: CALL_OW 264
17136: PUSH
17137: LD_INT 5
17139: PUSH
17140: LD_INT 6
17142: PUSH
17143: LD_INT 46
17145: PUSH
17146: LD_INT 44
17148: PUSH
17149: LD_INT 47
17151: PUSH
17152: LD_INT 45
17154: PUSH
17155: LD_INT 28
17157: PUSH
17158: LD_INT 7
17160: PUSH
17161: LD_INT 27
17163: PUSH
17164: LD_INT 29
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: IN
17179: PUSH
17180: LD_VAR 0 1
17184: PPUSH
17185: LD_INT 52
17187: PPUSH
17188: CALL_OW 321
17192: PUSH
17193: LD_INT 2
17195: EQUAL
17196: AND
17197: IFFALSE 17214
// bpoints := bpoints * 1.2 ;
17199: LD_ADDR_VAR 0 10
17203: PUSH
17204: LD_VAR 0 10
17208: PUSH
17209: LD_REAL  1.20000000000000E+0000
17212: MUL
17213: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
17214: LD_VAR 0 6
17218: PPUSH
17219: CALL_OW 264
17223: PUSH
17224: LD_INT 6
17226: PUSH
17227: LD_INT 46
17229: PUSH
17230: LD_INT 47
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: LIST
17237: IN
17238: IFFALSE 17255
// bpoints := bpoints * 1.2 ;
17240: LD_ADDR_VAR 0 10
17244: PUSH
17245: LD_VAR 0 10
17249: PUSH
17250: LD_REAL  1.20000000000000E+0000
17253: MUL
17254: ST_TO_ADDR
// end ; unit_building :
17255: GO 17269
17257: LD_INT 3
17259: DOUBLE
17260: EQUAL
17261: IFTRUE 17265
17263: GO 17268
17265: POP
// ; end ;
17266: GO 17269
17268: POP
// for j = 1 to 3 do
17269: LD_ADDR_VAR 0 7
17273: PUSH
17274: DOUBLE
17275: LD_INT 1
17277: DEC
17278: ST_TO_ADDR
17279: LD_INT 3
17281: PUSH
17282: FOR_TO
17283: IFFALSE 17336
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
17285: LD_ADDR_VAR 0 5
17289: PUSH
17290: LD_VAR 0 5
17294: PPUSH
17295: LD_VAR 0 7
17299: PPUSH
17300: LD_VAR 0 5
17304: PUSH
17305: LD_VAR 0 7
17309: ARRAY
17310: PUSH
17311: LD_VAR 0 9
17315: PUSH
17316: LD_VAR 0 7
17320: ARRAY
17321: PUSH
17322: LD_VAR 0 10
17326: MUL
17327: PLUS
17328: PPUSH
17329: CALL_OW 1
17333: ST_TO_ADDR
17334: GO 17282
17336: POP
17337: POP
// end ;
17338: GO 15815
17340: POP
17341: POP
// result := Replace ( result , 4 , tmp ) ;
17342: LD_ADDR_VAR 0 5
17346: PUSH
17347: LD_VAR 0 5
17351: PPUSH
17352: LD_INT 4
17354: PPUSH
17355: LD_VAR 0 8
17359: PPUSH
17360: CALL_OW 1
17364: ST_TO_ADDR
// end ;
17365: LD_VAR 0 5
17369: RET
// export function DangerAtRange ( unit , range ) ; begin
17370: LD_INT 0
17372: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
17373: LD_ADDR_VAR 0 3
17377: PUSH
17378: LD_VAR 0 1
17382: PPUSH
17383: CALL_OW 255
17387: PPUSH
17388: LD_VAR 0 1
17392: PPUSH
17393: CALL_OW 250
17397: PPUSH
17398: LD_VAR 0 1
17402: PPUSH
17403: CALL_OW 251
17407: PPUSH
17408: LD_VAR 0 2
17412: PPUSH
17413: CALL 15667 0 4
17417: ST_TO_ADDR
// end ;
17418: LD_VAR 0 3
17422: RET
// export function DangerInArea ( side , area ) ; begin
17423: LD_INT 0
17425: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
17426: LD_ADDR_VAR 0 3
17430: PUSH
17431: LD_VAR 0 2
17435: PPUSH
17436: LD_INT 81
17438: PUSH
17439: LD_VAR 0 1
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PPUSH
17448: CALL_OW 70
17452: ST_TO_ADDR
// end ;
17453: LD_VAR 0 3
17457: RET
// export function IsExtension ( b ) ; begin
17458: LD_INT 0
17460: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
17461: LD_ADDR_VAR 0 2
17465: PUSH
17466: LD_VAR 0 1
17470: PUSH
17471: LD_INT 23
17473: PUSH
17474: LD_INT 20
17476: PUSH
17477: LD_INT 22
17479: PUSH
17480: LD_INT 17
17482: PUSH
17483: LD_INT 24
17485: PUSH
17486: LD_INT 21
17488: PUSH
17489: LD_INT 19
17491: PUSH
17492: LD_INT 16
17494: PUSH
17495: LD_INT 25
17497: PUSH
17498: LD_INT 18
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: IN
17513: ST_TO_ADDR
// end ;
17514: LD_VAR 0 2
17518: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
17519: LD_INT 0
17521: PPUSH
17522: PPUSH
17523: PPUSH
// result := [ ] ;
17524: LD_ADDR_VAR 0 4
17528: PUSH
17529: EMPTY
17530: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
17531: LD_ADDR_VAR 0 5
17535: PUSH
17536: LD_VAR 0 2
17540: PPUSH
17541: LD_INT 21
17543: PUSH
17544: LD_INT 3
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PPUSH
17551: CALL_OW 70
17555: ST_TO_ADDR
// if not tmp then
17556: LD_VAR 0 5
17560: NOT
17561: IFFALSE 17565
// exit ;
17563: GO 17629
// if checkLink then
17565: LD_VAR 0 3
17569: IFFALSE 17619
// begin for i in tmp do
17571: LD_ADDR_VAR 0 6
17575: PUSH
17576: LD_VAR 0 5
17580: PUSH
17581: FOR_IN
17582: IFFALSE 17617
// if GetBase ( i ) <> base then
17584: LD_VAR 0 6
17588: PPUSH
17589: CALL_OW 274
17593: PUSH
17594: LD_VAR 0 1
17598: NONEQUAL
17599: IFFALSE 17615
// ComLinkToBase ( base , i ) ;
17601: LD_VAR 0 1
17605: PPUSH
17606: LD_VAR 0 6
17610: PPUSH
17611: CALL_OW 169
17615: GO 17581
17617: POP
17618: POP
// end ; result := tmp ;
17619: LD_ADDR_VAR 0 4
17623: PUSH
17624: LD_VAR 0 5
17628: ST_TO_ADDR
// end ;
17629: LD_VAR 0 4
17633: RET
// export function ComComplete ( units , b ) ; var i ; begin
17634: LD_INT 0
17636: PPUSH
17637: PPUSH
// if not units then
17638: LD_VAR 0 1
17642: NOT
17643: IFFALSE 17647
// exit ;
17645: GO 17737
// for i in units do
17647: LD_ADDR_VAR 0 4
17651: PUSH
17652: LD_VAR 0 1
17656: PUSH
17657: FOR_IN
17658: IFFALSE 17735
// if BuildingStatus ( b ) = bs_build then
17660: LD_VAR 0 2
17664: PPUSH
17665: CALL_OW 461
17669: PUSH
17670: LD_INT 1
17672: EQUAL
17673: IFFALSE 17733
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
17675: LD_VAR 0 4
17679: PPUSH
17680: LD_STRING h
17682: PUSH
17683: LD_VAR 0 2
17687: PPUSH
17688: CALL_OW 250
17692: PUSH
17693: LD_VAR 0 2
17697: PPUSH
17698: CALL_OW 251
17702: PUSH
17703: LD_VAR 0 2
17707: PUSH
17708: LD_INT 0
17710: PUSH
17711: LD_INT 0
17713: PUSH
17714: LD_INT 0
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: PUSH
17726: EMPTY
17727: LIST
17728: PPUSH
17729: CALL_OW 446
17733: GO 17657
17735: POP
17736: POP
// end ;
17737: LD_VAR 0 3
17741: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
17742: LD_INT 0
17744: PPUSH
17745: PPUSH
17746: PPUSH
17747: PPUSH
17748: PPUSH
17749: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
17750: LD_VAR 0 1
17754: NOT
17755: PUSH
17756: LD_VAR 0 1
17760: PPUSH
17761: CALL_OW 263
17765: PUSH
17766: LD_INT 2
17768: NONEQUAL
17769: OR
17770: IFFALSE 17774
// exit ;
17772: GO 18090
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
17774: LD_ADDR_VAR 0 6
17778: PUSH
17779: LD_INT 22
17781: PUSH
17782: LD_VAR 0 1
17786: PPUSH
17787: CALL_OW 255
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: PUSH
17796: LD_INT 2
17798: PUSH
17799: LD_INT 30
17801: PUSH
17802: LD_INT 36
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: PUSH
17809: LD_INT 34
17811: PUSH
17812: LD_INT 31
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: LIST
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: PPUSH
17828: CALL_OW 69
17832: ST_TO_ADDR
// if not tmp then
17833: LD_VAR 0 6
17837: NOT
17838: IFFALSE 17842
// exit ;
17840: GO 18090
// result := [ ] ;
17842: LD_ADDR_VAR 0 2
17846: PUSH
17847: EMPTY
17848: ST_TO_ADDR
// for i in tmp do
17849: LD_ADDR_VAR 0 3
17853: PUSH
17854: LD_VAR 0 6
17858: PUSH
17859: FOR_IN
17860: IFFALSE 17931
// begin t := UnitsInside ( i ) ;
17862: LD_ADDR_VAR 0 4
17866: PUSH
17867: LD_VAR 0 3
17871: PPUSH
17872: CALL_OW 313
17876: ST_TO_ADDR
// if t then
17877: LD_VAR 0 4
17881: IFFALSE 17929
// for j in t do
17883: LD_ADDR_VAR 0 7
17887: PUSH
17888: LD_VAR 0 4
17892: PUSH
17893: FOR_IN
17894: IFFALSE 17927
// result := Replace ( result , result + 1 , j ) ;
17896: LD_ADDR_VAR 0 2
17900: PUSH
17901: LD_VAR 0 2
17905: PPUSH
17906: LD_VAR 0 2
17910: PUSH
17911: LD_INT 1
17913: PLUS
17914: PPUSH
17915: LD_VAR 0 7
17919: PPUSH
17920: CALL_OW 1
17924: ST_TO_ADDR
17925: GO 17893
17927: POP
17928: POP
// end ;
17929: GO 17859
17931: POP
17932: POP
// if not result then
17933: LD_VAR 0 2
17937: NOT
17938: IFFALSE 17942
// exit ;
17940: GO 18090
// mech := result [ 1 ] ;
17942: LD_ADDR_VAR 0 5
17946: PUSH
17947: LD_VAR 0 2
17951: PUSH
17952: LD_INT 1
17954: ARRAY
17955: ST_TO_ADDR
// if result > 1 then
17956: LD_VAR 0 2
17960: PUSH
17961: LD_INT 1
17963: GREATER
17964: IFFALSE 18076
// begin for i = 2 to result do
17966: LD_ADDR_VAR 0 3
17970: PUSH
17971: DOUBLE
17972: LD_INT 2
17974: DEC
17975: ST_TO_ADDR
17976: LD_VAR 0 2
17980: PUSH
17981: FOR_TO
17982: IFFALSE 18074
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
17984: LD_ADDR_VAR 0 4
17988: PUSH
17989: LD_VAR 0 2
17993: PUSH
17994: LD_VAR 0 3
17998: ARRAY
17999: PPUSH
18000: LD_INT 3
18002: PPUSH
18003: CALL_OW 259
18007: PUSH
18008: LD_VAR 0 2
18012: PUSH
18013: LD_VAR 0 3
18017: ARRAY
18018: PPUSH
18019: CALL_OW 432
18023: MINUS
18024: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
18025: LD_VAR 0 4
18029: PUSH
18030: LD_VAR 0 5
18034: PPUSH
18035: LD_INT 3
18037: PPUSH
18038: CALL_OW 259
18042: PUSH
18043: LD_VAR 0 5
18047: PPUSH
18048: CALL_OW 432
18052: MINUS
18053: GREATEREQUAL
18054: IFFALSE 18072
// mech := result [ i ] ;
18056: LD_ADDR_VAR 0 5
18060: PUSH
18061: LD_VAR 0 2
18065: PUSH
18066: LD_VAR 0 3
18070: ARRAY
18071: ST_TO_ADDR
// end ;
18072: GO 17981
18074: POP
18075: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18076: LD_VAR 0 1
18080: PPUSH
18081: LD_VAR 0 5
18085: PPUSH
18086: CALL_OW 135
// end ;
18090: LD_VAR 0 2
18094: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18095: LD_INT 0
18097: PPUSH
18098: PPUSH
18099: PPUSH
18100: PPUSH
18101: PPUSH
18102: PPUSH
18103: PPUSH
18104: PPUSH
18105: PPUSH
18106: PPUSH
18107: PPUSH
18108: PPUSH
18109: PPUSH
// result := [ ] ;
18110: LD_ADDR_VAR 0 7
18114: PUSH
18115: EMPTY
18116: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18117: LD_VAR 0 1
18121: PPUSH
18122: CALL_OW 266
18126: PUSH
18127: LD_INT 0
18129: PUSH
18130: LD_INT 1
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: IN
18137: NOT
18138: IFFALSE 18142
// exit ;
18140: GO 19776
// if name then
18142: LD_VAR 0 3
18146: IFFALSE 18162
// SetBName ( base_dep , name ) ;
18148: LD_VAR 0 1
18152: PPUSH
18153: LD_VAR 0 3
18157: PPUSH
18158: CALL_OW 500
// base := GetBase ( base_dep ) ;
18162: LD_ADDR_VAR 0 15
18166: PUSH
18167: LD_VAR 0 1
18171: PPUSH
18172: CALL_OW 274
18176: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18177: LD_ADDR_VAR 0 16
18181: PUSH
18182: LD_VAR 0 1
18186: PPUSH
18187: CALL_OW 255
18191: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18192: LD_ADDR_VAR 0 17
18196: PUSH
18197: LD_VAR 0 1
18201: PPUSH
18202: CALL_OW 248
18206: ST_TO_ADDR
// if sources then
18207: LD_VAR 0 5
18211: IFFALSE 18258
// for i = 1 to 3 do
18213: LD_ADDR_VAR 0 8
18217: PUSH
18218: DOUBLE
18219: LD_INT 1
18221: DEC
18222: ST_TO_ADDR
18223: LD_INT 3
18225: PUSH
18226: FOR_TO
18227: IFFALSE 18256
// AddResourceType ( base , i , sources [ i ] ) ;
18229: LD_VAR 0 15
18233: PPUSH
18234: LD_VAR 0 8
18238: PPUSH
18239: LD_VAR 0 5
18243: PUSH
18244: LD_VAR 0 8
18248: ARRAY
18249: PPUSH
18250: CALL_OW 276
18254: GO 18226
18256: POP
18257: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
18258: LD_ADDR_VAR 0 18
18262: PUSH
18263: LD_VAR 0 15
18267: PPUSH
18268: LD_VAR 0 2
18272: PPUSH
18273: LD_INT 1
18275: PPUSH
18276: CALL 17519 0 3
18280: ST_TO_ADDR
// InitHc ;
18281: CALL_OW 19
// InitUc ;
18285: CALL_OW 18
// uc_side := side ;
18289: LD_ADDR_OWVAR 20
18293: PUSH
18294: LD_VAR 0 16
18298: ST_TO_ADDR
// uc_nation := nation ;
18299: LD_ADDR_OWVAR 21
18303: PUSH
18304: LD_VAR 0 17
18308: ST_TO_ADDR
// if buildings then
18309: LD_VAR 0 18
18313: IFFALSE 19635
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
18315: LD_ADDR_VAR 0 19
18319: PUSH
18320: LD_VAR 0 18
18324: PPUSH
18325: LD_INT 2
18327: PUSH
18328: LD_INT 30
18330: PUSH
18331: LD_INT 29
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 30
18340: PUSH
18341: LD_INT 30
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: LIST
18352: PPUSH
18353: CALL_OW 72
18357: ST_TO_ADDR
// if tmp then
18358: LD_VAR 0 19
18362: IFFALSE 18410
// for i in tmp do
18364: LD_ADDR_VAR 0 8
18368: PUSH
18369: LD_VAR 0 19
18373: PUSH
18374: FOR_IN
18375: IFFALSE 18408
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
18377: LD_VAR 0 8
18381: PPUSH
18382: CALL_OW 250
18386: PPUSH
18387: LD_VAR 0 8
18391: PPUSH
18392: CALL_OW 251
18396: PPUSH
18397: LD_VAR 0 16
18401: PPUSH
18402: CALL_OW 441
18406: GO 18374
18408: POP
18409: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
18410: LD_VAR 0 18
18414: PPUSH
18415: LD_INT 2
18417: PUSH
18418: LD_INT 30
18420: PUSH
18421: LD_INT 32
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 30
18430: PUSH
18431: LD_INT 33
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: LIST
18442: PPUSH
18443: CALL_OW 72
18447: IFFALSE 18535
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
18449: LD_ADDR_VAR 0 8
18453: PUSH
18454: LD_VAR 0 18
18458: PPUSH
18459: LD_INT 2
18461: PUSH
18462: LD_INT 30
18464: PUSH
18465: LD_INT 32
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: LD_INT 30
18474: PUSH
18475: LD_INT 33
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: LIST
18486: PPUSH
18487: CALL_OW 72
18491: PUSH
18492: FOR_IN
18493: IFFALSE 18533
// begin if not GetBWeapon ( i ) then
18495: LD_VAR 0 8
18499: PPUSH
18500: CALL_OW 269
18504: NOT
18505: IFFALSE 18531
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
18507: LD_VAR 0 8
18511: PPUSH
18512: LD_VAR 0 8
18516: PPUSH
18517: LD_VAR 0 2
18521: PPUSH
18522: CALL 19781 0 2
18526: PPUSH
18527: CALL_OW 431
// end ;
18531: GO 18492
18533: POP
18534: POP
// end ; for i = 1 to personel do
18535: LD_ADDR_VAR 0 8
18539: PUSH
18540: DOUBLE
18541: LD_INT 1
18543: DEC
18544: ST_TO_ADDR
18545: LD_VAR 0 6
18549: PUSH
18550: FOR_TO
18551: IFFALSE 19615
// begin if i > 4 then
18553: LD_VAR 0 8
18557: PUSH
18558: LD_INT 4
18560: GREATER
18561: IFFALSE 18565
// break ;
18563: GO 19615
// case i of 1 :
18565: LD_VAR 0 8
18569: PUSH
18570: LD_INT 1
18572: DOUBLE
18573: EQUAL
18574: IFTRUE 18578
18576: GO 18658
18578: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
18579: LD_ADDR_VAR 0 12
18583: PUSH
18584: LD_VAR 0 18
18588: PPUSH
18589: LD_INT 22
18591: PUSH
18592: LD_VAR 0 16
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PUSH
18601: LD_INT 58
18603: PUSH
18604: EMPTY
18605: LIST
18606: PUSH
18607: LD_INT 2
18609: PUSH
18610: LD_INT 30
18612: PUSH
18613: LD_INT 32
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: PUSH
18620: LD_INT 30
18622: PUSH
18623: LD_INT 4
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PUSH
18630: LD_INT 30
18632: PUSH
18633: LD_INT 5
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: LIST
18650: PPUSH
18651: CALL_OW 72
18655: ST_TO_ADDR
18656: GO 18880
18658: LD_INT 2
18660: DOUBLE
18661: EQUAL
18662: IFTRUE 18666
18664: GO 18728
18666: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
18667: LD_ADDR_VAR 0 12
18671: PUSH
18672: LD_VAR 0 18
18676: PPUSH
18677: LD_INT 22
18679: PUSH
18680: LD_VAR 0 16
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 2
18691: PUSH
18692: LD_INT 30
18694: PUSH
18695: LD_INT 0
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: LD_INT 30
18704: PUSH
18705: LD_INT 1
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: LIST
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PPUSH
18721: CALL_OW 72
18725: ST_TO_ADDR
18726: GO 18880
18728: LD_INT 3
18730: DOUBLE
18731: EQUAL
18732: IFTRUE 18736
18734: GO 18798
18736: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
18737: LD_ADDR_VAR 0 12
18741: PUSH
18742: LD_VAR 0 18
18746: PPUSH
18747: LD_INT 22
18749: PUSH
18750: LD_VAR 0 16
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PUSH
18759: LD_INT 2
18761: PUSH
18762: LD_INT 30
18764: PUSH
18765: LD_INT 2
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: LD_INT 30
18774: PUSH
18775: LD_INT 3
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: LIST
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PPUSH
18791: CALL_OW 72
18795: ST_TO_ADDR
18796: GO 18880
18798: LD_INT 4
18800: DOUBLE
18801: EQUAL
18802: IFTRUE 18806
18804: GO 18879
18806: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
18807: LD_ADDR_VAR 0 12
18811: PUSH
18812: LD_VAR 0 18
18816: PPUSH
18817: LD_INT 22
18819: PUSH
18820: LD_VAR 0 16
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: LD_INT 2
18831: PUSH
18832: LD_INT 30
18834: PUSH
18835: LD_INT 6
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: LD_INT 30
18844: PUSH
18845: LD_INT 7
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PUSH
18852: LD_INT 30
18854: PUSH
18855: LD_INT 8
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PPUSH
18872: CALL_OW 72
18876: ST_TO_ADDR
18877: GO 18880
18879: POP
// if i = 1 then
18880: LD_VAR 0 8
18884: PUSH
18885: LD_INT 1
18887: EQUAL
18888: IFFALSE 18999
// begin tmp := [ ] ;
18890: LD_ADDR_VAR 0 19
18894: PUSH
18895: EMPTY
18896: ST_TO_ADDR
// for j in f do
18897: LD_ADDR_VAR 0 9
18901: PUSH
18902: LD_VAR 0 12
18906: PUSH
18907: FOR_IN
18908: IFFALSE 18981
// if GetBType ( j ) = b_bunker then
18910: LD_VAR 0 9
18914: PPUSH
18915: CALL_OW 266
18919: PUSH
18920: LD_INT 32
18922: EQUAL
18923: IFFALSE 18950
// tmp := Insert ( tmp , 1 , j ) else
18925: LD_ADDR_VAR 0 19
18929: PUSH
18930: LD_VAR 0 19
18934: PPUSH
18935: LD_INT 1
18937: PPUSH
18938: LD_VAR 0 9
18942: PPUSH
18943: CALL_OW 2
18947: ST_TO_ADDR
18948: GO 18979
// tmp := Insert ( tmp , tmp + 1 , j ) ;
18950: LD_ADDR_VAR 0 19
18954: PUSH
18955: LD_VAR 0 19
18959: PPUSH
18960: LD_VAR 0 19
18964: PUSH
18965: LD_INT 1
18967: PLUS
18968: PPUSH
18969: LD_VAR 0 9
18973: PPUSH
18974: CALL_OW 2
18978: ST_TO_ADDR
18979: GO 18907
18981: POP
18982: POP
// if tmp then
18983: LD_VAR 0 19
18987: IFFALSE 18999
// f := tmp ;
18989: LD_ADDR_VAR 0 12
18993: PUSH
18994: LD_VAR 0 19
18998: ST_TO_ADDR
// end ; x := personel [ i ] ;
18999: LD_ADDR_VAR 0 13
19003: PUSH
19004: LD_VAR 0 6
19008: PUSH
19009: LD_VAR 0 8
19013: ARRAY
19014: ST_TO_ADDR
// if x = - 1 then
19015: LD_VAR 0 13
19019: PUSH
19020: LD_INT 1
19022: NEG
19023: EQUAL
19024: IFFALSE 19233
// begin for j in f do
19026: LD_ADDR_VAR 0 9
19030: PUSH
19031: LD_VAR 0 12
19035: PUSH
19036: FOR_IN
19037: IFFALSE 19229
// repeat InitHc ;
19039: CALL_OW 19
// if GetBType ( j ) = b_barracks then
19043: LD_VAR 0 9
19047: PPUSH
19048: CALL_OW 266
19052: PUSH
19053: LD_INT 5
19055: EQUAL
19056: IFFALSE 19126
// begin if UnitsInside ( j ) < 3 then
19058: LD_VAR 0 9
19062: PPUSH
19063: CALL_OW 313
19067: PUSH
19068: LD_INT 3
19070: LESS
19071: IFFALSE 19107
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19073: LD_INT 0
19075: PPUSH
19076: LD_INT 5
19078: PUSH
19079: LD_INT 8
19081: PUSH
19082: LD_INT 9
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: LIST
19089: PUSH
19090: LD_VAR 0 17
19094: ARRAY
19095: PPUSH
19096: LD_VAR 0 4
19100: PPUSH
19101: CALL_OW 380
19105: GO 19124
// PrepareHuman ( false , i , skill ) ;
19107: LD_INT 0
19109: PPUSH
19110: LD_VAR 0 8
19114: PPUSH
19115: LD_VAR 0 4
19119: PPUSH
19120: CALL_OW 380
// end else
19124: GO 19143
// PrepareHuman ( false , i , skill ) ;
19126: LD_INT 0
19128: PPUSH
19129: LD_VAR 0 8
19133: PPUSH
19134: LD_VAR 0 4
19138: PPUSH
19139: CALL_OW 380
// un := CreateHuman ;
19143: LD_ADDR_VAR 0 14
19147: PUSH
19148: CALL_OW 44
19152: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19153: LD_ADDR_VAR 0 7
19157: PUSH
19158: LD_VAR 0 7
19162: PPUSH
19163: LD_INT 1
19165: PPUSH
19166: LD_VAR 0 14
19170: PPUSH
19171: CALL_OW 2
19175: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19176: LD_VAR 0 14
19180: PPUSH
19181: LD_VAR 0 9
19185: PPUSH
19186: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19190: LD_VAR 0 9
19194: PPUSH
19195: CALL_OW 313
19199: PUSH
19200: LD_INT 6
19202: EQUAL
19203: PUSH
19204: LD_VAR 0 9
19208: PPUSH
19209: CALL_OW 266
19213: PUSH
19214: LD_INT 32
19216: PUSH
19217: LD_INT 31
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: IN
19224: OR
19225: IFFALSE 19039
19227: GO 19036
19229: POP
19230: POP
// end else
19231: GO 19613
// for j = 1 to x do
19233: LD_ADDR_VAR 0 9
19237: PUSH
19238: DOUBLE
19239: LD_INT 1
19241: DEC
19242: ST_TO_ADDR
19243: LD_VAR 0 13
19247: PUSH
19248: FOR_TO
19249: IFFALSE 19611
// begin InitHc ;
19251: CALL_OW 19
// if not f then
19255: LD_VAR 0 12
19259: NOT
19260: IFFALSE 19349
// begin PrepareHuman ( false , i , skill ) ;
19262: LD_INT 0
19264: PPUSH
19265: LD_VAR 0 8
19269: PPUSH
19270: LD_VAR 0 4
19274: PPUSH
19275: CALL_OW 380
// un := CreateHuman ;
19279: LD_ADDR_VAR 0 14
19283: PUSH
19284: CALL_OW 44
19288: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19289: LD_ADDR_VAR 0 7
19293: PUSH
19294: LD_VAR 0 7
19298: PPUSH
19299: LD_INT 1
19301: PPUSH
19302: LD_VAR 0 14
19306: PPUSH
19307: CALL_OW 2
19311: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19312: LD_VAR 0 14
19316: PPUSH
19317: LD_VAR 0 1
19321: PPUSH
19322: CALL_OW 250
19326: PPUSH
19327: LD_VAR 0 1
19331: PPUSH
19332: CALL_OW 251
19336: PPUSH
19337: LD_INT 10
19339: PPUSH
19340: LD_INT 0
19342: PPUSH
19343: CALL_OW 50
// continue ;
19347: GO 19248
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
19349: LD_VAR 0 12
19353: PUSH
19354: LD_INT 1
19356: ARRAY
19357: PPUSH
19358: CALL_OW 313
19362: PUSH
19363: LD_VAR 0 12
19367: PUSH
19368: LD_INT 1
19370: ARRAY
19371: PPUSH
19372: CALL_OW 266
19376: PUSH
19377: LD_INT 32
19379: PUSH
19380: LD_INT 31
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: IN
19387: AND
19388: PUSH
19389: LD_VAR 0 12
19393: PUSH
19394: LD_INT 1
19396: ARRAY
19397: PPUSH
19398: CALL_OW 313
19402: PUSH
19403: LD_INT 6
19405: EQUAL
19406: OR
19407: IFFALSE 19427
// f := Delete ( f , 1 ) ;
19409: LD_ADDR_VAR 0 12
19413: PUSH
19414: LD_VAR 0 12
19418: PPUSH
19419: LD_INT 1
19421: PPUSH
19422: CALL_OW 3
19426: ST_TO_ADDR
// if not f then
19427: LD_VAR 0 12
19431: NOT
19432: IFFALSE 19450
// begin x := x + 2 ;
19434: LD_ADDR_VAR 0 13
19438: PUSH
19439: LD_VAR 0 13
19443: PUSH
19444: LD_INT 2
19446: PLUS
19447: ST_TO_ADDR
// continue ;
19448: GO 19248
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
19450: LD_VAR 0 12
19454: PUSH
19455: LD_INT 1
19457: ARRAY
19458: PPUSH
19459: CALL_OW 266
19463: PUSH
19464: LD_INT 5
19466: EQUAL
19467: IFFALSE 19541
// begin if UnitsInside ( f [ 1 ] ) < 3 then
19469: LD_VAR 0 12
19473: PUSH
19474: LD_INT 1
19476: ARRAY
19477: PPUSH
19478: CALL_OW 313
19482: PUSH
19483: LD_INT 3
19485: LESS
19486: IFFALSE 19522
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19488: LD_INT 0
19490: PPUSH
19491: LD_INT 5
19493: PUSH
19494: LD_INT 8
19496: PUSH
19497: LD_INT 9
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: LIST
19504: PUSH
19505: LD_VAR 0 17
19509: ARRAY
19510: PPUSH
19511: LD_VAR 0 4
19515: PPUSH
19516: CALL_OW 380
19520: GO 19539
// PrepareHuman ( false , i , skill ) ;
19522: LD_INT 0
19524: PPUSH
19525: LD_VAR 0 8
19529: PPUSH
19530: LD_VAR 0 4
19534: PPUSH
19535: CALL_OW 380
// end else
19539: GO 19558
// PrepareHuman ( false , i , skill ) ;
19541: LD_INT 0
19543: PPUSH
19544: LD_VAR 0 8
19548: PPUSH
19549: LD_VAR 0 4
19553: PPUSH
19554: CALL_OW 380
// un := CreateHuman ;
19558: LD_ADDR_VAR 0 14
19562: PUSH
19563: CALL_OW 44
19567: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19568: LD_ADDR_VAR 0 7
19572: PUSH
19573: LD_VAR 0 7
19577: PPUSH
19578: LD_INT 1
19580: PPUSH
19581: LD_VAR 0 14
19585: PPUSH
19586: CALL_OW 2
19590: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
19591: LD_VAR 0 14
19595: PPUSH
19596: LD_VAR 0 12
19600: PUSH
19601: LD_INT 1
19603: ARRAY
19604: PPUSH
19605: CALL_OW 52
// end ;
19609: GO 19248
19611: POP
19612: POP
// end ;
19613: GO 18550
19615: POP
19616: POP
// result := result ^ buildings ;
19617: LD_ADDR_VAR 0 7
19621: PUSH
19622: LD_VAR 0 7
19626: PUSH
19627: LD_VAR 0 18
19631: ADD
19632: ST_TO_ADDR
// end else
19633: GO 19776
// begin for i = 1 to personel do
19635: LD_ADDR_VAR 0 8
19639: PUSH
19640: DOUBLE
19641: LD_INT 1
19643: DEC
19644: ST_TO_ADDR
19645: LD_VAR 0 6
19649: PUSH
19650: FOR_TO
19651: IFFALSE 19774
// begin if i > 4 then
19653: LD_VAR 0 8
19657: PUSH
19658: LD_INT 4
19660: GREATER
19661: IFFALSE 19665
// break ;
19663: GO 19774
// x := personel [ i ] ;
19665: LD_ADDR_VAR 0 13
19669: PUSH
19670: LD_VAR 0 6
19674: PUSH
19675: LD_VAR 0 8
19679: ARRAY
19680: ST_TO_ADDR
// if x = - 1 then
19681: LD_VAR 0 13
19685: PUSH
19686: LD_INT 1
19688: NEG
19689: EQUAL
19690: IFFALSE 19694
// continue ;
19692: GO 19650
// PrepareHuman ( false , i , skill ) ;
19694: LD_INT 0
19696: PPUSH
19697: LD_VAR 0 8
19701: PPUSH
19702: LD_VAR 0 4
19706: PPUSH
19707: CALL_OW 380
// un := CreateHuman ;
19711: LD_ADDR_VAR 0 14
19715: PUSH
19716: CALL_OW 44
19720: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19721: LD_VAR 0 14
19725: PPUSH
19726: LD_VAR 0 1
19730: PPUSH
19731: CALL_OW 250
19735: PPUSH
19736: LD_VAR 0 1
19740: PPUSH
19741: CALL_OW 251
19745: PPUSH
19746: LD_INT 10
19748: PPUSH
19749: LD_INT 0
19751: PPUSH
19752: CALL_OW 50
// result := result ^ un ;
19756: LD_ADDR_VAR 0 7
19760: PUSH
19761: LD_VAR 0 7
19765: PUSH
19766: LD_VAR 0 14
19770: ADD
19771: ST_TO_ADDR
// end ;
19772: GO 19650
19774: POP
19775: POP
// end ; end ;
19776: LD_VAR 0 7
19780: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
19781: LD_INT 0
19783: PPUSH
19784: PPUSH
19785: PPUSH
19786: PPUSH
19787: PPUSH
19788: PPUSH
19789: PPUSH
19790: PPUSH
19791: PPUSH
19792: PPUSH
19793: PPUSH
19794: PPUSH
19795: PPUSH
19796: PPUSH
19797: PPUSH
19798: PPUSH
// result := false ;
19799: LD_ADDR_VAR 0 3
19803: PUSH
19804: LD_INT 0
19806: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
19807: LD_VAR 0 1
19811: NOT
19812: PUSH
19813: LD_VAR 0 1
19817: PPUSH
19818: CALL_OW 266
19822: PUSH
19823: LD_INT 32
19825: PUSH
19826: LD_INT 33
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: IN
19833: NOT
19834: OR
19835: IFFALSE 19839
// exit ;
19837: GO 20948
// nat := GetNation ( tower ) ;
19839: LD_ADDR_VAR 0 12
19843: PUSH
19844: LD_VAR 0 1
19848: PPUSH
19849: CALL_OW 248
19853: ST_TO_ADDR
// side := GetSide ( tower ) ;
19854: LD_ADDR_VAR 0 16
19858: PUSH
19859: LD_VAR 0 1
19863: PPUSH
19864: CALL_OW 255
19868: ST_TO_ADDR
// x := GetX ( tower ) ;
19869: LD_ADDR_VAR 0 10
19873: PUSH
19874: LD_VAR 0 1
19878: PPUSH
19879: CALL_OW 250
19883: ST_TO_ADDR
// y := GetY ( tower ) ;
19884: LD_ADDR_VAR 0 11
19888: PUSH
19889: LD_VAR 0 1
19893: PPUSH
19894: CALL_OW 251
19898: ST_TO_ADDR
// if not x or not y then
19899: LD_VAR 0 10
19903: NOT
19904: PUSH
19905: LD_VAR 0 11
19909: NOT
19910: OR
19911: IFFALSE 19915
// exit ;
19913: GO 20948
// weapon := 0 ;
19915: LD_ADDR_VAR 0 18
19919: PUSH
19920: LD_INT 0
19922: ST_TO_ADDR
// fac_list := [ ] ;
19923: LD_ADDR_VAR 0 17
19927: PUSH
19928: EMPTY
19929: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
19930: LD_ADDR_VAR 0 6
19934: PUSH
19935: LD_VAR 0 1
19939: PPUSH
19940: CALL_OW 274
19944: PPUSH
19945: LD_VAR 0 2
19949: PPUSH
19950: LD_INT 0
19952: PPUSH
19953: CALL 17519 0 3
19957: PPUSH
19958: LD_INT 30
19960: PUSH
19961: LD_INT 3
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PPUSH
19968: CALL_OW 72
19972: ST_TO_ADDR
// if not factories then
19973: LD_VAR 0 6
19977: NOT
19978: IFFALSE 19982
// exit ;
19980: GO 20948
// for i in factories do
19982: LD_ADDR_VAR 0 8
19986: PUSH
19987: LD_VAR 0 6
19991: PUSH
19992: FOR_IN
19993: IFFALSE 20018
// fac_list := fac_list union AvailableWeaponList ( i ) ;
19995: LD_ADDR_VAR 0 17
19999: PUSH
20000: LD_VAR 0 17
20004: PUSH
20005: LD_VAR 0 8
20009: PPUSH
20010: CALL_OW 478
20014: UNION
20015: ST_TO_ADDR
20016: GO 19992
20018: POP
20019: POP
// if not fac_list then
20020: LD_VAR 0 17
20024: NOT
20025: IFFALSE 20029
// exit ;
20027: GO 20948
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
20029: LD_ADDR_VAR 0 5
20033: PUSH
20034: LD_INT 4
20036: PUSH
20037: LD_INT 5
20039: PUSH
20040: LD_INT 9
20042: PUSH
20043: LD_INT 10
20045: PUSH
20046: LD_INT 6
20048: PUSH
20049: LD_INT 7
20051: PUSH
20052: LD_INT 11
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: PUSH
20064: LD_INT 27
20066: PUSH
20067: LD_INT 28
20069: PUSH
20070: LD_INT 26
20072: PUSH
20073: LD_INT 30
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 43
20084: PUSH
20085: LD_INT 44
20087: PUSH
20088: LD_INT 46
20090: PUSH
20091: LD_INT 45
20093: PUSH
20094: LD_INT 47
20096: PUSH
20097: LD_INT 49
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: LIST
20112: PUSH
20113: LD_VAR 0 12
20117: ARRAY
20118: ST_TO_ADDR
// list := list isect fac_list ;
20119: LD_ADDR_VAR 0 5
20123: PUSH
20124: LD_VAR 0 5
20128: PUSH
20129: LD_VAR 0 17
20133: ISECT
20134: ST_TO_ADDR
// if not list then
20135: LD_VAR 0 5
20139: NOT
20140: IFFALSE 20144
// exit ;
20142: GO 20948
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20144: LD_VAR 0 12
20148: PUSH
20149: LD_INT 3
20151: EQUAL
20152: PUSH
20153: LD_INT 49
20155: PUSH
20156: LD_VAR 0 5
20160: IN
20161: AND
20162: PUSH
20163: LD_INT 31
20165: PPUSH
20166: LD_VAR 0 16
20170: PPUSH
20171: CALL_OW 321
20175: PUSH
20176: LD_INT 2
20178: EQUAL
20179: AND
20180: IFFALSE 20240
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20182: LD_INT 22
20184: PUSH
20185: LD_VAR 0 16
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 35
20196: PUSH
20197: LD_INT 49
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 91
20206: PUSH
20207: LD_VAR 0 1
20211: PUSH
20212: LD_INT 10
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: LIST
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: LIST
20224: PPUSH
20225: CALL_OW 69
20229: NOT
20230: IFFALSE 20240
// weapon := ru_time_lapser ;
20232: LD_ADDR_VAR 0 18
20236: PUSH
20237: LD_INT 49
20239: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
20240: LD_VAR 0 12
20244: PUSH
20245: LD_INT 1
20247: PUSH
20248: LD_INT 2
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: IN
20255: PUSH
20256: LD_INT 11
20258: PUSH
20259: LD_VAR 0 5
20263: IN
20264: PUSH
20265: LD_INT 30
20267: PUSH
20268: LD_VAR 0 5
20272: IN
20273: OR
20274: AND
20275: PUSH
20276: LD_INT 6
20278: PPUSH
20279: LD_VAR 0 16
20283: PPUSH
20284: CALL_OW 321
20288: PUSH
20289: LD_INT 2
20291: EQUAL
20292: AND
20293: IFFALSE 20458
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
20295: LD_INT 22
20297: PUSH
20298: LD_VAR 0 16
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: PUSH
20307: LD_INT 2
20309: PUSH
20310: LD_INT 35
20312: PUSH
20313: LD_INT 11
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 35
20322: PUSH
20323: LD_INT 30
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 91
20337: PUSH
20338: LD_VAR 0 1
20342: PUSH
20343: LD_INT 18
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: LIST
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: LIST
20355: PPUSH
20356: CALL_OW 69
20360: NOT
20361: PUSH
20362: LD_INT 22
20364: PUSH
20365: LD_VAR 0 16
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: LD_INT 2
20376: PUSH
20377: LD_INT 30
20379: PUSH
20380: LD_INT 32
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 30
20389: PUSH
20390: LD_INT 33
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 91
20404: PUSH
20405: LD_VAR 0 1
20409: PUSH
20410: LD_INT 12
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: LIST
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: LIST
20422: PUSH
20423: EMPTY
20424: LIST
20425: PPUSH
20426: CALL_OW 69
20430: PUSH
20431: LD_INT 2
20433: GREATER
20434: AND
20435: IFFALSE 20458
// weapon := [ us_radar , ar_radar ] [ nat ] ;
20437: LD_ADDR_VAR 0 18
20441: PUSH
20442: LD_INT 11
20444: PUSH
20445: LD_INT 30
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: PUSH
20452: LD_VAR 0 12
20456: ARRAY
20457: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
20458: LD_VAR 0 18
20462: NOT
20463: PUSH
20464: LD_INT 40
20466: PPUSH
20467: LD_VAR 0 16
20471: PPUSH
20472: CALL_OW 321
20476: PUSH
20477: LD_INT 2
20479: EQUAL
20480: AND
20481: PUSH
20482: LD_INT 7
20484: PUSH
20485: LD_VAR 0 5
20489: IN
20490: PUSH
20491: LD_INT 28
20493: PUSH
20494: LD_VAR 0 5
20498: IN
20499: OR
20500: PUSH
20501: LD_INT 45
20503: PUSH
20504: LD_VAR 0 5
20508: IN
20509: OR
20510: AND
20511: IFFALSE 20765
// begin hex := GetHexInfo ( x , y ) ;
20513: LD_ADDR_VAR 0 4
20517: PUSH
20518: LD_VAR 0 10
20522: PPUSH
20523: LD_VAR 0 11
20527: PPUSH
20528: CALL_OW 546
20532: ST_TO_ADDR
// if hex [ 1 ] then
20533: LD_VAR 0 4
20537: PUSH
20538: LD_INT 1
20540: ARRAY
20541: IFFALSE 20545
// exit ;
20543: GO 20948
// height := hex [ 2 ] ;
20545: LD_ADDR_VAR 0 15
20549: PUSH
20550: LD_VAR 0 4
20554: PUSH
20555: LD_INT 2
20557: ARRAY
20558: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
20559: LD_ADDR_VAR 0 14
20563: PUSH
20564: LD_INT 0
20566: PUSH
20567: LD_INT 2
20569: PUSH
20570: LD_INT 3
20572: PUSH
20573: LD_INT 5
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: ST_TO_ADDR
// for i in tmp do
20582: LD_ADDR_VAR 0 8
20586: PUSH
20587: LD_VAR 0 14
20591: PUSH
20592: FOR_IN
20593: IFFALSE 20763
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
20595: LD_ADDR_VAR 0 9
20599: PUSH
20600: LD_VAR 0 10
20604: PPUSH
20605: LD_VAR 0 8
20609: PPUSH
20610: LD_INT 5
20612: PPUSH
20613: CALL_OW 272
20617: PUSH
20618: LD_VAR 0 11
20622: PPUSH
20623: LD_VAR 0 8
20627: PPUSH
20628: LD_INT 5
20630: PPUSH
20631: CALL_OW 273
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
20640: LD_VAR 0 9
20644: PUSH
20645: LD_INT 1
20647: ARRAY
20648: PPUSH
20649: LD_VAR 0 9
20653: PUSH
20654: LD_INT 2
20656: ARRAY
20657: PPUSH
20658: CALL_OW 488
20662: IFFALSE 20761
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
20664: LD_ADDR_VAR 0 4
20668: PUSH
20669: LD_VAR 0 9
20673: PUSH
20674: LD_INT 1
20676: ARRAY
20677: PPUSH
20678: LD_VAR 0 9
20682: PUSH
20683: LD_INT 2
20685: ARRAY
20686: PPUSH
20687: CALL_OW 546
20691: ST_TO_ADDR
// if hex [ 1 ] then
20692: LD_VAR 0 4
20696: PUSH
20697: LD_INT 1
20699: ARRAY
20700: IFFALSE 20704
// continue ;
20702: GO 20592
// h := hex [ 2 ] ;
20704: LD_ADDR_VAR 0 13
20708: PUSH
20709: LD_VAR 0 4
20713: PUSH
20714: LD_INT 2
20716: ARRAY
20717: ST_TO_ADDR
// if h + 7 < height then
20718: LD_VAR 0 13
20722: PUSH
20723: LD_INT 7
20725: PLUS
20726: PUSH
20727: LD_VAR 0 15
20731: LESS
20732: IFFALSE 20761
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
20734: LD_ADDR_VAR 0 18
20738: PUSH
20739: LD_INT 7
20741: PUSH
20742: LD_INT 28
20744: PUSH
20745: LD_INT 45
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: LIST
20752: PUSH
20753: LD_VAR 0 12
20757: ARRAY
20758: ST_TO_ADDR
// break ;
20759: GO 20763
// end ; end ; end ;
20761: GO 20592
20763: POP
20764: POP
// end ; if not weapon then
20765: LD_VAR 0 18
20769: NOT
20770: IFFALSE 20830
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
20772: LD_ADDR_VAR 0 5
20776: PUSH
20777: LD_VAR 0 5
20781: PUSH
20782: LD_INT 11
20784: PUSH
20785: LD_INT 30
20787: PUSH
20788: LD_INT 49
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: LIST
20795: DIFF
20796: ST_TO_ADDR
// if not list then
20797: LD_VAR 0 5
20801: NOT
20802: IFFALSE 20806
// exit ;
20804: GO 20948
// weapon := list [ rand ( 1 , list ) ] ;
20806: LD_ADDR_VAR 0 18
20810: PUSH
20811: LD_VAR 0 5
20815: PUSH
20816: LD_INT 1
20818: PPUSH
20819: LD_VAR 0 5
20823: PPUSH
20824: CALL_OW 12
20828: ARRAY
20829: ST_TO_ADDR
// end ; if weapon then
20830: LD_VAR 0 18
20834: IFFALSE 20948
// begin tmp := CostOfWeapon ( weapon ) ;
20836: LD_ADDR_VAR 0 14
20840: PUSH
20841: LD_VAR 0 18
20845: PPUSH
20846: CALL_OW 451
20850: ST_TO_ADDR
// j := GetBase ( tower ) ;
20851: LD_ADDR_VAR 0 9
20855: PUSH
20856: LD_VAR 0 1
20860: PPUSH
20861: CALL_OW 274
20865: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
20866: LD_VAR 0 9
20870: PPUSH
20871: LD_INT 1
20873: PPUSH
20874: CALL_OW 275
20878: PUSH
20879: LD_VAR 0 14
20883: PUSH
20884: LD_INT 1
20886: ARRAY
20887: GREATEREQUAL
20888: PUSH
20889: LD_VAR 0 9
20893: PPUSH
20894: LD_INT 2
20896: PPUSH
20897: CALL_OW 275
20901: PUSH
20902: LD_VAR 0 14
20906: PUSH
20907: LD_INT 2
20909: ARRAY
20910: GREATEREQUAL
20911: AND
20912: PUSH
20913: LD_VAR 0 9
20917: PPUSH
20918: LD_INT 3
20920: PPUSH
20921: CALL_OW 275
20925: PUSH
20926: LD_VAR 0 14
20930: PUSH
20931: LD_INT 3
20933: ARRAY
20934: GREATEREQUAL
20935: AND
20936: IFFALSE 20948
// result := weapon ;
20938: LD_ADDR_VAR 0 3
20942: PUSH
20943: LD_VAR 0 18
20947: ST_TO_ADDR
// end ; end ;
20948: LD_VAR 0 3
20952: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
20953: LD_INT 0
20955: PPUSH
20956: PPUSH
// result := true ;
20957: LD_ADDR_VAR 0 3
20961: PUSH
20962: LD_INT 1
20964: ST_TO_ADDR
// if array1 = array2 then
20965: LD_VAR 0 1
20969: PUSH
20970: LD_VAR 0 2
20974: EQUAL
20975: IFFALSE 21035
// begin for i = 1 to array1 do
20977: LD_ADDR_VAR 0 4
20981: PUSH
20982: DOUBLE
20983: LD_INT 1
20985: DEC
20986: ST_TO_ADDR
20987: LD_VAR 0 1
20991: PUSH
20992: FOR_TO
20993: IFFALSE 21031
// if array1 [ i ] <> array2 [ i ] then
20995: LD_VAR 0 1
20999: PUSH
21000: LD_VAR 0 4
21004: ARRAY
21005: PUSH
21006: LD_VAR 0 2
21010: PUSH
21011: LD_VAR 0 4
21015: ARRAY
21016: NONEQUAL
21017: IFFALSE 21029
// begin result := false ;
21019: LD_ADDR_VAR 0 3
21023: PUSH
21024: LD_INT 0
21026: ST_TO_ADDR
// break ;
21027: GO 21031
// end ;
21029: GO 20992
21031: POP
21032: POP
// end else
21033: GO 21043
// result := false ;
21035: LD_ADDR_VAR 0 3
21039: PUSH
21040: LD_INT 0
21042: ST_TO_ADDR
// end ;
21043: LD_VAR 0 3
21047: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
21048: LD_INT 0
21050: PPUSH
21051: PPUSH
// if not array1 or not array2 then
21052: LD_VAR 0 1
21056: NOT
21057: PUSH
21058: LD_VAR 0 2
21062: NOT
21063: OR
21064: IFFALSE 21068
// exit ;
21066: GO 21132
// result := true ;
21068: LD_ADDR_VAR 0 3
21072: PUSH
21073: LD_INT 1
21075: ST_TO_ADDR
// for i = 1 to array1 do
21076: LD_ADDR_VAR 0 4
21080: PUSH
21081: DOUBLE
21082: LD_INT 1
21084: DEC
21085: ST_TO_ADDR
21086: LD_VAR 0 1
21090: PUSH
21091: FOR_TO
21092: IFFALSE 21130
// if array1 [ i ] <> array2 [ i ] then
21094: LD_VAR 0 1
21098: PUSH
21099: LD_VAR 0 4
21103: ARRAY
21104: PUSH
21105: LD_VAR 0 2
21109: PUSH
21110: LD_VAR 0 4
21114: ARRAY
21115: NONEQUAL
21116: IFFALSE 21128
// begin result := false ;
21118: LD_ADDR_VAR 0 3
21122: PUSH
21123: LD_INT 0
21125: ST_TO_ADDR
// break ;
21126: GO 21130
// end ;
21128: GO 21091
21130: POP
21131: POP
// end ;
21132: LD_VAR 0 3
21136: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21137: LD_INT 0
21139: PPUSH
21140: PPUSH
21141: PPUSH
// pom := GetBase ( fac ) ;
21142: LD_ADDR_VAR 0 5
21146: PUSH
21147: LD_VAR 0 1
21151: PPUSH
21152: CALL_OW 274
21156: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
21157: LD_ADDR_VAR 0 4
21161: PUSH
21162: LD_VAR 0 2
21166: PUSH
21167: LD_INT 1
21169: ARRAY
21170: PPUSH
21171: LD_VAR 0 2
21175: PUSH
21176: LD_INT 2
21178: ARRAY
21179: PPUSH
21180: LD_VAR 0 2
21184: PUSH
21185: LD_INT 3
21187: ARRAY
21188: PPUSH
21189: LD_VAR 0 2
21193: PUSH
21194: LD_INT 4
21196: ARRAY
21197: PPUSH
21198: CALL_OW 449
21202: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21203: LD_ADDR_VAR 0 3
21207: PUSH
21208: LD_VAR 0 5
21212: PPUSH
21213: LD_INT 1
21215: PPUSH
21216: CALL_OW 275
21220: PUSH
21221: LD_VAR 0 4
21225: PUSH
21226: LD_INT 1
21228: ARRAY
21229: GREATEREQUAL
21230: PUSH
21231: LD_VAR 0 5
21235: PPUSH
21236: LD_INT 2
21238: PPUSH
21239: CALL_OW 275
21243: PUSH
21244: LD_VAR 0 4
21248: PUSH
21249: LD_INT 2
21251: ARRAY
21252: GREATEREQUAL
21253: AND
21254: PUSH
21255: LD_VAR 0 5
21259: PPUSH
21260: LD_INT 3
21262: PPUSH
21263: CALL_OW 275
21267: PUSH
21268: LD_VAR 0 4
21272: PUSH
21273: LD_INT 3
21275: ARRAY
21276: GREATEREQUAL
21277: AND
21278: ST_TO_ADDR
// end ;
21279: LD_VAR 0 3
21283: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
21284: LD_INT 0
21286: PPUSH
21287: PPUSH
21288: PPUSH
21289: PPUSH
// pom := GetBase ( building ) ;
21290: LD_ADDR_VAR 0 3
21294: PUSH
21295: LD_VAR 0 1
21299: PPUSH
21300: CALL_OW 274
21304: ST_TO_ADDR
// if not pom then
21305: LD_VAR 0 3
21309: NOT
21310: IFFALSE 21314
// exit ;
21312: GO 21484
// btype := GetBType ( building ) ;
21314: LD_ADDR_VAR 0 5
21318: PUSH
21319: LD_VAR 0 1
21323: PPUSH
21324: CALL_OW 266
21328: ST_TO_ADDR
// if btype = b_armoury then
21329: LD_VAR 0 5
21333: PUSH
21334: LD_INT 4
21336: EQUAL
21337: IFFALSE 21347
// btype := b_barracks ;
21339: LD_ADDR_VAR 0 5
21343: PUSH
21344: LD_INT 5
21346: ST_TO_ADDR
// if btype = b_depot then
21347: LD_VAR 0 5
21351: PUSH
21352: LD_INT 0
21354: EQUAL
21355: IFFALSE 21365
// btype := b_warehouse ;
21357: LD_ADDR_VAR 0 5
21361: PUSH
21362: LD_INT 1
21364: ST_TO_ADDR
// if btype = b_workshop then
21365: LD_VAR 0 5
21369: PUSH
21370: LD_INT 2
21372: EQUAL
21373: IFFALSE 21383
// btype := b_factory ;
21375: LD_ADDR_VAR 0 5
21379: PUSH
21380: LD_INT 3
21382: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21383: LD_ADDR_VAR 0 4
21387: PUSH
21388: LD_VAR 0 5
21392: PPUSH
21393: LD_VAR 0 1
21397: PPUSH
21398: CALL_OW 248
21402: PPUSH
21403: CALL_OW 450
21407: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21408: LD_ADDR_VAR 0 2
21412: PUSH
21413: LD_VAR 0 3
21417: PPUSH
21418: LD_INT 1
21420: PPUSH
21421: CALL_OW 275
21425: PUSH
21426: LD_VAR 0 4
21430: PUSH
21431: LD_INT 1
21433: ARRAY
21434: GREATEREQUAL
21435: PUSH
21436: LD_VAR 0 3
21440: PPUSH
21441: LD_INT 2
21443: PPUSH
21444: CALL_OW 275
21448: PUSH
21449: LD_VAR 0 4
21453: PUSH
21454: LD_INT 2
21456: ARRAY
21457: GREATEREQUAL
21458: AND
21459: PUSH
21460: LD_VAR 0 3
21464: PPUSH
21465: LD_INT 3
21467: PPUSH
21468: CALL_OW 275
21472: PUSH
21473: LD_VAR 0 4
21477: PUSH
21478: LD_INT 3
21480: ARRAY
21481: GREATEREQUAL
21482: AND
21483: ST_TO_ADDR
// end ;
21484: LD_VAR 0 2
21488: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
21489: LD_INT 0
21491: PPUSH
21492: PPUSH
21493: PPUSH
// pom := GetBase ( building ) ;
21494: LD_ADDR_VAR 0 4
21498: PUSH
21499: LD_VAR 0 1
21503: PPUSH
21504: CALL_OW 274
21508: ST_TO_ADDR
// if not pom then
21509: LD_VAR 0 4
21513: NOT
21514: IFFALSE 21518
// exit ;
21516: GO 21619
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21518: LD_ADDR_VAR 0 5
21522: PUSH
21523: LD_VAR 0 2
21527: PPUSH
21528: LD_VAR 0 1
21532: PPUSH
21533: CALL_OW 248
21537: PPUSH
21538: CALL_OW 450
21542: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21543: LD_ADDR_VAR 0 3
21547: PUSH
21548: LD_VAR 0 4
21552: PPUSH
21553: LD_INT 1
21555: PPUSH
21556: CALL_OW 275
21560: PUSH
21561: LD_VAR 0 5
21565: PUSH
21566: LD_INT 1
21568: ARRAY
21569: GREATEREQUAL
21570: PUSH
21571: LD_VAR 0 4
21575: PPUSH
21576: LD_INT 2
21578: PPUSH
21579: CALL_OW 275
21583: PUSH
21584: LD_VAR 0 5
21588: PUSH
21589: LD_INT 2
21591: ARRAY
21592: GREATEREQUAL
21593: AND
21594: PUSH
21595: LD_VAR 0 4
21599: PPUSH
21600: LD_INT 3
21602: PPUSH
21603: CALL_OW 275
21607: PUSH
21608: LD_VAR 0 5
21612: PUSH
21613: LD_INT 3
21615: ARRAY
21616: GREATEREQUAL
21617: AND
21618: ST_TO_ADDR
// end ;
21619: LD_VAR 0 3
21623: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
21624: LD_INT 0
21626: PPUSH
21627: PPUSH
21628: PPUSH
21629: PPUSH
21630: PPUSH
21631: PPUSH
21632: PPUSH
21633: PPUSH
21634: PPUSH
21635: PPUSH
21636: PPUSH
// result := false ;
21637: LD_ADDR_VAR 0 8
21641: PUSH
21642: LD_INT 0
21644: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
21645: LD_VAR 0 5
21649: NOT
21650: PUSH
21651: LD_VAR 0 1
21655: NOT
21656: OR
21657: PUSH
21658: LD_VAR 0 2
21662: NOT
21663: OR
21664: PUSH
21665: LD_VAR 0 3
21669: NOT
21670: OR
21671: IFFALSE 21675
// exit ;
21673: GO 22489
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
21675: LD_ADDR_VAR 0 14
21679: PUSH
21680: LD_VAR 0 1
21684: PPUSH
21685: LD_VAR 0 2
21689: PPUSH
21690: LD_VAR 0 3
21694: PPUSH
21695: LD_VAR 0 4
21699: PPUSH
21700: LD_VAR 0 5
21704: PUSH
21705: LD_INT 1
21707: ARRAY
21708: PPUSH
21709: CALL_OW 248
21713: PPUSH
21714: LD_INT 0
21716: PPUSH
21717: CALL 23726 0 6
21721: ST_TO_ADDR
// if not hexes then
21722: LD_VAR 0 14
21726: NOT
21727: IFFALSE 21731
// exit ;
21729: GO 22489
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21731: LD_ADDR_VAR 0 17
21735: PUSH
21736: LD_VAR 0 5
21740: PPUSH
21741: LD_INT 22
21743: PUSH
21744: LD_VAR 0 13
21748: PPUSH
21749: CALL_OW 255
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PUSH
21758: LD_INT 2
21760: PUSH
21761: LD_INT 30
21763: PUSH
21764: LD_INT 0
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: LD_INT 30
21773: PUSH
21774: LD_INT 1
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: LIST
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PPUSH
21790: CALL_OW 72
21794: ST_TO_ADDR
// for i = 1 to hexes do
21795: LD_ADDR_VAR 0 9
21799: PUSH
21800: DOUBLE
21801: LD_INT 1
21803: DEC
21804: ST_TO_ADDR
21805: LD_VAR 0 14
21809: PUSH
21810: FOR_TO
21811: IFFALSE 22487
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21813: LD_ADDR_VAR 0 13
21817: PUSH
21818: LD_VAR 0 14
21822: PUSH
21823: LD_VAR 0 9
21827: ARRAY
21828: PUSH
21829: LD_INT 1
21831: ARRAY
21832: PPUSH
21833: LD_VAR 0 14
21837: PUSH
21838: LD_VAR 0 9
21842: ARRAY
21843: PUSH
21844: LD_INT 2
21846: ARRAY
21847: PPUSH
21848: CALL_OW 428
21852: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
21853: LD_VAR 0 14
21857: PUSH
21858: LD_VAR 0 9
21862: ARRAY
21863: PUSH
21864: LD_INT 1
21866: ARRAY
21867: PPUSH
21868: LD_VAR 0 14
21872: PUSH
21873: LD_VAR 0 9
21877: ARRAY
21878: PUSH
21879: LD_INT 2
21881: ARRAY
21882: PPUSH
21883: CALL_OW 351
21887: PUSH
21888: LD_VAR 0 14
21892: PUSH
21893: LD_VAR 0 9
21897: ARRAY
21898: PUSH
21899: LD_INT 1
21901: ARRAY
21902: PPUSH
21903: LD_VAR 0 14
21907: PUSH
21908: LD_VAR 0 9
21912: ARRAY
21913: PUSH
21914: LD_INT 2
21916: ARRAY
21917: PPUSH
21918: CALL_OW 488
21922: NOT
21923: OR
21924: PUSH
21925: LD_VAR 0 13
21929: PPUSH
21930: CALL_OW 247
21934: PUSH
21935: LD_INT 3
21937: EQUAL
21938: OR
21939: IFFALSE 21945
// exit ;
21941: POP
21942: POP
21943: GO 22489
// if not tmp then
21945: LD_VAR 0 13
21949: NOT
21950: IFFALSE 21954
// continue ;
21952: GO 21810
// result := true ;
21954: LD_ADDR_VAR 0 8
21958: PUSH
21959: LD_INT 1
21961: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
21962: LD_VAR 0 6
21966: PUSH
21967: LD_VAR 0 13
21971: PPUSH
21972: CALL_OW 247
21976: PUSH
21977: LD_INT 2
21979: EQUAL
21980: AND
21981: PUSH
21982: LD_VAR 0 13
21986: PPUSH
21987: CALL_OW 263
21991: PUSH
21992: LD_INT 1
21994: EQUAL
21995: AND
21996: IFFALSE 22160
// begin if IsDrivenBy ( tmp ) then
21998: LD_VAR 0 13
22002: PPUSH
22003: CALL_OW 311
22007: IFFALSE 22011
// continue ;
22009: GO 21810
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
22011: LD_VAR 0 6
22015: PPUSH
22016: LD_INT 3
22018: PUSH
22019: LD_INT 60
22021: PUSH
22022: EMPTY
22023: LIST
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 3
22031: PUSH
22032: LD_INT 55
22034: PUSH
22035: EMPTY
22036: LIST
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PPUSH
22046: CALL_OW 72
22050: IFFALSE 22158
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
22052: LD_ADDR_VAR 0 18
22056: PUSH
22057: LD_VAR 0 6
22061: PPUSH
22062: LD_INT 3
22064: PUSH
22065: LD_INT 60
22067: PUSH
22068: EMPTY
22069: LIST
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: LD_INT 3
22077: PUSH
22078: LD_INT 55
22080: PUSH
22081: EMPTY
22082: LIST
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PPUSH
22092: CALL_OW 72
22096: PUSH
22097: LD_INT 1
22099: ARRAY
22100: ST_TO_ADDR
// if IsInUnit ( driver ) then
22101: LD_VAR 0 18
22105: PPUSH
22106: CALL_OW 310
22110: IFFALSE 22121
// ComExit ( driver ) ;
22112: LD_VAR 0 18
22116: PPUSH
22117: CALL 46910 0 1
// AddComEnterUnit ( driver , tmp ) ;
22121: LD_VAR 0 18
22125: PPUSH
22126: LD_VAR 0 13
22130: PPUSH
22131: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
22135: LD_VAR 0 18
22139: PPUSH
22140: LD_VAR 0 7
22144: PPUSH
22145: CALL_OW 173
// AddComExitVehicle ( driver ) ;
22149: LD_VAR 0 18
22153: PPUSH
22154: CALL_OW 181
// end ; continue ;
22158: GO 21810
// end ; if not cleaners or not tmp in cleaners then
22160: LD_VAR 0 6
22164: NOT
22165: PUSH
22166: LD_VAR 0 13
22170: PUSH
22171: LD_VAR 0 6
22175: IN
22176: NOT
22177: OR
22178: IFFALSE 22485
// begin if dep then
22180: LD_VAR 0 17
22184: IFFALSE 22320
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
22186: LD_ADDR_VAR 0 16
22190: PUSH
22191: LD_VAR 0 17
22195: PUSH
22196: LD_INT 1
22198: ARRAY
22199: PPUSH
22200: CALL_OW 250
22204: PPUSH
22205: LD_VAR 0 17
22209: PUSH
22210: LD_INT 1
22212: ARRAY
22213: PPUSH
22214: CALL_OW 254
22218: PPUSH
22219: LD_INT 5
22221: PPUSH
22222: CALL_OW 272
22226: PUSH
22227: LD_VAR 0 17
22231: PUSH
22232: LD_INT 1
22234: ARRAY
22235: PPUSH
22236: CALL_OW 251
22240: PPUSH
22241: LD_VAR 0 17
22245: PUSH
22246: LD_INT 1
22248: ARRAY
22249: PPUSH
22250: CALL_OW 254
22254: PPUSH
22255: LD_INT 5
22257: PPUSH
22258: CALL_OW 273
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
22267: LD_VAR 0 16
22271: PUSH
22272: LD_INT 1
22274: ARRAY
22275: PPUSH
22276: LD_VAR 0 16
22280: PUSH
22281: LD_INT 2
22283: ARRAY
22284: PPUSH
22285: CALL_OW 488
22289: IFFALSE 22320
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
22291: LD_VAR 0 13
22295: PPUSH
22296: LD_VAR 0 16
22300: PUSH
22301: LD_INT 1
22303: ARRAY
22304: PPUSH
22305: LD_VAR 0 16
22309: PUSH
22310: LD_INT 2
22312: ARRAY
22313: PPUSH
22314: CALL_OW 111
// continue ;
22318: GO 21810
// end ; end ; r := GetDir ( tmp ) ;
22320: LD_ADDR_VAR 0 15
22324: PUSH
22325: LD_VAR 0 13
22329: PPUSH
22330: CALL_OW 254
22334: ST_TO_ADDR
// if r = 5 then
22335: LD_VAR 0 15
22339: PUSH
22340: LD_INT 5
22342: EQUAL
22343: IFFALSE 22353
// r := 0 ;
22345: LD_ADDR_VAR 0 15
22349: PUSH
22350: LD_INT 0
22352: ST_TO_ADDR
// for j = r to 5 do
22353: LD_ADDR_VAR 0 10
22357: PUSH
22358: DOUBLE
22359: LD_VAR 0 15
22363: DEC
22364: ST_TO_ADDR
22365: LD_INT 5
22367: PUSH
22368: FOR_TO
22369: IFFALSE 22483
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
22371: LD_ADDR_VAR 0 11
22375: PUSH
22376: LD_VAR 0 13
22380: PPUSH
22381: CALL_OW 250
22385: PPUSH
22386: LD_VAR 0 10
22390: PPUSH
22391: LD_INT 2
22393: PPUSH
22394: CALL_OW 272
22398: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
22399: LD_ADDR_VAR 0 12
22403: PUSH
22404: LD_VAR 0 13
22408: PPUSH
22409: CALL_OW 251
22413: PPUSH
22414: LD_VAR 0 10
22418: PPUSH
22419: LD_INT 2
22421: PPUSH
22422: CALL_OW 273
22426: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
22427: LD_VAR 0 11
22431: PPUSH
22432: LD_VAR 0 12
22436: PPUSH
22437: CALL_OW 488
22441: PUSH
22442: LD_VAR 0 11
22446: PPUSH
22447: LD_VAR 0 12
22451: PPUSH
22452: CALL_OW 428
22456: NOT
22457: AND
22458: IFFALSE 22481
// begin ComMoveXY ( tmp , _x , _y ) ;
22460: LD_VAR 0 13
22464: PPUSH
22465: LD_VAR 0 11
22469: PPUSH
22470: LD_VAR 0 12
22474: PPUSH
22475: CALL_OW 111
// break ;
22479: GO 22483
// end ; end ;
22481: GO 22368
22483: POP
22484: POP
// end ; end ;
22485: GO 21810
22487: POP
22488: POP
// end ;
22489: LD_VAR 0 8
22493: RET
// export function BuildingTechInvented ( side , btype ) ; begin
22494: LD_INT 0
22496: PPUSH
// result := true ;
22497: LD_ADDR_VAR 0 3
22501: PUSH
22502: LD_INT 1
22504: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
22505: LD_VAR 0 2
22509: PUSH
22510: LD_INT 24
22512: DOUBLE
22513: EQUAL
22514: IFTRUE 22524
22516: LD_INT 33
22518: DOUBLE
22519: EQUAL
22520: IFTRUE 22524
22522: GO 22549
22524: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
22525: LD_ADDR_VAR 0 3
22529: PUSH
22530: LD_INT 32
22532: PPUSH
22533: LD_VAR 0 1
22537: PPUSH
22538: CALL_OW 321
22542: PUSH
22543: LD_INT 2
22545: EQUAL
22546: ST_TO_ADDR
22547: GO 22869
22549: LD_INT 20
22551: DOUBLE
22552: EQUAL
22553: IFTRUE 22557
22555: GO 22582
22557: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
22558: LD_ADDR_VAR 0 3
22562: PUSH
22563: LD_INT 6
22565: PPUSH
22566: LD_VAR 0 1
22570: PPUSH
22571: CALL_OW 321
22575: PUSH
22576: LD_INT 2
22578: EQUAL
22579: ST_TO_ADDR
22580: GO 22869
22582: LD_INT 22
22584: DOUBLE
22585: EQUAL
22586: IFTRUE 22596
22588: LD_INT 36
22590: DOUBLE
22591: EQUAL
22592: IFTRUE 22596
22594: GO 22621
22596: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
22597: LD_ADDR_VAR 0 3
22601: PUSH
22602: LD_INT 15
22604: PPUSH
22605: LD_VAR 0 1
22609: PPUSH
22610: CALL_OW 321
22614: PUSH
22615: LD_INT 2
22617: EQUAL
22618: ST_TO_ADDR
22619: GO 22869
22621: LD_INT 30
22623: DOUBLE
22624: EQUAL
22625: IFTRUE 22629
22627: GO 22654
22629: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
22630: LD_ADDR_VAR 0 3
22634: PUSH
22635: LD_INT 20
22637: PPUSH
22638: LD_VAR 0 1
22642: PPUSH
22643: CALL_OW 321
22647: PUSH
22648: LD_INT 2
22650: EQUAL
22651: ST_TO_ADDR
22652: GO 22869
22654: LD_INT 28
22656: DOUBLE
22657: EQUAL
22658: IFTRUE 22668
22660: LD_INT 21
22662: DOUBLE
22663: EQUAL
22664: IFTRUE 22668
22666: GO 22693
22668: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
22669: LD_ADDR_VAR 0 3
22673: PUSH
22674: LD_INT 21
22676: PPUSH
22677: LD_VAR 0 1
22681: PPUSH
22682: CALL_OW 321
22686: PUSH
22687: LD_INT 2
22689: EQUAL
22690: ST_TO_ADDR
22691: GO 22869
22693: LD_INT 16
22695: DOUBLE
22696: EQUAL
22697: IFTRUE 22701
22699: GO 22728
22701: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
22702: LD_ADDR_VAR 0 3
22706: PUSH
22707: LD_EXP 107
22711: PPUSH
22712: LD_VAR 0 1
22716: PPUSH
22717: CALL_OW 321
22721: PUSH
22722: LD_INT 2
22724: EQUAL
22725: ST_TO_ADDR
22726: GO 22869
22728: LD_INT 19
22730: DOUBLE
22731: EQUAL
22732: IFTRUE 22742
22734: LD_INT 23
22736: DOUBLE
22737: EQUAL
22738: IFTRUE 22742
22740: GO 22769
22742: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
22743: LD_ADDR_VAR 0 3
22747: PUSH
22748: LD_EXP 106
22752: PPUSH
22753: LD_VAR 0 1
22757: PPUSH
22758: CALL_OW 321
22762: PUSH
22763: LD_INT 2
22765: EQUAL
22766: ST_TO_ADDR
22767: GO 22869
22769: LD_INT 17
22771: DOUBLE
22772: EQUAL
22773: IFTRUE 22777
22775: GO 22802
22777: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
22778: LD_ADDR_VAR 0 3
22782: PUSH
22783: LD_INT 39
22785: PPUSH
22786: LD_VAR 0 1
22790: PPUSH
22791: CALL_OW 321
22795: PUSH
22796: LD_INT 2
22798: EQUAL
22799: ST_TO_ADDR
22800: GO 22869
22802: LD_INT 18
22804: DOUBLE
22805: EQUAL
22806: IFTRUE 22810
22808: GO 22835
22810: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
22811: LD_ADDR_VAR 0 3
22815: PUSH
22816: LD_INT 40
22818: PPUSH
22819: LD_VAR 0 1
22823: PPUSH
22824: CALL_OW 321
22828: PUSH
22829: LD_INT 2
22831: EQUAL
22832: ST_TO_ADDR
22833: GO 22869
22835: LD_INT 27
22837: DOUBLE
22838: EQUAL
22839: IFTRUE 22843
22841: GO 22868
22843: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
22844: LD_ADDR_VAR 0 3
22848: PUSH
22849: LD_INT 35
22851: PPUSH
22852: LD_VAR 0 1
22856: PPUSH
22857: CALL_OW 321
22861: PUSH
22862: LD_INT 2
22864: EQUAL
22865: ST_TO_ADDR
22866: GO 22869
22868: POP
// end ;
22869: LD_VAR 0 3
22873: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
22874: LD_INT 0
22876: PPUSH
22877: PPUSH
22878: PPUSH
22879: PPUSH
22880: PPUSH
22881: PPUSH
22882: PPUSH
22883: PPUSH
22884: PPUSH
22885: PPUSH
22886: PPUSH
// result := false ;
22887: LD_ADDR_VAR 0 6
22891: PUSH
22892: LD_INT 0
22894: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
22895: LD_VAR 0 1
22899: NOT
22900: PUSH
22901: LD_VAR 0 1
22905: PPUSH
22906: CALL_OW 266
22910: PUSH
22911: LD_INT 0
22913: PUSH
22914: LD_INT 1
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: IN
22921: NOT
22922: OR
22923: PUSH
22924: LD_VAR 0 2
22928: NOT
22929: OR
22930: PUSH
22931: LD_VAR 0 5
22935: PUSH
22936: LD_INT 0
22938: PUSH
22939: LD_INT 1
22941: PUSH
22942: LD_INT 2
22944: PUSH
22945: LD_INT 3
22947: PUSH
22948: LD_INT 4
22950: PUSH
22951: LD_INT 5
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: IN
22962: NOT
22963: OR
22964: PUSH
22965: LD_VAR 0 3
22969: PPUSH
22970: LD_VAR 0 4
22974: PPUSH
22975: CALL_OW 488
22979: NOT
22980: OR
22981: IFFALSE 22985
// exit ;
22983: GO 23721
// side := GetSide ( depot ) ;
22985: LD_ADDR_VAR 0 9
22989: PUSH
22990: LD_VAR 0 1
22994: PPUSH
22995: CALL_OW 255
22999: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
23000: LD_VAR 0 9
23004: PPUSH
23005: LD_VAR 0 2
23009: PPUSH
23010: CALL 22494 0 2
23014: NOT
23015: IFFALSE 23019
// exit ;
23017: GO 23721
// pom := GetBase ( depot ) ;
23019: LD_ADDR_VAR 0 10
23023: PUSH
23024: LD_VAR 0 1
23028: PPUSH
23029: CALL_OW 274
23033: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
23034: LD_ADDR_VAR 0 11
23038: PUSH
23039: LD_VAR 0 2
23043: PPUSH
23044: LD_VAR 0 1
23048: PPUSH
23049: CALL_OW 248
23053: PPUSH
23054: CALL_OW 450
23058: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23059: LD_VAR 0 10
23063: PPUSH
23064: LD_INT 1
23066: PPUSH
23067: CALL_OW 275
23071: PUSH
23072: LD_VAR 0 11
23076: PUSH
23077: LD_INT 1
23079: ARRAY
23080: GREATEREQUAL
23081: PUSH
23082: LD_VAR 0 10
23086: PPUSH
23087: LD_INT 2
23089: PPUSH
23090: CALL_OW 275
23094: PUSH
23095: LD_VAR 0 11
23099: PUSH
23100: LD_INT 2
23102: ARRAY
23103: GREATEREQUAL
23104: AND
23105: PUSH
23106: LD_VAR 0 10
23110: PPUSH
23111: LD_INT 3
23113: PPUSH
23114: CALL_OW 275
23118: PUSH
23119: LD_VAR 0 11
23123: PUSH
23124: LD_INT 3
23126: ARRAY
23127: GREATEREQUAL
23128: AND
23129: NOT
23130: IFFALSE 23134
// exit ;
23132: GO 23721
// if GetBType ( depot ) = b_depot then
23134: LD_VAR 0 1
23138: PPUSH
23139: CALL_OW 266
23143: PUSH
23144: LD_INT 0
23146: EQUAL
23147: IFFALSE 23159
// dist := 28 else
23149: LD_ADDR_VAR 0 14
23153: PUSH
23154: LD_INT 28
23156: ST_TO_ADDR
23157: GO 23167
// dist := 36 ;
23159: LD_ADDR_VAR 0 14
23163: PUSH
23164: LD_INT 36
23166: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
23167: LD_VAR 0 1
23171: PPUSH
23172: LD_VAR 0 3
23176: PPUSH
23177: LD_VAR 0 4
23181: PPUSH
23182: CALL_OW 297
23186: PUSH
23187: LD_VAR 0 14
23191: GREATER
23192: IFFALSE 23196
// exit ;
23194: GO 23721
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
23196: LD_ADDR_VAR 0 12
23200: PUSH
23201: LD_VAR 0 2
23205: PPUSH
23206: LD_VAR 0 3
23210: PPUSH
23211: LD_VAR 0 4
23215: PPUSH
23216: LD_VAR 0 5
23220: PPUSH
23221: LD_VAR 0 1
23225: PPUSH
23226: CALL_OW 248
23230: PPUSH
23231: LD_INT 0
23233: PPUSH
23234: CALL 23726 0 6
23238: ST_TO_ADDR
// if not hexes then
23239: LD_VAR 0 12
23243: NOT
23244: IFFALSE 23248
// exit ;
23246: GO 23721
// hex := GetHexInfo ( x , y ) ;
23248: LD_ADDR_VAR 0 15
23252: PUSH
23253: LD_VAR 0 3
23257: PPUSH
23258: LD_VAR 0 4
23262: PPUSH
23263: CALL_OW 546
23267: ST_TO_ADDR
// if hex [ 1 ] then
23268: LD_VAR 0 15
23272: PUSH
23273: LD_INT 1
23275: ARRAY
23276: IFFALSE 23280
// exit ;
23278: GO 23721
// height := hex [ 2 ] ;
23280: LD_ADDR_VAR 0 13
23284: PUSH
23285: LD_VAR 0 15
23289: PUSH
23290: LD_INT 2
23292: ARRAY
23293: ST_TO_ADDR
// for i = 1 to hexes do
23294: LD_ADDR_VAR 0 7
23298: PUSH
23299: DOUBLE
23300: LD_INT 1
23302: DEC
23303: ST_TO_ADDR
23304: LD_VAR 0 12
23308: PUSH
23309: FOR_TO
23310: IFFALSE 23640
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
23312: LD_VAR 0 12
23316: PUSH
23317: LD_VAR 0 7
23321: ARRAY
23322: PUSH
23323: LD_INT 1
23325: ARRAY
23326: PPUSH
23327: LD_VAR 0 12
23331: PUSH
23332: LD_VAR 0 7
23336: ARRAY
23337: PUSH
23338: LD_INT 2
23340: ARRAY
23341: PPUSH
23342: CALL_OW 488
23346: NOT
23347: PUSH
23348: LD_VAR 0 12
23352: PUSH
23353: LD_VAR 0 7
23357: ARRAY
23358: PUSH
23359: LD_INT 1
23361: ARRAY
23362: PPUSH
23363: LD_VAR 0 12
23367: PUSH
23368: LD_VAR 0 7
23372: ARRAY
23373: PUSH
23374: LD_INT 2
23376: ARRAY
23377: PPUSH
23378: CALL_OW 428
23382: PUSH
23383: LD_INT 0
23385: GREATER
23386: OR
23387: PUSH
23388: LD_VAR 0 12
23392: PUSH
23393: LD_VAR 0 7
23397: ARRAY
23398: PUSH
23399: LD_INT 1
23401: ARRAY
23402: PPUSH
23403: LD_VAR 0 12
23407: PUSH
23408: LD_VAR 0 7
23412: ARRAY
23413: PUSH
23414: LD_INT 2
23416: ARRAY
23417: PPUSH
23418: CALL_OW 351
23422: OR
23423: IFFALSE 23429
// exit ;
23425: POP
23426: POP
23427: GO 23721
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23429: LD_ADDR_VAR 0 8
23433: PUSH
23434: LD_VAR 0 12
23438: PUSH
23439: LD_VAR 0 7
23443: ARRAY
23444: PUSH
23445: LD_INT 1
23447: ARRAY
23448: PPUSH
23449: LD_VAR 0 12
23453: PUSH
23454: LD_VAR 0 7
23458: ARRAY
23459: PUSH
23460: LD_INT 2
23462: ARRAY
23463: PPUSH
23464: CALL_OW 546
23468: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
23469: LD_VAR 0 8
23473: PUSH
23474: LD_INT 1
23476: ARRAY
23477: PUSH
23478: LD_VAR 0 8
23482: PUSH
23483: LD_INT 2
23485: ARRAY
23486: PUSH
23487: LD_VAR 0 13
23491: PUSH
23492: LD_INT 2
23494: PLUS
23495: GREATER
23496: OR
23497: PUSH
23498: LD_VAR 0 8
23502: PUSH
23503: LD_INT 2
23505: ARRAY
23506: PUSH
23507: LD_VAR 0 13
23511: PUSH
23512: LD_INT 2
23514: MINUS
23515: LESS
23516: OR
23517: PUSH
23518: LD_VAR 0 8
23522: PUSH
23523: LD_INT 3
23525: ARRAY
23526: PUSH
23527: LD_INT 0
23529: PUSH
23530: LD_INT 8
23532: PUSH
23533: LD_INT 9
23535: PUSH
23536: LD_INT 10
23538: PUSH
23539: LD_INT 11
23541: PUSH
23542: LD_INT 12
23544: PUSH
23545: LD_INT 13
23547: PUSH
23548: LD_INT 16
23550: PUSH
23551: LD_INT 17
23553: PUSH
23554: LD_INT 18
23556: PUSH
23557: LD_INT 19
23559: PUSH
23560: LD_INT 20
23562: PUSH
23563: LD_INT 21
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: IN
23581: NOT
23582: OR
23583: PUSH
23584: LD_VAR 0 8
23588: PUSH
23589: LD_INT 5
23591: ARRAY
23592: NOT
23593: OR
23594: PUSH
23595: LD_VAR 0 8
23599: PUSH
23600: LD_INT 6
23602: ARRAY
23603: PUSH
23604: LD_INT 1
23606: PUSH
23607: LD_INT 2
23609: PUSH
23610: LD_INT 7
23612: PUSH
23613: LD_INT 9
23615: PUSH
23616: LD_INT 10
23618: PUSH
23619: LD_INT 11
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: IN
23630: NOT
23631: OR
23632: IFFALSE 23638
// exit ;
23634: POP
23635: POP
23636: GO 23721
// end ;
23638: GO 23309
23640: POP
23641: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
23642: LD_VAR 0 9
23646: PPUSH
23647: LD_VAR 0 3
23651: PPUSH
23652: LD_VAR 0 4
23656: PPUSH
23657: LD_INT 20
23659: PPUSH
23660: CALL 15667 0 4
23664: PUSH
23665: LD_INT 4
23667: ARRAY
23668: IFFALSE 23672
// exit ;
23670: GO 23721
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
23672: LD_VAR 0 2
23676: PUSH
23677: LD_INT 29
23679: PUSH
23680: LD_INT 30
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: IN
23687: PUSH
23688: LD_VAR 0 3
23692: PPUSH
23693: LD_VAR 0 4
23697: PPUSH
23698: LD_VAR 0 9
23702: PPUSH
23703: CALL_OW 440
23707: NOT
23708: AND
23709: IFFALSE 23713
// exit ;
23711: GO 23721
// result := true ;
23713: LD_ADDR_VAR 0 6
23717: PUSH
23718: LD_INT 1
23720: ST_TO_ADDR
// end ;
23721: LD_VAR 0 6
23725: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
23726: LD_INT 0
23728: PPUSH
23729: PPUSH
23730: PPUSH
23731: PPUSH
23732: PPUSH
23733: PPUSH
23734: PPUSH
23735: PPUSH
23736: PPUSH
23737: PPUSH
23738: PPUSH
23739: PPUSH
23740: PPUSH
23741: PPUSH
23742: PPUSH
23743: PPUSH
23744: PPUSH
23745: PPUSH
23746: PPUSH
23747: PPUSH
23748: PPUSH
23749: PPUSH
23750: PPUSH
23751: PPUSH
23752: PPUSH
23753: PPUSH
23754: PPUSH
23755: PPUSH
23756: PPUSH
23757: PPUSH
23758: PPUSH
23759: PPUSH
23760: PPUSH
23761: PPUSH
23762: PPUSH
23763: PPUSH
23764: PPUSH
23765: PPUSH
23766: PPUSH
23767: PPUSH
23768: PPUSH
23769: PPUSH
23770: PPUSH
23771: PPUSH
23772: PPUSH
23773: PPUSH
23774: PPUSH
23775: PPUSH
23776: PPUSH
23777: PPUSH
23778: PPUSH
23779: PPUSH
23780: PPUSH
23781: PPUSH
23782: PPUSH
23783: PPUSH
23784: PPUSH
23785: PPUSH
// result = [ ] ;
23786: LD_ADDR_VAR 0 7
23790: PUSH
23791: EMPTY
23792: ST_TO_ADDR
// temp_list = [ ] ;
23793: LD_ADDR_VAR 0 9
23797: PUSH
23798: EMPTY
23799: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
23800: LD_VAR 0 4
23804: PUSH
23805: LD_INT 0
23807: PUSH
23808: LD_INT 1
23810: PUSH
23811: LD_INT 2
23813: PUSH
23814: LD_INT 3
23816: PUSH
23817: LD_INT 4
23819: PUSH
23820: LD_INT 5
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: IN
23831: NOT
23832: PUSH
23833: LD_VAR 0 1
23837: PUSH
23838: LD_INT 0
23840: PUSH
23841: LD_INT 1
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: IN
23848: PUSH
23849: LD_VAR 0 5
23853: PUSH
23854: LD_INT 1
23856: PUSH
23857: LD_INT 2
23859: PUSH
23860: LD_INT 3
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: LIST
23867: IN
23868: NOT
23869: AND
23870: OR
23871: IFFALSE 23875
// exit ;
23873: GO 42266
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
23875: LD_VAR 0 1
23879: PUSH
23880: LD_INT 6
23882: PUSH
23883: LD_INT 7
23885: PUSH
23886: LD_INT 8
23888: PUSH
23889: LD_INT 13
23891: PUSH
23892: LD_INT 12
23894: PUSH
23895: LD_INT 15
23897: PUSH
23898: LD_INT 11
23900: PUSH
23901: LD_INT 14
23903: PUSH
23904: LD_INT 10
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: IN
23918: IFFALSE 23928
// btype = b_lab ;
23920: LD_ADDR_VAR 0 1
23924: PUSH
23925: LD_INT 6
23927: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
23928: LD_VAR 0 6
23932: PUSH
23933: LD_INT 0
23935: PUSH
23936: LD_INT 1
23938: PUSH
23939: LD_INT 2
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: LIST
23946: IN
23947: NOT
23948: PUSH
23949: LD_VAR 0 1
23953: PUSH
23954: LD_INT 0
23956: PUSH
23957: LD_INT 1
23959: PUSH
23960: LD_INT 2
23962: PUSH
23963: LD_INT 3
23965: PUSH
23966: LD_INT 6
23968: PUSH
23969: LD_INT 36
23971: PUSH
23972: LD_INT 4
23974: PUSH
23975: LD_INT 5
23977: PUSH
23978: LD_INT 31
23980: PUSH
23981: LD_INT 32
23983: PUSH
23984: LD_INT 33
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: IN
24000: NOT
24001: PUSH
24002: LD_VAR 0 6
24006: PUSH
24007: LD_INT 1
24009: EQUAL
24010: AND
24011: OR
24012: PUSH
24013: LD_VAR 0 1
24017: PUSH
24018: LD_INT 2
24020: PUSH
24021: LD_INT 3
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: IN
24028: NOT
24029: PUSH
24030: LD_VAR 0 6
24034: PUSH
24035: LD_INT 2
24037: EQUAL
24038: AND
24039: OR
24040: IFFALSE 24050
// mode = 0 ;
24042: LD_ADDR_VAR 0 6
24046: PUSH
24047: LD_INT 0
24049: ST_TO_ADDR
// case mode of 0 :
24050: LD_VAR 0 6
24054: PUSH
24055: LD_INT 0
24057: DOUBLE
24058: EQUAL
24059: IFTRUE 24063
24061: GO 35516
24063: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24064: LD_ADDR_VAR 0 11
24068: PUSH
24069: LD_INT 0
24071: PUSH
24072: LD_INT 0
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 0
24081: PUSH
24082: LD_INT 1
24084: NEG
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: PUSH
24090: LD_INT 1
24092: PUSH
24093: LD_INT 0
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 1
24102: PUSH
24103: LD_INT 1
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 0
24112: PUSH
24113: LD_INT 1
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: LD_INT 1
24122: NEG
24123: PUSH
24124: LD_INT 0
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 1
24133: NEG
24134: PUSH
24135: LD_INT 1
24137: NEG
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 1
24145: NEG
24146: PUSH
24147: LD_INT 2
24149: NEG
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: LD_INT 0
24157: PUSH
24158: LD_INT 2
24160: NEG
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PUSH
24166: LD_INT 1
24168: PUSH
24169: LD_INT 1
24171: NEG
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PUSH
24177: LD_INT 1
24179: PUSH
24180: LD_INT 2
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PUSH
24187: LD_INT 0
24189: PUSH
24190: LD_INT 2
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 1
24199: NEG
24200: PUSH
24201: LD_INT 1
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PUSH
24208: LD_INT 1
24210: PUSH
24211: LD_INT 3
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: LD_INT 0
24220: PUSH
24221: LD_INT 3
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: PUSH
24228: LD_INT 1
24230: NEG
24231: PUSH
24232: LD_INT 2
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24257: LD_ADDR_VAR 0 12
24261: PUSH
24262: LD_INT 0
24264: PUSH
24265: LD_INT 0
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 0
24274: PUSH
24275: LD_INT 1
24277: NEG
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PUSH
24283: LD_INT 1
24285: PUSH
24286: LD_INT 0
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 1
24295: PUSH
24296: LD_INT 1
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: LD_INT 0
24305: PUSH
24306: LD_INT 1
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 1
24315: NEG
24316: PUSH
24317: LD_INT 0
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 1
24326: NEG
24327: PUSH
24328: LD_INT 1
24330: NEG
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 1
24338: PUSH
24339: LD_INT 1
24341: NEG
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 2
24349: PUSH
24350: LD_INT 0
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: LD_INT 2
24359: PUSH
24360: LD_INT 1
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: PUSH
24367: LD_INT 1
24369: NEG
24370: PUSH
24371: LD_INT 1
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: PUSH
24378: LD_INT 2
24380: NEG
24381: PUSH
24382: LD_INT 0
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: LD_INT 2
24391: NEG
24392: PUSH
24393: LD_INT 1
24395: NEG
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: LD_INT 2
24403: NEG
24404: PUSH
24405: LD_INT 1
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PUSH
24412: LD_INT 3
24414: NEG
24415: PUSH
24416: LD_INT 0
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 3
24425: NEG
24426: PUSH
24427: LD_INT 1
24429: NEG
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24453: LD_ADDR_VAR 0 13
24457: PUSH
24458: LD_INT 0
24460: PUSH
24461: LD_INT 0
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 0
24470: PUSH
24471: LD_INT 1
24473: NEG
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: LD_INT 1
24481: PUSH
24482: LD_INT 0
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 1
24491: PUSH
24492: LD_INT 1
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: LD_INT 0
24501: PUSH
24502: LD_INT 1
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 1
24511: NEG
24512: PUSH
24513: LD_INT 0
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 1
24522: NEG
24523: PUSH
24524: LD_INT 1
24526: NEG
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PUSH
24532: LD_INT 1
24534: NEG
24535: PUSH
24536: LD_INT 2
24538: NEG
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: LD_INT 2
24546: PUSH
24547: LD_INT 1
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 2
24556: PUSH
24557: LD_INT 2
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 1
24566: PUSH
24567: LD_INT 2
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 2
24576: NEG
24577: PUSH
24578: LD_INT 1
24580: NEG
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 2
24588: NEG
24589: PUSH
24590: LD_INT 2
24592: NEG
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 2
24600: NEG
24601: PUSH
24602: LD_INT 3
24604: NEG
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 3
24612: NEG
24613: PUSH
24614: LD_INT 2
24616: NEG
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 3
24624: NEG
24625: PUSH
24626: LD_INT 3
24628: NEG
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
24652: LD_ADDR_VAR 0 14
24656: PUSH
24657: LD_INT 0
24659: PUSH
24660: LD_INT 0
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 0
24669: PUSH
24670: LD_INT 1
24672: NEG
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 1
24680: PUSH
24681: LD_INT 0
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 1
24690: PUSH
24691: LD_INT 1
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PUSH
24698: LD_INT 0
24700: PUSH
24701: LD_INT 1
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 1
24710: NEG
24711: PUSH
24712: LD_INT 0
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PUSH
24719: LD_INT 1
24721: NEG
24722: PUSH
24723: LD_INT 1
24725: NEG
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 1
24733: NEG
24734: PUSH
24735: LD_INT 2
24737: NEG
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 0
24745: PUSH
24746: LD_INT 2
24748: NEG
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 1
24756: PUSH
24757: LD_INT 1
24759: NEG
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PUSH
24765: LD_INT 1
24767: PUSH
24768: LD_INT 2
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: LD_INT 0
24777: PUSH
24778: LD_INT 2
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 1
24787: NEG
24788: PUSH
24789: LD_INT 1
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 1
24798: NEG
24799: PUSH
24800: LD_INT 3
24802: NEG
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 0
24810: PUSH
24811: LD_INT 3
24813: NEG
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 1
24821: PUSH
24822: LD_INT 2
24824: NEG
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
24848: LD_ADDR_VAR 0 15
24852: PUSH
24853: LD_INT 0
24855: PUSH
24856: LD_INT 0
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 0
24865: PUSH
24866: LD_INT 1
24868: NEG
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: LD_INT 1
24876: PUSH
24877: LD_INT 0
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 1
24886: PUSH
24887: LD_INT 1
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: LD_INT 0
24896: PUSH
24897: LD_INT 1
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PUSH
24904: LD_INT 1
24906: NEG
24907: PUSH
24908: LD_INT 0
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 1
24917: NEG
24918: PUSH
24919: LD_INT 1
24921: NEG
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: LD_INT 1
24929: PUSH
24930: LD_INT 1
24932: NEG
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: PUSH
24938: LD_INT 2
24940: PUSH
24941: LD_INT 0
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 2
24950: PUSH
24951: LD_INT 1
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 1
24960: NEG
24961: PUSH
24962: LD_INT 1
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: LD_INT 2
24971: NEG
24972: PUSH
24973: LD_INT 0
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 2
24982: NEG
24983: PUSH
24984: LD_INT 1
24986: NEG
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 2
24994: PUSH
24995: LD_INT 1
24997: NEG
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 3
25005: PUSH
25006: LD_INT 0
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 3
25015: PUSH
25016: LD_INT 1
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25041: LD_ADDR_VAR 0 16
25045: PUSH
25046: LD_INT 0
25048: PUSH
25049: LD_INT 0
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 0
25058: PUSH
25059: LD_INT 1
25061: NEG
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PUSH
25067: LD_INT 1
25069: PUSH
25070: LD_INT 0
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: LD_INT 1
25079: PUSH
25080: LD_INT 1
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 0
25089: PUSH
25090: LD_INT 1
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 1
25099: NEG
25100: PUSH
25101: LD_INT 0
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: LD_INT 1
25110: NEG
25111: PUSH
25112: LD_INT 1
25114: NEG
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 1
25122: NEG
25123: PUSH
25124: LD_INT 2
25126: NEG
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: PUSH
25132: LD_INT 2
25134: PUSH
25135: LD_INT 1
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: LD_INT 2
25144: PUSH
25145: LD_INT 2
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 1
25154: PUSH
25155: LD_INT 2
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 2
25164: NEG
25165: PUSH
25166: LD_INT 1
25168: NEG
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 2
25176: NEG
25177: PUSH
25178: LD_INT 2
25180: NEG
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 3
25188: PUSH
25189: LD_INT 2
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 3
25198: PUSH
25199: LD_INT 3
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: LD_INT 2
25208: PUSH
25209: LD_INT 3
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25234: LD_ADDR_VAR 0 17
25238: PUSH
25239: LD_INT 0
25241: PUSH
25242: LD_INT 0
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 0
25251: PUSH
25252: LD_INT 1
25254: NEG
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: LD_INT 1
25262: PUSH
25263: LD_INT 0
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 1
25272: PUSH
25273: LD_INT 1
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 0
25282: PUSH
25283: LD_INT 1
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 1
25292: NEG
25293: PUSH
25294: LD_INT 0
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: LD_INT 1
25303: NEG
25304: PUSH
25305: LD_INT 1
25307: NEG
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 1
25315: NEG
25316: PUSH
25317: LD_INT 2
25319: NEG
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 0
25327: PUSH
25328: LD_INT 2
25330: NEG
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 1
25338: PUSH
25339: LD_INT 1
25341: NEG
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 2
25349: PUSH
25350: LD_INT 0
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 2
25359: PUSH
25360: LD_INT 1
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 2
25369: PUSH
25370: LD_INT 2
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 1
25379: PUSH
25380: LD_INT 2
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 0
25389: PUSH
25390: LD_INT 2
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 1
25399: NEG
25400: PUSH
25401: LD_INT 1
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 2
25410: NEG
25411: PUSH
25412: LD_INT 0
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 2
25421: NEG
25422: PUSH
25423: LD_INT 1
25425: NEG
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: LD_INT 2
25433: NEG
25434: PUSH
25435: LD_INT 2
25437: NEG
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25464: LD_ADDR_VAR 0 18
25468: PUSH
25469: LD_INT 0
25471: PUSH
25472: LD_INT 0
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 0
25481: PUSH
25482: LD_INT 1
25484: NEG
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PUSH
25490: LD_INT 1
25492: PUSH
25493: LD_INT 0
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 1
25502: PUSH
25503: LD_INT 1
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 0
25512: PUSH
25513: LD_INT 1
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: LD_INT 1
25522: NEG
25523: PUSH
25524: LD_INT 0
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: LD_INT 1
25533: NEG
25534: PUSH
25535: LD_INT 1
25537: NEG
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 1
25545: NEG
25546: PUSH
25547: LD_INT 2
25549: NEG
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 0
25557: PUSH
25558: LD_INT 2
25560: NEG
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 1
25568: PUSH
25569: LD_INT 1
25571: NEG
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 2
25579: PUSH
25580: LD_INT 0
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 2
25589: PUSH
25590: LD_INT 1
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 2
25599: PUSH
25600: LD_INT 2
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 1
25609: PUSH
25610: LD_INT 2
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 0
25619: PUSH
25620: LD_INT 2
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 1
25629: NEG
25630: PUSH
25631: LD_INT 1
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 2
25640: NEG
25641: PUSH
25642: LD_INT 0
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 2
25651: NEG
25652: PUSH
25653: LD_INT 1
25655: NEG
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 2
25663: NEG
25664: PUSH
25665: LD_INT 2
25667: NEG
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25694: LD_ADDR_VAR 0 19
25698: PUSH
25699: LD_INT 0
25701: PUSH
25702: LD_INT 0
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 0
25711: PUSH
25712: LD_INT 1
25714: NEG
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 1
25722: PUSH
25723: LD_INT 0
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: LD_INT 1
25732: PUSH
25733: LD_INT 1
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 0
25742: PUSH
25743: LD_INT 1
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: LD_INT 1
25752: NEG
25753: PUSH
25754: LD_INT 0
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: PUSH
25761: LD_INT 1
25763: NEG
25764: PUSH
25765: LD_INT 1
25767: NEG
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 1
25775: NEG
25776: PUSH
25777: LD_INT 2
25779: NEG
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 0
25787: PUSH
25788: LD_INT 2
25790: NEG
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 1
25798: PUSH
25799: LD_INT 1
25801: NEG
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 2
25809: PUSH
25810: LD_INT 0
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 2
25819: PUSH
25820: LD_INT 1
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 2
25829: PUSH
25830: LD_INT 2
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: LD_INT 1
25839: PUSH
25840: LD_INT 2
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 0
25849: PUSH
25850: LD_INT 2
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 1
25859: NEG
25860: PUSH
25861: LD_INT 1
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PUSH
25868: LD_INT 2
25870: NEG
25871: PUSH
25872: LD_INT 0
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 2
25881: NEG
25882: PUSH
25883: LD_INT 1
25885: NEG
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 2
25893: NEG
25894: PUSH
25895: LD_INT 2
25897: NEG
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25924: LD_ADDR_VAR 0 20
25928: PUSH
25929: LD_INT 0
25931: PUSH
25932: LD_INT 0
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 0
25941: PUSH
25942: LD_INT 1
25944: NEG
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 1
25952: PUSH
25953: LD_INT 0
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 1
25962: PUSH
25963: LD_INT 1
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 0
25972: PUSH
25973: LD_INT 1
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 1
25982: NEG
25983: PUSH
25984: LD_INT 0
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: LD_INT 1
25993: NEG
25994: PUSH
25995: LD_INT 1
25997: NEG
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: LD_INT 1
26005: NEG
26006: PUSH
26007: LD_INT 2
26009: NEG
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 0
26017: PUSH
26018: LD_INT 2
26020: NEG
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 1
26028: PUSH
26029: LD_INT 1
26031: NEG
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 2
26039: PUSH
26040: LD_INT 0
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 2
26049: PUSH
26050: LD_INT 1
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 2
26059: PUSH
26060: LD_INT 2
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PUSH
26067: LD_INT 1
26069: PUSH
26070: LD_INT 2
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 0
26079: PUSH
26080: LD_INT 2
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 1
26089: NEG
26090: PUSH
26091: LD_INT 1
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PUSH
26098: LD_INT 2
26100: NEG
26101: PUSH
26102: LD_INT 0
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 2
26111: NEG
26112: PUSH
26113: LD_INT 1
26115: NEG
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 2
26123: NEG
26124: PUSH
26125: LD_INT 2
26127: NEG
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26154: LD_ADDR_VAR 0 21
26158: PUSH
26159: LD_INT 0
26161: PUSH
26162: LD_INT 0
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 0
26171: PUSH
26172: LD_INT 1
26174: NEG
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: PUSH
26180: LD_INT 1
26182: PUSH
26183: LD_INT 0
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 1
26192: PUSH
26193: LD_INT 1
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 0
26202: PUSH
26203: LD_INT 1
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 1
26212: NEG
26213: PUSH
26214: LD_INT 0
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 1
26223: NEG
26224: PUSH
26225: LD_INT 1
26227: NEG
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 1
26235: NEG
26236: PUSH
26237: LD_INT 2
26239: NEG
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 0
26247: PUSH
26248: LD_INT 2
26250: NEG
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: LD_INT 1
26258: PUSH
26259: LD_INT 1
26261: NEG
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 2
26269: PUSH
26270: LD_INT 0
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 2
26279: PUSH
26280: LD_INT 1
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 2
26289: PUSH
26290: LD_INT 2
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 1
26299: PUSH
26300: LD_INT 2
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 0
26309: PUSH
26310: LD_INT 2
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 1
26319: NEG
26320: PUSH
26321: LD_INT 1
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PUSH
26328: LD_INT 2
26330: NEG
26331: PUSH
26332: LD_INT 0
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 2
26341: NEG
26342: PUSH
26343: LD_INT 1
26345: NEG
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 2
26353: NEG
26354: PUSH
26355: LD_INT 2
26357: NEG
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26384: LD_ADDR_VAR 0 22
26388: PUSH
26389: LD_INT 0
26391: PUSH
26392: LD_INT 0
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 0
26401: PUSH
26402: LD_INT 1
26404: NEG
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 1
26412: PUSH
26413: LD_INT 0
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 1
26422: PUSH
26423: LD_INT 1
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 0
26432: PUSH
26433: LD_INT 1
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 1
26442: NEG
26443: PUSH
26444: LD_INT 0
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 1
26453: NEG
26454: PUSH
26455: LD_INT 1
26457: NEG
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 1
26465: NEG
26466: PUSH
26467: LD_INT 2
26469: NEG
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 0
26477: PUSH
26478: LD_INT 2
26480: NEG
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 1
26488: PUSH
26489: LD_INT 1
26491: NEG
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 2
26499: PUSH
26500: LD_INT 0
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 2
26509: PUSH
26510: LD_INT 1
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 2
26519: PUSH
26520: LD_INT 2
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 1
26529: PUSH
26530: LD_INT 2
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 0
26539: PUSH
26540: LD_INT 2
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PUSH
26547: LD_INT 1
26549: NEG
26550: PUSH
26551: LD_INT 1
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: PUSH
26558: LD_INT 2
26560: NEG
26561: PUSH
26562: LD_INT 0
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 2
26571: NEG
26572: PUSH
26573: LD_INT 1
26575: NEG
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 2
26583: NEG
26584: PUSH
26585: LD_INT 2
26587: NEG
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
26614: LD_ADDR_VAR 0 23
26618: PUSH
26619: LD_INT 0
26621: PUSH
26622: LD_INT 0
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: LD_INT 0
26631: PUSH
26632: LD_INT 1
26634: NEG
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: LD_INT 1
26642: PUSH
26643: LD_INT 0
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 1
26652: PUSH
26653: LD_INT 1
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 0
26662: PUSH
26663: LD_INT 1
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 1
26672: NEG
26673: PUSH
26674: LD_INT 0
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: PUSH
26681: LD_INT 1
26683: NEG
26684: PUSH
26685: LD_INT 1
26687: NEG
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 1
26695: NEG
26696: PUSH
26697: LD_INT 2
26699: NEG
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: LD_INT 0
26707: PUSH
26708: LD_INT 2
26710: NEG
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 1
26718: PUSH
26719: LD_INT 1
26721: NEG
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 2
26729: PUSH
26730: LD_INT 0
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 2
26739: PUSH
26740: LD_INT 1
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 2
26749: PUSH
26750: LD_INT 2
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 1
26759: PUSH
26760: LD_INT 2
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: LD_INT 0
26769: PUSH
26770: LD_INT 2
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 1
26779: NEG
26780: PUSH
26781: LD_INT 1
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 2
26790: NEG
26791: PUSH
26792: LD_INT 0
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: LD_INT 2
26801: NEG
26802: PUSH
26803: LD_INT 1
26805: NEG
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 2
26813: NEG
26814: PUSH
26815: LD_INT 2
26817: NEG
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 2
26825: NEG
26826: PUSH
26827: LD_INT 3
26829: NEG
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 1
26837: NEG
26838: PUSH
26839: LD_INT 3
26841: NEG
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: LD_INT 1
26849: PUSH
26850: LD_INT 2
26852: NEG
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 2
26860: PUSH
26861: LD_INT 1
26863: NEG
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
26894: LD_ADDR_VAR 0 24
26898: PUSH
26899: LD_INT 0
26901: PUSH
26902: LD_INT 0
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 0
26911: PUSH
26912: LD_INT 1
26914: NEG
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 1
26922: PUSH
26923: LD_INT 0
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 1
26932: PUSH
26933: LD_INT 1
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 0
26942: PUSH
26943: LD_INT 1
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 1
26952: NEG
26953: PUSH
26954: LD_INT 0
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 1
26963: NEG
26964: PUSH
26965: LD_INT 1
26967: NEG
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 1
26975: NEG
26976: PUSH
26977: LD_INT 2
26979: NEG
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 0
26987: PUSH
26988: LD_INT 2
26990: NEG
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: PUSH
26996: LD_INT 1
26998: PUSH
26999: LD_INT 1
27001: NEG
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 2
27009: PUSH
27010: LD_INT 0
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 2
27019: PUSH
27020: LD_INT 1
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 2
27029: PUSH
27030: LD_INT 2
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: LD_INT 1
27039: PUSH
27040: LD_INT 2
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PUSH
27047: LD_INT 0
27049: PUSH
27050: LD_INT 2
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 1
27059: NEG
27060: PUSH
27061: LD_INT 1
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PUSH
27068: LD_INT 2
27070: NEG
27071: PUSH
27072: LD_INT 0
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 2
27081: NEG
27082: PUSH
27083: LD_INT 1
27085: NEG
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 2
27093: NEG
27094: PUSH
27095: LD_INT 2
27097: NEG
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: LD_INT 1
27105: PUSH
27106: LD_INT 2
27108: NEG
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PUSH
27114: LD_INT 2
27116: PUSH
27117: LD_INT 1
27119: NEG
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: LD_INT 3
27127: PUSH
27128: LD_INT 1
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 3
27137: PUSH
27138: LD_INT 2
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
27170: LD_ADDR_VAR 0 25
27174: PUSH
27175: LD_INT 0
27177: PUSH
27178: LD_INT 0
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 0
27187: PUSH
27188: LD_INT 1
27190: NEG
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 1
27198: PUSH
27199: LD_INT 0
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 1
27208: PUSH
27209: LD_INT 1
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 0
27218: PUSH
27219: LD_INT 1
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 1
27228: NEG
27229: PUSH
27230: LD_INT 0
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 1
27239: NEG
27240: PUSH
27241: LD_INT 1
27243: NEG
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 1
27251: NEG
27252: PUSH
27253: LD_INT 2
27255: NEG
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 0
27263: PUSH
27264: LD_INT 2
27266: NEG
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 1
27274: PUSH
27275: LD_INT 1
27277: NEG
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 2
27285: PUSH
27286: LD_INT 0
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 2
27295: PUSH
27296: LD_INT 1
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 2
27305: PUSH
27306: LD_INT 2
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 1
27315: PUSH
27316: LD_INT 2
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: LD_INT 0
27325: PUSH
27326: LD_INT 2
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: LD_INT 1
27335: NEG
27336: PUSH
27337: LD_INT 1
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: LD_INT 2
27346: NEG
27347: PUSH
27348: LD_INT 0
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 2
27357: NEG
27358: PUSH
27359: LD_INT 1
27361: NEG
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 2
27369: NEG
27370: PUSH
27371: LD_INT 2
27373: NEG
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: LD_INT 3
27381: PUSH
27382: LD_INT 1
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: PUSH
27389: LD_INT 3
27391: PUSH
27392: LD_INT 2
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: LD_INT 2
27401: PUSH
27402: LD_INT 3
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 1
27411: PUSH
27412: LD_INT 3
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27444: LD_ADDR_VAR 0 26
27448: PUSH
27449: LD_INT 0
27451: PUSH
27452: LD_INT 0
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 0
27461: PUSH
27462: LD_INT 1
27464: NEG
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: PUSH
27470: LD_INT 1
27472: PUSH
27473: LD_INT 0
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: LD_INT 1
27482: PUSH
27483: LD_INT 1
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: PUSH
27490: LD_INT 0
27492: PUSH
27493: LD_INT 1
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 1
27502: NEG
27503: PUSH
27504: LD_INT 0
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 1
27513: NEG
27514: PUSH
27515: LD_INT 1
27517: NEG
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 1
27525: NEG
27526: PUSH
27527: LD_INT 2
27529: NEG
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 0
27537: PUSH
27538: LD_INT 2
27540: NEG
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: PUSH
27546: LD_INT 1
27548: PUSH
27549: LD_INT 1
27551: NEG
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 2
27559: PUSH
27560: LD_INT 0
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: LD_INT 2
27569: PUSH
27570: LD_INT 1
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 2
27579: PUSH
27580: LD_INT 2
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 1
27589: PUSH
27590: LD_INT 2
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 0
27599: PUSH
27600: LD_INT 2
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 1
27609: NEG
27610: PUSH
27611: LD_INT 1
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 2
27620: NEG
27621: PUSH
27622: LD_INT 0
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 2
27631: NEG
27632: PUSH
27633: LD_INT 1
27635: NEG
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 2
27643: NEG
27644: PUSH
27645: LD_INT 2
27647: NEG
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 2
27655: PUSH
27656: LD_INT 3
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 1
27665: PUSH
27666: LD_INT 3
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 1
27675: NEG
27676: PUSH
27677: LD_INT 2
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 2
27686: NEG
27687: PUSH
27688: LD_INT 1
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27720: LD_ADDR_VAR 0 27
27724: PUSH
27725: LD_INT 0
27727: PUSH
27728: LD_INT 0
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: LD_INT 0
27737: PUSH
27738: LD_INT 1
27740: NEG
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 1
27748: PUSH
27749: LD_INT 0
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 1
27758: PUSH
27759: LD_INT 1
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 0
27768: PUSH
27769: LD_INT 1
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 1
27778: NEG
27779: PUSH
27780: LD_INT 0
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 1
27789: NEG
27790: PUSH
27791: LD_INT 1
27793: NEG
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 1
27801: NEG
27802: PUSH
27803: LD_INT 2
27805: NEG
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 0
27813: PUSH
27814: LD_INT 2
27816: NEG
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PUSH
27822: LD_INT 1
27824: PUSH
27825: LD_INT 1
27827: NEG
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 2
27835: PUSH
27836: LD_INT 0
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 2
27845: PUSH
27846: LD_INT 1
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 2
27855: PUSH
27856: LD_INT 2
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 1
27865: PUSH
27866: LD_INT 2
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 0
27875: PUSH
27876: LD_INT 2
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 1
27885: NEG
27886: PUSH
27887: LD_INT 1
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: LD_INT 2
27896: NEG
27897: PUSH
27898: LD_INT 0
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 2
27907: NEG
27908: PUSH
27909: LD_INT 1
27911: NEG
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 2
27919: NEG
27920: PUSH
27921: LD_INT 2
27923: NEG
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: LD_INT 1
27931: NEG
27932: PUSH
27933: LD_INT 2
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: LD_INT 2
27942: NEG
27943: PUSH
27944: LD_INT 1
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: LD_INT 3
27953: NEG
27954: PUSH
27955: LD_INT 1
27957: NEG
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 3
27965: NEG
27966: PUSH
27967: LD_INT 2
27969: NEG
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28000: LD_ADDR_VAR 0 28
28004: PUSH
28005: LD_INT 0
28007: PUSH
28008: LD_INT 0
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 0
28017: PUSH
28018: LD_INT 1
28020: NEG
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 1
28028: PUSH
28029: LD_INT 0
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 1
28038: PUSH
28039: LD_INT 1
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 0
28048: PUSH
28049: LD_INT 1
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: LD_INT 1
28058: NEG
28059: PUSH
28060: LD_INT 0
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 1
28069: NEG
28070: PUSH
28071: LD_INT 1
28073: NEG
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 1
28081: NEG
28082: PUSH
28083: LD_INT 2
28085: NEG
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 0
28093: PUSH
28094: LD_INT 2
28096: NEG
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 1
28104: PUSH
28105: LD_INT 1
28107: NEG
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 2
28115: PUSH
28116: LD_INT 0
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 2
28125: PUSH
28126: LD_INT 1
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 2
28135: PUSH
28136: LD_INT 2
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 1
28145: PUSH
28146: LD_INT 2
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: LD_INT 0
28155: PUSH
28156: LD_INT 2
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 1
28165: NEG
28166: PUSH
28167: LD_INT 1
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: LD_INT 2
28176: NEG
28177: PUSH
28178: LD_INT 0
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: LD_INT 2
28187: NEG
28188: PUSH
28189: LD_INT 1
28191: NEG
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 2
28199: NEG
28200: PUSH
28201: LD_INT 2
28203: NEG
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 2
28211: NEG
28212: PUSH
28213: LD_INT 3
28215: NEG
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 1
28223: NEG
28224: PUSH
28225: LD_INT 3
28227: NEG
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: LD_INT 3
28235: NEG
28236: PUSH
28237: LD_INT 1
28239: NEG
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 3
28247: NEG
28248: PUSH
28249: LD_INT 2
28251: NEG
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28282: LD_ADDR_VAR 0 29
28286: PUSH
28287: LD_INT 0
28289: PUSH
28290: LD_INT 0
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 0
28299: PUSH
28300: LD_INT 1
28302: NEG
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 1
28310: PUSH
28311: LD_INT 0
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 1
28320: PUSH
28321: LD_INT 1
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 0
28330: PUSH
28331: LD_INT 1
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 1
28340: NEG
28341: PUSH
28342: LD_INT 0
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: LD_INT 1
28351: NEG
28352: PUSH
28353: LD_INT 1
28355: NEG
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 1
28363: NEG
28364: PUSH
28365: LD_INT 2
28367: NEG
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 0
28375: PUSH
28376: LD_INT 2
28378: NEG
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 1
28386: PUSH
28387: LD_INT 1
28389: NEG
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 2
28397: PUSH
28398: LD_INT 0
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 2
28407: PUSH
28408: LD_INT 1
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: LD_INT 1
28417: PUSH
28418: LD_INT 2
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 0
28427: PUSH
28428: LD_INT 2
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: LD_INT 1
28437: NEG
28438: PUSH
28439: LD_INT 1
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 2
28448: NEG
28449: PUSH
28450: LD_INT 1
28452: NEG
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 2
28460: NEG
28461: PUSH
28462: LD_INT 2
28464: NEG
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: LD_INT 2
28472: NEG
28473: PUSH
28474: LD_INT 3
28476: NEG
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 2
28484: PUSH
28485: LD_INT 1
28487: NEG
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 3
28495: PUSH
28496: LD_INT 1
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 1
28505: PUSH
28506: LD_INT 3
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 1
28515: NEG
28516: PUSH
28517: LD_INT 2
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: LD_INT 3
28526: NEG
28527: PUSH
28528: LD_INT 2
28530: NEG
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28561: LD_ADDR_VAR 0 30
28565: PUSH
28566: LD_INT 0
28568: PUSH
28569: LD_INT 0
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 0
28578: PUSH
28579: LD_INT 1
28581: NEG
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 1
28589: PUSH
28590: LD_INT 0
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 1
28599: PUSH
28600: LD_INT 1
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 0
28609: PUSH
28610: LD_INT 1
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 1
28619: NEG
28620: PUSH
28621: LD_INT 0
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 1
28630: NEG
28631: PUSH
28632: LD_INT 1
28634: NEG
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 1
28642: NEG
28643: PUSH
28644: LD_INT 2
28646: NEG
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 0
28654: PUSH
28655: LD_INT 2
28657: NEG
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: PUSH
28663: LD_INT 1
28665: PUSH
28666: LD_INT 1
28668: NEG
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: PUSH
28674: LD_INT 2
28676: PUSH
28677: LD_INT 0
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PUSH
28684: LD_INT 2
28686: PUSH
28687: LD_INT 1
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PUSH
28694: LD_INT 2
28696: PUSH
28697: LD_INT 2
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PUSH
28704: LD_INT 1
28706: PUSH
28707: LD_INT 2
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: LD_INT 1
28716: NEG
28717: PUSH
28718: LD_INT 1
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 2
28727: NEG
28728: PUSH
28729: LD_INT 0
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: LD_INT 2
28738: NEG
28739: PUSH
28740: LD_INT 1
28742: NEG
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 1
28750: NEG
28751: PUSH
28752: LD_INT 3
28754: NEG
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 1
28762: PUSH
28763: LD_INT 2
28765: NEG
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: LD_INT 3
28773: PUSH
28774: LD_INT 2
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 2
28783: PUSH
28784: LD_INT 3
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 2
28793: NEG
28794: PUSH
28795: LD_INT 1
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 3
28804: NEG
28805: PUSH
28806: LD_INT 1
28808: NEG
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28839: LD_ADDR_VAR 0 31
28843: PUSH
28844: LD_INT 0
28846: PUSH
28847: LD_INT 0
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 0
28856: PUSH
28857: LD_INT 1
28859: NEG
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: LD_INT 1
28867: PUSH
28868: LD_INT 0
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: LD_INT 1
28877: PUSH
28878: LD_INT 1
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 0
28887: PUSH
28888: LD_INT 1
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: LD_INT 1
28897: NEG
28898: PUSH
28899: LD_INT 0
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: LD_INT 1
28908: NEG
28909: PUSH
28910: LD_INT 1
28912: NEG
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 1
28920: NEG
28921: PUSH
28922: LD_INT 2
28924: NEG
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 1
28932: PUSH
28933: LD_INT 1
28935: NEG
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: LD_INT 2
28943: PUSH
28944: LD_INT 0
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 2
28953: PUSH
28954: LD_INT 1
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 2
28963: PUSH
28964: LD_INT 2
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: LD_INT 1
28973: PUSH
28974: LD_INT 2
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 0
28983: PUSH
28984: LD_INT 2
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 1
28993: NEG
28994: PUSH
28995: LD_INT 1
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 2
29004: NEG
29005: PUSH
29006: LD_INT 1
29008: NEG
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 2
29016: NEG
29017: PUSH
29018: LD_INT 2
29020: NEG
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 2
29028: NEG
29029: PUSH
29030: LD_INT 3
29032: NEG
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: LD_INT 2
29040: PUSH
29041: LD_INT 1
29043: NEG
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 3
29051: PUSH
29052: LD_INT 1
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 1
29061: PUSH
29062: LD_INT 3
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 1
29071: NEG
29072: PUSH
29073: LD_INT 2
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 3
29082: NEG
29083: PUSH
29084: LD_INT 2
29086: NEG
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29117: LD_ADDR_VAR 0 32
29121: PUSH
29122: LD_INT 0
29124: PUSH
29125: LD_INT 0
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 0
29134: PUSH
29135: LD_INT 1
29137: NEG
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 1
29145: PUSH
29146: LD_INT 0
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: LD_INT 1
29155: PUSH
29156: LD_INT 1
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: LD_INT 0
29165: PUSH
29166: LD_INT 1
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 1
29175: NEG
29176: PUSH
29177: LD_INT 0
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 1
29186: NEG
29187: PUSH
29188: LD_INT 1
29190: NEG
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: LD_INT 1
29198: NEG
29199: PUSH
29200: LD_INT 2
29202: NEG
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 0
29210: PUSH
29211: LD_INT 2
29213: NEG
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 1
29221: PUSH
29222: LD_INT 1
29224: NEG
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 2
29232: PUSH
29233: LD_INT 1
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_INT 2
29242: PUSH
29243: LD_INT 2
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 1
29252: PUSH
29253: LD_INT 2
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 0
29262: PUSH
29263: LD_INT 2
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 1
29272: NEG
29273: PUSH
29274: LD_INT 1
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 2
29283: NEG
29284: PUSH
29285: LD_INT 0
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PUSH
29292: LD_INT 2
29294: NEG
29295: PUSH
29296: LD_INT 1
29298: NEG
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 1
29306: NEG
29307: PUSH
29308: LD_INT 3
29310: NEG
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: LD_INT 1
29318: PUSH
29319: LD_INT 2
29321: NEG
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 3
29329: PUSH
29330: LD_INT 2
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: LD_INT 2
29339: PUSH
29340: LD_INT 3
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PUSH
29347: LD_INT 2
29349: NEG
29350: PUSH
29351: LD_INT 1
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 3
29360: NEG
29361: PUSH
29362: LD_INT 1
29364: NEG
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29395: LD_ADDR_VAR 0 33
29399: PUSH
29400: LD_INT 0
29402: PUSH
29403: LD_INT 0
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 0
29412: PUSH
29413: LD_INT 1
29415: NEG
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 1
29423: PUSH
29424: LD_INT 0
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 1
29433: PUSH
29434: LD_INT 1
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 0
29443: PUSH
29444: LD_INT 1
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 1
29453: NEG
29454: PUSH
29455: LD_INT 0
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: LD_INT 1
29464: NEG
29465: PUSH
29466: LD_INT 1
29468: NEG
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: LD_INT 1
29476: NEG
29477: PUSH
29478: LD_INT 2
29480: NEG
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 1
29488: PUSH
29489: LD_INT 1
29491: NEG
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: LD_INT 2
29499: PUSH
29500: LD_INT 0
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 2
29509: PUSH
29510: LD_INT 1
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 1
29519: PUSH
29520: LD_INT 2
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 0
29529: PUSH
29530: LD_INT 2
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 1
29539: NEG
29540: PUSH
29541: LD_INT 1
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 2
29550: NEG
29551: PUSH
29552: LD_INT 0
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: PUSH
29559: LD_INT 2
29561: NEG
29562: PUSH
29563: LD_INT 1
29565: NEG
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 2
29573: NEG
29574: PUSH
29575: LD_INT 2
29577: NEG
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: LD_INT 2
29585: NEG
29586: PUSH
29587: LD_INT 3
29589: NEG
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: PUSH
29595: LD_INT 2
29597: PUSH
29598: LD_INT 1
29600: NEG
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 3
29608: PUSH
29609: LD_INT 1
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 1
29618: PUSH
29619: LD_INT 3
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: PUSH
29626: LD_INT 1
29628: NEG
29629: PUSH
29630: LD_INT 2
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: LD_INT 3
29639: NEG
29640: PUSH
29641: LD_INT 2
29643: NEG
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29674: LD_ADDR_VAR 0 34
29678: PUSH
29679: LD_INT 0
29681: PUSH
29682: LD_INT 0
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: LD_INT 0
29691: PUSH
29692: LD_INT 1
29694: NEG
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 1
29702: PUSH
29703: LD_INT 0
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: LD_INT 1
29712: PUSH
29713: LD_INT 1
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 0
29722: PUSH
29723: LD_INT 1
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 1
29732: NEG
29733: PUSH
29734: LD_INT 0
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 1
29743: NEG
29744: PUSH
29745: LD_INT 1
29747: NEG
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: LD_INT 1
29755: NEG
29756: PUSH
29757: LD_INT 2
29759: NEG
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 0
29767: PUSH
29768: LD_INT 2
29770: NEG
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 1
29778: PUSH
29779: LD_INT 1
29781: NEG
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PUSH
29787: LD_INT 2
29789: PUSH
29790: LD_INT 1
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 2
29799: PUSH
29800: LD_INT 2
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 1
29809: PUSH
29810: LD_INT 2
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 1
29819: NEG
29820: PUSH
29821: LD_INT 1
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 2
29830: NEG
29831: PUSH
29832: LD_INT 0
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 2
29841: NEG
29842: PUSH
29843: LD_INT 1
29845: NEG
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: LD_INT 2
29853: NEG
29854: PUSH
29855: LD_INT 2
29857: NEG
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 1
29865: NEG
29866: PUSH
29867: LD_INT 3
29869: NEG
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 1
29877: PUSH
29878: LD_INT 2
29880: NEG
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PUSH
29886: LD_INT 3
29888: PUSH
29889: LD_INT 2
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 2
29898: PUSH
29899: LD_INT 3
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 2
29908: NEG
29909: PUSH
29910: LD_INT 1
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 3
29919: NEG
29920: PUSH
29921: LD_INT 1
29923: NEG
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29954: LD_ADDR_VAR 0 35
29958: PUSH
29959: LD_INT 0
29961: PUSH
29962: LD_INT 0
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 0
29971: PUSH
29972: LD_INT 1
29974: NEG
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 1
29982: PUSH
29983: LD_INT 0
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 1
29992: PUSH
29993: LD_INT 1
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: LD_INT 0
30002: PUSH
30003: LD_INT 1
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: LD_INT 1
30012: NEG
30013: PUSH
30014: LD_INT 0
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_INT 1
30023: NEG
30024: PUSH
30025: LD_INT 1
30027: NEG
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: LD_INT 2
30035: PUSH
30036: LD_INT 1
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: LD_INT 2
30045: NEG
30046: PUSH
30047: LD_INT 1
30049: NEG
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30066: LD_ADDR_VAR 0 36
30070: PUSH
30071: LD_INT 0
30073: PUSH
30074: LD_INT 0
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 0
30083: PUSH
30084: LD_INT 1
30086: NEG
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 1
30094: PUSH
30095: LD_INT 0
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 1
30104: PUSH
30105: LD_INT 1
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 0
30114: PUSH
30115: LD_INT 1
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 1
30124: NEG
30125: PUSH
30126: LD_INT 0
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: LD_INT 1
30135: NEG
30136: PUSH
30137: LD_INT 1
30139: NEG
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 1
30147: NEG
30148: PUSH
30149: LD_INT 2
30151: NEG
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 1
30159: PUSH
30160: LD_INT 2
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30178: LD_ADDR_VAR 0 37
30182: PUSH
30183: LD_INT 0
30185: PUSH
30186: LD_INT 0
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 0
30195: PUSH
30196: LD_INT 1
30198: NEG
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: LD_INT 1
30206: PUSH
30207: LD_INT 0
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: LD_INT 1
30216: PUSH
30217: LD_INT 1
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 0
30226: PUSH
30227: LD_INT 1
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 1
30236: NEG
30237: PUSH
30238: LD_INT 0
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 1
30247: NEG
30248: PUSH
30249: LD_INT 1
30251: NEG
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 1
30259: PUSH
30260: LD_INT 1
30262: NEG
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 1
30270: NEG
30271: PUSH
30272: LD_INT 1
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30290: LD_ADDR_VAR 0 38
30294: PUSH
30295: LD_INT 0
30297: PUSH
30298: LD_INT 0
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 0
30307: PUSH
30308: LD_INT 1
30310: NEG
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: LD_INT 1
30318: PUSH
30319: LD_INT 0
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 1
30328: PUSH
30329: LD_INT 1
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 0
30338: PUSH
30339: LD_INT 1
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 1
30348: NEG
30349: PUSH
30350: LD_INT 0
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 1
30359: NEG
30360: PUSH
30361: LD_INT 1
30363: NEG
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 2
30371: PUSH
30372: LD_INT 1
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 2
30381: NEG
30382: PUSH
30383: LD_INT 1
30385: NEG
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30402: LD_ADDR_VAR 0 39
30406: PUSH
30407: LD_INT 0
30409: PUSH
30410: LD_INT 0
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 0
30419: PUSH
30420: LD_INT 1
30422: NEG
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 1
30430: PUSH
30431: LD_INT 0
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 1
30440: PUSH
30441: LD_INT 1
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 0
30450: PUSH
30451: LD_INT 1
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 1
30460: NEG
30461: PUSH
30462: LD_INT 0
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 1
30471: NEG
30472: PUSH
30473: LD_INT 1
30475: NEG
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 1
30483: NEG
30484: PUSH
30485: LD_INT 2
30487: NEG
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 1
30495: PUSH
30496: LD_INT 2
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30514: LD_ADDR_VAR 0 40
30518: PUSH
30519: LD_INT 0
30521: PUSH
30522: LD_INT 0
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 0
30531: PUSH
30532: LD_INT 1
30534: NEG
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 1
30542: PUSH
30543: LD_INT 0
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 1
30552: PUSH
30553: LD_INT 1
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 0
30562: PUSH
30563: LD_INT 1
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 1
30572: NEG
30573: PUSH
30574: LD_INT 0
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 1
30583: NEG
30584: PUSH
30585: LD_INT 1
30587: NEG
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 1
30595: PUSH
30596: LD_INT 1
30598: NEG
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 1
30606: NEG
30607: PUSH
30608: LD_INT 1
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30626: LD_ADDR_VAR 0 41
30630: PUSH
30631: LD_INT 0
30633: PUSH
30634: LD_INT 0
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 0
30643: PUSH
30644: LD_INT 1
30646: NEG
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: LD_INT 1
30654: PUSH
30655: LD_INT 0
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: LD_INT 1
30664: PUSH
30665: LD_INT 1
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 0
30674: PUSH
30675: LD_INT 1
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 1
30684: NEG
30685: PUSH
30686: LD_INT 0
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: LD_INT 1
30695: NEG
30696: PUSH
30697: LD_INT 1
30699: NEG
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 1
30707: NEG
30708: PUSH
30709: LD_INT 2
30711: NEG
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 1
30719: PUSH
30720: LD_INT 1
30722: NEG
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 2
30730: PUSH
30731: LD_INT 0
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 2
30740: PUSH
30741: LD_INT 1
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 2
30750: PUSH
30751: LD_INT 2
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 1
30760: PUSH
30761: LD_INT 2
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 1
30770: NEG
30771: PUSH
30772: LD_INT 1
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 2
30781: NEG
30782: PUSH
30783: LD_INT 0
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 2
30792: NEG
30793: PUSH
30794: LD_INT 1
30796: NEG
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: LD_INT 2
30804: NEG
30805: PUSH
30806: LD_INT 2
30808: NEG
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: LD_INT 2
30816: NEG
30817: PUSH
30818: LD_INT 3
30820: NEG
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 2
30828: PUSH
30829: LD_INT 1
30831: NEG
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 3
30839: PUSH
30840: LD_INT 0
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 3
30849: PUSH
30850: LD_INT 1
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 3
30859: PUSH
30860: LD_INT 2
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 3
30869: PUSH
30870: LD_INT 3
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 2
30879: PUSH
30880: LD_INT 3
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 2
30889: NEG
30890: PUSH
30891: LD_INT 1
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 3
30900: NEG
30901: PUSH
30902: LD_INT 0
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PUSH
30909: LD_INT 3
30911: NEG
30912: PUSH
30913: LD_INT 1
30915: NEG
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 3
30923: NEG
30924: PUSH
30925: LD_INT 2
30927: NEG
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 3
30935: NEG
30936: PUSH
30937: LD_INT 3
30939: NEG
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30976: LD_ADDR_VAR 0 42
30980: PUSH
30981: LD_INT 0
30983: PUSH
30984: LD_INT 0
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 0
30993: PUSH
30994: LD_INT 1
30996: NEG
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 1
31004: PUSH
31005: LD_INT 0
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: LD_INT 1
31014: PUSH
31015: LD_INT 1
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 0
31024: PUSH
31025: LD_INT 1
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 1
31034: NEG
31035: PUSH
31036: LD_INT 0
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 1
31045: NEG
31046: PUSH
31047: LD_INT 1
31049: NEG
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 1
31057: NEG
31058: PUSH
31059: LD_INT 2
31061: NEG
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 0
31069: PUSH
31070: LD_INT 2
31072: NEG
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: LD_INT 1
31080: PUSH
31081: LD_INT 1
31083: NEG
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 2
31091: PUSH
31092: LD_INT 1
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 2
31101: PUSH
31102: LD_INT 2
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 1
31111: PUSH
31112: LD_INT 2
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 0
31121: PUSH
31122: LD_INT 2
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 1
31131: NEG
31132: PUSH
31133: LD_INT 1
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 2
31142: NEG
31143: PUSH
31144: LD_INT 1
31146: NEG
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 2
31154: NEG
31155: PUSH
31156: LD_INT 2
31158: NEG
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 2
31166: NEG
31167: PUSH
31168: LD_INT 3
31170: NEG
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 1
31178: NEG
31179: PUSH
31180: LD_INT 3
31182: NEG
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 0
31190: PUSH
31191: LD_INT 3
31193: NEG
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 1
31201: PUSH
31202: LD_INT 2
31204: NEG
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 3
31212: PUSH
31213: LD_INT 2
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: LD_INT 3
31222: PUSH
31223: LD_INT 3
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 2
31232: PUSH
31233: LD_INT 3
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 1
31242: PUSH
31243: LD_INT 3
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 0
31252: PUSH
31253: LD_INT 3
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 1
31262: NEG
31263: PUSH
31264: LD_INT 2
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 3
31273: NEG
31274: PUSH
31275: LD_INT 2
31277: NEG
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 3
31285: NEG
31286: PUSH
31287: LD_INT 3
31289: NEG
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31326: LD_ADDR_VAR 0 43
31330: PUSH
31331: LD_INT 0
31333: PUSH
31334: LD_INT 0
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 0
31343: PUSH
31344: LD_INT 1
31346: NEG
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 1
31354: PUSH
31355: LD_INT 0
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: LD_INT 1
31364: PUSH
31365: LD_INT 1
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 0
31374: PUSH
31375: LD_INT 1
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 1
31384: NEG
31385: PUSH
31386: LD_INT 0
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 1
31395: NEG
31396: PUSH
31397: LD_INT 1
31399: NEG
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 1
31407: NEG
31408: PUSH
31409: LD_INT 2
31411: NEG
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 0
31419: PUSH
31420: LD_INT 2
31422: NEG
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 1
31430: PUSH
31431: LD_INT 1
31433: NEG
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: LD_INT 2
31441: PUSH
31442: LD_INT 0
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: LD_INT 2
31451: PUSH
31452: LD_INT 1
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: LD_INT 1
31461: PUSH
31462: LD_INT 2
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 0
31471: PUSH
31472: LD_INT 2
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 1
31481: NEG
31482: PUSH
31483: LD_INT 1
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 2
31492: NEG
31493: PUSH
31494: LD_INT 0
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 2
31503: NEG
31504: PUSH
31505: LD_INT 1
31507: NEG
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 1
31515: NEG
31516: PUSH
31517: LD_INT 3
31519: NEG
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 0
31527: PUSH
31528: LD_INT 3
31530: NEG
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 1
31538: PUSH
31539: LD_INT 2
31541: NEG
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 2
31549: PUSH
31550: LD_INT 1
31552: NEG
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 3
31560: PUSH
31561: LD_INT 0
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 3
31570: PUSH
31571: LD_INT 1
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 1
31580: PUSH
31581: LD_INT 3
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 0
31590: PUSH
31591: LD_INT 3
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 1
31600: NEG
31601: PUSH
31602: LD_INT 2
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 2
31611: NEG
31612: PUSH
31613: LD_INT 1
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 3
31622: NEG
31623: PUSH
31624: LD_INT 0
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 3
31633: NEG
31634: PUSH
31635: LD_INT 1
31637: NEG
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31674: LD_ADDR_VAR 0 44
31678: PUSH
31679: LD_INT 0
31681: PUSH
31682: LD_INT 0
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 0
31691: PUSH
31692: LD_INT 1
31694: NEG
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 1
31702: PUSH
31703: LD_INT 0
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 1
31712: PUSH
31713: LD_INT 1
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 0
31722: PUSH
31723: LD_INT 1
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 1
31732: NEG
31733: PUSH
31734: LD_INT 0
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 1
31743: NEG
31744: PUSH
31745: LD_INT 1
31747: NEG
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 1
31755: NEG
31756: PUSH
31757: LD_INT 2
31759: NEG
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 1
31767: PUSH
31768: LD_INT 1
31770: NEG
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 2
31778: PUSH
31779: LD_INT 0
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 2
31788: PUSH
31789: LD_INT 1
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PUSH
31796: LD_INT 2
31798: PUSH
31799: LD_INT 2
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 1
31808: PUSH
31809: LD_INT 2
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 1
31818: NEG
31819: PUSH
31820: LD_INT 1
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 2
31829: NEG
31830: PUSH
31831: LD_INT 0
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 2
31840: NEG
31841: PUSH
31842: LD_INT 1
31844: NEG
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 2
31852: NEG
31853: PUSH
31854: LD_INT 2
31856: NEG
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 2
31864: NEG
31865: PUSH
31866: LD_INT 3
31868: NEG
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 2
31876: PUSH
31877: LD_INT 1
31879: NEG
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 3
31887: PUSH
31888: LD_INT 0
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 3
31897: PUSH
31898: LD_INT 1
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 3
31907: PUSH
31908: LD_INT 2
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 3
31917: PUSH
31918: LD_INT 3
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 2
31927: PUSH
31928: LD_INT 3
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 2
31937: NEG
31938: PUSH
31939: LD_INT 1
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 3
31948: NEG
31949: PUSH
31950: LD_INT 0
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 3
31959: NEG
31960: PUSH
31961: LD_INT 1
31963: NEG
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 3
31971: NEG
31972: PUSH
31973: LD_INT 2
31975: NEG
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 3
31983: NEG
31984: PUSH
31985: LD_INT 3
31987: NEG
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32024: LD_ADDR_VAR 0 45
32028: PUSH
32029: LD_INT 0
32031: PUSH
32032: LD_INT 0
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 0
32041: PUSH
32042: LD_INT 1
32044: NEG
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 1
32052: PUSH
32053: LD_INT 0
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 1
32062: PUSH
32063: LD_INT 1
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 0
32072: PUSH
32073: LD_INT 1
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 1
32082: NEG
32083: PUSH
32084: LD_INT 0
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 1
32093: NEG
32094: PUSH
32095: LD_INT 1
32097: NEG
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 1
32105: NEG
32106: PUSH
32107: LD_INT 2
32109: NEG
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 0
32117: PUSH
32118: LD_INT 2
32120: NEG
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 1
32128: PUSH
32129: LD_INT 1
32131: NEG
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 2
32139: PUSH
32140: LD_INT 1
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 2
32149: PUSH
32150: LD_INT 2
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 1
32159: PUSH
32160: LD_INT 2
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 0
32169: PUSH
32170: LD_INT 2
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 1
32179: NEG
32180: PUSH
32181: LD_INT 1
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 2
32190: NEG
32191: PUSH
32192: LD_INT 1
32194: NEG
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 2
32202: NEG
32203: PUSH
32204: LD_INT 2
32206: NEG
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 2
32214: NEG
32215: PUSH
32216: LD_INT 3
32218: NEG
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 1
32226: NEG
32227: PUSH
32228: LD_INT 3
32230: NEG
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 0
32238: PUSH
32239: LD_INT 3
32241: NEG
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 1
32249: PUSH
32250: LD_INT 2
32252: NEG
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 3
32260: PUSH
32261: LD_INT 2
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 3
32270: PUSH
32271: LD_INT 3
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 2
32280: PUSH
32281: LD_INT 3
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 1
32290: PUSH
32291: LD_INT 3
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 0
32300: PUSH
32301: LD_INT 3
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 1
32310: NEG
32311: PUSH
32312: LD_INT 2
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 3
32321: NEG
32322: PUSH
32323: LD_INT 2
32325: NEG
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 3
32333: NEG
32334: PUSH
32335: LD_INT 3
32337: NEG
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32374: LD_ADDR_VAR 0 46
32378: PUSH
32379: LD_INT 0
32381: PUSH
32382: LD_INT 0
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 0
32391: PUSH
32392: LD_INT 1
32394: NEG
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: LD_INT 1
32402: PUSH
32403: LD_INT 0
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 1
32412: PUSH
32413: LD_INT 1
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 0
32422: PUSH
32423: LD_INT 1
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 1
32432: NEG
32433: PUSH
32434: LD_INT 0
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 1
32443: NEG
32444: PUSH
32445: LD_INT 1
32447: NEG
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 1
32455: NEG
32456: PUSH
32457: LD_INT 2
32459: NEG
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 0
32467: PUSH
32468: LD_INT 2
32470: NEG
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 1
32478: PUSH
32479: LD_INT 1
32481: NEG
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 2
32489: PUSH
32490: LD_INT 0
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 2
32499: PUSH
32500: LD_INT 1
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 1
32509: PUSH
32510: LD_INT 2
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 0
32519: PUSH
32520: LD_INT 2
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 1
32529: NEG
32530: PUSH
32531: LD_INT 1
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 2
32540: NEG
32541: PUSH
32542: LD_INT 0
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 2
32551: NEG
32552: PUSH
32553: LD_INT 1
32555: NEG
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 1
32563: NEG
32564: PUSH
32565: LD_INT 3
32567: NEG
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: LD_INT 0
32575: PUSH
32576: LD_INT 3
32578: NEG
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 1
32586: PUSH
32587: LD_INT 2
32589: NEG
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 2
32597: PUSH
32598: LD_INT 1
32600: NEG
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 3
32608: PUSH
32609: LD_INT 0
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 3
32618: PUSH
32619: LD_INT 1
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 1
32628: PUSH
32629: LD_INT 3
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 0
32638: PUSH
32639: LD_INT 3
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 1
32648: NEG
32649: PUSH
32650: LD_INT 2
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 2
32659: NEG
32660: PUSH
32661: LD_INT 1
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 3
32670: NEG
32671: PUSH
32672: LD_INT 0
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 3
32681: NEG
32682: PUSH
32683: LD_INT 1
32685: NEG
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32722: LD_ADDR_VAR 0 47
32726: PUSH
32727: LD_INT 0
32729: PUSH
32730: LD_INT 0
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 0
32739: PUSH
32740: LD_INT 1
32742: NEG
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 1
32750: PUSH
32751: LD_INT 0
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 1
32760: PUSH
32761: LD_INT 1
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 0
32770: PUSH
32771: LD_INT 1
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 1
32780: NEG
32781: PUSH
32782: LD_INT 0
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 1
32791: NEG
32792: PUSH
32793: LD_INT 1
32795: NEG
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 1
32803: NEG
32804: PUSH
32805: LD_INT 2
32807: NEG
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 0
32815: PUSH
32816: LD_INT 2
32818: NEG
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 1
32826: PUSH
32827: LD_INT 1
32829: NEG
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 2
32837: NEG
32838: PUSH
32839: LD_INT 1
32841: NEG
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 2
32849: NEG
32850: PUSH
32851: LD_INT 2
32853: NEG
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32873: LD_ADDR_VAR 0 48
32877: PUSH
32878: LD_INT 0
32880: PUSH
32881: LD_INT 0
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 0
32890: PUSH
32891: LD_INT 1
32893: NEG
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 1
32901: PUSH
32902: LD_INT 0
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 1
32911: PUSH
32912: LD_INT 1
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 0
32921: PUSH
32922: LD_INT 1
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 1
32931: NEG
32932: PUSH
32933: LD_INT 0
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 1
32942: NEG
32943: PUSH
32944: LD_INT 1
32946: NEG
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 1
32954: NEG
32955: PUSH
32956: LD_INT 2
32958: NEG
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 0
32966: PUSH
32967: LD_INT 2
32969: NEG
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 1
32977: PUSH
32978: LD_INT 1
32980: NEG
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 2
32988: PUSH
32989: LD_INT 0
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 2
32998: PUSH
32999: LD_INT 1
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33020: LD_ADDR_VAR 0 49
33024: PUSH
33025: LD_INT 0
33027: PUSH
33028: LD_INT 0
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 0
33037: PUSH
33038: LD_INT 1
33040: NEG
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 1
33048: PUSH
33049: LD_INT 0
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 1
33058: PUSH
33059: LD_INT 1
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 0
33068: PUSH
33069: LD_INT 1
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 1
33078: NEG
33079: PUSH
33080: LD_INT 0
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 1
33089: NEG
33090: PUSH
33091: LD_INT 1
33093: NEG
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 1
33101: PUSH
33102: LD_INT 1
33104: NEG
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 2
33112: PUSH
33113: LD_INT 0
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 2
33122: PUSH
33123: LD_INT 1
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 2
33132: PUSH
33133: LD_INT 2
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 1
33142: PUSH
33143: LD_INT 2
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33164: LD_ADDR_VAR 0 50
33168: PUSH
33169: LD_INT 0
33171: PUSH
33172: LD_INT 0
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 0
33181: PUSH
33182: LD_INT 1
33184: NEG
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 1
33192: PUSH
33193: LD_INT 0
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 1
33202: PUSH
33203: LD_INT 1
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: LD_INT 0
33212: PUSH
33213: LD_INT 1
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 1
33222: NEG
33223: PUSH
33224: LD_INT 0
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 1
33233: NEG
33234: PUSH
33235: LD_INT 1
33237: NEG
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 2
33245: PUSH
33246: LD_INT 1
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 2
33255: PUSH
33256: LD_INT 2
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 1
33265: PUSH
33266: LD_INT 2
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 0
33275: PUSH
33276: LD_INT 2
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 1
33285: NEG
33286: PUSH
33287: LD_INT 1
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33308: LD_ADDR_VAR 0 51
33312: PUSH
33313: LD_INT 0
33315: PUSH
33316: LD_INT 0
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 0
33325: PUSH
33326: LD_INT 1
33328: NEG
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 1
33336: PUSH
33337: LD_INT 0
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 1
33346: PUSH
33347: LD_INT 1
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 0
33356: PUSH
33357: LD_INT 1
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_INT 1
33366: NEG
33367: PUSH
33368: LD_INT 0
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 1
33377: NEG
33378: PUSH
33379: LD_INT 1
33381: NEG
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 1
33389: PUSH
33390: LD_INT 2
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 0
33399: PUSH
33400: LD_INT 2
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 1
33409: NEG
33410: PUSH
33411: LD_INT 1
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 2
33420: NEG
33421: PUSH
33422: LD_INT 0
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 2
33431: NEG
33432: PUSH
33433: LD_INT 1
33435: NEG
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33455: LD_ADDR_VAR 0 52
33459: PUSH
33460: LD_INT 0
33462: PUSH
33463: LD_INT 0
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 0
33472: PUSH
33473: LD_INT 1
33475: NEG
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 1
33483: PUSH
33484: LD_INT 0
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 1
33493: PUSH
33494: LD_INT 1
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 0
33503: PUSH
33504: LD_INT 1
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 1
33513: NEG
33514: PUSH
33515: LD_INT 0
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 1
33524: NEG
33525: PUSH
33526: LD_INT 1
33528: NEG
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 1
33536: NEG
33537: PUSH
33538: LD_INT 2
33540: NEG
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 1
33548: NEG
33549: PUSH
33550: LD_INT 1
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 2
33559: NEG
33560: PUSH
33561: LD_INT 0
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 2
33570: NEG
33571: PUSH
33572: LD_INT 1
33574: NEG
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 2
33582: NEG
33583: PUSH
33584: LD_INT 2
33586: NEG
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33606: LD_ADDR_VAR 0 53
33610: PUSH
33611: LD_INT 0
33613: PUSH
33614: LD_INT 0
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 0
33623: PUSH
33624: LD_INT 1
33626: NEG
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 1
33634: PUSH
33635: LD_INT 0
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 1
33644: PUSH
33645: LD_INT 1
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 0
33654: PUSH
33655: LD_INT 1
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 1
33664: NEG
33665: PUSH
33666: LD_INT 0
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 1
33675: NEG
33676: PUSH
33677: LD_INT 1
33679: NEG
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 1
33687: NEG
33688: PUSH
33689: LD_INT 2
33691: NEG
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: LD_INT 0
33699: PUSH
33700: LD_INT 2
33702: NEG
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: LD_INT 1
33710: PUSH
33711: LD_INT 1
33713: NEG
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 2
33721: PUSH
33722: LD_INT 0
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 2
33731: PUSH
33732: LD_INT 1
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 2
33741: PUSH
33742: LD_INT 2
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 1
33751: PUSH
33752: LD_INT 2
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 0
33761: PUSH
33762: LD_INT 2
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 1
33771: NEG
33772: PUSH
33773: LD_INT 1
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 2
33782: NEG
33783: PUSH
33784: LD_INT 0
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 2
33793: NEG
33794: PUSH
33795: LD_INT 1
33797: NEG
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 2
33805: NEG
33806: PUSH
33807: LD_INT 2
33809: NEG
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33836: LD_ADDR_VAR 0 54
33840: PUSH
33841: LD_INT 0
33843: PUSH
33844: LD_INT 0
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 0
33853: PUSH
33854: LD_INT 1
33856: NEG
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 1
33864: PUSH
33865: LD_INT 0
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 1
33874: PUSH
33875: LD_INT 1
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 0
33884: PUSH
33885: LD_INT 1
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 1
33894: NEG
33895: PUSH
33896: LD_INT 0
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 1
33905: NEG
33906: PUSH
33907: LD_INT 1
33909: NEG
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 1
33917: NEG
33918: PUSH
33919: LD_INT 2
33921: NEG
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 0
33929: PUSH
33930: LD_INT 2
33932: NEG
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 1
33940: PUSH
33941: LD_INT 1
33943: NEG
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 2
33951: PUSH
33952: LD_INT 0
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 2
33961: PUSH
33962: LD_INT 1
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: LD_INT 2
33971: PUSH
33972: LD_INT 2
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: LD_INT 1
33981: PUSH
33982: LD_INT 2
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 0
33991: PUSH
33992: LD_INT 2
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 1
34001: NEG
34002: PUSH
34003: LD_INT 1
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: LD_INT 2
34012: NEG
34013: PUSH
34014: LD_INT 0
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 2
34023: NEG
34024: PUSH
34025: LD_INT 1
34027: NEG
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 2
34035: NEG
34036: PUSH
34037: LD_INT 2
34039: NEG
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34066: LD_ADDR_VAR 0 55
34070: PUSH
34071: LD_INT 0
34073: PUSH
34074: LD_INT 0
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 0
34083: PUSH
34084: LD_INT 1
34086: NEG
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 1
34094: PUSH
34095: LD_INT 0
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 1
34104: PUSH
34105: LD_INT 1
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 0
34114: PUSH
34115: LD_INT 1
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 1
34124: NEG
34125: PUSH
34126: LD_INT 0
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 1
34135: NEG
34136: PUSH
34137: LD_INT 1
34139: NEG
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 1
34147: NEG
34148: PUSH
34149: LD_INT 2
34151: NEG
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 0
34159: PUSH
34160: LD_INT 2
34162: NEG
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 1
34170: PUSH
34171: LD_INT 1
34173: NEG
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 2
34181: PUSH
34182: LD_INT 0
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 2
34191: PUSH
34192: LD_INT 1
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 2
34201: PUSH
34202: LD_INT 2
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 1
34211: PUSH
34212: LD_INT 2
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 0
34221: PUSH
34222: LD_INT 2
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 1
34231: NEG
34232: PUSH
34233: LD_INT 1
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 2
34242: NEG
34243: PUSH
34244: LD_INT 0
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 2
34253: NEG
34254: PUSH
34255: LD_INT 1
34257: NEG
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 2
34265: NEG
34266: PUSH
34267: LD_INT 2
34269: NEG
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34296: LD_ADDR_VAR 0 56
34300: PUSH
34301: LD_INT 0
34303: PUSH
34304: LD_INT 0
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 0
34313: PUSH
34314: LD_INT 1
34316: NEG
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 1
34324: PUSH
34325: LD_INT 0
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 1
34334: PUSH
34335: LD_INT 1
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 0
34344: PUSH
34345: LD_INT 1
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 1
34354: NEG
34355: PUSH
34356: LD_INT 0
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 1
34365: NEG
34366: PUSH
34367: LD_INT 1
34369: NEG
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 1
34377: NEG
34378: PUSH
34379: LD_INT 2
34381: NEG
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 0
34389: PUSH
34390: LD_INT 2
34392: NEG
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 1
34400: PUSH
34401: LD_INT 1
34403: NEG
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 2
34411: PUSH
34412: LD_INT 0
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 2
34421: PUSH
34422: LD_INT 1
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 2
34431: PUSH
34432: LD_INT 2
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 1
34441: PUSH
34442: LD_INT 2
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 0
34451: PUSH
34452: LD_INT 2
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 1
34461: NEG
34462: PUSH
34463: LD_INT 1
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 2
34472: NEG
34473: PUSH
34474: LD_INT 0
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: PUSH
34481: LD_INT 2
34483: NEG
34484: PUSH
34485: LD_INT 1
34487: NEG
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 2
34495: NEG
34496: PUSH
34497: LD_INT 2
34499: NEG
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34526: LD_ADDR_VAR 0 57
34530: PUSH
34531: LD_INT 0
34533: PUSH
34534: LD_INT 0
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 0
34543: PUSH
34544: LD_INT 1
34546: NEG
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 1
34554: PUSH
34555: LD_INT 0
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 1
34564: PUSH
34565: LD_INT 1
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 0
34574: PUSH
34575: LD_INT 1
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 1
34584: NEG
34585: PUSH
34586: LD_INT 0
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_INT 1
34595: NEG
34596: PUSH
34597: LD_INT 1
34599: NEG
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 1
34607: NEG
34608: PUSH
34609: LD_INT 2
34611: NEG
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 0
34619: PUSH
34620: LD_INT 2
34622: NEG
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 1
34630: PUSH
34631: LD_INT 1
34633: NEG
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 2
34641: PUSH
34642: LD_INT 0
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 2
34651: PUSH
34652: LD_INT 1
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 2
34661: PUSH
34662: LD_INT 2
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 1
34671: PUSH
34672: LD_INT 2
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 0
34681: PUSH
34682: LD_INT 2
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 1
34691: NEG
34692: PUSH
34693: LD_INT 1
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 2
34702: NEG
34703: PUSH
34704: LD_INT 0
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 2
34713: NEG
34714: PUSH
34715: LD_INT 1
34717: NEG
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 2
34725: NEG
34726: PUSH
34727: LD_INT 2
34729: NEG
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34756: LD_ADDR_VAR 0 58
34760: PUSH
34761: LD_INT 0
34763: PUSH
34764: LD_INT 0
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 0
34773: PUSH
34774: LD_INT 1
34776: NEG
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 1
34784: PUSH
34785: LD_INT 0
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 1
34794: PUSH
34795: LD_INT 1
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 0
34804: PUSH
34805: LD_INT 1
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 1
34814: NEG
34815: PUSH
34816: LD_INT 0
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: LD_INT 1
34825: NEG
34826: PUSH
34827: LD_INT 1
34829: NEG
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 1
34837: NEG
34838: PUSH
34839: LD_INT 2
34841: NEG
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 0
34849: PUSH
34850: LD_INT 2
34852: NEG
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 1
34860: PUSH
34861: LD_INT 1
34863: NEG
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 2
34871: PUSH
34872: LD_INT 0
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 2
34881: PUSH
34882: LD_INT 1
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 2
34891: PUSH
34892: LD_INT 2
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 1
34901: PUSH
34902: LD_INT 2
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 0
34911: PUSH
34912: LD_INT 2
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 1
34921: NEG
34922: PUSH
34923: LD_INT 1
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 2
34932: NEG
34933: PUSH
34934: LD_INT 0
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 2
34943: NEG
34944: PUSH
34945: LD_INT 1
34947: NEG
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 2
34955: NEG
34956: PUSH
34957: LD_INT 2
34959: NEG
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34986: LD_ADDR_VAR 0 59
34990: PUSH
34991: LD_INT 0
34993: PUSH
34994: LD_INT 0
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 0
35003: PUSH
35004: LD_INT 1
35006: NEG
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 1
35014: PUSH
35015: LD_INT 0
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 1
35024: PUSH
35025: LD_INT 1
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 0
35034: PUSH
35035: LD_INT 1
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 1
35044: NEG
35045: PUSH
35046: LD_INT 0
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 1
35055: NEG
35056: PUSH
35057: LD_INT 1
35059: NEG
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35074: LD_ADDR_VAR 0 60
35078: PUSH
35079: LD_INT 0
35081: PUSH
35082: LD_INT 0
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 0
35091: PUSH
35092: LD_INT 1
35094: NEG
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 1
35102: PUSH
35103: LD_INT 0
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 1
35112: PUSH
35113: LD_INT 1
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 0
35122: PUSH
35123: LD_INT 1
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 1
35132: NEG
35133: PUSH
35134: LD_INT 0
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 1
35143: NEG
35144: PUSH
35145: LD_INT 1
35147: NEG
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35162: LD_ADDR_VAR 0 61
35166: PUSH
35167: LD_INT 0
35169: PUSH
35170: LD_INT 0
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 0
35179: PUSH
35180: LD_INT 1
35182: NEG
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 1
35190: PUSH
35191: LD_INT 0
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 1
35200: PUSH
35201: LD_INT 1
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 0
35210: PUSH
35211: LD_INT 1
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 1
35220: NEG
35221: PUSH
35222: LD_INT 0
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: LD_INT 1
35231: NEG
35232: PUSH
35233: LD_INT 1
35235: NEG
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35250: LD_ADDR_VAR 0 62
35254: PUSH
35255: LD_INT 0
35257: PUSH
35258: LD_INT 0
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 0
35267: PUSH
35268: LD_INT 1
35270: NEG
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 1
35278: PUSH
35279: LD_INT 0
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: LD_INT 1
35288: PUSH
35289: LD_INT 1
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 0
35298: PUSH
35299: LD_INT 1
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 1
35308: NEG
35309: PUSH
35310: LD_INT 0
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 1
35319: NEG
35320: PUSH
35321: LD_INT 1
35323: NEG
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35338: LD_ADDR_VAR 0 63
35342: PUSH
35343: LD_INT 0
35345: PUSH
35346: LD_INT 0
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 0
35355: PUSH
35356: LD_INT 1
35358: NEG
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 1
35366: PUSH
35367: LD_INT 0
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 1
35376: PUSH
35377: LD_INT 1
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 0
35386: PUSH
35387: LD_INT 1
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 1
35396: NEG
35397: PUSH
35398: LD_INT 0
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 1
35407: NEG
35408: PUSH
35409: LD_INT 1
35411: NEG
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35426: LD_ADDR_VAR 0 64
35430: PUSH
35431: LD_INT 0
35433: PUSH
35434: LD_INT 0
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 0
35443: PUSH
35444: LD_INT 1
35446: NEG
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 1
35454: PUSH
35455: LD_INT 0
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 1
35464: PUSH
35465: LD_INT 1
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 0
35474: PUSH
35475: LD_INT 1
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 1
35484: NEG
35485: PUSH
35486: LD_INT 0
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 1
35495: NEG
35496: PUSH
35497: LD_INT 1
35499: NEG
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: LIST
35513: ST_TO_ADDR
// end ; 1 :
35514: GO 41411
35516: LD_INT 1
35518: DOUBLE
35519: EQUAL
35520: IFTRUE 35524
35522: GO 38147
35524: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35525: LD_ADDR_VAR 0 11
35529: PUSH
35530: LD_INT 1
35532: NEG
35533: PUSH
35534: LD_INT 3
35536: NEG
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 0
35544: PUSH
35545: LD_INT 3
35547: NEG
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 1
35555: PUSH
35556: LD_INT 2
35558: NEG
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: LIST
35568: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35569: LD_ADDR_VAR 0 12
35573: PUSH
35574: LD_INT 2
35576: PUSH
35577: LD_INT 1
35579: NEG
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 3
35587: PUSH
35588: LD_INT 0
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 3
35597: PUSH
35598: LD_INT 1
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: LIST
35609: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35610: LD_ADDR_VAR 0 13
35614: PUSH
35615: LD_INT 3
35617: PUSH
35618: LD_INT 2
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: PUSH
35625: LD_INT 3
35627: PUSH
35628: LD_INT 3
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 2
35637: PUSH
35638: LD_INT 3
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: LIST
35649: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35650: LD_ADDR_VAR 0 14
35654: PUSH
35655: LD_INT 1
35657: PUSH
35658: LD_INT 3
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: PUSH
35665: LD_INT 0
35667: PUSH
35668: LD_INT 3
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: PUSH
35675: LD_INT 1
35677: NEG
35678: PUSH
35679: LD_INT 2
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: LIST
35690: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35691: LD_ADDR_VAR 0 15
35695: PUSH
35696: LD_INT 2
35698: NEG
35699: PUSH
35700: LD_INT 1
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 3
35709: NEG
35710: PUSH
35711: LD_INT 0
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 3
35720: NEG
35721: PUSH
35722: LD_INT 1
35724: NEG
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: LIST
35734: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35735: LD_ADDR_VAR 0 16
35739: PUSH
35740: LD_INT 2
35742: NEG
35743: PUSH
35744: LD_INT 3
35746: NEG
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 3
35754: NEG
35755: PUSH
35756: LD_INT 2
35758: NEG
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 3
35766: NEG
35767: PUSH
35768: LD_INT 3
35770: NEG
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: LIST
35780: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35781: LD_ADDR_VAR 0 17
35785: PUSH
35786: LD_INT 1
35788: NEG
35789: PUSH
35790: LD_INT 3
35792: NEG
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 0
35800: PUSH
35801: LD_INT 3
35803: NEG
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 1
35811: PUSH
35812: LD_INT 2
35814: NEG
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: LIST
35824: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35825: LD_ADDR_VAR 0 18
35829: PUSH
35830: LD_INT 2
35832: PUSH
35833: LD_INT 1
35835: NEG
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 3
35843: PUSH
35844: LD_INT 0
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 3
35853: PUSH
35854: LD_INT 1
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: LIST
35865: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35866: LD_ADDR_VAR 0 19
35870: PUSH
35871: LD_INT 3
35873: PUSH
35874: LD_INT 2
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 3
35883: PUSH
35884: LD_INT 3
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: LD_INT 2
35893: PUSH
35894: LD_INT 3
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: LIST
35905: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35906: LD_ADDR_VAR 0 20
35910: PUSH
35911: LD_INT 1
35913: PUSH
35914: LD_INT 3
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: LD_INT 0
35923: PUSH
35924: LD_INT 3
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: LD_INT 1
35933: NEG
35934: PUSH
35935: LD_INT 2
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: LIST
35946: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35947: LD_ADDR_VAR 0 21
35951: PUSH
35952: LD_INT 2
35954: NEG
35955: PUSH
35956: LD_INT 1
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 3
35965: NEG
35966: PUSH
35967: LD_INT 0
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: LD_INT 3
35976: NEG
35977: PUSH
35978: LD_INT 1
35980: NEG
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: LIST
35990: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35991: LD_ADDR_VAR 0 22
35995: PUSH
35996: LD_INT 2
35998: NEG
35999: PUSH
36000: LD_INT 3
36002: NEG
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 3
36010: NEG
36011: PUSH
36012: LD_INT 2
36014: NEG
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 3
36022: NEG
36023: PUSH
36024: LD_INT 3
36026: NEG
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: LIST
36036: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
36037: LD_ADDR_VAR 0 23
36041: PUSH
36042: LD_INT 0
36044: PUSH
36045: LD_INT 3
36047: NEG
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: LD_INT 1
36055: NEG
36056: PUSH
36057: LD_INT 4
36059: NEG
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 1
36067: PUSH
36068: LD_INT 3
36070: NEG
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: LIST
36080: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36081: LD_ADDR_VAR 0 24
36085: PUSH
36086: LD_INT 3
36088: PUSH
36089: LD_INT 0
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: LD_INT 3
36098: PUSH
36099: LD_INT 1
36101: NEG
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 4
36109: PUSH
36110: LD_INT 1
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: LIST
36121: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
36122: LD_ADDR_VAR 0 25
36126: PUSH
36127: LD_INT 3
36129: PUSH
36130: LD_INT 3
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 4
36139: PUSH
36140: LD_INT 3
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: LD_INT 3
36149: PUSH
36150: LD_INT 4
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: LIST
36161: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
36162: LD_ADDR_VAR 0 26
36166: PUSH
36167: LD_INT 0
36169: PUSH
36170: LD_INT 3
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: PUSH
36177: LD_INT 1
36179: PUSH
36180: LD_INT 4
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 1
36189: NEG
36190: PUSH
36191: LD_INT 3
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: LIST
36202: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
36203: LD_ADDR_VAR 0 27
36207: PUSH
36208: LD_INT 3
36210: NEG
36211: PUSH
36212: LD_INT 0
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 3
36221: NEG
36222: PUSH
36223: LD_INT 1
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 4
36232: NEG
36233: PUSH
36234: LD_INT 1
36236: NEG
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: LIST
36246: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
36247: LD_ADDR_VAR 0 28
36251: PUSH
36252: LD_INT 3
36254: NEG
36255: PUSH
36256: LD_INT 3
36258: NEG
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: LD_INT 3
36266: NEG
36267: PUSH
36268: LD_INT 4
36270: NEG
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 4
36278: NEG
36279: PUSH
36280: LD_INT 3
36282: NEG
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: LIST
36292: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
36293: LD_ADDR_VAR 0 29
36297: PUSH
36298: LD_INT 1
36300: NEG
36301: PUSH
36302: LD_INT 3
36304: NEG
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 0
36312: PUSH
36313: LD_INT 3
36315: NEG
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 1
36323: PUSH
36324: LD_INT 2
36326: NEG
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 1
36334: NEG
36335: PUSH
36336: LD_INT 4
36338: NEG
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 0
36346: PUSH
36347: LD_INT 4
36349: NEG
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 1
36357: PUSH
36358: LD_INT 3
36360: NEG
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 1
36368: NEG
36369: PUSH
36370: LD_INT 5
36372: NEG
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 0
36380: PUSH
36381: LD_INT 5
36383: NEG
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 1
36391: PUSH
36392: LD_INT 4
36394: NEG
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 1
36402: NEG
36403: PUSH
36404: LD_INT 6
36406: NEG
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 0
36414: PUSH
36415: LD_INT 6
36417: NEG
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 1
36425: PUSH
36426: LD_INT 5
36428: NEG
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
36448: LD_ADDR_VAR 0 30
36452: PUSH
36453: LD_INT 2
36455: PUSH
36456: LD_INT 1
36458: NEG
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 3
36466: PUSH
36467: LD_INT 0
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 3
36476: PUSH
36477: LD_INT 1
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 3
36486: PUSH
36487: LD_INT 1
36489: NEG
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 4
36497: PUSH
36498: LD_INT 0
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 4
36507: PUSH
36508: LD_INT 1
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 4
36517: PUSH
36518: LD_INT 1
36520: NEG
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 5
36528: PUSH
36529: LD_INT 0
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 5
36538: PUSH
36539: LD_INT 1
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: LD_INT 5
36548: PUSH
36549: LD_INT 1
36551: NEG
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 6
36559: PUSH
36560: LD_INT 0
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 6
36569: PUSH
36570: LD_INT 1
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
36591: LD_ADDR_VAR 0 31
36595: PUSH
36596: LD_INT 3
36598: PUSH
36599: LD_INT 2
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 3
36608: PUSH
36609: LD_INT 3
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 2
36618: PUSH
36619: LD_INT 3
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 4
36628: PUSH
36629: LD_INT 3
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 4
36638: PUSH
36639: LD_INT 4
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 3
36648: PUSH
36649: LD_INT 4
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 5
36658: PUSH
36659: LD_INT 4
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 5
36668: PUSH
36669: LD_INT 5
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: LD_INT 4
36678: PUSH
36679: LD_INT 5
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PUSH
36686: LD_INT 6
36688: PUSH
36689: LD_INT 5
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 6
36698: PUSH
36699: LD_INT 6
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_INT 5
36708: PUSH
36709: LD_INT 6
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
36730: LD_ADDR_VAR 0 32
36734: PUSH
36735: LD_INT 1
36737: PUSH
36738: LD_INT 3
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 0
36747: PUSH
36748: LD_INT 3
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 1
36757: NEG
36758: PUSH
36759: LD_INT 2
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 1
36768: PUSH
36769: LD_INT 4
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 0
36778: PUSH
36779: LD_INT 4
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 1
36788: NEG
36789: PUSH
36790: LD_INT 3
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_INT 1
36799: PUSH
36800: LD_INT 5
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 0
36809: PUSH
36810: LD_INT 5
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 1
36819: NEG
36820: PUSH
36821: LD_INT 4
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 1
36830: PUSH
36831: LD_INT 6
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 0
36840: PUSH
36841: LD_INT 6
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 1
36850: NEG
36851: PUSH
36852: LD_INT 5
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
36873: LD_ADDR_VAR 0 33
36877: PUSH
36878: LD_INT 2
36880: NEG
36881: PUSH
36882: LD_INT 1
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 3
36891: NEG
36892: PUSH
36893: LD_INT 0
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 3
36902: NEG
36903: PUSH
36904: LD_INT 1
36906: NEG
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 3
36914: NEG
36915: PUSH
36916: LD_INT 1
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 4
36925: NEG
36926: PUSH
36927: LD_INT 0
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 4
36936: NEG
36937: PUSH
36938: LD_INT 1
36940: NEG
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 4
36948: NEG
36949: PUSH
36950: LD_INT 1
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 5
36959: NEG
36960: PUSH
36961: LD_INT 0
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 5
36970: NEG
36971: PUSH
36972: LD_INT 1
36974: NEG
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 5
36982: NEG
36983: PUSH
36984: LD_INT 1
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 6
36993: NEG
36994: PUSH
36995: LD_INT 0
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 6
37004: NEG
37005: PUSH
37006: LD_INT 1
37008: NEG
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
37028: LD_ADDR_VAR 0 34
37032: PUSH
37033: LD_INT 2
37035: NEG
37036: PUSH
37037: LD_INT 3
37039: NEG
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 3
37047: NEG
37048: PUSH
37049: LD_INT 2
37051: NEG
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 3
37059: NEG
37060: PUSH
37061: LD_INT 3
37063: NEG
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 3
37071: NEG
37072: PUSH
37073: LD_INT 4
37075: NEG
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 4
37083: NEG
37084: PUSH
37085: LD_INT 3
37087: NEG
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 4
37095: NEG
37096: PUSH
37097: LD_INT 4
37099: NEG
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 4
37107: NEG
37108: PUSH
37109: LD_INT 5
37111: NEG
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 5
37119: NEG
37120: PUSH
37121: LD_INT 4
37123: NEG
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 5
37131: NEG
37132: PUSH
37133: LD_INT 5
37135: NEG
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 5
37143: NEG
37144: PUSH
37145: LD_INT 6
37147: NEG
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 6
37155: NEG
37156: PUSH
37157: LD_INT 5
37159: NEG
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: LD_INT 6
37167: NEG
37168: PUSH
37169: LD_INT 6
37171: NEG
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
37191: LD_ADDR_VAR 0 41
37195: PUSH
37196: LD_INT 0
37198: PUSH
37199: LD_INT 2
37201: NEG
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 1
37209: NEG
37210: PUSH
37211: LD_INT 3
37213: NEG
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 1
37221: PUSH
37222: LD_INT 2
37224: NEG
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: LIST
37234: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
37235: LD_ADDR_VAR 0 42
37239: PUSH
37240: LD_INT 2
37242: PUSH
37243: LD_INT 0
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 2
37252: PUSH
37253: LD_INT 1
37255: NEG
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 3
37263: PUSH
37264: LD_INT 1
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: LIST
37275: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
37276: LD_ADDR_VAR 0 43
37280: PUSH
37281: LD_INT 2
37283: PUSH
37284: LD_INT 2
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 3
37293: PUSH
37294: LD_INT 2
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 2
37303: PUSH
37304: LD_INT 3
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: LIST
37315: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
37316: LD_ADDR_VAR 0 44
37320: PUSH
37321: LD_INT 0
37323: PUSH
37324: LD_INT 2
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 1
37333: PUSH
37334: LD_INT 3
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 1
37343: NEG
37344: PUSH
37345: LD_INT 2
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: LIST
37356: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37357: LD_ADDR_VAR 0 45
37361: PUSH
37362: LD_INT 2
37364: NEG
37365: PUSH
37366: LD_INT 0
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 2
37375: NEG
37376: PUSH
37377: LD_INT 1
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 3
37386: NEG
37387: PUSH
37388: LD_INT 1
37390: NEG
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: LIST
37400: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
37401: LD_ADDR_VAR 0 46
37405: PUSH
37406: LD_INT 2
37408: NEG
37409: PUSH
37410: LD_INT 2
37412: NEG
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 2
37420: NEG
37421: PUSH
37422: LD_INT 3
37424: NEG
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 3
37432: NEG
37433: PUSH
37434: LD_INT 2
37436: NEG
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: LIST
37446: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
37447: LD_ADDR_VAR 0 47
37451: PUSH
37452: LD_INT 2
37454: NEG
37455: PUSH
37456: LD_INT 3
37458: NEG
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 1
37466: NEG
37467: PUSH
37468: LD_INT 3
37470: NEG
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37480: LD_ADDR_VAR 0 48
37484: PUSH
37485: LD_INT 1
37487: PUSH
37488: LD_INT 2
37490: NEG
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 2
37498: PUSH
37499: LD_INT 1
37501: NEG
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
37511: LD_ADDR_VAR 0 49
37515: PUSH
37516: LD_INT 3
37518: PUSH
37519: LD_INT 1
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 3
37528: PUSH
37529: LD_INT 2
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
37540: LD_ADDR_VAR 0 50
37544: PUSH
37545: LD_INT 2
37547: PUSH
37548: LD_INT 3
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 1
37557: PUSH
37558: LD_INT 3
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37569: LD_ADDR_VAR 0 51
37573: PUSH
37574: LD_INT 1
37576: NEG
37577: PUSH
37578: LD_INT 2
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 2
37587: NEG
37588: PUSH
37589: LD_INT 1
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37600: LD_ADDR_VAR 0 52
37604: PUSH
37605: LD_INT 3
37607: NEG
37608: PUSH
37609: LD_INT 1
37611: NEG
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 3
37619: NEG
37620: PUSH
37621: LD_INT 2
37623: NEG
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37633: LD_ADDR_VAR 0 53
37637: PUSH
37638: LD_INT 1
37640: NEG
37641: PUSH
37642: LD_INT 3
37644: NEG
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: LD_INT 0
37652: PUSH
37653: LD_INT 3
37655: NEG
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: LD_INT 1
37663: PUSH
37664: LD_INT 2
37666: NEG
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: LIST
37676: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37677: LD_ADDR_VAR 0 54
37681: PUSH
37682: LD_INT 2
37684: PUSH
37685: LD_INT 1
37687: NEG
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 3
37695: PUSH
37696: LD_INT 0
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 3
37705: PUSH
37706: LD_INT 1
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: LIST
37717: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37718: LD_ADDR_VAR 0 55
37722: PUSH
37723: LD_INT 3
37725: PUSH
37726: LD_INT 2
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 3
37735: PUSH
37736: LD_INT 3
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 2
37745: PUSH
37746: LD_INT 3
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: LIST
37757: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37758: LD_ADDR_VAR 0 56
37762: PUSH
37763: LD_INT 1
37765: PUSH
37766: LD_INT 3
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 0
37775: PUSH
37776: LD_INT 3
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 1
37785: NEG
37786: PUSH
37787: LD_INT 2
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: LIST
37798: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37799: LD_ADDR_VAR 0 57
37803: PUSH
37804: LD_INT 2
37806: NEG
37807: PUSH
37808: LD_INT 1
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 3
37817: NEG
37818: PUSH
37819: LD_INT 0
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 3
37828: NEG
37829: PUSH
37830: LD_INT 1
37832: NEG
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: LIST
37842: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37843: LD_ADDR_VAR 0 58
37847: PUSH
37848: LD_INT 2
37850: NEG
37851: PUSH
37852: LD_INT 3
37854: NEG
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 3
37862: NEG
37863: PUSH
37864: LD_INT 2
37866: NEG
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 3
37874: NEG
37875: PUSH
37876: LD_INT 3
37878: NEG
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: LIST
37888: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
37889: LD_ADDR_VAR 0 59
37893: PUSH
37894: LD_INT 1
37896: NEG
37897: PUSH
37898: LD_INT 2
37900: NEG
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: LD_INT 0
37908: PUSH
37909: LD_INT 2
37911: NEG
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 1
37919: PUSH
37920: LD_INT 1
37922: NEG
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: LIST
37932: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37933: LD_ADDR_VAR 0 60
37937: PUSH
37938: LD_INT 1
37940: PUSH
37941: LD_INT 1
37943: NEG
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 2
37951: PUSH
37952: LD_INT 0
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 2
37961: PUSH
37962: LD_INT 1
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: LIST
37973: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37974: LD_ADDR_VAR 0 61
37978: PUSH
37979: LD_INT 2
37981: PUSH
37982: LD_INT 1
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 2
37991: PUSH
37992: LD_INT 2
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 1
38001: PUSH
38002: LD_INT 2
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: LIST
38013: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38014: LD_ADDR_VAR 0 62
38018: PUSH
38019: LD_INT 1
38021: PUSH
38022: LD_INT 2
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 0
38031: PUSH
38032: LD_INT 2
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 1
38041: NEG
38042: PUSH
38043: LD_INT 1
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: LIST
38054: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38055: LD_ADDR_VAR 0 63
38059: PUSH
38060: LD_INT 1
38062: NEG
38063: PUSH
38064: LD_INT 1
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 2
38073: NEG
38074: PUSH
38075: LD_INT 0
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 2
38084: NEG
38085: PUSH
38086: LD_INT 1
38088: NEG
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: LIST
38098: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38099: LD_ADDR_VAR 0 64
38103: PUSH
38104: LD_INT 1
38106: NEG
38107: PUSH
38108: LD_INT 2
38110: NEG
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 2
38118: NEG
38119: PUSH
38120: LD_INT 1
38122: NEG
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 2
38130: NEG
38131: PUSH
38132: LD_INT 2
38134: NEG
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: LIST
38144: ST_TO_ADDR
// end ; 2 :
38145: GO 41411
38147: LD_INT 2
38149: DOUBLE
38150: EQUAL
38151: IFTRUE 38155
38153: GO 41410
38155: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
38156: LD_ADDR_VAR 0 29
38160: PUSH
38161: LD_INT 4
38163: PUSH
38164: LD_INT 0
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_INT 4
38173: PUSH
38174: LD_INT 1
38176: NEG
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 5
38184: PUSH
38185: LD_INT 0
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 5
38194: PUSH
38195: LD_INT 1
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 4
38204: PUSH
38205: LD_INT 1
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 3
38214: PUSH
38215: LD_INT 0
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 3
38224: PUSH
38225: LD_INT 1
38227: NEG
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 3
38235: PUSH
38236: LD_INT 2
38238: NEG
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 5
38246: PUSH
38247: LD_INT 2
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 3
38256: PUSH
38257: LD_INT 3
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 3
38266: PUSH
38267: LD_INT 2
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 4
38276: PUSH
38277: LD_INT 3
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 4
38286: PUSH
38287: LD_INT 4
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 3
38296: PUSH
38297: LD_INT 4
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 2
38306: PUSH
38307: LD_INT 3
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 2
38316: PUSH
38317: LD_INT 2
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 4
38326: PUSH
38327: LD_INT 2
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 2
38336: PUSH
38337: LD_INT 4
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 0
38346: PUSH
38347: LD_INT 4
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 0
38356: PUSH
38357: LD_INT 3
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: LD_INT 1
38366: PUSH
38367: LD_INT 4
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 1
38376: PUSH
38377: LD_INT 5
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 0
38386: PUSH
38387: LD_INT 5
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 1
38396: NEG
38397: PUSH
38398: LD_INT 4
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 1
38407: NEG
38408: PUSH
38409: LD_INT 3
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 2
38418: PUSH
38419: LD_INT 5
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 2
38428: NEG
38429: PUSH
38430: LD_INT 3
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 3
38439: NEG
38440: PUSH
38441: LD_INT 0
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 3
38450: NEG
38451: PUSH
38452: LD_INT 1
38454: NEG
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 2
38462: NEG
38463: PUSH
38464: LD_INT 0
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 2
38473: NEG
38474: PUSH
38475: LD_INT 1
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 3
38484: NEG
38485: PUSH
38486: LD_INT 1
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 4
38495: NEG
38496: PUSH
38497: LD_INT 0
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 4
38506: NEG
38507: PUSH
38508: LD_INT 1
38510: NEG
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 4
38518: NEG
38519: PUSH
38520: LD_INT 2
38522: NEG
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 2
38530: NEG
38531: PUSH
38532: LD_INT 2
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 4
38541: NEG
38542: PUSH
38543: LD_INT 4
38545: NEG
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 4
38553: NEG
38554: PUSH
38555: LD_INT 5
38557: NEG
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 3
38565: NEG
38566: PUSH
38567: LD_INT 4
38569: NEG
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 3
38577: NEG
38578: PUSH
38579: LD_INT 3
38581: NEG
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 4
38589: NEG
38590: PUSH
38591: LD_INT 3
38593: NEG
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 5
38601: NEG
38602: PUSH
38603: LD_INT 4
38605: NEG
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 5
38613: NEG
38614: PUSH
38615: LD_INT 5
38617: NEG
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 3
38625: NEG
38626: PUSH
38627: LD_INT 5
38629: NEG
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 5
38637: NEG
38638: PUSH
38639: LD_INT 3
38641: NEG
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
38694: LD_ADDR_VAR 0 30
38698: PUSH
38699: LD_INT 4
38701: PUSH
38702: LD_INT 4
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 4
38711: PUSH
38712: LD_INT 3
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 5
38721: PUSH
38722: LD_INT 4
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 5
38731: PUSH
38732: LD_INT 5
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 4
38741: PUSH
38742: LD_INT 5
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 3
38751: PUSH
38752: LD_INT 4
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 3
38761: PUSH
38762: LD_INT 3
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 5
38771: PUSH
38772: LD_INT 3
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 3
38781: PUSH
38782: LD_INT 5
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 0
38791: PUSH
38792: LD_INT 3
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 0
38801: PUSH
38802: LD_INT 2
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 1
38811: PUSH
38812: LD_INT 3
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 1
38821: PUSH
38822: LD_INT 4
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 0
38831: PUSH
38832: LD_INT 4
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 1
38841: NEG
38842: PUSH
38843: LD_INT 3
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 1
38852: NEG
38853: PUSH
38854: LD_INT 2
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 2
38863: PUSH
38864: LD_INT 4
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 2
38873: NEG
38874: PUSH
38875: LD_INT 2
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 4
38884: NEG
38885: PUSH
38886: LD_INT 0
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 4
38895: NEG
38896: PUSH
38897: LD_INT 1
38899: NEG
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 3
38907: NEG
38908: PUSH
38909: LD_INT 0
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 3
38918: NEG
38919: PUSH
38920: LD_INT 1
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 4
38929: NEG
38930: PUSH
38931: LD_INT 1
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 5
38940: NEG
38941: PUSH
38942: LD_INT 0
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 5
38951: NEG
38952: PUSH
38953: LD_INT 1
38955: NEG
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 5
38963: NEG
38964: PUSH
38965: LD_INT 2
38967: NEG
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 3
38975: NEG
38976: PUSH
38977: LD_INT 2
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 3
38986: NEG
38987: PUSH
38988: LD_INT 3
38990: NEG
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 3
38998: NEG
38999: PUSH
39000: LD_INT 4
39002: NEG
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 2
39010: NEG
39011: PUSH
39012: LD_INT 3
39014: NEG
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 2
39022: NEG
39023: PUSH
39024: LD_INT 2
39026: NEG
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 3
39034: NEG
39035: PUSH
39036: LD_INT 2
39038: NEG
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 4
39046: NEG
39047: PUSH
39048: LD_INT 3
39050: NEG
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 4
39058: NEG
39059: PUSH
39060: LD_INT 4
39062: NEG
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 2
39070: NEG
39071: PUSH
39072: LD_INT 4
39074: NEG
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 4
39082: NEG
39083: PUSH
39084: LD_INT 2
39086: NEG
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 0
39094: PUSH
39095: LD_INT 4
39097: NEG
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 0
39105: PUSH
39106: LD_INT 5
39108: NEG
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 1
39116: PUSH
39117: LD_INT 4
39119: NEG
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 1
39127: PUSH
39128: LD_INT 3
39130: NEG
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 0
39138: PUSH
39139: LD_INT 3
39141: NEG
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 1
39149: NEG
39150: PUSH
39151: LD_INT 4
39153: NEG
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 1
39161: NEG
39162: PUSH
39163: LD_INT 5
39165: NEG
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 2
39173: PUSH
39174: LD_INT 3
39176: NEG
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 2
39184: NEG
39185: PUSH
39186: LD_INT 5
39188: NEG
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
39241: LD_ADDR_VAR 0 31
39245: PUSH
39246: LD_INT 0
39248: PUSH
39249: LD_INT 4
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 0
39258: PUSH
39259: LD_INT 3
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 1
39268: PUSH
39269: LD_INT 4
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 1
39278: PUSH
39279: LD_INT 5
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 0
39288: PUSH
39289: LD_INT 5
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 1
39298: NEG
39299: PUSH
39300: LD_INT 4
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 1
39309: NEG
39310: PUSH
39311: LD_INT 3
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 2
39320: PUSH
39321: LD_INT 5
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 2
39330: NEG
39331: PUSH
39332: LD_INT 3
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 3
39341: NEG
39342: PUSH
39343: LD_INT 0
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 3
39352: NEG
39353: PUSH
39354: LD_INT 1
39356: NEG
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 2
39364: NEG
39365: PUSH
39366: LD_INT 0
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 2
39375: NEG
39376: PUSH
39377: LD_INT 1
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 3
39386: NEG
39387: PUSH
39388: LD_INT 1
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 4
39397: NEG
39398: PUSH
39399: LD_INT 0
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 4
39408: NEG
39409: PUSH
39410: LD_INT 1
39412: NEG
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 4
39420: NEG
39421: PUSH
39422: LD_INT 2
39424: NEG
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 2
39432: NEG
39433: PUSH
39434: LD_INT 2
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 4
39443: NEG
39444: PUSH
39445: LD_INT 4
39447: NEG
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 4
39455: NEG
39456: PUSH
39457: LD_INT 5
39459: NEG
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 3
39467: NEG
39468: PUSH
39469: LD_INT 4
39471: NEG
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 3
39479: NEG
39480: PUSH
39481: LD_INT 3
39483: NEG
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 4
39491: NEG
39492: PUSH
39493: LD_INT 3
39495: NEG
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 5
39503: NEG
39504: PUSH
39505: LD_INT 4
39507: NEG
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 5
39515: NEG
39516: PUSH
39517: LD_INT 5
39519: NEG
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 3
39527: NEG
39528: PUSH
39529: LD_INT 5
39531: NEG
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 5
39539: NEG
39540: PUSH
39541: LD_INT 3
39543: NEG
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 0
39551: PUSH
39552: LD_INT 3
39554: NEG
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 0
39562: PUSH
39563: LD_INT 4
39565: NEG
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 1
39573: PUSH
39574: LD_INT 3
39576: NEG
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 1
39584: PUSH
39585: LD_INT 2
39587: NEG
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 0
39595: PUSH
39596: LD_INT 2
39598: NEG
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 1
39606: NEG
39607: PUSH
39608: LD_INT 3
39610: NEG
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 1
39618: NEG
39619: PUSH
39620: LD_INT 4
39622: NEG
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 2
39630: PUSH
39631: LD_INT 2
39633: NEG
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 2
39641: NEG
39642: PUSH
39643: LD_INT 4
39645: NEG
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 4
39653: PUSH
39654: LD_INT 0
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 4
39663: PUSH
39664: LD_INT 1
39666: NEG
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 5
39674: PUSH
39675: LD_INT 0
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 5
39684: PUSH
39685: LD_INT 1
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 4
39694: PUSH
39695: LD_INT 1
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 3
39704: PUSH
39705: LD_INT 0
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 3
39714: PUSH
39715: LD_INT 1
39717: NEG
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 3
39725: PUSH
39726: LD_INT 2
39728: NEG
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 5
39736: PUSH
39737: LD_INT 2
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
39791: LD_ADDR_VAR 0 32
39795: PUSH
39796: LD_INT 4
39798: NEG
39799: PUSH
39800: LD_INT 0
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 4
39809: NEG
39810: PUSH
39811: LD_INT 1
39813: NEG
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 3
39821: NEG
39822: PUSH
39823: LD_INT 0
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 3
39832: NEG
39833: PUSH
39834: LD_INT 1
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 4
39843: NEG
39844: PUSH
39845: LD_INT 1
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 5
39854: NEG
39855: PUSH
39856: LD_INT 0
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 5
39865: NEG
39866: PUSH
39867: LD_INT 1
39869: NEG
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 5
39877: NEG
39878: PUSH
39879: LD_INT 2
39881: NEG
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 3
39889: NEG
39890: PUSH
39891: LD_INT 2
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 3
39900: NEG
39901: PUSH
39902: LD_INT 3
39904: NEG
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 3
39912: NEG
39913: PUSH
39914: LD_INT 4
39916: NEG
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 2
39924: NEG
39925: PUSH
39926: LD_INT 3
39928: NEG
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 2
39936: NEG
39937: PUSH
39938: LD_INT 2
39940: NEG
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 3
39948: NEG
39949: PUSH
39950: LD_INT 2
39952: NEG
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 4
39960: NEG
39961: PUSH
39962: LD_INT 3
39964: NEG
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 4
39972: NEG
39973: PUSH
39974: LD_INT 4
39976: NEG
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 2
39984: NEG
39985: PUSH
39986: LD_INT 4
39988: NEG
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 4
39996: NEG
39997: PUSH
39998: LD_INT 2
40000: NEG
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 0
40008: PUSH
40009: LD_INT 4
40011: NEG
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 0
40019: PUSH
40020: LD_INT 5
40022: NEG
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 1
40030: PUSH
40031: LD_INT 4
40033: NEG
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 1
40041: PUSH
40042: LD_INT 3
40044: NEG
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 0
40052: PUSH
40053: LD_INT 3
40055: NEG
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: LD_INT 1
40063: NEG
40064: PUSH
40065: LD_INT 4
40067: NEG
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 1
40075: NEG
40076: PUSH
40077: LD_INT 5
40079: NEG
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 2
40087: PUSH
40088: LD_INT 3
40090: NEG
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 2
40098: NEG
40099: PUSH
40100: LD_INT 5
40102: NEG
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 3
40110: PUSH
40111: LD_INT 0
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 3
40120: PUSH
40121: LD_INT 1
40123: NEG
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 4
40131: PUSH
40132: LD_INT 0
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 4
40141: PUSH
40142: LD_INT 1
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 3
40151: PUSH
40152: LD_INT 1
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 2
40161: PUSH
40162: LD_INT 0
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 2
40171: PUSH
40172: LD_INT 1
40174: NEG
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 2
40182: PUSH
40183: LD_INT 2
40185: NEG
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 4
40193: PUSH
40194: LD_INT 2
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 4
40203: PUSH
40204: LD_INT 4
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 4
40213: PUSH
40214: LD_INT 3
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 5
40223: PUSH
40224: LD_INT 4
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 5
40233: PUSH
40234: LD_INT 5
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 4
40243: PUSH
40244: LD_INT 5
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 3
40253: PUSH
40254: LD_INT 4
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 3
40263: PUSH
40264: LD_INT 3
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 5
40273: PUSH
40274: LD_INT 3
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 3
40283: PUSH
40284: LD_INT 5
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
40338: LD_ADDR_VAR 0 33
40342: PUSH
40343: LD_INT 4
40345: NEG
40346: PUSH
40347: LD_INT 4
40349: NEG
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 4
40357: NEG
40358: PUSH
40359: LD_INT 5
40361: NEG
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 3
40369: NEG
40370: PUSH
40371: LD_INT 4
40373: NEG
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 3
40381: NEG
40382: PUSH
40383: LD_INT 3
40385: NEG
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 4
40393: NEG
40394: PUSH
40395: LD_INT 3
40397: NEG
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 5
40405: NEG
40406: PUSH
40407: LD_INT 4
40409: NEG
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 5
40417: NEG
40418: PUSH
40419: LD_INT 5
40421: NEG
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 3
40429: NEG
40430: PUSH
40431: LD_INT 5
40433: NEG
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 5
40441: NEG
40442: PUSH
40443: LD_INT 3
40445: NEG
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: LD_INT 3
40456: NEG
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: LD_INT 4
40467: NEG
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 1
40475: PUSH
40476: LD_INT 3
40478: NEG
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 1
40486: PUSH
40487: LD_INT 2
40489: NEG
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 0
40497: PUSH
40498: LD_INT 2
40500: NEG
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 1
40508: NEG
40509: PUSH
40510: LD_INT 3
40512: NEG
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 1
40520: NEG
40521: PUSH
40522: LD_INT 4
40524: NEG
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 2
40532: PUSH
40533: LD_INT 2
40535: NEG
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 2
40543: NEG
40544: PUSH
40545: LD_INT 4
40547: NEG
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 4
40555: PUSH
40556: LD_INT 0
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 4
40565: PUSH
40566: LD_INT 1
40568: NEG
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 5
40576: PUSH
40577: LD_INT 0
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 5
40586: PUSH
40587: LD_INT 1
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 4
40596: PUSH
40597: LD_INT 1
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 3
40606: PUSH
40607: LD_INT 0
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 3
40616: PUSH
40617: LD_INT 1
40619: NEG
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 3
40627: PUSH
40628: LD_INT 2
40630: NEG
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 5
40638: PUSH
40639: LD_INT 2
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 3
40648: PUSH
40649: LD_INT 3
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 3
40658: PUSH
40659: LD_INT 2
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 4
40668: PUSH
40669: LD_INT 3
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 4
40678: PUSH
40679: LD_INT 4
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 3
40688: PUSH
40689: LD_INT 4
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 2
40698: PUSH
40699: LD_INT 3
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 2
40708: PUSH
40709: LD_INT 2
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 4
40718: PUSH
40719: LD_INT 2
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 2
40728: PUSH
40729: LD_INT 4
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 0
40738: PUSH
40739: LD_INT 4
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 0
40748: PUSH
40749: LD_INT 3
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 1
40758: PUSH
40759: LD_INT 4
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 1
40768: PUSH
40769: LD_INT 5
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 0
40778: PUSH
40779: LD_INT 5
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 1
40788: NEG
40789: PUSH
40790: LD_INT 4
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 1
40799: NEG
40800: PUSH
40801: LD_INT 3
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 2
40810: PUSH
40811: LD_INT 5
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 2
40820: NEG
40821: PUSH
40822: LD_INT 3
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
40876: LD_ADDR_VAR 0 34
40880: PUSH
40881: LD_INT 0
40883: PUSH
40884: LD_INT 4
40886: NEG
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: LD_INT 5
40897: NEG
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 1
40905: PUSH
40906: LD_INT 4
40908: NEG
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 1
40916: PUSH
40917: LD_INT 3
40919: NEG
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 0
40927: PUSH
40928: LD_INT 3
40930: NEG
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 1
40938: NEG
40939: PUSH
40940: LD_INT 4
40942: NEG
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 1
40950: NEG
40951: PUSH
40952: LD_INT 5
40954: NEG
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 2
40962: PUSH
40963: LD_INT 3
40965: NEG
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 2
40973: NEG
40974: PUSH
40975: LD_INT 5
40977: NEG
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 3
40985: PUSH
40986: LD_INT 0
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 3
40995: PUSH
40996: LD_INT 1
40998: NEG
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 4
41006: PUSH
41007: LD_INT 0
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 4
41016: PUSH
41017: LD_INT 1
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 3
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 2
41036: PUSH
41037: LD_INT 0
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 2
41046: PUSH
41047: LD_INT 1
41049: NEG
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 2
41057: PUSH
41058: LD_INT 2
41060: NEG
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 4
41068: PUSH
41069: LD_INT 2
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 4
41078: PUSH
41079: LD_INT 4
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 4
41088: PUSH
41089: LD_INT 3
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 5
41098: PUSH
41099: LD_INT 4
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 5
41108: PUSH
41109: LD_INT 5
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 4
41118: PUSH
41119: LD_INT 5
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 3
41128: PUSH
41129: LD_INT 4
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 3
41138: PUSH
41139: LD_INT 3
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 5
41148: PUSH
41149: LD_INT 3
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 3
41158: PUSH
41159: LD_INT 5
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 0
41168: PUSH
41169: LD_INT 3
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 0
41178: PUSH
41179: LD_INT 2
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 1
41188: PUSH
41189: LD_INT 3
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 1
41198: PUSH
41199: LD_INT 4
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 0
41208: PUSH
41209: LD_INT 4
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 1
41218: NEG
41219: PUSH
41220: LD_INT 3
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 1
41229: NEG
41230: PUSH
41231: LD_INT 2
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 2
41240: PUSH
41241: LD_INT 4
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 2
41250: NEG
41251: PUSH
41252: LD_INT 2
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 4
41261: NEG
41262: PUSH
41263: LD_INT 0
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 4
41272: NEG
41273: PUSH
41274: LD_INT 1
41276: NEG
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 3
41284: NEG
41285: PUSH
41286: LD_INT 0
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 3
41295: NEG
41296: PUSH
41297: LD_INT 1
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 4
41306: NEG
41307: PUSH
41308: LD_INT 1
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 5
41317: NEG
41318: PUSH
41319: LD_INT 0
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 5
41328: NEG
41329: PUSH
41330: LD_INT 1
41332: NEG
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 5
41340: NEG
41341: PUSH
41342: LD_INT 2
41344: NEG
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 3
41352: NEG
41353: PUSH
41354: LD_INT 2
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: ST_TO_ADDR
// end ; end ;
41408: GO 41411
41410: POP
// case btype of b_depot , b_warehouse :
41411: LD_VAR 0 1
41415: PUSH
41416: LD_INT 0
41418: DOUBLE
41419: EQUAL
41420: IFTRUE 41430
41422: LD_INT 1
41424: DOUBLE
41425: EQUAL
41426: IFTRUE 41430
41428: GO 41631
41430: POP
// case nation of nation_american :
41431: LD_VAR 0 5
41435: PUSH
41436: LD_INT 1
41438: DOUBLE
41439: EQUAL
41440: IFTRUE 41444
41442: GO 41500
41444: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
41445: LD_ADDR_VAR 0 9
41449: PUSH
41450: LD_VAR 0 11
41454: PUSH
41455: LD_VAR 0 12
41459: PUSH
41460: LD_VAR 0 13
41464: PUSH
41465: LD_VAR 0 14
41469: PUSH
41470: LD_VAR 0 15
41474: PUSH
41475: LD_VAR 0 16
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: PUSH
41488: LD_VAR 0 4
41492: PUSH
41493: LD_INT 1
41495: PLUS
41496: ARRAY
41497: ST_TO_ADDR
41498: GO 41629
41500: LD_INT 2
41502: DOUBLE
41503: EQUAL
41504: IFTRUE 41508
41506: GO 41564
41508: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
41509: LD_ADDR_VAR 0 9
41513: PUSH
41514: LD_VAR 0 17
41518: PUSH
41519: LD_VAR 0 18
41523: PUSH
41524: LD_VAR 0 19
41528: PUSH
41529: LD_VAR 0 20
41533: PUSH
41534: LD_VAR 0 21
41538: PUSH
41539: LD_VAR 0 22
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: PUSH
41552: LD_VAR 0 4
41556: PUSH
41557: LD_INT 1
41559: PLUS
41560: ARRAY
41561: ST_TO_ADDR
41562: GO 41629
41564: LD_INT 3
41566: DOUBLE
41567: EQUAL
41568: IFTRUE 41572
41570: GO 41628
41572: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
41573: LD_ADDR_VAR 0 9
41577: PUSH
41578: LD_VAR 0 23
41582: PUSH
41583: LD_VAR 0 24
41587: PUSH
41588: LD_VAR 0 25
41592: PUSH
41593: LD_VAR 0 26
41597: PUSH
41598: LD_VAR 0 27
41602: PUSH
41603: LD_VAR 0 28
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: PUSH
41616: LD_VAR 0 4
41620: PUSH
41621: LD_INT 1
41623: PLUS
41624: ARRAY
41625: ST_TO_ADDR
41626: GO 41629
41628: POP
41629: GO 42184
41631: LD_INT 2
41633: DOUBLE
41634: EQUAL
41635: IFTRUE 41645
41637: LD_INT 3
41639: DOUBLE
41640: EQUAL
41641: IFTRUE 41645
41643: GO 41701
41645: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
41646: LD_ADDR_VAR 0 9
41650: PUSH
41651: LD_VAR 0 29
41655: PUSH
41656: LD_VAR 0 30
41660: PUSH
41661: LD_VAR 0 31
41665: PUSH
41666: LD_VAR 0 32
41670: PUSH
41671: LD_VAR 0 33
41675: PUSH
41676: LD_VAR 0 34
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: PUSH
41689: LD_VAR 0 4
41693: PUSH
41694: LD_INT 1
41696: PLUS
41697: ARRAY
41698: ST_TO_ADDR
41699: GO 42184
41701: LD_INT 16
41703: DOUBLE
41704: EQUAL
41705: IFTRUE 41763
41707: LD_INT 17
41709: DOUBLE
41710: EQUAL
41711: IFTRUE 41763
41713: LD_INT 18
41715: DOUBLE
41716: EQUAL
41717: IFTRUE 41763
41719: LD_INT 19
41721: DOUBLE
41722: EQUAL
41723: IFTRUE 41763
41725: LD_INT 22
41727: DOUBLE
41728: EQUAL
41729: IFTRUE 41763
41731: LD_INT 20
41733: DOUBLE
41734: EQUAL
41735: IFTRUE 41763
41737: LD_INT 21
41739: DOUBLE
41740: EQUAL
41741: IFTRUE 41763
41743: LD_INT 23
41745: DOUBLE
41746: EQUAL
41747: IFTRUE 41763
41749: LD_INT 24
41751: DOUBLE
41752: EQUAL
41753: IFTRUE 41763
41755: LD_INT 25
41757: DOUBLE
41758: EQUAL
41759: IFTRUE 41763
41761: GO 41819
41763: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
41764: LD_ADDR_VAR 0 9
41768: PUSH
41769: LD_VAR 0 35
41773: PUSH
41774: LD_VAR 0 36
41778: PUSH
41779: LD_VAR 0 37
41783: PUSH
41784: LD_VAR 0 38
41788: PUSH
41789: LD_VAR 0 39
41793: PUSH
41794: LD_VAR 0 40
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: PUSH
41807: LD_VAR 0 4
41811: PUSH
41812: LD_INT 1
41814: PLUS
41815: ARRAY
41816: ST_TO_ADDR
41817: GO 42184
41819: LD_INT 6
41821: DOUBLE
41822: EQUAL
41823: IFTRUE 41875
41825: LD_INT 7
41827: DOUBLE
41828: EQUAL
41829: IFTRUE 41875
41831: LD_INT 8
41833: DOUBLE
41834: EQUAL
41835: IFTRUE 41875
41837: LD_INT 13
41839: DOUBLE
41840: EQUAL
41841: IFTRUE 41875
41843: LD_INT 12
41845: DOUBLE
41846: EQUAL
41847: IFTRUE 41875
41849: LD_INT 15
41851: DOUBLE
41852: EQUAL
41853: IFTRUE 41875
41855: LD_INT 11
41857: DOUBLE
41858: EQUAL
41859: IFTRUE 41875
41861: LD_INT 14
41863: DOUBLE
41864: EQUAL
41865: IFTRUE 41875
41867: LD_INT 10
41869: DOUBLE
41870: EQUAL
41871: IFTRUE 41875
41873: GO 41931
41875: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
41876: LD_ADDR_VAR 0 9
41880: PUSH
41881: LD_VAR 0 41
41885: PUSH
41886: LD_VAR 0 42
41890: PUSH
41891: LD_VAR 0 43
41895: PUSH
41896: LD_VAR 0 44
41900: PUSH
41901: LD_VAR 0 45
41905: PUSH
41906: LD_VAR 0 46
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: PUSH
41919: LD_VAR 0 4
41923: PUSH
41924: LD_INT 1
41926: PLUS
41927: ARRAY
41928: ST_TO_ADDR
41929: GO 42184
41931: LD_INT 36
41933: DOUBLE
41934: EQUAL
41935: IFTRUE 41939
41937: GO 41995
41939: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
41940: LD_ADDR_VAR 0 9
41944: PUSH
41945: LD_VAR 0 47
41949: PUSH
41950: LD_VAR 0 48
41954: PUSH
41955: LD_VAR 0 49
41959: PUSH
41960: LD_VAR 0 50
41964: PUSH
41965: LD_VAR 0 51
41969: PUSH
41970: LD_VAR 0 52
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: PUSH
41983: LD_VAR 0 4
41987: PUSH
41988: LD_INT 1
41990: PLUS
41991: ARRAY
41992: ST_TO_ADDR
41993: GO 42184
41995: LD_INT 4
41997: DOUBLE
41998: EQUAL
41999: IFTRUE 42021
42001: LD_INT 5
42003: DOUBLE
42004: EQUAL
42005: IFTRUE 42021
42007: LD_INT 34
42009: DOUBLE
42010: EQUAL
42011: IFTRUE 42021
42013: LD_INT 37
42015: DOUBLE
42016: EQUAL
42017: IFTRUE 42021
42019: GO 42077
42021: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
42022: LD_ADDR_VAR 0 9
42026: PUSH
42027: LD_VAR 0 53
42031: PUSH
42032: LD_VAR 0 54
42036: PUSH
42037: LD_VAR 0 55
42041: PUSH
42042: LD_VAR 0 56
42046: PUSH
42047: LD_VAR 0 57
42051: PUSH
42052: LD_VAR 0 58
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: PUSH
42065: LD_VAR 0 4
42069: PUSH
42070: LD_INT 1
42072: PLUS
42073: ARRAY
42074: ST_TO_ADDR
42075: GO 42184
42077: LD_INT 31
42079: DOUBLE
42080: EQUAL
42081: IFTRUE 42127
42083: LD_INT 32
42085: DOUBLE
42086: EQUAL
42087: IFTRUE 42127
42089: LD_INT 33
42091: DOUBLE
42092: EQUAL
42093: IFTRUE 42127
42095: LD_INT 27
42097: DOUBLE
42098: EQUAL
42099: IFTRUE 42127
42101: LD_INT 26
42103: DOUBLE
42104: EQUAL
42105: IFTRUE 42127
42107: LD_INT 28
42109: DOUBLE
42110: EQUAL
42111: IFTRUE 42127
42113: LD_INT 29
42115: DOUBLE
42116: EQUAL
42117: IFTRUE 42127
42119: LD_INT 30
42121: DOUBLE
42122: EQUAL
42123: IFTRUE 42127
42125: GO 42183
42127: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
42128: LD_ADDR_VAR 0 9
42132: PUSH
42133: LD_VAR 0 59
42137: PUSH
42138: LD_VAR 0 60
42142: PUSH
42143: LD_VAR 0 61
42147: PUSH
42148: LD_VAR 0 62
42152: PUSH
42153: LD_VAR 0 63
42157: PUSH
42158: LD_VAR 0 64
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: PUSH
42171: LD_VAR 0 4
42175: PUSH
42176: LD_INT 1
42178: PLUS
42179: ARRAY
42180: ST_TO_ADDR
42181: GO 42184
42183: POP
// temp_list2 = [ ] ;
42184: LD_ADDR_VAR 0 10
42188: PUSH
42189: EMPTY
42190: ST_TO_ADDR
// for i in temp_list do
42191: LD_ADDR_VAR 0 8
42195: PUSH
42196: LD_VAR 0 9
42200: PUSH
42201: FOR_IN
42202: IFFALSE 42254
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
42204: LD_ADDR_VAR 0 10
42208: PUSH
42209: LD_VAR 0 10
42213: PUSH
42214: LD_VAR 0 8
42218: PUSH
42219: LD_INT 1
42221: ARRAY
42222: PUSH
42223: LD_VAR 0 2
42227: PLUS
42228: PUSH
42229: LD_VAR 0 8
42233: PUSH
42234: LD_INT 2
42236: ARRAY
42237: PUSH
42238: LD_VAR 0 3
42242: PLUS
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: EMPTY
42249: LIST
42250: ADD
42251: ST_TO_ADDR
42252: GO 42201
42254: POP
42255: POP
// result = temp_list2 ;
42256: LD_ADDR_VAR 0 7
42260: PUSH
42261: LD_VAR 0 10
42265: ST_TO_ADDR
// end ;
42266: LD_VAR 0 7
42270: RET
// export function EnemyInRange ( unit , dist ) ; begin
42271: LD_INT 0
42273: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
42274: LD_ADDR_VAR 0 3
42278: PUSH
42279: LD_VAR 0 1
42283: PPUSH
42284: CALL_OW 255
42288: PPUSH
42289: LD_VAR 0 1
42293: PPUSH
42294: CALL_OW 250
42298: PPUSH
42299: LD_VAR 0 1
42303: PPUSH
42304: CALL_OW 251
42308: PPUSH
42309: LD_VAR 0 2
42313: PPUSH
42314: CALL 15667 0 4
42318: PUSH
42319: LD_INT 4
42321: ARRAY
42322: ST_TO_ADDR
// end ;
42323: LD_VAR 0 3
42327: RET
// export function PlayerSeeMe ( unit ) ; begin
42328: LD_INT 0
42330: PPUSH
// result := See ( your_side , unit ) ;
42331: LD_ADDR_VAR 0 2
42335: PUSH
42336: LD_OWVAR 2
42340: PPUSH
42341: LD_VAR 0 1
42345: PPUSH
42346: CALL_OW 292
42350: ST_TO_ADDR
// end ;
42351: LD_VAR 0 2
42355: RET
// export function ReverseDir ( unit ) ; begin
42356: LD_INT 0
42358: PPUSH
// if not unit then
42359: LD_VAR 0 1
42363: NOT
42364: IFFALSE 42368
// exit ;
42366: GO 42391
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
42368: LD_ADDR_VAR 0 2
42372: PUSH
42373: LD_VAR 0 1
42377: PPUSH
42378: CALL_OW 254
42382: PUSH
42383: LD_INT 3
42385: PLUS
42386: PUSH
42387: LD_INT 6
42389: MOD
42390: ST_TO_ADDR
// end ;
42391: LD_VAR 0 2
42395: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
42396: LD_INT 0
42398: PPUSH
42399: PPUSH
42400: PPUSH
42401: PPUSH
42402: PPUSH
// if not hexes then
42403: LD_VAR 0 2
42407: NOT
42408: IFFALSE 42412
// exit ;
42410: GO 42560
// dist := 9999 ;
42412: LD_ADDR_VAR 0 5
42416: PUSH
42417: LD_INT 9999
42419: ST_TO_ADDR
// for i = 1 to hexes do
42420: LD_ADDR_VAR 0 4
42424: PUSH
42425: DOUBLE
42426: LD_INT 1
42428: DEC
42429: ST_TO_ADDR
42430: LD_VAR 0 2
42434: PUSH
42435: FOR_TO
42436: IFFALSE 42548
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
42438: LD_VAR 0 1
42442: PPUSH
42443: LD_VAR 0 2
42447: PUSH
42448: LD_VAR 0 4
42452: ARRAY
42453: PUSH
42454: LD_INT 1
42456: ARRAY
42457: PPUSH
42458: LD_VAR 0 2
42462: PUSH
42463: LD_VAR 0 4
42467: ARRAY
42468: PUSH
42469: LD_INT 2
42471: ARRAY
42472: PPUSH
42473: CALL_OW 297
42477: PUSH
42478: LD_VAR 0 5
42482: LESS
42483: IFFALSE 42546
// begin hex := hexes [ i ] ;
42485: LD_ADDR_VAR 0 7
42489: PUSH
42490: LD_VAR 0 2
42494: PUSH
42495: LD_VAR 0 4
42499: ARRAY
42500: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42501: LD_ADDR_VAR 0 5
42505: PUSH
42506: LD_VAR 0 1
42510: PPUSH
42511: LD_VAR 0 2
42515: PUSH
42516: LD_VAR 0 4
42520: ARRAY
42521: PUSH
42522: LD_INT 1
42524: ARRAY
42525: PPUSH
42526: LD_VAR 0 2
42530: PUSH
42531: LD_VAR 0 4
42535: ARRAY
42536: PUSH
42537: LD_INT 2
42539: ARRAY
42540: PPUSH
42541: CALL_OW 297
42545: ST_TO_ADDR
// end ; end ;
42546: GO 42435
42548: POP
42549: POP
// result := hex ;
42550: LD_ADDR_VAR 0 3
42554: PUSH
42555: LD_VAR 0 7
42559: ST_TO_ADDR
// end ;
42560: LD_VAR 0 3
42564: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
42565: LD_INT 0
42567: PPUSH
42568: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
42569: LD_VAR 0 1
42573: NOT
42574: PUSH
42575: LD_VAR 0 1
42579: PUSH
42580: LD_INT 21
42582: PUSH
42583: LD_INT 2
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 23
42592: PUSH
42593: LD_INT 2
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PPUSH
42604: CALL_OW 69
42608: IN
42609: NOT
42610: OR
42611: IFFALSE 42615
// exit ;
42613: GO 42662
// for i = 1 to 3 do
42615: LD_ADDR_VAR 0 3
42619: PUSH
42620: DOUBLE
42621: LD_INT 1
42623: DEC
42624: ST_TO_ADDR
42625: LD_INT 3
42627: PUSH
42628: FOR_TO
42629: IFFALSE 42660
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
42631: LD_VAR 0 1
42635: PPUSH
42636: CALL_OW 250
42640: PPUSH
42641: LD_VAR 0 1
42645: PPUSH
42646: CALL_OW 251
42650: PPUSH
42651: LD_INT 1
42653: PPUSH
42654: CALL_OW 453
42658: GO 42628
42660: POP
42661: POP
// end ;
42662: LD_VAR 0 2
42666: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
42667: LD_INT 0
42669: PPUSH
42670: PPUSH
42671: PPUSH
42672: PPUSH
42673: PPUSH
42674: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
42675: LD_VAR 0 1
42679: NOT
42680: PUSH
42681: LD_VAR 0 2
42685: NOT
42686: OR
42687: PUSH
42688: LD_VAR 0 1
42692: PPUSH
42693: CALL_OW 314
42697: OR
42698: IFFALSE 42702
// exit ;
42700: GO 43143
// x := GetX ( enemy_unit ) ;
42702: LD_ADDR_VAR 0 7
42706: PUSH
42707: LD_VAR 0 2
42711: PPUSH
42712: CALL_OW 250
42716: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
42717: LD_ADDR_VAR 0 8
42721: PUSH
42722: LD_VAR 0 2
42726: PPUSH
42727: CALL_OW 251
42731: ST_TO_ADDR
// if not x or not y then
42732: LD_VAR 0 7
42736: NOT
42737: PUSH
42738: LD_VAR 0 8
42742: NOT
42743: OR
42744: IFFALSE 42748
// exit ;
42746: GO 43143
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
42748: LD_ADDR_VAR 0 6
42752: PUSH
42753: LD_VAR 0 7
42757: PPUSH
42758: LD_INT 0
42760: PPUSH
42761: LD_INT 4
42763: PPUSH
42764: CALL_OW 272
42768: PUSH
42769: LD_VAR 0 8
42773: PPUSH
42774: LD_INT 0
42776: PPUSH
42777: LD_INT 4
42779: PPUSH
42780: CALL_OW 273
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_VAR 0 7
42793: PPUSH
42794: LD_INT 1
42796: PPUSH
42797: LD_INT 4
42799: PPUSH
42800: CALL_OW 272
42804: PUSH
42805: LD_VAR 0 8
42809: PPUSH
42810: LD_INT 1
42812: PPUSH
42813: LD_INT 4
42815: PPUSH
42816: CALL_OW 273
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_VAR 0 7
42829: PPUSH
42830: LD_INT 2
42832: PPUSH
42833: LD_INT 4
42835: PPUSH
42836: CALL_OW 272
42840: PUSH
42841: LD_VAR 0 8
42845: PPUSH
42846: LD_INT 2
42848: PPUSH
42849: LD_INT 4
42851: PPUSH
42852: CALL_OW 273
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_VAR 0 7
42865: PPUSH
42866: LD_INT 3
42868: PPUSH
42869: LD_INT 4
42871: PPUSH
42872: CALL_OW 272
42876: PUSH
42877: LD_VAR 0 8
42881: PPUSH
42882: LD_INT 3
42884: PPUSH
42885: LD_INT 4
42887: PPUSH
42888: CALL_OW 273
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_VAR 0 7
42901: PPUSH
42902: LD_INT 4
42904: PPUSH
42905: LD_INT 4
42907: PPUSH
42908: CALL_OW 272
42912: PUSH
42913: LD_VAR 0 8
42917: PPUSH
42918: LD_INT 4
42920: PPUSH
42921: LD_INT 4
42923: PPUSH
42924: CALL_OW 273
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_VAR 0 7
42937: PPUSH
42938: LD_INT 5
42940: PPUSH
42941: LD_INT 4
42943: PPUSH
42944: CALL_OW 272
42948: PUSH
42949: LD_VAR 0 8
42953: PPUSH
42954: LD_INT 5
42956: PPUSH
42957: LD_INT 4
42959: PPUSH
42960: CALL_OW 273
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: ST_TO_ADDR
// for i = tmp downto 1 do
42977: LD_ADDR_VAR 0 4
42981: PUSH
42982: DOUBLE
42983: LD_VAR 0 6
42987: INC
42988: ST_TO_ADDR
42989: LD_INT 1
42991: PUSH
42992: FOR_DOWNTO
42993: IFFALSE 43094
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
42995: LD_VAR 0 6
42999: PUSH
43000: LD_VAR 0 4
43004: ARRAY
43005: PUSH
43006: LD_INT 1
43008: ARRAY
43009: PPUSH
43010: LD_VAR 0 6
43014: PUSH
43015: LD_VAR 0 4
43019: ARRAY
43020: PUSH
43021: LD_INT 2
43023: ARRAY
43024: PPUSH
43025: CALL_OW 488
43029: NOT
43030: PUSH
43031: LD_VAR 0 6
43035: PUSH
43036: LD_VAR 0 4
43040: ARRAY
43041: PUSH
43042: LD_INT 1
43044: ARRAY
43045: PPUSH
43046: LD_VAR 0 6
43050: PUSH
43051: LD_VAR 0 4
43055: ARRAY
43056: PUSH
43057: LD_INT 2
43059: ARRAY
43060: PPUSH
43061: CALL_OW 428
43065: PUSH
43066: LD_INT 0
43068: NONEQUAL
43069: OR
43070: IFFALSE 43092
// tmp := Delete ( tmp , i ) ;
43072: LD_ADDR_VAR 0 6
43076: PUSH
43077: LD_VAR 0 6
43081: PPUSH
43082: LD_VAR 0 4
43086: PPUSH
43087: CALL_OW 3
43091: ST_TO_ADDR
43092: GO 42992
43094: POP
43095: POP
// j := GetClosestHex ( unit , tmp ) ;
43096: LD_ADDR_VAR 0 5
43100: PUSH
43101: LD_VAR 0 1
43105: PPUSH
43106: LD_VAR 0 6
43110: PPUSH
43111: CALL 42396 0 2
43115: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
43116: LD_VAR 0 1
43120: PPUSH
43121: LD_VAR 0 5
43125: PUSH
43126: LD_INT 1
43128: ARRAY
43129: PPUSH
43130: LD_VAR 0 5
43134: PUSH
43135: LD_INT 2
43137: ARRAY
43138: PPUSH
43139: CALL_OW 111
// end ;
43143: LD_VAR 0 3
43147: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
43148: LD_INT 0
43150: PPUSH
43151: PPUSH
43152: PPUSH
// uc_side = 0 ;
43153: LD_ADDR_OWVAR 20
43157: PUSH
43158: LD_INT 0
43160: ST_TO_ADDR
// uc_nation = 0 ;
43161: LD_ADDR_OWVAR 21
43165: PUSH
43166: LD_INT 0
43168: ST_TO_ADDR
// InitHc_All ( ) ;
43169: CALL_OW 584
// InitVc ;
43173: CALL_OW 20
// if mastodonts then
43177: LD_VAR 0 6
43181: IFFALSE 43248
// for i = 1 to mastodonts do
43183: LD_ADDR_VAR 0 11
43187: PUSH
43188: DOUBLE
43189: LD_INT 1
43191: DEC
43192: ST_TO_ADDR
43193: LD_VAR 0 6
43197: PUSH
43198: FOR_TO
43199: IFFALSE 43246
// begin vc_chassis := 31 ;
43201: LD_ADDR_OWVAR 37
43205: PUSH
43206: LD_INT 31
43208: ST_TO_ADDR
// vc_control := control_rider ;
43209: LD_ADDR_OWVAR 38
43213: PUSH
43214: LD_INT 4
43216: ST_TO_ADDR
// animal := CreateVehicle ;
43217: LD_ADDR_VAR 0 12
43221: PUSH
43222: CALL_OW 45
43226: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43227: LD_VAR 0 12
43231: PPUSH
43232: LD_VAR 0 8
43236: PPUSH
43237: LD_INT 0
43239: PPUSH
43240: CALL 45436 0 3
// end ;
43244: GO 43198
43246: POP
43247: POP
// if horses then
43248: LD_VAR 0 5
43252: IFFALSE 43319
// for i = 1 to horses do
43254: LD_ADDR_VAR 0 11
43258: PUSH
43259: DOUBLE
43260: LD_INT 1
43262: DEC
43263: ST_TO_ADDR
43264: LD_VAR 0 5
43268: PUSH
43269: FOR_TO
43270: IFFALSE 43317
// begin hc_class := 21 ;
43272: LD_ADDR_OWVAR 28
43276: PUSH
43277: LD_INT 21
43279: ST_TO_ADDR
// hc_gallery :=  ;
43280: LD_ADDR_OWVAR 33
43284: PUSH
43285: LD_STRING 
43287: ST_TO_ADDR
// animal := CreateHuman ;
43288: LD_ADDR_VAR 0 12
43292: PUSH
43293: CALL_OW 44
43297: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43298: LD_VAR 0 12
43302: PPUSH
43303: LD_VAR 0 8
43307: PPUSH
43308: LD_INT 0
43310: PPUSH
43311: CALL 45436 0 3
// end ;
43315: GO 43269
43317: POP
43318: POP
// if birds then
43319: LD_VAR 0 1
43323: IFFALSE 43390
// for i = 1 to birds do
43325: LD_ADDR_VAR 0 11
43329: PUSH
43330: DOUBLE
43331: LD_INT 1
43333: DEC
43334: ST_TO_ADDR
43335: LD_VAR 0 1
43339: PUSH
43340: FOR_TO
43341: IFFALSE 43388
// begin hc_class = 18 ;
43343: LD_ADDR_OWVAR 28
43347: PUSH
43348: LD_INT 18
43350: ST_TO_ADDR
// hc_gallery =  ;
43351: LD_ADDR_OWVAR 33
43355: PUSH
43356: LD_STRING 
43358: ST_TO_ADDR
// animal := CreateHuman ;
43359: LD_ADDR_VAR 0 12
43363: PUSH
43364: CALL_OW 44
43368: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43369: LD_VAR 0 12
43373: PPUSH
43374: LD_VAR 0 8
43378: PPUSH
43379: LD_INT 0
43381: PPUSH
43382: CALL 45436 0 3
// end ;
43386: GO 43340
43388: POP
43389: POP
// if tigers then
43390: LD_VAR 0 2
43394: IFFALSE 43478
// for i = 1 to tigers do
43396: LD_ADDR_VAR 0 11
43400: PUSH
43401: DOUBLE
43402: LD_INT 1
43404: DEC
43405: ST_TO_ADDR
43406: LD_VAR 0 2
43410: PUSH
43411: FOR_TO
43412: IFFALSE 43476
// begin hc_class = class_tiger ;
43414: LD_ADDR_OWVAR 28
43418: PUSH
43419: LD_INT 14
43421: ST_TO_ADDR
// hc_gallery =  ;
43422: LD_ADDR_OWVAR 33
43426: PUSH
43427: LD_STRING 
43429: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
43430: LD_ADDR_OWVAR 35
43434: PUSH
43435: LD_INT 7
43437: NEG
43438: PPUSH
43439: LD_INT 7
43441: PPUSH
43442: CALL_OW 12
43446: ST_TO_ADDR
// animal := CreateHuman ;
43447: LD_ADDR_VAR 0 12
43451: PUSH
43452: CALL_OW 44
43456: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43457: LD_VAR 0 12
43461: PPUSH
43462: LD_VAR 0 8
43466: PPUSH
43467: LD_INT 0
43469: PPUSH
43470: CALL 45436 0 3
// end ;
43474: GO 43411
43476: POP
43477: POP
// if apemans then
43478: LD_VAR 0 3
43482: IFFALSE 43605
// for i = 1 to apemans do
43484: LD_ADDR_VAR 0 11
43488: PUSH
43489: DOUBLE
43490: LD_INT 1
43492: DEC
43493: ST_TO_ADDR
43494: LD_VAR 0 3
43498: PUSH
43499: FOR_TO
43500: IFFALSE 43603
// begin hc_class = class_apeman ;
43502: LD_ADDR_OWVAR 28
43506: PUSH
43507: LD_INT 12
43509: ST_TO_ADDR
// hc_gallery =  ;
43510: LD_ADDR_OWVAR 33
43514: PUSH
43515: LD_STRING 
43517: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
43518: LD_ADDR_OWVAR 35
43522: PUSH
43523: LD_INT 2
43525: NEG
43526: PPUSH
43527: LD_INT 2
43529: PPUSH
43530: CALL_OW 12
43534: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
43535: LD_ADDR_OWVAR 31
43539: PUSH
43540: LD_INT 1
43542: PPUSH
43543: LD_INT 3
43545: PPUSH
43546: CALL_OW 12
43550: PUSH
43551: LD_INT 1
43553: PPUSH
43554: LD_INT 3
43556: PPUSH
43557: CALL_OW 12
43561: PUSH
43562: LD_INT 0
43564: PUSH
43565: LD_INT 0
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: ST_TO_ADDR
// animal := CreateHuman ;
43574: LD_ADDR_VAR 0 12
43578: PUSH
43579: CALL_OW 44
43583: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43584: LD_VAR 0 12
43588: PPUSH
43589: LD_VAR 0 8
43593: PPUSH
43594: LD_INT 0
43596: PPUSH
43597: CALL 45436 0 3
// end ;
43601: GO 43499
43603: POP
43604: POP
// if enchidnas then
43605: LD_VAR 0 4
43609: IFFALSE 43676
// for i = 1 to enchidnas do
43611: LD_ADDR_VAR 0 11
43615: PUSH
43616: DOUBLE
43617: LD_INT 1
43619: DEC
43620: ST_TO_ADDR
43621: LD_VAR 0 4
43625: PUSH
43626: FOR_TO
43627: IFFALSE 43674
// begin hc_class = 13 ;
43629: LD_ADDR_OWVAR 28
43633: PUSH
43634: LD_INT 13
43636: ST_TO_ADDR
// hc_gallery =  ;
43637: LD_ADDR_OWVAR 33
43641: PUSH
43642: LD_STRING 
43644: ST_TO_ADDR
// animal := CreateHuman ;
43645: LD_ADDR_VAR 0 12
43649: PUSH
43650: CALL_OW 44
43654: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43655: LD_VAR 0 12
43659: PPUSH
43660: LD_VAR 0 8
43664: PPUSH
43665: LD_INT 0
43667: PPUSH
43668: CALL 45436 0 3
// end ;
43672: GO 43626
43674: POP
43675: POP
// if fishes then
43676: LD_VAR 0 7
43680: IFFALSE 43747
// for i = 1 to fishes do
43682: LD_ADDR_VAR 0 11
43686: PUSH
43687: DOUBLE
43688: LD_INT 1
43690: DEC
43691: ST_TO_ADDR
43692: LD_VAR 0 7
43696: PUSH
43697: FOR_TO
43698: IFFALSE 43745
// begin hc_class = 20 ;
43700: LD_ADDR_OWVAR 28
43704: PUSH
43705: LD_INT 20
43707: ST_TO_ADDR
// hc_gallery =  ;
43708: LD_ADDR_OWVAR 33
43712: PUSH
43713: LD_STRING 
43715: ST_TO_ADDR
// animal := CreateHuman ;
43716: LD_ADDR_VAR 0 12
43720: PUSH
43721: CALL_OW 44
43725: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
43726: LD_VAR 0 12
43730: PPUSH
43731: LD_VAR 0 9
43735: PPUSH
43736: LD_INT 0
43738: PPUSH
43739: CALL 45436 0 3
// end ;
43743: GO 43697
43745: POP
43746: POP
// end ;
43747: LD_VAR 0 10
43751: RET
// export function WantHeal ( sci , unit ) ; begin
43752: LD_INT 0
43754: PPUSH
// if GetTaskList ( sci ) > 0 then
43755: LD_VAR 0 1
43759: PPUSH
43760: CALL_OW 437
43764: PUSH
43765: LD_INT 0
43767: GREATER
43768: IFFALSE 43838
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
43770: LD_VAR 0 1
43774: PPUSH
43775: CALL_OW 437
43779: PUSH
43780: LD_INT 1
43782: ARRAY
43783: PUSH
43784: LD_INT 1
43786: ARRAY
43787: PUSH
43788: LD_STRING l
43790: EQUAL
43791: PUSH
43792: LD_VAR 0 1
43796: PPUSH
43797: CALL_OW 437
43801: PUSH
43802: LD_INT 1
43804: ARRAY
43805: PUSH
43806: LD_INT 4
43808: ARRAY
43809: PUSH
43810: LD_VAR 0 2
43814: EQUAL
43815: AND
43816: IFFALSE 43828
// result := true else
43818: LD_ADDR_VAR 0 3
43822: PUSH
43823: LD_INT 1
43825: ST_TO_ADDR
43826: GO 43836
// result := false ;
43828: LD_ADDR_VAR 0 3
43832: PUSH
43833: LD_INT 0
43835: ST_TO_ADDR
// end else
43836: GO 43846
// result := false ;
43838: LD_ADDR_VAR 0 3
43842: PUSH
43843: LD_INT 0
43845: ST_TO_ADDR
// end ;
43846: LD_VAR 0 3
43850: RET
// export function HealTarget ( sci ) ; begin
43851: LD_INT 0
43853: PPUSH
// if not sci then
43854: LD_VAR 0 1
43858: NOT
43859: IFFALSE 43863
// exit ;
43861: GO 43928
// result := 0 ;
43863: LD_ADDR_VAR 0 2
43867: PUSH
43868: LD_INT 0
43870: ST_TO_ADDR
// if GetTaskList ( sci ) then
43871: LD_VAR 0 1
43875: PPUSH
43876: CALL_OW 437
43880: IFFALSE 43928
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
43882: LD_VAR 0 1
43886: PPUSH
43887: CALL_OW 437
43891: PUSH
43892: LD_INT 1
43894: ARRAY
43895: PUSH
43896: LD_INT 1
43898: ARRAY
43899: PUSH
43900: LD_STRING l
43902: EQUAL
43903: IFFALSE 43928
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
43905: LD_ADDR_VAR 0 2
43909: PUSH
43910: LD_VAR 0 1
43914: PPUSH
43915: CALL_OW 437
43919: PUSH
43920: LD_INT 1
43922: ARRAY
43923: PUSH
43924: LD_INT 4
43926: ARRAY
43927: ST_TO_ADDR
// end ;
43928: LD_VAR 0 2
43932: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
43933: LD_INT 0
43935: PPUSH
43936: PPUSH
43937: PPUSH
43938: PPUSH
// if not base_units then
43939: LD_VAR 0 1
43943: NOT
43944: IFFALSE 43948
// exit ;
43946: GO 44035
// result := false ;
43948: LD_ADDR_VAR 0 2
43952: PUSH
43953: LD_INT 0
43955: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
43956: LD_ADDR_VAR 0 5
43960: PUSH
43961: LD_VAR 0 1
43965: PPUSH
43966: LD_INT 21
43968: PUSH
43969: LD_INT 3
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PPUSH
43976: CALL_OW 72
43980: ST_TO_ADDR
// if not tmp then
43981: LD_VAR 0 5
43985: NOT
43986: IFFALSE 43990
// exit ;
43988: GO 44035
// for i in tmp do
43990: LD_ADDR_VAR 0 3
43994: PUSH
43995: LD_VAR 0 5
43999: PUSH
44000: FOR_IN
44001: IFFALSE 44033
// begin result := EnemyInRange ( i , 22 ) ;
44003: LD_ADDR_VAR 0 2
44007: PUSH
44008: LD_VAR 0 3
44012: PPUSH
44013: LD_INT 22
44015: PPUSH
44016: CALL 42271 0 2
44020: ST_TO_ADDR
// if result then
44021: LD_VAR 0 2
44025: IFFALSE 44031
// exit ;
44027: POP
44028: POP
44029: GO 44035
// end ;
44031: GO 44000
44033: POP
44034: POP
// end ;
44035: LD_VAR 0 2
44039: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
44040: LD_INT 0
44042: PPUSH
44043: PPUSH
// if not units then
44044: LD_VAR 0 1
44048: NOT
44049: IFFALSE 44053
// exit ;
44051: GO 44123
// result := [ ] ;
44053: LD_ADDR_VAR 0 3
44057: PUSH
44058: EMPTY
44059: ST_TO_ADDR
// for i in units do
44060: LD_ADDR_VAR 0 4
44064: PUSH
44065: LD_VAR 0 1
44069: PUSH
44070: FOR_IN
44071: IFFALSE 44121
// if GetTag ( i ) = tag then
44073: LD_VAR 0 4
44077: PPUSH
44078: CALL_OW 110
44082: PUSH
44083: LD_VAR 0 2
44087: EQUAL
44088: IFFALSE 44119
// result := Insert ( result , result + 1 , i ) ;
44090: LD_ADDR_VAR 0 3
44094: PUSH
44095: LD_VAR 0 3
44099: PPUSH
44100: LD_VAR 0 3
44104: PUSH
44105: LD_INT 1
44107: PLUS
44108: PPUSH
44109: LD_VAR 0 4
44113: PPUSH
44114: CALL_OW 2
44118: ST_TO_ADDR
44119: GO 44070
44121: POP
44122: POP
// end ;
44123: LD_VAR 0 3
44127: RET
// export function IsDriver ( un ) ; begin
44128: LD_INT 0
44130: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
44131: LD_ADDR_VAR 0 2
44135: PUSH
44136: LD_VAR 0 1
44140: PUSH
44141: LD_INT 55
44143: PUSH
44144: EMPTY
44145: LIST
44146: PPUSH
44147: CALL_OW 69
44151: IN
44152: ST_TO_ADDR
// end ;
44153: LD_VAR 0 2
44157: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
44158: LD_INT 0
44160: PPUSH
44161: PPUSH
// list := [ ] ;
44162: LD_ADDR_VAR 0 5
44166: PUSH
44167: EMPTY
44168: ST_TO_ADDR
// case d of 0 :
44169: LD_VAR 0 3
44173: PUSH
44174: LD_INT 0
44176: DOUBLE
44177: EQUAL
44178: IFTRUE 44182
44180: GO 44315
44182: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
44183: LD_ADDR_VAR 0 5
44187: PUSH
44188: LD_VAR 0 1
44192: PUSH
44193: LD_INT 4
44195: MINUS
44196: PUSH
44197: LD_VAR 0 2
44201: PUSH
44202: LD_INT 4
44204: MINUS
44205: PUSH
44206: LD_INT 2
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: LIST
44213: PUSH
44214: LD_VAR 0 1
44218: PUSH
44219: LD_INT 3
44221: MINUS
44222: PUSH
44223: LD_VAR 0 2
44227: PUSH
44228: LD_INT 1
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: LIST
44235: PUSH
44236: LD_VAR 0 1
44240: PUSH
44241: LD_INT 4
44243: PLUS
44244: PUSH
44245: LD_VAR 0 2
44249: PUSH
44250: LD_INT 4
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: LIST
44257: PUSH
44258: LD_VAR 0 1
44262: PUSH
44263: LD_INT 3
44265: PLUS
44266: PUSH
44267: LD_VAR 0 2
44271: PUSH
44272: LD_INT 3
44274: PLUS
44275: PUSH
44276: LD_INT 5
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: LIST
44283: PUSH
44284: LD_VAR 0 1
44288: PUSH
44289: LD_VAR 0 2
44293: PUSH
44294: LD_INT 4
44296: PLUS
44297: PUSH
44298: LD_INT 0
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: LIST
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: ST_TO_ADDR
// end ; 1 :
44313: GO 45013
44315: LD_INT 1
44317: DOUBLE
44318: EQUAL
44319: IFTRUE 44323
44321: GO 44456
44323: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
44324: LD_ADDR_VAR 0 5
44328: PUSH
44329: LD_VAR 0 1
44333: PUSH
44334: LD_VAR 0 2
44338: PUSH
44339: LD_INT 4
44341: MINUS
44342: PUSH
44343: LD_INT 3
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: LIST
44350: PUSH
44351: LD_VAR 0 1
44355: PUSH
44356: LD_INT 3
44358: MINUS
44359: PUSH
44360: LD_VAR 0 2
44364: PUSH
44365: LD_INT 3
44367: MINUS
44368: PUSH
44369: LD_INT 2
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: LIST
44376: PUSH
44377: LD_VAR 0 1
44381: PUSH
44382: LD_INT 4
44384: MINUS
44385: PUSH
44386: LD_VAR 0 2
44390: PUSH
44391: LD_INT 1
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: LIST
44398: PUSH
44399: LD_VAR 0 1
44403: PUSH
44404: LD_VAR 0 2
44408: PUSH
44409: LD_INT 3
44411: PLUS
44412: PUSH
44413: LD_INT 0
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: LIST
44420: PUSH
44421: LD_VAR 0 1
44425: PUSH
44426: LD_INT 4
44428: PLUS
44429: PUSH
44430: LD_VAR 0 2
44434: PUSH
44435: LD_INT 4
44437: PLUS
44438: PUSH
44439: LD_INT 5
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: LIST
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: ST_TO_ADDR
// end ; 2 :
44454: GO 45013
44456: LD_INT 2
44458: DOUBLE
44459: EQUAL
44460: IFTRUE 44464
44462: GO 44593
44464: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
44465: LD_ADDR_VAR 0 5
44469: PUSH
44470: LD_VAR 0 1
44474: PUSH
44475: LD_VAR 0 2
44479: PUSH
44480: LD_INT 3
44482: MINUS
44483: PUSH
44484: LD_INT 3
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: LIST
44491: PUSH
44492: LD_VAR 0 1
44496: PUSH
44497: LD_INT 4
44499: PLUS
44500: PUSH
44501: LD_VAR 0 2
44505: PUSH
44506: LD_INT 4
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: LIST
44513: PUSH
44514: LD_VAR 0 1
44518: PUSH
44519: LD_VAR 0 2
44523: PUSH
44524: LD_INT 4
44526: PLUS
44527: PUSH
44528: LD_INT 0
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: LIST
44535: PUSH
44536: LD_VAR 0 1
44540: PUSH
44541: LD_INT 3
44543: MINUS
44544: PUSH
44545: LD_VAR 0 2
44549: PUSH
44550: LD_INT 1
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: LIST
44557: PUSH
44558: LD_VAR 0 1
44562: PUSH
44563: LD_INT 4
44565: MINUS
44566: PUSH
44567: LD_VAR 0 2
44571: PUSH
44572: LD_INT 4
44574: MINUS
44575: PUSH
44576: LD_INT 2
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: LIST
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: ST_TO_ADDR
// end ; 3 :
44591: GO 45013
44593: LD_INT 3
44595: DOUBLE
44596: EQUAL
44597: IFTRUE 44601
44599: GO 44734
44601: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
44602: LD_ADDR_VAR 0 5
44606: PUSH
44607: LD_VAR 0 1
44611: PUSH
44612: LD_INT 3
44614: PLUS
44615: PUSH
44616: LD_VAR 0 2
44620: PUSH
44621: LD_INT 4
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: LIST
44628: PUSH
44629: LD_VAR 0 1
44633: PUSH
44634: LD_INT 4
44636: PLUS
44637: PUSH
44638: LD_VAR 0 2
44642: PUSH
44643: LD_INT 4
44645: PLUS
44646: PUSH
44647: LD_INT 5
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: LIST
44654: PUSH
44655: LD_VAR 0 1
44659: PUSH
44660: LD_INT 4
44662: MINUS
44663: PUSH
44664: LD_VAR 0 2
44668: PUSH
44669: LD_INT 1
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: LIST
44676: PUSH
44677: LD_VAR 0 1
44681: PUSH
44682: LD_VAR 0 2
44686: PUSH
44687: LD_INT 4
44689: MINUS
44690: PUSH
44691: LD_INT 3
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: LIST
44698: PUSH
44699: LD_VAR 0 1
44703: PUSH
44704: LD_INT 3
44706: MINUS
44707: PUSH
44708: LD_VAR 0 2
44712: PUSH
44713: LD_INT 3
44715: MINUS
44716: PUSH
44717: LD_INT 2
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: LIST
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: ST_TO_ADDR
// end ; 4 :
44732: GO 45013
44734: LD_INT 4
44736: DOUBLE
44737: EQUAL
44738: IFTRUE 44742
44740: GO 44875
44742: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
44743: LD_ADDR_VAR 0 5
44747: PUSH
44748: LD_VAR 0 1
44752: PUSH
44753: LD_VAR 0 2
44757: PUSH
44758: LD_INT 4
44760: PLUS
44761: PUSH
44762: LD_INT 0
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: LIST
44769: PUSH
44770: LD_VAR 0 1
44774: PUSH
44775: LD_INT 3
44777: PLUS
44778: PUSH
44779: LD_VAR 0 2
44783: PUSH
44784: LD_INT 3
44786: PLUS
44787: PUSH
44788: LD_INT 5
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: LIST
44795: PUSH
44796: LD_VAR 0 1
44800: PUSH
44801: LD_INT 4
44803: PLUS
44804: PUSH
44805: LD_VAR 0 2
44809: PUSH
44810: LD_INT 4
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: LIST
44817: PUSH
44818: LD_VAR 0 1
44822: PUSH
44823: LD_VAR 0 2
44827: PUSH
44828: LD_INT 3
44830: MINUS
44831: PUSH
44832: LD_INT 3
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: LIST
44839: PUSH
44840: LD_VAR 0 1
44844: PUSH
44845: LD_INT 4
44847: MINUS
44848: PUSH
44849: LD_VAR 0 2
44853: PUSH
44854: LD_INT 4
44856: MINUS
44857: PUSH
44858: LD_INT 2
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: LIST
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: ST_TO_ADDR
// end ; 5 :
44873: GO 45013
44875: LD_INT 5
44877: DOUBLE
44878: EQUAL
44879: IFTRUE 44883
44881: GO 45012
44883: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
44884: LD_ADDR_VAR 0 5
44888: PUSH
44889: LD_VAR 0 1
44893: PUSH
44894: LD_INT 4
44896: MINUS
44897: PUSH
44898: LD_VAR 0 2
44902: PUSH
44903: LD_INT 1
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: LIST
44910: PUSH
44911: LD_VAR 0 1
44915: PUSH
44916: LD_VAR 0 2
44920: PUSH
44921: LD_INT 4
44923: MINUS
44924: PUSH
44925: LD_INT 3
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: LIST
44932: PUSH
44933: LD_VAR 0 1
44937: PUSH
44938: LD_INT 4
44940: PLUS
44941: PUSH
44942: LD_VAR 0 2
44946: PUSH
44947: LD_INT 4
44949: PLUS
44950: PUSH
44951: LD_INT 5
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: LIST
44958: PUSH
44959: LD_VAR 0 1
44963: PUSH
44964: LD_INT 3
44966: PLUS
44967: PUSH
44968: LD_VAR 0 2
44972: PUSH
44973: LD_INT 4
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: LIST
44980: PUSH
44981: LD_VAR 0 1
44985: PUSH
44986: LD_VAR 0 2
44990: PUSH
44991: LD_INT 3
44993: PLUS
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: LIST
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: ST_TO_ADDR
// end ; end ;
45010: GO 45013
45012: POP
// result := list ;
45013: LD_ADDR_VAR 0 4
45017: PUSH
45018: LD_VAR 0 5
45022: ST_TO_ADDR
// end ;
45023: LD_VAR 0 4
45027: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
45028: LD_INT 0
45030: PPUSH
45031: PPUSH
45032: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
45033: LD_VAR 0 1
45037: NOT
45038: PUSH
45039: LD_VAR 0 2
45043: PUSH
45044: LD_INT 1
45046: PUSH
45047: LD_INT 2
45049: PUSH
45050: LD_INT 3
45052: PUSH
45053: LD_INT 4
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: IN
45062: NOT
45063: OR
45064: IFFALSE 45068
// exit ;
45066: GO 45160
// tmp := [ ] ;
45068: LD_ADDR_VAR 0 5
45072: PUSH
45073: EMPTY
45074: ST_TO_ADDR
// for i in units do
45075: LD_ADDR_VAR 0 4
45079: PUSH
45080: LD_VAR 0 1
45084: PUSH
45085: FOR_IN
45086: IFFALSE 45129
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
45088: LD_ADDR_VAR 0 5
45092: PUSH
45093: LD_VAR 0 5
45097: PPUSH
45098: LD_VAR 0 5
45102: PUSH
45103: LD_INT 1
45105: PLUS
45106: PPUSH
45107: LD_VAR 0 4
45111: PPUSH
45112: LD_VAR 0 2
45116: PPUSH
45117: CALL_OW 259
45121: PPUSH
45122: CALL_OW 2
45126: ST_TO_ADDR
45127: GO 45085
45129: POP
45130: POP
// if not tmp then
45131: LD_VAR 0 5
45135: NOT
45136: IFFALSE 45140
// exit ;
45138: GO 45160
// result := SortListByListDesc ( units , tmp ) ;
45140: LD_ADDR_VAR 0 3
45144: PUSH
45145: LD_VAR 0 1
45149: PPUSH
45150: LD_VAR 0 5
45154: PPUSH
45155: CALL_OW 77
45159: ST_TO_ADDR
// end ;
45160: LD_VAR 0 3
45164: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
45165: LD_INT 0
45167: PPUSH
45168: PPUSH
45169: PPUSH
// result := false ;
45170: LD_ADDR_VAR 0 3
45174: PUSH
45175: LD_INT 0
45177: ST_TO_ADDR
// x := GetX ( building ) ;
45178: LD_ADDR_VAR 0 4
45182: PUSH
45183: LD_VAR 0 2
45187: PPUSH
45188: CALL_OW 250
45192: ST_TO_ADDR
// y := GetY ( building ) ;
45193: LD_ADDR_VAR 0 5
45197: PUSH
45198: LD_VAR 0 2
45202: PPUSH
45203: CALL_OW 251
45207: ST_TO_ADDR
// if not building or not x or not y then
45208: LD_VAR 0 2
45212: NOT
45213: PUSH
45214: LD_VAR 0 4
45218: NOT
45219: OR
45220: PUSH
45221: LD_VAR 0 5
45225: NOT
45226: OR
45227: IFFALSE 45231
// exit ;
45229: GO 45323
// if GetTaskList ( unit ) then
45231: LD_VAR 0 1
45235: PPUSH
45236: CALL_OW 437
45240: IFFALSE 45323
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45242: LD_STRING e
45244: PUSH
45245: LD_VAR 0 1
45249: PPUSH
45250: CALL_OW 437
45254: PUSH
45255: LD_INT 1
45257: ARRAY
45258: PUSH
45259: LD_INT 1
45261: ARRAY
45262: EQUAL
45263: PUSH
45264: LD_VAR 0 4
45268: PUSH
45269: LD_VAR 0 1
45273: PPUSH
45274: CALL_OW 437
45278: PUSH
45279: LD_INT 1
45281: ARRAY
45282: PUSH
45283: LD_INT 2
45285: ARRAY
45286: EQUAL
45287: AND
45288: PUSH
45289: LD_VAR 0 5
45293: PUSH
45294: LD_VAR 0 1
45298: PPUSH
45299: CALL_OW 437
45303: PUSH
45304: LD_INT 1
45306: ARRAY
45307: PUSH
45308: LD_INT 3
45310: ARRAY
45311: EQUAL
45312: AND
45313: IFFALSE 45323
// result := true end ;
45315: LD_ADDR_VAR 0 3
45319: PUSH
45320: LD_INT 1
45322: ST_TO_ADDR
// end ;
45323: LD_VAR 0 3
45327: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
45328: LD_INT 0
45330: PPUSH
// result := false ;
45331: LD_ADDR_VAR 0 4
45335: PUSH
45336: LD_INT 0
45338: ST_TO_ADDR
// if GetTaskList ( unit ) then
45339: LD_VAR 0 1
45343: PPUSH
45344: CALL_OW 437
45348: IFFALSE 45431
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45350: LD_STRING M
45352: PUSH
45353: LD_VAR 0 1
45357: PPUSH
45358: CALL_OW 437
45362: PUSH
45363: LD_INT 1
45365: ARRAY
45366: PUSH
45367: LD_INT 1
45369: ARRAY
45370: EQUAL
45371: PUSH
45372: LD_VAR 0 2
45376: PUSH
45377: LD_VAR 0 1
45381: PPUSH
45382: CALL_OW 437
45386: PUSH
45387: LD_INT 1
45389: ARRAY
45390: PUSH
45391: LD_INT 2
45393: ARRAY
45394: EQUAL
45395: AND
45396: PUSH
45397: LD_VAR 0 3
45401: PUSH
45402: LD_VAR 0 1
45406: PPUSH
45407: CALL_OW 437
45411: PUSH
45412: LD_INT 1
45414: ARRAY
45415: PUSH
45416: LD_INT 3
45418: ARRAY
45419: EQUAL
45420: AND
45421: IFFALSE 45431
// result := true ;
45423: LD_ADDR_VAR 0 4
45427: PUSH
45428: LD_INT 1
45430: ST_TO_ADDR
// end ; end ;
45431: LD_VAR 0 4
45435: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
45436: LD_INT 0
45438: PPUSH
45439: PPUSH
45440: PPUSH
45441: PPUSH
// if not unit or not area then
45442: LD_VAR 0 1
45446: NOT
45447: PUSH
45448: LD_VAR 0 2
45452: NOT
45453: OR
45454: IFFALSE 45458
// exit ;
45456: GO 45622
// tmp := AreaToList ( area , i ) ;
45458: LD_ADDR_VAR 0 6
45462: PUSH
45463: LD_VAR 0 2
45467: PPUSH
45468: LD_VAR 0 5
45472: PPUSH
45473: CALL_OW 517
45477: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
45478: LD_ADDR_VAR 0 5
45482: PUSH
45483: DOUBLE
45484: LD_INT 1
45486: DEC
45487: ST_TO_ADDR
45488: LD_VAR 0 6
45492: PUSH
45493: LD_INT 1
45495: ARRAY
45496: PUSH
45497: FOR_TO
45498: IFFALSE 45620
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
45500: LD_ADDR_VAR 0 7
45504: PUSH
45505: LD_VAR 0 6
45509: PUSH
45510: LD_INT 1
45512: ARRAY
45513: PUSH
45514: LD_VAR 0 5
45518: ARRAY
45519: PUSH
45520: LD_VAR 0 6
45524: PUSH
45525: LD_INT 2
45527: ARRAY
45528: PUSH
45529: LD_VAR 0 5
45533: ARRAY
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
45539: LD_VAR 0 7
45543: PUSH
45544: LD_INT 1
45546: ARRAY
45547: PPUSH
45548: LD_VAR 0 7
45552: PUSH
45553: LD_INT 2
45555: ARRAY
45556: PPUSH
45557: CALL_OW 428
45561: PUSH
45562: LD_INT 0
45564: EQUAL
45565: IFFALSE 45618
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
45567: LD_VAR 0 1
45571: PPUSH
45572: LD_VAR 0 7
45576: PUSH
45577: LD_INT 1
45579: ARRAY
45580: PPUSH
45581: LD_VAR 0 7
45585: PUSH
45586: LD_INT 2
45588: ARRAY
45589: PPUSH
45590: LD_VAR 0 3
45594: PPUSH
45595: CALL_OW 48
// result := IsPlaced ( unit ) ;
45599: LD_ADDR_VAR 0 4
45603: PUSH
45604: LD_VAR 0 1
45608: PPUSH
45609: CALL_OW 305
45613: ST_TO_ADDR
// exit ;
45614: POP
45615: POP
45616: GO 45622
// end ; end ;
45618: GO 45497
45620: POP
45621: POP
// end ;
45622: LD_VAR 0 4
45626: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
45627: LD_INT 0
45629: PPUSH
45630: PPUSH
45631: PPUSH
// if not side or side > 8 then
45632: LD_VAR 0 1
45636: NOT
45637: PUSH
45638: LD_VAR 0 1
45642: PUSH
45643: LD_INT 8
45645: GREATER
45646: OR
45647: IFFALSE 45651
// exit ;
45649: GO 45838
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
45651: LD_ADDR_VAR 0 4
45655: PUSH
45656: LD_INT 22
45658: PUSH
45659: LD_VAR 0 1
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 21
45670: PUSH
45671: LD_INT 3
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PPUSH
45682: CALL_OW 69
45686: ST_TO_ADDR
// if not tmp then
45687: LD_VAR 0 4
45691: NOT
45692: IFFALSE 45696
// exit ;
45694: GO 45838
// enable_addtolog := true ;
45696: LD_ADDR_OWVAR 81
45700: PUSH
45701: LD_INT 1
45703: ST_TO_ADDR
// AddToLog ( [ ) ;
45704: LD_STRING [
45706: PPUSH
45707: CALL_OW 561
// for i in tmp do
45711: LD_ADDR_VAR 0 3
45715: PUSH
45716: LD_VAR 0 4
45720: PUSH
45721: FOR_IN
45722: IFFALSE 45829
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
45724: LD_STRING [
45726: PUSH
45727: LD_VAR 0 3
45731: PPUSH
45732: CALL_OW 266
45736: STR
45737: PUSH
45738: LD_STRING , 
45740: STR
45741: PUSH
45742: LD_VAR 0 3
45746: PPUSH
45747: CALL_OW 250
45751: STR
45752: PUSH
45753: LD_STRING , 
45755: STR
45756: PUSH
45757: LD_VAR 0 3
45761: PPUSH
45762: CALL_OW 251
45766: STR
45767: PUSH
45768: LD_STRING , 
45770: STR
45771: PUSH
45772: LD_VAR 0 3
45776: PPUSH
45777: CALL_OW 254
45781: STR
45782: PUSH
45783: LD_STRING , 
45785: STR
45786: PUSH
45787: LD_VAR 0 3
45791: PPUSH
45792: LD_INT 1
45794: PPUSH
45795: CALL_OW 268
45799: STR
45800: PUSH
45801: LD_STRING , 
45803: STR
45804: PUSH
45805: LD_VAR 0 3
45809: PPUSH
45810: LD_INT 2
45812: PPUSH
45813: CALL_OW 268
45817: STR
45818: PUSH
45819: LD_STRING ],
45821: STR
45822: PPUSH
45823: CALL_OW 561
// end ;
45827: GO 45721
45829: POP
45830: POP
// AddToLog ( ]; ) ;
45831: LD_STRING ];
45833: PPUSH
45834: CALL_OW 561
// end ;
45838: LD_VAR 0 2
45842: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
45843: LD_INT 0
45845: PPUSH
45846: PPUSH
45847: PPUSH
45848: PPUSH
45849: PPUSH
// if not area or not rate or not max then
45850: LD_VAR 0 1
45854: NOT
45855: PUSH
45856: LD_VAR 0 2
45860: NOT
45861: OR
45862: PUSH
45863: LD_VAR 0 4
45867: NOT
45868: OR
45869: IFFALSE 45873
// exit ;
45871: GO 46065
// while 1 do
45873: LD_INT 1
45875: IFFALSE 46065
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
45877: LD_ADDR_VAR 0 9
45881: PUSH
45882: LD_VAR 0 1
45886: PPUSH
45887: LD_INT 1
45889: PPUSH
45890: CALL_OW 287
45894: PUSH
45895: LD_INT 10
45897: MUL
45898: ST_TO_ADDR
// r := rate / 10 ;
45899: LD_ADDR_VAR 0 7
45903: PUSH
45904: LD_VAR 0 2
45908: PUSH
45909: LD_INT 10
45911: DIVREAL
45912: ST_TO_ADDR
// time := 1 1$00 ;
45913: LD_ADDR_VAR 0 8
45917: PUSH
45918: LD_INT 2100
45920: ST_TO_ADDR
// if amount < min then
45921: LD_VAR 0 9
45925: PUSH
45926: LD_VAR 0 3
45930: LESS
45931: IFFALSE 45949
// r := r * 2 else
45933: LD_ADDR_VAR 0 7
45937: PUSH
45938: LD_VAR 0 7
45942: PUSH
45943: LD_INT 2
45945: MUL
45946: ST_TO_ADDR
45947: GO 45975
// if amount > max then
45949: LD_VAR 0 9
45953: PUSH
45954: LD_VAR 0 4
45958: GREATER
45959: IFFALSE 45975
// r := r / 2 ;
45961: LD_ADDR_VAR 0 7
45965: PUSH
45966: LD_VAR 0 7
45970: PUSH
45971: LD_INT 2
45973: DIVREAL
45974: ST_TO_ADDR
// time := time / r ;
45975: LD_ADDR_VAR 0 8
45979: PUSH
45980: LD_VAR 0 8
45984: PUSH
45985: LD_VAR 0 7
45989: DIVREAL
45990: ST_TO_ADDR
// if time < 0 then
45991: LD_VAR 0 8
45995: PUSH
45996: LD_INT 0
45998: LESS
45999: IFFALSE 46016
// time := time * - 1 ;
46001: LD_ADDR_VAR 0 8
46005: PUSH
46006: LD_VAR 0 8
46010: PUSH
46011: LD_INT 1
46013: NEG
46014: MUL
46015: ST_TO_ADDR
// wait ( time ) ;
46016: LD_VAR 0 8
46020: PPUSH
46021: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
46025: LD_INT 35
46027: PPUSH
46028: LD_INT 875
46030: PPUSH
46031: CALL_OW 12
46035: PPUSH
46036: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
46040: LD_INT 1
46042: PPUSH
46043: LD_INT 5
46045: PPUSH
46046: CALL_OW 12
46050: PPUSH
46051: LD_VAR 0 1
46055: PPUSH
46056: LD_INT 1
46058: PPUSH
46059: CALL_OW 55
// end ;
46063: GO 45873
// end ;
46065: LD_VAR 0 5
46069: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
46070: LD_INT 0
46072: PPUSH
46073: PPUSH
46074: PPUSH
46075: PPUSH
46076: PPUSH
46077: PPUSH
46078: PPUSH
46079: PPUSH
// if not turrets or not factories then
46080: LD_VAR 0 1
46084: NOT
46085: PUSH
46086: LD_VAR 0 2
46090: NOT
46091: OR
46092: IFFALSE 46096
// exit ;
46094: GO 46403
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
46096: LD_ADDR_VAR 0 10
46100: PUSH
46101: LD_INT 5
46103: PUSH
46104: LD_INT 6
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 2
46113: PUSH
46114: LD_INT 4
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 3
46123: PUSH
46124: LD_INT 5
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 24
46138: PUSH
46139: LD_INT 25
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 23
46148: PUSH
46149: LD_INT 27
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 42
46162: PUSH
46163: LD_INT 43
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 44
46172: PUSH
46173: LD_INT 46
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 45
46182: PUSH
46183: LD_INT 47
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: LIST
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: LIST
46199: ST_TO_ADDR
// result := [ ] ;
46200: LD_ADDR_VAR 0 3
46204: PUSH
46205: EMPTY
46206: ST_TO_ADDR
// for i in turrets do
46207: LD_ADDR_VAR 0 4
46211: PUSH
46212: LD_VAR 0 1
46216: PUSH
46217: FOR_IN
46218: IFFALSE 46401
// begin nat := GetNation ( i ) ;
46220: LD_ADDR_VAR 0 7
46224: PUSH
46225: LD_VAR 0 4
46229: PPUSH
46230: CALL_OW 248
46234: ST_TO_ADDR
// weapon := 0 ;
46235: LD_ADDR_VAR 0 8
46239: PUSH
46240: LD_INT 0
46242: ST_TO_ADDR
// if not nat then
46243: LD_VAR 0 7
46247: NOT
46248: IFFALSE 46252
// continue ;
46250: GO 46217
// for j in list [ nat ] do
46252: LD_ADDR_VAR 0 5
46256: PUSH
46257: LD_VAR 0 10
46261: PUSH
46262: LD_VAR 0 7
46266: ARRAY
46267: PUSH
46268: FOR_IN
46269: IFFALSE 46310
// if GetBWeapon ( i ) = j [ 1 ] then
46271: LD_VAR 0 4
46275: PPUSH
46276: CALL_OW 269
46280: PUSH
46281: LD_VAR 0 5
46285: PUSH
46286: LD_INT 1
46288: ARRAY
46289: EQUAL
46290: IFFALSE 46308
// begin weapon := j [ 2 ] ;
46292: LD_ADDR_VAR 0 8
46296: PUSH
46297: LD_VAR 0 5
46301: PUSH
46302: LD_INT 2
46304: ARRAY
46305: ST_TO_ADDR
// break ;
46306: GO 46310
// end ;
46308: GO 46268
46310: POP
46311: POP
// if not weapon then
46312: LD_VAR 0 8
46316: NOT
46317: IFFALSE 46321
// continue ;
46319: GO 46217
// for k in factories do
46321: LD_ADDR_VAR 0 6
46325: PUSH
46326: LD_VAR 0 2
46330: PUSH
46331: FOR_IN
46332: IFFALSE 46397
// begin weapons := AvailableWeaponList ( k ) ;
46334: LD_ADDR_VAR 0 9
46338: PUSH
46339: LD_VAR 0 6
46343: PPUSH
46344: CALL_OW 478
46348: ST_TO_ADDR
// if not weapons then
46349: LD_VAR 0 9
46353: NOT
46354: IFFALSE 46358
// continue ;
46356: GO 46331
// if weapon in weapons then
46358: LD_VAR 0 8
46362: PUSH
46363: LD_VAR 0 9
46367: IN
46368: IFFALSE 46395
// begin result := [ i , weapon ] ;
46370: LD_ADDR_VAR 0 3
46374: PUSH
46375: LD_VAR 0 4
46379: PUSH
46380: LD_VAR 0 8
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: ST_TO_ADDR
// exit ;
46389: POP
46390: POP
46391: POP
46392: POP
46393: GO 46403
// end ; end ;
46395: GO 46331
46397: POP
46398: POP
// end ;
46399: GO 46217
46401: POP
46402: POP
// end ;
46403: LD_VAR 0 3
46407: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
46408: LD_INT 0
46410: PPUSH
// if not side or side > 8 then
46411: LD_VAR 0 3
46415: NOT
46416: PUSH
46417: LD_VAR 0 3
46421: PUSH
46422: LD_INT 8
46424: GREATER
46425: OR
46426: IFFALSE 46430
// exit ;
46428: GO 46489
// if not range then
46430: LD_VAR 0 4
46434: NOT
46435: IFFALSE 46446
// range := - 12 ;
46437: LD_ADDR_VAR 0 4
46441: PUSH
46442: LD_INT 12
46444: NEG
46445: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
46446: LD_VAR 0 1
46450: PPUSH
46451: LD_VAR 0 2
46455: PPUSH
46456: LD_VAR 0 3
46460: PPUSH
46461: LD_VAR 0 4
46465: PPUSH
46466: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
46470: LD_VAR 0 1
46474: PPUSH
46475: LD_VAR 0 2
46479: PPUSH
46480: LD_VAR 0 3
46484: PPUSH
46485: CALL_OW 331
// end ;
46489: LD_VAR 0 5
46493: RET
// export function Video ( mode ) ; begin
46494: LD_INT 0
46496: PPUSH
// ingame_video = mode ;
46497: LD_ADDR_OWVAR 52
46501: PUSH
46502: LD_VAR 0 1
46506: ST_TO_ADDR
// interface_hidden = mode ;
46507: LD_ADDR_OWVAR 54
46511: PUSH
46512: LD_VAR 0 1
46516: ST_TO_ADDR
// end ;
46517: LD_VAR 0 2
46521: RET
// export function Join ( array , element ) ; begin
46522: LD_INT 0
46524: PPUSH
// result := Replace ( array , array + 1 , element ) ;
46525: LD_ADDR_VAR 0 3
46529: PUSH
46530: LD_VAR 0 1
46534: PPUSH
46535: LD_VAR 0 1
46539: PUSH
46540: LD_INT 1
46542: PLUS
46543: PPUSH
46544: LD_VAR 0 2
46548: PPUSH
46549: CALL_OW 1
46553: ST_TO_ADDR
// end ;
46554: LD_VAR 0 3
46558: RET
// export function JoinUnion ( array , element ) ; begin
46559: LD_INT 0
46561: PPUSH
// result := array union element ;
46562: LD_ADDR_VAR 0 3
46566: PUSH
46567: LD_VAR 0 1
46571: PUSH
46572: LD_VAR 0 2
46576: UNION
46577: ST_TO_ADDR
// end ;
46578: LD_VAR 0 3
46582: RET
// export function GetBehemoths ( side ) ; begin
46583: LD_INT 0
46585: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
46586: LD_ADDR_VAR 0 2
46590: PUSH
46591: LD_INT 22
46593: PUSH
46594: LD_VAR 0 1
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 31
46605: PUSH
46606: LD_INT 25
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PPUSH
46617: CALL_OW 69
46621: ST_TO_ADDR
// end ;
46622: LD_VAR 0 2
46626: RET
// export function Shuffle ( array ) ; var i , index ; begin
46627: LD_INT 0
46629: PPUSH
46630: PPUSH
46631: PPUSH
// result := [ ] ;
46632: LD_ADDR_VAR 0 2
46636: PUSH
46637: EMPTY
46638: ST_TO_ADDR
// if not array then
46639: LD_VAR 0 1
46643: NOT
46644: IFFALSE 46648
// exit ;
46646: GO 46747
// Randomize ;
46648: CALL_OW 10
// for i = array downto 1 do
46652: LD_ADDR_VAR 0 3
46656: PUSH
46657: DOUBLE
46658: LD_VAR 0 1
46662: INC
46663: ST_TO_ADDR
46664: LD_INT 1
46666: PUSH
46667: FOR_DOWNTO
46668: IFFALSE 46745
// begin index := rand ( 1 , array ) ;
46670: LD_ADDR_VAR 0 4
46674: PUSH
46675: LD_INT 1
46677: PPUSH
46678: LD_VAR 0 1
46682: PPUSH
46683: CALL_OW 12
46687: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
46688: LD_ADDR_VAR 0 2
46692: PUSH
46693: LD_VAR 0 2
46697: PPUSH
46698: LD_VAR 0 2
46702: PUSH
46703: LD_INT 1
46705: PLUS
46706: PPUSH
46707: LD_VAR 0 1
46711: PUSH
46712: LD_VAR 0 4
46716: ARRAY
46717: PPUSH
46718: CALL_OW 2
46722: ST_TO_ADDR
// array := Delete ( array , index ) ;
46723: LD_ADDR_VAR 0 1
46727: PUSH
46728: LD_VAR 0 1
46732: PPUSH
46733: LD_VAR 0 4
46737: PPUSH
46738: CALL_OW 3
46742: ST_TO_ADDR
// end ;
46743: GO 46667
46745: POP
46746: POP
// end ;
46747: LD_VAR 0 2
46751: RET
// export function GetBaseMaterials ( base ) ; begin
46752: LD_INT 0
46754: PPUSH
// result := [ 0 , 0 , 0 ] ;
46755: LD_ADDR_VAR 0 2
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: LIST
46773: ST_TO_ADDR
// if not base then
46774: LD_VAR 0 1
46778: NOT
46779: IFFALSE 46783
// exit ;
46781: GO 46832
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
46783: LD_ADDR_VAR 0 2
46787: PUSH
46788: LD_VAR 0 1
46792: PPUSH
46793: LD_INT 1
46795: PPUSH
46796: CALL_OW 275
46800: PUSH
46801: LD_VAR 0 1
46805: PPUSH
46806: LD_INT 2
46808: PPUSH
46809: CALL_OW 275
46813: PUSH
46814: LD_VAR 0 1
46818: PPUSH
46819: LD_INT 3
46821: PPUSH
46822: CALL_OW 275
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: LIST
46831: ST_TO_ADDR
// end ;
46832: LD_VAR 0 2
46836: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
46837: LD_INT 0
46839: PPUSH
46840: PPUSH
// result := array ;
46841: LD_ADDR_VAR 0 3
46845: PUSH
46846: LD_VAR 0 1
46850: ST_TO_ADDR
// if size > 0 then
46851: LD_VAR 0 2
46855: PUSH
46856: LD_INT 0
46858: GREATER
46859: IFFALSE 46905
// for i := array downto size do
46861: LD_ADDR_VAR 0 4
46865: PUSH
46866: DOUBLE
46867: LD_VAR 0 1
46871: INC
46872: ST_TO_ADDR
46873: LD_VAR 0 2
46877: PUSH
46878: FOR_DOWNTO
46879: IFFALSE 46903
// result := Delete ( result , result ) ;
46881: LD_ADDR_VAR 0 3
46885: PUSH
46886: LD_VAR 0 3
46890: PPUSH
46891: LD_VAR 0 3
46895: PPUSH
46896: CALL_OW 3
46900: ST_TO_ADDR
46901: GO 46878
46903: POP
46904: POP
// end ;
46905: LD_VAR 0 3
46909: RET
// export function ComExit ( unit ) ; var tmp ; begin
46910: LD_INT 0
46912: PPUSH
46913: PPUSH
// if not IsInUnit ( unit ) then
46914: LD_VAR 0 1
46918: PPUSH
46919: CALL_OW 310
46923: NOT
46924: IFFALSE 46928
// exit ;
46926: GO 46988
// tmp := IsInUnit ( unit ) ;
46928: LD_ADDR_VAR 0 3
46932: PUSH
46933: LD_VAR 0 1
46937: PPUSH
46938: CALL_OW 310
46942: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
46943: LD_VAR 0 3
46947: PPUSH
46948: CALL_OW 247
46952: PUSH
46953: LD_INT 2
46955: EQUAL
46956: IFFALSE 46969
// ComExitVehicle ( unit ) else
46958: LD_VAR 0 1
46962: PPUSH
46963: CALL_OW 121
46967: GO 46978
// ComExitBuilding ( unit ) ;
46969: LD_VAR 0 1
46973: PPUSH
46974: CALL_OW 122
// result := tmp ;
46978: LD_ADDR_VAR 0 2
46982: PUSH
46983: LD_VAR 0 3
46987: ST_TO_ADDR
// end ;
46988: LD_VAR 0 2
46992: RET
// export function ComExitAll ( units ) ; var i ; begin
46993: LD_INT 0
46995: PPUSH
46996: PPUSH
// if not units then
46997: LD_VAR 0 1
47001: NOT
47002: IFFALSE 47006
// exit ;
47004: GO 47032
// for i in units do
47006: LD_ADDR_VAR 0 3
47010: PUSH
47011: LD_VAR 0 1
47015: PUSH
47016: FOR_IN
47017: IFFALSE 47030
// ComExit ( i ) ;
47019: LD_VAR 0 3
47023: PPUSH
47024: CALL 46910 0 1
47028: GO 47016
47030: POP
47031: POP
// end ;
47032: LD_VAR 0 2
47036: RET
// export function ResetHc ; begin
47037: LD_INT 0
47039: PPUSH
// InitHc ;
47040: CALL_OW 19
// hc_importance := 0 ;
47044: LD_ADDR_OWVAR 32
47048: PUSH
47049: LD_INT 0
47051: ST_TO_ADDR
// end ;
47052: LD_VAR 0 1
47056: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
47057: LD_INT 0
47059: PPUSH
47060: PPUSH
47061: PPUSH
// _x := ( x1 + x2 ) div 2 ;
47062: LD_ADDR_VAR 0 6
47066: PUSH
47067: LD_VAR 0 1
47071: PUSH
47072: LD_VAR 0 3
47076: PLUS
47077: PUSH
47078: LD_INT 2
47080: DIV
47081: ST_TO_ADDR
// if _x < 0 then
47082: LD_VAR 0 6
47086: PUSH
47087: LD_INT 0
47089: LESS
47090: IFFALSE 47107
// _x := _x * - 1 ;
47092: LD_ADDR_VAR 0 6
47096: PUSH
47097: LD_VAR 0 6
47101: PUSH
47102: LD_INT 1
47104: NEG
47105: MUL
47106: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
47107: LD_ADDR_VAR 0 7
47111: PUSH
47112: LD_VAR 0 2
47116: PUSH
47117: LD_VAR 0 4
47121: PLUS
47122: PUSH
47123: LD_INT 2
47125: DIV
47126: ST_TO_ADDR
// if _y < 0 then
47127: LD_VAR 0 7
47131: PUSH
47132: LD_INT 0
47134: LESS
47135: IFFALSE 47152
// _y := _y * - 1 ;
47137: LD_ADDR_VAR 0 7
47141: PUSH
47142: LD_VAR 0 7
47146: PUSH
47147: LD_INT 1
47149: NEG
47150: MUL
47151: ST_TO_ADDR
// result := [ _x , _y ] ;
47152: LD_ADDR_VAR 0 5
47156: PUSH
47157: LD_VAR 0 6
47161: PUSH
47162: LD_VAR 0 7
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: ST_TO_ADDR
// end ;
47171: LD_VAR 0 5
47175: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
47176: LD_INT 0
47178: PPUSH
47179: PPUSH
47180: PPUSH
47181: PPUSH
// task := GetTaskList ( unit ) ;
47182: LD_ADDR_VAR 0 7
47186: PUSH
47187: LD_VAR 0 1
47191: PPUSH
47192: CALL_OW 437
47196: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
47197: LD_VAR 0 7
47201: NOT
47202: PUSH
47203: LD_VAR 0 1
47207: PPUSH
47208: LD_VAR 0 2
47212: PPUSH
47213: CALL_OW 308
47217: NOT
47218: AND
47219: IFFALSE 47223
// exit ;
47221: GO 47341
// if IsInArea ( unit , area ) then
47223: LD_VAR 0 1
47227: PPUSH
47228: LD_VAR 0 2
47232: PPUSH
47233: CALL_OW 308
47237: IFFALSE 47255
// begin ComMoveToArea ( unit , goAway ) ;
47239: LD_VAR 0 1
47243: PPUSH
47244: LD_VAR 0 3
47248: PPUSH
47249: CALL_OW 113
// exit ;
47253: GO 47341
// end ; if task [ 1 ] [ 1 ] <> M then
47255: LD_VAR 0 7
47259: PUSH
47260: LD_INT 1
47262: ARRAY
47263: PUSH
47264: LD_INT 1
47266: ARRAY
47267: PUSH
47268: LD_STRING M
47270: NONEQUAL
47271: IFFALSE 47275
// exit ;
47273: GO 47341
// x := task [ 1 ] [ 2 ] ;
47275: LD_ADDR_VAR 0 5
47279: PUSH
47280: LD_VAR 0 7
47284: PUSH
47285: LD_INT 1
47287: ARRAY
47288: PUSH
47289: LD_INT 2
47291: ARRAY
47292: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
47293: LD_ADDR_VAR 0 6
47297: PUSH
47298: LD_VAR 0 7
47302: PUSH
47303: LD_INT 1
47305: ARRAY
47306: PUSH
47307: LD_INT 3
47309: ARRAY
47310: ST_TO_ADDR
// if InArea ( x , y , area ) then
47311: LD_VAR 0 5
47315: PPUSH
47316: LD_VAR 0 6
47320: PPUSH
47321: LD_VAR 0 2
47325: PPUSH
47326: CALL_OW 309
47330: IFFALSE 47341
// ComStop ( unit ) ;
47332: LD_VAR 0 1
47336: PPUSH
47337: CALL_OW 141
// end ;
47341: LD_VAR 0 4
47345: RET
// export function Abs ( value ) ; begin
47346: LD_INT 0
47348: PPUSH
// result := value ;
47349: LD_ADDR_VAR 0 2
47353: PUSH
47354: LD_VAR 0 1
47358: ST_TO_ADDR
// if value < 0 then
47359: LD_VAR 0 1
47363: PUSH
47364: LD_INT 0
47366: LESS
47367: IFFALSE 47384
// result := value * - 1 ;
47369: LD_ADDR_VAR 0 2
47373: PUSH
47374: LD_VAR 0 1
47378: PUSH
47379: LD_INT 1
47381: NEG
47382: MUL
47383: ST_TO_ADDR
// end ;
47384: LD_VAR 0 2
47388: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
47389: LD_INT 0
47391: PPUSH
47392: PPUSH
47393: PPUSH
47394: PPUSH
47395: PPUSH
47396: PPUSH
47397: PPUSH
47398: PPUSH
// if not unit or not building then
47399: LD_VAR 0 1
47403: NOT
47404: PUSH
47405: LD_VAR 0 2
47409: NOT
47410: OR
47411: IFFALSE 47415
// exit ;
47413: GO 47641
// x := GetX ( building ) ;
47415: LD_ADDR_VAR 0 4
47419: PUSH
47420: LD_VAR 0 2
47424: PPUSH
47425: CALL_OW 250
47429: ST_TO_ADDR
// y := GetY ( building ) ;
47430: LD_ADDR_VAR 0 6
47434: PUSH
47435: LD_VAR 0 2
47439: PPUSH
47440: CALL_OW 251
47444: ST_TO_ADDR
// d := GetDir ( building ) ;
47445: LD_ADDR_VAR 0 8
47449: PUSH
47450: LD_VAR 0 2
47454: PPUSH
47455: CALL_OW 254
47459: ST_TO_ADDR
// r := 4 ;
47460: LD_ADDR_VAR 0 9
47464: PUSH
47465: LD_INT 4
47467: ST_TO_ADDR
// for i := 1 to 5 do
47468: LD_ADDR_VAR 0 10
47472: PUSH
47473: DOUBLE
47474: LD_INT 1
47476: DEC
47477: ST_TO_ADDR
47478: LD_INT 5
47480: PUSH
47481: FOR_TO
47482: IFFALSE 47639
// begin _x := ShiftX ( x , d , r + i ) ;
47484: LD_ADDR_VAR 0 5
47488: PUSH
47489: LD_VAR 0 4
47493: PPUSH
47494: LD_VAR 0 8
47498: PPUSH
47499: LD_VAR 0 9
47503: PUSH
47504: LD_VAR 0 10
47508: PLUS
47509: PPUSH
47510: CALL_OW 272
47514: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
47515: LD_ADDR_VAR 0 7
47519: PUSH
47520: LD_VAR 0 6
47524: PPUSH
47525: LD_VAR 0 8
47529: PPUSH
47530: LD_VAR 0 9
47534: PUSH
47535: LD_VAR 0 10
47539: PLUS
47540: PPUSH
47541: CALL_OW 273
47545: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
47546: LD_VAR 0 5
47550: PPUSH
47551: LD_VAR 0 7
47555: PPUSH
47556: CALL_OW 488
47560: PUSH
47561: LD_VAR 0 5
47565: PPUSH
47566: LD_VAR 0 7
47570: PPUSH
47571: CALL_OW 428
47575: PPUSH
47576: CALL_OW 247
47580: PUSH
47581: LD_INT 3
47583: PUSH
47584: LD_INT 2
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: IN
47591: NOT
47592: AND
47593: IFFALSE 47637
// begin ComMoveXY ( unit , _x , _y ) ;
47595: LD_VAR 0 1
47599: PPUSH
47600: LD_VAR 0 5
47604: PPUSH
47605: LD_VAR 0 7
47609: PPUSH
47610: CALL_OW 111
// result := [ _x , _y ] ;
47614: LD_ADDR_VAR 0 3
47618: PUSH
47619: LD_VAR 0 5
47623: PUSH
47624: LD_VAR 0 7
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: ST_TO_ADDR
// exit ;
47633: POP
47634: POP
47635: GO 47641
// end ; end ;
47637: GO 47481
47639: POP
47640: POP
// end ;
47641: LD_VAR 0 3
47645: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
47646: LD_INT 0
47648: PPUSH
47649: PPUSH
47650: PPUSH
// result := 0 ;
47651: LD_ADDR_VAR 0 3
47655: PUSH
47656: LD_INT 0
47658: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
47659: LD_VAR 0 1
47663: PUSH
47664: LD_INT 0
47666: LESS
47667: PUSH
47668: LD_VAR 0 1
47672: PUSH
47673: LD_INT 8
47675: GREATER
47676: OR
47677: PUSH
47678: LD_VAR 0 2
47682: PUSH
47683: LD_INT 0
47685: LESS
47686: OR
47687: PUSH
47688: LD_VAR 0 2
47692: PUSH
47693: LD_INT 8
47695: GREATER
47696: OR
47697: IFFALSE 47701
// exit ;
47699: GO 47776
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
47701: LD_ADDR_VAR 0 4
47705: PUSH
47706: LD_INT 22
47708: PUSH
47709: LD_VAR 0 2
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PPUSH
47718: CALL_OW 69
47722: PUSH
47723: FOR_IN
47724: IFFALSE 47774
// begin un := UnitShoot ( i ) ;
47726: LD_ADDR_VAR 0 5
47730: PUSH
47731: LD_VAR 0 4
47735: PPUSH
47736: CALL_OW 504
47740: ST_TO_ADDR
// if GetSide ( un ) = side1 then
47741: LD_VAR 0 5
47745: PPUSH
47746: CALL_OW 255
47750: PUSH
47751: LD_VAR 0 1
47755: EQUAL
47756: IFFALSE 47772
// begin result := un ;
47758: LD_ADDR_VAR 0 3
47762: PUSH
47763: LD_VAR 0 5
47767: ST_TO_ADDR
// exit ;
47768: POP
47769: POP
47770: GO 47776
// end ; end ;
47772: GO 47723
47774: POP
47775: POP
// end ;
47776: LD_VAR 0 3
47780: RET
// export function GetCargoBay ( units ) ; begin
47781: LD_INT 0
47783: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
47784: LD_ADDR_VAR 0 2
47788: PUSH
47789: LD_VAR 0 1
47793: PPUSH
47794: LD_INT 2
47796: PUSH
47797: LD_INT 34
47799: PUSH
47800: LD_INT 12
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 34
47809: PUSH
47810: LD_INT 51
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 34
47819: PUSH
47820: LD_INT 32
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 34
47829: PUSH
47830: LD_EXP 96
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: PPUSH
47846: CALL_OW 72
47850: ST_TO_ADDR
// end ;
47851: LD_VAR 0 2
47855: RET
// export function Negate ( value ) ; begin
47856: LD_INT 0
47858: PPUSH
// result := not value ;
47859: LD_ADDR_VAR 0 2
47863: PUSH
47864: LD_VAR 0 1
47868: NOT
47869: ST_TO_ADDR
// end ;
47870: LD_VAR 0 2
47874: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
47875: LD_INT 0
47877: PPUSH
// if x1 = x2 then
47878: LD_VAR 0 1
47882: PUSH
47883: LD_VAR 0 3
47887: EQUAL
47888: IFFALSE 47922
// begin if y1 > y2 then
47890: LD_VAR 0 2
47894: PUSH
47895: LD_VAR 0 4
47899: GREATER
47900: IFFALSE 47912
// result := 0 else
47902: LD_ADDR_VAR 0 5
47906: PUSH
47907: LD_INT 0
47909: ST_TO_ADDR
47910: GO 47920
// result := 3 ;
47912: LD_ADDR_VAR 0 5
47916: PUSH
47917: LD_INT 3
47919: ST_TO_ADDR
// exit ;
47920: GO 48008
// end ; if y1 = y2 then
47922: LD_VAR 0 2
47926: PUSH
47927: LD_VAR 0 4
47931: EQUAL
47932: IFFALSE 47966
// begin if x1 > x2 then
47934: LD_VAR 0 1
47938: PUSH
47939: LD_VAR 0 3
47943: GREATER
47944: IFFALSE 47956
// result := 1 else
47946: LD_ADDR_VAR 0 5
47950: PUSH
47951: LD_INT 1
47953: ST_TO_ADDR
47954: GO 47964
// result := 4 ;
47956: LD_ADDR_VAR 0 5
47960: PUSH
47961: LD_INT 4
47963: ST_TO_ADDR
// exit ;
47964: GO 48008
// end ; if x1 > x2 and y1 > y2 then
47966: LD_VAR 0 1
47970: PUSH
47971: LD_VAR 0 3
47975: GREATER
47976: PUSH
47977: LD_VAR 0 2
47981: PUSH
47982: LD_VAR 0 4
47986: GREATER
47987: AND
47988: IFFALSE 48000
// result := 2 else
47990: LD_ADDR_VAR 0 5
47994: PUSH
47995: LD_INT 2
47997: ST_TO_ADDR
47998: GO 48008
// result := 5 ;
48000: LD_ADDR_VAR 0 5
48004: PUSH
48005: LD_INT 5
48007: ST_TO_ADDR
// end ;
48008: LD_VAR 0 5
48012: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48013: LD_INT 0
48015: PPUSH
48016: PPUSH
// if not driver or not IsInUnit ( driver ) then
48017: LD_VAR 0 1
48021: NOT
48022: PUSH
48023: LD_VAR 0 1
48027: PPUSH
48028: CALL_OW 310
48032: NOT
48033: OR
48034: IFFALSE 48038
// exit ;
48036: GO 48128
// vehicle := IsInUnit ( driver ) ;
48038: LD_ADDR_VAR 0 3
48042: PUSH
48043: LD_VAR 0 1
48047: PPUSH
48048: CALL_OW 310
48052: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48053: LD_VAR 0 1
48057: PPUSH
48058: LD_STRING \
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: LD_INT 0
48069: PUSH
48070: LD_INT 0
48072: PUSH
48073: LD_INT 0
48075: PUSH
48076: LD_INT 0
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: PUSH
48088: LD_STRING E
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: LD_VAR 0 3
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: LD_INT 0
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PPUSH
48124: CALL_OW 446
// end ;
48128: LD_VAR 0 2
48132: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48133: LD_INT 0
48135: PPUSH
48136: PPUSH
// if not driver or not IsInUnit ( driver ) then
48137: LD_VAR 0 1
48141: NOT
48142: PUSH
48143: LD_VAR 0 1
48147: PPUSH
48148: CALL_OW 310
48152: NOT
48153: OR
48154: IFFALSE 48158
// exit ;
48156: GO 48248
// vehicle := IsInUnit ( driver ) ;
48158: LD_ADDR_VAR 0 3
48162: PUSH
48163: LD_VAR 0 1
48167: PPUSH
48168: CALL_OW 310
48172: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48173: LD_VAR 0 1
48177: PPUSH
48178: LD_STRING \
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: LD_INT 0
48192: PUSH
48193: LD_INT 0
48195: PUSH
48196: LD_INT 0
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: PUSH
48208: LD_STRING E
48210: PUSH
48211: LD_INT 0
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: LD_VAR 0 3
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: LD_INT 0
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PPUSH
48244: CALL_OW 447
// end ;
48248: LD_VAR 0 2
48252: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
48253: LD_INT 0
48255: PPUSH
48256: PPUSH
48257: PPUSH
// tmp := [ ] ;
48258: LD_ADDR_VAR 0 5
48262: PUSH
48263: EMPTY
48264: ST_TO_ADDR
// for i in units do
48265: LD_ADDR_VAR 0 4
48269: PUSH
48270: LD_VAR 0 1
48274: PUSH
48275: FOR_IN
48276: IFFALSE 48314
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
48278: LD_ADDR_VAR 0 5
48282: PUSH
48283: LD_VAR 0 5
48287: PPUSH
48288: LD_VAR 0 5
48292: PUSH
48293: LD_INT 1
48295: PLUS
48296: PPUSH
48297: LD_VAR 0 4
48301: PPUSH
48302: CALL_OW 256
48306: PPUSH
48307: CALL_OW 2
48311: ST_TO_ADDR
48312: GO 48275
48314: POP
48315: POP
// if not tmp then
48316: LD_VAR 0 5
48320: NOT
48321: IFFALSE 48325
// exit ;
48323: GO 48373
// if asc then
48325: LD_VAR 0 2
48329: IFFALSE 48353
// result := SortListByListAsc ( units , tmp ) else
48331: LD_ADDR_VAR 0 3
48335: PUSH
48336: LD_VAR 0 1
48340: PPUSH
48341: LD_VAR 0 5
48345: PPUSH
48346: CALL_OW 76
48350: ST_TO_ADDR
48351: GO 48373
// result := SortListByListDesc ( units , tmp ) ;
48353: LD_ADDR_VAR 0 3
48357: PUSH
48358: LD_VAR 0 1
48362: PPUSH
48363: LD_VAR 0 5
48367: PPUSH
48368: CALL_OW 77
48372: ST_TO_ADDR
// end ;
48373: LD_VAR 0 3
48377: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
48378: LD_INT 0
48380: PPUSH
48381: PPUSH
// task := GetTaskList ( mech ) ;
48382: LD_ADDR_VAR 0 4
48386: PUSH
48387: LD_VAR 0 1
48391: PPUSH
48392: CALL_OW 437
48396: ST_TO_ADDR
// if not task then
48397: LD_VAR 0 4
48401: NOT
48402: IFFALSE 48406
// exit ;
48404: GO 48448
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
48406: LD_ADDR_VAR 0 3
48410: PUSH
48411: LD_VAR 0 4
48415: PUSH
48416: LD_INT 1
48418: ARRAY
48419: PUSH
48420: LD_INT 1
48422: ARRAY
48423: PUSH
48424: LD_STRING r
48426: EQUAL
48427: PUSH
48428: LD_VAR 0 4
48432: PUSH
48433: LD_INT 1
48435: ARRAY
48436: PUSH
48437: LD_INT 4
48439: ARRAY
48440: PUSH
48441: LD_VAR 0 2
48445: EQUAL
48446: AND
48447: ST_TO_ADDR
// end ;
48448: LD_VAR 0 3
48452: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
48453: LD_INT 0
48455: PPUSH
// SetDir ( unit , d ) ;
48456: LD_VAR 0 1
48460: PPUSH
48461: LD_VAR 0 4
48465: PPUSH
48466: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
48470: LD_VAR 0 1
48474: PPUSH
48475: LD_VAR 0 2
48479: PPUSH
48480: LD_VAR 0 3
48484: PPUSH
48485: LD_VAR 0 5
48489: PPUSH
48490: CALL_OW 48
// end ;
48494: LD_VAR 0 6
48498: RET
// export function ToNaturalNumber ( number ) ; begin
48499: LD_INT 0
48501: PPUSH
// result := number div 1 ;
48502: LD_ADDR_VAR 0 2
48506: PUSH
48507: LD_VAR 0 1
48511: PUSH
48512: LD_INT 1
48514: DIV
48515: ST_TO_ADDR
// if number < 0 then
48516: LD_VAR 0 1
48520: PUSH
48521: LD_INT 0
48523: LESS
48524: IFFALSE 48534
// result := 0 ;
48526: LD_ADDR_VAR 0 2
48530: PUSH
48531: LD_INT 0
48533: ST_TO_ADDR
// end ;
48534: LD_VAR 0 2
48538: RET
// export function SortByClass ( units , class ) ; var un ; begin
48539: LD_INT 0
48541: PPUSH
48542: PPUSH
// if not units or not class then
48543: LD_VAR 0 1
48547: NOT
48548: PUSH
48549: LD_VAR 0 2
48553: NOT
48554: OR
48555: IFFALSE 48559
// exit ;
48557: GO 48654
// result := [ ] ;
48559: LD_ADDR_VAR 0 3
48563: PUSH
48564: EMPTY
48565: ST_TO_ADDR
// for un in units do
48566: LD_ADDR_VAR 0 4
48570: PUSH
48571: LD_VAR 0 1
48575: PUSH
48576: FOR_IN
48577: IFFALSE 48652
// if GetClass ( un ) = class then
48579: LD_VAR 0 4
48583: PPUSH
48584: CALL_OW 257
48588: PUSH
48589: LD_VAR 0 2
48593: EQUAL
48594: IFFALSE 48621
// result := Insert ( result , 1 , un ) else
48596: LD_ADDR_VAR 0 3
48600: PUSH
48601: LD_VAR 0 3
48605: PPUSH
48606: LD_INT 1
48608: PPUSH
48609: LD_VAR 0 4
48613: PPUSH
48614: CALL_OW 2
48618: ST_TO_ADDR
48619: GO 48650
// result := Replace ( result , result + 1 , un ) ;
48621: LD_ADDR_VAR 0 3
48625: PUSH
48626: LD_VAR 0 3
48630: PPUSH
48631: LD_VAR 0 3
48635: PUSH
48636: LD_INT 1
48638: PLUS
48639: PPUSH
48640: LD_VAR 0 4
48644: PPUSH
48645: CALL_OW 1
48649: ST_TO_ADDR
48650: GO 48576
48652: POP
48653: POP
// end ; end_of_file
48654: LD_VAR 0 3
48658: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
48659: LD_VAR 0 1
48663: PUSH
48664: LD_INT 200
48666: DOUBLE
48667: GREATEREQUAL
48668: IFFALSE 48676
48670: LD_INT 299
48672: DOUBLE
48673: LESSEQUAL
48674: IFTRUE 48678
48676: GO 48710
48678: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
48679: LD_VAR 0 1
48683: PPUSH
48684: LD_VAR 0 2
48688: PPUSH
48689: LD_VAR 0 3
48693: PPUSH
48694: LD_VAR 0 4
48698: PPUSH
48699: LD_VAR 0 5
48703: PPUSH
48704: CALL 48954 0 5
48708: GO 48787
48710: LD_INT 300
48712: DOUBLE
48713: GREATEREQUAL
48714: IFFALSE 48722
48716: LD_INT 399
48718: DOUBLE
48719: LESSEQUAL
48720: IFTRUE 48724
48722: GO 48786
48724: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
48725: LD_VAR 0 1
48729: PPUSH
48730: LD_VAR 0 2
48734: PPUSH
48735: LD_VAR 0 3
48739: PPUSH
48740: LD_VAR 0 4
48744: PPUSH
48745: LD_VAR 0 5
48749: PPUSH
48750: LD_VAR 0 6
48754: PPUSH
48755: LD_VAR 0 7
48759: PPUSH
48760: LD_VAR 0 8
48764: PPUSH
48765: LD_VAR 0 9
48769: PPUSH
48770: LD_VAR 0 10
48774: PPUSH
48775: LD_VAR 0 11
48779: PPUSH
48780: CALL 64029 0 11
48784: GO 48787
48786: POP
// end ;
48787: PPOPN 11
48789: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
48790: LD_VAR 0 1
48794: PPUSH
48795: LD_VAR 0 2
48799: PPUSH
48800: LD_VAR 0 3
48804: PPUSH
48805: LD_VAR 0 4
48809: PPUSH
48810: LD_VAR 0 5
48814: PPUSH
48815: CALL 48936 0 5
// end ; end_of_file
48819: PPOPN 5
48821: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
48822: LD_INT 0
48824: PPUSH
48825: PPUSH
48826: PPUSH
48827: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
48828: LD_VAR 0 1
48832: PPUSH
48833: CALL_OW 264
48837: PUSH
48838: LD_EXP 99
48842: EQUAL
48843: IFFALSE 48915
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
48845: LD_INT 68
48847: PPUSH
48848: LD_VAR 0 1
48852: PPUSH
48853: CALL_OW 255
48857: PPUSH
48858: CALL_OW 321
48862: PUSH
48863: LD_INT 2
48865: EQUAL
48866: IFFALSE 48878
// eff := 70 else
48868: LD_ADDR_VAR 0 4
48872: PUSH
48873: LD_INT 70
48875: ST_TO_ADDR
48876: GO 48886
// eff := 30 ;
48878: LD_ADDR_VAR 0 4
48882: PUSH
48883: LD_INT 30
48885: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
48886: LD_VAR 0 1
48890: PPUSH
48891: CALL_OW 250
48895: PPUSH
48896: LD_VAR 0 1
48900: PPUSH
48901: CALL_OW 251
48905: PPUSH
48906: LD_VAR 0 4
48910: PPUSH
48911: CALL_OW 495
// end ; end ;
48915: LD_VAR 0 2
48919: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
48920: LD_INT 0
48922: PPUSH
// end ;
48923: LD_VAR 0 4
48927: RET
// export function SOS_Command ( cmd ) ; begin
48928: LD_INT 0
48930: PPUSH
// end ;
48931: LD_VAR 0 2
48935: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
48936: LD_INT 0
48938: PPUSH
// if cmd = 121 then
48939: LD_VAR 0 1
48943: PUSH
48944: LD_INT 121
48946: EQUAL
48947: IFFALSE 48949
// end ;
48949: LD_VAR 0 6
48953: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
48954: LD_INT 0
48956: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
48957: LD_VAR 0 1
48961: PUSH
48962: LD_INT 250
48964: EQUAL
48965: PUSH
48966: LD_VAR 0 2
48970: PPUSH
48971: CALL_OW 264
48975: PUSH
48976: LD_EXP 102
48980: EQUAL
48981: AND
48982: IFFALSE 49003
// MinerPlaceMine ( unit , x , y ) ;
48984: LD_VAR 0 2
48988: PPUSH
48989: LD_VAR 0 4
48993: PPUSH
48994: LD_VAR 0 5
48998: PPUSH
48999: CALL 51352 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
49003: LD_VAR 0 1
49007: PUSH
49008: LD_INT 251
49010: EQUAL
49011: PUSH
49012: LD_VAR 0 2
49016: PPUSH
49017: CALL_OW 264
49021: PUSH
49022: LD_EXP 102
49026: EQUAL
49027: AND
49028: IFFALSE 49049
// MinerDetonateMine ( unit , x , y ) ;
49030: LD_VAR 0 2
49034: PPUSH
49035: LD_VAR 0 4
49039: PPUSH
49040: LD_VAR 0 5
49044: PPUSH
49045: CALL 51629 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
49049: LD_VAR 0 1
49053: PUSH
49054: LD_INT 252
49056: EQUAL
49057: PUSH
49058: LD_VAR 0 2
49062: PPUSH
49063: CALL_OW 264
49067: PUSH
49068: LD_EXP 102
49072: EQUAL
49073: AND
49074: IFFALSE 49095
// MinerCreateMinefield ( unit , x , y ) ;
49076: LD_VAR 0 2
49080: PPUSH
49081: LD_VAR 0 4
49085: PPUSH
49086: LD_VAR 0 5
49090: PPUSH
49091: CALL 52046 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
49095: LD_VAR 0 1
49099: PUSH
49100: LD_INT 253
49102: EQUAL
49103: PUSH
49104: LD_VAR 0 2
49108: PPUSH
49109: CALL_OW 257
49113: PUSH
49114: LD_INT 5
49116: EQUAL
49117: AND
49118: IFFALSE 49139
// ComBinocular ( unit , x , y ) ;
49120: LD_VAR 0 2
49124: PPUSH
49125: LD_VAR 0 4
49129: PPUSH
49130: LD_VAR 0 5
49134: PPUSH
49135: CALL 52417 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
49139: LD_VAR 0 1
49143: PUSH
49144: LD_INT 254
49146: EQUAL
49147: PUSH
49148: LD_VAR 0 2
49152: PPUSH
49153: CALL_OW 264
49157: PUSH
49158: LD_EXP 97
49162: EQUAL
49163: AND
49164: PUSH
49165: LD_VAR 0 3
49169: PPUSH
49170: CALL_OW 263
49174: PUSH
49175: LD_INT 3
49177: EQUAL
49178: AND
49179: IFFALSE 49195
// HackDestroyVehicle ( unit , selectedUnit ) ;
49181: LD_VAR 0 2
49185: PPUSH
49186: LD_VAR 0 3
49190: PPUSH
49191: CALL 50712 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
49195: LD_VAR 0 1
49199: PUSH
49200: LD_INT 255
49202: EQUAL
49203: PUSH
49204: LD_VAR 0 2
49208: PPUSH
49209: CALL_OW 264
49213: PUSH
49214: LD_INT 14
49216: PUSH
49217: LD_INT 53
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: IN
49224: AND
49225: PUSH
49226: LD_VAR 0 4
49230: PPUSH
49231: LD_VAR 0 5
49235: PPUSH
49236: CALL_OW 488
49240: AND
49241: IFFALSE 49265
// CutTreeXYR ( unit , x , y , 12 ) ;
49243: LD_VAR 0 2
49247: PPUSH
49248: LD_VAR 0 4
49252: PPUSH
49253: LD_VAR 0 5
49257: PPUSH
49258: LD_INT 12
49260: PPUSH
49261: CALL 49278 0 4
// end ;
49265: LD_VAR 0 6
49269: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
49270: LD_INT 0
49272: PPUSH
// end ;
49273: LD_VAR 0 4
49277: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
49278: LD_INT 0
49280: PPUSH
49281: PPUSH
49282: PPUSH
49283: PPUSH
49284: PPUSH
49285: PPUSH
49286: PPUSH
49287: PPUSH
49288: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
49289: LD_VAR 0 1
49293: NOT
49294: PUSH
49295: LD_VAR 0 2
49299: PPUSH
49300: LD_VAR 0 3
49304: PPUSH
49305: CALL_OW 488
49309: NOT
49310: OR
49311: PUSH
49312: LD_VAR 0 4
49316: NOT
49317: OR
49318: IFFALSE 49322
// exit ;
49320: GO 49662
// list := [ ] ;
49322: LD_ADDR_VAR 0 13
49326: PUSH
49327: EMPTY
49328: ST_TO_ADDR
// if x - r < 0 then
49329: LD_VAR 0 2
49333: PUSH
49334: LD_VAR 0 4
49338: MINUS
49339: PUSH
49340: LD_INT 0
49342: LESS
49343: IFFALSE 49355
// min_x := 0 else
49345: LD_ADDR_VAR 0 7
49349: PUSH
49350: LD_INT 0
49352: ST_TO_ADDR
49353: GO 49371
// min_x := x - r ;
49355: LD_ADDR_VAR 0 7
49359: PUSH
49360: LD_VAR 0 2
49364: PUSH
49365: LD_VAR 0 4
49369: MINUS
49370: ST_TO_ADDR
// if y - r < 0 then
49371: LD_VAR 0 3
49375: PUSH
49376: LD_VAR 0 4
49380: MINUS
49381: PUSH
49382: LD_INT 0
49384: LESS
49385: IFFALSE 49397
// min_y := 0 else
49387: LD_ADDR_VAR 0 8
49391: PUSH
49392: LD_INT 0
49394: ST_TO_ADDR
49395: GO 49413
// min_y := y - r ;
49397: LD_ADDR_VAR 0 8
49401: PUSH
49402: LD_VAR 0 3
49406: PUSH
49407: LD_VAR 0 4
49411: MINUS
49412: ST_TO_ADDR
// max_x := x + r ;
49413: LD_ADDR_VAR 0 9
49417: PUSH
49418: LD_VAR 0 2
49422: PUSH
49423: LD_VAR 0 4
49427: PLUS
49428: ST_TO_ADDR
// max_y := y + r ;
49429: LD_ADDR_VAR 0 10
49433: PUSH
49434: LD_VAR 0 3
49438: PUSH
49439: LD_VAR 0 4
49443: PLUS
49444: ST_TO_ADDR
// for _x = min_x to max_x do
49445: LD_ADDR_VAR 0 11
49449: PUSH
49450: DOUBLE
49451: LD_VAR 0 7
49455: DEC
49456: ST_TO_ADDR
49457: LD_VAR 0 9
49461: PUSH
49462: FOR_TO
49463: IFFALSE 49580
// for _y = min_y to max_y do
49465: LD_ADDR_VAR 0 12
49469: PUSH
49470: DOUBLE
49471: LD_VAR 0 8
49475: DEC
49476: ST_TO_ADDR
49477: LD_VAR 0 10
49481: PUSH
49482: FOR_TO
49483: IFFALSE 49576
// begin if not ValidHex ( _x , _y ) then
49485: LD_VAR 0 11
49489: PPUSH
49490: LD_VAR 0 12
49494: PPUSH
49495: CALL_OW 488
49499: NOT
49500: IFFALSE 49504
// continue ;
49502: GO 49482
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
49504: LD_VAR 0 11
49508: PPUSH
49509: LD_VAR 0 12
49513: PPUSH
49514: CALL_OW 351
49518: PUSH
49519: LD_VAR 0 11
49523: PPUSH
49524: LD_VAR 0 12
49528: PPUSH
49529: CALL_OW 554
49533: AND
49534: IFFALSE 49574
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
49536: LD_ADDR_VAR 0 13
49540: PUSH
49541: LD_VAR 0 13
49545: PPUSH
49546: LD_VAR 0 13
49550: PUSH
49551: LD_INT 1
49553: PLUS
49554: PPUSH
49555: LD_VAR 0 11
49559: PUSH
49560: LD_VAR 0 12
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PPUSH
49569: CALL_OW 2
49573: ST_TO_ADDR
// end ;
49574: GO 49482
49576: POP
49577: POP
49578: GO 49462
49580: POP
49581: POP
// if not list then
49582: LD_VAR 0 13
49586: NOT
49587: IFFALSE 49591
// exit ;
49589: GO 49662
// for i in list do
49591: LD_ADDR_VAR 0 6
49595: PUSH
49596: LD_VAR 0 13
49600: PUSH
49601: FOR_IN
49602: IFFALSE 49660
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
49604: LD_VAR 0 1
49608: PPUSH
49609: LD_STRING M
49611: PUSH
49612: LD_VAR 0 6
49616: PUSH
49617: LD_INT 1
49619: ARRAY
49620: PUSH
49621: LD_VAR 0 6
49625: PUSH
49626: LD_INT 2
49628: ARRAY
49629: PUSH
49630: LD_INT 0
49632: PUSH
49633: LD_INT 0
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: LD_INT 0
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: PUSH
49651: EMPTY
49652: LIST
49653: PPUSH
49654: CALL_OW 447
49658: GO 49601
49660: POP
49661: POP
// end ;
49662: LD_VAR 0 5
49666: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
49667: LD_EXP 30
49671: NOT
49672: IFFALSE 49722
49674: GO 49676
49676: DISABLE
// begin initHack := true ;
49677: LD_ADDR_EXP 30
49681: PUSH
49682: LD_INT 1
49684: ST_TO_ADDR
// hackTanks := [ ] ;
49685: LD_ADDR_EXP 31
49689: PUSH
49690: EMPTY
49691: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
49692: LD_ADDR_EXP 32
49696: PUSH
49697: EMPTY
49698: ST_TO_ADDR
// hackLimit := 3 ;
49699: LD_ADDR_EXP 33
49703: PUSH
49704: LD_INT 3
49706: ST_TO_ADDR
// hackDist := 12 ;
49707: LD_ADDR_EXP 34
49711: PUSH
49712: LD_INT 12
49714: ST_TO_ADDR
// hackCounter := [ ] ;
49715: LD_ADDR_EXP 35
49719: PUSH
49720: EMPTY
49721: ST_TO_ADDR
// end ;
49722: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
49723: LD_EXP 30
49727: PUSH
49728: LD_INT 34
49730: PUSH
49731: LD_EXP 97
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PPUSH
49740: CALL_OW 69
49744: AND
49745: IFFALSE 50000
49747: GO 49749
49749: DISABLE
49750: LD_INT 0
49752: PPUSH
49753: PPUSH
// begin enable ;
49754: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
49755: LD_ADDR_VAR 0 1
49759: PUSH
49760: LD_INT 34
49762: PUSH
49763: LD_EXP 97
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PPUSH
49772: CALL_OW 69
49776: PUSH
49777: FOR_IN
49778: IFFALSE 49998
// begin if not i in hackTanks then
49780: LD_VAR 0 1
49784: PUSH
49785: LD_EXP 31
49789: IN
49790: NOT
49791: IFFALSE 49874
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
49793: LD_ADDR_EXP 31
49797: PUSH
49798: LD_EXP 31
49802: PPUSH
49803: LD_EXP 31
49807: PUSH
49808: LD_INT 1
49810: PLUS
49811: PPUSH
49812: LD_VAR 0 1
49816: PPUSH
49817: CALL_OW 1
49821: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
49822: LD_ADDR_EXP 32
49826: PUSH
49827: LD_EXP 32
49831: PPUSH
49832: LD_EXP 32
49836: PUSH
49837: LD_INT 1
49839: PLUS
49840: PPUSH
49841: EMPTY
49842: PPUSH
49843: CALL_OW 1
49847: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
49848: LD_ADDR_EXP 35
49852: PUSH
49853: LD_EXP 35
49857: PPUSH
49858: LD_EXP 35
49862: PUSH
49863: LD_INT 1
49865: PLUS
49866: PPUSH
49867: EMPTY
49868: PPUSH
49869: CALL_OW 1
49873: ST_TO_ADDR
// end ; if not IsOk ( i ) then
49874: LD_VAR 0 1
49878: PPUSH
49879: CALL_OW 302
49883: NOT
49884: IFFALSE 49897
// begin HackUnlinkAll ( i ) ;
49886: LD_VAR 0 1
49890: PPUSH
49891: CALL 50003 0 1
// continue ;
49895: GO 49777
// end ; HackCheckCapturedStatus ( i ) ;
49897: LD_VAR 0 1
49901: PPUSH
49902: CALL 50446 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
49906: LD_ADDR_VAR 0 2
49910: PUSH
49911: LD_INT 81
49913: PUSH
49914: LD_VAR 0 1
49918: PPUSH
49919: CALL_OW 255
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 33
49930: PUSH
49931: LD_INT 3
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 91
49940: PUSH
49941: LD_VAR 0 1
49945: PUSH
49946: LD_EXP 34
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 50
49958: PUSH
49959: EMPTY
49960: LIST
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: PPUSH
49968: CALL_OW 69
49972: ST_TO_ADDR
// if not tmp then
49973: LD_VAR 0 2
49977: NOT
49978: IFFALSE 49982
// continue ;
49980: GO 49777
// HackLink ( i , tmp ) ;
49982: LD_VAR 0 1
49986: PPUSH
49987: LD_VAR 0 2
49991: PPUSH
49992: CALL 50139 0 2
// end ;
49996: GO 49777
49998: POP
49999: POP
// end ;
50000: PPOPN 2
50002: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
50003: LD_INT 0
50005: PPUSH
50006: PPUSH
50007: PPUSH
// if not hack in hackTanks then
50008: LD_VAR 0 1
50012: PUSH
50013: LD_EXP 31
50017: IN
50018: NOT
50019: IFFALSE 50023
// exit ;
50021: GO 50134
// index := GetElementIndex ( hackTanks , hack ) ;
50023: LD_ADDR_VAR 0 4
50027: PUSH
50028: LD_EXP 31
50032: PPUSH
50033: LD_VAR 0 1
50037: PPUSH
50038: CALL 14556 0 2
50042: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
50043: LD_EXP 32
50047: PUSH
50048: LD_VAR 0 4
50052: ARRAY
50053: IFFALSE 50134
// begin for i in hackTanksCaptured [ index ] do
50055: LD_ADDR_VAR 0 3
50059: PUSH
50060: LD_EXP 32
50064: PUSH
50065: LD_VAR 0 4
50069: ARRAY
50070: PUSH
50071: FOR_IN
50072: IFFALSE 50098
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
50074: LD_VAR 0 3
50078: PUSH
50079: LD_INT 1
50081: ARRAY
50082: PPUSH
50083: LD_VAR 0 3
50087: PUSH
50088: LD_INT 2
50090: ARRAY
50091: PPUSH
50092: CALL_OW 235
50096: GO 50071
50098: POP
50099: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
50100: LD_ADDR_EXP 32
50104: PUSH
50105: LD_EXP 32
50109: PPUSH
50110: LD_VAR 0 4
50114: PPUSH
50115: EMPTY
50116: PPUSH
50117: CALL_OW 1
50121: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
50122: LD_VAR 0 1
50126: PPUSH
50127: LD_INT 0
50129: PPUSH
50130: CALL_OW 505
// end ; end ;
50134: LD_VAR 0 2
50138: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
50139: LD_INT 0
50141: PPUSH
50142: PPUSH
50143: PPUSH
// if not hack in hackTanks or not vehicles then
50144: LD_VAR 0 1
50148: PUSH
50149: LD_EXP 31
50153: IN
50154: NOT
50155: PUSH
50156: LD_VAR 0 2
50160: NOT
50161: OR
50162: IFFALSE 50166
// exit ;
50164: GO 50441
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
50166: LD_ADDR_VAR 0 2
50170: PUSH
50171: LD_VAR 0 1
50175: PPUSH
50176: LD_VAR 0 2
50180: PPUSH
50181: LD_INT 1
50183: PPUSH
50184: LD_INT 1
50186: PPUSH
50187: CALL 15206 0 4
50191: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
50192: LD_ADDR_VAR 0 5
50196: PUSH
50197: LD_EXP 31
50201: PPUSH
50202: LD_VAR 0 1
50206: PPUSH
50207: CALL 14556 0 2
50211: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
50212: LD_EXP 32
50216: PUSH
50217: LD_VAR 0 5
50221: ARRAY
50222: PUSH
50223: LD_EXP 33
50227: LESS
50228: IFFALSE 50417
// begin for i := 1 to vehicles do
50230: LD_ADDR_VAR 0 4
50234: PUSH
50235: DOUBLE
50236: LD_INT 1
50238: DEC
50239: ST_TO_ADDR
50240: LD_VAR 0 2
50244: PUSH
50245: FOR_TO
50246: IFFALSE 50415
// begin if hackTanksCaptured [ index ] = hackLimit then
50248: LD_EXP 32
50252: PUSH
50253: LD_VAR 0 5
50257: ARRAY
50258: PUSH
50259: LD_EXP 33
50263: EQUAL
50264: IFFALSE 50268
// break ;
50266: GO 50415
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
50268: LD_ADDR_EXP 35
50272: PUSH
50273: LD_EXP 35
50277: PPUSH
50278: LD_VAR 0 5
50282: PPUSH
50283: LD_EXP 35
50287: PUSH
50288: LD_VAR 0 5
50292: ARRAY
50293: PUSH
50294: LD_INT 1
50296: PLUS
50297: PPUSH
50298: CALL_OW 1
50302: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
50303: LD_ADDR_EXP 32
50307: PUSH
50308: LD_EXP 32
50312: PPUSH
50313: LD_VAR 0 5
50317: PUSH
50318: LD_EXP 32
50322: PUSH
50323: LD_VAR 0 5
50327: ARRAY
50328: PUSH
50329: LD_INT 1
50331: PLUS
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PPUSH
50337: LD_VAR 0 2
50341: PUSH
50342: LD_VAR 0 4
50346: ARRAY
50347: PUSH
50348: LD_VAR 0 2
50352: PUSH
50353: LD_VAR 0 4
50357: ARRAY
50358: PPUSH
50359: CALL_OW 255
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PPUSH
50368: CALL 14771 0 3
50372: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
50373: LD_VAR 0 2
50377: PUSH
50378: LD_VAR 0 4
50382: ARRAY
50383: PPUSH
50384: LD_VAR 0 1
50388: PPUSH
50389: CALL_OW 255
50393: PPUSH
50394: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
50398: LD_VAR 0 2
50402: PUSH
50403: LD_VAR 0 4
50407: ARRAY
50408: PPUSH
50409: CALL_OW 141
// end ;
50413: GO 50245
50415: POP
50416: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
50417: LD_VAR 0 1
50421: PPUSH
50422: LD_EXP 32
50426: PUSH
50427: LD_VAR 0 5
50431: ARRAY
50432: PUSH
50433: LD_INT 0
50435: PLUS
50436: PPUSH
50437: CALL_OW 505
// end ;
50441: LD_VAR 0 3
50445: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
50446: LD_INT 0
50448: PPUSH
50449: PPUSH
50450: PPUSH
50451: PPUSH
// if not hack in hackTanks then
50452: LD_VAR 0 1
50456: PUSH
50457: LD_EXP 31
50461: IN
50462: NOT
50463: IFFALSE 50467
// exit ;
50465: GO 50707
// index := GetElementIndex ( hackTanks , hack ) ;
50467: LD_ADDR_VAR 0 4
50471: PUSH
50472: LD_EXP 31
50476: PPUSH
50477: LD_VAR 0 1
50481: PPUSH
50482: CALL 14556 0 2
50486: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
50487: LD_ADDR_VAR 0 3
50491: PUSH
50492: DOUBLE
50493: LD_EXP 32
50497: PUSH
50498: LD_VAR 0 4
50502: ARRAY
50503: INC
50504: ST_TO_ADDR
50505: LD_INT 1
50507: PUSH
50508: FOR_DOWNTO
50509: IFFALSE 50681
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
50511: LD_ADDR_VAR 0 5
50515: PUSH
50516: LD_EXP 32
50520: PUSH
50521: LD_VAR 0 4
50525: ARRAY
50526: PUSH
50527: LD_VAR 0 3
50531: ARRAY
50532: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
50533: LD_VAR 0 5
50537: PUSH
50538: LD_INT 1
50540: ARRAY
50541: PPUSH
50542: CALL_OW 302
50546: NOT
50547: PUSH
50548: LD_VAR 0 5
50552: PUSH
50553: LD_INT 1
50555: ARRAY
50556: PPUSH
50557: CALL_OW 255
50561: PUSH
50562: LD_VAR 0 1
50566: PPUSH
50567: CALL_OW 255
50571: NONEQUAL
50572: OR
50573: IFFALSE 50679
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
50575: LD_VAR 0 5
50579: PUSH
50580: LD_INT 1
50582: ARRAY
50583: PPUSH
50584: CALL_OW 305
50588: PUSH
50589: LD_VAR 0 5
50593: PUSH
50594: LD_INT 1
50596: ARRAY
50597: PPUSH
50598: CALL_OW 255
50602: PUSH
50603: LD_VAR 0 1
50607: PPUSH
50608: CALL_OW 255
50612: EQUAL
50613: AND
50614: IFFALSE 50638
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
50616: LD_VAR 0 5
50620: PUSH
50621: LD_INT 1
50623: ARRAY
50624: PPUSH
50625: LD_VAR 0 5
50629: PUSH
50630: LD_INT 2
50632: ARRAY
50633: PPUSH
50634: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
50638: LD_ADDR_EXP 32
50642: PUSH
50643: LD_EXP 32
50647: PPUSH
50648: LD_VAR 0 4
50652: PPUSH
50653: LD_EXP 32
50657: PUSH
50658: LD_VAR 0 4
50662: ARRAY
50663: PPUSH
50664: LD_VAR 0 3
50668: PPUSH
50669: CALL_OW 3
50673: PPUSH
50674: CALL_OW 1
50678: ST_TO_ADDR
// end ; end ;
50679: GO 50508
50681: POP
50682: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
50683: LD_VAR 0 1
50687: PPUSH
50688: LD_EXP 32
50692: PUSH
50693: LD_VAR 0 4
50697: ARRAY
50698: PUSH
50699: LD_INT 0
50701: PLUS
50702: PPUSH
50703: CALL_OW 505
// end ;
50707: LD_VAR 0 2
50711: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
50712: LD_INT 0
50714: PPUSH
50715: PPUSH
50716: PPUSH
50717: PPUSH
// if not hack in hackTanks then
50718: LD_VAR 0 1
50722: PUSH
50723: LD_EXP 31
50727: IN
50728: NOT
50729: IFFALSE 50733
// exit ;
50731: GO 50818
// index := GetElementIndex ( hackTanks , hack ) ;
50733: LD_ADDR_VAR 0 5
50737: PUSH
50738: LD_EXP 31
50742: PPUSH
50743: LD_VAR 0 1
50747: PPUSH
50748: CALL 14556 0 2
50752: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
50753: LD_ADDR_VAR 0 4
50757: PUSH
50758: DOUBLE
50759: LD_INT 1
50761: DEC
50762: ST_TO_ADDR
50763: LD_EXP 32
50767: PUSH
50768: LD_VAR 0 5
50772: ARRAY
50773: PUSH
50774: FOR_TO
50775: IFFALSE 50816
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
50777: LD_EXP 32
50781: PUSH
50782: LD_VAR 0 5
50786: ARRAY
50787: PUSH
50788: LD_VAR 0 4
50792: ARRAY
50793: PUSH
50794: LD_INT 1
50796: ARRAY
50797: PUSH
50798: LD_VAR 0 2
50802: EQUAL
50803: IFFALSE 50814
// KillUnit ( vehicle ) ;
50805: LD_VAR 0 2
50809: PPUSH
50810: CALL_OW 66
50814: GO 50774
50816: POP
50817: POP
// end ;
50818: LD_VAR 0 3
50822: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
50823: LD_EXP 36
50827: NOT
50828: IFFALSE 50863
50830: GO 50832
50832: DISABLE
// begin initMiner := true ;
50833: LD_ADDR_EXP 36
50837: PUSH
50838: LD_INT 1
50840: ST_TO_ADDR
// minersList := [ ] ;
50841: LD_ADDR_EXP 37
50845: PUSH
50846: EMPTY
50847: ST_TO_ADDR
// minerMinesList := [ ] ;
50848: LD_ADDR_EXP 38
50852: PUSH
50853: EMPTY
50854: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
50855: LD_ADDR_EXP 39
50859: PUSH
50860: LD_INT 5
50862: ST_TO_ADDR
// end ;
50863: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
50864: LD_EXP 36
50868: PUSH
50869: LD_INT 34
50871: PUSH
50872: LD_EXP 102
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PPUSH
50881: CALL_OW 69
50885: AND
50886: IFFALSE 51349
50888: GO 50890
50890: DISABLE
50891: LD_INT 0
50893: PPUSH
50894: PPUSH
50895: PPUSH
50896: PPUSH
// begin enable ;
50897: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
50898: LD_ADDR_VAR 0 1
50902: PUSH
50903: LD_INT 34
50905: PUSH
50906: LD_EXP 102
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PPUSH
50915: CALL_OW 69
50919: PUSH
50920: FOR_IN
50921: IFFALSE 50993
// begin if not i in minersList then
50923: LD_VAR 0 1
50927: PUSH
50928: LD_EXP 37
50932: IN
50933: NOT
50934: IFFALSE 50991
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
50936: LD_ADDR_EXP 37
50940: PUSH
50941: LD_EXP 37
50945: PPUSH
50946: LD_EXP 37
50950: PUSH
50951: LD_INT 1
50953: PLUS
50954: PPUSH
50955: LD_VAR 0 1
50959: PPUSH
50960: CALL_OW 1
50964: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
50965: LD_ADDR_EXP 38
50969: PUSH
50970: LD_EXP 38
50974: PPUSH
50975: LD_EXP 38
50979: PUSH
50980: LD_INT 1
50982: PLUS
50983: PPUSH
50984: EMPTY
50985: PPUSH
50986: CALL_OW 1
50990: ST_TO_ADDR
// end end ;
50991: GO 50920
50993: POP
50994: POP
// for i := minerMinesList downto 1 do
50995: LD_ADDR_VAR 0 1
50999: PUSH
51000: DOUBLE
51001: LD_EXP 38
51005: INC
51006: ST_TO_ADDR
51007: LD_INT 1
51009: PUSH
51010: FOR_DOWNTO
51011: IFFALSE 51347
// begin if IsLive ( minersList [ i ] ) then
51013: LD_EXP 37
51017: PUSH
51018: LD_VAR 0 1
51022: ARRAY
51023: PPUSH
51024: CALL_OW 300
51028: IFFALSE 51056
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
51030: LD_EXP 37
51034: PUSH
51035: LD_VAR 0 1
51039: ARRAY
51040: PPUSH
51041: LD_EXP 38
51045: PUSH
51046: LD_VAR 0 1
51050: ARRAY
51051: PPUSH
51052: CALL_OW 505
// if not minerMinesList [ i ] then
51056: LD_EXP 38
51060: PUSH
51061: LD_VAR 0 1
51065: ARRAY
51066: NOT
51067: IFFALSE 51071
// continue ;
51069: GO 51010
// for j := minerMinesList [ i ] downto 1 do
51071: LD_ADDR_VAR 0 2
51075: PUSH
51076: DOUBLE
51077: LD_EXP 38
51081: PUSH
51082: LD_VAR 0 1
51086: ARRAY
51087: INC
51088: ST_TO_ADDR
51089: LD_INT 1
51091: PUSH
51092: FOR_DOWNTO
51093: IFFALSE 51343
// begin side := GetSide ( minersList [ i ] ) ;
51095: LD_ADDR_VAR 0 3
51099: PUSH
51100: LD_EXP 37
51104: PUSH
51105: LD_VAR 0 1
51109: ARRAY
51110: PPUSH
51111: CALL_OW 255
51115: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
51116: LD_ADDR_VAR 0 4
51120: PUSH
51121: LD_EXP 38
51125: PUSH
51126: LD_VAR 0 1
51130: ARRAY
51131: PUSH
51132: LD_VAR 0 2
51136: ARRAY
51137: PUSH
51138: LD_INT 1
51140: ARRAY
51141: PPUSH
51142: LD_EXP 38
51146: PUSH
51147: LD_VAR 0 1
51151: ARRAY
51152: PUSH
51153: LD_VAR 0 2
51157: ARRAY
51158: PUSH
51159: LD_INT 2
51161: ARRAY
51162: PPUSH
51163: CALL_OW 428
51167: ST_TO_ADDR
// if not tmp then
51168: LD_VAR 0 4
51172: NOT
51173: IFFALSE 51177
// continue ;
51175: GO 51092
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
51177: LD_VAR 0 4
51181: PUSH
51182: LD_INT 81
51184: PUSH
51185: LD_VAR 0 3
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PPUSH
51194: CALL_OW 69
51198: IN
51199: PUSH
51200: LD_EXP 38
51204: PUSH
51205: LD_VAR 0 1
51209: ARRAY
51210: PUSH
51211: LD_VAR 0 2
51215: ARRAY
51216: PUSH
51217: LD_INT 1
51219: ARRAY
51220: PPUSH
51221: LD_EXP 38
51225: PUSH
51226: LD_VAR 0 1
51230: ARRAY
51231: PUSH
51232: LD_VAR 0 2
51236: ARRAY
51237: PUSH
51238: LD_INT 2
51240: ARRAY
51241: PPUSH
51242: CALL_OW 458
51246: AND
51247: IFFALSE 51341
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
51249: LD_EXP 38
51253: PUSH
51254: LD_VAR 0 1
51258: ARRAY
51259: PUSH
51260: LD_VAR 0 2
51264: ARRAY
51265: PUSH
51266: LD_INT 1
51268: ARRAY
51269: PPUSH
51270: LD_EXP 38
51274: PUSH
51275: LD_VAR 0 1
51279: ARRAY
51280: PUSH
51281: LD_VAR 0 2
51285: ARRAY
51286: PUSH
51287: LD_INT 2
51289: ARRAY
51290: PPUSH
51291: LD_VAR 0 3
51295: PPUSH
51296: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
51300: LD_ADDR_EXP 38
51304: PUSH
51305: LD_EXP 38
51309: PPUSH
51310: LD_VAR 0 1
51314: PPUSH
51315: LD_EXP 38
51319: PUSH
51320: LD_VAR 0 1
51324: ARRAY
51325: PPUSH
51326: LD_VAR 0 2
51330: PPUSH
51331: CALL_OW 3
51335: PPUSH
51336: CALL_OW 1
51340: ST_TO_ADDR
// end ; end ;
51341: GO 51092
51343: POP
51344: POP
// end ;
51345: GO 51010
51347: POP
51348: POP
// end ;
51349: PPOPN 4
51351: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
51352: LD_INT 0
51354: PPUSH
51355: PPUSH
// result := false ;
51356: LD_ADDR_VAR 0 4
51360: PUSH
51361: LD_INT 0
51363: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
51364: LD_VAR 0 1
51368: PPUSH
51369: CALL_OW 264
51373: PUSH
51374: LD_EXP 102
51378: EQUAL
51379: NOT
51380: IFFALSE 51384
// exit ;
51382: GO 51624
// index := GetElementIndex ( minersList , unit ) ;
51384: LD_ADDR_VAR 0 5
51388: PUSH
51389: LD_EXP 37
51393: PPUSH
51394: LD_VAR 0 1
51398: PPUSH
51399: CALL 14556 0 2
51403: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
51404: LD_EXP 38
51408: PUSH
51409: LD_VAR 0 5
51413: ARRAY
51414: PUSH
51415: LD_EXP 39
51419: GREATEREQUAL
51420: IFFALSE 51424
// exit ;
51422: GO 51624
// ComMoveXY ( unit , x , y ) ;
51424: LD_VAR 0 1
51428: PPUSH
51429: LD_VAR 0 2
51433: PPUSH
51434: LD_VAR 0 3
51438: PPUSH
51439: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
51443: LD_INT 35
51445: PPUSH
51446: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
51450: LD_VAR 0 1
51454: PPUSH
51455: LD_VAR 0 2
51459: PPUSH
51460: LD_VAR 0 3
51464: PPUSH
51465: CALL 45328 0 3
51469: NOT
51470: PUSH
51471: LD_VAR 0 1
51475: PPUSH
51476: CALL_OW 314
51480: AND
51481: IFFALSE 51485
// exit ;
51483: GO 51624
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
51485: LD_VAR 0 2
51489: PPUSH
51490: LD_VAR 0 3
51494: PPUSH
51495: CALL_OW 428
51499: PUSH
51500: LD_VAR 0 1
51504: EQUAL
51505: PUSH
51506: LD_VAR 0 1
51510: PPUSH
51511: CALL_OW 314
51515: NOT
51516: AND
51517: IFFALSE 51443
// PlaySoundXY ( x , y , PlantMine ) ;
51519: LD_VAR 0 2
51523: PPUSH
51524: LD_VAR 0 3
51528: PPUSH
51529: LD_STRING PlantMine
51531: PPUSH
51532: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
51536: LD_VAR 0 2
51540: PPUSH
51541: LD_VAR 0 3
51545: PPUSH
51546: LD_VAR 0 1
51550: PPUSH
51551: CALL_OW 255
51555: PPUSH
51556: LD_INT 0
51558: PPUSH
51559: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
51563: LD_ADDR_EXP 38
51567: PUSH
51568: LD_EXP 38
51572: PPUSH
51573: LD_VAR 0 5
51577: PUSH
51578: LD_EXP 38
51582: PUSH
51583: LD_VAR 0 5
51587: ARRAY
51588: PUSH
51589: LD_INT 1
51591: PLUS
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PPUSH
51597: LD_VAR 0 2
51601: PUSH
51602: LD_VAR 0 3
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PPUSH
51611: CALL 14771 0 3
51615: ST_TO_ADDR
// result := true ;
51616: LD_ADDR_VAR 0 4
51620: PUSH
51621: LD_INT 1
51623: ST_TO_ADDR
// end ;
51624: LD_VAR 0 4
51628: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
51629: LD_INT 0
51631: PPUSH
51632: PPUSH
51633: PPUSH
// if not unit in minersList then
51634: LD_VAR 0 1
51638: PUSH
51639: LD_EXP 37
51643: IN
51644: NOT
51645: IFFALSE 51649
// exit ;
51647: GO 52041
// index := GetElementIndex ( minersList , unit ) ;
51649: LD_ADDR_VAR 0 6
51653: PUSH
51654: LD_EXP 37
51658: PPUSH
51659: LD_VAR 0 1
51663: PPUSH
51664: CALL 14556 0 2
51668: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
51669: LD_ADDR_VAR 0 5
51673: PUSH
51674: DOUBLE
51675: LD_EXP 38
51679: PUSH
51680: LD_VAR 0 6
51684: ARRAY
51685: INC
51686: ST_TO_ADDR
51687: LD_INT 1
51689: PUSH
51690: FOR_DOWNTO
51691: IFFALSE 51852
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
51693: LD_EXP 38
51697: PUSH
51698: LD_VAR 0 6
51702: ARRAY
51703: PUSH
51704: LD_VAR 0 5
51708: ARRAY
51709: PUSH
51710: LD_INT 1
51712: ARRAY
51713: PUSH
51714: LD_VAR 0 2
51718: EQUAL
51719: PUSH
51720: LD_EXP 38
51724: PUSH
51725: LD_VAR 0 6
51729: ARRAY
51730: PUSH
51731: LD_VAR 0 5
51735: ARRAY
51736: PUSH
51737: LD_INT 2
51739: ARRAY
51740: PUSH
51741: LD_VAR 0 3
51745: EQUAL
51746: AND
51747: IFFALSE 51850
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
51749: LD_EXP 38
51753: PUSH
51754: LD_VAR 0 6
51758: ARRAY
51759: PUSH
51760: LD_VAR 0 5
51764: ARRAY
51765: PUSH
51766: LD_INT 1
51768: ARRAY
51769: PPUSH
51770: LD_EXP 38
51774: PUSH
51775: LD_VAR 0 6
51779: ARRAY
51780: PUSH
51781: LD_VAR 0 5
51785: ARRAY
51786: PUSH
51787: LD_INT 2
51789: ARRAY
51790: PPUSH
51791: LD_VAR 0 1
51795: PPUSH
51796: CALL_OW 255
51800: PPUSH
51801: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
51805: LD_ADDR_EXP 38
51809: PUSH
51810: LD_EXP 38
51814: PPUSH
51815: LD_VAR 0 6
51819: PPUSH
51820: LD_EXP 38
51824: PUSH
51825: LD_VAR 0 6
51829: ARRAY
51830: PPUSH
51831: LD_VAR 0 5
51835: PPUSH
51836: CALL_OW 3
51840: PPUSH
51841: CALL_OW 1
51845: ST_TO_ADDR
// exit ;
51846: POP
51847: POP
51848: GO 52041
// end ; end ;
51850: GO 51690
51852: POP
51853: POP
// for i := minerMinesList [ index ] downto 1 do
51854: LD_ADDR_VAR 0 5
51858: PUSH
51859: DOUBLE
51860: LD_EXP 38
51864: PUSH
51865: LD_VAR 0 6
51869: ARRAY
51870: INC
51871: ST_TO_ADDR
51872: LD_INT 1
51874: PUSH
51875: FOR_DOWNTO
51876: IFFALSE 52039
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
51878: LD_EXP 38
51882: PUSH
51883: LD_VAR 0 6
51887: ARRAY
51888: PUSH
51889: LD_VAR 0 5
51893: ARRAY
51894: PUSH
51895: LD_INT 1
51897: ARRAY
51898: PPUSH
51899: LD_EXP 38
51903: PUSH
51904: LD_VAR 0 6
51908: ARRAY
51909: PUSH
51910: LD_VAR 0 5
51914: ARRAY
51915: PUSH
51916: LD_INT 2
51918: ARRAY
51919: PPUSH
51920: LD_VAR 0 2
51924: PPUSH
51925: LD_VAR 0 3
51929: PPUSH
51930: CALL_OW 298
51934: PUSH
51935: LD_INT 6
51937: LESS
51938: IFFALSE 52037
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
51940: LD_EXP 38
51944: PUSH
51945: LD_VAR 0 6
51949: ARRAY
51950: PUSH
51951: LD_VAR 0 5
51955: ARRAY
51956: PUSH
51957: LD_INT 1
51959: ARRAY
51960: PPUSH
51961: LD_EXP 38
51965: PUSH
51966: LD_VAR 0 6
51970: ARRAY
51971: PUSH
51972: LD_VAR 0 5
51976: ARRAY
51977: PUSH
51978: LD_INT 2
51980: ARRAY
51981: PPUSH
51982: LD_VAR 0 1
51986: PPUSH
51987: CALL_OW 255
51991: PPUSH
51992: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
51996: LD_ADDR_EXP 38
52000: PUSH
52001: LD_EXP 38
52005: PPUSH
52006: LD_VAR 0 6
52010: PPUSH
52011: LD_EXP 38
52015: PUSH
52016: LD_VAR 0 6
52020: ARRAY
52021: PPUSH
52022: LD_VAR 0 5
52026: PPUSH
52027: CALL_OW 3
52031: PPUSH
52032: CALL_OW 1
52036: ST_TO_ADDR
// end ; end ;
52037: GO 51875
52039: POP
52040: POP
// end ;
52041: LD_VAR 0 4
52045: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
52046: LD_INT 0
52048: PPUSH
52049: PPUSH
52050: PPUSH
52051: PPUSH
52052: PPUSH
52053: PPUSH
52054: PPUSH
52055: PPUSH
52056: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
52057: LD_VAR 0 1
52061: PPUSH
52062: CALL_OW 264
52066: PUSH
52067: LD_EXP 102
52071: EQUAL
52072: NOT
52073: PUSH
52074: LD_VAR 0 1
52078: PUSH
52079: LD_EXP 37
52083: IN
52084: NOT
52085: OR
52086: IFFALSE 52090
// exit ;
52088: GO 52412
// index := GetElementIndex ( minersList , unit ) ;
52090: LD_ADDR_VAR 0 6
52094: PUSH
52095: LD_EXP 37
52099: PPUSH
52100: LD_VAR 0 1
52104: PPUSH
52105: CALL 14556 0 2
52109: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
52110: LD_ADDR_VAR 0 8
52114: PUSH
52115: LD_EXP 39
52119: PUSH
52120: LD_EXP 38
52124: PUSH
52125: LD_VAR 0 6
52129: ARRAY
52130: MINUS
52131: ST_TO_ADDR
// if not minesFreeAmount then
52132: LD_VAR 0 8
52136: NOT
52137: IFFALSE 52141
// exit ;
52139: GO 52412
// tmp := [ ] ;
52141: LD_ADDR_VAR 0 7
52145: PUSH
52146: EMPTY
52147: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
52148: LD_ADDR_VAR 0 5
52152: PUSH
52153: DOUBLE
52154: LD_INT 1
52156: DEC
52157: ST_TO_ADDR
52158: LD_VAR 0 8
52162: PUSH
52163: FOR_TO
52164: IFFALSE 52359
// begin _d := rand ( 0 , 5 ) ;
52166: LD_ADDR_VAR 0 11
52170: PUSH
52171: LD_INT 0
52173: PPUSH
52174: LD_INT 5
52176: PPUSH
52177: CALL_OW 12
52181: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
52182: LD_ADDR_VAR 0 12
52186: PUSH
52187: LD_INT 2
52189: PPUSH
52190: LD_INT 6
52192: PPUSH
52193: CALL_OW 12
52197: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
52198: LD_ADDR_VAR 0 9
52202: PUSH
52203: LD_VAR 0 2
52207: PPUSH
52208: LD_VAR 0 11
52212: PPUSH
52213: LD_VAR 0 12
52217: PPUSH
52218: CALL_OW 272
52222: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
52223: LD_ADDR_VAR 0 10
52227: PUSH
52228: LD_VAR 0 3
52232: PPUSH
52233: LD_VAR 0 11
52237: PPUSH
52238: LD_VAR 0 12
52242: PPUSH
52243: CALL_OW 273
52247: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
52248: LD_VAR 0 9
52252: PPUSH
52253: LD_VAR 0 10
52257: PPUSH
52258: CALL_OW 488
52262: PUSH
52263: LD_VAR 0 9
52267: PUSH
52268: LD_VAR 0 10
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_VAR 0 7
52281: IN
52282: NOT
52283: AND
52284: PUSH
52285: LD_VAR 0 9
52289: PPUSH
52290: LD_VAR 0 10
52294: PPUSH
52295: CALL_OW 458
52299: NOT
52300: AND
52301: IFFALSE 52343
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
52303: LD_ADDR_VAR 0 7
52307: PUSH
52308: LD_VAR 0 7
52312: PPUSH
52313: LD_VAR 0 7
52317: PUSH
52318: LD_INT 1
52320: PLUS
52321: PPUSH
52322: LD_VAR 0 9
52326: PUSH
52327: LD_VAR 0 10
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PPUSH
52336: CALL_OW 1
52340: ST_TO_ADDR
52341: GO 52357
// i := i - 1 ;
52343: LD_ADDR_VAR 0 5
52347: PUSH
52348: LD_VAR 0 5
52352: PUSH
52353: LD_INT 1
52355: MINUS
52356: ST_TO_ADDR
// end ;
52357: GO 52163
52359: POP
52360: POP
// for i in tmp do
52361: LD_ADDR_VAR 0 5
52365: PUSH
52366: LD_VAR 0 7
52370: PUSH
52371: FOR_IN
52372: IFFALSE 52410
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
52374: LD_VAR 0 1
52378: PPUSH
52379: LD_VAR 0 5
52383: PUSH
52384: LD_INT 1
52386: ARRAY
52387: PPUSH
52388: LD_VAR 0 5
52392: PUSH
52393: LD_INT 2
52395: ARRAY
52396: PPUSH
52397: CALL 51352 0 3
52401: NOT
52402: IFFALSE 52408
// exit ;
52404: POP
52405: POP
52406: GO 52412
52408: GO 52371
52410: POP
52411: POP
// end ;
52412: LD_VAR 0 4
52416: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
52417: LD_INT 0
52419: PPUSH
52420: PPUSH
52421: PPUSH
52422: PPUSH
52423: PPUSH
52424: PPUSH
52425: PPUSH
// if not GetClass ( unit ) = class_sniper then
52426: LD_VAR 0 1
52430: PPUSH
52431: CALL_OW 257
52435: PUSH
52436: LD_INT 5
52438: EQUAL
52439: NOT
52440: IFFALSE 52444
// exit ;
52442: GO 52832
// dist := 8 ;
52444: LD_ADDR_VAR 0 5
52448: PUSH
52449: LD_INT 8
52451: ST_TO_ADDR
// viewRange := 12 ;
52452: LD_ADDR_VAR 0 7
52456: PUSH
52457: LD_INT 12
52459: ST_TO_ADDR
// side := GetSide ( unit ) ;
52460: LD_ADDR_VAR 0 6
52464: PUSH
52465: LD_VAR 0 1
52469: PPUSH
52470: CALL_OW 255
52474: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
52475: LD_INT 61
52477: PPUSH
52478: LD_VAR 0 6
52482: PPUSH
52483: CALL_OW 321
52487: PUSH
52488: LD_INT 2
52490: EQUAL
52491: IFFALSE 52501
// viewRange := 16 ;
52493: LD_ADDR_VAR 0 7
52497: PUSH
52498: LD_INT 16
52500: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
52501: LD_VAR 0 1
52505: PPUSH
52506: LD_VAR 0 2
52510: PPUSH
52511: LD_VAR 0 3
52515: PPUSH
52516: CALL_OW 297
52520: PUSH
52521: LD_VAR 0 5
52525: GREATER
52526: IFFALSE 52605
// begin ComMoveXY ( unit , x , y ) ;
52528: LD_VAR 0 1
52532: PPUSH
52533: LD_VAR 0 2
52537: PPUSH
52538: LD_VAR 0 3
52542: PPUSH
52543: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
52547: LD_INT 35
52549: PPUSH
52550: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
52554: LD_VAR 0 1
52558: PPUSH
52559: LD_VAR 0 2
52563: PPUSH
52564: LD_VAR 0 3
52568: PPUSH
52569: CALL 45328 0 3
52573: NOT
52574: IFFALSE 52578
// exit ;
52576: GO 52832
// until GetDistUnitXY ( unit , x , y ) < dist ;
52578: LD_VAR 0 1
52582: PPUSH
52583: LD_VAR 0 2
52587: PPUSH
52588: LD_VAR 0 3
52592: PPUSH
52593: CALL_OW 297
52597: PUSH
52598: LD_VAR 0 5
52602: LESS
52603: IFFALSE 52547
// end ; ComTurnXY ( unit , x , y ) ;
52605: LD_VAR 0 1
52609: PPUSH
52610: LD_VAR 0 2
52614: PPUSH
52615: LD_VAR 0 3
52619: PPUSH
52620: CALL_OW 118
// wait ( 5 ) ;
52624: LD_INT 5
52626: PPUSH
52627: CALL_OW 67
// _d := GetDir ( unit ) ;
52631: LD_ADDR_VAR 0 10
52635: PUSH
52636: LD_VAR 0 1
52640: PPUSH
52641: CALL_OW 254
52645: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
52646: LD_ADDR_VAR 0 8
52650: PUSH
52651: LD_VAR 0 1
52655: PPUSH
52656: CALL_OW 250
52660: PPUSH
52661: LD_VAR 0 10
52665: PPUSH
52666: LD_VAR 0 5
52670: PPUSH
52671: CALL_OW 272
52675: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
52676: LD_ADDR_VAR 0 9
52680: PUSH
52681: LD_VAR 0 1
52685: PPUSH
52686: CALL_OW 251
52690: PPUSH
52691: LD_VAR 0 10
52695: PPUSH
52696: LD_VAR 0 5
52700: PPUSH
52701: CALL_OW 273
52705: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
52706: LD_VAR 0 8
52710: PPUSH
52711: LD_VAR 0 9
52715: PPUSH
52716: CALL_OW 488
52720: NOT
52721: IFFALSE 52725
// exit ;
52723: GO 52832
// ComAnimCustom ( unit , 1 ) ;
52725: LD_VAR 0 1
52729: PPUSH
52730: LD_INT 1
52732: PPUSH
52733: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
52737: LD_VAR 0 8
52741: PPUSH
52742: LD_VAR 0 9
52746: PPUSH
52747: LD_VAR 0 6
52751: PPUSH
52752: LD_VAR 0 7
52756: PPUSH
52757: CALL_OW 330
// repeat wait ( 1 ) ;
52761: LD_INT 1
52763: PPUSH
52764: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
52768: LD_VAR 0 1
52772: PPUSH
52773: CALL_OW 316
52777: PUSH
52778: LD_VAR 0 1
52782: PPUSH
52783: CALL_OW 314
52787: OR
52788: PUSH
52789: LD_VAR 0 1
52793: PPUSH
52794: CALL_OW 302
52798: NOT
52799: OR
52800: PUSH
52801: LD_VAR 0 1
52805: PPUSH
52806: CALL_OW 301
52810: OR
52811: IFFALSE 52761
// RemoveSeeing ( _x , _y , side ) ;
52813: LD_VAR 0 8
52817: PPUSH
52818: LD_VAR 0 9
52822: PPUSH
52823: LD_VAR 0 6
52827: PPUSH
52828: CALL_OW 331
// end ; end_of_file
52832: LD_VAR 0 4
52836: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
52837: LD_INT 0
52839: PPUSH
// if p2 = 100 then
52840: LD_VAR 0 2
52844: PUSH
52845: LD_INT 100
52847: EQUAL
52848: IFFALSE 53797
// begin if not StreamModeActive then
52850: LD_EXP 40
52854: NOT
52855: IFFALSE 52865
// StreamModeActive := true ;
52857: LD_ADDR_EXP 40
52861: PUSH
52862: LD_INT 1
52864: ST_TO_ADDR
// if p3 = 0 then
52865: LD_VAR 0 3
52869: PUSH
52870: LD_INT 0
52872: EQUAL
52873: IFFALSE 52879
// InitStreamMode ;
52875: CALL 53957 0 0
// if p3 = 1 then
52879: LD_VAR 0 3
52883: PUSH
52884: LD_INT 1
52886: EQUAL
52887: IFFALSE 52897
// sRocket := true ;
52889: LD_ADDR_EXP 45
52893: PUSH
52894: LD_INT 1
52896: ST_TO_ADDR
// if p3 = 2 then
52897: LD_VAR 0 3
52901: PUSH
52902: LD_INT 2
52904: EQUAL
52905: IFFALSE 52915
// sSpeed := true ;
52907: LD_ADDR_EXP 44
52911: PUSH
52912: LD_INT 1
52914: ST_TO_ADDR
// if p3 = 3 then
52915: LD_VAR 0 3
52919: PUSH
52920: LD_INT 3
52922: EQUAL
52923: IFFALSE 52933
// sEngine := true ;
52925: LD_ADDR_EXP 46
52929: PUSH
52930: LD_INT 1
52932: ST_TO_ADDR
// if p3 = 4 then
52933: LD_VAR 0 3
52937: PUSH
52938: LD_INT 4
52940: EQUAL
52941: IFFALSE 52951
// sSpec := true ;
52943: LD_ADDR_EXP 43
52947: PUSH
52948: LD_INT 1
52950: ST_TO_ADDR
// if p3 = 5 then
52951: LD_VAR 0 3
52955: PUSH
52956: LD_INT 5
52958: EQUAL
52959: IFFALSE 52969
// sLevel := true ;
52961: LD_ADDR_EXP 47
52965: PUSH
52966: LD_INT 1
52968: ST_TO_ADDR
// if p3 = 6 then
52969: LD_VAR 0 3
52973: PUSH
52974: LD_INT 6
52976: EQUAL
52977: IFFALSE 52987
// sArmoury := true ;
52979: LD_ADDR_EXP 48
52983: PUSH
52984: LD_INT 1
52986: ST_TO_ADDR
// if p3 = 7 then
52987: LD_VAR 0 3
52991: PUSH
52992: LD_INT 7
52994: EQUAL
52995: IFFALSE 53005
// sRadar := true ;
52997: LD_ADDR_EXP 49
53001: PUSH
53002: LD_INT 1
53004: ST_TO_ADDR
// if p3 = 8 then
53005: LD_VAR 0 3
53009: PUSH
53010: LD_INT 8
53012: EQUAL
53013: IFFALSE 53023
// sBunker := true ;
53015: LD_ADDR_EXP 50
53019: PUSH
53020: LD_INT 1
53022: ST_TO_ADDR
// if p3 = 9 then
53023: LD_VAR 0 3
53027: PUSH
53028: LD_INT 9
53030: EQUAL
53031: IFFALSE 53041
// sHack := true ;
53033: LD_ADDR_EXP 51
53037: PUSH
53038: LD_INT 1
53040: ST_TO_ADDR
// if p3 = 10 then
53041: LD_VAR 0 3
53045: PUSH
53046: LD_INT 10
53048: EQUAL
53049: IFFALSE 53059
// sFire := true ;
53051: LD_ADDR_EXP 52
53055: PUSH
53056: LD_INT 1
53058: ST_TO_ADDR
// if p3 = 11 then
53059: LD_VAR 0 3
53063: PUSH
53064: LD_INT 11
53066: EQUAL
53067: IFFALSE 53077
// sRefresh := true ;
53069: LD_ADDR_EXP 53
53073: PUSH
53074: LD_INT 1
53076: ST_TO_ADDR
// if p3 = 12 then
53077: LD_VAR 0 3
53081: PUSH
53082: LD_INT 12
53084: EQUAL
53085: IFFALSE 53095
// sExp := true ;
53087: LD_ADDR_EXP 54
53091: PUSH
53092: LD_INT 1
53094: ST_TO_ADDR
// if p3 = 13 then
53095: LD_VAR 0 3
53099: PUSH
53100: LD_INT 13
53102: EQUAL
53103: IFFALSE 53113
// sDepot := true ;
53105: LD_ADDR_EXP 55
53109: PUSH
53110: LD_INT 1
53112: ST_TO_ADDR
// if p3 = 14 then
53113: LD_VAR 0 3
53117: PUSH
53118: LD_INT 14
53120: EQUAL
53121: IFFALSE 53131
// sFlag := true ;
53123: LD_ADDR_EXP 56
53127: PUSH
53128: LD_INT 1
53130: ST_TO_ADDR
// if p3 = 15 then
53131: LD_VAR 0 3
53135: PUSH
53136: LD_INT 15
53138: EQUAL
53139: IFFALSE 53149
// sKamikadze := true ;
53141: LD_ADDR_EXP 64
53145: PUSH
53146: LD_INT 1
53148: ST_TO_ADDR
// if p3 = 16 then
53149: LD_VAR 0 3
53153: PUSH
53154: LD_INT 16
53156: EQUAL
53157: IFFALSE 53167
// sTroll := true ;
53159: LD_ADDR_EXP 65
53163: PUSH
53164: LD_INT 1
53166: ST_TO_ADDR
// if p3 = 17 then
53167: LD_VAR 0 3
53171: PUSH
53172: LD_INT 17
53174: EQUAL
53175: IFFALSE 53185
// sSlow := true ;
53177: LD_ADDR_EXP 66
53181: PUSH
53182: LD_INT 1
53184: ST_TO_ADDR
// if p3 = 18 then
53185: LD_VAR 0 3
53189: PUSH
53190: LD_INT 18
53192: EQUAL
53193: IFFALSE 53203
// sLack := true ;
53195: LD_ADDR_EXP 67
53199: PUSH
53200: LD_INT 1
53202: ST_TO_ADDR
// if p3 = 19 then
53203: LD_VAR 0 3
53207: PUSH
53208: LD_INT 19
53210: EQUAL
53211: IFFALSE 53221
// sTank := true ;
53213: LD_ADDR_EXP 69
53217: PUSH
53218: LD_INT 1
53220: ST_TO_ADDR
// if p3 = 20 then
53221: LD_VAR 0 3
53225: PUSH
53226: LD_INT 20
53228: EQUAL
53229: IFFALSE 53239
// sRemote := true ;
53231: LD_ADDR_EXP 70
53235: PUSH
53236: LD_INT 1
53238: ST_TO_ADDR
// if p3 = 21 then
53239: LD_VAR 0 3
53243: PUSH
53244: LD_INT 21
53246: EQUAL
53247: IFFALSE 53257
// sPowell := true ;
53249: LD_ADDR_EXP 71
53253: PUSH
53254: LD_INT 1
53256: ST_TO_ADDR
// if p3 = 22 then
53257: LD_VAR 0 3
53261: PUSH
53262: LD_INT 22
53264: EQUAL
53265: IFFALSE 53275
// sTeleport := true ;
53267: LD_ADDR_EXP 74
53271: PUSH
53272: LD_INT 1
53274: ST_TO_ADDR
// if p3 = 23 then
53275: LD_VAR 0 3
53279: PUSH
53280: LD_INT 23
53282: EQUAL
53283: IFFALSE 53293
// sOilTower := true ;
53285: LD_ADDR_EXP 76
53289: PUSH
53290: LD_INT 1
53292: ST_TO_ADDR
// if p3 = 24 then
53293: LD_VAR 0 3
53297: PUSH
53298: LD_INT 24
53300: EQUAL
53301: IFFALSE 53311
// sShovel := true ;
53303: LD_ADDR_EXP 77
53307: PUSH
53308: LD_INT 1
53310: ST_TO_ADDR
// if p3 = 25 then
53311: LD_VAR 0 3
53315: PUSH
53316: LD_INT 25
53318: EQUAL
53319: IFFALSE 53329
// sSheik := true ;
53321: LD_ADDR_EXP 78
53325: PUSH
53326: LD_INT 1
53328: ST_TO_ADDR
// if p3 = 26 then
53329: LD_VAR 0 3
53333: PUSH
53334: LD_INT 26
53336: EQUAL
53337: IFFALSE 53347
// sEarthquake := true ;
53339: LD_ADDR_EXP 80
53343: PUSH
53344: LD_INT 1
53346: ST_TO_ADDR
// if p3 = 27 then
53347: LD_VAR 0 3
53351: PUSH
53352: LD_INT 27
53354: EQUAL
53355: IFFALSE 53365
// sAI := true ;
53357: LD_ADDR_EXP 81
53361: PUSH
53362: LD_INT 1
53364: ST_TO_ADDR
// if p3 = 28 then
53365: LD_VAR 0 3
53369: PUSH
53370: LD_INT 28
53372: EQUAL
53373: IFFALSE 53383
// sCargo := true ;
53375: LD_ADDR_EXP 84
53379: PUSH
53380: LD_INT 1
53382: ST_TO_ADDR
// if p3 = 29 then
53383: LD_VAR 0 3
53387: PUSH
53388: LD_INT 29
53390: EQUAL
53391: IFFALSE 53401
// sDLaser := true ;
53393: LD_ADDR_EXP 85
53397: PUSH
53398: LD_INT 1
53400: ST_TO_ADDR
// if p3 = 30 then
53401: LD_VAR 0 3
53405: PUSH
53406: LD_INT 30
53408: EQUAL
53409: IFFALSE 53419
// sExchange := true ;
53411: LD_ADDR_EXP 86
53415: PUSH
53416: LD_INT 1
53418: ST_TO_ADDR
// if p3 = 31 then
53419: LD_VAR 0 3
53423: PUSH
53424: LD_INT 31
53426: EQUAL
53427: IFFALSE 53437
// sFac := true ;
53429: LD_ADDR_EXP 87
53433: PUSH
53434: LD_INT 1
53436: ST_TO_ADDR
// if p3 = 32 then
53437: LD_VAR 0 3
53441: PUSH
53442: LD_INT 32
53444: EQUAL
53445: IFFALSE 53455
// sPower := true ;
53447: LD_ADDR_EXP 88
53451: PUSH
53452: LD_INT 1
53454: ST_TO_ADDR
// if p3 = 33 then
53455: LD_VAR 0 3
53459: PUSH
53460: LD_INT 33
53462: EQUAL
53463: IFFALSE 53473
// sRandom := true ;
53465: LD_ADDR_EXP 89
53469: PUSH
53470: LD_INT 1
53472: ST_TO_ADDR
// if p3 = 34 then
53473: LD_VAR 0 3
53477: PUSH
53478: LD_INT 34
53480: EQUAL
53481: IFFALSE 53491
// sShield := true ;
53483: LD_ADDR_EXP 90
53487: PUSH
53488: LD_INT 1
53490: ST_TO_ADDR
// if p3 = 35 then
53491: LD_VAR 0 3
53495: PUSH
53496: LD_INT 35
53498: EQUAL
53499: IFFALSE 53509
// sTime := true ;
53501: LD_ADDR_EXP 91
53505: PUSH
53506: LD_INT 1
53508: ST_TO_ADDR
// if p3 = 36 then
53509: LD_VAR 0 3
53513: PUSH
53514: LD_INT 36
53516: EQUAL
53517: IFFALSE 53527
// sTools := true ;
53519: LD_ADDR_EXP 92
53523: PUSH
53524: LD_INT 1
53526: ST_TO_ADDR
// if p3 = 101 then
53527: LD_VAR 0 3
53531: PUSH
53532: LD_INT 101
53534: EQUAL
53535: IFFALSE 53545
// sSold := true ;
53537: LD_ADDR_EXP 57
53541: PUSH
53542: LD_INT 1
53544: ST_TO_ADDR
// if p3 = 102 then
53545: LD_VAR 0 3
53549: PUSH
53550: LD_INT 102
53552: EQUAL
53553: IFFALSE 53563
// sDiff := true ;
53555: LD_ADDR_EXP 58
53559: PUSH
53560: LD_INT 1
53562: ST_TO_ADDR
// if p3 = 103 then
53563: LD_VAR 0 3
53567: PUSH
53568: LD_INT 103
53570: EQUAL
53571: IFFALSE 53581
// sFog := true ;
53573: LD_ADDR_EXP 61
53577: PUSH
53578: LD_INT 1
53580: ST_TO_ADDR
// if p3 = 104 then
53581: LD_VAR 0 3
53585: PUSH
53586: LD_INT 104
53588: EQUAL
53589: IFFALSE 53599
// sReset := true ;
53591: LD_ADDR_EXP 62
53595: PUSH
53596: LD_INT 1
53598: ST_TO_ADDR
// if p3 = 105 then
53599: LD_VAR 0 3
53603: PUSH
53604: LD_INT 105
53606: EQUAL
53607: IFFALSE 53617
// sSun := true ;
53609: LD_ADDR_EXP 63
53613: PUSH
53614: LD_INT 1
53616: ST_TO_ADDR
// if p3 = 106 then
53617: LD_VAR 0 3
53621: PUSH
53622: LD_INT 106
53624: EQUAL
53625: IFFALSE 53635
// sTiger := true ;
53627: LD_ADDR_EXP 59
53631: PUSH
53632: LD_INT 1
53634: ST_TO_ADDR
// if p3 = 107 then
53635: LD_VAR 0 3
53639: PUSH
53640: LD_INT 107
53642: EQUAL
53643: IFFALSE 53653
// sBomb := true ;
53645: LD_ADDR_EXP 60
53649: PUSH
53650: LD_INT 1
53652: ST_TO_ADDR
// if p3 = 108 then
53653: LD_VAR 0 3
53657: PUSH
53658: LD_INT 108
53660: EQUAL
53661: IFFALSE 53671
// sWound := true ;
53663: LD_ADDR_EXP 68
53667: PUSH
53668: LD_INT 1
53670: ST_TO_ADDR
// if p3 = 109 then
53671: LD_VAR 0 3
53675: PUSH
53676: LD_INT 109
53678: EQUAL
53679: IFFALSE 53689
// sBetray := true ;
53681: LD_ADDR_EXP 72
53685: PUSH
53686: LD_INT 1
53688: ST_TO_ADDR
// if p3 = 110 then
53689: LD_VAR 0 3
53693: PUSH
53694: LD_INT 110
53696: EQUAL
53697: IFFALSE 53707
// sContamin := true ;
53699: LD_ADDR_EXP 73
53703: PUSH
53704: LD_INT 1
53706: ST_TO_ADDR
// if p3 = 111 then
53707: LD_VAR 0 3
53711: PUSH
53712: LD_INT 111
53714: EQUAL
53715: IFFALSE 53725
// sOil := true ;
53717: LD_ADDR_EXP 75
53721: PUSH
53722: LD_INT 1
53724: ST_TO_ADDR
// if p3 = 112 then
53725: LD_VAR 0 3
53729: PUSH
53730: LD_INT 112
53732: EQUAL
53733: IFFALSE 53743
// sStu := true ;
53735: LD_ADDR_EXP 79
53739: PUSH
53740: LD_INT 1
53742: ST_TO_ADDR
// if p3 = 113 then
53743: LD_VAR 0 3
53747: PUSH
53748: LD_INT 113
53750: EQUAL
53751: IFFALSE 53761
// sBazooka := true ;
53753: LD_ADDR_EXP 82
53757: PUSH
53758: LD_INT 1
53760: ST_TO_ADDR
// if p3 = 114 then
53761: LD_VAR 0 3
53765: PUSH
53766: LD_INT 114
53768: EQUAL
53769: IFFALSE 53779
// sMortar := true ;
53771: LD_ADDR_EXP 83
53775: PUSH
53776: LD_INT 1
53778: ST_TO_ADDR
// if p3 = 115 then
53779: LD_VAR 0 3
53783: PUSH
53784: LD_INT 115
53786: EQUAL
53787: IFFALSE 53797
// sRanger := true ;
53789: LD_ADDR_EXP 93
53793: PUSH
53794: LD_INT 1
53796: ST_TO_ADDR
// end ; if p2 = 101 then
53797: LD_VAR 0 2
53801: PUSH
53802: LD_INT 101
53804: EQUAL
53805: IFFALSE 53933
// begin case p3 of 1 :
53807: LD_VAR 0 3
53811: PUSH
53812: LD_INT 1
53814: DOUBLE
53815: EQUAL
53816: IFTRUE 53820
53818: GO 53827
53820: POP
// hHackUnlimitedResources ; 2 :
53821: CALL 64970 0 0
53825: GO 53933
53827: LD_INT 2
53829: DOUBLE
53830: EQUAL
53831: IFTRUE 53835
53833: GO 53842
53835: POP
// hHackSetLevel10 ; 3 :
53836: CALL 65103 0 0
53840: GO 53933
53842: LD_INT 3
53844: DOUBLE
53845: EQUAL
53846: IFTRUE 53850
53848: GO 53857
53850: POP
// hHackSetLevel10YourUnits ; 4 :
53851: CALL 65188 0 0
53855: GO 53933
53857: LD_INT 4
53859: DOUBLE
53860: EQUAL
53861: IFTRUE 53865
53863: GO 53872
53865: POP
// hHackInvincible ; 5 :
53866: CALL 65636 0 0
53870: GO 53933
53872: LD_INT 5
53874: DOUBLE
53875: EQUAL
53876: IFTRUE 53880
53878: GO 53887
53880: POP
// hHackInvisible ; 6 :
53881: CALL 65747 0 0
53885: GO 53933
53887: LD_INT 6
53889: DOUBLE
53890: EQUAL
53891: IFTRUE 53895
53893: GO 53902
53895: POP
// hHackChangeYourSide ; 7 :
53896: CALL 65804 0 0
53900: GO 53933
53902: LD_INT 7
53904: DOUBLE
53905: EQUAL
53906: IFTRUE 53910
53908: GO 53917
53910: POP
// hHackChangeUnitSide ; 8 :
53911: CALL 65846 0 0
53915: GO 53933
53917: LD_INT 8
53919: DOUBLE
53920: EQUAL
53921: IFTRUE 53925
53923: GO 53932
53925: POP
// hHackFog ; end ;
53926: CALL 65947 0 0
53930: GO 53933
53932: POP
// end ; end ;
53933: LD_VAR 0 7
53937: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
53938: GO 53940
53940: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
53941: LD_STRING initStreamRollete();
53943: PPUSH
53944: CALL_OW 559
// InitStreamMode ;
53948: CALL 53957 0 0
// DefineStreamItems ( ) ;
53952: CALL 54397 0 0
// end ;
53956: END
// function InitStreamMode ; begin
53957: LD_INT 0
53959: PPUSH
// streamModeActive := false ;
53960: LD_ADDR_EXP 40
53964: PUSH
53965: LD_INT 0
53967: ST_TO_ADDR
// normalCounter := 36 ;
53968: LD_ADDR_EXP 41
53972: PUSH
53973: LD_INT 36
53975: ST_TO_ADDR
// hardcoreCounter := 16 ;
53976: LD_ADDR_EXP 42
53980: PUSH
53981: LD_INT 16
53983: ST_TO_ADDR
// sRocket := false ;
53984: LD_ADDR_EXP 45
53988: PUSH
53989: LD_INT 0
53991: ST_TO_ADDR
// sSpeed := false ;
53992: LD_ADDR_EXP 44
53996: PUSH
53997: LD_INT 0
53999: ST_TO_ADDR
// sEngine := false ;
54000: LD_ADDR_EXP 46
54004: PUSH
54005: LD_INT 0
54007: ST_TO_ADDR
// sSpec := false ;
54008: LD_ADDR_EXP 43
54012: PUSH
54013: LD_INT 0
54015: ST_TO_ADDR
// sLevel := false ;
54016: LD_ADDR_EXP 47
54020: PUSH
54021: LD_INT 0
54023: ST_TO_ADDR
// sArmoury := false ;
54024: LD_ADDR_EXP 48
54028: PUSH
54029: LD_INT 0
54031: ST_TO_ADDR
// sRadar := false ;
54032: LD_ADDR_EXP 49
54036: PUSH
54037: LD_INT 0
54039: ST_TO_ADDR
// sBunker := false ;
54040: LD_ADDR_EXP 50
54044: PUSH
54045: LD_INT 0
54047: ST_TO_ADDR
// sHack := false ;
54048: LD_ADDR_EXP 51
54052: PUSH
54053: LD_INT 0
54055: ST_TO_ADDR
// sFire := false ;
54056: LD_ADDR_EXP 52
54060: PUSH
54061: LD_INT 0
54063: ST_TO_ADDR
// sRefresh := false ;
54064: LD_ADDR_EXP 53
54068: PUSH
54069: LD_INT 0
54071: ST_TO_ADDR
// sExp := false ;
54072: LD_ADDR_EXP 54
54076: PUSH
54077: LD_INT 0
54079: ST_TO_ADDR
// sDepot := false ;
54080: LD_ADDR_EXP 55
54084: PUSH
54085: LD_INT 0
54087: ST_TO_ADDR
// sFlag := false ;
54088: LD_ADDR_EXP 56
54092: PUSH
54093: LD_INT 0
54095: ST_TO_ADDR
// sKamikadze := false ;
54096: LD_ADDR_EXP 64
54100: PUSH
54101: LD_INT 0
54103: ST_TO_ADDR
// sTroll := false ;
54104: LD_ADDR_EXP 65
54108: PUSH
54109: LD_INT 0
54111: ST_TO_ADDR
// sSlow := false ;
54112: LD_ADDR_EXP 66
54116: PUSH
54117: LD_INT 0
54119: ST_TO_ADDR
// sLack := false ;
54120: LD_ADDR_EXP 67
54124: PUSH
54125: LD_INT 0
54127: ST_TO_ADDR
// sTank := false ;
54128: LD_ADDR_EXP 69
54132: PUSH
54133: LD_INT 0
54135: ST_TO_ADDR
// sRemote := false ;
54136: LD_ADDR_EXP 70
54140: PUSH
54141: LD_INT 0
54143: ST_TO_ADDR
// sPowell := false ;
54144: LD_ADDR_EXP 71
54148: PUSH
54149: LD_INT 0
54151: ST_TO_ADDR
// sTeleport := false ;
54152: LD_ADDR_EXP 74
54156: PUSH
54157: LD_INT 0
54159: ST_TO_ADDR
// sOilTower := false ;
54160: LD_ADDR_EXP 76
54164: PUSH
54165: LD_INT 0
54167: ST_TO_ADDR
// sShovel := false ;
54168: LD_ADDR_EXP 77
54172: PUSH
54173: LD_INT 0
54175: ST_TO_ADDR
// sSheik := false ;
54176: LD_ADDR_EXP 78
54180: PUSH
54181: LD_INT 0
54183: ST_TO_ADDR
// sEarthquake := false ;
54184: LD_ADDR_EXP 80
54188: PUSH
54189: LD_INT 0
54191: ST_TO_ADDR
// sAI := false ;
54192: LD_ADDR_EXP 81
54196: PUSH
54197: LD_INT 0
54199: ST_TO_ADDR
// sCargo := false ;
54200: LD_ADDR_EXP 84
54204: PUSH
54205: LD_INT 0
54207: ST_TO_ADDR
// sDLaser := false ;
54208: LD_ADDR_EXP 85
54212: PUSH
54213: LD_INT 0
54215: ST_TO_ADDR
// sExchange := false ;
54216: LD_ADDR_EXP 86
54220: PUSH
54221: LD_INT 0
54223: ST_TO_ADDR
// sFac := false ;
54224: LD_ADDR_EXP 87
54228: PUSH
54229: LD_INT 0
54231: ST_TO_ADDR
// sPower := false ;
54232: LD_ADDR_EXP 88
54236: PUSH
54237: LD_INT 0
54239: ST_TO_ADDR
// sRandom := false ;
54240: LD_ADDR_EXP 89
54244: PUSH
54245: LD_INT 0
54247: ST_TO_ADDR
// sShield := false ;
54248: LD_ADDR_EXP 90
54252: PUSH
54253: LD_INT 0
54255: ST_TO_ADDR
// sTime := false ;
54256: LD_ADDR_EXP 91
54260: PUSH
54261: LD_INT 0
54263: ST_TO_ADDR
// sTools := false ;
54264: LD_ADDR_EXP 92
54268: PUSH
54269: LD_INT 0
54271: ST_TO_ADDR
// sSold := false ;
54272: LD_ADDR_EXP 57
54276: PUSH
54277: LD_INT 0
54279: ST_TO_ADDR
// sDiff := false ;
54280: LD_ADDR_EXP 58
54284: PUSH
54285: LD_INT 0
54287: ST_TO_ADDR
// sFog := false ;
54288: LD_ADDR_EXP 61
54292: PUSH
54293: LD_INT 0
54295: ST_TO_ADDR
// sReset := false ;
54296: LD_ADDR_EXP 62
54300: PUSH
54301: LD_INT 0
54303: ST_TO_ADDR
// sSun := false ;
54304: LD_ADDR_EXP 63
54308: PUSH
54309: LD_INT 0
54311: ST_TO_ADDR
// sTiger := false ;
54312: LD_ADDR_EXP 59
54316: PUSH
54317: LD_INT 0
54319: ST_TO_ADDR
// sBomb := false ;
54320: LD_ADDR_EXP 60
54324: PUSH
54325: LD_INT 0
54327: ST_TO_ADDR
// sWound := false ;
54328: LD_ADDR_EXP 68
54332: PUSH
54333: LD_INT 0
54335: ST_TO_ADDR
// sBetray := false ;
54336: LD_ADDR_EXP 72
54340: PUSH
54341: LD_INT 0
54343: ST_TO_ADDR
// sContamin := false ;
54344: LD_ADDR_EXP 73
54348: PUSH
54349: LD_INT 0
54351: ST_TO_ADDR
// sOil := false ;
54352: LD_ADDR_EXP 75
54356: PUSH
54357: LD_INT 0
54359: ST_TO_ADDR
// sStu := false ;
54360: LD_ADDR_EXP 79
54364: PUSH
54365: LD_INT 0
54367: ST_TO_ADDR
// sBazooka := false ;
54368: LD_ADDR_EXP 82
54372: PUSH
54373: LD_INT 0
54375: ST_TO_ADDR
// sMortar := false ;
54376: LD_ADDR_EXP 83
54380: PUSH
54381: LD_INT 0
54383: ST_TO_ADDR
// sRanger := false ;
54384: LD_ADDR_EXP 93
54388: PUSH
54389: LD_INT 0
54391: ST_TO_ADDR
// end ;
54392: LD_VAR 0 1
54396: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
54397: LD_INT 0
54399: PPUSH
54400: PPUSH
54401: PPUSH
54402: PPUSH
54403: PPUSH
// result := [ ] ;
54404: LD_ADDR_VAR 0 1
54408: PUSH
54409: EMPTY
54410: ST_TO_ADDR
// if campaign_id = 1 then
54411: LD_OWVAR 69
54415: PUSH
54416: LD_INT 1
54418: EQUAL
54419: IFFALSE 57357
// begin case mission_number of 1 :
54421: LD_OWVAR 70
54425: PUSH
54426: LD_INT 1
54428: DOUBLE
54429: EQUAL
54430: IFTRUE 54434
54432: GO 54498
54434: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
54435: LD_ADDR_VAR 0 1
54439: PUSH
54440: LD_INT 2
54442: PUSH
54443: LD_INT 4
54445: PUSH
54446: LD_INT 11
54448: PUSH
54449: LD_INT 12
54451: PUSH
54452: LD_INT 15
54454: PUSH
54455: LD_INT 16
54457: PUSH
54458: LD_INT 22
54460: PUSH
54461: LD_INT 23
54463: PUSH
54464: LD_INT 26
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 101
54480: PUSH
54481: LD_INT 102
54483: PUSH
54484: LD_INT 106
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: LIST
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: ST_TO_ADDR
54496: GO 57355
54498: LD_INT 2
54500: DOUBLE
54501: EQUAL
54502: IFTRUE 54506
54504: GO 54578
54506: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
54507: LD_ADDR_VAR 0 1
54511: PUSH
54512: LD_INT 2
54514: PUSH
54515: LD_INT 4
54517: PUSH
54518: LD_INT 11
54520: PUSH
54521: LD_INT 12
54523: PUSH
54524: LD_INT 15
54526: PUSH
54527: LD_INT 16
54529: PUSH
54530: LD_INT 22
54532: PUSH
54533: LD_INT 23
54535: PUSH
54536: LD_INT 26
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 101
54552: PUSH
54553: LD_INT 102
54555: PUSH
54556: LD_INT 105
54558: PUSH
54559: LD_INT 106
54561: PUSH
54562: LD_INT 108
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: ST_TO_ADDR
54576: GO 57355
54578: LD_INT 3
54580: DOUBLE
54581: EQUAL
54582: IFTRUE 54586
54584: GO 54662
54586: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
54587: LD_ADDR_VAR 0 1
54591: PUSH
54592: LD_INT 2
54594: PUSH
54595: LD_INT 4
54597: PUSH
54598: LD_INT 5
54600: PUSH
54601: LD_INT 11
54603: PUSH
54604: LD_INT 12
54606: PUSH
54607: LD_INT 15
54609: PUSH
54610: LD_INT 16
54612: PUSH
54613: LD_INT 22
54615: PUSH
54616: LD_INT 26
54618: PUSH
54619: LD_INT 36
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 101
54636: PUSH
54637: LD_INT 102
54639: PUSH
54640: LD_INT 105
54642: PUSH
54643: LD_INT 106
54645: PUSH
54646: LD_INT 108
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: ST_TO_ADDR
54660: GO 57355
54662: LD_INT 4
54664: DOUBLE
54665: EQUAL
54666: IFTRUE 54670
54668: GO 54754
54670: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
54671: LD_ADDR_VAR 0 1
54675: PUSH
54676: LD_INT 2
54678: PUSH
54679: LD_INT 4
54681: PUSH
54682: LD_INT 5
54684: PUSH
54685: LD_INT 8
54687: PUSH
54688: LD_INT 11
54690: PUSH
54691: LD_INT 12
54693: PUSH
54694: LD_INT 15
54696: PUSH
54697: LD_INT 16
54699: PUSH
54700: LD_INT 22
54702: PUSH
54703: LD_INT 23
54705: PUSH
54706: LD_INT 26
54708: PUSH
54709: LD_INT 36
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 101
54728: PUSH
54729: LD_INT 102
54731: PUSH
54732: LD_INT 105
54734: PUSH
54735: LD_INT 106
54737: PUSH
54738: LD_INT 108
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: ST_TO_ADDR
54752: GO 57355
54754: LD_INT 5
54756: DOUBLE
54757: EQUAL
54758: IFTRUE 54762
54760: GO 54862
54762: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
54763: LD_ADDR_VAR 0 1
54767: PUSH
54768: LD_INT 2
54770: PUSH
54771: LD_INT 4
54773: PUSH
54774: LD_INT 5
54776: PUSH
54777: LD_INT 6
54779: PUSH
54780: LD_INT 8
54782: PUSH
54783: LD_INT 11
54785: PUSH
54786: LD_INT 12
54788: PUSH
54789: LD_INT 15
54791: PUSH
54792: LD_INT 16
54794: PUSH
54795: LD_INT 22
54797: PUSH
54798: LD_INT 23
54800: PUSH
54801: LD_INT 25
54803: PUSH
54804: LD_INT 26
54806: PUSH
54807: LD_INT 36
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 101
54828: PUSH
54829: LD_INT 102
54831: PUSH
54832: LD_INT 105
54834: PUSH
54835: LD_INT 106
54837: PUSH
54838: LD_INT 108
54840: PUSH
54841: LD_INT 109
54843: PUSH
54844: LD_INT 112
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: ST_TO_ADDR
54860: GO 57355
54862: LD_INT 6
54864: DOUBLE
54865: EQUAL
54866: IFTRUE 54870
54868: GO 54990
54870: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
54871: LD_ADDR_VAR 0 1
54875: PUSH
54876: LD_INT 2
54878: PUSH
54879: LD_INT 4
54881: PUSH
54882: LD_INT 5
54884: PUSH
54885: LD_INT 6
54887: PUSH
54888: LD_INT 8
54890: PUSH
54891: LD_INT 11
54893: PUSH
54894: LD_INT 12
54896: PUSH
54897: LD_INT 15
54899: PUSH
54900: LD_INT 16
54902: PUSH
54903: LD_INT 20
54905: PUSH
54906: LD_INT 21
54908: PUSH
54909: LD_INT 22
54911: PUSH
54912: LD_INT 23
54914: PUSH
54915: LD_INT 25
54917: PUSH
54918: LD_INT 26
54920: PUSH
54921: LD_INT 30
54923: PUSH
54924: LD_INT 31
54926: PUSH
54927: LD_INT 32
54929: PUSH
54930: LD_INT 36
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 101
54956: PUSH
54957: LD_INT 102
54959: PUSH
54960: LD_INT 105
54962: PUSH
54963: LD_INT 106
54965: PUSH
54966: LD_INT 108
54968: PUSH
54969: LD_INT 109
54971: PUSH
54972: LD_INT 112
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: ST_TO_ADDR
54988: GO 57355
54990: LD_INT 7
54992: DOUBLE
54993: EQUAL
54994: IFTRUE 54998
54996: GO 55098
54998: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
54999: LD_ADDR_VAR 0 1
55003: PUSH
55004: LD_INT 2
55006: PUSH
55007: LD_INT 4
55009: PUSH
55010: LD_INT 5
55012: PUSH
55013: LD_INT 7
55015: PUSH
55016: LD_INT 11
55018: PUSH
55019: LD_INT 12
55021: PUSH
55022: LD_INT 15
55024: PUSH
55025: LD_INT 16
55027: PUSH
55028: LD_INT 20
55030: PUSH
55031: LD_INT 21
55033: PUSH
55034: LD_INT 22
55036: PUSH
55037: LD_INT 23
55039: PUSH
55040: LD_INT 25
55042: PUSH
55043: LD_INT 26
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 101
55064: PUSH
55065: LD_INT 102
55067: PUSH
55068: LD_INT 103
55070: PUSH
55071: LD_INT 105
55073: PUSH
55074: LD_INT 106
55076: PUSH
55077: LD_INT 108
55079: PUSH
55080: LD_INT 112
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: ST_TO_ADDR
55096: GO 57355
55098: LD_INT 8
55100: DOUBLE
55101: EQUAL
55102: IFTRUE 55106
55104: GO 55234
55106: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
55107: LD_ADDR_VAR 0 1
55111: PUSH
55112: LD_INT 2
55114: PUSH
55115: LD_INT 4
55117: PUSH
55118: LD_INT 5
55120: PUSH
55121: LD_INT 6
55123: PUSH
55124: LD_INT 7
55126: PUSH
55127: LD_INT 8
55129: PUSH
55130: LD_INT 11
55132: PUSH
55133: LD_INT 12
55135: PUSH
55136: LD_INT 15
55138: PUSH
55139: LD_INT 16
55141: PUSH
55142: LD_INT 20
55144: PUSH
55145: LD_INT 21
55147: PUSH
55148: LD_INT 22
55150: PUSH
55151: LD_INT 23
55153: PUSH
55154: LD_INT 25
55156: PUSH
55157: LD_INT 26
55159: PUSH
55160: LD_INT 30
55162: PUSH
55163: LD_INT 31
55165: PUSH
55166: LD_INT 32
55168: PUSH
55169: LD_INT 36
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 101
55196: PUSH
55197: LD_INT 102
55199: PUSH
55200: LD_INT 103
55202: PUSH
55203: LD_INT 105
55205: PUSH
55206: LD_INT 106
55208: PUSH
55209: LD_INT 108
55211: PUSH
55212: LD_INT 109
55214: PUSH
55215: LD_INT 112
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: ST_TO_ADDR
55232: GO 57355
55234: LD_INT 9
55236: DOUBLE
55237: EQUAL
55238: IFTRUE 55242
55240: GO 55378
55242: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
55243: LD_ADDR_VAR 0 1
55247: PUSH
55248: LD_INT 2
55250: PUSH
55251: LD_INT 4
55253: PUSH
55254: LD_INT 5
55256: PUSH
55257: LD_INT 6
55259: PUSH
55260: LD_INT 7
55262: PUSH
55263: LD_INT 8
55265: PUSH
55266: LD_INT 11
55268: PUSH
55269: LD_INT 12
55271: PUSH
55272: LD_INT 15
55274: PUSH
55275: LD_INT 16
55277: PUSH
55278: LD_INT 20
55280: PUSH
55281: LD_INT 21
55283: PUSH
55284: LD_INT 22
55286: PUSH
55287: LD_INT 23
55289: PUSH
55290: LD_INT 25
55292: PUSH
55293: LD_INT 26
55295: PUSH
55296: LD_INT 28
55298: PUSH
55299: LD_INT 30
55301: PUSH
55302: LD_INT 31
55304: PUSH
55305: LD_INT 32
55307: PUSH
55308: LD_INT 36
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 101
55336: PUSH
55337: LD_INT 102
55339: PUSH
55340: LD_INT 103
55342: PUSH
55343: LD_INT 105
55345: PUSH
55346: LD_INT 106
55348: PUSH
55349: LD_INT 108
55351: PUSH
55352: LD_INT 109
55354: PUSH
55355: LD_INT 112
55357: PUSH
55358: LD_INT 114
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: ST_TO_ADDR
55376: GO 57355
55378: LD_INT 10
55380: DOUBLE
55381: EQUAL
55382: IFTRUE 55386
55384: GO 55570
55386: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
55387: LD_ADDR_VAR 0 1
55391: PUSH
55392: LD_INT 2
55394: PUSH
55395: LD_INT 4
55397: PUSH
55398: LD_INT 5
55400: PUSH
55401: LD_INT 6
55403: PUSH
55404: LD_INT 7
55406: PUSH
55407: LD_INT 8
55409: PUSH
55410: LD_INT 9
55412: PUSH
55413: LD_INT 10
55415: PUSH
55416: LD_INT 11
55418: PUSH
55419: LD_INT 12
55421: PUSH
55422: LD_INT 13
55424: PUSH
55425: LD_INT 14
55427: PUSH
55428: LD_INT 15
55430: PUSH
55431: LD_INT 16
55433: PUSH
55434: LD_INT 17
55436: PUSH
55437: LD_INT 18
55439: PUSH
55440: LD_INT 19
55442: PUSH
55443: LD_INT 20
55445: PUSH
55446: LD_INT 21
55448: PUSH
55449: LD_INT 22
55451: PUSH
55452: LD_INT 23
55454: PUSH
55455: LD_INT 24
55457: PUSH
55458: LD_INT 25
55460: PUSH
55461: LD_INT 26
55463: PUSH
55464: LD_INT 28
55466: PUSH
55467: LD_INT 30
55469: PUSH
55470: LD_INT 31
55472: PUSH
55473: LD_INT 32
55475: PUSH
55476: LD_INT 36
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 101
55512: PUSH
55513: LD_INT 102
55515: PUSH
55516: LD_INT 103
55518: PUSH
55519: LD_INT 104
55521: PUSH
55522: LD_INT 105
55524: PUSH
55525: LD_INT 106
55527: PUSH
55528: LD_INT 107
55530: PUSH
55531: LD_INT 108
55533: PUSH
55534: LD_INT 109
55536: PUSH
55537: LD_INT 110
55539: PUSH
55540: LD_INT 111
55542: PUSH
55543: LD_INT 112
55545: PUSH
55546: LD_INT 114
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: ST_TO_ADDR
55568: GO 57355
55570: LD_INT 11
55572: DOUBLE
55573: EQUAL
55574: IFTRUE 55578
55576: GO 55770
55578: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
55579: LD_ADDR_VAR 0 1
55583: PUSH
55584: LD_INT 2
55586: PUSH
55587: LD_INT 3
55589: PUSH
55590: LD_INT 4
55592: PUSH
55593: LD_INT 5
55595: PUSH
55596: LD_INT 6
55598: PUSH
55599: LD_INT 7
55601: PUSH
55602: LD_INT 8
55604: PUSH
55605: LD_INT 9
55607: PUSH
55608: LD_INT 10
55610: PUSH
55611: LD_INT 11
55613: PUSH
55614: LD_INT 12
55616: PUSH
55617: LD_INT 13
55619: PUSH
55620: LD_INT 14
55622: PUSH
55623: LD_INT 15
55625: PUSH
55626: LD_INT 16
55628: PUSH
55629: LD_INT 17
55631: PUSH
55632: LD_INT 18
55634: PUSH
55635: LD_INT 19
55637: PUSH
55638: LD_INT 20
55640: PUSH
55641: LD_INT 21
55643: PUSH
55644: LD_INT 22
55646: PUSH
55647: LD_INT 23
55649: PUSH
55650: LD_INT 24
55652: PUSH
55653: LD_INT 25
55655: PUSH
55656: LD_INT 26
55658: PUSH
55659: LD_INT 28
55661: PUSH
55662: LD_INT 30
55664: PUSH
55665: LD_INT 31
55667: PUSH
55668: LD_INT 32
55670: PUSH
55671: LD_INT 34
55673: PUSH
55674: LD_INT 36
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 101
55712: PUSH
55713: LD_INT 102
55715: PUSH
55716: LD_INT 103
55718: PUSH
55719: LD_INT 104
55721: PUSH
55722: LD_INT 105
55724: PUSH
55725: LD_INT 106
55727: PUSH
55728: LD_INT 107
55730: PUSH
55731: LD_INT 108
55733: PUSH
55734: LD_INT 109
55736: PUSH
55737: LD_INT 110
55739: PUSH
55740: LD_INT 111
55742: PUSH
55743: LD_INT 112
55745: PUSH
55746: LD_INT 114
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: ST_TO_ADDR
55768: GO 57355
55770: LD_INT 12
55772: DOUBLE
55773: EQUAL
55774: IFTRUE 55778
55776: GO 55986
55778: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
55779: LD_ADDR_VAR 0 1
55783: PUSH
55784: LD_INT 1
55786: PUSH
55787: LD_INT 2
55789: PUSH
55790: LD_INT 3
55792: PUSH
55793: LD_INT 4
55795: PUSH
55796: LD_INT 5
55798: PUSH
55799: LD_INT 6
55801: PUSH
55802: LD_INT 7
55804: PUSH
55805: LD_INT 8
55807: PUSH
55808: LD_INT 9
55810: PUSH
55811: LD_INT 10
55813: PUSH
55814: LD_INT 11
55816: PUSH
55817: LD_INT 12
55819: PUSH
55820: LD_INT 13
55822: PUSH
55823: LD_INT 14
55825: PUSH
55826: LD_INT 15
55828: PUSH
55829: LD_INT 16
55831: PUSH
55832: LD_INT 17
55834: PUSH
55835: LD_INT 18
55837: PUSH
55838: LD_INT 19
55840: PUSH
55841: LD_INT 20
55843: PUSH
55844: LD_INT 21
55846: PUSH
55847: LD_INT 22
55849: PUSH
55850: LD_INT 23
55852: PUSH
55853: LD_INT 24
55855: PUSH
55856: LD_INT 25
55858: PUSH
55859: LD_INT 26
55861: PUSH
55862: LD_INT 27
55864: PUSH
55865: LD_INT 28
55867: PUSH
55868: LD_INT 30
55870: PUSH
55871: LD_INT 31
55873: PUSH
55874: LD_INT 32
55876: PUSH
55877: LD_INT 33
55879: PUSH
55880: LD_INT 34
55882: PUSH
55883: LD_INT 36
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 101
55924: PUSH
55925: LD_INT 102
55927: PUSH
55928: LD_INT 103
55930: PUSH
55931: LD_INT 104
55933: PUSH
55934: LD_INT 105
55936: PUSH
55937: LD_INT 106
55939: PUSH
55940: LD_INT 107
55942: PUSH
55943: LD_INT 108
55945: PUSH
55946: LD_INT 109
55948: PUSH
55949: LD_INT 110
55951: PUSH
55952: LD_INT 111
55954: PUSH
55955: LD_INT 112
55957: PUSH
55958: LD_INT 113
55960: PUSH
55961: LD_INT 114
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: ST_TO_ADDR
55984: GO 57355
55986: LD_INT 13
55988: DOUBLE
55989: EQUAL
55990: IFTRUE 55994
55992: GO 56190
55994: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
55995: LD_ADDR_VAR 0 1
55999: PUSH
56000: LD_INT 1
56002: PUSH
56003: LD_INT 2
56005: PUSH
56006: LD_INT 3
56008: PUSH
56009: LD_INT 4
56011: PUSH
56012: LD_INT 5
56014: PUSH
56015: LD_INT 8
56017: PUSH
56018: LD_INT 9
56020: PUSH
56021: LD_INT 10
56023: PUSH
56024: LD_INT 11
56026: PUSH
56027: LD_INT 12
56029: PUSH
56030: LD_INT 14
56032: PUSH
56033: LD_INT 15
56035: PUSH
56036: LD_INT 16
56038: PUSH
56039: LD_INT 17
56041: PUSH
56042: LD_INT 18
56044: PUSH
56045: LD_INT 19
56047: PUSH
56048: LD_INT 20
56050: PUSH
56051: LD_INT 21
56053: PUSH
56054: LD_INT 22
56056: PUSH
56057: LD_INT 23
56059: PUSH
56060: LD_INT 24
56062: PUSH
56063: LD_INT 25
56065: PUSH
56066: LD_INT 26
56068: PUSH
56069: LD_INT 27
56071: PUSH
56072: LD_INT 28
56074: PUSH
56075: LD_INT 30
56077: PUSH
56078: LD_INT 31
56080: PUSH
56081: LD_INT 32
56083: PUSH
56084: LD_INT 33
56086: PUSH
56087: LD_INT 34
56089: PUSH
56090: LD_INT 36
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 101
56128: PUSH
56129: LD_INT 102
56131: PUSH
56132: LD_INT 103
56134: PUSH
56135: LD_INT 104
56137: PUSH
56138: LD_INT 105
56140: PUSH
56141: LD_INT 106
56143: PUSH
56144: LD_INT 107
56146: PUSH
56147: LD_INT 108
56149: PUSH
56150: LD_INT 109
56152: PUSH
56153: LD_INT 110
56155: PUSH
56156: LD_INT 111
56158: PUSH
56159: LD_INT 112
56161: PUSH
56162: LD_INT 113
56164: PUSH
56165: LD_INT 114
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: ST_TO_ADDR
56188: GO 57355
56190: LD_INT 14
56192: DOUBLE
56193: EQUAL
56194: IFTRUE 56198
56196: GO 56410
56198: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
56199: LD_ADDR_VAR 0 1
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: LD_INT 2
56209: PUSH
56210: LD_INT 3
56212: PUSH
56213: LD_INT 4
56215: PUSH
56216: LD_INT 5
56218: PUSH
56219: LD_INT 6
56221: PUSH
56222: LD_INT 7
56224: PUSH
56225: LD_INT 8
56227: PUSH
56228: LD_INT 9
56230: PUSH
56231: LD_INT 10
56233: PUSH
56234: LD_INT 11
56236: PUSH
56237: LD_INT 12
56239: PUSH
56240: LD_INT 13
56242: PUSH
56243: LD_INT 14
56245: PUSH
56246: LD_INT 15
56248: PUSH
56249: LD_INT 16
56251: PUSH
56252: LD_INT 17
56254: PUSH
56255: LD_INT 18
56257: PUSH
56258: LD_INT 19
56260: PUSH
56261: LD_INT 20
56263: PUSH
56264: LD_INT 21
56266: PUSH
56267: LD_INT 22
56269: PUSH
56270: LD_INT 23
56272: PUSH
56273: LD_INT 24
56275: PUSH
56276: LD_INT 25
56278: PUSH
56279: LD_INT 26
56281: PUSH
56282: LD_INT 27
56284: PUSH
56285: LD_INT 28
56287: PUSH
56288: LD_INT 29
56290: PUSH
56291: LD_INT 30
56293: PUSH
56294: LD_INT 31
56296: PUSH
56297: LD_INT 32
56299: PUSH
56300: LD_INT 33
56302: PUSH
56303: LD_INT 34
56305: PUSH
56306: LD_INT 36
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 101
56348: PUSH
56349: LD_INT 102
56351: PUSH
56352: LD_INT 103
56354: PUSH
56355: LD_INT 104
56357: PUSH
56358: LD_INT 105
56360: PUSH
56361: LD_INT 106
56363: PUSH
56364: LD_INT 107
56366: PUSH
56367: LD_INT 108
56369: PUSH
56370: LD_INT 109
56372: PUSH
56373: LD_INT 110
56375: PUSH
56376: LD_INT 111
56378: PUSH
56379: LD_INT 112
56381: PUSH
56382: LD_INT 113
56384: PUSH
56385: LD_INT 114
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: ST_TO_ADDR
56408: GO 57355
56410: LD_INT 15
56412: DOUBLE
56413: EQUAL
56414: IFTRUE 56418
56416: GO 56630
56418: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
56419: LD_ADDR_VAR 0 1
56423: PUSH
56424: LD_INT 1
56426: PUSH
56427: LD_INT 2
56429: PUSH
56430: LD_INT 3
56432: PUSH
56433: LD_INT 4
56435: PUSH
56436: LD_INT 5
56438: PUSH
56439: LD_INT 6
56441: PUSH
56442: LD_INT 7
56444: PUSH
56445: LD_INT 8
56447: PUSH
56448: LD_INT 9
56450: PUSH
56451: LD_INT 10
56453: PUSH
56454: LD_INT 11
56456: PUSH
56457: LD_INT 12
56459: PUSH
56460: LD_INT 13
56462: PUSH
56463: LD_INT 14
56465: PUSH
56466: LD_INT 15
56468: PUSH
56469: LD_INT 16
56471: PUSH
56472: LD_INT 17
56474: PUSH
56475: LD_INT 18
56477: PUSH
56478: LD_INT 19
56480: PUSH
56481: LD_INT 20
56483: PUSH
56484: LD_INT 21
56486: PUSH
56487: LD_INT 22
56489: PUSH
56490: LD_INT 23
56492: PUSH
56493: LD_INT 24
56495: PUSH
56496: LD_INT 25
56498: PUSH
56499: LD_INT 26
56501: PUSH
56502: LD_INT 27
56504: PUSH
56505: LD_INT 28
56507: PUSH
56508: LD_INT 29
56510: PUSH
56511: LD_INT 30
56513: PUSH
56514: LD_INT 31
56516: PUSH
56517: LD_INT 32
56519: PUSH
56520: LD_INT 33
56522: PUSH
56523: LD_INT 34
56525: PUSH
56526: LD_INT 36
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 101
56568: PUSH
56569: LD_INT 102
56571: PUSH
56572: LD_INT 103
56574: PUSH
56575: LD_INT 104
56577: PUSH
56578: LD_INT 105
56580: PUSH
56581: LD_INT 106
56583: PUSH
56584: LD_INT 107
56586: PUSH
56587: LD_INT 108
56589: PUSH
56590: LD_INT 109
56592: PUSH
56593: LD_INT 110
56595: PUSH
56596: LD_INT 111
56598: PUSH
56599: LD_INT 112
56601: PUSH
56602: LD_INT 113
56604: PUSH
56605: LD_INT 114
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: ST_TO_ADDR
56628: GO 57355
56630: LD_INT 16
56632: DOUBLE
56633: EQUAL
56634: IFTRUE 56638
56636: GO 56762
56638: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
56639: LD_ADDR_VAR 0 1
56643: PUSH
56644: LD_INT 2
56646: PUSH
56647: LD_INT 4
56649: PUSH
56650: LD_INT 5
56652: PUSH
56653: LD_INT 7
56655: PUSH
56656: LD_INT 11
56658: PUSH
56659: LD_INT 12
56661: PUSH
56662: LD_INT 15
56664: PUSH
56665: LD_INT 16
56667: PUSH
56668: LD_INT 20
56670: PUSH
56671: LD_INT 21
56673: PUSH
56674: LD_INT 22
56676: PUSH
56677: LD_INT 23
56679: PUSH
56680: LD_INT 25
56682: PUSH
56683: LD_INT 26
56685: PUSH
56686: LD_INT 30
56688: PUSH
56689: LD_INT 31
56691: PUSH
56692: LD_INT 32
56694: PUSH
56695: LD_INT 33
56697: PUSH
56698: LD_INT 34
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 101
56724: PUSH
56725: LD_INT 102
56727: PUSH
56728: LD_INT 103
56730: PUSH
56731: LD_INT 106
56733: PUSH
56734: LD_INT 108
56736: PUSH
56737: LD_INT 112
56739: PUSH
56740: LD_INT 113
56742: PUSH
56743: LD_INT 114
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: ST_TO_ADDR
56760: GO 57355
56762: LD_INT 17
56764: DOUBLE
56765: EQUAL
56766: IFTRUE 56770
56768: GO 56982
56770: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
56771: LD_ADDR_VAR 0 1
56775: PUSH
56776: LD_INT 1
56778: PUSH
56779: LD_INT 2
56781: PUSH
56782: LD_INT 3
56784: PUSH
56785: LD_INT 4
56787: PUSH
56788: LD_INT 5
56790: PUSH
56791: LD_INT 6
56793: PUSH
56794: LD_INT 7
56796: PUSH
56797: LD_INT 8
56799: PUSH
56800: LD_INT 9
56802: PUSH
56803: LD_INT 10
56805: PUSH
56806: LD_INT 11
56808: PUSH
56809: LD_INT 12
56811: PUSH
56812: LD_INT 13
56814: PUSH
56815: LD_INT 14
56817: PUSH
56818: LD_INT 15
56820: PUSH
56821: LD_INT 16
56823: PUSH
56824: LD_INT 17
56826: PUSH
56827: LD_INT 18
56829: PUSH
56830: LD_INT 19
56832: PUSH
56833: LD_INT 20
56835: PUSH
56836: LD_INT 21
56838: PUSH
56839: LD_INT 22
56841: PUSH
56842: LD_INT 23
56844: PUSH
56845: LD_INT 24
56847: PUSH
56848: LD_INT 25
56850: PUSH
56851: LD_INT 26
56853: PUSH
56854: LD_INT 27
56856: PUSH
56857: LD_INT 28
56859: PUSH
56860: LD_INT 29
56862: PUSH
56863: LD_INT 30
56865: PUSH
56866: LD_INT 31
56868: PUSH
56869: LD_INT 32
56871: PUSH
56872: LD_INT 33
56874: PUSH
56875: LD_INT 34
56877: PUSH
56878: LD_INT 36
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 101
56920: PUSH
56921: LD_INT 102
56923: PUSH
56924: LD_INT 103
56926: PUSH
56927: LD_INT 104
56929: PUSH
56930: LD_INT 105
56932: PUSH
56933: LD_INT 106
56935: PUSH
56936: LD_INT 107
56938: PUSH
56939: LD_INT 108
56941: PUSH
56942: LD_INT 109
56944: PUSH
56945: LD_INT 110
56947: PUSH
56948: LD_INT 111
56950: PUSH
56951: LD_INT 112
56953: PUSH
56954: LD_INT 113
56956: PUSH
56957: LD_INT 114
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: ST_TO_ADDR
56980: GO 57355
56982: LD_INT 18
56984: DOUBLE
56985: EQUAL
56986: IFTRUE 56990
56988: GO 57126
56990: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
56991: LD_ADDR_VAR 0 1
56995: PUSH
56996: LD_INT 2
56998: PUSH
56999: LD_INT 4
57001: PUSH
57002: LD_INT 5
57004: PUSH
57005: LD_INT 7
57007: PUSH
57008: LD_INT 11
57010: PUSH
57011: LD_INT 12
57013: PUSH
57014: LD_INT 15
57016: PUSH
57017: LD_INT 16
57019: PUSH
57020: LD_INT 20
57022: PUSH
57023: LD_INT 21
57025: PUSH
57026: LD_INT 22
57028: PUSH
57029: LD_INT 23
57031: PUSH
57032: LD_INT 25
57034: PUSH
57035: LD_INT 26
57037: PUSH
57038: LD_INT 30
57040: PUSH
57041: LD_INT 31
57043: PUSH
57044: LD_INT 32
57046: PUSH
57047: LD_INT 33
57049: PUSH
57050: LD_INT 34
57052: PUSH
57053: LD_INT 35
57055: PUSH
57056: LD_INT 36
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 101
57084: PUSH
57085: LD_INT 102
57087: PUSH
57088: LD_INT 103
57090: PUSH
57091: LD_INT 106
57093: PUSH
57094: LD_INT 108
57096: PUSH
57097: LD_INT 112
57099: PUSH
57100: LD_INT 113
57102: PUSH
57103: LD_INT 114
57105: PUSH
57106: LD_INT 115
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: ST_TO_ADDR
57124: GO 57355
57126: LD_INT 19
57128: DOUBLE
57129: EQUAL
57130: IFTRUE 57134
57132: GO 57354
57134: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
57135: LD_ADDR_VAR 0 1
57139: PUSH
57140: LD_INT 1
57142: PUSH
57143: LD_INT 2
57145: PUSH
57146: LD_INT 3
57148: PUSH
57149: LD_INT 4
57151: PUSH
57152: LD_INT 5
57154: PUSH
57155: LD_INT 6
57157: PUSH
57158: LD_INT 7
57160: PUSH
57161: LD_INT 8
57163: PUSH
57164: LD_INT 9
57166: PUSH
57167: LD_INT 10
57169: PUSH
57170: LD_INT 11
57172: PUSH
57173: LD_INT 12
57175: PUSH
57176: LD_INT 13
57178: PUSH
57179: LD_INT 14
57181: PUSH
57182: LD_INT 15
57184: PUSH
57185: LD_INT 16
57187: PUSH
57188: LD_INT 17
57190: PUSH
57191: LD_INT 18
57193: PUSH
57194: LD_INT 19
57196: PUSH
57197: LD_INT 20
57199: PUSH
57200: LD_INT 21
57202: PUSH
57203: LD_INT 22
57205: PUSH
57206: LD_INT 23
57208: PUSH
57209: LD_INT 24
57211: PUSH
57212: LD_INT 25
57214: PUSH
57215: LD_INT 26
57217: PUSH
57218: LD_INT 27
57220: PUSH
57221: LD_INT 28
57223: PUSH
57224: LD_INT 29
57226: PUSH
57227: LD_INT 30
57229: PUSH
57230: LD_INT 31
57232: PUSH
57233: LD_INT 32
57235: PUSH
57236: LD_INT 33
57238: PUSH
57239: LD_INT 34
57241: PUSH
57242: LD_INT 35
57244: PUSH
57245: LD_INT 36
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 101
57288: PUSH
57289: LD_INT 102
57291: PUSH
57292: LD_INT 103
57294: PUSH
57295: LD_INT 104
57297: PUSH
57298: LD_INT 105
57300: PUSH
57301: LD_INT 106
57303: PUSH
57304: LD_INT 107
57306: PUSH
57307: LD_INT 108
57309: PUSH
57310: LD_INT 109
57312: PUSH
57313: LD_INT 110
57315: PUSH
57316: LD_INT 111
57318: PUSH
57319: LD_INT 112
57321: PUSH
57322: LD_INT 113
57324: PUSH
57325: LD_INT 114
57327: PUSH
57328: LD_INT 115
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: ST_TO_ADDR
57352: GO 57355
57354: POP
// end else
57355: GO 57574
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
57357: LD_ADDR_VAR 0 1
57361: PUSH
57362: LD_INT 1
57364: PUSH
57365: LD_INT 2
57367: PUSH
57368: LD_INT 3
57370: PUSH
57371: LD_INT 4
57373: PUSH
57374: LD_INT 5
57376: PUSH
57377: LD_INT 6
57379: PUSH
57380: LD_INT 7
57382: PUSH
57383: LD_INT 8
57385: PUSH
57386: LD_INT 9
57388: PUSH
57389: LD_INT 10
57391: PUSH
57392: LD_INT 11
57394: PUSH
57395: LD_INT 12
57397: PUSH
57398: LD_INT 13
57400: PUSH
57401: LD_INT 14
57403: PUSH
57404: LD_INT 15
57406: PUSH
57407: LD_INT 16
57409: PUSH
57410: LD_INT 17
57412: PUSH
57413: LD_INT 18
57415: PUSH
57416: LD_INT 19
57418: PUSH
57419: LD_INT 20
57421: PUSH
57422: LD_INT 21
57424: PUSH
57425: LD_INT 22
57427: PUSH
57428: LD_INT 23
57430: PUSH
57431: LD_INT 24
57433: PUSH
57434: LD_INT 25
57436: PUSH
57437: LD_INT 26
57439: PUSH
57440: LD_INT 27
57442: PUSH
57443: LD_INT 28
57445: PUSH
57446: LD_INT 29
57448: PUSH
57449: LD_INT 30
57451: PUSH
57452: LD_INT 31
57454: PUSH
57455: LD_INT 32
57457: PUSH
57458: LD_INT 33
57460: PUSH
57461: LD_INT 34
57463: PUSH
57464: LD_INT 35
57466: PUSH
57467: LD_INT 36
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 101
57510: PUSH
57511: LD_INT 102
57513: PUSH
57514: LD_INT 103
57516: PUSH
57517: LD_INT 104
57519: PUSH
57520: LD_INT 105
57522: PUSH
57523: LD_INT 106
57525: PUSH
57526: LD_INT 107
57528: PUSH
57529: LD_INT 108
57531: PUSH
57532: LD_INT 109
57534: PUSH
57535: LD_INT 110
57537: PUSH
57538: LD_INT 111
57540: PUSH
57541: LD_INT 112
57543: PUSH
57544: LD_INT 113
57546: PUSH
57547: LD_INT 114
57549: PUSH
57550: LD_INT 115
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: ST_TO_ADDR
// if result then
57574: LD_VAR 0 1
57578: IFFALSE 57867
// begin normal :=  ;
57580: LD_ADDR_VAR 0 3
57584: PUSH
57585: LD_STRING 
57587: ST_TO_ADDR
// hardcore :=  ;
57588: LD_ADDR_VAR 0 4
57592: PUSH
57593: LD_STRING 
57595: ST_TO_ADDR
// for i = 1 to normalCounter do
57596: LD_ADDR_VAR 0 5
57600: PUSH
57601: DOUBLE
57602: LD_INT 1
57604: DEC
57605: ST_TO_ADDR
57606: LD_EXP 41
57610: PUSH
57611: FOR_TO
57612: IFFALSE 57713
// begin tmp := 0 ;
57614: LD_ADDR_VAR 0 2
57618: PUSH
57619: LD_STRING 0
57621: ST_TO_ADDR
// if result [ 1 ] then
57622: LD_VAR 0 1
57626: PUSH
57627: LD_INT 1
57629: ARRAY
57630: IFFALSE 57695
// if result [ 1 ] [ 1 ] = i then
57632: LD_VAR 0 1
57636: PUSH
57637: LD_INT 1
57639: ARRAY
57640: PUSH
57641: LD_INT 1
57643: ARRAY
57644: PUSH
57645: LD_VAR 0 5
57649: EQUAL
57650: IFFALSE 57695
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
57652: LD_ADDR_VAR 0 1
57656: PUSH
57657: LD_VAR 0 1
57661: PPUSH
57662: LD_INT 1
57664: PPUSH
57665: LD_VAR 0 1
57669: PUSH
57670: LD_INT 1
57672: ARRAY
57673: PPUSH
57674: LD_INT 1
57676: PPUSH
57677: CALL_OW 3
57681: PPUSH
57682: CALL_OW 1
57686: ST_TO_ADDR
// tmp := 1 ;
57687: LD_ADDR_VAR 0 2
57691: PUSH
57692: LD_STRING 1
57694: ST_TO_ADDR
// end ; normal := normal & tmp ;
57695: LD_ADDR_VAR 0 3
57699: PUSH
57700: LD_VAR 0 3
57704: PUSH
57705: LD_VAR 0 2
57709: STR
57710: ST_TO_ADDR
// end ;
57711: GO 57611
57713: POP
57714: POP
// for i = 1 to hardcoreCounter do
57715: LD_ADDR_VAR 0 5
57719: PUSH
57720: DOUBLE
57721: LD_INT 1
57723: DEC
57724: ST_TO_ADDR
57725: LD_EXP 42
57729: PUSH
57730: FOR_TO
57731: IFFALSE 57836
// begin tmp := 0 ;
57733: LD_ADDR_VAR 0 2
57737: PUSH
57738: LD_STRING 0
57740: ST_TO_ADDR
// if result [ 2 ] then
57741: LD_VAR 0 1
57745: PUSH
57746: LD_INT 2
57748: ARRAY
57749: IFFALSE 57818
// if result [ 2 ] [ 1 ] = 100 + i then
57751: LD_VAR 0 1
57755: PUSH
57756: LD_INT 2
57758: ARRAY
57759: PUSH
57760: LD_INT 1
57762: ARRAY
57763: PUSH
57764: LD_INT 100
57766: PUSH
57767: LD_VAR 0 5
57771: PLUS
57772: EQUAL
57773: IFFALSE 57818
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
57775: LD_ADDR_VAR 0 1
57779: PUSH
57780: LD_VAR 0 1
57784: PPUSH
57785: LD_INT 2
57787: PPUSH
57788: LD_VAR 0 1
57792: PUSH
57793: LD_INT 2
57795: ARRAY
57796: PPUSH
57797: LD_INT 1
57799: PPUSH
57800: CALL_OW 3
57804: PPUSH
57805: CALL_OW 1
57809: ST_TO_ADDR
// tmp := 1 ;
57810: LD_ADDR_VAR 0 2
57814: PUSH
57815: LD_STRING 1
57817: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
57818: LD_ADDR_VAR 0 4
57822: PUSH
57823: LD_VAR 0 4
57827: PUSH
57828: LD_VAR 0 2
57832: STR
57833: ST_TO_ADDR
// end ;
57834: GO 57730
57836: POP
57837: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
57838: LD_STRING getStreamItemsFromMission("
57840: PUSH
57841: LD_VAR 0 3
57845: STR
57846: PUSH
57847: LD_STRING ","
57849: STR
57850: PUSH
57851: LD_VAR 0 4
57855: STR
57856: PUSH
57857: LD_STRING ")
57859: STR
57860: PPUSH
57861: CALL_OW 559
// end else
57865: GO 57874
// ToLua ( getStreamItemsFromMission("","") ) ;
57867: LD_STRING getStreamItemsFromMission("","")
57869: PPUSH
57870: CALL_OW 559
// end ;
57874: LD_VAR 0 1
57878: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
57879: LD_EXP 40
57883: PUSH
57884: LD_EXP 45
57888: AND
57889: IFFALSE 58013
57891: GO 57893
57893: DISABLE
57894: LD_INT 0
57896: PPUSH
57897: PPUSH
// begin enable ;
57898: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
57899: LD_ADDR_VAR 0 2
57903: PUSH
57904: LD_INT 22
57906: PUSH
57907: LD_OWVAR 2
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 2
57918: PUSH
57919: LD_INT 34
57921: PUSH
57922: LD_INT 7
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 34
57931: PUSH
57932: LD_INT 45
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 34
57941: PUSH
57942: LD_INT 28
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 34
57951: PUSH
57952: LD_INT 47
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PPUSH
57970: CALL_OW 69
57974: ST_TO_ADDR
// if not tmp then
57975: LD_VAR 0 2
57979: NOT
57980: IFFALSE 57984
// exit ;
57982: GO 58013
// for i in tmp do
57984: LD_ADDR_VAR 0 1
57988: PUSH
57989: LD_VAR 0 2
57993: PUSH
57994: FOR_IN
57995: IFFALSE 58011
// begin SetLives ( i , 0 ) ;
57997: LD_VAR 0 1
58001: PPUSH
58002: LD_INT 0
58004: PPUSH
58005: CALL_OW 234
// end ;
58009: GO 57994
58011: POP
58012: POP
// end ;
58013: PPOPN 2
58015: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
58016: LD_EXP 40
58020: PUSH
58021: LD_EXP 46
58025: AND
58026: IFFALSE 58110
58028: GO 58030
58030: DISABLE
58031: LD_INT 0
58033: PPUSH
58034: PPUSH
// begin enable ;
58035: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
58036: LD_ADDR_VAR 0 2
58040: PUSH
58041: LD_INT 22
58043: PUSH
58044: LD_OWVAR 2
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 32
58055: PUSH
58056: LD_INT 3
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PPUSH
58067: CALL_OW 69
58071: ST_TO_ADDR
// if not tmp then
58072: LD_VAR 0 2
58076: NOT
58077: IFFALSE 58081
// exit ;
58079: GO 58110
// for i in tmp do
58081: LD_ADDR_VAR 0 1
58085: PUSH
58086: LD_VAR 0 2
58090: PUSH
58091: FOR_IN
58092: IFFALSE 58108
// begin SetLives ( i , 0 ) ;
58094: LD_VAR 0 1
58098: PPUSH
58099: LD_INT 0
58101: PPUSH
58102: CALL_OW 234
// end ;
58106: GO 58091
58108: POP
58109: POP
// end ;
58110: PPOPN 2
58112: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
58113: LD_EXP 40
58117: PUSH
58118: LD_EXP 43
58122: AND
58123: IFFALSE 58216
58125: GO 58127
58127: DISABLE
58128: LD_INT 0
58130: PPUSH
// begin enable ;
58131: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
58132: LD_ADDR_VAR 0 1
58136: PUSH
58137: LD_INT 22
58139: PUSH
58140: LD_OWVAR 2
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 2
58151: PUSH
58152: LD_INT 25
58154: PUSH
58155: LD_INT 5
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 25
58164: PUSH
58165: LD_INT 9
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 25
58174: PUSH
58175: LD_INT 8
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PPUSH
58192: CALL_OW 69
58196: PUSH
58197: FOR_IN
58198: IFFALSE 58214
// begin SetClass ( i , 1 ) ;
58200: LD_VAR 0 1
58204: PPUSH
58205: LD_INT 1
58207: PPUSH
58208: CALL_OW 336
// end ;
58212: GO 58197
58214: POP
58215: POP
// end ;
58216: PPOPN 1
58218: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
58219: LD_EXP 40
58223: PUSH
58224: LD_EXP 44
58228: AND
58229: PUSH
58230: LD_OWVAR 65
58234: PUSH
58235: LD_INT 7
58237: LESS
58238: AND
58239: IFFALSE 58253
58241: GO 58243
58243: DISABLE
// begin enable ;
58244: ENABLE
// game_speed := 7 ;
58245: LD_ADDR_OWVAR 65
58249: PUSH
58250: LD_INT 7
58252: ST_TO_ADDR
// end ;
58253: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
58254: LD_EXP 40
58258: PUSH
58259: LD_EXP 47
58263: AND
58264: IFFALSE 58466
58266: GO 58268
58268: DISABLE
58269: LD_INT 0
58271: PPUSH
58272: PPUSH
58273: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
58274: LD_ADDR_VAR 0 3
58278: PUSH
58279: LD_INT 81
58281: PUSH
58282: LD_OWVAR 2
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 21
58293: PUSH
58294: LD_INT 1
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PPUSH
58305: CALL_OW 69
58309: ST_TO_ADDR
// if not tmp then
58310: LD_VAR 0 3
58314: NOT
58315: IFFALSE 58319
// exit ;
58317: GO 58466
// if tmp > 5 then
58319: LD_VAR 0 3
58323: PUSH
58324: LD_INT 5
58326: GREATER
58327: IFFALSE 58339
// k := 5 else
58329: LD_ADDR_VAR 0 2
58333: PUSH
58334: LD_INT 5
58336: ST_TO_ADDR
58337: GO 58349
// k := tmp ;
58339: LD_ADDR_VAR 0 2
58343: PUSH
58344: LD_VAR 0 3
58348: ST_TO_ADDR
// for i := 1 to k do
58349: LD_ADDR_VAR 0 1
58353: PUSH
58354: DOUBLE
58355: LD_INT 1
58357: DEC
58358: ST_TO_ADDR
58359: LD_VAR 0 2
58363: PUSH
58364: FOR_TO
58365: IFFALSE 58464
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
58367: LD_VAR 0 3
58371: PUSH
58372: LD_VAR 0 1
58376: ARRAY
58377: PPUSH
58378: LD_VAR 0 1
58382: PUSH
58383: LD_INT 4
58385: MOD
58386: PUSH
58387: LD_INT 1
58389: PLUS
58390: PPUSH
58391: CALL_OW 259
58395: PUSH
58396: LD_INT 10
58398: LESS
58399: IFFALSE 58462
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
58401: LD_VAR 0 3
58405: PUSH
58406: LD_VAR 0 1
58410: ARRAY
58411: PPUSH
58412: LD_VAR 0 1
58416: PUSH
58417: LD_INT 4
58419: MOD
58420: PUSH
58421: LD_INT 1
58423: PLUS
58424: PPUSH
58425: LD_VAR 0 3
58429: PUSH
58430: LD_VAR 0 1
58434: ARRAY
58435: PPUSH
58436: LD_VAR 0 1
58440: PUSH
58441: LD_INT 4
58443: MOD
58444: PUSH
58445: LD_INT 1
58447: PLUS
58448: PPUSH
58449: CALL_OW 259
58453: PUSH
58454: LD_INT 1
58456: PLUS
58457: PPUSH
58458: CALL_OW 237
58462: GO 58364
58464: POP
58465: POP
// end ;
58466: PPOPN 3
58468: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
58469: LD_EXP 40
58473: PUSH
58474: LD_EXP 48
58478: AND
58479: IFFALSE 58499
58481: GO 58483
58483: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
58484: LD_INT 4
58486: PPUSH
58487: LD_OWVAR 2
58491: PPUSH
58492: LD_INT 0
58494: PPUSH
58495: CALL_OW 324
58499: END
// every 0 0$1 trigger StreamModeActive and sShovel do
58500: LD_EXP 40
58504: PUSH
58505: LD_EXP 77
58509: AND
58510: IFFALSE 58530
58512: GO 58514
58514: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
58515: LD_INT 19
58517: PPUSH
58518: LD_OWVAR 2
58522: PPUSH
58523: LD_INT 0
58525: PPUSH
58526: CALL_OW 324
58530: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
58531: LD_EXP 40
58535: PUSH
58536: LD_EXP 49
58540: AND
58541: IFFALSE 58643
58543: GO 58545
58545: DISABLE
58546: LD_INT 0
58548: PPUSH
58549: PPUSH
// begin enable ;
58550: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
58551: LD_ADDR_VAR 0 2
58555: PUSH
58556: LD_INT 22
58558: PUSH
58559: LD_OWVAR 2
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 2
58570: PUSH
58571: LD_INT 34
58573: PUSH
58574: LD_INT 11
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 34
58583: PUSH
58584: LD_INT 30
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: LIST
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PPUSH
58600: CALL_OW 69
58604: ST_TO_ADDR
// if not tmp then
58605: LD_VAR 0 2
58609: NOT
58610: IFFALSE 58614
// exit ;
58612: GO 58643
// for i in tmp do
58614: LD_ADDR_VAR 0 1
58618: PUSH
58619: LD_VAR 0 2
58623: PUSH
58624: FOR_IN
58625: IFFALSE 58641
// begin SetLives ( i , 0 ) ;
58627: LD_VAR 0 1
58631: PPUSH
58632: LD_INT 0
58634: PPUSH
58635: CALL_OW 234
// end ;
58639: GO 58624
58641: POP
58642: POP
// end ;
58643: PPOPN 2
58645: END
// every 0 0$1 trigger StreamModeActive and sBunker do
58646: LD_EXP 40
58650: PUSH
58651: LD_EXP 50
58655: AND
58656: IFFALSE 58676
58658: GO 58660
58660: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
58661: LD_INT 32
58663: PPUSH
58664: LD_OWVAR 2
58668: PPUSH
58669: LD_INT 0
58671: PPUSH
58672: CALL_OW 324
58676: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
58677: LD_EXP 40
58681: PUSH
58682: LD_EXP 51
58686: AND
58687: IFFALSE 58868
58689: GO 58691
58691: DISABLE
58692: LD_INT 0
58694: PPUSH
58695: PPUSH
58696: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
58697: LD_ADDR_VAR 0 2
58701: PUSH
58702: LD_INT 22
58704: PUSH
58705: LD_OWVAR 2
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 33
58716: PUSH
58717: LD_INT 3
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PPUSH
58728: CALL_OW 69
58732: ST_TO_ADDR
// if not tmp then
58733: LD_VAR 0 2
58737: NOT
58738: IFFALSE 58742
// exit ;
58740: GO 58868
// side := 0 ;
58742: LD_ADDR_VAR 0 3
58746: PUSH
58747: LD_INT 0
58749: ST_TO_ADDR
// for i := 1 to 8 do
58750: LD_ADDR_VAR 0 1
58754: PUSH
58755: DOUBLE
58756: LD_INT 1
58758: DEC
58759: ST_TO_ADDR
58760: LD_INT 8
58762: PUSH
58763: FOR_TO
58764: IFFALSE 58812
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
58766: LD_OWVAR 2
58770: PUSH
58771: LD_VAR 0 1
58775: NONEQUAL
58776: PUSH
58777: LD_OWVAR 2
58781: PPUSH
58782: LD_VAR 0 1
58786: PPUSH
58787: CALL_OW 81
58791: PUSH
58792: LD_INT 2
58794: EQUAL
58795: AND
58796: IFFALSE 58810
// begin side := i ;
58798: LD_ADDR_VAR 0 3
58802: PUSH
58803: LD_VAR 0 1
58807: ST_TO_ADDR
// break ;
58808: GO 58812
// end ;
58810: GO 58763
58812: POP
58813: POP
// if not side then
58814: LD_VAR 0 3
58818: NOT
58819: IFFALSE 58823
// exit ;
58821: GO 58868
// for i := 1 to tmp do
58823: LD_ADDR_VAR 0 1
58827: PUSH
58828: DOUBLE
58829: LD_INT 1
58831: DEC
58832: ST_TO_ADDR
58833: LD_VAR 0 2
58837: PUSH
58838: FOR_TO
58839: IFFALSE 58866
// if Prob ( 60 ) then
58841: LD_INT 60
58843: PPUSH
58844: CALL_OW 13
58848: IFFALSE 58864
// SetSide ( i , side ) ;
58850: LD_VAR 0 1
58854: PPUSH
58855: LD_VAR 0 3
58859: PPUSH
58860: CALL_OW 235
58864: GO 58838
58866: POP
58867: POP
// end ;
58868: PPOPN 3
58870: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
58871: LD_EXP 40
58875: PUSH
58876: LD_EXP 53
58880: AND
58881: IFFALSE 59000
58883: GO 58885
58885: DISABLE
58886: LD_INT 0
58888: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
58889: LD_ADDR_VAR 0 1
58893: PUSH
58894: LD_INT 22
58896: PUSH
58897: LD_OWVAR 2
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 21
58908: PUSH
58909: LD_INT 1
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 3
58918: PUSH
58919: LD_INT 23
58921: PUSH
58922: LD_INT 0
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: LIST
58937: PPUSH
58938: CALL_OW 69
58942: PUSH
58943: FOR_IN
58944: IFFALSE 58998
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
58946: LD_VAR 0 1
58950: PPUSH
58951: CALL_OW 257
58955: PUSH
58956: LD_INT 1
58958: PUSH
58959: LD_INT 2
58961: PUSH
58962: LD_INT 3
58964: PUSH
58965: LD_INT 4
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: IN
58974: IFFALSE 58996
// SetClass ( un , rand ( 1 , 4 ) ) ;
58976: LD_VAR 0 1
58980: PPUSH
58981: LD_INT 1
58983: PPUSH
58984: LD_INT 4
58986: PPUSH
58987: CALL_OW 12
58991: PPUSH
58992: CALL_OW 336
58996: GO 58943
58998: POP
58999: POP
// end ;
59000: PPOPN 1
59002: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
59003: LD_EXP 40
59007: PUSH
59008: LD_EXP 52
59012: AND
59013: IFFALSE 59092
59015: GO 59017
59017: DISABLE
59018: LD_INT 0
59020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
59021: LD_ADDR_VAR 0 1
59025: PUSH
59026: LD_INT 22
59028: PUSH
59029: LD_OWVAR 2
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 21
59040: PUSH
59041: LD_INT 3
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PPUSH
59052: CALL_OW 69
59056: ST_TO_ADDR
// if not tmp then
59057: LD_VAR 0 1
59061: NOT
59062: IFFALSE 59066
// exit ;
59064: GO 59092
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
59066: LD_VAR 0 1
59070: PUSH
59071: LD_INT 1
59073: PPUSH
59074: LD_VAR 0 1
59078: PPUSH
59079: CALL_OW 12
59083: ARRAY
59084: PPUSH
59085: LD_INT 100
59087: PPUSH
59088: CALL_OW 234
// end ;
59092: PPOPN 1
59094: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
59095: LD_EXP 40
59099: PUSH
59100: LD_EXP 54
59104: AND
59105: IFFALSE 59203
59107: GO 59109
59109: DISABLE
59110: LD_INT 0
59112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59113: LD_ADDR_VAR 0 1
59117: PUSH
59118: LD_INT 22
59120: PUSH
59121: LD_OWVAR 2
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 21
59132: PUSH
59133: LD_INT 1
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PPUSH
59144: CALL_OW 69
59148: ST_TO_ADDR
// if not tmp then
59149: LD_VAR 0 1
59153: NOT
59154: IFFALSE 59158
// exit ;
59156: GO 59203
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
59158: LD_VAR 0 1
59162: PUSH
59163: LD_INT 1
59165: PPUSH
59166: LD_VAR 0 1
59170: PPUSH
59171: CALL_OW 12
59175: ARRAY
59176: PPUSH
59177: LD_INT 1
59179: PPUSH
59180: LD_INT 4
59182: PPUSH
59183: CALL_OW 12
59187: PPUSH
59188: LD_INT 3000
59190: PPUSH
59191: LD_INT 9000
59193: PPUSH
59194: CALL_OW 12
59198: PPUSH
59199: CALL_OW 492
// end ;
59203: PPOPN 1
59205: END
// every 0 0$1 trigger StreamModeActive and sDepot do
59206: LD_EXP 40
59210: PUSH
59211: LD_EXP 55
59215: AND
59216: IFFALSE 59236
59218: GO 59220
59220: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
59221: LD_INT 1
59223: PPUSH
59224: LD_OWVAR 2
59228: PPUSH
59229: LD_INT 0
59231: PPUSH
59232: CALL_OW 324
59236: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
59237: LD_EXP 40
59241: PUSH
59242: LD_EXP 56
59246: AND
59247: IFFALSE 59330
59249: GO 59251
59251: DISABLE
59252: LD_INT 0
59254: PPUSH
59255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
59256: LD_ADDR_VAR 0 2
59260: PUSH
59261: LD_INT 22
59263: PUSH
59264: LD_OWVAR 2
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 21
59275: PUSH
59276: LD_INT 3
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PPUSH
59287: CALL_OW 69
59291: ST_TO_ADDR
// if not tmp then
59292: LD_VAR 0 2
59296: NOT
59297: IFFALSE 59301
// exit ;
59299: GO 59330
// for i in tmp do
59301: LD_ADDR_VAR 0 1
59305: PUSH
59306: LD_VAR 0 2
59310: PUSH
59311: FOR_IN
59312: IFFALSE 59328
// SetBLevel ( i , 10 ) ;
59314: LD_VAR 0 1
59318: PPUSH
59319: LD_INT 10
59321: PPUSH
59322: CALL_OW 241
59326: GO 59311
59328: POP
59329: POP
// end ;
59330: PPOPN 2
59332: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
59333: LD_EXP 40
59337: PUSH
59338: LD_EXP 57
59342: AND
59343: IFFALSE 59454
59345: GO 59347
59347: DISABLE
59348: LD_INT 0
59350: PPUSH
59351: PPUSH
59352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59353: LD_ADDR_VAR 0 3
59357: PUSH
59358: LD_INT 22
59360: PUSH
59361: LD_OWVAR 2
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 25
59372: PUSH
59373: LD_INT 1
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PPUSH
59384: CALL_OW 69
59388: ST_TO_ADDR
// if not tmp then
59389: LD_VAR 0 3
59393: NOT
59394: IFFALSE 59398
// exit ;
59396: GO 59454
// un := tmp [ rand ( 1 , tmp ) ] ;
59398: LD_ADDR_VAR 0 2
59402: PUSH
59403: LD_VAR 0 3
59407: PUSH
59408: LD_INT 1
59410: PPUSH
59411: LD_VAR 0 3
59415: PPUSH
59416: CALL_OW 12
59420: ARRAY
59421: ST_TO_ADDR
// if Crawls ( un ) then
59422: LD_VAR 0 2
59426: PPUSH
59427: CALL_OW 318
59431: IFFALSE 59442
// ComWalk ( un ) ;
59433: LD_VAR 0 2
59437: PPUSH
59438: CALL_OW 138
// SetClass ( un , class_sniper ) ;
59442: LD_VAR 0 2
59446: PPUSH
59447: LD_INT 5
59449: PPUSH
59450: CALL_OW 336
// end ;
59454: PPOPN 3
59456: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
59457: LD_EXP 40
59461: PUSH
59462: LD_EXP 58
59466: AND
59467: PUSH
59468: LD_OWVAR 67
59472: PUSH
59473: LD_INT 3
59475: LESS
59476: AND
59477: IFFALSE 59496
59479: GO 59481
59481: DISABLE
// Difficulty := Difficulty + 1 ;
59482: LD_ADDR_OWVAR 67
59486: PUSH
59487: LD_OWVAR 67
59491: PUSH
59492: LD_INT 1
59494: PLUS
59495: ST_TO_ADDR
59496: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
59497: LD_EXP 40
59501: PUSH
59502: LD_EXP 59
59506: AND
59507: IFFALSE 59610
59509: GO 59511
59511: DISABLE
59512: LD_INT 0
59514: PPUSH
// begin for i := 1 to 5 do
59515: LD_ADDR_VAR 0 1
59519: PUSH
59520: DOUBLE
59521: LD_INT 1
59523: DEC
59524: ST_TO_ADDR
59525: LD_INT 5
59527: PUSH
59528: FOR_TO
59529: IFFALSE 59608
// begin uc_nation := nation_nature ;
59531: LD_ADDR_OWVAR 21
59535: PUSH
59536: LD_INT 0
59538: ST_TO_ADDR
// uc_side := 0 ;
59539: LD_ADDR_OWVAR 20
59543: PUSH
59544: LD_INT 0
59546: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
59547: LD_ADDR_OWVAR 29
59551: PUSH
59552: LD_INT 12
59554: PUSH
59555: LD_INT 12
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: ST_TO_ADDR
// hc_agressivity := 20 ;
59562: LD_ADDR_OWVAR 35
59566: PUSH
59567: LD_INT 20
59569: ST_TO_ADDR
// hc_class := class_tiger ;
59570: LD_ADDR_OWVAR 28
59574: PUSH
59575: LD_INT 14
59577: ST_TO_ADDR
// hc_gallery :=  ;
59578: LD_ADDR_OWVAR 33
59582: PUSH
59583: LD_STRING 
59585: ST_TO_ADDR
// hc_name :=  ;
59586: LD_ADDR_OWVAR 26
59590: PUSH
59591: LD_STRING 
59593: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
59594: CALL_OW 44
59598: PPUSH
59599: LD_INT 0
59601: PPUSH
59602: CALL_OW 51
// end ;
59606: GO 59528
59608: POP
59609: POP
// end ;
59610: PPOPN 1
59612: END
// every 0 0$1 trigger StreamModeActive and sBomb do
59613: LD_EXP 40
59617: PUSH
59618: LD_EXP 60
59622: AND
59623: IFFALSE 59632
59625: GO 59627
59627: DISABLE
// StreamSibBomb ;
59628: CALL 59633 0 0
59632: END
// export function StreamSibBomb ; var i , x , y ; begin
59633: LD_INT 0
59635: PPUSH
59636: PPUSH
59637: PPUSH
59638: PPUSH
// result := false ;
59639: LD_ADDR_VAR 0 1
59643: PUSH
59644: LD_INT 0
59646: ST_TO_ADDR
// for i := 1 to 16 do
59647: LD_ADDR_VAR 0 2
59651: PUSH
59652: DOUBLE
59653: LD_INT 1
59655: DEC
59656: ST_TO_ADDR
59657: LD_INT 16
59659: PUSH
59660: FOR_TO
59661: IFFALSE 59860
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
59663: LD_ADDR_VAR 0 3
59667: PUSH
59668: LD_INT 10
59670: PUSH
59671: LD_INT 20
59673: PUSH
59674: LD_INT 30
59676: PUSH
59677: LD_INT 40
59679: PUSH
59680: LD_INT 50
59682: PUSH
59683: LD_INT 60
59685: PUSH
59686: LD_INT 70
59688: PUSH
59689: LD_INT 80
59691: PUSH
59692: LD_INT 90
59694: PUSH
59695: LD_INT 100
59697: PUSH
59698: LD_INT 110
59700: PUSH
59701: LD_INT 120
59703: PUSH
59704: LD_INT 130
59706: PUSH
59707: LD_INT 140
59709: PUSH
59710: LD_INT 150
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 1
59732: PPUSH
59733: LD_INT 15
59735: PPUSH
59736: CALL_OW 12
59740: ARRAY
59741: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
59742: LD_ADDR_VAR 0 4
59746: PUSH
59747: LD_INT 10
59749: PUSH
59750: LD_INT 20
59752: PUSH
59753: LD_INT 30
59755: PUSH
59756: LD_INT 40
59758: PUSH
59759: LD_INT 50
59761: PUSH
59762: LD_INT 60
59764: PUSH
59765: LD_INT 70
59767: PUSH
59768: LD_INT 80
59770: PUSH
59771: LD_INT 90
59773: PUSH
59774: LD_INT 100
59776: PUSH
59777: LD_INT 110
59779: PUSH
59780: LD_INT 120
59782: PUSH
59783: LD_INT 130
59785: PUSH
59786: LD_INT 140
59788: PUSH
59789: LD_INT 150
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 1
59811: PPUSH
59812: LD_INT 15
59814: PPUSH
59815: CALL_OW 12
59819: ARRAY
59820: ST_TO_ADDR
// if ValidHex ( x , y ) then
59821: LD_VAR 0 3
59825: PPUSH
59826: LD_VAR 0 4
59830: PPUSH
59831: CALL_OW 488
59835: IFFALSE 59858
// begin result := [ x , y ] ;
59837: LD_ADDR_VAR 0 1
59841: PUSH
59842: LD_VAR 0 3
59846: PUSH
59847: LD_VAR 0 4
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: ST_TO_ADDR
// break ;
59856: GO 59860
// end ; end ;
59858: GO 59660
59860: POP
59861: POP
// if result then
59862: LD_VAR 0 1
59866: IFFALSE 59926
// begin ToLua ( playSibBomb() ) ;
59868: LD_STRING playSibBomb()
59870: PPUSH
59871: CALL_OW 559
// wait ( 0 0$14 ) ;
59875: LD_INT 490
59877: PPUSH
59878: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
59882: LD_VAR 0 1
59886: PUSH
59887: LD_INT 1
59889: ARRAY
59890: PPUSH
59891: LD_VAR 0 1
59895: PUSH
59896: LD_INT 2
59898: ARRAY
59899: PPUSH
59900: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
59904: LD_VAR 0 1
59908: PUSH
59909: LD_INT 1
59911: ARRAY
59912: PPUSH
59913: LD_VAR 0 1
59917: PUSH
59918: LD_INT 2
59920: ARRAY
59921: PPUSH
59922: CALL_OW 429
// end ; end ;
59926: LD_VAR 0 1
59930: RET
// every 0 0$1 trigger StreamModeActive and sReset do
59931: LD_EXP 40
59935: PUSH
59936: LD_EXP 62
59940: AND
59941: IFFALSE 59953
59943: GO 59945
59945: DISABLE
// YouLost (  ) ;
59946: LD_STRING 
59948: PPUSH
59949: CALL_OW 104
59953: END
// every 0 0$1 trigger StreamModeActive and sFog do
59954: LD_EXP 40
59958: PUSH
59959: LD_EXP 61
59963: AND
59964: IFFALSE 59978
59966: GO 59968
59968: DISABLE
// FogOff ( your_side ) ;
59969: LD_OWVAR 2
59973: PPUSH
59974: CALL_OW 344
59978: END
// every 0 0$1 trigger StreamModeActive and sSun do
59979: LD_EXP 40
59983: PUSH
59984: LD_EXP 63
59988: AND
59989: IFFALSE 60017
59991: GO 59993
59993: DISABLE
// begin solar_recharge_percent := 0 ;
59994: LD_ADDR_OWVAR 79
59998: PUSH
59999: LD_INT 0
60001: ST_TO_ADDR
// wait ( 5 5$00 ) ;
60002: LD_INT 10500
60004: PPUSH
60005: CALL_OW 67
// solar_recharge_percent := 100 ;
60009: LD_ADDR_OWVAR 79
60013: PUSH
60014: LD_INT 100
60016: ST_TO_ADDR
// end ;
60017: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
60018: LD_EXP 40
60022: PUSH
60023: LD_EXP 64
60027: AND
60028: IFFALSE 60267
60030: GO 60032
60032: DISABLE
60033: LD_INT 0
60035: PPUSH
60036: PPUSH
60037: PPUSH
// begin tmp := [ ] ;
60038: LD_ADDR_VAR 0 3
60042: PUSH
60043: EMPTY
60044: ST_TO_ADDR
// for i := 1 to 6 do
60045: LD_ADDR_VAR 0 1
60049: PUSH
60050: DOUBLE
60051: LD_INT 1
60053: DEC
60054: ST_TO_ADDR
60055: LD_INT 6
60057: PUSH
60058: FOR_TO
60059: IFFALSE 60164
// begin uc_nation := nation_nature ;
60061: LD_ADDR_OWVAR 21
60065: PUSH
60066: LD_INT 0
60068: ST_TO_ADDR
// uc_side := 0 ;
60069: LD_ADDR_OWVAR 20
60073: PUSH
60074: LD_INT 0
60076: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
60077: LD_ADDR_OWVAR 29
60081: PUSH
60082: LD_INT 12
60084: PUSH
60085: LD_INT 12
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: ST_TO_ADDR
// hc_agressivity := 20 ;
60092: LD_ADDR_OWVAR 35
60096: PUSH
60097: LD_INT 20
60099: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
60100: LD_ADDR_OWVAR 28
60104: PUSH
60105: LD_INT 17
60107: ST_TO_ADDR
// hc_gallery :=  ;
60108: LD_ADDR_OWVAR 33
60112: PUSH
60113: LD_STRING 
60115: ST_TO_ADDR
// hc_name :=  ;
60116: LD_ADDR_OWVAR 26
60120: PUSH
60121: LD_STRING 
60123: ST_TO_ADDR
// un := CreateHuman ;
60124: LD_ADDR_VAR 0 2
60128: PUSH
60129: CALL_OW 44
60133: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
60134: LD_VAR 0 2
60138: PPUSH
60139: LD_INT 1
60141: PPUSH
60142: CALL_OW 51
// tmp := tmp ^ un ;
60146: LD_ADDR_VAR 0 3
60150: PUSH
60151: LD_VAR 0 3
60155: PUSH
60156: LD_VAR 0 2
60160: ADD
60161: ST_TO_ADDR
// end ;
60162: GO 60058
60164: POP
60165: POP
// repeat wait ( 0 0$1 ) ;
60166: LD_INT 35
60168: PPUSH
60169: CALL_OW 67
// for un in tmp do
60173: LD_ADDR_VAR 0 2
60177: PUSH
60178: LD_VAR 0 3
60182: PUSH
60183: FOR_IN
60184: IFFALSE 60258
// begin if IsDead ( un ) then
60186: LD_VAR 0 2
60190: PPUSH
60191: CALL_OW 301
60195: IFFALSE 60215
// begin tmp := tmp diff un ;
60197: LD_ADDR_VAR 0 3
60201: PUSH
60202: LD_VAR 0 3
60206: PUSH
60207: LD_VAR 0 2
60211: DIFF
60212: ST_TO_ADDR
// continue ;
60213: GO 60183
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
60215: LD_VAR 0 2
60219: PPUSH
60220: LD_INT 3
60222: PUSH
60223: LD_INT 22
60225: PUSH
60226: LD_INT 0
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PPUSH
60237: CALL_OW 69
60241: PPUSH
60242: LD_VAR 0 2
60246: PPUSH
60247: CALL_OW 74
60251: PPUSH
60252: CALL_OW 115
// end ;
60256: GO 60183
60258: POP
60259: POP
// until not tmp ;
60260: LD_VAR 0 3
60264: NOT
60265: IFFALSE 60166
// end ;
60267: PPOPN 3
60269: END
// every 0 0$1 trigger StreamModeActive and sTroll do
60270: LD_EXP 40
60274: PUSH
60275: LD_EXP 65
60279: AND
60280: IFFALSE 60334
60282: GO 60284
60284: DISABLE
// begin ToLua ( displayTroll(); ) ;
60285: LD_STRING displayTroll();
60287: PPUSH
60288: CALL_OW 559
// wait ( 3 3$00 ) ;
60292: LD_INT 6300
60294: PPUSH
60295: CALL_OW 67
// ToLua ( hideTroll(); ) ;
60299: LD_STRING hideTroll();
60301: PPUSH
60302: CALL_OW 559
// wait ( 1 1$00 ) ;
60306: LD_INT 2100
60308: PPUSH
60309: CALL_OW 67
// ToLua ( displayTroll(); ) ;
60313: LD_STRING displayTroll();
60315: PPUSH
60316: CALL_OW 559
// wait ( 1 1$00 ) ;
60320: LD_INT 2100
60322: PPUSH
60323: CALL_OW 67
// ToLua ( hideTroll(); ) ;
60327: LD_STRING hideTroll();
60329: PPUSH
60330: CALL_OW 559
// end ;
60334: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
60335: LD_EXP 40
60339: PUSH
60340: LD_EXP 66
60344: AND
60345: IFFALSE 60408
60347: GO 60349
60349: DISABLE
60350: LD_INT 0
60352: PPUSH
// begin p := 0 ;
60353: LD_ADDR_VAR 0 1
60357: PUSH
60358: LD_INT 0
60360: ST_TO_ADDR
// repeat game_speed := 1 ;
60361: LD_ADDR_OWVAR 65
60365: PUSH
60366: LD_INT 1
60368: ST_TO_ADDR
// wait ( 0 0$1 ) ;
60369: LD_INT 35
60371: PPUSH
60372: CALL_OW 67
// p := p + 1 ;
60376: LD_ADDR_VAR 0 1
60380: PUSH
60381: LD_VAR 0 1
60385: PUSH
60386: LD_INT 1
60388: PLUS
60389: ST_TO_ADDR
// until p >= 60 ;
60390: LD_VAR 0 1
60394: PUSH
60395: LD_INT 60
60397: GREATEREQUAL
60398: IFFALSE 60361
// game_speed := 4 ;
60400: LD_ADDR_OWVAR 65
60404: PUSH
60405: LD_INT 4
60407: ST_TO_ADDR
// end ;
60408: PPOPN 1
60410: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
60411: LD_EXP 40
60415: PUSH
60416: LD_EXP 67
60420: AND
60421: IFFALSE 60567
60423: GO 60425
60425: DISABLE
60426: LD_INT 0
60428: PPUSH
60429: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60430: LD_ADDR_VAR 0 1
60434: PUSH
60435: LD_INT 22
60437: PUSH
60438: LD_OWVAR 2
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 2
60449: PUSH
60450: LD_INT 30
60452: PUSH
60453: LD_INT 0
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 30
60462: PUSH
60463: LD_INT 1
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: LIST
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PPUSH
60479: CALL_OW 69
60483: ST_TO_ADDR
// if not depot then
60484: LD_VAR 0 1
60488: NOT
60489: IFFALSE 60493
// exit ;
60491: GO 60567
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
60493: LD_ADDR_VAR 0 2
60497: PUSH
60498: LD_VAR 0 1
60502: PUSH
60503: LD_INT 1
60505: PPUSH
60506: LD_VAR 0 1
60510: PPUSH
60511: CALL_OW 12
60515: ARRAY
60516: PPUSH
60517: CALL_OW 274
60521: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
60522: LD_VAR 0 2
60526: PPUSH
60527: LD_INT 1
60529: PPUSH
60530: LD_INT 0
60532: PPUSH
60533: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
60537: LD_VAR 0 2
60541: PPUSH
60542: LD_INT 2
60544: PPUSH
60545: LD_INT 0
60547: PPUSH
60548: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
60552: LD_VAR 0 2
60556: PPUSH
60557: LD_INT 3
60559: PPUSH
60560: LD_INT 0
60562: PPUSH
60563: CALL_OW 277
// end ;
60567: PPOPN 2
60569: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
60570: LD_EXP 40
60574: PUSH
60575: LD_EXP 68
60579: AND
60580: IFFALSE 60677
60582: GO 60584
60584: DISABLE
60585: LD_INT 0
60587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60588: LD_ADDR_VAR 0 1
60592: PUSH
60593: LD_INT 22
60595: PUSH
60596: LD_OWVAR 2
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 21
60607: PUSH
60608: LD_INT 1
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 3
60617: PUSH
60618: LD_INT 23
60620: PUSH
60621: LD_INT 0
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: LIST
60636: PPUSH
60637: CALL_OW 69
60641: ST_TO_ADDR
// if not tmp then
60642: LD_VAR 0 1
60646: NOT
60647: IFFALSE 60651
// exit ;
60649: GO 60677
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
60651: LD_VAR 0 1
60655: PUSH
60656: LD_INT 1
60658: PPUSH
60659: LD_VAR 0 1
60663: PPUSH
60664: CALL_OW 12
60668: ARRAY
60669: PPUSH
60670: LD_INT 200
60672: PPUSH
60673: CALL_OW 234
// end ;
60677: PPOPN 1
60679: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
60680: LD_EXP 40
60684: PUSH
60685: LD_EXP 69
60689: AND
60690: IFFALSE 60769
60692: GO 60694
60694: DISABLE
60695: LD_INT 0
60697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
60698: LD_ADDR_VAR 0 1
60702: PUSH
60703: LD_INT 22
60705: PUSH
60706: LD_OWVAR 2
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 21
60717: PUSH
60718: LD_INT 2
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PPUSH
60729: CALL_OW 69
60733: ST_TO_ADDR
// if not tmp then
60734: LD_VAR 0 1
60738: NOT
60739: IFFALSE 60743
// exit ;
60741: GO 60769
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
60743: LD_VAR 0 1
60747: PUSH
60748: LD_INT 1
60750: PPUSH
60751: LD_VAR 0 1
60755: PPUSH
60756: CALL_OW 12
60760: ARRAY
60761: PPUSH
60762: LD_INT 60
60764: PPUSH
60765: CALL_OW 234
// end ;
60769: PPOPN 1
60771: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
60772: LD_EXP 40
60776: PUSH
60777: LD_EXP 70
60781: AND
60782: IFFALSE 60881
60784: GO 60786
60786: DISABLE
60787: LD_INT 0
60789: PPUSH
60790: PPUSH
// begin enable ;
60791: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
60792: LD_ADDR_VAR 0 1
60796: PUSH
60797: LD_INT 22
60799: PUSH
60800: LD_OWVAR 2
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 61
60811: PUSH
60812: EMPTY
60813: LIST
60814: PUSH
60815: LD_INT 33
60817: PUSH
60818: LD_INT 2
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: LIST
60829: PPUSH
60830: CALL_OW 69
60834: ST_TO_ADDR
// if not tmp then
60835: LD_VAR 0 1
60839: NOT
60840: IFFALSE 60844
// exit ;
60842: GO 60881
// for i in tmp do
60844: LD_ADDR_VAR 0 2
60848: PUSH
60849: LD_VAR 0 1
60853: PUSH
60854: FOR_IN
60855: IFFALSE 60879
// if IsControledBy ( i ) then
60857: LD_VAR 0 2
60861: PPUSH
60862: CALL_OW 312
60866: IFFALSE 60877
// ComUnlink ( i ) ;
60868: LD_VAR 0 2
60872: PPUSH
60873: CALL_OW 136
60877: GO 60854
60879: POP
60880: POP
// end ;
60881: PPOPN 2
60883: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
60884: LD_EXP 40
60888: PUSH
60889: LD_EXP 71
60893: AND
60894: IFFALSE 61034
60896: GO 60898
60898: DISABLE
60899: LD_INT 0
60901: PPUSH
60902: PPUSH
// begin ToLua ( displayPowell(); ) ;
60903: LD_STRING displayPowell();
60905: PPUSH
60906: CALL_OW 559
// uc_side := 0 ;
60910: LD_ADDR_OWVAR 20
60914: PUSH
60915: LD_INT 0
60917: ST_TO_ADDR
// uc_nation := 2 ;
60918: LD_ADDR_OWVAR 21
60922: PUSH
60923: LD_INT 2
60925: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
60926: LD_ADDR_OWVAR 37
60930: PUSH
60931: LD_INT 14
60933: ST_TO_ADDR
// vc_engine := engine_siberite ;
60934: LD_ADDR_OWVAR 39
60938: PUSH
60939: LD_INT 3
60941: ST_TO_ADDR
// vc_control := control_apeman ;
60942: LD_ADDR_OWVAR 38
60946: PUSH
60947: LD_INT 5
60949: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
60950: LD_ADDR_OWVAR 40
60954: PUSH
60955: LD_INT 29
60957: ST_TO_ADDR
// un := CreateVehicle ;
60958: LD_ADDR_VAR 0 2
60962: PUSH
60963: CALL_OW 45
60967: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60968: LD_VAR 0 2
60972: PPUSH
60973: LD_INT 1
60975: PPUSH
60976: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
60980: LD_INT 35
60982: PPUSH
60983: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
60987: LD_VAR 0 2
60991: PPUSH
60992: LD_INT 22
60994: PUSH
60995: LD_OWVAR 2
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PPUSH
61004: CALL_OW 69
61008: PPUSH
61009: LD_VAR 0 2
61013: PPUSH
61014: CALL_OW 74
61018: PPUSH
61019: CALL_OW 115
// until IsDead ( un ) ;
61023: LD_VAR 0 2
61027: PPUSH
61028: CALL_OW 301
61032: IFFALSE 60980
// end ;
61034: PPOPN 2
61036: END
// every 0 0$1 trigger StreamModeActive and sStu do
61037: LD_EXP 40
61041: PUSH
61042: LD_EXP 79
61046: AND
61047: IFFALSE 61063
61049: GO 61051
61051: DISABLE
// begin ToLua ( displayStucuk(); ) ;
61052: LD_STRING displayStucuk();
61054: PPUSH
61055: CALL_OW 559
// ResetFog ;
61059: CALL_OW 335
// end ;
61063: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
61064: LD_EXP 40
61068: PUSH
61069: LD_EXP 72
61073: AND
61074: IFFALSE 61215
61076: GO 61078
61078: DISABLE
61079: LD_INT 0
61081: PPUSH
61082: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
61083: LD_ADDR_VAR 0 2
61087: PUSH
61088: LD_INT 22
61090: PUSH
61091: LD_OWVAR 2
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 21
61102: PUSH
61103: LD_INT 1
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PPUSH
61114: CALL_OW 69
61118: ST_TO_ADDR
// if not tmp then
61119: LD_VAR 0 2
61123: NOT
61124: IFFALSE 61128
// exit ;
61126: GO 61215
// un := tmp [ rand ( 1 , tmp ) ] ;
61128: LD_ADDR_VAR 0 1
61132: PUSH
61133: LD_VAR 0 2
61137: PUSH
61138: LD_INT 1
61140: PPUSH
61141: LD_VAR 0 2
61145: PPUSH
61146: CALL_OW 12
61150: ARRAY
61151: ST_TO_ADDR
// SetSide ( un , 0 ) ;
61152: LD_VAR 0 1
61156: PPUSH
61157: LD_INT 0
61159: PPUSH
61160: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
61164: LD_VAR 0 1
61168: PPUSH
61169: LD_OWVAR 3
61173: PUSH
61174: LD_VAR 0 1
61178: DIFF
61179: PPUSH
61180: LD_VAR 0 1
61184: PPUSH
61185: CALL_OW 74
61189: PPUSH
61190: CALL_OW 115
// wait ( 0 0$20 ) ;
61194: LD_INT 700
61196: PPUSH
61197: CALL_OW 67
// SetSide ( un , your_side ) ;
61201: LD_VAR 0 1
61205: PPUSH
61206: LD_OWVAR 2
61210: PPUSH
61211: CALL_OW 235
// end ;
61215: PPOPN 2
61217: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
61218: LD_EXP 40
61222: PUSH
61223: LD_EXP 73
61227: AND
61228: IFFALSE 61334
61230: GO 61232
61232: DISABLE
61233: LD_INT 0
61235: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61236: LD_ADDR_VAR 0 1
61240: PUSH
61241: LD_INT 22
61243: PUSH
61244: LD_OWVAR 2
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 2
61255: PUSH
61256: LD_INT 30
61258: PUSH
61259: LD_INT 0
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 30
61268: PUSH
61269: LD_INT 1
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: LIST
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PPUSH
61285: CALL_OW 69
61289: ST_TO_ADDR
// if not depot then
61290: LD_VAR 0 1
61294: NOT
61295: IFFALSE 61299
// exit ;
61297: GO 61334
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
61299: LD_VAR 0 1
61303: PUSH
61304: LD_INT 1
61306: ARRAY
61307: PPUSH
61308: CALL_OW 250
61312: PPUSH
61313: LD_VAR 0 1
61317: PUSH
61318: LD_INT 1
61320: ARRAY
61321: PPUSH
61322: CALL_OW 251
61326: PPUSH
61327: LD_INT 70
61329: PPUSH
61330: CALL_OW 495
// end ;
61334: PPOPN 1
61336: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
61337: LD_EXP 40
61341: PUSH
61342: LD_EXP 74
61346: AND
61347: IFFALSE 61558
61349: GO 61351
61351: DISABLE
61352: LD_INT 0
61354: PPUSH
61355: PPUSH
61356: PPUSH
61357: PPUSH
61358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
61359: LD_ADDR_VAR 0 5
61363: PUSH
61364: LD_INT 22
61366: PUSH
61367: LD_OWVAR 2
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 21
61378: PUSH
61379: LD_INT 1
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PPUSH
61390: CALL_OW 69
61394: ST_TO_ADDR
// if not tmp then
61395: LD_VAR 0 5
61399: NOT
61400: IFFALSE 61404
// exit ;
61402: GO 61558
// for i in tmp do
61404: LD_ADDR_VAR 0 1
61408: PUSH
61409: LD_VAR 0 5
61413: PUSH
61414: FOR_IN
61415: IFFALSE 61556
// begin d := rand ( 0 , 5 ) ;
61417: LD_ADDR_VAR 0 4
61421: PUSH
61422: LD_INT 0
61424: PPUSH
61425: LD_INT 5
61427: PPUSH
61428: CALL_OW 12
61432: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
61433: LD_ADDR_VAR 0 2
61437: PUSH
61438: LD_VAR 0 1
61442: PPUSH
61443: CALL_OW 250
61447: PPUSH
61448: LD_VAR 0 4
61452: PPUSH
61453: LD_INT 3
61455: PPUSH
61456: LD_INT 12
61458: PPUSH
61459: CALL_OW 12
61463: PPUSH
61464: CALL_OW 272
61468: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
61469: LD_ADDR_VAR 0 3
61473: PUSH
61474: LD_VAR 0 1
61478: PPUSH
61479: CALL_OW 251
61483: PPUSH
61484: LD_VAR 0 4
61488: PPUSH
61489: LD_INT 3
61491: PPUSH
61492: LD_INT 12
61494: PPUSH
61495: CALL_OW 12
61499: PPUSH
61500: CALL_OW 273
61504: ST_TO_ADDR
// if ValidHex ( x , y ) then
61505: LD_VAR 0 2
61509: PPUSH
61510: LD_VAR 0 3
61514: PPUSH
61515: CALL_OW 488
61519: IFFALSE 61554
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
61521: LD_VAR 0 1
61525: PPUSH
61526: LD_VAR 0 2
61530: PPUSH
61531: LD_VAR 0 3
61535: PPUSH
61536: LD_INT 3
61538: PPUSH
61539: LD_INT 6
61541: PPUSH
61542: CALL_OW 12
61546: PPUSH
61547: LD_INT 1
61549: PPUSH
61550: CALL_OW 483
// end ;
61554: GO 61414
61556: POP
61557: POP
// end ;
61558: PPOPN 5
61560: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
61561: LD_EXP 40
61565: PUSH
61566: LD_EXP 75
61570: AND
61571: IFFALSE 61665
61573: GO 61575
61575: DISABLE
61576: LD_INT 0
61578: PPUSH
61579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
61580: LD_ADDR_VAR 0 2
61584: PUSH
61585: LD_INT 22
61587: PUSH
61588: LD_OWVAR 2
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 32
61599: PUSH
61600: LD_INT 1
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 21
61609: PUSH
61610: LD_INT 2
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: LIST
61621: PPUSH
61622: CALL_OW 69
61626: ST_TO_ADDR
// if not tmp then
61627: LD_VAR 0 2
61631: NOT
61632: IFFALSE 61636
// exit ;
61634: GO 61665
// for i in tmp do
61636: LD_ADDR_VAR 0 1
61640: PUSH
61641: LD_VAR 0 2
61645: PUSH
61646: FOR_IN
61647: IFFALSE 61663
// SetFuel ( i , 0 ) ;
61649: LD_VAR 0 1
61653: PPUSH
61654: LD_INT 0
61656: PPUSH
61657: CALL_OW 240
61661: GO 61646
61663: POP
61664: POP
// end ;
61665: PPOPN 2
61667: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
61668: LD_EXP 40
61672: PUSH
61673: LD_EXP 76
61677: AND
61678: IFFALSE 61744
61680: GO 61682
61682: DISABLE
61683: LD_INT 0
61685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
61686: LD_ADDR_VAR 0 1
61690: PUSH
61691: LD_INT 22
61693: PUSH
61694: LD_OWVAR 2
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 30
61705: PUSH
61706: LD_INT 29
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PPUSH
61717: CALL_OW 69
61721: ST_TO_ADDR
// if not tmp then
61722: LD_VAR 0 1
61726: NOT
61727: IFFALSE 61731
// exit ;
61729: GO 61744
// DestroyUnit ( tmp [ 1 ] ) ;
61731: LD_VAR 0 1
61735: PUSH
61736: LD_INT 1
61738: ARRAY
61739: PPUSH
61740: CALL_OW 65
// end ;
61744: PPOPN 1
61746: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
61747: LD_EXP 40
61751: PUSH
61752: LD_EXP 78
61756: AND
61757: IFFALSE 61886
61759: GO 61761
61761: DISABLE
61762: LD_INT 0
61764: PPUSH
// begin uc_side := 0 ;
61765: LD_ADDR_OWVAR 20
61769: PUSH
61770: LD_INT 0
61772: ST_TO_ADDR
// uc_nation := nation_arabian ;
61773: LD_ADDR_OWVAR 21
61777: PUSH
61778: LD_INT 2
61780: ST_TO_ADDR
// hc_gallery :=  ;
61781: LD_ADDR_OWVAR 33
61785: PUSH
61786: LD_STRING 
61788: ST_TO_ADDR
// hc_name :=  ;
61789: LD_ADDR_OWVAR 26
61793: PUSH
61794: LD_STRING 
61796: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
61797: LD_INT 1
61799: PPUSH
61800: LD_INT 11
61802: PPUSH
61803: LD_INT 10
61805: PPUSH
61806: CALL_OW 380
// un := CreateHuman ;
61810: LD_ADDR_VAR 0 1
61814: PUSH
61815: CALL_OW 44
61819: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
61820: LD_VAR 0 1
61824: PPUSH
61825: LD_INT 1
61827: PPUSH
61828: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
61832: LD_INT 35
61834: PPUSH
61835: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
61839: LD_VAR 0 1
61843: PPUSH
61844: LD_INT 22
61846: PUSH
61847: LD_OWVAR 2
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PPUSH
61856: CALL_OW 69
61860: PPUSH
61861: LD_VAR 0 1
61865: PPUSH
61866: CALL_OW 74
61870: PPUSH
61871: CALL_OW 115
// until IsDead ( un ) ;
61875: LD_VAR 0 1
61879: PPUSH
61880: CALL_OW 301
61884: IFFALSE 61832
// end ;
61886: PPOPN 1
61888: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
61889: LD_EXP 40
61893: PUSH
61894: LD_EXP 80
61898: AND
61899: IFFALSE 61911
61901: GO 61903
61903: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
61904: LD_STRING earthquake(getX(game), 0, 32)
61906: PPUSH
61907: CALL_OW 559
61911: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
61912: LD_EXP 40
61916: PUSH
61917: LD_EXP 81
61921: AND
61922: IFFALSE 62013
61924: GO 61926
61926: DISABLE
61927: LD_INT 0
61929: PPUSH
// begin enable ;
61930: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
61931: LD_ADDR_VAR 0 1
61935: PUSH
61936: LD_INT 22
61938: PUSH
61939: LD_OWVAR 2
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 21
61950: PUSH
61951: LD_INT 2
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 33
61960: PUSH
61961: LD_INT 3
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: LIST
61972: PPUSH
61973: CALL_OW 69
61977: ST_TO_ADDR
// if not tmp then
61978: LD_VAR 0 1
61982: NOT
61983: IFFALSE 61987
// exit ;
61985: GO 62013
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
61987: LD_VAR 0 1
61991: PUSH
61992: LD_INT 1
61994: PPUSH
61995: LD_VAR 0 1
61999: PPUSH
62000: CALL_OW 12
62004: ARRAY
62005: PPUSH
62006: LD_INT 1
62008: PPUSH
62009: CALL_OW 234
// end ;
62013: PPOPN 1
62015: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
62016: LD_EXP 40
62020: PUSH
62021: LD_EXP 82
62025: AND
62026: IFFALSE 62167
62028: GO 62030
62030: DISABLE
62031: LD_INT 0
62033: PPUSH
62034: PPUSH
62035: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
62036: LD_ADDR_VAR 0 3
62040: PUSH
62041: LD_INT 22
62043: PUSH
62044: LD_OWVAR 2
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 25
62055: PUSH
62056: LD_INT 1
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PPUSH
62067: CALL_OW 69
62071: ST_TO_ADDR
// if not tmp then
62072: LD_VAR 0 3
62076: NOT
62077: IFFALSE 62081
// exit ;
62079: GO 62167
// un := tmp [ rand ( 1 , tmp ) ] ;
62081: LD_ADDR_VAR 0 2
62085: PUSH
62086: LD_VAR 0 3
62090: PUSH
62091: LD_INT 1
62093: PPUSH
62094: LD_VAR 0 3
62098: PPUSH
62099: CALL_OW 12
62103: ARRAY
62104: ST_TO_ADDR
// if Crawls ( un ) then
62105: LD_VAR 0 2
62109: PPUSH
62110: CALL_OW 318
62114: IFFALSE 62125
// ComWalk ( un ) ;
62116: LD_VAR 0 2
62120: PPUSH
62121: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
62125: LD_VAR 0 2
62129: PPUSH
62130: LD_INT 9
62132: PPUSH
62133: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
62137: LD_INT 28
62139: PPUSH
62140: LD_OWVAR 2
62144: PPUSH
62145: LD_INT 2
62147: PPUSH
62148: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
62152: LD_INT 29
62154: PPUSH
62155: LD_OWVAR 2
62159: PPUSH
62160: LD_INT 2
62162: PPUSH
62163: CALL_OW 322
// end ;
62167: PPOPN 3
62169: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
62170: LD_EXP 40
62174: PUSH
62175: LD_EXP 83
62179: AND
62180: IFFALSE 62291
62182: GO 62184
62184: DISABLE
62185: LD_INT 0
62187: PPUSH
62188: PPUSH
62189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
62190: LD_ADDR_VAR 0 3
62194: PUSH
62195: LD_INT 22
62197: PUSH
62198: LD_OWVAR 2
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 25
62209: PUSH
62210: LD_INT 1
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PPUSH
62221: CALL_OW 69
62225: ST_TO_ADDR
// if not tmp then
62226: LD_VAR 0 3
62230: NOT
62231: IFFALSE 62235
// exit ;
62233: GO 62291
// un := tmp [ rand ( 1 , tmp ) ] ;
62235: LD_ADDR_VAR 0 2
62239: PUSH
62240: LD_VAR 0 3
62244: PUSH
62245: LD_INT 1
62247: PPUSH
62248: LD_VAR 0 3
62252: PPUSH
62253: CALL_OW 12
62257: ARRAY
62258: ST_TO_ADDR
// if Crawls ( un ) then
62259: LD_VAR 0 2
62263: PPUSH
62264: CALL_OW 318
62268: IFFALSE 62279
// ComWalk ( un ) ;
62270: LD_VAR 0 2
62274: PPUSH
62275: CALL_OW 138
// SetClass ( un , class_mortar ) ;
62279: LD_VAR 0 2
62283: PPUSH
62284: LD_INT 8
62286: PPUSH
62287: CALL_OW 336
// end ;
62291: PPOPN 3
62293: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
62294: LD_EXP 40
62298: PUSH
62299: LD_EXP 84
62303: AND
62304: IFFALSE 62448
62306: GO 62308
62308: DISABLE
62309: LD_INT 0
62311: PPUSH
62312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
62313: LD_ADDR_VAR 0 2
62317: PUSH
62318: LD_INT 22
62320: PUSH
62321: LD_OWVAR 2
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 21
62332: PUSH
62333: LD_INT 2
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 2
62342: PUSH
62343: LD_INT 34
62345: PUSH
62346: LD_INT 12
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 34
62355: PUSH
62356: LD_INT 51
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 34
62365: PUSH
62366: LD_INT 32
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: LIST
62383: PPUSH
62384: CALL_OW 69
62388: ST_TO_ADDR
// if not tmp then
62389: LD_VAR 0 2
62393: NOT
62394: IFFALSE 62398
// exit ;
62396: GO 62448
// for i in tmp do
62398: LD_ADDR_VAR 0 1
62402: PUSH
62403: LD_VAR 0 2
62407: PUSH
62408: FOR_IN
62409: IFFALSE 62446
// if GetCargo ( i , mat_artifact ) = 0 then
62411: LD_VAR 0 1
62415: PPUSH
62416: LD_INT 4
62418: PPUSH
62419: CALL_OW 289
62423: PUSH
62424: LD_INT 0
62426: EQUAL
62427: IFFALSE 62444
// SetCargo ( i , mat_siberit , 100 ) ;
62429: LD_VAR 0 1
62433: PPUSH
62434: LD_INT 3
62436: PPUSH
62437: LD_INT 100
62439: PPUSH
62440: CALL_OW 290
62444: GO 62408
62446: POP
62447: POP
// end ;
62448: PPOPN 2
62450: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
62451: LD_EXP 40
62455: PUSH
62456: LD_EXP 85
62460: AND
62461: IFFALSE 62644
62463: GO 62465
62465: DISABLE
62466: LD_INT 0
62468: PPUSH
62469: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62470: LD_ADDR_VAR 0 2
62474: PUSH
62475: LD_INT 22
62477: PUSH
62478: LD_OWVAR 2
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PPUSH
62487: CALL_OW 69
62491: ST_TO_ADDR
// if not tmp then
62492: LD_VAR 0 2
62496: NOT
62497: IFFALSE 62501
// exit ;
62499: GO 62644
// for i := 1 to 2 do
62501: LD_ADDR_VAR 0 1
62505: PUSH
62506: DOUBLE
62507: LD_INT 1
62509: DEC
62510: ST_TO_ADDR
62511: LD_INT 2
62513: PUSH
62514: FOR_TO
62515: IFFALSE 62642
// begin uc_side := your_side ;
62517: LD_ADDR_OWVAR 20
62521: PUSH
62522: LD_OWVAR 2
62526: ST_TO_ADDR
// uc_nation := nation_american ;
62527: LD_ADDR_OWVAR 21
62531: PUSH
62532: LD_INT 1
62534: ST_TO_ADDR
// vc_chassis := us_morphling ;
62535: LD_ADDR_OWVAR 37
62539: PUSH
62540: LD_INT 5
62542: ST_TO_ADDR
// vc_engine := engine_siberite ;
62543: LD_ADDR_OWVAR 39
62547: PUSH
62548: LD_INT 3
62550: ST_TO_ADDR
// vc_control := control_computer ;
62551: LD_ADDR_OWVAR 38
62555: PUSH
62556: LD_INT 3
62558: ST_TO_ADDR
// vc_weapon := us_double_laser ;
62559: LD_ADDR_OWVAR 40
62563: PUSH
62564: LD_INT 10
62566: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
62567: LD_VAR 0 2
62571: PUSH
62572: LD_INT 1
62574: ARRAY
62575: PPUSH
62576: CALL_OW 310
62580: NOT
62581: IFFALSE 62628
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
62583: CALL_OW 45
62587: PPUSH
62588: LD_VAR 0 2
62592: PUSH
62593: LD_INT 1
62595: ARRAY
62596: PPUSH
62597: CALL_OW 250
62601: PPUSH
62602: LD_VAR 0 2
62606: PUSH
62607: LD_INT 1
62609: ARRAY
62610: PPUSH
62611: CALL_OW 251
62615: PPUSH
62616: LD_INT 12
62618: PPUSH
62619: LD_INT 1
62621: PPUSH
62622: CALL_OW 50
62626: GO 62640
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
62628: CALL_OW 45
62632: PPUSH
62633: LD_INT 1
62635: PPUSH
62636: CALL_OW 51
// end ;
62640: GO 62514
62642: POP
62643: POP
// end ;
62644: PPOPN 2
62646: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
62647: LD_EXP 40
62651: PUSH
62652: LD_EXP 86
62656: AND
62657: IFFALSE 62879
62659: GO 62661
62661: DISABLE
62662: LD_INT 0
62664: PPUSH
62665: PPUSH
62666: PPUSH
62667: PPUSH
62668: PPUSH
62669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62670: LD_ADDR_VAR 0 6
62674: PUSH
62675: LD_INT 22
62677: PUSH
62678: LD_OWVAR 2
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 21
62689: PUSH
62690: LD_INT 1
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 3
62699: PUSH
62700: LD_INT 23
62702: PUSH
62703: LD_INT 0
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: LIST
62718: PPUSH
62719: CALL_OW 69
62723: ST_TO_ADDR
// if not tmp then
62724: LD_VAR 0 6
62728: NOT
62729: IFFALSE 62733
// exit ;
62731: GO 62879
// s1 := rand ( 1 , 4 ) ;
62733: LD_ADDR_VAR 0 2
62737: PUSH
62738: LD_INT 1
62740: PPUSH
62741: LD_INT 4
62743: PPUSH
62744: CALL_OW 12
62748: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
62749: LD_ADDR_VAR 0 4
62753: PUSH
62754: LD_VAR 0 6
62758: PUSH
62759: LD_INT 1
62761: ARRAY
62762: PPUSH
62763: LD_VAR 0 2
62767: PPUSH
62768: CALL_OW 259
62772: ST_TO_ADDR
// if s1 = 1 then
62773: LD_VAR 0 2
62777: PUSH
62778: LD_INT 1
62780: EQUAL
62781: IFFALSE 62801
// s2 := rand ( 2 , 4 ) else
62783: LD_ADDR_VAR 0 3
62787: PUSH
62788: LD_INT 2
62790: PPUSH
62791: LD_INT 4
62793: PPUSH
62794: CALL_OW 12
62798: ST_TO_ADDR
62799: GO 62809
// s2 := 1 ;
62801: LD_ADDR_VAR 0 3
62805: PUSH
62806: LD_INT 1
62808: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
62809: LD_ADDR_VAR 0 5
62813: PUSH
62814: LD_VAR 0 6
62818: PUSH
62819: LD_INT 1
62821: ARRAY
62822: PPUSH
62823: LD_VAR 0 3
62827: PPUSH
62828: CALL_OW 259
62832: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
62833: LD_VAR 0 6
62837: PUSH
62838: LD_INT 1
62840: ARRAY
62841: PPUSH
62842: LD_VAR 0 2
62846: PPUSH
62847: LD_VAR 0 5
62851: PPUSH
62852: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
62856: LD_VAR 0 6
62860: PUSH
62861: LD_INT 1
62863: ARRAY
62864: PPUSH
62865: LD_VAR 0 3
62869: PPUSH
62870: LD_VAR 0 4
62874: PPUSH
62875: CALL_OW 237
// end ;
62879: PPOPN 6
62881: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
62882: LD_EXP 40
62886: PUSH
62887: LD_EXP 87
62891: AND
62892: IFFALSE 62971
62894: GO 62896
62896: DISABLE
62897: LD_INT 0
62899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
62900: LD_ADDR_VAR 0 1
62904: PUSH
62905: LD_INT 22
62907: PUSH
62908: LD_OWVAR 2
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 30
62919: PUSH
62920: LD_INT 3
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PPUSH
62931: CALL_OW 69
62935: ST_TO_ADDR
// if not tmp then
62936: LD_VAR 0 1
62940: NOT
62941: IFFALSE 62945
// exit ;
62943: GO 62971
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
62945: LD_VAR 0 1
62949: PUSH
62950: LD_INT 1
62952: PPUSH
62953: LD_VAR 0 1
62957: PPUSH
62958: CALL_OW 12
62962: ARRAY
62963: PPUSH
62964: LD_INT 1
62966: PPUSH
62967: CALL_OW 234
// end ;
62971: PPOPN 1
62973: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
62974: LD_EXP 40
62978: PUSH
62979: LD_EXP 88
62983: AND
62984: IFFALSE 63096
62986: GO 62988
62988: DISABLE
62989: LD_INT 0
62991: PPUSH
62992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
62993: LD_ADDR_VAR 0 2
62997: PUSH
62998: LD_INT 22
63000: PUSH
63001: LD_OWVAR 2
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 2
63012: PUSH
63013: LD_INT 30
63015: PUSH
63016: LD_INT 27
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 30
63025: PUSH
63026: LD_INT 26
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 30
63035: PUSH
63036: LD_INT 28
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PPUSH
63053: CALL_OW 69
63057: ST_TO_ADDR
// if not tmp then
63058: LD_VAR 0 2
63062: NOT
63063: IFFALSE 63067
// exit ;
63065: GO 63096
// for i in tmp do
63067: LD_ADDR_VAR 0 1
63071: PUSH
63072: LD_VAR 0 2
63076: PUSH
63077: FOR_IN
63078: IFFALSE 63094
// SetLives ( i , 1 ) ;
63080: LD_VAR 0 1
63084: PPUSH
63085: LD_INT 1
63087: PPUSH
63088: CALL_OW 234
63092: GO 63077
63094: POP
63095: POP
// end ;
63096: PPOPN 2
63098: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
63099: LD_EXP 40
63103: PUSH
63104: LD_EXP 89
63108: AND
63109: IFFALSE 63383
63111: GO 63113
63113: DISABLE
63114: LD_INT 0
63116: PPUSH
63117: PPUSH
63118: PPUSH
// begin i := rand ( 1 , 7 ) ;
63119: LD_ADDR_VAR 0 1
63123: PUSH
63124: LD_INT 1
63126: PPUSH
63127: LD_INT 7
63129: PPUSH
63130: CALL_OW 12
63134: ST_TO_ADDR
// case i of 1 :
63135: LD_VAR 0 1
63139: PUSH
63140: LD_INT 1
63142: DOUBLE
63143: EQUAL
63144: IFTRUE 63148
63146: GO 63158
63148: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
63149: LD_STRING earthquake(getX(game), 0, 32)
63151: PPUSH
63152: CALL_OW 559
63156: GO 63383
63158: LD_INT 2
63160: DOUBLE
63161: EQUAL
63162: IFTRUE 63166
63164: GO 63180
63166: POP
// begin ToLua ( displayStucuk(); ) ;
63167: LD_STRING displayStucuk();
63169: PPUSH
63170: CALL_OW 559
// ResetFog ;
63174: CALL_OW 335
// end ; 3 :
63178: GO 63383
63180: LD_INT 3
63182: DOUBLE
63183: EQUAL
63184: IFTRUE 63188
63186: GO 63292
63188: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63189: LD_ADDR_VAR 0 2
63193: PUSH
63194: LD_INT 22
63196: PUSH
63197: LD_OWVAR 2
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 25
63208: PUSH
63209: LD_INT 1
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PPUSH
63220: CALL_OW 69
63224: ST_TO_ADDR
// if not tmp then
63225: LD_VAR 0 2
63229: NOT
63230: IFFALSE 63234
// exit ;
63232: GO 63383
// un := tmp [ rand ( 1 , tmp ) ] ;
63234: LD_ADDR_VAR 0 3
63238: PUSH
63239: LD_VAR 0 2
63243: PUSH
63244: LD_INT 1
63246: PPUSH
63247: LD_VAR 0 2
63251: PPUSH
63252: CALL_OW 12
63256: ARRAY
63257: ST_TO_ADDR
// if Crawls ( un ) then
63258: LD_VAR 0 3
63262: PPUSH
63263: CALL_OW 318
63267: IFFALSE 63278
// ComWalk ( un ) ;
63269: LD_VAR 0 3
63273: PPUSH
63274: CALL_OW 138
// SetClass ( un , class_mortar ) ;
63278: LD_VAR 0 3
63282: PPUSH
63283: LD_INT 8
63285: PPUSH
63286: CALL_OW 336
// end ; 4 :
63290: GO 63383
63292: LD_INT 4
63294: DOUBLE
63295: EQUAL
63296: IFTRUE 63300
63298: GO 63361
63300: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
63301: LD_ADDR_VAR 0 2
63305: PUSH
63306: LD_INT 22
63308: PUSH
63309: LD_OWVAR 2
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 30
63320: PUSH
63321: LD_INT 29
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PPUSH
63332: CALL_OW 69
63336: ST_TO_ADDR
// if not tmp then
63337: LD_VAR 0 2
63341: NOT
63342: IFFALSE 63346
// exit ;
63344: GO 63383
// DestroyUnit ( tmp [ 1 ] ) ;
63346: LD_VAR 0 2
63350: PUSH
63351: LD_INT 1
63353: ARRAY
63354: PPUSH
63355: CALL_OW 65
// end ; 5 .. 7 :
63359: GO 63383
63361: LD_INT 5
63363: DOUBLE
63364: GREATEREQUAL
63365: IFFALSE 63373
63367: LD_INT 7
63369: DOUBLE
63370: LESSEQUAL
63371: IFTRUE 63375
63373: GO 63382
63375: POP
// StreamSibBomb ; end ;
63376: CALL 59633 0 0
63380: GO 63383
63382: POP
// end ;
63383: PPOPN 3
63385: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
63386: LD_EXP 40
63390: PUSH
63391: LD_EXP 90
63395: AND
63396: IFFALSE 63552
63398: GO 63400
63400: DISABLE
63401: LD_INT 0
63403: PPUSH
63404: PPUSH
63405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
63406: LD_ADDR_VAR 0 2
63410: PUSH
63411: LD_INT 81
63413: PUSH
63414: LD_OWVAR 2
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 2
63425: PUSH
63426: LD_INT 21
63428: PUSH
63429: LD_INT 1
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 21
63438: PUSH
63439: LD_INT 2
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: LIST
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PPUSH
63455: CALL_OW 69
63459: ST_TO_ADDR
// if not tmp then
63460: LD_VAR 0 2
63464: NOT
63465: IFFALSE 63469
// exit ;
63467: GO 63552
// p := 0 ;
63469: LD_ADDR_VAR 0 3
63473: PUSH
63474: LD_INT 0
63476: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
63477: LD_INT 35
63479: PPUSH
63480: CALL_OW 67
// p := p + 1 ;
63484: LD_ADDR_VAR 0 3
63488: PUSH
63489: LD_VAR 0 3
63493: PUSH
63494: LD_INT 1
63496: PLUS
63497: ST_TO_ADDR
// for i in tmp do
63498: LD_ADDR_VAR 0 1
63502: PUSH
63503: LD_VAR 0 2
63507: PUSH
63508: FOR_IN
63509: IFFALSE 63540
// if GetLives ( i ) < 1000 then
63511: LD_VAR 0 1
63515: PPUSH
63516: CALL_OW 256
63520: PUSH
63521: LD_INT 1000
63523: LESS
63524: IFFALSE 63538
// SetLives ( i , 1000 ) ;
63526: LD_VAR 0 1
63530: PPUSH
63531: LD_INT 1000
63533: PPUSH
63534: CALL_OW 234
63538: GO 63508
63540: POP
63541: POP
// until p > 20 ;
63542: LD_VAR 0 3
63546: PUSH
63547: LD_INT 20
63549: GREATER
63550: IFFALSE 63477
// end ;
63552: PPOPN 3
63554: END
// every 0 0$1 trigger StreamModeActive and sTime do
63555: LD_EXP 40
63559: PUSH
63560: LD_EXP 91
63564: AND
63565: IFFALSE 63600
63567: GO 63569
63569: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
63570: LD_INT 28
63572: PPUSH
63573: LD_OWVAR 2
63577: PPUSH
63578: LD_INT 2
63580: PPUSH
63581: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
63585: LD_INT 30
63587: PPUSH
63588: LD_OWVAR 2
63592: PPUSH
63593: LD_INT 2
63595: PPUSH
63596: CALL_OW 322
// end ;
63600: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
63601: LD_EXP 40
63605: PUSH
63606: LD_EXP 92
63610: AND
63611: IFFALSE 63732
63613: GO 63615
63615: DISABLE
63616: LD_INT 0
63618: PPUSH
63619: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
63620: LD_ADDR_VAR 0 2
63624: PUSH
63625: LD_INT 22
63627: PUSH
63628: LD_OWVAR 2
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 21
63639: PUSH
63640: LD_INT 1
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 3
63649: PUSH
63650: LD_INT 23
63652: PUSH
63653: LD_INT 0
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: LIST
63668: PPUSH
63669: CALL_OW 69
63673: ST_TO_ADDR
// if not tmp then
63674: LD_VAR 0 2
63678: NOT
63679: IFFALSE 63683
// exit ;
63681: GO 63732
// for i in tmp do
63683: LD_ADDR_VAR 0 1
63687: PUSH
63688: LD_VAR 0 2
63692: PUSH
63693: FOR_IN
63694: IFFALSE 63730
// begin if Crawls ( i ) then
63696: LD_VAR 0 1
63700: PPUSH
63701: CALL_OW 318
63705: IFFALSE 63716
// ComWalk ( i ) ;
63707: LD_VAR 0 1
63711: PPUSH
63712: CALL_OW 138
// SetClass ( i , 2 ) ;
63716: LD_VAR 0 1
63720: PPUSH
63721: LD_INT 2
63723: PPUSH
63724: CALL_OW 336
// end ;
63728: GO 63693
63730: POP
63731: POP
// end ;
63732: PPOPN 2
63734: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
63735: LD_EXP 40
63739: PUSH
63740: LD_EXP 93
63744: AND
63745: IFFALSE 64026
63747: GO 63749
63749: DISABLE
63750: LD_INT 0
63752: PPUSH
63753: PPUSH
63754: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
63755: LD_OWVAR 2
63759: PPUSH
63760: LD_INT 9
63762: PPUSH
63763: LD_INT 1
63765: PPUSH
63766: LD_INT 1
63768: PPUSH
63769: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
63773: LD_INT 9
63775: PPUSH
63776: LD_OWVAR 2
63780: PPUSH
63781: CALL_OW 343
// uc_side := 9 ;
63785: LD_ADDR_OWVAR 20
63789: PUSH
63790: LD_INT 9
63792: ST_TO_ADDR
// uc_nation := 2 ;
63793: LD_ADDR_OWVAR 21
63797: PUSH
63798: LD_INT 2
63800: ST_TO_ADDR
// hc_name := Dark Warrior ;
63801: LD_ADDR_OWVAR 26
63805: PUSH
63806: LD_STRING Dark Warrior
63808: ST_TO_ADDR
// hc_gallery :=  ;
63809: LD_ADDR_OWVAR 33
63813: PUSH
63814: LD_STRING 
63816: ST_TO_ADDR
// hc_noskilllimit := true ;
63817: LD_ADDR_OWVAR 76
63821: PUSH
63822: LD_INT 1
63824: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
63825: LD_ADDR_OWVAR 31
63829: PUSH
63830: LD_INT 30
63832: PUSH
63833: LD_INT 30
63835: PUSH
63836: LD_INT 30
63838: PUSH
63839: LD_INT 30
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: ST_TO_ADDR
// un := CreateHuman ;
63848: LD_ADDR_VAR 0 3
63852: PUSH
63853: CALL_OW 44
63857: ST_TO_ADDR
// hc_noskilllimit := false ;
63858: LD_ADDR_OWVAR 76
63862: PUSH
63863: LD_INT 0
63865: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
63866: LD_VAR 0 3
63870: PPUSH
63871: LD_INT 1
63873: PPUSH
63874: CALL_OW 51
// p := 0 ;
63878: LD_ADDR_VAR 0 2
63882: PUSH
63883: LD_INT 0
63885: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
63886: LD_INT 35
63888: PPUSH
63889: CALL_OW 67
// p := p + 1 ;
63893: LD_ADDR_VAR 0 2
63897: PUSH
63898: LD_VAR 0 2
63902: PUSH
63903: LD_INT 1
63905: PLUS
63906: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
63907: LD_VAR 0 3
63911: PPUSH
63912: CALL_OW 256
63916: PUSH
63917: LD_INT 1000
63919: LESS
63920: IFFALSE 63934
// SetLives ( un , 1000 ) ;
63922: LD_VAR 0 3
63926: PPUSH
63927: LD_INT 1000
63929: PPUSH
63930: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
63934: LD_VAR 0 3
63938: PPUSH
63939: LD_INT 81
63941: PUSH
63942: LD_OWVAR 2
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 91
63953: PUSH
63954: LD_VAR 0 3
63958: PUSH
63959: LD_INT 30
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: LIST
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PPUSH
63971: CALL_OW 69
63975: PPUSH
63976: LD_VAR 0 3
63980: PPUSH
63981: CALL_OW 74
63985: PPUSH
63986: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
63990: LD_VAR 0 2
63994: PUSH
63995: LD_INT 60
63997: GREATER
63998: PUSH
63999: LD_VAR 0 3
64003: PPUSH
64004: CALL_OW 301
64008: OR
64009: IFFALSE 63886
// if un then
64011: LD_VAR 0 3
64015: IFFALSE 64026
// RemoveUnit ( un ) ;
64017: LD_VAR 0 3
64021: PPUSH
64022: CALL_OW 64
// end ;
64026: PPOPN 3
64028: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64029: LD_INT 0
64031: PPUSH
// case cmd of 301 :
64032: LD_VAR 0 1
64036: PUSH
64037: LD_INT 301
64039: DOUBLE
64040: EQUAL
64041: IFTRUE 64045
64043: GO 64077
64045: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
64046: LD_VAR 0 6
64050: PPUSH
64051: LD_VAR 0 7
64055: PPUSH
64056: LD_VAR 0 8
64060: PPUSH
64061: LD_VAR 0 4
64065: PPUSH
64066: LD_VAR 0 5
64070: PPUSH
64071: CALL 65278 0 5
64075: GO 64198
64077: LD_INT 302
64079: DOUBLE
64080: EQUAL
64081: IFTRUE 64085
64083: GO 64122
64085: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
64086: LD_VAR 0 6
64090: PPUSH
64091: LD_VAR 0 7
64095: PPUSH
64096: LD_VAR 0 8
64100: PPUSH
64101: LD_VAR 0 9
64105: PPUSH
64106: LD_VAR 0 4
64110: PPUSH
64111: LD_VAR 0 5
64115: PPUSH
64116: CALL 65369 0 6
64120: GO 64198
64122: LD_INT 303
64124: DOUBLE
64125: EQUAL
64126: IFTRUE 64130
64128: GO 64167
64130: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
64131: LD_VAR 0 6
64135: PPUSH
64136: LD_VAR 0 7
64140: PPUSH
64141: LD_VAR 0 8
64145: PPUSH
64146: LD_VAR 0 9
64150: PPUSH
64151: LD_VAR 0 4
64155: PPUSH
64156: LD_VAR 0 5
64160: PPUSH
64161: CALL 64203 0 6
64165: GO 64198
64167: LD_INT 304
64169: DOUBLE
64170: EQUAL
64171: IFTRUE 64175
64173: GO 64197
64175: POP
// hHackTeleport ( unit , x , y ) ; end ;
64176: LD_VAR 0 2
64180: PPUSH
64181: LD_VAR 0 4
64185: PPUSH
64186: LD_VAR 0 5
64190: PPUSH
64191: CALL 65962 0 3
64195: GO 64198
64197: POP
// end ;
64198: LD_VAR 0 12
64202: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
64203: LD_INT 0
64205: PPUSH
64206: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
64207: LD_VAR 0 1
64211: PUSH
64212: LD_INT 1
64214: LESS
64215: PUSH
64216: LD_VAR 0 1
64220: PUSH
64221: LD_INT 3
64223: GREATER
64224: OR
64225: PUSH
64226: LD_VAR 0 5
64230: PPUSH
64231: LD_VAR 0 6
64235: PPUSH
64236: CALL_OW 428
64240: OR
64241: IFFALSE 64245
// exit ;
64243: GO 64965
// uc_side := your_side ;
64245: LD_ADDR_OWVAR 20
64249: PUSH
64250: LD_OWVAR 2
64254: ST_TO_ADDR
// uc_nation := nation ;
64255: LD_ADDR_OWVAR 21
64259: PUSH
64260: LD_VAR 0 1
64264: ST_TO_ADDR
// bc_level = 1 ;
64265: LD_ADDR_OWVAR 43
64269: PUSH
64270: LD_INT 1
64272: ST_TO_ADDR
// case btype of 1 :
64273: LD_VAR 0 2
64277: PUSH
64278: LD_INT 1
64280: DOUBLE
64281: EQUAL
64282: IFTRUE 64286
64284: GO 64297
64286: POP
// bc_type := b_depot ; 2 :
64287: LD_ADDR_OWVAR 42
64291: PUSH
64292: LD_INT 0
64294: ST_TO_ADDR
64295: GO 64909
64297: LD_INT 2
64299: DOUBLE
64300: EQUAL
64301: IFTRUE 64305
64303: GO 64316
64305: POP
// bc_type := b_warehouse ; 3 :
64306: LD_ADDR_OWVAR 42
64310: PUSH
64311: LD_INT 1
64313: ST_TO_ADDR
64314: GO 64909
64316: LD_INT 3
64318: DOUBLE
64319: EQUAL
64320: IFTRUE 64324
64322: GO 64335
64324: POP
// bc_type := b_lab ; 4 .. 9 :
64325: LD_ADDR_OWVAR 42
64329: PUSH
64330: LD_INT 6
64332: ST_TO_ADDR
64333: GO 64909
64335: LD_INT 4
64337: DOUBLE
64338: GREATEREQUAL
64339: IFFALSE 64347
64341: LD_INT 9
64343: DOUBLE
64344: LESSEQUAL
64345: IFTRUE 64349
64347: GO 64401
64349: POP
// begin bc_type := b_lab_half ;
64350: LD_ADDR_OWVAR 42
64354: PUSH
64355: LD_INT 7
64357: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
64358: LD_ADDR_OWVAR 44
64362: PUSH
64363: LD_INT 10
64365: PUSH
64366: LD_INT 11
64368: PUSH
64369: LD_INT 12
64371: PUSH
64372: LD_INT 15
64374: PUSH
64375: LD_INT 14
64377: PUSH
64378: LD_INT 13
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: PUSH
64389: LD_VAR 0 2
64393: PUSH
64394: LD_INT 3
64396: MINUS
64397: ARRAY
64398: ST_TO_ADDR
// end ; 10 .. 13 :
64399: GO 64909
64401: LD_INT 10
64403: DOUBLE
64404: GREATEREQUAL
64405: IFFALSE 64413
64407: LD_INT 13
64409: DOUBLE
64410: LESSEQUAL
64411: IFTRUE 64415
64413: GO 64492
64415: POP
// begin bc_type := b_lab_full ;
64416: LD_ADDR_OWVAR 42
64420: PUSH
64421: LD_INT 8
64423: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
64424: LD_ADDR_OWVAR 44
64428: PUSH
64429: LD_INT 10
64431: PUSH
64432: LD_INT 12
64434: PUSH
64435: LD_INT 14
64437: PUSH
64438: LD_INT 13
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: PUSH
64447: LD_VAR 0 2
64451: PUSH
64452: LD_INT 9
64454: MINUS
64455: ARRAY
64456: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
64457: LD_ADDR_OWVAR 45
64461: PUSH
64462: LD_INT 11
64464: PUSH
64465: LD_INT 15
64467: PUSH
64468: LD_INT 12
64470: PUSH
64471: LD_INT 15
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: PUSH
64480: LD_VAR 0 2
64484: PUSH
64485: LD_INT 9
64487: MINUS
64488: ARRAY
64489: ST_TO_ADDR
// end ; 14 :
64490: GO 64909
64492: LD_INT 14
64494: DOUBLE
64495: EQUAL
64496: IFTRUE 64500
64498: GO 64511
64500: POP
// bc_type := b_workshop ; 15 :
64501: LD_ADDR_OWVAR 42
64505: PUSH
64506: LD_INT 2
64508: ST_TO_ADDR
64509: GO 64909
64511: LD_INT 15
64513: DOUBLE
64514: EQUAL
64515: IFTRUE 64519
64517: GO 64530
64519: POP
// bc_type := b_factory ; 16 :
64520: LD_ADDR_OWVAR 42
64524: PUSH
64525: LD_INT 3
64527: ST_TO_ADDR
64528: GO 64909
64530: LD_INT 16
64532: DOUBLE
64533: EQUAL
64534: IFTRUE 64538
64536: GO 64549
64538: POP
// bc_type := b_ext_gun ; 17 :
64539: LD_ADDR_OWVAR 42
64543: PUSH
64544: LD_INT 17
64546: ST_TO_ADDR
64547: GO 64909
64549: LD_INT 17
64551: DOUBLE
64552: EQUAL
64553: IFTRUE 64557
64555: GO 64585
64557: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
64558: LD_ADDR_OWVAR 42
64562: PUSH
64563: LD_INT 19
64565: PUSH
64566: LD_INT 23
64568: PUSH
64569: LD_INT 19
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: LIST
64576: PUSH
64577: LD_VAR 0 1
64581: ARRAY
64582: ST_TO_ADDR
64583: GO 64909
64585: LD_INT 18
64587: DOUBLE
64588: EQUAL
64589: IFTRUE 64593
64591: GO 64604
64593: POP
// bc_type := b_ext_radar ; 19 :
64594: LD_ADDR_OWVAR 42
64598: PUSH
64599: LD_INT 20
64601: ST_TO_ADDR
64602: GO 64909
64604: LD_INT 19
64606: DOUBLE
64607: EQUAL
64608: IFTRUE 64612
64610: GO 64623
64612: POP
// bc_type := b_ext_radio ; 20 :
64613: LD_ADDR_OWVAR 42
64617: PUSH
64618: LD_INT 22
64620: ST_TO_ADDR
64621: GO 64909
64623: LD_INT 20
64625: DOUBLE
64626: EQUAL
64627: IFTRUE 64631
64629: GO 64642
64631: POP
// bc_type := b_ext_siberium ; 21 :
64632: LD_ADDR_OWVAR 42
64636: PUSH
64637: LD_INT 21
64639: ST_TO_ADDR
64640: GO 64909
64642: LD_INT 21
64644: DOUBLE
64645: EQUAL
64646: IFTRUE 64650
64648: GO 64661
64650: POP
// bc_type := b_ext_computer ; 22 :
64651: LD_ADDR_OWVAR 42
64655: PUSH
64656: LD_INT 24
64658: ST_TO_ADDR
64659: GO 64909
64661: LD_INT 22
64663: DOUBLE
64664: EQUAL
64665: IFTRUE 64669
64667: GO 64680
64669: POP
// bc_type := b_ext_track ; 23 :
64670: LD_ADDR_OWVAR 42
64674: PUSH
64675: LD_INT 16
64677: ST_TO_ADDR
64678: GO 64909
64680: LD_INT 23
64682: DOUBLE
64683: EQUAL
64684: IFTRUE 64688
64686: GO 64699
64688: POP
// bc_type := b_ext_laser ; 24 :
64689: LD_ADDR_OWVAR 42
64693: PUSH
64694: LD_INT 25
64696: ST_TO_ADDR
64697: GO 64909
64699: LD_INT 24
64701: DOUBLE
64702: EQUAL
64703: IFTRUE 64707
64705: GO 64718
64707: POP
// bc_type := b_control_tower ; 25 :
64708: LD_ADDR_OWVAR 42
64712: PUSH
64713: LD_INT 36
64715: ST_TO_ADDR
64716: GO 64909
64718: LD_INT 25
64720: DOUBLE
64721: EQUAL
64722: IFTRUE 64726
64724: GO 64737
64726: POP
// bc_type := b_breastwork ; 26 :
64727: LD_ADDR_OWVAR 42
64731: PUSH
64732: LD_INT 31
64734: ST_TO_ADDR
64735: GO 64909
64737: LD_INT 26
64739: DOUBLE
64740: EQUAL
64741: IFTRUE 64745
64743: GO 64756
64745: POP
// bc_type := b_bunker ; 27 :
64746: LD_ADDR_OWVAR 42
64750: PUSH
64751: LD_INT 32
64753: ST_TO_ADDR
64754: GO 64909
64756: LD_INT 27
64758: DOUBLE
64759: EQUAL
64760: IFTRUE 64764
64762: GO 64775
64764: POP
// bc_type := b_turret ; 28 :
64765: LD_ADDR_OWVAR 42
64769: PUSH
64770: LD_INT 33
64772: ST_TO_ADDR
64773: GO 64909
64775: LD_INT 28
64777: DOUBLE
64778: EQUAL
64779: IFTRUE 64783
64781: GO 64794
64783: POP
// bc_type := b_armoury ; 29 :
64784: LD_ADDR_OWVAR 42
64788: PUSH
64789: LD_INT 4
64791: ST_TO_ADDR
64792: GO 64909
64794: LD_INT 29
64796: DOUBLE
64797: EQUAL
64798: IFTRUE 64802
64800: GO 64813
64802: POP
// bc_type := b_barracks ; 30 :
64803: LD_ADDR_OWVAR 42
64807: PUSH
64808: LD_INT 5
64810: ST_TO_ADDR
64811: GO 64909
64813: LD_INT 30
64815: DOUBLE
64816: EQUAL
64817: IFTRUE 64821
64819: GO 64832
64821: POP
// bc_type := b_solar_power ; 31 :
64822: LD_ADDR_OWVAR 42
64826: PUSH
64827: LD_INT 27
64829: ST_TO_ADDR
64830: GO 64909
64832: LD_INT 31
64834: DOUBLE
64835: EQUAL
64836: IFTRUE 64840
64838: GO 64851
64840: POP
// bc_type := b_oil_power ; 32 :
64841: LD_ADDR_OWVAR 42
64845: PUSH
64846: LD_INT 26
64848: ST_TO_ADDR
64849: GO 64909
64851: LD_INT 32
64853: DOUBLE
64854: EQUAL
64855: IFTRUE 64859
64857: GO 64870
64859: POP
// bc_type := b_siberite_power ; 33 :
64860: LD_ADDR_OWVAR 42
64864: PUSH
64865: LD_INT 28
64867: ST_TO_ADDR
64868: GO 64909
64870: LD_INT 33
64872: DOUBLE
64873: EQUAL
64874: IFTRUE 64878
64876: GO 64889
64878: POP
// bc_type := b_oil_mine ; 34 :
64879: LD_ADDR_OWVAR 42
64883: PUSH
64884: LD_INT 29
64886: ST_TO_ADDR
64887: GO 64909
64889: LD_INT 34
64891: DOUBLE
64892: EQUAL
64893: IFTRUE 64897
64895: GO 64908
64897: POP
// bc_type := b_siberite_mine ; end ;
64898: LD_ADDR_OWVAR 42
64902: PUSH
64903: LD_INT 30
64905: ST_TO_ADDR
64906: GO 64909
64908: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
64909: LD_ADDR_VAR 0 8
64913: PUSH
64914: LD_VAR 0 5
64918: PPUSH
64919: LD_VAR 0 6
64923: PPUSH
64924: LD_VAR 0 3
64928: PPUSH
64929: CALL_OW 47
64933: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
64934: LD_OWVAR 42
64938: PUSH
64939: LD_INT 32
64941: PUSH
64942: LD_INT 33
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: IN
64949: IFFALSE 64965
// PlaceWeaponTurret ( b , weapon ) ;
64951: LD_VAR 0 8
64955: PPUSH
64956: LD_VAR 0 4
64960: PPUSH
64961: CALL_OW 431
// end ;
64965: LD_VAR 0 7
64969: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
64970: LD_INT 0
64972: PPUSH
64973: PPUSH
64974: PPUSH
64975: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
64976: LD_ADDR_VAR 0 4
64980: PUSH
64981: LD_INT 22
64983: PUSH
64984: LD_OWVAR 2
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: LD_INT 2
64995: PUSH
64996: LD_INT 30
64998: PUSH
64999: LD_INT 0
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: LD_INT 30
65008: PUSH
65009: LD_INT 1
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: LIST
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PPUSH
65025: CALL_OW 69
65029: ST_TO_ADDR
// if not tmp then
65030: LD_VAR 0 4
65034: NOT
65035: IFFALSE 65039
// exit ;
65037: GO 65098
// for i in tmp do
65039: LD_ADDR_VAR 0 2
65043: PUSH
65044: LD_VAR 0 4
65048: PUSH
65049: FOR_IN
65050: IFFALSE 65096
// for j = 1 to 3 do
65052: LD_ADDR_VAR 0 3
65056: PUSH
65057: DOUBLE
65058: LD_INT 1
65060: DEC
65061: ST_TO_ADDR
65062: LD_INT 3
65064: PUSH
65065: FOR_TO
65066: IFFALSE 65092
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
65068: LD_VAR 0 2
65072: PPUSH
65073: CALL_OW 274
65077: PPUSH
65078: LD_VAR 0 3
65082: PPUSH
65083: LD_INT 99999
65085: PPUSH
65086: CALL_OW 277
65090: GO 65065
65092: POP
65093: POP
65094: GO 65049
65096: POP
65097: POP
// end ;
65098: LD_VAR 0 1
65102: RET
// export function hHackSetLevel10 ; var i , j ; begin
65103: LD_INT 0
65105: PPUSH
65106: PPUSH
65107: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
65108: LD_ADDR_VAR 0 2
65112: PUSH
65113: LD_INT 21
65115: PUSH
65116: LD_INT 1
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PPUSH
65123: CALL_OW 69
65127: PUSH
65128: FOR_IN
65129: IFFALSE 65181
// if IsSelected ( i ) then
65131: LD_VAR 0 2
65135: PPUSH
65136: CALL_OW 306
65140: IFFALSE 65179
// begin for j := 1 to 4 do
65142: LD_ADDR_VAR 0 3
65146: PUSH
65147: DOUBLE
65148: LD_INT 1
65150: DEC
65151: ST_TO_ADDR
65152: LD_INT 4
65154: PUSH
65155: FOR_TO
65156: IFFALSE 65177
// SetSkill ( i , j , 10 ) ;
65158: LD_VAR 0 2
65162: PPUSH
65163: LD_VAR 0 3
65167: PPUSH
65168: LD_INT 10
65170: PPUSH
65171: CALL_OW 237
65175: GO 65155
65177: POP
65178: POP
// end ;
65179: GO 65128
65181: POP
65182: POP
// end ;
65183: LD_VAR 0 1
65187: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
65188: LD_INT 0
65190: PPUSH
65191: PPUSH
65192: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
65193: LD_ADDR_VAR 0 2
65197: PUSH
65198: LD_INT 22
65200: PUSH
65201: LD_OWVAR 2
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 21
65212: PUSH
65213: LD_INT 1
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PPUSH
65224: CALL_OW 69
65228: PUSH
65229: FOR_IN
65230: IFFALSE 65271
// begin for j := 1 to 4 do
65232: LD_ADDR_VAR 0 3
65236: PUSH
65237: DOUBLE
65238: LD_INT 1
65240: DEC
65241: ST_TO_ADDR
65242: LD_INT 4
65244: PUSH
65245: FOR_TO
65246: IFFALSE 65267
// SetSkill ( i , j , 10 ) ;
65248: LD_VAR 0 2
65252: PPUSH
65253: LD_VAR 0 3
65257: PPUSH
65258: LD_INT 10
65260: PPUSH
65261: CALL_OW 237
65265: GO 65245
65267: POP
65268: POP
// end ;
65269: GO 65229
65271: POP
65272: POP
// end ;
65273: LD_VAR 0 1
65277: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
65278: LD_INT 0
65280: PPUSH
// uc_side := your_side ;
65281: LD_ADDR_OWVAR 20
65285: PUSH
65286: LD_OWVAR 2
65290: ST_TO_ADDR
// uc_nation := nation ;
65291: LD_ADDR_OWVAR 21
65295: PUSH
65296: LD_VAR 0 1
65300: ST_TO_ADDR
// InitHc ;
65301: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
65305: LD_INT 0
65307: PPUSH
65308: LD_VAR 0 2
65312: PPUSH
65313: LD_VAR 0 3
65317: PPUSH
65318: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
65322: LD_VAR 0 4
65326: PPUSH
65327: LD_VAR 0 5
65331: PPUSH
65332: CALL_OW 428
65336: PUSH
65337: LD_INT 0
65339: EQUAL
65340: IFFALSE 65364
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
65342: CALL_OW 44
65346: PPUSH
65347: LD_VAR 0 4
65351: PPUSH
65352: LD_VAR 0 5
65356: PPUSH
65357: LD_INT 1
65359: PPUSH
65360: CALL_OW 48
// end ;
65364: LD_VAR 0 6
65368: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
65369: LD_INT 0
65371: PPUSH
65372: PPUSH
// uc_side := your_side ;
65373: LD_ADDR_OWVAR 20
65377: PUSH
65378: LD_OWVAR 2
65382: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
65383: LD_VAR 0 1
65387: PUSH
65388: LD_INT 1
65390: PUSH
65391: LD_INT 2
65393: PUSH
65394: LD_INT 3
65396: PUSH
65397: LD_INT 4
65399: PUSH
65400: LD_INT 5
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: LIST
65407: LIST
65408: LIST
65409: IN
65410: IFFALSE 65422
// uc_nation := nation_american else
65412: LD_ADDR_OWVAR 21
65416: PUSH
65417: LD_INT 1
65419: ST_TO_ADDR
65420: GO 65465
// if chassis in [ 11 , 12 , 13 , 14 ] then
65422: LD_VAR 0 1
65426: PUSH
65427: LD_INT 11
65429: PUSH
65430: LD_INT 12
65432: PUSH
65433: LD_INT 13
65435: PUSH
65436: LD_INT 14
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: IN
65445: IFFALSE 65457
// uc_nation := nation_arabian else
65447: LD_ADDR_OWVAR 21
65451: PUSH
65452: LD_INT 2
65454: ST_TO_ADDR
65455: GO 65465
// uc_nation := nation_russian ;
65457: LD_ADDR_OWVAR 21
65461: PUSH
65462: LD_INT 3
65464: ST_TO_ADDR
// vc_chassis := chassis ;
65465: LD_ADDR_OWVAR 37
65469: PUSH
65470: LD_VAR 0 1
65474: ST_TO_ADDR
// vc_engine := engine ;
65475: LD_ADDR_OWVAR 39
65479: PUSH
65480: LD_VAR 0 2
65484: ST_TO_ADDR
// vc_control := control ;
65485: LD_ADDR_OWVAR 38
65489: PUSH
65490: LD_VAR 0 3
65494: ST_TO_ADDR
// vc_weapon := weapon ;
65495: LD_ADDR_OWVAR 40
65499: PUSH
65500: LD_VAR 0 4
65504: ST_TO_ADDR
// un := CreateVehicle ;
65505: LD_ADDR_VAR 0 8
65509: PUSH
65510: CALL_OW 45
65514: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
65515: LD_VAR 0 8
65519: PPUSH
65520: LD_INT 0
65522: PPUSH
65523: LD_INT 5
65525: PPUSH
65526: CALL_OW 12
65530: PPUSH
65531: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
65535: LD_VAR 0 8
65539: PPUSH
65540: LD_VAR 0 5
65544: PPUSH
65545: LD_VAR 0 6
65549: PPUSH
65550: LD_INT 1
65552: PPUSH
65553: CALL_OW 48
// end ;
65557: LD_VAR 0 7
65561: RET
// export hInvincible ; every 1 do
65562: GO 65564
65564: DISABLE
// hInvincible := [ ] ;
65565: LD_ADDR_EXP 94
65569: PUSH
65570: EMPTY
65571: ST_TO_ADDR
65572: END
// every 10 do var i ;
65573: GO 65575
65575: DISABLE
65576: LD_INT 0
65578: PPUSH
// begin enable ;
65579: ENABLE
// if not hInvincible then
65580: LD_EXP 94
65584: NOT
65585: IFFALSE 65589
// exit ;
65587: GO 65633
// for i in hInvincible do
65589: LD_ADDR_VAR 0 1
65593: PUSH
65594: LD_EXP 94
65598: PUSH
65599: FOR_IN
65600: IFFALSE 65631
// if GetLives ( i ) < 1000 then
65602: LD_VAR 0 1
65606: PPUSH
65607: CALL_OW 256
65611: PUSH
65612: LD_INT 1000
65614: LESS
65615: IFFALSE 65629
// SetLives ( i , 1000 ) ;
65617: LD_VAR 0 1
65621: PPUSH
65622: LD_INT 1000
65624: PPUSH
65625: CALL_OW 234
65629: GO 65599
65631: POP
65632: POP
// end ;
65633: PPOPN 1
65635: END
// export function hHackInvincible ; var i ; begin
65636: LD_INT 0
65638: PPUSH
65639: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
65640: LD_ADDR_VAR 0 2
65644: PUSH
65645: LD_INT 2
65647: PUSH
65648: LD_INT 21
65650: PUSH
65651: LD_INT 1
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 21
65660: PUSH
65661: LD_INT 2
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: LIST
65672: PPUSH
65673: CALL_OW 69
65677: PUSH
65678: FOR_IN
65679: IFFALSE 65740
// if IsSelected ( i ) then
65681: LD_VAR 0 2
65685: PPUSH
65686: CALL_OW 306
65690: IFFALSE 65738
// begin if i in hInvincible then
65692: LD_VAR 0 2
65696: PUSH
65697: LD_EXP 94
65701: IN
65702: IFFALSE 65722
// hInvincible := hInvincible diff i else
65704: LD_ADDR_EXP 94
65708: PUSH
65709: LD_EXP 94
65713: PUSH
65714: LD_VAR 0 2
65718: DIFF
65719: ST_TO_ADDR
65720: GO 65738
// hInvincible := hInvincible union i ;
65722: LD_ADDR_EXP 94
65726: PUSH
65727: LD_EXP 94
65731: PUSH
65732: LD_VAR 0 2
65736: UNION
65737: ST_TO_ADDR
// end ;
65738: GO 65678
65740: POP
65741: POP
// end ;
65742: LD_VAR 0 1
65746: RET
// export function hHackInvisible ; var i , j ; begin
65747: LD_INT 0
65749: PPUSH
65750: PPUSH
65751: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
65752: LD_ADDR_VAR 0 2
65756: PUSH
65757: LD_INT 21
65759: PUSH
65760: LD_INT 1
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: PPUSH
65767: CALL_OW 69
65771: PUSH
65772: FOR_IN
65773: IFFALSE 65797
// if IsSelected ( i ) then
65775: LD_VAR 0 2
65779: PPUSH
65780: CALL_OW 306
65784: IFFALSE 65795
// ComForceInvisible ( i ) ;
65786: LD_VAR 0 2
65790: PPUSH
65791: CALL_OW 496
65795: GO 65772
65797: POP
65798: POP
// end ;
65799: LD_VAR 0 1
65803: RET
// export function hHackChangeYourSide ; begin
65804: LD_INT 0
65806: PPUSH
// if your_side = 8 then
65807: LD_OWVAR 2
65811: PUSH
65812: LD_INT 8
65814: EQUAL
65815: IFFALSE 65827
// your_side := 0 else
65817: LD_ADDR_OWVAR 2
65821: PUSH
65822: LD_INT 0
65824: ST_TO_ADDR
65825: GO 65841
// your_side := your_side + 1 ;
65827: LD_ADDR_OWVAR 2
65831: PUSH
65832: LD_OWVAR 2
65836: PUSH
65837: LD_INT 1
65839: PLUS
65840: ST_TO_ADDR
// end ;
65841: LD_VAR 0 1
65845: RET
// export function hHackChangeUnitSide ; var i , j ; begin
65846: LD_INT 0
65848: PPUSH
65849: PPUSH
65850: PPUSH
// for i in all_units do
65851: LD_ADDR_VAR 0 2
65855: PUSH
65856: LD_OWVAR 3
65860: PUSH
65861: FOR_IN
65862: IFFALSE 65940
// if IsSelected ( i ) then
65864: LD_VAR 0 2
65868: PPUSH
65869: CALL_OW 306
65873: IFFALSE 65938
// begin j := GetSide ( i ) ;
65875: LD_ADDR_VAR 0 3
65879: PUSH
65880: LD_VAR 0 2
65884: PPUSH
65885: CALL_OW 255
65889: ST_TO_ADDR
// if j = 8 then
65890: LD_VAR 0 3
65894: PUSH
65895: LD_INT 8
65897: EQUAL
65898: IFFALSE 65910
// j := 0 else
65900: LD_ADDR_VAR 0 3
65904: PUSH
65905: LD_INT 0
65907: ST_TO_ADDR
65908: GO 65924
// j := j + 1 ;
65910: LD_ADDR_VAR 0 3
65914: PUSH
65915: LD_VAR 0 3
65919: PUSH
65920: LD_INT 1
65922: PLUS
65923: ST_TO_ADDR
// SetSide ( i , j ) ;
65924: LD_VAR 0 2
65928: PPUSH
65929: LD_VAR 0 3
65933: PPUSH
65934: CALL_OW 235
// end ;
65938: GO 65861
65940: POP
65941: POP
// end ;
65942: LD_VAR 0 1
65946: RET
// export function hHackFog ; begin
65947: LD_INT 0
65949: PPUSH
// FogOff ( true ) ;
65950: LD_INT 1
65952: PPUSH
65953: CALL_OW 344
// end ;
65957: LD_VAR 0 1
65961: RET
// export function hHackTeleport ( unit , x , y ) ; begin
65962: LD_INT 0
65964: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
65965: LD_VAR 0 1
65969: PPUSH
65970: LD_VAR 0 2
65974: PPUSH
65975: LD_VAR 0 3
65979: PPUSH
65980: LD_INT 1
65982: PPUSH
65983: LD_INT 1
65985: PPUSH
65986: CALL_OW 483
// CenterOnXY ( x , y ) ;
65990: LD_VAR 0 2
65994: PPUSH
65995: LD_VAR 0 3
65999: PPUSH
66000: CALL_OW 84
// end ; end_of_file
66004: LD_VAR 0 4
66008: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
66009: LD_VAR 0 1
66013: PPUSH
66014: LD_VAR 0 2
66018: PPUSH
66019: LD_VAR 0 3
66023: PPUSH
66024: LD_VAR 0 4
66028: PPUSH
66029: LD_VAR 0 5
66033: PPUSH
66034: LD_VAR 0 6
66038: PPUSH
66039: CALL 52837 0 6
// end ; end_of_file end_of_file
66043: PPOPN 6
66045: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
66046: LD_INT 0
66048: PPUSH
// ar_miner := 81 ;
66049: LD_ADDR_EXP 102
66053: PUSH
66054: LD_INT 81
66056: ST_TO_ADDR
// ar_crane := 88 ;
66057: LD_ADDR_EXP 101
66061: PUSH
66062: LD_INT 88
66064: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
66065: LD_ADDR_EXP 96
66069: PUSH
66070: LD_INT 89
66072: ST_TO_ADDR
// us_hack := 99 ;
66073: LD_ADDR_EXP 97
66077: PUSH
66078: LD_INT 99
66080: ST_TO_ADDR
// us_artillery := 97 ;
66081: LD_ADDR_EXP 98
66085: PUSH
66086: LD_INT 97
66088: ST_TO_ADDR
// ar_bio_bomb := 91 ;
66089: LD_ADDR_EXP 99
66093: PUSH
66094: LD_INT 91
66096: ST_TO_ADDR
// ar_mortar := 92 ;
66097: LD_ADDR_EXP 100
66101: PUSH
66102: LD_INT 92
66104: ST_TO_ADDR
// ru_radar := 98 ;
66105: LD_ADDR_EXP 95
66109: PUSH
66110: LD_INT 98
66112: ST_TO_ADDR
// tech_Artillery := 80 ;
66113: LD_ADDR_EXP 103
66117: PUSH
66118: LD_INT 80
66120: ST_TO_ADDR
// tech_RadMat := 81 ;
66121: LD_ADDR_EXP 104
66125: PUSH
66126: LD_INT 81
66128: ST_TO_ADDR
// tech_BasicTools := 82 ;
66129: LD_ADDR_EXP 105
66133: PUSH
66134: LD_INT 82
66136: ST_TO_ADDR
// tech_Cargo := 83 ;
66137: LD_ADDR_EXP 106
66141: PUSH
66142: LD_INT 83
66144: ST_TO_ADDR
// tech_Track := 84 ;
66145: LD_ADDR_EXP 107
66149: PUSH
66150: LD_INT 84
66152: ST_TO_ADDR
// tech_Crane := 85 ;
66153: LD_ADDR_EXP 108
66157: PUSH
66158: LD_INT 85
66160: ST_TO_ADDR
// tech_Bulldozer := 86 ;
66161: LD_ADDR_EXP 109
66165: PUSH
66166: LD_INT 86
66168: ST_TO_ADDR
// tech_Hovercraft := 87 ;
66169: LD_ADDR_EXP 110
66173: PUSH
66174: LD_INT 87
66176: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
66177: LD_ADDR_EXP 111
66181: PUSH
66182: LD_INT 88
66184: ST_TO_ADDR
// class_mastodont := 31 ;
66185: LD_ADDR_EXP 112
66189: PUSH
66190: LD_INT 31
66192: ST_TO_ADDR
// class_horse := 21 ;
66193: LD_ADDR_EXP 113
66197: PUSH
66198: LD_INT 21
66200: ST_TO_ADDR
// end ;
66201: LD_VAR 0 1
66205: RET
// every 1 do
66206: GO 66208
66208: DISABLE
// InitGlobalVariables ;
66209: CALL 66046 0 0
66213: END
