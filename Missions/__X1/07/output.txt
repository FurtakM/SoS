// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 71401 0 0
// Init ;
   8: CALL 58 0 0
// AnimateTrees ( true ) ;
  12: LD_INT 1
  14: PPUSH
  15: CALL_OW 573
// CreateNature ( apemanSpawnArea , forestArea , riverArea ) ;
  19: LD_INT 4
  21: PPUSH
  22: LD_INT 5
  24: PPUSH
  25: LD_INT 6
  27: PPUSH
  28: CALL 459 0 3
// PrepareAmerican ;
  32: CALL 2535 0 0
// PrepareArabian ;
  36: CALL 1253 0 0
// Action ;
  40: CALL 6755 0 0
// if debug then
  44: LD_EXP 1
  48: IFFALSE 57
// FogOff ( 2 ) ;
  50: LD_INT 2
  52: PPUSH
  53: CALL_OW 344
// end ;
  57: END
// export debug , prefix , scoutActive , scoutFailed , scoutSuccess , usAttacksAllowed , usSurrender , russianAttack , hasRockets , seeRemoteVehicle , seeHeavyGun ; function Init ; begin
  58: LD_INT 0
  60: PPUSH
// debug := false ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// prefix := 06_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 06_
  76: ST_TO_ADDR
// scoutActive := 0 ;
  77: LD_ADDR_EXP 3
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// scoutFailed := false ;
  85: LD_ADDR_EXP 4
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// scoutSuccess := false ;
  93: LD_ADDR_EXP 5
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// usAttacksAllowed := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// usSurrender := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// russianAttack := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// hasRockets := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// seeRemoteVehicle := false ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// seeHeavyGun := false ;
 141: LD_ADDR_EXP 11
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// end ; end_of_file
 149: LD_VAR 0 1
 153: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 154: LD_INT 0
 156: PPUSH
// uc_side := side ;
 157: LD_ADDR_OWVAR 20
 161: PUSH
 162: LD_VAR 0 1
 166: ST_TO_ADDR
// uc_nation := nation ;
 167: LD_ADDR_OWVAR 21
 171: PUSH
 172: LD_VAR 0 2
 176: ST_TO_ADDR
// vc_chassis := chassis ;
 177: LD_ADDR_OWVAR 37
 181: PUSH
 182: LD_VAR 0 3
 186: ST_TO_ADDR
// vc_engine := engine ;
 187: LD_ADDR_OWVAR 39
 191: PUSH
 192: LD_VAR 0 4
 196: ST_TO_ADDR
// vc_control := control ;
 197: LD_ADDR_OWVAR 38
 201: PUSH
 202: LD_VAR 0 5
 206: ST_TO_ADDR
// vc_weapon := weapon ;
 207: LD_ADDR_OWVAR 40
 211: PUSH
 212: LD_VAR 0 6
 216: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 217: LD_ADDR_OWVAR 41
 221: PUSH
 222: LD_VAR 0 7
 226: ST_TO_ADDR
// result := CreateVehicle ;
 227: LD_ADDR_VAR 0 8
 231: PUSH
 232: CALL_OW 45
 236: ST_TO_ADDR
// end ;
 237: LD_VAR 0 8
 241: RET
// export function SayX ( units , ident ) ; var i ; begin
 242: LD_INT 0
 244: PPUSH
 245: PPUSH
// result := false ;
 246: LD_ADDR_VAR 0 3
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// if not units then
 254: LD_VAR 0 1
 258: NOT
 259: IFFALSE 263
// exit ;
 261: GO 317
// for i in units do
 263: LD_ADDR_VAR 0 4
 267: PUSH
 268: LD_VAR 0 1
 272: PUSH
 273: FOR_IN
 274: IFFALSE 315
// if IsOk ( i ) then
 276: LD_VAR 0 4
 280: PPUSH
 281: CALL_OW 302
 285: IFFALSE 313
// begin Say ( i , ident ) ;
 287: LD_VAR 0 4
 291: PPUSH
 292: LD_VAR 0 2
 296: PPUSH
 297: CALL_OW 88
// result := i ;
 301: LD_ADDR_VAR 0 3
 305: PUSH
 306: LD_VAR 0 4
 310: ST_TO_ADDR
// break ;
 311: GO 315
// end ;
 313: GO 273
 315: POP
 316: POP
// end ;
 317: LD_VAR 0 3
 321: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 322: LD_INT 0
 324: PPUSH
 325: PPUSH
// InitUc ;
 326: CALL_OW 18
// InitHc ;
 330: CALL_OW 19
// uc_side := 0 ;
 334: LD_ADDR_OWVAR 20
 338: PUSH
 339: LD_INT 0
 341: ST_TO_ADDR
// uc_nation := 0 ;
 342: LD_ADDR_OWVAR 21
 346: PUSH
 347: LD_INT 0
 349: ST_TO_ADDR
// for i = 1 to amount do
 350: LD_ADDR_VAR 0 4
 354: PUSH
 355: DOUBLE
 356: LD_INT 1
 358: DEC
 359: ST_TO_ADDR
 360: LD_VAR 0 2
 364: PUSH
 365: FOR_TO
 366: IFFALSE 448
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 368: LD_ADDR_OWVAR 29
 372: PUSH
 373: LD_INT 9
 375: PPUSH
 376: LD_INT 12
 378: PPUSH
 379: CALL_OW 12
 383: PUSH
 384: LD_INT 9
 386: PPUSH
 387: LD_INT 12
 389: PPUSH
 390: CALL_OW 12
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 399: LD_ADDR_OWVAR 35
 403: PUSH
 404: LD_INT 1
 406: NEG
 407: PPUSH
 408: LD_INT 1
 410: PPUSH
 411: CALL_OW 12
 415: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 416: LD_INT 0
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: LD_INT 1
 424: PPUSH
 425: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 429: CALL_OW 44
 433: PPUSH
 434: LD_VAR 0 1
 438: PPUSH
 439: LD_INT 0
 441: PPUSH
 442: CALL_OW 49
// end ;
 446: GO 365
 448: POP
 449: POP
// InitHc ;
 450: CALL_OW 19
// end ;
 454: LD_VAR 0 3
 458: RET
// export function CreateNature ( apemanArea , forest , water ) ; var i ; begin
 459: LD_INT 0
 461: PPUSH
 462: PPUSH
// uc_side := 0 ;
 463: LD_ADDR_OWVAR 20
 467: PUSH
 468: LD_INT 0
 470: ST_TO_ADDR
// uc_nation := 0 ;
 471: LD_ADDR_OWVAR 21
 475: PUSH
 476: LD_INT 0
 478: ST_TO_ADDR
// SpawnApeman ( apemanArea , [ 9 , 8 , 7 ] [ Difficulty ] ) ;
 479: LD_VAR 0 1
 483: PPUSH
 484: LD_INT 9
 486: PUSH
 487: LD_INT 8
 489: PUSH
 490: LD_INT 7
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: LIST
 497: PUSH
 498: LD_OWVAR 67
 502: ARRAY
 503: PPUSH
 504: CALL 322 0 2
// for i := 1 to 4 do
 508: LD_ADDR_VAR 0 5
 512: PUSH
 513: DOUBLE
 514: LD_INT 1
 516: DEC
 517: ST_TO_ADDR
 518: LD_INT 4
 520: PUSH
 521: FOR_TO
 522: IFFALSE 561
// begin hc_class := class_horse ;
 524: LD_ADDR_OWVAR 28
 528: PUSH
 529: LD_EXP 117
 533: ST_TO_ADDR
// hc_gallery :=  ;
 534: LD_ADDR_OWVAR 33
 538: PUSH
 539: LD_STRING 
 541: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 542: CALL_OW 44
 546: PPUSH
 547: LD_VAR 0 2
 551: PPUSH
 552: LD_INT 0
 554: PPUSH
 555: CALL_OW 49
// end ;
 559: GO 521
 561: POP
 562: POP
// for i = 1 to 5 do
 563: LD_ADDR_VAR 0 5
 567: PUSH
 568: DOUBLE
 569: LD_INT 1
 571: DEC
 572: ST_TO_ADDR
 573: LD_INT 5
 575: PUSH
 576: FOR_TO
 577: IFFALSE 631
// begin hc_class = class_tiger ;
 579: LD_ADDR_OWVAR 28
 583: PUSH
 584: LD_INT 14
 586: ST_TO_ADDR
// hc_gallery =  ;
 587: LD_ADDR_OWVAR 33
 591: PUSH
 592: LD_STRING 
 594: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 595: LD_ADDR_OWVAR 35
 599: PUSH
 600: LD_INT 7
 602: NEG
 603: PPUSH
 604: LD_INT 7
 606: PPUSH
 607: CALL_OW 12
 611: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
 612: CALL_OW 44
 616: PPUSH
 617: LD_VAR 0 2
 621: PPUSH
 622: LD_INT 0
 624: PPUSH
 625: CALL 50129 0 3
// end ;
 629: GO 576
 631: POP
 632: POP
// for i := 1 to 4 do
 633: LD_ADDR_VAR 0 5
 637: PUSH
 638: DOUBLE
 639: LD_INT 1
 641: DEC
 642: ST_TO_ADDR
 643: LD_INT 4
 645: PUSH
 646: FOR_TO
 647: IFFALSE 684
// begin hc_class := class_phororhacos ;
 649: LD_ADDR_OWVAR 28
 653: PUSH
 654: LD_INT 18
 656: ST_TO_ADDR
// hc_gallery :=  ;
 657: LD_ADDR_OWVAR 33
 661: PUSH
 662: LD_STRING 
 664: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 665: CALL_OW 44
 669: PPUSH
 670: LD_VAR 0 2
 674: PPUSH
 675: LD_INT 0
 677: PPUSH
 678: CALL_OW 49
// end ;
 682: GO 646
 684: POP
 685: POP
// for i := 1 to 4 do
 686: LD_ADDR_VAR 0 5
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 4
 698: PUSH
 699: FOR_TO
 700: IFFALSE 737
// begin hc_class := class_baggie ;
 702: LD_ADDR_OWVAR 28
 706: PUSH
 707: LD_INT 13
 709: ST_TO_ADDR
// hc_gallery :=  ;
 710: LD_ADDR_OWVAR 33
 714: PUSH
 715: LD_STRING 
 717: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 718: CALL_OW 44
 722: PPUSH
 723: LD_VAR 0 2
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: CALL_OW 49
// end ;
 735: GO 699
 737: POP
 738: POP
// for i := 1 to 5 do
 739: LD_ADDR_VAR 0 5
 743: PUSH
 744: DOUBLE
 745: LD_INT 1
 747: DEC
 748: ST_TO_ADDR
 749: LD_INT 5
 751: PUSH
 752: FOR_TO
 753: IFFALSE 790
// begin hc_class := class_fish ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 20
 762: ST_TO_ADDR
// hc_gallery :=  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , water , false ) ;
 771: CALL_OW 44
 775: PPUSH
 776: LD_VAR 0 3
 780: PPUSH
 781: LD_INT 0
 783: PPUSH
 784: CALL_OW 49
// end ;
 788: GO 752
 790: POP
 791: POP
// end ;
 792: LD_VAR 0 4
 796: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 797: LD_INT 0
 799: PPUSH
 800: PPUSH
 801: PPUSH
// if not observer or not unit then
 802: LD_VAR 0 1
 806: NOT
 807: PUSH
 808: LD_VAR 0 2
 812: NOT
 813: OR
 814: IFFALSE 818
// exit ;
 816: GO 866
// if not See ( GetSide ( observer ) , unit ) then
 818: LD_VAR 0 1
 822: PPUSH
 823: CALL_OW 255
 827: PPUSH
 828: LD_VAR 0 2
 832: PPUSH
 833: CALL_OW 292
 837: NOT
 838: IFFALSE 842
// exit ;
 840: GO 866
// result := GetDistUnits ( observer , unit ) < 12 ;
 842: LD_ADDR_VAR 0 3
 846: PUSH
 847: LD_VAR 0 1
 851: PPUSH
 852: LD_VAR 0 2
 856: PPUSH
 857: CALL_OW 296
 861: PUSH
 862: LD_INT 12
 864: LESS
 865: ST_TO_ADDR
// end ;
 866: LD_VAR 0 3
 870: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 871: LD_INT 0
 873: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 874: LD_VAR 0 2
 878: PUSH
 879: LD_INT 1
 881: ARRAY
 882: PPUSH
 883: LD_VAR 0 2
 887: PUSH
 888: LD_INT 2
 890: ARRAY
 891: PPUSH
 892: CALL_OW 488
 896: PUSH
 897: LD_VAR 0 2
 901: PUSH
 902: LD_INT 1
 904: ARRAY
 905: PPUSH
 906: LD_VAR 0 2
 910: PUSH
 911: LD_INT 2
 913: ARRAY
 914: PPUSH
 915: CALL_OW 428
 919: PUSH
 920: LD_INT 0
 922: EQUAL
 923: AND
 924: IFFALSE 958
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 926: LD_VAR 0 1
 930: PPUSH
 931: LD_VAR 0 2
 935: PUSH
 936: LD_INT 1
 938: ARRAY
 939: PPUSH
 940: LD_VAR 0 2
 944: PUSH
 945: LD_INT 2
 947: ARRAY
 948: PPUSH
 949: LD_VAR 0 3
 953: PPUSH
 954: CALL_OW 48
// end ;
 958: LD_VAR 0 4
 962: RET
// export function ReverseArray ( array ) ; var i ; begin
 963: LD_INT 0
 965: PPUSH
 966: PPUSH
// if not array then
 967: LD_VAR 0 1
 971: NOT
 972: IFFALSE 976
// exit ;
 974: GO 1034
// result := [ ] ;
 976: LD_ADDR_VAR 0 2
 980: PUSH
 981: EMPTY
 982: ST_TO_ADDR
// for i := 1 to array do
 983: LD_ADDR_VAR 0 3
 987: PUSH
 988: DOUBLE
 989: LD_INT 1
 991: DEC
 992: ST_TO_ADDR
 993: LD_VAR 0 1
 997: PUSH
 998: FOR_TO
 999: IFFALSE 1032
// result := Insert ( result , 1 , array [ i ] ) ;
1001: LD_ADDR_VAR 0 2
1005: PUSH
1006: LD_VAR 0 2
1010: PPUSH
1011: LD_INT 1
1013: PPUSH
1014: LD_VAR 0 1
1018: PUSH
1019: LD_VAR 0 3
1023: ARRAY
1024: PPUSH
1025: CALL_OW 2
1029: ST_TO_ADDR
1030: GO 998
1032: POP
1033: POP
// end ;
1034: LD_VAR 0 2
1038: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1039: LD_INT 0
1041: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1042: LD_VAR 0 1
1046: PPUSH
1047: LD_VAR 0 2
1051: PPUSH
1052: LD_VAR 0 3
1056: PPUSH
1057: LD_VAR 0 4
1061: PPUSH
1062: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1066: LD_VAR 0 1
1070: PPUSH
1071: LD_VAR 0 2
1075: PPUSH
1076: LD_VAR 0 3
1080: PPUSH
1081: CALL_OW 331
// end ;
1085: LD_VAR 0 5
1089: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1090: LD_INT 0
1092: PPUSH
// if not units then
1093: LD_VAR 0 1
1097: NOT
1098: IFFALSE 1102
// exit ;
1100: GO 1185
// result := true ;
1102: LD_ADDR_VAR 0 4
1106: PUSH
1107: LD_INT 1
1109: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1110: LD_VAR 0 1
1114: PPUSH
1115: LD_INT 26
1117: PUSH
1118: LD_INT 1
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: PPUSH
1125: CALL_OW 72
1129: PUSH
1130: LD_INT 1
1132: ARRAY
1133: PPUSH
1134: LD_VAR 0 2
1138: PPUSH
1139: CALL_OW 88
1143: NOT
1144: IFFALSE 1185
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1146: LD_ADDR_VAR 0 4
1150: PUSH
1151: LD_VAR 0 1
1155: PPUSH
1156: LD_INT 26
1158: PUSH
1159: LD_INT 2
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: PPUSH
1166: CALL_OW 72
1170: PUSH
1171: LD_INT 1
1173: ARRAY
1174: PPUSH
1175: LD_VAR 0 3
1179: PPUSH
1180: CALL_OW 88
1184: ST_TO_ADDR
// end ;
1185: LD_VAR 0 4
1189: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1190: LD_INT 0
1192: PPUSH
1193: PPUSH
// if not group then
1194: LD_VAR 0 2
1198: NOT
1199: IFFALSE 1203
// exit ;
1201: GO 1248
// for i in group do
1203: LD_ADDR_VAR 0 4
1207: PUSH
1208: LD_VAR 0 2
1212: PUSH
1213: FOR_IN
1214: IFFALSE 1246
// if See ( side , i ) then
1216: LD_VAR 0 1
1220: PPUSH
1221: LD_VAR 0 4
1225: PPUSH
1226: CALL_OW 292
1230: IFFALSE 1244
// begin result := true ;
1232: LD_ADDR_VAR 0 3
1236: PUSH
1237: LD_INT 1
1239: ST_TO_ADDR
// exit ;
1240: POP
1241: POP
1242: GO 1248
// end ;
1244: GO 1213
1246: POP
1247: POP
// end ; end_of_file
1248: LD_VAR 0 3
1252: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeApes , heikeVehicles ; export function PrepareArabian ; var i , tmp ; begin
1253: LD_INT 0
1255: PPUSH
1256: PPUSH
1257: PPUSH
// uc_nation := 2 ;
1258: LD_ADDR_OWVAR 21
1262: PUSH
1263: LD_INT 2
1265: ST_TO_ADDR
// uc_side := 5 ;
1266: LD_ADDR_OWVAR 20
1270: PUSH
1271: LD_INT 5
1273: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1274: LD_ADDR_EXP 20
1278: PUSH
1279: LD_STRING Abdul
1281: PPUSH
1282: LD_INT 0
1284: PPUSH
1285: LD_STRING 
1287: PPUSH
1288: CALL 14478 0 3
1292: ST_TO_ADDR
// uc_side := 2 ;
1293: LD_ADDR_OWVAR 20
1297: PUSH
1298: LD_INT 2
1300: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1301: LD_ADDR_EXP 12
1305: PUSH
1306: LD_STRING Heike
1308: PPUSH
1309: LD_EXP 1
1313: NOT
1314: PPUSH
1315: LD_EXP 2
1319: PPUSH
1320: CALL 14478 0 3
1324: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1325: LD_ADDR_EXP 15
1329: PUSH
1330: LD_STRING Ibrahim
1332: PPUSH
1333: LD_EXP 1
1337: NOT
1338: PPUSH
1339: LD_EXP 2
1343: PPUSH
1344: CALL 14478 0 3
1348: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1349: LD_ADDR_EXP 13
1353: PUSH
1354: LD_STRING Givi
1356: PPUSH
1357: LD_EXP 1
1361: NOT
1362: PPUSH
1363: LD_EXP 2
1367: PPUSH
1368: CALL 14478 0 3
1372: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1373: LD_ADDR_EXP 16
1377: PUSH
1378: LD_STRING Kamil
1380: PPUSH
1381: LD_EXP 1
1385: NOT
1386: PPUSH
1387: LD_EXP 2
1391: PPUSH
1392: CALL 14478 0 3
1396: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1397: LD_ADDR_EXP 17
1401: PUSH
1402: LD_STRING Kaia
1404: PPUSH
1405: LD_EXP 1
1409: NOT
1410: PPUSH
1411: LD_EXP 2
1415: PPUSH
1416: CALL 14478 0 3
1420: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1421: LD_ADDR_EXP 18
1425: PUSH
1426: LD_STRING Sophia
1428: PPUSH
1429: LD_EXP 1
1433: NOT
1434: PPUSH
1435: LD_EXP 2
1439: PPUSH
1440: CALL 14478 0 3
1444: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1445: LD_ADDR_EXP 19
1449: PUSH
1450: LD_STRING Markov
1452: PPUSH
1453: LD_EXP 1
1457: NOT
1458: PPUSH
1459: LD_EXP 2
1463: PPUSH
1464: CALL 14478 0 3
1468: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1469: LD_ADDR_EXP 23
1473: PUSH
1474: LD_STRING Aviradze
1476: PPUSH
1477: LD_EXP 1
1481: NOT
1482: PPUSH
1483: LD_EXP 2
1487: PPUSH
1488: CALL 14478 0 3
1492: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1493: LD_ADDR_EXP 22
1497: PUSH
1498: LD_STRING Kurt
1500: PPUSH
1501: LD_EXP 1
1505: NOT
1506: PPUSH
1507: LD_EXP 2
1511: PPUSH
1512: CALL 14478 0 3
1516: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1517: LD_ADDR_EXP 14
1521: PUSH
1522: LD_STRING Mike
1524: PPUSH
1525: LD_EXP 1
1529: NOT
1530: PPUSH
1531: LD_EXP 2
1535: PPUSH
1536: CALL 14478 0 3
1540: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1541: LD_ADDR_EXP 21
1545: PUSH
1546: LD_STRING Olaf
1548: PPUSH
1549: LD_INT 0
1551: PPUSH
1552: LD_STRING 
1554: PPUSH
1555: CALL 14478 0 3
1559: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 06_others ) ;
1560: LD_ADDR_EXP 24
1564: PUSH
1565: LD_STRING 06_others
1567: PPUSH
1568: CALL_OW 31
1572: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 06_apes ) ;
1573: LD_ADDR_EXP 25
1577: PUSH
1578: LD_STRING 06_apes
1580: PPUSH
1581: CALL_OW 31
1585: ST_TO_ADDR
// if debug then
1586: LD_EXP 1
1590: IFFALSE 1865
// begin tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 750 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 900 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 100 , 0 ] ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 50 , 50 ] ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_mortar , 2 , 1000 , 0 ] ] ;
1592: LD_ADDR_VAR 0 3
1596: PUSH
1597: LD_INT 14
1599: PUSH
1600: LD_INT 1
1602: PUSH
1603: LD_INT 2
1605: PUSH
1606: LD_INT 25
1608: PUSH
1609: LD_INT 2
1611: PUSH
1612: LD_INT 1000
1614: PUSH
1615: LD_INT 0
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 14
1629: PUSH
1630: LD_INT 1
1632: PUSH
1633: LD_INT 1
1635: PUSH
1636: LD_INT 31
1638: PUSH
1639: LD_INT 2
1641: PUSH
1642: LD_INT 1000
1644: PUSH
1645: LD_INT 0
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: LIST
1652: LIST
1653: LIST
1654: LIST
1655: LIST
1656: PUSH
1657: LD_INT 14
1659: PUSH
1660: LD_INT 1
1662: PUSH
1663: LD_INT 1
1665: PUSH
1666: LD_INT 27
1668: PUSH
1669: LD_INT 2
1671: PUSH
1672: LD_INT 750
1674: PUSH
1675: LD_INT 0
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 14
1689: PUSH
1690: LD_INT 1
1692: PUSH
1693: LD_INT 1
1695: PUSH
1696: LD_INT 27
1698: PUSH
1699: LD_INT 2
1701: PUSH
1702: LD_INT 900
1704: PUSH
1705: LD_INT 0
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: PUSH
1717: LD_INT 14
1719: PUSH
1720: LD_INT 1
1722: PUSH
1723: LD_INT 1
1725: PUSH
1726: LD_INT 32
1728: PUSH
1729: LD_INT 2
1731: PUSH
1732: LD_INT 1000
1734: PUSH
1735: LD_INT 100
1737: PUSH
1738: LD_INT 0
1740: PUSH
1741: EMPTY
1742: LIST
1743: LIST
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: LIST
1749: LIST
1750: LIST
1751: LIST
1752: LIST
1753: PUSH
1754: LD_INT 14
1756: PUSH
1757: LD_INT 1
1759: PUSH
1760: LD_INT 1
1762: PUSH
1763: LD_INT 32
1765: PUSH
1766: LD_INT 2
1768: PUSH
1769: LD_INT 1000
1771: PUSH
1772: LD_INT 50
1774: PUSH
1775: LD_INT 50
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: PUSH
1791: LD_INT 14
1793: PUSH
1794: LD_INT 1
1796: PUSH
1797: LD_INT 2
1799: PUSH
1800: LD_INT 27
1802: PUSH
1803: LD_INT 2
1805: PUSH
1806: LD_INT 1000
1808: PUSH
1809: LD_INT 0
1811: PUSH
1812: EMPTY
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: PUSH
1821: LD_INT 14
1823: PUSH
1824: LD_INT 1
1826: PUSH
1827: LD_INT 1
1829: PUSH
1830: LD_EXP 104
1834: PUSH
1835: LD_INT 2
1837: PUSH
1838: LD_INT 1000
1840: PUSH
1841: LD_INT 0
1843: PUSH
1844: EMPTY
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: ST_TO_ADDR
// end else
1863: GO 1872
// tmp := [ ] ;
1865: LD_ADDR_VAR 0 3
1869: PUSH
1870: EMPTY
1871: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 06_Vehicles , tmp ) ;
1872: LD_ADDR_EXP 26
1876: PUSH
1877: LD_STRING 06_Vehicles
1879: PPUSH
1880: LD_VAR 0 3
1884: PPUSH
1885: CALL_OW 30
1889: ST_TO_ADDR
// if heikeVehicles then
1890: LD_EXP 26
1894: IFFALSE 1989
// begin for i := heikeVehicles downto 1 do
1896: LD_ADDR_VAR 0 2
1900: PUSH
1901: DOUBLE
1902: LD_EXP 26
1906: INC
1907: ST_TO_ADDR
1908: LD_INT 1
1910: PUSH
1911: FOR_DOWNTO
1912: IFFALSE 1987
// begin if heikeVehicles [ i ] [ 3 ] = control_remote then
1914: LD_EXP 26
1918: PUSH
1919: LD_VAR 0 2
1923: ARRAY
1924: PUSH
1925: LD_INT 3
1927: ARRAY
1928: PUSH
1929: LD_INT 2
1931: EQUAL
1932: IFFALSE 1985
// begin heikeVehicles := Insert ( heikeVehicles , heikeVehicles , heikeVehicles [ i ] ) ;
1934: LD_ADDR_EXP 26
1938: PUSH
1939: LD_EXP 26
1943: PPUSH
1944: LD_EXP 26
1948: PPUSH
1949: LD_EXP 26
1953: PUSH
1954: LD_VAR 0 2
1958: ARRAY
1959: PPUSH
1960: CALL_OW 2
1964: ST_TO_ADDR
// heikeVehicles := Delete ( heikeVehicles , i ) ;
1965: LD_ADDR_EXP 26
1969: PUSH
1970: LD_EXP 26
1974: PPUSH
1975: LD_VAR 0 2
1979: PPUSH
1980: CALL_OW 3
1984: ST_TO_ADDR
// end ; end ;
1985: GO 1911
1987: POP
1988: POP
// end ; end ;
1989: LD_VAR 0 1
1993: RET
// every 0 0$1 trigger scoutActive do var i , tmp ;
1994: LD_EXP 3
1998: IFFALSE 2532
2000: GO 2002
2002: DISABLE
2003: LD_INT 0
2005: PPUSH
2006: PPUSH
// begin tmp := [ [ [ 96 , 50 ] , [ 49 , 52 ] , [ 34 , 55 ] , [ 41 , 70 ] , [ 53 , 96 ] , [ 103 , 64 ] ] , [ [ 104 , 70 ] , [ 111 , 103 ] , [ 131 , 147 ] , [ 130 , 153 ] , [ 110 , 93 ] , [ 103 , 65 ] ] ] ;
2007: LD_ADDR_VAR 0 2
2011: PUSH
2012: LD_INT 96
2014: PUSH
2015: LD_INT 50
2017: PUSH
2018: EMPTY
2019: LIST
2020: LIST
2021: PUSH
2022: LD_INT 49
2024: PUSH
2025: LD_INT 52
2027: PUSH
2028: EMPTY
2029: LIST
2030: LIST
2031: PUSH
2032: LD_INT 34
2034: PUSH
2035: LD_INT 55
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: PUSH
2042: LD_INT 41
2044: PUSH
2045: LD_INT 70
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: PUSH
2052: LD_INT 53
2054: PUSH
2055: LD_INT 96
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PUSH
2062: LD_INT 103
2064: PUSH
2065: LD_INT 64
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: PUSH
2080: LD_INT 104
2082: PUSH
2083: LD_INT 70
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: PUSH
2090: LD_INT 111
2092: PUSH
2093: LD_INT 103
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: PUSH
2100: LD_INT 131
2102: PUSH
2103: LD_INT 147
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: PUSH
2110: LD_INT 130
2112: PUSH
2113: LD_INT 153
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: PUSH
2120: LD_INT 110
2122: PUSH
2123: LD_INT 93
2125: PUSH
2126: EMPTY
2127: LIST
2128: LIST
2129: PUSH
2130: LD_INT 103
2132: PUSH
2133: LD_INT 65
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: PUSH
2140: EMPTY
2141: LIST
2142: LIST
2143: LIST
2144: LIST
2145: LIST
2146: LIST
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: ST_TO_ADDR
// for i in tmp [ 1 ] do
2152: LD_ADDR_VAR 0 1
2156: PUSH
2157: LD_VAR 0 2
2161: PUSH
2162: LD_INT 1
2164: ARRAY
2165: PUSH
2166: FOR_IN
2167: IFFALSE 2219
// begin AddComAgressiveMove ( Mike , i [ 1 ] , i [ 2 ] ) ;
2169: LD_EXP 14
2173: PPUSH
2174: LD_VAR 0 1
2178: PUSH
2179: LD_INT 1
2181: ARRAY
2182: PPUSH
2183: LD_VAR 0 1
2187: PUSH
2188: LD_INT 2
2190: ARRAY
2191: PPUSH
2192: CALL_OW 174
// AddComHold ( Mike ) ;
2196: LD_EXP 14
2200: PPUSH
2201: CALL_OW 200
// AddComWait ( Mike , 0 0$5 ) ;
2205: LD_EXP 14
2209: PPUSH
2210: LD_INT 175
2212: PPUSH
2213: CALL_OW 202
// end ;
2217: GO 2166
2219: POP
2220: POP
// for i in tmp [ 2 ] do
2221: LD_ADDR_VAR 0 1
2225: PUSH
2226: LD_VAR 0 2
2230: PUSH
2231: LD_INT 2
2233: ARRAY
2234: PUSH
2235: FOR_IN
2236: IFFALSE 2288
// begin AddComAgressiveMove ( Kurt , i [ 1 ] , i [ 2 ] ) ;
2238: LD_EXP 22
2242: PPUSH
2243: LD_VAR 0 1
2247: PUSH
2248: LD_INT 1
2250: ARRAY
2251: PPUSH
2252: LD_VAR 0 1
2256: PUSH
2257: LD_INT 2
2259: ARRAY
2260: PPUSH
2261: CALL_OW 174
// AddComHold ( Kurt ) ;
2265: LD_EXP 22
2269: PPUSH
2270: CALL_OW 200
// AddComWait ( Kurt , 0 0$5 ) ;
2274: LD_EXP 22
2278: PPUSH
2279: LD_INT 175
2281: PPUSH
2282: CALL_OW 202
// end ;
2286: GO 2235
2288: POP
2289: POP
// wait ( 0 0$1 ) ;
2290: LD_INT 35
2292: PPUSH
2293: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2297: LD_INT 35
2299: PPUSH
2300: CALL_OW 67
// until ( not HasTask ( Mike ) or IsDead ( Mike ) ) and ( not HasTask ( Kurt ) or IsDead ( Kurt ) ) ;
2304: LD_EXP 14
2308: PPUSH
2309: CALL_OW 314
2313: NOT
2314: PUSH
2315: LD_EXP 14
2319: PPUSH
2320: CALL_OW 301
2324: OR
2325: PUSH
2326: LD_EXP 22
2330: PPUSH
2331: CALL_OW 314
2335: NOT
2336: PUSH
2337: LD_EXP 22
2341: PPUSH
2342: CALL_OW 301
2346: OR
2347: AND
2348: IFFALSE 2297
// if IsDead ( Kurt ) and IsDead ( Mike ) then
2350: LD_EXP 22
2354: PPUSH
2355: CALL_OW 301
2359: PUSH
2360: LD_EXP 14
2364: PPUSH
2365: CALL_OW 301
2369: AND
2370: IFFALSE 2382
// begin scoutFailed := true ;
2372: LD_ADDR_EXP 4
2376: PUSH
2377: LD_INT 1
2379: ST_TO_ADDR
// exit ;
2380: GO 2532
// end ; ComMoveXY ( [ Kurt , Mike ] , 132 , 52 ) ;
2382: LD_EXP 22
2386: PUSH
2387: LD_EXP 14
2391: PUSH
2392: EMPTY
2393: LIST
2394: LIST
2395: PPUSH
2396: LD_INT 132
2398: PPUSH
2399: LD_INT 52
2401: PPUSH
2402: CALL_OW 111
// AddComMoveUnit ( [ Kurt , Mike ] , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
2406: LD_EXP 22
2410: PUSH
2411: LD_EXP 14
2415: PUSH
2416: EMPTY
2417: LIST
2418: LIST
2419: PPUSH
2420: LD_INT 22
2422: PUSH
2423: LD_INT 2
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PPUSH
2430: CALL_OW 69
2434: PUSH
2435: LD_INT 1
2437: ARRAY
2438: PPUSH
2439: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
2443: LD_INT 35
2445: PPUSH
2446: CALL_OW 67
// until See ( 2 , Kurt ) or See ( 2 , Mike ) ;
2450: LD_INT 2
2452: PPUSH
2453: LD_EXP 22
2457: PPUSH
2458: CALL_OW 292
2462: PUSH
2463: LD_INT 2
2465: PPUSH
2466: LD_EXP 14
2470: PPUSH
2471: CALL_OW 292
2475: OR
2476: IFFALSE 2443
// if IsLive ( Kurt ) then
2478: LD_EXP 22
2482: PPUSH
2483: CALL_OW 300
2487: IFFALSE 2501
// SetSide ( Kurt , 2 ) ;
2489: LD_EXP 22
2493: PPUSH
2494: LD_INT 2
2496: PPUSH
2497: CALL_OW 235
// if IsLive ( Mike ) then
2501: LD_EXP 14
2505: PPUSH
2506: CALL_OW 300
2510: IFFALSE 2524
// SetSide ( Mike , 2 ) ;
2512: LD_EXP 14
2516: PPUSH
2517: LD_INT 2
2519: PPUSH
2520: CALL_OW 235
// scoutSuccess := true ;
2524: LD_ADDR_EXP 5
2528: PUSH
2529: LD_INT 1
2531: ST_TO_ADDR
// end ; end_of_file
2532: PPOPN 2
2534: END
// export usCommander , usForces , usCargo , usToBuild , usAdditionalForces ; export function PrepareAmerican ; var i , b , veh ; begin
2535: LD_INT 0
2537: PPUSH
2538: PPUSH
2539: PPUSH
2540: PPUSH
// uc_side := 1 ;
2541: LD_ADDR_OWVAR 20
2545: PUSH
2546: LD_INT 1
2548: ST_TO_ADDR
// uc_nation := 1 ;
2549: LD_ADDR_OWVAR 21
2553: PUSH
2554: LD_INT 1
2556: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 2000 , 2500 , 3000 , 3500 ] [ Difficulty ] ) ;
2557: LD_INT 1
2559: PPUSH
2560: CALL_OW 274
2564: PPUSH
2565: LD_INT 1
2567: PPUSH
2568: LD_INT 2000
2570: PUSH
2571: LD_INT 2500
2573: PUSH
2574: LD_INT 3000
2576: PUSH
2577: LD_INT 3500
2579: PUSH
2580: EMPTY
2581: LIST
2582: LIST
2583: LIST
2584: LIST
2585: PUSH
2586: LD_OWVAR 67
2590: ARRAY
2591: PPUSH
2592: CALL_OW 277
// SetResourceType ( GetBase ( usDepot ) , mat_oil , 600 ) ;
2596: LD_INT 1
2598: PPUSH
2599: CALL_OW 274
2603: PPUSH
2604: LD_INT 2
2606: PPUSH
2607: LD_INT 600
2609: PPUSH
2610: CALL_OW 277
// usForces := [ ] ;
2614: LD_ADDR_EXP 28
2618: PUSH
2619: EMPTY
2620: ST_TO_ADDR
// usToBuild := [ ] ;
2621: LD_ADDR_EXP 30
2625: PUSH
2626: EMPTY
2627: ST_TO_ADDR
// usAdditionalForces := [ ] ;
2628: LD_ADDR_EXP 31
2632: PUSH
2633: EMPTY
2634: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2635: LD_ADDR_VAR 0 2
2639: PUSH
2640: LD_INT 21
2642: PUSH
2643: LD_INT 3
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: PPUSH
2650: CALL_OW 69
2654: PUSH
2655: FOR_IN
2656: IFFALSE 2693
// SetBLevel ( i , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
2658: LD_VAR 0 2
2662: PPUSH
2663: LD_INT 6
2665: PUSH
2666: LD_INT 7
2668: PUSH
2669: LD_INT 8
2671: PUSH
2672: LD_INT 8
2674: PUSH
2675: EMPTY
2676: LIST
2677: LIST
2678: LIST
2679: LIST
2680: PUSH
2681: LD_OWVAR 67
2685: ARRAY
2686: PPUSH
2687: CALL_OW 241
2691: GO 2655
2693: POP
2694: POP
// for i in FilterAllUnits ( [ f_btype , b_bunker ] ) do
2695: LD_ADDR_VAR 0 2
2699: PUSH
2700: LD_INT 30
2702: PUSH
2703: LD_INT 32
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: PPUSH
2710: CALL_OW 69
2714: PUSH
2715: FOR_IN
2716: IFFALSE 2806
// begin if GetBWeapon ( i ) = us_radar then
2718: LD_VAR 0 2
2722: PPUSH
2723: CALL_OW 269
2727: PUSH
2728: LD_INT 11
2730: EQUAL
2731: IFFALSE 2756
// begin uc_nation := 0 ;
2733: LD_ADDR_OWVAR 21
2737: PUSH
2738: LD_INT 0
2740: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 2 ) ;
2741: LD_INT 0
2743: PPUSH
2744: LD_INT 16
2746: PPUSH
2747: LD_INT 2
2749: PPUSH
2750: CALL_OW 380
// end else
2754: GO 2790
// PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2756: LD_INT 0
2758: PPUSH
2759: LD_INT 1
2761: PPUSH
2762: LD_INT 5
2764: PUSH
2765: LD_INT 6
2767: PUSH
2768: LD_INT 7
2770: PUSH
2771: LD_INT 8
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: LIST
2778: LIST
2779: PUSH
2780: LD_OWVAR 67
2784: ARRAY
2785: PPUSH
2786: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2790: CALL_OW 44
2794: PPUSH
2795: LD_VAR 0 2
2799: PPUSH
2800: CALL_OW 52
// end ;
2804: GO 2715
2806: POP
2807: POP
// b := HexInfo ( 74 , 120 ) ;
2808: LD_ADDR_VAR 0 3
2812: PUSH
2813: LD_INT 74
2815: PPUSH
2816: LD_INT 120
2818: PPUSH
2819: CALL_OW 428
2823: ST_TO_ADDR
// uc_nation := 1 ;
2824: LD_ADDR_OWVAR 21
2828: PUSH
2829: LD_INT 1
2831: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
2832: LD_ADDR_VAR 0 2
2836: PUSH
2837: DOUBLE
2838: LD_INT 1
2840: DEC
2841: ST_TO_ADDR
2842: LD_INT 1
2844: PUSH
2845: LD_INT 2
2847: PUSH
2848: LD_INT 3
2850: PUSH
2851: LD_INT 4
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: LIST
2858: LIST
2859: PUSH
2860: LD_OWVAR 67
2864: ARRAY
2865: PUSH
2866: FOR_TO
2867: IFFALSE 2919
// begin PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2869: LD_INT 0
2871: PPUSH
2872: LD_INT 1
2874: PPUSH
2875: LD_INT 5
2877: PUSH
2878: LD_INT 6
2880: PUSH
2881: LD_INT 7
2883: PUSH
2884: LD_INT 8
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: LIST
2891: LIST
2892: PUSH
2893: LD_OWVAR 67
2897: ARRAY
2898: PPUSH
2899: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b ) ;
2903: CALL_OW 44
2907: PPUSH
2908: LD_VAR 0 3
2912: PPUSH
2913: CALL_OW 52
// end ;
2917: GO 2866
2919: POP
2920: POP
// SetClass ( UnitsInside ( b ) , class_sniper ) ;
2921: LD_VAR 0 3
2925: PPUSH
2926: CALL_OW 313
2930: PPUSH
2931: LD_INT 5
2933: PPUSH
2934: CALL_OW 336
// for i := 1 to 6 do
2938: LD_ADDR_VAR 0 2
2942: PUSH
2943: DOUBLE
2944: LD_INT 1
2946: DEC
2947: ST_TO_ADDR
2948: LD_INT 6
2950: PUSH
2951: FOR_TO
2952: IFFALSE 3002
// begin PrepareHuman ( false , 4 , 6 ) ;
2954: LD_INT 0
2956: PPUSH
2957: LD_INT 4
2959: PPUSH
2960: LD_INT 6
2962: PPUSH
2963: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ amLab1 , amLab2 ] [ i mod 2 + 1 ] ) ;
2967: CALL_OW 44
2971: PPUSH
2972: LD_INT 32
2974: PUSH
2975: LD_INT 33
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PUSH
2982: LD_VAR 0 2
2986: PUSH
2987: LD_INT 2
2989: MOD
2990: PUSH
2991: LD_INT 1
2993: PLUS
2994: ARRAY
2995: PPUSH
2996: CALL_OW 52
// end ;
3000: GO 2951
3002: POP
3003: POP
// for i := 1 to 3 do
3004: LD_ADDR_VAR 0 2
3008: PUSH
3009: DOUBLE
3010: LD_INT 1
3012: DEC
3013: ST_TO_ADDR
3014: LD_INT 3
3016: PUSH
3017: FOR_TO
3018: IFFALSE 3047
// begin PrepareHuman ( false , 3 , 6 ) ;
3020: LD_INT 0
3022: PPUSH
3023: LD_INT 3
3025: PPUSH
3026: LD_INT 6
3028: PPUSH
3029: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , amFac ) ;
3033: CALL_OW 44
3037: PPUSH
3038: LD_INT 25
3040: PPUSH
3041: CALL_OW 52
// end ;
3045: GO 3017
3047: POP
3048: POP
// for i := 1 to 3 do
3049: LD_ADDR_VAR 0 2
3053: PUSH
3054: DOUBLE
3055: LD_INT 1
3057: DEC
3058: ST_TO_ADDR
3059: LD_INT 3
3061: PUSH
3062: FOR_TO
3063: IFFALSE 3121
// begin PrepareHuman ( false , 3 , [ 6 , 7 , 7 , 7 ] [ Difficulty ] ) ;
3065: LD_INT 0
3067: PPUSH
3068: LD_INT 3
3070: PPUSH
3071: LD_INT 6
3073: PUSH
3074: LD_INT 7
3076: PUSH
3077: LD_INT 7
3079: PUSH
3080: LD_INT 7
3082: PUSH
3083: EMPTY
3084: LIST
3085: LIST
3086: LIST
3087: LIST
3088: PUSH
3089: LD_OWVAR 67
3093: ARRAY
3094: PPUSH
3095: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 84 , 154 ) ) ;
3099: CALL_OW 44
3103: PPUSH
3104: LD_INT 84
3106: PPUSH
3107: LD_INT 154
3109: PPUSH
3110: CALL_OW 428
3114: PPUSH
3115: CALL_OW 52
// end ;
3119: GO 3062
3121: POP
3122: POP
// for i := 1 to 3 do
3123: LD_ADDR_VAR 0 2
3127: PUSH
3128: DOUBLE
3129: LD_INT 1
3131: DEC
3132: ST_TO_ADDR
3133: LD_INT 3
3135: PUSH
3136: FOR_TO
3137: IFFALSE 3224
// begin PrepareVehicle ( us_medium_wheeled , engine_solar , control_manual , us_crane , 100 ) ;
3139: LD_INT 2
3141: PPUSH
3142: LD_INT 2
3144: PPUSH
3145: LD_INT 1
3147: PPUSH
3148: LD_INT 13
3150: PPUSH
3151: LD_INT 100
3153: PPUSH
3154: CALL 19342 0 5
// veh := CreateVehicle ;
3158: LD_ADDR_VAR 0 4
3162: PUSH
3163: CALL_OW 45
3167: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3168: LD_VAR 0 4
3172: PPUSH
3173: LD_INT 3
3175: PPUSH
3176: CALL_OW 233
// PlaceUnitArea ( veh , usCraneArea , false ) ;
3180: LD_VAR 0 4
3184: PPUSH
3185: LD_INT 9
3187: PPUSH
3188: LD_INT 0
3190: PPUSH
3191: CALL_OW 49
// PrepareHuman ( false , 3 , 6 ) ;
3195: LD_INT 0
3197: PPUSH
3198: LD_INT 3
3200: PPUSH
3201: LD_INT 6
3203: PPUSH
3204: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3208: CALL_OW 44
3212: PPUSH
3213: LD_VAR 0 4
3217: PPUSH
3218: CALL_OW 52
// end ;
3222: GO 3136
3224: POP
3225: POP
// InitHc ;
3226: CALL_OW 19
// hc_gallery := us ;
3230: LD_ADDR_OWVAR 33
3234: PUSH
3235: LD_STRING us
3237: ST_TO_ADDR
// hc_face_number := 26 ;
3238: LD_ADDR_OWVAR 34
3242: PUSH
3243: LD_INT 26
3245: ST_TO_ADDR
// hc_name := Max Caldera ;
3246: LD_ADDR_OWVAR 26
3250: PUSH
3251: LD_STRING Max Caldera
3253: ST_TO_ADDR
// hc_class := class_engineer ;
3254: LD_ADDR_OWVAR 28
3258: PUSH
3259: LD_INT 2
3261: ST_TO_ADDR
// hc_sex := sex_male ;
3262: LD_ADDR_OWVAR 27
3266: PUSH
3267: LD_INT 1
3269: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
3270: LD_ADDR_OWVAR 29
3274: PUSH
3275: LD_INT 10
3277: PUSH
3278: LD_INT 11
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
3285: LD_ADDR_OWVAR 30
3289: PUSH
3290: LD_INT 2
3292: PUSH
3293: LD_INT 1
3295: PUSH
3296: LD_INT 0
3298: PUSH
3299: LD_INT 0
3301: PUSH
3302: EMPTY
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: ST_TO_ADDR
// hc_skills := [ 4 , 6 , 3 , 1 ] ;
3308: LD_ADDR_OWVAR 31
3312: PUSH
3313: LD_INT 4
3315: PUSH
3316: LD_INT 6
3318: PUSH
3319: LD_INT 3
3321: PUSH
3322: LD_INT 1
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: LIST
3329: LIST
3330: ST_TO_ADDR
// usCommander := CreateHuman ;
3331: LD_ADDR_EXP 27
3335: PUSH
3336: CALL_OW 44
3340: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
3341: LD_EXP 27
3345: PPUSH
3346: LD_INT 1
3348: PPUSH
3349: CALL_OW 52
// InitHC_All ( ) ;
3353: CALL_OW 584
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay , 100 ) ;
3357: LD_INT 2
3359: PPUSH
3360: LD_INT 1
3362: PPUSH
3363: LD_INT 2
3365: PPUSH
3366: LD_INT 12
3368: PPUSH
3369: LD_INT 100
3371: PPUSH
3372: CALL 19342 0 5
// usCargo := CreateVehicle ;
3376: LD_ADDR_EXP 29
3380: PUSH
3381: CALL_OW 45
3385: ST_TO_ADDR
// PlaceUnitXY ( usCargo , 81 , 143 , false ) ;
3386: LD_EXP 29
3390: PPUSH
3391: LD_INT 81
3393: PPUSH
3394: LD_INT 143
3396: PPUSH
3397: LD_INT 0
3399: PPUSH
3400: CALL_OW 48
// Connect ( usCargo ) ;
3404: LD_EXP 29
3408: PPUSH
3409: CALL 22435 0 1
// DoNotAttack ( 5 , usCargo ) ;
3413: LD_INT 5
3415: PPUSH
3416: LD_EXP 29
3420: PPUSH
3421: CALL_OW 471
// end ;
3425: LD_VAR 0 1
3429: RET
// every 6 6$00 trigger not usForces and usAttacksAllowed and IsOk ( amFac ) and BuildingStatus ( amFac ) = bs_idle do var i , chassis , weapon ;
3430: LD_EXP 28
3434: NOT
3435: PUSH
3436: LD_EXP 6
3440: AND
3441: PUSH
3442: LD_INT 25
3444: PPUSH
3445: CALL_OW 302
3449: AND
3450: PUSH
3451: LD_INT 25
3453: PPUSH
3454: CALL_OW 461
3458: PUSH
3459: LD_INT 2
3461: EQUAL
3462: AND
3463: IFFALSE 3620
3465: GO 3467
3467: DISABLE
3468: LD_INT 0
3470: PPUSH
3471: PPUSH
3472: PPUSH
// begin enable ;
3473: ENABLE
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3474: LD_ADDR_VAR 0 1
3478: PUSH
3479: DOUBLE
3480: LD_INT 1
3482: DEC
3483: ST_TO_ADDR
3484: LD_INT 5
3486: PUSH
3487: LD_INT 6
3489: PUSH
3490: LD_INT 7
3492: PUSH
3493: LD_INT 8
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: PUSH
3502: LD_OWVAR 67
3506: ARRAY
3507: PUSH
3508: FOR_TO
3509: IFFALSE 3618
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3511: LD_ADDR_VAR 0 2
3515: PUSH
3516: LD_INT 2
3518: PUSH
3519: LD_INT 3
3521: PUSH
3522: LD_INT 4
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: LIST
3529: PUSH
3530: LD_INT 1
3532: PPUSH
3533: LD_INT 3
3535: PPUSH
3536: CALL_OW 12
3540: ARRAY
3541: ST_TO_ADDR
// if chassis = us_heavy_tracked then
3542: LD_VAR 0 2
3546: PUSH
3547: LD_INT 4
3549: EQUAL
3550: IFFALSE 3562
// weapon := us_heavy_gun else
3552: LD_ADDR_VAR 0 3
3556: PUSH
3557: LD_INT 6
3559: ST_TO_ADDR
3560: GO 3593
// weapon := [ us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3562: LD_ADDR_VAR 0 3
3566: PUSH
3567: LD_INT 5
3569: PUSH
3570: LD_INT 7
3572: PUSH
3573: LD_INT 4
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: LIST
3580: PUSH
3581: LD_INT 1
3583: PPUSH
3584: LD_INT 3
3586: PPUSH
3587: CALL_OW 12
3591: ARRAY
3592: ST_TO_ADDR
// AddComConstruct ( amFac , chassis , engine_combustion , control_remote , weapon ) ;
3593: LD_INT 25
3595: PPUSH
3596: LD_VAR 0 2
3600: PPUSH
3601: LD_INT 1
3603: PPUSH
3604: LD_INT 2
3606: PPUSH
3607: LD_VAR 0 3
3611: PPUSH
3612: CALL_OW 185
// end ;
3616: GO 3508
3618: POP
3619: POP
// end ;
3620: PPOPN 3
3622: END
// every 0 0$10 trigger usForces >= [ 5 , 6 , 7 , 8 ] [ Difficulty ] do var i , tmp ;
3623: LD_EXP 28
3627: PUSH
3628: LD_INT 5
3630: PUSH
3631: LD_INT 6
3633: PUSH
3634: LD_INT 7
3636: PUSH
3637: LD_INT 8
3639: PUSH
3640: EMPTY
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: PUSH
3646: LD_OWVAR 67
3650: ARRAY
3651: GREATEREQUAL
3652: IFFALSE 3757
3654: GO 3656
3656: DISABLE
3657: LD_INT 0
3659: PPUSH
3660: PPUSH
// begin enable ;
3661: ENABLE
// tmp := usForces ;
3662: LD_ADDR_VAR 0 2
3666: PUSH
3667: LD_EXP 28
3671: ST_TO_ADDR
// usForces := [ ] ;
3672: LD_ADDR_EXP 28
3676: PUSH
3677: EMPTY
3678: ST_TO_ADDR
// if not tmp then
3679: LD_VAR 0 2
3683: NOT
3684: IFFALSE 3688
// exit ;
3686: GO 3757
// repeat wait ( 0 0$1 ) ;
3688: LD_INT 35
3690: PPUSH
3691: CALL_OW 67
// AgressiveMove ( tmp , [ [ 98 , 50 ] , [ 114 , 50 ] , [ 127 , 51 ] , [ 131 , 35 ] ] ) ;
3695: LD_VAR 0 2
3699: PPUSH
3700: LD_INT 98
3702: PUSH
3703: LD_INT 50
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: PUSH
3710: LD_INT 114
3712: PUSH
3713: LD_INT 50
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: PUSH
3720: LD_INT 127
3722: PUSH
3723: LD_INT 51
3725: PUSH
3726: EMPTY
3727: LIST
3728: LIST
3729: PUSH
3730: LD_INT 131
3732: PUSH
3733: LD_INT 35
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: PUSH
3740: EMPTY
3741: LIST
3742: LIST
3743: LIST
3744: LIST
3745: PPUSH
3746: CALL 53610 0 2
// until not tmp ;
3750: LD_VAR 0 2
3754: NOT
3755: IFFALSE 3688
// end ;
3757: PPOPN 2
3759: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( southScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3760: LD_EXP 3
3764: PUSH
3765: LD_EXP 5
3769: NOT
3770: AND
3771: PUSH
3772: LD_INT 11
3774: PPUSH
3775: LD_INT 22
3777: PUSH
3778: LD_INT 2
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: PPUSH
3785: CALL_OW 70
3789: AND
3790: IFFALSE 3911
3792: GO 3794
3794: DISABLE
3795: LD_INT 0
3797: PPUSH
3798: PPUSH
3799: PPUSH
// begin uc_side := 1 ;
3800: LD_ADDR_OWVAR 20
3804: PUSH
3805: LD_INT 1
3807: ST_TO_ADDR
// uc_nation := 1 ;
3808: LD_ADDR_OWVAR 21
3812: PUSH
3813: LD_INT 1
3815: ST_TO_ADDR
// tmp := [ ] ;
3816: LD_ADDR_VAR 0 3
3820: PUSH
3821: EMPTY
3822: ST_TO_ADDR
// for i := 1 to 2 do
3823: LD_ADDR_VAR 0 1
3827: PUSH
3828: DOUBLE
3829: LD_INT 1
3831: DEC
3832: ST_TO_ADDR
3833: LD_INT 2
3835: PUSH
3836: FOR_TO
3837: IFFALSE 3909
// begin PrepareSoldier ( false , 7 ) ;
3839: LD_INT 0
3841: PPUSH
3842: LD_INT 7
3844: PPUSH
3845: CALL_OW 381
// un := CreateHuman ;
3849: LD_ADDR_VAR 0 2
3853: PUSH
3854: CALL_OW 44
3858: ST_TO_ADDR
// PlaceUnitXYR ( un , 130 , 153 , 3 , false ) ;
3859: LD_VAR 0 2
3863: PPUSH
3864: LD_INT 130
3866: PPUSH
3867: LD_INT 153
3869: PPUSH
3870: LD_INT 3
3872: PPUSH
3873: LD_INT 0
3875: PPUSH
3876: CALL_OW 50
// SetClass ( un , class_sniper ) ;
3880: LD_VAR 0 2
3884: PPUSH
3885: LD_INT 5
3887: PPUSH
3888: CALL_OW 336
// AddComAgressiveMove ( un , 108 , 108 ) ;
3892: LD_VAR 0 2
3896: PPUSH
3897: LD_INT 108
3899: PPUSH
3900: LD_INT 108
3902: PPUSH
3903: CALL_OW 174
// end ;
3907: GO 3836
3909: POP
3910: POP
// end ;
3911: PPOPN 3
3913: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( northScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3914: LD_EXP 3
3918: PUSH
3919: LD_EXP 5
3923: NOT
3924: AND
3925: PUSH
3926: LD_INT 10
3928: PPUSH
3929: LD_INT 22
3931: PUSH
3932: LD_INT 2
3934: PUSH
3935: EMPTY
3936: LIST
3937: LIST
3938: PPUSH
3939: CALL_OW 70
3943: AND
3944: IFFALSE 4065
3946: GO 3948
3948: DISABLE
3949: LD_INT 0
3951: PPUSH
3952: PPUSH
3953: PPUSH
// begin uc_side := 1 ;
3954: LD_ADDR_OWVAR 20
3958: PUSH
3959: LD_INT 1
3961: ST_TO_ADDR
// uc_nation := 1 ;
3962: LD_ADDR_OWVAR 21
3966: PUSH
3967: LD_INT 1
3969: ST_TO_ADDR
// tmp := [ ] ;
3970: LD_ADDR_VAR 0 3
3974: PUSH
3975: EMPTY
3976: ST_TO_ADDR
// for i := 1 to 2 do
3977: LD_ADDR_VAR 0 1
3981: PUSH
3982: DOUBLE
3983: LD_INT 1
3985: DEC
3986: ST_TO_ADDR
3987: LD_INT 2
3989: PUSH
3990: FOR_TO
3991: IFFALSE 4063
// begin PrepareSoldier ( false , 7 ) ;
3993: LD_INT 0
3995: PPUSH
3996: LD_INT 7
3998: PPUSH
3999: CALL_OW 381
// un := CreateHuman ;
4003: LD_ADDR_VAR 0 2
4007: PUSH
4008: CALL_OW 44
4012: ST_TO_ADDR
// PlaceUnitXYR ( un , 56 , 101 , 3 , false ) ;
4013: LD_VAR 0 2
4017: PPUSH
4018: LD_INT 56
4020: PPUSH
4021: LD_INT 101
4023: PPUSH
4024: LD_INT 3
4026: PPUSH
4027: LD_INT 0
4029: PPUSH
4030: CALL_OW 50
// SetClass ( un , class_sniper ) ;
4034: LD_VAR 0 2
4038: PPUSH
4039: LD_INT 5
4041: PPUSH
4042: CALL_OW 336
// AddComAgressiveMove ( un , 72 , 92 ) ;
4046: LD_VAR 0 2
4050: PPUSH
4051: LD_INT 72
4053: PPUSH
4054: LD_INT 92
4056: PPUSH
4057: CALL_OW 174
// end ;
4061: GO 3990
4063: POP
4064: POP
// end ;
4065: PPOPN 3
4067: END
// every 0 0$2 trigger IsOk ( usCargo ) and not usSurrender do var cr , enemyInArea ;
4068: LD_EXP 29
4072: PPUSH
4073: CALL_OW 302
4077: PUSH
4078: LD_EXP 7
4082: NOT
4083: AND
4084: IFFALSE 4347
4086: GO 4088
4088: DISABLE
4089: LD_INT 0
4091: PPUSH
4092: PPUSH
// begin enable ;
4093: ENABLE
// enemyInArea := FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4094: LD_ADDR_VAR 0 2
4098: PUSH
4099: LD_INT 14
4101: PPUSH
4102: LD_INT 81
4104: PUSH
4105: LD_INT 1
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: PUSH
4112: LD_INT 50
4114: PUSH
4115: EMPTY
4116: LIST
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: PPUSH
4122: CALL_OW 70
4126: ST_TO_ADDR
// cr := GetListOfCratesInArea ( usCratesArea ) ;
4127: LD_ADDR_VAR 0 1
4131: PUSH
4132: LD_INT 12
4134: PPUSH
4135: CALL_OW 435
4139: ST_TO_ADDR
// if GetFuel ( usCargo ) < 10 and not See ( 2 , usCargo ) then
4140: LD_EXP 29
4144: PPUSH
4145: CALL_OW 261
4149: PUSH
4150: LD_INT 10
4152: LESS
4153: PUSH
4154: LD_INT 2
4156: PPUSH
4157: LD_EXP 29
4161: PPUSH
4162: CALL_OW 292
4166: NOT
4167: AND
4168: IFFALSE 4182
// SetFuel ( usCargo , 100 ) ;
4170: LD_EXP 29
4174: PPUSH
4175: LD_INT 100
4177: PPUSH
4178: CALL_OW 240
// if not HasTask ( usCargo ) and GetCargo ( usCargo , mat_cans ) < 100 and not enemyInArea then
4182: LD_EXP 29
4186: PPUSH
4187: CALL_OW 314
4191: NOT
4192: PUSH
4193: LD_EXP 29
4197: PPUSH
4198: LD_INT 1
4200: PPUSH
4201: CALL_OW 289
4205: PUSH
4206: LD_INT 100
4208: LESS
4209: AND
4210: PUSH
4211: LD_VAR 0 2
4215: NOT
4216: AND
4217: IFFALSE 4283
// begin if cr then
4219: LD_VAR 0 1
4223: IFFALSE 4254
// ComCollect ( usCargo , cr [ 1 ] , cr [ 2 ] ) else
4225: LD_EXP 29
4229: PPUSH
4230: LD_VAR 0 1
4234: PUSH
4235: LD_INT 1
4237: ARRAY
4238: PPUSH
4239: LD_VAR 0 1
4243: PUSH
4244: LD_INT 2
4246: ARRAY
4247: PPUSH
4248: CALL_OW 117
4252: GO 4281
// if not IsInArea ( usCargo , usCratesArea ) then
4254: LD_EXP 29
4258: PPUSH
4259: LD_INT 12
4261: PPUSH
4262: CALL_OW 308
4266: NOT
4267: IFFALSE 4281
// ComMoveToArea ( usCargo , usCratesArea ) ;
4269: LD_EXP 29
4273: PPUSH
4274: LD_INT 12
4276: PPUSH
4277: CALL_OW 113
// exit ;
4281: GO 4347
// end ; if enemyInArea and not IsInArea ( usCargo , americanBaseArea ) then
4283: LD_VAR 0 2
4287: PUSH
4288: LD_EXP 29
4292: PPUSH
4293: LD_INT 14
4295: PPUSH
4296: CALL_OW 308
4300: NOT
4301: AND
4302: IFFALSE 4321
// ComMoveXY ( usCargo , 80 , 143 ) else
4304: LD_EXP 29
4308: PPUSH
4309: LD_INT 80
4311: PPUSH
4312: LD_INT 143
4314: PPUSH
4315: CALL_OW 111
4319: GO 4347
// if GetCargo ( usCargo , mat_cans ) then
4321: LD_EXP 29
4325: PPUSH
4326: LD_INT 1
4328: PPUSH
4329: CALL_OW 289
4333: IFFALSE 4347
// ComGive ( usCargo , usDepot ) ;
4335: LD_EXP 29
4339: PPUSH
4340: LD_INT 1
4342: PPUSH
4343: CALL_OW 161
// end ;
4347: PPOPN 2
4349: END
// every 0 0$3 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) do var i , sci ;
4350: LD_EXP 7
4354: NOT
4355: PUSH
4356: LD_INT 22
4358: PUSH
4359: LD_INT 1
4361: PUSH
4362: EMPTY
4363: LIST
4364: LIST
4365: PUSH
4366: LD_INT 21
4368: PUSH
4369: LD_INT 1
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: PUSH
4376: LD_INT 3
4378: PUSH
4379: LD_INT 50
4381: PUSH
4382: EMPTY
4383: LIST
4384: PUSH
4385: EMPTY
4386: LIST
4387: LIST
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: LIST
4393: PPUSH
4394: CALL_OW 69
4398: AND
4399: PUSH
4400: LD_INT 22
4402: PUSH
4403: LD_INT 1
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: PUSH
4410: LD_INT 3
4412: PUSH
4413: LD_INT 60
4415: PUSH
4416: EMPTY
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: LD_INT 25
4425: PUSH
4426: LD_INT 4
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: PUSH
4433: EMPTY
4434: LIST
4435: LIST
4436: LIST
4437: PPUSH
4438: CALL_OW 69
4442: AND
4443: IFFALSE 4646
4445: GO 4447
4447: DISABLE
4448: LD_INT 0
4450: PPUSH
4451: PPUSH
// begin enable ;
4452: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) do
4453: LD_ADDR_VAR 0 1
4457: PUSH
4458: LD_INT 22
4460: PUSH
4461: LD_INT 1
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: PUSH
4468: LD_INT 21
4470: PUSH
4471: LD_INT 1
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: PUSH
4478: LD_INT 3
4480: PUSH
4481: LD_INT 50
4483: PUSH
4484: EMPTY
4485: LIST
4486: PUSH
4487: EMPTY
4488: LIST
4489: LIST
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: LIST
4495: PPUSH
4496: CALL_OW 69
4500: PUSH
4501: FOR_IN
4502: IFFALSE 4644
// begin sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) ;
4504: LD_ADDR_VAR 0 2
4508: PUSH
4509: LD_INT 22
4511: PUSH
4512: LD_INT 1
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PUSH
4519: LD_INT 3
4521: PUSH
4522: LD_INT 60
4524: PUSH
4525: EMPTY
4526: LIST
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PUSH
4532: LD_INT 25
4534: PUSH
4535: LD_INT 4
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: LIST
4546: PPUSH
4547: CALL_OW 69
4551: ST_TO_ADDR
// if not sci then
4552: LD_VAR 0 2
4556: NOT
4557: IFFALSE 4561
// break ;
4559: GO 4644
// sci := sci [ 1 ] ;
4561: LD_ADDR_VAR 0 2
4565: PUSH
4566: LD_VAR 0 2
4570: PUSH
4571: LD_INT 1
4573: ARRAY
4574: ST_TO_ADDR
// if IsInUnit ( sci ) then
4575: LD_VAR 0 2
4579: PPUSH
4580: CALL_OW 310
4584: IFFALSE 4597
// ComExit ( sci ) else
4586: LD_VAR 0 2
4590: PPUSH
4591: CALL 51603 0 1
4595: GO 4642
// begin ComHeal ( sci , i ) ;
4597: LD_VAR 0 2
4601: PPUSH
4602: LD_VAR 0 1
4606: PPUSH
4607: CALL_OW 128
// AddComEnterUnit ( sci , [ amLab1 , amLab2 ] [ rand ( 1 , 2 ) ] ) ;
4611: LD_VAR 0 2
4615: PPUSH
4616: LD_INT 32
4618: PUSH
4619: LD_INT 33
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PUSH
4626: LD_INT 1
4628: PPUSH
4629: LD_INT 2
4631: PPUSH
4632: CALL_OW 12
4636: ARRAY
4637: PPUSH
4638: CALL_OW 180
// end ; end ;
4642: GO 4501
4644: POP
4645: POP
// end ;
4646: PPOPN 2
4648: END
// every 0 0$2 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) do var i , tmp , tmp2 ;
4649: LD_EXP 7
4653: NOT
4654: PUSH
4655: LD_INT 22
4657: PUSH
4658: LD_INT 1
4660: PUSH
4661: EMPTY
4662: LIST
4663: LIST
4664: PUSH
4665: LD_INT 3
4667: PUSH
4668: LD_INT 60
4670: PUSH
4671: EMPTY
4672: LIST
4673: PUSH
4674: EMPTY
4675: LIST
4676: LIST
4677: PUSH
4678: LD_INT 50
4680: PUSH
4681: EMPTY
4682: LIST
4683: PUSH
4684: LD_INT 34
4686: PUSH
4687: LD_INT 13
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: PPUSH
4700: CALL_OW 69
4704: AND
4705: PUSH
4706: LD_INT 22
4708: PUSH
4709: LD_INT 1
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: PUSH
4716: LD_INT 3
4718: PUSH
4719: LD_INT 24
4721: PUSH
4722: LD_INT 1000
4724: PUSH
4725: EMPTY
4726: LIST
4727: LIST
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: PUSH
4733: LD_INT 21
4735: PUSH
4736: LD_INT 3
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: PUSH
4743: LD_INT 3
4745: PUSH
4746: LD_INT 30
4748: PUSH
4749: LD_INT 29
4751: PUSH
4752: EMPTY
4753: LIST
4754: LIST
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: PPUSH
4766: CALL_OW 69
4770: AND
4771: IFFALSE 5040
4773: GO 4775
4775: DISABLE
4776: LD_INT 0
4778: PPUSH
4779: PPUSH
4780: PPUSH
// begin enable ;
4781: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4782: LD_ADDR_VAR 0 2
4786: PUSH
4787: LD_INT 22
4789: PUSH
4790: LD_INT 1
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: PUSH
4797: LD_INT 3
4799: PUSH
4800: LD_INT 24
4802: PUSH
4803: LD_INT 1000
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PUSH
4810: EMPTY
4811: LIST
4812: LIST
4813: PUSH
4814: LD_INT 21
4816: PUSH
4817: LD_INT 3
4819: PUSH
4820: EMPTY
4821: LIST
4822: LIST
4823: PUSH
4824: LD_INT 3
4826: PUSH
4827: LD_INT 30
4829: PUSH
4830: LD_INT 29
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: PUSH
4841: EMPTY
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: PPUSH
4847: CALL_OW 69
4851: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4852: LD_ADDR_VAR 0 3
4856: PUSH
4857: LD_INT 22
4859: PUSH
4860: LD_INT 1
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: PUSH
4867: LD_INT 3
4869: PUSH
4870: LD_INT 24
4872: PUSH
4873: LD_INT 600
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: LD_INT 21
4886: PUSH
4887: LD_INT 3
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: PUSH
4894: LD_INT 3
4896: PUSH
4897: LD_INT 30
4899: PUSH
4900: LD_INT 29
4902: PUSH
4903: EMPTY
4904: LIST
4905: LIST
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: PPUSH
4917: CALL_OW 69
4921: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4922: LD_ADDR_VAR 0 1
4926: PUSH
4927: LD_INT 22
4929: PUSH
4930: LD_INT 1
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: PUSH
4937: LD_INT 3
4939: PUSH
4940: LD_INT 60
4942: PUSH
4943: EMPTY
4944: LIST
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: PUSH
4950: LD_INT 50
4952: PUSH
4953: EMPTY
4954: LIST
4955: PUSH
4956: LD_INT 34
4958: PUSH
4959: LD_INT 13
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: PPUSH
4972: CALL_OW 69
4976: PUSH
4977: FOR_IN
4978: IFFALSE 5038
// begin if tmp2 then
4980: LD_VAR 0 3
4984: IFFALSE 5012
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
4986: LD_VAR 0 1
4990: PPUSH
4991: LD_VAR 0 3
4995: PPUSH
4996: LD_VAR 0 1
5000: PPUSH
5001: CALL_OW 74
5005: PPUSH
5006: CALL_OW 130
5010: GO 5036
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
5012: LD_VAR 0 1
5016: PPUSH
5017: LD_VAR 0 2
5021: PPUSH
5022: LD_VAR 0 1
5026: PPUSH
5027: CALL_OW 74
5031: PPUSH
5032: CALL_OW 130
// end ;
5036: GO 4977
5038: POP
5039: POP
// end ;
5040: PPOPN 3
5042: END
// every 0 0$1 trigger not usSurrender and not FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) and usToBuild and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
5043: LD_EXP 7
5047: NOT
5048: PUSH
5049: LD_INT 14
5051: PPUSH
5052: LD_INT 81
5054: PUSH
5055: LD_INT 1
5057: PUSH
5058: EMPTY
5059: LIST
5060: LIST
5061: PUSH
5062: LD_INT 50
5064: PUSH
5065: EMPTY
5066: LIST
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: PPUSH
5072: CALL_OW 70
5076: NOT
5077: AND
5078: PUSH
5079: LD_EXP 30
5083: AND
5084: PUSH
5085: LD_INT 22
5087: PUSH
5088: LD_INT 1
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: PUSH
5095: LD_INT 3
5097: PUSH
5098: LD_INT 60
5100: PUSH
5101: EMPTY
5102: LIST
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: PUSH
5108: LD_INT 50
5110: PUSH
5111: EMPTY
5112: LIST
5113: PUSH
5114: LD_INT 34
5116: PUSH
5117: LD_INT 13
5119: PUSH
5120: EMPTY
5121: LIST
5122: LIST
5123: PUSH
5124: EMPTY
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: PPUSH
5130: CALL_OW 69
5134: AND
5135: IFFALSE 5247
5137: GO 5139
5139: DISABLE
// begin enable ;
5140: ENABLE
// ComCraneBuild ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) , usToBuild [ 1 ] [ 1 ] , usToBuild [ 1 ] [ 2 ] , usToBuild [ 1 ] [ 3 ] , usToBuild [ 1 ] [ 4 ] ) ;
5141: LD_INT 22
5143: PUSH
5144: LD_INT 1
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PUSH
5151: LD_INT 3
5153: PUSH
5154: LD_INT 60
5156: PUSH
5157: EMPTY
5158: LIST
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: PUSH
5164: LD_INT 50
5166: PUSH
5167: EMPTY
5168: LIST
5169: PUSH
5170: LD_INT 34
5172: PUSH
5173: LD_INT 13
5175: PUSH
5176: EMPTY
5177: LIST
5178: LIST
5179: PUSH
5180: EMPTY
5181: LIST
5182: LIST
5183: LIST
5184: LIST
5185: PPUSH
5186: CALL_OW 69
5190: PPUSH
5191: LD_EXP 30
5195: PUSH
5196: LD_INT 1
5198: ARRAY
5199: PUSH
5200: LD_INT 1
5202: ARRAY
5203: PPUSH
5204: LD_EXP 30
5208: PUSH
5209: LD_INT 1
5211: ARRAY
5212: PUSH
5213: LD_INT 2
5215: ARRAY
5216: PPUSH
5217: LD_EXP 30
5221: PUSH
5222: LD_INT 1
5224: ARRAY
5225: PUSH
5226: LD_INT 3
5228: ARRAY
5229: PPUSH
5230: LD_EXP 30
5234: PUSH
5235: LD_INT 1
5237: ARRAY
5238: PUSH
5239: LD_INT 4
5241: ARRAY
5242: PPUSH
5243: CALL_OW 566
// end ;
5247: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) do var i , tmp , btmp , barracks ;
5248: LD_INT 22
5250: PUSH
5251: LD_INT 1
5253: PUSH
5254: EMPTY
5255: LIST
5256: LIST
5257: PUSH
5258: LD_INT 50
5260: PUSH
5261: EMPTY
5262: LIST
5263: PUSH
5264: LD_INT 3
5266: PUSH
5267: LD_INT 54
5269: PUSH
5270: EMPTY
5271: LIST
5272: PUSH
5273: EMPTY
5274: LIST
5275: LIST
5276: PUSH
5277: LD_INT 2
5279: PUSH
5280: LD_INT 25
5282: PUSH
5283: LD_INT 1
5285: PUSH
5286: EMPTY
5287: LIST
5288: LIST
5289: PUSH
5290: LD_INT 25
5292: PUSH
5293: LD_INT 5
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: PUSH
5300: LD_INT 25
5302: PUSH
5303: LD_INT 16
5305: PUSH
5306: EMPTY
5307: LIST
5308: LIST
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: PUSH
5316: EMPTY
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: PPUSH
5322: CALL_OW 69
5326: IFFALSE 5688
5328: GO 5330
5330: DISABLE
5331: LD_INT 0
5333: PPUSH
5334: PPUSH
5335: PPUSH
5336: PPUSH
// begin enable ;
5337: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) ;
5338: LD_ADDR_VAR 0 2
5342: PUSH
5343: LD_INT 22
5345: PUSH
5346: LD_INT 1
5348: PUSH
5349: EMPTY
5350: LIST
5351: LIST
5352: PUSH
5353: LD_INT 50
5355: PUSH
5356: EMPTY
5357: LIST
5358: PUSH
5359: LD_INT 3
5361: PUSH
5362: LD_INT 54
5364: PUSH
5365: EMPTY
5366: LIST
5367: PUSH
5368: EMPTY
5369: LIST
5370: LIST
5371: PUSH
5372: LD_INT 2
5374: PUSH
5375: LD_INT 25
5377: PUSH
5378: LD_INT 1
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: PUSH
5385: LD_INT 25
5387: PUSH
5388: LD_INT 5
5390: PUSH
5391: EMPTY
5392: LIST
5393: LIST
5394: PUSH
5395: LD_INT 25
5397: PUSH
5398: LD_INT 16
5400: PUSH
5401: EMPTY
5402: LIST
5403: LIST
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: LIST
5409: LIST
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: PPUSH
5417: CALL_OW 69
5421: ST_TO_ADDR
// btmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
5422: LD_ADDR_VAR 0 3
5426: PUSH
5427: LD_INT 22
5429: PUSH
5430: LD_INT 1
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: PUSH
5437: LD_INT 50
5439: PUSH
5440: EMPTY
5441: LIST
5442: PUSH
5443: LD_INT 21
5445: PUSH
5446: LD_INT 3
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PUSH
5453: LD_INT 30
5455: PUSH
5456: LD_INT 32
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: PUSH
5463: LD_INT 58
5465: PUSH
5466: EMPTY
5467: LIST
5468: PUSH
5469: EMPTY
5470: LIST
5471: LIST
5472: LIST
5473: LIST
5474: LIST
5475: PPUSH
5476: CALL_OW 69
5480: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) ;
5481: LD_ADDR_VAR 0 4
5485: PUSH
5486: LD_INT 22
5488: PUSH
5489: LD_INT 1
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: PUSH
5496: LD_INT 50
5498: PUSH
5499: EMPTY
5500: LIST
5501: PUSH
5502: LD_INT 30
5504: PUSH
5505: LD_INT 5
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: LIST
5516: PPUSH
5517: CALL_OW 69
5521: ST_TO_ADDR
// if not tmp then
5522: LD_VAR 0 2
5526: NOT
5527: IFFALSE 5531
// exit ;
5529: GO 5688
// for i in tmp do
5531: LD_ADDR_VAR 0 1
5535: PUSH
5536: LD_VAR 0 2
5540: PUSH
5541: FOR_IN
5542: IFFALSE 5686
// begin btmp := FilterByTag ( btmp , 0 ) ;
5544: LD_ADDR_VAR 0 3
5548: PUSH
5549: LD_VAR 0 3
5553: PPUSH
5554: LD_INT 0
5556: PPUSH
5557: CALL 48733 0 2
5561: ST_TO_ADDR
// if not btmp then
5562: LD_VAR 0 3
5566: NOT
5567: IFFALSE 5612
// begin if GetClass ( i ) <> class_apeman_engineer and barracks then
5569: LD_VAR 0 1
5573: PPUSH
5574: CALL_OW 257
5578: PUSH
5579: LD_INT 16
5581: NONEQUAL
5582: PUSH
5583: LD_VAR 0 4
5587: AND
5588: IFFALSE 5608
// ComEnterUnit ( i , barracks [ 1 ] ) ;
5590: LD_VAR 0 1
5594: PPUSH
5595: LD_VAR 0 4
5599: PUSH
5600: LD_INT 1
5602: ARRAY
5603: PPUSH
5604: CALL_OW 120
// continue ;
5608: GO 5541
// end else
5610: GO 5684
// begin SetTag ( btmp [ 1 ] , 1 ) ;
5612: LD_VAR 0 3
5616: PUSH
5617: LD_INT 1
5619: ARRAY
5620: PPUSH
5621: LD_INT 1
5623: PPUSH
5624: CALL_OW 109
// ComEnterUnit ( i , btmp [ 1 ] ) ;
5628: LD_VAR 0 1
5632: PPUSH
5633: LD_VAR 0 3
5637: PUSH
5638: LD_INT 1
5640: ARRAY
5641: PPUSH
5642: CALL_OW 120
// wait ( 0 0$9 ) ;
5646: LD_INT 315
5648: PPUSH
5649: CALL_OW 67
// if IsEmpty ( btmp [ 1 ] ) then
5653: LD_VAR 0 3
5657: PUSH
5658: LD_INT 1
5660: ARRAY
5661: PPUSH
5662: CALL 16634 0 1
5666: IFFALSE 5684
// SetTag ( btmp [ 1 ] , 0 ) ;
5668: LD_VAR 0 3
5672: PUSH
5673: LD_INT 1
5675: ARRAY
5676: PPUSH
5677: LD_INT 0
5679: PPUSH
5680: CALL_OW 109
// end ; end ;
5684: GO 5541
5686: POP
5687: POP
// end ;
5688: PPOPN 4
5690: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do var i , tmp ;
5691: LD_INT 22
5693: PUSH
5694: LD_INT 1
5696: PUSH
5697: EMPTY
5698: LIST
5699: LIST
5700: PUSH
5701: LD_INT 33
5703: PUSH
5704: LD_INT 2
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: PUSH
5711: LD_INT 50
5713: PUSH
5714: EMPTY
5715: LIST
5716: PUSH
5717: LD_INT 3
5719: PUSH
5720: LD_INT 61
5722: PUSH
5723: EMPTY
5724: LIST
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: PUSH
5730: EMPTY
5731: LIST
5732: LIST
5733: LIST
5734: LIST
5735: PPUSH
5736: CALL_OW 69
5740: IFFALSE 5831
5742: GO 5744
5744: DISABLE
5745: LD_INT 0
5747: PPUSH
5748: PPUSH
// begin enable ;
5749: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
5750: LD_ADDR_VAR 0 2
5754: PUSH
5755: LD_INT 22
5757: PUSH
5758: LD_INT 1
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: PUSH
5765: LD_INT 33
5767: PUSH
5768: LD_INT 2
5770: PUSH
5771: EMPTY
5772: LIST
5773: LIST
5774: PUSH
5775: LD_INT 50
5777: PUSH
5778: EMPTY
5779: LIST
5780: PUSH
5781: LD_INT 3
5783: PUSH
5784: LD_INT 61
5786: PUSH
5787: EMPTY
5788: LIST
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: LIST
5798: LIST
5799: PPUSH
5800: CALL_OW 69
5804: ST_TO_ADDR
// for i in tmp do
5805: LD_ADDR_VAR 0 1
5809: PUSH
5810: LD_VAR 0 2
5814: PUSH
5815: FOR_IN
5816: IFFALSE 5829
// Connect ( i ) ;
5818: LD_VAR 0 1
5822: PPUSH
5823: CALL 22435 0 1
5827: GO 5815
5829: POP
5830: POP
// end ; end_of_file
5831: PPOPN 2
5833: END
// on UnitDestroyed ( un ) do begin if un = Heike then
5834: LD_VAR 0 1
5838: PUSH
5839: LD_EXP 12
5843: EQUAL
5844: IFFALSE 5853
// YouLost ( Heike ) ;
5846: LD_STRING Heike
5848: PPUSH
5849: CALL_OW 104
// if un = usCommander then
5853: LD_VAR 0 1
5857: PUSH
5858: LD_EXP 27
5862: EQUAL
5863: IFFALSE 5872
// YouLost ( Commander ) ;
5865: LD_STRING Commander
5867: PPUSH
5868: CALL_OW 104
// if GetSide ( un ) = 1 then
5872: LD_VAR 0 1
5876: PPUSH
5877: CALL_OW 255
5881: PUSH
5882: LD_INT 1
5884: EQUAL
5885: IFFALSE 6136
// begin if GetWeapon ( un ) = us_crane and IsOk ( amFac ) then
5887: LD_VAR 0 1
5891: PPUSH
5892: CALL_OW 264
5896: PUSH
5897: LD_INT 13
5899: EQUAL
5900: PUSH
5901: LD_INT 25
5903: PPUSH
5904: CALL_OW 302
5908: AND
5909: IFFALSE 5930
// AddComConstruct ( amFac , us_medium_wheeled , engine_solar , control_remote , us_crane ) ;
5911: LD_INT 25
5913: PPUSH
5914: LD_INT 2
5916: PPUSH
5917: LD_INT 2
5919: PPUSH
5920: LD_INT 2
5922: PPUSH
5923: LD_INT 13
5925: PPUSH
5926: CALL_OW 185
// if GetWeapon ( un ) = us_cargo_bay and IsOk ( amFac ) then
5930: LD_VAR 0 1
5934: PPUSH
5935: CALL_OW 264
5939: PUSH
5940: LD_INT 12
5942: EQUAL
5943: PUSH
5944: LD_INT 25
5946: PPUSH
5947: CALL_OW 302
5951: AND
5952: IFFALSE 5973
// AddComConstruct ( amFac , us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ) ;
5954: LD_INT 25
5956: PPUSH
5957: LD_INT 2
5959: PPUSH
5960: LD_INT 1
5962: PPUSH
5963: LD_INT 2
5965: PPUSH
5966: LD_INT 12
5968: PPUSH
5969: CALL_OW 185
// if GetBType ( un ) = b_bunker then
5973: LD_VAR 0 1
5977: PPUSH
5978: CALL_OW 266
5982: PUSH
5983: LD_INT 32
5985: EQUAL
5986: IFFALSE 6051
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_bunker , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
5988: LD_ADDR_EXP 30
5992: PUSH
5993: LD_EXP 30
5997: PPUSH
5998: LD_EXP 30
6002: PUSH
6003: LD_INT 1
6005: PLUS
6006: PPUSH
6007: LD_INT 32
6009: PUSH
6010: LD_VAR 0 1
6014: PPUSH
6015: CALL_OW 250
6019: PUSH
6020: LD_VAR 0 1
6024: PPUSH
6025: CALL_OW 251
6029: PUSH
6030: LD_VAR 0 1
6034: PPUSH
6035: CALL_OW 254
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: LIST
6044: LIST
6045: PPUSH
6046: CALL_OW 1
6050: ST_TO_ADDR
// if GetBType ( un ) in [ b_barracks , b_armoury ] then
6051: LD_VAR 0 1
6055: PPUSH
6056: CALL_OW 266
6060: PUSH
6061: LD_INT 5
6063: PUSH
6064: LD_INT 4
6066: PUSH
6067: EMPTY
6068: LIST
6069: LIST
6070: IN
6071: IFFALSE 6136
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_armoury , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6073: LD_ADDR_EXP 30
6077: PUSH
6078: LD_EXP 30
6082: PPUSH
6083: LD_EXP 30
6087: PUSH
6088: LD_INT 1
6090: PLUS
6091: PPUSH
6092: LD_INT 4
6094: PUSH
6095: LD_VAR 0 1
6099: PPUSH
6100: CALL_OW 250
6104: PUSH
6105: LD_VAR 0 1
6109: PPUSH
6110: CALL_OW 251
6114: PUSH
6115: LD_VAR 0 1
6119: PPUSH
6120: CALL_OW 254
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: PPUSH
6131: CALL_OW 1
6135: ST_TO_ADDR
// end ; end ;
6136: PPOPN 1
6138: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 1 and GetTag ( un ) = 1 then
6139: LD_VAR 0 1
6143: PPUSH
6144: CALL_OW 255
6148: PUSH
6149: LD_INT 1
6151: EQUAL
6152: PUSH
6153: LD_VAR 0 1
6157: PPUSH
6158: CALL_OW 110
6162: PUSH
6163: LD_INT 1
6165: EQUAL
6166: AND
6167: IFFALSE 6181
// SetTag ( un , 0 ) ;
6169: LD_VAR 0 1
6173: PPUSH
6174: LD_INT 0
6176: PPUSH
6177: CALL_OW 109
// if GetSide ( un ) = 1 and GetWeapon ( un ) = us_heavy_gun and not seeHeavyGun then
6181: LD_VAR 0 1
6185: PPUSH
6186: CALL_OW 255
6190: PUSH
6191: LD_INT 1
6193: EQUAL
6194: PUSH
6195: LD_VAR 0 1
6199: PPUSH
6200: CALL_OW 264
6204: PUSH
6205: LD_INT 6
6207: EQUAL
6208: AND
6209: PUSH
6210: LD_EXP 11
6214: NOT
6215: AND
6216: IFFALSE 6226
// seeHeavyGun := true ;
6218: LD_ADDR_EXP 11
6222: PUSH
6223: LD_INT 1
6225: ST_TO_ADDR
// if GetControl ( un ) = control_remote and GetSide ( un ) <> 2 then
6226: LD_VAR 0 1
6230: PPUSH
6231: CALL_OW 263
6235: PUSH
6236: LD_INT 2
6238: EQUAL
6239: PUSH
6240: LD_VAR 0 1
6244: PPUSH
6245: CALL_OW 255
6249: PUSH
6250: LD_INT 2
6252: NONEQUAL
6253: AND
6254: IFFALSE 6280
// begin ComUnlink ( un ) ;
6256: LD_VAR 0 1
6260: PPUSH
6261: CALL_OW 136
// if not seeRemoteVehicle then
6265: LD_EXP 10
6269: NOT
6270: IFFALSE 6280
// seeRemoteVehicle := true ;
6272: LD_ADDR_EXP 10
6276: PUSH
6277: LD_INT 1
6279: ST_TO_ADDR
// end ; end ;
6280: PPOPN 1
6282: END
// on BuildingComplete ( b ) do var i , barracks ;
6283: LD_INT 0
6285: PPUSH
6286: PPUSH
// begin if GetSide ( b ) = 1 then
6287: LD_VAR 0 1
6291: PPUSH
6292: CALL_OW 255
6296: PUSH
6297: LD_INT 1
6299: EQUAL
6300: IFFALSE 6452
// begin usToBuild := Delete ( usToBuild , 1 ) ;
6302: LD_ADDR_EXP 30
6306: PUSH
6307: LD_EXP 30
6311: PPUSH
6312: LD_INT 1
6314: PPUSH
6315: CALL_OW 3
6319: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
6320: LD_VAR 0 1
6324: PPUSH
6325: CALL_OW 266
6329: PUSH
6330: LD_INT 4
6332: EQUAL
6333: IFFALSE 6344
// ComUpgrade ( b ) ;
6335: LD_VAR 0 1
6339: PPUSH
6340: CALL_OW 146
// if GetBType ( b ) = b_bunker then
6344: LD_VAR 0 1
6348: PPUSH
6349: CALL_OW 266
6353: PUSH
6354: LD_INT 32
6356: EQUAL
6357: IFFALSE 6452
// begin AddComPlaceWeapon ( b , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
6359: LD_VAR 0 1
6363: PPUSH
6364: LD_INT 6
6366: PUSH
6367: LD_INT 7
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: PUSH
6374: LD_INT 1
6376: PPUSH
6377: LD_INT 2
6379: PPUSH
6380: CALL_OW 12
6384: ARRAY
6385: PPUSH
6386: CALL_OW 208
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
6390: LD_ADDR_VAR 0 3
6394: PUSH
6395: LD_INT 22
6397: PUSH
6398: LD_INT 1
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: PUSH
6405: LD_INT 30
6407: PUSH
6408: LD_INT 5
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: PPUSH
6419: CALL_OW 69
6423: ST_TO_ADDR
// if barracks then
6424: LD_VAR 0 3
6428: IFFALSE 6452
// ComExitBuilding ( UnitsInside ( barracks [ 1 ] ) [ 1 ] ) ;
6430: LD_VAR 0 3
6434: PUSH
6435: LD_INT 1
6437: ARRAY
6438: PPUSH
6439: CALL_OW 313
6443: PUSH
6444: LD_INT 1
6446: ARRAY
6447: PPUSH
6448: CALL_OW 122
// end ; end ; end ;
6452: PPOPN 3
6454: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( factory ) = 1 then
6455: LD_VAR 0 2
6459: PPUSH
6460: CALL_OW 255
6464: PUSH
6465: LD_INT 1
6467: EQUAL
6468: IFFALSE 6547
// begin if GetWeapon ( vehicle ) = us_cargo_bay then
6470: LD_VAR 0 1
6474: PPUSH
6475: CALL_OW 264
6479: PUSH
6480: LD_INT 12
6482: EQUAL
6483: IFFALSE 6495
// usCargo := vehicle ;
6485: LD_ADDR_EXP 29
6489: PUSH
6490: LD_VAR 0 1
6494: ST_TO_ADDR
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , us_crane ] then
6495: LD_VAR 0 1
6499: PPUSH
6500: CALL_OW 264
6504: PUSH
6505: LD_INT 12
6507: PUSH
6508: LD_INT 13
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: IN
6515: NOT
6516: IFFALSE 6547
// usForces := Replace ( usForces , usForces + 1 , vehicle ) ;
6518: LD_ADDR_EXP 28
6522: PUSH
6523: LD_EXP 28
6527: PPUSH
6528: LD_EXP 28
6532: PUSH
6533: LD_INT 1
6535: PLUS
6536: PPUSH
6537: LD_VAR 0 1
6541: PPUSH
6542: CALL_OW 1
6546: ST_TO_ADDR
// end ; end ;
6547: PPOPN 2
6549: END
// on EvacuateVehicle ( un , veh , p1 , p2 ) do begin if GetSide ( veh ) = 1 and GetWeapon ( veh ) = us_crane then
6550: LD_VAR 0 2
6554: PPUSH
6555: CALL_OW 255
6559: PUSH
6560: LD_INT 1
6562: EQUAL
6563: PUSH
6564: LD_VAR 0 2
6568: PPUSH
6569: CALL_OW 264
6573: PUSH
6574: LD_INT 13
6576: EQUAL
6577: AND
6578: IFFALSE 6592
// AddComEnterUnit ( un , amFac ) ;
6580: LD_VAR 0 1
6584: PPUSH
6585: LD_INT 25
6587: PPUSH
6588: CALL_OW 180
// end ;
6592: PPOPN 4
6594: END
// on EvacuateBuilding ( b , un ) do begin if GetSide ( b ) = 1 and GetBType ( b ) = b_bunker and GetClass ( un ) in [ class_soldier , class_sniper ] and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] , [ f_ok ] ] ) then
6595: LD_VAR 0 1
6599: PPUSH
6600: CALL_OW 255
6604: PUSH
6605: LD_INT 1
6607: EQUAL
6608: PUSH
6609: LD_VAR 0 1
6613: PPUSH
6614: CALL_OW 266
6618: PUSH
6619: LD_INT 32
6621: EQUAL
6622: AND
6623: PUSH
6624: LD_VAR 0 2
6628: PPUSH
6629: CALL_OW 257
6633: PUSH
6634: LD_INT 1
6636: PUSH
6637: LD_INT 5
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: IN
6644: AND
6645: PUSH
6646: LD_INT 22
6648: PUSH
6649: LD_INT 1
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: PUSH
6656: LD_INT 30
6658: PUSH
6659: LD_INT 5
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: PUSH
6666: LD_INT 50
6668: PUSH
6669: EMPTY
6670: LIST
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: LIST
6676: PPUSH
6677: CALL_OW 69
6681: AND
6682: IFFALSE 6752
// if UnitsInside ( HexInfo ( 74 , 120 ) ) < 6 then
6684: LD_INT 74
6686: PPUSH
6687: LD_INT 120
6689: PPUSH
6690: CALL_OW 428
6694: PPUSH
6695: CALL_OW 313
6699: PUSH
6700: LD_INT 6
6702: LESS
6703: IFFALSE 6752
// begin ComEnterUnit ( un , HexInfo ( 74 , 120 ) ) ;
6705: LD_VAR 0 2
6709: PPUSH
6710: LD_INT 74
6712: PPUSH
6713: LD_INT 120
6715: PPUSH
6716: CALL_OW 428
6720: PPUSH
6721: CALL_OW 120
// if GetClass ( un ) = class_soldier then
6725: LD_VAR 0 2
6729: PPUSH
6730: CALL_OW 257
6734: PUSH
6735: LD_INT 1
6737: EQUAL
6738: IFFALSE 6752
// AddComChangeProfession ( un , class_sniper ) ;
6740: LD_VAR 0 2
6744: PPUSH
6745: LD_INT 5
6747: PPUSH
6748: CALL_OW 183
// end ; end ; end_of_file
6752: PPOPN 2
6754: END
// export function Action ; var i , j , veh , tmp , hasEng , hasCamera , driver ; begin
6755: LD_INT 0
6757: PPUSH
6758: PPUSH
6759: PPUSH
6760: PPUSH
6761: PPUSH
6762: PPUSH
6763: PPUSH
6764: PPUSH
// Video ( true ) ;
6765: LD_INT 1
6767: PPUSH
6768: CALL 51187 0 1
// music_nat := 1 ;
6772: LD_ADDR_OWVAR 71
6776: PUSH
6777: LD_INT 1
6779: ST_TO_ADDR
// music_class := music_recon ;
6780: LD_ADDR_OWVAR 72
6784: PUSH
6785: LD_INT 3
6787: ST_TO_ADDR
// PlaceSeeing ( 184 , 142 , 2 , - 10 ) ;
6788: LD_INT 184
6790: PPUSH
6791: LD_INT 142
6793: PPUSH
6794: LD_INT 2
6796: PPUSH
6797: LD_INT 10
6799: NEG
6800: PPUSH
6801: CALL_OW 330
// RemoveSeeing ( 184 , 142 , 2 ) ;
6805: LD_INT 184
6807: PPUSH
6808: LD_INT 142
6810: PPUSH
6811: LD_INT 2
6813: PPUSH
6814: CALL_OW 331
// PlaceSeeing ( 204 , 151 , 2 , - 10 ) ;
6818: LD_INT 204
6820: PPUSH
6821: LD_INT 151
6823: PPUSH
6824: LD_INT 2
6826: PPUSH
6827: LD_INT 10
6829: NEG
6830: PPUSH
6831: CALL_OW 330
// RemoveSeeing ( 204 , 151 , 2 ) ;
6835: LD_INT 204
6837: PPUSH
6838: LD_INT 151
6840: PPUSH
6841: LD_INT 2
6843: PPUSH
6844: CALL_OW 331
// CenterNowOnXY ( 184 , 142 ) ;
6848: LD_INT 184
6850: PPUSH
6851: LD_INT 142
6853: PPUSH
6854: CALL_OW 86
// wait ( 0 0$2 ) ;
6858: LD_INT 70
6860: PPUSH
6861: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
6865: LD_ADDR_VAR 0 5
6869: PUSH
6870: LD_EXP 12
6874: PUSH
6875: LD_EXP 13
6879: PUSH
6880: LD_EXP 14
6884: PUSH
6885: LD_EXP 15
6889: PUSH
6890: LD_EXP 16
6894: PUSH
6895: LD_EXP 17
6899: PUSH
6900: LD_EXP 18
6904: PUSH
6905: LD_EXP 19
6909: PUSH
6910: LD_EXP 21
6914: PUSH
6915: LD_EXP 22
6919: PUSH
6920: LD_EXP 23
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: PUSH
6938: LD_EXP 24
6942: UNION
6943: ST_TO_ADDR
// hasEng := UnitFilter ( tmp , [ f_class , 2 ] ) > 0 ;
6944: LD_ADDR_VAR 0 6
6948: PUSH
6949: LD_VAR 0 5
6953: PPUSH
6954: LD_INT 25
6956: PUSH
6957: LD_INT 2
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: PPUSH
6964: CALL_OW 72
6968: PUSH
6969: LD_INT 0
6971: GREATER
6972: ST_TO_ADDR
// hasCamera := false ;
6973: LD_ADDR_VAR 0 7
6977: PUSH
6978: LD_INT 0
6980: ST_TO_ADDR
// if not hasEng then
6981: LD_VAR 0 6
6985: NOT
6986: IFFALSE 7014
// SetClass ( tmp [ rand ( 1 , tmp ) ] , class_engineer ) ;
6988: LD_VAR 0 5
6992: PUSH
6993: LD_INT 1
6995: PPUSH
6996: LD_VAR 0 5
7000: PPUSH
7001: CALL_OW 12
7005: ARRAY
7006: PPUSH
7007: LD_INT 2
7009: PPUSH
7010: CALL_OW 336
// if heikeVehicles then
7014: LD_EXP 26
7018: IFFALSE 7632
// begin tmp := SortByClass ( tmp , class_mechanic ) ;
7020: LD_ADDR_VAR 0 5
7024: PUSH
7025: LD_VAR 0 5
7029: PPUSH
7030: LD_INT 3
7032: PPUSH
7033: CALL 53232 0 2
7037: ST_TO_ADDR
// for i in heikeVehicles do
7038: LD_ADDR_VAR 0 2
7042: PUSH
7043: LD_EXP 26
7047: PUSH
7048: FOR_IN
7049: IFFALSE 7630
// begin if not tmp then
7051: LD_VAR 0 5
7055: NOT
7056: IFFALSE 7060
// break ;
7058: GO 7630
// uc_side := 2 ;
7060: LD_ADDR_OWVAR 20
7064: PUSH
7065: LD_INT 2
7067: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
7068: LD_ADDR_OWVAR 21
7072: PUSH
7073: LD_VAR 0 2
7077: PUSH
7078: LD_INT 5
7080: ARRAY
7081: ST_TO_ADDR
// vc_chassis := i [ 1 ] ;
7082: LD_ADDR_OWVAR 37
7086: PUSH
7087: LD_VAR 0 2
7091: PUSH
7092: LD_INT 1
7094: ARRAY
7095: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
7096: LD_ADDR_OWVAR 39
7100: PUSH
7101: LD_VAR 0 2
7105: PUSH
7106: LD_INT 2
7108: ARRAY
7109: ST_TO_ADDR
// vc_control := i [ 3 ] ;
7110: LD_ADDR_OWVAR 38
7114: PUSH
7115: LD_VAR 0 2
7119: PUSH
7120: LD_INT 3
7122: ARRAY
7123: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
7124: LD_ADDR_OWVAR 40
7128: PUSH
7129: LD_VAR 0 2
7133: PUSH
7134: LD_INT 4
7136: ARRAY
7137: ST_TO_ADDR
// veh := CreateVehicle ;
7138: LD_ADDR_VAR 0 4
7142: PUSH
7143: CALL_OW 45
7147: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7148: LD_VAR 0 4
7152: PPUSH
7153: LD_INT 4
7155: PPUSH
7156: CALL_OW 233
// if i [ 3 ] = control_manual then
7160: LD_VAR 0 2
7164: PUSH
7165: LD_INT 3
7167: ARRAY
7168: PUSH
7169: LD_INT 1
7171: EQUAL
7172: IFFALSE 7257
// begin PlaceUnitArea ( veh , startArea , false ) ;
7174: LD_VAR 0 4
7178: PPUSH
7179: LD_INT 1
7181: PPUSH
7182: LD_INT 0
7184: PPUSH
7185: CALL_OW 49
// if i [ 4 ] = ar_control_tower then
7189: LD_VAR 0 2
7193: PUSH
7194: LD_INT 4
7196: ARRAY
7197: PUSH
7198: LD_INT 31
7200: EQUAL
7201: IFFALSE 7219
// SetClass ( tmp [ 1 ] , class_mechanic ) ;
7203: LD_VAR 0 5
7207: PUSH
7208: LD_INT 1
7210: ARRAY
7211: PPUSH
7212: LD_INT 3
7214: PPUSH
7215: CALL_OW 336
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
7219: LD_VAR 0 5
7223: PUSH
7224: LD_INT 1
7226: ARRAY
7227: PPUSH
7228: LD_VAR 0 4
7232: PPUSH
7233: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
7237: LD_ADDR_VAR 0 5
7241: PUSH
7242: LD_VAR 0 5
7246: PPUSH
7247: LD_INT 1
7249: PPUSH
7250: CALL_OW 3
7254: ST_TO_ADDR
// end else
7255: GO 7318
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
7257: LD_INT 22
7259: PUSH
7260: LD_INT 2
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: LD_INT 34
7269: PUSH
7270: LD_INT 31
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PPUSH
7281: CALL_OW 69
7285: IFFALSE 7318
// begin PlaceUnitArea ( veh , startArea , false ) ;
7287: LD_VAR 0 4
7291: PPUSH
7292: LD_INT 1
7294: PPUSH
7295: LD_INT 0
7297: PPUSH
7298: CALL_OW 49
// Connect ( veh ) ;
7302: LD_VAR 0 4
7306: PPUSH
7307: CALL 22435 0 1
// wait ( 0 0$2 ) ;
7311: LD_INT 70
7313: PPUSH
7314: CALL_OW 67
// end ; SetLives ( veh , i [ 6 ] ) ;
7318: LD_VAR 0 4
7322: PPUSH
7323: LD_VAR 0 2
7327: PUSH
7328: LD_INT 6
7330: ARRAY
7331: PPUSH
7332: CALL_OW 234
// SetFuel ( veh , 20 ) ;
7336: LD_VAR 0 4
7340: PPUSH
7341: LD_INT 20
7343: PPUSH
7344: CALL_OW 240
// if i [ 7 ] and GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay ] then
7348: LD_VAR 0 2
7352: PUSH
7353: LD_INT 7
7355: ARRAY
7356: PUSH
7357: LD_VAR 0 4
7361: PPUSH
7362: CALL_OW 264
7366: PUSH
7367: LD_INT 51
7369: PUSH
7370: LD_INT 32
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: IN
7377: AND
7378: IFFALSE 7429
// begin for j := 1 to 2 do
7380: LD_ADDR_VAR 0 3
7384: PUSH
7385: DOUBLE
7386: LD_INT 1
7388: DEC
7389: ST_TO_ADDR
7390: LD_INT 2
7392: PUSH
7393: FOR_TO
7394: IFFALSE 7427
// AddCargo ( veh , j , i [ 7 ] [ j ] ) ;
7396: LD_VAR 0 4
7400: PPUSH
7401: LD_VAR 0 3
7405: PPUSH
7406: LD_VAR 0 2
7410: PUSH
7411: LD_INT 7
7413: ARRAY
7414: PUSH
7415: LD_VAR 0 3
7419: ARRAY
7420: PPUSH
7421: CALL_OW 291
7425: GO 7393
7427: POP
7428: POP
// end ; ComMoveXY ( veh , 185 , 144 ) ;
7429: LD_VAR 0 4
7433: PPUSH
7434: LD_INT 185
7436: PPUSH
7437: LD_INT 144
7439: PPUSH
7440: CALL_OW 111
// if GetControl ( veh ) = control_manual and not hasCamera and GetClass ( IsDrivenBy ( veh ) ) = 2 then
7444: LD_VAR 0 4
7448: PPUSH
7449: CALL_OW 263
7453: PUSH
7454: LD_INT 1
7456: EQUAL
7457: PUSH
7458: LD_VAR 0 7
7462: NOT
7463: AND
7464: PUSH
7465: LD_VAR 0 4
7469: PPUSH
7470: CALL_OW 311
7474: PPUSH
7475: CALL_OW 257
7479: PUSH
7480: LD_INT 2
7482: EQUAL
7483: AND
7484: IFFALSE 7579
// begin hasCamera := true ;
7486: LD_ADDR_VAR 0 7
7490: PUSH
7491: LD_INT 1
7493: ST_TO_ADDR
// driver := IsDrivenBy ( veh ) ;
7494: LD_ADDR_VAR 0 8
7498: PUSH
7499: LD_VAR 0 4
7503: PPUSH
7504: CALL_OW 311
7508: ST_TO_ADDR
// AddComMoveXY ( veh , 177 , 138 ) ;
7509: LD_VAR 0 4
7513: PPUSH
7514: LD_INT 177
7516: PPUSH
7517: LD_INT 138
7519: PPUSH
7520: CALL_OW 171
// AddComExitVehicle ( driver ) ;
7524: LD_VAR 0 8
7528: PPUSH
7529: CALL_OW 181
// AddComHiddenCamera ( driver , 190 , 150 ) ;
7533: LD_VAR 0 8
7537: PPUSH
7538: LD_INT 190
7540: PPUSH
7541: LD_INT 150
7543: PPUSH
7544: CALL_OW 217
// AddComEnterUnit ( driver , veh ) ;
7548: LD_VAR 0 8
7552: PPUSH
7553: LD_VAR 0 4
7557: PPUSH
7558: CALL_OW 180
// AddComMoveXY ( driver , 170 , 103 ) ;
7562: LD_VAR 0 8
7566: PPUSH
7567: LD_INT 170
7569: PPUSH
7570: LD_INT 103
7572: PPUSH
7573: CALL_OW 171
// end else
7577: GO 7621
// begin AddComWait ( veh , 0 0$2 ) ;
7579: LD_VAR 0 4
7583: PPUSH
7584: LD_INT 70
7586: PPUSH
7587: CALL_OW 202
// AddComMoveXY ( veh , 179 , 129 ) ;
7591: LD_VAR 0 4
7595: PPUSH
7596: LD_INT 179
7598: PPUSH
7599: LD_INT 129
7601: PPUSH
7602: CALL_OW 171
// AddComMoveXY ( veh , 170 , 103 ) ;
7606: LD_VAR 0 4
7610: PPUSH
7611: LD_INT 170
7613: PPUSH
7614: LD_INT 103
7616: PPUSH
7617: CALL_OW 171
// end ; wait ( 0 0$2 ) ;
7621: LD_INT 70
7623: PPUSH
7624: CALL_OW 67
// end ;
7628: GO 7048
7630: POP
7631: POP
// end ; if tmp then
7632: LD_VAR 0 5
7636: IFFALSE 7781
// begin for i in tmp do
7638: LD_ADDR_VAR 0 2
7642: PUSH
7643: LD_VAR 0 5
7647: PUSH
7648: FOR_IN
7649: IFFALSE 7779
// begin SetDir ( i , 4 ) ;
7651: LD_VAR 0 2
7655: PPUSH
7656: LD_INT 4
7658: PPUSH
7659: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
7663: LD_VAR 0 2
7667: PPUSH
7668: LD_INT 1
7670: PPUSH
7671: LD_INT 0
7673: PPUSH
7674: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
7678: LD_VAR 0 2
7682: PPUSH
7683: LD_INT 185
7685: PPUSH
7686: LD_INT 144
7688: PPUSH
7689: CALL_OW 111
// if GetClass ( i ) = 2 and not hasCamera then
7693: LD_VAR 0 2
7697: PPUSH
7698: CALL_OW 257
7702: PUSH
7703: LD_INT 2
7705: EQUAL
7706: PUSH
7707: LD_VAR 0 7
7711: NOT
7712: AND
7713: IFFALSE 7740
// begin hasCamera := true ;
7715: LD_ADDR_VAR 0 7
7719: PUSH
7720: LD_INT 1
7722: ST_TO_ADDR
// AddComHiddenCamera ( i , 190 , 150 ) ;
7723: LD_VAR 0 2
7727: PPUSH
7728: LD_INT 190
7730: PPUSH
7731: LD_INT 150
7733: PPUSH
7734: CALL_OW 217
// end else
7738: GO 7755
// AddComMoveXY ( i , 179 , 129 ) ;
7740: LD_VAR 0 2
7744: PPUSH
7745: LD_INT 179
7747: PPUSH
7748: LD_INT 129
7750: PPUSH
7751: CALL_OW 171
// AddComMoveXY ( i , 170 , 103 ) ;
7755: LD_VAR 0 2
7759: PPUSH
7760: LD_INT 170
7762: PPUSH
7763: LD_INT 103
7765: PPUSH
7766: CALL_OW 171
// wait ( 0 0$2 ) ;
7770: LD_INT 70
7772: PPUSH
7773: CALL_OW 67
// end ;
7777: GO 7648
7779: POP
7780: POP
// end ; if heikeApes then
7781: LD_EXP 25
7785: IFFALSE 7868
// begin for i in heikeApes do
7787: LD_ADDR_VAR 0 2
7791: PUSH
7792: LD_EXP 25
7796: PUSH
7797: FOR_IN
7798: IFFALSE 7866
// begin SetDir ( i , 4 ) ;
7800: LD_VAR 0 2
7804: PPUSH
7805: LD_INT 4
7807: PPUSH
7808: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
7812: LD_VAR 0 2
7816: PPUSH
7817: LD_INT 1
7819: PPUSH
7820: LD_INT 0
7822: PPUSH
7823: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
7827: LD_VAR 0 2
7831: PPUSH
7832: LD_INT 185
7834: PPUSH
7835: LD_INT 144
7837: PPUSH
7838: CALL_OW 111
// AddComMoveXY ( i , 170 , 103 ) ;
7842: LD_VAR 0 2
7846: PPUSH
7847: LD_INT 170
7849: PPUSH
7850: LD_INT 103
7852: PPUSH
7853: CALL_OW 171
// wait ( 0 0$2 ) ;
7857: LD_INT 70
7859: PPUSH
7860: CALL_OW 67
// end ;
7864: GO 7797
7866: POP
7867: POP
// end ; AddComMoveXY ( Heike , 163 , 89 ) ;
7868: LD_EXP 12
7872: PPUSH
7873: LD_INT 163
7875: PPUSH
7876: LD_INT 89
7878: PPUSH
7879: CALL_OW 171
// wait ( 0 0$2 ) ;
7883: LD_INT 70
7885: PPUSH
7886: CALL_OW 67
// CenterOnXY ( 175 , 117 ) ;
7890: LD_INT 175
7892: PPUSH
7893: LD_INT 117
7895: PPUSH
7896: CALL_OW 84
// CenterOnUnits ( Heike ) ;
7900: LD_EXP 12
7904: PPUSH
7905: CALL_OW 85
// Say ( Heike , DH-Intro-1 ) ;
7909: LD_EXP 12
7913: PPUSH
7914: LD_STRING DH-Intro-1
7916: PPUSH
7917: CALL_OW 88
// if Markov then
7921: LD_EXP 19
7925: IFFALSE 8492
// begin Say ( Markov , DMar-Intro-2 ) ;
7927: LD_EXP 19
7931: PPUSH
7932: LD_STRING DMar-Intro-2
7934: PPUSH
7935: CALL_OW 88
// Say ( Markov , DMar-Intro-3 ) ;
7939: LD_EXP 19
7943: PPUSH
7944: LD_STRING DMar-Intro-3
7946: PPUSH
7947: CALL_OW 88
// wait ( 0 0$1 ) ;
7951: LD_INT 35
7953: PPUSH
7954: CALL_OW 67
// CenterOnUnits ( Heike ) ;
7958: LD_EXP 12
7962: PPUSH
7963: CALL_OW 85
// if Kurt then
7967: LD_EXP 22
7971: IFFALSE 8023
// begin if IsInUnit ( Kurt ) then
7973: LD_EXP 22
7977: PPUSH
7978: CALL_OW 310
7982: IFFALSE 7993
// ComExit ( Kurt ) ;
7984: LD_EXP 22
7988: PPUSH
7989: CALL 51603 0 1
// AddComMoveXY ( Kurt , 130 , 56 ) ;
7993: LD_EXP 22
7997: PPUSH
7998: LD_INT 130
8000: PPUSH
8001: LD_INT 56
8003: PPUSH
8004: CALL_OW 171
// AddComTurnXY ( Kurt , 129 , 56 ) ;
8008: LD_EXP 22
8012: PPUSH
8013: LD_INT 129
8015: PPUSH
8016: LD_INT 56
8018: PPUSH
8019: CALL_OW 178
// end ; if Kaia then
8023: LD_EXP 17
8027: IFFALSE 8207
// begin Say ( Kaia , DK-Intro-4 ) ;
8029: LD_EXP 17
8033: PPUSH
8034: LD_STRING DK-Intro-4
8036: PPUSH
8037: CALL_OW 88
// Say ( Markov , DMar-Intro-5 ) ;
8041: LD_EXP 19
8045: PPUSH
8046: LD_STRING DMar-Intro-5
8048: PPUSH
8049: CALL_OW 88
// Say ( Markov , DMar-Intro-6 ) ;
8053: LD_EXP 19
8057: PPUSH
8058: LD_STRING DMar-Intro-6
8060: PPUSH
8061: CALL_OW 88
// Say ( Olaf , DO-Intro-7 ) ;
8065: LD_EXP 21
8069: PPUSH
8070: LD_STRING DO-Intro-7
8072: PPUSH
8073: CALL_OW 88
// CenterOnXY ( 160 , 85 ) ;
8077: LD_INT 160
8079: PPUSH
8080: LD_INT 85
8082: PPUSH
8083: CALL_OW 84
// Say ( Markov , DMar-Intro-8 ) ;
8087: LD_EXP 19
8091: PPUSH
8092: LD_STRING DMar-Intro-8
8094: PPUSH
8095: CALL_OW 88
// Say ( Markov , DMar-Intro-9 ) ;
8099: LD_EXP 19
8103: PPUSH
8104: LD_STRING DMar-Intro-9
8106: PPUSH
8107: CALL_OW 88
// Say ( Markov , DMar-Intro-10 ) ;
8111: LD_EXP 19
8115: PPUSH
8116: LD_STRING DMar-Intro-10
8118: PPUSH
8119: CALL_OW 88
// Say ( Markov , DMar-Intro-11 ) ;
8123: LD_EXP 19
8127: PPUSH
8128: LD_STRING DMar-Intro-11
8130: PPUSH
8131: CALL_OW 88
// Say ( Givi , DG-Intro-12 ) ;
8135: LD_EXP 13
8139: PPUSH
8140: LD_STRING DG-Intro-12
8142: PPUSH
8143: CALL_OW 88
// Say ( Givi , DG-Intro-13 ) ;
8147: LD_EXP 13
8151: PPUSH
8152: LD_STRING DG-Intro-13
8154: PPUSH
8155: CALL_OW 88
// Say ( Givi , DG-Intro-14 ) ;
8159: LD_EXP 13
8163: PPUSH
8164: LD_STRING DG-Intro-14
8166: PPUSH
8167: CALL_OW 88
// Say ( Givi , DG-Intro-15 ) ;
8171: LD_EXP 13
8175: PPUSH
8176: LD_STRING DG-Intro-15
8178: PPUSH
8179: CALL_OW 88
// Say ( Heike , DH-Intro-16 ) ;
8183: LD_EXP 12
8187: PPUSH
8188: LD_STRING DH-Intro-16
8190: PPUSH
8191: CALL_OW 88
// Say ( Markov , DMar-Intro-17 ) ;
8195: LD_EXP 19
8199: PPUSH
8200: LD_STRING DMar-Intro-17
8202: PPUSH
8203: CALL_OW 88
// end ; if Kurt and Mike then
8207: LD_EXP 22
8211: PUSH
8212: LD_EXP 14
8216: AND
8217: IFFALSE 8492
// begin CenterNowOnUnits ( Kurt ) ;
8219: LD_EXP 22
8223: PPUSH
8224: CALL_OW 87
// ComTurnUnit ( Kurt , Heike ) ;
8228: LD_EXP 22
8232: PPUSH
8233: LD_EXP 12
8237: PPUSH
8238: CALL_OW 119
// Say ( Kurt , DKs-Intro-18 ) ;
8242: LD_EXP 22
8246: PPUSH
8247: LD_STRING DKs-Intro-18
8249: PPUSH
8250: CALL_OW 88
// Say ( Kurt , DKs-Intro-19 ) ;
8254: LD_EXP 22
8258: PPUSH
8259: LD_STRING DKs-Intro-19
8261: PPUSH
8262: CALL_OW 88
// CenterNowOnUnits ( Mike ) ;
8266: LD_EXP 14
8270: PPUSH
8271: CALL_OW 87
// if IsInUnit ( Mike ) then
8275: LD_EXP 14
8279: PPUSH
8280: CALL_OW 310
8284: IFFALSE 8295
// ComExit ( Mike ) ;
8286: LD_EXP 14
8290: PPUSH
8291: CALL 51603 0 1
// AddComMoveXY ( Mike , 129 , 53 ) ;
8295: LD_EXP 14
8299: PPUSH
8300: LD_INT 129
8302: PPUSH
8303: LD_INT 53
8305: PPUSH
8306: CALL_OW 171
// AddComHold ( Mike ) ;
8310: LD_EXP 14
8314: PPUSH
8315: CALL_OW 200
// wait ( 0 0$2 ) ;
8319: LD_INT 70
8321: PPUSH
8322: CALL_OW 67
// Say ( Mike , DM-Intro-20 ) ;
8326: LD_EXP 14
8330: PPUSH
8331: LD_STRING DM-Intro-20
8333: PPUSH
8334: CALL_OW 88
// scoutActive := Query ( Scout ) ;
8338: LD_ADDR_EXP 3
8342: PUSH
8343: LD_STRING Scout
8345: PPUSH
8346: CALL_OW 97
8350: ST_TO_ADDR
// if scoutActive = 1 then
8351: LD_EXP 3
8355: PUSH
8356: LD_INT 1
8358: EQUAL
8359: IFFALSE 8456
// begin CenterNowOnUnits ( Kurt ) ;
8361: LD_EXP 22
8365: PPUSH
8366: CALL_OW 87
// Say ( Heike , DH-Intro-21 ) ;
8370: LD_EXP 12
8374: PPUSH
8375: LD_STRING DH-Intro-21
8377: PPUSH
8378: CALL_OW 88
// Say ( Mike , DM-Intro-22 ) ;
8382: LD_EXP 14
8386: PPUSH
8387: LD_STRING DM-Intro-22
8389: PPUSH
8390: CALL_OW 88
// Say ( Kurt , DKs-Intro-23 ) ;
8394: LD_EXP 22
8398: PPUSH
8399: LD_STRING DKs-Intro-23
8401: PPUSH
8402: CALL_OW 88
// SetSide ( Kurt , 5 ) ;
8406: LD_EXP 22
8410: PPUSH
8411: LD_INT 5
8413: PPUSH
8414: CALL_OW 235
// SetSide ( Mike , 5 ) ;
8418: LD_EXP 14
8422: PPUSH
8423: LD_INT 5
8425: PPUSH
8426: CALL_OW 235
// ComMoveXY ( [ Kurt , Mike ] , 104 , 66 ) ;
8430: LD_EXP 22
8434: PUSH
8435: LD_EXP 14
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: PPUSH
8444: LD_INT 104
8446: PPUSH
8447: LD_INT 66
8449: PPUSH
8450: CALL_OW 111
// end else
8454: GO 8492
// begin Say ( Heike , DH-Intro-a-21 ) ;
8456: LD_EXP 12
8460: PPUSH
8461: LD_STRING DH-Intro-a-21
8463: PPUSH
8464: CALL_OW 88
// Say ( Mike , DM-Intro-a-22 ) ;
8468: LD_EXP 14
8472: PPUSH
8473: LD_STRING DM-Intro-a-22
8475: PPUSH
8476: CALL_OW 88
// Say ( Kurt , DKs-Intro-a-23 ) ;
8480: LD_EXP 22
8484: PPUSH
8485: LD_STRING DKs-Intro-a-23
8487: PPUSH
8488: CALL_OW 88
// end ; end ; end ; Video ( false ) ;
8492: LD_INT 0
8494: PPUSH
8495: CALL 51187 0 1
// music_nat := music_auto ;
8499: LD_ADDR_OWVAR 71
8503: PUSH
8504: LD_INT 0
8506: ST_TO_ADDR
// music_class := music_auto ;
8507: LD_ADDR_OWVAR 72
8511: PUSH
8512: LD_INT 0
8514: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
8515: LD_STRING M1
8517: PPUSH
8518: CALL_OW 337
// wait ( 0 0$3 ) ;
8522: LD_INT 105
8524: PPUSH
8525: CALL_OW 67
// Say ( Heike , DH-Base-1 ) ;
8529: LD_EXP 12
8533: PPUSH
8534: LD_STRING DH-Base-1
8536: PPUSH
8537: CALL_OW 88
// if Kaia then
8541: LD_EXP 17
8545: IFFALSE 8655
// begin Say ( Kaia , DK-Base-2 ) ;
8547: LD_EXP 17
8551: PPUSH
8552: LD_STRING DK-Base-2
8554: PPUSH
8555: CALL_OW 88
// Say ( Heike , DH-Base-3 ) ;
8559: LD_EXP 12
8563: PPUSH
8564: LD_STRING DH-Base-3
8566: PPUSH
8567: CALL_OW 88
// if Aviradze then
8571: LD_EXP 23
8575: IFFALSE 8655
// begin Say ( Aviradze , DA-Base-4 ) ;
8577: LD_EXP 23
8581: PPUSH
8582: LD_STRING DA-Base-4
8584: PPUSH
8585: CALL_OW 88
// Say ( Kaia , DK-Base-5 ) ;
8589: LD_EXP 17
8593: PPUSH
8594: LD_STRING DK-Base-5
8596: PPUSH
8597: CALL_OW 88
// if Markov then
8601: LD_EXP 19
8605: IFFALSE 8655
// begin Say ( Markov , DMar-Base-6 ) ;
8607: LD_EXP 19
8611: PPUSH
8612: LD_STRING DMar-Base-6
8614: PPUSH
8615: CALL_OW 88
// Say ( Kaia , DK-Base-7 ) ;
8619: LD_EXP 17
8623: PPUSH
8624: LD_STRING DK-Base-7
8626: PPUSH
8627: CALL_OW 88
// Say ( Markov , DMar-Base-8 ) ;
8631: LD_EXP 19
8635: PPUSH
8636: LD_STRING DMar-Base-8
8638: PPUSH
8639: CALL_OW 88
// Say ( Markov , DMar-Base-9 ) ;
8643: LD_EXP 19
8647: PPUSH
8648: LD_STRING DMar-Base-9
8650: PPUSH
8651: CALL_OW 88
// end ; end ; end ; SaveForQuickRestart ;
8655: CALL_OW 22
// end ;
8659: LD_VAR 0 1
8663: RET
// every 0 0$1 trigger scoutSuccess do var i , tmp ;
8664: LD_EXP 5
8668: IFFALSE 9772
8670: GO 8672
8672: DISABLE
8673: LD_INT 0
8675: PPUSH
8676: PPUSH
// begin InGameOn ;
8677: CALL_OW 8
// ComTurnUnit ( [ Mike , Kurt ] , Heike ) ;
8681: LD_EXP 14
8685: PUSH
8686: LD_EXP 22
8690: PUSH
8691: EMPTY
8692: LIST
8693: LIST
8694: PPUSH
8695: LD_EXP 12
8699: PPUSH
8700: CALL_OW 119
// ComExit ( Heike ) ;
8704: LD_EXP 12
8708: PPUSH
8709: CALL 51603 0 1
// if IsOk ( Mike ) then
8713: LD_EXP 14
8717: PPUSH
8718: CALL_OW 302
8722: IFFALSE 8740
// AddComTurnUnit ( Heike , Mike ) else
8724: LD_EXP 12
8728: PPUSH
8729: LD_EXP 14
8733: PPUSH
8734: CALL_OW 179
8738: GO 8754
// AddComTurnUnit ( Heike , Kurt ) ;
8740: LD_EXP 12
8744: PPUSH
8745: LD_EXP 22
8749: PPUSH
8750: CALL_OW 179
// if IsOk ( Mike ) and IsOk ( Kurt ) then
8754: LD_EXP 14
8758: PPUSH
8759: CALL_OW 302
8763: PUSH
8764: LD_EXP 22
8768: PPUSH
8769: CALL_OW 302
8773: AND
8774: IFFALSE 9025
// begin CenterNowOnUnits ( Mike ) ;
8776: LD_EXP 14
8780: PPUSH
8781: CALL_OW 87
// Say ( Mike , DM-Scout-1 ) ;
8785: LD_EXP 14
8789: PPUSH
8790: LD_STRING DM-Scout-1
8792: PPUSH
8793: CALL_OW 88
// Say ( Heike , DH-Scout-2 ) ;
8797: LD_EXP 12
8801: PPUSH
8802: LD_STRING DH-Scout-2
8804: PPUSH
8805: CALL_OW 88
// Say ( Kurt , DKs-Scout-3 ) ;
8809: LD_EXP 22
8813: PPUSH
8814: LD_STRING DKs-Scout-3
8816: PPUSH
8817: CALL_OW 88
// Say ( Heike , DH-Scout-4 ) ;
8821: LD_EXP 12
8825: PPUSH
8826: LD_STRING DH-Scout-4
8828: PPUSH
8829: CALL_OW 88
// Say ( Heike , DH-Scout-5 ) ;
8833: LD_EXP 12
8837: PPUSH
8838: LD_STRING DH-Scout-5
8840: PPUSH
8841: CALL_OW 88
// tmp := [ [ 72 , 122 ] , [ 89 , 131 ] , [ 99 , 139 ] , [ 100 , 148 ] ] ;
8845: LD_ADDR_VAR 0 2
8849: PUSH
8850: LD_INT 72
8852: PUSH
8853: LD_INT 122
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: PUSH
8860: LD_INT 89
8862: PUSH
8863: LD_INT 131
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: PUSH
8870: LD_INT 99
8872: PUSH
8873: LD_INT 139
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PUSH
8880: LD_INT 100
8882: PUSH
8883: LD_INT 148
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: ST_TO_ADDR
// for i in tmp do
8896: LD_ADDR_VAR 0 1
8900: PUSH
8901: LD_VAR 0 2
8905: PUSH
8906: FOR_IN
8907: IFFALSE 8965
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 2 , - 6 ) ;
8909: LD_VAR 0 1
8913: PUSH
8914: LD_INT 1
8916: ARRAY
8917: PPUSH
8918: LD_VAR 0 1
8922: PUSH
8923: LD_INT 2
8925: ARRAY
8926: PPUSH
8927: LD_INT 2
8929: PPUSH
8930: LD_INT 6
8932: NEG
8933: PPUSH
8934: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 2 ) ;
8938: LD_VAR 0 1
8942: PUSH
8943: LD_INT 1
8945: ARRAY
8946: PPUSH
8947: LD_VAR 0 1
8951: PUSH
8952: LD_INT 2
8954: ARRAY
8955: PPUSH
8956: LD_INT 2
8958: PPUSH
8959: CALL_OW 331
// end ;
8963: GO 8906
8965: POP
8966: POP
// CenterOnXY ( 83 , 132 ) ;
8967: LD_INT 83
8969: PPUSH
8970: LD_INT 132
8972: PPUSH
8973: CALL_OW 84
// Say ( Kurt , DKs-Scout-6 ) ;
8977: LD_EXP 22
8981: PPUSH
8982: LD_STRING DKs-Scout-6
8984: PPUSH
8985: CALL_OW 88
// Say ( Mike , DM-Scout-7 ) ;
8989: LD_EXP 14
8993: PPUSH
8994: LD_STRING DM-Scout-7
8996: PPUSH
8997: CALL_OW 88
// Say ( Mike , DM-Scout-8 ) ;
9001: LD_EXP 14
9005: PPUSH
9006: LD_STRING DM-Scout-8
9008: PPUSH
9009: CALL_OW 88
// Say ( Kurt , DKs-Scout-9 ) ;
9013: LD_EXP 22
9017: PPUSH
9018: LD_STRING DKs-Scout-9
9020: PPUSH
9021: CALL_OW 88
// end ; if IsDead ( Mike ) then
9025: LD_EXP 14
9029: PPUSH
9030: CALL_OW 301
9034: IFFALSE 9201
// begin CenterNowOnUnits ( Kurt ) ;
9036: LD_EXP 22
9040: PPUSH
9041: CALL_OW 87
// Say ( Kurt , DKs-Scout-b-1 ) ;
9045: LD_EXP 22
9049: PPUSH
9050: LD_STRING DKs-Scout-b-1
9052: PPUSH
9053: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-2 ) ;
9057: LD_EXP 22
9061: PPUSH
9062: LD_STRING DKs-Scout-b-2
9064: PPUSH
9065: CALL_OW 88
// if IsOk ( Givi ) then
9069: LD_EXP 13
9073: PPUSH
9074: CALL_OW 302
9078: IFFALSE 9153
// begin ComExit ( Givi ) ;
9080: LD_EXP 13
9084: PPUSH
9085: CALL 51603 0 1
// AddComTurnUnit ( Givi , Kurt ) ;
9089: LD_EXP 13
9093: PPUSH
9094: LD_EXP 22
9098: PPUSH
9099: CALL_OW 179
// Say ( Givi , DG-Scout-b-3 ) ;
9103: LD_EXP 13
9107: PPUSH
9108: LD_STRING DG-Scout-b-3
9110: PPUSH
9111: CALL_OW 88
// Say ( Givi , DG-Scout-b-4 ) ;
9115: LD_EXP 13
9119: PPUSH
9120: LD_STRING DG-Scout-b-4
9122: PPUSH
9123: CALL_OW 88
// Say ( Givi , DG-Scout-b-5 ) ;
9127: LD_EXP 13
9131: PPUSH
9132: LD_STRING DG-Scout-b-5
9134: PPUSH
9135: CALL_OW 88
// Say ( Heike , DH-Scout-b-6 ) ;
9139: LD_EXP 12
9143: PPUSH
9144: LD_STRING DH-Scout-b-6
9146: PPUSH
9147: CALL_OW 88
// end else
9151: GO 9165
// Say ( Heike , DH-Scout-a-4 ) ;
9153: LD_EXP 12
9157: PPUSH
9158: LD_STRING DH-Scout-a-4
9160: PPUSH
9161: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-7 ) ;
9165: LD_EXP 22
9169: PPUSH
9170: LD_STRING DKs-Scout-b-7
9172: PPUSH
9173: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-8 ) ;
9177: LD_EXP 22
9181: PPUSH
9182: LD_STRING DKs-Scout-b-8
9184: PPUSH
9185: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-9 ) ;
9189: LD_EXP 22
9193: PPUSH
9194: LD_STRING DKs-Scout-b-9
9196: PPUSH
9197: CALL_OW 88
// end ; if IsDead ( Kurt ) then
9201: LD_EXP 22
9205: PPUSH
9206: CALL_OW 301
9210: IFFALSE 9489
// begin CenterNowOnUnits ( Mike ) ;
9212: LD_EXP 14
9216: PPUSH
9217: CALL_OW 87
// Say ( Mike , DM-Scout-a-1 ) ;
9221: LD_EXP 14
9225: PPUSH
9226: LD_STRING DM-Scout-a-1
9228: PPUSH
9229: CALL_OW 88
// Say ( Mike , DM-Scout-a-2 ) ;
9233: LD_EXP 14
9237: PPUSH
9238: LD_STRING DM-Scout-a-2
9240: PPUSH
9241: CALL_OW 88
// if GetLives ( Mike ) < 1000 then
9245: LD_EXP 14
9249: PPUSH
9250: CALL_OW 256
9254: PUSH
9255: LD_INT 1000
9257: LESS
9258: IFFALSE 9274
// Say ( Heike , DH-Scout-a-3 ) else
9260: LD_EXP 12
9264: PPUSH
9265: LD_STRING DH-Scout-a-3
9267: PPUSH
9268: CALL_OW 88
9272: GO 9286
// Say ( Heike , DH-Scout-a-4 ) ;
9274: LD_EXP 12
9278: PPUSH
9279: LD_STRING DH-Scout-a-4
9281: PPUSH
9282: CALL_OW 88
// Say ( Mike , DM-Scout-a-5 ) ;
9286: LD_EXP 14
9290: PPUSH
9291: LD_STRING DM-Scout-a-5
9293: PPUSH
9294: CALL_OW 88
// if IsOk ( Kaia ) then
9298: LD_EXP 17
9302: PPUSH
9303: CALL_OW 302
9307: IFFALSE 9489
// begin ComExit ( Kaia ) ;
9309: LD_EXP 17
9313: PPUSH
9314: CALL 51603 0 1
// AddComMoveUnit ( Kaia , Mike ) ;
9318: LD_EXP 17
9322: PPUSH
9323: LD_EXP 14
9327: PPUSH
9328: CALL_OW 172
// wait ( 0 0$2 ) ;
9332: LD_INT 70
9334: PPUSH
9335: CALL_OW 67
// ComTurnUnit ( Kaia , Mike ) ;
9339: LD_EXP 17
9343: PPUSH
9344: LD_EXP 14
9348: PPUSH
9349: CALL_OW 119
// ComTurnUnit ( Mike , Kaia ) ;
9353: LD_EXP 14
9357: PPUSH
9358: LD_EXP 17
9362: PPUSH
9363: CALL_OW 119
// Say ( Kaia , DK-Scout-a-6 ) ;
9367: LD_EXP 17
9371: PPUSH
9372: LD_STRING DK-Scout-a-6
9374: PPUSH
9375: CALL_OW 88
// Say ( Mike , DM-Scout-a-7 ) ;
9379: LD_EXP 14
9383: PPUSH
9384: LD_STRING DM-Scout-a-7
9386: PPUSH
9387: CALL_OW 88
// Say ( Kaia , DK-Scout-a-8 ) ;
9391: LD_EXP 17
9395: PPUSH
9396: LD_STRING DK-Scout-a-8
9398: PPUSH
9399: CALL_OW 88
// Say ( Kaia , DK-Scout-a-9 ) ;
9403: LD_EXP 17
9407: PPUSH
9408: LD_STRING DK-Scout-a-9
9410: PPUSH
9411: CALL_OW 88
// Say ( Heike , DH-Scout-a-10 ) ;
9415: LD_EXP 12
9419: PPUSH
9420: LD_STRING DH-Scout-a-10
9422: PPUSH
9423: CALL_OW 88
// ComTurnUnit ( Mike , Heike ) ;
9427: LD_EXP 14
9431: PPUSH
9432: LD_EXP 12
9436: PPUSH
9437: CALL_OW 119
// Say ( Mike , DM-Scout-a-11 ) ;
9441: LD_EXP 14
9445: PPUSH
9446: LD_STRING DM-Scout-a-11
9448: PPUSH
9449: CALL_OW 88
// Say ( Mike , DM-Scout-a-12 ) ;
9453: LD_EXP 14
9457: PPUSH
9458: LD_STRING DM-Scout-a-12
9460: PPUSH
9461: CALL_OW 88
// Say ( Mike , DM-Scout-a-13 ) ;
9465: LD_EXP 14
9469: PPUSH
9470: LD_STRING DM-Scout-a-13
9472: PPUSH
9473: CALL_OW 88
// Say ( Mike , DM-Scout-a-14 ) ;
9477: LD_EXP 14
9481: PPUSH
9482: LD_STRING DM-Scout-a-14
9484: PPUSH
9485: CALL_OW 88
// end ; end ; if IsOk ( Givi ) then
9489: LD_EXP 13
9493: PPUSH
9494: CALL_OW 302
9498: IFFALSE 9526
// begin Say ( Givi , DG-Scout-10 ) ;
9500: LD_EXP 13
9504: PPUSH
9505: LD_STRING DG-Scout-10
9507: PPUSH
9508: CALL_OW 88
// Say ( Givi , DG-Scout-11 ) ;
9512: LD_EXP 13
9516: PPUSH
9517: LD_STRING DG-Scout-11
9519: PPUSH
9520: CALL_OW 88
// end else
9524: GO 9583
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-10 ) then
9526: LD_EXP 24
9530: PPUSH
9531: LD_INT 26
9533: PUSH
9534: LD_INT 1
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: PPUSH
9541: CALL_OW 72
9545: PPUSH
9546: LD_STRING DArm-Scout-10
9548: PPUSH
9549: CALL 242 0 2
9553: NOT
9554: IFFALSE 9583
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-10 ) ;
9556: LD_EXP 24
9560: PPUSH
9561: LD_INT 26
9563: PUSH
9564: LD_INT 2
9566: PUSH
9567: EMPTY
9568: LIST
9569: LIST
9570: PPUSH
9571: CALL_OW 72
9575: PPUSH
9576: LD_STRING DArf-Scout-10
9578: PPUSH
9579: CALL 242 0 2
// Say ( Heike , DH-Scout-12 ) ;
9583: LD_EXP 12
9587: PPUSH
9588: LD_STRING DH-Scout-12
9590: PPUSH
9591: CALL_OW 88
// Say ( Heike , DH-Scout-13 ) ;
9595: LD_EXP 12
9599: PPUSH
9600: LD_STRING DH-Scout-13
9602: PPUSH
9603: CALL_OW 88
// if IsOk ( Mike ) and IsOk ( Kurt ) then
9607: LD_EXP 14
9611: PPUSH
9612: CALL_OW 302
9616: PUSH
9617: LD_EXP 22
9621: PPUSH
9622: CALL_OW 302
9626: AND
9627: IFFALSE 9655
// begin Say ( Mike , DM-Scout-14 ) ;
9629: LD_EXP 14
9633: PPUSH
9634: LD_STRING DM-Scout-14
9636: PPUSH
9637: CALL_OW 88
// Say ( Heike , DH-Scout-c-14 ) ;
9641: LD_EXP 12
9645: PPUSH
9646: LD_STRING DH-Scout-c-14
9648: PPUSH
9649: CALL_OW 88
// end else
9653: GO 9748
// if IsOk ( Mike ) xor IsOk ( Kurt ) then
9655: LD_EXP 14
9659: PPUSH
9660: CALL_OW 302
9664: PUSH
9665: LD_EXP 22
9669: PPUSH
9670: CALL_OW 302
9674: XOR
9675: IFFALSE 9736
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-a-14 ) then
9677: LD_EXP 24
9681: PPUSH
9682: LD_INT 26
9684: PUSH
9685: LD_INT 1
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: PPUSH
9692: CALL_OW 72
9696: PPUSH
9697: LD_STRING DArm-Scout-a-14
9699: PPUSH
9700: CALL 242 0 2
9704: NOT
9705: IFFALSE 9734
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-a-14 ) ;
9707: LD_EXP 24
9711: PPUSH
9712: LD_INT 26
9714: PUSH
9715: LD_INT 2
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: PPUSH
9722: CALL_OW 72
9726: PPUSH
9727: LD_STRING DArf-Scout-a-14
9729: PPUSH
9730: CALL 242 0 2
// end else
9734: GO 9748
// Say ( Heike , DH-Scout-d-14 ) ;
9736: LD_EXP 12
9740: PPUSH
9741: LD_STRING DH-Scout-d-14
9743: PPUSH
9744: CALL_OW 88
// Say ( Heike , DH-Scout-15 ) ;
9748: LD_EXP 12
9752: PPUSH
9753: LD_STRING DH-Scout-15
9755: PPUSH
9756: CALL_OW 88
// InGameOff ;
9760: CALL_OW 9
// usAttacksAllowed := true ;
9764: LD_ADDR_EXP 6
9768: PUSH
9769: LD_INT 1
9771: ST_TO_ADDR
// end ;
9772: PPOPN 2
9774: END
// every 0 0$1 trigger scoutFailed do var spoken ;
9775: LD_EXP 4
9779: IFFALSE 9956
9781: GO 9783
9783: DISABLE
9784: LD_INT 0
9786: PPUSH
// begin spoken := true ;
9787: LD_ADDR_VAR 0 1
9791: PUSH
9792: LD_INT 1
9794: ST_TO_ADDR
// wait ( 0 0$30 ) ;
9795: LD_INT 1050
9797: PPUSH
9798: CALL_OW 67
// Say ( Heike , DH-Scout-c-1 ) ;
9802: LD_EXP 12
9806: PPUSH
9807: LD_STRING DH-Scout-c-1
9809: PPUSH
9810: CALL_OW 88
// if not IsOk ( Givi ) then
9814: LD_EXP 13
9818: PPUSH
9819: CALL_OW 302
9823: NOT
9824: IFFALSE 9828
// exit ;
9826: GO 9956
// if IsOk ( Givi ) then
9828: LD_EXP 13
9832: PPUSH
9833: CALL_OW 302
9837: IFFALSE 9865
// begin Say ( Givi , DG-Scout-c-2 ) ;
9839: LD_EXP 13
9843: PPUSH
9844: LD_STRING DG-Scout-c-2
9846: PPUSH
9847: CALL_OW 88
// Say ( Givi , DG-Scout-c-3 ) ;
9851: LD_EXP 13
9855: PPUSH
9856: LD_STRING DG-Scout-c-3
9858: PPUSH
9859: CALL_OW 88
// end else
9863: GO 9938
// begin spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-c-3 ) ;
9865: LD_ADDR_VAR 0 1
9869: PUSH
9870: LD_EXP 24
9874: PPUSH
9875: LD_INT 26
9877: PUSH
9878: LD_INT 1
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: PPUSH
9885: CALL_OW 72
9889: PPUSH
9890: LD_STRING DArm-Scout-c-3
9892: PPUSH
9893: CALL 242 0 2
9897: ST_TO_ADDR
// if not spoken then
9898: LD_VAR 0 1
9902: NOT
9903: IFFALSE 9938
// spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-c-3 ) ;
9905: LD_ADDR_VAR 0 1
9909: PUSH
9910: LD_EXP 24
9914: PPUSH
9915: LD_INT 26
9917: PUSH
9918: LD_INT 2
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: PPUSH
9925: CALL_OW 72
9929: PPUSH
9930: LD_STRING DArf-Scout-c-3
9932: PPUSH
9933: CALL 242 0 2
9937: ST_TO_ADDR
// ; end ; if spoken then
9938: LD_VAR 0 1
9942: IFFALSE 9956
// Say ( Heike , DH-Scout-c-4 ) ;
9944: LD_EXP 12
9948: PPUSH
9949: LD_STRING DH-Scout-c-4
9951: PPUSH
9952: CALL_OW 88
// end ;
9956: PPOPN 1
9958: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_half ] ] ) and IsOk ( Aviradze ) do
9959: LD_INT 22
9961: PUSH
9962: LD_INT 2
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: PUSH
9969: LD_INT 30
9971: PUSH
9972: LD_INT 7
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PPUSH
9983: CALL_OW 69
9987: PUSH
9988: LD_EXP 23
9992: PPUSH
9993: CALL_OW 302
9997: AND
9998: IFFALSE 10083
10000: GO 10002
10002: DISABLE
// begin DialogueOn ;
10003: CALL_OW 6
// Say ( Aviradze , DA-Lab-1 ) ;
10007: LD_EXP 23
10011: PPUSH
10012: LD_STRING DA-Lab-1
10014: PPUSH
10015: CALL_OW 88
// Say ( Heike , DH-Lab-2 ) ;
10019: LD_EXP 12
10023: PPUSH
10024: LD_STRING DH-Lab-2
10026: PPUSH
10027: CALL_OW 88
// Say ( Aviradze , DA-Lab-3 ) ;
10031: LD_EXP 23
10035: PPUSH
10036: LD_STRING DA-Lab-3
10038: PPUSH
10039: CALL_OW 88
// Say ( Aviradze , DA-Lab-4 ) ;
10043: LD_EXP 23
10047: PPUSH
10048: LD_STRING DA-Lab-4
10050: PPUSH
10051: CALL_OW 88
// Say ( Aviradze , DA-Lab-5 ) ;
10055: LD_EXP 23
10059: PPUSH
10060: LD_STRING DA-Lab-5
10062: PPUSH
10063: CALL_OW 88
// Say ( Heike , DH-Lab-6 ) ;
10067: LD_EXP 12
10071: PPUSH
10072: LD_STRING DH-Lab-6
10074: PPUSH
10075: CALL_OW 88
// DialogueOff ;
10079: CALL_OW 7
// end ;
10083: END
// every 0 0$1 trigger GetTech ( tech_MatDet , 2 ) = state_researched and IsOk ( Givi ) do
10084: LD_INT 7
10086: PPUSH
10087: LD_INT 2
10089: PPUSH
10090: CALL_OW 321
10094: PUSH
10095: LD_INT 2
10097: EQUAL
10098: PUSH
10099: LD_EXP 13
10103: PPUSH
10104: CALL_OW 302
10108: AND
10109: IFFALSE 10278
10111: GO 10113
10113: DISABLE
// begin DialogueOn ;
10114: CALL_OW 6
// Say ( Givi , DG-Opt-1 ) ;
10118: LD_EXP 13
10122: PPUSH
10123: LD_STRING DG-Opt-1
10125: PPUSH
10126: CALL_OW 88
// Say ( Heike , DH-Opt-2 ) ;
10130: LD_EXP 12
10134: PPUSH
10135: LD_STRING DH-Opt-2
10137: PPUSH
10138: CALL_OW 88
// Say ( Givi , DG-Opt-3 ) ;
10142: LD_EXP 13
10146: PPUSH
10147: LD_STRING DG-Opt-3
10149: PPUSH
10150: CALL_OW 88
// Say ( Givi , DG-Opt-4 ) ;
10154: LD_EXP 13
10158: PPUSH
10159: LD_STRING DG-Opt-4
10161: PPUSH
10162: CALL_OW 88
// Say ( Heike , DH-Opt-5 ) ;
10166: LD_EXP 12
10170: PPUSH
10171: LD_STRING DH-Opt-5
10173: PPUSH
10174: CALL_OW 88
// Say ( Givi , DG-Opt-6 ) ;
10178: LD_EXP 13
10182: PPUSH
10183: LD_STRING DG-Opt-6
10185: PPUSH
10186: CALL_OW 88
// Say ( Heike , DH-Opt-7 ) ;
10190: LD_EXP 12
10194: PPUSH
10195: LD_STRING DH-Opt-7
10197: PPUSH
10198: CALL_OW 88
// Say ( Givi , DG-Opt-8 ) ;
10202: LD_EXP 13
10206: PPUSH
10207: LD_STRING DG-Opt-8
10209: PPUSH
10210: CALL_OW 88
// Say ( Givi , DG-Opt-9 ) ;
10214: LD_EXP 13
10218: PPUSH
10219: LD_STRING DG-Opt-9
10221: PPUSH
10222: CALL_OW 88
// Say ( Heike , DH-Opt-10 ) ;
10226: LD_EXP 12
10230: PPUSH
10231: LD_STRING DH-Opt-10
10233: PPUSH
10234: CALL_OW 88
// Say ( Givi , DG-Opt-11 ) ;
10238: LD_EXP 13
10242: PPUSH
10243: LD_STRING DG-Opt-11
10245: PPUSH
10246: CALL_OW 88
// Say ( Givi , DG-Opt-12 ) ;
10250: LD_EXP 13
10254: PPUSH
10255: LD_STRING DG-Opt-12
10257: PPUSH
10258: CALL_OW 88
// Say ( Heike , DH-Opt-13 ) ;
10262: LD_EXP 12
10266: PPUSH
10267: LD_STRING DH-Opt-13
10269: PPUSH
10270: CALL_OW 88
// DialogueOff ;
10274: CALL_OW 7
// end ;
10278: END
// every 0 0$1 trigger GetTech ( tech_rocket , 2 ) = state_researched and IsOk ( Ibrahim ) do
10279: LD_INT 40
10281: PPUSH
10282: LD_INT 2
10284: PPUSH
10285: CALL_OW 321
10289: PUSH
10290: LD_INT 2
10292: EQUAL
10293: PUSH
10294: LD_EXP 15
10298: PPUSH
10299: CALL_OW 302
10303: AND
10304: IFFALSE 10554
10306: GO 10308
10308: DISABLE
// begin DialogueOn ;
10309: CALL_OW 6
// Say ( Ibrahim , DI-Roc-1 ) ;
10313: LD_EXP 15
10317: PPUSH
10318: LD_STRING DI-Roc-1
10320: PPUSH
10321: CALL_OW 88
// Say ( Heike , DH-Roc-2 ) ;
10325: LD_EXP 12
10329: PPUSH
10330: LD_STRING DH-Roc-2
10332: PPUSH
10333: CALL_OW 88
// Say ( Ibrahim , DI-Roc-3 ) ;
10337: LD_EXP 15
10341: PPUSH
10342: LD_STRING DI-Roc-3
10344: PPUSH
10345: CALL_OW 88
// Say ( Ibrahim , DI-Roc-4 ) ;
10349: LD_EXP 15
10353: PPUSH
10354: LD_STRING DI-Roc-4
10356: PPUSH
10357: CALL_OW 88
// Say ( Kaia , DK-Roc-5 ) ;
10361: LD_EXP 17
10365: PPUSH
10366: LD_STRING DK-Roc-5
10368: PPUSH
10369: CALL_OW 88
// Say ( Kaia , DK-Roc-6 ) ;
10373: LD_EXP 17
10377: PPUSH
10378: LD_STRING DK-Roc-6
10380: PPUSH
10381: CALL_OW 88
// Say ( Givi , DG-Roc-7 ) ;
10385: LD_EXP 13
10389: PPUSH
10390: LD_STRING DG-Roc-7
10392: PPUSH
10393: CALL_OW 88
// Say ( Givi , DG-Roc-8 ) ;
10397: LD_EXP 13
10401: PPUSH
10402: LD_STRING DG-Roc-8
10404: PPUSH
10405: CALL_OW 88
// if IsOk ( Markov ) and IsOk ( Kaia ) and IsOk ( Givi ) then
10409: LD_EXP 19
10413: PPUSH
10414: CALL_OW 302
10418: PUSH
10419: LD_EXP 17
10423: PPUSH
10424: CALL_OW 302
10428: AND
10429: PUSH
10430: LD_EXP 13
10434: PPUSH
10435: CALL_OW 302
10439: AND
10440: IFFALSE 10550
// begin Say ( Markov , DMar-Roc-9 ) ;
10442: LD_EXP 19
10446: PPUSH
10447: LD_STRING DMar-Roc-9
10449: PPUSH
10450: CALL_OW 88
// Say ( Markov , DMar-Roc-10 ) ;
10454: LD_EXP 19
10458: PPUSH
10459: LD_STRING DMar-Roc-10
10461: PPUSH
10462: CALL_OW 88
// Say ( Kaia , DK-Roc-11 ) ;
10466: LD_EXP 17
10470: PPUSH
10471: LD_STRING DK-Roc-11
10473: PPUSH
10474: CALL_OW 88
// Say ( Markov , DMar-Roc-12 ) ;
10478: LD_EXP 19
10482: PPUSH
10483: LD_STRING DMar-Roc-12
10485: PPUSH
10486: CALL_OW 88
// Say ( Kaia , DK-Roc-13 ) ;
10490: LD_EXP 17
10494: PPUSH
10495: LD_STRING DK-Roc-13
10497: PPUSH
10498: CALL_OW 88
// Say ( Givi , DG-Roc-14 ) ;
10502: LD_EXP 13
10506: PPUSH
10507: LD_STRING DG-Roc-14
10509: PPUSH
10510: CALL_OW 88
// Say ( Markov , DMar-Roc-15 ) ;
10514: LD_EXP 19
10518: PPUSH
10519: LD_STRING DMar-Roc-15
10521: PPUSH
10522: CALL_OW 88
// Say ( Markov , DMar-Roc-16 ) ;
10526: LD_EXP 19
10530: PPUSH
10531: LD_STRING DMar-Roc-16
10533: PPUSH
10534: CALL_OW 88
// Say ( Kaia , DK-Roc-17 ) ;
10538: LD_EXP 17
10542: PPUSH
10543: LD_STRING DK-Roc-17
10545: PPUSH
10546: CALL_OW 88
// end ; DialogueOff ;
10550: CALL_OW 7
// end ;
10554: END
// every 0 0$3 trigger GetLives ( usCommander ) < 1000 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] ] ) < 6 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) < 2 do var i , hurts , sci ;
10555: LD_EXP 27
10559: PPUSH
10560: CALL_OW 256
10564: PUSH
10565: LD_INT 1000
10567: LESS
10568: PUSH
10569: LD_INT 22
10571: PUSH
10572: LD_INT 1
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: PUSH
10579: LD_INT 21
10581: PUSH
10582: LD_INT 1
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: PUSH
10589: LD_INT 23
10591: PUSH
10592: LD_INT 1
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: LIST
10603: PPUSH
10604: CALL_OW 69
10608: PUSH
10609: LD_INT 6
10611: LESS
10612: OR
10613: PUSH
10614: LD_INT 22
10616: PUSH
10617: LD_INT 1
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: PUSH
10624: LD_INT 21
10626: PUSH
10627: LD_INT 1
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PUSH
10634: LD_INT 25
10636: PUSH
10637: LD_INT 1
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: LIST
10648: PPUSH
10649: CALL_OW 69
10653: PUSH
10654: LD_INT 2
10656: LESS
10657: OR
10658: IFFALSE 11867
10660: GO 10662
10662: DISABLE
10663: LD_INT 0
10665: PPUSH
10666: PPUSH
10667: PPUSH
// begin usAttacksAllowed := false ;
10668: LD_ADDR_EXP 6
10672: PUSH
10673: LD_INT 0
10675: ST_TO_ADDR
// usSurrender := true ;
10676: LD_ADDR_EXP 7
10680: PUSH
10681: LD_INT 1
10683: ST_TO_ADDR
// SetAttitude ( 1 , 2 , att_friend , true ) ;
10684: LD_INT 1
10686: PPUSH
10687: LD_INT 2
10689: PPUSH
10690: LD_INT 1
10692: PPUSH
10693: LD_INT 1
10695: PPUSH
10696: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_hastask ] ] ) do
10700: LD_ADDR_VAR 0 1
10704: PUSH
10705: LD_INT 22
10707: PUSH
10708: LD_INT 2
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: PUSH
10715: LD_INT 21
10717: PUSH
10718: LD_INT 1
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: PUSH
10725: LD_INT 60
10727: PUSH
10728: EMPTY
10729: LIST
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: LIST
10735: PPUSH
10736: CALL_OW 69
10740: PUSH
10741: FOR_IN
10742: IFFALSE 10755
// ComStop ( i ) ;
10744: LD_VAR 0 1
10748: PPUSH
10749: CALL_OW 141
10753: GO 10741
10755: POP
10756: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_ok ] ] , [ f_type , unit_human ] ] ) do
10757: LD_ADDR_VAR 0 1
10761: PUSH
10762: LD_INT 22
10764: PUSH
10765: LD_INT 2
10767: PUSH
10768: EMPTY
10769: LIST
10770: LIST
10771: PUSH
10772: LD_INT 3
10774: PUSH
10775: LD_INT 50
10777: PUSH
10778: EMPTY
10779: LIST
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: PUSH
10785: LD_INT 21
10787: PUSH
10788: LD_INT 1
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: LIST
10799: PPUSH
10800: CALL_OW 69
10804: PUSH
10805: FOR_IN
10806: IFFALSE 10822
// SetLives ( i , 251 ) ;
10808: LD_VAR 0 1
10812: PPUSH
10813: LD_INT 251
10815: PPUSH
10816: CALL_OW 234
10820: GO 10805
10822: POP
10823: POP
// InGameOn ;
10824: CALL_OW 8
// ComExit ( usCommander ) ;
10828: LD_EXP 27
10832: PPUSH
10833: CALL 51603 0 1
// AddComMoveXY ( usCommander , 81 , 143 ) ;
10837: LD_EXP 27
10841: PPUSH
10842: LD_INT 81
10844: PPUSH
10845: LD_INT 143
10847: PPUSH
10848: CALL_OW 171
// AddComTurnXY ( usCommander , 81 , 139 ) ;
10852: LD_EXP 27
10856: PPUSH
10857: LD_INT 81
10859: PPUSH
10860: LD_INT 139
10862: PPUSH
10863: CALL_OW 178
// PlaceSeeing ( 81 , 144 , 2 , - 10 ) ;
10867: LD_INT 81
10869: PPUSH
10870: LD_INT 144
10872: PPUSH
10873: LD_INT 2
10875: PPUSH
10876: LD_INT 10
10878: NEG
10879: PPUSH
10880: CALL_OW 330
// CenterNowOnUnits ( usCommander ) ;
10884: LD_EXP 27
10888: PPUSH
10889: CALL_OW 87
// wait ( 0 0$2 ) ;
10893: LD_INT 70
10895: PPUSH
10896: CALL_OW 67
// Say ( usCommander , DCa-Surrender-1 ) ;
10900: LD_EXP 27
10904: PPUSH
10905: LD_STRING DCa-Surrender-1
10907: PPUSH
10908: CALL_OW 88
// Say ( Heike , DH-Surrender-2 ) ;
10912: LD_EXP 12
10916: PPUSH
10917: LD_STRING DH-Surrender-2
10919: PPUSH
10920: CALL_OW 88
// if GetType ( IsInUnit ( Heike ) ) = unit_building then
10924: LD_EXP 12
10928: PPUSH
10929: CALL_OW 310
10933: PPUSH
10934: CALL_OW 247
10938: PUSH
10939: LD_INT 3
10941: EQUAL
10942: IFFALSE 10960
// begin ComExit ( Heike ) ;
10944: LD_EXP 12
10948: PPUSH
10949: CALL 51603 0 1
// wait ( 3 ) ;
10953: LD_INT 3
10955: PPUSH
10956: CALL_OW 67
// end ; ComMoveXY ( Heike , 82 , 133 ) ;
10960: LD_EXP 12
10964: PPUSH
10965: LD_INT 82
10967: PPUSH
10968: LD_INT 133
10970: PPUSH
10971: CALL_OW 111
// AddComTurnUnit ( Heike , usCommander ) ;
10975: LD_EXP 12
10979: PPUSH
10980: LD_EXP 27
10984: PPUSH
10985: CALL_OW 179
// wait ( 0 0$3 ) ;
10989: LD_INT 105
10991: PPUSH
10992: CALL_OW 67
// Say ( Heike , DH-Surrender-3 ) ;
10996: LD_EXP 12
11000: PPUSH
11001: LD_STRING DH-Surrender-3
11003: PPUSH
11004: CALL_OW 88
// Say ( Heike , DH-Surrender-4 ) ;
11008: LD_EXP 12
11012: PPUSH
11013: LD_STRING DH-Surrender-4
11015: PPUSH
11016: CALL_OW 88
// RemoveSeeing ( 81 , 144 , 2 ) ;
11020: LD_INT 81
11022: PPUSH
11023: LD_INT 144
11025: PPUSH
11026: LD_INT 2
11028: PPUSH
11029: CALL_OW 331
// ChangeSideFog ( 1 , 2 ) ;
11033: LD_INT 1
11035: PPUSH
11036: LD_INT 2
11038: PPUSH
11039: CALL_OW 343
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_inside ] ] ) do
11043: LD_ADDR_VAR 0 1
11047: PUSH
11048: LD_INT 22
11050: PUSH
11051: LD_INT 1
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: PUSH
11058: LD_INT 23
11060: PUSH
11061: LD_INT 1
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: LD_INT 54
11070: PUSH
11071: EMPTY
11072: LIST
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: LIST
11078: PPUSH
11079: CALL_OW 69
11083: PUSH
11084: FOR_IN
11085: IFFALSE 11098
// ComExit ( i ) ;
11087: LD_VAR 0 1
11091: PPUSH
11092: CALL 51603 0 1
11096: GO 11084
11098: POP
11099: POP
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
11100: LD_ADDR_VAR 0 3
11104: PUSH
11105: LD_INT 22
11107: PUSH
11108: LD_INT 1
11110: PUSH
11111: EMPTY
11112: LIST
11113: LIST
11114: PUSH
11115: LD_INT 25
11117: PUSH
11118: LD_INT 4
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PPUSH
11129: CALL_OW 69
11133: ST_TO_ADDR
// hurts := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
11134: LD_ADDR_VAR 0 2
11138: PUSH
11139: LD_INT 22
11141: PUSH
11142: LD_INT 1
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: PUSH
11149: LD_INT 3
11151: PUSH
11152: LD_INT 50
11154: PUSH
11155: EMPTY
11156: LIST
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PPUSH
11166: CALL_OW 69
11170: ST_TO_ADDR
// if sci and hurts then
11171: LD_VAR 0 3
11175: PUSH
11176: LD_VAR 0 2
11180: AND
11181: IFFALSE 11243
// begin for i := 1 to hurts do
11183: LD_ADDR_VAR 0 1
11187: PUSH
11188: DOUBLE
11189: LD_INT 1
11191: DEC
11192: ST_TO_ADDR
11193: LD_VAR 0 2
11197: PUSH
11198: FOR_TO
11199: IFFALSE 11241
// if i <= sci then
11201: LD_VAR 0 1
11205: PUSH
11206: LD_VAR 0 3
11210: LESSEQUAL
11211: IFFALSE 11239
// AddComHeal ( sci [ i ] , hurts [ i ] ) ;
11213: LD_VAR 0 3
11217: PUSH
11218: LD_VAR 0 1
11222: ARRAY
11223: PPUSH
11224: LD_VAR 0 2
11228: PUSH
11229: LD_VAR 0 1
11233: ARRAY
11234: PPUSH
11235: CALL_OW 188
11239: GO 11198
11241: POP
11242: POP
// end ; if IsOk ( Givi ) then
11243: LD_EXP 13
11247: PPUSH
11248: CALL_OW 302
11252: IFFALSE 11268
// Say ( Givi , DG-Surrender-5 ) else
11254: LD_EXP 13
11258: PPUSH
11259: LD_STRING DG-Surrender-5
11261: PPUSH
11262: CALL_OW 88
11266: GO 11280
// Say ( Heike , DH-Surrender-a-5 ) ;
11268: LD_EXP 12
11272: PPUSH
11273: LD_STRING DH-Surrender-a-5
11275: PPUSH
11276: CALL_OW 88
// Say ( usCommander , DCa-Surrender-6 ) ;
11280: LD_EXP 27
11284: PPUSH
11285: LD_STRING DCa-Surrender-6
11287: PPUSH
11288: CALL_OW 88
// Say ( usCommander , DCa-Surrender-7 ) ;
11292: LD_EXP 27
11296: PPUSH
11297: LD_STRING DCa-Surrender-7
11299: PPUSH
11300: CALL_OW 88
// if IsOk ( Givi ) then
11304: LD_EXP 13
11308: PPUSH
11309: CALL_OW 302
11313: IFFALSE 11329
// Say ( Givi , DG-Surrender-8 ) else
11315: LD_EXP 13
11319: PPUSH
11320: LD_STRING DG-Surrender-8
11322: PPUSH
11323: CALL_OW 88
11327: GO 11341
// Say ( Heike , DH-Surrender-a-8 ) ;
11329: LD_EXP 12
11333: PPUSH
11334: LD_STRING DH-Surrender-a-8
11336: PPUSH
11337: CALL_OW 88
// Say ( usCommander , DCa-Surrender-9 ) ;
11341: LD_EXP 27
11345: PPUSH
11346: LD_STRING DCa-Surrender-9
11348: PPUSH
11349: CALL_OW 88
// Say ( Heike , DH-Surrender-10 ) ;
11353: LD_EXP 12
11357: PPUSH
11358: LD_STRING DH-Surrender-10
11360: PPUSH
11361: CALL_OW 88
// Say ( usCommander , DCa-Surrender-11 ) ;
11365: LD_EXP 27
11369: PPUSH
11370: LD_STRING DCa-Surrender-11
11372: PPUSH
11373: CALL_OW 88
// Say ( Heike , DH-Surrender-12 ) ;
11377: LD_EXP 12
11381: PPUSH
11382: LD_STRING DH-Surrender-12
11384: PPUSH
11385: CALL_OW 88
// Say ( usCommander , DCa-Surrender-13 ) ;
11389: LD_EXP 27
11393: PPUSH
11394: LD_STRING DCa-Surrender-13
11396: PPUSH
11397: CALL_OW 88
// Say ( usCommander , DCa-Surrender-14 ) ;
11401: LD_EXP 27
11405: PPUSH
11406: LD_STRING DCa-Surrender-14
11408: PPUSH
11409: CALL_OW 88
// Say ( usCommander , DCa-Surrender-15 ) ;
11413: LD_EXP 27
11417: PPUSH
11418: LD_STRING DCa-Surrender-15
11420: PPUSH
11421: CALL_OW 88
// Say ( usCommander , DCa-Surrender-16 ) ;
11425: LD_EXP 27
11429: PPUSH
11430: LD_STRING DCa-Surrender-16
11432: PPUSH
11433: CALL_OW 88
// Say ( Kaia , DK-Surrender-17 ) ;
11437: LD_EXP 17
11441: PPUSH
11442: LD_STRING DK-Surrender-17
11444: PPUSH
11445: CALL_OW 88
// Say ( Olaf , DO-Surrender-18 ) ;
11449: LD_EXP 21
11453: PPUSH
11454: LD_STRING DO-Surrender-18
11456: PPUSH
11457: CALL_OW 88
// Say ( Olaf , DO-Surrender-19 ) ;
11461: LD_EXP 21
11465: PPUSH
11466: LD_STRING DO-Surrender-19
11468: PPUSH
11469: CALL_OW 88
// Say ( Kurt , DKs-Surrender-20 ) ;
11473: LD_EXP 22
11477: PPUSH
11478: LD_STRING DKs-Surrender-20
11480: PPUSH
11481: CALL_OW 88
// Say ( Kurt , DKs-Surrender-21 ) ;
11485: LD_EXP 22
11489: PPUSH
11490: LD_STRING DKs-Surrender-21
11492: PPUSH
11493: CALL_OW 88
// Say ( Markov , DMar-Surrender-22 ) ;
11497: LD_EXP 19
11501: PPUSH
11502: LD_STRING DMar-Surrender-22
11504: PPUSH
11505: CALL_OW 88
// Say ( Markov , DMar-Surrender-23 ) ;
11509: LD_EXP 19
11513: PPUSH
11514: LD_STRING DMar-Surrender-23
11516: PPUSH
11517: CALL_OW 88
// Say ( Sophia , DS-Surrender-24 ) ;
11521: LD_EXP 18
11525: PPUSH
11526: LD_STRING DS-Surrender-24
11528: PPUSH
11529: CALL_OW 88
// Say ( Aviradze , DA-Surrender-25 ) ;
11533: LD_EXP 23
11537: PPUSH
11538: LD_STRING DA-Surrender-25
11540: PPUSH
11541: CALL_OW 88
// Say ( Ibrahim , DI-Surrender-26 ) ;
11545: LD_EXP 15
11549: PPUSH
11550: LD_STRING DI-Surrender-26
11552: PPUSH
11553: CALL_OW 88
// Say ( Kamil , DKam-Surrender-27 ) ;
11557: LD_EXP 16
11561: PPUSH
11562: LD_STRING DKam-Surrender-27
11564: PPUSH
11565: CALL_OW 88
// if IsOk ( Givi ) then
11569: LD_EXP 13
11573: PPUSH
11574: CALL_OW 302
11578: IFFALSE 11618
// begin Say ( Givi , DG-Surrender-28 ) ;
11580: LD_EXP 13
11584: PPUSH
11585: LD_STRING DG-Surrender-28
11587: PPUSH
11588: CALL_OW 88
// Say ( Givi , DG-Surrender-29 ) ;
11592: LD_EXP 13
11596: PPUSH
11597: LD_STRING DG-Surrender-29
11599: PPUSH
11600: CALL_OW 88
// Say ( Givi , DG-Surrender-30 ) ;
11604: LD_EXP 13
11608: PPUSH
11609: LD_STRING DG-Surrender-30
11611: PPUSH
11612: CALL_OW 88
// end else
11616: GO 11654
// begin Say ( Heike , DH-Surrender-a-28 ) ;
11618: LD_EXP 12
11622: PPUSH
11623: LD_STRING DH-Surrender-a-28
11625: PPUSH
11626: CALL_OW 88
// Say ( Heike , DH-Surrender-a-29 ) ;
11630: LD_EXP 12
11634: PPUSH
11635: LD_STRING DH-Surrender-a-29
11637: PPUSH
11638: CALL_OW 88
// Say ( Heike , DH-Surrender-a-30 ) ;
11642: LD_EXP 12
11646: PPUSH
11647: LD_STRING DH-Surrender-a-30
11649: PPUSH
11650: CALL_OW 88
// end ; PrepareRussianFirstWaveAttack ;
11654: CALL 13304 0 0
// AgressiveMove ( FilterAllUnits ( [ f_side , 3 ] ) , [ [ 176 , 123 ] ] ) ;
11658: LD_INT 22
11660: PUSH
11661: LD_INT 3
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PPUSH
11668: CALL_OW 69
11672: PPUSH
11673: LD_INT 176
11675: PUSH
11676: LD_INT 123
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: PUSH
11683: EMPTY
11684: LIST
11685: PPUSH
11686: CALL 53610 0 2
// if not IsEnvironment ( 190 , 150 ) then
11690: LD_INT 190
11692: PPUSH
11693: LD_INT 150
11695: PPUSH
11696: CALL_OW 351
11700: NOT
11701: IFFALSE 11720
// PlaceSeeing ( 190 , 150 , 2 , - 8 ) ;
11703: LD_INT 190
11705: PPUSH
11706: LD_INT 150
11708: PPUSH
11709: LD_INT 2
11711: PPUSH
11712: LD_INT 8
11714: NEG
11715: PPUSH
11716: CALL_OW 330
// CenterOnXY ( 193 , 150 ) ;
11720: LD_INT 193
11722: PPUSH
11723: LD_INT 150
11725: PPUSH
11726: CALL_OW 84
// if IsOk ( Markov ) then
11730: LD_EXP 19
11734: PPUSH
11735: CALL_OW 302
11739: IFFALSE 11755
// Say ( Markov , DMar-Surrender-31 ) else
11741: LD_EXP 19
11745: PPUSH
11746: LD_STRING DMar-Surrender-31
11748: PPUSH
11749: CALL_OW 88
11753: GO 11812
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Surrender-a-31 ) then
11755: LD_EXP 24
11759: PPUSH
11760: LD_INT 26
11762: PUSH
11763: LD_INT 1
11765: PUSH
11766: EMPTY
11767: LIST
11768: LIST
11769: PPUSH
11770: CALL_OW 72
11774: PPUSH
11775: LD_STRING DArm-Surrender-a-31
11777: PPUSH
11778: CALL 242 0 2
11782: NOT
11783: IFFALSE 11812
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Surrender-a-31 ) ;
11785: LD_EXP 24
11789: PPUSH
11790: LD_INT 26
11792: PUSH
11793: LD_INT 2
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: PPUSH
11800: CALL_OW 72
11804: PPUSH
11805: LD_STRING DArf-Surrender-a-31
11807: PPUSH
11808: CALL 242 0 2
// Say ( Heike , DH-Surrender-32 ) ;
11812: LD_EXP 12
11816: PPUSH
11817: LD_STRING DH-Surrender-32
11819: PPUSH
11820: CALL_OW 88
// InGameOff ;
11824: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
11828: LD_STRING M2
11830: PPUSH
11831: CALL_OW 337
// wait ( 0 0$20 ) ;
11835: LD_INT 700
11837: PPUSH
11838: CALL_OW 67
// PrepareRussianLastWaveAttack ;
11842: CALL 13666 0 0
// russianAttack := true ;
11846: LD_ADDR_EXP 8
11850: PUSH
11851: LD_INT 1
11853: ST_TO_ADDR
// RemoveSeeing ( 190 , 150 , 2 ) ;
11854: LD_INT 190
11856: PPUSH
11857: LD_INT 150
11859: PPUSH
11860: LD_INT 2
11862: PPUSH
11863: CALL_OW 331
// end ;
11867: PPOPN 3
11869: END
// every 0 0$3 trigger seeHeavyGun and not InBattle ( 2 ) and IsOk ( Heike ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) and ( IsOk ( Markov ) or UnitFilter ( heikeSecondSquad , [ f_ok ] ) ) do
11870: LD_EXP 11
11874: PUSH
11875: LD_INT 2
11877: PPUSH
11878: CALL_OW 463
11882: NOT
11883: AND
11884: PUSH
11885: LD_EXP 12
11889: PPUSH
11890: CALL_OW 302
11894: AND
11895: PUSH
11896: LD_INT 22
11898: PUSH
11899: LD_INT 2
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PUSH
11906: LD_INT 30
11908: PUSH
11909: LD_INT 3
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: PPUSH
11920: CALL_OW 69
11924: AND
11925: PUSH
11926: LD_EXP 19
11930: PPUSH
11931: CALL_OW 302
11935: PUSH
11936: LD_EXP 24
11940: PPUSH
11941: LD_INT 50
11943: PUSH
11944: EMPTY
11945: LIST
11946: PPUSH
11947: CALL_OW 72
11951: OR
11952: AND
11953: IFFALSE 12181
11955: GO 11957
11957: DISABLE
// begin DialogueOn ;
11958: CALL_OW 6
// Say ( Heike , DH-Heavy-1 ) ;
11962: LD_EXP 12
11966: PPUSH
11967: LD_STRING DH-Heavy-1
11969: PPUSH
11970: CALL_OW 88
// if IsOk ( Markov ) then
11974: LD_EXP 19
11978: PPUSH
11979: CALL_OW 302
11983: IFFALSE 12108
// begin Say ( Markov , DMar-Heavy-2 ) ;
11985: LD_EXP 19
11989: PPUSH
11990: LD_STRING DMar-Heavy-2
11992: PPUSH
11993: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
11997: LD_INT 22
11999: PUSH
12000: LD_INT 2
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: PUSH
12007: LD_INT 30
12009: PUSH
12010: LD_INT 3
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PPUSH
12021: CALL_OW 69
12025: PUSH
12026: LD_INT 1
12028: ARRAY
12029: PPUSH
12030: CALL_OW 87
// Say ( Markov , DMar-Heavy-3 ) ;
12034: LD_EXP 19
12038: PPUSH
12039: LD_STRING DMar-Heavy-3
12041: PPUSH
12042: CALL_OW 88
// Say ( Markov , DMar-Heavy-4 ) ;
12046: LD_EXP 19
12050: PPUSH
12051: LD_STRING DMar-Heavy-4
12053: PPUSH
12054: CALL_OW 88
// Say ( Markov , DMar-Heavy-5 ) ;
12058: LD_EXP 19
12062: PPUSH
12063: LD_STRING DMar-Heavy-5
12065: PPUSH
12066: CALL_OW 88
// Say ( Markov , DMar-Heavy-6 ) ;
12070: LD_EXP 19
12074: PPUSH
12075: LD_STRING DMar-Heavy-6
12077: PPUSH
12078: CALL_OW 88
// Say ( Heike , DH-Heavy-7 ) ;
12082: LD_EXP 12
12086: PPUSH
12087: LD_STRING DH-Heavy-7
12089: PPUSH
12090: CALL_OW 88
// Say ( Heike , DH-Heavy-8 ) ;
12094: LD_EXP 12
12098: PPUSH
12099: LD_STRING DH-Heavy-8
12101: PPUSH
12102: CALL_OW 88
// end else
12106: GO 12165
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Heavy-a-2 ) then
12108: LD_EXP 24
12112: PPUSH
12113: LD_INT 26
12115: PUSH
12116: LD_INT 1
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: PPUSH
12123: CALL_OW 72
12127: PPUSH
12128: LD_STRING DArm-Heavy-a-2
12130: PPUSH
12131: CALL 242 0 2
12135: NOT
12136: IFFALSE 12165
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Heavy-a-2 ) ;
12138: LD_EXP 24
12142: PPUSH
12143: LD_INT 26
12145: PUSH
12146: LD_INT 2
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PPUSH
12153: CALL_OW 72
12157: PPUSH
12158: LD_STRING DArf-Heavy-a-2
12160: PPUSH
12161: CALL 242 0 2
// end ; Say ( Heike , DH-Heavy-9 ) ;
12165: LD_EXP 12
12169: PPUSH
12170: LD_STRING DH-Heavy-9
12172: PPUSH
12173: CALL_OW 88
// DialogueOff ;
12177: CALL_OW 7
// end ;
12181: END
// every 0 0$3 trigger seeRemoteVehicle do
12182: LD_EXP 10
12186: IFFALSE 12410
12188: GO 12190
12190: DISABLE
// begin DialogueOn ;
12191: CALL_OW 6
// Say ( Heike , DH-USRC-1 ) ;
12195: LD_EXP 12
12199: PPUSH
12200: LD_STRING DH-USRC-1
12202: PPUSH
12203: CALL_OW 88
// if IsOk ( Markov ) then
12207: LD_EXP 19
12211: PPUSH
12212: CALL_OW 302
12216: IFFALSE 12232
// Say ( Markov , DMar-USRC-2 ) else
12218: LD_EXP 19
12222: PPUSH
12223: LD_STRING DMar-USRC-2
12225: PPUSH
12226: CALL_OW 88
12230: GO 12289
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-USRC-a-2 ) then
12232: LD_EXP 24
12236: PPUSH
12237: LD_INT 26
12239: PUSH
12240: LD_INT 1
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: PPUSH
12247: CALL_OW 72
12251: PPUSH
12252: LD_STRING DArm-USRC-a-2
12254: PPUSH
12255: CALL 242 0 2
12259: NOT
12260: IFFALSE 12289
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-USRC-a-2 ) ;
12262: LD_EXP 24
12266: PPUSH
12267: LD_INT 26
12269: PUSH
12270: LD_INT 2
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PPUSH
12277: CALL_OW 72
12281: PPUSH
12282: LD_STRING DArf-USRC-a-2
12284: PPUSH
12285: CALL 242 0 2
// DialogueOff ;
12289: CALL_OW 7
// wait ( 0 0$10 ) ;
12293: LD_INT 350
12295: PPUSH
12296: CALL_OW 67
// Say ( Heike , DH-USRC-3 ) ;
12300: LD_EXP 12
12304: PPUSH
12305: LD_STRING DH-USRC-3
12307: PPUSH
12308: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
12312: LD_INT 35
12314: PPUSH
12315: CALL_OW 67
// until See ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
12319: LD_INT 2
12321: PPUSH
12322: LD_INT 22
12324: PUSH
12325: LD_INT 1
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PUSH
12332: LD_INT 30
12334: PUSH
12335: LD_INT 36
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PPUSH
12346: CALL_OW 69
12350: PUSH
12351: LD_INT 1
12353: ARRAY
12354: PPUSH
12355: CALL_OW 292
12359: IFFALSE 12312
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
12361: LD_INT 22
12363: PUSH
12364: LD_INT 1
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: PUSH
12371: LD_INT 30
12373: PUSH
12374: LD_INT 36
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: PPUSH
12385: CALL_OW 69
12389: PUSH
12390: LD_INT 1
12392: ARRAY
12393: PPUSH
12394: CALL_OW 87
// Say ( Heike , DH-USRCFound-1 ) ;
12398: LD_EXP 12
12402: PPUSH
12403: LD_STRING DH-USRCFound-1
12405: PPUSH
12406: CALL_OW 88
// end ;
12410: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
12411: LD_EXP 17
12415: PPUSH
12416: CALL_OW 256
12420: PUSH
12421: LD_INT 3
12423: LESS
12424: IFFALSE 12461
12426: GO 12428
12428: DISABLE
// begin DialogueOn ;
12429: CALL_OW 6
// ForceSay ( Kaia , DK-Dead-1 ) ;
12433: LD_EXP 17
12437: PPUSH
12438: LD_STRING DK-Dead-1
12440: PPUSH
12441: CALL_OW 91
// ForceSay ( Kaia , DK-Dead-2 ) ;
12445: LD_EXP 17
12449: PPUSH
12450: LD_STRING DK-Dead-2
12452: PPUSH
12453: CALL_OW 91
// DialogueOff ;
12457: CALL_OW 7
// end ;
12461: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , ar_rocket_launcher ] ] ) do
12462: LD_INT 22
12464: PUSH
12465: LD_INT 2
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: PUSH
12472: LD_INT 21
12474: PUSH
12475: LD_INT 28
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: PPUSH
12486: CALL_OW 69
12490: IFFALSE 12503
12492: GO 12494
12494: DISABLE
// hasRockets := true ;
12495: LD_ADDR_EXP 9
12499: PUSH
12500: LD_INT 1
12502: ST_TO_ADDR
12503: END
// every 0 0$1 trigger russianAttack and not FilterAllUnits ( [ f_side , 3 ] ) do
12504: LD_EXP 8
12508: PUSH
12509: LD_INT 22
12511: PUSH
12512: LD_INT 3
12514: PUSH
12515: EMPTY
12516: LIST
12517: LIST
12518: PPUSH
12519: CALL_OW 69
12523: NOT
12524: AND
12525: IFFALSE 13135
12527: GO 12529
12529: DISABLE
// begin DialogueOn ;
12530: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
12534: LD_EXP 12
12538: PPUSH
12539: CALL_OW 87
// Say ( Heike , DH-End-1 ) ;
12543: LD_EXP 12
12547: PPUSH
12548: LD_STRING DH-End-1
12550: PPUSH
12551: CALL_OW 88
// SayRadio ( Shariff , DShar-End-2 ) ;
12555: LD_EXP 20
12559: PPUSH
12560: LD_STRING DShar-End-2
12562: PPUSH
12563: CALL_OW 94
// Say ( Kaia , DK-End-3 ) ;
12567: LD_EXP 17
12571: PPUSH
12572: LD_STRING DK-End-3
12574: PPUSH
12575: CALL_OW 88
// Say ( Heike , DH-End-4 ) ;
12579: LD_EXP 12
12583: PPUSH
12584: LD_STRING DH-End-4
12586: PPUSH
12587: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
12591: LD_EXP 20
12595: PPUSH
12596: LD_STRING DShar-End-5
12598: PPUSH
12599: CALL_OW 94
// if IsOk ( Markov ) then
12603: LD_EXP 19
12607: PPUSH
12608: CALL_OW 302
12612: IFFALSE 12626
// Say ( Kaia , DK-End-6 ) ;
12614: LD_EXP 17
12618: PPUSH
12619: LD_STRING DK-End-6
12621: PPUSH
12622: CALL_OW 88
// Say ( Kaia , DK-End-7 ) ;
12626: LD_EXP 17
12630: PPUSH
12631: LD_STRING DK-End-7
12633: PPUSH
12634: CALL_OW 88
// if IsOk ( Kaia ) then
12638: LD_EXP 17
12642: PPUSH
12643: CALL_OW 302
12647: IFFALSE 12685
// begin Say ( Givi , DG-End-8 ) ;
12649: LD_EXP 13
12653: PPUSH
12654: LD_STRING DG-End-8
12656: PPUSH
12657: CALL_OW 88
// Say ( Givi , DG-End-9 ) ;
12661: LD_EXP 13
12665: PPUSH
12666: LD_STRING DG-End-9
12668: PPUSH
12669: CALL_OW 88
// Say ( Heike , DH-End-10 ) ;
12673: LD_EXP 12
12677: PPUSH
12678: LD_STRING DH-End-10
12680: PPUSH
12681: CALL_OW 88
// end ; Say ( Heike , DH-End-11 ) ;
12685: LD_EXP 12
12689: PPUSH
12690: LD_STRING DH-End-11
12692: PPUSH
12693: CALL_OW 88
// if GetTech ( tech_MatDet , 2 ) = state_researched then
12697: LD_INT 7
12699: PPUSH
12700: LD_INT 2
12702: PPUSH
12703: CALL_OW 321
12707: PUSH
12708: LD_INT 2
12710: EQUAL
12711: IFFALSE 12725
// AddMedal ( med1 , 1 ) else
12713: LD_STRING med1
12715: PPUSH
12716: LD_INT 1
12718: PPUSH
12719: CALL_OW 101
12723: GO 12736
// AddMedal ( med1 , - 1 ) ;
12725: LD_STRING med1
12727: PPUSH
12728: LD_INT 1
12730: NEG
12731: PPUSH
12732: CALL_OW 101
// if hasRockets then
12736: LD_EXP 9
12740: IFFALSE 12754
// AddMedal ( med2 , 1 ) else
12742: LD_STRING med2
12744: PPUSH
12745: LD_INT 1
12747: PPUSH
12748: CALL_OW 101
12752: GO 12765
// AddMedal ( med2 , - 1 ) ;
12754: LD_STRING med2
12756: PPUSH
12757: LD_INT 1
12759: NEG
12760: PPUSH
12761: CALL_OW 101
// if tick < [ 50 50$00 , 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
12765: LD_OWVAR 1
12769: PUSH
12770: LD_INT 105000
12772: PUSH
12773: LD_INT 94500
12775: PUSH
12776: LD_INT 84000
12778: PUSH
12779: LD_INT 73500
12781: PUSH
12782: EMPTY
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: PUSH
12788: LD_OWVAR 67
12792: ARRAY
12793: LESS
12794: IFFALSE 12808
// AddMedal ( med3 , 1 ) else
12796: LD_STRING med3
12798: PPUSH
12799: LD_INT 1
12801: PPUSH
12802: CALL_OW 101
12806: GO 12819
// AddMedal ( med3 , - 1 ) ;
12808: LD_STRING med3
12810: PPUSH
12811: LD_INT 1
12813: NEG
12814: PPUSH
12815: CALL_OW 101
// GiveMedals ( MAIN ) ;
12819: LD_STRING MAIN
12821: PPUSH
12822: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
12826: LD_INT 22
12828: PUSH
12829: LD_INT 2
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: PUSH
12836: LD_INT 23
12838: PUSH
12839: LD_INT 2
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PUSH
12846: LD_INT 21
12848: PUSH
12849: LD_INT 1
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: LIST
12860: PPUSH
12861: CALL_OW 69
12865: PPUSH
12866: CALL_OW 43
// SaveCharacters ( usCommander , 07_UsCommander ) ;
12870: LD_EXP 27
12874: PPUSH
12875: LD_STRING 07_UsCommander
12877: PPUSH
12878: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff usCommander , 07_Americans ) ;
12882: LD_INT 22
12884: PUSH
12885: LD_INT 1
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: PUSH
12892: LD_INT 23
12894: PUSH
12895: LD_INT 1
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: PUSH
12902: LD_INT 21
12904: PUSH
12905: LD_INT 1
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: LIST
12916: PPUSH
12917: CALL_OW 69
12921: PUSH
12922: LD_EXP 27
12926: DIFF
12927: PPUSH
12928: LD_STRING 07_Americans
12930: PPUSH
12931: CALL_OW 38
// SaveCharacters ( Heike , 07_Heike ) ;
12935: LD_EXP 12
12939: PPUSH
12940: LD_STRING 07_Heike
12942: PPUSH
12943: CALL_OW 38
// if Aviradze then
12947: LD_EXP 23
12951: IFFALSE 12965
// SaveCharacters ( Aviradze , 07_Aviradze ) ;
12953: LD_EXP 23
12957: PPUSH
12958: LD_STRING 07_Aviradze
12960: PPUSH
12961: CALL_OW 38
// if Ibrahim then
12965: LD_EXP 15
12969: IFFALSE 12983
// SaveCharacters ( Ibrahim , 07_Ibrahim ) ;
12971: LD_EXP 15
12975: PPUSH
12976: LD_STRING 07_Ibrahim
12978: PPUSH
12979: CALL_OW 38
// if Kamil then
12983: LD_EXP 16
12987: IFFALSE 13001
// SaveCharacters ( Kamil , 07_Kamil ) ;
12989: LD_EXP 16
12993: PPUSH
12994: LD_STRING 07_Kamil
12996: PPUSH
12997: CALL_OW 38
// if Sophia then
13001: LD_EXP 18
13005: IFFALSE 13019
// SaveCharacters ( Sophia , 07_Sophia ) ;
13007: LD_EXP 18
13011: PPUSH
13012: LD_STRING 07_Sophia
13014: PPUSH
13015: CALL_OW 38
// if Kaia then
13019: LD_EXP 17
13023: IFFALSE 13037
// SaveCharacters ( Kaia , 07_Kaia ) ;
13025: LD_EXP 17
13029: PPUSH
13030: LD_STRING 07_Kaia
13032: PPUSH
13033: CALL_OW 38
// if Givi then
13037: LD_EXP 13
13041: IFFALSE 13055
// SaveCharacters ( Givi , 07_Givi ) ;
13043: LD_EXP 13
13047: PPUSH
13048: LD_STRING 07_Givi
13050: PPUSH
13051: CALL_OW 38
// if Mike then
13055: LD_EXP 14
13059: IFFALSE 13073
// SaveCharacters ( Mike , 07_Mike ) ;
13061: LD_EXP 14
13065: PPUSH
13066: LD_STRING 07_Mike
13068: PPUSH
13069: CALL_OW 38
// if Markov then
13073: LD_EXP 19
13077: IFFALSE 13091
// SaveCharacters ( Markov , 07_Markov ) ;
13079: LD_EXP 19
13083: PPUSH
13084: LD_STRING 07_Markov
13086: PPUSH
13087: CALL_OW 38
// if Kurt then
13091: LD_EXP 22
13095: IFFALSE 13109
// SaveCharacters ( Kurt , 07_Kurt ) ;
13097: LD_EXP 22
13101: PPUSH
13102: LD_STRING 07_Kurt
13104: PPUSH
13105: CALL_OW 38
// if heikeSecondSquad then
13109: LD_EXP 24
13113: IFFALSE 13127
// SaveCharacters ( heikeSecondSquad , 07_others ) ;
13115: LD_EXP 24
13119: PPUSH
13120: LD_STRING 07_others
13122: PPUSH
13123: CALL_OW 38
// YouWin ;
13127: CALL_OW 103
// DialogueOff ;
13131: CALL_OW 7
// end ; end_of_file
13135: END
// every 0 0$40 + 0 0$40 trigger GetResourceArea ( cratesRiverArea , mat_cans ) < [ 500 , 450 , 400 , 380 ] [ Difficulty ] do
13136: LD_INT 7
13138: PPUSH
13139: LD_INT 1
13141: PPUSH
13142: CALL_OW 287
13146: PUSH
13147: LD_INT 500
13149: PUSH
13150: LD_INT 450
13152: PUSH
13153: LD_INT 400
13155: PUSH
13156: LD_INT 380
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: PUSH
13165: LD_OWVAR 67
13169: ARRAY
13170: LESS
13171: IFFALSE 13198
13173: GO 13175
13175: DISABLE
// begin enable ;
13176: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesRiverArea , true ) ;
13177: LD_INT 1
13179: PPUSH
13180: LD_INT 5
13182: PPUSH
13183: CALL_OW 12
13187: PPUSH
13188: LD_INT 7
13190: PPUSH
13191: LD_INT 1
13193: PPUSH
13194: CALL_OW 55
// end ;
13198: END
// every 2 2$00 trigger GetResourceArea ( cratesForestArea , mat_cans ) < [ 300 , 250 , 200 , 180 ] [ Difficulty ] do
13199: LD_INT 8
13201: PPUSH
13202: LD_INT 1
13204: PPUSH
13205: CALL_OW 287
13209: PUSH
13210: LD_INT 300
13212: PUSH
13213: LD_INT 250
13215: PUSH
13216: LD_INT 200
13218: PUSH
13219: LD_INT 180
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: PUSH
13228: LD_OWVAR 67
13232: ARRAY
13233: LESS
13234: IFFALSE 13261
13236: GO 13238
13238: DISABLE
// begin enable ;
13239: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesForestArea , true ) ;
13240: LD_INT 1
13242: PPUSH
13243: LD_INT 5
13245: PPUSH
13246: CALL_OW 12
13250: PPUSH
13251: LD_INT 8
13253: PPUSH
13254: LD_INT 1
13256: PPUSH
13257: CALL_OW 55
// end ;
13261: END
// every 0 0$30 trigger tick < 4 4$10 do
13262: LD_OWVAR 1
13266: PUSH
13267: LD_INT 8750
13269: LESS
13270: IFFALSE 13303
13272: GO 13274
13274: DISABLE
// begin enable ;
13275: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 130 , 18 , 12 , true ) ;
13276: LD_INT 1
13278: PPUSH
13279: LD_INT 5
13281: PPUSH
13282: CALL_OW 12
13286: PPUSH
13287: LD_INT 130
13289: PPUSH
13290: LD_INT 18
13292: PPUSH
13293: LD_INT 12
13295: PPUSH
13296: LD_INT 1
13298: PPUSH
13299: CALL_OW 56
// end ; end_of_file
13303: END
// export function PrepareRussianFirstWaveAttack ; var i , tmp , un , veh ; begin
13304: LD_INT 0
13306: PPUSH
13307: PPUSH
13308: PPUSH
13309: PPUSH
13310: PPUSH
// uc_side := 3 ;
13311: LD_ADDR_OWVAR 20
13315: PUSH
13316: LD_INT 3
13318: ST_TO_ADDR
// uc_nation := 3 ;
13319: LD_ADDR_OWVAR 21
13323: PUSH
13324: LD_INT 3
13326: ST_TO_ADDR
// tmp := [ [ 184 , 144 , 5 ] , [ 191 , 147 , 5 ] , [ 202 , 151 , 4 ] , [ 210 , 152 , 4 ] ] ;
13327: LD_ADDR_VAR 0 3
13331: PUSH
13332: LD_INT 184
13334: PUSH
13335: LD_INT 144
13337: PUSH
13338: LD_INT 5
13340: PUSH
13341: EMPTY
13342: LIST
13343: LIST
13344: LIST
13345: PUSH
13346: LD_INT 191
13348: PUSH
13349: LD_INT 147
13351: PUSH
13352: LD_INT 5
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: LIST
13359: PUSH
13360: LD_INT 202
13362: PUSH
13363: LD_INT 151
13365: PUSH
13366: LD_INT 4
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: LIST
13373: PUSH
13374: LD_INT 210
13376: PUSH
13377: LD_INT 152
13379: PUSH
13380: LD_INT 4
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: LIST
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: ST_TO_ADDR
// for i := 1 to 4 do
13394: LD_ADDR_VAR 0 2
13398: PUSH
13399: DOUBLE
13400: LD_INT 1
13402: DEC
13403: ST_TO_ADDR
13404: LD_INT 4
13406: PUSH
13407: FOR_TO
13408: IFFALSE 13577
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_gun ] [ i mod 3 + 1 ] , 40 ) ;
13410: LD_INT 24
13412: PPUSH
13413: LD_INT 1
13415: PPUSH
13416: LD_INT 1
13418: PPUSH
13419: LD_INT 43
13421: PUSH
13422: LD_INT 44
13424: PUSH
13425: LD_INT 46
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: LIST
13432: PUSH
13433: LD_VAR 0 2
13437: PUSH
13438: LD_INT 3
13440: MOD
13441: PUSH
13442: LD_INT 1
13444: PLUS
13445: ARRAY
13446: PPUSH
13447: LD_INT 40
13449: PPUSH
13450: CALL 19342 0 5
// veh := CreateVehicle ;
13454: LD_ADDR_VAR 0 5
13458: PUSH
13459: CALL_OW 45
13463: ST_TO_ADDR
// SetDir ( veh , tmp [ i ] [ 3 ] ) ;
13464: LD_VAR 0 5
13468: PPUSH
13469: LD_VAR 0 3
13473: PUSH
13474: LD_VAR 0 2
13478: ARRAY
13479: PUSH
13480: LD_INT 3
13482: ARRAY
13483: PPUSH
13484: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
13488: LD_VAR 0 5
13492: PPUSH
13493: LD_VAR 0 3
13497: PUSH
13498: LD_VAR 0 2
13502: ARRAY
13503: PUSH
13504: LD_INT 1
13506: ARRAY
13507: PPUSH
13508: LD_VAR 0 3
13512: PUSH
13513: LD_VAR 0 2
13517: ARRAY
13518: PUSH
13519: LD_INT 2
13521: ARRAY
13522: PPUSH
13523: LD_INT 0
13525: PPUSH
13526: CALL_OW 48
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
13530: LD_INT 0
13532: PPUSH
13533: LD_INT 6
13535: PUSH
13536: LD_INT 7
13538: PUSH
13539: LD_INT 8
13541: PUSH
13542: LD_INT 8
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: PUSH
13551: LD_OWVAR 67
13555: ARRAY
13556: PPUSH
13557: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
13561: CALL_OW 44
13565: PPUSH
13566: LD_VAR 0 5
13570: PPUSH
13571: CALL_OW 52
// end ;
13575: GO 13407
13577: POP
13578: POP
// for i := 1 to 4 do
13579: LD_ADDR_VAR 0 2
13583: PUSH
13584: DOUBLE
13585: LD_INT 1
13587: DEC
13588: ST_TO_ADDR
13589: LD_INT 4
13591: PUSH
13592: FOR_TO
13593: IFFALSE 13659
// begin PrepareSoldier ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
13595: LD_INT 0
13597: PPUSH
13598: LD_INT 6
13600: PUSH
13601: LD_INT 7
13603: PUSH
13604: LD_INT 8
13606: PUSH
13607: LD_INT 8
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: PUSH
13616: LD_OWVAR 67
13620: ARRAY
13621: PPUSH
13622: CALL_OW 381
// un := CreateHuman ;
13626: LD_ADDR_VAR 0 4
13630: PUSH
13631: CALL_OW 44
13635: ST_TO_ADDR
// PlaceUnitXYR ( un , 185 , 145 , 6 , false ) ;
13636: LD_VAR 0 4
13640: PPUSH
13641: LD_INT 185
13643: PPUSH
13644: LD_INT 145
13646: PPUSH
13647: LD_INT 6
13649: PPUSH
13650: LD_INT 0
13652: PPUSH
13653: CALL_OW 50
// end ;
13657: GO 13592
13659: POP
13660: POP
// end ;
13661: LD_VAR 0 1
13665: RET
// export function PrepareRussianLastWaveAttack ; var i , veh ; begin
13666: LD_INT 0
13668: PPUSH
13669: PPUSH
13670: PPUSH
// uc_side := 3 ;
13671: LD_ADDR_OWVAR 20
13675: PUSH
13676: LD_INT 3
13678: ST_TO_ADDR
// if Difficulty > 1 then
13679: LD_OWVAR 67
13683: PUSH
13684: LD_INT 1
13686: GREATER
13687: IFFALSE 13849
// begin uc_nation := 0 ;
13689: LD_ADDR_OWVAR 21
13693: PUSH
13694: LD_INT 0
13696: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty + 1 ] do
13697: LD_ADDR_VAR 0 2
13701: PUSH
13702: DOUBLE
13703: LD_INT 1
13705: DEC
13706: ST_TO_ADDR
13707: LD_INT 4
13709: PUSH
13710: LD_INT 5
13712: PUSH
13713: LD_INT 6
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: LIST
13720: PUSH
13721: LD_OWVAR 67
13725: PUSH
13726: LD_INT 1
13728: PLUS
13729: ARRAY
13730: PUSH
13731: FOR_TO
13732: IFFALSE 13847
// begin hc_class := class_apeman_soldier ;
13734: LD_ADDR_OWVAR 28
13738: PUSH
13739: LD_INT 15
13741: ST_TO_ADDR
// hc_gallery :=  ;
13742: LD_ADDR_OWVAR 33
13746: PUSH
13747: LD_STRING 
13749: ST_TO_ADDR
// hc_name := [ Treci , Ivan , Yaromir , Nadzieia , Krasna , Piaty ] [ rand ( 1 , 6 ) ] ;
13750: LD_ADDR_OWVAR 26
13754: PUSH
13755: LD_STRING Treci
13757: PUSH
13758: LD_STRING Ivan
13760: PUSH
13761: LD_STRING Yaromir
13763: PUSH
13764: LD_STRING Nadzieia
13766: PUSH
13767: LD_STRING Krasna
13769: PUSH
13770: LD_STRING Piaty
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: PUSH
13781: LD_INT 1
13783: PPUSH
13784: LD_INT 6
13786: PPUSH
13787: CALL_OW 12
13791: ARRAY
13792: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 0 , 0 ] ;
13793: LD_ADDR_OWVAR 31
13797: PUSH
13798: LD_INT 5
13800: PUSH
13801: LD_INT 0
13803: PUSH
13804: LD_INT 0
13806: PUSH
13807: LD_INT 0
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: ST_TO_ADDR
// hc_sex := sex_male ;
13816: LD_ADDR_OWVAR 27
13820: PUSH
13821: LD_INT 1
13823: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 178 , 148 , 6 , false ) ;
13824: CALL_OW 44
13828: PPUSH
13829: LD_INT 178
13831: PPUSH
13832: LD_INT 148
13834: PPUSH
13835: LD_INT 6
13837: PPUSH
13838: LD_INT 0
13840: PPUSH
13841: CALL_OW 50
// end ;
13845: GO 13731
13847: POP
13848: POP
// end ; for i := 1 to [ 4 , 6 , 7 , 9 ] [ Difficulty ] do
13849: LD_ADDR_VAR 0 2
13853: PUSH
13854: DOUBLE
13855: LD_INT 1
13857: DEC
13858: ST_TO_ADDR
13859: LD_INT 4
13861: PUSH
13862: LD_INT 6
13864: PUSH
13865: LD_INT 7
13867: PUSH
13868: LD_INT 9
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: PUSH
13877: LD_OWVAR 67
13881: ARRAY
13882: PUSH
13883: FOR_TO
13884: IFFALSE 14051
// begin uc_nation := 3 ;
13886: LD_ADDR_OWVAR 21
13890: PUSH
13891: LD_INT 3
13893: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gatling_gun , ru_gun ] [ i mod 3 + 1 ] , 44 ) ;
13894: LD_INT 22
13896: PPUSH
13897: LD_INT 1
13899: PPUSH
13900: LD_INT 1
13902: PPUSH
13903: LD_INT 45
13905: PUSH
13906: LD_INT 43
13908: PUSH
13909: LD_INT 44
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: LIST
13916: PUSH
13917: LD_VAR 0 2
13921: PUSH
13922: LD_INT 3
13924: MOD
13925: PUSH
13926: LD_INT 1
13928: PLUS
13929: ARRAY
13930: PPUSH
13931: LD_INT 44
13933: PPUSH
13934: CALL 19342 0 5
// veh := CreateVehicle ;
13938: LD_ADDR_VAR 0 3
13942: PUSH
13943: CALL_OW 45
13947: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
13948: LD_VAR 0 3
13952: PPUSH
13953: LD_INT 4
13955: PPUSH
13956: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
13960: LD_VAR 0 3
13964: PPUSH
13965: LD_INT 1
13967: PPUSH
13968: LD_INT 0
13970: PPUSH
13971: CALL_OW 49
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
13975: LD_INT 0
13977: PPUSH
13978: LD_INT 6
13980: PUSH
13981: LD_INT 7
13983: PUSH
13984: LD_INT 8
13986: PUSH
13987: LD_INT 8
13989: PUSH
13990: EMPTY
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: PUSH
13996: LD_OWVAR 67
14000: ARRAY
14001: PPUSH
14002: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
14006: CALL_OW 44
14010: PPUSH
14011: LD_VAR 0 3
14015: PPUSH
14016: CALL_OW 52
// AgressiveMove ( veh , [ [ 178 , 137 ] ] ) ;
14020: LD_VAR 0 3
14024: PPUSH
14025: LD_INT 178
14027: PUSH
14028: LD_INT 137
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: PUSH
14035: EMPTY
14036: LIST
14037: PPUSH
14038: CALL 53610 0 2
// wait ( 0 0$2 ) ;
14042: LD_INT 70
14044: PPUSH
14045: CALL_OW 67
// end ;
14049: GO 13883
14051: POP
14052: POP
// end ;
14053: LD_VAR 0 1
14057: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i , tmp ;
14058: LD_INT 22
14060: PUSH
14061: LD_INT 3
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: PUSH
14068: LD_INT 32
14070: PUSH
14071: LD_INT 1
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PPUSH
14082: CALL_OW 69
14086: IFFALSE 14174
14088: GO 14090
14090: DISABLE
14091: LD_INT 0
14093: PPUSH
14094: PPUSH
// begin enable ;
14095: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) ;
14096: LD_ADDR_VAR 0 2
14100: PUSH
14101: LD_INT 22
14103: PUSH
14104: LD_INT 3
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PUSH
14111: LD_INT 32
14113: PUSH
14114: LD_INT 1
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: PPUSH
14125: CALL_OW 69
14129: ST_TO_ADDR
// for i in tmp do
14130: LD_ADDR_VAR 0 1
14134: PUSH
14135: LD_VAR 0 2
14139: PUSH
14140: FOR_IN
14141: IFFALSE 14172
// if GetFuel ( i ) < 3 then
14143: LD_VAR 0 1
14147: PPUSH
14148: CALL_OW 261
14152: PUSH
14153: LD_INT 3
14155: LESS
14156: IFFALSE 14170
// SetFuel ( i , 3 ) ;
14158: LD_VAR 0 1
14162: PPUSH
14163: LD_INT 3
14165: PPUSH
14166: CALL_OW 240
14170: GO 14140
14172: POP
14173: POP
// end ;
14174: PPOPN 2
14176: END
// every 0 0$1 trigger russianAttack and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i , mech , tmp ;
14177: LD_EXP 8
14181: PUSH
14182: LD_INT 22
14184: PUSH
14185: LD_INT 3
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: PUSH
14192: LD_INT 21
14194: PUSH
14195: LD_INT 1
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: PPUSH
14206: CALL_OW 69
14210: AND
14211: IFFALSE 14475
14213: GO 14215
14215: DISABLE
14216: LD_INT 0
14218: PPUSH
14219: PPUSH
14220: PPUSH
// begin enable ;
14221: ENABLE
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] ] ) ;
14222: LD_ADDR_VAR 0 2
14226: PUSH
14227: LD_INT 22
14229: PUSH
14230: LD_INT 3
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: PUSH
14237: LD_INT 25
14239: PUSH
14240: LD_INT 3
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: PUSH
14247: LD_INT 3
14249: PUSH
14250: LD_INT 55
14252: PUSH
14253: EMPTY
14254: LIST
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: LIST
14264: PPUSH
14265: CALL_OW 69
14269: ST_TO_ADDR
// if mech then
14270: LD_VAR 0 2
14274: IFFALSE 14344
// for i in mech do
14276: LD_ADDR_VAR 0 1
14280: PUSH
14281: LD_VAR 0 2
14285: PUSH
14286: FOR_IN
14287: IFFALSE 14342
// begin if IsInArea ( i , escapeArea ) then
14289: LD_VAR 0 1
14293: PPUSH
14294: LD_INT 13
14296: PPUSH
14297: CALL_OW 308
14301: IFFALSE 14314
// RemoveUnit ( i ) else
14303: LD_VAR 0 1
14307: PPUSH
14308: CALL_OW 64
14312: GO 14340
// if IsOk ( i ) then
14314: LD_VAR 0 1
14318: PPUSH
14319: CALL_OW 302
14323: IFFALSE 14340
// ComMoveXY ( i , 196 , 155 ) ;
14325: LD_VAR 0 1
14329: PPUSH
14330: LD_INT 196
14332: PPUSH
14333: LD_INT 155
14335: PPUSH
14336: CALL_OW 111
// end ;
14340: GO 14286
14342: POP
14343: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_apeman_soldier ] , [ f_type , unit_vehicle ] ] , [ f_ok ] ] ) ;
14344: LD_ADDR_VAR 0 3
14348: PUSH
14349: LD_INT 22
14351: PUSH
14352: LD_INT 3
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: PUSH
14359: LD_INT 2
14361: PUSH
14362: LD_INT 25
14364: PUSH
14365: LD_INT 1
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: PUSH
14372: LD_INT 25
14374: PUSH
14375: LD_INT 15
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: PUSH
14382: LD_INT 21
14384: PUSH
14385: LD_INT 2
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: PUSH
14398: LD_INT 50
14400: PUSH
14401: EMPTY
14402: LIST
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: LIST
14408: PPUSH
14409: CALL_OW 69
14413: ST_TO_ADDR
// if tmp then
14414: LD_VAR 0 3
14418: IFFALSE 14475
// AgressiveMove ( tmp , [ [ 171 , 106 ] , [ 145 , 69 ] , [ 132 , 38 ] , [ 126 , 15 ] ] ) ;
14420: LD_VAR 0 3
14424: PPUSH
14425: LD_INT 171
14427: PUSH
14428: LD_INT 106
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: PUSH
14435: LD_INT 145
14437: PUSH
14438: LD_INT 69
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PUSH
14445: LD_INT 132
14447: PUSH
14448: LD_INT 38
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: LD_INT 126
14457: PUSH
14458: LD_INT 15
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: PPUSH
14471: CALL 53610 0 2
// end ; end_of_file
14475: PPOPN 3
14477: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
14478: LD_INT 0
14480: PPUSH
14481: PPUSH
// if exist_mode then
14482: LD_VAR 0 2
14486: IFFALSE 14511
// unit := CreateCharacter ( prefix & ident ) else
14488: LD_ADDR_VAR 0 5
14492: PUSH
14493: LD_VAR 0 3
14497: PUSH
14498: LD_VAR 0 1
14502: STR
14503: PPUSH
14504: CALL_OW 34
14508: ST_TO_ADDR
14509: GO 14526
// unit := NewCharacter ( ident ) ;
14511: LD_ADDR_VAR 0 5
14515: PUSH
14516: LD_VAR 0 1
14520: PPUSH
14521: CALL_OW 25
14525: ST_TO_ADDR
// result := unit ;
14526: LD_ADDR_VAR 0 4
14530: PUSH
14531: LD_VAR 0 5
14535: ST_TO_ADDR
// end ;
14536: LD_VAR 0 4
14540: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
14541: LD_INT 0
14543: PPUSH
14544: PPUSH
// if not side or not nation then
14545: LD_VAR 0 1
14549: NOT
14550: PUSH
14551: LD_VAR 0 2
14555: NOT
14556: OR
14557: IFFALSE 14561
// exit ;
14559: GO 15329
// case nation of nation_american :
14561: LD_VAR 0 2
14565: PUSH
14566: LD_INT 1
14568: DOUBLE
14569: EQUAL
14570: IFTRUE 14574
14572: GO 14788
14574: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
14575: LD_ADDR_VAR 0 4
14579: PUSH
14580: LD_INT 35
14582: PUSH
14583: LD_INT 45
14585: PUSH
14586: LD_INT 46
14588: PUSH
14589: LD_INT 47
14591: PUSH
14592: LD_INT 82
14594: PUSH
14595: LD_INT 83
14597: PUSH
14598: LD_INT 84
14600: PUSH
14601: LD_INT 85
14603: PUSH
14604: LD_INT 86
14606: PUSH
14607: LD_INT 1
14609: PUSH
14610: LD_INT 2
14612: PUSH
14613: LD_INT 6
14615: PUSH
14616: LD_INT 15
14618: PUSH
14619: LD_INT 16
14621: PUSH
14622: LD_INT 7
14624: PUSH
14625: LD_INT 12
14627: PUSH
14628: LD_INT 13
14630: PUSH
14631: LD_INT 10
14633: PUSH
14634: LD_INT 14
14636: PUSH
14637: LD_INT 20
14639: PUSH
14640: LD_INT 21
14642: PUSH
14643: LD_INT 22
14645: PUSH
14646: LD_INT 25
14648: PUSH
14649: LD_INT 32
14651: PUSH
14652: LD_INT 27
14654: PUSH
14655: LD_INT 36
14657: PUSH
14658: LD_INT 69
14660: PUSH
14661: LD_INT 39
14663: PUSH
14664: LD_INT 34
14666: PUSH
14667: LD_INT 40
14669: PUSH
14670: LD_INT 48
14672: PUSH
14673: LD_INT 49
14675: PUSH
14676: LD_INT 50
14678: PUSH
14679: LD_INT 51
14681: PUSH
14682: LD_INT 52
14684: PUSH
14685: LD_INT 53
14687: PUSH
14688: LD_INT 54
14690: PUSH
14691: LD_INT 55
14693: PUSH
14694: LD_INT 56
14696: PUSH
14697: LD_INT 57
14699: PUSH
14700: LD_INT 58
14702: PUSH
14703: LD_INT 59
14705: PUSH
14706: LD_INT 60
14708: PUSH
14709: LD_INT 61
14711: PUSH
14712: LD_INT 62
14714: PUSH
14715: LD_INT 80
14717: PUSH
14718: LD_INT 82
14720: PUSH
14721: LD_INT 83
14723: PUSH
14724: LD_INT 84
14726: PUSH
14727: LD_INT 85
14729: PUSH
14730: LD_INT 86
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: ST_TO_ADDR
14786: GO 15253
14788: LD_INT 2
14790: DOUBLE
14791: EQUAL
14792: IFTRUE 14796
14794: GO 15022
14796: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
14797: LD_ADDR_VAR 0 4
14801: PUSH
14802: LD_INT 35
14804: PUSH
14805: LD_INT 45
14807: PUSH
14808: LD_INT 46
14810: PUSH
14811: LD_INT 47
14813: PUSH
14814: LD_INT 82
14816: PUSH
14817: LD_INT 83
14819: PUSH
14820: LD_INT 84
14822: PUSH
14823: LD_INT 85
14825: PUSH
14826: LD_INT 87
14828: PUSH
14829: LD_INT 70
14831: PUSH
14832: LD_INT 1
14834: PUSH
14835: LD_INT 11
14837: PUSH
14838: LD_INT 3
14840: PUSH
14841: LD_INT 4
14843: PUSH
14844: LD_INT 5
14846: PUSH
14847: LD_INT 6
14849: PUSH
14850: LD_INT 15
14852: PUSH
14853: LD_INT 18
14855: PUSH
14856: LD_INT 7
14858: PUSH
14859: LD_INT 17
14861: PUSH
14862: LD_INT 8
14864: PUSH
14865: LD_INT 20
14867: PUSH
14868: LD_INT 21
14870: PUSH
14871: LD_INT 22
14873: PUSH
14874: LD_INT 72
14876: PUSH
14877: LD_INT 26
14879: PUSH
14880: LD_INT 69
14882: PUSH
14883: LD_INT 39
14885: PUSH
14886: LD_INT 40
14888: PUSH
14889: LD_INT 41
14891: PUSH
14892: LD_INT 42
14894: PUSH
14895: LD_INT 43
14897: PUSH
14898: LD_INT 48
14900: PUSH
14901: LD_INT 49
14903: PUSH
14904: LD_INT 50
14906: PUSH
14907: LD_INT 51
14909: PUSH
14910: LD_INT 52
14912: PUSH
14913: LD_INT 53
14915: PUSH
14916: LD_INT 54
14918: PUSH
14919: LD_INT 55
14921: PUSH
14922: LD_INT 56
14924: PUSH
14925: LD_INT 60
14927: PUSH
14928: LD_INT 61
14930: PUSH
14931: LD_INT 62
14933: PUSH
14934: LD_INT 66
14936: PUSH
14937: LD_INT 67
14939: PUSH
14940: LD_INT 68
14942: PUSH
14943: LD_INT 81
14945: PUSH
14946: LD_INT 82
14948: PUSH
14949: LD_INT 83
14951: PUSH
14952: LD_INT 84
14954: PUSH
14955: LD_INT 85
14957: PUSH
14958: LD_INT 87
14960: PUSH
14961: LD_INT 88
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: ST_TO_ADDR
15020: GO 15253
15022: LD_INT 3
15024: DOUBLE
15025: EQUAL
15026: IFTRUE 15030
15028: GO 15252
15030: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
15031: LD_ADDR_VAR 0 4
15035: PUSH
15036: LD_INT 46
15038: PUSH
15039: LD_INT 47
15041: PUSH
15042: LD_INT 1
15044: PUSH
15045: LD_INT 2
15047: PUSH
15048: LD_INT 82
15050: PUSH
15051: LD_INT 83
15053: PUSH
15054: LD_INT 84
15056: PUSH
15057: LD_INT 85
15059: PUSH
15060: LD_INT 86
15062: PUSH
15063: LD_INT 11
15065: PUSH
15066: LD_INT 9
15068: PUSH
15069: LD_INT 20
15071: PUSH
15072: LD_INT 19
15074: PUSH
15075: LD_INT 21
15077: PUSH
15078: LD_INT 24
15080: PUSH
15081: LD_INT 22
15083: PUSH
15084: LD_INT 25
15086: PUSH
15087: LD_INT 28
15089: PUSH
15090: LD_INT 29
15092: PUSH
15093: LD_INT 30
15095: PUSH
15096: LD_INT 31
15098: PUSH
15099: LD_INT 37
15101: PUSH
15102: LD_INT 38
15104: PUSH
15105: LD_INT 32
15107: PUSH
15108: LD_INT 27
15110: PUSH
15111: LD_INT 33
15113: PUSH
15114: LD_INT 69
15116: PUSH
15117: LD_INT 39
15119: PUSH
15120: LD_INT 34
15122: PUSH
15123: LD_INT 40
15125: PUSH
15126: LD_INT 71
15128: PUSH
15129: LD_INT 23
15131: PUSH
15132: LD_INT 44
15134: PUSH
15135: LD_INT 48
15137: PUSH
15138: LD_INT 49
15140: PUSH
15141: LD_INT 50
15143: PUSH
15144: LD_INT 51
15146: PUSH
15147: LD_INT 52
15149: PUSH
15150: LD_INT 53
15152: PUSH
15153: LD_INT 54
15155: PUSH
15156: LD_INT 55
15158: PUSH
15159: LD_INT 56
15161: PUSH
15162: LD_INT 57
15164: PUSH
15165: LD_INT 58
15167: PUSH
15168: LD_INT 59
15170: PUSH
15171: LD_INT 63
15173: PUSH
15174: LD_INT 64
15176: PUSH
15177: LD_INT 65
15179: PUSH
15180: LD_INT 82
15182: PUSH
15183: LD_INT 83
15185: PUSH
15186: LD_INT 84
15188: PUSH
15189: LD_INT 85
15191: PUSH
15192: LD_INT 86
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: ST_TO_ADDR
15250: GO 15253
15252: POP
// if state > - 1 and state < 3 then
15253: LD_VAR 0 3
15257: PUSH
15258: LD_INT 1
15260: NEG
15261: GREATER
15262: PUSH
15263: LD_VAR 0 3
15267: PUSH
15268: LD_INT 3
15270: LESS
15271: AND
15272: IFFALSE 15329
// for i in result do
15274: LD_ADDR_VAR 0 5
15278: PUSH
15279: LD_VAR 0 4
15283: PUSH
15284: FOR_IN
15285: IFFALSE 15327
// if GetTech ( i , side ) <> state then
15287: LD_VAR 0 5
15291: PPUSH
15292: LD_VAR 0 1
15296: PPUSH
15297: CALL_OW 321
15301: PUSH
15302: LD_VAR 0 3
15306: NONEQUAL
15307: IFFALSE 15325
// result := result diff i ;
15309: LD_ADDR_VAR 0 4
15313: PUSH
15314: LD_VAR 0 4
15318: PUSH
15319: LD_VAR 0 5
15323: DIFF
15324: ST_TO_ADDR
15325: GO 15284
15327: POP
15328: POP
// end ;
15329: LD_VAR 0 4
15333: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
15334: LD_INT 0
15336: PPUSH
15337: PPUSH
15338: PPUSH
// result := true ;
15339: LD_ADDR_VAR 0 3
15343: PUSH
15344: LD_INT 1
15346: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
15347: LD_ADDR_VAR 0 5
15351: PUSH
15352: LD_VAR 0 2
15356: PPUSH
15357: CALL_OW 480
15361: ST_TO_ADDR
// if not tmp then
15362: LD_VAR 0 5
15366: NOT
15367: IFFALSE 15371
// exit ;
15369: GO 15420
// for i in tmp do
15371: LD_ADDR_VAR 0 4
15375: PUSH
15376: LD_VAR 0 5
15380: PUSH
15381: FOR_IN
15382: IFFALSE 15418
// if GetTech ( i , side ) <> state_researched then
15384: LD_VAR 0 4
15388: PPUSH
15389: LD_VAR 0 1
15393: PPUSH
15394: CALL_OW 321
15398: PUSH
15399: LD_INT 2
15401: NONEQUAL
15402: IFFALSE 15416
// begin result := false ;
15404: LD_ADDR_VAR 0 3
15408: PUSH
15409: LD_INT 0
15411: ST_TO_ADDR
// exit ;
15412: POP
15413: POP
15414: GO 15420
// end ;
15416: GO 15381
15418: POP
15419: POP
// end ;
15420: LD_VAR 0 3
15424: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
15425: LD_INT 0
15427: PPUSH
15428: PPUSH
15429: PPUSH
15430: PPUSH
15431: PPUSH
15432: PPUSH
15433: PPUSH
15434: PPUSH
15435: PPUSH
15436: PPUSH
15437: PPUSH
15438: PPUSH
15439: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
15440: LD_VAR 0 1
15444: NOT
15445: PUSH
15446: LD_VAR 0 1
15450: PPUSH
15451: CALL_OW 257
15455: PUSH
15456: LD_INT 9
15458: NONEQUAL
15459: OR
15460: IFFALSE 15464
// exit ;
15462: GO 16037
// side := GetSide ( unit ) ;
15464: LD_ADDR_VAR 0 9
15468: PUSH
15469: LD_VAR 0 1
15473: PPUSH
15474: CALL_OW 255
15478: ST_TO_ADDR
// tech_space := tech_spacanom ;
15479: LD_ADDR_VAR 0 12
15483: PUSH
15484: LD_INT 29
15486: ST_TO_ADDR
// tech_time := tech_taurad ;
15487: LD_ADDR_VAR 0 13
15491: PUSH
15492: LD_INT 28
15494: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
15495: LD_ADDR_VAR 0 11
15499: PUSH
15500: LD_VAR 0 1
15504: PPUSH
15505: CALL_OW 310
15509: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
15510: LD_VAR 0 11
15514: PPUSH
15515: CALL_OW 247
15519: PUSH
15520: LD_INT 2
15522: EQUAL
15523: IFFALSE 15527
// exit ;
15525: GO 16037
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15527: LD_ADDR_VAR 0 8
15531: PUSH
15532: LD_INT 81
15534: PUSH
15535: LD_VAR 0 9
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PUSH
15544: LD_INT 3
15546: PUSH
15547: LD_INT 21
15549: PUSH
15550: LD_INT 3
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: PPUSH
15565: CALL_OW 69
15569: ST_TO_ADDR
// if not tmp then
15570: LD_VAR 0 8
15574: NOT
15575: IFFALSE 15579
// exit ;
15577: GO 16037
// if in_unit then
15579: LD_VAR 0 11
15583: IFFALSE 15607
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
15585: LD_ADDR_VAR 0 10
15589: PUSH
15590: LD_VAR 0 8
15594: PPUSH
15595: LD_VAR 0 11
15599: PPUSH
15600: CALL_OW 74
15604: ST_TO_ADDR
15605: GO 15627
// enemy := NearestUnitToUnit ( tmp , unit ) ;
15607: LD_ADDR_VAR 0 10
15611: PUSH
15612: LD_VAR 0 8
15616: PPUSH
15617: LD_VAR 0 1
15621: PPUSH
15622: CALL_OW 74
15626: ST_TO_ADDR
// if not enemy then
15627: LD_VAR 0 10
15631: NOT
15632: IFFALSE 15636
// exit ;
15634: GO 16037
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
15636: LD_VAR 0 11
15640: PUSH
15641: LD_VAR 0 11
15645: PPUSH
15646: LD_VAR 0 10
15650: PPUSH
15651: CALL_OW 296
15655: PUSH
15656: LD_INT 13
15658: GREATER
15659: AND
15660: PUSH
15661: LD_VAR 0 1
15665: PPUSH
15666: LD_VAR 0 10
15670: PPUSH
15671: CALL_OW 296
15675: PUSH
15676: LD_INT 12
15678: GREATER
15679: OR
15680: IFFALSE 15684
// exit ;
15682: GO 16037
// missile := [ 1 ] ;
15684: LD_ADDR_VAR 0 14
15688: PUSH
15689: LD_INT 1
15691: PUSH
15692: EMPTY
15693: LIST
15694: ST_TO_ADDR
// if Researched ( side , tech_space ) then
15695: LD_VAR 0 9
15699: PPUSH
15700: LD_VAR 0 12
15704: PPUSH
15705: CALL_OW 325
15709: IFFALSE 15738
// missile := Insert ( missile , missile + 1 , 2 ) ;
15711: LD_ADDR_VAR 0 14
15715: PUSH
15716: LD_VAR 0 14
15720: PPUSH
15721: LD_VAR 0 14
15725: PUSH
15726: LD_INT 1
15728: PLUS
15729: PPUSH
15730: LD_INT 2
15732: PPUSH
15733: CALL_OW 2
15737: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
15738: LD_VAR 0 9
15742: PPUSH
15743: LD_VAR 0 13
15747: PPUSH
15748: CALL_OW 325
15752: PUSH
15753: LD_VAR 0 10
15757: PPUSH
15758: CALL_OW 255
15762: PPUSH
15763: LD_VAR 0 13
15767: PPUSH
15768: CALL_OW 325
15772: NOT
15773: AND
15774: IFFALSE 15803
// missile := Insert ( missile , missile + 1 , 3 ) ;
15776: LD_ADDR_VAR 0 14
15780: PUSH
15781: LD_VAR 0 14
15785: PPUSH
15786: LD_VAR 0 14
15790: PUSH
15791: LD_INT 1
15793: PLUS
15794: PPUSH
15795: LD_INT 3
15797: PPUSH
15798: CALL_OW 2
15802: ST_TO_ADDR
// if missile < 2 then
15803: LD_VAR 0 14
15807: PUSH
15808: LD_INT 2
15810: LESS
15811: IFFALSE 15815
// exit ;
15813: GO 16037
// x := GetX ( enemy ) ;
15815: LD_ADDR_VAR 0 4
15819: PUSH
15820: LD_VAR 0 10
15824: PPUSH
15825: CALL_OW 250
15829: ST_TO_ADDR
// y := GetY ( enemy ) ;
15830: LD_ADDR_VAR 0 5
15834: PUSH
15835: LD_VAR 0 10
15839: PPUSH
15840: CALL_OW 251
15844: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
15845: LD_ADDR_VAR 0 6
15849: PUSH
15850: LD_VAR 0 4
15854: PUSH
15855: LD_INT 1
15857: NEG
15858: PPUSH
15859: LD_INT 1
15861: PPUSH
15862: CALL_OW 12
15866: PLUS
15867: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
15868: LD_ADDR_VAR 0 7
15872: PUSH
15873: LD_VAR 0 5
15877: PUSH
15878: LD_INT 1
15880: NEG
15881: PPUSH
15882: LD_INT 1
15884: PPUSH
15885: CALL_OW 12
15889: PLUS
15890: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
15891: LD_VAR 0 6
15895: PPUSH
15896: LD_VAR 0 7
15900: PPUSH
15901: CALL_OW 488
15905: NOT
15906: IFFALSE 15928
// begin _x := x ;
15908: LD_ADDR_VAR 0 6
15912: PUSH
15913: LD_VAR 0 4
15917: ST_TO_ADDR
// _y := y ;
15918: LD_ADDR_VAR 0 7
15922: PUSH
15923: LD_VAR 0 5
15927: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
15928: LD_ADDR_VAR 0 3
15932: PUSH
15933: LD_INT 1
15935: PPUSH
15936: LD_VAR 0 14
15940: PPUSH
15941: CALL_OW 12
15945: ST_TO_ADDR
// case i of 1 :
15946: LD_VAR 0 3
15950: PUSH
15951: LD_INT 1
15953: DOUBLE
15954: EQUAL
15955: IFTRUE 15959
15957: GO 15976
15959: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
15960: LD_VAR 0 1
15964: PPUSH
15965: LD_VAR 0 10
15969: PPUSH
15970: CALL_OW 115
15974: GO 16037
15976: LD_INT 2
15978: DOUBLE
15979: EQUAL
15980: IFTRUE 15984
15982: GO 16006
15984: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
15985: LD_VAR 0 1
15989: PPUSH
15990: LD_VAR 0 6
15994: PPUSH
15995: LD_VAR 0 7
15999: PPUSH
16000: CALL_OW 153
16004: GO 16037
16006: LD_INT 3
16008: DOUBLE
16009: EQUAL
16010: IFTRUE 16014
16012: GO 16036
16014: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
16015: LD_VAR 0 1
16019: PPUSH
16020: LD_VAR 0 6
16024: PPUSH
16025: LD_VAR 0 7
16029: PPUSH
16030: CALL_OW 154
16034: GO 16037
16036: POP
// end ;
16037: LD_VAR 0 2
16041: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
16042: LD_INT 0
16044: PPUSH
16045: PPUSH
16046: PPUSH
16047: PPUSH
16048: PPUSH
16049: PPUSH
// if not unit or not building then
16050: LD_VAR 0 1
16054: NOT
16055: PUSH
16056: LD_VAR 0 2
16060: NOT
16061: OR
16062: IFFALSE 16066
// exit ;
16064: GO 16224
// x := GetX ( building ) ;
16066: LD_ADDR_VAR 0 5
16070: PUSH
16071: LD_VAR 0 2
16075: PPUSH
16076: CALL_OW 250
16080: ST_TO_ADDR
// y := GetY ( building ) ;
16081: LD_ADDR_VAR 0 6
16085: PUSH
16086: LD_VAR 0 2
16090: PPUSH
16091: CALL_OW 251
16095: ST_TO_ADDR
// for i = 0 to 5 do
16096: LD_ADDR_VAR 0 4
16100: PUSH
16101: DOUBLE
16102: LD_INT 0
16104: DEC
16105: ST_TO_ADDR
16106: LD_INT 5
16108: PUSH
16109: FOR_TO
16110: IFFALSE 16222
// begin _x := ShiftX ( x , i , 3 ) ;
16112: LD_ADDR_VAR 0 7
16116: PUSH
16117: LD_VAR 0 5
16121: PPUSH
16122: LD_VAR 0 4
16126: PPUSH
16127: LD_INT 3
16129: PPUSH
16130: CALL_OW 272
16134: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
16135: LD_ADDR_VAR 0 8
16139: PUSH
16140: LD_VAR 0 6
16144: PPUSH
16145: LD_VAR 0 4
16149: PPUSH
16150: LD_INT 3
16152: PPUSH
16153: CALL_OW 273
16157: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16158: LD_VAR 0 7
16162: PPUSH
16163: LD_VAR 0 8
16167: PPUSH
16168: CALL_OW 488
16172: NOT
16173: IFFALSE 16177
// continue ;
16175: GO 16109
// if HexInfo ( _x , _y ) = 0 then
16177: LD_VAR 0 7
16181: PPUSH
16182: LD_VAR 0 8
16186: PPUSH
16187: CALL_OW 428
16191: PUSH
16192: LD_INT 0
16194: EQUAL
16195: IFFALSE 16220
// begin ComMoveXY ( unit , _x , _y ) ;
16197: LD_VAR 0 1
16201: PPUSH
16202: LD_VAR 0 7
16206: PPUSH
16207: LD_VAR 0 8
16211: PPUSH
16212: CALL_OW 111
// exit ;
16216: POP
16217: POP
16218: GO 16224
// end ; end ;
16220: GO 16109
16222: POP
16223: POP
// end ;
16224: LD_VAR 0 3
16228: RET
// export function ScanBase ( side , base_area ) ; begin
16229: LD_INT 0
16231: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
16232: LD_ADDR_VAR 0 3
16236: PUSH
16237: LD_VAR 0 2
16241: PPUSH
16242: LD_INT 81
16244: PUSH
16245: LD_VAR 0 1
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: PPUSH
16254: CALL_OW 70
16258: ST_TO_ADDR
// end ;
16259: LD_VAR 0 3
16263: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
16264: LD_INT 0
16266: PPUSH
16267: PPUSH
16268: PPUSH
16269: PPUSH
// result := false ;
16270: LD_ADDR_VAR 0 2
16274: PUSH
16275: LD_INT 0
16277: ST_TO_ADDR
// side := GetSide ( unit ) ;
16278: LD_ADDR_VAR 0 3
16282: PUSH
16283: LD_VAR 0 1
16287: PPUSH
16288: CALL_OW 255
16292: ST_TO_ADDR
// nat := GetNation ( unit ) ;
16293: LD_ADDR_VAR 0 4
16297: PUSH
16298: LD_VAR 0 1
16302: PPUSH
16303: CALL_OW 248
16307: ST_TO_ADDR
// case nat of 1 :
16308: LD_VAR 0 4
16312: PUSH
16313: LD_INT 1
16315: DOUBLE
16316: EQUAL
16317: IFTRUE 16321
16319: GO 16332
16321: POP
// tech := tech_lassight ; 2 :
16322: LD_ADDR_VAR 0 5
16326: PUSH
16327: LD_INT 12
16329: ST_TO_ADDR
16330: GO 16371
16332: LD_INT 2
16334: DOUBLE
16335: EQUAL
16336: IFTRUE 16340
16338: GO 16351
16340: POP
// tech := tech_mortar ; 3 :
16341: LD_ADDR_VAR 0 5
16345: PUSH
16346: LD_INT 41
16348: ST_TO_ADDR
16349: GO 16371
16351: LD_INT 3
16353: DOUBLE
16354: EQUAL
16355: IFTRUE 16359
16357: GO 16370
16359: POP
// tech := tech_bazooka ; end ;
16360: LD_ADDR_VAR 0 5
16364: PUSH
16365: LD_INT 44
16367: ST_TO_ADDR
16368: GO 16371
16370: POP
// if Researched ( side , tech ) then
16371: LD_VAR 0 3
16375: PPUSH
16376: LD_VAR 0 5
16380: PPUSH
16381: CALL_OW 325
16385: IFFALSE 16412
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
16387: LD_ADDR_VAR 0 2
16391: PUSH
16392: LD_INT 5
16394: PUSH
16395: LD_INT 8
16397: PUSH
16398: LD_INT 9
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: LIST
16405: PUSH
16406: LD_VAR 0 4
16410: ARRAY
16411: ST_TO_ADDR
// end ;
16412: LD_VAR 0 2
16416: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
16417: LD_INT 0
16419: PPUSH
16420: PPUSH
16421: PPUSH
// if not mines then
16422: LD_VAR 0 2
16426: NOT
16427: IFFALSE 16431
// exit ;
16429: GO 16575
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16431: LD_ADDR_VAR 0 5
16435: PUSH
16436: LD_INT 81
16438: PUSH
16439: LD_VAR 0 1
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PUSH
16448: LD_INT 3
16450: PUSH
16451: LD_INT 21
16453: PUSH
16454: LD_INT 3
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PPUSH
16469: CALL_OW 69
16473: ST_TO_ADDR
// for i in mines do
16474: LD_ADDR_VAR 0 4
16478: PUSH
16479: LD_VAR 0 2
16483: PUSH
16484: FOR_IN
16485: IFFALSE 16573
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
16487: LD_VAR 0 4
16491: PUSH
16492: LD_INT 1
16494: ARRAY
16495: PPUSH
16496: LD_VAR 0 4
16500: PUSH
16501: LD_INT 2
16503: ARRAY
16504: PPUSH
16505: CALL_OW 458
16509: NOT
16510: IFFALSE 16514
// continue ;
16512: GO 16484
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
16514: LD_VAR 0 4
16518: PUSH
16519: LD_INT 1
16521: ARRAY
16522: PPUSH
16523: LD_VAR 0 4
16527: PUSH
16528: LD_INT 2
16530: ARRAY
16531: PPUSH
16532: CALL_OW 428
16536: PUSH
16537: LD_VAR 0 5
16541: IN
16542: IFFALSE 16571
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
16544: LD_VAR 0 4
16548: PUSH
16549: LD_INT 1
16551: ARRAY
16552: PPUSH
16553: LD_VAR 0 4
16557: PUSH
16558: LD_INT 2
16560: ARRAY
16561: PPUSH
16562: LD_VAR 0 1
16566: PPUSH
16567: CALL_OW 456
// end ;
16571: GO 16484
16573: POP
16574: POP
// end ;
16575: LD_VAR 0 3
16579: RET
// export function Count ( array ) ; var i ; begin
16580: LD_INT 0
16582: PPUSH
16583: PPUSH
// result := 0 ;
16584: LD_ADDR_VAR 0 2
16588: PUSH
16589: LD_INT 0
16591: ST_TO_ADDR
// for i in array do
16592: LD_ADDR_VAR 0 3
16596: PUSH
16597: LD_VAR 0 1
16601: PUSH
16602: FOR_IN
16603: IFFALSE 16627
// if i then
16605: LD_VAR 0 3
16609: IFFALSE 16625
// result := result + 1 ;
16611: LD_ADDR_VAR 0 2
16615: PUSH
16616: LD_VAR 0 2
16620: PUSH
16621: LD_INT 1
16623: PLUS
16624: ST_TO_ADDR
16625: GO 16602
16627: POP
16628: POP
// end ;
16629: LD_VAR 0 2
16633: RET
// export function IsEmpty ( building ) ; begin
16634: LD_INT 0
16636: PPUSH
// if not building then
16637: LD_VAR 0 1
16641: NOT
16642: IFFALSE 16646
// exit ;
16644: GO 16689
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
16646: LD_ADDR_VAR 0 2
16650: PUSH
16651: LD_VAR 0 1
16655: PUSH
16656: LD_INT 22
16658: PUSH
16659: LD_VAR 0 1
16663: PPUSH
16664: CALL_OW 255
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: LD_INT 58
16675: PUSH
16676: EMPTY
16677: LIST
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PPUSH
16683: CALL_OW 69
16687: IN
16688: ST_TO_ADDR
// end ;
16689: LD_VAR 0 2
16693: RET
// export function IsNotFull ( building ) ; begin
16694: LD_INT 0
16696: PPUSH
// if not building then
16697: LD_VAR 0 1
16701: NOT
16702: IFFALSE 16706
// exit ;
16704: GO 16725
// result := UnitsInside ( building ) < 6 ;
16706: LD_ADDR_VAR 0 2
16710: PUSH
16711: LD_VAR 0 1
16715: PPUSH
16716: CALL_OW 313
16720: PUSH
16721: LD_INT 6
16723: LESS
16724: ST_TO_ADDR
// end ;
16725: LD_VAR 0 2
16729: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
16730: LD_INT 0
16732: PPUSH
16733: PPUSH
16734: PPUSH
16735: PPUSH
// tmp := [ ] ;
16736: LD_ADDR_VAR 0 3
16740: PUSH
16741: EMPTY
16742: ST_TO_ADDR
// list := [ ] ;
16743: LD_ADDR_VAR 0 5
16747: PUSH
16748: EMPTY
16749: ST_TO_ADDR
// for i = 16 to 25 do
16750: LD_ADDR_VAR 0 4
16754: PUSH
16755: DOUBLE
16756: LD_INT 16
16758: DEC
16759: ST_TO_ADDR
16760: LD_INT 25
16762: PUSH
16763: FOR_TO
16764: IFFALSE 16837
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
16766: LD_ADDR_VAR 0 3
16770: PUSH
16771: LD_VAR 0 3
16775: PUSH
16776: LD_INT 22
16778: PUSH
16779: LD_VAR 0 1
16783: PPUSH
16784: CALL_OW 255
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: PUSH
16793: LD_INT 91
16795: PUSH
16796: LD_VAR 0 1
16800: PUSH
16801: LD_INT 6
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: LIST
16808: PUSH
16809: LD_INT 30
16811: PUSH
16812: LD_VAR 0 4
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: EMPTY
16822: LIST
16823: LIST
16824: LIST
16825: PUSH
16826: EMPTY
16827: LIST
16828: PPUSH
16829: CALL_OW 69
16833: ADD
16834: ST_TO_ADDR
16835: GO 16763
16837: POP
16838: POP
// for i = 1 to tmp do
16839: LD_ADDR_VAR 0 4
16843: PUSH
16844: DOUBLE
16845: LD_INT 1
16847: DEC
16848: ST_TO_ADDR
16849: LD_VAR 0 3
16853: PUSH
16854: FOR_TO
16855: IFFALSE 16943
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
16857: LD_ADDR_VAR 0 5
16861: PUSH
16862: LD_VAR 0 5
16866: PUSH
16867: LD_VAR 0 3
16871: PUSH
16872: LD_VAR 0 4
16876: ARRAY
16877: PPUSH
16878: CALL_OW 266
16882: PUSH
16883: LD_VAR 0 3
16887: PUSH
16888: LD_VAR 0 4
16892: ARRAY
16893: PPUSH
16894: CALL_OW 250
16898: PUSH
16899: LD_VAR 0 3
16903: PUSH
16904: LD_VAR 0 4
16908: ARRAY
16909: PPUSH
16910: CALL_OW 251
16914: PUSH
16915: LD_VAR 0 3
16919: PUSH
16920: LD_VAR 0 4
16924: ARRAY
16925: PPUSH
16926: CALL_OW 254
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: PUSH
16937: EMPTY
16938: LIST
16939: ADD
16940: ST_TO_ADDR
16941: GO 16854
16943: POP
16944: POP
// result := list ;
16945: LD_ADDR_VAR 0 2
16949: PUSH
16950: LD_VAR 0 5
16954: ST_TO_ADDR
// end ;
16955: LD_VAR 0 2
16959: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
16960: LD_INT 0
16962: PPUSH
16963: PPUSH
16964: PPUSH
16965: PPUSH
16966: PPUSH
16967: PPUSH
16968: PPUSH
// if not factory then
16969: LD_VAR 0 1
16973: NOT
16974: IFFALSE 16978
// exit ;
16976: GO 17571
// if control = control_apeman then
16978: LD_VAR 0 4
16982: PUSH
16983: LD_INT 5
16985: EQUAL
16986: IFFALSE 17095
// begin tmp := UnitsInside ( factory ) ;
16988: LD_ADDR_VAR 0 8
16992: PUSH
16993: LD_VAR 0 1
16997: PPUSH
16998: CALL_OW 313
17002: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17003: LD_VAR 0 8
17007: PPUSH
17008: LD_INT 25
17010: PUSH
17011: LD_INT 12
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PPUSH
17018: CALL_OW 72
17022: NOT
17023: IFFALSE 17033
// control := control_manual ;
17025: LD_ADDR_VAR 0 4
17029: PUSH
17030: LD_INT 1
17032: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17033: LD_ADDR_VAR 0 8
17037: PUSH
17038: LD_VAR 0 1
17042: PPUSH
17043: CALL 16730 0 1
17047: ST_TO_ADDR
// if tmp then
17048: LD_VAR 0 8
17052: IFFALSE 17095
// begin for i in tmp do
17054: LD_ADDR_VAR 0 7
17058: PUSH
17059: LD_VAR 0 8
17063: PUSH
17064: FOR_IN
17065: IFFALSE 17093
// if i [ 1 ] = b_ext_radio then
17067: LD_VAR 0 7
17071: PUSH
17072: LD_INT 1
17074: ARRAY
17075: PUSH
17076: LD_INT 22
17078: EQUAL
17079: IFFALSE 17091
// begin control := control_remote ;
17081: LD_ADDR_VAR 0 4
17085: PUSH
17086: LD_INT 2
17088: ST_TO_ADDR
// break ;
17089: GO 17093
// end ;
17091: GO 17064
17093: POP
17094: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17095: LD_VAR 0 1
17099: PPUSH
17100: LD_VAR 0 2
17104: PPUSH
17105: LD_VAR 0 3
17109: PPUSH
17110: LD_VAR 0 4
17114: PPUSH
17115: LD_VAR 0 5
17119: PPUSH
17120: CALL_OW 448
17124: IFFALSE 17159
// begin result := [ chassis , engine , control , weapon ] ;
17126: LD_ADDR_VAR 0 6
17130: PUSH
17131: LD_VAR 0 2
17135: PUSH
17136: LD_VAR 0 3
17140: PUSH
17141: LD_VAR 0 4
17145: PUSH
17146: LD_VAR 0 5
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: ST_TO_ADDR
// exit ;
17157: GO 17571
// end ; _chassis := AvailableChassisList ( factory ) ;
17159: LD_ADDR_VAR 0 9
17163: PUSH
17164: LD_VAR 0 1
17168: PPUSH
17169: CALL_OW 475
17173: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
17174: LD_ADDR_VAR 0 11
17178: PUSH
17179: LD_VAR 0 1
17183: PPUSH
17184: CALL_OW 476
17188: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
17189: LD_ADDR_VAR 0 12
17193: PUSH
17194: LD_VAR 0 1
17198: PPUSH
17199: CALL_OW 477
17203: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
17204: LD_ADDR_VAR 0 10
17208: PUSH
17209: LD_VAR 0 1
17213: PPUSH
17214: CALL_OW 478
17218: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
17219: LD_VAR 0 9
17223: NOT
17224: PUSH
17225: LD_VAR 0 11
17229: NOT
17230: OR
17231: PUSH
17232: LD_VAR 0 12
17236: NOT
17237: OR
17238: PUSH
17239: LD_VAR 0 10
17243: NOT
17244: OR
17245: IFFALSE 17280
// begin result := [ chassis , engine , control , weapon ] ;
17247: LD_ADDR_VAR 0 6
17251: PUSH
17252: LD_VAR 0 2
17256: PUSH
17257: LD_VAR 0 3
17261: PUSH
17262: LD_VAR 0 4
17266: PUSH
17267: LD_VAR 0 5
17271: PUSH
17272: EMPTY
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: ST_TO_ADDR
// exit ;
17278: GO 17571
// end ; if not chassis in _chassis then
17280: LD_VAR 0 2
17284: PUSH
17285: LD_VAR 0 9
17289: IN
17290: NOT
17291: IFFALSE 17317
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
17293: LD_ADDR_VAR 0 2
17297: PUSH
17298: LD_VAR 0 9
17302: PUSH
17303: LD_INT 1
17305: PPUSH
17306: LD_VAR 0 9
17310: PPUSH
17311: CALL_OW 12
17315: ARRAY
17316: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
17317: LD_VAR 0 2
17321: PPUSH
17322: LD_VAR 0 3
17326: PPUSH
17327: CALL 17576 0 2
17331: NOT
17332: IFFALSE 17391
// repeat engine := _engine [ 1 ] ;
17334: LD_ADDR_VAR 0 3
17338: PUSH
17339: LD_VAR 0 11
17343: PUSH
17344: LD_INT 1
17346: ARRAY
17347: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
17348: LD_ADDR_VAR 0 11
17352: PUSH
17353: LD_VAR 0 11
17357: PPUSH
17358: LD_INT 1
17360: PPUSH
17361: CALL_OW 3
17365: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
17366: LD_VAR 0 2
17370: PPUSH
17371: LD_VAR 0 3
17375: PPUSH
17376: CALL 17576 0 2
17380: PUSH
17381: LD_VAR 0 11
17385: PUSH
17386: EMPTY
17387: EQUAL
17388: OR
17389: IFFALSE 17334
// if not control in _control then
17391: LD_VAR 0 4
17395: PUSH
17396: LD_VAR 0 12
17400: IN
17401: NOT
17402: IFFALSE 17428
// control := _control [ rand ( 1 , _control ) ] ;
17404: LD_ADDR_VAR 0 4
17408: PUSH
17409: LD_VAR 0 12
17413: PUSH
17414: LD_INT 1
17416: PPUSH
17417: LD_VAR 0 12
17421: PPUSH
17422: CALL_OW 12
17426: ARRAY
17427: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
17428: LD_VAR 0 2
17432: PPUSH
17433: LD_VAR 0 5
17437: PPUSH
17438: CALL 17796 0 2
17442: NOT
17443: IFFALSE 17502
// repeat weapon := _weapon [ 1 ] ;
17445: LD_ADDR_VAR 0 5
17449: PUSH
17450: LD_VAR 0 10
17454: PUSH
17455: LD_INT 1
17457: ARRAY
17458: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
17459: LD_ADDR_VAR 0 10
17463: PUSH
17464: LD_VAR 0 10
17468: PPUSH
17469: LD_INT 1
17471: PPUSH
17472: CALL_OW 3
17476: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
17477: LD_VAR 0 2
17481: PPUSH
17482: LD_VAR 0 5
17486: PPUSH
17487: CALL 17796 0 2
17491: PUSH
17492: LD_VAR 0 10
17496: PUSH
17497: EMPTY
17498: EQUAL
17499: OR
17500: IFFALSE 17445
// result := [ ] ;
17502: LD_ADDR_VAR 0 6
17506: PUSH
17507: EMPTY
17508: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17509: LD_VAR 0 1
17513: PPUSH
17514: LD_VAR 0 2
17518: PPUSH
17519: LD_VAR 0 3
17523: PPUSH
17524: LD_VAR 0 4
17528: PPUSH
17529: LD_VAR 0 5
17533: PPUSH
17534: CALL_OW 448
17538: IFFALSE 17571
// result := [ chassis , engine , control , weapon ] ;
17540: LD_ADDR_VAR 0 6
17544: PUSH
17545: LD_VAR 0 2
17549: PUSH
17550: LD_VAR 0 3
17554: PUSH
17555: LD_VAR 0 4
17559: PUSH
17560: LD_VAR 0 5
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: ST_TO_ADDR
// end ;
17571: LD_VAR 0 6
17575: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
17576: LD_INT 0
17578: PPUSH
// if not chassis or not engine then
17579: LD_VAR 0 1
17583: NOT
17584: PUSH
17585: LD_VAR 0 2
17589: NOT
17590: OR
17591: IFFALSE 17595
// exit ;
17593: GO 17791
// case engine of engine_solar :
17595: LD_VAR 0 2
17599: PUSH
17600: LD_INT 2
17602: DOUBLE
17603: EQUAL
17604: IFTRUE 17608
17606: GO 17646
17608: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
17609: LD_ADDR_VAR 0 3
17613: PUSH
17614: LD_INT 11
17616: PUSH
17617: LD_INT 12
17619: PUSH
17620: LD_INT 13
17622: PUSH
17623: LD_INT 14
17625: PUSH
17626: LD_INT 1
17628: PUSH
17629: LD_INT 2
17631: PUSH
17632: LD_INT 3
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: ST_TO_ADDR
17644: GO 17775
17646: LD_INT 1
17648: DOUBLE
17649: EQUAL
17650: IFTRUE 17654
17652: GO 17716
17654: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
17655: LD_ADDR_VAR 0 3
17659: PUSH
17660: LD_INT 11
17662: PUSH
17663: LD_INT 12
17665: PUSH
17666: LD_INT 13
17668: PUSH
17669: LD_INT 14
17671: PUSH
17672: LD_INT 1
17674: PUSH
17675: LD_INT 2
17677: PUSH
17678: LD_INT 3
17680: PUSH
17681: LD_INT 4
17683: PUSH
17684: LD_INT 5
17686: PUSH
17687: LD_INT 21
17689: PUSH
17690: LD_INT 23
17692: PUSH
17693: LD_INT 22
17695: PUSH
17696: LD_INT 24
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: ST_TO_ADDR
17714: GO 17775
17716: LD_INT 3
17718: DOUBLE
17719: EQUAL
17720: IFTRUE 17724
17722: GO 17774
17724: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17725: LD_ADDR_VAR 0 3
17729: PUSH
17730: LD_INT 13
17732: PUSH
17733: LD_INT 14
17735: PUSH
17736: LD_INT 2
17738: PUSH
17739: LD_INT 3
17741: PUSH
17742: LD_INT 4
17744: PUSH
17745: LD_INT 5
17747: PUSH
17748: LD_INT 21
17750: PUSH
17751: LD_INT 22
17753: PUSH
17754: LD_INT 23
17756: PUSH
17757: LD_INT 24
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: ST_TO_ADDR
17772: GO 17775
17774: POP
// result := ( chassis in result ) ;
17775: LD_ADDR_VAR 0 3
17779: PUSH
17780: LD_VAR 0 1
17784: PUSH
17785: LD_VAR 0 3
17789: IN
17790: ST_TO_ADDR
// end ;
17791: LD_VAR 0 3
17795: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
17796: LD_INT 0
17798: PPUSH
// if not chassis or not weapon then
17799: LD_VAR 0 1
17803: NOT
17804: PUSH
17805: LD_VAR 0 2
17809: NOT
17810: OR
17811: IFFALSE 17815
// exit ;
17813: GO 18877
// case weapon of us_machine_gun :
17815: LD_VAR 0 2
17819: PUSH
17820: LD_INT 2
17822: DOUBLE
17823: EQUAL
17824: IFTRUE 17828
17826: GO 17858
17828: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
17829: LD_ADDR_VAR 0 3
17833: PUSH
17834: LD_INT 1
17836: PUSH
17837: LD_INT 2
17839: PUSH
17840: LD_INT 3
17842: PUSH
17843: LD_INT 4
17845: PUSH
17846: LD_INT 5
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: ST_TO_ADDR
17856: GO 18861
17858: LD_INT 3
17860: DOUBLE
17861: EQUAL
17862: IFTRUE 17866
17864: GO 17896
17866: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
17867: LD_ADDR_VAR 0 3
17871: PUSH
17872: LD_INT 1
17874: PUSH
17875: LD_INT 2
17877: PUSH
17878: LD_INT 3
17880: PUSH
17881: LD_INT 4
17883: PUSH
17884: LD_INT 5
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: ST_TO_ADDR
17894: GO 18861
17896: LD_INT 11
17898: DOUBLE
17899: EQUAL
17900: IFTRUE 17904
17902: GO 17934
17904: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
17905: LD_ADDR_VAR 0 3
17909: PUSH
17910: LD_INT 1
17912: PUSH
17913: LD_INT 2
17915: PUSH
17916: LD_INT 3
17918: PUSH
17919: LD_INT 4
17921: PUSH
17922: LD_INT 5
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: ST_TO_ADDR
17932: GO 18861
17934: LD_INT 4
17936: DOUBLE
17937: EQUAL
17938: IFTRUE 17942
17940: GO 17968
17942: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
17943: LD_ADDR_VAR 0 3
17947: PUSH
17948: LD_INT 2
17950: PUSH
17951: LD_INT 3
17953: PUSH
17954: LD_INT 4
17956: PUSH
17957: LD_INT 5
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: ST_TO_ADDR
17966: GO 18861
17968: LD_INT 5
17970: DOUBLE
17971: EQUAL
17972: IFTRUE 17976
17974: GO 18002
17976: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
17977: LD_ADDR_VAR 0 3
17981: PUSH
17982: LD_INT 2
17984: PUSH
17985: LD_INT 3
17987: PUSH
17988: LD_INT 4
17990: PUSH
17991: LD_INT 5
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: ST_TO_ADDR
18000: GO 18861
18002: LD_INT 9
18004: DOUBLE
18005: EQUAL
18006: IFTRUE 18010
18008: GO 18036
18010: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18011: LD_ADDR_VAR 0 3
18015: PUSH
18016: LD_INT 2
18018: PUSH
18019: LD_INT 3
18021: PUSH
18022: LD_INT 4
18024: PUSH
18025: LD_INT 5
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: ST_TO_ADDR
18034: GO 18861
18036: LD_INT 7
18038: DOUBLE
18039: EQUAL
18040: IFTRUE 18044
18042: GO 18070
18044: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
18045: LD_ADDR_VAR 0 3
18049: PUSH
18050: LD_INT 2
18052: PUSH
18053: LD_INT 3
18055: PUSH
18056: LD_INT 4
18058: PUSH
18059: LD_INT 5
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: ST_TO_ADDR
18068: GO 18861
18070: LD_INT 12
18072: DOUBLE
18073: EQUAL
18074: IFTRUE 18078
18076: GO 18104
18078: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
18079: LD_ADDR_VAR 0 3
18083: PUSH
18084: LD_INT 2
18086: PUSH
18087: LD_INT 3
18089: PUSH
18090: LD_INT 4
18092: PUSH
18093: LD_INT 5
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: ST_TO_ADDR
18102: GO 18861
18104: LD_INT 13
18106: DOUBLE
18107: EQUAL
18108: IFTRUE 18112
18110: GO 18138
18112: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
18113: LD_ADDR_VAR 0 3
18117: PUSH
18118: LD_INT 2
18120: PUSH
18121: LD_INT 3
18123: PUSH
18124: LD_INT 4
18126: PUSH
18127: LD_INT 5
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: ST_TO_ADDR
18136: GO 18861
18138: LD_INT 14
18140: DOUBLE
18141: EQUAL
18142: IFTRUE 18146
18144: GO 18164
18146: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
18147: LD_ADDR_VAR 0 3
18151: PUSH
18152: LD_INT 4
18154: PUSH
18155: LD_INT 5
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: ST_TO_ADDR
18162: GO 18861
18164: LD_INT 6
18166: DOUBLE
18167: EQUAL
18168: IFTRUE 18172
18170: GO 18190
18172: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
18173: LD_ADDR_VAR 0 3
18177: PUSH
18178: LD_INT 4
18180: PUSH
18181: LD_INT 5
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: ST_TO_ADDR
18188: GO 18861
18190: LD_INT 10
18192: DOUBLE
18193: EQUAL
18194: IFTRUE 18198
18196: GO 18216
18198: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
18199: LD_ADDR_VAR 0 3
18203: PUSH
18204: LD_INT 4
18206: PUSH
18207: LD_INT 5
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: ST_TO_ADDR
18214: GO 18861
18216: LD_INT 22
18218: DOUBLE
18219: EQUAL
18220: IFTRUE 18224
18222: GO 18250
18224: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
18225: LD_ADDR_VAR 0 3
18229: PUSH
18230: LD_INT 11
18232: PUSH
18233: LD_INT 12
18235: PUSH
18236: LD_INT 13
18238: PUSH
18239: LD_INT 14
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: ST_TO_ADDR
18248: GO 18861
18250: LD_INT 23
18252: DOUBLE
18253: EQUAL
18254: IFTRUE 18258
18256: GO 18284
18258: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
18259: LD_ADDR_VAR 0 3
18263: PUSH
18264: LD_INT 11
18266: PUSH
18267: LD_INT 12
18269: PUSH
18270: LD_INT 13
18272: PUSH
18273: LD_INT 14
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: ST_TO_ADDR
18282: GO 18861
18284: LD_INT 24
18286: DOUBLE
18287: EQUAL
18288: IFTRUE 18292
18290: GO 18318
18292: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
18293: LD_ADDR_VAR 0 3
18297: PUSH
18298: LD_INT 11
18300: PUSH
18301: LD_INT 12
18303: PUSH
18304: LD_INT 13
18306: PUSH
18307: LD_INT 14
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: ST_TO_ADDR
18316: GO 18861
18318: LD_INT 30
18320: DOUBLE
18321: EQUAL
18322: IFTRUE 18326
18324: GO 18352
18326: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
18327: LD_ADDR_VAR 0 3
18331: PUSH
18332: LD_INT 11
18334: PUSH
18335: LD_INT 12
18337: PUSH
18338: LD_INT 13
18340: PUSH
18341: LD_INT 14
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: ST_TO_ADDR
18350: GO 18861
18352: LD_INT 25
18354: DOUBLE
18355: EQUAL
18356: IFTRUE 18360
18358: GO 18378
18360: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
18361: LD_ADDR_VAR 0 3
18365: PUSH
18366: LD_INT 13
18368: PUSH
18369: LD_INT 14
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: ST_TO_ADDR
18376: GO 18861
18378: LD_INT 27
18380: DOUBLE
18381: EQUAL
18382: IFTRUE 18386
18384: GO 18404
18386: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
18387: LD_ADDR_VAR 0 3
18391: PUSH
18392: LD_INT 13
18394: PUSH
18395: LD_INT 14
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: ST_TO_ADDR
18402: GO 18861
18404: LD_EXP 104
18408: DOUBLE
18409: EQUAL
18410: IFTRUE 18414
18412: GO 18440
18414: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
18415: LD_ADDR_VAR 0 3
18419: PUSH
18420: LD_INT 11
18422: PUSH
18423: LD_INT 12
18425: PUSH
18426: LD_INT 13
18428: PUSH
18429: LD_INT 14
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: ST_TO_ADDR
18438: GO 18861
18440: LD_INT 28
18442: DOUBLE
18443: EQUAL
18444: IFTRUE 18448
18446: GO 18466
18448: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
18449: LD_ADDR_VAR 0 3
18453: PUSH
18454: LD_INT 13
18456: PUSH
18457: LD_INT 14
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: ST_TO_ADDR
18464: GO 18861
18466: LD_INT 29
18468: DOUBLE
18469: EQUAL
18470: IFTRUE 18474
18472: GO 18492
18474: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
18475: LD_ADDR_VAR 0 3
18479: PUSH
18480: LD_INT 13
18482: PUSH
18483: LD_INT 14
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: ST_TO_ADDR
18490: GO 18861
18492: LD_INT 31
18494: DOUBLE
18495: EQUAL
18496: IFTRUE 18500
18498: GO 18518
18500: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
18501: LD_ADDR_VAR 0 3
18505: PUSH
18506: LD_INT 13
18508: PUSH
18509: LD_INT 14
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: ST_TO_ADDR
18516: GO 18861
18518: LD_INT 26
18520: DOUBLE
18521: EQUAL
18522: IFTRUE 18526
18524: GO 18544
18526: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
18527: LD_ADDR_VAR 0 3
18531: PUSH
18532: LD_INT 13
18534: PUSH
18535: LD_INT 14
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: ST_TO_ADDR
18542: GO 18861
18544: LD_INT 42
18546: DOUBLE
18547: EQUAL
18548: IFTRUE 18552
18550: GO 18578
18552: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
18553: LD_ADDR_VAR 0 3
18557: PUSH
18558: LD_INT 21
18560: PUSH
18561: LD_INT 22
18563: PUSH
18564: LD_INT 23
18566: PUSH
18567: LD_INT 24
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: ST_TO_ADDR
18576: GO 18861
18578: LD_INT 43
18580: DOUBLE
18581: EQUAL
18582: IFTRUE 18586
18584: GO 18612
18586: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
18587: LD_ADDR_VAR 0 3
18591: PUSH
18592: LD_INT 21
18594: PUSH
18595: LD_INT 22
18597: PUSH
18598: LD_INT 23
18600: PUSH
18601: LD_INT 24
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: ST_TO_ADDR
18610: GO 18861
18612: LD_INT 44
18614: DOUBLE
18615: EQUAL
18616: IFTRUE 18620
18618: GO 18646
18620: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
18621: LD_ADDR_VAR 0 3
18625: PUSH
18626: LD_INT 21
18628: PUSH
18629: LD_INT 22
18631: PUSH
18632: LD_INT 23
18634: PUSH
18635: LD_INT 24
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: ST_TO_ADDR
18644: GO 18861
18646: LD_INT 45
18648: DOUBLE
18649: EQUAL
18650: IFTRUE 18654
18652: GO 18680
18654: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
18655: LD_ADDR_VAR 0 3
18659: PUSH
18660: LD_INT 21
18662: PUSH
18663: LD_INT 22
18665: PUSH
18666: LD_INT 23
18668: PUSH
18669: LD_INT 24
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: ST_TO_ADDR
18678: GO 18861
18680: LD_INT 49
18682: DOUBLE
18683: EQUAL
18684: IFTRUE 18688
18686: GO 18714
18688: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
18689: LD_ADDR_VAR 0 3
18693: PUSH
18694: LD_INT 21
18696: PUSH
18697: LD_INT 22
18699: PUSH
18700: LD_INT 23
18702: PUSH
18703: LD_INT 24
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: ST_TO_ADDR
18712: GO 18861
18714: LD_INT 51
18716: DOUBLE
18717: EQUAL
18718: IFTRUE 18722
18720: GO 18748
18722: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
18723: LD_ADDR_VAR 0 3
18727: PUSH
18728: LD_INT 21
18730: PUSH
18731: LD_INT 22
18733: PUSH
18734: LD_INT 23
18736: PUSH
18737: LD_INT 24
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: ST_TO_ADDR
18746: GO 18861
18748: LD_INT 52
18750: DOUBLE
18751: EQUAL
18752: IFTRUE 18756
18754: GO 18782
18756: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
18757: LD_ADDR_VAR 0 3
18761: PUSH
18762: LD_INT 21
18764: PUSH
18765: LD_INT 22
18767: PUSH
18768: LD_INT 23
18770: PUSH
18771: LD_INT 24
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: ST_TO_ADDR
18780: GO 18861
18782: LD_INT 53
18784: DOUBLE
18785: EQUAL
18786: IFTRUE 18790
18788: GO 18808
18790: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
18791: LD_ADDR_VAR 0 3
18795: PUSH
18796: LD_INT 23
18798: PUSH
18799: LD_INT 24
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: ST_TO_ADDR
18806: GO 18861
18808: LD_INT 46
18810: DOUBLE
18811: EQUAL
18812: IFTRUE 18816
18814: GO 18834
18816: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
18817: LD_ADDR_VAR 0 3
18821: PUSH
18822: LD_INT 23
18824: PUSH
18825: LD_INT 24
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: ST_TO_ADDR
18832: GO 18861
18834: LD_INT 47
18836: DOUBLE
18837: EQUAL
18838: IFTRUE 18842
18840: GO 18860
18842: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18843: LD_ADDR_VAR 0 3
18847: PUSH
18848: LD_INT 23
18850: PUSH
18851: LD_INT 24
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: ST_TO_ADDR
18858: GO 18861
18860: POP
// result := ( chassis in result ) ;
18861: LD_ADDR_VAR 0 3
18865: PUSH
18866: LD_VAR 0 1
18870: PUSH
18871: LD_VAR 0 3
18875: IN
18876: ST_TO_ADDR
// end ;
18877: LD_VAR 0 3
18881: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
18882: LD_INT 0
18884: PPUSH
18885: PPUSH
18886: PPUSH
18887: PPUSH
18888: PPUSH
18889: PPUSH
18890: PPUSH
// result := array ;
18891: LD_ADDR_VAR 0 5
18895: PUSH
18896: LD_VAR 0 1
18900: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
18901: LD_VAR 0 1
18905: NOT
18906: PUSH
18907: LD_VAR 0 2
18911: NOT
18912: OR
18913: PUSH
18914: LD_VAR 0 3
18918: NOT
18919: OR
18920: PUSH
18921: LD_VAR 0 2
18925: PUSH
18926: LD_VAR 0 1
18930: GREATER
18931: OR
18932: PUSH
18933: LD_VAR 0 3
18937: PUSH
18938: LD_VAR 0 1
18942: GREATER
18943: OR
18944: IFFALSE 18948
// exit ;
18946: GO 19244
// if direction then
18948: LD_VAR 0 4
18952: IFFALSE 19016
// begin d := 1 ;
18954: LD_ADDR_VAR 0 9
18958: PUSH
18959: LD_INT 1
18961: ST_TO_ADDR
// if i_from > i_to then
18962: LD_VAR 0 2
18966: PUSH
18967: LD_VAR 0 3
18971: GREATER
18972: IFFALSE 18998
// length := ( array - i_from ) + i_to else
18974: LD_ADDR_VAR 0 11
18978: PUSH
18979: LD_VAR 0 1
18983: PUSH
18984: LD_VAR 0 2
18988: MINUS
18989: PUSH
18990: LD_VAR 0 3
18994: PLUS
18995: ST_TO_ADDR
18996: GO 19014
// length := i_to - i_from ;
18998: LD_ADDR_VAR 0 11
19002: PUSH
19003: LD_VAR 0 3
19007: PUSH
19008: LD_VAR 0 2
19012: MINUS
19013: ST_TO_ADDR
// end else
19014: GO 19077
// begin d := - 1 ;
19016: LD_ADDR_VAR 0 9
19020: PUSH
19021: LD_INT 1
19023: NEG
19024: ST_TO_ADDR
// if i_from > i_to then
19025: LD_VAR 0 2
19029: PUSH
19030: LD_VAR 0 3
19034: GREATER
19035: IFFALSE 19055
// length := i_from - i_to else
19037: LD_ADDR_VAR 0 11
19041: PUSH
19042: LD_VAR 0 2
19046: PUSH
19047: LD_VAR 0 3
19051: MINUS
19052: ST_TO_ADDR
19053: GO 19077
// length := ( array - i_to ) + i_from ;
19055: LD_ADDR_VAR 0 11
19059: PUSH
19060: LD_VAR 0 1
19064: PUSH
19065: LD_VAR 0 3
19069: MINUS
19070: PUSH
19071: LD_VAR 0 2
19075: PLUS
19076: ST_TO_ADDR
// end ; if not length then
19077: LD_VAR 0 11
19081: NOT
19082: IFFALSE 19086
// exit ;
19084: GO 19244
// tmp := array ;
19086: LD_ADDR_VAR 0 10
19090: PUSH
19091: LD_VAR 0 1
19095: ST_TO_ADDR
// for i = 1 to length do
19096: LD_ADDR_VAR 0 6
19100: PUSH
19101: DOUBLE
19102: LD_INT 1
19104: DEC
19105: ST_TO_ADDR
19106: LD_VAR 0 11
19110: PUSH
19111: FOR_TO
19112: IFFALSE 19232
// begin for j = 1 to array do
19114: LD_ADDR_VAR 0 7
19118: PUSH
19119: DOUBLE
19120: LD_INT 1
19122: DEC
19123: ST_TO_ADDR
19124: LD_VAR 0 1
19128: PUSH
19129: FOR_TO
19130: IFFALSE 19218
// begin k := j + d ;
19132: LD_ADDR_VAR 0 8
19136: PUSH
19137: LD_VAR 0 7
19141: PUSH
19142: LD_VAR 0 9
19146: PLUS
19147: ST_TO_ADDR
// if k > array then
19148: LD_VAR 0 8
19152: PUSH
19153: LD_VAR 0 1
19157: GREATER
19158: IFFALSE 19168
// k := 1 ;
19160: LD_ADDR_VAR 0 8
19164: PUSH
19165: LD_INT 1
19167: ST_TO_ADDR
// if not k then
19168: LD_VAR 0 8
19172: NOT
19173: IFFALSE 19185
// k := array ;
19175: LD_ADDR_VAR 0 8
19179: PUSH
19180: LD_VAR 0 1
19184: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
19185: LD_ADDR_VAR 0 10
19189: PUSH
19190: LD_VAR 0 10
19194: PPUSH
19195: LD_VAR 0 8
19199: PPUSH
19200: LD_VAR 0 1
19204: PUSH
19205: LD_VAR 0 7
19209: ARRAY
19210: PPUSH
19211: CALL_OW 1
19215: ST_TO_ADDR
// end ;
19216: GO 19129
19218: POP
19219: POP
// array := tmp ;
19220: LD_ADDR_VAR 0 1
19224: PUSH
19225: LD_VAR 0 10
19229: ST_TO_ADDR
// end ;
19230: GO 19111
19232: POP
19233: POP
// result := array ;
19234: LD_ADDR_VAR 0 5
19238: PUSH
19239: LD_VAR 0 1
19243: ST_TO_ADDR
// end ;
19244: LD_VAR 0 5
19248: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
19249: LD_INT 0
19251: PPUSH
19252: PPUSH
// result := 0 ;
19253: LD_ADDR_VAR 0 3
19257: PUSH
19258: LD_INT 0
19260: ST_TO_ADDR
// if not array or not value in array then
19261: LD_VAR 0 1
19265: NOT
19266: PUSH
19267: LD_VAR 0 2
19271: PUSH
19272: LD_VAR 0 1
19276: IN
19277: NOT
19278: OR
19279: IFFALSE 19283
// exit ;
19281: GO 19337
// for i = 1 to array do
19283: LD_ADDR_VAR 0 4
19287: PUSH
19288: DOUBLE
19289: LD_INT 1
19291: DEC
19292: ST_TO_ADDR
19293: LD_VAR 0 1
19297: PUSH
19298: FOR_TO
19299: IFFALSE 19335
// if value = array [ i ] then
19301: LD_VAR 0 2
19305: PUSH
19306: LD_VAR 0 1
19310: PUSH
19311: LD_VAR 0 4
19315: ARRAY
19316: EQUAL
19317: IFFALSE 19333
// begin result := i ;
19319: LD_ADDR_VAR 0 3
19323: PUSH
19324: LD_VAR 0 4
19328: ST_TO_ADDR
// exit ;
19329: POP
19330: POP
19331: GO 19337
// end ;
19333: GO 19298
19335: POP
19336: POP
// end ;
19337: LD_VAR 0 3
19341: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
19342: LD_INT 0
19344: PPUSH
// vc_chassis := chassis ;
19345: LD_ADDR_OWVAR 37
19349: PUSH
19350: LD_VAR 0 1
19354: ST_TO_ADDR
// vc_engine := engine ;
19355: LD_ADDR_OWVAR 39
19359: PUSH
19360: LD_VAR 0 2
19364: ST_TO_ADDR
// vc_control := control ;
19365: LD_ADDR_OWVAR 38
19369: PUSH
19370: LD_VAR 0 3
19374: ST_TO_ADDR
// vc_weapon := weapon ;
19375: LD_ADDR_OWVAR 40
19379: PUSH
19380: LD_VAR 0 4
19384: ST_TO_ADDR
// vc_fuel_battery := fuel ;
19385: LD_ADDR_OWVAR 41
19389: PUSH
19390: LD_VAR 0 5
19394: ST_TO_ADDR
// end ;
19395: LD_VAR 0 6
19399: RET
// export function WantPlant ( unit ) ; var task ; begin
19400: LD_INT 0
19402: PPUSH
19403: PPUSH
// result := false ;
19404: LD_ADDR_VAR 0 2
19408: PUSH
19409: LD_INT 0
19411: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
19412: LD_ADDR_VAR 0 3
19416: PUSH
19417: LD_VAR 0 1
19421: PPUSH
19422: CALL_OW 437
19426: ST_TO_ADDR
// if task then
19427: LD_VAR 0 3
19431: IFFALSE 19459
// if task [ 1 ] [ 1 ] = p then
19433: LD_VAR 0 3
19437: PUSH
19438: LD_INT 1
19440: ARRAY
19441: PUSH
19442: LD_INT 1
19444: ARRAY
19445: PUSH
19446: LD_STRING p
19448: EQUAL
19449: IFFALSE 19459
// result := true ;
19451: LD_ADDR_VAR 0 2
19455: PUSH
19456: LD_INT 1
19458: ST_TO_ADDR
// end ;
19459: LD_VAR 0 2
19463: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
19464: LD_INT 0
19466: PPUSH
19467: PPUSH
19468: PPUSH
19469: PPUSH
// if pos < 1 then
19470: LD_VAR 0 2
19474: PUSH
19475: LD_INT 1
19477: LESS
19478: IFFALSE 19482
// exit ;
19480: GO 19785
// if pos = 1 then
19482: LD_VAR 0 2
19486: PUSH
19487: LD_INT 1
19489: EQUAL
19490: IFFALSE 19523
// result := Replace ( arr , pos [ 1 ] , value ) else
19492: LD_ADDR_VAR 0 4
19496: PUSH
19497: LD_VAR 0 1
19501: PPUSH
19502: LD_VAR 0 2
19506: PUSH
19507: LD_INT 1
19509: ARRAY
19510: PPUSH
19511: LD_VAR 0 3
19515: PPUSH
19516: CALL_OW 1
19520: ST_TO_ADDR
19521: GO 19785
// begin tmp := arr ;
19523: LD_ADDR_VAR 0 6
19527: PUSH
19528: LD_VAR 0 1
19532: ST_TO_ADDR
// s_arr := [ tmp ] ;
19533: LD_ADDR_VAR 0 7
19537: PUSH
19538: LD_VAR 0 6
19542: PUSH
19543: EMPTY
19544: LIST
19545: ST_TO_ADDR
// for i = 1 to pos - 1 do
19546: LD_ADDR_VAR 0 5
19550: PUSH
19551: DOUBLE
19552: LD_INT 1
19554: DEC
19555: ST_TO_ADDR
19556: LD_VAR 0 2
19560: PUSH
19561: LD_INT 1
19563: MINUS
19564: PUSH
19565: FOR_TO
19566: IFFALSE 19611
// begin tmp := tmp [ pos [ i ] ] ;
19568: LD_ADDR_VAR 0 6
19572: PUSH
19573: LD_VAR 0 6
19577: PUSH
19578: LD_VAR 0 2
19582: PUSH
19583: LD_VAR 0 5
19587: ARRAY
19588: ARRAY
19589: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
19590: LD_ADDR_VAR 0 7
19594: PUSH
19595: LD_VAR 0 7
19599: PUSH
19600: LD_VAR 0 6
19604: PUSH
19605: EMPTY
19606: LIST
19607: ADD
19608: ST_TO_ADDR
// end ;
19609: GO 19565
19611: POP
19612: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
19613: LD_ADDR_VAR 0 6
19617: PUSH
19618: LD_VAR 0 6
19622: PPUSH
19623: LD_VAR 0 2
19627: PUSH
19628: LD_VAR 0 2
19632: ARRAY
19633: PPUSH
19634: LD_VAR 0 3
19638: PPUSH
19639: CALL_OW 1
19643: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
19644: LD_ADDR_VAR 0 7
19648: PUSH
19649: LD_VAR 0 7
19653: PPUSH
19654: LD_VAR 0 7
19658: PPUSH
19659: LD_VAR 0 6
19663: PPUSH
19664: CALL_OW 1
19668: ST_TO_ADDR
// for i = s_arr downto 2 do
19669: LD_ADDR_VAR 0 5
19673: PUSH
19674: DOUBLE
19675: LD_VAR 0 7
19679: INC
19680: ST_TO_ADDR
19681: LD_INT 2
19683: PUSH
19684: FOR_DOWNTO
19685: IFFALSE 19769
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
19687: LD_ADDR_VAR 0 6
19691: PUSH
19692: LD_VAR 0 7
19696: PUSH
19697: LD_VAR 0 5
19701: PUSH
19702: LD_INT 1
19704: MINUS
19705: ARRAY
19706: PPUSH
19707: LD_VAR 0 2
19711: PUSH
19712: LD_VAR 0 5
19716: PUSH
19717: LD_INT 1
19719: MINUS
19720: ARRAY
19721: PPUSH
19722: LD_VAR 0 7
19726: PUSH
19727: LD_VAR 0 5
19731: ARRAY
19732: PPUSH
19733: CALL_OW 1
19737: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
19738: LD_ADDR_VAR 0 7
19742: PUSH
19743: LD_VAR 0 7
19747: PPUSH
19748: LD_VAR 0 5
19752: PUSH
19753: LD_INT 1
19755: MINUS
19756: PPUSH
19757: LD_VAR 0 6
19761: PPUSH
19762: CALL_OW 1
19766: ST_TO_ADDR
// end ;
19767: GO 19684
19769: POP
19770: POP
// result := s_arr [ 1 ] ;
19771: LD_ADDR_VAR 0 4
19775: PUSH
19776: LD_VAR 0 7
19780: PUSH
19781: LD_INT 1
19783: ARRAY
19784: ST_TO_ADDR
// end ; end ;
19785: LD_VAR 0 4
19789: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
19790: LD_INT 0
19792: PPUSH
19793: PPUSH
// if not list then
19794: LD_VAR 0 1
19798: NOT
19799: IFFALSE 19803
// exit ;
19801: GO 19894
// i := list [ pos1 ] ;
19803: LD_ADDR_VAR 0 5
19807: PUSH
19808: LD_VAR 0 1
19812: PUSH
19813: LD_VAR 0 2
19817: ARRAY
19818: ST_TO_ADDR
// if not i then
19819: LD_VAR 0 5
19823: NOT
19824: IFFALSE 19828
// exit ;
19826: GO 19894
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
19828: LD_ADDR_VAR 0 1
19832: PUSH
19833: LD_VAR 0 1
19837: PPUSH
19838: LD_VAR 0 2
19842: PPUSH
19843: LD_VAR 0 1
19847: PUSH
19848: LD_VAR 0 3
19852: ARRAY
19853: PPUSH
19854: CALL_OW 1
19858: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
19859: LD_ADDR_VAR 0 1
19863: PUSH
19864: LD_VAR 0 1
19868: PPUSH
19869: LD_VAR 0 3
19873: PPUSH
19874: LD_VAR 0 5
19878: PPUSH
19879: CALL_OW 1
19883: ST_TO_ADDR
// result := list ;
19884: LD_ADDR_VAR 0 4
19888: PUSH
19889: LD_VAR 0 1
19893: ST_TO_ADDR
// end ;
19894: LD_VAR 0 4
19898: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
19899: LD_INT 0
19901: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
19902: LD_ADDR_VAR 0 5
19906: PUSH
19907: LD_VAR 0 1
19911: PPUSH
19912: CALL_OW 250
19916: PPUSH
19917: LD_VAR 0 1
19921: PPUSH
19922: CALL_OW 251
19926: PPUSH
19927: LD_VAR 0 2
19931: PPUSH
19932: LD_VAR 0 3
19936: PPUSH
19937: LD_VAR 0 4
19941: PPUSH
19942: CALL 19952 0 5
19946: ST_TO_ADDR
// end ;
19947: LD_VAR 0 5
19951: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
19952: LD_INT 0
19954: PPUSH
19955: PPUSH
19956: PPUSH
19957: PPUSH
// if not list then
19958: LD_VAR 0 3
19962: NOT
19963: IFFALSE 19967
// exit ;
19965: GO 20355
// result := [ ] ;
19967: LD_ADDR_VAR 0 6
19971: PUSH
19972: EMPTY
19973: ST_TO_ADDR
// for i in list do
19974: LD_ADDR_VAR 0 7
19978: PUSH
19979: LD_VAR 0 3
19983: PUSH
19984: FOR_IN
19985: IFFALSE 20187
// begin tmp := GetDistUnitXY ( i , x , y ) ;
19987: LD_ADDR_VAR 0 9
19991: PUSH
19992: LD_VAR 0 7
19996: PPUSH
19997: LD_VAR 0 1
20001: PPUSH
20002: LD_VAR 0 2
20006: PPUSH
20007: CALL_OW 297
20011: ST_TO_ADDR
// if not result then
20012: LD_VAR 0 6
20016: NOT
20017: IFFALSE 20043
// result := [ [ i , tmp ] ] else
20019: LD_ADDR_VAR 0 6
20023: PUSH
20024: LD_VAR 0 7
20028: PUSH
20029: LD_VAR 0 9
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: EMPTY
20039: LIST
20040: ST_TO_ADDR
20041: GO 20185
// begin if result [ result ] [ 2 ] < tmp then
20043: LD_VAR 0 6
20047: PUSH
20048: LD_VAR 0 6
20052: ARRAY
20053: PUSH
20054: LD_INT 2
20056: ARRAY
20057: PUSH
20058: LD_VAR 0 9
20062: LESS
20063: IFFALSE 20105
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
20065: LD_ADDR_VAR 0 6
20069: PUSH
20070: LD_VAR 0 6
20074: PPUSH
20075: LD_VAR 0 6
20079: PUSH
20080: LD_INT 1
20082: PLUS
20083: PPUSH
20084: LD_VAR 0 7
20088: PUSH
20089: LD_VAR 0 9
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PPUSH
20098: CALL_OW 2
20102: ST_TO_ADDR
20103: GO 20185
// for j = 1 to result do
20105: LD_ADDR_VAR 0 8
20109: PUSH
20110: DOUBLE
20111: LD_INT 1
20113: DEC
20114: ST_TO_ADDR
20115: LD_VAR 0 6
20119: PUSH
20120: FOR_TO
20121: IFFALSE 20183
// begin if tmp < result [ j ] [ 2 ] then
20123: LD_VAR 0 9
20127: PUSH
20128: LD_VAR 0 6
20132: PUSH
20133: LD_VAR 0 8
20137: ARRAY
20138: PUSH
20139: LD_INT 2
20141: ARRAY
20142: LESS
20143: IFFALSE 20181
// begin result := Insert ( result , j , [ i , tmp ] ) ;
20145: LD_ADDR_VAR 0 6
20149: PUSH
20150: LD_VAR 0 6
20154: PPUSH
20155: LD_VAR 0 8
20159: PPUSH
20160: LD_VAR 0 7
20164: PUSH
20165: LD_VAR 0 9
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PPUSH
20174: CALL_OW 2
20178: ST_TO_ADDR
// break ;
20179: GO 20183
// end ; end ;
20181: GO 20120
20183: POP
20184: POP
// end ; end ;
20185: GO 19984
20187: POP
20188: POP
// if result and not asc then
20189: LD_VAR 0 6
20193: PUSH
20194: LD_VAR 0 4
20198: NOT
20199: AND
20200: IFFALSE 20275
// begin tmp := result ;
20202: LD_ADDR_VAR 0 9
20206: PUSH
20207: LD_VAR 0 6
20211: ST_TO_ADDR
// for i = tmp downto 1 do
20212: LD_ADDR_VAR 0 7
20216: PUSH
20217: DOUBLE
20218: LD_VAR 0 9
20222: INC
20223: ST_TO_ADDR
20224: LD_INT 1
20226: PUSH
20227: FOR_DOWNTO
20228: IFFALSE 20273
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
20230: LD_ADDR_VAR 0 6
20234: PUSH
20235: LD_VAR 0 6
20239: PPUSH
20240: LD_VAR 0 9
20244: PUSH
20245: LD_VAR 0 7
20249: MINUS
20250: PUSH
20251: LD_INT 1
20253: PLUS
20254: PPUSH
20255: LD_VAR 0 9
20259: PUSH
20260: LD_VAR 0 7
20264: ARRAY
20265: PPUSH
20266: CALL_OW 1
20270: ST_TO_ADDR
20271: GO 20227
20273: POP
20274: POP
// end ; tmp := [ ] ;
20275: LD_ADDR_VAR 0 9
20279: PUSH
20280: EMPTY
20281: ST_TO_ADDR
// if mode then
20282: LD_VAR 0 5
20286: IFFALSE 20355
// begin for i = 1 to result do
20288: LD_ADDR_VAR 0 7
20292: PUSH
20293: DOUBLE
20294: LD_INT 1
20296: DEC
20297: ST_TO_ADDR
20298: LD_VAR 0 6
20302: PUSH
20303: FOR_TO
20304: IFFALSE 20343
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
20306: LD_ADDR_VAR 0 9
20310: PUSH
20311: LD_VAR 0 9
20315: PPUSH
20316: LD_VAR 0 7
20320: PPUSH
20321: LD_VAR 0 6
20325: PUSH
20326: LD_VAR 0 7
20330: ARRAY
20331: PUSH
20332: LD_INT 1
20334: ARRAY
20335: PPUSH
20336: CALL_OW 1
20340: ST_TO_ADDR
20341: GO 20303
20343: POP
20344: POP
// result := tmp ;
20345: LD_ADDR_VAR 0 6
20349: PUSH
20350: LD_VAR 0 9
20354: ST_TO_ADDR
// end ; end ;
20355: LD_VAR 0 6
20359: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
20360: LD_INT 0
20362: PPUSH
20363: PPUSH
20364: PPUSH
20365: PPUSH
20366: PPUSH
20367: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
20368: LD_ADDR_VAR 0 5
20372: PUSH
20373: LD_INT 0
20375: PUSH
20376: LD_INT 0
20378: PUSH
20379: LD_INT 0
20381: PUSH
20382: EMPTY
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: ST_TO_ADDR
// if not x or not y then
20390: LD_VAR 0 2
20394: NOT
20395: PUSH
20396: LD_VAR 0 3
20400: NOT
20401: OR
20402: IFFALSE 20406
// exit ;
20404: GO 22058
// if not range then
20406: LD_VAR 0 4
20410: NOT
20411: IFFALSE 20421
// range := 10 ;
20413: LD_ADDR_VAR 0 4
20417: PUSH
20418: LD_INT 10
20420: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20421: LD_ADDR_VAR 0 8
20425: PUSH
20426: LD_INT 81
20428: PUSH
20429: LD_VAR 0 1
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 92
20440: PUSH
20441: LD_VAR 0 2
20445: PUSH
20446: LD_VAR 0 3
20450: PUSH
20451: LD_VAR 0 4
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: PUSH
20462: LD_INT 3
20464: PUSH
20465: LD_INT 21
20467: PUSH
20468: LD_INT 3
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: LIST
20483: PPUSH
20484: CALL_OW 69
20488: ST_TO_ADDR
// if not tmp then
20489: LD_VAR 0 8
20493: NOT
20494: IFFALSE 20498
// exit ;
20496: GO 22058
// for i in tmp do
20498: LD_ADDR_VAR 0 6
20502: PUSH
20503: LD_VAR 0 8
20507: PUSH
20508: FOR_IN
20509: IFFALSE 22033
// begin points := [ 0 , 0 , 0 ] ;
20511: LD_ADDR_VAR 0 9
20515: PUSH
20516: LD_INT 0
20518: PUSH
20519: LD_INT 0
20521: PUSH
20522: LD_INT 0
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: LIST
20529: ST_TO_ADDR
// bpoints := 1 ;
20530: LD_ADDR_VAR 0 10
20534: PUSH
20535: LD_INT 1
20537: ST_TO_ADDR
// case GetType ( i ) of unit_human :
20538: LD_VAR 0 6
20542: PPUSH
20543: CALL_OW 247
20547: PUSH
20548: LD_INT 1
20550: DOUBLE
20551: EQUAL
20552: IFTRUE 20556
20554: GO 21134
20556: POP
// begin if GetClass ( i ) = 1 then
20557: LD_VAR 0 6
20561: PPUSH
20562: CALL_OW 257
20566: PUSH
20567: LD_INT 1
20569: EQUAL
20570: IFFALSE 20591
// points := [ 10 , 5 , 3 ] ;
20572: LD_ADDR_VAR 0 9
20576: PUSH
20577: LD_INT 10
20579: PUSH
20580: LD_INT 5
20582: PUSH
20583: LD_INT 3
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: LIST
20590: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
20591: LD_VAR 0 6
20595: PPUSH
20596: CALL_OW 257
20600: PUSH
20601: LD_INT 2
20603: PUSH
20604: LD_INT 3
20606: PUSH
20607: LD_INT 4
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: LIST
20614: IN
20615: IFFALSE 20636
// points := [ 3 , 2 , 1 ] ;
20617: LD_ADDR_VAR 0 9
20621: PUSH
20622: LD_INT 3
20624: PUSH
20625: LD_INT 2
20627: PUSH
20628: LD_INT 1
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: LIST
20635: ST_TO_ADDR
// if GetClass ( i ) = 5 then
20636: LD_VAR 0 6
20640: PPUSH
20641: CALL_OW 257
20645: PUSH
20646: LD_INT 5
20648: EQUAL
20649: IFFALSE 20670
// points := [ 130 , 5 , 2 ] ;
20651: LD_ADDR_VAR 0 9
20655: PUSH
20656: LD_INT 130
20658: PUSH
20659: LD_INT 5
20661: PUSH
20662: LD_INT 2
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: LIST
20669: ST_TO_ADDR
// if GetClass ( i ) = 8 then
20670: LD_VAR 0 6
20674: PPUSH
20675: CALL_OW 257
20679: PUSH
20680: LD_INT 8
20682: EQUAL
20683: IFFALSE 20704
// points := [ 35 , 35 , 30 ] ;
20685: LD_ADDR_VAR 0 9
20689: PUSH
20690: LD_INT 35
20692: PUSH
20693: LD_INT 35
20695: PUSH
20696: LD_INT 30
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: LIST
20703: ST_TO_ADDR
// if GetClass ( i ) = 9 then
20704: LD_VAR 0 6
20708: PPUSH
20709: CALL_OW 257
20713: PUSH
20714: LD_INT 9
20716: EQUAL
20717: IFFALSE 20738
// points := [ 20 , 55 , 40 ] ;
20719: LD_ADDR_VAR 0 9
20723: PUSH
20724: LD_INT 20
20726: PUSH
20727: LD_INT 55
20729: PUSH
20730: LD_INT 40
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: LIST
20737: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
20738: LD_VAR 0 6
20742: PPUSH
20743: CALL_OW 257
20747: PUSH
20748: LD_INT 12
20750: PUSH
20751: LD_INT 16
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: IN
20758: IFFALSE 20779
// points := [ 5 , 3 , 2 ] ;
20760: LD_ADDR_VAR 0 9
20764: PUSH
20765: LD_INT 5
20767: PUSH
20768: LD_INT 3
20770: PUSH
20771: LD_INT 2
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: LIST
20778: ST_TO_ADDR
// if GetClass ( i ) = 17 then
20779: LD_VAR 0 6
20783: PPUSH
20784: CALL_OW 257
20788: PUSH
20789: LD_INT 17
20791: EQUAL
20792: IFFALSE 20813
// points := [ 100 , 50 , 75 ] ;
20794: LD_ADDR_VAR 0 9
20798: PUSH
20799: LD_INT 100
20801: PUSH
20802: LD_INT 50
20804: PUSH
20805: LD_INT 75
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: LIST
20812: ST_TO_ADDR
// if GetClass ( i ) = 15 then
20813: LD_VAR 0 6
20817: PPUSH
20818: CALL_OW 257
20822: PUSH
20823: LD_INT 15
20825: EQUAL
20826: IFFALSE 20847
// points := [ 10 , 5 , 3 ] ;
20828: LD_ADDR_VAR 0 9
20832: PUSH
20833: LD_INT 10
20835: PUSH
20836: LD_INT 5
20838: PUSH
20839: LD_INT 3
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: LIST
20846: ST_TO_ADDR
// if GetClass ( i ) = 14 then
20847: LD_VAR 0 6
20851: PPUSH
20852: CALL_OW 257
20856: PUSH
20857: LD_INT 14
20859: EQUAL
20860: IFFALSE 20881
// points := [ 10 , 0 , 0 ] ;
20862: LD_ADDR_VAR 0 9
20866: PUSH
20867: LD_INT 10
20869: PUSH
20870: LD_INT 0
20872: PUSH
20873: LD_INT 0
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: LIST
20880: ST_TO_ADDR
// if GetClass ( i ) = 11 then
20881: LD_VAR 0 6
20885: PPUSH
20886: CALL_OW 257
20890: PUSH
20891: LD_INT 11
20893: EQUAL
20894: IFFALSE 20915
// points := [ 30 , 10 , 5 ] ;
20896: LD_ADDR_VAR 0 9
20900: PUSH
20901: LD_INT 30
20903: PUSH
20904: LD_INT 10
20906: PUSH
20907: LD_INT 5
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: LIST
20914: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
20915: LD_VAR 0 1
20919: PPUSH
20920: LD_INT 5
20922: PPUSH
20923: CALL_OW 321
20927: PUSH
20928: LD_INT 2
20930: EQUAL
20931: IFFALSE 20948
// bpoints := bpoints * 1.8 ;
20933: LD_ADDR_VAR 0 10
20937: PUSH
20938: LD_VAR 0 10
20942: PUSH
20943: LD_REAL  1.80000000000000E+0000
20946: MUL
20947: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
20948: LD_VAR 0 6
20952: PPUSH
20953: CALL_OW 257
20957: PUSH
20958: LD_INT 1
20960: PUSH
20961: LD_INT 2
20963: PUSH
20964: LD_INT 3
20966: PUSH
20967: LD_INT 4
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: IN
20976: PUSH
20977: LD_VAR 0 1
20981: PPUSH
20982: LD_INT 51
20984: PPUSH
20985: CALL_OW 321
20989: PUSH
20990: LD_INT 2
20992: EQUAL
20993: AND
20994: IFFALSE 21011
// bpoints := bpoints * 1.2 ;
20996: LD_ADDR_VAR 0 10
21000: PUSH
21001: LD_VAR 0 10
21005: PUSH
21006: LD_REAL  1.20000000000000E+0000
21009: MUL
21010: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
21011: LD_VAR 0 6
21015: PPUSH
21016: CALL_OW 257
21020: PUSH
21021: LD_INT 5
21023: PUSH
21024: LD_INT 7
21026: PUSH
21027: LD_INT 9
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: LIST
21034: IN
21035: PUSH
21036: LD_VAR 0 1
21040: PPUSH
21041: LD_INT 52
21043: PPUSH
21044: CALL_OW 321
21048: PUSH
21049: LD_INT 2
21051: EQUAL
21052: AND
21053: IFFALSE 21070
// bpoints := bpoints * 1.5 ;
21055: LD_ADDR_VAR 0 10
21059: PUSH
21060: LD_VAR 0 10
21064: PUSH
21065: LD_REAL  1.50000000000000E+0000
21068: MUL
21069: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
21070: LD_VAR 0 1
21074: PPUSH
21075: LD_INT 66
21077: PPUSH
21078: CALL_OW 321
21082: PUSH
21083: LD_INT 2
21085: EQUAL
21086: IFFALSE 21103
// bpoints := bpoints * 1.1 ;
21088: LD_ADDR_VAR 0 10
21092: PUSH
21093: LD_VAR 0 10
21097: PUSH
21098: LD_REAL  1.10000000000000E+0000
21101: MUL
21102: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
21103: LD_ADDR_VAR 0 10
21107: PUSH
21108: LD_VAR 0 10
21112: PUSH
21113: LD_VAR 0 6
21117: PPUSH
21118: LD_INT 1
21120: PPUSH
21121: CALL_OW 259
21125: PUSH
21126: LD_REAL  1.15000000000000E+0000
21129: MUL
21130: MUL
21131: ST_TO_ADDR
// end ; unit_vehicle :
21132: GO 21962
21134: LD_INT 2
21136: DOUBLE
21137: EQUAL
21138: IFTRUE 21142
21140: GO 21950
21142: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
21143: LD_VAR 0 6
21147: PPUSH
21148: CALL_OW 264
21152: PUSH
21153: LD_INT 2
21155: PUSH
21156: LD_INT 42
21158: PUSH
21159: LD_INT 24
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: LIST
21166: IN
21167: IFFALSE 21188
// points := [ 25 , 5 , 3 ] ;
21169: LD_ADDR_VAR 0 9
21173: PUSH
21174: LD_INT 25
21176: PUSH
21177: LD_INT 5
21179: PUSH
21180: LD_INT 3
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: LIST
21187: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
21188: LD_VAR 0 6
21192: PPUSH
21193: CALL_OW 264
21197: PUSH
21198: LD_INT 4
21200: PUSH
21201: LD_INT 43
21203: PUSH
21204: LD_INT 25
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: LIST
21211: IN
21212: IFFALSE 21233
// points := [ 40 , 15 , 5 ] ;
21214: LD_ADDR_VAR 0 9
21218: PUSH
21219: LD_INT 40
21221: PUSH
21222: LD_INT 15
21224: PUSH
21225: LD_INT 5
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: LIST
21232: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
21233: LD_VAR 0 6
21237: PPUSH
21238: CALL_OW 264
21242: PUSH
21243: LD_INT 3
21245: PUSH
21246: LD_INT 23
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: IN
21253: IFFALSE 21274
// points := [ 7 , 25 , 8 ] ;
21255: LD_ADDR_VAR 0 9
21259: PUSH
21260: LD_INT 7
21262: PUSH
21263: LD_INT 25
21265: PUSH
21266: LD_INT 8
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: LIST
21273: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
21274: LD_VAR 0 6
21278: PPUSH
21279: CALL_OW 264
21283: PUSH
21284: LD_INT 5
21286: PUSH
21287: LD_INT 27
21289: PUSH
21290: LD_INT 44
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: LIST
21297: IN
21298: IFFALSE 21319
// points := [ 14 , 50 , 16 ] ;
21300: LD_ADDR_VAR 0 9
21304: PUSH
21305: LD_INT 14
21307: PUSH
21308: LD_INT 50
21310: PUSH
21311: LD_INT 16
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: LIST
21318: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
21319: LD_VAR 0 6
21323: PPUSH
21324: CALL_OW 264
21328: PUSH
21329: LD_INT 6
21331: PUSH
21332: LD_INT 46
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: IN
21339: IFFALSE 21360
// points := [ 32 , 120 , 70 ] ;
21341: LD_ADDR_VAR 0 9
21345: PUSH
21346: LD_INT 32
21348: PUSH
21349: LD_INT 120
21351: PUSH
21352: LD_INT 70
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: LIST
21359: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
21360: LD_VAR 0 6
21364: PPUSH
21365: CALL_OW 264
21369: PUSH
21370: LD_INT 7
21372: PUSH
21373: LD_INT 28
21375: PUSH
21376: LD_INT 45
21378: PUSH
21379: LD_EXP 104
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: IN
21390: IFFALSE 21411
// points := [ 35 , 20 , 45 ] ;
21392: LD_ADDR_VAR 0 9
21396: PUSH
21397: LD_INT 35
21399: PUSH
21400: LD_INT 20
21402: PUSH
21403: LD_INT 45
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: LIST
21410: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
21411: LD_VAR 0 6
21415: PPUSH
21416: CALL_OW 264
21420: PUSH
21421: LD_INT 47
21423: PUSH
21424: EMPTY
21425: LIST
21426: IN
21427: IFFALSE 21448
// points := [ 67 , 45 , 75 ] ;
21429: LD_ADDR_VAR 0 9
21433: PUSH
21434: LD_INT 67
21436: PUSH
21437: LD_INT 45
21439: PUSH
21440: LD_INT 75
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: LIST
21447: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
21448: LD_VAR 0 6
21452: PPUSH
21453: CALL_OW 264
21457: PUSH
21458: LD_INT 26
21460: PUSH
21461: EMPTY
21462: LIST
21463: IN
21464: IFFALSE 21485
// points := [ 120 , 30 , 80 ] ;
21466: LD_ADDR_VAR 0 9
21470: PUSH
21471: LD_INT 120
21473: PUSH
21474: LD_INT 30
21476: PUSH
21477: LD_INT 80
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: LIST
21484: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
21485: LD_VAR 0 6
21489: PPUSH
21490: CALL_OW 264
21494: PUSH
21495: LD_INT 22
21497: PUSH
21498: EMPTY
21499: LIST
21500: IN
21501: IFFALSE 21522
// points := [ 40 , 1 , 1 ] ;
21503: LD_ADDR_VAR 0 9
21507: PUSH
21508: LD_INT 40
21510: PUSH
21511: LD_INT 1
21513: PUSH
21514: LD_INT 1
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: LIST
21521: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
21522: LD_VAR 0 6
21526: PPUSH
21527: CALL_OW 264
21531: PUSH
21532: LD_INT 29
21534: PUSH
21535: EMPTY
21536: LIST
21537: IN
21538: IFFALSE 21559
// points := [ 70 , 200 , 400 ] ;
21540: LD_ADDR_VAR 0 9
21544: PUSH
21545: LD_INT 70
21547: PUSH
21548: LD_INT 200
21550: PUSH
21551: LD_INT 400
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: LIST
21558: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
21559: LD_VAR 0 6
21563: PPUSH
21564: CALL_OW 264
21568: PUSH
21569: LD_INT 14
21571: PUSH
21572: LD_INT 53
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: IN
21579: IFFALSE 21600
// points := [ 40 , 10 , 20 ] ;
21581: LD_ADDR_VAR 0 9
21585: PUSH
21586: LD_INT 40
21588: PUSH
21589: LD_INT 10
21591: PUSH
21592: LD_INT 20
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: LIST
21599: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
21600: LD_VAR 0 6
21604: PPUSH
21605: CALL_OW 264
21609: PUSH
21610: LD_INT 9
21612: PUSH
21613: EMPTY
21614: LIST
21615: IN
21616: IFFALSE 21637
// points := [ 5 , 70 , 20 ] ;
21618: LD_ADDR_VAR 0 9
21622: PUSH
21623: LD_INT 5
21625: PUSH
21626: LD_INT 70
21628: PUSH
21629: LD_INT 20
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: LIST
21636: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
21637: LD_VAR 0 6
21641: PPUSH
21642: CALL_OW 264
21646: PUSH
21647: LD_INT 10
21649: PUSH
21650: EMPTY
21651: LIST
21652: IN
21653: IFFALSE 21674
// points := [ 35 , 110 , 70 ] ;
21655: LD_ADDR_VAR 0 9
21659: PUSH
21660: LD_INT 35
21662: PUSH
21663: LD_INT 110
21665: PUSH
21666: LD_INT 70
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: LIST
21673: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
21674: LD_VAR 0 6
21678: PPUSH
21679: CALL_OW 265
21683: PUSH
21684: LD_INT 25
21686: EQUAL
21687: IFFALSE 21708
// points := [ 80 , 65 , 100 ] ;
21689: LD_ADDR_VAR 0 9
21693: PUSH
21694: LD_INT 80
21696: PUSH
21697: LD_INT 65
21699: PUSH
21700: LD_INT 100
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: LIST
21707: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
21708: LD_VAR 0 6
21712: PPUSH
21713: CALL_OW 263
21717: PUSH
21718: LD_INT 1
21720: EQUAL
21721: IFFALSE 21756
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
21723: LD_ADDR_VAR 0 10
21727: PUSH
21728: LD_VAR 0 10
21732: PUSH
21733: LD_VAR 0 6
21737: PPUSH
21738: CALL_OW 311
21742: PPUSH
21743: LD_INT 3
21745: PPUSH
21746: CALL_OW 259
21750: PUSH
21751: LD_INT 4
21753: MUL
21754: MUL
21755: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
21756: LD_VAR 0 6
21760: PPUSH
21761: CALL_OW 263
21765: PUSH
21766: LD_INT 2
21768: EQUAL
21769: IFFALSE 21820
// begin j := IsControledBy ( i ) ;
21771: LD_ADDR_VAR 0 7
21775: PUSH
21776: LD_VAR 0 6
21780: PPUSH
21781: CALL_OW 312
21785: ST_TO_ADDR
// if j then
21786: LD_VAR 0 7
21790: IFFALSE 21820
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
21792: LD_ADDR_VAR 0 10
21796: PUSH
21797: LD_VAR 0 10
21801: PUSH
21802: LD_VAR 0 7
21806: PPUSH
21807: LD_INT 3
21809: PPUSH
21810: CALL_OW 259
21814: PUSH
21815: LD_INT 3
21817: MUL
21818: MUL
21819: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
21820: LD_VAR 0 6
21824: PPUSH
21825: CALL_OW 264
21829: PUSH
21830: LD_INT 5
21832: PUSH
21833: LD_INT 6
21835: PUSH
21836: LD_INT 46
21838: PUSH
21839: LD_INT 44
21841: PUSH
21842: LD_INT 47
21844: PUSH
21845: LD_INT 45
21847: PUSH
21848: LD_INT 28
21850: PUSH
21851: LD_INT 7
21853: PUSH
21854: LD_INT 27
21856: PUSH
21857: LD_INT 29
21859: PUSH
21860: EMPTY
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: IN
21872: PUSH
21873: LD_VAR 0 1
21877: PPUSH
21878: LD_INT 52
21880: PPUSH
21881: CALL_OW 321
21885: PUSH
21886: LD_INT 2
21888: EQUAL
21889: AND
21890: IFFALSE 21907
// bpoints := bpoints * 1.2 ;
21892: LD_ADDR_VAR 0 10
21896: PUSH
21897: LD_VAR 0 10
21901: PUSH
21902: LD_REAL  1.20000000000000E+0000
21905: MUL
21906: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
21907: LD_VAR 0 6
21911: PPUSH
21912: CALL_OW 264
21916: PUSH
21917: LD_INT 6
21919: PUSH
21920: LD_INT 46
21922: PUSH
21923: LD_INT 47
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: LIST
21930: IN
21931: IFFALSE 21948
// bpoints := bpoints * 1.2 ;
21933: LD_ADDR_VAR 0 10
21937: PUSH
21938: LD_VAR 0 10
21942: PUSH
21943: LD_REAL  1.20000000000000E+0000
21946: MUL
21947: ST_TO_ADDR
// end ; unit_building :
21948: GO 21962
21950: LD_INT 3
21952: DOUBLE
21953: EQUAL
21954: IFTRUE 21958
21956: GO 21961
21958: POP
// ; end ;
21959: GO 21962
21961: POP
// for j = 1 to 3 do
21962: LD_ADDR_VAR 0 7
21966: PUSH
21967: DOUBLE
21968: LD_INT 1
21970: DEC
21971: ST_TO_ADDR
21972: LD_INT 3
21974: PUSH
21975: FOR_TO
21976: IFFALSE 22029
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
21978: LD_ADDR_VAR 0 5
21982: PUSH
21983: LD_VAR 0 5
21987: PPUSH
21988: LD_VAR 0 7
21992: PPUSH
21993: LD_VAR 0 5
21997: PUSH
21998: LD_VAR 0 7
22002: ARRAY
22003: PUSH
22004: LD_VAR 0 9
22008: PUSH
22009: LD_VAR 0 7
22013: ARRAY
22014: PUSH
22015: LD_VAR 0 10
22019: MUL
22020: PLUS
22021: PPUSH
22022: CALL_OW 1
22026: ST_TO_ADDR
22027: GO 21975
22029: POP
22030: POP
// end ;
22031: GO 20508
22033: POP
22034: POP
// result := Replace ( result , 4 , tmp ) ;
22035: LD_ADDR_VAR 0 5
22039: PUSH
22040: LD_VAR 0 5
22044: PPUSH
22045: LD_INT 4
22047: PPUSH
22048: LD_VAR 0 8
22052: PPUSH
22053: CALL_OW 1
22057: ST_TO_ADDR
// end ;
22058: LD_VAR 0 5
22062: RET
// export function DangerAtRange ( unit , range ) ; begin
22063: LD_INT 0
22065: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
22066: LD_ADDR_VAR 0 3
22070: PUSH
22071: LD_VAR 0 1
22075: PPUSH
22076: CALL_OW 255
22080: PPUSH
22081: LD_VAR 0 1
22085: PPUSH
22086: CALL_OW 250
22090: PPUSH
22091: LD_VAR 0 1
22095: PPUSH
22096: CALL_OW 251
22100: PPUSH
22101: LD_VAR 0 2
22105: PPUSH
22106: CALL 20360 0 4
22110: ST_TO_ADDR
// end ;
22111: LD_VAR 0 3
22115: RET
// export function DangerInArea ( side , area ) ; begin
22116: LD_INT 0
22118: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
22119: LD_ADDR_VAR 0 3
22123: PUSH
22124: LD_VAR 0 2
22128: PPUSH
22129: LD_INT 81
22131: PUSH
22132: LD_VAR 0 1
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PPUSH
22141: CALL_OW 70
22145: ST_TO_ADDR
// end ;
22146: LD_VAR 0 3
22150: RET
// export function IsExtension ( b ) ; begin
22151: LD_INT 0
22153: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
22154: LD_ADDR_VAR 0 2
22158: PUSH
22159: LD_VAR 0 1
22163: PUSH
22164: LD_INT 23
22166: PUSH
22167: LD_INT 20
22169: PUSH
22170: LD_INT 22
22172: PUSH
22173: LD_INT 17
22175: PUSH
22176: LD_INT 24
22178: PUSH
22179: LD_INT 21
22181: PUSH
22182: LD_INT 19
22184: PUSH
22185: LD_INT 16
22187: PUSH
22188: LD_INT 25
22190: PUSH
22191: LD_INT 18
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: IN
22206: ST_TO_ADDR
// end ;
22207: LD_VAR 0 2
22211: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
22212: LD_INT 0
22214: PPUSH
22215: PPUSH
22216: PPUSH
// result := [ ] ;
22217: LD_ADDR_VAR 0 4
22221: PUSH
22222: EMPTY
22223: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
22224: LD_ADDR_VAR 0 5
22228: PUSH
22229: LD_VAR 0 2
22233: PPUSH
22234: LD_INT 21
22236: PUSH
22237: LD_INT 3
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PPUSH
22244: CALL_OW 70
22248: ST_TO_ADDR
// if not tmp then
22249: LD_VAR 0 5
22253: NOT
22254: IFFALSE 22258
// exit ;
22256: GO 22322
// if checkLink then
22258: LD_VAR 0 3
22262: IFFALSE 22312
// begin for i in tmp do
22264: LD_ADDR_VAR 0 6
22268: PUSH
22269: LD_VAR 0 5
22273: PUSH
22274: FOR_IN
22275: IFFALSE 22310
// if GetBase ( i ) <> base then
22277: LD_VAR 0 6
22281: PPUSH
22282: CALL_OW 274
22286: PUSH
22287: LD_VAR 0 1
22291: NONEQUAL
22292: IFFALSE 22308
// ComLinkToBase ( base , i ) ;
22294: LD_VAR 0 1
22298: PPUSH
22299: LD_VAR 0 6
22303: PPUSH
22304: CALL_OW 169
22308: GO 22274
22310: POP
22311: POP
// end ; result := tmp ;
22312: LD_ADDR_VAR 0 4
22316: PUSH
22317: LD_VAR 0 5
22321: ST_TO_ADDR
// end ;
22322: LD_VAR 0 4
22326: RET
// export function ComComplete ( units , b ) ; var i ; begin
22327: LD_INT 0
22329: PPUSH
22330: PPUSH
// if not units then
22331: LD_VAR 0 1
22335: NOT
22336: IFFALSE 22340
// exit ;
22338: GO 22430
// for i in units do
22340: LD_ADDR_VAR 0 4
22344: PUSH
22345: LD_VAR 0 1
22349: PUSH
22350: FOR_IN
22351: IFFALSE 22428
// if BuildingStatus ( b ) = bs_build then
22353: LD_VAR 0 2
22357: PPUSH
22358: CALL_OW 461
22362: PUSH
22363: LD_INT 1
22365: EQUAL
22366: IFFALSE 22426
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
22368: LD_VAR 0 4
22372: PPUSH
22373: LD_STRING h
22375: PUSH
22376: LD_VAR 0 2
22380: PPUSH
22381: CALL_OW 250
22385: PUSH
22386: LD_VAR 0 2
22390: PPUSH
22391: CALL_OW 251
22395: PUSH
22396: LD_VAR 0 2
22400: PUSH
22401: LD_INT 0
22403: PUSH
22404: LD_INT 0
22406: PUSH
22407: LD_INT 0
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: PUSH
22419: EMPTY
22420: LIST
22421: PPUSH
22422: CALL_OW 446
22426: GO 22350
22428: POP
22429: POP
// end ;
22430: LD_VAR 0 3
22434: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
22435: LD_INT 0
22437: PPUSH
22438: PPUSH
22439: PPUSH
22440: PPUSH
22441: PPUSH
22442: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
22443: LD_VAR 0 1
22447: NOT
22448: PUSH
22449: LD_VAR 0 1
22453: PPUSH
22454: CALL_OW 263
22458: PUSH
22459: LD_INT 2
22461: NONEQUAL
22462: OR
22463: IFFALSE 22467
// exit ;
22465: GO 22783
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
22467: LD_ADDR_VAR 0 6
22471: PUSH
22472: LD_INT 22
22474: PUSH
22475: LD_VAR 0 1
22479: PPUSH
22480: CALL_OW 255
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: LD_INT 2
22491: PUSH
22492: LD_INT 30
22494: PUSH
22495: LD_INT 36
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PUSH
22502: LD_INT 34
22504: PUSH
22505: LD_INT 31
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: LIST
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PPUSH
22521: CALL_OW 69
22525: ST_TO_ADDR
// if not tmp then
22526: LD_VAR 0 6
22530: NOT
22531: IFFALSE 22535
// exit ;
22533: GO 22783
// result := [ ] ;
22535: LD_ADDR_VAR 0 2
22539: PUSH
22540: EMPTY
22541: ST_TO_ADDR
// for i in tmp do
22542: LD_ADDR_VAR 0 3
22546: PUSH
22547: LD_VAR 0 6
22551: PUSH
22552: FOR_IN
22553: IFFALSE 22624
// begin t := UnitsInside ( i ) ;
22555: LD_ADDR_VAR 0 4
22559: PUSH
22560: LD_VAR 0 3
22564: PPUSH
22565: CALL_OW 313
22569: ST_TO_ADDR
// if t then
22570: LD_VAR 0 4
22574: IFFALSE 22622
// for j in t do
22576: LD_ADDR_VAR 0 7
22580: PUSH
22581: LD_VAR 0 4
22585: PUSH
22586: FOR_IN
22587: IFFALSE 22620
// result := Replace ( result , result + 1 , j ) ;
22589: LD_ADDR_VAR 0 2
22593: PUSH
22594: LD_VAR 0 2
22598: PPUSH
22599: LD_VAR 0 2
22603: PUSH
22604: LD_INT 1
22606: PLUS
22607: PPUSH
22608: LD_VAR 0 7
22612: PPUSH
22613: CALL_OW 1
22617: ST_TO_ADDR
22618: GO 22586
22620: POP
22621: POP
// end ;
22622: GO 22552
22624: POP
22625: POP
// if not result then
22626: LD_VAR 0 2
22630: NOT
22631: IFFALSE 22635
// exit ;
22633: GO 22783
// mech := result [ 1 ] ;
22635: LD_ADDR_VAR 0 5
22639: PUSH
22640: LD_VAR 0 2
22644: PUSH
22645: LD_INT 1
22647: ARRAY
22648: ST_TO_ADDR
// if result > 1 then
22649: LD_VAR 0 2
22653: PUSH
22654: LD_INT 1
22656: GREATER
22657: IFFALSE 22769
// begin for i = 2 to result do
22659: LD_ADDR_VAR 0 3
22663: PUSH
22664: DOUBLE
22665: LD_INT 2
22667: DEC
22668: ST_TO_ADDR
22669: LD_VAR 0 2
22673: PUSH
22674: FOR_TO
22675: IFFALSE 22767
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
22677: LD_ADDR_VAR 0 4
22681: PUSH
22682: LD_VAR 0 2
22686: PUSH
22687: LD_VAR 0 3
22691: ARRAY
22692: PPUSH
22693: LD_INT 3
22695: PPUSH
22696: CALL_OW 259
22700: PUSH
22701: LD_VAR 0 2
22705: PUSH
22706: LD_VAR 0 3
22710: ARRAY
22711: PPUSH
22712: CALL_OW 432
22716: MINUS
22717: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
22718: LD_VAR 0 4
22722: PUSH
22723: LD_VAR 0 5
22727: PPUSH
22728: LD_INT 3
22730: PPUSH
22731: CALL_OW 259
22735: PUSH
22736: LD_VAR 0 5
22740: PPUSH
22741: CALL_OW 432
22745: MINUS
22746: GREATEREQUAL
22747: IFFALSE 22765
// mech := result [ i ] ;
22749: LD_ADDR_VAR 0 5
22753: PUSH
22754: LD_VAR 0 2
22758: PUSH
22759: LD_VAR 0 3
22763: ARRAY
22764: ST_TO_ADDR
// end ;
22765: GO 22674
22767: POP
22768: POP
// end ; ComLinkTo ( vehicle , mech ) ;
22769: LD_VAR 0 1
22773: PPUSH
22774: LD_VAR 0 5
22778: PPUSH
22779: CALL_OW 135
// end ;
22783: LD_VAR 0 2
22787: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
22788: LD_INT 0
22790: PPUSH
22791: PPUSH
22792: PPUSH
22793: PPUSH
22794: PPUSH
22795: PPUSH
22796: PPUSH
22797: PPUSH
22798: PPUSH
22799: PPUSH
22800: PPUSH
22801: PPUSH
22802: PPUSH
// result := [ ] ;
22803: LD_ADDR_VAR 0 7
22807: PUSH
22808: EMPTY
22809: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
22810: LD_VAR 0 1
22814: PPUSH
22815: CALL_OW 266
22819: PUSH
22820: LD_INT 0
22822: PUSH
22823: LD_INT 1
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: IN
22830: NOT
22831: IFFALSE 22835
// exit ;
22833: GO 24469
// if name then
22835: LD_VAR 0 3
22839: IFFALSE 22855
// SetBName ( base_dep , name ) ;
22841: LD_VAR 0 1
22845: PPUSH
22846: LD_VAR 0 3
22850: PPUSH
22851: CALL_OW 500
// base := GetBase ( base_dep ) ;
22855: LD_ADDR_VAR 0 15
22859: PUSH
22860: LD_VAR 0 1
22864: PPUSH
22865: CALL_OW 274
22869: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
22870: LD_ADDR_VAR 0 16
22874: PUSH
22875: LD_VAR 0 1
22879: PPUSH
22880: CALL_OW 255
22884: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
22885: LD_ADDR_VAR 0 17
22889: PUSH
22890: LD_VAR 0 1
22894: PPUSH
22895: CALL_OW 248
22899: ST_TO_ADDR
// if sources then
22900: LD_VAR 0 5
22904: IFFALSE 22951
// for i = 1 to 3 do
22906: LD_ADDR_VAR 0 8
22910: PUSH
22911: DOUBLE
22912: LD_INT 1
22914: DEC
22915: ST_TO_ADDR
22916: LD_INT 3
22918: PUSH
22919: FOR_TO
22920: IFFALSE 22949
// AddResourceType ( base , i , sources [ i ] ) ;
22922: LD_VAR 0 15
22926: PPUSH
22927: LD_VAR 0 8
22931: PPUSH
22932: LD_VAR 0 5
22936: PUSH
22937: LD_VAR 0 8
22941: ARRAY
22942: PPUSH
22943: CALL_OW 276
22947: GO 22919
22949: POP
22950: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
22951: LD_ADDR_VAR 0 18
22955: PUSH
22956: LD_VAR 0 15
22960: PPUSH
22961: LD_VAR 0 2
22965: PPUSH
22966: LD_INT 1
22968: PPUSH
22969: CALL 22212 0 3
22973: ST_TO_ADDR
// InitHc ;
22974: CALL_OW 19
// InitUc ;
22978: CALL_OW 18
// uc_side := side ;
22982: LD_ADDR_OWVAR 20
22986: PUSH
22987: LD_VAR 0 16
22991: ST_TO_ADDR
// uc_nation := nation ;
22992: LD_ADDR_OWVAR 21
22996: PUSH
22997: LD_VAR 0 17
23001: ST_TO_ADDR
// if buildings then
23002: LD_VAR 0 18
23006: IFFALSE 24328
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
23008: LD_ADDR_VAR 0 19
23012: PUSH
23013: LD_VAR 0 18
23017: PPUSH
23018: LD_INT 2
23020: PUSH
23021: LD_INT 30
23023: PUSH
23024: LD_INT 29
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: LD_INT 30
23033: PUSH
23034: LD_INT 30
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: LIST
23045: PPUSH
23046: CALL_OW 72
23050: ST_TO_ADDR
// if tmp then
23051: LD_VAR 0 19
23055: IFFALSE 23103
// for i in tmp do
23057: LD_ADDR_VAR 0 8
23061: PUSH
23062: LD_VAR 0 19
23066: PUSH
23067: FOR_IN
23068: IFFALSE 23101
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
23070: LD_VAR 0 8
23074: PPUSH
23075: CALL_OW 250
23079: PPUSH
23080: LD_VAR 0 8
23084: PPUSH
23085: CALL_OW 251
23089: PPUSH
23090: LD_VAR 0 16
23094: PPUSH
23095: CALL_OW 441
23099: GO 23067
23101: POP
23102: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
23103: LD_VAR 0 18
23107: PPUSH
23108: LD_INT 2
23110: PUSH
23111: LD_INT 30
23113: PUSH
23114: LD_INT 32
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: LD_INT 30
23123: PUSH
23124: LD_INT 33
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: LIST
23135: PPUSH
23136: CALL_OW 72
23140: IFFALSE 23228
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
23142: LD_ADDR_VAR 0 8
23146: PUSH
23147: LD_VAR 0 18
23151: PPUSH
23152: LD_INT 2
23154: PUSH
23155: LD_INT 30
23157: PUSH
23158: LD_INT 32
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PUSH
23165: LD_INT 30
23167: PUSH
23168: LD_INT 33
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: LIST
23179: PPUSH
23180: CALL_OW 72
23184: PUSH
23185: FOR_IN
23186: IFFALSE 23226
// begin if not GetBWeapon ( i ) then
23188: LD_VAR 0 8
23192: PPUSH
23193: CALL_OW 269
23197: NOT
23198: IFFALSE 23224
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
23200: LD_VAR 0 8
23204: PPUSH
23205: LD_VAR 0 8
23209: PPUSH
23210: LD_VAR 0 2
23214: PPUSH
23215: CALL 24474 0 2
23219: PPUSH
23220: CALL_OW 431
// end ;
23224: GO 23185
23226: POP
23227: POP
// end ; for i = 1 to personel do
23228: LD_ADDR_VAR 0 8
23232: PUSH
23233: DOUBLE
23234: LD_INT 1
23236: DEC
23237: ST_TO_ADDR
23238: LD_VAR 0 6
23242: PUSH
23243: FOR_TO
23244: IFFALSE 24308
// begin if i > 4 then
23246: LD_VAR 0 8
23250: PUSH
23251: LD_INT 4
23253: GREATER
23254: IFFALSE 23258
// break ;
23256: GO 24308
// case i of 1 :
23258: LD_VAR 0 8
23262: PUSH
23263: LD_INT 1
23265: DOUBLE
23266: EQUAL
23267: IFTRUE 23271
23269: GO 23351
23271: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
23272: LD_ADDR_VAR 0 12
23276: PUSH
23277: LD_VAR 0 18
23281: PPUSH
23282: LD_INT 22
23284: PUSH
23285: LD_VAR 0 16
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 58
23296: PUSH
23297: EMPTY
23298: LIST
23299: PUSH
23300: LD_INT 2
23302: PUSH
23303: LD_INT 30
23305: PUSH
23306: LD_INT 32
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: PUSH
23313: LD_INT 30
23315: PUSH
23316: LD_INT 4
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PUSH
23323: LD_INT 30
23325: PUSH
23326: LD_INT 5
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: LIST
23343: PPUSH
23344: CALL_OW 72
23348: ST_TO_ADDR
23349: GO 23573
23351: LD_INT 2
23353: DOUBLE
23354: EQUAL
23355: IFTRUE 23359
23357: GO 23421
23359: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
23360: LD_ADDR_VAR 0 12
23364: PUSH
23365: LD_VAR 0 18
23369: PPUSH
23370: LD_INT 22
23372: PUSH
23373: LD_VAR 0 16
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: PUSH
23382: LD_INT 2
23384: PUSH
23385: LD_INT 30
23387: PUSH
23388: LD_INT 0
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: PUSH
23395: LD_INT 30
23397: PUSH
23398: LD_INT 1
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: LIST
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PPUSH
23414: CALL_OW 72
23418: ST_TO_ADDR
23419: GO 23573
23421: LD_INT 3
23423: DOUBLE
23424: EQUAL
23425: IFTRUE 23429
23427: GO 23491
23429: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
23430: LD_ADDR_VAR 0 12
23434: PUSH
23435: LD_VAR 0 18
23439: PPUSH
23440: LD_INT 22
23442: PUSH
23443: LD_VAR 0 16
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 2
23454: PUSH
23455: LD_INT 30
23457: PUSH
23458: LD_INT 2
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 30
23467: PUSH
23468: LD_INT 3
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: LIST
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PPUSH
23484: CALL_OW 72
23488: ST_TO_ADDR
23489: GO 23573
23491: LD_INT 4
23493: DOUBLE
23494: EQUAL
23495: IFTRUE 23499
23497: GO 23572
23499: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
23500: LD_ADDR_VAR 0 12
23504: PUSH
23505: LD_VAR 0 18
23509: PPUSH
23510: LD_INT 22
23512: PUSH
23513: LD_VAR 0 16
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PUSH
23522: LD_INT 2
23524: PUSH
23525: LD_INT 30
23527: PUSH
23528: LD_INT 6
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 30
23537: PUSH
23538: LD_INT 7
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 30
23547: PUSH
23548: LD_INT 8
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PPUSH
23565: CALL_OW 72
23569: ST_TO_ADDR
23570: GO 23573
23572: POP
// if i = 1 then
23573: LD_VAR 0 8
23577: PUSH
23578: LD_INT 1
23580: EQUAL
23581: IFFALSE 23692
// begin tmp := [ ] ;
23583: LD_ADDR_VAR 0 19
23587: PUSH
23588: EMPTY
23589: ST_TO_ADDR
// for j in f do
23590: LD_ADDR_VAR 0 9
23594: PUSH
23595: LD_VAR 0 12
23599: PUSH
23600: FOR_IN
23601: IFFALSE 23674
// if GetBType ( j ) = b_bunker then
23603: LD_VAR 0 9
23607: PPUSH
23608: CALL_OW 266
23612: PUSH
23613: LD_INT 32
23615: EQUAL
23616: IFFALSE 23643
// tmp := Insert ( tmp , 1 , j ) else
23618: LD_ADDR_VAR 0 19
23622: PUSH
23623: LD_VAR 0 19
23627: PPUSH
23628: LD_INT 1
23630: PPUSH
23631: LD_VAR 0 9
23635: PPUSH
23636: CALL_OW 2
23640: ST_TO_ADDR
23641: GO 23672
// tmp := Insert ( tmp , tmp + 1 , j ) ;
23643: LD_ADDR_VAR 0 19
23647: PUSH
23648: LD_VAR 0 19
23652: PPUSH
23653: LD_VAR 0 19
23657: PUSH
23658: LD_INT 1
23660: PLUS
23661: PPUSH
23662: LD_VAR 0 9
23666: PPUSH
23667: CALL_OW 2
23671: ST_TO_ADDR
23672: GO 23600
23674: POP
23675: POP
// if tmp then
23676: LD_VAR 0 19
23680: IFFALSE 23692
// f := tmp ;
23682: LD_ADDR_VAR 0 12
23686: PUSH
23687: LD_VAR 0 19
23691: ST_TO_ADDR
// end ; x := personel [ i ] ;
23692: LD_ADDR_VAR 0 13
23696: PUSH
23697: LD_VAR 0 6
23701: PUSH
23702: LD_VAR 0 8
23706: ARRAY
23707: ST_TO_ADDR
// if x = - 1 then
23708: LD_VAR 0 13
23712: PUSH
23713: LD_INT 1
23715: NEG
23716: EQUAL
23717: IFFALSE 23926
// begin for j in f do
23719: LD_ADDR_VAR 0 9
23723: PUSH
23724: LD_VAR 0 12
23728: PUSH
23729: FOR_IN
23730: IFFALSE 23922
// repeat InitHc ;
23732: CALL_OW 19
// if GetBType ( j ) = b_barracks then
23736: LD_VAR 0 9
23740: PPUSH
23741: CALL_OW 266
23745: PUSH
23746: LD_INT 5
23748: EQUAL
23749: IFFALSE 23819
// begin if UnitsInside ( j ) < 3 then
23751: LD_VAR 0 9
23755: PPUSH
23756: CALL_OW 313
23760: PUSH
23761: LD_INT 3
23763: LESS
23764: IFFALSE 23800
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23766: LD_INT 0
23768: PPUSH
23769: LD_INT 5
23771: PUSH
23772: LD_INT 8
23774: PUSH
23775: LD_INT 9
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: LIST
23782: PUSH
23783: LD_VAR 0 17
23787: ARRAY
23788: PPUSH
23789: LD_VAR 0 4
23793: PPUSH
23794: CALL_OW 380
23798: GO 23817
// PrepareHuman ( false , i , skill ) ;
23800: LD_INT 0
23802: PPUSH
23803: LD_VAR 0 8
23807: PPUSH
23808: LD_VAR 0 4
23812: PPUSH
23813: CALL_OW 380
// end else
23817: GO 23836
// PrepareHuman ( false , i , skill ) ;
23819: LD_INT 0
23821: PPUSH
23822: LD_VAR 0 8
23826: PPUSH
23827: LD_VAR 0 4
23831: PPUSH
23832: CALL_OW 380
// un := CreateHuman ;
23836: LD_ADDR_VAR 0 14
23840: PUSH
23841: CALL_OW 44
23845: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23846: LD_ADDR_VAR 0 7
23850: PUSH
23851: LD_VAR 0 7
23855: PPUSH
23856: LD_INT 1
23858: PPUSH
23859: LD_VAR 0 14
23863: PPUSH
23864: CALL_OW 2
23868: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
23869: LD_VAR 0 14
23873: PPUSH
23874: LD_VAR 0 9
23878: PPUSH
23879: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
23883: LD_VAR 0 9
23887: PPUSH
23888: CALL_OW 313
23892: PUSH
23893: LD_INT 6
23895: EQUAL
23896: PUSH
23897: LD_VAR 0 9
23901: PPUSH
23902: CALL_OW 266
23906: PUSH
23907: LD_INT 32
23909: PUSH
23910: LD_INT 31
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: IN
23917: OR
23918: IFFALSE 23732
23920: GO 23729
23922: POP
23923: POP
// end else
23924: GO 24306
// for j = 1 to x do
23926: LD_ADDR_VAR 0 9
23930: PUSH
23931: DOUBLE
23932: LD_INT 1
23934: DEC
23935: ST_TO_ADDR
23936: LD_VAR 0 13
23940: PUSH
23941: FOR_TO
23942: IFFALSE 24304
// begin InitHc ;
23944: CALL_OW 19
// if not f then
23948: LD_VAR 0 12
23952: NOT
23953: IFFALSE 24042
// begin PrepareHuman ( false , i , skill ) ;
23955: LD_INT 0
23957: PPUSH
23958: LD_VAR 0 8
23962: PPUSH
23963: LD_VAR 0 4
23967: PPUSH
23968: CALL_OW 380
// un := CreateHuman ;
23972: LD_ADDR_VAR 0 14
23976: PUSH
23977: CALL_OW 44
23981: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23982: LD_ADDR_VAR 0 7
23986: PUSH
23987: LD_VAR 0 7
23991: PPUSH
23992: LD_INT 1
23994: PPUSH
23995: LD_VAR 0 14
23999: PPUSH
24000: CALL_OW 2
24004: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24005: LD_VAR 0 14
24009: PPUSH
24010: LD_VAR 0 1
24014: PPUSH
24015: CALL_OW 250
24019: PPUSH
24020: LD_VAR 0 1
24024: PPUSH
24025: CALL_OW 251
24029: PPUSH
24030: LD_INT 10
24032: PPUSH
24033: LD_INT 0
24035: PPUSH
24036: CALL_OW 50
// continue ;
24040: GO 23941
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
24042: LD_VAR 0 12
24046: PUSH
24047: LD_INT 1
24049: ARRAY
24050: PPUSH
24051: CALL_OW 313
24055: PUSH
24056: LD_VAR 0 12
24060: PUSH
24061: LD_INT 1
24063: ARRAY
24064: PPUSH
24065: CALL_OW 266
24069: PUSH
24070: LD_INT 32
24072: PUSH
24073: LD_INT 31
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: IN
24080: AND
24081: PUSH
24082: LD_VAR 0 12
24086: PUSH
24087: LD_INT 1
24089: ARRAY
24090: PPUSH
24091: CALL_OW 313
24095: PUSH
24096: LD_INT 6
24098: EQUAL
24099: OR
24100: IFFALSE 24120
// f := Delete ( f , 1 ) ;
24102: LD_ADDR_VAR 0 12
24106: PUSH
24107: LD_VAR 0 12
24111: PPUSH
24112: LD_INT 1
24114: PPUSH
24115: CALL_OW 3
24119: ST_TO_ADDR
// if not f then
24120: LD_VAR 0 12
24124: NOT
24125: IFFALSE 24143
// begin x := x + 2 ;
24127: LD_ADDR_VAR 0 13
24131: PUSH
24132: LD_VAR 0 13
24136: PUSH
24137: LD_INT 2
24139: PLUS
24140: ST_TO_ADDR
// continue ;
24141: GO 23941
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
24143: LD_VAR 0 12
24147: PUSH
24148: LD_INT 1
24150: ARRAY
24151: PPUSH
24152: CALL_OW 266
24156: PUSH
24157: LD_INT 5
24159: EQUAL
24160: IFFALSE 24234
// begin if UnitsInside ( f [ 1 ] ) < 3 then
24162: LD_VAR 0 12
24166: PUSH
24167: LD_INT 1
24169: ARRAY
24170: PPUSH
24171: CALL_OW 313
24175: PUSH
24176: LD_INT 3
24178: LESS
24179: IFFALSE 24215
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24181: LD_INT 0
24183: PPUSH
24184: LD_INT 5
24186: PUSH
24187: LD_INT 8
24189: PUSH
24190: LD_INT 9
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: LIST
24197: PUSH
24198: LD_VAR 0 17
24202: ARRAY
24203: PPUSH
24204: LD_VAR 0 4
24208: PPUSH
24209: CALL_OW 380
24213: GO 24232
// PrepareHuman ( false , i , skill ) ;
24215: LD_INT 0
24217: PPUSH
24218: LD_VAR 0 8
24222: PPUSH
24223: LD_VAR 0 4
24227: PPUSH
24228: CALL_OW 380
// end else
24232: GO 24251
// PrepareHuman ( false , i , skill ) ;
24234: LD_INT 0
24236: PPUSH
24237: LD_VAR 0 8
24241: PPUSH
24242: LD_VAR 0 4
24246: PPUSH
24247: CALL_OW 380
// un := CreateHuman ;
24251: LD_ADDR_VAR 0 14
24255: PUSH
24256: CALL_OW 44
24260: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24261: LD_ADDR_VAR 0 7
24265: PUSH
24266: LD_VAR 0 7
24270: PPUSH
24271: LD_INT 1
24273: PPUSH
24274: LD_VAR 0 14
24278: PPUSH
24279: CALL_OW 2
24283: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
24284: LD_VAR 0 14
24288: PPUSH
24289: LD_VAR 0 12
24293: PUSH
24294: LD_INT 1
24296: ARRAY
24297: PPUSH
24298: CALL_OW 52
// end ;
24302: GO 23941
24304: POP
24305: POP
// end ;
24306: GO 23243
24308: POP
24309: POP
// result := result ^ buildings ;
24310: LD_ADDR_VAR 0 7
24314: PUSH
24315: LD_VAR 0 7
24319: PUSH
24320: LD_VAR 0 18
24324: ADD
24325: ST_TO_ADDR
// end else
24326: GO 24469
// begin for i = 1 to personel do
24328: LD_ADDR_VAR 0 8
24332: PUSH
24333: DOUBLE
24334: LD_INT 1
24336: DEC
24337: ST_TO_ADDR
24338: LD_VAR 0 6
24342: PUSH
24343: FOR_TO
24344: IFFALSE 24467
// begin if i > 4 then
24346: LD_VAR 0 8
24350: PUSH
24351: LD_INT 4
24353: GREATER
24354: IFFALSE 24358
// break ;
24356: GO 24467
// x := personel [ i ] ;
24358: LD_ADDR_VAR 0 13
24362: PUSH
24363: LD_VAR 0 6
24367: PUSH
24368: LD_VAR 0 8
24372: ARRAY
24373: ST_TO_ADDR
// if x = - 1 then
24374: LD_VAR 0 13
24378: PUSH
24379: LD_INT 1
24381: NEG
24382: EQUAL
24383: IFFALSE 24387
// continue ;
24385: GO 24343
// PrepareHuman ( false , i , skill ) ;
24387: LD_INT 0
24389: PPUSH
24390: LD_VAR 0 8
24394: PPUSH
24395: LD_VAR 0 4
24399: PPUSH
24400: CALL_OW 380
// un := CreateHuman ;
24404: LD_ADDR_VAR 0 14
24408: PUSH
24409: CALL_OW 44
24413: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24414: LD_VAR 0 14
24418: PPUSH
24419: LD_VAR 0 1
24423: PPUSH
24424: CALL_OW 250
24428: PPUSH
24429: LD_VAR 0 1
24433: PPUSH
24434: CALL_OW 251
24438: PPUSH
24439: LD_INT 10
24441: PPUSH
24442: LD_INT 0
24444: PPUSH
24445: CALL_OW 50
// result := result ^ un ;
24449: LD_ADDR_VAR 0 7
24453: PUSH
24454: LD_VAR 0 7
24458: PUSH
24459: LD_VAR 0 14
24463: ADD
24464: ST_TO_ADDR
// end ;
24465: GO 24343
24467: POP
24468: POP
// end ; end ;
24469: LD_VAR 0 7
24473: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
24474: LD_INT 0
24476: PPUSH
24477: PPUSH
24478: PPUSH
24479: PPUSH
24480: PPUSH
24481: PPUSH
24482: PPUSH
24483: PPUSH
24484: PPUSH
24485: PPUSH
24486: PPUSH
24487: PPUSH
24488: PPUSH
24489: PPUSH
24490: PPUSH
24491: PPUSH
// result := false ;
24492: LD_ADDR_VAR 0 3
24496: PUSH
24497: LD_INT 0
24499: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
24500: LD_VAR 0 1
24504: NOT
24505: PUSH
24506: LD_VAR 0 1
24510: PPUSH
24511: CALL_OW 266
24515: PUSH
24516: LD_INT 32
24518: PUSH
24519: LD_INT 33
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: IN
24526: NOT
24527: OR
24528: IFFALSE 24532
// exit ;
24530: GO 25641
// nat := GetNation ( tower ) ;
24532: LD_ADDR_VAR 0 12
24536: PUSH
24537: LD_VAR 0 1
24541: PPUSH
24542: CALL_OW 248
24546: ST_TO_ADDR
// side := GetSide ( tower ) ;
24547: LD_ADDR_VAR 0 16
24551: PUSH
24552: LD_VAR 0 1
24556: PPUSH
24557: CALL_OW 255
24561: ST_TO_ADDR
// x := GetX ( tower ) ;
24562: LD_ADDR_VAR 0 10
24566: PUSH
24567: LD_VAR 0 1
24571: PPUSH
24572: CALL_OW 250
24576: ST_TO_ADDR
// y := GetY ( tower ) ;
24577: LD_ADDR_VAR 0 11
24581: PUSH
24582: LD_VAR 0 1
24586: PPUSH
24587: CALL_OW 251
24591: ST_TO_ADDR
// if not x or not y then
24592: LD_VAR 0 10
24596: NOT
24597: PUSH
24598: LD_VAR 0 11
24602: NOT
24603: OR
24604: IFFALSE 24608
// exit ;
24606: GO 25641
// weapon := 0 ;
24608: LD_ADDR_VAR 0 18
24612: PUSH
24613: LD_INT 0
24615: ST_TO_ADDR
// fac_list := [ ] ;
24616: LD_ADDR_VAR 0 17
24620: PUSH
24621: EMPTY
24622: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
24623: LD_ADDR_VAR 0 6
24627: PUSH
24628: LD_VAR 0 1
24632: PPUSH
24633: CALL_OW 274
24637: PPUSH
24638: LD_VAR 0 2
24642: PPUSH
24643: LD_INT 0
24645: PPUSH
24646: CALL 22212 0 3
24650: PPUSH
24651: LD_INT 30
24653: PUSH
24654: LD_INT 3
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PPUSH
24661: CALL_OW 72
24665: ST_TO_ADDR
// if not factories then
24666: LD_VAR 0 6
24670: NOT
24671: IFFALSE 24675
// exit ;
24673: GO 25641
// for i in factories do
24675: LD_ADDR_VAR 0 8
24679: PUSH
24680: LD_VAR 0 6
24684: PUSH
24685: FOR_IN
24686: IFFALSE 24711
// fac_list := fac_list union AvailableWeaponList ( i ) ;
24688: LD_ADDR_VAR 0 17
24692: PUSH
24693: LD_VAR 0 17
24697: PUSH
24698: LD_VAR 0 8
24702: PPUSH
24703: CALL_OW 478
24707: UNION
24708: ST_TO_ADDR
24709: GO 24685
24711: POP
24712: POP
// if not fac_list then
24713: LD_VAR 0 17
24717: NOT
24718: IFFALSE 24722
// exit ;
24720: GO 25641
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
24722: LD_ADDR_VAR 0 5
24726: PUSH
24727: LD_INT 4
24729: PUSH
24730: LD_INT 5
24732: PUSH
24733: LD_INT 9
24735: PUSH
24736: LD_INT 10
24738: PUSH
24739: LD_INT 6
24741: PUSH
24742: LD_INT 7
24744: PUSH
24745: LD_INT 11
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: PUSH
24757: LD_INT 27
24759: PUSH
24760: LD_INT 28
24762: PUSH
24763: LD_INT 26
24765: PUSH
24766: LD_INT 30
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: PUSH
24775: LD_INT 43
24777: PUSH
24778: LD_INT 44
24780: PUSH
24781: LD_INT 46
24783: PUSH
24784: LD_INT 45
24786: PUSH
24787: LD_INT 47
24789: PUSH
24790: LD_INT 49
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: LIST
24805: PUSH
24806: LD_VAR 0 12
24810: ARRAY
24811: ST_TO_ADDR
// list := list isect fac_list ;
24812: LD_ADDR_VAR 0 5
24816: PUSH
24817: LD_VAR 0 5
24821: PUSH
24822: LD_VAR 0 17
24826: ISECT
24827: ST_TO_ADDR
// if not list then
24828: LD_VAR 0 5
24832: NOT
24833: IFFALSE 24837
// exit ;
24835: GO 25641
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
24837: LD_VAR 0 12
24841: PUSH
24842: LD_INT 3
24844: EQUAL
24845: PUSH
24846: LD_INT 49
24848: PUSH
24849: LD_VAR 0 5
24853: IN
24854: AND
24855: PUSH
24856: LD_INT 31
24858: PPUSH
24859: LD_VAR 0 16
24863: PPUSH
24864: CALL_OW 321
24868: PUSH
24869: LD_INT 2
24871: EQUAL
24872: AND
24873: IFFALSE 24933
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
24875: LD_INT 22
24877: PUSH
24878: LD_VAR 0 16
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 35
24889: PUSH
24890: LD_INT 49
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 91
24899: PUSH
24900: LD_VAR 0 1
24904: PUSH
24905: LD_INT 10
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: LIST
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: LIST
24917: PPUSH
24918: CALL_OW 69
24922: NOT
24923: IFFALSE 24933
// weapon := ru_time_lapser ;
24925: LD_ADDR_VAR 0 18
24929: PUSH
24930: LD_INT 49
24932: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
24933: LD_VAR 0 12
24937: PUSH
24938: LD_INT 1
24940: PUSH
24941: LD_INT 2
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: IN
24948: PUSH
24949: LD_INT 11
24951: PUSH
24952: LD_VAR 0 5
24956: IN
24957: PUSH
24958: LD_INT 30
24960: PUSH
24961: LD_VAR 0 5
24965: IN
24966: OR
24967: AND
24968: PUSH
24969: LD_INT 6
24971: PPUSH
24972: LD_VAR 0 16
24976: PPUSH
24977: CALL_OW 321
24981: PUSH
24982: LD_INT 2
24984: EQUAL
24985: AND
24986: IFFALSE 25151
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
24988: LD_INT 22
24990: PUSH
24991: LD_VAR 0 16
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 2
25002: PUSH
25003: LD_INT 35
25005: PUSH
25006: LD_INT 11
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 35
25015: PUSH
25016: LD_INT 30
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: LIST
25027: PUSH
25028: LD_INT 91
25030: PUSH
25031: LD_VAR 0 1
25035: PUSH
25036: LD_INT 18
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: LIST
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: LIST
25048: PPUSH
25049: CALL_OW 69
25053: NOT
25054: PUSH
25055: LD_INT 22
25057: PUSH
25058: LD_VAR 0 16
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PUSH
25067: LD_INT 2
25069: PUSH
25070: LD_INT 30
25072: PUSH
25073: LD_INT 32
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 30
25082: PUSH
25083: LD_INT 33
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 91
25097: PUSH
25098: LD_VAR 0 1
25102: PUSH
25103: LD_INT 12
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: LIST
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: LIST
25115: PUSH
25116: EMPTY
25117: LIST
25118: PPUSH
25119: CALL_OW 69
25123: PUSH
25124: LD_INT 2
25126: GREATER
25127: AND
25128: IFFALSE 25151
// weapon := [ us_radar , ar_radar ] [ nat ] ;
25130: LD_ADDR_VAR 0 18
25134: PUSH
25135: LD_INT 11
25137: PUSH
25138: LD_INT 30
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PUSH
25145: LD_VAR 0 12
25149: ARRAY
25150: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
25151: LD_VAR 0 18
25155: NOT
25156: PUSH
25157: LD_INT 40
25159: PPUSH
25160: LD_VAR 0 16
25164: PPUSH
25165: CALL_OW 321
25169: PUSH
25170: LD_INT 2
25172: EQUAL
25173: AND
25174: PUSH
25175: LD_INT 7
25177: PUSH
25178: LD_VAR 0 5
25182: IN
25183: PUSH
25184: LD_INT 28
25186: PUSH
25187: LD_VAR 0 5
25191: IN
25192: OR
25193: PUSH
25194: LD_INT 45
25196: PUSH
25197: LD_VAR 0 5
25201: IN
25202: OR
25203: AND
25204: IFFALSE 25458
// begin hex := GetHexInfo ( x , y ) ;
25206: LD_ADDR_VAR 0 4
25210: PUSH
25211: LD_VAR 0 10
25215: PPUSH
25216: LD_VAR 0 11
25220: PPUSH
25221: CALL_OW 546
25225: ST_TO_ADDR
// if hex [ 1 ] then
25226: LD_VAR 0 4
25230: PUSH
25231: LD_INT 1
25233: ARRAY
25234: IFFALSE 25238
// exit ;
25236: GO 25641
// height := hex [ 2 ] ;
25238: LD_ADDR_VAR 0 15
25242: PUSH
25243: LD_VAR 0 4
25247: PUSH
25248: LD_INT 2
25250: ARRAY
25251: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
25252: LD_ADDR_VAR 0 14
25256: PUSH
25257: LD_INT 0
25259: PUSH
25260: LD_INT 2
25262: PUSH
25263: LD_INT 3
25265: PUSH
25266: LD_INT 5
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: ST_TO_ADDR
// for i in tmp do
25275: LD_ADDR_VAR 0 8
25279: PUSH
25280: LD_VAR 0 14
25284: PUSH
25285: FOR_IN
25286: IFFALSE 25456
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
25288: LD_ADDR_VAR 0 9
25292: PUSH
25293: LD_VAR 0 10
25297: PPUSH
25298: LD_VAR 0 8
25302: PPUSH
25303: LD_INT 5
25305: PPUSH
25306: CALL_OW 272
25310: PUSH
25311: LD_VAR 0 11
25315: PPUSH
25316: LD_VAR 0 8
25320: PPUSH
25321: LD_INT 5
25323: PPUSH
25324: CALL_OW 273
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
25333: LD_VAR 0 9
25337: PUSH
25338: LD_INT 1
25340: ARRAY
25341: PPUSH
25342: LD_VAR 0 9
25346: PUSH
25347: LD_INT 2
25349: ARRAY
25350: PPUSH
25351: CALL_OW 488
25355: IFFALSE 25454
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
25357: LD_ADDR_VAR 0 4
25361: PUSH
25362: LD_VAR 0 9
25366: PUSH
25367: LD_INT 1
25369: ARRAY
25370: PPUSH
25371: LD_VAR 0 9
25375: PUSH
25376: LD_INT 2
25378: ARRAY
25379: PPUSH
25380: CALL_OW 546
25384: ST_TO_ADDR
// if hex [ 1 ] then
25385: LD_VAR 0 4
25389: PUSH
25390: LD_INT 1
25392: ARRAY
25393: IFFALSE 25397
// continue ;
25395: GO 25285
// h := hex [ 2 ] ;
25397: LD_ADDR_VAR 0 13
25401: PUSH
25402: LD_VAR 0 4
25406: PUSH
25407: LD_INT 2
25409: ARRAY
25410: ST_TO_ADDR
// if h + 7 < height then
25411: LD_VAR 0 13
25415: PUSH
25416: LD_INT 7
25418: PLUS
25419: PUSH
25420: LD_VAR 0 15
25424: LESS
25425: IFFALSE 25454
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
25427: LD_ADDR_VAR 0 18
25431: PUSH
25432: LD_INT 7
25434: PUSH
25435: LD_INT 28
25437: PUSH
25438: LD_INT 45
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: LIST
25445: PUSH
25446: LD_VAR 0 12
25450: ARRAY
25451: ST_TO_ADDR
// break ;
25452: GO 25456
// end ; end ; end ;
25454: GO 25285
25456: POP
25457: POP
// end ; if not weapon then
25458: LD_VAR 0 18
25462: NOT
25463: IFFALSE 25523
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
25465: LD_ADDR_VAR 0 5
25469: PUSH
25470: LD_VAR 0 5
25474: PUSH
25475: LD_INT 11
25477: PUSH
25478: LD_INT 30
25480: PUSH
25481: LD_INT 49
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: LIST
25488: DIFF
25489: ST_TO_ADDR
// if not list then
25490: LD_VAR 0 5
25494: NOT
25495: IFFALSE 25499
// exit ;
25497: GO 25641
// weapon := list [ rand ( 1 , list ) ] ;
25499: LD_ADDR_VAR 0 18
25503: PUSH
25504: LD_VAR 0 5
25508: PUSH
25509: LD_INT 1
25511: PPUSH
25512: LD_VAR 0 5
25516: PPUSH
25517: CALL_OW 12
25521: ARRAY
25522: ST_TO_ADDR
// end ; if weapon then
25523: LD_VAR 0 18
25527: IFFALSE 25641
// begin tmp := CostOfWeapon ( weapon ) ;
25529: LD_ADDR_VAR 0 14
25533: PUSH
25534: LD_VAR 0 18
25538: PPUSH
25539: CALL_OW 451
25543: ST_TO_ADDR
// j := GetBase ( tower ) ;
25544: LD_ADDR_VAR 0 9
25548: PUSH
25549: LD_VAR 0 1
25553: PPUSH
25554: CALL_OW 274
25558: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
25559: LD_VAR 0 9
25563: PPUSH
25564: LD_INT 1
25566: PPUSH
25567: CALL_OW 275
25571: PUSH
25572: LD_VAR 0 14
25576: PUSH
25577: LD_INT 1
25579: ARRAY
25580: GREATEREQUAL
25581: PUSH
25582: LD_VAR 0 9
25586: PPUSH
25587: LD_INT 2
25589: PPUSH
25590: CALL_OW 275
25594: PUSH
25595: LD_VAR 0 14
25599: PUSH
25600: LD_INT 2
25602: ARRAY
25603: GREATEREQUAL
25604: AND
25605: PUSH
25606: LD_VAR 0 9
25610: PPUSH
25611: LD_INT 3
25613: PPUSH
25614: CALL_OW 275
25618: PUSH
25619: LD_VAR 0 14
25623: PUSH
25624: LD_INT 3
25626: ARRAY
25627: GREATEREQUAL
25628: AND
25629: IFFALSE 25641
// result := weapon ;
25631: LD_ADDR_VAR 0 3
25635: PUSH
25636: LD_VAR 0 18
25640: ST_TO_ADDR
// end ; end ;
25641: LD_VAR 0 3
25645: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
25646: LD_INT 0
25648: PPUSH
25649: PPUSH
// result := true ;
25650: LD_ADDR_VAR 0 3
25654: PUSH
25655: LD_INT 1
25657: ST_TO_ADDR
// if array1 = array2 then
25658: LD_VAR 0 1
25662: PUSH
25663: LD_VAR 0 2
25667: EQUAL
25668: IFFALSE 25728
// begin for i = 1 to array1 do
25670: LD_ADDR_VAR 0 4
25674: PUSH
25675: DOUBLE
25676: LD_INT 1
25678: DEC
25679: ST_TO_ADDR
25680: LD_VAR 0 1
25684: PUSH
25685: FOR_TO
25686: IFFALSE 25724
// if array1 [ i ] <> array2 [ i ] then
25688: LD_VAR 0 1
25692: PUSH
25693: LD_VAR 0 4
25697: ARRAY
25698: PUSH
25699: LD_VAR 0 2
25703: PUSH
25704: LD_VAR 0 4
25708: ARRAY
25709: NONEQUAL
25710: IFFALSE 25722
// begin result := false ;
25712: LD_ADDR_VAR 0 3
25716: PUSH
25717: LD_INT 0
25719: ST_TO_ADDR
// break ;
25720: GO 25724
// end ;
25722: GO 25685
25724: POP
25725: POP
// end else
25726: GO 25736
// result := false ;
25728: LD_ADDR_VAR 0 3
25732: PUSH
25733: LD_INT 0
25735: ST_TO_ADDR
// end ;
25736: LD_VAR 0 3
25740: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
25741: LD_INT 0
25743: PPUSH
25744: PPUSH
// if not array1 or not array2 then
25745: LD_VAR 0 1
25749: NOT
25750: PUSH
25751: LD_VAR 0 2
25755: NOT
25756: OR
25757: IFFALSE 25761
// exit ;
25759: GO 25825
// result := true ;
25761: LD_ADDR_VAR 0 3
25765: PUSH
25766: LD_INT 1
25768: ST_TO_ADDR
// for i = 1 to array1 do
25769: LD_ADDR_VAR 0 4
25773: PUSH
25774: DOUBLE
25775: LD_INT 1
25777: DEC
25778: ST_TO_ADDR
25779: LD_VAR 0 1
25783: PUSH
25784: FOR_TO
25785: IFFALSE 25823
// if array1 [ i ] <> array2 [ i ] then
25787: LD_VAR 0 1
25791: PUSH
25792: LD_VAR 0 4
25796: ARRAY
25797: PUSH
25798: LD_VAR 0 2
25802: PUSH
25803: LD_VAR 0 4
25807: ARRAY
25808: NONEQUAL
25809: IFFALSE 25821
// begin result := false ;
25811: LD_ADDR_VAR 0 3
25815: PUSH
25816: LD_INT 0
25818: ST_TO_ADDR
// break ;
25819: GO 25823
// end ;
25821: GO 25784
25823: POP
25824: POP
// end ;
25825: LD_VAR 0 3
25829: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
25830: LD_INT 0
25832: PPUSH
25833: PPUSH
25834: PPUSH
// pom := GetBase ( fac ) ;
25835: LD_ADDR_VAR 0 5
25839: PUSH
25840: LD_VAR 0 1
25844: PPUSH
25845: CALL_OW 274
25849: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
25850: LD_ADDR_VAR 0 4
25854: PUSH
25855: LD_VAR 0 2
25859: PUSH
25860: LD_INT 1
25862: ARRAY
25863: PPUSH
25864: LD_VAR 0 2
25868: PUSH
25869: LD_INT 2
25871: ARRAY
25872: PPUSH
25873: LD_VAR 0 2
25877: PUSH
25878: LD_INT 3
25880: ARRAY
25881: PPUSH
25882: LD_VAR 0 2
25886: PUSH
25887: LD_INT 4
25889: ARRAY
25890: PPUSH
25891: CALL_OW 449
25895: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25896: LD_ADDR_VAR 0 3
25900: PUSH
25901: LD_VAR 0 5
25905: PPUSH
25906: LD_INT 1
25908: PPUSH
25909: CALL_OW 275
25913: PUSH
25914: LD_VAR 0 4
25918: PUSH
25919: LD_INT 1
25921: ARRAY
25922: GREATEREQUAL
25923: PUSH
25924: LD_VAR 0 5
25928: PPUSH
25929: LD_INT 2
25931: PPUSH
25932: CALL_OW 275
25936: PUSH
25937: LD_VAR 0 4
25941: PUSH
25942: LD_INT 2
25944: ARRAY
25945: GREATEREQUAL
25946: AND
25947: PUSH
25948: LD_VAR 0 5
25952: PPUSH
25953: LD_INT 3
25955: PPUSH
25956: CALL_OW 275
25960: PUSH
25961: LD_VAR 0 4
25965: PUSH
25966: LD_INT 3
25968: ARRAY
25969: GREATEREQUAL
25970: AND
25971: ST_TO_ADDR
// end ;
25972: LD_VAR 0 3
25976: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
25977: LD_INT 0
25979: PPUSH
25980: PPUSH
25981: PPUSH
25982: PPUSH
// pom := GetBase ( building ) ;
25983: LD_ADDR_VAR 0 3
25987: PUSH
25988: LD_VAR 0 1
25992: PPUSH
25993: CALL_OW 274
25997: ST_TO_ADDR
// if not pom then
25998: LD_VAR 0 3
26002: NOT
26003: IFFALSE 26007
// exit ;
26005: GO 26177
// btype := GetBType ( building ) ;
26007: LD_ADDR_VAR 0 5
26011: PUSH
26012: LD_VAR 0 1
26016: PPUSH
26017: CALL_OW 266
26021: ST_TO_ADDR
// if btype = b_armoury then
26022: LD_VAR 0 5
26026: PUSH
26027: LD_INT 4
26029: EQUAL
26030: IFFALSE 26040
// btype := b_barracks ;
26032: LD_ADDR_VAR 0 5
26036: PUSH
26037: LD_INT 5
26039: ST_TO_ADDR
// if btype = b_depot then
26040: LD_VAR 0 5
26044: PUSH
26045: LD_INT 0
26047: EQUAL
26048: IFFALSE 26058
// btype := b_warehouse ;
26050: LD_ADDR_VAR 0 5
26054: PUSH
26055: LD_INT 1
26057: ST_TO_ADDR
// if btype = b_workshop then
26058: LD_VAR 0 5
26062: PUSH
26063: LD_INT 2
26065: EQUAL
26066: IFFALSE 26076
// btype := b_factory ;
26068: LD_ADDR_VAR 0 5
26072: PUSH
26073: LD_INT 3
26075: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
26076: LD_ADDR_VAR 0 4
26080: PUSH
26081: LD_VAR 0 5
26085: PPUSH
26086: LD_VAR 0 1
26090: PPUSH
26091: CALL_OW 248
26095: PPUSH
26096: CALL_OW 450
26100: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26101: LD_ADDR_VAR 0 2
26105: PUSH
26106: LD_VAR 0 3
26110: PPUSH
26111: LD_INT 1
26113: PPUSH
26114: CALL_OW 275
26118: PUSH
26119: LD_VAR 0 4
26123: PUSH
26124: LD_INT 1
26126: ARRAY
26127: GREATEREQUAL
26128: PUSH
26129: LD_VAR 0 3
26133: PPUSH
26134: LD_INT 2
26136: PPUSH
26137: CALL_OW 275
26141: PUSH
26142: LD_VAR 0 4
26146: PUSH
26147: LD_INT 2
26149: ARRAY
26150: GREATEREQUAL
26151: AND
26152: PUSH
26153: LD_VAR 0 3
26157: PPUSH
26158: LD_INT 3
26160: PPUSH
26161: CALL_OW 275
26165: PUSH
26166: LD_VAR 0 4
26170: PUSH
26171: LD_INT 3
26173: ARRAY
26174: GREATEREQUAL
26175: AND
26176: ST_TO_ADDR
// end ;
26177: LD_VAR 0 2
26181: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
26182: LD_INT 0
26184: PPUSH
26185: PPUSH
26186: PPUSH
// pom := GetBase ( building ) ;
26187: LD_ADDR_VAR 0 4
26191: PUSH
26192: LD_VAR 0 1
26196: PPUSH
26197: CALL_OW 274
26201: ST_TO_ADDR
// if not pom then
26202: LD_VAR 0 4
26206: NOT
26207: IFFALSE 26211
// exit ;
26209: GO 26312
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
26211: LD_ADDR_VAR 0 5
26215: PUSH
26216: LD_VAR 0 2
26220: PPUSH
26221: LD_VAR 0 1
26225: PPUSH
26226: CALL_OW 248
26230: PPUSH
26231: CALL_OW 450
26235: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26236: LD_ADDR_VAR 0 3
26240: PUSH
26241: LD_VAR 0 4
26245: PPUSH
26246: LD_INT 1
26248: PPUSH
26249: CALL_OW 275
26253: PUSH
26254: LD_VAR 0 5
26258: PUSH
26259: LD_INT 1
26261: ARRAY
26262: GREATEREQUAL
26263: PUSH
26264: LD_VAR 0 4
26268: PPUSH
26269: LD_INT 2
26271: PPUSH
26272: CALL_OW 275
26276: PUSH
26277: LD_VAR 0 5
26281: PUSH
26282: LD_INT 2
26284: ARRAY
26285: GREATEREQUAL
26286: AND
26287: PUSH
26288: LD_VAR 0 4
26292: PPUSH
26293: LD_INT 3
26295: PPUSH
26296: CALL_OW 275
26300: PUSH
26301: LD_VAR 0 5
26305: PUSH
26306: LD_INT 3
26308: ARRAY
26309: GREATEREQUAL
26310: AND
26311: ST_TO_ADDR
// end ;
26312: LD_VAR 0 3
26316: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
26317: LD_INT 0
26319: PPUSH
26320: PPUSH
26321: PPUSH
26322: PPUSH
26323: PPUSH
26324: PPUSH
26325: PPUSH
26326: PPUSH
26327: PPUSH
26328: PPUSH
26329: PPUSH
// result := false ;
26330: LD_ADDR_VAR 0 8
26334: PUSH
26335: LD_INT 0
26337: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
26338: LD_VAR 0 5
26342: NOT
26343: PUSH
26344: LD_VAR 0 1
26348: NOT
26349: OR
26350: PUSH
26351: LD_VAR 0 2
26355: NOT
26356: OR
26357: PUSH
26358: LD_VAR 0 3
26362: NOT
26363: OR
26364: IFFALSE 26368
// exit ;
26366: GO 27182
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
26368: LD_ADDR_VAR 0 14
26372: PUSH
26373: LD_VAR 0 1
26377: PPUSH
26378: LD_VAR 0 2
26382: PPUSH
26383: LD_VAR 0 3
26387: PPUSH
26388: LD_VAR 0 4
26392: PPUSH
26393: LD_VAR 0 5
26397: PUSH
26398: LD_INT 1
26400: ARRAY
26401: PPUSH
26402: CALL_OW 248
26406: PPUSH
26407: LD_INT 0
26409: PPUSH
26410: CALL 28419 0 6
26414: ST_TO_ADDR
// if not hexes then
26415: LD_VAR 0 14
26419: NOT
26420: IFFALSE 26424
// exit ;
26422: GO 27182
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26424: LD_ADDR_VAR 0 17
26428: PUSH
26429: LD_VAR 0 5
26433: PPUSH
26434: LD_INT 22
26436: PUSH
26437: LD_VAR 0 13
26441: PPUSH
26442: CALL_OW 255
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 2
26453: PUSH
26454: LD_INT 30
26456: PUSH
26457: LD_INT 0
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 30
26466: PUSH
26467: LD_INT 1
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: LIST
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PPUSH
26483: CALL_OW 72
26487: ST_TO_ADDR
// for i = 1 to hexes do
26488: LD_ADDR_VAR 0 9
26492: PUSH
26493: DOUBLE
26494: LD_INT 1
26496: DEC
26497: ST_TO_ADDR
26498: LD_VAR 0 14
26502: PUSH
26503: FOR_TO
26504: IFFALSE 27180
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26506: LD_ADDR_VAR 0 13
26510: PUSH
26511: LD_VAR 0 14
26515: PUSH
26516: LD_VAR 0 9
26520: ARRAY
26521: PUSH
26522: LD_INT 1
26524: ARRAY
26525: PPUSH
26526: LD_VAR 0 14
26530: PUSH
26531: LD_VAR 0 9
26535: ARRAY
26536: PUSH
26537: LD_INT 2
26539: ARRAY
26540: PPUSH
26541: CALL_OW 428
26545: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
26546: LD_VAR 0 14
26550: PUSH
26551: LD_VAR 0 9
26555: ARRAY
26556: PUSH
26557: LD_INT 1
26559: ARRAY
26560: PPUSH
26561: LD_VAR 0 14
26565: PUSH
26566: LD_VAR 0 9
26570: ARRAY
26571: PUSH
26572: LD_INT 2
26574: ARRAY
26575: PPUSH
26576: CALL_OW 351
26580: PUSH
26581: LD_VAR 0 14
26585: PUSH
26586: LD_VAR 0 9
26590: ARRAY
26591: PUSH
26592: LD_INT 1
26594: ARRAY
26595: PPUSH
26596: LD_VAR 0 14
26600: PUSH
26601: LD_VAR 0 9
26605: ARRAY
26606: PUSH
26607: LD_INT 2
26609: ARRAY
26610: PPUSH
26611: CALL_OW 488
26615: NOT
26616: OR
26617: PUSH
26618: LD_VAR 0 13
26622: PPUSH
26623: CALL_OW 247
26627: PUSH
26628: LD_INT 3
26630: EQUAL
26631: OR
26632: IFFALSE 26638
// exit ;
26634: POP
26635: POP
26636: GO 27182
// if not tmp then
26638: LD_VAR 0 13
26642: NOT
26643: IFFALSE 26647
// continue ;
26645: GO 26503
// result := true ;
26647: LD_ADDR_VAR 0 8
26651: PUSH
26652: LD_INT 1
26654: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
26655: LD_VAR 0 6
26659: PUSH
26660: LD_VAR 0 13
26664: PPUSH
26665: CALL_OW 247
26669: PUSH
26670: LD_INT 2
26672: EQUAL
26673: AND
26674: PUSH
26675: LD_VAR 0 13
26679: PPUSH
26680: CALL_OW 263
26684: PUSH
26685: LD_INT 1
26687: EQUAL
26688: AND
26689: IFFALSE 26853
// begin if IsDrivenBy ( tmp ) then
26691: LD_VAR 0 13
26695: PPUSH
26696: CALL_OW 311
26700: IFFALSE 26704
// continue ;
26702: GO 26503
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
26704: LD_VAR 0 6
26708: PPUSH
26709: LD_INT 3
26711: PUSH
26712: LD_INT 60
26714: PUSH
26715: EMPTY
26716: LIST
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: LD_INT 3
26724: PUSH
26725: LD_INT 55
26727: PUSH
26728: EMPTY
26729: LIST
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PPUSH
26739: CALL_OW 72
26743: IFFALSE 26851
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
26745: LD_ADDR_VAR 0 18
26749: PUSH
26750: LD_VAR 0 6
26754: PPUSH
26755: LD_INT 3
26757: PUSH
26758: LD_INT 60
26760: PUSH
26761: EMPTY
26762: LIST
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: PUSH
26768: LD_INT 3
26770: PUSH
26771: LD_INT 55
26773: PUSH
26774: EMPTY
26775: LIST
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PPUSH
26785: CALL_OW 72
26789: PUSH
26790: LD_INT 1
26792: ARRAY
26793: ST_TO_ADDR
// if IsInUnit ( driver ) then
26794: LD_VAR 0 18
26798: PPUSH
26799: CALL_OW 310
26803: IFFALSE 26814
// ComExit ( driver ) ;
26805: LD_VAR 0 18
26809: PPUSH
26810: CALL 51603 0 1
// AddComEnterUnit ( driver , tmp ) ;
26814: LD_VAR 0 18
26818: PPUSH
26819: LD_VAR 0 13
26823: PPUSH
26824: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
26828: LD_VAR 0 18
26832: PPUSH
26833: LD_VAR 0 7
26837: PPUSH
26838: CALL_OW 173
// AddComExitVehicle ( driver ) ;
26842: LD_VAR 0 18
26846: PPUSH
26847: CALL_OW 181
// end ; continue ;
26851: GO 26503
// end ; if not cleaners or not tmp in cleaners then
26853: LD_VAR 0 6
26857: NOT
26858: PUSH
26859: LD_VAR 0 13
26863: PUSH
26864: LD_VAR 0 6
26868: IN
26869: NOT
26870: OR
26871: IFFALSE 27178
// begin if dep then
26873: LD_VAR 0 17
26877: IFFALSE 27013
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
26879: LD_ADDR_VAR 0 16
26883: PUSH
26884: LD_VAR 0 17
26888: PUSH
26889: LD_INT 1
26891: ARRAY
26892: PPUSH
26893: CALL_OW 250
26897: PPUSH
26898: LD_VAR 0 17
26902: PUSH
26903: LD_INT 1
26905: ARRAY
26906: PPUSH
26907: CALL_OW 254
26911: PPUSH
26912: LD_INT 5
26914: PPUSH
26915: CALL_OW 272
26919: PUSH
26920: LD_VAR 0 17
26924: PUSH
26925: LD_INT 1
26927: ARRAY
26928: PPUSH
26929: CALL_OW 251
26933: PPUSH
26934: LD_VAR 0 17
26938: PUSH
26939: LD_INT 1
26941: ARRAY
26942: PPUSH
26943: CALL_OW 254
26947: PPUSH
26948: LD_INT 5
26950: PPUSH
26951: CALL_OW 273
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
26960: LD_VAR 0 16
26964: PUSH
26965: LD_INT 1
26967: ARRAY
26968: PPUSH
26969: LD_VAR 0 16
26973: PUSH
26974: LD_INT 2
26976: ARRAY
26977: PPUSH
26978: CALL_OW 488
26982: IFFALSE 27013
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
26984: LD_VAR 0 13
26988: PPUSH
26989: LD_VAR 0 16
26993: PUSH
26994: LD_INT 1
26996: ARRAY
26997: PPUSH
26998: LD_VAR 0 16
27002: PUSH
27003: LD_INT 2
27005: ARRAY
27006: PPUSH
27007: CALL_OW 111
// continue ;
27011: GO 26503
// end ; end ; r := GetDir ( tmp ) ;
27013: LD_ADDR_VAR 0 15
27017: PUSH
27018: LD_VAR 0 13
27022: PPUSH
27023: CALL_OW 254
27027: ST_TO_ADDR
// if r = 5 then
27028: LD_VAR 0 15
27032: PUSH
27033: LD_INT 5
27035: EQUAL
27036: IFFALSE 27046
// r := 0 ;
27038: LD_ADDR_VAR 0 15
27042: PUSH
27043: LD_INT 0
27045: ST_TO_ADDR
// for j = r to 5 do
27046: LD_ADDR_VAR 0 10
27050: PUSH
27051: DOUBLE
27052: LD_VAR 0 15
27056: DEC
27057: ST_TO_ADDR
27058: LD_INT 5
27060: PUSH
27061: FOR_TO
27062: IFFALSE 27176
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
27064: LD_ADDR_VAR 0 11
27068: PUSH
27069: LD_VAR 0 13
27073: PPUSH
27074: CALL_OW 250
27078: PPUSH
27079: LD_VAR 0 10
27083: PPUSH
27084: LD_INT 2
27086: PPUSH
27087: CALL_OW 272
27091: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
27092: LD_ADDR_VAR 0 12
27096: PUSH
27097: LD_VAR 0 13
27101: PPUSH
27102: CALL_OW 251
27106: PPUSH
27107: LD_VAR 0 10
27111: PPUSH
27112: LD_INT 2
27114: PPUSH
27115: CALL_OW 273
27119: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
27120: LD_VAR 0 11
27124: PPUSH
27125: LD_VAR 0 12
27129: PPUSH
27130: CALL_OW 488
27134: PUSH
27135: LD_VAR 0 11
27139: PPUSH
27140: LD_VAR 0 12
27144: PPUSH
27145: CALL_OW 428
27149: NOT
27150: AND
27151: IFFALSE 27174
// begin ComMoveXY ( tmp , _x , _y ) ;
27153: LD_VAR 0 13
27157: PPUSH
27158: LD_VAR 0 11
27162: PPUSH
27163: LD_VAR 0 12
27167: PPUSH
27168: CALL_OW 111
// break ;
27172: GO 27176
// end ; end ;
27174: GO 27061
27176: POP
27177: POP
// end ; end ;
27178: GO 26503
27180: POP
27181: POP
// end ;
27182: LD_VAR 0 8
27186: RET
// export function BuildingTechInvented ( side , btype ) ; begin
27187: LD_INT 0
27189: PPUSH
// result := true ;
27190: LD_ADDR_VAR 0 3
27194: PUSH
27195: LD_INT 1
27197: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
27198: LD_VAR 0 2
27202: PUSH
27203: LD_INT 24
27205: DOUBLE
27206: EQUAL
27207: IFTRUE 27217
27209: LD_INT 33
27211: DOUBLE
27212: EQUAL
27213: IFTRUE 27217
27215: GO 27242
27217: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
27218: LD_ADDR_VAR 0 3
27222: PUSH
27223: LD_INT 32
27225: PPUSH
27226: LD_VAR 0 1
27230: PPUSH
27231: CALL_OW 321
27235: PUSH
27236: LD_INT 2
27238: EQUAL
27239: ST_TO_ADDR
27240: GO 27562
27242: LD_INT 20
27244: DOUBLE
27245: EQUAL
27246: IFTRUE 27250
27248: GO 27275
27250: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
27251: LD_ADDR_VAR 0 3
27255: PUSH
27256: LD_INT 6
27258: PPUSH
27259: LD_VAR 0 1
27263: PPUSH
27264: CALL_OW 321
27268: PUSH
27269: LD_INT 2
27271: EQUAL
27272: ST_TO_ADDR
27273: GO 27562
27275: LD_INT 22
27277: DOUBLE
27278: EQUAL
27279: IFTRUE 27289
27281: LD_INT 36
27283: DOUBLE
27284: EQUAL
27285: IFTRUE 27289
27287: GO 27314
27289: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
27290: LD_ADDR_VAR 0 3
27294: PUSH
27295: LD_INT 15
27297: PPUSH
27298: LD_VAR 0 1
27302: PPUSH
27303: CALL_OW 321
27307: PUSH
27308: LD_INT 2
27310: EQUAL
27311: ST_TO_ADDR
27312: GO 27562
27314: LD_INT 30
27316: DOUBLE
27317: EQUAL
27318: IFTRUE 27322
27320: GO 27347
27322: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
27323: LD_ADDR_VAR 0 3
27327: PUSH
27328: LD_INT 20
27330: PPUSH
27331: LD_VAR 0 1
27335: PPUSH
27336: CALL_OW 321
27340: PUSH
27341: LD_INT 2
27343: EQUAL
27344: ST_TO_ADDR
27345: GO 27562
27347: LD_INT 28
27349: DOUBLE
27350: EQUAL
27351: IFTRUE 27361
27353: LD_INT 21
27355: DOUBLE
27356: EQUAL
27357: IFTRUE 27361
27359: GO 27386
27361: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
27362: LD_ADDR_VAR 0 3
27366: PUSH
27367: LD_INT 21
27369: PPUSH
27370: LD_VAR 0 1
27374: PPUSH
27375: CALL_OW 321
27379: PUSH
27380: LD_INT 2
27382: EQUAL
27383: ST_TO_ADDR
27384: GO 27562
27386: LD_INT 16
27388: DOUBLE
27389: EQUAL
27390: IFTRUE 27394
27392: GO 27421
27394: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
27395: LD_ADDR_VAR 0 3
27399: PUSH
27400: LD_EXP 111
27404: PPUSH
27405: LD_VAR 0 1
27409: PPUSH
27410: CALL_OW 321
27414: PUSH
27415: LD_INT 2
27417: EQUAL
27418: ST_TO_ADDR
27419: GO 27562
27421: LD_INT 19
27423: DOUBLE
27424: EQUAL
27425: IFTRUE 27435
27427: LD_INT 23
27429: DOUBLE
27430: EQUAL
27431: IFTRUE 27435
27433: GO 27462
27435: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
27436: LD_ADDR_VAR 0 3
27440: PUSH
27441: LD_EXP 110
27445: PPUSH
27446: LD_VAR 0 1
27450: PPUSH
27451: CALL_OW 321
27455: PUSH
27456: LD_INT 2
27458: EQUAL
27459: ST_TO_ADDR
27460: GO 27562
27462: LD_INT 17
27464: DOUBLE
27465: EQUAL
27466: IFTRUE 27470
27468: GO 27495
27470: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
27471: LD_ADDR_VAR 0 3
27475: PUSH
27476: LD_INT 39
27478: PPUSH
27479: LD_VAR 0 1
27483: PPUSH
27484: CALL_OW 321
27488: PUSH
27489: LD_INT 2
27491: EQUAL
27492: ST_TO_ADDR
27493: GO 27562
27495: LD_INT 18
27497: DOUBLE
27498: EQUAL
27499: IFTRUE 27503
27501: GO 27528
27503: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
27504: LD_ADDR_VAR 0 3
27508: PUSH
27509: LD_INT 40
27511: PPUSH
27512: LD_VAR 0 1
27516: PPUSH
27517: CALL_OW 321
27521: PUSH
27522: LD_INT 2
27524: EQUAL
27525: ST_TO_ADDR
27526: GO 27562
27528: LD_INT 27
27530: DOUBLE
27531: EQUAL
27532: IFTRUE 27536
27534: GO 27561
27536: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
27537: LD_ADDR_VAR 0 3
27541: PUSH
27542: LD_INT 35
27544: PPUSH
27545: LD_VAR 0 1
27549: PPUSH
27550: CALL_OW 321
27554: PUSH
27555: LD_INT 2
27557: EQUAL
27558: ST_TO_ADDR
27559: GO 27562
27561: POP
// end ;
27562: LD_VAR 0 3
27566: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
27567: LD_INT 0
27569: PPUSH
27570: PPUSH
27571: PPUSH
27572: PPUSH
27573: PPUSH
27574: PPUSH
27575: PPUSH
27576: PPUSH
27577: PPUSH
27578: PPUSH
27579: PPUSH
// result := false ;
27580: LD_ADDR_VAR 0 6
27584: PUSH
27585: LD_INT 0
27587: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
27588: LD_VAR 0 1
27592: NOT
27593: PUSH
27594: LD_VAR 0 1
27598: PPUSH
27599: CALL_OW 266
27603: PUSH
27604: LD_INT 0
27606: PUSH
27607: LD_INT 1
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: IN
27614: NOT
27615: OR
27616: PUSH
27617: LD_VAR 0 2
27621: NOT
27622: OR
27623: PUSH
27624: LD_VAR 0 5
27628: PUSH
27629: LD_INT 0
27631: PUSH
27632: LD_INT 1
27634: PUSH
27635: LD_INT 2
27637: PUSH
27638: LD_INT 3
27640: PUSH
27641: LD_INT 4
27643: PUSH
27644: LD_INT 5
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: IN
27655: NOT
27656: OR
27657: PUSH
27658: LD_VAR 0 3
27662: PPUSH
27663: LD_VAR 0 4
27667: PPUSH
27668: CALL_OW 488
27672: NOT
27673: OR
27674: IFFALSE 27678
// exit ;
27676: GO 28414
// side := GetSide ( depot ) ;
27678: LD_ADDR_VAR 0 9
27682: PUSH
27683: LD_VAR 0 1
27687: PPUSH
27688: CALL_OW 255
27692: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
27693: LD_VAR 0 9
27697: PPUSH
27698: LD_VAR 0 2
27702: PPUSH
27703: CALL 27187 0 2
27707: NOT
27708: IFFALSE 27712
// exit ;
27710: GO 28414
// pom := GetBase ( depot ) ;
27712: LD_ADDR_VAR 0 10
27716: PUSH
27717: LD_VAR 0 1
27721: PPUSH
27722: CALL_OW 274
27726: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
27727: LD_ADDR_VAR 0 11
27731: PUSH
27732: LD_VAR 0 2
27736: PPUSH
27737: LD_VAR 0 1
27741: PPUSH
27742: CALL_OW 248
27746: PPUSH
27747: CALL_OW 450
27751: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
27752: LD_VAR 0 10
27756: PPUSH
27757: LD_INT 1
27759: PPUSH
27760: CALL_OW 275
27764: PUSH
27765: LD_VAR 0 11
27769: PUSH
27770: LD_INT 1
27772: ARRAY
27773: GREATEREQUAL
27774: PUSH
27775: LD_VAR 0 10
27779: PPUSH
27780: LD_INT 2
27782: PPUSH
27783: CALL_OW 275
27787: PUSH
27788: LD_VAR 0 11
27792: PUSH
27793: LD_INT 2
27795: ARRAY
27796: GREATEREQUAL
27797: AND
27798: PUSH
27799: LD_VAR 0 10
27803: PPUSH
27804: LD_INT 3
27806: PPUSH
27807: CALL_OW 275
27811: PUSH
27812: LD_VAR 0 11
27816: PUSH
27817: LD_INT 3
27819: ARRAY
27820: GREATEREQUAL
27821: AND
27822: NOT
27823: IFFALSE 27827
// exit ;
27825: GO 28414
// if GetBType ( depot ) = b_depot then
27827: LD_VAR 0 1
27831: PPUSH
27832: CALL_OW 266
27836: PUSH
27837: LD_INT 0
27839: EQUAL
27840: IFFALSE 27852
// dist := 28 else
27842: LD_ADDR_VAR 0 14
27846: PUSH
27847: LD_INT 28
27849: ST_TO_ADDR
27850: GO 27860
// dist := 36 ;
27852: LD_ADDR_VAR 0 14
27856: PUSH
27857: LD_INT 36
27859: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
27860: LD_VAR 0 1
27864: PPUSH
27865: LD_VAR 0 3
27869: PPUSH
27870: LD_VAR 0 4
27874: PPUSH
27875: CALL_OW 297
27879: PUSH
27880: LD_VAR 0 14
27884: GREATER
27885: IFFALSE 27889
// exit ;
27887: GO 28414
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
27889: LD_ADDR_VAR 0 12
27893: PUSH
27894: LD_VAR 0 2
27898: PPUSH
27899: LD_VAR 0 3
27903: PPUSH
27904: LD_VAR 0 4
27908: PPUSH
27909: LD_VAR 0 5
27913: PPUSH
27914: LD_VAR 0 1
27918: PPUSH
27919: CALL_OW 248
27923: PPUSH
27924: LD_INT 0
27926: PPUSH
27927: CALL 28419 0 6
27931: ST_TO_ADDR
// if not hexes then
27932: LD_VAR 0 12
27936: NOT
27937: IFFALSE 27941
// exit ;
27939: GO 28414
// hex := GetHexInfo ( x , y ) ;
27941: LD_ADDR_VAR 0 15
27945: PUSH
27946: LD_VAR 0 3
27950: PPUSH
27951: LD_VAR 0 4
27955: PPUSH
27956: CALL_OW 546
27960: ST_TO_ADDR
// if hex [ 1 ] then
27961: LD_VAR 0 15
27965: PUSH
27966: LD_INT 1
27968: ARRAY
27969: IFFALSE 27973
// exit ;
27971: GO 28414
// height := hex [ 2 ] ;
27973: LD_ADDR_VAR 0 13
27977: PUSH
27978: LD_VAR 0 15
27982: PUSH
27983: LD_INT 2
27985: ARRAY
27986: ST_TO_ADDR
// for i = 1 to hexes do
27987: LD_ADDR_VAR 0 7
27991: PUSH
27992: DOUBLE
27993: LD_INT 1
27995: DEC
27996: ST_TO_ADDR
27997: LD_VAR 0 12
28001: PUSH
28002: FOR_TO
28003: IFFALSE 28333
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
28005: LD_VAR 0 12
28009: PUSH
28010: LD_VAR 0 7
28014: ARRAY
28015: PUSH
28016: LD_INT 1
28018: ARRAY
28019: PPUSH
28020: LD_VAR 0 12
28024: PUSH
28025: LD_VAR 0 7
28029: ARRAY
28030: PUSH
28031: LD_INT 2
28033: ARRAY
28034: PPUSH
28035: CALL_OW 488
28039: NOT
28040: PUSH
28041: LD_VAR 0 12
28045: PUSH
28046: LD_VAR 0 7
28050: ARRAY
28051: PUSH
28052: LD_INT 1
28054: ARRAY
28055: PPUSH
28056: LD_VAR 0 12
28060: PUSH
28061: LD_VAR 0 7
28065: ARRAY
28066: PUSH
28067: LD_INT 2
28069: ARRAY
28070: PPUSH
28071: CALL_OW 428
28075: PUSH
28076: LD_INT 0
28078: GREATER
28079: OR
28080: PUSH
28081: LD_VAR 0 12
28085: PUSH
28086: LD_VAR 0 7
28090: ARRAY
28091: PUSH
28092: LD_INT 1
28094: ARRAY
28095: PPUSH
28096: LD_VAR 0 12
28100: PUSH
28101: LD_VAR 0 7
28105: ARRAY
28106: PUSH
28107: LD_INT 2
28109: ARRAY
28110: PPUSH
28111: CALL_OW 351
28115: OR
28116: IFFALSE 28122
// exit ;
28118: POP
28119: POP
28120: GO 28414
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28122: LD_ADDR_VAR 0 8
28126: PUSH
28127: LD_VAR 0 12
28131: PUSH
28132: LD_VAR 0 7
28136: ARRAY
28137: PUSH
28138: LD_INT 1
28140: ARRAY
28141: PPUSH
28142: LD_VAR 0 12
28146: PUSH
28147: LD_VAR 0 7
28151: ARRAY
28152: PUSH
28153: LD_INT 2
28155: ARRAY
28156: PPUSH
28157: CALL_OW 546
28161: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
28162: LD_VAR 0 8
28166: PUSH
28167: LD_INT 1
28169: ARRAY
28170: PUSH
28171: LD_VAR 0 8
28175: PUSH
28176: LD_INT 2
28178: ARRAY
28179: PUSH
28180: LD_VAR 0 13
28184: PUSH
28185: LD_INT 2
28187: PLUS
28188: GREATER
28189: OR
28190: PUSH
28191: LD_VAR 0 8
28195: PUSH
28196: LD_INT 2
28198: ARRAY
28199: PUSH
28200: LD_VAR 0 13
28204: PUSH
28205: LD_INT 2
28207: MINUS
28208: LESS
28209: OR
28210: PUSH
28211: LD_VAR 0 8
28215: PUSH
28216: LD_INT 3
28218: ARRAY
28219: PUSH
28220: LD_INT 0
28222: PUSH
28223: LD_INT 8
28225: PUSH
28226: LD_INT 9
28228: PUSH
28229: LD_INT 10
28231: PUSH
28232: LD_INT 11
28234: PUSH
28235: LD_INT 12
28237: PUSH
28238: LD_INT 13
28240: PUSH
28241: LD_INT 16
28243: PUSH
28244: LD_INT 17
28246: PUSH
28247: LD_INT 18
28249: PUSH
28250: LD_INT 19
28252: PUSH
28253: LD_INT 20
28255: PUSH
28256: LD_INT 21
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: IN
28274: NOT
28275: OR
28276: PUSH
28277: LD_VAR 0 8
28281: PUSH
28282: LD_INT 5
28284: ARRAY
28285: NOT
28286: OR
28287: PUSH
28288: LD_VAR 0 8
28292: PUSH
28293: LD_INT 6
28295: ARRAY
28296: PUSH
28297: LD_INT 1
28299: PUSH
28300: LD_INT 2
28302: PUSH
28303: LD_INT 7
28305: PUSH
28306: LD_INT 9
28308: PUSH
28309: LD_INT 10
28311: PUSH
28312: LD_INT 11
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: IN
28323: NOT
28324: OR
28325: IFFALSE 28331
// exit ;
28327: POP
28328: POP
28329: GO 28414
// end ;
28331: GO 28002
28333: POP
28334: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
28335: LD_VAR 0 9
28339: PPUSH
28340: LD_VAR 0 3
28344: PPUSH
28345: LD_VAR 0 4
28349: PPUSH
28350: LD_INT 20
28352: PPUSH
28353: CALL 20360 0 4
28357: PUSH
28358: LD_INT 4
28360: ARRAY
28361: IFFALSE 28365
// exit ;
28363: GO 28414
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
28365: LD_VAR 0 2
28369: PUSH
28370: LD_INT 29
28372: PUSH
28373: LD_INT 30
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: IN
28380: PUSH
28381: LD_VAR 0 3
28385: PPUSH
28386: LD_VAR 0 4
28390: PPUSH
28391: LD_VAR 0 9
28395: PPUSH
28396: CALL_OW 440
28400: NOT
28401: AND
28402: IFFALSE 28406
// exit ;
28404: GO 28414
// result := true ;
28406: LD_ADDR_VAR 0 6
28410: PUSH
28411: LD_INT 1
28413: ST_TO_ADDR
// end ;
28414: LD_VAR 0 6
28418: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
28419: LD_INT 0
28421: PPUSH
28422: PPUSH
28423: PPUSH
28424: PPUSH
28425: PPUSH
28426: PPUSH
28427: PPUSH
28428: PPUSH
28429: PPUSH
28430: PPUSH
28431: PPUSH
28432: PPUSH
28433: PPUSH
28434: PPUSH
28435: PPUSH
28436: PPUSH
28437: PPUSH
28438: PPUSH
28439: PPUSH
28440: PPUSH
28441: PPUSH
28442: PPUSH
28443: PPUSH
28444: PPUSH
28445: PPUSH
28446: PPUSH
28447: PPUSH
28448: PPUSH
28449: PPUSH
28450: PPUSH
28451: PPUSH
28452: PPUSH
28453: PPUSH
28454: PPUSH
28455: PPUSH
28456: PPUSH
28457: PPUSH
28458: PPUSH
28459: PPUSH
28460: PPUSH
28461: PPUSH
28462: PPUSH
28463: PPUSH
28464: PPUSH
28465: PPUSH
28466: PPUSH
28467: PPUSH
28468: PPUSH
28469: PPUSH
28470: PPUSH
28471: PPUSH
28472: PPUSH
28473: PPUSH
28474: PPUSH
28475: PPUSH
28476: PPUSH
28477: PPUSH
28478: PPUSH
// result = [ ] ;
28479: LD_ADDR_VAR 0 7
28483: PUSH
28484: EMPTY
28485: ST_TO_ADDR
// temp_list = [ ] ;
28486: LD_ADDR_VAR 0 9
28490: PUSH
28491: EMPTY
28492: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
28493: LD_VAR 0 4
28497: PUSH
28498: LD_INT 0
28500: PUSH
28501: LD_INT 1
28503: PUSH
28504: LD_INT 2
28506: PUSH
28507: LD_INT 3
28509: PUSH
28510: LD_INT 4
28512: PUSH
28513: LD_INT 5
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: IN
28524: NOT
28525: PUSH
28526: LD_VAR 0 1
28530: PUSH
28531: LD_INT 0
28533: PUSH
28534: LD_INT 1
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: IN
28541: PUSH
28542: LD_VAR 0 5
28546: PUSH
28547: LD_INT 1
28549: PUSH
28550: LD_INT 2
28552: PUSH
28553: LD_INT 3
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: LIST
28560: IN
28561: NOT
28562: AND
28563: OR
28564: IFFALSE 28568
// exit ;
28566: GO 46959
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
28568: LD_VAR 0 1
28572: PUSH
28573: LD_INT 6
28575: PUSH
28576: LD_INT 7
28578: PUSH
28579: LD_INT 8
28581: PUSH
28582: LD_INT 13
28584: PUSH
28585: LD_INT 12
28587: PUSH
28588: LD_INT 15
28590: PUSH
28591: LD_INT 11
28593: PUSH
28594: LD_INT 14
28596: PUSH
28597: LD_INT 10
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: IN
28611: IFFALSE 28621
// btype = b_lab ;
28613: LD_ADDR_VAR 0 1
28617: PUSH
28618: LD_INT 6
28620: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
28621: LD_VAR 0 6
28625: PUSH
28626: LD_INT 0
28628: PUSH
28629: LD_INT 1
28631: PUSH
28632: LD_INT 2
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: LIST
28639: IN
28640: NOT
28641: PUSH
28642: LD_VAR 0 1
28646: PUSH
28647: LD_INT 0
28649: PUSH
28650: LD_INT 1
28652: PUSH
28653: LD_INT 2
28655: PUSH
28656: LD_INT 3
28658: PUSH
28659: LD_INT 6
28661: PUSH
28662: LD_INT 36
28664: PUSH
28665: LD_INT 4
28667: PUSH
28668: LD_INT 5
28670: PUSH
28671: LD_INT 31
28673: PUSH
28674: LD_INT 32
28676: PUSH
28677: LD_INT 33
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: LIST
28692: IN
28693: NOT
28694: PUSH
28695: LD_VAR 0 6
28699: PUSH
28700: LD_INT 1
28702: EQUAL
28703: AND
28704: OR
28705: PUSH
28706: LD_VAR 0 1
28710: PUSH
28711: LD_INT 2
28713: PUSH
28714: LD_INT 3
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: IN
28721: NOT
28722: PUSH
28723: LD_VAR 0 6
28727: PUSH
28728: LD_INT 2
28730: EQUAL
28731: AND
28732: OR
28733: IFFALSE 28743
// mode = 0 ;
28735: LD_ADDR_VAR 0 6
28739: PUSH
28740: LD_INT 0
28742: ST_TO_ADDR
// case mode of 0 :
28743: LD_VAR 0 6
28747: PUSH
28748: LD_INT 0
28750: DOUBLE
28751: EQUAL
28752: IFTRUE 28756
28754: GO 40209
28756: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28757: LD_ADDR_VAR 0 11
28761: PUSH
28762: LD_INT 0
28764: PUSH
28765: LD_INT 0
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 0
28774: PUSH
28775: LD_INT 1
28777: NEG
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 1
28785: PUSH
28786: LD_INT 0
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 1
28795: PUSH
28796: LD_INT 1
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 0
28805: PUSH
28806: LD_INT 1
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 1
28815: NEG
28816: PUSH
28817: LD_INT 0
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 1
28826: NEG
28827: PUSH
28828: LD_INT 1
28830: NEG
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 1
28838: NEG
28839: PUSH
28840: LD_INT 2
28842: NEG
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 0
28850: PUSH
28851: LD_INT 2
28853: NEG
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 1
28861: PUSH
28862: LD_INT 1
28864: NEG
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 1
28872: PUSH
28873: LD_INT 2
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PUSH
28880: LD_INT 0
28882: PUSH
28883: LD_INT 2
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: LD_INT 1
28892: NEG
28893: PUSH
28894: LD_INT 1
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 1
28903: PUSH
28904: LD_INT 3
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 0
28913: PUSH
28914: LD_INT 3
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: LD_INT 1
28923: NEG
28924: PUSH
28925: LD_INT 2
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28950: LD_ADDR_VAR 0 12
28954: PUSH
28955: LD_INT 0
28957: PUSH
28958: LD_INT 0
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: LD_INT 0
28967: PUSH
28968: LD_INT 1
28970: NEG
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 1
28978: PUSH
28979: LD_INT 0
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 1
28988: PUSH
28989: LD_INT 1
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 0
28998: PUSH
28999: LD_INT 1
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 1
29008: NEG
29009: PUSH
29010: LD_INT 0
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 1
29019: NEG
29020: PUSH
29021: LD_INT 1
29023: NEG
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 1
29031: PUSH
29032: LD_INT 1
29034: NEG
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 2
29042: PUSH
29043: LD_INT 0
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 2
29052: PUSH
29053: LD_INT 1
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 1
29062: NEG
29063: PUSH
29064: LD_INT 1
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 2
29073: NEG
29074: PUSH
29075: LD_INT 0
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 2
29084: NEG
29085: PUSH
29086: LD_INT 1
29088: NEG
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: LD_INT 2
29096: NEG
29097: PUSH
29098: LD_INT 1
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 3
29107: NEG
29108: PUSH
29109: LD_INT 0
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: LD_INT 3
29118: NEG
29119: PUSH
29120: LD_INT 1
29122: NEG
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29146: LD_ADDR_VAR 0 13
29150: PUSH
29151: LD_INT 0
29153: PUSH
29154: LD_INT 0
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 0
29163: PUSH
29164: LD_INT 1
29166: NEG
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 1
29174: PUSH
29175: LD_INT 0
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 1
29184: PUSH
29185: LD_INT 1
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 0
29194: PUSH
29195: LD_INT 1
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 1
29204: NEG
29205: PUSH
29206: LD_INT 0
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 1
29215: NEG
29216: PUSH
29217: LD_INT 1
29219: NEG
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PUSH
29225: LD_INT 1
29227: NEG
29228: PUSH
29229: LD_INT 2
29231: NEG
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 2
29239: PUSH
29240: LD_INT 1
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 2
29249: PUSH
29250: LD_INT 2
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 1
29259: PUSH
29260: LD_INT 2
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 2
29269: NEG
29270: PUSH
29271: LD_INT 1
29273: NEG
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 2
29281: NEG
29282: PUSH
29283: LD_INT 2
29285: NEG
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: LD_INT 2
29293: NEG
29294: PUSH
29295: LD_INT 3
29297: NEG
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: PUSH
29303: LD_INT 3
29305: NEG
29306: PUSH
29307: LD_INT 2
29309: NEG
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 3
29317: NEG
29318: PUSH
29319: LD_INT 3
29321: NEG
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29345: LD_ADDR_VAR 0 14
29349: PUSH
29350: LD_INT 0
29352: PUSH
29353: LD_INT 0
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 0
29362: PUSH
29363: LD_INT 1
29365: NEG
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: LD_INT 1
29373: PUSH
29374: LD_INT 0
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PUSH
29381: LD_INT 1
29383: PUSH
29384: LD_INT 1
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PUSH
29391: LD_INT 0
29393: PUSH
29394: LD_INT 1
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 1
29403: NEG
29404: PUSH
29405: LD_INT 0
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: LD_INT 1
29414: NEG
29415: PUSH
29416: LD_INT 1
29418: NEG
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 1
29426: NEG
29427: PUSH
29428: LD_INT 2
29430: NEG
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 0
29438: PUSH
29439: LD_INT 2
29441: NEG
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 1
29449: PUSH
29450: LD_INT 1
29452: NEG
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 1
29460: PUSH
29461: LD_INT 2
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 0
29470: PUSH
29471: LD_INT 2
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: LD_INT 1
29480: NEG
29481: PUSH
29482: LD_INT 1
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 1
29491: NEG
29492: PUSH
29493: LD_INT 3
29495: NEG
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 0
29503: PUSH
29504: LD_INT 3
29506: NEG
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: PUSH
29512: LD_INT 1
29514: PUSH
29515: LD_INT 2
29517: NEG
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29541: LD_ADDR_VAR 0 15
29545: PUSH
29546: LD_INT 0
29548: PUSH
29549: LD_INT 0
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: LD_INT 0
29558: PUSH
29559: LD_INT 1
29561: NEG
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: LD_INT 1
29569: PUSH
29570: LD_INT 0
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 1
29579: PUSH
29580: LD_INT 1
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 0
29589: PUSH
29590: LD_INT 1
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 1
29599: NEG
29600: PUSH
29601: LD_INT 0
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 1
29610: NEG
29611: PUSH
29612: LD_INT 1
29614: NEG
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 1
29622: PUSH
29623: LD_INT 1
29625: NEG
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 2
29633: PUSH
29634: LD_INT 0
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 2
29643: PUSH
29644: LD_INT 1
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 1
29653: NEG
29654: PUSH
29655: LD_INT 1
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: LD_INT 2
29664: NEG
29665: PUSH
29666: LD_INT 0
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 2
29675: NEG
29676: PUSH
29677: LD_INT 1
29679: NEG
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 2
29687: PUSH
29688: LD_INT 1
29690: NEG
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: LD_INT 3
29698: PUSH
29699: LD_INT 0
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 3
29708: PUSH
29709: LD_INT 1
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29734: LD_ADDR_VAR 0 16
29738: PUSH
29739: LD_INT 0
29741: PUSH
29742: LD_INT 0
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 0
29751: PUSH
29752: LD_INT 1
29754: NEG
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 1
29762: PUSH
29763: LD_INT 0
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 1
29772: PUSH
29773: LD_INT 1
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: LD_INT 0
29782: PUSH
29783: LD_INT 1
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 1
29792: NEG
29793: PUSH
29794: LD_INT 0
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 1
29803: NEG
29804: PUSH
29805: LD_INT 1
29807: NEG
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PUSH
29813: LD_INT 1
29815: NEG
29816: PUSH
29817: LD_INT 2
29819: NEG
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PUSH
29825: LD_INT 2
29827: PUSH
29828: LD_INT 1
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 2
29837: PUSH
29838: LD_INT 2
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 1
29847: PUSH
29848: LD_INT 2
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 2
29857: NEG
29858: PUSH
29859: LD_INT 1
29861: NEG
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 2
29869: NEG
29870: PUSH
29871: LD_INT 2
29873: NEG
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 3
29881: PUSH
29882: LD_INT 2
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 3
29891: PUSH
29892: LD_INT 3
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 2
29901: PUSH
29902: LD_INT 3
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: LIST
29920: LIST
29921: LIST
29922: LIST
29923: LIST
29924: LIST
29925: LIST
29926: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29927: LD_ADDR_VAR 0 17
29931: PUSH
29932: LD_INT 0
29934: PUSH
29935: LD_INT 0
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: LD_INT 0
29944: PUSH
29945: LD_INT 1
29947: NEG
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 1
29955: PUSH
29956: LD_INT 0
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: LD_INT 1
29965: PUSH
29966: LD_INT 1
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: LD_INT 0
29975: PUSH
29976: LD_INT 1
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: LD_INT 1
29985: NEG
29986: PUSH
29987: LD_INT 0
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PUSH
29994: LD_INT 1
29996: NEG
29997: PUSH
29998: LD_INT 1
30000: NEG
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 1
30008: NEG
30009: PUSH
30010: LD_INT 2
30012: NEG
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 0
30020: PUSH
30021: LD_INT 2
30023: NEG
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 1
30031: PUSH
30032: LD_INT 1
30034: NEG
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 2
30042: PUSH
30043: LD_INT 0
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 2
30052: PUSH
30053: LD_INT 1
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 2
30062: PUSH
30063: LD_INT 2
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 1
30072: PUSH
30073: LD_INT 2
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 0
30082: PUSH
30083: LD_INT 2
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: LD_INT 1
30092: NEG
30093: PUSH
30094: LD_INT 1
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 2
30103: NEG
30104: PUSH
30105: LD_INT 0
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 2
30114: NEG
30115: PUSH
30116: LD_INT 1
30118: NEG
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 2
30126: NEG
30127: PUSH
30128: LD_INT 2
30130: NEG
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30157: LD_ADDR_VAR 0 18
30161: PUSH
30162: LD_INT 0
30164: PUSH
30165: LD_INT 0
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 0
30174: PUSH
30175: LD_INT 1
30177: NEG
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: LD_INT 1
30185: PUSH
30186: LD_INT 0
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 1
30195: PUSH
30196: LD_INT 1
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 0
30205: PUSH
30206: LD_INT 1
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 1
30215: NEG
30216: PUSH
30217: LD_INT 0
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 1
30226: NEG
30227: PUSH
30228: LD_INT 1
30230: NEG
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 1
30238: NEG
30239: PUSH
30240: LD_INT 2
30242: NEG
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 0
30250: PUSH
30251: LD_INT 2
30253: NEG
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 1
30261: PUSH
30262: LD_INT 1
30264: NEG
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 2
30272: PUSH
30273: LD_INT 0
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 2
30282: PUSH
30283: LD_INT 1
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 2
30292: PUSH
30293: LD_INT 2
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 1
30302: PUSH
30303: LD_INT 2
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 0
30312: PUSH
30313: LD_INT 2
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 1
30322: NEG
30323: PUSH
30324: LD_INT 1
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 2
30333: NEG
30334: PUSH
30335: LD_INT 0
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: LD_INT 2
30344: NEG
30345: PUSH
30346: LD_INT 1
30348: NEG
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 2
30356: NEG
30357: PUSH
30358: LD_INT 2
30360: NEG
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30387: LD_ADDR_VAR 0 19
30391: PUSH
30392: LD_INT 0
30394: PUSH
30395: LD_INT 0
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 0
30404: PUSH
30405: LD_INT 1
30407: NEG
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 1
30415: PUSH
30416: LD_INT 0
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 1
30425: PUSH
30426: LD_INT 1
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 0
30435: PUSH
30436: LD_INT 1
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 1
30445: NEG
30446: PUSH
30447: LD_INT 0
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: LD_INT 1
30456: NEG
30457: PUSH
30458: LD_INT 1
30460: NEG
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 1
30468: NEG
30469: PUSH
30470: LD_INT 2
30472: NEG
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 0
30480: PUSH
30481: LD_INT 2
30483: NEG
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 1
30491: PUSH
30492: LD_INT 1
30494: NEG
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 2
30502: PUSH
30503: LD_INT 0
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 2
30512: PUSH
30513: LD_INT 1
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 2
30522: PUSH
30523: LD_INT 2
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 1
30532: PUSH
30533: LD_INT 2
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 0
30542: PUSH
30543: LD_INT 2
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 1
30552: NEG
30553: PUSH
30554: LD_INT 1
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 2
30563: NEG
30564: PUSH
30565: LD_INT 0
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 2
30574: NEG
30575: PUSH
30576: LD_INT 1
30578: NEG
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 2
30586: NEG
30587: PUSH
30588: LD_INT 2
30590: NEG
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30617: LD_ADDR_VAR 0 20
30621: PUSH
30622: LD_INT 0
30624: PUSH
30625: LD_INT 0
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 0
30634: PUSH
30635: LD_INT 1
30637: NEG
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 1
30645: PUSH
30646: LD_INT 0
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 1
30655: PUSH
30656: LD_INT 1
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 0
30665: PUSH
30666: LD_INT 1
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 1
30675: NEG
30676: PUSH
30677: LD_INT 0
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: LD_INT 1
30686: NEG
30687: PUSH
30688: LD_INT 1
30690: NEG
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 1
30698: NEG
30699: PUSH
30700: LD_INT 2
30702: NEG
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 0
30710: PUSH
30711: LD_INT 2
30713: NEG
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: LD_INT 1
30721: PUSH
30722: LD_INT 1
30724: NEG
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 2
30732: PUSH
30733: LD_INT 0
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 2
30742: PUSH
30743: LD_INT 1
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 2
30752: PUSH
30753: LD_INT 2
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 1
30762: PUSH
30763: LD_INT 2
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 0
30772: PUSH
30773: LD_INT 2
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 1
30782: NEG
30783: PUSH
30784: LD_INT 1
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 2
30793: NEG
30794: PUSH
30795: LD_INT 0
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: LD_INT 2
30804: NEG
30805: PUSH
30806: LD_INT 1
30808: NEG
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: LD_INT 2
30816: NEG
30817: PUSH
30818: LD_INT 2
30820: NEG
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30847: LD_ADDR_VAR 0 21
30851: PUSH
30852: LD_INT 0
30854: PUSH
30855: LD_INT 0
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 0
30864: PUSH
30865: LD_INT 1
30867: NEG
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 1
30875: PUSH
30876: LD_INT 0
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 1
30885: PUSH
30886: LD_INT 1
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 0
30895: PUSH
30896: LD_INT 1
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 1
30905: NEG
30906: PUSH
30907: LD_INT 0
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 1
30916: NEG
30917: PUSH
30918: LD_INT 1
30920: NEG
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 1
30928: NEG
30929: PUSH
30930: LD_INT 2
30932: NEG
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 0
30940: PUSH
30941: LD_INT 2
30943: NEG
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 1
30951: PUSH
30952: LD_INT 1
30954: NEG
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 2
30962: PUSH
30963: LD_INT 0
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 2
30972: PUSH
30973: LD_INT 1
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 2
30982: PUSH
30983: LD_INT 2
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 1
30992: PUSH
30993: LD_INT 2
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 0
31002: PUSH
31003: LD_INT 2
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 1
31012: NEG
31013: PUSH
31014: LD_INT 1
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: LD_INT 2
31023: NEG
31024: PUSH
31025: LD_INT 0
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 2
31034: NEG
31035: PUSH
31036: LD_INT 1
31038: NEG
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 2
31046: NEG
31047: PUSH
31048: LD_INT 2
31050: NEG
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31077: LD_ADDR_VAR 0 22
31081: PUSH
31082: LD_INT 0
31084: PUSH
31085: LD_INT 0
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 0
31094: PUSH
31095: LD_INT 1
31097: NEG
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: LD_INT 1
31105: PUSH
31106: LD_INT 0
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 1
31115: PUSH
31116: LD_INT 1
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 0
31125: PUSH
31126: LD_INT 1
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 1
31135: NEG
31136: PUSH
31137: LD_INT 0
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 1
31146: NEG
31147: PUSH
31148: LD_INT 1
31150: NEG
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 1
31158: NEG
31159: PUSH
31160: LD_INT 2
31162: NEG
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 0
31170: PUSH
31171: LD_INT 2
31173: NEG
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 1
31181: PUSH
31182: LD_INT 1
31184: NEG
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 2
31192: PUSH
31193: LD_INT 0
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 2
31202: PUSH
31203: LD_INT 1
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 2
31212: PUSH
31213: LD_INT 2
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: LD_INT 1
31222: PUSH
31223: LD_INT 2
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 0
31232: PUSH
31233: LD_INT 2
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 1
31242: NEG
31243: PUSH
31244: LD_INT 1
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 2
31253: NEG
31254: PUSH
31255: LD_INT 0
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 2
31264: NEG
31265: PUSH
31266: LD_INT 1
31268: NEG
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 2
31276: NEG
31277: PUSH
31278: LD_INT 2
31280: NEG
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31307: LD_ADDR_VAR 0 23
31311: PUSH
31312: LD_INT 0
31314: PUSH
31315: LD_INT 0
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 0
31324: PUSH
31325: LD_INT 1
31327: NEG
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 1
31335: PUSH
31336: LD_INT 0
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 1
31345: PUSH
31346: LD_INT 1
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 0
31355: PUSH
31356: LD_INT 1
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 1
31365: NEG
31366: PUSH
31367: LD_INT 0
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 1
31376: NEG
31377: PUSH
31378: LD_INT 1
31380: NEG
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: LD_INT 1
31388: NEG
31389: PUSH
31390: LD_INT 2
31392: NEG
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 0
31400: PUSH
31401: LD_INT 2
31403: NEG
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: LD_INT 1
31411: PUSH
31412: LD_INT 1
31414: NEG
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 2
31422: PUSH
31423: LD_INT 0
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 2
31432: PUSH
31433: LD_INT 1
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 2
31442: PUSH
31443: LD_INT 2
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 1
31452: PUSH
31453: LD_INT 2
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 0
31462: PUSH
31463: LD_INT 2
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 1
31472: NEG
31473: PUSH
31474: LD_INT 1
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 2
31483: NEG
31484: PUSH
31485: LD_INT 0
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 2
31494: NEG
31495: PUSH
31496: LD_INT 1
31498: NEG
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 2
31506: NEG
31507: PUSH
31508: LD_INT 2
31510: NEG
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 2
31518: NEG
31519: PUSH
31520: LD_INT 3
31522: NEG
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 1
31530: NEG
31531: PUSH
31532: LD_INT 3
31534: NEG
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 1
31542: PUSH
31543: LD_INT 2
31545: NEG
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 2
31553: PUSH
31554: LD_INT 1
31556: NEG
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
31587: LD_ADDR_VAR 0 24
31591: PUSH
31592: LD_INT 0
31594: PUSH
31595: LD_INT 0
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 0
31604: PUSH
31605: LD_INT 1
31607: NEG
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 1
31615: PUSH
31616: LD_INT 0
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 1
31625: PUSH
31626: LD_INT 1
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 0
31635: PUSH
31636: LD_INT 1
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 1
31645: NEG
31646: PUSH
31647: LD_INT 0
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 1
31656: NEG
31657: PUSH
31658: LD_INT 1
31660: NEG
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 1
31668: NEG
31669: PUSH
31670: LD_INT 2
31672: NEG
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 0
31680: PUSH
31681: LD_INT 2
31683: NEG
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 1
31691: PUSH
31692: LD_INT 1
31694: NEG
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 2
31702: PUSH
31703: LD_INT 0
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 2
31712: PUSH
31713: LD_INT 1
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 2
31722: PUSH
31723: LD_INT 2
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 1
31732: PUSH
31733: LD_INT 2
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 0
31742: PUSH
31743: LD_INT 2
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 1
31752: NEG
31753: PUSH
31754: LD_INT 1
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 2
31763: NEG
31764: PUSH
31765: LD_INT 0
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 2
31774: NEG
31775: PUSH
31776: LD_INT 1
31778: NEG
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 2
31786: NEG
31787: PUSH
31788: LD_INT 2
31790: NEG
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PUSH
31796: LD_INT 1
31798: PUSH
31799: LD_INT 2
31801: NEG
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 2
31809: PUSH
31810: LD_INT 1
31812: NEG
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 3
31820: PUSH
31821: LD_INT 1
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 3
31830: PUSH
31831: LD_INT 2
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
31863: LD_ADDR_VAR 0 25
31867: PUSH
31868: LD_INT 0
31870: PUSH
31871: LD_INT 0
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 0
31880: PUSH
31881: LD_INT 1
31883: NEG
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 1
31891: PUSH
31892: LD_INT 0
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 1
31901: PUSH
31902: LD_INT 1
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 0
31911: PUSH
31912: LD_INT 1
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 1
31921: NEG
31922: PUSH
31923: LD_INT 0
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: PUSH
31930: LD_INT 1
31932: NEG
31933: PUSH
31934: LD_INT 1
31936: NEG
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 1
31944: NEG
31945: PUSH
31946: LD_INT 2
31948: NEG
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 0
31956: PUSH
31957: LD_INT 2
31959: NEG
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 1
31967: PUSH
31968: LD_INT 1
31970: NEG
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: LD_INT 2
31978: PUSH
31979: LD_INT 0
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 2
31988: PUSH
31989: LD_INT 1
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 2
31998: PUSH
31999: LD_INT 2
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 1
32008: PUSH
32009: LD_INT 2
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 0
32018: PUSH
32019: LD_INT 2
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 1
32028: NEG
32029: PUSH
32030: LD_INT 1
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 2
32039: NEG
32040: PUSH
32041: LD_INT 0
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 2
32050: NEG
32051: PUSH
32052: LD_INT 1
32054: NEG
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 2
32062: NEG
32063: PUSH
32064: LD_INT 2
32066: NEG
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 3
32074: PUSH
32075: LD_INT 1
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 3
32084: PUSH
32085: LD_INT 2
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 2
32094: PUSH
32095: LD_INT 3
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 1
32104: PUSH
32105: LD_INT 3
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32137: LD_ADDR_VAR 0 26
32141: PUSH
32142: LD_INT 0
32144: PUSH
32145: LD_INT 0
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 0
32154: PUSH
32155: LD_INT 1
32157: NEG
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 1
32165: PUSH
32166: LD_INT 0
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 1
32175: PUSH
32176: LD_INT 1
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 0
32185: PUSH
32186: LD_INT 1
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 1
32195: NEG
32196: PUSH
32197: LD_INT 0
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 1
32206: NEG
32207: PUSH
32208: LD_INT 1
32210: NEG
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 1
32218: NEG
32219: PUSH
32220: LD_INT 2
32222: NEG
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 0
32230: PUSH
32231: LD_INT 2
32233: NEG
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 1
32241: PUSH
32242: LD_INT 1
32244: NEG
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 2
32252: PUSH
32253: LD_INT 0
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 2
32262: PUSH
32263: LD_INT 1
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 2
32272: PUSH
32273: LD_INT 2
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 1
32282: PUSH
32283: LD_INT 2
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 0
32292: PUSH
32293: LD_INT 2
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 1
32302: NEG
32303: PUSH
32304: LD_INT 1
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 2
32313: NEG
32314: PUSH
32315: LD_INT 0
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 2
32324: NEG
32325: PUSH
32326: LD_INT 1
32328: NEG
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 2
32336: NEG
32337: PUSH
32338: LD_INT 2
32340: NEG
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 2
32348: PUSH
32349: LD_INT 3
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 1
32358: PUSH
32359: LD_INT 3
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 1
32368: NEG
32369: PUSH
32370: LD_INT 2
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 2
32379: NEG
32380: PUSH
32381: LD_INT 1
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32413: LD_ADDR_VAR 0 27
32417: PUSH
32418: LD_INT 0
32420: PUSH
32421: LD_INT 0
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 0
32430: PUSH
32431: LD_INT 1
32433: NEG
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 1
32441: PUSH
32442: LD_INT 0
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 1
32451: PUSH
32452: LD_INT 1
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 0
32461: PUSH
32462: LD_INT 1
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 1
32471: NEG
32472: PUSH
32473: LD_INT 0
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 1
32482: NEG
32483: PUSH
32484: LD_INT 1
32486: NEG
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 1
32494: NEG
32495: PUSH
32496: LD_INT 2
32498: NEG
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 0
32506: PUSH
32507: LD_INT 2
32509: NEG
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 1
32517: PUSH
32518: LD_INT 1
32520: NEG
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: LD_INT 2
32528: PUSH
32529: LD_INT 0
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: LD_INT 2
32538: PUSH
32539: LD_INT 1
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: PUSH
32546: LD_INT 2
32548: PUSH
32549: LD_INT 2
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 1
32558: PUSH
32559: LD_INT 2
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 0
32568: PUSH
32569: LD_INT 2
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 1
32578: NEG
32579: PUSH
32580: LD_INT 1
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 2
32589: NEG
32590: PUSH
32591: LD_INT 0
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 2
32600: NEG
32601: PUSH
32602: LD_INT 1
32604: NEG
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 2
32612: NEG
32613: PUSH
32614: LD_INT 2
32616: NEG
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 1
32624: NEG
32625: PUSH
32626: LD_INT 2
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 2
32635: NEG
32636: PUSH
32637: LD_INT 1
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 3
32646: NEG
32647: PUSH
32648: LD_INT 1
32650: NEG
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 3
32658: NEG
32659: PUSH
32660: LD_INT 2
32662: NEG
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32693: LD_ADDR_VAR 0 28
32697: PUSH
32698: LD_INT 0
32700: PUSH
32701: LD_INT 0
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 0
32710: PUSH
32711: LD_INT 1
32713: NEG
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 1
32721: PUSH
32722: LD_INT 0
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 1
32731: PUSH
32732: LD_INT 1
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 0
32741: PUSH
32742: LD_INT 1
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 1
32751: NEG
32752: PUSH
32753: LD_INT 0
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 1
32762: NEG
32763: PUSH
32764: LD_INT 1
32766: NEG
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 1
32774: NEG
32775: PUSH
32776: LD_INT 2
32778: NEG
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 0
32786: PUSH
32787: LD_INT 2
32789: NEG
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 1
32797: PUSH
32798: LD_INT 1
32800: NEG
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 2
32808: PUSH
32809: LD_INT 0
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 2
32818: PUSH
32819: LD_INT 1
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 2
32828: PUSH
32829: LD_INT 2
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 1
32838: PUSH
32839: LD_INT 2
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 0
32848: PUSH
32849: LD_INT 2
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 1
32858: NEG
32859: PUSH
32860: LD_INT 1
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 2
32869: NEG
32870: PUSH
32871: LD_INT 0
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 2
32880: NEG
32881: PUSH
32882: LD_INT 1
32884: NEG
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 2
32892: NEG
32893: PUSH
32894: LD_INT 2
32896: NEG
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 2
32904: NEG
32905: PUSH
32906: LD_INT 3
32908: NEG
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 1
32916: NEG
32917: PUSH
32918: LD_INT 3
32920: NEG
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 3
32928: NEG
32929: PUSH
32930: LD_INT 1
32932: NEG
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 3
32940: NEG
32941: PUSH
32942: LD_INT 2
32944: NEG
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32975: LD_ADDR_VAR 0 29
32979: PUSH
32980: LD_INT 0
32982: PUSH
32983: LD_INT 0
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PUSH
32990: LD_INT 0
32992: PUSH
32993: LD_INT 1
32995: NEG
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 1
33003: PUSH
33004: LD_INT 0
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 1
33013: PUSH
33014: LD_INT 1
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 0
33023: PUSH
33024: LD_INT 1
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 1
33033: NEG
33034: PUSH
33035: LD_INT 0
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 1
33044: NEG
33045: PUSH
33046: LD_INT 1
33048: NEG
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 1
33056: NEG
33057: PUSH
33058: LD_INT 2
33060: NEG
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 0
33068: PUSH
33069: LD_INT 2
33071: NEG
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 1
33079: PUSH
33080: LD_INT 1
33082: NEG
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 2
33090: PUSH
33091: LD_INT 0
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 2
33100: PUSH
33101: LD_INT 1
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 1
33110: PUSH
33111: LD_INT 2
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 0
33120: PUSH
33121: LD_INT 2
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 1
33130: NEG
33131: PUSH
33132: LD_INT 1
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 2
33141: NEG
33142: PUSH
33143: LD_INT 1
33145: NEG
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 2
33153: NEG
33154: PUSH
33155: LD_INT 2
33157: NEG
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 2
33165: NEG
33166: PUSH
33167: LD_INT 3
33169: NEG
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 2
33177: PUSH
33178: LD_INT 1
33180: NEG
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 3
33188: PUSH
33189: LD_INT 1
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 1
33198: PUSH
33199: LD_INT 3
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 1
33208: NEG
33209: PUSH
33210: LD_INT 2
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 3
33219: NEG
33220: PUSH
33221: LD_INT 2
33223: NEG
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33254: LD_ADDR_VAR 0 30
33258: PUSH
33259: LD_INT 0
33261: PUSH
33262: LD_INT 0
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 0
33271: PUSH
33272: LD_INT 1
33274: NEG
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 1
33282: PUSH
33283: LD_INT 0
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 1
33292: PUSH
33293: LD_INT 1
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 0
33302: PUSH
33303: LD_INT 1
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 1
33312: NEG
33313: PUSH
33314: LD_INT 0
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 1
33323: NEG
33324: PUSH
33325: LD_INT 1
33327: NEG
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 1
33335: NEG
33336: PUSH
33337: LD_INT 2
33339: NEG
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 0
33347: PUSH
33348: LD_INT 2
33350: NEG
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 1
33358: PUSH
33359: LD_INT 1
33361: NEG
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 2
33369: PUSH
33370: LD_INT 0
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 2
33379: PUSH
33380: LD_INT 1
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 2
33389: PUSH
33390: LD_INT 2
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 1
33399: PUSH
33400: LD_INT 2
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 1
33409: NEG
33410: PUSH
33411: LD_INT 1
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 2
33420: NEG
33421: PUSH
33422: LD_INT 0
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 2
33431: NEG
33432: PUSH
33433: LD_INT 1
33435: NEG
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 1
33443: NEG
33444: PUSH
33445: LD_INT 3
33447: NEG
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 1
33455: PUSH
33456: LD_INT 2
33458: NEG
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 3
33466: PUSH
33467: LD_INT 2
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 2
33476: PUSH
33477: LD_INT 3
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 2
33486: NEG
33487: PUSH
33488: LD_INT 1
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 3
33497: NEG
33498: PUSH
33499: LD_INT 1
33501: NEG
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33532: LD_ADDR_VAR 0 31
33536: PUSH
33537: LD_INT 0
33539: PUSH
33540: LD_INT 0
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 0
33549: PUSH
33550: LD_INT 1
33552: NEG
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 1
33560: PUSH
33561: LD_INT 0
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 1
33570: PUSH
33571: LD_INT 1
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 0
33580: PUSH
33581: LD_INT 1
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 1
33590: NEG
33591: PUSH
33592: LD_INT 0
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 1
33601: NEG
33602: PUSH
33603: LD_INT 1
33605: NEG
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 1
33613: NEG
33614: PUSH
33615: LD_INT 2
33617: NEG
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 1
33625: PUSH
33626: LD_INT 1
33628: NEG
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 2
33636: PUSH
33637: LD_INT 0
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 2
33646: PUSH
33647: LD_INT 1
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 2
33656: PUSH
33657: LD_INT 2
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PUSH
33664: LD_INT 1
33666: PUSH
33667: LD_INT 2
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: LD_INT 0
33676: PUSH
33677: LD_INT 2
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: LD_INT 1
33686: NEG
33687: PUSH
33688: LD_INT 1
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 2
33697: NEG
33698: PUSH
33699: LD_INT 1
33701: NEG
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 2
33709: NEG
33710: PUSH
33711: LD_INT 2
33713: NEG
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 2
33721: NEG
33722: PUSH
33723: LD_INT 3
33725: NEG
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 2
33733: PUSH
33734: LD_INT 1
33736: NEG
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 3
33744: PUSH
33745: LD_INT 1
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 1
33754: PUSH
33755: LD_INT 3
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 1
33764: NEG
33765: PUSH
33766: LD_INT 2
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 3
33775: NEG
33776: PUSH
33777: LD_INT 2
33779: NEG
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33810: LD_ADDR_VAR 0 32
33814: PUSH
33815: LD_INT 0
33817: PUSH
33818: LD_INT 0
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 0
33827: PUSH
33828: LD_INT 1
33830: NEG
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 1
33838: PUSH
33839: LD_INT 0
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 1
33848: PUSH
33849: LD_INT 1
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 0
33858: PUSH
33859: LD_INT 1
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 1
33868: NEG
33869: PUSH
33870: LD_INT 0
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 1
33879: NEG
33880: PUSH
33881: LD_INT 1
33883: NEG
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 1
33891: NEG
33892: PUSH
33893: LD_INT 2
33895: NEG
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 0
33903: PUSH
33904: LD_INT 2
33906: NEG
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: PUSH
33912: LD_INT 1
33914: PUSH
33915: LD_INT 1
33917: NEG
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 2
33925: PUSH
33926: LD_INT 1
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 2
33935: PUSH
33936: LD_INT 2
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 1
33945: PUSH
33946: LD_INT 2
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 0
33955: PUSH
33956: LD_INT 2
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 1
33965: NEG
33966: PUSH
33967: LD_INT 1
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 2
33976: NEG
33977: PUSH
33978: LD_INT 0
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 2
33987: NEG
33988: PUSH
33989: LD_INT 1
33991: NEG
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: LD_INT 1
33999: NEG
34000: PUSH
34001: LD_INT 3
34003: NEG
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 1
34011: PUSH
34012: LD_INT 2
34014: NEG
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 3
34022: PUSH
34023: LD_INT 2
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 2
34032: PUSH
34033: LD_INT 3
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 2
34042: NEG
34043: PUSH
34044: LD_INT 1
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 3
34053: NEG
34054: PUSH
34055: LD_INT 1
34057: NEG
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34088: LD_ADDR_VAR 0 33
34092: PUSH
34093: LD_INT 0
34095: PUSH
34096: LD_INT 0
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 0
34105: PUSH
34106: LD_INT 1
34108: NEG
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 1
34116: PUSH
34117: LD_INT 0
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 1
34126: PUSH
34127: LD_INT 1
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 0
34136: PUSH
34137: LD_INT 1
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 1
34146: NEG
34147: PUSH
34148: LD_INT 0
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 1
34157: NEG
34158: PUSH
34159: LD_INT 1
34161: NEG
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 1
34169: NEG
34170: PUSH
34171: LD_INT 2
34173: NEG
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 1
34181: PUSH
34182: LD_INT 1
34184: NEG
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 2
34192: PUSH
34193: LD_INT 0
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 2
34202: PUSH
34203: LD_INT 1
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 1
34212: PUSH
34213: LD_INT 2
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 0
34222: PUSH
34223: LD_INT 2
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 1
34232: NEG
34233: PUSH
34234: LD_INT 1
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 2
34243: NEG
34244: PUSH
34245: LD_INT 0
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 2
34254: NEG
34255: PUSH
34256: LD_INT 1
34258: NEG
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 2
34266: NEG
34267: PUSH
34268: LD_INT 2
34270: NEG
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 2
34278: NEG
34279: PUSH
34280: LD_INT 3
34282: NEG
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 2
34290: PUSH
34291: LD_INT 1
34293: NEG
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 3
34301: PUSH
34302: LD_INT 1
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 1
34311: PUSH
34312: LD_INT 3
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 1
34321: NEG
34322: PUSH
34323: LD_INT 2
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 3
34332: NEG
34333: PUSH
34334: LD_INT 2
34336: NEG
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34367: LD_ADDR_VAR 0 34
34371: PUSH
34372: LD_INT 0
34374: PUSH
34375: LD_INT 0
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 0
34384: PUSH
34385: LD_INT 1
34387: NEG
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 1
34395: PUSH
34396: LD_INT 0
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 1
34405: PUSH
34406: LD_INT 1
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 0
34415: PUSH
34416: LD_INT 1
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 1
34425: NEG
34426: PUSH
34427: LD_INT 0
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 1
34436: NEG
34437: PUSH
34438: LD_INT 1
34440: NEG
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 1
34448: NEG
34449: PUSH
34450: LD_INT 2
34452: NEG
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 0
34460: PUSH
34461: LD_INT 2
34463: NEG
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: LD_INT 1
34471: PUSH
34472: LD_INT 1
34474: NEG
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 2
34482: PUSH
34483: LD_INT 1
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 2
34492: PUSH
34493: LD_INT 2
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 1
34502: PUSH
34503: LD_INT 2
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 1
34512: NEG
34513: PUSH
34514: LD_INT 1
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 2
34523: NEG
34524: PUSH
34525: LD_INT 0
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 2
34534: NEG
34535: PUSH
34536: LD_INT 1
34538: NEG
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 2
34546: NEG
34547: PUSH
34548: LD_INT 2
34550: NEG
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 1
34558: NEG
34559: PUSH
34560: LD_INT 3
34562: NEG
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 1
34570: PUSH
34571: LD_INT 2
34573: NEG
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 3
34581: PUSH
34582: LD_INT 2
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: LD_INT 2
34591: PUSH
34592: LD_INT 3
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 2
34601: NEG
34602: PUSH
34603: LD_INT 1
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 3
34612: NEG
34613: PUSH
34614: LD_INT 1
34616: NEG
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
34647: LD_ADDR_VAR 0 35
34651: PUSH
34652: LD_INT 0
34654: PUSH
34655: LD_INT 0
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 0
34664: PUSH
34665: LD_INT 1
34667: NEG
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 1
34675: PUSH
34676: LD_INT 0
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 1
34685: PUSH
34686: LD_INT 1
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 0
34695: PUSH
34696: LD_INT 1
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 1
34705: NEG
34706: PUSH
34707: LD_INT 0
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 1
34716: NEG
34717: PUSH
34718: LD_INT 1
34720: NEG
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: LD_INT 2
34728: PUSH
34729: LD_INT 1
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 2
34738: NEG
34739: PUSH
34740: LD_INT 1
34742: NEG
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
34759: LD_ADDR_VAR 0 36
34763: PUSH
34764: LD_INT 0
34766: PUSH
34767: LD_INT 0
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: LD_INT 0
34776: PUSH
34777: LD_INT 1
34779: NEG
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 1
34787: PUSH
34788: LD_INT 0
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 1
34797: PUSH
34798: LD_INT 1
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 0
34807: PUSH
34808: LD_INT 1
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 1
34817: NEG
34818: PUSH
34819: LD_INT 0
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 1
34828: NEG
34829: PUSH
34830: LD_INT 1
34832: NEG
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: LD_INT 1
34840: NEG
34841: PUSH
34842: LD_INT 2
34844: NEG
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 1
34852: PUSH
34853: LD_INT 2
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
34871: LD_ADDR_VAR 0 37
34875: PUSH
34876: LD_INT 0
34878: PUSH
34879: LD_INT 0
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 0
34888: PUSH
34889: LD_INT 1
34891: NEG
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 1
34899: PUSH
34900: LD_INT 0
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 1
34909: PUSH
34910: LD_INT 1
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: LD_INT 1
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 1
34929: NEG
34930: PUSH
34931: LD_INT 0
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 1
34940: NEG
34941: PUSH
34942: LD_INT 1
34944: NEG
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 1
34952: PUSH
34953: LD_INT 1
34955: NEG
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 1
34963: NEG
34964: PUSH
34965: LD_INT 1
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
34983: LD_ADDR_VAR 0 38
34987: PUSH
34988: LD_INT 0
34990: PUSH
34991: LD_INT 0
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 0
35000: PUSH
35001: LD_INT 1
35003: NEG
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 1
35011: PUSH
35012: LD_INT 0
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 1
35021: PUSH
35022: LD_INT 1
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 0
35031: PUSH
35032: LD_INT 1
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 1
35041: NEG
35042: PUSH
35043: LD_INT 0
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 1
35052: NEG
35053: PUSH
35054: LD_INT 1
35056: NEG
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 2
35064: PUSH
35065: LD_INT 1
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 2
35074: NEG
35075: PUSH
35076: LD_INT 1
35078: NEG
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35095: LD_ADDR_VAR 0 39
35099: PUSH
35100: LD_INT 0
35102: PUSH
35103: LD_INT 0
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 0
35112: PUSH
35113: LD_INT 1
35115: NEG
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 1
35123: PUSH
35124: LD_INT 0
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 1
35133: PUSH
35134: LD_INT 1
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 0
35143: PUSH
35144: LD_INT 1
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PUSH
35151: LD_INT 1
35153: NEG
35154: PUSH
35155: LD_INT 0
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 1
35164: NEG
35165: PUSH
35166: LD_INT 1
35168: NEG
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 1
35176: NEG
35177: PUSH
35178: LD_INT 2
35180: NEG
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 1
35188: PUSH
35189: LD_INT 2
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35207: LD_ADDR_VAR 0 40
35211: PUSH
35212: LD_INT 0
35214: PUSH
35215: LD_INT 0
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 0
35224: PUSH
35225: LD_INT 1
35227: NEG
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: LD_INT 1
35235: PUSH
35236: LD_INT 0
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 1
35245: PUSH
35246: LD_INT 1
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: LD_INT 0
35255: PUSH
35256: LD_INT 1
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: LD_INT 1
35265: NEG
35266: PUSH
35267: LD_INT 0
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 1
35276: NEG
35277: PUSH
35278: LD_INT 1
35280: NEG
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: LD_INT 1
35288: PUSH
35289: LD_INT 1
35291: NEG
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 1
35299: NEG
35300: PUSH
35301: LD_INT 1
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35319: LD_ADDR_VAR 0 41
35323: PUSH
35324: LD_INT 0
35326: PUSH
35327: LD_INT 0
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 0
35336: PUSH
35337: LD_INT 1
35339: NEG
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: LD_INT 1
35347: PUSH
35348: LD_INT 0
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: PUSH
35355: LD_INT 1
35357: PUSH
35358: LD_INT 1
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 0
35367: PUSH
35368: LD_INT 1
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 1
35377: NEG
35378: PUSH
35379: LD_INT 0
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PUSH
35386: LD_INT 1
35388: NEG
35389: PUSH
35390: LD_INT 1
35392: NEG
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 1
35400: NEG
35401: PUSH
35402: LD_INT 2
35404: NEG
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 1
35412: PUSH
35413: LD_INT 1
35415: NEG
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 2
35423: PUSH
35424: LD_INT 0
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 2
35433: PUSH
35434: LD_INT 1
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 2
35443: PUSH
35444: LD_INT 2
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 1
35453: PUSH
35454: LD_INT 2
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 1
35463: NEG
35464: PUSH
35465: LD_INT 1
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 2
35474: NEG
35475: PUSH
35476: LD_INT 0
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 2
35485: NEG
35486: PUSH
35487: LD_INT 1
35489: NEG
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: LD_INT 2
35497: NEG
35498: PUSH
35499: LD_INT 2
35501: NEG
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 2
35509: NEG
35510: PUSH
35511: LD_INT 3
35513: NEG
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 2
35521: PUSH
35522: LD_INT 1
35524: NEG
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 3
35532: PUSH
35533: LD_INT 0
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 3
35542: PUSH
35543: LD_INT 1
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 3
35552: PUSH
35553: LD_INT 2
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 3
35562: PUSH
35563: LD_INT 3
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 2
35572: PUSH
35573: LD_INT 3
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 2
35582: NEG
35583: PUSH
35584: LD_INT 1
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 3
35593: NEG
35594: PUSH
35595: LD_INT 0
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: LD_INT 3
35604: NEG
35605: PUSH
35606: LD_INT 1
35608: NEG
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: LD_INT 3
35616: NEG
35617: PUSH
35618: LD_INT 2
35620: NEG
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 3
35628: NEG
35629: PUSH
35630: LD_INT 3
35632: NEG
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35669: LD_ADDR_VAR 0 42
35673: PUSH
35674: LD_INT 0
35676: PUSH
35677: LD_INT 0
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 0
35686: PUSH
35687: LD_INT 1
35689: NEG
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 1
35697: PUSH
35698: LD_INT 0
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: LD_INT 1
35707: PUSH
35708: LD_INT 1
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: LD_INT 0
35717: PUSH
35718: LD_INT 1
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 1
35727: NEG
35728: PUSH
35729: LD_INT 0
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_INT 1
35738: NEG
35739: PUSH
35740: LD_INT 1
35742: NEG
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 1
35750: NEG
35751: PUSH
35752: LD_INT 2
35754: NEG
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 0
35762: PUSH
35763: LD_INT 2
35765: NEG
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 1
35773: PUSH
35774: LD_INT 1
35776: NEG
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 2
35784: PUSH
35785: LD_INT 1
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 2
35794: PUSH
35795: LD_INT 2
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 1
35804: PUSH
35805: LD_INT 2
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 0
35814: PUSH
35815: LD_INT 2
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 1
35824: NEG
35825: PUSH
35826: LD_INT 1
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 2
35835: NEG
35836: PUSH
35837: LD_INT 1
35839: NEG
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 2
35847: NEG
35848: PUSH
35849: LD_INT 2
35851: NEG
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 2
35859: NEG
35860: PUSH
35861: LD_INT 3
35863: NEG
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 1
35871: NEG
35872: PUSH
35873: LD_INT 3
35875: NEG
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 0
35883: PUSH
35884: LD_INT 3
35886: NEG
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 1
35894: PUSH
35895: LD_INT 2
35897: NEG
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 3
35905: PUSH
35906: LD_INT 2
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 3
35915: PUSH
35916: LD_INT 3
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 2
35925: PUSH
35926: LD_INT 3
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 1
35935: PUSH
35936: LD_INT 3
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 0
35945: PUSH
35946: LD_INT 3
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 1
35955: NEG
35956: PUSH
35957: LD_INT 2
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 3
35966: NEG
35967: PUSH
35968: LD_INT 2
35970: NEG
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 3
35978: NEG
35979: PUSH
35980: LD_INT 3
35982: NEG
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36019: LD_ADDR_VAR 0 43
36023: PUSH
36024: LD_INT 0
36026: PUSH
36027: LD_INT 0
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 0
36036: PUSH
36037: LD_INT 1
36039: NEG
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 1
36047: PUSH
36048: LD_INT 0
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 1
36057: PUSH
36058: LD_INT 1
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 0
36067: PUSH
36068: LD_INT 1
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 1
36077: NEG
36078: PUSH
36079: LD_INT 0
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: LD_INT 1
36088: NEG
36089: PUSH
36090: LD_INT 1
36092: NEG
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: LD_INT 1
36100: NEG
36101: PUSH
36102: LD_INT 2
36104: NEG
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 0
36112: PUSH
36113: LD_INT 2
36115: NEG
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 1
36123: PUSH
36124: LD_INT 1
36126: NEG
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 2
36134: PUSH
36135: LD_INT 0
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 2
36144: PUSH
36145: LD_INT 1
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 1
36154: PUSH
36155: LD_INT 2
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 0
36164: PUSH
36165: LD_INT 2
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 1
36174: NEG
36175: PUSH
36176: LD_INT 1
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 2
36185: NEG
36186: PUSH
36187: LD_INT 0
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 2
36196: NEG
36197: PUSH
36198: LD_INT 1
36200: NEG
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 1
36208: NEG
36209: PUSH
36210: LD_INT 3
36212: NEG
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 0
36220: PUSH
36221: LD_INT 3
36223: NEG
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 1
36231: PUSH
36232: LD_INT 2
36234: NEG
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: LD_INT 2
36242: PUSH
36243: LD_INT 1
36245: NEG
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PUSH
36251: LD_INT 3
36253: PUSH
36254: LD_INT 0
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: LD_INT 3
36263: PUSH
36264: LD_INT 1
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 1
36273: PUSH
36274: LD_INT 3
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 0
36283: PUSH
36284: LD_INT 3
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 1
36293: NEG
36294: PUSH
36295: LD_INT 2
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 2
36304: NEG
36305: PUSH
36306: LD_INT 1
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 3
36315: NEG
36316: PUSH
36317: LD_INT 0
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 3
36326: NEG
36327: PUSH
36328: LD_INT 1
36330: NEG
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36367: LD_ADDR_VAR 0 44
36371: PUSH
36372: LD_INT 0
36374: PUSH
36375: LD_INT 0
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: PUSH
36382: LD_INT 0
36384: PUSH
36385: LD_INT 1
36387: NEG
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 1
36395: PUSH
36396: LD_INT 0
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_INT 1
36405: PUSH
36406: LD_INT 1
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 0
36415: PUSH
36416: LD_INT 1
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 1
36425: NEG
36426: PUSH
36427: LD_INT 0
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 1
36436: NEG
36437: PUSH
36438: LD_INT 1
36440: NEG
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 1
36448: NEG
36449: PUSH
36450: LD_INT 2
36452: NEG
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 1
36460: PUSH
36461: LD_INT 1
36463: NEG
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 2
36471: PUSH
36472: LD_INT 0
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 2
36481: PUSH
36482: LD_INT 1
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 2
36491: PUSH
36492: LD_INT 2
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 1
36501: PUSH
36502: LD_INT 2
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 1
36511: NEG
36512: PUSH
36513: LD_INT 1
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 2
36522: NEG
36523: PUSH
36524: LD_INT 0
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 2
36533: NEG
36534: PUSH
36535: LD_INT 1
36537: NEG
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: LD_INT 2
36545: NEG
36546: PUSH
36547: LD_INT 2
36549: NEG
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 2
36557: NEG
36558: PUSH
36559: LD_INT 3
36561: NEG
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 2
36569: PUSH
36570: LD_INT 1
36572: NEG
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 3
36580: PUSH
36581: LD_INT 0
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 3
36590: PUSH
36591: LD_INT 1
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 3
36600: PUSH
36601: LD_INT 2
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 3
36610: PUSH
36611: LD_INT 3
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 2
36620: PUSH
36621: LD_INT 3
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 2
36630: NEG
36631: PUSH
36632: LD_INT 1
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 3
36641: NEG
36642: PUSH
36643: LD_INT 0
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: LD_INT 3
36652: NEG
36653: PUSH
36654: LD_INT 1
36656: NEG
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 3
36664: NEG
36665: PUSH
36666: LD_INT 2
36668: NEG
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 3
36676: NEG
36677: PUSH
36678: LD_INT 3
36680: NEG
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36717: LD_ADDR_VAR 0 45
36721: PUSH
36722: LD_INT 0
36724: PUSH
36725: LD_INT 0
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 0
36734: PUSH
36735: LD_INT 1
36737: NEG
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 1
36745: PUSH
36746: LD_INT 0
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 1
36755: PUSH
36756: LD_INT 1
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 0
36765: PUSH
36766: LD_INT 1
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 1
36775: NEG
36776: PUSH
36777: LD_INT 0
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 1
36786: NEG
36787: PUSH
36788: LD_INT 1
36790: NEG
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 1
36798: NEG
36799: PUSH
36800: LD_INT 2
36802: NEG
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 0
36810: PUSH
36811: LD_INT 2
36813: NEG
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: LD_INT 1
36821: PUSH
36822: LD_INT 1
36824: NEG
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 2
36832: PUSH
36833: LD_INT 1
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: PUSH
36840: LD_INT 2
36842: PUSH
36843: LD_INT 2
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 1
36852: PUSH
36853: LD_INT 2
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 0
36862: PUSH
36863: LD_INT 2
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 1
36872: NEG
36873: PUSH
36874: LD_INT 1
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 2
36883: NEG
36884: PUSH
36885: LD_INT 1
36887: NEG
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 2
36895: NEG
36896: PUSH
36897: LD_INT 2
36899: NEG
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 2
36907: NEG
36908: PUSH
36909: LD_INT 3
36911: NEG
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 1
36919: NEG
36920: PUSH
36921: LD_INT 3
36923: NEG
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 0
36931: PUSH
36932: LD_INT 3
36934: NEG
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 1
36942: PUSH
36943: LD_INT 2
36945: NEG
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 3
36953: PUSH
36954: LD_INT 2
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 3
36963: PUSH
36964: LD_INT 3
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 2
36973: PUSH
36974: LD_INT 3
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 1
36983: PUSH
36984: LD_INT 3
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 0
36993: PUSH
36994: LD_INT 3
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 1
37003: NEG
37004: PUSH
37005: LD_INT 2
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 3
37014: NEG
37015: PUSH
37016: LD_INT 2
37018: NEG
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 3
37026: NEG
37027: PUSH
37028: LD_INT 3
37030: NEG
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37067: LD_ADDR_VAR 0 46
37071: PUSH
37072: LD_INT 0
37074: PUSH
37075: LD_INT 0
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 0
37084: PUSH
37085: LD_INT 1
37087: NEG
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 1
37095: PUSH
37096: LD_INT 0
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 1
37105: PUSH
37106: LD_INT 1
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 0
37115: PUSH
37116: LD_INT 1
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 1
37125: NEG
37126: PUSH
37127: LD_INT 0
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 1
37136: NEG
37137: PUSH
37138: LD_INT 1
37140: NEG
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 1
37148: NEG
37149: PUSH
37150: LD_INT 2
37152: NEG
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 0
37160: PUSH
37161: LD_INT 2
37163: NEG
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 1
37171: PUSH
37172: LD_INT 1
37174: NEG
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 2
37182: PUSH
37183: LD_INT 0
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 2
37192: PUSH
37193: LD_INT 1
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 1
37202: PUSH
37203: LD_INT 2
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 0
37212: PUSH
37213: LD_INT 2
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 1
37222: NEG
37223: PUSH
37224: LD_INT 1
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 2
37233: NEG
37234: PUSH
37235: LD_INT 0
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: LD_INT 2
37244: NEG
37245: PUSH
37246: LD_INT 1
37248: NEG
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 1
37256: NEG
37257: PUSH
37258: LD_INT 3
37260: NEG
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: LD_INT 0
37268: PUSH
37269: LD_INT 3
37271: NEG
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 1
37279: PUSH
37280: LD_INT 2
37282: NEG
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 2
37290: PUSH
37291: LD_INT 1
37293: NEG
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 3
37301: PUSH
37302: LD_INT 0
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 3
37311: PUSH
37312: LD_INT 1
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 1
37321: PUSH
37322: LD_INT 3
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 0
37331: PUSH
37332: LD_INT 3
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 1
37341: NEG
37342: PUSH
37343: LD_INT 2
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 2
37352: NEG
37353: PUSH
37354: LD_INT 1
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: LD_INT 3
37363: NEG
37364: PUSH
37365: LD_INT 0
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 3
37374: NEG
37375: PUSH
37376: LD_INT 1
37378: NEG
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37415: LD_ADDR_VAR 0 47
37419: PUSH
37420: LD_INT 0
37422: PUSH
37423: LD_INT 0
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 0
37432: PUSH
37433: LD_INT 1
37435: NEG
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 1
37443: PUSH
37444: LD_INT 0
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 1
37453: PUSH
37454: LD_INT 1
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 0
37463: PUSH
37464: LD_INT 1
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 1
37473: NEG
37474: PUSH
37475: LD_INT 0
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 1
37484: NEG
37485: PUSH
37486: LD_INT 1
37488: NEG
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 1
37496: NEG
37497: PUSH
37498: LD_INT 2
37500: NEG
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 0
37508: PUSH
37509: LD_INT 2
37511: NEG
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 1
37519: PUSH
37520: LD_INT 1
37522: NEG
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 2
37530: NEG
37531: PUSH
37532: LD_INT 1
37534: NEG
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 2
37542: NEG
37543: PUSH
37544: LD_INT 2
37546: NEG
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37566: LD_ADDR_VAR 0 48
37570: PUSH
37571: LD_INT 0
37573: PUSH
37574: LD_INT 0
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 0
37583: PUSH
37584: LD_INT 1
37586: NEG
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: LD_INT 1
37594: PUSH
37595: LD_INT 0
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 1
37604: PUSH
37605: LD_INT 1
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 0
37614: PUSH
37615: LD_INT 1
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 1
37624: NEG
37625: PUSH
37626: LD_INT 0
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 1
37635: NEG
37636: PUSH
37637: LD_INT 1
37639: NEG
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 1
37647: NEG
37648: PUSH
37649: LD_INT 2
37651: NEG
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 0
37659: PUSH
37660: LD_INT 2
37662: NEG
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 1
37670: PUSH
37671: LD_INT 1
37673: NEG
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 2
37681: PUSH
37682: LD_INT 0
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 2
37691: PUSH
37692: LD_INT 1
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37713: LD_ADDR_VAR 0 49
37717: PUSH
37718: LD_INT 0
37720: PUSH
37721: LD_INT 0
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 0
37730: PUSH
37731: LD_INT 1
37733: NEG
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 1
37741: PUSH
37742: LD_INT 0
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 1
37751: PUSH
37752: LD_INT 1
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 0
37761: PUSH
37762: LD_INT 1
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 1
37771: NEG
37772: PUSH
37773: LD_INT 0
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 1
37782: NEG
37783: PUSH
37784: LD_INT 1
37786: NEG
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 1
37794: PUSH
37795: LD_INT 1
37797: NEG
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 2
37805: PUSH
37806: LD_INT 0
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 2
37815: PUSH
37816: LD_INT 1
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 2
37825: PUSH
37826: LD_INT 2
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 1
37835: PUSH
37836: LD_INT 2
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37857: LD_ADDR_VAR 0 50
37861: PUSH
37862: LD_INT 0
37864: PUSH
37865: LD_INT 0
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 0
37874: PUSH
37875: LD_INT 1
37877: NEG
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 1
37885: PUSH
37886: LD_INT 0
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 1
37895: PUSH
37896: LD_INT 1
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 0
37905: PUSH
37906: LD_INT 1
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 1
37915: NEG
37916: PUSH
37917: LD_INT 0
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 1
37926: NEG
37927: PUSH
37928: LD_INT 1
37930: NEG
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 2
37938: PUSH
37939: LD_INT 1
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 2
37948: PUSH
37949: LD_INT 2
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 1
37958: PUSH
37959: LD_INT 2
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: LD_INT 0
37968: PUSH
37969: LD_INT 2
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 1
37978: NEG
37979: PUSH
37980: LD_INT 1
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38001: LD_ADDR_VAR 0 51
38005: PUSH
38006: LD_INT 0
38008: PUSH
38009: LD_INT 0
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 0
38018: PUSH
38019: LD_INT 1
38021: NEG
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 1
38029: PUSH
38030: LD_INT 0
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 1
38039: PUSH
38040: LD_INT 1
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 0
38049: PUSH
38050: LD_INT 1
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: PUSH
38057: LD_INT 1
38059: NEG
38060: PUSH
38061: LD_INT 0
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: PUSH
38068: LD_INT 1
38070: NEG
38071: PUSH
38072: LD_INT 1
38074: NEG
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 1
38082: PUSH
38083: LD_INT 2
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 0
38092: PUSH
38093: LD_INT 2
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 1
38102: NEG
38103: PUSH
38104: LD_INT 1
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 2
38113: NEG
38114: PUSH
38115: LD_INT 0
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 2
38124: NEG
38125: PUSH
38126: LD_INT 1
38128: NEG
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38148: LD_ADDR_VAR 0 52
38152: PUSH
38153: LD_INT 0
38155: PUSH
38156: LD_INT 0
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 0
38165: PUSH
38166: LD_INT 1
38168: NEG
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 1
38176: PUSH
38177: LD_INT 0
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 1
38186: PUSH
38187: LD_INT 1
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 0
38196: PUSH
38197: LD_INT 1
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 1
38206: NEG
38207: PUSH
38208: LD_INT 0
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: LD_INT 1
38217: NEG
38218: PUSH
38219: LD_INT 1
38221: NEG
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 1
38229: NEG
38230: PUSH
38231: LD_INT 2
38233: NEG
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 1
38241: NEG
38242: PUSH
38243: LD_INT 1
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 2
38252: NEG
38253: PUSH
38254: LD_INT 0
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 2
38263: NEG
38264: PUSH
38265: LD_INT 1
38267: NEG
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 2
38275: NEG
38276: PUSH
38277: LD_INT 2
38279: NEG
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38299: LD_ADDR_VAR 0 53
38303: PUSH
38304: LD_INT 0
38306: PUSH
38307: LD_INT 0
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 0
38316: PUSH
38317: LD_INT 1
38319: NEG
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 1
38327: PUSH
38328: LD_INT 0
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 1
38337: PUSH
38338: LD_INT 1
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 0
38347: PUSH
38348: LD_INT 1
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 1
38357: NEG
38358: PUSH
38359: LD_INT 0
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 1
38368: NEG
38369: PUSH
38370: LD_INT 1
38372: NEG
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 1
38380: NEG
38381: PUSH
38382: LD_INT 2
38384: NEG
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 0
38392: PUSH
38393: LD_INT 2
38395: NEG
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 1
38403: PUSH
38404: LD_INT 1
38406: NEG
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 2
38414: PUSH
38415: LD_INT 0
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 2
38424: PUSH
38425: LD_INT 1
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 2
38434: PUSH
38435: LD_INT 2
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 1
38444: PUSH
38445: LD_INT 2
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 0
38454: PUSH
38455: LD_INT 2
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 1
38464: NEG
38465: PUSH
38466: LD_INT 1
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 2
38475: NEG
38476: PUSH
38477: LD_INT 0
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 2
38486: NEG
38487: PUSH
38488: LD_INT 1
38490: NEG
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 2
38498: NEG
38499: PUSH
38500: LD_INT 2
38502: NEG
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38529: LD_ADDR_VAR 0 54
38533: PUSH
38534: LD_INT 0
38536: PUSH
38537: LD_INT 0
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 0
38546: PUSH
38547: LD_INT 1
38549: NEG
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 1
38557: PUSH
38558: LD_INT 0
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 1
38567: PUSH
38568: LD_INT 1
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 0
38577: PUSH
38578: LD_INT 1
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 1
38587: NEG
38588: PUSH
38589: LD_INT 0
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 1
38598: NEG
38599: PUSH
38600: LD_INT 1
38602: NEG
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 1
38610: NEG
38611: PUSH
38612: LD_INT 2
38614: NEG
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 0
38622: PUSH
38623: LD_INT 2
38625: NEG
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 1
38633: PUSH
38634: LD_INT 1
38636: NEG
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 2
38644: PUSH
38645: LD_INT 0
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 2
38654: PUSH
38655: LD_INT 1
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 2
38664: PUSH
38665: LD_INT 2
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 1
38674: PUSH
38675: LD_INT 2
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 0
38684: PUSH
38685: LD_INT 2
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 1
38694: NEG
38695: PUSH
38696: LD_INT 1
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 2
38705: NEG
38706: PUSH
38707: LD_INT 0
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 2
38716: NEG
38717: PUSH
38718: LD_INT 1
38720: NEG
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 2
38728: NEG
38729: PUSH
38730: LD_INT 2
38732: NEG
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38759: LD_ADDR_VAR 0 55
38763: PUSH
38764: LD_INT 0
38766: PUSH
38767: LD_INT 0
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 0
38776: PUSH
38777: LD_INT 1
38779: NEG
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 1
38787: PUSH
38788: LD_INT 0
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 1
38797: PUSH
38798: LD_INT 1
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 0
38807: PUSH
38808: LD_INT 1
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 1
38817: NEG
38818: PUSH
38819: LD_INT 0
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 1
38828: NEG
38829: PUSH
38830: LD_INT 1
38832: NEG
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 1
38840: NEG
38841: PUSH
38842: LD_INT 2
38844: NEG
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 0
38852: PUSH
38853: LD_INT 2
38855: NEG
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 1
38863: PUSH
38864: LD_INT 1
38866: NEG
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 2
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 2
38884: PUSH
38885: LD_INT 1
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 2
38894: PUSH
38895: LD_INT 2
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 1
38904: PUSH
38905: LD_INT 2
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 0
38914: PUSH
38915: LD_INT 2
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 1
38924: NEG
38925: PUSH
38926: LD_INT 1
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 2
38935: NEG
38936: PUSH
38937: LD_INT 0
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 2
38946: NEG
38947: PUSH
38948: LD_INT 1
38950: NEG
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 2
38958: NEG
38959: PUSH
38960: LD_INT 2
38962: NEG
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38989: LD_ADDR_VAR 0 56
38993: PUSH
38994: LD_INT 0
38996: PUSH
38997: LD_INT 0
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 0
39006: PUSH
39007: LD_INT 1
39009: NEG
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 1
39017: PUSH
39018: LD_INT 0
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: LD_INT 1
39027: PUSH
39028: LD_INT 1
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 0
39037: PUSH
39038: LD_INT 1
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 1
39047: NEG
39048: PUSH
39049: LD_INT 0
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 1
39058: NEG
39059: PUSH
39060: LD_INT 1
39062: NEG
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 1
39070: NEG
39071: PUSH
39072: LD_INT 2
39074: NEG
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 0
39082: PUSH
39083: LD_INT 2
39085: NEG
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 1
39093: PUSH
39094: LD_INT 1
39096: NEG
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 2
39104: PUSH
39105: LD_INT 0
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 2
39114: PUSH
39115: LD_INT 1
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 2
39124: PUSH
39125: LD_INT 2
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 1
39134: PUSH
39135: LD_INT 2
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 0
39144: PUSH
39145: LD_INT 2
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 1
39154: NEG
39155: PUSH
39156: LD_INT 1
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 2
39165: NEG
39166: PUSH
39167: LD_INT 0
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 2
39176: NEG
39177: PUSH
39178: LD_INT 1
39180: NEG
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 2
39188: NEG
39189: PUSH
39190: LD_INT 2
39192: NEG
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39219: LD_ADDR_VAR 0 57
39223: PUSH
39224: LD_INT 0
39226: PUSH
39227: LD_INT 0
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 0
39236: PUSH
39237: LD_INT 1
39239: NEG
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: LD_INT 1
39247: PUSH
39248: LD_INT 0
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 1
39257: PUSH
39258: LD_INT 1
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 0
39267: PUSH
39268: LD_INT 1
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 1
39277: NEG
39278: PUSH
39279: LD_INT 0
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 1
39288: NEG
39289: PUSH
39290: LD_INT 1
39292: NEG
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 1
39300: NEG
39301: PUSH
39302: LD_INT 2
39304: NEG
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 0
39312: PUSH
39313: LD_INT 2
39315: NEG
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 1
39323: PUSH
39324: LD_INT 1
39326: NEG
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 2
39334: PUSH
39335: LD_INT 0
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 2
39344: PUSH
39345: LD_INT 1
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 2
39354: PUSH
39355: LD_INT 2
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 1
39364: PUSH
39365: LD_INT 2
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 0
39374: PUSH
39375: LD_INT 2
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 1
39384: NEG
39385: PUSH
39386: LD_INT 1
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 2
39395: NEG
39396: PUSH
39397: LD_INT 0
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 2
39406: NEG
39407: PUSH
39408: LD_INT 1
39410: NEG
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 2
39418: NEG
39419: PUSH
39420: LD_INT 2
39422: NEG
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39449: LD_ADDR_VAR 0 58
39453: PUSH
39454: LD_INT 0
39456: PUSH
39457: LD_INT 0
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 0
39466: PUSH
39467: LD_INT 1
39469: NEG
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 1
39477: PUSH
39478: LD_INT 0
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 1
39487: PUSH
39488: LD_INT 1
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 0
39497: PUSH
39498: LD_INT 1
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 1
39507: NEG
39508: PUSH
39509: LD_INT 0
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 1
39518: NEG
39519: PUSH
39520: LD_INT 1
39522: NEG
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 1
39530: NEG
39531: PUSH
39532: LD_INT 2
39534: NEG
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 0
39542: PUSH
39543: LD_INT 2
39545: NEG
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 1
39553: PUSH
39554: LD_INT 1
39556: NEG
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 2
39564: PUSH
39565: LD_INT 0
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 2
39574: PUSH
39575: LD_INT 1
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 2
39584: PUSH
39585: LD_INT 2
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 1
39594: PUSH
39595: LD_INT 2
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 0
39604: PUSH
39605: LD_INT 2
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 1
39614: NEG
39615: PUSH
39616: LD_INT 1
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 2
39625: NEG
39626: PUSH
39627: LD_INT 0
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 2
39636: NEG
39637: PUSH
39638: LD_INT 1
39640: NEG
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 2
39648: NEG
39649: PUSH
39650: LD_INT 2
39652: NEG
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39679: LD_ADDR_VAR 0 59
39683: PUSH
39684: LD_INT 0
39686: PUSH
39687: LD_INT 0
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 0
39696: PUSH
39697: LD_INT 1
39699: NEG
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 1
39707: PUSH
39708: LD_INT 0
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 1
39717: PUSH
39718: LD_INT 1
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 0
39727: PUSH
39728: LD_INT 1
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 1
39737: NEG
39738: PUSH
39739: LD_INT 0
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 1
39748: NEG
39749: PUSH
39750: LD_INT 1
39752: NEG
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39767: LD_ADDR_VAR 0 60
39771: PUSH
39772: LD_INT 0
39774: PUSH
39775: LD_INT 0
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 0
39784: PUSH
39785: LD_INT 1
39787: NEG
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 1
39795: PUSH
39796: LD_INT 0
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 1
39805: PUSH
39806: LD_INT 1
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 0
39815: PUSH
39816: LD_INT 1
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 1
39825: NEG
39826: PUSH
39827: LD_INT 0
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 1
39836: NEG
39837: PUSH
39838: LD_INT 1
39840: NEG
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39855: LD_ADDR_VAR 0 61
39859: PUSH
39860: LD_INT 0
39862: PUSH
39863: LD_INT 0
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 0
39872: PUSH
39873: LD_INT 1
39875: NEG
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 1
39883: PUSH
39884: LD_INT 0
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 1
39893: PUSH
39894: LD_INT 1
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 0
39903: PUSH
39904: LD_INT 1
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 1
39913: NEG
39914: PUSH
39915: LD_INT 0
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 1
39924: NEG
39925: PUSH
39926: LD_INT 1
39928: NEG
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39943: LD_ADDR_VAR 0 62
39947: PUSH
39948: LD_INT 0
39950: PUSH
39951: LD_INT 0
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 0
39960: PUSH
39961: LD_INT 1
39963: NEG
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 1
39971: PUSH
39972: LD_INT 0
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 1
39981: PUSH
39982: LD_INT 1
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 0
39991: PUSH
39992: LD_INT 1
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 1
40001: NEG
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 1
40012: NEG
40013: PUSH
40014: LD_INT 1
40016: NEG
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40031: LD_ADDR_VAR 0 63
40035: PUSH
40036: LD_INT 0
40038: PUSH
40039: LD_INT 0
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 0
40048: PUSH
40049: LD_INT 1
40051: NEG
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 1
40059: PUSH
40060: LD_INT 0
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 1
40069: PUSH
40070: LD_INT 1
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 0
40079: PUSH
40080: LD_INT 1
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 1
40089: NEG
40090: PUSH
40091: LD_INT 0
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 1
40100: NEG
40101: PUSH
40102: LD_INT 1
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40119: LD_ADDR_VAR 0 64
40123: PUSH
40124: LD_INT 0
40126: PUSH
40127: LD_INT 0
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 0
40136: PUSH
40137: LD_INT 1
40139: NEG
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 1
40147: PUSH
40148: LD_INT 0
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 1
40157: PUSH
40158: LD_INT 1
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 0
40167: PUSH
40168: LD_INT 1
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 1
40177: NEG
40178: PUSH
40179: LD_INT 0
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 1
40188: NEG
40189: PUSH
40190: LD_INT 1
40192: NEG
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: ST_TO_ADDR
// end ; 1 :
40207: GO 46104
40209: LD_INT 1
40211: DOUBLE
40212: EQUAL
40213: IFTRUE 40217
40215: GO 42840
40217: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40218: LD_ADDR_VAR 0 11
40222: PUSH
40223: LD_INT 1
40225: NEG
40226: PUSH
40227: LD_INT 3
40229: NEG
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 0
40237: PUSH
40238: LD_INT 3
40240: NEG
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 1
40248: PUSH
40249: LD_INT 2
40251: NEG
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: LIST
40261: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40262: LD_ADDR_VAR 0 12
40266: PUSH
40267: LD_INT 2
40269: PUSH
40270: LD_INT 1
40272: NEG
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 3
40280: PUSH
40281: LD_INT 0
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 3
40290: PUSH
40291: LD_INT 1
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: LIST
40302: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40303: LD_ADDR_VAR 0 13
40307: PUSH
40308: LD_INT 3
40310: PUSH
40311: LD_INT 2
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 3
40320: PUSH
40321: LD_INT 3
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 2
40330: PUSH
40331: LD_INT 3
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: LIST
40342: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40343: LD_ADDR_VAR 0 14
40347: PUSH
40348: LD_INT 1
40350: PUSH
40351: LD_INT 3
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 0
40360: PUSH
40361: LD_INT 3
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 1
40370: NEG
40371: PUSH
40372: LD_INT 2
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: LIST
40383: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40384: LD_ADDR_VAR 0 15
40388: PUSH
40389: LD_INT 2
40391: NEG
40392: PUSH
40393: LD_INT 1
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 3
40402: NEG
40403: PUSH
40404: LD_INT 0
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 3
40413: NEG
40414: PUSH
40415: LD_INT 1
40417: NEG
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: LIST
40427: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40428: LD_ADDR_VAR 0 16
40432: PUSH
40433: LD_INT 2
40435: NEG
40436: PUSH
40437: LD_INT 3
40439: NEG
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 3
40447: NEG
40448: PUSH
40449: LD_INT 2
40451: NEG
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 3
40459: NEG
40460: PUSH
40461: LD_INT 3
40463: NEG
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: LIST
40473: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40474: LD_ADDR_VAR 0 17
40478: PUSH
40479: LD_INT 1
40481: NEG
40482: PUSH
40483: LD_INT 3
40485: NEG
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 0
40493: PUSH
40494: LD_INT 3
40496: NEG
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 1
40504: PUSH
40505: LD_INT 2
40507: NEG
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: LIST
40517: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40518: LD_ADDR_VAR 0 18
40522: PUSH
40523: LD_INT 2
40525: PUSH
40526: LD_INT 1
40528: NEG
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 3
40536: PUSH
40537: LD_INT 0
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 3
40546: PUSH
40547: LD_INT 1
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: LIST
40558: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40559: LD_ADDR_VAR 0 19
40563: PUSH
40564: LD_INT 3
40566: PUSH
40567: LD_INT 2
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 3
40576: PUSH
40577: LD_INT 3
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 2
40586: PUSH
40587: LD_INT 3
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: LIST
40598: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40599: LD_ADDR_VAR 0 20
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: LD_INT 3
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 0
40616: PUSH
40617: LD_INT 3
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 1
40626: NEG
40627: PUSH
40628: LD_INT 2
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: LIST
40639: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40640: LD_ADDR_VAR 0 21
40644: PUSH
40645: LD_INT 2
40647: NEG
40648: PUSH
40649: LD_INT 1
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 3
40658: NEG
40659: PUSH
40660: LD_INT 0
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 3
40669: NEG
40670: PUSH
40671: LD_INT 1
40673: NEG
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: LIST
40683: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40684: LD_ADDR_VAR 0 22
40688: PUSH
40689: LD_INT 2
40691: NEG
40692: PUSH
40693: LD_INT 3
40695: NEG
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 3
40703: NEG
40704: PUSH
40705: LD_INT 2
40707: NEG
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 3
40715: NEG
40716: PUSH
40717: LD_INT 3
40719: NEG
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: LIST
40729: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
40730: LD_ADDR_VAR 0 23
40734: PUSH
40735: LD_INT 0
40737: PUSH
40738: LD_INT 3
40740: NEG
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 1
40748: NEG
40749: PUSH
40750: LD_INT 4
40752: NEG
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 1
40760: PUSH
40761: LD_INT 3
40763: NEG
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: LIST
40773: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
40774: LD_ADDR_VAR 0 24
40778: PUSH
40779: LD_INT 3
40781: PUSH
40782: LD_INT 0
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 3
40791: PUSH
40792: LD_INT 1
40794: NEG
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 4
40802: PUSH
40803: LD_INT 1
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: LIST
40814: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
40815: LD_ADDR_VAR 0 25
40819: PUSH
40820: LD_INT 3
40822: PUSH
40823: LD_INT 3
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 4
40832: PUSH
40833: LD_INT 3
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 3
40842: PUSH
40843: LD_INT 4
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: LIST
40854: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
40855: LD_ADDR_VAR 0 26
40859: PUSH
40860: LD_INT 0
40862: PUSH
40863: LD_INT 3
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 1
40872: PUSH
40873: LD_INT 4
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 1
40882: NEG
40883: PUSH
40884: LD_INT 3
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: LIST
40895: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
40896: LD_ADDR_VAR 0 27
40900: PUSH
40901: LD_INT 3
40903: NEG
40904: PUSH
40905: LD_INT 0
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 3
40914: NEG
40915: PUSH
40916: LD_INT 1
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 4
40925: NEG
40926: PUSH
40927: LD_INT 1
40929: NEG
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: LIST
40939: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
40940: LD_ADDR_VAR 0 28
40944: PUSH
40945: LD_INT 3
40947: NEG
40948: PUSH
40949: LD_INT 3
40951: NEG
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 3
40959: NEG
40960: PUSH
40961: LD_INT 4
40963: NEG
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 4
40971: NEG
40972: PUSH
40973: LD_INT 3
40975: NEG
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: LIST
40985: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
40986: LD_ADDR_VAR 0 29
40990: PUSH
40991: LD_INT 1
40993: NEG
40994: PUSH
40995: LD_INT 3
40997: NEG
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: LD_INT 3
41008: NEG
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 1
41016: PUSH
41017: LD_INT 2
41019: NEG
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 1
41027: NEG
41028: PUSH
41029: LD_INT 4
41031: NEG
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 0
41039: PUSH
41040: LD_INT 4
41042: NEG
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 1
41050: PUSH
41051: LD_INT 3
41053: NEG
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 1
41061: NEG
41062: PUSH
41063: LD_INT 5
41065: NEG
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 0
41073: PUSH
41074: LD_INT 5
41076: NEG
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 1
41084: PUSH
41085: LD_INT 4
41087: NEG
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 1
41095: NEG
41096: PUSH
41097: LD_INT 6
41099: NEG
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 0
41107: PUSH
41108: LD_INT 6
41110: NEG
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 1
41118: PUSH
41119: LD_INT 5
41121: NEG
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
41141: LD_ADDR_VAR 0 30
41145: PUSH
41146: LD_INT 2
41148: PUSH
41149: LD_INT 1
41151: NEG
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 3
41159: PUSH
41160: LD_INT 0
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 3
41169: PUSH
41170: LD_INT 1
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 3
41179: PUSH
41180: LD_INT 1
41182: NEG
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 4
41190: PUSH
41191: LD_INT 0
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 4
41200: PUSH
41201: LD_INT 1
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 4
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 5
41221: PUSH
41222: LD_INT 0
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 5
41231: PUSH
41232: LD_INT 1
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 5
41241: PUSH
41242: LD_INT 1
41244: NEG
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 6
41252: PUSH
41253: LD_INT 0
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 6
41262: PUSH
41263: LD_INT 1
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
41284: LD_ADDR_VAR 0 31
41288: PUSH
41289: LD_INT 3
41291: PUSH
41292: LD_INT 2
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 3
41301: PUSH
41302: LD_INT 3
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 2
41311: PUSH
41312: LD_INT 3
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 4
41321: PUSH
41322: LD_INT 3
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 4
41331: PUSH
41332: LD_INT 4
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 3
41341: PUSH
41342: LD_INT 4
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 5
41351: PUSH
41352: LD_INT 4
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 5
41361: PUSH
41362: LD_INT 5
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 4
41371: PUSH
41372: LD_INT 5
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 6
41381: PUSH
41382: LD_INT 5
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 6
41391: PUSH
41392: LD_INT 6
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 5
41401: PUSH
41402: LD_INT 6
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
41423: LD_ADDR_VAR 0 32
41427: PUSH
41428: LD_INT 1
41430: PUSH
41431: LD_INT 3
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 0
41440: PUSH
41441: LD_INT 3
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 1
41450: NEG
41451: PUSH
41452: LD_INT 2
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 1
41461: PUSH
41462: LD_INT 4
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 0
41471: PUSH
41472: LD_INT 4
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 1
41481: NEG
41482: PUSH
41483: LD_INT 3
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 1
41492: PUSH
41493: LD_INT 5
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 0
41502: PUSH
41503: LD_INT 5
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 1
41512: NEG
41513: PUSH
41514: LD_INT 4
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 1
41523: PUSH
41524: LD_INT 6
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 0
41533: PUSH
41534: LD_INT 6
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 1
41543: NEG
41544: PUSH
41545: LD_INT 5
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
41566: LD_ADDR_VAR 0 33
41570: PUSH
41571: LD_INT 2
41573: NEG
41574: PUSH
41575: LD_INT 1
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 3
41584: NEG
41585: PUSH
41586: LD_INT 0
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 3
41595: NEG
41596: PUSH
41597: LD_INT 1
41599: NEG
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 3
41607: NEG
41608: PUSH
41609: LD_INT 1
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 4
41618: NEG
41619: PUSH
41620: LD_INT 0
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 4
41629: NEG
41630: PUSH
41631: LD_INT 1
41633: NEG
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 4
41641: NEG
41642: PUSH
41643: LD_INT 1
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 5
41652: NEG
41653: PUSH
41654: LD_INT 0
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 5
41663: NEG
41664: PUSH
41665: LD_INT 1
41667: NEG
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 5
41675: NEG
41676: PUSH
41677: LD_INT 1
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 6
41686: NEG
41687: PUSH
41688: LD_INT 0
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 6
41697: NEG
41698: PUSH
41699: LD_INT 1
41701: NEG
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
41721: LD_ADDR_VAR 0 34
41725: PUSH
41726: LD_INT 2
41728: NEG
41729: PUSH
41730: LD_INT 3
41732: NEG
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 3
41740: NEG
41741: PUSH
41742: LD_INT 2
41744: NEG
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 3
41752: NEG
41753: PUSH
41754: LD_INT 3
41756: NEG
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 3
41764: NEG
41765: PUSH
41766: LD_INT 4
41768: NEG
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 4
41776: NEG
41777: PUSH
41778: LD_INT 3
41780: NEG
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 4
41788: NEG
41789: PUSH
41790: LD_INT 4
41792: NEG
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 4
41800: NEG
41801: PUSH
41802: LD_INT 5
41804: NEG
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 5
41812: NEG
41813: PUSH
41814: LD_INT 4
41816: NEG
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 5
41824: NEG
41825: PUSH
41826: LD_INT 5
41828: NEG
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 5
41836: NEG
41837: PUSH
41838: LD_INT 6
41840: NEG
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 6
41848: NEG
41849: PUSH
41850: LD_INT 5
41852: NEG
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 6
41860: NEG
41861: PUSH
41862: LD_INT 6
41864: NEG
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
41884: LD_ADDR_VAR 0 41
41888: PUSH
41889: LD_INT 0
41891: PUSH
41892: LD_INT 2
41894: NEG
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 1
41902: NEG
41903: PUSH
41904: LD_INT 3
41906: NEG
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 1
41914: PUSH
41915: LD_INT 2
41917: NEG
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: LIST
41927: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
41928: LD_ADDR_VAR 0 42
41932: PUSH
41933: LD_INT 2
41935: PUSH
41936: LD_INT 0
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 2
41945: PUSH
41946: LD_INT 1
41948: NEG
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 3
41956: PUSH
41957: LD_INT 1
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: LIST
41968: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
41969: LD_ADDR_VAR 0 43
41973: PUSH
41974: LD_INT 2
41976: PUSH
41977: LD_INT 2
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 3
41986: PUSH
41987: LD_INT 2
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 2
41996: PUSH
41997: LD_INT 3
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: LIST
42008: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
42009: LD_ADDR_VAR 0 44
42013: PUSH
42014: LD_INT 0
42016: PUSH
42017: LD_INT 2
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 1
42026: PUSH
42027: LD_INT 3
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 1
42036: NEG
42037: PUSH
42038: LD_INT 2
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: LIST
42049: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42050: LD_ADDR_VAR 0 45
42054: PUSH
42055: LD_INT 2
42057: NEG
42058: PUSH
42059: LD_INT 0
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 2
42068: NEG
42069: PUSH
42070: LD_INT 1
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 3
42079: NEG
42080: PUSH
42081: LD_INT 1
42083: NEG
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: LIST
42093: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
42094: LD_ADDR_VAR 0 46
42098: PUSH
42099: LD_INT 2
42101: NEG
42102: PUSH
42103: LD_INT 2
42105: NEG
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 2
42113: NEG
42114: PUSH
42115: LD_INT 3
42117: NEG
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 3
42125: NEG
42126: PUSH
42127: LD_INT 2
42129: NEG
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: LIST
42139: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
42140: LD_ADDR_VAR 0 47
42144: PUSH
42145: LD_INT 2
42147: NEG
42148: PUSH
42149: LD_INT 3
42151: NEG
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 1
42159: NEG
42160: PUSH
42161: LD_INT 3
42163: NEG
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42173: LD_ADDR_VAR 0 48
42177: PUSH
42178: LD_INT 1
42180: PUSH
42181: LD_INT 2
42183: NEG
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 2
42191: PUSH
42192: LD_INT 1
42194: NEG
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
42204: LD_ADDR_VAR 0 49
42208: PUSH
42209: LD_INT 3
42211: PUSH
42212: LD_INT 1
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 3
42221: PUSH
42222: LD_INT 2
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
42233: LD_ADDR_VAR 0 50
42237: PUSH
42238: LD_INT 2
42240: PUSH
42241: LD_INT 3
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: PUSH
42251: LD_INT 3
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42262: LD_ADDR_VAR 0 51
42266: PUSH
42267: LD_INT 1
42269: NEG
42270: PUSH
42271: LD_INT 2
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 2
42280: NEG
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42293: LD_ADDR_VAR 0 52
42297: PUSH
42298: LD_INT 3
42300: NEG
42301: PUSH
42302: LD_INT 1
42304: NEG
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 3
42312: NEG
42313: PUSH
42314: LD_INT 2
42316: NEG
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42326: LD_ADDR_VAR 0 53
42330: PUSH
42331: LD_INT 1
42333: NEG
42334: PUSH
42335: LD_INT 3
42337: NEG
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 0
42345: PUSH
42346: LD_INT 3
42348: NEG
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 1
42356: PUSH
42357: LD_INT 2
42359: NEG
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: LIST
42369: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42370: LD_ADDR_VAR 0 54
42374: PUSH
42375: LD_INT 2
42377: PUSH
42378: LD_INT 1
42380: NEG
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 3
42388: PUSH
42389: LD_INT 0
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 3
42398: PUSH
42399: LD_INT 1
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: LIST
42410: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42411: LD_ADDR_VAR 0 55
42415: PUSH
42416: LD_INT 3
42418: PUSH
42419: LD_INT 2
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 3
42428: PUSH
42429: LD_INT 3
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 2
42438: PUSH
42439: LD_INT 3
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: LIST
42450: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42451: LD_ADDR_VAR 0 56
42455: PUSH
42456: LD_INT 1
42458: PUSH
42459: LD_INT 3
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 0
42468: PUSH
42469: LD_INT 3
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 1
42478: NEG
42479: PUSH
42480: LD_INT 2
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: LIST
42491: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42492: LD_ADDR_VAR 0 57
42496: PUSH
42497: LD_INT 2
42499: NEG
42500: PUSH
42501: LD_INT 1
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 3
42510: NEG
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 3
42521: NEG
42522: PUSH
42523: LD_INT 1
42525: NEG
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: LIST
42535: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42536: LD_ADDR_VAR 0 58
42540: PUSH
42541: LD_INT 2
42543: NEG
42544: PUSH
42545: LD_INT 3
42547: NEG
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 3
42555: NEG
42556: PUSH
42557: LD_INT 2
42559: NEG
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 3
42567: NEG
42568: PUSH
42569: LD_INT 3
42571: NEG
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: LIST
42581: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
42582: LD_ADDR_VAR 0 59
42586: PUSH
42587: LD_INT 1
42589: NEG
42590: PUSH
42591: LD_INT 2
42593: NEG
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 0
42601: PUSH
42602: LD_INT 2
42604: NEG
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 1
42612: PUSH
42613: LD_INT 1
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: LIST
42625: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42626: LD_ADDR_VAR 0 60
42630: PUSH
42631: LD_INT 1
42633: PUSH
42634: LD_INT 1
42636: NEG
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 2
42644: PUSH
42645: LD_INT 0
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 2
42654: PUSH
42655: LD_INT 1
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: LIST
42666: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42667: LD_ADDR_VAR 0 61
42671: PUSH
42672: LD_INT 2
42674: PUSH
42675: LD_INT 1
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 2
42684: PUSH
42685: LD_INT 2
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 1
42694: PUSH
42695: LD_INT 2
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: LIST
42706: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
42707: LD_ADDR_VAR 0 62
42711: PUSH
42712: LD_INT 1
42714: PUSH
42715: LD_INT 2
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 0
42724: PUSH
42725: LD_INT 2
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 1
42734: NEG
42735: PUSH
42736: LD_INT 1
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: LIST
42747: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42748: LD_ADDR_VAR 0 63
42752: PUSH
42753: LD_INT 1
42755: NEG
42756: PUSH
42757: LD_INT 1
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 2
42766: NEG
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 2
42777: NEG
42778: PUSH
42779: LD_INT 1
42781: NEG
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: LIST
42791: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42792: LD_ADDR_VAR 0 64
42796: PUSH
42797: LD_INT 1
42799: NEG
42800: PUSH
42801: LD_INT 2
42803: NEG
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 2
42811: NEG
42812: PUSH
42813: LD_INT 1
42815: NEG
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 2
42823: NEG
42824: PUSH
42825: LD_INT 2
42827: NEG
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: LIST
42837: ST_TO_ADDR
// end ; 2 :
42838: GO 46104
42840: LD_INT 2
42842: DOUBLE
42843: EQUAL
42844: IFTRUE 42848
42846: GO 46103
42848: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
42849: LD_ADDR_VAR 0 29
42853: PUSH
42854: LD_INT 4
42856: PUSH
42857: LD_INT 0
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 4
42866: PUSH
42867: LD_INT 1
42869: NEG
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 5
42877: PUSH
42878: LD_INT 0
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 5
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 4
42897: PUSH
42898: LD_INT 1
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 3
42907: PUSH
42908: LD_INT 0
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 3
42917: PUSH
42918: LD_INT 1
42920: NEG
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 3
42928: PUSH
42929: LD_INT 2
42931: NEG
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 5
42939: PUSH
42940: LD_INT 2
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 3
42949: PUSH
42950: LD_INT 3
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 3
42959: PUSH
42960: LD_INT 2
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 4
42969: PUSH
42970: LD_INT 3
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 4
42979: PUSH
42980: LD_INT 4
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 3
42989: PUSH
42990: LD_INT 4
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 2
42999: PUSH
43000: LD_INT 3
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 2
43009: PUSH
43010: LD_INT 2
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 4
43019: PUSH
43020: LD_INT 2
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 2
43029: PUSH
43030: LD_INT 4
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 0
43039: PUSH
43040: LD_INT 4
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: LD_INT 3
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 1
43059: PUSH
43060: LD_INT 4
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 1
43069: PUSH
43070: LD_INT 5
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 0
43079: PUSH
43080: LD_INT 5
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 1
43089: NEG
43090: PUSH
43091: LD_INT 4
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 1
43100: NEG
43101: PUSH
43102: LD_INT 3
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 2
43111: PUSH
43112: LD_INT 5
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 2
43121: NEG
43122: PUSH
43123: LD_INT 3
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 3
43132: NEG
43133: PUSH
43134: LD_INT 0
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 3
43143: NEG
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 2
43155: NEG
43156: PUSH
43157: LD_INT 0
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 2
43166: NEG
43167: PUSH
43168: LD_INT 1
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 3
43177: NEG
43178: PUSH
43179: LD_INT 1
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 4
43188: NEG
43189: PUSH
43190: LD_INT 0
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 4
43199: NEG
43200: PUSH
43201: LD_INT 1
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 4
43211: NEG
43212: PUSH
43213: LD_INT 2
43215: NEG
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 2
43223: NEG
43224: PUSH
43225: LD_INT 2
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 4
43234: NEG
43235: PUSH
43236: LD_INT 4
43238: NEG
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 4
43246: NEG
43247: PUSH
43248: LD_INT 5
43250: NEG
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 3
43258: NEG
43259: PUSH
43260: LD_INT 4
43262: NEG
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 3
43270: NEG
43271: PUSH
43272: LD_INT 3
43274: NEG
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 4
43282: NEG
43283: PUSH
43284: LD_INT 3
43286: NEG
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 5
43294: NEG
43295: PUSH
43296: LD_INT 4
43298: NEG
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 5
43306: NEG
43307: PUSH
43308: LD_INT 5
43310: NEG
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 3
43318: NEG
43319: PUSH
43320: LD_INT 5
43322: NEG
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 5
43330: NEG
43331: PUSH
43332: LD_INT 3
43334: NEG
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
43387: LD_ADDR_VAR 0 30
43391: PUSH
43392: LD_INT 4
43394: PUSH
43395: LD_INT 4
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 4
43404: PUSH
43405: LD_INT 3
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 5
43414: PUSH
43415: LD_INT 4
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 5
43424: PUSH
43425: LD_INT 5
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 4
43434: PUSH
43435: LD_INT 5
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 3
43444: PUSH
43445: LD_INT 4
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 3
43454: PUSH
43455: LD_INT 3
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 5
43464: PUSH
43465: LD_INT 3
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 3
43474: PUSH
43475: LD_INT 5
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 0
43484: PUSH
43485: LD_INT 3
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 0
43494: PUSH
43495: LD_INT 2
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 1
43504: PUSH
43505: LD_INT 3
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 1
43514: PUSH
43515: LD_INT 4
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: LD_INT 4
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 1
43534: NEG
43535: PUSH
43536: LD_INT 3
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 1
43545: NEG
43546: PUSH
43547: LD_INT 2
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 2
43556: PUSH
43557: LD_INT 4
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 2
43566: NEG
43567: PUSH
43568: LD_INT 2
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 4
43577: NEG
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 4
43588: NEG
43589: PUSH
43590: LD_INT 1
43592: NEG
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 3
43600: NEG
43601: PUSH
43602: LD_INT 0
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 3
43611: NEG
43612: PUSH
43613: LD_INT 1
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 4
43622: NEG
43623: PUSH
43624: LD_INT 1
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 5
43633: NEG
43634: PUSH
43635: LD_INT 0
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 5
43644: NEG
43645: PUSH
43646: LD_INT 1
43648: NEG
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 5
43656: NEG
43657: PUSH
43658: LD_INT 2
43660: NEG
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 3
43668: NEG
43669: PUSH
43670: LD_INT 2
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 3
43679: NEG
43680: PUSH
43681: LD_INT 3
43683: NEG
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 3
43691: NEG
43692: PUSH
43693: LD_INT 4
43695: NEG
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 2
43703: NEG
43704: PUSH
43705: LD_INT 3
43707: NEG
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 2
43715: NEG
43716: PUSH
43717: LD_INT 2
43719: NEG
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 3
43727: NEG
43728: PUSH
43729: LD_INT 2
43731: NEG
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 4
43739: NEG
43740: PUSH
43741: LD_INT 3
43743: NEG
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 4
43751: NEG
43752: PUSH
43753: LD_INT 4
43755: NEG
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 2
43763: NEG
43764: PUSH
43765: LD_INT 4
43767: NEG
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 4
43775: NEG
43776: PUSH
43777: LD_INT 2
43779: NEG
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 0
43787: PUSH
43788: LD_INT 4
43790: NEG
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 0
43798: PUSH
43799: LD_INT 5
43801: NEG
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 1
43809: PUSH
43810: LD_INT 4
43812: NEG
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 1
43820: PUSH
43821: LD_INT 3
43823: NEG
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 0
43831: PUSH
43832: LD_INT 3
43834: NEG
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 1
43842: NEG
43843: PUSH
43844: LD_INT 4
43846: NEG
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 1
43854: NEG
43855: PUSH
43856: LD_INT 5
43858: NEG
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 2
43866: PUSH
43867: LD_INT 3
43869: NEG
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 2
43877: NEG
43878: PUSH
43879: LD_INT 5
43881: NEG
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
43934: LD_ADDR_VAR 0 31
43938: PUSH
43939: LD_INT 0
43941: PUSH
43942: LD_INT 4
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 0
43951: PUSH
43952: LD_INT 3
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 1
43961: PUSH
43962: LD_INT 4
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 1
43971: PUSH
43972: LD_INT 5
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: LD_INT 5
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 1
43991: NEG
43992: PUSH
43993: LD_INT 4
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 1
44002: NEG
44003: PUSH
44004: LD_INT 3
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 2
44013: PUSH
44014: LD_INT 5
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 2
44023: NEG
44024: PUSH
44025: LD_INT 3
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 3
44034: NEG
44035: PUSH
44036: LD_INT 0
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 3
44045: NEG
44046: PUSH
44047: LD_INT 1
44049: NEG
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 2
44057: NEG
44058: PUSH
44059: LD_INT 0
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 2
44068: NEG
44069: PUSH
44070: LD_INT 1
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 3
44079: NEG
44080: PUSH
44081: LD_INT 1
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 4
44090: NEG
44091: PUSH
44092: LD_INT 0
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 4
44101: NEG
44102: PUSH
44103: LD_INT 1
44105: NEG
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 4
44113: NEG
44114: PUSH
44115: LD_INT 2
44117: NEG
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 2
44125: NEG
44126: PUSH
44127: LD_INT 2
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 4
44136: NEG
44137: PUSH
44138: LD_INT 4
44140: NEG
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 4
44148: NEG
44149: PUSH
44150: LD_INT 5
44152: NEG
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 3
44160: NEG
44161: PUSH
44162: LD_INT 4
44164: NEG
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 3
44172: NEG
44173: PUSH
44174: LD_INT 3
44176: NEG
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 4
44184: NEG
44185: PUSH
44186: LD_INT 3
44188: NEG
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 5
44196: NEG
44197: PUSH
44198: LD_INT 4
44200: NEG
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 5
44208: NEG
44209: PUSH
44210: LD_INT 5
44212: NEG
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 3
44220: NEG
44221: PUSH
44222: LD_INT 5
44224: NEG
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 5
44232: NEG
44233: PUSH
44234: LD_INT 3
44236: NEG
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: LD_INT 3
44247: NEG
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: LD_INT 4
44258: NEG
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 1
44266: PUSH
44267: LD_INT 3
44269: NEG
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 1
44277: PUSH
44278: LD_INT 2
44280: NEG
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 0
44288: PUSH
44289: LD_INT 2
44291: NEG
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 1
44299: NEG
44300: PUSH
44301: LD_INT 3
44303: NEG
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: LD_INT 4
44315: NEG
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 2
44323: PUSH
44324: LD_INT 2
44326: NEG
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 2
44334: NEG
44335: PUSH
44336: LD_INT 4
44338: NEG
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 4
44346: PUSH
44347: LD_INT 0
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 4
44356: PUSH
44357: LD_INT 1
44359: NEG
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 5
44367: PUSH
44368: LD_INT 0
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 5
44377: PUSH
44378: LD_INT 1
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 4
44387: PUSH
44388: LD_INT 1
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 3
44397: PUSH
44398: LD_INT 0
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 3
44407: PUSH
44408: LD_INT 1
44410: NEG
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 3
44418: PUSH
44419: LD_INT 2
44421: NEG
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 5
44429: PUSH
44430: LD_INT 2
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
44484: LD_ADDR_VAR 0 32
44488: PUSH
44489: LD_INT 4
44491: NEG
44492: PUSH
44493: LD_INT 0
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 4
44502: NEG
44503: PUSH
44504: LD_INT 1
44506: NEG
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 3
44514: NEG
44515: PUSH
44516: LD_INT 0
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 3
44525: NEG
44526: PUSH
44527: LD_INT 1
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 4
44536: NEG
44537: PUSH
44538: LD_INT 1
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 5
44547: NEG
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 5
44558: NEG
44559: PUSH
44560: LD_INT 1
44562: NEG
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 5
44570: NEG
44571: PUSH
44572: LD_INT 2
44574: NEG
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 3
44582: NEG
44583: PUSH
44584: LD_INT 2
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 3
44593: NEG
44594: PUSH
44595: LD_INT 3
44597: NEG
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 3
44605: NEG
44606: PUSH
44607: LD_INT 4
44609: NEG
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 2
44617: NEG
44618: PUSH
44619: LD_INT 3
44621: NEG
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 2
44629: NEG
44630: PUSH
44631: LD_INT 2
44633: NEG
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 3
44641: NEG
44642: PUSH
44643: LD_INT 2
44645: NEG
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 4
44653: NEG
44654: PUSH
44655: LD_INT 3
44657: NEG
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 4
44665: NEG
44666: PUSH
44667: LD_INT 4
44669: NEG
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 2
44677: NEG
44678: PUSH
44679: LD_INT 4
44681: NEG
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 4
44689: NEG
44690: PUSH
44691: LD_INT 2
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 0
44701: PUSH
44702: LD_INT 4
44704: NEG
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 0
44712: PUSH
44713: LD_INT 5
44715: NEG
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 1
44723: PUSH
44724: LD_INT 4
44726: NEG
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 1
44734: PUSH
44735: LD_INT 3
44737: NEG
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 0
44745: PUSH
44746: LD_INT 3
44748: NEG
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 1
44756: NEG
44757: PUSH
44758: LD_INT 4
44760: NEG
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 1
44768: NEG
44769: PUSH
44770: LD_INT 5
44772: NEG
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 2
44780: PUSH
44781: LD_INT 3
44783: NEG
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 2
44791: NEG
44792: PUSH
44793: LD_INT 5
44795: NEG
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 3
44803: PUSH
44804: LD_INT 0
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 3
44813: PUSH
44814: LD_INT 1
44816: NEG
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 4
44824: PUSH
44825: LD_INT 0
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 4
44834: PUSH
44835: LD_INT 1
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 3
44844: PUSH
44845: LD_INT 1
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 2
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 2
44864: PUSH
44865: LD_INT 1
44867: NEG
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 2
44875: PUSH
44876: LD_INT 2
44878: NEG
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 4
44886: PUSH
44887: LD_INT 2
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 4
44896: PUSH
44897: LD_INT 4
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 4
44906: PUSH
44907: LD_INT 3
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 5
44916: PUSH
44917: LD_INT 4
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 5
44926: PUSH
44927: LD_INT 5
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 4
44936: PUSH
44937: LD_INT 5
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 3
44946: PUSH
44947: LD_INT 4
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 3
44956: PUSH
44957: LD_INT 3
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 5
44966: PUSH
44967: LD_INT 3
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 3
44976: PUSH
44977: LD_INT 5
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
45031: LD_ADDR_VAR 0 33
45035: PUSH
45036: LD_INT 4
45038: NEG
45039: PUSH
45040: LD_INT 4
45042: NEG
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 4
45050: NEG
45051: PUSH
45052: LD_INT 5
45054: NEG
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 3
45062: NEG
45063: PUSH
45064: LD_INT 4
45066: NEG
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 3
45074: NEG
45075: PUSH
45076: LD_INT 3
45078: NEG
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 4
45086: NEG
45087: PUSH
45088: LD_INT 3
45090: NEG
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 5
45098: NEG
45099: PUSH
45100: LD_INT 4
45102: NEG
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 5
45110: NEG
45111: PUSH
45112: LD_INT 5
45114: NEG
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 3
45122: NEG
45123: PUSH
45124: LD_INT 5
45126: NEG
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 5
45134: NEG
45135: PUSH
45136: LD_INT 3
45138: NEG
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: LD_INT 3
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 0
45157: PUSH
45158: LD_INT 4
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: LD_INT 3
45171: NEG
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 1
45179: PUSH
45180: LD_INT 2
45182: NEG
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 0
45190: PUSH
45191: LD_INT 2
45193: NEG
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 1
45201: NEG
45202: PUSH
45203: LD_INT 3
45205: NEG
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 1
45213: NEG
45214: PUSH
45215: LD_INT 4
45217: NEG
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 2
45225: PUSH
45226: LD_INT 2
45228: NEG
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 2
45236: NEG
45237: PUSH
45238: LD_INT 4
45240: NEG
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 4
45248: PUSH
45249: LD_INT 0
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 4
45258: PUSH
45259: LD_INT 1
45261: NEG
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 5
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 5
45279: PUSH
45280: LD_INT 1
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 4
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 3
45299: PUSH
45300: LD_INT 0
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 3
45309: PUSH
45310: LD_INT 1
45312: NEG
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 3
45320: PUSH
45321: LD_INT 2
45323: NEG
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 5
45331: PUSH
45332: LD_INT 2
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 3
45341: PUSH
45342: LD_INT 3
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 3
45351: PUSH
45352: LD_INT 2
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 4
45361: PUSH
45362: LD_INT 3
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 4
45371: PUSH
45372: LD_INT 4
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 3
45381: PUSH
45382: LD_INT 4
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 2
45391: PUSH
45392: LD_INT 3
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 2
45401: PUSH
45402: LD_INT 2
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 4
45411: PUSH
45412: LD_INT 2
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 2
45421: PUSH
45422: LD_INT 4
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 0
45431: PUSH
45432: LD_INT 4
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 0
45441: PUSH
45442: LD_INT 3
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 1
45451: PUSH
45452: LD_INT 4
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 1
45461: PUSH
45462: LD_INT 5
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: LD_INT 5
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 1
45481: NEG
45482: PUSH
45483: LD_INT 4
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: LD_INT 3
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 2
45503: PUSH
45504: LD_INT 5
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 2
45513: NEG
45514: PUSH
45515: LD_INT 3
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
45569: LD_ADDR_VAR 0 34
45573: PUSH
45574: LD_INT 0
45576: PUSH
45577: LD_INT 4
45579: NEG
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 0
45587: PUSH
45588: LD_INT 5
45590: NEG
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 1
45598: PUSH
45599: LD_INT 4
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 1
45609: PUSH
45610: LD_INT 3
45612: NEG
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: LD_INT 3
45623: NEG
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 1
45631: NEG
45632: PUSH
45633: LD_INT 4
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 1
45643: NEG
45644: PUSH
45645: LD_INT 5
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 2
45655: PUSH
45656: LD_INT 3
45658: NEG
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 2
45666: NEG
45667: PUSH
45668: LD_INT 5
45670: NEG
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 3
45678: PUSH
45679: LD_INT 0
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 3
45688: PUSH
45689: LD_INT 1
45691: NEG
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 4
45699: PUSH
45700: LD_INT 0
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 4
45709: PUSH
45710: LD_INT 1
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 3
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 2
45729: PUSH
45730: LD_INT 0
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 2
45739: PUSH
45740: LD_INT 1
45742: NEG
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 2
45750: PUSH
45751: LD_INT 2
45753: NEG
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 4
45761: PUSH
45762: LD_INT 2
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 4
45771: PUSH
45772: LD_INT 4
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 4
45781: PUSH
45782: LD_INT 3
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 5
45791: PUSH
45792: LD_INT 4
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 5
45801: PUSH
45802: LD_INT 5
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 4
45811: PUSH
45812: LD_INT 5
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 3
45821: PUSH
45822: LD_INT 4
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 3
45831: PUSH
45832: LD_INT 3
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 5
45841: PUSH
45842: LD_INT 3
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 3
45851: PUSH
45852: LD_INT 5
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: LD_INT 3
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 0
45871: PUSH
45872: LD_INT 2
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: PUSH
45882: LD_INT 3
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 1
45891: PUSH
45892: LD_INT 4
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: LD_INT 4
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 1
45911: NEG
45912: PUSH
45913: LD_INT 3
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 1
45922: NEG
45923: PUSH
45924: LD_INT 2
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 2
45933: PUSH
45934: LD_INT 4
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 2
45943: NEG
45944: PUSH
45945: LD_INT 2
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 4
45954: NEG
45955: PUSH
45956: LD_INT 0
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 4
45965: NEG
45966: PUSH
45967: LD_INT 1
45969: NEG
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 3
45977: NEG
45978: PUSH
45979: LD_INT 0
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 3
45988: NEG
45989: PUSH
45990: LD_INT 1
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 4
45999: NEG
46000: PUSH
46001: LD_INT 1
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 5
46010: NEG
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 5
46021: NEG
46022: PUSH
46023: LD_INT 1
46025: NEG
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 5
46033: NEG
46034: PUSH
46035: LD_INT 2
46037: NEG
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 3
46045: NEG
46046: PUSH
46047: LD_INT 2
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: ST_TO_ADDR
// end ; end ;
46101: GO 46104
46103: POP
// case btype of b_depot , b_warehouse :
46104: LD_VAR 0 1
46108: PUSH
46109: LD_INT 0
46111: DOUBLE
46112: EQUAL
46113: IFTRUE 46123
46115: LD_INT 1
46117: DOUBLE
46118: EQUAL
46119: IFTRUE 46123
46121: GO 46324
46123: POP
// case nation of nation_american :
46124: LD_VAR 0 5
46128: PUSH
46129: LD_INT 1
46131: DOUBLE
46132: EQUAL
46133: IFTRUE 46137
46135: GO 46193
46137: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
46138: LD_ADDR_VAR 0 9
46142: PUSH
46143: LD_VAR 0 11
46147: PUSH
46148: LD_VAR 0 12
46152: PUSH
46153: LD_VAR 0 13
46157: PUSH
46158: LD_VAR 0 14
46162: PUSH
46163: LD_VAR 0 15
46167: PUSH
46168: LD_VAR 0 16
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: PUSH
46181: LD_VAR 0 4
46185: PUSH
46186: LD_INT 1
46188: PLUS
46189: ARRAY
46190: ST_TO_ADDR
46191: GO 46322
46193: LD_INT 2
46195: DOUBLE
46196: EQUAL
46197: IFTRUE 46201
46199: GO 46257
46201: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
46202: LD_ADDR_VAR 0 9
46206: PUSH
46207: LD_VAR 0 17
46211: PUSH
46212: LD_VAR 0 18
46216: PUSH
46217: LD_VAR 0 19
46221: PUSH
46222: LD_VAR 0 20
46226: PUSH
46227: LD_VAR 0 21
46231: PUSH
46232: LD_VAR 0 22
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: PUSH
46245: LD_VAR 0 4
46249: PUSH
46250: LD_INT 1
46252: PLUS
46253: ARRAY
46254: ST_TO_ADDR
46255: GO 46322
46257: LD_INT 3
46259: DOUBLE
46260: EQUAL
46261: IFTRUE 46265
46263: GO 46321
46265: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
46266: LD_ADDR_VAR 0 9
46270: PUSH
46271: LD_VAR 0 23
46275: PUSH
46276: LD_VAR 0 24
46280: PUSH
46281: LD_VAR 0 25
46285: PUSH
46286: LD_VAR 0 26
46290: PUSH
46291: LD_VAR 0 27
46295: PUSH
46296: LD_VAR 0 28
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: PUSH
46309: LD_VAR 0 4
46313: PUSH
46314: LD_INT 1
46316: PLUS
46317: ARRAY
46318: ST_TO_ADDR
46319: GO 46322
46321: POP
46322: GO 46877
46324: LD_INT 2
46326: DOUBLE
46327: EQUAL
46328: IFTRUE 46338
46330: LD_INT 3
46332: DOUBLE
46333: EQUAL
46334: IFTRUE 46338
46336: GO 46394
46338: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
46339: LD_ADDR_VAR 0 9
46343: PUSH
46344: LD_VAR 0 29
46348: PUSH
46349: LD_VAR 0 30
46353: PUSH
46354: LD_VAR 0 31
46358: PUSH
46359: LD_VAR 0 32
46363: PUSH
46364: LD_VAR 0 33
46368: PUSH
46369: LD_VAR 0 34
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: PUSH
46382: LD_VAR 0 4
46386: PUSH
46387: LD_INT 1
46389: PLUS
46390: ARRAY
46391: ST_TO_ADDR
46392: GO 46877
46394: LD_INT 16
46396: DOUBLE
46397: EQUAL
46398: IFTRUE 46456
46400: LD_INT 17
46402: DOUBLE
46403: EQUAL
46404: IFTRUE 46456
46406: LD_INT 18
46408: DOUBLE
46409: EQUAL
46410: IFTRUE 46456
46412: LD_INT 19
46414: DOUBLE
46415: EQUAL
46416: IFTRUE 46456
46418: LD_INT 22
46420: DOUBLE
46421: EQUAL
46422: IFTRUE 46456
46424: LD_INT 20
46426: DOUBLE
46427: EQUAL
46428: IFTRUE 46456
46430: LD_INT 21
46432: DOUBLE
46433: EQUAL
46434: IFTRUE 46456
46436: LD_INT 23
46438: DOUBLE
46439: EQUAL
46440: IFTRUE 46456
46442: LD_INT 24
46444: DOUBLE
46445: EQUAL
46446: IFTRUE 46456
46448: LD_INT 25
46450: DOUBLE
46451: EQUAL
46452: IFTRUE 46456
46454: GO 46512
46456: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
46457: LD_ADDR_VAR 0 9
46461: PUSH
46462: LD_VAR 0 35
46466: PUSH
46467: LD_VAR 0 36
46471: PUSH
46472: LD_VAR 0 37
46476: PUSH
46477: LD_VAR 0 38
46481: PUSH
46482: LD_VAR 0 39
46486: PUSH
46487: LD_VAR 0 40
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: PUSH
46500: LD_VAR 0 4
46504: PUSH
46505: LD_INT 1
46507: PLUS
46508: ARRAY
46509: ST_TO_ADDR
46510: GO 46877
46512: LD_INT 6
46514: DOUBLE
46515: EQUAL
46516: IFTRUE 46568
46518: LD_INT 7
46520: DOUBLE
46521: EQUAL
46522: IFTRUE 46568
46524: LD_INT 8
46526: DOUBLE
46527: EQUAL
46528: IFTRUE 46568
46530: LD_INT 13
46532: DOUBLE
46533: EQUAL
46534: IFTRUE 46568
46536: LD_INT 12
46538: DOUBLE
46539: EQUAL
46540: IFTRUE 46568
46542: LD_INT 15
46544: DOUBLE
46545: EQUAL
46546: IFTRUE 46568
46548: LD_INT 11
46550: DOUBLE
46551: EQUAL
46552: IFTRUE 46568
46554: LD_INT 14
46556: DOUBLE
46557: EQUAL
46558: IFTRUE 46568
46560: LD_INT 10
46562: DOUBLE
46563: EQUAL
46564: IFTRUE 46568
46566: GO 46624
46568: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
46569: LD_ADDR_VAR 0 9
46573: PUSH
46574: LD_VAR 0 41
46578: PUSH
46579: LD_VAR 0 42
46583: PUSH
46584: LD_VAR 0 43
46588: PUSH
46589: LD_VAR 0 44
46593: PUSH
46594: LD_VAR 0 45
46598: PUSH
46599: LD_VAR 0 46
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: PUSH
46612: LD_VAR 0 4
46616: PUSH
46617: LD_INT 1
46619: PLUS
46620: ARRAY
46621: ST_TO_ADDR
46622: GO 46877
46624: LD_INT 36
46626: DOUBLE
46627: EQUAL
46628: IFTRUE 46632
46630: GO 46688
46632: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
46633: LD_ADDR_VAR 0 9
46637: PUSH
46638: LD_VAR 0 47
46642: PUSH
46643: LD_VAR 0 48
46647: PUSH
46648: LD_VAR 0 49
46652: PUSH
46653: LD_VAR 0 50
46657: PUSH
46658: LD_VAR 0 51
46662: PUSH
46663: LD_VAR 0 52
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: PUSH
46676: LD_VAR 0 4
46680: PUSH
46681: LD_INT 1
46683: PLUS
46684: ARRAY
46685: ST_TO_ADDR
46686: GO 46877
46688: LD_INT 4
46690: DOUBLE
46691: EQUAL
46692: IFTRUE 46714
46694: LD_INT 5
46696: DOUBLE
46697: EQUAL
46698: IFTRUE 46714
46700: LD_INT 34
46702: DOUBLE
46703: EQUAL
46704: IFTRUE 46714
46706: LD_INT 37
46708: DOUBLE
46709: EQUAL
46710: IFTRUE 46714
46712: GO 46770
46714: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
46715: LD_ADDR_VAR 0 9
46719: PUSH
46720: LD_VAR 0 53
46724: PUSH
46725: LD_VAR 0 54
46729: PUSH
46730: LD_VAR 0 55
46734: PUSH
46735: LD_VAR 0 56
46739: PUSH
46740: LD_VAR 0 57
46744: PUSH
46745: LD_VAR 0 58
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: PUSH
46758: LD_VAR 0 4
46762: PUSH
46763: LD_INT 1
46765: PLUS
46766: ARRAY
46767: ST_TO_ADDR
46768: GO 46877
46770: LD_INT 31
46772: DOUBLE
46773: EQUAL
46774: IFTRUE 46820
46776: LD_INT 32
46778: DOUBLE
46779: EQUAL
46780: IFTRUE 46820
46782: LD_INT 33
46784: DOUBLE
46785: EQUAL
46786: IFTRUE 46820
46788: LD_INT 27
46790: DOUBLE
46791: EQUAL
46792: IFTRUE 46820
46794: LD_INT 26
46796: DOUBLE
46797: EQUAL
46798: IFTRUE 46820
46800: LD_INT 28
46802: DOUBLE
46803: EQUAL
46804: IFTRUE 46820
46806: LD_INT 29
46808: DOUBLE
46809: EQUAL
46810: IFTRUE 46820
46812: LD_INT 30
46814: DOUBLE
46815: EQUAL
46816: IFTRUE 46820
46818: GO 46876
46820: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
46821: LD_ADDR_VAR 0 9
46825: PUSH
46826: LD_VAR 0 59
46830: PUSH
46831: LD_VAR 0 60
46835: PUSH
46836: LD_VAR 0 61
46840: PUSH
46841: LD_VAR 0 62
46845: PUSH
46846: LD_VAR 0 63
46850: PUSH
46851: LD_VAR 0 64
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: PUSH
46864: LD_VAR 0 4
46868: PUSH
46869: LD_INT 1
46871: PLUS
46872: ARRAY
46873: ST_TO_ADDR
46874: GO 46877
46876: POP
// temp_list2 = [ ] ;
46877: LD_ADDR_VAR 0 10
46881: PUSH
46882: EMPTY
46883: ST_TO_ADDR
// for i in temp_list do
46884: LD_ADDR_VAR 0 8
46888: PUSH
46889: LD_VAR 0 9
46893: PUSH
46894: FOR_IN
46895: IFFALSE 46947
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
46897: LD_ADDR_VAR 0 10
46901: PUSH
46902: LD_VAR 0 10
46906: PUSH
46907: LD_VAR 0 8
46911: PUSH
46912: LD_INT 1
46914: ARRAY
46915: PUSH
46916: LD_VAR 0 2
46920: PLUS
46921: PUSH
46922: LD_VAR 0 8
46926: PUSH
46927: LD_INT 2
46929: ARRAY
46930: PUSH
46931: LD_VAR 0 3
46935: PLUS
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: EMPTY
46942: LIST
46943: ADD
46944: ST_TO_ADDR
46945: GO 46894
46947: POP
46948: POP
// result = temp_list2 ;
46949: LD_ADDR_VAR 0 7
46953: PUSH
46954: LD_VAR 0 10
46958: ST_TO_ADDR
// end ;
46959: LD_VAR 0 7
46963: RET
// export function EnemyInRange ( unit , dist ) ; begin
46964: LD_INT 0
46966: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
46967: LD_ADDR_VAR 0 3
46971: PUSH
46972: LD_VAR 0 1
46976: PPUSH
46977: CALL_OW 255
46981: PPUSH
46982: LD_VAR 0 1
46986: PPUSH
46987: CALL_OW 250
46991: PPUSH
46992: LD_VAR 0 1
46996: PPUSH
46997: CALL_OW 251
47001: PPUSH
47002: LD_VAR 0 2
47006: PPUSH
47007: CALL 20360 0 4
47011: PUSH
47012: LD_INT 4
47014: ARRAY
47015: ST_TO_ADDR
// end ;
47016: LD_VAR 0 3
47020: RET
// export function PlayerSeeMe ( unit ) ; begin
47021: LD_INT 0
47023: PPUSH
// result := See ( your_side , unit ) ;
47024: LD_ADDR_VAR 0 2
47028: PUSH
47029: LD_OWVAR 2
47033: PPUSH
47034: LD_VAR 0 1
47038: PPUSH
47039: CALL_OW 292
47043: ST_TO_ADDR
// end ;
47044: LD_VAR 0 2
47048: RET
// export function ReverseDir ( unit ) ; begin
47049: LD_INT 0
47051: PPUSH
// if not unit then
47052: LD_VAR 0 1
47056: NOT
47057: IFFALSE 47061
// exit ;
47059: GO 47084
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
47061: LD_ADDR_VAR 0 2
47065: PUSH
47066: LD_VAR 0 1
47070: PPUSH
47071: CALL_OW 254
47075: PUSH
47076: LD_INT 3
47078: PLUS
47079: PUSH
47080: LD_INT 6
47082: MOD
47083: ST_TO_ADDR
// end ;
47084: LD_VAR 0 2
47088: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
47089: LD_INT 0
47091: PPUSH
47092: PPUSH
47093: PPUSH
47094: PPUSH
47095: PPUSH
// if not hexes then
47096: LD_VAR 0 2
47100: NOT
47101: IFFALSE 47105
// exit ;
47103: GO 47253
// dist := 9999 ;
47105: LD_ADDR_VAR 0 5
47109: PUSH
47110: LD_INT 9999
47112: ST_TO_ADDR
// for i = 1 to hexes do
47113: LD_ADDR_VAR 0 4
47117: PUSH
47118: DOUBLE
47119: LD_INT 1
47121: DEC
47122: ST_TO_ADDR
47123: LD_VAR 0 2
47127: PUSH
47128: FOR_TO
47129: IFFALSE 47241
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
47131: LD_VAR 0 1
47135: PPUSH
47136: LD_VAR 0 2
47140: PUSH
47141: LD_VAR 0 4
47145: ARRAY
47146: PUSH
47147: LD_INT 1
47149: ARRAY
47150: PPUSH
47151: LD_VAR 0 2
47155: PUSH
47156: LD_VAR 0 4
47160: ARRAY
47161: PUSH
47162: LD_INT 2
47164: ARRAY
47165: PPUSH
47166: CALL_OW 297
47170: PUSH
47171: LD_VAR 0 5
47175: LESS
47176: IFFALSE 47239
// begin hex := hexes [ i ] ;
47178: LD_ADDR_VAR 0 7
47182: PUSH
47183: LD_VAR 0 2
47187: PUSH
47188: LD_VAR 0 4
47192: ARRAY
47193: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47194: LD_ADDR_VAR 0 5
47198: PUSH
47199: LD_VAR 0 1
47203: PPUSH
47204: LD_VAR 0 2
47208: PUSH
47209: LD_VAR 0 4
47213: ARRAY
47214: PUSH
47215: LD_INT 1
47217: ARRAY
47218: PPUSH
47219: LD_VAR 0 2
47223: PUSH
47224: LD_VAR 0 4
47228: ARRAY
47229: PUSH
47230: LD_INT 2
47232: ARRAY
47233: PPUSH
47234: CALL_OW 297
47238: ST_TO_ADDR
// end ; end ;
47239: GO 47128
47241: POP
47242: POP
// result := hex ;
47243: LD_ADDR_VAR 0 3
47247: PUSH
47248: LD_VAR 0 7
47252: ST_TO_ADDR
// end ;
47253: LD_VAR 0 3
47257: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
47258: LD_INT 0
47260: PPUSH
47261: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
47262: LD_VAR 0 1
47266: NOT
47267: PUSH
47268: LD_VAR 0 1
47272: PUSH
47273: LD_INT 21
47275: PUSH
47276: LD_INT 2
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 23
47285: PUSH
47286: LD_INT 2
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PPUSH
47297: CALL_OW 69
47301: IN
47302: NOT
47303: OR
47304: IFFALSE 47308
// exit ;
47306: GO 47355
// for i = 1 to 3 do
47308: LD_ADDR_VAR 0 3
47312: PUSH
47313: DOUBLE
47314: LD_INT 1
47316: DEC
47317: ST_TO_ADDR
47318: LD_INT 3
47320: PUSH
47321: FOR_TO
47322: IFFALSE 47353
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
47324: LD_VAR 0 1
47328: PPUSH
47329: CALL_OW 250
47333: PPUSH
47334: LD_VAR 0 1
47338: PPUSH
47339: CALL_OW 251
47343: PPUSH
47344: LD_INT 1
47346: PPUSH
47347: CALL_OW 453
47351: GO 47321
47353: POP
47354: POP
// end ;
47355: LD_VAR 0 2
47359: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
47360: LD_INT 0
47362: PPUSH
47363: PPUSH
47364: PPUSH
47365: PPUSH
47366: PPUSH
47367: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
47368: LD_VAR 0 1
47372: NOT
47373: PUSH
47374: LD_VAR 0 2
47378: NOT
47379: OR
47380: PUSH
47381: LD_VAR 0 1
47385: PPUSH
47386: CALL_OW 314
47390: OR
47391: IFFALSE 47395
// exit ;
47393: GO 47836
// x := GetX ( enemy_unit ) ;
47395: LD_ADDR_VAR 0 7
47399: PUSH
47400: LD_VAR 0 2
47404: PPUSH
47405: CALL_OW 250
47409: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
47410: LD_ADDR_VAR 0 8
47414: PUSH
47415: LD_VAR 0 2
47419: PPUSH
47420: CALL_OW 251
47424: ST_TO_ADDR
// if not x or not y then
47425: LD_VAR 0 7
47429: NOT
47430: PUSH
47431: LD_VAR 0 8
47435: NOT
47436: OR
47437: IFFALSE 47441
// exit ;
47439: GO 47836
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
47441: LD_ADDR_VAR 0 6
47445: PUSH
47446: LD_VAR 0 7
47450: PPUSH
47451: LD_INT 0
47453: PPUSH
47454: LD_INT 4
47456: PPUSH
47457: CALL_OW 272
47461: PUSH
47462: LD_VAR 0 8
47466: PPUSH
47467: LD_INT 0
47469: PPUSH
47470: LD_INT 4
47472: PPUSH
47473: CALL_OW 273
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_VAR 0 7
47486: PPUSH
47487: LD_INT 1
47489: PPUSH
47490: LD_INT 4
47492: PPUSH
47493: CALL_OW 272
47497: PUSH
47498: LD_VAR 0 8
47502: PPUSH
47503: LD_INT 1
47505: PPUSH
47506: LD_INT 4
47508: PPUSH
47509: CALL_OW 273
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_VAR 0 7
47522: PPUSH
47523: LD_INT 2
47525: PPUSH
47526: LD_INT 4
47528: PPUSH
47529: CALL_OW 272
47533: PUSH
47534: LD_VAR 0 8
47538: PPUSH
47539: LD_INT 2
47541: PPUSH
47542: LD_INT 4
47544: PPUSH
47545: CALL_OW 273
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_VAR 0 7
47558: PPUSH
47559: LD_INT 3
47561: PPUSH
47562: LD_INT 4
47564: PPUSH
47565: CALL_OW 272
47569: PUSH
47570: LD_VAR 0 8
47574: PPUSH
47575: LD_INT 3
47577: PPUSH
47578: LD_INT 4
47580: PPUSH
47581: CALL_OW 273
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_VAR 0 7
47594: PPUSH
47595: LD_INT 4
47597: PPUSH
47598: LD_INT 4
47600: PPUSH
47601: CALL_OW 272
47605: PUSH
47606: LD_VAR 0 8
47610: PPUSH
47611: LD_INT 4
47613: PPUSH
47614: LD_INT 4
47616: PPUSH
47617: CALL_OW 273
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_VAR 0 7
47630: PPUSH
47631: LD_INT 5
47633: PPUSH
47634: LD_INT 4
47636: PPUSH
47637: CALL_OW 272
47641: PUSH
47642: LD_VAR 0 8
47646: PPUSH
47647: LD_INT 5
47649: PPUSH
47650: LD_INT 4
47652: PPUSH
47653: CALL_OW 273
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: ST_TO_ADDR
// for i = tmp downto 1 do
47670: LD_ADDR_VAR 0 4
47674: PUSH
47675: DOUBLE
47676: LD_VAR 0 6
47680: INC
47681: ST_TO_ADDR
47682: LD_INT 1
47684: PUSH
47685: FOR_DOWNTO
47686: IFFALSE 47787
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
47688: LD_VAR 0 6
47692: PUSH
47693: LD_VAR 0 4
47697: ARRAY
47698: PUSH
47699: LD_INT 1
47701: ARRAY
47702: PPUSH
47703: LD_VAR 0 6
47707: PUSH
47708: LD_VAR 0 4
47712: ARRAY
47713: PUSH
47714: LD_INT 2
47716: ARRAY
47717: PPUSH
47718: CALL_OW 488
47722: NOT
47723: PUSH
47724: LD_VAR 0 6
47728: PUSH
47729: LD_VAR 0 4
47733: ARRAY
47734: PUSH
47735: LD_INT 1
47737: ARRAY
47738: PPUSH
47739: LD_VAR 0 6
47743: PUSH
47744: LD_VAR 0 4
47748: ARRAY
47749: PUSH
47750: LD_INT 2
47752: ARRAY
47753: PPUSH
47754: CALL_OW 428
47758: PUSH
47759: LD_INT 0
47761: NONEQUAL
47762: OR
47763: IFFALSE 47785
// tmp := Delete ( tmp , i ) ;
47765: LD_ADDR_VAR 0 6
47769: PUSH
47770: LD_VAR 0 6
47774: PPUSH
47775: LD_VAR 0 4
47779: PPUSH
47780: CALL_OW 3
47784: ST_TO_ADDR
47785: GO 47685
47787: POP
47788: POP
// j := GetClosestHex ( unit , tmp ) ;
47789: LD_ADDR_VAR 0 5
47793: PUSH
47794: LD_VAR 0 1
47798: PPUSH
47799: LD_VAR 0 6
47803: PPUSH
47804: CALL 47089 0 2
47808: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
47809: LD_VAR 0 1
47813: PPUSH
47814: LD_VAR 0 5
47818: PUSH
47819: LD_INT 1
47821: ARRAY
47822: PPUSH
47823: LD_VAR 0 5
47827: PUSH
47828: LD_INT 2
47830: ARRAY
47831: PPUSH
47832: CALL_OW 111
// end ;
47836: LD_VAR 0 3
47840: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
47841: LD_INT 0
47843: PPUSH
47844: PPUSH
47845: PPUSH
// uc_side = 0 ;
47846: LD_ADDR_OWVAR 20
47850: PUSH
47851: LD_INT 0
47853: ST_TO_ADDR
// uc_nation = 0 ;
47854: LD_ADDR_OWVAR 21
47858: PUSH
47859: LD_INT 0
47861: ST_TO_ADDR
// InitHc_All ( ) ;
47862: CALL_OW 584
// InitVc ;
47866: CALL_OW 20
// if mastodonts then
47870: LD_VAR 0 6
47874: IFFALSE 47941
// for i = 1 to mastodonts do
47876: LD_ADDR_VAR 0 11
47880: PUSH
47881: DOUBLE
47882: LD_INT 1
47884: DEC
47885: ST_TO_ADDR
47886: LD_VAR 0 6
47890: PUSH
47891: FOR_TO
47892: IFFALSE 47939
// begin vc_chassis := 31 ;
47894: LD_ADDR_OWVAR 37
47898: PUSH
47899: LD_INT 31
47901: ST_TO_ADDR
// vc_control := control_rider ;
47902: LD_ADDR_OWVAR 38
47906: PUSH
47907: LD_INT 4
47909: ST_TO_ADDR
// animal := CreateVehicle ;
47910: LD_ADDR_VAR 0 12
47914: PUSH
47915: CALL_OW 45
47919: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47920: LD_VAR 0 12
47924: PPUSH
47925: LD_VAR 0 8
47929: PPUSH
47930: LD_INT 0
47932: PPUSH
47933: CALL 50129 0 3
// end ;
47937: GO 47891
47939: POP
47940: POP
// if horses then
47941: LD_VAR 0 5
47945: IFFALSE 48012
// for i = 1 to horses do
47947: LD_ADDR_VAR 0 11
47951: PUSH
47952: DOUBLE
47953: LD_INT 1
47955: DEC
47956: ST_TO_ADDR
47957: LD_VAR 0 5
47961: PUSH
47962: FOR_TO
47963: IFFALSE 48010
// begin hc_class := 21 ;
47965: LD_ADDR_OWVAR 28
47969: PUSH
47970: LD_INT 21
47972: ST_TO_ADDR
// hc_gallery :=  ;
47973: LD_ADDR_OWVAR 33
47977: PUSH
47978: LD_STRING 
47980: ST_TO_ADDR
// animal := CreateHuman ;
47981: LD_ADDR_VAR 0 12
47985: PUSH
47986: CALL_OW 44
47990: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47991: LD_VAR 0 12
47995: PPUSH
47996: LD_VAR 0 8
48000: PPUSH
48001: LD_INT 0
48003: PPUSH
48004: CALL 50129 0 3
// end ;
48008: GO 47962
48010: POP
48011: POP
// if birds then
48012: LD_VAR 0 1
48016: IFFALSE 48083
// for i = 1 to birds do
48018: LD_ADDR_VAR 0 11
48022: PUSH
48023: DOUBLE
48024: LD_INT 1
48026: DEC
48027: ST_TO_ADDR
48028: LD_VAR 0 1
48032: PUSH
48033: FOR_TO
48034: IFFALSE 48081
// begin hc_class = 18 ;
48036: LD_ADDR_OWVAR 28
48040: PUSH
48041: LD_INT 18
48043: ST_TO_ADDR
// hc_gallery =  ;
48044: LD_ADDR_OWVAR 33
48048: PUSH
48049: LD_STRING 
48051: ST_TO_ADDR
// animal := CreateHuman ;
48052: LD_ADDR_VAR 0 12
48056: PUSH
48057: CALL_OW 44
48061: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48062: LD_VAR 0 12
48066: PPUSH
48067: LD_VAR 0 8
48071: PPUSH
48072: LD_INT 0
48074: PPUSH
48075: CALL 50129 0 3
// end ;
48079: GO 48033
48081: POP
48082: POP
// if tigers then
48083: LD_VAR 0 2
48087: IFFALSE 48171
// for i = 1 to tigers do
48089: LD_ADDR_VAR 0 11
48093: PUSH
48094: DOUBLE
48095: LD_INT 1
48097: DEC
48098: ST_TO_ADDR
48099: LD_VAR 0 2
48103: PUSH
48104: FOR_TO
48105: IFFALSE 48169
// begin hc_class = class_tiger ;
48107: LD_ADDR_OWVAR 28
48111: PUSH
48112: LD_INT 14
48114: ST_TO_ADDR
// hc_gallery =  ;
48115: LD_ADDR_OWVAR 33
48119: PUSH
48120: LD_STRING 
48122: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
48123: LD_ADDR_OWVAR 35
48127: PUSH
48128: LD_INT 7
48130: NEG
48131: PPUSH
48132: LD_INT 7
48134: PPUSH
48135: CALL_OW 12
48139: ST_TO_ADDR
// animal := CreateHuman ;
48140: LD_ADDR_VAR 0 12
48144: PUSH
48145: CALL_OW 44
48149: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48150: LD_VAR 0 12
48154: PPUSH
48155: LD_VAR 0 8
48159: PPUSH
48160: LD_INT 0
48162: PPUSH
48163: CALL 50129 0 3
// end ;
48167: GO 48104
48169: POP
48170: POP
// if apemans then
48171: LD_VAR 0 3
48175: IFFALSE 48298
// for i = 1 to apemans do
48177: LD_ADDR_VAR 0 11
48181: PUSH
48182: DOUBLE
48183: LD_INT 1
48185: DEC
48186: ST_TO_ADDR
48187: LD_VAR 0 3
48191: PUSH
48192: FOR_TO
48193: IFFALSE 48296
// begin hc_class = class_apeman ;
48195: LD_ADDR_OWVAR 28
48199: PUSH
48200: LD_INT 12
48202: ST_TO_ADDR
// hc_gallery =  ;
48203: LD_ADDR_OWVAR 33
48207: PUSH
48208: LD_STRING 
48210: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
48211: LD_ADDR_OWVAR 35
48215: PUSH
48216: LD_INT 2
48218: NEG
48219: PPUSH
48220: LD_INT 2
48222: PPUSH
48223: CALL_OW 12
48227: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
48228: LD_ADDR_OWVAR 31
48232: PUSH
48233: LD_INT 1
48235: PPUSH
48236: LD_INT 3
48238: PPUSH
48239: CALL_OW 12
48243: PUSH
48244: LD_INT 1
48246: PPUSH
48247: LD_INT 3
48249: PPUSH
48250: CALL_OW 12
48254: PUSH
48255: LD_INT 0
48257: PUSH
48258: LD_INT 0
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: ST_TO_ADDR
// animal := CreateHuman ;
48267: LD_ADDR_VAR 0 12
48271: PUSH
48272: CALL_OW 44
48276: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48277: LD_VAR 0 12
48281: PPUSH
48282: LD_VAR 0 8
48286: PPUSH
48287: LD_INT 0
48289: PPUSH
48290: CALL 50129 0 3
// end ;
48294: GO 48192
48296: POP
48297: POP
// if enchidnas then
48298: LD_VAR 0 4
48302: IFFALSE 48369
// for i = 1 to enchidnas do
48304: LD_ADDR_VAR 0 11
48308: PUSH
48309: DOUBLE
48310: LD_INT 1
48312: DEC
48313: ST_TO_ADDR
48314: LD_VAR 0 4
48318: PUSH
48319: FOR_TO
48320: IFFALSE 48367
// begin hc_class = 13 ;
48322: LD_ADDR_OWVAR 28
48326: PUSH
48327: LD_INT 13
48329: ST_TO_ADDR
// hc_gallery =  ;
48330: LD_ADDR_OWVAR 33
48334: PUSH
48335: LD_STRING 
48337: ST_TO_ADDR
// animal := CreateHuman ;
48338: LD_ADDR_VAR 0 12
48342: PUSH
48343: CALL_OW 44
48347: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48348: LD_VAR 0 12
48352: PPUSH
48353: LD_VAR 0 8
48357: PPUSH
48358: LD_INT 0
48360: PPUSH
48361: CALL 50129 0 3
// end ;
48365: GO 48319
48367: POP
48368: POP
// if fishes then
48369: LD_VAR 0 7
48373: IFFALSE 48440
// for i = 1 to fishes do
48375: LD_ADDR_VAR 0 11
48379: PUSH
48380: DOUBLE
48381: LD_INT 1
48383: DEC
48384: ST_TO_ADDR
48385: LD_VAR 0 7
48389: PUSH
48390: FOR_TO
48391: IFFALSE 48438
// begin hc_class = 20 ;
48393: LD_ADDR_OWVAR 28
48397: PUSH
48398: LD_INT 20
48400: ST_TO_ADDR
// hc_gallery =  ;
48401: LD_ADDR_OWVAR 33
48405: PUSH
48406: LD_STRING 
48408: ST_TO_ADDR
// animal := CreateHuman ;
48409: LD_ADDR_VAR 0 12
48413: PUSH
48414: CALL_OW 44
48418: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
48419: LD_VAR 0 12
48423: PPUSH
48424: LD_VAR 0 9
48428: PPUSH
48429: LD_INT 0
48431: PPUSH
48432: CALL 50129 0 3
// end ;
48436: GO 48390
48438: POP
48439: POP
// end ;
48440: LD_VAR 0 10
48444: RET
// export function WantHeal ( sci , unit ) ; begin
48445: LD_INT 0
48447: PPUSH
// if GetTaskList ( sci ) > 0 then
48448: LD_VAR 0 1
48452: PPUSH
48453: CALL_OW 437
48457: PUSH
48458: LD_INT 0
48460: GREATER
48461: IFFALSE 48531
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
48463: LD_VAR 0 1
48467: PPUSH
48468: CALL_OW 437
48472: PUSH
48473: LD_INT 1
48475: ARRAY
48476: PUSH
48477: LD_INT 1
48479: ARRAY
48480: PUSH
48481: LD_STRING l
48483: EQUAL
48484: PUSH
48485: LD_VAR 0 1
48489: PPUSH
48490: CALL_OW 437
48494: PUSH
48495: LD_INT 1
48497: ARRAY
48498: PUSH
48499: LD_INT 4
48501: ARRAY
48502: PUSH
48503: LD_VAR 0 2
48507: EQUAL
48508: AND
48509: IFFALSE 48521
// result := true else
48511: LD_ADDR_VAR 0 3
48515: PUSH
48516: LD_INT 1
48518: ST_TO_ADDR
48519: GO 48529
// result := false ;
48521: LD_ADDR_VAR 0 3
48525: PUSH
48526: LD_INT 0
48528: ST_TO_ADDR
// end else
48529: GO 48539
// result := false ;
48531: LD_ADDR_VAR 0 3
48535: PUSH
48536: LD_INT 0
48538: ST_TO_ADDR
// end ;
48539: LD_VAR 0 3
48543: RET
// export function HealTarget ( sci ) ; begin
48544: LD_INT 0
48546: PPUSH
// if not sci then
48547: LD_VAR 0 1
48551: NOT
48552: IFFALSE 48556
// exit ;
48554: GO 48621
// result := 0 ;
48556: LD_ADDR_VAR 0 2
48560: PUSH
48561: LD_INT 0
48563: ST_TO_ADDR
// if GetTaskList ( sci ) then
48564: LD_VAR 0 1
48568: PPUSH
48569: CALL_OW 437
48573: IFFALSE 48621
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
48575: LD_VAR 0 1
48579: PPUSH
48580: CALL_OW 437
48584: PUSH
48585: LD_INT 1
48587: ARRAY
48588: PUSH
48589: LD_INT 1
48591: ARRAY
48592: PUSH
48593: LD_STRING l
48595: EQUAL
48596: IFFALSE 48621
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
48598: LD_ADDR_VAR 0 2
48602: PUSH
48603: LD_VAR 0 1
48607: PPUSH
48608: CALL_OW 437
48612: PUSH
48613: LD_INT 1
48615: ARRAY
48616: PUSH
48617: LD_INT 4
48619: ARRAY
48620: ST_TO_ADDR
// end ;
48621: LD_VAR 0 2
48625: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
48626: LD_INT 0
48628: PPUSH
48629: PPUSH
48630: PPUSH
48631: PPUSH
// if not base_units then
48632: LD_VAR 0 1
48636: NOT
48637: IFFALSE 48641
// exit ;
48639: GO 48728
// result := false ;
48641: LD_ADDR_VAR 0 2
48645: PUSH
48646: LD_INT 0
48648: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
48649: LD_ADDR_VAR 0 5
48653: PUSH
48654: LD_VAR 0 1
48658: PPUSH
48659: LD_INT 21
48661: PUSH
48662: LD_INT 3
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PPUSH
48669: CALL_OW 72
48673: ST_TO_ADDR
// if not tmp then
48674: LD_VAR 0 5
48678: NOT
48679: IFFALSE 48683
// exit ;
48681: GO 48728
// for i in tmp do
48683: LD_ADDR_VAR 0 3
48687: PUSH
48688: LD_VAR 0 5
48692: PUSH
48693: FOR_IN
48694: IFFALSE 48726
// begin result := EnemyInRange ( i , 22 ) ;
48696: LD_ADDR_VAR 0 2
48700: PUSH
48701: LD_VAR 0 3
48705: PPUSH
48706: LD_INT 22
48708: PPUSH
48709: CALL 46964 0 2
48713: ST_TO_ADDR
// if result then
48714: LD_VAR 0 2
48718: IFFALSE 48724
// exit ;
48720: POP
48721: POP
48722: GO 48728
// end ;
48724: GO 48693
48726: POP
48727: POP
// end ;
48728: LD_VAR 0 2
48732: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
48733: LD_INT 0
48735: PPUSH
48736: PPUSH
// if not units then
48737: LD_VAR 0 1
48741: NOT
48742: IFFALSE 48746
// exit ;
48744: GO 48816
// result := [ ] ;
48746: LD_ADDR_VAR 0 3
48750: PUSH
48751: EMPTY
48752: ST_TO_ADDR
// for i in units do
48753: LD_ADDR_VAR 0 4
48757: PUSH
48758: LD_VAR 0 1
48762: PUSH
48763: FOR_IN
48764: IFFALSE 48814
// if GetTag ( i ) = tag then
48766: LD_VAR 0 4
48770: PPUSH
48771: CALL_OW 110
48775: PUSH
48776: LD_VAR 0 2
48780: EQUAL
48781: IFFALSE 48812
// result := Replace ( result , result + 1 , i ) ;
48783: LD_ADDR_VAR 0 3
48787: PUSH
48788: LD_VAR 0 3
48792: PPUSH
48793: LD_VAR 0 3
48797: PUSH
48798: LD_INT 1
48800: PLUS
48801: PPUSH
48802: LD_VAR 0 4
48806: PPUSH
48807: CALL_OW 1
48811: ST_TO_ADDR
48812: GO 48763
48814: POP
48815: POP
// end ;
48816: LD_VAR 0 3
48820: RET
// export function IsDriver ( un ) ; begin
48821: LD_INT 0
48823: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
48824: LD_ADDR_VAR 0 2
48828: PUSH
48829: LD_VAR 0 1
48833: PUSH
48834: LD_INT 55
48836: PUSH
48837: EMPTY
48838: LIST
48839: PPUSH
48840: CALL_OW 69
48844: IN
48845: ST_TO_ADDR
// end ;
48846: LD_VAR 0 2
48850: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
48851: LD_INT 0
48853: PPUSH
48854: PPUSH
// list := [ ] ;
48855: LD_ADDR_VAR 0 5
48859: PUSH
48860: EMPTY
48861: ST_TO_ADDR
// case d of 0 :
48862: LD_VAR 0 3
48866: PUSH
48867: LD_INT 0
48869: DOUBLE
48870: EQUAL
48871: IFTRUE 48875
48873: GO 49008
48875: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
48876: LD_ADDR_VAR 0 5
48880: PUSH
48881: LD_VAR 0 1
48885: PUSH
48886: LD_INT 4
48888: MINUS
48889: PUSH
48890: LD_VAR 0 2
48894: PUSH
48895: LD_INT 4
48897: MINUS
48898: PUSH
48899: LD_INT 2
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: LIST
48906: PUSH
48907: LD_VAR 0 1
48911: PUSH
48912: LD_INT 3
48914: MINUS
48915: PUSH
48916: LD_VAR 0 2
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: LIST
48928: PUSH
48929: LD_VAR 0 1
48933: PUSH
48934: LD_INT 4
48936: PLUS
48937: PUSH
48938: LD_VAR 0 2
48942: PUSH
48943: LD_INT 4
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: LIST
48950: PUSH
48951: LD_VAR 0 1
48955: PUSH
48956: LD_INT 3
48958: PLUS
48959: PUSH
48960: LD_VAR 0 2
48964: PUSH
48965: LD_INT 3
48967: PLUS
48968: PUSH
48969: LD_INT 5
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: LIST
48976: PUSH
48977: LD_VAR 0 1
48981: PUSH
48982: LD_VAR 0 2
48986: PUSH
48987: LD_INT 4
48989: PLUS
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: LIST
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: ST_TO_ADDR
// end ; 1 :
49006: GO 49706
49008: LD_INT 1
49010: DOUBLE
49011: EQUAL
49012: IFTRUE 49016
49014: GO 49149
49016: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
49017: LD_ADDR_VAR 0 5
49021: PUSH
49022: LD_VAR 0 1
49026: PUSH
49027: LD_VAR 0 2
49031: PUSH
49032: LD_INT 4
49034: MINUS
49035: PUSH
49036: LD_INT 3
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: LIST
49043: PUSH
49044: LD_VAR 0 1
49048: PUSH
49049: LD_INT 3
49051: MINUS
49052: PUSH
49053: LD_VAR 0 2
49057: PUSH
49058: LD_INT 3
49060: MINUS
49061: PUSH
49062: LD_INT 2
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: LIST
49069: PUSH
49070: LD_VAR 0 1
49074: PUSH
49075: LD_INT 4
49077: MINUS
49078: PUSH
49079: LD_VAR 0 2
49083: PUSH
49084: LD_INT 1
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: LIST
49091: PUSH
49092: LD_VAR 0 1
49096: PUSH
49097: LD_VAR 0 2
49101: PUSH
49102: LD_INT 3
49104: PLUS
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: LIST
49113: PUSH
49114: LD_VAR 0 1
49118: PUSH
49119: LD_INT 4
49121: PLUS
49122: PUSH
49123: LD_VAR 0 2
49127: PUSH
49128: LD_INT 4
49130: PLUS
49131: PUSH
49132: LD_INT 5
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: LIST
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: ST_TO_ADDR
// end ; 2 :
49147: GO 49706
49149: LD_INT 2
49151: DOUBLE
49152: EQUAL
49153: IFTRUE 49157
49155: GO 49286
49157: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
49158: LD_ADDR_VAR 0 5
49162: PUSH
49163: LD_VAR 0 1
49167: PUSH
49168: LD_VAR 0 2
49172: PUSH
49173: LD_INT 3
49175: MINUS
49176: PUSH
49177: LD_INT 3
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: LIST
49184: PUSH
49185: LD_VAR 0 1
49189: PUSH
49190: LD_INT 4
49192: PLUS
49193: PUSH
49194: LD_VAR 0 2
49198: PUSH
49199: LD_INT 4
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: LIST
49206: PUSH
49207: LD_VAR 0 1
49211: PUSH
49212: LD_VAR 0 2
49216: PUSH
49217: LD_INT 4
49219: PLUS
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: LIST
49228: PUSH
49229: LD_VAR 0 1
49233: PUSH
49234: LD_INT 3
49236: MINUS
49237: PUSH
49238: LD_VAR 0 2
49242: PUSH
49243: LD_INT 1
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: LIST
49250: PUSH
49251: LD_VAR 0 1
49255: PUSH
49256: LD_INT 4
49258: MINUS
49259: PUSH
49260: LD_VAR 0 2
49264: PUSH
49265: LD_INT 4
49267: MINUS
49268: PUSH
49269: LD_INT 2
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: LIST
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: ST_TO_ADDR
// end ; 3 :
49284: GO 49706
49286: LD_INT 3
49288: DOUBLE
49289: EQUAL
49290: IFTRUE 49294
49292: GO 49427
49294: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
49295: LD_ADDR_VAR 0 5
49299: PUSH
49300: LD_VAR 0 1
49304: PUSH
49305: LD_INT 3
49307: PLUS
49308: PUSH
49309: LD_VAR 0 2
49313: PUSH
49314: LD_INT 4
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: LIST
49321: PUSH
49322: LD_VAR 0 1
49326: PUSH
49327: LD_INT 4
49329: PLUS
49330: PUSH
49331: LD_VAR 0 2
49335: PUSH
49336: LD_INT 4
49338: PLUS
49339: PUSH
49340: LD_INT 5
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: LIST
49347: PUSH
49348: LD_VAR 0 1
49352: PUSH
49353: LD_INT 4
49355: MINUS
49356: PUSH
49357: LD_VAR 0 2
49361: PUSH
49362: LD_INT 1
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: LIST
49369: PUSH
49370: LD_VAR 0 1
49374: PUSH
49375: LD_VAR 0 2
49379: PUSH
49380: LD_INT 4
49382: MINUS
49383: PUSH
49384: LD_INT 3
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: LIST
49391: PUSH
49392: LD_VAR 0 1
49396: PUSH
49397: LD_INT 3
49399: MINUS
49400: PUSH
49401: LD_VAR 0 2
49405: PUSH
49406: LD_INT 3
49408: MINUS
49409: PUSH
49410: LD_INT 2
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: LIST
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: ST_TO_ADDR
// end ; 4 :
49425: GO 49706
49427: LD_INT 4
49429: DOUBLE
49430: EQUAL
49431: IFTRUE 49435
49433: GO 49568
49435: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
49436: LD_ADDR_VAR 0 5
49440: PUSH
49441: LD_VAR 0 1
49445: PUSH
49446: LD_VAR 0 2
49450: PUSH
49451: LD_INT 4
49453: PLUS
49454: PUSH
49455: LD_INT 0
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: LIST
49462: PUSH
49463: LD_VAR 0 1
49467: PUSH
49468: LD_INT 3
49470: PLUS
49471: PUSH
49472: LD_VAR 0 2
49476: PUSH
49477: LD_INT 3
49479: PLUS
49480: PUSH
49481: LD_INT 5
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: LIST
49488: PUSH
49489: LD_VAR 0 1
49493: PUSH
49494: LD_INT 4
49496: PLUS
49497: PUSH
49498: LD_VAR 0 2
49502: PUSH
49503: LD_INT 4
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: LIST
49510: PUSH
49511: LD_VAR 0 1
49515: PUSH
49516: LD_VAR 0 2
49520: PUSH
49521: LD_INT 3
49523: MINUS
49524: PUSH
49525: LD_INT 3
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: LIST
49532: PUSH
49533: LD_VAR 0 1
49537: PUSH
49538: LD_INT 4
49540: MINUS
49541: PUSH
49542: LD_VAR 0 2
49546: PUSH
49547: LD_INT 4
49549: MINUS
49550: PUSH
49551: LD_INT 2
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: LIST
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: ST_TO_ADDR
// end ; 5 :
49566: GO 49706
49568: LD_INT 5
49570: DOUBLE
49571: EQUAL
49572: IFTRUE 49576
49574: GO 49705
49576: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
49577: LD_ADDR_VAR 0 5
49581: PUSH
49582: LD_VAR 0 1
49586: PUSH
49587: LD_INT 4
49589: MINUS
49590: PUSH
49591: LD_VAR 0 2
49595: PUSH
49596: LD_INT 1
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: LIST
49603: PUSH
49604: LD_VAR 0 1
49608: PUSH
49609: LD_VAR 0 2
49613: PUSH
49614: LD_INT 4
49616: MINUS
49617: PUSH
49618: LD_INT 3
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: LIST
49625: PUSH
49626: LD_VAR 0 1
49630: PUSH
49631: LD_INT 4
49633: PLUS
49634: PUSH
49635: LD_VAR 0 2
49639: PUSH
49640: LD_INT 4
49642: PLUS
49643: PUSH
49644: LD_INT 5
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: LIST
49651: PUSH
49652: LD_VAR 0 1
49656: PUSH
49657: LD_INT 3
49659: PLUS
49660: PUSH
49661: LD_VAR 0 2
49665: PUSH
49666: LD_INT 4
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: LIST
49673: PUSH
49674: LD_VAR 0 1
49678: PUSH
49679: LD_VAR 0 2
49683: PUSH
49684: LD_INT 3
49686: PLUS
49687: PUSH
49688: LD_INT 0
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: LIST
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: ST_TO_ADDR
// end ; end ;
49703: GO 49706
49705: POP
// result := list ;
49706: LD_ADDR_VAR 0 4
49710: PUSH
49711: LD_VAR 0 5
49715: ST_TO_ADDR
// end ;
49716: LD_VAR 0 4
49720: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
49721: LD_INT 0
49723: PPUSH
49724: PPUSH
49725: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
49726: LD_VAR 0 1
49730: NOT
49731: PUSH
49732: LD_VAR 0 2
49736: PUSH
49737: LD_INT 1
49739: PUSH
49740: LD_INT 2
49742: PUSH
49743: LD_INT 3
49745: PUSH
49746: LD_INT 4
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: IN
49755: NOT
49756: OR
49757: IFFALSE 49761
// exit ;
49759: GO 49853
// tmp := [ ] ;
49761: LD_ADDR_VAR 0 5
49765: PUSH
49766: EMPTY
49767: ST_TO_ADDR
// for i in units do
49768: LD_ADDR_VAR 0 4
49772: PUSH
49773: LD_VAR 0 1
49777: PUSH
49778: FOR_IN
49779: IFFALSE 49822
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
49781: LD_ADDR_VAR 0 5
49785: PUSH
49786: LD_VAR 0 5
49790: PPUSH
49791: LD_VAR 0 5
49795: PUSH
49796: LD_INT 1
49798: PLUS
49799: PPUSH
49800: LD_VAR 0 4
49804: PPUSH
49805: LD_VAR 0 2
49809: PPUSH
49810: CALL_OW 259
49814: PPUSH
49815: CALL_OW 2
49819: ST_TO_ADDR
49820: GO 49778
49822: POP
49823: POP
// if not tmp then
49824: LD_VAR 0 5
49828: NOT
49829: IFFALSE 49833
// exit ;
49831: GO 49853
// result := SortListByListDesc ( units , tmp ) ;
49833: LD_ADDR_VAR 0 3
49837: PUSH
49838: LD_VAR 0 1
49842: PPUSH
49843: LD_VAR 0 5
49847: PPUSH
49848: CALL_OW 77
49852: ST_TO_ADDR
// end ;
49853: LD_VAR 0 3
49857: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
49858: LD_INT 0
49860: PPUSH
49861: PPUSH
49862: PPUSH
// result := false ;
49863: LD_ADDR_VAR 0 3
49867: PUSH
49868: LD_INT 0
49870: ST_TO_ADDR
// x := GetX ( building ) ;
49871: LD_ADDR_VAR 0 4
49875: PUSH
49876: LD_VAR 0 2
49880: PPUSH
49881: CALL_OW 250
49885: ST_TO_ADDR
// y := GetY ( building ) ;
49886: LD_ADDR_VAR 0 5
49890: PUSH
49891: LD_VAR 0 2
49895: PPUSH
49896: CALL_OW 251
49900: ST_TO_ADDR
// if not building or not x or not y then
49901: LD_VAR 0 2
49905: NOT
49906: PUSH
49907: LD_VAR 0 4
49911: NOT
49912: OR
49913: PUSH
49914: LD_VAR 0 5
49918: NOT
49919: OR
49920: IFFALSE 49924
// exit ;
49922: GO 50016
// if GetTaskList ( unit ) then
49924: LD_VAR 0 1
49928: PPUSH
49929: CALL_OW 437
49933: IFFALSE 50016
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
49935: LD_STRING e
49937: PUSH
49938: LD_VAR 0 1
49942: PPUSH
49943: CALL_OW 437
49947: PUSH
49948: LD_INT 1
49950: ARRAY
49951: PUSH
49952: LD_INT 1
49954: ARRAY
49955: EQUAL
49956: PUSH
49957: LD_VAR 0 4
49961: PUSH
49962: LD_VAR 0 1
49966: PPUSH
49967: CALL_OW 437
49971: PUSH
49972: LD_INT 1
49974: ARRAY
49975: PUSH
49976: LD_INT 2
49978: ARRAY
49979: EQUAL
49980: AND
49981: PUSH
49982: LD_VAR 0 5
49986: PUSH
49987: LD_VAR 0 1
49991: PPUSH
49992: CALL_OW 437
49996: PUSH
49997: LD_INT 1
49999: ARRAY
50000: PUSH
50001: LD_INT 3
50003: ARRAY
50004: EQUAL
50005: AND
50006: IFFALSE 50016
// result := true end ;
50008: LD_ADDR_VAR 0 3
50012: PUSH
50013: LD_INT 1
50015: ST_TO_ADDR
// end ;
50016: LD_VAR 0 3
50020: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
50021: LD_INT 0
50023: PPUSH
// result := false ;
50024: LD_ADDR_VAR 0 4
50028: PUSH
50029: LD_INT 0
50031: ST_TO_ADDR
// if GetTaskList ( unit ) then
50032: LD_VAR 0 1
50036: PPUSH
50037: CALL_OW 437
50041: IFFALSE 50124
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
50043: LD_STRING M
50045: PUSH
50046: LD_VAR 0 1
50050: PPUSH
50051: CALL_OW 437
50055: PUSH
50056: LD_INT 1
50058: ARRAY
50059: PUSH
50060: LD_INT 1
50062: ARRAY
50063: EQUAL
50064: PUSH
50065: LD_VAR 0 2
50069: PUSH
50070: LD_VAR 0 1
50074: PPUSH
50075: CALL_OW 437
50079: PUSH
50080: LD_INT 1
50082: ARRAY
50083: PUSH
50084: LD_INT 2
50086: ARRAY
50087: EQUAL
50088: AND
50089: PUSH
50090: LD_VAR 0 3
50094: PUSH
50095: LD_VAR 0 1
50099: PPUSH
50100: CALL_OW 437
50104: PUSH
50105: LD_INT 1
50107: ARRAY
50108: PUSH
50109: LD_INT 3
50111: ARRAY
50112: EQUAL
50113: AND
50114: IFFALSE 50124
// result := true ;
50116: LD_ADDR_VAR 0 4
50120: PUSH
50121: LD_INT 1
50123: ST_TO_ADDR
// end ; end ;
50124: LD_VAR 0 4
50128: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
50129: LD_INT 0
50131: PPUSH
50132: PPUSH
50133: PPUSH
50134: PPUSH
// if not unit or not area then
50135: LD_VAR 0 1
50139: NOT
50140: PUSH
50141: LD_VAR 0 2
50145: NOT
50146: OR
50147: IFFALSE 50151
// exit ;
50149: GO 50315
// tmp := AreaToList ( area , i ) ;
50151: LD_ADDR_VAR 0 6
50155: PUSH
50156: LD_VAR 0 2
50160: PPUSH
50161: LD_VAR 0 5
50165: PPUSH
50166: CALL_OW 517
50170: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
50171: LD_ADDR_VAR 0 5
50175: PUSH
50176: DOUBLE
50177: LD_INT 1
50179: DEC
50180: ST_TO_ADDR
50181: LD_VAR 0 6
50185: PUSH
50186: LD_INT 1
50188: ARRAY
50189: PUSH
50190: FOR_TO
50191: IFFALSE 50313
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
50193: LD_ADDR_VAR 0 7
50197: PUSH
50198: LD_VAR 0 6
50202: PUSH
50203: LD_INT 1
50205: ARRAY
50206: PUSH
50207: LD_VAR 0 5
50211: ARRAY
50212: PUSH
50213: LD_VAR 0 6
50217: PUSH
50218: LD_INT 2
50220: ARRAY
50221: PUSH
50222: LD_VAR 0 5
50226: ARRAY
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
50232: LD_VAR 0 7
50236: PUSH
50237: LD_INT 1
50239: ARRAY
50240: PPUSH
50241: LD_VAR 0 7
50245: PUSH
50246: LD_INT 2
50248: ARRAY
50249: PPUSH
50250: CALL_OW 428
50254: PUSH
50255: LD_INT 0
50257: EQUAL
50258: IFFALSE 50311
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
50260: LD_VAR 0 1
50264: PPUSH
50265: LD_VAR 0 7
50269: PUSH
50270: LD_INT 1
50272: ARRAY
50273: PPUSH
50274: LD_VAR 0 7
50278: PUSH
50279: LD_INT 2
50281: ARRAY
50282: PPUSH
50283: LD_VAR 0 3
50287: PPUSH
50288: CALL_OW 48
// result := IsPlaced ( unit ) ;
50292: LD_ADDR_VAR 0 4
50296: PUSH
50297: LD_VAR 0 1
50301: PPUSH
50302: CALL_OW 305
50306: ST_TO_ADDR
// exit ;
50307: POP
50308: POP
50309: GO 50315
// end ; end ;
50311: GO 50190
50313: POP
50314: POP
// end ;
50315: LD_VAR 0 4
50319: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
50320: LD_INT 0
50322: PPUSH
50323: PPUSH
50324: PPUSH
// if not side or side > 8 then
50325: LD_VAR 0 1
50329: NOT
50330: PUSH
50331: LD_VAR 0 1
50335: PUSH
50336: LD_INT 8
50338: GREATER
50339: OR
50340: IFFALSE 50344
// exit ;
50342: GO 50531
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
50344: LD_ADDR_VAR 0 4
50348: PUSH
50349: LD_INT 22
50351: PUSH
50352: LD_VAR 0 1
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 21
50363: PUSH
50364: LD_INT 3
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PPUSH
50375: CALL_OW 69
50379: ST_TO_ADDR
// if not tmp then
50380: LD_VAR 0 4
50384: NOT
50385: IFFALSE 50389
// exit ;
50387: GO 50531
// enable_addtolog := true ;
50389: LD_ADDR_OWVAR 81
50393: PUSH
50394: LD_INT 1
50396: ST_TO_ADDR
// AddToLog ( [ ) ;
50397: LD_STRING [
50399: PPUSH
50400: CALL_OW 561
// for i in tmp do
50404: LD_ADDR_VAR 0 3
50408: PUSH
50409: LD_VAR 0 4
50413: PUSH
50414: FOR_IN
50415: IFFALSE 50522
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
50417: LD_STRING [
50419: PUSH
50420: LD_VAR 0 3
50424: PPUSH
50425: CALL_OW 266
50429: STR
50430: PUSH
50431: LD_STRING , 
50433: STR
50434: PUSH
50435: LD_VAR 0 3
50439: PPUSH
50440: CALL_OW 250
50444: STR
50445: PUSH
50446: LD_STRING , 
50448: STR
50449: PUSH
50450: LD_VAR 0 3
50454: PPUSH
50455: CALL_OW 251
50459: STR
50460: PUSH
50461: LD_STRING , 
50463: STR
50464: PUSH
50465: LD_VAR 0 3
50469: PPUSH
50470: CALL_OW 254
50474: STR
50475: PUSH
50476: LD_STRING , 
50478: STR
50479: PUSH
50480: LD_VAR 0 3
50484: PPUSH
50485: LD_INT 1
50487: PPUSH
50488: CALL_OW 268
50492: STR
50493: PUSH
50494: LD_STRING , 
50496: STR
50497: PUSH
50498: LD_VAR 0 3
50502: PPUSH
50503: LD_INT 2
50505: PPUSH
50506: CALL_OW 268
50510: STR
50511: PUSH
50512: LD_STRING ],
50514: STR
50515: PPUSH
50516: CALL_OW 561
// end ;
50520: GO 50414
50522: POP
50523: POP
// AddToLog ( ]; ) ;
50524: LD_STRING ];
50526: PPUSH
50527: CALL_OW 561
// end ;
50531: LD_VAR 0 2
50535: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
50536: LD_INT 0
50538: PPUSH
50539: PPUSH
50540: PPUSH
50541: PPUSH
50542: PPUSH
// if not area or not rate or not max then
50543: LD_VAR 0 1
50547: NOT
50548: PUSH
50549: LD_VAR 0 2
50553: NOT
50554: OR
50555: PUSH
50556: LD_VAR 0 4
50560: NOT
50561: OR
50562: IFFALSE 50566
// exit ;
50564: GO 50758
// while 1 do
50566: LD_INT 1
50568: IFFALSE 50758
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
50570: LD_ADDR_VAR 0 9
50574: PUSH
50575: LD_VAR 0 1
50579: PPUSH
50580: LD_INT 1
50582: PPUSH
50583: CALL_OW 287
50587: PUSH
50588: LD_INT 10
50590: MUL
50591: ST_TO_ADDR
// r := rate / 10 ;
50592: LD_ADDR_VAR 0 7
50596: PUSH
50597: LD_VAR 0 2
50601: PUSH
50602: LD_INT 10
50604: DIVREAL
50605: ST_TO_ADDR
// time := 1 1$00 ;
50606: LD_ADDR_VAR 0 8
50610: PUSH
50611: LD_INT 2100
50613: ST_TO_ADDR
// if amount < min then
50614: LD_VAR 0 9
50618: PUSH
50619: LD_VAR 0 3
50623: LESS
50624: IFFALSE 50642
// r := r * 2 else
50626: LD_ADDR_VAR 0 7
50630: PUSH
50631: LD_VAR 0 7
50635: PUSH
50636: LD_INT 2
50638: MUL
50639: ST_TO_ADDR
50640: GO 50668
// if amount > max then
50642: LD_VAR 0 9
50646: PUSH
50647: LD_VAR 0 4
50651: GREATER
50652: IFFALSE 50668
// r := r / 2 ;
50654: LD_ADDR_VAR 0 7
50658: PUSH
50659: LD_VAR 0 7
50663: PUSH
50664: LD_INT 2
50666: DIVREAL
50667: ST_TO_ADDR
// time := time / r ;
50668: LD_ADDR_VAR 0 8
50672: PUSH
50673: LD_VAR 0 8
50677: PUSH
50678: LD_VAR 0 7
50682: DIVREAL
50683: ST_TO_ADDR
// if time < 0 then
50684: LD_VAR 0 8
50688: PUSH
50689: LD_INT 0
50691: LESS
50692: IFFALSE 50709
// time := time * - 1 ;
50694: LD_ADDR_VAR 0 8
50698: PUSH
50699: LD_VAR 0 8
50703: PUSH
50704: LD_INT 1
50706: NEG
50707: MUL
50708: ST_TO_ADDR
// wait ( time ) ;
50709: LD_VAR 0 8
50713: PPUSH
50714: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
50718: LD_INT 35
50720: PPUSH
50721: LD_INT 875
50723: PPUSH
50724: CALL_OW 12
50728: PPUSH
50729: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
50733: LD_INT 1
50735: PPUSH
50736: LD_INT 5
50738: PPUSH
50739: CALL_OW 12
50743: PPUSH
50744: LD_VAR 0 1
50748: PPUSH
50749: LD_INT 1
50751: PPUSH
50752: CALL_OW 55
// end ;
50756: GO 50566
// end ;
50758: LD_VAR 0 5
50762: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
50763: LD_INT 0
50765: PPUSH
50766: PPUSH
50767: PPUSH
50768: PPUSH
50769: PPUSH
50770: PPUSH
50771: PPUSH
50772: PPUSH
// if not turrets or not factories then
50773: LD_VAR 0 1
50777: NOT
50778: PUSH
50779: LD_VAR 0 2
50783: NOT
50784: OR
50785: IFFALSE 50789
// exit ;
50787: GO 51096
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
50789: LD_ADDR_VAR 0 10
50793: PUSH
50794: LD_INT 5
50796: PUSH
50797: LD_INT 6
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 2
50806: PUSH
50807: LD_INT 4
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 3
50816: PUSH
50817: LD_INT 5
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 24
50831: PUSH
50832: LD_INT 25
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 23
50841: PUSH
50842: LD_INT 27
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 42
50855: PUSH
50856: LD_INT 43
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 44
50865: PUSH
50866: LD_INT 46
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 45
50875: PUSH
50876: LD_INT 47
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: LIST
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: LIST
50892: ST_TO_ADDR
// result := [ ] ;
50893: LD_ADDR_VAR 0 3
50897: PUSH
50898: EMPTY
50899: ST_TO_ADDR
// for i in turrets do
50900: LD_ADDR_VAR 0 4
50904: PUSH
50905: LD_VAR 0 1
50909: PUSH
50910: FOR_IN
50911: IFFALSE 51094
// begin nat := GetNation ( i ) ;
50913: LD_ADDR_VAR 0 7
50917: PUSH
50918: LD_VAR 0 4
50922: PPUSH
50923: CALL_OW 248
50927: ST_TO_ADDR
// weapon := 0 ;
50928: LD_ADDR_VAR 0 8
50932: PUSH
50933: LD_INT 0
50935: ST_TO_ADDR
// if not nat then
50936: LD_VAR 0 7
50940: NOT
50941: IFFALSE 50945
// continue ;
50943: GO 50910
// for j in list [ nat ] do
50945: LD_ADDR_VAR 0 5
50949: PUSH
50950: LD_VAR 0 10
50954: PUSH
50955: LD_VAR 0 7
50959: ARRAY
50960: PUSH
50961: FOR_IN
50962: IFFALSE 51003
// if GetBWeapon ( i ) = j [ 1 ] then
50964: LD_VAR 0 4
50968: PPUSH
50969: CALL_OW 269
50973: PUSH
50974: LD_VAR 0 5
50978: PUSH
50979: LD_INT 1
50981: ARRAY
50982: EQUAL
50983: IFFALSE 51001
// begin weapon := j [ 2 ] ;
50985: LD_ADDR_VAR 0 8
50989: PUSH
50990: LD_VAR 0 5
50994: PUSH
50995: LD_INT 2
50997: ARRAY
50998: ST_TO_ADDR
// break ;
50999: GO 51003
// end ;
51001: GO 50961
51003: POP
51004: POP
// if not weapon then
51005: LD_VAR 0 8
51009: NOT
51010: IFFALSE 51014
// continue ;
51012: GO 50910
// for k in factories do
51014: LD_ADDR_VAR 0 6
51018: PUSH
51019: LD_VAR 0 2
51023: PUSH
51024: FOR_IN
51025: IFFALSE 51090
// begin weapons := AvailableWeaponList ( k ) ;
51027: LD_ADDR_VAR 0 9
51031: PUSH
51032: LD_VAR 0 6
51036: PPUSH
51037: CALL_OW 478
51041: ST_TO_ADDR
// if not weapons then
51042: LD_VAR 0 9
51046: NOT
51047: IFFALSE 51051
// continue ;
51049: GO 51024
// if weapon in weapons then
51051: LD_VAR 0 8
51055: PUSH
51056: LD_VAR 0 9
51060: IN
51061: IFFALSE 51088
// begin result := [ i , weapon ] ;
51063: LD_ADDR_VAR 0 3
51067: PUSH
51068: LD_VAR 0 4
51072: PUSH
51073: LD_VAR 0 8
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: ST_TO_ADDR
// exit ;
51082: POP
51083: POP
51084: POP
51085: POP
51086: GO 51096
// end ; end ;
51088: GO 51024
51090: POP
51091: POP
// end ;
51092: GO 50910
51094: POP
51095: POP
// end ;
51096: LD_VAR 0 3
51100: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
51101: LD_INT 0
51103: PPUSH
// if not side or side > 8 then
51104: LD_VAR 0 3
51108: NOT
51109: PUSH
51110: LD_VAR 0 3
51114: PUSH
51115: LD_INT 8
51117: GREATER
51118: OR
51119: IFFALSE 51123
// exit ;
51121: GO 51182
// if not range then
51123: LD_VAR 0 4
51127: NOT
51128: IFFALSE 51139
// range := - 12 ;
51130: LD_ADDR_VAR 0 4
51134: PUSH
51135: LD_INT 12
51137: NEG
51138: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
51139: LD_VAR 0 1
51143: PPUSH
51144: LD_VAR 0 2
51148: PPUSH
51149: LD_VAR 0 3
51153: PPUSH
51154: LD_VAR 0 4
51158: PPUSH
51159: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
51163: LD_VAR 0 1
51167: PPUSH
51168: LD_VAR 0 2
51172: PPUSH
51173: LD_VAR 0 3
51177: PPUSH
51178: CALL_OW 331
// end ;
51182: LD_VAR 0 5
51186: RET
// export function Video ( mode ) ; begin
51187: LD_INT 0
51189: PPUSH
// ingame_video = mode ;
51190: LD_ADDR_OWVAR 52
51194: PUSH
51195: LD_VAR 0 1
51199: ST_TO_ADDR
// interface_hidden = mode ;
51200: LD_ADDR_OWVAR 54
51204: PUSH
51205: LD_VAR 0 1
51209: ST_TO_ADDR
// end ;
51210: LD_VAR 0 2
51214: RET
// export function Join ( array , element ) ; begin
51215: LD_INT 0
51217: PPUSH
// result := Replace ( array , array + 1 , element ) ;
51218: LD_ADDR_VAR 0 3
51222: PUSH
51223: LD_VAR 0 1
51227: PPUSH
51228: LD_VAR 0 1
51232: PUSH
51233: LD_INT 1
51235: PLUS
51236: PPUSH
51237: LD_VAR 0 2
51241: PPUSH
51242: CALL_OW 1
51246: ST_TO_ADDR
// end ;
51247: LD_VAR 0 3
51251: RET
// export function JoinUnion ( array , element ) ; begin
51252: LD_INT 0
51254: PPUSH
// result := array union element ;
51255: LD_ADDR_VAR 0 3
51259: PUSH
51260: LD_VAR 0 1
51264: PUSH
51265: LD_VAR 0 2
51269: UNION
51270: ST_TO_ADDR
// end ;
51271: LD_VAR 0 3
51275: RET
// export function GetBehemoths ( side ) ; begin
51276: LD_INT 0
51278: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
51279: LD_ADDR_VAR 0 2
51283: PUSH
51284: LD_INT 22
51286: PUSH
51287: LD_VAR 0 1
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 31
51298: PUSH
51299: LD_INT 25
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PPUSH
51310: CALL_OW 69
51314: ST_TO_ADDR
// end ;
51315: LD_VAR 0 2
51319: RET
// export function Shuffle ( array ) ; var i , index ; begin
51320: LD_INT 0
51322: PPUSH
51323: PPUSH
51324: PPUSH
// result := [ ] ;
51325: LD_ADDR_VAR 0 2
51329: PUSH
51330: EMPTY
51331: ST_TO_ADDR
// if not array then
51332: LD_VAR 0 1
51336: NOT
51337: IFFALSE 51341
// exit ;
51339: GO 51440
// Randomize ;
51341: CALL_OW 10
// for i = array downto 1 do
51345: LD_ADDR_VAR 0 3
51349: PUSH
51350: DOUBLE
51351: LD_VAR 0 1
51355: INC
51356: ST_TO_ADDR
51357: LD_INT 1
51359: PUSH
51360: FOR_DOWNTO
51361: IFFALSE 51438
// begin index := rand ( 1 , array ) ;
51363: LD_ADDR_VAR 0 4
51367: PUSH
51368: LD_INT 1
51370: PPUSH
51371: LD_VAR 0 1
51375: PPUSH
51376: CALL_OW 12
51380: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
51381: LD_ADDR_VAR 0 2
51385: PUSH
51386: LD_VAR 0 2
51390: PPUSH
51391: LD_VAR 0 2
51395: PUSH
51396: LD_INT 1
51398: PLUS
51399: PPUSH
51400: LD_VAR 0 1
51404: PUSH
51405: LD_VAR 0 4
51409: ARRAY
51410: PPUSH
51411: CALL_OW 2
51415: ST_TO_ADDR
// array := Delete ( array , index ) ;
51416: LD_ADDR_VAR 0 1
51420: PUSH
51421: LD_VAR 0 1
51425: PPUSH
51426: LD_VAR 0 4
51430: PPUSH
51431: CALL_OW 3
51435: ST_TO_ADDR
// end ;
51436: GO 51360
51438: POP
51439: POP
// end ;
51440: LD_VAR 0 2
51444: RET
// export function GetBaseMaterials ( base ) ; begin
51445: LD_INT 0
51447: PPUSH
// result := [ 0 , 0 , 0 ] ;
51448: LD_ADDR_VAR 0 2
51452: PUSH
51453: LD_INT 0
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: LIST
51466: ST_TO_ADDR
// if not base then
51467: LD_VAR 0 1
51471: NOT
51472: IFFALSE 51476
// exit ;
51474: GO 51525
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
51476: LD_ADDR_VAR 0 2
51480: PUSH
51481: LD_VAR 0 1
51485: PPUSH
51486: LD_INT 1
51488: PPUSH
51489: CALL_OW 275
51493: PUSH
51494: LD_VAR 0 1
51498: PPUSH
51499: LD_INT 2
51501: PPUSH
51502: CALL_OW 275
51506: PUSH
51507: LD_VAR 0 1
51511: PPUSH
51512: LD_INT 3
51514: PPUSH
51515: CALL_OW 275
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: LIST
51524: ST_TO_ADDR
// end ;
51525: LD_VAR 0 2
51529: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
51530: LD_INT 0
51532: PPUSH
51533: PPUSH
// result := array ;
51534: LD_ADDR_VAR 0 3
51538: PUSH
51539: LD_VAR 0 1
51543: ST_TO_ADDR
// if size > 0 then
51544: LD_VAR 0 2
51548: PUSH
51549: LD_INT 0
51551: GREATER
51552: IFFALSE 51598
// for i := array downto size do
51554: LD_ADDR_VAR 0 4
51558: PUSH
51559: DOUBLE
51560: LD_VAR 0 1
51564: INC
51565: ST_TO_ADDR
51566: LD_VAR 0 2
51570: PUSH
51571: FOR_DOWNTO
51572: IFFALSE 51596
// result := Delete ( result , result ) ;
51574: LD_ADDR_VAR 0 3
51578: PUSH
51579: LD_VAR 0 3
51583: PPUSH
51584: LD_VAR 0 3
51588: PPUSH
51589: CALL_OW 3
51593: ST_TO_ADDR
51594: GO 51571
51596: POP
51597: POP
// end ;
51598: LD_VAR 0 3
51602: RET
// export function ComExit ( unit ) ; var tmp ; begin
51603: LD_INT 0
51605: PPUSH
51606: PPUSH
// if not IsInUnit ( unit ) then
51607: LD_VAR 0 1
51611: PPUSH
51612: CALL_OW 310
51616: NOT
51617: IFFALSE 51621
// exit ;
51619: GO 51681
// tmp := IsInUnit ( unit ) ;
51621: LD_ADDR_VAR 0 3
51625: PUSH
51626: LD_VAR 0 1
51630: PPUSH
51631: CALL_OW 310
51635: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
51636: LD_VAR 0 3
51640: PPUSH
51641: CALL_OW 247
51645: PUSH
51646: LD_INT 2
51648: EQUAL
51649: IFFALSE 51662
// ComExitVehicle ( unit ) else
51651: LD_VAR 0 1
51655: PPUSH
51656: CALL_OW 121
51660: GO 51671
// ComExitBuilding ( unit ) ;
51662: LD_VAR 0 1
51666: PPUSH
51667: CALL_OW 122
// result := tmp ;
51671: LD_ADDR_VAR 0 2
51675: PUSH
51676: LD_VAR 0 3
51680: ST_TO_ADDR
// end ;
51681: LD_VAR 0 2
51685: RET
// export function ComExitAll ( units ) ; var i ; begin
51686: LD_INT 0
51688: PPUSH
51689: PPUSH
// if not units then
51690: LD_VAR 0 1
51694: NOT
51695: IFFALSE 51699
// exit ;
51697: GO 51725
// for i in units do
51699: LD_ADDR_VAR 0 3
51703: PUSH
51704: LD_VAR 0 1
51708: PUSH
51709: FOR_IN
51710: IFFALSE 51723
// ComExit ( i ) ;
51712: LD_VAR 0 3
51716: PPUSH
51717: CALL 51603 0 1
51721: GO 51709
51723: POP
51724: POP
// end ;
51725: LD_VAR 0 2
51729: RET
// export function ResetHc ; begin
51730: LD_INT 0
51732: PPUSH
// InitHc ;
51733: CALL_OW 19
// hc_importance := 0 ;
51737: LD_ADDR_OWVAR 32
51741: PUSH
51742: LD_INT 0
51744: ST_TO_ADDR
// end ;
51745: LD_VAR 0 1
51749: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
51750: LD_INT 0
51752: PPUSH
51753: PPUSH
51754: PPUSH
// _x := ( x1 + x2 ) div 2 ;
51755: LD_ADDR_VAR 0 6
51759: PUSH
51760: LD_VAR 0 1
51764: PUSH
51765: LD_VAR 0 3
51769: PLUS
51770: PUSH
51771: LD_INT 2
51773: DIV
51774: ST_TO_ADDR
// if _x < 0 then
51775: LD_VAR 0 6
51779: PUSH
51780: LD_INT 0
51782: LESS
51783: IFFALSE 51800
// _x := _x * - 1 ;
51785: LD_ADDR_VAR 0 6
51789: PUSH
51790: LD_VAR 0 6
51794: PUSH
51795: LD_INT 1
51797: NEG
51798: MUL
51799: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
51800: LD_ADDR_VAR 0 7
51804: PUSH
51805: LD_VAR 0 2
51809: PUSH
51810: LD_VAR 0 4
51814: PLUS
51815: PUSH
51816: LD_INT 2
51818: DIV
51819: ST_TO_ADDR
// if _y < 0 then
51820: LD_VAR 0 7
51824: PUSH
51825: LD_INT 0
51827: LESS
51828: IFFALSE 51845
// _y := _y * - 1 ;
51830: LD_ADDR_VAR 0 7
51834: PUSH
51835: LD_VAR 0 7
51839: PUSH
51840: LD_INT 1
51842: NEG
51843: MUL
51844: ST_TO_ADDR
// result := [ _x , _y ] ;
51845: LD_ADDR_VAR 0 5
51849: PUSH
51850: LD_VAR 0 6
51854: PUSH
51855: LD_VAR 0 7
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: ST_TO_ADDR
// end ;
51864: LD_VAR 0 5
51868: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
51869: LD_INT 0
51871: PPUSH
51872: PPUSH
51873: PPUSH
51874: PPUSH
// task := GetTaskList ( unit ) ;
51875: LD_ADDR_VAR 0 7
51879: PUSH
51880: LD_VAR 0 1
51884: PPUSH
51885: CALL_OW 437
51889: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
51890: LD_VAR 0 7
51894: NOT
51895: PUSH
51896: LD_VAR 0 1
51900: PPUSH
51901: LD_VAR 0 2
51905: PPUSH
51906: CALL_OW 308
51910: NOT
51911: AND
51912: IFFALSE 51916
// exit ;
51914: GO 52034
// if IsInArea ( unit , area ) then
51916: LD_VAR 0 1
51920: PPUSH
51921: LD_VAR 0 2
51925: PPUSH
51926: CALL_OW 308
51930: IFFALSE 51948
// begin ComMoveToArea ( unit , goAway ) ;
51932: LD_VAR 0 1
51936: PPUSH
51937: LD_VAR 0 3
51941: PPUSH
51942: CALL_OW 113
// exit ;
51946: GO 52034
// end ; if task [ 1 ] [ 1 ] <> M then
51948: LD_VAR 0 7
51952: PUSH
51953: LD_INT 1
51955: ARRAY
51956: PUSH
51957: LD_INT 1
51959: ARRAY
51960: PUSH
51961: LD_STRING M
51963: NONEQUAL
51964: IFFALSE 51968
// exit ;
51966: GO 52034
// x := task [ 1 ] [ 2 ] ;
51968: LD_ADDR_VAR 0 5
51972: PUSH
51973: LD_VAR 0 7
51977: PUSH
51978: LD_INT 1
51980: ARRAY
51981: PUSH
51982: LD_INT 2
51984: ARRAY
51985: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
51986: LD_ADDR_VAR 0 6
51990: PUSH
51991: LD_VAR 0 7
51995: PUSH
51996: LD_INT 1
51998: ARRAY
51999: PUSH
52000: LD_INT 3
52002: ARRAY
52003: ST_TO_ADDR
// if InArea ( x , y , area ) then
52004: LD_VAR 0 5
52008: PPUSH
52009: LD_VAR 0 6
52013: PPUSH
52014: LD_VAR 0 2
52018: PPUSH
52019: CALL_OW 309
52023: IFFALSE 52034
// ComStop ( unit ) ;
52025: LD_VAR 0 1
52029: PPUSH
52030: CALL_OW 141
// end ;
52034: LD_VAR 0 4
52038: RET
// export function Abs ( value ) ; begin
52039: LD_INT 0
52041: PPUSH
// result := value ;
52042: LD_ADDR_VAR 0 2
52046: PUSH
52047: LD_VAR 0 1
52051: ST_TO_ADDR
// if value < 0 then
52052: LD_VAR 0 1
52056: PUSH
52057: LD_INT 0
52059: LESS
52060: IFFALSE 52077
// result := value * - 1 ;
52062: LD_ADDR_VAR 0 2
52066: PUSH
52067: LD_VAR 0 1
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: MUL
52076: ST_TO_ADDR
// end ;
52077: LD_VAR 0 2
52081: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
52082: LD_INT 0
52084: PPUSH
52085: PPUSH
52086: PPUSH
52087: PPUSH
52088: PPUSH
52089: PPUSH
52090: PPUSH
52091: PPUSH
// if not unit or not building then
52092: LD_VAR 0 1
52096: NOT
52097: PUSH
52098: LD_VAR 0 2
52102: NOT
52103: OR
52104: IFFALSE 52108
// exit ;
52106: GO 52334
// x := GetX ( building ) ;
52108: LD_ADDR_VAR 0 4
52112: PUSH
52113: LD_VAR 0 2
52117: PPUSH
52118: CALL_OW 250
52122: ST_TO_ADDR
// y := GetY ( building ) ;
52123: LD_ADDR_VAR 0 6
52127: PUSH
52128: LD_VAR 0 2
52132: PPUSH
52133: CALL_OW 251
52137: ST_TO_ADDR
// d := GetDir ( building ) ;
52138: LD_ADDR_VAR 0 8
52142: PUSH
52143: LD_VAR 0 2
52147: PPUSH
52148: CALL_OW 254
52152: ST_TO_ADDR
// r := 4 ;
52153: LD_ADDR_VAR 0 9
52157: PUSH
52158: LD_INT 4
52160: ST_TO_ADDR
// for i := 1 to 5 do
52161: LD_ADDR_VAR 0 10
52165: PUSH
52166: DOUBLE
52167: LD_INT 1
52169: DEC
52170: ST_TO_ADDR
52171: LD_INT 5
52173: PUSH
52174: FOR_TO
52175: IFFALSE 52332
// begin _x := ShiftX ( x , d , r + i ) ;
52177: LD_ADDR_VAR 0 5
52181: PUSH
52182: LD_VAR 0 4
52186: PPUSH
52187: LD_VAR 0 8
52191: PPUSH
52192: LD_VAR 0 9
52196: PUSH
52197: LD_VAR 0 10
52201: PLUS
52202: PPUSH
52203: CALL_OW 272
52207: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
52208: LD_ADDR_VAR 0 7
52212: PUSH
52213: LD_VAR 0 6
52217: PPUSH
52218: LD_VAR 0 8
52222: PPUSH
52223: LD_VAR 0 9
52227: PUSH
52228: LD_VAR 0 10
52232: PLUS
52233: PPUSH
52234: CALL_OW 273
52238: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
52239: LD_VAR 0 5
52243: PPUSH
52244: LD_VAR 0 7
52248: PPUSH
52249: CALL_OW 488
52253: PUSH
52254: LD_VAR 0 5
52258: PPUSH
52259: LD_VAR 0 7
52263: PPUSH
52264: CALL_OW 428
52268: PPUSH
52269: CALL_OW 247
52273: PUSH
52274: LD_INT 3
52276: PUSH
52277: LD_INT 2
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: IN
52284: NOT
52285: AND
52286: IFFALSE 52330
// begin ComMoveXY ( unit , _x , _y ) ;
52288: LD_VAR 0 1
52292: PPUSH
52293: LD_VAR 0 5
52297: PPUSH
52298: LD_VAR 0 7
52302: PPUSH
52303: CALL_OW 111
// result := [ _x , _y ] ;
52307: LD_ADDR_VAR 0 3
52311: PUSH
52312: LD_VAR 0 5
52316: PUSH
52317: LD_VAR 0 7
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: ST_TO_ADDR
// exit ;
52326: POP
52327: POP
52328: GO 52334
// end ; end ;
52330: GO 52174
52332: POP
52333: POP
// end ;
52334: LD_VAR 0 3
52338: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
52339: LD_INT 0
52341: PPUSH
52342: PPUSH
52343: PPUSH
// result := 0 ;
52344: LD_ADDR_VAR 0 3
52348: PUSH
52349: LD_INT 0
52351: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
52352: LD_VAR 0 1
52356: PUSH
52357: LD_INT 0
52359: LESS
52360: PUSH
52361: LD_VAR 0 1
52365: PUSH
52366: LD_INT 8
52368: GREATER
52369: OR
52370: PUSH
52371: LD_VAR 0 2
52375: PUSH
52376: LD_INT 0
52378: LESS
52379: OR
52380: PUSH
52381: LD_VAR 0 2
52385: PUSH
52386: LD_INT 8
52388: GREATER
52389: OR
52390: IFFALSE 52394
// exit ;
52392: GO 52469
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
52394: LD_ADDR_VAR 0 4
52398: PUSH
52399: LD_INT 22
52401: PUSH
52402: LD_VAR 0 2
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PPUSH
52411: CALL_OW 69
52415: PUSH
52416: FOR_IN
52417: IFFALSE 52467
// begin un := UnitShoot ( i ) ;
52419: LD_ADDR_VAR 0 5
52423: PUSH
52424: LD_VAR 0 4
52428: PPUSH
52429: CALL_OW 504
52433: ST_TO_ADDR
// if GetSide ( un ) = side1 then
52434: LD_VAR 0 5
52438: PPUSH
52439: CALL_OW 255
52443: PUSH
52444: LD_VAR 0 1
52448: EQUAL
52449: IFFALSE 52465
// begin result := un ;
52451: LD_ADDR_VAR 0 3
52455: PUSH
52456: LD_VAR 0 5
52460: ST_TO_ADDR
// exit ;
52461: POP
52462: POP
52463: GO 52469
// end ; end ;
52465: GO 52416
52467: POP
52468: POP
// end ;
52469: LD_VAR 0 3
52473: RET
// export function GetCargoBay ( units ) ; begin
52474: LD_INT 0
52476: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
52477: LD_ADDR_VAR 0 2
52481: PUSH
52482: LD_VAR 0 1
52486: PPUSH
52487: LD_INT 2
52489: PUSH
52490: LD_INT 34
52492: PUSH
52493: LD_INT 12
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 34
52502: PUSH
52503: LD_INT 51
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 34
52512: PUSH
52513: LD_INT 32
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 34
52522: PUSH
52523: LD_EXP 100
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: PPUSH
52539: CALL_OW 72
52543: ST_TO_ADDR
// end ;
52544: LD_VAR 0 2
52548: RET
// export function Negate ( value ) ; begin
52549: LD_INT 0
52551: PPUSH
// result := not value ;
52552: LD_ADDR_VAR 0 2
52556: PUSH
52557: LD_VAR 0 1
52561: NOT
52562: ST_TO_ADDR
// end ;
52563: LD_VAR 0 2
52567: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
52568: LD_INT 0
52570: PPUSH
// if x1 = x2 then
52571: LD_VAR 0 1
52575: PUSH
52576: LD_VAR 0 3
52580: EQUAL
52581: IFFALSE 52615
// begin if y1 > y2 then
52583: LD_VAR 0 2
52587: PUSH
52588: LD_VAR 0 4
52592: GREATER
52593: IFFALSE 52605
// result := 0 else
52595: LD_ADDR_VAR 0 5
52599: PUSH
52600: LD_INT 0
52602: ST_TO_ADDR
52603: GO 52613
// result := 3 ;
52605: LD_ADDR_VAR 0 5
52609: PUSH
52610: LD_INT 3
52612: ST_TO_ADDR
// exit ;
52613: GO 52701
// end ; if y1 = y2 then
52615: LD_VAR 0 2
52619: PUSH
52620: LD_VAR 0 4
52624: EQUAL
52625: IFFALSE 52659
// begin if x1 > x2 then
52627: LD_VAR 0 1
52631: PUSH
52632: LD_VAR 0 3
52636: GREATER
52637: IFFALSE 52649
// result := 1 else
52639: LD_ADDR_VAR 0 5
52643: PUSH
52644: LD_INT 1
52646: ST_TO_ADDR
52647: GO 52657
// result := 4 ;
52649: LD_ADDR_VAR 0 5
52653: PUSH
52654: LD_INT 4
52656: ST_TO_ADDR
// exit ;
52657: GO 52701
// end ; if x1 > x2 and y1 > y2 then
52659: LD_VAR 0 1
52663: PUSH
52664: LD_VAR 0 3
52668: GREATER
52669: PUSH
52670: LD_VAR 0 2
52674: PUSH
52675: LD_VAR 0 4
52679: GREATER
52680: AND
52681: IFFALSE 52693
// result := 2 else
52683: LD_ADDR_VAR 0 5
52687: PUSH
52688: LD_INT 2
52690: ST_TO_ADDR
52691: GO 52701
// result := 5 ;
52693: LD_ADDR_VAR 0 5
52697: PUSH
52698: LD_INT 5
52700: ST_TO_ADDR
// end ;
52701: LD_VAR 0 5
52705: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
52706: LD_INT 0
52708: PPUSH
52709: PPUSH
// if not driver or not IsInUnit ( driver ) then
52710: LD_VAR 0 1
52714: NOT
52715: PUSH
52716: LD_VAR 0 1
52720: PPUSH
52721: CALL_OW 310
52725: NOT
52726: OR
52727: IFFALSE 52731
// exit ;
52729: GO 52821
// vehicle := IsInUnit ( driver ) ;
52731: LD_ADDR_VAR 0 3
52735: PUSH
52736: LD_VAR 0 1
52740: PPUSH
52741: CALL_OW 310
52745: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
52746: LD_VAR 0 1
52750: PPUSH
52751: LD_STRING \
52753: PUSH
52754: LD_INT 0
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: LD_INT 0
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: PUSH
52781: LD_STRING E
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: LD_VAR 0 3
52794: PUSH
52795: LD_INT 0
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PPUSH
52817: CALL_OW 446
// end ;
52821: LD_VAR 0 2
52825: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
52826: LD_INT 0
52828: PPUSH
52829: PPUSH
// if not driver or not IsInUnit ( driver ) then
52830: LD_VAR 0 1
52834: NOT
52835: PUSH
52836: LD_VAR 0 1
52840: PPUSH
52841: CALL_OW 310
52845: NOT
52846: OR
52847: IFFALSE 52851
// exit ;
52849: GO 52941
// vehicle := IsInUnit ( driver ) ;
52851: LD_ADDR_VAR 0 3
52855: PUSH
52856: LD_VAR 0 1
52860: PPUSH
52861: CALL_OW 310
52865: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
52866: LD_VAR 0 1
52870: PPUSH
52871: LD_STRING \
52873: PUSH
52874: LD_INT 0
52876: PUSH
52877: LD_INT 0
52879: PUSH
52880: LD_INT 0
52882: PUSH
52883: LD_INT 0
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: PUSH
52901: LD_STRING E
52903: PUSH
52904: LD_INT 0
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: LD_VAR 0 3
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: LD_INT 0
52920: PUSH
52921: LD_INT 0
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PPUSH
52937: CALL_OW 447
// end ;
52941: LD_VAR 0 2
52945: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
52946: LD_INT 0
52948: PPUSH
52949: PPUSH
52950: PPUSH
// tmp := [ ] ;
52951: LD_ADDR_VAR 0 5
52955: PUSH
52956: EMPTY
52957: ST_TO_ADDR
// for i in units do
52958: LD_ADDR_VAR 0 4
52962: PUSH
52963: LD_VAR 0 1
52967: PUSH
52968: FOR_IN
52969: IFFALSE 53007
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
52971: LD_ADDR_VAR 0 5
52975: PUSH
52976: LD_VAR 0 5
52980: PPUSH
52981: LD_VAR 0 5
52985: PUSH
52986: LD_INT 1
52988: PLUS
52989: PPUSH
52990: LD_VAR 0 4
52994: PPUSH
52995: CALL_OW 256
52999: PPUSH
53000: CALL_OW 2
53004: ST_TO_ADDR
53005: GO 52968
53007: POP
53008: POP
// if not tmp then
53009: LD_VAR 0 5
53013: NOT
53014: IFFALSE 53018
// exit ;
53016: GO 53066
// if asc then
53018: LD_VAR 0 2
53022: IFFALSE 53046
// result := SortListByListAsc ( units , tmp ) else
53024: LD_ADDR_VAR 0 3
53028: PUSH
53029: LD_VAR 0 1
53033: PPUSH
53034: LD_VAR 0 5
53038: PPUSH
53039: CALL_OW 76
53043: ST_TO_ADDR
53044: GO 53066
// result := SortListByListDesc ( units , tmp ) ;
53046: LD_ADDR_VAR 0 3
53050: PUSH
53051: LD_VAR 0 1
53055: PPUSH
53056: LD_VAR 0 5
53060: PPUSH
53061: CALL_OW 77
53065: ST_TO_ADDR
// end ;
53066: LD_VAR 0 3
53070: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
53071: LD_INT 0
53073: PPUSH
53074: PPUSH
// task := GetTaskList ( mech ) ;
53075: LD_ADDR_VAR 0 4
53079: PUSH
53080: LD_VAR 0 1
53084: PPUSH
53085: CALL_OW 437
53089: ST_TO_ADDR
// if not task then
53090: LD_VAR 0 4
53094: NOT
53095: IFFALSE 53099
// exit ;
53097: GO 53141
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
53099: LD_ADDR_VAR 0 3
53103: PUSH
53104: LD_VAR 0 4
53108: PUSH
53109: LD_INT 1
53111: ARRAY
53112: PUSH
53113: LD_INT 1
53115: ARRAY
53116: PUSH
53117: LD_STRING r
53119: EQUAL
53120: PUSH
53121: LD_VAR 0 4
53125: PUSH
53126: LD_INT 1
53128: ARRAY
53129: PUSH
53130: LD_INT 4
53132: ARRAY
53133: PUSH
53134: LD_VAR 0 2
53138: EQUAL
53139: AND
53140: ST_TO_ADDR
// end ;
53141: LD_VAR 0 3
53145: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
53146: LD_INT 0
53148: PPUSH
// SetDir ( unit , d ) ;
53149: LD_VAR 0 1
53153: PPUSH
53154: LD_VAR 0 4
53158: PPUSH
53159: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
53163: LD_VAR 0 1
53167: PPUSH
53168: LD_VAR 0 2
53172: PPUSH
53173: LD_VAR 0 3
53177: PPUSH
53178: LD_VAR 0 5
53182: PPUSH
53183: CALL_OW 48
// end ;
53187: LD_VAR 0 6
53191: RET
// export function ToNaturalNumber ( number ) ; begin
53192: LD_INT 0
53194: PPUSH
// result := number div 1 ;
53195: LD_ADDR_VAR 0 2
53199: PUSH
53200: LD_VAR 0 1
53204: PUSH
53205: LD_INT 1
53207: DIV
53208: ST_TO_ADDR
// if number < 0 then
53209: LD_VAR 0 1
53213: PUSH
53214: LD_INT 0
53216: LESS
53217: IFFALSE 53227
// result := 0 ;
53219: LD_ADDR_VAR 0 2
53223: PUSH
53224: LD_INT 0
53226: ST_TO_ADDR
// end ;
53227: LD_VAR 0 2
53231: RET
// export function SortByClass ( units , class ) ; var un ; begin
53232: LD_INT 0
53234: PPUSH
53235: PPUSH
// if not units or not class then
53236: LD_VAR 0 1
53240: NOT
53241: PUSH
53242: LD_VAR 0 2
53246: NOT
53247: OR
53248: IFFALSE 53252
// exit ;
53250: GO 53347
// result := [ ] ;
53252: LD_ADDR_VAR 0 3
53256: PUSH
53257: EMPTY
53258: ST_TO_ADDR
// for un in units do
53259: LD_ADDR_VAR 0 4
53263: PUSH
53264: LD_VAR 0 1
53268: PUSH
53269: FOR_IN
53270: IFFALSE 53345
// if GetClass ( un ) = class then
53272: LD_VAR 0 4
53276: PPUSH
53277: CALL_OW 257
53281: PUSH
53282: LD_VAR 0 2
53286: EQUAL
53287: IFFALSE 53314
// result := Insert ( result , 1 , un ) else
53289: LD_ADDR_VAR 0 3
53293: PUSH
53294: LD_VAR 0 3
53298: PPUSH
53299: LD_INT 1
53301: PPUSH
53302: LD_VAR 0 4
53306: PPUSH
53307: CALL_OW 2
53311: ST_TO_ADDR
53312: GO 53343
// result := Replace ( result , result + 1 , un ) ;
53314: LD_ADDR_VAR 0 3
53318: PUSH
53319: LD_VAR 0 3
53323: PPUSH
53324: LD_VAR 0 3
53328: PUSH
53329: LD_INT 1
53331: PLUS
53332: PPUSH
53333: LD_VAR 0 4
53337: PPUSH
53338: CALL_OW 1
53342: ST_TO_ADDR
53343: GO 53269
53345: POP
53346: POP
// end ;
53347: LD_VAR 0 3
53351: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
53352: LD_INT 0
53354: PPUSH
53355: PPUSH
53356: PPUSH
53357: PPUSH
53358: PPUSH
53359: PPUSH
53360: PPUSH
// result := [ ] ;
53361: LD_ADDR_VAR 0 4
53365: PUSH
53366: EMPTY
53367: ST_TO_ADDR
// if x - r < 0 then
53368: LD_VAR 0 1
53372: PUSH
53373: LD_VAR 0 3
53377: MINUS
53378: PUSH
53379: LD_INT 0
53381: LESS
53382: IFFALSE 53394
// min_x := 0 else
53384: LD_ADDR_VAR 0 8
53388: PUSH
53389: LD_INT 0
53391: ST_TO_ADDR
53392: GO 53410
// min_x := x - r ;
53394: LD_ADDR_VAR 0 8
53398: PUSH
53399: LD_VAR 0 1
53403: PUSH
53404: LD_VAR 0 3
53408: MINUS
53409: ST_TO_ADDR
// if y - r < 0 then
53410: LD_VAR 0 2
53414: PUSH
53415: LD_VAR 0 3
53419: MINUS
53420: PUSH
53421: LD_INT 0
53423: LESS
53424: IFFALSE 53436
// min_y := 0 else
53426: LD_ADDR_VAR 0 7
53430: PUSH
53431: LD_INT 0
53433: ST_TO_ADDR
53434: GO 53452
// min_y := y - r ;
53436: LD_ADDR_VAR 0 7
53440: PUSH
53441: LD_VAR 0 2
53445: PUSH
53446: LD_VAR 0 3
53450: MINUS
53451: ST_TO_ADDR
// max_x := x + r ;
53452: LD_ADDR_VAR 0 9
53456: PUSH
53457: LD_VAR 0 1
53461: PUSH
53462: LD_VAR 0 3
53466: PLUS
53467: ST_TO_ADDR
// max_y := y + r ;
53468: LD_ADDR_VAR 0 10
53472: PUSH
53473: LD_VAR 0 2
53477: PUSH
53478: LD_VAR 0 3
53482: PLUS
53483: ST_TO_ADDR
// for _x = min_x to max_x do
53484: LD_ADDR_VAR 0 5
53488: PUSH
53489: DOUBLE
53490: LD_VAR 0 8
53494: DEC
53495: ST_TO_ADDR
53496: LD_VAR 0 9
53500: PUSH
53501: FOR_TO
53502: IFFALSE 53603
// for _y = min_y to max_y do
53504: LD_ADDR_VAR 0 6
53508: PUSH
53509: DOUBLE
53510: LD_VAR 0 7
53514: DEC
53515: ST_TO_ADDR
53516: LD_VAR 0 10
53520: PUSH
53521: FOR_TO
53522: IFFALSE 53599
// begin if not ValidHex ( _x , _y ) then
53524: LD_VAR 0 5
53528: PPUSH
53529: LD_VAR 0 6
53533: PPUSH
53534: CALL_OW 488
53538: NOT
53539: IFFALSE 53543
// continue ;
53541: GO 53521
// if GetResourceTypeXY ( _x , _y ) then
53543: LD_VAR 0 5
53547: PPUSH
53548: LD_VAR 0 6
53552: PPUSH
53553: CALL_OW 283
53557: IFFALSE 53597
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
53559: LD_ADDR_VAR 0 4
53563: PUSH
53564: LD_VAR 0 4
53568: PPUSH
53569: LD_VAR 0 4
53573: PUSH
53574: LD_INT 1
53576: PLUS
53577: PPUSH
53578: LD_VAR 0 5
53582: PUSH
53583: LD_VAR 0 6
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PPUSH
53592: CALL_OW 1
53596: ST_TO_ADDR
// end ;
53597: GO 53521
53599: POP
53600: POP
53601: GO 53501
53603: POP
53604: POP
// end ;
53605: LD_VAR 0 4
53609: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
53610: LD_INT 0
53612: PPUSH
53613: PPUSH
53614: PPUSH
53615: PPUSH
53616: PPUSH
53617: PPUSH
// if not units then
53618: LD_VAR 0 1
53622: NOT
53623: IFFALSE 53627
// exit ;
53625: GO 54009
// side := GetSide ( units [ 1 ] ) ;
53627: LD_ADDR_VAR 0 7
53631: PUSH
53632: LD_VAR 0 1
53636: PUSH
53637: LD_INT 1
53639: ARRAY
53640: PPUSH
53641: CALL_OW 255
53645: ST_TO_ADDR
// for i in units do
53646: LD_ADDR_VAR 0 4
53650: PUSH
53651: LD_VAR 0 1
53655: PUSH
53656: FOR_IN
53657: IFFALSE 54007
// begin if IsOk ( i ) then
53659: LD_VAR 0 4
53663: PPUSH
53664: CALL_OW 302
53668: IFFALSE 54005
// begin tag := GetTag ( i ) + 1 ;
53670: LD_ADDR_VAR 0 8
53674: PUSH
53675: LD_VAR 0 4
53679: PPUSH
53680: CALL_OW 110
53684: PUSH
53685: LD_INT 1
53687: PLUS
53688: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
53689: LD_ADDR_VAR 0 6
53693: PUSH
53694: LD_VAR 0 4
53698: PPUSH
53699: CALL_OW 250
53703: PPUSH
53704: LD_VAR 0 4
53708: PPUSH
53709: CALL_OW 251
53713: PPUSH
53714: LD_INT 6
53716: PPUSH
53717: CALL 53352 0 3
53721: ST_TO_ADDR
// if cr then
53722: LD_VAR 0 6
53726: IFFALSE 53765
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
53728: LD_VAR 0 4
53732: PPUSH
53733: LD_VAR 0 6
53737: PUSH
53738: LD_INT 1
53740: ARRAY
53741: PUSH
53742: LD_INT 1
53744: ARRAY
53745: PPUSH
53746: LD_VAR 0 6
53750: PUSH
53751: LD_INT 1
53753: ARRAY
53754: PUSH
53755: LD_INT 2
53757: ARRAY
53758: PPUSH
53759: CALL_OW 116
53763: GO 54005
// if path > tag then
53765: LD_VAR 0 2
53769: PUSH
53770: LD_VAR 0 8
53774: GREATER
53775: IFFALSE 53953
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
53777: LD_ADDR_VAR 0 5
53781: PUSH
53782: LD_INT 81
53784: PUSH
53785: LD_VAR 0 7
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 91
53796: PUSH
53797: LD_VAR 0 4
53801: PUSH
53802: LD_INT 12
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: LIST
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PPUSH
53814: CALL_OW 69
53818: ST_TO_ADDR
// if enemy then
53819: LD_VAR 0 5
53823: IFFALSE 53851
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
53825: LD_VAR 0 4
53829: PPUSH
53830: LD_VAR 0 5
53834: PPUSH
53835: LD_VAR 0 4
53839: PPUSH
53840: CALL_OW 74
53844: PPUSH
53845: CALL_OW 115
53849: GO 53951
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
53851: LD_VAR 0 4
53855: PPUSH
53856: LD_VAR 0 2
53860: PUSH
53861: LD_VAR 0 8
53865: ARRAY
53866: PUSH
53867: LD_INT 1
53869: ARRAY
53870: PPUSH
53871: LD_VAR 0 2
53875: PUSH
53876: LD_VAR 0 8
53880: ARRAY
53881: PUSH
53882: LD_INT 2
53884: ARRAY
53885: PPUSH
53886: CALL_OW 297
53890: PUSH
53891: LD_INT 6
53893: GREATER
53894: IFFALSE 53937
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
53896: LD_VAR 0 4
53900: PPUSH
53901: LD_VAR 0 2
53905: PUSH
53906: LD_VAR 0 8
53910: ARRAY
53911: PUSH
53912: LD_INT 1
53914: ARRAY
53915: PPUSH
53916: LD_VAR 0 2
53920: PUSH
53921: LD_VAR 0 8
53925: ARRAY
53926: PUSH
53927: LD_INT 2
53929: ARRAY
53930: PPUSH
53931: CALL_OW 114
53935: GO 53951
// SetTag ( i , tag ) ;
53937: LD_VAR 0 4
53941: PPUSH
53942: LD_VAR 0 8
53946: PPUSH
53947: CALL_OW 109
// end else
53951: GO 54005
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
53953: LD_ADDR_VAR 0 5
53957: PUSH
53958: LD_INT 81
53960: PUSH
53961: LD_VAR 0 7
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PPUSH
53970: CALL_OW 69
53974: ST_TO_ADDR
// if enemy then
53975: LD_VAR 0 5
53979: IFFALSE 54005
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
53981: LD_VAR 0 4
53985: PPUSH
53986: LD_VAR 0 5
53990: PPUSH
53991: LD_VAR 0 4
53995: PPUSH
53996: CALL_OW 74
54000: PPUSH
54001: CALL_OW 115
// end ; end ; end ;
54005: GO 53656
54007: POP
54008: POP
// end ; end_of_file
54009: LD_VAR 0 3
54013: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
54014: LD_VAR 0 1
54018: PUSH
54019: LD_INT 200
54021: DOUBLE
54022: GREATEREQUAL
54023: IFFALSE 54031
54025: LD_INT 299
54027: DOUBLE
54028: LESSEQUAL
54029: IFTRUE 54033
54031: GO 54065
54033: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
54034: LD_VAR 0 1
54038: PPUSH
54039: LD_VAR 0 2
54043: PPUSH
54044: LD_VAR 0 3
54048: PPUSH
54049: LD_VAR 0 4
54053: PPUSH
54054: LD_VAR 0 5
54058: PPUSH
54059: CALL 54309 0 5
54063: GO 54142
54065: LD_INT 300
54067: DOUBLE
54068: GREATEREQUAL
54069: IFFALSE 54077
54071: LD_INT 399
54073: DOUBLE
54074: LESSEQUAL
54075: IFTRUE 54079
54077: GO 54141
54079: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
54080: LD_VAR 0 1
54084: PPUSH
54085: LD_VAR 0 2
54089: PPUSH
54090: LD_VAR 0 3
54094: PPUSH
54095: LD_VAR 0 4
54099: PPUSH
54100: LD_VAR 0 5
54104: PPUSH
54105: LD_VAR 0 6
54109: PPUSH
54110: LD_VAR 0 7
54114: PPUSH
54115: LD_VAR 0 8
54119: PPUSH
54120: LD_VAR 0 9
54124: PPUSH
54125: LD_VAR 0 10
54129: PPUSH
54130: LD_VAR 0 11
54134: PPUSH
54135: CALL 69384 0 11
54139: GO 54142
54141: POP
// end ;
54142: PPOPN 11
54144: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
54145: LD_VAR 0 1
54149: PPUSH
54150: LD_VAR 0 2
54154: PPUSH
54155: LD_VAR 0 3
54159: PPUSH
54160: LD_VAR 0 4
54164: PPUSH
54165: LD_VAR 0 5
54169: PPUSH
54170: CALL 54291 0 5
// end ; end_of_file
54174: PPOPN 5
54176: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
54177: LD_INT 0
54179: PPUSH
54180: PPUSH
54181: PPUSH
54182: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
54183: LD_VAR 0 1
54187: PPUSH
54188: CALL_OW 264
54192: PUSH
54193: LD_EXP 103
54197: EQUAL
54198: IFFALSE 54270
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
54200: LD_INT 68
54202: PPUSH
54203: LD_VAR 0 1
54207: PPUSH
54208: CALL_OW 255
54212: PPUSH
54213: CALL_OW 321
54217: PUSH
54218: LD_INT 2
54220: EQUAL
54221: IFFALSE 54233
// eff := 70 else
54223: LD_ADDR_VAR 0 4
54227: PUSH
54228: LD_INT 70
54230: ST_TO_ADDR
54231: GO 54241
// eff := 30 ;
54233: LD_ADDR_VAR 0 4
54237: PUSH
54238: LD_INT 30
54240: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
54241: LD_VAR 0 1
54245: PPUSH
54246: CALL_OW 250
54250: PPUSH
54251: LD_VAR 0 1
54255: PPUSH
54256: CALL_OW 251
54260: PPUSH
54261: LD_VAR 0 4
54265: PPUSH
54266: CALL_OW 495
// end ; end ;
54270: LD_VAR 0 2
54274: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
54275: LD_INT 0
54277: PPUSH
// end ;
54278: LD_VAR 0 4
54282: RET
// export function SOS_Command ( cmd ) ; begin
54283: LD_INT 0
54285: PPUSH
// end ;
54286: LD_VAR 0 2
54290: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
54291: LD_INT 0
54293: PPUSH
// if cmd = 121 then
54294: LD_VAR 0 1
54298: PUSH
54299: LD_INT 121
54301: EQUAL
54302: IFFALSE 54304
// end ;
54304: LD_VAR 0 6
54308: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54309: LD_INT 0
54311: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54312: LD_VAR 0 1
54316: PUSH
54317: LD_INT 250
54319: EQUAL
54320: PUSH
54321: LD_VAR 0 2
54325: PPUSH
54326: CALL_OW 264
54330: PUSH
54331: LD_EXP 106
54335: EQUAL
54336: AND
54337: IFFALSE 54358
// MinerPlaceMine ( unit , x , y ) ;
54339: LD_VAR 0 2
54343: PPUSH
54344: LD_VAR 0 4
54348: PPUSH
54349: LD_VAR 0 5
54353: PPUSH
54354: CALL 56707 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54358: LD_VAR 0 1
54362: PUSH
54363: LD_INT 251
54365: EQUAL
54366: PUSH
54367: LD_VAR 0 2
54371: PPUSH
54372: CALL_OW 264
54376: PUSH
54377: LD_EXP 106
54381: EQUAL
54382: AND
54383: IFFALSE 54404
// MinerDetonateMine ( unit , x , y ) ;
54385: LD_VAR 0 2
54389: PPUSH
54390: LD_VAR 0 4
54394: PPUSH
54395: LD_VAR 0 5
54399: PPUSH
54400: CALL 56984 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
54404: LD_VAR 0 1
54408: PUSH
54409: LD_INT 252
54411: EQUAL
54412: PUSH
54413: LD_VAR 0 2
54417: PPUSH
54418: CALL_OW 264
54422: PUSH
54423: LD_EXP 106
54427: EQUAL
54428: AND
54429: IFFALSE 54450
// MinerCreateMinefield ( unit , x , y ) ;
54431: LD_VAR 0 2
54435: PPUSH
54436: LD_VAR 0 4
54440: PPUSH
54441: LD_VAR 0 5
54445: PPUSH
54446: CALL 57401 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
54450: LD_VAR 0 1
54454: PUSH
54455: LD_INT 253
54457: EQUAL
54458: PUSH
54459: LD_VAR 0 2
54463: PPUSH
54464: CALL_OW 257
54468: PUSH
54469: LD_INT 5
54471: EQUAL
54472: AND
54473: IFFALSE 54494
// ComBinocular ( unit , x , y ) ;
54475: LD_VAR 0 2
54479: PPUSH
54480: LD_VAR 0 4
54484: PPUSH
54485: LD_VAR 0 5
54489: PPUSH
54490: CALL 57772 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
54494: LD_VAR 0 1
54498: PUSH
54499: LD_INT 254
54501: EQUAL
54502: PUSH
54503: LD_VAR 0 2
54507: PPUSH
54508: CALL_OW 264
54512: PUSH
54513: LD_EXP 101
54517: EQUAL
54518: AND
54519: PUSH
54520: LD_VAR 0 3
54524: PPUSH
54525: CALL_OW 263
54529: PUSH
54530: LD_INT 3
54532: EQUAL
54533: AND
54534: IFFALSE 54550
// HackDestroyVehicle ( unit , selectedUnit ) ;
54536: LD_VAR 0 2
54540: PPUSH
54541: LD_VAR 0 3
54545: PPUSH
54546: CALL 56067 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
54550: LD_VAR 0 1
54554: PUSH
54555: LD_INT 255
54557: EQUAL
54558: PUSH
54559: LD_VAR 0 2
54563: PPUSH
54564: CALL_OW 264
54568: PUSH
54569: LD_INT 14
54571: PUSH
54572: LD_INT 53
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: IN
54579: AND
54580: PUSH
54581: LD_VAR 0 4
54585: PPUSH
54586: LD_VAR 0 5
54590: PPUSH
54591: CALL_OW 488
54595: AND
54596: IFFALSE 54620
// CutTreeXYR ( unit , x , y , 12 ) ;
54598: LD_VAR 0 2
54602: PPUSH
54603: LD_VAR 0 4
54607: PPUSH
54608: LD_VAR 0 5
54612: PPUSH
54613: LD_INT 12
54615: PPUSH
54616: CALL 54633 0 4
// end ;
54620: LD_VAR 0 6
54624: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
54625: LD_INT 0
54627: PPUSH
// end ;
54628: LD_VAR 0 4
54632: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
54633: LD_INT 0
54635: PPUSH
54636: PPUSH
54637: PPUSH
54638: PPUSH
54639: PPUSH
54640: PPUSH
54641: PPUSH
54642: PPUSH
54643: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
54644: LD_VAR 0 1
54648: NOT
54649: PUSH
54650: LD_VAR 0 2
54654: PPUSH
54655: LD_VAR 0 3
54659: PPUSH
54660: CALL_OW 488
54664: NOT
54665: OR
54666: PUSH
54667: LD_VAR 0 4
54671: NOT
54672: OR
54673: IFFALSE 54677
// exit ;
54675: GO 55017
// list := [ ] ;
54677: LD_ADDR_VAR 0 13
54681: PUSH
54682: EMPTY
54683: ST_TO_ADDR
// if x - r < 0 then
54684: LD_VAR 0 2
54688: PUSH
54689: LD_VAR 0 4
54693: MINUS
54694: PUSH
54695: LD_INT 0
54697: LESS
54698: IFFALSE 54710
// min_x := 0 else
54700: LD_ADDR_VAR 0 7
54704: PUSH
54705: LD_INT 0
54707: ST_TO_ADDR
54708: GO 54726
// min_x := x - r ;
54710: LD_ADDR_VAR 0 7
54714: PUSH
54715: LD_VAR 0 2
54719: PUSH
54720: LD_VAR 0 4
54724: MINUS
54725: ST_TO_ADDR
// if y - r < 0 then
54726: LD_VAR 0 3
54730: PUSH
54731: LD_VAR 0 4
54735: MINUS
54736: PUSH
54737: LD_INT 0
54739: LESS
54740: IFFALSE 54752
// min_y := 0 else
54742: LD_ADDR_VAR 0 8
54746: PUSH
54747: LD_INT 0
54749: ST_TO_ADDR
54750: GO 54768
// min_y := y - r ;
54752: LD_ADDR_VAR 0 8
54756: PUSH
54757: LD_VAR 0 3
54761: PUSH
54762: LD_VAR 0 4
54766: MINUS
54767: ST_TO_ADDR
// max_x := x + r ;
54768: LD_ADDR_VAR 0 9
54772: PUSH
54773: LD_VAR 0 2
54777: PUSH
54778: LD_VAR 0 4
54782: PLUS
54783: ST_TO_ADDR
// max_y := y + r ;
54784: LD_ADDR_VAR 0 10
54788: PUSH
54789: LD_VAR 0 3
54793: PUSH
54794: LD_VAR 0 4
54798: PLUS
54799: ST_TO_ADDR
// for _x = min_x to max_x do
54800: LD_ADDR_VAR 0 11
54804: PUSH
54805: DOUBLE
54806: LD_VAR 0 7
54810: DEC
54811: ST_TO_ADDR
54812: LD_VAR 0 9
54816: PUSH
54817: FOR_TO
54818: IFFALSE 54935
// for _y = min_y to max_y do
54820: LD_ADDR_VAR 0 12
54824: PUSH
54825: DOUBLE
54826: LD_VAR 0 8
54830: DEC
54831: ST_TO_ADDR
54832: LD_VAR 0 10
54836: PUSH
54837: FOR_TO
54838: IFFALSE 54931
// begin if not ValidHex ( _x , _y ) then
54840: LD_VAR 0 11
54844: PPUSH
54845: LD_VAR 0 12
54849: PPUSH
54850: CALL_OW 488
54854: NOT
54855: IFFALSE 54859
// continue ;
54857: GO 54837
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
54859: LD_VAR 0 11
54863: PPUSH
54864: LD_VAR 0 12
54868: PPUSH
54869: CALL_OW 351
54873: PUSH
54874: LD_VAR 0 11
54878: PPUSH
54879: LD_VAR 0 12
54883: PPUSH
54884: CALL_OW 554
54888: AND
54889: IFFALSE 54929
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
54891: LD_ADDR_VAR 0 13
54895: PUSH
54896: LD_VAR 0 13
54900: PPUSH
54901: LD_VAR 0 13
54905: PUSH
54906: LD_INT 1
54908: PLUS
54909: PPUSH
54910: LD_VAR 0 11
54914: PUSH
54915: LD_VAR 0 12
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PPUSH
54924: CALL_OW 2
54928: ST_TO_ADDR
// end ;
54929: GO 54837
54931: POP
54932: POP
54933: GO 54817
54935: POP
54936: POP
// if not list then
54937: LD_VAR 0 13
54941: NOT
54942: IFFALSE 54946
// exit ;
54944: GO 55017
// for i in list do
54946: LD_ADDR_VAR 0 6
54950: PUSH
54951: LD_VAR 0 13
54955: PUSH
54956: FOR_IN
54957: IFFALSE 55015
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
54959: LD_VAR 0 1
54963: PPUSH
54964: LD_STRING M
54966: PUSH
54967: LD_VAR 0 6
54971: PUSH
54972: LD_INT 1
54974: ARRAY
54975: PUSH
54976: LD_VAR 0 6
54980: PUSH
54981: LD_INT 2
54983: ARRAY
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: PUSH
55006: EMPTY
55007: LIST
55008: PPUSH
55009: CALL_OW 447
55013: GO 54956
55015: POP
55016: POP
// end ;
55017: LD_VAR 0 5
55021: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
55022: LD_EXP 34
55026: NOT
55027: IFFALSE 55077
55029: GO 55031
55031: DISABLE
// begin initHack := true ;
55032: LD_ADDR_EXP 34
55036: PUSH
55037: LD_INT 1
55039: ST_TO_ADDR
// hackTanks := [ ] ;
55040: LD_ADDR_EXP 35
55044: PUSH
55045: EMPTY
55046: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
55047: LD_ADDR_EXP 36
55051: PUSH
55052: EMPTY
55053: ST_TO_ADDR
// hackLimit := 3 ;
55054: LD_ADDR_EXP 37
55058: PUSH
55059: LD_INT 3
55061: ST_TO_ADDR
// hackDist := 12 ;
55062: LD_ADDR_EXP 38
55066: PUSH
55067: LD_INT 12
55069: ST_TO_ADDR
// hackCounter := [ ] ;
55070: LD_ADDR_EXP 39
55074: PUSH
55075: EMPTY
55076: ST_TO_ADDR
// end ;
55077: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
55078: LD_EXP 34
55082: PUSH
55083: LD_INT 34
55085: PUSH
55086: LD_EXP 101
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PPUSH
55095: CALL_OW 69
55099: AND
55100: IFFALSE 55355
55102: GO 55104
55104: DISABLE
55105: LD_INT 0
55107: PPUSH
55108: PPUSH
// begin enable ;
55109: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
55110: LD_ADDR_VAR 0 1
55114: PUSH
55115: LD_INT 34
55117: PUSH
55118: LD_EXP 101
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PPUSH
55127: CALL_OW 69
55131: PUSH
55132: FOR_IN
55133: IFFALSE 55353
// begin if not i in hackTanks then
55135: LD_VAR 0 1
55139: PUSH
55140: LD_EXP 35
55144: IN
55145: NOT
55146: IFFALSE 55229
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
55148: LD_ADDR_EXP 35
55152: PUSH
55153: LD_EXP 35
55157: PPUSH
55158: LD_EXP 35
55162: PUSH
55163: LD_INT 1
55165: PLUS
55166: PPUSH
55167: LD_VAR 0 1
55171: PPUSH
55172: CALL_OW 1
55176: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
55177: LD_ADDR_EXP 36
55181: PUSH
55182: LD_EXP 36
55186: PPUSH
55187: LD_EXP 36
55191: PUSH
55192: LD_INT 1
55194: PLUS
55195: PPUSH
55196: EMPTY
55197: PPUSH
55198: CALL_OW 1
55202: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
55203: LD_ADDR_EXP 39
55207: PUSH
55208: LD_EXP 39
55212: PPUSH
55213: LD_EXP 39
55217: PUSH
55218: LD_INT 1
55220: PLUS
55221: PPUSH
55222: EMPTY
55223: PPUSH
55224: CALL_OW 1
55228: ST_TO_ADDR
// end ; if not IsOk ( i ) then
55229: LD_VAR 0 1
55233: PPUSH
55234: CALL_OW 302
55238: NOT
55239: IFFALSE 55252
// begin HackUnlinkAll ( i ) ;
55241: LD_VAR 0 1
55245: PPUSH
55246: CALL 55358 0 1
// continue ;
55250: GO 55132
// end ; HackCheckCapturedStatus ( i ) ;
55252: LD_VAR 0 1
55256: PPUSH
55257: CALL 55801 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
55261: LD_ADDR_VAR 0 2
55265: PUSH
55266: LD_INT 81
55268: PUSH
55269: LD_VAR 0 1
55273: PPUSH
55274: CALL_OW 255
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 33
55285: PUSH
55286: LD_INT 3
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 91
55295: PUSH
55296: LD_VAR 0 1
55300: PUSH
55301: LD_EXP 38
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 50
55313: PUSH
55314: EMPTY
55315: LIST
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: PPUSH
55323: CALL_OW 69
55327: ST_TO_ADDR
// if not tmp then
55328: LD_VAR 0 2
55332: NOT
55333: IFFALSE 55337
// continue ;
55335: GO 55132
// HackLink ( i , tmp ) ;
55337: LD_VAR 0 1
55341: PPUSH
55342: LD_VAR 0 2
55346: PPUSH
55347: CALL 55494 0 2
// end ;
55351: GO 55132
55353: POP
55354: POP
// end ;
55355: PPOPN 2
55357: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
55358: LD_INT 0
55360: PPUSH
55361: PPUSH
55362: PPUSH
// if not hack in hackTanks then
55363: LD_VAR 0 1
55367: PUSH
55368: LD_EXP 35
55372: IN
55373: NOT
55374: IFFALSE 55378
// exit ;
55376: GO 55489
// index := GetElementIndex ( hackTanks , hack ) ;
55378: LD_ADDR_VAR 0 4
55382: PUSH
55383: LD_EXP 35
55387: PPUSH
55388: LD_VAR 0 1
55392: PPUSH
55393: CALL 19249 0 2
55397: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
55398: LD_EXP 36
55402: PUSH
55403: LD_VAR 0 4
55407: ARRAY
55408: IFFALSE 55489
// begin for i in hackTanksCaptured [ index ] do
55410: LD_ADDR_VAR 0 3
55414: PUSH
55415: LD_EXP 36
55419: PUSH
55420: LD_VAR 0 4
55424: ARRAY
55425: PUSH
55426: FOR_IN
55427: IFFALSE 55453
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
55429: LD_VAR 0 3
55433: PUSH
55434: LD_INT 1
55436: ARRAY
55437: PPUSH
55438: LD_VAR 0 3
55442: PUSH
55443: LD_INT 2
55445: ARRAY
55446: PPUSH
55447: CALL_OW 235
55451: GO 55426
55453: POP
55454: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
55455: LD_ADDR_EXP 36
55459: PUSH
55460: LD_EXP 36
55464: PPUSH
55465: LD_VAR 0 4
55469: PPUSH
55470: EMPTY
55471: PPUSH
55472: CALL_OW 1
55476: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
55477: LD_VAR 0 1
55481: PPUSH
55482: LD_INT 0
55484: PPUSH
55485: CALL_OW 505
// end ; end ;
55489: LD_VAR 0 2
55493: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
55494: LD_INT 0
55496: PPUSH
55497: PPUSH
55498: PPUSH
// if not hack in hackTanks or not vehicles then
55499: LD_VAR 0 1
55503: PUSH
55504: LD_EXP 35
55508: IN
55509: NOT
55510: PUSH
55511: LD_VAR 0 2
55515: NOT
55516: OR
55517: IFFALSE 55521
// exit ;
55519: GO 55796
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
55521: LD_ADDR_VAR 0 2
55525: PUSH
55526: LD_VAR 0 1
55530: PPUSH
55531: LD_VAR 0 2
55535: PPUSH
55536: LD_INT 1
55538: PPUSH
55539: LD_INT 1
55541: PPUSH
55542: CALL 19899 0 4
55546: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
55547: LD_ADDR_VAR 0 5
55551: PUSH
55552: LD_EXP 35
55556: PPUSH
55557: LD_VAR 0 1
55561: PPUSH
55562: CALL 19249 0 2
55566: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
55567: LD_EXP 36
55571: PUSH
55572: LD_VAR 0 5
55576: ARRAY
55577: PUSH
55578: LD_EXP 37
55582: LESS
55583: IFFALSE 55772
// begin for i := 1 to vehicles do
55585: LD_ADDR_VAR 0 4
55589: PUSH
55590: DOUBLE
55591: LD_INT 1
55593: DEC
55594: ST_TO_ADDR
55595: LD_VAR 0 2
55599: PUSH
55600: FOR_TO
55601: IFFALSE 55770
// begin if hackTanksCaptured [ index ] = hackLimit then
55603: LD_EXP 36
55607: PUSH
55608: LD_VAR 0 5
55612: ARRAY
55613: PUSH
55614: LD_EXP 37
55618: EQUAL
55619: IFFALSE 55623
// break ;
55621: GO 55770
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
55623: LD_ADDR_EXP 39
55627: PUSH
55628: LD_EXP 39
55632: PPUSH
55633: LD_VAR 0 5
55637: PPUSH
55638: LD_EXP 39
55642: PUSH
55643: LD_VAR 0 5
55647: ARRAY
55648: PUSH
55649: LD_INT 1
55651: PLUS
55652: PPUSH
55653: CALL_OW 1
55657: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
55658: LD_ADDR_EXP 36
55662: PUSH
55663: LD_EXP 36
55667: PPUSH
55668: LD_VAR 0 5
55672: PUSH
55673: LD_EXP 36
55677: PUSH
55678: LD_VAR 0 5
55682: ARRAY
55683: PUSH
55684: LD_INT 1
55686: PLUS
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PPUSH
55692: LD_VAR 0 2
55696: PUSH
55697: LD_VAR 0 4
55701: ARRAY
55702: PUSH
55703: LD_VAR 0 2
55707: PUSH
55708: LD_VAR 0 4
55712: ARRAY
55713: PPUSH
55714: CALL_OW 255
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PPUSH
55723: CALL 19464 0 3
55727: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
55728: LD_VAR 0 2
55732: PUSH
55733: LD_VAR 0 4
55737: ARRAY
55738: PPUSH
55739: LD_VAR 0 1
55743: PPUSH
55744: CALL_OW 255
55748: PPUSH
55749: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
55753: LD_VAR 0 2
55757: PUSH
55758: LD_VAR 0 4
55762: ARRAY
55763: PPUSH
55764: CALL_OW 141
// end ;
55768: GO 55600
55770: POP
55771: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
55772: LD_VAR 0 1
55776: PPUSH
55777: LD_EXP 36
55781: PUSH
55782: LD_VAR 0 5
55786: ARRAY
55787: PUSH
55788: LD_INT 0
55790: PLUS
55791: PPUSH
55792: CALL_OW 505
// end ;
55796: LD_VAR 0 3
55800: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
55801: LD_INT 0
55803: PPUSH
55804: PPUSH
55805: PPUSH
55806: PPUSH
// if not hack in hackTanks then
55807: LD_VAR 0 1
55811: PUSH
55812: LD_EXP 35
55816: IN
55817: NOT
55818: IFFALSE 55822
// exit ;
55820: GO 56062
// index := GetElementIndex ( hackTanks , hack ) ;
55822: LD_ADDR_VAR 0 4
55826: PUSH
55827: LD_EXP 35
55831: PPUSH
55832: LD_VAR 0 1
55836: PPUSH
55837: CALL 19249 0 2
55841: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
55842: LD_ADDR_VAR 0 3
55846: PUSH
55847: DOUBLE
55848: LD_EXP 36
55852: PUSH
55853: LD_VAR 0 4
55857: ARRAY
55858: INC
55859: ST_TO_ADDR
55860: LD_INT 1
55862: PUSH
55863: FOR_DOWNTO
55864: IFFALSE 56036
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
55866: LD_ADDR_VAR 0 5
55870: PUSH
55871: LD_EXP 36
55875: PUSH
55876: LD_VAR 0 4
55880: ARRAY
55881: PUSH
55882: LD_VAR 0 3
55886: ARRAY
55887: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
55888: LD_VAR 0 5
55892: PUSH
55893: LD_INT 1
55895: ARRAY
55896: PPUSH
55897: CALL_OW 302
55901: NOT
55902: PUSH
55903: LD_VAR 0 5
55907: PUSH
55908: LD_INT 1
55910: ARRAY
55911: PPUSH
55912: CALL_OW 255
55916: PUSH
55917: LD_VAR 0 1
55921: PPUSH
55922: CALL_OW 255
55926: NONEQUAL
55927: OR
55928: IFFALSE 56034
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
55930: LD_VAR 0 5
55934: PUSH
55935: LD_INT 1
55937: ARRAY
55938: PPUSH
55939: CALL_OW 305
55943: PUSH
55944: LD_VAR 0 5
55948: PUSH
55949: LD_INT 1
55951: ARRAY
55952: PPUSH
55953: CALL_OW 255
55957: PUSH
55958: LD_VAR 0 1
55962: PPUSH
55963: CALL_OW 255
55967: EQUAL
55968: AND
55969: IFFALSE 55993
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
55971: LD_VAR 0 5
55975: PUSH
55976: LD_INT 1
55978: ARRAY
55979: PPUSH
55980: LD_VAR 0 5
55984: PUSH
55985: LD_INT 2
55987: ARRAY
55988: PPUSH
55989: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
55993: LD_ADDR_EXP 36
55997: PUSH
55998: LD_EXP 36
56002: PPUSH
56003: LD_VAR 0 4
56007: PPUSH
56008: LD_EXP 36
56012: PUSH
56013: LD_VAR 0 4
56017: ARRAY
56018: PPUSH
56019: LD_VAR 0 3
56023: PPUSH
56024: CALL_OW 3
56028: PPUSH
56029: CALL_OW 1
56033: ST_TO_ADDR
// end ; end ;
56034: GO 55863
56036: POP
56037: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56038: LD_VAR 0 1
56042: PPUSH
56043: LD_EXP 36
56047: PUSH
56048: LD_VAR 0 4
56052: ARRAY
56053: PUSH
56054: LD_INT 0
56056: PLUS
56057: PPUSH
56058: CALL_OW 505
// end ;
56062: LD_VAR 0 2
56066: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
56067: LD_INT 0
56069: PPUSH
56070: PPUSH
56071: PPUSH
56072: PPUSH
// if not hack in hackTanks then
56073: LD_VAR 0 1
56077: PUSH
56078: LD_EXP 35
56082: IN
56083: NOT
56084: IFFALSE 56088
// exit ;
56086: GO 56173
// index := GetElementIndex ( hackTanks , hack ) ;
56088: LD_ADDR_VAR 0 5
56092: PUSH
56093: LD_EXP 35
56097: PPUSH
56098: LD_VAR 0 1
56102: PPUSH
56103: CALL 19249 0 2
56107: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
56108: LD_ADDR_VAR 0 4
56112: PUSH
56113: DOUBLE
56114: LD_INT 1
56116: DEC
56117: ST_TO_ADDR
56118: LD_EXP 36
56122: PUSH
56123: LD_VAR 0 5
56127: ARRAY
56128: PUSH
56129: FOR_TO
56130: IFFALSE 56171
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
56132: LD_EXP 36
56136: PUSH
56137: LD_VAR 0 5
56141: ARRAY
56142: PUSH
56143: LD_VAR 0 4
56147: ARRAY
56148: PUSH
56149: LD_INT 1
56151: ARRAY
56152: PUSH
56153: LD_VAR 0 2
56157: EQUAL
56158: IFFALSE 56169
// KillUnit ( vehicle ) ;
56160: LD_VAR 0 2
56164: PPUSH
56165: CALL_OW 66
56169: GO 56129
56171: POP
56172: POP
// end ;
56173: LD_VAR 0 3
56177: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
56178: LD_EXP 40
56182: NOT
56183: IFFALSE 56218
56185: GO 56187
56187: DISABLE
// begin initMiner := true ;
56188: LD_ADDR_EXP 40
56192: PUSH
56193: LD_INT 1
56195: ST_TO_ADDR
// minersList := [ ] ;
56196: LD_ADDR_EXP 41
56200: PUSH
56201: EMPTY
56202: ST_TO_ADDR
// minerMinesList := [ ] ;
56203: LD_ADDR_EXP 42
56207: PUSH
56208: EMPTY
56209: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
56210: LD_ADDR_EXP 43
56214: PUSH
56215: LD_INT 5
56217: ST_TO_ADDR
// end ;
56218: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
56219: LD_EXP 40
56223: PUSH
56224: LD_INT 34
56226: PUSH
56227: LD_EXP 106
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PPUSH
56236: CALL_OW 69
56240: AND
56241: IFFALSE 56704
56243: GO 56245
56245: DISABLE
56246: LD_INT 0
56248: PPUSH
56249: PPUSH
56250: PPUSH
56251: PPUSH
// begin enable ;
56252: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
56253: LD_ADDR_VAR 0 1
56257: PUSH
56258: LD_INT 34
56260: PUSH
56261: LD_EXP 106
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PPUSH
56270: CALL_OW 69
56274: PUSH
56275: FOR_IN
56276: IFFALSE 56348
// begin if not i in minersList then
56278: LD_VAR 0 1
56282: PUSH
56283: LD_EXP 41
56287: IN
56288: NOT
56289: IFFALSE 56346
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
56291: LD_ADDR_EXP 41
56295: PUSH
56296: LD_EXP 41
56300: PPUSH
56301: LD_EXP 41
56305: PUSH
56306: LD_INT 1
56308: PLUS
56309: PPUSH
56310: LD_VAR 0 1
56314: PPUSH
56315: CALL_OW 1
56319: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
56320: LD_ADDR_EXP 42
56324: PUSH
56325: LD_EXP 42
56329: PPUSH
56330: LD_EXP 42
56334: PUSH
56335: LD_INT 1
56337: PLUS
56338: PPUSH
56339: EMPTY
56340: PPUSH
56341: CALL_OW 1
56345: ST_TO_ADDR
// end end ;
56346: GO 56275
56348: POP
56349: POP
// for i := minerMinesList downto 1 do
56350: LD_ADDR_VAR 0 1
56354: PUSH
56355: DOUBLE
56356: LD_EXP 42
56360: INC
56361: ST_TO_ADDR
56362: LD_INT 1
56364: PUSH
56365: FOR_DOWNTO
56366: IFFALSE 56702
// begin if IsLive ( minersList [ i ] ) then
56368: LD_EXP 41
56372: PUSH
56373: LD_VAR 0 1
56377: ARRAY
56378: PPUSH
56379: CALL_OW 300
56383: IFFALSE 56411
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
56385: LD_EXP 41
56389: PUSH
56390: LD_VAR 0 1
56394: ARRAY
56395: PPUSH
56396: LD_EXP 42
56400: PUSH
56401: LD_VAR 0 1
56405: ARRAY
56406: PPUSH
56407: CALL_OW 505
// if not minerMinesList [ i ] then
56411: LD_EXP 42
56415: PUSH
56416: LD_VAR 0 1
56420: ARRAY
56421: NOT
56422: IFFALSE 56426
// continue ;
56424: GO 56365
// for j := minerMinesList [ i ] downto 1 do
56426: LD_ADDR_VAR 0 2
56430: PUSH
56431: DOUBLE
56432: LD_EXP 42
56436: PUSH
56437: LD_VAR 0 1
56441: ARRAY
56442: INC
56443: ST_TO_ADDR
56444: LD_INT 1
56446: PUSH
56447: FOR_DOWNTO
56448: IFFALSE 56698
// begin side := GetSide ( minersList [ i ] ) ;
56450: LD_ADDR_VAR 0 3
56454: PUSH
56455: LD_EXP 41
56459: PUSH
56460: LD_VAR 0 1
56464: ARRAY
56465: PPUSH
56466: CALL_OW 255
56470: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
56471: LD_ADDR_VAR 0 4
56475: PUSH
56476: LD_EXP 42
56480: PUSH
56481: LD_VAR 0 1
56485: ARRAY
56486: PUSH
56487: LD_VAR 0 2
56491: ARRAY
56492: PUSH
56493: LD_INT 1
56495: ARRAY
56496: PPUSH
56497: LD_EXP 42
56501: PUSH
56502: LD_VAR 0 1
56506: ARRAY
56507: PUSH
56508: LD_VAR 0 2
56512: ARRAY
56513: PUSH
56514: LD_INT 2
56516: ARRAY
56517: PPUSH
56518: CALL_OW 428
56522: ST_TO_ADDR
// if not tmp then
56523: LD_VAR 0 4
56527: NOT
56528: IFFALSE 56532
// continue ;
56530: GO 56447
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
56532: LD_VAR 0 4
56536: PUSH
56537: LD_INT 81
56539: PUSH
56540: LD_VAR 0 3
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PPUSH
56549: CALL_OW 69
56553: IN
56554: PUSH
56555: LD_EXP 42
56559: PUSH
56560: LD_VAR 0 1
56564: ARRAY
56565: PUSH
56566: LD_VAR 0 2
56570: ARRAY
56571: PUSH
56572: LD_INT 1
56574: ARRAY
56575: PPUSH
56576: LD_EXP 42
56580: PUSH
56581: LD_VAR 0 1
56585: ARRAY
56586: PUSH
56587: LD_VAR 0 2
56591: ARRAY
56592: PUSH
56593: LD_INT 2
56595: ARRAY
56596: PPUSH
56597: CALL_OW 458
56601: AND
56602: IFFALSE 56696
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
56604: LD_EXP 42
56608: PUSH
56609: LD_VAR 0 1
56613: ARRAY
56614: PUSH
56615: LD_VAR 0 2
56619: ARRAY
56620: PUSH
56621: LD_INT 1
56623: ARRAY
56624: PPUSH
56625: LD_EXP 42
56629: PUSH
56630: LD_VAR 0 1
56634: ARRAY
56635: PUSH
56636: LD_VAR 0 2
56640: ARRAY
56641: PUSH
56642: LD_INT 2
56644: ARRAY
56645: PPUSH
56646: LD_VAR 0 3
56650: PPUSH
56651: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
56655: LD_ADDR_EXP 42
56659: PUSH
56660: LD_EXP 42
56664: PPUSH
56665: LD_VAR 0 1
56669: PPUSH
56670: LD_EXP 42
56674: PUSH
56675: LD_VAR 0 1
56679: ARRAY
56680: PPUSH
56681: LD_VAR 0 2
56685: PPUSH
56686: CALL_OW 3
56690: PPUSH
56691: CALL_OW 1
56695: ST_TO_ADDR
// end ; end ;
56696: GO 56447
56698: POP
56699: POP
// end ;
56700: GO 56365
56702: POP
56703: POP
// end ;
56704: PPOPN 4
56706: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
56707: LD_INT 0
56709: PPUSH
56710: PPUSH
// result := false ;
56711: LD_ADDR_VAR 0 4
56715: PUSH
56716: LD_INT 0
56718: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
56719: LD_VAR 0 1
56723: PPUSH
56724: CALL_OW 264
56728: PUSH
56729: LD_EXP 106
56733: EQUAL
56734: NOT
56735: IFFALSE 56739
// exit ;
56737: GO 56979
// index := GetElementIndex ( minersList , unit ) ;
56739: LD_ADDR_VAR 0 5
56743: PUSH
56744: LD_EXP 41
56748: PPUSH
56749: LD_VAR 0 1
56753: PPUSH
56754: CALL 19249 0 2
56758: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
56759: LD_EXP 42
56763: PUSH
56764: LD_VAR 0 5
56768: ARRAY
56769: PUSH
56770: LD_EXP 43
56774: GREATEREQUAL
56775: IFFALSE 56779
// exit ;
56777: GO 56979
// ComMoveXY ( unit , x , y ) ;
56779: LD_VAR 0 1
56783: PPUSH
56784: LD_VAR 0 2
56788: PPUSH
56789: LD_VAR 0 3
56793: PPUSH
56794: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
56798: LD_INT 35
56800: PPUSH
56801: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
56805: LD_VAR 0 1
56809: PPUSH
56810: LD_VAR 0 2
56814: PPUSH
56815: LD_VAR 0 3
56819: PPUSH
56820: CALL 50021 0 3
56824: NOT
56825: PUSH
56826: LD_VAR 0 1
56830: PPUSH
56831: CALL_OW 314
56835: AND
56836: IFFALSE 56840
// exit ;
56838: GO 56979
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
56840: LD_VAR 0 2
56844: PPUSH
56845: LD_VAR 0 3
56849: PPUSH
56850: CALL_OW 428
56854: PUSH
56855: LD_VAR 0 1
56859: EQUAL
56860: PUSH
56861: LD_VAR 0 1
56865: PPUSH
56866: CALL_OW 314
56870: NOT
56871: AND
56872: IFFALSE 56798
// PlaySoundXY ( x , y , PlantMine ) ;
56874: LD_VAR 0 2
56878: PPUSH
56879: LD_VAR 0 3
56883: PPUSH
56884: LD_STRING PlantMine
56886: PPUSH
56887: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
56891: LD_VAR 0 2
56895: PPUSH
56896: LD_VAR 0 3
56900: PPUSH
56901: LD_VAR 0 1
56905: PPUSH
56906: CALL_OW 255
56910: PPUSH
56911: LD_INT 0
56913: PPUSH
56914: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
56918: LD_ADDR_EXP 42
56922: PUSH
56923: LD_EXP 42
56927: PPUSH
56928: LD_VAR 0 5
56932: PUSH
56933: LD_EXP 42
56937: PUSH
56938: LD_VAR 0 5
56942: ARRAY
56943: PUSH
56944: LD_INT 1
56946: PLUS
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PPUSH
56952: LD_VAR 0 2
56956: PUSH
56957: LD_VAR 0 3
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PPUSH
56966: CALL 19464 0 3
56970: ST_TO_ADDR
// result := true ;
56971: LD_ADDR_VAR 0 4
56975: PUSH
56976: LD_INT 1
56978: ST_TO_ADDR
// end ;
56979: LD_VAR 0 4
56983: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
56984: LD_INT 0
56986: PPUSH
56987: PPUSH
56988: PPUSH
// if not unit in minersList then
56989: LD_VAR 0 1
56993: PUSH
56994: LD_EXP 41
56998: IN
56999: NOT
57000: IFFALSE 57004
// exit ;
57002: GO 57396
// index := GetElementIndex ( minersList , unit ) ;
57004: LD_ADDR_VAR 0 6
57008: PUSH
57009: LD_EXP 41
57013: PPUSH
57014: LD_VAR 0 1
57018: PPUSH
57019: CALL 19249 0 2
57023: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
57024: LD_ADDR_VAR 0 5
57028: PUSH
57029: DOUBLE
57030: LD_EXP 42
57034: PUSH
57035: LD_VAR 0 6
57039: ARRAY
57040: INC
57041: ST_TO_ADDR
57042: LD_INT 1
57044: PUSH
57045: FOR_DOWNTO
57046: IFFALSE 57207
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
57048: LD_EXP 42
57052: PUSH
57053: LD_VAR 0 6
57057: ARRAY
57058: PUSH
57059: LD_VAR 0 5
57063: ARRAY
57064: PUSH
57065: LD_INT 1
57067: ARRAY
57068: PUSH
57069: LD_VAR 0 2
57073: EQUAL
57074: PUSH
57075: LD_EXP 42
57079: PUSH
57080: LD_VAR 0 6
57084: ARRAY
57085: PUSH
57086: LD_VAR 0 5
57090: ARRAY
57091: PUSH
57092: LD_INT 2
57094: ARRAY
57095: PUSH
57096: LD_VAR 0 3
57100: EQUAL
57101: AND
57102: IFFALSE 57205
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57104: LD_EXP 42
57108: PUSH
57109: LD_VAR 0 6
57113: ARRAY
57114: PUSH
57115: LD_VAR 0 5
57119: ARRAY
57120: PUSH
57121: LD_INT 1
57123: ARRAY
57124: PPUSH
57125: LD_EXP 42
57129: PUSH
57130: LD_VAR 0 6
57134: ARRAY
57135: PUSH
57136: LD_VAR 0 5
57140: ARRAY
57141: PUSH
57142: LD_INT 2
57144: ARRAY
57145: PPUSH
57146: LD_VAR 0 1
57150: PPUSH
57151: CALL_OW 255
57155: PPUSH
57156: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
57160: LD_ADDR_EXP 42
57164: PUSH
57165: LD_EXP 42
57169: PPUSH
57170: LD_VAR 0 6
57174: PPUSH
57175: LD_EXP 42
57179: PUSH
57180: LD_VAR 0 6
57184: ARRAY
57185: PPUSH
57186: LD_VAR 0 5
57190: PPUSH
57191: CALL_OW 3
57195: PPUSH
57196: CALL_OW 1
57200: ST_TO_ADDR
// exit ;
57201: POP
57202: POP
57203: GO 57396
// end ; end ;
57205: GO 57045
57207: POP
57208: POP
// for i := minerMinesList [ index ] downto 1 do
57209: LD_ADDR_VAR 0 5
57213: PUSH
57214: DOUBLE
57215: LD_EXP 42
57219: PUSH
57220: LD_VAR 0 6
57224: ARRAY
57225: INC
57226: ST_TO_ADDR
57227: LD_INT 1
57229: PUSH
57230: FOR_DOWNTO
57231: IFFALSE 57394
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
57233: LD_EXP 42
57237: PUSH
57238: LD_VAR 0 6
57242: ARRAY
57243: PUSH
57244: LD_VAR 0 5
57248: ARRAY
57249: PUSH
57250: LD_INT 1
57252: ARRAY
57253: PPUSH
57254: LD_EXP 42
57258: PUSH
57259: LD_VAR 0 6
57263: ARRAY
57264: PUSH
57265: LD_VAR 0 5
57269: ARRAY
57270: PUSH
57271: LD_INT 2
57273: ARRAY
57274: PPUSH
57275: LD_VAR 0 2
57279: PPUSH
57280: LD_VAR 0 3
57284: PPUSH
57285: CALL_OW 298
57289: PUSH
57290: LD_INT 6
57292: LESS
57293: IFFALSE 57392
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57295: LD_EXP 42
57299: PUSH
57300: LD_VAR 0 6
57304: ARRAY
57305: PUSH
57306: LD_VAR 0 5
57310: ARRAY
57311: PUSH
57312: LD_INT 1
57314: ARRAY
57315: PPUSH
57316: LD_EXP 42
57320: PUSH
57321: LD_VAR 0 6
57325: ARRAY
57326: PUSH
57327: LD_VAR 0 5
57331: ARRAY
57332: PUSH
57333: LD_INT 2
57335: ARRAY
57336: PPUSH
57337: LD_VAR 0 1
57341: PPUSH
57342: CALL_OW 255
57346: PPUSH
57347: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
57351: LD_ADDR_EXP 42
57355: PUSH
57356: LD_EXP 42
57360: PPUSH
57361: LD_VAR 0 6
57365: PPUSH
57366: LD_EXP 42
57370: PUSH
57371: LD_VAR 0 6
57375: ARRAY
57376: PPUSH
57377: LD_VAR 0 5
57381: PPUSH
57382: CALL_OW 3
57386: PPUSH
57387: CALL_OW 1
57391: ST_TO_ADDR
// end ; end ;
57392: GO 57230
57394: POP
57395: POP
// end ;
57396: LD_VAR 0 4
57400: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
57401: LD_INT 0
57403: PPUSH
57404: PPUSH
57405: PPUSH
57406: PPUSH
57407: PPUSH
57408: PPUSH
57409: PPUSH
57410: PPUSH
57411: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
57412: LD_VAR 0 1
57416: PPUSH
57417: CALL_OW 264
57421: PUSH
57422: LD_EXP 106
57426: EQUAL
57427: NOT
57428: PUSH
57429: LD_VAR 0 1
57433: PUSH
57434: LD_EXP 41
57438: IN
57439: NOT
57440: OR
57441: IFFALSE 57445
// exit ;
57443: GO 57767
// index := GetElementIndex ( minersList , unit ) ;
57445: LD_ADDR_VAR 0 6
57449: PUSH
57450: LD_EXP 41
57454: PPUSH
57455: LD_VAR 0 1
57459: PPUSH
57460: CALL 19249 0 2
57464: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
57465: LD_ADDR_VAR 0 8
57469: PUSH
57470: LD_EXP 43
57474: PUSH
57475: LD_EXP 42
57479: PUSH
57480: LD_VAR 0 6
57484: ARRAY
57485: MINUS
57486: ST_TO_ADDR
// if not minesFreeAmount then
57487: LD_VAR 0 8
57491: NOT
57492: IFFALSE 57496
// exit ;
57494: GO 57767
// tmp := [ ] ;
57496: LD_ADDR_VAR 0 7
57500: PUSH
57501: EMPTY
57502: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
57503: LD_ADDR_VAR 0 5
57507: PUSH
57508: DOUBLE
57509: LD_INT 1
57511: DEC
57512: ST_TO_ADDR
57513: LD_VAR 0 8
57517: PUSH
57518: FOR_TO
57519: IFFALSE 57714
// begin _d := rand ( 0 , 5 ) ;
57521: LD_ADDR_VAR 0 11
57525: PUSH
57526: LD_INT 0
57528: PPUSH
57529: LD_INT 5
57531: PPUSH
57532: CALL_OW 12
57536: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
57537: LD_ADDR_VAR 0 12
57541: PUSH
57542: LD_INT 2
57544: PPUSH
57545: LD_INT 6
57547: PPUSH
57548: CALL_OW 12
57552: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
57553: LD_ADDR_VAR 0 9
57557: PUSH
57558: LD_VAR 0 2
57562: PPUSH
57563: LD_VAR 0 11
57567: PPUSH
57568: LD_VAR 0 12
57572: PPUSH
57573: CALL_OW 272
57577: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
57578: LD_ADDR_VAR 0 10
57582: PUSH
57583: LD_VAR 0 3
57587: PPUSH
57588: LD_VAR 0 11
57592: PPUSH
57593: LD_VAR 0 12
57597: PPUSH
57598: CALL_OW 273
57602: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
57603: LD_VAR 0 9
57607: PPUSH
57608: LD_VAR 0 10
57612: PPUSH
57613: CALL_OW 488
57617: PUSH
57618: LD_VAR 0 9
57622: PUSH
57623: LD_VAR 0 10
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_VAR 0 7
57636: IN
57637: NOT
57638: AND
57639: PUSH
57640: LD_VAR 0 9
57644: PPUSH
57645: LD_VAR 0 10
57649: PPUSH
57650: CALL_OW 458
57654: NOT
57655: AND
57656: IFFALSE 57698
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
57658: LD_ADDR_VAR 0 7
57662: PUSH
57663: LD_VAR 0 7
57667: PPUSH
57668: LD_VAR 0 7
57672: PUSH
57673: LD_INT 1
57675: PLUS
57676: PPUSH
57677: LD_VAR 0 9
57681: PUSH
57682: LD_VAR 0 10
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PPUSH
57691: CALL_OW 1
57695: ST_TO_ADDR
57696: GO 57712
// i := i - 1 ;
57698: LD_ADDR_VAR 0 5
57702: PUSH
57703: LD_VAR 0 5
57707: PUSH
57708: LD_INT 1
57710: MINUS
57711: ST_TO_ADDR
// end ;
57712: GO 57518
57714: POP
57715: POP
// for i in tmp do
57716: LD_ADDR_VAR 0 5
57720: PUSH
57721: LD_VAR 0 7
57725: PUSH
57726: FOR_IN
57727: IFFALSE 57765
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
57729: LD_VAR 0 1
57733: PPUSH
57734: LD_VAR 0 5
57738: PUSH
57739: LD_INT 1
57741: ARRAY
57742: PPUSH
57743: LD_VAR 0 5
57747: PUSH
57748: LD_INT 2
57750: ARRAY
57751: PPUSH
57752: CALL 56707 0 3
57756: NOT
57757: IFFALSE 57763
// exit ;
57759: POP
57760: POP
57761: GO 57767
57763: GO 57726
57765: POP
57766: POP
// end ;
57767: LD_VAR 0 4
57771: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
57772: LD_INT 0
57774: PPUSH
57775: PPUSH
57776: PPUSH
57777: PPUSH
57778: PPUSH
57779: PPUSH
57780: PPUSH
// if not GetClass ( unit ) = class_sniper then
57781: LD_VAR 0 1
57785: PPUSH
57786: CALL_OW 257
57790: PUSH
57791: LD_INT 5
57793: EQUAL
57794: NOT
57795: IFFALSE 57799
// exit ;
57797: GO 58187
// dist := 8 ;
57799: LD_ADDR_VAR 0 5
57803: PUSH
57804: LD_INT 8
57806: ST_TO_ADDR
// viewRange := 12 ;
57807: LD_ADDR_VAR 0 7
57811: PUSH
57812: LD_INT 12
57814: ST_TO_ADDR
// side := GetSide ( unit ) ;
57815: LD_ADDR_VAR 0 6
57819: PUSH
57820: LD_VAR 0 1
57824: PPUSH
57825: CALL_OW 255
57829: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
57830: LD_INT 61
57832: PPUSH
57833: LD_VAR 0 6
57837: PPUSH
57838: CALL_OW 321
57842: PUSH
57843: LD_INT 2
57845: EQUAL
57846: IFFALSE 57856
// viewRange := 16 ;
57848: LD_ADDR_VAR 0 7
57852: PUSH
57853: LD_INT 16
57855: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
57856: LD_VAR 0 1
57860: PPUSH
57861: LD_VAR 0 2
57865: PPUSH
57866: LD_VAR 0 3
57870: PPUSH
57871: CALL_OW 297
57875: PUSH
57876: LD_VAR 0 5
57880: GREATER
57881: IFFALSE 57960
// begin ComMoveXY ( unit , x , y ) ;
57883: LD_VAR 0 1
57887: PPUSH
57888: LD_VAR 0 2
57892: PPUSH
57893: LD_VAR 0 3
57897: PPUSH
57898: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57902: LD_INT 35
57904: PPUSH
57905: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
57909: LD_VAR 0 1
57913: PPUSH
57914: LD_VAR 0 2
57918: PPUSH
57919: LD_VAR 0 3
57923: PPUSH
57924: CALL 50021 0 3
57928: NOT
57929: IFFALSE 57933
// exit ;
57931: GO 58187
// until GetDistUnitXY ( unit , x , y ) < dist ;
57933: LD_VAR 0 1
57937: PPUSH
57938: LD_VAR 0 2
57942: PPUSH
57943: LD_VAR 0 3
57947: PPUSH
57948: CALL_OW 297
57952: PUSH
57953: LD_VAR 0 5
57957: LESS
57958: IFFALSE 57902
// end ; ComTurnXY ( unit , x , y ) ;
57960: LD_VAR 0 1
57964: PPUSH
57965: LD_VAR 0 2
57969: PPUSH
57970: LD_VAR 0 3
57974: PPUSH
57975: CALL_OW 118
// wait ( 5 ) ;
57979: LD_INT 5
57981: PPUSH
57982: CALL_OW 67
// _d := GetDir ( unit ) ;
57986: LD_ADDR_VAR 0 10
57990: PUSH
57991: LD_VAR 0 1
57995: PPUSH
57996: CALL_OW 254
58000: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
58001: LD_ADDR_VAR 0 8
58005: PUSH
58006: LD_VAR 0 1
58010: PPUSH
58011: CALL_OW 250
58015: PPUSH
58016: LD_VAR 0 10
58020: PPUSH
58021: LD_VAR 0 5
58025: PPUSH
58026: CALL_OW 272
58030: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
58031: LD_ADDR_VAR 0 9
58035: PUSH
58036: LD_VAR 0 1
58040: PPUSH
58041: CALL_OW 251
58045: PPUSH
58046: LD_VAR 0 10
58050: PPUSH
58051: LD_VAR 0 5
58055: PPUSH
58056: CALL_OW 273
58060: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58061: LD_VAR 0 8
58065: PPUSH
58066: LD_VAR 0 9
58070: PPUSH
58071: CALL_OW 488
58075: NOT
58076: IFFALSE 58080
// exit ;
58078: GO 58187
// ComAnimCustom ( unit , 1 ) ;
58080: LD_VAR 0 1
58084: PPUSH
58085: LD_INT 1
58087: PPUSH
58088: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
58092: LD_VAR 0 8
58096: PPUSH
58097: LD_VAR 0 9
58101: PPUSH
58102: LD_VAR 0 6
58106: PPUSH
58107: LD_VAR 0 7
58111: PPUSH
58112: CALL_OW 330
// repeat wait ( 1 ) ;
58116: LD_INT 1
58118: PPUSH
58119: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
58123: LD_VAR 0 1
58127: PPUSH
58128: CALL_OW 316
58132: PUSH
58133: LD_VAR 0 1
58137: PPUSH
58138: CALL_OW 314
58142: OR
58143: PUSH
58144: LD_VAR 0 1
58148: PPUSH
58149: CALL_OW 302
58153: NOT
58154: OR
58155: PUSH
58156: LD_VAR 0 1
58160: PPUSH
58161: CALL_OW 301
58165: OR
58166: IFFALSE 58116
// RemoveSeeing ( _x , _y , side ) ;
58168: LD_VAR 0 8
58172: PPUSH
58173: LD_VAR 0 9
58177: PPUSH
58178: LD_VAR 0 6
58182: PPUSH
58183: CALL_OW 331
// end ; end_of_file
58187: LD_VAR 0 4
58191: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
58192: LD_INT 0
58194: PPUSH
// if p2 = 100 then
58195: LD_VAR 0 2
58199: PUSH
58200: LD_INT 100
58202: EQUAL
58203: IFFALSE 59152
// begin if not StreamModeActive then
58205: LD_EXP 44
58209: NOT
58210: IFFALSE 58220
// StreamModeActive := true ;
58212: LD_ADDR_EXP 44
58216: PUSH
58217: LD_INT 1
58219: ST_TO_ADDR
// if p3 = 0 then
58220: LD_VAR 0 3
58224: PUSH
58225: LD_INT 0
58227: EQUAL
58228: IFFALSE 58234
// InitStreamMode ;
58230: CALL 59312 0 0
// if p3 = 1 then
58234: LD_VAR 0 3
58238: PUSH
58239: LD_INT 1
58241: EQUAL
58242: IFFALSE 58252
// sRocket := true ;
58244: LD_ADDR_EXP 49
58248: PUSH
58249: LD_INT 1
58251: ST_TO_ADDR
// if p3 = 2 then
58252: LD_VAR 0 3
58256: PUSH
58257: LD_INT 2
58259: EQUAL
58260: IFFALSE 58270
// sSpeed := true ;
58262: LD_ADDR_EXP 48
58266: PUSH
58267: LD_INT 1
58269: ST_TO_ADDR
// if p3 = 3 then
58270: LD_VAR 0 3
58274: PUSH
58275: LD_INT 3
58277: EQUAL
58278: IFFALSE 58288
// sEngine := true ;
58280: LD_ADDR_EXP 50
58284: PUSH
58285: LD_INT 1
58287: ST_TO_ADDR
// if p3 = 4 then
58288: LD_VAR 0 3
58292: PUSH
58293: LD_INT 4
58295: EQUAL
58296: IFFALSE 58306
// sSpec := true ;
58298: LD_ADDR_EXP 47
58302: PUSH
58303: LD_INT 1
58305: ST_TO_ADDR
// if p3 = 5 then
58306: LD_VAR 0 3
58310: PUSH
58311: LD_INT 5
58313: EQUAL
58314: IFFALSE 58324
// sLevel := true ;
58316: LD_ADDR_EXP 51
58320: PUSH
58321: LD_INT 1
58323: ST_TO_ADDR
// if p3 = 6 then
58324: LD_VAR 0 3
58328: PUSH
58329: LD_INT 6
58331: EQUAL
58332: IFFALSE 58342
// sArmoury := true ;
58334: LD_ADDR_EXP 52
58338: PUSH
58339: LD_INT 1
58341: ST_TO_ADDR
// if p3 = 7 then
58342: LD_VAR 0 3
58346: PUSH
58347: LD_INT 7
58349: EQUAL
58350: IFFALSE 58360
// sRadar := true ;
58352: LD_ADDR_EXP 53
58356: PUSH
58357: LD_INT 1
58359: ST_TO_ADDR
// if p3 = 8 then
58360: LD_VAR 0 3
58364: PUSH
58365: LD_INT 8
58367: EQUAL
58368: IFFALSE 58378
// sBunker := true ;
58370: LD_ADDR_EXP 54
58374: PUSH
58375: LD_INT 1
58377: ST_TO_ADDR
// if p3 = 9 then
58378: LD_VAR 0 3
58382: PUSH
58383: LD_INT 9
58385: EQUAL
58386: IFFALSE 58396
// sHack := true ;
58388: LD_ADDR_EXP 55
58392: PUSH
58393: LD_INT 1
58395: ST_TO_ADDR
// if p3 = 10 then
58396: LD_VAR 0 3
58400: PUSH
58401: LD_INT 10
58403: EQUAL
58404: IFFALSE 58414
// sFire := true ;
58406: LD_ADDR_EXP 56
58410: PUSH
58411: LD_INT 1
58413: ST_TO_ADDR
// if p3 = 11 then
58414: LD_VAR 0 3
58418: PUSH
58419: LD_INT 11
58421: EQUAL
58422: IFFALSE 58432
// sRefresh := true ;
58424: LD_ADDR_EXP 57
58428: PUSH
58429: LD_INT 1
58431: ST_TO_ADDR
// if p3 = 12 then
58432: LD_VAR 0 3
58436: PUSH
58437: LD_INT 12
58439: EQUAL
58440: IFFALSE 58450
// sExp := true ;
58442: LD_ADDR_EXP 58
58446: PUSH
58447: LD_INT 1
58449: ST_TO_ADDR
// if p3 = 13 then
58450: LD_VAR 0 3
58454: PUSH
58455: LD_INT 13
58457: EQUAL
58458: IFFALSE 58468
// sDepot := true ;
58460: LD_ADDR_EXP 59
58464: PUSH
58465: LD_INT 1
58467: ST_TO_ADDR
// if p3 = 14 then
58468: LD_VAR 0 3
58472: PUSH
58473: LD_INT 14
58475: EQUAL
58476: IFFALSE 58486
// sFlag := true ;
58478: LD_ADDR_EXP 60
58482: PUSH
58483: LD_INT 1
58485: ST_TO_ADDR
// if p3 = 15 then
58486: LD_VAR 0 3
58490: PUSH
58491: LD_INT 15
58493: EQUAL
58494: IFFALSE 58504
// sKamikadze := true ;
58496: LD_ADDR_EXP 68
58500: PUSH
58501: LD_INT 1
58503: ST_TO_ADDR
// if p3 = 16 then
58504: LD_VAR 0 3
58508: PUSH
58509: LD_INT 16
58511: EQUAL
58512: IFFALSE 58522
// sTroll := true ;
58514: LD_ADDR_EXP 69
58518: PUSH
58519: LD_INT 1
58521: ST_TO_ADDR
// if p3 = 17 then
58522: LD_VAR 0 3
58526: PUSH
58527: LD_INT 17
58529: EQUAL
58530: IFFALSE 58540
// sSlow := true ;
58532: LD_ADDR_EXP 70
58536: PUSH
58537: LD_INT 1
58539: ST_TO_ADDR
// if p3 = 18 then
58540: LD_VAR 0 3
58544: PUSH
58545: LD_INT 18
58547: EQUAL
58548: IFFALSE 58558
// sLack := true ;
58550: LD_ADDR_EXP 71
58554: PUSH
58555: LD_INT 1
58557: ST_TO_ADDR
// if p3 = 19 then
58558: LD_VAR 0 3
58562: PUSH
58563: LD_INT 19
58565: EQUAL
58566: IFFALSE 58576
// sTank := true ;
58568: LD_ADDR_EXP 73
58572: PUSH
58573: LD_INT 1
58575: ST_TO_ADDR
// if p3 = 20 then
58576: LD_VAR 0 3
58580: PUSH
58581: LD_INT 20
58583: EQUAL
58584: IFFALSE 58594
// sRemote := true ;
58586: LD_ADDR_EXP 74
58590: PUSH
58591: LD_INT 1
58593: ST_TO_ADDR
// if p3 = 21 then
58594: LD_VAR 0 3
58598: PUSH
58599: LD_INT 21
58601: EQUAL
58602: IFFALSE 58612
// sPowell := true ;
58604: LD_ADDR_EXP 75
58608: PUSH
58609: LD_INT 1
58611: ST_TO_ADDR
// if p3 = 22 then
58612: LD_VAR 0 3
58616: PUSH
58617: LD_INT 22
58619: EQUAL
58620: IFFALSE 58630
// sTeleport := true ;
58622: LD_ADDR_EXP 78
58626: PUSH
58627: LD_INT 1
58629: ST_TO_ADDR
// if p3 = 23 then
58630: LD_VAR 0 3
58634: PUSH
58635: LD_INT 23
58637: EQUAL
58638: IFFALSE 58648
// sOilTower := true ;
58640: LD_ADDR_EXP 80
58644: PUSH
58645: LD_INT 1
58647: ST_TO_ADDR
// if p3 = 24 then
58648: LD_VAR 0 3
58652: PUSH
58653: LD_INT 24
58655: EQUAL
58656: IFFALSE 58666
// sShovel := true ;
58658: LD_ADDR_EXP 81
58662: PUSH
58663: LD_INT 1
58665: ST_TO_ADDR
// if p3 = 25 then
58666: LD_VAR 0 3
58670: PUSH
58671: LD_INT 25
58673: EQUAL
58674: IFFALSE 58684
// sSheik := true ;
58676: LD_ADDR_EXP 82
58680: PUSH
58681: LD_INT 1
58683: ST_TO_ADDR
// if p3 = 26 then
58684: LD_VAR 0 3
58688: PUSH
58689: LD_INT 26
58691: EQUAL
58692: IFFALSE 58702
// sEarthquake := true ;
58694: LD_ADDR_EXP 84
58698: PUSH
58699: LD_INT 1
58701: ST_TO_ADDR
// if p3 = 27 then
58702: LD_VAR 0 3
58706: PUSH
58707: LD_INT 27
58709: EQUAL
58710: IFFALSE 58720
// sAI := true ;
58712: LD_ADDR_EXP 85
58716: PUSH
58717: LD_INT 1
58719: ST_TO_ADDR
// if p3 = 28 then
58720: LD_VAR 0 3
58724: PUSH
58725: LD_INT 28
58727: EQUAL
58728: IFFALSE 58738
// sCargo := true ;
58730: LD_ADDR_EXP 88
58734: PUSH
58735: LD_INT 1
58737: ST_TO_ADDR
// if p3 = 29 then
58738: LD_VAR 0 3
58742: PUSH
58743: LD_INT 29
58745: EQUAL
58746: IFFALSE 58756
// sDLaser := true ;
58748: LD_ADDR_EXP 89
58752: PUSH
58753: LD_INT 1
58755: ST_TO_ADDR
// if p3 = 30 then
58756: LD_VAR 0 3
58760: PUSH
58761: LD_INT 30
58763: EQUAL
58764: IFFALSE 58774
// sExchange := true ;
58766: LD_ADDR_EXP 90
58770: PUSH
58771: LD_INT 1
58773: ST_TO_ADDR
// if p3 = 31 then
58774: LD_VAR 0 3
58778: PUSH
58779: LD_INT 31
58781: EQUAL
58782: IFFALSE 58792
// sFac := true ;
58784: LD_ADDR_EXP 91
58788: PUSH
58789: LD_INT 1
58791: ST_TO_ADDR
// if p3 = 32 then
58792: LD_VAR 0 3
58796: PUSH
58797: LD_INT 32
58799: EQUAL
58800: IFFALSE 58810
// sPower := true ;
58802: LD_ADDR_EXP 92
58806: PUSH
58807: LD_INT 1
58809: ST_TO_ADDR
// if p3 = 33 then
58810: LD_VAR 0 3
58814: PUSH
58815: LD_INT 33
58817: EQUAL
58818: IFFALSE 58828
// sRandom := true ;
58820: LD_ADDR_EXP 93
58824: PUSH
58825: LD_INT 1
58827: ST_TO_ADDR
// if p3 = 34 then
58828: LD_VAR 0 3
58832: PUSH
58833: LD_INT 34
58835: EQUAL
58836: IFFALSE 58846
// sShield := true ;
58838: LD_ADDR_EXP 94
58842: PUSH
58843: LD_INT 1
58845: ST_TO_ADDR
// if p3 = 35 then
58846: LD_VAR 0 3
58850: PUSH
58851: LD_INT 35
58853: EQUAL
58854: IFFALSE 58864
// sTime := true ;
58856: LD_ADDR_EXP 95
58860: PUSH
58861: LD_INT 1
58863: ST_TO_ADDR
// if p3 = 36 then
58864: LD_VAR 0 3
58868: PUSH
58869: LD_INT 36
58871: EQUAL
58872: IFFALSE 58882
// sTools := true ;
58874: LD_ADDR_EXP 96
58878: PUSH
58879: LD_INT 1
58881: ST_TO_ADDR
// if p3 = 101 then
58882: LD_VAR 0 3
58886: PUSH
58887: LD_INT 101
58889: EQUAL
58890: IFFALSE 58900
// sSold := true ;
58892: LD_ADDR_EXP 61
58896: PUSH
58897: LD_INT 1
58899: ST_TO_ADDR
// if p3 = 102 then
58900: LD_VAR 0 3
58904: PUSH
58905: LD_INT 102
58907: EQUAL
58908: IFFALSE 58918
// sDiff := true ;
58910: LD_ADDR_EXP 62
58914: PUSH
58915: LD_INT 1
58917: ST_TO_ADDR
// if p3 = 103 then
58918: LD_VAR 0 3
58922: PUSH
58923: LD_INT 103
58925: EQUAL
58926: IFFALSE 58936
// sFog := true ;
58928: LD_ADDR_EXP 65
58932: PUSH
58933: LD_INT 1
58935: ST_TO_ADDR
// if p3 = 104 then
58936: LD_VAR 0 3
58940: PUSH
58941: LD_INT 104
58943: EQUAL
58944: IFFALSE 58954
// sReset := true ;
58946: LD_ADDR_EXP 66
58950: PUSH
58951: LD_INT 1
58953: ST_TO_ADDR
// if p3 = 105 then
58954: LD_VAR 0 3
58958: PUSH
58959: LD_INT 105
58961: EQUAL
58962: IFFALSE 58972
// sSun := true ;
58964: LD_ADDR_EXP 67
58968: PUSH
58969: LD_INT 1
58971: ST_TO_ADDR
// if p3 = 106 then
58972: LD_VAR 0 3
58976: PUSH
58977: LD_INT 106
58979: EQUAL
58980: IFFALSE 58990
// sTiger := true ;
58982: LD_ADDR_EXP 63
58986: PUSH
58987: LD_INT 1
58989: ST_TO_ADDR
// if p3 = 107 then
58990: LD_VAR 0 3
58994: PUSH
58995: LD_INT 107
58997: EQUAL
58998: IFFALSE 59008
// sBomb := true ;
59000: LD_ADDR_EXP 64
59004: PUSH
59005: LD_INT 1
59007: ST_TO_ADDR
// if p3 = 108 then
59008: LD_VAR 0 3
59012: PUSH
59013: LD_INT 108
59015: EQUAL
59016: IFFALSE 59026
// sWound := true ;
59018: LD_ADDR_EXP 72
59022: PUSH
59023: LD_INT 1
59025: ST_TO_ADDR
// if p3 = 109 then
59026: LD_VAR 0 3
59030: PUSH
59031: LD_INT 109
59033: EQUAL
59034: IFFALSE 59044
// sBetray := true ;
59036: LD_ADDR_EXP 76
59040: PUSH
59041: LD_INT 1
59043: ST_TO_ADDR
// if p3 = 110 then
59044: LD_VAR 0 3
59048: PUSH
59049: LD_INT 110
59051: EQUAL
59052: IFFALSE 59062
// sContamin := true ;
59054: LD_ADDR_EXP 77
59058: PUSH
59059: LD_INT 1
59061: ST_TO_ADDR
// if p3 = 111 then
59062: LD_VAR 0 3
59066: PUSH
59067: LD_INT 111
59069: EQUAL
59070: IFFALSE 59080
// sOil := true ;
59072: LD_ADDR_EXP 79
59076: PUSH
59077: LD_INT 1
59079: ST_TO_ADDR
// if p3 = 112 then
59080: LD_VAR 0 3
59084: PUSH
59085: LD_INT 112
59087: EQUAL
59088: IFFALSE 59098
// sStu := true ;
59090: LD_ADDR_EXP 83
59094: PUSH
59095: LD_INT 1
59097: ST_TO_ADDR
// if p3 = 113 then
59098: LD_VAR 0 3
59102: PUSH
59103: LD_INT 113
59105: EQUAL
59106: IFFALSE 59116
// sBazooka := true ;
59108: LD_ADDR_EXP 86
59112: PUSH
59113: LD_INT 1
59115: ST_TO_ADDR
// if p3 = 114 then
59116: LD_VAR 0 3
59120: PUSH
59121: LD_INT 114
59123: EQUAL
59124: IFFALSE 59134
// sMortar := true ;
59126: LD_ADDR_EXP 87
59130: PUSH
59131: LD_INT 1
59133: ST_TO_ADDR
// if p3 = 115 then
59134: LD_VAR 0 3
59138: PUSH
59139: LD_INT 115
59141: EQUAL
59142: IFFALSE 59152
// sRanger := true ;
59144: LD_ADDR_EXP 97
59148: PUSH
59149: LD_INT 1
59151: ST_TO_ADDR
// end ; if p2 = 101 then
59152: LD_VAR 0 2
59156: PUSH
59157: LD_INT 101
59159: EQUAL
59160: IFFALSE 59288
// begin case p3 of 1 :
59162: LD_VAR 0 3
59166: PUSH
59167: LD_INT 1
59169: DOUBLE
59170: EQUAL
59171: IFTRUE 59175
59173: GO 59182
59175: POP
// hHackUnlimitedResources ; 2 :
59176: CALL 70325 0 0
59180: GO 59288
59182: LD_INT 2
59184: DOUBLE
59185: EQUAL
59186: IFTRUE 59190
59188: GO 59197
59190: POP
// hHackSetLevel10 ; 3 :
59191: CALL 70458 0 0
59195: GO 59288
59197: LD_INT 3
59199: DOUBLE
59200: EQUAL
59201: IFTRUE 59205
59203: GO 59212
59205: POP
// hHackSetLevel10YourUnits ; 4 :
59206: CALL 70543 0 0
59210: GO 59288
59212: LD_INT 4
59214: DOUBLE
59215: EQUAL
59216: IFTRUE 59220
59218: GO 59227
59220: POP
// hHackInvincible ; 5 :
59221: CALL 70991 0 0
59225: GO 59288
59227: LD_INT 5
59229: DOUBLE
59230: EQUAL
59231: IFTRUE 59235
59233: GO 59242
59235: POP
// hHackInvisible ; 6 :
59236: CALL 71102 0 0
59240: GO 59288
59242: LD_INT 6
59244: DOUBLE
59245: EQUAL
59246: IFTRUE 59250
59248: GO 59257
59250: POP
// hHackChangeYourSide ; 7 :
59251: CALL 71159 0 0
59255: GO 59288
59257: LD_INT 7
59259: DOUBLE
59260: EQUAL
59261: IFTRUE 59265
59263: GO 59272
59265: POP
// hHackChangeUnitSide ; 8 :
59266: CALL 71201 0 0
59270: GO 59288
59272: LD_INT 8
59274: DOUBLE
59275: EQUAL
59276: IFTRUE 59280
59278: GO 59287
59280: POP
// hHackFog ; end ;
59281: CALL 71302 0 0
59285: GO 59288
59287: POP
// end ; end ;
59288: LD_VAR 0 7
59292: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
59293: GO 59295
59295: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
59296: LD_STRING initStreamRollete();
59298: PPUSH
59299: CALL_OW 559
// InitStreamMode ;
59303: CALL 59312 0 0
// DefineStreamItems ( ) ;
59307: CALL 59752 0 0
// end ;
59311: END
// function InitStreamMode ; begin
59312: LD_INT 0
59314: PPUSH
// streamModeActive := false ;
59315: LD_ADDR_EXP 44
59319: PUSH
59320: LD_INT 0
59322: ST_TO_ADDR
// normalCounter := 36 ;
59323: LD_ADDR_EXP 45
59327: PUSH
59328: LD_INT 36
59330: ST_TO_ADDR
// hardcoreCounter := 16 ;
59331: LD_ADDR_EXP 46
59335: PUSH
59336: LD_INT 16
59338: ST_TO_ADDR
// sRocket := false ;
59339: LD_ADDR_EXP 49
59343: PUSH
59344: LD_INT 0
59346: ST_TO_ADDR
// sSpeed := false ;
59347: LD_ADDR_EXP 48
59351: PUSH
59352: LD_INT 0
59354: ST_TO_ADDR
// sEngine := false ;
59355: LD_ADDR_EXP 50
59359: PUSH
59360: LD_INT 0
59362: ST_TO_ADDR
// sSpec := false ;
59363: LD_ADDR_EXP 47
59367: PUSH
59368: LD_INT 0
59370: ST_TO_ADDR
// sLevel := false ;
59371: LD_ADDR_EXP 51
59375: PUSH
59376: LD_INT 0
59378: ST_TO_ADDR
// sArmoury := false ;
59379: LD_ADDR_EXP 52
59383: PUSH
59384: LD_INT 0
59386: ST_TO_ADDR
// sRadar := false ;
59387: LD_ADDR_EXP 53
59391: PUSH
59392: LD_INT 0
59394: ST_TO_ADDR
// sBunker := false ;
59395: LD_ADDR_EXP 54
59399: PUSH
59400: LD_INT 0
59402: ST_TO_ADDR
// sHack := false ;
59403: LD_ADDR_EXP 55
59407: PUSH
59408: LD_INT 0
59410: ST_TO_ADDR
// sFire := false ;
59411: LD_ADDR_EXP 56
59415: PUSH
59416: LD_INT 0
59418: ST_TO_ADDR
// sRefresh := false ;
59419: LD_ADDR_EXP 57
59423: PUSH
59424: LD_INT 0
59426: ST_TO_ADDR
// sExp := false ;
59427: LD_ADDR_EXP 58
59431: PUSH
59432: LD_INT 0
59434: ST_TO_ADDR
// sDepot := false ;
59435: LD_ADDR_EXP 59
59439: PUSH
59440: LD_INT 0
59442: ST_TO_ADDR
// sFlag := false ;
59443: LD_ADDR_EXP 60
59447: PUSH
59448: LD_INT 0
59450: ST_TO_ADDR
// sKamikadze := false ;
59451: LD_ADDR_EXP 68
59455: PUSH
59456: LD_INT 0
59458: ST_TO_ADDR
// sTroll := false ;
59459: LD_ADDR_EXP 69
59463: PUSH
59464: LD_INT 0
59466: ST_TO_ADDR
// sSlow := false ;
59467: LD_ADDR_EXP 70
59471: PUSH
59472: LD_INT 0
59474: ST_TO_ADDR
// sLack := false ;
59475: LD_ADDR_EXP 71
59479: PUSH
59480: LD_INT 0
59482: ST_TO_ADDR
// sTank := false ;
59483: LD_ADDR_EXP 73
59487: PUSH
59488: LD_INT 0
59490: ST_TO_ADDR
// sRemote := false ;
59491: LD_ADDR_EXP 74
59495: PUSH
59496: LD_INT 0
59498: ST_TO_ADDR
// sPowell := false ;
59499: LD_ADDR_EXP 75
59503: PUSH
59504: LD_INT 0
59506: ST_TO_ADDR
// sTeleport := false ;
59507: LD_ADDR_EXP 78
59511: PUSH
59512: LD_INT 0
59514: ST_TO_ADDR
// sOilTower := false ;
59515: LD_ADDR_EXP 80
59519: PUSH
59520: LD_INT 0
59522: ST_TO_ADDR
// sShovel := false ;
59523: LD_ADDR_EXP 81
59527: PUSH
59528: LD_INT 0
59530: ST_TO_ADDR
// sSheik := false ;
59531: LD_ADDR_EXP 82
59535: PUSH
59536: LD_INT 0
59538: ST_TO_ADDR
// sEarthquake := false ;
59539: LD_ADDR_EXP 84
59543: PUSH
59544: LD_INT 0
59546: ST_TO_ADDR
// sAI := false ;
59547: LD_ADDR_EXP 85
59551: PUSH
59552: LD_INT 0
59554: ST_TO_ADDR
// sCargo := false ;
59555: LD_ADDR_EXP 88
59559: PUSH
59560: LD_INT 0
59562: ST_TO_ADDR
// sDLaser := false ;
59563: LD_ADDR_EXP 89
59567: PUSH
59568: LD_INT 0
59570: ST_TO_ADDR
// sExchange := false ;
59571: LD_ADDR_EXP 90
59575: PUSH
59576: LD_INT 0
59578: ST_TO_ADDR
// sFac := false ;
59579: LD_ADDR_EXP 91
59583: PUSH
59584: LD_INT 0
59586: ST_TO_ADDR
// sPower := false ;
59587: LD_ADDR_EXP 92
59591: PUSH
59592: LD_INT 0
59594: ST_TO_ADDR
// sRandom := false ;
59595: LD_ADDR_EXP 93
59599: PUSH
59600: LD_INT 0
59602: ST_TO_ADDR
// sShield := false ;
59603: LD_ADDR_EXP 94
59607: PUSH
59608: LD_INT 0
59610: ST_TO_ADDR
// sTime := false ;
59611: LD_ADDR_EXP 95
59615: PUSH
59616: LD_INT 0
59618: ST_TO_ADDR
// sTools := false ;
59619: LD_ADDR_EXP 96
59623: PUSH
59624: LD_INT 0
59626: ST_TO_ADDR
// sSold := false ;
59627: LD_ADDR_EXP 61
59631: PUSH
59632: LD_INT 0
59634: ST_TO_ADDR
// sDiff := false ;
59635: LD_ADDR_EXP 62
59639: PUSH
59640: LD_INT 0
59642: ST_TO_ADDR
// sFog := false ;
59643: LD_ADDR_EXP 65
59647: PUSH
59648: LD_INT 0
59650: ST_TO_ADDR
// sReset := false ;
59651: LD_ADDR_EXP 66
59655: PUSH
59656: LD_INT 0
59658: ST_TO_ADDR
// sSun := false ;
59659: LD_ADDR_EXP 67
59663: PUSH
59664: LD_INT 0
59666: ST_TO_ADDR
// sTiger := false ;
59667: LD_ADDR_EXP 63
59671: PUSH
59672: LD_INT 0
59674: ST_TO_ADDR
// sBomb := false ;
59675: LD_ADDR_EXP 64
59679: PUSH
59680: LD_INT 0
59682: ST_TO_ADDR
// sWound := false ;
59683: LD_ADDR_EXP 72
59687: PUSH
59688: LD_INT 0
59690: ST_TO_ADDR
// sBetray := false ;
59691: LD_ADDR_EXP 76
59695: PUSH
59696: LD_INT 0
59698: ST_TO_ADDR
// sContamin := false ;
59699: LD_ADDR_EXP 77
59703: PUSH
59704: LD_INT 0
59706: ST_TO_ADDR
// sOil := false ;
59707: LD_ADDR_EXP 79
59711: PUSH
59712: LD_INT 0
59714: ST_TO_ADDR
// sStu := false ;
59715: LD_ADDR_EXP 83
59719: PUSH
59720: LD_INT 0
59722: ST_TO_ADDR
// sBazooka := false ;
59723: LD_ADDR_EXP 86
59727: PUSH
59728: LD_INT 0
59730: ST_TO_ADDR
// sMortar := false ;
59731: LD_ADDR_EXP 87
59735: PUSH
59736: LD_INT 0
59738: ST_TO_ADDR
// sRanger := false ;
59739: LD_ADDR_EXP 97
59743: PUSH
59744: LD_INT 0
59746: ST_TO_ADDR
// end ;
59747: LD_VAR 0 1
59751: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
59752: LD_INT 0
59754: PPUSH
59755: PPUSH
59756: PPUSH
59757: PPUSH
59758: PPUSH
// result := [ ] ;
59759: LD_ADDR_VAR 0 1
59763: PUSH
59764: EMPTY
59765: ST_TO_ADDR
// if campaign_id = 1 then
59766: LD_OWVAR 69
59770: PUSH
59771: LD_INT 1
59773: EQUAL
59774: IFFALSE 62712
// begin case mission_number of 1 :
59776: LD_OWVAR 70
59780: PUSH
59781: LD_INT 1
59783: DOUBLE
59784: EQUAL
59785: IFTRUE 59789
59787: GO 59853
59789: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
59790: LD_ADDR_VAR 0 1
59794: PUSH
59795: LD_INT 2
59797: PUSH
59798: LD_INT 4
59800: PUSH
59801: LD_INT 11
59803: PUSH
59804: LD_INT 12
59806: PUSH
59807: LD_INT 15
59809: PUSH
59810: LD_INT 16
59812: PUSH
59813: LD_INT 22
59815: PUSH
59816: LD_INT 23
59818: PUSH
59819: LD_INT 26
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 101
59835: PUSH
59836: LD_INT 102
59838: PUSH
59839: LD_INT 106
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: LIST
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: ST_TO_ADDR
59851: GO 62710
59853: LD_INT 2
59855: DOUBLE
59856: EQUAL
59857: IFTRUE 59861
59859: GO 59933
59861: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
59862: LD_ADDR_VAR 0 1
59866: PUSH
59867: LD_INT 2
59869: PUSH
59870: LD_INT 4
59872: PUSH
59873: LD_INT 11
59875: PUSH
59876: LD_INT 12
59878: PUSH
59879: LD_INT 15
59881: PUSH
59882: LD_INT 16
59884: PUSH
59885: LD_INT 22
59887: PUSH
59888: LD_INT 23
59890: PUSH
59891: LD_INT 26
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 101
59907: PUSH
59908: LD_INT 102
59910: PUSH
59911: LD_INT 105
59913: PUSH
59914: LD_INT 106
59916: PUSH
59917: LD_INT 108
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: ST_TO_ADDR
59931: GO 62710
59933: LD_INT 3
59935: DOUBLE
59936: EQUAL
59937: IFTRUE 59941
59939: GO 60017
59941: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
59942: LD_ADDR_VAR 0 1
59946: PUSH
59947: LD_INT 2
59949: PUSH
59950: LD_INT 4
59952: PUSH
59953: LD_INT 5
59955: PUSH
59956: LD_INT 11
59958: PUSH
59959: LD_INT 12
59961: PUSH
59962: LD_INT 15
59964: PUSH
59965: LD_INT 16
59967: PUSH
59968: LD_INT 22
59970: PUSH
59971: LD_INT 26
59973: PUSH
59974: LD_INT 36
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 101
59991: PUSH
59992: LD_INT 102
59994: PUSH
59995: LD_INT 105
59997: PUSH
59998: LD_INT 106
60000: PUSH
60001: LD_INT 108
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: ST_TO_ADDR
60015: GO 62710
60017: LD_INT 4
60019: DOUBLE
60020: EQUAL
60021: IFTRUE 60025
60023: GO 60109
60025: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
60026: LD_ADDR_VAR 0 1
60030: PUSH
60031: LD_INT 2
60033: PUSH
60034: LD_INT 4
60036: PUSH
60037: LD_INT 5
60039: PUSH
60040: LD_INT 8
60042: PUSH
60043: LD_INT 11
60045: PUSH
60046: LD_INT 12
60048: PUSH
60049: LD_INT 15
60051: PUSH
60052: LD_INT 16
60054: PUSH
60055: LD_INT 22
60057: PUSH
60058: LD_INT 23
60060: PUSH
60061: LD_INT 26
60063: PUSH
60064: LD_INT 36
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 101
60083: PUSH
60084: LD_INT 102
60086: PUSH
60087: LD_INT 105
60089: PUSH
60090: LD_INT 106
60092: PUSH
60093: LD_INT 108
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: ST_TO_ADDR
60107: GO 62710
60109: LD_INT 5
60111: DOUBLE
60112: EQUAL
60113: IFTRUE 60117
60115: GO 60217
60117: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
60118: LD_ADDR_VAR 0 1
60122: PUSH
60123: LD_INT 2
60125: PUSH
60126: LD_INT 4
60128: PUSH
60129: LD_INT 5
60131: PUSH
60132: LD_INT 6
60134: PUSH
60135: LD_INT 8
60137: PUSH
60138: LD_INT 11
60140: PUSH
60141: LD_INT 12
60143: PUSH
60144: LD_INT 15
60146: PUSH
60147: LD_INT 16
60149: PUSH
60150: LD_INT 22
60152: PUSH
60153: LD_INT 23
60155: PUSH
60156: LD_INT 25
60158: PUSH
60159: LD_INT 26
60161: PUSH
60162: LD_INT 36
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 101
60183: PUSH
60184: LD_INT 102
60186: PUSH
60187: LD_INT 105
60189: PUSH
60190: LD_INT 106
60192: PUSH
60193: LD_INT 108
60195: PUSH
60196: LD_INT 109
60198: PUSH
60199: LD_INT 112
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: ST_TO_ADDR
60215: GO 62710
60217: LD_INT 6
60219: DOUBLE
60220: EQUAL
60221: IFTRUE 60225
60223: GO 60345
60225: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
60226: LD_ADDR_VAR 0 1
60230: PUSH
60231: LD_INT 2
60233: PUSH
60234: LD_INT 4
60236: PUSH
60237: LD_INT 5
60239: PUSH
60240: LD_INT 6
60242: PUSH
60243: LD_INT 8
60245: PUSH
60246: LD_INT 11
60248: PUSH
60249: LD_INT 12
60251: PUSH
60252: LD_INT 15
60254: PUSH
60255: LD_INT 16
60257: PUSH
60258: LD_INT 20
60260: PUSH
60261: LD_INT 21
60263: PUSH
60264: LD_INT 22
60266: PUSH
60267: LD_INT 23
60269: PUSH
60270: LD_INT 25
60272: PUSH
60273: LD_INT 26
60275: PUSH
60276: LD_INT 30
60278: PUSH
60279: LD_INT 31
60281: PUSH
60282: LD_INT 32
60284: PUSH
60285: LD_INT 36
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 101
60311: PUSH
60312: LD_INT 102
60314: PUSH
60315: LD_INT 105
60317: PUSH
60318: LD_INT 106
60320: PUSH
60321: LD_INT 108
60323: PUSH
60324: LD_INT 109
60326: PUSH
60327: LD_INT 112
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: ST_TO_ADDR
60343: GO 62710
60345: LD_INT 7
60347: DOUBLE
60348: EQUAL
60349: IFTRUE 60353
60351: GO 60453
60353: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
60354: LD_ADDR_VAR 0 1
60358: PUSH
60359: LD_INT 2
60361: PUSH
60362: LD_INT 4
60364: PUSH
60365: LD_INT 5
60367: PUSH
60368: LD_INT 7
60370: PUSH
60371: LD_INT 11
60373: PUSH
60374: LD_INT 12
60376: PUSH
60377: LD_INT 15
60379: PUSH
60380: LD_INT 16
60382: PUSH
60383: LD_INT 20
60385: PUSH
60386: LD_INT 21
60388: PUSH
60389: LD_INT 22
60391: PUSH
60392: LD_INT 23
60394: PUSH
60395: LD_INT 25
60397: PUSH
60398: LD_INT 26
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 101
60419: PUSH
60420: LD_INT 102
60422: PUSH
60423: LD_INT 103
60425: PUSH
60426: LD_INT 105
60428: PUSH
60429: LD_INT 106
60431: PUSH
60432: LD_INT 108
60434: PUSH
60435: LD_INT 112
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: ST_TO_ADDR
60451: GO 62710
60453: LD_INT 8
60455: DOUBLE
60456: EQUAL
60457: IFTRUE 60461
60459: GO 60589
60461: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
60462: LD_ADDR_VAR 0 1
60466: PUSH
60467: LD_INT 2
60469: PUSH
60470: LD_INT 4
60472: PUSH
60473: LD_INT 5
60475: PUSH
60476: LD_INT 6
60478: PUSH
60479: LD_INT 7
60481: PUSH
60482: LD_INT 8
60484: PUSH
60485: LD_INT 11
60487: PUSH
60488: LD_INT 12
60490: PUSH
60491: LD_INT 15
60493: PUSH
60494: LD_INT 16
60496: PUSH
60497: LD_INT 20
60499: PUSH
60500: LD_INT 21
60502: PUSH
60503: LD_INT 22
60505: PUSH
60506: LD_INT 23
60508: PUSH
60509: LD_INT 25
60511: PUSH
60512: LD_INT 26
60514: PUSH
60515: LD_INT 30
60517: PUSH
60518: LD_INT 31
60520: PUSH
60521: LD_INT 32
60523: PUSH
60524: LD_INT 36
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 101
60551: PUSH
60552: LD_INT 102
60554: PUSH
60555: LD_INT 103
60557: PUSH
60558: LD_INT 105
60560: PUSH
60561: LD_INT 106
60563: PUSH
60564: LD_INT 108
60566: PUSH
60567: LD_INT 109
60569: PUSH
60570: LD_INT 112
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: ST_TO_ADDR
60587: GO 62710
60589: LD_INT 9
60591: DOUBLE
60592: EQUAL
60593: IFTRUE 60597
60595: GO 60733
60597: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
60598: LD_ADDR_VAR 0 1
60602: PUSH
60603: LD_INT 2
60605: PUSH
60606: LD_INT 4
60608: PUSH
60609: LD_INT 5
60611: PUSH
60612: LD_INT 6
60614: PUSH
60615: LD_INT 7
60617: PUSH
60618: LD_INT 8
60620: PUSH
60621: LD_INT 11
60623: PUSH
60624: LD_INT 12
60626: PUSH
60627: LD_INT 15
60629: PUSH
60630: LD_INT 16
60632: PUSH
60633: LD_INT 20
60635: PUSH
60636: LD_INT 21
60638: PUSH
60639: LD_INT 22
60641: PUSH
60642: LD_INT 23
60644: PUSH
60645: LD_INT 25
60647: PUSH
60648: LD_INT 26
60650: PUSH
60651: LD_INT 28
60653: PUSH
60654: LD_INT 30
60656: PUSH
60657: LD_INT 31
60659: PUSH
60660: LD_INT 32
60662: PUSH
60663: LD_INT 36
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 101
60691: PUSH
60692: LD_INT 102
60694: PUSH
60695: LD_INT 103
60697: PUSH
60698: LD_INT 105
60700: PUSH
60701: LD_INT 106
60703: PUSH
60704: LD_INT 108
60706: PUSH
60707: LD_INT 109
60709: PUSH
60710: LD_INT 112
60712: PUSH
60713: LD_INT 114
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: ST_TO_ADDR
60731: GO 62710
60733: LD_INT 10
60735: DOUBLE
60736: EQUAL
60737: IFTRUE 60741
60739: GO 60925
60741: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
60742: LD_ADDR_VAR 0 1
60746: PUSH
60747: LD_INT 2
60749: PUSH
60750: LD_INT 4
60752: PUSH
60753: LD_INT 5
60755: PUSH
60756: LD_INT 6
60758: PUSH
60759: LD_INT 7
60761: PUSH
60762: LD_INT 8
60764: PUSH
60765: LD_INT 9
60767: PUSH
60768: LD_INT 10
60770: PUSH
60771: LD_INT 11
60773: PUSH
60774: LD_INT 12
60776: PUSH
60777: LD_INT 13
60779: PUSH
60780: LD_INT 14
60782: PUSH
60783: LD_INT 15
60785: PUSH
60786: LD_INT 16
60788: PUSH
60789: LD_INT 17
60791: PUSH
60792: LD_INT 18
60794: PUSH
60795: LD_INT 19
60797: PUSH
60798: LD_INT 20
60800: PUSH
60801: LD_INT 21
60803: PUSH
60804: LD_INT 22
60806: PUSH
60807: LD_INT 23
60809: PUSH
60810: LD_INT 24
60812: PUSH
60813: LD_INT 25
60815: PUSH
60816: LD_INT 26
60818: PUSH
60819: LD_INT 28
60821: PUSH
60822: LD_INT 30
60824: PUSH
60825: LD_INT 31
60827: PUSH
60828: LD_INT 32
60830: PUSH
60831: LD_INT 36
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 101
60867: PUSH
60868: LD_INT 102
60870: PUSH
60871: LD_INT 103
60873: PUSH
60874: LD_INT 104
60876: PUSH
60877: LD_INT 105
60879: PUSH
60880: LD_INT 106
60882: PUSH
60883: LD_INT 107
60885: PUSH
60886: LD_INT 108
60888: PUSH
60889: LD_INT 109
60891: PUSH
60892: LD_INT 110
60894: PUSH
60895: LD_INT 111
60897: PUSH
60898: LD_INT 112
60900: PUSH
60901: LD_INT 114
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: ST_TO_ADDR
60923: GO 62710
60925: LD_INT 11
60927: DOUBLE
60928: EQUAL
60929: IFTRUE 60933
60931: GO 61125
60933: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
60934: LD_ADDR_VAR 0 1
60938: PUSH
60939: LD_INT 2
60941: PUSH
60942: LD_INT 3
60944: PUSH
60945: LD_INT 4
60947: PUSH
60948: LD_INT 5
60950: PUSH
60951: LD_INT 6
60953: PUSH
60954: LD_INT 7
60956: PUSH
60957: LD_INT 8
60959: PUSH
60960: LD_INT 9
60962: PUSH
60963: LD_INT 10
60965: PUSH
60966: LD_INT 11
60968: PUSH
60969: LD_INT 12
60971: PUSH
60972: LD_INT 13
60974: PUSH
60975: LD_INT 14
60977: PUSH
60978: LD_INT 15
60980: PUSH
60981: LD_INT 16
60983: PUSH
60984: LD_INT 17
60986: PUSH
60987: LD_INT 18
60989: PUSH
60990: LD_INT 19
60992: PUSH
60993: LD_INT 20
60995: PUSH
60996: LD_INT 21
60998: PUSH
60999: LD_INT 22
61001: PUSH
61002: LD_INT 23
61004: PUSH
61005: LD_INT 24
61007: PUSH
61008: LD_INT 25
61010: PUSH
61011: LD_INT 26
61013: PUSH
61014: LD_INT 28
61016: PUSH
61017: LD_INT 30
61019: PUSH
61020: LD_INT 31
61022: PUSH
61023: LD_INT 32
61025: PUSH
61026: LD_INT 34
61028: PUSH
61029: LD_INT 36
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 101
61067: PUSH
61068: LD_INT 102
61070: PUSH
61071: LD_INT 103
61073: PUSH
61074: LD_INT 104
61076: PUSH
61077: LD_INT 105
61079: PUSH
61080: LD_INT 106
61082: PUSH
61083: LD_INT 107
61085: PUSH
61086: LD_INT 108
61088: PUSH
61089: LD_INT 109
61091: PUSH
61092: LD_INT 110
61094: PUSH
61095: LD_INT 111
61097: PUSH
61098: LD_INT 112
61100: PUSH
61101: LD_INT 114
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: ST_TO_ADDR
61123: GO 62710
61125: LD_INT 12
61127: DOUBLE
61128: EQUAL
61129: IFTRUE 61133
61131: GO 61341
61133: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
61134: LD_ADDR_VAR 0 1
61138: PUSH
61139: LD_INT 1
61141: PUSH
61142: LD_INT 2
61144: PUSH
61145: LD_INT 3
61147: PUSH
61148: LD_INT 4
61150: PUSH
61151: LD_INT 5
61153: PUSH
61154: LD_INT 6
61156: PUSH
61157: LD_INT 7
61159: PUSH
61160: LD_INT 8
61162: PUSH
61163: LD_INT 9
61165: PUSH
61166: LD_INT 10
61168: PUSH
61169: LD_INT 11
61171: PUSH
61172: LD_INT 12
61174: PUSH
61175: LD_INT 13
61177: PUSH
61178: LD_INT 14
61180: PUSH
61181: LD_INT 15
61183: PUSH
61184: LD_INT 16
61186: PUSH
61187: LD_INT 17
61189: PUSH
61190: LD_INT 18
61192: PUSH
61193: LD_INT 19
61195: PUSH
61196: LD_INT 20
61198: PUSH
61199: LD_INT 21
61201: PUSH
61202: LD_INT 22
61204: PUSH
61205: LD_INT 23
61207: PUSH
61208: LD_INT 24
61210: PUSH
61211: LD_INT 25
61213: PUSH
61214: LD_INT 26
61216: PUSH
61217: LD_INT 27
61219: PUSH
61220: LD_INT 28
61222: PUSH
61223: LD_INT 30
61225: PUSH
61226: LD_INT 31
61228: PUSH
61229: LD_INT 32
61231: PUSH
61232: LD_INT 33
61234: PUSH
61235: LD_INT 34
61237: PUSH
61238: LD_INT 36
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 101
61279: PUSH
61280: LD_INT 102
61282: PUSH
61283: LD_INT 103
61285: PUSH
61286: LD_INT 104
61288: PUSH
61289: LD_INT 105
61291: PUSH
61292: LD_INT 106
61294: PUSH
61295: LD_INT 107
61297: PUSH
61298: LD_INT 108
61300: PUSH
61301: LD_INT 109
61303: PUSH
61304: LD_INT 110
61306: PUSH
61307: LD_INT 111
61309: PUSH
61310: LD_INT 112
61312: PUSH
61313: LD_INT 113
61315: PUSH
61316: LD_INT 114
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: ST_TO_ADDR
61339: GO 62710
61341: LD_INT 13
61343: DOUBLE
61344: EQUAL
61345: IFTRUE 61349
61347: GO 61545
61349: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
61350: LD_ADDR_VAR 0 1
61354: PUSH
61355: LD_INT 1
61357: PUSH
61358: LD_INT 2
61360: PUSH
61361: LD_INT 3
61363: PUSH
61364: LD_INT 4
61366: PUSH
61367: LD_INT 5
61369: PUSH
61370: LD_INT 8
61372: PUSH
61373: LD_INT 9
61375: PUSH
61376: LD_INT 10
61378: PUSH
61379: LD_INT 11
61381: PUSH
61382: LD_INT 12
61384: PUSH
61385: LD_INT 14
61387: PUSH
61388: LD_INT 15
61390: PUSH
61391: LD_INT 16
61393: PUSH
61394: LD_INT 17
61396: PUSH
61397: LD_INT 18
61399: PUSH
61400: LD_INT 19
61402: PUSH
61403: LD_INT 20
61405: PUSH
61406: LD_INT 21
61408: PUSH
61409: LD_INT 22
61411: PUSH
61412: LD_INT 23
61414: PUSH
61415: LD_INT 24
61417: PUSH
61418: LD_INT 25
61420: PUSH
61421: LD_INT 26
61423: PUSH
61424: LD_INT 27
61426: PUSH
61427: LD_INT 28
61429: PUSH
61430: LD_INT 30
61432: PUSH
61433: LD_INT 31
61435: PUSH
61436: LD_INT 32
61438: PUSH
61439: LD_INT 33
61441: PUSH
61442: LD_INT 34
61444: PUSH
61445: LD_INT 36
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 101
61483: PUSH
61484: LD_INT 102
61486: PUSH
61487: LD_INT 103
61489: PUSH
61490: LD_INT 104
61492: PUSH
61493: LD_INT 105
61495: PUSH
61496: LD_INT 106
61498: PUSH
61499: LD_INT 107
61501: PUSH
61502: LD_INT 108
61504: PUSH
61505: LD_INT 109
61507: PUSH
61508: LD_INT 110
61510: PUSH
61511: LD_INT 111
61513: PUSH
61514: LD_INT 112
61516: PUSH
61517: LD_INT 113
61519: PUSH
61520: LD_INT 114
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: ST_TO_ADDR
61543: GO 62710
61545: LD_INT 14
61547: DOUBLE
61548: EQUAL
61549: IFTRUE 61553
61551: GO 61765
61553: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
61554: LD_ADDR_VAR 0 1
61558: PUSH
61559: LD_INT 1
61561: PUSH
61562: LD_INT 2
61564: PUSH
61565: LD_INT 3
61567: PUSH
61568: LD_INT 4
61570: PUSH
61571: LD_INT 5
61573: PUSH
61574: LD_INT 6
61576: PUSH
61577: LD_INT 7
61579: PUSH
61580: LD_INT 8
61582: PUSH
61583: LD_INT 9
61585: PUSH
61586: LD_INT 10
61588: PUSH
61589: LD_INT 11
61591: PUSH
61592: LD_INT 12
61594: PUSH
61595: LD_INT 13
61597: PUSH
61598: LD_INT 14
61600: PUSH
61601: LD_INT 15
61603: PUSH
61604: LD_INT 16
61606: PUSH
61607: LD_INT 17
61609: PUSH
61610: LD_INT 18
61612: PUSH
61613: LD_INT 19
61615: PUSH
61616: LD_INT 20
61618: PUSH
61619: LD_INT 21
61621: PUSH
61622: LD_INT 22
61624: PUSH
61625: LD_INT 23
61627: PUSH
61628: LD_INT 24
61630: PUSH
61631: LD_INT 25
61633: PUSH
61634: LD_INT 26
61636: PUSH
61637: LD_INT 27
61639: PUSH
61640: LD_INT 28
61642: PUSH
61643: LD_INT 29
61645: PUSH
61646: LD_INT 30
61648: PUSH
61649: LD_INT 31
61651: PUSH
61652: LD_INT 32
61654: PUSH
61655: LD_INT 33
61657: PUSH
61658: LD_INT 34
61660: PUSH
61661: LD_INT 36
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 101
61703: PUSH
61704: LD_INT 102
61706: PUSH
61707: LD_INT 103
61709: PUSH
61710: LD_INT 104
61712: PUSH
61713: LD_INT 105
61715: PUSH
61716: LD_INT 106
61718: PUSH
61719: LD_INT 107
61721: PUSH
61722: LD_INT 108
61724: PUSH
61725: LD_INT 109
61727: PUSH
61728: LD_INT 110
61730: PUSH
61731: LD_INT 111
61733: PUSH
61734: LD_INT 112
61736: PUSH
61737: LD_INT 113
61739: PUSH
61740: LD_INT 114
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: ST_TO_ADDR
61763: GO 62710
61765: LD_INT 15
61767: DOUBLE
61768: EQUAL
61769: IFTRUE 61773
61771: GO 61985
61773: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
61774: LD_ADDR_VAR 0 1
61778: PUSH
61779: LD_INT 1
61781: PUSH
61782: LD_INT 2
61784: PUSH
61785: LD_INT 3
61787: PUSH
61788: LD_INT 4
61790: PUSH
61791: LD_INT 5
61793: PUSH
61794: LD_INT 6
61796: PUSH
61797: LD_INT 7
61799: PUSH
61800: LD_INT 8
61802: PUSH
61803: LD_INT 9
61805: PUSH
61806: LD_INT 10
61808: PUSH
61809: LD_INT 11
61811: PUSH
61812: LD_INT 12
61814: PUSH
61815: LD_INT 13
61817: PUSH
61818: LD_INT 14
61820: PUSH
61821: LD_INT 15
61823: PUSH
61824: LD_INT 16
61826: PUSH
61827: LD_INT 17
61829: PUSH
61830: LD_INT 18
61832: PUSH
61833: LD_INT 19
61835: PUSH
61836: LD_INT 20
61838: PUSH
61839: LD_INT 21
61841: PUSH
61842: LD_INT 22
61844: PUSH
61845: LD_INT 23
61847: PUSH
61848: LD_INT 24
61850: PUSH
61851: LD_INT 25
61853: PUSH
61854: LD_INT 26
61856: PUSH
61857: LD_INT 27
61859: PUSH
61860: LD_INT 28
61862: PUSH
61863: LD_INT 29
61865: PUSH
61866: LD_INT 30
61868: PUSH
61869: LD_INT 31
61871: PUSH
61872: LD_INT 32
61874: PUSH
61875: LD_INT 33
61877: PUSH
61878: LD_INT 34
61880: PUSH
61881: LD_INT 36
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 101
61923: PUSH
61924: LD_INT 102
61926: PUSH
61927: LD_INT 103
61929: PUSH
61930: LD_INT 104
61932: PUSH
61933: LD_INT 105
61935: PUSH
61936: LD_INT 106
61938: PUSH
61939: LD_INT 107
61941: PUSH
61942: LD_INT 108
61944: PUSH
61945: LD_INT 109
61947: PUSH
61948: LD_INT 110
61950: PUSH
61951: LD_INT 111
61953: PUSH
61954: LD_INT 112
61956: PUSH
61957: LD_INT 113
61959: PUSH
61960: LD_INT 114
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: ST_TO_ADDR
61983: GO 62710
61985: LD_INT 16
61987: DOUBLE
61988: EQUAL
61989: IFTRUE 61993
61991: GO 62117
61993: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
61994: LD_ADDR_VAR 0 1
61998: PUSH
61999: LD_INT 2
62001: PUSH
62002: LD_INT 4
62004: PUSH
62005: LD_INT 5
62007: PUSH
62008: LD_INT 7
62010: PUSH
62011: LD_INT 11
62013: PUSH
62014: LD_INT 12
62016: PUSH
62017: LD_INT 15
62019: PUSH
62020: LD_INT 16
62022: PUSH
62023: LD_INT 20
62025: PUSH
62026: LD_INT 21
62028: PUSH
62029: LD_INT 22
62031: PUSH
62032: LD_INT 23
62034: PUSH
62035: LD_INT 25
62037: PUSH
62038: LD_INT 26
62040: PUSH
62041: LD_INT 30
62043: PUSH
62044: LD_INT 31
62046: PUSH
62047: LD_INT 32
62049: PUSH
62050: LD_INT 33
62052: PUSH
62053: LD_INT 34
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 101
62079: PUSH
62080: LD_INT 102
62082: PUSH
62083: LD_INT 103
62085: PUSH
62086: LD_INT 106
62088: PUSH
62089: LD_INT 108
62091: PUSH
62092: LD_INT 112
62094: PUSH
62095: LD_INT 113
62097: PUSH
62098: LD_INT 114
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: ST_TO_ADDR
62115: GO 62710
62117: LD_INT 17
62119: DOUBLE
62120: EQUAL
62121: IFTRUE 62125
62123: GO 62337
62125: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
62126: LD_ADDR_VAR 0 1
62130: PUSH
62131: LD_INT 1
62133: PUSH
62134: LD_INT 2
62136: PUSH
62137: LD_INT 3
62139: PUSH
62140: LD_INT 4
62142: PUSH
62143: LD_INT 5
62145: PUSH
62146: LD_INT 6
62148: PUSH
62149: LD_INT 7
62151: PUSH
62152: LD_INT 8
62154: PUSH
62155: LD_INT 9
62157: PUSH
62158: LD_INT 10
62160: PUSH
62161: LD_INT 11
62163: PUSH
62164: LD_INT 12
62166: PUSH
62167: LD_INT 13
62169: PUSH
62170: LD_INT 14
62172: PUSH
62173: LD_INT 15
62175: PUSH
62176: LD_INT 16
62178: PUSH
62179: LD_INT 17
62181: PUSH
62182: LD_INT 18
62184: PUSH
62185: LD_INT 19
62187: PUSH
62188: LD_INT 20
62190: PUSH
62191: LD_INT 21
62193: PUSH
62194: LD_INT 22
62196: PUSH
62197: LD_INT 23
62199: PUSH
62200: LD_INT 24
62202: PUSH
62203: LD_INT 25
62205: PUSH
62206: LD_INT 26
62208: PUSH
62209: LD_INT 27
62211: PUSH
62212: LD_INT 28
62214: PUSH
62215: LD_INT 29
62217: PUSH
62218: LD_INT 30
62220: PUSH
62221: LD_INT 31
62223: PUSH
62224: LD_INT 32
62226: PUSH
62227: LD_INT 33
62229: PUSH
62230: LD_INT 34
62232: PUSH
62233: LD_INT 36
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 101
62275: PUSH
62276: LD_INT 102
62278: PUSH
62279: LD_INT 103
62281: PUSH
62282: LD_INT 104
62284: PUSH
62285: LD_INT 105
62287: PUSH
62288: LD_INT 106
62290: PUSH
62291: LD_INT 107
62293: PUSH
62294: LD_INT 108
62296: PUSH
62297: LD_INT 109
62299: PUSH
62300: LD_INT 110
62302: PUSH
62303: LD_INT 111
62305: PUSH
62306: LD_INT 112
62308: PUSH
62309: LD_INT 113
62311: PUSH
62312: LD_INT 114
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: ST_TO_ADDR
62335: GO 62710
62337: LD_INT 18
62339: DOUBLE
62340: EQUAL
62341: IFTRUE 62345
62343: GO 62481
62345: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
62346: LD_ADDR_VAR 0 1
62350: PUSH
62351: LD_INT 2
62353: PUSH
62354: LD_INT 4
62356: PUSH
62357: LD_INT 5
62359: PUSH
62360: LD_INT 7
62362: PUSH
62363: LD_INT 11
62365: PUSH
62366: LD_INT 12
62368: PUSH
62369: LD_INT 15
62371: PUSH
62372: LD_INT 16
62374: PUSH
62375: LD_INT 20
62377: PUSH
62378: LD_INT 21
62380: PUSH
62381: LD_INT 22
62383: PUSH
62384: LD_INT 23
62386: PUSH
62387: LD_INT 25
62389: PUSH
62390: LD_INT 26
62392: PUSH
62393: LD_INT 30
62395: PUSH
62396: LD_INT 31
62398: PUSH
62399: LD_INT 32
62401: PUSH
62402: LD_INT 33
62404: PUSH
62405: LD_INT 34
62407: PUSH
62408: LD_INT 35
62410: PUSH
62411: LD_INT 36
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 101
62439: PUSH
62440: LD_INT 102
62442: PUSH
62443: LD_INT 103
62445: PUSH
62446: LD_INT 106
62448: PUSH
62449: LD_INT 108
62451: PUSH
62452: LD_INT 112
62454: PUSH
62455: LD_INT 113
62457: PUSH
62458: LD_INT 114
62460: PUSH
62461: LD_INT 115
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: ST_TO_ADDR
62479: GO 62710
62481: LD_INT 19
62483: DOUBLE
62484: EQUAL
62485: IFTRUE 62489
62487: GO 62709
62489: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
62490: LD_ADDR_VAR 0 1
62494: PUSH
62495: LD_INT 1
62497: PUSH
62498: LD_INT 2
62500: PUSH
62501: LD_INT 3
62503: PUSH
62504: LD_INT 4
62506: PUSH
62507: LD_INT 5
62509: PUSH
62510: LD_INT 6
62512: PUSH
62513: LD_INT 7
62515: PUSH
62516: LD_INT 8
62518: PUSH
62519: LD_INT 9
62521: PUSH
62522: LD_INT 10
62524: PUSH
62525: LD_INT 11
62527: PUSH
62528: LD_INT 12
62530: PUSH
62531: LD_INT 13
62533: PUSH
62534: LD_INT 14
62536: PUSH
62537: LD_INT 15
62539: PUSH
62540: LD_INT 16
62542: PUSH
62543: LD_INT 17
62545: PUSH
62546: LD_INT 18
62548: PUSH
62549: LD_INT 19
62551: PUSH
62552: LD_INT 20
62554: PUSH
62555: LD_INT 21
62557: PUSH
62558: LD_INT 22
62560: PUSH
62561: LD_INT 23
62563: PUSH
62564: LD_INT 24
62566: PUSH
62567: LD_INT 25
62569: PUSH
62570: LD_INT 26
62572: PUSH
62573: LD_INT 27
62575: PUSH
62576: LD_INT 28
62578: PUSH
62579: LD_INT 29
62581: PUSH
62582: LD_INT 30
62584: PUSH
62585: LD_INT 31
62587: PUSH
62588: LD_INT 32
62590: PUSH
62591: LD_INT 33
62593: PUSH
62594: LD_INT 34
62596: PUSH
62597: LD_INT 35
62599: PUSH
62600: LD_INT 36
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 101
62643: PUSH
62644: LD_INT 102
62646: PUSH
62647: LD_INT 103
62649: PUSH
62650: LD_INT 104
62652: PUSH
62653: LD_INT 105
62655: PUSH
62656: LD_INT 106
62658: PUSH
62659: LD_INT 107
62661: PUSH
62662: LD_INT 108
62664: PUSH
62665: LD_INT 109
62667: PUSH
62668: LD_INT 110
62670: PUSH
62671: LD_INT 111
62673: PUSH
62674: LD_INT 112
62676: PUSH
62677: LD_INT 113
62679: PUSH
62680: LD_INT 114
62682: PUSH
62683: LD_INT 115
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: ST_TO_ADDR
62707: GO 62710
62709: POP
// end else
62710: GO 62929
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
62712: LD_ADDR_VAR 0 1
62716: PUSH
62717: LD_INT 1
62719: PUSH
62720: LD_INT 2
62722: PUSH
62723: LD_INT 3
62725: PUSH
62726: LD_INT 4
62728: PUSH
62729: LD_INT 5
62731: PUSH
62732: LD_INT 6
62734: PUSH
62735: LD_INT 7
62737: PUSH
62738: LD_INT 8
62740: PUSH
62741: LD_INT 9
62743: PUSH
62744: LD_INT 10
62746: PUSH
62747: LD_INT 11
62749: PUSH
62750: LD_INT 12
62752: PUSH
62753: LD_INT 13
62755: PUSH
62756: LD_INT 14
62758: PUSH
62759: LD_INT 15
62761: PUSH
62762: LD_INT 16
62764: PUSH
62765: LD_INT 17
62767: PUSH
62768: LD_INT 18
62770: PUSH
62771: LD_INT 19
62773: PUSH
62774: LD_INT 20
62776: PUSH
62777: LD_INT 21
62779: PUSH
62780: LD_INT 22
62782: PUSH
62783: LD_INT 23
62785: PUSH
62786: LD_INT 24
62788: PUSH
62789: LD_INT 25
62791: PUSH
62792: LD_INT 26
62794: PUSH
62795: LD_INT 27
62797: PUSH
62798: LD_INT 28
62800: PUSH
62801: LD_INT 29
62803: PUSH
62804: LD_INT 30
62806: PUSH
62807: LD_INT 31
62809: PUSH
62810: LD_INT 32
62812: PUSH
62813: LD_INT 33
62815: PUSH
62816: LD_INT 34
62818: PUSH
62819: LD_INT 35
62821: PUSH
62822: LD_INT 36
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 101
62865: PUSH
62866: LD_INT 102
62868: PUSH
62869: LD_INT 103
62871: PUSH
62872: LD_INT 104
62874: PUSH
62875: LD_INT 105
62877: PUSH
62878: LD_INT 106
62880: PUSH
62881: LD_INT 107
62883: PUSH
62884: LD_INT 108
62886: PUSH
62887: LD_INT 109
62889: PUSH
62890: LD_INT 110
62892: PUSH
62893: LD_INT 111
62895: PUSH
62896: LD_INT 112
62898: PUSH
62899: LD_INT 113
62901: PUSH
62902: LD_INT 114
62904: PUSH
62905: LD_INT 115
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: ST_TO_ADDR
// if result then
62929: LD_VAR 0 1
62933: IFFALSE 63222
// begin normal :=  ;
62935: LD_ADDR_VAR 0 3
62939: PUSH
62940: LD_STRING 
62942: ST_TO_ADDR
// hardcore :=  ;
62943: LD_ADDR_VAR 0 4
62947: PUSH
62948: LD_STRING 
62950: ST_TO_ADDR
// for i = 1 to normalCounter do
62951: LD_ADDR_VAR 0 5
62955: PUSH
62956: DOUBLE
62957: LD_INT 1
62959: DEC
62960: ST_TO_ADDR
62961: LD_EXP 45
62965: PUSH
62966: FOR_TO
62967: IFFALSE 63068
// begin tmp := 0 ;
62969: LD_ADDR_VAR 0 2
62973: PUSH
62974: LD_STRING 0
62976: ST_TO_ADDR
// if result [ 1 ] then
62977: LD_VAR 0 1
62981: PUSH
62982: LD_INT 1
62984: ARRAY
62985: IFFALSE 63050
// if result [ 1 ] [ 1 ] = i then
62987: LD_VAR 0 1
62991: PUSH
62992: LD_INT 1
62994: ARRAY
62995: PUSH
62996: LD_INT 1
62998: ARRAY
62999: PUSH
63000: LD_VAR 0 5
63004: EQUAL
63005: IFFALSE 63050
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
63007: LD_ADDR_VAR 0 1
63011: PUSH
63012: LD_VAR 0 1
63016: PPUSH
63017: LD_INT 1
63019: PPUSH
63020: LD_VAR 0 1
63024: PUSH
63025: LD_INT 1
63027: ARRAY
63028: PPUSH
63029: LD_INT 1
63031: PPUSH
63032: CALL_OW 3
63036: PPUSH
63037: CALL_OW 1
63041: ST_TO_ADDR
// tmp := 1 ;
63042: LD_ADDR_VAR 0 2
63046: PUSH
63047: LD_STRING 1
63049: ST_TO_ADDR
// end ; normal := normal & tmp ;
63050: LD_ADDR_VAR 0 3
63054: PUSH
63055: LD_VAR 0 3
63059: PUSH
63060: LD_VAR 0 2
63064: STR
63065: ST_TO_ADDR
// end ;
63066: GO 62966
63068: POP
63069: POP
// for i = 1 to hardcoreCounter do
63070: LD_ADDR_VAR 0 5
63074: PUSH
63075: DOUBLE
63076: LD_INT 1
63078: DEC
63079: ST_TO_ADDR
63080: LD_EXP 46
63084: PUSH
63085: FOR_TO
63086: IFFALSE 63191
// begin tmp := 0 ;
63088: LD_ADDR_VAR 0 2
63092: PUSH
63093: LD_STRING 0
63095: ST_TO_ADDR
// if result [ 2 ] then
63096: LD_VAR 0 1
63100: PUSH
63101: LD_INT 2
63103: ARRAY
63104: IFFALSE 63173
// if result [ 2 ] [ 1 ] = 100 + i then
63106: LD_VAR 0 1
63110: PUSH
63111: LD_INT 2
63113: ARRAY
63114: PUSH
63115: LD_INT 1
63117: ARRAY
63118: PUSH
63119: LD_INT 100
63121: PUSH
63122: LD_VAR 0 5
63126: PLUS
63127: EQUAL
63128: IFFALSE 63173
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
63130: LD_ADDR_VAR 0 1
63134: PUSH
63135: LD_VAR 0 1
63139: PPUSH
63140: LD_INT 2
63142: PPUSH
63143: LD_VAR 0 1
63147: PUSH
63148: LD_INT 2
63150: ARRAY
63151: PPUSH
63152: LD_INT 1
63154: PPUSH
63155: CALL_OW 3
63159: PPUSH
63160: CALL_OW 1
63164: ST_TO_ADDR
// tmp := 1 ;
63165: LD_ADDR_VAR 0 2
63169: PUSH
63170: LD_STRING 1
63172: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
63173: LD_ADDR_VAR 0 4
63177: PUSH
63178: LD_VAR 0 4
63182: PUSH
63183: LD_VAR 0 2
63187: STR
63188: ST_TO_ADDR
// end ;
63189: GO 63085
63191: POP
63192: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
63193: LD_STRING getStreamItemsFromMission("
63195: PUSH
63196: LD_VAR 0 3
63200: STR
63201: PUSH
63202: LD_STRING ","
63204: STR
63205: PUSH
63206: LD_VAR 0 4
63210: STR
63211: PUSH
63212: LD_STRING ")
63214: STR
63215: PPUSH
63216: CALL_OW 559
// end else
63220: GO 63229
// ToLua ( getStreamItemsFromMission("","") ) ;
63222: LD_STRING getStreamItemsFromMission("","")
63224: PPUSH
63225: CALL_OW 559
// end ;
63229: LD_VAR 0 1
63233: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
63234: LD_EXP 44
63238: PUSH
63239: LD_EXP 49
63243: AND
63244: IFFALSE 63368
63246: GO 63248
63248: DISABLE
63249: LD_INT 0
63251: PPUSH
63252: PPUSH
// begin enable ;
63253: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
63254: LD_ADDR_VAR 0 2
63258: PUSH
63259: LD_INT 22
63261: PUSH
63262: LD_OWVAR 2
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 2
63273: PUSH
63274: LD_INT 34
63276: PUSH
63277: LD_INT 7
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 34
63286: PUSH
63287: LD_INT 45
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 34
63296: PUSH
63297: LD_INT 28
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 34
63306: PUSH
63307: LD_INT 47
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PPUSH
63325: CALL_OW 69
63329: ST_TO_ADDR
// if not tmp then
63330: LD_VAR 0 2
63334: NOT
63335: IFFALSE 63339
// exit ;
63337: GO 63368
// for i in tmp do
63339: LD_ADDR_VAR 0 1
63343: PUSH
63344: LD_VAR 0 2
63348: PUSH
63349: FOR_IN
63350: IFFALSE 63366
// begin SetLives ( i , 0 ) ;
63352: LD_VAR 0 1
63356: PPUSH
63357: LD_INT 0
63359: PPUSH
63360: CALL_OW 234
// end ;
63364: GO 63349
63366: POP
63367: POP
// end ;
63368: PPOPN 2
63370: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
63371: LD_EXP 44
63375: PUSH
63376: LD_EXP 50
63380: AND
63381: IFFALSE 63465
63383: GO 63385
63385: DISABLE
63386: LD_INT 0
63388: PPUSH
63389: PPUSH
// begin enable ;
63390: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
63391: LD_ADDR_VAR 0 2
63395: PUSH
63396: LD_INT 22
63398: PUSH
63399: LD_OWVAR 2
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 32
63410: PUSH
63411: LD_INT 3
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PPUSH
63422: CALL_OW 69
63426: ST_TO_ADDR
// if not tmp then
63427: LD_VAR 0 2
63431: NOT
63432: IFFALSE 63436
// exit ;
63434: GO 63465
// for i in tmp do
63436: LD_ADDR_VAR 0 1
63440: PUSH
63441: LD_VAR 0 2
63445: PUSH
63446: FOR_IN
63447: IFFALSE 63463
// begin SetLives ( i , 0 ) ;
63449: LD_VAR 0 1
63453: PPUSH
63454: LD_INT 0
63456: PPUSH
63457: CALL_OW 234
// end ;
63461: GO 63446
63463: POP
63464: POP
// end ;
63465: PPOPN 2
63467: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
63468: LD_EXP 44
63472: PUSH
63473: LD_EXP 47
63477: AND
63478: IFFALSE 63571
63480: GO 63482
63482: DISABLE
63483: LD_INT 0
63485: PPUSH
// begin enable ;
63486: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
63487: LD_ADDR_VAR 0 1
63491: PUSH
63492: LD_INT 22
63494: PUSH
63495: LD_OWVAR 2
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 2
63506: PUSH
63507: LD_INT 25
63509: PUSH
63510: LD_INT 5
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 25
63519: PUSH
63520: LD_INT 9
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 25
63529: PUSH
63530: LD_INT 8
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PPUSH
63547: CALL_OW 69
63551: PUSH
63552: FOR_IN
63553: IFFALSE 63569
// begin SetClass ( i , 1 ) ;
63555: LD_VAR 0 1
63559: PPUSH
63560: LD_INT 1
63562: PPUSH
63563: CALL_OW 336
// end ;
63567: GO 63552
63569: POP
63570: POP
// end ;
63571: PPOPN 1
63573: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
63574: LD_EXP 44
63578: PUSH
63579: LD_EXP 48
63583: AND
63584: PUSH
63585: LD_OWVAR 65
63589: PUSH
63590: LD_INT 7
63592: LESS
63593: AND
63594: IFFALSE 63608
63596: GO 63598
63598: DISABLE
// begin enable ;
63599: ENABLE
// game_speed := 7 ;
63600: LD_ADDR_OWVAR 65
63604: PUSH
63605: LD_INT 7
63607: ST_TO_ADDR
// end ;
63608: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
63609: LD_EXP 44
63613: PUSH
63614: LD_EXP 51
63618: AND
63619: IFFALSE 63821
63621: GO 63623
63623: DISABLE
63624: LD_INT 0
63626: PPUSH
63627: PPUSH
63628: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
63629: LD_ADDR_VAR 0 3
63633: PUSH
63634: LD_INT 81
63636: PUSH
63637: LD_OWVAR 2
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 21
63648: PUSH
63649: LD_INT 1
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PPUSH
63660: CALL_OW 69
63664: ST_TO_ADDR
// if not tmp then
63665: LD_VAR 0 3
63669: NOT
63670: IFFALSE 63674
// exit ;
63672: GO 63821
// if tmp > 5 then
63674: LD_VAR 0 3
63678: PUSH
63679: LD_INT 5
63681: GREATER
63682: IFFALSE 63694
// k := 5 else
63684: LD_ADDR_VAR 0 2
63688: PUSH
63689: LD_INT 5
63691: ST_TO_ADDR
63692: GO 63704
// k := tmp ;
63694: LD_ADDR_VAR 0 2
63698: PUSH
63699: LD_VAR 0 3
63703: ST_TO_ADDR
// for i := 1 to k do
63704: LD_ADDR_VAR 0 1
63708: PUSH
63709: DOUBLE
63710: LD_INT 1
63712: DEC
63713: ST_TO_ADDR
63714: LD_VAR 0 2
63718: PUSH
63719: FOR_TO
63720: IFFALSE 63819
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
63722: LD_VAR 0 3
63726: PUSH
63727: LD_VAR 0 1
63731: ARRAY
63732: PPUSH
63733: LD_VAR 0 1
63737: PUSH
63738: LD_INT 4
63740: MOD
63741: PUSH
63742: LD_INT 1
63744: PLUS
63745: PPUSH
63746: CALL_OW 259
63750: PUSH
63751: LD_INT 10
63753: LESS
63754: IFFALSE 63817
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
63756: LD_VAR 0 3
63760: PUSH
63761: LD_VAR 0 1
63765: ARRAY
63766: PPUSH
63767: LD_VAR 0 1
63771: PUSH
63772: LD_INT 4
63774: MOD
63775: PUSH
63776: LD_INT 1
63778: PLUS
63779: PPUSH
63780: LD_VAR 0 3
63784: PUSH
63785: LD_VAR 0 1
63789: ARRAY
63790: PPUSH
63791: LD_VAR 0 1
63795: PUSH
63796: LD_INT 4
63798: MOD
63799: PUSH
63800: LD_INT 1
63802: PLUS
63803: PPUSH
63804: CALL_OW 259
63808: PUSH
63809: LD_INT 1
63811: PLUS
63812: PPUSH
63813: CALL_OW 237
63817: GO 63719
63819: POP
63820: POP
// end ;
63821: PPOPN 3
63823: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
63824: LD_EXP 44
63828: PUSH
63829: LD_EXP 52
63833: AND
63834: IFFALSE 63854
63836: GO 63838
63838: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
63839: LD_INT 4
63841: PPUSH
63842: LD_OWVAR 2
63846: PPUSH
63847: LD_INT 0
63849: PPUSH
63850: CALL_OW 324
63854: END
// every 0 0$1 trigger StreamModeActive and sShovel do
63855: LD_EXP 44
63859: PUSH
63860: LD_EXP 81
63864: AND
63865: IFFALSE 63885
63867: GO 63869
63869: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
63870: LD_INT 19
63872: PPUSH
63873: LD_OWVAR 2
63877: PPUSH
63878: LD_INT 0
63880: PPUSH
63881: CALL_OW 324
63885: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
63886: LD_EXP 44
63890: PUSH
63891: LD_EXP 53
63895: AND
63896: IFFALSE 63998
63898: GO 63900
63900: DISABLE
63901: LD_INT 0
63903: PPUSH
63904: PPUSH
// begin enable ;
63905: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
63906: LD_ADDR_VAR 0 2
63910: PUSH
63911: LD_INT 22
63913: PUSH
63914: LD_OWVAR 2
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 2
63925: PUSH
63926: LD_INT 34
63928: PUSH
63929: LD_INT 11
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 34
63938: PUSH
63939: LD_INT 30
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: LIST
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PPUSH
63955: CALL_OW 69
63959: ST_TO_ADDR
// if not tmp then
63960: LD_VAR 0 2
63964: NOT
63965: IFFALSE 63969
// exit ;
63967: GO 63998
// for i in tmp do
63969: LD_ADDR_VAR 0 1
63973: PUSH
63974: LD_VAR 0 2
63978: PUSH
63979: FOR_IN
63980: IFFALSE 63996
// begin SetLives ( i , 0 ) ;
63982: LD_VAR 0 1
63986: PPUSH
63987: LD_INT 0
63989: PPUSH
63990: CALL_OW 234
// end ;
63994: GO 63979
63996: POP
63997: POP
// end ;
63998: PPOPN 2
64000: END
// every 0 0$1 trigger StreamModeActive and sBunker do
64001: LD_EXP 44
64005: PUSH
64006: LD_EXP 54
64010: AND
64011: IFFALSE 64031
64013: GO 64015
64015: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
64016: LD_INT 32
64018: PPUSH
64019: LD_OWVAR 2
64023: PPUSH
64024: LD_INT 0
64026: PPUSH
64027: CALL_OW 324
64031: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
64032: LD_EXP 44
64036: PUSH
64037: LD_EXP 55
64041: AND
64042: IFFALSE 64223
64044: GO 64046
64046: DISABLE
64047: LD_INT 0
64049: PPUSH
64050: PPUSH
64051: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
64052: LD_ADDR_VAR 0 2
64056: PUSH
64057: LD_INT 22
64059: PUSH
64060: LD_OWVAR 2
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 33
64071: PUSH
64072: LD_INT 3
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PPUSH
64083: CALL_OW 69
64087: ST_TO_ADDR
// if not tmp then
64088: LD_VAR 0 2
64092: NOT
64093: IFFALSE 64097
// exit ;
64095: GO 64223
// side := 0 ;
64097: LD_ADDR_VAR 0 3
64101: PUSH
64102: LD_INT 0
64104: ST_TO_ADDR
// for i := 1 to 8 do
64105: LD_ADDR_VAR 0 1
64109: PUSH
64110: DOUBLE
64111: LD_INT 1
64113: DEC
64114: ST_TO_ADDR
64115: LD_INT 8
64117: PUSH
64118: FOR_TO
64119: IFFALSE 64167
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
64121: LD_OWVAR 2
64125: PUSH
64126: LD_VAR 0 1
64130: NONEQUAL
64131: PUSH
64132: LD_OWVAR 2
64136: PPUSH
64137: LD_VAR 0 1
64141: PPUSH
64142: CALL_OW 81
64146: PUSH
64147: LD_INT 2
64149: EQUAL
64150: AND
64151: IFFALSE 64165
// begin side := i ;
64153: LD_ADDR_VAR 0 3
64157: PUSH
64158: LD_VAR 0 1
64162: ST_TO_ADDR
// break ;
64163: GO 64167
// end ;
64165: GO 64118
64167: POP
64168: POP
// if not side then
64169: LD_VAR 0 3
64173: NOT
64174: IFFALSE 64178
// exit ;
64176: GO 64223
// for i := 1 to tmp do
64178: LD_ADDR_VAR 0 1
64182: PUSH
64183: DOUBLE
64184: LD_INT 1
64186: DEC
64187: ST_TO_ADDR
64188: LD_VAR 0 2
64192: PUSH
64193: FOR_TO
64194: IFFALSE 64221
// if Prob ( 60 ) then
64196: LD_INT 60
64198: PPUSH
64199: CALL_OW 13
64203: IFFALSE 64219
// SetSide ( i , side ) ;
64205: LD_VAR 0 1
64209: PPUSH
64210: LD_VAR 0 3
64214: PPUSH
64215: CALL_OW 235
64219: GO 64193
64221: POP
64222: POP
// end ;
64223: PPOPN 3
64225: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
64226: LD_EXP 44
64230: PUSH
64231: LD_EXP 57
64235: AND
64236: IFFALSE 64355
64238: GO 64240
64240: DISABLE
64241: LD_INT 0
64243: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
64244: LD_ADDR_VAR 0 1
64248: PUSH
64249: LD_INT 22
64251: PUSH
64252: LD_OWVAR 2
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 21
64263: PUSH
64264: LD_INT 1
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: LD_INT 3
64273: PUSH
64274: LD_INT 23
64276: PUSH
64277: LD_INT 0
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: LIST
64292: PPUSH
64293: CALL_OW 69
64297: PUSH
64298: FOR_IN
64299: IFFALSE 64353
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
64301: LD_VAR 0 1
64305: PPUSH
64306: CALL_OW 257
64310: PUSH
64311: LD_INT 1
64313: PUSH
64314: LD_INT 2
64316: PUSH
64317: LD_INT 3
64319: PUSH
64320: LD_INT 4
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: IN
64329: IFFALSE 64351
// SetClass ( un , rand ( 1 , 4 ) ) ;
64331: LD_VAR 0 1
64335: PPUSH
64336: LD_INT 1
64338: PPUSH
64339: LD_INT 4
64341: PPUSH
64342: CALL_OW 12
64346: PPUSH
64347: CALL_OW 336
64351: GO 64298
64353: POP
64354: POP
// end ;
64355: PPOPN 1
64357: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
64358: LD_EXP 44
64362: PUSH
64363: LD_EXP 56
64367: AND
64368: IFFALSE 64447
64370: GO 64372
64372: DISABLE
64373: LD_INT 0
64375: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
64376: LD_ADDR_VAR 0 1
64380: PUSH
64381: LD_INT 22
64383: PUSH
64384: LD_OWVAR 2
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 21
64395: PUSH
64396: LD_INT 3
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PPUSH
64407: CALL_OW 69
64411: ST_TO_ADDR
// if not tmp then
64412: LD_VAR 0 1
64416: NOT
64417: IFFALSE 64421
// exit ;
64419: GO 64447
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
64421: LD_VAR 0 1
64425: PUSH
64426: LD_INT 1
64428: PPUSH
64429: LD_VAR 0 1
64433: PPUSH
64434: CALL_OW 12
64438: ARRAY
64439: PPUSH
64440: LD_INT 100
64442: PPUSH
64443: CALL_OW 234
// end ;
64447: PPOPN 1
64449: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
64450: LD_EXP 44
64454: PUSH
64455: LD_EXP 58
64459: AND
64460: IFFALSE 64558
64462: GO 64464
64464: DISABLE
64465: LD_INT 0
64467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
64468: LD_ADDR_VAR 0 1
64472: PUSH
64473: LD_INT 22
64475: PUSH
64476: LD_OWVAR 2
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 21
64487: PUSH
64488: LD_INT 1
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PPUSH
64499: CALL_OW 69
64503: ST_TO_ADDR
// if not tmp then
64504: LD_VAR 0 1
64508: NOT
64509: IFFALSE 64513
// exit ;
64511: GO 64558
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
64513: LD_VAR 0 1
64517: PUSH
64518: LD_INT 1
64520: PPUSH
64521: LD_VAR 0 1
64525: PPUSH
64526: CALL_OW 12
64530: ARRAY
64531: PPUSH
64532: LD_INT 1
64534: PPUSH
64535: LD_INT 4
64537: PPUSH
64538: CALL_OW 12
64542: PPUSH
64543: LD_INT 3000
64545: PPUSH
64546: LD_INT 9000
64548: PPUSH
64549: CALL_OW 12
64553: PPUSH
64554: CALL_OW 492
// end ;
64558: PPOPN 1
64560: END
// every 0 0$1 trigger StreamModeActive and sDepot do
64561: LD_EXP 44
64565: PUSH
64566: LD_EXP 59
64570: AND
64571: IFFALSE 64591
64573: GO 64575
64575: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
64576: LD_INT 1
64578: PPUSH
64579: LD_OWVAR 2
64583: PPUSH
64584: LD_INT 0
64586: PPUSH
64587: CALL_OW 324
64591: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
64592: LD_EXP 44
64596: PUSH
64597: LD_EXP 60
64601: AND
64602: IFFALSE 64685
64604: GO 64606
64606: DISABLE
64607: LD_INT 0
64609: PPUSH
64610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
64611: LD_ADDR_VAR 0 2
64615: PUSH
64616: LD_INT 22
64618: PUSH
64619: LD_OWVAR 2
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 21
64630: PUSH
64631: LD_INT 3
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PPUSH
64642: CALL_OW 69
64646: ST_TO_ADDR
// if not tmp then
64647: LD_VAR 0 2
64651: NOT
64652: IFFALSE 64656
// exit ;
64654: GO 64685
// for i in tmp do
64656: LD_ADDR_VAR 0 1
64660: PUSH
64661: LD_VAR 0 2
64665: PUSH
64666: FOR_IN
64667: IFFALSE 64683
// SetBLevel ( i , 10 ) ;
64669: LD_VAR 0 1
64673: PPUSH
64674: LD_INT 10
64676: PPUSH
64677: CALL_OW 241
64681: GO 64666
64683: POP
64684: POP
// end ;
64685: PPOPN 2
64687: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
64688: LD_EXP 44
64692: PUSH
64693: LD_EXP 61
64697: AND
64698: IFFALSE 64809
64700: GO 64702
64702: DISABLE
64703: LD_INT 0
64705: PPUSH
64706: PPUSH
64707: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64708: LD_ADDR_VAR 0 3
64712: PUSH
64713: LD_INT 22
64715: PUSH
64716: LD_OWVAR 2
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 25
64727: PUSH
64728: LD_INT 1
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PPUSH
64739: CALL_OW 69
64743: ST_TO_ADDR
// if not tmp then
64744: LD_VAR 0 3
64748: NOT
64749: IFFALSE 64753
// exit ;
64751: GO 64809
// un := tmp [ rand ( 1 , tmp ) ] ;
64753: LD_ADDR_VAR 0 2
64757: PUSH
64758: LD_VAR 0 3
64762: PUSH
64763: LD_INT 1
64765: PPUSH
64766: LD_VAR 0 3
64770: PPUSH
64771: CALL_OW 12
64775: ARRAY
64776: ST_TO_ADDR
// if Crawls ( un ) then
64777: LD_VAR 0 2
64781: PPUSH
64782: CALL_OW 318
64786: IFFALSE 64797
// ComWalk ( un ) ;
64788: LD_VAR 0 2
64792: PPUSH
64793: CALL_OW 138
// SetClass ( un , class_sniper ) ;
64797: LD_VAR 0 2
64801: PPUSH
64802: LD_INT 5
64804: PPUSH
64805: CALL_OW 336
// end ;
64809: PPOPN 3
64811: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
64812: LD_EXP 44
64816: PUSH
64817: LD_EXP 62
64821: AND
64822: PUSH
64823: LD_OWVAR 67
64827: PUSH
64828: LD_INT 3
64830: LESS
64831: AND
64832: IFFALSE 64851
64834: GO 64836
64836: DISABLE
// Difficulty := Difficulty + 1 ;
64837: LD_ADDR_OWVAR 67
64841: PUSH
64842: LD_OWVAR 67
64846: PUSH
64847: LD_INT 1
64849: PLUS
64850: ST_TO_ADDR
64851: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
64852: LD_EXP 44
64856: PUSH
64857: LD_EXP 63
64861: AND
64862: IFFALSE 64965
64864: GO 64866
64866: DISABLE
64867: LD_INT 0
64869: PPUSH
// begin for i := 1 to 5 do
64870: LD_ADDR_VAR 0 1
64874: PUSH
64875: DOUBLE
64876: LD_INT 1
64878: DEC
64879: ST_TO_ADDR
64880: LD_INT 5
64882: PUSH
64883: FOR_TO
64884: IFFALSE 64963
// begin uc_nation := nation_nature ;
64886: LD_ADDR_OWVAR 21
64890: PUSH
64891: LD_INT 0
64893: ST_TO_ADDR
// uc_side := 0 ;
64894: LD_ADDR_OWVAR 20
64898: PUSH
64899: LD_INT 0
64901: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64902: LD_ADDR_OWVAR 29
64906: PUSH
64907: LD_INT 12
64909: PUSH
64910: LD_INT 12
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: ST_TO_ADDR
// hc_agressivity := 20 ;
64917: LD_ADDR_OWVAR 35
64921: PUSH
64922: LD_INT 20
64924: ST_TO_ADDR
// hc_class := class_tiger ;
64925: LD_ADDR_OWVAR 28
64929: PUSH
64930: LD_INT 14
64932: ST_TO_ADDR
// hc_gallery :=  ;
64933: LD_ADDR_OWVAR 33
64937: PUSH
64938: LD_STRING 
64940: ST_TO_ADDR
// hc_name :=  ;
64941: LD_ADDR_OWVAR 26
64945: PUSH
64946: LD_STRING 
64948: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
64949: CALL_OW 44
64953: PPUSH
64954: LD_INT 0
64956: PPUSH
64957: CALL_OW 51
// end ;
64961: GO 64883
64963: POP
64964: POP
// end ;
64965: PPOPN 1
64967: END
// every 0 0$1 trigger StreamModeActive and sBomb do
64968: LD_EXP 44
64972: PUSH
64973: LD_EXP 64
64977: AND
64978: IFFALSE 64987
64980: GO 64982
64982: DISABLE
// StreamSibBomb ;
64983: CALL 64988 0 0
64987: END
// export function StreamSibBomb ; var i , x , y ; begin
64988: LD_INT 0
64990: PPUSH
64991: PPUSH
64992: PPUSH
64993: PPUSH
// result := false ;
64994: LD_ADDR_VAR 0 1
64998: PUSH
64999: LD_INT 0
65001: ST_TO_ADDR
// for i := 1 to 16 do
65002: LD_ADDR_VAR 0 2
65006: PUSH
65007: DOUBLE
65008: LD_INT 1
65010: DEC
65011: ST_TO_ADDR
65012: LD_INT 16
65014: PUSH
65015: FOR_TO
65016: IFFALSE 65215
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65018: LD_ADDR_VAR 0 3
65022: PUSH
65023: LD_INT 10
65025: PUSH
65026: LD_INT 20
65028: PUSH
65029: LD_INT 30
65031: PUSH
65032: LD_INT 40
65034: PUSH
65035: LD_INT 50
65037: PUSH
65038: LD_INT 60
65040: PUSH
65041: LD_INT 70
65043: PUSH
65044: LD_INT 80
65046: PUSH
65047: LD_INT 90
65049: PUSH
65050: LD_INT 100
65052: PUSH
65053: LD_INT 110
65055: PUSH
65056: LD_INT 120
65058: PUSH
65059: LD_INT 130
65061: PUSH
65062: LD_INT 140
65064: PUSH
65065: LD_INT 150
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 1
65087: PPUSH
65088: LD_INT 15
65090: PPUSH
65091: CALL_OW 12
65095: ARRAY
65096: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65097: LD_ADDR_VAR 0 4
65101: PUSH
65102: LD_INT 10
65104: PUSH
65105: LD_INT 20
65107: PUSH
65108: LD_INT 30
65110: PUSH
65111: LD_INT 40
65113: PUSH
65114: LD_INT 50
65116: PUSH
65117: LD_INT 60
65119: PUSH
65120: LD_INT 70
65122: PUSH
65123: LD_INT 80
65125: PUSH
65126: LD_INT 90
65128: PUSH
65129: LD_INT 100
65131: PUSH
65132: LD_INT 110
65134: PUSH
65135: LD_INT 120
65137: PUSH
65138: LD_INT 130
65140: PUSH
65141: LD_INT 140
65143: PUSH
65144: LD_INT 150
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: PUSH
65164: LD_INT 1
65166: PPUSH
65167: LD_INT 15
65169: PPUSH
65170: CALL_OW 12
65174: ARRAY
65175: ST_TO_ADDR
// if ValidHex ( x , y ) then
65176: LD_VAR 0 3
65180: PPUSH
65181: LD_VAR 0 4
65185: PPUSH
65186: CALL_OW 488
65190: IFFALSE 65213
// begin result := [ x , y ] ;
65192: LD_ADDR_VAR 0 1
65196: PUSH
65197: LD_VAR 0 3
65201: PUSH
65202: LD_VAR 0 4
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: ST_TO_ADDR
// break ;
65211: GO 65215
// end ; end ;
65213: GO 65015
65215: POP
65216: POP
// if result then
65217: LD_VAR 0 1
65221: IFFALSE 65281
// begin ToLua ( playSibBomb() ) ;
65223: LD_STRING playSibBomb()
65225: PPUSH
65226: CALL_OW 559
// wait ( 0 0$14 ) ;
65230: LD_INT 490
65232: PPUSH
65233: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
65237: LD_VAR 0 1
65241: PUSH
65242: LD_INT 1
65244: ARRAY
65245: PPUSH
65246: LD_VAR 0 1
65250: PUSH
65251: LD_INT 2
65253: ARRAY
65254: PPUSH
65255: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
65259: LD_VAR 0 1
65263: PUSH
65264: LD_INT 1
65266: ARRAY
65267: PPUSH
65268: LD_VAR 0 1
65272: PUSH
65273: LD_INT 2
65275: ARRAY
65276: PPUSH
65277: CALL_OW 429
// end ; end ;
65281: LD_VAR 0 1
65285: RET
// every 0 0$1 trigger StreamModeActive and sReset do
65286: LD_EXP 44
65290: PUSH
65291: LD_EXP 66
65295: AND
65296: IFFALSE 65308
65298: GO 65300
65300: DISABLE
// YouLost (  ) ;
65301: LD_STRING 
65303: PPUSH
65304: CALL_OW 104
65308: END
// every 0 0$1 trigger StreamModeActive and sFog do
65309: LD_EXP 44
65313: PUSH
65314: LD_EXP 65
65318: AND
65319: IFFALSE 65333
65321: GO 65323
65323: DISABLE
// FogOff ( your_side ) ;
65324: LD_OWVAR 2
65328: PPUSH
65329: CALL_OW 344
65333: END
// every 0 0$1 trigger StreamModeActive and sSun do
65334: LD_EXP 44
65338: PUSH
65339: LD_EXP 67
65343: AND
65344: IFFALSE 65372
65346: GO 65348
65348: DISABLE
// begin solar_recharge_percent := 0 ;
65349: LD_ADDR_OWVAR 79
65353: PUSH
65354: LD_INT 0
65356: ST_TO_ADDR
// wait ( 5 5$00 ) ;
65357: LD_INT 10500
65359: PPUSH
65360: CALL_OW 67
// solar_recharge_percent := 100 ;
65364: LD_ADDR_OWVAR 79
65368: PUSH
65369: LD_INT 100
65371: ST_TO_ADDR
// end ;
65372: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
65373: LD_EXP 44
65377: PUSH
65378: LD_EXP 68
65382: AND
65383: IFFALSE 65622
65385: GO 65387
65387: DISABLE
65388: LD_INT 0
65390: PPUSH
65391: PPUSH
65392: PPUSH
// begin tmp := [ ] ;
65393: LD_ADDR_VAR 0 3
65397: PUSH
65398: EMPTY
65399: ST_TO_ADDR
// for i := 1 to 6 do
65400: LD_ADDR_VAR 0 1
65404: PUSH
65405: DOUBLE
65406: LD_INT 1
65408: DEC
65409: ST_TO_ADDR
65410: LD_INT 6
65412: PUSH
65413: FOR_TO
65414: IFFALSE 65519
// begin uc_nation := nation_nature ;
65416: LD_ADDR_OWVAR 21
65420: PUSH
65421: LD_INT 0
65423: ST_TO_ADDR
// uc_side := 0 ;
65424: LD_ADDR_OWVAR 20
65428: PUSH
65429: LD_INT 0
65431: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65432: LD_ADDR_OWVAR 29
65436: PUSH
65437: LD_INT 12
65439: PUSH
65440: LD_INT 12
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: ST_TO_ADDR
// hc_agressivity := 20 ;
65447: LD_ADDR_OWVAR 35
65451: PUSH
65452: LD_INT 20
65454: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
65455: LD_ADDR_OWVAR 28
65459: PUSH
65460: LD_INT 17
65462: ST_TO_ADDR
// hc_gallery :=  ;
65463: LD_ADDR_OWVAR 33
65467: PUSH
65468: LD_STRING 
65470: ST_TO_ADDR
// hc_name :=  ;
65471: LD_ADDR_OWVAR 26
65475: PUSH
65476: LD_STRING 
65478: ST_TO_ADDR
// un := CreateHuman ;
65479: LD_ADDR_VAR 0 2
65483: PUSH
65484: CALL_OW 44
65488: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
65489: LD_VAR 0 2
65493: PPUSH
65494: LD_INT 1
65496: PPUSH
65497: CALL_OW 51
// tmp := tmp ^ un ;
65501: LD_ADDR_VAR 0 3
65505: PUSH
65506: LD_VAR 0 3
65510: PUSH
65511: LD_VAR 0 2
65515: ADD
65516: ST_TO_ADDR
// end ;
65517: GO 65413
65519: POP
65520: POP
// repeat wait ( 0 0$1 ) ;
65521: LD_INT 35
65523: PPUSH
65524: CALL_OW 67
// for un in tmp do
65528: LD_ADDR_VAR 0 2
65532: PUSH
65533: LD_VAR 0 3
65537: PUSH
65538: FOR_IN
65539: IFFALSE 65613
// begin if IsDead ( un ) then
65541: LD_VAR 0 2
65545: PPUSH
65546: CALL_OW 301
65550: IFFALSE 65570
// begin tmp := tmp diff un ;
65552: LD_ADDR_VAR 0 3
65556: PUSH
65557: LD_VAR 0 3
65561: PUSH
65562: LD_VAR 0 2
65566: DIFF
65567: ST_TO_ADDR
// continue ;
65568: GO 65538
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
65570: LD_VAR 0 2
65574: PPUSH
65575: LD_INT 3
65577: PUSH
65578: LD_INT 22
65580: PUSH
65581: LD_INT 0
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PPUSH
65592: CALL_OW 69
65596: PPUSH
65597: LD_VAR 0 2
65601: PPUSH
65602: CALL_OW 74
65606: PPUSH
65607: CALL_OW 115
// end ;
65611: GO 65538
65613: POP
65614: POP
// until not tmp ;
65615: LD_VAR 0 3
65619: NOT
65620: IFFALSE 65521
// end ;
65622: PPOPN 3
65624: END
// every 0 0$1 trigger StreamModeActive and sTroll do
65625: LD_EXP 44
65629: PUSH
65630: LD_EXP 69
65634: AND
65635: IFFALSE 65689
65637: GO 65639
65639: DISABLE
// begin ToLua ( displayTroll(); ) ;
65640: LD_STRING displayTroll();
65642: PPUSH
65643: CALL_OW 559
// wait ( 3 3$00 ) ;
65647: LD_INT 6300
65649: PPUSH
65650: CALL_OW 67
// ToLua ( hideTroll(); ) ;
65654: LD_STRING hideTroll();
65656: PPUSH
65657: CALL_OW 559
// wait ( 1 1$00 ) ;
65661: LD_INT 2100
65663: PPUSH
65664: CALL_OW 67
// ToLua ( displayTroll(); ) ;
65668: LD_STRING displayTroll();
65670: PPUSH
65671: CALL_OW 559
// wait ( 1 1$00 ) ;
65675: LD_INT 2100
65677: PPUSH
65678: CALL_OW 67
// ToLua ( hideTroll(); ) ;
65682: LD_STRING hideTroll();
65684: PPUSH
65685: CALL_OW 559
// end ;
65689: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
65690: LD_EXP 44
65694: PUSH
65695: LD_EXP 70
65699: AND
65700: IFFALSE 65763
65702: GO 65704
65704: DISABLE
65705: LD_INT 0
65707: PPUSH
// begin p := 0 ;
65708: LD_ADDR_VAR 0 1
65712: PUSH
65713: LD_INT 0
65715: ST_TO_ADDR
// repeat game_speed := 1 ;
65716: LD_ADDR_OWVAR 65
65720: PUSH
65721: LD_INT 1
65723: ST_TO_ADDR
// wait ( 0 0$1 ) ;
65724: LD_INT 35
65726: PPUSH
65727: CALL_OW 67
// p := p + 1 ;
65731: LD_ADDR_VAR 0 1
65735: PUSH
65736: LD_VAR 0 1
65740: PUSH
65741: LD_INT 1
65743: PLUS
65744: ST_TO_ADDR
// until p >= 60 ;
65745: LD_VAR 0 1
65749: PUSH
65750: LD_INT 60
65752: GREATEREQUAL
65753: IFFALSE 65716
// game_speed := 4 ;
65755: LD_ADDR_OWVAR 65
65759: PUSH
65760: LD_INT 4
65762: ST_TO_ADDR
// end ;
65763: PPOPN 1
65765: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
65766: LD_EXP 44
65770: PUSH
65771: LD_EXP 71
65775: AND
65776: IFFALSE 65922
65778: GO 65780
65780: DISABLE
65781: LD_INT 0
65783: PPUSH
65784: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
65785: LD_ADDR_VAR 0 1
65789: PUSH
65790: LD_INT 22
65792: PUSH
65793: LD_OWVAR 2
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 2
65804: PUSH
65805: LD_INT 30
65807: PUSH
65808: LD_INT 0
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 30
65817: PUSH
65818: LD_INT 1
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: LIST
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PPUSH
65834: CALL_OW 69
65838: ST_TO_ADDR
// if not depot then
65839: LD_VAR 0 1
65843: NOT
65844: IFFALSE 65848
// exit ;
65846: GO 65922
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
65848: LD_ADDR_VAR 0 2
65852: PUSH
65853: LD_VAR 0 1
65857: PUSH
65858: LD_INT 1
65860: PPUSH
65861: LD_VAR 0 1
65865: PPUSH
65866: CALL_OW 12
65870: ARRAY
65871: PPUSH
65872: CALL_OW 274
65876: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
65877: LD_VAR 0 2
65881: PPUSH
65882: LD_INT 1
65884: PPUSH
65885: LD_INT 0
65887: PPUSH
65888: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
65892: LD_VAR 0 2
65896: PPUSH
65897: LD_INT 2
65899: PPUSH
65900: LD_INT 0
65902: PPUSH
65903: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
65907: LD_VAR 0 2
65911: PPUSH
65912: LD_INT 3
65914: PPUSH
65915: LD_INT 0
65917: PPUSH
65918: CALL_OW 277
// end ;
65922: PPOPN 2
65924: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
65925: LD_EXP 44
65929: PUSH
65930: LD_EXP 72
65934: AND
65935: IFFALSE 66032
65937: GO 65939
65939: DISABLE
65940: LD_INT 0
65942: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
65943: LD_ADDR_VAR 0 1
65947: PUSH
65948: LD_INT 22
65950: PUSH
65951: LD_OWVAR 2
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 21
65962: PUSH
65963: LD_INT 1
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 3
65972: PUSH
65973: LD_INT 23
65975: PUSH
65976: LD_INT 0
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: LIST
65991: PPUSH
65992: CALL_OW 69
65996: ST_TO_ADDR
// if not tmp then
65997: LD_VAR 0 1
66001: NOT
66002: IFFALSE 66006
// exit ;
66004: GO 66032
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
66006: LD_VAR 0 1
66010: PUSH
66011: LD_INT 1
66013: PPUSH
66014: LD_VAR 0 1
66018: PPUSH
66019: CALL_OW 12
66023: ARRAY
66024: PPUSH
66025: LD_INT 200
66027: PPUSH
66028: CALL_OW 234
// end ;
66032: PPOPN 1
66034: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
66035: LD_EXP 44
66039: PUSH
66040: LD_EXP 73
66044: AND
66045: IFFALSE 66124
66047: GO 66049
66049: DISABLE
66050: LD_INT 0
66052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
66053: LD_ADDR_VAR 0 1
66057: PUSH
66058: LD_INT 22
66060: PUSH
66061: LD_OWVAR 2
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 21
66072: PUSH
66073: LD_INT 2
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PPUSH
66084: CALL_OW 69
66088: ST_TO_ADDR
// if not tmp then
66089: LD_VAR 0 1
66093: NOT
66094: IFFALSE 66098
// exit ;
66096: GO 66124
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
66098: LD_VAR 0 1
66102: PUSH
66103: LD_INT 1
66105: PPUSH
66106: LD_VAR 0 1
66110: PPUSH
66111: CALL_OW 12
66115: ARRAY
66116: PPUSH
66117: LD_INT 60
66119: PPUSH
66120: CALL_OW 234
// end ;
66124: PPOPN 1
66126: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
66127: LD_EXP 44
66131: PUSH
66132: LD_EXP 74
66136: AND
66137: IFFALSE 66236
66139: GO 66141
66141: DISABLE
66142: LD_INT 0
66144: PPUSH
66145: PPUSH
// begin enable ;
66146: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
66147: LD_ADDR_VAR 0 1
66151: PUSH
66152: LD_INT 22
66154: PUSH
66155: LD_OWVAR 2
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PUSH
66164: LD_INT 61
66166: PUSH
66167: EMPTY
66168: LIST
66169: PUSH
66170: LD_INT 33
66172: PUSH
66173: LD_INT 2
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: LIST
66184: PPUSH
66185: CALL_OW 69
66189: ST_TO_ADDR
// if not tmp then
66190: LD_VAR 0 1
66194: NOT
66195: IFFALSE 66199
// exit ;
66197: GO 66236
// for i in tmp do
66199: LD_ADDR_VAR 0 2
66203: PUSH
66204: LD_VAR 0 1
66208: PUSH
66209: FOR_IN
66210: IFFALSE 66234
// if IsControledBy ( i ) then
66212: LD_VAR 0 2
66216: PPUSH
66217: CALL_OW 312
66221: IFFALSE 66232
// ComUnlink ( i ) ;
66223: LD_VAR 0 2
66227: PPUSH
66228: CALL_OW 136
66232: GO 66209
66234: POP
66235: POP
// end ;
66236: PPOPN 2
66238: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
66239: LD_EXP 44
66243: PUSH
66244: LD_EXP 75
66248: AND
66249: IFFALSE 66389
66251: GO 66253
66253: DISABLE
66254: LD_INT 0
66256: PPUSH
66257: PPUSH
// begin ToLua ( displayPowell(); ) ;
66258: LD_STRING displayPowell();
66260: PPUSH
66261: CALL_OW 559
// uc_side := 0 ;
66265: LD_ADDR_OWVAR 20
66269: PUSH
66270: LD_INT 0
66272: ST_TO_ADDR
// uc_nation := 2 ;
66273: LD_ADDR_OWVAR 21
66277: PUSH
66278: LD_INT 2
66280: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
66281: LD_ADDR_OWVAR 37
66285: PUSH
66286: LD_INT 14
66288: ST_TO_ADDR
// vc_engine := engine_siberite ;
66289: LD_ADDR_OWVAR 39
66293: PUSH
66294: LD_INT 3
66296: ST_TO_ADDR
// vc_control := control_apeman ;
66297: LD_ADDR_OWVAR 38
66301: PUSH
66302: LD_INT 5
66304: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
66305: LD_ADDR_OWVAR 40
66309: PUSH
66310: LD_INT 29
66312: ST_TO_ADDR
// un := CreateVehicle ;
66313: LD_ADDR_VAR 0 2
66317: PUSH
66318: CALL_OW 45
66322: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
66323: LD_VAR 0 2
66327: PPUSH
66328: LD_INT 1
66330: PPUSH
66331: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
66335: LD_INT 35
66337: PPUSH
66338: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
66342: LD_VAR 0 2
66346: PPUSH
66347: LD_INT 22
66349: PUSH
66350: LD_OWVAR 2
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: PPUSH
66359: CALL_OW 69
66363: PPUSH
66364: LD_VAR 0 2
66368: PPUSH
66369: CALL_OW 74
66373: PPUSH
66374: CALL_OW 115
// until IsDead ( un ) ;
66378: LD_VAR 0 2
66382: PPUSH
66383: CALL_OW 301
66387: IFFALSE 66335
// end ;
66389: PPOPN 2
66391: END
// every 0 0$1 trigger StreamModeActive and sStu do
66392: LD_EXP 44
66396: PUSH
66397: LD_EXP 83
66401: AND
66402: IFFALSE 66418
66404: GO 66406
66406: DISABLE
// begin ToLua ( displayStucuk(); ) ;
66407: LD_STRING displayStucuk();
66409: PPUSH
66410: CALL_OW 559
// ResetFog ;
66414: CALL_OW 335
// end ;
66418: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
66419: LD_EXP 44
66423: PUSH
66424: LD_EXP 76
66428: AND
66429: IFFALSE 66570
66431: GO 66433
66433: DISABLE
66434: LD_INT 0
66436: PPUSH
66437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
66438: LD_ADDR_VAR 0 2
66442: PUSH
66443: LD_INT 22
66445: PUSH
66446: LD_OWVAR 2
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 21
66457: PUSH
66458: LD_INT 1
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PPUSH
66469: CALL_OW 69
66473: ST_TO_ADDR
// if not tmp then
66474: LD_VAR 0 2
66478: NOT
66479: IFFALSE 66483
// exit ;
66481: GO 66570
// un := tmp [ rand ( 1 , tmp ) ] ;
66483: LD_ADDR_VAR 0 1
66487: PUSH
66488: LD_VAR 0 2
66492: PUSH
66493: LD_INT 1
66495: PPUSH
66496: LD_VAR 0 2
66500: PPUSH
66501: CALL_OW 12
66505: ARRAY
66506: ST_TO_ADDR
// SetSide ( un , 0 ) ;
66507: LD_VAR 0 1
66511: PPUSH
66512: LD_INT 0
66514: PPUSH
66515: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
66519: LD_VAR 0 1
66523: PPUSH
66524: LD_OWVAR 3
66528: PUSH
66529: LD_VAR 0 1
66533: DIFF
66534: PPUSH
66535: LD_VAR 0 1
66539: PPUSH
66540: CALL_OW 74
66544: PPUSH
66545: CALL_OW 115
// wait ( 0 0$20 ) ;
66549: LD_INT 700
66551: PPUSH
66552: CALL_OW 67
// SetSide ( un , your_side ) ;
66556: LD_VAR 0 1
66560: PPUSH
66561: LD_OWVAR 2
66565: PPUSH
66566: CALL_OW 235
// end ;
66570: PPOPN 2
66572: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
66573: LD_EXP 44
66577: PUSH
66578: LD_EXP 77
66582: AND
66583: IFFALSE 66689
66585: GO 66587
66587: DISABLE
66588: LD_INT 0
66590: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66591: LD_ADDR_VAR 0 1
66595: PUSH
66596: LD_INT 22
66598: PUSH
66599: LD_OWVAR 2
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: LD_INT 2
66610: PUSH
66611: LD_INT 30
66613: PUSH
66614: LD_INT 0
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PUSH
66621: LD_INT 30
66623: PUSH
66624: LD_INT 1
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: LIST
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PPUSH
66640: CALL_OW 69
66644: ST_TO_ADDR
// if not depot then
66645: LD_VAR 0 1
66649: NOT
66650: IFFALSE 66654
// exit ;
66652: GO 66689
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
66654: LD_VAR 0 1
66658: PUSH
66659: LD_INT 1
66661: ARRAY
66662: PPUSH
66663: CALL_OW 250
66667: PPUSH
66668: LD_VAR 0 1
66672: PUSH
66673: LD_INT 1
66675: ARRAY
66676: PPUSH
66677: CALL_OW 251
66681: PPUSH
66682: LD_INT 70
66684: PPUSH
66685: CALL_OW 495
// end ;
66689: PPOPN 1
66691: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
66692: LD_EXP 44
66696: PUSH
66697: LD_EXP 78
66701: AND
66702: IFFALSE 66913
66704: GO 66706
66706: DISABLE
66707: LD_INT 0
66709: PPUSH
66710: PPUSH
66711: PPUSH
66712: PPUSH
66713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
66714: LD_ADDR_VAR 0 5
66718: PUSH
66719: LD_INT 22
66721: PUSH
66722: LD_OWVAR 2
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 21
66733: PUSH
66734: LD_INT 1
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PPUSH
66745: CALL_OW 69
66749: ST_TO_ADDR
// if not tmp then
66750: LD_VAR 0 5
66754: NOT
66755: IFFALSE 66759
// exit ;
66757: GO 66913
// for i in tmp do
66759: LD_ADDR_VAR 0 1
66763: PUSH
66764: LD_VAR 0 5
66768: PUSH
66769: FOR_IN
66770: IFFALSE 66911
// begin d := rand ( 0 , 5 ) ;
66772: LD_ADDR_VAR 0 4
66776: PUSH
66777: LD_INT 0
66779: PPUSH
66780: LD_INT 5
66782: PPUSH
66783: CALL_OW 12
66787: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
66788: LD_ADDR_VAR 0 2
66792: PUSH
66793: LD_VAR 0 1
66797: PPUSH
66798: CALL_OW 250
66802: PPUSH
66803: LD_VAR 0 4
66807: PPUSH
66808: LD_INT 3
66810: PPUSH
66811: LD_INT 12
66813: PPUSH
66814: CALL_OW 12
66818: PPUSH
66819: CALL_OW 272
66823: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
66824: LD_ADDR_VAR 0 3
66828: PUSH
66829: LD_VAR 0 1
66833: PPUSH
66834: CALL_OW 251
66838: PPUSH
66839: LD_VAR 0 4
66843: PPUSH
66844: LD_INT 3
66846: PPUSH
66847: LD_INT 12
66849: PPUSH
66850: CALL_OW 12
66854: PPUSH
66855: CALL_OW 273
66859: ST_TO_ADDR
// if ValidHex ( x , y ) then
66860: LD_VAR 0 2
66864: PPUSH
66865: LD_VAR 0 3
66869: PPUSH
66870: CALL_OW 488
66874: IFFALSE 66909
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
66876: LD_VAR 0 1
66880: PPUSH
66881: LD_VAR 0 2
66885: PPUSH
66886: LD_VAR 0 3
66890: PPUSH
66891: LD_INT 3
66893: PPUSH
66894: LD_INT 6
66896: PPUSH
66897: CALL_OW 12
66901: PPUSH
66902: LD_INT 1
66904: PPUSH
66905: CALL_OW 483
// end ;
66909: GO 66769
66911: POP
66912: POP
// end ;
66913: PPOPN 5
66915: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
66916: LD_EXP 44
66920: PUSH
66921: LD_EXP 79
66925: AND
66926: IFFALSE 67020
66928: GO 66930
66930: DISABLE
66931: LD_INT 0
66933: PPUSH
66934: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
66935: LD_ADDR_VAR 0 2
66939: PUSH
66940: LD_INT 22
66942: PUSH
66943: LD_OWVAR 2
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 32
66954: PUSH
66955: LD_INT 1
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 21
66964: PUSH
66965: LD_INT 2
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: LIST
66976: PPUSH
66977: CALL_OW 69
66981: ST_TO_ADDR
// if not tmp then
66982: LD_VAR 0 2
66986: NOT
66987: IFFALSE 66991
// exit ;
66989: GO 67020
// for i in tmp do
66991: LD_ADDR_VAR 0 1
66995: PUSH
66996: LD_VAR 0 2
67000: PUSH
67001: FOR_IN
67002: IFFALSE 67018
// SetFuel ( i , 0 ) ;
67004: LD_VAR 0 1
67008: PPUSH
67009: LD_INT 0
67011: PPUSH
67012: CALL_OW 240
67016: GO 67001
67018: POP
67019: POP
// end ;
67020: PPOPN 2
67022: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
67023: LD_EXP 44
67027: PUSH
67028: LD_EXP 80
67032: AND
67033: IFFALSE 67099
67035: GO 67037
67037: DISABLE
67038: LD_INT 0
67040: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
67041: LD_ADDR_VAR 0 1
67045: PUSH
67046: LD_INT 22
67048: PUSH
67049: LD_OWVAR 2
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 30
67060: PUSH
67061: LD_INT 29
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PPUSH
67072: CALL_OW 69
67076: ST_TO_ADDR
// if not tmp then
67077: LD_VAR 0 1
67081: NOT
67082: IFFALSE 67086
// exit ;
67084: GO 67099
// DestroyUnit ( tmp [ 1 ] ) ;
67086: LD_VAR 0 1
67090: PUSH
67091: LD_INT 1
67093: ARRAY
67094: PPUSH
67095: CALL_OW 65
// end ;
67099: PPOPN 1
67101: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
67102: LD_EXP 44
67106: PUSH
67107: LD_EXP 82
67111: AND
67112: IFFALSE 67241
67114: GO 67116
67116: DISABLE
67117: LD_INT 0
67119: PPUSH
// begin uc_side := 0 ;
67120: LD_ADDR_OWVAR 20
67124: PUSH
67125: LD_INT 0
67127: ST_TO_ADDR
// uc_nation := nation_arabian ;
67128: LD_ADDR_OWVAR 21
67132: PUSH
67133: LD_INT 2
67135: ST_TO_ADDR
// hc_gallery :=  ;
67136: LD_ADDR_OWVAR 33
67140: PUSH
67141: LD_STRING 
67143: ST_TO_ADDR
// hc_name :=  ;
67144: LD_ADDR_OWVAR 26
67148: PUSH
67149: LD_STRING 
67151: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
67152: LD_INT 1
67154: PPUSH
67155: LD_INT 11
67157: PPUSH
67158: LD_INT 10
67160: PPUSH
67161: CALL_OW 380
// un := CreateHuman ;
67165: LD_ADDR_VAR 0 1
67169: PUSH
67170: CALL_OW 44
67174: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67175: LD_VAR 0 1
67179: PPUSH
67180: LD_INT 1
67182: PPUSH
67183: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
67187: LD_INT 35
67189: PPUSH
67190: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
67194: LD_VAR 0 1
67198: PPUSH
67199: LD_INT 22
67201: PUSH
67202: LD_OWVAR 2
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PPUSH
67211: CALL_OW 69
67215: PPUSH
67216: LD_VAR 0 1
67220: PPUSH
67221: CALL_OW 74
67225: PPUSH
67226: CALL_OW 115
// until IsDead ( un ) ;
67230: LD_VAR 0 1
67234: PPUSH
67235: CALL_OW 301
67239: IFFALSE 67187
// end ;
67241: PPOPN 1
67243: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
67244: LD_EXP 44
67248: PUSH
67249: LD_EXP 84
67253: AND
67254: IFFALSE 67266
67256: GO 67258
67258: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
67259: LD_STRING earthquake(getX(game), 0, 32)
67261: PPUSH
67262: CALL_OW 559
67266: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
67267: LD_EXP 44
67271: PUSH
67272: LD_EXP 85
67276: AND
67277: IFFALSE 67368
67279: GO 67281
67281: DISABLE
67282: LD_INT 0
67284: PPUSH
// begin enable ;
67285: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
67286: LD_ADDR_VAR 0 1
67290: PUSH
67291: LD_INT 22
67293: PUSH
67294: LD_OWVAR 2
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 21
67305: PUSH
67306: LD_INT 2
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: LD_INT 33
67315: PUSH
67316: LD_INT 3
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: LIST
67327: PPUSH
67328: CALL_OW 69
67332: ST_TO_ADDR
// if not tmp then
67333: LD_VAR 0 1
67337: NOT
67338: IFFALSE 67342
// exit ;
67340: GO 67368
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
67342: LD_VAR 0 1
67346: PUSH
67347: LD_INT 1
67349: PPUSH
67350: LD_VAR 0 1
67354: PPUSH
67355: CALL_OW 12
67359: ARRAY
67360: PPUSH
67361: LD_INT 1
67363: PPUSH
67364: CALL_OW 234
// end ;
67368: PPOPN 1
67370: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
67371: LD_EXP 44
67375: PUSH
67376: LD_EXP 86
67380: AND
67381: IFFALSE 67522
67383: GO 67385
67385: DISABLE
67386: LD_INT 0
67388: PPUSH
67389: PPUSH
67390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67391: LD_ADDR_VAR 0 3
67395: PUSH
67396: LD_INT 22
67398: PUSH
67399: LD_OWVAR 2
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 25
67410: PUSH
67411: LD_INT 1
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PPUSH
67422: CALL_OW 69
67426: ST_TO_ADDR
// if not tmp then
67427: LD_VAR 0 3
67431: NOT
67432: IFFALSE 67436
// exit ;
67434: GO 67522
// un := tmp [ rand ( 1 , tmp ) ] ;
67436: LD_ADDR_VAR 0 2
67440: PUSH
67441: LD_VAR 0 3
67445: PUSH
67446: LD_INT 1
67448: PPUSH
67449: LD_VAR 0 3
67453: PPUSH
67454: CALL_OW 12
67458: ARRAY
67459: ST_TO_ADDR
// if Crawls ( un ) then
67460: LD_VAR 0 2
67464: PPUSH
67465: CALL_OW 318
67469: IFFALSE 67480
// ComWalk ( un ) ;
67471: LD_VAR 0 2
67475: PPUSH
67476: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
67480: LD_VAR 0 2
67484: PPUSH
67485: LD_INT 9
67487: PPUSH
67488: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
67492: LD_INT 28
67494: PPUSH
67495: LD_OWVAR 2
67499: PPUSH
67500: LD_INT 2
67502: PPUSH
67503: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
67507: LD_INT 29
67509: PPUSH
67510: LD_OWVAR 2
67514: PPUSH
67515: LD_INT 2
67517: PPUSH
67518: CALL_OW 322
// end ;
67522: PPOPN 3
67524: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
67525: LD_EXP 44
67529: PUSH
67530: LD_EXP 87
67534: AND
67535: IFFALSE 67646
67537: GO 67539
67539: DISABLE
67540: LD_INT 0
67542: PPUSH
67543: PPUSH
67544: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67545: LD_ADDR_VAR 0 3
67549: PUSH
67550: LD_INT 22
67552: PUSH
67553: LD_OWVAR 2
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: PUSH
67562: LD_INT 25
67564: PUSH
67565: LD_INT 1
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PPUSH
67576: CALL_OW 69
67580: ST_TO_ADDR
// if not tmp then
67581: LD_VAR 0 3
67585: NOT
67586: IFFALSE 67590
// exit ;
67588: GO 67646
// un := tmp [ rand ( 1 , tmp ) ] ;
67590: LD_ADDR_VAR 0 2
67594: PUSH
67595: LD_VAR 0 3
67599: PUSH
67600: LD_INT 1
67602: PPUSH
67603: LD_VAR 0 3
67607: PPUSH
67608: CALL_OW 12
67612: ARRAY
67613: ST_TO_ADDR
// if Crawls ( un ) then
67614: LD_VAR 0 2
67618: PPUSH
67619: CALL_OW 318
67623: IFFALSE 67634
// ComWalk ( un ) ;
67625: LD_VAR 0 2
67629: PPUSH
67630: CALL_OW 138
// SetClass ( un , class_mortar ) ;
67634: LD_VAR 0 2
67638: PPUSH
67639: LD_INT 8
67641: PPUSH
67642: CALL_OW 336
// end ;
67646: PPOPN 3
67648: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
67649: LD_EXP 44
67653: PUSH
67654: LD_EXP 88
67658: AND
67659: IFFALSE 67803
67661: GO 67663
67663: DISABLE
67664: LD_INT 0
67666: PPUSH
67667: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
67668: LD_ADDR_VAR 0 2
67672: PUSH
67673: LD_INT 22
67675: PUSH
67676: LD_OWVAR 2
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 21
67687: PUSH
67688: LD_INT 2
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 2
67697: PUSH
67698: LD_INT 34
67700: PUSH
67701: LD_INT 12
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: PUSH
67708: LD_INT 34
67710: PUSH
67711: LD_INT 51
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: LD_INT 34
67720: PUSH
67721: LD_INT 32
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: LIST
67738: PPUSH
67739: CALL_OW 69
67743: ST_TO_ADDR
// if not tmp then
67744: LD_VAR 0 2
67748: NOT
67749: IFFALSE 67753
// exit ;
67751: GO 67803
// for i in tmp do
67753: LD_ADDR_VAR 0 1
67757: PUSH
67758: LD_VAR 0 2
67762: PUSH
67763: FOR_IN
67764: IFFALSE 67801
// if GetCargo ( i , mat_artifact ) = 0 then
67766: LD_VAR 0 1
67770: PPUSH
67771: LD_INT 4
67773: PPUSH
67774: CALL_OW 289
67778: PUSH
67779: LD_INT 0
67781: EQUAL
67782: IFFALSE 67799
// SetCargo ( i , mat_siberit , 100 ) ;
67784: LD_VAR 0 1
67788: PPUSH
67789: LD_INT 3
67791: PPUSH
67792: LD_INT 100
67794: PPUSH
67795: CALL_OW 290
67799: GO 67763
67801: POP
67802: POP
// end ;
67803: PPOPN 2
67805: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
67806: LD_EXP 44
67810: PUSH
67811: LD_EXP 89
67815: AND
67816: IFFALSE 67999
67818: GO 67820
67820: DISABLE
67821: LD_INT 0
67823: PPUSH
67824: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
67825: LD_ADDR_VAR 0 2
67829: PUSH
67830: LD_INT 22
67832: PUSH
67833: LD_OWVAR 2
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PPUSH
67842: CALL_OW 69
67846: ST_TO_ADDR
// if not tmp then
67847: LD_VAR 0 2
67851: NOT
67852: IFFALSE 67856
// exit ;
67854: GO 67999
// for i := 1 to 2 do
67856: LD_ADDR_VAR 0 1
67860: PUSH
67861: DOUBLE
67862: LD_INT 1
67864: DEC
67865: ST_TO_ADDR
67866: LD_INT 2
67868: PUSH
67869: FOR_TO
67870: IFFALSE 67997
// begin uc_side := your_side ;
67872: LD_ADDR_OWVAR 20
67876: PUSH
67877: LD_OWVAR 2
67881: ST_TO_ADDR
// uc_nation := nation_american ;
67882: LD_ADDR_OWVAR 21
67886: PUSH
67887: LD_INT 1
67889: ST_TO_ADDR
// vc_chassis := us_morphling ;
67890: LD_ADDR_OWVAR 37
67894: PUSH
67895: LD_INT 5
67897: ST_TO_ADDR
// vc_engine := engine_siberite ;
67898: LD_ADDR_OWVAR 39
67902: PUSH
67903: LD_INT 3
67905: ST_TO_ADDR
// vc_control := control_computer ;
67906: LD_ADDR_OWVAR 38
67910: PUSH
67911: LD_INT 3
67913: ST_TO_ADDR
// vc_weapon := us_double_laser ;
67914: LD_ADDR_OWVAR 40
67918: PUSH
67919: LD_INT 10
67921: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
67922: LD_VAR 0 2
67926: PUSH
67927: LD_INT 1
67929: ARRAY
67930: PPUSH
67931: CALL_OW 310
67935: NOT
67936: IFFALSE 67983
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
67938: CALL_OW 45
67942: PPUSH
67943: LD_VAR 0 2
67947: PUSH
67948: LD_INT 1
67950: ARRAY
67951: PPUSH
67952: CALL_OW 250
67956: PPUSH
67957: LD_VAR 0 2
67961: PUSH
67962: LD_INT 1
67964: ARRAY
67965: PPUSH
67966: CALL_OW 251
67970: PPUSH
67971: LD_INT 12
67973: PPUSH
67974: LD_INT 1
67976: PPUSH
67977: CALL_OW 50
67981: GO 67995
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
67983: CALL_OW 45
67987: PPUSH
67988: LD_INT 1
67990: PPUSH
67991: CALL_OW 51
// end ;
67995: GO 67869
67997: POP
67998: POP
// end ;
67999: PPOPN 2
68001: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
68002: LD_EXP 44
68006: PUSH
68007: LD_EXP 90
68011: AND
68012: IFFALSE 68234
68014: GO 68016
68016: DISABLE
68017: LD_INT 0
68019: PPUSH
68020: PPUSH
68021: PPUSH
68022: PPUSH
68023: PPUSH
68024: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68025: LD_ADDR_VAR 0 6
68029: PUSH
68030: LD_INT 22
68032: PUSH
68033: LD_OWVAR 2
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PUSH
68042: LD_INT 21
68044: PUSH
68045: LD_INT 1
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 3
68054: PUSH
68055: LD_INT 23
68057: PUSH
68058: LD_INT 0
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: LIST
68073: PPUSH
68074: CALL_OW 69
68078: ST_TO_ADDR
// if not tmp then
68079: LD_VAR 0 6
68083: NOT
68084: IFFALSE 68088
// exit ;
68086: GO 68234
// s1 := rand ( 1 , 4 ) ;
68088: LD_ADDR_VAR 0 2
68092: PUSH
68093: LD_INT 1
68095: PPUSH
68096: LD_INT 4
68098: PPUSH
68099: CALL_OW 12
68103: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
68104: LD_ADDR_VAR 0 4
68108: PUSH
68109: LD_VAR 0 6
68113: PUSH
68114: LD_INT 1
68116: ARRAY
68117: PPUSH
68118: LD_VAR 0 2
68122: PPUSH
68123: CALL_OW 259
68127: ST_TO_ADDR
// if s1 = 1 then
68128: LD_VAR 0 2
68132: PUSH
68133: LD_INT 1
68135: EQUAL
68136: IFFALSE 68156
// s2 := rand ( 2 , 4 ) else
68138: LD_ADDR_VAR 0 3
68142: PUSH
68143: LD_INT 2
68145: PPUSH
68146: LD_INT 4
68148: PPUSH
68149: CALL_OW 12
68153: ST_TO_ADDR
68154: GO 68164
// s2 := 1 ;
68156: LD_ADDR_VAR 0 3
68160: PUSH
68161: LD_INT 1
68163: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
68164: LD_ADDR_VAR 0 5
68168: PUSH
68169: LD_VAR 0 6
68173: PUSH
68174: LD_INT 1
68176: ARRAY
68177: PPUSH
68178: LD_VAR 0 3
68182: PPUSH
68183: CALL_OW 259
68187: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
68188: LD_VAR 0 6
68192: PUSH
68193: LD_INT 1
68195: ARRAY
68196: PPUSH
68197: LD_VAR 0 2
68201: PPUSH
68202: LD_VAR 0 5
68206: PPUSH
68207: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
68211: LD_VAR 0 6
68215: PUSH
68216: LD_INT 1
68218: ARRAY
68219: PPUSH
68220: LD_VAR 0 3
68224: PPUSH
68225: LD_VAR 0 4
68229: PPUSH
68230: CALL_OW 237
// end ;
68234: PPOPN 6
68236: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
68237: LD_EXP 44
68241: PUSH
68242: LD_EXP 91
68246: AND
68247: IFFALSE 68326
68249: GO 68251
68251: DISABLE
68252: LD_INT 0
68254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
68255: LD_ADDR_VAR 0 1
68259: PUSH
68260: LD_INT 22
68262: PUSH
68263: LD_OWVAR 2
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 30
68274: PUSH
68275: LD_INT 3
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: PPUSH
68286: CALL_OW 69
68290: ST_TO_ADDR
// if not tmp then
68291: LD_VAR 0 1
68295: NOT
68296: IFFALSE 68300
// exit ;
68298: GO 68326
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
68300: LD_VAR 0 1
68304: PUSH
68305: LD_INT 1
68307: PPUSH
68308: LD_VAR 0 1
68312: PPUSH
68313: CALL_OW 12
68317: ARRAY
68318: PPUSH
68319: LD_INT 1
68321: PPUSH
68322: CALL_OW 234
// end ;
68326: PPOPN 1
68328: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
68329: LD_EXP 44
68333: PUSH
68334: LD_EXP 92
68338: AND
68339: IFFALSE 68451
68341: GO 68343
68343: DISABLE
68344: LD_INT 0
68346: PPUSH
68347: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
68348: LD_ADDR_VAR 0 2
68352: PUSH
68353: LD_INT 22
68355: PUSH
68356: LD_OWVAR 2
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 2
68367: PUSH
68368: LD_INT 30
68370: PUSH
68371: LD_INT 27
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: PUSH
68378: LD_INT 30
68380: PUSH
68381: LD_INT 26
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PUSH
68388: LD_INT 30
68390: PUSH
68391: LD_INT 28
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: LIST
68402: LIST
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PPUSH
68408: CALL_OW 69
68412: ST_TO_ADDR
// if not tmp then
68413: LD_VAR 0 2
68417: NOT
68418: IFFALSE 68422
// exit ;
68420: GO 68451
// for i in tmp do
68422: LD_ADDR_VAR 0 1
68426: PUSH
68427: LD_VAR 0 2
68431: PUSH
68432: FOR_IN
68433: IFFALSE 68449
// SetLives ( i , 1 ) ;
68435: LD_VAR 0 1
68439: PPUSH
68440: LD_INT 1
68442: PPUSH
68443: CALL_OW 234
68447: GO 68432
68449: POP
68450: POP
// end ;
68451: PPOPN 2
68453: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
68454: LD_EXP 44
68458: PUSH
68459: LD_EXP 93
68463: AND
68464: IFFALSE 68738
68466: GO 68468
68468: DISABLE
68469: LD_INT 0
68471: PPUSH
68472: PPUSH
68473: PPUSH
// begin i := rand ( 1 , 7 ) ;
68474: LD_ADDR_VAR 0 1
68478: PUSH
68479: LD_INT 1
68481: PPUSH
68482: LD_INT 7
68484: PPUSH
68485: CALL_OW 12
68489: ST_TO_ADDR
// case i of 1 :
68490: LD_VAR 0 1
68494: PUSH
68495: LD_INT 1
68497: DOUBLE
68498: EQUAL
68499: IFTRUE 68503
68501: GO 68513
68503: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
68504: LD_STRING earthquake(getX(game), 0, 32)
68506: PPUSH
68507: CALL_OW 559
68511: GO 68738
68513: LD_INT 2
68515: DOUBLE
68516: EQUAL
68517: IFTRUE 68521
68519: GO 68535
68521: POP
// begin ToLua ( displayStucuk(); ) ;
68522: LD_STRING displayStucuk();
68524: PPUSH
68525: CALL_OW 559
// ResetFog ;
68529: CALL_OW 335
// end ; 3 :
68533: GO 68738
68535: LD_INT 3
68537: DOUBLE
68538: EQUAL
68539: IFTRUE 68543
68541: GO 68647
68543: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68544: LD_ADDR_VAR 0 2
68548: PUSH
68549: LD_INT 22
68551: PUSH
68552: LD_OWVAR 2
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: PUSH
68561: LD_INT 25
68563: PUSH
68564: LD_INT 1
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: EMPTY
68572: LIST
68573: LIST
68574: PPUSH
68575: CALL_OW 69
68579: ST_TO_ADDR
// if not tmp then
68580: LD_VAR 0 2
68584: NOT
68585: IFFALSE 68589
// exit ;
68587: GO 68738
// un := tmp [ rand ( 1 , tmp ) ] ;
68589: LD_ADDR_VAR 0 3
68593: PUSH
68594: LD_VAR 0 2
68598: PUSH
68599: LD_INT 1
68601: PPUSH
68602: LD_VAR 0 2
68606: PPUSH
68607: CALL_OW 12
68611: ARRAY
68612: ST_TO_ADDR
// if Crawls ( un ) then
68613: LD_VAR 0 3
68617: PPUSH
68618: CALL_OW 318
68622: IFFALSE 68633
// ComWalk ( un ) ;
68624: LD_VAR 0 3
68628: PPUSH
68629: CALL_OW 138
// SetClass ( un , class_mortar ) ;
68633: LD_VAR 0 3
68637: PPUSH
68638: LD_INT 8
68640: PPUSH
68641: CALL_OW 336
// end ; 4 :
68645: GO 68738
68647: LD_INT 4
68649: DOUBLE
68650: EQUAL
68651: IFTRUE 68655
68653: GO 68716
68655: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
68656: LD_ADDR_VAR 0 2
68660: PUSH
68661: LD_INT 22
68663: PUSH
68664: LD_OWVAR 2
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: PUSH
68673: LD_INT 30
68675: PUSH
68676: LD_INT 29
68678: PUSH
68679: EMPTY
68680: LIST
68681: LIST
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: PPUSH
68687: CALL_OW 69
68691: ST_TO_ADDR
// if not tmp then
68692: LD_VAR 0 2
68696: NOT
68697: IFFALSE 68701
// exit ;
68699: GO 68738
// DestroyUnit ( tmp [ 1 ] ) ;
68701: LD_VAR 0 2
68705: PUSH
68706: LD_INT 1
68708: ARRAY
68709: PPUSH
68710: CALL_OW 65
// end ; 5 .. 7 :
68714: GO 68738
68716: LD_INT 5
68718: DOUBLE
68719: GREATEREQUAL
68720: IFFALSE 68728
68722: LD_INT 7
68724: DOUBLE
68725: LESSEQUAL
68726: IFTRUE 68730
68728: GO 68737
68730: POP
// StreamSibBomb ; end ;
68731: CALL 64988 0 0
68735: GO 68738
68737: POP
// end ;
68738: PPOPN 3
68740: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
68741: LD_EXP 44
68745: PUSH
68746: LD_EXP 94
68750: AND
68751: IFFALSE 68907
68753: GO 68755
68755: DISABLE
68756: LD_INT 0
68758: PPUSH
68759: PPUSH
68760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
68761: LD_ADDR_VAR 0 2
68765: PUSH
68766: LD_INT 81
68768: PUSH
68769: LD_OWVAR 2
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: PUSH
68778: LD_INT 2
68780: PUSH
68781: LD_INT 21
68783: PUSH
68784: LD_INT 1
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PUSH
68791: LD_INT 21
68793: PUSH
68794: LD_INT 2
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: LIST
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PPUSH
68810: CALL_OW 69
68814: ST_TO_ADDR
// if not tmp then
68815: LD_VAR 0 2
68819: NOT
68820: IFFALSE 68824
// exit ;
68822: GO 68907
// p := 0 ;
68824: LD_ADDR_VAR 0 3
68828: PUSH
68829: LD_INT 0
68831: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
68832: LD_INT 35
68834: PPUSH
68835: CALL_OW 67
// p := p + 1 ;
68839: LD_ADDR_VAR 0 3
68843: PUSH
68844: LD_VAR 0 3
68848: PUSH
68849: LD_INT 1
68851: PLUS
68852: ST_TO_ADDR
// for i in tmp do
68853: LD_ADDR_VAR 0 1
68857: PUSH
68858: LD_VAR 0 2
68862: PUSH
68863: FOR_IN
68864: IFFALSE 68895
// if GetLives ( i ) < 1000 then
68866: LD_VAR 0 1
68870: PPUSH
68871: CALL_OW 256
68875: PUSH
68876: LD_INT 1000
68878: LESS
68879: IFFALSE 68893
// SetLives ( i , 1000 ) ;
68881: LD_VAR 0 1
68885: PPUSH
68886: LD_INT 1000
68888: PPUSH
68889: CALL_OW 234
68893: GO 68863
68895: POP
68896: POP
// until p > 20 ;
68897: LD_VAR 0 3
68901: PUSH
68902: LD_INT 20
68904: GREATER
68905: IFFALSE 68832
// end ;
68907: PPOPN 3
68909: END
// every 0 0$1 trigger StreamModeActive and sTime do
68910: LD_EXP 44
68914: PUSH
68915: LD_EXP 95
68919: AND
68920: IFFALSE 68955
68922: GO 68924
68924: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
68925: LD_INT 28
68927: PPUSH
68928: LD_OWVAR 2
68932: PPUSH
68933: LD_INT 2
68935: PPUSH
68936: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
68940: LD_INT 30
68942: PPUSH
68943: LD_OWVAR 2
68947: PPUSH
68948: LD_INT 2
68950: PPUSH
68951: CALL_OW 322
// end ;
68955: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
68956: LD_EXP 44
68960: PUSH
68961: LD_EXP 96
68965: AND
68966: IFFALSE 69087
68968: GO 68970
68970: DISABLE
68971: LD_INT 0
68973: PPUSH
68974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68975: LD_ADDR_VAR 0 2
68979: PUSH
68980: LD_INT 22
68982: PUSH
68983: LD_OWVAR 2
68987: PUSH
68988: EMPTY
68989: LIST
68990: LIST
68991: PUSH
68992: LD_INT 21
68994: PUSH
68995: LD_INT 1
68997: PUSH
68998: EMPTY
68999: LIST
69000: LIST
69001: PUSH
69002: LD_INT 3
69004: PUSH
69005: LD_INT 23
69007: PUSH
69008: LD_INT 0
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PUSH
69019: EMPTY
69020: LIST
69021: LIST
69022: LIST
69023: PPUSH
69024: CALL_OW 69
69028: ST_TO_ADDR
// if not tmp then
69029: LD_VAR 0 2
69033: NOT
69034: IFFALSE 69038
// exit ;
69036: GO 69087
// for i in tmp do
69038: LD_ADDR_VAR 0 1
69042: PUSH
69043: LD_VAR 0 2
69047: PUSH
69048: FOR_IN
69049: IFFALSE 69085
// begin if Crawls ( i ) then
69051: LD_VAR 0 1
69055: PPUSH
69056: CALL_OW 318
69060: IFFALSE 69071
// ComWalk ( i ) ;
69062: LD_VAR 0 1
69066: PPUSH
69067: CALL_OW 138
// SetClass ( i , 2 ) ;
69071: LD_VAR 0 1
69075: PPUSH
69076: LD_INT 2
69078: PPUSH
69079: CALL_OW 336
// end ;
69083: GO 69048
69085: POP
69086: POP
// end ;
69087: PPOPN 2
69089: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
69090: LD_EXP 44
69094: PUSH
69095: LD_EXP 97
69099: AND
69100: IFFALSE 69381
69102: GO 69104
69104: DISABLE
69105: LD_INT 0
69107: PPUSH
69108: PPUSH
69109: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
69110: LD_OWVAR 2
69114: PPUSH
69115: LD_INT 9
69117: PPUSH
69118: LD_INT 1
69120: PPUSH
69121: LD_INT 1
69123: PPUSH
69124: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
69128: LD_INT 9
69130: PPUSH
69131: LD_OWVAR 2
69135: PPUSH
69136: CALL_OW 343
// uc_side := 9 ;
69140: LD_ADDR_OWVAR 20
69144: PUSH
69145: LD_INT 9
69147: ST_TO_ADDR
// uc_nation := 2 ;
69148: LD_ADDR_OWVAR 21
69152: PUSH
69153: LD_INT 2
69155: ST_TO_ADDR
// hc_name := Dark Warrior ;
69156: LD_ADDR_OWVAR 26
69160: PUSH
69161: LD_STRING Dark Warrior
69163: ST_TO_ADDR
// hc_gallery :=  ;
69164: LD_ADDR_OWVAR 33
69168: PUSH
69169: LD_STRING 
69171: ST_TO_ADDR
// hc_noskilllimit := true ;
69172: LD_ADDR_OWVAR 76
69176: PUSH
69177: LD_INT 1
69179: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
69180: LD_ADDR_OWVAR 31
69184: PUSH
69185: LD_INT 30
69187: PUSH
69188: LD_INT 30
69190: PUSH
69191: LD_INT 30
69193: PUSH
69194: LD_INT 30
69196: PUSH
69197: EMPTY
69198: LIST
69199: LIST
69200: LIST
69201: LIST
69202: ST_TO_ADDR
// un := CreateHuman ;
69203: LD_ADDR_VAR 0 3
69207: PUSH
69208: CALL_OW 44
69212: ST_TO_ADDR
// hc_noskilllimit := false ;
69213: LD_ADDR_OWVAR 76
69217: PUSH
69218: LD_INT 0
69220: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
69221: LD_VAR 0 3
69225: PPUSH
69226: LD_INT 1
69228: PPUSH
69229: CALL_OW 51
// p := 0 ;
69233: LD_ADDR_VAR 0 2
69237: PUSH
69238: LD_INT 0
69240: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69241: LD_INT 35
69243: PPUSH
69244: CALL_OW 67
// p := p + 1 ;
69248: LD_ADDR_VAR 0 2
69252: PUSH
69253: LD_VAR 0 2
69257: PUSH
69258: LD_INT 1
69260: PLUS
69261: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
69262: LD_VAR 0 3
69266: PPUSH
69267: CALL_OW 256
69271: PUSH
69272: LD_INT 1000
69274: LESS
69275: IFFALSE 69289
// SetLives ( un , 1000 ) ;
69277: LD_VAR 0 3
69281: PPUSH
69282: LD_INT 1000
69284: PPUSH
69285: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
69289: LD_VAR 0 3
69293: PPUSH
69294: LD_INT 81
69296: PUSH
69297: LD_OWVAR 2
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: LD_INT 91
69308: PUSH
69309: LD_VAR 0 3
69313: PUSH
69314: LD_INT 30
69316: PUSH
69317: EMPTY
69318: LIST
69319: LIST
69320: LIST
69321: PUSH
69322: EMPTY
69323: LIST
69324: LIST
69325: PPUSH
69326: CALL_OW 69
69330: PPUSH
69331: LD_VAR 0 3
69335: PPUSH
69336: CALL_OW 74
69340: PPUSH
69341: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
69345: LD_VAR 0 2
69349: PUSH
69350: LD_INT 60
69352: GREATER
69353: PUSH
69354: LD_VAR 0 3
69358: PPUSH
69359: CALL_OW 301
69363: OR
69364: IFFALSE 69241
// if un then
69366: LD_VAR 0 3
69370: IFFALSE 69381
// RemoveUnit ( un ) ;
69372: LD_VAR 0 3
69376: PPUSH
69377: CALL_OW 64
// end ;
69381: PPOPN 3
69383: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
69384: LD_INT 0
69386: PPUSH
// case cmd of 301 :
69387: LD_VAR 0 1
69391: PUSH
69392: LD_INT 301
69394: DOUBLE
69395: EQUAL
69396: IFTRUE 69400
69398: GO 69432
69400: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
69401: LD_VAR 0 6
69405: PPUSH
69406: LD_VAR 0 7
69410: PPUSH
69411: LD_VAR 0 8
69415: PPUSH
69416: LD_VAR 0 4
69420: PPUSH
69421: LD_VAR 0 5
69425: PPUSH
69426: CALL 70633 0 5
69430: GO 69553
69432: LD_INT 302
69434: DOUBLE
69435: EQUAL
69436: IFTRUE 69440
69438: GO 69477
69440: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
69441: LD_VAR 0 6
69445: PPUSH
69446: LD_VAR 0 7
69450: PPUSH
69451: LD_VAR 0 8
69455: PPUSH
69456: LD_VAR 0 9
69460: PPUSH
69461: LD_VAR 0 4
69465: PPUSH
69466: LD_VAR 0 5
69470: PPUSH
69471: CALL 70724 0 6
69475: GO 69553
69477: LD_INT 303
69479: DOUBLE
69480: EQUAL
69481: IFTRUE 69485
69483: GO 69522
69485: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
69486: LD_VAR 0 6
69490: PPUSH
69491: LD_VAR 0 7
69495: PPUSH
69496: LD_VAR 0 8
69500: PPUSH
69501: LD_VAR 0 9
69505: PPUSH
69506: LD_VAR 0 4
69510: PPUSH
69511: LD_VAR 0 5
69515: PPUSH
69516: CALL 69558 0 6
69520: GO 69553
69522: LD_INT 304
69524: DOUBLE
69525: EQUAL
69526: IFTRUE 69530
69528: GO 69552
69530: POP
// hHackTeleport ( unit , x , y ) ; end ;
69531: LD_VAR 0 2
69535: PPUSH
69536: LD_VAR 0 4
69540: PPUSH
69541: LD_VAR 0 5
69545: PPUSH
69546: CALL 71317 0 3
69550: GO 69553
69552: POP
// end ;
69553: LD_VAR 0 12
69557: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
69558: LD_INT 0
69560: PPUSH
69561: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
69562: LD_VAR 0 1
69566: PUSH
69567: LD_INT 1
69569: LESS
69570: PUSH
69571: LD_VAR 0 1
69575: PUSH
69576: LD_INT 3
69578: GREATER
69579: OR
69580: PUSH
69581: LD_VAR 0 5
69585: PPUSH
69586: LD_VAR 0 6
69590: PPUSH
69591: CALL_OW 428
69595: OR
69596: IFFALSE 69600
// exit ;
69598: GO 70320
// uc_side := your_side ;
69600: LD_ADDR_OWVAR 20
69604: PUSH
69605: LD_OWVAR 2
69609: ST_TO_ADDR
// uc_nation := nation ;
69610: LD_ADDR_OWVAR 21
69614: PUSH
69615: LD_VAR 0 1
69619: ST_TO_ADDR
// bc_level = 1 ;
69620: LD_ADDR_OWVAR 43
69624: PUSH
69625: LD_INT 1
69627: ST_TO_ADDR
// case btype of 1 :
69628: LD_VAR 0 2
69632: PUSH
69633: LD_INT 1
69635: DOUBLE
69636: EQUAL
69637: IFTRUE 69641
69639: GO 69652
69641: POP
// bc_type := b_depot ; 2 :
69642: LD_ADDR_OWVAR 42
69646: PUSH
69647: LD_INT 0
69649: ST_TO_ADDR
69650: GO 70264
69652: LD_INT 2
69654: DOUBLE
69655: EQUAL
69656: IFTRUE 69660
69658: GO 69671
69660: POP
// bc_type := b_warehouse ; 3 :
69661: LD_ADDR_OWVAR 42
69665: PUSH
69666: LD_INT 1
69668: ST_TO_ADDR
69669: GO 70264
69671: LD_INT 3
69673: DOUBLE
69674: EQUAL
69675: IFTRUE 69679
69677: GO 69690
69679: POP
// bc_type := b_lab ; 4 .. 9 :
69680: LD_ADDR_OWVAR 42
69684: PUSH
69685: LD_INT 6
69687: ST_TO_ADDR
69688: GO 70264
69690: LD_INT 4
69692: DOUBLE
69693: GREATEREQUAL
69694: IFFALSE 69702
69696: LD_INT 9
69698: DOUBLE
69699: LESSEQUAL
69700: IFTRUE 69704
69702: GO 69756
69704: POP
// begin bc_type := b_lab_half ;
69705: LD_ADDR_OWVAR 42
69709: PUSH
69710: LD_INT 7
69712: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
69713: LD_ADDR_OWVAR 44
69717: PUSH
69718: LD_INT 10
69720: PUSH
69721: LD_INT 11
69723: PUSH
69724: LD_INT 12
69726: PUSH
69727: LD_INT 15
69729: PUSH
69730: LD_INT 14
69732: PUSH
69733: LD_INT 13
69735: PUSH
69736: EMPTY
69737: LIST
69738: LIST
69739: LIST
69740: LIST
69741: LIST
69742: LIST
69743: PUSH
69744: LD_VAR 0 2
69748: PUSH
69749: LD_INT 3
69751: MINUS
69752: ARRAY
69753: ST_TO_ADDR
// end ; 10 .. 13 :
69754: GO 70264
69756: LD_INT 10
69758: DOUBLE
69759: GREATEREQUAL
69760: IFFALSE 69768
69762: LD_INT 13
69764: DOUBLE
69765: LESSEQUAL
69766: IFTRUE 69770
69768: GO 69847
69770: POP
// begin bc_type := b_lab_full ;
69771: LD_ADDR_OWVAR 42
69775: PUSH
69776: LD_INT 8
69778: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
69779: LD_ADDR_OWVAR 44
69783: PUSH
69784: LD_INT 10
69786: PUSH
69787: LD_INT 12
69789: PUSH
69790: LD_INT 14
69792: PUSH
69793: LD_INT 13
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: PUSH
69802: LD_VAR 0 2
69806: PUSH
69807: LD_INT 9
69809: MINUS
69810: ARRAY
69811: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
69812: LD_ADDR_OWVAR 45
69816: PUSH
69817: LD_INT 11
69819: PUSH
69820: LD_INT 15
69822: PUSH
69823: LD_INT 12
69825: PUSH
69826: LD_INT 15
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: LIST
69833: LIST
69834: PUSH
69835: LD_VAR 0 2
69839: PUSH
69840: LD_INT 9
69842: MINUS
69843: ARRAY
69844: ST_TO_ADDR
// end ; 14 :
69845: GO 70264
69847: LD_INT 14
69849: DOUBLE
69850: EQUAL
69851: IFTRUE 69855
69853: GO 69866
69855: POP
// bc_type := b_workshop ; 15 :
69856: LD_ADDR_OWVAR 42
69860: PUSH
69861: LD_INT 2
69863: ST_TO_ADDR
69864: GO 70264
69866: LD_INT 15
69868: DOUBLE
69869: EQUAL
69870: IFTRUE 69874
69872: GO 69885
69874: POP
// bc_type := b_factory ; 16 :
69875: LD_ADDR_OWVAR 42
69879: PUSH
69880: LD_INT 3
69882: ST_TO_ADDR
69883: GO 70264
69885: LD_INT 16
69887: DOUBLE
69888: EQUAL
69889: IFTRUE 69893
69891: GO 69904
69893: POP
// bc_type := b_ext_gun ; 17 :
69894: LD_ADDR_OWVAR 42
69898: PUSH
69899: LD_INT 17
69901: ST_TO_ADDR
69902: GO 70264
69904: LD_INT 17
69906: DOUBLE
69907: EQUAL
69908: IFTRUE 69912
69910: GO 69940
69912: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
69913: LD_ADDR_OWVAR 42
69917: PUSH
69918: LD_INT 19
69920: PUSH
69921: LD_INT 23
69923: PUSH
69924: LD_INT 19
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: LIST
69931: PUSH
69932: LD_VAR 0 1
69936: ARRAY
69937: ST_TO_ADDR
69938: GO 70264
69940: LD_INT 18
69942: DOUBLE
69943: EQUAL
69944: IFTRUE 69948
69946: GO 69959
69948: POP
// bc_type := b_ext_radar ; 19 :
69949: LD_ADDR_OWVAR 42
69953: PUSH
69954: LD_INT 20
69956: ST_TO_ADDR
69957: GO 70264
69959: LD_INT 19
69961: DOUBLE
69962: EQUAL
69963: IFTRUE 69967
69965: GO 69978
69967: POP
// bc_type := b_ext_radio ; 20 :
69968: LD_ADDR_OWVAR 42
69972: PUSH
69973: LD_INT 22
69975: ST_TO_ADDR
69976: GO 70264
69978: LD_INT 20
69980: DOUBLE
69981: EQUAL
69982: IFTRUE 69986
69984: GO 69997
69986: POP
// bc_type := b_ext_siberium ; 21 :
69987: LD_ADDR_OWVAR 42
69991: PUSH
69992: LD_INT 21
69994: ST_TO_ADDR
69995: GO 70264
69997: LD_INT 21
69999: DOUBLE
70000: EQUAL
70001: IFTRUE 70005
70003: GO 70016
70005: POP
// bc_type := b_ext_computer ; 22 :
70006: LD_ADDR_OWVAR 42
70010: PUSH
70011: LD_INT 24
70013: ST_TO_ADDR
70014: GO 70264
70016: LD_INT 22
70018: DOUBLE
70019: EQUAL
70020: IFTRUE 70024
70022: GO 70035
70024: POP
// bc_type := b_ext_track ; 23 :
70025: LD_ADDR_OWVAR 42
70029: PUSH
70030: LD_INT 16
70032: ST_TO_ADDR
70033: GO 70264
70035: LD_INT 23
70037: DOUBLE
70038: EQUAL
70039: IFTRUE 70043
70041: GO 70054
70043: POP
// bc_type := b_ext_laser ; 24 :
70044: LD_ADDR_OWVAR 42
70048: PUSH
70049: LD_INT 25
70051: ST_TO_ADDR
70052: GO 70264
70054: LD_INT 24
70056: DOUBLE
70057: EQUAL
70058: IFTRUE 70062
70060: GO 70073
70062: POP
// bc_type := b_control_tower ; 25 :
70063: LD_ADDR_OWVAR 42
70067: PUSH
70068: LD_INT 36
70070: ST_TO_ADDR
70071: GO 70264
70073: LD_INT 25
70075: DOUBLE
70076: EQUAL
70077: IFTRUE 70081
70079: GO 70092
70081: POP
// bc_type := b_breastwork ; 26 :
70082: LD_ADDR_OWVAR 42
70086: PUSH
70087: LD_INT 31
70089: ST_TO_ADDR
70090: GO 70264
70092: LD_INT 26
70094: DOUBLE
70095: EQUAL
70096: IFTRUE 70100
70098: GO 70111
70100: POP
// bc_type := b_bunker ; 27 :
70101: LD_ADDR_OWVAR 42
70105: PUSH
70106: LD_INT 32
70108: ST_TO_ADDR
70109: GO 70264
70111: LD_INT 27
70113: DOUBLE
70114: EQUAL
70115: IFTRUE 70119
70117: GO 70130
70119: POP
// bc_type := b_turret ; 28 :
70120: LD_ADDR_OWVAR 42
70124: PUSH
70125: LD_INT 33
70127: ST_TO_ADDR
70128: GO 70264
70130: LD_INT 28
70132: DOUBLE
70133: EQUAL
70134: IFTRUE 70138
70136: GO 70149
70138: POP
// bc_type := b_armoury ; 29 :
70139: LD_ADDR_OWVAR 42
70143: PUSH
70144: LD_INT 4
70146: ST_TO_ADDR
70147: GO 70264
70149: LD_INT 29
70151: DOUBLE
70152: EQUAL
70153: IFTRUE 70157
70155: GO 70168
70157: POP
// bc_type := b_barracks ; 30 :
70158: LD_ADDR_OWVAR 42
70162: PUSH
70163: LD_INT 5
70165: ST_TO_ADDR
70166: GO 70264
70168: LD_INT 30
70170: DOUBLE
70171: EQUAL
70172: IFTRUE 70176
70174: GO 70187
70176: POP
// bc_type := b_solar_power ; 31 :
70177: LD_ADDR_OWVAR 42
70181: PUSH
70182: LD_INT 27
70184: ST_TO_ADDR
70185: GO 70264
70187: LD_INT 31
70189: DOUBLE
70190: EQUAL
70191: IFTRUE 70195
70193: GO 70206
70195: POP
// bc_type := b_oil_power ; 32 :
70196: LD_ADDR_OWVAR 42
70200: PUSH
70201: LD_INT 26
70203: ST_TO_ADDR
70204: GO 70264
70206: LD_INT 32
70208: DOUBLE
70209: EQUAL
70210: IFTRUE 70214
70212: GO 70225
70214: POP
// bc_type := b_siberite_power ; 33 :
70215: LD_ADDR_OWVAR 42
70219: PUSH
70220: LD_INT 28
70222: ST_TO_ADDR
70223: GO 70264
70225: LD_INT 33
70227: DOUBLE
70228: EQUAL
70229: IFTRUE 70233
70231: GO 70244
70233: POP
// bc_type := b_oil_mine ; 34 :
70234: LD_ADDR_OWVAR 42
70238: PUSH
70239: LD_INT 29
70241: ST_TO_ADDR
70242: GO 70264
70244: LD_INT 34
70246: DOUBLE
70247: EQUAL
70248: IFTRUE 70252
70250: GO 70263
70252: POP
// bc_type := b_siberite_mine ; end ;
70253: LD_ADDR_OWVAR 42
70257: PUSH
70258: LD_INT 30
70260: ST_TO_ADDR
70261: GO 70264
70263: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
70264: LD_ADDR_VAR 0 8
70268: PUSH
70269: LD_VAR 0 5
70273: PPUSH
70274: LD_VAR 0 6
70278: PPUSH
70279: LD_VAR 0 3
70283: PPUSH
70284: CALL_OW 47
70288: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
70289: LD_OWVAR 42
70293: PUSH
70294: LD_INT 32
70296: PUSH
70297: LD_INT 33
70299: PUSH
70300: EMPTY
70301: LIST
70302: LIST
70303: IN
70304: IFFALSE 70320
// PlaceWeaponTurret ( b , weapon ) ;
70306: LD_VAR 0 8
70310: PPUSH
70311: LD_VAR 0 4
70315: PPUSH
70316: CALL_OW 431
// end ;
70320: LD_VAR 0 7
70324: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
70325: LD_INT 0
70327: PPUSH
70328: PPUSH
70329: PPUSH
70330: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70331: LD_ADDR_VAR 0 4
70335: PUSH
70336: LD_INT 22
70338: PUSH
70339: LD_OWVAR 2
70343: PUSH
70344: EMPTY
70345: LIST
70346: LIST
70347: PUSH
70348: LD_INT 2
70350: PUSH
70351: LD_INT 30
70353: PUSH
70354: LD_INT 0
70356: PUSH
70357: EMPTY
70358: LIST
70359: LIST
70360: PUSH
70361: LD_INT 30
70363: PUSH
70364: LD_INT 1
70366: PUSH
70367: EMPTY
70368: LIST
70369: LIST
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: LIST
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: PPUSH
70380: CALL_OW 69
70384: ST_TO_ADDR
// if not tmp then
70385: LD_VAR 0 4
70389: NOT
70390: IFFALSE 70394
// exit ;
70392: GO 70453
// for i in tmp do
70394: LD_ADDR_VAR 0 2
70398: PUSH
70399: LD_VAR 0 4
70403: PUSH
70404: FOR_IN
70405: IFFALSE 70451
// for j = 1 to 3 do
70407: LD_ADDR_VAR 0 3
70411: PUSH
70412: DOUBLE
70413: LD_INT 1
70415: DEC
70416: ST_TO_ADDR
70417: LD_INT 3
70419: PUSH
70420: FOR_TO
70421: IFFALSE 70447
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
70423: LD_VAR 0 2
70427: PPUSH
70428: CALL_OW 274
70432: PPUSH
70433: LD_VAR 0 3
70437: PPUSH
70438: LD_INT 99999
70440: PPUSH
70441: CALL_OW 277
70445: GO 70420
70447: POP
70448: POP
70449: GO 70404
70451: POP
70452: POP
// end ;
70453: LD_VAR 0 1
70457: RET
// export function hHackSetLevel10 ; var i , j ; begin
70458: LD_INT 0
70460: PPUSH
70461: PPUSH
70462: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
70463: LD_ADDR_VAR 0 2
70467: PUSH
70468: LD_INT 21
70470: PUSH
70471: LD_INT 1
70473: PUSH
70474: EMPTY
70475: LIST
70476: LIST
70477: PPUSH
70478: CALL_OW 69
70482: PUSH
70483: FOR_IN
70484: IFFALSE 70536
// if IsSelected ( i ) then
70486: LD_VAR 0 2
70490: PPUSH
70491: CALL_OW 306
70495: IFFALSE 70534
// begin for j := 1 to 4 do
70497: LD_ADDR_VAR 0 3
70501: PUSH
70502: DOUBLE
70503: LD_INT 1
70505: DEC
70506: ST_TO_ADDR
70507: LD_INT 4
70509: PUSH
70510: FOR_TO
70511: IFFALSE 70532
// SetSkill ( i , j , 10 ) ;
70513: LD_VAR 0 2
70517: PPUSH
70518: LD_VAR 0 3
70522: PPUSH
70523: LD_INT 10
70525: PPUSH
70526: CALL_OW 237
70530: GO 70510
70532: POP
70533: POP
// end ;
70534: GO 70483
70536: POP
70537: POP
// end ;
70538: LD_VAR 0 1
70542: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
70543: LD_INT 0
70545: PPUSH
70546: PPUSH
70547: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
70548: LD_ADDR_VAR 0 2
70552: PUSH
70553: LD_INT 22
70555: PUSH
70556: LD_OWVAR 2
70560: PUSH
70561: EMPTY
70562: LIST
70563: LIST
70564: PUSH
70565: LD_INT 21
70567: PUSH
70568: LD_INT 1
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: PUSH
70575: EMPTY
70576: LIST
70577: LIST
70578: PPUSH
70579: CALL_OW 69
70583: PUSH
70584: FOR_IN
70585: IFFALSE 70626
// begin for j := 1 to 4 do
70587: LD_ADDR_VAR 0 3
70591: PUSH
70592: DOUBLE
70593: LD_INT 1
70595: DEC
70596: ST_TO_ADDR
70597: LD_INT 4
70599: PUSH
70600: FOR_TO
70601: IFFALSE 70622
// SetSkill ( i , j , 10 ) ;
70603: LD_VAR 0 2
70607: PPUSH
70608: LD_VAR 0 3
70612: PPUSH
70613: LD_INT 10
70615: PPUSH
70616: CALL_OW 237
70620: GO 70600
70622: POP
70623: POP
// end ;
70624: GO 70584
70626: POP
70627: POP
// end ;
70628: LD_VAR 0 1
70632: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
70633: LD_INT 0
70635: PPUSH
// uc_side := your_side ;
70636: LD_ADDR_OWVAR 20
70640: PUSH
70641: LD_OWVAR 2
70645: ST_TO_ADDR
// uc_nation := nation ;
70646: LD_ADDR_OWVAR 21
70650: PUSH
70651: LD_VAR 0 1
70655: ST_TO_ADDR
// InitHc ;
70656: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
70660: LD_INT 0
70662: PPUSH
70663: LD_VAR 0 2
70667: PPUSH
70668: LD_VAR 0 3
70672: PPUSH
70673: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
70677: LD_VAR 0 4
70681: PPUSH
70682: LD_VAR 0 5
70686: PPUSH
70687: CALL_OW 428
70691: PUSH
70692: LD_INT 0
70694: EQUAL
70695: IFFALSE 70719
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
70697: CALL_OW 44
70701: PPUSH
70702: LD_VAR 0 4
70706: PPUSH
70707: LD_VAR 0 5
70711: PPUSH
70712: LD_INT 1
70714: PPUSH
70715: CALL_OW 48
// end ;
70719: LD_VAR 0 6
70723: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
70724: LD_INT 0
70726: PPUSH
70727: PPUSH
// uc_side := your_side ;
70728: LD_ADDR_OWVAR 20
70732: PUSH
70733: LD_OWVAR 2
70737: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
70738: LD_VAR 0 1
70742: PUSH
70743: LD_INT 1
70745: PUSH
70746: LD_INT 2
70748: PUSH
70749: LD_INT 3
70751: PUSH
70752: LD_INT 4
70754: PUSH
70755: LD_INT 5
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: LIST
70762: LIST
70763: LIST
70764: IN
70765: IFFALSE 70777
// uc_nation := nation_american else
70767: LD_ADDR_OWVAR 21
70771: PUSH
70772: LD_INT 1
70774: ST_TO_ADDR
70775: GO 70820
// if chassis in [ 11 , 12 , 13 , 14 ] then
70777: LD_VAR 0 1
70781: PUSH
70782: LD_INT 11
70784: PUSH
70785: LD_INT 12
70787: PUSH
70788: LD_INT 13
70790: PUSH
70791: LD_INT 14
70793: PUSH
70794: EMPTY
70795: LIST
70796: LIST
70797: LIST
70798: LIST
70799: IN
70800: IFFALSE 70812
// uc_nation := nation_arabian else
70802: LD_ADDR_OWVAR 21
70806: PUSH
70807: LD_INT 2
70809: ST_TO_ADDR
70810: GO 70820
// uc_nation := nation_russian ;
70812: LD_ADDR_OWVAR 21
70816: PUSH
70817: LD_INT 3
70819: ST_TO_ADDR
// vc_chassis := chassis ;
70820: LD_ADDR_OWVAR 37
70824: PUSH
70825: LD_VAR 0 1
70829: ST_TO_ADDR
// vc_engine := engine ;
70830: LD_ADDR_OWVAR 39
70834: PUSH
70835: LD_VAR 0 2
70839: ST_TO_ADDR
// vc_control := control ;
70840: LD_ADDR_OWVAR 38
70844: PUSH
70845: LD_VAR 0 3
70849: ST_TO_ADDR
// vc_weapon := weapon ;
70850: LD_ADDR_OWVAR 40
70854: PUSH
70855: LD_VAR 0 4
70859: ST_TO_ADDR
// un := CreateVehicle ;
70860: LD_ADDR_VAR 0 8
70864: PUSH
70865: CALL_OW 45
70869: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
70870: LD_VAR 0 8
70874: PPUSH
70875: LD_INT 0
70877: PPUSH
70878: LD_INT 5
70880: PPUSH
70881: CALL_OW 12
70885: PPUSH
70886: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
70890: LD_VAR 0 8
70894: PPUSH
70895: LD_VAR 0 5
70899: PPUSH
70900: LD_VAR 0 6
70904: PPUSH
70905: LD_INT 1
70907: PPUSH
70908: CALL_OW 48
// end ;
70912: LD_VAR 0 7
70916: RET
// export hInvincible ; every 1 do
70917: GO 70919
70919: DISABLE
// hInvincible := [ ] ;
70920: LD_ADDR_EXP 98
70924: PUSH
70925: EMPTY
70926: ST_TO_ADDR
70927: END
// every 10 do var i ;
70928: GO 70930
70930: DISABLE
70931: LD_INT 0
70933: PPUSH
// begin enable ;
70934: ENABLE
// if not hInvincible then
70935: LD_EXP 98
70939: NOT
70940: IFFALSE 70944
// exit ;
70942: GO 70988
// for i in hInvincible do
70944: LD_ADDR_VAR 0 1
70948: PUSH
70949: LD_EXP 98
70953: PUSH
70954: FOR_IN
70955: IFFALSE 70986
// if GetLives ( i ) < 1000 then
70957: LD_VAR 0 1
70961: PPUSH
70962: CALL_OW 256
70966: PUSH
70967: LD_INT 1000
70969: LESS
70970: IFFALSE 70984
// SetLives ( i , 1000 ) ;
70972: LD_VAR 0 1
70976: PPUSH
70977: LD_INT 1000
70979: PPUSH
70980: CALL_OW 234
70984: GO 70954
70986: POP
70987: POP
// end ;
70988: PPOPN 1
70990: END
// export function hHackInvincible ; var i ; begin
70991: LD_INT 0
70993: PPUSH
70994: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
70995: LD_ADDR_VAR 0 2
70999: PUSH
71000: LD_INT 2
71002: PUSH
71003: LD_INT 21
71005: PUSH
71006: LD_INT 1
71008: PUSH
71009: EMPTY
71010: LIST
71011: LIST
71012: PUSH
71013: LD_INT 21
71015: PUSH
71016: LD_INT 2
71018: PUSH
71019: EMPTY
71020: LIST
71021: LIST
71022: PUSH
71023: EMPTY
71024: LIST
71025: LIST
71026: LIST
71027: PPUSH
71028: CALL_OW 69
71032: PUSH
71033: FOR_IN
71034: IFFALSE 71095
// if IsSelected ( i ) then
71036: LD_VAR 0 2
71040: PPUSH
71041: CALL_OW 306
71045: IFFALSE 71093
// begin if i in hInvincible then
71047: LD_VAR 0 2
71051: PUSH
71052: LD_EXP 98
71056: IN
71057: IFFALSE 71077
// hInvincible := hInvincible diff i else
71059: LD_ADDR_EXP 98
71063: PUSH
71064: LD_EXP 98
71068: PUSH
71069: LD_VAR 0 2
71073: DIFF
71074: ST_TO_ADDR
71075: GO 71093
// hInvincible := hInvincible union i ;
71077: LD_ADDR_EXP 98
71081: PUSH
71082: LD_EXP 98
71086: PUSH
71087: LD_VAR 0 2
71091: UNION
71092: ST_TO_ADDR
// end ;
71093: GO 71033
71095: POP
71096: POP
// end ;
71097: LD_VAR 0 1
71101: RET
// export function hHackInvisible ; var i , j ; begin
71102: LD_INT 0
71104: PPUSH
71105: PPUSH
71106: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
71107: LD_ADDR_VAR 0 2
71111: PUSH
71112: LD_INT 21
71114: PUSH
71115: LD_INT 1
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: PPUSH
71122: CALL_OW 69
71126: PUSH
71127: FOR_IN
71128: IFFALSE 71152
// if IsSelected ( i ) then
71130: LD_VAR 0 2
71134: PPUSH
71135: CALL_OW 306
71139: IFFALSE 71150
// ComForceInvisible ( i ) ;
71141: LD_VAR 0 2
71145: PPUSH
71146: CALL_OW 496
71150: GO 71127
71152: POP
71153: POP
// end ;
71154: LD_VAR 0 1
71158: RET
// export function hHackChangeYourSide ; begin
71159: LD_INT 0
71161: PPUSH
// if your_side = 8 then
71162: LD_OWVAR 2
71166: PUSH
71167: LD_INT 8
71169: EQUAL
71170: IFFALSE 71182
// your_side := 0 else
71172: LD_ADDR_OWVAR 2
71176: PUSH
71177: LD_INT 0
71179: ST_TO_ADDR
71180: GO 71196
// your_side := your_side + 1 ;
71182: LD_ADDR_OWVAR 2
71186: PUSH
71187: LD_OWVAR 2
71191: PUSH
71192: LD_INT 1
71194: PLUS
71195: ST_TO_ADDR
// end ;
71196: LD_VAR 0 1
71200: RET
// export function hHackChangeUnitSide ; var i , j ; begin
71201: LD_INT 0
71203: PPUSH
71204: PPUSH
71205: PPUSH
// for i in all_units do
71206: LD_ADDR_VAR 0 2
71210: PUSH
71211: LD_OWVAR 3
71215: PUSH
71216: FOR_IN
71217: IFFALSE 71295
// if IsSelected ( i ) then
71219: LD_VAR 0 2
71223: PPUSH
71224: CALL_OW 306
71228: IFFALSE 71293
// begin j := GetSide ( i ) ;
71230: LD_ADDR_VAR 0 3
71234: PUSH
71235: LD_VAR 0 2
71239: PPUSH
71240: CALL_OW 255
71244: ST_TO_ADDR
// if j = 8 then
71245: LD_VAR 0 3
71249: PUSH
71250: LD_INT 8
71252: EQUAL
71253: IFFALSE 71265
// j := 0 else
71255: LD_ADDR_VAR 0 3
71259: PUSH
71260: LD_INT 0
71262: ST_TO_ADDR
71263: GO 71279
// j := j + 1 ;
71265: LD_ADDR_VAR 0 3
71269: PUSH
71270: LD_VAR 0 3
71274: PUSH
71275: LD_INT 1
71277: PLUS
71278: ST_TO_ADDR
// SetSide ( i , j ) ;
71279: LD_VAR 0 2
71283: PPUSH
71284: LD_VAR 0 3
71288: PPUSH
71289: CALL_OW 235
// end ;
71293: GO 71216
71295: POP
71296: POP
// end ;
71297: LD_VAR 0 1
71301: RET
// export function hHackFog ; begin
71302: LD_INT 0
71304: PPUSH
// FogOff ( true ) ;
71305: LD_INT 1
71307: PPUSH
71308: CALL_OW 344
// end ;
71312: LD_VAR 0 1
71316: RET
// export function hHackTeleport ( unit , x , y ) ; begin
71317: LD_INT 0
71319: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
71320: LD_VAR 0 1
71324: PPUSH
71325: LD_VAR 0 2
71329: PPUSH
71330: LD_VAR 0 3
71334: PPUSH
71335: LD_INT 1
71337: PPUSH
71338: LD_INT 1
71340: PPUSH
71341: CALL_OW 483
// CenterOnXY ( x , y ) ;
71345: LD_VAR 0 2
71349: PPUSH
71350: LD_VAR 0 3
71354: PPUSH
71355: CALL_OW 84
// end ; end_of_file
71359: LD_VAR 0 4
71363: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71364: LD_VAR 0 1
71368: PPUSH
71369: LD_VAR 0 2
71373: PPUSH
71374: LD_VAR 0 3
71378: PPUSH
71379: LD_VAR 0 4
71383: PPUSH
71384: LD_VAR 0 5
71388: PPUSH
71389: LD_VAR 0 6
71393: PPUSH
71394: CALL 58192 0 6
// end ; end_of_file end_of_file
71398: PPOPN 6
71400: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
71401: LD_INT 0
71403: PPUSH
// ar_miner := 81 ;
71404: LD_ADDR_EXP 106
71408: PUSH
71409: LD_INT 81
71411: ST_TO_ADDR
// ar_crane := 88 ;
71412: LD_ADDR_EXP 105
71416: PUSH
71417: LD_INT 88
71419: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
71420: LD_ADDR_EXP 100
71424: PUSH
71425: LD_INT 89
71427: ST_TO_ADDR
// us_hack := 99 ;
71428: LD_ADDR_EXP 101
71432: PUSH
71433: LD_INT 99
71435: ST_TO_ADDR
// us_artillery := 97 ;
71436: LD_ADDR_EXP 102
71440: PUSH
71441: LD_INT 97
71443: ST_TO_ADDR
// ar_bio_bomb := 91 ;
71444: LD_ADDR_EXP 103
71448: PUSH
71449: LD_INT 91
71451: ST_TO_ADDR
// ar_mortar := 92 ;
71452: LD_ADDR_EXP 104
71456: PUSH
71457: LD_INT 92
71459: ST_TO_ADDR
// ru_radar := 98 ;
71460: LD_ADDR_EXP 99
71464: PUSH
71465: LD_INT 98
71467: ST_TO_ADDR
// tech_Artillery := 80 ;
71468: LD_ADDR_EXP 107
71472: PUSH
71473: LD_INT 80
71475: ST_TO_ADDR
// tech_RadMat := 81 ;
71476: LD_ADDR_EXP 108
71480: PUSH
71481: LD_INT 81
71483: ST_TO_ADDR
// tech_BasicTools := 82 ;
71484: LD_ADDR_EXP 109
71488: PUSH
71489: LD_INT 82
71491: ST_TO_ADDR
// tech_Cargo := 83 ;
71492: LD_ADDR_EXP 110
71496: PUSH
71497: LD_INT 83
71499: ST_TO_ADDR
// tech_Track := 84 ;
71500: LD_ADDR_EXP 111
71504: PUSH
71505: LD_INT 84
71507: ST_TO_ADDR
// tech_Crane := 85 ;
71508: LD_ADDR_EXP 112
71512: PUSH
71513: LD_INT 85
71515: ST_TO_ADDR
// tech_Bulldozer := 86 ;
71516: LD_ADDR_EXP 113
71520: PUSH
71521: LD_INT 86
71523: ST_TO_ADDR
// tech_Hovercraft := 87 ;
71524: LD_ADDR_EXP 114
71528: PUSH
71529: LD_INT 87
71531: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
71532: LD_ADDR_EXP 115
71536: PUSH
71537: LD_INT 88
71539: ST_TO_ADDR
// class_mastodont := 31 ;
71540: LD_ADDR_EXP 116
71544: PUSH
71545: LD_INT 31
71547: ST_TO_ADDR
// class_horse := 21 ;
71548: LD_ADDR_EXP 117
71552: PUSH
71553: LD_INT 21
71555: ST_TO_ADDR
// end ;
71556: LD_VAR 0 1
71560: RET
// every 1 do
71561: GO 71563
71563: DISABLE
// InitGlobalVariables ;
71564: CALL 71401 0 0
71568: END
