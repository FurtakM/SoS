// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 62 0 0
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// CreateNature ( apemanSpawnArea , forestArea , riverArea ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 5
  20: PPUSH
  21: LD_INT 6
  23: PPUSH
  24: CALL 441 0 3
// PrepareAmerican ;
  28: CALL 2520 0 0
// PrepareArabian ;
  32: CALL 1161 0 0
// Action ;
  36: CALL 8166 0 0
// if debug then
  40: LD_EXP 1
  44: IFFALSE 61
// begin Difficulty := 4 ;
  46: LD_ADDR_OWVAR 67
  50: PUSH
  51: LD_INT 4
  53: ST_TO_ADDR
// FogOff ( 2 ) ;
  54: LD_INT 2
  56: PPUSH
  57: CALL_OW 344
// end ; end ;
  61: END
// export debug , prefix , scoutActive , scoutFailed , scoutSuccess , usAttacksAllowed , usSurrender , russianAttack , hasRockets , seeRemoteVehicle , seeHeavyGun , remoteControlLimit , sniperKillCounter , vehLossCounter ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// debug := false ;
  65: LD_ADDR_EXP 1
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// prefix := 06_ ;
  73: LD_ADDR_EXP 2
  77: PUSH
  78: LD_STRING 06_
  80: ST_TO_ADDR
// scoutActive := 0 ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// scoutFailed := false ;
  89: LD_ADDR_EXP 4
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// scoutSuccess := false ;
  97: LD_ADDR_EXP 5
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// usAttacksAllowed := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usSurrender := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// russianAttack := false ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// hasRockets := false ;
 129: LD_ADDR_EXP 9
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// seeRemoteVehicle := false ;
 137: LD_ADDR_EXP 10
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// seeHeavyGun := false ;
 145: LD_ADDR_EXP 11
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlLimit := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: LD_INT 2
 163: PUSH
 164: LD_INT 2
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// sniperKillCounter := 0 ;
 182: LD_ADDR_EXP 13
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// vehLossCounter := 0 ;
 190: LD_ADDR_EXP 14
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// end ;
 198: LD_VAR 0 1
 202: RET
// every 0 0$2 trigger sniperKillCounter >= 3 do
 203: LD_EXP 13
 207: PUSH
 208: LD_INT 3
 210: GREATEREQUAL
 211: IFFALSE 223
 213: GO 215
 215: DISABLE
// SetAchievement ( ACH_ANTSNIPER ) ; end_of_file
 216: LD_STRING ACH_ANTSNIPER
 218: PPUSH
 219: CALL_OW 543
 223: END
// export function SayX ( units , ident ) ; var i ; begin
 224: LD_INT 0
 226: PPUSH
 227: PPUSH
// result := false ;
 228: LD_ADDR_VAR 0 3
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// if not units then
 236: LD_VAR 0 1
 240: NOT
 241: IFFALSE 245
// exit ;
 243: GO 299
// for i in units do
 245: LD_ADDR_VAR 0 4
 249: PUSH
 250: LD_VAR 0 1
 254: PUSH
 255: FOR_IN
 256: IFFALSE 297
// if IsOk ( i ) then
 258: LD_VAR 0 4
 262: PPUSH
 263: CALL_OW 302
 267: IFFALSE 295
// begin Say ( i , ident ) ;
 269: LD_VAR 0 4
 273: PPUSH
 274: LD_VAR 0 2
 278: PPUSH
 279: CALL_OW 88
// result := i ;
 283: LD_ADDR_VAR 0 3
 287: PUSH
 288: LD_VAR 0 4
 292: ST_TO_ADDR
// break ;
 293: GO 297
// end ;
 295: GO 255
 297: POP
 298: POP
// end ;
 299: LD_VAR 0 3
 303: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 304: LD_INT 0
 306: PPUSH
 307: PPUSH
// InitUc ;
 308: CALL_OW 18
// InitHc ;
 312: CALL_OW 19
// uc_side := 0 ;
 316: LD_ADDR_OWVAR 20
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// uc_nation := 0 ;
 324: LD_ADDR_OWVAR 21
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// for i = 1 to amount do
 332: LD_ADDR_VAR 0 4
 336: PUSH
 337: DOUBLE
 338: LD_INT 1
 340: DEC
 341: ST_TO_ADDR
 342: LD_VAR 0 2
 346: PUSH
 347: FOR_TO
 348: IFFALSE 430
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 350: LD_ADDR_OWVAR 29
 354: PUSH
 355: LD_INT 9
 357: PPUSH
 358: LD_INT 12
 360: PPUSH
 361: CALL_OW 12
 365: PUSH
 366: LD_INT 9
 368: PPUSH
 369: LD_INT 12
 371: PPUSH
 372: CALL_OW 12
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 381: LD_ADDR_OWVAR 35
 385: PUSH
 386: LD_INT 1
 388: NEG
 389: PPUSH
 390: LD_INT 1
 392: PPUSH
 393: CALL_OW 12
 397: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 398: LD_INT 0
 400: PPUSH
 401: LD_INT 12
 403: PPUSH
 404: LD_INT 1
 406: PPUSH
 407: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 411: CALL_OW 44
 415: PPUSH
 416: LD_VAR 0 1
 420: PPUSH
 421: LD_INT 0
 423: PPUSH
 424: CALL_OW 49
// end ;
 428: GO 347
 430: POP
 431: POP
// InitHc ;
 432: CALL_OW 19
// end ;
 436: LD_VAR 0 3
 440: RET
// export function CreateNature ( apemanArea , forest , water ) ; var i ; begin
 441: LD_INT 0
 443: PPUSH
 444: PPUSH
// uc_side := 0 ;
 445: LD_ADDR_OWVAR 20
 449: PUSH
 450: LD_INT 0
 452: ST_TO_ADDR
// uc_nation := 0 ;
 453: LD_ADDR_OWVAR 21
 457: PUSH
 458: LD_INT 0
 460: ST_TO_ADDR
// SpawnApeman ( apemanArea , [ 9 , 8 , 7 , 6 ] [ Difficulty ] ) ;
 461: LD_VAR 0 1
 465: PPUSH
 466: LD_INT 9
 468: PUSH
 469: LD_INT 8
 471: PUSH
 472: LD_INT 7
 474: PUSH
 475: LD_INT 6
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: PUSH
 484: LD_OWVAR 67
 488: ARRAY
 489: PPUSH
 490: CALL 304 0 2
// for i := 1 to 4 do
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: DOUBLE
 500: LD_INT 1
 502: DEC
 503: ST_TO_ADDR
 504: LD_INT 4
 506: PUSH
 507: FOR_TO
 508: IFFALSE 545
// begin hc_class := class_horse ;
 510: LD_ADDR_OWVAR 28
 514: PUSH
 515: LD_INT 21
 517: ST_TO_ADDR
// hc_gallery :=  ;
 518: LD_ADDR_OWVAR 33
 522: PUSH
 523: LD_STRING 
 525: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 526: CALL_OW 44
 530: PPUSH
 531: LD_VAR 0 2
 535: PPUSH
 536: LD_INT 0
 538: PPUSH
 539: CALL_OW 49
// end ;
 543: GO 507
 545: POP
 546: POP
// for i = 1 to 5 do
 547: LD_ADDR_VAR 0 5
 551: PUSH
 552: DOUBLE
 553: LD_INT 1
 555: DEC
 556: ST_TO_ADDR
 557: LD_INT 5
 559: PUSH
 560: FOR_TO
 561: IFFALSE 615
// begin hc_class = class_tiger ;
 563: LD_ADDR_OWVAR 28
 567: PUSH
 568: LD_INT 14
 570: ST_TO_ADDR
// hc_gallery =  ;
 571: LD_ADDR_OWVAR 33
 575: PUSH
 576: LD_STRING 
 578: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 579: LD_ADDR_OWVAR 35
 583: PUSH
 584: LD_INT 7
 586: NEG
 587: PPUSH
 588: LD_INT 7
 590: PPUSH
 591: CALL_OW 12
 595: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 596: CALL_OW 44
 600: PPUSH
 601: LD_VAR 0 2
 605: PPUSH
 606: LD_INT 0
 608: PPUSH
 609: CALL_OW 49
// end ;
 613: GO 560
 615: POP
 616: POP
// for i := 1 to 4 do
 617: LD_ADDR_VAR 0 5
 621: PUSH
 622: DOUBLE
 623: LD_INT 1
 625: DEC
 626: ST_TO_ADDR
 627: LD_INT 4
 629: PUSH
 630: FOR_TO
 631: IFFALSE 668
// begin hc_class := class_phororhacos ;
 633: LD_ADDR_OWVAR 28
 637: PUSH
 638: LD_INT 18
 640: ST_TO_ADDR
// hc_gallery :=  ;
 641: LD_ADDR_OWVAR 33
 645: PUSH
 646: LD_STRING 
 648: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 649: CALL_OW 44
 653: PPUSH
 654: LD_VAR 0 2
 658: PPUSH
 659: LD_INT 0
 661: PPUSH
 662: CALL_OW 49
// end ;
 666: GO 630
 668: POP
 669: POP
// for i := 1 to 4 do
 670: LD_ADDR_VAR 0 5
 674: PUSH
 675: DOUBLE
 676: LD_INT 1
 678: DEC
 679: ST_TO_ADDR
 680: LD_INT 4
 682: PUSH
 683: FOR_TO
 684: IFFALSE 721
// begin hc_class := class_baggie ;
 686: LD_ADDR_OWVAR 28
 690: PUSH
 691: LD_INT 13
 693: ST_TO_ADDR
// hc_gallery :=  ;
 694: LD_ADDR_OWVAR 33
 698: PUSH
 699: LD_STRING 
 701: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 702: CALL_OW 44
 706: PPUSH
 707: LD_VAR 0 2
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 683
 721: POP
 722: POP
// for i := 1 to 5 do
 723: LD_ADDR_VAR 0 5
 727: PUSH
 728: DOUBLE
 729: LD_INT 1
 731: DEC
 732: ST_TO_ADDR
 733: LD_INT 5
 735: PUSH
 736: FOR_TO
 737: IFFALSE 774
// begin hc_class := class_fish ;
 739: LD_ADDR_OWVAR 28
 743: PUSH
 744: LD_INT 20
 746: ST_TO_ADDR
// hc_gallery :=  ;
 747: LD_ADDR_OWVAR 33
 751: PUSH
 752: LD_STRING 
 754: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , water , false ) ;
 755: CALL_OW 44
 759: PPUSH
 760: LD_VAR 0 3
 764: PPUSH
 765: LD_INT 0
 767: PPUSH
 768: CALL_OW 49
// end ;
 772: GO 736
 774: POP
 775: POP
// end ;
 776: LD_VAR 0 4
 780: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
// if not observer or not unit then
 786: LD_VAR 0 1
 790: NOT
 791: PUSH
 792: LD_VAR 0 2
 796: NOT
 797: OR
 798: IFFALSE 802
// exit ;
 800: GO 850
// if not See ( GetSide ( observer ) , unit ) then
 802: LD_VAR 0 1
 806: PPUSH
 807: CALL_OW 255
 811: PPUSH
 812: LD_VAR 0 2
 816: PPUSH
 817: CALL_OW 292
 821: NOT
 822: IFFALSE 826
// exit ;
 824: GO 850
// result := GetDistUnits ( observer , unit ) < 12 ;
 826: LD_ADDR_VAR 0 3
 830: PUSH
 831: LD_VAR 0 1
 835: PPUSH
 836: LD_VAR 0 2
 840: PPUSH
 841: CALL_OW 296
 845: PUSH
 846: LD_INT 12
 848: LESS
 849: ST_TO_ADDR
// end ;
 850: LD_VAR 0 3
 854: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 855: LD_INT 0
 857: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 858: LD_VAR 0 2
 862: PUSH
 863: LD_INT 1
 865: ARRAY
 866: PPUSH
 867: LD_VAR 0 2
 871: PUSH
 872: LD_INT 2
 874: ARRAY
 875: PPUSH
 876: CALL_OW 488
 880: PUSH
 881: LD_VAR 0 2
 885: PUSH
 886: LD_INT 1
 888: ARRAY
 889: PPUSH
 890: LD_VAR 0 2
 894: PUSH
 895: LD_INT 2
 897: ARRAY
 898: PPUSH
 899: CALL_OW 428
 903: PUSH
 904: LD_INT 0
 906: EQUAL
 907: AND
 908: IFFALSE 942
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 910: LD_VAR 0 1
 914: PPUSH
 915: LD_VAR 0 2
 919: PUSH
 920: LD_INT 1
 922: ARRAY
 923: PPUSH
 924: LD_VAR 0 2
 928: PUSH
 929: LD_INT 2
 931: ARRAY
 932: PPUSH
 933: LD_VAR 0 3
 937: PPUSH
 938: CALL_OW 48
// end ;
 942: LD_VAR 0 4
 946: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
 947: LD_INT 0
 949: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
 950: LD_VAR 0 1
 954: PPUSH
 955: LD_VAR 0 2
 959: PPUSH
 960: LD_VAR 0 3
 964: PPUSH
 965: LD_VAR 0 4
 969: PPUSH
 970: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
 974: LD_VAR 0 1
 978: PPUSH
 979: LD_VAR 0 2
 983: PPUSH
 984: LD_VAR 0 3
 988: PPUSH
 989: CALL_OW 331
// end ;
 993: LD_VAR 0 5
 997: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
 998: LD_INT 0
1000: PPUSH
// if not units then
1001: LD_VAR 0 1
1005: NOT
1006: IFFALSE 1010
// exit ;
1008: GO 1093
// result := true ;
1010: LD_ADDR_VAR 0 4
1014: PUSH
1015: LD_INT 1
1017: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1018: LD_VAR 0 1
1022: PPUSH
1023: LD_INT 26
1025: PUSH
1026: LD_INT 1
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: PPUSH
1033: CALL_OW 72
1037: PUSH
1038: LD_INT 1
1040: ARRAY
1041: PPUSH
1042: LD_VAR 0 2
1046: PPUSH
1047: CALL_OW 88
1051: NOT
1052: IFFALSE 1093
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1054: LD_ADDR_VAR 0 4
1058: PUSH
1059: LD_VAR 0 1
1063: PPUSH
1064: LD_INT 26
1066: PUSH
1067: LD_INT 2
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: PPUSH
1074: CALL_OW 72
1078: PUSH
1079: LD_INT 1
1081: ARRAY
1082: PPUSH
1083: LD_VAR 0 3
1087: PPUSH
1088: CALL_OW 88
1092: ST_TO_ADDR
// end ;
1093: LD_VAR 0 4
1097: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1098: LD_INT 0
1100: PPUSH
1101: PPUSH
// if not group then
1102: LD_VAR 0 2
1106: NOT
1107: IFFALSE 1111
// exit ;
1109: GO 1156
// for i in group do
1111: LD_ADDR_VAR 0 4
1115: PUSH
1116: LD_VAR 0 2
1120: PUSH
1121: FOR_IN
1122: IFFALSE 1154
// if See ( side , i ) then
1124: LD_VAR 0 1
1128: PPUSH
1129: LD_VAR 0 4
1133: PPUSH
1134: CALL_OW 292
1138: IFFALSE 1152
// begin result := true ;
1140: LD_ADDR_VAR 0 3
1144: PUSH
1145: LD_INT 1
1147: ST_TO_ADDR
// exit ;
1148: POP
1149: POP
1150: GO 1156
// end ;
1152: GO 1121
1154: POP
1155: POP
// end ; end_of_file
1156: LD_VAR 0 3
1160: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeApes , heikeVehicles ; export function PrepareArabian ; var i , tmp , counter , hasDrugs ; begin
1161: LD_INT 0
1163: PPUSH
1164: PPUSH
1165: PPUSH
1166: PPUSH
1167: PPUSH
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
1168: LD_ADDR_VAR 0 5
1172: PUSH
1173: LD_STRING 05_DrugsTested
1175: PPUSH
1176: LD_EXP 1
1180: PPUSH
1181: CALL_OW 30
1185: ST_TO_ADDR
// if hasDrugs then
1186: LD_VAR 0 5
1190: IFFALSE 1205
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
1192: LD_INT 5
1194: PPUSH
1195: LD_INT 2
1197: PPUSH
1198: LD_INT 2
1200: PPUSH
1201: CALL_OW 322
// uc_nation := 2 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 2
1212: ST_TO_ADDR
// uc_side := 5 ;
1213: LD_ADDR_OWVAR 20
1217: PUSH
1218: LD_INT 5
1220: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1221: LD_ADDR_EXP 23
1225: PUSH
1226: LD_STRING Abdul
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: LD_STRING 
1234: PPUSH
1235: CALL 16535 0 3
1239: ST_TO_ADDR
// uc_side := 2 ;
1240: LD_ADDR_OWVAR 20
1244: PUSH
1245: LD_INT 2
1247: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1248: LD_ADDR_EXP 15
1252: PUSH
1253: LD_STRING Heike
1255: PPUSH
1256: LD_EXP 1
1260: NOT
1261: PPUSH
1262: LD_EXP 2
1266: PPUSH
1267: CALL 16535 0 3
1271: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1272: LD_ADDR_EXP 18
1276: PUSH
1277: LD_STRING Ibrahim
1279: PPUSH
1280: LD_EXP 1
1284: NOT
1285: PPUSH
1286: LD_EXP 2
1290: PPUSH
1291: CALL 16535 0 3
1295: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1296: LD_ADDR_EXP 16
1300: PUSH
1301: LD_STRING Givi
1303: PPUSH
1304: LD_EXP 1
1308: NOT
1309: PPUSH
1310: LD_EXP 2
1314: PPUSH
1315: CALL 16535 0 3
1319: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1320: LD_ADDR_EXP 19
1324: PUSH
1325: LD_STRING Kamil
1327: PPUSH
1328: LD_EXP 1
1332: NOT
1333: PPUSH
1334: LD_EXP 2
1338: PPUSH
1339: CALL 16535 0 3
1343: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1344: LD_ADDR_EXP 20
1348: PUSH
1349: LD_STRING Kaia
1351: PPUSH
1352: LD_EXP 1
1356: NOT
1357: PPUSH
1358: LD_EXP 2
1362: PPUSH
1363: CALL 16535 0 3
1367: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1368: LD_ADDR_EXP 21
1372: PUSH
1373: LD_STRING Sophia
1375: PPUSH
1376: LD_EXP 1
1380: NOT
1381: PPUSH
1382: LD_EXP 2
1386: PPUSH
1387: CALL 16535 0 3
1391: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1392: LD_ADDR_EXP 22
1396: PUSH
1397: LD_STRING Markov
1399: PPUSH
1400: LD_EXP 1
1404: NOT
1405: PPUSH
1406: LD_EXP 2
1410: PPUSH
1411: CALL 16535 0 3
1415: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1416: LD_ADDR_EXP 26
1420: PUSH
1421: LD_STRING Aviradze
1423: PPUSH
1424: LD_EXP 1
1428: NOT
1429: PPUSH
1430: LD_EXP 2
1434: PPUSH
1435: CALL 16535 0 3
1439: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1440: LD_ADDR_EXP 25
1444: PUSH
1445: LD_STRING Kurt
1447: PPUSH
1448: LD_EXP 1
1452: NOT
1453: PPUSH
1454: LD_EXP 2
1458: PPUSH
1459: CALL 16535 0 3
1463: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1464: LD_ADDR_EXP 17
1468: PUSH
1469: LD_STRING Mike
1471: PPUSH
1472: LD_EXP 1
1476: NOT
1477: PPUSH
1478: LD_EXP 2
1482: PPUSH
1483: CALL 16535 0 3
1487: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1488: LD_ADDR_EXP 24
1492: PUSH
1493: LD_STRING Olaf
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: LD_EXP 2
1506: PPUSH
1507: CALL 16535 0 3
1511: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 06_others ) ;
1512: LD_ADDR_EXP 27
1516: PUSH
1517: LD_STRING 06_others
1519: PPUSH
1520: CALL_OW 31
1524: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 06_apes ) ;
1525: LD_ADDR_EXP 28
1529: PUSH
1530: LD_STRING 06_apes
1532: PPUSH
1533: CALL_OW 31
1537: ST_TO_ADDR
// if debug then
1538: LD_EXP 1
1542: IFFALSE 1815
// begin tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 750 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 900 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 100 , 0 ] ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 50 , 50 ] ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_mortar , 2 , 1000 , 0 ] ] ;
1544: LD_ADDR_VAR 0 3
1548: PUSH
1549: LD_INT 14
1551: PUSH
1552: LD_INT 1
1554: PUSH
1555: LD_INT 2
1557: PUSH
1558: LD_INT 25
1560: PUSH
1561: LD_INT 2
1563: PUSH
1564: LD_INT 1000
1566: PUSH
1567: LD_INT 0
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 14
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 31
1590: PUSH
1591: LD_INT 2
1593: PUSH
1594: LD_INT 1000
1596: PUSH
1597: LD_INT 0
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 14
1611: PUSH
1612: LD_INT 1
1614: PUSH
1615: LD_INT 1
1617: PUSH
1618: LD_INT 27
1620: PUSH
1621: LD_INT 2
1623: PUSH
1624: LD_INT 750
1626: PUSH
1627: LD_INT 0
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: PUSH
1639: LD_INT 14
1641: PUSH
1642: LD_INT 1
1644: PUSH
1645: LD_INT 1
1647: PUSH
1648: LD_INT 27
1650: PUSH
1651: LD_INT 2
1653: PUSH
1654: LD_INT 900
1656: PUSH
1657: LD_INT 0
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: PUSH
1669: LD_INT 14
1671: PUSH
1672: LD_INT 1
1674: PUSH
1675: LD_INT 1
1677: PUSH
1678: LD_INT 32
1680: PUSH
1681: LD_INT 2
1683: PUSH
1684: LD_INT 1000
1686: PUSH
1687: LD_INT 100
1689: PUSH
1690: LD_INT 0
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_INT 14
1708: PUSH
1709: LD_INT 1
1711: PUSH
1712: LD_INT 1
1714: PUSH
1715: LD_INT 32
1717: PUSH
1718: LD_INT 2
1720: PUSH
1721: LD_INT 1000
1723: PUSH
1724: LD_INT 50
1726: PUSH
1727: LD_INT 50
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: PUSH
1743: LD_INT 14
1745: PUSH
1746: LD_INT 1
1748: PUSH
1749: LD_INT 2
1751: PUSH
1752: LD_INT 27
1754: PUSH
1755: LD_INT 2
1757: PUSH
1758: LD_INT 1000
1760: PUSH
1761: LD_INT 0
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: PUSH
1773: LD_INT 14
1775: PUSH
1776: LD_INT 1
1778: PUSH
1779: LD_INT 1
1781: PUSH
1782: LD_INT 92
1784: PUSH
1785: LD_INT 2
1787: PUSH
1788: LD_INT 1000
1790: PUSH
1791: LD_INT 0
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: ST_TO_ADDR
// end else
1813: GO 1822
// tmp := [ ] ;
1815: LD_ADDR_VAR 0 3
1819: PUSH
1820: EMPTY
1821: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 06_Vehicles , tmp ) ;
1822: LD_ADDR_EXP 29
1826: PUSH
1827: LD_STRING 06_Vehicles
1829: PPUSH
1830: LD_VAR 0 3
1834: PPUSH
1835: CALL_OW 30
1839: ST_TO_ADDR
// counter := 0 ;
1840: LD_ADDR_VAR 0 4
1844: PUSH
1845: LD_INT 0
1847: ST_TO_ADDR
// if heikeVehicles then
1848: LD_EXP 29
1852: IFFALSE 1974
// begin for i := heikeVehicles downto 1 do
1854: LD_ADDR_VAR 0 2
1858: PUSH
1859: DOUBLE
1860: LD_EXP 29
1864: INC
1865: ST_TO_ADDR
1866: LD_INT 1
1868: PUSH
1869: FOR_DOWNTO
1870: IFFALSE 1972
// begin if heikeVehicles [ i ] [ 3 ] = control_remote then
1872: LD_EXP 29
1876: PUSH
1877: LD_VAR 0 2
1881: ARRAY
1882: PUSH
1883: LD_INT 3
1885: ARRAY
1886: PUSH
1887: LD_INT 2
1889: EQUAL
1890: IFFALSE 1970
// begin if counter < remoteControlLimit then
1892: LD_VAR 0 4
1896: PUSH
1897: LD_EXP 12
1901: LESS
1902: IFFALSE 1950
// begin counter := Inc ( counter ) ;
1904: LD_ADDR_VAR 0 4
1908: PUSH
1909: LD_VAR 0 4
1913: PPUSH
1914: CALL 55587 0 1
1918: ST_TO_ADDR
// heikeVehicles := Insert ( heikeVehicles , heikeVehicles , heikeVehicles [ i ] ) ;
1919: LD_ADDR_EXP 29
1923: PUSH
1924: LD_EXP 29
1928: PPUSH
1929: LD_EXP 29
1933: PPUSH
1934: LD_EXP 29
1938: PUSH
1939: LD_VAR 0 2
1943: ARRAY
1944: PPUSH
1945: CALL_OW 2
1949: ST_TO_ADDR
// end ; heikeVehicles := Delete ( heikeVehicles , i ) ;
1950: LD_ADDR_EXP 29
1954: PUSH
1955: LD_EXP 29
1959: PPUSH
1960: LD_VAR 0 2
1964: PPUSH
1965: CALL_OW 3
1969: ST_TO_ADDR
// end ; end ;
1970: GO 1869
1972: POP
1973: POP
// end ; end ;
1974: LD_VAR 0 1
1978: RET
// every 0 0$1 trigger scoutActive do var i , tmp ;
1979: LD_EXP 3
1983: IFFALSE 2517
1985: GO 1987
1987: DISABLE
1988: LD_INT 0
1990: PPUSH
1991: PPUSH
// begin tmp := [ [ [ 96 , 50 ] , [ 49 , 52 ] , [ 34 , 55 ] , [ 41 , 70 ] , [ 53 , 96 ] , [ 103 , 64 ] ] , [ [ 104 , 70 ] , [ 111 , 103 ] , [ 131 , 147 ] , [ 130 , 153 ] , [ 110 , 93 ] , [ 103 , 65 ] ] ] ;
1992: LD_ADDR_VAR 0 2
1996: PUSH
1997: LD_INT 96
1999: PUSH
2000: LD_INT 50
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 49
2009: PUSH
2010: LD_INT 52
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: PUSH
2017: LD_INT 34
2019: PUSH
2020: LD_INT 55
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: PUSH
2027: LD_INT 41
2029: PUSH
2030: LD_INT 70
2032: PUSH
2033: EMPTY
2034: LIST
2035: LIST
2036: PUSH
2037: LD_INT 53
2039: PUSH
2040: LD_INT 96
2042: PUSH
2043: EMPTY
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 103
2049: PUSH
2050: LD_INT 64
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: PUSH
2065: LD_INT 104
2067: PUSH
2068: LD_INT 70
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 111
2077: PUSH
2078: LD_INT 103
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: LD_INT 131
2087: PUSH
2088: LD_INT 147
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: PUSH
2095: LD_INT 130
2097: PUSH
2098: LD_INT 153
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: PUSH
2105: LD_INT 110
2107: PUSH
2108: LD_INT 93
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: PUSH
2115: LD_INT 103
2117: PUSH
2118: LD_INT 65
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: ST_TO_ADDR
// for i in tmp [ 1 ] do
2137: LD_ADDR_VAR 0 1
2141: PUSH
2142: LD_VAR 0 2
2146: PUSH
2147: LD_INT 1
2149: ARRAY
2150: PUSH
2151: FOR_IN
2152: IFFALSE 2204
// begin AddComAgressiveMove ( Mike , i [ 1 ] , i [ 2 ] ) ;
2154: LD_EXP 17
2158: PPUSH
2159: LD_VAR 0 1
2163: PUSH
2164: LD_INT 1
2166: ARRAY
2167: PPUSH
2168: LD_VAR 0 1
2172: PUSH
2173: LD_INT 2
2175: ARRAY
2176: PPUSH
2177: CALL_OW 174
// AddComHold ( Mike ) ;
2181: LD_EXP 17
2185: PPUSH
2186: CALL_OW 200
// AddComWait ( Mike , 0 0$5 ) ;
2190: LD_EXP 17
2194: PPUSH
2195: LD_INT 175
2197: PPUSH
2198: CALL_OW 202
// end ;
2202: GO 2151
2204: POP
2205: POP
// for i in tmp [ 2 ] do
2206: LD_ADDR_VAR 0 1
2210: PUSH
2211: LD_VAR 0 2
2215: PUSH
2216: LD_INT 2
2218: ARRAY
2219: PUSH
2220: FOR_IN
2221: IFFALSE 2273
// begin AddComAgressiveMove ( Kurt , i [ 1 ] , i [ 2 ] ) ;
2223: LD_EXP 25
2227: PPUSH
2228: LD_VAR 0 1
2232: PUSH
2233: LD_INT 1
2235: ARRAY
2236: PPUSH
2237: LD_VAR 0 1
2241: PUSH
2242: LD_INT 2
2244: ARRAY
2245: PPUSH
2246: CALL_OW 174
// AddComHold ( Kurt ) ;
2250: LD_EXP 25
2254: PPUSH
2255: CALL_OW 200
// AddComWait ( Kurt , 0 0$5 ) ;
2259: LD_EXP 25
2263: PPUSH
2264: LD_INT 175
2266: PPUSH
2267: CALL_OW 202
// end ;
2271: GO 2220
2273: POP
2274: POP
// wait ( 2 2$00 ) ;
2275: LD_INT 4200
2277: PPUSH
2278: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2282: LD_INT 35
2284: PPUSH
2285: CALL_OW 67
// until ( not HasTask ( Mike ) or IsDead ( Mike ) ) and ( not HasTask ( Kurt ) or IsDead ( Kurt ) ) ;
2289: LD_EXP 17
2293: PPUSH
2294: CALL_OW 314
2298: NOT
2299: PUSH
2300: LD_EXP 17
2304: PPUSH
2305: CALL_OW 301
2309: OR
2310: PUSH
2311: LD_EXP 25
2315: PPUSH
2316: CALL_OW 314
2320: NOT
2321: PUSH
2322: LD_EXP 25
2326: PPUSH
2327: CALL_OW 301
2331: OR
2332: AND
2333: IFFALSE 2282
// if IsDead ( Kurt ) and IsDead ( Mike ) then
2335: LD_EXP 25
2339: PPUSH
2340: CALL_OW 301
2344: PUSH
2345: LD_EXP 17
2349: PPUSH
2350: CALL_OW 301
2354: AND
2355: IFFALSE 2367
// begin scoutFailed := true ;
2357: LD_ADDR_EXP 4
2361: PUSH
2362: LD_INT 1
2364: ST_TO_ADDR
// exit ;
2365: GO 2517
// end ; ComMoveXY ( [ Kurt , Mike ] , 132 , 52 ) ;
2367: LD_EXP 25
2371: PUSH
2372: LD_EXP 17
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: PPUSH
2381: LD_INT 132
2383: PPUSH
2384: LD_INT 52
2386: PPUSH
2387: CALL_OW 111
// AddComMoveUnit ( [ Kurt , Mike ] , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
2391: LD_EXP 25
2395: PUSH
2396: LD_EXP 17
2400: PUSH
2401: EMPTY
2402: LIST
2403: LIST
2404: PPUSH
2405: LD_INT 22
2407: PUSH
2408: LD_INT 2
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: PPUSH
2415: CALL_OW 69
2419: PUSH
2420: LD_INT 1
2422: ARRAY
2423: PPUSH
2424: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
2428: LD_INT 35
2430: PPUSH
2431: CALL_OW 67
// until See ( 2 , Kurt ) or See ( 2 , Mike ) ;
2435: LD_INT 2
2437: PPUSH
2438: LD_EXP 25
2442: PPUSH
2443: CALL_OW 292
2447: PUSH
2448: LD_INT 2
2450: PPUSH
2451: LD_EXP 17
2455: PPUSH
2456: CALL_OW 292
2460: OR
2461: IFFALSE 2428
// if IsLive ( Kurt ) then
2463: LD_EXP 25
2467: PPUSH
2468: CALL_OW 300
2472: IFFALSE 2486
// SetSide ( Kurt , 2 ) ;
2474: LD_EXP 25
2478: PPUSH
2479: LD_INT 2
2481: PPUSH
2482: CALL_OW 235
// if IsLive ( Mike ) then
2486: LD_EXP 17
2490: PPUSH
2491: CALL_OW 300
2495: IFFALSE 2509
// SetSide ( Mike , 2 ) ;
2497: LD_EXP 17
2501: PPUSH
2502: LD_INT 2
2504: PPUSH
2505: CALL_OW 235
// scoutSuccess := true ;
2509: LD_ADDR_EXP 5
2513: PUSH
2514: LD_INT 1
2516: ST_TO_ADDR
// end ; end_of_file
2517: PPOPN 2
2519: END
// export usCommander , usForces , usCargo , usToBuild , usAdditionalForces , usCratesCollector ; export function PrepareAmerican ; var i , b , veh ; begin
2520: LD_INT 0
2522: PPUSH
2523: PPUSH
2524: PPUSH
2525: PPUSH
// uc_side := 1 ;
2526: LD_ADDR_OWVAR 20
2530: PUSH
2531: LD_INT 1
2533: ST_TO_ADDR
// uc_nation := 1 ;
2534: LD_ADDR_OWVAR 21
2538: PUSH
2539: LD_INT 1
2541: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 1500 , 2200 , 3500 , 3900 ] [ Difficulty ] ) ;
2542: LD_INT 1
2544: PPUSH
2545: CALL_OW 274
2549: PPUSH
2550: LD_INT 1
2552: PPUSH
2553: LD_INT 1500
2555: PUSH
2556: LD_INT 2200
2558: PUSH
2559: LD_INT 3500
2561: PUSH
2562: LD_INT 3900
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: PUSH
2571: LD_OWVAR 67
2575: ARRAY
2576: PPUSH
2577: CALL_OW 277
// SetResourceType ( GetBase ( usDepot ) , mat_oil , 800 ) ;
2581: LD_INT 1
2583: PPUSH
2584: CALL_OW 274
2588: PPUSH
2589: LD_INT 2
2591: PPUSH
2592: LD_INT 800
2594: PPUSH
2595: CALL_OW 277
// usForces := [ ] ;
2599: LD_ADDR_EXP 31
2603: PUSH
2604: EMPTY
2605: ST_TO_ADDR
// usToBuild := [ ] ;
2606: LD_ADDR_EXP 33
2610: PUSH
2611: EMPTY
2612: ST_TO_ADDR
// usAdditionalForces := [ ] ;
2613: LD_ADDR_EXP 34
2617: PUSH
2618: EMPTY
2619: ST_TO_ADDR
// usCratesCollector := [ ] ;
2620: LD_ADDR_EXP 35
2624: PUSH
2625: EMPTY
2626: ST_TO_ADDR
// for i := 1 to 3 do
2627: LD_ADDR_VAR 0 2
2631: PUSH
2632: DOUBLE
2633: LD_INT 1
2635: DEC
2636: ST_TO_ADDR
2637: LD_INT 3
2639: PUSH
2640: FOR_TO
2641: IFFALSE 2695
// begin PrepareApemanEngineer ( ) ;
2643: CALL 50415 0 0
// usCratesCollector := Join ( usCratesCollector , CreateHuman ) ;
2647: LD_ADDR_EXP 35
2651: PUSH
2652: LD_EXP 35
2656: PPUSH
2657: CALL_OW 44
2661: PPUSH
2662: CALL 54226 0 2
2666: ST_TO_ADDR
// PlaceUnitXYR ( Last ( usCratesCollector ) , 81 , 142 , 4 , false ) ;
2667: LD_EXP 35
2671: PPUSH
2672: CALL 58869 0 1
2676: PPUSH
2677: LD_INT 81
2679: PPUSH
2680: LD_INT 142
2682: PPUSH
2683: LD_INT 4
2685: PPUSH
2686: LD_INT 0
2688: PPUSH
2689: CALL_OW 50
// end ;
2693: GO 2640
2695: POP
2696: POP
// InitHc ;
2697: CALL_OW 19
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2701: LD_ADDR_VAR 0 2
2705: PUSH
2706: LD_INT 21
2708: PUSH
2709: LD_INT 3
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PPUSH
2716: CALL_OW 69
2720: PUSH
2721: FOR_IN
2722: IFFALSE 2759
// SetBLevel ( i , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
2724: LD_VAR 0 2
2728: PPUSH
2729: LD_INT 6
2731: PUSH
2732: LD_INT 7
2734: PUSH
2735: LD_INT 8
2737: PUSH
2738: LD_INT 8
2740: PUSH
2741: EMPTY
2742: LIST
2743: LIST
2744: LIST
2745: LIST
2746: PUSH
2747: LD_OWVAR 67
2751: ARRAY
2752: PPUSH
2753: CALL_OW 241
2757: GO 2721
2759: POP
2760: POP
// for i in FilterAllUnits ( [ f_btype , b_bunker ] ) do
2761: LD_ADDR_VAR 0 2
2765: PUSH
2766: LD_INT 30
2768: PUSH
2769: LD_INT 32
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: PPUSH
2776: CALL_OW 69
2780: PUSH
2781: FOR_IN
2782: IFFALSE 2872
// begin if GetBWeapon ( i ) = us_radar then
2784: LD_VAR 0 2
2788: PPUSH
2789: CALL_OW 269
2793: PUSH
2794: LD_INT 11
2796: EQUAL
2797: IFFALSE 2822
// begin uc_nation := 0 ;
2799: LD_ADDR_OWVAR 21
2803: PUSH
2804: LD_INT 0
2806: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 2 ) ;
2807: LD_INT 0
2809: PPUSH
2810: LD_INT 16
2812: PPUSH
2813: LD_INT 2
2815: PPUSH
2816: CALL_OW 380
// end else
2820: GO 2856
// PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2822: LD_INT 0
2824: PPUSH
2825: LD_INT 1
2827: PPUSH
2828: LD_INT 5
2830: PUSH
2831: LD_INT 6
2833: PUSH
2834: LD_INT 7
2836: PUSH
2837: LD_INT 8
2839: PUSH
2840: EMPTY
2841: LIST
2842: LIST
2843: LIST
2844: LIST
2845: PUSH
2846: LD_OWVAR 67
2850: ARRAY
2851: PPUSH
2852: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2856: CALL_OW 44
2860: PPUSH
2861: LD_VAR 0 2
2865: PPUSH
2866: CALL_OW 52
// end ;
2870: GO 2781
2872: POP
2873: POP
// b := HexInfo ( 74 , 120 ) ;
2874: LD_ADDR_VAR 0 3
2878: PUSH
2879: LD_INT 74
2881: PPUSH
2882: LD_INT 120
2884: PPUSH
2885: CALL_OW 428
2889: ST_TO_ADDR
// uc_nation := 1 ;
2890: LD_ADDR_OWVAR 21
2894: PUSH
2895: LD_INT 1
2897: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
2898: LD_ADDR_VAR 0 2
2902: PUSH
2903: DOUBLE
2904: LD_INT 1
2906: DEC
2907: ST_TO_ADDR
2908: LD_INT 1
2910: PUSH
2911: LD_INT 2
2913: PUSH
2914: LD_INT 3
2916: PUSH
2917: LD_INT 4
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: LIST
2924: LIST
2925: PUSH
2926: LD_OWVAR 67
2930: ARRAY
2931: PUSH
2932: FOR_TO
2933: IFFALSE 2985
// begin PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2935: LD_INT 0
2937: PPUSH
2938: LD_INT 1
2940: PPUSH
2941: LD_INT 5
2943: PUSH
2944: LD_INT 6
2946: PUSH
2947: LD_INT 7
2949: PUSH
2950: LD_INT 8
2952: PUSH
2953: EMPTY
2954: LIST
2955: LIST
2956: LIST
2957: LIST
2958: PUSH
2959: LD_OWVAR 67
2963: ARRAY
2964: PPUSH
2965: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b ) ;
2969: CALL_OW 44
2973: PPUSH
2974: LD_VAR 0 3
2978: PPUSH
2979: CALL_OW 52
// end ;
2983: GO 2932
2985: POP
2986: POP
// SetClass ( UnitsInside ( b ) , class_sniper ) ;
2987: LD_VAR 0 3
2991: PPUSH
2992: CALL_OW 313
2996: PPUSH
2997: LD_INT 5
2999: PPUSH
3000: CALL_OW 336
// for i := 1 to 6 do
3004: LD_ADDR_VAR 0 2
3008: PUSH
3009: DOUBLE
3010: LD_INT 1
3012: DEC
3013: ST_TO_ADDR
3014: LD_INT 6
3016: PUSH
3017: FOR_TO
3018: IFFALSE 3068
// begin PrepareHuman ( false , 4 , 6 ) ;
3020: LD_INT 0
3022: PPUSH
3023: LD_INT 4
3025: PPUSH
3026: LD_INT 6
3028: PPUSH
3029: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ amLab1 , amLab2 ] [ i mod 2 + 1 ] ) ;
3033: CALL_OW 44
3037: PPUSH
3038: LD_INT 32
3040: PUSH
3041: LD_INT 33
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PUSH
3048: LD_VAR 0 2
3052: PUSH
3053: LD_INT 2
3055: MOD
3056: PUSH
3057: LD_INT 1
3059: PLUS
3060: ARRAY
3061: PPUSH
3062: CALL_OW 52
// end ;
3066: GO 3017
3068: POP
3069: POP
// for i := 1 to 3 do
3070: LD_ADDR_VAR 0 2
3074: PUSH
3075: DOUBLE
3076: LD_INT 1
3078: DEC
3079: ST_TO_ADDR
3080: LD_INT 3
3082: PUSH
3083: FOR_TO
3084: IFFALSE 3113
// begin PrepareHuman ( false , 3 , 6 ) ;
3086: LD_INT 0
3088: PPUSH
3089: LD_INT 3
3091: PPUSH
3092: LD_INT 6
3094: PPUSH
3095: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , amFac ) ;
3099: CALL_OW 44
3103: PPUSH
3104: LD_INT 25
3106: PPUSH
3107: CALL_OW 52
// end ;
3111: GO 3083
3113: POP
3114: POP
// for i := 1 to 3 do
3115: LD_ADDR_VAR 0 2
3119: PUSH
3120: DOUBLE
3121: LD_INT 1
3123: DEC
3124: ST_TO_ADDR
3125: LD_INT 3
3127: PUSH
3128: FOR_TO
3129: IFFALSE 3187
// begin PrepareHuman ( false , 3 , [ 6 , 7 , 7 , 7 ] [ Difficulty ] ) ;
3131: LD_INT 0
3133: PPUSH
3134: LD_INT 3
3136: PPUSH
3137: LD_INT 6
3139: PUSH
3140: LD_INT 7
3142: PUSH
3143: LD_INT 7
3145: PUSH
3146: LD_INT 7
3148: PUSH
3149: EMPTY
3150: LIST
3151: LIST
3152: LIST
3153: LIST
3154: PUSH
3155: LD_OWVAR 67
3159: ARRAY
3160: PPUSH
3161: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 78 , 130 ) ) ;
3165: CALL_OW 44
3169: PPUSH
3170: LD_INT 78
3172: PPUSH
3173: LD_INT 130
3175: PPUSH
3176: CALL_OW 428
3180: PPUSH
3181: CALL_OW 52
// end ;
3185: GO 3128
3187: POP
3188: POP
// for i := 1 to [ 1 , 2 , 3 , 3 ] [ Difficulty ] do
3189: LD_ADDR_VAR 0 2
3193: PUSH
3194: DOUBLE
3195: LD_INT 1
3197: DEC
3198: ST_TO_ADDR
3199: LD_INT 1
3201: PUSH
3202: LD_INT 2
3204: PUSH
3205: LD_INT 3
3207: PUSH
3208: LD_INT 3
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: PUSH
3217: LD_OWVAR 67
3221: ARRAY
3222: PUSH
3223: FOR_TO
3224: IFFALSE 3311
// begin PrepareVehicle ( us_medium_wheeled , engine_solar , control_manual , us_crane , 100 ) ;
3226: LD_INT 2
3228: PPUSH
3229: LD_INT 2
3231: PPUSH
3232: LD_INT 1
3234: PPUSH
3235: LD_INT 13
3237: PPUSH
3238: LD_INT 100
3240: PPUSH
3241: CALL 21375 0 5
// veh := CreateVehicle ;
3245: LD_ADDR_VAR 0 4
3249: PUSH
3250: CALL_OW 45
3254: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3255: LD_VAR 0 4
3259: PPUSH
3260: LD_INT 3
3262: PPUSH
3263: CALL_OW 233
// PlaceUnitArea ( veh , usCraneArea , false ) ;
3267: LD_VAR 0 4
3271: PPUSH
3272: LD_INT 9
3274: PPUSH
3275: LD_INT 0
3277: PPUSH
3278: CALL_OW 49
// PrepareHuman ( false , 3 , 6 ) ;
3282: LD_INT 0
3284: PPUSH
3285: LD_INT 3
3287: PPUSH
3288: LD_INT 6
3290: PPUSH
3291: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3295: CALL_OW 44
3299: PPUSH
3300: LD_VAR 0 4
3304: PPUSH
3305: CALL_OW 52
// end ;
3309: GO 3223
3311: POP
3312: POP
// InitHc ;
3313: CALL_OW 19
// hc_gallery := sandar ;
3317: LD_ADDR_OWVAR 33
3321: PUSH
3322: LD_STRING sandar
3324: ST_TO_ADDR
// hc_face_number := 38 ;
3325: LD_ADDR_OWVAR 34
3329: PUSH
3330: LD_INT 38
3332: ST_TO_ADDR
// hc_name := Doug Callahan ;
3333: LD_ADDR_OWVAR 26
3337: PUSH
3338: LD_STRING Doug Callahan
3340: ST_TO_ADDR
// hc_class := class_engineer ;
3341: LD_ADDR_OWVAR 28
3345: PUSH
3346: LD_INT 2
3348: ST_TO_ADDR
// hc_sex := sex_male ;
3349: LD_ADDR_OWVAR 27
3353: PUSH
3354: LD_INT 1
3356: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
3357: LD_ADDR_OWVAR 29
3361: PUSH
3362: LD_INT 10
3364: PUSH
3365: LD_INT 11
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
3372: LD_ADDR_OWVAR 30
3376: PUSH
3377: LD_INT 2
3379: PUSH
3380: LD_INT 1
3382: PUSH
3383: LD_INT 0
3385: PUSH
3386: LD_INT 0
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: ST_TO_ADDR
// hc_skills := [ 4 , 6 , 3 , 1 ] ;
3395: LD_ADDR_OWVAR 31
3399: PUSH
3400: LD_INT 4
3402: PUSH
3403: LD_INT 6
3405: PUSH
3406: LD_INT 3
3408: PUSH
3409: LD_INT 1
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: ST_TO_ADDR
// usCommander := CreateHuman ;
3418: LD_ADDR_EXP 30
3422: PUSH
3423: CALL_OW 44
3427: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
3428: LD_EXP 30
3432: PPUSH
3433: LD_INT 1
3435: PPUSH
3436: CALL_OW 52
// DoNotAttack ( 2 , usCommander ) ;
3440: LD_INT 2
3442: PPUSH
3443: LD_EXP 30
3447: PPUSH
3448: CALL_OW 471
// InitHC_All ( ) ;
3452: CALL_OW 584
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay , 100 ) ;
3456: LD_INT 2
3458: PPUSH
3459: LD_INT 1
3461: PPUSH
3462: LD_INT 2
3464: PPUSH
3465: LD_INT 12
3467: PPUSH
3468: LD_INT 100
3470: PPUSH
3471: CALL 21375 0 5
// usCargo := CreateVehicle ;
3475: LD_ADDR_EXP 32
3479: PUSH
3480: CALL_OW 45
3484: ST_TO_ADDR
// PlaceUnitXY ( usCargo , 81 , 143 , false ) ;
3485: LD_EXP 32
3489: PPUSH
3490: LD_INT 81
3492: PPUSH
3493: LD_INT 143
3495: PPUSH
3496: LD_INT 0
3498: PPUSH
3499: CALL_OW 48
// Connect ( usCargo ) ;
3503: LD_EXP 32
3507: PPUSH
3508: CALL 24843 0 1
// DoNotAttack ( 5 , usCargo ) ;
3512: LD_INT 5
3514: PPUSH
3515: LD_EXP 32
3519: PPUSH
3520: CALL_OW 471
// end ;
3524: LD_VAR 0 1
3528: RET
// every 6 6$00 trigger usAttacksAllowed and IsOk ( amFac ) and BuildingStatus ( amFac ) = bs_idle do var i , chassis , weapon ;
3529: LD_EXP 6
3533: PUSH
3534: LD_INT 25
3536: PPUSH
3537: CALL_OW 302
3541: AND
3542: PUSH
3543: LD_INT 25
3545: PPUSH
3546: CALL_OW 461
3550: PUSH
3551: LD_INT 2
3553: EQUAL
3554: AND
3555: IFFALSE 3712
3557: GO 3559
3559: DISABLE
3560: LD_INT 0
3562: PPUSH
3563: PPUSH
3564: PPUSH
// begin enable ;
3565: ENABLE
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
3566: LD_ADDR_VAR 0 1
3570: PUSH
3571: DOUBLE
3572: LD_INT 1
3574: DEC
3575: ST_TO_ADDR
3576: LD_INT 4
3578: PUSH
3579: LD_INT 5
3581: PUSH
3582: LD_INT 6
3584: PUSH
3585: LD_INT 6
3587: PUSH
3588: EMPTY
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: PUSH
3594: LD_OWVAR 67
3598: ARRAY
3599: PUSH
3600: FOR_TO
3601: IFFALSE 3710
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3603: LD_ADDR_VAR 0 2
3607: PUSH
3608: LD_INT 2
3610: PUSH
3611: LD_INT 3
3613: PUSH
3614: LD_INT 4
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: LIST
3621: PUSH
3622: LD_INT 1
3624: PPUSH
3625: LD_INT 3
3627: PPUSH
3628: CALL_OW 12
3632: ARRAY
3633: ST_TO_ADDR
// if chassis = us_heavy_tracked then
3634: LD_VAR 0 2
3638: PUSH
3639: LD_INT 4
3641: EQUAL
3642: IFFALSE 3654
// weapon := us_heavy_gun else
3644: LD_ADDR_VAR 0 3
3648: PUSH
3649: LD_INT 6
3651: ST_TO_ADDR
3652: GO 3685
// weapon := [ us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3654: LD_ADDR_VAR 0 3
3658: PUSH
3659: LD_INT 5
3661: PUSH
3662: LD_INT 7
3664: PUSH
3665: LD_INT 4
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: LIST
3672: PUSH
3673: LD_INT 1
3675: PPUSH
3676: LD_INT 3
3678: PPUSH
3679: CALL_OW 12
3683: ARRAY
3684: ST_TO_ADDR
// AddComConstruct ( amFac , chassis , engine_combustion , control_remote , weapon ) ;
3685: LD_INT 25
3687: PPUSH
3688: LD_VAR 0 2
3692: PPUSH
3693: LD_INT 1
3695: PPUSH
3696: LD_INT 2
3698: PPUSH
3699: LD_VAR 0 3
3703: PPUSH
3704: CALL_OW 185
// end ;
3708: GO 3600
3710: POP
3711: POP
// end ;
3712: PPOPN 3
3714: END
// every 0 0$01 do var i , un , tmp ;
3715: GO 3717
3717: DISABLE
3718: LD_INT 0
3720: PPUSH
3721: PPUSH
3722: PPUSH
// begin if Difficulty < 2 then
3723: LD_OWVAR 67
3727: PUSH
3728: LD_INT 2
3730: LESS
3731: IFFALSE 3735
// exit ;
3733: GO 4018
// tmp := [ ] ;
3735: LD_ADDR_VAR 0 3
3739: PUSH
3740: EMPTY
3741: ST_TO_ADDR
// for i := 1 to Difficulty do
3742: LD_ADDR_VAR 0 1
3746: PUSH
3747: DOUBLE
3748: LD_INT 1
3750: DEC
3751: ST_TO_ADDR
3752: LD_OWVAR 67
3756: PUSH
3757: FOR_TO
3758: IFFALSE 3854
// begin uc_side := 4 ;
3760: LD_ADDR_OWVAR 20
3764: PUSH
3765: LD_INT 4
3767: ST_TO_ADDR
// uc_nation := nation_american ;
3768: LD_ADDR_OWVAR 21
3772: PUSH
3773: LD_INT 1
3775: ST_TO_ADDR
// PrepareSoldier ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3776: LD_INT 0
3778: PPUSH
3779: LD_INT 3
3781: PUSH
3782: LD_INT 4
3784: PUSH
3785: LD_INT 5
3787: PUSH
3788: LD_INT 6
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: PUSH
3797: LD_OWVAR 67
3801: ARRAY
3802: PPUSH
3803: CALL_OW 381
// un := CreateHuman ;
3807: LD_ADDR_VAR 0 2
3811: PUSH
3812: CALL_OW 44
3816: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
3817: LD_ADDR_VAR 0 3
3821: PUSH
3822: LD_VAR 0 3
3826: PPUSH
3827: LD_VAR 0 2
3831: PPUSH
3832: CALL 54226 0 2
3836: ST_TO_ADDR
// PlaceUnitArea ( un , westSpawnArea , false ) ;
3837: LD_VAR 0 2
3841: PPUSH
3842: LD_INT 19
3844: PPUSH
3845: LD_INT 0
3847: PPUSH
3848: CALL_OW 49
// end ;
3852: GO 3757
3854: POP
3855: POP
// for i in tmp do
3856: LD_ADDR_VAR 0 1
3860: PUSH
3861: LD_VAR 0 3
3865: PUSH
3866: FOR_IN
3867: IFFALSE 3913
// begin ComAgressiveMove ( i , 54 , 51 ) ;
3869: LD_VAR 0 1
3873: PPUSH
3874: LD_INT 54
3876: PPUSH
3877: LD_INT 51
3879: PPUSH
3880: CALL_OW 114
// AddComWait ( i , 0 0$20 ) ;
3884: LD_VAR 0 1
3888: PPUSH
3889: LD_INT 700
3891: PPUSH
3892: CALL_OW 202
// AddComAgressiveMove ( i , 35 , 6 ) ;
3896: LD_VAR 0 1
3900: PPUSH
3901: LD_INT 35
3903: PPUSH
3904: LD_INT 6
3906: PPUSH
3907: CALL_OW 174
// end ;
3911: GO 3866
3913: POP
3914: POP
// repeat wait ( 7 7$00 ) ;
3915: LD_INT 14700
3917: PPUSH
3918: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
3922: LD_ADDR_VAR 0 3
3926: PUSH
3927: LD_VAR 0 3
3931: PPUSH
3932: LD_INT 50
3934: PUSH
3935: EMPTY
3936: LIST
3937: PPUSH
3938: CALL_OW 72
3942: ST_TO_ADDR
// if not tmp then
3943: LD_VAR 0 3
3947: NOT
3948: IFFALSE 3952
// exit ;
3950: GO 4018
// for i in tmp do
3952: LD_ADDR_VAR 0 1
3956: PUSH
3957: LD_VAR 0 3
3961: PUSH
3962: FOR_IN
3963: IFFALSE 4009
// begin ComAgressiveMove ( i , 54 , 51 ) ;
3965: LD_VAR 0 1
3969: PPUSH
3970: LD_INT 54
3972: PPUSH
3973: LD_INT 51
3975: PPUSH
3976: CALL_OW 114
// AddComWait ( i , 0 0$20 ) ;
3980: LD_VAR 0 1
3984: PPUSH
3985: LD_INT 700
3987: PPUSH
3988: CALL_OW 202
// AddComAgressiveMove ( i , 35 , 6 ) ;
3992: LD_VAR 0 1
3996: PPUSH
3997: LD_INT 35
3999: PPUSH
4000: LD_INT 6
4002: PPUSH
4003: CALL_OW 174
// end ;
4007: GO 3962
4009: POP
4010: POP
// until not tmp ;
4011: LD_VAR 0 3
4015: NOT
4016: IFFALSE 3915
// end ;
4018: PPOPN 3
4020: END
// every 0 0$10 trigger usForces >= [ 4 , 5 , 6 , 6 ] [ Difficulty ] do var i , tmp ;
4021: LD_EXP 31
4025: PUSH
4026: LD_INT 4
4028: PUSH
4029: LD_INT 5
4031: PUSH
4032: LD_INT 6
4034: PUSH
4035: LD_INT 6
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: LIST
4042: LIST
4043: PUSH
4044: LD_OWVAR 67
4048: ARRAY
4049: GREATEREQUAL
4050: IFFALSE 4232
4052: GO 4054
4054: DISABLE
4055: LD_INT 0
4057: PPUSH
4058: PPUSH
// begin enable ;
4059: ENABLE
// tmp := usForces ;
4060: LD_ADDR_VAR 0 2
4064: PUSH
4065: LD_EXP 31
4069: ST_TO_ADDR
// usForces := [ ] ;
4070: LD_ADDR_EXP 31
4074: PUSH
4075: EMPTY
4076: ST_TO_ADDR
// if not tmp then
4077: LD_VAR 0 2
4081: NOT
4082: IFFALSE 4086
// exit ;
4084: GO 4232
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 123 , 141 , 20 ] ] ) then
4086: LD_INT 22
4088: PUSH
4089: LD_INT 2
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PUSH
4096: LD_INT 92
4098: PUSH
4099: LD_INT 123
4101: PUSH
4102: LD_INT 141
4104: PUSH
4105: LD_INT 20
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: PPUSH
4118: CALL_OW 69
4122: IFFALSE 4146
// begin ComAgressiveMove ( tmp , 126 , 143 ) ;
4124: LD_VAR 0 2
4128: PPUSH
4129: LD_INT 126
4131: PPUSH
4132: LD_INT 143
4134: PPUSH
4135: CALL_OW 114
// wait ( 0 0$30 ) ;
4139: LD_INT 1050
4141: PPUSH
4142: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
4146: LD_INT 35
4148: PPUSH
4149: CALL_OW 67
// tmp := AgressiveMove ( tmp , [ [ 51 , 50 ] , [ 98 , 50 ] , [ 114 , 50 ] , [ 127 , 51 ] , [ 131 , 35 ] ] ) ;
4153: LD_ADDR_VAR 0 2
4157: PUSH
4158: LD_VAR 0 2
4162: PPUSH
4163: LD_INT 51
4165: PUSH
4166: LD_INT 50
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: PUSH
4173: LD_INT 98
4175: PUSH
4176: LD_INT 50
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: PUSH
4183: LD_INT 114
4185: PUSH
4186: LD_INT 50
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 127
4195: PUSH
4196: LD_INT 51
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 131
4205: PUSH
4206: LD_INT 35
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: LIST
4217: LIST
4218: LIST
4219: PPUSH
4220: CALL 56830 0 2
4224: ST_TO_ADDR
// until not tmp ;
4225: LD_VAR 0 2
4229: NOT
4230: IFFALSE 4146
// end ;
4232: PPOPN 2
4234: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( southScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
4235: LD_EXP 3
4239: PUSH
4240: LD_EXP 5
4244: NOT
4245: AND
4246: PUSH
4247: LD_INT 11
4249: PPUSH
4250: LD_INT 22
4252: PUSH
4253: LD_INT 2
4255: PUSH
4256: EMPTY
4257: LIST
4258: LIST
4259: PPUSH
4260: CALL_OW 70
4264: AND
4265: IFFALSE 4386
4267: GO 4269
4269: DISABLE
4270: LD_INT 0
4272: PPUSH
4273: PPUSH
4274: PPUSH
// begin uc_side := 1 ;
4275: LD_ADDR_OWVAR 20
4279: PUSH
4280: LD_INT 1
4282: ST_TO_ADDR
// uc_nation := 1 ;
4283: LD_ADDR_OWVAR 21
4287: PUSH
4288: LD_INT 1
4290: ST_TO_ADDR
// tmp := [ ] ;
4291: LD_ADDR_VAR 0 3
4295: PUSH
4296: EMPTY
4297: ST_TO_ADDR
// for i := 1 to 2 do
4298: LD_ADDR_VAR 0 1
4302: PUSH
4303: DOUBLE
4304: LD_INT 1
4306: DEC
4307: ST_TO_ADDR
4308: LD_INT 2
4310: PUSH
4311: FOR_TO
4312: IFFALSE 4384
// begin PrepareSoldier ( false , 7 ) ;
4314: LD_INT 0
4316: PPUSH
4317: LD_INT 7
4319: PPUSH
4320: CALL_OW 381
// un := CreateHuman ;
4324: LD_ADDR_VAR 0 2
4328: PUSH
4329: CALL_OW 44
4333: ST_TO_ADDR
// PlaceUnitXYR ( un , 130 , 153 , 3 , false ) ;
4334: LD_VAR 0 2
4338: PPUSH
4339: LD_INT 130
4341: PPUSH
4342: LD_INT 153
4344: PPUSH
4345: LD_INT 3
4347: PPUSH
4348: LD_INT 0
4350: PPUSH
4351: CALL_OW 50
// SetClass ( un , class_sniper ) ;
4355: LD_VAR 0 2
4359: PPUSH
4360: LD_INT 5
4362: PPUSH
4363: CALL_OW 336
// AddComAgressiveMove ( un , 108 , 108 ) ;
4367: LD_VAR 0 2
4371: PPUSH
4372: LD_INT 108
4374: PPUSH
4375: LD_INT 108
4377: PPUSH
4378: CALL_OW 174
// end ;
4382: GO 4311
4384: POP
4385: POP
// end ;
4386: PPOPN 3
4388: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( northScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
4389: LD_EXP 3
4393: PUSH
4394: LD_EXP 5
4398: NOT
4399: AND
4400: PUSH
4401: LD_INT 10
4403: PPUSH
4404: LD_INT 22
4406: PUSH
4407: LD_INT 2
4409: PUSH
4410: EMPTY
4411: LIST
4412: LIST
4413: PPUSH
4414: CALL_OW 70
4418: AND
4419: IFFALSE 4540
4421: GO 4423
4423: DISABLE
4424: LD_INT 0
4426: PPUSH
4427: PPUSH
4428: PPUSH
// begin uc_side := 1 ;
4429: LD_ADDR_OWVAR 20
4433: PUSH
4434: LD_INT 1
4436: ST_TO_ADDR
// uc_nation := 1 ;
4437: LD_ADDR_OWVAR 21
4441: PUSH
4442: LD_INT 1
4444: ST_TO_ADDR
// tmp := [ ] ;
4445: LD_ADDR_VAR 0 3
4449: PUSH
4450: EMPTY
4451: ST_TO_ADDR
// for i := 1 to 2 do
4452: LD_ADDR_VAR 0 1
4456: PUSH
4457: DOUBLE
4458: LD_INT 1
4460: DEC
4461: ST_TO_ADDR
4462: LD_INT 2
4464: PUSH
4465: FOR_TO
4466: IFFALSE 4538
// begin PrepareSoldier ( false , 7 ) ;
4468: LD_INT 0
4470: PPUSH
4471: LD_INT 7
4473: PPUSH
4474: CALL_OW 381
// un := CreateHuman ;
4478: LD_ADDR_VAR 0 2
4482: PUSH
4483: CALL_OW 44
4487: ST_TO_ADDR
// PlaceUnitXYR ( un , 56 , 101 , 3 , false ) ;
4488: LD_VAR 0 2
4492: PPUSH
4493: LD_INT 56
4495: PPUSH
4496: LD_INT 101
4498: PPUSH
4499: LD_INT 3
4501: PPUSH
4502: LD_INT 0
4504: PPUSH
4505: CALL_OW 50
// SetClass ( un , class_sniper ) ;
4509: LD_VAR 0 2
4513: PPUSH
4514: LD_INT 5
4516: PPUSH
4517: CALL_OW 336
// AddComAgressiveMove ( un , 72 , 92 ) ;
4521: LD_VAR 0 2
4525: PPUSH
4526: LD_INT 72
4528: PPUSH
4529: LD_INT 92
4531: PPUSH
4532: CALL_OW 174
// end ;
4536: GO 4465
4538: POP
4539: POP
// end ;
4540: PPOPN 3
4542: END
// every 0 0$2 trigger not usSurrender do var i , tmp , cr , enemyInArea ;
4543: LD_EXP 7
4547: NOT
4548: IFFALSE 4749
4550: GO 4552
4552: DISABLE
4553: LD_INT 0
4555: PPUSH
4556: PPUSH
4557: PPUSH
4558: PPUSH
// begin enable ;
4559: ENABLE
// enemyInArea := FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_distxy , 113 , 139 , 15 ] ] ) ;
4560: LD_ADDR_VAR 0 4
4564: PUSH
4565: LD_INT 81
4567: PUSH
4568: LD_INT 1
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: PUSH
4575: LD_INT 92
4577: PUSH
4578: LD_INT 113
4580: PUSH
4581: LD_INT 139
4583: PUSH
4584: LD_INT 15
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PPUSH
4597: CALL_OW 69
4601: ST_TO_ADDR
// cr := GetListOfCratesInArea ( americanCratesArea ) ;
4602: LD_ADDR_VAR 0 3
4606: PUSH
4607: LD_INT 20
4609: PPUSH
4610: CALL_OW 435
4614: ST_TO_ADDR
// tmp := UnitFilter ( usCratesCollector , [ f_ok ] ) ;
4615: LD_ADDR_VAR 0 2
4619: PUSH
4620: LD_EXP 35
4624: PPUSH
4625: LD_INT 50
4627: PUSH
4628: EMPTY
4629: LIST
4630: PPUSH
4631: CALL_OW 72
4635: ST_TO_ADDR
// if not tmp then
4636: LD_VAR 0 2
4640: NOT
4641: IFFALSE 4646
// begin disable ;
4643: DISABLE
// exit ;
4644: GO 4749
// end ; for i in tmp do
4646: LD_ADDR_VAR 0 1
4650: PUSH
4651: LD_VAR 0 2
4655: PUSH
4656: FOR_IN
4657: IFFALSE 4747
// begin if enemyInArea and GetDistUnits ( i , usDepot ) > 12 then
4659: LD_VAR 0 4
4663: PUSH
4664: LD_VAR 0 1
4668: PPUSH
4669: LD_INT 1
4671: PPUSH
4672: CALL_OW 296
4676: PUSH
4677: LD_INT 12
4679: GREATER
4680: AND
4681: IFFALSE 4700
// ComMoveXY ( i , 83 , 147 ) else
4683: LD_VAR 0 1
4687: PPUSH
4688: LD_INT 83
4690: PPUSH
4691: LD_INT 147
4693: PPUSH
4694: CALL_OW 111
4698: GO 4745
// if not HasTask ( i ) and cr then
4700: LD_VAR 0 1
4704: PPUSH
4705: CALL_OW 314
4709: NOT
4710: PUSH
4711: LD_VAR 0 3
4715: AND
4716: IFFALSE 4745
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
4718: LD_VAR 0 1
4722: PPUSH
4723: LD_VAR 0 3
4727: PUSH
4728: LD_INT 1
4730: ARRAY
4731: PPUSH
4732: LD_VAR 0 3
4736: PUSH
4737: LD_INT 2
4739: ARRAY
4740: PPUSH
4741: CALL_OW 117
// end ;
4745: GO 4656
4747: POP
4748: POP
// end ;
4749: PPOPN 4
4751: END
// every 0 0$2 trigger IsOk ( usCargo ) and not usSurrender do var cr , enemyInArea ;
4752: LD_EXP 32
4756: PPUSH
4757: CALL_OW 302
4761: PUSH
4762: LD_EXP 7
4766: NOT
4767: AND
4768: IFFALSE 5031
4770: GO 4772
4772: DISABLE
4773: LD_INT 0
4775: PPUSH
4776: PPUSH
// begin enable ;
4777: ENABLE
// enemyInArea := FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4778: LD_ADDR_VAR 0 2
4782: PUSH
4783: LD_INT 16
4785: PPUSH
4786: LD_INT 81
4788: PUSH
4789: LD_INT 1
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: LD_INT 50
4798: PUSH
4799: EMPTY
4800: LIST
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PPUSH
4806: CALL_OW 70
4810: ST_TO_ADDR
// cr := GetListOfCratesInArea ( usCratesArea ) ;
4811: LD_ADDR_VAR 0 1
4815: PUSH
4816: LD_INT 12
4818: PPUSH
4819: CALL_OW 435
4823: ST_TO_ADDR
// if GetFuel ( usCargo ) < 10 and not See ( 2 , usCargo ) then
4824: LD_EXP 32
4828: PPUSH
4829: CALL_OW 261
4833: PUSH
4834: LD_INT 10
4836: LESS
4837: PUSH
4838: LD_INT 2
4840: PPUSH
4841: LD_EXP 32
4845: PPUSH
4846: CALL_OW 292
4850: NOT
4851: AND
4852: IFFALSE 4866
// SetFuel ( usCargo , 100 ) ;
4854: LD_EXP 32
4858: PPUSH
4859: LD_INT 100
4861: PPUSH
4862: CALL_OW 240
// if not HasTask ( usCargo ) and GetCargo ( usCargo , mat_cans ) < 100 and not enemyInArea then
4866: LD_EXP 32
4870: PPUSH
4871: CALL_OW 314
4875: NOT
4876: PUSH
4877: LD_EXP 32
4881: PPUSH
4882: LD_INT 1
4884: PPUSH
4885: CALL_OW 289
4889: PUSH
4890: LD_INT 100
4892: LESS
4893: AND
4894: PUSH
4895: LD_VAR 0 2
4899: NOT
4900: AND
4901: IFFALSE 4967
// begin if cr then
4903: LD_VAR 0 1
4907: IFFALSE 4938
// ComCollect ( usCargo , cr [ 1 ] , cr [ 2 ] ) else
4909: LD_EXP 32
4913: PPUSH
4914: LD_VAR 0 1
4918: PUSH
4919: LD_INT 1
4921: ARRAY
4922: PPUSH
4923: LD_VAR 0 1
4927: PUSH
4928: LD_INT 2
4930: ARRAY
4931: PPUSH
4932: CALL_OW 117
4936: GO 4965
// if not IsInArea ( usCargo , usCratesArea ) then
4938: LD_EXP 32
4942: PPUSH
4943: LD_INT 12
4945: PPUSH
4946: CALL_OW 308
4950: NOT
4951: IFFALSE 4965
// ComMoveToArea ( usCargo , usCratesArea ) ;
4953: LD_EXP 32
4957: PPUSH
4958: LD_INT 12
4960: PPUSH
4961: CALL_OW 113
// exit ;
4965: GO 5031
// end ; if enemyInArea and not IsInArea ( usCargo , americanBaseArea ) then
4967: LD_VAR 0 2
4971: PUSH
4972: LD_EXP 32
4976: PPUSH
4977: LD_INT 16
4979: PPUSH
4980: CALL_OW 308
4984: NOT
4985: AND
4986: IFFALSE 5005
// ComMoveXY ( usCargo , 80 , 143 ) else
4988: LD_EXP 32
4992: PPUSH
4993: LD_INT 80
4995: PPUSH
4996: LD_INT 143
4998: PPUSH
4999: CALL_OW 111
5003: GO 5031
// if GetCargo ( usCargo , mat_cans ) then
5005: LD_EXP 32
5009: PPUSH
5010: LD_INT 1
5012: PPUSH
5013: CALL_OW 289
5017: IFFALSE 5031
// ComGive ( usCargo , usDepot ) ;
5019: LD_EXP 32
5023: PPUSH
5024: LD_INT 1
5026: PPUSH
5027: CALL_OW 161
// end ;
5031: PPOPN 2
5033: END
// every 0 0$3 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) do var i , sci ;
5034: LD_EXP 7
5038: NOT
5039: PUSH
5040: LD_INT 22
5042: PUSH
5043: LD_INT 1
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PUSH
5050: LD_INT 21
5052: PUSH
5053: LD_INT 1
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: PUSH
5060: LD_INT 3
5062: PUSH
5063: LD_INT 50
5065: PUSH
5066: EMPTY
5067: LIST
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: LIST
5077: PPUSH
5078: CALL_OW 69
5082: AND
5083: PUSH
5084: LD_INT 22
5086: PUSH
5087: LD_INT 1
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: PUSH
5094: LD_INT 3
5096: PUSH
5097: LD_INT 60
5099: PUSH
5100: EMPTY
5101: LIST
5102: PUSH
5103: EMPTY
5104: LIST
5105: LIST
5106: PUSH
5107: LD_INT 25
5109: PUSH
5110: LD_INT 4
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PUSH
5117: EMPTY
5118: LIST
5119: LIST
5120: LIST
5121: PPUSH
5122: CALL_OW 69
5126: AND
5127: IFFALSE 5330
5129: GO 5131
5131: DISABLE
5132: LD_INT 0
5134: PPUSH
5135: PPUSH
// begin enable ;
5136: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) do
5137: LD_ADDR_VAR 0 1
5141: PUSH
5142: LD_INT 22
5144: PUSH
5145: LD_INT 1
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: PUSH
5152: LD_INT 21
5154: PUSH
5155: LD_INT 1
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: PUSH
5162: LD_INT 3
5164: PUSH
5165: LD_INT 50
5167: PUSH
5168: EMPTY
5169: LIST
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: LIST
5179: PPUSH
5180: CALL_OW 69
5184: PUSH
5185: FOR_IN
5186: IFFALSE 5328
// begin sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) ;
5188: LD_ADDR_VAR 0 2
5192: PUSH
5193: LD_INT 22
5195: PUSH
5196: LD_INT 1
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: PUSH
5203: LD_INT 3
5205: PUSH
5206: LD_INT 60
5208: PUSH
5209: EMPTY
5210: LIST
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PUSH
5216: LD_INT 25
5218: PUSH
5219: LD_INT 4
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: LIST
5230: PPUSH
5231: CALL_OW 69
5235: ST_TO_ADDR
// if not sci then
5236: LD_VAR 0 2
5240: NOT
5241: IFFALSE 5245
// break ;
5243: GO 5328
// sci := sci [ 1 ] ;
5245: LD_ADDR_VAR 0 2
5249: PUSH
5250: LD_VAR 0 2
5254: PUSH
5255: LD_INT 1
5257: ARRAY
5258: ST_TO_ADDR
// if IsInUnit ( sci ) then
5259: LD_VAR 0 2
5263: PPUSH
5264: CALL_OW 310
5268: IFFALSE 5281
// ComExit ( sci ) else
5270: LD_VAR 0 2
5274: PPUSH
5275: CALL 54624 0 1
5279: GO 5326
// begin ComHeal ( sci , i ) ;
5281: LD_VAR 0 2
5285: PPUSH
5286: LD_VAR 0 1
5290: PPUSH
5291: CALL_OW 128
// AddComEnterUnit ( sci , [ amLab1 , amLab2 ] [ rand ( 1 , 2 ) ] ) ;
5295: LD_VAR 0 2
5299: PPUSH
5300: LD_INT 32
5302: PUSH
5303: LD_INT 33
5305: PUSH
5306: EMPTY
5307: LIST
5308: LIST
5309: PUSH
5310: LD_INT 1
5312: PPUSH
5313: LD_INT 2
5315: PPUSH
5316: CALL_OW 12
5320: ARRAY
5321: PPUSH
5322: CALL_OW 180
// end ; end ;
5326: GO 5185
5328: POP
5329: POP
// end ;
5330: PPOPN 2
5332: END
// every 0 0$2 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) do var i , tmp , tmp2 ;
5333: LD_EXP 7
5337: NOT
5338: PUSH
5339: LD_INT 22
5341: PUSH
5342: LD_INT 1
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: PUSH
5349: LD_INT 3
5351: PUSH
5352: LD_INT 60
5354: PUSH
5355: EMPTY
5356: LIST
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: PUSH
5362: LD_INT 50
5364: PUSH
5365: EMPTY
5366: LIST
5367: PUSH
5368: LD_INT 34
5370: PUSH
5371: LD_INT 13
5373: PUSH
5374: EMPTY
5375: LIST
5376: LIST
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: LIST
5382: LIST
5383: PPUSH
5384: CALL_OW 69
5388: AND
5389: PUSH
5390: LD_INT 22
5392: PUSH
5393: LD_INT 1
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: PUSH
5400: LD_INT 3
5402: PUSH
5403: LD_INT 24
5405: PUSH
5406: LD_INT 1000
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PUSH
5417: LD_INT 21
5419: PUSH
5420: LD_INT 3
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: PUSH
5427: LD_INT 3
5429: PUSH
5430: LD_INT 30
5432: PUSH
5433: LD_INT 29
5435: PUSH
5436: EMPTY
5437: LIST
5438: LIST
5439: PUSH
5440: EMPTY
5441: LIST
5442: LIST
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: PPUSH
5450: CALL_OW 69
5454: AND
5455: IFFALSE 5724
5457: GO 5459
5459: DISABLE
5460: LD_INT 0
5462: PPUSH
5463: PPUSH
5464: PPUSH
// begin enable ;
5465: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
5466: LD_ADDR_VAR 0 2
5470: PUSH
5471: LD_INT 22
5473: PUSH
5474: LD_INT 1
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: PUSH
5481: LD_INT 3
5483: PUSH
5484: LD_INT 24
5486: PUSH
5487: LD_INT 1000
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PUSH
5494: EMPTY
5495: LIST
5496: LIST
5497: PUSH
5498: LD_INT 21
5500: PUSH
5501: LD_INT 3
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: PUSH
5508: LD_INT 3
5510: PUSH
5511: LD_INT 30
5513: PUSH
5514: LD_INT 29
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: LIST
5529: LIST
5530: PPUSH
5531: CALL_OW 69
5535: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
5536: LD_ADDR_VAR 0 3
5540: PUSH
5541: LD_INT 22
5543: PUSH
5544: LD_INT 1
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: PUSH
5551: LD_INT 3
5553: PUSH
5554: LD_INT 24
5556: PUSH
5557: LD_INT 600
5559: PUSH
5560: EMPTY
5561: LIST
5562: LIST
5563: PUSH
5564: EMPTY
5565: LIST
5566: LIST
5567: PUSH
5568: LD_INT 21
5570: PUSH
5571: LD_INT 3
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: PUSH
5578: LD_INT 3
5580: PUSH
5581: LD_INT 30
5583: PUSH
5584: LD_INT 29
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: LIST
5599: LIST
5600: PPUSH
5601: CALL_OW 69
5605: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
5606: LD_ADDR_VAR 0 1
5610: PUSH
5611: LD_INT 22
5613: PUSH
5614: LD_INT 1
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: PUSH
5621: LD_INT 3
5623: PUSH
5624: LD_INT 60
5626: PUSH
5627: EMPTY
5628: LIST
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: PUSH
5634: LD_INT 50
5636: PUSH
5637: EMPTY
5638: LIST
5639: PUSH
5640: LD_INT 34
5642: PUSH
5643: LD_INT 13
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: LIST
5654: LIST
5655: PPUSH
5656: CALL_OW 69
5660: PUSH
5661: FOR_IN
5662: IFFALSE 5722
// begin if tmp2 then
5664: LD_VAR 0 3
5668: IFFALSE 5696
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
5670: LD_VAR 0 1
5674: PPUSH
5675: LD_VAR 0 3
5679: PPUSH
5680: LD_VAR 0 1
5684: PPUSH
5685: CALL_OW 74
5689: PPUSH
5690: CALL_OW 130
5694: GO 5720
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
5696: LD_VAR 0 1
5700: PPUSH
5701: LD_VAR 0 2
5705: PPUSH
5706: LD_VAR 0 1
5710: PPUSH
5711: CALL_OW 74
5715: PPUSH
5716: CALL_OW 130
// end ;
5720: GO 5661
5722: POP
5723: POP
// end ;
5724: PPOPN 3
5726: END
// every 0 0$1 trigger not usSurrender and not FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) and usToBuild and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
5727: LD_EXP 7
5731: NOT
5732: PUSH
5733: LD_INT 16
5735: PPUSH
5736: LD_INT 81
5738: PUSH
5739: LD_INT 1
5741: PUSH
5742: EMPTY
5743: LIST
5744: LIST
5745: PUSH
5746: LD_INT 50
5748: PUSH
5749: EMPTY
5750: LIST
5751: PUSH
5752: EMPTY
5753: LIST
5754: LIST
5755: PPUSH
5756: CALL_OW 70
5760: NOT
5761: AND
5762: PUSH
5763: LD_EXP 33
5767: AND
5768: PUSH
5769: LD_INT 22
5771: PUSH
5772: LD_INT 1
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: PUSH
5779: LD_INT 3
5781: PUSH
5782: LD_INT 60
5784: PUSH
5785: EMPTY
5786: LIST
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: PUSH
5792: LD_INT 50
5794: PUSH
5795: EMPTY
5796: LIST
5797: PUSH
5798: LD_INT 34
5800: PUSH
5801: LD_INT 13
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: PPUSH
5814: CALL_OW 69
5818: AND
5819: IFFALSE 5931
5821: GO 5823
5823: DISABLE
// begin enable ;
5824: ENABLE
// ComCraneBuild ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) , usToBuild [ 1 ] [ 1 ] , usToBuild [ 1 ] [ 2 ] , usToBuild [ 1 ] [ 3 ] , usToBuild [ 1 ] [ 4 ] ) ;
5825: LD_INT 22
5827: PUSH
5828: LD_INT 1
5830: PUSH
5831: EMPTY
5832: LIST
5833: LIST
5834: PUSH
5835: LD_INT 3
5837: PUSH
5838: LD_INT 60
5840: PUSH
5841: EMPTY
5842: LIST
5843: PUSH
5844: EMPTY
5845: LIST
5846: LIST
5847: PUSH
5848: LD_INT 50
5850: PUSH
5851: EMPTY
5852: LIST
5853: PUSH
5854: LD_INT 34
5856: PUSH
5857: LD_INT 13
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PUSH
5864: EMPTY
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: PPUSH
5870: CALL_OW 69
5874: PPUSH
5875: LD_EXP 33
5879: PUSH
5880: LD_INT 1
5882: ARRAY
5883: PUSH
5884: LD_INT 1
5886: ARRAY
5887: PPUSH
5888: LD_EXP 33
5892: PUSH
5893: LD_INT 1
5895: ARRAY
5896: PUSH
5897: LD_INT 2
5899: ARRAY
5900: PPUSH
5901: LD_EXP 33
5905: PUSH
5906: LD_INT 1
5908: ARRAY
5909: PUSH
5910: LD_INT 3
5912: ARRAY
5913: PPUSH
5914: LD_EXP 33
5918: PUSH
5919: LD_INT 1
5921: ARRAY
5922: PUSH
5923: LD_INT 4
5925: ARRAY
5926: PPUSH
5927: CALL_OW 566
// end ;
5931: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) do var i , tmp , btmp , barracks ;
5932: LD_INT 22
5934: PUSH
5935: LD_INT 1
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: PUSH
5942: LD_INT 50
5944: PUSH
5945: EMPTY
5946: LIST
5947: PUSH
5948: LD_INT 3
5950: PUSH
5951: LD_INT 54
5953: PUSH
5954: EMPTY
5955: LIST
5956: PUSH
5957: EMPTY
5958: LIST
5959: LIST
5960: PUSH
5961: LD_INT 2
5963: PUSH
5964: LD_INT 25
5966: PUSH
5967: LD_INT 1
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: PUSH
5974: LD_INT 25
5976: PUSH
5977: LD_INT 5
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: PUSH
5984: LD_INT 25
5986: PUSH
5987: LD_INT 16
5989: PUSH
5990: EMPTY
5991: LIST
5992: LIST
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: PPUSH
6006: CALL_OW 69
6010: IFFALSE 6372
6012: GO 6014
6014: DISABLE
6015: LD_INT 0
6017: PPUSH
6018: PPUSH
6019: PPUSH
6020: PPUSH
// begin enable ;
6021: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) ;
6022: LD_ADDR_VAR 0 2
6026: PUSH
6027: LD_INT 22
6029: PUSH
6030: LD_INT 1
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: PUSH
6037: LD_INT 50
6039: PUSH
6040: EMPTY
6041: LIST
6042: PUSH
6043: LD_INT 3
6045: PUSH
6046: LD_INT 54
6048: PUSH
6049: EMPTY
6050: LIST
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: PUSH
6056: LD_INT 2
6058: PUSH
6059: LD_INT 25
6061: PUSH
6062: LD_INT 1
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: PUSH
6069: LD_INT 25
6071: PUSH
6072: LD_INT 5
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: PUSH
6079: LD_INT 25
6081: PUSH
6082: LD_INT 16
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: PPUSH
6101: CALL_OW 69
6105: ST_TO_ADDR
// btmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
6106: LD_ADDR_VAR 0 3
6110: PUSH
6111: LD_INT 22
6113: PUSH
6114: LD_INT 1
6116: PUSH
6117: EMPTY
6118: LIST
6119: LIST
6120: PUSH
6121: LD_INT 50
6123: PUSH
6124: EMPTY
6125: LIST
6126: PUSH
6127: LD_INT 21
6129: PUSH
6130: LD_INT 3
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: PUSH
6137: LD_INT 30
6139: PUSH
6140: LD_INT 32
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: PUSH
6147: LD_INT 58
6149: PUSH
6150: EMPTY
6151: LIST
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: PPUSH
6160: CALL_OW 69
6164: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) ;
6165: LD_ADDR_VAR 0 4
6169: PUSH
6170: LD_INT 22
6172: PUSH
6173: LD_INT 1
6175: PUSH
6176: EMPTY
6177: LIST
6178: LIST
6179: PUSH
6180: LD_INT 50
6182: PUSH
6183: EMPTY
6184: LIST
6185: PUSH
6186: LD_INT 30
6188: PUSH
6189: LD_INT 5
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: LIST
6200: PPUSH
6201: CALL_OW 69
6205: ST_TO_ADDR
// if not tmp then
6206: LD_VAR 0 2
6210: NOT
6211: IFFALSE 6215
// exit ;
6213: GO 6372
// for i in tmp do
6215: LD_ADDR_VAR 0 1
6219: PUSH
6220: LD_VAR 0 2
6224: PUSH
6225: FOR_IN
6226: IFFALSE 6370
// begin btmp := FilterByTag ( btmp , 0 ) ;
6228: LD_ADDR_VAR 0 3
6232: PUSH
6233: LD_VAR 0 3
6237: PPUSH
6238: LD_INT 0
6240: PPUSH
6241: CALL 51795 0 2
6245: ST_TO_ADDR
// if not btmp then
6246: LD_VAR 0 3
6250: NOT
6251: IFFALSE 6296
// begin if GetClass ( i ) <> class_apeman_engineer and barracks then
6253: LD_VAR 0 1
6257: PPUSH
6258: CALL_OW 257
6262: PUSH
6263: LD_INT 16
6265: NONEQUAL
6266: PUSH
6267: LD_VAR 0 4
6271: AND
6272: IFFALSE 6292
// ComEnterUnit ( i , barracks [ 1 ] ) ;
6274: LD_VAR 0 1
6278: PPUSH
6279: LD_VAR 0 4
6283: PUSH
6284: LD_INT 1
6286: ARRAY
6287: PPUSH
6288: CALL_OW 120
// continue ;
6292: GO 6225
// end else
6294: GO 6368
// begin SetTag ( btmp [ 1 ] , 1 ) ;
6296: LD_VAR 0 3
6300: PUSH
6301: LD_INT 1
6303: ARRAY
6304: PPUSH
6305: LD_INT 1
6307: PPUSH
6308: CALL_OW 109
// ComEnterUnit ( i , btmp [ 1 ] ) ;
6312: LD_VAR 0 1
6316: PPUSH
6317: LD_VAR 0 3
6321: PUSH
6322: LD_INT 1
6324: ARRAY
6325: PPUSH
6326: CALL_OW 120
// wait ( 0 0$9 ) ;
6330: LD_INT 315
6332: PPUSH
6333: CALL_OW 67
// if IsEmpty ( btmp [ 1 ] ) then
6337: LD_VAR 0 3
6341: PUSH
6342: LD_INT 1
6344: ARRAY
6345: PPUSH
6346: CALL 18659 0 1
6350: IFFALSE 6368
// SetTag ( btmp [ 1 ] , 0 ) ;
6352: LD_VAR 0 3
6356: PUSH
6357: LD_INT 1
6359: ARRAY
6360: PPUSH
6361: LD_INT 0
6363: PPUSH
6364: CALL_OW 109
// end ; end ;
6368: GO 6225
6370: POP
6371: POP
// end ;
6372: PPOPN 4
6374: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do var i , tmp ;
6375: LD_INT 22
6377: PUSH
6378: LD_INT 1
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: PUSH
6385: LD_INT 33
6387: PUSH
6388: LD_INT 2
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: LD_INT 50
6397: PUSH
6398: EMPTY
6399: LIST
6400: PUSH
6401: LD_INT 3
6403: PUSH
6404: LD_INT 61
6406: PUSH
6407: EMPTY
6408: LIST
6409: PUSH
6410: EMPTY
6411: LIST
6412: LIST
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: PPUSH
6420: CALL_OW 69
6424: IFFALSE 6515
6426: GO 6428
6428: DISABLE
6429: LD_INT 0
6431: PPUSH
6432: PPUSH
// begin enable ;
6433: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
6434: LD_ADDR_VAR 0 2
6438: PUSH
6439: LD_INT 22
6441: PUSH
6442: LD_INT 1
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: PUSH
6449: LD_INT 33
6451: PUSH
6452: LD_INT 2
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PUSH
6459: LD_INT 50
6461: PUSH
6462: EMPTY
6463: LIST
6464: PUSH
6465: LD_INT 3
6467: PUSH
6468: LD_INT 61
6470: PUSH
6471: EMPTY
6472: LIST
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: PPUSH
6484: CALL_OW 69
6488: ST_TO_ADDR
// for i in tmp do
6489: LD_ADDR_VAR 0 1
6493: PUSH
6494: LD_VAR 0 2
6498: PUSH
6499: FOR_IN
6500: IFFALSE 6513
// Connect ( i ) ;
6502: LD_VAR 0 1
6506: PPUSH
6507: CALL 24843 0 1
6511: GO 6499
6513: POP
6514: POP
// end ;
6515: PPOPN 2
6517: END
// every 1 1$00 trigger usAttacksAllowed and Difficulty > 1 do var i , un , veh , chassis , weapon ;
6518: LD_EXP 6
6522: PUSH
6523: LD_OWVAR 67
6527: PUSH
6528: LD_INT 1
6530: GREATER
6531: AND
6532: IFFALSE 6974
6534: GO 6536
6536: DISABLE
6537: LD_INT 0
6539: PPUSH
6540: PPUSH
6541: PPUSH
6542: PPUSH
6543: PPUSH
// begin wait ( [ 15 15$00 , 15 15$00 , 14 14$00 , 13 13$00 ] [ Difficulty ] ) ;
6544: LD_INT 31500
6546: PUSH
6547: LD_INT 31500
6549: PUSH
6550: LD_INT 29400
6552: PUSH
6553: LD_INT 27300
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: PUSH
6562: LD_OWVAR 67
6566: ARRAY
6567: PPUSH
6568: CALL_OW 67
// if usSurrender then
6572: LD_EXP 7
6576: IFFALSE 6580
// exit ;
6578: GO 6974
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] do
6580: LD_ADDR_VAR 0 1
6584: PUSH
6585: DOUBLE
6586: LD_INT 1
6588: DEC
6589: ST_TO_ADDR
6590: LD_INT 4
6592: PUSH
6593: LD_INT 5
6595: PUSH
6596: LD_INT 5
6598: PUSH
6599: LD_INT 6
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: PUSH
6608: LD_OWVAR 67
6612: ARRAY
6613: PUSH
6614: FOR_TO
6615: IFFALSE 6919
// begin uc_side := 1 ;
6617: LD_ADDR_OWVAR 20
6621: PUSH
6622: LD_INT 1
6624: ST_TO_ADDR
// uc_nation := 1 ;
6625: LD_ADDR_OWVAR 21
6629: PUSH
6630: LD_INT 1
6632: ST_TO_ADDR
// InitHc_All ( ) ;
6633: CALL_OW 584
// PrepareHuman ( false , 3 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
6637: LD_INT 0
6639: PPUSH
6640: LD_INT 3
6642: PPUSH
6643: LD_INT 5
6645: PUSH
6646: LD_INT 6
6648: PUSH
6649: LD_INT 7
6651: PUSH
6652: LD_INT 8
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: PUSH
6661: LD_OWVAR 67
6665: ARRAY
6666: PPUSH
6667: CALL_OW 380
// un := CreateHuman ;
6671: LD_ADDR_VAR 0 2
6675: PUSH
6676: CALL_OW 44
6680: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ i mod 3 + 1 ] ;
6681: LD_ADDR_VAR 0 4
6685: PUSH
6686: LD_INT 2
6688: PUSH
6689: LD_INT 3
6691: PUSH
6692: LD_INT 4
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: LIST
6699: PUSH
6700: LD_VAR 0 1
6704: PUSH
6705: LD_INT 3
6707: MOD
6708: PUSH
6709: LD_INT 1
6711: PLUS
6712: ARRAY
6713: ST_TO_ADDR
// if chassis = us_heavy_tracked then
6714: LD_VAR 0 4
6718: PUSH
6719: LD_INT 4
6721: EQUAL
6722: IFFALSE 6757
// weapon := [ us_heavy_gun , us_gatling_gun , us_double_gun ] [ rand ( 1 , 3 ) ] else
6724: LD_ADDR_VAR 0 5
6728: PUSH
6729: LD_INT 6
6731: PUSH
6732: LD_INT 4
6734: PUSH
6735: LD_INT 5
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: LIST
6742: PUSH
6743: LD_INT 1
6745: PPUSH
6746: LD_INT 3
6748: PPUSH
6749: CALL_OW 12
6753: ARRAY
6754: ST_TO_ADDR
6755: GO 6792
// weapon := [ us_double_gun , us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6757: LD_ADDR_VAR 0 5
6761: PUSH
6762: LD_INT 5
6764: PUSH
6765: LD_INT 5
6767: PUSH
6768: LD_INT 7
6770: PUSH
6771: LD_INT 4
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: PUSH
6780: LD_INT 1
6782: PPUSH
6783: LD_INT 4
6785: PPUSH
6786: CALL_OW 12
6790: ARRAY
6791: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_manual , weapon , 30 ) ;
6792: LD_VAR 0 4
6796: PPUSH
6797: LD_INT 1
6799: PPUSH
6800: LD_INT 1
6802: PPUSH
6803: LD_VAR 0 5
6807: PPUSH
6808: LD_INT 30
6810: PPUSH
6811: CALL 21375 0 5
// veh := CreateVehicle ;
6815: LD_ADDR_VAR 0 3
6819: PUSH
6820: CALL_OW 45
6824: ST_TO_ADDR
// usAdditionalForces := Replace ( usAdditionalForces , usAdditionalForces + 1 , veh ) ;
6825: LD_ADDR_EXP 34
6829: PUSH
6830: LD_EXP 34
6834: PPUSH
6835: LD_EXP 34
6839: PUSH
6840: LD_INT 1
6842: PLUS
6843: PPUSH
6844: LD_VAR 0 3
6848: PPUSH
6849: CALL_OW 1
6853: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6854: LD_VAR 0 3
6858: PPUSH
6859: LD_INT 4
6861: PPUSH
6862: CALL_OW 233
// PlaceUnitArea ( veh , americanEastArea , false ) ;
6866: LD_VAR 0 3
6870: PPUSH
6871: LD_INT 17
6873: PPUSH
6874: LD_INT 0
6876: PPUSH
6877: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6881: LD_VAR 0 2
6885: PPUSH
6886: LD_VAR 0 3
6890: PPUSH
6891: CALL_OW 52
// ComMoveXY ( veh , 153 , 45 ) ;
6895: LD_VAR 0 3
6899: PPUSH
6900: LD_INT 153
6902: PPUSH
6903: LD_INT 45
6905: PPUSH
6906: CALL_OW 111
// wait ( 0 0$2 ) ;
6910: LD_INT 70
6912: PPUSH
6913: CALL_OW 67
// end ;
6917: GO 6614
6919: POP
6920: POP
// repeat wait ( 0 0$1 ) ;
6921: LD_INT 35
6923: PPUSH
6924: CALL_OW 67
// usAdditionalForces := AgressiveMove ( usAdditionalForces , [ [ 150 , 36 ] , [ 138 , 25 ] ] ) ;
6928: LD_ADDR_EXP 34
6932: PUSH
6933: LD_EXP 34
6937: PPUSH
6938: LD_INT 150
6940: PUSH
6941: LD_INT 36
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: PUSH
6948: LD_INT 138
6950: PUSH
6951: LD_INT 25
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: PPUSH
6962: CALL 56830 0 2
6966: ST_TO_ADDR
// until not usAdditionalForces ;
6967: LD_EXP 34
6971: NOT
6972: IFFALSE 6921
// end ;
6974: PPOPN 5
6976: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 2 ] ] ) do
6977: LD_INT 22
6979: PUSH
6980: LD_INT 1
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PUSH
6987: LD_INT 101
6989: PUSH
6990: LD_INT 2
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PPUSH
7001: CALL_OW 69
7005: IFFALSE 7025
7007: GO 7009
7009: DISABLE
// begin wait ( 0 0$30 ) ;
7010: LD_INT 1050
7012: PPUSH
7013: CALL_OW 67
// usAttacksAllowed := true ;
7017: LD_ADDR_EXP 6
7021: PUSH
7022: LD_INT 1
7024: ST_TO_ADDR
// end ; end_of_file
7025: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7026: LD_VAR 0 1
7030: PPUSH
7031: CALL 59469 0 1
// if un = Heike then
7035: LD_VAR 0 1
7039: PUSH
7040: LD_EXP 15
7044: EQUAL
7045: IFFALSE 7054
// YouLost ( Heike ) ;
7047: LD_STRING Heike
7049: PPUSH
7050: CALL_OW 104
// if un = usCommander then
7054: LD_VAR 0 1
7058: PUSH
7059: LD_EXP 30
7063: EQUAL
7064: IFFALSE 7073
// YouLost ( Commander ) ;
7066: LD_STRING Commander
7068: PPUSH
7069: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_vehicle then
7073: LD_VAR 0 1
7077: PPUSH
7078: CALL_OW 255
7082: PUSH
7083: LD_INT 2
7085: EQUAL
7086: PUSH
7087: LD_VAR 0 1
7091: PPUSH
7092: CALL_OW 247
7096: PUSH
7097: LD_INT 2
7099: EQUAL
7100: AND
7101: IFFALSE 7118
// vehLossCounter := Inc ( vehLossCounter ) ;
7103: LD_ADDR_EXP 14
7107: PUSH
7108: LD_EXP 14
7112: PPUSH
7113: CALL 55587 0 1
7117: ST_TO_ADDR
// if GetSide ( un ) = 1 then
7118: LD_VAR 0 1
7122: PPUSH
7123: CALL_OW 255
7127: PUSH
7128: LD_INT 1
7130: EQUAL
7131: IFFALSE 7473
// begin if GetClass ( un ) = class_sniper then
7133: LD_VAR 0 1
7137: PPUSH
7138: CALL_OW 257
7142: PUSH
7143: LD_INT 5
7145: EQUAL
7146: IFFALSE 7163
// sniperKillCounter := Inc ( sniperKillCounter ) ;
7148: LD_ADDR_EXP 13
7152: PUSH
7153: LD_EXP 13
7157: PPUSH
7158: CALL 55587 0 1
7162: ST_TO_ADDR
// if GetWeapon ( un ) = us_crane and IsOk ( amFac ) then
7163: LD_VAR 0 1
7167: PPUSH
7168: CALL_OW 264
7172: PUSH
7173: LD_INT 13
7175: EQUAL
7176: PUSH
7177: LD_INT 25
7179: PPUSH
7180: CALL_OW 302
7184: AND
7185: IFFALSE 7248
// begin wait ( 0 0$05 * Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ) ) ;
7187: LD_INT 175
7189: PUSH
7190: LD_INT 22
7192: PUSH
7193: LD_INT 1
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: LD_INT 34
7202: PUSH
7203: LD_INT 13
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 69
7218: PPUSH
7219: CALL 18637 0 1
7223: MUL
7224: PPUSH
7225: CALL_OW 67
// AddComConstruct ( amFac , us_medium_wheeled , engine_solar , control_remote , us_crane ) ;
7229: LD_INT 25
7231: PPUSH
7232: LD_INT 2
7234: PPUSH
7235: LD_INT 2
7237: PPUSH
7238: LD_INT 2
7240: PPUSH
7241: LD_INT 13
7243: PPUSH
7244: CALL_OW 185
// end ; if GetWeapon ( un ) = us_cargo_bay and IsOk ( amFac ) then
7248: LD_VAR 0 1
7252: PPUSH
7253: CALL_OW 264
7257: PUSH
7258: LD_INT 12
7260: EQUAL
7261: PUSH
7262: LD_INT 25
7264: PPUSH
7265: CALL_OW 302
7269: AND
7270: IFFALSE 7291
// AddComConstruct ( amFac , us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ) ;
7272: LD_INT 25
7274: PPUSH
7275: LD_INT 2
7277: PPUSH
7278: LD_INT 1
7280: PPUSH
7281: LD_INT 2
7283: PPUSH
7284: LD_INT 12
7286: PPUSH
7287: CALL_OW 185
// if GetBType ( un ) = b_bunker then
7291: LD_VAR 0 1
7295: PPUSH
7296: CALL_OW 266
7300: PUSH
7301: LD_INT 32
7303: EQUAL
7304: IFFALSE 7388
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ [ b_bunker , b_turret ] [ rand ( 1 , 2 ) ] , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
7306: LD_ADDR_EXP 33
7310: PUSH
7311: LD_EXP 33
7315: PPUSH
7316: LD_EXP 33
7320: PUSH
7321: LD_INT 1
7323: PLUS
7324: PPUSH
7325: LD_INT 32
7327: PUSH
7328: LD_INT 33
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: PUSH
7335: LD_INT 1
7337: PPUSH
7338: LD_INT 2
7340: PPUSH
7341: CALL_OW 12
7345: ARRAY
7346: PUSH
7347: LD_VAR 0 1
7351: PPUSH
7352: CALL_OW 250
7356: PUSH
7357: LD_VAR 0 1
7361: PPUSH
7362: CALL_OW 251
7366: PUSH
7367: LD_VAR 0 1
7371: PPUSH
7372: CALL_OW 254
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: PPUSH
7383: CALL_OW 1
7387: ST_TO_ADDR
// if GetBType ( un ) in [ b_barracks , b_armoury ] then
7388: LD_VAR 0 1
7392: PPUSH
7393: CALL_OW 266
7397: PUSH
7398: LD_INT 5
7400: PUSH
7401: LD_INT 4
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: IN
7408: IFFALSE 7473
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_armoury , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
7410: LD_ADDR_EXP 33
7414: PUSH
7415: LD_EXP 33
7419: PPUSH
7420: LD_EXP 33
7424: PUSH
7425: LD_INT 1
7427: PLUS
7428: PPUSH
7429: LD_INT 4
7431: PUSH
7432: LD_VAR 0 1
7436: PPUSH
7437: CALL_OW 250
7441: PUSH
7442: LD_VAR 0 1
7446: PPUSH
7447: CALL_OW 251
7451: PUSH
7452: LD_VAR 0 1
7456: PPUSH
7457: CALL_OW 254
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: PPUSH
7468: CALL_OW 1
7472: ST_TO_ADDR
// end ; end ;
7473: PPOPN 1
7475: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 1 and GetTag ( un ) = 1 then
7476: LD_VAR 0 1
7480: PPUSH
7481: CALL_OW 255
7485: PUSH
7486: LD_INT 1
7488: EQUAL
7489: PUSH
7490: LD_VAR 0 1
7494: PPUSH
7495: CALL_OW 110
7499: PUSH
7500: LD_INT 1
7502: EQUAL
7503: AND
7504: IFFALSE 7518
// SetTag ( un , 0 ) ;
7506: LD_VAR 0 1
7510: PPUSH
7511: LD_INT 0
7513: PPUSH
7514: CALL_OW 109
// if GetSide ( un ) = 1 and GetWeapon ( un ) = us_heavy_gun and not seeHeavyGun then
7518: LD_VAR 0 1
7522: PPUSH
7523: CALL_OW 255
7527: PUSH
7528: LD_INT 1
7530: EQUAL
7531: PUSH
7532: LD_VAR 0 1
7536: PPUSH
7537: CALL_OW 264
7541: PUSH
7542: LD_INT 6
7544: EQUAL
7545: AND
7546: PUSH
7547: LD_EXP 11
7551: NOT
7552: AND
7553: IFFALSE 7563
// seeHeavyGun := true ;
7555: LD_ADDR_EXP 11
7559: PUSH
7560: LD_INT 1
7562: ST_TO_ADDR
// if GetControl ( un ) = control_remote and GetSide ( un ) <> 2 then
7563: LD_VAR 0 1
7567: PPUSH
7568: CALL_OW 263
7572: PUSH
7573: LD_INT 2
7575: EQUAL
7576: PUSH
7577: LD_VAR 0 1
7581: PPUSH
7582: CALL_OW 255
7586: PUSH
7587: LD_INT 2
7589: NONEQUAL
7590: AND
7591: IFFALSE 7617
// begin ComUnlink ( un ) ;
7593: LD_VAR 0 1
7597: PPUSH
7598: CALL_OW 136
// if not seeRemoteVehicle then
7602: LD_EXP 10
7606: NOT
7607: IFFALSE 7617
// seeRemoteVehicle := true ;
7609: LD_ADDR_EXP 10
7613: PUSH
7614: LD_INT 1
7616: ST_TO_ADDR
// end ; end ;
7617: PPOPN 1
7619: END
// on BuildingComplete ( b ) do var i , barracks ;
7620: LD_INT 0
7622: PPUSH
7623: PPUSH
// begin if GetSide ( b ) = 2 then
7624: LD_VAR 0 1
7628: PPUSH
7629: CALL_OW 255
7633: PUSH
7634: LD_INT 2
7636: EQUAL
7637: IFFALSE 7675
// begin if GetBType ( b ) = b_depot and IsInArea ( b , westBankArea ) then
7639: LD_VAR 0 1
7643: PPUSH
7644: CALL_OW 266
7648: PUSH
7649: LD_INT 0
7651: EQUAL
7652: PUSH
7653: LD_VAR 0 1
7657: PPUSH
7658: LD_INT 18
7660: PPUSH
7661: CALL_OW 308
7665: AND
7666: IFFALSE 7675
// SetAchievement ( ACH_WEST ) ;
7668: LD_STRING ACH_WEST
7670: PPUSH
7671: CALL_OW 543
// end ; if GetSide ( b ) = 1 then
7675: LD_VAR 0 1
7679: PPUSH
7680: CALL_OW 255
7684: PUSH
7685: LD_INT 1
7687: EQUAL
7688: IFFALSE 7864
// begin usToBuild := Delete ( usToBuild , 1 ) ;
7690: LD_ADDR_EXP 33
7694: PUSH
7695: LD_EXP 33
7699: PPUSH
7700: LD_INT 1
7702: PPUSH
7703: CALL_OW 3
7707: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
7708: LD_VAR 0 1
7712: PPUSH
7713: CALL_OW 266
7717: PUSH
7718: LD_INT 4
7720: EQUAL
7721: IFFALSE 7732
// ComUpgrade ( b ) ;
7723: LD_VAR 0 1
7727: PPUSH
7728: CALL_OW 146
// if GetBType ( b ) in [ b_bunker , b_turret ] then
7732: LD_VAR 0 1
7736: PPUSH
7737: CALL_OW 266
7741: PUSH
7742: LD_INT 32
7744: PUSH
7745: LD_INT 33
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: IN
7752: IFFALSE 7864
// begin AddComPlaceWeapon ( b , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
7754: LD_VAR 0 1
7758: PPUSH
7759: LD_INT 6
7761: PUSH
7762: LD_INT 7
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_INT 1
7771: PPUSH
7772: LD_INT 2
7774: PPUSH
7775: CALL_OW 12
7779: ARRAY
7780: PPUSH
7781: CALL_OW 208
// if GetBType ( b ) = b_turret then
7785: LD_VAR 0 1
7789: PPUSH
7790: CALL_OW 266
7794: PUSH
7795: LD_INT 33
7797: EQUAL
7798: IFFALSE 7802
// exit ;
7800: GO 7864
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
7802: LD_ADDR_VAR 0 3
7806: PUSH
7807: LD_INT 22
7809: PUSH
7810: LD_INT 1
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: PUSH
7817: LD_INT 30
7819: PUSH
7820: LD_INT 5
7822: PUSH
7823: EMPTY
7824: LIST
7825: LIST
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: PPUSH
7831: CALL_OW 69
7835: ST_TO_ADDR
// if barracks then
7836: LD_VAR 0 3
7840: IFFALSE 7864
// ComExitBuilding ( UnitsInside ( barracks [ 1 ] ) [ 1 ] ) ;
7842: LD_VAR 0 3
7846: PUSH
7847: LD_INT 1
7849: ARRAY
7850: PPUSH
7851: CALL_OW 313
7855: PUSH
7856: LD_INT 1
7858: ARRAY
7859: PPUSH
7860: CALL_OW 122
// end ; end ; end ;
7864: PPOPN 3
7866: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7867: LD_VAR 0 1
7871: PPUSH
7872: LD_VAR 0 2
7876: PPUSH
7877: CALL 59589 0 2
// if GetSide ( factory ) = 1 then
7881: LD_VAR 0 2
7885: PPUSH
7886: CALL_OW 255
7890: PUSH
7891: LD_INT 1
7893: EQUAL
7894: IFFALSE 7973
// begin if GetWeapon ( vehicle ) = us_cargo_bay then
7896: LD_VAR 0 1
7900: PPUSH
7901: CALL_OW 264
7905: PUSH
7906: LD_INT 12
7908: EQUAL
7909: IFFALSE 7921
// usCargo := vehicle ;
7911: LD_ADDR_EXP 32
7915: PUSH
7916: LD_VAR 0 1
7920: ST_TO_ADDR
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , us_crane ] then
7921: LD_VAR 0 1
7925: PPUSH
7926: CALL_OW 264
7930: PUSH
7931: LD_INT 12
7933: PUSH
7934: LD_INT 13
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: IN
7941: NOT
7942: IFFALSE 7973
// usForces := Replace ( usForces , usForces + 1 , vehicle ) ;
7944: LD_ADDR_EXP 31
7948: PUSH
7949: LD_EXP 31
7953: PPUSH
7954: LD_EXP 31
7958: PUSH
7959: LD_INT 1
7961: PLUS
7962: PPUSH
7963: LD_VAR 0 1
7967: PPUSH
7968: CALL_OW 1
7972: ST_TO_ADDR
// end ; end ;
7973: PPOPN 2
7975: END
// on EvacuateVehicle ( un , veh , p1 , p2 ) do begin if GetSide ( veh ) = 1 then
7976: LD_VAR 0 2
7980: PPUSH
7981: CALL_OW 255
7985: PUSH
7986: LD_INT 1
7988: EQUAL
7989: IFFALSE 8003
// AddComEnterUnit ( un , amFac ) ;
7991: LD_VAR 0 1
7995: PPUSH
7996: LD_INT 25
7998: PPUSH
7999: CALL_OW 180
// end ;
8003: PPOPN 4
8005: END
// on EvacuateBuilding ( b , un ) do begin if GetSide ( b ) = 1 and GetBType ( b ) = b_bunker and GetClass ( un ) in [ class_soldier , class_sniper ] and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] , [ f_ok ] ] ) then
8006: LD_VAR 0 1
8010: PPUSH
8011: CALL_OW 255
8015: PUSH
8016: LD_INT 1
8018: EQUAL
8019: PUSH
8020: LD_VAR 0 1
8024: PPUSH
8025: CALL_OW 266
8029: PUSH
8030: LD_INT 32
8032: EQUAL
8033: AND
8034: PUSH
8035: LD_VAR 0 2
8039: PPUSH
8040: CALL_OW 257
8044: PUSH
8045: LD_INT 1
8047: PUSH
8048: LD_INT 5
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: IN
8055: AND
8056: PUSH
8057: LD_INT 22
8059: PUSH
8060: LD_INT 1
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: PUSH
8067: LD_INT 30
8069: PUSH
8070: LD_INT 5
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: PUSH
8077: LD_INT 50
8079: PUSH
8080: EMPTY
8081: LIST
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: LIST
8087: PPUSH
8088: CALL_OW 69
8092: AND
8093: IFFALSE 8163
// if UnitsInside ( HexInfo ( 74 , 120 ) ) < 6 then
8095: LD_INT 74
8097: PPUSH
8098: LD_INT 120
8100: PPUSH
8101: CALL_OW 428
8105: PPUSH
8106: CALL_OW 313
8110: PUSH
8111: LD_INT 6
8113: LESS
8114: IFFALSE 8163
// begin ComEnterUnit ( un , HexInfo ( 74 , 120 ) ) ;
8116: LD_VAR 0 2
8120: PPUSH
8121: LD_INT 74
8123: PPUSH
8124: LD_INT 120
8126: PPUSH
8127: CALL_OW 428
8131: PPUSH
8132: CALL_OW 120
// if GetClass ( un ) = class_soldier then
8136: LD_VAR 0 2
8140: PPUSH
8141: CALL_OW 257
8145: PUSH
8146: LD_INT 1
8148: EQUAL
8149: IFFALSE 8163
// AddComChangeProfession ( un , class_sniper ) ;
8151: LD_VAR 0 2
8155: PPUSH
8156: LD_INT 5
8158: PPUSH
8159: CALL_OW 183
// end ; end ; end_of_file
8163: PPOPN 2
8165: END
// export function Action ; var i , j , veh , tmp , _tmp , hasEng , hasCamera , driver , counter ; begin
8166: LD_INT 0
8168: PPUSH
8169: PPUSH
8170: PPUSH
8171: PPUSH
8172: PPUSH
8173: PPUSH
8174: PPUSH
8175: PPUSH
8176: PPUSH
8177: PPUSH
// Video ( true ) ;
8178: LD_INT 1
8180: PPUSH
8181: CALL 54198 0 1
// music_nat := 1 ;
8185: LD_ADDR_OWVAR 71
8189: PUSH
8190: LD_INT 1
8192: ST_TO_ADDR
// music_class := music_recon ;
8193: LD_ADDR_OWVAR 72
8197: PUSH
8198: LD_INT 3
8200: ST_TO_ADDR
// PlaceSeeing ( 184 , 142 , 2 , - 10 ) ;
8201: LD_INT 184
8203: PPUSH
8204: LD_INT 142
8206: PPUSH
8207: LD_INT 2
8209: PPUSH
8210: LD_INT 10
8212: NEG
8213: PPUSH
8214: CALL_OW 330
// RemoveSeeing ( 184 , 142 , 2 ) ;
8218: LD_INT 184
8220: PPUSH
8221: LD_INT 142
8223: PPUSH
8224: LD_INT 2
8226: PPUSH
8227: CALL_OW 331
// PlaceSeeing ( 204 , 151 , 2 , - 10 ) ;
8231: LD_INT 204
8233: PPUSH
8234: LD_INT 151
8236: PPUSH
8237: LD_INT 2
8239: PPUSH
8240: LD_INT 10
8242: NEG
8243: PPUSH
8244: CALL_OW 330
// RemoveSeeing ( 204 , 151 , 2 ) ;
8248: LD_INT 204
8250: PPUSH
8251: LD_INT 151
8253: PPUSH
8254: LD_INT 2
8256: PPUSH
8257: CALL_OW 331
// CenterNowOnXY ( 184 , 142 ) ;
8261: LD_INT 184
8263: PPUSH
8264: LD_INT 142
8266: PPUSH
8267: CALL_OW 86
// wait ( 0 0$2 ) ;
8271: LD_INT 70
8273: PPUSH
8274: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
8278: LD_ADDR_VAR 0 5
8282: PUSH
8283: LD_EXP 15
8287: PUSH
8288: LD_EXP 16
8292: PUSH
8293: LD_EXP 17
8297: PUSH
8298: LD_EXP 18
8302: PUSH
8303: LD_EXP 19
8307: PUSH
8308: LD_EXP 20
8312: PUSH
8313: LD_EXP 21
8317: PUSH
8318: LD_EXP 22
8322: PUSH
8323: LD_EXP 24
8327: PUSH
8328: LD_EXP 25
8332: PUSH
8333: LD_EXP 26
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: PUSH
8351: LD_EXP 27
8355: UNION
8356: ST_TO_ADDR
// tmp := tmp diff 0 ;
8357: LD_ADDR_VAR 0 5
8361: PUSH
8362: LD_VAR 0 5
8366: PUSH
8367: LD_INT 0
8369: DIFF
8370: ST_TO_ADDR
// hasEng := UnitFilter ( tmp , [ f_class , 2 ] ) > 0 ;
8371: LD_ADDR_VAR 0 7
8375: PUSH
8376: LD_VAR 0 5
8380: PPUSH
8381: LD_INT 25
8383: PUSH
8384: LD_INT 2
8386: PUSH
8387: EMPTY
8388: LIST
8389: LIST
8390: PPUSH
8391: CALL_OW 72
8395: PUSH
8396: LD_INT 0
8398: GREATER
8399: ST_TO_ADDR
// hasCamera := false ;
8400: LD_ADDR_VAR 0 8
8404: PUSH
8405: LD_INT 0
8407: ST_TO_ADDR
// if not hasEng then
8408: LD_VAR 0 7
8412: NOT
8413: IFFALSE 8466
// begin _tmp := tmp diff [ Kurt , Mike ] ;
8415: LD_ADDR_VAR 0 6
8419: PUSH
8420: LD_VAR 0 5
8424: PUSH
8425: LD_EXP 25
8429: PUSH
8430: LD_EXP 17
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: DIFF
8439: ST_TO_ADDR
// SetClass ( _tmp [ rand ( 1 , _tmp ) ] , class_engineer ) ;
8440: LD_VAR 0 6
8444: PUSH
8445: LD_INT 1
8447: PPUSH
8448: LD_VAR 0 6
8452: PPUSH
8453: CALL_OW 12
8457: ARRAY
8458: PPUSH
8459: LD_INT 2
8461: PPUSH
8462: CALL_OW 336
// end ; if heikeVehicles then
8466: LD_EXP 29
8470: IFFALSE 9112
// begin tmp := SortByClass ( tmp , class_mechanic ) ;
8472: LD_ADDR_VAR 0 5
8476: PUSH
8477: LD_VAR 0 5
8481: PPUSH
8482: LD_INT 3
8484: PPUSH
8485: CALL 56452 0 2
8489: ST_TO_ADDR
// for i in heikeVehicles do
8490: LD_ADDR_VAR 0 2
8494: PUSH
8495: LD_EXP 29
8499: PUSH
8500: FOR_IN
8501: IFFALSE 9110
// begin if not tmp then
8503: LD_VAR 0 5
8507: NOT
8508: IFFALSE 8512
// break ;
8510: GO 9110
// uc_side := 2 ;
8512: LD_ADDR_OWVAR 20
8516: PUSH
8517: LD_INT 2
8519: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
8520: LD_ADDR_OWVAR 21
8524: PUSH
8525: LD_VAR 0 2
8529: PUSH
8530: LD_INT 5
8532: ARRAY
8533: ST_TO_ADDR
// vc_chassis := i [ 1 ] ;
8534: LD_ADDR_OWVAR 37
8538: PUSH
8539: LD_VAR 0 2
8543: PUSH
8544: LD_INT 1
8546: ARRAY
8547: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
8548: LD_ADDR_OWVAR 39
8552: PUSH
8553: LD_VAR 0 2
8557: PUSH
8558: LD_INT 2
8560: ARRAY
8561: ST_TO_ADDR
// vc_control := i [ 3 ] ;
8562: LD_ADDR_OWVAR 38
8566: PUSH
8567: LD_VAR 0 2
8571: PUSH
8572: LD_INT 3
8574: ARRAY
8575: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
8576: LD_ADDR_OWVAR 40
8580: PUSH
8581: LD_VAR 0 2
8585: PUSH
8586: LD_INT 4
8588: ARRAY
8589: ST_TO_ADDR
// veh := CreateVehicle ;
8590: LD_ADDR_VAR 0 4
8594: PUSH
8595: CALL_OW 45
8599: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
8600: LD_VAR 0 4
8604: PPUSH
8605: LD_INT 4
8607: PPUSH
8608: CALL_OW 233
// if i [ 3 ] = control_manual then
8612: LD_VAR 0 2
8616: PUSH
8617: LD_INT 3
8619: ARRAY
8620: PUSH
8621: LD_INT 1
8623: EQUAL
8624: IFFALSE 8718
// begin repeat wait ( 1 ) ;
8626: LD_INT 1
8628: PPUSH
8629: CALL_OW 67
// until PlaceUnitArea ( veh , startArea , false ) ;
8633: LD_VAR 0 4
8637: PPUSH
8638: LD_INT 1
8640: PPUSH
8641: LD_INT 0
8643: PPUSH
8644: CALL_OW 49
8648: IFFALSE 8626
// if i [ 4 ] = ar_control_tower then
8650: LD_VAR 0 2
8654: PUSH
8655: LD_INT 4
8657: ARRAY
8658: PUSH
8659: LD_INT 31
8661: EQUAL
8662: IFFALSE 8680
// SetClass ( tmp [ 1 ] , class_mechanic ) ;
8664: LD_VAR 0 5
8668: PUSH
8669: LD_INT 1
8671: ARRAY
8672: PPUSH
8673: LD_INT 3
8675: PPUSH
8676: CALL_OW 336
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
8680: LD_VAR 0 5
8684: PUSH
8685: LD_INT 1
8687: ARRAY
8688: PPUSH
8689: LD_VAR 0 4
8693: PPUSH
8694: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
8698: LD_ADDR_VAR 0 5
8702: PUSH
8703: LD_VAR 0 5
8707: PPUSH
8708: LD_INT 1
8710: PPUSH
8711: CALL_OW 3
8715: ST_TO_ADDR
// end else
8716: GO 8788
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
8718: LD_INT 22
8720: PUSH
8721: LD_INT 2
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: PUSH
8728: LD_INT 34
8730: PUSH
8731: LD_INT 31
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: PPUSH
8742: CALL_OW 69
8746: IFFALSE 8788
// begin repeat wait ( 1 ) ;
8748: LD_INT 1
8750: PPUSH
8751: CALL_OW 67
// until PlaceUnitArea ( veh , startArea , false ) ;
8755: LD_VAR 0 4
8759: PPUSH
8760: LD_INT 1
8762: PPUSH
8763: LD_INT 0
8765: PPUSH
8766: CALL_OW 49
8770: IFFALSE 8748
// Connect ( veh ) ;
8772: LD_VAR 0 4
8776: PPUSH
8777: CALL 24843 0 1
// wait ( 0 0$2 ) ;
8781: LD_INT 70
8783: PPUSH
8784: CALL_OW 67
// end ; SetLives ( veh , i [ 6 ] ) ;
8788: LD_VAR 0 4
8792: PPUSH
8793: LD_VAR 0 2
8797: PUSH
8798: LD_INT 6
8800: ARRAY
8801: PPUSH
8802: CALL_OW 234
// SetFuel ( veh , 20 ) ;
8806: LD_VAR 0 4
8810: PPUSH
8811: LD_INT 20
8813: PPUSH
8814: CALL_OW 240
// if i [ 7 ] and GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay ] then
8818: LD_VAR 0 2
8822: PUSH
8823: LD_INT 7
8825: ARRAY
8826: PUSH
8827: LD_VAR 0 4
8831: PPUSH
8832: CALL_OW 264
8836: PUSH
8837: LD_INT 51
8839: PUSH
8840: LD_INT 32
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: IN
8847: AND
8848: IFFALSE 8899
// begin for j := 1 to 2 do
8850: LD_ADDR_VAR 0 3
8854: PUSH
8855: DOUBLE
8856: LD_INT 1
8858: DEC
8859: ST_TO_ADDR
8860: LD_INT 2
8862: PUSH
8863: FOR_TO
8864: IFFALSE 8897
// AddCargo ( veh , j , i [ 7 ] [ j ] ) ;
8866: LD_VAR 0 4
8870: PPUSH
8871: LD_VAR 0 3
8875: PPUSH
8876: LD_VAR 0 2
8880: PUSH
8881: LD_INT 7
8883: ARRAY
8884: PUSH
8885: LD_VAR 0 3
8889: ARRAY
8890: PPUSH
8891: CALL_OW 291
8895: GO 8863
8897: POP
8898: POP
// end ; ComMoveXY ( veh , 185 , 144 ) ;
8899: LD_VAR 0 4
8903: PPUSH
8904: LD_INT 185
8906: PPUSH
8907: LD_INT 144
8909: PPUSH
8910: CALL_OW 111
// if GetControl ( veh ) = control_manual and not hasCamera and GetClass ( IsDrivenBy ( veh ) ) = 2 then
8914: LD_VAR 0 4
8918: PPUSH
8919: CALL_OW 263
8923: PUSH
8924: LD_INT 1
8926: EQUAL
8927: PUSH
8928: LD_VAR 0 8
8932: NOT
8933: AND
8934: PUSH
8935: LD_VAR 0 4
8939: PPUSH
8940: CALL_OW 311
8944: PPUSH
8945: CALL_OW 257
8949: PUSH
8950: LD_INT 2
8952: EQUAL
8953: AND
8954: IFFALSE 9059
// begin hasCamera := true ;
8956: LD_ADDR_VAR 0 8
8960: PUSH
8961: LD_INT 1
8963: ST_TO_ADDR
// driver := IsDrivenBy ( veh ) ;
8964: LD_ADDR_VAR 0 9
8968: PUSH
8969: LD_VAR 0 4
8973: PPUSH
8974: CALL_OW 311
8978: ST_TO_ADDR
// AddComMoveXY ( veh , 177 , 138 ) ;
8979: LD_VAR 0 4
8983: PPUSH
8984: LD_INT 177
8986: PPUSH
8987: LD_INT 138
8989: PPUSH
8990: CALL_OW 171
// AddComExitVehicle ( driver ) ;
8994: LD_VAR 0 9
8998: PPUSH
8999: CALL_OW 181
// AddComHiddenCamera ( driver , 190 , 150 ) ;
9003: LD_VAR 0 9
9007: PPUSH
9008: LD_INT 190
9010: PPUSH
9011: LD_INT 150
9013: PPUSH
9014: CALL_OW 217
// AddComEnterUnit ( driver , veh ) ;
9018: LD_VAR 0 9
9022: PPUSH
9023: LD_VAR 0 4
9027: PPUSH
9028: CALL_OW 180
// AddComMoveXY ( driver , 170 , 103 ) ;
9032: LD_VAR 0 9
9036: PPUSH
9037: LD_INT 170
9039: PPUSH
9040: LD_INT 103
9042: PPUSH
9043: CALL_OW 171
// CenterOnXY ( 190 , 150 ) ;
9047: LD_INT 190
9049: PPUSH
9050: LD_INT 150
9052: PPUSH
9053: CALL_OW 84
// end else
9057: GO 9101
// begin AddComWait ( veh , 0 0$2 ) ;
9059: LD_VAR 0 4
9063: PPUSH
9064: LD_INT 70
9066: PPUSH
9067: CALL_OW 202
// AddComMoveXY ( veh , 179 , 129 ) ;
9071: LD_VAR 0 4
9075: PPUSH
9076: LD_INT 179
9078: PPUSH
9079: LD_INT 129
9081: PPUSH
9082: CALL_OW 171
// AddComMoveXY ( veh , 170 , 103 ) ;
9086: LD_VAR 0 4
9090: PPUSH
9091: LD_INT 170
9093: PPUSH
9094: LD_INT 103
9096: PPUSH
9097: CALL_OW 171
// end ; wait ( 0 0$2 ) ;
9101: LD_INT 70
9103: PPUSH
9104: CALL_OW 67
// end ;
9108: GO 8500
9110: POP
9111: POP
// end ; if tmp then
9112: LD_VAR 0 5
9116: IFFALSE 9270
// begin for i in tmp do
9118: LD_ADDR_VAR 0 2
9122: PUSH
9123: LD_VAR 0 5
9127: PUSH
9128: FOR_IN
9129: IFFALSE 9268
// begin SetDir ( i , 4 ) ;
9131: LD_VAR 0 2
9135: PPUSH
9136: LD_INT 4
9138: PPUSH
9139: CALL_OW 233
// repeat wait ( 1 ) ;
9143: LD_INT 1
9145: PPUSH
9146: CALL_OW 67
// until PlaceUnitArea ( i , startArea , false ) ;
9150: LD_VAR 0 2
9154: PPUSH
9155: LD_INT 1
9157: PPUSH
9158: LD_INT 0
9160: PPUSH
9161: CALL_OW 49
9165: IFFALSE 9143
// ComMoveXY ( i , 185 , 144 ) ;
9167: LD_VAR 0 2
9171: PPUSH
9172: LD_INT 185
9174: PPUSH
9175: LD_INT 144
9177: PPUSH
9178: CALL_OW 111
// if GetClass ( i ) = 2 and not hasCamera then
9182: LD_VAR 0 2
9186: PPUSH
9187: CALL_OW 257
9191: PUSH
9192: LD_INT 2
9194: EQUAL
9195: PUSH
9196: LD_VAR 0 8
9200: NOT
9201: AND
9202: IFFALSE 9229
// begin hasCamera := true ;
9204: LD_ADDR_VAR 0 8
9208: PUSH
9209: LD_INT 1
9211: ST_TO_ADDR
// AddComHiddenCamera ( i , 190 , 150 ) ;
9212: LD_VAR 0 2
9216: PPUSH
9217: LD_INT 190
9219: PPUSH
9220: LD_INT 150
9222: PPUSH
9223: CALL_OW 217
// end else
9227: GO 9244
// AddComMoveXY ( i , 179 , 129 ) ;
9229: LD_VAR 0 2
9233: PPUSH
9234: LD_INT 179
9236: PPUSH
9237: LD_INT 129
9239: PPUSH
9240: CALL_OW 171
// AddComMoveXY ( i , 170 , 103 ) ;
9244: LD_VAR 0 2
9248: PPUSH
9249: LD_INT 170
9251: PPUSH
9252: LD_INT 103
9254: PPUSH
9255: CALL_OW 171
// wait ( 0 0$2 ) ;
9259: LD_INT 70
9261: PPUSH
9262: CALL_OW 67
// end ;
9266: GO 9128
9268: POP
9269: POP
// end ; if heikeApes then
9270: LD_EXP 28
9274: IFFALSE 9401
// begin counter := 0 ;
9276: LD_ADDR_VAR 0 10
9280: PUSH
9281: LD_INT 0
9283: ST_TO_ADDR
// for i in heikeApes do
9284: LD_ADDR_VAR 0 2
9288: PUSH
9289: LD_EXP 28
9293: PUSH
9294: FOR_IN
9295: IFFALSE 9399
// begin if counter > 2 then
9297: LD_VAR 0 10
9301: PUSH
9302: LD_INT 2
9304: GREATER
9305: IFFALSE 9309
// break ;
9307: GO 9399
// counter := Inc ( counter ) ;
9309: LD_ADDR_VAR 0 10
9313: PUSH
9314: LD_VAR 0 10
9318: PPUSH
9319: CALL 55587 0 1
9323: ST_TO_ADDR
// SetDir ( i , 4 ) ;
9324: LD_VAR 0 2
9328: PPUSH
9329: LD_INT 4
9331: PPUSH
9332: CALL_OW 233
// repeat wait ( 1 ) ;
9336: LD_INT 1
9338: PPUSH
9339: CALL_OW 67
// until PlaceUnitArea ( i , startArea , false ) ;
9343: LD_VAR 0 2
9347: PPUSH
9348: LD_INT 1
9350: PPUSH
9351: LD_INT 0
9353: PPUSH
9354: CALL_OW 49
9358: IFFALSE 9336
// ComMoveXY ( i , 185 , 144 ) ;
9360: LD_VAR 0 2
9364: PPUSH
9365: LD_INT 185
9367: PPUSH
9368: LD_INT 144
9370: PPUSH
9371: CALL_OW 111
// AddComMoveXY ( i , 170 , 103 ) ;
9375: LD_VAR 0 2
9379: PPUSH
9380: LD_INT 170
9382: PPUSH
9383: LD_INT 103
9385: PPUSH
9386: CALL_OW 171
// wait ( 0 0$2 ) ;
9390: LD_INT 70
9392: PPUSH
9393: CALL_OW 67
// end ;
9397: GO 9294
9399: POP
9400: POP
// end ; AddComMoveXY ( Heike , 163 , 89 ) ;
9401: LD_EXP 15
9405: PPUSH
9406: LD_INT 163
9408: PPUSH
9409: LD_INT 89
9411: PPUSH
9412: CALL_OW 171
// Say ( Heike , DH-Intro-1 ) ;
9416: LD_EXP 15
9420: PPUSH
9421: LD_STRING DH-Intro-1
9423: PPUSH
9424: CALL_OW 88
// CenterOnXY ( 175 , 117 ) ;
9428: LD_INT 175
9430: PPUSH
9431: LD_INT 117
9433: PPUSH
9434: CALL_OW 84
// if Markov then
9438: LD_EXP 22
9442: IFFALSE 10017
// begin Say ( Markov , DMar-Intro-2 ) ;
9444: LD_EXP 22
9448: PPUSH
9449: LD_STRING DMar-Intro-2
9451: PPUSH
9452: CALL_OW 88
// Say ( Markov , DMar-Intro-3 ) ;
9456: LD_EXP 22
9460: PPUSH
9461: LD_STRING DMar-Intro-3
9463: PPUSH
9464: CALL_OW 88
// wait ( 0 0$1 ) ;
9468: LD_INT 35
9470: PPUSH
9471: CALL_OW 67
// CenterOnUnits ( Heike ) ;
9475: LD_EXP 15
9479: PPUSH
9480: CALL_OW 85
// if Kurt then
9484: LD_EXP 25
9488: IFFALSE 9540
// begin if IsInUnit ( Kurt ) then
9490: LD_EXP 25
9494: PPUSH
9495: CALL_OW 310
9499: IFFALSE 9510
// ComExit ( Kurt ) ;
9501: LD_EXP 25
9505: PPUSH
9506: CALL 54624 0 1
// AddComMoveXY ( Kurt , 130 , 56 ) ;
9510: LD_EXP 25
9514: PPUSH
9515: LD_INT 130
9517: PPUSH
9518: LD_INT 56
9520: PPUSH
9521: CALL_OW 171
// AddComTurnXY ( Kurt , 129 , 56 ) ;
9525: LD_EXP 25
9529: PPUSH
9530: LD_INT 129
9532: PPUSH
9533: LD_INT 56
9535: PPUSH
9536: CALL_OW 178
// end ; if Kaia then
9540: LD_EXP 20
9544: IFFALSE 9724
// begin Say ( Kaia , DK-Intro-4 ) ;
9546: LD_EXP 20
9550: PPUSH
9551: LD_STRING DK-Intro-4
9553: PPUSH
9554: CALL_OW 88
// Say ( Markov , DMar-Intro-5 ) ;
9558: LD_EXP 22
9562: PPUSH
9563: LD_STRING DMar-Intro-5
9565: PPUSH
9566: CALL_OW 88
// Say ( Markov , DMar-Intro-6 ) ;
9570: LD_EXP 22
9574: PPUSH
9575: LD_STRING DMar-Intro-6
9577: PPUSH
9578: CALL_OW 88
// Say ( Olaf , DO-Intro-7 ) ;
9582: LD_EXP 24
9586: PPUSH
9587: LD_STRING DO-Intro-7
9589: PPUSH
9590: CALL_OW 88
// CenterOnXY ( 160 , 85 ) ;
9594: LD_INT 160
9596: PPUSH
9597: LD_INT 85
9599: PPUSH
9600: CALL_OW 84
// Say ( Markov , DMar-Intro-8 ) ;
9604: LD_EXP 22
9608: PPUSH
9609: LD_STRING DMar-Intro-8
9611: PPUSH
9612: CALL_OW 88
// Say ( Markov , DMar-Intro-9 ) ;
9616: LD_EXP 22
9620: PPUSH
9621: LD_STRING DMar-Intro-9
9623: PPUSH
9624: CALL_OW 88
// Say ( Markov , DMar-Intro-10 ) ;
9628: LD_EXP 22
9632: PPUSH
9633: LD_STRING DMar-Intro-10
9635: PPUSH
9636: CALL_OW 88
// Say ( Markov , DMar-Intro-11 ) ;
9640: LD_EXP 22
9644: PPUSH
9645: LD_STRING DMar-Intro-11
9647: PPUSH
9648: CALL_OW 88
// Say ( Givi , DG-Intro-12 ) ;
9652: LD_EXP 16
9656: PPUSH
9657: LD_STRING DG-Intro-12
9659: PPUSH
9660: CALL_OW 88
// Say ( Givi , DG-Intro-13 ) ;
9664: LD_EXP 16
9668: PPUSH
9669: LD_STRING DG-Intro-13
9671: PPUSH
9672: CALL_OW 88
// Say ( Givi , DG-Intro-14 ) ;
9676: LD_EXP 16
9680: PPUSH
9681: LD_STRING DG-Intro-14
9683: PPUSH
9684: CALL_OW 88
// Say ( Givi , DG-Intro-15 ) ;
9688: LD_EXP 16
9692: PPUSH
9693: LD_STRING DG-Intro-15
9695: PPUSH
9696: CALL_OW 88
// Say ( Heike , DH-Intro-16 ) ;
9700: LD_EXP 15
9704: PPUSH
9705: LD_STRING DH-Intro-16
9707: PPUSH
9708: CALL_OW 88
// Say ( Markov , DMar-Intro-17 ) ;
9712: LD_EXP 22
9716: PPUSH
9717: LD_STRING DMar-Intro-17
9719: PPUSH
9720: CALL_OW 88
// end ; if Kurt and Mike then
9724: LD_EXP 25
9728: PUSH
9729: LD_EXP 17
9733: AND
9734: IFFALSE 10017
// begin CenterNowOnUnits ( Kurt ) ;
9736: LD_EXP 25
9740: PPUSH
9741: CALL_OW 87
// ComTurnUnit ( Kurt , Heike ) ;
9745: LD_EXP 25
9749: PPUSH
9750: LD_EXP 15
9754: PPUSH
9755: CALL_OW 119
// Say ( Kurt , DKs-Intro-18 ) ;
9759: LD_EXP 25
9763: PPUSH
9764: LD_STRING DKs-Intro-18
9766: PPUSH
9767: CALL_OW 88
// Say ( Kurt , DKs-Intro-19 ) ;
9771: LD_EXP 25
9775: PPUSH
9776: LD_STRING DKs-Intro-19
9778: PPUSH
9779: CALL_OW 88
// CenterNowOnUnits ( Mike ) ;
9783: LD_EXP 17
9787: PPUSH
9788: CALL_OW 87
// if IsInUnit ( Mike ) then
9792: LD_EXP 17
9796: PPUSH
9797: CALL_OW 310
9801: IFFALSE 9812
// ComExit ( Mike ) ;
9803: LD_EXP 17
9807: PPUSH
9808: CALL 54624 0 1
// AddComMoveXY ( Mike , 129 , 53 ) ;
9812: LD_EXP 17
9816: PPUSH
9817: LD_INT 129
9819: PPUSH
9820: LD_INT 53
9822: PPUSH
9823: CALL_OW 171
// AddComHold ( Mike ) ;
9827: LD_EXP 17
9831: PPUSH
9832: CALL_OW 200
// wait ( 0 0$2 ) ;
9836: LD_INT 70
9838: PPUSH
9839: CALL_OW 67
// Say ( Mike , DM-Intro-20 ) ;
9843: LD_EXP 17
9847: PPUSH
9848: LD_STRING DM-Intro-20
9850: PPUSH
9851: CALL_OW 88
// scoutActive := Query ( Scout ) ;
9855: LD_ADDR_EXP 3
9859: PUSH
9860: LD_STRING Scout
9862: PPUSH
9863: CALL_OW 97
9867: ST_TO_ADDR
// if scoutActive = 1 then
9868: LD_EXP 3
9872: PUSH
9873: LD_INT 1
9875: EQUAL
9876: IFFALSE 9973
// begin CenterNowOnUnits ( Kurt ) ;
9878: LD_EXP 25
9882: PPUSH
9883: CALL_OW 87
// Say ( Heike , DH-Intro-21 ) ;
9887: LD_EXP 15
9891: PPUSH
9892: LD_STRING DH-Intro-21
9894: PPUSH
9895: CALL_OW 88
// Say ( Mike , DM-Intro-22 ) ;
9899: LD_EXP 17
9903: PPUSH
9904: LD_STRING DM-Intro-22
9906: PPUSH
9907: CALL_OW 88
// Say ( Kurt , DKs-Intro-23 ) ;
9911: LD_EXP 25
9915: PPUSH
9916: LD_STRING DKs-Intro-23
9918: PPUSH
9919: CALL_OW 88
// SetSide ( Kurt , 5 ) ;
9923: LD_EXP 25
9927: PPUSH
9928: LD_INT 5
9930: PPUSH
9931: CALL_OW 235
// SetSide ( Mike , 5 ) ;
9935: LD_EXP 17
9939: PPUSH
9940: LD_INT 5
9942: PPUSH
9943: CALL_OW 235
// ComMoveXY ( [ Kurt , Mike ] , 104 , 66 ) ;
9947: LD_EXP 25
9951: PUSH
9952: LD_EXP 17
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PPUSH
9961: LD_INT 104
9963: PPUSH
9964: LD_INT 66
9966: PPUSH
9967: CALL_OW 111
// end else
9971: GO 10017
// begin scoutActive := 0 ;
9973: LD_ADDR_EXP 3
9977: PUSH
9978: LD_INT 0
9980: ST_TO_ADDR
// Say ( Heike , DH-Intro-a-21 ) ;
9981: LD_EXP 15
9985: PPUSH
9986: LD_STRING DH-Intro-a-21
9988: PPUSH
9989: CALL_OW 88
// Say ( Mike , DM-Intro-a-22 ) ;
9993: LD_EXP 17
9997: PPUSH
9998: LD_STRING DM-Intro-a-22
10000: PPUSH
10001: CALL_OW 88
// Say ( Kurt , DKs-Intro-a-23 ) ;
10005: LD_EXP 25
10009: PPUSH
10010: LD_STRING DKs-Intro-a-23
10012: PPUSH
10013: CALL_OW 88
// end ; end ; end ; Video ( false ) ;
10017: LD_INT 0
10019: PPUSH
10020: CALL 54198 0 1
// music_nat := music_auto ;
10024: LD_ADDR_OWVAR 71
10028: PUSH
10029: LD_INT 0
10031: ST_TO_ADDR
// music_class := music_auto ;
10032: LD_ADDR_OWVAR 72
10036: PUSH
10037: LD_INT 0
10039: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
10040: LD_STRING M1
10042: PPUSH
10043: CALL_OW 337
// wait ( 0 0$3 ) ;
10047: LD_INT 105
10049: PPUSH
10050: CALL_OW 67
// Say ( Heike , DH-Base-1 ) ;
10054: LD_EXP 15
10058: PPUSH
10059: LD_STRING DH-Base-1
10061: PPUSH
10062: CALL_OW 88
// if Kaia then
10066: LD_EXP 20
10070: IFFALSE 10180
// begin Say ( Kaia , DK-Base-2 ) ;
10072: LD_EXP 20
10076: PPUSH
10077: LD_STRING DK-Base-2
10079: PPUSH
10080: CALL_OW 88
// Say ( Heike , DH-Base-3 ) ;
10084: LD_EXP 15
10088: PPUSH
10089: LD_STRING DH-Base-3
10091: PPUSH
10092: CALL_OW 88
// if Aviradze then
10096: LD_EXP 26
10100: IFFALSE 10180
// begin Say ( Aviradze , DA-Base-4 ) ;
10102: LD_EXP 26
10106: PPUSH
10107: LD_STRING DA-Base-4
10109: PPUSH
10110: CALL_OW 88
// Say ( Kaia , DK-Base-5 ) ;
10114: LD_EXP 20
10118: PPUSH
10119: LD_STRING DK-Base-5
10121: PPUSH
10122: CALL_OW 88
// if Markov then
10126: LD_EXP 22
10130: IFFALSE 10180
// begin Say ( Markov , DMar-Base-6 ) ;
10132: LD_EXP 22
10136: PPUSH
10137: LD_STRING DMar-Base-6
10139: PPUSH
10140: CALL_OW 88
// Say ( Kaia , DK-Base-7 ) ;
10144: LD_EXP 20
10148: PPUSH
10149: LD_STRING DK-Base-7
10151: PPUSH
10152: CALL_OW 88
// Say ( Markov , DMar-Base-8 ) ;
10156: LD_EXP 22
10160: PPUSH
10161: LD_STRING DMar-Base-8
10163: PPUSH
10164: CALL_OW 88
// Say ( Markov , DMar-Base-9 ) ;
10168: LD_EXP 22
10172: PPUSH
10173: LD_STRING DMar-Base-9
10175: PPUSH
10176: CALL_OW 88
// end ; end ; end ; SaveForQuickRestart ;
10180: CALL_OW 22
// end ;
10184: LD_VAR 0 1
10188: RET
// every 0 0$1 trigger scoutSuccess do var i , tmp ;
10189: LD_EXP 5
10193: IFFALSE 11304
10195: GO 10197
10197: DISABLE
10198: LD_INT 0
10200: PPUSH
10201: PPUSH
// begin InGameOn ;
10202: CALL_OW 8
// ComTurnUnit ( [ Mike , Kurt ] , Heike ) ;
10206: LD_EXP 17
10210: PUSH
10211: LD_EXP 25
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: PPUSH
10220: LD_EXP 15
10224: PPUSH
10225: CALL_OW 119
// ComExit ( Heike ) ;
10229: LD_EXP 15
10233: PPUSH
10234: CALL 54624 0 1
// if IsOk ( Mike ) then
10238: LD_EXP 17
10242: PPUSH
10243: CALL_OW 302
10247: IFFALSE 10265
// AddComTurnUnit ( Heike , Mike ) else
10249: LD_EXP 15
10253: PPUSH
10254: LD_EXP 17
10258: PPUSH
10259: CALL_OW 179
10263: GO 10279
// AddComTurnUnit ( Heike , Kurt ) ;
10265: LD_EXP 15
10269: PPUSH
10270: LD_EXP 25
10274: PPUSH
10275: CALL_OW 179
// if IsOk ( Mike ) and IsOk ( Kurt ) then
10279: LD_EXP 17
10283: PPUSH
10284: CALL_OW 302
10288: PUSH
10289: LD_EXP 25
10293: PPUSH
10294: CALL_OW 302
10298: AND
10299: IFFALSE 10550
// begin CenterNowOnUnits ( Mike ) ;
10301: LD_EXP 17
10305: PPUSH
10306: CALL_OW 87
// Say ( Mike , DM-Scout-1 ) ;
10310: LD_EXP 17
10314: PPUSH
10315: LD_STRING DM-Scout-1
10317: PPUSH
10318: CALL_OW 88
// Say ( Heike , DH-Scout-2 ) ;
10322: LD_EXP 15
10326: PPUSH
10327: LD_STRING DH-Scout-2
10329: PPUSH
10330: CALL_OW 88
// Say ( Kurt , DKs-Scout-3 ) ;
10334: LD_EXP 25
10338: PPUSH
10339: LD_STRING DKs-Scout-3
10341: PPUSH
10342: CALL_OW 88
// Say ( Heike , DH-Scout-4 ) ;
10346: LD_EXP 15
10350: PPUSH
10351: LD_STRING DH-Scout-4
10353: PPUSH
10354: CALL_OW 88
// Say ( Heike , DH-Scout-5 ) ;
10358: LD_EXP 15
10362: PPUSH
10363: LD_STRING DH-Scout-5
10365: PPUSH
10366: CALL_OW 88
// tmp := [ [ 72 , 122 ] , [ 89 , 131 ] , [ 99 , 139 ] , [ 100 , 148 ] ] ;
10370: LD_ADDR_VAR 0 2
10374: PUSH
10375: LD_INT 72
10377: PUSH
10378: LD_INT 122
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: PUSH
10385: LD_INT 89
10387: PUSH
10388: LD_INT 131
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: PUSH
10395: LD_INT 99
10397: PUSH
10398: LD_INT 139
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: PUSH
10405: LD_INT 100
10407: PUSH
10408: LD_INT 148
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: ST_TO_ADDR
// for i in tmp do
10421: LD_ADDR_VAR 0 1
10425: PUSH
10426: LD_VAR 0 2
10430: PUSH
10431: FOR_IN
10432: IFFALSE 10490
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 2 , - 6 ) ;
10434: LD_VAR 0 1
10438: PUSH
10439: LD_INT 1
10441: ARRAY
10442: PPUSH
10443: LD_VAR 0 1
10447: PUSH
10448: LD_INT 2
10450: ARRAY
10451: PPUSH
10452: LD_INT 2
10454: PPUSH
10455: LD_INT 6
10457: NEG
10458: PPUSH
10459: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 2 ) ;
10463: LD_VAR 0 1
10467: PUSH
10468: LD_INT 1
10470: ARRAY
10471: PPUSH
10472: LD_VAR 0 1
10476: PUSH
10477: LD_INT 2
10479: ARRAY
10480: PPUSH
10481: LD_INT 2
10483: PPUSH
10484: CALL_OW 331
// end ;
10488: GO 10431
10490: POP
10491: POP
// CenterOnXY ( 83 , 132 ) ;
10492: LD_INT 83
10494: PPUSH
10495: LD_INT 132
10497: PPUSH
10498: CALL_OW 84
// Say ( Kurt , DKs-Scout-6 ) ;
10502: LD_EXP 25
10506: PPUSH
10507: LD_STRING DKs-Scout-6
10509: PPUSH
10510: CALL_OW 88
// Say ( Mike , DM-Scout-7 ) ;
10514: LD_EXP 17
10518: PPUSH
10519: LD_STRING DM-Scout-7
10521: PPUSH
10522: CALL_OW 88
// Say ( Mike , DM-Scout-8 ) ;
10526: LD_EXP 17
10530: PPUSH
10531: LD_STRING DM-Scout-8
10533: PPUSH
10534: CALL_OW 88
// Say ( Kurt , DKs-Scout-9 ) ;
10538: LD_EXP 25
10542: PPUSH
10543: LD_STRING DKs-Scout-9
10545: PPUSH
10546: CALL_OW 88
// end ; if IsDead ( Mike ) then
10550: LD_EXP 17
10554: PPUSH
10555: CALL_OW 301
10559: IFFALSE 10726
// begin CenterNowOnUnits ( Kurt ) ;
10561: LD_EXP 25
10565: PPUSH
10566: CALL_OW 87
// Say ( Kurt , DKs-Scout-b-1 ) ;
10570: LD_EXP 25
10574: PPUSH
10575: LD_STRING DKs-Scout-b-1
10577: PPUSH
10578: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-2 ) ;
10582: LD_EXP 25
10586: PPUSH
10587: LD_STRING DKs-Scout-b-2
10589: PPUSH
10590: CALL_OW 88
// if IsOk ( Givi ) then
10594: LD_EXP 16
10598: PPUSH
10599: CALL_OW 302
10603: IFFALSE 10678
// begin ComExit ( Givi ) ;
10605: LD_EXP 16
10609: PPUSH
10610: CALL 54624 0 1
// AddComTurnUnit ( Givi , Kurt ) ;
10614: LD_EXP 16
10618: PPUSH
10619: LD_EXP 25
10623: PPUSH
10624: CALL_OW 179
// Say ( Givi , DG-Scout-b-3 ) ;
10628: LD_EXP 16
10632: PPUSH
10633: LD_STRING DG-Scout-b-3
10635: PPUSH
10636: CALL_OW 88
// Say ( Givi , DG-Scout-b-4 ) ;
10640: LD_EXP 16
10644: PPUSH
10645: LD_STRING DG-Scout-b-4
10647: PPUSH
10648: CALL_OW 88
// Say ( Givi , DG-Scout-b-5 ) ;
10652: LD_EXP 16
10656: PPUSH
10657: LD_STRING DG-Scout-b-5
10659: PPUSH
10660: CALL_OW 88
// Say ( Heike , DH-Scout-b-6 ) ;
10664: LD_EXP 15
10668: PPUSH
10669: LD_STRING DH-Scout-b-6
10671: PPUSH
10672: CALL_OW 88
// end else
10676: GO 10690
// Say ( Heike , DH-Scout-a-4 ) ;
10678: LD_EXP 15
10682: PPUSH
10683: LD_STRING DH-Scout-a-4
10685: PPUSH
10686: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-7 ) ;
10690: LD_EXP 25
10694: PPUSH
10695: LD_STRING DKs-Scout-b-7
10697: PPUSH
10698: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-8 ) ;
10702: LD_EXP 25
10706: PPUSH
10707: LD_STRING DKs-Scout-b-8
10709: PPUSH
10710: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-9 ) ;
10714: LD_EXP 25
10718: PPUSH
10719: LD_STRING DKs-Scout-b-9
10721: PPUSH
10722: CALL_OW 88
// end ; if IsDead ( Kurt ) then
10726: LD_EXP 25
10730: PPUSH
10731: CALL_OW 301
10735: IFFALSE 11014
// begin CenterNowOnUnits ( Mike ) ;
10737: LD_EXP 17
10741: PPUSH
10742: CALL_OW 87
// Say ( Mike , DM-Scout-a-1 ) ;
10746: LD_EXP 17
10750: PPUSH
10751: LD_STRING DM-Scout-a-1
10753: PPUSH
10754: CALL_OW 88
// Say ( Mike , DM-Scout-a-2 ) ;
10758: LD_EXP 17
10762: PPUSH
10763: LD_STRING DM-Scout-a-2
10765: PPUSH
10766: CALL_OW 88
// if GetLives ( Mike ) < 1000 then
10770: LD_EXP 17
10774: PPUSH
10775: CALL_OW 256
10779: PUSH
10780: LD_INT 1000
10782: LESS
10783: IFFALSE 10799
// Say ( Heike , DH-Scout-a-3 ) else
10785: LD_EXP 15
10789: PPUSH
10790: LD_STRING DH-Scout-a-3
10792: PPUSH
10793: CALL_OW 88
10797: GO 10811
// Say ( Heike , DH-Scout-a-4 ) ;
10799: LD_EXP 15
10803: PPUSH
10804: LD_STRING DH-Scout-a-4
10806: PPUSH
10807: CALL_OW 88
// Say ( Mike , DM-Scout-a-5 ) ;
10811: LD_EXP 17
10815: PPUSH
10816: LD_STRING DM-Scout-a-5
10818: PPUSH
10819: CALL_OW 88
// if IsOk ( Kaia ) then
10823: LD_EXP 20
10827: PPUSH
10828: CALL_OW 302
10832: IFFALSE 11014
// begin ComExit ( Kaia ) ;
10834: LD_EXP 20
10838: PPUSH
10839: CALL 54624 0 1
// AddComMoveUnit ( Kaia , Mike ) ;
10843: LD_EXP 20
10847: PPUSH
10848: LD_EXP 17
10852: PPUSH
10853: CALL_OW 172
// wait ( 0 0$2 ) ;
10857: LD_INT 70
10859: PPUSH
10860: CALL_OW 67
// ComTurnUnit ( Kaia , Mike ) ;
10864: LD_EXP 20
10868: PPUSH
10869: LD_EXP 17
10873: PPUSH
10874: CALL_OW 119
// ComTurnUnit ( Mike , Kaia ) ;
10878: LD_EXP 17
10882: PPUSH
10883: LD_EXP 20
10887: PPUSH
10888: CALL_OW 119
// Say ( Kaia , DK-Scout-a-6 ) ;
10892: LD_EXP 20
10896: PPUSH
10897: LD_STRING DK-Scout-a-6
10899: PPUSH
10900: CALL_OW 88
// Say ( Mike , DM-Scout-a-7 ) ;
10904: LD_EXP 17
10908: PPUSH
10909: LD_STRING DM-Scout-a-7
10911: PPUSH
10912: CALL_OW 88
// Say ( Kaia , DK-Scout-a-8 ) ;
10916: LD_EXP 20
10920: PPUSH
10921: LD_STRING DK-Scout-a-8
10923: PPUSH
10924: CALL_OW 88
// Say ( Kaia , DK-Scout-a-9 ) ;
10928: LD_EXP 20
10932: PPUSH
10933: LD_STRING DK-Scout-a-9
10935: PPUSH
10936: CALL_OW 88
// Say ( Heike , DH-Scout-a-10 ) ;
10940: LD_EXP 15
10944: PPUSH
10945: LD_STRING DH-Scout-a-10
10947: PPUSH
10948: CALL_OW 88
// ComTurnUnit ( Mike , Heike ) ;
10952: LD_EXP 17
10956: PPUSH
10957: LD_EXP 15
10961: PPUSH
10962: CALL_OW 119
// Say ( Mike , DM-Scout-a-11 ) ;
10966: LD_EXP 17
10970: PPUSH
10971: LD_STRING DM-Scout-a-11
10973: PPUSH
10974: CALL_OW 88
// Say ( Mike , DM-Scout-a-12 ) ;
10978: LD_EXP 17
10982: PPUSH
10983: LD_STRING DM-Scout-a-12
10985: PPUSH
10986: CALL_OW 88
// Say ( Mike , DM-Scout-a-13 ) ;
10990: LD_EXP 17
10994: PPUSH
10995: LD_STRING DM-Scout-a-13
10997: PPUSH
10998: CALL_OW 88
// Say ( Mike , DM-Scout-a-14 ) ;
11002: LD_EXP 17
11006: PPUSH
11007: LD_STRING DM-Scout-a-14
11009: PPUSH
11010: CALL_OW 88
// end ; end ; if IsOk ( Givi ) then
11014: LD_EXP 16
11018: PPUSH
11019: CALL_OW 302
11023: IFFALSE 11051
// begin Say ( Givi , DG-Scout-10 ) ;
11025: LD_EXP 16
11029: PPUSH
11030: LD_STRING DG-Scout-10
11032: PPUSH
11033: CALL_OW 88
// Say ( Givi , DG-Scout-11 ) ;
11037: LD_EXP 16
11041: PPUSH
11042: LD_STRING DG-Scout-11
11044: PPUSH
11045: CALL_OW 88
// end else
11049: GO 11108
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-10 ) then
11051: LD_EXP 27
11055: PPUSH
11056: LD_INT 26
11058: PUSH
11059: LD_INT 1
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: PPUSH
11066: CALL_OW 72
11070: PPUSH
11071: LD_STRING DArm-Scout-10
11073: PPUSH
11074: CALL 224 0 2
11078: NOT
11079: IFFALSE 11108
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-10 ) ;
11081: LD_EXP 27
11085: PPUSH
11086: LD_INT 26
11088: PUSH
11089: LD_INT 2
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: PPUSH
11096: CALL_OW 72
11100: PPUSH
11101: LD_STRING DArf-Scout-10
11103: PPUSH
11104: CALL 224 0 2
// Say ( Heike , DH-Scout-12 ) ;
11108: LD_EXP 15
11112: PPUSH
11113: LD_STRING DH-Scout-12
11115: PPUSH
11116: CALL_OW 88
// Say ( Heike , DH-Scout-13 ) ;
11120: LD_EXP 15
11124: PPUSH
11125: LD_STRING DH-Scout-13
11127: PPUSH
11128: CALL_OW 88
// if IsOk ( Mike ) and IsOk ( Kurt ) then
11132: LD_EXP 17
11136: PPUSH
11137: CALL_OW 302
11141: PUSH
11142: LD_EXP 25
11146: PPUSH
11147: CALL_OW 302
11151: AND
11152: IFFALSE 11180
// begin Say ( Mike , DM-Scout-14 ) ;
11154: LD_EXP 17
11158: PPUSH
11159: LD_STRING DM-Scout-14
11161: PPUSH
11162: CALL_OW 88
// Say ( Heike , DH-Scout-c-14 ) ;
11166: LD_EXP 15
11170: PPUSH
11171: LD_STRING DH-Scout-c-14
11173: PPUSH
11174: CALL_OW 88
// end else
11178: GO 11273
// if IsOk ( Mike ) xor IsOk ( Kurt ) then
11180: LD_EXP 17
11184: PPUSH
11185: CALL_OW 302
11189: PUSH
11190: LD_EXP 25
11194: PPUSH
11195: CALL_OW 302
11199: XOR
11200: IFFALSE 11261
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-a-14 ) then
11202: LD_EXP 27
11206: PPUSH
11207: LD_INT 26
11209: PUSH
11210: LD_INT 1
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: PPUSH
11217: CALL_OW 72
11221: PPUSH
11222: LD_STRING DArm-Scout-a-14
11224: PPUSH
11225: CALL 224 0 2
11229: NOT
11230: IFFALSE 11259
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-a-14 ) ;
11232: LD_EXP 27
11236: PPUSH
11237: LD_INT 26
11239: PUSH
11240: LD_INT 2
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PPUSH
11247: CALL_OW 72
11251: PPUSH
11252: LD_STRING DArf-Scout-a-14
11254: PPUSH
11255: CALL 224 0 2
// end else
11259: GO 11273
// Say ( Heike , DH-Scout-d-14 ) ;
11261: LD_EXP 15
11265: PPUSH
11266: LD_STRING DH-Scout-d-14
11268: PPUSH
11269: CALL_OW 88
// Say ( Heike , DH-Scout-15 ) ;
11273: LD_EXP 15
11277: PPUSH
11278: LD_STRING DH-Scout-15
11280: PPUSH
11281: CALL_OW 88
// InGameOff ;
11285: CALL_OW 9
// wait ( 1 1$00 ) ;
11289: LD_INT 2100
11291: PPUSH
11292: CALL_OW 67
// usAttacksAllowed := true ;
11296: LD_ADDR_EXP 6
11300: PUSH
11301: LD_INT 1
11303: ST_TO_ADDR
// end ;
11304: PPOPN 2
11306: END
// every 0 0$1 trigger scoutFailed do var spoken ;
11307: LD_EXP 4
11311: IFFALSE 11488
11313: GO 11315
11315: DISABLE
11316: LD_INT 0
11318: PPUSH
// begin spoken := true ;
11319: LD_ADDR_VAR 0 1
11323: PUSH
11324: LD_INT 1
11326: ST_TO_ADDR
// wait ( 0 0$30 ) ;
11327: LD_INT 1050
11329: PPUSH
11330: CALL_OW 67
// Say ( Heike , DH-Scout-c-1 ) ;
11334: LD_EXP 15
11338: PPUSH
11339: LD_STRING DH-Scout-c-1
11341: PPUSH
11342: CALL_OW 88
// if not IsOk ( Givi ) then
11346: LD_EXP 16
11350: PPUSH
11351: CALL_OW 302
11355: NOT
11356: IFFALSE 11360
// exit ;
11358: GO 11488
// if IsOk ( Givi ) then
11360: LD_EXP 16
11364: PPUSH
11365: CALL_OW 302
11369: IFFALSE 11397
// begin Say ( Givi , DG-Scout-c-2 ) ;
11371: LD_EXP 16
11375: PPUSH
11376: LD_STRING DG-Scout-c-2
11378: PPUSH
11379: CALL_OW 88
// Say ( Givi , DG-Scout-c-3 ) ;
11383: LD_EXP 16
11387: PPUSH
11388: LD_STRING DG-Scout-c-3
11390: PPUSH
11391: CALL_OW 88
// end else
11395: GO 11470
// begin spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-c-3 ) ;
11397: LD_ADDR_VAR 0 1
11401: PUSH
11402: LD_EXP 27
11406: PPUSH
11407: LD_INT 26
11409: PUSH
11410: LD_INT 1
11412: PUSH
11413: EMPTY
11414: LIST
11415: LIST
11416: PPUSH
11417: CALL_OW 72
11421: PPUSH
11422: LD_STRING DArm-Scout-c-3
11424: PPUSH
11425: CALL 224 0 2
11429: ST_TO_ADDR
// if not spoken then
11430: LD_VAR 0 1
11434: NOT
11435: IFFALSE 11470
// spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-c-3 ) ;
11437: LD_ADDR_VAR 0 1
11441: PUSH
11442: LD_EXP 27
11446: PPUSH
11447: LD_INT 26
11449: PUSH
11450: LD_INT 2
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: PPUSH
11457: CALL_OW 72
11461: PPUSH
11462: LD_STRING DArf-Scout-c-3
11464: PPUSH
11465: CALL 224 0 2
11469: ST_TO_ADDR
// ; end ; if spoken then
11470: LD_VAR 0 1
11474: IFFALSE 11488
// Say ( Heike , DH-Scout-c-4 ) ;
11476: LD_EXP 15
11480: PPUSH
11481: LD_STRING DH-Scout-c-4
11483: PPUSH
11484: CALL_OW 88
// end ;
11488: PPOPN 1
11490: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_half ] ] ) and IsOk ( Aviradze ) do
11491: LD_INT 22
11493: PUSH
11494: LD_INT 2
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: PUSH
11501: LD_INT 30
11503: PUSH
11504: LD_INT 7
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PPUSH
11515: CALL_OW 69
11519: PUSH
11520: LD_EXP 26
11524: PPUSH
11525: CALL_OW 302
11529: AND
11530: IFFALSE 11615
11532: GO 11534
11534: DISABLE
// begin DialogueOn ;
11535: CALL_OW 6
// Say ( Aviradze , DA-Lab-1 ) ;
11539: LD_EXP 26
11543: PPUSH
11544: LD_STRING DA-Lab-1
11546: PPUSH
11547: CALL_OW 88
// Say ( Heike , DH-Lab-2 ) ;
11551: LD_EXP 15
11555: PPUSH
11556: LD_STRING DH-Lab-2
11558: PPUSH
11559: CALL_OW 88
// Say ( Aviradze , DA-Lab-3 ) ;
11563: LD_EXP 26
11567: PPUSH
11568: LD_STRING DA-Lab-3
11570: PPUSH
11571: CALL_OW 88
// Say ( Aviradze , DA-Lab-4 ) ;
11575: LD_EXP 26
11579: PPUSH
11580: LD_STRING DA-Lab-4
11582: PPUSH
11583: CALL_OW 88
// Say ( Aviradze , DA-Lab-5 ) ;
11587: LD_EXP 26
11591: PPUSH
11592: LD_STRING DA-Lab-5
11594: PPUSH
11595: CALL_OW 88
// Say ( Heike , DH-Lab-6 ) ;
11599: LD_EXP 15
11603: PPUSH
11604: LD_STRING DH-Lab-6
11606: PPUSH
11607: CALL_OW 88
// DialogueOff ;
11611: CALL_OW 7
// end ;
11615: END
// every 0 0$1 trigger GetTech ( tech_MatDet , 2 ) = state_researched and IsOk ( Givi ) do
11616: LD_INT 7
11618: PPUSH
11619: LD_INT 2
11621: PPUSH
11622: CALL_OW 321
11626: PUSH
11627: LD_INT 2
11629: EQUAL
11630: PUSH
11631: LD_EXP 16
11635: PPUSH
11636: CALL_OW 302
11640: AND
11641: IFFALSE 11810
11643: GO 11645
11645: DISABLE
// begin DialogueOn ;
11646: CALL_OW 6
// Say ( Givi , DG-Opt-1 ) ;
11650: LD_EXP 16
11654: PPUSH
11655: LD_STRING DG-Opt-1
11657: PPUSH
11658: CALL_OW 88
// Say ( Heike , DH-Opt-2 ) ;
11662: LD_EXP 15
11666: PPUSH
11667: LD_STRING DH-Opt-2
11669: PPUSH
11670: CALL_OW 88
// Say ( Givi , DG-Opt-3 ) ;
11674: LD_EXP 16
11678: PPUSH
11679: LD_STRING DG-Opt-3
11681: PPUSH
11682: CALL_OW 88
// Say ( Givi , DG-Opt-4 ) ;
11686: LD_EXP 16
11690: PPUSH
11691: LD_STRING DG-Opt-4
11693: PPUSH
11694: CALL_OW 88
// Say ( Heike , DH-Opt-5 ) ;
11698: LD_EXP 15
11702: PPUSH
11703: LD_STRING DH-Opt-5
11705: PPUSH
11706: CALL_OW 88
// Say ( Givi , DG-Opt-6 ) ;
11710: LD_EXP 16
11714: PPUSH
11715: LD_STRING DG-Opt-6
11717: PPUSH
11718: CALL_OW 88
// Say ( Heike , DH-Opt-7 ) ;
11722: LD_EXP 15
11726: PPUSH
11727: LD_STRING DH-Opt-7
11729: PPUSH
11730: CALL_OW 88
// Say ( Givi , DG-Opt-8 ) ;
11734: LD_EXP 16
11738: PPUSH
11739: LD_STRING DG-Opt-8
11741: PPUSH
11742: CALL_OW 88
// Say ( Givi , DG-Opt-9 ) ;
11746: LD_EXP 16
11750: PPUSH
11751: LD_STRING DG-Opt-9
11753: PPUSH
11754: CALL_OW 88
// Say ( Heike , DH-Opt-10 ) ;
11758: LD_EXP 15
11762: PPUSH
11763: LD_STRING DH-Opt-10
11765: PPUSH
11766: CALL_OW 88
// Say ( Givi , DG-Opt-11 ) ;
11770: LD_EXP 16
11774: PPUSH
11775: LD_STRING DG-Opt-11
11777: PPUSH
11778: CALL_OW 88
// Say ( Givi , DG-Opt-12 ) ;
11782: LD_EXP 16
11786: PPUSH
11787: LD_STRING DG-Opt-12
11789: PPUSH
11790: CALL_OW 88
// Say ( Heike , DH-Opt-13 ) ;
11794: LD_EXP 15
11798: PPUSH
11799: LD_STRING DH-Opt-13
11801: PPUSH
11802: CALL_OW 88
// DialogueOff ;
11806: CALL_OW 7
// end ;
11810: END
// every 0 0$2 trigger UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) do
11811: LD_EXP 27
11815: PPUSH
11816: LD_INT 95
11818: PUSH
11819: LD_INT 7
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: PUSH
11826: LD_INT 23
11828: PUSH
11829: LD_INT 2
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PUSH
11836: LD_INT 26
11838: PUSH
11839: LD_INT 1
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: LIST
11850: PPUSH
11851: CALL_OW 72
11855: IFFALSE 11916
11857: GO 11859
11859: DISABLE
// begin Say ( UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-River ) ;
11860: LD_EXP 27
11864: PPUSH
11865: LD_INT 95
11867: PUSH
11868: LD_INT 7
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: PUSH
11875: LD_INT 23
11877: PUSH
11878: LD_INT 2
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PUSH
11885: LD_INT 26
11887: PUSH
11888: LD_INT 1
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: PPUSH
11900: CALL_OW 72
11904: PUSH
11905: LD_INT 1
11907: ARRAY
11908: PPUSH
11909: LD_STRING DArm-River
11911: PPUSH
11912: CALL_OW 88
// end ;
11916: END
// every 0 0$1 trigger GetTech ( tech_rocket , 2 ) = state_researched and IsOk ( Ibrahim ) do
11917: LD_INT 40
11919: PPUSH
11920: LD_INT 2
11922: PPUSH
11923: CALL_OW 321
11927: PUSH
11928: LD_INT 2
11930: EQUAL
11931: PUSH
11932: LD_EXP 18
11936: PPUSH
11937: CALL_OW 302
11941: AND
11942: IFFALSE 12192
11944: GO 11946
11946: DISABLE
// begin DialogueOn ;
11947: CALL_OW 6
// Say ( Ibrahim , DI-Roc-1 ) ;
11951: LD_EXP 18
11955: PPUSH
11956: LD_STRING DI-Roc-1
11958: PPUSH
11959: CALL_OW 88
// Say ( Heike , DH-Roc-2 ) ;
11963: LD_EXP 15
11967: PPUSH
11968: LD_STRING DH-Roc-2
11970: PPUSH
11971: CALL_OW 88
// Say ( Ibrahim , DI-Roc-3 ) ;
11975: LD_EXP 18
11979: PPUSH
11980: LD_STRING DI-Roc-3
11982: PPUSH
11983: CALL_OW 88
// Say ( Ibrahim , DI-Roc-4 ) ;
11987: LD_EXP 18
11991: PPUSH
11992: LD_STRING DI-Roc-4
11994: PPUSH
11995: CALL_OW 88
// Say ( Kaia , DK-Roc-5 ) ;
11999: LD_EXP 20
12003: PPUSH
12004: LD_STRING DK-Roc-5
12006: PPUSH
12007: CALL_OW 88
// Say ( Kaia , DK-Roc-6 ) ;
12011: LD_EXP 20
12015: PPUSH
12016: LD_STRING DK-Roc-6
12018: PPUSH
12019: CALL_OW 88
// Say ( Givi , DG-Roc-7 ) ;
12023: LD_EXP 16
12027: PPUSH
12028: LD_STRING DG-Roc-7
12030: PPUSH
12031: CALL_OW 88
// Say ( Givi , DG-Roc-8 ) ;
12035: LD_EXP 16
12039: PPUSH
12040: LD_STRING DG-Roc-8
12042: PPUSH
12043: CALL_OW 88
// if IsOk ( Markov ) and IsOk ( Kaia ) and IsOk ( Givi ) then
12047: LD_EXP 22
12051: PPUSH
12052: CALL_OW 302
12056: PUSH
12057: LD_EXP 20
12061: PPUSH
12062: CALL_OW 302
12066: AND
12067: PUSH
12068: LD_EXP 16
12072: PPUSH
12073: CALL_OW 302
12077: AND
12078: IFFALSE 12188
// begin Say ( Markov , DMar-Roc-9 ) ;
12080: LD_EXP 22
12084: PPUSH
12085: LD_STRING DMar-Roc-9
12087: PPUSH
12088: CALL_OW 88
// Say ( Markov , DMar-Roc-10 ) ;
12092: LD_EXP 22
12096: PPUSH
12097: LD_STRING DMar-Roc-10
12099: PPUSH
12100: CALL_OW 88
// Say ( Kaia , DK-Roc-11 ) ;
12104: LD_EXP 20
12108: PPUSH
12109: LD_STRING DK-Roc-11
12111: PPUSH
12112: CALL_OW 88
// Say ( Markov , DMar-Roc-12 ) ;
12116: LD_EXP 22
12120: PPUSH
12121: LD_STRING DMar-Roc-12
12123: PPUSH
12124: CALL_OW 88
// Say ( Kaia , DK-Roc-13 ) ;
12128: LD_EXP 20
12132: PPUSH
12133: LD_STRING DK-Roc-13
12135: PPUSH
12136: CALL_OW 88
// Say ( Givi , DG-Roc-14 ) ;
12140: LD_EXP 16
12144: PPUSH
12145: LD_STRING DG-Roc-14
12147: PPUSH
12148: CALL_OW 88
// Say ( Markov , DMar-Roc-15 ) ;
12152: LD_EXP 22
12156: PPUSH
12157: LD_STRING DMar-Roc-15
12159: PPUSH
12160: CALL_OW 88
// Say ( Markov , DMar-Roc-16 ) ;
12164: LD_EXP 22
12168: PPUSH
12169: LD_STRING DMar-Roc-16
12171: PPUSH
12172: CALL_OW 88
// Say ( Kaia , DK-Roc-17 ) ;
12176: LD_EXP 20
12180: PPUSH
12181: LD_STRING DK-Roc-17
12183: PPUSH
12184: CALL_OW 88
// end ; DialogueOff ;
12188: CALL_OW 7
// end ;
12192: END
// every 0 0$3 trigger GetLives ( usCommander ) < 1000 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] ] ) < 6 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) < 2 do var i , hurts , sci ;
12193: LD_EXP 30
12197: PPUSH
12198: CALL_OW 256
12202: PUSH
12203: LD_INT 1000
12205: LESS
12206: PUSH
12207: LD_INT 22
12209: PUSH
12210: LD_INT 1
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: PUSH
12217: LD_INT 21
12219: PUSH
12220: LD_INT 1
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: PUSH
12227: LD_INT 23
12229: PUSH
12230: LD_INT 1
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: LIST
12241: PPUSH
12242: CALL_OW 69
12246: PUSH
12247: LD_INT 6
12249: LESS
12250: OR
12251: PUSH
12252: LD_INT 22
12254: PUSH
12255: LD_INT 1
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PUSH
12262: LD_INT 21
12264: PUSH
12265: LD_INT 1
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PUSH
12272: LD_INT 25
12274: PUSH
12275: LD_INT 1
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: LIST
12286: PPUSH
12287: CALL_OW 69
12291: PUSH
12292: LD_INT 2
12294: LESS
12295: OR
12296: IFFALSE 13572
12298: GO 12300
12300: DISABLE
12301: LD_INT 0
12303: PPUSH
12304: PPUSH
12305: PPUSH
// begin usAttacksAllowed := false ;
12306: LD_ADDR_EXP 6
12310: PUSH
12311: LD_INT 0
12313: ST_TO_ADDR
// usSurrender := true ;
12314: LD_ADDR_EXP 7
12318: PUSH
12319: LD_INT 1
12321: ST_TO_ADDR
// SetAttitude ( 1 , 2 , att_friend , true ) ;
12322: LD_INT 1
12324: PPUSH
12325: LD_INT 2
12327: PPUSH
12328: LD_INT 1
12330: PPUSH
12331: LD_INT 1
12333: PPUSH
12334: CALL_OW 80
// if IsDead ( usCommander ) then
12338: LD_EXP 30
12342: PPUSH
12343: CALL_OW 301
12347: IFFALSE 12351
// exit ;
12349: GO 13572
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_hastask ] ] ) do
12351: LD_ADDR_VAR 0 1
12355: PUSH
12356: LD_INT 22
12358: PUSH
12359: LD_INT 2
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: PUSH
12366: LD_INT 21
12368: PUSH
12369: LD_INT 1
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: PUSH
12376: LD_INT 60
12378: PUSH
12379: EMPTY
12380: LIST
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: LIST
12386: PPUSH
12387: CALL_OW 69
12391: PUSH
12392: FOR_IN
12393: IFFALSE 12406
// ComStop ( i ) ;
12395: LD_VAR 0 1
12399: PPUSH
12400: CALL_OW 141
12404: GO 12392
12406: POP
12407: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_ok ] ] , [ f_type , unit_human ] ] ) do
12408: LD_ADDR_VAR 0 1
12412: PUSH
12413: LD_INT 22
12415: PUSH
12416: LD_INT 2
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PUSH
12423: LD_INT 3
12425: PUSH
12426: LD_INT 50
12428: PUSH
12429: EMPTY
12430: LIST
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: PUSH
12436: LD_INT 21
12438: PUSH
12439: LD_INT 1
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: LIST
12450: PPUSH
12451: CALL_OW 69
12455: PUSH
12456: FOR_IN
12457: IFFALSE 12473
// SetLives ( i , 251 ) ;
12459: LD_VAR 0 1
12463: PPUSH
12464: LD_INT 251
12466: PPUSH
12467: CALL_OW 234
12471: GO 12456
12473: POP
12474: POP
// Video ( true ) ;
12475: LD_INT 1
12477: PPUSH
12478: CALL 54198 0 1
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
12482: LD_ADDR_VAR 0 1
12486: PUSH
12487: LD_INT 22
12489: PUSH
12490: LD_INT 2
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: PPUSH
12497: CALL_OW 69
12501: PUSH
12502: FOR_IN
12503: IFFALSE 12516
// ComStop ( i ) ;
12505: LD_VAR 0 1
12509: PPUSH
12510: CALL_OW 141
12514: GO 12502
12516: POP
12517: POP
// if not IsOk ( usCommander ) then
12518: LD_EXP 30
12522: PPUSH
12523: CALL_OW 302
12527: NOT
12528: IFFALSE 12542
// SetLives ( usCommander , 1000 ) ;
12530: LD_EXP 30
12534: PPUSH
12535: LD_INT 1000
12537: PPUSH
12538: CALL_OW 234
// InGameOn ;
12542: CALL_OW 8
// ComExit ( usCommander ) ;
12546: LD_EXP 30
12550: PPUSH
12551: CALL 54624 0 1
// AddComMoveXY ( usCommander , 81 , 143 ) ;
12555: LD_EXP 30
12559: PPUSH
12560: LD_INT 81
12562: PPUSH
12563: LD_INT 143
12565: PPUSH
12566: CALL_OW 171
// AddComTurnXY ( usCommander , 81 , 139 ) ;
12570: LD_EXP 30
12574: PPUSH
12575: LD_INT 81
12577: PPUSH
12578: LD_INT 139
12580: PPUSH
12581: CALL_OW 178
// PlaceSeeing ( 81 , 144 , 2 , - 10 ) ;
12585: LD_INT 81
12587: PPUSH
12588: LD_INT 144
12590: PPUSH
12591: LD_INT 2
12593: PPUSH
12594: LD_INT 10
12596: NEG
12597: PPUSH
12598: CALL_OW 330
// CenterNowOnUnits ( usCommander ) ;
12602: LD_EXP 30
12606: PPUSH
12607: CALL_OW 87
// wait ( 0 0$2 ) ;
12611: LD_INT 70
12613: PPUSH
12614: CALL_OW 67
// Say ( usCommander , DCa-Surrender-1 ) ;
12618: LD_EXP 30
12622: PPUSH
12623: LD_STRING DCa-Surrender-1
12625: PPUSH
12626: CALL_OW 88
// Say ( Heike , DH-Surrender-2 ) ;
12630: LD_EXP 15
12634: PPUSH
12635: LD_STRING DH-Surrender-2
12637: PPUSH
12638: CALL_OW 88
// if GetType ( IsInUnit ( Heike ) ) = unit_building then
12642: LD_EXP 15
12646: PPUSH
12647: CALL_OW 310
12651: PPUSH
12652: CALL_OW 247
12656: PUSH
12657: LD_INT 3
12659: EQUAL
12660: IFFALSE 12678
// begin ComExit ( Heike ) ;
12662: LD_EXP 15
12666: PPUSH
12667: CALL 54624 0 1
// wait ( 3 ) ;
12671: LD_INT 3
12673: PPUSH
12674: CALL_OW 67
// end ; ComMoveXY ( Heike , 82 , 133 ) ;
12678: LD_EXP 15
12682: PPUSH
12683: LD_INT 82
12685: PPUSH
12686: LD_INT 133
12688: PPUSH
12689: CALL_OW 111
// AddComTurnUnit ( Heike , usCommander ) ;
12693: LD_EXP 15
12697: PPUSH
12698: LD_EXP 30
12702: PPUSH
12703: CALL_OW 179
// wait ( 0 0$3 ) ;
12707: LD_INT 105
12709: PPUSH
12710: CALL_OW 67
// Say ( Heike , DH-Surrender-3 ) ;
12714: LD_EXP 15
12718: PPUSH
12719: LD_STRING DH-Surrender-3
12721: PPUSH
12722: CALL_OW 88
// Say ( Heike , DH-Surrender-4 ) ;
12726: LD_EXP 15
12730: PPUSH
12731: LD_STRING DH-Surrender-4
12733: PPUSH
12734: CALL_OW 88
// RemoveSeeing ( 81 , 144 , 2 ) ;
12738: LD_INT 81
12740: PPUSH
12741: LD_INT 144
12743: PPUSH
12744: LD_INT 2
12746: PPUSH
12747: CALL_OW 331
// ChangeSideFog ( 1 , 2 ) ;
12751: LD_INT 1
12753: PPUSH
12754: LD_INT 2
12756: PPUSH
12757: CALL_OW 343
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_inside ] ] ) do
12761: LD_ADDR_VAR 0 1
12765: PUSH
12766: LD_INT 22
12768: PUSH
12769: LD_INT 1
12771: PUSH
12772: EMPTY
12773: LIST
12774: LIST
12775: PUSH
12776: LD_INT 23
12778: PUSH
12779: LD_INT 1
12781: PUSH
12782: EMPTY
12783: LIST
12784: LIST
12785: PUSH
12786: LD_INT 54
12788: PUSH
12789: EMPTY
12790: LIST
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: LIST
12796: PPUSH
12797: CALL_OW 69
12801: PUSH
12802: FOR_IN
12803: IFFALSE 12816
// ComExit ( i ) ;
12805: LD_VAR 0 1
12809: PPUSH
12810: CALL 54624 0 1
12814: GO 12802
12816: POP
12817: POP
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
12818: LD_ADDR_VAR 0 3
12822: PUSH
12823: LD_INT 22
12825: PUSH
12826: LD_INT 1
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: PUSH
12833: LD_INT 25
12835: PUSH
12836: LD_INT 4
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: PPUSH
12847: CALL_OW 69
12851: ST_TO_ADDR
// hurts := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
12852: LD_ADDR_VAR 0 2
12856: PUSH
12857: LD_INT 22
12859: PUSH
12860: LD_INT 1
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: PUSH
12867: LD_INT 3
12869: PUSH
12870: LD_INT 50
12872: PUSH
12873: EMPTY
12874: LIST
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: PPUSH
12884: CALL_OW 69
12888: ST_TO_ADDR
// if sci and hurts then
12889: LD_VAR 0 3
12893: PUSH
12894: LD_VAR 0 2
12898: AND
12899: IFFALSE 12961
// begin for i := 1 to hurts do
12901: LD_ADDR_VAR 0 1
12905: PUSH
12906: DOUBLE
12907: LD_INT 1
12909: DEC
12910: ST_TO_ADDR
12911: LD_VAR 0 2
12915: PUSH
12916: FOR_TO
12917: IFFALSE 12959
// if i <= sci then
12919: LD_VAR 0 1
12923: PUSH
12924: LD_VAR 0 3
12928: LESSEQUAL
12929: IFFALSE 12957
// AddComHeal ( sci [ i ] , hurts [ i ] ) ;
12931: LD_VAR 0 3
12935: PUSH
12936: LD_VAR 0 1
12940: ARRAY
12941: PPUSH
12942: LD_VAR 0 2
12946: PUSH
12947: LD_VAR 0 1
12951: ARRAY
12952: PPUSH
12953: CALL_OW 188
12957: GO 12916
12959: POP
12960: POP
// end ; if IsOk ( Givi ) then
12961: LD_EXP 16
12965: PPUSH
12966: CALL_OW 302
12970: IFFALSE 12986
// Say ( Givi , DG-Surrender-5 ) else
12972: LD_EXP 16
12976: PPUSH
12977: LD_STRING DG-Surrender-5
12979: PPUSH
12980: CALL_OW 88
12984: GO 12998
// Say ( Heike , DH-Surrender-a-5 ) ;
12986: LD_EXP 15
12990: PPUSH
12991: LD_STRING DH-Surrender-a-5
12993: PPUSH
12994: CALL_OW 88
// Say ( usCommander , DCa-Surrender-6 ) ;
12998: LD_EXP 30
13002: PPUSH
13003: LD_STRING DCa-Surrender-6
13005: PPUSH
13006: CALL_OW 88
// Say ( usCommander , DCa-Surrender-7 ) ;
13010: LD_EXP 30
13014: PPUSH
13015: LD_STRING DCa-Surrender-7
13017: PPUSH
13018: CALL_OW 88
// if IsOk ( Givi ) then
13022: LD_EXP 16
13026: PPUSH
13027: CALL_OW 302
13031: IFFALSE 13047
// Say ( Givi , DG-Surrender-8 ) else
13033: LD_EXP 16
13037: PPUSH
13038: LD_STRING DG-Surrender-8
13040: PPUSH
13041: CALL_OW 88
13045: GO 13059
// Say ( Heike , DH-Surrender-a-8 ) ;
13047: LD_EXP 15
13051: PPUSH
13052: LD_STRING DH-Surrender-a-8
13054: PPUSH
13055: CALL_OW 88
// Say ( usCommander , DCa-Surrender-9 ) ;
13059: LD_EXP 30
13063: PPUSH
13064: LD_STRING DCa-Surrender-9
13066: PPUSH
13067: CALL_OW 88
// Say ( Heike , DH-Surrender-10 ) ;
13071: LD_EXP 15
13075: PPUSH
13076: LD_STRING DH-Surrender-10
13078: PPUSH
13079: CALL_OW 88
// Say ( usCommander , DCa-Surrender-11 ) ;
13083: LD_EXP 30
13087: PPUSH
13088: LD_STRING DCa-Surrender-11
13090: PPUSH
13091: CALL_OW 88
// Say ( Heike , DH-Surrender-12 ) ;
13095: LD_EXP 15
13099: PPUSH
13100: LD_STRING DH-Surrender-12
13102: PPUSH
13103: CALL_OW 88
// Say ( usCommander , DCa-Surrender-13 ) ;
13107: LD_EXP 30
13111: PPUSH
13112: LD_STRING DCa-Surrender-13
13114: PPUSH
13115: CALL_OW 88
// Say ( usCommander , DCa-Surrender-14 ) ;
13119: LD_EXP 30
13123: PPUSH
13124: LD_STRING DCa-Surrender-14
13126: PPUSH
13127: CALL_OW 88
// Say ( usCommander , DCa-Surrender-15 ) ;
13131: LD_EXP 30
13135: PPUSH
13136: LD_STRING DCa-Surrender-15
13138: PPUSH
13139: CALL_OW 88
// Say ( usCommander , DCa-Surrender-16 ) ;
13143: LD_EXP 30
13147: PPUSH
13148: LD_STRING DCa-Surrender-16
13150: PPUSH
13151: CALL_OW 88
// Say ( Kaia , DK-Surrender-17 ) ;
13155: LD_EXP 20
13159: PPUSH
13160: LD_STRING DK-Surrender-17
13162: PPUSH
13163: CALL_OW 88
// Say ( Olaf , DO-Surrender-18 ) ;
13167: LD_EXP 24
13171: PPUSH
13172: LD_STRING DO-Surrender-18
13174: PPUSH
13175: CALL_OW 88
// Say ( Olaf , DO-Surrender-19 ) ;
13179: LD_EXP 24
13183: PPUSH
13184: LD_STRING DO-Surrender-19
13186: PPUSH
13187: CALL_OW 88
// Say ( Kurt , DKs-Surrender-20 ) ;
13191: LD_EXP 25
13195: PPUSH
13196: LD_STRING DKs-Surrender-20
13198: PPUSH
13199: CALL_OW 88
// Say ( Kurt , DKs-Surrender-21 ) ;
13203: LD_EXP 25
13207: PPUSH
13208: LD_STRING DKs-Surrender-21
13210: PPUSH
13211: CALL_OW 88
// Say ( Markov , DMar-Surrender-22 ) ;
13215: LD_EXP 22
13219: PPUSH
13220: LD_STRING DMar-Surrender-22
13222: PPUSH
13223: CALL_OW 88
// Say ( Markov , DMar-Surrender-23 ) ;
13227: LD_EXP 22
13231: PPUSH
13232: LD_STRING DMar-Surrender-23
13234: PPUSH
13235: CALL_OW 88
// Say ( Sophia , DS-Surrender-24 ) ;
13239: LD_EXP 21
13243: PPUSH
13244: LD_STRING DS-Surrender-24
13246: PPUSH
13247: CALL_OW 88
// Say ( Aviradze , DA-Surrender-25 ) ;
13251: LD_EXP 26
13255: PPUSH
13256: LD_STRING DA-Surrender-25
13258: PPUSH
13259: CALL_OW 88
// Say ( Ibrahim , DI-Surrender-26 ) ;
13263: LD_EXP 18
13267: PPUSH
13268: LD_STRING DI-Surrender-26
13270: PPUSH
13271: CALL_OW 88
// Say ( Kamil , DKam-Surrender-27 ) ;
13275: LD_EXP 19
13279: PPUSH
13280: LD_STRING DKam-Surrender-27
13282: PPUSH
13283: CALL_OW 88
// if IsOk ( Givi ) then
13287: LD_EXP 16
13291: PPUSH
13292: CALL_OW 302
13296: IFFALSE 13336
// begin Say ( Givi , DG-Surrender-28 ) ;
13298: LD_EXP 16
13302: PPUSH
13303: LD_STRING DG-Surrender-28
13305: PPUSH
13306: CALL_OW 88
// Say ( Givi , DG-Surrender-29 ) ;
13310: LD_EXP 16
13314: PPUSH
13315: LD_STRING DG-Surrender-29
13317: PPUSH
13318: CALL_OW 88
// Say ( Givi , DG-Surrender-30 ) ;
13322: LD_EXP 16
13326: PPUSH
13327: LD_STRING DG-Surrender-30
13329: PPUSH
13330: CALL_OW 88
// end else
13334: GO 13372
// begin Say ( Heike , DH-Surrender-a-28 ) ;
13336: LD_EXP 15
13340: PPUSH
13341: LD_STRING DH-Surrender-a-28
13343: PPUSH
13344: CALL_OW 88
// Say ( Heike , DH-Surrender-a-29 ) ;
13348: LD_EXP 15
13352: PPUSH
13353: LD_STRING DH-Surrender-a-29
13355: PPUSH
13356: CALL_OW 88
// Say ( Heike , DH-Surrender-a-30 ) ;
13360: LD_EXP 15
13364: PPUSH
13365: LD_STRING DH-Surrender-a-30
13367: PPUSH
13368: CALL_OW 88
// end ; PrepareRussianFirstWaveAttack ;
13372: CALL 15361 0 0
// AgressiveMove ( FilterAllUnits ( [ f_side , 3 ] ) , [ [ 176 , 123 ] ] ) ;
13376: LD_INT 22
13378: PUSH
13379: LD_INT 3
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PPUSH
13386: CALL_OW 69
13390: PPUSH
13391: LD_INT 176
13393: PUSH
13394: LD_INT 123
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: PUSH
13401: EMPTY
13402: LIST
13403: PPUSH
13404: CALL 56830 0 2
// PlaceSeeing ( 190 , 150 , 2 , - 8 ) ;
13408: LD_INT 190
13410: PPUSH
13411: LD_INT 150
13413: PPUSH
13414: LD_INT 2
13416: PPUSH
13417: LD_INT 8
13419: NEG
13420: PPUSH
13421: CALL_OW 330
// CenterOnXY ( 193 , 150 ) ;
13425: LD_INT 193
13427: PPUSH
13428: LD_INT 150
13430: PPUSH
13431: CALL_OW 84
// if IsOk ( Markov ) then
13435: LD_EXP 22
13439: PPUSH
13440: CALL_OW 302
13444: IFFALSE 13460
// Say ( Markov , DMar-Surrender-31 ) else
13446: LD_EXP 22
13450: PPUSH
13451: LD_STRING DMar-Surrender-31
13453: PPUSH
13454: CALL_OW 88
13458: GO 13517
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Surrender-a-31 ) then
13460: LD_EXP 27
13464: PPUSH
13465: LD_INT 26
13467: PUSH
13468: LD_INT 1
13470: PUSH
13471: EMPTY
13472: LIST
13473: LIST
13474: PPUSH
13475: CALL_OW 72
13479: PPUSH
13480: LD_STRING DArm-Surrender-a-31
13482: PPUSH
13483: CALL 224 0 2
13487: NOT
13488: IFFALSE 13517
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Surrender-a-31 ) ;
13490: LD_EXP 27
13494: PPUSH
13495: LD_INT 26
13497: PUSH
13498: LD_INT 2
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PPUSH
13505: CALL_OW 72
13509: PPUSH
13510: LD_STRING DArf-Surrender-a-31
13512: PPUSH
13513: CALL 224 0 2
// Say ( Heike , DH-Surrender-32 ) ;
13517: LD_EXP 15
13521: PPUSH
13522: LD_STRING DH-Surrender-32
13524: PPUSH
13525: CALL_OW 88
// InGameOff ;
13529: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
13533: LD_STRING M2
13535: PPUSH
13536: CALL_OW 337
// wait ( 0 0$20 ) ;
13540: LD_INT 700
13542: PPUSH
13543: CALL_OW 67
// PrepareRussianLastWaveAttack ;
13547: CALL 15723 0 0
// russianAttack := true ;
13551: LD_ADDR_EXP 8
13555: PUSH
13556: LD_INT 1
13558: ST_TO_ADDR
// RemoveSeeing ( 190 , 150 , 2 ) ;
13559: LD_INT 190
13561: PPUSH
13562: LD_INT 150
13564: PPUSH
13565: LD_INT 2
13567: PPUSH
13568: CALL_OW 331
// end ;
13572: PPOPN 3
13574: END
// every 0 0$3 trigger seeHeavyGun and not InBattle ( 2 ) and IsOk ( Heike ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) and ( IsOk ( Markov ) or UnitFilter ( heikeSecondSquad , [ f_ok ] ) ) do
13575: LD_EXP 11
13579: PUSH
13580: LD_INT 2
13582: PPUSH
13583: CALL_OW 463
13587: NOT
13588: AND
13589: PUSH
13590: LD_EXP 15
13594: PPUSH
13595: CALL_OW 302
13599: AND
13600: PUSH
13601: LD_INT 22
13603: PUSH
13604: LD_INT 2
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: PUSH
13611: LD_INT 30
13613: PUSH
13614: LD_INT 3
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: PPUSH
13625: CALL_OW 69
13629: AND
13630: PUSH
13631: LD_EXP 22
13635: PPUSH
13636: CALL_OW 302
13640: PUSH
13641: LD_EXP 27
13645: PPUSH
13646: LD_INT 50
13648: PUSH
13649: EMPTY
13650: LIST
13651: PPUSH
13652: CALL_OW 72
13656: OR
13657: AND
13658: IFFALSE 13886
13660: GO 13662
13662: DISABLE
// begin DialogueOn ;
13663: CALL_OW 6
// Say ( Heike , DH-Heavy-1 ) ;
13667: LD_EXP 15
13671: PPUSH
13672: LD_STRING DH-Heavy-1
13674: PPUSH
13675: CALL_OW 88
// if IsOk ( Markov ) then
13679: LD_EXP 22
13683: PPUSH
13684: CALL_OW 302
13688: IFFALSE 13813
// begin Say ( Markov , DMar-Heavy-2 ) ;
13690: LD_EXP 22
13694: PPUSH
13695: LD_STRING DMar-Heavy-2
13697: PPUSH
13698: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
13702: LD_INT 22
13704: PUSH
13705: LD_INT 2
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: LD_INT 30
13714: PUSH
13715: LD_INT 3
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PPUSH
13726: CALL_OW 69
13730: PUSH
13731: LD_INT 1
13733: ARRAY
13734: PPUSH
13735: CALL_OW 87
// Say ( Markov , DMar-Heavy-3 ) ;
13739: LD_EXP 22
13743: PPUSH
13744: LD_STRING DMar-Heavy-3
13746: PPUSH
13747: CALL_OW 88
// Say ( Markov , DMar-Heavy-4 ) ;
13751: LD_EXP 22
13755: PPUSH
13756: LD_STRING DMar-Heavy-4
13758: PPUSH
13759: CALL_OW 88
// Say ( Markov , DMar-Heavy-5 ) ;
13763: LD_EXP 22
13767: PPUSH
13768: LD_STRING DMar-Heavy-5
13770: PPUSH
13771: CALL_OW 88
// Say ( Markov , DMar-Heavy-6 ) ;
13775: LD_EXP 22
13779: PPUSH
13780: LD_STRING DMar-Heavy-6
13782: PPUSH
13783: CALL_OW 88
// Say ( Heike , DH-Heavy-7 ) ;
13787: LD_EXP 15
13791: PPUSH
13792: LD_STRING DH-Heavy-7
13794: PPUSH
13795: CALL_OW 88
// Say ( Heike , DH-Heavy-8 ) ;
13799: LD_EXP 15
13803: PPUSH
13804: LD_STRING DH-Heavy-8
13806: PPUSH
13807: CALL_OW 88
// end else
13811: GO 13870
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Heavy-a-2 ) then
13813: LD_EXP 27
13817: PPUSH
13818: LD_INT 26
13820: PUSH
13821: LD_INT 1
13823: PUSH
13824: EMPTY
13825: LIST
13826: LIST
13827: PPUSH
13828: CALL_OW 72
13832: PPUSH
13833: LD_STRING DArm-Heavy-a-2
13835: PPUSH
13836: CALL 224 0 2
13840: NOT
13841: IFFALSE 13870
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Heavy-a-2 ) ;
13843: LD_EXP 27
13847: PPUSH
13848: LD_INT 26
13850: PUSH
13851: LD_INT 2
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: PPUSH
13858: CALL_OW 72
13862: PPUSH
13863: LD_STRING DArf-Heavy-a-2
13865: PPUSH
13866: CALL 224 0 2
// end ; Say ( Heike , DH-Heavy-9 ) ;
13870: LD_EXP 15
13874: PPUSH
13875: LD_STRING DH-Heavy-9
13877: PPUSH
13878: CALL_OW 88
// DialogueOff ;
13882: CALL_OW 7
// end ;
13886: END
// every 0 0$2 trigger UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) and IsOk ( Heike ) and not usSurrender do
13887: LD_EXP 34
13891: PPUSH
13892: LD_INT 101
13894: PUSH
13895: LD_INT 2
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: PPUSH
13902: CALL_OW 72
13906: PUSH
13907: LD_EXP 15
13911: PPUSH
13912: CALL_OW 302
13916: AND
13917: PUSH
13918: LD_EXP 7
13922: NOT
13923: AND
13924: IFFALSE 14067
13926: GO 13928
13928: DISABLE
// begin DialogueOn ;
13929: CALL_OW 6
// CenterNowOnUnits ( UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) ) ;
13933: LD_EXP 34
13937: PPUSH
13938: LD_INT 101
13940: PUSH
13941: LD_INT 2
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PPUSH
13948: CALL_OW 72
13952: PPUSH
13953: CALL_OW 87
// Say ( Heike , DH-Flank-1 ) ;
13957: LD_EXP 15
13961: PPUSH
13962: LD_STRING DH-Flank-1
13964: PPUSH
13965: CALL_OW 88
// if IsOk ( Mike ) then
13969: LD_EXP 17
13973: PPUSH
13974: CALL_OW 302
13978: IFFALSE 13994
// Say ( Mike , DM-Flank-2 ) else
13980: LD_EXP 17
13984: PPUSH
13985: LD_STRING DM-Flank-2
13987: PPUSH
13988: CALL_OW 88
13992: GO 14051
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Flank-a-2 ) then
13994: LD_EXP 27
13998: PPUSH
13999: LD_INT 26
14001: PUSH
14002: LD_INT 1
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PPUSH
14009: CALL_OW 72
14013: PPUSH
14014: LD_STRING DArm-Flank-a-2
14016: PPUSH
14017: CALL 224 0 2
14021: NOT
14022: IFFALSE 14051
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArm-Flank-a-2 ) ;
14024: LD_EXP 27
14028: PPUSH
14029: LD_INT 26
14031: PUSH
14032: LD_INT 2
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PPUSH
14039: CALL_OW 72
14043: PPUSH
14044: LD_STRING DArm-Flank-a-2
14046: PPUSH
14047: CALL 224 0 2
// Say ( Heike , DH-Flank-3 ) ;
14051: LD_EXP 15
14055: PPUSH
14056: LD_STRING DH-Flank-3
14058: PPUSH
14059: CALL_OW 88
// DialogueOff ;
14063: CALL_OW 7
// end ;
14067: END
// every 0 0$3 trigger seeRemoteVehicle and not usSurrender do
14068: LD_EXP 10
14072: PUSH
14073: LD_EXP 7
14077: NOT
14078: AND
14079: IFFALSE 14303
14081: GO 14083
14083: DISABLE
// begin DialogueOn ;
14084: CALL_OW 6
// Say ( Heike , DH-USRC-1 ) ;
14088: LD_EXP 15
14092: PPUSH
14093: LD_STRING DH-USRC-1
14095: PPUSH
14096: CALL_OW 88
// if IsOk ( Markov ) then
14100: LD_EXP 22
14104: PPUSH
14105: CALL_OW 302
14109: IFFALSE 14125
// Say ( Markov , DMar-USRC-2 ) else
14111: LD_EXP 22
14115: PPUSH
14116: LD_STRING DMar-USRC-2
14118: PPUSH
14119: CALL_OW 88
14123: GO 14182
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-USRC-a-2 ) then
14125: LD_EXP 27
14129: PPUSH
14130: LD_INT 26
14132: PUSH
14133: LD_INT 1
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PPUSH
14140: CALL_OW 72
14144: PPUSH
14145: LD_STRING DArm-USRC-a-2
14147: PPUSH
14148: CALL 224 0 2
14152: NOT
14153: IFFALSE 14182
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-USRC-a-2 ) ;
14155: LD_EXP 27
14159: PPUSH
14160: LD_INT 26
14162: PUSH
14163: LD_INT 2
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: PPUSH
14170: CALL_OW 72
14174: PPUSH
14175: LD_STRING DArf-USRC-a-2
14177: PPUSH
14178: CALL 224 0 2
// DialogueOff ;
14182: CALL_OW 7
// wait ( 0 0$10 ) ;
14186: LD_INT 350
14188: PPUSH
14189: CALL_OW 67
// Say ( Heike , DH-USRC-3 ) ;
14193: LD_EXP 15
14197: PPUSH
14198: LD_STRING DH-USRC-3
14200: PPUSH
14201: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14205: LD_INT 35
14207: PPUSH
14208: CALL_OW 67
// until See ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
14212: LD_INT 2
14214: PPUSH
14215: LD_INT 22
14217: PUSH
14218: LD_INT 1
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PUSH
14225: LD_INT 30
14227: PUSH
14228: LD_INT 36
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: PPUSH
14239: CALL_OW 69
14243: PUSH
14244: LD_INT 1
14246: ARRAY
14247: PPUSH
14248: CALL_OW 292
14252: IFFALSE 14205
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
14254: LD_INT 22
14256: PUSH
14257: LD_INT 1
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: PUSH
14264: LD_INT 30
14266: PUSH
14267: LD_INT 36
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: PPUSH
14278: CALL_OW 69
14282: PUSH
14283: LD_INT 1
14285: ARRAY
14286: PPUSH
14287: CALL_OW 87
// Say ( Heike , DH-USRCFound-1 ) ;
14291: LD_EXP 15
14295: PPUSH
14296: LD_STRING DH-USRCFound-1
14298: PPUSH
14299: CALL_OW 88
// end ;
14303: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
14304: LD_EXP 20
14308: PPUSH
14309: CALL_OW 256
14313: PUSH
14314: LD_INT 3
14316: LESS
14317: IFFALSE 14354
14319: GO 14321
14321: DISABLE
// begin DialogueOn ;
14322: CALL_OW 6
// ForceSay ( Kaia , DK-Dead-1 ) ;
14326: LD_EXP 20
14330: PPUSH
14331: LD_STRING DK-Dead-1
14333: PPUSH
14334: CALL_OW 91
// ForceSay ( Kaia , DK-Dead-2 ) ;
14338: LD_EXP 20
14342: PPUSH
14343: LD_STRING DK-Dead-2
14345: PPUSH
14346: CALL_OW 91
// DialogueOff ;
14350: CALL_OW 7
// end ;
14354: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_bweapon , ar_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] ] ] ) do
14355: LD_INT 22
14357: PUSH
14358: LD_INT 2
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PUSH
14365: LD_INT 2
14367: PUSH
14368: LD_INT 35
14370: PUSH
14371: LD_INT 28
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PUSH
14378: LD_INT 34
14380: PUSH
14381: LD_INT 28
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: LIST
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: PPUSH
14397: CALL_OW 69
14401: IFFALSE 14414
14403: GO 14405
14405: DISABLE
// hasRockets := true ;
14406: LD_ADDR_EXP 9
14410: PUSH
14411: LD_INT 1
14413: ST_TO_ADDR
14414: END
// every 0 0$1 trigger russianAttack and not FilterAllUnits ( [ f_side , 3 ] ) do
14415: LD_EXP 8
14419: PUSH
14420: LD_INT 22
14422: PUSH
14423: LD_INT 3
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PPUSH
14430: CALL_OW 69
14434: NOT
14435: AND
14436: IFFALSE 15098
14438: GO 14440
14440: DISABLE
// begin DialogueOn ;
14441: CALL_OW 6
// if vehLossCounter = 0 then
14445: LD_EXP 14
14449: PUSH
14450: LD_INT 0
14452: EQUAL
14453: IFFALSE 14462
// SetAchievement ( ACH_UNTOUCH ) ;
14455: LD_STRING ACH_UNTOUCH
14457: PPUSH
14458: CALL_OW 543
// if tick < 35 35$00 then
14462: LD_OWVAR 1
14466: PUSH
14467: LD_INT 73500
14469: LESS
14470: IFFALSE 14479
// SetAchievement ( ACH_HSPEED_7 ) ;
14472: LD_STRING ACH_HSPEED_7
14474: PPUSH
14475: CALL_OW 543
// CenterNowOnUnits ( Heike ) ;
14479: LD_EXP 15
14483: PPUSH
14484: CALL_OW 87
// Say ( Heike , DH-End-1 ) ;
14488: LD_EXP 15
14492: PPUSH
14493: LD_STRING DH-End-1
14495: PPUSH
14496: CALL_OW 88
// SayRadio ( Shariff , DShar-End-2 ) ;
14500: LD_EXP 23
14504: PPUSH
14505: LD_STRING DShar-End-2
14507: PPUSH
14508: CALL_OW 94
// Say ( Kaia , DK-End-3 ) ;
14512: LD_EXP 20
14516: PPUSH
14517: LD_STRING DK-End-3
14519: PPUSH
14520: CALL_OW 88
// Say ( Heike , DH-End-4 ) ;
14524: LD_EXP 15
14528: PPUSH
14529: LD_STRING DH-End-4
14531: PPUSH
14532: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
14536: LD_EXP 23
14540: PPUSH
14541: LD_STRING DShar-End-5
14543: PPUSH
14544: CALL_OW 94
// if IsOk ( Markov ) then
14548: LD_EXP 22
14552: PPUSH
14553: CALL_OW 302
14557: IFFALSE 14571
// Say ( Kaia , DK-End-6 ) ;
14559: LD_EXP 20
14563: PPUSH
14564: LD_STRING DK-End-6
14566: PPUSH
14567: CALL_OW 88
// Say ( Kaia , DK-End-7 ) ;
14571: LD_EXP 20
14575: PPUSH
14576: LD_STRING DK-End-7
14578: PPUSH
14579: CALL_OW 88
// if IsOk ( Kaia ) then
14583: LD_EXP 20
14587: PPUSH
14588: CALL_OW 302
14592: IFFALSE 14630
// begin Say ( Givi , DG-End-8 ) ;
14594: LD_EXP 16
14598: PPUSH
14599: LD_STRING DG-End-8
14601: PPUSH
14602: CALL_OW 88
// Say ( Givi , DG-End-9 ) ;
14606: LD_EXP 16
14610: PPUSH
14611: LD_STRING DG-End-9
14613: PPUSH
14614: CALL_OW 88
// Say ( Heike , DH-End-10 ) ;
14618: LD_EXP 15
14622: PPUSH
14623: LD_STRING DH-End-10
14625: PPUSH
14626: CALL_OW 88
// end ; Say ( Heike , DH-End-11 ) ;
14630: LD_EXP 15
14634: PPUSH
14635: LD_STRING DH-End-11
14637: PPUSH
14638: CALL_OW 88
// if GetTech ( tech_MatDet , 2 ) = state_researched then
14642: LD_INT 7
14644: PPUSH
14645: LD_INT 2
14647: PPUSH
14648: CALL_OW 321
14652: PUSH
14653: LD_INT 2
14655: EQUAL
14656: IFFALSE 14670
// AddMedal ( med1 , 1 ) else
14658: LD_STRING med1
14660: PPUSH
14661: LD_INT 1
14663: PPUSH
14664: CALL_OW 101
14668: GO 14681
// AddMedal ( med1 , - 1 ) ;
14670: LD_STRING med1
14672: PPUSH
14673: LD_INT 1
14675: NEG
14676: PPUSH
14677: CALL_OW 101
// if hasRockets then
14681: LD_EXP 9
14685: IFFALSE 14699
// AddMedal ( med2 , 1 ) else
14687: LD_STRING med2
14689: PPUSH
14690: LD_INT 1
14692: PPUSH
14693: CALL_OW 101
14697: GO 14710
// AddMedal ( med2 , - 1 ) ;
14699: LD_STRING med2
14701: PPUSH
14702: LD_INT 1
14704: NEG
14705: PPUSH
14706: CALL_OW 101
// if tick < [ 50 50$00 , 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
14710: LD_OWVAR 1
14714: PUSH
14715: LD_INT 105000
14717: PUSH
14718: LD_INT 94500
14720: PUSH
14721: LD_INT 84000
14723: PUSH
14724: LD_INT 73500
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: PUSH
14733: LD_OWVAR 67
14737: ARRAY
14738: LESS
14739: IFFALSE 14753
// AddMedal ( med3 , 1 ) else
14741: LD_STRING med3
14743: PPUSH
14744: LD_INT 1
14746: PPUSH
14747: CALL_OW 101
14751: GO 14764
// AddMedal ( med3 , - 1 ) ;
14753: LD_STRING med3
14755: PPUSH
14756: LD_INT 1
14758: NEG
14759: PPUSH
14760: CALL_OW 101
// GiveMedals ( MAIN ) ;
14764: LD_STRING MAIN
14766: PPUSH
14767: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
14771: LD_INT 22
14773: PUSH
14774: LD_INT 2
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: PUSH
14781: LD_INT 23
14783: PUSH
14784: LD_INT 2
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: PUSH
14791: LD_INT 21
14793: PUSH
14794: LD_INT 1
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: LIST
14805: PPUSH
14806: CALL_OW 69
14810: PPUSH
14811: CALL_OW 43
// SaveCharacters ( usCommander , 07_UsCommander ) ;
14815: LD_EXP 30
14819: PPUSH
14820: LD_STRING 07_UsCommander
14822: PPUSH
14823: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff usCommander , 07_Americans ) ;
14827: LD_INT 22
14829: PUSH
14830: LD_INT 1
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: PUSH
14837: LD_INT 23
14839: PUSH
14840: LD_INT 1
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: PUSH
14847: LD_INT 21
14849: PUSH
14850: LD_INT 1
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: LIST
14861: PPUSH
14862: CALL_OW 69
14866: PUSH
14867: LD_EXP 30
14871: DIFF
14872: PPUSH
14873: LD_STRING 07_Americans
14875: PPUSH
14876: CALL_OW 38
// SaveCharacters ( Heike , 07_Heike ) ;
14880: LD_EXP 15
14884: PPUSH
14885: LD_STRING 07_Heike
14887: PPUSH
14888: CALL_OW 38
// if Aviradze then
14892: LD_EXP 26
14896: IFFALSE 14910
// SaveCharacters ( Aviradze , 07_Aviradze ) ;
14898: LD_EXP 26
14902: PPUSH
14903: LD_STRING 07_Aviradze
14905: PPUSH
14906: CALL_OW 38
// if Ibrahim then
14910: LD_EXP 18
14914: IFFALSE 14928
// SaveCharacters ( Ibrahim , 07_Ibrahim ) ;
14916: LD_EXP 18
14920: PPUSH
14921: LD_STRING 07_Ibrahim
14923: PPUSH
14924: CALL_OW 38
// if Kamil then
14928: LD_EXP 19
14932: IFFALSE 14946
// SaveCharacters ( Kamil , 07_Kamil ) ;
14934: LD_EXP 19
14938: PPUSH
14939: LD_STRING 07_Kamil
14941: PPUSH
14942: CALL_OW 38
// if Sophia then
14946: LD_EXP 21
14950: IFFALSE 14964
// SaveCharacters ( Sophia , 07_Sophia ) ;
14952: LD_EXP 21
14956: PPUSH
14957: LD_STRING 07_Sophia
14959: PPUSH
14960: CALL_OW 38
// if Kaia then
14964: LD_EXP 20
14968: IFFALSE 14982
// SaveCharacters ( Kaia , 07_Kaia ) ;
14970: LD_EXP 20
14974: PPUSH
14975: LD_STRING 07_Kaia
14977: PPUSH
14978: CALL_OW 38
// if Givi then
14982: LD_EXP 16
14986: IFFALSE 15000
// SaveCharacters ( Givi , 07_Givi ) ;
14988: LD_EXP 16
14992: PPUSH
14993: LD_STRING 07_Givi
14995: PPUSH
14996: CALL_OW 38
// if Mike then
15000: LD_EXP 17
15004: IFFALSE 15018
// SaveCharacters ( Mike , 07_Mike ) ;
15006: LD_EXP 17
15010: PPUSH
15011: LD_STRING 07_Mike
15013: PPUSH
15014: CALL_OW 38
// if Markov then
15018: LD_EXP 22
15022: IFFALSE 15036
// SaveCharacters ( Markov , 07_Markov ) ;
15024: LD_EXP 22
15028: PPUSH
15029: LD_STRING 07_Markov
15031: PPUSH
15032: CALL_OW 38
// if Kurt then
15036: LD_EXP 25
15040: IFFALSE 15054
// SaveCharacters ( Kurt , 07_Kurt ) ;
15042: LD_EXP 25
15046: PPUSH
15047: LD_STRING 07_Kurt
15049: PPUSH
15050: CALL_OW 38
// if Olaf then
15054: LD_EXP 24
15058: IFFALSE 15072
// SaveCharacters ( Olaf , 07_Olaf ) ;
15060: LD_EXP 24
15064: PPUSH
15065: LD_STRING 07_Olaf
15067: PPUSH
15068: CALL_OW 38
// if heikeSecondSquad then
15072: LD_EXP 27
15076: IFFALSE 15090
// SaveCharacters ( heikeSecondSquad , 07_others ) ;
15078: LD_EXP 27
15082: PPUSH
15083: LD_STRING 07_others
15085: PPUSH
15086: CALL_OW 38
// YouWin ;
15090: CALL_OW 103
// DialogueOff ;
15094: CALL_OW 7
// end ; end_of_file
15098: END
// every 1 1$20 + 0 0$40 trigger GetResourceArea ( cratesRiverArea , mat_cans ) < [ 12 , 10 , 8 , 8 ] [ Difficulty ] do
15099: LD_INT 7
15101: PPUSH
15102: LD_INT 1
15104: PPUSH
15105: CALL_OW 287
15109: PUSH
15110: LD_INT 12
15112: PUSH
15113: LD_INT 10
15115: PUSH
15116: LD_INT 8
15118: PUSH
15119: LD_INT 8
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: PUSH
15128: LD_OWVAR 67
15132: ARRAY
15133: LESS
15134: IFFALSE 15161
15136: GO 15138
15138: DISABLE
// begin enable ;
15139: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesRiverArea , true ) ;
15140: LD_INT 1
15142: PPUSH
15143: LD_INT 5
15145: PPUSH
15146: CALL_OW 12
15150: PPUSH
15151: LD_INT 7
15153: PPUSH
15154: LD_INT 1
15156: PPUSH
15157: CALL_OW 55
// end ;
15161: END
// every 0 0$40 + 0 0$40 trigger GetResourceArea ( cratesForestArea , mat_cans ) < [ 25 , 22 , 17 , 14 ] [ Difficulty ] and tick < 24 24$00 do
15162: LD_INT 8
15164: PPUSH
15165: LD_INT 1
15167: PPUSH
15168: CALL_OW 287
15172: PUSH
15173: LD_INT 25
15175: PUSH
15176: LD_INT 22
15178: PUSH
15179: LD_INT 17
15181: PUSH
15182: LD_INT 14
15184: PUSH
15185: EMPTY
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: PUSH
15191: LD_OWVAR 67
15195: ARRAY
15196: LESS
15197: PUSH
15198: LD_OWVAR 1
15202: PUSH
15203: LD_INT 50400
15205: LESS
15206: AND
15207: IFFALSE 15234
15209: GO 15211
15211: DISABLE
// begin enable ;
15212: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesForestArea , true ) ;
15213: LD_INT 1
15215: PPUSH
15216: LD_INT 5
15218: PPUSH
15219: CALL_OW 12
15223: PPUSH
15224: LD_INT 8
15226: PPUSH
15227: LD_INT 1
15229: PPUSH
15230: CALL_OW 55
// end ;
15234: END
// every 0 0$40 trigger tick < 8 8$10 do
15235: LD_OWVAR 1
15239: PUSH
15240: LD_INT 17150
15242: LESS
15243: IFFALSE 15276
15245: GO 15247
15247: DISABLE
// begin enable ;
15248: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 130 , 18 , 12 , true ) ;
15249: LD_INT 1
15251: PPUSH
15252: LD_INT 5
15254: PPUSH
15255: CALL_OW 12
15259: PPUSH
15260: LD_INT 130
15262: PPUSH
15263: LD_INT 18
15265: PPUSH
15266: LD_INT 12
15268: PPUSH
15269: LD_INT 1
15271: PPUSH
15272: CALL_OW 56
// end ;
15276: END
// every 1 1$00 + 0 0$30 trigger tick < 6 6$10 do
15277: LD_OWVAR 1
15281: PUSH
15282: LD_INT 12950
15284: LESS
15285: IFFALSE 15318
15287: GO 15289
15289: DISABLE
// begin enable ;
15290: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 172 , 97 , 12 , true ) ;
15291: LD_INT 1
15293: PPUSH
15294: LD_INT 5
15296: PPUSH
15297: CALL_OW 12
15301: PPUSH
15302: LD_INT 172
15304: PPUSH
15305: LD_INT 97
15307: PPUSH
15308: LD_INT 12
15310: PPUSH
15311: LD_INT 1
15313: PPUSH
15314: CALL_OW 56
// end ;
15318: END
// every 2 2$20 trigger GetResourceArea ( americanCratesArea , mat_cans ) < 6 do
15319: LD_INT 20
15321: PPUSH
15322: LD_INT 1
15324: PPUSH
15325: CALL_OW 287
15329: PUSH
15330: LD_INT 6
15332: LESS
15333: IFFALSE 15360
15335: GO 15337
15337: DISABLE
// begin enable ;
15338: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , americanCratesArea , true ) ;
15339: LD_INT 1
15341: PPUSH
15342: LD_INT 5
15344: PPUSH
15345: CALL_OW 12
15349: PPUSH
15350: LD_INT 20
15352: PPUSH
15353: LD_INT 1
15355: PPUSH
15356: CALL_OW 55
// end ; end_of_file
15360: END
// export function PrepareRussianFirstWaveAttack ; var i , tmp , un , veh ; begin
15361: LD_INT 0
15363: PPUSH
15364: PPUSH
15365: PPUSH
15366: PPUSH
15367: PPUSH
// uc_side := 3 ;
15368: LD_ADDR_OWVAR 20
15372: PUSH
15373: LD_INT 3
15375: ST_TO_ADDR
// uc_nation := 3 ;
15376: LD_ADDR_OWVAR 21
15380: PUSH
15381: LD_INT 3
15383: ST_TO_ADDR
// tmp := [ [ 184 , 144 , 5 ] , [ 191 , 147 , 5 ] , [ 202 , 151 , 4 ] , [ 210 , 152 , 4 ] ] ;
15384: LD_ADDR_VAR 0 3
15388: PUSH
15389: LD_INT 184
15391: PUSH
15392: LD_INT 144
15394: PUSH
15395: LD_INT 5
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: LIST
15402: PUSH
15403: LD_INT 191
15405: PUSH
15406: LD_INT 147
15408: PUSH
15409: LD_INT 5
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: LIST
15416: PUSH
15417: LD_INT 202
15419: PUSH
15420: LD_INT 151
15422: PUSH
15423: LD_INT 4
15425: PUSH
15426: EMPTY
15427: LIST
15428: LIST
15429: LIST
15430: PUSH
15431: LD_INT 210
15433: PUSH
15434: LD_INT 152
15436: PUSH
15437: LD_INT 4
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: LIST
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: ST_TO_ADDR
// for i := 1 to 3 do
15451: LD_ADDR_VAR 0 2
15455: PUSH
15456: DOUBLE
15457: LD_INT 1
15459: DEC
15460: ST_TO_ADDR
15461: LD_INT 3
15463: PUSH
15464: FOR_TO
15465: IFFALSE 15634
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_gun ] [ i mod 3 + 1 ] , 40 ) ;
15467: LD_INT 24
15469: PPUSH
15470: LD_INT 1
15472: PPUSH
15473: LD_INT 1
15475: PPUSH
15476: LD_INT 43
15478: PUSH
15479: LD_INT 44
15481: PUSH
15482: LD_INT 46
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: LIST
15489: PUSH
15490: LD_VAR 0 2
15494: PUSH
15495: LD_INT 3
15497: MOD
15498: PUSH
15499: LD_INT 1
15501: PLUS
15502: ARRAY
15503: PPUSH
15504: LD_INT 40
15506: PPUSH
15507: CALL 21375 0 5
// veh := CreateVehicle ;
15511: LD_ADDR_VAR 0 5
15515: PUSH
15516: CALL_OW 45
15520: ST_TO_ADDR
// SetDir ( veh , tmp [ i ] [ 3 ] ) ;
15521: LD_VAR 0 5
15525: PPUSH
15526: LD_VAR 0 3
15530: PUSH
15531: LD_VAR 0 2
15535: ARRAY
15536: PUSH
15537: LD_INT 3
15539: ARRAY
15540: PPUSH
15541: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
15545: LD_VAR 0 5
15549: PPUSH
15550: LD_VAR 0 3
15554: PUSH
15555: LD_VAR 0 2
15559: ARRAY
15560: PUSH
15561: LD_INT 1
15563: ARRAY
15564: PPUSH
15565: LD_VAR 0 3
15569: PUSH
15570: LD_VAR 0 2
15574: ARRAY
15575: PUSH
15576: LD_INT 2
15578: ARRAY
15579: PPUSH
15580: LD_INT 0
15582: PPUSH
15583: CALL_OW 48
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
15587: LD_INT 0
15589: PPUSH
15590: LD_INT 6
15592: PUSH
15593: LD_INT 7
15595: PUSH
15596: LD_INT 8
15598: PUSH
15599: LD_INT 8
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: PUSH
15608: LD_OWVAR 67
15612: ARRAY
15613: PPUSH
15614: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
15618: CALL_OW 44
15622: PPUSH
15623: LD_VAR 0 5
15627: PPUSH
15628: CALL_OW 52
// end ;
15632: GO 15464
15634: POP
15635: POP
// for i := 1 to 4 do
15636: LD_ADDR_VAR 0 2
15640: PUSH
15641: DOUBLE
15642: LD_INT 1
15644: DEC
15645: ST_TO_ADDR
15646: LD_INT 4
15648: PUSH
15649: FOR_TO
15650: IFFALSE 15716
// begin PrepareSoldier ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
15652: LD_INT 0
15654: PPUSH
15655: LD_INT 6
15657: PUSH
15658: LD_INT 7
15660: PUSH
15661: LD_INT 8
15663: PUSH
15664: LD_INT 8
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: PUSH
15673: LD_OWVAR 67
15677: ARRAY
15678: PPUSH
15679: CALL_OW 381
// un := CreateHuman ;
15683: LD_ADDR_VAR 0 4
15687: PUSH
15688: CALL_OW 44
15692: ST_TO_ADDR
// PlaceUnitXYR ( un , 185 , 145 , 6 , false ) ;
15693: LD_VAR 0 4
15697: PPUSH
15698: LD_INT 185
15700: PPUSH
15701: LD_INT 145
15703: PPUSH
15704: LD_INT 6
15706: PPUSH
15707: LD_INT 0
15709: PPUSH
15710: CALL_OW 50
// end ;
15714: GO 15649
15716: POP
15717: POP
// end ;
15718: LD_VAR 0 1
15722: RET
// export function PrepareRussianLastWaveAttack ; var i , veh ; begin
15723: LD_INT 0
15725: PPUSH
15726: PPUSH
15727: PPUSH
// uc_side := 3 ;
15728: LD_ADDR_OWVAR 20
15732: PUSH
15733: LD_INT 3
15735: ST_TO_ADDR
// if Difficulty > 1 then
15736: LD_OWVAR 67
15740: PUSH
15741: LD_INT 1
15743: GREATER
15744: IFFALSE 15906
// begin uc_nation := 0 ;
15746: LD_ADDR_OWVAR 21
15750: PUSH
15751: LD_INT 0
15753: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty + 1 ] do
15754: LD_ADDR_VAR 0 2
15758: PUSH
15759: DOUBLE
15760: LD_INT 1
15762: DEC
15763: ST_TO_ADDR
15764: LD_INT 4
15766: PUSH
15767: LD_INT 5
15769: PUSH
15770: LD_INT 6
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: LIST
15777: PUSH
15778: LD_OWVAR 67
15782: PUSH
15783: LD_INT 1
15785: PLUS
15786: ARRAY
15787: PUSH
15788: FOR_TO
15789: IFFALSE 15904
// begin hc_class := class_apeman_soldier ;
15791: LD_ADDR_OWVAR 28
15795: PUSH
15796: LD_INT 15
15798: ST_TO_ADDR
// hc_gallery :=  ;
15799: LD_ADDR_OWVAR 33
15803: PUSH
15804: LD_STRING 
15806: ST_TO_ADDR
// hc_name := [ Treci , Ivan , Yaromir , Nadzieia , Krasna , Piaty ] [ rand ( 1 , 6 ) ] ;
15807: LD_ADDR_OWVAR 26
15811: PUSH
15812: LD_STRING Treci
15814: PUSH
15815: LD_STRING Ivan
15817: PUSH
15818: LD_STRING Yaromir
15820: PUSH
15821: LD_STRING Nadzieia
15823: PUSH
15824: LD_STRING Krasna
15826: PUSH
15827: LD_STRING Piaty
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: PUSH
15838: LD_INT 1
15840: PPUSH
15841: LD_INT 6
15843: PPUSH
15844: CALL_OW 12
15848: ARRAY
15849: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 0 , 0 ] ;
15850: LD_ADDR_OWVAR 31
15854: PUSH
15855: LD_INT 5
15857: PUSH
15858: LD_INT 0
15860: PUSH
15861: LD_INT 0
15863: PUSH
15864: LD_INT 0
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: ST_TO_ADDR
// hc_sex := sex_male ;
15873: LD_ADDR_OWVAR 27
15877: PUSH
15878: LD_INT 1
15880: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 178 , 148 , 6 , false ) ;
15881: CALL_OW 44
15885: PPUSH
15886: LD_INT 178
15888: PPUSH
15889: LD_INT 148
15891: PPUSH
15892: LD_INT 6
15894: PPUSH
15895: LD_INT 0
15897: PPUSH
15898: CALL_OW 50
// end ;
15902: GO 15788
15904: POP
15905: POP
// end ; for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
15906: LD_ADDR_VAR 0 2
15910: PUSH
15911: DOUBLE
15912: LD_INT 1
15914: DEC
15915: ST_TO_ADDR
15916: LD_INT 2
15918: PUSH
15919: LD_INT 3
15921: PUSH
15922: LD_INT 4
15924: PUSH
15925: LD_INT 5
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: PUSH
15934: LD_OWVAR 67
15938: ARRAY
15939: PUSH
15940: FOR_TO
15941: IFFALSE 16108
// begin uc_nation := 3 ;
15943: LD_ADDR_OWVAR 21
15947: PUSH
15948: LD_INT 3
15950: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gatling_gun , ru_gun ] [ i mod 3 + 1 ] , 44 ) ;
15951: LD_INT 22
15953: PPUSH
15954: LD_INT 1
15956: PPUSH
15957: LD_INT 1
15959: PPUSH
15960: LD_INT 45
15962: PUSH
15963: LD_INT 43
15965: PUSH
15966: LD_INT 44
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: LIST
15973: PUSH
15974: LD_VAR 0 2
15978: PUSH
15979: LD_INT 3
15981: MOD
15982: PUSH
15983: LD_INT 1
15985: PLUS
15986: ARRAY
15987: PPUSH
15988: LD_INT 44
15990: PPUSH
15991: CALL 21375 0 5
// veh := CreateVehicle ;
15995: LD_ADDR_VAR 0 3
15999: PUSH
16000: CALL_OW 45
16004: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
16005: LD_VAR 0 3
16009: PPUSH
16010: LD_INT 4
16012: PPUSH
16013: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
16017: LD_VAR 0 3
16021: PPUSH
16022: LD_INT 1
16024: PPUSH
16025: LD_INT 0
16027: PPUSH
16028: CALL_OW 49
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
16032: LD_INT 0
16034: PPUSH
16035: LD_INT 6
16037: PUSH
16038: LD_INT 7
16040: PUSH
16041: LD_INT 8
16043: PUSH
16044: LD_INT 8
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: PUSH
16053: LD_OWVAR 67
16057: ARRAY
16058: PPUSH
16059: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
16063: CALL_OW 44
16067: PPUSH
16068: LD_VAR 0 3
16072: PPUSH
16073: CALL_OW 52
// AgressiveMove ( veh , [ [ 178 , 137 ] ] ) ;
16077: LD_VAR 0 3
16081: PPUSH
16082: LD_INT 178
16084: PUSH
16085: LD_INT 137
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PUSH
16092: EMPTY
16093: LIST
16094: PPUSH
16095: CALL 56830 0 2
// wait ( 0 0$2 ) ;
16099: LD_INT 70
16101: PPUSH
16102: CALL_OW 67
// end ;
16106: GO 15940
16108: POP
16109: POP
// end ;
16110: LD_VAR 0 1
16114: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i , tmp ;
16115: LD_INT 22
16117: PUSH
16118: LD_INT 3
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PUSH
16125: LD_INT 32
16127: PUSH
16128: LD_INT 1
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PPUSH
16139: CALL_OW 69
16143: IFFALSE 16231
16145: GO 16147
16147: DISABLE
16148: LD_INT 0
16150: PPUSH
16151: PPUSH
// begin enable ;
16152: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) ;
16153: LD_ADDR_VAR 0 2
16157: PUSH
16158: LD_INT 22
16160: PUSH
16161: LD_INT 3
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PUSH
16168: LD_INT 32
16170: PUSH
16171: LD_INT 1
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: PPUSH
16182: CALL_OW 69
16186: ST_TO_ADDR
// for i in tmp do
16187: LD_ADDR_VAR 0 1
16191: PUSH
16192: LD_VAR 0 2
16196: PUSH
16197: FOR_IN
16198: IFFALSE 16229
// if GetFuel ( i ) < 3 then
16200: LD_VAR 0 1
16204: PPUSH
16205: CALL_OW 261
16209: PUSH
16210: LD_INT 3
16212: LESS
16213: IFFALSE 16227
// SetFuel ( i , 3 ) ;
16215: LD_VAR 0 1
16219: PPUSH
16220: LD_INT 3
16222: PPUSH
16223: CALL_OW 240
16227: GO 16197
16229: POP
16230: POP
// end ;
16231: PPOPN 2
16233: END
// every 0 0$1 trigger russianAttack and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i , mech , tmp ;
16234: LD_EXP 8
16238: PUSH
16239: LD_INT 22
16241: PUSH
16242: LD_INT 3
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: PUSH
16249: LD_INT 21
16251: PUSH
16252: LD_INT 1
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: PPUSH
16263: CALL_OW 69
16267: AND
16268: IFFALSE 16532
16270: GO 16272
16272: DISABLE
16273: LD_INT 0
16275: PPUSH
16276: PPUSH
16277: PPUSH
// begin enable ;
16278: ENABLE
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] ] ) ;
16279: LD_ADDR_VAR 0 2
16283: PUSH
16284: LD_INT 22
16286: PUSH
16287: LD_INT 3
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: LD_INT 25
16296: PUSH
16297: LD_INT 3
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: LD_INT 3
16306: PUSH
16307: LD_INT 55
16309: PUSH
16310: EMPTY
16311: LIST
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: LIST
16321: PPUSH
16322: CALL_OW 69
16326: ST_TO_ADDR
// if mech then
16327: LD_VAR 0 2
16331: IFFALSE 16401
// for i in mech do
16333: LD_ADDR_VAR 0 1
16337: PUSH
16338: LD_VAR 0 2
16342: PUSH
16343: FOR_IN
16344: IFFALSE 16399
// begin if IsInArea ( i , escapeArea ) then
16346: LD_VAR 0 1
16350: PPUSH
16351: LD_INT 13
16353: PPUSH
16354: CALL_OW 308
16358: IFFALSE 16371
// RemoveUnit ( i ) else
16360: LD_VAR 0 1
16364: PPUSH
16365: CALL_OW 64
16369: GO 16397
// if IsOk ( i ) then
16371: LD_VAR 0 1
16375: PPUSH
16376: CALL_OW 302
16380: IFFALSE 16397
// ComMoveXY ( i , 196 , 155 ) ;
16382: LD_VAR 0 1
16386: PPUSH
16387: LD_INT 196
16389: PPUSH
16390: LD_INT 155
16392: PPUSH
16393: CALL_OW 111
// end ;
16397: GO 16343
16399: POP
16400: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_apeman_soldier ] , [ f_type , unit_vehicle ] ] , [ f_ok ] ] ) ;
16401: LD_ADDR_VAR 0 3
16405: PUSH
16406: LD_INT 22
16408: PUSH
16409: LD_INT 3
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PUSH
16416: LD_INT 2
16418: PUSH
16419: LD_INT 25
16421: PUSH
16422: LD_INT 1
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: PUSH
16429: LD_INT 25
16431: PUSH
16432: LD_INT 15
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: PUSH
16439: LD_INT 21
16441: PUSH
16442: LD_INT 2
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 50
16457: PUSH
16458: EMPTY
16459: LIST
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: LIST
16465: PPUSH
16466: CALL_OW 69
16470: ST_TO_ADDR
// if tmp then
16471: LD_VAR 0 3
16475: IFFALSE 16532
// AgressiveMove ( tmp , [ [ 171 , 106 ] , [ 145 , 69 ] , [ 132 , 38 ] , [ 126 , 15 ] ] ) ;
16477: LD_VAR 0 3
16481: PPUSH
16482: LD_INT 171
16484: PUSH
16485: LD_INT 106
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PUSH
16492: LD_INT 145
16494: PUSH
16495: LD_INT 69
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: PUSH
16502: LD_INT 132
16504: PUSH
16505: LD_INT 38
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PUSH
16512: LD_INT 126
16514: PUSH
16515: LD_INT 15
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: PPUSH
16528: CALL 56830 0 2
// end ; end_of_file
16532: PPOPN 3
16534: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16535: LD_INT 0
16537: PPUSH
16538: PPUSH
// if exist_mode then
16539: LD_VAR 0 2
16543: IFFALSE 16568
// unit := CreateCharacter ( prefix & ident ) else
16545: LD_ADDR_VAR 0 5
16549: PUSH
16550: LD_VAR 0 3
16554: PUSH
16555: LD_VAR 0 1
16559: STR
16560: PPUSH
16561: CALL_OW 34
16565: ST_TO_ADDR
16566: GO 16583
// unit := NewCharacter ( ident ) ;
16568: LD_ADDR_VAR 0 5
16572: PUSH
16573: LD_VAR 0 1
16577: PPUSH
16578: CALL_OW 25
16582: ST_TO_ADDR
// result := unit ;
16583: LD_ADDR_VAR 0 4
16587: PUSH
16588: LD_VAR 0 5
16592: ST_TO_ADDR
// end ;
16593: LD_VAR 0 4
16597: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16598: LD_INT 0
16600: PPUSH
16601: PPUSH
// if not side or not nation then
16602: LD_VAR 0 1
16606: NOT
16607: PUSH
16608: LD_VAR 0 2
16612: NOT
16613: OR
16614: IFFALSE 16618
// exit ;
16616: GO 17386
// case nation of nation_american :
16618: LD_VAR 0 2
16622: PUSH
16623: LD_INT 1
16625: DOUBLE
16626: EQUAL
16627: IFTRUE 16631
16629: GO 16845
16631: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
16632: LD_ADDR_VAR 0 4
16636: PUSH
16637: LD_INT 35
16639: PUSH
16640: LD_INT 45
16642: PUSH
16643: LD_INT 46
16645: PUSH
16646: LD_INT 47
16648: PUSH
16649: LD_INT 82
16651: PUSH
16652: LD_INT 83
16654: PUSH
16655: LD_INT 84
16657: PUSH
16658: LD_INT 85
16660: PUSH
16661: LD_INT 86
16663: PUSH
16664: LD_INT 1
16666: PUSH
16667: LD_INT 2
16669: PUSH
16670: LD_INT 6
16672: PUSH
16673: LD_INT 15
16675: PUSH
16676: LD_INT 16
16678: PUSH
16679: LD_INT 7
16681: PUSH
16682: LD_INT 12
16684: PUSH
16685: LD_INT 13
16687: PUSH
16688: LD_INT 10
16690: PUSH
16691: LD_INT 14
16693: PUSH
16694: LD_INT 20
16696: PUSH
16697: LD_INT 21
16699: PUSH
16700: LD_INT 22
16702: PUSH
16703: LD_INT 25
16705: PUSH
16706: LD_INT 32
16708: PUSH
16709: LD_INT 27
16711: PUSH
16712: LD_INT 36
16714: PUSH
16715: LD_INT 69
16717: PUSH
16718: LD_INT 39
16720: PUSH
16721: LD_INT 34
16723: PUSH
16724: LD_INT 40
16726: PUSH
16727: LD_INT 48
16729: PUSH
16730: LD_INT 49
16732: PUSH
16733: LD_INT 50
16735: PUSH
16736: LD_INT 51
16738: PUSH
16739: LD_INT 52
16741: PUSH
16742: LD_INT 53
16744: PUSH
16745: LD_INT 54
16747: PUSH
16748: LD_INT 55
16750: PUSH
16751: LD_INT 56
16753: PUSH
16754: LD_INT 57
16756: PUSH
16757: LD_INT 58
16759: PUSH
16760: LD_INT 59
16762: PUSH
16763: LD_INT 60
16765: PUSH
16766: LD_INT 61
16768: PUSH
16769: LD_INT 62
16771: PUSH
16772: LD_INT 80
16774: PUSH
16775: LD_INT 82
16777: PUSH
16778: LD_INT 83
16780: PUSH
16781: LD_INT 84
16783: PUSH
16784: LD_INT 85
16786: PUSH
16787: LD_INT 86
16789: PUSH
16790: EMPTY
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: ST_TO_ADDR
16843: GO 17310
16845: LD_INT 2
16847: DOUBLE
16848: EQUAL
16849: IFTRUE 16853
16851: GO 17079
16853: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
16854: LD_ADDR_VAR 0 4
16858: PUSH
16859: LD_INT 35
16861: PUSH
16862: LD_INT 45
16864: PUSH
16865: LD_INT 46
16867: PUSH
16868: LD_INT 47
16870: PUSH
16871: LD_INT 82
16873: PUSH
16874: LD_INT 83
16876: PUSH
16877: LD_INT 84
16879: PUSH
16880: LD_INT 85
16882: PUSH
16883: LD_INT 87
16885: PUSH
16886: LD_INT 70
16888: PUSH
16889: LD_INT 1
16891: PUSH
16892: LD_INT 11
16894: PUSH
16895: LD_INT 3
16897: PUSH
16898: LD_INT 4
16900: PUSH
16901: LD_INT 5
16903: PUSH
16904: LD_INT 6
16906: PUSH
16907: LD_INT 15
16909: PUSH
16910: LD_INT 18
16912: PUSH
16913: LD_INT 7
16915: PUSH
16916: LD_INT 17
16918: PUSH
16919: LD_INT 8
16921: PUSH
16922: LD_INT 20
16924: PUSH
16925: LD_INT 21
16927: PUSH
16928: LD_INT 22
16930: PUSH
16931: LD_INT 72
16933: PUSH
16934: LD_INT 26
16936: PUSH
16937: LD_INT 69
16939: PUSH
16940: LD_INT 39
16942: PUSH
16943: LD_INT 40
16945: PUSH
16946: LD_INT 41
16948: PUSH
16949: LD_INT 42
16951: PUSH
16952: LD_INT 43
16954: PUSH
16955: LD_INT 48
16957: PUSH
16958: LD_INT 49
16960: PUSH
16961: LD_INT 50
16963: PUSH
16964: LD_INT 51
16966: PUSH
16967: LD_INT 52
16969: PUSH
16970: LD_INT 53
16972: PUSH
16973: LD_INT 54
16975: PUSH
16976: LD_INT 55
16978: PUSH
16979: LD_INT 56
16981: PUSH
16982: LD_INT 60
16984: PUSH
16985: LD_INT 61
16987: PUSH
16988: LD_INT 62
16990: PUSH
16991: LD_INT 66
16993: PUSH
16994: LD_INT 67
16996: PUSH
16997: LD_INT 68
16999: PUSH
17000: LD_INT 81
17002: PUSH
17003: LD_INT 82
17005: PUSH
17006: LD_INT 83
17008: PUSH
17009: LD_INT 84
17011: PUSH
17012: LD_INT 85
17014: PUSH
17015: LD_INT 87
17017: PUSH
17018: LD_INT 88
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: ST_TO_ADDR
17077: GO 17310
17079: LD_INT 3
17081: DOUBLE
17082: EQUAL
17083: IFTRUE 17087
17085: GO 17309
17087: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17088: LD_ADDR_VAR 0 4
17092: PUSH
17093: LD_INT 46
17095: PUSH
17096: LD_INT 47
17098: PUSH
17099: LD_INT 1
17101: PUSH
17102: LD_INT 2
17104: PUSH
17105: LD_INT 82
17107: PUSH
17108: LD_INT 83
17110: PUSH
17111: LD_INT 84
17113: PUSH
17114: LD_INT 85
17116: PUSH
17117: LD_INT 86
17119: PUSH
17120: LD_INT 11
17122: PUSH
17123: LD_INT 9
17125: PUSH
17126: LD_INT 20
17128: PUSH
17129: LD_INT 19
17131: PUSH
17132: LD_INT 21
17134: PUSH
17135: LD_INT 24
17137: PUSH
17138: LD_INT 22
17140: PUSH
17141: LD_INT 25
17143: PUSH
17144: LD_INT 28
17146: PUSH
17147: LD_INT 29
17149: PUSH
17150: LD_INT 30
17152: PUSH
17153: LD_INT 31
17155: PUSH
17156: LD_INT 37
17158: PUSH
17159: LD_INT 38
17161: PUSH
17162: LD_INT 32
17164: PUSH
17165: LD_INT 27
17167: PUSH
17168: LD_INT 33
17170: PUSH
17171: LD_INT 69
17173: PUSH
17174: LD_INT 39
17176: PUSH
17177: LD_INT 34
17179: PUSH
17180: LD_INT 40
17182: PUSH
17183: LD_INT 71
17185: PUSH
17186: LD_INT 23
17188: PUSH
17189: LD_INT 44
17191: PUSH
17192: LD_INT 48
17194: PUSH
17195: LD_INT 49
17197: PUSH
17198: LD_INT 50
17200: PUSH
17201: LD_INT 51
17203: PUSH
17204: LD_INT 52
17206: PUSH
17207: LD_INT 53
17209: PUSH
17210: LD_INT 54
17212: PUSH
17213: LD_INT 55
17215: PUSH
17216: LD_INT 56
17218: PUSH
17219: LD_INT 57
17221: PUSH
17222: LD_INT 58
17224: PUSH
17225: LD_INT 59
17227: PUSH
17228: LD_INT 63
17230: PUSH
17231: LD_INT 64
17233: PUSH
17234: LD_INT 65
17236: PUSH
17237: LD_INT 82
17239: PUSH
17240: LD_INT 83
17242: PUSH
17243: LD_INT 84
17245: PUSH
17246: LD_INT 85
17248: PUSH
17249: LD_INT 86
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: ST_TO_ADDR
17307: GO 17310
17309: POP
// if state > - 1 and state < 3 then
17310: LD_VAR 0 3
17314: PUSH
17315: LD_INT 1
17317: NEG
17318: GREATER
17319: PUSH
17320: LD_VAR 0 3
17324: PUSH
17325: LD_INT 3
17327: LESS
17328: AND
17329: IFFALSE 17386
// for i in result do
17331: LD_ADDR_VAR 0 5
17335: PUSH
17336: LD_VAR 0 4
17340: PUSH
17341: FOR_IN
17342: IFFALSE 17384
// if GetTech ( i , side ) <> state then
17344: LD_VAR 0 5
17348: PPUSH
17349: LD_VAR 0 1
17353: PPUSH
17354: CALL_OW 321
17358: PUSH
17359: LD_VAR 0 3
17363: NONEQUAL
17364: IFFALSE 17382
// result := result diff i ;
17366: LD_ADDR_VAR 0 4
17370: PUSH
17371: LD_VAR 0 4
17375: PUSH
17376: LD_VAR 0 5
17380: DIFF
17381: ST_TO_ADDR
17382: GO 17341
17384: POP
17385: POP
// end ;
17386: LD_VAR 0 4
17390: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17391: LD_INT 0
17393: PPUSH
17394: PPUSH
17395: PPUSH
// result := true ;
17396: LD_ADDR_VAR 0 3
17400: PUSH
17401: LD_INT 1
17403: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17404: LD_ADDR_VAR 0 5
17408: PUSH
17409: LD_VAR 0 2
17413: PPUSH
17414: CALL_OW 480
17418: ST_TO_ADDR
// if not tmp then
17419: LD_VAR 0 5
17423: NOT
17424: IFFALSE 17428
// exit ;
17426: GO 17477
// for i in tmp do
17428: LD_ADDR_VAR 0 4
17432: PUSH
17433: LD_VAR 0 5
17437: PUSH
17438: FOR_IN
17439: IFFALSE 17475
// if GetTech ( i , side ) <> state_researched then
17441: LD_VAR 0 4
17445: PPUSH
17446: LD_VAR 0 1
17450: PPUSH
17451: CALL_OW 321
17455: PUSH
17456: LD_INT 2
17458: NONEQUAL
17459: IFFALSE 17473
// begin result := false ;
17461: LD_ADDR_VAR 0 3
17465: PUSH
17466: LD_INT 0
17468: ST_TO_ADDR
// exit ;
17469: POP
17470: POP
17471: GO 17477
// end ;
17473: GO 17438
17475: POP
17476: POP
// end ;
17477: LD_VAR 0 3
17481: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17482: LD_INT 0
17484: PPUSH
17485: PPUSH
17486: PPUSH
17487: PPUSH
17488: PPUSH
17489: PPUSH
17490: PPUSH
17491: PPUSH
17492: PPUSH
17493: PPUSH
17494: PPUSH
17495: PPUSH
17496: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17497: LD_VAR 0 1
17501: NOT
17502: PUSH
17503: LD_VAR 0 1
17507: PPUSH
17508: CALL_OW 257
17512: PUSH
17513: LD_INT 9
17515: NONEQUAL
17516: OR
17517: IFFALSE 17521
// exit ;
17519: GO 18094
// side := GetSide ( unit ) ;
17521: LD_ADDR_VAR 0 9
17525: PUSH
17526: LD_VAR 0 1
17530: PPUSH
17531: CALL_OW 255
17535: ST_TO_ADDR
// tech_space := tech_spacanom ;
17536: LD_ADDR_VAR 0 12
17540: PUSH
17541: LD_INT 29
17543: ST_TO_ADDR
// tech_time := tech_taurad ;
17544: LD_ADDR_VAR 0 13
17548: PUSH
17549: LD_INT 28
17551: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17552: LD_ADDR_VAR 0 11
17556: PUSH
17557: LD_VAR 0 1
17561: PPUSH
17562: CALL_OW 310
17566: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17567: LD_VAR 0 11
17571: PPUSH
17572: CALL_OW 247
17576: PUSH
17577: LD_INT 2
17579: EQUAL
17580: IFFALSE 17584
// exit ;
17582: GO 18094
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17584: LD_ADDR_VAR 0 8
17588: PUSH
17589: LD_INT 81
17591: PUSH
17592: LD_VAR 0 9
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PUSH
17601: LD_INT 3
17603: PUSH
17604: LD_INT 21
17606: PUSH
17607: LD_INT 3
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: PPUSH
17622: CALL_OW 69
17626: ST_TO_ADDR
// if not tmp then
17627: LD_VAR 0 8
17631: NOT
17632: IFFALSE 17636
// exit ;
17634: GO 18094
// if in_unit then
17636: LD_VAR 0 11
17640: IFFALSE 17664
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
17642: LD_ADDR_VAR 0 10
17646: PUSH
17647: LD_VAR 0 8
17651: PPUSH
17652: LD_VAR 0 11
17656: PPUSH
17657: CALL_OW 74
17661: ST_TO_ADDR
17662: GO 17684
// enemy := NearestUnitToUnit ( tmp , unit ) ;
17664: LD_ADDR_VAR 0 10
17668: PUSH
17669: LD_VAR 0 8
17673: PPUSH
17674: LD_VAR 0 1
17678: PPUSH
17679: CALL_OW 74
17683: ST_TO_ADDR
// if not enemy then
17684: LD_VAR 0 10
17688: NOT
17689: IFFALSE 17693
// exit ;
17691: GO 18094
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
17693: LD_VAR 0 11
17697: PUSH
17698: LD_VAR 0 11
17702: PPUSH
17703: LD_VAR 0 10
17707: PPUSH
17708: CALL_OW 296
17712: PUSH
17713: LD_INT 13
17715: GREATER
17716: AND
17717: PUSH
17718: LD_VAR 0 1
17722: PPUSH
17723: LD_VAR 0 10
17727: PPUSH
17728: CALL_OW 296
17732: PUSH
17733: LD_INT 12
17735: GREATER
17736: OR
17737: IFFALSE 17741
// exit ;
17739: GO 18094
// missile := [ 1 ] ;
17741: LD_ADDR_VAR 0 14
17745: PUSH
17746: LD_INT 1
17748: PUSH
17749: EMPTY
17750: LIST
17751: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17752: LD_VAR 0 9
17756: PPUSH
17757: LD_VAR 0 12
17761: PPUSH
17762: CALL_OW 325
17766: IFFALSE 17795
// missile := Replace ( missile , missile + 1 , 2 ) ;
17768: LD_ADDR_VAR 0 14
17772: PUSH
17773: LD_VAR 0 14
17777: PPUSH
17778: LD_VAR 0 14
17782: PUSH
17783: LD_INT 1
17785: PLUS
17786: PPUSH
17787: LD_INT 2
17789: PPUSH
17790: CALL_OW 1
17794: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17795: LD_VAR 0 9
17799: PPUSH
17800: LD_VAR 0 13
17804: PPUSH
17805: CALL_OW 325
17809: PUSH
17810: LD_VAR 0 10
17814: PPUSH
17815: CALL_OW 255
17819: PPUSH
17820: LD_VAR 0 13
17824: PPUSH
17825: CALL_OW 325
17829: NOT
17830: AND
17831: IFFALSE 17860
// missile := Replace ( missile , missile + 1 , 3 ) ;
17833: LD_ADDR_VAR 0 14
17837: PUSH
17838: LD_VAR 0 14
17842: PPUSH
17843: LD_VAR 0 14
17847: PUSH
17848: LD_INT 1
17850: PLUS
17851: PPUSH
17852: LD_INT 3
17854: PPUSH
17855: CALL_OW 1
17859: ST_TO_ADDR
// if missile < 2 then
17860: LD_VAR 0 14
17864: PUSH
17865: LD_INT 2
17867: LESS
17868: IFFALSE 17872
// exit ;
17870: GO 18094
// x := GetX ( enemy ) ;
17872: LD_ADDR_VAR 0 4
17876: PUSH
17877: LD_VAR 0 10
17881: PPUSH
17882: CALL_OW 250
17886: ST_TO_ADDR
// y := GetY ( enemy ) ;
17887: LD_ADDR_VAR 0 5
17891: PUSH
17892: LD_VAR 0 10
17896: PPUSH
17897: CALL_OW 251
17901: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17902: LD_ADDR_VAR 0 6
17906: PUSH
17907: LD_VAR 0 4
17911: PUSH
17912: LD_INT 1
17914: NEG
17915: PPUSH
17916: LD_INT 1
17918: PPUSH
17919: CALL_OW 12
17923: PLUS
17924: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17925: LD_ADDR_VAR 0 7
17929: PUSH
17930: LD_VAR 0 5
17934: PUSH
17935: LD_INT 1
17937: NEG
17938: PPUSH
17939: LD_INT 1
17941: PPUSH
17942: CALL_OW 12
17946: PLUS
17947: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17948: LD_VAR 0 6
17952: PPUSH
17953: LD_VAR 0 7
17957: PPUSH
17958: CALL_OW 488
17962: NOT
17963: IFFALSE 17985
// begin _x := x ;
17965: LD_ADDR_VAR 0 6
17969: PUSH
17970: LD_VAR 0 4
17974: ST_TO_ADDR
// _y := y ;
17975: LD_ADDR_VAR 0 7
17979: PUSH
17980: LD_VAR 0 5
17984: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17985: LD_ADDR_VAR 0 3
17989: PUSH
17990: LD_INT 1
17992: PPUSH
17993: LD_VAR 0 14
17997: PPUSH
17998: CALL_OW 12
18002: ST_TO_ADDR
// case i of 1 :
18003: LD_VAR 0 3
18007: PUSH
18008: LD_INT 1
18010: DOUBLE
18011: EQUAL
18012: IFTRUE 18016
18014: GO 18033
18016: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18017: LD_VAR 0 1
18021: PPUSH
18022: LD_VAR 0 10
18026: PPUSH
18027: CALL_OW 115
18031: GO 18094
18033: LD_INT 2
18035: DOUBLE
18036: EQUAL
18037: IFTRUE 18041
18039: GO 18063
18041: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18042: LD_VAR 0 1
18046: PPUSH
18047: LD_VAR 0 6
18051: PPUSH
18052: LD_VAR 0 7
18056: PPUSH
18057: CALL_OW 153
18061: GO 18094
18063: LD_INT 3
18065: DOUBLE
18066: EQUAL
18067: IFTRUE 18071
18069: GO 18093
18071: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18072: LD_VAR 0 1
18076: PPUSH
18077: LD_VAR 0 6
18081: PPUSH
18082: LD_VAR 0 7
18086: PPUSH
18087: CALL_OW 154
18091: GO 18094
18093: POP
// end ;
18094: LD_VAR 0 2
18098: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18099: LD_INT 0
18101: PPUSH
18102: PPUSH
18103: PPUSH
18104: PPUSH
18105: PPUSH
18106: PPUSH
// if not unit or not building then
18107: LD_VAR 0 1
18111: NOT
18112: PUSH
18113: LD_VAR 0 2
18117: NOT
18118: OR
18119: IFFALSE 18123
// exit ;
18121: GO 18281
// x := GetX ( building ) ;
18123: LD_ADDR_VAR 0 5
18127: PUSH
18128: LD_VAR 0 2
18132: PPUSH
18133: CALL_OW 250
18137: ST_TO_ADDR
// y := GetY ( building ) ;
18138: LD_ADDR_VAR 0 6
18142: PUSH
18143: LD_VAR 0 2
18147: PPUSH
18148: CALL_OW 251
18152: ST_TO_ADDR
// for i = 0 to 5 do
18153: LD_ADDR_VAR 0 4
18157: PUSH
18158: DOUBLE
18159: LD_INT 0
18161: DEC
18162: ST_TO_ADDR
18163: LD_INT 5
18165: PUSH
18166: FOR_TO
18167: IFFALSE 18279
// begin _x := ShiftX ( x , i , 3 ) ;
18169: LD_ADDR_VAR 0 7
18173: PUSH
18174: LD_VAR 0 5
18178: PPUSH
18179: LD_VAR 0 4
18183: PPUSH
18184: LD_INT 3
18186: PPUSH
18187: CALL_OW 272
18191: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18192: LD_ADDR_VAR 0 8
18196: PUSH
18197: LD_VAR 0 6
18201: PPUSH
18202: LD_VAR 0 4
18206: PPUSH
18207: LD_INT 3
18209: PPUSH
18210: CALL_OW 273
18214: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18215: LD_VAR 0 7
18219: PPUSH
18220: LD_VAR 0 8
18224: PPUSH
18225: CALL_OW 488
18229: NOT
18230: IFFALSE 18234
// continue ;
18232: GO 18166
// if HexInfo ( _x , _y ) = 0 then
18234: LD_VAR 0 7
18238: PPUSH
18239: LD_VAR 0 8
18243: PPUSH
18244: CALL_OW 428
18248: PUSH
18249: LD_INT 0
18251: EQUAL
18252: IFFALSE 18277
// begin ComMoveXY ( unit , _x , _y ) ;
18254: LD_VAR 0 1
18258: PPUSH
18259: LD_VAR 0 7
18263: PPUSH
18264: LD_VAR 0 8
18268: PPUSH
18269: CALL_OW 111
// exit ;
18273: POP
18274: POP
18275: GO 18281
// end ; end ;
18277: GO 18166
18279: POP
18280: POP
// end ;
18281: LD_VAR 0 3
18285: RET
// export function ScanBase ( side , base_area ) ; begin
18286: LD_INT 0
18288: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18289: LD_ADDR_VAR 0 3
18293: PUSH
18294: LD_VAR 0 2
18298: PPUSH
18299: LD_INT 81
18301: PUSH
18302: LD_VAR 0 1
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: PPUSH
18311: CALL_OW 70
18315: ST_TO_ADDR
// end ;
18316: LD_VAR 0 3
18320: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18321: LD_INT 0
18323: PPUSH
18324: PPUSH
18325: PPUSH
18326: PPUSH
// result := false ;
18327: LD_ADDR_VAR 0 2
18331: PUSH
18332: LD_INT 0
18334: ST_TO_ADDR
// side := GetSide ( unit ) ;
18335: LD_ADDR_VAR 0 3
18339: PUSH
18340: LD_VAR 0 1
18344: PPUSH
18345: CALL_OW 255
18349: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18350: LD_ADDR_VAR 0 4
18354: PUSH
18355: LD_VAR 0 1
18359: PPUSH
18360: CALL_OW 248
18364: ST_TO_ADDR
// case nat of 1 :
18365: LD_VAR 0 4
18369: PUSH
18370: LD_INT 1
18372: DOUBLE
18373: EQUAL
18374: IFTRUE 18378
18376: GO 18389
18378: POP
// tech := tech_lassight ; 2 :
18379: LD_ADDR_VAR 0 5
18383: PUSH
18384: LD_INT 12
18386: ST_TO_ADDR
18387: GO 18428
18389: LD_INT 2
18391: DOUBLE
18392: EQUAL
18393: IFTRUE 18397
18395: GO 18408
18397: POP
// tech := tech_mortar ; 3 :
18398: LD_ADDR_VAR 0 5
18402: PUSH
18403: LD_INT 41
18405: ST_TO_ADDR
18406: GO 18428
18408: LD_INT 3
18410: DOUBLE
18411: EQUAL
18412: IFTRUE 18416
18414: GO 18427
18416: POP
// tech := tech_bazooka ; end ;
18417: LD_ADDR_VAR 0 5
18421: PUSH
18422: LD_INT 44
18424: ST_TO_ADDR
18425: GO 18428
18427: POP
// if Researched ( side , tech ) then
18428: LD_VAR 0 3
18432: PPUSH
18433: LD_VAR 0 5
18437: PPUSH
18438: CALL_OW 325
18442: IFFALSE 18469
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18444: LD_ADDR_VAR 0 2
18448: PUSH
18449: LD_INT 5
18451: PUSH
18452: LD_INT 8
18454: PUSH
18455: LD_INT 9
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: LIST
18462: PUSH
18463: LD_VAR 0 4
18467: ARRAY
18468: ST_TO_ADDR
// end ;
18469: LD_VAR 0 2
18473: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18474: LD_INT 0
18476: PPUSH
18477: PPUSH
18478: PPUSH
// if not mines then
18479: LD_VAR 0 2
18483: NOT
18484: IFFALSE 18488
// exit ;
18486: GO 18632
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18488: LD_ADDR_VAR 0 5
18492: PUSH
18493: LD_INT 81
18495: PUSH
18496: LD_VAR 0 1
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: LD_INT 3
18507: PUSH
18508: LD_INT 21
18510: PUSH
18511: LD_INT 3
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PPUSH
18526: CALL_OW 69
18530: ST_TO_ADDR
// for i in mines do
18531: LD_ADDR_VAR 0 4
18535: PUSH
18536: LD_VAR 0 2
18540: PUSH
18541: FOR_IN
18542: IFFALSE 18630
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18544: LD_VAR 0 4
18548: PUSH
18549: LD_INT 1
18551: ARRAY
18552: PPUSH
18553: LD_VAR 0 4
18557: PUSH
18558: LD_INT 2
18560: ARRAY
18561: PPUSH
18562: CALL_OW 458
18566: NOT
18567: IFFALSE 18571
// continue ;
18569: GO 18541
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18571: LD_VAR 0 4
18575: PUSH
18576: LD_INT 1
18578: ARRAY
18579: PPUSH
18580: LD_VAR 0 4
18584: PUSH
18585: LD_INT 2
18587: ARRAY
18588: PPUSH
18589: CALL_OW 428
18593: PUSH
18594: LD_VAR 0 5
18598: IN
18599: IFFALSE 18628
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18601: LD_VAR 0 4
18605: PUSH
18606: LD_INT 1
18608: ARRAY
18609: PPUSH
18610: LD_VAR 0 4
18614: PUSH
18615: LD_INT 2
18617: ARRAY
18618: PPUSH
18619: LD_VAR 0 1
18623: PPUSH
18624: CALL_OW 456
// end ;
18628: GO 18541
18630: POP
18631: POP
// end ;
18632: LD_VAR 0 3
18636: RET
// export function Count ( array ) ; begin
18637: LD_INT 0
18639: PPUSH
// result := array + 0 ;
18640: LD_ADDR_VAR 0 2
18644: PUSH
18645: LD_VAR 0 1
18649: PUSH
18650: LD_INT 0
18652: PLUS
18653: ST_TO_ADDR
// end ;
18654: LD_VAR 0 2
18658: RET
// export function IsEmpty ( building ) ; begin
18659: LD_INT 0
18661: PPUSH
// if not building then
18662: LD_VAR 0 1
18666: NOT
18667: IFFALSE 18671
// exit ;
18669: GO 18714
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
18671: LD_ADDR_VAR 0 2
18675: PUSH
18676: LD_VAR 0 1
18680: PUSH
18681: LD_INT 22
18683: PUSH
18684: LD_VAR 0 1
18688: PPUSH
18689: CALL_OW 255
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: LD_INT 58
18700: PUSH
18701: EMPTY
18702: LIST
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PPUSH
18708: CALL_OW 69
18712: IN
18713: ST_TO_ADDR
// end ;
18714: LD_VAR 0 2
18718: RET
// export function IsNotFull ( building ) ; var places ; begin
18719: LD_INT 0
18721: PPUSH
18722: PPUSH
// if not building then
18723: LD_VAR 0 1
18727: NOT
18728: IFFALSE 18732
// exit ;
18730: GO 18760
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
18732: LD_ADDR_VAR 0 2
18736: PUSH
18737: LD_VAR 0 1
18741: PPUSH
18742: LD_INT 3
18744: PUSH
18745: LD_INT 62
18747: PUSH
18748: EMPTY
18749: LIST
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PPUSH
18755: CALL_OW 72
18759: ST_TO_ADDR
// end ;
18760: LD_VAR 0 2
18764: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18765: LD_INT 0
18767: PPUSH
18768: PPUSH
18769: PPUSH
18770: PPUSH
// tmp := [ ] ;
18771: LD_ADDR_VAR 0 3
18775: PUSH
18776: EMPTY
18777: ST_TO_ADDR
// list := [ ] ;
18778: LD_ADDR_VAR 0 5
18782: PUSH
18783: EMPTY
18784: ST_TO_ADDR
// for i = 16 to 25 do
18785: LD_ADDR_VAR 0 4
18789: PUSH
18790: DOUBLE
18791: LD_INT 16
18793: DEC
18794: ST_TO_ADDR
18795: LD_INT 25
18797: PUSH
18798: FOR_TO
18799: IFFALSE 18872
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18801: LD_ADDR_VAR 0 3
18805: PUSH
18806: LD_VAR 0 3
18810: PUSH
18811: LD_INT 22
18813: PUSH
18814: LD_VAR 0 1
18818: PPUSH
18819: CALL_OW 255
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: PUSH
18828: LD_INT 91
18830: PUSH
18831: LD_VAR 0 1
18835: PUSH
18836: LD_INT 6
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 30
18846: PUSH
18847: LD_VAR 0 4
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: LIST
18860: PUSH
18861: EMPTY
18862: LIST
18863: PPUSH
18864: CALL_OW 69
18868: ADD
18869: ST_TO_ADDR
18870: GO 18798
18872: POP
18873: POP
// for i = 1 to tmp do
18874: LD_ADDR_VAR 0 4
18878: PUSH
18879: DOUBLE
18880: LD_INT 1
18882: DEC
18883: ST_TO_ADDR
18884: LD_VAR 0 3
18888: PUSH
18889: FOR_TO
18890: IFFALSE 18978
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18892: LD_ADDR_VAR 0 5
18896: PUSH
18897: LD_VAR 0 5
18901: PUSH
18902: LD_VAR 0 3
18906: PUSH
18907: LD_VAR 0 4
18911: ARRAY
18912: PPUSH
18913: CALL_OW 266
18917: PUSH
18918: LD_VAR 0 3
18922: PUSH
18923: LD_VAR 0 4
18927: ARRAY
18928: PPUSH
18929: CALL_OW 250
18933: PUSH
18934: LD_VAR 0 3
18938: PUSH
18939: LD_VAR 0 4
18943: ARRAY
18944: PPUSH
18945: CALL_OW 251
18949: PUSH
18950: LD_VAR 0 3
18954: PUSH
18955: LD_VAR 0 4
18959: ARRAY
18960: PPUSH
18961: CALL_OW 254
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: PUSH
18972: EMPTY
18973: LIST
18974: ADD
18975: ST_TO_ADDR
18976: GO 18889
18978: POP
18979: POP
// result := list ;
18980: LD_ADDR_VAR 0 2
18984: PUSH
18985: LD_VAR 0 5
18989: ST_TO_ADDR
// end ;
18990: LD_VAR 0 2
18994: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18995: LD_INT 0
18997: PPUSH
18998: PPUSH
18999: PPUSH
19000: PPUSH
19001: PPUSH
19002: PPUSH
19003: PPUSH
// if not factory then
19004: LD_VAR 0 1
19008: NOT
19009: IFFALSE 19013
// exit ;
19011: GO 19606
// if control = control_apeman then
19013: LD_VAR 0 4
19017: PUSH
19018: LD_INT 5
19020: EQUAL
19021: IFFALSE 19130
// begin tmp := UnitsInside ( factory ) ;
19023: LD_ADDR_VAR 0 8
19027: PUSH
19028: LD_VAR 0 1
19032: PPUSH
19033: CALL_OW 313
19037: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19038: LD_VAR 0 8
19042: PPUSH
19043: LD_INT 25
19045: PUSH
19046: LD_INT 12
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PPUSH
19053: CALL_OW 72
19057: NOT
19058: IFFALSE 19068
// control := control_manual ;
19060: LD_ADDR_VAR 0 4
19064: PUSH
19065: LD_INT 1
19067: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19068: LD_ADDR_VAR 0 8
19072: PUSH
19073: LD_VAR 0 1
19077: PPUSH
19078: CALL 18765 0 1
19082: ST_TO_ADDR
// if tmp then
19083: LD_VAR 0 8
19087: IFFALSE 19130
// begin for i in tmp do
19089: LD_ADDR_VAR 0 7
19093: PUSH
19094: LD_VAR 0 8
19098: PUSH
19099: FOR_IN
19100: IFFALSE 19128
// if i [ 1 ] = b_ext_radio then
19102: LD_VAR 0 7
19106: PUSH
19107: LD_INT 1
19109: ARRAY
19110: PUSH
19111: LD_INT 22
19113: EQUAL
19114: IFFALSE 19126
// begin control := control_remote ;
19116: LD_ADDR_VAR 0 4
19120: PUSH
19121: LD_INT 2
19123: ST_TO_ADDR
// break ;
19124: GO 19128
// end ;
19126: GO 19099
19128: POP
19129: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19130: LD_VAR 0 1
19134: PPUSH
19135: LD_VAR 0 2
19139: PPUSH
19140: LD_VAR 0 3
19144: PPUSH
19145: LD_VAR 0 4
19149: PPUSH
19150: LD_VAR 0 5
19154: PPUSH
19155: CALL_OW 448
19159: IFFALSE 19194
// begin result := [ chassis , engine , control , weapon ] ;
19161: LD_ADDR_VAR 0 6
19165: PUSH
19166: LD_VAR 0 2
19170: PUSH
19171: LD_VAR 0 3
19175: PUSH
19176: LD_VAR 0 4
19180: PUSH
19181: LD_VAR 0 5
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: ST_TO_ADDR
// exit ;
19192: GO 19606
// end ; _chassis := AvailableChassisList ( factory ) ;
19194: LD_ADDR_VAR 0 9
19198: PUSH
19199: LD_VAR 0 1
19203: PPUSH
19204: CALL_OW 475
19208: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19209: LD_ADDR_VAR 0 11
19213: PUSH
19214: LD_VAR 0 1
19218: PPUSH
19219: CALL_OW 476
19223: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19224: LD_ADDR_VAR 0 12
19228: PUSH
19229: LD_VAR 0 1
19233: PPUSH
19234: CALL_OW 477
19238: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19239: LD_ADDR_VAR 0 10
19243: PUSH
19244: LD_VAR 0 1
19248: PPUSH
19249: CALL_OW 478
19253: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19254: LD_VAR 0 9
19258: NOT
19259: PUSH
19260: LD_VAR 0 11
19264: NOT
19265: OR
19266: PUSH
19267: LD_VAR 0 12
19271: NOT
19272: OR
19273: PUSH
19274: LD_VAR 0 10
19278: NOT
19279: OR
19280: IFFALSE 19315
// begin result := [ chassis , engine , control , weapon ] ;
19282: LD_ADDR_VAR 0 6
19286: PUSH
19287: LD_VAR 0 2
19291: PUSH
19292: LD_VAR 0 3
19296: PUSH
19297: LD_VAR 0 4
19301: PUSH
19302: LD_VAR 0 5
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: ST_TO_ADDR
// exit ;
19313: GO 19606
// end ; if not chassis in _chassis then
19315: LD_VAR 0 2
19319: PUSH
19320: LD_VAR 0 9
19324: IN
19325: NOT
19326: IFFALSE 19352
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19328: LD_ADDR_VAR 0 2
19332: PUSH
19333: LD_VAR 0 9
19337: PUSH
19338: LD_INT 1
19340: PPUSH
19341: LD_VAR 0 9
19345: PPUSH
19346: CALL_OW 12
19350: ARRAY
19351: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19352: LD_VAR 0 2
19356: PPUSH
19357: LD_VAR 0 3
19361: PPUSH
19362: CALL 19611 0 2
19366: NOT
19367: IFFALSE 19426
// repeat engine := _engine [ 1 ] ;
19369: LD_ADDR_VAR 0 3
19373: PUSH
19374: LD_VAR 0 11
19378: PUSH
19379: LD_INT 1
19381: ARRAY
19382: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19383: LD_ADDR_VAR 0 11
19387: PUSH
19388: LD_VAR 0 11
19392: PPUSH
19393: LD_INT 1
19395: PPUSH
19396: CALL_OW 3
19400: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19401: LD_VAR 0 2
19405: PPUSH
19406: LD_VAR 0 3
19410: PPUSH
19411: CALL 19611 0 2
19415: PUSH
19416: LD_VAR 0 11
19420: PUSH
19421: EMPTY
19422: EQUAL
19423: OR
19424: IFFALSE 19369
// if not control in _control then
19426: LD_VAR 0 4
19430: PUSH
19431: LD_VAR 0 12
19435: IN
19436: NOT
19437: IFFALSE 19463
// control := _control [ rand ( 1 , _control ) ] ;
19439: LD_ADDR_VAR 0 4
19443: PUSH
19444: LD_VAR 0 12
19448: PUSH
19449: LD_INT 1
19451: PPUSH
19452: LD_VAR 0 12
19456: PPUSH
19457: CALL_OW 12
19461: ARRAY
19462: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19463: LD_VAR 0 2
19467: PPUSH
19468: LD_VAR 0 5
19472: PPUSH
19473: CALL 19831 0 2
19477: NOT
19478: IFFALSE 19537
// repeat weapon := _weapon [ 1 ] ;
19480: LD_ADDR_VAR 0 5
19484: PUSH
19485: LD_VAR 0 10
19489: PUSH
19490: LD_INT 1
19492: ARRAY
19493: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19494: LD_ADDR_VAR 0 10
19498: PUSH
19499: LD_VAR 0 10
19503: PPUSH
19504: LD_INT 1
19506: PPUSH
19507: CALL_OW 3
19511: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19512: LD_VAR 0 2
19516: PPUSH
19517: LD_VAR 0 5
19521: PPUSH
19522: CALL 19831 0 2
19526: PUSH
19527: LD_VAR 0 10
19531: PUSH
19532: EMPTY
19533: EQUAL
19534: OR
19535: IFFALSE 19480
// result := [ ] ;
19537: LD_ADDR_VAR 0 6
19541: PUSH
19542: EMPTY
19543: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19544: LD_VAR 0 1
19548: PPUSH
19549: LD_VAR 0 2
19553: PPUSH
19554: LD_VAR 0 3
19558: PPUSH
19559: LD_VAR 0 4
19563: PPUSH
19564: LD_VAR 0 5
19568: PPUSH
19569: CALL_OW 448
19573: IFFALSE 19606
// result := [ chassis , engine , control , weapon ] ;
19575: LD_ADDR_VAR 0 6
19579: PUSH
19580: LD_VAR 0 2
19584: PUSH
19585: LD_VAR 0 3
19589: PUSH
19590: LD_VAR 0 4
19594: PUSH
19595: LD_VAR 0 5
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: ST_TO_ADDR
// end ;
19606: LD_VAR 0 6
19610: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
19611: LD_INT 0
19613: PPUSH
// if not chassis or not engine then
19614: LD_VAR 0 1
19618: NOT
19619: PUSH
19620: LD_VAR 0 2
19624: NOT
19625: OR
19626: IFFALSE 19630
// exit ;
19628: GO 19826
// case engine of engine_solar :
19630: LD_VAR 0 2
19634: PUSH
19635: LD_INT 2
19637: DOUBLE
19638: EQUAL
19639: IFTRUE 19643
19641: GO 19681
19643: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
19644: LD_ADDR_VAR 0 3
19648: PUSH
19649: LD_INT 11
19651: PUSH
19652: LD_INT 12
19654: PUSH
19655: LD_INT 13
19657: PUSH
19658: LD_INT 14
19660: PUSH
19661: LD_INT 1
19663: PUSH
19664: LD_INT 2
19666: PUSH
19667: LD_INT 3
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: ST_TO_ADDR
19679: GO 19810
19681: LD_INT 1
19683: DOUBLE
19684: EQUAL
19685: IFTRUE 19689
19687: GO 19751
19689: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
19690: LD_ADDR_VAR 0 3
19694: PUSH
19695: LD_INT 11
19697: PUSH
19698: LD_INT 12
19700: PUSH
19701: LD_INT 13
19703: PUSH
19704: LD_INT 14
19706: PUSH
19707: LD_INT 1
19709: PUSH
19710: LD_INT 2
19712: PUSH
19713: LD_INT 3
19715: PUSH
19716: LD_INT 4
19718: PUSH
19719: LD_INT 5
19721: PUSH
19722: LD_INT 21
19724: PUSH
19725: LD_INT 23
19727: PUSH
19728: LD_INT 22
19730: PUSH
19731: LD_INT 24
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: ST_TO_ADDR
19749: GO 19810
19751: LD_INT 3
19753: DOUBLE
19754: EQUAL
19755: IFTRUE 19759
19757: GO 19809
19759: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19760: LD_ADDR_VAR 0 3
19764: PUSH
19765: LD_INT 13
19767: PUSH
19768: LD_INT 14
19770: PUSH
19771: LD_INT 2
19773: PUSH
19774: LD_INT 3
19776: PUSH
19777: LD_INT 4
19779: PUSH
19780: LD_INT 5
19782: PUSH
19783: LD_INT 21
19785: PUSH
19786: LD_INT 22
19788: PUSH
19789: LD_INT 23
19791: PUSH
19792: LD_INT 24
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: ST_TO_ADDR
19807: GO 19810
19809: POP
// result := ( chassis in result ) ;
19810: LD_ADDR_VAR 0 3
19814: PUSH
19815: LD_VAR 0 1
19819: PUSH
19820: LD_VAR 0 3
19824: IN
19825: ST_TO_ADDR
// end ;
19826: LD_VAR 0 3
19830: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19831: LD_INT 0
19833: PPUSH
// if not chassis or not weapon then
19834: LD_VAR 0 1
19838: NOT
19839: PUSH
19840: LD_VAR 0 2
19844: NOT
19845: OR
19846: IFFALSE 19850
// exit ;
19848: GO 20910
// case weapon of us_machine_gun :
19850: LD_VAR 0 2
19854: PUSH
19855: LD_INT 2
19857: DOUBLE
19858: EQUAL
19859: IFTRUE 19863
19861: GO 19893
19863: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19864: LD_ADDR_VAR 0 3
19868: PUSH
19869: LD_INT 1
19871: PUSH
19872: LD_INT 2
19874: PUSH
19875: LD_INT 3
19877: PUSH
19878: LD_INT 4
19880: PUSH
19881: LD_INT 5
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: ST_TO_ADDR
19891: GO 20894
19893: LD_INT 3
19895: DOUBLE
19896: EQUAL
19897: IFTRUE 19901
19899: GO 19931
19901: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19902: LD_ADDR_VAR 0 3
19906: PUSH
19907: LD_INT 1
19909: PUSH
19910: LD_INT 2
19912: PUSH
19913: LD_INT 3
19915: PUSH
19916: LD_INT 4
19918: PUSH
19919: LD_INT 5
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: ST_TO_ADDR
19929: GO 20894
19931: LD_INT 11
19933: DOUBLE
19934: EQUAL
19935: IFTRUE 19939
19937: GO 19969
19939: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19940: LD_ADDR_VAR 0 3
19944: PUSH
19945: LD_INT 1
19947: PUSH
19948: LD_INT 2
19950: PUSH
19951: LD_INT 3
19953: PUSH
19954: LD_INT 4
19956: PUSH
19957: LD_INT 5
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: ST_TO_ADDR
19967: GO 20894
19969: LD_INT 4
19971: DOUBLE
19972: EQUAL
19973: IFTRUE 19977
19975: GO 20003
19977: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19978: LD_ADDR_VAR 0 3
19982: PUSH
19983: LD_INT 2
19985: PUSH
19986: LD_INT 3
19988: PUSH
19989: LD_INT 4
19991: PUSH
19992: LD_INT 5
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: ST_TO_ADDR
20001: GO 20894
20003: LD_INT 5
20005: DOUBLE
20006: EQUAL
20007: IFTRUE 20011
20009: GO 20037
20011: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20012: LD_ADDR_VAR 0 3
20016: PUSH
20017: LD_INT 2
20019: PUSH
20020: LD_INT 3
20022: PUSH
20023: LD_INT 4
20025: PUSH
20026: LD_INT 5
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: ST_TO_ADDR
20035: GO 20894
20037: LD_INT 9
20039: DOUBLE
20040: EQUAL
20041: IFTRUE 20045
20043: GO 20071
20045: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20046: LD_ADDR_VAR 0 3
20050: PUSH
20051: LD_INT 2
20053: PUSH
20054: LD_INT 3
20056: PUSH
20057: LD_INT 4
20059: PUSH
20060: LD_INT 5
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: ST_TO_ADDR
20069: GO 20894
20071: LD_INT 7
20073: DOUBLE
20074: EQUAL
20075: IFTRUE 20079
20077: GO 20105
20079: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20080: LD_ADDR_VAR 0 3
20084: PUSH
20085: LD_INT 2
20087: PUSH
20088: LD_INT 3
20090: PUSH
20091: LD_INT 4
20093: PUSH
20094: LD_INT 5
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: ST_TO_ADDR
20103: GO 20894
20105: LD_INT 12
20107: DOUBLE
20108: EQUAL
20109: IFTRUE 20113
20111: GO 20139
20113: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20114: LD_ADDR_VAR 0 3
20118: PUSH
20119: LD_INT 2
20121: PUSH
20122: LD_INT 3
20124: PUSH
20125: LD_INT 4
20127: PUSH
20128: LD_INT 5
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: ST_TO_ADDR
20137: GO 20894
20139: LD_INT 13
20141: DOUBLE
20142: EQUAL
20143: IFTRUE 20147
20145: GO 20173
20147: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20148: LD_ADDR_VAR 0 3
20152: PUSH
20153: LD_INT 2
20155: PUSH
20156: LD_INT 3
20158: PUSH
20159: LD_INT 4
20161: PUSH
20162: LD_INT 5
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: ST_TO_ADDR
20171: GO 20894
20173: LD_INT 14
20175: DOUBLE
20176: EQUAL
20177: IFTRUE 20181
20179: GO 20199
20181: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20182: LD_ADDR_VAR 0 3
20186: PUSH
20187: LD_INT 4
20189: PUSH
20190: LD_INT 5
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: ST_TO_ADDR
20197: GO 20894
20199: LD_INT 6
20201: DOUBLE
20202: EQUAL
20203: IFTRUE 20207
20205: GO 20225
20207: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20208: LD_ADDR_VAR 0 3
20212: PUSH
20213: LD_INT 4
20215: PUSH
20216: LD_INT 5
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: ST_TO_ADDR
20223: GO 20894
20225: LD_INT 10
20227: DOUBLE
20228: EQUAL
20229: IFTRUE 20233
20231: GO 20251
20233: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20234: LD_ADDR_VAR 0 3
20238: PUSH
20239: LD_INT 4
20241: PUSH
20242: LD_INT 5
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: ST_TO_ADDR
20249: GO 20894
20251: LD_INT 22
20253: DOUBLE
20254: EQUAL
20255: IFTRUE 20259
20257: GO 20285
20259: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20260: LD_ADDR_VAR 0 3
20264: PUSH
20265: LD_INT 11
20267: PUSH
20268: LD_INT 12
20270: PUSH
20271: LD_INT 13
20273: PUSH
20274: LD_INT 14
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: ST_TO_ADDR
20283: GO 20894
20285: LD_INT 23
20287: DOUBLE
20288: EQUAL
20289: IFTRUE 20293
20291: GO 20319
20293: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20294: LD_ADDR_VAR 0 3
20298: PUSH
20299: LD_INT 11
20301: PUSH
20302: LD_INT 12
20304: PUSH
20305: LD_INT 13
20307: PUSH
20308: LD_INT 14
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: ST_TO_ADDR
20317: GO 20894
20319: LD_INT 24
20321: DOUBLE
20322: EQUAL
20323: IFTRUE 20327
20325: GO 20353
20327: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20328: LD_ADDR_VAR 0 3
20332: PUSH
20333: LD_INT 11
20335: PUSH
20336: LD_INT 12
20338: PUSH
20339: LD_INT 13
20341: PUSH
20342: LD_INT 14
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: ST_TO_ADDR
20351: GO 20894
20353: LD_INT 30
20355: DOUBLE
20356: EQUAL
20357: IFTRUE 20361
20359: GO 20387
20361: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20362: LD_ADDR_VAR 0 3
20366: PUSH
20367: LD_INT 11
20369: PUSH
20370: LD_INT 12
20372: PUSH
20373: LD_INT 13
20375: PUSH
20376: LD_INT 14
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: ST_TO_ADDR
20385: GO 20894
20387: LD_INT 25
20389: DOUBLE
20390: EQUAL
20391: IFTRUE 20395
20393: GO 20413
20395: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20396: LD_ADDR_VAR 0 3
20400: PUSH
20401: LD_INT 13
20403: PUSH
20404: LD_INT 14
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: ST_TO_ADDR
20411: GO 20894
20413: LD_INT 27
20415: DOUBLE
20416: EQUAL
20417: IFTRUE 20421
20419: GO 20439
20421: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20422: LD_ADDR_VAR 0 3
20426: PUSH
20427: LD_INT 13
20429: PUSH
20430: LD_INT 14
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: ST_TO_ADDR
20437: GO 20894
20439: LD_INT 92
20441: DOUBLE
20442: EQUAL
20443: IFTRUE 20447
20445: GO 20473
20447: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20448: LD_ADDR_VAR 0 3
20452: PUSH
20453: LD_INT 11
20455: PUSH
20456: LD_INT 12
20458: PUSH
20459: LD_INT 13
20461: PUSH
20462: LD_INT 14
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: ST_TO_ADDR
20471: GO 20894
20473: LD_INT 28
20475: DOUBLE
20476: EQUAL
20477: IFTRUE 20481
20479: GO 20499
20481: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20482: LD_ADDR_VAR 0 3
20486: PUSH
20487: LD_INT 13
20489: PUSH
20490: LD_INT 14
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: ST_TO_ADDR
20497: GO 20894
20499: LD_INT 29
20501: DOUBLE
20502: EQUAL
20503: IFTRUE 20507
20505: GO 20525
20507: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20508: LD_ADDR_VAR 0 3
20512: PUSH
20513: LD_INT 13
20515: PUSH
20516: LD_INT 14
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: ST_TO_ADDR
20523: GO 20894
20525: LD_INT 31
20527: DOUBLE
20528: EQUAL
20529: IFTRUE 20533
20531: GO 20551
20533: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20534: LD_ADDR_VAR 0 3
20538: PUSH
20539: LD_INT 13
20541: PUSH
20542: LD_INT 14
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: ST_TO_ADDR
20549: GO 20894
20551: LD_INT 26
20553: DOUBLE
20554: EQUAL
20555: IFTRUE 20559
20557: GO 20577
20559: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20560: LD_ADDR_VAR 0 3
20564: PUSH
20565: LD_INT 13
20567: PUSH
20568: LD_INT 14
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: ST_TO_ADDR
20575: GO 20894
20577: LD_INT 42
20579: DOUBLE
20580: EQUAL
20581: IFTRUE 20585
20583: GO 20611
20585: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20586: LD_ADDR_VAR 0 3
20590: PUSH
20591: LD_INT 21
20593: PUSH
20594: LD_INT 22
20596: PUSH
20597: LD_INT 23
20599: PUSH
20600: LD_INT 24
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: ST_TO_ADDR
20609: GO 20894
20611: LD_INT 43
20613: DOUBLE
20614: EQUAL
20615: IFTRUE 20619
20617: GO 20645
20619: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
20620: LD_ADDR_VAR 0 3
20624: PUSH
20625: LD_INT 21
20627: PUSH
20628: LD_INT 22
20630: PUSH
20631: LD_INT 23
20633: PUSH
20634: LD_INT 24
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: ST_TO_ADDR
20643: GO 20894
20645: LD_INT 44
20647: DOUBLE
20648: EQUAL
20649: IFTRUE 20653
20651: GO 20679
20653: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
20654: LD_ADDR_VAR 0 3
20658: PUSH
20659: LD_INT 21
20661: PUSH
20662: LD_INT 22
20664: PUSH
20665: LD_INT 23
20667: PUSH
20668: LD_INT 24
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: ST_TO_ADDR
20677: GO 20894
20679: LD_INT 45
20681: DOUBLE
20682: EQUAL
20683: IFTRUE 20687
20685: GO 20713
20687: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
20688: LD_ADDR_VAR 0 3
20692: PUSH
20693: LD_INT 21
20695: PUSH
20696: LD_INT 22
20698: PUSH
20699: LD_INT 23
20701: PUSH
20702: LD_INT 24
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: ST_TO_ADDR
20711: GO 20894
20713: LD_INT 49
20715: DOUBLE
20716: EQUAL
20717: IFTRUE 20721
20719: GO 20747
20721: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20722: LD_ADDR_VAR 0 3
20726: PUSH
20727: LD_INT 21
20729: PUSH
20730: LD_INT 22
20732: PUSH
20733: LD_INT 23
20735: PUSH
20736: LD_INT 24
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: ST_TO_ADDR
20745: GO 20894
20747: LD_INT 51
20749: DOUBLE
20750: EQUAL
20751: IFTRUE 20755
20753: GO 20781
20755: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20756: LD_ADDR_VAR 0 3
20760: PUSH
20761: LD_INT 21
20763: PUSH
20764: LD_INT 22
20766: PUSH
20767: LD_INT 23
20769: PUSH
20770: LD_INT 24
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: ST_TO_ADDR
20779: GO 20894
20781: LD_INT 52
20783: DOUBLE
20784: EQUAL
20785: IFTRUE 20789
20787: GO 20815
20789: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20790: LD_ADDR_VAR 0 3
20794: PUSH
20795: LD_INT 21
20797: PUSH
20798: LD_INT 22
20800: PUSH
20801: LD_INT 23
20803: PUSH
20804: LD_INT 24
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: ST_TO_ADDR
20813: GO 20894
20815: LD_INT 53
20817: DOUBLE
20818: EQUAL
20819: IFTRUE 20823
20821: GO 20841
20823: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
20824: LD_ADDR_VAR 0 3
20828: PUSH
20829: LD_INT 23
20831: PUSH
20832: LD_INT 24
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: ST_TO_ADDR
20839: GO 20894
20841: LD_INT 46
20843: DOUBLE
20844: EQUAL
20845: IFTRUE 20849
20847: GO 20867
20849: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20850: LD_ADDR_VAR 0 3
20854: PUSH
20855: LD_INT 23
20857: PUSH
20858: LD_INT 24
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: ST_TO_ADDR
20865: GO 20894
20867: LD_INT 47
20869: DOUBLE
20870: EQUAL
20871: IFTRUE 20875
20873: GO 20893
20875: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20876: LD_ADDR_VAR 0 3
20880: PUSH
20881: LD_INT 23
20883: PUSH
20884: LD_INT 24
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: ST_TO_ADDR
20891: GO 20894
20893: POP
// result := ( chassis in result ) ;
20894: LD_ADDR_VAR 0 3
20898: PUSH
20899: LD_VAR 0 1
20903: PUSH
20904: LD_VAR 0 3
20908: IN
20909: ST_TO_ADDR
// end ;
20910: LD_VAR 0 3
20914: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20915: LD_INT 0
20917: PPUSH
20918: PPUSH
20919: PPUSH
20920: PPUSH
20921: PPUSH
20922: PPUSH
20923: PPUSH
// result := array ;
20924: LD_ADDR_VAR 0 5
20928: PUSH
20929: LD_VAR 0 1
20933: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20934: LD_VAR 0 1
20938: NOT
20939: PUSH
20940: LD_VAR 0 2
20944: NOT
20945: OR
20946: PUSH
20947: LD_VAR 0 3
20951: NOT
20952: OR
20953: PUSH
20954: LD_VAR 0 2
20958: PUSH
20959: LD_VAR 0 1
20963: GREATER
20964: OR
20965: PUSH
20966: LD_VAR 0 3
20970: PUSH
20971: LD_VAR 0 1
20975: GREATER
20976: OR
20977: IFFALSE 20981
// exit ;
20979: GO 21277
// if direction then
20981: LD_VAR 0 4
20985: IFFALSE 21049
// begin d := 1 ;
20987: LD_ADDR_VAR 0 9
20991: PUSH
20992: LD_INT 1
20994: ST_TO_ADDR
// if i_from > i_to then
20995: LD_VAR 0 2
20999: PUSH
21000: LD_VAR 0 3
21004: GREATER
21005: IFFALSE 21031
// length := ( array - i_from ) + i_to else
21007: LD_ADDR_VAR 0 11
21011: PUSH
21012: LD_VAR 0 1
21016: PUSH
21017: LD_VAR 0 2
21021: MINUS
21022: PUSH
21023: LD_VAR 0 3
21027: PLUS
21028: ST_TO_ADDR
21029: GO 21047
// length := i_to - i_from ;
21031: LD_ADDR_VAR 0 11
21035: PUSH
21036: LD_VAR 0 3
21040: PUSH
21041: LD_VAR 0 2
21045: MINUS
21046: ST_TO_ADDR
// end else
21047: GO 21110
// begin d := - 1 ;
21049: LD_ADDR_VAR 0 9
21053: PUSH
21054: LD_INT 1
21056: NEG
21057: ST_TO_ADDR
// if i_from > i_to then
21058: LD_VAR 0 2
21062: PUSH
21063: LD_VAR 0 3
21067: GREATER
21068: IFFALSE 21088
// length := i_from - i_to else
21070: LD_ADDR_VAR 0 11
21074: PUSH
21075: LD_VAR 0 2
21079: PUSH
21080: LD_VAR 0 3
21084: MINUS
21085: ST_TO_ADDR
21086: GO 21110
// length := ( array - i_to ) + i_from ;
21088: LD_ADDR_VAR 0 11
21092: PUSH
21093: LD_VAR 0 1
21097: PUSH
21098: LD_VAR 0 3
21102: MINUS
21103: PUSH
21104: LD_VAR 0 2
21108: PLUS
21109: ST_TO_ADDR
// end ; if not length then
21110: LD_VAR 0 11
21114: NOT
21115: IFFALSE 21119
// exit ;
21117: GO 21277
// tmp := array ;
21119: LD_ADDR_VAR 0 10
21123: PUSH
21124: LD_VAR 0 1
21128: ST_TO_ADDR
// for i = 1 to length do
21129: LD_ADDR_VAR 0 6
21133: PUSH
21134: DOUBLE
21135: LD_INT 1
21137: DEC
21138: ST_TO_ADDR
21139: LD_VAR 0 11
21143: PUSH
21144: FOR_TO
21145: IFFALSE 21265
// begin for j = 1 to array do
21147: LD_ADDR_VAR 0 7
21151: PUSH
21152: DOUBLE
21153: LD_INT 1
21155: DEC
21156: ST_TO_ADDR
21157: LD_VAR 0 1
21161: PUSH
21162: FOR_TO
21163: IFFALSE 21251
// begin k := j + d ;
21165: LD_ADDR_VAR 0 8
21169: PUSH
21170: LD_VAR 0 7
21174: PUSH
21175: LD_VAR 0 9
21179: PLUS
21180: ST_TO_ADDR
// if k > array then
21181: LD_VAR 0 8
21185: PUSH
21186: LD_VAR 0 1
21190: GREATER
21191: IFFALSE 21201
// k := 1 ;
21193: LD_ADDR_VAR 0 8
21197: PUSH
21198: LD_INT 1
21200: ST_TO_ADDR
// if not k then
21201: LD_VAR 0 8
21205: NOT
21206: IFFALSE 21218
// k := array ;
21208: LD_ADDR_VAR 0 8
21212: PUSH
21213: LD_VAR 0 1
21217: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21218: LD_ADDR_VAR 0 10
21222: PUSH
21223: LD_VAR 0 10
21227: PPUSH
21228: LD_VAR 0 8
21232: PPUSH
21233: LD_VAR 0 1
21237: PUSH
21238: LD_VAR 0 7
21242: ARRAY
21243: PPUSH
21244: CALL_OW 1
21248: ST_TO_ADDR
// end ;
21249: GO 21162
21251: POP
21252: POP
// array := tmp ;
21253: LD_ADDR_VAR 0 1
21257: PUSH
21258: LD_VAR 0 10
21262: ST_TO_ADDR
// end ;
21263: GO 21144
21265: POP
21266: POP
// result := array ;
21267: LD_ADDR_VAR 0 5
21271: PUSH
21272: LD_VAR 0 1
21276: ST_TO_ADDR
// end ;
21277: LD_VAR 0 5
21281: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21282: LD_INT 0
21284: PPUSH
21285: PPUSH
// result := 0 ;
21286: LD_ADDR_VAR 0 3
21290: PUSH
21291: LD_INT 0
21293: ST_TO_ADDR
// if not array or not value in array then
21294: LD_VAR 0 1
21298: NOT
21299: PUSH
21300: LD_VAR 0 2
21304: PUSH
21305: LD_VAR 0 1
21309: IN
21310: NOT
21311: OR
21312: IFFALSE 21316
// exit ;
21314: GO 21370
// for i = 1 to array do
21316: LD_ADDR_VAR 0 4
21320: PUSH
21321: DOUBLE
21322: LD_INT 1
21324: DEC
21325: ST_TO_ADDR
21326: LD_VAR 0 1
21330: PUSH
21331: FOR_TO
21332: IFFALSE 21368
// if value = array [ i ] then
21334: LD_VAR 0 2
21338: PUSH
21339: LD_VAR 0 1
21343: PUSH
21344: LD_VAR 0 4
21348: ARRAY
21349: EQUAL
21350: IFFALSE 21366
// begin result := i ;
21352: LD_ADDR_VAR 0 3
21356: PUSH
21357: LD_VAR 0 4
21361: ST_TO_ADDR
// exit ;
21362: POP
21363: POP
21364: GO 21370
// end ;
21366: GO 21331
21368: POP
21369: POP
// end ;
21370: LD_VAR 0 3
21374: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21375: LD_INT 0
21377: PPUSH
// vc_chassis := chassis ;
21378: LD_ADDR_OWVAR 37
21382: PUSH
21383: LD_VAR 0 1
21387: ST_TO_ADDR
// vc_engine := engine ;
21388: LD_ADDR_OWVAR 39
21392: PUSH
21393: LD_VAR 0 2
21397: ST_TO_ADDR
// vc_control := control ;
21398: LD_ADDR_OWVAR 38
21402: PUSH
21403: LD_VAR 0 3
21407: ST_TO_ADDR
// vc_weapon := weapon ;
21408: LD_ADDR_OWVAR 40
21412: PUSH
21413: LD_VAR 0 4
21417: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21418: LD_ADDR_OWVAR 41
21422: PUSH
21423: LD_VAR 0 5
21427: ST_TO_ADDR
// end ;
21428: LD_VAR 0 6
21432: RET
// export function WantPlant ( unit ) ; var task ; begin
21433: LD_INT 0
21435: PPUSH
21436: PPUSH
// result := false ;
21437: LD_ADDR_VAR 0 2
21441: PUSH
21442: LD_INT 0
21444: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21445: LD_ADDR_VAR 0 3
21449: PUSH
21450: LD_VAR 0 1
21454: PPUSH
21455: CALL_OW 437
21459: ST_TO_ADDR
// if task then
21460: LD_VAR 0 3
21464: IFFALSE 21492
// if task [ 1 ] [ 1 ] = p then
21466: LD_VAR 0 3
21470: PUSH
21471: LD_INT 1
21473: ARRAY
21474: PUSH
21475: LD_INT 1
21477: ARRAY
21478: PUSH
21479: LD_STRING p
21481: EQUAL
21482: IFFALSE 21492
// result := true ;
21484: LD_ADDR_VAR 0 2
21488: PUSH
21489: LD_INT 1
21491: ST_TO_ADDR
// end ;
21492: LD_VAR 0 2
21496: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21497: LD_INT 0
21499: PPUSH
21500: PPUSH
21501: PPUSH
21502: PPUSH
// if pos < 1 then
21503: LD_VAR 0 2
21507: PUSH
21508: LD_INT 1
21510: LESS
21511: IFFALSE 21515
// exit ;
21513: GO 21818
// if pos = 1 then
21515: LD_VAR 0 2
21519: PUSH
21520: LD_INT 1
21522: EQUAL
21523: IFFALSE 21556
// result := Replace ( arr , pos [ 1 ] , value ) else
21525: LD_ADDR_VAR 0 4
21529: PUSH
21530: LD_VAR 0 1
21534: PPUSH
21535: LD_VAR 0 2
21539: PUSH
21540: LD_INT 1
21542: ARRAY
21543: PPUSH
21544: LD_VAR 0 3
21548: PPUSH
21549: CALL_OW 1
21553: ST_TO_ADDR
21554: GO 21818
// begin tmp := arr ;
21556: LD_ADDR_VAR 0 6
21560: PUSH
21561: LD_VAR 0 1
21565: ST_TO_ADDR
// s_arr := [ tmp ] ;
21566: LD_ADDR_VAR 0 7
21570: PUSH
21571: LD_VAR 0 6
21575: PUSH
21576: EMPTY
21577: LIST
21578: ST_TO_ADDR
// for i = 1 to pos - 1 do
21579: LD_ADDR_VAR 0 5
21583: PUSH
21584: DOUBLE
21585: LD_INT 1
21587: DEC
21588: ST_TO_ADDR
21589: LD_VAR 0 2
21593: PUSH
21594: LD_INT 1
21596: MINUS
21597: PUSH
21598: FOR_TO
21599: IFFALSE 21644
// begin tmp := tmp [ pos [ i ] ] ;
21601: LD_ADDR_VAR 0 6
21605: PUSH
21606: LD_VAR 0 6
21610: PUSH
21611: LD_VAR 0 2
21615: PUSH
21616: LD_VAR 0 5
21620: ARRAY
21621: ARRAY
21622: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
21623: LD_ADDR_VAR 0 7
21627: PUSH
21628: LD_VAR 0 7
21632: PUSH
21633: LD_VAR 0 6
21637: PUSH
21638: EMPTY
21639: LIST
21640: ADD
21641: ST_TO_ADDR
// end ;
21642: GO 21598
21644: POP
21645: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
21646: LD_ADDR_VAR 0 6
21650: PUSH
21651: LD_VAR 0 6
21655: PPUSH
21656: LD_VAR 0 2
21660: PUSH
21661: LD_VAR 0 2
21665: ARRAY
21666: PPUSH
21667: LD_VAR 0 3
21671: PPUSH
21672: CALL_OW 1
21676: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21677: LD_ADDR_VAR 0 7
21681: PUSH
21682: LD_VAR 0 7
21686: PPUSH
21687: LD_VAR 0 7
21691: PPUSH
21692: LD_VAR 0 6
21696: PPUSH
21697: CALL_OW 1
21701: ST_TO_ADDR
// for i = s_arr downto 2 do
21702: LD_ADDR_VAR 0 5
21706: PUSH
21707: DOUBLE
21708: LD_VAR 0 7
21712: INC
21713: ST_TO_ADDR
21714: LD_INT 2
21716: PUSH
21717: FOR_DOWNTO
21718: IFFALSE 21802
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21720: LD_ADDR_VAR 0 6
21724: PUSH
21725: LD_VAR 0 7
21729: PUSH
21730: LD_VAR 0 5
21734: PUSH
21735: LD_INT 1
21737: MINUS
21738: ARRAY
21739: PPUSH
21740: LD_VAR 0 2
21744: PUSH
21745: LD_VAR 0 5
21749: PUSH
21750: LD_INT 1
21752: MINUS
21753: ARRAY
21754: PPUSH
21755: LD_VAR 0 7
21759: PUSH
21760: LD_VAR 0 5
21764: ARRAY
21765: PPUSH
21766: CALL_OW 1
21770: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21771: LD_ADDR_VAR 0 7
21775: PUSH
21776: LD_VAR 0 7
21780: PPUSH
21781: LD_VAR 0 5
21785: PUSH
21786: LD_INT 1
21788: MINUS
21789: PPUSH
21790: LD_VAR 0 6
21794: PPUSH
21795: CALL_OW 1
21799: ST_TO_ADDR
// end ;
21800: GO 21717
21802: POP
21803: POP
// result := s_arr [ 1 ] ;
21804: LD_ADDR_VAR 0 4
21808: PUSH
21809: LD_VAR 0 7
21813: PUSH
21814: LD_INT 1
21816: ARRAY
21817: ST_TO_ADDR
// end ; end ;
21818: LD_VAR 0 4
21822: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21823: LD_INT 0
21825: PPUSH
21826: PPUSH
// if not list then
21827: LD_VAR 0 1
21831: NOT
21832: IFFALSE 21836
// exit ;
21834: GO 21927
// i := list [ pos1 ] ;
21836: LD_ADDR_VAR 0 5
21840: PUSH
21841: LD_VAR 0 1
21845: PUSH
21846: LD_VAR 0 2
21850: ARRAY
21851: ST_TO_ADDR
// if not i then
21852: LD_VAR 0 5
21856: NOT
21857: IFFALSE 21861
// exit ;
21859: GO 21927
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21861: LD_ADDR_VAR 0 1
21865: PUSH
21866: LD_VAR 0 1
21870: PPUSH
21871: LD_VAR 0 2
21875: PPUSH
21876: LD_VAR 0 1
21880: PUSH
21881: LD_VAR 0 3
21885: ARRAY
21886: PPUSH
21887: CALL_OW 1
21891: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21892: LD_ADDR_VAR 0 1
21896: PUSH
21897: LD_VAR 0 1
21901: PPUSH
21902: LD_VAR 0 3
21906: PPUSH
21907: LD_VAR 0 5
21911: PPUSH
21912: CALL_OW 1
21916: ST_TO_ADDR
// result := list ;
21917: LD_ADDR_VAR 0 4
21921: PUSH
21922: LD_VAR 0 1
21926: ST_TO_ADDR
// end ;
21927: LD_VAR 0 4
21931: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21932: LD_INT 0
21934: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21935: LD_ADDR_VAR 0 5
21939: PUSH
21940: LD_VAR 0 1
21944: PPUSH
21945: CALL_OW 250
21949: PPUSH
21950: LD_VAR 0 1
21954: PPUSH
21955: CALL_OW 251
21959: PPUSH
21960: LD_VAR 0 2
21964: PPUSH
21965: LD_VAR 0 3
21969: PPUSH
21970: LD_VAR 0 4
21974: PPUSH
21975: CALL 22353 0 5
21979: ST_TO_ADDR
// end ;
21980: LD_VAR 0 5
21984: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
21985: LD_INT 0
21987: PPUSH
21988: PPUSH
21989: PPUSH
21990: PPUSH
// if not list or not unit then
21991: LD_VAR 0 2
21995: NOT
21996: PUSH
21997: LD_VAR 0 1
22001: NOT
22002: OR
22003: IFFALSE 22007
// exit ;
22005: GO 22348
// result := [ ] ;
22007: LD_ADDR_VAR 0 5
22011: PUSH
22012: EMPTY
22013: ST_TO_ADDR
// for i in list do
22014: LD_ADDR_VAR 0 6
22018: PUSH
22019: LD_VAR 0 2
22023: PUSH
22024: FOR_IN
22025: IFFALSE 22243
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
22027: LD_ADDR_VAR 0 8
22031: PUSH
22032: LD_VAR 0 1
22036: PPUSH
22037: LD_VAR 0 6
22041: PUSH
22042: LD_INT 1
22044: ARRAY
22045: PPUSH
22046: LD_VAR 0 6
22050: PUSH
22051: LD_INT 2
22053: ARRAY
22054: PPUSH
22055: CALL_OW 297
22059: ST_TO_ADDR
// if not Count ( result ) then
22060: LD_VAR 0 5
22064: PPUSH
22065: CALL 18637 0 1
22069: NOT
22070: IFFALSE 22103
// begin result := Join ( result , [ i , tmp ] ) ;
22072: LD_ADDR_VAR 0 5
22076: PUSH
22077: LD_VAR 0 5
22081: PPUSH
22082: LD_VAR 0 6
22086: PUSH
22087: LD_VAR 0 8
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PPUSH
22096: CALL 54226 0 2
22100: ST_TO_ADDR
// continue ;
22101: GO 22024
// end ; if result [ result ] [ 2 ] <= tmp then
22103: LD_VAR 0 5
22107: PUSH
22108: LD_VAR 0 5
22112: ARRAY
22113: PUSH
22114: LD_INT 2
22116: ARRAY
22117: PUSH
22118: LD_VAR 0 8
22122: LESSEQUAL
22123: IFFALSE 22156
// result := Join ( result , [ i , tmp ] ) else
22125: LD_ADDR_VAR 0 5
22129: PUSH
22130: LD_VAR 0 5
22134: PPUSH
22135: LD_VAR 0 6
22139: PUSH
22140: LD_VAR 0 8
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: PPUSH
22149: CALL 54226 0 2
22153: ST_TO_ADDR
22154: GO 22241
// begin for j := 1 to Count ( result ) do
22156: LD_ADDR_VAR 0 7
22160: PUSH
22161: DOUBLE
22162: LD_INT 1
22164: DEC
22165: ST_TO_ADDR
22166: LD_VAR 0 5
22170: PPUSH
22171: CALL 18637 0 1
22175: PUSH
22176: FOR_TO
22177: IFFALSE 22239
// begin if tmp < result [ j ] [ 2 ] then
22179: LD_VAR 0 8
22183: PUSH
22184: LD_VAR 0 5
22188: PUSH
22189: LD_VAR 0 7
22193: ARRAY
22194: PUSH
22195: LD_INT 2
22197: ARRAY
22198: LESS
22199: IFFALSE 22237
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22201: LD_ADDR_VAR 0 5
22205: PUSH
22206: LD_VAR 0 5
22210: PPUSH
22211: LD_VAR 0 7
22215: PPUSH
22216: LD_VAR 0 6
22220: PUSH
22221: LD_VAR 0 8
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: PPUSH
22230: CALL_OW 2
22234: ST_TO_ADDR
// break ;
22235: GO 22239
// end ; end ;
22237: GO 22176
22239: POP
22240: POP
// end ; end ;
22241: GO 22024
22243: POP
22244: POP
// if result and not asc then
22245: LD_VAR 0 5
22249: PUSH
22250: LD_VAR 0 3
22254: NOT
22255: AND
22256: IFFALSE 22273
// result := ReverseArray ( result ) ;
22258: LD_ADDR_VAR 0 5
22262: PUSH
22263: LD_VAR 0 5
22267: PPUSH
22268: CALL 49513 0 1
22272: ST_TO_ADDR
// tmp := [ ] ;
22273: LD_ADDR_VAR 0 8
22277: PUSH
22278: EMPTY
22279: ST_TO_ADDR
// if mode then
22280: LD_VAR 0 4
22284: IFFALSE 22348
// begin for i := 1 to result do
22286: LD_ADDR_VAR 0 6
22290: PUSH
22291: DOUBLE
22292: LD_INT 1
22294: DEC
22295: ST_TO_ADDR
22296: LD_VAR 0 5
22300: PUSH
22301: FOR_TO
22302: IFFALSE 22336
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
22304: LD_ADDR_VAR 0 8
22308: PUSH
22309: LD_VAR 0 8
22313: PPUSH
22314: LD_VAR 0 5
22318: PUSH
22319: LD_VAR 0 6
22323: ARRAY
22324: PUSH
22325: LD_INT 1
22327: ARRAY
22328: PPUSH
22329: CALL 54226 0 2
22333: ST_TO_ADDR
22334: GO 22301
22336: POP
22337: POP
// result := tmp ;
22338: LD_ADDR_VAR 0 5
22342: PUSH
22343: LD_VAR 0 8
22347: ST_TO_ADDR
// end ; end ;
22348: LD_VAR 0 5
22352: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22353: LD_INT 0
22355: PPUSH
22356: PPUSH
22357: PPUSH
22358: PPUSH
// if not list then
22359: LD_VAR 0 3
22363: NOT
22364: IFFALSE 22368
// exit ;
22366: GO 22756
// result := [ ] ;
22368: LD_ADDR_VAR 0 6
22372: PUSH
22373: EMPTY
22374: ST_TO_ADDR
// for i in list do
22375: LD_ADDR_VAR 0 7
22379: PUSH
22380: LD_VAR 0 3
22384: PUSH
22385: FOR_IN
22386: IFFALSE 22588
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22388: LD_ADDR_VAR 0 9
22392: PUSH
22393: LD_VAR 0 7
22397: PPUSH
22398: LD_VAR 0 1
22402: PPUSH
22403: LD_VAR 0 2
22407: PPUSH
22408: CALL_OW 297
22412: ST_TO_ADDR
// if not result then
22413: LD_VAR 0 6
22417: NOT
22418: IFFALSE 22444
// result := [ [ i , tmp ] ] else
22420: LD_ADDR_VAR 0 6
22424: PUSH
22425: LD_VAR 0 7
22429: PUSH
22430: LD_VAR 0 9
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PUSH
22439: EMPTY
22440: LIST
22441: ST_TO_ADDR
22442: GO 22586
// begin if result [ result ] [ 2 ] < tmp then
22444: LD_VAR 0 6
22448: PUSH
22449: LD_VAR 0 6
22453: ARRAY
22454: PUSH
22455: LD_INT 2
22457: ARRAY
22458: PUSH
22459: LD_VAR 0 9
22463: LESS
22464: IFFALSE 22506
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22466: LD_ADDR_VAR 0 6
22470: PUSH
22471: LD_VAR 0 6
22475: PPUSH
22476: LD_VAR 0 6
22480: PUSH
22481: LD_INT 1
22483: PLUS
22484: PPUSH
22485: LD_VAR 0 7
22489: PUSH
22490: LD_VAR 0 9
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PPUSH
22499: CALL_OW 2
22503: ST_TO_ADDR
22504: GO 22586
// for j = 1 to result do
22506: LD_ADDR_VAR 0 8
22510: PUSH
22511: DOUBLE
22512: LD_INT 1
22514: DEC
22515: ST_TO_ADDR
22516: LD_VAR 0 6
22520: PUSH
22521: FOR_TO
22522: IFFALSE 22584
// begin if tmp < result [ j ] [ 2 ] then
22524: LD_VAR 0 9
22528: PUSH
22529: LD_VAR 0 6
22533: PUSH
22534: LD_VAR 0 8
22538: ARRAY
22539: PUSH
22540: LD_INT 2
22542: ARRAY
22543: LESS
22544: IFFALSE 22582
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22546: LD_ADDR_VAR 0 6
22550: PUSH
22551: LD_VAR 0 6
22555: PPUSH
22556: LD_VAR 0 8
22560: PPUSH
22561: LD_VAR 0 7
22565: PUSH
22566: LD_VAR 0 9
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: PPUSH
22575: CALL_OW 2
22579: ST_TO_ADDR
// break ;
22580: GO 22584
// end ; end ;
22582: GO 22521
22584: POP
22585: POP
// end ; end ;
22586: GO 22385
22588: POP
22589: POP
// if result and not asc then
22590: LD_VAR 0 6
22594: PUSH
22595: LD_VAR 0 4
22599: NOT
22600: AND
22601: IFFALSE 22676
// begin tmp := result ;
22603: LD_ADDR_VAR 0 9
22607: PUSH
22608: LD_VAR 0 6
22612: ST_TO_ADDR
// for i = tmp downto 1 do
22613: LD_ADDR_VAR 0 7
22617: PUSH
22618: DOUBLE
22619: LD_VAR 0 9
22623: INC
22624: ST_TO_ADDR
22625: LD_INT 1
22627: PUSH
22628: FOR_DOWNTO
22629: IFFALSE 22674
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22631: LD_ADDR_VAR 0 6
22635: PUSH
22636: LD_VAR 0 6
22640: PPUSH
22641: LD_VAR 0 9
22645: PUSH
22646: LD_VAR 0 7
22650: MINUS
22651: PUSH
22652: LD_INT 1
22654: PLUS
22655: PPUSH
22656: LD_VAR 0 9
22660: PUSH
22661: LD_VAR 0 7
22665: ARRAY
22666: PPUSH
22667: CALL_OW 1
22671: ST_TO_ADDR
22672: GO 22628
22674: POP
22675: POP
// end ; tmp := [ ] ;
22676: LD_ADDR_VAR 0 9
22680: PUSH
22681: EMPTY
22682: ST_TO_ADDR
// if mode then
22683: LD_VAR 0 5
22687: IFFALSE 22756
// begin for i = 1 to result do
22689: LD_ADDR_VAR 0 7
22693: PUSH
22694: DOUBLE
22695: LD_INT 1
22697: DEC
22698: ST_TO_ADDR
22699: LD_VAR 0 6
22703: PUSH
22704: FOR_TO
22705: IFFALSE 22744
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22707: LD_ADDR_VAR 0 9
22711: PUSH
22712: LD_VAR 0 9
22716: PPUSH
22717: LD_VAR 0 7
22721: PPUSH
22722: LD_VAR 0 6
22726: PUSH
22727: LD_VAR 0 7
22731: ARRAY
22732: PUSH
22733: LD_INT 1
22735: ARRAY
22736: PPUSH
22737: CALL_OW 1
22741: ST_TO_ADDR
22742: GO 22704
22744: POP
22745: POP
// result := tmp ;
22746: LD_ADDR_VAR 0 6
22750: PUSH
22751: LD_VAR 0 9
22755: ST_TO_ADDR
// end ; end ;
22756: LD_VAR 0 6
22760: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22761: LD_INT 0
22763: PPUSH
22764: PPUSH
22765: PPUSH
22766: PPUSH
22767: PPUSH
22768: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22769: LD_ADDR_VAR 0 5
22773: PUSH
22774: LD_INT 0
22776: PUSH
22777: LD_INT 0
22779: PUSH
22780: LD_INT 0
22782: PUSH
22783: EMPTY
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: ST_TO_ADDR
// if not x or not y then
22791: LD_VAR 0 2
22795: NOT
22796: PUSH
22797: LD_VAR 0 3
22801: NOT
22802: OR
22803: IFFALSE 22807
// exit ;
22805: GO 24457
// if not range then
22807: LD_VAR 0 4
22811: NOT
22812: IFFALSE 22822
// range := 10 ;
22814: LD_ADDR_VAR 0 4
22818: PUSH
22819: LD_INT 10
22821: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22822: LD_ADDR_VAR 0 8
22826: PUSH
22827: LD_INT 81
22829: PUSH
22830: LD_VAR 0 1
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 92
22841: PUSH
22842: LD_VAR 0 2
22846: PUSH
22847: LD_VAR 0 3
22851: PUSH
22852: LD_VAR 0 4
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 3
22865: PUSH
22866: LD_INT 21
22868: PUSH
22869: LD_INT 3
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: LIST
22884: PPUSH
22885: CALL_OW 69
22889: ST_TO_ADDR
// if not tmp then
22890: LD_VAR 0 8
22894: NOT
22895: IFFALSE 22899
// exit ;
22897: GO 24457
// for i in tmp do
22899: LD_ADDR_VAR 0 6
22903: PUSH
22904: LD_VAR 0 8
22908: PUSH
22909: FOR_IN
22910: IFFALSE 24432
// begin points := [ 0 , 0 , 0 ] ;
22912: LD_ADDR_VAR 0 9
22916: PUSH
22917: LD_INT 0
22919: PUSH
22920: LD_INT 0
22922: PUSH
22923: LD_INT 0
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: LIST
22930: ST_TO_ADDR
// bpoints := 1 ;
22931: LD_ADDR_VAR 0 10
22935: PUSH
22936: LD_INT 1
22938: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22939: LD_VAR 0 6
22943: PPUSH
22944: CALL_OW 247
22948: PUSH
22949: LD_INT 1
22951: DOUBLE
22952: EQUAL
22953: IFTRUE 22957
22955: GO 23535
22957: POP
// begin if GetClass ( i ) = 1 then
22958: LD_VAR 0 6
22962: PPUSH
22963: CALL_OW 257
22967: PUSH
22968: LD_INT 1
22970: EQUAL
22971: IFFALSE 22992
// points := [ 10 , 5 , 3 ] ;
22973: LD_ADDR_VAR 0 9
22977: PUSH
22978: LD_INT 10
22980: PUSH
22981: LD_INT 5
22983: PUSH
22984: LD_INT 3
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: LIST
22991: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22992: LD_VAR 0 6
22996: PPUSH
22997: CALL_OW 257
23001: PUSH
23002: LD_INT 2
23004: PUSH
23005: LD_INT 3
23007: PUSH
23008: LD_INT 4
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: LIST
23015: IN
23016: IFFALSE 23037
// points := [ 3 , 2 , 1 ] ;
23018: LD_ADDR_VAR 0 9
23022: PUSH
23023: LD_INT 3
23025: PUSH
23026: LD_INT 2
23028: PUSH
23029: LD_INT 1
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: LIST
23036: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23037: LD_VAR 0 6
23041: PPUSH
23042: CALL_OW 257
23046: PUSH
23047: LD_INT 5
23049: EQUAL
23050: IFFALSE 23071
// points := [ 130 , 5 , 2 ] ;
23052: LD_ADDR_VAR 0 9
23056: PUSH
23057: LD_INT 130
23059: PUSH
23060: LD_INT 5
23062: PUSH
23063: LD_INT 2
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: LIST
23070: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23071: LD_VAR 0 6
23075: PPUSH
23076: CALL_OW 257
23080: PUSH
23081: LD_INT 8
23083: EQUAL
23084: IFFALSE 23105
// points := [ 35 , 35 , 30 ] ;
23086: LD_ADDR_VAR 0 9
23090: PUSH
23091: LD_INT 35
23093: PUSH
23094: LD_INT 35
23096: PUSH
23097: LD_INT 30
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: LIST
23104: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23105: LD_VAR 0 6
23109: PPUSH
23110: CALL_OW 257
23114: PUSH
23115: LD_INT 9
23117: EQUAL
23118: IFFALSE 23139
// points := [ 20 , 55 , 40 ] ;
23120: LD_ADDR_VAR 0 9
23124: PUSH
23125: LD_INT 20
23127: PUSH
23128: LD_INT 55
23130: PUSH
23131: LD_INT 40
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: LIST
23138: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23139: LD_VAR 0 6
23143: PPUSH
23144: CALL_OW 257
23148: PUSH
23149: LD_INT 12
23151: PUSH
23152: LD_INT 16
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: IN
23159: IFFALSE 23180
// points := [ 5 , 3 , 2 ] ;
23161: LD_ADDR_VAR 0 9
23165: PUSH
23166: LD_INT 5
23168: PUSH
23169: LD_INT 3
23171: PUSH
23172: LD_INT 2
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: LIST
23179: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23180: LD_VAR 0 6
23184: PPUSH
23185: CALL_OW 257
23189: PUSH
23190: LD_INT 17
23192: EQUAL
23193: IFFALSE 23214
// points := [ 100 , 50 , 75 ] ;
23195: LD_ADDR_VAR 0 9
23199: PUSH
23200: LD_INT 100
23202: PUSH
23203: LD_INT 50
23205: PUSH
23206: LD_INT 75
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: LIST
23213: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23214: LD_VAR 0 6
23218: PPUSH
23219: CALL_OW 257
23223: PUSH
23224: LD_INT 15
23226: EQUAL
23227: IFFALSE 23248
// points := [ 10 , 5 , 3 ] ;
23229: LD_ADDR_VAR 0 9
23233: PUSH
23234: LD_INT 10
23236: PUSH
23237: LD_INT 5
23239: PUSH
23240: LD_INT 3
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: LIST
23247: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23248: LD_VAR 0 6
23252: PPUSH
23253: CALL_OW 257
23257: PUSH
23258: LD_INT 14
23260: EQUAL
23261: IFFALSE 23282
// points := [ 10 , 0 , 0 ] ;
23263: LD_ADDR_VAR 0 9
23267: PUSH
23268: LD_INT 10
23270: PUSH
23271: LD_INT 0
23273: PUSH
23274: LD_INT 0
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: LIST
23281: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23282: LD_VAR 0 6
23286: PPUSH
23287: CALL_OW 257
23291: PUSH
23292: LD_INT 11
23294: EQUAL
23295: IFFALSE 23316
// points := [ 30 , 10 , 5 ] ;
23297: LD_ADDR_VAR 0 9
23301: PUSH
23302: LD_INT 30
23304: PUSH
23305: LD_INT 10
23307: PUSH
23308: LD_INT 5
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: LIST
23315: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23316: LD_VAR 0 1
23320: PPUSH
23321: LD_INT 5
23323: PPUSH
23324: CALL_OW 321
23328: PUSH
23329: LD_INT 2
23331: EQUAL
23332: IFFALSE 23349
// bpoints := bpoints * 1.8 ;
23334: LD_ADDR_VAR 0 10
23338: PUSH
23339: LD_VAR 0 10
23343: PUSH
23344: LD_REAL  1.80000000000000E+0000
23347: MUL
23348: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23349: LD_VAR 0 6
23353: PPUSH
23354: CALL_OW 257
23358: PUSH
23359: LD_INT 1
23361: PUSH
23362: LD_INT 2
23364: PUSH
23365: LD_INT 3
23367: PUSH
23368: LD_INT 4
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: IN
23377: PUSH
23378: LD_VAR 0 1
23382: PPUSH
23383: LD_INT 51
23385: PPUSH
23386: CALL_OW 321
23390: PUSH
23391: LD_INT 2
23393: EQUAL
23394: AND
23395: IFFALSE 23412
// bpoints := bpoints * 1.2 ;
23397: LD_ADDR_VAR 0 10
23401: PUSH
23402: LD_VAR 0 10
23406: PUSH
23407: LD_REAL  1.20000000000000E+0000
23410: MUL
23411: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23412: LD_VAR 0 6
23416: PPUSH
23417: CALL_OW 257
23421: PUSH
23422: LD_INT 5
23424: PUSH
23425: LD_INT 7
23427: PUSH
23428: LD_INT 9
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: LIST
23435: IN
23436: PUSH
23437: LD_VAR 0 1
23441: PPUSH
23442: LD_INT 52
23444: PPUSH
23445: CALL_OW 321
23449: PUSH
23450: LD_INT 2
23452: EQUAL
23453: AND
23454: IFFALSE 23471
// bpoints := bpoints * 1.5 ;
23456: LD_ADDR_VAR 0 10
23460: PUSH
23461: LD_VAR 0 10
23465: PUSH
23466: LD_REAL  1.50000000000000E+0000
23469: MUL
23470: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23471: LD_VAR 0 1
23475: PPUSH
23476: LD_INT 66
23478: PPUSH
23479: CALL_OW 321
23483: PUSH
23484: LD_INT 2
23486: EQUAL
23487: IFFALSE 23504
// bpoints := bpoints * 1.1 ;
23489: LD_ADDR_VAR 0 10
23493: PUSH
23494: LD_VAR 0 10
23498: PUSH
23499: LD_REAL  1.10000000000000E+0000
23502: MUL
23503: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23504: LD_ADDR_VAR 0 10
23508: PUSH
23509: LD_VAR 0 10
23513: PUSH
23514: LD_VAR 0 6
23518: PPUSH
23519: LD_INT 1
23521: PPUSH
23522: CALL_OW 259
23526: PUSH
23527: LD_REAL  1.15000000000000E+0000
23530: MUL
23531: MUL
23532: ST_TO_ADDR
// end ; unit_vehicle :
23533: GO 24361
23535: LD_INT 2
23537: DOUBLE
23538: EQUAL
23539: IFTRUE 23543
23541: GO 24349
23543: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23544: LD_VAR 0 6
23548: PPUSH
23549: CALL_OW 264
23553: PUSH
23554: LD_INT 2
23556: PUSH
23557: LD_INT 42
23559: PUSH
23560: LD_INT 24
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: LIST
23567: IN
23568: IFFALSE 23589
// points := [ 25 , 5 , 3 ] ;
23570: LD_ADDR_VAR 0 9
23574: PUSH
23575: LD_INT 25
23577: PUSH
23578: LD_INT 5
23580: PUSH
23581: LD_INT 3
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: LIST
23588: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23589: LD_VAR 0 6
23593: PPUSH
23594: CALL_OW 264
23598: PUSH
23599: LD_INT 4
23601: PUSH
23602: LD_INT 43
23604: PUSH
23605: LD_INT 25
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: LIST
23612: IN
23613: IFFALSE 23634
// points := [ 40 , 15 , 5 ] ;
23615: LD_ADDR_VAR 0 9
23619: PUSH
23620: LD_INT 40
23622: PUSH
23623: LD_INT 15
23625: PUSH
23626: LD_INT 5
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: LIST
23633: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23634: LD_VAR 0 6
23638: PPUSH
23639: CALL_OW 264
23643: PUSH
23644: LD_INT 3
23646: PUSH
23647: LD_INT 23
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: IN
23654: IFFALSE 23675
// points := [ 7 , 25 , 8 ] ;
23656: LD_ADDR_VAR 0 9
23660: PUSH
23661: LD_INT 7
23663: PUSH
23664: LD_INT 25
23666: PUSH
23667: LD_INT 8
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: LIST
23674: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23675: LD_VAR 0 6
23679: PPUSH
23680: CALL_OW 264
23684: PUSH
23685: LD_INT 5
23687: PUSH
23688: LD_INT 27
23690: PUSH
23691: LD_INT 44
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: LIST
23698: IN
23699: IFFALSE 23720
// points := [ 14 , 50 , 16 ] ;
23701: LD_ADDR_VAR 0 9
23705: PUSH
23706: LD_INT 14
23708: PUSH
23709: LD_INT 50
23711: PUSH
23712: LD_INT 16
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: LIST
23719: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23720: LD_VAR 0 6
23724: PPUSH
23725: CALL_OW 264
23729: PUSH
23730: LD_INT 6
23732: PUSH
23733: LD_INT 46
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: IN
23740: IFFALSE 23761
// points := [ 32 , 120 , 70 ] ;
23742: LD_ADDR_VAR 0 9
23746: PUSH
23747: LD_INT 32
23749: PUSH
23750: LD_INT 120
23752: PUSH
23753: LD_INT 70
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: LIST
23760: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23761: LD_VAR 0 6
23765: PPUSH
23766: CALL_OW 264
23770: PUSH
23771: LD_INT 7
23773: PUSH
23774: LD_INT 28
23776: PUSH
23777: LD_INT 45
23779: PUSH
23780: LD_INT 92
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: IN
23789: IFFALSE 23810
// points := [ 35 , 20 , 45 ] ;
23791: LD_ADDR_VAR 0 9
23795: PUSH
23796: LD_INT 35
23798: PUSH
23799: LD_INT 20
23801: PUSH
23802: LD_INT 45
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: LIST
23809: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23810: LD_VAR 0 6
23814: PPUSH
23815: CALL_OW 264
23819: PUSH
23820: LD_INT 47
23822: PUSH
23823: EMPTY
23824: LIST
23825: IN
23826: IFFALSE 23847
// points := [ 67 , 45 , 75 ] ;
23828: LD_ADDR_VAR 0 9
23832: PUSH
23833: LD_INT 67
23835: PUSH
23836: LD_INT 45
23838: PUSH
23839: LD_INT 75
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: LIST
23846: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23847: LD_VAR 0 6
23851: PPUSH
23852: CALL_OW 264
23856: PUSH
23857: LD_INT 26
23859: PUSH
23860: EMPTY
23861: LIST
23862: IN
23863: IFFALSE 23884
// points := [ 120 , 30 , 80 ] ;
23865: LD_ADDR_VAR 0 9
23869: PUSH
23870: LD_INT 120
23872: PUSH
23873: LD_INT 30
23875: PUSH
23876: LD_INT 80
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: LIST
23883: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23884: LD_VAR 0 6
23888: PPUSH
23889: CALL_OW 264
23893: PUSH
23894: LD_INT 22
23896: PUSH
23897: EMPTY
23898: LIST
23899: IN
23900: IFFALSE 23921
// points := [ 40 , 1 , 1 ] ;
23902: LD_ADDR_VAR 0 9
23906: PUSH
23907: LD_INT 40
23909: PUSH
23910: LD_INT 1
23912: PUSH
23913: LD_INT 1
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: LIST
23920: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23921: LD_VAR 0 6
23925: PPUSH
23926: CALL_OW 264
23930: PUSH
23931: LD_INT 29
23933: PUSH
23934: EMPTY
23935: LIST
23936: IN
23937: IFFALSE 23958
// points := [ 70 , 200 , 400 ] ;
23939: LD_ADDR_VAR 0 9
23943: PUSH
23944: LD_INT 70
23946: PUSH
23947: LD_INT 200
23949: PUSH
23950: LD_INT 400
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: LIST
23957: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23958: LD_VAR 0 6
23962: PPUSH
23963: CALL_OW 264
23967: PUSH
23968: LD_INT 14
23970: PUSH
23971: LD_INT 53
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: IN
23978: IFFALSE 23999
// points := [ 40 , 10 , 20 ] ;
23980: LD_ADDR_VAR 0 9
23984: PUSH
23985: LD_INT 40
23987: PUSH
23988: LD_INT 10
23990: PUSH
23991: LD_INT 20
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: LIST
23998: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23999: LD_VAR 0 6
24003: PPUSH
24004: CALL_OW 264
24008: PUSH
24009: LD_INT 9
24011: PUSH
24012: EMPTY
24013: LIST
24014: IN
24015: IFFALSE 24036
// points := [ 5 , 70 , 20 ] ;
24017: LD_ADDR_VAR 0 9
24021: PUSH
24022: LD_INT 5
24024: PUSH
24025: LD_INT 70
24027: PUSH
24028: LD_INT 20
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: LIST
24035: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24036: LD_VAR 0 6
24040: PPUSH
24041: CALL_OW 264
24045: PUSH
24046: LD_INT 10
24048: PUSH
24049: EMPTY
24050: LIST
24051: IN
24052: IFFALSE 24073
// points := [ 35 , 110 , 70 ] ;
24054: LD_ADDR_VAR 0 9
24058: PUSH
24059: LD_INT 35
24061: PUSH
24062: LD_INT 110
24064: PUSH
24065: LD_INT 70
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: LIST
24072: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24073: LD_VAR 0 6
24077: PPUSH
24078: CALL_OW 265
24082: PUSH
24083: LD_INT 25
24085: EQUAL
24086: IFFALSE 24107
// points := [ 80 , 65 , 100 ] ;
24088: LD_ADDR_VAR 0 9
24092: PUSH
24093: LD_INT 80
24095: PUSH
24096: LD_INT 65
24098: PUSH
24099: LD_INT 100
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: LIST
24106: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24107: LD_VAR 0 6
24111: PPUSH
24112: CALL_OW 263
24116: PUSH
24117: LD_INT 1
24119: EQUAL
24120: IFFALSE 24155
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24122: LD_ADDR_VAR 0 10
24126: PUSH
24127: LD_VAR 0 10
24131: PUSH
24132: LD_VAR 0 6
24136: PPUSH
24137: CALL_OW 311
24141: PPUSH
24142: LD_INT 3
24144: PPUSH
24145: CALL_OW 259
24149: PUSH
24150: LD_INT 4
24152: MUL
24153: MUL
24154: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24155: LD_VAR 0 6
24159: PPUSH
24160: CALL_OW 263
24164: PUSH
24165: LD_INT 2
24167: EQUAL
24168: IFFALSE 24219
// begin j := IsControledBy ( i ) ;
24170: LD_ADDR_VAR 0 7
24174: PUSH
24175: LD_VAR 0 6
24179: PPUSH
24180: CALL_OW 312
24184: ST_TO_ADDR
// if j then
24185: LD_VAR 0 7
24189: IFFALSE 24219
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24191: LD_ADDR_VAR 0 10
24195: PUSH
24196: LD_VAR 0 10
24200: PUSH
24201: LD_VAR 0 7
24205: PPUSH
24206: LD_INT 3
24208: PPUSH
24209: CALL_OW 259
24213: PUSH
24214: LD_INT 3
24216: MUL
24217: MUL
24218: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24219: LD_VAR 0 6
24223: PPUSH
24224: CALL_OW 264
24228: PUSH
24229: LD_INT 5
24231: PUSH
24232: LD_INT 6
24234: PUSH
24235: LD_INT 46
24237: PUSH
24238: LD_INT 44
24240: PUSH
24241: LD_INT 47
24243: PUSH
24244: LD_INT 45
24246: PUSH
24247: LD_INT 28
24249: PUSH
24250: LD_INT 7
24252: PUSH
24253: LD_INT 27
24255: PUSH
24256: LD_INT 29
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: IN
24271: PUSH
24272: LD_VAR 0 1
24276: PPUSH
24277: LD_INT 52
24279: PPUSH
24280: CALL_OW 321
24284: PUSH
24285: LD_INT 2
24287: EQUAL
24288: AND
24289: IFFALSE 24306
// bpoints := bpoints * 1.2 ;
24291: LD_ADDR_VAR 0 10
24295: PUSH
24296: LD_VAR 0 10
24300: PUSH
24301: LD_REAL  1.20000000000000E+0000
24304: MUL
24305: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24306: LD_VAR 0 6
24310: PPUSH
24311: CALL_OW 264
24315: PUSH
24316: LD_INT 6
24318: PUSH
24319: LD_INT 46
24321: PUSH
24322: LD_INT 47
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: LIST
24329: IN
24330: IFFALSE 24347
// bpoints := bpoints * 1.2 ;
24332: LD_ADDR_VAR 0 10
24336: PUSH
24337: LD_VAR 0 10
24341: PUSH
24342: LD_REAL  1.20000000000000E+0000
24345: MUL
24346: ST_TO_ADDR
// end ; unit_building :
24347: GO 24361
24349: LD_INT 3
24351: DOUBLE
24352: EQUAL
24353: IFTRUE 24357
24355: GO 24360
24357: POP
// ; end ;
24358: GO 24361
24360: POP
// for j = 1 to 3 do
24361: LD_ADDR_VAR 0 7
24365: PUSH
24366: DOUBLE
24367: LD_INT 1
24369: DEC
24370: ST_TO_ADDR
24371: LD_INT 3
24373: PUSH
24374: FOR_TO
24375: IFFALSE 24428
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24377: LD_ADDR_VAR 0 5
24381: PUSH
24382: LD_VAR 0 5
24386: PPUSH
24387: LD_VAR 0 7
24391: PPUSH
24392: LD_VAR 0 5
24396: PUSH
24397: LD_VAR 0 7
24401: ARRAY
24402: PUSH
24403: LD_VAR 0 9
24407: PUSH
24408: LD_VAR 0 7
24412: ARRAY
24413: PUSH
24414: LD_VAR 0 10
24418: MUL
24419: PLUS
24420: PPUSH
24421: CALL_OW 1
24425: ST_TO_ADDR
24426: GO 24374
24428: POP
24429: POP
// end ;
24430: GO 22909
24432: POP
24433: POP
// result := Replace ( result , 4 , tmp ) ;
24434: LD_ADDR_VAR 0 5
24438: PUSH
24439: LD_VAR 0 5
24443: PPUSH
24444: LD_INT 4
24446: PPUSH
24447: LD_VAR 0 8
24451: PPUSH
24452: CALL_OW 1
24456: ST_TO_ADDR
// end ;
24457: LD_VAR 0 5
24461: RET
// export function DangerAtRange ( unit , range ) ; begin
24462: LD_INT 0
24464: PPUSH
// if not unit then
24465: LD_VAR 0 1
24469: NOT
24470: IFFALSE 24474
// exit ;
24472: GO 24519
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24474: LD_ADDR_VAR 0 3
24478: PUSH
24479: LD_VAR 0 1
24483: PPUSH
24484: CALL_OW 255
24488: PPUSH
24489: LD_VAR 0 1
24493: PPUSH
24494: CALL_OW 250
24498: PPUSH
24499: LD_VAR 0 1
24503: PPUSH
24504: CALL_OW 251
24508: PPUSH
24509: LD_VAR 0 2
24513: PPUSH
24514: CALL 22761 0 4
24518: ST_TO_ADDR
// end ;
24519: LD_VAR 0 3
24523: RET
// export function DangerInArea ( side , area ) ; begin
24524: LD_INT 0
24526: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24527: LD_ADDR_VAR 0 3
24531: PUSH
24532: LD_VAR 0 2
24536: PPUSH
24537: LD_INT 81
24539: PUSH
24540: LD_VAR 0 1
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PPUSH
24549: CALL_OW 70
24553: ST_TO_ADDR
// end ;
24554: LD_VAR 0 3
24558: RET
// export function IsExtension ( b ) ; begin
24559: LD_INT 0
24561: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24562: LD_ADDR_VAR 0 2
24566: PUSH
24567: LD_VAR 0 1
24571: PUSH
24572: LD_INT 23
24574: PUSH
24575: LD_INT 20
24577: PUSH
24578: LD_INT 22
24580: PUSH
24581: LD_INT 17
24583: PUSH
24584: LD_INT 24
24586: PUSH
24587: LD_INT 21
24589: PUSH
24590: LD_INT 19
24592: PUSH
24593: LD_INT 16
24595: PUSH
24596: LD_INT 25
24598: PUSH
24599: LD_INT 18
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: IN
24614: ST_TO_ADDR
// end ;
24615: LD_VAR 0 2
24619: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
24620: LD_INT 0
24622: PPUSH
24623: PPUSH
24624: PPUSH
// result := [ ] ;
24625: LD_ADDR_VAR 0 4
24629: PUSH
24630: EMPTY
24631: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24632: LD_ADDR_VAR 0 5
24636: PUSH
24637: LD_VAR 0 2
24641: PPUSH
24642: LD_INT 21
24644: PUSH
24645: LD_INT 3
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PPUSH
24652: CALL_OW 70
24656: ST_TO_ADDR
// if not tmp then
24657: LD_VAR 0 5
24661: NOT
24662: IFFALSE 24666
// exit ;
24664: GO 24730
// if checkLink then
24666: LD_VAR 0 3
24670: IFFALSE 24720
// begin for i in tmp do
24672: LD_ADDR_VAR 0 6
24676: PUSH
24677: LD_VAR 0 5
24681: PUSH
24682: FOR_IN
24683: IFFALSE 24718
// if GetBase ( i ) <> base then
24685: LD_VAR 0 6
24689: PPUSH
24690: CALL_OW 274
24694: PUSH
24695: LD_VAR 0 1
24699: NONEQUAL
24700: IFFALSE 24716
// ComLinkToBase ( base , i ) ;
24702: LD_VAR 0 1
24706: PPUSH
24707: LD_VAR 0 6
24711: PPUSH
24712: CALL_OW 169
24716: GO 24682
24718: POP
24719: POP
// end ; result := tmp ;
24720: LD_ADDR_VAR 0 4
24724: PUSH
24725: LD_VAR 0 5
24729: ST_TO_ADDR
// end ;
24730: LD_VAR 0 4
24734: RET
// export function ComComplete ( units , b ) ; var i ; begin
24735: LD_INT 0
24737: PPUSH
24738: PPUSH
// if not units then
24739: LD_VAR 0 1
24743: NOT
24744: IFFALSE 24748
// exit ;
24746: GO 24838
// for i in units do
24748: LD_ADDR_VAR 0 4
24752: PUSH
24753: LD_VAR 0 1
24757: PUSH
24758: FOR_IN
24759: IFFALSE 24836
// if BuildingStatus ( b ) = bs_build then
24761: LD_VAR 0 2
24765: PPUSH
24766: CALL_OW 461
24770: PUSH
24771: LD_INT 1
24773: EQUAL
24774: IFFALSE 24834
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24776: LD_VAR 0 4
24780: PPUSH
24781: LD_STRING h
24783: PUSH
24784: LD_VAR 0 2
24788: PPUSH
24789: CALL_OW 250
24793: PUSH
24794: LD_VAR 0 2
24798: PPUSH
24799: CALL_OW 251
24803: PUSH
24804: LD_VAR 0 2
24808: PUSH
24809: LD_INT 0
24811: PUSH
24812: LD_INT 0
24814: PUSH
24815: LD_INT 0
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: PUSH
24827: EMPTY
24828: LIST
24829: PPUSH
24830: CALL_OW 446
24834: GO 24758
24836: POP
24837: POP
// end ;
24838: LD_VAR 0 3
24842: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24843: LD_INT 0
24845: PPUSH
24846: PPUSH
24847: PPUSH
24848: PPUSH
24849: PPUSH
24850: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24851: LD_VAR 0 1
24855: NOT
24856: PUSH
24857: LD_VAR 0 1
24861: PPUSH
24862: CALL_OW 263
24866: PUSH
24867: LD_INT 2
24869: NONEQUAL
24870: OR
24871: IFFALSE 24875
// exit ;
24873: GO 25191
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24875: LD_ADDR_VAR 0 6
24879: PUSH
24880: LD_INT 22
24882: PUSH
24883: LD_VAR 0 1
24887: PPUSH
24888: CALL_OW 255
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 2
24899: PUSH
24900: LD_INT 30
24902: PUSH
24903: LD_INT 36
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: LD_INT 34
24912: PUSH
24913: LD_INT 31
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: LIST
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PPUSH
24929: CALL_OW 69
24933: ST_TO_ADDR
// if not tmp then
24934: LD_VAR 0 6
24938: NOT
24939: IFFALSE 24943
// exit ;
24941: GO 25191
// result := [ ] ;
24943: LD_ADDR_VAR 0 2
24947: PUSH
24948: EMPTY
24949: ST_TO_ADDR
// for i in tmp do
24950: LD_ADDR_VAR 0 3
24954: PUSH
24955: LD_VAR 0 6
24959: PUSH
24960: FOR_IN
24961: IFFALSE 25032
// begin t := UnitsInside ( i ) ;
24963: LD_ADDR_VAR 0 4
24967: PUSH
24968: LD_VAR 0 3
24972: PPUSH
24973: CALL_OW 313
24977: ST_TO_ADDR
// if t then
24978: LD_VAR 0 4
24982: IFFALSE 25030
// for j in t do
24984: LD_ADDR_VAR 0 7
24988: PUSH
24989: LD_VAR 0 4
24993: PUSH
24994: FOR_IN
24995: IFFALSE 25028
// result := Replace ( result , result + 1 , j ) ;
24997: LD_ADDR_VAR 0 2
25001: PUSH
25002: LD_VAR 0 2
25006: PPUSH
25007: LD_VAR 0 2
25011: PUSH
25012: LD_INT 1
25014: PLUS
25015: PPUSH
25016: LD_VAR 0 7
25020: PPUSH
25021: CALL_OW 1
25025: ST_TO_ADDR
25026: GO 24994
25028: POP
25029: POP
// end ;
25030: GO 24960
25032: POP
25033: POP
// if not result then
25034: LD_VAR 0 2
25038: NOT
25039: IFFALSE 25043
// exit ;
25041: GO 25191
// mech := result [ 1 ] ;
25043: LD_ADDR_VAR 0 5
25047: PUSH
25048: LD_VAR 0 2
25052: PUSH
25053: LD_INT 1
25055: ARRAY
25056: ST_TO_ADDR
// if result > 1 then
25057: LD_VAR 0 2
25061: PUSH
25062: LD_INT 1
25064: GREATER
25065: IFFALSE 25177
// begin for i = 2 to result do
25067: LD_ADDR_VAR 0 3
25071: PUSH
25072: DOUBLE
25073: LD_INT 2
25075: DEC
25076: ST_TO_ADDR
25077: LD_VAR 0 2
25081: PUSH
25082: FOR_TO
25083: IFFALSE 25175
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25085: LD_ADDR_VAR 0 4
25089: PUSH
25090: LD_VAR 0 2
25094: PUSH
25095: LD_VAR 0 3
25099: ARRAY
25100: PPUSH
25101: LD_INT 3
25103: PPUSH
25104: CALL_OW 259
25108: PUSH
25109: LD_VAR 0 2
25113: PUSH
25114: LD_VAR 0 3
25118: ARRAY
25119: PPUSH
25120: CALL_OW 432
25124: MINUS
25125: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25126: LD_VAR 0 4
25130: PUSH
25131: LD_VAR 0 5
25135: PPUSH
25136: LD_INT 3
25138: PPUSH
25139: CALL_OW 259
25143: PUSH
25144: LD_VAR 0 5
25148: PPUSH
25149: CALL_OW 432
25153: MINUS
25154: GREATEREQUAL
25155: IFFALSE 25173
// mech := result [ i ] ;
25157: LD_ADDR_VAR 0 5
25161: PUSH
25162: LD_VAR 0 2
25166: PUSH
25167: LD_VAR 0 3
25171: ARRAY
25172: ST_TO_ADDR
// end ;
25173: GO 25082
25175: POP
25176: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25177: LD_VAR 0 1
25181: PPUSH
25182: LD_VAR 0 5
25186: PPUSH
25187: CALL_OW 135
// end ;
25191: LD_VAR 0 2
25195: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25196: LD_INT 0
25198: PPUSH
25199: PPUSH
25200: PPUSH
25201: PPUSH
25202: PPUSH
25203: PPUSH
25204: PPUSH
25205: PPUSH
25206: PPUSH
25207: PPUSH
25208: PPUSH
25209: PPUSH
25210: PPUSH
// result := [ ] ;
25211: LD_ADDR_VAR 0 7
25215: PUSH
25216: EMPTY
25217: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25218: LD_VAR 0 1
25222: PPUSH
25223: CALL_OW 266
25227: PUSH
25228: LD_INT 0
25230: PUSH
25231: LD_INT 1
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: IN
25238: NOT
25239: IFFALSE 25243
// exit ;
25241: GO 26877
// if name then
25243: LD_VAR 0 3
25247: IFFALSE 25263
// SetBName ( base_dep , name ) ;
25249: LD_VAR 0 1
25253: PPUSH
25254: LD_VAR 0 3
25258: PPUSH
25259: CALL_OW 500
// base := GetBase ( base_dep ) ;
25263: LD_ADDR_VAR 0 15
25267: PUSH
25268: LD_VAR 0 1
25272: PPUSH
25273: CALL_OW 274
25277: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25278: LD_ADDR_VAR 0 16
25282: PUSH
25283: LD_VAR 0 1
25287: PPUSH
25288: CALL_OW 255
25292: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25293: LD_ADDR_VAR 0 17
25297: PUSH
25298: LD_VAR 0 1
25302: PPUSH
25303: CALL_OW 248
25307: ST_TO_ADDR
// if sources then
25308: LD_VAR 0 5
25312: IFFALSE 25359
// for i = 1 to 3 do
25314: LD_ADDR_VAR 0 8
25318: PUSH
25319: DOUBLE
25320: LD_INT 1
25322: DEC
25323: ST_TO_ADDR
25324: LD_INT 3
25326: PUSH
25327: FOR_TO
25328: IFFALSE 25357
// AddResourceType ( base , i , sources [ i ] ) ;
25330: LD_VAR 0 15
25334: PPUSH
25335: LD_VAR 0 8
25339: PPUSH
25340: LD_VAR 0 5
25344: PUSH
25345: LD_VAR 0 8
25349: ARRAY
25350: PPUSH
25351: CALL_OW 276
25355: GO 25327
25357: POP
25358: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25359: LD_ADDR_VAR 0 18
25363: PUSH
25364: LD_VAR 0 15
25368: PPUSH
25369: LD_VAR 0 2
25373: PPUSH
25374: LD_INT 1
25376: PPUSH
25377: CALL 24620 0 3
25381: ST_TO_ADDR
// InitHc ;
25382: CALL_OW 19
// InitUc ;
25386: CALL_OW 18
// uc_side := side ;
25390: LD_ADDR_OWVAR 20
25394: PUSH
25395: LD_VAR 0 16
25399: ST_TO_ADDR
// uc_nation := nation ;
25400: LD_ADDR_OWVAR 21
25404: PUSH
25405: LD_VAR 0 17
25409: ST_TO_ADDR
// if buildings then
25410: LD_VAR 0 18
25414: IFFALSE 26736
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25416: LD_ADDR_VAR 0 19
25420: PUSH
25421: LD_VAR 0 18
25425: PPUSH
25426: LD_INT 2
25428: PUSH
25429: LD_INT 30
25431: PUSH
25432: LD_INT 29
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: PUSH
25439: LD_INT 30
25441: PUSH
25442: LD_INT 30
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: LIST
25453: PPUSH
25454: CALL_OW 72
25458: ST_TO_ADDR
// if tmp then
25459: LD_VAR 0 19
25463: IFFALSE 25511
// for i in tmp do
25465: LD_ADDR_VAR 0 8
25469: PUSH
25470: LD_VAR 0 19
25474: PUSH
25475: FOR_IN
25476: IFFALSE 25509
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25478: LD_VAR 0 8
25482: PPUSH
25483: CALL_OW 250
25487: PPUSH
25488: LD_VAR 0 8
25492: PPUSH
25493: CALL_OW 251
25497: PPUSH
25498: LD_VAR 0 16
25502: PPUSH
25503: CALL_OW 441
25507: GO 25475
25509: POP
25510: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25511: LD_VAR 0 18
25515: PPUSH
25516: LD_INT 2
25518: PUSH
25519: LD_INT 30
25521: PUSH
25522: LD_INT 32
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 30
25531: PUSH
25532: LD_INT 33
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: LIST
25543: PPUSH
25544: CALL_OW 72
25548: IFFALSE 25636
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25550: LD_ADDR_VAR 0 8
25554: PUSH
25555: LD_VAR 0 18
25559: PPUSH
25560: LD_INT 2
25562: PUSH
25563: LD_INT 30
25565: PUSH
25566: LD_INT 32
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 30
25575: PUSH
25576: LD_INT 33
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: LIST
25587: PPUSH
25588: CALL_OW 72
25592: PUSH
25593: FOR_IN
25594: IFFALSE 25634
// begin if not GetBWeapon ( i ) then
25596: LD_VAR 0 8
25600: PPUSH
25601: CALL_OW 269
25605: NOT
25606: IFFALSE 25632
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25608: LD_VAR 0 8
25612: PPUSH
25613: LD_VAR 0 8
25617: PPUSH
25618: LD_VAR 0 2
25622: PPUSH
25623: CALL 26882 0 2
25627: PPUSH
25628: CALL_OW 431
// end ;
25632: GO 25593
25634: POP
25635: POP
// end ; for i = 1 to personel do
25636: LD_ADDR_VAR 0 8
25640: PUSH
25641: DOUBLE
25642: LD_INT 1
25644: DEC
25645: ST_TO_ADDR
25646: LD_VAR 0 6
25650: PUSH
25651: FOR_TO
25652: IFFALSE 26716
// begin if i > 4 then
25654: LD_VAR 0 8
25658: PUSH
25659: LD_INT 4
25661: GREATER
25662: IFFALSE 25666
// break ;
25664: GO 26716
// case i of 1 :
25666: LD_VAR 0 8
25670: PUSH
25671: LD_INT 1
25673: DOUBLE
25674: EQUAL
25675: IFTRUE 25679
25677: GO 25759
25679: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25680: LD_ADDR_VAR 0 12
25684: PUSH
25685: LD_VAR 0 18
25689: PPUSH
25690: LD_INT 22
25692: PUSH
25693: LD_VAR 0 16
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: LD_INT 58
25704: PUSH
25705: EMPTY
25706: LIST
25707: PUSH
25708: LD_INT 2
25710: PUSH
25711: LD_INT 30
25713: PUSH
25714: LD_INT 32
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 30
25723: PUSH
25724: LD_INT 4
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 30
25733: PUSH
25734: LD_INT 5
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: LIST
25751: PPUSH
25752: CALL_OW 72
25756: ST_TO_ADDR
25757: GO 25981
25759: LD_INT 2
25761: DOUBLE
25762: EQUAL
25763: IFTRUE 25767
25765: GO 25829
25767: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25768: LD_ADDR_VAR 0 12
25772: PUSH
25773: LD_VAR 0 18
25777: PPUSH
25778: LD_INT 22
25780: PUSH
25781: LD_VAR 0 16
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 2
25792: PUSH
25793: LD_INT 30
25795: PUSH
25796: LD_INT 0
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: LD_INT 30
25805: PUSH
25806: LD_INT 1
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: LIST
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PPUSH
25822: CALL_OW 72
25826: ST_TO_ADDR
25827: GO 25981
25829: LD_INT 3
25831: DOUBLE
25832: EQUAL
25833: IFTRUE 25837
25835: GO 25899
25837: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25838: LD_ADDR_VAR 0 12
25842: PUSH
25843: LD_VAR 0 18
25847: PPUSH
25848: LD_INT 22
25850: PUSH
25851: LD_VAR 0 16
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 2
25862: PUSH
25863: LD_INT 30
25865: PUSH
25866: LD_INT 2
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: LD_INT 30
25875: PUSH
25876: LD_INT 3
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: LIST
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PPUSH
25892: CALL_OW 72
25896: ST_TO_ADDR
25897: GO 25981
25899: LD_INT 4
25901: DOUBLE
25902: EQUAL
25903: IFTRUE 25907
25905: GO 25980
25907: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25908: LD_ADDR_VAR 0 12
25912: PUSH
25913: LD_VAR 0 18
25917: PPUSH
25918: LD_INT 22
25920: PUSH
25921: LD_VAR 0 16
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: LD_INT 2
25932: PUSH
25933: LD_INT 30
25935: PUSH
25936: LD_INT 6
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: LD_INT 30
25945: PUSH
25946: LD_INT 7
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: LD_INT 30
25955: PUSH
25956: LD_INT 8
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PPUSH
25973: CALL_OW 72
25977: ST_TO_ADDR
25978: GO 25981
25980: POP
// if i = 1 then
25981: LD_VAR 0 8
25985: PUSH
25986: LD_INT 1
25988: EQUAL
25989: IFFALSE 26100
// begin tmp := [ ] ;
25991: LD_ADDR_VAR 0 19
25995: PUSH
25996: EMPTY
25997: ST_TO_ADDR
// for j in f do
25998: LD_ADDR_VAR 0 9
26002: PUSH
26003: LD_VAR 0 12
26007: PUSH
26008: FOR_IN
26009: IFFALSE 26082
// if GetBType ( j ) = b_bunker then
26011: LD_VAR 0 9
26015: PPUSH
26016: CALL_OW 266
26020: PUSH
26021: LD_INT 32
26023: EQUAL
26024: IFFALSE 26051
// tmp := Insert ( tmp , 1 , j ) else
26026: LD_ADDR_VAR 0 19
26030: PUSH
26031: LD_VAR 0 19
26035: PPUSH
26036: LD_INT 1
26038: PPUSH
26039: LD_VAR 0 9
26043: PPUSH
26044: CALL_OW 2
26048: ST_TO_ADDR
26049: GO 26080
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26051: LD_ADDR_VAR 0 19
26055: PUSH
26056: LD_VAR 0 19
26060: PPUSH
26061: LD_VAR 0 19
26065: PUSH
26066: LD_INT 1
26068: PLUS
26069: PPUSH
26070: LD_VAR 0 9
26074: PPUSH
26075: CALL_OW 2
26079: ST_TO_ADDR
26080: GO 26008
26082: POP
26083: POP
// if tmp then
26084: LD_VAR 0 19
26088: IFFALSE 26100
// f := tmp ;
26090: LD_ADDR_VAR 0 12
26094: PUSH
26095: LD_VAR 0 19
26099: ST_TO_ADDR
// end ; x := personel [ i ] ;
26100: LD_ADDR_VAR 0 13
26104: PUSH
26105: LD_VAR 0 6
26109: PUSH
26110: LD_VAR 0 8
26114: ARRAY
26115: ST_TO_ADDR
// if x = - 1 then
26116: LD_VAR 0 13
26120: PUSH
26121: LD_INT 1
26123: NEG
26124: EQUAL
26125: IFFALSE 26334
// begin for j in f do
26127: LD_ADDR_VAR 0 9
26131: PUSH
26132: LD_VAR 0 12
26136: PUSH
26137: FOR_IN
26138: IFFALSE 26330
// repeat InitHc ;
26140: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26144: LD_VAR 0 9
26148: PPUSH
26149: CALL_OW 266
26153: PUSH
26154: LD_INT 5
26156: EQUAL
26157: IFFALSE 26227
// begin if UnitsInside ( j ) < 3 then
26159: LD_VAR 0 9
26163: PPUSH
26164: CALL_OW 313
26168: PUSH
26169: LD_INT 3
26171: LESS
26172: IFFALSE 26208
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26174: LD_INT 0
26176: PPUSH
26177: LD_INT 5
26179: PUSH
26180: LD_INT 8
26182: PUSH
26183: LD_INT 9
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: LIST
26190: PUSH
26191: LD_VAR 0 17
26195: ARRAY
26196: PPUSH
26197: LD_VAR 0 4
26201: PPUSH
26202: CALL_OW 380
26206: GO 26225
// PrepareHuman ( false , i , skill ) ;
26208: LD_INT 0
26210: PPUSH
26211: LD_VAR 0 8
26215: PPUSH
26216: LD_VAR 0 4
26220: PPUSH
26221: CALL_OW 380
// end else
26225: GO 26244
// PrepareHuman ( false , i , skill ) ;
26227: LD_INT 0
26229: PPUSH
26230: LD_VAR 0 8
26234: PPUSH
26235: LD_VAR 0 4
26239: PPUSH
26240: CALL_OW 380
// un := CreateHuman ;
26244: LD_ADDR_VAR 0 14
26248: PUSH
26249: CALL_OW 44
26253: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26254: LD_ADDR_VAR 0 7
26258: PUSH
26259: LD_VAR 0 7
26263: PPUSH
26264: LD_INT 1
26266: PPUSH
26267: LD_VAR 0 14
26271: PPUSH
26272: CALL_OW 2
26276: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26277: LD_VAR 0 14
26281: PPUSH
26282: LD_VAR 0 9
26286: PPUSH
26287: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26291: LD_VAR 0 9
26295: PPUSH
26296: CALL_OW 313
26300: PUSH
26301: LD_INT 6
26303: EQUAL
26304: PUSH
26305: LD_VAR 0 9
26309: PPUSH
26310: CALL_OW 266
26314: PUSH
26315: LD_INT 32
26317: PUSH
26318: LD_INT 31
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: IN
26325: OR
26326: IFFALSE 26140
26328: GO 26137
26330: POP
26331: POP
// end else
26332: GO 26714
// for j = 1 to x do
26334: LD_ADDR_VAR 0 9
26338: PUSH
26339: DOUBLE
26340: LD_INT 1
26342: DEC
26343: ST_TO_ADDR
26344: LD_VAR 0 13
26348: PUSH
26349: FOR_TO
26350: IFFALSE 26712
// begin InitHc ;
26352: CALL_OW 19
// if not f then
26356: LD_VAR 0 12
26360: NOT
26361: IFFALSE 26450
// begin PrepareHuman ( false , i , skill ) ;
26363: LD_INT 0
26365: PPUSH
26366: LD_VAR 0 8
26370: PPUSH
26371: LD_VAR 0 4
26375: PPUSH
26376: CALL_OW 380
// un := CreateHuman ;
26380: LD_ADDR_VAR 0 14
26384: PUSH
26385: CALL_OW 44
26389: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26390: LD_ADDR_VAR 0 7
26394: PUSH
26395: LD_VAR 0 7
26399: PPUSH
26400: LD_INT 1
26402: PPUSH
26403: LD_VAR 0 14
26407: PPUSH
26408: CALL_OW 2
26412: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26413: LD_VAR 0 14
26417: PPUSH
26418: LD_VAR 0 1
26422: PPUSH
26423: CALL_OW 250
26427: PPUSH
26428: LD_VAR 0 1
26432: PPUSH
26433: CALL_OW 251
26437: PPUSH
26438: LD_INT 10
26440: PPUSH
26441: LD_INT 0
26443: PPUSH
26444: CALL_OW 50
// continue ;
26448: GO 26349
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26450: LD_VAR 0 12
26454: PUSH
26455: LD_INT 1
26457: ARRAY
26458: PPUSH
26459: CALL_OW 313
26463: PUSH
26464: LD_VAR 0 12
26468: PUSH
26469: LD_INT 1
26471: ARRAY
26472: PPUSH
26473: CALL_OW 266
26477: PUSH
26478: LD_INT 32
26480: PUSH
26481: LD_INT 31
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: IN
26488: AND
26489: PUSH
26490: LD_VAR 0 12
26494: PUSH
26495: LD_INT 1
26497: ARRAY
26498: PPUSH
26499: CALL_OW 313
26503: PUSH
26504: LD_INT 6
26506: EQUAL
26507: OR
26508: IFFALSE 26528
// f := Delete ( f , 1 ) ;
26510: LD_ADDR_VAR 0 12
26514: PUSH
26515: LD_VAR 0 12
26519: PPUSH
26520: LD_INT 1
26522: PPUSH
26523: CALL_OW 3
26527: ST_TO_ADDR
// if not f then
26528: LD_VAR 0 12
26532: NOT
26533: IFFALSE 26551
// begin x := x + 2 ;
26535: LD_ADDR_VAR 0 13
26539: PUSH
26540: LD_VAR 0 13
26544: PUSH
26545: LD_INT 2
26547: PLUS
26548: ST_TO_ADDR
// continue ;
26549: GO 26349
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26551: LD_VAR 0 12
26555: PUSH
26556: LD_INT 1
26558: ARRAY
26559: PPUSH
26560: CALL_OW 266
26564: PUSH
26565: LD_INT 5
26567: EQUAL
26568: IFFALSE 26642
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26570: LD_VAR 0 12
26574: PUSH
26575: LD_INT 1
26577: ARRAY
26578: PPUSH
26579: CALL_OW 313
26583: PUSH
26584: LD_INT 3
26586: LESS
26587: IFFALSE 26623
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26589: LD_INT 0
26591: PPUSH
26592: LD_INT 5
26594: PUSH
26595: LD_INT 8
26597: PUSH
26598: LD_INT 9
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: LIST
26605: PUSH
26606: LD_VAR 0 17
26610: ARRAY
26611: PPUSH
26612: LD_VAR 0 4
26616: PPUSH
26617: CALL_OW 380
26621: GO 26640
// PrepareHuman ( false , i , skill ) ;
26623: LD_INT 0
26625: PPUSH
26626: LD_VAR 0 8
26630: PPUSH
26631: LD_VAR 0 4
26635: PPUSH
26636: CALL_OW 380
// end else
26640: GO 26659
// PrepareHuman ( false , i , skill ) ;
26642: LD_INT 0
26644: PPUSH
26645: LD_VAR 0 8
26649: PPUSH
26650: LD_VAR 0 4
26654: PPUSH
26655: CALL_OW 380
// un := CreateHuman ;
26659: LD_ADDR_VAR 0 14
26663: PUSH
26664: CALL_OW 44
26668: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26669: LD_ADDR_VAR 0 7
26673: PUSH
26674: LD_VAR 0 7
26678: PPUSH
26679: LD_INT 1
26681: PPUSH
26682: LD_VAR 0 14
26686: PPUSH
26687: CALL_OW 2
26691: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26692: LD_VAR 0 14
26696: PPUSH
26697: LD_VAR 0 12
26701: PUSH
26702: LD_INT 1
26704: ARRAY
26705: PPUSH
26706: CALL_OW 52
// end ;
26710: GO 26349
26712: POP
26713: POP
// end ;
26714: GO 25651
26716: POP
26717: POP
// result := result ^ buildings ;
26718: LD_ADDR_VAR 0 7
26722: PUSH
26723: LD_VAR 0 7
26727: PUSH
26728: LD_VAR 0 18
26732: ADD
26733: ST_TO_ADDR
// end else
26734: GO 26877
// begin for i = 1 to personel do
26736: LD_ADDR_VAR 0 8
26740: PUSH
26741: DOUBLE
26742: LD_INT 1
26744: DEC
26745: ST_TO_ADDR
26746: LD_VAR 0 6
26750: PUSH
26751: FOR_TO
26752: IFFALSE 26875
// begin if i > 4 then
26754: LD_VAR 0 8
26758: PUSH
26759: LD_INT 4
26761: GREATER
26762: IFFALSE 26766
// break ;
26764: GO 26875
// x := personel [ i ] ;
26766: LD_ADDR_VAR 0 13
26770: PUSH
26771: LD_VAR 0 6
26775: PUSH
26776: LD_VAR 0 8
26780: ARRAY
26781: ST_TO_ADDR
// if x = - 1 then
26782: LD_VAR 0 13
26786: PUSH
26787: LD_INT 1
26789: NEG
26790: EQUAL
26791: IFFALSE 26795
// continue ;
26793: GO 26751
// PrepareHuman ( false , i , skill ) ;
26795: LD_INT 0
26797: PPUSH
26798: LD_VAR 0 8
26802: PPUSH
26803: LD_VAR 0 4
26807: PPUSH
26808: CALL_OW 380
// un := CreateHuman ;
26812: LD_ADDR_VAR 0 14
26816: PUSH
26817: CALL_OW 44
26821: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26822: LD_VAR 0 14
26826: PPUSH
26827: LD_VAR 0 1
26831: PPUSH
26832: CALL_OW 250
26836: PPUSH
26837: LD_VAR 0 1
26841: PPUSH
26842: CALL_OW 251
26846: PPUSH
26847: LD_INT 10
26849: PPUSH
26850: LD_INT 0
26852: PPUSH
26853: CALL_OW 50
// result := result ^ un ;
26857: LD_ADDR_VAR 0 7
26861: PUSH
26862: LD_VAR 0 7
26866: PUSH
26867: LD_VAR 0 14
26871: ADD
26872: ST_TO_ADDR
// end ;
26873: GO 26751
26875: POP
26876: POP
// end ; end ;
26877: LD_VAR 0 7
26881: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26882: LD_INT 0
26884: PPUSH
26885: PPUSH
26886: PPUSH
26887: PPUSH
26888: PPUSH
26889: PPUSH
26890: PPUSH
26891: PPUSH
26892: PPUSH
26893: PPUSH
26894: PPUSH
26895: PPUSH
26896: PPUSH
26897: PPUSH
26898: PPUSH
26899: PPUSH
// result := false ;
26900: LD_ADDR_VAR 0 3
26904: PUSH
26905: LD_INT 0
26907: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26908: LD_VAR 0 1
26912: NOT
26913: PUSH
26914: LD_VAR 0 1
26918: PPUSH
26919: CALL_OW 266
26923: PUSH
26924: LD_INT 32
26926: PUSH
26927: LD_INT 33
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: IN
26934: NOT
26935: OR
26936: IFFALSE 26940
// exit ;
26938: GO 28049
// nat := GetNation ( tower ) ;
26940: LD_ADDR_VAR 0 12
26944: PUSH
26945: LD_VAR 0 1
26949: PPUSH
26950: CALL_OW 248
26954: ST_TO_ADDR
// side := GetSide ( tower ) ;
26955: LD_ADDR_VAR 0 16
26959: PUSH
26960: LD_VAR 0 1
26964: PPUSH
26965: CALL_OW 255
26969: ST_TO_ADDR
// x := GetX ( tower ) ;
26970: LD_ADDR_VAR 0 10
26974: PUSH
26975: LD_VAR 0 1
26979: PPUSH
26980: CALL_OW 250
26984: ST_TO_ADDR
// y := GetY ( tower ) ;
26985: LD_ADDR_VAR 0 11
26989: PUSH
26990: LD_VAR 0 1
26994: PPUSH
26995: CALL_OW 251
26999: ST_TO_ADDR
// if not x or not y then
27000: LD_VAR 0 10
27004: NOT
27005: PUSH
27006: LD_VAR 0 11
27010: NOT
27011: OR
27012: IFFALSE 27016
// exit ;
27014: GO 28049
// weapon := 0 ;
27016: LD_ADDR_VAR 0 18
27020: PUSH
27021: LD_INT 0
27023: ST_TO_ADDR
// fac_list := [ ] ;
27024: LD_ADDR_VAR 0 17
27028: PUSH
27029: EMPTY
27030: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27031: LD_ADDR_VAR 0 6
27035: PUSH
27036: LD_VAR 0 1
27040: PPUSH
27041: CALL_OW 274
27045: PPUSH
27046: LD_VAR 0 2
27050: PPUSH
27051: LD_INT 0
27053: PPUSH
27054: CALL 24620 0 3
27058: PPUSH
27059: LD_INT 30
27061: PUSH
27062: LD_INT 3
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PPUSH
27069: CALL_OW 72
27073: ST_TO_ADDR
// if not factories then
27074: LD_VAR 0 6
27078: NOT
27079: IFFALSE 27083
// exit ;
27081: GO 28049
// for i in factories do
27083: LD_ADDR_VAR 0 8
27087: PUSH
27088: LD_VAR 0 6
27092: PUSH
27093: FOR_IN
27094: IFFALSE 27119
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27096: LD_ADDR_VAR 0 17
27100: PUSH
27101: LD_VAR 0 17
27105: PUSH
27106: LD_VAR 0 8
27110: PPUSH
27111: CALL_OW 478
27115: UNION
27116: ST_TO_ADDR
27117: GO 27093
27119: POP
27120: POP
// if not fac_list then
27121: LD_VAR 0 17
27125: NOT
27126: IFFALSE 27130
// exit ;
27128: GO 28049
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27130: LD_ADDR_VAR 0 5
27134: PUSH
27135: LD_INT 4
27137: PUSH
27138: LD_INT 5
27140: PUSH
27141: LD_INT 9
27143: PUSH
27144: LD_INT 10
27146: PUSH
27147: LD_INT 6
27149: PUSH
27150: LD_INT 7
27152: PUSH
27153: LD_INT 11
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 27
27167: PUSH
27168: LD_INT 28
27170: PUSH
27171: LD_INT 26
27173: PUSH
27174: LD_INT 30
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 43
27185: PUSH
27186: LD_INT 44
27188: PUSH
27189: LD_INT 46
27191: PUSH
27192: LD_INT 45
27194: PUSH
27195: LD_INT 47
27197: PUSH
27198: LD_INT 49
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: LIST
27213: PUSH
27214: LD_VAR 0 12
27218: ARRAY
27219: ST_TO_ADDR
// list := list isect fac_list ;
27220: LD_ADDR_VAR 0 5
27224: PUSH
27225: LD_VAR 0 5
27229: PUSH
27230: LD_VAR 0 17
27234: ISECT
27235: ST_TO_ADDR
// if not list then
27236: LD_VAR 0 5
27240: NOT
27241: IFFALSE 27245
// exit ;
27243: GO 28049
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27245: LD_VAR 0 12
27249: PUSH
27250: LD_INT 3
27252: EQUAL
27253: PUSH
27254: LD_INT 49
27256: PUSH
27257: LD_VAR 0 5
27261: IN
27262: AND
27263: PUSH
27264: LD_INT 31
27266: PPUSH
27267: LD_VAR 0 16
27271: PPUSH
27272: CALL_OW 321
27276: PUSH
27277: LD_INT 2
27279: EQUAL
27280: AND
27281: IFFALSE 27341
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27283: LD_INT 22
27285: PUSH
27286: LD_VAR 0 16
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 35
27297: PUSH
27298: LD_INT 49
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 91
27307: PUSH
27308: LD_VAR 0 1
27312: PUSH
27313: LD_INT 10
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: LIST
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: LIST
27325: PPUSH
27326: CALL_OW 69
27330: NOT
27331: IFFALSE 27341
// weapon := ru_time_lapser ;
27333: LD_ADDR_VAR 0 18
27337: PUSH
27338: LD_INT 49
27340: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27341: LD_VAR 0 12
27345: PUSH
27346: LD_INT 1
27348: PUSH
27349: LD_INT 2
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: IN
27356: PUSH
27357: LD_INT 11
27359: PUSH
27360: LD_VAR 0 5
27364: IN
27365: PUSH
27366: LD_INT 30
27368: PUSH
27369: LD_VAR 0 5
27373: IN
27374: OR
27375: AND
27376: PUSH
27377: LD_INT 6
27379: PPUSH
27380: LD_VAR 0 16
27384: PPUSH
27385: CALL_OW 321
27389: PUSH
27390: LD_INT 2
27392: EQUAL
27393: AND
27394: IFFALSE 27559
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27396: LD_INT 22
27398: PUSH
27399: LD_VAR 0 16
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 2
27410: PUSH
27411: LD_INT 35
27413: PUSH
27414: LD_INT 11
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 35
27423: PUSH
27424: LD_INT 30
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: LIST
27435: PUSH
27436: LD_INT 91
27438: PUSH
27439: LD_VAR 0 1
27443: PUSH
27444: LD_INT 18
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: LIST
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: LIST
27456: PPUSH
27457: CALL_OW 69
27461: NOT
27462: PUSH
27463: LD_INT 22
27465: PUSH
27466: LD_VAR 0 16
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 2
27477: PUSH
27478: LD_INT 30
27480: PUSH
27481: LD_INT 32
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 30
27490: PUSH
27491: LD_INT 33
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: LIST
27502: PUSH
27503: LD_INT 91
27505: PUSH
27506: LD_VAR 0 1
27510: PUSH
27511: LD_INT 12
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: LIST
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: LIST
27523: PUSH
27524: EMPTY
27525: LIST
27526: PPUSH
27527: CALL_OW 69
27531: PUSH
27532: LD_INT 2
27534: GREATER
27535: AND
27536: IFFALSE 27559
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27538: LD_ADDR_VAR 0 18
27542: PUSH
27543: LD_INT 11
27545: PUSH
27546: LD_INT 30
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: PUSH
27553: LD_VAR 0 12
27557: ARRAY
27558: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27559: LD_VAR 0 18
27563: NOT
27564: PUSH
27565: LD_INT 40
27567: PPUSH
27568: LD_VAR 0 16
27572: PPUSH
27573: CALL_OW 321
27577: PUSH
27578: LD_INT 2
27580: EQUAL
27581: AND
27582: PUSH
27583: LD_INT 7
27585: PUSH
27586: LD_VAR 0 5
27590: IN
27591: PUSH
27592: LD_INT 28
27594: PUSH
27595: LD_VAR 0 5
27599: IN
27600: OR
27601: PUSH
27602: LD_INT 45
27604: PUSH
27605: LD_VAR 0 5
27609: IN
27610: OR
27611: AND
27612: IFFALSE 27866
// begin hex := GetHexInfo ( x , y ) ;
27614: LD_ADDR_VAR 0 4
27618: PUSH
27619: LD_VAR 0 10
27623: PPUSH
27624: LD_VAR 0 11
27628: PPUSH
27629: CALL_OW 546
27633: ST_TO_ADDR
// if hex [ 1 ] then
27634: LD_VAR 0 4
27638: PUSH
27639: LD_INT 1
27641: ARRAY
27642: IFFALSE 27646
// exit ;
27644: GO 28049
// height := hex [ 2 ] ;
27646: LD_ADDR_VAR 0 15
27650: PUSH
27651: LD_VAR 0 4
27655: PUSH
27656: LD_INT 2
27658: ARRAY
27659: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27660: LD_ADDR_VAR 0 14
27664: PUSH
27665: LD_INT 0
27667: PUSH
27668: LD_INT 2
27670: PUSH
27671: LD_INT 3
27673: PUSH
27674: LD_INT 5
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: ST_TO_ADDR
// for i in tmp do
27683: LD_ADDR_VAR 0 8
27687: PUSH
27688: LD_VAR 0 14
27692: PUSH
27693: FOR_IN
27694: IFFALSE 27864
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27696: LD_ADDR_VAR 0 9
27700: PUSH
27701: LD_VAR 0 10
27705: PPUSH
27706: LD_VAR 0 8
27710: PPUSH
27711: LD_INT 5
27713: PPUSH
27714: CALL_OW 272
27718: PUSH
27719: LD_VAR 0 11
27723: PPUSH
27724: LD_VAR 0 8
27728: PPUSH
27729: LD_INT 5
27731: PPUSH
27732: CALL_OW 273
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27741: LD_VAR 0 9
27745: PUSH
27746: LD_INT 1
27748: ARRAY
27749: PPUSH
27750: LD_VAR 0 9
27754: PUSH
27755: LD_INT 2
27757: ARRAY
27758: PPUSH
27759: CALL_OW 488
27763: IFFALSE 27862
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27765: LD_ADDR_VAR 0 4
27769: PUSH
27770: LD_VAR 0 9
27774: PUSH
27775: LD_INT 1
27777: ARRAY
27778: PPUSH
27779: LD_VAR 0 9
27783: PUSH
27784: LD_INT 2
27786: ARRAY
27787: PPUSH
27788: CALL_OW 546
27792: ST_TO_ADDR
// if hex [ 1 ] then
27793: LD_VAR 0 4
27797: PUSH
27798: LD_INT 1
27800: ARRAY
27801: IFFALSE 27805
// continue ;
27803: GO 27693
// h := hex [ 2 ] ;
27805: LD_ADDR_VAR 0 13
27809: PUSH
27810: LD_VAR 0 4
27814: PUSH
27815: LD_INT 2
27817: ARRAY
27818: ST_TO_ADDR
// if h + 7 < height then
27819: LD_VAR 0 13
27823: PUSH
27824: LD_INT 7
27826: PLUS
27827: PUSH
27828: LD_VAR 0 15
27832: LESS
27833: IFFALSE 27862
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27835: LD_ADDR_VAR 0 18
27839: PUSH
27840: LD_INT 7
27842: PUSH
27843: LD_INT 28
27845: PUSH
27846: LD_INT 45
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: LIST
27853: PUSH
27854: LD_VAR 0 12
27858: ARRAY
27859: ST_TO_ADDR
// break ;
27860: GO 27864
// end ; end ; end ;
27862: GO 27693
27864: POP
27865: POP
// end ; if not weapon then
27866: LD_VAR 0 18
27870: NOT
27871: IFFALSE 27931
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27873: LD_ADDR_VAR 0 5
27877: PUSH
27878: LD_VAR 0 5
27882: PUSH
27883: LD_INT 11
27885: PUSH
27886: LD_INT 30
27888: PUSH
27889: LD_INT 49
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: LIST
27896: DIFF
27897: ST_TO_ADDR
// if not list then
27898: LD_VAR 0 5
27902: NOT
27903: IFFALSE 27907
// exit ;
27905: GO 28049
// weapon := list [ rand ( 1 , list ) ] ;
27907: LD_ADDR_VAR 0 18
27911: PUSH
27912: LD_VAR 0 5
27916: PUSH
27917: LD_INT 1
27919: PPUSH
27920: LD_VAR 0 5
27924: PPUSH
27925: CALL_OW 12
27929: ARRAY
27930: ST_TO_ADDR
// end ; if weapon then
27931: LD_VAR 0 18
27935: IFFALSE 28049
// begin tmp := CostOfWeapon ( weapon ) ;
27937: LD_ADDR_VAR 0 14
27941: PUSH
27942: LD_VAR 0 18
27946: PPUSH
27947: CALL_OW 451
27951: ST_TO_ADDR
// j := GetBase ( tower ) ;
27952: LD_ADDR_VAR 0 9
27956: PUSH
27957: LD_VAR 0 1
27961: PPUSH
27962: CALL_OW 274
27966: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27967: LD_VAR 0 9
27971: PPUSH
27972: LD_INT 1
27974: PPUSH
27975: CALL_OW 275
27979: PUSH
27980: LD_VAR 0 14
27984: PUSH
27985: LD_INT 1
27987: ARRAY
27988: GREATEREQUAL
27989: PUSH
27990: LD_VAR 0 9
27994: PPUSH
27995: LD_INT 2
27997: PPUSH
27998: CALL_OW 275
28002: PUSH
28003: LD_VAR 0 14
28007: PUSH
28008: LD_INT 2
28010: ARRAY
28011: GREATEREQUAL
28012: AND
28013: PUSH
28014: LD_VAR 0 9
28018: PPUSH
28019: LD_INT 3
28021: PPUSH
28022: CALL_OW 275
28026: PUSH
28027: LD_VAR 0 14
28031: PUSH
28032: LD_INT 3
28034: ARRAY
28035: GREATEREQUAL
28036: AND
28037: IFFALSE 28049
// result := weapon ;
28039: LD_ADDR_VAR 0 3
28043: PUSH
28044: LD_VAR 0 18
28048: ST_TO_ADDR
// end ; end ;
28049: LD_VAR 0 3
28053: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28054: LD_INT 0
28056: PPUSH
28057: PPUSH
// result := true ;
28058: LD_ADDR_VAR 0 3
28062: PUSH
28063: LD_INT 1
28065: ST_TO_ADDR
// if array1 = array2 then
28066: LD_VAR 0 1
28070: PUSH
28071: LD_VAR 0 2
28075: EQUAL
28076: IFFALSE 28136
// begin for i = 1 to array1 do
28078: LD_ADDR_VAR 0 4
28082: PUSH
28083: DOUBLE
28084: LD_INT 1
28086: DEC
28087: ST_TO_ADDR
28088: LD_VAR 0 1
28092: PUSH
28093: FOR_TO
28094: IFFALSE 28132
// if array1 [ i ] <> array2 [ i ] then
28096: LD_VAR 0 1
28100: PUSH
28101: LD_VAR 0 4
28105: ARRAY
28106: PUSH
28107: LD_VAR 0 2
28111: PUSH
28112: LD_VAR 0 4
28116: ARRAY
28117: NONEQUAL
28118: IFFALSE 28130
// begin result := false ;
28120: LD_ADDR_VAR 0 3
28124: PUSH
28125: LD_INT 0
28127: ST_TO_ADDR
// break ;
28128: GO 28132
// end ;
28130: GO 28093
28132: POP
28133: POP
// end else
28134: GO 28144
// result := false ;
28136: LD_ADDR_VAR 0 3
28140: PUSH
28141: LD_INT 0
28143: ST_TO_ADDR
// end ;
28144: LD_VAR 0 3
28148: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28149: LD_INT 0
28151: PPUSH
28152: PPUSH
// if not array1 or not array2 then
28153: LD_VAR 0 1
28157: NOT
28158: PUSH
28159: LD_VAR 0 2
28163: NOT
28164: OR
28165: IFFALSE 28169
// exit ;
28167: GO 28233
// result := true ;
28169: LD_ADDR_VAR 0 3
28173: PUSH
28174: LD_INT 1
28176: ST_TO_ADDR
// for i = 1 to array1 do
28177: LD_ADDR_VAR 0 4
28181: PUSH
28182: DOUBLE
28183: LD_INT 1
28185: DEC
28186: ST_TO_ADDR
28187: LD_VAR 0 1
28191: PUSH
28192: FOR_TO
28193: IFFALSE 28231
// if array1 [ i ] <> array2 [ i ] then
28195: LD_VAR 0 1
28199: PUSH
28200: LD_VAR 0 4
28204: ARRAY
28205: PUSH
28206: LD_VAR 0 2
28210: PUSH
28211: LD_VAR 0 4
28215: ARRAY
28216: NONEQUAL
28217: IFFALSE 28229
// begin result := false ;
28219: LD_ADDR_VAR 0 3
28223: PUSH
28224: LD_INT 0
28226: ST_TO_ADDR
// break ;
28227: GO 28231
// end ;
28229: GO 28192
28231: POP
28232: POP
// end ;
28233: LD_VAR 0 3
28237: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28238: LD_INT 0
28240: PPUSH
28241: PPUSH
28242: PPUSH
// pom := GetBase ( fac ) ;
28243: LD_ADDR_VAR 0 5
28247: PUSH
28248: LD_VAR 0 1
28252: PPUSH
28253: CALL_OW 274
28257: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28258: LD_ADDR_VAR 0 4
28262: PUSH
28263: LD_VAR 0 2
28267: PUSH
28268: LD_INT 1
28270: ARRAY
28271: PPUSH
28272: LD_VAR 0 2
28276: PUSH
28277: LD_INT 2
28279: ARRAY
28280: PPUSH
28281: LD_VAR 0 2
28285: PUSH
28286: LD_INT 3
28288: ARRAY
28289: PPUSH
28290: LD_VAR 0 2
28294: PUSH
28295: LD_INT 4
28297: ARRAY
28298: PPUSH
28299: CALL_OW 449
28303: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28304: LD_ADDR_VAR 0 3
28308: PUSH
28309: LD_VAR 0 5
28313: PPUSH
28314: LD_INT 1
28316: PPUSH
28317: CALL_OW 275
28321: PUSH
28322: LD_VAR 0 4
28326: PUSH
28327: LD_INT 1
28329: ARRAY
28330: GREATEREQUAL
28331: PUSH
28332: LD_VAR 0 5
28336: PPUSH
28337: LD_INT 2
28339: PPUSH
28340: CALL_OW 275
28344: PUSH
28345: LD_VAR 0 4
28349: PUSH
28350: LD_INT 2
28352: ARRAY
28353: GREATEREQUAL
28354: AND
28355: PUSH
28356: LD_VAR 0 5
28360: PPUSH
28361: LD_INT 3
28363: PPUSH
28364: CALL_OW 275
28368: PUSH
28369: LD_VAR 0 4
28373: PUSH
28374: LD_INT 3
28376: ARRAY
28377: GREATEREQUAL
28378: AND
28379: ST_TO_ADDR
// end ;
28380: LD_VAR 0 3
28384: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28385: LD_INT 0
28387: PPUSH
28388: PPUSH
28389: PPUSH
28390: PPUSH
// pom := GetBase ( building ) ;
28391: LD_ADDR_VAR 0 3
28395: PUSH
28396: LD_VAR 0 1
28400: PPUSH
28401: CALL_OW 274
28405: ST_TO_ADDR
// if not pom then
28406: LD_VAR 0 3
28410: NOT
28411: IFFALSE 28415
// exit ;
28413: GO 28585
// btype := GetBType ( building ) ;
28415: LD_ADDR_VAR 0 5
28419: PUSH
28420: LD_VAR 0 1
28424: PPUSH
28425: CALL_OW 266
28429: ST_TO_ADDR
// if btype = b_armoury then
28430: LD_VAR 0 5
28434: PUSH
28435: LD_INT 4
28437: EQUAL
28438: IFFALSE 28448
// btype := b_barracks ;
28440: LD_ADDR_VAR 0 5
28444: PUSH
28445: LD_INT 5
28447: ST_TO_ADDR
// if btype = b_depot then
28448: LD_VAR 0 5
28452: PUSH
28453: LD_INT 0
28455: EQUAL
28456: IFFALSE 28466
// btype := b_warehouse ;
28458: LD_ADDR_VAR 0 5
28462: PUSH
28463: LD_INT 1
28465: ST_TO_ADDR
// if btype = b_workshop then
28466: LD_VAR 0 5
28470: PUSH
28471: LD_INT 2
28473: EQUAL
28474: IFFALSE 28484
// btype := b_factory ;
28476: LD_ADDR_VAR 0 5
28480: PUSH
28481: LD_INT 3
28483: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28484: LD_ADDR_VAR 0 4
28488: PUSH
28489: LD_VAR 0 5
28493: PPUSH
28494: LD_VAR 0 1
28498: PPUSH
28499: CALL_OW 248
28503: PPUSH
28504: CALL_OW 450
28508: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28509: LD_ADDR_VAR 0 2
28513: PUSH
28514: LD_VAR 0 3
28518: PPUSH
28519: LD_INT 1
28521: PPUSH
28522: CALL_OW 275
28526: PUSH
28527: LD_VAR 0 4
28531: PUSH
28532: LD_INT 1
28534: ARRAY
28535: GREATEREQUAL
28536: PUSH
28537: LD_VAR 0 3
28541: PPUSH
28542: LD_INT 2
28544: PPUSH
28545: CALL_OW 275
28549: PUSH
28550: LD_VAR 0 4
28554: PUSH
28555: LD_INT 2
28557: ARRAY
28558: GREATEREQUAL
28559: AND
28560: PUSH
28561: LD_VAR 0 3
28565: PPUSH
28566: LD_INT 3
28568: PPUSH
28569: CALL_OW 275
28573: PUSH
28574: LD_VAR 0 4
28578: PUSH
28579: LD_INT 3
28581: ARRAY
28582: GREATEREQUAL
28583: AND
28584: ST_TO_ADDR
// end ;
28585: LD_VAR 0 2
28589: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28590: LD_INT 0
28592: PPUSH
28593: PPUSH
28594: PPUSH
// pom := GetBase ( building ) ;
28595: LD_ADDR_VAR 0 4
28599: PUSH
28600: LD_VAR 0 1
28604: PPUSH
28605: CALL_OW 274
28609: ST_TO_ADDR
// if not pom then
28610: LD_VAR 0 4
28614: NOT
28615: IFFALSE 28619
// exit ;
28617: GO 28720
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28619: LD_ADDR_VAR 0 5
28623: PUSH
28624: LD_VAR 0 2
28628: PPUSH
28629: LD_VAR 0 1
28633: PPUSH
28634: CALL_OW 248
28638: PPUSH
28639: CALL_OW 450
28643: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28644: LD_ADDR_VAR 0 3
28648: PUSH
28649: LD_VAR 0 4
28653: PPUSH
28654: LD_INT 1
28656: PPUSH
28657: CALL_OW 275
28661: PUSH
28662: LD_VAR 0 5
28666: PUSH
28667: LD_INT 1
28669: ARRAY
28670: GREATEREQUAL
28671: PUSH
28672: LD_VAR 0 4
28676: PPUSH
28677: LD_INT 2
28679: PPUSH
28680: CALL_OW 275
28684: PUSH
28685: LD_VAR 0 5
28689: PUSH
28690: LD_INT 2
28692: ARRAY
28693: GREATEREQUAL
28694: AND
28695: PUSH
28696: LD_VAR 0 4
28700: PPUSH
28701: LD_INT 3
28703: PPUSH
28704: CALL_OW 275
28708: PUSH
28709: LD_VAR 0 5
28713: PUSH
28714: LD_INT 3
28716: ARRAY
28717: GREATEREQUAL
28718: AND
28719: ST_TO_ADDR
// end ;
28720: LD_VAR 0 3
28724: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28725: LD_INT 0
28727: PPUSH
28728: PPUSH
28729: PPUSH
28730: PPUSH
28731: PPUSH
28732: PPUSH
28733: PPUSH
28734: PPUSH
28735: PPUSH
28736: PPUSH
28737: PPUSH
// result := false ;
28738: LD_ADDR_VAR 0 8
28742: PUSH
28743: LD_INT 0
28745: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28746: LD_VAR 0 5
28750: NOT
28751: PUSH
28752: LD_VAR 0 1
28756: NOT
28757: OR
28758: PUSH
28759: LD_VAR 0 2
28763: NOT
28764: OR
28765: PUSH
28766: LD_VAR 0 3
28770: NOT
28771: OR
28772: IFFALSE 28776
// exit ;
28774: GO 29590
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28776: LD_ADDR_VAR 0 14
28780: PUSH
28781: LD_VAR 0 1
28785: PPUSH
28786: LD_VAR 0 2
28790: PPUSH
28791: LD_VAR 0 3
28795: PPUSH
28796: LD_VAR 0 4
28800: PPUSH
28801: LD_VAR 0 5
28805: PUSH
28806: LD_INT 1
28808: ARRAY
28809: PPUSH
28810: CALL_OW 248
28814: PPUSH
28815: LD_INT 0
28817: PPUSH
28818: CALL 30843 0 6
28822: ST_TO_ADDR
// if not hexes then
28823: LD_VAR 0 14
28827: NOT
28828: IFFALSE 28832
// exit ;
28830: GO 29590
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28832: LD_ADDR_VAR 0 17
28836: PUSH
28837: LD_VAR 0 5
28841: PPUSH
28842: LD_INT 22
28844: PUSH
28845: LD_VAR 0 13
28849: PPUSH
28850: CALL_OW 255
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 2
28861: PUSH
28862: LD_INT 30
28864: PUSH
28865: LD_INT 0
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 30
28874: PUSH
28875: LD_INT 1
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: LIST
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PPUSH
28891: CALL_OW 72
28895: ST_TO_ADDR
// for i = 1 to hexes do
28896: LD_ADDR_VAR 0 9
28900: PUSH
28901: DOUBLE
28902: LD_INT 1
28904: DEC
28905: ST_TO_ADDR
28906: LD_VAR 0 14
28910: PUSH
28911: FOR_TO
28912: IFFALSE 29588
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28914: LD_ADDR_VAR 0 13
28918: PUSH
28919: LD_VAR 0 14
28923: PUSH
28924: LD_VAR 0 9
28928: ARRAY
28929: PUSH
28930: LD_INT 1
28932: ARRAY
28933: PPUSH
28934: LD_VAR 0 14
28938: PUSH
28939: LD_VAR 0 9
28943: ARRAY
28944: PUSH
28945: LD_INT 2
28947: ARRAY
28948: PPUSH
28949: CALL_OW 428
28953: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28954: LD_VAR 0 14
28958: PUSH
28959: LD_VAR 0 9
28963: ARRAY
28964: PUSH
28965: LD_INT 1
28967: ARRAY
28968: PPUSH
28969: LD_VAR 0 14
28973: PUSH
28974: LD_VAR 0 9
28978: ARRAY
28979: PUSH
28980: LD_INT 2
28982: ARRAY
28983: PPUSH
28984: CALL_OW 351
28988: PUSH
28989: LD_VAR 0 14
28993: PUSH
28994: LD_VAR 0 9
28998: ARRAY
28999: PUSH
29000: LD_INT 1
29002: ARRAY
29003: PPUSH
29004: LD_VAR 0 14
29008: PUSH
29009: LD_VAR 0 9
29013: ARRAY
29014: PUSH
29015: LD_INT 2
29017: ARRAY
29018: PPUSH
29019: CALL_OW 488
29023: NOT
29024: OR
29025: PUSH
29026: LD_VAR 0 13
29030: PPUSH
29031: CALL_OW 247
29035: PUSH
29036: LD_INT 3
29038: EQUAL
29039: OR
29040: IFFALSE 29046
// exit ;
29042: POP
29043: POP
29044: GO 29590
// if not tmp then
29046: LD_VAR 0 13
29050: NOT
29051: IFFALSE 29055
// continue ;
29053: GO 28911
// result := true ;
29055: LD_ADDR_VAR 0 8
29059: PUSH
29060: LD_INT 1
29062: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29063: LD_VAR 0 6
29067: PUSH
29068: LD_VAR 0 13
29072: PPUSH
29073: CALL_OW 247
29077: PUSH
29078: LD_INT 2
29080: EQUAL
29081: AND
29082: PUSH
29083: LD_VAR 0 13
29087: PPUSH
29088: CALL_OW 263
29092: PUSH
29093: LD_INT 1
29095: EQUAL
29096: AND
29097: IFFALSE 29261
// begin if IsDrivenBy ( tmp ) then
29099: LD_VAR 0 13
29103: PPUSH
29104: CALL_OW 311
29108: IFFALSE 29112
// continue ;
29110: GO 28911
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29112: LD_VAR 0 6
29116: PPUSH
29117: LD_INT 3
29119: PUSH
29120: LD_INT 60
29122: PUSH
29123: EMPTY
29124: LIST
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: LD_INT 3
29132: PUSH
29133: LD_INT 55
29135: PUSH
29136: EMPTY
29137: LIST
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PPUSH
29147: CALL_OW 72
29151: IFFALSE 29259
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29153: LD_ADDR_VAR 0 18
29157: PUSH
29158: LD_VAR 0 6
29162: PPUSH
29163: LD_INT 3
29165: PUSH
29166: LD_INT 60
29168: PUSH
29169: EMPTY
29170: LIST
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: LD_INT 3
29178: PUSH
29179: LD_INT 55
29181: PUSH
29182: EMPTY
29183: LIST
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PPUSH
29193: CALL_OW 72
29197: PUSH
29198: LD_INT 1
29200: ARRAY
29201: ST_TO_ADDR
// if IsInUnit ( driver ) then
29202: LD_VAR 0 18
29206: PPUSH
29207: CALL_OW 310
29211: IFFALSE 29222
// ComExit ( driver ) ;
29213: LD_VAR 0 18
29217: PPUSH
29218: CALL 54624 0 1
// AddComEnterUnit ( driver , tmp ) ;
29222: LD_VAR 0 18
29226: PPUSH
29227: LD_VAR 0 13
29231: PPUSH
29232: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29236: LD_VAR 0 18
29240: PPUSH
29241: LD_VAR 0 7
29245: PPUSH
29246: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29250: LD_VAR 0 18
29254: PPUSH
29255: CALL_OW 181
// end ; continue ;
29259: GO 28911
// end ; if not cleaners or not tmp in cleaners then
29261: LD_VAR 0 6
29265: NOT
29266: PUSH
29267: LD_VAR 0 13
29271: PUSH
29272: LD_VAR 0 6
29276: IN
29277: NOT
29278: OR
29279: IFFALSE 29586
// begin if dep then
29281: LD_VAR 0 17
29285: IFFALSE 29421
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29287: LD_ADDR_VAR 0 16
29291: PUSH
29292: LD_VAR 0 17
29296: PUSH
29297: LD_INT 1
29299: ARRAY
29300: PPUSH
29301: CALL_OW 250
29305: PPUSH
29306: LD_VAR 0 17
29310: PUSH
29311: LD_INT 1
29313: ARRAY
29314: PPUSH
29315: CALL_OW 254
29319: PPUSH
29320: LD_INT 5
29322: PPUSH
29323: CALL_OW 272
29327: PUSH
29328: LD_VAR 0 17
29332: PUSH
29333: LD_INT 1
29335: ARRAY
29336: PPUSH
29337: CALL_OW 251
29341: PPUSH
29342: LD_VAR 0 17
29346: PUSH
29347: LD_INT 1
29349: ARRAY
29350: PPUSH
29351: CALL_OW 254
29355: PPUSH
29356: LD_INT 5
29358: PPUSH
29359: CALL_OW 273
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29368: LD_VAR 0 16
29372: PUSH
29373: LD_INT 1
29375: ARRAY
29376: PPUSH
29377: LD_VAR 0 16
29381: PUSH
29382: LD_INT 2
29384: ARRAY
29385: PPUSH
29386: CALL_OW 488
29390: IFFALSE 29421
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29392: LD_VAR 0 13
29396: PPUSH
29397: LD_VAR 0 16
29401: PUSH
29402: LD_INT 1
29404: ARRAY
29405: PPUSH
29406: LD_VAR 0 16
29410: PUSH
29411: LD_INT 2
29413: ARRAY
29414: PPUSH
29415: CALL_OW 111
// continue ;
29419: GO 28911
// end ; end ; r := GetDir ( tmp ) ;
29421: LD_ADDR_VAR 0 15
29425: PUSH
29426: LD_VAR 0 13
29430: PPUSH
29431: CALL_OW 254
29435: ST_TO_ADDR
// if r = 5 then
29436: LD_VAR 0 15
29440: PUSH
29441: LD_INT 5
29443: EQUAL
29444: IFFALSE 29454
// r := 0 ;
29446: LD_ADDR_VAR 0 15
29450: PUSH
29451: LD_INT 0
29453: ST_TO_ADDR
// for j = r to 5 do
29454: LD_ADDR_VAR 0 10
29458: PUSH
29459: DOUBLE
29460: LD_VAR 0 15
29464: DEC
29465: ST_TO_ADDR
29466: LD_INT 5
29468: PUSH
29469: FOR_TO
29470: IFFALSE 29584
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29472: LD_ADDR_VAR 0 11
29476: PUSH
29477: LD_VAR 0 13
29481: PPUSH
29482: CALL_OW 250
29486: PPUSH
29487: LD_VAR 0 10
29491: PPUSH
29492: LD_INT 2
29494: PPUSH
29495: CALL_OW 272
29499: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29500: LD_ADDR_VAR 0 12
29504: PUSH
29505: LD_VAR 0 13
29509: PPUSH
29510: CALL_OW 251
29514: PPUSH
29515: LD_VAR 0 10
29519: PPUSH
29520: LD_INT 2
29522: PPUSH
29523: CALL_OW 273
29527: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29528: LD_VAR 0 11
29532: PPUSH
29533: LD_VAR 0 12
29537: PPUSH
29538: CALL_OW 488
29542: PUSH
29543: LD_VAR 0 11
29547: PPUSH
29548: LD_VAR 0 12
29552: PPUSH
29553: CALL_OW 428
29557: NOT
29558: AND
29559: IFFALSE 29582
// begin ComMoveXY ( tmp , _x , _y ) ;
29561: LD_VAR 0 13
29565: PPUSH
29566: LD_VAR 0 11
29570: PPUSH
29571: LD_VAR 0 12
29575: PPUSH
29576: CALL_OW 111
// break ;
29580: GO 29584
// end ; end ;
29582: GO 29469
29584: POP
29585: POP
// end ; end ;
29586: GO 28911
29588: POP
29589: POP
// end ;
29590: LD_VAR 0 8
29594: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29595: LD_INT 0
29597: PPUSH
// result := true ;
29598: LD_ADDR_VAR 0 3
29602: PUSH
29603: LD_INT 1
29605: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29606: LD_VAR 0 2
29610: PUSH
29611: LD_INT 24
29613: DOUBLE
29614: EQUAL
29615: IFTRUE 29625
29617: LD_INT 33
29619: DOUBLE
29620: EQUAL
29621: IFTRUE 29625
29623: GO 29650
29625: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29626: LD_ADDR_VAR 0 3
29630: PUSH
29631: LD_INT 32
29633: PPUSH
29634: LD_VAR 0 1
29638: PPUSH
29639: CALL_OW 321
29643: PUSH
29644: LD_INT 2
29646: EQUAL
29647: ST_TO_ADDR
29648: GO 29966
29650: LD_INT 20
29652: DOUBLE
29653: EQUAL
29654: IFTRUE 29658
29656: GO 29683
29658: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29659: LD_ADDR_VAR 0 3
29663: PUSH
29664: LD_INT 6
29666: PPUSH
29667: LD_VAR 0 1
29671: PPUSH
29672: CALL_OW 321
29676: PUSH
29677: LD_INT 2
29679: EQUAL
29680: ST_TO_ADDR
29681: GO 29966
29683: LD_INT 22
29685: DOUBLE
29686: EQUAL
29687: IFTRUE 29697
29689: LD_INT 36
29691: DOUBLE
29692: EQUAL
29693: IFTRUE 29697
29695: GO 29722
29697: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29698: LD_ADDR_VAR 0 3
29702: PUSH
29703: LD_INT 15
29705: PPUSH
29706: LD_VAR 0 1
29710: PPUSH
29711: CALL_OW 321
29715: PUSH
29716: LD_INT 2
29718: EQUAL
29719: ST_TO_ADDR
29720: GO 29966
29722: LD_INT 30
29724: DOUBLE
29725: EQUAL
29726: IFTRUE 29730
29728: GO 29755
29730: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29731: LD_ADDR_VAR 0 3
29735: PUSH
29736: LD_INT 20
29738: PPUSH
29739: LD_VAR 0 1
29743: PPUSH
29744: CALL_OW 321
29748: PUSH
29749: LD_INT 2
29751: EQUAL
29752: ST_TO_ADDR
29753: GO 29966
29755: LD_INT 28
29757: DOUBLE
29758: EQUAL
29759: IFTRUE 29769
29761: LD_INT 21
29763: DOUBLE
29764: EQUAL
29765: IFTRUE 29769
29767: GO 29794
29769: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29770: LD_ADDR_VAR 0 3
29774: PUSH
29775: LD_INT 21
29777: PPUSH
29778: LD_VAR 0 1
29782: PPUSH
29783: CALL_OW 321
29787: PUSH
29788: LD_INT 2
29790: EQUAL
29791: ST_TO_ADDR
29792: GO 29966
29794: LD_INT 16
29796: DOUBLE
29797: EQUAL
29798: IFTRUE 29802
29800: GO 29827
29802: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29803: LD_ADDR_VAR 0 3
29807: PUSH
29808: LD_INT 84
29810: PPUSH
29811: LD_VAR 0 1
29815: PPUSH
29816: CALL_OW 321
29820: PUSH
29821: LD_INT 2
29823: EQUAL
29824: ST_TO_ADDR
29825: GO 29966
29827: LD_INT 19
29829: DOUBLE
29830: EQUAL
29831: IFTRUE 29841
29833: LD_INT 23
29835: DOUBLE
29836: EQUAL
29837: IFTRUE 29841
29839: GO 29866
29841: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29842: LD_ADDR_VAR 0 3
29846: PUSH
29847: LD_INT 83
29849: PPUSH
29850: LD_VAR 0 1
29854: PPUSH
29855: CALL_OW 321
29859: PUSH
29860: LD_INT 2
29862: EQUAL
29863: ST_TO_ADDR
29864: GO 29966
29866: LD_INT 17
29868: DOUBLE
29869: EQUAL
29870: IFTRUE 29874
29872: GO 29899
29874: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29875: LD_ADDR_VAR 0 3
29879: PUSH
29880: LD_INT 39
29882: PPUSH
29883: LD_VAR 0 1
29887: PPUSH
29888: CALL_OW 321
29892: PUSH
29893: LD_INT 2
29895: EQUAL
29896: ST_TO_ADDR
29897: GO 29966
29899: LD_INT 18
29901: DOUBLE
29902: EQUAL
29903: IFTRUE 29907
29905: GO 29932
29907: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29908: LD_ADDR_VAR 0 3
29912: PUSH
29913: LD_INT 40
29915: PPUSH
29916: LD_VAR 0 1
29920: PPUSH
29921: CALL_OW 321
29925: PUSH
29926: LD_INT 2
29928: EQUAL
29929: ST_TO_ADDR
29930: GO 29966
29932: LD_INT 27
29934: DOUBLE
29935: EQUAL
29936: IFTRUE 29940
29938: GO 29965
29940: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29941: LD_ADDR_VAR 0 3
29945: PUSH
29946: LD_INT 35
29948: PPUSH
29949: LD_VAR 0 1
29953: PPUSH
29954: CALL_OW 321
29958: PUSH
29959: LD_INT 2
29961: EQUAL
29962: ST_TO_ADDR
29963: GO 29966
29965: POP
// end ;
29966: LD_VAR 0 3
29970: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29971: LD_INT 0
29973: PPUSH
29974: PPUSH
29975: PPUSH
29976: PPUSH
29977: PPUSH
29978: PPUSH
29979: PPUSH
29980: PPUSH
29981: PPUSH
29982: PPUSH
29983: PPUSH
// result := false ;
29984: LD_ADDR_VAR 0 6
29988: PUSH
29989: LD_INT 0
29991: ST_TO_ADDR
// if btype = b_depot then
29992: LD_VAR 0 2
29996: PUSH
29997: LD_INT 0
29999: EQUAL
30000: IFFALSE 30012
// begin result := true ;
30002: LD_ADDR_VAR 0 6
30006: PUSH
30007: LD_INT 1
30009: ST_TO_ADDR
// exit ;
30010: GO 30838
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30012: LD_VAR 0 1
30016: NOT
30017: PUSH
30018: LD_VAR 0 1
30022: PPUSH
30023: CALL_OW 266
30027: PUSH
30028: LD_INT 0
30030: PUSH
30031: LD_INT 1
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: IN
30038: NOT
30039: OR
30040: PUSH
30041: LD_VAR 0 2
30045: NOT
30046: OR
30047: PUSH
30048: LD_VAR 0 5
30052: PUSH
30053: LD_INT 0
30055: PUSH
30056: LD_INT 1
30058: PUSH
30059: LD_INT 2
30061: PUSH
30062: LD_INT 3
30064: PUSH
30065: LD_INT 4
30067: PUSH
30068: LD_INT 5
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: IN
30079: NOT
30080: OR
30081: PUSH
30082: LD_VAR 0 3
30086: PPUSH
30087: LD_VAR 0 4
30091: PPUSH
30092: CALL_OW 488
30096: NOT
30097: OR
30098: IFFALSE 30102
// exit ;
30100: GO 30838
// side := GetSide ( depot ) ;
30102: LD_ADDR_VAR 0 9
30106: PUSH
30107: LD_VAR 0 1
30111: PPUSH
30112: CALL_OW 255
30116: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30117: LD_VAR 0 9
30121: PPUSH
30122: LD_VAR 0 2
30126: PPUSH
30127: CALL 29595 0 2
30131: NOT
30132: IFFALSE 30136
// exit ;
30134: GO 30838
// pom := GetBase ( depot ) ;
30136: LD_ADDR_VAR 0 10
30140: PUSH
30141: LD_VAR 0 1
30145: PPUSH
30146: CALL_OW 274
30150: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30151: LD_ADDR_VAR 0 11
30155: PUSH
30156: LD_VAR 0 2
30160: PPUSH
30161: LD_VAR 0 1
30165: PPUSH
30166: CALL_OW 248
30170: PPUSH
30171: CALL_OW 450
30175: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30176: LD_VAR 0 10
30180: PPUSH
30181: LD_INT 1
30183: PPUSH
30184: CALL_OW 275
30188: PUSH
30189: LD_VAR 0 11
30193: PUSH
30194: LD_INT 1
30196: ARRAY
30197: GREATEREQUAL
30198: PUSH
30199: LD_VAR 0 10
30203: PPUSH
30204: LD_INT 2
30206: PPUSH
30207: CALL_OW 275
30211: PUSH
30212: LD_VAR 0 11
30216: PUSH
30217: LD_INT 2
30219: ARRAY
30220: GREATEREQUAL
30221: AND
30222: PUSH
30223: LD_VAR 0 10
30227: PPUSH
30228: LD_INT 3
30230: PPUSH
30231: CALL_OW 275
30235: PUSH
30236: LD_VAR 0 11
30240: PUSH
30241: LD_INT 3
30243: ARRAY
30244: GREATEREQUAL
30245: AND
30246: NOT
30247: IFFALSE 30251
// exit ;
30249: GO 30838
// if GetBType ( depot ) = b_depot then
30251: LD_VAR 0 1
30255: PPUSH
30256: CALL_OW 266
30260: PUSH
30261: LD_INT 0
30263: EQUAL
30264: IFFALSE 30276
// dist := 28 else
30266: LD_ADDR_VAR 0 14
30270: PUSH
30271: LD_INT 28
30273: ST_TO_ADDR
30274: GO 30284
// dist := 36 ;
30276: LD_ADDR_VAR 0 14
30280: PUSH
30281: LD_INT 36
30283: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30284: LD_VAR 0 1
30288: PPUSH
30289: LD_VAR 0 3
30293: PPUSH
30294: LD_VAR 0 4
30298: PPUSH
30299: CALL_OW 297
30303: PUSH
30304: LD_VAR 0 14
30308: GREATER
30309: IFFALSE 30313
// exit ;
30311: GO 30838
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30313: LD_ADDR_VAR 0 12
30317: PUSH
30318: LD_VAR 0 2
30322: PPUSH
30323: LD_VAR 0 3
30327: PPUSH
30328: LD_VAR 0 4
30332: PPUSH
30333: LD_VAR 0 5
30337: PPUSH
30338: LD_VAR 0 1
30342: PPUSH
30343: CALL_OW 248
30347: PPUSH
30348: LD_INT 0
30350: PPUSH
30351: CALL 30843 0 6
30355: ST_TO_ADDR
// if not hexes then
30356: LD_VAR 0 12
30360: NOT
30361: IFFALSE 30365
// exit ;
30363: GO 30838
// hex := GetHexInfo ( x , y ) ;
30365: LD_ADDR_VAR 0 15
30369: PUSH
30370: LD_VAR 0 3
30374: PPUSH
30375: LD_VAR 0 4
30379: PPUSH
30380: CALL_OW 546
30384: ST_TO_ADDR
// if hex [ 1 ] then
30385: LD_VAR 0 15
30389: PUSH
30390: LD_INT 1
30392: ARRAY
30393: IFFALSE 30397
// exit ;
30395: GO 30838
// height := hex [ 2 ] ;
30397: LD_ADDR_VAR 0 13
30401: PUSH
30402: LD_VAR 0 15
30406: PUSH
30407: LD_INT 2
30409: ARRAY
30410: ST_TO_ADDR
// for i = 1 to hexes do
30411: LD_ADDR_VAR 0 7
30415: PUSH
30416: DOUBLE
30417: LD_INT 1
30419: DEC
30420: ST_TO_ADDR
30421: LD_VAR 0 12
30425: PUSH
30426: FOR_TO
30427: IFFALSE 30757
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30429: LD_VAR 0 12
30433: PUSH
30434: LD_VAR 0 7
30438: ARRAY
30439: PUSH
30440: LD_INT 1
30442: ARRAY
30443: PPUSH
30444: LD_VAR 0 12
30448: PUSH
30449: LD_VAR 0 7
30453: ARRAY
30454: PUSH
30455: LD_INT 2
30457: ARRAY
30458: PPUSH
30459: CALL_OW 488
30463: NOT
30464: PUSH
30465: LD_VAR 0 12
30469: PUSH
30470: LD_VAR 0 7
30474: ARRAY
30475: PUSH
30476: LD_INT 1
30478: ARRAY
30479: PPUSH
30480: LD_VAR 0 12
30484: PUSH
30485: LD_VAR 0 7
30489: ARRAY
30490: PUSH
30491: LD_INT 2
30493: ARRAY
30494: PPUSH
30495: CALL_OW 428
30499: PUSH
30500: LD_INT 0
30502: GREATER
30503: OR
30504: PUSH
30505: LD_VAR 0 12
30509: PUSH
30510: LD_VAR 0 7
30514: ARRAY
30515: PUSH
30516: LD_INT 1
30518: ARRAY
30519: PPUSH
30520: LD_VAR 0 12
30524: PUSH
30525: LD_VAR 0 7
30529: ARRAY
30530: PUSH
30531: LD_INT 2
30533: ARRAY
30534: PPUSH
30535: CALL_OW 351
30539: OR
30540: IFFALSE 30546
// exit ;
30542: POP
30543: POP
30544: GO 30838
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30546: LD_ADDR_VAR 0 8
30550: PUSH
30551: LD_VAR 0 12
30555: PUSH
30556: LD_VAR 0 7
30560: ARRAY
30561: PUSH
30562: LD_INT 1
30564: ARRAY
30565: PPUSH
30566: LD_VAR 0 12
30570: PUSH
30571: LD_VAR 0 7
30575: ARRAY
30576: PUSH
30577: LD_INT 2
30579: ARRAY
30580: PPUSH
30581: CALL_OW 546
30585: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30586: LD_VAR 0 8
30590: PUSH
30591: LD_INT 1
30593: ARRAY
30594: PUSH
30595: LD_VAR 0 8
30599: PUSH
30600: LD_INT 2
30602: ARRAY
30603: PUSH
30604: LD_VAR 0 13
30608: PUSH
30609: LD_INT 2
30611: PLUS
30612: GREATER
30613: OR
30614: PUSH
30615: LD_VAR 0 8
30619: PUSH
30620: LD_INT 2
30622: ARRAY
30623: PUSH
30624: LD_VAR 0 13
30628: PUSH
30629: LD_INT 2
30631: MINUS
30632: LESS
30633: OR
30634: PUSH
30635: LD_VAR 0 8
30639: PUSH
30640: LD_INT 3
30642: ARRAY
30643: PUSH
30644: LD_INT 0
30646: PUSH
30647: LD_INT 8
30649: PUSH
30650: LD_INT 9
30652: PUSH
30653: LD_INT 10
30655: PUSH
30656: LD_INT 11
30658: PUSH
30659: LD_INT 12
30661: PUSH
30662: LD_INT 13
30664: PUSH
30665: LD_INT 16
30667: PUSH
30668: LD_INT 17
30670: PUSH
30671: LD_INT 18
30673: PUSH
30674: LD_INT 19
30676: PUSH
30677: LD_INT 20
30679: PUSH
30680: LD_INT 21
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: IN
30698: NOT
30699: OR
30700: PUSH
30701: LD_VAR 0 8
30705: PUSH
30706: LD_INT 5
30708: ARRAY
30709: NOT
30710: OR
30711: PUSH
30712: LD_VAR 0 8
30716: PUSH
30717: LD_INT 6
30719: ARRAY
30720: PUSH
30721: LD_INT 1
30723: PUSH
30724: LD_INT 2
30726: PUSH
30727: LD_INT 7
30729: PUSH
30730: LD_INT 9
30732: PUSH
30733: LD_INT 10
30735: PUSH
30736: LD_INT 11
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: IN
30747: NOT
30748: OR
30749: IFFALSE 30755
// exit ;
30751: POP
30752: POP
30753: GO 30838
// end ;
30755: GO 30426
30757: POP
30758: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30759: LD_VAR 0 9
30763: PPUSH
30764: LD_VAR 0 3
30768: PPUSH
30769: LD_VAR 0 4
30773: PPUSH
30774: LD_INT 20
30776: PPUSH
30777: CALL 22761 0 4
30781: PUSH
30782: LD_INT 4
30784: ARRAY
30785: IFFALSE 30789
// exit ;
30787: GO 30838
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30789: LD_VAR 0 2
30793: PUSH
30794: LD_INT 29
30796: PUSH
30797: LD_INT 30
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: IN
30804: PUSH
30805: LD_VAR 0 3
30809: PPUSH
30810: LD_VAR 0 4
30814: PPUSH
30815: LD_VAR 0 9
30819: PPUSH
30820: CALL_OW 440
30824: NOT
30825: AND
30826: IFFALSE 30830
// exit ;
30828: GO 30838
// result := true ;
30830: LD_ADDR_VAR 0 6
30834: PUSH
30835: LD_INT 1
30837: ST_TO_ADDR
// end ;
30838: LD_VAR 0 6
30842: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30843: LD_INT 0
30845: PPUSH
30846: PPUSH
30847: PPUSH
30848: PPUSH
30849: PPUSH
30850: PPUSH
30851: PPUSH
30852: PPUSH
30853: PPUSH
30854: PPUSH
30855: PPUSH
30856: PPUSH
30857: PPUSH
30858: PPUSH
30859: PPUSH
30860: PPUSH
30861: PPUSH
30862: PPUSH
30863: PPUSH
30864: PPUSH
30865: PPUSH
30866: PPUSH
30867: PPUSH
30868: PPUSH
30869: PPUSH
30870: PPUSH
30871: PPUSH
30872: PPUSH
30873: PPUSH
30874: PPUSH
30875: PPUSH
30876: PPUSH
30877: PPUSH
30878: PPUSH
30879: PPUSH
30880: PPUSH
30881: PPUSH
30882: PPUSH
30883: PPUSH
30884: PPUSH
30885: PPUSH
30886: PPUSH
30887: PPUSH
30888: PPUSH
30889: PPUSH
30890: PPUSH
30891: PPUSH
30892: PPUSH
30893: PPUSH
30894: PPUSH
30895: PPUSH
30896: PPUSH
30897: PPUSH
30898: PPUSH
30899: PPUSH
30900: PPUSH
30901: PPUSH
30902: PPUSH
// result = [ ] ;
30903: LD_ADDR_VAR 0 7
30907: PUSH
30908: EMPTY
30909: ST_TO_ADDR
// temp_list = [ ] ;
30910: LD_ADDR_VAR 0 9
30914: PUSH
30915: EMPTY
30916: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30917: LD_VAR 0 4
30921: PUSH
30922: LD_INT 0
30924: PUSH
30925: LD_INT 1
30927: PUSH
30928: LD_INT 2
30930: PUSH
30931: LD_INT 3
30933: PUSH
30934: LD_INT 4
30936: PUSH
30937: LD_INT 5
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: IN
30948: NOT
30949: PUSH
30950: LD_VAR 0 1
30954: PUSH
30955: LD_INT 0
30957: PUSH
30958: LD_INT 1
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: IN
30965: PUSH
30966: LD_VAR 0 5
30970: PUSH
30971: LD_INT 1
30973: PUSH
30974: LD_INT 2
30976: PUSH
30977: LD_INT 3
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: LIST
30984: IN
30985: NOT
30986: AND
30987: OR
30988: IFFALSE 30992
// exit ;
30990: GO 49383
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30992: LD_VAR 0 1
30996: PUSH
30997: LD_INT 6
30999: PUSH
31000: LD_INT 7
31002: PUSH
31003: LD_INT 8
31005: PUSH
31006: LD_INT 13
31008: PUSH
31009: LD_INT 12
31011: PUSH
31012: LD_INT 15
31014: PUSH
31015: LD_INT 11
31017: PUSH
31018: LD_INT 14
31020: PUSH
31021: LD_INT 10
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: IN
31035: IFFALSE 31045
// btype = b_lab ;
31037: LD_ADDR_VAR 0 1
31041: PUSH
31042: LD_INT 6
31044: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31045: LD_VAR 0 6
31049: PUSH
31050: LD_INT 0
31052: PUSH
31053: LD_INT 1
31055: PUSH
31056: LD_INT 2
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: LIST
31063: IN
31064: NOT
31065: PUSH
31066: LD_VAR 0 1
31070: PUSH
31071: LD_INT 0
31073: PUSH
31074: LD_INT 1
31076: PUSH
31077: LD_INT 2
31079: PUSH
31080: LD_INT 3
31082: PUSH
31083: LD_INT 6
31085: PUSH
31086: LD_INT 36
31088: PUSH
31089: LD_INT 4
31091: PUSH
31092: LD_INT 5
31094: PUSH
31095: LD_INT 31
31097: PUSH
31098: LD_INT 32
31100: PUSH
31101: LD_INT 33
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: IN
31117: NOT
31118: PUSH
31119: LD_VAR 0 6
31123: PUSH
31124: LD_INT 1
31126: EQUAL
31127: AND
31128: OR
31129: PUSH
31130: LD_VAR 0 1
31134: PUSH
31135: LD_INT 2
31137: PUSH
31138: LD_INT 3
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: IN
31145: NOT
31146: PUSH
31147: LD_VAR 0 6
31151: PUSH
31152: LD_INT 2
31154: EQUAL
31155: AND
31156: OR
31157: IFFALSE 31167
// mode = 0 ;
31159: LD_ADDR_VAR 0 6
31163: PUSH
31164: LD_INT 0
31166: ST_TO_ADDR
// case mode of 0 :
31167: LD_VAR 0 6
31171: PUSH
31172: LD_INT 0
31174: DOUBLE
31175: EQUAL
31176: IFTRUE 31180
31178: GO 42633
31180: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31181: LD_ADDR_VAR 0 11
31185: PUSH
31186: LD_INT 0
31188: PUSH
31189: LD_INT 0
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 0
31198: PUSH
31199: LD_INT 1
31201: NEG
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 1
31209: PUSH
31210: LD_INT 0
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 1
31219: PUSH
31220: LD_INT 1
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 0
31229: PUSH
31230: LD_INT 1
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 1
31239: NEG
31240: PUSH
31241: LD_INT 0
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 1
31250: NEG
31251: PUSH
31252: LD_INT 1
31254: NEG
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 1
31262: NEG
31263: PUSH
31264: LD_INT 2
31266: NEG
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 0
31274: PUSH
31275: LD_INT 2
31277: NEG
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 1
31285: PUSH
31286: LD_INT 1
31288: NEG
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 1
31296: PUSH
31297: LD_INT 2
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 0
31306: PUSH
31307: LD_INT 2
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 1
31316: NEG
31317: PUSH
31318: LD_INT 1
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 1
31327: PUSH
31328: LD_INT 3
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 0
31337: PUSH
31338: LD_INT 3
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 1
31347: NEG
31348: PUSH
31349: LD_INT 2
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31374: LD_ADDR_VAR 0 12
31378: PUSH
31379: LD_INT 0
31381: PUSH
31382: LD_INT 0
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 0
31391: PUSH
31392: LD_INT 1
31394: NEG
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: LD_INT 1
31402: PUSH
31403: LD_INT 0
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 1
31412: PUSH
31413: LD_INT 1
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 0
31422: PUSH
31423: LD_INT 1
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 1
31432: NEG
31433: PUSH
31434: LD_INT 0
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 1
31443: NEG
31444: PUSH
31445: LD_INT 1
31447: NEG
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 1
31455: PUSH
31456: LD_INT 1
31458: NEG
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 2
31466: PUSH
31467: LD_INT 0
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 2
31476: PUSH
31477: LD_INT 1
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 1
31486: NEG
31487: PUSH
31488: LD_INT 1
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 2
31497: NEG
31498: PUSH
31499: LD_INT 0
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 2
31508: NEG
31509: PUSH
31510: LD_INT 1
31512: NEG
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 2
31520: NEG
31521: PUSH
31522: LD_INT 1
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: LD_INT 3
31531: NEG
31532: PUSH
31533: LD_INT 0
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 3
31542: NEG
31543: PUSH
31544: LD_INT 1
31546: NEG
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31570: LD_ADDR_VAR 0 13
31574: PUSH
31575: LD_INT 0
31577: PUSH
31578: LD_INT 0
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 0
31587: PUSH
31588: LD_INT 1
31590: NEG
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 1
31598: PUSH
31599: LD_INT 0
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 1
31608: PUSH
31609: LD_INT 1
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 0
31618: PUSH
31619: LD_INT 1
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: LD_INT 1
31628: NEG
31629: PUSH
31630: LD_INT 0
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 1
31639: NEG
31640: PUSH
31641: LD_INT 1
31643: NEG
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 1
31651: NEG
31652: PUSH
31653: LD_INT 2
31655: NEG
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 2
31663: PUSH
31664: LD_INT 1
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 2
31673: PUSH
31674: LD_INT 2
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 1
31683: PUSH
31684: LD_INT 2
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 2
31693: NEG
31694: PUSH
31695: LD_INT 1
31697: NEG
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 2
31705: NEG
31706: PUSH
31707: LD_INT 2
31709: NEG
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 2
31717: NEG
31718: PUSH
31719: LD_INT 3
31721: NEG
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 3
31729: NEG
31730: PUSH
31731: LD_INT 2
31733: NEG
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 3
31741: NEG
31742: PUSH
31743: LD_INT 3
31745: NEG
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31769: LD_ADDR_VAR 0 14
31773: PUSH
31774: LD_INT 0
31776: PUSH
31777: LD_INT 0
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 0
31786: PUSH
31787: LD_INT 1
31789: NEG
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 1
31797: PUSH
31798: LD_INT 0
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 1
31807: PUSH
31808: LD_INT 1
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 0
31817: PUSH
31818: LD_INT 1
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 1
31827: NEG
31828: PUSH
31829: LD_INT 0
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 1
31838: NEG
31839: PUSH
31840: LD_INT 1
31842: NEG
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 1
31850: NEG
31851: PUSH
31852: LD_INT 2
31854: NEG
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 0
31862: PUSH
31863: LD_INT 2
31865: NEG
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 1
31873: PUSH
31874: LD_INT 1
31876: NEG
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 1
31884: PUSH
31885: LD_INT 2
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 0
31894: PUSH
31895: LD_INT 2
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 1
31904: NEG
31905: PUSH
31906: LD_INT 1
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 1
31915: NEG
31916: PUSH
31917: LD_INT 3
31919: NEG
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 0
31927: PUSH
31928: LD_INT 3
31930: NEG
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 1
31938: PUSH
31939: LD_INT 2
31941: NEG
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31965: LD_ADDR_VAR 0 15
31969: PUSH
31970: LD_INT 0
31972: PUSH
31973: LD_INT 0
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 0
31982: PUSH
31983: LD_INT 1
31985: NEG
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 1
31993: PUSH
31994: LD_INT 0
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 1
32003: PUSH
32004: LD_INT 1
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 0
32013: PUSH
32014: LD_INT 1
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 1
32023: NEG
32024: PUSH
32025: LD_INT 0
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 1
32034: NEG
32035: PUSH
32036: LD_INT 1
32038: NEG
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 1
32046: PUSH
32047: LD_INT 1
32049: NEG
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 2
32057: PUSH
32058: LD_INT 0
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: LD_INT 2
32067: PUSH
32068: LD_INT 1
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 1
32077: NEG
32078: PUSH
32079: LD_INT 1
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 2
32088: NEG
32089: PUSH
32090: LD_INT 0
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 2
32099: NEG
32100: PUSH
32101: LD_INT 1
32103: NEG
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 2
32111: PUSH
32112: LD_INT 1
32114: NEG
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 3
32122: PUSH
32123: LD_INT 0
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 3
32132: PUSH
32133: LD_INT 1
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32158: LD_ADDR_VAR 0 16
32162: PUSH
32163: LD_INT 0
32165: PUSH
32166: LD_INT 0
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 0
32175: PUSH
32176: LD_INT 1
32178: NEG
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 1
32186: PUSH
32187: LD_INT 0
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 1
32196: PUSH
32197: LD_INT 1
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 0
32206: PUSH
32207: LD_INT 1
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 1
32216: NEG
32217: PUSH
32218: LD_INT 0
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 1
32227: NEG
32228: PUSH
32229: LD_INT 1
32231: NEG
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 1
32239: NEG
32240: PUSH
32241: LD_INT 2
32243: NEG
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 2
32251: PUSH
32252: LD_INT 1
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 2
32261: PUSH
32262: LD_INT 2
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 1
32271: PUSH
32272: LD_INT 2
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 2
32281: NEG
32282: PUSH
32283: LD_INT 1
32285: NEG
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 2
32293: NEG
32294: PUSH
32295: LD_INT 2
32297: NEG
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 3
32305: PUSH
32306: LD_INT 2
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 3
32315: PUSH
32316: LD_INT 3
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 2
32325: PUSH
32326: LD_INT 3
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32351: LD_ADDR_VAR 0 17
32355: PUSH
32356: LD_INT 0
32358: PUSH
32359: LD_INT 0
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 0
32368: PUSH
32369: LD_INT 1
32371: NEG
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 1
32379: PUSH
32380: LD_INT 0
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 1
32389: PUSH
32390: LD_INT 1
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 0
32399: PUSH
32400: LD_INT 1
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 1
32409: NEG
32410: PUSH
32411: LD_INT 0
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 1
32420: NEG
32421: PUSH
32422: LD_INT 1
32424: NEG
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 1
32432: NEG
32433: PUSH
32434: LD_INT 2
32436: NEG
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 0
32444: PUSH
32445: LD_INT 2
32447: NEG
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 1
32455: PUSH
32456: LD_INT 1
32458: NEG
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 2
32466: PUSH
32467: LD_INT 0
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 2
32476: PUSH
32477: LD_INT 1
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 2
32486: PUSH
32487: LD_INT 2
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 1
32496: PUSH
32497: LD_INT 2
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 0
32506: PUSH
32507: LD_INT 2
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 1
32516: NEG
32517: PUSH
32518: LD_INT 1
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 2
32527: NEG
32528: PUSH
32529: LD_INT 0
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: LD_INT 2
32538: NEG
32539: PUSH
32540: LD_INT 1
32542: NEG
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 2
32550: NEG
32551: PUSH
32552: LD_INT 2
32554: NEG
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32581: LD_ADDR_VAR 0 18
32585: PUSH
32586: LD_INT 0
32588: PUSH
32589: LD_INT 0
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 0
32598: PUSH
32599: LD_INT 1
32601: NEG
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 1
32609: PUSH
32610: LD_INT 0
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: LD_INT 1
32619: PUSH
32620: LD_INT 1
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 0
32629: PUSH
32630: LD_INT 1
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 1
32639: NEG
32640: PUSH
32641: LD_INT 0
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 1
32650: NEG
32651: PUSH
32652: LD_INT 1
32654: NEG
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 1
32662: NEG
32663: PUSH
32664: LD_INT 2
32666: NEG
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 0
32674: PUSH
32675: LD_INT 2
32677: NEG
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 1
32685: PUSH
32686: LD_INT 1
32688: NEG
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 2
32696: PUSH
32697: LD_INT 0
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 2
32706: PUSH
32707: LD_INT 1
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 2
32716: PUSH
32717: LD_INT 2
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 1
32726: PUSH
32727: LD_INT 2
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 0
32736: PUSH
32737: LD_INT 2
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 1
32746: NEG
32747: PUSH
32748: LD_INT 1
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 2
32757: NEG
32758: PUSH
32759: LD_INT 0
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: LD_INT 2
32768: NEG
32769: PUSH
32770: LD_INT 1
32772: NEG
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 2
32780: NEG
32781: PUSH
32782: LD_INT 2
32784: NEG
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: LIST
32794: LIST
32795: LIST
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32811: LD_ADDR_VAR 0 19
32815: PUSH
32816: LD_INT 0
32818: PUSH
32819: LD_INT 0
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 0
32828: PUSH
32829: LD_INT 1
32831: NEG
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 1
32839: PUSH
32840: LD_INT 0
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 1
32849: PUSH
32850: LD_INT 1
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 0
32859: PUSH
32860: LD_INT 1
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 1
32869: NEG
32870: PUSH
32871: LD_INT 0
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 1
32880: NEG
32881: PUSH
32882: LD_INT 1
32884: NEG
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 1
32892: NEG
32893: PUSH
32894: LD_INT 2
32896: NEG
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 0
32904: PUSH
32905: LD_INT 2
32907: NEG
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: LD_INT 1
32915: PUSH
32916: LD_INT 1
32918: NEG
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 2
32926: PUSH
32927: LD_INT 0
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 2
32936: PUSH
32937: LD_INT 1
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 2
32946: PUSH
32947: LD_INT 2
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 1
32956: PUSH
32957: LD_INT 2
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 0
32966: PUSH
32967: LD_INT 2
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 1
32976: NEG
32977: PUSH
32978: LD_INT 1
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 2
32987: NEG
32988: PUSH
32989: LD_INT 0
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 2
32998: NEG
32999: PUSH
33000: LD_INT 1
33002: NEG
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 2
33010: NEG
33011: PUSH
33012: LD_INT 2
33014: NEG
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33041: LD_ADDR_VAR 0 20
33045: PUSH
33046: LD_INT 0
33048: PUSH
33049: LD_INT 0
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 0
33058: PUSH
33059: LD_INT 1
33061: NEG
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 1
33069: PUSH
33070: LD_INT 0
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 1
33079: PUSH
33080: LD_INT 1
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 0
33089: PUSH
33090: LD_INT 1
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 1
33099: NEG
33100: PUSH
33101: LD_INT 0
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 1
33110: NEG
33111: PUSH
33112: LD_INT 1
33114: NEG
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 1
33122: NEG
33123: PUSH
33124: LD_INT 2
33126: NEG
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 0
33134: PUSH
33135: LD_INT 2
33137: NEG
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 1
33145: PUSH
33146: LD_INT 1
33148: NEG
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 2
33156: PUSH
33157: LD_INT 0
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 2
33166: PUSH
33167: LD_INT 1
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 2
33176: PUSH
33177: LD_INT 2
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 1
33186: PUSH
33187: LD_INT 2
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 0
33196: PUSH
33197: LD_INT 2
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 1
33206: NEG
33207: PUSH
33208: LD_INT 1
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 2
33217: NEG
33218: PUSH
33219: LD_INT 0
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 2
33228: NEG
33229: PUSH
33230: LD_INT 1
33232: NEG
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 2
33240: NEG
33241: PUSH
33242: LD_INT 2
33244: NEG
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33271: LD_ADDR_VAR 0 21
33275: PUSH
33276: LD_INT 0
33278: PUSH
33279: LD_INT 0
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 0
33288: PUSH
33289: LD_INT 1
33291: NEG
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 1
33299: PUSH
33300: LD_INT 0
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 1
33309: PUSH
33310: LD_INT 1
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 0
33319: PUSH
33320: LD_INT 1
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 1
33329: NEG
33330: PUSH
33331: LD_INT 0
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 1
33340: NEG
33341: PUSH
33342: LD_INT 1
33344: NEG
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 1
33352: NEG
33353: PUSH
33354: LD_INT 2
33356: NEG
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 0
33364: PUSH
33365: LD_INT 2
33367: NEG
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 1
33375: PUSH
33376: LD_INT 1
33378: NEG
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 2
33386: PUSH
33387: LD_INT 0
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 2
33396: PUSH
33397: LD_INT 1
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 2
33406: PUSH
33407: LD_INT 2
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 1
33416: PUSH
33417: LD_INT 2
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 0
33426: PUSH
33427: LD_INT 2
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 1
33436: NEG
33437: PUSH
33438: LD_INT 1
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 2
33447: NEG
33448: PUSH
33449: LD_INT 0
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 2
33458: NEG
33459: PUSH
33460: LD_INT 1
33462: NEG
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 2
33470: NEG
33471: PUSH
33472: LD_INT 2
33474: NEG
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33501: LD_ADDR_VAR 0 22
33505: PUSH
33506: LD_INT 0
33508: PUSH
33509: LD_INT 0
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 0
33518: PUSH
33519: LD_INT 1
33521: NEG
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: LD_INT 1
33529: PUSH
33530: LD_INT 0
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 1
33539: PUSH
33540: LD_INT 1
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 0
33549: PUSH
33550: LD_INT 1
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 1
33559: NEG
33560: PUSH
33561: LD_INT 0
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 1
33570: NEG
33571: PUSH
33572: LD_INT 1
33574: NEG
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 1
33582: NEG
33583: PUSH
33584: LD_INT 2
33586: NEG
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 0
33594: PUSH
33595: LD_INT 2
33597: NEG
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 1
33605: PUSH
33606: LD_INT 1
33608: NEG
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 2
33616: PUSH
33617: LD_INT 0
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 2
33626: PUSH
33627: LD_INT 1
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 2
33636: PUSH
33637: LD_INT 2
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 1
33646: PUSH
33647: LD_INT 2
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 0
33656: PUSH
33657: LD_INT 2
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PUSH
33664: LD_INT 1
33666: NEG
33667: PUSH
33668: LD_INT 1
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 2
33677: NEG
33678: PUSH
33679: LD_INT 0
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: LD_INT 2
33688: NEG
33689: PUSH
33690: LD_INT 1
33692: NEG
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 2
33700: NEG
33701: PUSH
33702: LD_INT 2
33704: NEG
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33731: LD_ADDR_VAR 0 23
33735: PUSH
33736: LD_INT 0
33738: PUSH
33739: LD_INT 0
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 0
33748: PUSH
33749: LD_INT 1
33751: NEG
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 1
33759: PUSH
33760: LD_INT 0
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 1
33769: PUSH
33770: LD_INT 1
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 0
33779: PUSH
33780: LD_INT 1
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 1
33789: NEG
33790: PUSH
33791: LD_INT 0
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 1
33800: NEG
33801: PUSH
33802: LD_INT 1
33804: NEG
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 1
33812: NEG
33813: PUSH
33814: LD_INT 2
33816: NEG
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 0
33824: PUSH
33825: LD_INT 2
33827: NEG
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: LD_INT 1
33835: PUSH
33836: LD_INT 1
33838: NEG
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 2
33846: PUSH
33847: LD_INT 0
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 2
33856: PUSH
33857: LD_INT 1
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 2
33866: PUSH
33867: LD_INT 2
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 1
33876: PUSH
33877: LD_INT 2
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 0
33886: PUSH
33887: LD_INT 2
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: LD_INT 1
33896: NEG
33897: PUSH
33898: LD_INT 1
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: LD_INT 2
33907: NEG
33908: PUSH
33909: LD_INT 0
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 2
33918: NEG
33919: PUSH
33920: LD_INT 1
33922: NEG
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: LD_INT 2
33930: NEG
33931: PUSH
33932: LD_INT 2
33934: NEG
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 2
33942: NEG
33943: PUSH
33944: LD_INT 3
33946: NEG
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 1
33954: NEG
33955: PUSH
33956: LD_INT 3
33958: NEG
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 1
33966: PUSH
33967: LD_INT 2
33969: NEG
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 2
33977: PUSH
33978: LD_INT 1
33980: NEG
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34011: LD_ADDR_VAR 0 24
34015: PUSH
34016: LD_INT 0
34018: PUSH
34019: LD_INT 0
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 0
34028: PUSH
34029: LD_INT 1
34031: NEG
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: LD_INT 1
34039: PUSH
34040: LD_INT 0
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 1
34049: PUSH
34050: LD_INT 1
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: LD_INT 0
34059: PUSH
34060: LD_INT 1
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 1
34069: NEG
34070: PUSH
34071: LD_INT 0
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 1
34080: NEG
34081: PUSH
34082: LD_INT 1
34084: NEG
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 1
34092: NEG
34093: PUSH
34094: LD_INT 2
34096: NEG
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 0
34104: PUSH
34105: LD_INT 2
34107: NEG
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 1
34115: PUSH
34116: LD_INT 1
34118: NEG
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 2
34126: PUSH
34127: LD_INT 0
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 2
34136: PUSH
34137: LD_INT 1
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 2
34146: PUSH
34147: LD_INT 2
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 1
34156: PUSH
34157: LD_INT 2
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 0
34166: PUSH
34167: LD_INT 2
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 1
34176: NEG
34177: PUSH
34178: LD_INT 1
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PUSH
34185: LD_INT 2
34187: NEG
34188: PUSH
34189: LD_INT 0
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 2
34198: NEG
34199: PUSH
34200: LD_INT 1
34202: NEG
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 2
34210: NEG
34211: PUSH
34212: LD_INT 2
34214: NEG
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 1
34222: PUSH
34223: LD_INT 2
34225: NEG
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 2
34233: PUSH
34234: LD_INT 1
34236: NEG
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 3
34244: PUSH
34245: LD_INT 1
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 3
34254: PUSH
34255: LD_INT 2
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34287: LD_ADDR_VAR 0 25
34291: PUSH
34292: LD_INT 0
34294: PUSH
34295: LD_INT 0
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 0
34304: PUSH
34305: LD_INT 1
34307: NEG
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 1
34315: PUSH
34316: LD_INT 0
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 1
34325: PUSH
34326: LD_INT 1
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 0
34335: PUSH
34336: LD_INT 1
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: LD_INT 1
34345: NEG
34346: PUSH
34347: LD_INT 0
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: LD_INT 1
34356: NEG
34357: PUSH
34358: LD_INT 1
34360: NEG
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 1
34368: NEG
34369: PUSH
34370: LD_INT 2
34372: NEG
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 0
34380: PUSH
34381: LD_INT 2
34383: NEG
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 1
34391: PUSH
34392: LD_INT 1
34394: NEG
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 2
34402: PUSH
34403: LD_INT 0
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 2
34412: PUSH
34413: LD_INT 1
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 2
34422: PUSH
34423: LD_INT 2
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 1
34432: PUSH
34433: LD_INT 2
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 0
34442: PUSH
34443: LD_INT 2
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: LD_INT 1
34452: NEG
34453: PUSH
34454: LD_INT 1
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PUSH
34461: LD_INT 2
34463: NEG
34464: PUSH
34465: LD_INT 0
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_INT 2
34474: NEG
34475: PUSH
34476: LD_INT 1
34478: NEG
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 2
34486: NEG
34487: PUSH
34488: LD_INT 2
34490: NEG
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 3
34498: PUSH
34499: LD_INT 1
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 3
34508: PUSH
34509: LD_INT 2
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 2
34518: PUSH
34519: LD_INT 3
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 1
34528: PUSH
34529: LD_INT 3
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34561: LD_ADDR_VAR 0 26
34565: PUSH
34566: LD_INT 0
34568: PUSH
34569: LD_INT 0
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 0
34578: PUSH
34579: LD_INT 1
34581: NEG
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 1
34589: PUSH
34590: LD_INT 0
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 1
34599: PUSH
34600: LD_INT 1
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 0
34609: PUSH
34610: LD_INT 1
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 1
34619: NEG
34620: PUSH
34621: LD_INT 0
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 1
34630: NEG
34631: PUSH
34632: LD_INT 1
34634: NEG
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 1
34642: NEG
34643: PUSH
34644: LD_INT 2
34646: NEG
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 0
34654: PUSH
34655: LD_INT 2
34657: NEG
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 1
34665: PUSH
34666: LD_INT 1
34668: NEG
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 2
34676: PUSH
34677: LD_INT 0
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 2
34686: PUSH
34687: LD_INT 1
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 2
34696: PUSH
34697: LD_INT 2
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 1
34706: PUSH
34707: LD_INT 2
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 0
34716: PUSH
34717: LD_INT 2
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 1
34726: NEG
34727: PUSH
34728: LD_INT 1
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 2
34737: NEG
34738: PUSH
34739: LD_INT 0
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 2
34748: NEG
34749: PUSH
34750: LD_INT 1
34752: NEG
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 2
34760: NEG
34761: PUSH
34762: LD_INT 2
34764: NEG
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: LD_INT 2
34772: PUSH
34773: LD_INT 3
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 1
34782: PUSH
34783: LD_INT 3
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 1
34792: NEG
34793: PUSH
34794: LD_INT 2
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 2
34803: NEG
34804: PUSH
34805: LD_INT 1
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34837: LD_ADDR_VAR 0 27
34841: PUSH
34842: LD_INT 0
34844: PUSH
34845: LD_INT 0
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 0
34854: PUSH
34855: LD_INT 1
34857: NEG
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 1
34865: PUSH
34866: LD_INT 0
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 1
34875: PUSH
34876: LD_INT 1
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 0
34885: PUSH
34886: LD_INT 1
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 1
34895: NEG
34896: PUSH
34897: LD_INT 0
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 1
34906: NEG
34907: PUSH
34908: LD_INT 1
34910: NEG
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 1
34918: NEG
34919: PUSH
34920: LD_INT 2
34922: NEG
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 0
34930: PUSH
34931: LD_INT 2
34933: NEG
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 1
34941: PUSH
34942: LD_INT 1
34944: NEG
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 2
34952: PUSH
34953: LD_INT 0
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 2
34962: PUSH
34963: LD_INT 1
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 2
34972: PUSH
34973: LD_INT 2
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 1
34982: PUSH
34983: LD_INT 2
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 0
34992: PUSH
34993: LD_INT 2
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 1
35002: NEG
35003: PUSH
35004: LD_INT 1
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 2
35013: NEG
35014: PUSH
35015: LD_INT 0
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 2
35024: NEG
35025: PUSH
35026: LD_INT 1
35028: NEG
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 2
35036: NEG
35037: PUSH
35038: LD_INT 2
35040: NEG
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 1
35048: NEG
35049: PUSH
35050: LD_INT 2
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 2
35059: NEG
35060: PUSH
35061: LD_INT 1
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 3
35070: NEG
35071: PUSH
35072: LD_INT 1
35074: NEG
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: LD_INT 3
35082: NEG
35083: PUSH
35084: LD_INT 2
35086: NEG
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35117: LD_ADDR_VAR 0 28
35121: PUSH
35122: LD_INT 0
35124: PUSH
35125: LD_INT 0
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 0
35134: PUSH
35135: LD_INT 1
35137: NEG
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 1
35145: PUSH
35146: LD_INT 0
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 1
35155: PUSH
35156: LD_INT 1
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 0
35165: PUSH
35166: LD_INT 1
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 1
35175: NEG
35176: PUSH
35177: LD_INT 0
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 1
35186: NEG
35187: PUSH
35188: LD_INT 1
35190: NEG
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 1
35198: NEG
35199: PUSH
35200: LD_INT 2
35202: NEG
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 0
35210: PUSH
35211: LD_INT 2
35213: NEG
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 1
35221: PUSH
35222: LD_INT 1
35224: NEG
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 2
35232: PUSH
35233: LD_INT 0
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 2
35242: PUSH
35243: LD_INT 1
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 2
35252: PUSH
35253: LD_INT 2
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 1
35262: PUSH
35263: LD_INT 2
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 0
35272: PUSH
35273: LD_INT 2
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 1
35282: NEG
35283: PUSH
35284: LD_INT 1
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 2
35293: NEG
35294: PUSH
35295: LD_INT 0
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: LD_INT 2
35304: NEG
35305: PUSH
35306: LD_INT 1
35308: NEG
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: LD_INT 2
35316: NEG
35317: PUSH
35318: LD_INT 2
35320: NEG
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 2
35328: NEG
35329: PUSH
35330: LD_INT 3
35332: NEG
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: LD_INT 1
35340: NEG
35341: PUSH
35342: LD_INT 3
35344: NEG
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 3
35352: NEG
35353: PUSH
35354: LD_INT 1
35356: NEG
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 3
35364: NEG
35365: PUSH
35366: LD_INT 2
35368: NEG
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35399: LD_ADDR_VAR 0 29
35403: PUSH
35404: LD_INT 0
35406: PUSH
35407: LD_INT 0
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 0
35416: PUSH
35417: LD_INT 1
35419: NEG
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 1
35427: PUSH
35428: LD_INT 0
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 1
35437: PUSH
35438: LD_INT 1
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 0
35447: PUSH
35448: LD_INT 1
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 1
35457: NEG
35458: PUSH
35459: LD_INT 0
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 1
35468: NEG
35469: PUSH
35470: LD_INT 1
35472: NEG
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PUSH
35478: LD_INT 1
35480: NEG
35481: PUSH
35482: LD_INT 2
35484: NEG
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 0
35492: PUSH
35493: LD_INT 2
35495: NEG
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 1
35503: PUSH
35504: LD_INT 1
35506: NEG
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 2
35514: PUSH
35515: LD_INT 0
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 2
35524: PUSH
35525: LD_INT 1
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 1
35534: PUSH
35535: LD_INT 2
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 0
35544: PUSH
35545: LD_INT 2
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 1
35554: NEG
35555: PUSH
35556: LD_INT 1
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 2
35565: NEG
35566: PUSH
35567: LD_INT 1
35569: NEG
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 2
35577: NEG
35578: PUSH
35579: LD_INT 2
35581: NEG
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PUSH
35587: LD_INT 2
35589: NEG
35590: PUSH
35591: LD_INT 3
35593: NEG
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 2
35601: PUSH
35602: LD_INT 1
35604: NEG
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 3
35612: PUSH
35613: LD_INT 1
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: LD_INT 1
35622: PUSH
35623: LD_INT 3
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 1
35632: NEG
35633: PUSH
35634: LD_INT 2
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 3
35643: NEG
35644: PUSH
35645: LD_INT 2
35647: NEG
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35678: LD_ADDR_VAR 0 30
35682: PUSH
35683: LD_INT 0
35685: PUSH
35686: LD_INT 0
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 0
35695: PUSH
35696: LD_INT 1
35698: NEG
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 1
35706: PUSH
35707: LD_INT 0
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 1
35716: PUSH
35717: LD_INT 1
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 0
35726: PUSH
35727: LD_INT 1
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 1
35736: NEG
35737: PUSH
35738: LD_INT 0
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 1
35747: NEG
35748: PUSH
35749: LD_INT 1
35751: NEG
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 1
35759: NEG
35760: PUSH
35761: LD_INT 2
35763: NEG
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 0
35771: PUSH
35772: LD_INT 2
35774: NEG
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 1
35782: PUSH
35783: LD_INT 1
35785: NEG
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 2
35793: PUSH
35794: LD_INT 0
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 2
35803: PUSH
35804: LD_INT 1
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 2
35813: PUSH
35814: LD_INT 2
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 1
35823: PUSH
35824: LD_INT 2
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 1
35833: NEG
35834: PUSH
35835: LD_INT 1
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 2
35844: NEG
35845: PUSH
35846: LD_INT 0
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 2
35855: NEG
35856: PUSH
35857: LD_INT 1
35859: NEG
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 1
35867: NEG
35868: PUSH
35869: LD_INT 3
35871: NEG
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 1
35879: PUSH
35880: LD_INT 2
35882: NEG
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 3
35890: PUSH
35891: LD_INT 2
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 2
35900: PUSH
35901: LD_INT 3
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 2
35910: NEG
35911: PUSH
35912: LD_INT 1
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 3
35921: NEG
35922: PUSH
35923: LD_INT 1
35925: NEG
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35956: LD_ADDR_VAR 0 31
35960: PUSH
35961: LD_INT 0
35963: PUSH
35964: LD_INT 0
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 0
35973: PUSH
35974: LD_INT 1
35976: NEG
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 1
35984: PUSH
35985: LD_INT 0
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 1
35994: PUSH
35995: LD_INT 1
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 0
36004: PUSH
36005: LD_INT 1
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 1
36014: NEG
36015: PUSH
36016: LD_INT 0
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 1
36025: NEG
36026: PUSH
36027: LD_INT 1
36029: NEG
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 1
36037: NEG
36038: PUSH
36039: LD_INT 2
36041: NEG
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 1
36049: PUSH
36050: LD_INT 1
36052: NEG
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 2
36060: PUSH
36061: LD_INT 0
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 2
36070: PUSH
36071: LD_INT 1
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 2
36080: PUSH
36081: LD_INT 2
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: PUSH
36088: LD_INT 1
36090: PUSH
36091: LD_INT 2
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: LD_INT 0
36100: PUSH
36101: LD_INT 2
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 1
36110: NEG
36111: PUSH
36112: LD_INT 1
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 2
36121: NEG
36122: PUSH
36123: LD_INT 1
36125: NEG
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 2
36133: NEG
36134: PUSH
36135: LD_INT 2
36137: NEG
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: LD_INT 2
36145: NEG
36146: PUSH
36147: LD_INT 3
36149: NEG
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 2
36157: PUSH
36158: LD_INT 1
36160: NEG
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 3
36168: PUSH
36169: LD_INT 1
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: LD_INT 1
36178: PUSH
36179: LD_INT 3
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 1
36188: NEG
36189: PUSH
36190: LD_INT 2
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 3
36199: NEG
36200: PUSH
36201: LD_INT 2
36203: NEG
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36234: LD_ADDR_VAR 0 32
36238: PUSH
36239: LD_INT 0
36241: PUSH
36242: LD_INT 0
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 0
36251: PUSH
36252: LD_INT 1
36254: NEG
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 1
36262: PUSH
36263: LD_INT 0
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 1
36272: PUSH
36273: LD_INT 1
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 0
36282: PUSH
36283: LD_INT 1
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 1
36292: NEG
36293: PUSH
36294: LD_INT 0
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 1
36303: NEG
36304: PUSH
36305: LD_INT 1
36307: NEG
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 1
36315: NEG
36316: PUSH
36317: LD_INT 2
36319: NEG
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 0
36327: PUSH
36328: LD_INT 2
36330: NEG
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 1
36338: PUSH
36339: LD_INT 1
36341: NEG
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 2
36349: PUSH
36350: LD_INT 1
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 2
36359: PUSH
36360: LD_INT 2
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 1
36369: PUSH
36370: LD_INT 2
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 0
36379: PUSH
36380: LD_INT 2
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 1
36389: NEG
36390: PUSH
36391: LD_INT 1
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 2
36400: NEG
36401: PUSH
36402: LD_INT 0
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 2
36411: NEG
36412: PUSH
36413: LD_INT 1
36415: NEG
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 1
36423: NEG
36424: PUSH
36425: LD_INT 3
36427: NEG
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 1
36435: PUSH
36436: LD_INT 2
36438: NEG
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 3
36446: PUSH
36447: LD_INT 2
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 2
36456: PUSH
36457: LD_INT 3
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 2
36466: NEG
36467: PUSH
36468: LD_INT 1
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 3
36477: NEG
36478: PUSH
36479: LD_INT 1
36481: NEG
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36512: LD_ADDR_VAR 0 33
36516: PUSH
36517: LD_INT 0
36519: PUSH
36520: LD_INT 0
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 0
36529: PUSH
36530: LD_INT 1
36532: NEG
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 1
36540: PUSH
36541: LD_INT 0
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: LD_INT 1
36550: PUSH
36551: LD_INT 1
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 0
36560: PUSH
36561: LD_INT 1
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 1
36570: NEG
36571: PUSH
36572: LD_INT 0
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 1
36581: NEG
36582: PUSH
36583: LD_INT 1
36585: NEG
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 1
36593: NEG
36594: PUSH
36595: LD_INT 2
36597: NEG
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 1
36605: PUSH
36606: LD_INT 1
36608: NEG
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 2
36616: PUSH
36617: LD_INT 0
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 2
36626: PUSH
36627: LD_INT 1
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 1
36636: PUSH
36637: LD_INT 2
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 0
36646: PUSH
36647: LD_INT 2
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: LD_INT 1
36656: NEG
36657: PUSH
36658: LD_INT 1
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 2
36667: NEG
36668: PUSH
36669: LD_INT 0
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: LD_INT 2
36678: NEG
36679: PUSH
36680: LD_INT 1
36682: NEG
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 2
36690: NEG
36691: PUSH
36692: LD_INT 2
36694: NEG
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: PUSH
36700: LD_INT 2
36702: NEG
36703: PUSH
36704: LD_INT 3
36706: NEG
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 2
36714: PUSH
36715: LD_INT 1
36717: NEG
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 3
36725: PUSH
36726: LD_INT 1
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 1
36735: PUSH
36736: LD_INT 3
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 1
36745: NEG
36746: PUSH
36747: LD_INT 2
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 3
36756: NEG
36757: PUSH
36758: LD_INT 2
36760: NEG
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36791: LD_ADDR_VAR 0 34
36795: PUSH
36796: LD_INT 0
36798: PUSH
36799: LD_INT 0
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 0
36808: PUSH
36809: LD_INT 1
36811: NEG
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 1
36819: PUSH
36820: LD_INT 0
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 1
36829: PUSH
36830: LD_INT 1
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 0
36839: PUSH
36840: LD_INT 1
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 1
36849: NEG
36850: PUSH
36851: LD_INT 0
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 1
36860: NEG
36861: PUSH
36862: LD_INT 1
36864: NEG
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 1
36872: NEG
36873: PUSH
36874: LD_INT 2
36876: NEG
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 0
36884: PUSH
36885: LD_INT 2
36887: NEG
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 1
36895: PUSH
36896: LD_INT 1
36898: NEG
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 2
36906: PUSH
36907: LD_INT 1
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 2
36916: PUSH
36917: LD_INT 2
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 1
36926: PUSH
36927: LD_INT 2
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 1
36936: NEG
36937: PUSH
36938: LD_INT 1
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 2
36947: NEG
36948: PUSH
36949: LD_INT 0
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 2
36958: NEG
36959: PUSH
36960: LD_INT 1
36962: NEG
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 2
36970: NEG
36971: PUSH
36972: LD_INT 2
36974: NEG
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 1
36982: NEG
36983: PUSH
36984: LD_INT 3
36986: NEG
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_INT 1
36994: PUSH
36995: LD_INT 2
36997: NEG
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 3
37005: PUSH
37006: LD_INT 2
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 2
37015: PUSH
37016: LD_INT 3
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 2
37025: NEG
37026: PUSH
37027: LD_INT 1
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 3
37036: NEG
37037: PUSH
37038: LD_INT 1
37040: NEG
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37071: LD_ADDR_VAR 0 35
37075: PUSH
37076: LD_INT 0
37078: PUSH
37079: LD_INT 0
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 0
37088: PUSH
37089: LD_INT 1
37091: NEG
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 1
37099: PUSH
37100: LD_INT 0
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 1
37109: PUSH
37110: LD_INT 1
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 0
37119: PUSH
37120: LD_INT 1
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 1
37129: NEG
37130: PUSH
37131: LD_INT 0
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 1
37140: NEG
37141: PUSH
37142: LD_INT 1
37144: NEG
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 2
37152: PUSH
37153: LD_INT 1
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 2
37162: NEG
37163: PUSH
37164: LD_INT 1
37166: NEG
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37183: LD_ADDR_VAR 0 36
37187: PUSH
37188: LD_INT 0
37190: PUSH
37191: LD_INT 0
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 0
37200: PUSH
37201: LD_INT 1
37203: NEG
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 1
37211: PUSH
37212: LD_INT 0
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 1
37221: PUSH
37222: LD_INT 1
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 0
37231: PUSH
37232: LD_INT 1
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: LD_INT 1
37241: NEG
37242: PUSH
37243: LD_INT 0
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 1
37252: NEG
37253: PUSH
37254: LD_INT 1
37256: NEG
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 1
37264: NEG
37265: PUSH
37266: LD_INT 2
37268: NEG
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 1
37276: PUSH
37277: LD_INT 2
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37295: LD_ADDR_VAR 0 37
37299: PUSH
37300: LD_INT 0
37302: PUSH
37303: LD_INT 0
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 0
37312: PUSH
37313: LD_INT 1
37315: NEG
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 1
37323: PUSH
37324: LD_INT 0
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 1
37333: PUSH
37334: LD_INT 1
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 0
37343: PUSH
37344: LD_INT 1
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 1
37353: NEG
37354: PUSH
37355: LD_INT 0
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 1
37364: NEG
37365: PUSH
37366: LD_INT 1
37368: NEG
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 1
37376: PUSH
37377: LD_INT 1
37379: NEG
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 1
37387: NEG
37388: PUSH
37389: LD_INT 1
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37407: LD_ADDR_VAR 0 38
37411: PUSH
37412: LD_INT 0
37414: PUSH
37415: LD_INT 0
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 0
37424: PUSH
37425: LD_INT 1
37427: NEG
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 1
37435: PUSH
37436: LD_INT 0
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 1
37445: PUSH
37446: LD_INT 1
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 0
37455: PUSH
37456: LD_INT 1
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 1
37465: NEG
37466: PUSH
37467: LD_INT 0
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 1
37476: NEG
37477: PUSH
37478: LD_INT 1
37480: NEG
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 2
37488: PUSH
37489: LD_INT 1
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 2
37498: NEG
37499: PUSH
37500: LD_INT 1
37502: NEG
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37519: LD_ADDR_VAR 0 39
37523: PUSH
37524: LD_INT 0
37526: PUSH
37527: LD_INT 0
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 0
37536: PUSH
37537: LD_INT 1
37539: NEG
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 1
37547: PUSH
37548: LD_INT 0
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 1
37557: PUSH
37558: LD_INT 1
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 0
37567: PUSH
37568: LD_INT 1
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 1
37577: NEG
37578: PUSH
37579: LD_INT 0
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 1
37588: NEG
37589: PUSH
37590: LD_INT 1
37592: NEG
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 1
37600: NEG
37601: PUSH
37602: LD_INT 2
37604: NEG
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 1
37612: PUSH
37613: LD_INT 2
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37631: LD_ADDR_VAR 0 40
37635: PUSH
37636: LD_INT 0
37638: PUSH
37639: LD_INT 0
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 0
37648: PUSH
37649: LD_INT 1
37651: NEG
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 1
37659: PUSH
37660: LD_INT 0
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 1
37669: PUSH
37670: LD_INT 1
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 0
37679: PUSH
37680: LD_INT 1
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 1
37689: NEG
37690: PUSH
37691: LD_INT 0
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 1
37700: NEG
37701: PUSH
37702: LD_INT 1
37704: NEG
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 1
37712: PUSH
37713: LD_INT 1
37715: NEG
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 1
37723: NEG
37724: PUSH
37725: LD_INT 1
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37743: LD_ADDR_VAR 0 41
37747: PUSH
37748: LD_INT 0
37750: PUSH
37751: LD_INT 0
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 0
37760: PUSH
37761: LD_INT 1
37763: NEG
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 1
37771: PUSH
37772: LD_INT 0
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 1
37781: PUSH
37782: LD_INT 1
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 0
37791: PUSH
37792: LD_INT 1
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 1
37801: NEG
37802: PUSH
37803: LD_INT 0
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 1
37812: NEG
37813: PUSH
37814: LD_INT 1
37816: NEG
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 1
37824: NEG
37825: PUSH
37826: LD_INT 2
37828: NEG
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 1
37836: PUSH
37837: LD_INT 1
37839: NEG
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: LD_INT 2
37847: PUSH
37848: LD_INT 0
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 2
37857: PUSH
37858: LD_INT 1
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 2
37867: PUSH
37868: LD_INT 2
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 1
37877: PUSH
37878: LD_INT 2
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 1
37887: NEG
37888: PUSH
37889: LD_INT 1
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: LD_INT 2
37898: NEG
37899: PUSH
37900: LD_INT 0
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 2
37909: NEG
37910: PUSH
37911: LD_INT 1
37913: NEG
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 2
37921: NEG
37922: PUSH
37923: LD_INT 2
37925: NEG
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 2
37933: NEG
37934: PUSH
37935: LD_INT 3
37937: NEG
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 2
37945: PUSH
37946: LD_INT 1
37948: NEG
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 3
37956: PUSH
37957: LD_INT 0
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 3
37966: PUSH
37967: LD_INT 1
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 3
37976: PUSH
37977: LD_INT 2
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 3
37986: PUSH
37987: LD_INT 3
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 2
37996: PUSH
37997: LD_INT 3
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 2
38006: NEG
38007: PUSH
38008: LD_INT 1
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 3
38017: NEG
38018: PUSH
38019: LD_INT 0
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 3
38028: NEG
38029: PUSH
38030: LD_INT 1
38032: NEG
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 3
38040: NEG
38041: PUSH
38042: LD_INT 2
38044: NEG
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 3
38052: NEG
38053: PUSH
38054: LD_INT 3
38056: NEG
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38093: LD_ADDR_VAR 0 42
38097: PUSH
38098: LD_INT 0
38100: PUSH
38101: LD_INT 0
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: LD_INT 0
38110: PUSH
38111: LD_INT 1
38113: NEG
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 1
38121: PUSH
38122: LD_INT 0
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 1
38131: PUSH
38132: LD_INT 1
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 0
38141: PUSH
38142: LD_INT 1
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 1
38151: NEG
38152: PUSH
38153: LD_INT 0
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 1
38162: NEG
38163: PUSH
38164: LD_INT 1
38166: NEG
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 1
38174: NEG
38175: PUSH
38176: LD_INT 2
38178: NEG
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 0
38186: PUSH
38187: LD_INT 2
38189: NEG
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 1
38197: PUSH
38198: LD_INT 1
38200: NEG
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 2
38208: PUSH
38209: LD_INT 1
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 2
38218: PUSH
38219: LD_INT 2
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: LD_INT 1
38228: PUSH
38229: LD_INT 2
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 0
38238: PUSH
38239: LD_INT 2
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 1
38248: NEG
38249: PUSH
38250: LD_INT 1
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 2
38259: NEG
38260: PUSH
38261: LD_INT 1
38263: NEG
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 2
38271: NEG
38272: PUSH
38273: LD_INT 2
38275: NEG
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 2
38283: NEG
38284: PUSH
38285: LD_INT 3
38287: NEG
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 1
38295: NEG
38296: PUSH
38297: LD_INT 3
38299: NEG
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: LD_INT 0
38307: PUSH
38308: LD_INT 3
38310: NEG
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 1
38318: PUSH
38319: LD_INT 2
38321: NEG
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 3
38329: PUSH
38330: LD_INT 2
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 3
38339: PUSH
38340: LD_INT 3
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 2
38349: PUSH
38350: LD_INT 3
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 1
38359: PUSH
38360: LD_INT 3
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 0
38369: PUSH
38370: LD_INT 3
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 1
38379: NEG
38380: PUSH
38381: LD_INT 2
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 3
38390: NEG
38391: PUSH
38392: LD_INT 2
38394: NEG
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 3
38402: NEG
38403: PUSH
38404: LD_INT 3
38406: NEG
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38443: LD_ADDR_VAR 0 43
38447: PUSH
38448: LD_INT 0
38450: PUSH
38451: LD_INT 0
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 0
38460: PUSH
38461: LD_INT 1
38463: NEG
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 1
38471: PUSH
38472: LD_INT 0
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 1
38481: PUSH
38482: LD_INT 1
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 0
38491: PUSH
38492: LD_INT 1
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 1
38501: NEG
38502: PUSH
38503: LD_INT 0
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 1
38512: NEG
38513: PUSH
38514: LD_INT 1
38516: NEG
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 1
38524: NEG
38525: PUSH
38526: LD_INT 2
38528: NEG
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 0
38536: PUSH
38537: LD_INT 2
38539: NEG
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 1
38547: PUSH
38548: LD_INT 1
38550: NEG
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 2
38558: PUSH
38559: LD_INT 0
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 2
38568: PUSH
38569: LD_INT 1
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: LD_INT 1
38578: PUSH
38579: LD_INT 2
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 0
38588: PUSH
38589: LD_INT 2
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 1
38598: NEG
38599: PUSH
38600: LD_INT 1
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 2
38609: NEG
38610: PUSH
38611: LD_INT 0
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 2
38620: NEG
38621: PUSH
38622: LD_INT 1
38624: NEG
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 1
38632: NEG
38633: PUSH
38634: LD_INT 3
38636: NEG
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 0
38644: PUSH
38645: LD_INT 3
38647: NEG
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 1
38655: PUSH
38656: LD_INT 2
38658: NEG
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 2
38666: PUSH
38667: LD_INT 1
38669: NEG
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 3
38677: PUSH
38678: LD_INT 0
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 3
38687: PUSH
38688: LD_INT 1
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 1
38697: PUSH
38698: LD_INT 3
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 0
38707: PUSH
38708: LD_INT 3
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 1
38717: NEG
38718: PUSH
38719: LD_INT 2
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 2
38728: NEG
38729: PUSH
38730: LD_INT 1
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 3
38739: NEG
38740: PUSH
38741: LD_INT 0
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 3
38750: NEG
38751: PUSH
38752: LD_INT 1
38754: NEG
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38791: LD_ADDR_VAR 0 44
38795: PUSH
38796: LD_INT 0
38798: PUSH
38799: LD_INT 0
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 0
38808: PUSH
38809: LD_INT 1
38811: NEG
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 1
38819: PUSH
38820: LD_INT 0
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 1
38829: PUSH
38830: LD_INT 1
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 0
38839: PUSH
38840: LD_INT 1
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 1
38849: NEG
38850: PUSH
38851: LD_INT 0
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 1
38860: NEG
38861: PUSH
38862: LD_INT 1
38864: NEG
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 1
38872: NEG
38873: PUSH
38874: LD_INT 2
38876: NEG
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 1
38884: PUSH
38885: LD_INT 1
38887: NEG
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 2
38895: PUSH
38896: LD_INT 0
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 2
38905: PUSH
38906: LD_INT 1
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 2
38915: PUSH
38916: LD_INT 2
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 1
38925: PUSH
38926: LD_INT 2
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 1
38935: NEG
38936: PUSH
38937: LD_INT 1
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 2
38946: NEG
38947: PUSH
38948: LD_INT 0
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 2
38957: NEG
38958: PUSH
38959: LD_INT 1
38961: NEG
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 2
38969: NEG
38970: PUSH
38971: LD_INT 2
38973: NEG
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 2
38981: NEG
38982: PUSH
38983: LD_INT 3
38985: NEG
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 2
38993: PUSH
38994: LD_INT 1
38996: NEG
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 3
39004: PUSH
39005: LD_INT 0
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 3
39014: PUSH
39015: LD_INT 1
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 3
39024: PUSH
39025: LD_INT 2
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 3
39034: PUSH
39035: LD_INT 3
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 2
39044: PUSH
39045: LD_INT 3
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 2
39054: NEG
39055: PUSH
39056: LD_INT 1
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 3
39065: NEG
39066: PUSH
39067: LD_INT 0
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 3
39076: NEG
39077: PUSH
39078: LD_INT 1
39080: NEG
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 3
39088: NEG
39089: PUSH
39090: LD_INT 2
39092: NEG
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 3
39100: NEG
39101: PUSH
39102: LD_INT 3
39104: NEG
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39141: LD_ADDR_VAR 0 45
39145: PUSH
39146: LD_INT 0
39148: PUSH
39149: LD_INT 0
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 0
39158: PUSH
39159: LD_INT 1
39161: NEG
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 1
39169: PUSH
39170: LD_INT 0
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 1
39179: PUSH
39180: LD_INT 1
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 0
39189: PUSH
39190: LD_INT 1
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 1
39199: NEG
39200: PUSH
39201: LD_INT 0
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 1
39210: NEG
39211: PUSH
39212: LD_INT 1
39214: NEG
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 1
39222: NEG
39223: PUSH
39224: LD_INT 2
39226: NEG
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 0
39234: PUSH
39235: LD_INT 2
39237: NEG
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 1
39245: PUSH
39246: LD_INT 1
39248: NEG
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 2
39256: PUSH
39257: LD_INT 1
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 2
39266: PUSH
39267: LD_INT 2
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 1
39276: PUSH
39277: LD_INT 2
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 0
39286: PUSH
39287: LD_INT 2
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 1
39296: NEG
39297: PUSH
39298: LD_INT 1
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 2
39307: NEG
39308: PUSH
39309: LD_INT 1
39311: NEG
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 2
39319: NEG
39320: PUSH
39321: LD_INT 2
39323: NEG
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 2
39331: NEG
39332: PUSH
39333: LD_INT 3
39335: NEG
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 1
39343: NEG
39344: PUSH
39345: LD_INT 3
39347: NEG
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 0
39355: PUSH
39356: LD_INT 3
39358: NEG
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 1
39366: PUSH
39367: LD_INT 2
39369: NEG
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 3
39377: PUSH
39378: LD_INT 2
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 3
39387: PUSH
39388: LD_INT 3
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 2
39397: PUSH
39398: LD_INT 3
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: LD_INT 1
39407: PUSH
39408: LD_INT 3
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 0
39417: PUSH
39418: LD_INT 3
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 1
39427: NEG
39428: PUSH
39429: LD_INT 2
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 3
39438: NEG
39439: PUSH
39440: LD_INT 2
39442: NEG
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 3
39450: NEG
39451: PUSH
39452: LD_INT 3
39454: NEG
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39491: LD_ADDR_VAR 0 46
39495: PUSH
39496: LD_INT 0
39498: PUSH
39499: LD_INT 0
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 0
39508: PUSH
39509: LD_INT 1
39511: NEG
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 1
39519: PUSH
39520: LD_INT 0
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 1
39529: PUSH
39530: LD_INT 1
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 0
39539: PUSH
39540: LD_INT 1
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 1
39549: NEG
39550: PUSH
39551: LD_INT 0
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 1
39560: NEG
39561: PUSH
39562: LD_INT 1
39564: NEG
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 1
39572: NEG
39573: PUSH
39574: LD_INT 2
39576: NEG
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 0
39584: PUSH
39585: LD_INT 2
39587: NEG
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 1
39595: PUSH
39596: LD_INT 1
39598: NEG
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 2
39606: PUSH
39607: LD_INT 0
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 2
39616: PUSH
39617: LD_INT 1
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 1
39626: PUSH
39627: LD_INT 2
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 0
39636: PUSH
39637: LD_INT 2
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 1
39646: NEG
39647: PUSH
39648: LD_INT 1
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 2
39657: NEG
39658: PUSH
39659: LD_INT 0
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 2
39668: NEG
39669: PUSH
39670: LD_INT 1
39672: NEG
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 1
39680: NEG
39681: PUSH
39682: LD_INT 3
39684: NEG
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 0
39692: PUSH
39693: LD_INT 3
39695: NEG
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 1
39703: PUSH
39704: LD_INT 2
39706: NEG
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 2
39714: PUSH
39715: LD_INT 1
39717: NEG
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 3
39725: PUSH
39726: LD_INT 0
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 3
39735: PUSH
39736: LD_INT 1
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 1
39745: PUSH
39746: LD_INT 3
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 0
39755: PUSH
39756: LD_INT 3
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 1
39765: NEG
39766: PUSH
39767: LD_INT 2
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 2
39776: NEG
39777: PUSH
39778: LD_INT 1
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 3
39787: NEG
39788: PUSH
39789: LD_INT 0
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 3
39798: NEG
39799: PUSH
39800: LD_INT 1
39802: NEG
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39839: LD_ADDR_VAR 0 47
39843: PUSH
39844: LD_INT 0
39846: PUSH
39847: LD_INT 0
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 0
39856: PUSH
39857: LD_INT 1
39859: NEG
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 1
39867: PUSH
39868: LD_INT 0
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 1
39877: PUSH
39878: LD_INT 1
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 0
39887: PUSH
39888: LD_INT 1
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 1
39897: NEG
39898: PUSH
39899: LD_INT 0
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 1
39908: NEG
39909: PUSH
39910: LD_INT 1
39912: NEG
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 1
39920: NEG
39921: PUSH
39922: LD_INT 2
39924: NEG
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 0
39932: PUSH
39933: LD_INT 2
39935: NEG
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 1
39943: PUSH
39944: LD_INT 1
39946: NEG
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 2
39954: NEG
39955: PUSH
39956: LD_INT 1
39958: NEG
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 2
39966: NEG
39967: PUSH
39968: LD_INT 2
39970: NEG
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39990: LD_ADDR_VAR 0 48
39994: PUSH
39995: LD_INT 0
39997: PUSH
39998: LD_INT 0
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 0
40007: PUSH
40008: LD_INT 1
40010: NEG
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 1
40018: PUSH
40019: LD_INT 0
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 1
40028: PUSH
40029: LD_INT 1
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 0
40038: PUSH
40039: LD_INT 1
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 1
40048: NEG
40049: PUSH
40050: LD_INT 0
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 1
40059: NEG
40060: PUSH
40061: LD_INT 1
40063: NEG
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 1
40071: NEG
40072: PUSH
40073: LD_INT 2
40075: NEG
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 0
40083: PUSH
40084: LD_INT 2
40086: NEG
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 1
40094: PUSH
40095: LD_INT 1
40097: NEG
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 2
40105: PUSH
40106: LD_INT 0
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 2
40115: PUSH
40116: LD_INT 1
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40137: LD_ADDR_VAR 0 49
40141: PUSH
40142: LD_INT 0
40144: PUSH
40145: LD_INT 0
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 0
40154: PUSH
40155: LD_INT 1
40157: NEG
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 1
40165: PUSH
40166: LD_INT 0
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 1
40175: PUSH
40176: LD_INT 1
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 0
40185: PUSH
40186: LD_INT 1
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 1
40195: NEG
40196: PUSH
40197: LD_INT 0
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 1
40206: NEG
40207: PUSH
40208: LD_INT 1
40210: NEG
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 1
40218: PUSH
40219: LD_INT 1
40221: NEG
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 2
40229: PUSH
40230: LD_INT 0
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 2
40239: PUSH
40240: LD_INT 1
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 2
40249: PUSH
40250: LD_INT 2
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 1
40259: PUSH
40260: LD_INT 2
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40281: LD_ADDR_VAR 0 50
40285: PUSH
40286: LD_INT 0
40288: PUSH
40289: LD_INT 0
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 0
40298: PUSH
40299: LD_INT 1
40301: NEG
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 1
40309: PUSH
40310: LD_INT 0
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 1
40319: PUSH
40320: LD_INT 1
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 0
40329: PUSH
40330: LD_INT 1
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 1
40339: NEG
40340: PUSH
40341: LD_INT 0
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 1
40350: NEG
40351: PUSH
40352: LD_INT 1
40354: NEG
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 2
40362: PUSH
40363: LD_INT 1
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 2
40372: PUSH
40373: LD_INT 2
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 1
40382: PUSH
40383: LD_INT 2
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 0
40392: PUSH
40393: LD_INT 2
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 1
40402: NEG
40403: PUSH
40404: LD_INT 1
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40425: LD_ADDR_VAR 0 51
40429: PUSH
40430: LD_INT 0
40432: PUSH
40433: LD_INT 0
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 0
40442: PUSH
40443: LD_INT 1
40445: NEG
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 1
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 1
40463: PUSH
40464: LD_INT 1
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 0
40473: PUSH
40474: LD_INT 1
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 1
40483: NEG
40484: PUSH
40485: LD_INT 0
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 1
40494: NEG
40495: PUSH
40496: LD_INT 1
40498: NEG
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 1
40506: PUSH
40507: LD_INT 2
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 0
40516: PUSH
40517: LD_INT 2
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 1
40526: NEG
40527: PUSH
40528: LD_INT 1
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 2
40537: NEG
40538: PUSH
40539: LD_INT 0
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 2
40548: NEG
40549: PUSH
40550: LD_INT 1
40552: NEG
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40572: LD_ADDR_VAR 0 52
40576: PUSH
40577: LD_INT 0
40579: PUSH
40580: LD_INT 0
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 0
40589: PUSH
40590: LD_INT 1
40592: NEG
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 1
40600: PUSH
40601: LD_INT 0
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 1
40610: PUSH
40611: LD_INT 1
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 0
40620: PUSH
40621: LD_INT 1
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 1
40630: NEG
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 1
40641: NEG
40642: PUSH
40643: LD_INT 1
40645: NEG
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 1
40653: NEG
40654: PUSH
40655: LD_INT 2
40657: NEG
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 1
40665: NEG
40666: PUSH
40667: LD_INT 1
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 2
40676: NEG
40677: PUSH
40678: LD_INT 0
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 2
40687: NEG
40688: PUSH
40689: LD_INT 1
40691: NEG
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 2
40699: NEG
40700: PUSH
40701: LD_INT 2
40703: NEG
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40723: LD_ADDR_VAR 0 53
40727: PUSH
40728: LD_INT 0
40730: PUSH
40731: LD_INT 0
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 0
40740: PUSH
40741: LD_INT 1
40743: NEG
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 1
40751: PUSH
40752: LD_INT 0
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 1
40761: PUSH
40762: LD_INT 1
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 0
40771: PUSH
40772: LD_INT 1
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 1
40781: NEG
40782: PUSH
40783: LD_INT 0
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 1
40792: NEG
40793: PUSH
40794: LD_INT 1
40796: NEG
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 1
40804: NEG
40805: PUSH
40806: LD_INT 2
40808: NEG
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 0
40816: PUSH
40817: LD_INT 2
40819: NEG
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 1
40827: PUSH
40828: LD_INT 1
40830: NEG
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 2
40838: PUSH
40839: LD_INT 0
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 2
40848: PUSH
40849: LD_INT 1
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 2
40858: PUSH
40859: LD_INT 2
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 1
40868: PUSH
40869: LD_INT 2
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 0
40878: PUSH
40879: LD_INT 2
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 1
40888: NEG
40889: PUSH
40890: LD_INT 1
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 2
40899: NEG
40900: PUSH
40901: LD_INT 0
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 2
40910: NEG
40911: PUSH
40912: LD_INT 1
40914: NEG
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 2
40922: NEG
40923: PUSH
40924: LD_INT 2
40926: NEG
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40953: LD_ADDR_VAR 0 54
40957: PUSH
40958: LD_INT 0
40960: PUSH
40961: LD_INT 0
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 0
40970: PUSH
40971: LD_INT 1
40973: NEG
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: LD_INT 0
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 1
40991: PUSH
40992: LD_INT 1
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 0
41001: PUSH
41002: LD_INT 1
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 1
41011: NEG
41012: PUSH
41013: LD_INT 0
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 1
41022: NEG
41023: PUSH
41024: LD_INT 1
41026: NEG
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 1
41034: NEG
41035: PUSH
41036: LD_INT 2
41038: NEG
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 0
41046: PUSH
41047: LD_INT 2
41049: NEG
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 1
41057: PUSH
41058: LD_INT 1
41060: NEG
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 2
41068: PUSH
41069: LD_INT 0
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 2
41078: PUSH
41079: LD_INT 1
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 2
41088: PUSH
41089: LD_INT 2
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 1
41098: PUSH
41099: LD_INT 2
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 0
41108: PUSH
41109: LD_INT 2
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 1
41118: NEG
41119: PUSH
41120: LD_INT 1
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 2
41129: NEG
41130: PUSH
41131: LD_INT 0
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 2
41140: NEG
41141: PUSH
41142: LD_INT 1
41144: NEG
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 2
41152: NEG
41153: PUSH
41154: LD_INT 2
41156: NEG
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41183: LD_ADDR_VAR 0 55
41187: PUSH
41188: LD_INT 0
41190: PUSH
41191: LD_INT 0
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 0
41200: PUSH
41201: LD_INT 1
41203: NEG
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 1
41211: PUSH
41212: LD_INT 0
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 1
41221: PUSH
41222: LD_INT 1
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 0
41231: PUSH
41232: LD_INT 1
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 1
41241: NEG
41242: PUSH
41243: LD_INT 0
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 1
41252: NEG
41253: PUSH
41254: LD_INT 1
41256: NEG
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 1
41264: NEG
41265: PUSH
41266: LD_INT 2
41268: NEG
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 0
41276: PUSH
41277: LD_INT 2
41279: NEG
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 1
41287: PUSH
41288: LD_INT 1
41290: NEG
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 2
41298: PUSH
41299: LD_INT 0
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 2
41308: PUSH
41309: LD_INT 1
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 2
41318: PUSH
41319: LD_INT 2
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 1
41328: PUSH
41329: LD_INT 2
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 0
41338: PUSH
41339: LD_INT 2
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 1
41348: NEG
41349: PUSH
41350: LD_INT 1
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 2
41359: NEG
41360: PUSH
41361: LD_INT 0
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 2
41370: NEG
41371: PUSH
41372: LD_INT 1
41374: NEG
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 2
41382: NEG
41383: PUSH
41384: LD_INT 2
41386: NEG
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41413: LD_ADDR_VAR 0 56
41417: PUSH
41418: LD_INT 0
41420: PUSH
41421: LD_INT 0
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 0
41430: PUSH
41431: LD_INT 1
41433: NEG
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 1
41451: PUSH
41452: LD_INT 1
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: LD_INT 1
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 1
41471: NEG
41472: PUSH
41473: LD_INT 0
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 1
41482: NEG
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 1
41494: NEG
41495: PUSH
41496: LD_INT 2
41498: NEG
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 0
41506: PUSH
41507: LD_INT 2
41509: NEG
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 1
41517: PUSH
41518: LD_INT 1
41520: NEG
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 2
41528: PUSH
41529: LD_INT 0
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 2
41538: PUSH
41539: LD_INT 1
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 2
41548: PUSH
41549: LD_INT 2
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 1
41558: PUSH
41559: LD_INT 2
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 0
41568: PUSH
41569: LD_INT 2
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 1
41578: NEG
41579: PUSH
41580: LD_INT 1
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 2
41589: NEG
41590: PUSH
41591: LD_INT 0
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 2
41600: NEG
41601: PUSH
41602: LD_INT 1
41604: NEG
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 2
41612: NEG
41613: PUSH
41614: LD_INT 2
41616: NEG
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41643: LD_ADDR_VAR 0 57
41647: PUSH
41648: LD_INT 0
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 0
41660: PUSH
41661: LD_INT 1
41663: NEG
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 1
41671: PUSH
41672: LD_INT 0
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 1
41681: PUSH
41682: LD_INT 1
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 0
41691: PUSH
41692: LD_INT 1
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 1
41701: NEG
41702: PUSH
41703: LD_INT 0
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 1
41712: NEG
41713: PUSH
41714: LD_INT 1
41716: NEG
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 1
41724: NEG
41725: PUSH
41726: LD_INT 2
41728: NEG
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 0
41736: PUSH
41737: LD_INT 2
41739: NEG
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 1
41747: PUSH
41748: LD_INT 1
41750: NEG
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 2
41758: PUSH
41759: LD_INT 0
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 2
41768: PUSH
41769: LD_INT 1
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 2
41778: PUSH
41779: LD_INT 2
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 1
41788: PUSH
41789: LD_INT 2
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 0
41798: PUSH
41799: LD_INT 2
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 1
41808: NEG
41809: PUSH
41810: LD_INT 1
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 2
41819: NEG
41820: PUSH
41821: LD_INT 0
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 2
41830: NEG
41831: PUSH
41832: LD_INT 1
41834: NEG
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 2
41842: NEG
41843: PUSH
41844: LD_INT 2
41846: NEG
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41873: LD_ADDR_VAR 0 58
41877: PUSH
41878: LD_INT 0
41880: PUSH
41881: LD_INT 0
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 1
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 1
41911: PUSH
41912: LD_INT 1
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 0
41921: PUSH
41922: LD_INT 1
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 1
41931: NEG
41932: PUSH
41933: LD_INT 0
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 1
41942: NEG
41943: PUSH
41944: LD_INT 1
41946: NEG
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 1
41954: NEG
41955: PUSH
41956: LD_INT 2
41958: NEG
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: LD_INT 2
41969: NEG
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 1
41977: PUSH
41978: LD_INT 1
41980: NEG
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 2
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 2
41998: PUSH
41999: LD_INT 1
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 2
42008: PUSH
42009: LD_INT 2
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 1
42018: PUSH
42019: LD_INT 2
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 0
42028: PUSH
42029: LD_INT 2
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 1
42038: NEG
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 2
42049: NEG
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 2
42060: NEG
42061: PUSH
42062: LD_INT 1
42064: NEG
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 2
42072: NEG
42073: PUSH
42074: LD_INT 2
42076: NEG
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42103: LD_ADDR_VAR 0 59
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: LD_INT 1
42123: NEG
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 1
42131: PUSH
42132: LD_INT 0
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 1
42141: PUSH
42142: LD_INT 1
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 0
42151: PUSH
42152: LD_INT 1
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 1
42161: NEG
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 1
42172: NEG
42173: PUSH
42174: LD_INT 1
42176: NEG
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42191: LD_ADDR_VAR 0 60
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: LD_INT 0
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: LD_INT 1
42211: NEG
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 1
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 1
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: LD_INT 1
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 1
42249: NEG
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 1
42260: NEG
42261: PUSH
42262: LD_INT 1
42264: NEG
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42279: LD_ADDR_VAR 0 61
42283: PUSH
42284: LD_INT 0
42286: PUSH
42287: LD_INT 0
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: LD_INT 1
42299: NEG
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 1
42307: PUSH
42308: LD_INT 0
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: LD_INT 1
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 0
42327: PUSH
42328: LD_INT 1
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 1
42337: NEG
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 1
42348: NEG
42349: PUSH
42350: LD_INT 1
42352: NEG
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42367: LD_ADDR_VAR 0 62
42371: PUSH
42372: LD_INT 0
42374: PUSH
42375: LD_INT 0
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 0
42384: PUSH
42385: LD_INT 1
42387: NEG
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 1
42395: PUSH
42396: LD_INT 0
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 1
42405: PUSH
42406: LD_INT 1
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 0
42415: PUSH
42416: LD_INT 1
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 1
42425: NEG
42426: PUSH
42427: LD_INT 0
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 1
42436: NEG
42437: PUSH
42438: LD_INT 1
42440: NEG
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42455: LD_ADDR_VAR 0 63
42459: PUSH
42460: LD_INT 0
42462: PUSH
42463: LD_INT 0
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 0
42472: PUSH
42473: LD_INT 1
42475: NEG
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 1
42483: PUSH
42484: LD_INT 0
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 1
42493: PUSH
42494: LD_INT 1
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 0
42503: PUSH
42504: LD_INT 1
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 1
42513: NEG
42514: PUSH
42515: LD_INT 0
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 1
42524: NEG
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42543: LD_ADDR_VAR 0 64
42547: PUSH
42548: LD_INT 0
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 0
42560: PUSH
42561: LD_INT 1
42563: NEG
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 1
42571: PUSH
42572: LD_INT 0
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 1
42581: PUSH
42582: LD_INT 1
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 0
42591: PUSH
42592: LD_INT 1
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 1
42601: NEG
42602: PUSH
42603: LD_INT 0
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: LD_INT 1
42616: NEG
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: ST_TO_ADDR
// end ; 1 :
42631: GO 48528
42633: LD_INT 1
42635: DOUBLE
42636: EQUAL
42637: IFTRUE 42641
42639: GO 45264
42641: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42642: LD_ADDR_VAR 0 11
42646: PUSH
42647: LD_INT 1
42649: NEG
42650: PUSH
42651: LD_INT 3
42653: NEG
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 0
42661: PUSH
42662: LD_INT 3
42664: NEG
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 1
42672: PUSH
42673: LD_INT 2
42675: NEG
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: LIST
42685: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42686: LD_ADDR_VAR 0 12
42690: PUSH
42691: LD_INT 2
42693: PUSH
42694: LD_INT 1
42696: NEG
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 3
42704: PUSH
42705: LD_INT 0
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 3
42714: PUSH
42715: LD_INT 1
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: LIST
42726: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42727: LD_ADDR_VAR 0 13
42731: PUSH
42732: LD_INT 3
42734: PUSH
42735: LD_INT 2
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 3
42744: PUSH
42745: LD_INT 3
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 2
42754: PUSH
42755: LD_INT 3
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: LIST
42766: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42767: LD_ADDR_VAR 0 14
42771: PUSH
42772: LD_INT 1
42774: PUSH
42775: LD_INT 3
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 0
42784: PUSH
42785: LD_INT 3
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 1
42794: NEG
42795: PUSH
42796: LD_INT 2
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: LIST
42807: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42808: LD_ADDR_VAR 0 15
42812: PUSH
42813: LD_INT 2
42815: NEG
42816: PUSH
42817: LD_INT 1
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 3
42826: NEG
42827: PUSH
42828: LD_INT 0
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 3
42837: NEG
42838: PUSH
42839: LD_INT 1
42841: NEG
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: LIST
42851: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42852: LD_ADDR_VAR 0 16
42856: PUSH
42857: LD_INT 2
42859: NEG
42860: PUSH
42861: LD_INT 3
42863: NEG
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 3
42871: NEG
42872: PUSH
42873: LD_INT 2
42875: NEG
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 3
42883: NEG
42884: PUSH
42885: LD_INT 3
42887: NEG
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: LIST
42897: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42898: LD_ADDR_VAR 0 17
42902: PUSH
42903: LD_INT 1
42905: NEG
42906: PUSH
42907: LD_INT 3
42909: NEG
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 0
42917: PUSH
42918: LD_INT 3
42920: NEG
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 1
42928: PUSH
42929: LD_INT 2
42931: NEG
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: LIST
42941: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42942: LD_ADDR_VAR 0 18
42946: PUSH
42947: LD_INT 2
42949: PUSH
42950: LD_INT 1
42952: NEG
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 3
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 3
42970: PUSH
42971: LD_INT 1
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: LIST
42982: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42983: LD_ADDR_VAR 0 19
42987: PUSH
42988: LD_INT 3
42990: PUSH
42991: LD_INT 2
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 3
43000: PUSH
43001: LD_INT 3
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 2
43010: PUSH
43011: LD_INT 3
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: LIST
43022: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43023: LD_ADDR_VAR 0 20
43027: PUSH
43028: LD_INT 1
43030: PUSH
43031: LD_INT 3
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 0
43040: PUSH
43041: LD_INT 3
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 1
43050: NEG
43051: PUSH
43052: LD_INT 2
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: LIST
43063: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43064: LD_ADDR_VAR 0 21
43068: PUSH
43069: LD_INT 2
43071: NEG
43072: PUSH
43073: LD_INT 1
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 3
43082: NEG
43083: PUSH
43084: LD_INT 0
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 3
43093: NEG
43094: PUSH
43095: LD_INT 1
43097: NEG
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: LIST
43107: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43108: LD_ADDR_VAR 0 22
43112: PUSH
43113: LD_INT 2
43115: NEG
43116: PUSH
43117: LD_INT 3
43119: NEG
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 3
43127: NEG
43128: PUSH
43129: LD_INT 2
43131: NEG
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 3
43139: NEG
43140: PUSH
43141: LD_INT 3
43143: NEG
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: LIST
43153: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43154: LD_ADDR_VAR 0 23
43158: PUSH
43159: LD_INT 0
43161: PUSH
43162: LD_INT 3
43164: NEG
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 1
43172: NEG
43173: PUSH
43174: LD_INT 4
43176: NEG
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 1
43184: PUSH
43185: LD_INT 3
43187: NEG
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: LIST
43197: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43198: LD_ADDR_VAR 0 24
43202: PUSH
43203: LD_INT 3
43205: PUSH
43206: LD_INT 0
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 3
43215: PUSH
43216: LD_INT 1
43218: NEG
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 4
43226: PUSH
43227: LD_INT 1
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: LIST
43238: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43239: LD_ADDR_VAR 0 25
43243: PUSH
43244: LD_INT 3
43246: PUSH
43247: LD_INT 3
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 4
43256: PUSH
43257: LD_INT 3
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 3
43266: PUSH
43267: LD_INT 4
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: LIST
43278: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43279: LD_ADDR_VAR 0 26
43283: PUSH
43284: LD_INT 0
43286: PUSH
43287: LD_INT 3
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 1
43296: PUSH
43297: LD_INT 4
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 1
43306: NEG
43307: PUSH
43308: LD_INT 3
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: LIST
43319: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43320: LD_ADDR_VAR 0 27
43324: PUSH
43325: LD_INT 3
43327: NEG
43328: PUSH
43329: LD_INT 0
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 3
43338: NEG
43339: PUSH
43340: LD_INT 1
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 4
43349: NEG
43350: PUSH
43351: LD_INT 1
43353: NEG
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: LIST
43363: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43364: LD_ADDR_VAR 0 28
43368: PUSH
43369: LD_INT 3
43371: NEG
43372: PUSH
43373: LD_INT 3
43375: NEG
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 3
43383: NEG
43384: PUSH
43385: LD_INT 4
43387: NEG
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 4
43395: NEG
43396: PUSH
43397: LD_INT 3
43399: NEG
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: LIST
43409: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43410: LD_ADDR_VAR 0 29
43414: PUSH
43415: LD_INT 1
43417: NEG
43418: PUSH
43419: LD_INT 3
43421: NEG
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: LD_INT 3
43432: NEG
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 1
43440: PUSH
43441: LD_INT 2
43443: NEG
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 1
43451: NEG
43452: PUSH
43453: LD_INT 4
43455: NEG
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 0
43463: PUSH
43464: LD_INT 4
43466: NEG
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 1
43474: PUSH
43475: LD_INT 3
43477: NEG
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 1
43485: NEG
43486: PUSH
43487: LD_INT 5
43489: NEG
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 0
43497: PUSH
43498: LD_INT 5
43500: NEG
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 1
43508: PUSH
43509: LD_INT 4
43511: NEG
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 1
43519: NEG
43520: PUSH
43521: LD_INT 6
43523: NEG
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 0
43531: PUSH
43532: LD_INT 6
43534: NEG
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 1
43542: PUSH
43543: LD_INT 5
43545: NEG
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43565: LD_ADDR_VAR 0 30
43569: PUSH
43570: LD_INT 2
43572: PUSH
43573: LD_INT 1
43575: NEG
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 3
43583: PUSH
43584: LD_INT 0
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 3
43593: PUSH
43594: LD_INT 1
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 3
43603: PUSH
43604: LD_INT 1
43606: NEG
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 4
43614: PUSH
43615: LD_INT 0
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 4
43624: PUSH
43625: LD_INT 1
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 4
43634: PUSH
43635: LD_INT 1
43637: NEG
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 5
43645: PUSH
43646: LD_INT 0
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 5
43655: PUSH
43656: LD_INT 1
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 5
43665: PUSH
43666: LD_INT 1
43668: NEG
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 6
43676: PUSH
43677: LD_INT 0
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 6
43686: PUSH
43687: LD_INT 1
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43708: LD_ADDR_VAR 0 31
43712: PUSH
43713: LD_INT 3
43715: PUSH
43716: LD_INT 2
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 3
43725: PUSH
43726: LD_INT 3
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 2
43735: PUSH
43736: LD_INT 3
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 4
43745: PUSH
43746: LD_INT 3
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 4
43755: PUSH
43756: LD_INT 4
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 3
43765: PUSH
43766: LD_INT 4
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 5
43775: PUSH
43776: LD_INT 4
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 5
43785: PUSH
43786: LD_INT 5
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 4
43795: PUSH
43796: LD_INT 5
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 6
43805: PUSH
43806: LD_INT 5
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 6
43815: PUSH
43816: LD_INT 6
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 5
43825: PUSH
43826: LD_INT 6
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43847: LD_ADDR_VAR 0 32
43851: PUSH
43852: LD_INT 1
43854: PUSH
43855: LD_INT 3
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 0
43864: PUSH
43865: LD_INT 3
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 1
43874: NEG
43875: PUSH
43876: LD_INT 2
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 1
43885: PUSH
43886: LD_INT 4
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 0
43895: PUSH
43896: LD_INT 4
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 1
43905: NEG
43906: PUSH
43907: LD_INT 3
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: PUSH
43917: LD_INT 5
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 0
43926: PUSH
43927: LD_INT 5
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 1
43936: NEG
43937: PUSH
43938: LD_INT 4
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 1
43947: PUSH
43948: LD_INT 6
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 0
43957: PUSH
43958: LD_INT 6
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 1
43967: NEG
43968: PUSH
43969: LD_INT 5
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43990: LD_ADDR_VAR 0 33
43994: PUSH
43995: LD_INT 2
43997: NEG
43998: PUSH
43999: LD_INT 1
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 3
44008: NEG
44009: PUSH
44010: LD_INT 0
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 3
44019: NEG
44020: PUSH
44021: LD_INT 1
44023: NEG
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 3
44031: NEG
44032: PUSH
44033: LD_INT 1
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 4
44042: NEG
44043: PUSH
44044: LD_INT 0
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 4
44053: NEG
44054: PUSH
44055: LD_INT 1
44057: NEG
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 4
44065: NEG
44066: PUSH
44067: LD_INT 1
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 5
44076: NEG
44077: PUSH
44078: LD_INT 0
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 5
44087: NEG
44088: PUSH
44089: LD_INT 1
44091: NEG
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 5
44099: NEG
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 6
44110: NEG
44111: PUSH
44112: LD_INT 0
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 6
44121: NEG
44122: PUSH
44123: LD_INT 1
44125: NEG
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44145: LD_ADDR_VAR 0 34
44149: PUSH
44150: LD_INT 2
44152: NEG
44153: PUSH
44154: LD_INT 3
44156: NEG
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 3
44164: NEG
44165: PUSH
44166: LD_INT 2
44168: NEG
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 3
44176: NEG
44177: PUSH
44178: LD_INT 3
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 3
44188: NEG
44189: PUSH
44190: LD_INT 4
44192: NEG
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 4
44200: NEG
44201: PUSH
44202: LD_INT 3
44204: NEG
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 4
44212: NEG
44213: PUSH
44214: LD_INT 4
44216: NEG
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 4
44224: NEG
44225: PUSH
44226: LD_INT 5
44228: NEG
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 5
44236: NEG
44237: PUSH
44238: LD_INT 4
44240: NEG
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 5
44248: NEG
44249: PUSH
44250: LD_INT 5
44252: NEG
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 5
44260: NEG
44261: PUSH
44262: LD_INT 6
44264: NEG
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 6
44272: NEG
44273: PUSH
44274: LD_INT 5
44276: NEG
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 6
44284: NEG
44285: PUSH
44286: LD_INT 6
44288: NEG
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44308: LD_ADDR_VAR 0 41
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: LD_INT 2
44318: NEG
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: LD_INT 3
44330: NEG
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 1
44338: PUSH
44339: LD_INT 2
44341: NEG
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: LIST
44351: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44352: LD_ADDR_VAR 0 42
44356: PUSH
44357: LD_INT 2
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 2
44369: PUSH
44370: LD_INT 1
44372: NEG
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 3
44380: PUSH
44381: LD_INT 1
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: LIST
44392: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44393: LD_ADDR_VAR 0 43
44397: PUSH
44398: LD_INT 2
44400: PUSH
44401: LD_INT 2
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 3
44410: PUSH
44411: LD_INT 2
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 2
44420: PUSH
44421: LD_INT 3
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: LIST
44432: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44433: LD_ADDR_VAR 0 44
44437: PUSH
44438: LD_INT 0
44440: PUSH
44441: LD_INT 2
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 1
44450: PUSH
44451: LD_INT 3
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 1
44460: NEG
44461: PUSH
44462: LD_INT 2
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: LIST
44473: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44474: LD_ADDR_VAR 0 45
44478: PUSH
44479: LD_INT 2
44481: NEG
44482: PUSH
44483: LD_INT 0
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 2
44492: NEG
44493: PUSH
44494: LD_INT 1
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 3
44503: NEG
44504: PUSH
44505: LD_INT 1
44507: NEG
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: LIST
44517: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44518: LD_ADDR_VAR 0 46
44522: PUSH
44523: LD_INT 2
44525: NEG
44526: PUSH
44527: LD_INT 2
44529: NEG
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 2
44537: NEG
44538: PUSH
44539: LD_INT 3
44541: NEG
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 3
44549: NEG
44550: PUSH
44551: LD_INT 2
44553: NEG
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: LIST
44563: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44564: LD_ADDR_VAR 0 47
44568: PUSH
44569: LD_INT 2
44571: NEG
44572: PUSH
44573: LD_INT 3
44575: NEG
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 1
44583: NEG
44584: PUSH
44585: LD_INT 3
44587: NEG
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44597: LD_ADDR_VAR 0 48
44601: PUSH
44602: LD_INT 1
44604: PUSH
44605: LD_INT 2
44607: NEG
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 2
44615: PUSH
44616: LD_INT 1
44618: NEG
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44628: LD_ADDR_VAR 0 49
44632: PUSH
44633: LD_INT 3
44635: PUSH
44636: LD_INT 1
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 3
44645: PUSH
44646: LD_INT 2
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44657: LD_ADDR_VAR 0 50
44661: PUSH
44662: LD_INT 2
44664: PUSH
44665: LD_INT 3
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 1
44674: PUSH
44675: LD_INT 3
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44686: LD_ADDR_VAR 0 51
44690: PUSH
44691: LD_INT 1
44693: NEG
44694: PUSH
44695: LD_INT 2
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 2
44704: NEG
44705: PUSH
44706: LD_INT 1
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44717: LD_ADDR_VAR 0 52
44721: PUSH
44722: LD_INT 3
44724: NEG
44725: PUSH
44726: LD_INT 1
44728: NEG
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 3
44736: NEG
44737: PUSH
44738: LD_INT 2
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44750: LD_ADDR_VAR 0 53
44754: PUSH
44755: LD_INT 1
44757: NEG
44758: PUSH
44759: LD_INT 3
44761: NEG
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 0
44769: PUSH
44770: LD_INT 3
44772: NEG
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: LD_INT 2
44783: NEG
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: LIST
44793: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44794: LD_ADDR_VAR 0 54
44798: PUSH
44799: LD_INT 2
44801: PUSH
44802: LD_INT 1
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 3
44812: PUSH
44813: LD_INT 0
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 3
44822: PUSH
44823: LD_INT 1
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: LIST
44834: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44835: LD_ADDR_VAR 0 55
44839: PUSH
44840: LD_INT 3
44842: PUSH
44843: LD_INT 2
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 3
44852: PUSH
44853: LD_INT 3
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 2
44862: PUSH
44863: LD_INT 3
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: LIST
44874: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44875: LD_ADDR_VAR 0 56
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: LD_INT 3
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 0
44892: PUSH
44893: LD_INT 3
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 1
44902: NEG
44903: PUSH
44904: LD_INT 2
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: LIST
44915: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44916: LD_ADDR_VAR 0 57
44920: PUSH
44921: LD_INT 2
44923: NEG
44924: PUSH
44925: LD_INT 1
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 3
44934: NEG
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 3
44945: NEG
44946: PUSH
44947: LD_INT 1
44949: NEG
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: LIST
44959: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44960: LD_ADDR_VAR 0 58
44964: PUSH
44965: LD_INT 2
44967: NEG
44968: PUSH
44969: LD_INT 3
44971: NEG
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 3
44979: NEG
44980: PUSH
44981: LD_INT 2
44983: NEG
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 3
44991: NEG
44992: PUSH
44993: LD_INT 3
44995: NEG
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: LIST
45005: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45006: LD_ADDR_VAR 0 59
45010: PUSH
45011: LD_INT 1
45013: NEG
45014: PUSH
45015: LD_INT 2
45017: NEG
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: LD_INT 2
45028: NEG
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: LD_INT 1
45039: NEG
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: LIST
45049: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45050: LD_ADDR_VAR 0 60
45054: PUSH
45055: LD_INT 1
45057: PUSH
45058: LD_INT 1
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 2
45068: PUSH
45069: LD_INT 0
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 2
45078: PUSH
45079: LD_INT 1
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: LIST
45090: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45091: LD_ADDR_VAR 0 61
45095: PUSH
45096: LD_INT 2
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 2
45108: PUSH
45109: LD_INT 2
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: LD_INT 2
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: LIST
45130: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45131: LD_ADDR_VAR 0 62
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: LD_INT 2
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 0
45148: PUSH
45149: LD_INT 2
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 1
45158: NEG
45159: PUSH
45160: LD_INT 1
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: LIST
45171: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45172: LD_ADDR_VAR 0 63
45176: PUSH
45177: LD_INT 1
45179: NEG
45180: PUSH
45181: LD_INT 1
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 2
45190: NEG
45191: PUSH
45192: LD_INT 0
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 2
45201: NEG
45202: PUSH
45203: LD_INT 1
45205: NEG
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: LIST
45215: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45216: LD_ADDR_VAR 0 64
45220: PUSH
45221: LD_INT 1
45223: NEG
45224: PUSH
45225: LD_INT 2
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 2
45235: NEG
45236: PUSH
45237: LD_INT 1
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 2
45247: NEG
45248: PUSH
45249: LD_INT 2
45251: NEG
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: LIST
45261: ST_TO_ADDR
// end ; 2 :
45262: GO 48528
45264: LD_INT 2
45266: DOUBLE
45267: EQUAL
45268: IFTRUE 45272
45270: GO 48527
45272: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45273: LD_ADDR_VAR 0 29
45277: PUSH
45278: LD_INT 4
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 4
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 5
45301: PUSH
45302: LD_INT 0
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 5
45311: PUSH
45312: LD_INT 1
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 4
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 3
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 3
45341: PUSH
45342: LD_INT 1
45344: NEG
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 3
45352: PUSH
45353: LD_INT 2
45355: NEG
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 5
45363: PUSH
45364: LD_INT 2
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 3
45373: PUSH
45374: LD_INT 3
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 3
45383: PUSH
45384: LD_INT 2
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 4
45393: PUSH
45394: LD_INT 3
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 4
45403: PUSH
45404: LD_INT 4
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 3
45413: PUSH
45414: LD_INT 4
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 2
45423: PUSH
45424: LD_INT 3
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 2
45433: PUSH
45434: LD_INT 2
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 4
45443: PUSH
45444: LD_INT 2
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 2
45453: PUSH
45454: LD_INT 4
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: LD_INT 4
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 0
45473: PUSH
45474: LD_INT 3
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 1
45483: PUSH
45484: LD_INT 4
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 1
45493: PUSH
45494: LD_INT 5
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: LD_INT 5
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: LD_INT 4
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 1
45524: NEG
45525: PUSH
45526: LD_INT 3
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 2
45535: PUSH
45536: LD_INT 5
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 2
45545: NEG
45546: PUSH
45547: LD_INT 3
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 3
45556: NEG
45557: PUSH
45558: LD_INT 0
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 3
45567: NEG
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 2
45579: NEG
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 2
45590: NEG
45591: PUSH
45592: LD_INT 1
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 3
45601: NEG
45602: PUSH
45603: LD_INT 1
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 4
45612: NEG
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 4
45623: NEG
45624: PUSH
45625: LD_INT 1
45627: NEG
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 4
45635: NEG
45636: PUSH
45637: LD_INT 2
45639: NEG
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 2
45647: NEG
45648: PUSH
45649: LD_INT 2
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 4
45658: NEG
45659: PUSH
45660: LD_INT 4
45662: NEG
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 4
45670: NEG
45671: PUSH
45672: LD_INT 5
45674: NEG
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 3
45682: NEG
45683: PUSH
45684: LD_INT 4
45686: NEG
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 3
45694: NEG
45695: PUSH
45696: LD_INT 3
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 4
45706: NEG
45707: PUSH
45708: LD_INT 3
45710: NEG
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 5
45718: NEG
45719: PUSH
45720: LD_INT 4
45722: NEG
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 5
45730: NEG
45731: PUSH
45732: LD_INT 5
45734: NEG
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 3
45742: NEG
45743: PUSH
45744: LD_INT 5
45746: NEG
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 5
45754: NEG
45755: PUSH
45756: LD_INT 3
45758: NEG
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45811: LD_ADDR_VAR 0 30
45815: PUSH
45816: LD_INT 4
45818: PUSH
45819: LD_INT 4
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 4
45828: PUSH
45829: LD_INT 3
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 5
45838: PUSH
45839: LD_INT 4
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 5
45848: PUSH
45849: LD_INT 5
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 4
45858: PUSH
45859: LD_INT 5
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 3
45868: PUSH
45869: LD_INT 4
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 3
45878: PUSH
45879: LD_INT 3
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 5
45888: PUSH
45889: LD_INT 3
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 3
45898: PUSH
45899: LD_INT 5
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: LD_INT 3
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: LD_INT 2
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: LD_INT 3
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: LD_INT 4
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: LD_INT 4
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 1
45958: NEG
45959: PUSH
45960: LD_INT 3
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 1
45969: NEG
45970: PUSH
45971: LD_INT 2
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 2
45980: PUSH
45981: LD_INT 4
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 2
45990: NEG
45991: PUSH
45992: LD_INT 2
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 4
46001: NEG
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 4
46012: NEG
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 3
46024: NEG
46025: PUSH
46026: LD_INT 0
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 3
46035: NEG
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 4
46046: NEG
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 5
46057: NEG
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 5
46068: NEG
46069: PUSH
46070: LD_INT 1
46072: NEG
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 5
46080: NEG
46081: PUSH
46082: LD_INT 2
46084: NEG
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 3
46092: NEG
46093: PUSH
46094: LD_INT 2
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 3
46103: NEG
46104: PUSH
46105: LD_INT 3
46107: NEG
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 3
46115: NEG
46116: PUSH
46117: LD_INT 4
46119: NEG
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 2
46127: NEG
46128: PUSH
46129: LD_INT 3
46131: NEG
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 2
46139: NEG
46140: PUSH
46141: LD_INT 2
46143: NEG
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 3
46151: NEG
46152: PUSH
46153: LD_INT 2
46155: NEG
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 4
46163: NEG
46164: PUSH
46165: LD_INT 3
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 4
46175: NEG
46176: PUSH
46177: LD_INT 4
46179: NEG
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 2
46187: NEG
46188: PUSH
46189: LD_INT 4
46191: NEG
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 4
46199: NEG
46200: PUSH
46201: LD_INT 2
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 0
46211: PUSH
46212: LD_INT 4
46214: NEG
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 0
46222: PUSH
46223: LD_INT 5
46225: NEG
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: LD_INT 4
46236: NEG
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: LD_INT 3
46247: NEG
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: LD_INT 3
46258: NEG
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 1
46266: NEG
46267: PUSH
46268: LD_INT 4
46270: NEG
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: LD_INT 5
46282: NEG
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 2
46290: PUSH
46291: LD_INT 3
46293: NEG
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 2
46301: NEG
46302: PUSH
46303: LD_INT 5
46305: NEG
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46358: LD_ADDR_VAR 0 31
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: LD_INT 4
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 0
46375: PUSH
46376: LD_INT 3
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 1
46385: PUSH
46386: LD_INT 4
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 1
46395: PUSH
46396: LD_INT 5
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: LD_INT 5
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: LD_INT 4
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 1
46426: NEG
46427: PUSH
46428: LD_INT 3
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 2
46437: PUSH
46438: LD_INT 5
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 2
46447: NEG
46448: PUSH
46449: LD_INT 3
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 3
46458: NEG
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 3
46469: NEG
46470: PUSH
46471: LD_INT 1
46473: NEG
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 2
46481: NEG
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 2
46492: NEG
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 3
46503: NEG
46504: PUSH
46505: LD_INT 1
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 4
46514: NEG
46515: PUSH
46516: LD_INT 0
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 4
46525: NEG
46526: PUSH
46527: LD_INT 1
46529: NEG
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 4
46537: NEG
46538: PUSH
46539: LD_INT 2
46541: NEG
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 2
46549: NEG
46550: PUSH
46551: LD_INT 2
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 4
46560: NEG
46561: PUSH
46562: LD_INT 4
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 4
46572: NEG
46573: PUSH
46574: LD_INT 5
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 3
46584: NEG
46585: PUSH
46586: LD_INT 4
46588: NEG
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 3
46596: NEG
46597: PUSH
46598: LD_INT 3
46600: NEG
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 4
46608: NEG
46609: PUSH
46610: LD_INT 3
46612: NEG
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 5
46620: NEG
46621: PUSH
46622: LD_INT 4
46624: NEG
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 5
46632: NEG
46633: PUSH
46634: LD_INT 5
46636: NEG
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 3
46644: NEG
46645: PUSH
46646: LD_INT 5
46648: NEG
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 5
46656: NEG
46657: PUSH
46658: LD_INT 3
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: LD_INT 3
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 0
46679: PUSH
46680: LD_INT 4
46682: NEG
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: LD_INT 3
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: LD_INT 2
46704: NEG
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: LD_INT 2
46715: NEG
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: LD_INT 3
46727: NEG
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 1
46735: NEG
46736: PUSH
46737: LD_INT 4
46739: NEG
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 2
46747: PUSH
46748: LD_INT 2
46750: NEG
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 2
46758: NEG
46759: PUSH
46760: LD_INT 4
46762: NEG
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 4
46770: PUSH
46771: LD_INT 0
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 4
46780: PUSH
46781: LD_INT 1
46783: NEG
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 5
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 5
46801: PUSH
46802: LD_INT 1
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 4
46811: PUSH
46812: LD_INT 1
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 3
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 3
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 3
46842: PUSH
46843: LD_INT 2
46845: NEG
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 5
46853: PUSH
46854: LD_INT 2
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46908: LD_ADDR_VAR 0 32
46912: PUSH
46913: LD_INT 4
46915: NEG
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 4
46926: NEG
46927: PUSH
46928: LD_INT 1
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 3
46938: NEG
46939: PUSH
46940: LD_INT 0
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 3
46949: NEG
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 4
46960: NEG
46961: PUSH
46962: LD_INT 1
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 5
46971: NEG
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 5
46982: NEG
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 5
46994: NEG
46995: PUSH
46996: LD_INT 2
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 3
47006: NEG
47007: PUSH
47008: LD_INT 2
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 3
47017: NEG
47018: PUSH
47019: LD_INT 3
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 3
47029: NEG
47030: PUSH
47031: LD_INT 4
47033: NEG
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 2
47041: NEG
47042: PUSH
47043: LD_INT 3
47045: NEG
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 2
47053: NEG
47054: PUSH
47055: LD_INT 2
47057: NEG
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 3
47065: NEG
47066: PUSH
47067: LD_INT 2
47069: NEG
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 4
47077: NEG
47078: PUSH
47079: LD_INT 3
47081: NEG
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 4
47089: NEG
47090: PUSH
47091: LD_INT 4
47093: NEG
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 2
47101: NEG
47102: PUSH
47103: LD_INT 4
47105: NEG
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 4
47113: NEG
47114: PUSH
47115: LD_INT 2
47117: NEG
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 0
47125: PUSH
47126: LD_INT 4
47128: NEG
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: LD_INT 5
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: LD_INT 4
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 1
47158: PUSH
47159: LD_INT 3
47161: NEG
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: LD_INT 3
47172: NEG
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 1
47180: NEG
47181: PUSH
47182: LD_INT 4
47184: NEG
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 1
47192: NEG
47193: PUSH
47194: LD_INT 5
47196: NEG
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 2
47204: PUSH
47205: LD_INT 3
47207: NEG
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 2
47215: NEG
47216: PUSH
47217: LD_INT 5
47219: NEG
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 3
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 3
47237: PUSH
47238: LD_INT 1
47240: NEG
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 4
47248: PUSH
47249: LD_INT 0
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 4
47258: PUSH
47259: LD_INT 1
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 3
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 2
47278: PUSH
47279: LD_INT 0
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 2
47288: PUSH
47289: LD_INT 1
47291: NEG
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 2
47299: PUSH
47300: LD_INT 2
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 4
47310: PUSH
47311: LD_INT 2
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 4
47320: PUSH
47321: LD_INT 4
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 4
47330: PUSH
47331: LD_INT 3
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 5
47340: PUSH
47341: LD_INT 4
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 5
47350: PUSH
47351: LD_INT 5
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 4
47360: PUSH
47361: LD_INT 5
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 3
47370: PUSH
47371: LD_INT 4
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 3
47380: PUSH
47381: LD_INT 3
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 5
47390: PUSH
47391: LD_INT 3
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 3
47400: PUSH
47401: LD_INT 5
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47455: LD_ADDR_VAR 0 33
47459: PUSH
47460: LD_INT 4
47462: NEG
47463: PUSH
47464: LD_INT 4
47466: NEG
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 4
47474: NEG
47475: PUSH
47476: LD_INT 5
47478: NEG
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 3
47486: NEG
47487: PUSH
47488: LD_INT 4
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 3
47498: NEG
47499: PUSH
47500: LD_INT 3
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 4
47510: NEG
47511: PUSH
47512: LD_INT 3
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 5
47522: NEG
47523: PUSH
47524: LD_INT 4
47526: NEG
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 5
47534: NEG
47535: PUSH
47536: LD_INT 5
47538: NEG
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 3
47546: NEG
47547: PUSH
47548: LD_INT 5
47550: NEG
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 5
47558: NEG
47559: PUSH
47560: LD_INT 3
47562: NEG
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: LD_INT 3
47573: NEG
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 0
47581: PUSH
47582: LD_INT 4
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 1
47592: PUSH
47593: LD_INT 3
47595: NEG
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 1
47603: PUSH
47604: LD_INT 2
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 0
47614: PUSH
47615: LD_INT 2
47617: NEG
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 1
47625: NEG
47626: PUSH
47627: LD_INT 3
47629: NEG
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: LD_INT 4
47641: NEG
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 2
47649: PUSH
47650: LD_INT 2
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 2
47660: NEG
47661: PUSH
47662: LD_INT 4
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 4
47672: PUSH
47673: LD_INT 0
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 4
47682: PUSH
47683: LD_INT 1
47685: NEG
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 5
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 5
47703: PUSH
47704: LD_INT 1
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 4
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 3
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 3
47733: PUSH
47734: LD_INT 1
47736: NEG
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 3
47744: PUSH
47745: LD_INT 2
47747: NEG
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 5
47755: PUSH
47756: LD_INT 2
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 3
47765: PUSH
47766: LD_INT 3
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 3
47775: PUSH
47776: LD_INT 2
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 4
47785: PUSH
47786: LD_INT 3
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 4
47795: PUSH
47796: LD_INT 4
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 3
47805: PUSH
47806: LD_INT 4
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 2
47815: PUSH
47816: LD_INT 3
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 2
47825: PUSH
47826: LD_INT 2
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 4
47835: PUSH
47836: LD_INT 2
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 2
47845: PUSH
47846: LD_INT 4
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: LD_INT 4
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 0
47865: PUSH
47866: LD_INT 3
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 1
47875: PUSH
47876: LD_INT 4
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: LD_INT 5
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: LD_INT 5
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 1
47905: NEG
47906: PUSH
47907: LD_INT 4
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 1
47916: NEG
47917: PUSH
47918: LD_INT 3
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 2
47927: PUSH
47928: LD_INT 5
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 2
47937: NEG
47938: PUSH
47939: LD_INT 3
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47993: LD_ADDR_VAR 0 34
47997: PUSH
47998: LD_INT 0
48000: PUSH
48001: LD_INT 4
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 0
48011: PUSH
48012: LD_INT 5
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 1
48022: PUSH
48023: LD_INT 4
48025: NEG
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 1
48033: PUSH
48034: LD_INT 3
48036: NEG
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 0
48044: PUSH
48045: LD_INT 3
48047: NEG
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: LD_INT 4
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: LD_INT 5
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 2
48079: PUSH
48080: LD_INT 3
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 2
48090: NEG
48091: PUSH
48092: LD_INT 5
48094: NEG
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 3
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 3
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 4
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 4
48133: PUSH
48134: LD_INT 1
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 3
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 2
48153: PUSH
48154: LD_INT 0
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 2
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 2
48174: PUSH
48175: LD_INT 2
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 4
48185: PUSH
48186: LD_INT 2
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 4
48195: PUSH
48196: LD_INT 4
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 4
48205: PUSH
48206: LD_INT 3
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 5
48215: PUSH
48216: LD_INT 4
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 5
48225: PUSH
48226: LD_INT 5
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 4
48235: PUSH
48236: LD_INT 5
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 3
48245: PUSH
48246: LD_INT 4
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 3
48255: PUSH
48256: LD_INT 3
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 5
48265: PUSH
48266: LD_INT 3
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 3
48275: PUSH
48276: LD_INT 5
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 0
48285: PUSH
48286: LD_INT 3
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 0
48295: PUSH
48296: LD_INT 2
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 1
48305: PUSH
48306: LD_INT 3
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 1
48315: PUSH
48316: LD_INT 4
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 0
48325: PUSH
48326: LD_INT 4
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 1
48335: NEG
48336: PUSH
48337: LD_INT 3
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 1
48346: NEG
48347: PUSH
48348: LD_INT 2
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 2
48357: PUSH
48358: LD_INT 4
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 2
48367: NEG
48368: PUSH
48369: LD_INT 2
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 4
48378: NEG
48379: PUSH
48380: LD_INT 0
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 4
48389: NEG
48390: PUSH
48391: LD_INT 1
48393: NEG
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 3
48401: NEG
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 3
48412: NEG
48413: PUSH
48414: LD_INT 1
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 4
48423: NEG
48424: PUSH
48425: LD_INT 1
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 5
48434: NEG
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 5
48445: NEG
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 5
48457: NEG
48458: PUSH
48459: LD_INT 2
48461: NEG
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 3
48469: NEG
48470: PUSH
48471: LD_INT 2
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: ST_TO_ADDR
// end ; end ;
48525: GO 48528
48527: POP
// case btype of b_depot , b_warehouse :
48528: LD_VAR 0 1
48532: PUSH
48533: LD_INT 0
48535: DOUBLE
48536: EQUAL
48537: IFTRUE 48547
48539: LD_INT 1
48541: DOUBLE
48542: EQUAL
48543: IFTRUE 48547
48545: GO 48748
48547: POP
// case nation of nation_american :
48548: LD_VAR 0 5
48552: PUSH
48553: LD_INT 1
48555: DOUBLE
48556: EQUAL
48557: IFTRUE 48561
48559: GO 48617
48561: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48562: LD_ADDR_VAR 0 9
48566: PUSH
48567: LD_VAR 0 11
48571: PUSH
48572: LD_VAR 0 12
48576: PUSH
48577: LD_VAR 0 13
48581: PUSH
48582: LD_VAR 0 14
48586: PUSH
48587: LD_VAR 0 15
48591: PUSH
48592: LD_VAR 0 16
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: PUSH
48605: LD_VAR 0 4
48609: PUSH
48610: LD_INT 1
48612: PLUS
48613: ARRAY
48614: ST_TO_ADDR
48615: GO 48746
48617: LD_INT 2
48619: DOUBLE
48620: EQUAL
48621: IFTRUE 48625
48623: GO 48681
48625: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48626: LD_ADDR_VAR 0 9
48630: PUSH
48631: LD_VAR 0 17
48635: PUSH
48636: LD_VAR 0 18
48640: PUSH
48641: LD_VAR 0 19
48645: PUSH
48646: LD_VAR 0 20
48650: PUSH
48651: LD_VAR 0 21
48655: PUSH
48656: LD_VAR 0 22
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: PUSH
48669: LD_VAR 0 4
48673: PUSH
48674: LD_INT 1
48676: PLUS
48677: ARRAY
48678: ST_TO_ADDR
48679: GO 48746
48681: LD_INT 3
48683: DOUBLE
48684: EQUAL
48685: IFTRUE 48689
48687: GO 48745
48689: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48690: LD_ADDR_VAR 0 9
48694: PUSH
48695: LD_VAR 0 23
48699: PUSH
48700: LD_VAR 0 24
48704: PUSH
48705: LD_VAR 0 25
48709: PUSH
48710: LD_VAR 0 26
48714: PUSH
48715: LD_VAR 0 27
48719: PUSH
48720: LD_VAR 0 28
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: PUSH
48733: LD_VAR 0 4
48737: PUSH
48738: LD_INT 1
48740: PLUS
48741: ARRAY
48742: ST_TO_ADDR
48743: GO 48746
48745: POP
48746: GO 49301
48748: LD_INT 2
48750: DOUBLE
48751: EQUAL
48752: IFTRUE 48762
48754: LD_INT 3
48756: DOUBLE
48757: EQUAL
48758: IFTRUE 48762
48760: GO 48818
48762: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48763: LD_ADDR_VAR 0 9
48767: PUSH
48768: LD_VAR 0 29
48772: PUSH
48773: LD_VAR 0 30
48777: PUSH
48778: LD_VAR 0 31
48782: PUSH
48783: LD_VAR 0 32
48787: PUSH
48788: LD_VAR 0 33
48792: PUSH
48793: LD_VAR 0 34
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: PUSH
48806: LD_VAR 0 4
48810: PUSH
48811: LD_INT 1
48813: PLUS
48814: ARRAY
48815: ST_TO_ADDR
48816: GO 49301
48818: LD_INT 16
48820: DOUBLE
48821: EQUAL
48822: IFTRUE 48880
48824: LD_INT 17
48826: DOUBLE
48827: EQUAL
48828: IFTRUE 48880
48830: LD_INT 18
48832: DOUBLE
48833: EQUAL
48834: IFTRUE 48880
48836: LD_INT 19
48838: DOUBLE
48839: EQUAL
48840: IFTRUE 48880
48842: LD_INT 22
48844: DOUBLE
48845: EQUAL
48846: IFTRUE 48880
48848: LD_INT 20
48850: DOUBLE
48851: EQUAL
48852: IFTRUE 48880
48854: LD_INT 21
48856: DOUBLE
48857: EQUAL
48858: IFTRUE 48880
48860: LD_INT 23
48862: DOUBLE
48863: EQUAL
48864: IFTRUE 48880
48866: LD_INT 24
48868: DOUBLE
48869: EQUAL
48870: IFTRUE 48880
48872: LD_INT 25
48874: DOUBLE
48875: EQUAL
48876: IFTRUE 48880
48878: GO 48936
48880: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48881: LD_ADDR_VAR 0 9
48885: PUSH
48886: LD_VAR 0 35
48890: PUSH
48891: LD_VAR 0 36
48895: PUSH
48896: LD_VAR 0 37
48900: PUSH
48901: LD_VAR 0 38
48905: PUSH
48906: LD_VAR 0 39
48910: PUSH
48911: LD_VAR 0 40
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: PUSH
48924: LD_VAR 0 4
48928: PUSH
48929: LD_INT 1
48931: PLUS
48932: ARRAY
48933: ST_TO_ADDR
48934: GO 49301
48936: LD_INT 6
48938: DOUBLE
48939: EQUAL
48940: IFTRUE 48992
48942: LD_INT 7
48944: DOUBLE
48945: EQUAL
48946: IFTRUE 48992
48948: LD_INT 8
48950: DOUBLE
48951: EQUAL
48952: IFTRUE 48992
48954: LD_INT 13
48956: DOUBLE
48957: EQUAL
48958: IFTRUE 48992
48960: LD_INT 12
48962: DOUBLE
48963: EQUAL
48964: IFTRUE 48992
48966: LD_INT 15
48968: DOUBLE
48969: EQUAL
48970: IFTRUE 48992
48972: LD_INT 11
48974: DOUBLE
48975: EQUAL
48976: IFTRUE 48992
48978: LD_INT 14
48980: DOUBLE
48981: EQUAL
48982: IFTRUE 48992
48984: LD_INT 10
48986: DOUBLE
48987: EQUAL
48988: IFTRUE 48992
48990: GO 49048
48992: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48993: LD_ADDR_VAR 0 9
48997: PUSH
48998: LD_VAR 0 41
49002: PUSH
49003: LD_VAR 0 42
49007: PUSH
49008: LD_VAR 0 43
49012: PUSH
49013: LD_VAR 0 44
49017: PUSH
49018: LD_VAR 0 45
49022: PUSH
49023: LD_VAR 0 46
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: PUSH
49036: LD_VAR 0 4
49040: PUSH
49041: LD_INT 1
49043: PLUS
49044: ARRAY
49045: ST_TO_ADDR
49046: GO 49301
49048: LD_INT 36
49050: DOUBLE
49051: EQUAL
49052: IFTRUE 49056
49054: GO 49112
49056: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49057: LD_ADDR_VAR 0 9
49061: PUSH
49062: LD_VAR 0 47
49066: PUSH
49067: LD_VAR 0 48
49071: PUSH
49072: LD_VAR 0 49
49076: PUSH
49077: LD_VAR 0 50
49081: PUSH
49082: LD_VAR 0 51
49086: PUSH
49087: LD_VAR 0 52
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: PUSH
49100: LD_VAR 0 4
49104: PUSH
49105: LD_INT 1
49107: PLUS
49108: ARRAY
49109: ST_TO_ADDR
49110: GO 49301
49112: LD_INT 4
49114: DOUBLE
49115: EQUAL
49116: IFTRUE 49138
49118: LD_INT 5
49120: DOUBLE
49121: EQUAL
49122: IFTRUE 49138
49124: LD_INT 34
49126: DOUBLE
49127: EQUAL
49128: IFTRUE 49138
49130: LD_INT 37
49132: DOUBLE
49133: EQUAL
49134: IFTRUE 49138
49136: GO 49194
49138: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49139: LD_ADDR_VAR 0 9
49143: PUSH
49144: LD_VAR 0 53
49148: PUSH
49149: LD_VAR 0 54
49153: PUSH
49154: LD_VAR 0 55
49158: PUSH
49159: LD_VAR 0 56
49163: PUSH
49164: LD_VAR 0 57
49168: PUSH
49169: LD_VAR 0 58
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: PUSH
49182: LD_VAR 0 4
49186: PUSH
49187: LD_INT 1
49189: PLUS
49190: ARRAY
49191: ST_TO_ADDR
49192: GO 49301
49194: LD_INT 31
49196: DOUBLE
49197: EQUAL
49198: IFTRUE 49244
49200: LD_INT 32
49202: DOUBLE
49203: EQUAL
49204: IFTRUE 49244
49206: LD_INT 33
49208: DOUBLE
49209: EQUAL
49210: IFTRUE 49244
49212: LD_INT 27
49214: DOUBLE
49215: EQUAL
49216: IFTRUE 49244
49218: LD_INT 26
49220: DOUBLE
49221: EQUAL
49222: IFTRUE 49244
49224: LD_INT 28
49226: DOUBLE
49227: EQUAL
49228: IFTRUE 49244
49230: LD_INT 29
49232: DOUBLE
49233: EQUAL
49234: IFTRUE 49244
49236: LD_INT 30
49238: DOUBLE
49239: EQUAL
49240: IFTRUE 49244
49242: GO 49300
49244: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49245: LD_ADDR_VAR 0 9
49249: PUSH
49250: LD_VAR 0 59
49254: PUSH
49255: LD_VAR 0 60
49259: PUSH
49260: LD_VAR 0 61
49264: PUSH
49265: LD_VAR 0 62
49269: PUSH
49270: LD_VAR 0 63
49274: PUSH
49275: LD_VAR 0 64
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: PUSH
49288: LD_VAR 0 4
49292: PUSH
49293: LD_INT 1
49295: PLUS
49296: ARRAY
49297: ST_TO_ADDR
49298: GO 49301
49300: POP
// temp_list2 = [ ] ;
49301: LD_ADDR_VAR 0 10
49305: PUSH
49306: EMPTY
49307: ST_TO_ADDR
// for i in temp_list do
49308: LD_ADDR_VAR 0 8
49312: PUSH
49313: LD_VAR 0 9
49317: PUSH
49318: FOR_IN
49319: IFFALSE 49371
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49321: LD_ADDR_VAR 0 10
49325: PUSH
49326: LD_VAR 0 10
49330: PUSH
49331: LD_VAR 0 8
49335: PUSH
49336: LD_INT 1
49338: ARRAY
49339: PUSH
49340: LD_VAR 0 2
49344: PLUS
49345: PUSH
49346: LD_VAR 0 8
49350: PUSH
49351: LD_INT 2
49353: ARRAY
49354: PUSH
49355: LD_VAR 0 3
49359: PLUS
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: EMPTY
49366: LIST
49367: ADD
49368: ST_TO_ADDR
49369: GO 49318
49371: POP
49372: POP
// result = temp_list2 ;
49373: LD_ADDR_VAR 0 7
49377: PUSH
49378: LD_VAR 0 10
49382: ST_TO_ADDR
// end ;
49383: LD_VAR 0 7
49387: RET
// export function EnemyInRange ( unit , dist ) ; begin
49388: LD_INT 0
49390: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49391: LD_ADDR_VAR 0 3
49395: PUSH
49396: LD_VAR 0 1
49400: PPUSH
49401: CALL_OW 255
49405: PPUSH
49406: LD_VAR 0 1
49410: PPUSH
49411: CALL_OW 250
49415: PPUSH
49416: LD_VAR 0 1
49420: PPUSH
49421: CALL_OW 251
49425: PPUSH
49426: LD_VAR 0 2
49430: PPUSH
49431: CALL 22761 0 4
49435: PUSH
49436: LD_INT 4
49438: ARRAY
49439: ST_TO_ADDR
// end ;
49440: LD_VAR 0 3
49444: RET
// export function PlayerSeeMe ( unit ) ; begin
49445: LD_INT 0
49447: PPUSH
// result := See ( your_side , unit ) ;
49448: LD_ADDR_VAR 0 2
49452: PUSH
49453: LD_OWVAR 2
49457: PPUSH
49458: LD_VAR 0 1
49462: PPUSH
49463: CALL_OW 292
49467: ST_TO_ADDR
// end ;
49468: LD_VAR 0 2
49472: RET
// export function ReverseDir ( unit ) ; begin
49473: LD_INT 0
49475: PPUSH
// if not unit then
49476: LD_VAR 0 1
49480: NOT
49481: IFFALSE 49485
// exit ;
49483: GO 49508
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49485: LD_ADDR_VAR 0 2
49489: PUSH
49490: LD_VAR 0 1
49494: PPUSH
49495: CALL_OW 254
49499: PUSH
49500: LD_INT 3
49502: PLUS
49503: PUSH
49504: LD_INT 6
49506: MOD
49507: ST_TO_ADDR
// end ;
49508: LD_VAR 0 2
49512: RET
// export function ReverseArray ( array ) ; var i ; begin
49513: LD_INT 0
49515: PPUSH
49516: PPUSH
// if not array then
49517: LD_VAR 0 1
49521: NOT
49522: IFFALSE 49526
// exit ;
49524: GO 49581
// result := [ ] ;
49526: LD_ADDR_VAR 0 2
49530: PUSH
49531: EMPTY
49532: ST_TO_ADDR
// for i := array downto 1 do
49533: LD_ADDR_VAR 0 3
49537: PUSH
49538: DOUBLE
49539: LD_VAR 0 1
49543: INC
49544: ST_TO_ADDR
49545: LD_INT 1
49547: PUSH
49548: FOR_DOWNTO
49549: IFFALSE 49579
// result := Join ( result , array [ i ] ) ;
49551: LD_ADDR_VAR 0 2
49555: PUSH
49556: LD_VAR 0 2
49560: PPUSH
49561: LD_VAR 0 1
49565: PUSH
49566: LD_VAR 0 3
49570: ARRAY
49571: PPUSH
49572: CALL 54226 0 2
49576: ST_TO_ADDR
49577: GO 49548
49579: POP
49580: POP
// end ;
49581: LD_VAR 0 2
49585: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49586: LD_INT 0
49588: PPUSH
49589: PPUSH
49590: PPUSH
49591: PPUSH
49592: PPUSH
49593: PPUSH
// if not unit or not hexes then
49594: LD_VAR 0 1
49598: NOT
49599: PUSH
49600: LD_VAR 0 2
49604: NOT
49605: OR
49606: IFFALSE 49610
// exit ;
49608: GO 49733
// dist := 9999 ;
49610: LD_ADDR_VAR 0 5
49614: PUSH
49615: LD_INT 9999
49617: ST_TO_ADDR
// for i = 1 to hexes do
49618: LD_ADDR_VAR 0 4
49622: PUSH
49623: DOUBLE
49624: LD_INT 1
49626: DEC
49627: ST_TO_ADDR
49628: LD_VAR 0 2
49632: PUSH
49633: FOR_TO
49634: IFFALSE 49721
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49636: LD_ADDR_VAR 0 6
49640: PUSH
49641: LD_VAR 0 1
49645: PPUSH
49646: LD_VAR 0 2
49650: PUSH
49651: LD_VAR 0 4
49655: ARRAY
49656: PUSH
49657: LD_INT 1
49659: ARRAY
49660: PPUSH
49661: LD_VAR 0 2
49665: PUSH
49666: LD_VAR 0 4
49670: ARRAY
49671: PUSH
49672: LD_INT 2
49674: ARRAY
49675: PPUSH
49676: CALL_OW 297
49680: ST_TO_ADDR
// if tdist < dist then
49681: LD_VAR 0 6
49685: PUSH
49686: LD_VAR 0 5
49690: LESS
49691: IFFALSE 49719
// begin hex := hexes [ i ] ;
49693: LD_ADDR_VAR 0 8
49697: PUSH
49698: LD_VAR 0 2
49702: PUSH
49703: LD_VAR 0 4
49707: ARRAY
49708: ST_TO_ADDR
// dist := tdist ;
49709: LD_ADDR_VAR 0 5
49713: PUSH
49714: LD_VAR 0 6
49718: ST_TO_ADDR
// end ; end ;
49719: GO 49633
49721: POP
49722: POP
// result := hex ;
49723: LD_ADDR_VAR 0 3
49727: PUSH
49728: LD_VAR 0 8
49732: ST_TO_ADDR
// end ;
49733: LD_VAR 0 3
49737: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49738: LD_INT 0
49740: PPUSH
49741: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49742: LD_VAR 0 1
49746: NOT
49747: PUSH
49748: LD_VAR 0 1
49752: PUSH
49753: LD_INT 21
49755: PUSH
49756: LD_INT 2
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 23
49765: PUSH
49766: LD_INT 2
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PPUSH
49777: CALL_OW 69
49781: IN
49782: NOT
49783: OR
49784: IFFALSE 49788
// exit ;
49786: GO 49835
// for i = 1 to 3 do
49788: LD_ADDR_VAR 0 3
49792: PUSH
49793: DOUBLE
49794: LD_INT 1
49796: DEC
49797: ST_TO_ADDR
49798: LD_INT 3
49800: PUSH
49801: FOR_TO
49802: IFFALSE 49833
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49804: LD_VAR 0 1
49808: PPUSH
49809: CALL_OW 250
49813: PPUSH
49814: LD_VAR 0 1
49818: PPUSH
49819: CALL_OW 251
49823: PPUSH
49824: LD_INT 1
49826: PPUSH
49827: CALL_OW 453
49831: GO 49801
49833: POP
49834: POP
// end ;
49835: LD_VAR 0 2
49839: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49840: LD_INT 0
49842: PPUSH
49843: PPUSH
49844: PPUSH
49845: PPUSH
49846: PPUSH
49847: PPUSH
// if not unit or not enemy_unit then
49848: LD_VAR 0 1
49852: NOT
49853: PUSH
49854: LD_VAR 0 2
49858: NOT
49859: OR
49860: IFFALSE 49864
// exit ;
49862: GO 50331
// if GetLives ( i ) < 250 then
49864: LD_VAR 0 4
49868: PPUSH
49869: CALL_OW 256
49873: PUSH
49874: LD_INT 250
49876: LESS
49877: IFFALSE 49890
// begin ComAutodestruct ( i ) ;
49879: LD_VAR 0 4
49883: PPUSH
49884: CALL 49738 0 1
// exit ;
49888: GO 50331
// end ; x := GetX ( enemy_unit ) ;
49890: LD_ADDR_VAR 0 7
49894: PUSH
49895: LD_VAR 0 2
49899: PPUSH
49900: CALL_OW 250
49904: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49905: LD_ADDR_VAR 0 8
49909: PUSH
49910: LD_VAR 0 2
49914: PPUSH
49915: CALL_OW 251
49919: ST_TO_ADDR
// if not x or not y then
49920: LD_VAR 0 7
49924: NOT
49925: PUSH
49926: LD_VAR 0 8
49930: NOT
49931: OR
49932: IFFALSE 49936
// exit ;
49934: GO 50331
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49936: LD_ADDR_VAR 0 6
49940: PUSH
49941: LD_VAR 0 7
49945: PPUSH
49946: LD_INT 0
49948: PPUSH
49949: LD_INT 4
49951: PPUSH
49952: CALL_OW 272
49956: PUSH
49957: LD_VAR 0 8
49961: PPUSH
49962: LD_INT 0
49964: PPUSH
49965: LD_INT 4
49967: PPUSH
49968: CALL_OW 273
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_VAR 0 7
49981: PPUSH
49982: LD_INT 1
49984: PPUSH
49985: LD_INT 4
49987: PPUSH
49988: CALL_OW 272
49992: PUSH
49993: LD_VAR 0 8
49997: PPUSH
49998: LD_INT 1
50000: PPUSH
50001: LD_INT 4
50003: PPUSH
50004: CALL_OW 273
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_VAR 0 7
50017: PPUSH
50018: LD_INT 2
50020: PPUSH
50021: LD_INT 4
50023: PPUSH
50024: CALL_OW 272
50028: PUSH
50029: LD_VAR 0 8
50033: PPUSH
50034: LD_INT 2
50036: PPUSH
50037: LD_INT 4
50039: PPUSH
50040: CALL_OW 273
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_VAR 0 7
50053: PPUSH
50054: LD_INT 3
50056: PPUSH
50057: LD_INT 4
50059: PPUSH
50060: CALL_OW 272
50064: PUSH
50065: LD_VAR 0 8
50069: PPUSH
50070: LD_INT 3
50072: PPUSH
50073: LD_INT 4
50075: PPUSH
50076: CALL_OW 273
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_VAR 0 7
50089: PPUSH
50090: LD_INT 4
50092: PPUSH
50093: LD_INT 4
50095: PPUSH
50096: CALL_OW 272
50100: PUSH
50101: LD_VAR 0 8
50105: PPUSH
50106: LD_INT 4
50108: PPUSH
50109: LD_INT 4
50111: PPUSH
50112: CALL_OW 273
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_VAR 0 7
50125: PPUSH
50126: LD_INT 5
50128: PPUSH
50129: LD_INT 4
50131: PPUSH
50132: CALL_OW 272
50136: PUSH
50137: LD_VAR 0 8
50141: PPUSH
50142: LD_INT 5
50144: PPUSH
50145: LD_INT 4
50147: PPUSH
50148: CALL_OW 273
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: ST_TO_ADDR
// for i = tmp downto 1 do
50165: LD_ADDR_VAR 0 4
50169: PUSH
50170: DOUBLE
50171: LD_VAR 0 6
50175: INC
50176: ST_TO_ADDR
50177: LD_INT 1
50179: PUSH
50180: FOR_DOWNTO
50181: IFFALSE 50282
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50183: LD_VAR 0 6
50187: PUSH
50188: LD_VAR 0 4
50192: ARRAY
50193: PUSH
50194: LD_INT 1
50196: ARRAY
50197: PPUSH
50198: LD_VAR 0 6
50202: PUSH
50203: LD_VAR 0 4
50207: ARRAY
50208: PUSH
50209: LD_INT 2
50211: ARRAY
50212: PPUSH
50213: CALL_OW 488
50217: NOT
50218: PUSH
50219: LD_VAR 0 6
50223: PUSH
50224: LD_VAR 0 4
50228: ARRAY
50229: PUSH
50230: LD_INT 1
50232: ARRAY
50233: PPUSH
50234: LD_VAR 0 6
50238: PUSH
50239: LD_VAR 0 4
50243: ARRAY
50244: PUSH
50245: LD_INT 2
50247: ARRAY
50248: PPUSH
50249: CALL_OW 428
50253: PUSH
50254: LD_INT 0
50256: NONEQUAL
50257: OR
50258: IFFALSE 50280
// tmp := Delete ( tmp , i ) ;
50260: LD_ADDR_VAR 0 6
50264: PUSH
50265: LD_VAR 0 6
50269: PPUSH
50270: LD_VAR 0 4
50274: PPUSH
50275: CALL_OW 3
50279: ST_TO_ADDR
50280: GO 50180
50282: POP
50283: POP
// j := GetClosestHex ( unit , tmp ) ;
50284: LD_ADDR_VAR 0 5
50288: PUSH
50289: LD_VAR 0 1
50293: PPUSH
50294: LD_VAR 0 6
50298: PPUSH
50299: CALL 49586 0 2
50303: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50304: LD_VAR 0 1
50308: PPUSH
50309: LD_VAR 0 5
50313: PUSH
50314: LD_INT 1
50316: ARRAY
50317: PPUSH
50318: LD_VAR 0 5
50322: PUSH
50323: LD_INT 2
50325: ARRAY
50326: PPUSH
50327: CALL_OW 111
// end ;
50331: LD_VAR 0 3
50335: RET
// export function PrepareApemanSoldier ( ) ; begin
50336: LD_INT 0
50338: PPUSH
// uc_nation := 0 ;
50339: LD_ADDR_OWVAR 21
50343: PUSH
50344: LD_INT 0
50346: ST_TO_ADDR
// hc_sex := sex_male ;
50347: LD_ADDR_OWVAR 27
50351: PUSH
50352: LD_INT 1
50354: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50355: LD_ADDR_OWVAR 28
50359: PUSH
50360: LD_INT 15
50362: ST_TO_ADDR
// hc_gallery :=  ;
50363: LD_ADDR_OWVAR 33
50367: PUSH
50368: LD_STRING 
50370: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50371: LD_ADDR_OWVAR 31
50375: PUSH
50376: LD_INT 0
50378: PPUSH
50379: LD_INT 3
50381: PPUSH
50382: CALL_OW 12
50386: PUSH
50387: LD_INT 0
50389: PPUSH
50390: LD_INT 3
50392: PPUSH
50393: CALL_OW 12
50397: PUSH
50398: LD_INT 0
50400: PUSH
50401: LD_INT 0
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: ST_TO_ADDR
// end ;
50410: LD_VAR 0 1
50414: RET
// export function PrepareApemanEngineer ( ) ; begin
50415: LD_INT 0
50417: PPUSH
// uc_nation := 0 ;
50418: LD_ADDR_OWVAR 21
50422: PUSH
50423: LD_INT 0
50425: ST_TO_ADDR
// hc_sex := sex_male ;
50426: LD_ADDR_OWVAR 27
50430: PUSH
50431: LD_INT 1
50433: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50434: LD_ADDR_OWVAR 28
50438: PUSH
50439: LD_INT 16
50441: ST_TO_ADDR
// hc_gallery :=  ;
50442: LD_ADDR_OWVAR 33
50446: PUSH
50447: LD_STRING 
50449: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50450: LD_ADDR_OWVAR 31
50454: PUSH
50455: LD_INT 0
50457: PPUSH
50458: LD_INT 3
50460: PPUSH
50461: CALL_OW 12
50465: PUSH
50466: LD_INT 0
50468: PPUSH
50469: LD_INT 3
50471: PPUSH
50472: CALL_OW 12
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: ST_TO_ADDR
// end ;
50489: LD_VAR 0 1
50493: RET
// export function PrepareApeman ( agressivity ) ; begin
50494: LD_INT 0
50496: PPUSH
// uc_side := 0 ;
50497: LD_ADDR_OWVAR 20
50501: PUSH
50502: LD_INT 0
50504: ST_TO_ADDR
// uc_nation := 0 ;
50505: LD_ADDR_OWVAR 21
50509: PUSH
50510: LD_INT 0
50512: ST_TO_ADDR
// hc_sex := sex_male ;
50513: LD_ADDR_OWVAR 27
50517: PUSH
50518: LD_INT 1
50520: ST_TO_ADDR
// hc_class := class_apeman ;
50521: LD_ADDR_OWVAR 28
50525: PUSH
50526: LD_INT 12
50528: ST_TO_ADDR
// hc_gallery :=  ;
50529: LD_ADDR_OWVAR 33
50533: PUSH
50534: LD_STRING 
50536: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50537: LD_ADDR_OWVAR 35
50541: PUSH
50542: LD_VAR 0 1
50546: NEG
50547: PPUSH
50548: LD_VAR 0 1
50552: PPUSH
50553: CALL_OW 12
50557: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50558: LD_ADDR_OWVAR 31
50562: PUSH
50563: LD_INT 0
50565: PPUSH
50566: LD_INT 3
50568: PPUSH
50569: CALL_OW 12
50573: PUSH
50574: LD_INT 0
50576: PPUSH
50577: LD_INT 3
50579: PPUSH
50580: CALL_OW 12
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: ST_TO_ADDR
// end ;
50597: LD_VAR 0 2
50601: RET
// export function PrepareTiger ( agressivity ) ; begin
50602: LD_INT 0
50604: PPUSH
// uc_side := 0 ;
50605: LD_ADDR_OWVAR 20
50609: PUSH
50610: LD_INT 0
50612: ST_TO_ADDR
// uc_nation := 0 ;
50613: LD_ADDR_OWVAR 21
50617: PUSH
50618: LD_INT 0
50620: ST_TO_ADDR
// hc_class := class_tiger ;
50621: LD_ADDR_OWVAR 28
50625: PUSH
50626: LD_INT 14
50628: ST_TO_ADDR
// hc_gallery :=  ;
50629: LD_ADDR_OWVAR 33
50633: PUSH
50634: LD_STRING 
50636: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50637: LD_ADDR_OWVAR 35
50641: PUSH
50642: LD_VAR 0 1
50646: NEG
50647: PPUSH
50648: LD_VAR 0 1
50652: PPUSH
50653: CALL_OW 12
50657: ST_TO_ADDR
// end ;
50658: LD_VAR 0 2
50662: RET
// export function PrepareEnchidna ( ) ; begin
50663: LD_INT 0
50665: PPUSH
// uc_side := 0 ;
50666: LD_ADDR_OWVAR 20
50670: PUSH
50671: LD_INT 0
50673: ST_TO_ADDR
// uc_nation := 0 ;
50674: LD_ADDR_OWVAR 21
50678: PUSH
50679: LD_INT 0
50681: ST_TO_ADDR
// hc_class := class_baggie ;
50682: LD_ADDR_OWVAR 28
50686: PUSH
50687: LD_INT 13
50689: ST_TO_ADDR
// hc_gallery :=  ;
50690: LD_ADDR_OWVAR 33
50694: PUSH
50695: LD_STRING 
50697: ST_TO_ADDR
// end ;
50698: LD_VAR 0 1
50702: RET
// export function PrepareFrog ( ) ; begin
50703: LD_INT 0
50705: PPUSH
// uc_side := 0 ;
50706: LD_ADDR_OWVAR 20
50710: PUSH
50711: LD_INT 0
50713: ST_TO_ADDR
// uc_nation := 0 ;
50714: LD_ADDR_OWVAR 21
50718: PUSH
50719: LD_INT 0
50721: ST_TO_ADDR
// hc_class := class_frog ;
50722: LD_ADDR_OWVAR 28
50726: PUSH
50727: LD_INT 19
50729: ST_TO_ADDR
// hc_gallery :=  ;
50730: LD_ADDR_OWVAR 33
50734: PUSH
50735: LD_STRING 
50737: ST_TO_ADDR
// end ;
50738: LD_VAR 0 1
50742: RET
// export function PrepareFish ( ) ; begin
50743: LD_INT 0
50745: PPUSH
// uc_side := 0 ;
50746: LD_ADDR_OWVAR 20
50750: PUSH
50751: LD_INT 0
50753: ST_TO_ADDR
// uc_nation := 0 ;
50754: LD_ADDR_OWVAR 21
50758: PUSH
50759: LD_INT 0
50761: ST_TO_ADDR
// hc_class := class_fish ;
50762: LD_ADDR_OWVAR 28
50766: PUSH
50767: LD_INT 20
50769: ST_TO_ADDR
// hc_gallery :=  ;
50770: LD_ADDR_OWVAR 33
50774: PUSH
50775: LD_STRING 
50777: ST_TO_ADDR
// end ;
50778: LD_VAR 0 1
50782: RET
// export function PrepareBird ( ) ; begin
50783: LD_INT 0
50785: PPUSH
// uc_side := 0 ;
50786: LD_ADDR_OWVAR 20
50790: PUSH
50791: LD_INT 0
50793: ST_TO_ADDR
// uc_nation := 0 ;
50794: LD_ADDR_OWVAR 21
50798: PUSH
50799: LD_INT 0
50801: ST_TO_ADDR
// hc_class := class_phororhacos ;
50802: LD_ADDR_OWVAR 28
50806: PUSH
50807: LD_INT 18
50809: ST_TO_ADDR
// hc_gallery :=  ;
50810: LD_ADDR_OWVAR 33
50814: PUSH
50815: LD_STRING 
50817: ST_TO_ADDR
// end ;
50818: LD_VAR 0 1
50822: RET
// export function PrepareHorse ( ) ; begin
50823: LD_INT 0
50825: PPUSH
// uc_side := 0 ;
50826: LD_ADDR_OWVAR 20
50830: PUSH
50831: LD_INT 0
50833: ST_TO_ADDR
// uc_nation := 0 ;
50834: LD_ADDR_OWVAR 21
50838: PUSH
50839: LD_INT 0
50841: ST_TO_ADDR
// hc_class := class_horse ;
50842: LD_ADDR_OWVAR 28
50846: PUSH
50847: LD_INT 21
50849: ST_TO_ADDR
// hc_gallery :=  ;
50850: LD_ADDR_OWVAR 33
50854: PUSH
50855: LD_STRING 
50857: ST_TO_ADDR
// end ;
50858: LD_VAR 0 1
50862: RET
// export function PrepareMastodont ( ) ; begin
50863: LD_INT 0
50865: PPUSH
// uc_side := 0 ;
50866: LD_ADDR_OWVAR 20
50870: PUSH
50871: LD_INT 0
50873: ST_TO_ADDR
// uc_nation := 0 ;
50874: LD_ADDR_OWVAR 21
50878: PUSH
50879: LD_INT 0
50881: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50882: LD_ADDR_OWVAR 37
50886: PUSH
50887: LD_INT 31
50889: ST_TO_ADDR
// vc_control := control_rider ;
50890: LD_ADDR_OWVAR 38
50894: PUSH
50895: LD_INT 4
50897: ST_TO_ADDR
// end ;
50898: LD_VAR 0 1
50902: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50903: LD_INT 0
50905: PPUSH
50906: PPUSH
50907: PPUSH
// uc_side = 0 ;
50908: LD_ADDR_OWVAR 20
50912: PUSH
50913: LD_INT 0
50915: ST_TO_ADDR
// uc_nation = 0 ;
50916: LD_ADDR_OWVAR 21
50920: PUSH
50921: LD_INT 0
50923: ST_TO_ADDR
// InitHc_All ( ) ;
50924: CALL_OW 584
// InitVc ;
50928: CALL_OW 20
// if mastodonts then
50932: LD_VAR 0 6
50936: IFFALSE 51003
// for i = 1 to mastodonts do
50938: LD_ADDR_VAR 0 11
50942: PUSH
50943: DOUBLE
50944: LD_INT 1
50946: DEC
50947: ST_TO_ADDR
50948: LD_VAR 0 6
50952: PUSH
50953: FOR_TO
50954: IFFALSE 51001
// begin vc_chassis := 31 ;
50956: LD_ADDR_OWVAR 37
50960: PUSH
50961: LD_INT 31
50963: ST_TO_ADDR
// vc_control := control_rider ;
50964: LD_ADDR_OWVAR 38
50968: PUSH
50969: LD_INT 4
50971: ST_TO_ADDR
// animal := CreateVehicle ;
50972: LD_ADDR_VAR 0 12
50976: PUSH
50977: CALL_OW 45
50981: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50982: LD_VAR 0 12
50986: PPUSH
50987: LD_VAR 0 8
50991: PPUSH
50992: LD_INT 0
50994: PPUSH
50995: CALL 53131 0 3
// end ;
50999: GO 50953
51001: POP
51002: POP
// if horses then
51003: LD_VAR 0 5
51007: IFFALSE 51074
// for i = 1 to horses do
51009: LD_ADDR_VAR 0 11
51013: PUSH
51014: DOUBLE
51015: LD_INT 1
51017: DEC
51018: ST_TO_ADDR
51019: LD_VAR 0 5
51023: PUSH
51024: FOR_TO
51025: IFFALSE 51072
// begin hc_class := 21 ;
51027: LD_ADDR_OWVAR 28
51031: PUSH
51032: LD_INT 21
51034: ST_TO_ADDR
// hc_gallery :=  ;
51035: LD_ADDR_OWVAR 33
51039: PUSH
51040: LD_STRING 
51042: ST_TO_ADDR
// animal := CreateHuman ;
51043: LD_ADDR_VAR 0 12
51047: PUSH
51048: CALL_OW 44
51052: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51053: LD_VAR 0 12
51057: PPUSH
51058: LD_VAR 0 8
51062: PPUSH
51063: LD_INT 0
51065: PPUSH
51066: CALL 53131 0 3
// end ;
51070: GO 51024
51072: POP
51073: POP
// if birds then
51074: LD_VAR 0 1
51078: IFFALSE 51145
// for i = 1 to birds do
51080: LD_ADDR_VAR 0 11
51084: PUSH
51085: DOUBLE
51086: LD_INT 1
51088: DEC
51089: ST_TO_ADDR
51090: LD_VAR 0 1
51094: PUSH
51095: FOR_TO
51096: IFFALSE 51143
// begin hc_class := 18 ;
51098: LD_ADDR_OWVAR 28
51102: PUSH
51103: LD_INT 18
51105: ST_TO_ADDR
// hc_gallery =  ;
51106: LD_ADDR_OWVAR 33
51110: PUSH
51111: LD_STRING 
51113: ST_TO_ADDR
// animal := CreateHuman ;
51114: LD_ADDR_VAR 0 12
51118: PUSH
51119: CALL_OW 44
51123: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51124: LD_VAR 0 12
51128: PPUSH
51129: LD_VAR 0 8
51133: PPUSH
51134: LD_INT 0
51136: PPUSH
51137: CALL 53131 0 3
// end ;
51141: GO 51095
51143: POP
51144: POP
// if tigers then
51145: LD_VAR 0 2
51149: IFFALSE 51233
// for i = 1 to tigers do
51151: LD_ADDR_VAR 0 11
51155: PUSH
51156: DOUBLE
51157: LD_INT 1
51159: DEC
51160: ST_TO_ADDR
51161: LD_VAR 0 2
51165: PUSH
51166: FOR_TO
51167: IFFALSE 51231
// begin hc_class = class_tiger ;
51169: LD_ADDR_OWVAR 28
51173: PUSH
51174: LD_INT 14
51176: ST_TO_ADDR
// hc_gallery =  ;
51177: LD_ADDR_OWVAR 33
51181: PUSH
51182: LD_STRING 
51184: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51185: LD_ADDR_OWVAR 35
51189: PUSH
51190: LD_INT 7
51192: NEG
51193: PPUSH
51194: LD_INT 7
51196: PPUSH
51197: CALL_OW 12
51201: ST_TO_ADDR
// animal := CreateHuman ;
51202: LD_ADDR_VAR 0 12
51206: PUSH
51207: CALL_OW 44
51211: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51212: LD_VAR 0 12
51216: PPUSH
51217: LD_VAR 0 8
51221: PPUSH
51222: LD_INT 0
51224: PPUSH
51225: CALL 53131 0 3
// end ;
51229: GO 51166
51231: POP
51232: POP
// if apemans then
51233: LD_VAR 0 3
51237: IFFALSE 51360
// for i = 1 to apemans do
51239: LD_ADDR_VAR 0 11
51243: PUSH
51244: DOUBLE
51245: LD_INT 1
51247: DEC
51248: ST_TO_ADDR
51249: LD_VAR 0 3
51253: PUSH
51254: FOR_TO
51255: IFFALSE 51358
// begin hc_class = class_apeman ;
51257: LD_ADDR_OWVAR 28
51261: PUSH
51262: LD_INT 12
51264: ST_TO_ADDR
// hc_gallery =  ;
51265: LD_ADDR_OWVAR 33
51269: PUSH
51270: LD_STRING 
51272: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51273: LD_ADDR_OWVAR 35
51277: PUSH
51278: LD_INT 2
51280: NEG
51281: PPUSH
51282: LD_INT 2
51284: PPUSH
51285: CALL_OW 12
51289: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51290: LD_ADDR_OWVAR 31
51294: PUSH
51295: LD_INT 1
51297: PPUSH
51298: LD_INT 3
51300: PPUSH
51301: CALL_OW 12
51305: PUSH
51306: LD_INT 1
51308: PPUSH
51309: LD_INT 3
51311: PPUSH
51312: CALL_OW 12
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: ST_TO_ADDR
// animal := CreateHuman ;
51329: LD_ADDR_VAR 0 12
51333: PUSH
51334: CALL_OW 44
51338: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51339: LD_VAR 0 12
51343: PPUSH
51344: LD_VAR 0 8
51348: PPUSH
51349: LD_INT 0
51351: PPUSH
51352: CALL 53131 0 3
// end ;
51356: GO 51254
51358: POP
51359: POP
// if enchidnas then
51360: LD_VAR 0 4
51364: IFFALSE 51431
// for i = 1 to enchidnas do
51366: LD_ADDR_VAR 0 11
51370: PUSH
51371: DOUBLE
51372: LD_INT 1
51374: DEC
51375: ST_TO_ADDR
51376: LD_VAR 0 4
51380: PUSH
51381: FOR_TO
51382: IFFALSE 51429
// begin hc_class = 13 ;
51384: LD_ADDR_OWVAR 28
51388: PUSH
51389: LD_INT 13
51391: ST_TO_ADDR
// hc_gallery =  ;
51392: LD_ADDR_OWVAR 33
51396: PUSH
51397: LD_STRING 
51399: ST_TO_ADDR
// animal := CreateHuman ;
51400: LD_ADDR_VAR 0 12
51404: PUSH
51405: CALL_OW 44
51409: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51410: LD_VAR 0 12
51414: PPUSH
51415: LD_VAR 0 8
51419: PPUSH
51420: LD_INT 0
51422: PPUSH
51423: CALL 53131 0 3
// end ;
51427: GO 51381
51429: POP
51430: POP
// if fishes then
51431: LD_VAR 0 7
51435: IFFALSE 51502
// for i = 1 to fishes do
51437: LD_ADDR_VAR 0 11
51441: PUSH
51442: DOUBLE
51443: LD_INT 1
51445: DEC
51446: ST_TO_ADDR
51447: LD_VAR 0 7
51451: PUSH
51452: FOR_TO
51453: IFFALSE 51500
// begin hc_class = 20 ;
51455: LD_ADDR_OWVAR 28
51459: PUSH
51460: LD_INT 20
51462: ST_TO_ADDR
// hc_gallery =  ;
51463: LD_ADDR_OWVAR 33
51467: PUSH
51468: LD_STRING 
51470: ST_TO_ADDR
// animal := CreateHuman ;
51471: LD_ADDR_VAR 0 12
51475: PUSH
51476: CALL_OW 44
51480: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51481: LD_VAR 0 12
51485: PPUSH
51486: LD_VAR 0 9
51490: PPUSH
51491: LD_INT 0
51493: PPUSH
51494: CALL 53131 0 3
// end ;
51498: GO 51452
51500: POP
51501: POP
// end ;
51502: LD_VAR 0 10
51506: RET
// export function WantHeal ( sci , unit ) ; begin
51507: LD_INT 0
51509: PPUSH
// if GetTaskList ( sci ) > 0 then
51510: LD_VAR 0 1
51514: PPUSH
51515: CALL_OW 437
51519: PUSH
51520: LD_INT 0
51522: GREATER
51523: IFFALSE 51593
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51525: LD_VAR 0 1
51529: PPUSH
51530: CALL_OW 437
51534: PUSH
51535: LD_INT 1
51537: ARRAY
51538: PUSH
51539: LD_INT 1
51541: ARRAY
51542: PUSH
51543: LD_STRING l
51545: EQUAL
51546: PUSH
51547: LD_VAR 0 1
51551: PPUSH
51552: CALL_OW 437
51556: PUSH
51557: LD_INT 1
51559: ARRAY
51560: PUSH
51561: LD_INT 4
51563: ARRAY
51564: PUSH
51565: LD_VAR 0 2
51569: EQUAL
51570: AND
51571: IFFALSE 51583
// result := true else
51573: LD_ADDR_VAR 0 3
51577: PUSH
51578: LD_INT 1
51580: ST_TO_ADDR
51581: GO 51591
// result := false ;
51583: LD_ADDR_VAR 0 3
51587: PUSH
51588: LD_INT 0
51590: ST_TO_ADDR
// end else
51591: GO 51601
// result := false ;
51593: LD_ADDR_VAR 0 3
51597: PUSH
51598: LD_INT 0
51600: ST_TO_ADDR
// end ;
51601: LD_VAR 0 3
51605: RET
// export function HealTarget ( sci ) ; begin
51606: LD_INT 0
51608: PPUSH
// if not sci then
51609: LD_VAR 0 1
51613: NOT
51614: IFFALSE 51618
// exit ;
51616: GO 51683
// result := 0 ;
51618: LD_ADDR_VAR 0 2
51622: PUSH
51623: LD_INT 0
51625: ST_TO_ADDR
// if GetTaskList ( sci ) then
51626: LD_VAR 0 1
51630: PPUSH
51631: CALL_OW 437
51635: IFFALSE 51683
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51637: LD_VAR 0 1
51641: PPUSH
51642: CALL_OW 437
51646: PUSH
51647: LD_INT 1
51649: ARRAY
51650: PUSH
51651: LD_INT 1
51653: ARRAY
51654: PUSH
51655: LD_STRING l
51657: EQUAL
51658: IFFALSE 51683
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51660: LD_ADDR_VAR 0 2
51664: PUSH
51665: LD_VAR 0 1
51669: PPUSH
51670: CALL_OW 437
51674: PUSH
51675: LD_INT 1
51677: ARRAY
51678: PUSH
51679: LD_INT 4
51681: ARRAY
51682: ST_TO_ADDR
// end ;
51683: LD_VAR 0 2
51687: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51688: LD_INT 0
51690: PPUSH
51691: PPUSH
51692: PPUSH
51693: PPUSH
// if not base_units then
51694: LD_VAR 0 1
51698: NOT
51699: IFFALSE 51703
// exit ;
51701: GO 51790
// result := false ;
51703: LD_ADDR_VAR 0 2
51707: PUSH
51708: LD_INT 0
51710: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51711: LD_ADDR_VAR 0 5
51715: PUSH
51716: LD_VAR 0 1
51720: PPUSH
51721: LD_INT 21
51723: PUSH
51724: LD_INT 3
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PPUSH
51731: CALL_OW 72
51735: ST_TO_ADDR
// if not tmp then
51736: LD_VAR 0 5
51740: NOT
51741: IFFALSE 51745
// exit ;
51743: GO 51790
// for i in tmp do
51745: LD_ADDR_VAR 0 3
51749: PUSH
51750: LD_VAR 0 5
51754: PUSH
51755: FOR_IN
51756: IFFALSE 51788
// begin result := EnemyInRange ( i , 22 ) ;
51758: LD_ADDR_VAR 0 2
51762: PUSH
51763: LD_VAR 0 3
51767: PPUSH
51768: LD_INT 22
51770: PPUSH
51771: CALL 49388 0 2
51775: ST_TO_ADDR
// if result then
51776: LD_VAR 0 2
51780: IFFALSE 51786
// exit ;
51782: POP
51783: POP
51784: GO 51790
// end ;
51786: GO 51755
51788: POP
51789: POP
// end ;
51790: LD_VAR 0 2
51794: RET
// export function FilterByTag ( units , tag ) ; begin
51795: LD_INT 0
51797: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51798: LD_ADDR_VAR 0 3
51802: PUSH
51803: LD_VAR 0 1
51807: PPUSH
51808: LD_INT 120
51810: PUSH
51811: LD_VAR 0 2
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PPUSH
51820: CALL_OW 72
51824: ST_TO_ADDR
// end ;
51825: LD_VAR 0 3
51829: RET
// export function IsDriver ( un ) ; begin
51830: LD_INT 0
51832: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51833: LD_ADDR_VAR 0 2
51837: PUSH
51838: LD_VAR 0 1
51842: PUSH
51843: LD_INT 55
51845: PUSH
51846: EMPTY
51847: LIST
51848: PPUSH
51849: CALL_OW 69
51853: IN
51854: ST_TO_ADDR
// end ;
51855: LD_VAR 0 2
51859: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51860: LD_INT 0
51862: PPUSH
51863: PPUSH
// list := [ ] ;
51864: LD_ADDR_VAR 0 5
51868: PUSH
51869: EMPTY
51870: ST_TO_ADDR
// case d of 0 :
51871: LD_VAR 0 3
51875: PUSH
51876: LD_INT 0
51878: DOUBLE
51879: EQUAL
51880: IFTRUE 51884
51882: GO 52017
51884: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51885: LD_ADDR_VAR 0 5
51889: PUSH
51890: LD_VAR 0 1
51894: PUSH
51895: LD_INT 4
51897: MINUS
51898: PUSH
51899: LD_VAR 0 2
51903: PUSH
51904: LD_INT 4
51906: MINUS
51907: PUSH
51908: LD_INT 2
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: LIST
51915: PUSH
51916: LD_VAR 0 1
51920: PUSH
51921: LD_INT 3
51923: MINUS
51924: PUSH
51925: LD_VAR 0 2
51929: PUSH
51930: LD_INT 1
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: LIST
51937: PUSH
51938: LD_VAR 0 1
51942: PUSH
51943: LD_INT 4
51945: PLUS
51946: PUSH
51947: LD_VAR 0 2
51951: PUSH
51952: LD_INT 4
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: LIST
51959: PUSH
51960: LD_VAR 0 1
51964: PUSH
51965: LD_INT 3
51967: PLUS
51968: PUSH
51969: LD_VAR 0 2
51973: PUSH
51974: LD_INT 3
51976: PLUS
51977: PUSH
51978: LD_INT 5
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: LIST
51985: PUSH
51986: LD_VAR 0 1
51990: PUSH
51991: LD_VAR 0 2
51995: PUSH
51996: LD_INT 4
51998: PLUS
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: LIST
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: ST_TO_ADDR
// end ; 1 :
52015: GO 52715
52017: LD_INT 1
52019: DOUBLE
52020: EQUAL
52021: IFTRUE 52025
52023: GO 52158
52025: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52026: LD_ADDR_VAR 0 5
52030: PUSH
52031: LD_VAR 0 1
52035: PUSH
52036: LD_VAR 0 2
52040: PUSH
52041: LD_INT 4
52043: MINUS
52044: PUSH
52045: LD_INT 3
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: LIST
52052: PUSH
52053: LD_VAR 0 1
52057: PUSH
52058: LD_INT 3
52060: MINUS
52061: PUSH
52062: LD_VAR 0 2
52066: PUSH
52067: LD_INT 3
52069: MINUS
52070: PUSH
52071: LD_INT 2
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: LIST
52078: PUSH
52079: LD_VAR 0 1
52083: PUSH
52084: LD_INT 4
52086: MINUS
52087: PUSH
52088: LD_VAR 0 2
52092: PUSH
52093: LD_INT 1
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: LIST
52100: PUSH
52101: LD_VAR 0 1
52105: PUSH
52106: LD_VAR 0 2
52110: PUSH
52111: LD_INT 3
52113: PLUS
52114: PUSH
52115: LD_INT 0
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: LIST
52122: PUSH
52123: LD_VAR 0 1
52127: PUSH
52128: LD_INT 4
52130: PLUS
52131: PUSH
52132: LD_VAR 0 2
52136: PUSH
52137: LD_INT 4
52139: PLUS
52140: PUSH
52141: LD_INT 5
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: LIST
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: ST_TO_ADDR
// end ; 2 :
52156: GO 52715
52158: LD_INT 2
52160: DOUBLE
52161: EQUAL
52162: IFTRUE 52166
52164: GO 52295
52166: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52167: LD_ADDR_VAR 0 5
52171: PUSH
52172: LD_VAR 0 1
52176: PUSH
52177: LD_VAR 0 2
52181: PUSH
52182: LD_INT 3
52184: MINUS
52185: PUSH
52186: LD_INT 3
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: LIST
52193: PUSH
52194: LD_VAR 0 1
52198: PUSH
52199: LD_INT 4
52201: PLUS
52202: PUSH
52203: LD_VAR 0 2
52207: PUSH
52208: LD_INT 4
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: LIST
52215: PUSH
52216: LD_VAR 0 1
52220: PUSH
52221: LD_VAR 0 2
52225: PUSH
52226: LD_INT 4
52228: PLUS
52229: PUSH
52230: LD_INT 0
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: LIST
52237: PUSH
52238: LD_VAR 0 1
52242: PUSH
52243: LD_INT 3
52245: MINUS
52246: PUSH
52247: LD_VAR 0 2
52251: PUSH
52252: LD_INT 1
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: LIST
52259: PUSH
52260: LD_VAR 0 1
52264: PUSH
52265: LD_INT 4
52267: MINUS
52268: PUSH
52269: LD_VAR 0 2
52273: PUSH
52274: LD_INT 4
52276: MINUS
52277: PUSH
52278: LD_INT 2
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: LIST
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: ST_TO_ADDR
// end ; 3 :
52293: GO 52715
52295: LD_INT 3
52297: DOUBLE
52298: EQUAL
52299: IFTRUE 52303
52301: GO 52436
52303: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52304: LD_ADDR_VAR 0 5
52308: PUSH
52309: LD_VAR 0 1
52313: PUSH
52314: LD_INT 3
52316: PLUS
52317: PUSH
52318: LD_VAR 0 2
52322: PUSH
52323: LD_INT 4
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: LIST
52330: PUSH
52331: LD_VAR 0 1
52335: PUSH
52336: LD_INT 4
52338: PLUS
52339: PUSH
52340: LD_VAR 0 2
52344: PUSH
52345: LD_INT 4
52347: PLUS
52348: PUSH
52349: LD_INT 5
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: LIST
52356: PUSH
52357: LD_VAR 0 1
52361: PUSH
52362: LD_INT 4
52364: MINUS
52365: PUSH
52366: LD_VAR 0 2
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: LIST
52378: PUSH
52379: LD_VAR 0 1
52383: PUSH
52384: LD_VAR 0 2
52388: PUSH
52389: LD_INT 4
52391: MINUS
52392: PUSH
52393: LD_INT 3
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: LIST
52400: PUSH
52401: LD_VAR 0 1
52405: PUSH
52406: LD_INT 3
52408: MINUS
52409: PUSH
52410: LD_VAR 0 2
52414: PUSH
52415: LD_INT 3
52417: MINUS
52418: PUSH
52419: LD_INT 2
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: LIST
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: ST_TO_ADDR
// end ; 4 :
52434: GO 52715
52436: LD_INT 4
52438: DOUBLE
52439: EQUAL
52440: IFTRUE 52444
52442: GO 52577
52444: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52445: LD_ADDR_VAR 0 5
52449: PUSH
52450: LD_VAR 0 1
52454: PUSH
52455: LD_VAR 0 2
52459: PUSH
52460: LD_INT 4
52462: PLUS
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: LIST
52471: PUSH
52472: LD_VAR 0 1
52476: PUSH
52477: LD_INT 3
52479: PLUS
52480: PUSH
52481: LD_VAR 0 2
52485: PUSH
52486: LD_INT 3
52488: PLUS
52489: PUSH
52490: LD_INT 5
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: LIST
52497: PUSH
52498: LD_VAR 0 1
52502: PUSH
52503: LD_INT 4
52505: PLUS
52506: PUSH
52507: LD_VAR 0 2
52511: PUSH
52512: LD_INT 4
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: LIST
52519: PUSH
52520: LD_VAR 0 1
52524: PUSH
52525: LD_VAR 0 2
52529: PUSH
52530: LD_INT 3
52532: MINUS
52533: PUSH
52534: LD_INT 3
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: LIST
52541: PUSH
52542: LD_VAR 0 1
52546: PUSH
52547: LD_INT 4
52549: MINUS
52550: PUSH
52551: LD_VAR 0 2
52555: PUSH
52556: LD_INT 4
52558: MINUS
52559: PUSH
52560: LD_INT 2
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: LIST
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: ST_TO_ADDR
// end ; 5 :
52575: GO 52715
52577: LD_INT 5
52579: DOUBLE
52580: EQUAL
52581: IFTRUE 52585
52583: GO 52714
52585: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52586: LD_ADDR_VAR 0 5
52590: PUSH
52591: LD_VAR 0 1
52595: PUSH
52596: LD_INT 4
52598: MINUS
52599: PUSH
52600: LD_VAR 0 2
52604: PUSH
52605: LD_INT 1
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: LIST
52612: PUSH
52613: LD_VAR 0 1
52617: PUSH
52618: LD_VAR 0 2
52622: PUSH
52623: LD_INT 4
52625: MINUS
52626: PUSH
52627: LD_INT 3
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: LIST
52634: PUSH
52635: LD_VAR 0 1
52639: PUSH
52640: LD_INT 4
52642: PLUS
52643: PUSH
52644: LD_VAR 0 2
52648: PUSH
52649: LD_INT 4
52651: PLUS
52652: PUSH
52653: LD_INT 5
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: LIST
52660: PUSH
52661: LD_VAR 0 1
52665: PUSH
52666: LD_INT 3
52668: PLUS
52669: PUSH
52670: LD_VAR 0 2
52674: PUSH
52675: LD_INT 4
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: LIST
52682: PUSH
52683: LD_VAR 0 1
52687: PUSH
52688: LD_VAR 0 2
52692: PUSH
52693: LD_INT 3
52695: PLUS
52696: PUSH
52697: LD_INT 0
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: LIST
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: ST_TO_ADDR
// end ; end ;
52712: GO 52715
52714: POP
// result := list ;
52715: LD_ADDR_VAR 0 4
52719: PUSH
52720: LD_VAR 0 5
52724: ST_TO_ADDR
// end ;
52725: LD_VAR 0 4
52729: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52730: LD_INT 0
52732: PPUSH
52733: PPUSH
52734: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52735: LD_VAR 0 1
52739: NOT
52740: PUSH
52741: LD_VAR 0 2
52745: PUSH
52746: LD_INT 1
52748: PUSH
52749: LD_INT 2
52751: PUSH
52752: LD_INT 3
52754: PUSH
52755: LD_INT 4
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: IN
52764: NOT
52765: OR
52766: IFFALSE 52770
// exit ;
52768: GO 52853
// tmp := [ ] ;
52770: LD_ADDR_VAR 0 5
52774: PUSH
52775: EMPTY
52776: ST_TO_ADDR
// for i in units do
52777: LD_ADDR_VAR 0 4
52781: PUSH
52782: LD_VAR 0 1
52786: PUSH
52787: FOR_IN
52788: IFFALSE 52822
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52790: LD_ADDR_VAR 0 5
52794: PUSH
52795: LD_VAR 0 5
52799: PPUSH
52800: LD_VAR 0 4
52804: PPUSH
52805: LD_VAR 0 2
52809: PPUSH
52810: CALL_OW 259
52814: PPUSH
52815: CALL 54226 0 2
52819: ST_TO_ADDR
52820: GO 52787
52822: POP
52823: POP
// if not tmp then
52824: LD_VAR 0 5
52828: NOT
52829: IFFALSE 52833
// exit ;
52831: GO 52853
// result := SortListByListDesc ( units , tmp ) ;
52833: LD_ADDR_VAR 0 3
52837: PUSH
52838: LD_VAR 0 1
52842: PPUSH
52843: LD_VAR 0 5
52847: PPUSH
52848: CALL_OW 77
52852: ST_TO_ADDR
// end ;
52853: LD_VAR 0 3
52857: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52858: LD_INT 0
52860: PPUSH
52861: PPUSH
52862: PPUSH
// result := false ;
52863: LD_ADDR_VAR 0 3
52867: PUSH
52868: LD_INT 0
52870: ST_TO_ADDR
// if not building then
52871: LD_VAR 0 2
52875: NOT
52876: IFFALSE 52880
// exit ;
52878: GO 53018
// x := GetX ( building ) ;
52880: LD_ADDR_VAR 0 4
52884: PUSH
52885: LD_VAR 0 2
52889: PPUSH
52890: CALL_OW 250
52894: ST_TO_ADDR
// y := GetY ( building ) ;
52895: LD_ADDR_VAR 0 5
52899: PUSH
52900: LD_VAR 0 2
52904: PPUSH
52905: CALL_OW 251
52909: ST_TO_ADDR
// if not x or not y then
52910: LD_VAR 0 4
52914: NOT
52915: PUSH
52916: LD_VAR 0 5
52920: NOT
52921: OR
52922: IFFALSE 52926
// exit ;
52924: GO 53018
// if GetTaskList ( unit ) then
52926: LD_VAR 0 1
52930: PPUSH
52931: CALL_OW 437
52935: IFFALSE 53018
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52937: LD_STRING e
52939: PUSH
52940: LD_VAR 0 1
52944: PPUSH
52945: CALL_OW 437
52949: PUSH
52950: LD_INT 1
52952: ARRAY
52953: PUSH
52954: LD_INT 1
52956: ARRAY
52957: EQUAL
52958: PUSH
52959: LD_VAR 0 4
52963: PUSH
52964: LD_VAR 0 1
52968: PPUSH
52969: CALL_OW 437
52973: PUSH
52974: LD_INT 1
52976: ARRAY
52977: PUSH
52978: LD_INT 2
52980: ARRAY
52981: EQUAL
52982: AND
52983: PUSH
52984: LD_VAR 0 5
52988: PUSH
52989: LD_VAR 0 1
52993: PPUSH
52994: CALL_OW 437
52998: PUSH
52999: LD_INT 1
53001: ARRAY
53002: PUSH
53003: LD_INT 3
53005: ARRAY
53006: EQUAL
53007: AND
53008: IFFALSE 53018
// result := true end ;
53010: LD_ADDR_VAR 0 3
53014: PUSH
53015: LD_INT 1
53017: ST_TO_ADDR
// end ;
53018: LD_VAR 0 3
53022: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53023: LD_INT 0
53025: PPUSH
// result := false ;
53026: LD_ADDR_VAR 0 4
53030: PUSH
53031: LD_INT 0
53033: ST_TO_ADDR
// if GetTaskList ( unit ) then
53034: LD_VAR 0 1
53038: PPUSH
53039: CALL_OW 437
53043: IFFALSE 53126
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53045: LD_STRING M
53047: PUSH
53048: LD_VAR 0 1
53052: PPUSH
53053: CALL_OW 437
53057: PUSH
53058: LD_INT 1
53060: ARRAY
53061: PUSH
53062: LD_INT 1
53064: ARRAY
53065: EQUAL
53066: PUSH
53067: LD_VAR 0 2
53071: PUSH
53072: LD_VAR 0 1
53076: PPUSH
53077: CALL_OW 437
53081: PUSH
53082: LD_INT 1
53084: ARRAY
53085: PUSH
53086: LD_INT 2
53088: ARRAY
53089: EQUAL
53090: AND
53091: PUSH
53092: LD_VAR 0 3
53096: PUSH
53097: LD_VAR 0 1
53101: PPUSH
53102: CALL_OW 437
53106: PUSH
53107: LD_INT 1
53109: ARRAY
53110: PUSH
53111: LD_INT 3
53113: ARRAY
53114: EQUAL
53115: AND
53116: IFFALSE 53126
// result := true ;
53118: LD_ADDR_VAR 0 4
53122: PUSH
53123: LD_INT 1
53125: ST_TO_ADDR
// end ; end ;
53126: LD_VAR 0 4
53130: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53131: LD_INT 0
53133: PPUSH
53134: PPUSH
53135: PPUSH
53136: PPUSH
// if not unit or not area then
53137: LD_VAR 0 1
53141: NOT
53142: PUSH
53143: LD_VAR 0 2
53147: NOT
53148: OR
53149: IFFALSE 53153
// exit ;
53151: GO 53329
// tmp := AreaToList ( area , i ) ;
53153: LD_ADDR_VAR 0 6
53157: PUSH
53158: LD_VAR 0 2
53162: PPUSH
53163: LD_VAR 0 5
53167: PPUSH
53168: CALL_OW 517
53172: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53173: LD_ADDR_VAR 0 5
53177: PUSH
53178: DOUBLE
53179: LD_INT 1
53181: DEC
53182: ST_TO_ADDR
53183: LD_VAR 0 6
53187: PUSH
53188: LD_INT 1
53190: ARRAY
53191: PUSH
53192: FOR_TO
53193: IFFALSE 53327
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53195: LD_ADDR_VAR 0 7
53199: PUSH
53200: LD_VAR 0 6
53204: PUSH
53205: LD_INT 1
53207: ARRAY
53208: PUSH
53209: LD_VAR 0 5
53213: ARRAY
53214: PUSH
53215: LD_VAR 0 6
53219: PUSH
53220: LD_INT 2
53222: ARRAY
53223: PUSH
53224: LD_VAR 0 5
53228: ARRAY
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
53234: LD_INT 92
53236: PUSH
53237: LD_VAR 0 7
53241: PUSH
53242: LD_INT 1
53244: ARRAY
53245: PUSH
53246: LD_VAR 0 7
53250: PUSH
53251: LD_INT 2
53253: ARRAY
53254: PUSH
53255: LD_INT 2
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: PPUSH
53264: CALL_OW 69
53268: PUSH
53269: LD_INT 0
53271: EQUAL
53272: IFFALSE 53325
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53274: LD_VAR 0 1
53278: PPUSH
53279: LD_VAR 0 7
53283: PUSH
53284: LD_INT 1
53286: ARRAY
53287: PPUSH
53288: LD_VAR 0 7
53292: PUSH
53293: LD_INT 2
53295: ARRAY
53296: PPUSH
53297: LD_VAR 0 3
53301: PPUSH
53302: CALL_OW 48
// result := IsPlaced ( unit ) ;
53306: LD_ADDR_VAR 0 4
53310: PUSH
53311: LD_VAR 0 1
53315: PPUSH
53316: CALL_OW 305
53320: ST_TO_ADDR
// exit ;
53321: POP
53322: POP
53323: GO 53329
// end ; end ;
53325: GO 53192
53327: POP
53328: POP
// end ;
53329: LD_VAR 0 4
53333: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53334: LD_INT 0
53336: PPUSH
53337: PPUSH
53338: PPUSH
// if not side or side > 8 then
53339: LD_VAR 0 1
53343: NOT
53344: PUSH
53345: LD_VAR 0 1
53349: PUSH
53350: LD_INT 8
53352: GREATER
53353: OR
53354: IFFALSE 53358
// exit ;
53356: GO 53545
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53358: LD_ADDR_VAR 0 4
53362: PUSH
53363: LD_INT 22
53365: PUSH
53366: LD_VAR 0 1
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 21
53377: PUSH
53378: LD_INT 3
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PPUSH
53389: CALL_OW 69
53393: ST_TO_ADDR
// if not tmp then
53394: LD_VAR 0 4
53398: NOT
53399: IFFALSE 53403
// exit ;
53401: GO 53545
// enable_addtolog := true ;
53403: LD_ADDR_OWVAR 81
53407: PUSH
53408: LD_INT 1
53410: ST_TO_ADDR
// AddToLog ( [ ) ;
53411: LD_STRING [
53413: PPUSH
53414: CALL_OW 561
// for i in tmp do
53418: LD_ADDR_VAR 0 3
53422: PUSH
53423: LD_VAR 0 4
53427: PUSH
53428: FOR_IN
53429: IFFALSE 53536
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53431: LD_STRING [
53433: PUSH
53434: LD_VAR 0 3
53438: PPUSH
53439: CALL_OW 266
53443: STR
53444: PUSH
53445: LD_STRING , 
53447: STR
53448: PUSH
53449: LD_VAR 0 3
53453: PPUSH
53454: CALL_OW 250
53458: STR
53459: PUSH
53460: LD_STRING , 
53462: STR
53463: PUSH
53464: LD_VAR 0 3
53468: PPUSH
53469: CALL_OW 251
53473: STR
53474: PUSH
53475: LD_STRING , 
53477: STR
53478: PUSH
53479: LD_VAR 0 3
53483: PPUSH
53484: CALL_OW 254
53488: STR
53489: PUSH
53490: LD_STRING , 
53492: STR
53493: PUSH
53494: LD_VAR 0 3
53498: PPUSH
53499: LD_INT 1
53501: PPUSH
53502: CALL_OW 268
53506: STR
53507: PUSH
53508: LD_STRING , 
53510: STR
53511: PUSH
53512: LD_VAR 0 3
53516: PPUSH
53517: LD_INT 2
53519: PPUSH
53520: CALL_OW 268
53524: STR
53525: PUSH
53526: LD_STRING ],
53528: STR
53529: PPUSH
53530: CALL_OW 561
// end ;
53534: GO 53428
53536: POP
53537: POP
// AddToLog ( ]; ) ;
53538: LD_STRING ];
53540: PPUSH
53541: CALL_OW 561
// end ;
53545: LD_VAR 0 2
53549: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53550: LD_INT 0
53552: PPUSH
53553: PPUSH
53554: PPUSH
53555: PPUSH
53556: PPUSH
// if not area or not rate or not max then
53557: LD_VAR 0 1
53561: NOT
53562: PUSH
53563: LD_VAR 0 2
53567: NOT
53568: OR
53569: PUSH
53570: LD_VAR 0 4
53574: NOT
53575: OR
53576: IFFALSE 53580
// exit ;
53578: GO 53769
// while 1 do
53580: LD_INT 1
53582: IFFALSE 53769
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53584: LD_ADDR_VAR 0 9
53588: PUSH
53589: LD_VAR 0 1
53593: PPUSH
53594: LD_INT 1
53596: PPUSH
53597: CALL_OW 287
53601: PUSH
53602: LD_INT 10
53604: MUL
53605: ST_TO_ADDR
// r := rate / 10 ;
53606: LD_ADDR_VAR 0 7
53610: PUSH
53611: LD_VAR 0 2
53615: PUSH
53616: LD_INT 10
53618: DIVREAL
53619: ST_TO_ADDR
// time := 1 1$00 ;
53620: LD_ADDR_VAR 0 8
53624: PUSH
53625: LD_INT 2100
53627: ST_TO_ADDR
// if amount < min then
53628: LD_VAR 0 9
53632: PUSH
53633: LD_VAR 0 3
53637: LESS
53638: IFFALSE 53656
// r := r * 2 else
53640: LD_ADDR_VAR 0 7
53644: PUSH
53645: LD_VAR 0 7
53649: PUSH
53650: LD_INT 2
53652: MUL
53653: ST_TO_ADDR
53654: GO 53682
// if amount > max then
53656: LD_VAR 0 9
53660: PUSH
53661: LD_VAR 0 4
53665: GREATER
53666: IFFALSE 53682
// r := r / 2 ;
53668: LD_ADDR_VAR 0 7
53672: PUSH
53673: LD_VAR 0 7
53677: PUSH
53678: LD_INT 2
53680: DIVREAL
53681: ST_TO_ADDR
// time := time / r ;
53682: LD_ADDR_VAR 0 8
53686: PUSH
53687: LD_VAR 0 8
53691: PUSH
53692: LD_VAR 0 7
53696: DIVREAL
53697: ST_TO_ADDR
// if time < 0 then
53698: LD_VAR 0 8
53702: PUSH
53703: LD_INT 0
53705: LESS
53706: IFFALSE 53723
// time := time * - 1 ;
53708: LD_ADDR_VAR 0 8
53712: PUSH
53713: LD_VAR 0 8
53717: PUSH
53718: LD_INT 1
53720: NEG
53721: MUL
53722: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53723: LD_VAR 0 8
53727: PUSH
53728: LD_INT 35
53730: PPUSH
53731: LD_INT 875
53733: PPUSH
53734: CALL_OW 12
53738: PLUS
53739: PPUSH
53740: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53744: LD_INT 1
53746: PPUSH
53747: LD_INT 5
53749: PPUSH
53750: CALL_OW 12
53754: PPUSH
53755: LD_VAR 0 1
53759: PPUSH
53760: LD_INT 1
53762: PPUSH
53763: CALL_OW 55
// end ;
53767: GO 53580
// end ;
53769: LD_VAR 0 5
53773: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53774: LD_INT 0
53776: PPUSH
53777: PPUSH
53778: PPUSH
53779: PPUSH
53780: PPUSH
53781: PPUSH
53782: PPUSH
53783: PPUSH
// if not turrets or not factories then
53784: LD_VAR 0 1
53788: NOT
53789: PUSH
53790: LD_VAR 0 2
53794: NOT
53795: OR
53796: IFFALSE 53800
// exit ;
53798: GO 54107
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53800: LD_ADDR_VAR 0 10
53804: PUSH
53805: LD_INT 5
53807: PUSH
53808: LD_INT 6
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 2
53817: PUSH
53818: LD_INT 4
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 3
53827: PUSH
53828: LD_INT 5
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 24
53842: PUSH
53843: LD_INT 25
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 23
53852: PUSH
53853: LD_INT 27
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 42
53866: PUSH
53867: LD_INT 43
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 44
53876: PUSH
53877: LD_INT 46
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 45
53886: PUSH
53887: LD_INT 47
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: LIST
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: LIST
53903: ST_TO_ADDR
// result := [ ] ;
53904: LD_ADDR_VAR 0 3
53908: PUSH
53909: EMPTY
53910: ST_TO_ADDR
// for i in turrets do
53911: LD_ADDR_VAR 0 4
53915: PUSH
53916: LD_VAR 0 1
53920: PUSH
53921: FOR_IN
53922: IFFALSE 54105
// begin nat := GetNation ( i ) ;
53924: LD_ADDR_VAR 0 7
53928: PUSH
53929: LD_VAR 0 4
53933: PPUSH
53934: CALL_OW 248
53938: ST_TO_ADDR
// weapon := 0 ;
53939: LD_ADDR_VAR 0 8
53943: PUSH
53944: LD_INT 0
53946: ST_TO_ADDR
// if not nat then
53947: LD_VAR 0 7
53951: NOT
53952: IFFALSE 53956
// continue ;
53954: GO 53921
// for j in list [ nat ] do
53956: LD_ADDR_VAR 0 5
53960: PUSH
53961: LD_VAR 0 10
53965: PUSH
53966: LD_VAR 0 7
53970: ARRAY
53971: PUSH
53972: FOR_IN
53973: IFFALSE 54014
// if GetBWeapon ( i ) = j [ 1 ] then
53975: LD_VAR 0 4
53979: PPUSH
53980: CALL_OW 269
53984: PUSH
53985: LD_VAR 0 5
53989: PUSH
53990: LD_INT 1
53992: ARRAY
53993: EQUAL
53994: IFFALSE 54012
// begin weapon := j [ 2 ] ;
53996: LD_ADDR_VAR 0 8
54000: PUSH
54001: LD_VAR 0 5
54005: PUSH
54006: LD_INT 2
54008: ARRAY
54009: ST_TO_ADDR
// break ;
54010: GO 54014
// end ;
54012: GO 53972
54014: POP
54015: POP
// if not weapon then
54016: LD_VAR 0 8
54020: NOT
54021: IFFALSE 54025
// continue ;
54023: GO 53921
// for k in factories do
54025: LD_ADDR_VAR 0 6
54029: PUSH
54030: LD_VAR 0 2
54034: PUSH
54035: FOR_IN
54036: IFFALSE 54101
// begin weapons := AvailableWeaponList ( k ) ;
54038: LD_ADDR_VAR 0 9
54042: PUSH
54043: LD_VAR 0 6
54047: PPUSH
54048: CALL_OW 478
54052: ST_TO_ADDR
// if not weapons then
54053: LD_VAR 0 9
54057: NOT
54058: IFFALSE 54062
// continue ;
54060: GO 54035
// if weapon in weapons then
54062: LD_VAR 0 8
54066: PUSH
54067: LD_VAR 0 9
54071: IN
54072: IFFALSE 54099
// begin result := [ i , weapon ] ;
54074: LD_ADDR_VAR 0 3
54078: PUSH
54079: LD_VAR 0 4
54083: PUSH
54084: LD_VAR 0 8
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: ST_TO_ADDR
// exit ;
54093: POP
54094: POP
54095: POP
54096: POP
54097: GO 54107
// end ; end ;
54099: GO 54035
54101: POP
54102: POP
// end ;
54103: GO 53921
54105: POP
54106: POP
// end ;
54107: LD_VAR 0 3
54111: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54112: LD_INT 0
54114: PPUSH
// if not side or side > 8 then
54115: LD_VAR 0 3
54119: NOT
54120: PUSH
54121: LD_VAR 0 3
54125: PUSH
54126: LD_INT 8
54128: GREATER
54129: OR
54130: IFFALSE 54134
// exit ;
54132: GO 54193
// if not range then
54134: LD_VAR 0 4
54138: NOT
54139: IFFALSE 54150
// range := - 12 ;
54141: LD_ADDR_VAR 0 4
54145: PUSH
54146: LD_INT 12
54148: NEG
54149: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54150: LD_VAR 0 1
54154: PPUSH
54155: LD_VAR 0 2
54159: PPUSH
54160: LD_VAR 0 3
54164: PPUSH
54165: LD_VAR 0 4
54169: PPUSH
54170: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54174: LD_VAR 0 1
54178: PPUSH
54179: LD_VAR 0 2
54183: PPUSH
54184: LD_VAR 0 3
54188: PPUSH
54189: CALL_OW 331
// end ;
54193: LD_VAR 0 5
54197: RET
// export function Video ( mode ) ; begin
54198: LD_INT 0
54200: PPUSH
// ingame_video = mode ;
54201: LD_ADDR_OWVAR 52
54205: PUSH
54206: LD_VAR 0 1
54210: ST_TO_ADDR
// interface_hidden = mode ;
54211: LD_ADDR_OWVAR 54
54215: PUSH
54216: LD_VAR 0 1
54220: ST_TO_ADDR
// end ;
54221: LD_VAR 0 2
54225: RET
// export function Join ( array , element ) ; begin
54226: LD_INT 0
54228: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54229: LD_ADDR_VAR 0 3
54233: PUSH
54234: LD_VAR 0 1
54238: PPUSH
54239: LD_VAR 0 1
54243: PUSH
54244: LD_INT 1
54246: PLUS
54247: PPUSH
54248: LD_VAR 0 2
54252: PPUSH
54253: CALL_OW 1
54257: ST_TO_ADDR
// end ;
54258: LD_VAR 0 3
54262: RET
// export function JoinUnion ( array , element ) ; begin
54263: LD_INT 0
54265: PPUSH
// result := array union element ;
54266: LD_ADDR_VAR 0 3
54270: PUSH
54271: LD_VAR 0 1
54275: PUSH
54276: LD_VAR 0 2
54280: UNION
54281: ST_TO_ADDR
// end ;
54282: LD_VAR 0 3
54286: RET
// export function GetBehemoths ( side ) ; begin
54287: LD_INT 0
54289: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54290: LD_ADDR_VAR 0 2
54294: PUSH
54295: LD_INT 22
54297: PUSH
54298: LD_VAR 0 1
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 31
54309: PUSH
54310: LD_INT 25
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PPUSH
54321: CALL_OW 69
54325: ST_TO_ADDR
// end ;
54326: LD_VAR 0 2
54330: RET
// export function Shuffle ( array ) ; var i , index ; begin
54331: LD_INT 0
54333: PPUSH
54334: PPUSH
54335: PPUSH
// result := [ ] ;
54336: LD_ADDR_VAR 0 2
54340: PUSH
54341: EMPTY
54342: ST_TO_ADDR
// if not array then
54343: LD_VAR 0 1
54347: NOT
54348: IFFALSE 54352
// exit ;
54350: GO 54451
// Randomize ;
54352: CALL_OW 10
// for i = array downto 1 do
54356: LD_ADDR_VAR 0 3
54360: PUSH
54361: DOUBLE
54362: LD_VAR 0 1
54366: INC
54367: ST_TO_ADDR
54368: LD_INT 1
54370: PUSH
54371: FOR_DOWNTO
54372: IFFALSE 54449
// begin index := rand ( 1 , array ) ;
54374: LD_ADDR_VAR 0 4
54378: PUSH
54379: LD_INT 1
54381: PPUSH
54382: LD_VAR 0 1
54386: PPUSH
54387: CALL_OW 12
54391: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54392: LD_ADDR_VAR 0 2
54396: PUSH
54397: LD_VAR 0 2
54401: PPUSH
54402: LD_VAR 0 2
54406: PUSH
54407: LD_INT 1
54409: PLUS
54410: PPUSH
54411: LD_VAR 0 1
54415: PUSH
54416: LD_VAR 0 4
54420: ARRAY
54421: PPUSH
54422: CALL_OW 2
54426: ST_TO_ADDR
// array := Delete ( array , index ) ;
54427: LD_ADDR_VAR 0 1
54431: PUSH
54432: LD_VAR 0 1
54436: PPUSH
54437: LD_VAR 0 4
54441: PPUSH
54442: CALL_OW 3
54446: ST_TO_ADDR
// end ;
54447: GO 54371
54449: POP
54450: POP
// end ;
54451: LD_VAR 0 2
54455: RET
// export function GetBaseMaterials ( base ) ; begin
54456: LD_INT 0
54458: PPUSH
// result := [ 0 , 0 , 0 ] ;
54459: LD_ADDR_VAR 0 2
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: LIST
54477: ST_TO_ADDR
// if not base then
54478: LD_VAR 0 1
54482: NOT
54483: IFFALSE 54487
// exit ;
54485: GO 54536
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54487: LD_ADDR_VAR 0 2
54491: PUSH
54492: LD_VAR 0 1
54496: PPUSH
54497: LD_INT 1
54499: PPUSH
54500: CALL_OW 275
54504: PUSH
54505: LD_VAR 0 1
54509: PPUSH
54510: LD_INT 2
54512: PPUSH
54513: CALL_OW 275
54517: PUSH
54518: LD_VAR 0 1
54522: PPUSH
54523: LD_INT 3
54525: PPUSH
54526: CALL_OW 275
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: LIST
54535: ST_TO_ADDR
// end ;
54536: LD_VAR 0 2
54540: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54541: LD_INT 0
54543: PPUSH
54544: PPUSH
// result := array ;
54545: LD_ADDR_VAR 0 3
54549: PUSH
54550: LD_VAR 0 1
54554: ST_TO_ADDR
// if size >= result then
54555: LD_VAR 0 2
54559: PUSH
54560: LD_VAR 0 3
54564: GREATEREQUAL
54565: IFFALSE 54569
// exit ;
54567: GO 54619
// if size then
54569: LD_VAR 0 2
54573: IFFALSE 54619
// for i := array downto size do
54575: LD_ADDR_VAR 0 4
54579: PUSH
54580: DOUBLE
54581: LD_VAR 0 1
54585: INC
54586: ST_TO_ADDR
54587: LD_VAR 0 2
54591: PUSH
54592: FOR_DOWNTO
54593: IFFALSE 54617
// result := Delete ( result , result ) ;
54595: LD_ADDR_VAR 0 3
54599: PUSH
54600: LD_VAR 0 3
54604: PPUSH
54605: LD_VAR 0 3
54609: PPUSH
54610: CALL_OW 3
54614: ST_TO_ADDR
54615: GO 54592
54617: POP
54618: POP
// end ;
54619: LD_VAR 0 3
54623: RET
// export function ComExit ( unit ) ; var tmp ; begin
54624: LD_INT 0
54626: PPUSH
54627: PPUSH
// if not IsInUnit ( unit ) then
54628: LD_VAR 0 1
54632: PPUSH
54633: CALL_OW 310
54637: NOT
54638: IFFALSE 54642
// exit ;
54640: GO 54702
// tmp := IsInUnit ( unit ) ;
54642: LD_ADDR_VAR 0 3
54646: PUSH
54647: LD_VAR 0 1
54651: PPUSH
54652: CALL_OW 310
54656: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54657: LD_VAR 0 3
54661: PPUSH
54662: CALL_OW 247
54666: PUSH
54667: LD_INT 2
54669: EQUAL
54670: IFFALSE 54683
// ComExitVehicle ( unit ) else
54672: LD_VAR 0 1
54676: PPUSH
54677: CALL_OW 121
54681: GO 54692
// ComExitBuilding ( unit ) ;
54683: LD_VAR 0 1
54687: PPUSH
54688: CALL_OW 122
// result := tmp ;
54692: LD_ADDR_VAR 0 2
54696: PUSH
54697: LD_VAR 0 3
54701: ST_TO_ADDR
// end ;
54702: LD_VAR 0 2
54706: RET
// export function ComExitAll ( units ) ; var i ; begin
54707: LD_INT 0
54709: PPUSH
54710: PPUSH
// if not units then
54711: LD_VAR 0 1
54715: NOT
54716: IFFALSE 54720
// exit ;
54718: GO 54746
// for i in units do
54720: LD_ADDR_VAR 0 3
54724: PUSH
54725: LD_VAR 0 1
54729: PUSH
54730: FOR_IN
54731: IFFALSE 54744
// ComExit ( i ) ;
54733: LD_VAR 0 3
54737: PPUSH
54738: CALL 54624 0 1
54742: GO 54730
54744: POP
54745: POP
// end ;
54746: LD_VAR 0 2
54750: RET
// export function ResetHc ; begin
54751: LD_INT 0
54753: PPUSH
// InitHc ;
54754: CALL_OW 19
// hc_importance := 0 ;
54758: LD_ADDR_OWVAR 32
54762: PUSH
54763: LD_INT 0
54765: ST_TO_ADDR
// end ;
54766: LD_VAR 0 1
54770: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54771: LD_INT 0
54773: PPUSH
54774: PPUSH
54775: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54776: LD_ADDR_VAR 0 6
54780: PUSH
54781: LD_VAR 0 1
54785: PUSH
54786: LD_VAR 0 3
54790: PLUS
54791: PUSH
54792: LD_INT 2
54794: DIV
54795: ST_TO_ADDR
// if _x < 0 then
54796: LD_VAR 0 6
54800: PUSH
54801: LD_INT 0
54803: LESS
54804: IFFALSE 54821
// _x := _x * - 1 ;
54806: LD_ADDR_VAR 0 6
54810: PUSH
54811: LD_VAR 0 6
54815: PUSH
54816: LD_INT 1
54818: NEG
54819: MUL
54820: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54821: LD_ADDR_VAR 0 7
54825: PUSH
54826: LD_VAR 0 2
54830: PUSH
54831: LD_VAR 0 4
54835: PLUS
54836: PUSH
54837: LD_INT 2
54839: DIV
54840: ST_TO_ADDR
// if _y < 0 then
54841: LD_VAR 0 7
54845: PUSH
54846: LD_INT 0
54848: LESS
54849: IFFALSE 54866
// _y := _y * - 1 ;
54851: LD_ADDR_VAR 0 7
54855: PUSH
54856: LD_VAR 0 7
54860: PUSH
54861: LD_INT 1
54863: NEG
54864: MUL
54865: ST_TO_ADDR
// result := [ _x , _y ] ;
54866: LD_ADDR_VAR 0 5
54870: PUSH
54871: LD_VAR 0 6
54875: PUSH
54876: LD_VAR 0 7
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: ST_TO_ADDR
// end ;
54885: LD_VAR 0 5
54889: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54890: LD_INT 0
54892: PPUSH
54893: PPUSH
54894: PPUSH
54895: PPUSH
// task := GetTaskList ( unit ) ;
54896: LD_ADDR_VAR 0 7
54900: PUSH
54901: LD_VAR 0 1
54905: PPUSH
54906: CALL_OW 437
54910: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54911: LD_VAR 0 7
54915: NOT
54916: PUSH
54917: LD_VAR 0 1
54921: PPUSH
54922: LD_VAR 0 2
54926: PPUSH
54927: CALL_OW 308
54931: NOT
54932: AND
54933: IFFALSE 54937
// exit ;
54935: GO 55055
// if IsInArea ( unit , area ) then
54937: LD_VAR 0 1
54941: PPUSH
54942: LD_VAR 0 2
54946: PPUSH
54947: CALL_OW 308
54951: IFFALSE 54969
// begin ComMoveToArea ( unit , goAway ) ;
54953: LD_VAR 0 1
54957: PPUSH
54958: LD_VAR 0 3
54962: PPUSH
54963: CALL_OW 113
// exit ;
54967: GO 55055
// end ; if task [ 1 ] [ 1 ] <> M then
54969: LD_VAR 0 7
54973: PUSH
54974: LD_INT 1
54976: ARRAY
54977: PUSH
54978: LD_INT 1
54980: ARRAY
54981: PUSH
54982: LD_STRING M
54984: NONEQUAL
54985: IFFALSE 54989
// exit ;
54987: GO 55055
// x := task [ 1 ] [ 2 ] ;
54989: LD_ADDR_VAR 0 5
54993: PUSH
54994: LD_VAR 0 7
54998: PUSH
54999: LD_INT 1
55001: ARRAY
55002: PUSH
55003: LD_INT 2
55005: ARRAY
55006: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55007: LD_ADDR_VAR 0 6
55011: PUSH
55012: LD_VAR 0 7
55016: PUSH
55017: LD_INT 1
55019: ARRAY
55020: PUSH
55021: LD_INT 3
55023: ARRAY
55024: ST_TO_ADDR
// if InArea ( x , y , area ) then
55025: LD_VAR 0 5
55029: PPUSH
55030: LD_VAR 0 6
55034: PPUSH
55035: LD_VAR 0 2
55039: PPUSH
55040: CALL_OW 309
55044: IFFALSE 55055
// ComStop ( unit ) ;
55046: LD_VAR 0 1
55050: PPUSH
55051: CALL_OW 141
// end ;
55055: LD_VAR 0 4
55059: RET
// export function Abs ( value ) ; begin
55060: LD_INT 0
55062: PPUSH
// result := value ;
55063: LD_ADDR_VAR 0 2
55067: PUSH
55068: LD_VAR 0 1
55072: ST_TO_ADDR
// if value < 0 then
55073: LD_VAR 0 1
55077: PUSH
55078: LD_INT 0
55080: LESS
55081: IFFALSE 55098
// result := value * - 1 ;
55083: LD_ADDR_VAR 0 2
55087: PUSH
55088: LD_VAR 0 1
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: MUL
55097: ST_TO_ADDR
// end ;
55098: LD_VAR 0 2
55102: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55103: LD_INT 0
55105: PPUSH
55106: PPUSH
55107: PPUSH
55108: PPUSH
55109: PPUSH
55110: PPUSH
55111: PPUSH
55112: PPUSH
// if not unit or not building then
55113: LD_VAR 0 1
55117: NOT
55118: PUSH
55119: LD_VAR 0 2
55123: NOT
55124: OR
55125: IFFALSE 55129
// exit ;
55127: GO 55355
// x := GetX ( building ) ;
55129: LD_ADDR_VAR 0 4
55133: PUSH
55134: LD_VAR 0 2
55138: PPUSH
55139: CALL_OW 250
55143: ST_TO_ADDR
// y := GetY ( building ) ;
55144: LD_ADDR_VAR 0 6
55148: PUSH
55149: LD_VAR 0 2
55153: PPUSH
55154: CALL_OW 251
55158: ST_TO_ADDR
// d := GetDir ( building ) ;
55159: LD_ADDR_VAR 0 8
55163: PUSH
55164: LD_VAR 0 2
55168: PPUSH
55169: CALL_OW 254
55173: ST_TO_ADDR
// r := 4 ;
55174: LD_ADDR_VAR 0 9
55178: PUSH
55179: LD_INT 4
55181: ST_TO_ADDR
// for i := 1 to 5 do
55182: LD_ADDR_VAR 0 10
55186: PUSH
55187: DOUBLE
55188: LD_INT 1
55190: DEC
55191: ST_TO_ADDR
55192: LD_INT 5
55194: PUSH
55195: FOR_TO
55196: IFFALSE 55353
// begin _x := ShiftX ( x , d , r + i ) ;
55198: LD_ADDR_VAR 0 5
55202: PUSH
55203: LD_VAR 0 4
55207: PPUSH
55208: LD_VAR 0 8
55212: PPUSH
55213: LD_VAR 0 9
55217: PUSH
55218: LD_VAR 0 10
55222: PLUS
55223: PPUSH
55224: CALL_OW 272
55228: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55229: LD_ADDR_VAR 0 7
55233: PUSH
55234: LD_VAR 0 6
55238: PPUSH
55239: LD_VAR 0 8
55243: PPUSH
55244: LD_VAR 0 9
55248: PUSH
55249: LD_VAR 0 10
55253: PLUS
55254: PPUSH
55255: CALL_OW 273
55259: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55260: LD_VAR 0 5
55264: PPUSH
55265: LD_VAR 0 7
55269: PPUSH
55270: CALL_OW 488
55274: PUSH
55275: LD_VAR 0 5
55279: PPUSH
55280: LD_VAR 0 7
55284: PPUSH
55285: CALL_OW 428
55289: PPUSH
55290: CALL_OW 247
55294: PUSH
55295: LD_INT 3
55297: PUSH
55298: LD_INT 2
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: IN
55305: NOT
55306: AND
55307: IFFALSE 55351
// begin ComMoveXY ( unit , _x , _y ) ;
55309: LD_VAR 0 1
55313: PPUSH
55314: LD_VAR 0 5
55318: PPUSH
55319: LD_VAR 0 7
55323: PPUSH
55324: CALL_OW 111
// result := [ _x , _y ] ;
55328: LD_ADDR_VAR 0 3
55332: PUSH
55333: LD_VAR 0 5
55337: PUSH
55338: LD_VAR 0 7
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: ST_TO_ADDR
// exit ;
55347: POP
55348: POP
55349: GO 55355
// end ; end ;
55351: GO 55195
55353: POP
55354: POP
// end ;
55355: LD_VAR 0 3
55359: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55360: LD_INT 0
55362: PPUSH
55363: PPUSH
55364: PPUSH
// result := 0 ;
55365: LD_ADDR_VAR 0 3
55369: PUSH
55370: LD_INT 0
55372: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55373: LD_VAR 0 1
55377: PUSH
55378: LD_INT 0
55380: LESS
55381: PUSH
55382: LD_VAR 0 1
55386: PUSH
55387: LD_INT 8
55389: GREATER
55390: OR
55391: PUSH
55392: LD_VAR 0 2
55396: PUSH
55397: LD_INT 0
55399: LESS
55400: OR
55401: PUSH
55402: LD_VAR 0 2
55406: PUSH
55407: LD_INT 8
55409: GREATER
55410: OR
55411: IFFALSE 55415
// exit ;
55413: GO 55490
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55415: LD_ADDR_VAR 0 4
55419: PUSH
55420: LD_INT 22
55422: PUSH
55423: LD_VAR 0 2
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PPUSH
55432: CALL_OW 69
55436: PUSH
55437: FOR_IN
55438: IFFALSE 55488
// begin un := UnitShoot ( i ) ;
55440: LD_ADDR_VAR 0 5
55444: PUSH
55445: LD_VAR 0 4
55449: PPUSH
55450: CALL_OW 504
55454: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55455: LD_VAR 0 5
55459: PPUSH
55460: CALL_OW 255
55464: PUSH
55465: LD_VAR 0 1
55469: EQUAL
55470: IFFALSE 55486
// begin result := un ;
55472: LD_ADDR_VAR 0 3
55476: PUSH
55477: LD_VAR 0 5
55481: ST_TO_ADDR
// exit ;
55482: POP
55483: POP
55484: GO 55490
// end ; end ;
55486: GO 55437
55488: POP
55489: POP
// end ;
55490: LD_VAR 0 3
55494: RET
// export function GetCargoBay ( units ) ; begin
55495: LD_INT 0
55497: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55498: LD_ADDR_VAR 0 2
55502: PUSH
55503: LD_VAR 0 1
55507: PPUSH
55508: LD_INT 2
55510: PUSH
55511: LD_INT 34
55513: PUSH
55514: LD_INT 12
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 34
55523: PUSH
55524: LD_INT 51
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 34
55533: PUSH
55534: LD_INT 32
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 34
55543: PUSH
55544: LD_INT 89
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: PPUSH
55558: CALL_OW 72
55562: ST_TO_ADDR
// end ;
55563: LD_VAR 0 2
55567: RET
// export function Negate ( value ) ; begin
55568: LD_INT 0
55570: PPUSH
// result := not value ;
55571: LD_ADDR_VAR 0 2
55575: PUSH
55576: LD_VAR 0 1
55580: NOT
55581: ST_TO_ADDR
// end ;
55582: LD_VAR 0 2
55586: RET
// export function Inc ( value ) ; begin
55587: LD_INT 0
55589: PPUSH
// result := value + 1 ;
55590: LD_ADDR_VAR 0 2
55594: PUSH
55595: LD_VAR 0 1
55599: PUSH
55600: LD_INT 1
55602: PLUS
55603: ST_TO_ADDR
// end ;
55604: LD_VAR 0 2
55608: RET
// export function Dec ( value ) ; begin
55609: LD_INT 0
55611: PPUSH
// result := value - 1 ;
55612: LD_ADDR_VAR 0 2
55616: PUSH
55617: LD_VAR 0 1
55621: PUSH
55622: LD_INT 1
55624: MINUS
55625: ST_TO_ADDR
// end ;
55626: LD_VAR 0 2
55630: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55631: LD_INT 0
55633: PPUSH
55634: PPUSH
55635: PPUSH
55636: PPUSH
55637: PPUSH
55638: PPUSH
55639: PPUSH
55640: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55641: LD_VAR 0 1
55645: PPUSH
55646: LD_VAR 0 2
55650: PPUSH
55651: CALL_OW 488
55655: NOT
55656: PUSH
55657: LD_VAR 0 3
55661: PPUSH
55662: LD_VAR 0 4
55666: PPUSH
55667: CALL_OW 488
55671: NOT
55672: OR
55673: IFFALSE 55686
// begin result := - 1 ;
55675: LD_ADDR_VAR 0 5
55679: PUSH
55680: LD_INT 1
55682: NEG
55683: ST_TO_ADDR
// exit ;
55684: GO 55921
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55686: LD_ADDR_VAR 0 12
55690: PUSH
55691: LD_VAR 0 1
55695: PPUSH
55696: LD_VAR 0 2
55700: PPUSH
55701: LD_VAR 0 3
55705: PPUSH
55706: LD_VAR 0 4
55710: PPUSH
55711: CALL 54771 0 4
55715: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55716: LD_ADDR_VAR 0 11
55720: PUSH
55721: LD_VAR 0 1
55725: PPUSH
55726: LD_VAR 0 2
55730: PPUSH
55731: LD_VAR 0 12
55735: PUSH
55736: LD_INT 1
55738: ARRAY
55739: PPUSH
55740: LD_VAR 0 12
55744: PUSH
55745: LD_INT 2
55747: ARRAY
55748: PPUSH
55749: CALL_OW 298
55753: ST_TO_ADDR
// distance := 9999 ;
55754: LD_ADDR_VAR 0 10
55758: PUSH
55759: LD_INT 9999
55761: ST_TO_ADDR
// for i := 0 to 5 do
55762: LD_ADDR_VAR 0 6
55766: PUSH
55767: DOUBLE
55768: LD_INT 0
55770: DEC
55771: ST_TO_ADDR
55772: LD_INT 5
55774: PUSH
55775: FOR_TO
55776: IFFALSE 55919
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55778: LD_ADDR_VAR 0 7
55782: PUSH
55783: LD_VAR 0 1
55787: PPUSH
55788: LD_VAR 0 6
55792: PPUSH
55793: LD_VAR 0 11
55797: PPUSH
55798: CALL_OW 272
55802: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55803: LD_ADDR_VAR 0 8
55807: PUSH
55808: LD_VAR 0 2
55812: PPUSH
55813: LD_VAR 0 6
55817: PPUSH
55818: LD_VAR 0 11
55822: PPUSH
55823: CALL_OW 273
55827: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55828: LD_VAR 0 7
55832: PPUSH
55833: LD_VAR 0 8
55837: PPUSH
55838: CALL_OW 488
55842: NOT
55843: IFFALSE 55847
// continue ;
55845: GO 55775
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55847: LD_ADDR_VAR 0 9
55851: PUSH
55852: LD_VAR 0 12
55856: PUSH
55857: LD_INT 1
55859: ARRAY
55860: PPUSH
55861: LD_VAR 0 12
55865: PUSH
55866: LD_INT 2
55868: ARRAY
55869: PPUSH
55870: LD_VAR 0 7
55874: PPUSH
55875: LD_VAR 0 8
55879: PPUSH
55880: CALL_OW 298
55884: ST_TO_ADDR
// if tmp < distance then
55885: LD_VAR 0 9
55889: PUSH
55890: LD_VAR 0 10
55894: LESS
55895: IFFALSE 55917
// begin result := i ;
55897: LD_ADDR_VAR 0 5
55901: PUSH
55902: LD_VAR 0 6
55906: ST_TO_ADDR
// distance := tmp ;
55907: LD_ADDR_VAR 0 10
55911: PUSH
55912: LD_VAR 0 9
55916: ST_TO_ADDR
// end ; end ;
55917: GO 55775
55919: POP
55920: POP
// end ;
55921: LD_VAR 0 5
55925: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55926: LD_INT 0
55928: PPUSH
55929: PPUSH
// if not driver or not IsInUnit ( driver ) then
55930: LD_VAR 0 1
55934: NOT
55935: PUSH
55936: LD_VAR 0 1
55940: PPUSH
55941: CALL_OW 310
55945: NOT
55946: OR
55947: IFFALSE 55951
// exit ;
55949: GO 56041
// vehicle := IsInUnit ( driver ) ;
55951: LD_ADDR_VAR 0 3
55955: PUSH
55956: LD_VAR 0 1
55960: PPUSH
55961: CALL_OW 310
55965: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55966: LD_VAR 0 1
55970: PPUSH
55971: LD_STRING \
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: LD_INT 0
55979: PUSH
55980: LD_INT 0
55982: PUSH
55983: LD_INT 0
55985: PUSH
55986: LD_INT 0
55988: PUSH
55989: LD_INT 0
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: PUSH
56001: LD_STRING E
56003: PUSH
56004: LD_INT 0
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: LD_VAR 0 3
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: LD_INT 0
56020: PUSH
56021: LD_INT 0
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PPUSH
56037: CALL_OW 446
// end ;
56041: LD_VAR 0 2
56045: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56046: LD_INT 0
56048: PPUSH
56049: PPUSH
// if not driver or not IsInUnit ( driver ) then
56050: LD_VAR 0 1
56054: NOT
56055: PUSH
56056: LD_VAR 0 1
56060: PPUSH
56061: CALL_OW 310
56065: NOT
56066: OR
56067: IFFALSE 56071
// exit ;
56069: GO 56161
// vehicle := IsInUnit ( driver ) ;
56071: LD_ADDR_VAR 0 3
56075: PUSH
56076: LD_VAR 0 1
56080: PPUSH
56081: CALL_OW 310
56085: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56086: LD_VAR 0 1
56090: PPUSH
56091: LD_STRING \
56093: PUSH
56094: LD_INT 0
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: LD_INT 0
56102: PUSH
56103: LD_INT 0
56105: PUSH
56106: LD_INT 0
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: PUSH
56121: LD_STRING E
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: LD_VAR 0 3
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PPUSH
56157: CALL_OW 447
// end ;
56161: LD_VAR 0 2
56165: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56166: LD_INT 0
56168: PPUSH
56169: PPUSH
56170: PPUSH
// tmp := [ ] ;
56171: LD_ADDR_VAR 0 5
56175: PUSH
56176: EMPTY
56177: ST_TO_ADDR
// for i in units do
56178: LD_ADDR_VAR 0 4
56182: PUSH
56183: LD_VAR 0 1
56187: PUSH
56188: FOR_IN
56189: IFFALSE 56227
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56191: LD_ADDR_VAR 0 5
56195: PUSH
56196: LD_VAR 0 5
56200: PPUSH
56201: LD_VAR 0 5
56205: PUSH
56206: LD_INT 1
56208: PLUS
56209: PPUSH
56210: LD_VAR 0 4
56214: PPUSH
56215: CALL_OW 256
56219: PPUSH
56220: CALL_OW 2
56224: ST_TO_ADDR
56225: GO 56188
56227: POP
56228: POP
// if not tmp then
56229: LD_VAR 0 5
56233: NOT
56234: IFFALSE 56238
// exit ;
56236: GO 56286
// if asc then
56238: LD_VAR 0 2
56242: IFFALSE 56266
// result := SortListByListAsc ( units , tmp ) else
56244: LD_ADDR_VAR 0 3
56248: PUSH
56249: LD_VAR 0 1
56253: PPUSH
56254: LD_VAR 0 5
56258: PPUSH
56259: CALL_OW 76
56263: ST_TO_ADDR
56264: GO 56286
// result := SortListByListDesc ( units , tmp ) ;
56266: LD_ADDR_VAR 0 3
56270: PUSH
56271: LD_VAR 0 1
56275: PPUSH
56276: LD_VAR 0 5
56280: PPUSH
56281: CALL_OW 77
56285: ST_TO_ADDR
// end ;
56286: LD_VAR 0 3
56290: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56291: LD_INT 0
56293: PPUSH
56294: PPUSH
// task := GetTaskList ( mech ) ;
56295: LD_ADDR_VAR 0 4
56299: PUSH
56300: LD_VAR 0 1
56304: PPUSH
56305: CALL_OW 437
56309: ST_TO_ADDR
// if not task then
56310: LD_VAR 0 4
56314: NOT
56315: IFFALSE 56319
// exit ;
56317: GO 56361
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56319: LD_ADDR_VAR 0 3
56323: PUSH
56324: LD_VAR 0 4
56328: PUSH
56329: LD_INT 1
56331: ARRAY
56332: PUSH
56333: LD_INT 1
56335: ARRAY
56336: PUSH
56337: LD_STRING r
56339: EQUAL
56340: PUSH
56341: LD_VAR 0 4
56345: PUSH
56346: LD_INT 1
56348: ARRAY
56349: PUSH
56350: LD_INT 4
56352: ARRAY
56353: PUSH
56354: LD_VAR 0 2
56358: EQUAL
56359: AND
56360: ST_TO_ADDR
// end ;
56361: LD_VAR 0 3
56365: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56366: LD_INT 0
56368: PPUSH
// SetDir ( unit , d ) ;
56369: LD_VAR 0 1
56373: PPUSH
56374: LD_VAR 0 4
56378: PPUSH
56379: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
56383: LD_VAR 0 1
56387: PPUSH
56388: LD_VAR 0 2
56392: PPUSH
56393: LD_VAR 0 3
56397: PPUSH
56398: LD_VAR 0 5
56402: PPUSH
56403: CALL_OW 48
// end ;
56407: LD_VAR 0 6
56411: RET
// export function ToNaturalNumber ( number ) ; begin
56412: LD_INT 0
56414: PPUSH
// result := number div 1 ;
56415: LD_ADDR_VAR 0 2
56419: PUSH
56420: LD_VAR 0 1
56424: PUSH
56425: LD_INT 1
56427: DIV
56428: ST_TO_ADDR
// if number < 0 then
56429: LD_VAR 0 1
56433: PUSH
56434: LD_INT 0
56436: LESS
56437: IFFALSE 56447
// result := 0 ;
56439: LD_ADDR_VAR 0 2
56443: PUSH
56444: LD_INT 0
56446: ST_TO_ADDR
// end ;
56447: LD_VAR 0 2
56451: RET
// export function SortByClass ( units , class ) ; var un ; begin
56452: LD_INT 0
56454: PPUSH
56455: PPUSH
// if not units or not class then
56456: LD_VAR 0 1
56460: NOT
56461: PUSH
56462: LD_VAR 0 2
56466: NOT
56467: OR
56468: IFFALSE 56472
// exit ;
56470: GO 56567
// result := [ ] ;
56472: LD_ADDR_VAR 0 3
56476: PUSH
56477: EMPTY
56478: ST_TO_ADDR
// for un in units do
56479: LD_ADDR_VAR 0 4
56483: PUSH
56484: LD_VAR 0 1
56488: PUSH
56489: FOR_IN
56490: IFFALSE 56565
// if GetClass ( un ) = class then
56492: LD_VAR 0 4
56496: PPUSH
56497: CALL_OW 257
56501: PUSH
56502: LD_VAR 0 2
56506: EQUAL
56507: IFFALSE 56534
// result := Insert ( result , 1 , un ) else
56509: LD_ADDR_VAR 0 3
56513: PUSH
56514: LD_VAR 0 3
56518: PPUSH
56519: LD_INT 1
56521: PPUSH
56522: LD_VAR 0 4
56526: PPUSH
56527: CALL_OW 2
56531: ST_TO_ADDR
56532: GO 56563
// result := Replace ( result , result + 1 , un ) ;
56534: LD_ADDR_VAR 0 3
56538: PUSH
56539: LD_VAR 0 3
56543: PPUSH
56544: LD_VAR 0 3
56548: PUSH
56549: LD_INT 1
56551: PLUS
56552: PPUSH
56553: LD_VAR 0 4
56557: PPUSH
56558: CALL_OW 1
56562: ST_TO_ADDR
56563: GO 56489
56565: POP
56566: POP
// end ;
56567: LD_VAR 0 3
56571: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56572: LD_INT 0
56574: PPUSH
56575: PPUSH
56576: PPUSH
56577: PPUSH
56578: PPUSH
56579: PPUSH
56580: PPUSH
// result := [ ] ;
56581: LD_ADDR_VAR 0 4
56585: PUSH
56586: EMPTY
56587: ST_TO_ADDR
// if x - r < 0 then
56588: LD_VAR 0 1
56592: PUSH
56593: LD_VAR 0 3
56597: MINUS
56598: PUSH
56599: LD_INT 0
56601: LESS
56602: IFFALSE 56614
// min_x := 0 else
56604: LD_ADDR_VAR 0 8
56608: PUSH
56609: LD_INT 0
56611: ST_TO_ADDR
56612: GO 56630
// min_x := x - r ;
56614: LD_ADDR_VAR 0 8
56618: PUSH
56619: LD_VAR 0 1
56623: PUSH
56624: LD_VAR 0 3
56628: MINUS
56629: ST_TO_ADDR
// if y - r < 0 then
56630: LD_VAR 0 2
56634: PUSH
56635: LD_VAR 0 3
56639: MINUS
56640: PUSH
56641: LD_INT 0
56643: LESS
56644: IFFALSE 56656
// min_y := 0 else
56646: LD_ADDR_VAR 0 7
56650: PUSH
56651: LD_INT 0
56653: ST_TO_ADDR
56654: GO 56672
// min_y := y - r ;
56656: LD_ADDR_VAR 0 7
56660: PUSH
56661: LD_VAR 0 2
56665: PUSH
56666: LD_VAR 0 3
56670: MINUS
56671: ST_TO_ADDR
// max_x := x + r ;
56672: LD_ADDR_VAR 0 9
56676: PUSH
56677: LD_VAR 0 1
56681: PUSH
56682: LD_VAR 0 3
56686: PLUS
56687: ST_TO_ADDR
// max_y := y + r ;
56688: LD_ADDR_VAR 0 10
56692: PUSH
56693: LD_VAR 0 2
56697: PUSH
56698: LD_VAR 0 3
56702: PLUS
56703: ST_TO_ADDR
// for _x = min_x to max_x do
56704: LD_ADDR_VAR 0 5
56708: PUSH
56709: DOUBLE
56710: LD_VAR 0 8
56714: DEC
56715: ST_TO_ADDR
56716: LD_VAR 0 9
56720: PUSH
56721: FOR_TO
56722: IFFALSE 56823
// for _y = min_y to max_y do
56724: LD_ADDR_VAR 0 6
56728: PUSH
56729: DOUBLE
56730: LD_VAR 0 7
56734: DEC
56735: ST_TO_ADDR
56736: LD_VAR 0 10
56740: PUSH
56741: FOR_TO
56742: IFFALSE 56819
// begin if not ValidHex ( _x , _y ) then
56744: LD_VAR 0 5
56748: PPUSH
56749: LD_VAR 0 6
56753: PPUSH
56754: CALL_OW 488
56758: NOT
56759: IFFALSE 56763
// continue ;
56761: GO 56741
// if GetResourceTypeXY ( _x , _y ) then
56763: LD_VAR 0 5
56767: PPUSH
56768: LD_VAR 0 6
56772: PPUSH
56773: CALL_OW 283
56777: IFFALSE 56817
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56779: LD_ADDR_VAR 0 4
56783: PUSH
56784: LD_VAR 0 4
56788: PPUSH
56789: LD_VAR 0 4
56793: PUSH
56794: LD_INT 1
56796: PLUS
56797: PPUSH
56798: LD_VAR 0 5
56802: PUSH
56803: LD_VAR 0 6
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PPUSH
56812: CALL_OW 1
56816: ST_TO_ADDR
// end ;
56817: GO 56741
56819: POP
56820: POP
56821: GO 56721
56823: POP
56824: POP
// end ;
56825: LD_VAR 0 4
56829: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56830: LD_INT 0
56832: PPUSH
56833: PPUSH
56834: PPUSH
56835: PPUSH
56836: PPUSH
56837: PPUSH
56838: PPUSH
56839: PPUSH
// if not units then
56840: LD_VAR 0 1
56844: NOT
56845: IFFALSE 56849
// exit ;
56847: GO 57373
// result := UnitFilter ( units , [ f_ok ] ) ;
56849: LD_ADDR_VAR 0 3
56853: PUSH
56854: LD_VAR 0 1
56858: PPUSH
56859: LD_INT 50
56861: PUSH
56862: EMPTY
56863: LIST
56864: PPUSH
56865: CALL_OW 72
56869: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56870: LD_ADDR_VAR 0 8
56874: PUSH
56875: LD_VAR 0 1
56879: PUSH
56880: LD_INT 1
56882: ARRAY
56883: PPUSH
56884: CALL_OW 255
56888: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
56889: LD_ADDR_VAR 0 10
56893: PUSH
56894: LD_INT 29
56896: PUSH
56897: LD_INT 91
56899: PUSH
56900: LD_INT 49
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: LIST
56907: ST_TO_ADDR
// if not result then
56908: LD_VAR 0 3
56912: NOT
56913: IFFALSE 56917
// exit ;
56915: GO 57373
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56917: LD_ADDR_VAR 0 5
56921: PUSH
56922: LD_INT 81
56924: PUSH
56925: LD_VAR 0 8
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PPUSH
56934: CALL_OW 69
56938: ST_TO_ADDR
// for i in result do
56939: LD_ADDR_VAR 0 4
56943: PUSH
56944: LD_VAR 0 3
56948: PUSH
56949: FOR_IN
56950: IFFALSE 57371
// begin tag := GetTag ( i ) + 1 ;
56952: LD_ADDR_VAR 0 9
56956: PUSH
56957: LD_VAR 0 4
56961: PPUSH
56962: CALL_OW 110
56966: PUSH
56967: LD_INT 1
56969: PLUS
56970: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
56971: LD_ADDR_VAR 0 7
56975: PUSH
56976: LD_VAR 0 4
56980: PPUSH
56981: CALL_OW 250
56985: PPUSH
56986: LD_VAR 0 4
56990: PPUSH
56991: CALL_OW 251
56995: PPUSH
56996: LD_INT 6
56998: PPUSH
56999: CALL 56572 0 3
57003: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
57004: LD_VAR 0 4
57008: PPUSH
57009: CALL_OW 247
57013: PUSH
57014: LD_INT 2
57016: EQUAL
57017: PUSH
57018: LD_VAR 0 7
57022: AND
57023: PUSH
57024: LD_VAR 0 4
57028: PPUSH
57029: CALL_OW 264
57033: PUSH
57034: LD_VAR 0 10
57038: IN
57039: NOT
57040: AND
57041: IFFALSE 57080
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57043: LD_VAR 0 4
57047: PPUSH
57048: LD_VAR 0 7
57052: PUSH
57053: LD_INT 1
57055: ARRAY
57056: PUSH
57057: LD_INT 1
57059: ARRAY
57060: PPUSH
57061: LD_VAR 0 7
57065: PUSH
57066: LD_INT 1
57068: ARRAY
57069: PUSH
57070: LD_INT 2
57072: ARRAY
57073: PPUSH
57074: CALL_OW 116
57078: GO 57369
// if path > tag then
57080: LD_VAR 0 2
57084: PUSH
57085: LD_VAR 0 9
57089: GREATER
57090: IFFALSE 57298
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
57092: LD_ADDR_VAR 0 6
57096: PUSH
57097: LD_VAR 0 5
57101: PPUSH
57102: LD_INT 91
57104: PUSH
57105: LD_VAR 0 4
57109: PUSH
57110: LD_INT 8
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: LIST
57117: PPUSH
57118: CALL_OW 72
57122: ST_TO_ADDR
// if nearEnemy then
57123: LD_VAR 0 6
57127: IFFALSE 57196
// begin if GetWeapon ( i ) = ru_time_lapser then
57129: LD_VAR 0 4
57133: PPUSH
57134: CALL_OW 264
57138: PUSH
57139: LD_INT 49
57141: EQUAL
57142: IFFALSE 57170
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57144: LD_VAR 0 4
57148: PPUSH
57149: LD_VAR 0 6
57153: PPUSH
57154: LD_VAR 0 4
57158: PPUSH
57159: CALL_OW 74
57163: PPUSH
57164: CALL_OW 112
57168: GO 57194
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57170: LD_VAR 0 4
57174: PPUSH
57175: LD_VAR 0 6
57179: PPUSH
57180: LD_VAR 0 4
57184: PPUSH
57185: CALL_OW 74
57189: PPUSH
57190: CALL 58444 0 2
// end else
57194: GO 57296
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57196: LD_VAR 0 4
57200: PPUSH
57201: LD_VAR 0 2
57205: PUSH
57206: LD_VAR 0 9
57210: ARRAY
57211: PUSH
57212: LD_INT 1
57214: ARRAY
57215: PPUSH
57216: LD_VAR 0 2
57220: PUSH
57221: LD_VAR 0 9
57225: ARRAY
57226: PUSH
57227: LD_INT 2
57229: ARRAY
57230: PPUSH
57231: CALL_OW 297
57235: PUSH
57236: LD_INT 6
57238: GREATER
57239: IFFALSE 57282
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57241: LD_VAR 0 4
57245: PPUSH
57246: LD_VAR 0 2
57250: PUSH
57251: LD_VAR 0 9
57255: ARRAY
57256: PUSH
57257: LD_INT 1
57259: ARRAY
57260: PPUSH
57261: LD_VAR 0 2
57265: PUSH
57266: LD_VAR 0 9
57270: ARRAY
57271: PUSH
57272: LD_INT 2
57274: ARRAY
57275: PPUSH
57276: CALL_OW 114
57280: GO 57296
// SetTag ( i , tag ) ;
57282: LD_VAR 0 4
57286: PPUSH
57287: LD_VAR 0 9
57291: PPUSH
57292: CALL_OW 109
// end else
57296: GO 57369
// if enemy then
57298: LD_VAR 0 5
57302: IFFALSE 57369
// begin if GetWeapon ( i ) = ru_time_lapser then
57304: LD_VAR 0 4
57308: PPUSH
57309: CALL_OW 264
57313: PUSH
57314: LD_INT 49
57316: EQUAL
57317: IFFALSE 57345
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57319: LD_VAR 0 4
57323: PPUSH
57324: LD_VAR 0 5
57328: PPUSH
57329: LD_VAR 0 4
57333: PPUSH
57334: CALL_OW 74
57338: PPUSH
57339: CALL_OW 112
57343: GO 57369
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57345: LD_VAR 0 4
57349: PPUSH
57350: LD_VAR 0 5
57354: PPUSH
57355: LD_VAR 0 4
57359: PPUSH
57360: CALL_OW 74
57364: PPUSH
57365: CALL 58444 0 2
// end ; end ;
57369: GO 56949
57371: POP
57372: POP
// end ;
57373: LD_VAR 0 3
57377: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57378: LD_INT 0
57380: PPUSH
57381: PPUSH
57382: PPUSH
// if not unit or IsInUnit ( unit ) then
57383: LD_VAR 0 1
57387: NOT
57388: PUSH
57389: LD_VAR 0 1
57393: PPUSH
57394: CALL_OW 310
57398: OR
57399: IFFALSE 57403
// exit ;
57401: GO 57494
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57403: LD_ADDR_VAR 0 4
57407: PUSH
57408: LD_VAR 0 1
57412: PPUSH
57413: CALL_OW 250
57417: PPUSH
57418: LD_VAR 0 2
57422: PPUSH
57423: LD_INT 1
57425: PPUSH
57426: CALL_OW 272
57430: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57431: LD_ADDR_VAR 0 5
57435: PUSH
57436: LD_VAR 0 1
57440: PPUSH
57441: CALL_OW 251
57445: PPUSH
57446: LD_VAR 0 2
57450: PPUSH
57451: LD_INT 1
57453: PPUSH
57454: CALL_OW 273
57458: ST_TO_ADDR
// if ValidHex ( x , y ) then
57459: LD_VAR 0 4
57463: PPUSH
57464: LD_VAR 0 5
57468: PPUSH
57469: CALL_OW 488
57473: IFFALSE 57494
// ComTurnXY ( unit , x , y ) ;
57475: LD_VAR 0 1
57479: PPUSH
57480: LD_VAR 0 4
57484: PPUSH
57485: LD_VAR 0 5
57489: PPUSH
57490: CALL_OW 118
// end ;
57494: LD_VAR 0 3
57498: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57499: LD_INT 0
57501: PPUSH
57502: PPUSH
// result := false ;
57503: LD_ADDR_VAR 0 3
57507: PUSH
57508: LD_INT 0
57510: ST_TO_ADDR
// if not units then
57511: LD_VAR 0 2
57515: NOT
57516: IFFALSE 57520
// exit ;
57518: GO 57565
// for i in units do
57520: LD_ADDR_VAR 0 4
57524: PUSH
57525: LD_VAR 0 2
57529: PUSH
57530: FOR_IN
57531: IFFALSE 57563
// if See ( side , i ) then
57533: LD_VAR 0 1
57537: PPUSH
57538: LD_VAR 0 4
57542: PPUSH
57543: CALL_OW 292
57547: IFFALSE 57561
// begin result := true ;
57549: LD_ADDR_VAR 0 3
57553: PUSH
57554: LD_INT 1
57556: ST_TO_ADDR
// exit ;
57557: POP
57558: POP
57559: GO 57565
// end ;
57561: GO 57530
57563: POP
57564: POP
// end ;
57565: LD_VAR 0 3
57569: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57570: LD_INT 0
57572: PPUSH
57573: PPUSH
57574: PPUSH
57575: PPUSH
// if not unit or not points then
57576: LD_VAR 0 1
57580: NOT
57581: PUSH
57582: LD_VAR 0 2
57586: NOT
57587: OR
57588: IFFALSE 57592
// exit ;
57590: GO 57682
// dist := 99999 ;
57592: LD_ADDR_VAR 0 5
57596: PUSH
57597: LD_INT 99999
57599: ST_TO_ADDR
// for i in points do
57600: LD_ADDR_VAR 0 4
57604: PUSH
57605: LD_VAR 0 2
57609: PUSH
57610: FOR_IN
57611: IFFALSE 57680
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57613: LD_ADDR_VAR 0 6
57617: PUSH
57618: LD_VAR 0 1
57622: PPUSH
57623: LD_VAR 0 4
57627: PUSH
57628: LD_INT 1
57630: ARRAY
57631: PPUSH
57632: LD_VAR 0 4
57636: PUSH
57637: LD_INT 2
57639: ARRAY
57640: PPUSH
57641: CALL_OW 297
57645: ST_TO_ADDR
// if tmpDist < dist then
57646: LD_VAR 0 6
57650: PUSH
57651: LD_VAR 0 5
57655: LESS
57656: IFFALSE 57678
// begin result := i ;
57658: LD_ADDR_VAR 0 3
57662: PUSH
57663: LD_VAR 0 4
57667: ST_TO_ADDR
// dist := tmpDist ;
57668: LD_ADDR_VAR 0 5
57672: PUSH
57673: LD_VAR 0 6
57677: ST_TO_ADDR
// end ; end ;
57678: GO 57610
57680: POP
57681: POP
// end ;
57682: LD_VAR 0 3
57686: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57687: LD_INT 0
57689: PPUSH
// uc_side := side ;
57690: LD_ADDR_OWVAR 20
57694: PUSH
57695: LD_VAR 0 1
57699: ST_TO_ADDR
// uc_nation := 3 ;
57700: LD_ADDR_OWVAR 21
57704: PUSH
57705: LD_INT 3
57707: ST_TO_ADDR
// vc_chassis := 25 ;
57708: LD_ADDR_OWVAR 37
57712: PUSH
57713: LD_INT 25
57715: ST_TO_ADDR
// vc_engine := engine_siberite ;
57716: LD_ADDR_OWVAR 39
57720: PUSH
57721: LD_INT 3
57723: ST_TO_ADDR
// vc_control := control_computer ;
57724: LD_ADDR_OWVAR 38
57728: PUSH
57729: LD_INT 3
57731: ST_TO_ADDR
// vc_weapon := 59 ;
57732: LD_ADDR_OWVAR 40
57736: PUSH
57737: LD_INT 59
57739: ST_TO_ADDR
// result := CreateVehicle ;
57740: LD_ADDR_VAR 0 5
57744: PUSH
57745: CALL_OW 45
57749: ST_TO_ADDR
// SetDir ( result , d ) ;
57750: LD_VAR 0 5
57754: PPUSH
57755: LD_VAR 0 4
57759: PPUSH
57760: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57764: LD_VAR 0 5
57768: PPUSH
57769: LD_VAR 0 2
57773: PPUSH
57774: LD_VAR 0 3
57778: PPUSH
57779: LD_INT 0
57781: PPUSH
57782: CALL_OW 48
// end ;
57786: LD_VAR 0 5
57790: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57791: LD_INT 0
57793: PPUSH
57794: PPUSH
57795: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57796: LD_ADDR_VAR 0 2
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: LD_INT 0
57806: PUSH
57807: LD_INT 0
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57819: LD_VAR 0 1
57823: NOT
57824: PUSH
57825: LD_VAR 0 1
57829: PPUSH
57830: CALL_OW 264
57834: PUSH
57835: LD_INT 12
57837: PUSH
57838: LD_INT 51
57840: PUSH
57841: LD_INT 32
57843: PUSH
57844: LD_INT 89
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: IN
57853: NOT
57854: OR
57855: IFFALSE 57859
// exit ;
57857: GO 57957
// for i := 1 to 3 do
57859: LD_ADDR_VAR 0 3
57863: PUSH
57864: DOUBLE
57865: LD_INT 1
57867: DEC
57868: ST_TO_ADDR
57869: LD_INT 3
57871: PUSH
57872: FOR_TO
57873: IFFALSE 57955
// begin tmp := GetCargo ( cargo , i ) ;
57875: LD_ADDR_VAR 0 4
57879: PUSH
57880: LD_VAR 0 1
57884: PPUSH
57885: LD_VAR 0 3
57889: PPUSH
57890: CALL_OW 289
57894: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
57895: LD_ADDR_VAR 0 2
57899: PUSH
57900: LD_VAR 0 2
57904: PPUSH
57905: LD_VAR 0 3
57909: PPUSH
57910: LD_VAR 0 4
57914: PPUSH
57915: CALL_OW 1
57919: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
57920: LD_ADDR_VAR 0 2
57924: PUSH
57925: LD_VAR 0 2
57929: PPUSH
57930: LD_INT 4
57932: PPUSH
57933: LD_VAR 0 2
57937: PUSH
57938: LD_INT 4
57940: ARRAY
57941: PUSH
57942: LD_VAR 0 4
57946: PLUS
57947: PPUSH
57948: CALL_OW 1
57952: ST_TO_ADDR
// end ;
57953: GO 57872
57955: POP
57956: POP
// end ;
57957: LD_VAR 0 2
57961: RET
// export function Length ( array ) ; begin
57962: LD_INT 0
57964: PPUSH
// result := array + 0 ;
57965: LD_ADDR_VAR 0 2
57969: PUSH
57970: LD_VAR 0 1
57974: PUSH
57975: LD_INT 0
57977: PLUS
57978: ST_TO_ADDR
// end ;
57979: LD_VAR 0 2
57983: RET
// export function PrepareArray ( array ) ; begin
57984: LD_INT 0
57986: PPUSH
// result := array diff 0 ;
57987: LD_ADDR_VAR 0 2
57991: PUSH
57992: LD_VAR 0 1
57996: PUSH
57997: LD_INT 0
57999: DIFF
58000: ST_TO_ADDR
// if not result [ 1 ] then
58001: LD_VAR 0 2
58005: PUSH
58006: LD_INT 1
58008: ARRAY
58009: NOT
58010: IFFALSE 58030
// result := Delete ( result , 1 ) ;
58012: LD_ADDR_VAR 0 2
58016: PUSH
58017: LD_VAR 0 2
58021: PPUSH
58022: LD_INT 1
58024: PPUSH
58025: CALL_OW 3
58029: ST_TO_ADDR
// end ;
58030: LD_VAR 0 2
58034: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
58035: LD_INT 0
58037: PPUSH
58038: PPUSH
58039: PPUSH
58040: PPUSH
// sibRocketRange := 25 ;
58041: LD_ADDR_VAR 0 6
58045: PUSH
58046: LD_INT 25
58048: ST_TO_ADDR
// result := false ;
58049: LD_ADDR_VAR 0 4
58053: PUSH
58054: LD_INT 0
58056: ST_TO_ADDR
// for i := 0 to 5 do
58057: LD_ADDR_VAR 0 5
58061: PUSH
58062: DOUBLE
58063: LD_INT 0
58065: DEC
58066: ST_TO_ADDR
58067: LD_INT 5
58069: PUSH
58070: FOR_TO
58071: IFFALSE 58138
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
58073: LD_VAR 0 1
58077: PPUSH
58078: LD_VAR 0 5
58082: PPUSH
58083: LD_VAR 0 6
58087: PPUSH
58088: CALL_OW 272
58092: PPUSH
58093: LD_VAR 0 2
58097: PPUSH
58098: LD_VAR 0 5
58102: PPUSH
58103: LD_VAR 0 6
58107: PPUSH
58108: CALL_OW 273
58112: PPUSH
58113: LD_VAR 0 3
58117: PPUSH
58118: CALL_OW 309
58122: IFFALSE 58136
// begin result := true ;
58124: LD_ADDR_VAR 0 4
58128: PUSH
58129: LD_INT 1
58131: ST_TO_ADDR
// exit ;
58132: POP
58133: POP
58134: GO 58140
// end ;
58136: GO 58070
58138: POP
58139: POP
// end ;
58140: LD_VAR 0 4
58144: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
58145: LD_INT 0
58147: PPUSH
58148: PPUSH
58149: PPUSH
// if btype = b_depot then
58150: LD_VAR 0 2
58154: PUSH
58155: LD_INT 0
58157: EQUAL
58158: IFFALSE 58170
// begin result := true ;
58160: LD_ADDR_VAR 0 3
58164: PUSH
58165: LD_INT 1
58167: ST_TO_ADDR
// exit ;
58168: GO 58286
// end ; pom := GetBase ( depot ) ;
58170: LD_ADDR_VAR 0 4
58174: PUSH
58175: LD_VAR 0 1
58179: PPUSH
58180: CALL_OW 274
58184: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
58185: LD_ADDR_VAR 0 5
58189: PUSH
58190: LD_VAR 0 2
58194: PPUSH
58195: LD_VAR 0 1
58199: PPUSH
58200: CALL_OW 248
58204: PPUSH
58205: CALL_OW 450
58209: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
58210: LD_ADDR_VAR 0 3
58214: PUSH
58215: LD_VAR 0 4
58219: PPUSH
58220: LD_INT 1
58222: PPUSH
58223: CALL_OW 275
58227: PUSH
58228: LD_VAR 0 5
58232: PUSH
58233: LD_INT 1
58235: ARRAY
58236: GREATEREQUAL
58237: PUSH
58238: LD_VAR 0 4
58242: PPUSH
58243: LD_INT 2
58245: PPUSH
58246: CALL_OW 275
58250: PUSH
58251: LD_VAR 0 5
58255: PUSH
58256: LD_INT 2
58258: ARRAY
58259: GREATEREQUAL
58260: AND
58261: PUSH
58262: LD_VAR 0 4
58266: PPUSH
58267: LD_INT 3
58269: PPUSH
58270: CALL_OW 275
58274: PUSH
58275: LD_VAR 0 5
58279: PUSH
58280: LD_INT 3
58282: ARRAY
58283: GREATEREQUAL
58284: AND
58285: ST_TO_ADDR
// end ;
58286: LD_VAR 0 3
58290: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58291: LD_INT 0
58293: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58294: LD_VAR 0 1
58298: PPUSH
58299: LD_VAR 0 2
58303: PPUSH
58304: LD_INT 0
58306: PPUSH
58307: LD_INT 0
58309: PPUSH
58310: LD_INT 1
58312: PPUSH
58313: LD_INT 0
58315: PPUSH
58316: CALL_OW 587
// end ;
58320: LD_VAR 0 3
58324: RET
// export function CenterOnNow ( unit ) ; begin
58325: LD_INT 0
58327: PPUSH
// result := IsInUnit ( unit ) ;
58328: LD_ADDR_VAR 0 2
58332: PUSH
58333: LD_VAR 0 1
58337: PPUSH
58338: CALL_OW 310
58342: ST_TO_ADDR
// if not result then
58343: LD_VAR 0 2
58347: NOT
58348: IFFALSE 58360
// result := unit ;
58350: LD_ADDR_VAR 0 2
58354: PUSH
58355: LD_VAR 0 1
58359: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58360: LD_VAR 0 1
58364: PPUSH
58365: CALL_OW 87
// end ;
58369: LD_VAR 0 2
58373: RET
// export function ComMoveHex ( unit , hex ) ; begin
58374: LD_INT 0
58376: PPUSH
// if not hex then
58377: LD_VAR 0 2
58381: NOT
58382: IFFALSE 58386
// exit ;
58384: GO 58439
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58386: LD_VAR 0 2
58390: PUSH
58391: LD_INT 1
58393: ARRAY
58394: PPUSH
58395: LD_VAR 0 2
58399: PUSH
58400: LD_INT 2
58402: ARRAY
58403: PPUSH
58404: CALL_OW 428
58408: IFFALSE 58412
// exit ;
58410: GO 58439
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58412: LD_VAR 0 1
58416: PPUSH
58417: LD_VAR 0 2
58421: PUSH
58422: LD_INT 1
58424: ARRAY
58425: PPUSH
58426: LD_VAR 0 2
58430: PUSH
58431: LD_INT 2
58433: ARRAY
58434: PPUSH
58435: CALL_OW 111
// end ;
58439: LD_VAR 0 3
58443: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58444: LD_INT 0
58446: PPUSH
58447: PPUSH
58448: PPUSH
// if not unit or not enemy then
58449: LD_VAR 0 1
58453: NOT
58454: PUSH
58455: LD_VAR 0 2
58459: NOT
58460: OR
58461: IFFALSE 58465
// exit ;
58463: GO 58589
// x := GetX ( enemy ) ;
58465: LD_ADDR_VAR 0 4
58469: PUSH
58470: LD_VAR 0 2
58474: PPUSH
58475: CALL_OW 250
58479: ST_TO_ADDR
// y := GetY ( enemy ) ;
58480: LD_ADDR_VAR 0 5
58484: PUSH
58485: LD_VAR 0 2
58489: PPUSH
58490: CALL_OW 251
58494: ST_TO_ADDR
// if ValidHex ( x , y ) then
58495: LD_VAR 0 4
58499: PPUSH
58500: LD_VAR 0 5
58504: PPUSH
58505: CALL_OW 488
58509: IFFALSE 58589
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
58511: LD_VAR 0 2
58515: PPUSH
58516: CALL_OW 247
58520: PUSH
58521: LD_INT 3
58523: PUSH
58524: LD_INT 2
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: IN
58531: PUSH
58532: LD_VAR 0 1
58536: PPUSH
58537: CALL_OW 255
58541: PPUSH
58542: LD_VAR 0 2
58546: PPUSH
58547: CALL_OW 292
58551: OR
58552: IFFALSE 58570
// ComAttackUnit ( unit , enemy ) else
58554: LD_VAR 0 1
58558: PPUSH
58559: LD_VAR 0 2
58563: PPUSH
58564: CALL_OW 115
58568: GO 58589
// ComAgressiveMove ( unit , x , y ) ;
58570: LD_VAR 0 1
58574: PPUSH
58575: LD_VAR 0 4
58579: PPUSH
58580: LD_VAR 0 5
58584: PPUSH
58585: CALL_OW 114
// end ;
58589: LD_VAR 0 3
58593: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58594: LD_INT 0
58596: PPUSH
58597: PPUSH
58598: PPUSH
// list := AreaToList ( area , 0 ) ;
58599: LD_ADDR_VAR 0 5
58603: PUSH
58604: LD_VAR 0 1
58608: PPUSH
58609: LD_INT 0
58611: PPUSH
58612: CALL_OW 517
58616: ST_TO_ADDR
// if not list then
58617: LD_VAR 0 5
58621: NOT
58622: IFFALSE 58626
// exit ;
58624: GO 58756
// if all then
58626: LD_VAR 0 2
58630: IFFALSE 58718
// begin for i := 1 to list [ 1 ] do
58632: LD_ADDR_VAR 0 4
58636: PUSH
58637: DOUBLE
58638: LD_INT 1
58640: DEC
58641: ST_TO_ADDR
58642: LD_VAR 0 5
58646: PUSH
58647: LD_INT 1
58649: ARRAY
58650: PUSH
58651: FOR_TO
58652: IFFALSE 58714
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58654: LD_ADDR_VAR 0 3
58658: PUSH
58659: LD_VAR 0 3
58663: PPUSH
58664: LD_VAR 0 3
58668: PUSH
58669: LD_INT 1
58671: PLUS
58672: PPUSH
58673: LD_VAR 0 5
58677: PUSH
58678: LD_INT 1
58680: ARRAY
58681: PUSH
58682: LD_VAR 0 4
58686: ARRAY
58687: PUSH
58688: LD_VAR 0 5
58692: PUSH
58693: LD_INT 2
58695: ARRAY
58696: PUSH
58697: LD_VAR 0 4
58701: ARRAY
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PPUSH
58707: CALL_OW 1
58711: ST_TO_ADDR
58712: GO 58651
58714: POP
58715: POP
// exit ;
58716: GO 58756
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
58718: LD_ADDR_VAR 0 3
58722: PUSH
58723: LD_VAR 0 5
58727: PUSH
58728: LD_INT 1
58730: ARRAY
58731: PUSH
58732: LD_INT 1
58734: ARRAY
58735: PUSH
58736: LD_VAR 0 5
58740: PUSH
58741: LD_INT 2
58743: ARRAY
58744: PUSH
58745: LD_INT 1
58747: ARRAY
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: EMPTY
58754: LIST
58755: ST_TO_ADDR
// end ;
58756: LD_VAR 0 3
58760: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
58761: LD_INT 0
58763: PPUSH
58764: PPUSH
// list := AreaToList ( area , 0 ) ;
58765: LD_ADDR_VAR 0 4
58769: PUSH
58770: LD_VAR 0 1
58774: PPUSH
58775: LD_INT 0
58777: PPUSH
58778: CALL_OW 517
58782: ST_TO_ADDR
// if not list then
58783: LD_VAR 0 4
58787: NOT
58788: IFFALSE 58792
// exit ;
58790: GO 58833
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
58792: LD_ADDR_VAR 0 3
58796: PUSH
58797: LD_VAR 0 4
58801: PUSH
58802: LD_INT 1
58804: ARRAY
58805: PUSH
58806: LD_INT 1
58808: ARRAY
58809: PUSH
58810: LD_VAR 0 4
58814: PUSH
58815: LD_INT 2
58817: ARRAY
58818: PUSH
58819: LD_INT 1
58821: ARRAY
58822: PUSH
58823: LD_VAR 0 2
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: LIST
58832: ST_TO_ADDR
// end ;
58833: LD_VAR 0 3
58837: RET
// export function First ( array ) ; begin
58838: LD_INT 0
58840: PPUSH
// if not array then
58841: LD_VAR 0 1
58845: NOT
58846: IFFALSE 58850
// exit ;
58848: GO 58864
// result := array [ 1 ] ;
58850: LD_ADDR_VAR 0 2
58854: PUSH
58855: LD_VAR 0 1
58859: PUSH
58860: LD_INT 1
58862: ARRAY
58863: ST_TO_ADDR
// end ;
58864: LD_VAR 0 2
58868: RET
// export function Last ( array ) ; begin
58869: LD_INT 0
58871: PPUSH
// if not array then
58872: LD_VAR 0 1
58876: NOT
58877: IFFALSE 58881
// exit ;
58879: GO 58897
// result := array [ array ] ;
58881: LD_ADDR_VAR 0 2
58885: PUSH
58886: LD_VAR 0 1
58890: PUSH
58891: LD_VAR 0 1
58895: ARRAY
58896: ST_TO_ADDR
// end ;
58897: LD_VAR 0 2
58901: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
58902: LD_INT 0
58904: PPUSH
58905: PPUSH
// result := [ ] ;
58906: LD_ADDR_VAR 0 5
58910: PUSH
58911: EMPTY
58912: ST_TO_ADDR
// if not array then
58913: LD_VAR 0 1
58917: NOT
58918: IFFALSE 58922
// exit ;
58920: GO 59034
// for i := 1 to array do
58922: LD_ADDR_VAR 0 6
58926: PUSH
58927: DOUBLE
58928: LD_INT 1
58930: DEC
58931: ST_TO_ADDR
58932: LD_VAR 0 1
58936: PUSH
58937: FOR_TO
58938: IFFALSE 59032
// if array [ i ] [ index ] = value then
58940: LD_VAR 0 1
58944: PUSH
58945: LD_VAR 0 6
58949: ARRAY
58950: PUSH
58951: LD_VAR 0 2
58955: ARRAY
58956: PUSH
58957: LD_VAR 0 3
58961: EQUAL
58962: IFFALSE 59030
// begin if indexColumn then
58964: LD_VAR 0 4
58968: IFFALSE 59004
// result := Join ( result , array [ i ] [ indexColumn ] ) else
58970: LD_ADDR_VAR 0 5
58974: PUSH
58975: LD_VAR 0 5
58979: PPUSH
58980: LD_VAR 0 1
58984: PUSH
58985: LD_VAR 0 6
58989: ARRAY
58990: PUSH
58991: LD_VAR 0 4
58995: ARRAY
58996: PPUSH
58997: CALL 54226 0 2
59001: ST_TO_ADDR
59002: GO 59030
// result := Join ( result , array [ i ] ) ;
59004: LD_ADDR_VAR 0 5
59008: PUSH
59009: LD_VAR 0 5
59013: PPUSH
59014: LD_VAR 0 1
59018: PUSH
59019: LD_VAR 0 6
59023: ARRAY
59024: PPUSH
59025: CALL 54226 0 2
59029: ST_TO_ADDR
// end ;
59030: GO 58937
59032: POP
59033: POP
// end ;
59034: LD_VAR 0 5
59038: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
59039: LD_INT 0
59041: PPUSH
// if not vehicles or not parkingPoint then
59042: LD_VAR 0 1
59046: NOT
59047: PUSH
59048: LD_VAR 0 2
59052: NOT
59053: OR
59054: IFFALSE 59058
// exit ;
59056: GO 59156
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
59058: LD_ADDR_VAR 0 1
59062: PUSH
59063: LD_VAR 0 1
59067: PPUSH
59068: LD_INT 50
59070: PUSH
59071: EMPTY
59072: LIST
59073: PUSH
59074: LD_INT 3
59076: PUSH
59077: LD_INT 92
59079: PUSH
59080: LD_VAR 0 2
59084: PUSH
59085: LD_INT 1
59087: ARRAY
59088: PUSH
59089: LD_VAR 0 2
59093: PUSH
59094: LD_INT 2
59096: ARRAY
59097: PUSH
59098: LD_INT 8
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PPUSH
59115: CALL_OW 72
59119: ST_TO_ADDR
// if not vehicles then
59120: LD_VAR 0 1
59124: NOT
59125: IFFALSE 59129
// exit ;
59127: GO 59156
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
59129: LD_VAR 0 1
59133: PPUSH
59134: LD_VAR 0 2
59138: PUSH
59139: LD_INT 1
59141: ARRAY
59142: PPUSH
59143: LD_VAR 0 2
59147: PUSH
59148: LD_INT 2
59150: ARRAY
59151: PPUSH
59152: CALL_OW 111
// end ;
59156: LD_VAR 0 3
59160: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
59161: LD_INT 0
59163: PPUSH
59164: PPUSH
59165: PPUSH
// if not side or not area then
59166: LD_VAR 0 1
59170: NOT
59171: PUSH
59172: LD_VAR 0 2
59176: NOT
59177: OR
59178: IFFALSE 59182
// exit ;
59180: GO 59301
// tmp := AreaToList ( area , 0 ) ;
59182: LD_ADDR_VAR 0 5
59186: PUSH
59187: LD_VAR 0 2
59191: PPUSH
59192: LD_INT 0
59194: PPUSH
59195: CALL_OW 517
59199: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59200: LD_ADDR_VAR 0 4
59204: PUSH
59205: DOUBLE
59206: LD_INT 1
59208: DEC
59209: ST_TO_ADDR
59210: LD_VAR 0 5
59214: PUSH
59215: LD_INT 1
59217: ARRAY
59218: PUSH
59219: FOR_TO
59220: IFFALSE 59299
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
59222: LD_VAR 0 5
59226: PUSH
59227: LD_INT 1
59229: ARRAY
59230: PUSH
59231: LD_VAR 0 4
59235: ARRAY
59236: PPUSH
59237: LD_VAR 0 5
59241: PUSH
59242: LD_INT 2
59244: ARRAY
59245: PUSH
59246: LD_VAR 0 4
59250: ARRAY
59251: PPUSH
59252: CALL_OW 351
59256: IFFALSE 59297
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
59258: LD_VAR 0 5
59262: PUSH
59263: LD_INT 1
59265: ARRAY
59266: PUSH
59267: LD_VAR 0 4
59271: ARRAY
59272: PPUSH
59273: LD_VAR 0 5
59277: PUSH
59278: LD_INT 2
59280: ARRAY
59281: PUSH
59282: LD_VAR 0 4
59286: ARRAY
59287: PPUSH
59288: LD_VAR 0 1
59292: PPUSH
59293: CALL_OW 244
// end ;
59297: GO 59219
59299: POP
59300: POP
// end ; end_of_file
59301: LD_VAR 0 3
59305: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
59306: LD_VAR 0 1
59310: PUSH
59311: LD_INT 200
59313: DOUBLE
59314: GREATEREQUAL
59315: IFFALSE 59323
59317: LD_INT 299
59319: DOUBLE
59320: LESSEQUAL
59321: IFTRUE 59325
59323: GO 59357
59325: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
59326: LD_VAR 0 1
59330: PPUSH
59331: LD_VAR 0 2
59335: PPUSH
59336: LD_VAR 0 3
59340: PPUSH
59341: LD_VAR 0 4
59345: PPUSH
59346: LD_VAR 0 5
59350: PPUSH
59351: CALL 59845 0 5
59355: GO 59434
59357: LD_INT 300
59359: DOUBLE
59360: GREATEREQUAL
59361: IFFALSE 59369
59363: LD_INT 399
59365: DOUBLE
59366: LESSEQUAL
59367: IFTRUE 59371
59369: GO 59433
59371: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
59372: LD_VAR 0 1
59376: PPUSH
59377: LD_VAR 0 2
59381: PPUSH
59382: LD_VAR 0 3
59386: PPUSH
59387: LD_VAR 0 4
59391: PPUSH
59392: LD_VAR 0 5
59396: PPUSH
59397: LD_VAR 0 6
59401: PPUSH
59402: LD_VAR 0 7
59406: PPUSH
59407: LD_VAR 0 8
59411: PPUSH
59412: LD_VAR 0 9
59416: PPUSH
59417: LD_VAR 0 10
59421: PPUSH
59422: LD_VAR 0 11
59426: PPUSH
59427: CALL 76883 0 11
59431: GO 59434
59433: POP
// end ;
59434: PPOPN 11
59436: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
59437: LD_VAR 0 1
59441: PPUSH
59442: LD_VAR 0 2
59446: PPUSH
59447: LD_VAR 0 3
59451: PPUSH
59452: LD_VAR 0 4
59456: PPUSH
59457: LD_VAR 0 5
59461: PPUSH
59462: CALL 59581 0 5
// end ; end_of_file
59466: PPOPN 5
59468: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
59469: LD_INT 0
59471: PPUSH
59472: PPUSH
59473: PPUSH
59474: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
59475: LD_VAR 0 1
59479: PPUSH
59480: CALL_OW 264
59484: PUSH
59485: LD_INT 91
59487: EQUAL
59488: IFFALSE 59560
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
59490: LD_INT 68
59492: PPUSH
59493: LD_VAR 0 1
59497: PPUSH
59498: CALL_OW 255
59502: PPUSH
59503: CALL_OW 321
59507: PUSH
59508: LD_INT 2
59510: EQUAL
59511: IFFALSE 59523
// eff := 70 else
59513: LD_ADDR_VAR 0 4
59517: PUSH
59518: LD_INT 70
59520: ST_TO_ADDR
59521: GO 59531
// eff := 30 ;
59523: LD_ADDR_VAR 0 4
59527: PUSH
59528: LD_INT 30
59530: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
59531: LD_VAR 0 1
59535: PPUSH
59536: CALL_OW 250
59540: PPUSH
59541: LD_VAR 0 1
59545: PPUSH
59546: CALL_OW 251
59550: PPUSH
59551: LD_VAR 0 4
59555: PPUSH
59556: CALL_OW 495
// end ; end ;
59560: LD_VAR 0 2
59564: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
59565: LD_INT 0
59567: PPUSH
// end ;
59568: LD_VAR 0 4
59572: RET
// export function SOS_Command ( cmd ) ; begin
59573: LD_INT 0
59575: PPUSH
// end ;
59576: LD_VAR 0 2
59580: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
59581: LD_INT 0
59583: PPUSH
// end ;
59584: LD_VAR 0 6
59588: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
59589: LD_INT 0
59591: PPUSH
59592: PPUSH
// if not vehicle or not factory then
59593: LD_VAR 0 1
59597: NOT
59598: PUSH
59599: LD_VAR 0 2
59603: NOT
59604: OR
59605: IFFALSE 59609
// exit ;
59607: GO 59840
// if factoryWaypoints >= factory then
59609: LD_EXP 105
59613: PUSH
59614: LD_VAR 0 2
59618: GREATEREQUAL
59619: IFFALSE 59840
// if factoryWaypoints [ factory ] then
59621: LD_EXP 105
59625: PUSH
59626: LD_VAR 0 2
59630: ARRAY
59631: IFFALSE 59840
// begin if GetControl ( vehicle ) = control_manual then
59633: LD_VAR 0 1
59637: PPUSH
59638: CALL_OW 263
59642: PUSH
59643: LD_INT 1
59645: EQUAL
59646: IFFALSE 59727
// begin driver := IsDrivenBy ( vehicle ) ;
59648: LD_ADDR_VAR 0 4
59652: PUSH
59653: LD_VAR 0 1
59657: PPUSH
59658: CALL_OW 311
59662: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
59663: LD_VAR 0 4
59667: PPUSH
59668: LD_EXP 105
59672: PUSH
59673: LD_VAR 0 2
59677: ARRAY
59678: PUSH
59679: LD_INT 3
59681: ARRAY
59682: PPUSH
59683: LD_EXP 105
59687: PUSH
59688: LD_VAR 0 2
59692: ARRAY
59693: PUSH
59694: LD_INT 4
59696: ARRAY
59697: PPUSH
59698: CALL_OW 171
// AddComExitVehicle ( driver ) ;
59702: LD_VAR 0 4
59706: PPUSH
59707: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
59711: LD_VAR 0 4
59715: PPUSH
59716: LD_VAR 0 2
59720: PPUSH
59721: CALL_OW 180
// end else
59725: GO 59840
// if GetControl ( vehicle ) = control_remote then
59727: LD_VAR 0 1
59731: PPUSH
59732: CALL_OW 263
59736: PUSH
59737: LD_INT 2
59739: EQUAL
59740: IFFALSE 59801
// begin wait ( 0 0$2 ) ;
59742: LD_INT 70
59744: PPUSH
59745: CALL_OW 67
// if Connect ( vehicle ) then
59749: LD_VAR 0 1
59753: PPUSH
59754: CALL 24843 0 1
59758: IFFALSE 59799
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
59760: LD_VAR 0 1
59764: PPUSH
59765: LD_EXP 105
59769: PUSH
59770: LD_VAR 0 2
59774: ARRAY
59775: PUSH
59776: LD_INT 3
59778: ARRAY
59779: PPUSH
59780: LD_EXP 105
59784: PUSH
59785: LD_VAR 0 2
59789: ARRAY
59790: PUSH
59791: LD_INT 4
59793: ARRAY
59794: PPUSH
59795: CALL_OW 171
// end else
59799: GO 59840
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
59801: LD_VAR 0 1
59805: PPUSH
59806: LD_EXP 105
59810: PUSH
59811: LD_VAR 0 2
59815: ARRAY
59816: PUSH
59817: LD_INT 3
59819: ARRAY
59820: PPUSH
59821: LD_EXP 105
59825: PUSH
59826: LD_VAR 0 2
59830: ARRAY
59831: PUSH
59832: LD_INT 4
59834: ARRAY
59835: PPUSH
59836: CALL_OW 171
// end ; end ;
59840: LD_VAR 0 3
59844: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
59845: LD_INT 0
59847: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
59848: LD_VAR 0 1
59852: PUSH
59853: LD_INT 250
59855: EQUAL
59856: PUSH
59857: LD_VAR 0 2
59861: PPUSH
59862: CALL_OW 264
59866: PUSH
59867: LD_INT 81
59869: EQUAL
59870: AND
59871: IFFALSE 59892
// MinerPlaceMine ( unit , x , y ) ;
59873: LD_VAR 0 2
59877: PPUSH
59878: LD_VAR 0 4
59882: PPUSH
59883: LD_VAR 0 5
59887: PPUSH
59888: CALL 62882 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
59892: LD_VAR 0 1
59896: PUSH
59897: LD_INT 251
59899: EQUAL
59900: PUSH
59901: LD_VAR 0 2
59905: PPUSH
59906: CALL_OW 264
59910: PUSH
59911: LD_INT 81
59913: EQUAL
59914: AND
59915: IFFALSE 59936
// MinerDetonateMine ( unit , x , y ) ;
59917: LD_VAR 0 2
59921: PPUSH
59922: LD_VAR 0 4
59926: PPUSH
59927: LD_VAR 0 5
59931: PPUSH
59932: CALL 63157 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
59936: LD_VAR 0 1
59940: PUSH
59941: LD_INT 252
59943: EQUAL
59944: PUSH
59945: LD_VAR 0 2
59949: PPUSH
59950: CALL_OW 264
59954: PUSH
59955: LD_INT 81
59957: EQUAL
59958: AND
59959: IFFALSE 59980
// MinerCreateMinefield ( unit , x , y ) ;
59961: LD_VAR 0 2
59965: PPUSH
59966: LD_VAR 0 4
59970: PPUSH
59971: LD_VAR 0 5
59975: PPUSH
59976: CALL 63574 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
59980: LD_VAR 0 1
59984: PUSH
59985: LD_INT 253
59987: EQUAL
59988: PUSH
59989: LD_VAR 0 2
59993: PPUSH
59994: CALL_OW 257
59998: PUSH
59999: LD_INT 5
60001: EQUAL
60002: AND
60003: IFFALSE 60024
// ComBinocular ( unit , x , y ) ;
60005: LD_VAR 0 2
60009: PPUSH
60010: LD_VAR 0 4
60014: PPUSH
60015: LD_VAR 0 5
60019: PPUSH
60020: CALL 63943 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
60024: LD_VAR 0 1
60028: PUSH
60029: LD_INT 254
60031: EQUAL
60032: PUSH
60033: LD_VAR 0 2
60037: PPUSH
60038: CALL_OW 264
60042: PUSH
60043: LD_INT 99
60045: EQUAL
60046: AND
60047: PUSH
60048: LD_VAR 0 3
60052: PPUSH
60053: CALL_OW 263
60057: PUSH
60058: LD_INT 3
60060: EQUAL
60061: AND
60062: IFFALSE 60078
// HackDestroyVehicle ( unit , selectedUnit ) ;
60064: LD_VAR 0 2
60068: PPUSH
60069: LD_VAR 0 3
60073: PPUSH
60074: CALL 62246 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
60078: LD_VAR 0 1
60082: PUSH
60083: LD_INT 255
60085: EQUAL
60086: PUSH
60087: LD_VAR 0 2
60091: PPUSH
60092: CALL_OW 264
60096: PUSH
60097: LD_INT 14
60099: PUSH
60100: LD_INT 53
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: IN
60107: AND
60108: PUSH
60109: LD_VAR 0 4
60113: PPUSH
60114: LD_VAR 0 5
60118: PPUSH
60119: CALL_OW 488
60123: AND
60124: IFFALSE 60148
// CutTreeXYR ( unit , x , y , 12 ) ;
60126: LD_VAR 0 2
60130: PPUSH
60131: LD_VAR 0 4
60135: PPUSH
60136: LD_VAR 0 5
60140: PPUSH
60141: LD_INT 12
60143: PPUSH
60144: CALL 60243 0 4
// if cmd = 256 then
60148: LD_VAR 0 1
60152: PUSH
60153: LD_INT 256
60155: EQUAL
60156: IFFALSE 60177
// SetFactoryWaypoint ( unit , x , y ) ;
60158: LD_VAR 0 2
60162: PPUSH
60163: LD_VAR 0 4
60167: PPUSH
60168: LD_VAR 0 5
60172: PPUSH
60173: CALL 78871 0 3
// if cmd = 257 then
60177: LD_VAR 0 1
60181: PUSH
60182: LD_INT 257
60184: EQUAL
60185: IFFALSE 60206
// SetWarehouseGatheringPoint ( unit , x , y ) ;
60187: LD_VAR 0 2
60191: PPUSH
60192: LD_VAR 0 4
60196: PPUSH
60197: LD_VAR 0 5
60201: PPUSH
60202: CALL 79233 0 3
// if cmd = 258 then
60206: LD_VAR 0 1
60210: PUSH
60211: LD_INT 258
60213: EQUAL
60214: IFFALSE 60238
// BurnTreeXYR ( unit , x , y , 8 ) ;
60216: LD_VAR 0 2
60220: PPUSH
60221: LD_VAR 0 4
60225: PPUSH
60226: LD_VAR 0 5
60230: PPUSH
60231: LD_INT 8
60233: PPUSH
60234: CALL 60637 0 4
// end ;
60238: LD_VAR 0 6
60242: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
60243: LD_INT 0
60245: PPUSH
60246: PPUSH
60247: PPUSH
60248: PPUSH
60249: PPUSH
60250: PPUSH
60251: PPUSH
60252: PPUSH
60253: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
60254: LD_VAR 0 1
60258: PPUSH
60259: CALL_OW 302
60263: NOT
60264: PUSH
60265: LD_VAR 0 2
60269: PPUSH
60270: LD_VAR 0 3
60274: PPUSH
60275: CALL_OW 488
60279: NOT
60280: OR
60281: PUSH
60282: LD_VAR 0 4
60286: NOT
60287: OR
60288: IFFALSE 60292
// exit ;
60290: GO 60632
// list := [ ] ;
60292: LD_ADDR_VAR 0 13
60296: PUSH
60297: EMPTY
60298: ST_TO_ADDR
// if x - r < 0 then
60299: LD_VAR 0 2
60303: PUSH
60304: LD_VAR 0 4
60308: MINUS
60309: PUSH
60310: LD_INT 0
60312: LESS
60313: IFFALSE 60325
// min_x := 0 else
60315: LD_ADDR_VAR 0 7
60319: PUSH
60320: LD_INT 0
60322: ST_TO_ADDR
60323: GO 60341
// min_x := x - r ;
60325: LD_ADDR_VAR 0 7
60329: PUSH
60330: LD_VAR 0 2
60334: PUSH
60335: LD_VAR 0 4
60339: MINUS
60340: ST_TO_ADDR
// if y - r < 0 then
60341: LD_VAR 0 3
60345: PUSH
60346: LD_VAR 0 4
60350: MINUS
60351: PUSH
60352: LD_INT 0
60354: LESS
60355: IFFALSE 60367
// min_y := 0 else
60357: LD_ADDR_VAR 0 8
60361: PUSH
60362: LD_INT 0
60364: ST_TO_ADDR
60365: GO 60383
// min_y := y - r ;
60367: LD_ADDR_VAR 0 8
60371: PUSH
60372: LD_VAR 0 3
60376: PUSH
60377: LD_VAR 0 4
60381: MINUS
60382: ST_TO_ADDR
// max_x := x + r ;
60383: LD_ADDR_VAR 0 9
60387: PUSH
60388: LD_VAR 0 2
60392: PUSH
60393: LD_VAR 0 4
60397: PLUS
60398: ST_TO_ADDR
// max_y := y + r ;
60399: LD_ADDR_VAR 0 10
60403: PUSH
60404: LD_VAR 0 3
60408: PUSH
60409: LD_VAR 0 4
60413: PLUS
60414: ST_TO_ADDR
// for _x = min_x to max_x do
60415: LD_ADDR_VAR 0 11
60419: PUSH
60420: DOUBLE
60421: LD_VAR 0 7
60425: DEC
60426: ST_TO_ADDR
60427: LD_VAR 0 9
60431: PUSH
60432: FOR_TO
60433: IFFALSE 60550
// for _y = min_y to max_y do
60435: LD_ADDR_VAR 0 12
60439: PUSH
60440: DOUBLE
60441: LD_VAR 0 8
60445: DEC
60446: ST_TO_ADDR
60447: LD_VAR 0 10
60451: PUSH
60452: FOR_TO
60453: IFFALSE 60546
// begin if not ValidHex ( _x , _y ) then
60455: LD_VAR 0 11
60459: PPUSH
60460: LD_VAR 0 12
60464: PPUSH
60465: CALL_OW 488
60469: NOT
60470: IFFALSE 60474
// continue ;
60472: GO 60452
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
60474: LD_VAR 0 11
60478: PPUSH
60479: LD_VAR 0 12
60483: PPUSH
60484: CALL_OW 351
60488: PUSH
60489: LD_VAR 0 11
60493: PPUSH
60494: LD_VAR 0 12
60498: PPUSH
60499: CALL_OW 554
60503: AND
60504: IFFALSE 60544
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60506: LD_ADDR_VAR 0 13
60510: PUSH
60511: LD_VAR 0 13
60515: PPUSH
60516: LD_VAR 0 13
60520: PUSH
60521: LD_INT 1
60523: PLUS
60524: PPUSH
60525: LD_VAR 0 11
60529: PUSH
60530: LD_VAR 0 12
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PPUSH
60539: CALL_OW 2
60543: ST_TO_ADDR
// end ;
60544: GO 60452
60546: POP
60547: POP
60548: GO 60432
60550: POP
60551: POP
// if not list then
60552: LD_VAR 0 13
60556: NOT
60557: IFFALSE 60561
// exit ;
60559: GO 60632
// for i in list do
60561: LD_ADDR_VAR 0 6
60565: PUSH
60566: LD_VAR 0 13
60570: PUSH
60571: FOR_IN
60572: IFFALSE 60630
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
60574: LD_VAR 0 1
60578: PPUSH
60579: LD_STRING M
60581: PUSH
60582: LD_VAR 0 6
60586: PUSH
60587: LD_INT 1
60589: ARRAY
60590: PUSH
60591: LD_VAR 0 6
60595: PUSH
60596: LD_INT 2
60598: ARRAY
60599: PUSH
60600: LD_INT 0
60602: PUSH
60603: LD_INT 0
60605: PUSH
60606: LD_INT 0
60608: PUSH
60609: LD_INT 0
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: PUSH
60621: EMPTY
60622: LIST
60623: PPUSH
60624: CALL_OW 447
60628: GO 60571
60630: POP
60631: POP
// end ;
60632: LD_VAR 0 5
60636: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
60637: LD_INT 0
60639: PPUSH
60640: PPUSH
60641: PPUSH
60642: PPUSH
60643: PPUSH
60644: PPUSH
60645: PPUSH
60646: PPUSH
60647: PPUSH
60648: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
60649: LD_VAR 0 1
60653: PPUSH
60654: CALL_OW 302
60658: NOT
60659: PUSH
60660: LD_VAR 0 2
60664: PPUSH
60665: LD_VAR 0 3
60669: PPUSH
60670: CALL_OW 488
60674: NOT
60675: OR
60676: PUSH
60677: LD_VAR 0 4
60681: NOT
60682: OR
60683: IFFALSE 60687
// exit ;
60685: GO 61200
// list := [ ] ;
60687: LD_ADDR_VAR 0 13
60691: PUSH
60692: EMPTY
60693: ST_TO_ADDR
// if x - r < 0 then
60694: LD_VAR 0 2
60698: PUSH
60699: LD_VAR 0 4
60703: MINUS
60704: PUSH
60705: LD_INT 0
60707: LESS
60708: IFFALSE 60720
// min_x := 0 else
60710: LD_ADDR_VAR 0 7
60714: PUSH
60715: LD_INT 0
60717: ST_TO_ADDR
60718: GO 60736
// min_x := x - r ;
60720: LD_ADDR_VAR 0 7
60724: PUSH
60725: LD_VAR 0 2
60729: PUSH
60730: LD_VAR 0 4
60734: MINUS
60735: ST_TO_ADDR
// if y - r < 0 then
60736: LD_VAR 0 3
60740: PUSH
60741: LD_VAR 0 4
60745: MINUS
60746: PUSH
60747: LD_INT 0
60749: LESS
60750: IFFALSE 60762
// min_y := 0 else
60752: LD_ADDR_VAR 0 8
60756: PUSH
60757: LD_INT 0
60759: ST_TO_ADDR
60760: GO 60778
// min_y := y - r ;
60762: LD_ADDR_VAR 0 8
60766: PUSH
60767: LD_VAR 0 3
60771: PUSH
60772: LD_VAR 0 4
60776: MINUS
60777: ST_TO_ADDR
// max_x := x + r ;
60778: LD_ADDR_VAR 0 9
60782: PUSH
60783: LD_VAR 0 2
60787: PUSH
60788: LD_VAR 0 4
60792: PLUS
60793: ST_TO_ADDR
// max_y := y + r ;
60794: LD_ADDR_VAR 0 10
60798: PUSH
60799: LD_VAR 0 3
60803: PUSH
60804: LD_VAR 0 4
60808: PLUS
60809: ST_TO_ADDR
// for _x = min_x to max_x do
60810: LD_ADDR_VAR 0 11
60814: PUSH
60815: DOUBLE
60816: LD_VAR 0 7
60820: DEC
60821: ST_TO_ADDR
60822: LD_VAR 0 9
60826: PUSH
60827: FOR_TO
60828: IFFALSE 60945
// for _y = min_y to max_y do
60830: LD_ADDR_VAR 0 12
60834: PUSH
60835: DOUBLE
60836: LD_VAR 0 8
60840: DEC
60841: ST_TO_ADDR
60842: LD_VAR 0 10
60846: PUSH
60847: FOR_TO
60848: IFFALSE 60941
// begin if not ValidHex ( _x , _y ) then
60850: LD_VAR 0 11
60854: PPUSH
60855: LD_VAR 0 12
60859: PPUSH
60860: CALL_OW 488
60864: NOT
60865: IFFALSE 60869
// continue ;
60867: GO 60847
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
60869: LD_VAR 0 11
60873: PPUSH
60874: LD_VAR 0 12
60878: PPUSH
60879: CALL_OW 351
60883: PUSH
60884: LD_VAR 0 11
60888: PPUSH
60889: LD_VAR 0 12
60893: PPUSH
60894: CALL_OW 554
60898: AND
60899: IFFALSE 60939
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60901: LD_ADDR_VAR 0 13
60905: PUSH
60906: LD_VAR 0 13
60910: PPUSH
60911: LD_VAR 0 13
60915: PUSH
60916: LD_INT 1
60918: PLUS
60919: PPUSH
60920: LD_VAR 0 11
60924: PUSH
60925: LD_VAR 0 12
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PPUSH
60934: CALL_OW 2
60938: ST_TO_ADDR
// end ;
60939: GO 60847
60941: POP
60942: POP
60943: GO 60827
60945: POP
60946: POP
// if not list then
60947: LD_VAR 0 13
60951: NOT
60952: IFFALSE 60956
// exit ;
60954: GO 61200
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
60956: LD_ADDR_VAR 0 13
60960: PUSH
60961: LD_VAR 0 1
60965: PPUSH
60966: LD_VAR 0 13
60970: PPUSH
60971: LD_INT 1
60973: PPUSH
60974: LD_INT 1
60976: PPUSH
60977: CALL 21985 0 4
60981: ST_TO_ADDR
// ComStop ( flame ) ;
60982: LD_VAR 0 1
60986: PPUSH
60987: CALL_OW 141
// for i in list do
60991: LD_ADDR_VAR 0 6
60995: PUSH
60996: LD_VAR 0 13
61000: PUSH
61001: FOR_IN
61002: IFFALSE 61033
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
61004: LD_VAR 0 1
61008: PPUSH
61009: LD_VAR 0 6
61013: PUSH
61014: LD_INT 1
61016: ARRAY
61017: PPUSH
61018: LD_VAR 0 6
61022: PUSH
61023: LD_INT 2
61025: ARRAY
61026: PPUSH
61027: CALL_OW 176
61031: GO 61001
61033: POP
61034: POP
// repeat wait ( 0 0$1 ) ;
61035: LD_INT 35
61037: PPUSH
61038: CALL_OW 67
// task := GetTaskList ( flame ) ;
61042: LD_ADDR_VAR 0 14
61046: PUSH
61047: LD_VAR 0 1
61051: PPUSH
61052: CALL_OW 437
61056: ST_TO_ADDR
// if not task then
61057: LD_VAR 0 14
61061: NOT
61062: IFFALSE 61066
// exit ;
61064: GO 61200
// if task [ 1 ] [ 1 ] <> | then
61066: LD_VAR 0 14
61070: PUSH
61071: LD_INT 1
61073: ARRAY
61074: PUSH
61075: LD_INT 1
61077: ARRAY
61078: PUSH
61079: LD_STRING |
61081: NONEQUAL
61082: IFFALSE 61086
// exit ;
61084: GO 61200
// _x := task [ 1 ] [ 2 ] ;
61086: LD_ADDR_VAR 0 11
61090: PUSH
61091: LD_VAR 0 14
61095: PUSH
61096: LD_INT 1
61098: ARRAY
61099: PUSH
61100: LD_INT 2
61102: ARRAY
61103: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
61104: LD_ADDR_VAR 0 12
61108: PUSH
61109: LD_VAR 0 14
61113: PUSH
61114: LD_INT 1
61116: ARRAY
61117: PUSH
61118: LD_INT 3
61120: ARRAY
61121: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
61122: LD_VAR 0 11
61126: PPUSH
61127: LD_VAR 0 12
61131: PPUSH
61132: CALL_OW 351
61136: NOT
61137: PUSH
61138: LD_VAR 0 11
61142: PPUSH
61143: LD_VAR 0 12
61147: PPUSH
61148: CALL_OW 554
61152: NOT
61153: OR
61154: IFFALSE 61188
// begin task := Delete ( task , 1 ) ;
61156: LD_ADDR_VAR 0 14
61160: PUSH
61161: LD_VAR 0 14
61165: PPUSH
61166: LD_INT 1
61168: PPUSH
61169: CALL_OW 3
61173: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
61174: LD_VAR 0 1
61178: PPUSH
61179: LD_VAR 0 14
61183: PPUSH
61184: CALL_OW 446
// end ; until not HasTask ( flame ) ;
61188: LD_VAR 0 1
61192: PPUSH
61193: CALL_OW 314
61197: NOT
61198: IFFALSE 61035
// end ;
61200: LD_VAR 0 5
61204: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
61205: LD_EXP 36
61209: NOT
61210: IFFALSE 61260
61212: GO 61214
61214: DISABLE
// begin initHack := true ;
61215: LD_ADDR_EXP 36
61219: PUSH
61220: LD_INT 1
61222: ST_TO_ADDR
// hackTanks := [ ] ;
61223: LD_ADDR_EXP 37
61227: PUSH
61228: EMPTY
61229: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
61230: LD_ADDR_EXP 38
61234: PUSH
61235: EMPTY
61236: ST_TO_ADDR
// hackLimit := 3 ;
61237: LD_ADDR_EXP 39
61241: PUSH
61242: LD_INT 3
61244: ST_TO_ADDR
// hackDist := 12 ;
61245: LD_ADDR_EXP 40
61249: PUSH
61250: LD_INT 12
61252: ST_TO_ADDR
// hackCounter := [ ] ;
61253: LD_ADDR_EXP 41
61257: PUSH
61258: EMPTY
61259: ST_TO_ADDR
// end ;
61260: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
61261: LD_EXP 36
61265: PUSH
61266: LD_INT 34
61268: PUSH
61269: LD_INT 99
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PPUSH
61276: CALL_OW 69
61280: AND
61281: IFFALSE 61534
61283: GO 61285
61285: DISABLE
61286: LD_INT 0
61288: PPUSH
61289: PPUSH
// begin enable ;
61290: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
61291: LD_ADDR_VAR 0 1
61295: PUSH
61296: LD_INT 34
61298: PUSH
61299: LD_INT 99
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PPUSH
61306: CALL_OW 69
61310: PUSH
61311: FOR_IN
61312: IFFALSE 61532
// begin if not i in hackTanks then
61314: LD_VAR 0 1
61318: PUSH
61319: LD_EXP 37
61323: IN
61324: NOT
61325: IFFALSE 61408
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
61327: LD_ADDR_EXP 37
61331: PUSH
61332: LD_EXP 37
61336: PPUSH
61337: LD_EXP 37
61341: PUSH
61342: LD_INT 1
61344: PLUS
61345: PPUSH
61346: LD_VAR 0 1
61350: PPUSH
61351: CALL_OW 1
61355: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
61356: LD_ADDR_EXP 38
61360: PUSH
61361: LD_EXP 38
61365: PPUSH
61366: LD_EXP 38
61370: PUSH
61371: LD_INT 1
61373: PLUS
61374: PPUSH
61375: EMPTY
61376: PPUSH
61377: CALL_OW 1
61381: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
61382: LD_ADDR_EXP 41
61386: PUSH
61387: LD_EXP 41
61391: PPUSH
61392: LD_EXP 41
61396: PUSH
61397: LD_INT 1
61399: PLUS
61400: PPUSH
61401: EMPTY
61402: PPUSH
61403: CALL_OW 1
61407: ST_TO_ADDR
// end ; if not IsOk ( i ) then
61408: LD_VAR 0 1
61412: PPUSH
61413: CALL_OW 302
61417: NOT
61418: IFFALSE 61431
// begin HackUnlinkAll ( i ) ;
61420: LD_VAR 0 1
61424: PPUSH
61425: CALL 61537 0 1
// continue ;
61429: GO 61311
// end ; HackCheckCapturedStatus ( i ) ;
61431: LD_VAR 0 1
61435: PPUSH
61436: CALL 61980 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
61440: LD_ADDR_VAR 0 2
61444: PUSH
61445: LD_INT 81
61447: PUSH
61448: LD_VAR 0 1
61452: PPUSH
61453: CALL_OW 255
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 33
61464: PUSH
61465: LD_INT 3
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 91
61474: PUSH
61475: LD_VAR 0 1
61479: PUSH
61480: LD_EXP 40
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 50
61492: PUSH
61493: EMPTY
61494: LIST
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: PPUSH
61502: CALL_OW 69
61506: ST_TO_ADDR
// if not tmp then
61507: LD_VAR 0 2
61511: NOT
61512: IFFALSE 61516
// continue ;
61514: GO 61311
// HackLink ( i , tmp ) ;
61516: LD_VAR 0 1
61520: PPUSH
61521: LD_VAR 0 2
61525: PPUSH
61526: CALL 61673 0 2
// end ;
61530: GO 61311
61532: POP
61533: POP
// end ;
61534: PPOPN 2
61536: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
61537: LD_INT 0
61539: PPUSH
61540: PPUSH
61541: PPUSH
// if not hack in hackTanks then
61542: LD_VAR 0 1
61546: PUSH
61547: LD_EXP 37
61551: IN
61552: NOT
61553: IFFALSE 61557
// exit ;
61555: GO 61668
// index := GetElementIndex ( hackTanks , hack ) ;
61557: LD_ADDR_VAR 0 4
61561: PUSH
61562: LD_EXP 37
61566: PPUSH
61567: LD_VAR 0 1
61571: PPUSH
61572: CALL 21282 0 2
61576: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
61577: LD_EXP 38
61581: PUSH
61582: LD_VAR 0 4
61586: ARRAY
61587: IFFALSE 61668
// begin for i in hackTanksCaptured [ index ] do
61589: LD_ADDR_VAR 0 3
61593: PUSH
61594: LD_EXP 38
61598: PUSH
61599: LD_VAR 0 4
61603: ARRAY
61604: PUSH
61605: FOR_IN
61606: IFFALSE 61632
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
61608: LD_VAR 0 3
61612: PUSH
61613: LD_INT 1
61615: ARRAY
61616: PPUSH
61617: LD_VAR 0 3
61621: PUSH
61622: LD_INT 2
61624: ARRAY
61625: PPUSH
61626: CALL_OW 235
61630: GO 61605
61632: POP
61633: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
61634: LD_ADDR_EXP 38
61638: PUSH
61639: LD_EXP 38
61643: PPUSH
61644: LD_VAR 0 4
61648: PPUSH
61649: EMPTY
61650: PPUSH
61651: CALL_OW 1
61655: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
61656: LD_VAR 0 1
61660: PPUSH
61661: LD_INT 0
61663: PPUSH
61664: CALL_OW 505
// end ; end ;
61668: LD_VAR 0 2
61672: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
61673: LD_INT 0
61675: PPUSH
61676: PPUSH
61677: PPUSH
// if not hack in hackTanks or not vehicles then
61678: LD_VAR 0 1
61682: PUSH
61683: LD_EXP 37
61687: IN
61688: NOT
61689: PUSH
61690: LD_VAR 0 2
61694: NOT
61695: OR
61696: IFFALSE 61700
// exit ;
61698: GO 61975
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
61700: LD_ADDR_VAR 0 2
61704: PUSH
61705: LD_VAR 0 1
61709: PPUSH
61710: LD_VAR 0 2
61714: PPUSH
61715: LD_INT 1
61717: PPUSH
61718: LD_INT 1
61720: PPUSH
61721: CALL 21932 0 4
61725: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
61726: LD_ADDR_VAR 0 5
61730: PUSH
61731: LD_EXP 37
61735: PPUSH
61736: LD_VAR 0 1
61740: PPUSH
61741: CALL 21282 0 2
61745: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
61746: LD_EXP 38
61750: PUSH
61751: LD_VAR 0 5
61755: ARRAY
61756: PUSH
61757: LD_EXP 39
61761: LESS
61762: IFFALSE 61951
// begin for i := 1 to vehicles do
61764: LD_ADDR_VAR 0 4
61768: PUSH
61769: DOUBLE
61770: LD_INT 1
61772: DEC
61773: ST_TO_ADDR
61774: LD_VAR 0 2
61778: PUSH
61779: FOR_TO
61780: IFFALSE 61949
// begin if hackTanksCaptured [ index ] = hackLimit then
61782: LD_EXP 38
61786: PUSH
61787: LD_VAR 0 5
61791: ARRAY
61792: PUSH
61793: LD_EXP 39
61797: EQUAL
61798: IFFALSE 61802
// break ;
61800: GO 61949
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
61802: LD_ADDR_EXP 41
61806: PUSH
61807: LD_EXP 41
61811: PPUSH
61812: LD_VAR 0 5
61816: PPUSH
61817: LD_EXP 41
61821: PUSH
61822: LD_VAR 0 5
61826: ARRAY
61827: PUSH
61828: LD_INT 1
61830: PLUS
61831: PPUSH
61832: CALL_OW 1
61836: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
61837: LD_ADDR_EXP 38
61841: PUSH
61842: LD_EXP 38
61846: PPUSH
61847: LD_VAR 0 5
61851: PUSH
61852: LD_EXP 38
61856: PUSH
61857: LD_VAR 0 5
61861: ARRAY
61862: PUSH
61863: LD_INT 1
61865: PLUS
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PPUSH
61871: LD_VAR 0 2
61875: PUSH
61876: LD_VAR 0 4
61880: ARRAY
61881: PUSH
61882: LD_VAR 0 2
61886: PUSH
61887: LD_VAR 0 4
61891: ARRAY
61892: PPUSH
61893: CALL_OW 255
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PPUSH
61902: CALL 21497 0 3
61906: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
61907: LD_VAR 0 2
61911: PUSH
61912: LD_VAR 0 4
61916: ARRAY
61917: PPUSH
61918: LD_VAR 0 1
61922: PPUSH
61923: CALL_OW 255
61927: PPUSH
61928: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
61932: LD_VAR 0 2
61936: PUSH
61937: LD_VAR 0 4
61941: ARRAY
61942: PPUSH
61943: CALL_OW 141
// end ;
61947: GO 61779
61949: POP
61950: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
61951: LD_VAR 0 1
61955: PPUSH
61956: LD_EXP 38
61960: PUSH
61961: LD_VAR 0 5
61965: ARRAY
61966: PUSH
61967: LD_INT 0
61969: PLUS
61970: PPUSH
61971: CALL_OW 505
// end ;
61975: LD_VAR 0 3
61979: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
61980: LD_INT 0
61982: PPUSH
61983: PPUSH
61984: PPUSH
61985: PPUSH
// if not hack in hackTanks then
61986: LD_VAR 0 1
61990: PUSH
61991: LD_EXP 37
61995: IN
61996: NOT
61997: IFFALSE 62001
// exit ;
61999: GO 62241
// index := GetElementIndex ( hackTanks , hack ) ;
62001: LD_ADDR_VAR 0 4
62005: PUSH
62006: LD_EXP 37
62010: PPUSH
62011: LD_VAR 0 1
62015: PPUSH
62016: CALL 21282 0 2
62020: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
62021: LD_ADDR_VAR 0 3
62025: PUSH
62026: DOUBLE
62027: LD_EXP 38
62031: PUSH
62032: LD_VAR 0 4
62036: ARRAY
62037: INC
62038: ST_TO_ADDR
62039: LD_INT 1
62041: PUSH
62042: FOR_DOWNTO
62043: IFFALSE 62215
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
62045: LD_ADDR_VAR 0 5
62049: PUSH
62050: LD_EXP 38
62054: PUSH
62055: LD_VAR 0 4
62059: ARRAY
62060: PUSH
62061: LD_VAR 0 3
62065: ARRAY
62066: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
62067: LD_VAR 0 5
62071: PUSH
62072: LD_INT 1
62074: ARRAY
62075: PPUSH
62076: CALL_OW 302
62080: NOT
62081: PUSH
62082: LD_VAR 0 5
62086: PUSH
62087: LD_INT 1
62089: ARRAY
62090: PPUSH
62091: CALL_OW 255
62095: PUSH
62096: LD_VAR 0 1
62100: PPUSH
62101: CALL_OW 255
62105: NONEQUAL
62106: OR
62107: IFFALSE 62213
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
62109: LD_VAR 0 5
62113: PUSH
62114: LD_INT 1
62116: ARRAY
62117: PPUSH
62118: CALL_OW 305
62122: PUSH
62123: LD_VAR 0 5
62127: PUSH
62128: LD_INT 1
62130: ARRAY
62131: PPUSH
62132: CALL_OW 255
62136: PUSH
62137: LD_VAR 0 1
62141: PPUSH
62142: CALL_OW 255
62146: EQUAL
62147: AND
62148: IFFALSE 62172
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
62150: LD_VAR 0 5
62154: PUSH
62155: LD_INT 1
62157: ARRAY
62158: PPUSH
62159: LD_VAR 0 5
62163: PUSH
62164: LD_INT 2
62166: ARRAY
62167: PPUSH
62168: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
62172: LD_ADDR_EXP 38
62176: PUSH
62177: LD_EXP 38
62181: PPUSH
62182: LD_VAR 0 4
62186: PPUSH
62187: LD_EXP 38
62191: PUSH
62192: LD_VAR 0 4
62196: ARRAY
62197: PPUSH
62198: LD_VAR 0 3
62202: PPUSH
62203: CALL_OW 3
62207: PPUSH
62208: CALL_OW 1
62212: ST_TO_ADDR
// end ; end ;
62213: GO 62042
62215: POP
62216: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62217: LD_VAR 0 1
62221: PPUSH
62222: LD_EXP 38
62226: PUSH
62227: LD_VAR 0 4
62231: ARRAY
62232: PUSH
62233: LD_INT 0
62235: PLUS
62236: PPUSH
62237: CALL_OW 505
// end ;
62241: LD_VAR 0 2
62245: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
62246: LD_INT 0
62248: PPUSH
62249: PPUSH
62250: PPUSH
62251: PPUSH
// if not hack in hackTanks then
62252: LD_VAR 0 1
62256: PUSH
62257: LD_EXP 37
62261: IN
62262: NOT
62263: IFFALSE 62267
// exit ;
62265: GO 62352
// index := GetElementIndex ( hackTanks , hack ) ;
62267: LD_ADDR_VAR 0 5
62271: PUSH
62272: LD_EXP 37
62276: PPUSH
62277: LD_VAR 0 1
62281: PPUSH
62282: CALL 21282 0 2
62286: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
62287: LD_ADDR_VAR 0 4
62291: PUSH
62292: DOUBLE
62293: LD_INT 1
62295: DEC
62296: ST_TO_ADDR
62297: LD_EXP 38
62301: PUSH
62302: LD_VAR 0 5
62306: ARRAY
62307: PUSH
62308: FOR_TO
62309: IFFALSE 62350
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
62311: LD_EXP 38
62315: PUSH
62316: LD_VAR 0 5
62320: ARRAY
62321: PUSH
62322: LD_VAR 0 4
62326: ARRAY
62327: PUSH
62328: LD_INT 1
62330: ARRAY
62331: PUSH
62332: LD_VAR 0 2
62336: EQUAL
62337: IFFALSE 62348
// KillUnit ( vehicle ) ;
62339: LD_VAR 0 2
62343: PPUSH
62344: CALL_OW 66
62348: GO 62308
62350: POP
62351: POP
// end ;
62352: LD_VAR 0 3
62356: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
62357: LD_EXP 42
62361: NOT
62362: IFFALSE 62397
62364: GO 62366
62366: DISABLE
// begin initMiner := true ;
62367: LD_ADDR_EXP 42
62371: PUSH
62372: LD_INT 1
62374: ST_TO_ADDR
// minersList := [ ] ;
62375: LD_ADDR_EXP 43
62379: PUSH
62380: EMPTY
62381: ST_TO_ADDR
// minerMinesList := [ ] ;
62382: LD_ADDR_EXP 44
62386: PUSH
62387: EMPTY
62388: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
62389: LD_ADDR_EXP 45
62393: PUSH
62394: LD_INT 5
62396: ST_TO_ADDR
// end ;
62397: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
62398: LD_EXP 42
62402: PUSH
62403: LD_INT 34
62405: PUSH
62406: LD_INT 81
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PPUSH
62413: CALL_OW 69
62417: AND
62418: IFFALSE 62879
62420: GO 62422
62422: DISABLE
62423: LD_INT 0
62425: PPUSH
62426: PPUSH
62427: PPUSH
62428: PPUSH
// begin enable ;
62429: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
62430: LD_ADDR_VAR 0 1
62434: PUSH
62435: LD_INT 34
62437: PUSH
62438: LD_INT 81
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PPUSH
62445: CALL_OW 69
62449: PUSH
62450: FOR_IN
62451: IFFALSE 62523
// begin if not i in minersList then
62453: LD_VAR 0 1
62457: PUSH
62458: LD_EXP 43
62462: IN
62463: NOT
62464: IFFALSE 62521
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
62466: LD_ADDR_EXP 43
62470: PUSH
62471: LD_EXP 43
62475: PPUSH
62476: LD_EXP 43
62480: PUSH
62481: LD_INT 1
62483: PLUS
62484: PPUSH
62485: LD_VAR 0 1
62489: PPUSH
62490: CALL_OW 1
62494: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
62495: LD_ADDR_EXP 44
62499: PUSH
62500: LD_EXP 44
62504: PPUSH
62505: LD_EXP 44
62509: PUSH
62510: LD_INT 1
62512: PLUS
62513: PPUSH
62514: EMPTY
62515: PPUSH
62516: CALL_OW 1
62520: ST_TO_ADDR
// end end ;
62521: GO 62450
62523: POP
62524: POP
// for i := minerMinesList downto 1 do
62525: LD_ADDR_VAR 0 1
62529: PUSH
62530: DOUBLE
62531: LD_EXP 44
62535: INC
62536: ST_TO_ADDR
62537: LD_INT 1
62539: PUSH
62540: FOR_DOWNTO
62541: IFFALSE 62877
// begin if IsLive ( minersList [ i ] ) then
62543: LD_EXP 43
62547: PUSH
62548: LD_VAR 0 1
62552: ARRAY
62553: PPUSH
62554: CALL_OW 300
62558: IFFALSE 62586
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
62560: LD_EXP 43
62564: PUSH
62565: LD_VAR 0 1
62569: ARRAY
62570: PPUSH
62571: LD_EXP 44
62575: PUSH
62576: LD_VAR 0 1
62580: ARRAY
62581: PPUSH
62582: CALL_OW 505
// if not minerMinesList [ i ] then
62586: LD_EXP 44
62590: PUSH
62591: LD_VAR 0 1
62595: ARRAY
62596: NOT
62597: IFFALSE 62601
// continue ;
62599: GO 62540
// for j := minerMinesList [ i ] downto 1 do
62601: LD_ADDR_VAR 0 2
62605: PUSH
62606: DOUBLE
62607: LD_EXP 44
62611: PUSH
62612: LD_VAR 0 1
62616: ARRAY
62617: INC
62618: ST_TO_ADDR
62619: LD_INT 1
62621: PUSH
62622: FOR_DOWNTO
62623: IFFALSE 62873
// begin side := GetSide ( minersList [ i ] ) ;
62625: LD_ADDR_VAR 0 3
62629: PUSH
62630: LD_EXP 43
62634: PUSH
62635: LD_VAR 0 1
62639: ARRAY
62640: PPUSH
62641: CALL_OW 255
62645: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
62646: LD_ADDR_VAR 0 4
62650: PUSH
62651: LD_EXP 44
62655: PUSH
62656: LD_VAR 0 1
62660: ARRAY
62661: PUSH
62662: LD_VAR 0 2
62666: ARRAY
62667: PUSH
62668: LD_INT 1
62670: ARRAY
62671: PPUSH
62672: LD_EXP 44
62676: PUSH
62677: LD_VAR 0 1
62681: ARRAY
62682: PUSH
62683: LD_VAR 0 2
62687: ARRAY
62688: PUSH
62689: LD_INT 2
62691: ARRAY
62692: PPUSH
62693: CALL_OW 428
62697: ST_TO_ADDR
// if not tmp then
62698: LD_VAR 0 4
62702: NOT
62703: IFFALSE 62707
// continue ;
62705: GO 62622
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
62707: LD_VAR 0 4
62711: PUSH
62712: LD_INT 81
62714: PUSH
62715: LD_VAR 0 3
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PPUSH
62724: CALL_OW 69
62728: IN
62729: PUSH
62730: LD_EXP 44
62734: PUSH
62735: LD_VAR 0 1
62739: ARRAY
62740: PUSH
62741: LD_VAR 0 2
62745: ARRAY
62746: PUSH
62747: LD_INT 1
62749: ARRAY
62750: PPUSH
62751: LD_EXP 44
62755: PUSH
62756: LD_VAR 0 1
62760: ARRAY
62761: PUSH
62762: LD_VAR 0 2
62766: ARRAY
62767: PUSH
62768: LD_INT 2
62770: ARRAY
62771: PPUSH
62772: CALL_OW 458
62776: AND
62777: IFFALSE 62871
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
62779: LD_EXP 44
62783: PUSH
62784: LD_VAR 0 1
62788: ARRAY
62789: PUSH
62790: LD_VAR 0 2
62794: ARRAY
62795: PUSH
62796: LD_INT 1
62798: ARRAY
62799: PPUSH
62800: LD_EXP 44
62804: PUSH
62805: LD_VAR 0 1
62809: ARRAY
62810: PUSH
62811: LD_VAR 0 2
62815: ARRAY
62816: PUSH
62817: LD_INT 2
62819: ARRAY
62820: PPUSH
62821: LD_VAR 0 3
62825: PPUSH
62826: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
62830: LD_ADDR_EXP 44
62834: PUSH
62835: LD_EXP 44
62839: PPUSH
62840: LD_VAR 0 1
62844: PPUSH
62845: LD_EXP 44
62849: PUSH
62850: LD_VAR 0 1
62854: ARRAY
62855: PPUSH
62856: LD_VAR 0 2
62860: PPUSH
62861: CALL_OW 3
62865: PPUSH
62866: CALL_OW 1
62870: ST_TO_ADDR
// end ; end ;
62871: GO 62622
62873: POP
62874: POP
// end ;
62875: GO 62540
62877: POP
62878: POP
// end ;
62879: PPOPN 4
62881: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
62882: LD_INT 0
62884: PPUSH
62885: PPUSH
// result := false ;
62886: LD_ADDR_VAR 0 4
62890: PUSH
62891: LD_INT 0
62893: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
62894: LD_VAR 0 1
62898: PPUSH
62899: CALL_OW 264
62903: PUSH
62904: LD_INT 81
62906: EQUAL
62907: NOT
62908: IFFALSE 62912
// exit ;
62910: GO 63152
// index := GetElementIndex ( minersList , unit ) ;
62912: LD_ADDR_VAR 0 5
62916: PUSH
62917: LD_EXP 43
62921: PPUSH
62922: LD_VAR 0 1
62926: PPUSH
62927: CALL 21282 0 2
62931: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
62932: LD_EXP 44
62936: PUSH
62937: LD_VAR 0 5
62941: ARRAY
62942: PUSH
62943: LD_EXP 45
62947: GREATEREQUAL
62948: IFFALSE 62952
// exit ;
62950: GO 63152
// ComMoveXY ( unit , x , y ) ;
62952: LD_VAR 0 1
62956: PPUSH
62957: LD_VAR 0 2
62961: PPUSH
62962: LD_VAR 0 3
62966: PPUSH
62967: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62971: LD_INT 35
62973: PPUSH
62974: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
62978: LD_VAR 0 1
62982: PPUSH
62983: LD_VAR 0 2
62987: PPUSH
62988: LD_VAR 0 3
62992: PPUSH
62993: CALL 53023 0 3
62997: NOT
62998: PUSH
62999: LD_VAR 0 1
63003: PPUSH
63004: CALL_OW 314
63008: AND
63009: IFFALSE 63013
// exit ;
63011: GO 63152
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
63013: LD_VAR 0 2
63017: PPUSH
63018: LD_VAR 0 3
63022: PPUSH
63023: CALL_OW 428
63027: PUSH
63028: LD_VAR 0 1
63032: EQUAL
63033: PUSH
63034: LD_VAR 0 1
63038: PPUSH
63039: CALL_OW 314
63043: NOT
63044: AND
63045: IFFALSE 62971
// PlaySoundXY ( x , y , PlantMine ) ;
63047: LD_VAR 0 2
63051: PPUSH
63052: LD_VAR 0 3
63056: PPUSH
63057: LD_STRING PlantMine
63059: PPUSH
63060: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
63064: LD_VAR 0 2
63068: PPUSH
63069: LD_VAR 0 3
63073: PPUSH
63074: LD_VAR 0 1
63078: PPUSH
63079: CALL_OW 255
63083: PPUSH
63084: LD_INT 0
63086: PPUSH
63087: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
63091: LD_ADDR_EXP 44
63095: PUSH
63096: LD_EXP 44
63100: PPUSH
63101: LD_VAR 0 5
63105: PUSH
63106: LD_EXP 44
63110: PUSH
63111: LD_VAR 0 5
63115: ARRAY
63116: PUSH
63117: LD_INT 1
63119: PLUS
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PPUSH
63125: LD_VAR 0 2
63129: PUSH
63130: LD_VAR 0 3
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PPUSH
63139: CALL 21497 0 3
63143: ST_TO_ADDR
// result := true ;
63144: LD_ADDR_VAR 0 4
63148: PUSH
63149: LD_INT 1
63151: ST_TO_ADDR
// end ;
63152: LD_VAR 0 4
63156: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
63157: LD_INT 0
63159: PPUSH
63160: PPUSH
63161: PPUSH
// if not unit in minersList then
63162: LD_VAR 0 1
63166: PUSH
63167: LD_EXP 43
63171: IN
63172: NOT
63173: IFFALSE 63177
// exit ;
63175: GO 63569
// index := GetElementIndex ( minersList , unit ) ;
63177: LD_ADDR_VAR 0 6
63181: PUSH
63182: LD_EXP 43
63186: PPUSH
63187: LD_VAR 0 1
63191: PPUSH
63192: CALL 21282 0 2
63196: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
63197: LD_ADDR_VAR 0 5
63201: PUSH
63202: DOUBLE
63203: LD_EXP 44
63207: PUSH
63208: LD_VAR 0 6
63212: ARRAY
63213: INC
63214: ST_TO_ADDR
63215: LD_INT 1
63217: PUSH
63218: FOR_DOWNTO
63219: IFFALSE 63380
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
63221: LD_EXP 44
63225: PUSH
63226: LD_VAR 0 6
63230: ARRAY
63231: PUSH
63232: LD_VAR 0 5
63236: ARRAY
63237: PUSH
63238: LD_INT 1
63240: ARRAY
63241: PUSH
63242: LD_VAR 0 2
63246: EQUAL
63247: PUSH
63248: LD_EXP 44
63252: PUSH
63253: LD_VAR 0 6
63257: ARRAY
63258: PUSH
63259: LD_VAR 0 5
63263: ARRAY
63264: PUSH
63265: LD_INT 2
63267: ARRAY
63268: PUSH
63269: LD_VAR 0 3
63273: EQUAL
63274: AND
63275: IFFALSE 63378
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63277: LD_EXP 44
63281: PUSH
63282: LD_VAR 0 6
63286: ARRAY
63287: PUSH
63288: LD_VAR 0 5
63292: ARRAY
63293: PUSH
63294: LD_INT 1
63296: ARRAY
63297: PPUSH
63298: LD_EXP 44
63302: PUSH
63303: LD_VAR 0 6
63307: ARRAY
63308: PUSH
63309: LD_VAR 0 5
63313: ARRAY
63314: PUSH
63315: LD_INT 2
63317: ARRAY
63318: PPUSH
63319: LD_VAR 0 1
63323: PPUSH
63324: CALL_OW 255
63328: PPUSH
63329: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63333: LD_ADDR_EXP 44
63337: PUSH
63338: LD_EXP 44
63342: PPUSH
63343: LD_VAR 0 6
63347: PPUSH
63348: LD_EXP 44
63352: PUSH
63353: LD_VAR 0 6
63357: ARRAY
63358: PPUSH
63359: LD_VAR 0 5
63363: PPUSH
63364: CALL_OW 3
63368: PPUSH
63369: CALL_OW 1
63373: ST_TO_ADDR
// exit ;
63374: POP
63375: POP
63376: GO 63569
// end ; end ;
63378: GO 63218
63380: POP
63381: POP
// for i := minerMinesList [ index ] downto 1 do
63382: LD_ADDR_VAR 0 5
63386: PUSH
63387: DOUBLE
63388: LD_EXP 44
63392: PUSH
63393: LD_VAR 0 6
63397: ARRAY
63398: INC
63399: ST_TO_ADDR
63400: LD_INT 1
63402: PUSH
63403: FOR_DOWNTO
63404: IFFALSE 63567
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
63406: LD_EXP 44
63410: PUSH
63411: LD_VAR 0 6
63415: ARRAY
63416: PUSH
63417: LD_VAR 0 5
63421: ARRAY
63422: PUSH
63423: LD_INT 1
63425: ARRAY
63426: PPUSH
63427: LD_EXP 44
63431: PUSH
63432: LD_VAR 0 6
63436: ARRAY
63437: PUSH
63438: LD_VAR 0 5
63442: ARRAY
63443: PUSH
63444: LD_INT 2
63446: ARRAY
63447: PPUSH
63448: LD_VAR 0 2
63452: PPUSH
63453: LD_VAR 0 3
63457: PPUSH
63458: CALL_OW 298
63462: PUSH
63463: LD_INT 6
63465: LESS
63466: IFFALSE 63565
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63468: LD_EXP 44
63472: PUSH
63473: LD_VAR 0 6
63477: ARRAY
63478: PUSH
63479: LD_VAR 0 5
63483: ARRAY
63484: PUSH
63485: LD_INT 1
63487: ARRAY
63488: PPUSH
63489: LD_EXP 44
63493: PUSH
63494: LD_VAR 0 6
63498: ARRAY
63499: PUSH
63500: LD_VAR 0 5
63504: ARRAY
63505: PUSH
63506: LD_INT 2
63508: ARRAY
63509: PPUSH
63510: LD_VAR 0 1
63514: PPUSH
63515: CALL_OW 255
63519: PPUSH
63520: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63524: LD_ADDR_EXP 44
63528: PUSH
63529: LD_EXP 44
63533: PPUSH
63534: LD_VAR 0 6
63538: PPUSH
63539: LD_EXP 44
63543: PUSH
63544: LD_VAR 0 6
63548: ARRAY
63549: PPUSH
63550: LD_VAR 0 5
63554: PPUSH
63555: CALL_OW 3
63559: PPUSH
63560: CALL_OW 1
63564: ST_TO_ADDR
// end ; end ;
63565: GO 63403
63567: POP
63568: POP
// end ;
63569: LD_VAR 0 4
63573: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
63574: LD_INT 0
63576: PPUSH
63577: PPUSH
63578: PPUSH
63579: PPUSH
63580: PPUSH
63581: PPUSH
63582: PPUSH
63583: PPUSH
63584: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
63585: LD_VAR 0 1
63589: PPUSH
63590: CALL_OW 264
63594: PUSH
63595: LD_INT 81
63597: EQUAL
63598: NOT
63599: PUSH
63600: LD_VAR 0 1
63604: PUSH
63605: LD_EXP 43
63609: IN
63610: NOT
63611: OR
63612: IFFALSE 63616
// exit ;
63614: GO 63938
// index := GetElementIndex ( minersList , unit ) ;
63616: LD_ADDR_VAR 0 6
63620: PUSH
63621: LD_EXP 43
63625: PPUSH
63626: LD_VAR 0 1
63630: PPUSH
63631: CALL 21282 0 2
63635: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
63636: LD_ADDR_VAR 0 8
63640: PUSH
63641: LD_EXP 45
63645: PUSH
63646: LD_EXP 44
63650: PUSH
63651: LD_VAR 0 6
63655: ARRAY
63656: MINUS
63657: ST_TO_ADDR
// if not minesFreeAmount then
63658: LD_VAR 0 8
63662: NOT
63663: IFFALSE 63667
// exit ;
63665: GO 63938
// tmp := [ ] ;
63667: LD_ADDR_VAR 0 7
63671: PUSH
63672: EMPTY
63673: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
63674: LD_ADDR_VAR 0 5
63678: PUSH
63679: DOUBLE
63680: LD_INT 1
63682: DEC
63683: ST_TO_ADDR
63684: LD_VAR 0 8
63688: PUSH
63689: FOR_TO
63690: IFFALSE 63885
// begin _d := rand ( 0 , 5 ) ;
63692: LD_ADDR_VAR 0 11
63696: PUSH
63697: LD_INT 0
63699: PPUSH
63700: LD_INT 5
63702: PPUSH
63703: CALL_OW 12
63707: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
63708: LD_ADDR_VAR 0 12
63712: PUSH
63713: LD_INT 2
63715: PPUSH
63716: LD_INT 6
63718: PPUSH
63719: CALL_OW 12
63723: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
63724: LD_ADDR_VAR 0 9
63728: PUSH
63729: LD_VAR 0 2
63733: PPUSH
63734: LD_VAR 0 11
63738: PPUSH
63739: LD_VAR 0 12
63743: PPUSH
63744: CALL_OW 272
63748: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
63749: LD_ADDR_VAR 0 10
63753: PUSH
63754: LD_VAR 0 3
63758: PPUSH
63759: LD_VAR 0 11
63763: PPUSH
63764: LD_VAR 0 12
63768: PPUSH
63769: CALL_OW 273
63773: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
63774: LD_VAR 0 9
63778: PPUSH
63779: LD_VAR 0 10
63783: PPUSH
63784: CALL_OW 488
63788: PUSH
63789: LD_VAR 0 9
63793: PUSH
63794: LD_VAR 0 10
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_VAR 0 7
63807: IN
63808: NOT
63809: AND
63810: PUSH
63811: LD_VAR 0 9
63815: PPUSH
63816: LD_VAR 0 10
63820: PPUSH
63821: CALL_OW 458
63825: NOT
63826: AND
63827: IFFALSE 63869
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
63829: LD_ADDR_VAR 0 7
63833: PUSH
63834: LD_VAR 0 7
63838: PPUSH
63839: LD_VAR 0 7
63843: PUSH
63844: LD_INT 1
63846: PLUS
63847: PPUSH
63848: LD_VAR 0 9
63852: PUSH
63853: LD_VAR 0 10
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PPUSH
63862: CALL_OW 1
63866: ST_TO_ADDR
63867: GO 63883
// i := i - 1 ;
63869: LD_ADDR_VAR 0 5
63873: PUSH
63874: LD_VAR 0 5
63878: PUSH
63879: LD_INT 1
63881: MINUS
63882: ST_TO_ADDR
// end ;
63883: GO 63689
63885: POP
63886: POP
// for i in tmp do
63887: LD_ADDR_VAR 0 5
63891: PUSH
63892: LD_VAR 0 7
63896: PUSH
63897: FOR_IN
63898: IFFALSE 63936
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
63900: LD_VAR 0 1
63904: PPUSH
63905: LD_VAR 0 5
63909: PUSH
63910: LD_INT 1
63912: ARRAY
63913: PPUSH
63914: LD_VAR 0 5
63918: PUSH
63919: LD_INT 2
63921: ARRAY
63922: PPUSH
63923: CALL 62882 0 3
63927: NOT
63928: IFFALSE 63934
// exit ;
63930: POP
63931: POP
63932: GO 63938
63934: GO 63897
63936: POP
63937: POP
// end ;
63938: LD_VAR 0 4
63942: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
63943: LD_INT 0
63945: PPUSH
63946: PPUSH
63947: PPUSH
63948: PPUSH
63949: PPUSH
63950: PPUSH
63951: PPUSH
// if not GetClass ( unit ) = class_sniper then
63952: LD_VAR 0 1
63956: PPUSH
63957: CALL_OW 257
63961: PUSH
63962: LD_INT 5
63964: EQUAL
63965: NOT
63966: IFFALSE 63970
// exit ;
63968: GO 64358
// dist := 8 ;
63970: LD_ADDR_VAR 0 5
63974: PUSH
63975: LD_INT 8
63977: ST_TO_ADDR
// viewRange := 12 ;
63978: LD_ADDR_VAR 0 7
63982: PUSH
63983: LD_INT 12
63985: ST_TO_ADDR
// side := GetSide ( unit ) ;
63986: LD_ADDR_VAR 0 6
63990: PUSH
63991: LD_VAR 0 1
63995: PPUSH
63996: CALL_OW 255
64000: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
64001: LD_INT 61
64003: PPUSH
64004: LD_VAR 0 6
64008: PPUSH
64009: CALL_OW 321
64013: PUSH
64014: LD_INT 2
64016: EQUAL
64017: IFFALSE 64027
// viewRange := 16 ;
64019: LD_ADDR_VAR 0 7
64023: PUSH
64024: LD_INT 16
64026: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
64027: LD_VAR 0 1
64031: PPUSH
64032: LD_VAR 0 2
64036: PPUSH
64037: LD_VAR 0 3
64041: PPUSH
64042: CALL_OW 297
64046: PUSH
64047: LD_VAR 0 5
64051: GREATER
64052: IFFALSE 64131
// begin ComMoveXY ( unit , x , y ) ;
64054: LD_VAR 0 1
64058: PPUSH
64059: LD_VAR 0 2
64063: PPUSH
64064: LD_VAR 0 3
64068: PPUSH
64069: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64073: LD_INT 35
64075: PPUSH
64076: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
64080: LD_VAR 0 1
64084: PPUSH
64085: LD_VAR 0 2
64089: PPUSH
64090: LD_VAR 0 3
64094: PPUSH
64095: CALL 53023 0 3
64099: NOT
64100: IFFALSE 64104
// exit ;
64102: GO 64358
// until GetDistUnitXY ( unit , x , y ) < dist ;
64104: LD_VAR 0 1
64108: PPUSH
64109: LD_VAR 0 2
64113: PPUSH
64114: LD_VAR 0 3
64118: PPUSH
64119: CALL_OW 297
64123: PUSH
64124: LD_VAR 0 5
64128: LESS
64129: IFFALSE 64073
// end ; ComTurnXY ( unit , x , y ) ;
64131: LD_VAR 0 1
64135: PPUSH
64136: LD_VAR 0 2
64140: PPUSH
64141: LD_VAR 0 3
64145: PPUSH
64146: CALL_OW 118
// wait ( 5 ) ;
64150: LD_INT 5
64152: PPUSH
64153: CALL_OW 67
// _d := GetDir ( unit ) ;
64157: LD_ADDR_VAR 0 10
64161: PUSH
64162: LD_VAR 0 1
64166: PPUSH
64167: CALL_OW 254
64171: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
64172: LD_ADDR_VAR 0 8
64176: PUSH
64177: LD_VAR 0 1
64181: PPUSH
64182: CALL_OW 250
64186: PPUSH
64187: LD_VAR 0 10
64191: PPUSH
64192: LD_VAR 0 5
64196: PPUSH
64197: CALL_OW 272
64201: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
64202: LD_ADDR_VAR 0 9
64206: PUSH
64207: LD_VAR 0 1
64211: PPUSH
64212: CALL_OW 251
64216: PPUSH
64217: LD_VAR 0 10
64221: PPUSH
64222: LD_VAR 0 5
64226: PPUSH
64227: CALL_OW 273
64231: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64232: LD_VAR 0 8
64236: PPUSH
64237: LD_VAR 0 9
64241: PPUSH
64242: CALL_OW 488
64246: NOT
64247: IFFALSE 64251
// exit ;
64249: GO 64358
// ComAnimCustom ( unit , 1 ) ;
64251: LD_VAR 0 1
64255: PPUSH
64256: LD_INT 1
64258: PPUSH
64259: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
64263: LD_VAR 0 8
64267: PPUSH
64268: LD_VAR 0 9
64272: PPUSH
64273: LD_VAR 0 6
64277: PPUSH
64278: LD_VAR 0 7
64282: PPUSH
64283: CALL_OW 330
// repeat wait ( 1 ) ;
64287: LD_INT 1
64289: PPUSH
64290: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
64294: LD_VAR 0 1
64298: PPUSH
64299: CALL_OW 316
64303: PUSH
64304: LD_VAR 0 1
64308: PPUSH
64309: CALL_OW 314
64313: OR
64314: PUSH
64315: LD_VAR 0 1
64319: PPUSH
64320: CALL_OW 302
64324: NOT
64325: OR
64326: PUSH
64327: LD_VAR 0 1
64331: PPUSH
64332: CALL_OW 301
64336: OR
64337: IFFALSE 64287
// RemoveSeeing ( _x , _y , side ) ;
64339: LD_VAR 0 8
64343: PPUSH
64344: LD_VAR 0 9
64348: PPUSH
64349: LD_VAR 0 6
64353: PPUSH
64354: CALL_OW 331
// end ; end_of_file
64358: LD_VAR 0 4
64362: RET
// export globalGameSaveCounter ; every 0 0$1 do
64363: GO 64365
64365: DISABLE
// begin enable ;
64366: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
64367: LD_STRING updateTimer(
64369: PUSH
64370: LD_OWVAR 1
64374: STR
64375: PUSH
64376: LD_STRING );
64378: STR
64379: PPUSH
64380: CALL_OW 559
// end ;
64384: END
// every 0 0$1 do
64385: GO 64387
64387: DISABLE
// begin globalGameSaveCounter := 0 ;
64388: LD_ADDR_EXP 46
64392: PUSH
64393: LD_INT 0
64395: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
64396: LD_STRING setGameSaveCounter(0)
64398: PPUSH
64399: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
64403: LD_STRING initStreamRollete();
64405: PPUSH
64406: CALL_OW 559
// InitStreamMode ;
64410: CALL 65753 0 0
// DefineStreamItems ( false ) ;
64414: LD_INT 0
64416: PPUSH
64417: CALL 66217 0 1
// end ;
64421: END
// export function SOS_MapStart ( ) ; begin
64422: LD_INT 0
64424: PPUSH
// if streamModeActive then
64425: LD_EXP 47
64429: IFFALSE 64438
// DefineStreamItems ( true ) ;
64431: LD_INT 1
64433: PPUSH
64434: CALL 66217 0 1
// UpdateLuaVariables ( ) ;
64438: CALL 64455 0 0
// UpdateFactoryWaypoints ( ) ;
64442: CALL 79086 0 0
// UpdateWarehouseGatheringPoints ( ) ;
64446: CALL 79343 0 0
// end ;
64450: LD_VAR 0 1
64454: RET
// function UpdateLuaVariables ( ) ; begin
64455: LD_INT 0
64457: PPUSH
// if globalGameSaveCounter then
64458: LD_EXP 46
64462: IFFALSE 64496
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
64464: LD_ADDR_EXP 46
64468: PUSH
64469: LD_EXP 46
64473: PPUSH
64474: CALL 55587 0 1
64478: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
64479: LD_STRING setGameSaveCounter(
64481: PUSH
64482: LD_EXP 46
64486: STR
64487: PUSH
64488: LD_STRING )
64490: STR
64491: PPUSH
64492: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
64496: LD_STRING setGameDifficulty(
64498: PUSH
64499: LD_OWVAR 67
64503: STR
64504: PUSH
64505: LD_STRING )
64507: STR
64508: PPUSH
64509: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
64513: LD_STRING displayDifficulty(
64515: PUSH
64516: LD_OWVAR 67
64520: STR
64521: PUSH
64522: LD_STRING )
64524: STR
64525: PPUSH
64526: CALL_OW 559
// end ;
64530: LD_VAR 0 1
64534: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64535: LD_INT 0
64537: PPUSH
// if p2 = stream_mode then
64538: LD_VAR 0 2
64542: PUSH
64543: LD_INT 100
64545: EQUAL
64546: IFFALSE 65549
// begin if not StreamModeActive then
64548: LD_EXP 47
64552: NOT
64553: IFFALSE 64563
// StreamModeActive := true ;
64555: LD_ADDR_EXP 47
64559: PUSH
64560: LD_INT 1
64562: ST_TO_ADDR
// if p3 = 0 then
64563: LD_VAR 0 3
64567: PUSH
64568: LD_INT 0
64570: EQUAL
64571: IFFALSE 64577
// InitStreamMode ;
64573: CALL 65753 0 0
// if p3 = 1 then
64577: LD_VAR 0 3
64581: PUSH
64582: LD_INT 1
64584: EQUAL
64585: IFFALSE 64595
// sRocket := true ;
64587: LD_ADDR_EXP 52
64591: PUSH
64592: LD_INT 1
64594: ST_TO_ADDR
// if p3 = 2 then
64595: LD_VAR 0 3
64599: PUSH
64600: LD_INT 2
64602: EQUAL
64603: IFFALSE 64613
// sSpeed := true ;
64605: LD_ADDR_EXP 51
64609: PUSH
64610: LD_INT 1
64612: ST_TO_ADDR
// if p3 = 3 then
64613: LD_VAR 0 3
64617: PUSH
64618: LD_INT 3
64620: EQUAL
64621: IFFALSE 64631
// sEngine := true ;
64623: LD_ADDR_EXP 53
64627: PUSH
64628: LD_INT 1
64630: ST_TO_ADDR
// if p3 = 4 then
64631: LD_VAR 0 3
64635: PUSH
64636: LD_INT 4
64638: EQUAL
64639: IFFALSE 64649
// sSpec := true ;
64641: LD_ADDR_EXP 50
64645: PUSH
64646: LD_INT 1
64648: ST_TO_ADDR
// if p3 = 5 then
64649: LD_VAR 0 3
64653: PUSH
64654: LD_INT 5
64656: EQUAL
64657: IFFALSE 64667
// sLevel := true ;
64659: LD_ADDR_EXP 54
64663: PUSH
64664: LD_INT 1
64666: ST_TO_ADDR
// if p3 = 6 then
64667: LD_VAR 0 3
64671: PUSH
64672: LD_INT 6
64674: EQUAL
64675: IFFALSE 64685
// sArmoury := true ;
64677: LD_ADDR_EXP 55
64681: PUSH
64682: LD_INT 1
64684: ST_TO_ADDR
// if p3 = 7 then
64685: LD_VAR 0 3
64689: PUSH
64690: LD_INT 7
64692: EQUAL
64693: IFFALSE 64703
// sRadar := true ;
64695: LD_ADDR_EXP 56
64699: PUSH
64700: LD_INT 1
64702: ST_TO_ADDR
// if p3 = 8 then
64703: LD_VAR 0 3
64707: PUSH
64708: LD_INT 8
64710: EQUAL
64711: IFFALSE 64721
// sBunker := true ;
64713: LD_ADDR_EXP 57
64717: PUSH
64718: LD_INT 1
64720: ST_TO_ADDR
// if p3 = 9 then
64721: LD_VAR 0 3
64725: PUSH
64726: LD_INT 9
64728: EQUAL
64729: IFFALSE 64739
// sHack := true ;
64731: LD_ADDR_EXP 58
64735: PUSH
64736: LD_INT 1
64738: ST_TO_ADDR
// if p3 = 10 then
64739: LD_VAR 0 3
64743: PUSH
64744: LD_INT 10
64746: EQUAL
64747: IFFALSE 64757
// sFire := true ;
64749: LD_ADDR_EXP 59
64753: PUSH
64754: LD_INT 1
64756: ST_TO_ADDR
// if p3 = 11 then
64757: LD_VAR 0 3
64761: PUSH
64762: LD_INT 11
64764: EQUAL
64765: IFFALSE 64775
// sRefresh := true ;
64767: LD_ADDR_EXP 60
64771: PUSH
64772: LD_INT 1
64774: ST_TO_ADDR
// if p3 = 12 then
64775: LD_VAR 0 3
64779: PUSH
64780: LD_INT 12
64782: EQUAL
64783: IFFALSE 64793
// sExp := true ;
64785: LD_ADDR_EXP 61
64789: PUSH
64790: LD_INT 1
64792: ST_TO_ADDR
// if p3 = 13 then
64793: LD_VAR 0 3
64797: PUSH
64798: LD_INT 13
64800: EQUAL
64801: IFFALSE 64811
// sDepot := true ;
64803: LD_ADDR_EXP 62
64807: PUSH
64808: LD_INT 1
64810: ST_TO_ADDR
// if p3 = 14 then
64811: LD_VAR 0 3
64815: PUSH
64816: LD_INT 14
64818: EQUAL
64819: IFFALSE 64829
// sFlag := true ;
64821: LD_ADDR_EXP 63
64825: PUSH
64826: LD_INT 1
64828: ST_TO_ADDR
// if p3 = 15 then
64829: LD_VAR 0 3
64833: PUSH
64834: LD_INT 15
64836: EQUAL
64837: IFFALSE 64847
// sKamikadze := true ;
64839: LD_ADDR_EXP 71
64843: PUSH
64844: LD_INT 1
64846: ST_TO_ADDR
// if p3 = 16 then
64847: LD_VAR 0 3
64851: PUSH
64852: LD_INT 16
64854: EQUAL
64855: IFFALSE 64865
// sTroll := true ;
64857: LD_ADDR_EXP 72
64861: PUSH
64862: LD_INT 1
64864: ST_TO_ADDR
// if p3 = 17 then
64865: LD_VAR 0 3
64869: PUSH
64870: LD_INT 17
64872: EQUAL
64873: IFFALSE 64883
// sSlow := true ;
64875: LD_ADDR_EXP 73
64879: PUSH
64880: LD_INT 1
64882: ST_TO_ADDR
// if p3 = 18 then
64883: LD_VAR 0 3
64887: PUSH
64888: LD_INT 18
64890: EQUAL
64891: IFFALSE 64901
// sLack := true ;
64893: LD_ADDR_EXP 74
64897: PUSH
64898: LD_INT 1
64900: ST_TO_ADDR
// if p3 = 19 then
64901: LD_VAR 0 3
64905: PUSH
64906: LD_INT 19
64908: EQUAL
64909: IFFALSE 64919
// sTank := true ;
64911: LD_ADDR_EXP 76
64915: PUSH
64916: LD_INT 1
64918: ST_TO_ADDR
// if p3 = 20 then
64919: LD_VAR 0 3
64923: PUSH
64924: LD_INT 20
64926: EQUAL
64927: IFFALSE 64937
// sRemote := true ;
64929: LD_ADDR_EXP 77
64933: PUSH
64934: LD_INT 1
64936: ST_TO_ADDR
// if p3 = 21 then
64937: LD_VAR 0 3
64941: PUSH
64942: LD_INT 21
64944: EQUAL
64945: IFFALSE 64955
// sPowell := true ;
64947: LD_ADDR_EXP 78
64951: PUSH
64952: LD_INT 1
64954: ST_TO_ADDR
// if p3 = 22 then
64955: LD_VAR 0 3
64959: PUSH
64960: LD_INT 22
64962: EQUAL
64963: IFFALSE 64973
// sTeleport := true ;
64965: LD_ADDR_EXP 81
64969: PUSH
64970: LD_INT 1
64972: ST_TO_ADDR
// if p3 = 23 then
64973: LD_VAR 0 3
64977: PUSH
64978: LD_INT 23
64980: EQUAL
64981: IFFALSE 64991
// sOilTower := true ;
64983: LD_ADDR_EXP 83
64987: PUSH
64988: LD_INT 1
64990: ST_TO_ADDR
// if p3 = 24 then
64991: LD_VAR 0 3
64995: PUSH
64996: LD_INT 24
64998: EQUAL
64999: IFFALSE 65009
// sShovel := true ;
65001: LD_ADDR_EXP 84
65005: PUSH
65006: LD_INT 1
65008: ST_TO_ADDR
// if p3 = 25 then
65009: LD_VAR 0 3
65013: PUSH
65014: LD_INT 25
65016: EQUAL
65017: IFFALSE 65027
// sSheik := true ;
65019: LD_ADDR_EXP 85
65023: PUSH
65024: LD_INT 1
65026: ST_TO_ADDR
// if p3 = 26 then
65027: LD_VAR 0 3
65031: PUSH
65032: LD_INT 26
65034: EQUAL
65035: IFFALSE 65045
// sEarthquake := true ;
65037: LD_ADDR_EXP 87
65041: PUSH
65042: LD_INT 1
65044: ST_TO_ADDR
// if p3 = 27 then
65045: LD_VAR 0 3
65049: PUSH
65050: LD_INT 27
65052: EQUAL
65053: IFFALSE 65063
// sAI := true ;
65055: LD_ADDR_EXP 88
65059: PUSH
65060: LD_INT 1
65062: ST_TO_ADDR
// if p3 = 28 then
65063: LD_VAR 0 3
65067: PUSH
65068: LD_INT 28
65070: EQUAL
65071: IFFALSE 65081
// sCargo := true ;
65073: LD_ADDR_EXP 91
65077: PUSH
65078: LD_INT 1
65080: ST_TO_ADDR
// if p3 = 29 then
65081: LD_VAR 0 3
65085: PUSH
65086: LD_INT 29
65088: EQUAL
65089: IFFALSE 65099
// sDLaser := true ;
65091: LD_ADDR_EXP 92
65095: PUSH
65096: LD_INT 1
65098: ST_TO_ADDR
// if p3 = 30 then
65099: LD_VAR 0 3
65103: PUSH
65104: LD_INT 30
65106: EQUAL
65107: IFFALSE 65117
// sExchange := true ;
65109: LD_ADDR_EXP 93
65113: PUSH
65114: LD_INT 1
65116: ST_TO_ADDR
// if p3 = 31 then
65117: LD_VAR 0 3
65121: PUSH
65122: LD_INT 31
65124: EQUAL
65125: IFFALSE 65135
// sFac := true ;
65127: LD_ADDR_EXP 94
65131: PUSH
65132: LD_INT 1
65134: ST_TO_ADDR
// if p3 = 32 then
65135: LD_VAR 0 3
65139: PUSH
65140: LD_INT 32
65142: EQUAL
65143: IFFALSE 65153
// sPower := true ;
65145: LD_ADDR_EXP 95
65149: PUSH
65150: LD_INT 1
65152: ST_TO_ADDR
// if p3 = 33 then
65153: LD_VAR 0 3
65157: PUSH
65158: LD_INT 33
65160: EQUAL
65161: IFFALSE 65171
// sRandom := true ;
65163: LD_ADDR_EXP 96
65167: PUSH
65168: LD_INT 1
65170: ST_TO_ADDR
// if p3 = 34 then
65171: LD_VAR 0 3
65175: PUSH
65176: LD_INT 34
65178: EQUAL
65179: IFFALSE 65189
// sShield := true ;
65181: LD_ADDR_EXP 97
65185: PUSH
65186: LD_INT 1
65188: ST_TO_ADDR
// if p3 = 35 then
65189: LD_VAR 0 3
65193: PUSH
65194: LD_INT 35
65196: EQUAL
65197: IFFALSE 65207
// sTime := true ;
65199: LD_ADDR_EXP 98
65203: PUSH
65204: LD_INT 1
65206: ST_TO_ADDR
// if p3 = 36 then
65207: LD_VAR 0 3
65211: PUSH
65212: LD_INT 36
65214: EQUAL
65215: IFFALSE 65225
// sTools := true ;
65217: LD_ADDR_EXP 99
65221: PUSH
65222: LD_INT 1
65224: ST_TO_ADDR
// if p3 = 101 then
65225: LD_VAR 0 3
65229: PUSH
65230: LD_INT 101
65232: EQUAL
65233: IFFALSE 65243
// sSold := true ;
65235: LD_ADDR_EXP 64
65239: PUSH
65240: LD_INT 1
65242: ST_TO_ADDR
// if p3 = 102 then
65243: LD_VAR 0 3
65247: PUSH
65248: LD_INT 102
65250: EQUAL
65251: IFFALSE 65261
// sDiff := true ;
65253: LD_ADDR_EXP 65
65257: PUSH
65258: LD_INT 1
65260: ST_TO_ADDR
// if p3 = 103 then
65261: LD_VAR 0 3
65265: PUSH
65266: LD_INT 103
65268: EQUAL
65269: IFFALSE 65279
// sFog := true ;
65271: LD_ADDR_EXP 68
65275: PUSH
65276: LD_INT 1
65278: ST_TO_ADDR
// if p3 = 104 then
65279: LD_VAR 0 3
65283: PUSH
65284: LD_INT 104
65286: EQUAL
65287: IFFALSE 65297
// sReset := true ;
65289: LD_ADDR_EXP 69
65293: PUSH
65294: LD_INT 1
65296: ST_TO_ADDR
// if p3 = 105 then
65297: LD_VAR 0 3
65301: PUSH
65302: LD_INT 105
65304: EQUAL
65305: IFFALSE 65315
// sSun := true ;
65307: LD_ADDR_EXP 70
65311: PUSH
65312: LD_INT 1
65314: ST_TO_ADDR
// if p3 = 106 then
65315: LD_VAR 0 3
65319: PUSH
65320: LD_INT 106
65322: EQUAL
65323: IFFALSE 65333
// sTiger := true ;
65325: LD_ADDR_EXP 66
65329: PUSH
65330: LD_INT 1
65332: ST_TO_ADDR
// if p3 = 107 then
65333: LD_VAR 0 3
65337: PUSH
65338: LD_INT 107
65340: EQUAL
65341: IFFALSE 65351
// sBomb := true ;
65343: LD_ADDR_EXP 67
65347: PUSH
65348: LD_INT 1
65350: ST_TO_ADDR
// if p3 = 108 then
65351: LD_VAR 0 3
65355: PUSH
65356: LD_INT 108
65358: EQUAL
65359: IFFALSE 65369
// sWound := true ;
65361: LD_ADDR_EXP 75
65365: PUSH
65366: LD_INT 1
65368: ST_TO_ADDR
// if p3 = 109 then
65369: LD_VAR 0 3
65373: PUSH
65374: LD_INT 109
65376: EQUAL
65377: IFFALSE 65387
// sBetray := true ;
65379: LD_ADDR_EXP 79
65383: PUSH
65384: LD_INT 1
65386: ST_TO_ADDR
// if p3 = 110 then
65387: LD_VAR 0 3
65391: PUSH
65392: LD_INT 110
65394: EQUAL
65395: IFFALSE 65405
// sContamin := true ;
65397: LD_ADDR_EXP 80
65401: PUSH
65402: LD_INT 1
65404: ST_TO_ADDR
// if p3 = 111 then
65405: LD_VAR 0 3
65409: PUSH
65410: LD_INT 111
65412: EQUAL
65413: IFFALSE 65423
// sOil := true ;
65415: LD_ADDR_EXP 82
65419: PUSH
65420: LD_INT 1
65422: ST_TO_ADDR
// if p3 = 112 then
65423: LD_VAR 0 3
65427: PUSH
65428: LD_INT 112
65430: EQUAL
65431: IFFALSE 65441
// sStu := true ;
65433: LD_ADDR_EXP 86
65437: PUSH
65438: LD_INT 1
65440: ST_TO_ADDR
// if p3 = 113 then
65441: LD_VAR 0 3
65445: PUSH
65446: LD_INT 113
65448: EQUAL
65449: IFFALSE 65459
// sBazooka := true ;
65451: LD_ADDR_EXP 89
65455: PUSH
65456: LD_INT 1
65458: ST_TO_ADDR
// if p3 = 114 then
65459: LD_VAR 0 3
65463: PUSH
65464: LD_INT 114
65466: EQUAL
65467: IFFALSE 65477
// sMortar := true ;
65469: LD_ADDR_EXP 90
65473: PUSH
65474: LD_INT 1
65476: ST_TO_ADDR
// if p3 = 115 then
65477: LD_VAR 0 3
65481: PUSH
65482: LD_INT 115
65484: EQUAL
65485: IFFALSE 65495
// sRanger := true ;
65487: LD_ADDR_EXP 100
65491: PUSH
65492: LD_INT 1
65494: ST_TO_ADDR
// if p3 = 116 then
65495: LD_VAR 0 3
65499: PUSH
65500: LD_INT 116
65502: EQUAL
65503: IFFALSE 65513
// sComputer := true ;
65505: LD_ADDR_EXP 101
65509: PUSH
65510: LD_INT 1
65512: ST_TO_ADDR
// if p3 = 117 then
65513: LD_VAR 0 3
65517: PUSH
65518: LD_INT 117
65520: EQUAL
65521: IFFALSE 65531
// s30 := true ;
65523: LD_ADDR_EXP 102
65527: PUSH
65528: LD_INT 1
65530: ST_TO_ADDR
// if p3 = 118 then
65531: LD_VAR 0 3
65535: PUSH
65536: LD_INT 118
65538: EQUAL
65539: IFFALSE 65549
// s60 := true ;
65541: LD_ADDR_EXP 103
65545: PUSH
65546: LD_INT 1
65548: ST_TO_ADDR
// end ; if p2 = hack_mode then
65549: LD_VAR 0 2
65553: PUSH
65554: LD_INT 101
65556: EQUAL
65557: IFFALSE 65685
// begin case p3 of 1 :
65559: LD_VAR 0 3
65563: PUSH
65564: LD_INT 1
65566: DOUBLE
65567: EQUAL
65568: IFTRUE 65572
65570: GO 65579
65572: POP
// hHackUnlimitedResources ; 2 :
65573: CALL 77832 0 0
65577: GO 65685
65579: LD_INT 2
65581: DOUBLE
65582: EQUAL
65583: IFTRUE 65587
65585: GO 65594
65587: POP
// hHackSetLevel10 ; 3 :
65588: CALL 77965 0 0
65592: GO 65685
65594: LD_INT 3
65596: DOUBLE
65597: EQUAL
65598: IFTRUE 65602
65600: GO 65609
65602: POP
// hHackSetLevel10YourUnits ; 4 :
65603: CALL 78050 0 0
65607: GO 65685
65609: LD_INT 4
65611: DOUBLE
65612: EQUAL
65613: IFTRUE 65617
65615: GO 65624
65617: POP
// hHackInvincible ; 5 :
65618: CALL 78498 0 0
65622: GO 65685
65624: LD_INT 5
65626: DOUBLE
65627: EQUAL
65628: IFTRUE 65632
65630: GO 65639
65632: POP
// hHackInvisible ; 6 :
65633: CALL 78609 0 0
65637: GO 65685
65639: LD_INT 6
65641: DOUBLE
65642: EQUAL
65643: IFTRUE 65647
65645: GO 65654
65647: POP
// hHackChangeYourSide ; 7 :
65648: CALL 78666 0 0
65652: GO 65685
65654: LD_INT 7
65656: DOUBLE
65657: EQUAL
65658: IFTRUE 65662
65660: GO 65669
65662: POP
// hHackChangeUnitSide ; 8 :
65663: CALL 78708 0 0
65667: GO 65685
65669: LD_INT 8
65671: DOUBLE
65672: EQUAL
65673: IFTRUE 65677
65675: GO 65684
65677: POP
// hHackFog ; end ;
65678: CALL 78809 0 0
65682: GO 65685
65684: POP
// end ; if p2 = game_save_mode then
65685: LD_VAR 0 2
65689: PUSH
65690: LD_INT 102
65692: EQUAL
65693: IFFALSE 65748
// begin if p3 = 1 then
65695: LD_VAR 0 3
65699: PUSH
65700: LD_INT 1
65702: EQUAL
65703: IFFALSE 65715
// globalGameSaveCounter := p4 ;
65705: LD_ADDR_EXP 46
65709: PUSH
65710: LD_VAR 0 4
65714: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
65715: LD_VAR 0 3
65719: PUSH
65720: LD_INT 2
65722: EQUAL
65723: PUSH
65724: LD_EXP 46
65728: AND
65729: IFFALSE 65748
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
65731: LD_STRING setGameSaveCounter(
65733: PUSH
65734: LD_EXP 46
65738: STR
65739: PUSH
65740: LD_STRING )
65742: STR
65743: PPUSH
65744: CALL_OW 559
// end ; end ;
65748: LD_VAR 0 7
65752: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
65753: LD_INT 0
65755: PPUSH
// streamModeActive := false ;
65756: LD_ADDR_EXP 47
65760: PUSH
65761: LD_INT 0
65763: ST_TO_ADDR
// normalCounter := 36 ;
65764: LD_ADDR_EXP 48
65768: PUSH
65769: LD_INT 36
65771: ST_TO_ADDR
// hardcoreCounter := 18 ;
65772: LD_ADDR_EXP 49
65776: PUSH
65777: LD_INT 18
65779: ST_TO_ADDR
// sRocket := false ;
65780: LD_ADDR_EXP 52
65784: PUSH
65785: LD_INT 0
65787: ST_TO_ADDR
// sSpeed := false ;
65788: LD_ADDR_EXP 51
65792: PUSH
65793: LD_INT 0
65795: ST_TO_ADDR
// sEngine := false ;
65796: LD_ADDR_EXP 53
65800: PUSH
65801: LD_INT 0
65803: ST_TO_ADDR
// sSpec := false ;
65804: LD_ADDR_EXP 50
65808: PUSH
65809: LD_INT 0
65811: ST_TO_ADDR
// sLevel := false ;
65812: LD_ADDR_EXP 54
65816: PUSH
65817: LD_INT 0
65819: ST_TO_ADDR
// sArmoury := false ;
65820: LD_ADDR_EXP 55
65824: PUSH
65825: LD_INT 0
65827: ST_TO_ADDR
// sRadar := false ;
65828: LD_ADDR_EXP 56
65832: PUSH
65833: LD_INT 0
65835: ST_TO_ADDR
// sBunker := false ;
65836: LD_ADDR_EXP 57
65840: PUSH
65841: LD_INT 0
65843: ST_TO_ADDR
// sHack := false ;
65844: LD_ADDR_EXP 58
65848: PUSH
65849: LD_INT 0
65851: ST_TO_ADDR
// sFire := false ;
65852: LD_ADDR_EXP 59
65856: PUSH
65857: LD_INT 0
65859: ST_TO_ADDR
// sRefresh := false ;
65860: LD_ADDR_EXP 60
65864: PUSH
65865: LD_INT 0
65867: ST_TO_ADDR
// sExp := false ;
65868: LD_ADDR_EXP 61
65872: PUSH
65873: LD_INT 0
65875: ST_TO_ADDR
// sDepot := false ;
65876: LD_ADDR_EXP 62
65880: PUSH
65881: LD_INT 0
65883: ST_TO_ADDR
// sFlag := false ;
65884: LD_ADDR_EXP 63
65888: PUSH
65889: LD_INT 0
65891: ST_TO_ADDR
// sKamikadze := false ;
65892: LD_ADDR_EXP 71
65896: PUSH
65897: LD_INT 0
65899: ST_TO_ADDR
// sTroll := false ;
65900: LD_ADDR_EXP 72
65904: PUSH
65905: LD_INT 0
65907: ST_TO_ADDR
// sSlow := false ;
65908: LD_ADDR_EXP 73
65912: PUSH
65913: LD_INT 0
65915: ST_TO_ADDR
// sLack := false ;
65916: LD_ADDR_EXP 74
65920: PUSH
65921: LD_INT 0
65923: ST_TO_ADDR
// sTank := false ;
65924: LD_ADDR_EXP 76
65928: PUSH
65929: LD_INT 0
65931: ST_TO_ADDR
// sRemote := false ;
65932: LD_ADDR_EXP 77
65936: PUSH
65937: LD_INT 0
65939: ST_TO_ADDR
// sPowell := false ;
65940: LD_ADDR_EXP 78
65944: PUSH
65945: LD_INT 0
65947: ST_TO_ADDR
// sTeleport := false ;
65948: LD_ADDR_EXP 81
65952: PUSH
65953: LD_INT 0
65955: ST_TO_ADDR
// sOilTower := false ;
65956: LD_ADDR_EXP 83
65960: PUSH
65961: LD_INT 0
65963: ST_TO_ADDR
// sShovel := false ;
65964: LD_ADDR_EXP 84
65968: PUSH
65969: LD_INT 0
65971: ST_TO_ADDR
// sSheik := false ;
65972: LD_ADDR_EXP 85
65976: PUSH
65977: LD_INT 0
65979: ST_TO_ADDR
// sEarthquake := false ;
65980: LD_ADDR_EXP 87
65984: PUSH
65985: LD_INT 0
65987: ST_TO_ADDR
// sAI := false ;
65988: LD_ADDR_EXP 88
65992: PUSH
65993: LD_INT 0
65995: ST_TO_ADDR
// sCargo := false ;
65996: LD_ADDR_EXP 91
66000: PUSH
66001: LD_INT 0
66003: ST_TO_ADDR
// sDLaser := false ;
66004: LD_ADDR_EXP 92
66008: PUSH
66009: LD_INT 0
66011: ST_TO_ADDR
// sExchange := false ;
66012: LD_ADDR_EXP 93
66016: PUSH
66017: LD_INT 0
66019: ST_TO_ADDR
// sFac := false ;
66020: LD_ADDR_EXP 94
66024: PUSH
66025: LD_INT 0
66027: ST_TO_ADDR
// sPower := false ;
66028: LD_ADDR_EXP 95
66032: PUSH
66033: LD_INT 0
66035: ST_TO_ADDR
// sRandom := false ;
66036: LD_ADDR_EXP 96
66040: PUSH
66041: LD_INT 0
66043: ST_TO_ADDR
// sShield := false ;
66044: LD_ADDR_EXP 97
66048: PUSH
66049: LD_INT 0
66051: ST_TO_ADDR
// sTime := false ;
66052: LD_ADDR_EXP 98
66056: PUSH
66057: LD_INT 0
66059: ST_TO_ADDR
// sTools := false ;
66060: LD_ADDR_EXP 99
66064: PUSH
66065: LD_INT 0
66067: ST_TO_ADDR
// sSold := false ;
66068: LD_ADDR_EXP 64
66072: PUSH
66073: LD_INT 0
66075: ST_TO_ADDR
// sDiff := false ;
66076: LD_ADDR_EXP 65
66080: PUSH
66081: LD_INT 0
66083: ST_TO_ADDR
// sFog := false ;
66084: LD_ADDR_EXP 68
66088: PUSH
66089: LD_INT 0
66091: ST_TO_ADDR
// sReset := false ;
66092: LD_ADDR_EXP 69
66096: PUSH
66097: LD_INT 0
66099: ST_TO_ADDR
// sSun := false ;
66100: LD_ADDR_EXP 70
66104: PUSH
66105: LD_INT 0
66107: ST_TO_ADDR
// sTiger := false ;
66108: LD_ADDR_EXP 66
66112: PUSH
66113: LD_INT 0
66115: ST_TO_ADDR
// sBomb := false ;
66116: LD_ADDR_EXP 67
66120: PUSH
66121: LD_INT 0
66123: ST_TO_ADDR
// sWound := false ;
66124: LD_ADDR_EXP 75
66128: PUSH
66129: LD_INT 0
66131: ST_TO_ADDR
// sBetray := false ;
66132: LD_ADDR_EXP 79
66136: PUSH
66137: LD_INT 0
66139: ST_TO_ADDR
// sContamin := false ;
66140: LD_ADDR_EXP 80
66144: PUSH
66145: LD_INT 0
66147: ST_TO_ADDR
// sOil := false ;
66148: LD_ADDR_EXP 82
66152: PUSH
66153: LD_INT 0
66155: ST_TO_ADDR
// sStu := false ;
66156: LD_ADDR_EXP 86
66160: PUSH
66161: LD_INT 0
66163: ST_TO_ADDR
// sBazooka := false ;
66164: LD_ADDR_EXP 89
66168: PUSH
66169: LD_INT 0
66171: ST_TO_ADDR
// sMortar := false ;
66172: LD_ADDR_EXP 90
66176: PUSH
66177: LD_INT 0
66179: ST_TO_ADDR
// sRanger := false ;
66180: LD_ADDR_EXP 100
66184: PUSH
66185: LD_INT 0
66187: ST_TO_ADDR
// sComputer := false ;
66188: LD_ADDR_EXP 101
66192: PUSH
66193: LD_INT 0
66195: ST_TO_ADDR
// s30 := false ;
66196: LD_ADDR_EXP 102
66200: PUSH
66201: LD_INT 0
66203: ST_TO_ADDR
// s60 := false ;
66204: LD_ADDR_EXP 103
66208: PUSH
66209: LD_INT 0
66211: ST_TO_ADDR
// end ;
66212: LD_VAR 0 1
66216: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
66217: LD_INT 0
66219: PPUSH
66220: PPUSH
66221: PPUSH
66222: PPUSH
66223: PPUSH
66224: PPUSH
66225: PPUSH
// result := [ ] ;
66226: LD_ADDR_VAR 0 2
66230: PUSH
66231: EMPTY
66232: ST_TO_ADDR
// if campaign_id = 1 then
66233: LD_OWVAR 69
66237: PUSH
66238: LD_INT 1
66240: EQUAL
66241: IFFALSE 69407
// begin case mission_number of 1 :
66243: LD_OWVAR 70
66247: PUSH
66248: LD_INT 1
66250: DOUBLE
66251: EQUAL
66252: IFTRUE 66256
66254: GO 66332
66256: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
66257: LD_ADDR_VAR 0 2
66261: PUSH
66262: LD_INT 2
66264: PUSH
66265: LD_INT 4
66267: PUSH
66268: LD_INT 11
66270: PUSH
66271: LD_INT 12
66273: PUSH
66274: LD_INT 15
66276: PUSH
66277: LD_INT 16
66279: PUSH
66280: LD_INT 22
66282: PUSH
66283: LD_INT 23
66285: PUSH
66286: LD_INT 26
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: LIST
66293: LIST
66294: LIST
66295: LIST
66296: LIST
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 101
66302: PUSH
66303: LD_INT 102
66305: PUSH
66306: LD_INT 106
66308: PUSH
66309: LD_INT 116
66311: PUSH
66312: LD_INT 117
66314: PUSH
66315: LD_INT 118
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: ST_TO_ADDR
66330: GO 69405
66332: LD_INT 2
66334: DOUBLE
66335: EQUAL
66336: IFTRUE 66340
66338: GO 66424
66340: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
66341: LD_ADDR_VAR 0 2
66345: PUSH
66346: LD_INT 2
66348: PUSH
66349: LD_INT 4
66351: PUSH
66352: LD_INT 11
66354: PUSH
66355: LD_INT 12
66357: PUSH
66358: LD_INT 15
66360: PUSH
66361: LD_INT 16
66363: PUSH
66364: LD_INT 22
66366: PUSH
66367: LD_INT 23
66369: PUSH
66370: LD_INT 26
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 101
66386: PUSH
66387: LD_INT 102
66389: PUSH
66390: LD_INT 105
66392: PUSH
66393: LD_INT 106
66395: PUSH
66396: LD_INT 108
66398: PUSH
66399: LD_INT 116
66401: PUSH
66402: LD_INT 117
66404: PUSH
66405: LD_INT 118
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: LIST
66412: LIST
66413: LIST
66414: LIST
66415: LIST
66416: LIST
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: ST_TO_ADDR
66422: GO 69405
66424: LD_INT 3
66426: DOUBLE
66427: EQUAL
66428: IFTRUE 66432
66430: GO 66520
66432: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
66433: LD_ADDR_VAR 0 2
66437: PUSH
66438: LD_INT 2
66440: PUSH
66441: LD_INT 4
66443: PUSH
66444: LD_INT 5
66446: PUSH
66447: LD_INT 11
66449: PUSH
66450: LD_INT 12
66452: PUSH
66453: LD_INT 15
66455: PUSH
66456: LD_INT 16
66458: PUSH
66459: LD_INT 22
66461: PUSH
66462: LD_INT 26
66464: PUSH
66465: LD_INT 36
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 101
66482: PUSH
66483: LD_INT 102
66485: PUSH
66486: LD_INT 105
66488: PUSH
66489: LD_INT 106
66491: PUSH
66492: LD_INT 108
66494: PUSH
66495: LD_INT 116
66497: PUSH
66498: LD_INT 117
66500: PUSH
66501: LD_INT 118
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: LIST
66508: LIST
66509: LIST
66510: LIST
66511: LIST
66512: LIST
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: ST_TO_ADDR
66518: GO 69405
66520: LD_INT 4
66522: DOUBLE
66523: EQUAL
66524: IFTRUE 66528
66526: GO 66624
66528: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
66529: LD_ADDR_VAR 0 2
66533: PUSH
66534: LD_INT 2
66536: PUSH
66537: LD_INT 4
66539: PUSH
66540: LD_INT 5
66542: PUSH
66543: LD_INT 8
66545: PUSH
66546: LD_INT 11
66548: PUSH
66549: LD_INT 12
66551: PUSH
66552: LD_INT 15
66554: PUSH
66555: LD_INT 16
66557: PUSH
66558: LD_INT 22
66560: PUSH
66561: LD_INT 23
66563: PUSH
66564: LD_INT 26
66566: PUSH
66567: LD_INT 36
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: LIST
66574: LIST
66575: LIST
66576: LIST
66577: LIST
66578: LIST
66579: LIST
66580: LIST
66581: LIST
66582: LIST
66583: PUSH
66584: LD_INT 101
66586: PUSH
66587: LD_INT 102
66589: PUSH
66590: LD_INT 105
66592: PUSH
66593: LD_INT 106
66595: PUSH
66596: LD_INT 108
66598: PUSH
66599: LD_INT 116
66601: PUSH
66602: LD_INT 117
66604: PUSH
66605: LD_INT 118
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: ST_TO_ADDR
66622: GO 69405
66624: LD_INT 5
66626: DOUBLE
66627: EQUAL
66628: IFTRUE 66632
66630: GO 66744
66632: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
66633: LD_ADDR_VAR 0 2
66637: PUSH
66638: LD_INT 2
66640: PUSH
66641: LD_INT 4
66643: PUSH
66644: LD_INT 5
66646: PUSH
66647: LD_INT 6
66649: PUSH
66650: LD_INT 8
66652: PUSH
66653: LD_INT 11
66655: PUSH
66656: LD_INT 12
66658: PUSH
66659: LD_INT 15
66661: PUSH
66662: LD_INT 16
66664: PUSH
66665: LD_INT 22
66667: PUSH
66668: LD_INT 23
66670: PUSH
66671: LD_INT 25
66673: PUSH
66674: LD_INT 26
66676: PUSH
66677: LD_INT 36
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: PUSH
66696: LD_INT 101
66698: PUSH
66699: LD_INT 102
66701: PUSH
66702: LD_INT 105
66704: PUSH
66705: LD_INT 106
66707: PUSH
66708: LD_INT 108
66710: PUSH
66711: LD_INT 109
66713: PUSH
66714: LD_INT 112
66716: PUSH
66717: LD_INT 116
66719: PUSH
66720: LD_INT 117
66722: PUSH
66723: LD_INT 118
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: ST_TO_ADDR
66742: GO 69405
66744: LD_INT 6
66746: DOUBLE
66747: EQUAL
66748: IFTRUE 66752
66750: GO 66884
66752: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
66753: LD_ADDR_VAR 0 2
66757: PUSH
66758: LD_INT 2
66760: PUSH
66761: LD_INT 4
66763: PUSH
66764: LD_INT 5
66766: PUSH
66767: LD_INT 6
66769: PUSH
66770: LD_INT 8
66772: PUSH
66773: LD_INT 11
66775: PUSH
66776: LD_INT 12
66778: PUSH
66779: LD_INT 15
66781: PUSH
66782: LD_INT 16
66784: PUSH
66785: LD_INT 20
66787: PUSH
66788: LD_INT 21
66790: PUSH
66791: LD_INT 22
66793: PUSH
66794: LD_INT 23
66796: PUSH
66797: LD_INT 25
66799: PUSH
66800: LD_INT 26
66802: PUSH
66803: LD_INT 30
66805: PUSH
66806: LD_INT 31
66808: PUSH
66809: LD_INT 32
66811: PUSH
66812: LD_INT 36
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: PUSH
66836: LD_INT 101
66838: PUSH
66839: LD_INT 102
66841: PUSH
66842: LD_INT 105
66844: PUSH
66845: LD_INT 106
66847: PUSH
66848: LD_INT 108
66850: PUSH
66851: LD_INT 109
66853: PUSH
66854: LD_INT 112
66856: PUSH
66857: LD_INT 116
66859: PUSH
66860: LD_INT 117
66862: PUSH
66863: LD_INT 118
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: ST_TO_ADDR
66882: GO 69405
66884: LD_INT 7
66886: DOUBLE
66887: EQUAL
66888: IFTRUE 66892
66890: GO 67004
66892: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
66893: LD_ADDR_VAR 0 2
66897: PUSH
66898: LD_INT 2
66900: PUSH
66901: LD_INT 4
66903: PUSH
66904: LD_INT 5
66906: PUSH
66907: LD_INT 7
66909: PUSH
66910: LD_INT 11
66912: PUSH
66913: LD_INT 12
66915: PUSH
66916: LD_INT 15
66918: PUSH
66919: LD_INT 16
66921: PUSH
66922: LD_INT 20
66924: PUSH
66925: LD_INT 21
66927: PUSH
66928: LD_INT 22
66930: PUSH
66931: LD_INT 23
66933: PUSH
66934: LD_INT 25
66936: PUSH
66937: LD_INT 26
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: LIST
66955: PUSH
66956: LD_INT 101
66958: PUSH
66959: LD_INT 102
66961: PUSH
66962: LD_INT 103
66964: PUSH
66965: LD_INT 105
66967: PUSH
66968: LD_INT 106
66970: PUSH
66971: LD_INT 108
66973: PUSH
66974: LD_INT 112
66976: PUSH
66977: LD_INT 116
66979: PUSH
66980: LD_INT 117
66982: PUSH
66983: LD_INT 118
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: LIST
66990: LIST
66991: LIST
66992: LIST
66993: LIST
66994: LIST
66995: LIST
66996: LIST
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: ST_TO_ADDR
67002: GO 69405
67004: LD_INT 8
67006: DOUBLE
67007: EQUAL
67008: IFTRUE 67012
67010: GO 67152
67012: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
67013: LD_ADDR_VAR 0 2
67017: PUSH
67018: LD_INT 2
67020: PUSH
67021: LD_INT 4
67023: PUSH
67024: LD_INT 5
67026: PUSH
67027: LD_INT 6
67029: PUSH
67030: LD_INT 7
67032: PUSH
67033: LD_INT 8
67035: PUSH
67036: LD_INT 11
67038: PUSH
67039: LD_INT 12
67041: PUSH
67042: LD_INT 15
67044: PUSH
67045: LD_INT 16
67047: PUSH
67048: LD_INT 20
67050: PUSH
67051: LD_INT 21
67053: PUSH
67054: LD_INT 22
67056: PUSH
67057: LD_INT 23
67059: PUSH
67060: LD_INT 25
67062: PUSH
67063: LD_INT 26
67065: PUSH
67066: LD_INT 30
67068: PUSH
67069: LD_INT 31
67071: PUSH
67072: LD_INT 32
67074: PUSH
67075: LD_INT 36
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: PUSH
67100: LD_INT 101
67102: PUSH
67103: LD_INT 102
67105: PUSH
67106: LD_INT 103
67108: PUSH
67109: LD_INT 105
67111: PUSH
67112: LD_INT 106
67114: PUSH
67115: LD_INT 108
67117: PUSH
67118: LD_INT 109
67120: PUSH
67121: LD_INT 112
67123: PUSH
67124: LD_INT 116
67126: PUSH
67127: LD_INT 117
67129: PUSH
67130: LD_INT 118
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: LIST
67137: LIST
67138: LIST
67139: LIST
67140: LIST
67141: LIST
67142: LIST
67143: LIST
67144: LIST
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: ST_TO_ADDR
67150: GO 69405
67152: LD_INT 9
67154: DOUBLE
67155: EQUAL
67156: IFTRUE 67160
67158: GO 67308
67160: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
67161: LD_ADDR_VAR 0 2
67165: PUSH
67166: LD_INT 2
67168: PUSH
67169: LD_INT 4
67171: PUSH
67172: LD_INT 5
67174: PUSH
67175: LD_INT 6
67177: PUSH
67178: LD_INT 7
67180: PUSH
67181: LD_INT 8
67183: PUSH
67184: LD_INT 11
67186: PUSH
67187: LD_INT 12
67189: PUSH
67190: LD_INT 15
67192: PUSH
67193: LD_INT 16
67195: PUSH
67196: LD_INT 20
67198: PUSH
67199: LD_INT 21
67201: PUSH
67202: LD_INT 22
67204: PUSH
67205: LD_INT 23
67207: PUSH
67208: LD_INT 25
67210: PUSH
67211: LD_INT 26
67213: PUSH
67214: LD_INT 28
67216: PUSH
67217: LD_INT 30
67219: PUSH
67220: LD_INT 31
67222: PUSH
67223: LD_INT 32
67225: PUSH
67226: LD_INT 36
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: LIST
67233: LIST
67234: LIST
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: PUSH
67252: LD_INT 101
67254: PUSH
67255: LD_INT 102
67257: PUSH
67258: LD_INT 103
67260: PUSH
67261: LD_INT 105
67263: PUSH
67264: LD_INT 106
67266: PUSH
67267: LD_INT 108
67269: PUSH
67270: LD_INT 109
67272: PUSH
67273: LD_INT 112
67275: PUSH
67276: LD_INT 114
67278: PUSH
67279: LD_INT 116
67281: PUSH
67282: LD_INT 117
67284: PUSH
67285: LD_INT 118
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: LIST
67292: LIST
67293: LIST
67294: LIST
67295: LIST
67296: LIST
67297: LIST
67298: LIST
67299: LIST
67300: LIST
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: ST_TO_ADDR
67306: GO 69405
67308: LD_INT 10
67310: DOUBLE
67311: EQUAL
67312: IFTRUE 67316
67314: GO 67512
67316: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
67317: LD_ADDR_VAR 0 2
67321: PUSH
67322: LD_INT 2
67324: PUSH
67325: LD_INT 4
67327: PUSH
67328: LD_INT 5
67330: PUSH
67331: LD_INT 6
67333: PUSH
67334: LD_INT 7
67336: PUSH
67337: LD_INT 8
67339: PUSH
67340: LD_INT 9
67342: PUSH
67343: LD_INT 10
67345: PUSH
67346: LD_INT 11
67348: PUSH
67349: LD_INT 12
67351: PUSH
67352: LD_INT 13
67354: PUSH
67355: LD_INT 14
67357: PUSH
67358: LD_INT 15
67360: PUSH
67361: LD_INT 16
67363: PUSH
67364: LD_INT 17
67366: PUSH
67367: LD_INT 18
67369: PUSH
67370: LD_INT 19
67372: PUSH
67373: LD_INT 20
67375: PUSH
67376: LD_INT 21
67378: PUSH
67379: LD_INT 22
67381: PUSH
67382: LD_INT 23
67384: PUSH
67385: LD_INT 24
67387: PUSH
67388: LD_INT 25
67390: PUSH
67391: LD_INT 26
67393: PUSH
67394: LD_INT 28
67396: PUSH
67397: LD_INT 30
67399: PUSH
67400: LD_INT 31
67402: PUSH
67403: LD_INT 32
67405: PUSH
67406: LD_INT 36
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: LIST
67413: LIST
67414: LIST
67415: LIST
67416: LIST
67417: LIST
67418: LIST
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: LIST
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: LIST
67431: LIST
67432: LIST
67433: LIST
67434: LIST
67435: LIST
67436: LIST
67437: LIST
67438: LIST
67439: PUSH
67440: LD_INT 101
67442: PUSH
67443: LD_INT 102
67445: PUSH
67446: LD_INT 103
67448: PUSH
67449: LD_INT 104
67451: PUSH
67452: LD_INT 105
67454: PUSH
67455: LD_INT 106
67457: PUSH
67458: LD_INT 107
67460: PUSH
67461: LD_INT 108
67463: PUSH
67464: LD_INT 109
67466: PUSH
67467: LD_INT 110
67469: PUSH
67470: LD_INT 111
67472: PUSH
67473: LD_INT 112
67475: PUSH
67476: LD_INT 114
67478: PUSH
67479: LD_INT 116
67481: PUSH
67482: LD_INT 117
67484: PUSH
67485: LD_INT 118
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: ST_TO_ADDR
67510: GO 69405
67512: LD_INT 11
67514: DOUBLE
67515: EQUAL
67516: IFTRUE 67520
67518: GO 67724
67520: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
67521: LD_ADDR_VAR 0 2
67525: PUSH
67526: LD_INT 2
67528: PUSH
67529: LD_INT 3
67531: PUSH
67532: LD_INT 4
67534: PUSH
67535: LD_INT 5
67537: PUSH
67538: LD_INT 6
67540: PUSH
67541: LD_INT 7
67543: PUSH
67544: LD_INT 8
67546: PUSH
67547: LD_INT 9
67549: PUSH
67550: LD_INT 10
67552: PUSH
67553: LD_INT 11
67555: PUSH
67556: LD_INT 12
67558: PUSH
67559: LD_INT 13
67561: PUSH
67562: LD_INT 14
67564: PUSH
67565: LD_INT 15
67567: PUSH
67568: LD_INT 16
67570: PUSH
67571: LD_INT 17
67573: PUSH
67574: LD_INT 18
67576: PUSH
67577: LD_INT 19
67579: PUSH
67580: LD_INT 20
67582: PUSH
67583: LD_INT 21
67585: PUSH
67586: LD_INT 22
67588: PUSH
67589: LD_INT 23
67591: PUSH
67592: LD_INT 24
67594: PUSH
67595: LD_INT 25
67597: PUSH
67598: LD_INT 26
67600: PUSH
67601: LD_INT 28
67603: PUSH
67604: LD_INT 30
67606: PUSH
67607: LD_INT 31
67609: PUSH
67610: LD_INT 32
67612: PUSH
67613: LD_INT 34
67615: PUSH
67616: LD_INT 36
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: LIST
67623: LIST
67624: LIST
67625: LIST
67626: LIST
67627: LIST
67628: LIST
67629: LIST
67630: LIST
67631: LIST
67632: LIST
67633: LIST
67634: LIST
67635: LIST
67636: LIST
67637: LIST
67638: LIST
67639: LIST
67640: LIST
67641: LIST
67642: LIST
67643: LIST
67644: LIST
67645: LIST
67646: LIST
67647: LIST
67648: LIST
67649: LIST
67650: LIST
67651: PUSH
67652: LD_INT 101
67654: PUSH
67655: LD_INT 102
67657: PUSH
67658: LD_INT 103
67660: PUSH
67661: LD_INT 104
67663: PUSH
67664: LD_INT 105
67666: PUSH
67667: LD_INT 106
67669: PUSH
67670: LD_INT 107
67672: PUSH
67673: LD_INT 108
67675: PUSH
67676: LD_INT 109
67678: PUSH
67679: LD_INT 110
67681: PUSH
67682: LD_INT 111
67684: PUSH
67685: LD_INT 112
67687: PUSH
67688: LD_INT 114
67690: PUSH
67691: LD_INT 116
67693: PUSH
67694: LD_INT 117
67696: PUSH
67697: LD_INT 118
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: LIST
67704: LIST
67705: LIST
67706: LIST
67707: LIST
67708: LIST
67709: LIST
67710: LIST
67711: LIST
67712: LIST
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: ST_TO_ADDR
67722: GO 69405
67724: LD_INT 12
67726: DOUBLE
67727: EQUAL
67728: IFTRUE 67732
67730: GO 67952
67732: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
67733: LD_ADDR_VAR 0 2
67737: PUSH
67738: LD_INT 1
67740: PUSH
67741: LD_INT 2
67743: PUSH
67744: LD_INT 3
67746: PUSH
67747: LD_INT 4
67749: PUSH
67750: LD_INT 5
67752: PUSH
67753: LD_INT 6
67755: PUSH
67756: LD_INT 7
67758: PUSH
67759: LD_INT 8
67761: PUSH
67762: LD_INT 9
67764: PUSH
67765: LD_INT 10
67767: PUSH
67768: LD_INT 11
67770: PUSH
67771: LD_INT 12
67773: PUSH
67774: LD_INT 13
67776: PUSH
67777: LD_INT 14
67779: PUSH
67780: LD_INT 15
67782: PUSH
67783: LD_INT 16
67785: PUSH
67786: LD_INT 17
67788: PUSH
67789: LD_INT 18
67791: PUSH
67792: LD_INT 19
67794: PUSH
67795: LD_INT 20
67797: PUSH
67798: LD_INT 21
67800: PUSH
67801: LD_INT 22
67803: PUSH
67804: LD_INT 23
67806: PUSH
67807: LD_INT 24
67809: PUSH
67810: LD_INT 25
67812: PUSH
67813: LD_INT 26
67815: PUSH
67816: LD_INT 27
67818: PUSH
67819: LD_INT 28
67821: PUSH
67822: LD_INT 30
67824: PUSH
67825: LD_INT 31
67827: PUSH
67828: LD_INT 32
67830: PUSH
67831: LD_INT 33
67833: PUSH
67834: LD_INT 34
67836: PUSH
67837: LD_INT 36
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: PUSH
67876: LD_INT 101
67878: PUSH
67879: LD_INT 102
67881: PUSH
67882: LD_INT 103
67884: PUSH
67885: LD_INT 104
67887: PUSH
67888: LD_INT 105
67890: PUSH
67891: LD_INT 106
67893: PUSH
67894: LD_INT 107
67896: PUSH
67897: LD_INT 108
67899: PUSH
67900: LD_INT 109
67902: PUSH
67903: LD_INT 110
67905: PUSH
67906: LD_INT 111
67908: PUSH
67909: LD_INT 112
67911: PUSH
67912: LD_INT 113
67914: PUSH
67915: LD_INT 114
67917: PUSH
67918: LD_INT 116
67920: PUSH
67921: LD_INT 117
67923: PUSH
67924: LD_INT 118
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: LIST
67931: LIST
67932: LIST
67933: LIST
67934: LIST
67935: LIST
67936: LIST
67937: LIST
67938: LIST
67939: LIST
67940: LIST
67941: LIST
67942: LIST
67943: LIST
67944: LIST
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: ST_TO_ADDR
67950: GO 69405
67952: LD_INT 13
67954: DOUBLE
67955: EQUAL
67956: IFTRUE 67960
67958: GO 68168
67960: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
67961: LD_ADDR_VAR 0 2
67965: PUSH
67966: LD_INT 1
67968: PUSH
67969: LD_INT 2
67971: PUSH
67972: LD_INT 3
67974: PUSH
67975: LD_INT 4
67977: PUSH
67978: LD_INT 5
67980: PUSH
67981: LD_INT 8
67983: PUSH
67984: LD_INT 9
67986: PUSH
67987: LD_INT 10
67989: PUSH
67990: LD_INT 11
67992: PUSH
67993: LD_INT 12
67995: PUSH
67996: LD_INT 14
67998: PUSH
67999: LD_INT 15
68001: PUSH
68002: LD_INT 16
68004: PUSH
68005: LD_INT 17
68007: PUSH
68008: LD_INT 18
68010: PUSH
68011: LD_INT 19
68013: PUSH
68014: LD_INT 20
68016: PUSH
68017: LD_INT 21
68019: PUSH
68020: LD_INT 22
68022: PUSH
68023: LD_INT 23
68025: PUSH
68026: LD_INT 24
68028: PUSH
68029: LD_INT 25
68031: PUSH
68032: LD_INT 26
68034: PUSH
68035: LD_INT 27
68037: PUSH
68038: LD_INT 28
68040: PUSH
68041: LD_INT 30
68043: PUSH
68044: LD_INT 31
68046: PUSH
68047: LD_INT 32
68049: PUSH
68050: LD_INT 33
68052: PUSH
68053: LD_INT 34
68055: PUSH
68056: LD_INT 36
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: LIST
68063: LIST
68064: LIST
68065: LIST
68066: LIST
68067: LIST
68068: LIST
68069: LIST
68070: LIST
68071: LIST
68072: LIST
68073: LIST
68074: LIST
68075: LIST
68076: LIST
68077: LIST
68078: LIST
68079: LIST
68080: LIST
68081: LIST
68082: LIST
68083: LIST
68084: LIST
68085: LIST
68086: LIST
68087: LIST
68088: LIST
68089: LIST
68090: LIST
68091: PUSH
68092: LD_INT 101
68094: PUSH
68095: LD_INT 102
68097: PUSH
68098: LD_INT 103
68100: PUSH
68101: LD_INT 104
68103: PUSH
68104: LD_INT 105
68106: PUSH
68107: LD_INT 106
68109: PUSH
68110: LD_INT 107
68112: PUSH
68113: LD_INT 108
68115: PUSH
68116: LD_INT 109
68118: PUSH
68119: LD_INT 110
68121: PUSH
68122: LD_INT 111
68124: PUSH
68125: LD_INT 112
68127: PUSH
68128: LD_INT 113
68130: PUSH
68131: LD_INT 114
68133: PUSH
68134: LD_INT 116
68136: PUSH
68137: LD_INT 117
68139: PUSH
68140: LD_INT 118
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: ST_TO_ADDR
68166: GO 69405
68168: LD_INT 14
68170: DOUBLE
68171: EQUAL
68172: IFTRUE 68176
68174: GO 68400
68176: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
68177: LD_ADDR_VAR 0 2
68181: PUSH
68182: LD_INT 1
68184: PUSH
68185: LD_INT 2
68187: PUSH
68188: LD_INT 3
68190: PUSH
68191: LD_INT 4
68193: PUSH
68194: LD_INT 5
68196: PUSH
68197: LD_INT 6
68199: PUSH
68200: LD_INT 7
68202: PUSH
68203: LD_INT 8
68205: PUSH
68206: LD_INT 9
68208: PUSH
68209: LD_INT 10
68211: PUSH
68212: LD_INT 11
68214: PUSH
68215: LD_INT 12
68217: PUSH
68218: LD_INT 13
68220: PUSH
68221: LD_INT 14
68223: PUSH
68224: LD_INT 15
68226: PUSH
68227: LD_INT 16
68229: PUSH
68230: LD_INT 17
68232: PUSH
68233: LD_INT 18
68235: PUSH
68236: LD_INT 19
68238: PUSH
68239: LD_INT 20
68241: PUSH
68242: LD_INT 21
68244: PUSH
68245: LD_INT 22
68247: PUSH
68248: LD_INT 23
68250: PUSH
68251: LD_INT 24
68253: PUSH
68254: LD_INT 25
68256: PUSH
68257: LD_INT 26
68259: PUSH
68260: LD_INT 27
68262: PUSH
68263: LD_INT 28
68265: PUSH
68266: LD_INT 29
68268: PUSH
68269: LD_INT 30
68271: PUSH
68272: LD_INT 31
68274: PUSH
68275: LD_INT 32
68277: PUSH
68278: LD_INT 33
68280: PUSH
68281: LD_INT 34
68283: PUSH
68284: LD_INT 36
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: LIST
68291: LIST
68292: LIST
68293: LIST
68294: LIST
68295: LIST
68296: LIST
68297: LIST
68298: LIST
68299: LIST
68300: LIST
68301: LIST
68302: LIST
68303: LIST
68304: LIST
68305: LIST
68306: LIST
68307: LIST
68308: LIST
68309: LIST
68310: LIST
68311: LIST
68312: LIST
68313: LIST
68314: LIST
68315: LIST
68316: LIST
68317: LIST
68318: LIST
68319: LIST
68320: LIST
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 101
68326: PUSH
68327: LD_INT 102
68329: PUSH
68330: LD_INT 103
68332: PUSH
68333: LD_INT 104
68335: PUSH
68336: LD_INT 105
68338: PUSH
68339: LD_INT 106
68341: PUSH
68342: LD_INT 107
68344: PUSH
68345: LD_INT 108
68347: PUSH
68348: LD_INT 109
68350: PUSH
68351: LD_INT 110
68353: PUSH
68354: LD_INT 111
68356: PUSH
68357: LD_INT 112
68359: PUSH
68360: LD_INT 113
68362: PUSH
68363: LD_INT 114
68365: PUSH
68366: LD_INT 116
68368: PUSH
68369: LD_INT 117
68371: PUSH
68372: LD_INT 118
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: ST_TO_ADDR
68398: GO 69405
68400: LD_INT 15
68402: DOUBLE
68403: EQUAL
68404: IFTRUE 68408
68406: GO 68632
68408: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
68409: LD_ADDR_VAR 0 2
68413: PUSH
68414: LD_INT 1
68416: PUSH
68417: LD_INT 2
68419: PUSH
68420: LD_INT 3
68422: PUSH
68423: LD_INT 4
68425: PUSH
68426: LD_INT 5
68428: PUSH
68429: LD_INT 6
68431: PUSH
68432: LD_INT 7
68434: PUSH
68435: LD_INT 8
68437: PUSH
68438: LD_INT 9
68440: PUSH
68441: LD_INT 10
68443: PUSH
68444: LD_INT 11
68446: PUSH
68447: LD_INT 12
68449: PUSH
68450: LD_INT 13
68452: PUSH
68453: LD_INT 14
68455: PUSH
68456: LD_INT 15
68458: PUSH
68459: LD_INT 16
68461: PUSH
68462: LD_INT 17
68464: PUSH
68465: LD_INT 18
68467: PUSH
68468: LD_INT 19
68470: PUSH
68471: LD_INT 20
68473: PUSH
68474: LD_INT 21
68476: PUSH
68477: LD_INT 22
68479: PUSH
68480: LD_INT 23
68482: PUSH
68483: LD_INT 24
68485: PUSH
68486: LD_INT 25
68488: PUSH
68489: LD_INT 26
68491: PUSH
68492: LD_INT 27
68494: PUSH
68495: LD_INT 28
68497: PUSH
68498: LD_INT 29
68500: PUSH
68501: LD_INT 30
68503: PUSH
68504: LD_INT 31
68506: PUSH
68507: LD_INT 32
68509: PUSH
68510: LD_INT 33
68512: PUSH
68513: LD_INT 34
68515: PUSH
68516: LD_INT 36
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: LIST
68528: LIST
68529: LIST
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: LIST
68535: LIST
68536: LIST
68537: LIST
68538: LIST
68539: LIST
68540: LIST
68541: LIST
68542: LIST
68543: LIST
68544: LIST
68545: LIST
68546: LIST
68547: LIST
68548: LIST
68549: LIST
68550: LIST
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 101
68558: PUSH
68559: LD_INT 102
68561: PUSH
68562: LD_INT 103
68564: PUSH
68565: LD_INT 104
68567: PUSH
68568: LD_INT 105
68570: PUSH
68571: LD_INT 106
68573: PUSH
68574: LD_INT 107
68576: PUSH
68577: LD_INT 108
68579: PUSH
68580: LD_INT 109
68582: PUSH
68583: LD_INT 110
68585: PUSH
68586: LD_INT 111
68588: PUSH
68589: LD_INT 112
68591: PUSH
68592: LD_INT 113
68594: PUSH
68595: LD_INT 114
68597: PUSH
68598: LD_INT 116
68600: PUSH
68601: LD_INT 117
68603: PUSH
68604: LD_INT 118
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: LIST
68611: LIST
68612: LIST
68613: LIST
68614: LIST
68615: LIST
68616: LIST
68617: LIST
68618: LIST
68619: LIST
68620: LIST
68621: LIST
68622: LIST
68623: LIST
68624: LIST
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: ST_TO_ADDR
68630: GO 69405
68632: LD_INT 16
68634: DOUBLE
68635: EQUAL
68636: IFTRUE 68640
68638: GO 68776
68640: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
68641: LD_ADDR_VAR 0 2
68645: PUSH
68646: LD_INT 2
68648: PUSH
68649: LD_INT 4
68651: PUSH
68652: LD_INT 5
68654: PUSH
68655: LD_INT 7
68657: PUSH
68658: LD_INT 11
68660: PUSH
68661: LD_INT 12
68663: PUSH
68664: LD_INT 15
68666: PUSH
68667: LD_INT 16
68669: PUSH
68670: LD_INT 20
68672: PUSH
68673: LD_INT 21
68675: PUSH
68676: LD_INT 22
68678: PUSH
68679: LD_INT 23
68681: PUSH
68682: LD_INT 25
68684: PUSH
68685: LD_INT 26
68687: PUSH
68688: LD_INT 30
68690: PUSH
68691: LD_INT 31
68693: PUSH
68694: LD_INT 32
68696: PUSH
68697: LD_INT 33
68699: PUSH
68700: LD_INT 34
68702: PUSH
68703: EMPTY
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: LIST
68719: LIST
68720: LIST
68721: LIST
68722: LIST
68723: PUSH
68724: LD_INT 101
68726: PUSH
68727: LD_INT 102
68729: PUSH
68730: LD_INT 103
68732: PUSH
68733: LD_INT 106
68735: PUSH
68736: LD_INT 108
68738: PUSH
68739: LD_INT 112
68741: PUSH
68742: LD_INT 113
68744: PUSH
68745: LD_INT 114
68747: PUSH
68748: LD_INT 116
68750: PUSH
68751: LD_INT 117
68753: PUSH
68754: LD_INT 118
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: LIST
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: ST_TO_ADDR
68774: GO 69405
68776: LD_INT 17
68778: DOUBLE
68779: EQUAL
68780: IFTRUE 68784
68782: GO 69008
68784: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
68785: LD_ADDR_VAR 0 2
68789: PUSH
68790: LD_INT 1
68792: PUSH
68793: LD_INT 2
68795: PUSH
68796: LD_INT 3
68798: PUSH
68799: LD_INT 4
68801: PUSH
68802: LD_INT 5
68804: PUSH
68805: LD_INT 6
68807: PUSH
68808: LD_INT 7
68810: PUSH
68811: LD_INT 8
68813: PUSH
68814: LD_INT 9
68816: PUSH
68817: LD_INT 10
68819: PUSH
68820: LD_INT 11
68822: PUSH
68823: LD_INT 12
68825: PUSH
68826: LD_INT 13
68828: PUSH
68829: LD_INT 14
68831: PUSH
68832: LD_INT 15
68834: PUSH
68835: LD_INT 16
68837: PUSH
68838: LD_INT 17
68840: PUSH
68841: LD_INT 18
68843: PUSH
68844: LD_INT 19
68846: PUSH
68847: LD_INT 20
68849: PUSH
68850: LD_INT 21
68852: PUSH
68853: LD_INT 22
68855: PUSH
68856: LD_INT 23
68858: PUSH
68859: LD_INT 24
68861: PUSH
68862: LD_INT 25
68864: PUSH
68865: LD_INT 26
68867: PUSH
68868: LD_INT 27
68870: PUSH
68871: LD_INT 28
68873: PUSH
68874: LD_INT 29
68876: PUSH
68877: LD_INT 30
68879: PUSH
68880: LD_INT 31
68882: PUSH
68883: LD_INT 32
68885: PUSH
68886: LD_INT 33
68888: PUSH
68889: LD_INT 34
68891: PUSH
68892: LD_INT 36
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: LIST
68899: LIST
68900: LIST
68901: LIST
68902: LIST
68903: LIST
68904: LIST
68905: LIST
68906: LIST
68907: LIST
68908: LIST
68909: LIST
68910: LIST
68911: LIST
68912: LIST
68913: LIST
68914: LIST
68915: LIST
68916: LIST
68917: LIST
68918: LIST
68919: LIST
68920: LIST
68921: LIST
68922: LIST
68923: LIST
68924: LIST
68925: LIST
68926: LIST
68927: LIST
68928: LIST
68929: LIST
68930: LIST
68931: PUSH
68932: LD_INT 101
68934: PUSH
68935: LD_INT 102
68937: PUSH
68938: LD_INT 103
68940: PUSH
68941: LD_INT 104
68943: PUSH
68944: LD_INT 105
68946: PUSH
68947: LD_INT 106
68949: PUSH
68950: LD_INT 107
68952: PUSH
68953: LD_INT 108
68955: PUSH
68956: LD_INT 109
68958: PUSH
68959: LD_INT 110
68961: PUSH
68962: LD_INT 111
68964: PUSH
68965: LD_INT 112
68967: PUSH
68968: LD_INT 113
68970: PUSH
68971: LD_INT 114
68973: PUSH
68974: LD_INT 116
68976: PUSH
68977: LD_INT 117
68979: PUSH
68980: LD_INT 118
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: LIST
68987: LIST
68988: LIST
68989: LIST
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: ST_TO_ADDR
69006: GO 69405
69008: LD_INT 18
69010: DOUBLE
69011: EQUAL
69012: IFTRUE 69016
69014: GO 69164
69016: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
69017: LD_ADDR_VAR 0 2
69021: PUSH
69022: LD_INT 2
69024: PUSH
69025: LD_INT 4
69027: PUSH
69028: LD_INT 5
69030: PUSH
69031: LD_INT 7
69033: PUSH
69034: LD_INT 11
69036: PUSH
69037: LD_INT 12
69039: PUSH
69040: LD_INT 15
69042: PUSH
69043: LD_INT 16
69045: PUSH
69046: LD_INT 20
69048: PUSH
69049: LD_INT 21
69051: PUSH
69052: LD_INT 22
69054: PUSH
69055: LD_INT 23
69057: PUSH
69058: LD_INT 25
69060: PUSH
69061: LD_INT 26
69063: PUSH
69064: LD_INT 30
69066: PUSH
69067: LD_INT 31
69069: PUSH
69070: LD_INT 32
69072: PUSH
69073: LD_INT 33
69075: PUSH
69076: LD_INT 34
69078: PUSH
69079: LD_INT 35
69081: PUSH
69082: LD_INT 36
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: LIST
69089: LIST
69090: LIST
69091: LIST
69092: LIST
69093: LIST
69094: LIST
69095: LIST
69096: LIST
69097: LIST
69098: LIST
69099: LIST
69100: LIST
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: LIST
69106: LIST
69107: PUSH
69108: LD_INT 101
69110: PUSH
69111: LD_INT 102
69113: PUSH
69114: LD_INT 103
69116: PUSH
69117: LD_INT 106
69119: PUSH
69120: LD_INT 108
69122: PUSH
69123: LD_INT 112
69125: PUSH
69126: LD_INT 113
69128: PUSH
69129: LD_INT 114
69131: PUSH
69132: LD_INT 115
69134: PUSH
69135: LD_INT 116
69137: PUSH
69138: LD_INT 117
69140: PUSH
69141: LD_INT 118
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: LIST
69148: LIST
69149: LIST
69150: LIST
69151: LIST
69152: LIST
69153: LIST
69154: LIST
69155: LIST
69156: LIST
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: ST_TO_ADDR
69162: GO 69405
69164: LD_INT 19
69166: DOUBLE
69167: EQUAL
69168: IFTRUE 69172
69170: GO 69404
69172: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
69173: LD_ADDR_VAR 0 2
69177: PUSH
69178: LD_INT 1
69180: PUSH
69181: LD_INT 2
69183: PUSH
69184: LD_INT 3
69186: PUSH
69187: LD_INT 4
69189: PUSH
69190: LD_INT 5
69192: PUSH
69193: LD_INT 6
69195: PUSH
69196: LD_INT 7
69198: PUSH
69199: LD_INT 8
69201: PUSH
69202: LD_INT 9
69204: PUSH
69205: LD_INT 10
69207: PUSH
69208: LD_INT 11
69210: PUSH
69211: LD_INT 12
69213: PUSH
69214: LD_INT 13
69216: PUSH
69217: LD_INT 14
69219: PUSH
69220: LD_INT 15
69222: PUSH
69223: LD_INT 16
69225: PUSH
69226: LD_INT 17
69228: PUSH
69229: LD_INT 18
69231: PUSH
69232: LD_INT 19
69234: PUSH
69235: LD_INT 20
69237: PUSH
69238: LD_INT 21
69240: PUSH
69241: LD_INT 22
69243: PUSH
69244: LD_INT 23
69246: PUSH
69247: LD_INT 24
69249: PUSH
69250: LD_INT 25
69252: PUSH
69253: LD_INT 26
69255: PUSH
69256: LD_INT 27
69258: PUSH
69259: LD_INT 28
69261: PUSH
69262: LD_INT 29
69264: PUSH
69265: LD_INT 30
69267: PUSH
69268: LD_INT 31
69270: PUSH
69271: LD_INT 32
69273: PUSH
69274: LD_INT 33
69276: PUSH
69277: LD_INT 34
69279: PUSH
69280: LD_INT 35
69282: PUSH
69283: LD_INT 36
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: LIST
69290: LIST
69291: LIST
69292: LIST
69293: LIST
69294: LIST
69295: LIST
69296: LIST
69297: LIST
69298: LIST
69299: LIST
69300: LIST
69301: LIST
69302: LIST
69303: LIST
69304: LIST
69305: LIST
69306: LIST
69307: LIST
69308: LIST
69309: LIST
69310: LIST
69311: LIST
69312: LIST
69313: LIST
69314: LIST
69315: LIST
69316: LIST
69317: LIST
69318: LIST
69319: LIST
69320: LIST
69321: LIST
69322: LIST
69323: PUSH
69324: LD_INT 101
69326: PUSH
69327: LD_INT 102
69329: PUSH
69330: LD_INT 103
69332: PUSH
69333: LD_INT 104
69335: PUSH
69336: LD_INT 105
69338: PUSH
69339: LD_INT 106
69341: PUSH
69342: LD_INT 107
69344: PUSH
69345: LD_INT 108
69347: PUSH
69348: LD_INT 109
69350: PUSH
69351: LD_INT 110
69353: PUSH
69354: LD_INT 111
69356: PUSH
69357: LD_INT 112
69359: PUSH
69360: LD_INT 113
69362: PUSH
69363: LD_INT 114
69365: PUSH
69366: LD_INT 115
69368: PUSH
69369: LD_INT 116
69371: PUSH
69372: LD_INT 117
69374: PUSH
69375: LD_INT 118
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: LIST
69382: LIST
69383: LIST
69384: LIST
69385: LIST
69386: LIST
69387: LIST
69388: LIST
69389: LIST
69390: LIST
69391: LIST
69392: LIST
69393: LIST
69394: LIST
69395: LIST
69396: LIST
69397: PUSH
69398: EMPTY
69399: LIST
69400: LIST
69401: ST_TO_ADDR
69402: GO 69405
69404: POP
// end else
69405: GO 69636
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
69407: LD_ADDR_VAR 0 2
69411: PUSH
69412: LD_INT 1
69414: PUSH
69415: LD_INT 2
69417: PUSH
69418: LD_INT 3
69420: PUSH
69421: LD_INT 4
69423: PUSH
69424: LD_INT 5
69426: PUSH
69427: LD_INT 6
69429: PUSH
69430: LD_INT 7
69432: PUSH
69433: LD_INT 8
69435: PUSH
69436: LD_INT 9
69438: PUSH
69439: LD_INT 10
69441: PUSH
69442: LD_INT 11
69444: PUSH
69445: LD_INT 12
69447: PUSH
69448: LD_INT 13
69450: PUSH
69451: LD_INT 14
69453: PUSH
69454: LD_INT 15
69456: PUSH
69457: LD_INT 16
69459: PUSH
69460: LD_INT 17
69462: PUSH
69463: LD_INT 18
69465: PUSH
69466: LD_INT 19
69468: PUSH
69469: LD_INT 20
69471: PUSH
69472: LD_INT 21
69474: PUSH
69475: LD_INT 22
69477: PUSH
69478: LD_INT 23
69480: PUSH
69481: LD_INT 24
69483: PUSH
69484: LD_INT 25
69486: PUSH
69487: LD_INT 26
69489: PUSH
69490: LD_INT 27
69492: PUSH
69493: LD_INT 28
69495: PUSH
69496: LD_INT 29
69498: PUSH
69499: LD_INT 30
69501: PUSH
69502: LD_INT 31
69504: PUSH
69505: LD_INT 32
69507: PUSH
69508: LD_INT 33
69510: PUSH
69511: LD_INT 34
69513: PUSH
69514: LD_INT 35
69516: PUSH
69517: LD_INT 36
69519: PUSH
69520: EMPTY
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: LIST
69540: LIST
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: PUSH
69558: LD_INT 101
69560: PUSH
69561: LD_INT 102
69563: PUSH
69564: LD_INT 103
69566: PUSH
69567: LD_INT 104
69569: PUSH
69570: LD_INT 105
69572: PUSH
69573: LD_INT 106
69575: PUSH
69576: LD_INT 107
69578: PUSH
69579: LD_INT 108
69581: PUSH
69582: LD_INT 109
69584: PUSH
69585: LD_INT 110
69587: PUSH
69588: LD_INT 111
69590: PUSH
69591: LD_INT 112
69593: PUSH
69594: LD_INT 113
69596: PUSH
69597: LD_INT 114
69599: PUSH
69600: LD_INT 115
69602: PUSH
69603: LD_INT 116
69605: PUSH
69606: LD_INT 117
69608: PUSH
69609: LD_INT 118
69611: PUSH
69612: EMPTY
69613: LIST
69614: LIST
69615: LIST
69616: LIST
69617: LIST
69618: LIST
69619: LIST
69620: LIST
69621: LIST
69622: LIST
69623: LIST
69624: LIST
69625: LIST
69626: LIST
69627: LIST
69628: LIST
69629: LIST
69630: LIST
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: ST_TO_ADDR
// if result then
69636: LD_VAR 0 2
69640: IFFALSE 70426
// begin normal :=  ;
69642: LD_ADDR_VAR 0 5
69646: PUSH
69647: LD_STRING 
69649: ST_TO_ADDR
// hardcore :=  ;
69650: LD_ADDR_VAR 0 6
69654: PUSH
69655: LD_STRING 
69657: ST_TO_ADDR
// active :=  ;
69658: LD_ADDR_VAR 0 7
69662: PUSH
69663: LD_STRING 
69665: ST_TO_ADDR
// for i = 1 to normalCounter do
69666: LD_ADDR_VAR 0 8
69670: PUSH
69671: DOUBLE
69672: LD_INT 1
69674: DEC
69675: ST_TO_ADDR
69676: LD_EXP 48
69680: PUSH
69681: FOR_TO
69682: IFFALSE 69783
// begin tmp := 0 ;
69684: LD_ADDR_VAR 0 3
69688: PUSH
69689: LD_STRING 0
69691: ST_TO_ADDR
// if result [ 1 ] then
69692: LD_VAR 0 2
69696: PUSH
69697: LD_INT 1
69699: ARRAY
69700: IFFALSE 69765
// if result [ 1 ] [ 1 ] = i then
69702: LD_VAR 0 2
69706: PUSH
69707: LD_INT 1
69709: ARRAY
69710: PUSH
69711: LD_INT 1
69713: ARRAY
69714: PUSH
69715: LD_VAR 0 8
69719: EQUAL
69720: IFFALSE 69765
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
69722: LD_ADDR_VAR 0 2
69726: PUSH
69727: LD_VAR 0 2
69731: PPUSH
69732: LD_INT 1
69734: PPUSH
69735: LD_VAR 0 2
69739: PUSH
69740: LD_INT 1
69742: ARRAY
69743: PPUSH
69744: LD_INT 1
69746: PPUSH
69747: CALL_OW 3
69751: PPUSH
69752: CALL_OW 1
69756: ST_TO_ADDR
// tmp := 1 ;
69757: LD_ADDR_VAR 0 3
69761: PUSH
69762: LD_STRING 1
69764: ST_TO_ADDR
// end ; normal := normal & tmp ;
69765: LD_ADDR_VAR 0 5
69769: PUSH
69770: LD_VAR 0 5
69774: PUSH
69775: LD_VAR 0 3
69779: STR
69780: ST_TO_ADDR
// end ;
69781: GO 69681
69783: POP
69784: POP
// for i = 1 to hardcoreCounter do
69785: LD_ADDR_VAR 0 8
69789: PUSH
69790: DOUBLE
69791: LD_INT 1
69793: DEC
69794: ST_TO_ADDR
69795: LD_EXP 49
69799: PUSH
69800: FOR_TO
69801: IFFALSE 69906
// begin tmp := 0 ;
69803: LD_ADDR_VAR 0 3
69807: PUSH
69808: LD_STRING 0
69810: ST_TO_ADDR
// if result [ 2 ] then
69811: LD_VAR 0 2
69815: PUSH
69816: LD_INT 2
69818: ARRAY
69819: IFFALSE 69888
// if result [ 2 ] [ 1 ] = 100 + i then
69821: LD_VAR 0 2
69825: PUSH
69826: LD_INT 2
69828: ARRAY
69829: PUSH
69830: LD_INT 1
69832: ARRAY
69833: PUSH
69834: LD_INT 100
69836: PUSH
69837: LD_VAR 0 8
69841: PLUS
69842: EQUAL
69843: IFFALSE 69888
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
69845: LD_ADDR_VAR 0 2
69849: PUSH
69850: LD_VAR 0 2
69854: PPUSH
69855: LD_INT 2
69857: PPUSH
69858: LD_VAR 0 2
69862: PUSH
69863: LD_INT 2
69865: ARRAY
69866: PPUSH
69867: LD_INT 1
69869: PPUSH
69870: CALL_OW 3
69874: PPUSH
69875: CALL_OW 1
69879: ST_TO_ADDR
// tmp := 1 ;
69880: LD_ADDR_VAR 0 3
69884: PUSH
69885: LD_STRING 1
69887: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
69888: LD_ADDR_VAR 0 6
69892: PUSH
69893: LD_VAR 0 6
69897: PUSH
69898: LD_VAR 0 3
69902: STR
69903: ST_TO_ADDR
// end ;
69904: GO 69800
69906: POP
69907: POP
// if isGameLoad then
69908: LD_VAR 0 1
69912: IFFALSE 70387
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
69914: LD_ADDR_VAR 0 4
69918: PUSH
69919: LD_EXP 52
69923: PUSH
69924: LD_EXP 51
69928: PUSH
69929: LD_EXP 53
69933: PUSH
69934: LD_EXP 50
69938: PUSH
69939: LD_EXP 54
69943: PUSH
69944: LD_EXP 55
69948: PUSH
69949: LD_EXP 56
69953: PUSH
69954: LD_EXP 57
69958: PUSH
69959: LD_EXP 58
69963: PUSH
69964: LD_EXP 59
69968: PUSH
69969: LD_EXP 60
69973: PUSH
69974: LD_EXP 61
69978: PUSH
69979: LD_EXP 62
69983: PUSH
69984: LD_EXP 63
69988: PUSH
69989: LD_EXP 71
69993: PUSH
69994: LD_EXP 72
69998: PUSH
69999: LD_EXP 73
70003: PUSH
70004: LD_EXP 74
70008: PUSH
70009: LD_EXP 76
70013: PUSH
70014: LD_EXP 77
70018: PUSH
70019: LD_EXP 78
70023: PUSH
70024: LD_EXP 81
70028: PUSH
70029: LD_EXP 83
70033: PUSH
70034: LD_EXP 84
70038: PUSH
70039: LD_EXP 85
70043: PUSH
70044: LD_EXP 87
70048: PUSH
70049: LD_EXP 88
70053: PUSH
70054: LD_EXP 91
70058: PUSH
70059: LD_EXP 92
70063: PUSH
70064: LD_EXP 93
70068: PUSH
70069: LD_EXP 94
70073: PUSH
70074: LD_EXP 95
70078: PUSH
70079: LD_EXP 96
70083: PUSH
70084: LD_EXP 97
70088: PUSH
70089: LD_EXP 98
70093: PUSH
70094: LD_EXP 99
70098: PUSH
70099: LD_EXP 64
70103: PUSH
70104: LD_EXP 65
70108: PUSH
70109: LD_EXP 68
70113: PUSH
70114: LD_EXP 69
70118: PUSH
70119: LD_EXP 70
70123: PUSH
70124: LD_EXP 66
70128: PUSH
70129: LD_EXP 67
70133: PUSH
70134: LD_EXP 75
70138: PUSH
70139: LD_EXP 79
70143: PUSH
70144: LD_EXP 80
70148: PUSH
70149: LD_EXP 82
70153: PUSH
70154: LD_EXP 86
70158: PUSH
70159: LD_EXP 89
70163: PUSH
70164: LD_EXP 90
70168: PUSH
70169: LD_EXP 100
70173: PUSH
70174: LD_EXP 101
70178: PUSH
70179: LD_EXP 102
70183: PUSH
70184: LD_EXP 103
70188: PUSH
70189: EMPTY
70190: LIST
70191: LIST
70192: LIST
70193: LIST
70194: LIST
70195: LIST
70196: LIST
70197: LIST
70198: LIST
70199: LIST
70200: LIST
70201: LIST
70202: LIST
70203: LIST
70204: LIST
70205: LIST
70206: LIST
70207: LIST
70208: LIST
70209: LIST
70210: LIST
70211: LIST
70212: LIST
70213: LIST
70214: LIST
70215: LIST
70216: LIST
70217: LIST
70218: LIST
70219: LIST
70220: LIST
70221: LIST
70222: LIST
70223: LIST
70224: LIST
70225: LIST
70226: LIST
70227: LIST
70228: LIST
70229: LIST
70230: LIST
70231: LIST
70232: LIST
70233: LIST
70234: LIST
70235: LIST
70236: LIST
70237: LIST
70238: LIST
70239: LIST
70240: LIST
70241: LIST
70242: LIST
70243: LIST
70244: ST_TO_ADDR
// tmp :=  ;
70245: LD_ADDR_VAR 0 3
70249: PUSH
70250: LD_STRING 
70252: ST_TO_ADDR
// for i = 1 to normalCounter do
70253: LD_ADDR_VAR 0 8
70257: PUSH
70258: DOUBLE
70259: LD_INT 1
70261: DEC
70262: ST_TO_ADDR
70263: LD_EXP 48
70267: PUSH
70268: FOR_TO
70269: IFFALSE 70305
// begin if flags [ i ] then
70271: LD_VAR 0 4
70275: PUSH
70276: LD_VAR 0 8
70280: ARRAY
70281: IFFALSE 70303
// tmp := tmp & i & ; ;
70283: LD_ADDR_VAR 0 3
70287: PUSH
70288: LD_VAR 0 3
70292: PUSH
70293: LD_VAR 0 8
70297: STR
70298: PUSH
70299: LD_STRING ;
70301: STR
70302: ST_TO_ADDR
// end ;
70303: GO 70268
70305: POP
70306: POP
// for i = 1 to hardcoreCounter do
70307: LD_ADDR_VAR 0 8
70311: PUSH
70312: DOUBLE
70313: LD_INT 1
70315: DEC
70316: ST_TO_ADDR
70317: LD_EXP 49
70321: PUSH
70322: FOR_TO
70323: IFFALSE 70369
// begin if flags [ normalCounter + i ] then
70325: LD_VAR 0 4
70329: PUSH
70330: LD_EXP 48
70334: PUSH
70335: LD_VAR 0 8
70339: PLUS
70340: ARRAY
70341: IFFALSE 70367
// tmp := tmp & ( 100 + i ) & ; ;
70343: LD_ADDR_VAR 0 3
70347: PUSH
70348: LD_VAR 0 3
70352: PUSH
70353: LD_INT 100
70355: PUSH
70356: LD_VAR 0 8
70360: PLUS
70361: STR
70362: PUSH
70363: LD_STRING ;
70365: STR
70366: ST_TO_ADDR
// end ;
70367: GO 70322
70369: POP
70370: POP
// if tmp then
70371: LD_VAR 0 3
70375: IFFALSE 70387
// active := tmp ;
70377: LD_ADDR_VAR 0 7
70381: PUSH
70382: LD_VAR 0 3
70386: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
70387: LD_STRING getStreamItemsFromMission("
70389: PUSH
70390: LD_VAR 0 5
70394: STR
70395: PUSH
70396: LD_STRING ","
70398: STR
70399: PUSH
70400: LD_VAR 0 6
70404: STR
70405: PUSH
70406: LD_STRING ","
70408: STR
70409: PUSH
70410: LD_VAR 0 7
70414: STR
70415: PUSH
70416: LD_STRING ")
70418: STR
70419: PPUSH
70420: CALL_OW 559
// end else
70424: GO 70433
// ToLua ( getStreamItemsFromMission("","","") ) ;
70426: LD_STRING getStreamItemsFromMission("","","")
70428: PPUSH
70429: CALL_OW 559
// end ;
70433: LD_VAR 0 2
70437: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
70438: LD_EXP 47
70442: PUSH
70443: LD_EXP 52
70447: AND
70448: IFFALSE 70572
70450: GO 70452
70452: DISABLE
70453: LD_INT 0
70455: PPUSH
70456: PPUSH
// begin enable ;
70457: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
70458: LD_ADDR_VAR 0 2
70462: PUSH
70463: LD_INT 22
70465: PUSH
70466: LD_OWVAR 2
70470: PUSH
70471: EMPTY
70472: LIST
70473: LIST
70474: PUSH
70475: LD_INT 2
70477: PUSH
70478: LD_INT 34
70480: PUSH
70481: LD_INT 7
70483: PUSH
70484: EMPTY
70485: LIST
70486: LIST
70487: PUSH
70488: LD_INT 34
70490: PUSH
70491: LD_INT 45
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: PUSH
70498: LD_INT 34
70500: PUSH
70501: LD_INT 28
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: PUSH
70508: LD_INT 34
70510: PUSH
70511: LD_INT 47
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: PUSH
70525: EMPTY
70526: LIST
70527: LIST
70528: PPUSH
70529: CALL_OW 69
70533: ST_TO_ADDR
// if not tmp then
70534: LD_VAR 0 2
70538: NOT
70539: IFFALSE 70543
// exit ;
70541: GO 70572
// for i in tmp do
70543: LD_ADDR_VAR 0 1
70547: PUSH
70548: LD_VAR 0 2
70552: PUSH
70553: FOR_IN
70554: IFFALSE 70570
// begin SetLives ( i , 0 ) ;
70556: LD_VAR 0 1
70560: PPUSH
70561: LD_INT 0
70563: PPUSH
70564: CALL_OW 234
// end ;
70568: GO 70553
70570: POP
70571: POP
// end ;
70572: PPOPN 2
70574: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
70575: LD_EXP 47
70579: PUSH
70580: LD_EXP 53
70584: AND
70585: IFFALSE 70669
70587: GO 70589
70589: DISABLE
70590: LD_INT 0
70592: PPUSH
70593: PPUSH
// begin enable ;
70594: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
70595: LD_ADDR_VAR 0 2
70599: PUSH
70600: LD_INT 22
70602: PUSH
70603: LD_OWVAR 2
70607: PUSH
70608: EMPTY
70609: LIST
70610: LIST
70611: PUSH
70612: LD_INT 32
70614: PUSH
70615: LD_INT 3
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: PUSH
70622: EMPTY
70623: LIST
70624: LIST
70625: PPUSH
70626: CALL_OW 69
70630: ST_TO_ADDR
// if not tmp then
70631: LD_VAR 0 2
70635: NOT
70636: IFFALSE 70640
// exit ;
70638: GO 70669
// for i in tmp do
70640: LD_ADDR_VAR 0 1
70644: PUSH
70645: LD_VAR 0 2
70649: PUSH
70650: FOR_IN
70651: IFFALSE 70667
// begin SetLives ( i , 0 ) ;
70653: LD_VAR 0 1
70657: PPUSH
70658: LD_INT 0
70660: PPUSH
70661: CALL_OW 234
// end ;
70665: GO 70650
70667: POP
70668: POP
// end ;
70669: PPOPN 2
70671: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
70672: LD_EXP 47
70676: PUSH
70677: LD_EXP 50
70681: AND
70682: IFFALSE 70775
70684: GO 70686
70686: DISABLE
70687: LD_INT 0
70689: PPUSH
// begin enable ;
70690: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
70691: LD_ADDR_VAR 0 1
70695: PUSH
70696: LD_INT 22
70698: PUSH
70699: LD_OWVAR 2
70703: PUSH
70704: EMPTY
70705: LIST
70706: LIST
70707: PUSH
70708: LD_INT 2
70710: PUSH
70711: LD_INT 25
70713: PUSH
70714: LD_INT 5
70716: PUSH
70717: EMPTY
70718: LIST
70719: LIST
70720: PUSH
70721: LD_INT 25
70723: PUSH
70724: LD_INT 9
70726: PUSH
70727: EMPTY
70728: LIST
70729: LIST
70730: PUSH
70731: LD_INT 25
70733: PUSH
70734: LD_INT 8
70736: PUSH
70737: EMPTY
70738: LIST
70739: LIST
70740: PUSH
70741: EMPTY
70742: LIST
70743: LIST
70744: LIST
70745: LIST
70746: PUSH
70747: EMPTY
70748: LIST
70749: LIST
70750: PPUSH
70751: CALL_OW 69
70755: PUSH
70756: FOR_IN
70757: IFFALSE 70773
// begin SetClass ( i , 1 ) ;
70759: LD_VAR 0 1
70763: PPUSH
70764: LD_INT 1
70766: PPUSH
70767: CALL_OW 336
// end ;
70771: GO 70756
70773: POP
70774: POP
// end ;
70775: PPOPN 1
70777: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
70778: LD_EXP 47
70782: PUSH
70783: LD_EXP 51
70787: AND
70788: PUSH
70789: LD_OWVAR 65
70793: PUSH
70794: LD_INT 7
70796: LESS
70797: AND
70798: IFFALSE 70812
70800: GO 70802
70802: DISABLE
// begin enable ;
70803: ENABLE
// game_speed := 7 ;
70804: LD_ADDR_OWVAR 65
70808: PUSH
70809: LD_INT 7
70811: ST_TO_ADDR
// end ;
70812: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
70813: LD_EXP 47
70817: PUSH
70818: LD_EXP 54
70822: AND
70823: IFFALSE 71025
70825: GO 70827
70827: DISABLE
70828: LD_INT 0
70830: PPUSH
70831: PPUSH
70832: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
70833: LD_ADDR_VAR 0 3
70837: PUSH
70838: LD_INT 81
70840: PUSH
70841: LD_OWVAR 2
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: PUSH
70850: LD_INT 21
70852: PUSH
70853: LD_INT 1
70855: PUSH
70856: EMPTY
70857: LIST
70858: LIST
70859: PUSH
70860: EMPTY
70861: LIST
70862: LIST
70863: PPUSH
70864: CALL_OW 69
70868: ST_TO_ADDR
// if not tmp then
70869: LD_VAR 0 3
70873: NOT
70874: IFFALSE 70878
// exit ;
70876: GO 71025
// if tmp > 5 then
70878: LD_VAR 0 3
70882: PUSH
70883: LD_INT 5
70885: GREATER
70886: IFFALSE 70898
// k := 5 else
70888: LD_ADDR_VAR 0 2
70892: PUSH
70893: LD_INT 5
70895: ST_TO_ADDR
70896: GO 70908
// k := tmp ;
70898: LD_ADDR_VAR 0 2
70902: PUSH
70903: LD_VAR 0 3
70907: ST_TO_ADDR
// for i := 1 to k do
70908: LD_ADDR_VAR 0 1
70912: PUSH
70913: DOUBLE
70914: LD_INT 1
70916: DEC
70917: ST_TO_ADDR
70918: LD_VAR 0 2
70922: PUSH
70923: FOR_TO
70924: IFFALSE 71023
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
70926: LD_VAR 0 3
70930: PUSH
70931: LD_VAR 0 1
70935: ARRAY
70936: PPUSH
70937: LD_VAR 0 1
70941: PUSH
70942: LD_INT 4
70944: MOD
70945: PUSH
70946: LD_INT 1
70948: PLUS
70949: PPUSH
70950: CALL_OW 259
70954: PUSH
70955: LD_INT 10
70957: LESS
70958: IFFALSE 71021
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
70960: LD_VAR 0 3
70964: PUSH
70965: LD_VAR 0 1
70969: ARRAY
70970: PPUSH
70971: LD_VAR 0 1
70975: PUSH
70976: LD_INT 4
70978: MOD
70979: PUSH
70980: LD_INT 1
70982: PLUS
70983: PPUSH
70984: LD_VAR 0 3
70988: PUSH
70989: LD_VAR 0 1
70993: ARRAY
70994: PPUSH
70995: LD_VAR 0 1
70999: PUSH
71000: LD_INT 4
71002: MOD
71003: PUSH
71004: LD_INT 1
71006: PLUS
71007: PPUSH
71008: CALL_OW 259
71012: PUSH
71013: LD_INT 1
71015: PLUS
71016: PPUSH
71017: CALL_OW 237
71021: GO 70923
71023: POP
71024: POP
// end ;
71025: PPOPN 3
71027: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
71028: LD_EXP 47
71032: PUSH
71033: LD_EXP 55
71037: AND
71038: IFFALSE 71058
71040: GO 71042
71042: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
71043: LD_INT 4
71045: PPUSH
71046: LD_OWVAR 2
71050: PPUSH
71051: LD_INT 0
71053: PPUSH
71054: CALL_OW 324
71058: END
// every 0 0$1 trigger StreamModeActive and sShovel do
71059: LD_EXP 47
71063: PUSH
71064: LD_EXP 84
71068: AND
71069: IFFALSE 71089
71071: GO 71073
71073: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
71074: LD_INT 19
71076: PPUSH
71077: LD_OWVAR 2
71081: PPUSH
71082: LD_INT 0
71084: PPUSH
71085: CALL_OW 324
71089: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
71090: LD_EXP 47
71094: PUSH
71095: LD_EXP 56
71099: AND
71100: IFFALSE 71202
71102: GO 71104
71104: DISABLE
71105: LD_INT 0
71107: PPUSH
71108: PPUSH
// begin enable ;
71109: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
71110: LD_ADDR_VAR 0 2
71114: PUSH
71115: LD_INT 22
71117: PUSH
71118: LD_OWVAR 2
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: PUSH
71127: LD_INT 2
71129: PUSH
71130: LD_INT 34
71132: PUSH
71133: LD_INT 11
71135: PUSH
71136: EMPTY
71137: LIST
71138: LIST
71139: PUSH
71140: LD_INT 34
71142: PUSH
71143: LD_INT 30
71145: PUSH
71146: EMPTY
71147: LIST
71148: LIST
71149: PUSH
71150: EMPTY
71151: LIST
71152: LIST
71153: LIST
71154: PUSH
71155: EMPTY
71156: LIST
71157: LIST
71158: PPUSH
71159: CALL_OW 69
71163: ST_TO_ADDR
// if not tmp then
71164: LD_VAR 0 2
71168: NOT
71169: IFFALSE 71173
// exit ;
71171: GO 71202
// for i in tmp do
71173: LD_ADDR_VAR 0 1
71177: PUSH
71178: LD_VAR 0 2
71182: PUSH
71183: FOR_IN
71184: IFFALSE 71200
// begin SetLives ( i , 0 ) ;
71186: LD_VAR 0 1
71190: PPUSH
71191: LD_INT 0
71193: PPUSH
71194: CALL_OW 234
// end ;
71198: GO 71183
71200: POP
71201: POP
// end ;
71202: PPOPN 2
71204: END
// every 0 0$1 trigger StreamModeActive and sBunker do
71205: LD_EXP 47
71209: PUSH
71210: LD_EXP 57
71214: AND
71215: IFFALSE 71235
71217: GO 71219
71219: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
71220: LD_INT 32
71222: PPUSH
71223: LD_OWVAR 2
71227: PPUSH
71228: LD_INT 0
71230: PPUSH
71231: CALL_OW 324
71235: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
71236: LD_EXP 47
71240: PUSH
71241: LD_EXP 58
71245: AND
71246: IFFALSE 71427
71248: GO 71250
71250: DISABLE
71251: LD_INT 0
71253: PPUSH
71254: PPUSH
71255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
71256: LD_ADDR_VAR 0 2
71260: PUSH
71261: LD_INT 22
71263: PUSH
71264: LD_OWVAR 2
71268: PUSH
71269: EMPTY
71270: LIST
71271: LIST
71272: PUSH
71273: LD_INT 33
71275: PUSH
71276: LD_INT 3
71278: PUSH
71279: EMPTY
71280: LIST
71281: LIST
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: PPUSH
71287: CALL_OW 69
71291: ST_TO_ADDR
// if not tmp then
71292: LD_VAR 0 2
71296: NOT
71297: IFFALSE 71301
// exit ;
71299: GO 71427
// side := 0 ;
71301: LD_ADDR_VAR 0 3
71305: PUSH
71306: LD_INT 0
71308: ST_TO_ADDR
// for i := 1 to 8 do
71309: LD_ADDR_VAR 0 1
71313: PUSH
71314: DOUBLE
71315: LD_INT 1
71317: DEC
71318: ST_TO_ADDR
71319: LD_INT 8
71321: PUSH
71322: FOR_TO
71323: IFFALSE 71371
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
71325: LD_OWVAR 2
71329: PUSH
71330: LD_VAR 0 1
71334: NONEQUAL
71335: PUSH
71336: LD_OWVAR 2
71340: PPUSH
71341: LD_VAR 0 1
71345: PPUSH
71346: CALL_OW 81
71350: PUSH
71351: LD_INT 2
71353: EQUAL
71354: AND
71355: IFFALSE 71369
// begin side := i ;
71357: LD_ADDR_VAR 0 3
71361: PUSH
71362: LD_VAR 0 1
71366: ST_TO_ADDR
// break ;
71367: GO 71371
// end ;
71369: GO 71322
71371: POP
71372: POP
// if not side then
71373: LD_VAR 0 3
71377: NOT
71378: IFFALSE 71382
// exit ;
71380: GO 71427
// for i := 1 to tmp do
71382: LD_ADDR_VAR 0 1
71386: PUSH
71387: DOUBLE
71388: LD_INT 1
71390: DEC
71391: ST_TO_ADDR
71392: LD_VAR 0 2
71396: PUSH
71397: FOR_TO
71398: IFFALSE 71425
// if Prob ( 60 ) then
71400: LD_INT 60
71402: PPUSH
71403: CALL_OW 13
71407: IFFALSE 71423
// SetSide ( i , side ) ;
71409: LD_VAR 0 1
71413: PPUSH
71414: LD_VAR 0 3
71418: PPUSH
71419: CALL_OW 235
71423: GO 71397
71425: POP
71426: POP
// end ;
71427: PPOPN 3
71429: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
71430: LD_EXP 47
71434: PUSH
71435: LD_EXP 60
71439: AND
71440: IFFALSE 71559
71442: GO 71444
71444: DISABLE
71445: LD_INT 0
71447: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
71448: LD_ADDR_VAR 0 1
71452: PUSH
71453: LD_INT 22
71455: PUSH
71456: LD_OWVAR 2
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PUSH
71465: LD_INT 21
71467: PUSH
71468: LD_INT 1
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: PUSH
71475: LD_INT 3
71477: PUSH
71478: LD_INT 23
71480: PUSH
71481: LD_INT 0
71483: PUSH
71484: EMPTY
71485: LIST
71486: LIST
71487: PUSH
71488: EMPTY
71489: LIST
71490: LIST
71491: PUSH
71492: EMPTY
71493: LIST
71494: LIST
71495: LIST
71496: PPUSH
71497: CALL_OW 69
71501: PUSH
71502: FOR_IN
71503: IFFALSE 71557
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
71505: LD_VAR 0 1
71509: PPUSH
71510: CALL_OW 257
71514: PUSH
71515: LD_INT 1
71517: PUSH
71518: LD_INT 2
71520: PUSH
71521: LD_INT 3
71523: PUSH
71524: LD_INT 4
71526: PUSH
71527: EMPTY
71528: LIST
71529: LIST
71530: LIST
71531: LIST
71532: IN
71533: IFFALSE 71555
// SetClass ( un , rand ( 1 , 4 ) ) ;
71535: LD_VAR 0 1
71539: PPUSH
71540: LD_INT 1
71542: PPUSH
71543: LD_INT 4
71545: PPUSH
71546: CALL_OW 12
71550: PPUSH
71551: CALL_OW 336
71555: GO 71502
71557: POP
71558: POP
// end ;
71559: PPOPN 1
71561: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
71562: LD_EXP 47
71566: PUSH
71567: LD_EXP 59
71571: AND
71572: IFFALSE 71651
71574: GO 71576
71576: DISABLE
71577: LD_INT 0
71579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
71580: LD_ADDR_VAR 0 1
71584: PUSH
71585: LD_INT 22
71587: PUSH
71588: LD_OWVAR 2
71592: PUSH
71593: EMPTY
71594: LIST
71595: LIST
71596: PUSH
71597: LD_INT 21
71599: PUSH
71600: LD_INT 3
71602: PUSH
71603: EMPTY
71604: LIST
71605: LIST
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PPUSH
71611: CALL_OW 69
71615: ST_TO_ADDR
// if not tmp then
71616: LD_VAR 0 1
71620: NOT
71621: IFFALSE 71625
// exit ;
71623: GO 71651
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
71625: LD_VAR 0 1
71629: PUSH
71630: LD_INT 1
71632: PPUSH
71633: LD_VAR 0 1
71637: PPUSH
71638: CALL_OW 12
71642: ARRAY
71643: PPUSH
71644: LD_INT 100
71646: PPUSH
71647: CALL_OW 234
// end ;
71651: PPOPN 1
71653: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
71654: LD_EXP 47
71658: PUSH
71659: LD_EXP 61
71663: AND
71664: IFFALSE 71762
71666: GO 71668
71668: DISABLE
71669: LD_INT 0
71671: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
71672: LD_ADDR_VAR 0 1
71676: PUSH
71677: LD_INT 22
71679: PUSH
71680: LD_OWVAR 2
71684: PUSH
71685: EMPTY
71686: LIST
71687: LIST
71688: PUSH
71689: LD_INT 21
71691: PUSH
71692: LD_INT 1
71694: PUSH
71695: EMPTY
71696: LIST
71697: LIST
71698: PUSH
71699: EMPTY
71700: LIST
71701: LIST
71702: PPUSH
71703: CALL_OW 69
71707: ST_TO_ADDR
// if not tmp then
71708: LD_VAR 0 1
71712: NOT
71713: IFFALSE 71717
// exit ;
71715: GO 71762
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
71717: LD_VAR 0 1
71721: PUSH
71722: LD_INT 1
71724: PPUSH
71725: LD_VAR 0 1
71729: PPUSH
71730: CALL_OW 12
71734: ARRAY
71735: PPUSH
71736: LD_INT 1
71738: PPUSH
71739: LD_INT 4
71741: PPUSH
71742: CALL_OW 12
71746: PPUSH
71747: LD_INT 3000
71749: PPUSH
71750: LD_INT 9000
71752: PPUSH
71753: CALL_OW 12
71757: PPUSH
71758: CALL_OW 492
// end ;
71762: PPOPN 1
71764: END
// every 0 0$1 trigger StreamModeActive and sDepot do
71765: LD_EXP 47
71769: PUSH
71770: LD_EXP 62
71774: AND
71775: IFFALSE 71795
71777: GO 71779
71779: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
71780: LD_INT 1
71782: PPUSH
71783: LD_OWVAR 2
71787: PPUSH
71788: LD_INT 0
71790: PPUSH
71791: CALL_OW 324
71795: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
71796: LD_EXP 47
71800: PUSH
71801: LD_EXP 63
71805: AND
71806: IFFALSE 71889
71808: GO 71810
71810: DISABLE
71811: LD_INT 0
71813: PPUSH
71814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
71815: LD_ADDR_VAR 0 2
71819: PUSH
71820: LD_INT 22
71822: PUSH
71823: LD_OWVAR 2
71827: PUSH
71828: EMPTY
71829: LIST
71830: LIST
71831: PUSH
71832: LD_INT 21
71834: PUSH
71835: LD_INT 3
71837: PUSH
71838: EMPTY
71839: LIST
71840: LIST
71841: PUSH
71842: EMPTY
71843: LIST
71844: LIST
71845: PPUSH
71846: CALL_OW 69
71850: ST_TO_ADDR
// if not tmp then
71851: LD_VAR 0 2
71855: NOT
71856: IFFALSE 71860
// exit ;
71858: GO 71889
// for i in tmp do
71860: LD_ADDR_VAR 0 1
71864: PUSH
71865: LD_VAR 0 2
71869: PUSH
71870: FOR_IN
71871: IFFALSE 71887
// SetBLevel ( i , 10 ) ;
71873: LD_VAR 0 1
71877: PPUSH
71878: LD_INT 10
71880: PPUSH
71881: CALL_OW 241
71885: GO 71870
71887: POP
71888: POP
// end ;
71889: PPOPN 2
71891: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
71892: LD_EXP 47
71896: PUSH
71897: LD_EXP 64
71901: AND
71902: IFFALSE 72013
71904: GO 71906
71906: DISABLE
71907: LD_INT 0
71909: PPUSH
71910: PPUSH
71911: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71912: LD_ADDR_VAR 0 3
71916: PUSH
71917: LD_INT 22
71919: PUSH
71920: LD_OWVAR 2
71924: PUSH
71925: EMPTY
71926: LIST
71927: LIST
71928: PUSH
71929: LD_INT 25
71931: PUSH
71932: LD_INT 1
71934: PUSH
71935: EMPTY
71936: LIST
71937: LIST
71938: PUSH
71939: EMPTY
71940: LIST
71941: LIST
71942: PPUSH
71943: CALL_OW 69
71947: ST_TO_ADDR
// if not tmp then
71948: LD_VAR 0 3
71952: NOT
71953: IFFALSE 71957
// exit ;
71955: GO 72013
// un := tmp [ rand ( 1 , tmp ) ] ;
71957: LD_ADDR_VAR 0 2
71961: PUSH
71962: LD_VAR 0 3
71966: PUSH
71967: LD_INT 1
71969: PPUSH
71970: LD_VAR 0 3
71974: PPUSH
71975: CALL_OW 12
71979: ARRAY
71980: ST_TO_ADDR
// if Crawls ( un ) then
71981: LD_VAR 0 2
71985: PPUSH
71986: CALL_OW 318
71990: IFFALSE 72001
// ComWalk ( un ) ;
71992: LD_VAR 0 2
71996: PPUSH
71997: CALL_OW 138
// SetClass ( un , class_sniper ) ;
72001: LD_VAR 0 2
72005: PPUSH
72006: LD_INT 5
72008: PPUSH
72009: CALL_OW 336
// end ;
72013: PPOPN 3
72015: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
72016: LD_EXP 47
72020: PUSH
72021: LD_EXP 65
72025: AND
72026: PUSH
72027: LD_OWVAR 67
72031: PUSH
72032: LD_INT 4
72034: LESS
72035: AND
72036: IFFALSE 72055
72038: GO 72040
72040: DISABLE
// begin Difficulty := Difficulty + 1 ;
72041: LD_ADDR_OWVAR 67
72045: PUSH
72046: LD_OWVAR 67
72050: PUSH
72051: LD_INT 1
72053: PLUS
72054: ST_TO_ADDR
// end ;
72055: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
72056: LD_EXP 47
72060: PUSH
72061: LD_EXP 66
72065: AND
72066: IFFALSE 72169
72068: GO 72070
72070: DISABLE
72071: LD_INT 0
72073: PPUSH
// begin for i := 1 to 5 do
72074: LD_ADDR_VAR 0 1
72078: PUSH
72079: DOUBLE
72080: LD_INT 1
72082: DEC
72083: ST_TO_ADDR
72084: LD_INT 5
72086: PUSH
72087: FOR_TO
72088: IFFALSE 72167
// begin uc_nation := nation_nature ;
72090: LD_ADDR_OWVAR 21
72094: PUSH
72095: LD_INT 0
72097: ST_TO_ADDR
// uc_side := 0 ;
72098: LD_ADDR_OWVAR 20
72102: PUSH
72103: LD_INT 0
72105: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
72106: LD_ADDR_OWVAR 29
72110: PUSH
72111: LD_INT 12
72113: PUSH
72114: LD_INT 12
72116: PUSH
72117: EMPTY
72118: LIST
72119: LIST
72120: ST_TO_ADDR
// hc_agressivity := 20 ;
72121: LD_ADDR_OWVAR 35
72125: PUSH
72126: LD_INT 20
72128: ST_TO_ADDR
// hc_class := class_tiger ;
72129: LD_ADDR_OWVAR 28
72133: PUSH
72134: LD_INT 14
72136: ST_TO_ADDR
// hc_gallery :=  ;
72137: LD_ADDR_OWVAR 33
72141: PUSH
72142: LD_STRING 
72144: ST_TO_ADDR
// hc_name :=  ;
72145: LD_ADDR_OWVAR 26
72149: PUSH
72150: LD_STRING 
72152: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
72153: CALL_OW 44
72157: PPUSH
72158: LD_INT 0
72160: PPUSH
72161: CALL_OW 51
// end ;
72165: GO 72087
72167: POP
72168: POP
// end ;
72169: PPOPN 1
72171: END
// every 0 0$1 trigger StreamModeActive and sBomb do
72172: LD_EXP 47
72176: PUSH
72177: LD_EXP 67
72181: AND
72182: IFFALSE 72191
72184: GO 72186
72186: DISABLE
// StreamSibBomb ;
72187: CALL 72192 0 0
72191: END
// export function StreamSibBomb ; var i , x , y ; begin
72192: LD_INT 0
72194: PPUSH
72195: PPUSH
72196: PPUSH
72197: PPUSH
// result := false ;
72198: LD_ADDR_VAR 0 1
72202: PUSH
72203: LD_INT 0
72205: ST_TO_ADDR
// for i := 1 to 16 do
72206: LD_ADDR_VAR 0 2
72210: PUSH
72211: DOUBLE
72212: LD_INT 1
72214: DEC
72215: ST_TO_ADDR
72216: LD_INT 16
72218: PUSH
72219: FOR_TO
72220: IFFALSE 72419
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
72222: LD_ADDR_VAR 0 3
72226: PUSH
72227: LD_INT 10
72229: PUSH
72230: LD_INT 20
72232: PUSH
72233: LD_INT 30
72235: PUSH
72236: LD_INT 40
72238: PUSH
72239: LD_INT 50
72241: PUSH
72242: LD_INT 60
72244: PUSH
72245: LD_INT 70
72247: PUSH
72248: LD_INT 80
72250: PUSH
72251: LD_INT 90
72253: PUSH
72254: LD_INT 100
72256: PUSH
72257: LD_INT 110
72259: PUSH
72260: LD_INT 120
72262: PUSH
72263: LD_INT 130
72265: PUSH
72266: LD_INT 140
72268: PUSH
72269: LD_INT 150
72271: PUSH
72272: EMPTY
72273: LIST
72274: LIST
72275: LIST
72276: LIST
72277: LIST
72278: LIST
72279: LIST
72280: LIST
72281: LIST
72282: LIST
72283: LIST
72284: LIST
72285: LIST
72286: LIST
72287: LIST
72288: PUSH
72289: LD_INT 1
72291: PPUSH
72292: LD_INT 15
72294: PPUSH
72295: CALL_OW 12
72299: ARRAY
72300: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
72301: LD_ADDR_VAR 0 4
72305: PUSH
72306: LD_INT 10
72308: PUSH
72309: LD_INT 20
72311: PUSH
72312: LD_INT 30
72314: PUSH
72315: LD_INT 40
72317: PUSH
72318: LD_INT 50
72320: PUSH
72321: LD_INT 60
72323: PUSH
72324: LD_INT 70
72326: PUSH
72327: LD_INT 80
72329: PUSH
72330: LD_INT 90
72332: PUSH
72333: LD_INT 100
72335: PUSH
72336: LD_INT 110
72338: PUSH
72339: LD_INT 120
72341: PUSH
72342: LD_INT 130
72344: PUSH
72345: LD_INT 140
72347: PUSH
72348: LD_INT 150
72350: PUSH
72351: EMPTY
72352: LIST
72353: LIST
72354: LIST
72355: LIST
72356: LIST
72357: LIST
72358: LIST
72359: LIST
72360: LIST
72361: LIST
72362: LIST
72363: LIST
72364: LIST
72365: LIST
72366: LIST
72367: PUSH
72368: LD_INT 1
72370: PPUSH
72371: LD_INT 15
72373: PPUSH
72374: CALL_OW 12
72378: ARRAY
72379: ST_TO_ADDR
// if ValidHex ( x , y ) then
72380: LD_VAR 0 3
72384: PPUSH
72385: LD_VAR 0 4
72389: PPUSH
72390: CALL_OW 488
72394: IFFALSE 72417
// begin result := [ x , y ] ;
72396: LD_ADDR_VAR 0 1
72400: PUSH
72401: LD_VAR 0 3
72405: PUSH
72406: LD_VAR 0 4
72410: PUSH
72411: EMPTY
72412: LIST
72413: LIST
72414: ST_TO_ADDR
// break ;
72415: GO 72419
// end ; end ;
72417: GO 72219
72419: POP
72420: POP
// if result then
72421: LD_VAR 0 1
72425: IFFALSE 72485
// begin ToLua ( playSibBomb() ) ;
72427: LD_STRING playSibBomb()
72429: PPUSH
72430: CALL_OW 559
// wait ( 0 0$14 ) ;
72434: LD_INT 490
72436: PPUSH
72437: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
72441: LD_VAR 0 1
72445: PUSH
72446: LD_INT 1
72448: ARRAY
72449: PPUSH
72450: LD_VAR 0 1
72454: PUSH
72455: LD_INT 2
72457: ARRAY
72458: PPUSH
72459: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
72463: LD_VAR 0 1
72467: PUSH
72468: LD_INT 1
72470: ARRAY
72471: PPUSH
72472: LD_VAR 0 1
72476: PUSH
72477: LD_INT 2
72479: ARRAY
72480: PPUSH
72481: CALL_OW 429
// end ; end ;
72485: LD_VAR 0 1
72489: RET
// every 0 0$1 trigger StreamModeActive and sReset do
72490: LD_EXP 47
72494: PUSH
72495: LD_EXP 69
72499: AND
72500: IFFALSE 72512
72502: GO 72504
72504: DISABLE
// YouLost (  ) ;
72505: LD_STRING 
72507: PPUSH
72508: CALL_OW 104
72512: END
// every 0 0$1 trigger StreamModeActive and sFog do
72513: LD_EXP 47
72517: PUSH
72518: LD_EXP 68
72522: AND
72523: IFFALSE 72537
72525: GO 72527
72527: DISABLE
// FogOff ( your_side ) ;
72528: LD_OWVAR 2
72532: PPUSH
72533: CALL_OW 344
72537: END
// every 0 0$1 trigger StreamModeActive and sSun do
72538: LD_EXP 47
72542: PUSH
72543: LD_EXP 70
72547: AND
72548: IFFALSE 72576
72550: GO 72552
72552: DISABLE
// begin solar_recharge_percent := 0 ;
72553: LD_ADDR_OWVAR 79
72557: PUSH
72558: LD_INT 0
72560: ST_TO_ADDR
// wait ( 5 5$00 ) ;
72561: LD_INT 10500
72563: PPUSH
72564: CALL_OW 67
// solar_recharge_percent := 100 ;
72568: LD_ADDR_OWVAR 79
72572: PUSH
72573: LD_INT 100
72575: ST_TO_ADDR
// end ;
72576: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
72577: LD_EXP 47
72581: PUSH
72582: LD_EXP 71
72586: AND
72587: IFFALSE 72826
72589: GO 72591
72591: DISABLE
72592: LD_INT 0
72594: PPUSH
72595: PPUSH
72596: PPUSH
// begin tmp := [ ] ;
72597: LD_ADDR_VAR 0 3
72601: PUSH
72602: EMPTY
72603: ST_TO_ADDR
// for i := 1 to 6 do
72604: LD_ADDR_VAR 0 1
72608: PUSH
72609: DOUBLE
72610: LD_INT 1
72612: DEC
72613: ST_TO_ADDR
72614: LD_INT 6
72616: PUSH
72617: FOR_TO
72618: IFFALSE 72723
// begin uc_nation := nation_nature ;
72620: LD_ADDR_OWVAR 21
72624: PUSH
72625: LD_INT 0
72627: ST_TO_ADDR
// uc_side := 0 ;
72628: LD_ADDR_OWVAR 20
72632: PUSH
72633: LD_INT 0
72635: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
72636: LD_ADDR_OWVAR 29
72640: PUSH
72641: LD_INT 12
72643: PUSH
72644: LD_INT 12
72646: PUSH
72647: EMPTY
72648: LIST
72649: LIST
72650: ST_TO_ADDR
// hc_agressivity := 20 ;
72651: LD_ADDR_OWVAR 35
72655: PUSH
72656: LD_INT 20
72658: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
72659: LD_ADDR_OWVAR 28
72663: PUSH
72664: LD_INT 17
72666: ST_TO_ADDR
// hc_gallery :=  ;
72667: LD_ADDR_OWVAR 33
72671: PUSH
72672: LD_STRING 
72674: ST_TO_ADDR
// hc_name :=  ;
72675: LD_ADDR_OWVAR 26
72679: PUSH
72680: LD_STRING 
72682: ST_TO_ADDR
// un := CreateHuman ;
72683: LD_ADDR_VAR 0 2
72687: PUSH
72688: CALL_OW 44
72692: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
72693: LD_VAR 0 2
72697: PPUSH
72698: LD_INT 1
72700: PPUSH
72701: CALL_OW 51
// tmp := tmp ^ un ;
72705: LD_ADDR_VAR 0 3
72709: PUSH
72710: LD_VAR 0 3
72714: PUSH
72715: LD_VAR 0 2
72719: ADD
72720: ST_TO_ADDR
// end ;
72721: GO 72617
72723: POP
72724: POP
// repeat wait ( 0 0$1 ) ;
72725: LD_INT 35
72727: PPUSH
72728: CALL_OW 67
// for un in tmp do
72732: LD_ADDR_VAR 0 2
72736: PUSH
72737: LD_VAR 0 3
72741: PUSH
72742: FOR_IN
72743: IFFALSE 72817
// begin if IsDead ( un ) then
72745: LD_VAR 0 2
72749: PPUSH
72750: CALL_OW 301
72754: IFFALSE 72774
// begin tmp := tmp diff un ;
72756: LD_ADDR_VAR 0 3
72760: PUSH
72761: LD_VAR 0 3
72765: PUSH
72766: LD_VAR 0 2
72770: DIFF
72771: ST_TO_ADDR
// continue ;
72772: GO 72742
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
72774: LD_VAR 0 2
72778: PPUSH
72779: LD_INT 3
72781: PUSH
72782: LD_INT 22
72784: PUSH
72785: LD_INT 0
72787: PUSH
72788: EMPTY
72789: LIST
72790: LIST
72791: PUSH
72792: EMPTY
72793: LIST
72794: LIST
72795: PPUSH
72796: CALL_OW 69
72800: PPUSH
72801: LD_VAR 0 2
72805: PPUSH
72806: CALL_OW 74
72810: PPUSH
72811: CALL_OW 115
// end ;
72815: GO 72742
72817: POP
72818: POP
// until not tmp ;
72819: LD_VAR 0 3
72823: NOT
72824: IFFALSE 72725
// end ;
72826: PPOPN 3
72828: END
// every 0 0$1 trigger StreamModeActive and sTroll do
72829: LD_EXP 47
72833: PUSH
72834: LD_EXP 72
72838: AND
72839: IFFALSE 72893
72841: GO 72843
72843: DISABLE
// begin ToLua ( displayTroll(); ) ;
72844: LD_STRING displayTroll();
72846: PPUSH
72847: CALL_OW 559
// wait ( 3 3$00 ) ;
72851: LD_INT 6300
72853: PPUSH
72854: CALL_OW 67
// ToLua ( hideTroll(); ) ;
72858: LD_STRING hideTroll();
72860: PPUSH
72861: CALL_OW 559
// wait ( 1 1$00 ) ;
72865: LD_INT 2100
72867: PPUSH
72868: CALL_OW 67
// ToLua ( displayTroll(); ) ;
72872: LD_STRING displayTroll();
72874: PPUSH
72875: CALL_OW 559
// wait ( 1 1$00 ) ;
72879: LD_INT 2100
72881: PPUSH
72882: CALL_OW 67
// ToLua ( hideTroll(); ) ;
72886: LD_STRING hideTroll();
72888: PPUSH
72889: CALL_OW 559
// end ;
72893: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
72894: LD_EXP 47
72898: PUSH
72899: LD_EXP 73
72903: AND
72904: IFFALSE 72967
72906: GO 72908
72908: DISABLE
72909: LD_INT 0
72911: PPUSH
// begin p := 0 ;
72912: LD_ADDR_VAR 0 1
72916: PUSH
72917: LD_INT 0
72919: ST_TO_ADDR
// repeat game_speed := 1 ;
72920: LD_ADDR_OWVAR 65
72924: PUSH
72925: LD_INT 1
72927: ST_TO_ADDR
// wait ( 0 0$1 ) ;
72928: LD_INT 35
72930: PPUSH
72931: CALL_OW 67
// p := p + 1 ;
72935: LD_ADDR_VAR 0 1
72939: PUSH
72940: LD_VAR 0 1
72944: PUSH
72945: LD_INT 1
72947: PLUS
72948: ST_TO_ADDR
// until p >= 60 ;
72949: LD_VAR 0 1
72953: PUSH
72954: LD_INT 60
72956: GREATEREQUAL
72957: IFFALSE 72920
// game_speed := 4 ;
72959: LD_ADDR_OWVAR 65
72963: PUSH
72964: LD_INT 4
72966: ST_TO_ADDR
// end ;
72967: PPOPN 1
72969: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
72970: LD_EXP 47
72974: PUSH
72975: LD_EXP 74
72979: AND
72980: IFFALSE 73126
72982: GO 72984
72984: DISABLE
72985: LD_INT 0
72987: PPUSH
72988: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
72989: LD_ADDR_VAR 0 1
72993: PUSH
72994: LD_INT 22
72996: PUSH
72997: LD_OWVAR 2
73001: PUSH
73002: EMPTY
73003: LIST
73004: LIST
73005: PUSH
73006: LD_INT 2
73008: PUSH
73009: LD_INT 30
73011: PUSH
73012: LD_INT 0
73014: PUSH
73015: EMPTY
73016: LIST
73017: LIST
73018: PUSH
73019: LD_INT 30
73021: PUSH
73022: LD_INT 1
73024: PUSH
73025: EMPTY
73026: LIST
73027: LIST
73028: PUSH
73029: EMPTY
73030: LIST
73031: LIST
73032: LIST
73033: PUSH
73034: EMPTY
73035: LIST
73036: LIST
73037: PPUSH
73038: CALL_OW 69
73042: ST_TO_ADDR
// if not depot then
73043: LD_VAR 0 1
73047: NOT
73048: IFFALSE 73052
// exit ;
73050: GO 73126
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
73052: LD_ADDR_VAR 0 2
73056: PUSH
73057: LD_VAR 0 1
73061: PUSH
73062: LD_INT 1
73064: PPUSH
73065: LD_VAR 0 1
73069: PPUSH
73070: CALL_OW 12
73074: ARRAY
73075: PPUSH
73076: CALL_OW 274
73080: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
73081: LD_VAR 0 2
73085: PPUSH
73086: LD_INT 1
73088: PPUSH
73089: LD_INT 0
73091: PPUSH
73092: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
73096: LD_VAR 0 2
73100: PPUSH
73101: LD_INT 2
73103: PPUSH
73104: LD_INT 0
73106: PPUSH
73107: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
73111: LD_VAR 0 2
73115: PPUSH
73116: LD_INT 3
73118: PPUSH
73119: LD_INT 0
73121: PPUSH
73122: CALL_OW 277
// end ;
73126: PPOPN 2
73128: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
73129: LD_EXP 47
73133: PUSH
73134: LD_EXP 75
73138: AND
73139: IFFALSE 73236
73141: GO 73143
73143: DISABLE
73144: LD_INT 0
73146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
73147: LD_ADDR_VAR 0 1
73151: PUSH
73152: LD_INT 22
73154: PUSH
73155: LD_OWVAR 2
73159: PUSH
73160: EMPTY
73161: LIST
73162: LIST
73163: PUSH
73164: LD_INT 21
73166: PUSH
73167: LD_INT 1
73169: PUSH
73170: EMPTY
73171: LIST
73172: LIST
73173: PUSH
73174: LD_INT 3
73176: PUSH
73177: LD_INT 23
73179: PUSH
73180: LD_INT 0
73182: PUSH
73183: EMPTY
73184: LIST
73185: LIST
73186: PUSH
73187: EMPTY
73188: LIST
73189: LIST
73190: PUSH
73191: EMPTY
73192: LIST
73193: LIST
73194: LIST
73195: PPUSH
73196: CALL_OW 69
73200: ST_TO_ADDR
// if not tmp then
73201: LD_VAR 0 1
73205: NOT
73206: IFFALSE 73210
// exit ;
73208: GO 73236
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
73210: LD_VAR 0 1
73214: PUSH
73215: LD_INT 1
73217: PPUSH
73218: LD_VAR 0 1
73222: PPUSH
73223: CALL_OW 12
73227: ARRAY
73228: PPUSH
73229: LD_INT 200
73231: PPUSH
73232: CALL_OW 234
// end ;
73236: PPOPN 1
73238: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
73239: LD_EXP 47
73243: PUSH
73244: LD_EXP 76
73248: AND
73249: IFFALSE 73328
73251: GO 73253
73253: DISABLE
73254: LD_INT 0
73256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
73257: LD_ADDR_VAR 0 1
73261: PUSH
73262: LD_INT 22
73264: PUSH
73265: LD_OWVAR 2
73269: PUSH
73270: EMPTY
73271: LIST
73272: LIST
73273: PUSH
73274: LD_INT 21
73276: PUSH
73277: LD_INT 2
73279: PUSH
73280: EMPTY
73281: LIST
73282: LIST
73283: PUSH
73284: EMPTY
73285: LIST
73286: LIST
73287: PPUSH
73288: CALL_OW 69
73292: ST_TO_ADDR
// if not tmp then
73293: LD_VAR 0 1
73297: NOT
73298: IFFALSE 73302
// exit ;
73300: GO 73328
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
73302: LD_VAR 0 1
73306: PUSH
73307: LD_INT 1
73309: PPUSH
73310: LD_VAR 0 1
73314: PPUSH
73315: CALL_OW 12
73319: ARRAY
73320: PPUSH
73321: LD_INT 60
73323: PPUSH
73324: CALL_OW 234
// end ;
73328: PPOPN 1
73330: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
73331: LD_EXP 47
73335: PUSH
73336: LD_EXP 77
73340: AND
73341: IFFALSE 73440
73343: GO 73345
73345: DISABLE
73346: LD_INT 0
73348: PPUSH
73349: PPUSH
// begin enable ;
73350: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
73351: LD_ADDR_VAR 0 1
73355: PUSH
73356: LD_INT 22
73358: PUSH
73359: LD_OWVAR 2
73363: PUSH
73364: EMPTY
73365: LIST
73366: LIST
73367: PUSH
73368: LD_INT 61
73370: PUSH
73371: EMPTY
73372: LIST
73373: PUSH
73374: LD_INT 33
73376: PUSH
73377: LD_INT 2
73379: PUSH
73380: EMPTY
73381: LIST
73382: LIST
73383: PUSH
73384: EMPTY
73385: LIST
73386: LIST
73387: LIST
73388: PPUSH
73389: CALL_OW 69
73393: ST_TO_ADDR
// if not tmp then
73394: LD_VAR 0 1
73398: NOT
73399: IFFALSE 73403
// exit ;
73401: GO 73440
// for i in tmp do
73403: LD_ADDR_VAR 0 2
73407: PUSH
73408: LD_VAR 0 1
73412: PUSH
73413: FOR_IN
73414: IFFALSE 73438
// if IsControledBy ( i ) then
73416: LD_VAR 0 2
73420: PPUSH
73421: CALL_OW 312
73425: IFFALSE 73436
// ComUnlink ( i ) ;
73427: LD_VAR 0 2
73431: PPUSH
73432: CALL_OW 136
73436: GO 73413
73438: POP
73439: POP
// end ;
73440: PPOPN 2
73442: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
73443: LD_EXP 47
73447: PUSH
73448: LD_EXP 78
73452: AND
73453: IFFALSE 73593
73455: GO 73457
73457: DISABLE
73458: LD_INT 0
73460: PPUSH
73461: PPUSH
// begin ToLua ( displayPowell(); ) ;
73462: LD_STRING displayPowell();
73464: PPUSH
73465: CALL_OW 559
// uc_side := 0 ;
73469: LD_ADDR_OWVAR 20
73473: PUSH
73474: LD_INT 0
73476: ST_TO_ADDR
// uc_nation := 2 ;
73477: LD_ADDR_OWVAR 21
73481: PUSH
73482: LD_INT 2
73484: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
73485: LD_ADDR_OWVAR 37
73489: PUSH
73490: LD_INT 14
73492: ST_TO_ADDR
// vc_engine := engine_siberite ;
73493: LD_ADDR_OWVAR 39
73497: PUSH
73498: LD_INT 3
73500: ST_TO_ADDR
// vc_control := control_apeman ;
73501: LD_ADDR_OWVAR 38
73505: PUSH
73506: LD_INT 5
73508: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
73509: LD_ADDR_OWVAR 40
73513: PUSH
73514: LD_INT 29
73516: ST_TO_ADDR
// un := CreateVehicle ;
73517: LD_ADDR_VAR 0 2
73521: PUSH
73522: CALL_OW 45
73526: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73527: LD_VAR 0 2
73531: PPUSH
73532: LD_INT 1
73534: PPUSH
73535: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
73539: LD_INT 35
73541: PPUSH
73542: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
73546: LD_VAR 0 2
73550: PPUSH
73551: LD_INT 22
73553: PUSH
73554: LD_OWVAR 2
73558: PUSH
73559: EMPTY
73560: LIST
73561: LIST
73562: PPUSH
73563: CALL_OW 69
73567: PPUSH
73568: LD_VAR 0 2
73572: PPUSH
73573: CALL_OW 74
73577: PPUSH
73578: CALL_OW 115
// until IsDead ( un ) ;
73582: LD_VAR 0 2
73586: PPUSH
73587: CALL_OW 301
73591: IFFALSE 73539
// end ;
73593: PPOPN 2
73595: END
// every 0 0$1 trigger StreamModeActive and sStu do
73596: LD_EXP 47
73600: PUSH
73601: LD_EXP 86
73605: AND
73606: IFFALSE 73622
73608: GO 73610
73610: DISABLE
// begin ToLua ( displayStucuk(); ) ;
73611: LD_STRING displayStucuk();
73613: PPUSH
73614: CALL_OW 559
// ResetFog ;
73618: CALL_OW 335
// end ;
73622: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
73623: LD_EXP 47
73627: PUSH
73628: LD_EXP 79
73632: AND
73633: IFFALSE 73774
73635: GO 73637
73637: DISABLE
73638: LD_INT 0
73640: PPUSH
73641: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
73642: LD_ADDR_VAR 0 2
73646: PUSH
73647: LD_INT 22
73649: PUSH
73650: LD_OWVAR 2
73654: PUSH
73655: EMPTY
73656: LIST
73657: LIST
73658: PUSH
73659: LD_INT 21
73661: PUSH
73662: LD_INT 1
73664: PUSH
73665: EMPTY
73666: LIST
73667: LIST
73668: PUSH
73669: EMPTY
73670: LIST
73671: LIST
73672: PPUSH
73673: CALL_OW 69
73677: ST_TO_ADDR
// if not tmp then
73678: LD_VAR 0 2
73682: NOT
73683: IFFALSE 73687
// exit ;
73685: GO 73774
// un := tmp [ rand ( 1 , tmp ) ] ;
73687: LD_ADDR_VAR 0 1
73691: PUSH
73692: LD_VAR 0 2
73696: PUSH
73697: LD_INT 1
73699: PPUSH
73700: LD_VAR 0 2
73704: PPUSH
73705: CALL_OW 12
73709: ARRAY
73710: ST_TO_ADDR
// SetSide ( un , 0 ) ;
73711: LD_VAR 0 1
73715: PPUSH
73716: LD_INT 0
73718: PPUSH
73719: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
73723: LD_VAR 0 1
73727: PPUSH
73728: LD_OWVAR 3
73732: PUSH
73733: LD_VAR 0 1
73737: DIFF
73738: PPUSH
73739: LD_VAR 0 1
73743: PPUSH
73744: CALL_OW 74
73748: PPUSH
73749: CALL_OW 115
// wait ( 0 0$20 ) ;
73753: LD_INT 700
73755: PPUSH
73756: CALL_OW 67
// SetSide ( un , your_side ) ;
73760: LD_VAR 0 1
73764: PPUSH
73765: LD_OWVAR 2
73769: PPUSH
73770: CALL_OW 235
// end ;
73774: PPOPN 2
73776: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
73777: LD_EXP 47
73781: PUSH
73782: LD_EXP 80
73786: AND
73787: IFFALSE 73893
73789: GO 73791
73791: DISABLE
73792: LD_INT 0
73794: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
73795: LD_ADDR_VAR 0 1
73799: PUSH
73800: LD_INT 22
73802: PUSH
73803: LD_OWVAR 2
73807: PUSH
73808: EMPTY
73809: LIST
73810: LIST
73811: PUSH
73812: LD_INT 2
73814: PUSH
73815: LD_INT 30
73817: PUSH
73818: LD_INT 0
73820: PUSH
73821: EMPTY
73822: LIST
73823: LIST
73824: PUSH
73825: LD_INT 30
73827: PUSH
73828: LD_INT 1
73830: PUSH
73831: EMPTY
73832: LIST
73833: LIST
73834: PUSH
73835: EMPTY
73836: LIST
73837: LIST
73838: LIST
73839: PUSH
73840: EMPTY
73841: LIST
73842: LIST
73843: PPUSH
73844: CALL_OW 69
73848: ST_TO_ADDR
// if not depot then
73849: LD_VAR 0 1
73853: NOT
73854: IFFALSE 73858
// exit ;
73856: GO 73893
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
73858: LD_VAR 0 1
73862: PUSH
73863: LD_INT 1
73865: ARRAY
73866: PPUSH
73867: CALL_OW 250
73871: PPUSH
73872: LD_VAR 0 1
73876: PUSH
73877: LD_INT 1
73879: ARRAY
73880: PPUSH
73881: CALL_OW 251
73885: PPUSH
73886: LD_INT 70
73888: PPUSH
73889: CALL_OW 495
// end ;
73893: PPOPN 1
73895: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
73896: LD_EXP 47
73900: PUSH
73901: LD_EXP 81
73905: AND
73906: IFFALSE 74117
73908: GO 73910
73910: DISABLE
73911: LD_INT 0
73913: PPUSH
73914: PPUSH
73915: PPUSH
73916: PPUSH
73917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
73918: LD_ADDR_VAR 0 5
73922: PUSH
73923: LD_INT 22
73925: PUSH
73926: LD_OWVAR 2
73930: PUSH
73931: EMPTY
73932: LIST
73933: LIST
73934: PUSH
73935: LD_INT 21
73937: PUSH
73938: LD_INT 1
73940: PUSH
73941: EMPTY
73942: LIST
73943: LIST
73944: PUSH
73945: EMPTY
73946: LIST
73947: LIST
73948: PPUSH
73949: CALL_OW 69
73953: ST_TO_ADDR
// if not tmp then
73954: LD_VAR 0 5
73958: NOT
73959: IFFALSE 73963
// exit ;
73961: GO 74117
// for i in tmp do
73963: LD_ADDR_VAR 0 1
73967: PUSH
73968: LD_VAR 0 5
73972: PUSH
73973: FOR_IN
73974: IFFALSE 74115
// begin d := rand ( 0 , 5 ) ;
73976: LD_ADDR_VAR 0 4
73980: PUSH
73981: LD_INT 0
73983: PPUSH
73984: LD_INT 5
73986: PPUSH
73987: CALL_OW 12
73991: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
73992: LD_ADDR_VAR 0 2
73996: PUSH
73997: LD_VAR 0 1
74001: PPUSH
74002: CALL_OW 250
74006: PPUSH
74007: LD_VAR 0 4
74011: PPUSH
74012: LD_INT 3
74014: PPUSH
74015: LD_INT 12
74017: PPUSH
74018: CALL_OW 12
74022: PPUSH
74023: CALL_OW 272
74027: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
74028: LD_ADDR_VAR 0 3
74032: PUSH
74033: LD_VAR 0 1
74037: PPUSH
74038: CALL_OW 251
74042: PPUSH
74043: LD_VAR 0 4
74047: PPUSH
74048: LD_INT 3
74050: PPUSH
74051: LD_INT 12
74053: PPUSH
74054: CALL_OW 12
74058: PPUSH
74059: CALL_OW 273
74063: ST_TO_ADDR
// if ValidHex ( x , y ) then
74064: LD_VAR 0 2
74068: PPUSH
74069: LD_VAR 0 3
74073: PPUSH
74074: CALL_OW 488
74078: IFFALSE 74113
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
74080: LD_VAR 0 1
74084: PPUSH
74085: LD_VAR 0 2
74089: PPUSH
74090: LD_VAR 0 3
74094: PPUSH
74095: LD_INT 3
74097: PPUSH
74098: LD_INT 6
74100: PPUSH
74101: CALL_OW 12
74105: PPUSH
74106: LD_INT 1
74108: PPUSH
74109: CALL_OW 483
// end ;
74113: GO 73973
74115: POP
74116: POP
// end ;
74117: PPOPN 5
74119: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
74120: LD_EXP 47
74124: PUSH
74125: LD_EXP 82
74129: AND
74130: IFFALSE 74224
74132: GO 74134
74134: DISABLE
74135: LD_INT 0
74137: PPUSH
74138: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
74139: LD_ADDR_VAR 0 2
74143: PUSH
74144: LD_INT 22
74146: PUSH
74147: LD_OWVAR 2
74151: PUSH
74152: EMPTY
74153: LIST
74154: LIST
74155: PUSH
74156: LD_INT 32
74158: PUSH
74159: LD_INT 1
74161: PUSH
74162: EMPTY
74163: LIST
74164: LIST
74165: PUSH
74166: LD_INT 21
74168: PUSH
74169: LD_INT 2
74171: PUSH
74172: EMPTY
74173: LIST
74174: LIST
74175: PUSH
74176: EMPTY
74177: LIST
74178: LIST
74179: LIST
74180: PPUSH
74181: CALL_OW 69
74185: ST_TO_ADDR
// if not tmp then
74186: LD_VAR 0 2
74190: NOT
74191: IFFALSE 74195
// exit ;
74193: GO 74224
// for i in tmp do
74195: LD_ADDR_VAR 0 1
74199: PUSH
74200: LD_VAR 0 2
74204: PUSH
74205: FOR_IN
74206: IFFALSE 74222
// SetFuel ( i , 0 ) ;
74208: LD_VAR 0 1
74212: PPUSH
74213: LD_INT 0
74215: PPUSH
74216: CALL_OW 240
74220: GO 74205
74222: POP
74223: POP
// end ;
74224: PPOPN 2
74226: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
74227: LD_EXP 47
74231: PUSH
74232: LD_EXP 83
74236: AND
74237: IFFALSE 74303
74239: GO 74241
74241: DISABLE
74242: LD_INT 0
74244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
74245: LD_ADDR_VAR 0 1
74249: PUSH
74250: LD_INT 22
74252: PUSH
74253: LD_OWVAR 2
74257: PUSH
74258: EMPTY
74259: LIST
74260: LIST
74261: PUSH
74262: LD_INT 30
74264: PUSH
74265: LD_INT 29
74267: PUSH
74268: EMPTY
74269: LIST
74270: LIST
74271: PUSH
74272: EMPTY
74273: LIST
74274: LIST
74275: PPUSH
74276: CALL_OW 69
74280: ST_TO_ADDR
// if not tmp then
74281: LD_VAR 0 1
74285: NOT
74286: IFFALSE 74290
// exit ;
74288: GO 74303
// DestroyUnit ( tmp [ 1 ] ) ;
74290: LD_VAR 0 1
74294: PUSH
74295: LD_INT 1
74297: ARRAY
74298: PPUSH
74299: CALL_OW 65
// end ;
74303: PPOPN 1
74305: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
74306: LD_EXP 47
74310: PUSH
74311: LD_EXP 85
74315: AND
74316: IFFALSE 74445
74318: GO 74320
74320: DISABLE
74321: LD_INT 0
74323: PPUSH
// begin uc_side := 0 ;
74324: LD_ADDR_OWVAR 20
74328: PUSH
74329: LD_INT 0
74331: ST_TO_ADDR
// uc_nation := nation_arabian ;
74332: LD_ADDR_OWVAR 21
74336: PUSH
74337: LD_INT 2
74339: ST_TO_ADDR
// hc_gallery :=  ;
74340: LD_ADDR_OWVAR 33
74344: PUSH
74345: LD_STRING 
74347: ST_TO_ADDR
// hc_name :=  ;
74348: LD_ADDR_OWVAR 26
74352: PUSH
74353: LD_STRING 
74355: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
74356: LD_INT 1
74358: PPUSH
74359: LD_INT 11
74361: PPUSH
74362: LD_INT 10
74364: PPUSH
74365: CALL_OW 380
// un := CreateHuman ;
74369: LD_ADDR_VAR 0 1
74373: PUSH
74374: CALL_OW 44
74378: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
74379: LD_VAR 0 1
74383: PPUSH
74384: LD_INT 1
74386: PPUSH
74387: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
74391: LD_INT 35
74393: PPUSH
74394: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
74398: LD_VAR 0 1
74402: PPUSH
74403: LD_INT 22
74405: PUSH
74406: LD_OWVAR 2
74410: PUSH
74411: EMPTY
74412: LIST
74413: LIST
74414: PPUSH
74415: CALL_OW 69
74419: PPUSH
74420: LD_VAR 0 1
74424: PPUSH
74425: CALL_OW 74
74429: PPUSH
74430: CALL_OW 115
// until IsDead ( un ) ;
74434: LD_VAR 0 1
74438: PPUSH
74439: CALL_OW 301
74443: IFFALSE 74391
// end ;
74445: PPOPN 1
74447: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
74448: LD_EXP 47
74452: PUSH
74453: LD_EXP 87
74457: AND
74458: IFFALSE 74470
74460: GO 74462
74462: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
74463: LD_STRING earthquake(getX(game), 0, 32)
74465: PPUSH
74466: CALL_OW 559
74470: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
74471: LD_EXP 47
74475: PUSH
74476: LD_EXP 88
74480: AND
74481: IFFALSE 74572
74483: GO 74485
74485: DISABLE
74486: LD_INT 0
74488: PPUSH
// begin enable ;
74489: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
74490: LD_ADDR_VAR 0 1
74494: PUSH
74495: LD_INT 22
74497: PUSH
74498: LD_OWVAR 2
74502: PUSH
74503: EMPTY
74504: LIST
74505: LIST
74506: PUSH
74507: LD_INT 21
74509: PUSH
74510: LD_INT 2
74512: PUSH
74513: EMPTY
74514: LIST
74515: LIST
74516: PUSH
74517: LD_INT 33
74519: PUSH
74520: LD_INT 3
74522: PUSH
74523: EMPTY
74524: LIST
74525: LIST
74526: PUSH
74527: EMPTY
74528: LIST
74529: LIST
74530: LIST
74531: PPUSH
74532: CALL_OW 69
74536: ST_TO_ADDR
// if not tmp then
74537: LD_VAR 0 1
74541: NOT
74542: IFFALSE 74546
// exit ;
74544: GO 74572
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
74546: LD_VAR 0 1
74550: PUSH
74551: LD_INT 1
74553: PPUSH
74554: LD_VAR 0 1
74558: PPUSH
74559: CALL_OW 12
74563: ARRAY
74564: PPUSH
74565: LD_INT 1
74567: PPUSH
74568: CALL_OW 234
// end ;
74572: PPOPN 1
74574: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
74575: LD_EXP 47
74579: PUSH
74580: LD_EXP 89
74584: AND
74585: IFFALSE 74726
74587: GO 74589
74589: DISABLE
74590: LD_INT 0
74592: PPUSH
74593: PPUSH
74594: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74595: LD_ADDR_VAR 0 3
74599: PUSH
74600: LD_INT 22
74602: PUSH
74603: LD_OWVAR 2
74607: PUSH
74608: EMPTY
74609: LIST
74610: LIST
74611: PUSH
74612: LD_INT 25
74614: PUSH
74615: LD_INT 1
74617: PUSH
74618: EMPTY
74619: LIST
74620: LIST
74621: PUSH
74622: EMPTY
74623: LIST
74624: LIST
74625: PPUSH
74626: CALL_OW 69
74630: ST_TO_ADDR
// if not tmp then
74631: LD_VAR 0 3
74635: NOT
74636: IFFALSE 74640
// exit ;
74638: GO 74726
// un := tmp [ rand ( 1 , tmp ) ] ;
74640: LD_ADDR_VAR 0 2
74644: PUSH
74645: LD_VAR 0 3
74649: PUSH
74650: LD_INT 1
74652: PPUSH
74653: LD_VAR 0 3
74657: PPUSH
74658: CALL_OW 12
74662: ARRAY
74663: ST_TO_ADDR
// if Crawls ( un ) then
74664: LD_VAR 0 2
74668: PPUSH
74669: CALL_OW 318
74673: IFFALSE 74684
// ComWalk ( un ) ;
74675: LD_VAR 0 2
74679: PPUSH
74680: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
74684: LD_VAR 0 2
74688: PPUSH
74689: LD_INT 9
74691: PPUSH
74692: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
74696: LD_INT 28
74698: PPUSH
74699: LD_OWVAR 2
74703: PPUSH
74704: LD_INT 2
74706: PPUSH
74707: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
74711: LD_INT 29
74713: PPUSH
74714: LD_OWVAR 2
74718: PPUSH
74719: LD_INT 2
74721: PPUSH
74722: CALL_OW 322
// end ;
74726: PPOPN 3
74728: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
74729: LD_EXP 47
74733: PUSH
74734: LD_EXP 90
74738: AND
74739: IFFALSE 74850
74741: GO 74743
74743: DISABLE
74744: LD_INT 0
74746: PPUSH
74747: PPUSH
74748: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74749: LD_ADDR_VAR 0 3
74753: PUSH
74754: LD_INT 22
74756: PUSH
74757: LD_OWVAR 2
74761: PUSH
74762: EMPTY
74763: LIST
74764: LIST
74765: PUSH
74766: LD_INT 25
74768: PUSH
74769: LD_INT 1
74771: PUSH
74772: EMPTY
74773: LIST
74774: LIST
74775: PUSH
74776: EMPTY
74777: LIST
74778: LIST
74779: PPUSH
74780: CALL_OW 69
74784: ST_TO_ADDR
// if not tmp then
74785: LD_VAR 0 3
74789: NOT
74790: IFFALSE 74794
// exit ;
74792: GO 74850
// un := tmp [ rand ( 1 , tmp ) ] ;
74794: LD_ADDR_VAR 0 2
74798: PUSH
74799: LD_VAR 0 3
74803: PUSH
74804: LD_INT 1
74806: PPUSH
74807: LD_VAR 0 3
74811: PPUSH
74812: CALL_OW 12
74816: ARRAY
74817: ST_TO_ADDR
// if Crawls ( un ) then
74818: LD_VAR 0 2
74822: PPUSH
74823: CALL_OW 318
74827: IFFALSE 74838
// ComWalk ( un ) ;
74829: LD_VAR 0 2
74833: PPUSH
74834: CALL_OW 138
// SetClass ( un , class_mortar ) ;
74838: LD_VAR 0 2
74842: PPUSH
74843: LD_INT 8
74845: PPUSH
74846: CALL_OW 336
// end ;
74850: PPOPN 3
74852: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
74853: LD_EXP 47
74857: PUSH
74858: LD_EXP 91
74862: AND
74863: IFFALSE 75007
74865: GO 74867
74867: DISABLE
74868: LD_INT 0
74870: PPUSH
74871: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
74872: LD_ADDR_VAR 0 2
74876: PUSH
74877: LD_INT 22
74879: PUSH
74880: LD_OWVAR 2
74884: PUSH
74885: EMPTY
74886: LIST
74887: LIST
74888: PUSH
74889: LD_INT 21
74891: PUSH
74892: LD_INT 2
74894: PUSH
74895: EMPTY
74896: LIST
74897: LIST
74898: PUSH
74899: LD_INT 2
74901: PUSH
74902: LD_INT 34
74904: PUSH
74905: LD_INT 12
74907: PUSH
74908: EMPTY
74909: LIST
74910: LIST
74911: PUSH
74912: LD_INT 34
74914: PUSH
74915: LD_INT 51
74917: PUSH
74918: EMPTY
74919: LIST
74920: LIST
74921: PUSH
74922: LD_INT 34
74924: PUSH
74925: LD_INT 32
74927: PUSH
74928: EMPTY
74929: LIST
74930: LIST
74931: PUSH
74932: EMPTY
74933: LIST
74934: LIST
74935: LIST
74936: LIST
74937: PUSH
74938: EMPTY
74939: LIST
74940: LIST
74941: LIST
74942: PPUSH
74943: CALL_OW 69
74947: ST_TO_ADDR
// if not tmp then
74948: LD_VAR 0 2
74952: NOT
74953: IFFALSE 74957
// exit ;
74955: GO 75007
// for i in tmp do
74957: LD_ADDR_VAR 0 1
74961: PUSH
74962: LD_VAR 0 2
74966: PUSH
74967: FOR_IN
74968: IFFALSE 75005
// if GetCargo ( i , mat_artifact ) = 0 then
74970: LD_VAR 0 1
74974: PPUSH
74975: LD_INT 4
74977: PPUSH
74978: CALL_OW 289
74982: PUSH
74983: LD_INT 0
74985: EQUAL
74986: IFFALSE 75003
// SetCargo ( i , mat_siberit , 100 ) ;
74988: LD_VAR 0 1
74992: PPUSH
74993: LD_INT 3
74995: PPUSH
74996: LD_INT 100
74998: PPUSH
74999: CALL_OW 290
75003: GO 74967
75005: POP
75006: POP
// end ;
75007: PPOPN 2
75009: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
75010: LD_EXP 47
75014: PUSH
75015: LD_EXP 92
75019: AND
75020: IFFALSE 75203
75022: GO 75024
75024: DISABLE
75025: LD_INT 0
75027: PPUSH
75028: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
75029: LD_ADDR_VAR 0 2
75033: PUSH
75034: LD_INT 22
75036: PUSH
75037: LD_OWVAR 2
75041: PUSH
75042: EMPTY
75043: LIST
75044: LIST
75045: PPUSH
75046: CALL_OW 69
75050: ST_TO_ADDR
// if not tmp then
75051: LD_VAR 0 2
75055: NOT
75056: IFFALSE 75060
// exit ;
75058: GO 75203
// for i := 1 to 2 do
75060: LD_ADDR_VAR 0 1
75064: PUSH
75065: DOUBLE
75066: LD_INT 1
75068: DEC
75069: ST_TO_ADDR
75070: LD_INT 2
75072: PUSH
75073: FOR_TO
75074: IFFALSE 75201
// begin uc_side := your_side ;
75076: LD_ADDR_OWVAR 20
75080: PUSH
75081: LD_OWVAR 2
75085: ST_TO_ADDR
// uc_nation := nation_american ;
75086: LD_ADDR_OWVAR 21
75090: PUSH
75091: LD_INT 1
75093: ST_TO_ADDR
// vc_chassis := us_morphling ;
75094: LD_ADDR_OWVAR 37
75098: PUSH
75099: LD_INT 5
75101: ST_TO_ADDR
// vc_engine := engine_siberite ;
75102: LD_ADDR_OWVAR 39
75106: PUSH
75107: LD_INT 3
75109: ST_TO_ADDR
// vc_control := control_computer ;
75110: LD_ADDR_OWVAR 38
75114: PUSH
75115: LD_INT 3
75117: ST_TO_ADDR
// vc_weapon := us_double_laser ;
75118: LD_ADDR_OWVAR 40
75122: PUSH
75123: LD_INT 10
75125: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
75126: LD_VAR 0 2
75130: PUSH
75131: LD_INT 1
75133: ARRAY
75134: PPUSH
75135: CALL_OW 310
75139: NOT
75140: IFFALSE 75187
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
75142: CALL_OW 45
75146: PPUSH
75147: LD_VAR 0 2
75151: PUSH
75152: LD_INT 1
75154: ARRAY
75155: PPUSH
75156: CALL_OW 250
75160: PPUSH
75161: LD_VAR 0 2
75165: PUSH
75166: LD_INT 1
75168: ARRAY
75169: PPUSH
75170: CALL_OW 251
75174: PPUSH
75175: LD_INT 12
75177: PPUSH
75178: LD_INT 1
75180: PPUSH
75181: CALL_OW 50
75185: GO 75199
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
75187: CALL_OW 45
75191: PPUSH
75192: LD_INT 1
75194: PPUSH
75195: CALL_OW 51
// end ;
75199: GO 75073
75201: POP
75202: POP
// end ;
75203: PPOPN 2
75205: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
75206: LD_EXP 47
75210: PUSH
75211: LD_EXP 93
75215: AND
75216: IFFALSE 75438
75218: GO 75220
75220: DISABLE
75221: LD_INT 0
75223: PPUSH
75224: PPUSH
75225: PPUSH
75226: PPUSH
75227: PPUSH
75228: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75229: LD_ADDR_VAR 0 6
75233: PUSH
75234: LD_INT 22
75236: PUSH
75237: LD_OWVAR 2
75241: PUSH
75242: EMPTY
75243: LIST
75244: LIST
75245: PUSH
75246: LD_INT 21
75248: PUSH
75249: LD_INT 1
75251: PUSH
75252: EMPTY
75253: LIST
75254: LIST
75255: PUSH
75256: LD_INT 3
75258: PUSH
75259: LD_INT 23
75261: PUSH
75262: LD_INT 0
75264: PUSH
75265: EMPTY
75266: LIST
75267: LIST
75268: PUSH
75269: EMPTY
75270: LIST
75271: LIST
75272: PUSH
75273: EMPTY
75274: LIST
75275: LIST
75276: LIST
75277: PPUSH
75278: CALL_OW 69
75282: ST_TO_ADDR
// if not tmp then
75283: LD_VAR 0 6
75287: NOT
75288: IFFALSE 75292
// exit ;
75290: GO 75438
// s1 := rand ( 1 , 4 ) ;
75292: LD_ADDR_VAR 0 2
75296: PUSH
75297: LD_INT 1
75299: PPUSH
75300: LD_INT 4
75302: PPUSH
75303: CALL_OW 12
75307: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
75308: LD_ADDR_VAR 0 4
75312: PUSH
75313: LD_VAR 0 6
75317: PUSH
75318: LD_INT 1
75320: ARRAY
75321: PPUSH
75322: LD_VAR 0 2
75326: PPUSH
75327: CALL_OW 259
75331: ST_TO_ADDR
// if s1 = 1 then
75332: LD_VAR 0 2
75336: PUSH
75337: LD_INT 1
75339: EQUAL
75340: IFFALSE 75360
// s2 := rand ( 2 , 4 ) else
75342: LD_ADDR_VAR 0 3
75346: PUSH
75347: LD_INT 2
75349: PPUSH
75350: LD_INT 4
75352: PPUSH
75353: CALL_OW 12
75357: ST_TO_ADDR
75358: GO 75368
// s2 := 1 ;
75360: LD_ADDR_VAR 0 3
75364: PUSH
75365: LD_INT 1
75367: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
75368: LD_ADDR_VAR 0 5
75372: PUSH
75373: LD_VAR 0 6
75377: PUSH
75378: LD_INT 1
75380: ARRAY
75381: PPUSH
75382: LD_VAR 0 3
75386: PPUSH
75387: CALL_OW 259
75391: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
75392: LD_VAR 0 6
75396: PUSH
75397: LD_INT 1
75399: ARRAY
75400: PPUSH
75401: LD_VAR 0 2
75405: PPUSH
75406: LD_VAR 0 5
75410: PPUSH
75411: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
75415: LD_VAR 0 6
75419: PUSH
75420: LD_INT 1
75422: ARRAY
75423: PPUSH
75424: LD_VAR 0 3
75428: PPUSH
75429: LD_VAR 0 4
75433: PPUSH
75434: CALL_OW 237
// end ;
75438: PPOPN 6
75440: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
75441: LD_EXP 47
75445: PUSH
75446: LD_EXP 94
75450: AND
75451: IFFALSE 75530
75453: GO 75455
75455: DISABLE
75456: LD_INT 0
75458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
75459: LD_ADDR_VAR 0 1
75463: PUSH
75464: LD_INT 22
75466: PUSH
75467: LD_OWVAR 2
75471: PUSH
75472: EMPTY
75473: LIST
75474: LIST
75475: PUSH
75476: LD_INT 30
75478: PUSH
75479: LD_INT 3
75481: PUSH
75482: EMPTY
75483: LIST
75484: LIST
75485: PUSH
75486: EMPTY
75487: LIST
75488: LIST
75489: PPUSH
75490: CALL_OW 69
75494: ST_TO_ADDR
// if not tmp then
75495: LD_VAR 0 1
75499: NOT
75500: IFFALSE 75504
// exit ;
75502: GO 75530
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
75504: LD_VAR 0 1
75508: PUSH
75509: LD_INT 1
75511: PPUSH
75512: LD_VAR 0 1
75516: PPUSH
75517: CALL_OW 12
75521: ARRAY
75522: PPUSH
75523: LD_INT 1
75525: PPUSH
75526: CALL_OW 234
// end ;
75530: PPOPN 1
75532: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
75533: LD_EXP 47
75537: PUSH
75538: LD_EXP 95
75542: AND
75543: IFFALSE 75655
75545: GO 75547
75547: DISABLE
75548: LD_INT 0
75550: PPUSH
75551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
75552: LD_ADDR_VAR 0 2
75556: PUSH
75557: LD_INT 22
75559: PUSH
75560: LD_OWVAR 2
75564: PUSH
75565: EMPTY
75566: LIST
75567: LIST
75568: PUSH
75569: LD_INT 2
75571: PUSH
75572: LD_INT 30
75574: PUSH
75575: LD_INT 27
75577: PUSH
75578: EMPTY
75579: LIST
75580: LIST
75581: PUSH
75582: LD_INT 30
75584: PUSH
75585: LD_INT 26
75587: PUSH
75588: EMPTY
75589: LIST
75590: LIST
75591: PUSH
75592: LD_INT 30
75594: PUSH
75595: LD_INT 28
75597: PUSH
75598: EMPTY
75599: LIST
75600: LIST
75601: PUSH
75602: EMPTY
75603: LIST
75604: LIST
75605: LIST
75606: LIST
75607: PUSH
75608: EMPTY
75609: LIST
75610: LIST
75611: PPUSH
75612: CALL_OW 69
75616: ST_TO_ADDR
// if not tmp then
75617: LD_VAR 0 2
75621: NOT
75622: IFFALSE 75626
// exit ;
75624: GO 75655
// for i in tmp do
75626: LD_ADDR_VAR 0 1
75630: PUSH
75631: LD_VAR 0 2
75635: PUSH
75636: FOR_IN
75637: IFFALSE 75653
// SetLives ( i , 1 ) ;
75639: LD_VAR 0 1
75643: PPUSH
75644: LD_INT 1
75646: PPUSH
75647: CALL_OW 234
75651: GO 75636
75653: POP
75654: POP
// end ;
75655: PPOPN 2
75657: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
75658: LD_EXP 47
75662: PUSH
75663: LD_EXP 96
75667: AND
75668: IFFALSE 75955
75670: GO 75672
75672: DISABLE
75673: LD_INT 0
75675: PPUSH
75676: PPUSH
75677: PPUSH
// begin i := rand ( 1 , 7 ) ;
75678: LD_ADDR_VAR 0 1
75682: PUSH
75683: LD_INT 1
75685: PPUSH
75686: LD_INT 7
75688: PPUSH
75689: CALL_OW 12
75693: ST_TO_ADDR
// case i of 1 :
75694: LD_VAR 0 1
75698: PUSH
75699: LD_INT 1
75701: DOUBLE
75702: EQUAL
75703: IFTRUE 75707
75705: GO 75717
75707: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
75708: LD_STRING earthquake(getX(game), 0, 32)
75710: PPUSH
75711: CALL_OW 559
75715: GO 75955
75717: LD_INT 2
75719: DOUBLE
75720: EQUAL
75721: IFTRUE 75725
75723: GO 75739
75725: POP
// begin ToLua ( displayStucuk(); ) ;
75726: LD_STRING displayStucuk();
75728: PPUSH
75729: CALL_OW 559
// ResetFog ;
75733: CALL_OW 335
// end ; 3 :
75737: GO 75955
75739: LD_INT 3
75741: DOUBLE
75742: EQUAL
75743: IFTRUE 75747
75745: GO 75851
75747: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
75748: LD_ADDR_VAR 0 2
75752: PUSH
75753: LD_INT 22
75755: PUSH
75756: LD_OWVAR 2
75760: PUSH
75761: EMPTY
75762: LIST
75763: LIST
75764: PUSH
75765: LD_INT 25
75767: PUSH
75768: LD_INT 1
75770: PUSH
75771: EMPTY
75772: LIST
75773: LIST
75774: PUSH
75775: EMPTY
75776: LIST
75777: LIST
75778: PPUSH
75779: CALL_OW 69
75783: ST_TO_ADDR
// if not tmp then
75784: LD_VAR 0 2
75788: NOT
75789: IFFALSE 75793
// exit ;
75791: GO 75955
// un := tmp [ rand ( 1 , tmp ) ] ;
75793: LD_ADDR_VAR 0 3
75797: PUSH
75798: LD_VAR 0 2
75802: PUSH
75803: LD_INT 1
75805: PPUSH
75806: LD_VAR 0 2
75810: PPUSH
75811: CALL_OW 12
75815: ARRAY
75816: ST_TO_ADDR
// if Crawls ( un ) then
75817: LD_VAR 0 3
75821: PPUSH
75822: CALL_OW 318
75826: IFFALSE 75837
// ComWalk ( un ) ;
75828: LD_VAR 0 3
75832: PPUSH
75833: CALL_OW 138
// SetClass ( un , class_mortar ) ;
75837: LD_VAR 0 3
75841: PPUSH
75842: LD_INT 8
75844: PPUSH
75845: CALL_OW 336
// end ; 4 :
75849: GO 75955
75851: LD_INT 4
75853: DOUBLE
75854: EQUAL
75855: IFTRUE 75859
75857: GO 75933
75859: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
75860: LD_ADDR_VAR 0 2
75864: PUSH
75865: LD_INT 22
75867: PUSH
75868: LD_OWVAR 2
75872: PUSH
75873: EMPTY
75874: LIST
75875: LIST
75876: PUSH
75877: LD_INT 30
75879: PUSH
75880: LD_INT 29
75882: PUSH
75883: EMPTY
75884: LIST
75885: LIST
75886: PUSH
75887: EMPTY
75888: LIST
75889: LIST
75890: PPUSH
75891: CALL_OW 69
75895: ST_TO_ADDR
// if not tmp then
75896: LD_VAR 0 2
75900: NOT
75901: IFFALSE 75905
// exit ;
75903: GO 75955
// CenterNowOnUnits ( tmp [ 1 ] ) ;
75905: LD_VAR 0 2
75909: PUSH
75910: LD_INT 1
75912: ARRAY
75913: PPUSH
75914: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
75918: LD_VAR 0 2
75922: PUSH
75923: LD_INT 1
75925: ARRAY
75926: PPUSH
75927: CALL_OW 65
// end ; 5 .. 7 :
75931: GO 75955
75933: LD_INT 5
75935: DOUBLE
75936: GREATEREQUAL
75937: IFFALSE 75945
75939: LD_INT 7
75941: DOUBLE
75942: LESSEQUAL
75943: IFTRUE 75947
75945: GO 75954
75947: POP
// StreamSibBomb ; end ;
75948: CALL 72192 0 0
75952: GO 75955
75954: POP
// end ;
75955: PPOPN 3
75957: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
75958: LD_EXP 47
75962: PUSH
75963: LD_EXP 97
75967: AND
75968: IFFALSE 76124
75970: GO 75972
75972: DISABLE
75973: LD_INT 0
75975: PPUSH
75976: PPUSH
75977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
75978: LD_ADDR_VAR 0 2
75982: PUSH
75983: LD_INT 81
75985: PUSH
75986: LD_OWVAR 2
75990: PUSH
75991: EMPTY
75992: LIST
75993: LIST
75994: PUSH
75995: LD_INT 2
75997: PUSH
75998: LD_INT 21
76000: PUSH
76001: LD_INT 1
76003: PUSH
76004: EMPTY
76005: LIST
76006: LIST
76007: PUSH
76008: LD_INT 21
76010: PUSH
76011: LD_INT 2
76013: PUSH
76014: EMPTY
76015: LIST
76016: LIST
76017: PUSH
76018: EMPTY
76019: LIST
76020: LIST
76021: LIST
76022: PUSH
76023: EMPTY
76024: LIST
76025: LIST
76026: PPUSH
76027: CALL_OW 69
76031: ST_TO_ADDR
// if not tmp then
76032: LD_VAR 0 2
76036: NOT
76037: IFFALSE 76041
// exit ;
76039: GO 76124
// p := 0 ;
76041: LD_ADDR_VAR 0 3
76045: PUSH
76046: LD_INT 0
76048: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
76049: LD_INT 35
76051: PPUSH
76052: CALL_OW 67
// p := p + 1 ;
76056: LD_ADDR_VAR 0 3
76060: PUSH
76061: LD_VAR 0 3
76065: PUSH
76066: LD_INT 1
76068: PLUS
76069: ST_TO_ADDR
// for i in tmp do
76070: LD_ADDR_VAR 0 1
76074: PUSH
76075: LD_VAR 0 2
76079: PUSH
76080: FOR_IN
76081: IFFALSE 76112
// if GetLives ( i ) < 1000 then
76083: LD_VAR 0 1
76087: PPUSH
76088: CALL_OW 256
76092: PUSH
76093: LD_INT 1000
76095: LESS
76096: IFFALSE 76110
// SetLives ( i , 1000 ) ;
76098: LD_VAR 0 1
76102: PPUSH
76103: LD_INT 1000
76105: PPUSH
76106: CALL_OW 234
76110: GO 76080
76112: POP
76113: POP
// until p > 20 ;
76114: LD_VAR 0 3
76118: PUSH
76119: LD_INT 20
76121: GREATER
76122: IFFALSE 76049
// end ;
76124: PPOPN 3
76126: END
// every 0 0$1 trigger StreamModeActive and sTime do
76127: LD_EXP 47
76131: PUSH
76132: LD_EXP 98
76136: AND
76137: IFFALSE 76172
76139: GO 76141
76141: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
76142: LD_INT 28
76144: PPUSH
76145: LD_OWVAR 2
76149: PPUSH
76150: LD_INT 2
76152: PPUSH
76153: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
76157: LD_INT 30
76159: PPUSH
76160: LD_OWVAR 2
76164: PPUSH
76165: LD_INT 2
76167: PPUSH
76168: CALL_OW 322
// end ;
76172: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
76173: LD_EXP 47
76177: PUSH
76178: LD_EXP 99
76182: AND
76183: IFFALSE 76304
76185: GO 76187
76187: DISABLE
76188: LD_INT 0
76190: PPUSH
76191: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
76192: LD_ADDR_VAR 0 2
76196: PUSH
76197: LD_INT 22
76199: PUSH
76200: LD_OWVAR 2
76204: PUSH
76205: EMPTY
76206: LIST
76207: LIST
76208: PUSH
76209: LD_INT 21
76211: PUSH
76212: LD_INT 1
76214: PUSH
76215: EMPTY
76216: LIST
76217: LIST
76218: PUSH
76219: LD_INT 3
76221: PUSH
76222: LD_INT 23
76224: PUSH
76225: LD_INT 0
76227: PUSH
76228: EMPTY
76229: LIST
76230: LIST
76231: PUSH
76232: EMPTY
76233: LIST
76234: LIST
76235: PUSH
76236: EMPTY
76237: LIST
76238: LIST
76239: LIST
76240: PPUSH
76241: CALL_OW 69
76245: ST_TO_ADDR
// if not tmp then
76246: LD_VAR 0 2
76250: NOT
76251: IFFALSE 76255
// exit ;
76253: GO 76304
// for i in tmp do
76255: LD_ADDR_VAR 0 1
76259: PUSH
76260: LD_VAR 0 2
76264: PUSH
76265: FOR_IN
76266: IFFALSE 76302
// begin if Crawls ( i ) then
76268: LD_VAR 0 1
76272: PPUSH
76273: CALL_OW 318
76277: IFFALSE 76288
// ComWalk ( i ) ;
76279: LD_VAR 0 1
76283: PPUSH
76284: CALL_OW 138
// SetClass ( i , 2 ) ;
76288: LD_VAR 0 1
76292: PPUSH
76293: LD_INT 2
76295: PPUSH
76296: CALL_OW 336
// end ;
76300: GO 76265
76302: POP
76303: POP
// end ;
76304: PPOPN 2
76306: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
76307: LD_EXP 47
76311: PUSH
76312: LD_EXP 100
76316: AND
76317: IFFALSE 76605
76319: GO 76321
76321: DISABLE
76322: LD_INT 0
76324: PPUSH
76325: PPUSH
76326: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
76327: LD_OWVAR 2
76331: PPUSH
76332: LD_INT 9
76334: PPUSH
76335: LD_INT 1
76337: PPUSH
76338: LD_INT 1
76340: PPUSH
76341: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
76345: LD_INT 9
76347: PPUSH
76348: LD_OWVAR 2
76352: PPUSH
76353: CALL_OW 343
// uc_side := 9 ;
76357: LD_ADDR_OWVAR 20
76361: PUSH
76362: LD_INT 9
76364: ST_TO_ADDR
// uc_nation := 2 ;
76365: LD_ADDR_OWVAR 21
76369: PUSH
76370: LD_INT 2
76372: ST_TO_ADDR
// hc_name := Dark Warrior ;
76373: LD_ADDR_OWVAR 26
76377: PUSH
76378: LD_STRING Dark Warrior
76380: ST_TO_ADDR
// hc_gallery :=  ;
76381: LD_ADDR_OWVAR 33
76385: PUSH
76386: LD_STRING 
76388: ST_TO_ADDR
// hc_noskilllimit := true ;
76389: LD_ADDR_OWVAR 76
76393: PUSH
76394: LD_INT 1
76396: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
76397: LD_ADDR_OWVAR 31
76401: PUSH
76402: LD_INT 30
76404: PUSH
76405: LD_INT 30
76407: PUSH
76408: LD_INT 30
76410: PUSH
76411: LD_INT 30
76413: PUSH
76414: EMPTY
76415: LIST
76416: LIST
76417: LIST
76418: LIST
76419: ST_TO_ADDR
// un := CreateHuman ;
76420: LD_ADDR_VAR 0 3
76424: PUSH
76425: CALL_OW 44
76429: ST_TO_ADDR
// hc_noskilllimit := false ;
76430: LD_ADDR_OWVAR 76
76434: PUSH
76435: LD_INT 0
76437: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
76438: LD_VAR 0 3
76442: PPUSH
76443: LD_INT 1
76445: PPUSH
76446: CALL_OW 51
// ToLua ( playRanger() ) ;
76450: LD_STRING playRanger()
76452: PPUSH
76453: CALL_OW 559
// p := 0 ;
76457: LD_ADDR_VAR 0 2
76461: PUSH
76462: LD_INT 0
76464: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
76465: LD_INT 35
76467: PPUSH
76468: CALL_OW 67
// p := p + 1 ;
76472: LD_ADDR_VAR 0 2
76476: PUSH
76477: LD_VAR 0 2
76481: PUSH
76482: LD_INT 1
76484: PLUS
76485: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
76486: LD_VAR 0 3
76490: PPUSH
76491: CALL_OW 256
76495: PUSH
76496: LD_INT 1000
76498: LESS
76499: IFFALSE 76513
// SetLives ( un , 1000 ) ;
76501: LD_VAR 0 3
76505: PPUSH
76506: LD_INT 1000
76508: PPUSH
76509: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
76513: LD_VAR 0 3
76517: PPUSH
76518: LD_INT 81
76520: PUSH
76521: LD_OWVAR 2
76525: PUSH
76526: EMPTY
76527: LIST
76528: LIST
76529: PUSH
76530: LD_INT 91
76532: PUSH
76533: LD_VAR 0 3
76537: PUSH
76538: LD_INT 30
76540: PUSH
76541: EMPTY
76542: LIST
76543: LIST
76544: LIST
76545: PUSH
76546: EMPTY
76547: LIST
76548: LIST
76549: PPUSH
76550: CALL_OW 69
76554: PPUSH
76555: LD_VAR 0 3
76559: PPUSH
76560: CALL_OW 74
76564: PPUSH
76565: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
76569: LD_VAR 0 2
76573: PUSH
76574: LD_INT 80
76576: GREATER
76577: PUSH
76578: LD_VAR 0 3
76582: PPUSH
76583: CALL_OW 301
76587: OR
76588: IFFALSE 76465
// if un then
76590: LD_VAR 0 3
76594: IFFALSE 76605
// RemoveUnit ( un ) ;
76596: LD_VAR 0 3
76600: PPUSH
76601: CALL_OW 64
// end ;
76605: PPOPN 3
76607: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
76608: LD_EXP 101
76612: IFFALSE 76728
76614: GO 76616
76616: DISABLE
76617: LD_INT 0
76619: PPUSH
76620: PPUSH
76621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
76622: LD_ADDR_VAR 0 2
76626: PUSH
76627: LD_INT 81
76629: PUSH
76630: LD_OWVAR 2
76634: PUSH
76635: EMPTY
76636: LIST
76637: LIST
76638: PUSH
76639: LD_INT 21
76641: PUSH
76642: LD_INT 1
76644: PUSH
76645: EMPTY
76646: LIST
76647: LIST
76648: PUSH
76649: EMPTY
76650: LIST
76651: LIST
76652: PPUSH
76653: CALL_OW 69
76657: ST_TO_ADDR
// ToLua ( playComputer() ) ;
76658: LD_STRING playComputer()
76660: PPUSH
76661: CALL_OW 559
// if not tmp then
76665: LD_VAR 0 2
76669: NOT
76670: IFFALSE 76674
// exit ;
76672: GO 76728
// for i in tmp do
76674: LD_ADDR_VAR 0 1
76678: PUSH
76679: LD_VAR 0 2
76683: PUSH
76684: FOR_IN
76685: IFFALSE 76726
// for j := 1 to 4 do
76687: LD_ADDR_VAR 0 3
76691: PUSH
76692: DOUBLE
76693: LD_INT 1
76695: DEC
76696: ST_TO_ADDR
76697: LD_INT 4
76699: PUSH
76700: FOR_TO
76701: IFFALSE 76722
// SetSkill ( i , j , 10 ) ;
76703: LD_VAR 0 1
76707: PPUSH
76708: LD_VAR 0 3
76712: PPUSH
76713: LD_INT 10
76715: PPUSH
76716: CALL_OW 237
76720: GO 76700
76722: POP
76723: POP
76724: GO 76684
76726: POP
76727: POP
// end ;
76728: PPOPN 3
76730: END
// every 0 0$1 trigger s30 do var i , tmp ;
76731: LD_EXP 102
76735: IFFALSE 76804
76737: GO 76739
76739: DISABLE
76740: LD_INT 0
76742: PPUSH
76743: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
76744: LD_ADDR_VAR 0 2
76748: PUSH
76749: LD_INT 22
76751: PUSH
76752: LD_OWVAR 2
76756: PUSH
76757: EMPTY
76758: LIST
76759: LIST
76760: PPUSH
76761: CALL_OW 69
76765: ST_TO_ADDR
// if not tmp then
76766: LD_VAR 0 2
76770: NOT
76771: IFFALSE 76775
// exit ;
76773: GO 76804
// for i in tmp do
76775: LD_ADDR_VAR 0 1
76779: PUSH
76780: LD_VAR 0 2
76784: PUSH
76785: FOR_IN
76786: IFFALSE 76802
// SetLives ( i , 300 ) ;
76788: LD_VAR 0 1
76792: PPUSH
76793: LD_INT 300
76795: PPUSH
76796: CALL_OW 234
76800: GO 76785
76802: POP
76803: POP
// end ;
76804: PPOPN 2
76806: END
// every 0 0$1 trigger s60 do var i , tmp ;
76807: LD_EXP 103
76811: IFFALSE 76880
76813: GO 76815
76815: DISABLE
76816: LD_INT 0
76818: PPUSH
76819: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
76820: LD_ADDR_VAR 0 2
76824: PUSH
76825: LD_INT 22
76827: PUSH
76828: LD_OWVAR 2
76832: PUSH
76833: EMPTY
76834: LIST
76835: LIST
76836: PPUSH
76837: CALL_OW 69
76841: ST_TO_ADDR
// if not tmp then
76842: LD_VAR 0 2
76846: NOT
76847: IFFALSE 76851
// exit ;
76849: GO 76880
// for i in tmp do
76851: LD_ADDR_VAR 0 1
76855: PUSH
76856: LD_VAR 0 2
76860: PUSH
76861: FOR_IN
76862: IFFALSE 76878
// SetLives ( i , 600 ) ;
76864: LD_VAR 0 1
76868: PPUSH
76869: LD_INT 600
76871: PPUSH
76872: CALL_OW 234
76876: GO 76861
76878: POP
76879: POP
// end ;
76880: PPOPN 2
76882: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
76883: LD_INT 0
76885: PPUSH
// case cmd of 301 :
76886: LD_VAR 0 1
76890: PUSH
76891: LD_INT 301
76893: DOUBLE
76894: EQUAL
76895: IFTRUE 76899
76897: GO 76931
76899: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
76900: LD_VAR 0 6
76904: PPUSH
76905: LD_VAR 0 7
76909: PPUSH
76910: LD_VAR 0 8
76914: PPUSH
76915: LD_VAR 0 4
76919: PPUSH
76920: LD_VAR 0 5
76924: PPUSH
76925: CALL 78140 0 5
76929: GO 77052
76931: LD_INT 302
76933: DOUBLE
76934: EQUAL
76935: IFTRUE 76939
76937: GO 76976
76939: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
76940: LD_VAR 0 6
76944: PPUSH
76945: LD_VAR 0 7
76949: PPUSH
76950: LD_VAR 0 8
76954: PPUSH
76955: LD_VAR 0 9
76959: PPUSH
76960: LD_VAR 0 4
76964: PPUSH
76965: LD_VAR 0 5
76969: PPUSH
76970: CALL 78231 0 6
76974: GO 77052
76976: LD_INT 303
76978: DOUBLE
76979: EQUAL
76980: IFTRUE 76984
76982: GO 77021
76984: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
76985: LD_VAR 0 6
76989: PPUSH
76990: LD_VAR 0 7
76994: PPUSH
76995: LD_VAR 0 8
76999: PPUSH
77000: LD_VAR 0 9
77004: PPUSH
77005: LD_VAR 0 4
77009: PPUSH
77010: LD_VAR 0 5
77014: PPUSH
77015: CALL 77057 0 6
77019: GO 77052
77021: LD_INT 304
77023: DOUBLE
77024: EQUAL
77025: IFTRUE 77029
77027: GO 77051
77029: POP
// hHackTeleport ( unit , x , y ) ; end ;
77030: LD_VAR 0 2
77034: PPUSH
77035: LD_VAR 0 4
77039: PPUSH
77040: LD_VAR 0 5
77044: PPUSH
77045: CALL 78824 0 3
77049: GO 77052
77051: POP
// end ;
77052: LD_VAR 0 12
77056: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
77057: LD_INT 0
77059: PPUSH
77060: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
77061: LD_VAR 0 1
77065: PUSH
77066: LD_INT 1
77068: LESS
77069: PUSH
77070: LD_VAR 0 1
77074: PUSH
77075: LD_INT 3
77077: GREATER
77078: OR
77079: PUSH
77080: LD_VAR 0 5
77084: PPUSH
77085: LD_VAR 0 6
77089: PPUSH
77090: CALL_OW 428
77094: OR
77095: IFFALSE 77099
// exit ;
77097: GO 77827
// uc_side := your_side ;
77099: LD_ADDR_OWVAR 20
77103: PUSH
77104: LD_OWVAR 2
77108: ST_TO_ADDR
// uc_nation := nation ;
77109: LD_ADDR_OWVAR 21
77113: PUSH
77114: LD_VAR 0 1
77118: ST_TO_ADDR
// bc_level = 1 ;
77119: LD_ADDR_OWVAR 43
77123: PUSH
77124: LD_INT 1
77126: ST_TO_ADDR
// case btype of 1 :
77127: LD_VAR 0 2
77131: PUSH
77132: LD_INT 1
77134: DOUBLE
77135: EQUAL
77136: IFTRUE 77140
77138: GO 77151
77140: POP
// bc_type := b_depot ; 2 :
77141: LD_ADDR_OWVAR 42
77145: PUSH
77146: LD_INT 0
77148: ST_TO_ADDR
77149: GO 77771
77151: LD_INT 2
77153: DOUBLE
77154: EQUAL
77155: IFTRUE 77159
77157: GO 77170
77159: POP
// bc_type := b_warehouse ; 3 :
77160: LD_ADDR_OWVAR 42
77164: PUSH
77165: LD_INT 1
77167: ST_TO_ADDR
77168: GO 77771
77170: LD_INT 3
77172: DOUBLE
77173: EQUAL
77174: IFTRUE 77178
77176: GO 77189
77178: POP
// bc_type := b_lab ; 4 .. 9 :
77179: LD_ADDR_OWVAR 42
77183: PUSH
77184: LD_INT 6
77186: ST_TO_ADDR
77187: GO 77771
77189: LD_INT 4
77191: DOUBLE
77192: GREATEREQUAL
77193: IFFALSE 77201
77195: LD_INT 9
77197: DOUBLE
77198: LESSEQUAL
77199: IFTRUE 77203
77201: GO 77263
77203: POP
// begin bc_type := b_lab_half ;
77204: LD_ADDR_OWVAR 42
77208: PUSH
77209: LD_INT 7
77211: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
77212: LD_ADDR_OWVAR 44
77216: PUSH
77217: LD_INT 10
77219: PUSH
77220: LD_INT 11
77222: PUSH
77223: LD_INT 12
77225: PUSH
77226: LD_INT 15
77228: PUSH
77229: LD_INT 14
77231: PUSH
77232: LD_INT 13
77234: PUSH
77235: EMPTY
77236: LIST
77237: LIST
77238: LIST
77239: LIST
77240: LIST
77241: LIST
77242: PUSH
77243: LD_VAR 0 2
77247: PUSH
77248: LD_INT 3
77250: MINUS
77251: ARRAY
77252: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
77253: LD_ADDR_OWVAR 45
77257: PUSH
77258: LD_INT 9
77260: ST_TO_ADDR
// end ; 10 .. 13 :
77261: GO 77771
77263: LD_INT 10
77265: DOUBLE
77266: GREATEREQUAL
77267: IFFALSE 77275
77269: LD_INT 13
77271: DOUBLE
77272: LESSEQUAL
77273: IFTRUE 77277
77275: GO 77354
77277: POP
// begin bc_type := b_lab_full ;
77278: LD_ADDR_OWVAR 42
77282: PUSH
77283: LD_INT 8
77285: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
77286: LD_ADDR_OWVAR 44
77290: PUSH
77291: LD_INT 10
77293: PUSH
77294: LD_INT 12
77296: PUSH
77297: LD_INT 14
77299: PUSH
77300: LD_INT 13
77302: PUSH
77303: EMPTY
77304: LIST
77305: LIST
77306: LIST
77307: LIST
77308: PUSH
77309: LD_VAR 0 2
77313: PUSH
77314: LD_INT 9
77316: MINUS
77317: ARRAY
77318: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
77319: LD_ADDR_OWVAR 45
77323: PUSH
77324: LD_INT 11
77326: PUSH
77327: LD_INT 15
77329: PUSH
77330: LD_INT 12
77332: PUSH
77333: LD_INT 15
77335: PUSH
77336: EMPTY
77337: LIST
77338: LIST
77339: LIST
77340: LIST
77341: PUSH
77342: LD_VAR 0 2
77346: PUSH
77347: LD_INT 9
77349: MINUS
77350: ARRAY
77351: ST_TO_ADDR
// end ; 14 :
77352: GO 77771
77354: LD_INT 14
77356: DOUBLE
77357: EQUAL
77358: IFTRUE 77362
77360: GO 77373
77362: POP
// bc_type := b_workshop ; 15 :
77363: LD_ADDR_OWVAR 42
77367: PUSH
77368: LD_INT 2
77370: ST_TO_ADDR
77371: GO 77771
77373: LD_INT 15
77375: DOUBLE
77376: EQUAL
77377: IFTRUE 77381
77379: GO 77392
77381: POP
// bc_type := b_factory ; 16 :
77382: LD_ADDR_OWVAR 42
77386: PUSH
77387: LD_INT 3
77389: ST_TO_ADDR
77390: GO 77771
77392: LD_INT 16
77394: DOUBLE
77395: EQUAL
77396: IFTRUE 77400
77398: GO 77411
77400: POP
// bc_type := b_ext_gun ; 17 :
77401: LD_ADDR_OWVAR 42
77405: PUSH
77406: LD_INT 17
77408: ST_TO_ADDR
77409: GO 77771
77411: LD_INT 17
77413: DOUBLE
77414: EQUAL
77415: IFTRUE 77419
77417: GO 77447
77419: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
77420: LD_ADDR_OWVAR 42
77424: PUSH
77425: LD_INT 19
77427: PUSH
77428: LD_INT 23
77430: PUSH
77431: LD_INT 19
77433: PUSH
77434: EMPTY
77435: LIST
77436: LIST
77437: LIST
77438: PUSH
77439: LD_VAR 0 1
77443: ARRAY
77444: ST_TO_ADDR
77445: GO 77771
77447: LD_INT 18
77449: DOUBLE
77450: EQUAL
77451: IFTRUE 77455
77453: GO 77466
77455: POP
// bc_type := b_ext_radar ; 19 :
77456: LD_ADDR_OWVAR 42
77460: PUSH
77461: LD_INT 20
77463: ST_TO_ADDR
77464: GO 77771
77466: LD_INT 19
77468: DOUBLE
77469: EQUAL
77470: IFTRUE 77474
77472: GO 77485
77474: POP
// bc_type := b_ext_radio ; 20 :
77475: LD_ADDR_OWVAR 42
77479: PUSH
77480: LD_INT 22
77482: ST_TO_ADDR
77483: GO 77771
77485: LD_INT 20
77487: DOUBLE
77488: EQUAL
77489: IFTRUE 77493
77491: GO 77504
77493: POP
// bc_type := b_ext_siberium ; 21 :
77494: LD_ADDR_OWVAR 42
77498: PUSH
77499: LD_INT 21
77501: ST_TO_ADDR
77502: GO 77771
77504: LD_INT 21
77506: DOUBLE
77507: EQUAL
77508: IFTRUE 77512
77510: GO 77523
77512: POP
// bc_type := b_ext_computer ; 22 :
77513: LD_ADDR_OWVAR 42
77517: PUSH
77518: LD_INT 24
77520: ST_TO_ADDR
77521: GO 77771
77523: LD_INT 22
77525: DOUBLE
77526: EQUAL
77527: IFTRUE 77531
77529: GO 77542
77531: POP
// bc_type := b_ext_track ; 23 :
77532: LD_ADDR_OWVAR 42
77536: PUSH
77537: LD_INT 16
77539: ST_TO_ADDR
77540: GO 77771
77542: LD_INT 23
77544: DOUBLE
77545: EQUAL
77546: IFTRUE 77550
77548: GO 77561
77550: POP
// bc_type := b_ext_laser ; 24 :
77551: LD_ADDR_OWVAR 42
77555: PUSH
77556: LD_INT 25
77558: ST_TO_ADDR
77559: GO 77771
77561: LD_INT 24
77563: DOUBLE
77564: EQUAL
77565: IFTRUE 77569
77567: GO 77580
77569: POP
// bc_type := b_control_tower ; 25 :
77570: LD_ADDR_OWVAR 42
77574: PUSH
77575: LD_INT 36
77577: ST_TO_ADDR
77578: GO 77771
77580: LD_INT 25
77582: DOUBLE
77583: EQUAL
77584: IFTRUE 77588
77586: GO 77599
77588: POP
// bc_type := b_breastwork ; 26 :
77589: LD_ADDR_OWVAR 42
77593: PUSH
77594: LD_INT 31
77596: ST_TO_ADDR
77597: GO 77771
77599: LD_INT 26
77601: DOUBLE
77602: EQUAL
77603: IFTRUE 77607
77605: GO 77618
77607: POP
// bc_type := b_bunker ; 27 :
77608: LD_ADDR_OWVAR 42
77612: PUSH
77613: LD_INT 32
77615: ST_TO_ADDR
77616: GO 77771
77618: LD_INT 27
77620: DOUBLE
77621: EQUAL
77622: IFTRUE 77626
77624: GO 77637
77626: POP
// bc_type := b_turret ; 28 :
77627: LD_ADDR_OWVAR 42
77631: PUSH
77632: LD_INT 33
77634: ST_TO_ADDR
77635: GO 77771
77637: LD_INT 28
77639: DOUBLE
77640: EQUAL
77641: IFTRUE 77645
77643: GO 77656
77645: POP
// bc_type := b_armoury ; 29 :
77646: LD_ADDR_OWVAR 42
77650: PUSH
77651: LD_INT 4
77653: ST_TO_ADDR
77654: GO 77771
77656: LD_INT 29
77658: DOUBLE
77659: EQUAL
77660: IFTRUE 77664
77662: GO 77675
77664: POP
// bc_type := b_barracks ; 30 :
77665: LD_ADDR_OWVAR 42
77669: PUSH
77670: LD_INT 5
77672: ST_TO_ADDR
77673: GO 77771
77675: LD_INT 30
77677: DOUBLE
77678: EQUAL
77679: IFTRUE 77683
77681: GO 77694
77683: POP
// bc_type := b_solar_power ; 31 :
77684: LD_ADDR_OWVAR 42
77688: PUSH
77689: LD_INT 27
77691: ST_TO_ADDR
77692: GO 77771
77694: LD_INT 31
77696: DOUBLE
77697: EQUAL
77698: IFTRUE 77702
77700: GO 77713
77702: POP
// bc_type := b_oil_power ; 32 :
77703: LD_ADDR_OWVAR 42
77707: PUSH
77708: LD_INT 26
77710: ST_TO_ADDR
77711: GO 77771
77713: LD_INT 32
77715: DOUBLE
77716: EQUAL
77717: IFTRUE 77721
77719: GO 77732
77721: POP
// bc_type := b_siberite_power ; 33 :
77722: LD_ADDR_OWVAR 42
77726: PUSH
77727: LD_INT 28
77729: ST_TO_ADDR
77730: GO 77771
77732: LD_INT 33
77734: DOUBLE
77735: EQUAL
77736: IFTRUE 77740
77738: GO 77751
77740: POP
// bc_type := b_oil_mine ; 34 :
77741: LD_ADDR_OWVAR 42
77745: PUSH
77746: LD_INT 29
77748: ST_TO_ADDR
77749: GO 77771
77751: LD_INT 34
77753: DOUBLE
77754: EQUAL
77755: IFTRUE 77759
77757: GO 77770
77759: POP
// bc_type := b_siberite_mine ; end ;
77760: LD_ADDR_OWVAR 42
77764: PUSH
77765: LD_INT 30
77767: ST_TO_ADDR
77768: GO 77771
77770: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
77771: LD_ADDR_VAR 0 8
77775: PUSH
77776: LD_VAR 0 5
77780: PPUSH
77781: LD_VAR 0 6
77785: PPUSH
77786: LD_VAR 0 3
77790: PPUSH
77791: CALL_OW 47
77795: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
77796: LD_OWVAR 42
77800: PUSH
77801: LD_INT 32
77803: PUSH
77804: LD_INT 33
77806: PUSH
77807: EMPTY
77808: LIST
77809: LIST
77810: IN
77811: IFFALSE 77827
// PlaceWeaponTurret ( b , weapon ) ;
77813: LD_VAR 0 8
77817: PPUSH
77818: LD_VAR 0 4
77822: PPUSH
77823: CALL_OW 431
// end ;
77827: LD_VAR 0 7
77831: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
77832: LD_INT 0
77834: PPUSH
77835: PPUSH
77836: PPUSH
77837: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
77838: LD_ADDR_VAR 0 4
77842: PUSH
77843: LD_INT 22
77845: PUSH
77846: LD_OWVAR 2
77850: PUSH
77851: EMPTY
77852: LIST
77853: LIST
77854: PUSH
77855: LD_INT 2
77857: PUSH
77858: LD_INT 30
77860: PUSH
77861: LD_INT 0
77863: PUSH
77864: EMPTY
77865: LIST
77866: LIST
77867: PUSH
77868: LD_INT 30
77870: PUSH
77871: LD_INT 1
77873: PUSH
77874: EMPTY
77875: LIST
77876: LIST
77877: PUSH
77878: EMPTY
77879: LIST
77880: LIST
77881: LIST
77882: PUSH
77883: EMPTY
77884: LIST
77885: LIST
77886: PPUSH
77887: CALL_OW 69
77891: ST_TO_ADDR
// if not tmp then
77892: LD_VAR 0 4
77896: NOT
77897: IFFALSE 77901
// exit ;
77899: GO 77960
// for i in tmp do
77901: LD_ADDR_VAR 0 2
77905: PUSH
77906: LD_VAR 0 4
77910: PUSH
77911: FOR_IN
77912: IFFALSE 77958
// for j = 1 to 3 do
77914: LD_ADDR_VAR 0 3
77918: PUSH
77919: DOUBLE
77920: LD_INT 1
77922: DEC
77923: ST_TO_ADDR
77924: LD_INT 3
77926: PUSH
77927: FOR_TO
77928: IFFALSE 77954
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
77930: LD_VAR 0 2
77934: PPUSH
77935: CALL_OW 274
77939: PPUSH
77940: LD_VAR 0 3
77944: PPUSH
77945: LD_INT 99999
77947: PPUSH
77948: CALL_OW 277
77952: GO 77927
77954: POP
77955: POP
77956: GO 77911
77958: POP
77959: POP
// end ;
77960: LD_VAR 0 1
77964: RET
// export function hHackSetLevel10 ; var i , j ; begin
77965: LD_INT 0
77967: PPUSH
77968: PPUSH
77969: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
77970: LD_ADDR_VAR 0 2
77974: PUSH
77975: LD_INT 21
77977: PUSH
77978: LD_INT 1
77980: PUSH
77981: EMPTY
77982: LIST
77983: LIST
77984: PPUSH
77985: CALL_OW 69
77989: PUSH
77990: FOR_IN
77991: IFFALSE 78043
// if IsSelected ( i ) then
77993: LD_VAR 0 2
77997: PPUSH
77998: CALL_OW 306
78002: IFFALSE 78041
// begin for j := 1 to 4 do
78004: LD_ADDR_VAR 0 3
78008: PUSH
78009: DOUBLE
78010: LD_INT 1
78012: DEC
78013: ST_TO_ADDR
78014: LD_INT 4
78016: PUSH
78017: FOR_TO
78018: IFFALSE 78039
// SetSkill ( i , j , 10 ) ;
78020: LD_VAR 0 2
78024: PPUSH
78025: LD_VAR 0 3
78029: PPUSH
78030: LD_INT 10
78032: PPUSH
78033: CALL_OW 237
78037: GO 78017
78039: POP
78040: POP
// end ;
78041: GO 77990
78043: POP
78044: POP
// end ;
78045: LD_VAR 0 1
78049: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
78050: LD_INT 0
78052: PPUSH
78053: PPUSH
78054: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
78055: LD_ADDR_VAR 0 2
78059: PUSH
78060: LD_INT 22
78062: PUSH
78063: LD_OWVAR 2
78067: PUSH
78068: EMPTY
78069: LIST
78070: LIST
78071: PUSH
78072: LD_INT 21
78074: PUSH
78075: LD_INT 1
78077: PUSH
78078: EMPTY
78079: LIST
78080: LIST
78081: PUSH
78082: EMPTY
78083: LIST
78084: LIST
78085: PPUSH
78086: CALL_OW 69
78090: PUSH
78091: FOR_IN
78092: IFFALSE 78133
// begin for j := 1 to 4 do
78094: LD_ADDR_VAR 0 3
78098: PUSH
78099: DOUBLE
78100: LD_INT 1
78102: DEC
78103: ST_TO_ADDR
78104: LD_INT 4
78106: PUSH
78107: FOR_TO
78108: IFFALSE 78129
// SetSkill ( i , j , 10 ) ;
78110: LD_VAR 0 2
78114: PPUSH
78115: LD_VAR 0 3
78119: PPUSH
78120: LD_INT 10
78122: PPUSH
78123: CALL_OW 237
78127: GO 78107
78129: POP
78130: POP
// end ;
78131: GO 78091
78133: POP
78134: POP
// end ;
78135: LD_VAR 0 1
78139: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
78140: LD_INT 0
78142: PPUSH
// uc_side := your_side ;
78143: LD_ADDR_OWVAR 20
78147: PUSH
78148: LD_OWVAR 2
78152: ST_TO_ADDR
// uc_nation := nation ;
78153: LD_ADDR_OWVAR 21
78157: PUSH
78158: LD_VAR 0 1
78162: ST_TO_ADDR
// InitHc ;
78163: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
78167: LD_INT 0
78169: PPUSH
78170: LD_VAR 0 2
78174: PPUSH
78175: LD_VAR 0 3
78179: PPUSH
78180: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
78184: LD_VAR 0 4
78188: PPUSH
78189: LD_VAR 0 5
78193: PPUSH
78194: CALL_OW 428
78198: PUSH
78199: LD_INT 0
78201: EQUAL
78202: IFFALSE 78226
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
78204: CALL_OW 44
78208: PPUSH
78209: LD_VAR 0 4
78213: PPUSH
78214: LD_VAR 0 5
78218: PPUSH
78219: LD_INT 1
78221: PPUSH
78222: CALL_OW 48
// end ;
78226: LD_VAR 0 6
78230: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
78231: LD_INT 0
78233: PPUSH
78234: PPUSH
// uc_side := your_side ;
78235: LD_ADDR_OWVAR 20
78239: PUSH
78240: LD_OWVAR 2
78244: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
78245: LD_VAR 0 1
78249: PUSH
78250: LD_INT 1
78252: PUSH
78253: LD_INT 2
78255: PUSH
78256: LD_INT 3
78258: PUSH
78259: LD_INT 4
78261: PUSH
78262: LD_INT 5
78264: PUSH
78265: EMPTY
78266: LIST
78267: LIST
78268: LIST
78269: LIST
78270: LIST
78271: IN
78272: IFFALSE 78284
// uc_nation := nation_american else
78274: LD_ADDR_OWVAR 21
78278: PUSH
78279: LD_INT 1
78281: ST_TO_ADDR
78282: GO 78327
// if chassis in [ 11 , 12 , 13 , 14 ] then
78284: LD_VAR 0 1
78288: PUSH
78289: LD_INT 11
78291: PUSH
78292: LD_INT 12
78294: PUSH
78295: LD_INT 13
78297: PUSH
78298: LD_INT 14
78300: PUSH
78301: EMPTY
78302: LIST
78303: LIST
78304: LIST
78305: LIST
78306: IN
78307: IFFALSE 78319
// uc_nation := nation_arabian else
78309: LD_ADDR_OWVAR 21
78313: PUSH
78314: LD_INT 2
78316: ST_TO_ADDR
78317: GO 78327
// uc_nation := nation_russian ;
78319: LD_ADDR_OWVAR 21
78323: PUSH
78324: LD_INT 3
78326: ST_TO_ADDR
// vc_chassis := chassis ;
78327: LD_ADDR_OWVAR 37
78331: PUSH
78332: LD_VAR 0 1
78336: ST_TO_ADDR
// vc_engine := engine ;
78337: LD_ADDR_OWVAR 39
78341: PUSH
78342: LD_VAR 0 2
78346: ST_TO_ADDR
// vc_control := control ;
78347: LD_ADDR_OWVAR 38
78351: PUSH
78352: LD_VAR 0 3
78356: ST_TO_ADDR
// vc_weapon := weapon ;
78357: LD_ADDR_OWVAR 40
78361: PUSH
78362: LD_VAR 0 4
78366: ST_TO_ADDR
// un := CreateVehicle ;
78367: LD_ADDR_VAR 0 8
78371: PUSH
78372: CALL_OW 45
78376: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
78377: LD_VAR 0 8
78381: PPUSH
78382: LD_INT 0
78384: PPUSH
78385: LD_INT 5
78387: PPUSH
78388: CALL_OW 12
78392: PPUSH
78393: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
78397: LD_VAR 0 8
78401: PPUSH
78402: LD_VAR 0 5
78406: PPUSH
78407: LD_VAR 0 6
78411: PPUSH
78412: LD_INT 1
78414: PPUSH
78415: CALL_OW 48
// end ;
78419: LD_VAR 0 7
78423: RET
// export hInvincible ; every 1 do
78424: GO 78426
78426: DISABLE
// hInvincible := [ ] ;
78427: LD_ADDR_EXP 104
78431: PUSH
78432: EMPTY
78433: ST_TO_ADDR
78434: END
// every 10 do var i ;
78435: GO 78437
78437: DISABLE
78438: LD_INT 0
78440: PPUSH
// begin enable ;
78441: ENABLE
// if not hInvincible then
78442: LD_EXP 104
78446: NOT
78447: IFFALSE 78451
// exit ;
78449: GO 78495
// for i in hInvincible do
78451: LD_ADDR_VAR 0 1
78455: PUSH
78456: LD_EXP 104
78460: PUSH
78461: FOR_IN
78462: IFFALSE 78493
// if GetLives ( i ) < 1000 then
78464: LD_VAR 0 1
78468: PPUSH
78469: CALL_OW 256
78473: PUSH
78474: LD_INT 1000
78476: LESS
78477: IFFALSE 78491
// SetLives ( i , 1000 ) ;
78479: LD_VAR 0 1
78483: PPUSH
78484: LD_INT 1000
78486: PPUSH
78487: CALL_OW 234
78491: GO 78461
78493: POP
78494: POP
// end ;
78495: PPOPN 1
78497: END
// export function hHackInvincible ; var i ; begin
78498: LD_INT 0
78500: PPUSH
78501: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
78502: LD_ADDR_VAR 0 2
78506: PUSH
78507: LD_INT 2
78509: PUSH
78510: LD_INT 21
78512: PUSH
78513: LD_INT 1
78515: PUSH
78516: EMPTY
78517: LIST
78518: LIST
78519: PUSH
78520: LD_INT 21
78522: PUSH
78523: LD_INT 2
78525: PUSH
78526: EMPTY
78527: LIST
78528: LIST
78529: PUSH
78530: EMPTY
78531: LIST
78532: LIST
78533: LIST
78534: PPUSH
78535: CALL_OW 69
78539: PUSH
78540: FOR_IN
78541: IFFALSE 78602
// if IsSelected ( i ) then
78543: LD_VAR 0 2
78547: PPUSH
78548: CALL_OW 306
78552: IFFALSE 78600
// begin if i in hInvincible then
78554: LD_VAR 0 2
78558: PUSH
78559: LD_EXP 104
78563: IN
78564: IFFALSE 78584
// hInvincible := hInvincible diff i else
78566: LD_ADDR_EXP 104
78570: PUSH
78571: LD_EXP 104
78575: PUSH
78576: LD_VAR 0 2
78580: DIFF
78581: ST_TO_ADDR
78582: GO 78600
// hInvincible := hInvincible union i ;
78584: LD_ADDR_EXP 104
78588: PUSH
78589: LD_EXP 104
78593: PUSH
78594: LD_VAR 0 2
78598: UNION
78599: ST_TO_ADDR
// end ;
78600: GO 78540
78602: POP
78603: POP
// end ;
78604: LD_VAR 0 1
78608: RET
// export function hHackInvisible ; var i , j ; begin
78609: LD_INT 0
78611: PPUSH
78612: PPUSH
78613: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
78614: LD_ADDR_VAR 0 2
78618: PUSH
78619: LD_INT 21
78621: PUSH
78622: LD_INT 1
78624: PUSH
78625: EMPTY
78626: LIST
78627: LIST
78628: PPUSH
78629: CALL_OW 69
78633: PUSH
78634: FOR_IN
78635: IFFALSE 78659
// if IsSelected ( i ) then
78637: LD_VAR 0 2
78641: PPUSH
78642: CALL_OW 306
78646: IFFALSE 78657
// ComForceInvisible ( i ) ;
78648: LD_VAR 0 2
78652: PPUSH
78653: CALL_OW 496
78657: GO 78634
78659: POP
78660: POP
// end ;
78661: LD_VAR 0 1
78665: RET
// export function hHackChangeYourSide ; begin
78666: LD_INT 0
78668: PPUSH
// if your_side = 8 then
78669: LD_OWVAR 2
78673: PUSH
78674: LD_INT 8
78676: EQUAL
78677: IFFALSE 78689
// your_side := 0 else
78679: LD_ADDR_OWVAR 2
78683: PUSH
78684: LD_INT 0
78686: ST_TO_ADDR
78687: GO 78703
// your_side := your_side + 1 ;
78689: LD_ADDR_OWVAR 2
78693: PUSH
78694: LD_OWVAR 2
78698: PUSH
78699: LD_INT 1
78701: PLUS
78702: ST_TO_ADDR
// end ;
78703: LD_VAR 0 1
78707: RET
// export function hHackChangeUnitSide ; var i , j ; begin
78708: LD_INT 0
78710: PPUSH
78711: PPUSH
78712: PPUSH
// for i in all_units do
78713: LD_ADDR_VAR 0 2
78717: PUSH
78718: LD_OWVAR 3
78722: PUSH
78723: FOR_IN
78724: IFFALSE 78802
// if IsSelected ( i ) then
78726: LD_VAR 0 2
78730: PPUSH
78731: CALL_OW 306
78735: IFFALSE 78800
// begin j := GetSide ( i ) ;
78737: LD_ADDR_VAR 0 3
78741: PUSH
78742: LD_VAR 0 2
78746: PPUSH
78747: CALL_OW 255
78751: ST_TO_ADDR
// if j = 8 then
78752: LD_VAR 0 3
78756: PUSH
78757: LD_INT 8
78759: EQUAL
78760: IFFALSE 78772
// j := 0 else
78762: LD_ADDR_VAR 0 3
78766: PUSH
78767: LD_INT 0
78769: ST_TO_ADDR
78770: GO 78786
// j := j + 1 ;
78772: LD_ADDR_VAR 0 3
78776: PUSH
78777: LD_VAR 0 3
78781: PUSH
78782: LD_INT 1
78784: PLUS
78785: ST_TO_ADDR
// SetSide ( i , j ) ;
78786: LD_VAR 0 2
78790: PPUSH
78791: LD_VAR 0 3
78795: PPUSH
78796: CALL_OW 235
// end ;
78800: GO 78723
78802: POP
78803: POP
// end ;
78804: LD_VAR 0 1
78808: RET
// export function hHackFog ; begin
78809: LD_INT 0
78811: PPUSH
// FogOff ( true ) ;
78812: LD_INT 1
78814: PPUSH
78815: CALL_OW 344
// end ;
78819: LD_VAR 0 1
78823: RET
// export function hHackTeleport ( unit , x , y ) ; begin
78824: LD_INT 0
78826: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
78827: LD_VAR 0 1
78831: PPUSH
78832: LD_VAR 0 2
78836: PPUSH
78837: LD_VAR 0 3
78841: PPUSH
78842: LD_INT 1
78844: PPUSH
78845: LD_INT 1
78847: PPUSH
78848: CALL_OW 483
// CenterOnXY ( x , y ) ;
78852: LD_VAR 0 2
78856: PPUSH
78857: LD_VAR 0 3
78861: PPUSH
78862: CALL_OW 84
// end ;
78866: LD_VAR 0 4
78870: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
78871: LD_INT 0
78873: PPUSH
78874: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
78875: LD_VAR 0 1
78879: NOT
78880: PUSH
78881: LD_VAR 0 2
78885: PPUSH
78886: LD_VAR 0 3
78890: PPUSH
78891: CALL_OW 488
78895: NOT
78896: OR
78897: PUSH
78898: LD_VAR 0 1
78902: PPUSH
78903: CALL_OW 266
78907: PUSH
78908: LD_INT 3
78910: NONEQUAL
78911: PUSH
78912: LD_VAR 0 1
78916: PPUSH
78917: CALL_OW 247
78921: PUSH
78922: LD_INT 1
78924: EQUAL
78925: NOT
78926: AND
78927: OR
78928: IFFALSE 78932
// exit ;
78930: GO 79081
// if GetType ( factory ) = unit_human then
78932: LD_VAR 0 1
78936: PPUSH
78937: CALL_OW 247
78941: PUSH
78942: LD_INT 1
78944: EQUAL
78945: IFFALSE 78962
// factory := IsInUnit ( factory ) ;
78947: LD_ADDR_VAR 0 1
78951: PUSH
78952: LD_VAR 0 1
78956: PPUSH
78957: CALL_OW 310
78961: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
78962: LD_VAR 0 1
78966: PPUSH
78967: CALL_OW 266
78971: PUSH
78972: LD_INT 3
78974: NONEQUAL
78975: IFFALSE 78979
// exit ;
78977: GO 79081
// if HexInfo ( x , y ) = factory then
78979: LD_VAR 0 2
78983: PPUSH
78984: LD_VAR 0 3
78988: PPUSH
78989: CALL_OW 428
78993: PUSH
78994: LD_VAR 0 1
78998: EQUAL
78999: IFFALSE 79026
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
79001: LD_ADDR_EXP 105
79005: PUSH
79006: LD_EXP 105
79010: PPUSH
79011: LD_VAR 0 1
79015: PPUSH
79016: LD_INT 0
79018: PPUSH
79019: CALL_OW 1
79023: ST_TO_ADDR
79024: GO 79077
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
79026: LD_ADDR_EXP 105
79030: PUSH
79031: LD_EXP 105
79035: PPUSH
79036: LD_VAR 0 1
79040: PPUSH
79041: LD_VAR 0 1
79045: PPUSH
79046: CALL_OW 255
79050: PUSH
79051: LD_VAR 0 1
79055: PUSH
79056: LD_VAR 0 2
79060: PUSH
79061: LD_VAR 0 3
79065: PUSH
79066: EMPTY
79067: LIST
79068: LIST
79069: LIST
79070: LIST
79071: PPUSH
79072: CALL_OW 1
79076: ST_TO_ADDR
// UpdateFactoryWaypoints ;
79077: CALL 79086 0 0
// end ;
79081: LD_VAR 0 4
79085: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
79086: LD_INT 0
79088: PPUSH
79089: PPUSH
79090: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
79091: LD_STRING resetFactoryWaypoint();
79093: PPUSH
79094: CALL_OW 559
// if factoryWaypoints then
79098: LD_EXP 105
79102: IFFALSE 79228
// begin list := PrepareArray ( factoryWaypoints ) ;
79104: LD_ADDR_VAR 0 3
79108: PUSH
79109: LD_EXP 105
79113: PPUSH
79114: CALL 57984 0 1
79118: ST_TO_ADDR
// for i := 1 to list do
79119: LD_ADDR_VAR 0 2
79123: PUSH
79124: DOUBLE
79125: LD_INT 1
79127: DEC
79128: ST_TO_ADDR
79129: LD_VAR 0 3
79133: PUSH
79134: FOR_TO
79135: IFFALSE 79226
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
79137: LD_STRING setFactoryWaypointXY(
79139: PUSH
79140: LD_VAR 0 3
79144: PUSH
79145: LD_VAR 0 2
79149: ARRAY
79150: PUSH
79151: LD_INT 1
79153: ARRAY
79154: STR
79155: PUSH
79156: LD_STRING ,
79158: STR
79159: PUSH
79160: LD_VAR 0 3
79164: PUSH
79165: LD_VAR 0 2
79169: ARRAY
79170: PUSH
79171: LD_INT 2
79173: ARRAY
79174: STR
79175: PUSH
79176: LD_STRING ,
79178: STR
79179: PUSH
79180: LD_VAR 0 3
79184: PUSH
79185: LD_VAR 0 2
79189: ARRAY
79190: PUSH
79191: LD_INT 3
79193: ARRAY
79194: STR
79195: PUSH
79196: LD_STRING ,
79198: STR
79199: PUSH
79200: LD_VAR 0 3
79204: PUSH
79205: LD_VAR 0 2
79209: ARRAY
79210: PUSH
79211: LD_INT 4
79213: ARRAY
79214: STR
79215: PUSH
79216: LD_STRING )
79218: STR
79219: PPUSH
79220: CALL_OW 559
79224: GO 79134
79226: POP
79227: POP
// end ; end ;
79228: LD_VAR 0 1
79232: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
79233: LD_INT 0
79235: PPUSH
// if HexInfo ( x , y ) = warehouse then
79236: LD_VAR 0 2
79240: PPUSH
79241: LD_VAR 0 3
79245: PPUSH
79246: CALL_OW 428
79250: PUSH
79251: LD_VAR 0 1
79255: EQUAL
79256: IFFALSE 79283
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
79258: LD_ADDR_EXP 106
79262: PUSH
79263: LD_EXP 106
79267: PPUSH
79268: LD_VAR 0 1
79272: PPUSH
79273: LD_INT 0
79275: PPUSH
79276: CALL_OW 1
79280: ST_TO_ADDR
79281: GO 79334
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
79283: LD_ADDR_EXP 106
79287: PUSH
79288: LD_EXP 106
79292: PPUSH
79293: LD_VAR 0 1
79297: PPUSH
79298: LD_VAR 0 1
79302: PPUSH
79303: CALL_OW 255
79307: PUSH
79308: LD_VAR 0 1
79312: PUSH
79313: LD_VAR 0 2
79317: PUSH
79318: LD_VAR 0 3
79322: PUSH
79323: EMPTY
79324: LIST
79325: LIST
79326: LIST
79327: LIST
79328: PPUSH
79329: CALL_OW 1
79333: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
79334: CALL 79343 0 0
// end ;
79338: LD_VAR 0 4
79342: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
79343: LD_INT 0
79345: PPUSH
79346: PPUSH
79347: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
79348: LD_STRING resetWarehouseGatheringPoints();
79350: PPUSH
79351: CALL_OW 559
// if warehouseGatheringPoints then
79355: LD_EXP 106
79359: IFFALSE 79485
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
79361: LD_ADDR_VAR 0 3
79365: PUSH
79366: LD_EXP 106
79370: PPUSH
79371: CALL 57984 0 1
79375: ST_TO_ADDR
// for i := 1 to list do
79376: LD_ADDR_VAR 0 2
79380: PUSH
79381: DOUBLE
79382: LD_INT 1
79384: DEC
79385: ST_TO_ADDR
79386: LD_VAR 0 3
79390: PUSH
79391: FOR_TO
79392: IFFALSE 79483
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
79394: LD_STRING setWarehouseGatheringPointXY(
79396: PUSH
79397: LD_VAR 0 3
79401: PUSH
79402: LD_VAR 0 2
79406: ARRAY
79407: PUSH
79408: LD_INT 1
79410: ARRAY
79411: STR
79412: PUSH
79413: LD_STRING ,
79415: STR
79416: PUSH
79417: LD_VAR 0 3
79421: PUSH
79422: LD_VAR 0 2
79426: ARRAY
79427: PUSH
79428: LD_INT 2
79430: ARRAY
79431: STR
79432: PUSH
79433: LD_STRING ,
79435: STR
79436: PUSH
79437: LD_VAR 0 3
79441: PUSH
79442: LD_VAR 0 2
79446: ARRAY
79447: PUSH
79448: LD_INT 3
79450: ARRAY
79451: STR
79452: PUSH
79453: LD_STRING ,
79455: STR
79456: PUSH
79457: LD_VAR 0 3
79461: PUSH
79462: LD_VAR 0 2
79466: ARRAY
79467: PUSH
79468: LD_INT 4
79470: ARRAY
79471: STR
79472: PUSH
79473: LD_STRING )
79475: STR
79476: PPUSH
79477: CALL_OW 559
79481: GO 79391
79483: POP
79484: POP
// end ; end ;
79485: LD_VAR 0 1
79489: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
79490: LD_EXP 106
79494: IFFALSE 80179
79496: GO 79498
79498: DISABLE
79499: LD_INT 0
79501: PPUSH
79502: PPUSH
79503: PPUSH
79504: PPUSH
79505: PPUSH
79506: PPUSH
79507: PPUSH
79508: PPUSH
79509: PPUSH
// begin enable ;
79510: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
79511: LD_ADDR_VAR 0 3
79515: PUSH
79516: LD_EXP 106
79520: PPUSH
79521: CALL 57984 0 1
79525: ST_TO_ADDR
// if not list then
79526: LD_VAR 0 3
79530: NOT
79531: IFFALSE 79535
// exit ;
79533: GO 80179
// for i := 1 to list do
79535: LD_ADDR_VAR 0 1
79539: PUSH
79540: DOUBLE
79541: LD_INT 1
79543: DEC
79544: ST_TO_ADDR
79545: LD_VAR 0 3
79549: PUSH
79550: FOR_TO
79551: IFFALSE 80177
// begin depot := list [ i ] [ 2 ] ;
79553: LD_ADDR_VAR 0 8
79557: PUSH
79558: LD_VAR 0 3
79562: PUSH
79563: LD_VAR 0 1
79567: ARRAY
79568: PUSH
79569: LD_INT 2
79571: ARRAY
79572: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
79573: LD_ADDR_VAR 0 5
79577: PUSH
79578: LD_VAR 0 3
79582: PUSH
79583: LD_VAR 0 1
79587: ARRAY
79588: PUSH
79589: LD_INT 1
79591: ARRAY
79592: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
79593: LD_VAR 0 8
79597: PPUSH
79598: CALL_OW 301
79602: PUSH
79603: LD_VAR 0 5
79607: PUSH
79608: LD_VAR 0 8
79612: PPUSH
79613: CALL_OW 255
79617: NONEQUAL
79618: OR
79619: IFFALSE 79648
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
79621: LD_ADDR_EXP 106
79625: PUSH
79626: LD_EXP 106
79630: PPUSH
79631: LD_VAR 0 8
79635: PPUSH
79636: LD_INT 0
79638: PPUSH
79639: CALL_OW 1
79643: ST_TO_ADDR
// exit ;
79644: POP
79645: POP
79646: GO 80179
// end ; x := list [ i ] [ 3 ] ;
79648: LD_ADDR_VAR 0 6
79652: PUSH
79653: LD_VAR 0 3
79657: PUSH
79658: LD_VAR 0 1
79662: ARRAY
79663: PUSH
79664: LD_INT 3
79666: ARRAY
79667: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
79668: LD_ADDR_VAR 0 7
79672: PUSH
79673: LD_VAR 0 3
79677: PUSH
79678: LD_VAR 0 1
79682: ARRAY
79683: PUSH
79684: LD_INT 4
79686: ARRAY
79687: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
79688: LD_ADDR_VAR 0 9
79692: PUSH
79693: LD_VAR 0 6
79697: PPUSH
79698: LD_VAR 0 7
79702: PPUSH
79703: LD_INT 16
79705: PPUSH
79706: CALL 56572 0 3
79710: ST_TO_ADDR
// if not cratesNearbyPoint then
79711: LD_VAR 0 9
79715: NOT
79716: IFFALSE 79722
// exit ;
79718: POP
79719: POP
79720: GO 80179
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
79722: LD_ADDR_VAR 0 4
79726: PUSH
79727: LD_INT 22
79729: PUSH
79730: LD_VAR 0 5
79734: PUSH
79735: EMPTY
79736: LIST
79737: LIST
79738: PUSH
79739: LD_INT 3
79741: PUSH
79742: LD_INT 60
79744: PUSH
79745: EMPTY
79746: LIST
79747: PUSH
79748: EMPTY
79749: LIST
79750: LIST
79751: PUSH
79752: LD_INT 91
79754: PUSH
79755: LD_VAR 0 8
79759: PUSH
79760: LD_INT 6
79762: PUSH
79763: EMPTY
79764: LIST
79765: LIST
79766: LIST
79767: PUSH
79768: LD_INT 2
79770: PUSH
79771: LD_INT 25
79773: PUSH
79774: LD_INT 2
79776: PUSH
79777: EMPTY
79778: LIST
79779: LIST
79780: PUSH
79781: LD_INT 25
79783: PUSH
79784: LD_INT 16
79786: PUSH
79787: EMPTY
79788: LIST
79789: LIST
79790: PUSH
79791: EMPTY
79792: LIST
79793: LIST
79794: LIST
79795: PUSH
79796: EMPTY
79797: LIST
79798: LIST
79799: LIST
79800: LIST
79801: PPUSH
79802: CALL_OW 69
79806: PUSH
79807: LD_VAR 0 8
79811: PPUSH
79812: CALL_OW 313
79816: PPUSH
79817: LD_INT 3
79819: PUSH
79820: LD_INT 60
79822: PUSH
79823: EMPTY
79824: LIST
79825: PUSH
79826: EMPTY
79827: LIST
79828: LIST
79829: PUSH
79830: LD_INT 2
79832: PUSH
79833: LD_INT 25
79835: PUSH
79836: LD_INT 2
79838: PUSH
79839: EMPTY
79840: LIST
79841: LIST
79842: PUSH
79843: LD_INT 25
79845: PUSH
79846: LD_INT 16
79848: PUSH
79849: EMPTY
79850: LIST
79851: LIST
79852: PUSH
79853: EMPTY
79854: LIST
79855: LIST
79856: LIST
79857: PUSH
79858: EMPTY
79859: LIST
79860: LIST
79861: PPUSH
79862: CALL_OW 72
79866: UNION
79867: ST_TO_ADDR
// if tmp then
79868: LD_VAR 0 4
79872: IFFALSE 79952
// begin tmp := ShrinkArray ( tmp , 3 ) ;
79874: LD_ADDR_VAR 0 4
79878: PUSH
79879: LD_VAR 0 4
79883: PPUSH
79884: LD_INT 3
79886: PPUSH
79887: CALL 54541 0 2
79891: ST_TO_ADDR
// for j in tmp do
79892: LD_ADDR_VAR 0 2
79896: PUSH
79897: LD_VAR 0 4
79901: PUSH
79902: FOR_IN
79903: IFFALSE 79946
// begin if IsInUnit ( j ) then
79905: LD_VAR 0 2
79909: PPUSH
79910: CALL_OW 310
79914: IFFALSE 79925
// ComExit ( j ) ;
79916: LD_VAR 0 2
79920: PPUSH
79921: CALL 54624 0 1
// AddComCollect ( j , x , y ) ;
79925: LD_VAR 0 2
79929: PPUSH
79930: LD_VAR 0 6
79934: PPUSH
79935: LD_VAR 0 7
79939: PPUSH
79940: CALL_OW 177
// end ;
79944: GO 79902
79946: POP
79947: POP
// exit ;
79948: POP
79949: POP
79950: GO 80179
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
79952: LD_ADDR_VAR 0 4
79956: PUSH
79957: LD_INT 22
79959: PUSH
79960: LD_VAR 0 5
79964: PUSH
79965: EMPTY
79966: LIST
79967: LIST
79968: PUSH
79969: LD_INT 91
79971: PUSH
79972: LD_VAR 0 8
79976: PUSH
79977: LD_INT 8
79979: PUSH
79980: EMPTY
79981: LIST
79982: LIST
79983: LIST
79984: PUSH
79985: LD_INT 2
79987: PUSH
79988: LD_INT 34
79990: PUSH
79991: LD_INT 12
79993: PUSH
79994: EMPTY
79995: LIST
79996: LIST
79997: PUSH
79998: LD_INT 34
80000: PUSH
80001: LD_INT 51
80003: PUSH
80004: EMPTY
80005: LIST
80006: LIST
80007: PUSH
80008: LD_INT 34
80010: PUSH
80011: LD_INT 32
80013: PUSH
80014: EMPTY
80015: LIST
80016: LIST
80017: PUSH
80018: LD_INT 34
80020: PUSH
80021: LD_INT 89
80023: PUSH
80024: EMPTY
80025: LIST
80026: LIST
80027: PUSH
80028: EMPTY
80029: LIST
80030: LIST
80031: LIST
80032: LIST
80033: LIST
80034: PUSH
80035: EMPTY
80036: LIST
80037: LIST
80038: LIST
80039: PPUSH
80040: CALL_OW 69
80044: ST_TO_ADDR
// if tmp then
80045: LD_VAR 0 4
80049: IFFALSE 80175
// begin for j in tmp do
80051: LD_ADDR_VAR 0 2
80055: PUSH
80056: LD_VAR 0 4
80060: PUSH
80061: FOR_IN
80062: IFFALSE 80173
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
80064: LD_VAR 0 2
80068: PPUSH
80069: CALL_OW 262
80073: PUSH
80074: LD_INT 3
80076: EQUAL
80077: PUSH
80078: LD_VAR 0 2
80082: PPUSH
80083: CALL_OW 261
80087: PUSH
80088: LD_INT 20
80090: GREATER
80091: OR
80092: PUSH
80093: LD_VAR 0 2
80097: PPUSH
80098: CALL_OW 314
80102: NOT
80103: AND
80104: PUSH
80105: LD_VAR 0 2
80109: PPUSH
80110: CALL_OW 263
80114: PUSH
80115: LD_INT 1
80117: NONEQUAL
80118: PUSH
80119: LD_VAR 0 2
80123: PPUSH
80124: CALL_OW 311
80128: OR
80129: AND
80130: IFFALSE 80171
// begin ComCollect ( j , x , y ) ;
80132: LD_VAR 0 2
80136: PPUSH
80137: LD_VAR 0 6
80141: PPUSH
80142: LD_VAR 0 7
80146: PPUSH
80147: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
80151: LD_VAR 0 2
80155: PPUSH
80156: LD_VAR 0 8
80160: PPUSH
80161: CALL_OW 172
// exit ;
80165: POP
80166: POP
80167: POP
80168: POP
80169: GO 80179
// end ;
80171: GO 80061
80173: POP
80174: POP
// end ; end ;
80175: GO 79550
80177: POP
80178: POP
// end ; end_of_file
80179: PPOPN 9
80181: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80182: LD_VAR 0 1
80186: PPUSH
80187: LD_VAR 0 2
80191: PPUSH
80192: LD_VAR 0 3
80196: PPUSH
80197: LD_VAR 0 4
80201: PPUSH
80202: LD_VAR 0 5
80206: PPUSH
80207: LD_VAR 0 6
80211: PPUSH
80212: CALL 64535 0 6
// end ;
80216: PPOPN 6
80218: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80219: LD_INT 0
80221: PPUSH
// begin if not units then
80222: LD_VAR 0 1
80226: NOT
80227: IFFALSE 80231
// exit ;
80229: GO 80231
// end ;
80231: PPOPN 7
80233: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80234: CALL 64422 0 0
// end ; end_of_file
80238: PPOPN 1
80240: END
